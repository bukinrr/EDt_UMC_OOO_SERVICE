
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции) Экспорт
	
	ОперацияКвитанции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКвитанции, "ОперацияКвитанции");
	Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ЭмиссияКМ Тогда
		ДанныеКвитанции.Вставить("ЗавершитьПриОтказе", Истина);
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	ПараметрыОбновления = ИнтеграцияМДЛП.СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
	Если ДокументОбъект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ
	   И ЗначениеЗаполнено(ОтклоненныеНомера) Тогда
		
		Номера = ДокументОбъект.НомераУпаковок.Выгрузить(, "НомерКИЗ, НомерСтроки");
		Номера.Индексы.Добавить("НомерКИЗ");
		Для Каждого Номер Из ОтклоненныеНомера Цикл
			Строка = ДокументОбъект.НомераУпаковок[Номера.Найти(Номер.Ключ, "НомерКИЗ").НомерСтроки - 1];
			Строка.Отклонено = Истина;
			Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбЭмиссииКМ(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	
	ПередачаСведенийЧерезСКЗКМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ПередачаСведенийЧерезСКЗКМ");
	Если ПередачаСведенийЧерезСКЗКМ = Истина Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.Получение_ЭмиссияКМ);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОбЭмиссииКМ(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОбЭмиссииКММДЛП,
		НСтр("ru = 'Эмиссия КМ (информация от СУЗ)'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделИмпортЭкспорт());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 10;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОбЭмиссииКМТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбЭмиссииКММДЛП КАК Уведомления
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|ГДЕ
	|	НЕ Уведомления.ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Организация = &Организация)
	|	И (&Ответственный = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Ответственный = &Ответственный)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбЭмиссииКММДЛП КАК Уведомления
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|ГДЕ
	|	НЕ Уведомления.ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Организация = &Организация)
	|	И (&Ответственный = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Ответственный = &Ответственный)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Уведомления.Ссылка                                                              КАК Ссылка,
	|	Уведомления.ПометкаУдаления                                                     КАК ПометкаУдаления,
	|	Уведомления.Номер                                                               КАК Номер,
	|	Уведомления.Дата                                                                КАК Дата,
	|	Уведомления.Проведен                                                            КАК Проведен,
	|	Уведомления.Основание                                                           КАК Основание,
	|	Уведомления.Организация                                                         КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)                         КАК МестоДеятельности,
	|	Уведомления.Ответственный                                                       КАК Ответственный,
	|	Уведомления.Комментарий                                                         КАК Комментарий,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие1,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие1,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие2,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие2,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие3,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие3,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие4,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие4,
	|	ЕСТЬNULL(Статусы.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Отсутствует))               КАК Статус
	|ИЗ
	|	Документ.УведомлениеОбЭмиссииКММДЛП КАК Уведомления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОбЭмиссииКМТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УведомлениеОбЭмиссииКММДЛП(ДокументСсылка);
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ЭмиссияКМ Тогда
		Возврат ОпределитьУведомлениеОбЭмиссииКМ(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ЭмиссияКМ Тогда
		ЗагрузитьУведомлениеОбЭмиссииКМ(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление об эмиссии кодов маркировки МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОбЭмиссииКММДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОбЭмиссииКММДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление об эмиссии кодов маркировки МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление об эмиссии кодов маркировки МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление об эмиссии кодов маркировки МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УведомлениеОбЭмиссииКММДЛП(ДокументСсылка)
	
	Сообщения = Новый Массив;
	
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеОбЭмиссииКМ(ДанныеДокумента)
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
	
КонецФункции

Процедура ЗагрузитьУведомлениеОбЭмиссииКМ(ДанныеДокумента, ДокументСсылка)
	
	Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	GTIN = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "gtin");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента, "oms_id") Тогда
		ИдентификаторСУЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "oms_id");
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента, "oms_order_id") Тогда
		ИдентификаторЗаказаСУЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "oms_order_id");
	КонецЕсли;
	
	Документ = СоздатьДокумент();
	Документ.УстановитьСсылкуНового(ДокументСсылка);
	Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация);
	
	Документ.GTIN = GTIN;
	Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
	Документ.ПередачаСведенийЧерезСКЗКМ = Истина;
	
	Документ.ИдентификаторСУЗ = ИдентификаторСУЗ;
	Документ.ИдентификаторЗаказаСУЗ = ИдентификаторЗаказаСУЗ;
	
	Для Каждого НомерУпакоки Из ДанныеДокумента.signs.sgtin Цикл
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.НомерКИЗ = НомерУпакоки;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбЭмиссииКМ(Документ);
	
	РезультатОбработки = ДанныеДокумента.Квитанция.result.operation_result;
	Если РезультатОбработки = "Accepted" Или РезультатОбработки = "Partial" Тогда
		Документ.Проведен = Истина;
		// Упаковки будут зарезервированы при проведении
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
	Иначе
		// Резервировать не требуется, так как отказано в регистрации сведений.
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	
КонецПроцедуры

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли