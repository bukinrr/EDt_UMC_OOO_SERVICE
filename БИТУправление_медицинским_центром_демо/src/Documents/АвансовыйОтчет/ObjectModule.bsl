#Область ПрограммныйИнтерфейс

// Возвращает структуру обязательных / уникальных реквизитов документа.
// Возвращаемая структура содержит строковые идентификаторы реквизитов или вложенные структуры для табличных частей.
// Для реквизита значение структуры содержит число 1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьОбязательныеРеквизиты() Экспорт
	// Обязательные поля таблицы товаров.
	ОбязательныеТовары=Новый Структура();
	ОбязательныеТовары.Вставить("Номенклатура",3);
	ОбязательныеТовары.Вставить("Количество",1);
	ОбязательныеТовары.Вставить("ЕдиницаИзмерения",3);
	
	// Обязательные реквизиты документа.
	ОбязательныеРеквизиты=Новый Структура();
	ОбязательныеРеквизиты.Вставить("Склад",1);
	ОбязательныеРеквизиты.Вставить("Контрагент",1);
	ОбязательныеРеквизиты.Вставить("Товары",ОбязательныеТовары);
	
	Возврат ОбязательныеРеквизиты;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, Отказ, Заголовок, ИмяТабличнойЧасти = "Товары")
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, ЕдиницаИзмерения, Сумма");
	
	// Общая процедура проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочему, Отказ, Заголовок, ИмяТабличнойЧасти = "Прочее")
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма, СтатьяЗатрат");
	
	// Общая процедура проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиОплаты(ТаблицаПоПрочему, Отказ, Заголовок, ИмяТабличнойЧасти = "Прочее")
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма, Контрагент");
	
	// Общая процедура проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем ТаблицаПоТоварам;
	
	// Заголовок для сообщений об ошибках проведения.
	ТекстПроведениеДокумента = НСтр("ru='Проведение документа'");
	Заголовок = ТекстПроведениеДокумента + " """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сотрудник");
	Если Товары.Количество()>0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	ПроведениеДокументов.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(Товары.Выгрузить(), Отказ, Заголовок, "Товары");	
	ПроверитьЗаполнениеТабличнойЧастиПрочее(Прочее.Выгрузить(), Отказ, Заголовок, "Прочее");	
	ПроверитьЗаполнениеТабличнойЧастиОплаты(ОплатаПоставщикам.Выгрузить(), Отказ, Заголовок, "ОплатаПоставщикам");	
	
	Если Не Отказ Тогда
		
		// Движения по регистру ПартииТоваровНаСкладах.
		ПроведениеДокументов.ПодготовитьТаблицуТоварыДокумента(ЭтотОбъект, ТаблицаПоТоварам);
		ПартионныйУчет.пуОприходованиеПартийТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Движения.ПартииТоваровНаСкладах);
		
		// Движения по регистру ВзаиморасчетыСКонтрагентами.
		Для Каждого ТекСтрокаОплата Из ОплатаПоставщикам Цикл 
			Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Контрагент = ТекСтрокаОплата.Контрагент;
			Движение.Сумма = ТекСтрокаОплата.Сумма;
		КонецЦикла;
		
		// Движения по регистру затрат.
		Для Каждого ТекСтрокаПрочее Из Прочее Цикл
			
			Движение = Движения.Затраты.Добавить();
			Движение.Регистратор  = Ссылка;
			Движение.Период		  = Дата;
			Движение.СтатьяЗатрат = ТекСтрокаПрочее.СтатьяЗатрат;
			Движение.КатегорияВыработки = ТекСтрокаПрочее.КатегорияВыработки;
			Движение.Номенклатура = ТекСтрокаПрочее.Номенклатура;
			Движение.Сумма = ТекСтрокаПрочее.Сумма;
			ЗаполнитьЗначенияСвойств(Движение,ТекСтрокаПрочее,,"НомерСтроки");
			
		КонецЦикла;
		
		// Движения по регистру взаиморасч с сотрудниками.
		Если СуммаДокумента <> 0 Тогда
			Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
			Движение.ВидДвижения	= Перечисления.ВидыДвиженийПриходРасход.Приход;
			Движение.Период			= Дата; 
			Движение.Сотрудник		= Сотрудник;
			Движение.Сумма			= СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти
