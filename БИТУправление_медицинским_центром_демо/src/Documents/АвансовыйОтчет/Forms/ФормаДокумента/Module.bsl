/////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ. 

&НаКлиенте
Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера.

&НаКлиенте
Перем мИзмененыНастройкиПодбора; // По-умолчанию = Неопределено.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ.

&НаКлиенте
Процедура КоманднаяПанельТоварыКнопкаПодбор(Команда)
	
	РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Товары");	
	
КонецПроцедуры
	
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ.

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ВызватьОбщийМодульПроверитьНомерДокумента(мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ВызватьОбщийМодульПроверитьНомерДокумента(ДатаДок)
	
	РаботаСДиалогамиСервер.ПроверитьНомерДокумента(ЭтаФорма, ДатаДок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТОВАРЫ" И ЕГО РЕКВИЗИТОВ

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		РасчитатьСуммуДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент, НомерСтроки = Неопределено)
	ТоварыРеквизитПриИзменении("Товары.Номенклатура", НомерСтроки);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.ХарактеристикаНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.ЕдиницаИзмерения");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент, НомерСтроки = Неопределено)
	ТоварыРеквизитПриИзменении("Товары.Количество", НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.Цена");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.Сумма");
КонецПроцедуры

&НаКлиенте
ПРоцедура ТоварыРеквизитПриИзменении(ИмяРеквизита, НомерСтроки = Неопределено)
	ОбработкаРеквизитаУпр(ИмяРеквизита,?(НомерСтроки = Неопределено, Элементы.Товары.ТекущиеДанные, Объект.Товары[НомерСтроки]),ЭтаФорма);
КонецПроцедуры

// Обработка изменения реквизитов документа.
// Параметры
//  Имя			– Строка			– Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ЭтаФорма	– Форма				– Ссылка на форму документа. 
//									  Если значение неопределено, производится программная обработка реквизитов.
//  ТекСтрока	– СтрокаТабличнойЧасти – Ссылка на строку табличной части документа, реквизит которой обрабатывается.
//										 Имеет смысл только для табличных частей документов.
//  ДопПараметры– Стркутура			– Структура, содержащая дополнительные параметры обработки реквизита.
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
&НаКлиенте
Функция ОбработкаРеквизитаУпр(Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено) 

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// ОБРАБОТКА РЕКВИЗИТОВ ДОКУМЕНТА.
	Если Имя="Склад" Тогда
		
	// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ".
	ИначеЕсли Имя="Товары.Номенклатура" Тогда
		
		ДопПараметры.Вставить("ИспользоватьЕдиницуТоваров",Истина);
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			ТекСтрока.Цена = ПолучитьЦенуПозиции(ТекСтрока.Номенклатура,ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Поставщик);
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		Иначе
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		КонецЕсли;
		
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Товары.ХарактеристикаНоменклатуры" Тогда
		
		ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		
	ИначеЕсли Имя="Товары.ЕдиницаИзмерения" Тогда
		
		ТекСтрока.Коэффициент = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.ЕдиницаИзмерения, "Коэффициент");
		ТекСтрока.Цена = ПолучитьЦенуПозиции(ТекСтрока.Номенклатура,ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Поставщик);
		ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		
	ИначеЕсли Имя="Товары.Количество" Тогда
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,допПараметры);
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Товары.Цена" Тогда
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Товары.Сумма" Тогда
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		РасчитатьСуммуДокумента();
	Иначе 
		Возврат РаботаСДокументамиКлиент.
		РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
	КонецЕсли;
КонецФункции // ОбработкаРеквизита().

&НаСервере
Функция ПолучитьЦенуПозиции(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ЕдиницаИзмерения = Неопределено, Поставщик = Неопределено)
	
	СтруктураЦен = Ценообразование.ПолучитьЦену(Поставщик, Номенклатура, , ХарактеристикаНоменклатуры, ЕдиницаИзмерения);
	
	// Если цена не найдена, выполняется поиск цены, общей для поставщиков
	Если СтруктураЦен.Цена = 0 Тогда
		СтруктураЦен = Ценообразование.ПолучитьЦену(Неопределено, Номенклатура, , ХарактеристикаНоменклатуры, ЕдиницаИзмерения);	
	КонецЕсли;
	
	Возврат СтруктураЦен.Цена;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);
	
	ПоказыватьАртикул = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоказыватьАртикул" , ТекущаяДата());
	Элементы.ТоварыАртикул.Видимость = показыватьАртикул;
	
	Элементы.ТоварыХарактеристикаНоменклатуры.Видимость = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
	
	РаботаСФормамиСервер.НастройкаПодбораПриСоздании(ЭтаФорма, Ложь, "Товары", "Материал");

	РаботаСФормамиСервер.УстановитьВидимостьКнопокЗагрузитьИзТСД(Элементы.ТоварыЗагрузитьДанныеИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущаяДатаДокумента = Объект.Дата;
	
	// Установим дату входящего документа на текущую
	Если Параметры.Ключ.Пустая() Тогда
		ВхДокДата = ТекущаяДата();
		Модифицированность = ЛОЖЬ;
	КонецЕсли;
	
	Если Истина // ИспользоватьПодключаемоеОборудование Проверка на включенную ФО "Использовать ВО"
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("ТерминалСбораДанных");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	
	КонецЕсли;

	РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма);
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("ТерминалСбораДанных");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(ТекущийОбъект,,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)  
	Перем Действие;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Действие", Действие);
		
		Если Действие = "ПодборТовара" Тогда
			
			ДанныеНоменклатуры = РаботаСТорговымОборудованиемКлиент.ДанныеНоменклатуры();
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, ЗначениеВыбора);
			СШКНоменклатура(ДанныеНоменклатуры, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

// Рассчитывает сумму документа и обновляет надписи её отображения.
&НаКлиенте
Процедура РасчитатьСуммуДокумента() 
	РасчитатьСуммуДокументаСервер()
КонецПроцедуры

&НаСервере
Процедура РасчитатьСуммуДокументаСервер()
	РаботаСДокументамиСервер.РасчитатьСуммуДокумента(Объект);	
КонецПроцедуры

// Функция осуществляет обработку считывания штрихкода номенклатуры.
//
// Параметры:
//  ДанныеНоменклатуры	 - Старуктура	 - сведения о считанной позиции.
//  СШК					 - Строка		 - Идентификатор сканера штрих-кода, с которым связано данное событие.
// 
// Возвращаемое значение:
//  Булево - Событие обработано.
//
&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	Номенклатура				= ДанныеНоменклатуры.Номенклатура;
	Количество					= ДанныеНоменклатуры.Количество;
	ХарактеристикаНоменклатуры	= ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
	Единица						= ДанныеНоменклатуры.ЕдиницаИзмерения;
	Цена						= ДанныеНоменклатуры.Цена;
	СерияНоменклатуры           = ДанныеНоменклатуры.СерияНоменклатуры;
	
	РеквизитыНоменклатуры = РаботаСДокументамиСервер.ДанныеНоменклатурыДляОбработкиЧтенияШК(Номенклатура, Истина);
	Если РеквизитыНоменклатуры.ЭтоМатериал Тогда
	
		ТабличнаяЧасть = Объект.Товары;
		мсСтрокиТовары = РаботаСДокументамиКлиент.ЧтениеШтрихкода_НайтиСтрокиДокументаПоДаннымШтрихкода(ТабличнаяЧасть, ДанныеНоменклатуры, РеквизитыНоменклатуры);
		
		Если мсСтрокиТовары.Количество() = 0 Тогда
			
			// Добавление новой строки
			СтрокаТовары = РаботаСДокументамиКлиент.ЧтениеШтрихкода_ДобавитьСтрокуТовараПоДаннымШтрихкода(ТабличнаяЧасть, ДанныеНоменклатуры, РеквизитыНоменклатуры);
			
			СтрокаТовары.Цена = ?(Цена = Неопределено, 0, Цена);
			СтрокаТовары.Сумма = СтрокаТовары.Цена*Количество;
			
			ТоварыНоменклатураПриИзменении(Неопределено, СтрокаТовары.НомерСтроки-1);
			НоваяСтрока = Истина;
		Иначе
			// Увеличивается количество в существующей строке
			СтрокаТовары = мсСтрокиТовары[0];
			СтрокаТовары.Количество = СтрокаТовары.Количество + Количество;      
			
			
			Если СтрокаТовары.Свойство("Цена") Тогда
				Если Цена <> Неопределено  И Цена > 0 Тогда
					СтрокаТовары.Цена = Цена;      
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаТовары.Свойство("Сумма") Тогда
				СтрокаТовары.Сумма = СтрокаТовары.Цена*Количество;      
			КонецЕсли;
			
			ТоварыКоличествоПриИзменении(Неопределено, СтрокаТовары.НомерСтроки-1);
			
			НоваяСтрока = Ложь;
		КонецЕсли;
		
		ТоварыПриОкончанииРедактирования(Элементы.Товары, НоваяСтрока, Ложь);
		
	Иначе
		РаботаСДокументамиКлиент.ЧтениеШтрихкода_ПредупреждениеОжидаетсяМатериал(Номенклатура);
	КонецЕсли; 
	Возврат Истина;
	
КонецФункции // СШКНоменклатура()

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСтатьяЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено и 
		ЗначениеЗаполнено(ТекущиеДанные.СтатьяЗатрат) и
		не ЗначениеЗаполнено(ТекущиеДанные.КатегорияВыработки)
		Тогда
		ТекущиеДанные.КатегорияВыработки = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.СтатьяЗатрат, "ОсновнойПолучательЗатрат");
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуммаПриИзменении(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПередНачаломИзменения(Элемент, Отказ)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриИзменении(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриИзменении(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////
// МЕТОДЫ ПОДБОРА.

&НаКлиенте
Процедура Подключаемый_ВыборПодбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Ложь Тогда ЗапрашиватьКоличество = Ложь; ЗапрашиватьЦену = Ложь; ЗапрашиватьХарактеристику = Ложь; ЗапрашиватьСерию = Ложь; КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ДопСерверныеФункции.ПолучитьРеквизит(ВыбранноеЗначение, "ЭтоГруппа") тогда
		Действие = "ПодборТовара";
		Результат = РаботаСФормамиКлиент.ВыборПодборОбработка(ВыбранноеЗначение, ЗапрашиватьКоличество, ЗапрашиватьЦену, ЗапрашиватьХарактеристику, ЗапрашиватьСерию, Действие, ЭтаФорма); 
		
		Если Результат <> Неопределено Тогда
			ОбработкаВыбора(Результат, Неопределено);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Обработчики для полей подбора номенклатуры.

&НаКлиенте
Процедура Подключаемый_ПолеПодбораПриИзменении(Элемент)
	мИзмененыНастройкиПодбора = Истина;
	СохранитьНастройкиПодбора();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПодбора()
	
	Если ЗначениеЗаполнено(мИзмененыНастройкиПодбора) Тогда 
		РаботаСФормамиСервер.СохранитьНастройкиПодбора(ЭтаФорма.ЗапрашиватьКоличество, ЭтаФорма.ЗапрашиватьЦену, ЭтаФорма.ЗапрашиватьХарактеристику, ЭтаФорма.ЗапрашиватьСерию, ТипЗнч(Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

#Область ТерминалыСбораДанных // ТЕРМИНАЛЫ СБОРА ДАННЫХ

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ЗагрузитьДанныеИзТСДЗавершение", ЭтотОбъект);    
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриПодключении, УникальныйИдентификатор, Ложь)	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		мсШтрихкоды = РезультатВыполнения.ТаблицаТоваров;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ДобавлятьБезВладельца", Истина);
		РаботаСТорговымОборудованиемКлиент.ОбработатьШтрихкоды(ЭтаФорма, Объект, мсШтрихкоды, "Товары", ДопПараметры);
	Иначе
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
		|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти