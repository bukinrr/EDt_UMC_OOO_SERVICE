#Область ПрограммныйИнтерфейс

// Заполняет нормативные материалы по работам
//
// Параметры:
//  СтруктураДополняющейРаботы	 - Структура - Информация по услуге, если идёт не полное перезаполнение, а дополнение.
//
Процедура ЗаполнитьМатериалыПоНормамРабот(СтруктураДополняющейРаботы = Неопределено) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	сзСписокРабот = Новый СписокЗначений;
	сзСписокХарактеристикНоменклатуры = Новый СписокЗначений;
	
	Если СтруктураДополняющейРаботы = Неопределено Тогда
		Материалы.Очистить();	
		Если Работы.Количество() = 0 Тогда Возврат КонецЕсли;
		
		сзСписокРабот.ЗагрузитьЗначения(Работы.ВыгрузитьКолонку("Номенклатура"));
		сзСписокХарактеристикНоменклатуры.ЗагрузитьЗначения(Работы.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Иначе
		сзСписокРабот.Добавить(СтруктураДополняющейРаботы.Номенклатура);		
		сзСписокХарактеристикНоменклатуры.Добавить(СтруктураДополняющейРаботы.ХарактеристикаНоменклатуры);
	КонецЕсли;
	
	сзСписокХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ТаблицаРабот = Работы.Выгрузить();
	ТаблицаРабот.Колонки.Добавить("кНомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	Для Каждого СтрокаТаблицы Из ТаблицаРабот Цикл
		СтрокаТаблицы.кНомерСтроки = СтрокаТаблицы.НомерСтроки;
	КонецЦикла;
	
	Для Каждого СтрокаРаботы Из Работы Цикл
		Если ЗначениеЗаполнено(СтрокаРаботы.ХарактеристикаНоменклатуры) Тогда
			СтрокаТаблицы = ТаблицаРабот.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаРаботы);
			СтрокаТаблицы.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СтрокаТаблицы.кНомерСтроки = СтрокаТаблицы.НомерСтроки;
		КонецЕсли;
	КонецЦикла;

	ТаблицаМатериалов = Материалы.Выгрузить();
	РаботаСДокументамиСервер.ЗаполнитьРасходМатериаловПоНормамНаРаботы(ТаблицаРабот, ТаблицаМатериалов, СтруктураШапкиДокумента);
	Материалы.Загрузить(ТаблицаМатериалов);
	
	Материалы.Свернуть("КлючСтроки, Работа, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ВходитВСтоимость","Количество");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПризнакПервичныйПрием_ПередЗаписью()
	
	Если ЭтоНовый() Тогда
		ТекущийОбъектСсылка = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(ТекущийОбъектСсылка) Тогда
			УстановитьСсылкуНового(Документы.Прием.ПолучитьСсылку(Новый УникальныйИдентификатор));
			ТекущийОбъектСсылка = ПолучитьСсылкуНового();
		КонецЕсли;
	Иначе
		ТекущийОбъектСсылка = Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПервичныйПрием) Тогда
		Если ЭтоПервичный Тогда
			
			ПервичныйПрием = ТекущийОбъектСсылка;
			
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Прием.Ссылка
			               |ИЗ
			               |	Документ.Прием КАК Прием
			               |ГДЕ
						   |	Прием.МедицинскаяКарта = &МедицинскаяКарта
			               |	И Прием.ЭтоПервичный
			               |	И НЕ Прием.Закрыт
			               |	И Прием.Проведен
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Прием.Дата";
			
			Запрос.УстановитьПараметр("МедицинскаяКарта", МедицинскаяКарта);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ЭтоПервичный = Истина;
				ПервичныйПрием = ТекущийОбъектСсылка;
			Иначе
				Выборка = Результат.Выгрузить();
				ПервичныйПрием = Выборка[0].Ссылка;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли Не ЭтоПервичный
			И ПервичныйПрием = ТекущийОбъектСсылка
	Тогда
		// Вручную сняли признак "ЭтоПервичный"
		ЭтоПервичный = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПланЛечения()
	
	Если ДополнительныеСвойства.Свойство("ПланЛечения") Тогда
		ПланЛечения = ДополнительныеСвойства.ПланЛечения;
	Иначе
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПланыЛечения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПервичныйПрием.Установить(ПервичныйПрием);
	
	Для Каждого Назначение Из ПланЛечения Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ИдентификаторЭлемента = Новый УникальныйИдентификатор(Назначение.ИдентификаторНазначения);
		НоваяЗапись.ПервичныйПрием	 = ПервичныйПрием;
		НоваяЗапись.ПорядокЭлемента	 = ПланЛечения.Индекс(Назначение) + 1;
		НоваяЗапись.Номенклатура	 = Назначение.Номенклатура;
		НоваяЗапись.ВидЭлемента		 = Назначение.ВидЭлемента;
		НоваяЗапись.Дата			 = Назначение.Дата;
		НоваяЗапись.ДатаОкончания	 = Назначение.ДатаОкончания;
		НоваяЗапись.Сотрудник		 = Назначение.Сотрудник;
		НоваяЗапись.Количество		 = Назначение.Количество;
		НоваяЗапись.ПриемовВДень	 = Назначение.ПриемовВДень;
		НоваяЗапись.Комментарий		 = Назначение.Комментарий;
		
		Если ЗначениеЗаполнено(Назначение.ДокументРегистратор) Тогда
			НоваяЗапись.ДокументРегистратор = Назначение.ДокументРегистратор;
		Иначе
			НоваяЗапись.ДокументРегистратор = Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Назначение.ВидЭлемента)
			И ОбщегоНазначения.ИмяЗначенияПеречисления(Назначение.ВидЭлемента) = "Медикаменты"
		Тогда
			// Доп. реквизиты плана медикаментов
			НоваяЗапись.ПриемовВДень = ?(Назначение.ПриемовВДень = 0,1,Назначение.ПриемовВДень);
			НоваяЗапись.Дозировка = ?(Назначение.Дозировка = 0, 1, Назначение.Дозировка);
			НоваяЗапись.ЕдиницаИзмерения = Назначение.ЕдиницаИзмерения;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Новый Структура("ПриемовВДень, Дозировка, ЕдиницаИзмерения"));
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОбработатьДиагнозы()

	Движения.Диагнозы.Записывать = Истина;
	
	ДиагнозыДляСворачивания = ЭтотОбъект.Диагнозы.Выгрузить();
	ОтраслевыеДополнения.СвернутьТаблицуДиагнозов(ДиагнозыДляСворачивания);
	
	Для Каждого Строка Из ДиагнозыДляСворачивания Цикл
		
		НовоеДвижение = Движения.Диагнозы.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, Строка);
		НовоеДвижение.МедицинскаяКарта = ЭтотОбъект.МедицинскаяКарта;
		НовоеДвижение.Идентификатор = Новый УникальныйИдентификатор;
		НовоеДвижение.Период = ЭтотОбъект.Дата;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияВыполнениеПланаЛечения(Отказ)
	
	Движения.ВыполнениеПланаЛечения.Записывать = Истина;
	Движения.ВыполнениеПланаЛечения.Записать();
	
	РаботыТаблица = Работы.Выгрузить();
	РаботыТаблица.Колонки.ИД.Имя = "ИдентификаторЭлемента";
	
	// Если есть реквизит - это УМЦ.КОРП, берём из него. Если нет, то это УМЦ или Стоматология - смотрим по метаданным.
	ЭтоСтоматологическийПрием = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(ЭтотОбъект, "СтоматологическийПрием", Неопределено);
	Если ЭтоСтоматологическийПрием = Неопределено Тогда
		ЭтоСтоматологическийПрием = РаботыТаблица.Колонки.Найти("ЗубВКарте") <> Неопределено;
	КонецЕсли;
	
	ПланЛечения = МедицинскаяДеятельность.ПланЛеченияСВыполнением(ПервичныйПрием, ЭтоСтоматологическийПрием);
	
	ДвиженияВыполнения = МедицинскаяДеятельность.РассчитатьДвиженияВыполненияПланаЛечения(ПланЛечения, РаботыТаблица);
	
	Для Каждого ДвижениеВыполнения Из ДвиженияВыполнения Цикл
		ДвижениеВыполнениеПланаЛечения(ДвижениеВыполнения.ИдентификаторЭлемента, ДвижениеВыполнения.Количество);
	КонецЦикла;
	
	// Движение выполнения по видам назначения "Приём" (только в очень старых документах).
	Если Не ЭтоСтоматологическийПрием Тогда 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланыЛечения.ИдентификаторЭлемента,
	|	ПланыЛечения.ПервичныйПрием,
	|	ПланыЛечения.ВидЭлемента,
	|	ПланыЛечения.Номенклатура,
	|	ПланыЛечения.ПорядокЭлемента,
	|	ПланыЛечения.Дата,
	|	ПланыЛечения.Сотрудник,
	|	ПланыЛечения.Количество,
	|	ПланыЛечения.ДокументРегистратор,
	|	ПланыЛечения.Комментарий
	|ПОМЕСТИТЬ ПланЛечения
	|ИЗ
	|	РегистрСведений.ПланыЛечения КАК ПланыЛечения
	|ГДЕ
	|	ПланыЛечения.ПервичныйПрием = &Документ
	|	И ПланыЛечения.ВидЭлемента = &ВидЭлемента
	|	И ПланыЛечения.ДокументРегистратор.Дата < &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыЛечения.ИдентификаторЭлемента,
	|	ПланыЛечения.ВидЭлемента,
	|	ПланыЛечения.Номенклатура,
	|	ПланыЛечения.ПорядокЭлемента КАК ПорядокЭлемента,
	|	ПланыЛечения.Дата,
	|	ПланыЛечения.Сотрудник,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыполнениеПланаЛечения.Регистратор) КАК Факт,
	|	ПланыЛечения.Количество,
	|	ПланыЛечения.ДокументРегистратор,
	|	ПланыЛечения.Комментарий
	|ПОМЕСТИТЬ ВремТЗ
	|ИЗ
	|	ПланЛечения КАК ПланыЛечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
	|		ПО ПланыЛечения.ПервичныйПрием = ВыполнениеПланаЛечения.ПервичныйПрием
	|			И ПланыЛечения.ИдентификаторЭлемента = ВыполнениеПланаЛечения.ИдентификаторЭлемента
	|			И (ВыполнениеПланаЛечения.Регистратор <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыЛечения.Количество,
	|	ПланыЛечения.Сотрудник,
	|	ПланыЛечения.Дата,
	|	ПланыЛечения.ПорядокЭлемента,
	|	ПланыЛечения.Номенклатура,
	|	ПланыЛечения.ВидЭлемента,
	|	ПланыЛечения.ИдентификаторЭлемента,
	|	ПланыЛечения.ДокументРегистратор,
	|	ПланыЛечения.Комментарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТЗ.Номенклатура,
	|	ВремТЗ.ИдентификаторЭлемента,
	|	ВремТЗ.Факт,
	|	ВремТЗ.Количество
	|ИЗ
	|	ВремТЗ КАК ВремТЗ
	|ГДЕ
	|	ВремТЗ.Факт < ВремТЗ.Количество";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", ПервичныйПрием);
	Запрос.УстановитьПараметр("ВидЭлемента", Перечисления.ВидыНазначений.Прием);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ЭлементыПлана = Запрос.Выполнить().Выгрузить();

	// Шаблон осмотра.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпециализацииШаблоновОсмотра.Основной КАК Основной,
	               |	СпециализацииШаблоновОсмотра.Специализация
	               |ИЗ
	               |	РегистрСведений.СпециализацииШаблоновОсмотра КАК СпециализацииШаблоновОсмотра
	               |ГДЕ
	               |	СпециализацииШаблоновОсмотра.ШаблонОсмотра В (&ШаблонОсмотра)
	               |	И СпециализацииШаблоновОсмотра.Специализация В(&Специализации)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Основной УБЫВ";
	
	Запрос.УстановитьПараметр("ШаблонОсмотра", ШаблоныПриема.ВыгрузитьКолонку("ШаблонПриема"));
	Запрос.УстановитьПараметр("Специализации", ЭлементыПлана.ВыгрузитьКолонку("Номенклатура"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДвижениеВыполнениеПланаЛечения(ЭлементыПлана.Найти(Выборка.Специализация).ИдентификаторЭлемента, 1);
	КонецЕсли;
	КонецЕсли;
	
	// Свернуть движения регистра
	РаботаСДокументамиСервер.СвернутьДвиженияРегистра(Движения.ВыполнениеПланаЛечения, "Количество");
	
КонецПроцедуры

Процедура ДвижениеВыполнениеПланаЛечения(ИдентификаторЭлемента, Количество)
	
	Если Количество > 0 Тогда
		НовоеДвижение = Движения.ВыполнениеПланаЛечения.Добавить();
		НовоеДвижение.Период				= Дата;
		НовоеДвижение.ИдентификаторЭлемента = ИдентификаторЭлемента;
		НовоеДвижение.ПервичныйПрием		= ПервичныйПрием;
		НовоеДвижение.Регистратор			= Ссылка;
		НовоеДвижение.Количество			= Количество;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструПротивопоказаний()
	
	Движения.Противопоказания.Записывать = Истина;
	Движения.ВредныеФакторыПротивопоказаний.Записывать = Истина;

	Если ТипЗнч(ПервичныйПрием) = Тип("ДокументСсылка.ПрохождениеМедосмотра") Тогда
		
		ДатаПриказа = ?(ЗначениеЗаполнено(ПервичныйПрием.СписокНаПрохождениеМедосмотра.Дата), ПервичныйПрием.СписокНаПрохождениеМедосмотра.Дата, ПервичныйПрием.Дата);
		РеквизитНомерППиПриказа = МедосмотрыСервер.ПолучитьРеквизитНомерППиПриказа(ДатаПриказа);
		
		Если Диагнозы.Количество() <> 0 Тогда
			
			ТаблицаДвижений = Движения.Противопоказания.Выгрузить();
			ТаблицаВредныхФакторов = Движения.ВредныеФакторыПротивопоказаний.Выгрузить();
			
			Для Каждого СтрокаДиагноза Из Диагнозы Цикл
				
				Вредности = "";
				мсСтр = ВредныеФакторыПротивопоказаний.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаДиагноза.КлючСтроки));
				Если мсСтр.Количество() <> 0 Тогда
					Для Каждого Стр Из мсСтр Цикл
						Вредности = Вредности + ?(ПустаяСтрока(Вредности),"",", ") + Стр.ВредныйФактор[РеквизитНомерППиПриказа];
						
						СтрокаВредность = ТаблицаВредныхФакторов.Добавить();
						СтрокаВредность.Диагноз = СтрокаДиагноза.Диагноз;
						СтрокаВредность.ВредныйФактор = Стр.ВредныйФактор;
						СтрокаВредность.Противопоказание = СтрокаДиагноза.Противопоказание;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДиагноза.Противопоказание) Тогда
					
					СтрокаПротивопоказания = ТаблицаДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПротивопоказания, СтрокаДиагноза);
					СтрокаПротивопоказания.УточненностьДиагноза	= СтрокаДиагноза.Классификация1;
					СтрокаПротивопоказания.ХарактерЗаболевания	= СтрокаДиагноза.Классификация2;
					СтрокаПротивопоказания.ДетализацияДиагноза	= СтрокаДиагноза.Детализация;
					СтрокаПротивопоказания.Примечание			= СтрокаДиагноза.ПримечаниеПоПротивопоказанию;
					
					СтрокаПротивопоказания.ВредныеФакторы = Вредности;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Документ");
			ТаблицаДвижений.ЗаполнитьЗначения(ПервичныйПрием, "СлучайОбращения");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
			
			ТаблицаВредныхФакторов.ЗаполнитьЗначения(Ссылка, "Документ");
			ТаблицаВредныхФакторов.ЗаполнитьЗначения(ПервичныйПрием, "СлучайОбращения");
			ТаблицаВредныхФакторов.ЗаполнитьЗначения(Истина, "Активность");
			
			Движения.Противопоказания.Загрузить(ТаблицаДвижений);
			
			Движения.ВредныеФакторыПротивопоказаний.Загрузить(ТаблицаВредныхФакторов);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструНазначенийПоРезультатуМедосмотра()
		
	Движения.НаправленияПоРезультатамМедосмотра.Записывать = Истина;
	
	Если ТипЗнч(ПервичныйПрием) = Тип("ДокументСсылка.ПрохождениеМедосмотра") Тогда
		пчВидыНаправлений = Перечисления.ВидыНаправленийПоРезультатамМедосмотра;	
		ВидыНаправлений = Перечисления.ВидыНаправленийПоРезультатамМедосмотра.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
		РеквизитыДокумента = Метаданные().Реквизиты;
		
		Для сч = 0 По ВидыНаправлений.Количество()-1 Цикл
			
			ВидНаправления = ВидыНаправлений[сч];
			
			Если РеквизитыДокумента.Найти(ВидНаправления.Имя) <> Неопределено
				И ЭтотОбъект[ВидНаправления.Имя] = Истина
				Тогда
				ДобавитьЗаписьНаправленияПоРезультатуМедосмотра(пчВидыНаправлений[сч]);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаписьНаправленияПоРезультатуМедосмотра(ВидНаправления)
	
	Запись = Движения.НаправленияПоРезультатамМедосмотра.Добавить();
	Запись.Период = Дата;
	Запись.Регистратор = Ссылка;
	Запись.ВидНаправления = ВидНаправления;
	Запись.ПрохождениеМедосмотра = ПервичныйПрием;
	
КонецПроцедуры

Процедура ОбработатьАнализы(Отказ)
	
	Если ДополнительныеСвойства.Свойство("НазначенныеАнализы") Тогда
		НазначенныеАнализы = ДополнительныеСвойства.НазначенныеАнализы;
	Иначе
		НазначенныеАнализы = Неопределено;
	КонецЕсли;
	
	Движения.ЛабораторныеИсследования.Записывать = Истина;
	Движения.ЛабораторныеИсследования.Записать();
	
	Если НазначенныеАнализы = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПланыЛечения.Номенклатура КАК Назначение,
		               |	ПланыЛечения.ИдентификаторЭлемента КАК ИдентификаторНазначения
		               |ИЗ
		               |	РегистрСведений.ПланыЛечения КАК ПланыЛечения
		               |ГДЕ
		               |	ПланыЛечения.ДокументРегистратор = &ДокументРегистратор
		               |	И ПланыЛечения.Номенклатура.Анализ";
		Запрос.УстановитьПараметр("ДокументРегистратор", Ссылка);
		НазначенныеАнализы = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого НазначенныйАнализ Из НазначенныеАнализы Цикл
	
		Движение = Движения.ЛабораторныеИсследования.Добавить();
		Движение.Период = НачалоДня(Дата);
		Движение.Регистратор = Ссылка;
		Движение.Статус = Перечисления.СостоянияИсследований.Назначен;
		
		Движение.ДатаНачала = Дата;
		Движение.ИД = НазначенныйАнализ.ИдентификаторНазначения;
		Движение.Клиент = Клиент;
		Движение.КлиникаИсходная = Филиал;
		Движение.Местонахождение = Филиал;
		Движение.Номенклатура = НазначенныйАнализ.Назначение;

	КонецЦикла;
		
	Если Работы.Количество() <> 0 Тогда
		
		Движения.ЛабораторныеИсследования.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсследованияСрезПервых.ИД,
		               |	ИсследованияСрезПервых.Номенклатура,
		               |	ИсследованияСрезПервых.КлиникаИсходная
		               |ИЗ
		               |	РегистрСведений.ЛабораторныеИсследования.СрезПервых КАК ИсследованияСрезПервых
		               |ГДЕ
		               |	ИсследованияСрезПервых.ИД В(&ИД)
		               |	";
		
		Запрос.УстановитьПараметр("ИД", Работы.ВыгрузитьКолонку("ИД"));
		Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отбор = Новый Структура("ИД");
		Для Каждого СтрокаРаботы Из Работы Цикл
			
			Выборка.Сбросить();
			Отбор.ИД = СтрокаРаботы.ИД;
			
			Если ЗначениеЗаполнено(СтрокаРаботы.ИД)
				И Выборка.НайтиСледующий(Отбор)
				И СтрокаРаботы.Номенклатура = Выборка.Номенклатура
			Тогда
				КоличествоУпоминанийИдВДвижениях = Движения.ЛабораторныеИсследования.Выгрузить(,"ИД").НайтиСтроки(Новый Структура("ИД", СтрокаРаботы.ИД)).Количество();
			
				Движение = Движения.ЛабораторныеИсследования.Добавить();
				Движение.Период = Дата + КоличествоУпоминанийИдВДвижениях;
				Движение.Регистратор = Ссылка;
				Движение.Статус = Перечисления.СостоянияИсследований.Обработан;
				
				Движение.ИД = СтрокаРаботы.ИД;
				Движение.ДатаНачала = Дата;
				Движение.Клиент = Клиент;

				Движение.Местонахождение = Филиал;
				Движение.Номенклатура = СтрокаРаботы.Номенклатура;
				Движение.КодПробы = СтрокаРаботы.НомерПробы;
				
				Движение.КлиникаИсходная = Выборка.КлиникаИсходная;	
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПодписанЭП Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("НеДелатьПроверокПриЗаписи")
		И ЭтотОбъект.ДополнительныеСвойства.НеДелатьПроверокПриЗаписи = Истина
	Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакПервичныйПрием_ПередЗаписью();
	
	Если Не Отказ Тогда
		МахДлинаОписания = ЭтотОбъект.Метаданные().Реквизиты.ОписаниеШаблоновПриема.Тип.КвалификаторыСтроки.Длина;
		ОписаниеШаблоновПриема = "";
		Для Каждого СтрокаШаблона Из ШаблоныПриема Цикл
			
			Если ЗначениеЗаполнено(СтрокаШаблона.ШаблонПриема) Тогда
				
				ОписаниеШаблона = ?(ПустаяСтрока(ОписаниеШаблоновПриема),"","; ") + Строка(СтрокаШаблона.ШаблонПриема);
				
				Если СтрДлина(ОписаниеШаблоновПриема + ОписаниеШаблона) <= МахДлинаОписания Тогда
					ОписаниеШаблоновПриема = ОписаниеШаблоновПриема + ОписаниеШаблона;
				Иначе
					ОписаниеШаблоновПриема = Лев(ОписаниеШаблоновПриема + ОписаниеШаблона,МахДлинаОписания - 3) + "...";
				КонецЕсли;
			КонецЕсли;
			
			// РЭМД: для связки Шаблон - ЭМД - ЭЦП - СообщениеРЭМД
			Если Не ЗначениеЗаполнено(СтрокаШаблона.УИД) Тогда
				СтрокаШаблона.УИД = Новый УникальныйИдентификатор();
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаМатериала Из Материалы Цикл
		Если СтрокаМатериала.Коэффициент = 0 Тогда
			СтрокаМатериала.Коэффициент = СтрокаМатериала.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("СсылкаПометкаУдаления", Ссылка.ПометкаУдаления);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	// Dicom: Если это старый прием, то дозаполним идентификаторы в ТЧ Работы
	Для Каждого Работа из Работы Цикл
		Если Не ЗначениеЗаполнено(Работа.УИД_DICOM) Тогда
			Работа.УИД_DICOM = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	// При записи приема по тестовому клиенту, прием должен тоже становиться тестовым
	Тестовый = Тестовый Или Клиент.Тестовый;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("НеДелатьПроверокПриЗаписи")
		И ЭтотОбъект.ДополнительныеСвойства.НеДелатьПроверокПриЗаписи = Истина
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.ЭтоНовый
		И ПометкаУдаления <> ДополнительныеСвойства.СсылкаПометкаУдаления И Не Отказ
	Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Ссылка);
		Запрос.УстановитьПараметр("ПометкаУдаления", Не ПометкаУдаления);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиЭМКНеограниченнойДлины.Ссылка
			|ИЗ
			|	Справочник.СтрокиЭМКНеограниченнойДлины КАК СтрокиЭМКНеограниченнойДлины
			|ГДЕ
			|	СтрокиЭМКНеограниченнойДлины.ВладелецСтроки = &Владелец
			|	И СтрокиЭМКНеограниченнойДлины.ПометкаУдаления = &ПометкаУдаления";
		
		Выб = Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Выб.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;
		
		Если Метаданные.РегистрыСведений.Найти("ОтметкиВыполненияДействий") <> Неопределено Тогда
			РегистрыСведений["ОтметкиВыполненияДействий"].УстановитьАктивностьПоРегистратору(Ссылка,ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьПланЛечения();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	СвернутаяТаблицаРабот = Работы.Выгрузить();
	СвернутаяТаблицаРабот.Свернуть("Номенклатура");
	МассивНоменклатурыБезДоговора = ОтраслевыеДополнения.ПолучитьНоменклатуруНаКоторуюНетДоговора(СвернутаяТаблицаРабот.ВыгрузитьКолонку("Номенклатура"), Клиент, Дата);
	
	Если МассивНоменклатурыБезДоговора.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(ОтраслевыеДополнения.СформироватьТекстСообщенияНоменклатурыБезДоговора(МассивНоменклатурыБезДоговора));
		
		// Если проведение услуг, требующих договора, без договора запрещено, то отменить проведение.
		Отказ = Отказ Или мУчетнаяПолитика.ЗапретитьПроведениеПродажиНоменклатурыБезДоговора;
		
	КонецЕсли;

	ОбработатьДиагнозы();
	ДвиженияВыполнениеПланаЛечения(Отказ);
	
	ОбработатьАнализы(Отказ);
	
	// Движения по зубной карте
	Движения.СостоянияЗубов.Записывать=Истина;
	Движения.СостоянияЗубов.Очистить();
	Если СостоянияЗубов.Количество()<>0 Тогда
		Для Каждого ТекСтрокаСЗ Из СостоянияЗубов Цикл
			Движение = Движения.СостоянияЗубов.Добавить();
			Движение.Регистратор = ЭтотОбъект.Ссылка;
			Движение.Клиент = Клиент;
			Движение.Период=Дата;
			Движение.НомерЗуба = ТекСтрокаСЗ.НомерЗуба;
			Движение.Описание = ТекСтрокаСЗ.Описание;
			Движение.Сегмент = ТекСтрокаСЗ.СегментЗуба;
			Движение.Состояние = ТекСтрокаСЗ.Состояние;
		КонецЦикла;
	КонецЕсли;
	Движения.СостоянияЗубов.Записать();
	
	ДвиженияПоРегиструПротивопоказаний();
	ДвиженияПоРегиструНазначенийПоРезультатуМедосмотра();
	
	// Установка состояния заявки
	КалендарьПланирования.ОказаниеУслугПриемПриПроведенииРаспроведенииСменаСостоянияЗаявки(Ссылка, Истина);
   
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Установка состояния заявки
	КалендарьПланирования.ОказаниеУслугПриемПриПроведенииРаспроведенииСменаСостоянияЗаявки(Ссылка, Ложь);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Если Основание.Свойство("ДокументОснование") Тогда
			Если Основание.Свойство("Врач") Тогда
				ЭтотОбъект.Врач = Основание.Врач;
			КонецЕсли;
			РаботаСДокументамиСервер.ОбработкаЗаполнения(ЭтотОбъект, Основание.ДокументОснование);
		ИначеЕсли Основание.Свойство("Заявка") Тогда
			ЭтотОбъект.ДокументОснование = Основание.Заявка;
			Основание.Свойство("Филиал", Филиал);
		ИначеЕсли Основание.Свойство("ПервичныйПрием")
			И ТипЗнч(Основание.ПервичныйПрием) = Тип("ДокументСсылка.ПрохождениеМедосмотра") 
		Тогда 
			РаботаСДокументамиСервер.ОбработкаЗаполнения(ЭтотОбъект, Основание.ПервичныйПрием);
			Основание.Свойство("Специализация", Специализация);
		Иначе
			РаботаСДокументамиСервер.ОбработкаЗаполнения(ЭтотОбъект, Основание);
		КонецЕсли;
	Иначе
		РаботаСДокументамиСервер.ОбработкаЗаполнения(ЭтотОбъект, Основание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Если ПодписанЭП Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтотОбъект.ЭтоПервичный
		И ЭтотОбъект.ПервичныйПрием = ОбъектКопирования.Ссылка
	Тогда
		ЭтотОбъект.ЭтоПервичный = Ложь;
	КонецЕсли;
	
	ПодписанЭП = Ложь;
	
	// РЭМД: очистим ключевые данные интеграции с сервисом ЕГИСЗ.
	РолиИПодписиЭМД.Очистить();
	ЭМД.Очистить();	
	Для Каждого СтрокаШаблона Из ШаблоныПриема Цикл
		СтрокаШаблона.УИД = "";		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
