#Область РазделОписанияПеременных

&НаКлиенте
Перем ДанныеЭлементаHTMLДляКонтекстногоМеню;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкаРеквизитовФормыПриСоздании();
	
	МассивПараметров = Новый Массив;
	МассивПараметровСВычисляемымЗначением = Новый Массив;
	
	Если Параметры.ЭталонныеСтрокиТаблиц = Неопределено Тогда
		Параметры.ЭталонныеСтрокиТаблиц = РаботаСШаблонамиHTML.ЭталонныеСтрокиТаблиц(Параметры.ТекстШаблона);
	КонецЕсли;
	
	ЗаполнитьТаблицуПараметров(Ложь);
	
	Если Не СформироватьПолеHTML(Параметры.ИдентификаторТаблицыШаблонов, Параметры.ТекстШаблона, МассивПараметров, МассивПараметровСВычисляемымЗначением, Параметры.ПараметрыТаблицы) Тогда
		ПолеHTMLОсмотр = "";
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗависимыйПараметр Из Параметры.КешЗависимыхПараметров Цикл
		
		Если МассивПараметровСВычисляемымЗначением.Найти(ЗависимыйПараметр.ЗависимыйПараметр) <> Неопределено Тогда
			НоваяСтрокаКешаЗависимыхПараметров = КешЗависимыхПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКешаЗависимыхПараметров, ЗависимыйПараметр);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Параметр Из МассивПараметров Цикл
		
		НоваяСтрока = ПараметрыЭталоннойСтроки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметр);
		
		НоваяСтрока.Параметр					 = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьСсылку(Новый УникальныйИдентификатор(Параметр.Идентификатор));
		НоваяСтрока.СтрокаУидПараметра			 = Параметр.Идентификатор;
		НоваяСтрока.НеРедактируетсяПользователем = НоваяСтрока.Параметр.НеРедактируетсяПользователем;
		НоваяСтрока.ФорматнаяСтрока				 = НоваяСтрока.Параметр.ФорматнаяСтрока;
		НоваяСтрока.ИдентификаторСтрокиШаблона	 = Параметры.ИдентификаторСтрокиШаблона;
		НоваяСтрока.Значение					 = НоваяСтрока.ТипЗначения.ПривестиЗначение(Неопределено);
		НоваяСтрока.Представление				 = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(НоваяСтрока);
		НоваяСтрока.ОбязательноДляЗаполнения	 = Параметр.ОбязательноДляЗаполнения;
		
		Если Параметр.ДопустимыеЗначения <> Неопределено Тогда
			НоваяСтрока.ДопустимыеЗначения.ЗагрузитьЗначения(Параметр.ДопустимыеЗначения);
		КонецЕсли;
		
		ДокументыПриемаСервер.ЗаполнитьПараметрыВводаСтрокиПараметра(НоваяСтрока);
		
	КонецЦикла;
	
	Если МассивПараметров.Количество() = 0 Тогда
		НоваяСтрока = ПараметрыЭталоннойСтроки.Добавить();
		НоваяСтрока.Параметр = ПланыВидовХарактеристик.ПараметрыHTML.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьТаблицуПараметров(Истина);
	
	ЗначенияПоУмолчанию = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(ПараметрыЭталоннойСтроки, КешЗависимыхПараметров, Параметры.Документ, , , 0);
	РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(ПараметрыЭталоннойСтроки, ЗначенияПоУмолчанию);
	
	HTMLДокумент = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПолеHTMLОсмотр);
	РаботаСШаблонамиHTMLКлиентСервер.УстановитьСкриптКонтекстногоМеню(HTMLДокумент);
	РаботаСШаблонамиHTMLКлиентСервер.ЗаполнитьЗначенияПараметровHTMLДокумента(HTMLДокумент, ПараметрыЭталоннойСтроки);
	ПолеHTMLОсмотр = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(HTMLДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПустаяСтрока(ПолеHTMLОсмотр) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не верные параметры открытия формы редактирования таблицы'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокиТаблицы();
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПолеHTMLОсмотр);
	ЭлементТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, Параметры.ИдентификаторТаблицыШаблонов, "table", "data-bit-dyntable-id")[0];
	ТаблицаИзШаблона = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(РаботаСDOMКлиентСервер.СоздатьДокументDOM(Параметры.ТекстШаблона), Параметры.ИдентификаторТаблицыШаблонов, "table", "data-bit-dyntable-id")[0];
	
	РаботаСШаблонамиHTMLКлиентСервер.РекурсивноЗаполнитьВложенныеТаблицы(ТаблицаПараметров, ЭлементТаблицы, ТаблицаИзШаблона, Параметры.ИдентификаторСтрокиШаблона, , Параметры.ИдентификаторРодительскойСтроки, Параметры.ИдентификаторТаблицыШаблонов, Параметры.ЭталонныеСтрокиТаблиц);
	ПолеHTMLОсмотр = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ТекущаяСтрокаТаблицы = ТекущаяСтрокаТаблицыШаблона(Элементы.ПолеHTMLДокумента.Документ.activeElement);
	
	Если ТекущаяСтрокаТаблицы.ИндексТекущейСтроки <> Неопределено Тогда
		
		ОтборСтрокиПараметра = Новый Структура("НомерСтрокиТаблицы", ТекущаяСтрокаТаблицы.ИндексТекущейСтроки - ИндексЭталоннойСтроки);
		ДополнительныеПараметры = Новый Структура("ДокументHTML, ОтборСтрокиПараметра", ТекущаяСтрокаТаблицы.ЭлементСтроки, ОтборСтрокиПараметра);
		
		РаботаСШаблонамиHTMLКлиент.ПеренестиЗначениеАктивногоТекстовогоПоляОсмотраВТаблицуПараметров(ЭтаФорма, Элементы.ПолеHTMLДокумента,,ДополнительныеПараметры);
		
	КонецЕсли;
	
	ИмеютсяНезаполненныеОбязательныеПараметры = Ложь;
	МассивДанныхТаблицы = Новый Массив;
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		
		Если ЗначениеЗаполнено(СтрокаПараметра.Параметр)
			И СтрокаПараметра.ОбязательноДляЗаполнения
			И ТипЗнч(СтрокаПараметра.Значение) <> Тип("Булево")
			И Не ЗначениеЗаполнено(СтрокаПараметра.Значение)
		Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Параметр %1 не заполнен. Данный параметр обязателен к заполнению'"), Строка(СтрокаПараметра.Параметр)));
			ИмеютсяНезаполненныеОбязательныеПараметры = Истина;
		КонецЕсли;
		
		СтруктураПараметра = Новый Структура("НомерСтрокиТаблицы, Параметр, Значение, Представление, ИдентификаторТаблицы, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, СтрокаПараметра);
		МассивДанныхТаблицы.Добавить(СтруктураПараметра);
		
	КонецЦикла;
	
	Если ИмеютсяНезаполненныеОбязательныеПараметры Тогда
		Возврат;
	КонецЕсли;
	
	ПередаваемыеПараметры = Новый Структура();
	ПередаваемыеПараметры.Вставить("МассивДанныхТаблицы", МассивДанныхТаблицы);
	ПередаваемыеПараметры.Вставить("ИдентификаторТаблицы", Параметры.ИдентификаторТаблицыШаблонов);
	ПередаваемыеПараметры.Вставить("ИдентификаторСтрокиШаблона", Параметры.ИдентификаторСтрокиШаблона);
	
	Закрыть(ПередаваемыеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаВставить(Команда)
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	ЭлементHTML = ДокументHTML.activeElement;
	
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	
	ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ЭлементHTML);
	Если ЭлементHTML = Неопределено Или (ТегЭлемента <> "TEXTAREA" И ТегЭлемента <> "INPUT") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументHTML.queryCommandSupported("paste") Тогда
		ДокументHTML.execCommand("paste");
	КонецЕсли;
	
	СохранитьЗначенияАктивныхТекстовыхПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаОчистить(Команда)
	
	Если ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы, СтрокаУидПараметра, ИдентификаторСтрокиШаблона, НомерСтрокиТаблицы", Параметры.ИдентификаторТаблицыШаблонов, ДанныеЭлементаHTMLДляКонтекстногоМеню.id, Параметры.ИдентификаторСтрокиШаблона, ДанныеЭлементаHTMLДляКонтекстногоМеню.НомерЭлемента));
	Если мсСтрокаПараметра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПоУИД = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Элементы.ПолеHTMLДокумента.Документ, ДанныеЭлементаHTMLДляКонтекстногоМеню.id);
	Если ЭлементыПоУИД.length < ДанныеЭлементаHTMLДляКонтекстногоМеню.НомерЭлемента + 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТаблицы = ТекущаяСтрокаТаблицыШаблона(Элементы.ПолеHTMLДокумента.Документ.activeElement);
	Если ТекущаяСтрокаТаблицы.ИндексТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИндексСтрокиМногострочнойТаблицы", ТекущаяСтрокаТаблицы.ИндексТекущейСтроки);
	ЭлементHTMLДляКонтекстногоМеню = ЭлементыПоУИД[ДанныеЭлементаHTMLДляКонтекстногоМеню.НомерЭлемента];
	РаботаСШаблонамиHTMLКлиент.ОчиститьЗначениеПараметраHTMLИнтерактивно(ЭтотОбъект, "ПолеHTMLДокумента", ЭлементHTMLДляКонтекстногоМеню, мсСтрокаПараметра[0], Параметры.КешЗначенийВыбора, , , ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ДанныеСобытия.Element);
	Попытка
		ЭлементHTML.focus();
	Исключение КонецПопытки;
	
	Если ЭлементHTML <> Неопределено И ДанныеСобытия.Element.hasAttribute("bit-contextmenu-selectElement") Тогда
		ОбновитьЗначениеЭлементаHTMLДляКонтекстногоМеню(ДанныеСобытия.Element, Элемент.Имя);
		ДанныеСобытия.Element.removeAttribute("bit-contextmenu-selectElement");
		Элементы.ПолеHTMLДокументаКонтекстноеМенюПолеHTMLДокументаОчистить.Доступность = ДанныеЭлементаHTMLДляКонтекстногоМеню <> Неопределено;
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено;
		Элементы.ПолеHTMLДокументаКонтекстноеМенюПолеHTMLДокументаОчистить.Доступность = Ложь;
	КонецЕсли;
	
	Если ВРег(ДанныеСобытия.Element.TagName) = "BUTTON" Или ВРег(ДанныеСобытия.Element.TagName) = "IMG" Тогда
		
		СохранитьЗначенияАктивныхТекстовыхПолей();
		
		ИдентификаторТаблицы = ДанныеСобытия.Element.getAttribute("data-bit-dyntable-id-button");
		
		Если ЗначениеЗаполнено(ИдентификаторТаблицы) Тогда
			ИдентификаторСтроки = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ДанныеСобытия.Element, "tr").getAttribute("data-bit-dyntable-tr-id");
			
			Если ИдентификаторСтроки = Неопределено Тогда
				// Многострочная таблица в неэталонной строке многострочной таблицы верхнего уровня
				СтрокаТекущейТаблицы = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ДанныеСобытия.Element, "tr");
				ИдентификаторСтроки = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(СтрокаТекущейТаблицы.parentNode, "tr").getAttribute("data-bit-dyntable-tr-id");
			КонецЕсли;
			РаботаСШаблонамиHTMLКлиент.ОбработатьНажатиеКнопкиРедактированияВложеннойТаблицы(ЭтотОбъект, Параметры.ИдентификаторСтрокиШаблона, ИдентификаторТаблицы, ИдентификаторСтроки);
			
			Возврат;
		ИначеЕсли ДанныеСобытия.Element.getAttribute("data-bit-addrow") <> Неопределено Тогда
			ДобавитьСтрокуВТаблицу(ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы", Параметры.ИдентификаторТаблицыШаблонов)).Количество() / ПараметрыЭталоннойСтроки.Количество());
		ИначеЕсли ДанныеСобытия.Element.getAttribute("data-bit-insertrow") <> Неопределено Тогда
			ЭлементСтроки = ПолучитьЭлементСтрокиЭлемента(ДанныеСобытия.Element);
			ДобавитьСтрокуВТаблицу(Число(ЭлементСтроки.rowIndex) - ИндексЭталоннойСтроки, Истина);
		ИначеЕсли ДанныеСобытия.Element.getAttribute("data-bit-deleterow") <> Неопределено Тогда
			
			ОповещениеПодтверждение = Новый ОписаниеОповещения("УдалитьСтрокуТаблицыПослеПодтверждения", ЭтотОбъект, Новый Структура("ЭлементСтроки", ДанныеСобытия.Element));
			ТекстВопроса = НСтр("ru='Удалить строку?'");
			ПоказатьВопрос(ОповещениеПодтверждение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	Если ВРег(ДанныеСобытия.Element.TagName) = "A" Или ТегЭлемента = "A" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ТекущаяСтрокаТаблицы = ПолучитьТекущуюСтрокуТаблицы(ЭлементHTML);
	
	Если ТекущаяСтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТекущейСтроки = Число(ТекущаяСтрокаТаблицы.rowIndex);
	
	мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы, СтрокаУидПараметра, НомерСтрокиТаблицы", Параметры.ИдентификаторТаблицыШаблонов, ЭлементHTML.id, ИндексТекущейСтроки - ИндексЭталоннойСтроки));
	Если мсСтрокаПараметра.Количество() > 0 Тогда
		ОсновнойВладелец = ВладелецФормы;
		Пока ОсновнойВладелец.ИмяФормы = ИмяФормы Цикл
			ОсновнойВладелец = ОсновнойВладелец.ВладелецФормы;
		КонецЦикла;
		СтрокаПараметра = мсСтрокаПараметра[0];
		ДополнительныеПараметры = Новый Структура("ИндексСтрокиМногострочнойТаблицы", ИндексТекущейСтроки);
		РаботаСШаблонамиHTMLКлиент.ВыбратьЗначениеПараметраHTMLИнтерактивно(ЭтаФорма, Элемент.Имя, ЭлементHTML, СтрокаПараметра, Параметры.КешЗначенийВыбора, ОсновнойВладелец.Объект,, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЭлементСтрокиЭлемента(Знач ЭлементСтроки)
	
	Пока ВРег(ЭлементСтроки.TagName) <> "BODY" Цикл
		Если ВРег(ЭлементСтроки.TagName) = "TR" Тогда
			Возврат ЭлементСтроки;
		Иначе
			ЭлементСтроки = ЭлементСтроки.parentElement;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	ЗаполнитьТаблицуПараметрами();
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаТаблицыШаблона(ЭлементHTML)
	
	ИндексТекущейСтроки = Неопределено;
	ЭлементСтроки = ЭлементHTML;
	ТекущийУзел = ЭлементHTML;
	
	Если ВРег(ТекущийУзел.TagName) <> "BODY" Тогда
		Пока ВРег(ТекущийУзел.parentElement.TagName) <> "BODY" Цикл
			Если ВРег(ТекущийУзел.TagName) = "TR" Тогда
				ИндексТекущейСтроки = Число(ТекущийУзел.rowIndex);
				ЭлементСтроки = ТекущийУзел;
				Прервать;
			КонецЕсли;
			
			ТекущийУзел = ТекущийУзел.parentElement;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ИндексТекущейСтроки, ЭлементСтроки", ИндексТекущейСтроки, ЭлементСтроки);
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущуюСтрокуТаблицы(ЭлементHTML)
	
	ТекущаяСтрокаТаблицы = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ЭлементHTML, "tr");
	
	Если ТекущаяСтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТекущейСтроки = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ТекущаяСтрокаТаблицы, "table");
	Если ТаблицаТекущейСтроки.getAttribute("data-bit-dyntable-id") = Параметры.ИдентификаторТаблицыШаблонов Тогда
		Возврат ТекущаяСтрокаТаблицы;
	Иначе
		Возврат ПолучитьТекущуюСтрокуТаблицы(ТаблицаТекущейСтроки.parentNode);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РедактированиеВложеннойТаблицыШаблоновДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РаботаСШаблонамиHTMLКлиент.РедактированиеВложеннойТаблицыШаблоновДокументаЗавершение(Результат, ДополнительныеПараметры, ПолеHTMLОсмотр, ТаблицаПараметров, Параметры.ИдентификаторРодительскойСтроки, Параметры.ТекстШаблона, Параметры.ЭталонныеСтрокиТаблиц);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастройкаРеквизитовФормыПриСоздании()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипЗначенияПараметраHTML = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.ПараметрыHTML.Тип, , , , Новый КвалификаторыСтроки());
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Значение", ТипЗначенияПараметраHTML, "ТаблицаПараметров",		"Значение"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Значение", ТипЗначенияПараметраHTML, "ПараметрыЭталоннойСтроки",	"Значение"));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВТаблицу(КоличествоДобавленныхСтрок, СдвинутьНомераПараметров = Ложь, НеДобавлятьПараметр = Ложь, ИдентификаторСтроки = Неопределено)
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПолеHTMLОсмотр);
	Таблица = ПолучитьТаблицуDOM(ДокументHTML, Параметры.ИдентификаторТаблицыШаблонов);
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексУзлаТелаТаблицы = Неопределено;
	Инд = 0;
	Для Каждого Узел Из Таблица.ДочерниеУзлы Цикл
		Если НРег(Узел.ИмяУзла) = "tbody" Тогда
			ИндексУзлаТелаТаблицы = Инд;
		Иначе
			Инд = Инд + 1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексУзлаТелаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицы = Таблица.ДочерниеУзлы[ИндексУзлаТелаТаблицы].ДочерниеУзлы;
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если СтрокаТаблицы.ИндексСтроки = ИндексЭталоннойСтроки Тогда
			
			Если ИдентификаторСтроки = Неопределено Тогда
				ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			ТекстНовойСтроки = ПолучитьТекстНовойСтроки(СтрокаТаблицы, ИдентификаторСтроки);
			Если СдвинутьНомераПараметров Тогда // Вставить строку.
				СтрокаПодвала = СтрокиТаблицы[КоличествоДобавленныхСтрок + ИндексЭталоннойСтроки]; // Текущая строка.
			ИначеЕсли СтрокиТаблицы.Количество() > ИндексЭталоннойСтроки + 1 + КоличествоДобавленныхСтрок Тогда
				// Эталонная строка не последняя
				Для Каждого Строка Из СтрокиТаблицы Цикл
					Если Строка.ИндексСтроки = ИндексЭталоннойСтроки + 1 + КоличествоДобавленныхСтрок Тогда
						СтрокаПодвала = Строка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокаПодвала = Неопределено;
			КонецЕсли;
			РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(Таблица.ПолучитьТелоТаблицы()[0], ТекстНовойСтроки,,СтрокаПодвала);
			
			ИндексСтрокиДляДобавленияПараметров = КоличествоДобавленныхСтрок + 1;
			
			Если СдвинутьНомераПараметров Тогда // Вставить строку.
				Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы", Параметры.ИдентификаторТаблицыШаблонов)) Цикл
					
					Если СтрокаПараметра.НомерСтрокиТаблицы >= КоличествоДобавленныхСтрок Тогда
						СтрокаПараметра.НомерСтрокиТаблицы = СтрокаПараметра.НомерСтрокиТаблицы + 1;
					КонецЕсли;
					
				КонецЦикла;
				ИндексСтрокиДляДобавленияПараметров = ИндексСтрокиДляДобавленияПараметров - 1;
			КонецЕсли;
			
			Если НеДобавлятьПараметр Тогда
				Прервать;
			КонецЕсли;
			
			ДобавитьПараметры(ИндексСтрокиДляДобавленияПараметров, ИдентификаторСтроки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПолеHTMLОсмотр = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиТаблицы()
	
	Если ПараметрыЭталоннойСтроки.Количество() <> 0 Тогда
		НомераСтрок = Новый Массив;
		Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы", Параметры.ИдентификаторТаблицыШаблонов)) Цикл
			Если НомераСтрок.Найти(СтрокаПараметра.НомерСтрокиТаблицы) = Неопределено Тогда
				НомераСтрок.Добавить(СтрокаПараметра.НомерСтрокиТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для НомерСтроки = 1 По НомераСтрок.Количество() Цикл
			
			ПараметрыСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы, НомерСтрокиТаблицы", Параметры.ИдентификаторТаблицыШаблонов, НомерСтроки));
			
			ИдентификаторСтроки = ПараметрыСтроки[0].ИдентификаторСтроки;
			
			Если Не ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
				ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				// Для обратной совместимости со старыми шаблонами
				Для Каждого СтрокаПараметра Из ПараметрыСтроки Цикл
					СтрокаПараметра.ИдентификаторСтроки = ИдентификаторСтроки;
				КонецЦикла;
			КонецЕсли;
			
			ДобавитьСтрокуВТаблицу(НомерСтроки-1, , Истина, ИдентификаторСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуТаблицыПослеПодтверждения(Ответ, ПараметрыОперации) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ЭлементСтроки = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ПараметрыОперации.ЭлементСтроки, "tr");
		ИндексТекущейСтроки = Число(ЭлементСтроки.rowIndex);
		
		ИдентификаторУдаляемойСтроки = ЭлементСтроки.getAttribute("data-bit-dyntable-tr-id");
		
		РекурсивноУдалитьПараметрыСтроки(ТаблицаПараметров, ИдентификаторУдаляемойСтроки);
		
		Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы", Параметры.ИдентификаторТаблицыШаблонов)) Цикл
			Если СтрокаПараметра.НомерСтрокиТаблицы > ИндексТекущейСтроки - ИндексЭталоннойСтроки Тогда
				СтрокаПараметра.НомерСтрокиТаблицы = СтрокаПараметра.НомерСтрокиТаблицы - 1;
			КонецЕсли;
		КонецЦикла;
		
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПолеHTMLОсмотр);
		УдаляемаяСтрока = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдентификаторУдаляемойСтроки, "tr", "data-bit-dyntable-tr-id")[0];
		УдаляемаяСтрока.РодительскийУзел.УдалитьДочерний(УдаляемаяСтрока);
		ПолеHTMLОсмотр = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноУдалитьПараметрыСтроки(ТаблицаПараметров, ИдентификаторУдаляемойСтроки)
	
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого СтрокаДочернегоУдаляемогоПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторРодительскойСтроки", ИдентификаторУдаляемойСтроки)) Цикл
		Если ИдентификаторыСтрок.Найти(СтрокаДочернегоУдаляемогоПараметра.ИдентификаторСтроки) = Неопределено Тогда
			ИдентификаторыСтрок.Добавить(СтрокаДочернегоУдаляемогоПараметра.ИдентификаторСтроки);
			РекурсивноУдалитьПараметрыСтроки(ТаблицаПараметров, СтрокаДочернегоУдаляемогоПараметра.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаУдаляемогоПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторУдаляемойСтроки)) Цикл
		СтрокиКУдалению.Добавить(СтрокаУдаляемогоПараметра);
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПараметров.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПараметров(ПараметрыТекущейТаблицы)
	
	СтрокиБезИдентификатораСтроки = Новый Массив;
	ИдентификаторыСтрок = Новый Соответствие;
	
	Для Каждого ДанныеПараметра Из Параметры.МассивДанныхТаблицы Цикл
		
		Если ПараметрыТекущейТаблицы <> (ДанныеПараметра.ИдентификаторТаблицы = Параметры.ИдентификаторТаблицыШаблонов) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		СтрокиПараметраИзЭталоннойСтроки = ПараметрыЭталоннойСтроки.НайтиСтроки(Новый Структура("Параметр", ДанныеПараметра.Параметр));
		
		Если СтрокиПараметраИзЭталоннойСтроки.Количество() = 0 Тогда
			НоваяСтрока.СтрокаУидПараметра			 = Строка(НоваяСтрока.Параметр.УникальныйИдентификатор());
			НоваяСтрока.НеРедактируетсяПользователем = НоваяСтрока.Параметр.НеРедактируетсяПользователем;
			НоваяСтрока.ТипЗначения					 = НоваяСтрока.Параметр.ТипЗначения;
			НоваяСтрока.ФорматнаяСтрока				 = НоваяСтрока.Параметр.ФорматнаяСтрока;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПараметраИзЭталоннойСтроки[0]);
			
			Если ЗначениеЗаполнено(ДанныеПараметра.ИдентификаторСтроки) Тогда
				ИдентификаторыСтрок.Вставить(ДанныеПараметра.НомерСтрокиТаблицы, ДанныеПараметра.ИдентификаторСтроки);
			Иначе
				СтрокиБезИдентификатораСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПараметра, "Параметр, НомерСтрокиТаблицы, Значение, ИдентификаторТаблицы, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
		НоваяСтрока.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(НоваяСтрока);
	КонецЦикла;
	
	// Для шаблонов с таблицами, сформированных до поддержки вложенных таблиц, в которые после обновления добавили вложенные таблицы, не создав новую версию шаблона
	Для Каждого СтрокаБезИдентификатораСтроки Из СтрокиБезИдентификатораСтроки Цикл
		ИдентификаторСтроки = ИдентификаторыСтрок.Получить(СтрокаБезИдентификатораСтроки.НомерСтрокиТаблицы);
		Если ИдентификаторСтроки = Неопределено Тогда
			ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ИдентификаторыСтрок.Вставить(СтрокаБезИдентификатораСтроки.НомерСтрокиТаблицы, ИдентификаторСтроки);
		КонецЕсли;
		СтрокаБезИдентификатораСтроки.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПолеHTML(ИдентификаторЭлемента, ТекстHTML, МассивПараметров, МассивПараметровСВычисляемымЗначением, ПараметрыТаблицы)
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	
	Таблица = ПолучитьТаблицуDOM(ДокументHTML, Параметры.ИдентификаторТаблицыШаблонов);
	Если Таблица = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НомерЭталоннойСтроки = РаботаСШаблонамиHTML.НомерЭталоннойСтрокиТаблицыШаблонов(Параметры.ИдентификаторТаблицыШаблонов);
	
	ТелоТаблицы = Таблица.ПолучитьТелоТаблицы();
	Если ТелоТаблицы.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из ТелоТаблицы[0].ДочерниеУзлы Цикл
			Если СтрокаТаблицы.ИндексСтроки = НомерЭталоннойСтроки - 1 Тогда
				ЭталоннаяСтрока = СтрокаТаблицы;
				ИндексЭталоннойСтроки = СтрокаТаблицы.ИндексСтроки;
				СтрокаТаблицы.УстановитьАтрибут("hidden", "true");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭталоннаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеЗначенияПараметров = Новый Соответствие;
	Для Каждого СтруктураПараметра Из ПараметрыТаблицы Цикл
		
		ДополнительныеЗначенияПараметра = Новый Структура("ДопустимыеЗначения, Назначение, ДопПараметрыПоНазначению");
		Если СтруктураПараметра.ДопустимыеЗначения.Количество() > 0 Тогда
			ДополнительныеЗначенияПараметра.ДопустимыеЗначения = СтруктураПараметра.ДопустимыеЗначения.ВыгрузитьЗначения();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметра.Назначение) Тогда
			ДополнительныеЗначенияПараметра.Назначение = СтруктураПараметра.Назначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметра.ДопПараметрыПоНазначению) Тогда
			ДополнительныеЗначенияПараметра.ДопПараметрыПоНазначению = СтруктураПараметра.ДопПараметрыПоНазначению;
		КонецЕсли;
		
		ДополнительныеЗначенияПараметров.Вставить(СтруктураПараметра.Параметр, ДополнительныеЗначенияПараметра);
	КонецЦикла;
	
	ВложенныеТаблицыСтроки = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭталоннаяСтрока,, "table", "data-bit-dyntable-id");
	Для Каждого Ячейка Из ЭталоннаяСтрока.ДочерниеУзлы Цикл
		ПолучитьПараметры(Ячейка, МассивПараметров, МассивПараметровСВычисляемымЗначением, ДополнительныеЗначенияПараметров, ВложенныеТаблицыСтроки);
	КонецЦикла;
	
	ИдентификаторыТаблицВерхнегоУровня = Новый Массив;
	
	Для Каждого ВложеннаяТаблица Из ВложенныеТаблицыСтроки Цикл
		
		УидТаблицыШаблонов = ВложеннаяТаблица.ПолучитьАтрибут("data-bit-dyntable-id");
		
		Если Не ЗначениеЗаполнено(УидТаблицыШаблонов) Тогда
			Прервать;
		КонецЕсли;
		
		Родитель = ВложеннаяТаблица.РодительскийУзел;
		
		Пока Родитель <> Неопределено Цикл
			
			Если Родитель.ЕстьАтрибут("data-bit-dyntable-id") Тогда
				Если Родитель.ПолучитьАтрибут("data-bit-dyntable-id") = Параметры.ИдентификаторТаблицыШаблонов Тогда
					// Многострочная таблица верхнего уровня
					
					ИдентификаторыТаблицВерхнегоУровня.Добавить(УидТаблицыШаблонов);
					
					Если Не ЗначениеЗаполнено(ВложеннаяТаблица.Идентификатор) Тогда
						ВложеннаяТаблица.УстановитьАтрибут("id", Строка(Новый УникальныйИдентификатор()));
						ВложеннаяТаблица.УстановитьАтрибутИдентификатор("id", Истина);
					КонецЕсли;
					
					РаботаСШаблонамиHTMLКлиентСервер.ПодготовитьТаблицуШаблоновКДобавлениюВДокументHTML(ВложеннаяТаблица, УидТаблицыШаблонов, Параметры.ЭталонныеСтрокиТаблиц, , Истина);
				ИначеЕсли ИдентификаторыТаблицВерхнегоУровня.Найти(Родитель.ПолучитьАтрибут("data-bit-dyntable-id")) <> Неопределено Тогда
					РодительскаяСтрока = Неопределено;
					ТаблицаШаблона = Справочники.ТаблицыШаблоновПриема.ПолучитьСсылку(Новый УникальныйИдентификатор(Родитель.ПолучитьАтрибут("data-bit-dyntable-id")));
					Для Каждого СтрокаТаблицы Из Родитель.ПолучитьТелоТаблицы()[0].ДочерниеУзлы Цикл
						Если РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(СтрокаТаблицы, УидТаблицыШаблонов, "table", "data-bit-dyntable-id").Количество() <> 0 Тогда
							РодительскаяСтрока = СтрокаТаблицы;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если РодительскаяСтрока <> Неопределено
						И РодительскаяСтрока.ИндексСтроки + 1 <> ТаблицаШаблона.НомерЭталоннойСтроки
					Тогда
						// Многострочная таблица в неэталонной строке многострочной таблицы верхнего уровня
						
						Если Не ЗначениеЗаполнено(ВложеннаяТаблица.Идентификатор) Тогда
							ВложеннаяТаблица.УстановитьАтрибут("id", Строка(Новый УникальныйИдентификатор()));
							ВложеннаяТаблица.УстановитьАтрибутИдентификатор("id", Истина);
						КонецЕсли;
						
						РаботаСШаблонамиHTMLКлиентСервер.ПодготовитьТаблицуШаблоновКДобавлениюВДокументHTML(ВложеннаяТаблица, УидТаблицыШаблонов, Параметры.ЭталонныеСтрокиТаблиц, , Истина);
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
			Иначе
				Родитель = Родитель.РодительскийУзел;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НовыйДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM();
	
	Если Не ЗначениеЗаполнено(Таблица.Идентификатор) Тогда
		Таблица.УстановитьАтрибут("id", Строка(Новый УникальныйИдентификатор()));
		Таблица.УстановитьАтрибутИдентификатор("id", Истина);
	КонецЕсли;
	ДобавитьКнопкиДобавленияИУдаленияСтрок(Таблица);
	
	РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(НовыйДокументHTML.Тело, РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(Таблица));
	
	ТекстКнопкиДобавитьСтроку = НСтр("ru = 'Добавить строку'");
	СсылкаНаКартинкуДобавитьСтроку = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ДобавитьЭлементСписка,ЭтаФорма.УникальныйИдентификатор);
	HTMLКнопки = "<button data-bit-addrow=""true""><img src=" + СсылкаНаКартинкуДобавитьСтроку + " data-bit-addrow=""true"" style=""vertical-align: middle""/>&nbsp;" + ТекстКнопкиДобавитьСтроку + "</button><br>";
	
	ТаблицаНовая = ПолучитьТаблицуDOM(НовыйДокументHTML, Параметры.ИдентификаторТаблицыШаблонов);
	Если ТаблицаНовая <> Неопределено Тогда
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(НовыйДокументHTML.Тело, HTMLКнопки,,ТаблицаНовая);
	КонецЕсли;
	
	ПолеHTMLОсмотр = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(НовыйДокументHTML);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ДобавитьКнопкиДобавленияИУдаленияСтрок(Таблица)
	
	ИндексУзлаТелаТаблицы = Неопределено;
	Инд = 0;
	Для Каждого Узел Из Таблица.ДочерниеУзлы Цикл
		Если НРег(Узел.ИмяУзла) = "tbody" Тогда
			ИндексУзлаТелаТаблицы = Инд;
		Иначе
			Инд = Инд+1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексУзлаТелаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаКартинкуДобавить = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ДобавитьЭлементСписка,ЭтаФорма.УникальныйИдентификатор);
	СсылкаНаКартинкуУдалить = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.УдалитьНепосредственно,ЭтаФорма.УникальныйИдентификатор);
	
	Для Каждого СтрокаТаблицы Из Таблица.ДочерниеУзлы[ИндексУзлаТелаТаблицы].ДочерниеУзлы Цикл
		
		СтрокаСПараметрами = СтрокаТаблицы.ИндексСтроки = ИндексЭталоннойСтроки;
		ТекстКнопкиВставить		 = НСтр("ru = 'Ins'");
		ТекстКнопкиУдалить		 = НСтр("ru = 'Del'");
		ПодсказкаКнопкиВставить	 = НСтр("ru = 'Вставить строку перед текущей'");
		ПодсказкаКнопкиУдалить	 = НСтр("ru = 'Удалить строку'");
		
		HTMLНовойЯчейки = "<td style=""width:1%;border-left-style: hidden;border-bottom-style: hidden;border-top-style: hidden;""><div style=""width: 40px;"">"
			+ ?(СтрокаСПараметрами,"<img src='%3' title='%1' alt='%5' data-bit-insertrow=""true"" style=""vertical-align: middle""></img><span> </span>
			|	<img src='%4' title='%2' alt='%6' data-bit-deleterow=""true"" style=""vertical-align: middle""></img>", "") + "</div></td>";
			
		HTMLНовойЯчейки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(HTMLНовойЯчейки, ПодсказкаКнопкиВставить, ПодсказкаКнопкиУдалить, СсылкаНаКартинкуДобавить, СсылкаНаКартинкуУдалить, ТекстКнопкиВставить, ТекстКнопкиУдалить);
		
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(СтрокаТаблицы, HTMLНовойЯчейки,,СтрокаТаблицы.ПервыйДочерний);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметры(Элемент, МассивПараметров, МассивПараметровСВычисляемымЗначением, ДополнительныеЗначенияПараметров, ВложенныеТаблицы = Неопределено, ДанныеВложеннойТаблицы = Неопределено)
	
	Если ДанныеВложеннойТаблицы = Неопределено
			И ВложенныеТаблицы <> Неопределено
			И ВложенныеТаблицы.Найти(Элемент) <> Неопределено
		Или ДанныеВложеннойТаблицы <> Неопределено
			И (ДанныеВложеннойТаблицы.ЭталоннаяСтрокаВложеннойТаблицы = Элемент
				Или ВРег(Элемент.ИмяУзла) = "TABLE"
					И Элемент.ПолучитьАтрибут("data-bit-dyntable-id") <> Неопределено)
	Тогда
		
		Если ДанныеВложеннойТаблицы = Неопределено Тогда
			ИдентификаторРодительскойТаблицы = Неопределено;
			РодительТаблицы = Элемент.РодительскийУзел;
			Пока ВРег(РодительТаблицы.ИмяУзла) <> "BODY" Цикл
				
				Если ВРег(РодительТаблицы.ИмяУзла) = "TABLE" Тогда
					ИдентификаторРодительскойТаблицы = РодительТаблицы.ПолучитьАтрибут("data-bit-dyntable-id");
					Если ИдентификаторРодительскойТаблицы <> Неопределено Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				РодительТаблицы = РодительТаблицы.РодительскийУзел;
			КонецЦикла;
			
			Если ИдентификаторРодительскойТаблицы = Параметры.ИдентификаторТаблицыШаблонов Тогда
				// Сохраняем параметры не эталонной строки вложенной таблицы верхнего уровня.
				// Хоть по факту эти параметры относятся к вложенной таблице - в базе они будут храниться с привязкой к эталонной строке родительской таблицы, т.к. заполняются они именно в родительской.
				ИдентификаторВложеннойТаблицы = Элемент.ПолучитьАтрибут("data-bit-dyntable-id");
				
				ДанныеВложеннойТаблицы = Новый Структура("ЭталоннаяСтрокаВложеннойТаблицы");
				Попытка
					СсылкаВложеннойТаблицы = Справочники.ТаблицыШаблоновПриема.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ПолучитьАтрибут("data-bit-dyntable-id")));
					НомерЭталоннойСтрокиВложеннойТаблицы = СсылкаВложеннойТаблицы.НомерЭталоннойСтроки;
					
					Для Каждого СтрокаТаблицы Из Элемент.ПолучитьТелоТаблицы()[0].ДочерниеУзлы Цикл
						Если СтрокаТаблицы.ИндексСтроки = НомерЭталоннойСтрокиВложеннойТаблицы - 1 Тогда
							ДанныеВложеннойТаблицы.ЭталоннаяСтрокаВложеннойТаблицы = СтрокаТаблицы;
						КонецЕсли;
					КонецЦикла;
				Исключение КонецПопытки;
				
				Для Каждого ДочернийЭлемент Из Элемент.ДочерниеУзлы Цикл
					ПолучитьПараметры(Элемент, МассивПараметров, МассивПараметровСВычисляемымЗначением, ДополнительныеЗначенияПараметров, ВложенныеТаблицы, ДанныеВложеннойТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТипУзла = ТипУзлаDOM.Элемент
		И ЗначениеЗаполнено(Элемент.Идентификатор)
	Тогда
		Параметр = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.Идентификатор));
		Если Параметр <> Неопределено Тогда
			
			СтруктураПараметра = Новый Структура("ДопустимыеЗначения, Назначение, ДопПараметрыПоНазначению");
			
			ДополнительныеЗначенияПараметра = ДополнительныеЗначенияПараметров.Получить(Параметр);
			Если ДополнительныеЗначенияПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПараметра, ДополнительныеЗначенияПараметра);
			КонецЕсли;
			
			СтруктураПараметра.Вставить("Идентификатор",			Элемент.Идентификатор);
			СтруктураПараметра.Вставить("Наименование",				Параметр.Наименование);
			СтруктураПараметра.Вставить("ТипЗначения",				Параметр.ТипЗначения);
			СтруктураПараметра.Вставить("ОбязательноДляЗаполнения",	Параметр.ОбязательноДляЗаполнения);
			
			МассивПараметров.Добавить(СтруктураПараметра);
			Если Параметр.ИспользуетсяВычисляемоеЗначение Тогда
				МассивПараметровСВычисляемымЗначением.Добавить(Параметр);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДочернийЭлемент Из Элемент.ДочерниеУзлы Цикл
		ПолучитьПараметры(ДочернийЭлемент, МассивПараметров, МассивПараметровСВычисляемымЗначением, ДополнительныеЗначенияПараметров, ВложенныеТаблицы, ДанныеВложеннойТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПараметрами()
	
	КоличествоДобавленныхСтрок = ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы", Параметры.ИдентификаторТаблицыШаблонов)).Количество() / ПараметрыЭталоннойСтроки.Количество();
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПолеHTMLОсмотр);
	Таблица = ПолучитьТаблицуDOM(ДокументHTML, Параметры.ИдентификаторТаблицыШаблонов);
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексУзлаТелаТаблицы = Неопределено;
	Инд = 0;
	Для Каждого Узел Из Таблица.ДочерниеУзлы Цикл
		Если НРег(Узел.ИмяУзла) = "tbody" Тогда
			ИндексУзлаТелаТаблицы = Инд;
		Иначе
			Инд = Инд+1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексУзлаТелаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицы = Таблица.ДочерниеУзлы[ИндексУзлаТелаТаблицы].ДочерниеУзлы;
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если СтрокаТаблицы.ИндексСтроки > ИндексЭталоннойСтроки И СтрокаТаблицы.ИндексСтроки <= ИндексЭталоннойСтроки + КоличествоДобавленныхСтрок Тогда
			
			Для Каждого Элемент Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Элементы.ПолеHTMLДокумента.Документ, Параметры.ИдентификаторТаблицыШаблонов, "table", "data-bit-dyntable-id") Цикл
				ТекущаяСтрокаТаблицы = Элемент.rows[Строка(СтрокаТаблицы.ИндексСтроки)];
			КонецЦикла;
			
			Для Каждого Параметр Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторТаблицы, НомерСтрокиТаблицы", Параметры.ИдентификаторТаблицыШаблонов, СтрокаТаблицы.ИндексСтроки - ИндексЭталоннойСтроки)) Цикл
				РаботаСШаблонамиHTMLКлиент.УстановитьЗначениеПредставлениеПараметраHTMLИнтерактивно(Параметр, ТекущаяСтрокаТаблицы, Параметры.КешЗначенийВыбора);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметры(НомерСтрокиТаблицы, ИдентификаторСтроки)
	
	Для Каждого Параметр Из ПараметрыЭталоннойСтроки Цикл
		НоваяСтрока = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметр);
		НоваяСтрока.НомерСтрокиТаблицы				= НомерСтрокиТаблицы;
		НоваяСтрока.ИдентификаторТаблицы			= Параметры.ИдентификаторТаблицыШаблонов;
		НоваяСтрока.ИдентификаторСтроки				= ИдентификаторСтроки;
		НоваяСтрока.ИдентификаторРодительскойСтроки	= Параметры.ИдентификаторРодительскойСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстНовойСтроки(СтрокаТаблицы, ИдентификаторСтроки)
	
	СтрокаТаблицы.УдалитьАтрибут("hidden");
	СтрокаТаблицы.УстановитьАтрибут("data-bit-dyntable-tr-id", ИдентификаторСтроки);
	ТекстНовойСтроки = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(СтрокаТаблицы);
	СтрокаТаблицы.УстановитьАтрибут("hidden", "true");
	СтрокаТаблицы.УдалитьАтрибут("data-bit-dyntable-tr-id");
	
	Возврат ТекстНовойСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуDOM(Знач ДокументHTML, Знач ИдентификаторТаблицыШаблонов)
	
	Таблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдентификаторТаблицыШаблонов,,"data-bit-dyntable-id");
	Если Таблицы.Количество() <> 0 Тогда
		Таблица = Таблицы[0];
	Иначе
		Таблица = Неопределено;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗначениеЭлементаHTMLДляКонтекстногоМеню(ЭлементHTML, ИмяЭлемента)
	
	ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено;
	
	// Теги элементов, которые могут содержать атрибут 'id', не являющихся параметрами
	ИсключаемыеТеги = Новый Массив;
	ИсключаемыеТеги.Добавить("IMG");
	ИсключаемыеТеги.Добавить("TT");
	
	Попытка
		Если ИсключаемыеТеги.Найти(ВРег(ЭлементHTML.tagName)) = Неопределено И ЗначениеЗаполнено(ЭлементHTML.id) Тогда
			ЭлементыПоУИД = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементHTML.ownerDocument, ЭлементHTML.id);
			Для НомерЭлемента = 0 По ЭлементыПоУИД.length Цикл
				Если ЭлементыПоУИД[НомерЭлемента] = ЭлементHTML Тогда
					ДанныеЭлементаHTMLДляКонтекстногоМеню = Новый Структура("id, НомерЭлемента, ИмяЭлемента", ЭлементHTML.id, НомерЭлемента, ИмяЭлемента);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗначенияАктивныхТекстовыхПолей()
	
	АктивныеТекстовыеПоля = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Элементы.ПолеHTMLДокумента.Документ,,, "isOnChange");
	
	Для Каждого ЭлементТекстовогоПоля Из АктивныеТекстовыеПоля Цикл
		ЭлементСтроки = ПолучитьЭлементСтрокиЭлемента(ЭлементТекстовогоПоля);
		ОтборСтрокиПараметра = Новый Структура("НомерСтрокиТаблицы", Число(ЭлементСтроки.rowIndex) - ИндексЭталоннойСтроки);
		ДополнительныеПараметры = Новый Структура("ДокументHTML, ОтборСтрокиПараметра", ЭлементСтроки, ОтборСтрокиПараметра);
		РаботаСШаблонамиHTMLКлиент.ПеренестиЗначениеАктивногоТекстовогоПоляОсмотраВТаблицуПараметров(ЭтотОбъект, Элементы.ПолеHTMLДокумента,, ДополнительныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
