&НаКлиенте
Перем мАвтоматическиЗаполнятьМатериалы; // Заполнять ли автоматически материалы при открытии нового документа.

&НаКлиенте
Перем мУчетнаяПолитика;

&НаКлиенте
Перем мСписокРаботДокумента;

&НаКлиенте
Перем ПредыдущийПрием;

&НаКлиенте
Перем НеобходимоОбновитьСтандартыЛечения;

&НаКлиенте
Перем соотвКешИзображенийШаблонов;

&НаКлиенте
Перем ТекущийЭлементПараметраШаблона;

&НаКлиенте
Перем ВерсияДляПечати;

&НаКлиенте
Перем мПредыдущаяСтраницаОсновнойПанелиПодбор;

&НаКлиенте
Перем мПараметрыПечатиСтраницыОсмотра;

&НаКлиенте
Перем мОбновленныеСтрокиШаблонов;

&НаКлиенте
Перем ДанныеЭлементаHTMLДляКонтекстногоМеню;

#Область СобытияФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Версионирование.
	ДокументыПриемаКлиентСервер.ЗаполнитьТаблицуВерсийШаблонов(ВерсииШаблонов, Объект);
	ЗаполнитьДополнительныеРеквизитыТабЧастиШаблоны();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкаРеквизитовФормыПриСоздании();
	
	Элементы.СтандартыЛеченияПоДиагнозам.Пометка = РаботаСФормамиСервер.ПолучитьНастройкуФормы("ФормаДокументаПрием", "СтандартыЛеченияПоДиагнозам", Ложь);
	
	ДополнительныеСвойства = Новый Структура;
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма, Ложь);
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	ЗаполнитьДокументИзПараметровФормыПриСоздании();
	
	РаботаСКлиентамиПереопределяемый.ПриемПриСозданииНаСервере(Объект,ДополнительныеСвойства,Параметры); // Строго после ЗаполнитьДокументИзПараметровФормыПриСоздании().
	
	НастроитьДопустимоеКоличествоШаблоновПриСоздании(); // Строго после ЗаполнитьДокументИзПараметровФормыПриСоздании().
	
	РаботаСФормамиСервер.НастройкаПодбораПриСоздании(ЭтаФорма, Истина);
	Если РаботаСФормамиКлиентСервер.ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Тогда
		НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект,,Истина);
	КонецЕсли;
	
	// Настройка формы для приёма по медосмотру.
	ЭтоМедосмотр = ТипЗнч(Объект.ПервичныйПрием) = Тип("ДокументСсылка.ПрохождениеМедосмотра");
	Элементы.ЭтоМедосмотр.Видимость = ЭтоМедосмотр Или ПолучитьФункциональнуюОпцию("ИспользоватьПрофосмотры");
	ПриИзмененииЭтоМедосмотр(Элементы, Объект.ПервичныйПрием, ЭтоМедосмотр);
	// Если медосмотр и не указан шаблон осмотра, текущей страницей при открытии будет страница диагнозов.
	Если ЭтоМедосмотр > КоличествоЗаполненныхШаблоновПриема(Объект.ШаблоныПриема) Тогда
		Если Объект.Диагнозы.Количество() = 0 Тогда
			Объект.Диагнозы.Добавить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоМедосмотр Тогда
		ВредностиДиагноза = ПолучитьВредностиКлиента(Объект.ПервичныйПрием, Объект.ВредныеФакторыПротивопоказаний);
		Если ЗначениеЗаполнено(Объект.Врач) 
			И Не ЗначениеЗаполнено(Объект.Специализация)
			И Объект.Ссылка.Пустая()
		Тогда
			Объект.Специализация = Объект.Врач.Специализация;
		КонецЕсли;
		
		Если Объект.Ссылка.Пустая() И Не Объект.ПервичныйПрием.МедицинскаяКарта.Пустая() Тогда
			Объект.МедицинскаяКарта = Объект.ПервичныйПрием.МедицинскаяКарта;
		КонецЕсли;
	КонецЕсли;
	
	ДиагнозыНаФорме_ПриСозданииНаСервере();
	
	// Заказ во внешнюю лабораторию.
	ИмяТипаОснования = ДопСерверныеФункции.ИмяСсылочногоТипа(Объект.Основание);
	ЭтоПриемРезультатовАнализа = ЗначениеЗаполнено(Объект.Основание)
								И (		ИмяТипаОснования = "Документ.ЗаказВоВнешнююЛабораторию"
									Или ИмяТипаОснования = "Документ.invЗаявкаНаИсследование"
									Или ИмяТипаОснования = "Документ.ЗаказНаИсследованиеВнутренний"
								  );
	
	ИспользуетсяВерсионирование = мУчетнаяПолитика.ИспользоватьВерсионированиеШО;
	
	// Заполнение шаблона осмотра по-умолчанию для врача.
	Если Объект.Ссылка.Пустая()
		И ЗначениеЗаполнено(Объект.Врач)
		И КоличествоЗаполненныхШаблоновПриема(Объект.ШаблоныПриема) = 0
		И Не ЭтоПриемРезультатовАнализа
	Тогда
		ДанныеШаблона = ПолучитьДанныеОсновногоШаблонаОсмотраСотрудника(Объект.Врач, Объект.Дата, ИспользуетсяВерсионирование, ЭтоМедосмотр, Объект.Специализация);
		
		Если ДанныеШаблона <> Неопределено Тогда
			Если Объект.ШаблоныПриема.Количество() = 0 Тогда
				СтрокаШаблона = Объект.ШаблоныПриема.Добавить();
			Иначе
				СтрокаШаблона = Объект.ШаблоныПриема[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаШаблона, ДанныеШаблона);
			ШаблонОсмотра = СтрокаШаблона.ШаблонПриема;
		КонецЕсли;
	КонецЕсли;
	
	// Обновить отметки выполнения дествий медосмотра. Добавить шаблоны дополнительных обследований.
	ОбновитьОтметки();
	
	Если Объект.Ссылка.Пустая() 
		И ЗначениеЗаполнено(Объект.Клиент)
	Тогда
		// Автоподстановка медицинской карты клиента
		Если Не ЗначениеЗаполнено(Объект.МедицинскаяКарта) Тогда
			Объект.МедицинскаяКарта = КлиентПриИзмененииСервер(Объект.Клиент);
		КонецЕсли;
		
		// Автоподстановка первичного приёма
		Если ЗначениеЗаполнено(Объект.МедицинскаяКарта)
			И Не Объект.ЭтоПервичный
		Тогда
			Если Не ЗначениеЗаполнено(Объект.ПервичныйПрием) Тогда
				ПодставитьПервичныйПриемПоМедКарте(Объект.МедицинскаяКарта, Объект.ПервичныйПрием);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ПервичныйПрием)
				И Объект.Диагнозы.Количество() = 0
			Тогда
				ЗаполнитьДиагнозамиИзПриема(Объект.ПервичныйПрием, Истина, Ложь, Объект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПланЛеченияНаСервере();
	
	ЗаполнитьИспользуемыеСтандартыЛечения(ИспользуемыеСтандартыЛечения, ПервичныйПриемДокумента(Объект));
	ЗаполнитьНМУДляПлановЛечения();

	ИнициализацияПолейОсмотраПриСоздании();

	ВосстановитьФлажокЗакрытНаКлиенте(Закрыт, Объект.Закрыт, Объект.Ссылка, Объект.ПервичныйПрием);
	
	ПолучитьКоличествоРецептовПоПервичномуПриему(
		?(ЗначениеЗаполнено(Объект.ПервичныйПрием), Объект.ПервичныйПрием, Объект.Ссылка),
		Элементы.ОткрытьСписокРецептов);
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, 
																"КомандаОткрытьАнамнез",
																ЗначениеЗаполнено(мУчетнаяПолитика.ШаблонАнамнезаЖизни));
	Если ЭтоМедосмотр
		И ЗначениеЗаполнено(Объект.Врач)
		И ЗначениеЗаполнено(Объект.Клиент)
		И ЗначениеЗаполнено(Объект.МедицинскаяКарта)
		И ЗначениеЗаполнено(Объект.Специализация)
		И ЗначениеЗаполнено(Объект.ПервичныйПрием)
	Тогда
		Элементы.ГруппаШапка.Видимость = Ложь;
	КонецЕсли;
	
	#Область ЭлектронныеПодписи
	ИспользуютсяЭП = ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК();
	Если ИспользуютсяЭП И Не Объект.Ссылка.Пустая() Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФО = Новый Структура("ПараметрУчетнаяПолитикаРасширенная", Перечисления.ПараметрыУчетнойПолитики.ИспользоватьЭлектронныеПодписиЭМК);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	#КонецОбласти
	
	ГотовыеФразы.Параметры.УстановитьЗначениеПараметра("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	НастроитьВидимостьГотовыхФраз();
	Элементы.РаботыНомерПробы.Видимость = ВычислитьВидимостьКолонкиНомераПробы(Объект.Работы);
	Элементы.ГруппаРецепты.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.Рецепт);
	
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ОткрытьЛекарственнуюНепереносимость", "Заголовок", МедицинскаяДеятельность.ЗаголовокКнопкиОткрытьЛекарственнуюНепереносимость(Объект.Клиент));
	ЛН_ПриСоздании();
	
	Элементы.РаботыХарактеристикаНоменклатуры.Видимость = мУчетнаяПолитика.ВестиУчетПоХарактеристикам;
	Элементы.МатериалыХарактеристикаНоменклатуры.Видимость = мУчетнаяПолитика.ВестиУчетПоХарактеристикам;
	Элементы.МатериалыГруппаЗаполнитьПоFEFO.Видимость = мУчетнаяПолитика.ВестиУчетПоХарактеристикам; 
	
	Адресwkhtmltopdf = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("Адресwkhtmltopdf");
	МожноФормироватьPDFНаСервере = РаботаСШаблонамиHTMLКлиентСервер.УтилитаWkhtmltopdfУстановленаВСистеме(Адресwkhtmltopdf);
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ФормироватьPDFНаКлиенте") Тогда
		АдресWkhtmltopdfНаКлиенте = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РасположениеПрограммыWkhtmltopdfНаКлиенте");
	КонецЕсли;
	
	// Комплексные расчеты
	Если Объект.Ссылка.Пустая() Тогда
		Объект.КомплексныйРасчет = КомплексныеРасчетыКлиентов.ПолучитьКомплексныеРасчетыПоПриему(Объект.Ссылка, Объект.ПервичныйПрием);
	КонецЕсли;
	ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	УправлениеЗаказами.УстановитьУсловноеОформлениеЭтапамРабот(ЭтаФорма);
	Элементы.ГруппаЭтапыРабот.Видимость = ЗначениеЗаполнено(Объект.КомплексныйРасчет);
	
	// DICOM
	ИспользоватьDICOM = Метаданные.ОбщиеМодули.Найти("DICOMРаботаСДрайвером") <> Неопределено И DICOMРаботаСДрайвером.ПолучитьЗначениеКонстантыИспользоватьDICOM();
	Если ИспользоватьDICOM Тогда
		ДанныеDICOMЛистов = ОбновитьDICOMЛистыНаСервере(Объект.Ссылка);
		ЗаполнитьDICOMЛисты(ДанныеDICOMЛистов, ЭтаФорма);
	Иначе
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СтраницаDICOM", Ложь);
	КонецЕсли;
	
	УстановитьВидимостьФлагаЗакрытСервер(Элементы.Закрыт, Объект.ПервичныйПрием);
	
	ТекущийЭлементПриСоздании();
	
	// РЭМД
	ИспользуетсяРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	Если РаботаСФормамиКлиентСервер.ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Тогда // 8.3.23 и выше.
		// Довычисление клиентской переменной.
		мАвтоматическиЗаполнятьМатериалы = мУчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги И мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловОУ И Не Объект.РучнаяКорректировкаМатериалов; // См. НастроитьРежимРедактированияТабличногоПоляМатериалов()
	Иначе // 8.3.21, 8.3.22.
		НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект, мАвтоматическиЗаполнятьМатериалы);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Объект.ШаблоныПриема.Количество() > 0 Тогда
		ЗначенияПоУмолчанию = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(ТаблицаПараметров, КешЗависимыхПараметров, Объект);
		РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(ТаблицаПараметров, ЗначенияПоУмолчанию);
	КонецЕсли;
	
	ОбновитьСписокРаботДокумента();
	ПредыдущийПрием = Объект.ПервичныйПрием;
	
	НастроитьДоступностьЭлементов();
	УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра();
	РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма);
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	НеобходимоОбновитьСтандартыЛечения = Ложь;
	УстановитьОтборСтандартамЛечения(Элементы.СтандартыЛеченияПоДиагнозам.Пометка);
	
	УстановитьОтборГотовыхФраз(Ложь, ПредопределенноеЗначение("Справочник.СоставныеФразы.ПустаяСсылка"));
	
	// Подготовка данных по изображениям в шаблонах
	ВерсииШаблоновДокумента= Новый Массив;
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		ВерсииШаблоновДокумента.Добавить(ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема));
	КонецЦикла;
	РаботаСШаблонамиHTMLКлиентСервер.ИнициализироватьНастройкиИзображенийПриема(соотвКешИзображенийШаблонов, ВерсииШаблоновДокумента, ЭтаФорма.УникальныйИдентификатор);
	
	Если ИзмененияЗапрещены И Не ЭтоПриемРезультатовАнализа Тогда
		СформироватьОсмотрПоЭП();
	Иначе
		ПреобразоватьОсмотрВВерсиюДляРедактирования();
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	МожноФормироватьPDFНаКлиенте = РаботаСШаблонамиHTMLКлиентСервер.УтилитаWkhtmltopdfУстановленаВСистеме(АдресWkhtmltopdfНаКлиенте);
	
	Элементы.СохранитьВPDF.Видимость = МожноФормироватьPDFНаКлиенте Или МожноФормироватьPDFНаСервере;
	
	// РЭМД
	ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЭтоПодписание") Тогда
		ДополнительныеСвойства.Вставить("ЭтоПодписание");
	КонецЕсли;
	
	Если ИспользуютсяЭП И Не ДополнительныеСвойства.Свойство("ЭтоПодписание") Тогда	
		Если Не Объект.Ссылка.Пустая() И Объект.ПодписанЭП Тогда
			Если Вопрос(НСтр("ru='Документ подписан, после записи подпись будет перепроверена. Продолжить?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			Иначе
				ДополнительныеСвойства.Вставить("ВыполнитьПроверкуЭП");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров();
	
	ОчиститьПустуюТаблицуДиагнозов();
	
	УдалитьПустыеСтрокиШаблонов();
	
	ДокументыПриемаКлиент.СохранитьИдентификаторыСтрокШаблоновПередЗаписью(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	СвернутаяТаблицаРабот = ТекущийОбъект.Работы.Выгрузить();
	СвернутаяТаблицаРабот.Свернуть("Номенклатура");
	МассивНоменклатурыБезДоговора = ОтраслевыеДополнения.ПолучитьНоменклатуруНаКоторуюНетДоговора(СвернутаяТаблицаРабот.ВыгрузитьКолонку("Номенклатура"), ТекущийОбъект.Клиент, ТекущийОбъект.Дата);
	
	Если МассивНоменклатурыБезДоговора.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(ОтраслевыеДополнения.СформироватьТекстСообщенияНоменклатурыБезДоговора(МассивНоменклатурыБезДоговора));
		
		// Если проведение услуг, требующих договора, без договора запрещено, то отменить проведение.
		Отказ = Отказ Или мУчетнаяПолитика.ЗапретитьПроведениеПродажиНоменклатурыБезДоговора;
		
	КонецЕсли;
	
	НазначенныеАнализы = ВыгрузитьНазначенныеАнализыИзПланаЛечения();
	Если НазначенныеАнализы.Количество() <> 0 Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НазначенныеАнализы", НазначенныеАнализы);
	КонецЕсли;
	
	// Подготовка оповещения журнала записи об изменении состояния заявки
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Заявка")
	Тогда
		ДополнительныеСвойства.Вставить("СостояниеЗаявки", Объект.ДокументОснование.Состояние);
	КонецЕсли;
	
	ПараметрыПриема = Новый Структура("ТаблицаПараметров, ПараметрыТаблицШаблонов", ТаблицаПараметров.Выгрузить(), ПараметрыТаблицШаблонов.Выгрузить());
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыПриема", ПараметрыПриема);
	
	ПланЛеченияТаблица = МедицинскаяДеятельность.ВыгрузитьПланЛечения(СписокНазначений, ТекущийОбъект.Ссылка);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПланЛечения", ПланЛеченияТаблица);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоНовыйНаФорме", ТекущийОбъект.ЭтоНовый());
	
	// Удаляю из таблицы параметров те, что не встречаются в их шаблонах.
	СтрокиПараметровКУдалению = Новый Массив;
	Отбор = Новый Структура("ИдентификаторСтрокиШаблона");
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		ВерсияШаблона = ПолучитьВерсиюШаблонаСервер(СтрокаШаблона.ШаблонПриема);
		ПараметрыШаблона = ВерсияШаблона.СоответствияПараметрам;
		Отбор.ИдентификаторСтрокиШаблона = СтрокаШаблона.ПолучитьИдентификатор();
		Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Отбор) Цикл
			Если ПараметрыШаблона.Найти(СтрокаПараметра.Параметр) = Неопределено Тогда
				СтрокиПараметровКУдалению.Добавить(СтрокаПараметра);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаПараметра Из СтрокиПараметровКУдалению Цикл
		ТаблицаПараметров.Удалить(СтрокаПараметра);
	КонецЦикла;
	
	РассчитатьПечатныеВерсииВХодеЗаписиДокумента(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	РаботаСШаблонамиHTML.ЗаписатьЗначенияПараметровДокумента(ТекущийОбъект, ТаблицаПараметров, ПараметрыТаблицШаблонов, Отказ, Объект.ШаблоныПриема, ПараметрыЗаписи);
	Если Отказ Тогда Возврат; КонецЕсли;
	
	РаботаСШаблонамиHTML.СохранитьРисункиДокумента(ТекущийОбъект, РисункиКартинок, Объект.ШаблоныПриема);
	РаботаСШаблонамиHTML.СохранитьДобавленныеИзображенияДокумента(ТекущийОбъект, ДобавленныеИзображения, Объект.ШаблоныПриема);
	
	// Стандарты лечения.
	ПервичныйПрием = ТекущийОбъект.Ссылка;
	Если Не ТекущийОбъект.ЭтоПервичный И ЗначениеЗаполнено(ТекущийОбъект.ПервичныйПрием) Тогда
		ПервичныйПрием = ТекущийОбъект.ПервичныйПрием;
	КонецЕсли;
	
	СтандартыЛеченияНЗ = РегистрыСведений.СтандартыЛечения.СоздатьНаборЗаписей();
	СтандартыЛеченияНЗ.Отбор.ПервичныйПрием.Установить(ПервичныйПрием);
	Для Каждого СтрокаСтандартЛечения Из ИспользуемыеСтандартыЛечения Цикл
		НоваяЗапись = СтандартыЛеченияНЗ.Добавить();
		НоваяЗапись.ПервичныйПрием = ПервичныйПрием;
		НоваяЗапись.СтандартЛечения = СтрокаСтандартЛечения.СтандартЛечения;
	КонецЦикла;
	СтандартыЛеченияНЗ.Записать();
	
	СтандартыЛеченияВПланеЛечения = РегистрыСведений.СтандартыЛеченияВПланеЛечения.СоздатьНаборЗаписей();
	Для Каждого СтрокаКУдалению Из СтрокиПланаЛеченияКУдалению Цикл
		СтандартыЛеченияВПланеЛечения.Отбор.ИдентификаторНазначения.Установить(СтрокаКУдалению.Значение);
		СтандартыЛеченияВПланеЛечения.Записать();
	КонецЦикла;
	
	Для Каждого СтрокаНМУДляПлановЛечения Из НМУДляПлановЛечения Цикл
		
		СтандартыЛеченияВПланеЛеченияНоваяЗапись = РегистрыСведений.СтандартыЛеченияВПланеЛечения.СоздатьМенеджерЗаписи();
		СтандартыЛеченияВПланеЛеченияНоваяЗапись.ИдентификаторНазначения = СтрокаНМУДляПлановЛечения.ИдентификаторНазначения;
		СтандартыЛеченияВПланеЛеченияНоваяЗапись.НоменклатураМедицинскихУслуг = СтрокаНМУДляПлановЛечения.НоменклатураМедицинскихУслуг;
		СтандартыЛеченияВПланеЛеченияНоваяЗапись.ВидНазначения = СтрокаНМУДляПлановЛечения.ВидНазначения;
		СтандартыЛеченияВПланеЛеченияНоваяЗапись.Записать();
		
	КонецЦикла;
	
	ЗаписатьОтметкиДействий(ТекущийОбъект.ПервичныйПрием,ТекущийОбъект.Ссылка);
	
	// Формирование списка выполенных этапов работ
	ВыполненныеЭтапы = КомплексныеРасчетыКлиентовСервер.ПолучитьВыполненныхЭтаповРаботИзТаблицы(ЭтапыРабот);
	УправлениеЗаказами.ОтметитьВыполненныеЭтапыРасчета(ТекущийОбъект.КомплексныйРасчет, ВыполненныеЭтапы, ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Истина, ЭтаФорма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	Тогда
		Если ТекущийОбъект.ДополнительныеСвойства.ЭтоНовыйНаФорме Тогда
			ДополнитьВыполнениеПланаЛеченияТекущимДокументом(СписокНазначений, ТекущийОбъект);
	    Иначе
			ЗаполнитьДанныеВыполненияПланаЛечения(СписокНазначений);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Заявка")
		И (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Или
		   ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
	Тогда
	    ДополнительныеСвойства.Вставить("ОповеститьОбИзмененииЗаявки", ДополнительныеСвойства.СостояниеЗаявки <> Объект.ДокументОснование.Состояние);
		ДополнительныеСвойства.Вставить("ДатаЗаявки", Объект.ДокументОснование.ДатаНачала);
	Иначе
	    ДополнительныеСвойства.Вставить("ОповеститьОбИзмененииЗаявки", Ложь);
		ДополнительныеСвойства.Вставить("ДатаЗаявки", Дата(1,1,1));
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыТабЧастиШаблоны();
	
	// РЭМД
	ИнтеграцияЕГИСЗ_РЭМД.ПроверитьНаличиеПроблемныхПараметровВДокументеПослеЗаписи(Объект.Ссылка, ПараметрыЗаписи);
	
	Если ИспользуютсяЭП Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанПрием", Новый Структура("Прием, ДокументОснование, Врач, Дата", 
												Объект.Ссылка,
												Объект.ДокументОснование,
												Объект.Врач,
												Объект.Дата));
	ОбновитьКоличествоРецептов();
	
	Если ДополнительныеСвойства.Свойство("ОповеститьОбИзмененииЗаявки") И ДополнительныеСвойства.ОповеститьОбИзмененииЗаявки Тогда
		Оповестить("ЗаявкаИзменение",Новый Структура("Дата, Ссылка, ИзменилосьТолькоСостояние", ДополнительныеСвойства.ДатаЗаявки, Объект.ДокументОснование, Истина));
	КонецЕсли;
	
	Если ЭтоМедосмотр Тогда
		Оповестить("ОбновитьОтметки",Новый Структура("ПрохождениеМО",Объект.ПервичныйПрием));
	КонецЕсли;
	
	// ЭЦП.
	Если ДополнительныеСвойства.Свойство("ВыполнитьПроверкуЭП") Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("КоллекцияПодписей", ЭлектронныеПодписи);
		ПараметрыОповещения.Вставить("ДокументПодписан", Объект.ПодписанЭП);
		ПараметрыОповещения.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеЗавершенияПроверкиПодписи", ЭтотОбъект));
		
		бит_СертификатыЭЦПКлиент.ПроверитьПодписиОбъекта(ЭтотОбъект,,
			Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", бит_СертификатыЭЦПКлиент, ПараметрыОповещения));
		
	КонецЕсли;
	
	// КОРП. Оповещение формы-владельца о записи
	Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Оповестить("ПриемЗапись", ВладелецФормы, Объект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КомплексныйРасчет) Тогда 
		Оповестить("ИзмененыЭтапыРаботЗаказа", Объект.КомплексныйРасчет, Объект.Ссылка);
	КонецЕсли;
	
	// Компенсируем очищение платфомой доп. колонок табл. части Объекта при автосохранении при вводе на основании.
	ПодключитьОбработчикОжидания("ПослеПослеЗаписи", 0.1, Истина);
	
	Если ПараметрыЗаписи.Свойство("ТекстПредупреждения") Тогда
		ПоказатьПредупреждение(,ПараметрыЗаписи.ТекстПредупреждения);
	КонецЕсли;
	
	ДокументыПриемаКлиент.ОбновитьИдентификаторыСтрокШаблоновПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УбратьФокусСПоляВводаНаТело();
	
	Если Не ЗавершениеРаботы Тогда
		// Сохранение настроек формы
		НастройкиФормы = Новый Структура;
		НастройкиФормы.Вставить("СтандартыЛеченияПоДиагнозам", Элементы.СтандартыЛеченияПоДиагнозам.Пометка);
		
		РаботаСФормамиСервер.СохранитьНастройкиФормы(НастройкиФормы, "ФормаДокументаПрием");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования.
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования.
	
	Если ЗначениеЗаполнено(ВременныйКаталогИзображений) Тогда
		УдалитьФайлы(ВременныйКаталогИзображений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем Действие;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.МедицинскиеКарты") Тогда
		
		Объект.МедицинскаяКарта = ВыбранноеЗначение;
		МедицинскаяКартаПриИзменении(Элементы.МедицинскаяКарта);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВыбранноеЗначение.Свойство("Действие", Действие);
		
		Если Действие = "ПодборРаботы" Тогда
			
			Элементы.СтраницыРаботы.ТекущаяСтраница = Элементы.ГруппаРаботы;
			
			Если ДопСерверныеФункции.ПолучитьРеквизит(ВыбранноеЗначение.Номенклатура, "ВидНоменклатуры") = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
				СтрокаРаботы = Объект.Работы.Добавить();
				СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
				СтрокаРаботы.Номенклатура = ВыбранноеЗначение.Номенклатура;
				СтрокаРаботы.ХарактеристикаНоменклатуры = ВыбранноеЗначение.ХарактеристикаНоменклатуры;
				СтрокаРаботы.Количество = ВыбранноеЗначение.Количество;
				Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
			Иначе
				СоставНабора = ОбщегоНазначенияСервер.ПолучитьСоставНабора(ВыбранноеЗначение.Номенклатура);
				Для Инд = 0 По СоставНабора.Количество()-1 Цикл
					СтрокаРаботы = Объект.Работы.Добавить();
					СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
					СтрокаРаботы.Номенклатура = СоставНабора[Инд].Комплектующая;
					СтрокаРаботы.ХарактеристикаНоменклатуры = СоставНабора[Инд].ХарактеристикаКомплектующей;
					СтрокаРаботы.Количество = СоставНабора[Инд].Количество * ВыбранноеЗначение.Количество;
				КонецЦикла;
				Если СтрокаРаботы <> Неопределено Тогда
					Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			РаботыНоменклатураПриИзменении(Неопределено);
		ИначеЕсли Действие = "ПодборМатериала" Тогда
			
			Если Не мАвтоматическиЗаполнятьМатериалы Тогда
				Элементы.СтраницыРаботы.ТекущаяСтраница = Элементы.ГруппаМатериалы;
				НовыйМатериал = Объект.Материалы.Добавить();
				НовыйМатериал.Номенклатура = ВыбранноеЗначение.Номенклатура;
				НовыйМатериал.ХарактеристикаНоменклатуры = ВыбранноеЗначение.ХарактеристикаНоменклатуры;
				НовыйМатериал.Количество = ВыбранноеЗначение.Количество;
				НовыйМатериал.ЕдиницаИзмерения = ВыбранноеЗначение.ЕдиницаИзмерения;
				Если ВыбранноеЗначение.СерияНоменклатуры <> Неопределено Тогда
					НовыйМатериал.СерияНоменклатуры = ВыбранноеЗначение.СерияНоменклатуры;
				КонецЕсли;
				
				// Подставить номенклатуру работы, если она одна в документе.
				Если мСписокРаботДокумента.Количество() = 1 Тогда
					Для Каждого СтрокаРаботы Из Объект.Работы Цикл
						Если СтрокаРаботы.КлючСтроки = мСписокРаботДокумента[0].Значение Тогда
							НовыйМатериал.Работа = СтрокаРаботы.Номенклатура;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Диагнозы") Тогда
		Элементы.Диагнозы.ТекущиеДанные.Диагноз = ВыбранноеЗначение;
		ДиагнозПриИзменении();
		НеобходимоОбновитьСтандартыЛечения = Элементы.СтандартыЛеченияПоДиагнозам.Пометка;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Обработка.ЛабораторныеИсследования.Форма.Форма"
	Тогда
		ДанныеИсследований = ПолучитьДанныеПодбораИзРегистраИсследований(ВыбранноеЗначение);
		Для Каждого ДанныеИсследования Из ДанныеИсследований Цикл
			Если Объект.Работы.НайтиСтроки(Новый Структура("ИД", ДанныеИсследования.ИД)).Количество() = 0 Тогда
				СтрокаРаботы = Объект.Работы.Добавить();
				СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
				СтрокаРаботы.Номенклатура = ДанныеИсследования.Номенклатура;
				СтрокаРаботы.Ид			  = ДанныеИсследования.Ид;
				СтрокаРаботы.НомерПробы   = ДанныеИсследования.КодПробы;
				СтрокаРаботы.Количество	  = 1;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.РаботыНомерПробы.Видимость = Истина;
		
		// Дополнение шаблонов осмотра недостающими шаблонами анализов.
		РаботыПриема = Новый Массив;
		ШаблоныПриема = Новый Массив;
		Для Каждого СтрокаТабЧасти Из Объект.Работы Цикл
			Если ЗначениеЗаполнено(СтрокаТабЧасти.Номенклатура) Тогда
				РаботыПриема.Добавить(СтрокаТабЧасти.Номенклатура);
			КонецЕсли;
		КонецЦикла;

		Для Каждого СтрокаТабЧасти Из Объект.ШаблоныПриема Цикл
			Если ЗначениеЗаполнено(СтрокаТабЧасти.ШаблонПриема) Тогда
				ШаблоныПриема.Добавить(СтрокаТабЧасти.ШаблонПриема);
			КонецЕсли;
		КонецЦикла;
		ДанныеШаблонов = ПолучитьШаблоныДополненияПриемаПоАнализам(ШаблоныПриема, РаботыПриема, ИспользуетсяВерсионирование, Объект.Дата);

		Для Каждого ДанныеВерсииШаблона Из ДанныеШаблонов.ВерсииШаблонов Цикл
			Если ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", ДанныеВерсииШаблона.Ключ)).Количество() = 0 Тогда
				НоваяСтрока = ВерсииШаблонов.Добавить();
				НоваяСтрока.ШаблонПриема = ДанныеВерсииШаблона.Ключ;
				НоваяСтрока.ВерсияШаблона = ДанныеВерсииШаблона.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеШаблонов.НедостающиеШаблоны.Количество() <> 0 Тогда
			ДобавленныеСтрокиШаблонов = Новый Массив;
			Для Каждого СтруктураСтрокиШаблона Из ДанныеШаблонов.НедостающиеШаблоны Цикл
				СтрокаШаблона = Объект.ШаблоныПриема.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаШаблона, СтруктураСтрокиШаблона);
				ДобавленныеСтрокиШаблонов.Добавить(СтрокаШаблона.ПолучитьИдентификатор());
			КонецЦикла;
			ПерезаполнитьТаблицуСтраницШаблоновПриема();
			Если ДобавленныеСтрокиШаблонов.Количество() > 1 Тогда
				ЗаполнитьШаблонЗначениямиПоУмолчанию(ДобавленныеСтрокиШаблонов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборМедицинскогоПротивопоказанияИДиагноза" Тогда
		Если Параметр.Свойство("ВладелецФормы")
			И Параметр.ВладелецФормы = ЭтаФорма
		Тогда
			Если ЗначениеЗаполнено(Параметр.Диагноз) Тогда
				НайденныеСтроки = Объект.Диагнозы.НайтиСтроки(Новый Структура("Диагноз",Параметр.Диагноз));
				Если НайденныеСтроки.Количество() = 0 Тогда
					ТекущиеДанные = Элементы.Диагнозы.ТекущиеДанные;
					Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Диагноз) Тогда
						ТекущиеДанные.Диагноз = Параметр.Диагноз;
						ТекущиеДанные.Противопоказание = Параметр.Противопоказание;
						УстановитьВредностьСтрокеДиагноза(ТекущиеДанные, Параметр.ВредныйФактор);
					Иначе
						НоваяСтрока = Объект.Диагнозы.Добавить();
						НоваяСтрока.Диагноз = Параметр.Диагноз;
						НоваяСтрока.Противопоказание = Параметр.Противопоказание;
						НоваяСтрока.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Диагнозы);
						УстановитьВредностьСтрокеДиагноза(НоваяСтрока, Параметр.ВредныйФактор);	
					КонецЕсли;					
				Иначе
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						Если Не ЗначениеЗаполнено(НайденнаяСтрока.Противопоказание) Тогда
							НайденнаяСтрока.Противопоказание = Параметр.Противопоказание;
							УстановитьВредностьСтрокеДиагноза(НайденнаяСтрока, Параметр.ВредныйФактор);
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если Элементы.Диагнозы.ТекущиеДанные = Неопределено Тогда
					ТекущаяСтрокаДиагноза = Объект.Диагнозы.Добавить();
				Иначе
					ТекущаяСтрокаДиагноза = Элементы.Диагнозы.ТекущиеДанные;
				КонецЕсли;
				ТекущаяСтрокаДиагноза.Противопоказание = Параметр.Противопоказание;
				УстановитьВредностьСтрокеДиагноза(ТекущаяСтрокаДиагноза, Параметр.ВредныйФактор);
			КонецЕсли;
			УстановитьПометкиВредныхФакторовСтрокиДиагноза();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененСоставФайлов" И Источник = Объект.Ссылка Тогда
		Если ИспользуютсяЭП Тогда
				
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("КоллекцияПодписей", ЭлектронныеПодписи);
			ПараметрыОповещения.Вставить("ДокументПодписан", Объект.ПодписанЭП);
			ПараметрыОповещения.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеЗавершенияПроверкиПодписи", ЭтотОбъект));
			
			бит_СертификатыЭЦПКлиент.ПроверитьПодписиОбъекта(ЭтотОбъект,,
				Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", бит_СертификатыЭЦПКлиент, ПараметрыОповещения));
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененыЭтапыРаботЗаказа" И 
		Параметр = Объект.КомплексныйРасчет И Источник <> Объект.Ссылка 
	Тогда
		ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	ИначеЕсли ИмяСобытия = "ЛекарственнаяНепереносимостьИзменение" Тогда
		Если Параметр = Объект.Клиент Тогда
			Элементы.ОткрытьЛекарственнуюНепереносимость.Заголовок = МедицинскаяДеятельность.ЗаголовокКнопкиОткрытьЛекарственнуюНепереносимость(Объект.Клиент);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыбраныШаблоныПриема" Тогда
		Если Источник = ЭтотОбъект Тогда
			ПерезаполнитьШаблоныПриема(Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СобытиеЗакрытияФормыСозданияПланаЛечения"
		И Источник.ВладелецФормы = ЭтотОбъект
	Тогда
		ЗаполнитьПланыИзФормыСозданияПланаЛечения(Параметр.Планы, Параметр.Связи, Параметр.СтрокиПланаКУдалению);
	ИначеЕсли ИмяСобытия = "ИзменилисьПодписи"
		И Параметр = Объект.Ссылка
	Тогда
		ЭтотОбъект.Прочитать();
		ОбновитьДанныеПослеПодписания();
		ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
		СформироватьОсмотрПоЭП();
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПодписей"
		И Параметр = Объект.Ссылка
	Тогда
		ОбновитьСписокПодписей();
	ИначеЕсли ИмяСобытия = "ЛистНетрудоспособностиЗапись" Тогда
		Если Параметр = Объект.Клиент Тогда
			ЛН_ОбновитьГруппуКоманд(Объект.Клиент, Больничные, Элементы.ГруппаЛистыНеструдоспособности, Элементы.ЛН_Открыть, Элементы.ЛН_ОткрытьСписокЛНПациента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КНОПОК.

&НаКлиенте
Процедура ПодборОбследований(Команда)
	СтруктураПараметров = Новый Структура("ВидНазначения, ЗакрыватьПриВыборе, МножественныйВыбор", 
		ПредопределенноеЗначение("Перечисление.ВидыНазначений.Обследование"), Ложь, Истина);
	ОткрытьФормуМодально("Документ.Прием.Форма.ФормаПодбора", СтруктураПараметров, Элементы.Назначения);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПроцедур(Команда)
	СтруктураПараметров = Новый Структура("ВидНазначения, ЗакрыватьПриВыборе, МножественныйВыбор", 
		ПредопределенноеЗначение("Перечисление.ВидыНазначений.Процедура"), Ложь, Истина);
	ОткрытьФормуМодально("Документ.Прием.Форма.ФормаПодбора", СтруктураПараметров, Элементы.Назначения);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуПланаЛечения(Команда)
	
	Если Команда.Имя = "ПланЛеченияДобавитьМедикамент" Тогда
		ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты");
	ИначеЕсли Команда.Имя = "ПланЛеченияДобавитьУслугуДиагностики" Тогда
		ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Обследование");
	Иначе
		ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Процедура");
	КонецЕсли;
	
	НовоеНазначение = СписокНазначений.ПолучитьЭлементы().Добавить();
	НовоеНазначение.Количество = 1;
	НовоеНазначение.ИдентификаторНазначения = Новый УникальныйИдентификатор;
	НовоеНазначение.ВидНазначения = ВидНазначения;
	НовоеНазначение.Назначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НовоеНазначение.НоваяСтрока = Истина;
	Элементы.Назначения.ТекущаяСтрока = НовоеНазначение.ПолучитьИдентификатор();
	
	Элементы.Назначения.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоУмолчанию(Команда)
	
	Если Не Элементы.КнопкаВерсияДляПечати.Пометка Тогда
		ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров();
		
		ЗначенияПоУмолчанию = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(ТаблицаПараметров, КешЗависимыхПараметров, Объект);
		РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(ТаблицаПараметров, ЗначенияПоУмолчанию);
			
		ПреобразоватьОсмотрВВерсиюДляРедактирования(, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущимЗначениям(Команда)
	
	Если Не Элементы.КнопкаВерсияДляПечати.Пометка Тогда
		ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров();
		
		Если ЗначениеЗаполнено(Объект.МедицинскаяКарта) Тогда
			
			СтруктураЗначенийПараметров = ПолучитьСтруктуруЗначенийВсехПараметровПредыдущегоПриема(Объект, ТаблицаПараметров, ВерсииШаблонов);
			
			РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(ТаблицаПараметров, СтруктураЗначенийПараметров.ЗначенияПредыдущие);
			РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияДанныхТаблиц(ПараметрыТаблицШаблонов, Объект.ШаблоныПриема, СтруктураЗначенийПараметров.ЗначенияТаблицПредыдущие);
			
			ПреобразоватьОсмотрВВерсиюДляРедактирования(, Истина);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Следует перейти в режим редактирования из режима версии для печати!'"), 30);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗаполнениеКакШаблонЗаполнения(Команда)
	
	ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблонаПриема();
	
	Если ИдентификаторСтрокиШаблона <> Неопределено Тогда
		
		СтрокаШаблона = Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
		Шаблон = СтрокаШаблона.ШаблонПриема;
		
		Если Шаблон = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияПараметровШаблона = Новый Соответствие;
	Для Каждого Элемент Из ТаблицаПараметров Цикл
		Если ИдентификаторСтрокиШаблона = Элемент.ИдентификаторСтрокиШаблона Тогда
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				ЗначенияПараметровШаблона.Вставить(Элемент.Параметр, Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УдалитьНеРедактируемыеПараметры(ЗначенияПараметровШаблона);
	
	ПараметрыФормы.Вставить("ЗначенияПараметровШаблона", ЗначенияПараметровШаблона);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Владелец", Шаблон));
	
	ОткрытьФорму("Справочник.ШаблоныЗаполненияОсмотра.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьНеРедактируемыеПараметры(ЗначенияПараметровШаблона)
	
	Для Каждого Элемент Из ЗначенияПараметровШаблона Цикл
		Если Элемент.Ключ.НеРедактируетсяПользователем Тогда
			ЗначенияПараметровШаблона.Удалить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВерсияДляПечати(Команда)
	
	ВерсияДляПечати = Не Элементы.КнопкаВерсияДляПечати.Пометка;
	Элементы.КнопкаВерсияДляПечати.Пометка = ВерсияДляПечати;
	
	Если ВерсияДляПечати Тогда
		ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров();
		ПреобразоватьОсмотрВВерсиюДляПечати();
		УстановитьОтборГотовыхФраз(Ложь);
	Иначе
		ПреобразоватьОсмотрВВерсиюДляРедактирования();
	КонецЕсли;
	
	Элементы.ГруппаПечатьВсегоОсмотра.Видимость = Не РежимОдногоШаблонаОсмотра
												И ВерсияДляПечати
												И КоличествоЗаполненныхШаблоновПриема(Объект.ШаблоныПриема) > 1;
												
	Элементы.ПодменюЗаполнитьОсмотр.Доступность = Не ВерсияДляПечати;
	Элементы.ШаблоныПриема.Доступность = Не ВерсияДляПечати;
	Элементы.ОткрытьОбработку.Доступность = Не ВерсияДляПечати;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПечатиПриНажатии(Команда)
	
	Если Команда = Команды.РежимПечатиДляКлиента Тогда
		РежимПолучателяПечатнойВерсииОсмотра = Истина;
	ИначеЕсли Команда = Команды.РежимПечатиДляМедкарты Тогда
		РежимПолучателяПечатнойВерсииОсмотра = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Элементы.РежимПечатиДляКлиента.Пометка	 = РежимПолучателяПечатнойВерсииОсмотра;
	Элементы.РежимПечатиДляМедкарты.Пометка	 = Не РежимПолучателяПечатнойВерсииОсмотра;
	
	ВерсияДляПечати = Элементы.КнопкаВерсияДляПечати.Пометка;
	Если ВерсияДляПечати Тогда
		ПреобразоватьОсмотрВВерсиюДляПечати();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПоРежимуПечати(Команда)
	
	РежимПечатиИзменился = Ложь;
	Если Команда = Команды.ПечатьРежимПечатиДляКлиента Тогда
		НовыйРежимПечати = Истина;
	Иначе
		НовыйРежимПечати = Ложь;
	КонецЕсли;
	
	Если НовыйРежимПечати <> РежимПолучателяПечатнойВерсииОсмотра Тогда
		
		РежимПолучателяПечатнойВерсииОсмотра = НовыйРежимПечати;
		
		Элементы.РежимПечатиДляКлиента.Пометка	 = РежимПолучателяПечатнойВерсииОсмотра;
		Элементы.РежимПечатиДляМедкарты.Пометка	 = Не РежимПолучателяПечатнойВерсииОсмотра;
		
		ВерсияДляПечати = Элементы.КнопкаВерсияДляПечати.Пометка;
		Если ВерсияДляПечати Тогда
			ПреобразоватьОсмотрВВерсиюДляПечати();
		КонецЕсли;
	КонецЕсли;
	
	ПечатьБезПросмотра(Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьHTMLТекстПечатиОсмотраПолный(Знач Объект, Знач ТаблицаПараметров, Знач ПараметрыТаблицШаблонов, Знач ПланЛеченияРеквизит, Знач ВерсииШаблонов, ИгнорироватьТекстПечатиИзТЧ = Истина,
	Колонтитулы = Неопределено, ТекущийОбъектШаблоны = Неопределено, РежимДляКлиента = Неопределено, ДобавлятьШапкуШаблона = Ложь, Знач ДанныеРедактируемыхЭлементов = Неопределено, ПараметрыКонвертацииВPDF = Неопределено)
	
	ТекстПечатиПриема = "";
	ТекстРазрывСтраницы = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстHTMLРазрывСтраницы(Ложь);
	
	Если Колонтитулы = Неопределено Тогда
		Колонтитулы = Новый Соответствие;
	КонецЕсли;
	
	ДобавлятьШапкуШаблонаПриема = ПараметрыКонвертацииВPDF = Неопределено;
	
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		
		ИндексШаблона = Объект.ШаблоныПриема.Индекс(СтрокаШаблона);
		
		БезРазрыва = СтрокаШаблона.ШаблонПриема.ПечатаетсяБезПереходаНаНовуюСтраницу;
		
		// Формирование печатного варианта для каждого отдельного шаблона
		Если СтрокаШаблона.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон")
			И (ИгнорироватьТекстПечатиИзТЧ Или ПустаяСтрока(СтрокаШаблона.ТекстДляПечати))
		Тогда
			Попытка
				ДанныеШаблона = Новый Структура("Шаблон, ИдентификаторСтрокиШаблона, ТекстШаблона",
					СтрокаШаблона.ШаблонПриема, СтрокаШаблона.ПолучитьИдентификатор(), СтрокаШаблона.ТекстШаблона);
				
				ДанныеТаблицШаблонов = Новый Структура("ПараметрыТаблицШаблонов, ЭталонныеСтрокиТаблиц", ПараметрыТаблицШаблонов, СтрокаШаблона.ЭталонныеСтрокиТаблиц);
				
				ДанныеСформированногоШаблона = РаботаСШаблонамиHTMLКлиентСервер.СформироватьВерсиюДляПечатиШаблонаОсмотра(Объект, ДанныеШаблона, ТаблицаПараметров,, ПланЛеченияРеквизит,,,ДанныеТаблицШаблонов);
				
				ТекстШаблонаОсмотра = ДанныеСформированногоШаблона.ТекстШаблонаТело;
				Если ТекущийОбъектШаблоны <> Неопределено Тогда
					СтрокаОбъекта = ТекущийОбъектШаблоны[Объект.ШаблоныПриема.Индекс(СтрокаШаблона)];
					Если СтрокаОбъекта.ТекстДляПечати <> ТекстШаблонаОсмотра Тогда
						СтрокаОбъекта.ТекстДляПечати = ТекстШаблонаОсмотра;
					КонецЕсли;
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			ТекстШаблонаОсмотра = РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзКодаДокумента(СтрокаШаблона.ТекстДляПечати);
			Если ДанныеРедактируемыхЭлементов <> Неопределено Тогда
				ТекстШаблонаОсмотра = РаботаСШаблонамиHTMLКлиентСервер.ВставитьДобавленныеИзображенияВТекстHTML(ТекстШаблонаОсмотра, ИндексШаблона, ДанныеРедактируемыхЭлементов.ДобавленныеИзображения, Ложь);
				ТекстШаблонаОсмотра = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьРисункиКартинокВТекстHTML(ТекстШаблонаОсмотра, ИндексШаблона, ДанныеРедактируемыхЭлементов.Рисунки, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		КолонтитулыШаблона = Колонтитулы.Получить(СтрокаШаблона.ШаблонПриема);
		Если КолонтитулыШаблона <> Неопределено Тогда
			ТекстШаблонаОсмотра = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьКолонтитулЭЦПВТекстТела(ТекстШаблонаОсмотра, КолонтитулыШаблона, Истина);
		КонецЕсли;
		
		ШапкаШаблонаУстановлена = Ложь;
		Если ДобавлятьШапкуШаблона И Не СтрокаШаблона.ШаблонПриема.НеИспользоватьШапкуШаблона Тогда
			ТекстШаблонаОсмотра = РаботаСШаблонамиHTMLКлиентСервер.УстановитьШапкуШаблона(ТекстШаблонаОсмотра, РежимДляКлиента, Объект);
			ШапкаШаблонаУстановлена = Истина;
		КонецЕсли;
		
		Если ДанныеРедактируемыхЭлементов <> Неопределено Тогда
			ОбработатьИзображенияШаблона(ТекстШаблонаОсмотра, Объект, СтрокаШаблона, ВерсииШаблонов, РежимДляКлиента, ДанныеРедактируемыхЭлементов.Рисунки, ШапкаШаблонаУстановлена, ДанныеРедактируемыхЭлементов.ДобавленныеИзображения, ИндексШаблона, ПараметрыКонвертацииВPDF);
		КонецЕсли;
		
		// Формирование полного печатного варианта
		ТекстПечатиПриема = ТекстПечатиПриема
				+ ?(ПустаяСтрока(ТекстПечатиПриема), "", ?(БезРазрыва, "<BR/>", ТекстРазрывСтраницы))
				+ ?(ДобавлятьШапкуШаблонаПриема, РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстHTMLШапкаШаблонаПриема(Объект.Дата, Объект.Врач, СтрокаШаблона.ШаблонПриема), "")
				+ ТекстШаблонаОсмотра;
		
	КонецЦикла;
	
	// Исключение из печатной версии участков не_для_клиента или не_для_медкарты, если используется разделение версий.
	Если РежимДляКлиента <> Неопределено Тогда
		ТекстПечатиПриема = РаботаСШаблонамиHTMLКлиентСервер.ТекстШаблонаОсмотраПоРежиму(ТекстПечатиПриема, РежимДляКлиента);
	КонецЕсли;
	
	// Перенос стилей
	ТекстПечатиПриема = РаботаСHTMLКлиентСервер.ПеренестиСтилиИзHeadВТелоДокумента(ТекстПечатиПриема);
	
	Возврат РаботаСDOMКлиентСервер.СформироватьПолныйТекстДокументаHTML(ТекстПечатиПриема);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьИзображенияШаблона(ТекстШаблонаОсмотра, Объект, СтрокаШаблона, ВерсииШаблонов, РежимДляКлиента, РисункиКартинок, ШапкаШаблонаУстановлена, ДобавленныеИзображения, ИндексШаблона, ПараметрыКонвертацииВPDF)
	
	Если ПараметрыКонвертацииВPDF <> Неопределено Тогда
		ИзображенияВДвоичныхДанных = ПараметрыКонвертацииВPDF.МожноФормироватьPDFНаКлиенте;
	Иначе
		ИзображенияВДвоичныхДанных = Ложь;
	КонецЕсли;
	
	ДанныеРисунков = Новый Соответствие;
	Для Каждого РисунокКартинки Из РисункиКартинок Цикл
		Попытка
			ДанныеРисунков.Вставить(РисунокКартинки.АдресРисунка, Base64Строка(ПолучитьИзВременногоХранилища(РисунокКартинки.АдресРисунка)));
		Исключение КонецПопытки;
	КонецЦикла;
	
	тзИзображенияШаблона = СтрокаШаблона.ШаблонПриема.СписокИзображений;
	СтрокиВерсии = ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", СтрокаШаблона.ШаблонПриема));
	Если СтрокиВерсии.Количество() > 0 Тогда
		тзИзображенияШаблона = Новый ТаблицаЗначений;
		тзИзображенияШаблона.Колонки.Добавить("Идентификатор");
		тзИзображенияШаблона.Колонки.Добавить("ИзображениеBase64");
		тзИзображенияШаблона.Колонки.Добавить("Расширение");
		ДополнитьТаблицуИзображенийШаблона(тзИзображенияШаблона, СтрокиВерсии[0].ВерсияШаблона, ИзображенияВДвоичныхДанных);
	Иначе
		тзИзображенияШаблона = СтрокаШаблона.ШаблонПриема.СписокИзображений.Выгрузить();
	КонецЕсли;
	
	Если ШапкаШаблонаУстановлена Тогда
		НастройкиШаблонов = РаботаСШаблонамиHTMLПовтИсп.ПолучитьНастройкиШаблоновHTML(Объект.Дата, Объект.Филиал);
		Если РежимДляКлиента = Истина Тогда
			Если ЗначениеЗаполнено(НастройкиШаблонов.ШаблонКлиентскогоЗаголовка) Тогда
				ДополнитьТаблицуИзображенийШаблона(тзИзображенияШаблона, НастройкиШаблонов.ШаблонКлиентскогоЗаголовка, ИзображенияВДвоичныхДанных);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НастройкиШаблонов.ШаблонМедицинскогоЗаголовка) Тогда
				ДополнитьТаблицуИзображенийШаблона(тзИзображенияШаблона, НастройкиШаблонов.ШаблонМедицинскогоЗаголовка, ИзображенияВДвоичныхДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавленныеИзображения <> Неопределено Тогда
		Для Каждого ДобавленноеИзображение Из ДобавленныеИзображения.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", ИндексШаблона)) Цикл
			СтрокаИзображения = тзИзображенияШаблона.Добавить();
			СтрокаИзображения.Идентификатор = Строка(ДобавленноеИзображение.ИдентификаторИзображения);
			СтрокаИзображения.Расширение = ДобавленноеИзображение.Расширение;
			СтрокаИзображения.ИзображениеBase64 = Base64Строка(ПолучитьИзВременногоХранилища(ДобавленноеИзображение.АдресИзображения));
		КонецЦикла;
	КонецЕсли;
	
	Если ИзображенияВДвоичныхДанных Тогда
		ТекстШаблонаОсмотра = РаботаСШаблонамиHTMLКлиентСервер.КодироватьВДвоичныйКодИзображенияHTMLТекста(ТекстШаблонаОсмотра, тзИзображенияШаблона, ДанныеРисунков);
	Иначе
		ТекстШаблонаОсмотра = РаботаСШаблонамиHTML.ДекодироватьИзображенияHTMLТекста(ТекстШаблонаОсмотра, тзИзображенияШаблона, ДанныеРисунков);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьТаблицуИзображенийШаблона(тзИзображенияШаблона, Шаблон, ИзображенияВДвоичныхДанных)
	
	ВерсииШаблонаДляКеша = Новый Массив;
	ВерсииШаблонаДляКеша.Добавить(Шаблон);
	соотИзображенияВерсии = РаботаСШаблонамиHTML.ПолучитьКешИзображенийПриема(ВерсииШаблонаДляКеша, Новый УникальныйИдентификатор, РаботаСШаблонамиHTMLКлиентСервер.ЭтоWindowsXP() Или ИзображенияВДвоичныхДанных);
	Для Каждого ДанныеИзображения Из соотИзображенияВерсии Цикл
		СтрокаИзображения = тзИзображенияШаблона.Добавить();
		СтрокаИзображения.Идентификатор = ДанныеИзображения.Значение.Идентификатор;
		СтрокаИзображения.Расширение = ДанныеИзображения.Значение.Расширение;
		
		Если СтрНачинаетсяС(НРег(СокрЛП(ДанныеИзображения.Значение.АдресВХранилище)), "data:image/") Тогда
			ИзображениеBase64 = РаботаСШаблонамиHTML.ДанныеИзображенияИзИсточника(ДанныеИзображения.Значение.АдресВХранилище).ИзображениеBase64;
		Иначе
			ИзображениеBase64 = Base64Строка(ПолучитьИзВременногоХранилища(ДанныеИзображения.Значение.АдресВХранилище));
		КонецЕсли;
		
		СтрокаИзображения.ИзображениеBase64 = ИзображениеBase64;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьОсмотрВВерсиюДляПечати(ПреобразуемаяСтрокаШаблона = Неопределено)
	
	ВерсияДляПечати = Истина;
	Если ПреобразуемаяСтрокаШаблона <> Неопределено Тогда
		ДанныеДляОбратнойОперации = Новый Структура("ИмяПоляДокумента, ТекстРедактирования");
	КонецЕсли;
	
	Если ИспользуютсяЭП И Объект.ПодписанЭП Тогда
		Колонтитулы = РаботаСШаблонамиHTML.СформироватьКолонтитулыЭЦПШаблонов(Объект.Ссылка, ЭлектронныеПодписи, Объект.ШаблоныПриема, Объект.ЭМД, Объект.РолиИПодписиЭМД);
	Иначе
		Колонтитулы = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		
		Если ПреобразуемаяСтрокаШаблона = Неопределено
			Или СтрокаШаблона.ПолучитьИдентификатор() = ПреобразуемаяСтрокаШаблона
		Тогда
			СтрокаСтраницыШаблона = ПолучитьСтрокуСтраницШаблонаПриемаКлиент(СтрокаШаблона);
			Если СтрокаСтраницыШаблона = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КолонтитулыШаблона = Колонтитулы.Получить(СтрокаШаблона.ШаблонПриема);
			
			Если СтрокаШаблона.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон") Тогда
				
				// Получение имени HTML-документа.
				ПолеДокумента = Элементы.Найти(СтрокаСтраницыШаблона.ИмяПоляДокумента);
				
				Если ПреобразуемаяСтрокаШаблона <> Неопределено Тогда
					ДанныеДляОбратнойОперации.ИмяПоляДокумента = СтрокаСтраницыШаблона.ИмяПоляДокумента;
					ДанныеДляОбратнойОперации.ТекстРедактирования = ПолеДокумента.Документ.body.innerHTML;
				КонецЕсли;
				
				МодульРаботыСШаблонами = РаботаСШаблонамиHTMLКлиентСервер;
				#Если ВебКлиент Или МобильныйКлиент Тогда
					МодульРаботыСШаблонами = РаботаСШаблонамиHTML;
				#КонецЕсли
				
				ДанныеШаблона = Новый Структура("Шаблон, ИдентификаторСтрокиШаблона, ТекстШаблона", 
					СтрокаШаблона.ШаблонПриема, СтрокаСтраницыШаблона.ИдентификаторСтрокиШаблона, СтрокаШаблона.ТекстШаблона);
				
				ДанныеТаблицШаблонов = Новый Структура("ПараметрыТаблицШаблонов, ЭталонныеСтрокиТаблиц", ПараметрыТаблицШаблонов, СтрокаШаблона.ЭталонныеСтрокиТаблиц);
				
				ДанныеСформированногоШаблона = МодульРаботыСШаблонами.СформироватьВерсиюДляПечатиШаблонаОсмотра(Объект, ДанныеШаблона, 
					ТаблицаПараметров, КешЗначенийВыбора, СписокНазначений, соотвКешИзображенийШаблонов, УникальныйИдентификатор, ДанныеТаблицШаблонов, , РисункиКартинок, ДобавленныеИзображения);
				
				СтрокаСтраницыШаблона.ТекстДляПечати = ДанныеСформированногоШаблона.ТекстШаблонаТело;
				
				Если Не ИзмененияЗапрещены Тогда
					СтрокаШаблона.ТекстДляПечати = ДанныеСформированногоШаблона.ТекстШаблонаТелоБезРисунков;
				КонецЕсли;
				
				ТекстШаблонаПолный = ДанныеСформированногоШаблона.ТекстШаблонаПолный;
				
				// При необходимости, преобразование в версию для клиента или для медкарты.
				Если РежимПолучателяПечатнойВерсииОсмотра <> Неопределено Тогда
					ТекстШаблонаПолный = МодульРаботыСШаблонами.ТекстШаблонаОсмотраПоРежиму(ТекстШаблонаПолный, РежимПолучателяПечатнойВерсииОсмотра);
				КонецЕсли;
				
				Если КолонтитулыШаблона <> Неопределено Тогда
					ТекстШаблонаПолный = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьКолонтитулЭЦПВТекстТела(ТекстШаблонаПолный, КолонтитулыШаблона);
				КонецЕсли;
				
				Если Не СтрокаШаблона.НеИспользоватьШапкуШаблона Тогда
					ТекстШаблонаПолный = МодульРаботыСШаблонами.УстановитьШапкуШаблона(ТекстШаблонаПолный, РежимПолучателяПечатнойВерсииОсмотра, Объект);
				КонецЕсли;
				
				ЭтаФорма[СтрокаСтраницыШаблона.ИмяРеквизита] = ТекстШаблонаПолный;
			Иначе
				Если ПустаяСтрока(СтрокаШаблона.ТекстДляПечати) Тогда
					СтрокаШаблона.ТекстДляПечати = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию();
				КонецЕсли;
				
				ТекстШаблонаПолный = СтрокаШаблона.ТекстДляПечати;
				Если КолонтитулыШаблона <> Неопределено Тогда
					ТекстШаблонаПолный = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьКолонтитулЭЦПВТекстТела(ТекстШаблонаПолный, КолонтитулыШаблона);
				КонецЕсли;
				
				ЭтаФорма[СтрокаСтраницыШаблона.ИмяРеквизита] = РаботаСDOMКлиентСервер.СформироватьПолныйТекстДокументаHTML(ТекстШаблонаПолный);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// В случае перехода к версии для печати всего приема сохраняется текст печати всего документа.
	Если ПреобразуемаяСтрокаШаблона = Неопределено Тогда
		ДанныеРедактируемыхЭлементов = Новый Структура("Рисунки, ДобавленныеИзображения", РисункиКартинок, ДобавленныеИзображения);
		ТекстПечатиПриема = СформироватьHTMLТекстПечатиОсмотраПолный(Объект, ТаблицаПараметров, ПараметрыТаблицШаблонов, СписокНазначений,
			ВерсииШаблонов, Ложь, Колонтитулы, , РежимПолучателяПечатнойВерсииОсмотра, Истина, ДанныеРедактируемыхЭлементов);
		ПолеHTMLПечати = ТекстПечатиПриема;
	КонецЕсли;
	
	Возврат ДанныеДляОбратнойОперации;
	
КонецФункции

&НаКлиенте
Процедура ПреобразоватьОсмотрВВерсиюДляРедактирования(ПреобразуемаяСтрокаШаблона = Неопределено, ВызыватьПереобновлениеПолейШаблоновОсмотра = Ложь)
	
	ВерсияДляПечати = Ложь;
	ТекущийЭлементПараметраШаблона = Неопределено;
	
	мОбновленныеСтрокиШаблонов = Новый Массив;
	Если ВызыватьПереобновлениеПолейШаблоновОсмотра Тогда 
		ПодключитьОбработчикОжидания("ОтложенноеОбновлениеТекстаШаблоновОсмотра", 0.1, Истина);
	КонецЕсли;
	
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		
		Если ПреобразуемаяСтрокаШаблона = Неопределено
			Или СтрокаШаблона.ПолучитьИдентификатор() = ПреобразуемаяСтрокаШаблона
		Тогда
			// Получение имени HTML-документа
			СтрокаСтраницыШаблона = ПолучитьСтрокуСтраницШаблонаПриемаКлиент(СтрокаШаблона);
			Если СтрокаСтраницыШаблона <> Неопределено Тогда
				
				Если СтрокаШаблона.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон") Тогда
					
					ВерсияШаблона = ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема);
					
					ДанныеШаблона = Новый Структура("Шаблон, ИдентификаторСтрокиШаблона, ТекстШаблона", 
						ВерсияШаблона, СтрокаСтраницыШаблона.ИдентификаторСтрокиШаблона, ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема), "ТекстHTML"));
					//ДанныеШаблона = Новый Структура("Шаблон, ИдентификаторСтрокиШаблона, ТекстШаблона", 
					//	СтрокаШаблона.ШаблонПриема, СтрокаСтраницыШаблона.ИдентификаторСтрокиШаблона, СтрокаШаблона.ТекстШаблона);
						
					МодульРаботыСШаблонами = РаботаСШаблонамиHTMLКлиентСервер;
					#Если ВебКлиент Или МобильныйКлиент Тогда
						МодульРаботыСШаблонами = РаботаСШаблонамиHTML;
					#КонецЕсли
					
					ДанныеТаблицШаблонов = Новый Структура("ПараметрыТаблицШаблонов, ЭталонныеСтрокиТаблиц", ПараметрыТаблицШаблонов, СтрокаШаблона.ЭталонныеСтрокиТаблиц);
					
					ДанныеСформированногоШаблона = МодульРаботыСШаблонами.СформироватьВерсиюДляРедактированияШаблонаОсмотра(УникальныйИдентификатор, ДанныеШаблона,
						ТаблицаПараметров, КешЗначенийВыбора, соотвКешИзображенийШаблонов, ДанныеТаблицШаблонов, РисункиКартинок, ДобавленныеИзображения);
					
					ТекстШаблона = ДанныеСформированногоШаблона.ТекстШаблонаПолный;
					
					Если ДанныеСформированногоШаблона.ОбновленныеЗначенияПараметров.Количество() > 0 Тогда
						РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(
							ТаблицаПараметров, ДанныеСформированногоШаблона.ОбновленныеЗначенияПараметров, СтрокаСтраницыШаблона.ИдентификаторСтрокиШаблона);
					КонецЕсли;
					
					Если ВызыватьПереобновлениеПолейШаблоновОсмотра Тогда 
						ЭтаФорма[СтрокаСтраницыШаблона.ИмяРеквизита] = ТекстШаблона + "<BR>";
						мОбновленныеСтрокиШаблонов.Добавить(Новый Структура("СтрокаСтраницыШаблона, ТекстШаблона", СтрокаСтраницыШаблона, ТекстШаблона));
					Иначе
						ЭтаФорма[СтрокаСтраницыШаблона.ИмяРеквизита] = ТекстШаблона;
					КонецЕсли;
					
				Иначе
					Если ПустаяСтрока(СтрокаШаблона.ТекстДляПечати) Тогда
						СтрокаШаблона.ТекстДляПечати = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию();
					КонецЕсли;
					ЭтаФорма[СтрокаСтраницыШаблона.ИмяРеквизита] = РаботаСDOMКлиентСервер.СформироватьПолныйТекстДокументаHTML(СтрокаШаблона.ТекстДляПечати);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенноеОбновлениеТекстаШаблоновОсмотра()
	
	Если мОбновленныеСтрокиШаблонов = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбновленнаяСтрока Из мОбновленныеСтрокиШаблонов Цикл
		ЭтаФорма[ОбновленнаяСтрока.СтрокаСтраницыШаблона.ИмяРеквизита] = ОбновленнаяСтрока.ТекстШаблона;	
	КонецЦикла;
	
	мОбновленныеСтрокиШаблонов = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуСтраницШаблонаПриемаКлиент(СтрокаШаблона)
	
	Если ТипЗнч(СтрокаШаблона) = Тип("Число") Тогда
		ИдентификаторСтроки = СтрокаШаблона;
	Иначе
		ИдентификаторСтроки = СтрокаШаблона.ПолучитьИдентификатор();
	КонецЕсли;
	
	мсСтр = СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", ИдентификаторСтроки));
	Если мсСтр.Количество() <> 0 Тогда
		Возврат мсСтр[0];
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КомандаПросмотрЭМК(Команда)
	
	Если Объект.Клиент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Клиент, Медицинскаякарта", Объект.Клиент, Объект.МедицинскаяКарта);
	ОткрытьФорму("Обработка.ПросмотрМедКарт.Форма.ФормаАмбулаторнаяМК", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриёмПоЭлектроннойПочте(Команда)
	
	УправлениеЭлектроннойПочтойКлиент.ОтправитьДокументПоЭлектроннойПочте(ЭтотОбъект);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДокументыПриемаКлиентСервер.ЗаполнитьТаблицуВерсийШаблонов(ВерсииШаблонов, Объект);
	ЗаполнитьДополнительныеРеквизитыТабЧастиШаблоны(Истина);
	СтраницыШаблоновПриема.Очистить();
	ПерезаполнитьТаблицуСтраницШаблоновПриема();
	
	ВерсииШаблоновДокумента = Новый Массив;
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		ВерсииШаблоновДокумента.Добавить(ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема));
	КонецЦикла;
	РаботаСШаблонамиHTMLКлиентСервер.ИнициализироватьНастройкиИзображенийПриема(соотвКешИзображенийШаблонов, ВерсииШаблоновДокумента, ЭтаФорма.УникальныйИдентификатор);
	
	РаботаСШаблонамиHTMLКлиент.ПересчетПараметровОтЗависимыхРеквизитов("Дата", ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	Объект.ПервичныйПрием = ПредопределенноеЗначение("Документ.Прием.ПустаяСсылка");
	ОбновитьПривязывающиеРеквизитыПланаЛечения();
	
	Если ЗначениеЗаполнено(Объект.Клиент) 
		И Не ЗначениеЗаполнено(Объект.МедицинскаяКарта)
	Тогда
		Объект.МедицинскаяКарта = КлиентПриИзмененииСервер(Объект.Клиент);
		МедицинскаяКартаПриИзменении(Элементы.МедицинскаяКарта);
	КонецЕсли;
	
	НастроитьДоступностьЭлементов();
	
	Если ЭтоМедосмотр Тогда
		ВредностиДиагноза = ПолучитьВредностиКлиента(Объект.ПервичныйПрием, Объект.ВредныеФакторыПротивопоказаний);
	КонецЕсли;
	
	РаботаСШаблонамиHTMLКлиент.ПересчетПараметровОтЗависимыхРеквизитов("Клиент", ЭтаФорма, Объект);
	
	ЛН_ОбновитьГруппуКоманд(Объект.Клиент, Больничные, Элементы.ГруппаЛистыНеструдоспособности, Элементы.ЛН_Открыть, Элементы.ЛН_ОткрытьСписокЛНПациента);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "Тестовый") = Истина Тогда
		Объект.Тестовый = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция КлиентПриИзмененииСервер(Клиент)
	
	Если ЗначениеЗаполнено(Клиент.ОсновнаяМедицинскаяКарта) Тогда
		Возврат Клиент.ОсновнаяМедицинскаяКарта;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	МедицинскиеКарты.Ссылка
		|ИЗ
		|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
		|ГДЕ
		|	МедицинскиеКарты.Клиент = &Клиент"
		;
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Количество() = 1 Тогда
			Выб.Следующий();
			Возврат Выб.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.МедицинскиеКарты.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура КлиентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ВерсияДляПечати Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеСобытия.Element.hasAttribute("bit-contextmenu-selectElement") Тогда
		ОбновитьЗначениеЭлементаHTMLДляКонтекстногоМеню(ДанныеСобытия.Element, Элемент.Имя);
		ДанныеСобытия.Element.removeAttribute("bit-contextmenu-selectElement");
		Элементы.ПолеHTMLДокументаКонтекстноеМенюПолеHTMLДокументаОчистить.Доступность = ДанныеЭлементаHTMLДляКонтекстногоМеню <> Неопределено;
		Элементы.ПолеHTMLДокументаКонтекстноеМенюПолеHTMLДокументаЗаполнитьПоУмолчанию.Доступность = ДанныеЭлементаHTMLДляКонтекстногоМеню <> Неопределено;
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено;
		Элементы.ПолеHTMLДокументаКонтекстноеМенюПолеHTMLДокументаОчистить.Доступность = Ложь;
		Элементы.ПолеHTMLДокументаКонтекстноеМенюПолеHTMLДокументаЗаполнитьПоУмолчанию.Доступность = Ложь;
	КонецЕсли;
	
	ПредЭлементПараметраШаблон = ТекущийЭлементПараметраШаблона;
	ТекущийЭлементПараметраШаблона = Неопределено;
	
	ЭлементHTMLНижний = ДанныеСобытия.Element;
	ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ЭлементHTMLНижний);
	Попытка
		// Необходимо, чтобы webkit понял, какой элемент сейчас текущий и платформа корректно отработала положение для ПоказатьВыборИзСписка().
		ЭлементHTML.focus();
	Исключение КонецПопытки;
	
	// Если прошлый элемент - textarea с флагом изменения, значит, не сработал обработчик, обновляем значение вручную
	Если ПредЭлементПараметраШаблон <> Неопределено Тогда
		ЭлементHTMLПредЭлемента = ПолучитьТекущийЭлементШаблонаHTML(ПредЭлементПараметраШаблон.ЭлементHTML, ПредЭлементПараметраШаблон.ИмяПоляШаблона);
		Если ЭлементHTMLПредЭлемента <> Неопределено
			И (ЭлементHTML = Неопределено
				Или ЭлементHTMLПредЭлемента.id <> ЭлементHTML.id)
			И (ПредЭлементПараметраШаблон.ТегЭлемента = "TEXTAREA"
				Или ПредЭлементПараметраШаблон.ТегЭлемента = "INPUT")
		Тогда
			Если РаботаСШаблонамиHTMLКлиент.ПолеВводаИзменено(ЭлементHTMLПредЭлемента) Тогда
				мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра, ИдентификаторСтрокиШаблона",
					ПредЭлементПараметраШаблон.СтрокаУидПараметра, ПредЭлементПараметраШаблон.ИдентификаторСтрокиШаблона));
				Если мсСтрокаПараметра.Количество() > 0 Тогда
					СтрокаПараметра = мсСтрокаПараметра[0];
					РаботаСШаблонамиHTMLКлиент.ВыбратьЗначениеПараметраHTMLИнтерактивно(
						ЭтаФорма, ПредЭлементПараметраШаблон.ИмяПоляШаблона, ЭлементHTMLПредЭлемента, СтрокаПараметра, КешЗначенийВыбора, Объект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблонаПриема();
	Если ИдентификаторСтрокиШаблона = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ЭлементHTMLНижний.TagName) = "BUTTON" Тогда
		РаботаСШаблонамиHTMLКлиент.КнопкаШаблонаНажатие(ЭтотОбъект, ЭлементHTMLНижний, ИдентификаторСтрокиШаблона, соотвКешИзображенийШаблонов);
	КонецЕсли;
	
	Если ЭлементHTML = Неопределено Тогда
		УстановитьОтборГотовыхФраз(Ложь);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	// Чтобы не срабатывал переход по ссылке
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	Если ВРег(ЭлементHTMLНижний.TagName) = "A" Или ТегЭлемента = "A" Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ТегЭлемента <> "TEXTAREA" И ТегЭлемента <> "INPUT" Тогда
		УстановитьОтборГотовыхФраз(Ложь);
	КонецЕсли;
	
	мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра, ИдентификаторСтрокиШаблона", ЭлементHTML.id, ИдентификаторСтрокиШаблона));
	Если мсСтрокаПараметра.Количество() > 0 Тогда
		
		ТекущийЭлементПараметраШаблона = Новый Структура("СтрокаУидПараметра, ИдентификаторСтрокиШаблона, ИмяПоляШаблона, ЭлементHTML, ТегЭлемента", 
			ЭлементHTML.id, ИдентификаторСтрокиШаблона, Элемент.Имя, СтруктураТекущегоЭлементаШаблонаHTML(ЭлементHTML), ТегЭлемента);
		
		СтрокаПараметра = мсСтрокаПараметра[0];
		РаботаСШаблонамиHTMLКлиент.ВыбратьЗначениеПараметраHTMLИнтерактивно(ЭтаФорма, Элемент.Имя, ЭлементHTML, СтрокаПараметра, КешЗначенийВыбора, Объект);
		
		Если ТегЭлемента = "TEXTAREA" Или ТегЭлемента = "INPUT" Тогда
			УстановитьОтборГотовыхФраз(Истина, СтрокаПараметра.Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеЭлементаHTMLДляКонтекстногоМеню(ЭлементHTML, ИмяЭлемента)
	
	ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено;
	
	// Теги элементов, которые могут содержать атрибут 'id', не являющихся параметрами
	ИсключаемыеТеги = Новый Массив;
	ИсключаемыеТеги.Добавить("IMG");
	ИсключаемыеТеги.Добавить("TT");
	
	Попытка
		Если ИсключаемыеТеги.Найти(ВРег(ЭлементHTML.tagName)) = Неопределено И ЗначениеЗаполнено(ЭлементHTML.id) Тогда
			ЭлементыПоУИД = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементHTML.ownerDocument, ЭлементHTML.id);
			Для НомерЭлемента = 0 По ЭлементыПоУИД.length Цикл
				Если ЭлементыПоУИД[НомерЭлемента] = ЭлементHTML Тогда
					ДанныеЭлементаHTMLДляКонтекстногоМеню = Новый Структура("id, НомерЭлемента, ИмяЭлемента", ЭлементHTML.id, НомерЭлемента, ИмяЭлемента);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	Если мПараметрыПечатиСтраницыОсмотра = Неопределено Или 
		Элемент <> мПараметрыПечатиСтраницыОсмотра.ПолеДокумента 
	Тогда
		Возврат;
	КонецЕсли;
	
	мПараметрыПечатиСтраницыОсмотра.ПолеДокумента.Документ.execCommand("Print");
	Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = мПараметрыПечатиСтраницыОсмотра.ТекущаяСтраница;
	мПараметрыПечатиСтраницыОсмотра = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	РаботаСШаблонамиHTMLКлиент.ПересчетПараметровОтЗависимыхРеквизитов("Работы", ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Элемент.ТекущиеДанные.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
		Элемент.ТекущиеДанные.ИД = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСписокРаботДокумента();
	УдалитьМатериалыУдаленныхРабот();
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	ОбновитьСписокРаботДокумента();
	УдалитьМатериалыУдаленныхРабот();
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено И Не Копирование Тогда
		
		Если Элемент.ТекущиеДанные.Количество = 0 Тогда
			Элемент.ТекущиеДанные.Количество = 1;
		КонецЕсли;
		
		Если мСписокРаботДокумента.Количество() = 1 Тогда
			Для Каждого СтрокаРаботы Из Объект.Работы Цикл
				Если СтрокаРаботы.КлючСтроки = мСписокРаботДокумента[0].Значение Тогда
					Элемент.ТекущиеДанные.Работа = СтрокаРаботы.Номенклатура;
					Элемент.ТекущиеДанные.КлючСтроки = СтрокаРаботы.КлючСтроки;
					Элементы.Материалы.ТекущийЭлемент = Элементы.МатериалыНоменклатура;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяКорректировкаМатериаловПриИзменении(Элемент)
	
	НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект, мАвтоматическиЗаполнятьМатериалы);
	
	Если РаботаСФормамиКлиентСервер.ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Тогда // 8.3.23 и выше.
		РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма, Истина); // Обход проблемы 8.3.23+ по сбросу основной команды документа от изменения Материалы.ИзменятьСоставСтрок.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ПозицияВводаСтроки = 0; 
	Иначе
		ПозицияВводаСтроки = СтрокаТабличнойЧасти.НомерСтроки-1; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.УИД_DICOM) Тогда
		СтрокаТабличнойЧасти.УИД_DICOM = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если ДопСерверныеФункции.ПолучитьРеквизит(СтрокаТабличнойЧасти.Номенклатура, "ВидНоменклатуры") = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Набор") Тогда
		
		СоставНабора = ОбщегоНазначенияСервер.ПолучитьСоставНабора(СтрокаТабличнойЧасти.Номенклатура);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Объект.Работы.Удалить(ПозицияВводаСтроки);
		КонецЕсли;
		
		Для Каждого СтрокаСостава Из СоставНабора Цикл
			СтрокаРаботы = Объект.Работы.Вставить(ПозицияВводаСтроки);
			СтрокаРаботы.Номенклатура = СтрокаСостава.Комплектующая;
			СтрокаРаботы.ХарактеристикаНоменклатуры = СтрокаСостава.ХарактеристикаКомплектующей;
			СтрокаРаботы.Количество   = СтрокаСостава.Количество;
			СтрокаРаботы.КлючСтроки   = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
			Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
			РаботыНоменклатураПриИзменении(Неопределено);
			ПозицияВводаСтроки = ПозицияВводаСтроки + 1;
		КонецЦикла;
		
		РаботыПриОкончанииРедактирования(Элементы.Работы,Ложь,Ложь);
		
	ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.Пустая() 
		Или ДопСерверныеФункции.ПолучитьРеквизит(СтрокаТабличнойЧасти.Номенклатура, "ВидНоменклатуры") = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга")
	Тогда
	
		Если СтрокаТабличнойЧасти.Количество = 0 Тогда
			СтрокаТабличнойЧасти.Количество = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьМатериалыУдаленныхРабот();
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	ОбновитьСписокРаботДокумента();
	
	Элементы.РаботыНомерПробы.Видимость = Элементы.РаботыНомерПробы.Видимость Или ВычислитьВидимостьКолонкиНомераПробы(Объект.Работы);

КонецПроцедуры

&НаКлиенте
Процедура НазначенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") 
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0].СтандартЛечения) <> Тип("СправочникСсылка.СтандартыЛечения")
	Тогда 
  		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;	                 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодменюШаблоновЗаполненияОсмотра()
	
	// Удаление лишних команд, кнопок, строк шаблонов заполнения.
	ИдентификаторыСтрокШаблонов = Новый Массив;
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		ИдентификаторыСтрокШаблонов.Добавить(СтрокаШаблона.ПолучитьИдентификатор());
	КонецЦикла;
	СтрокиШаблоновЗаполненияКУдалению = Новый Массив;
	Для Каждого СтрокаШаблонаЗаполнения Из ШаблоныЗаполненияОсмотра Цикл
		Если ИдентификаторыСтрокШаблонов.Найти(СтрокаШаблонаЗаполнения.ИдентификаторСтрокиШаблона) = Неопределено Тогда
			СтрокиШаблоновЗаполненияКУдалению.Добавить(СтрокаШаблонаЗаполнения);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыформыКУдалению = Новый Массив;
	Для Каждого СтрокаШаблонаЗаполнения Из СтрокиШаблоновЗаполненияКУдалению Цикл
		
		Для Каждого КнопкаЗаполнения Из Элементы.ГруппаШаблоныЗаполнения.ПодчиненныеЭлементы Цикл
			Если КнопкаЗаполнения.ИмяКоманды = СтрокаШаблонаЗаполнения.ИмяКоманды Тогда
				ЭлементыформыКУдалению.Добавить(КнопкаЗаполнения);
			КонецЕсли;
		КонецЦикла;
		
		Команды.Удалить(Команды.Найти(СтрокаШаблонаЗаполнения.ИмяКоманды));
		ШаблоныЗаполненияОсмотра.Удалить(СтрокаШаблонаЗаполнения);
	КонецЦикла;
	Для Каждого КнопкаЗаполнения Из ЭлементыформыКУдалению Цикл
		Элементы.Удалить(КнопкаЗаполнения);
	КонецЦикла;
	
	// Добавление новых шаблонов заполнения, соотетсвующих шаблонам приема.
	ШаблоныПриема = Объект.ШаблоныПриема;
	
	ТаблицаШаблоныПриема = ШаблоныПриема.Выгрузить();
	ТаблицаШаблоныПриема.Свернуть("ШаблонПриема");
	МассивШаблоновПриема = ТаблицаШаблоныПриема.ВыгрузитьКолонку("ШаблонПриема");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблоныПриема", МассивШаблоновПриема);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныЗаполненияОсмотра.Ссылка КАК ШаблонЗаполнения,
	|	ШаблоныЗаполненияОсмотра.Представление КАК Представление,
	|	ШаблоныЗаполненияОсмотра.Владелец КАК ШаблонПриема,
	|	ШаблоныЗаполненияОсмотра.Владелец.Представление КАК ШаблонПриемаПредставление
	|ИЗ
	|	Справочник.ШаблоныЗаполненияОсмотра КАК ШаблоныЗаполненияОсмотра
	|ГДЕ
	|	ШаблоныЗаполненияОсмотра.Владелец В(&ШаблоныПриема)
	|	И НЕ ШаблоныЗаполненияОсмотра.ЭтоГруппа
	|	И НЕ ШаблоныЗаполненияОсмотра.ПометкаУдаления"
	;
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Количество() <> 0 Тогда
		
		КолШаблонов = ШаблоныПриема.Количество() 
					- ШаблоныПриема.НайтиСтроки(Новый Структура("ШаблонПриема", Справочники.ШаблоныHTML.ПустаяСсылка())).Количество();
		
		ПовторяющиесяШаблоны = Новый ТаблицаЗначений;
		ПовторяющиесяШаблоны.Колонки.Добавить("ШаблонПриема");
		ПовторяющиесяШаблоны.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
		ПронумерованныеПовторяющиесяШаблоны = Новый Массив;
		
		Для Каждого ШаблонПриема Из МассивШаблоновПриема Цикл
			Если ЗначениеЗаполнено(ШаблонПриема) 
				И ШаблоныПриема.НайтиСтроки(Новый Структура("ШаблонПриема", ШаблонПриема)).Количество() >= 2
				И ПовторяющиесяШаблоны.Найти(ШаблонПриема) = Неопределено
			Тогда
				ПовторяющиесяШаблоны.Добавить().ШаблонПриема = ШаблонПриема;
			КонецЕсли;
		КонецЦикла;
		
		// Очистка шаблонов заполнения для полного перезаполнения в нужном порядке.
		Для Каждого СтрокаШаблонаЗаполнения Из ШаблоныЗаполненияОсмотра Цикл
			Элементы.Удалить(Элементы.Найти(СтрокаШаблонаЗаполнения.ИмяКоманды));
			Команды.Удалить(Команды.Найти(СтрокаШаблонаЗаполнения.ИмяКоманды));
		КонецЦикла;
		ШаблоныЗаполненияОсмотра.Очистить();
		
		// Добавление шаблонов заполнения шаблонов приема - построчно.
		Отбор = Новый Структура("ИдентификаторСтрокиШаблона, ШаблонЗаполнения");
		Для Каждого СтрокаШаблона Из ШаблоныПриема Цикл
			Отбор.ИдентификаторСтрокиШаблона = СтрокаШаблона.ПолучитьИдентификатор();
			Выб.Сбросить();
			Пока Выб.НайтиСледующий(Новый Структура("ШаблонПриема", СтрокаШаблона.ШаблонПриема)) Цикл
				Отбор.ШаблонЗаполнения = Выб.ШаблонЗаполнения;
				Если ШаблоныЗаполненияОсмотра.НайтиСтроки(Отбор).Количество() = 0 Тогда
					СтрокаШаблонаЗаполнения = ШаблоныЗаполненияОсмотра.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаШаблонаЗаполнения, Отбор);
					СтрокаШаблонаЗаполнения.ИмяКоманды = СгенерироватьУникальноеИмя("Команда_");
					
					Если КолШаблонов = 1 Тогда
						ЗаголовокКнопки = Выб.Представление;
					Иначе
						СтрокаПовторяющиесяШаблоны = ПовторяющиесяШаблоны.Найти(СтрокаШаблона.ШаблонПриема);
						Если СтрокаПовторяющиесяШаблоны = Неопределено Тогда
							ИндексПовтора = "";
						Иначе
							Если ПронумерованныеПовторяющиесяШаблоны.Найти(Отбор.ИдентификаторСтрокиШаблона) = Неопределено Тогда
								ПронумерованныеПовторяющиесяШаблоны.Добавить(Отбор.ИдентификаторСтрокиШаблона);
								СтрокаПовторяющиесяШаблоны.Счетчик = СтрокаПовторяющиесяШаблоны.Счетчик + 1;
							КонецЕсли;
							ИндексПовтора = " (" + СтрокаПовторяющиесяШаблоны.Счетчик + ")";
						КонецЕсли;
						ЗаголовокКнопки = Выб.ШаблонПриемаПредставление + ИндексПовтора + " [" + Выб.Представление + "]";
					КонецЕсли;
					СоздатьКнопкуШаблонаЗаполненияОсмотра(СтрокаШаблонаЗаполнения.ИмяКоманды, ЗаголовокКнопки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// Сортировка кнопок заполнения. 
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("НомерСтрокиШаблонаПриема");
	ТаблицаСортировки.Колонки.Добавить("ШаблонЗаполненияПредставление");
	ТаблицаСортировки.Колонки.Добавить("ИмяКоманды");
	
	Для Каждого СтрокаШаблонаЗаполнения Из ШаблоныЗаполненияОсмотра Цикл
		СтрокаСортировки = ТаблицаСортировки.Добавить();
		СтрокаШаблона = ШаблоныПриема.НайтиПоИдентификатору(СтрокаШаблонаЗаполнения.ИдентификаторСтрокиШаблона);
		СтрокаСортировки.НомерСтрокиШаблонаПриема = СтрокаШаблона.НомерСтроки;
		СтрокаСортировки.ШаблонЗаполненияПредставление = Строка(СтрокаШаблонаЗаполнения.ШаблонЗаполнения);
		СтрокаСортировки.ИмяКоманды = СтрокаШаблонаЗаполнения.ИмяКоманды;
	КонецЦикла;
	
	ТаблицаСортировки.Сортировать("НомерСтрокиШаблонаПриема, ШаблонЗаполненияПредставление");
	ГруппаКнопок = Элементы.ГруппаШаблоныЗаполнения;	
	Для Каждого СтрокаСортировки Из ТаблицаСортировки Цикл
		Элементы.Переместить(Элементы.Найти(СтрокаСортировки.ИмяКоманды), ГруппаКнопок);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкуШаблонаЗаполненияОсмотра(ИмяКоманды, Заголовок)
	
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = "КнопкаЗаполненияОсмотраПриНажатии";
	Команда.Заголовок = Заголовок;
	Команда.ИзменяетСохраняемыеДанные = Истина;
	
	КнопкаЗаполнения = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаШаблоныЗаполнения);
	КнопкаЗаполнения.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполненияОсмотраПриНажатии(Команда)
	
	СтрокаШаблонаЗаполнения = ШаблоныЗаполненияОсмотра.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя))[0];

	ЗначенияДляПерезаполнения = ПолучитьЗначенияШаблонаЗаполненияОсмотра(СтрокаШаблонаЗаполнения.ШаблонЗаполнения);
	РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(ТаблицаПараметров, ЗначенияДляПерезаполнения, СтрокаШаблонаЗаполнения.ИдентификаторСтрокиШаблона);
	ПреобразоватьОсмотрВВерсиюДляРедактирования(СтрокаШаблонаЗаполнения.ИдентификаторСтрокиШаблона, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияШаблонаЗаполненияОсмотра(ШаблонЗаполнения)
	
	ТаблицаЗначенийПараметров = Новый ТаблицаЗначений;
	ТаблицаЗначенийПараметров.Колонки.Добавить("Параметр", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыHTML"));
	ТаблицаЗначенийПараметров.Колонки.Добавить("Значение");
	ТаблицаЗначенийПараметров.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ЗначениеЗаполнения Из ШаблонЗаполнения.ЗначенияЗаполнения Цикл
		
		СтрокаПараметра = ТаблицаЗначенийПараметров.Добавить();
		
		СтрокаПараметра.Параметр = ЗначениеЗаполнения.Параметр;
		
		Если ТипЗнч(ЗначениеЗаполнения.Значение) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
			СтрокаПараметра.Значение = ЗначениеЗаполнения.Значение.Значение;
		Иначе
			СтрокаПараметра.Значение = ЗначениеЗаполнения.Значение;
		КонецЕсли;
		СтрокаПараметра.Представление = Формат(СтрокаПараметра.Значение);
		
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначенийПараметров);
	
КонецФункции

&НаКлиенте
Процедура ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров()
	
	Для Каждого СтрокаСтраницыШаблона Из СтраницыШаблоновПриема Цикл
		
		ПолеДокумента = Элементы.Найти(СтрокаСтраницыШаблона.ИмяПоляДокумента);
		Если ПолеДокумента = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		РаботаСШаблонамиHTMLКлиент.ПеренестиЗначениеАктивногоТекстовогоПоляОсмотраВТаблицуПараметров(
			ЭтаФорма, ПолеДокумента, СтрокаСтраницыШаблона.ИдентификаторСтрокиШаблона);
		
	КонецЦикла;
	
КонецПроцедуры

// Для обработчика ПослеЗаписиНаСервере
&НаСервереБезКонтекста
Процедура ДополнитьВыполнениеПланаЛеченияТекущимДокументом(СписокНазначений, ТекущийОбъект)

	НазначенияПланаЛечения = СписокНазначений.ПолучитьЭлементы();
	
	// Добавление выполненных этим документом
	Для Каждого Движение Из ТекущийОбъект.Движения.ВыполнениеПланаЛечения Цикл
		
		Для Каждого Назначение Из НазначенияПланаЛечения Цикл
			Если Назначение.ИдентификаторНазначения = Движение.ИдентификаторЭлемента
				И Назначение.ДокументВыполнения.НайтиПоЗначению(ТекущийОбъект.Ссылка) = Неопределено
			Тогда
				Назначение.ДокументВыполнения.Добавить(ТекущийОбъект.Ссылка);
				Назначение.Факт = Назначение.Факт + Движение.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для обработчика ПослеЗаписиНаСервере
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыполненияПланаЛечения(СписокНазначений)
	
	ИдентификаторыПозицийПланаЛечения = Новый Массив;
	Для Каждого ЭлементПланаЛечения Из СписокНазначений.ПолучитьЭлементы() Цикл
		ИдентификаторыПозицийПланаЛечения.Добавить(Новый УникальныйИдентификатор(ЭлементПланаЛечения.ИдентификаторНазначения));
	КонецЦикла;
	
	Если ИдентификаторыПозицийПланаЛечения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификтаторы", ИдентификаторыПозицийПланаЛечения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента,
	|	СУММА(ВЫБОР
	|			КОГДА ВыполнениеПланаЛечения.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВыполнениеПланаЛечения.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВыполнениеПланаЛечения.Регистратор
	|ИЗ
	|	РегистрСведений.ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
	|ГДЕ
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента В(&Идентификтаторы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента,
	|	ВыполнениеПланаЛечения.Регистратор";
	ТаблицаВыполнения = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("ИдентификаторЭлемента");
	Для Каждого ЭлементПланаЛечения Из СписокНазначений.ПолучитьЭлементы() Цикл
		
		Отбор.ИдентификаторЭлемента = Новый УникальныйИдентификатор(ЭлементПланаЛечения.ИдентификаторНазначения);
		
		КоличествоВыполнено = 0;
		
		СписокРегистраторов = Новый СписокЗначений;
		СтрокиТаблицыВыполнения = ТаблицаВыполнения.НайтиСтроки(Отбор);
		Для Каждого СтрокаВыполнения Из СтрокиТаблицыВыполнения Цикл
			
			СписокРегистраторов.Добавить(СтрокаВыполнения.Регистратор);
			КоличествоВыполнено = КоличествоВыполнено + СтрокаВыполнения.Количество;
			
		КонецЦикла;
		
		ЭлементПланаЛечения.Факт = КоличествоВыполнено;
		ЭлементПланаЛечения.ДокументВыполнения = СписокРегистраторов;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтандартамЛечения(ПоДиагнозам = Неопределено)
	
	Если ПоДиагнозам = Неопределено Тогда
		ПоДиагнозам = НеобходимоОбновитьСтандартыЛечения;
	КонецЕсли;
	
	мсДиагнозы = Новый Массив;
	мсРодителиДиагнозов = Новый Массив;
	Если ПоДиагнозам Тогда
		// Фомируем список диагнозов и их родителей.
		ЗаполнитьМассивыДиагнозовРодителей(Объект.Диагнозы, мсДиагнозы, мсРодителиДиагнозов);
		Элементы.СтандартыЛечения.Отображение = ОтображениеТаблицы.Список;
	Иначе
		Элементы.СтандартыЛечения.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	КонецЕсли;
	
	СтандартыЛечения.Параметры.УстановитьЗначениеПараметра("ОтборПоДиагнозам", ПоДиагнозам);
	СтандартыЛечения.Параметры.УстановитьЗначениеПараметра("Диагнозы", мсДиагнозы);
	СтандартыЛечения.Параметры.УстановитьЗначениеПараметра("РодителиДиагнозов", мсРодителиДиагнозов);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьМассивыДиагнозовРодителей(Знач ТаблицаДиагнозов, мсДиагнозы, мсРодителиДиагнозов)
	
	Для Каждого СтрокаДиагноз Из ТаблицаДиагнозов Цикл
		мсДиагнозы.Добавить(СтрокаДиагноз.Диагноз);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мсРодителиДиагнозов, ОбщегоНазначения.ПолучитьСписокРодителейЭлемента(СтрокаДиагноз.Диагноз));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПервичныйПриемДокумента(ОбъектФормы)
	
	ПервичныйПрием = ОбъектФормы.Ссылка;
	Если Не ОбъектФормы.ЭтоПервичный И ЗначениеЗаполнено(ОбъектФормы.ПервичныйПрием) Тогда
		ПервичныйПрием = ОбъектФормы.ПервичныйПрием;
	КонецЕсли;
	
	Возврат ПервичныйПрием;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИспользуемыеСтандартыЛечения(ИспользуемыеСтандартыЛечения, Знач ПервичныйПрием)
	
	Если ЗначениеЗаполнено(ПервичныйПрием) Тогда
		КопироватьДанныеФормы(ПолучитьИспользуемыеСтандартыЛечения(ИспользуемыеСтандартыЛечения, ПервичныйПрием), ИспользуемыеСтандартыЛечения);
	Иначе
		ИспользуемыеСтандартыЛечения.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИспользуемыеСтандартыЛечения(Знач ИспользуемыеСтандартыЛечения, Знач ПервичныйПрием)
	
	СтандартыЛеченияНЗ = РегистрыСведений.СтандартыЛечения.СоздатьНаборЗаписей();
	СтандартыЛеченияНЗ.Отбор.ПервичныйПрием.Установить(ПервичныйПрием);
	СтандартыЛеченияНЗ.Прочитать();
	
	ИспользуемыеСтандартыЛечения.Загрузить(СтандартыЛеченияНЗ.Выгрузить());
	
	Возврат ИспользуемыеСтандартыЛечения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПланЛеченияИзСтандартаЛечения(Массив)
	
	Для Каждого СтандартЛечения Из Массив Цикл
		
		Если СтандартЛечения.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		// Если это регламентированный стандарт лечения, то не выполняем заполнение.
		Если СтандартЛечения.ВидСтандарта Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыНазначений = СтандартЛечения.Назначения.Выгрузить();
		ВидыНазначений.Свернуть("ВидНазначения");
		
		// Заполняем назначения
		Назначения = СтандартЛечения.Назначения;
		Для Каждого Назначение Из Назначения Цикл
			ЭлементГруппы = СписокНазначений.ПолучитьЭлементы().Добавить();
			ЭлементГруппы.ВидНазначения = Назначение.ВидНазначения;
			ЭлементГруппы.ИдентификаторНазначения = Новый УникальныйИдентификатор;
			ЭлементГруппы.Назначение = Назначение.Назначение;
			ЭлементГруппы.Дата = НачалоДня(Объект.Дата) + (Назначение.СмещениеОтДатыПриема * 86400);
			ЭлементГруппы.ДатаНачалаБезВремени = ЭлементГруппы.Дата;
			ЭлементГруппы.Сотрудник = ?(Назначение.ПодставитьВрачаИзПриема, Объект.Врач, Назначение.Сотрудник);
			ЭлементГруппы.Комментарий = Назначение.Комментарий;
			ЭлементГруппы.Количество = Назначение.Количество;
			
			Если Назначение.ВидНазначения = Перечисления.ВидыНазначений.Медикаменты Тогда
				ЭлементГруппы.ЕдиницаИзмерения = Назначение.ЕдиницаИзмерения;
				ЭлементГруппы.ПриемовВДень = Назначение.ПриемовВДень;
				ЭлементГруппы.Дозировка = Назначение.РазоваяДоза;
				Если Назначение.Количество > 0 Тогда
					ЭлементГруппы.ДатаОкончания = ЭлементГруппы.Дата + (Назначение.Количество-1) * 86400;
				КонецЕсли;
				РассчитатьДозыСтрокиМедикаментов(ЭлементГруппы);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартыЛеченияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИзмененияЗапрещены Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.СтандартыЛечения.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Если Элементы.СтандартыЛечения.ТекущийРодитель = Неопределено Тогда
			Элементы.СтандартыЛечения.ТекущийРодитель = Элементы.СтандартыЛечения.ТекущаяСтрока;
		Иначе
			Элементы.СтандартыЛечения.ТекущийРодитель = Неопределено;
		КонецЕсли;
	Иначе
		// Добавляем стандарт в список используемых планом лечения
		Если ИспользуемыеСтандартыЛечения.НайтиСтроки(Новый Структура("СтандартЛечения", ТекущиеДанные.СтандартЛечения)).Количество() = 0 Тогда
			НоваяСтрока = ИспользуемыеСтандартыЛечения.Добавить();
			НоваяСтрока.СтандартЛечения = ТекущиеДанные.СтандартЛечения;
		КонецЕсли;
			
		// Добавляем услуги, если это внутренний стандарт лечения
		Если Не ТекущиеДанные.ВидСтандарта Тогда
			
			мсСтандартыЛечения = Новый Массив;
			мсСтандартыЛечения.Добавить(ТекущиеДанные.СтандартЛечения);
			ЗаполнитьПланЛеченияИзСтандартаЛечения(мсСтандартыЛечения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартыЛеченияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтандартыЛеченияПросмотрСтандарта.Доступность = ТекДанные.ЕстьДокумент;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартыЛеченияПоДиагнозам(Команда)
	
	Элементы.СтандартыЛеченияПоДиагнозам.Пометка = Не Элементы.СтандартыЛеченияПоДиагнозам.Пометка;
	УстановитьОтборСтандартамЛечения(Элементы.СтандартыЛеченияПоДиагнозам.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрСтандарта(Команда)
	
	ТекДанные = Элементы.СтандартыЛечения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ПолучитьДокументСтандартаЛечения(ТекДанные.СтандартЛечения);
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
	ИмяФайлаДокумента = ПолучитьИмяВременногоФайла(Документ.Расширение);
	Документ.ДанныеДокумента.Записать(ИмяФайлаДокумента);
	ЗапуститьПриложение(ИмяФайлаДокумента);
	#КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументСтандартаЛечения(СтандартЛечения)
	
	ДанныеДокумента = СтандартЛечения.ФайлДокумента.Получить();
	Если ДанныеДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ДанныеДокумента, Расширение", ДанныеДокумента, СтандартЛечения.РасширениеФайлаДокумента);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСтандартЛечения(Команда)
	
	Если Команда.Имя = "ОткрытьСтандартЛечения" Тогда
		СтандартыЛеченияСписок = Элементы.СтандартыЛечения;
	Иначе
		СтандартыЛеченияСписок = Элементы.ИспользуемыеСтандартыЛечения;
	КонецЕсли;
	
	ТекДанные = СтандартыЛеченияСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(ТекДанные.СтандартЛечения);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормам(Команда)
	
	Если Объект.Материалы.Количество() <> 0 Тогда
		// Вопрос об очистке.
		ОповещениеОтвета = Новый ОписаниеОповещения("ЗаполнитьПоНормамПодтверждение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(ОповещениеОтвета,ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормамПодтверждение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормамРабот()
	
	Материалы = ЗаполнитьМатериалыПоНормамРаботСервер(Объект);
	Объект.Материалы.Очистить();
	Для Каждого СтрокаМатериал Из Материалы Цикл
		ЗаполнитьЗначенияСвойств(Объект.Материалы.Добавить(), СтрокаМатериал);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьМатериалыПоНормамРаботСервер(Знач Объект)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Прием"));
	ДокументОбъект.ЗаполнитьМатериалыПоНормамРабот();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДокументОбъект.Материалы.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокРаботДокумента()
	
	мСписокРаботДокумента = Новый СписокЗначений;
	
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		
		мСписокРаботДокумента.Добавить(СтрокаРаботы.КлючСтроки, Строка(СтрокаРаботы.Номенклатура) + " " +Строка(СтрокаРаботы.ХарактеристикаНоменклатуры));
		
	КонецЦикла;
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда	
		Элементы.МатериалыРабота.СписокВыбора.ДоступныеЗначения = мСписокРаботДокумента;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект, мАвтоматическиЗаполнятьМатериалы = Неопределено, ПриОткрытии = Ложь)
	
	Если мУчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги Тогда
		
		Если ПриОткрытии И Объект.Ссылка.Пустая() Тогда
			Объект.РучнаяКорректировкаМатериалов = Объект.РучнаяКорректировкаМатериалов Или Не мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловПриема;
		КонецЕсли;
		
		мАвтоматическиЗаполнятьМатериалы = мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловПриема И Не Объект.РучнаяКорректировкаМатериалов;

		Элементы.Материалы.ИзменятьСоставСтрок			= Не мАвтоматическиЗаполнятьМатериалы; // Для 8.3.23+ приводит к смене основной команды формы.
		Элементы.Материалы.КоманднаяПанель.Доступность	= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.Материалы.КонтекстноеМеню.Доступность	= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыПодбор.Доступность			= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыНоменклатура.Доступность		= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыРабота.Доступность			= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыКоличество.Доступность		= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыЕдиницаИзмерения.Доступность	= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыВходитВСтоимость.Доступность	= Не мАвтоматическиЗаполнятьМатериалы;
		
		Если мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловПриема Тогда
			Элементы.РучнаяКорректировкаМатериалов.ТолькоПросмотр = Объект.РучнаяКорректировкаМатериалов; // Запрет на снятие взведенного ручного редактирования.
		Иначе
			Элементы.РучнаяКорректировкаМатериалов.Видимость = Ложь;
		КонецЕсли;
	Иначе
		мАвтоматическиЗаполнятьМатериалы = Ложь;
		Элементы.Материалы.Видимость = Объект.Материалы.Количество() <> 0; // Т.е. видима только если не пустая.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМатериалыУдаленныхРабот()
	
	МахОбрИнд = Объект.Материалы.Количество()-1;
	Для сч = 0 по МахОбрИнд Цикл
		СтрокаМатериалов = Объект.Материалы[МахОбрИнд-сч];
		Если ЗначениеЗаполнено(СтрокаМатериалов.Работа) Тогда
			флУдалять = Истина;
			Для Каждого ЭлементСписка из мСписокРаботДокумента Цикл
				Если ЭлементСписка.Значение = СтрокаМатериалов.КлючСтроки Тогда
					флУдалять = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если флУдалять Тогда
				Объект.Материалы.Удалить(СтрокаМатериалов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйЭлемент = ВыбратьИзСписка(мСписокРаботДокумента);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
		ТекущаяСтрока.КлючСтроки = ВыбранныйЭлемент.Значение;
		Для Каждого СтрокаРаботы Из Объект.Работы Цикл 
			Если СтрокаРаботы.КлючСтроки = ТекущаяСтрока.КлючСтроки Тогда
				ТекущаяСтрока.Работа = СтрокаРаботы.Номенклатура;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРаботаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		МатериалыРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
		ТекущаяСтрока.КлючСтроки = ВыбранноеЗначение;
		Для Каждого СтрокаРаботы Из Объект.Работы Цикл 
			Если СтрокаРаботы.КлючСтроки = ТекущаяСтрока.КлючСтроки Тогда
				ТекущаяСтрока.Работа = СтрокаРаботы.Номенклатура;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоFEFOМатериалы(Команда)

	РаботаСДокументамиКлиент.ЗаполнитьПоFEFOКлиент(ЭтаФорма, "Материалы");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоFEFOМатериалыТекущаяСтрока(Команда)
	
	ТоварыТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если ТоварыТекущиеДанные <> Неопределено Тогда 
		НомерСтроки = ТоварыТекущиеДанные.НомерСтроки;
		РаботаСДокументамиКлиент.ЗаполнитьПоFEFOКлиент(ЭтаФорма, "Материалы", НомерСтроки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРаботыКнопкаПодбор(Кнопка)
	
	ПодборПометка = РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Работы", "Услуга", "Набор");
	Элементы.МатериалыПодбор.Пометка = ПодборПометка;
	Если ПодборПометка Тогда
		ПодключитьОбработчикОжидания("ОбновитьСписокПодбора", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборПодбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Ложь Тогда ЗапрашиватьКоличество = Ложь; ЗапрашиватьЦену = Ложь; ЗапрашиватьХарактеристику = Ложь; ЗапрашиватьСерию = Ложь; КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ДопСерверныеФункции.ПолучитьРеквизит(ВыбранноеЗначение, "ЭтоГруппа") Тогда 
		
		Если Элементы.СтраницыРаботы.ТекущаяСтраница = Элементы.ГруппаРаботы Тогда
			Действие = "ПодборРаботы";
		ИначеЕсли Элементы.СтраницыРаботы.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
			Действие = "ПодборМатериала";
		Иначе
			Возврат;
		КонецЕсли;
		
		Результат = РаботаСФормамиКлиент.ВыборПодборОбработка(ВыбранноеЗначение, ЗапрашиватьКоличество, ЗапрашиватьЦену, ЗапрашиватьХарактеристику, ЗапрашиватьСерию, Действие, ЭтаФорма);
		
		Если Результат <> Неопределено Тогда
			ОбработкаВыбора(Результат, Неопределено);
			Модифицированность = Истина;
		КонецЕсли	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрейскурантПодборПриИзменении(Элемент)
	РаботаСФормамиКлиент.УстановитьПараметрПрейскурантПодбора(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодбора()
	РаботаСФормамиКлиент.ОбновитьДинамическийСписокПринудительно(ЭтаФорма.РеквизитСписокПодбор);
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМатериалыКнопкаПодбор(Кнопка)
		
	ПодборПометка = РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Материалы", "Материал");
	Элементы.РаботыПодбор.Пометка = ПодборПометка;	
	Если ПодборПометка Тогда
		ПодключитьОбработчикОжидания("ОбновитьСписокПодбора", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущаяОперация = Элементы.Назначения.ТекущиеДанные.ВидНазначения;
	
	Если ТекущаяОперация = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Обследование")
		Или ТекущаяОперация = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Процедура")
	Тогда
		НоваяРабота = РаботаСФормамиКлиент.ВыбратьЭлементНоменклатурыПоВиду(Истина, Элементы.Назначения.ТекущиеДанные.Назначение, ЭтаФорма, Ложь);
		Если НоваяРабота <> Неопределено Тогда
			Если Элементы.Назначения.ТекущиеДанные.Назначение <> НоваяРабота Тогда
				Элементы.Назначения.ТекущиеДанные.ДокументРегистратор = Объект.Ссылка;
			КонецЕсли;
			Элементы.Назначения.ТекущиеДанные.Назначение = НоваяРабота;
		КонецЕсли;
	ИначеЕсли ТекущаяОперация = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Прием") Тогда
		НоваяПрием = ПолучитьФорму("Справочник.КатегорииВыработки.ФормаВыбора").ОткрытьМодально();
		Если НоваяПрием <> Неопределено Тогда
			Если Элементы.Назначения.ТекущиеДанные.Назначение <> НоваяПрием Тогда
				Элементы.Назначения.ТекущиеДанные.ДокументРегистратор = Объект.Ссылка;
			КонецЕсли;
			Элементы.Назначения.ТекущиеДанные.Назначение = НоваяПрием;
		КонецЕсли;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Элементы.Назначения.ТекущиеДанные.ИдентификаторНазначения) Тогда
		Элементы.Назначения.ТекущиеДанные.ИдентификаторНазначения = Новый УникальныйИдентификатор;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыРаботыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаМатериалы
		Или ТекущаяСтраница = Элементы.ГруппаРаботы
	Тогда
		Если Элементы.РаботыПодбор.Пометка
			Или Элементы.МатериалыПодбор.Пометка
		Тогда
			Если ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
				РаботаСФормамиКлиент.ОбновитьОтборПодбора(ЭтаФорма, "Материалы", "Материал");
			ИначеЕсли ТекущаяСтраница = Элементы.ГруппаРаботы Тогда
				РаботаСФормамиКлиент.ОбновитьОтборПодбора(ЭтаФорма, "Работы", "Услуга");
			КонецЕсли;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбновитьСписокПодбора", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторСтрокиШаблонаПриема()
	
	ИмяСтраницы = Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница.Имя;
	
	СтрокиСтраниц = СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИмяСтраницыФормы", ИмяСтраницы));
	Если СтрокиСтраниц.Количество() <> 0 Тогда
		Возврат СтрокиСтраниц[0].ИдентификаторСтрокиШаблона;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	ТекСтрока = Элементы.Материалы.ТекущиеДанные;
	ТекСтрока.ЕдиницаИзмерения = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
КонецПроцедуры

&НаКлиенте
Процедура ПервичныйПриемПриИзменении(Элемент)
	
	ЭтоМедосмотр = ТипЗнч(Объект.ПервичныйПрием) = Тип("ДокументСсылка.ПрохождениеМедосмотра");	
	
	Если ТипЗнч(Объект.ПервичныйПрием) = Тип("ДокументСсылка.Прием") Тогда
		
		ПервичныйПриемЗаполнен = ЗначениеЗаполнено(Объект.ПервичныйПрием);
		Объект.ЭтоПервичный = Не ПервичныйПриемЗаполнен Или Объект.ПервичныйПрием = Объект.Ссылка;
		
		Если ПервичныйПриемЗаполнен Тогда
			Объект.МедицинскаяКарта = ДопСерверныеФункции.ПолучитьРеквизит(Объект.ПервичныйПрием, "МедицинскаяКарта");
		КонецЕсли;
		ПерезаполнитьПланЛеченияПоПервичномуПриемуСУчетомВведенных();
		
		УстановитьВидимостьФлагаЗакрыт();
		ВосстановитьФлажокЗакрытНаКлиенте(Закрыт, Объект.Закрыт, Объект.Ссылка, Объект.ПервичныйПрием);
		
		ОбновитьКоличествоРецептов();
		
		РежимЗаполненияДиагнозов = мУчетнаяПолитика.РежимЗаполненияДиагнозовПоПервичномуПриему;
		
		Если РежимЗаполненияДиагнозов <> 3 Тогда
			Если Объект.ПервичныйПрием <> ПредыдущийПрием Тогда
				Результат = "Перезаполнить";
				Если Объект.Диагнозы.Количество() > 1
					Или (Объект.Диагнозы.Количество() = 1 
						И (	ЗначениеЗаполнено(Объект.Диагнозы[0].Диагноз) 
							Или ЗначениеЗаполнено(Объект.Диагнозы[0].Детализация)))					
				Тогда
					Если РежимЗаполненияДиагнозов = 0 Тогда
						// Режим выбирается пользователем.
						СписокОтветов = Новый СписокЗначений;
						СписокОтветов.Добавить("Перезаполнить");
						СписокОтветов.Добавить("Дополнить");
						СписокОтветов.Добавить("Отмена");
						
						Результат = Вопрос("Первичный прием изменился. Изменить список диагнозов?", СписокОтветов, 30);
						Если ТипЗнч(Результат) <> Тип("Строка") Тогда
							Результат = "";
						КонецЕсли;
					ИначеЕсли РежимЗаполненияДиагнозов = 1 Тогда
						Результат = "Перезаполнить";
					ИначеЕсли РежимЗаполненияДиагнозов = 2 Тогда
						Результат = "Дополнить";
					ИначеЕсли РежимЗаполненияДиагнозов = 4 Тогда
						Результат = "";
					КонецЕсли;
				КонецЕсли;
				
				Если Результат = "Перезаполнить" Тогда
					ЗаполнитьДиагнозамиИзПриема(Объект.ПервичныйПрием, Истина, Истина, Объект);
				ИначеЕсли Результат = "Дополнить" Тогда
					ЗаполнитьДиагнозамиИзПриема(Объект.ПервичныйПрием, Истина, Ложь, Объект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоМедосмотр Тогда
		ОбновитьОтметки();
		ВредностиДиагноза = ПолучитьВредностиКлиента(Объект.ПервичныйПрием, Объект.ВредныеФакторыПротивопоказаний);
		МедкартаПрохождения = ДопСерверныеФункции.ПолучитьРеквизит(Объект.ПервичныйПрием, "МедицинскаяКарта");
		Если ЗначениеЗаполнено(МедкартаПрохождения) Тогда
			Объект.МедицинскаяКарта = МедкартаПрохождения;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийПрием = Объект.ПервичныйПрием;
	
	ЗаполнитьИспользуемыеСтандартыЛечения(ИспользуемыеСтандартыЛечения, ПервичныйПриемДокумента(Объект));
	Объект.КомплексныйРасчет = КомплексныеРасчетыКлиентов.ПолучитьКомплексныеРасчетыПоПриему(Объект.Ссылка, Объект.ПервичныйПрием);
	ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	Элементы.ГруппаЭтапыРабот.Видимость = ЗначениеЗаполнено(Объект.КомплексныйРасчет);
	ПриИзмененииЭтоМедосмотр(Элементы, Объект.ПервичныйПрием, ЭтоМедосмотр);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАктуальныеДиагнозыПоПервичномуПриему(ПервичныйПрием)
	
	Перем ПриемСДиагнозами;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Прием.Ссылка КАК Ссылка,
	               |	Прием.Диагнозы.(
	               |		Ссылка КАК Ссылка
	               |	) КАК Диагнозы
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.ПервичныйПрием = &СсылкаНаПервичныйПрием
	               |	И Прием.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Прием.Дата УБЫВ";
	Запрос.УстановитьПараметр("СсылкаНаПервичныйПрием", ПервичныйПрием);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		Если Строка.Диагнозы.Количество() > 0 Тогда
			ПриемСДиагнозами = Строка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПриемСДиагнозами <> Неопределено Тогда
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ПриемСДиагнозами.Диагнозы.Выгрузить());
	КонецЕсли;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДиагнозамиИзПриема(Прием, ЗаполнениеПоПервичномуПриему, ОчиститьТекущиеДиагнозы, Объект)
	
	Если ОчиститьТекущиеДиагнозы Тогда
		Объект.Диагнозы.Очистить();
	КонецЕсли;
	
	Если ЗаполнениеПоПервичномуПриему Тогда
		ДиагнозыПриема = ПолучитьАктуальныеДиагнозыПоПервичномуПриему(Прием);
	Иначе
		ДиагнозыПриема = ПолучитьДиагнозыПриема(Прием);
	КонецЕсли;
	
	Если ДиагнозыПриема <> Неопределено Тогда
		Для Каждого СтрокаДиагноза Из ДиагнозыПриема Цикл
			Если Объект.Диагнозы.НайтиСтроки(Новый Структура("Диагноз", СтрокаДиагноза.Диагноз)).Количество() = 0 Тогда
				НоваяСтрока = Объект.Диагнозы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДиагноза);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзДругогоПриема(Команда)
	
	ОткрытьФорму("Документ.Прием.Форма.ВыборПриемаДляПерезаполненияДиагнозов", Новый Структура ("Клиент, СсылкаНаТекущийПрием, СсылкаНаПервичныйПрием", Объект.Клиент, Объект.Ссылка, Объект.ПервичныйПрием),,,,, Новый ОписаниеОповещения("ЗаполнитьДиагнозыИзДругогоПриемаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДиагнозыИзДругогоПриемаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьДиагнозамиИзПриема(Результат.Прием, Ложь, Результат.УдалятьСтарые, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДиагнозыПриема(Прием)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриемДиагнозы.Диагноз КАК Диагноз,
	|	ПриемДиагнозы.Детализация КАК Детализация,
	|	ПриемДиагнозы.Классификация1 КАК Классификация1,
	|	ПриемДиагнозы.Классификация2 КАК Классификация2,
	|	ПриемДиагнозы.Классификация3 КАК Классификация3,
	|	ПриемДиагнозы.Сопутствующий КАК Сопутствующий,
	|	ПриемДиагнозы.Травма КАК Травма
	|ИЗ
	|	Документ.Прием.Диагнозы КАК ПриемДиагнозы
	|ГДЕ
	|	ПриемДиагнозы.Ссылка = &СсылкаНаПрием";
	Запрос.УстановитьПараметр("СсылкаНаПрием", Прием);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаСервереБезКонтекста
Функция ВычислитьВидимостьКолонкиНомераПробы(Знач ДанныеФормыРаботы)
	
	Видимость = Ложь;
	
	Если ДанныеФормыРаботы.Количество() <> 0 Тогда

		НоменклатураРабот = Новый Массив;
		Для Каждого СтрокаРабот Из ДанныеФормыРаботы Цикл
			НоменклатураРабот.Добавить(СтрокаРабот.Номенклатура);
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", НоменклатураРабот);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕстьNULL(МАКСИМУМ(Номенклатура.Анализ), ЛОЖЬ) КАК Анализ
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Ссылка)"
		;
    	Видимость = Запрос.Выполнить().Выгрузить()[0][0];
			
	КонецЕсли;
	
	Возврат Видимость;

КонецФункции

&НаКлиенте
Процедура ВрачПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Врач)
		И КоличествоЗаполненныхШаблоновПриема(Объект.ШаблоныПриема) = 0 
	Тогда
		ДанныеШаблона = ПолучитьДанныеОсновногоШаблонаОсмотраСотрудника(Объект.Врач, Объект.Дата, ИспользуетсяВерсионирование, ЭтоМедосмотр, Объект.Специализация);
		Если ДанныеШаблона <> Неопределено Тогда
			Если Объект.ШаблоныПриема.Количество() = 0 Тогда
				СтрокаШаблона = Объект.ШаблоныПриема.Добавить();
			Иначе
				СтрокаШаблона = Объект.ШаблоныПриема[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаШаблона, ДанныеШаблона);
			ВерсияШаблона = ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема); // Неявно добавляем строку в таблицу "ВерсииШаблонов".
			
			ПерезаполнитьТаблицуСтраницШаблоновПриема();
			УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра();
			
			ШаблонОсмотра = СтрокаШаблона.ШаблонПриема;
			
			Если ЭтоМедосмотр И ЗначениеЗаполнено(Объект.Врач) Тогда
				Объект.Специализация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Врач, "Специализация");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Врач)
		И Не ЗначениеЗаполнено(Объект.СкладМатериалов)
	Тогда
		Объект.СкладМатериалов = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(Объект.Врач, "ОсновнойСкладМатериалов", Объект[ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов()]);
	КонецЕсли;
	
	РаботаСШаблонамиHTMLКлиент.ПересчетПараметровОтЗависимыхРеквизитов("Врач", ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОсновногоШаблонаОсмотраСотрудника(Врач, Дата = Неопределено, ИспользуетсяВерсионирование = Ложь, ЭтоМедосмотр = Ложь, Специализация = Неопределено)
	
	Если ЗначениеЗаполнено(Специализация) Тогда
		ОсновнойШаблонВрача = МедицинскаяДеятельность.ПолучитьОсновнойШаблонОсмотраСпециализации(Специализация, ЭтоМедосмотр);
	Иначе
		ОсновнойШаблонВрача = МедицинскаяДеятельность.ПолучитьОсновнойШаблонОсмотраСотрудника(Врач, ЭтоМедосмотр);
	КонецЕсли;
	
	Если ИспользуетсяВерсионирование Тогда
		ВерсияШаблона = ВерсионированиеШаблонов.ПолучитьВерсиюШаблона(ОсновнойШаблонВрача, Дата);
	Иначе
		ВерсияШаблона = ОсновнойШаблонВрача;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияШаблона) Тогда
		
		Возврат Новый Структура("ШаблонПриема, ВерсияШаблона, ВидШаблона, ТекстШаблона", 
								 ОсновнойШаблонВрача,
								 ВерсияШаблона,
								 ВерсияШаблона.ВидШаблона,
								 ВерсияШаблона.ТекстHTML);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоЗаполненныхШаблоновПриема(Знач ШаблоныПриема)
	
	Возврат ШаблоныПриема.Количество()
		  - ШаблоныПриема.НайтиСтроки(Новый Структура("ШаблонПриема", ПредопределенноеЗначение("Справочник.ШаблоныHTML.ПустаяСсылка"))).Количество();
	
КонецФункции

&НаКлиенте
Процедура ЗакрытПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ПервичныйПрием) = Тип("ДокументСсылка.Прием")
		И ЗначениеЗаполнено(Объект.ПервичныйПрием)
		И Объект.Ссылка <> Объект.ПервичныйПрием
	Тогда
		УстановитьПризнакЗакрытПервичномуПриему(Объект.ПервичныйПрием, Закрыт);
	КонецЕсли;
	Объект.Закрыт = Закрыт;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьФлажокЗакрытНаКлиенте(Закрыт, ОбъектЗакрыт, ОбъектСсылка, ПервичныйПрием)
	Если ТипЗнч(ПервичныйПрием) = Тип("ДокументСсылка.Прием") Тогда
		Если ЗначениеЗаполнено(ПервичныйПрием) Тогда
			Если ПервичныйПрием = ОбъектСсылка Тогда
				Закрыт = ОбъектЗакрыт;
			Иначе
				ПервичныйПриемЗакрыт = ДопСерверныеФункции.ПолучитьРеквизит(ПервичныйПрием, "Закрыт");
				Закрыт = ПервичныйПриемЗакрыт;
				ОбъектЗакрыт = ПервичныйПриемЗакрыт;
			КонецЕсли;
		Иначе
			Закрыт = ОбъектЗакрыт;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументСтроки(Команда)
	Если Элементы.Назначения.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(Элементы.Назначения.ТекущиеДанные.ДокументРегистратор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементов()
	
	КлиентЗаполнен = ЗначениеЗаполнено(Объект.Клиент);
	Элементы.МедицинскаяКарта.Доступность		= КлиентЗаполнен;
	Элементы.ПервичныйПрием.Доступность			= КлиентЗаполнен;
	Элементы.СтраницаДиагнозы.Доступность		= КлиентЗаполнен;
	Элементы.СтраницаПланЛечения.Доступность	= КлиентЗаполнен;
	Элементы.СтраницаУслуги.Доступность			= КлиентЗаполнен;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработку(Команда)
	
	СтруктураПараметров = Неопределено;
	
	ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблонаПриема();
	Если ИдентификаторСтрокиШаблона <> Неопределено Тогда
		
		СтрокаШаблона = Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
		ВерсияШаблона = ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема);
		ДанныеШаблонаОбработки = ПолучитьДанныеШаблонаОсмотраОбработки(ВерсияШаблона);
	
		Если ДанныеШаблонаОбработки <> Неопределено Тогда
			Если ДанныеШаблонаОбработки.Свойство("ИмяВстроеннойОбработки") Тогда
				Результат = ОткрытьОбработкуШаблона(ДанныеШаблонаОбработки.СтруктураПараметров, СтрокаШаблона.ПолучитьИдентификатор(), , , ДанныеШаблонаОбработки.ИмяВстроеннойОбработки);
			Иначе
				#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда 
					ИмяФайла = ПолучитьИмяВременногоФайла(".epf");
					ДанныеШаблонаОбработки.ДвоичныеДанные.Записать(ИмяФайла);
					Результат = ОткрытьОбработкуШаблона(ДанныеШаблонаОбработки.СтруктураПараметров, СтрокаШаблона.ПолучитьИдентификатор(), , ИмяФайла);
				#Иначе
					Если ДанныеШаблонаОбработки.ДвоичныеДанные <> Неопределено Тогда
						Адрес = ПоместитьВоВременноеХранилище(ДанныеШаблонаОбработки.ДвоичныеДанные);
						Результат = ОткрытьОбработкуШаблона(ДанныеШаблонаОбработки.СтруктураПараметров, СтрокаШаблона.ПолучитьИдентификатор(), Адрес, "");
					Иначе
						Адрес = "";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данных для записи не найдено'"));
					КонецЕсли;
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеШаблонаОсмотраОбработки(ШаблонПриема)
	
	Перем Результат;
	
	ДанныеОбработки = ШаблонПриема.Обработка.Получить();
	
	Если ДанныеОбработки <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		
		ПараметрыОбработки = Новый Массив;
		Для Каждого СоотвПараметров Из ШаблонПриема.СоответствияПараметрам Цикл
			ПараметрыОбработки.Добавить(Новый Структура("Наименование,Параметр",
														СоотвПараметров.Наименование,
														СоотвПараметров.Параметр));
		КонецЦикла;
		СтруктураПараметров.Вставить("ПараметрыОбработки", ПараметрыОбработки);
		
		ТаблицыПараметровШаблона = Новый Массив;
		Для Каждого СоотвТаблиц Из ШаблонПриема.СоответствияТаблицамШаблонов Цикл
			ТаблицыПараметровШаблона.Добавить(Новый Структура("ТаблицаШаблонов, ТаблицаОбработки, Наименование, Параметр",
														СоотвТаблиц.ТаблицаШаблонов,
														СоотвТаблиц.ТаблицаОбработки,
														СоотвТаблиц.Наименование,
														СоотвТаблиц.Параметр));
		КонецЦикла;
		СтруктураПараметров.Вставить("ТаблицыПараметровШаблона", ТаблицыПараметровШаблона);
		
		Если ТипЗнч(ДанныеОбработки) = Тип("Строка") Тогда // Встроенная обработка
			Результат = Новый Структура("ИмяВстроеннойОбработки, СтруктураПараметров", ДанныеОбработки, СтруктураПараметров);
		Иначе
			Результат = Новый Структура("ДвоичныеДанные, СтруктураПараметров", ДанныеОбработки, СтруктураПараметров);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данных для записи не найдено'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОткрытьОбработкуШаблона(СтруктураПараметров, ИдентификаторСтрокиШаблона, АдресХранилищаВеб = Неопределено, ИмяФайла = Неопределено, ИмяВстроеннойОбработки = Неопределено)
	
	Попытка
		
		ИмяОбработки = Неопределено;
		Если ИмяВстроеннойОбработки <> Неопределено Тогда
			ИмяФормыОбработки = "Обработка." + ИмяВстроеннойОбработки + ".Форма";
		Иначе
			
			// Помещаем обработку во временном хранилище.
			АдресХранилища = "";
			Попытка
				#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
					Результат = ПоместитьФайл(АдресХранилища, ИмяФайла, , Ложь);
				#Иначе
					АдресХранилища = АдресХранилищаВеб;
				#КонецЕсли
				ИмяОбработки = ОбщегоНазначенияСервер.ПодключитьВнешнююОбработку(АдресХранилища,Ложь);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			ИмяФормыОбработки = "ВнешняяОбработка." + ИмяОбработки + ".Форма";
		КонецЕсли;
		
		ИспользоватьТиповоеЗаполнение = ИспользоватьТиповоеЗаполнение(ИмяОбработки, ИмяВстроеннойОбработки);
		
		Если СтруктураПараметров.Свойство("ПараметрыОбработки") Тогда
			ПараметрыОбработки = СтруктураПараметров.ПараметрыОбработки;
		Иначе
			ПараметрыОбработки = Новый Массив;
		КонецЕсли;
		Если СтруктураПараметров.Свойство("ТаблицыПараметровШаблона") Тогда
			ТаблицыПараметровШаблона = СтруктураПараметров.ТаблицыПараметровШаблона;
		Иначе
			ТаблицыПараметровШаблона = Новый Массив;
		КонецЕсли;
		
		СтрокаШаблона = Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
		
		// Откроем форму подключенной внешней обработки.
		СтруктураПараметровОткрытияФормы = ПолучитьСтруктуруПараметровОткрытияФормы(СтрокаШаблона.ШаблонПриема, Объект);
		ПараметрыФормы = Новый Структура("ЗначенияПоУмолчанию", СтруктураПараметровОткрытияФормы.ЗначенияПоУмолчанию);
		ПараметрыФормы.Вставить("СписокЗаполнений", СтруктураПараметровОткрытияФормы.СписокЗаполнений);
		ПараметрыФормы.Вставить("СтруктураШапки", СтруктураПараметровОткрытияФормы.СтруктураШапки);
		ПараметрыФормы.Вставить("ШаблонПриема", СтрокаШаблона.ШаблонПриема);
		ПараметрыФормы.Вставить("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона);
		
		ДиагнозыКопия = Объект.Диагнозы;
		ПараметрыФормы.Вставить("Диагнозы", ДиагнозыКопия);
		
		СоответсвиеПараметрамШаблона = Новый Соответствие;
		Для Каждого Строка Из ТаблицаПараметров Цикл
			Если Строка.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона Тогда
				СоответсвиеПараметрамШаблона.Вставить(Строка.Параметр, Новый Структура("Параметр, Значение, ТипЗначения", Строка.Параметр, Строка.Значение, Строка.ТипЗначения));
			КонецЕсли;
		КонецЦикла;
		
		МассивЗначенийПараметров = Новый Массив;
		Для Каждого Строка Из ТаблицаПараметров Цикл
			Если Строка.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона Тогда
				СтруктураПараметра = Новый Структура("Параметр, Представление, Значение, СтрокаУидПараметра, ТипЗначения, ФорматнаяСтрока, ДеревоЗначенийВыбора",
					Строка.Параметр, Строка.Представление, Строка.Значение, Строка.СтрокаУидПараметра, Строка.ТипЗначения, Строка.ФорматнаяСтрока, Строка.ДеревоЗначенийВыбора);
				МассивЗначенийПараметров.Добавить(СтруктураПараметра);
			КонецЕсли;
		КонецЦикла;
		ПараметрыФормы.Вставить("ЗначенияПараметров", МассивЗначенийПараметров);
		ЗначенияПараметровТаблицШаблонов = Новый Массив;
		Для Каждого Строка Из ПараметрыТаблицШаблонов Цикл
			Если Строка.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона Тогда
				СтруктураПараметра = Новый Структура("ИдентификаторТаблицы, НомерСтрокиТаблицы, Параметр, Значение, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
				ЗаполнитьЗначенияСвойств(СтруктураПараметра, Строка);
				ЗначенияПараметровТаблицШаблонов.Добавить(СтруктураПараметра);
			КонецЕсли;
		КонецЦикла;
		ПараметрыФормы.Вставить("ЗначенияПараметровТаблицШаблона", ЗначенияПараметровТаблицШаблонов);
		
		ПараметрыЗакрытия = Новый Структура;
		ПараметрыЗакрытия.Вставить("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона);
		ФормаОбработки = ПолучитьФорму(ИмяФормыОбработки, ПараметрыФормы, ЭтаФорма, ИмяФормыОбработки);
		
		Если ИспользоватьТиповоеЗаполнение <> Ложь Тогда
			
			Для Каждого СоответсвиеПараметрам Из ПараметрыОбработки Цикл
				
				СтрокаПараметра = СоответсвиеПараметрамШаблона.Получить(СоответсвиеПараметрам.Параметр);
				Если СтрокаПараметра = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					ФормаОбработки[СоответсвиеПараметрам.Наименование] = СтрокаПараметра.Значение;
					
					Если СтрокаПараметра.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДополнительныеЗначенияХарактеристик")) Тогда
						НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", СоответсвиеПараметрам.Параметр);
						НовыйМассив = Новый Массив();
						НовыйМассив.Добавить(НовыйПараметр);
						НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
						
						ФормаОбработки.Элементы[СоответсвиеПараметрам.Наименование].ПараметрыВыбора = НовыеПараметры;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			
			// Заполние таблиц обработки
			Если ТаблицыПараметровШаблона.Количество()<> 0 И ПараметрыТаблицШаблонов.Количество() <> 0 Тогда
				СоответствиеТаблицШаблонов = Новый Соответствие;
				Для Каждого СтрокаДТ Из ТаблицыПараметровШаблона Цикл
					ИдентификаторТаблицы = Строка(СтрокаДТ.ТаблицаШаблонов.УникальныйИдентификатор());
					ИдентификаторПараметра = Строка(СтрокаДТ.Параметр.УникальныйИдентификатор());
					СоответствиеТаблицШаблонов.Вставить("" + Строка(ИдентификаторСтрокиШаблона) + " " + ИдентификаторТаблицы + " " + ИдентификаторПараметра,
					Новый Структура("Ссылка, ТаблицаОбработки, Наименование", СтрокаДТ.ТаблицаШаблонов, СтрокаДТ.ТаблицаОбработки, СтрокаДТ.Наименование));
				КонецЦикла;
				РасшПараметрыТаблицШаблонов = Новый Массив;
				Для Каждого ПараметрТШ Из ПараметрыТаблицШаблонов Цикл
					СтрокаСопоставления = "" + Строка(ПараметрТШ.ИдентификаторСтрокиШаблона) + " " + ПараметрТШ.ИдентификаторТаблицы + " " + Строка(ПараметрТШ.Параметр.УникальныйИдентификатор());
					ПараметрыТаблицыОбработки = СоответствиеТаблицШаблонов.Получить(СтрокаСопоставления);
					Если ПараметрыТаблицыОбработки <> Неопределено Тогда
						РасшПараметрыТаблицШаблонов.Добавить(Новый Структура(
						"ИдентификаторСтрокиШаблона, ИдентификаторТаблицы, НомерСтрокиТаблицы, Параметр, Значение, СсылкаНаТаблицу, ТаблицаОбработки, Наименование",
						ПараметрТШ.ИдентификаторСтрокиШаблона, ПараметрТШ.ИдентификаторТаблицы, ПараметрТШ.НомерСтрокиТаблицы, ПараметрТШ.Параметр, ПараметрТШ.Значение, ПараметрыТаблицыОбработки.Ссылка, ПараметрыТаблицыОбработки.ТаблицаОбработки, ПараметрыТаблицыОбработки.Наименование));
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ПараметрТШ Из РасшПараметрыТаблицШаблонов Цикл
					Попытка
						ТаблицаОбработки = ФормаОбработки[ПараметрТШ.ТаблицаОбработки];
						Пока ПараметрТШ.НомерСтрокиТаблицы > ТаблицаОбработки.Количество() Цикл
							ТаблицаОбработки.Добавить();
						КонецЦикла;
						ТаблицаОбработки[ПараметрТШ.НомерСтрокиТаблицы-1][ПараметрТШ.Наименование] = ПараметрТШ.Значение;
						
						Если СодержитДопЗначения(ПараметрТШ.Параметр) Тогда
							НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ПараметрТШ.Параметр);
							НовыйМассив = Новый Массив();
							НовыйМассив.Добавить(НовыйПараметр);
							НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
							
							ФормаОбработки.Элементы[ПараметрТШ.Наименование].ПараметрыВыбора = НовыеПараметры;
						КонецЕсли;
					Исключение КонецПопытки;
				КонецЦикла;
				
			КонецЕсли;
			
			// Таблица состояний зубов в обработку редактирования осмотра.
			СостоянияЗубов = ПолучитьТекущуюЗубнуюКартуКлиента(СтрокаШаблона.ШаблонПриема);
			Если СостоянияЗубов <> Неопределено И СостоянияЗубов.Количество() > 0 Тогда
				Попытка
					Для Каждого СтрокаСостояния Из СостоянияЗубов Цикл
						ЗаполнитьЗначенияСвойств(ФормаОбработки.ТаблицаКОтправке.Добавить(), СтрокаСостояния); // НомерЗуба, СегментЗуба, Состояние, Описание.
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		// Открытие формы.
		ОповещениеЗакрытия = Новый ОписаниеОповещения("ОбработкаШаблонаЗакрытие", ЭтотОбъект, ПараметрыЗакрытия);
		ФормаОбработки.ОписаниеОповещенияОЗакрытии = ОповещениеЗакрытия;
		ФормаОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаОбработки.Открыть();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаШаблонаЗакрытие(Результат, ПараметрыЗакрытия) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Перенос значений из обработки в приём.
		СтрокаШаблона = Объект.ШаблоныПриема.НайтиПоИдентификатору(ПараметрыЗакрытия.ИдентификаторСтрокиШаблона);
		ПеренестиЗначенияПараметровОтОбработкиВТаблицуПараметров(Результат.МассивПараметров, ПараметрыЗакрытия.ИдентификаторСтрокиШаблона);
		Если Результат.Свойство("ТаблицаПараметров") Тогда
			ПеренестиЗначенияПараметровОтОбработкиВТаблицуПараметров(Результат.ТаблицаПараметров, ПараметрыЗакрытия.ИдентификаторСтрокиШаблона, Истина);
		КонецЕсли;
		СтрокаСтраницыШаблона = СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", ПараметрыЗакрытия.ИдентификаторСтрокиШаблона));
		Если СтрокаСтраницыШаблона.Количество() > 0 Тогда
			СтрокаСтраницыШаблона = СтрокаСтраницыШаблона[0];
		КонецЕсли;
		
		Если Результат.Свойство("СтрокаТЗВизуальноеРедактированиеЗубов") Тогда
			ПроверитьНаОбработкуВизуальногоРедактированияЗубов(Результат.СтрокаТЗВизуальноеРедактированиеЗубов);
		КонецЕсли;
		
		// Установка текста печати.
		Если Результат.Свойство("НеМенятьИменаКлассов")
			И Результат.НеМенятьИменаКлассов
		Тогда
			СтрокаСтраницыШаблона.ТекстДляПечати = РаботаСHTMLКлиентСервер.ПеренестиСтилиИзHeadВТелоДокумента(Результат.ПредставлениеОсмотра);
		Иначе
			СтрокаСтраницыШаблона.ТекстДляПечати = РаботаСHTMLКлиентСервер.ПеренестиСтилиИзHeadВТелоДокументаСЗаменойИменКлассов(Результат.ПредставлениеОсмотра);
		КонецЕсли;
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(СтрокаСтраницыШаблона.ТекстДляПечати);
		СтрокаШаблона.ТекстДляПечати = СтрокаСтраницыШаблона.ТекстДляПечати;
		ЭтаФорма[СтрокаСтраницыШаблона.ИмяРеквизита] = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтруктуруШапки(Знач Объект)
	ОбъектДокумент = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Прием"));
	Возврат ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ОбъектДокумент);	
КонецФункции

&НаСервереБезКонтекста
Функция СодержитДопЗначения(ПараметрОбработки)
	Возврат ПараметрОбработки.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДополнительныеЗначенияХарактеристик"));
КонецФункции

&НаКлиенте
Процедура ПеренестиЗначенияПараметровОтОбработкиВТаблицуПараметров(ПарамерыИзОбработки, ИдентификаторСтрокиШаблона, ЭтоПереносТаблиц = Ложь)
	
	Перем ИмяКолонкиТаблицы, ТаблицаШаблонов;
	
	Отбор = Новый Структура("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона);
	
	// Удаление старых значений параметров шаблона обработки.
	Если ЭтоПереносТаблиц Тогда
		ПараметрыШаблона = ПараметрыТаблицШаблонов.НайтиСтроки(Отбор);
		мОбрИнд = ПараметрыТаблицШаблонов.Количество()-1;
		Для Сч = 0 По мОбрИнд Цикл
			СтрокаТЗ = ПараметрыТаблицШаблонов[мОбрИнд-Сч];
			Если СтрокаТЗ.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона Тогда
				ПараметрыТаблицШаблонов.Удалить(мОбрИнд-Сч);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыШаблона = ТаблицаПараметров.НайтиСтроки(Отбор);
		Для Каждого СтрокаПараметра Из ПараметрыШаблона Цикл
			СтрокаПараметра.Значение = СтрокаПараметра.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаШаблона = Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
	ВерсияШаблона = ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема);
	СоответствияПараметрамШаблона = РаботаСШаблонамиОбработкамиСервер.ПолучитьСоответствиеПараметровОбработки(ВерсияШаблона, ЭтоПереносТаблиц, Истина);
	
	Отбор.Вставить("Параметр");
	
	Если ЭтоПереносТаблиц Тогда
		ИмяКолонкиТаблицы = Неопределено;
		
		ВариантыИмениКолонкиТаблицы = Новый Массив;
		ВариантыИмениКолонкиТаблицы.Добавить("СсылкаНаТаблицу");
		ВариантыИмениКолонкиТаблицы.Добавить("ТаблицаШаблонов");
		ВариантыИмениКолонкиТаблицы.Добавить("ИмяТаблицыШаблонов");
		ВариантыИмениКолонкиТаблицы.Добавить("ИмяТаблицы");
		
		Если ПарамерыИзОбработки.Количество() = 0 Тогда
			Возврат;
		Иначе
			СтрокаПараметраИзОбработки = ПарамерыИзОбработки[0];
		КонецЕсли;
		
		Для Каждого ВариантИмени Из ВариантыИмениКолонкиТаблицы Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПараметраИзОбработки, ВариантИмени) Тогда
				ИмяКолонкиТаблицы = ВариантИмени;
			КонецЕсли;
		КонецЦикла;
		Если ИмяКолонкиТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаПараметраИзОбработки Из ПарамерыИзОбработки Цикл
		
		Если ЭтоПереносТаблиц Тогда
			ТаблицаШаблонов = ПолучитьТаблицуШаблонаПоРезультатуОбработкиШаблона(СтрокаПараметраИзОбработки, СоответствияПараметрамШаблона, ИмяКолонкиТаблицы);
		КонецЕсли;
		
		Параметр = НайтиПараметрИзОбработкаВСоответствииШаблона(СтрокаПараметраИзОбработки, СоответствияПараметрамШаблона, ТаблицаШаблонов);
		Если Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПереносТаблиц Тогда
			НоваяСтрока = ПараметрыТаблицШаблонов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметраИзОбработки);
			НоваяСтрока.Представление = Строка(НоваяСтрока.Значение);
			НоваяСтрока.ИдентификаторТаблицы = СтрокаПараметраИзОбработки.СсылкаНаТаблицу.УникальныйИдентификатор();
			НоваяСтрока.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона;
		Иначе
			Для Каждого СтрокаПараметра Из ПараметрыШаблона Цикл
				Если Параметр = СтрокаПараметра.Параметр Тогда
					СтрокаПараметра.Значение = СтрокаПараметраИзОбработки.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПараметрИзОбработкаВСоответствииШаблона(СтрокаПараметраИзОбработки, СоответствияПараметрамШаблона, ТаблицаШаблонов = Неопределено)

	Перем Параметр, ИмяКолонкиТаблицы;
	
	// Определение ссылки на параметр шаблона.
	ТипПоляПараметр = ТипЗнч(СтрокаПараметраИзОбработки.Параметр);
	
	Если ТипПоляПараметр = Тип("ПланВидовХарактеристикСсылка.ПараметрыHTML") Тогда
		Параметр = СтрокаПараметраИзОбработки.Параметр;
	ИначеЕсли ТипПоляПараметр = Тип("Строка") Тогда
		// Ищем ссылку на параметр в табличной части соответствия параметров.
		Для Каждого СтрокаСоответствия Из СоответствияПараметрамШаблона Цикл
			Если СтрокаСоответствия.Наименование = СтрокаПараметраИзОбработки.Параметр Тогда
				
				Если ЗначениеЗаполнено(ТаблицаШаблонов)
					И СтрокаСоответствия.ТаблицаШаблонов <> ТаблицаШаблонов
				Тогда
					Продолжить;
				КонецЕсли;
				
				Параметр = СтрокаСоответствия.Параметр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Параметр
	
КонецФункции

&НаКлиенте
Функция ПолучитьТаблицуШаблонаПоРезультатуОбработкиШаблона(СтрокаПараметраИзОбработки, СоответствияПараметрамШаблона, ИмяКолонкиТаблицы)
	
	Перем ТаблицаШаблонов;
	
	ТаблицаИзОбработки = СтрокаПараметраИзОбработки[ИмяКолонкиТаблицы];
	
	Если ТипЗнч(ТаблицаИзОбработки) = Тип("СправочникСсылка.ТаблицыШаблоновПриема") Тогда
		ТаблицаШаблонов = ТаблицаИзОбработки;
	ИначеЕсли ТипЗнч(ТаблицаИзОбработки) = Тип("Строка") Тогда
		
		// Предполагаем, что одна таблица шаблона фигурирует в строках соответствий одной таблице формы строго под одним именем (иное неадекватно).
		Для Каждого СтрокаСоответствия Из СоответствияПараметрамШаблона Цикл
			Если СтрокаСоответствия.ТаблицаОбработки = ТаблицаИзОбработки Тогда
				ТаблицаШаблонов = СоответствияПараметрамШаблона.ТаблицаШаблонов;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаШаблонов;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБезПросмотра(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = Элементы.ГруппаПечатьВсегоОсмотра Тогда
		
		Элементы.ПолеHTMLДокументаПечать.Документ.execCommand("Print");
		
	Иначе
		СтрокиСтраницШаблона = СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИмяСтраницыФормы", Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница.Имя));
		Если СтрокиСтраницШаблона.Количество() <> 0 Тогда
			СтрокаСтраницыШаблона = СтрокиСтраницШаблона[0];
			ПолеДокумента = Элементы.Найти(СтрокаСтраницыШаблона.ИмяПоляДокумента);
			
			Если Элементы.КнопкаВерсияДляПечати.Пометка Тогда
				ПолеДокумента.Документ.execCommand("Print");
			Иначе
				ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров();
				
				СтрокаШаблона = Объект.ШаблоныПриема.НайтиПоИдентификатору(СтрокаСтраницыШаблона.ИдентификаторСтрокиШаблона);
				
				Если СтрокаШаблона.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон") Тогда
					
					мПараметрыПечатиСтраницыОсмотра = Новый Структура;
					мПараметрыПечатиСтраницыОсмотра.Вставить("ТекущаяСтраница",	Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница);
					мПараметрыПечатиСтраницыОсмотра.Вставить("ПолеДокумента",	ПолеДокумента);

					КомандаВерсияДляПечати(Неопределено);
				Иначе
					ПолеДокумента.Документ.execCommand("Print");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичныйПриемНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийПрием = Объект.ПервичныйПрием;
	
	Если Не ЭтоМедосмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Клиент", Объект.Клиент));
		Если ЗначениеЗаполнено(ПредыдущийПрием) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", ПредыдущийПрием);
		КонецЕсли;
		ОткрытьФорму("Документ.Прием.Форма.ФормаВыбораПервичногоДокумента",ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МедицинскаяКартаПриИзменении(Элемент)
	
	Если Не ЭтоМедосмотр Тогда
		СлучайБылИзменен = Ложь;
		ПодставитьПервичныйПриемПоМедКарте(Объект.МедицинскаяКарта, Объект.ПервичныйПрием, СлучайБылИзменен);
		Если СлучайБылИзменен Тогда
			ПервичныйПриемПриИзменении(Неопределено);
			ЗаполнитьИспользуемыеСтандартыЛечения(ИспользуемыеСтандартыЛечения, ПервичныйПриемДокумента(Объект));
		КонецЕсли;
	КонецЕсли;
	
	РаботаСШаблонамиHTMLКлиент.ПересчетПараметровОтЗависимыхРеквизитов("МедицинскаяКарта", ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МедицинскаяКартаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьМедицинскиеКартыПациентаДляВыбора(Объект.Клиент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМедицинскиеКартыПациентаДляВыбора(Клиент)
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МедицинскиеКарты.Ссылка,
	|	МедицинскиеКарты.Представление
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|ГДЕ
	|	МедицинскиеКарты.Клиент = &Клиент
	|	И НЕ МедицинскиеКарты.ПометкаУдаления"
	;
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Результат.Добавить(Выб.Ссылка, Выб.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПодставитьПервичныйПриемПоМедКарте(МедицинскаяКарта, ПервичныйПрием, СлучайБылИзменен = Неопределено)
	
	ТекущийПервичныйПриём = МедицинскаяДеятельность.ПолучитьТекущийПервичныйПриемМедкарты(МедицинскаяКарта);
	
	Если ТекущийПервичныйПриём <> ПервичныйПрием  Тогда
		Если Не ЗначениеЗаполнено(ТекущийПервичныйПриём) Тогда
			ПервичныйПрием = Документы.Прием.ПустаяСсылка();
		Иначе
			ПервичныйПрием = ТекущийПервичныйПриём;
		КонецЕсли;
		СлучайБылИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоПервичныйПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПервичныйПрием)
		И (	 Не Объект.ЭтоПервичный	И Объект.ПервичныйПрием = Объект.Ссылка
			Или Объект.ЭтоПервичный	И Объект.ПервичныйПрием <> Объект.Ссылка)
	Тогда
		Объект.ПервичныйПрием = ПредопределенноеЗначение("Документ.Прием.ПустаяСсылка");
		ПервичныйПриемПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозыДиагнозНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьДиагноз(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДиагноз(Элемент)
	
	ПараметрыВыбораЗначения = Новый Массив;
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("Сотрудник", Объект.Врач));
	
	ТекущиеДанные = Элементы.Диагнозы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ВидНозологическойЕдиницы", ТекущиеДанные.Классификация3));
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаДиагнозы Тогда
		Если Объект.Диагнозы.Количество() = 0 И Не ИзмененияЗапрещены Тогда
			ТекущаяМодифицированность = Модифицированность;
			Элементы.Диагнозы.ДобавитьСтроку();
			Объект.Диагнозы[0].Классификация3 = ПредопределенноеЗначение("Перечисление.КлассификацииДиагнозов.ОсновноеЗаболевание");
			ЭтаФорма.ТекущийЭлемент = Элементы.Диагноз;
			Модифицированность = ТекущаяМодифицированность;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЭП Тогда
		// РЭМД
		ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
	Иначе
		ОчиститьПустуюТаблицуДиагнозов();
		
		Если ТекущаяСтраница = Элементы.СтраницаПланЛечения Тогда
			Если НеобходимоОбновитьСтандартыЛечения Тогда
				УстановитьОтборСтандартамЛечения();
				НеобходимоОбновитьСтандартыЛечения = Ложь;
			КонецЕсли;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОсмотр Тогда 
			ТекущийЭлемент = Элементы.ПолеHTMLДокумента;
		КонецЕсли;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПустуюТаблицуДиагнозов()
	
	Если (Объект.Диагнозы.Количество() = 1) 
			И Не ЗначениеЗаполнено(Объект.Диагнозы[0].Диагноз) 
			И Не ЗначениеЗаполнено(Объект.Диагнозы[0].Детализация)
	Тогда
		УдалитьВредностиСтрокиДиагноза(Объект.Диагнозы[0].КлючСтроки);
		Объект.Диагнозы.Очистить();	
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ШаблонОсмотраПриИзменении(Элемент)
	
	Если Объект.ШаблоныПриема.Количество() = 0 Тогда 
		СтрокаШаблона = Объект.ШаблоныПриема.Добавить();
	Иначе 
		СтрокаШаблона = Объект.ШаблоныПриема[0];
	КонецЕсли;
	СтрокаШаблона.ШаблонПриема = ШаблонОсмотра;
	ШаблонПриемаПриИзменении(СтрокаШаблона);
	
	ПерезаполнитьТаблицуСтраницШаблоновПриема();
	УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОсмотраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ШаблонПриемаНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПриемаШаблонПриемаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ШаблоныПриема.ТекущиеДанные;
	ШаблонПриемаПриИзменении(ТекущиеДанные);
	
	ПерезаполнитьТаблицуСтраницШаблоновПриема();
	УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриемаНачалоВыбора(Элемент)
	
	НовыйПараметр = Новый ПараметрВыбора("Врач", Объект.Врач);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элемент.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриемаПриИзменении(СтрокаШаблона)
	
	Если ЗначениеЗаполнено(СтрокаШаблона.ШаблонПриема) Тогда
		ВерсияШаблона = ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема);
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияШаблона, "ТекстHTML, ВидШаблона, ВидДокумента, НеИспользоватьШапкуШаблона");
		СтрокаШаблона.ТекстШаблона = ?(ПустаяСтрока(ЗначенияРеквизитов.ТекстHTML), РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию(), ЗначенияРеквизитов.ТекстHTML);
		СтрокаШаблона.ВидШаблона = ЗначенияРеквизитов.ВидШаблона;
		СтрокаШаблона.ВидДокумента = ЗначенияРеквизитов.ВидДокумента;
		СтрокаШаблона.НеИспользоватьШапкуШаблона = ЗначенияРеквизитов.НеИспользоватьШапкуШаблона;
		СтрокаШаблона.ЭталонныеСтрокиТаблиц = РаботаСШаблонамиHTML.ЭталонныеСтрокиТаблиц(СтрокаШаблона.ТекстШаблона);
	Иначе
		СтрокаШаблона.ТекстШаблона = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию();
		СтрокаШаблона.ВидШаблона = Неопределено;
		СтрокаШаблона.ВидДокумента = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПриемаШаблонПриемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ШаблонПриемаНачалоВыбора(Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗначенийВсехПараметровПредыдущегоПриема(Знач Объект, Знач ТаблицаПараметров, Знач ВерсииШаблонов)
	
	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("ЗначенияПредыдущие", ПолучитьЗначенияПараметровПредыдущегоПриема(ТаблицаПараметров, Объект));
	СтруктураЗначений.Вставить("ЗначенияТаблицПредыдущие", УправлениеОбработкамиШаблоновСервер.СформироватьЗначенияДанныхТаблицПредыдущегоОсмотра(Объект.МедицинскаяКарта, Объект.Ссылка, Объект.Дата, ВерсииШаблонов, Объект.ШаблоныПриема));
	
	Возврат СтруктураЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияПараметровПредыдущегоПриема(Знач ТаблицаПараметров, Знач Объект)
	
	ПредыдущиеЗначения = УправлениеОбработкамиШаблоновСервер.СформироватьЗначенияПредыдущегоОсмотра(Объект.МедицинскаяКарта, Объект.Ссылка, ТаблицаПараметров.Выгрузить().ВыгрузитьКолонку("Параметр"), Истина);
	
	ТаблицаЗначенийПараметров = Новый ТаблицаЗначений;
	ТаблицаЗначенийПараметров.Колонки.Добавить("ИдентификаторСтрокиШаблона", Новый ОписаниеТипов("Число"));
	ТаблицаЗначенийПараметров.Колонки.Добавить("Параметр", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыHTML"));
	ТаблицаЗначенийПараметров.Колонки.Добавить("Значение");
	ТаблицаЗначенийПараметров.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	ОтборСШаблоном	= Новый Структура("Параметр, ШаблонПриема");
	ОтборБезШаблона = Новый Структура("Параметр");
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборСШаблоном, СтрокаПараметра);
		ЗаполнитьЗначенияСвойств(ОтборБезШаблона, СтрокаПараметра);
		
		мсСтр = ПредыдущиеЗначения.НайтиСтроки(ОтборСШаблоном);
		Если мсСтр.Количество() = 0 Тогда
			мсСтр = ПредыдущиеЗначения.НайтиСтроки(ОтборБезШаблона);
		КонецЕсли;
		
		Если мсСтр.Количество() <> 0 Тогда
			
			ПредыдущееЗначение = мсСтр[0].Значение;
			
			СтрокаЗначенияПараметра = ТаблицаЗначенийПараметров.Добавить();
			
			СтрокаЗначенияПараметра.ИдентификаторСтрокиШаблона = СтрокаПараметра.ИдентификаторСтрокиШаблона;
			СтрокаЗначенияПараметра.Параметр = СтрокаПараметра.Параметр;
			
			Если ТипЗнч(ПредыдущееЗначение) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
				СтрокаЗначенияПараметра.Значение = ПредыдущееЗначение.Значение;
			Иначе
				СтрокаЗначенияПараметра.Значение = ПредыдущееЗначение;
			КонецЕсли;
			
			СтрокаЗначенияПараметра.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(СтрокаЗначенияПараметра, СтрокаПараметра.ФорматнаяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияСервер.ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблицаЗначенийПараметров);
	
КонецФункции

&НаСервере
Функция ВыгрузитьНазначенныеАнализыИзПланаЛечения()
	Выгрузка = Новый ТаблицаЗначений;
	Выгрузка.Колонки.Добавить("Назначение");
	Выгрузка.Колонки.Добавить("ИдентификаторНазначения");

	Для Каждого Назначение Из СписокНазначений.ПолучитьЭлементы() Цикл
		Если ТипЗнч(Назначение.Назначение) = Тип("СправочникСсылка.Номенклатура")
			И Назначение.Назначение.Анализ = Истина // Не группа номенклатуры с null в реквизите (платформа может позволить ввести).
			И (Назначение.ДокументРегистратор.Пустая() ИЛИ Назначение.ДокументРегистратор = Объект.Ссылка)
		Тогда 
			НоваяЗапись = Выгрузка.Добавить();
			НоваяЗапись.Назначение = Назначение.Назначение;
			НоваяЗапись.ИдентификаторНазначения = Новый УникальныйИдентификатор(Назначение.ИдентификаторНазначения);	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Выгрузка;
КонецФункции

&НаКлиенте
Процедура ПодборАнализов(Команда)
	
	ОтборыПодбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		ОтборыПодбора.Вставить("Клиент", Объект.Клиент);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен клиент, подбор не возможен!'"));
		Возврат;
	КонецЕсли;
	
	ОтборыПодбора.Вставить("Клиника", Объект.Филиал);
	ОтборыПодбора.Вставить("Подбор", Истина);
	ОтборыПодбора.Вставить("ВидОперацииДокументаВладельца", ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПустаяСсылка"));
	ОтборыПодбора.Вставить("ТекущиеИД", ПолучитьТекущиеИД());
	
	ПараметрыФормы = Новый Структура("ОтборыПодбора", ОтборыПодбора);
	ФормаПодбора = ПолучитьФорму("Обработка.ЛабораторныеИсследования.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущиеИД()
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Объект.Работы.Выгрузить().ВыгрузитьКолонку("ИД"));
	Возврат СЗ;
КонецФункции

&НаКлиенте
Процедура ВыбратьШаблоныИзСпециализацийВрача(Команда)
	
	Если ЗначениеЗаполнено(Объект.Врач) Тогда
		ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров();
		
		ПараметрыФормы = Новый Структура("Врач, ШаблоныПриема", Объект.Врач, Объект.ШаблоныПриема);
		ОткрытьФорму("Документ.Прием.Форма.ПанельВыборШаблонаПриема", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьШаблоныПриема(НовыйСоставШаблонов)
	
	Если ТипЗнч(НовыйСоставШаблонов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = 0;
	Для Каждого ШаблонПриема Из НовыйСоставШаблонов Цикл
		
		// Если есть старая строка, перемещаем её в нужную позицию.
		СтараяСтрокаНайдена = Ложь;
		Для Сч = ИндексСтроки По Объект.ШаблоныПриема.Количество()-1 Цикл
			СтрокаШаблона = Объект.ШаблоныПриема[Сч];
			Если СтрокаШаблона.ШаблонПриема = ШаблонПриема Тогда
				СтараяСтрокаНайдена = Истина;
				Объект.ШаблоныПриема.Сдвинуть(Сч, (ИндексСтроки - Сч));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтараяСтрокаНайдена Тогда
			НоваяСтрока = Объект.ШаблоныПриема.Вставить(ИндексСтроки);
			НоваяСтрока.ШаблонПриема = ШаблонПриема;
			ШаблонПриемаПриИзменении(НоваяСтрока);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	ТребуемоеКоличество = НовыйСоставШаблонов.Количество();
	Пока ТребуемоеКоличество < Объект.ШаблоныПриема.Количество() Цикл
		Объект.ШаблоныПриема.Удалить(ТребуемоеКоличество); // Первый после последнего нужного элемента коллекции.
	КонецЦикла;
	
	ШаблоныПриемаПриИзменении(Элементы.ШаблоныПриема);
	
	ПодключитьОбработчикОжидания("ПреобразоватьОсмотрВВерсиюДляРедактированияОбщий", 0.1, Истина);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьОсмотрВВерсиюДляРедактированияОбщий()
	ПреобразоватьОсмотрВВерсиюДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПриемаПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.КнопкаВерсияДляПечати.Пометка 
			И Не РежимОдногоШаблонаОсмотра
			И КоличествоЗаполненныхШаблоновПриема(Объект.ШаблоныПриема) > 1
		Тогда
			Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = Элементы.ГруппаПечатьВсегоОсмотра
		Иначе
			СтрокаТаблицыСтраницОсмотра = ПолучитьСтрокуСтраницШаблонаПриемаКлиент(Элемент.ТекущаяСтрока);
			Если СтрокаТаблицыСтраницОсмотра <> Неопределено Тогда
				Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = Элементы.Найти(СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы);
				УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьОтборГотовыхФраз(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПриемаПриИзменении(Элемент)
	
	ПерезаполнитьТаблицуСтраницШаблоновПриема();
	УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра();
	РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуСтраницШаблоновПриема()
	
	СтрокиСИзмененнымШаблоном = Новый Массив;
	
	// Нединамическая страница формы, используемая для экономии производительности в тех случаях, когда врач использует 
	// только шаблон.
	ПерваяСтраницаОсмотра = Элементы.ГруппаПерваяСтраницаОсмотра;
	
	// Состав шаблонов точно изменился, если изменилось количество заполненых строк (обработка удаления строки шаблона).
	КоличествоЗаполненныхСтрокШаблонов	= Объект.ШаблоныПриема.Количество() 
										- Объект.ШаблоныПриема.НайтиСтроки(Новый Структура("ШаблонПриема", ПредопределенноеЗначение("Справочник.ШаблоныHTML.ПустаяСсылка"))).Количество();
																							
	флСоставШаблоновИзменился = КоличествоЗаполненныхСтрокШаблонов <> СтраницыШаблоновПриема.Количество();
	
	// Первоначально заполняю список свободных для назначения страниц группы осмотра всеми её наполняющими.
	СвободныеСтраницыОсмотра = Новый Массив;
	Для Каждого СтраницаОсмотра Из Элементы.ГруппаСтраницыОсмотра.ПодчиненныеЭлементы Цикл
		Если СтраницаОсмотра <> Элементы.ГруппаПечатьВсегоОсмотра Тогда
			СвободныеСтраницыОсмотра.Добавить(СтраницаОсмотра.Имя);
		КонецЕсли;
	КонецЦикла;
	
	мсСопоставленныеСтрокиСтраницОсмотра = Новый Массив;
	Отбор = Новый Структура("ИдентификаторСтрокиШаблона");
	Для Каждого СтрокаШаблонПриема Из Объект.ШаблоныПриема Цикл
		
		Отбор.ИдентификаторСтрокиШаблона = СтрокаШаблонПриема.ПолучитьИдентификатор();
		СтрокиСтраниц = СтраницыШаблоновПриема.НайтиСтроки(Отбор);
		Если СтрокиСтраниц.Количество() = 0 Тогда
			
			Если ЗначениеЗаполнено(СтрокаШаблонПриема.ШаблонПриема) Тогда
				
				СтрокаТаблицыСтраницОсмотра = СтраницыШаблоновПриема.Добавить();
				СтрокаТаблицыСтраницОсмотра.ИдентификаторСтрокиШаблона = СтрокаШаблонПриема.ПолучитьИдентификатор();
				СтрокаТаблицыСтраницОсмотра.ШаблонПриема = СтрокаШаблонПриема.ШаблонПриема;
				СтрокаТаблицыСтраницОсмотра.НомерСтроки  = СтрокаШаблонПриема.НомерСтроки;
				
				мсСопоставленныеСтрокиСтраницОсмотра.Добавить(СтрокаТаблицыСтраницОсмотра);
				
				СтрокиСИзмененнымШаблоном.Добавить(СтрокаШаблонПриема.ПолучитьИдентификатор());
				флСоставШаблоновИзменился = Истина;
			КонецЕсли;
		Иначе
			СтрокаТаблицыСтраницОсмотра = СтрокиСтраниц[0];
			флСоставШаблоновИзменился = флСоставШаблоновИзменился 
									  Или СтрокаШаблонПриема.ШаблонПриема <> СтрокаТаблицыСтраницОсмотра.ШаблонПриема
									  Или СтрокаШаблонПриема.НомерСтроки  <> СтрокаТаблицыСтраницОсмотра.НомерСтроки;
			
			Если ЗначениеЗаполнено(СтрокаШаблонПриема.ШаблонПриема) Тогда
				
				Если СтрокаШаблонПриема.ШаблонПриема <> СтрокаТаблицыСтраницОсмотра.ШаблонПриема Тогда
					СтрокиСИзмененнымШаблоном.Добавить(СтрокаШаблонПриема.ПолучитьИдентификатор());
				КонецЕсли;
										  
				СвободныеСтраницыОсмотра.Удалить(СвободныеСтраницыОсмотра.Найти(СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы));
				
				СтрокаТаблицыСтраницОсмотра.ШаблонПриема = СтрокаШаблонПриема.ШаблонПриема;
				СтрокаТаблицыСтраницОсмотра.НомерСтроки  = СтрокаШаблонПриема.НомерСтроки;
				
				мсСопоставленныеСтрокиСтраницОсмотра.Добавить(СтрокаТаблицыСтраницОсмотра);
			Иначе
				СтраницыШаблоновПриема.Удалить(СтрокаТаблицыСтраницОсмотра);	
			КонецЕсли;										
		КонецЕсли;	
	КонецЦикла;
	
	// Удаление ставших лишними строк СтраницыШаблоновПриема.
	мОбрИнд = СтраницыШаблоновПриема.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаТаблицыСтраницОсмотра = СтраницыШаблоновПриема[мОбрИнд-сч];
		Если мсСопоставленныеСтрокиСтраницОсмотра.Найти(СтрокаТаблицыСтраницОсмотра) = Неопределено Тогда
			СтраницыШаблоновПриема.Удалить(мОбрИнд-сч);
		КонецЕсли;
		
	КонецЦикла;
	
	Если флСоставШаблоновИзменился Тогда
		
		ПеренестиЗначенияТекстовыхПолейОсмотраВТаблицуПараметров();
		ПриИзмененииСоставаШаблоновСервер(СвободныеСтраницыОсмотра, СтрокиСИзмененнымШаблоном);
		
		Если Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = Неопределено 
			Или СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИмяСтраницыФормы",  Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница.Имя)).Количество() = 0
		Тогда
			Если СтраницыШаблоновПриема.Количество() = 0 Тогда
				Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = Элементы.ГруппаПерваяСтраницаОсмотра;
			Иначе
				Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = Элементы.Найти(СтраницыШаблоновПриема[0].ИмяСтраницыФормы);
			КонецЕсли;
		КонецЕсли;
		
		ПреобразоватьОсмотрВВерсиюДляРедактирования(, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоставаШаблоновСервер(СвободныеСтраницыОсмотра, СтрокиСИзмененнымШаблоном = Неопределено)

	ИмяПервойСтраницыОсмотра = "ГруппаПерваяСтраницаОсмотра";
	
	мСтраницыШаблоновПриема = СтраницыШаблоновПриема.Выгрузить();
	Для Каждого СтрокаТаблицыСтраницОсмотра Из мСтраницыШаблоновПриема Цикл
		
		Если ПустаяСтрока(СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы) Тогда
			
			ЗаголовокСтраницы = СтрокаТаблицыСтраницОсмотра.ШаблонПриема.Наименование;
			
			Если СвободныеСтраницыОсмотра.Количество() > 0 Тогда
				
				СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы = СвободныеСтраницыОсмотра[0];
				СтрокаТаблицыСтраницОсмотра.ИмяПоляДокумента = ПолучитьИмяПоляДокументаСтраницыОсмотра(СвободныеСтраницыОсмотра[0]);
				СтрокаТаблицыСтраницОсмотра.ИмяРеквизита 	= Элементы[СтрокаТаблицыСтраницОсмотра.ИмяПоляДокумента].ПутьКДанным;
				
				СвободныеСтраницыОсмотра.Удалить(0);
				
				Если СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы = ИмяПервойСтраницыОсмотра Тогда
					Элементы.ПолеHTMLДокумента.Видимость = Истина;
					Элементы.ДекорацияПерваяСтраницаОсмотра.Видимость = Ложь;
				КонецЕсли;
				
				ГруппаСтраницы = Элементы.Найти(СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы);
				Если ГруппаСтраницы.Заголовок <> ЗаголовокСтраницы Тогда
					ГруппаСтраницы.Заголовок = ЗаголовокСтраницы
				КонецЕсли;
			Иначе
				// Создаю новую страницу осмотра, её имена присваиваю строке таблицы страниц.
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСтраницОсмотра, СоздатьСтраницуОсмотра(ЗаголовокСтраницы));
			КонецЕсли;
			ТекстHTML = ?(СтрокаТаблицыСтраницОсмотра.ШаблонПриема.ВидШаблона = Перечисления.ВидыШаблонов.HTMLШаблон, 
							СтрокаТаблицыСтраницОсмотра.ШаблонПриема.ТекстHTML,
							РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию()); // Здесь добавить заполнение изначального текста HTML от обработки
			ЭтаФорма[СтрокаТаблицыСтраницОсмотра.ИмяРеквизита] = РаботаСDOMКлиентСервер.СформироватьПолныйТекстДокументаHTML(ТекстHTML);
		Иначе
			// Проверка, не изменили ли шаблон у этой старой строки табл. части. Если изменили, то обновляю заголовок.
			Если ТипЗнч(СтрокиСИзмененнымШаблоном) = Тип("Массив")
				И СтрокиСИзмененнымШаблоном.Найти(СтрокаТаблицыСтраницОсмотра.ИдентификаторСтрокиШаблона) <> Неопределено
			Тогда
				ГруппаСтраницы = Элементы.Найти(СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы);
				ГруппаСтраницы.Заголовок = СтрокаТаблицыСтраницОсмотра.ШаблонПриема.Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	СтраницыШаблоновПриема.Загрузить(мСтраницыШаблоновПриема);
	
	// Удаление лишних страниц осмотра.
	ПерваяСтраницаОсмотра = Элементы.ГруппаПерваяСтраницаОсмотра;
	Для Каждого ИмяСтраницыОсмотра Из СвободныеСтраницыОсмотра Цикл
		Если ИмяСтраницыОсмотра = ИмяПервойСтраницыОсмотра Тогда
			Элементы.ПолеHTMLДокумента.Видимость = Ложь;
			Если СтраницыШаблоновПриема.Количество() = 0 Тогда
				Элементы.ДекорацияПерваяСтраницаОсмотра.Видимость = Истина;
			КонецЕсли;
		Иначе
			УдалитьСтраницуОсмотра(ИмяСтраницыОсмотра);
		КонецЕсли;
	КонецЦикла;
	
	ОтображениеСтраниц = ?(СтраницыШаблоновПриема.Количество() > 1,
							  ОтображениеСтраницФормы.ЗакладкиСверху,
							  ОтображениеСтраницФормы.Нет);
	Если Элементы.ГруппаСтраницыОсмотра.ОтображениеСтраниц <> ОтображениеСтраниц Тогда
		Элементы.ГруппаСтраницыОсмотра.ОтображениеСтраниц = ОтображениеСтраниц;
	КонецЕсли;
	
	// Сортировка страниц.
	ГруппаСтраницОсмотра = Элементы.ГруппаСтраницыОсмотра;
	Отбор = Новый Структура("ИдентификаторСтрокиШаблона");
	Для Каждого СтрокаШаблонПриема Из Объект.ШаблоныПриема Цикл
		
		Если ЗначениеЗаполнено(СтрокаШаблонПриема.ШаблонПриема) Тогда
			Отбор.ИдентификаторСтрокиШаблона = СтрокаШаблонПриема.ПолучитьИдентификатор();
			СтрокаТаблицыСтраницОсмотра = СтраницыШаблоновПриема.НайтиСтроки(Отбор)[0];
			
			ЭлементСтраница = Элементы.Найти(СтрокаТаблицыСтраницОсмотра.ИмяСтраницыФормы);
			Элементы.Переместить(ЭлементСтраница, ГруппаСтраницОсмотра);
		КонецЕсли;
	
	КонецЦикла;
	
	КешЗначенийВыбора = Новый ФиксированноеСоответствие(РаботаСШаблонамиHTML.ПолучитьКешЗначенийВыбора(
		ВерсииШаблонов.Выгрузить().ВыгрузитьКолонку("ВерсияШаблона")));
	
	ДокументыПриемаСервер.ДополнитьТаблицуПараметровПоШаблонамПриема(Объект, ТаблицаПараметров, ВерсииШаблонов, КешЗависимыхПараметров);
	ПерезаполнитьПодменюШаблоновЗаполненияОсмотра();	
	
	Если ТипЗнч(СтрокиСИзмененнымШаблоном) = Тип("Массив") Тогда
		Для Каждого СтрокаСИзмененнымШаблоном Из СтрокиСИзмененнымШаблоном Цикл
			ЗаполнитьШаблонЗначениямиПоУмолчанию(СтрокаСИзмененнымШаблоном);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьШаблонЗначениямиПоУмолчанию(Знач СтрокаШаблона)
	
	Если ТипЗнч(СтрокаШаблона) = Тип("Массив") Тогда
		ЗаполняемыеШаблоны = СтрокаШаблона;
	Иначе
		ЗаполняемыеШаблоны = Новый Массив;
		ЗаполняемыеШаблоны.Добавить(СтрокаШаблона);
	КонецЕсли;
	
	Для Каждого СтрокаШаблона Из ЗаполняемыеШаблоны Цикл
		// Заполнение по-умолчанию новых параметров.
		Если Объект.ШаблоныПриема.НайтиПоИдентификатору(СтрокаШаблона).ВидШаблона = Перечисления.ВидыШаблонов.HTMLШаблон Тогда

			ТаблицаПараметровШаблона = ТаблицаПараметров.Выгрузить().СкопироватьКолонки();
			СтрокиПараметровИзмененногоШаблона = ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", СтрокаШаблона));
			
			Для Каждого СтрокаПараметра Из СтрокиПараметровИзмененногоШаблона Цикл
				// Если Значение параметра не заполнено, добавляю параметр в число тех, чьё значение по-умолчанию надо получить.
				Если СтрокаПараметра.Значение = Ложь Или Не ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаПараметровШаблона.Добавить(), СтрокаПараметра);
				КонецЕсли;
			КонецЦикла;
			
			ЗначенияПоУмолчанию = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(ТаблицаПараметровШаблона, КешЗависимыхПараметров, Объект, , СтрокаШаблона);
			РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(ТаблицаПараметров, ЗначенияПоУмолчанию, СтрокаШаблона);
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СоздатьСтраницуОсмотра(ЗаголовокСтраницы)
	
	ИмяСтраницы = СгенерироватьУникальноеИмя("СтраницаОсмотра_");
	ИмяПоляДокумента = ПолучитьИмяПоляДокументаСтраницыОсмотра(ИмяСтраницы);
	
	// Создание реквизита для поля HTML документа.
	Реквизит = Новый РеквизитФормы(ИмяПоляДокумента, Новый ОписаниеТипов("Строка"));
	мсРеквизит = Новый Массив;
	мсРеквизит.Добавить(Реквизит);
	ИзменитьРеквизиты(мсРеквизит);
	
	// Создание группы-страницы.
	ГруппаСтраница = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.ГруппаСтраницыОсмотра);
	ГруппаСтраница.Заголовок = ЗаголовокСтраницы;
	ГруппаСтраница.Вид = ВидГруппыФормы.Страница;
	
	// Создание поля HTML документа.
	ПолеДокумента = Элементы.Добавить(ИмяПоляДокумента, Тип("ПолеФормы"), ГруппаСтраница);
	ПолеДокумента.ПутьКДанным = ИмяПоляДокумента;
	ПолеДокумента.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	ПолеДокумента.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеДокумента.УстановитьДействие("ПриНажатии", "ОбработчикПриНажатии");
	ПолеДокумента.УстановитьДействие("ДокументСформирован", "ПолеHTMLДокументаДокументСформирован");
	
	// Создание команды "Вставить"
	КомандаВставить = Элементы.Добавить(ИмяПоляДокумента + "Вставить", Тип("КнопкаФормы"), ПолеДокумента.КонтекстноеМеню);
	КомандаВставить.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КомандаВставить.ИмяКоманды = "ПолеHTMLДокументаВставить";
	
	// Создание команды "Очистить"
	КомандаВставить = Элементы.Добавить(ИмяПоляДокумента + "Очистить", Тип("КнопкаФормы"), ПолеДокумента.КонтекстноеМеню);
	КомандаВставить.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КомандаВставить.ИмяКоманды = "ПолеHTMLДокументаОчистить";
	
	// Создание команды "ЗаполнитьПоУмолчанию"
	КомандаВставить = Элементы.Добавить(ИмяПоляДокумента + "ЗаполнитьПоУмолчанию", Тип("КнопкаФормы"), ПолеДокумента.КонтекстноеМеню);
	КомандаВставить.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КомандаВставить.ИмяКоманды = "ПолеHTMLДокументаЗаполнитьПоУмолчанию";
	
	Возврат Новый Структура("ИмяСтраницыФормы, ИмяПоляДокумента, ИмяРеквизита", ИмяСтраницы, ИмяПоляДокумента, ИмяПоляДокумента);
	
КонецФункции

&НаСервере
Процедура УдалитьСтраницуОсмотра(ИмяСтраницы)
	
	ИмяПоляДокумента = ПолучитьИмяПоляДокументаСтраницыОсмотра(ИмяСтраницы);
	
	// Удаление реквизита поля HTML документа.
	мсРеквизит = Новый Массив;
	мсРеквизит.Добавить(ИмяПоляДокумента);
	ИзменитьРеквизиты(,мсРеквизит);
	
	// Удаление группы-страницы (со всем содержимым).
	Элементы.Удалить(Элементы.Найти(ИмяСтраницы));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПоляДокументаСтраницыОсмотра(ИмяСтраницы)
	
	Если ИмяСтраницы = "ГруппаПерваяСтраницаОсмотра" Тогда
		// Предопределенная страница.
		Возврат "ПолеHTMLДокумента";
	Иначе
		Возврат СтрЗаменить(ИмяСтраницы, "СтраницаОсмотра_", "ПолеДокумента_");	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СгенерироватьУникальноеИмя(Префикс)
	
	Возврат Префикс + СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","_");
	
КонецФункции

&НаСервере
Процедура ТекущийЭлементПриСоздании()
	
	Если Не ЗначениеЗаполнено(Объект.Врач) Тогда
		ТекущийЭлемент = Элементы.Врач;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		ТекущийЭлемент = Элементы.Клиент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияПолейОсмотраПриСоздании()
	
	Если Объект.Ссылка.Пустая() Тогда
		ДокументыПриемаКлиентСервер.ЗаполнитьТаблицуВерсийШаблонов(ВерсииШаблонов, Объект);
	КонецЕсли;
	
	Если Объект.ШаблоныПриема.Количество() <> 0 Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЗагрузитьТаблицуПараметров();
			ЗагрузитьПараметрыТаблицШаблонов();
			ЗагрузитьРисункиКартинок();
			ЗагрузитьДобавленныеИзображения();
		КонецЕсли;
		
		ЗаполнитьДополнительныеРеквизитыТабЧастиШаблоны();
		
		// Создание структур данных о страницах осмотра.
		СвободныеСтраницыОсмотра = Новый Массив;
		СвободныеСтраницыОсмотра.Добавить("ГруппаПерваяСтраницаОсмотра");
		
		Для Каждого СтрокаШаблонПриема Из Объект.ШаблоныПриема Цикл
			
			Если ЗначениеЗаполнено(СтрокаШаблонПриема.ШаблонПриема) Тогда
				
				СтрокаТаблицыСтраницОсмотра = СтраницыШаблоновПриема.Добавить();
				СтрокаТаблицыСтраницОсмотра.ИдентификаторСтрокиШаблона = СтрокаШаблонПриема.ПолучитьИдентификатор();
				СтрокаТаблицыСтраницОсмотра.ШаблонПриема = СтрокаШаблонПриема.ШаблонПриема;
				СтрокаТаблицыСтраницОсмотра.НомерСтроки  = СтрокаШаблонПриема.НомерСтроки;
				
			КонецЕсли;
		КонецЦикла;
		
		ПриИзмененииСоставаШаблоновСервер(СвободныеСтраницыОсмотра);
		
	КонецЕсли;
	
	// Прием результатов анализов.
	Если ЭтоПриемРезультатовАнализа Тогда
		Элементы.ГруппаШаблоныПриема.Видимость = Ложь;
		Элементы.ГруппаГотовыеФразы.Видимость = Ложь;
		Элементы.ГруппаКомандыОсмотра.Видимость = Ложь;
		Элементы.КнопкаВерсияДляПечати.Пометка = Истина;
		Элементы.ГруппаПечатьВсегоОсмотра.Видимость = Истина;
		Элементы.ГруппаПерваяСтраницаОсмотра.Видимость = Ложь;
		Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница = Элементы.ГруппаПечатьВсегоОсмотра;
		ПолеHTMLПечати = Объект.Осмотр;
	КонецЕсли;
	
	// Команды разделения печатной версии на вариант Клиента и вариант Медицинской карты.
	РежимРазметкиКлиентскойОбластиШаблоновПриема = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимРазметкиКлиентскойОбластиШаблоновПриема");
	
	// Неопределено - не использовать разделение, Истина - для клиента, Ложь - для медкарты
	РежимПолучателяПечатнойВерсииОсмотра = ?(ЗначениеЗаполнено(РежимРазметкиКлиентскойОбластиШаблоновПриема),
												РежимРазметкиКлиентскойОбластиШаблоновПриема = 1, Неопределено);
												
	Если РежимПолучателяПечатнойВерсииОсмотра <> Неопределено Тогда
		// Пометка кнопки основной печатной версии
		Элементы.РежимПечатиДляКлиента.Пометка	 = РежимРазметкиКлиентскойОбластиШаблоновПриема;
		Элементы.РежимПечатиДляМедкарты.Пометка	 = Не Элементы.РежимПечатиДляКлиента.Пометка;
	Иначе
		// Разделение печатных версий не используется.
		Элементы.РежимПечатиДляКлиента.Видимость = Ложь;
		Элементы.РежимПечатиДляМедкарты.Видимость = Ложь;
		Элементы.ПечатьРежимПечатиДляКлиента.Видимость = Ложь;
		Элементы.ПечатьРежимПечатиДляМедкарты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуПараметров()
	
	ТаблицаПараметров.Очистить();
	
	// Заполнение из БД.
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ТаблЗначенияПараметровHTML = ПолучитьТаблицуЗначенийПараметров(Объект.Ссылка);
		
		Для Каждого СтрокаЗначения Из ТаблЗначенияПараметровHTML Цикл

			НоваяСтрока = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗначения);
			НоваяСтрока.СтрокаУидПараметра = Строка(СтрокаЗначения.Параметр.УникальныйИдентификатор());
			НоваяСтрока.ИдентификаторСтрокиШаблона = СтрокаЗначения.ИндексШаблона;				
			Если ЗначениеЗаполнено(СтрокаЗначения.ЗначениеЭМК) Тогда
				НоваяСтрока.Значение = СтрокаЗначения.ЗначениеЭМК;	
			КонецЕсли; 					
			НоваяСтрока.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(НоваяСтрока);
			
			ДокументыПриемаСервер.ЗаполнитьПараметрыВводаСтрокиПараметра(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение параметрами шаблона.
	ДокументыПриемаСервер.ДополнитьТаблицуПараметровПоШаблонамПриема(Объект, ТаблицаПараметров, ВерсииШаблонов, КешЗависимыхПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуЗначенийПараметров(ДокументСсылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияПараметровHTML.Параметр КАК Параметр,
	               |	ЗначенияПараметровHTML.Документ КАК Документ,
	               |	ЗначенияПараметровHTML.ИндексШаблона КАК ИндексШаблона,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровHTML.Значение) = ТИП(Справочник.СтрокиЭМКНеограниченнойДлины)
	               |			ТОГДА ЗначенияПараметровHTML.Значение.Значение
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ЗначениеЭМК,
	               |	ЗначенияПараметровHTML.Значение КАК Значение,
	               |	ЗначенияПараметровHTML.Параметр.ВыборПоСсылкеИзОграниченногоСписка КАК ВыборПоСсылкеИзОграниченногоСписка,
	               |	ЗначенияПараметровHTML.Параметр.ФорматнаяСтрока КАК ФорматнаяСтрока,
	               |	ЗначенияПараметровHTML.Параметр.ТипЗначения КАК ТипЗначения,
	               |	ЗначенияПараметровHTML.Параметр.НеРедактируетсяПользователем КАК НеРедактируетсяПользователем
	               |ИЗ
	               |	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
	               |ГДЕ
	               |	ЗначенияПараметровHTML.Документ = &Документ
	               |	И НЕ ЗначенияПараметровHTML.Параметр.ЭтоГруппа";
	Запрос.УстановитьПараметр("Документ",ДокументСсылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПараметрыТаблицШаблонов()
	
	ПараметрыТаблицШаблонов.Очистить();
	
	ПараметрыЭталонныхСтрокТаблицШаблонов = Новый Соответствие;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.ДанныеТаблицШаблоновПриема.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		
		// Реквизиты параметров шаблонов единым запросом
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, ФорматнаяСтрока ИЗ ПланВидовХарактеристик.ПараметрыHTML ГДЕ Ссылка В(&Ссылка)");
		Запрос.УстановитьПараметр("Ссылка", НаборЗаписей.ВыгрузитьКолонку("Параметр"));
		РеквизитыПараметров = Запрос.Выполнить().Выбрать();
		ОтборРеквизиты = Новый Структура("Ссылка");
		
		ИдентификаторыОбработанныхСтрок = Новый Массив;
		
		// Заполнение таблицы параметров на форме
		Для Каждого Запись Из НаборЗаписей Цикл
			
			СтрокаШаблона = Объект.ШаблоныПриема[Запись.ИндексШаблона];
			ИдентификаторСтроки = СтрокаШаблона.ПолучитьИдентификатор();
			
			ПараметрыЭталонныхСтрокТаблиц = ПараметрыЭталонныхСтрокТаблицШаблонов.Получить(СтрокаШаблона.ШаблонПриема);
			Если ПараметрыЭталонныхСтрокТаблиц = Неопределено Тогда
				ПараметрыЭталонныхСтрокТаблиц = РаботаСШаблонамиHTML.ПараметрыЭталонныхСтрокТаблиц(РаботаСШаблонамиHTML.ЭталонныеСтрокиТаблиц(СтрокаШаблона.ТекстШаблона), СтрокаШаблона.ТекстШаблона);
				ПараметрыЭталонныхСтрокТаблицШаблонов.Вставить(СтрокаШаблона.ШаблонПриема, ПараметрыЭталонныхСтрокТаблиц);
			КонецЕсли;
			
			ПараметрыЭталоннойСтрокиТаблицы = РаботаСШаблонамиHTML.ПараметрыЭталоннойСтрокиТаблицы(ПараметрыЭталонныхСтрокТаблиц, Строка(Запись.ТаблицаШаблонов.УникальныйИдентификатор()));
			
			Если ИдентификаторыОбработанныхСтрок.Найти(Запись.ИдентификаторСтроки) = Неопределено Тогда
				Если ПараметрыЭталоннойСтрокиТаблицы <> Неопределено
					И ПараметрыЭталоннойСтрокиТаблицы.Количество() > 0
				Тогда
					Для Каждого ПараметрЭталоннойСтроки Из ПараметрыЭталоннойСтрокиТаблицы Цикл
						НоваяСтрока = ПараметрыТаблицШаблонов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись, , "Значение");
						НоваяСтрока.Параметр = ПараметрЭталоннойСтроки;
						НоваяСтрока.ИдентификаторТаблицы = Запись.ТаблицаШаблонов.УникальныйИдентификатор();
						НоваяСтрока.ИдентификаторСтрокиШаблона = ИдентификаторСтроки;
					КонецЦикла;
				КонецЕсли;
				
				ИдентификаторыОбработанныхСтрок.Добавить(Запись.ИдентификаторСтроки);
			КонецЕсли;
			
			Если Запись.Параметр <> ПланыВидовХарактеристик.ПараметрыHTML.ПустаяСсылка() Тогда
				СтруктураПоиска = Новый Структура("НомерСтрокиТаблицы, Параметр, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Запись);
				СтруктураПоиска.Вставить("ИдентификаторТаблицы", Строка(Запись.ТаблицаШаблонов.УникальныйИдентификатор()));
				СтруктураПоиска.Вставить("ИдентификаторСтрокиШаблона", ИдентификаторСтроки);
				СтрокиПараметраЗаписи = ПараметрыТаблицШаблонов.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПараметраЗаписи.Количество() > 0 Тогда
					ТекущаяСтрока = СтрокиПараметраЗаписи[0];
					Если ТипЗнч(Запись.Значение) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
						ТекущаяСтрока.Значение = Запись.Значение.Значение;
					Иначе
						ТекущаяСтрока.Значение = Запись.Значение;
					КонецЕсли;
					
					// Применение форматной строки параметра
					РеквизитыПараметров.Сбросить();
					ОтборРеквизиты.Ссылка = Запись.Параметр;
					Если РеквизитыПараметров.НайтиСледующий(ОтборРеквизиты) Тогда
						ТекущаяСтрока.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(Запись, РеквизитыПараметров.ФорматнаяСтрока);
					Иначе
						ТекущаяСтрока.Представление = Строка(ТекущаяСтрока.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРисункиКартинок()
	
	РисункиКартинок.Очистить();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
			ИндексШаблона = Объект.ШаблоныПриема.Индекс(СтрокаШаблона);
			
			НаборЗаписей = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
			НаборЗаписей.Отбор.ИндексШаблона.Установить(ИндексШаблона);
			НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				ДДРисунка = бит_РаботаСФайлами.ПолучитьДвоичныеДанныеФайлаРедактируемогоЭлемента(Запись.ПутьКФайлу, Запись.Файл);
				Если ДДРисунка <> Неопределено Тогда
					НоваяСтрока = РисункиКартинок.Добавить();
					НоваяСтрока.ИдентификаторРисунка = Запись.ИдентификаторЭлемента;
					НоваяСтрока.ИдентификаторСтрокиШаблона = Объект.ШаблоныПриема[ИндексШаблона].ПолучитьИдентификатор();
					НоваяСтрока.АдресРисунка = ПоместитьВоВременноеХранилище(ДДРисунка, УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДобавленныеИзображения()
	
	ДобавленныеИзображения.Очистить();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
			ИндексШаблона = Объект.ШаблоныПриема.Индекс(СтрокаШаблона);
			
			НаборЗаписей = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
			НаборЗаписей.Отбор.ИндексШаблона.Установить(ИндексШаблона);
			НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.ДобавленноеИзображение);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				ДДИзображения = бит_РаботаСФайлами.ПолучитьДвоичныеДанныеФайлаРедактируемогоЭлемента(Запись.ПутьКФайлу, Запись.Файл);
				Если ДДИзображения <> Неопределено Тогда
					НоваяСтрока = ДобавленныеИзображения.Добавить();
					НоваяСтрока.ИдентификаторИзображения = Запись.ИдентификаторЭлемента;
					НоваяСтрока.ИдентификаторСтрокиШаблона = Объект.ШаблоныПриема[ИндексШаблона].ПолучитьИдентификатор();
					НоваяСтрока.АдресИзображения = ПоместитьВоВременноеХранилище(ДДИзображения, УникальныйИдентификатор);
					НоваяСтрока.Расширение = Запись.Расширение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаРеквизитовФормыПриСоздании()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипЗначенияПараметраHTML = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.ПараметрыHTML.Тип, , , , Новый КвалификаторыСтроки());
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Значение", ТипЗначенияПараметраHTML, "ТаблицаПараметров",		"Значение"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Значение", ТипЗначенияПараметраHTML, "ПараметрыТаблицШаблонов",	"Значение"));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументИзПараметровФормыПриСоздании()
	
	Если ТипЗнч(Параметры.ШаблоныПриема) = Тип("Массив") Тогда
		Для Каждого ШаблонПриема Из Параметры.ШаблоныПриема Цикл
			Объект.ШаблоныПриема.Добавить().ШаблонПриема = ШаблонПриема;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Работы) = Тип("Массив") Тогда
		Для Каждого ДанныеРаботы Из Параметры.Работы Цикл
			СтрокаРаботы = Объект.Работы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаботы, ДанныеРаботы);
			СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
			Если СтрокаРаботы.Количество = 0 Тогда
				СтрокаРаботы.Количество = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Клиент.Пустая() Тогда
		Объект.Клиент = Параметры.Клиент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДопустимоеКоличествоШаблоновПриСоздании()
	
	РежимОдногоШаблонаОсмотра = Объект.ШаблоныПриема.Количество() <= 1
								И (УправлениеНастройками.ПараметрУчета("ИспользуетсяРежимВводаПриемаПоОдномуШаблону")
									Или УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ИспользуетсяРежимВводаПриемаПоОдномуШаблону"));
	
	Если РежимОдногоШаблонаОсмотра Тогда
		Если Объект.ШаблоныПриема.Количество() = 0 Тогда
			Объект.ШаблоныПриема.Добавить();
		Иначе
			ШаблонОсмотра = Объект.ШаблоныПриема[0].ШаблонПриема;
		КонецЕсли;
		Элементы.ГруппаШаблоныПриема.Видимость = Ложь;
	Иначе
		Элементы.ШаблонОсмотра.Видимость = Ложь;
		Элементы.ПечатьБезПросмотра.Заголовок = НСтр("ru='Печать страницы'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПечатныеВерсииВХодеЗаписиДокумента(ТекущийОбъект)
	
	// // Еще не актуально
	//Если Не ЗначениеЗаполнено(ТекущийОбъект.Номер) Тогда
	//	ТекущийОбъект.УстановитьНовыйНомер();
	//	Объект.Номер = ТекущийОбъект.Номер;
	//КонецЕсли;
	
	// Сохранения текста шаблона для печати. После записи, чтобы учесть сохраненные планы лечения.
	ТекстПечатиПриема = СформироватьHTMLТекстПечатиОсмотраПолный(Объект, ТаблицаПараметров, ПараметрыТаблицШаблонов, СписокНазначений, ВерсииШаблонов,,, ТекущийОбъект.ШаблоныПриема);
	
	Если ТекущийОбъект.Осмотр <> ТекстПечатиПриема Тогда
		Если Не ЭтоПриемРезультатовАнализа Или ТекущийОбъект.Осмотр = "" Тогда
			ТекущийОбъект.Осмотр = ТекстПечатиПриема;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыТабЧастиШаблоны(ПерезаполнятьЗаполненные = Ложь)
	
	ЕстьНеЗаполненныеСтроки = Объект.ШаблоныПриема.НайтиСтроки(Новый Структура("ВидШаблона", Перечисления.ВидыШаблонов.ПустаяСсылка())).Количество() <> 0;
	
	Если ПерезаполнятьЗаполненные Или ЕстьНеЗаполненныеСтроки Тогда
	
		Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
			ВерсияШаблона = ПолучитьВерсиюШаблонаСервер(СтрокаШаблона.ШаблонПриема);
			СтрокаШаблона.ТекстШаблона = ВерсияШаблона.ТекстHTML;
			СтрокаШаблона.ВидШаблона = ВерсияШаблона.ВидШаблона;
			СтрокаШаблона.ВидДокумента = ВерсияШаблона.ВидДокумента;
			СтрокаШаблона.НеИспользоватьШапкуШаблона = ВерсияШаблона.НеИспользоватьШапкуШаблона;
			СтрокаШаблона.ЭталонныеСтрокиТаблиц = РаботаСШаблонамиHTML.ЭталонныеСтрокиТаблиц(СтрокаШаблона.ТекстШаблона);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПодбораИзРегистраИсследований(МассивКлючейЗаписейРегистра)
	
	ДанныеИсследований = Новый Массив;
	КлючиЗаписейРегистра = Новый ТаблицаЗначений;
	КлючиЗаписейРегистра.Колонки.Добавить("ИД", Метаданные.РегистрыСведений.ЛабораторныеИсследования.Измерения.ИД.Тип);
	КлючиЗаписейРегистра.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.ДействияНадАнализами, ДокументСсылка.Прием"));
	
	НЗ = РегистрыСведений.ЛабораторныеИсследования.СоздатьНаборЗаписей();
	Для Каждого КлючЗаписи Из МассивКлючейЗаписейРегистра Цикл
		
		РегистраторОбъект = КлючЗаписи.Регистратор.ПолучитьОбъект();
		НЗ.Отбор.Регистратор.Установить(КлючЗаписи.Регистратор);
		НЗ.Прочитать();
		Для Каждого Запись Из НЗ Цикл
			
			Если Запись.Ид = КлючЗаписи.Ид Тогда
				
				ДанныеЗаписи = Новый Структура;
				ДанныеЗаписи.Вставить("Ид", Запись.ИД);
				ДанныеЗаписи.Вставить("КодПробы", Запись.КодПробы);
				ДанныеЗаписи.Вставить("Номенклатура", Запись.Номенклатура);
				
				ДанныеИсследований.Добавить(ДанныеЗаписи);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеИсследований;

КонецФункции

&НаКлиенте
Процедура ГруппаСтраницыОсмотраПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра();
	УстановитьОтборГотовыхФраз(Ложь);
	ТекущийЭлементПараметраШаблона = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандОсмотра(ВидШаблона)
	
	ЭтоВидШаблонаHTML = ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон")
						Или Не ЗначениеЗаполнено(ВидШаблона);
						
	Элементы.КнопкаЗаполнитьПоУмолчанию.Доступность	= ЭтоВидШаблонаHTML;
	Элементы.КнопкаЗаполнитьПоПредыдущимЗначениям.Доступность = ЭтоВидШаблонаHTML;
	Элементы.ОткрытьОбработку.Видимость = Не ИзмененияЗапрещены И Не ЭтоВидШаблонаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандОсмотраПоТекущейСтраницеОсмотра()
	
	ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблонаПриема();
	
	Если ИдентификаторСтрокиШаблона <> Неопределено Тогда
		СтрокаШаблона = Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
		УстановитьДоступностьКомандОсмотра(СтрокаШаблона.ВидШаблона);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.Рецепт") Тогда
		ОбновитьКоличествоРецептов();
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоРецептов()
	
	Если Элементы.ГруппаРецепты.Видимость Тогда
	
		КоличествоРецептов = ПолучитьКоличествоРецептовПоПервичномуПриему(?(ЗначениеЗаполнено(Объект.ПервичныйПрием), Объект.ПервичныйПрием, Объект.Ссылка));
		
		Если КоличествоРецептов = 0 Тогда
			Элементы.ОткрытьСписокРецептов.Видимость = Ложь;
		Иначе
			Элементы.ОткрытьСписокРецептов.Видимость = Истина;
			Текст = нСтр("ru='Выписано рецептов: %Количество%'", "ru");
			Элементы.ОткрытьСписокРецептов.Заголовок = СтрЗаменить(Текст, "%Количество%", Строка(КоличествоРецептов));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРецептов(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	ФормаРецепта = ПолучитьФорму("Документ.Рецепт.ФормаСписка",,ЭтаФорма);
	Если ЗначениеЗаполнено(Объект.ПервичныйПрием) Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("Прием.ПервичныйПрием", Объект.ПервичныйПрием, ФормаРецепта.Список);
	Иначе
		РаботаСФормамиКлиент.УстановитьОтборСписка("Прием", Объект.Ссылка, ФормаРецепта.Список);
	КонецЕсли; 
	
	ФормаРецепта.Открыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоРецептовПоПервичномуПриему(Прием, КомандаСпискаРецептов = Неопределено)
	
	КоличествоРецептов = Документы.Рецепт.ПолучитьКоличествоРецептовПриема(Прием);
	
	Если КомандаСпискаРецептов <> Неопределено Тогда 
		Если КоличествоРецептов = 0 Тогда
			КомандаСпискаРецептов.Видимость = Ложь;
		Иначе
			КомандаСпискаРецептов.Видимость = Истина;
			Текст = нСтр("ru='Выписано рецептов: %Количество%'", "ru");
			КомандаСпискаРецептов.Заголовок = СтрЗаменить(Текст, "%Количество%", Строка(КоличествоРецептов));
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоличествоРецептов;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиПланВФактУслуг(Команда)

	ПереносВыполнен = Ложь;
	Для Каждого ИдентификаторСтрокиДерева Из Элементы.Назначения.ВыделенныеСтроки Цикл
		
		ЭлементГруппы = СписокНазначений.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
		Если ЭлементГруппы = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементГруппы.Назначение) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЭлементГруппы.ВидНазначения <> ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты") Тогда
				УидНазначения = Новый УникальныйИдентификатор(ЭлементГруппы.ИдентификаторНазначения);
				СтрокиРабот = Объект.Работы.НайтиСтроки(Новый Структура("Ид, Номенклатура", УидНазначения, ЭлементГруппы.Назначение));
				
				Если СтрокиРабот.Количество() = 0 Тогда
					СтрокаРаботы = Объект.Работы.Добавить();
					СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
					СтрокаРаботы.Номенклатура = ЭлементГруппы.Назначение;
					СтрокаРаботы.Количество = 1;
					СтрокаРаботы.Ид = УидНазначения;
					ПереносВыполнен = Истина;
				Иначе
					СтрокаРаботы = СтрокиРабот[0];
					Если СтрокаРаботы.Количество = 0 
						Или СтрокаРаботы.Количество < ЭлементГруппы.Количество
					Тогда
						СтрокаРаботы.Количество = СтрокаРаботы.Количество + 1;
						ПереносВыполнен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	ОбновитьСписокРаботДокумента();
	
	Если ПереносВыполнен Тогда
		Состояние(НСтр("ru='Услуги добавлены в состав выполненных.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыписатьРецепт(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеНоменклатуры = Новый Массив;
	
	Для Каждого СтрокаГруппы Из СписокНазначений.ПолучитьЭлементы() Цикл
		Если СтрокаГруппы.ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты") Тогда
			ОписаниеНоменклатуры.Добавить(ОписаниеНоменклатурыДляВводаРецепта(СтрокаГруппы));
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеНоменклатуры.Количество() > 1 Тогда
		ВыписатьРецептПоПараметрам(ОписаниеНоменклатуры, Истина);
	ИначеЕсли ОписаниеНоменклатуры.Количество() = 1 Тогда
		ВыписатьРецептПоПараметрам(ОписаниеНоменклатуры[0]);
	Иначе
		ВыписатьРецептПоПараметрам(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыписатьРецептПоНазначению(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Назначения.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из Элементы.Назначения.ВыделенныеСтроки Цикл
		
		СтрокаМедикамента = СписокНазначений.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаМедикамента.ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты")
			И ЗначениеЗаполнено(СтрокаМедикамента.Назначение)
			И (ТипЗнч(СтрокаМедикамента.Назначение) = Тип("СправочникСсылка.Номенклатура")
				Или ТипЗнч(СтрокаМедикамента.Назначение) = Тип("СправочникСсылка.СправочникМеждународныхНепатентованныхНаименований")
				Или ТипЗнч(СтрокаМедикамента.Назначение) = Тип("Строка"))
		Тогда
			МассивНоменклатуры.Добавить(ОписаниеНоменклатурыДляВводаРецепта(СтрокаМедикамента));

		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество() > 1 Тогда 
		ВыписатьРецептПоПараметрам(МассивНоменклатуры, Истина);
	ИначеЕсли МассивНоменклатуры.Количество() = 1 Тогда
		ВыписатьРецептПоПараметрам(МассивНоменклатуры[0]);	
	Иначе
		ВыписатьРецептПоПараметрам(Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьШапку(Команда)
	Элементы.ГруппаШапка.Видимость = Не Элементы.ГруппаШапка.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтрокиШаблонов()
	
	СтрокиШаблоновКУдалению = Новый Массив;
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		Если СтрокаШаблона.ШаблонПриема.Пустая() Тогда
			СтрокиШаблоновКУдалению.Добавить(СтрокаШаблона);
		ИначеЕсли СтрокаШаблона.ВидШаблона <> ПредопределенноеЗначение("Перечисление.ВидыШаблонов.Обработка") Тогда
			// СтрокаШаблона.ТекстДляПечати = "";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаШаблона Из СтрокиШаблоновКУдалению Цикл
		Объект.ШаблоныПриема.Удалить(СтрокаШаблона);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПослеЗаписи()
	
	Если Открыта() Тогда
		// Компенсируем очищение платфомой доп. колонок табл. части Объекта при автосохранении при вводе на основании.
		Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
			Если Не ЗначениеЗаполнено(СтрокаШаблона.ВидШаблона) Тогда
				ШаблонПриемаПриИзменении(СтрокаШаблона);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ЭлектронныеПодписи

#Область ЭлектронныеПодписиКоманды

&НаКлиенте
Процедура ПодписатьВсе(Команда)
	
	УбратьФокусСПоляВводаНаТело();
	ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, , , ТребуетсяПодписаниеРЭМД());
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодписаниюЭМД(Команда)
	
	УбратьФокусСПоляВводаНаТело();
	ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Истина, , ТребуетсяПодписаниеРЭМД());
	
КонецПроцедуры

&НаКлиенте
Процедура РЭМДПроверитьДанныеПередПодписанием(Команда)
	
	УбратьФокусСПоляВводаНаТело();
	ИнтеграцияЕГИСЗ_РЭМДКлиент.ВыполнитьДействие(ЭтотОбъект, "ПроверитьДанныеПередПодписанием");
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписиСлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокПодписей()
	
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписей(Объект.Ссылка, УникальныйИдентификатор, Элементы.ГруппаЭП, ЭлектронныеПодписи,, СводкаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОсмотрПоЭП()
	
	Если Не ЭтоПриемРезультатовАнализа Тогда
		ВерсияДляПечати = Истина;
		Элементы.КнопкаВерсияДляПечати.Пометка = ВерсияДляПечати;
		ПреобразоватьОсмотрВВерсиюДляПечати();
		Элементы.ГруппаПечатьВсегоОсмотра.Видимость = Не РежимОдногоШаблонаОсмотра И ВерсияДляПечати И КоличествоЗаполненныхШаблоновПриема(Объект.ШаблоныПриема) > 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПодписания()
	
	ОбновитьСписокПодписей();
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияПроверкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	СформироватьОсмотрПоЭП();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписиУправлениеДоступностьюПолей

&НаСервере
Процедура ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи()
	
	Прочитать();
	ЗаполнитьДополнительныеРеквизитыТабЧастиШаблоны();
	УстановитьДоступностьВидимость();
	ОбновитьСписокПодписей();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура УстановитьДоступностьВидимость()
	
	Элементы.ГруппаЭП.Видимость = ИспользуютсяЭП И (Объект.ПодписанЭП Или ШаблоныПриемаТребуютПодписания());
	
	ОткрытАвтором = (Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь) И ЗначениеЗаполнено(Объект.Ответственный);
	ОтсутствуютПраваНаИзменение = Не ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());
	
	ИзмененияЗапрещены = ОтсутствуютПраваНаИзменение Или (ИспользуютсяЭП И Объект.ПодписанЭП); // Или Не ОткрытАвтором);
	
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "СтраницаОсмотр",			Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "СтраницаДиагнозы",			Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "СтраницаПланЛечения",		Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Врач",						Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Клиент",					Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "МедицинскаяКарта",			Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Дата",						Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Подбор",					Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "НазначенияКнопкиДобавить",	Не ИзмененияЗапрещены);
	
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ПодменюЗаполнитьОсмотр",							"Доступность", Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ОткрытьОбработку",								"Доступность", Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "КнопкаВерсияДляПечати",							"Доступность", Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ДиагнозыЗаполнитьИзДругогоПриема",				"Доступность", Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ШаблоныПриемаВыбратьШаблоныИзСпециализацийВрача",	"Доступность", Не ИзмененияЗапрещены);
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "КнопкаФилиал",									"Доступность", Не ИзмененияЗапрещены);
	
	УстановитьДоступностьПодчиненныхКнопок(Элементы.Назначения.КоманднаяПанель,						ИзмененияЗапрещены);
	УстановитьДоступностьПодчиненныхКнопок(Элементы.Назначения.КонтекстноеМеню,						ИзмененияЗапрещены);
	УстановитьДоступностьПодчиненныхКнопок(Элементы.СтандартыЛечения.КоманднаяПанель,				ИзмененияЗапрещены);
	УстановитьДоступностьПодчиненныхКнопок(Элементы.ИспользуемыеСтандартыЛечения.КоманднаяПанель,	ИзмененияЗапрещены);
	УстановитьДоступностьПодчиненныхКнопок(Элементы.Работы.КоманднаяПанель,							ИзмененияЗапрещены);

	Если ОтсутствуютПраваНаИзменение Тогда
		ИсключаемыеЭлементы = Новый Массив;
		ИсключаемыеЭлементы.Добавить(Элементы.ПерейтиКПодписаниюЭМД);
		УстановитьДоступностьПодчиненныхКнопок(Элементы.ГруппаКомандЭП, Истина, ИсключаемыеЭлементы);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Закрыт", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ШаблоныПриемаТребуютПодписания()
	
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		СтрокиВерсии = ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", СтрокаШаблона.ШаблонПриема));
		
		Если СтрокиВерсии.Количество() > 0 Тогда
			ВерсияШаблона = СтрокиВерсии[0].ВерсияШаблона;
		Иначе
			ВерсияШаблона = СтрокаШаблона.ШаблонПриема;
		КонецЕсли;
		
		Если ИспользуетсяРЭМД
			И ЗначениеЗаполнено(ВерсияШаблона.ВидДокумента)
			Или ВерсияШаблона.РолиПодписей.Количество() > 0
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьПодчиненныхКнопок(Родитель, ИзмененияЗапрещены, ИсключаемыеЭлементы = Неопределено)
	
	Для Каждого ПодчиненныйЭлемент Из Родитель.ПодчиненныеЭлементы Цикл
		Если ИсключаемыеЭлементы <> Неопределено
			И ИсключаемыеЭлементы.Найти(ПодчиненныйЭлемент) <> Неопределено
		Тогда
			Продолжить;
		КонецЕсли;
		ПодчиненныйЭлемент.Доступность = Не ИзмененияЗапрещены;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу версий новую версию по шаблону, либо обновляет существующую возвращает добавленную версию.
&НаКлиенте
Функция ДополнитьТаблицуВерсийПоШаблону(Шаблон, Дата = Неопределено)
	
	Если Дата = Неопределено Тогда
		Дата = Объект.Дата;
	КонецЕсли;
	
	СтрокиВерсии = ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", Шаблон));
	
	Если ИспользуетсяВерсионирование Тогда
		Версия = ВерсионированиеШаблонов.ПолучитьВерсиюШаблона(Шаблон, Дата);
	Иначе
		Версия = Шаблон;
	КонецЕсли;
	
	Если СтрокиВерсии.Количество() > 0 Тогда
		СтрокиВерсии[0].ВерсияШаблона = Версия;	
	Иначе
		НоваяСтрока = ВерсииШаблонов.Добавить();
		НоваяСтрока.ШаблонПриема = Шаблон;
		НоваяСтрока.ВерсияШаблона = Версия;
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

&НаСервере
Функция ДополнитьТаблицуВерсийПоШаблонуСервер(Шаблон, Дата = Неопределено)
	
	Если Дата = Неопределено Тогда
		Дата = Объект.Дата;
	КонецЕсли;
	
	СтрокиВерсии = ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", Шаблон));
	
	Если ИспользуетсяВерсионирование Тогда
		Версия = ВерсионированиеШаблонов.ПолучитьВерсиюШаблона(Шаблон, Дата);
	Иначе
		Версия = Шаблон;
	КонецЕсли;
	
	Если СтрокиВерсии.Количество() > 0 Тогда
		СтрокиВерсии[0].ВерсияШаблона = Версия;	
	Иначе
		НоваяСтрока = ВерсииШаблонов.Добавить();
		НоваяСтрока.ШаблонПриема = Шаблон;
		НоваяСтрока.ВерсияШаблона = Версия;
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

// Возвращает версию по шаблону, в случае отсутствия - добавляет.
&НаКлиенте
Функция ПолучитьВерсиюШаблона(Шаблон)
	
	СтрокиВерсии = ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", Шаблон));
	Если СтрокиВерсии.Количество() > 0 Тогда
		Возврат СтрокиВерсии[0].ВерсияШаблона;
	Иначе
		Возврат ДополнитьТаблицуВерсийПоШаблону(Шаблон);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьВерсиюШаблонаСервер(Шаблон)
	
	СтрокиВерсии = ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", Шаблон));
	Если СтрокиВерсии.Количество() > 0 Тогда
		Возврат СтрокиВерсии[0].ВерсияШаблона;
	Иначе
		Возврат ДополнитьТаблицуВерсийПоШаблонуСервер(Шаблон);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗнакТочки(Команда)
	Элементы.ЗнакТочка.Пометка = Не Элементы.ЗнакТочка.Пометка;
	Элементы.ЗнакЗапятая.Пометка=Ложь;
	Элементы.ЗнакТочкаСЗапятой.Пометка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗнакЗапятой(Команда)
	Элементы.ЗнакЗапятая.Пометка = Не Элементы.ЗнакЗапятая.Пометка;
	Элементы.ЗнакТочка.Пометка=Ложь;
	Элементы.ЗнакТочкаСЗапятой.Пометка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗнакТочкиСЗапятой(Команда)
	Элементы.ЗнакТочкаСЗапятой.Пометка = Не Элементы.ЗнакТочкаСЗапятой.Пометка;
	Элементы.ЗнакЗапятая.Пометка=Ложь;
	Элементы.ЗнакТочка.Пометка=Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура ГотовыеФразыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблонаПриема();
	Если ИдентификаторСтрокиШаблона = Неопределено
		Или ТекущийЭлементПараметраШаблона = Неопределено
		Или ТекущийЭлементПараметраШаблона.ЭлементHTML = Неопределено
		Или ИдентификаторСтрокиШаблона <> ТекущийЭлементПараметраШаблона.ИдентификаторСтрокиШаблона
	Тогда
		УстановитьОтборГотовыхФраз(Ложь);
		Возврат;
	КонецЕсли;
		
	ДокументHTML = Элементы[ТекущийЭлементПараметраШаблона.ИмяПоляШаблона].Документ;
	ЭлементHTML = ПолучитьТекущийЭлементШаблонаHTML(ТекущийЭлементПараметраШаблона.ЭлементHTML, ТекущийЭлементПараметраШаблона.ИмяПоляШаблона);
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	
	ТекстФразы = ПолучитьТекстФразы(ВыбраннаяСтрока);
	
	ИсходныйТекст = ЭлементHTML.value;
	
	Если Элементы.ЗнакЗапятая.Пометка Тогда
		Если ЗначениеЗаполнено(ИсходныйТекст) Тогда
			ТекстФразы = ", " + СокрЛП(ТекстФразы);
		Иначе 
			ТекстФразы = СокрЛП(ТекстФразы);
		КонецЕсли;
	ИначеЕсли Элементы.ЗнакТочкаСЗапятой.Пометка Тогда
		ТекстФразы = " " + СокрЛП(ТекстФразы) + ";";
	ИначеЕсли Элементы.ЗнакТочка.Пометка Тогда
		ТекстФразы = " " + СокрЛП(ТекстФразы) + ".";	
	КонецЕсли;
	
	Если РаботаСHTMLКлиентСервер.ЭтоВнешнийОбъект(ЭлементHTML) Тогда
		ВставитьТекстВTextArea_selectionStart(ЭлементHTML, ТекстФразы);
	Иначе
		Попытка
			ВставитьТекстВTextArea_Range(ДокументHTML, ЭлементHTML, ТекстФразы);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		РаботаСШаблонамиHTMLКлиент.УстановитьПризнакИзмененияПоляВвода(ЭлементHTML);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВTextArea_selectionStart(ЭлементHTML, Текст)
	
	ТекЗначение = ЭлементHTML.value;
	ДлинаЗначения = СтрДлина(ТекЗначение);
	ЛеваяЧасть = Лев(ТекЗначение, ЭлементHTML.selectionStart) + Текст;
	ПраваяЧасть = Прав(ТекЗначение, ДлинаЗначения - ЭлементHTML.selectionEnd);
	ЭлементHTML.value = ЛеваяЧасть + ПраваяЧасть;
	ЭлементHTML.selectionStart = СтрДлина(ЛеваяЧасть);
	ЭлементHTML.selectionEnd = ЭлементHTML.selectionStart;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВTextArea_Range(ДокументHTML, ЭлементHTML, Текст)
	
	Если НРег(ЭлементHTML.type) = "text" 
		Или НРег(ЭлементHTML.type) = "none"
		Или НРег(ЭлементHTML.type) = "textarea"
		Или НРег(ЭлементHTML.type) = "input"
	Тогда 
		Выделение = ЭлементHTML;
		Выделение.value = Выделение.value + Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаВставить(Команда)
	
	мсСтр = СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИмяСтраницыФормы", Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница.Имя));
	Если мсСтр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляШаблона = мсСтр[0].ИмяПоляДокумента;
	ДокументHTML = Элементы[ИмяПоляШаблона].Документ;
	ЭлементHTML = ДокументHTML.activeElement;
	
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	
	ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ЭлементHTML);
	Если ЭлементHTML = Неопределено Или (ТегЭлемента <> "TEXTAREA" И ТегЭлемента <> "INPUT") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументHTML.queryCommandSupported("paste") Тогда 
		ДокументHTML.execCommand("paste");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаОчистить(Команда)
	
	Если ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра, ИдентификаторСтрокиШаблона", ДанныеЭлементаHTMLДляКонтекстногоМеню.id, ИдентификаторСтрокиШаблонаПриема()));
	Если мсСтрокаПараметра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПоУИД = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Элементы[ДанныеЭлементаHTMLДляКонтекстногоМеню.ИмяЭлемента].Документ, ДанныеЭлементаHTMLДляКонтекстногоМеню.id);
	Если ЭлементыПоУИД.length < ДанныеЭлементаHTMLДляКонтекстногоМеню.НомерЭлемента + 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементHTMLДляКонтекстногоМеню = ЭлементыПоУИД[ДанныеЭлементаHTMLДляКонтекстногоМеню.НомерЭлемента];
	РаботаСШаблонамиHTMLКлиент.ОчиститьЗначениеПараметраHTMLИнтерактивно(ЭтаФорма, ДанныеЭлементаHTMLДляКонтекстногоМеню.ИмяЭлемента, ЭлементHTMLДляКонтекстногоМеню, мсСтрокаПараметра[0], КешЗначенийВыбора, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаЗаполнитьПоУмолчанию(Команда)
	
	Если ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиШаблонаПриема = ИдентификаторСтрокиШаблонаПриема();
	
	мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра, ИдентификаторСтрокиШаблона", ДанныеЭлементаHTMLДляКонтекстногоМеню.id, ИдентификаторСтрокиШаблонаПриема));
	Если мсСтрокаПараметра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПоУИД = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Элементы[ДанныеЭлементаHTMLДляКонтекстногоМеню.ИмяЭлемента].Документ, ДанныеЭлементаHTMLДляКонтекстногоМеню.id);
	Если ЭлементыПоУИД.length < ДанныеЭлементаHTMLДляКонтекстногоМеню.НомерЭлемента + 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементHTMLДляКонтекстногоМеню = ЭлементыПоУИД[ДанныеЭлементаHTMLДляКонтекстногоМеню.НомерЭлемента];
	
	ЗначенияПоУмолчанию = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(ТаблицаПараметров, КешЗависимыхПараметров, Объект, мсСтрокаПараметра[0].Параметр, ИдентификаторСтрокиШаблонаПриема,, Истина);
	Если ЗначенияПоУмолчанию.Количество() > 0 Тогда
		РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(ТаблицаПараметров, ЗначенияПоУмолчанию, ИдентификаторСтрокиШаблонаПриема);
		Для Каждого РассчитанноеЗначение Из ЗначенияПоУмолчанию Цикл
			РаботаСШаблонамиHTMLКлиент.УстановитьЗначениеПредставлениеПараметраHTMLИнтерактивно(РассчитанноеЗначение, ЭлементHTMLДляКонтекстногоМеню.ownerDocument, КешЗначенийВыбора);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстФразы(Ссылка)
	
	ТекстФразы = "";
	
	Пока ЗначениеЗаполнено(Ссылка) Цикл
		
		Если ЗначениеЗаполнено(Ссылка.Текст) Тогда
			ТекстФразы = Ссылка.Текст + " " + ТекстФразы;
		КонецЕсли;
		
		Ссылка = Ссылка.Родитель;
			
	КонецЦикла; 
	
	Возврат ТекстФразы;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборГотовыхФраз(ИспользоватьГФ = Неопределено, Параметр = Неопределено)
	
	ИспользоватьГФПред = ГотовыеФразы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьГотовыеФразы")).Значение;	
	Если ИспользоватьГФ <> Неопределено И ИспользоватьГФПред <> ИспользоватьГФ Тогда 
		ГотовыеФразы.Параметры.УстановитьЗначениеПараметра("ИспользоватьГотовыеФразы", ИспользоватьГФ);
	КонецЕсли;
	
	ПараметрПред = ГотовыеФразы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Параметр")).Значение;
	Если Параметр <> Неопределено И ПараметрПред <> Параметр Тогда
		ГотовыеФразы.Параметры.УстановитьЗначениеПараметра("Параметр", Параметр);
	КонецЕсли;
	
	ТолькоЛичныеПараметр = ГотовыеФразы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТолькоЛичные"));
	Если Элементы.ГотовыеФразыГотовыеФразыТолькоЛичные.Пометка <> ТолькоЛичныеПараметр.Значение Или Не ТолькоЛичныеПараметр.Использование Тогда 
		ГотовыеФразы.Параметры.УстановитьЗначениеПараметра("ТолькоЛичные", Элементы.ГотовыеФразыГотовыеФразыТолькоЛичные.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГотовыеФразыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Параметр = ГотовыеФразы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Параметр")).Значение;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",Новый Структура("Параметр, Родитель", Параметр, Элемент.ТекущийРодитель));
	ОткрытьФорму("Справочник.СоставныеФразы.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТекстИзГФ(Команда)
	
	мсСтр = СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИмяСтраницыФормы", Элементы.ГруппаСтраницыОсмотра.ТекущаяСтраница.Имя));
	Если мсСтр.Количество() > 0 Тогда
		ПолеHTMLДокумента = Элементы[мсСтр[0].ИмяПоляДокумента];
		ДокументHTML = ПолеHTMLДокумента.Документ;
		ЭлементHTML = ДокументHTML.activeElement;
		
		ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ЭлементHTML);
		Если ЭлементHTML = Неопределено Тогда
			УстановитьОтборГотовыхФраз(Ложь);
			Возврат;
		КонецЕсли;
		
		мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра, ИдентификаторСтрокиШаблона", ЭлементHTML.id, мсСтр[0].ИдентификаторСтрокиШаблона));
		Если мсСтрокаПараметра.Количество() > 0 Тогда
			СтрокаПараметра = мсСтрокаПараметра[0];
			КонПозиция = ЭлементHTML.selectionStart;
			ПолныйТекст = ЭлементHTML.value;
			Если КонПозиция > 0 Тогда
				НачПозиция = НайтиПозициюБлижайшегоСловаСКонца(Лев(ПолныйТекст, КонПозиция));
				ТекстПоиска = Сред(ПолныйТекст, НачПозиция, КонПозиция - НачПозиция + 1);
				ДлинаТекстаПоиска = СтрДлина(ТекстПоиска);
				
				Пользователь = ГотовыеФразы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Пользователь")).Значение;
				Параметр = ГотовыеФразы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Параметр")).Значение;
				мсГотовыеФразы = НайтиГотовыеФразыПоТексту(ТекстПоиска, Пользователь, Параметр);
				Если мсГотовыеФразы.Количество() > 0 Тогда 
					Если мсГотовыеФразы.Количество() = 1 Тогда 
						ВыбранноеЗначение = мсГотовыеФразы[0].Текст;
					Иначе	
						СписокВыбора = Новый СписокЗначений;
						Для Каждого элГотоваяФраза Из мсГотовыеФразы Цикл
							СписокВыбора.Добавить(элГотоваяФраза.Текст, элГотоваяФраза.Наименование);
						КонецЦикла;
						ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, ПолеHTMLДокумента);
						Если ВыбранноеЗначение <> Неопределено Тогда
							ВыбранноеЗначение = ВыбранноеЗначение.Значение;
						КонецЕсли;
					КонецЕсли;
					
					Если ВыбранноеЗначение <> Неопределено Тогда
						
						ЭлементHTML.value = Лев(ПолныйТекст, КонПозиция)
										  + Прав(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение) - ДлинаТекстаПоиска)
										  + Прав(ПолныйТекст, СтрДлина(ПолныйТекст) - КонПозиция);
						СтрокаПараметра.Значение = ЭлементHTML.value;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПозициюБлижайшегоСловаСКонца(Знач Текст)
	
	ШаблонСимвОкончанияСлова = ",.; " + Символы.ПС + Символы.НПП;
	Сч = СтрДлина(Текст);
	Пока Сч > 0 Цикл
		ТекСимвол = Сред(Текст, Сч, 1);
		Если Найти(ШаблонСимвОкончанияСлова, ТекСимвол) Тогда
			Сч = Сч + 1;
			Прервать;
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат Сч;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиГотовыеФразыПоТексту(Текст, Пользователь, Параметр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникСоставныеФразы.Ссылка,
	|	СправочникСоставныеФразы.ВерсияДанных,
	|	СправочникСоставныеФразы.ПометкаУдаления,
	|	СправочникСоставныеФразы.Предопределенный,
	|	СправочникСоставныеФразы.Родитель,
	|	СправочникСоставныеФразы.Наименование,
	|	СправочникСоставныеФразы.Текст,
	|	СправочникСоставныеФразы.Пользователь,
	|	СправочникСоставныеФразы.Параметр
	|ИЗ
	|	Справочник.СоставныеФразы КАК СправочникСоставныеФразы
	|ГДЕ
	|	(СправочникСоставныеФразы.Параметр = &Параметр
	|			ИЛИ СправочникСоставныеФразы.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыHTML.ПустаяСсылка))
	|	И (СправочникСоставныеФразы.Пользователь = &Пользователь
	|			ИЛИ СправочникСоставныеФразы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	И СправочникСоставныеФразы.Наименование ПОДОБНО &ТекстПоиска";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Параметр", Параметр);
	Запрос.УстановитьПараметр("ТекстПоиска", Текст + "%");
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());	
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьГотовыхФраз()
	
	ТолькоЛичные = ОбщегоНазначенияСервер.НастройкиИзХранилища("Прием", "ГотовыеФразыТолькоЛичные");
	ТолькоЛичные = ?(ТолькоЛичные = Неопределено, Ложь, ТолькоЛичные);
	СкрытьГотовыеФразы = ОбщегоНазначенияСервер.НастройкиИзХранилища("Прием", "ГотовыеФразыСкрыть");
	СкрытьГотовыеФразы = ?(СкрытьГотовыеФразы = Неопределено, Ложь, СкрытьГотовыеФразы);
		
	Элементы.ГотовыеФразыГотовыеФразыТолькоЛичные.Пометка = ТолькоЛичные;
	Элементы.ГотовыеФразыСкрыть.Пометка = СкрытьГотовыеФразы;
	Элементы.ГруппаГотовыеФразы.Видимость = Не СкрытьГотовыеФразы;
	
КонецПроцедуры

&НаКлиенте
Процедура ГотовыеФразыТолькоЛичные(Команда)
	
	Элементы.ГотовыеФразыГотовыеФразыТолькоЛичные.Пометка = Не Элементы.ГотовыеФразыГотовыеФразыТолькоЛичные.Пометка;
	ОбщегоНазначенияСервер.НастройкиВХранилище("Прием", "ГотовыеФразыТолькоЛичные", Элементы.ГотовыеФразыГотовыеФразыТолькоЛичные.Пометка);
	УстановитьОтборГотовыхФраз();
	
КонецПроцедуры

&НаКлиенте
Процедура ГотовыеФразыСкрыть(Команда)
	
	Элементы.ГотовыеФразыСкрыть.Пометка = Не Элементы.ГотовыеФразыСкрыть.Пометка;
	ОбщегоНазначенияСервер.НастройкиВХранилище("Прием", "ГотовыеФразыСкрыть", Элементы.ГотовыеФразыСкрыть.Пометка);
	Элементы.ГруппаГотовыеФразы.Видимость = Не Элементы.ГотовыеФразыСкрыть.Пометка;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьШаблоныДополненияПриемаПоАнализам(ШаблоныПриема, РаботыПриема, ИспользуетсяВерсионированиеШаблоновПриема, Дата)
	
	Результат = Новый Структура("НедостающиеШаблоны, ВерсииШаблонов");
	НедостающиеШаблоны = Новый Массив;
	ВерсииШаблонов = Новый Соответствие;
	
	ТаблицаРаботыПриема = Новый ТаблицаЗначений;
	ТаблицаРаботыПриема.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для Каждого Номенклатура Из РаботыПриема Цикл
		ТаблицаРаботыПриема.Добавить().Номенклатура = Номенклатура;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", ТаблицаРаботыПриема);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Номенклатура
	|ПОМЕСТИТЬ ТабНом
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.ИндивидуальныйШаблонОсмотра КАК ШаблонПриема,
	|	КОЛИЧЕСТВО(ТабНом.Номенклатура) КАК Количество
	|ПОМЕСТИТЬ ШаблоныРабот
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабНом КАК ТабНом
	|		ПО СправочникНоменклатура.Ссылка = ТабНом.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.ИндивидуальныйШаблонОсмотра <> ЗНАЧЕНИЕ(Справочник.ШаблоныHTML.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.ИндивидуальныйШаблонОсмотра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныРабот.ШаблонПриема,
	|	ШаблоныРабот.ШаблонПриема.ТекстHTML КАК ТекстШаблона,
	|	ШаблоныРабот.ШаблонПриема.ВидШаблона КАК ВидШаблона,
	|	ШаблоныРабот.Количество
	|ИЗ
	|	ШаблоныРабот КАК ШаблоныРабот"
	;
	ШаблоныРабот = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ШаблонПриема Из ШаблоныПриема Цикл
		
		СтрШаблон = ШаблоныРабот.Найти(ШаблонПриема, "ШаблонПриема");
		Если СтрШаблон <> Неопределено Тогда
			СтрШаблон.Количество = СтрШаблон.Количество - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ШаблоныРабот Цикл
		Если СтрокаТаблицы.Количество > 0 Тогда
			Для Сч = 1 По СтрокаТаблицы.Количество Цикл
				
				СтруктураСтроки = Новый Структура("ШаблонПриема,ТекстШаблона, ВидШаблона");
				
				Если ИспользуетсяВерсионированиеШаблоновПриема Тогда
					Версия = ВерсионированиеШаблонов.ПолучитьВерсиюШаблона(СтрокаТаблицы.ШаблонПриема, Дата);
				Иначе
					Версия = СтрокаТаблицы.ШаблонПриема;
				КонецЕсли;
				
				ВерсииШаблонов.Вставить(СтрокаТаблицы.ШаблонПриема, Версия);
				
				СтруктураСтроки = Новый Структура("ШаблонПриема,ТекстШаблона, ВидШаблона",
												  Версия, СтрокаТаблицы.ТекстШаблона, СтрокаТаблицы.ВидШаблона);
				НедостающиеШаблоны.Добавить(СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Результат.НедостающиеШаблоны = НедостающиеШаблоны;
	Результат.ВерсииШаблонов	 = ВерсииШаблонов;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланЛечения()
	
	мНазначения = ПолучитьНазначенияПланаЛечения(Объект.ПервичныйПрием);
	Для Каждого Назначение Из мНазначения Цикл
		ЗаполнитьЗначенияСвойств(СписокНазначений.ПолучитьЭлементы().Добавить(), Назначение);
	КонецЦикла;
	
КонецПроцедуры

// Для вызова в серверном контексте, например, ПриСозданииНаСервере()
&НаСервере
Процедура ЗаполнитьПланЛеченияНаСервере()
	
	мНазначения = ПолучитьНазначенияПланаЛечения(Объект.ПервичныйПрием);
	Для Каждого Назначение Из мНазначения Цикл
		ЗаполнитьЗначенияСвойств(СписокНазначений.ПолучитьЭлементы().Добавить(), Назначение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНазначенияПланаЛечения(ПервичныйПрием)
	
	ТаблицаПланаЛечения = ДокументыПриемаСервер.ПолучитьНазначенияПриема(ПервичныйПрием);
	
	КолонкиСортировки = "ПорядокЭлемента";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПланаЛечения.ПорядокЭлемента КАК ПорядокЭлемента,
		|	ТаблицаПланаЛечения.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаПланаЛечения КАК ТаблицаПланаЛечения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(ТаблицаПланаЛечения.Номенклатура) КАК Количество,
		|	ТаблицаПланаЛечения.ПорядокЭлемента КАК ПорядокЭлемента
		|ИЗ
		|	ВТ КАК ТаблицаПланаЛечения
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПланаЛечения.ПорядокЭлемента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаПланаЛечения", ТаблицаПланаЛечения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество > 1 Тогда
			КолонкиСортировки = "ВидНазначения, ПорядокЭлемента";
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПланаЛечения.Сортировать(КолонкиСортировки);
	
	мНазначения = Новый Массив;
	
	Для Каждого Назначение Из ТаблицаПланаЛечения Цикл
		СтруктураНазначения = Новый Структура("СуточнаяДоза, КурсоваяДоза, Дозировка, ПриемовВДень, Дата, ВидНазначения, Сотрудник, Количество, Факт, Комментарий, ДокументРегистратор, ЕдиницаИзмерения, ДатаОкончания", 0, 0, 0, 0);
		ЗаполнитьЗначенияСвойств(СтруктураНазначения, Назначение);
		
		СтруктураНазначения.Вставить("ИдентификаторНазначения",	Назначение.ИдентификаторЭлемента);
		СтруктураНазначения.Вставить("ДокументВыполнения",		Назначение.СписокРегистраторов);
		СтруктураНазначения.Вставить("ДатаНачалаБезВремени",	СтруктураНазначения.Дата);
		СтруктураНазначения.Вставить("Назначение",				Назначение.Номенклатура);
		
		РассчитатьДозыСтрокиМедикаментов(СтруктураНазначения);
		мНазначения.Добавить(СтруктураНазначения);
	КонецЦикла;
	
	Возврат мНазначения;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьПланЛеченияПоПервичномуПриемуСУчетомВведенных()
	
	// Список строк плана лечения, которые пользователь ввёл в этом документе
	НазначенияЭтогоДокумента = Новый Массив;
	Для Каждого Назначение Из СписокНазначений.ПолучитьЭлементы() Цикл
		
		Если 	Назначение.ДокументРегистратор = Объект.Ссылка
			Или Не ЗначениеЗаполнено(Назначение.ДокументРегистратор)
		Тогда
			НазначенияЭтогоДокумента.Добавить(Назначение);
		КонецЕсли;
	КонецЦикла;
	
	// Перезаполнение по случаю обращения (первичному приему)
	СписокНазначений.ПолучитьЭлементы().Очистить();
	ЗаполнитьПланЛечения();
	
	// Добавление строк плана лечения, которые пользователь ввёл в этом документе к перезаполненному плану лечения.
	СтрокиПлана = СписокНазначений.ПолучитьЭлементы();
	КолСтрокПлана = СтрокиПлана.Количество();
	Для Каждого Назначение Из НазначенияЭтогоДокумента Цикл
		
		УжеВПлане = Ложь;
		Для Инд = 0 По (КолСтрокПлана - 1) Цикл
			Если Назначение.ИдентификаторНазначения = СтрокиПлана[Инд].ИдентификаторНазначения Тогда
				УжеВПлане = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не УжеВПлане Тогда
			НоваяСтрока = СтрокиПлана.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Назначение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНазначение(Номенклатура, ВидНазначения)
	
	НовоеНазначение = СписокНазначений.ПолучитьЭлементы().Добавить();
	НовоеНазначение.Назначение = Номенклатура;
	НовоеНазначение.ВидНазначения = ВидНазначения;
	НовоеНазначение.Количество = 1;
	НовоеНазначение.ИдентификаторНазначения = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияДатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
	ТекущиеДанные.ДатаНачалаБезВремени = ТекущиеДанные.Дата;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Дата)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания)
	Тогда
		ТекущиеДанные.ДатаОкончания = Дата(1,1,1);
	Иначе
		ОбработкаИзмененияСвязкиДатыКоличестваНазначения(Элемент, Элементы.Назначения.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначенияДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания)
		И Не ЗначениеЗаполнено(ТекущиеДанные.Дата)
	Тогда
		ТекущиеДанные.Дата = Мин(Объект.Дата, ТекущиеДанные.ДатаОкончания);
	КонецЕсли;
	ОбработкаИзмененияСвязкиДатыКоличестваНазначения(Элемент, Элементы.Назначения.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПриемовВДеньПриИзменении(Элемент)
	ОбработкаИзмененияСвязкиДатыКоличестваНазначения(Элемент, Элементы.Назначения.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НазначенияКоличествоПриИзменении(Элемент)
	ОбработкаИзмененияСвязкиДатыКоличестваНазначения(Элемент, Элементы.Назначения.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСвязкиДатыКоличестваНазначения(Элемент, ДанныеНазначения)
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ДатаОкончания)
		И ЗначениеЗаполнено(ДанныеНазначения.Дата)
		И ЗначениеЗаполнено(ДанныеНазначения.Количество)
		И Элемент <> Элементы.НазначенияПриемовВДень
	Тогда
		ДлинаКурса = (ДанныеНазначения.ДатаОкончания - ДанныеНазначения.Дата)/86400 + 1;
		Если ДлинаКурса > 0 Тогда
			ДанныеНазначения.ПриемовВДень = Окр(ДанныеНазначения.Количество / ДлинаКурса, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(ДанныеНазначения.ПриемовВДень)
		И ЗначениеЗаполнено(ДанныеНазначения.Количество)
		И ЗначениеЗаполнено(ДанныеНазначения.Дата)
		И Элемент <> Элементы.НазначенияДатаОкончания
	Тогда
		ДлинаКурса = Окр(ДанныеНазначения.Количество / ДанныеНазначения.ПриемовВДень, 0, РежимОкругления.Окр15как10);
		Если ДлинаКурса > 0 Тогда
			ДанныеНазначения.ДатаОкончания = ДанныеНазначения.Дата + (ДлинаКурса - 1)*86400;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Элементы.НазначенияКонтекстноеМенюПросмотрВыполнения.Доступность = ТекущиеДанные.ДокументВыполнения.Количество() <> 0;
		Элементы.НазначенияКонтекстноеМенюВыписатьРецептПоНазначению.Доступность = ТекущиеДанные.ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты")
			И (ТипЗнч(ТекущиеДанные.Назначение) = Тип("СправочникСсылка.Номенклатура")
				Или ТипЗнч(ТекущиеДанные.Назначение) = Тип("СправочникСсылка.СправочникМеждународныхНепатентованныхНаименований")
				Или ТипЗнч(ТекущиеДанные.Назначение) = Тип("Строка"));
			
		РазделитьСтрокуПланаДоступность = Истина;
		Если ТекущиеДанные.Количество < 2
			Или ЗначениеЗаполнено(ТекущиеДанные.Дозировка)
		Тогда
			РазделитьСтрокуПланаДоступность = Ложь;
		КонецЕсли;
		
	Иначе
		РазделитьСтрокуПланаДоступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		НоваяСтрока = СписокНазначений.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ИдентификаторНазначения = Новый УникальныйИдентификатор;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Процедура");
		НоваяСтрока.Назначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		НоваяСтрока.НоваяСтрока = Истина;
		Элементы.Назначения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Назначения.ИзменитьСтроку();
		
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение.Количество() > 0 Тогда
		Для Каждого Значение Из ВыбранноеЗначение Цикл
	    	ДобавитьНазначение(Значение.Ссылка, Значение.ВидНазначения);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВыполнения(Команда)
	
	Если Элементы.Назначения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Назначения.ТекущиеДанные.ДокументВыполнения.Количество() = 1 Тогда
		ДокументВыполнения = Элементы.Назначения.ТекущиеДанные.ДокументВыполнения[0].Значение;
		Если ДокументВыполнения = Объект.Ссылка Тогда
			ПоказатьПредупреждение(,НСтр("ru='Назначение выполнено текущим документом'"), 15, НСтр("ru='Документ выполнения уже открыт'"));
		Иначе
			ОткрытьЗначение(ДокументВыполнения);
		КонецЕсли;
	Иначе
		ВыбранноеЗначение = ВыбратьИзМеню(Элементы.Назначения.ТекущиеДанные.ДокументВыполнения);
		Если ВыбранноеЗначение <> Неопределено Тогда
			ОткрытьЗначение(ВыбранноеЗначение.Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьИзмененияПлана(Команда)
	
	СписокНазначений.ПолучитьЭлементы().Очистить();
	ЗаполнитьПланЛечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОчередь(Команда)
	
	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		
		ЗначенияЗаполнения = CRMСервер.ПолучитьЗначенияЗаполненияДляЛистаОжиданияПоОбъекту(Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Клиент, ДатаНачала", Объект.Клиент, ТекущаяДата());
		
		Если Команда.Имя = "ДобавитьВОчередьПоПлануЛечения" Тогда
			
			СписокНоменклатуры = Новый СписокЗначений;
			ПлановаяДата = Неопределено;
			Сотрудник = Неопределено;
			Для Каждого ИдентификаторСтрокиДерева Из Элементы.Назначения.ВыделенныеСтроки Цикл
				
				ЭлементГруппы = СписокНазначений.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
				Если ЭлементГруппы = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементГруппы.Назначение)
					Или	ТипЗнч(ЭлементГруппы.Назначение) <> Тип("СправочникСсылка.Номенклатура") Тогда
					Продолжить;
				КонецЕсли;
				
				ВидНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементГруппы.Назначение, "ВидНоменклатуры");
				Если ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
					Продолжить;
				КонецЕсли;	
				
				СписокНоменклатуры.Добавить(ЭлементГруппы.Назначение);
				Если ЗначениеЗаполнено(ЭлементГруппы.Дата) И ПлановаяДата = Неопределено Тогда 
					ПлановаяДата = ЭлементГруппы.Дата;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭлементГруппы.Сотрудник) И Сотрудник = Неопределено Тогда 
					Сотрудник = ЭлементГруппы.Сотрудник;
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыФормы.Вставить("СписокНоменклатуры", СписокНоменклатуры);
			Если ПлановаяДата <> Неопределено Тогда 
				ПараметрыФормы.Вставить("ПлановаяДата", ПлановаяДата);
			КонецЕсли;
			Если Сотрудник <> Неопределено Тогда 
				ЗначенияЗаполнения.Вставить("Сотрудник", Сотрудник);
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		Если Команда.Имя = "ДобавитьВОчередьПоПлануЛечения"
			Или CRMСервер.ПолучитьАктуальныеДокументыОчередиКлиента(Объект.Клиент).Количество() = 0
		Тогда
			ОткрытьФорму("Документ.ЛистОжидания.Форма.ФормаБыстрогоСоздания", ПараметрыФормы);
		Иначе
			// Показываем список уже созданных листов ожидания по этому приёму
			ОткрытьФорму("Документ.ЛистОжидания.ФормаСписка", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуПоПлануЛечения(Команда)
	
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма, Истина) Тогда
		
		мсДанныеДляЗаявки = Новый Массив;
		мсСотрудники = Новый Массив;
		ПлановаяДата = Неопределено;
		ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();
		Сотрудник = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийПользователь, "Сотрудник");
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда  
			Сотрудник = Объект.Врач;	
		КонецЕсли;	
		Для Каждого ИдентификаторСтрокиДерева Из Элементы.Назначения.ВыделенныеСтроки Цикл
			
			ЭлементГруппы = СписокНазначений.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
			Если ЭлементГруппы = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭлементГруппы.Назначение) Или
				ТипЗнч(ЭлементГруппы.Назначение) <> Тип("СправочникСсылка.Номенклатура") Тогда
				Продолжить;
			КонецЕсли;
			
			ВидНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементГруппы.Назначение, "ВидНоменклатуры");
			Если ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
				Продолжить;
			КонецЕсли;	
				
			ДанныеДляЗаявки = Новый Структура;
			ДанныеДляЗаявки.Вставить("Номенклатура", ЭлементГруппы.Назначение);
			Если ЗначениеЗаполнено(ЭлементГруппы.Сотрудник)
				И ЭлементГруппы.Сотрудник <> Сотрудник 	
			Тогда 
				ДанныеДляЗаявки.Вставить("Сотрудник", ЭлементГруппы.Сотрудник);
			КонецЕсли;
			мсДанныеДляЗаявки.Добавить(ДанныеДляЗаявки);
			стрСотрудник = ?(ЗначениеЗаполнено(ЭлементГруппы.Сотрудник), ЭлементГруппы.Сотрудник, Сотрудник);
			Если мсСотрудники.Найти(стрСотрудник) = Неопределено Тогда 
				мсСотрудники.Добавить(стрСотрудник);	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементГруппы.Дата) И ПлановаяДата = Неопределено Тогда 
				ПлановаяДата = ЭлементГруппы.Дата;
			КонецЕсли;
			
		КонецЦикла;
		
		Если мсСотрудники.Количество() <> 0 Тогда 
			Сотрудник = ?(мсСотрудники.Найти(Сотрудник) = Неопределено, мсСотрудники[0], Сотрудник);
		КонецЕсли;
		
		Если ПлановаяДата = Неопределено Тогда 
			ПлановаяДата = НачалоДня(ТекущаяДата()) + ОбщегоНазначения.ВремяВСекунды(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы"));
		Иначе
			ПлановаяДата = Макс(ПлановаяДата, НачалоДня(ПлановаяДата) + ОбщегоНазначения.ВремяВСекунды(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы")));
		КонецЕсли;
			
		Если мсСотрудники.Количество() < 2 Тогда 
			ПараметрыЗаписи = Новый Структура("ДокументЗаписи, Клиент, Работы, ЛистОжидания", Объект.Ссылка, Объект.Клиент, мсДанныеДляЗаявки);
			ПараметрыЗаписи.Вставить("ДанныеЛистаОжидания", Новый Структура("ДатаНачала, ДатаОкончания, Сотрудник, Специализация", 
				ПлановаяДата, ПлановаяДата, Сотрудник));
			КалендарьПланированияКлиент.ОткрытьАктивизироватьКалендарьПланирования();
			Оповестить("НамерениеЗаписиПоДокументу", ПараметрыЗаписи, ПараметрыЗаписи.ДокументЗаписи);
		Иначе
			ЗначенияЗаполнения = Новый Структура("Дата, ДатаНачала, ДатаОкончания, ВремяНачала, ВремяОкончания, Клиент, Сотрудник, Оборудование, Филиал,
				| Основание, Работы", ТекущаяДата(), ПлановаяДата, ПлановаяДата, ПлановаяДата, ПлановаяДата, Объект.Клиент, Сотрудник,
				Неопределено, Объект.Филиал, Объект.Ссылка, мсДанныеДляЗаявки);
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Документ.Заявка.ФормаОбъекта", ПараметрыФормы);	
		КонецЕсли;
		
	КонецЕсли;            	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПривязывающиеРеквизитыПланаЛечения()
	
	Для Каждого ГруппаНазначения Из СписокНазначений.ПолучитьЭлементы() Цикл
		Для Каждого Назначение Из ГруппаНазначения.ПолучитьЭлементы() Цикл
			Назначение.ИдентификаторНазначения = Новый УникальныйИдентификатор;
			Назначение.ДокументРегистратор = Неопределено;
			Назначение.ДокументВыполнения.Очистить();
			Назначение.Факт = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	СтрокиДереваКУдалению = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		ЭлементДерева = СписокНазначений.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокиПланаЛеченияКУдалению.Добавить(ЭлементДерева.ИдентификаторНазначения);
		УдалитьСвязиСПланомЛечения(ЭлементДерева.ИдентификаторНазначения);
		СтрокиДереваКУдалению.Добавить(ЭлементДерева);
	КонецЦикла;
	
	Для Каждого СтрокаДереваКУдалению Из СтрокиДереваКУдалению Цикл
		СписокНазначений.ПолучитьЭлементы().Удалить(СтрокаДереваКУдалению);
	КонецЦикла;
	
	// При появлении, добавить явный вызов обработчика "ПослеЗаписи".
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Назначения.ТекущиеДанные.ИдентификаторНазначения = Новый УникальныйИдентификатор;
		Элементы.Назначения.ТекущиеДанные.ДокументРегистратор = Неопределено;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.Назначения.ТекущиеДанные.ВидНазначения;

	// Открытие отдельной формы для выбора медикаментов.
	Если ТекущаяОперация = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты")
		И Не Элементы.Назначения.ТекущийЭлемент.Имя = "ВидНазначения"
	Тогда
		КолонкиСпискаНазначений = ПолучитьКолонкиСпискаНазначений(СписокНазначений);
		ДанныеСтроки = Элементы.Назначения.ТекущиеДанные;
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Строка Из КолонкиСпискаНазначений Цикл
			ДанныеЗаполнения.Вставить(Строка,ДанныеСтроки[Строка]);
		КонецЦикла;
		
		Если ДанныеСтроки.НоваяСтрока И Не ЗначениеЗаполнено(ДанныеЗаполнения.Дата) Тогда
			ДанныеЗаполнения.Дата = Объект.Дата;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ДанныеЗаполнения, НоваяСтрока, Источник", ДанныеЗаполнения, ДанныеСтроки.НоваяСтрока, "Прием");
		Оповещение = Новый ОписаниеОповещения("РедактированиеМедикаментозногоНазначенияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.РедактированиеМедикаментозныхНазначений", ПараметрыФормы,,,,,Оповещение);
		ПодключитьОбработчикОжидания("ЗакончитьРедактированиеСтрокиНазначения", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки.ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты")
		И ТипЗнч(ДанныеСтроки.Назначение) = Тип("СправочникСсылка.Номенклатура")
	Тогда
		СтандартнаяОбработка = Ложь;
		
		КолонкиСпискаНазначений = ПолучитьКолонкиСпискаНазначений(СписокНазначений);
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Строка Из КолонкиСпискаНазначений Цикл
			ДанныеЗаполнения.Вставить(Строка,ДанныеСтроки[Строка]);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("ДанныеЗаполнения, НоваяСтрока, Источник", ДанныеЗаполнения, Ложь, "Прием");
		Оповещение = Новый ОписаниеОповещения("РедактированиеМедикаментозногоНазначенияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.РедактированиеМедикаментозныхНазначений", ПараметрыФормы,,,,,Оповещение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеСтрокиНазначения();
	Элементы.Назначения.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеМедикаментозногоНазначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		КолонкиСпискаНазначений = ПолучитьКолонкиСпискаНазначений(СписокНазначений);
		ДанныеСтроки = Элементы.Назначения.ТекущиеДанные;
		
		Для Каждого Строка Из КолонкиСпискаНазначений Цикл
			Если Результат.Свойство(Строка) Тогда
				ДанныеСтроки[Строка] = Результат[Строка];
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСтроки.ДатаНачалаБезВремени = ДанныеСтроки.Дата;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторНазначения) Тогда
			ДанныеСтроки.ИдентификаторНазначения = Новый УникальныйИдентификатор;
		КонецЕсли;
		РассчитатьДозыСтрокиМедикаментов(ДанныеСтроки);
		Модифицированность = Истина;
		
		ДанныеСтроки.НоваяСтрока = Ложь;
		ПодключитьОбработчикОжидания("ЗакончитьРедактированиеСтрокиНазначения", 0.1, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьДозыСтрокиМедикаментов(СтрокаНазначения)
	
	СтрокаНазначения.СуточнаяДоза = СтрокаНазначения.Дозировка * СтрокаНазначения.ПриемовВДень;
	
	// Округление для случая когда дозировка - иррациональное число
	Если СтрокаНазначения.ПриемовВДень > 2 Тогда
		
		Если СтрокаНазначения.СуточнаяДоза - Цел(СтрокаНазначения.СуточнаяДоза) > 0.998 Тогда
			СтрокаНазначения.СуточнаяДоза = Цел(СтрокаНазначения.СуточнаяДоза) + 1;
		ИначеЕсли СтрокаНазначения.СуточнаяДоза - Цел(СтрокаНазначения.СуточнаяДоза) < 0.002 Тогда
			СтрокаНазначения.СуточнаяДоза = Цел(СтрокаНазначения.СуточнаяДоза);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаНазначения.КурсоваяДоза = СтрокаНазначения.СуточнаяДоза * ((СтрокаНазначения.ДатаОкончания - СтрокаНазначения.ДатаНачалаБезВремени) / 86400 + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьФлагаЗакрыт()
	
	УстановитьВидимостьФлагаЗакрытСервер(Элементы.Закрыт, Объект.ПервичныйПрием);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьФлагаЗакрытСервер(ЭлементФлагЗакрыт, ПервичныйПрием)

	ЭлементФлагЗакрыт.Видимость = Не ЗначениеЗаполнено(ПервичныйПрием) Или ТипЗнч(ПервичныйПрием) = Тип("ДокументСсылка.Прием");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПризнакЗакрытПервичномуПриему(ПервичныйПрием, Закрыт)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектПервичногоПриема = ПервичныйПрием.ПолучитьОбъект();
	ОбъектПервичногоПриема.Закрыт = Закрыт;
	ОбъектПервичногоПриема.ДополнительныеСвойства.Вставить("НеПроверятьГраницуЗапретаИзмененияДанных", Истина);
	
	ОбъектПервичногоПриема.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивСтандартов = Новый Массив;
	
	Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
	
		МассивСтандартов.Добавить(Строка.СтандартЛечения);		
	
	КонецЦикла; 
	
	ЗаполнитьПланЛеченияИзСтандартаЛечения(МассивСтандартов);
	Элементы.Назначения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьДиагноз(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПолеДиагнозПриИзменении(Элемент)
	
	ДиагнозПриИзменении();
	НеобходимоОбновитьСтандартыЛечения = Элементы.СтандартыЛеченияПоДиагнозам.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозыДиагнозПриИзменении(Элемент)

	ДиагнозПриИзменении();
	НеобходимоОбновитьСтандартыЛечения = Элементы.СтандартыЛеченияПоДиагнозам.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозПриИзменении()
	Если ЭтоМедосмотр Тогда
		// Диагнозы Z00 - диагнозы здорового. Снимаются признаки заболеваний.
		ТекущиеДанные = Элементы.Диагнозы.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ПрофнепригодностьВременная)
			Или ТекущиеДанные.Профессиональное
			Или ТекущиеДанные.ВыявленВпервые
		Тогда
			КодГруппы = ВРЕГ(Лев(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Диагноз, "КодДиагноза"), 3));
			Если КодГруппы >= "Z00"
				И КодГруппы <= "Z13"
			Тогда
				ТекущиеДанные.ВыявленоВпервые = Ложь;
				ТекущиеДанные.Профессиональное = Ложь;
				ТекущиеДанные.ПрофнепригодностьВременная = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюЗубнуюКартуКлиента(ШаблонПриема)
	
	Если Объект.СостоянияЗубов.Количество() <> 0 Тогда
		Возврат Объект.СостоянияЗубов;
	Иначе
		Возврат ПолучитьТекущуюЗубнуюКартуКлиентаСервер(Объект.Клиент, Объект.Дата, Объект.СостоянияЗубов, ШаблонПриема);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущуюЗубнуюКартуКлиентаСервер(Клиент, ДатаДокумента, Знач СостоянияЗубов, ШаблонПриема)
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РаботаСЗубнымиКартами") Тогда	
		Если ШаблонПриема.РаботаетСЗубнойКартой Тогда // Занесение параметров.
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияЗубовСрезПоследних.НомерЗуба,
			|	СостоянияЗубовСрезПоследних.Сегмент КАК СегментЗуба,
			|	СостоянияЗубовСрезПоследних.Состояние,
			|	СостоянияЗубовСрезПоследних.Описание
			|ИЗ
			|	РегистрСведений.СостоянияЗубов.СрезПоследних(&ДатаПериода, Клиент = &Клиент) КАК СостоянияЗубовСрезПоследних";
			
			Запрос.УстановитьПараметр("ДатаПериода", ?(ДатаДокумента = Дата(1,1,1),ТекущаяДата(), ДатаДокумента));
			Запрос.УстановитьПараметр("Клиент", Клиент);
			
			ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
			
			Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСостояний);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНаОбработкуВизуальногоРедактированияЗубов(ПараметрыИзОбработки)
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РаботаСЗубнымиКартами") Тогда
		Если ПараметрыИзОбработки <> Неопределено Тогда
			Объект.СостоянияЗубов.Очистить();
			Для Каждого СтрокаПараметра Из ПараметрыИзОбработки Цикл
				СтрокаСостоянияЗуба = Объект.СостоянияЗубов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСостоянияЗуба, СтрокаПараметра);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеНоменклатурыДляВводаРецепта(СтрокаМедикамента)
	Номенклатура = Новый Массив;
	
	Если СтрокаМедикамента.ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты")
			И ЗначениеЗаполнено(СтрокаМедикамента.Назначение)
		Тогда
			РеквизитыНоменклатуры = Новый Структура;
			РеквизитыНоменклатуры.Вставить("Номенклатура",		СтрокаМедикамента.Назначение);
			РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения",	СтрокаМедикамента.ЕдиницаИзмерения);
			РеквизитыНоменклатуры.Вставить("Количество",		СтрокаМедикамента.Количество * СтрокаМедикамента.Дозировка);
			РеквизитыНоменклатуры.Вставить("КоличествоДней", 	СтрокаМедикамента.Количество / ?(СтрокаМедикамента.ПриемовВДень = 0, 1, СтрокаМедикамента.ПриемовВДень));
			РеквизитыНоменклатуры.Вставить("ПриемовВДень",		СтрокаМедикамента.ПриемовВДень);
			РеквизитыНоменклатуры.Вставить("Дозировка",			СтрокаМедикамента.Дозировка);
			Номенклатура.Добавить(РеквизитыНоменклатуры);
		КонецЕсли;	
	
	Возврат Номенклатура;
	
КонецФункции

&НаКлиенте
Процедура ВыписатьРецептПоПараметрам(Номенклатура = Неопределено, ИспользоватьПомощникСозданияРецептов = Ложь)
	
	ЗначенияЗаполнения = Новый Структура("Прием, Врач, Клиент, МедицинскаяКарта",
											Объект.Ссылка, 
											Объект.Врач, 
											Объект.Клиент, 
											Объект.МедицинскаяКарта);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ЗначенияЗаполнения.Вставить("Номенклатура",	Номенклатура);
	КонецЕсли;
	
	Если ИспользоватьПомощникСозданияРецептов Тогда
		ОткрытьФорму("Документ.Рецепт.Форма.ПомощникСозданияРецептов", ЗначенияЗаполнения, ЭтаФорма, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		ФормаРецепта = ОткрытьФорму("Документ.Рецепт.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАнализыИзСпискаНазначений(Знач СписокНазначений, Знач ДанныеФормыСтрокиНазначения)
	
	МассивАнализов = Новый Массив;
	
	Для Каждого ИдСтрокиНазначения Из ДанныеФормыСтрокиНазначения Цикл
		
		СтрокаНазначения = СписокНазначений.НайтиПоИдентификатору(ИдСтрокиНазначения);
		
		Если СтрокаНазначения <> Неопределено Тогда
			
			Назначение = СтрокаНазначения.Назначение;
			
			Если ТипЗнч(Назначение) = Тип("СправочникСсылка.Номенклатура")
				И Назначение.Анализ
			Тогда
				МассивАнализов.Добавить(Новый Структура("Номенклатура, ИдентификаторНазначения", Назначение, СтрокаНазначения.ИдентификаторНазначения));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивАнализов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаборАнализов(Команда)
	
	ВыбранныеНазначения = Элементы.Назначения.ВыделенныеСтроки;
	
	Если ВыбранныеНазначения.Количество() <> 0 Тогда
		МассивАнализов = ПолучитьАнализыИзСпискаНазначений(СписокНазначений, ВыбранныеНазначения);
		
		Если МассивАнализов.Количество() <> 0 Тогда
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Основание, Анализы, Клиент, ВидОперации", 
				Объект.Ссылка, МассивАнализов, Объект.Клиент, ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор")));
			ОткрытьФорму("Документ.ДействияНадАнализами.ФормаОбъекта", ПараметрыФормы);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Среди выбранных назначений нет анализов!'"), 30, НСтр("ru='Нет данных для ввода забора анализов'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоМедосмотрПриИзменении(Элемент)
	
	ПриИзмененииЭтоМедосмотр(Элементы, Объект.ПервичныйПрием, ЭтоМедосмотр);
	УстановитьВидимостьФлагаЗакрыт();
	
	Если ЭтоМедосмотр Тогда
		ВредностиДиагноза = ПолучитьВредностиКлиента(Объект.ПервичныйПрием, Объект.ВредныеФакторыПротивопоказаний);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЭтоМедосмотр(ЭлементыФормы, ПервичныйПрием, ЭтоМедосмотр)
	
	ВидимостьПолейПоВидуМО = Ложь;
	
	Если ЭтоМедосмотр Тогда
		ЭлементыФормы.ПервичныйПрием.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПрохождениеМедосмотра");
		ВидСправка = ПредопределенноеЗначение("Перечисление.ВидыМедосмотров.СправкаПрочий");
		Если ЗначениеЗаполнено(ПервичныйПрием) И ТипЗнч(ПервичныйПрием) = Тип("ДокументСсылка.ПрохождениеМедосмотра") 
			И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПервичныйПрием, "ВидПрохожденияМО") = ВидСправка
		Тогда
			ВидимостьПолейПоВидуМО = Ложь;
		Иначе
			ВидимостьПолейПоВидуМО = Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПервичныйПрием.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.Прием");
	КонецЕсли;
	
	ПервичныйПрием = ЭлементыФормы.ПервичныйПрием.ОграничениеТипа.ПривестиЗначение(ПервичныйПрием);
	
	ЭлементыФормы.Специализация.Видимость = ЭтоМедосмотр;
	
	ЭлементыФормы.ДиагнозыПротивопоказание.Видимость = ВидимостьПолейПоВидуМО;
	ЭлементыФормы.Противопоказание.Видимость		 = ВидимостьПолейПоВидуМО;
	ЭлементыФормы.ПодборПротивопоказаний.Видимость	 = ВидимостьПолейПоВидуМО;
	ЭлементыФормы.ГруппаКлассификацияПоМедосмотрам.Видимость = ВидимостьПолейПоВидуМО;
	
	ЭлементыФормы.Исход.Видимость	= Не ЭтоМедосмотр;
	
	// Классификация 3 - основной/сопуствующий диагноз.
	ЭлементыФормы.ДиагнозыВидНозологии.Видимость = Не ЭтоМедосмотр;
	ЭлементыФормы.ВидНозологииДиагноза.Видимость = Не ЭтоМедосмотр;
	
	ЭлементыФормы.ПримечаниеПоПротивопоказанию.Видимость = ЭтоМедосмотр;
	ЭлементыФормы.ГруппаВредностиДиагноза.Видимость = ВидимостьПолейПоВидуМО;
	ЭлементыФормы.ГруппаЗаключениеПоРезультатамМедосмотра.Видимость = ВидимостьПолейПоВидуМО;
	
	РискЗаболевания = ПредопределенноеЗначение("Перечисление.КлассификацииДиагнозов.РискЗаболевания");
	СписокВыбораКлиссификация1 = ЭлементыФормы.УточненностьДиагноза.СписокВыбора;
	ЭлементСпискаРискЗаболевания = СписокВыбораКлиссификация1.НайтиПоЗначению(РискЗаболевания);
	Если ЭтоМедосмотр Тогда
		Если ЭлементСпискаРискЗаболевания = Неопределено Тогда
			СписокВыбораКлиссификация1.Добавить(РискЗаболевания, "повышенный риск развития");
		КонецЕсли;
	Иначе
		Если ЭлементСпискаРискЗаболевания <> Неопределено Тогда
			СписокВыбораКлиссификация1.Удалить(ЭлементСпискаРискЗаболевания);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ТаблицаОтметок.Видимость = ЭтоМедосмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПротивопоказаний(Команда)
	ВыбратьПротивопоказание();
КонецПроцедуры

&НаКлиенте
Процедура ПротивопоказаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем ТекущийДиагноз;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Диагнозы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийДиагноз = ТекущиеДанные.Диагноз;
	КонецЕсли;
	ВыбратьПротивопоказание(ТекущийДиагноз);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПротивопоказание(ТекущийДиагноз = Неопределено)
	
	СтруктураПараметров = Новый Структура("Клиент",Объект.Клиент);
	Если ТипЗнч(Объект.ПервичныйПрием) = Тип("ДокументСсылка.ПрохождениеМедосмотра") Тогда
		СтруктураПараметров.Вставить("ТипМедосмотра", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПервичныйПрием, "ТипМедосмотра"));
		СтруктураПараметров.Вставить("ПрохождениеМедосмотра", Объект.ПервичныйПрием);
		Если ТекущийДиагноз <> Неопределено Тогда
			СтруктураПараметров.Вставить("Диагноз", ТекущийДиагноз);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Справочник.МедицинскиеПротивопоказания.Форма.ФормаПодбораСДиагнозом",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВредностьСтрокеДиагноза(СтрокаДиагноза, ВредныйФактор)
	
	// Удаление имеющихся вредостей по этой строке.
	мсСтр = Объект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаДиагноза.КлючСтроки));
	Для Каждого СтрокаВредности Из мсСтр Цикл
		Объект.ВредныеФакторыПротивопоказаний.Удалить(СтрокаВредности);
	КонецЦикла;
	
	// Добавление новой вредости.
	Если ЗначениеЗаполнено(ВредныйФактор) Тогда
		СтрокаВредность = Объект.ВредныеФакторыПротивопоказаний.Добавить();
		СтрокаВредность.КлючСтроки = СтрокаДиагноза.КлючСтроки;
		СтрокаВредность.ВредныйФактор = ВредныйФактор;
	Иначе
		// Противопоказание для всех вредных факторов.
		Для Каждого ЭлементСписка Из ВредностиДиагноза Цикл
			СтрокаВредность = Объект.ВредныеФакторыПротивопоказаний.Добавить();
			СтрокаВредность.КлючСтроки = СтрокаДиагноза.КлючСтроки;
			СтрокаВредность.ВредныйФактор = ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДиагнозыНаФорме_ПриСозданииНаСервере()
	
	Элементы.ДиагнозыВидНозологии.СписокВыбора.ЗагрузитьЗначения(МедицинскаяДеятельностьПовтИсп.ВидыНозологий());
	Элементы.ВидНозологииДиагноза.СписокВыбора.ЗагрузитьЗначения(МедицинскаяДеятельностьПовтИсп.ВидыНозологий());
	
	Если Не Объект.Ссылка.Пустая()
		И Объект.Диагнозы.НайтиСтроки(Новый Структура("Классификация2", Перечисления.КлассификацииДиагнозов.ОбострениеХронического)).Количество() <> 0
	Тогда
		Элементы.ХарактерЗаболевания.СписокВыбора.Добавить(Перечисления.КлассификацииДиагнозов.ОбострениеХронического);
	КонецЕсли;
	
	Элементы.СопутствующийДиагноз.Видимость = (Объект.Диагнозы.Количество() <> Объект.Диагнозы.НайтиСтроки(Новый Структура("Сопутствующий","")).Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Диагнозы);
		Для Каждого ЭлементСписка Из ВредностиДиагноза Цикл
			ЭлементСписка.Пометка = Ложь;
		КонецЦикла;
		
		// Автоматическая подстановка вероятного вида нозологии
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Классификация3) Тогда
			ВидОсновное = ПредопределенноеЗначение("Перечисление.КлассификацииДиагнозов.ОсновноеЗаболевание");
			НетОсновного = Истина;
			Для Каждого СтрокаДиагноз Из Объект.Диагнозы Цикл
				Если СтрокаДиагноз.Классификация3 = ВидОсновное Тогда
					НетОсновного = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НетОсновного Тогда
				Элемент.ТекущиеДанные.Классификация3 = ВидОсновное;
				Если Элементы.Диагнозы.ТекущийЭлемент = Элементы.ДиагнозыВидНозологии Тогда
					Элементы.Диагнозы.ТекущийЭлемент = Элементы.ДиагнозыДиагноз;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозыПередУдалением(Элемент, Отказ)
	
	УдалитьВредностиСтрокиДиагноза(Элементы.Диагнозы.ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозыПослеУдаления(Элемент)
	НеобходимоОбновитьСтандартыЛечения = Элементы.СтандартыЛеченияПоДиагнозам.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВредностиСтрокиДиагноза(КлючСтроки)
	
	мсСтр = Объект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	Для Каждого СтрокаВредность Из мсСтр Цикл
		Объект.ВредныеФакторыПротивопоказаний.Удалить(СтрокаВредность);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВредностиКлиента(Прием, Знач ВредностиДиагнозов)
	
	РеквизитНомерППиПриказа = МедосмотрыСервер.ПолучитьРеквизитНомерППиПриказа(Прием.Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.НаименованиеПолное КАК НаименованиеПолное,
				   |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.НомерПП КАК НомерПП,
				   |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор КАК ПереченьВредныхФакторовИРабот
	               |ИЗ
	               |	Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
	               |ГДЕ
	               |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Прием);
	НЗ = Запрос.Выполнить().Выгрузить();

	Результат = Новый СписокЗначений;
	
	Для Каждого Запись Из НЗ Цикл
		Представление	= Запись[РеквизитНомерППиПриказа]
						+ " " + Запись.НаименованиеПолное;
		ЭлементСписка = Результат.Добавить(Запись.ПереченьВредныхФакторовИРабот, Представление);
	КонецЦикла;
	
	Для Каждого ВредностьДиагноза Из ВредностиДиагнозов Цикл
		Если Результат.НайтиПоЗначению(ВредностьДиагноза.ВредныйФактор) = Неопределено Тогда
			Представление	= ВредностьДиагноза.ВредныйФактор[РеквизитНомерППиПриказа]
							+ " " + ВредностьДиагноза.ВредныйФактор.НаименованиеПолное;
			ЭлементСписка = Результат.Добавить(ВредностьДиагноза.ВредныйФактор, Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВредностиДиагнозаПриИзменении(Элемент)
	
	ТекущиеДанныеДиагноза = Элементы.Диагнозы.ТекущиеДанные;
	
	Если ТекущиеДанныеДиагноза <> Неопределено Тогда
		
		мсСтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаВредности Из Объект.ВредныеФакторыПротивопоказаний Цикл
			Если СтрокаВредности.КлючСтроки = ТекущиеДанныеДиагноза.КлючСтроки Тогда
				ЭлементСписка = ВредностиДиагноза.НайтиПоЗначению(СтрокаВредности.ВредныйФактор);
				Если ЭлементСписка = Неопределено
					Или Не ЭлементСписка.Пометка 
					Тогда
					мсСтрокиКУдалению.Добавить(СтрокаВредности);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаВредности Из мсСтрокиКУдалению Цикл
			Объект.ВредныеФакторыПротивопоказаний.Удалить(СтрокаВредности);	
		КонецЦикла;
		
		Отбор = Новый Структура("КлючСтроки, ВредныйФактор", ТекущиеДанныеДиагноза.КлючСтроки);
		Для Каждого ЭлементСписка Из ВредностиДиагноза Цикл
			Если ЭлементСписка.Пометка Тогда
				Отбор.ВредныйФактор = ЭлементСписка.Значение;
				Если Объект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Отбор).Количество() = 0 Тогда
					СтрокаВредности = Объект.ВредныеФакторыПротивопоказаний.Добавить();
					СтрокаВредности.КлючСтроки = Объект.Диагнозы.НайтиПоИдентификатору(ТекущиеДанныеДиагноза.ПолучитьИдентификатор()).КлючСтроки;
					СтрокаВредности.ВредныйФактор = ЭлементСписка.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиВредныхФакторовСтрокиДиагноза()
	
	ТекущиеДанные = Элементы.Диагнозы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура("КлючСтроки, ВредныйФактор", ТекущиеДанные.КлючСтроки);
		Для Каждого ЭлементСписка Из ВредностиДиагноза Цикл
			Отбор.ВредныйФактор = ЭлементСписка.Значение;
			ЭлементСписка.Пометка = Объект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Отбор).Количество() <> 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозыПриАктивизацииСтроки(Элемент)

	УстановитьПометкиВредныхФакторовСтрокиДиагноза();

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтметки()
	
	Если ЭтоМедосмотр Тогда
		
		ТаблицаОтметок.Очистить();
		
		ТаблицаДействий = МедосмотрыСервер.ПолучитьДействияМедосмотраПМОПоСпециализации(Объект.ПервичныйПрием, Объект.Специализация);
		
		Для Каждого СтрокаДействия Из ТаблицаДействий Цикл
		
			НоваяСтрока = ТаблицаОтметок.Добавить();
			НоваяСтрока.Действие = СтрокаДействия.Действие;
			Если Объект.Ссылка.Пустая() Тогда
				НоваяСтрока.Выполнено = Истина;
				НоваяСтрока.Изменено = Не СтрокаДействия.Выполнено;
			Иначе
				НоваяСтрока.Выполнено = СтрокаДействия.Выполнено;
				НоваяСтрока.Изменено = Ложь;	
			КонецЕсли;
			
		КонецЦикла;
		
		// Если документ новый, заполняем по действиям медосомотра
		// Условие нужно, чтобы не перезаполнялись ШаблоныПриема при повторном открытии документа
		Если Параметры.Ключ.Пустая() Тогда
			ЗаполнитьТаблицуШаблоновПриемаНаСервере();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтметкиДействий(ПервичныйПрием,Ссылка)
	
	Если ЭтоМедосмотр Тогда
		МедосмотрыСервер.ЗаписатьОтметкиВыполненияДействияМедосмотра(Ссылка, ПервичныйПрием, ТаблицаОтметок);
	Иначе
		МедосмотрыСервер.ОчиститьОтметкиВыполненияДействияМедосмотра(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтметокВыполненоПриИзменении(Элемент)
	
	ТД = Элементы.ТаблицаОтметок.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД.Изменено = НЕ ТД.Изменено; 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпециализацияПриИзменении(Элемент)
	ОбновитьОтметки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуШаблоновПоДействиямМедосмотра(Команда)
	
	ЗаполнитьТаблицуШаблоновПриемаНаСервере();	
	ПерезаполнитьТаблицуСтраницШаблоновПриема();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуШаблоновПриемаНаСервере()
	
	СписокДействийПриема = Новый СписокЗначений();
	Для Каждого Строка Из ТаблицаОтметок Цикл
		Если Строка.Выполнено Тогда
			Элемент = Строка.Действие.Номенклатура.ИндивидуальныйШаблонОсмотра;
			Если ЗначениеЗаполнено(Элемент) Тогда
				СписокДействийПриема.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаШаблонПриема = Объект.ШаблоныПриема.Выгрузить().ВыгрузитьКолонку("ШаблонПриема");
	
	Индекс = 0;
	Пока Индекс < СписокДействийПриема.Количество() Цикл
		Элемент = СтрокаШаблонПриема.Найти(СписокДействийПриема[Индекс].Значение);
		Если ЗначениеЗаполнено(Элемент) Тогда
			СтрокаШаблонПриема.Удалить(Строка(Элемент));
			СписокДействийПриема.Удалить(СписокДействийПриема[Индекс]);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СписокДействийПриема Цикл
		Если Строка <> "" Тогда
			СтрокаШаблона = Объект.ШаблоныПриема.Добавить();
			СтрокаШаблона.ШаблонПриема = Строка.Значение;
			СтрокаШаблона.ВидШаблона = Строка.Значение.ВидШаблона;
			СтрокаШаблона.ТекстШаблона = Строка.Значение.ТекстHTML;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиМООтметитьВсе(Команда)
	
	Для Каждого СтрокаОтметки Из ТаблицаОтметок Цикл
		Если СтрокаОтметки.Выполнено <> Истина Тогда 
			СтрокаОтметки.Изменено = НЕ СтрокаОтметки.Изменено;
			СтрокаОтметки.Выполнено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкиМОСнятьВсе(Команда)
	
	Для Каждого СтрокаОтметки Из ТаблицаОтметок Цикл
		Если СтрокаОтметки.Выполнено <> Ложь Тогда 
			СтрокаОтметки.Изменено = НЕ СтрокаОтметки.Изменено;
			СтрокаОтметки.Выполнено = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СШКПрМО(фПрохождениеМедосмотра, СШК) Экспорт
	
	Если Не ЭтоМедосмотр Тогда
		ЭтоМедосмотр = Истина;
		ЭтоМедосмотрПриИзменении(Неопределено);
	КонецЕсли;
	Объект.Клиент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(фПрохождениеМедосмотра, "Клиент");
	КлиентПриИзменении(Неопределено);
	Объект.ПервичныйПрием = фПрохождениеМедосмотра;
	ПервичныйПриемПриИзменении(Неопределено);
		
КонецФункции

&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		ДобавитьСтрокуНоменклатуры(ДанныеНоменклатуры);
	КонецЕсли;	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуНоменклатуры(ДанныеНоменклатуры)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаУслуги;
	Модифицированность = Истина;
	
	ВидНоменклатуры = ДопСерверныеФункции.ПолучитьРеквизит(ДанныеНоменклатуры.Номенклатура, "ВидНоменклатуры");
	Если ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры.ХарактеристикаНоменклатуры);
		
		мсСтрокиРаботы = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		
		Если мсСтрокиРаботы.Количество()=0 Тогда
			Элементы.СтраницыРаботы.ТекущаяСтраница = Элементы.ГруппаРаботы;
			СтрокаРаботы = Объект.Работы.Добавить();
			СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
			СтрокаРаботы.Номенклатура = ДанныеНоменклатуры.Номенклатура;
			СтрокаРаботы.ХарактеристикаНоменклатуры = ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
			СтрокаРаботы.Количество = ДанныеНоменклатуры.Количество;
		Иначе
			СтрокаРаботы = мсСтрокиРаботы[0];
			СтрокаРаботы.Количество = СтрокаРаботы.Количество + ДанныеНоменклатуры.Количество;
			
		КонецЕсли;
		Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
		РаботыНоменклатураПриИзменении(Неопределено);
		
	ИначеЕсли ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Набор") Тогда
		Элементы.СтраницыРаботы.ТекущаяСтраница = Элементы.ГруппаРаботы;
		СоставНабора = ОбщегоНазначенияСервер.ПолучитьСоставНабора(ДанныеНоменклатуры.Номенклатура);
		Для Инд = 0 По СоставНабора.Количество()-1 Цикл
			
			СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СоставНабора[Инд].Комплектующая, СоставНабора[Инд].ХарактеристикаКомплектующей);
			
			мсСтрокиРаботы = Объект.Работы.НайтиСтроки(СтруктураПоиска);
			
			Если мсСтрокиРаботы.Количество()=0 Тогда
				
				СтрокаРаботы = Объект.Работы.Добавить();
				СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьМаксимумМинимумСвойстваВКоллекции(Объект.Работы, "КлючСтроки", Истина, 0) + 1;
				СтрокаРаботы.Номенклатура = СоставНабора[Инд].Комплектующая;
				СтрокаРаботы.ХарактеристикаНоменклатуры = СоставНабора[Инд].ХарактеристикаКомплектующей;
				СтрокаРаботы.Количество = СоставНабора[Инд].Количество * ДанныеНоменклатуры.Количество;
			Иначе
				СтрокаРаботы = мсСтрокиРаботы[0];
				СтрокаРаботы.Количество = СтрокаРаботы.Количество + 1;	
			КонецЕсли;
		КонецЦикла;
		Если СтрокаРаботы <> Неопределено Тогда
			Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
		КонецЕсли;
		
	ИначеЕсли ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
		
		Если Объект.Работы.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Следует сначала указать работу, на которую потрачена складская единица.'"));
			Возврат;
		КонецЕсли;
		
		Если Элементы.Работы.ТекущиеДанные <> Неопределено Тогда
			ТекСтрокаРаботы = Элементы.Работы.ТекущиеДанные;
		Иначе
			ТекСтрокаРаботы = Неопределено;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения", ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры.ХарактеристикаНоменклатуры, ДанныеНоменклатуры.СерияНоменклатуры, ДанныеНоменклатуры.ЕдиницаИзмерения);	
		мсСтрокиМатериалы = Объект.Материалы.НайтиСтроки(СтруктураПоиска);	

		Если мсСтрокиМатериалы.Количество() = 0
			Или (ТекСтрокаРаботы <> Неопределено И ТекСтрокаРаботы.КлючСтроки <> мсСтрокиМатериалы[0].КлючСтроки)
		Тогда
			Объект.РучнаяКорректировкаМатериалов = Истина;
			
			Элементы.СтраницыРаботы.ТекущаяСтраница = Элементы.ГруппаМатериалы;
			НовыйМатериал = Объект.Материалы.Добавить();
			НовыйМатериал.Номенклатура = ДанныеНоменклатуры.Номенклатура;
			НовыйМатериал.ХарактеристикаНоменклатуры = ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
			НовыйМатериал.Количество = ДанныеНоменклатуры.Количество;
			НовыйМатериал.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
			НовыйМатериал.СерияНоменклатуры = ДанныеНоменклатуры.СерияНоменклатуры;
			
			Если ТекСтрокаРаботы<>Неопределено Тогда
				НовыйМатериал.Работа = ТекСтрокаРаботы.Номенклатура;
				НовыйМатериал.КлючСтроки = ТекСтрокаРаботы.КлючСтроки;
			КонецЕсли;
		Иначе
			СтрокаТовар = мсСтрокиМатериалы[0];
			СтрокаТовар.Количество = СтрокаТовар.Количество + ДанныеНоменклатуры.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКолонкиСпискаНазначений(Знач СписокНазначений)
	
	КолонкиСпискаЗначений = Новый Массив;
	СписокДерево = ДанныеФормыВЗначение(СписокНазначений, Тип("ДеревоЗначений"));
	КолонкиДерева = СписокДерево.Колонки;
	Для Каждого Колонка Из КолонкиДерева Цикл
		КолонкиСпискаЗначений.Добавить(Колонка.Имя);	
	КонецЦикла;
	
	Возврат КолонкиСпискаЗначений;
	
КонецФункции

#Область КомплексныеРасчеты

&НаСервере
Процедура ЗаполнитьЭтапыРаботСОтметкамиВыполнения()
	
	КомплексныеРасчетыКлиентовСервер.ЗаполнитьЭтапыРаботСОтметкамиВыполнения(Объект.КомплексныйРасчет, ЭтапыРабот, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботВыполненПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЭтапыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомплексныеРасчетыКлиентовКлиент.ЭтапыРаботВыполненПриИзменении(ТекДанные);
	ТекДанные.ИсполнительФакт = ?(ТекДанные.ОтметкаВыполнения, Объект.Врач, Неопределено);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботОтметкаВыполненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЭтапыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомплексныеРасчетыКлиентовКлиент.ЭтапыРаботОтметкаВыполненияПриИзменении(ТекДанные);
	ТекДанные.ИсполнительФакт = ?(ТекДанные.ОтметкаВыполнения, Объект.Врач, Неопределено);	

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = ЭтапыРабот.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЭтапыРаботДокументРегистратор Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекДанные.ДокументРегистратор) Тогда 
			ОткрытьЗначение(ТекДанные.ДокументРегистратор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомплексныйРасчетПриИзменении(Элемент)
	
	Элементы.ГруппаЭтапыРабот.Видимость = ЗначениеЗаполнено(Объект.КомплексныйРасчет);
	Если ЗначениеЗаполнено(Объект.КомплексныйРасчет) Тогда 
		ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	Иначе
		ЭтапыРабот.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область DICOM

&НаКлиенте
Процедура СоздатьWorklist(Команда)
	мУслуги = Новый Массив();
	Для каждого стрТЧ из Объект.Работы Цикл
		Если ЗначениеЗаполнено(стрТЧ.УИД_DICOM) Тогда
			мУслуги.Добавить(Новый Структура("Номенклатура, УникальныйИдентификатор, КлючСтроки", стрТЧ.Номенклатура, стрТЧ.УИД_DICOM, стрТЧ.КлючСтроки));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='У одной из услуг не заполнен идентификатор для dicom-исследования. Перезапишите документ, чтобы он сгенерировался автоматически и повторите попытку.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если мУслуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В документе отсутствуют услуги, заполните вкладку ""Состав услуг"" и повторите попытку.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Услуги, Прием, Пациент, Врач, МедКарта", мУслуги, Объект.Ссылка, Объект.Клиент, Объект.Врач, Объект.МедицинскаяКарта);
	РезультатРаботыСWorklist = ОткрытьФормуМодально("Документ.Прием.Форма.WorklistDICOM", ПараметрыФормы);
	ДанныеDICOMЛистов = ОбновитьDICOMЛистыНаСервере(Объект.Ссылка);
	ЗаполнитьDICOMЛисты(ДанныеDICOMЛистов, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыDICOM(Команда)
	ДанныеDICOMЛистов = ОбновитьDICOMЛистыНаСервере(Объект.Ссылка);
	ЗаполнитьDICOMЛисты(ДанныеDICOMЛистов, ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьDICOMЛисты(ДанныеDICOMЛистов, Форма)
	Форма.DICOMЛисты.Очистить();
	Для Каждого Лист Из ДанныеDICOMЛистов Цикл
		Отбор = Новый Структура("УИД_DICOM", Новый УникальныйИдентификатор(Лист.УИД_DICOM));
		УслугиDICOM = Форма.Объект.Работы.НайтиСтроки(Отбор);
		Для Каждого СтрокаРаботы Из УслугиDICOM Цикл
			ЗаписьЛиста = Форма.DICOMЛисты.Добавить();
			ЗаписьЛиста.Услуга								= СтрокаРаботы.Номенклатура;
			ЗаписьЛиста.Статус								= Лист.СтатусИсследования;
			ЗаписьЛиста.УникальныйИдентификаторИсследования = Лист.УникальныйИдентификаторИсследования;
			ЗаписьЛиста.StudyInstanceUID					= Лист.StudyInstanceUID;
			ЗаписьЛиста.Оборудование						= Лист.Оборудование;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьDICOMЛистыНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DicomWorkLists.RequestedProcedureID КАК УИД_DICOM,
		|	DicomWorkLists.СтатусИсследования,
		|	DicomWorkLists.УникальныйИдентификаторИсследования,
		|	DicomWorkLists.StudyInstanceUID,
		|	DicomWorkLists.Оборудование
		|ИЗ
		|	РегистрСведений.DicomWorkLists КАК DicomWorkLists
		|ГДЕ
		|	DicomWorkLists.Прием = &Прием";
	
	Запрос.УстановитьПараметр("Прием", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеDICOM = РезультатЗапроса.Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеDICOM);

КонецФункции

&НаКлиенте
Процедура ВыбратьФайлыDICOM(Команда)
	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	ПериодВыбора = Новый Структура("ДатаНачала, ДатаОкончания",НачалоДня(ДатаДокумента), КонецДня(ДатаДокумента));
	ИдентификаторыИсследований = Новый Массив();
	Для Каждого Лист Из DICOMЛисты Цикл
		ИдентификаторыИсследований.Добавить(Строка(Лист.StudyInstanceUID));	
	КонецЦикла;
	ПараметрыВыбораБИТ = Новый Структура("МедицинскаяКарта, Период, ИдентификаторыИсследований", Объект.МедицинскаяКарта, ПериодВыбора, ИдентификаторыИсследований);
	
	РезультатВыбора = ОткрытьФормуМодально("Обработка.ПрикреплениеФайловDICOM.Форма", ПараметрыВыбораБИТ);
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		Для Каждого Файл Из РезультатВыбора Цикл
			СсылкаНаФайл = РаботаСФайламиКлиент.ДобавитьНовыйФайл(Объект.Ссылка, Файл.ПутьКФайлу);	
			Если Не ЗначениеЗаполнено(СсылкаНаФайл) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прикрепить файл к Приему");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеDICOM(Команда)
	НастройкиDICOM = СформироватьСтруктуруНастроекDICOM();
	ТекДанныеDICOM = Элементы.DICOMЛисты.ТекущиеДанные;
	Если ТекДанныеDICOM <>  Неопределено Тогда
		DICOMРаботаСДрайверомКлиентСервер.ПолучитьДанныеИсследования(
			ТекДанныеDICOM.StudyInstanceUID, НастройкиDICOM.Хранилище, НастройкиDICOM.PACS, НастройкиDICOM.AETitle, НастройкиDICOM.ДанныеPACS);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтруктуруНастроекDICOM()
	Результат = Новый Структура("Хранилище, PACS, AETitle, ДанныеPACS");
	Результат.Хранилище = DICOMРаботаСДрайвером.ПолучитьХранилищеDICOM();
	Результат.AETitle = DICOMРаботаСДрайвером.ПолучитьAETitleДляЗапросовDICOM();
	Результат.PACS = DICOMРаботаСДрайвером.ПолучитьPACS();
	Результат.ДанныеPACS = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Результат.PACS, "Host, Port");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура DICOMЛистыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элементы.DICOMЛисты.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		УИД				= ТД.УникальныйИдентификаторИсследования;
		Прием			= Объект.Ссылка;
		Оборудование	= ТД.Оборудование;
		Структура = Новый Структура("Ключ", ПолучитьКлючDICOM(УИД, Прием, Оборудование));
		ОткрытьФорму("РегистрСведений.DicomWorkLists.Форма.УпрФормаЗаписи", Структура);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьКлючDICOM(УИД, Прием, Оборудование)
  Возврат РегистрыСведений.DicomWorkLists.СоздатьКлючЗаписи(Новый Структура("УникальныйИдентификаторИсследования, Прием, Оборудование", УИД, Прием, Оборудование));
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ИспользоватьТиповоеЗаполнение(ИмяПодключеннойОбработки, ИмяВстроеннойОбработки)
	
	Если ИмяВстроеннойОбработки <> Неопределено Тогда
		Попытка
			Возврат Вычислить(СтрШаблон("Обработки.%1.Создать().ИспользоватьТиповоеЗаполнение()", ИмяВстроеннойОбработки));
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВнОбработка = ВнешниеОбработки.Создать(ИмяПодключеннойОбработки, Ложь, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	Попытка
		Возврат ВнОбработка.ИспользоватьТиповоеЗаполнение();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровОткрытияФормы(ШаблонПриема, Знач Объект)
	
	СтруктураПараметровОткрытияФормы = Новый Структура;
	СтруктураПараметровОткрытияФормы.Вставить("ЗначенияПоУмолчанию", УправлениеОбработкамиШаблоновСервер.ПолучитьСтруктуруСоответствий(ШаблонПриема, Объект));
	СтруктураПараметровОткрытияФормы.Вставить("СписокЗаполнений", УправлениеОбработкамиШаблоновСервер.СформироватьМассивЗаполнений(ШаблонПриема));
	СтруктураПараметровОткрытияФормы.Вставить("СтруктураШапки", СформироватьСтруктуруШапки(Объект));
	
	Возврат СтруктураПараметровОткрытияФормы;
	
КонецФункции

&НаКлиенте
Процедура НазначенияВидНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ТекущаяОперация = Элементы.Назначения.ТекущиеДанные.ВидНазначения;
	
	Если ТекущаяОперация = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Обследование")
		Или ТекущаяОперация = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Процедура")
	Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНазначений.Обследование"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНазначений.Процедура"));
	Иначе
		ДанныеВыбора.Добавить(ТекущаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНМУДляПлановЛечения()
	
	СтандартыЛеченияВПланеЛеченияНЗ = РегистрыСведений.СтандартыЛеченияВПланеЛечения.СоздатьНаборЗаписей();
	Для Каждого СтрокаПланаЛечения Из СписокНазначений.ПолучитьЭлементы() Цикл
		СтандартыЛеченияВПланеЛеченияНЗ.Отбор.ИдентификаторНазначения.Установить(СтрокаПланаЛечения.ИдентификаторНазначения);
		СтандартыЛеченияВПланеЛеченияНЗ.Прочитать();
		Для Каждого Строка Из СтандартыЛеченияВПланеЛеченияНЗ.Выгрузить() Цикл
			НоваяСтрокаСвязи = НМУДляПлановЛечения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязи, Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПланЛечения(СтрокиПланов, ИдентификаторНазначения)
	
	НайденныеПланы = СтрокиПланов.НайтиСтроки(Новый Структура("ИдентификаторНазначения", ИдентификаторНазначения));
	Если НайденныеПланы.Количество() > 0 Тогда
		Возврат НайденныеПланы[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПланыИзФормыСозданияПланаЛечения(ПолученныеПланыЛечения, ПолученныеНМУДляПлановЛечения, СтрокиПланаКУдалению)
	
	ПланыЛечения = РеквизитФормыВЗначение("СписокНазначений");
	СтрокиПлановЛечения = ПланыЛечения.Строки;
	
	Для Каждого СтрокаПланаЛечения Из ПолученныеПланыЛечения Цикл
		// Сначала поиск такого Плана
		ПланЛечения = ПолучитьПланЛечения(СтрокиПлановЛечения, СтрокаПланаЛечения.ИдентификаторНазначения);
		
		Если ПланЛечения = Неопределено Тогда
			ПланЛечения = СтрокиПлановЛечения.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПланЛечения, СтрокаПланаЛечения);
		
	КонецЦикла;
	
	НМУДляПлановЛечения.Очистить();
	Для Каждого СтрокаНМУДляПлановЛечения Из ПолученныеНМУДляПлановЛечения Цикл
		
		НоваяСтрокаНМУДляПлановЛечения = НМУДляПлановЛечения.Добавить();
		НоваяСтрокаНМУДляПлановЛечения.НоменклатураМедицинскихУслуг = СтрокаНМУДляПлановЛечения.НМУ;
		НоваяСтрокаНМУДляПлановЛечения.ВидНазначения = СтрокаНМУДляПлановЛечения.ВидНазначения;
		НоваяСтрокаНМУДляПлановЛечения.ИдентификаторНазначения = СтрокаНМУДляПлановЛечения.ИдентификаторПланаЛечения;
		
	КонецЦикла;
	
	Для Каждого СтрокаПланаКУдалению Из СтрокиПланаКУдалению Цикл
		СтрокиПланаЛеченияКУдалению.Добавить(СтрокаПланаКУдалению.Значение);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ПланыЛечения, "СписокНазначений");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязиСПланомЛечения(ИдентификаторНазначения)
	
	СтрокиСвязей = НМУДляПлановЛечения.НайтиСтроки(Новый Структура("ИдентификаторНазначения", ИдентификаторНазначения));
	Для Каждого СтрокаСвязи Из СтрокиСвязей Цикл
		
		НМУДляПлановЛечения.Удалить(СтрокаСвязи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеПланаЛечения(Команда)
	
	ТаблицаИспользуемыхСтандартовЛечения = ИспользуемыеСтандартыЛечения;
	РегламентированныеСтандарты = ПолучитьРегламентированныеСтандарты(ТаблицаИспользуемыхСтандартовЛечения);
	
	Если РегламентированныеСтандарты.Количество() > 0 Тогда
		
		ПланЛечения = Новый Массив;
		Для Каждого СтрокаПланаЛечения Из СписокНазначений.ПолучитьЭлементы() Цикл
			
			Если СтрокаПланаЛечения.ВидНазначения = ПредопределенноеЗначение("Перечисление.ВидыНазначений.Медикаменты") Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураСтрокиПланаЛечения = Новый Структура();
			
			СтруктураСтрокиПланаЛечения.Вставить("Номенклатура",СтрокаПланаЛечения.Назначение);
			СтруктураСтрокиПланаЛечения.Вставить("ИдентификаторНоменклатуры", СтрокаПланаЛечения.ИдентификаторНазначения);
			СтруктураСтрокиПланаЛечения.Вставить("Комментарий", СтрокаПланаЛечения.Комментарий);
			СтруктураСтрокиПланаЛечения.Вставить("Количество", СтрокаПланаЛечения.Количество);
			СтруктураСтрокиПланаЛечения.Вставить("ВидНазначения", СтрокаПланаЛечения.ВидНазначения);
			
			ПланЛечения.Добавить(СтруктураСтрокиПланаЛечения);
			
		КонецЦикла;
		
		СвязиНМУСНоменклатурой = Новый Массив;
		Для Каждого СтрокаНМУДляПлановЛечения Из НМУДляПлановЛечения Цикл
			
			СтруктураНМУДляПлановЛечения = Новый Структура;
			
			СтруктураНМУДляПлановЛечения.Вставить("НМУ", СтрокаНМУДляПлановЛечения.НоменклатураМедицинскихУслуг);
			СтруктураНМУДляПлановЛечения.Вставить("ВидНазначения", СтрокаНМУДляПлановЛечения.ВидНазначения);
			СтруктураНМУДляПлановЛечения.Вставить("ИдентификаторПланаЛечения", СтрокаНМУДляПлановЛечения.ИдентификаторНазначения);
			
			СвязиНМУСНоменклатурой.Добавить(СтруктураНМУДляПлановЛечения);
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("Стандарты, ПланЛечения, СвязиНМУСНоменклатурой", РегламентированныеСтандарты, ПланЛечения, СвязиНМУСНоменклатурой);
		ОткрытьФорму("Документ.Прием.Форма.СозданиеПланаЛеченияПоРеглСтандартам", ПараметрыФормы, ЭтаФорма,);
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Не выбрано ни одного регламентированного стандарта (не внутреннего стандарта лечения)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьСтрокуПлана(Команда)
	
	Если Элементы.Назначения.ТекущиеДанные <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлана = СписокНазначений.НайтиПоидентификатору(Элементы.Назначения.ТекущиеДанные.ПолучитьИдентификатор());
	
	// Количество в новой строке.
	Если СтрокаПлана.Количество <= 1 Тогда
		Количество = 0;
	ИначеЕсли СтрокаПлана.Факт > 0 И СтрокаПлана.Количество > СтрокаПлана.Факт Тогда
		Количество = СтрокаПлана.Количество - СтрокаПлана.Факт;
	Иначе
		Количество = (СтрокаПлана.Количество + СтрокаПлана.Количество%2)/2;
	КонецЕсли;
	
	НоваяСтрокаПлана = СписокНазначений.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаПлана, СтрокаПлана);
	НоваяСтрокаПлана.ИдентификаторНазначения = Новый УникальныйИдентификатор();
	НоваяСтрокаПлана.Количество = Количество;
	СтрокаПлана.Количество = СтрокаПлана.Количество - НоваяСтрокаПлана.Количество;
	
	Если СтрокаПлана.Количество < СтрокаПлана.Факт
		И НоваяСтрокаПлана.Количество <> 0
	Тогда
		НоваяСтрокаПлана.Факт = СтрокаПлана.Факт - СтрокаПлана.Количество;
		СтрокаПлана.Факт = СтрокаПлана.Количество;
	Иначе
		НоваяСтрокаПлана.Факт = 0;
	КонецЕсли;
	
	// Связи стандартов лечения
	СтрокиСвязи = НМУДляПлановЛечения.НайтиСтроки(Новый Структура("ИдентификаторНазначения", СтрокаПлана.ИдентификаторНазначения));
	
	Для Каждого СтрокаСвязи Из СтрокиСвязи Цикл
		
		НоваяСтрокаСвязи = НМУДляПлановЛечения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязи, СтрокаСвязи);
		НоваяСтрокаСвязи.ИдентификаторНазначения = НоваяСтрокаПлана.ИдентификаторНазначения;
		
	КонецЦикла;
	
	Элементы.Назначения.ТекущаяСтрока = НоваяСтрокаПлана.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегламентированныеСтандарты(ИспользуемыеСтандартыЛечения)
	
	РегламентированныеСтандарты = Новый Массив;
	
	Для Каждого Стандарт Из ИспользуемыеСтандартыЛечения Цикл
		
		Если Стандарт.СтандартЛечения.ВидСтандарта Тогда
			РегламентированныеСтандарты.Добавить(Стандарт.СтандартЛечения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РегламентированныеСтандарты;
	
КонецФункции

&НаКлиенте
Процедура Заключения(Команда)
	ВыбранныеСтроки = ТаблицаОтметок.НайтиСтроки(Новый Структура("Выполнено",Истина));
	Если ТипЗнч(Объект.ПервичныйПрием) <> Тип("ДокументСсылка.ПрохождениеМедосмотра") Или ВыбранныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Нет действий медосмотра, отмеченных как выполненные в этом документе'"));
		Возврат;	
	КонецЕсли; 
	
	СписокДействий = Новый Массив;
	Для каждого СтрокаДействия Из ВыбранныеСтроки Цикл
		СписокДействий.Добавить(СтрокаДействия.Действие);	
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура("Действия, ПрохождениеМедосмотра",СписокДействий, Объект.ПервичныйПрием);
	ОткрытьФорму("РегистрСведений.ЗаключенияПоДействиямМедосмотра.Форма.ЗаключенияМедосмотра",ПараметрыФормы,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВPDF(Команда)
	
	ДиалогВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыборФайла.ПолноеИмяФайла = "";
	ДиалогВыборФайла.Фильтр = "PDF(*.pdf)|*.pdf";
	ДиалогВыборФайла.МножественныйВыбор = Ложь;
	ДиалогВыборФайла.Заголовок = "Укажите файл для записи";
	ДиалогВыборФайла.Показать(Новый ОписаниеОповещения("СохранитьВPDFВыбор", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВPDFВыбор(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) <> Тип("Массив")
		Или ВыбранныеФайлы.Количество() = 0
	Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Файл(ы) не выбран!'; en = 'File(s) not selected!'"));
		Возврат;
	КонецЕсли;
	
	Колонтитулы = Неопределено;
	Если ИспользуютсяЭП И Объект.ПодписанЭП Тогда
		Колонтитулы = РаботаСШаблонамиHTML.СформироватьКолонтитулыЭЦПШаблонов(Объект.Ссылка, ЭлектронныеПодписи, Объект.ШаблоныПриема, Объект.ЭМД, Объект.РолиИПодписиЭМД);
	КонецЕсли;
	
	ДанныеРедактируемыхЭлементов = Новый Структура("Рисунки, ДобавленныеИзображения", РисункиКартинок, ДобавленныеИзображения);
	ПараметрыКонвертацииВPDF = Новый Структура("МожноФормироватьPDFНаКлиенте", МожноФормироватьPDFНаКлиенте);
	ТекстПечатиПриема = СформироватьHTMLТекстПечатиОсмотраПолный(Объект, ТаблицаПараметров, ПараметрыТаблицШаблонов, СписокНазначений, ВерсииШаблонов, Ложь, Колонтитулы,, РежимПолучателяПечатнойВерсииОсмотра, Истина, ДанныеРедактируемыхЭлементов, ПараметрыКонвертацииВPDF);
	
	Если МожноФормироватьPDFНаКлиенте Тогда
		ДанныеPDFФайла = РаботаСШаблонамиHTMLКлиент.ПреобразоватьHTMLвPDF(ТекстПечатиПриема, АдресWkhtmltopdfНаКлиенте, Ложь, Истина);
	Иначе
		ДанныеPDFФайла = РаботаСШаблонамиHTML.ПреобразоватьHTMLвPDF(ТекстПечатиПриема, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеPDFФайла) = Тип("ДвоичныеДанные") Тогда
		ДанныеPDFФайла.Записать(ВыбранныеФайлы[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьФокусСПоляВводаНаТело()
	
	Если ТекущийЭлементПараметраШаблона <> Неопределено
		И ВРег(ТекущийЭлементПараметраШаблона.ТегЭлемента) = "INPUT"
		И ТекущийЭлементПараметраШаблона.ЭлементHTML <> Неопределено
	Тогда
		ТекущийЭлементHTML = ПолучитьТекущийЭлементШаблонаHTML(ТекущийЭлементПараметраШаблона.ЭлементHTML, ТекущийЭлементПараметраШаблона.ИмяПоляШаблона);
		Если ТекущийЭлементHTML <> Неопределено Тогда
			ТекущийЭлементHTML.ownerDocument.body.click();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяПодписаниеРЭМД()
	
	Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
		Если ЗначениеЗаполнено(СтрокаШаблона.ВидДокумента) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция СтруктураТекущегоЭлементаШаблонаHTML(ЭлементHTML)
	
	Попытка
		ЭлементыПоТегу = ЭлементHTML.ownerDocument.getElementsByTagName(ЭлементHTML.tagName);
		Для НомерЭлемента = 1 По ЭлементыПоТегу.length Цикл
			ИндексЭлемента = НомерЭлемента - 1;
			Если ЭлементыПоТегу[ИндексЭлемента] = ЭлементHTML Тогда
				Возврат Новый Структура("ИмяТега, НомерЭлемента", ЭлементHTML.tagName, ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
	Исключение КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийЭлементШаблонаHTML(ДанныеТекущегоЭлементаШаблонаHTML, ИмяПоляШаблона)
	
	Если ДанныеТекущегоЭлементаШаблонаHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ЭлементыПоТегу = Элементы[ИмяПоляШаблона].Документ.getElementsByTagName(ДанныеТекущегоЭлементаШаблонаHTML.ИмяТега);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭлементыПоТегу.length < ДанныеТекущегоЭлементаШаблонаHTML.НомерЭлемента + 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлементыПоТегу[ДанныеТекущегоЭлементаШаблонаHTML.НомерЭлемента];
	
КонецФункции

#Область ЛистыНетрудоспособности

&НаСервере
Процедура ЛН_ПриСоздании()
	
	ИспользоватьЛистыНетрудоспособности	= ПолучитьФункциональнуюОпцию("ИспользоватьЛистыНетрудоспособности")
										И ПравоДоступа("Просмотр", Метаданные.Документы.ЛистокНетрудоспособности);
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаЛистыНеструдоспособности", Не ЭтоМедосмотр И ИспользоватьЛистыНетрудоспособности);
	
	Если ИспользоватьЛистыНетрудоспособности Тогда
		Больничные = Новый Структура;
		ЛН_ОбновитьГруппуКоманд(Объект.Клиент, Больничные, Элементы.ГруппаЛистыНеструдоспособности, Элементы.ЛН_Открыть, Элементы.ЛН_ОткрытьСписокЛНПациента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЛН_ОбновитьГруппуКоманд(Клиент, Больничные, ГруппаЛН, КнопккаЛН_Открыть, КнопкаЛН_Все)
	
	Если ЗначениеЗаполнено(Клиент)
		И ТипЗнч(Больничные) = Тип("Структура") // Т.е. если включена функциональная опция ИспользоватьЛистыНетрудоспособности и есть права.
	Тогда
		ГруппаЛН.Видимость = Истина;
		Больничные = ОбщегоНазначенияСервер.ФункцияМенеджера("Документы.ЛистокНетрудоспособности", "ЛН_Пациента", Клиент);
		
		КолАкт = Больничные.Актуальные.Количество();
		КолЗак = Больничные.Законченные.Количество();
		
		// Настройка кнопки Список всех ЛН.
		КнопкаЛН_Все.Видимость = КолЗак <> 0;
		КнопкаЛН_Все.Заголовок = СтрРазделить(КнопкаЛН_Все.Заголовок, " ", Истина)[0] + СтрШаблон(" (%1)", КолАкт+КолЗак);

		// Настройка кнопки Открыть ЛН.
		Если КолАкт = 0 Тогда
			КнопккаЛН_Открыть.Видимость = Ложь;
		Иначе
			КнопккаЛН_Открыть.Видимость = Истина;
			КнопккаЛН_Открыть.Заголовок = СтрРазделить(КнопккаЛН_Открыть.Заголовок, " ", Истина)[0]; // Возврат к дефолтному заголовку из одного слова.
			
			Если КолАкт > 1 Тогда
				КнопккаЛН_Открыть.Заголовок = КнопккаЛН_Открыть.Заголовок + СтрШаблон(" (%1)", КолАкт);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ГруппаЛН.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛН_ОткрытьНажатие(Элемент)
	
	Если ТипЗнч(Больничные) = Тип("Структура") Тогда
		
		Если Больничные.Актуальные.Количество() = 1 Тогда
			ПоказатьЗначение(, Больничные.Актуальные[0]);
		Иначе
			ОтборСпискаЛН = Новый Структура("Клиент", Объект.Клиент);
			АктуальныеЛНПациента = Новый СписокЗначений;
			АктуальныеЛНПациента.ЗагрузитьЗначения(Больничные.Актуальные);
			ОтборСпискаЛН.Вставить("Ссылка", АктуальныеЛНПациента);
			
			ОткрытьФорму("Документ.ЛистокНетрудоспособности.ФормаСписка", Новый Структура("Отбор", ОтборСпискаЛН), ЭтотОбъект, Объект.Клиент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛН_ОткрытьСписокЛНПациентаНажатие(Элемент)
	
	ОтборСпискаЛН = Новый Структура("Клиент", Объект.Клиент);
	ОткрытьФорму("Документ.ЛистокНетрудоспособности.ФормаСписка", Новый Структура("Отбор", ОтборСпискаЛН), ЭтотОбъект, Объект.Клиент);
	
КонецПроцедуры

#КонецОбласти