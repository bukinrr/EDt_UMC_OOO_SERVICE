#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Услуги") И ТипЗнч(Параметры.Услуги) = Тип("Массив") Тогда
		Для каждого стр из Параметры.Услуги Цикл
			Если ЗначениеЗаполнено(стр.Номенклатура.DICOMModality) Тогда
				НоваяУслуга = Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяУслуга, стр);
			КонецЕсли;
			// НоваяУслуга.Доступна = ЗначениеЗаполнено(стр.Номенклатура.DICOMModality);
		КонецЦикла;	
	КонецЕсли;
	Если Параметры.Свойство("Пациент") Тогда
		Пациент = Параметры.Пациент;
	КонецЕсли;
	Если Параметры.Свойство("Прием") Тогда
		Прием = Параметры.Прием;
	КонецЕсли;
	Если Параметры.Свойство("Врач") Тогда
		Врач = Параметры.Врач;
	КонецЕсли;
	Если Параметры.Свойство("МедКарта") Тогда
		МедКарта = Параметры.МедКарта;
	КонецЕсли;
	// В случае если направляющий врач и лечащий врач являются разными сотрудниками, будем ориентироваться на того, кто работает с оборудованием
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) И ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.Сотрудник) Тогда
		Врач = ПараметрыСеанса.ТекущийПользователь.Сотрудник; 
	КонецЕсли;
	// Определим на каком оборудовании DICOM может быть выполнена каждая из услуг данного врача
	ДополнитьУслугиОборудованиемСотрудника(Услуги, Врач);
	
	Если Услуги.Количество() <> 0 Тогда
		ДобавляемыеРеквизиты = Новый Массив; 
		ДобавляемыеКолонки = Новый Массив;
		СтрокаКолонок = "";
		Для каждого ресурс из Метаданные.РегистрыСведений.DicomWorkLists.Ресурсы Цикл
			// СтрокаКолонок = СтрокаКолонок + ресурс.Имя + ", ";
			Реквизит = Новый РеквизитФормы(ресурс.Имя, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000))); 
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			КолонкаТЗ = Новый РеквизитФормы(ресурс.Имя, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)),"Кэш"); 
			ДобавляемыеКолонки.Добавить(КолонкаТЗ);
			НоваяКолонка = КолонкиКэша.Добавить();
			НоваяКолонка.ИмяКолонки = ресурс.Имя;
		КонецЦикла;
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ИзменитьРеквизиты(ДобавляемыеКолонки);
		Середина = Окр(ДобавляемыеРеквизиты.Количество()/2);
		Для инд = 0 по ДобавляемыеРеквизиты.ВГраница() Цикл
			Реквизит = ДобавляемыеРеквизиты[инд];
			Если инд <= Середина - 1 Тогда
				ГруппаДобавления = ЭтаФорма.Элементы.Гр1; 	
			Иначе
				ГруппаДобавления = ЭтаФорма.Элементы.Гр2;
			КонецЕсли;
			Элемент = ЭтаФорма.Элементы.Добавить(Реквизит.Имя, Тип("ПолеФормы"), ГруппаДобавления);
			Элемент.Вид = ВидПоляФормы.ПолеВвода; 
			Элемент.ПутьКДанным = Реквизит.Имя; 
			Элемент.РастягиватьПоГоризонтали = Ложь;
			Элемент.Ширина = 20;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			// ЭтаФорма.Элементы.ОтборКомментарий.КнопкаОчистки = Истина;
			// ЭтаФорма.Элементы.ОтборКомментарий.КнопкаВыбора  = Истина;
			// Элемент.УстановитьДействие("ПриИзменении","МойОбработчик");
		КонецЦикла;
		
		АвтозаполнитьИсследования(Кэш, Услуги, Пациент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПриОткрытии(Отказ)
	Если Услуги.Количество() = 0 Тогда
		Ждать ПредупреждениеАсинх(НСтр("ru='Не удалось сопоставить оборудование dicom, доступное для услуг, с оборудованием dicom, доступным для сотрудника. Проверьте настройки в справочниках ""Номенклатура"" и ""Сотрудники""'"));
		Отказ = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура УслугиПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УслугиПриАктивизацииСтрокиНаСервере(ТекущиеДанные.УникальныйИдентификатор, ТекущиеДанные.Оборудование);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗапустить(Команда)
	РезультатЗапуска = СохранитьИЗапуститьНаСервере();
	Если РезультатЗапуска.Результат Тогда
		Закрыть();
	Иначе
		Предупреждение(РезультатЗапуска.ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СформироватьСтруктуруИзДанныхФормы()
	Возврат Кэш;	
КонецФункции

&НаСервере
Процедура ДополнитьУслугиОборудованиемСотрудника(Услуги, Врач)
	мУслуги = Новый Массив();
	Для каждого стр из Услуги Цикл
		мУслуги.Добавить(стр.Номенклатура);
	КонецЦикла;
	// Готовим буфер
	КопияУслуг = Услуги.Выгрузить();
	КопияУслуг.Очистить();
	// Получаем список услуг с оборудованием
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураОборудованиеDICOM.Оборудование,
		|	НоменклатураОборудованиеDICOM.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ОборудованиеУслуг
		|ИЗ
		|	Справочник.Номенклатура.ОборудованиеDICOM КАК НоменклатураОборудованиеDICOM
		|ГДЕ
		|	НоменклатураОборудованиеDICOM.Ссылка В(&Услуги)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОборудованиеСотрудниковDICOM.Сотрудник,
		|	ОборудованиеСотрудниковDICOM.Оборудование
		|ПОМЕСТИТЬ ОборудованиеСотрудника
		|ИЗ
		|	РегистрСведений.ОборудованиеСотрудниковDICOM КАК ОборудованиеСотрудниковDICOM
		|ГДЕ
		|	ОборудованиеСотрудниковDICOM.Сотрудник = &Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОборудованиеСотрудника.Сотрудник,
		|	ОборудованиеСотрудника.Оборудование,
		|	ОборудованиеУслуг.Номенклатура
		|ИЗ
		|	ОборудованиеУслуг КАК ОборудованиеУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборудованиеСотрудника КАК ОборудованиеСотрудника
		|		ПО ОборудованиеУслуг.Оборудование = ОборудованиеСотрудника.Оборудование";
	
	Запрос.УстановитьПараметр("Сотрудник", Врач);
	Запрос.УстановитьПараметр("Услуги", мУслуги);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	// Заполняем буфер услугами с оборудованием, доступным для текущего сотрудника
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отбор = Новый Структура("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);	
		НайденныеУслуги = Услуги.НайтиСтроки(Отбор);
		Для каждого нУслуга из НайденныеУслуги Цикл
			стрКопия = КопияУСлуг.Добавить();
			ЗаполнитьЗначенияСвойств(стрКопия, нУслуга);
			ЗаполнитьЗначенияСвойств(стрКопия, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	// Обновляем услуги из буфера
	Услуги.Очистить();
	Услуги.Загрузить(КопияУслуг);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьСтруктуруВРегистр(Знач ПоляРегистра, Прием)
	Если DICOMРаботаСДрайвером.ПолучитьКаталогФайловWorkList() = Неопределено Тогда
		Возврат Новый Структура("Результат, ТекстОшибки", Ложь, "Не задана настройка DICOM, каталог файлов WorkList.");
	КонецЕсли;
	
	ОтборИспользуемыхУслуг = Новый Структура("Выбрана", Истина);
	ИспользуемыеУслуги = Услуги.НайтиСтроки(ОтборИспользуемыхУслуг);
	Для Каждого Услуга из ИспользуемыеУслуги Цикл
		ОтборПоУИДу = Новый Структура("УникальныйИдентификатор", Строка(Услуга.УникальныйИдентификатор));
		НайденныеПоля = ПоляРегистра.НайтиСтроки(ОтборПоУИДу);
		Для каждого СтрокаПолей из НайденныеПоля Цикл
			WL = РегистрыСведений.DicomWorkLists.СоздатьНаборЗаписей();
			WL.Отбор.УникальныйИдентификаторИсследования.Установить(СтрокаПолей.УникальныйИдентификаторИсследования);
			WL.Прочитать();	
			ЗаписьWL = WL.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьWL, СтрокаПолей);
			ЗаписьWL.СозданФайл = Истина;
			ЗаписьWL.Прием = Прием;
			WL.ПроверитьЗаполнение();
			Попытка
				WL.Записать();
				Возврат Новый Структура("Результат, ТекстОшибки", Истина, "");
			Исключение
				Возврат Новый Структура("Результат, ТекстОшибки", Ложь, "Не удалось записать регистр сведений DicomWorkLists.");
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СохранитьИЗапуститьНаСервере()
	// запись данных в регистр
	Возврат ЗаписатьСтруктуруВРегистр(СформироватьСтруктуруИзДанныхФормы(), Прием);
	
КонецФункции

&НаКлиенте
Процедура УслугиПриАктивизацииСтрокиНаСервере(УИД, Оборудование)
	Отбор = Новый Структура("УникальныйИдентификатор, Оборудование", Строка(УИД), Оборудование);
	НайденныеЗначения = Кэш.НайтиСтроки(Отбор);
	Для каждого стр из НайденныеЗначения Цикл
		Для каждого Колонка из КолонкиКэша Цикл
			ЭтаФорма[Колонка.ИмяКолонки] = стр[Колонка.ИмяКолонки];
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура АвтозаполнитьИсследования(Данные, Услуги, Пациент)
		
	ОборудованиеСУслугами = Новый ТаблицаЗначений();
	ОборудованиеСУслугами.Колонки.Добавить("Номенклатура",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОборудованиеСУслугами.Колонки.Добавить("Оборудование",	Новый ОписаниеТипов("СправочникСсылка.Оборудование"));
	ОборудованиеСУслугами.Колонки.Добавить("AETitle", 		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	ОборудованиеСУслугами.Колонки.Добавить("MODALITY",		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	ОборудованиеСУслугами.Колонки.Добавить("УИД",			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(64)));
	
	// мУслуги = новый Массив();
	Для каждого эл из Услуги Цикл
		// мУслуги.Добавить(эл.Номенклатура);
		Строка = ОборудованиеСУслугами.Добавить();
		Строка.Номенклатура = эл.Номенклатура;
		Строка.MODALITY		= эл.Номенклатура.DICOMModality.Код;
		Строка.Оборудование = эл.Оборудование;
		Строка.AETitle		= эл.Оборудование.AETitle.Наименование;	
		Строка.УИД 			= Строка(эл.УникальныйИдентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОСУ.Номенклатура,
	|	ОСУ.MODALITY,
	|	ОСУ.Оборудование,
	|	ОСУ.AETitle,
	|	ОСУ.УИД
	|ПОМЕСТИТЬ ОСУ
	|ИЗ
	|	&ОСУ КАК ОСУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОСУ.Номенклатура,
	|	ОСУ.MODALITY,
	|	ОСУ.Оборудование,
	|	ОСУ.AETitle,
	|	ОСУ.УИД,
	|	Номенклатуры.НаименованиеПолное,
	|	Номенклатуры.Код,
	|	Номенклатуры.Артикул,
	|	Номенклатуры.DICOMModality.Код КАК DICOMModality
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	ОСУ КАК ОСУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатуры
	|		ПО ОСУ.Номенклатура = Номенклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.Фамилия,
	|	Клиенты.Имя,
	|	Клиенты.Отчество,
	|	Клиенты.Пол,
	|	Клиенты.ДатаРождения,
	|	Клиенты.Ссылка КАК Клиент,
	|	Клиенты.Код
	|ПОМЕСТИТЬ ДанныеПациента
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка = &Пациент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПациента.Фамилия КАК Фамилия,
	|	ДанныеПациента.Имя КАК Имя,
	|	ДанныеПациента.Отчество КАК Отчество,
	|	ДанныеПациента.Пол КАК Пол,
	|	ДанныеПациента.ДатаРождения КАК PatientBD,
	|	ДанныеПациента.Клиент КАК Patient,
	|	Услуги.НаименованиеПолное КАК НаименованиеУслуги,
	|	Услуги.Код,
	|	Услуги.Артикул,
	|	Услуги.DICOMModality КАК ModalityType,
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.AETitle,
	|	Услуги.УИД,
	|	Услуги.Оборудование,
	|	ДанныеПациента.Код КАК ПациентКод
	|ИЗ
	|	Услуги КАК Услуги
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеПациента КАК ДанныеПациента
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("Пациент", Пациент);
	Запрос.УстановитьПараметр("ОСУ", ОборудованиеСУслугами);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Интерфейс = DICOMРаботаСДрайверомКлиентСервер.ПолучитьИнтерфейсDICOM();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НСтр = Данные.Добавить();
			НСтр.УникальныйИдентификатор				= Выборка.УИД;
			НСтр.УникальныйИдентификаторИсследования	= Новый УникальныйИдентификатор;
			Нстр.Оборудование							= Выборка.Оборудование;
			НСтр.УникальныйИдентификатор				= Выборка.УИД;
			НСтр.ДобавленоПоЗапросу						= Истина;
			
			НСтр.PatientName	= DICOMОбщий.ПрямаяТранслитерация(Выборка.Фамилия) + " "
								+ DICOMОбщий.ПрямаяТранслитерация(Выборка.Имя) + " "
								+ DICOMОбщий.ПрямаяТранслитерация(Выборка.Отчество);
						
			НСтр.BirthDay	= Формат(Выборка.PatientBD, "ДФ=yyyyMMdd");
			НСтр.Modality	= DICOMОбщий.ПрямаяТранслитерация(Выборка.ModalityType);
			НСтр.PatientId	= DICOMРаботаСДрайвером.ПрямаяТранслитерация(МедКарта.Наименование);
			НСтр.RequestedProcedureDescription		= DICOMРаботаСДрайвером.ПрямаяТранслитерация(Выборка.НаименованиеУслуги)
													+ " "
													+ DICOMРаботаСДрайвером.ПрямаяТранслитерация(Выборка.Артикул);
			НСтр.RequestedProcedureID				= Выборка.УИД;
			НСтр.RequestedProcedurePriority			= "LOW";
			НСтр.RequestingPhysician				= DICOMРаботаСДрайвером.ПрямаяТранслитерация(Врач.Имя);
			НСтр.ScheduledPerformingPhysiciansName	= DICOMРаботаСДрайвером.ПрямаяТранслитерация(Врач.Имя);
			НСтр.ScheduledProcedureStepDescription	=
			DICOMРаботаСДрайвером.ПрямаяТранслитерация(Выборка.Артикул)
			+ " "
			+ DICOMРаботаСДрайвером.ПрямаяТранслитерация(Выборка.НаименованиеУслуги);
			НСтр.ScheduledProcedureStepID = "0";
			НСтр.ScheduledProcedureStepLocation		= DICOMРаботаСДрайвером.ПрямаяТранслитерация(Выборка.Оборудование.Наименование);
			НСтр.ScheduledProcedureStepStartDate	= Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
			НСтр.ScheduledProcedureStepStartTime	= Формат(ТекущаяДата() + 60, "ДФ=HHmmss");
			
			Если Выборка.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				НСтр.Sex = "Female";	
			ИначеЕсли Выборка.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				НСтр.Sex = "Male";
			Иначе
				НСтр.Sex = "Undefine";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НСтр.StudyInstanceUID) Тогда
				СгенерированныйУИД = Интерфейс.GenerateUniqueIdentifier("123");
				// СгенерированныйУИД = "123456";
				НСтр.StudyInstanceUID = Сред(СгенерированныйУИД, 1, СтрДлина(СгенерированныйУИД) - 1);
				// для отладки
				// НСтр.StudyInstanceUID = "1.3.46.670589.5.2.10.2156913941.892665384.993397";
			КонецЕсли;

			НСтр.ScheduledStationAETitle	= Выборка.AETitle;
		    НСтр.Ответственный				= ПараметрыСеанса.ТекущийПользователь;
			НСтр.СтатусИсследования			= Перечисления.СтатусыИсследованийDICOM.PLANNED;
			
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти
