#Область РазделОписанияПеременных
Перем мУчетнаяПолитика; 
#КонецОбласти

#Область ПрограммныйИнтерфейс
// Расчитывает сумму к оплате по документу
//
// Возвращаемое значение:
//  Число - Сумма
//
Функция РассчитатьСуммуВсего() Экспорт
	
	Возврат Состав.Итог("Сумма");
	                                                                                     
КонецФункции
#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаСостава) 

	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры" , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ВидНоменклатуры"     , "Номенклатура.ВидНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Количество"          , "Количество * ВЫБОР КОГДА Номенклатура.ВидНоменклатуры = Значение(Перечисление.ВидыНоменклатуры.Материал) 
													|ТОГДА Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
												    |ИНАЧЕ 1 КОНЕЦ");
	СтруктураПолей.Вставить("Цена"                , "ЦенаСоСкидкой");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	
	РезультатЗапросаПоРаботам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоРаботам.Выгрузить();
	
	ТаблицаСостава = СформироватьТаблицуСтрокДокумента();
	ТаблицаСостава.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Цена, ЕдиницаИзмерения, ИгнорироватьДолг", "Количество, Сумма");	
	
КонецПроцедуры // ПодготовитьТаблицыДокумента()

// Проверяет правильность заполнения строк табличной части.
//
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяТабличнойЧасти = "Товары")
                                                           
	// Укажем, что надо проверить
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");
	Если не мУчетнаяПолитика.РазрешитьПродажуПоНулевойСтоимости Тогда
		СтруктураОбязательныхПолей.Вставить("Сумма");
	КонецЕсли;
	
	МетаданныеРеквизиты = Метаданные().ТабличныеЧасти.Состав.Реквизиты;

	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части: '"),СокрЛП(СтрокаТаблицы.НомерСтроки));
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Если КлючЗначение.Ключ = "ЕдиницаИзмерения" И СтрокаТаблицы.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Материал Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если не ЗначениеЗаполнено(Значение) Тогда // Надо ругаться
				Если не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда // Стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнено значение реквизита ""%1""!'"),СокрЛП(ПредставлениеРеквизита));
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверкаОбразованияОтрицательныхОстатков(Отказ)
	
	// Проверка, что после изменения проведенного документа не образовались отрицательные остатки.
	ТаблицаНехватки = Документы.КомплексныйРасчетКлиента.ПроверитьОбразованиеОтрицательныхОстатковПоИзмененномуРасчету(Ссылка, Отказ);
	Если ТаблицаНехватки.Количество() <> 0 Тогда
		
		ТекстСообщения = НСтр("ru='Изменение документа влечет образование отрицательных остатков по его услугам!'"); 
		Для Каждого СтрокаТаблицы Из ТаблицаНехватки Цикл
			ТекстПерерасход = НСтр("ru='перерасход'");
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстСообщения,
				КомплексныеРасчетыКлиентовКлиентСервер.СформироватьПредставлениеСтрокиКомплексногоРасчета(СтрокаТаблицы) + 
				" - " + ТекстПерерасход + ": " + (-СтрокаТаблицы.Количество), Символы.ПС);
		КонецЦикла;
			
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПередПроведением(Отказ, ТаблицаСостава)
	
	// Проверим, что нет 2 одинаковых строк с разной игнорируемостью долга.
	КопияТаблицаСостава = ТаблицаСостава.Скопировать();
	
	СтруктураКлюча = Справочники.КлючиСтрокКомплексныхРасчетов.ПолучитьСтруктуруИзмеренийКлючаСтроки();
	СтрокаСверткиКлюча = "";
	Для Каждого КлючЗначение Из СтруктураКлюча Цикл
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаСверткиКлюча, КлючЗначение.Ключ, ",");
	КонецЦикла;
	
	КопияТаблицаСостава.Свернуть(СтрокаСверткиКлюча);
	КопияТаблицаСостава.Колонки.Добавить("КоличествоСтрок");
	КопияТаблицаСостава.ЗаполнитьЗначения(1, "КоличествоСтрок");
	
	СтрокаСверткиКлюча = СтрЗаменить(СтрокаСверткиКлюча, "ИгнорироватьДолг", "");
	СтрокаСверткиКлюча = СтрЗаменить(СтрокаСверткиКлюча, ",,", "");
	
	КопияТаблицаСостава.Свернуть(СтрокаСверткиКлюча, "КоличествоСтрок");
	
	СтрокиОшибок = КопияТаблицаСостава.НайтиСтроки(Новый Структура("КоличествоСтрок", 2));
	
	Если СтрокиОшибок.Количество() <> 0 Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка при проведении документа:
							|не допускается наличие одинаковых строк с разным значением признака ""Игнорировать долг""!'");
		ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуСтрокДокумента()
	
	ТаблицаСостава = Состав.Выгрузить(,"Номенклатура, ХарактеристикаНоменклатуры, ЦенаСоСкидкой, ЕдиницаИзмерения, ИгнорироватьДолг, Примечание, Количество, Сумма");
	ТаблицаСостава.Колонки.ЦенаСоСкидкой.Имя = "Цена";
	
	Возврат ТаблицаСостава;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Был ли проведен документ перед изменением
	ДополнительныеСвойства.Вставить("СсылкаПроведен", Ссылка.Проведен);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаСостава;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	//флВыполнен = СостояниеЗаказаНаИзготовление = Перечисления.СостоянияЗаказаНаИзготовление.Выполнен;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Укажем, что надо проверить:                         
	СтруктураОбязательныхПолей = Новый Структура("Клиент");           
	
	// Вызываем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаСостава);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//
	ПроверитьЗаполнениеПередПроведением(Отказ, ТаблицаСостава);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаСостава, Отказ, Заголовок);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроверкаОбразованияОтрицательныхОстатков(Отказ);
	
	Если Не Отказ Тогда
		СостоянияЗаказов = РегистрыСведений.СостоянияЗаказовНаИзготовление.СоздатьНаборЗаписей();
		СостоянияЗаказов.Отбор.Документ.Установить(Ссылка);
		СостоянияЗаказов.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = Вид.ПрефиксНумерации;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьСоставПоВиду = Истина;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Вид") Тогда 
			Вид = ДанныеЗаполнения.Вид;
			Прейскурант = Вид.Прейскурант;
			ДопустимыйДолг	 = Вид.ДопустимыйДолг;
			ПроцентАванса	 = Вид.ПроцентАванса;
			ИгнорироватьДолг = Вид.ИгнорироватьДолг;	
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда 
			ДокументОснование = ДанныеЗаполнения.ДокументОснование;
			Клиент = ДокументОснование.Клиент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Прейскурант) Тогда
			Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(РаботаСДокументамиСервер.ФилиалДокумента(ЭтотОбъект));
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Прием") Тогда
			
			Клиент = ДанныеЗаполнения.Прием.Клиент;
			ДокументОснование = ДанныеЗаполнения.Прием;
			
			// Заполнение состава расчета планом лечения.
			Если ДанныеЗаполнения.Свойство("НаОстатокПланаЛечения") И ДанныеЗаполнения.НаОстатокПланаЛечения = Истина Тогда
				ПланЛечения = МедицинскаяДеятельность.ПланЛеченияСВыполнением(ДанныеЗаполнения.Прием.ПервичныйПрием, Ложь);
			Иначе
				ПланЛечения = ПланЛеченияПолныйДляОбработкаЗаполнения(ДокументОснование);
			КонецЕсли;
			
			Если ПланЛечения.Количество() <> 0 Тогда
			
				ЗаполнитьСоставПоВиду = Ложь;
				
				Для Каждого СтрокаОстатокПлана Из ПланЛечения Цикл
					Если СтрокаОстатокПлана.Остаток > 0
					   И ТипЗнч(СтрокаОстатокПлана.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					Тогда
						СтрокаСостава = Состав.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСостава, СтрокаОстатокПлана);
						СтрокаСостава.Количество = СтрокаОстатокПлана.Остаток;
						СтрокаСостава.Примечание = СтрокаОстатокПлана.Комментарий;
					
						Если СтрокаСостава.Сумма <> 0
							И СтрокаСостава.Цена = 0
						Тогда
							Если СтрокаСостава.Количество = 0 Тогда
								СтрокаСостава.Сумма = 0;
							Иначе
								СтрокаСостава.Цена = СтрокаСостава.Сумма/СтрокаСостава.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Прейскурант) Тогда
					
					ПроцентСкидкиВида = ?(ЗначениеЗаполнено(Вид), Вид.ПроцентСкидки,0);
					
					ТаблицаСостава = Состав.Выгрузить();
					Ценообразование.ПолучитьЦеныНоменклатуры(ТаблицаСостава, ТекущаяДата(), Прейскурант);
					Состав.Загрузить(ТаблицаСостава);
					Для Каждого СтрокаСостава Из Состав Цикл
						СтрокаСостава.ПроцентСкидки = ПроцентСкидкиВида;
						СтрокаСостава.ЦенаСоСкидкой = СтрокаСостава.Цена * (1 - ПроцентСкидкиВида/100);
						
						Если СтрокаСостава.Сумма = 0 Тогда
							СтрокаСостава.Сумма = СтрокаСостава.ЦенаСоСкидкой * СтрокаСостава.Количество;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

	Если ЗначениеЗаполнено(Вид) Тогда
		ЗаполнитьСпецификацию();
		
		Если ЗаполнитьСоставПоВиду Тогда
			Документы.КомплексныйРасчетКлиента.ЗаполнитьСоставПоВиду(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПланЛеченияПолныйДляОбработкаЗаполнения(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПервичныйПрием", ДокументОснование.ПервичныйПрием);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыЛечения.Номенклатура КАК Номенклатура,
	|	СУММА(ПланыЛечения.Количество) КАК Остаток,
	|	//%Сумма%
	|	ПланыЛечения.Комментарий
	|ИЗ
	|	РегистрСведений.ПланыЛечения КАК ПланыЛечения
	|ГДЕ
	|	ПланыЛечения.Номенклатура ССЫЛКА Справочник.Номенклатура
	|	И ПланыЛечения.ПервичныйПрием = &ПервичныйПрием
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыЛечения.Номенклатура,
	|	ПланыЛечения.Комментарий,
	|	ПланыЛечения.ПорядокЭлемента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланыЛечения.ПорядокЭлемента"
	;
	Если Метаданные.РегистрыСведений.ПланыЛечения.Ресурсы.Найти("Сумма") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Сумма%", "СУММА(Сумма) КАК Сумма,");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьСпецификацию()
	УправлениеЗаказами.ЗаполнитьСпецификацииПоЗначениямЗаполнения(ЭтотОбъект);	
	УправлениеЗаказами.ЗаполнитьСпецификацииПоПараметрамHTML(ЭтотОбъект);
	УправлениеЗаказами.УпорядочитьПараметрыСпецификации(ЭтотОбъект);
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаСостава, Отказ, Заголовок)
	
	Если Вид.Тип <> Перечисления.ТипыКомплексныхРасчетовКлиентов.ПредварительныйРасчет Тогда
		
		Справочники.КлючиСтрокКомплексныхРасчетов.ДобавитьКлючиПозицийРасчета(ТаблицаСостава);
		
		Для Каждого СтрокаСостава Из ТаблицаСостава Цикл
			Движение = Движения.НоменклатураКомплексныхРасчетовКлиентов.ДобавитьПриход();
			Движение.Период = НачалоДня(Дата);
			Движение.КомплексныйРасчет = Ссылка;
			Движение.КлючСтроки	= СтрокаСостава.КлючСтроки;
			Движение.Количество	= СтрокаСостава.Количество;
		КонецЦикла;
		Движения.НоменклатураКомплексныхРасчетовКлиентов.Записать();
		
		ПроверкаОбразованияОтрицательныхОстатков(Отказ);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти