&НаКлиенте
Перем мПредыдущееЗначениеВида;

&НаКлиенте
Перем мПроцентСкидкиВидаРасчета;

&НаКлиенте
Перем мШаблонСтрокиСостоянияОплаты;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма, Ложь);
	
	ЗаполнитьЦеныНовогоДокумента();
	
	мПредыдущийПрефиксНумерации = Объект.Вид.ПрефиксНумерации;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Объект.Вид.Пустая() Тогда
			ПроверитьПодставитьВид();
		КонецЕсли;
		
		Если Объект.Спецификация.Количество() = 0 Тогда
			ЗаполнитьСпецификацию(Ложь);
		КонецЕсли;
	Иначе
		ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	КонецЕсли;
	
	// Установка текущего элемента исходя из заполненности полей.
	Если Объект.Клиент.Пустая() Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Клиент;
	ИначеЕсли Объект.Вид.Пустая() Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Вид;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Состав;
	КонецЕсли;
	
	ДанныеВидаРасчета = ОбщегоНазначенияРасширенный.ПреобразоватьСсылочныйОбъектВСтруктуруРекурсивно(Объект.Вид, , Истина, 1);
	
	УправлениеЗаказами.УстановитьУсловноеОформлениеЭтапамРабот(ЭтаФорма, "Объект.ЭтапыРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	УстановитьДоступностьПараметровДолга();
	ПроверитьУстановитьДоступностьЭлементовПроизводственногоЗаказа();
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая()
		И Объект.Состав.Количество() = 0
	Тогда 
		ВидПриИзменении(Элементы.Вид, Истина);
	ИначеЕсли ЗначениеЗаполнено(Объект.Вид) Тогда
		мПроцентСкидкиВидаРасчета = ДопСерверныеФункции.ПолучитьРеквизит(Объект.Вид, "ПроцентСкидки");
	КонецЕсли;
	
	мПредыдущееЗначениеВида = Объект.Вид;
	мШаблонСтрокиСостоянияОплаты = Элементы.ДекорацияОплата.Заголовок;
	ОбновитьДанныеПоОплате();
	
	УстановитьОтборСостоянийЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// Формирование списка выполенных этапов работ
	ВыполненныеЭтапы = КомплексныеРасчетыКлиентовСервер.ПолучитьВыполненныхЭтаповРаботИзТаблицы(Объект.ЭтапыРабот);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ВыполненныеЭтапыРабот", ВыполненныеЭтапы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(ТекущийОбъект,,ЭтаФорма);	
	ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьДанныеПоОплате();
	Оповестить("ИзмененыЭтапыРаботЗаказа", Объект.Ссылка, Объект.Ссылка);
	УстановитьОтборСостоянийЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатусЗаказа"
		И Параметр = Объект.Ссылка
	Тогда
		Элементы.СостоянияЗаказов.Обновить();
	ИначеЕсли ИмяСобытия = "ИзмененыЭтапыРаботЗаказа" И 
		Параметр = Объект.Ссылка И Источник <> Объект.Ссылка
	Тогда
		ЗаполнитьЭтапыРаботСОтметкамиВыполнения();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхОплатыКомплексногоРасчета" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Сделка") И Объект.Ссылка = Параметр.Сделка Тогда 
			ОбновитьДанныеПоОплате();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	ДанныеЗаполнения = ПолучитьДанныеЗаполненияСтрокиСоставаПриИзмененииНоменклатуры(Объект, Элементы.Состав.ТекущаяСтрока);
	
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаполненияСтрокиСоставаПриИзмененииНоменклатуры(Знач Объект, ТекущаяСтрока)
	
	СтрокаТабличнойЧасти = Объект.Состав.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Результат = Новый Структура("ЕдиницаИзмерения, Коэффициент, Цена, ЦенаСоСкидкой, Сумма");
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
		И СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал
	Тогда
		ЕдиницаИзмерения = Ценообразование.ПолучитьЕдиницуПродажиНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		Если СтрокаТабличнойЧасти.ЕдиницаИзмерения <> ЕдиницаИзмерения Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент = ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	дкУстановитьЦенуСтрокиТабЧасти(ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КомплексныйРасчетКлиента")),"Состав", СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ЦенаСоСкидкой = СтрокаТабличнойЧасти.Цена * (1 - СтрокаТабличнойЧасти.ПроцентСкидки/100);
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаСоСкидкой;
	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаТабличнойЧасти);
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиенте
Процедура ВидПриИзменении(Элемент, ПриОткрытии = Ложь)
	
	Если ЗначениеЗаполнено(Объект.Вид) Тогда
		мПроцентСкидкиВидаРасчета = ДопСерверныеФункции.ПолучитьРеквизит(Объект.Вид, "ПроцентСкидки");
	КонецЕсли;
	
	Если Объект.Вид = мПредыдущееЗначениеВида Тогда
		Возврат;
	ИначеЕсли Объект.Вид.Пустая() Тогда
		мПредыдущееЗначениеВида = Объект.Вид;
		мПроцентСкидкиВидаРасчета = 0;
		Объект.Спецификация.Очистить();
		Возврат;
	КонецЕсли;
	
	ДанныеВидаРасчета = ОбщегоНазначенияРасширенный.ПреобразоватьСсылочныйОбъектВСтруктуруРекурсивно(Объект.Вид, , Истина, 1);
	
	ОчиститьНомер = Ложь;
	ПрефиксНумерации = ДанныеВидаРасчета.ПрефиксНумерации;
	Если ПрефиксНумерации <> мПредыдущийПрефиксНумерации Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Ответ = Вопрос("Изменение вида приведет к изменению номера документа. Продолжить?", РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Объект.Вид = мПредыдущееЗначениеВида;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ОчиститьНомер = Истина;
	КонецЕсли;
	
	Если ПриОткрытии Или 
		(Не ЗначениеЗаполнено(мПредыдущееЗначениеВида) И Объект.Состав.Количество() = 0)
	Тогда
		// Заполнение нового документа
		Ответ = "ПараметрыСостав";
	Иначе
		ВариантыОтвета = Новый СписокЗначений;
		ВариантыОтвета.Добавить("Параметры", "Параметры расчета");
		Если ДанныеВидаРасчета.РазрешитьМенятьПараметрыДолга Тогда
			ВариантыОтвета.Добавить("Состав", "Номенклатура расчета");
		КонецЕсли;
		ВариантыОтвета.Добавить("ПараметрыСостав", "Параметры и Номенклатуру");
		Если ДанныеВидаРасчета.РазрешитьМенятьПараметрыДолга Тогда
			ВариантыОтвета.Добавить("НеИзменять", "Не изменять");
		КонецЕсли;
		Если ДанныеВидаРасчета.РазрешитьМенятьПараметрыДолга Тогда
			ВариантыОтвета.Добавить(КодВозвратаДиалога.Отмена, "Отменить действие");
		КонецЕсли;
		
		Ответ = Вопрос(НСтр("ru='Вид расчета изменился. Какие данные расчета следует перезаполнить?'"), ВариантыОтвета, 30);
		Если Ответ = КодВозвратаДиалога.Отмена Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Объект.Вид = мПредыдущееЗначениеВида;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(Ответ, "Параметры") <> 0 Тогда
		// Перезаполнение прейскуранта, долга.
		Объект.Прейскурант		= ДанныеВидаРасчета.Прейскурант;
		Объект.ДопустимыйДолг	= ДанныеВидаРасчета.ДопустимыйДолг;
		Объект.ПроцентАванса	= ДанныеВидаРасчета.ПроцентАванса;
		Объект.ИгнорироватьДолг = ДанныеВидаРасчета.ИгнорироватьДолг;
	КонецЕсли;
	
	Если Найти(Ответ, "Состав") <> 0 Тогда
		ЗаполнитьСоставПоВидуСервер();
	КонецЕсли;
	
	мПредыдущееЗначениеВида	= Объект.Вид;
	мПредыдущийПрефиксНумерации = ПрефиксНумерации;
	Если ОчиститьНомер Тогда 		
		Объект.Номер = "";
	КонецЕсли;
	
	УстановитьДоступностьПараметровДолга();
	
	ПроверитьУстановитьДоступностьЭлементовПроизводственногоЗаказа();
	СохранятьДобавленныеВручную = УточнитьНеобходимостьСохраненияДобавленныхВручнуюПараметровСпецификации();
	ЗаполнитьСпецификацию(СохранятьДобавленныеВручную);
	ОбновитьДанныеПоОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюПоВиду(Команда)
	
	СохранятьДобавленныеВручную = УточнитьНеобходимостьСохраненияДобавленныхВручнуюПараметровСпецификации();
	ЗаполнитьСпецификацию(СохранятьДобавленныеВручную);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦеныПоВидуСервер()
	Документы.КомплексныйРасчетКлиента.ЗаполнитьЦеныСкидкиПоВиду(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЦеныПоВиду(Команда)
	
	ПерезаполнитьЦеныПоВидуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПоВидуСервер(УдалитьСтарые = Истина)
	Документы.КомплексныйРасчетКлиента.ЗаполнитьСоставПоВиду(Объект, УдалитьСтарые);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПоВиду(Команда)
	
	Если ЗначениеЗаполнено(Объект.Вид) Тогда
		
		Если Команда.Имя = "ЗаполнитьСоставПоВиду" Тогда
		
			Если Объект.Состав.Количество() = 0
				Или Вопрос(НСтр("ru='Состав документа не пустой. Перезаполнить?'"), РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК
			Тогда
				ЗаполнитьСоставПоВидуСервер(Истина); // Перезаполнение с удалением старых строк.
			КонецЕсли;
		Иначе
			ЗаполнитьСоставПоВидуСервер(Ложь); // Дополнение из вида (даже если ранее уже дополнено).
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Вид документа не выбран!'"));
	КонецЕсли;
	
	ПроверитьУстановитьДоступностьЭлементовПроизводственногоЗаказа();
	
	Если Команда.Имя = "ЗаполнитьСоставПоВиду" Тогда
		СохранятьДобавленныеВручную = УточнитьНеобходимостьСохраненияДобавленныхВручнуюПараметровСпецификации();
		ЗаполнитьСпецификацию(СохранятьДобавленныеВручную);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКоличествоПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Товары.Количество", Элементы.Состав.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЦенаПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Товары.Цена", Элементы.Состав.ТекущиеДанные, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоставПроцентСкидкиПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Товары.ПроцентСкидки", Элементы.Состав.ТекущиеДанные, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЦенаСоСкидкойПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Товары.ЦенаСоСкидкой", Элементы.Состав.ТекущиеДанные, ЭтаФорма);
КонецПроцедуры

// Обработка изменения реквизитов документа
// Параметры
//  Имя			– Строка			– Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ЭтаФорма	– Форма				– Ссылка на форму документа. 
// 									  Если значение неопределено, производится программная обработка реквизитов.
//  ТекСтрока	– СтрокаТабличнойЧасти – Ссылка на строку табличной части документа, реквизит которой обрабатывается.
// 										 Имеет смысл только для табличных частей документов.
//  ДопПараметры– Стркутура			– Структура, содержащая дополнительные параметры обработки реквизита.
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
&НаКлиенте
Процедура ОбработкаРеквизитаУпр(Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено)

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// ОБРАБОТКА РЕКВИЗИТОВ ДОКУМЕНТА
	Если Имя="Товары.Количество" Тогда
		
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.ЦенаСоСкидкой;
		ОбновитьСтоимостьДокумента();
		
	ИначеЕсли Имя="Товары.ЕдиницаИзмерения" Тогда
		
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		ОбновитьСтоимостьДокумента();
		
	ИначеЕсли Имя="Товары.Цена" Тогда
		
		ТекСтрока.ЦенаСоСкидкой = ТекСтрока.Цена * (1 - ТекСтрока.ПроцентСкидки/100);
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.ЦенаСоСкидкой;
		
		ОбновитьСтоимостьДокумента();
		
	ИначеЕсли Имя="Товары.Сумма" Тогда
		
		// Расчет цены со скидкой
		Если ТекСтрока.Количество = 0 Тогда
			ТекСтрока.ЦенаСоСкидкой = ТекСтрока.Сумма;
		Иначе
			ТекСтрока.ЦенаСоСкидкой = ТекСтрока.Сумма / ТекСтрока.Количество;
		КонецЕсли;
		
		// Расчет цены
		Если ТекСтрока.ПроцентСкидки = 100 Тогда
			ТекСтрока.Цена = 0;
		Иначе
			ТекСтрока.Цена = ТекСтрока.ЦенаСоСкидкой / (1 - ТекСтрока.ПроцентСкидки/100);
		КонецЕсли;
		
		ОбновитьСтоимостьДокумента();
		
	ИначеЕсли Имя = "Товары.ПроцентСкидки" Тогда
		
		ТекСтрока.ЦенаСоСкидкой = ТекСтрока.Цена * (1 - ТекСтрока.ПроцентСкидки/100);
		
		// Округление скидки
		Если ТекСтрока.ЦенаСоСкидкой <> 0 Тогда
			ПорядокОкругления = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПорядокОкругленияПослеСкидки");
			Если ЗначениеЗаполнено(ПорядокОкругления) Тогда
				ТекСтрока.ЦенаСоСкидкой	= Ценообразование.ОкруглитьЦену(ТекСтрока.ЦенаСоСкидкой, ПорядокОкругления, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.ЦенаСоСкидкой;
		
		ОбновитьСтоимостьДокумента();
		
	ИначеЕсли Имя = "Товары.ЦенаСоСкидкой" Тогда
		
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.ЦенаСоСкидкой;
		
		// Расчет процента скидки
		Если ТекСтрока.Цена = 0 Тогда
			ТекСтрока.Цена = ТекСтрока.ЦенаСоСкидкой / (1 - ТекСтрока.ПроцентСкидки/100);
		Иначе
			ТекСтрока.ПроцентСкидки = 100 * (ТекСтрока.Цена - ТекСтрока.ЦенаСоСкидкой) / ТекСтрока.Цена;
		КонецЕсли;
		
		ОбновитьСтоимостьДокумента();
			
	Иначе 
		РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрейскурантПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Прейскурант)
		И Объект.Состав.Количество() <> 0
	Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрейскурантПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru='Пересчитать цены документа?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрейскурантПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьЦеныСостава();
		ОбновитьДанныеПоОплате();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦеныСостава()
	
	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		СтрокаСостава.Цена = Ценообразование.ПолучитьЦену(Объект.Прейскурант, СтрокаСостава.Номенклатура, Объект.Дата, СтрокаСостава.ХарактеристикаНоменклатуры, СтрокаСостава.ЕдиницаИзмерения).Цена;
		
		СтрокаСостава.ЦенаСоСкидкой = СтрокаСостава.Цена * (1 - СтрокаСостава.ПроцентСкидки/100);
		СтрокаСостава.Сумма = СтрокаСостава.Количество * СтрокаСостава.ЦенаСоСкидкой;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПараметровДолга()
	
	ЭтоПредРасчет = (ДанныеВидаРасчета.Тип = ПредопределенноеЗначение("Перечисление.ТипыКомплексныхРасчетовКлиентов.ПредварительныйРасчет"));
	ЭтоПроизводственныйРасчет = (ДанныеВидаРасчета.Тип = ПредопределенноеЗначение("Перечисление.ТипыКомплексныхРасчетовКлиентов.ПроизводственныйРасчет"));
	
	Элементы.ГруппаШапкаДолгАванс.Видимость = Не ЭтоПредРасчет;
	Элементы.СоставИгнорироватьДолг.Видимость = Не ЭтоПредРасчет И Не Объект.ИгнорироватьДолг;
	Элементы.ПроцентАванса.Видимость = ЭтоПроизводственныйРасчет;
	Элементы.ДопустимыйДолг.ТолькоПросмотр = Объект.ИгнорироватьДолг;
	
	Если Не ЭтоПредРасчет Тогда
		Элементы.ГруппаШапкаДолгАванс.ТолькоПросмотр = Не (Объект.Вид.Пустая() Или ДанныеВидаРасчета.РазрешитьМенятьПараметрыДолга);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСкидку(Команда)
	
	ПроцентСкидки = 0;
	Если ВвестиЧисло(ПроцентСкидки, НСтр("ru='Укажите общий процент скидки'"),3,1) Тогда
		Для Каждого СтрокаСостава Из Объект.Состав Цикл
			СтрокаСостава.ПроцентСкидки = ПроцентСкидки; 
			СтрокаСостава.ЦенаСоСкидкой = СтрокаСостава.Цена * (1 - СтрокаСостава.ПроцентСкидки/100);
			СтрокаСостава.Сумма = СтрокаСостава.Количество * СтрокаСостава.ЦенаСоСкидкой;
		КонецЦикла;
		ОбновитьСтоимостьДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановитьДоступностьЭлементовПроизводственногоЗаказа()
	
	ЭтоЗаказНаПроизводство = УправлениеЗаказами.ЭтоЗаказНаПроизводство(Объект.Вид);
	
	Элементы.СоставСырье.Видимость		= ЭтоЗаказНаПроизводство;
	Элементы.ГруппаИнформация.Видимость	= ЭтоЗаказНаПроизводство;
	Элементы.Мастерская.Видимость		= ЭтоЗаказНаПроизводство;
	Элементы.ГруппаЭтапыРабот.Видимость = ЭтоЗаказНаПроизводство;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодставитьВид()
	
	Запрос = Новый Запрос();
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВидыКомплексныхРасчетовКлиентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКомплексныхРасчетовКлиентов КАК ВидыКомплексныхРасчетовКлиентов
	|ГДЕ
	|	НЕ ВидыКомплексныхРасчетовКлиентов.ПометкаУдаления";
	ВыборкаПоВидам = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоВидам.Количество() = 1 Тогда
		ВыборкаПоВидам.Следующий();
		Объект.Вид = ВыборкаПоВидам.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Документ) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ТекДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСостоянийЗаказов()
	
	РаботаСФормамиКлиент.УстановитьОтборСписка("Заказ", Объект.Ссылка, СостоянияЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпецификацию(СохранятьДобавленныеВручную = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.Вид) Тогда
		Возврат;	
	КонецЕсли;
	
	Если СохранятьДобавленныеВручную Тогда
		СохраняемыеЗначения = Объект.Спецификация.Выгрузить(Новый Структура("ДобавленАвтоматически", Ложь),);
	КонецЕсли;
	
	Объект.Спецификация.Очистить();
	
	УправлениеЗаказами.ЗаполнитьСпецификацииПоЗначениямЗаполнения(Объект);	
	УправлениеЗаказами.ЗаполнитьСпецификацииПоПараметрамHTML(Объект);
	УправлениеЗаказами.УпорядочитьПараметрыСпецификации(Объект);
	
	Если СохранятьДобавленныеВручную Тогда
		Для Каждого эл Из СохраняемыеЗначения Цикл
			нстрТЧ = Объект.Спецификация.Добавить();
			ЗаполнитьЗначенияСвойств(нстрТЧ, эл);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.Спецификация.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ДобавленАвтоматически
	Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Удалять можно только параметры, добавленные вручную.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставЕдиницаИзмеренияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения)
		Тогда
		ТекущиеДанные.Коэффициент = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УточнитьНеобходимостьСохраненияДобавленныхВручнуюПараметровСпецификации()
	РезультатУточнения = Ложь;
	ОтборДобавленныхВручную = Новый Структура("ДобавленАвтоматически", Ложь);
	СтрокиТЧ = Объект.Спецификация.НайтиСтроки(ОтборДобавленныхВручную);
	Если СтрокиТЧ.Количество() > 0 Тогда
		Если Вопрос(НСтр("ru='Сохранить добавленные вручную параметры спецификации?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РезультатУточнения = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатУточнения;
КонецФункции

&НаКлиенте
Процедура СпецификацияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Спецификация.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.СпецификацияПараметр.ТолькоПросмотр = ТекущиеДанные.ДобавленАвтоматически;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЗаказовПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru='Отмена состояний, установленных документами, возможно только путём их распроведения.'"), 30);
		ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Количество = 1;
		Если ЗначениеЗаполнено(Объект.Вид) Тогда
			Элемент.ТекущиеДанные.ПроцентСкидки = мПроцентСкидкиВидаРасчета;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет сумму документа, сумму оплаты, суммы скидок документа в форм.
&НаКлиенте
Процедура ОбновитьСтоимостьДокумента()
	
	ОбновитьДанныеПоОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОплате()
	
	ДанныеОплаты = КомплексныеРасчетыКлиентов.ПолучитьДанныеПоОплатеРасчета(Объект.Ссылка, Объект.Вид, Объект.Клиент, Объект.Состав.Итог("Сумма"), Объект.ПроцентАванса);
	Элементы.Оплата.Видимость = ДанныеОплаты.ОплатаАктуальна;
	
	Если ДанныеОплаты.ОплатаАктуальна Тогда
		
		СуммаОплаты = ДанныеОплаты.СуммаОплаты;
		
		СуммаДокумента = Объект.Состав.Итог("Сумма");
		Если СуммаДокумента <> 0 Тогда
			ПроцентОплаты = ?(СуммаОплаты = 0, 0, Окр(100 * СуммаОплаты / СуммаДокумента));
		Иначе
			ПроцентОплаты = 100;
		КонецЕсли;
		
		HTMLСтрока = "";
		ФорматДокумент = Новый ФорматированныйДокумент;
		ФорматДокумент.Добавить(мШаблонСтрокиСостоянияОплаты);
		ФорматДокумент.ПолучитьHTML(HTMLСтрока, Новый Структура);
		HTMLСтрока = ТекстHTMLДляСтрокиОплаты(HTMLСтрока, "%ВсегоОплачено", ФорматСуммОплаты(СуммаОплаты), "Blue", , "команда"); 
		
		HTMLСтрока = ТекстHTMLДляСтрокиОплаты(HTMLСтрока, "%Доля", Строка(ПроцентОплаты) + " %", "Blue");
		СуммаАванса = ДанныеОплаты.СуммаАванса;
		Если ДанныеОплаты.АвансАктуален Тогда
			Если СуммаАванса > 0 Тогда
				HTMLСтрока = ТекстHTMLДляСтрокиОплаты(HTMLСтрока, "%АвансКОплате", ФорматСуммОплаты(СуммаАванса), "Red");
			Иначе
				HTMLСтрока = ТекстHTMLДляСтрокиОплаты(HTMLСтрока, "%АвансКОплате", "оплачен", "Green");
			КонецЕсли;
		Иначе
			HTMLСтрока = ТекстHTMLДляСтрокиОплаты(HTMLСтрока, "   Аванс к оплате: %АвансКОплате","");
		КонецЕсли;
		
		HTMLСтрока = ТекстHTMLДляСтрокиОплаты(HTMLСтрока, "%СуммаДокумента", ФорматСуммОплаты(СуммаДокумента), "Blue");
		ФорматДокумент.УстановитьHTML(HTMLСтрока, Новый Структура);
		ДобавитьЦветаСтиляВСтрокуОплаты(ФорматДокумент.Элементы);
		
		Элементы.ДекорацияОплата.Заголовок = ФорматДокумент.ПолучитьФорматированнуюСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстHTMLДляСтрокиОплаты(Знач Строка, Знач Параметр, Знач Значение, HTMLЦвет = "Black", РазмерШрифта = "11pt", Знач Ссылка = Неопределено)
	
	СтрокаЗамены = "<font size=""" + РазмерШрифта + """ color = """ + HTMLЦвет + """>" + Значение + "</font>";
	Если Ссылка <> Неопределено Тогда
		СтрокаЗамены = "<a href=""" + Ссылка + """>" + СтрокаЗамены + "</a>";	
	КонецЕсли;
	Возврат СтрЗаменить(Строка, Параметр, СтрокаЗамены);
	
КонецФункции

&НаКлиенте
Функция ФорматСуммОплаты(Сумма)
	
	Если Сумма = Окр(Сумма) Тогда
		Возврат СокрЛП(Строка(Сумма) + " " + глКраткоеНаименованиеОсновнойВалюты);
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.ФорматСумм(Сумма, глКраткоеНаименованиеОсновнойВалюты)
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЦветаСтиляВСтрокуОплаты(ЭлементыФД)
	
	Для Каждого ЭлементФД Из ЭлементыФД Цикл
		
		Если ТипЗнч(ЭлементФД) = Тип("ТекстФорматированногоДокумента") Тогда
			
			Если ЭлементФД.ЦветТекста = WebЦвета.Синий Тогда
				ЭлементФД.ЦветТекста = ДопСерверныеФункцииПовтИсп.ЦветСтиля("ПоясняющийТекст");
			ИначеЕсли ЭлементФД.ЦветТекста = WebЦвета.Красный Тогда
				ЭлементФД.ЦветТекста = ДопСерверныеФункцииПовтИсп.ЦветСтиля("ПоясняющийОшибкуТекст");
			ИначеЕсли ЭлементФД.ЦветТекста = WebЦвета.Зеленый Тогда
				ЭлементФД.ЦветТекста = ДопСерверныеФункцииПовтИсп.ЦветСтиля("РезультатУспехЦвет");
			КонецЕсли;
			
			Если ЭлементФД.Шрифт.Размер = 11 Тогда
				ЭлементФД.Шрифт = Новый Шрифт(ДопСерверныеФункцииПовтИсп.ШрифтСтиля("КрупныйШрифтТекста"),,,Истина);
			КонецЕсли;
		Иначе
			ДобавитьЦветаСтиляВСтрокуОплаты(ЭлементФД.Элементы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюОплат()
	
	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("КомплексныйРасчет", Объект.Ссылка));
		ФормаОтчета = ПолучитьФорму("Отчет.КомплексныеПрограммыПросмотрИсторииОплат.Форма", ПараметрыФормы);
		ФормаОтчета.СкомпоноватьРезультат();
		ФормаОтчета.Открыть();
		ФормаОтчета.ПользовательскиеНастройкиМодифицированы = Ложь;
		ФормаОтчета.ВариантМодифицирован = Ложь;
		ФормаОтчета.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентАвансаПриИзменении(Элемент)
	
	ОбновитьДанныеПоОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьДолгПриИзменении(Элемент)
	
	УстановитьДоступностьПараметровДолга();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьДанныеПоОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

// Вызывается при создании формы.
&НаСервере
Процедура ЗаполнитьЦеныНовогоДокумента()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Объект.Прейскурант)
			И Не ЗначениеЗаполнено(Объект.Вид)
		Тогда
			Для Каждого СтрокаСостава Из Объект.Состав Цикл
				Если СтрокаСостава.Сумма = 0 Тогда
					дкУстановитьЦенуСтрокиТабЧасти(ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.КомплексныйРасчетКлиента")),"Состав", СтрокаСостава);
					СтрокаСостава.ЦенаСоСкидкой = СтрокаСостава.Цена;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЭтапыРабот

&НаСервере
Процедура ЗаполнитьЭтапыРаботСОтметкамиВыполнения()
	
	Документы.КомплексныйРасчетКлиента.ЗаполнитьЭтапыРаботСОтметкамиВыполнения(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботВыполненПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЭтапыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомплексныеРасчетыКлиентовКлиент.ЭтапыРаботВыполненПриИзменении(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботОтметкаВыполненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЭтапыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомплексныеРасчетыКлиентовКлиент.ЭтапыРаботОтметкаВыполненияПриИзменении(ТекДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекДанные = Элементы.ЭтапыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда 
		ТекДанные.ИдентификаторЭтапа = Строка(Новый УникальныйИдентификатор);
		КомплексныеРасчетыКлиентовКлиент.ЭтапыРаботУстановитьТипИсполнителя(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Объект.ЭтапыРабот.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЭтапыРаботДокументРегистратор Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекДанные.ДокументРегистратор) Тогда 
			ОткрытьЗначение(ТекДанные.ДокументРегистратор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботВнешнийИсполнительПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЭтапыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомплексныеРасчетыКлиентовКлиент.ЭтапыРаботУстановитьТипИсполнителя(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОплатеРасчета(Команда)
	
	ОбновитьДанныеПоОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОплатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьИсториюОплат();
	
КонецПроцедуры

#КонецОбласти
