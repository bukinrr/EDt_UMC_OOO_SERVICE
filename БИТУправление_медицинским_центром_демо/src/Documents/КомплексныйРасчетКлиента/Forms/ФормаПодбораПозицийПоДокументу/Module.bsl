
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КомплексныйРасчет = Параметры.КомплексныйРасчет;
	
	// Перенос позиций, которые уже есть в документе, из которого открывается подбор и свёртка.
	Для Каждого СтрокаПозицииПриемникаПараметр Из Параметры.ПозицииПриемника Цикл
		ЗаполнитьЗначенияСвойств(ПозицииПриемника.Добавить(), СтрокаПозицииПриемникаПараметр);
	КонецЦикла;
	
	ТаблицаПозицииПриемника = РеквизитФормыВЗначение("ПозицииПриемника");
	ТаблицаПозицииПриемника.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена", "Количество");

	ОбщегоНазначения.ЗаполнитьВидНоменклатурыВКоллекции(ТаблицаПозицииПриемника);
	
	ЗначениеВРеквизитФормы(ТаблицаПозицииПриемника, "ПозицииПриемника");
	
	ОбновитьПозицииСервер();
	
	ПоказыватьОбщееКоличество = РаботаСФормамиСервер.ПолучитьНастройкуФормы("ФормаПодборКомплекта", "ПоказыватьОбщееКоличество", Истина);
	
	Если Параметры.РежимВозврат = Истина Тогда
		Заголовок = Заголовок + НСтр("ru='Возврат'") + ":";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриИзмененииПоказыватьОбщееКоличество();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ПоказыватьОбщееКоличество", ПоказыватьОбщееКоличество);
	
	РаботаСФормамиСервер.СохранитьНастройкиФормы(НастройкиФормы, "ФормаПодборКомплекта");
	
КонецПроцедуры
													
&НаКлиенте
Процедура ПоказыватьОбщееКоличествоПриИзменении(Элемент)
	ПриИзмененииПоказыватьОбщееКоличество();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоказыватьОбщееКоличество()
	
	Элементы.ПозицииКоличествоВРасчете.Видимость = ПоказыватьОбщееКоличество;
	Элементы.ПозицииКоличествоСписано.Видимость	= ПоказыватьОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
		
	ПараметрыОповещения = Новый Структура("ВладелецФормы", ВладелецФормы);
	
	Если Подбор.Количество() <> 0 Тогда
	
		РезультатПодбора = Новый Массив;
		
		Для Каждого СтрокаПодбора Из Подбор Цикл
			
			СтрокаРезультата = Новый Структура("Номенклатура, ВидНоменклатуры, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена, Количество");
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаПодбора);
			СтрокаРезультата.Количество = СтрокаПодбора.КоличествоПеренести;
			
			РезультатПодбора.Добавить(СтрокаРезультата);
			
		КонецЦикла;
			
		ПараметрыОповещения.Вставить("РезультатПодбора", РезультатПодбора);
		Оповестить("ПодборИзКомплексногоРасчетаКлиента", ПараметрыОповещения);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПозиции(Команда)
	ОбновитьПозицииСервер();
КонецПроцедуры
	
&НаСервере	
Процедура ОбновитьПозицииСервер()
	
	Позиции.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
	Запрос.УстановитьПараметр("ПриемникСсылка", Параметры.ПриемникСсылка);
	Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.Номенклатура КАК Номенклатура,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.Цена КАК Цена,
	|	СУММА(НоменклатураКомплексныхРасчетовКлиентовОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(НоменклатураКомплексныхРасчетовКлиентовОбороты.КоличествоРасход) КАК КоличествоРасход
	|ПОМЕСТИТЬ ОборотыРегистраторов
	|ИЗ
	|	РегистрНакопления.НоменклатураКомплексныхРасчетовКлиентов.Обороты(, , Регистратор, КомплексныйРасчет = &КомплексныйРасчет) КАК НоменклатураКомплексныхРасчетовКлиентовОбороты
	|ГДЕ
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.Регистратор <> &ПриемникСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.Номенклатура,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.ХарактеристикаНоменклатуры,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.ЕдиницаИзмерения,
	|	НоменклатураКомплексныхРасчетовКлиентовОбороты.КлючСтроки.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыРегистраторов.КлючСтроки,
	|	ОборотыРегистраторов.Номенклатура,
	|	ОборотыРегистраторов.ХарактеристикаНоменклатуры,
	|	ОборотыРегистраторов.ЕдиницаИзмерения,
	|	ОборотыРегистраторов.Цена,
	|	ОборотыРегистраторов.КоличествоПриход,
	|	ОборотыРегистраторов.КоличествоРасход,
	|	ОборотыРегистраторов.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	ОборотыРегистраторов КАК ОборотыРегистраторов"
	;
	Выб = Запрос.Выполнить().Выбрать();
	
	// *** Цена и Единица измерения в документе могут быть другими.
	// *** Разделение материалов и товаров.
	Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена");
	Пока Выб.Следующий() Цикл
		
		Остаток = Выб.КоличествоПриход - Выб.КоличествоРасход;
		
		СтрокаПозиции = Позиции.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПозиции, Выб);
		
		СтрокаПозиции.КоличествоВРасчете	= Выб.КоличествоПриход;
		СтрокаПозиции.КоличествоСписано		= Выб.КоличествоРасход;
		СтрокаПозиции.КоличествоОстаток		= Выб.КоличествоПриход - Выб.КоличествоРасход;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выб);
		мсСтрокиПриемника = ПозицииПриемника.НайтиСтроки(Отбор);
		
		// Заполнение колонки "уже в документе" в случае подбора в оказание услуг.
		Если ТипЗнч(Параметры.ПриемникСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			Если мсСтрокиПриемника.Количество() <> 0 Тогда
				// *** одни ли строка обязательно в случаях вольных настроек?.
				СтрокаПозиции.КоличествоУжеВПриемнике = мсСтрокиПриемника[0].Количество;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ТипЗнч(Параметры.ПриемникСсылка) = Тип("ДокументСсылка.Прием") Тогда
		Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
		Для Каждого СтрокаПозицииПриемника Из ПозицииПриемника Цикл 
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаПозицииПриемника);
			мсСтрокиРасчета = Позиции.НайтиСтроки(Отбор);
			Если мсСтрокиРасчета.Количество() <> 0 Тогда
				КоличествоНужноПристроить = СтрокаПозицииПриемника.Количество;
				Для Каждого СтрокаРасчета Из мсСтрокиРасчета Цикл
					Если СтрокаРасчета.КоличествоОстаток <> 0 Тогда
						СтрокаРасчета.КоличествоУжеВПриемнике = Мин(СтрокаРасчета.КоличествоОстаток, КоличествоНужноПристроить);
						КоличествоНужноПристроить = КоличествоНужноПристроить - СтрокаРасчета.КоличествоУжеВПриемнике;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоНужноПристроить > 0 Тогда
					СтрокаРасчета.КоличествоУжеВПриемнике = СтрокаРасчета.КоличествоУжеВПриемнике + КоличествоНужноПристроить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииКоличествоПеренестиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Позиции.ТекущиеДанные;
	Остаток = ОстатокПоСтроке(ТекущиеДанные);
	
	Если (ТекущиеДанные.КоличествоПеренести + ТекущиеДанные.КоличествоУжеВПриемнике) > Остаток Тогда
		ТекущиеДанные.КоличествоПеренести = Остаток - ТекущиеДанные.КоличествоУжеВПриемнике;
	КонецЕсли;
	ТекущиеДанные.КоличествоПеренести = Макс(0, ТекущиеДанные.КоличествоПеренести);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПриИзменении(Элемент)
	ПерезаполнитьСводныйПодбор();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСводныйПодбор()
	
	Подбор.Очистить();
// *** можно по ключу строки искать, добавлять, удалять строчку подбора, а не перезаполнять всё.	
	Для Каждого СтрокаПозиции Из Позиции Цикл
		Если СтрокаПозиции.КоличествоПеренести > 0 Тогда 
			СтрокаПодбор = Подбор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодбор, СтрокаПозиции);
			СтрокаПодбор.Сумма = СтрокаПодбор.Цена * СтрокаПодбор.КоличествоПеренести;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНадписьИтогоПодбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьИтогоПодбор()
	
	ШаблонСтроки = "Всего %1 позиций на сумму %2 %3";
	ДекорацияИтогоПодбор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, 
																					Подбор.Количество(), 
																					ОбщегоНазначенияКлиентСервер.ФорматСумм(Подбор.Итог("Сумма")),
																					глКраткоеНаименованиеОсновнойВалюты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Подбор.ТекущиеДанные;
	
	Если ТекущиеДанные.КоличествоПеренести <> 0 Тогда
		мсСтрокиПозиций = Позиции.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
		Если мсСтрокиПозиций.Количество() <> 0 Тогда
			мсСтрокиПозиций[0].КоличествоПеренести = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКоличествоПеренестиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Подбор.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.КоличествоПеренести * ТекущиеДанные.Цена;
	
	мсСтрокиПозиций = Позиции.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
	Если мсСтрокиПозиций.Количество() <> 0 Тогда
		мсСтрокиПозиций[0].КоличествоПеренести = ТекущиеДанные.КоличествоПеренести;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Остаток = ОстатокПоСтроке(ТекущиеДанные);
	
	Если Остаток > (ТекущиеДанные.КоличествоПеренести + ТекущиеДанные.КоличествоУжеВПриемнике) Тогда
		ТекущиеДанные.КоличествоПеренести = Мин(ТекущиеДанные.КоличествоПеренести + 1, Остаток - ТекущиеДанные.КоличествоУжеВПриемнике);
		ПерезаполнитьСводныйПодбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОстатокПоСтроке(СтрокаСостава)
	
	Если Параметры.РежимВозврат Тогда
		// Для возврата - по уже списанному
		Возврат СтрокаСостава.КоличествоСписано;
	Иначе
		// Для продажи - по текущему остатку
		Возврат СтрокаСостава.КоличествоОстаток;
	КонецЕсли;
	
КонецФункции
