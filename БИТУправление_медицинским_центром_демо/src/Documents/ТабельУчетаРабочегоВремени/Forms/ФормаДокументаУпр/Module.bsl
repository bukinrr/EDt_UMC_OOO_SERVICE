&НаКлиенте
Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера.

&НаКлиенте
Перем пДатаНач;

&НаКлиенте
Перем пДатаКон;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда
		ВхДокДата = ТекущаяДата();
		ДатаНачПустДок = Дата(Год(ТекущаяДата()),Месяц(ТекущаяДата()),1,1,1,1); 
		Объект.НачалоПериода = ДатаНачПустДок;
		Объект.КонецПериода = КонецМесяца(ДатаНачПустДок);
	КонецЕсли;
	Месяц = НачалоМесяца(Объект.НачалоПериода);
	
	КонвертироватьВремяТабеляВ60ричное(); // Форматирование количества часов в формат времени.
	
	Элементы.ПоОдномуФилиалу.Видимость = ПараметрыСеанса.УчетПоНесколькимФилиалам;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	НастройкаЭлементовПриОткрытии();
	ПересчитатьИтогоПоВсемСтрокам();
	
	мТекущаяДатаДокумента = Объект.Дата;
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект.Ссылка, Ложь, ЭтаФорма);
	КонвертироватьВремяТабеляВ60ричное();
	
КонецПроцедуры

&НаКлиенте
// Рассчитывает итоговые суммы часов по всем строкам.
Процедура ПересчитатьИтогоПоВсемСтрокам()
	Для Каждого Стр Из Объект.Табель Цикл
		РассчитатьСуммуСтроки(Стр);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭлементовПриОткрытии()
	// Настройки отображение месяца
	МесяцСтрока = РаботаСДиалогамиКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.НачалоПериода);
	
	// Установка вида периода
	Если Объект.НачалоПериода = НачалоМесяца(Объект.НачалоПериода) И Объект.КонецПериода = НачалоДня(КонецМесяца(Объект.НачалоПериода)) Тогда
		НаВесьМесяц = Истина;
	Иначе
		НаВесьМесяц = Ложь;
	КонецЕсли;	
	ИзменитьДоступностьДат();
	ОбновитьМесяцСтрокой();
	// Если новый документ
	Если Объект.Табель.Количество() = 0 И (НЕ ЗначениеЗаполнено(Объект.НачалоПериода)) Тогда
		УстановитьЗаголовкиСтолбцовПустойТабл();
	Иначе
		НастройкаВидимостиИЗаголовковСтолбцов();
	КонецЕсли;	

	// Прикручивание обработчика расчета итого по строке при изменении количества часов.
	УстановитьДействиеСервер("ПриИзменении","ЯчейкаЧасыПриИзменении",2,33)
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиСтолбцовПустойТабл()
	// Настройка заголовков столбцов
	Элементы.Табель.ПодчиненныеЭлементы.Получить(1).Заголовок = "Сотрудник";
	Для Инд = 2 По Элементы.Табель.ПодчиненныеЭлементы.Количество() - 2 Цикл
		Элементы.Табель.ПодчиненныеЭлементы.Получить(Инд).Заголовок = Инд-1;
	КонецЦикла;	
	Элементы.Табель.ПодчиненныеЭлементы.Получить(Элементы.Табель.ПодчиненныеЭлементы.Количество()-1).Заголовок = "ИтогоДни";
	Элементы.Табель.ПодчиненныеЭлементы.Получить(Элементы.Табель.ПодчиненныеЭлементы.Количество()-2).Заголовок = "ИтогоЧасы";
КонецПроцедуры

&НаСервере
// Скрывает или открывает столбцы с днями месяца. Вызывать после изменения границ интервала.
Процедура НастройкаВидимостиИЗаголовковСтолбцов()
	
	Дата = Объект.НачалоПериода;
	
	// Если период не с начала месяца - скрываем столбцы до начала периода.
	Если  День(Объект.НачалоПериода) > 1 Тогда
		Для Инд = 1 По День(Объект.НачалоПериода)-1 Цикл
			// Очиска и скрытие колонки от 1 до начала периода
			ЗаполнитьЗначением("ЧислоМес" + Инд,0);
			Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].Видимость = Ложь;
		КонецЦикла;	
	КонецЕсли;
	
	Сч = 0;
	Для Инд = День(Объект.НачалоПериода) По День(Объект.КонецПериода) Цикл
		
		// Прикручивание события ПриИзменении
		Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].УстановитьДействие("ПриИзменении", "ЯчейкаЧасыПриИзменении");
				
		
		Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].Видимость = Истина;
		ВремДата = Объект.НачалоПериода + Сч*24*60*60;
		
		Шрифт = Новый Шрифт(,,Истина);
		
		Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].Заголовок = Строка(День(ВремДата)) + " " + Строка(Формат(ВремДата, "ДФ = ддд"));
		Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].Ширина = 1;
		Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].ШрифтЗаголовка = Шрифт;  
		
		Если ДеньНедели(ВремДата) = 6 или ДеньНедели(ВремДата) = 7 Тогда
			Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].ЦветТекстаЗаголовка = Новый Цвет(255, 0, 0);
		Иначе	
			Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].ЦветТекстаЗаголовка = Новый Цвет(0, 0, 0);
		КонецЕсли;	
		Сч = Сч + 1;
	КонецЦикла;
	
	Если День(Объект.КонецПериода) < 31 Тогда
		
		Для Инд = День(Объект.КонецПериода) + 1 По 31 Цикл
			// Очиска и скрытие колонки от конца периода до 31
			ЗаполнитьЗначением("ЧислоМес" + Инд,0);
			Элементы.Табель.ПодчиненныеЭлементы["ТабельЧислоМес" + Инд].Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначением(Колонка,Значение)
	Для Каждого Строка Из Объект.Табель Цикл
		Строка[Колонка] = Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСтроки(Строка)
	
	Сумма = 0;
	Колво = 0;
	Для Инд = 1 По 31 Цикл
		
		// Преобразуем форматированное 60-ричное числов в обычное, чтобы суммировать его.
		Число60 = Число(?(ЗначениеЗаполнено(Строка["ЧислоМес"+ Инд]),Строка["ЧислоМес"+ Инд],0 ));
		Число100 = Число60РичноеВОбычное(Число60);
		
		Сумма = Сумма + Число100;
		
		Колво = Колво+ Число(?(ЗначениеЗаполнено(Строка["ЧислоМес"+ Инд]),1,0 ));
	КонецЦикла;
	
	Сумма = ЧислоВ60Ричное(Сумма); // Форматирование количества часов в формат времени.
		
	Строка["ИтогоЧасы"] = Сумма;
	Строка["ИтогоДни"] = Колво;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВ60Ричное(Число)
	
	ВсегоМинут = Окр(Число * 60, 0);
	Возврат Цел(ВсегоМинут / 60) + (ВсегоМинут % 60) / 100;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Число60РичноеВОбычное(Число)
	
	Возврат (Цел(Число) * 60 + Число % 1 * 100) / 60;	
	
КонецФункции

&НаКлиенте
Процедура ЯчейкаЧасыПриИзменении(Элемент)
	
	// Не даем ввести в формате времени более 59 минут в дробной части
	Часы = Элементы.Табель.ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Табель","")]; 
	Часы = Цел(Часы) + ?(Часы % 1 > 0.59, 0.59,Часы % 1);
	Элементы.Табель.ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Табель","")] = Часы;
	
	РассчитатьСуммуСтроки(Элементы.Табель.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДействиеСервер(Действие,ИмяПроцедуры,НачальноеЗначение,МаксимальноеЗначение)
	Для Инд = НачальноеЗначение По МаксимальноеЗначение Цикл
		Колонка = Элементы.Табель.ПодчиненныеЭлементы.Получить(Инд);
		Если Колонка <> Неопределено Тогда
			Колонка.УстановитьДействие(Действие, ИмяПроцедуры);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Табель.Количество() > 0 Тогда
		масСотр = Объект.Табель.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
		ТекущийОбъект.КраткийСоставДокумента = ОбщегоНазначения.ЗаполнитьКраткийСоставДокумента(масСотр);
	КонецЕсли;
	
	Для Каждого СтрокаТабеля Из ТекущийОбъект.Табель Цикл
		
		Для Сч = 1 По 31 Цикл
			СтрокаТабеля["ЧислоМес" + Сч] = Число60РичноеВОбычное(СтрокаТабеля["ЧислоМес" + Сч]);		
		КонецЦикла;
		
		СтрокаТабеля.ИтогоЧасы = Число60РичноеВОбычное(СтрокаТабеля.ИтогоЧасы);
		
	КонецЦикла;
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(ТекущийОбъект,,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииСервер(мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Объект.Дата;
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер(НачальнаяДатаДокумента)
	
	РаботаСДиалогамиСервер.ПроверитьНомерДокумента(ЭтаФорма, НачальнаяДатаДокумента);	
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	пДатаНач = Объект.НачалоПериода;
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	пДатаКон = Объект.КонецПериода;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеГраницПериода(НачальнаяДата = Неопределено,КонечнаяДата = Неопределено)
	
	Если НачальнаяДата <> Неопределено И КонечнаяДата <> Неопределено Тогда
		ВремНач = Объект.НачалоПериода;
		ВремКон = Объект.КонецПериода;
		
		Объект.НачалоПериода = НачальнаяДата;
		Объект.КонецПериода = КонечнаяДата;
	КонецЕсли;
	
	НастройкаВидимостиИЗаголовковСтолбцов();
	
	Если НачальнаяДата <> ВремНач ИЛИ КонечнаяДата <> ВремКон Тогда
		ПересчитатьИтогоПоВсемСтрокам();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если НаВесьМесяц Тогда
		ВремНач = НачалоМесяца(Объект.НачалоПериода);
		ВремКон = КонецМесяца(Объект.НачалоПериода);
		ИзменениеГраницПериода(ВремНач,ВремКон);
	КонецЕсли;		
	ИзменитьДоступностьДат();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПриИзменении(Элемент)
	
	Месяц = НачалоМесяца(Месяц);
	
	Если НаВесьМесяц Тогда
		Объект.НачалоПериода = Месяц;
		Объект.КонецПериода = КонецМесяца(Месяц);
	Иначе
		Если День(Объект.НачалоПериода) <= День(КонецМесяца(Месяц)) Тогда
			Объект.НачалоПериода = Дата(Год(Месяц), Месяц(Месяц), День(Объект.НачалоПериода));
		Иначе
			Объект.НачалоПериода = КонецМесяца(Месяц);
		КонецЕсли;
		Если День(Объект.КонецПериода) <= День(КонецМесяца(Месяц)) Тогда
			Объект.КонецПериода = Дата(Год(Месяц), Месяц(Месяц), День(Объект.КонецПериода));
		Иначе
			Объект.КонецПериода = КонецМесяца(Месяц);
		КонецЕсли;
	КонецЕсли;
	ИзменениеГраницПериода();
	ОбновитьМесяцСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Месяц = ДобавитьМесяц(Месяц, Направление);
	
	СтандартнаяОбработка = Ложь;
	МесяцПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьДат()
	Элементы.НачалоПериода.Доступность = НЕ НаВесьМесяц;
	Элементы.КонецПериода.Доступность = НЕ НаВесьМесяц;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМесяцСтрокой()
	
	МесяцСтрока = Формат(Месяц, "ДФ='ММММ гггг'");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСодержимоеТаблицыКромеСотрудников() 
	
	Для Каждого Стр Из Объект.Табель Цикл
		Для Инд = 1 По 31 Цикл
			Стр["ЧислоМес"+Инд] = 0;
		КонецЦикла;
		Стр.ИтогоДни = 0;
		Стр.ИтогоЧасы = 0;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыОткрытия = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыОткрытия, Элементы.Табель);
КонецПроцедуры

&НаКлиенте
Процедура ТабельОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)   
	для каждого ВыбранныйЭлемент из ВыбранноеЗначение Цикл
		НС = Объект.Табель.Добавить();
		НС.Сотрудник = ВыбранныйЭлемент;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Предупреждение("Не заполнено подразделение", 30);
		Возврат;
	КонецЕсли;	
	ЗаполнениеСотрудников("Подразделение");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниковПоФилиалу(Команда)
	ЗаполнениеСотрудников("Филиал");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрганизации(Команда)
	ЗаполнениеСотрудников("Организация");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниковИзВсейБазы(Команда)
	ЗаполнениеСотрудников("Сводно");
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнениеСотрудников(РежимЗаполнения)
	
	Если Объект.Табель.Количество() > 0 Тогда
		Ответ = Вопрос(НСтр("ru='Перед заполнением таблица будет очищена.'") + " " + НСтр("ru = 'Продолжить?'"),РежимДиалогаВопрос.ОКОтмена);
		// Очищаем перед заполнением
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Объект.Табель.Очистить();
	
	ЗаполнениеСотрудниковСервер(РежимЗаполнения);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнениеСотрудниковСервер(РежимЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа
	|	И НЕ Сотрудники.Архив";
	ДополнительныеУсловия = "";
	
	Если РежимЗаполнения = "Подразделение" Тогда
		ДополнительныеУсловия = "И Сотрудники.Подразделение = &Подразделение";
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	ИначеЕсли РежимЗаполнения = "Филиал" Тогда
		ДополнительныеУсловия = "И Сотрудники.Подразделение.Филиал = &Филиал";
		Запрос.УстановитьПараметр("Филиал",Объект.Филиал);
	ИначеЕсли РежимЗаполнения = "Организация" Тогда
		ДополнительныеУсловия = "И Сотрудники.Подразделение.Филиал.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация",Объект.Филиал.Организация);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ДополнительныеУсловия;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Объект.Табель.Добавить();
		Стр.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводноПоДаннымКоманда(Команда)
	
	Если Объект.Табель.Количество() > 0 Тогда
		Ответ = Вопрос(НСтр("ru='Таблица не пуста, очистить строки?'"),РежимДиалогаВопрос.ДаНетОтмена);
		// Очищаем перед заполнением
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Табель.Очистить();
			// Добавляем строки к имеющимся
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ЗаполнитьСводноПоДаннымСервер();
	
	ПересчитатьИтогоПоВсемСтрокам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводноПоДаннымСервер()
	ВсеСотрудники = ПолучитьВсехСотрудников();
	// Заполнить таблицу табеля по графику
	// ВсеСотрудники - сотрудники, Ложь - сообщать (нет), Истина - заполнять (да).
	ЗаполнитьПоГрафику(ВсеСотрудники, Ложь, Истина); 
КонецПроцедуры

&НаСервере
Функция ПолучитьВсехСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления
		|	И НЕ Сотрудники.Архив
		|	И НЕ Сотрудники.ЭтоГруппа";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");

КонецФункции

&НаСервере
Процедура ЗаполнитьПоГрафику(Сотрудники, Сообщать = Истина, Создавать = Ложь, ОтборФилиалы = Неопределено)
	
	// Заполнить таблицу по графику для каждого сотрудника в таблице.
	ВидыВремени = ГрафикиСотрудников.ПолучитьВидыРабочегоВремениТабеля();
	ГрафикСотрудников = ГрафикиСотрудников.ПолучитьРабочееВремяЗаПериод(Объект.НачалоПериода, 
															КонецДня(Объект.КонецПериода), Ложь, Истина, ОтборФилиалы,Сотрудники, ВидыВремени,,Ложь);
	Для Каждого Сотрудник Из Сотрудники Цикл
		ГрафикСотрудника = ГрафикСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		
		// Настройка видимости столбцов по выбранному интервалу
		НастройкаВидимостиИЗаголовковСтолбцов();
		
		// Поиск текущей строки ТЗ
		СтрокаТабеля = ОбщегоНазначенияКлиентСервер.ПерваяСтрокаОтбораТаблицы(Объект.Табель, Новый Структура("Сотрудник",Сотрудник));
		Если СтрокаТабеля = Неопределено Тогда
			Если Создавать
				И ГрафикСотрудника.Количество() <> 0
			Тогда
				СтрокаТабеля = Объект.Табель.Добавить();
				СтрокаТабеля.Сотрудник = Сотрудник;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Очистка текущих часов
		Для Сч = 1 По 31 Цикл
			СтрокаТабеля["ЧислоМес"+Сч] = 0;
		КонецЦикла;
		
		Если ГрафикСотрудника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Стр Из ГрафикСотрудника Цикл
			
			ВрНач = Стр.ВремяНачала;
			ВрКон = Стр.ВремяОкончания;
			
			// Получить колво часов из смены или времени начала и окончания.
			Часы = ПолучитьЧасы(ВрНач, ВрКон);
			СтрокаТабеля["ЧислоМес" + День(Стр.Дата)] = СтрокаТабеля["ЧислоМес" + День(Стр.Дата)] + Часы;
		КонецЦикла;
		
		// Конвертация во время
		Для Сч = 1 По 31 Цикл			
			СтрокаТабеля["ЧислоМес"+Сч] = ЧислоВ60Ричное(СтрокаТабеля["ЧислоМес"+Сч]);	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧасы(ДатаНачала, Знач ДатаКонца)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаКонца) Тогда
		Возврат 24;
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаКонца) Тогда
		
		Если Не ЗначениеЗаполнено(ДатаКонца)
			Или (Час(ДатаКонца) = 23 И Минута(ДатаКонца) = 59)
		Тогда
			ДатаКонца = Дата(1,1,1) + 60 * 60 * 24; // Конец дня.
		КонецЕсли;
		
		Возврат (ДатаКонца - ДатаНачала) / 3600;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция НайтиПересечениеВремИнтервалов(ТЗ)
	
	Если ТЗ.Количество() < 1 Тогда
		Возврат 0;
	КонецЕсли;	
	
	нач1 = ТЗ.Получить(0).ВремяНачала;
	кон1 = ТЗ.Получить(0).ВремяОкончания;
	нач2 = Неопределено;
	кон2 = Неопределено;
	
	Для Инд = 1 По ТЗ.Количество() - 1 Цикл
		
		ВрНач = ТЗ.Получить(Инд).ВремяНачала;
		ВрКон =  ТЗ.Получить(Инд).ВремяОкончания;
		
		Если ВрКон < ВрНач Тогда
			ВрКон = ВрКон + 24*60*60;
		КонецЕсли;	
		
		Если (ВрНач <= нач1 И ВрКон >= нач1 )
			ИЛИ (ВрКон >= кон1 И ВрНач <= кон1) Тогда
			допнач1 = ТЗ.Получить(Инд).ВремяНачала;
			допкон1 = ТЗ.Получить(Инд).ВремяОкончания;
		КонецЕсли;
		
		Если ТЗ.Получить(Инд).ВремяНачала > кон1 Тогда 
			Если нач2 <> Неопределено Тогда 
				Если ТЗ.Получить(Инд).ВремяНачала < нач2 Тогда
					допнач2 = ВрНач;
				КонецЕсли;	
			Иначе	
				допнач2 = ВрНач;
				допкон2 = ВрКон;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВрКон >= кон1 Тогда
			// Если второй период не пересекается с первым
			Если ВрНач > кон1 Тогда
				Если нач2 <> Неопределено Тогда
					Если ВрНач < нач2 Тогда
						допнач2 = ВрНач;
					КонецЕсли;
				Иначе
					допнач2 = ВрНач;
				КонецЕсли;
				Если кон2 <> Неопределено Тогда
					Если ВрКон > кон2 Тогда
						допкон2 = ВрКон;
					КонецЕсли;		
				Иначе
					допкон2 = ВрКон;
				КонецЕсли;
				// Если время начала 2 периода меньше конца 1 периода
			Иначе
				допкон1 = ВрКон;
				допнач2 = Неопределено;
				допкон2 = Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		
		Попытка
			Если допнач1 <> Неопределено Тогда нач1 = допнач1; КонецЕсли;
			Если допнач2 <> Неопределено Тогда нач2 = допнач2; КонецЕсли;
			Если допкон1 <> Неопределено Тогда кон1 = допкон1; КонецЕсли;
			Если допкон2 <> Неопределено Тогда кон2 = допкон2; КонецЕсли;
		Исключение	
			
			Если нач1 > кон1 и нач2 < кон2	и нач2 < кон1 и кон1 > кон2 Тогда
				кон1 = кон2;
				нач2 = Неопределено;
				кон2 = Неопределено;
			КонецЕсли;	
			
		КонецПопытки;	
		
	КонецЦикла;	
	
	Если нач2 = Неопределено И кон2 = Неопределено Тогда
		Возврат (кон1 - нач1) / 3600;
	ИначеЕсли нач1 <> нач2 И кон2<> кон1 Тогда
		Возврат (кон1 - нач1) / 3600  + (кон2 - нач2) / 3600;
	Иначе
		Возврат (кон1 - нач1) / 3600;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьЧасыСводноПоВсемДанным(Команда)
	
	// Предупредить, что данные будут очищены и перезаполнены
	Режим = РежимДиалогаВопрос.ОКОтмена;
	
	Текст = НСтр("ru='Данные в таблице будут перезаполнены в соответствии с графиком. Продолжить выполнение операции?';en = 'Do you want to continue?'");
	Ответ = Вопрос(Текст, РежимДиалогаВопрос.ОКОтмена, 0);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСодержимоеТаблицыКромеСотрудников();
	
	// Заполнить таблицу табеля по графику
	ПерезаполнитьЧасыСводноПоВсемДаннымСервер();

	ПересчитатьИтогоПоВсемСтрокам();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЧасыСводноПоВсемДаннымСервер()
	
	Сотрудники = Объект.Табель.Выгрузить( ,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Если Сотрудники <> Неопределено Тогда
		ЗаполнитьПоГрафику(Сотрудники, Ложь, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЧасы(Команда)
ОчиститьСодержимоеТаблицыКромеСотрудников();
КонецПроцедуры
                                                  
&НаКлиенте
Процедура НачалоПериодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	пДатаНач = Объект.НачалоПериода;
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	пДатаКон = Объект.КонецПериода;
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)

	Если  Объект.НачалоПериода < НачалоМесяца(пДатаНач) ИЛИ Объект.НачалоПериода > КонецМесяца(пДатаНач) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Указанная дата начала периода %1 не попадает в границы месяца'"),
				Формат(Объект.НачалоПериода, "ДФ = дд.мм.гггг"))
			);
		Объект.НачалоПериода=пДатаНач;
	ИначеЕсли Объект.НачалоПериода > Объект.КонецПериода Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Дата начала периода не может быть больше даты окончания периода (указана дата %1)'"),
				Формат(пДатаНач, "ДФ = дд.мм.гггг"))
			);
		Объект.НачалоПериода=пДатаНач;
	Иначе
		НастройкаВидимостиИЗаголовковСтолбцов();
		ПересчитатьИтогоПоВсемСтрокам();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	Если Объект.КонецПериода > КонецМесяца(пДатаКон) ИЛИ Объект.КонецПериода < НачалоМесяца(пДатаКон) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Указанная дата окончания периода %1 не попадает в границы месяца'"),
				Формат(Объект.КонецПериода, "ДФ = дд.мм.гггг"))
			);
		Объект.КонецПериода=пДатаКон;
	ИначеЕсли Объект.КонецПериода < Объект.НачалоПериода Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Дата окончания периода не может быть меньше даты начала периода ( указана дата %1)'"),
				Формат(Объект.КонецПериода, "ДФ = дд.мм.гггг"))
			);
		Объект.КонецПериода=пДатаКон;
	Иначе
		НастройкаВидимостиИЗаголовковСтолбцов();
		ПересчитатьИтогоПоВсемСтрокам();
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьЧасыСервер(ПоВсейОрганизацииФилиала)
	
	ОтборФилиалы = ОтборПоФилиалам(ПоВсейОрганизацииФилиала);
	
	Сотрудники = СотрудникиСГрафикомВФилиале(ОтборФилиалы);
	
	// Заполнить таблицу табеля по графику
	ЗаполнитьПоГрафику(Сотрудники, Ложь, Истина, ОтборФилиалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЧасыПоФилиалуДокумента(Команда)
	Если Объект.Табель.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица не пуста, очистить строки?",РежимДиалогаВопрос.ДаНетОтмена);
		// Очищаем перед заполнением
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Табель.Очистить();
			// Добавляем строки к имеющимся
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ЗаполнитьЧасыСервер(Ложь);
	
	ПересчитатьИтогоПоВсемСтрокам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЧасыПоОрганизацииФилиалаДокумента(Команда)
	Если Объект.Табель.Количество() > 0 Тогда
		Ответ = Вопрос(НСтр("ru='Таблица не пуста, очистить строки?'"),РежимДиалогаВопрос.ДаНетОтмена);
		// Очищаем перед заполнением
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Табель.Очистить();
			// Добавляем строки к имеющимся
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ЗаполнитьЧасыСервер(Истина);
	
	ПересчитатьИтогоПоВсемСтрокам();

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЧасыПоФилиалуДокумента(Команда)
	// Предупредить, что данные будут очищены и перезаполнены
	Режим = РежимДиалогаВопрос.ОКОтмена;
	
	Текст = НСтр("ru='Данные в таблице будут перезаполнены в соответствии с графиком. Продолжить выполнение операции?';en='Do you want to continue?'");
	Ответ = Вопрос(Текст, РежимДиалогаВопрос.ОКОтмена, 0);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСодержимоеТаблицыКромеСотрудников();
	
	// Заполнить таблицу табеля по графику
	ПерезаполнитьЧасыПоФилиалам(Ложь);

	ПересчитатьИтогоПоВсемСтрокам();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЧасыПоОрганизацииФилиалаДокумента(Команда)
	// Предупредить, что данные будут очищены и перезаполнены
	Режим = РежимДиалогаВопрос.ОКОтмена;
	
	Текст = НСтр("ru = 'Данные в таблице будут перезаполнены в соответствии с графиком. Продолжить выполнение операции?';
				 |en = 'Do you want to continue?'");
	Ответ = Вопрос(Текст, РежимДиалогаВопрос.ОКОтмена, 0);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСодержимоеТаблицыКромеСотрудников();
	
	// Заполнить таблицу табеля по графику
	ПерезаполнитьЧасыПоФилиалам(Истина);

	ПересчитатьИтогоПоВсемСтрокам();
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЧасыПоФилиалам(ПоВсейОрганизацииФилиала)
	
	ОтборФилиалы = ОтборПоФилиалам(ПоВсейОрганизацииФилиала);
	
	Сотрудники = Объект.Табель.Выгрузить( ,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Если Сотрудники <> Неопределено Тогда
		ЗаполнитьПоГрафику(Сотрудники, Ложь, Ложь, ОтборФилиалы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СотрудникиСГрафикомВФилиале(ОтборФилиалы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГрафикиСотрудников.Сотрудник КАК Сотрудник
	               |ИЗ
	               |	РегистрСведений.ГрафикиРаботы КАК ГрафикиСотрудников
	               |ГДЕ
	               |	ГрафикиСотрудников.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И ГрафикиСотрудников.Дата >= &ДатаНач
	               |	И ГрафикиСотрудников.Дата <= &ДатаКон
	               |	И (&ОтборФилиалЗадан = ЛОЖЬ
	               |			ИЛИ ГрафикиСотрудников.Филиал В (&Филиал))
	               |	И (ГрафикиСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыВремениГрафика.ПустаяСсылка)
	               |			ИЛИ ГрафикиСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыВремениГрафика.РабочееВремя)
	               |			ИЛИ ГрафикиСотрудников.ВидВремени.РабочееВремя)";
	
	Запрос.УстановитьПараметр("ДатаНач", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Филиал", ОтборФилиалы);
	Запрос.УстановитьПараметр("ОтборФилиалЗадан", ТипЗнч(ОтборФилиалы) <> Тип("Неопределено"));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

&НаСервере
Функция ОтборПоФилиалам(ПоВсейОрганизацииФилиала)
	
	ФилиалДокумента = Объект.Филиал;
	
	Если ПоВсейОрганизацииФилиала Тогда
		ОтборФилиалы = ПроцедурыСпециализацииПоставки.ФилиалыОрганизации(ФилиалДокумента.Организация)
	Иначе
		ОтборФилиалы = Новый Массив;
		ОтборФилиалы.Добавить(ФилиалДокумента);
	КонецЕсли;
	
	Возврат ОтборФилиалы;
	
КонецФункции

&НаСервере
Процедура КонвертироватьВремяТабеляВ60ричное()

	Для Каждого СтрокаТабеля Из Объект.Табель Цикл
		
		Для Сч = 1 По 31 Цикл
			СтрокаТабеля["ЧислоМес" + Сч] = ЧислоВ60Ричное(СтрокаТабеля["ЧислоМес" + Сч]);
		КонецЦикла;
		
		СтрокаТабеля.ИтогоЧасы = ЧислоВ60Ричное(СтрокаТабеля.ИтогоЧасы);
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти
