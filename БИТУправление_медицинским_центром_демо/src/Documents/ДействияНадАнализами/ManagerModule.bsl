#Область ПрограммныйИнтерфейс

#Область Печать

// Возвращает доступные варианты печати документа.
//  Результатом является Струткура, каждая строка которой соответствует одному из вариантов печати.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("ЗаказВПроцедурныйКабинет"	,"Заказ в процедурный кабинет");
	СтруктураМакетов.Вставить("ПодготовкаКИсследованию"		,"Подготовка к сдаче анализов");
	СтруктураМакетов.Вставить("СрокиВыполненияИсследований"	,"Сроки выполнения исследований");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура формирует печатную форму документа
//  Название макета печати передается в качестве параметра,
//  по переданному имени макета определяется соответствующая функция печати.
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка	 - ссылка на распечатываемый документ.
//  ИмяМакета		 - Строка			 - имя макета из структуры печатных форм.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция Печать(СсылкаНаОбъект, ИмяМакета) Экспорт
	
	Перем ТабДокумент;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПодготовкаКИсследованию" Тогда
		ТабДокумент = ПечатьПодготовкаКИсследованию(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "ЗаказВПроцедурныйКабинет" Тогда
		ТабДокумент = ПечатьЗаказВПроцедурныйКабинет(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "СрокиВыполненияИсследований" Тогда
		ТабДокумент = ПечатьСрокиВыполненияИсследований(СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

// Формирует описание подготовки к исследованию.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура, Массив - номенклатура анализа.
//
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция ПолучитьТабДокПодготовкаКИсследованию(Номенклатура) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;

	Макет = Документы.ДействияНадАнализами.ПолучитьМакет("ПодготовкаКИсследованию");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.Ссылка) КАК Номенклатура,
	|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	ПОДСТРОКА(СпрНоменклатура.ПодготовкаКлиентаКСдачеАнализа, 1, 10000) КАК ПодготовкаКлиентаКСдачеАнализа
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&Номенклатура)
	|	И СпрНоменклатура.Анализ
	|	И НЕ СпрНоменклатура.ПодготовкаКлиентаКСдачеАнализа ПОДОБНО """"
	|ИТОГИ ПО
	|	ПодготовкаКлиентаКСдачеАнализа";
	Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРаботы = Макет.ПолучитьОбласть("Работы");
	ОбластьПодготовка = Макет.ПолучитьОбласть("Подготовка");
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	ВыбПодготовка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыбПодготовка.Следующий() Цикл
		СтрокаАнализы = "";
		ВыбАнализы = ВыбПодготовка.Выбрать();
		Пока ВыбАнализы.Следующий() Цикл
			НазваниеАнализа = ?(ЗначениеЗаполнено(ВыбАнализы.НоменклатураНаименованиеПолное), ВыбАнализы.НоменклатураНаименованиеПолное, ВыбАнализы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаАнализы, НазваниеАнализа, Символы.ПС); 
		КонецЦикла;
		
		ОбластьРаботы.Параметры.Номенклатура = СтрокаАнализы;
		ТабДокумент.Вывести(ОбластьРаботы);
		
		ОбластьПодготовка.Параметры.ПодготовкаКИсследованию = ВыбПодготовка.ПодготовкаКлиентаКСдачеАнализа;
		ТабДокумент.Вывести(ОбластьПодготовка);
		
	КонецЦикла;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДейтсвияНадАнализами_ПодготовкаКИсследованию";
	
	Возврат ТабДокумент;

КонецФункции

// Возвращает данные для выбора услуг продажи по забранным анализам в виде таблицы значений с колонками:
//	"Клиент", "Номенклатура", "Количество".
//
// Параметры:
//  ПараметрыВыбора	 - Структура - Структура с ключом "Дата" и необязательным ключом "Клиент".
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьДанныеВыполненияДляПродажи(ПараметрыВыбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ПараметрыВыбора.Дата);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействияНадАнализамиИсследования.Номенклатура КАК Номенклатура,
	               |	ДействияНадАнализамиИсследования.Клиент КАК Клиент,
	               |	СУММА(1) КАК Количество
	               |ИЗ
	               |	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ДействияНадАнализамиИсследования.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ДействияНадАнализамиИсследования.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАнализов.Забор)
	               |	И НЕ ДействияНадАнализамиИсследования.Ссылка.ПометкаУдаления
	               |	И ДействияНадАнализамиИсследования.Ссылка.Проведен
	               |	И (&Клиент = НЕОПРЕДЕЛЕНО
	               |			ИЛИ ДействияНадАнализамиИсследования.Клиент В (&Клиент))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДействияНадАнализамиИсследования.Номенклатура,
	               |	ДействияНадАнализамиИсследования.Клиент
	               |";
	
	Если ПараметрыВыбора.Свойство("Клиент") И ЗначениеЗаполнено(ПараметрыВыбора.Клиент) Тогда
		Запрос.УстановитьПараметр("Клиент", ПараметрыВыбора.Клиент);
	Иначе
		Запрос.УстановитьПараметр("Клиент", Неопределено);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает табличный документ с описаниями обработки контейнеров.
//
// Параметры:
//  МассивОписанияОбработкиКонтейнеров	- Массив из СтрокаТаблицыЗначений - содержит:
//  	* Лаборатория					- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* Биоматериал					- Строка - наименование биоматериала
//  	* Контейнер						- Строка - наименование контейнера, для которого указано описание его обработки
//  	* КодПробы						- Строка - код пробы, используется в описании обработки контейнера
//  	* КодПротокола					- Строка - код протокола описания
//  	* Описание						- Строка - описание обработки контейнера.
// 
// Возвращаемое значение:
//  ТабличныйДокумент 
//
Функция ПолучитьТабДокСОписаниямиОбработкиКонтейнеров(МассивОписанияОбработкиКонтейнеров) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	
	Макет = Документы.ДействияНадАнализами.ПолучитьМакет("ПостобработкаКонтейнеров");

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьШапка);
	
	ОбластьОписание = Макет.ПолучитьОбласть("Описание");
	
	Для Каждого СтрокаОписаниеОбработкиКонтейнеров Из МассивОписанияОбработкиКонтейнеров Цикл 
		ОбластьОписание.Параметры.Заполнить(СтрокаОписаниеОбработкиКонтейнеров);
		ТабДокумент.Вывести(ОбластьОписание);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции	

// Процедура - Заполнить идентификаторы исследований
//
// Параметры:
//  Документ - ДокументОбъект.ДействияНадАнализами - документ забора анализа.
//  Клиент	 - СправочникСсылка.Клиенты	 - Клиент документа.
//
Процедура ЗаполнитьИдентификаторыИсследований(Документ, Клиент = Неопределено) Экспорт
	
	ПустойУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если Документ.Исследования.НайтиСтроки(Новый Структура("ИД", ПустойУИД)) = Неопределено Тогда
		Возврат; // Всё заполнено, не требуется перезаполнение.
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СвернутьМассив(Документ.Исследования.Выгрузить().ВыгрузитьКолонку("Клиент")).Количество() > 1 Тогда
		Для Каждого СтрокаИсследования Из Документ.Исследования Цикл
			Если Не ЗначениеЗаполнено(СтрокаИсследования.ИД) Тогда
				ИД = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Документ.Исследования.Количество() <> 0 Тогда
		
		Если Клиент = Неопределено Тогда
			Клиент = Документ.Исследования[0].Клиент;
		КонецЕсли;
		
		НазначенныеАнализы = НазначенныеАнализыКлиента(Клиент, ?(ЗначениеЗаполнено(Документ.Ссылка), Документ.Ссылка.МоментВремени(), Документ.Дата));
		
		ИсследованияДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Документ.Исследования.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		
		Для Каждого Номенклатура Из ИсследованияДокумента Цикл
			
			НазначенныеID = Новый Массив;
			СтрокиНазначенногоАнализа = НазначенныеАнализы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));	
			Для Каждого СтрокаID Из СтрокиНазначенногоАнализа Цикл
				НазначенныеID.Добавить(СтрокаID.ИД);
			КонецЦикла;
			
			// Ищем совпадающие номенклатуры в исследованиях объекта, чтобы сразу заполнить все одинаковые номенклатуры
			РезультатПоискаВТабличнойЧастиОбъекта = Документ.Исследования.НайтиСтроки(Новый Структура("Номенклатура, ИД", Номенклатура, ПустойУИД));
			
			Для Каждого СтрокаИсследования Из РезультатПоискаВТабличнойЧастиОбъекта Цикл
				
				Если НазначенныеID.Количество() <> 0 Тогда
					ИД = НазначенныеID[0];
					
					// Не берем ИД, если он уже фигурирует в документе.
					Если Документ.Исследования.НайтиСтроки(Новый Структура("ИД", Ид)).Количество() = 0 Тогда
						
						СтрокаИсследования.ИД = ИД;
						
					КонецЕсли;
					
					НазначенныеID.Удалить(0);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаИсследования.ИД) Тогда
					СтрокаИсследования.ИД = Новый УникальныйИдентификатор;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ПечатьПодготовкаКИсследованию(СсылкаНаОбъект)
	
	мНоменклатура = СсылкаНаОбъект.Исследования.ВыгрузитьКолонку("Номенклатура");
	ТабличныйДокумент = ПолучитьТабДокПодготовкаКИсследованию(мНоменклатура);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьЗаказВПроцедурныйКабинет(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийАнализов.Забор Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Печатная форма используется только для документов с видом операции ""Забор"".'"));
		Возврат Неопределено;	
	КонецЕсли;
		
	ПараметрыПечати = ПараметрыПечатиЗаказаВПроцедурныйКабинет(СсылкаНаОбъект);
	
	Если ПараметрыПечати = Неопределено Тогда 
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В документе отсутствуют контейнеры.'"));
		Возврат Неопределено;	
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.Защита = Ложь;
	ТабДокумент.ТолькоПросмотр = Истина;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказВПроцедурныйКабинет";

	Макет = ПолучитьМакет("ЗаказВПроцедурныйКабинет");

	// Выводим шапку заказа.
    ОбластьМакета = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	
	// Выводим штрихкод.
	Рисунок = ОбластьМакета.Рисунки.Штрихкод;
	
	Штрихкод = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	Эталон = Справочники.ПодключаемоеОборудование.ПолучитьМакет("МакетДляОпределенияКоэффициентовЕдиницИзмерения");
	КоличествоМиллиметровВПикселеВысота = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	КоличествоМиллиметровВПикселеШирина = Эталон.Рисунки.Квадрат100Пикселей.Ширина / 100;
	ШиринаШтрихкода = Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселеШирина);
	ВысотаШтрихкода = Окр(Рисунок.Высота / КоличествоМиллиметровВПикселеВысота);
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина"            		, ШиринаШтрихкода);
	ПараметрыШтрихкода.Вставить("Высота"            		, ВысотаШтрихкода);
	ПараметрыШтрихкода.Вставить("ТипКода"           		, 16);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст"   		, Ложь);
	ПараметрыШтрихкода.Вставить("Штрихкод"					, Штрихкод);
	ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание"	, 2);
	Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Определяем, в базе одна используемая лаборатория или больше. Если одна, не выводим колонку лаборатории.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лаборатории.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Лаборатории КАК Лаборатории
		|ГДЕ
		|	НЕ Лаборатории.ПометкаУдаления";
		
	ВыборкаЛабораторииБазы = Запрос.Выполнить().Выбрать();
	
	// Выводим табличную часть Исследования.
	Если ВыборкаЛабораторииБазы.Количество() > 1 Тогда	
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИсследованияДляНескольких");
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИсследованияДляНескольких");
	Иначе	
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИсследованияДляОднойЛаборатории");
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИсследованияДляОднойЛаборатории");
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Исследования") Тогда
		Для Каждого СтрокаИсследования Из ПараметрыПечати.Исследования Цикл 
			ОбластьМакета.Параметры.Заполнить(СтрокаИсследования);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;			
	КонецЕсли;
	
	// Выводим табличную часть Образцы.
    ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОбразцы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ПараметрыПечати.Свойство("Образцы") Тогда
	    ОбластьМакетаОбразцы = Макет.ПолучитьОбласть("СтрокаОбразцы");
	    ОбластьМакетаОбразцыСДопИнформацией = Макет.ПолучитьОбласть("СтрокаОбразцыСДопИнформацией");
		ПорядокЗабора = 0;
		Для Каждого СтрокаОбразцы Из ПараметрыПечати.Образцы Цикл
			// Если для образца указана дополнительная информация, то выводим ее на печать дополнительной строкой.
			Если ПустаяСтрока(СтрокаОбразцы.ДопИнформация) Тогда
				ОбластьМакета = ОбластьМакетаОбразцы;
			Иначе
				ОбластьМакета = ОбластьМакетаОбразцыСДопИнформацией;
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(СтрокаОбразцы);
			ПорядокЗабора = ПорядокЗабора + 1;
			ОбластьМакета.Параметры.ПорядокЗабора = ПорядокЗабора;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЕсли;
	
	// Выводим подвал.
    ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ТолькоПросмотр = Истина;		
	Возврат ТабДокумент;
	
КонецФункции

Функция ПараметрыПечатиЗаказаВПроцедурныйКабинет(СсылкаНаОбъект)
	
	Перем ПараметрыПечати;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДействияНадАнализамиКонтейнеры.НомерСтроки КАК НомерСтроки,
	               |	ДействияНадАнализамиИсследования.Клиент КАК Клиент,
	               |	ДействияНадАнализамиИсследования.Клиент.Фамилия КАК Фамилия,
	               |	ДействияНадАнализамиИсследования.Клиент.Имя КАК Имя,
	               |	ДействияНадАнализамиИсследования.Клиент.Отчество КАК Отчество,
	               |	ДействияНадАнализамиИсследования.Клиент.ДатаРождения КАК ДатаРождения,
	               |	ДействияНадАнализамиИсследования.Клиент.Пол КАК Пол,
	               |	ДействияНадАнализамиКонтейнеры.КодПробы КАК НомерОбразца,
	               |	ДействияНадАнализамиКонтейнеры.БиоматериалПредставление КАК ТипОбразца,
	               |	ДействияНадАнализамиКонтейнеры.КонтейнерПредставление КАК ТипКонтейнера,
	               |	ДействияНадАнализамиКонтейнеры.УсловияТранспортировки КАК УсловияТранспортировки
	               |ИЗ
	               |	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
	               |		ПО ДействияНадАнализамиИсследования.Ссылка = ДействияНадАнализамиКонтейнеры.Ссылка
	               |			И (ДействияНадАнализамиИсследования.Ссылка = &ТекущийДокумент)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицаРезультат = Результат.Выгрузить();
		
		ТаблицаКлиенты = ТаблицаРезультат.Скопировать();
		ТаблицаКлиенты.Свернуть("Клиент, Фамилия, Имя, Отчество, ДатаРождения, Пол");
		Если ТаблицаКлиенты.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Печатная форма применяется только для документов с одним пациентом.'"));
			Возврат Неопределено;
		КонецЕсли;
	
		НомерЗаказа = СсылкаНаОбъект.Номер;
		ДатаОформления = СсылкаНаОбъект.Дата;
		МестоЗабора = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект.Филиал).НазваниеОрганизации;
		
		Врач = СсылкаНаОбъект.Ответственный.Сотрудник;
		ФИОВрача = ?(ЗначениеЗаполнено(Врач), ОбщегоНазначения.ФамилияИнициалыФизЛица(Врач), "");
		
		СтрокаКлиенты = ТаблицаКлиенты[0];
		Клиент = СтрокаКлиенты.Клиент;
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("НомерЗаказа", НомерЗаказа);
		ПараметрыПечати.Вставить("ДатаОформления", ДатаОформления);
		ПараметрыПечати.Вставить("МестоЗабора", МестоЗабора);
		ПараметрыПечати.Вставить("ФИОВрача", ФИОВрача);
		
		ПараметрыПечати.Вставить("Клиент", Клиент);
		ПараметрыПечати.Вставить("Фамилия", ВРег(СтрокаКлиенты.Фамилия));	
		ПараметрыПечати.Вставить("Имя", ВРег(СтрокаКлиенты.Имя));	
		ПараметрыПечати.Вставить("Отчество", ВРег(СтрокаКлиенты.Отчество));	
		ПараметрыПечати.Вставить("ДатаРождения", СтрокаКлиенты.ДатаРождения);	
		ПараметрыПечати.Вставить("Пол", СтрокаКлиенты.Пол);
		
		ТелефонСотовый = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон, 
			Справочники.ВидыКонтактнойИнформации.ТелефонСотовый);
		Если ЗначениеЗаполнено(ТелефонСотовый) Тогда 
			ПараметрыПечати.Вставить("МобТелефон", ТелефонСотовый);
		КонецЕсли;
		
		ЭлектроннаяПочта = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда 
			ПараметрыПечати.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияНадАнализамиИсследования.Номенклатура КАК Номенклатура,
		|	ДействияНадАнализамиИсследования.Лаборатория КАК Лаборатория
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
		|ГДЕ
		|	ДействияНадАнализамиИсследования.Ссылка = &ТекущийДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Номенклатура.Представление КАК НоменклатураНаименование,
		|	ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное КАК НаименованиеИсследования,
		|	ЕстьNULL(НоменклатураАнализов.ID, ТаблицаНоменклатуры.Номенклатура.Артикул) КАК КодИсследования,
		|	ТаблицаНоменклатуры.Лаборатория.ВнешняяЛаборатория КАК ВнешняяЛаборатория,
		|	ТаблицаНоменклатуры.Лаборатория КАК Лаборатория
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
		|		ПО ТаблицаНоменклатуры.Номенклатура = НоменклатураАнализов.Номенклатура
		|			И ТаблицаНоменклатуры.Лаборатория = НоменклатураАнализов.Лаборатория";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
		Исследования = Запрос.Выполнить().Выгрузить();
		Если Исследования.Количество() <> 0 Тогда
			Исследования.Колонки.Добавить("ВидЛаборатории");
			Для Каждого СтрокаИсследования Из Исследования Цикл
				Если ПустаяСтрока(СтрокаИсследования.НаименованиеИсследования) Тогда
					СтрокаИсследования.НаименованиеИсследования = СтрокаИсследования.НоменклатураНаименование;
				КонецЕсли;
					
				СтрокаИсследования.ВидЛаборатории = ?(ЗначениеЗаполнено(СтрокаИсследования.ВнешняяЛаборатория), СтрокаИсследования.ВнешняяЛаборатория, СтрокаИсследования.Лаборатория);
			КонецЦикла;
			
			ПараметрыПечати.Вставить("Исследования", Исследования);
		КонецЕсли;
		
		Образцы = ТаблицаРезультат.Скопировать();
		Образцы.Колонки.Добавить("ДопИнформация", Новый ОписаниеТипов("Строка"));
		
		// Получение дополнительной информации по контейнерам для вывода на печать.
		ДопИнформацияПоКонтейнерам = ЛабораторияСервер.ДополнительнаяИнформацияПоКонтейнерамДляПечатиЗаказа(СсылкаНаОбъект);
		Для Каждого ЭлементДопИнформация Из ДопИнформацияПоКонтейнерам Цикл
			СтрОбразцы = Образцы.Найти(ЭлементДопИнформация.Ключ, "НомерСтроки");
			Если СтрОбразцы <> Неопределено Тогда
				СтрОбразцы.ДопИнформация = ЭлементДопИнформация.Значение;		
			КонецЕсли;
		КонецЦикла;
		
		Образцы.Сортировать("НомерСтроки");
		Образцы.Свернуть("НомерОбразца, ТипОбразца, ТипКонтейнера, УсловияТранспортировки, ДопИнформация");
		ПараметрыПечати.Вставить("Образцы", Образцы);
		
	КонецЕсли;
	
	Возврат ПараметрыПечати;
	
КонецФункции

Функция ПечатьСрокиВыполненияИсследований(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийАнализов.Забор Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Печатная форма используется только для документов с видом операции ""Забор"".'"));
		Возврат Неопределено;	
	КонецЕсли;
		
	Исследования = СсылкаНаОбъект.Исследования.Выгрузить(, "НомерСтроки, Номенклатура, Лаборатория");
	Исследования.Свернуть("НомерСтроки, Номенклатура, Лаборатория");
	СрокиВыполненияИсследований = ЛабораторияСервер.ПолучитьСрокиВыполненияИсследований(Исследования);
	
	Если СрокиВыполненияИсследований.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Для исследований в документе отсутствуют сведения о сроках выполнения.'"));
		Возврат Неопределено;	
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.Защита = Ложь;
	ТабДокумент.ТолькоПросмотр = Истина;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СрокиВыполненияИсследований";

	Макет = ПолучитьМакет("СрокиВыполненияИсследований");

	// Выводим заголовок.
    ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
    ОбластьСтрокаЛаборатория = Макет.ПолучитьОбласть("СтрокаЛаборатория");
    ОбластьСтрокаСрокВыполнения = Макет.ПолучитьОбласть("СтрокаСрокВыполнения");
    ОбластьСтрокаРазделитель = Макет.ПолучитьОбласть("СтрокаРазделитель");
	
	Лаборатория = Неопределено;
	
	Для Каждого СтрСрокиВыполненияИсследований Из СрокиВыполненияИсследований Цикл
		Если Лаборатория <> СтрСрокиВыполненияИсследований.Лаборатория Тогда
			ТабДокумент.Вывести(ОбластьСтрокаРазделитель);
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаЛаборатория.Параметры, СтрСрокиВыполненияИсследований);
			ТабДокумент.Вывести(ОбластьСтрокаЛаборатория);
			Лаборатория = СтрСрокиВыполненияИсследований.Лаборатория;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаСрокВыполнения.Параметры, СтрСрокиВыполненияИсследований);
		ТабДокумент.Вывести(ОбластьСтрокаСрокВыполнения);
	КонецЦикла;
	
	ТабДокумент.ТолькоПросмотр = Истина;
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

Функция НазначенныеАнализыКлиента(Клиент, МоментВремени)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛабораторныеИсследования.ИД КАК ИД,
		|	ЛабораторныеИсследования.МоментВремени КАК МоментВремени
		|ПОМЕСТИТЬ НазначавшиесяАнализы
		|ИЗ
		|	РегистрСведений.ЛабораторныеИсследования КАК ЛабораторныеИсследования
		|ГДЕ
		|	ЛабораторныеИсследования.Статус = &Статус
		|	И ЛабораторныеИсследования.Клиент = &Клиент
		|	И ЛабораторныеИсследования.МоментВремени < &МоментВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсследованияСрез.Номенклатура КАК Номенклатура,
		|	ИсследованияСрез.ИД КАК ИД,
		|	ИсследованияСрез.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЛабораторныеИсследования.СрезПоследних(
		|			&МоментВремени,
		|			ИД В
		|				(ВЫБРАТЬ
		|					НазначавшиесяАнализы.ИД
		|				ИЗ
		|					НазначавшиесяАнализы КАК НазначавшиесяАнализы)) КАК ИсследованияСрез
		|ГДЕ
		|	ИсследованияСрез.Статус = &Статус
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияИсследований.Назначен);
	
	Если ТипЗнч(МоментВремени) = Тип("МоментВремени") Тогда
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Иначе
		Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(МоментВремени, Документы.ДействияНадАнализами.ПустаяСсылка()));
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции

#КонецОбласти