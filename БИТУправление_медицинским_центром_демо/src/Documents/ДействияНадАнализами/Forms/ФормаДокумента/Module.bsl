&НаКлиенте
Перем мАктуальнаПроверкаДоступностиАнализов;

&НаКлиенте
Перем мИзмененыИсследования;

&НаКлиенте
Перем РезультатОжиданияИнтерактивногоВвода;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);
	
	НастройкиУчетаЛабораторий = ЛабораторияСервер.НастройкиУчетаДляДействияНадАнализами(Объект);
	ИспользуетсяРасширеннаяВнутренняяЛаборатория	= НастройкиУчетаЛабораторий.ИспользуетсяРасширеннаяВнутренняяЛаборатория;
	ИспользуетсяУпрощеннаяЛаборатория				= НастройкиУчетаЛабораторий.УпрощеннаяЛабораторияИспользуется;
	ИспользуетсяИнтеграцияСВнешнимиЛабораториями	= НастройкиУчетаЛабораторий.ИспользуетсяИнтеграцияСВнешнимиЛабораториями;
	ИспользуетсяРасширеннаяЛаборатория				= НастройкиУчетаЛабораторий.ИспользуетсяРасширеннаяЛаборатория;
	
	Элементы.СтраницаИнформация.Видимость = Ложь;
	Элементы.ПровереныАвтоматическиЗаполненныеПараметры.Видимость = Ложь;
	
	// Заполнение реквизита формы для отображения дерева контейнеров
	Если ИспользуетсяРасширеннаяЛаборатория Тогда
		Если Объект.Контейнеры.Количество() > 0 Тогда
			ЗаполнитьДеревоКонтейнеровДаннымиДокумента();
		КонецЕсли;
		
		// Определяется видимость списка правил забора
		ИспользуютсяПравилаЗабора = Ложь;
		Выб = Справочники.Лаборатории.Выбрать();
		Пока Выб.Следующий() Цикл
			Если ЛабораторияКлиентСерверПовтИсп.ИспользуютсяПравилаЗабора(Выб.Ссылка) Тогда
				ИспользуютсяПравилаЗабора = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.ГруппаПравилаАнализа.Видимость = ИспользуютсяПравилаЗабора;
	КонецЕсли;
	
	ИнициализацияФормыПоМаршрутуЛабораторий();
	
	УстановитьВидимостьМенюПечатиЭтикеток();
	
	АктуальнаяЛаборатория = ЛабораторияСервер.ПолучитьАктуальнуюЛабораторию();
	
	ТабличныйДокументИнформация.АвтоМасштаб = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВидОперацииЗабор = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор");
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Значение = КешВидовОпераций.ВыбратьЭлемент("Выбор вида операции");
		Если Значение <> Неопределено Тогда
			Объект.ВидОперации = Значение.Значение;
			Если Объект.ВидОперации = ВидОперацииЗабор Тогда
				УстановитьВидимостьМенюПечатиЭтикеток();
			КонецЕсли;
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	РассчитатьЗначенияФлажковРедактированияВСписке();
	
	Если глКешНСИЛаборатории = Неопределено Тогда
		Состояние("Инициализируется кеш лабораторных справочников");
		ЛабораторияКлиент.ПолучитьКешНСИЛабораторийДляСтороныКлиента();
	КонецЕсли;
	ЗаполнитьДанныеФормыКеша();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Для Каждого Исследования Из Объект.Исследования Цикл
			Если КешАнализовАктуальнойЛаборатории.НайтиПоЗначению(Исследования.Номенклатура) <> Неопределено Тогда
				Исследования.Лаборатория = АктуальнаяЛаборатория;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользуетсяРасширеннаяЛаборатория Тогда
		
		Если Объект.ВидОперации = ВидОперацииЗабор Тогда
		
			// Заполнение параметров забора при создании нового заполненного документа
			Если Объект.Ссылка.Пустая()
				И Объект.Исследования.Количество() > 0
			Тогда
			   	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
					ЗаполнитьПравилаВнешнихЛабораторийДляАнализа(СтрокаИсследования);
				КонецЦикла;
				
				РаспределитьАнализыПоЛабораториям();
				Если Объект.Исследования.Количество() > Объект.Исследования.НайтиСтроки(Новый Структура("Лаборатория", ПредопределенноеЗначение("Справочник.Лаборатории.ПустаяСсылка"))).Количество() Тогда
					ОбработкаИзмененияВлияющегоНаПараметрыАнализов();
				КонецЕсли;
			КонецЕсли;
			ИндикацияПараметрыЗабораТребуютВнимания();
		Иначе
			КешВидовОпераций.Удалить(КешВидовОпераций.НайтиПоЗначению(ВидОперацииЗабор));
		КонецЕсли;
	КонецЕсли;
	
	НастройкаВидимостиПоНастройкамУчета();
	НастройкаВидимостиПоВидуОперации();
	
	ВСпискеКлиентПриИзменении(Неопределено);
	ВСпискеИсследованиеПриИзменении(Неопределено);
	
	ОбновитьВидКнопкиОтправкиЗаказа();
	
	мАктуальнаПроверкаДоступностиАнализов = Ложь;
	мИзмененыИсследования = Ложь;
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	Если Не АктуальностьСправочниковЛабораторийПроверена() 
		И Объект.Ссылка.Пустая()
		И Объект.ВидОперации = ВидОперацииЗабор
	Тогда 
		ПодключитьОбработчикОжидания("ПроверитьАктуальностьСправочниковЛабораторий", 0.5, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЛабораторияНеЗаполнена = Ложь;
	
	Если ИспользуетсяРасширеннаяЛаборатория
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор")
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	Тогда
		// Сверка, что проверили автозначения параметров забора.
		Если Элементы.ПровереныАвтоматическиЗаполненныеПараметры.Видимость Тогда
			ПоказатьПредупреждение(, НСтр("ru='Нужно проверить параметры забора, заполненные автоматически'"));
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПараметрыЗабора;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Если есть не заполненные лаборатории, предлагаем дораспределить исследования
		Если ИспользуетсяРасширеннаяЛаборатория
			И Не ИспользуетсяУпрощеннаяЛаборатория
			И Объект.Исследования.НайтиСтроки(Новый Структура("Лаборатория", ПредопределенноеЗначение("Справочник.Лаборатории.ПустаяСсылка"))).Количество() <> 0
		Тогда
			Ответ = Вопрос("В списке исследований есть строки с незаполненой лабораторией. Распределить анализы по лабораториям?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				РаспределитьПоЛабораториям(Неопределено);
				мАктуальнаПроверкаДоступностиАнализов = Ложь;
				мИзмененыИсследования = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Если были ручные изменения лаборатории, проверяем доступность анализов, сообщаем о недоступности 
		Если мАктуальнаПроверкаДоступностиАнализов Тогда
			
			мАктуальнаПроверкаДоступностиАнализов = Ложь;
			
			Если Не АнализыДоступныВЛабораториях(Объект.Дата) Тогда
				Ответ = Вопрос(НСтр("ru='На дату документа не все анализы доступны в лабораториях. Продолжить запись?'"), РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Отказ И Не ОтсутствуетНоменклатураАнализовБезПравилЗабораДляНесколькихЗаявокВОднуЛабораторию() Тогда
			Ответ = Вопрос(НСтр("ru='В документе сформированы контейнеры нескольких заявок для одной лаборатории.
				|Услуги без правил забора будут добавлены в каждую заявку в лабораторию. Продолжить запись?'"),
				РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена,, КодВозвратаДиалога.Отмена);
				
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		Если мИзмененыИсследования Тогда
			Если ЕстьЛабораторииИспользующиеКонтейнеры(Объект.Исследования) Тогда
				ПоказатьПредупреждение(, НСтр("ru='В список исследований были внесены изменения. Возможно, необходимо выполнить распределение по контейнерам!'"));
			КонецЕсли;
			мИзмененыИсследования = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И Не ВСпискеКлиент И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Предупреждение(НСтр("ru='Не выбран клиент!'"),30);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Объект.Исследования);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ВСпискеКлиент
		И Не ВСпискеИсследование
		И ТекущийОбъект.Исследования.Количество() = 0
		И ЗначениеЗаполнено(Клиент)
		И ЗначениеЗаполнено(Исследование)
	Тогда
		СтрокаИсследования = ТекущийОбъект.Исследования.Добавить();
		СтрокаИсследования.Клиент = Клиент;	
		СтрокаИсследования.Номенклатура = Исследование;
	КонецЕсли;
	
	Если Не Элементы.Получатель.Видимость Тогда
		ТекущийОбъект.Получатель = Неопределено;
	КонецЕсли;
	
	Если ИспользуетсяРасширеннаяЛаборатория Тогда
		
		Если Не Отказ Тогда
			ДеревоРаспределенияБиоматериаловЗначение = РеквизитФормыВЗначение("ДеревоРаспределенияБиоматериалов"); 
			ПеренестиДеревоКонтейнеровВДанныеДокумента(ТекущийОбъект,ДеревоРаспределенияБиоматериаловЗначение);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Истина, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ТекущиеДанные = Элементы.ГруппыАнализов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СохранитьГруппуАнализовПоУмолчанию(ТекущиеДанные.Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	ДанныеИсследований = Новый Массив;
	Если ТипЗнч(ВыбранноеЗначение) = тип("Массив") Тогда
		Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборУслугДляСозданияДокумента" Тогда
			ДанныеИсследований = ВыбранноеЗначение;
		Иначе
			Для Каждого КлючЗаписи Из ВыбранноеЗначение Цикл
				ДанныеИсследования = ДанныеИсследованияПоКлючуЗаписи(КлючЗаписи);
				Если ДанныеИсследования <> Неопределено Тогда
					ДанныеИсследований.Добавить(ДанныеИсследования);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.ЛабораторныеИсследования") Тогда
		ДанныеИсследования = ДанныеИсследованияПоКлючуЗаписи(ВыбранноеЗначение);
		Если ДанныеИсследования <> Неопределено Тогда
			ДанныеИсследований.Добавить(ДанныеИсследования);
		КонецЕсли;
	КонецЕсли;
	
	ДобавленныеИсследования = Новый Массив;
	Для Каждого ДанныеИсследования Из ДанныеИсследований Цикл
		Если Не ЗначениеЗаполнено(ДанныеИсследования.ИД)
			Или Объект.Исследования.НайтиСтроки(Новый Структура("ИД",ДанныеИсследования.ИД)).Количество() = 0
		Тогда
			СтрокаИсследования = Объект.Исследования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИсследования, ДанныеИсследования);
			СтрокаИсследования.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Исследования);
			ДобавленныеИсследования.Добавить(СтрокаИсследования);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	РассчитатьЗначенияФлажковРедактированияВСписке();
	
	РаспределитьАнализыПоЛабораториям(ДобавленныеИсследования);
	
	ОбработкаИзмененияВлияющегоНаПараметрыАнализов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновленКешНСИЛаборатории" Тогда
		КешНСИЛабораторииВФормеЗаполнен = Ложь;
		ЗаполнитьДанныеФормыКеша();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормыПоМаршрутуЛабораторий()
	
	// Заполним шаги по схеме
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МаршрутыАнализов.Шаг,
	|	МаршрутыАнализов.Активирован
	|ИЗ
	|	РегистрСведений.МаршрутыАнализов КАК МаршрутыАнализов
	|ГДЕ
	|	МаршрутыАнализов.Филиал = &Филиал";
	
	Запрос.УстановитьПараметр("Филиал", Объект.Филиал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Активирован Тогда
			АктивированныеШаги.Добавить(Выборка.Шаг);	
		КонецЕсли;
	
	КонецЦикла;
	
	КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор"));
	Если АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.ПередачаВСвоюЛибоСтороннююЛабораторию")) <> Неопределено Тогда
		КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПередачаВСтороннююЛабораторию"));
	КонецЕсли;
	Если АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.АнализСвоихМатериалов")) <> Неопределено
		ИЛИ АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.АнализЧужихМатериалов")) <> Неопределено Тогда
		КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ОтметкаВыполненияИсследования"));
	КонецЕсли;
	Если АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.ПолучениеРезультатовИзЛаборатории")) <> Неопределено Тогда
		КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПолучениеРезультатовОтСтороннейЛаборатории"));
	КонецЕсли;
	Если АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.ПередачаВСвоюЛибоСтороннююЛабораторию")) <> Неопределено
		ИЛИ АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.ПолучениеРезультатовИзЛаборатории")) <> Неопределено Тогда
		КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ВозвратПробИзСтороннейЛаборатории"));
	КонецЕсли;
	Если АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.ПередачаРезультатовИсследованияИсточнику")) <> Неопределено Тогда
		КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПередачаРезультатов"));
	КонецЕсли;
	Если АктивированныеШаги.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ШагиМаршрутаАнализов.ПолучениеИзДругойКлиники")) <> Неопределено Тогда
		КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПолучениеАнализа"));
	КонецЕсли;
	КешВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Утеря"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыКеша()

	Если КешНСИЛабораторииВФормеЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим элементы перед перезаполнением дерева групп анализов.
	ГруппыАнализов.ПолучитьЭлементы().Очистить();	
	
	Если глКешНСИЛаборатории <> Неопределено Тогда
		СтрГруппа = Неопределено;
		
		СтрПодгруппа = Неопределено;
		Для каждого ГруппаАнализа из глКешНСИЛаборатории.ГруппыАнализов Цикл
			Если ЗначениеЗаполнено(ГруппаАнализа.Родитель) Тогда
				СтрРодитель = Неопределено;
				Если СтрГруппа.Значение = ГруппаАнализа.Родитель Тогда				
					// Если это - последняя записанная группа, то не будем перебирать элементы
					СтрРодитель = СтрГруппа;
				Иначе
					Для каждого СтрРодитель из ГруппыАнализов.ПолучитьЭлементы() Цикл
						Если СтрРодитель.Значение = ГруппаАнализа.Родитель Тогда
							СтрГруппа = СтрРодитель;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СтрРодитель = Неопределено Тогда
					// Если такого родителя не было, что невероятно
					СтрГруппа = ГруппыАнализов.ПолучитьЭлементы.Добавить();
					СтрГруппа.Значение = ГруппаАнализа.Родитель;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрГруппа.ПолучитьЭлементы().Добавить(), ГруппаАнализа);
			Иначе
				СтрГруппа = ГруппыАнализов.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрГруппа, ГруппаАнализа);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КешАнализовАктуальнойЛаборатории.ЗагрузитьЗначения(ЗаполнитьКешАнализовАктуальнойЛабораторииНаСервере(АктуальнаяЛаборатория));
	
	КешНСИЛабораторииВФормеЗаполнен = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьКешАнализовАктуальнойЛабораторииНаСервере(Лаборатория)
	
	КешАнализовЛабораторий = ЛабораторияСервер.ПолучитьКешАнализовЛабораторий();
	НоменклатураАнализовЛаборатории = КешАнализовЛабораторий.Получить(Лаборатория);
	Если НоменклатураАнализовЛаборатории <> Неопределено Тогда
		ИсключитьНедоступныеАнализыЛабораторииНаСервере(НоменклатураАнализовЛаборатории, Лаборатория, Объект.Дата);
		Возврат НоменклатураАнализовЛаборатории;
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции	

&НаКлиенте
Процедура НастройкаВидимостиПоНастройкамУчета()
	
	ВидОперацииЗабор = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор");
	
	Если ИспользуетсяРасширеннаяЛаборатория И Объект.ВидОперации = ВидОперацииЗабор Тогда
		КешВидовОпераций.Удалить(КешВидовОпераций.НайтиПоЗначению(ВидОперацииЗабор));
	Иначе
		СкрытьЭлементыЗабораРасширеннойЛаборатории();
	КонецЕсли;
	Элементы.ВидОперации.СписокВыбора.ЗагрузитьЗначения(КешВидовОпераций.ВыгрузитьЗначения());
	
	Элементы.ИсследованияКодПробы.Видимость = Не ИспользуетсяРасширеннаяЛаборатория Или ИспользуетсяУпрощеннаяЛаборатория Или Объект.ВидОперации <> ВидОперацииЗабор;
	Элементы.ИсследованияЛаборатория.Видимость = ИспользуетсяРасширеннаяЛаборатория;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЭлементыЗабораРасширеннойЛаборатории()
	
	Элементы.ГруппаПравилаАнализа.Видимость = Ложь;
	Элементы.СтраницаКонтейнеры.Видимость = Ложь;
	Элементы.СтраницаПараметрыЗабора.Видимость = Ложь;
	Элементы.ИсследованияЛаборатория.Видимость = Ложь;
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы,"ИсследованияГруппаКомандыРасширеннойЛаборатории",Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиПоВидуОперации()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПередачаВСтороннююЛабораторию") Тогда
		Элементы.Получатель.Видимость = Истина;
		Элементы.Получатель.Заголовок = "Получатель";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПередачаРезультатов") Тогда 
		Элементы.Получатель.Видимость = Истина;
		Элементы.Получатель.Заголовок = "Получатель";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ВозвратПробИзСтороннейЛаборатории") Тогда
		Элементы.Получатель.Видимость = Истина;
		Элементы.Получатель.Заголовок = "Источник";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПолучениеРезультатовОтСтороннейЛаборатории") Тогда
		Элементы.Получатель.Видимость = Истина;
		Элементы.Получатель.Заголовок = "Источник";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор") Тогда
		
		Элементы.Получатель.Видимость = Ложь;
		
		Если ИспользуетсяРасширеннаяЛаборатория Тогда
			Элементы.ВидОперации.Видимость	 = Ложь;
			Элементы.ГруппаВСписке.Видимость = Ложь;
			Элементы.Анонимно.Видимость		 = Истина;
			Элементы.Клиент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ОтметкаВыполненияИсследования") Тогда
		Элементы.Получатель.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Утеря") Тогда
		Элементы.Получатель.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.ПолучениеАнализа") Тогда
		Элементы.Получатель.Видимость = Истина;
		Элементы.Получатель.Заголовок = "Источник";
	КонецЕсли;                                                                      
	
	Элементы.ГруппаВводАнализов.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор") И ГруппыАнализов.ПолучитьЭлементы().Количество() <> 0;
	
	Если Элементы.ГруппаВводАнализов.Видимость Тогда
		ГруппаАнализовЗначение = ПолучитьГруппуАнализовПоУмолчанию();
		Для Каждого Группа из ГруппыАнализов.ПолучитьЭлементы() Цикл
			Если Группа.Значение = ГруппаАнализовЗначение Тогда
				Элементы.ГруппыАнализов.ТекущаяСтрока = Группа.ПолучитьИдентификатор();
				Возврат;
			Иначе
				Для Каждого Подгруппа из Группа.ПолучитьЭлементы() Цикл
					Если Подгруппа.Значение = ГруппаАнализовЗначение Тогда
						Элементы.ГруппыАнализов.ТекущаяСтрока = Подгруппа.ПолучитьИдентификатор();
						Возврат;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	НастройкаВидимостиПоВидуОперации();

КонецПроцедуры

&НаКлиенте
Процедура ВСпискеКлиентПриИзменении(Элемент)
	
	Элементы.Клиент.Доступность = НЕ ВСпискеКлиент;
	Элементы.ИсследованияКлиент.Видимость = ВСпискеКлиент;
	Если ВСпискеКлиент Тогда
		Клиент = Неопределено;
	Иначе
		Для Каждого Строка из Объект.Исследования Цикл
			Если ЗначениеЗаполнено(Строка.Клиент) Тогда
				Строка.Клиент = Клиент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВСпискеИсследованиеПриИзменении(Элемент)
	
	Элементы.Исследование.Видимость = НЕ ВСпискеИсследование;
	Элементы.ИсследованияНоменклатура.Видимость = ВСпискеИсследование;

	Если ВСпискеИсследование Тогда
		Для Каждого Строка из Объект.Исследования Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Строка.Номенклатура = Исследование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	КлиентАнализовИзменился = Ложь;
	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
		Если СтрокаИсследования.Клиент <> Клиент Тогда
			КлиентАнализовИзменился = Истина;
			СтрокаИсследования.Клиент = Клиент;
		КонецЕсли;
	КонецЦикла;
	
	Если КлиентАнализовИзменился Тогда
		ИсследованияКопия = Объект.Исследования;
		ИдИсследований = ОчиститьИдентификаторыАнализовПолучитьЗначения(ОбщегоНазначения.ВыгрузитьКолонку(ИсследованияКопия, "ИД", Ложь), Объект.Ссылка, Объект.Дата);
		Для Сч = 0 По ИдИсследований.Количество()-1 Цикл
			Объект.Исследования[Сч].Ид = ИдИсследований[Сч];
		КонецЦикла;
		ОбработкаИзмененияВлияющегоНаПараметрыАнализов();
	КонецЕсли;
	
	Если Не УКлиентовКорректноУказанаДатаРождения(Клиент) Тогда
		ПоказатьПредупреждение(, "У клиента " + Строка(Клиент) + " указана неправильная дата рождения!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УКлиентовКорректноУказанаДатаРождения(Клиент)
	Если ЗначениеЗаполнено(Клиент) Тогда
		Если ДобавитьМесяц(Клиент.ДатаРождения, 12 * 115) < ТекущаяДата() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИсследованиеПриИзменении(Элемент)
	
	Для Каждого Строка из Объект.Исследования Цикл
		Строка.Номенклатура = Исследование;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗначенияФлажковРедактированияВСписке()
	
	КоличествоИсследований = Объект.Исследования.Количество();
	
	Если ИспользуетсяРасширеннаяЛаборатория 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор")
	Тогда
	
		ВСпискеИсследование = Истина;
		ВСпискеКлиент = Ложь;
		
	Иначе
	
		Если КоличествоИсследований <= 1 Тогда
			ВСпискеКлиент = Ложь;
			ВСпискеИсследование = Ложь;
		Иначе
			Если Объект.Исследования.НайтиСтроки(Новый Структура("Клиент", Объект.Исследования[0].Клиент)).Количество() = КоличествоИсследований Тогда
				ВСпискеКлиент = Ложь;
			Иначе
				ВСпискеКлиент = Истина;
			КонецЕсли;
			Если Объект.Исследования.НайтиСтроки(Новый Структура("Номенклатура", Объект.Исследования[0].Номенклатура)).Количество() = КоличествоИсследований Тогда
				ВСпискеИсследование = Ложь;
			Иначе
				ВСпискеИсследование = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоИсследований > 0 Тогда
		Если Не ВСпискеКлиент Тогда
			Клиент = Объект.Исследования[0].Клиент;
		КонецЕсли;
		Если Не ВСпискеИсследование Тогда
			Исследование = Объект.Исследования[0].Номенклатура;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор")
		Или Не ЗначениеЗаполнено(Клиент) Или Не ВСпискеКлиент
	Тогда
		ИсключаемыеАнализы = Новый Массив;
		Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
			ИсключаемыеАнализы.Добавить(СтрокаИсследования.Номенклатура);
		КонецЦикла;
		РаботаСКлиентамиКлиентПереопределяемый.ВыборатьУслугиКлиентовДляСозданияДокумента("Выбор",Клиент,,ЭтаФорма,ИсключаемыеАнализы);
		Возврат;
	КонецЕсли;
	
	Если Объект.Исследования.Количество() <> 0 Тогда
		Если Вопрос("Табличная часть уже имеет записи, очистить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.Исследования.Очистить();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	СтруктураПодборов = Новый Структура;
	СтруктураПодборов.Вставить("Дата",Объект.Дата);
	СтруктураПодборов.Вставить("Клиника",Объект.Филиал);
	СтруктураПодборов.Вставить("Местонахождение",Объект.Получатель);
	СтруктураПодборов.Вставить("Подбор",Истина);
	СтруктураПодборов.Вставить("ВидОперацииДокументаВладельца",Объект.ВидОперации);
	СтруктураПодборов.Вставить("ТекущиеИД",ПолучитьТекущиеИД());
	СтруктураПараметров = Новый Структура("ОтборыПодбора,ЗакрыватьПриВыборе",СтруктураПодборов,Ложь);
	ФормаПодбора = ПолучитьФорму("Обработка.ЛабораторныеИсследования.Форма.Форма",СтруктураПараметров,ЭтаФорма);
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущиеИД()
	
	СписокИД = Новый СписокЗначений;
	
	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
		СписокИД.Добавить(СтрокаИсследования.ИД);
	КонецЦикла;
	
	Возврат СписокИД;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеИсследованияПоКлючуЗаписи(КлючЗаписи)
	
	Исследование = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Исследования.Период,
	|	Исследования.Регистратор,
	|	Исследования.НомерСтроки,
	|	Исследования.Активность,
	|	Исследования.ИД,
	|	Исследования.ДатаНачала,
	|	Исследования.КлиникаИсходная,
	|	Исследования.Местонахождение,
	|	Исследования.КодПробы,
	|	Исследования.Клиент,
	|	Исследования.Статус,
	|	Исследования.Номенклатура
	|ИЗ
	|	РегистрСведений.ЛабораторныеИсследования КАК Исследования
	|ГДЕ
	|	Исследования.ИД = &ИД
	|	И Исследования.Период = &Период
	|	И Исследования.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Период", КлючЗаписи.Период);
	Запрос.УстановитьПараметр("Регистратор", КлючЗаписи.Регистратор);
	Запрос.УстановитьПараметр("ИД", КлючЗаписи.ИД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Исследование = Новый Структура;
		Для Каждого Колонка Из Результат.Колонки Цикл
			Исследование.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Исследование;
	
КонецФункции

&НаКлиенте
Процедура ИсследованияПриАктивизацииСтроки(Элемент)
	
	Если ИспользуетсяИнтеграцияСВнешнимиЛабораториями Тогда
	
		ТекущиеДанные = Элементы.Исследования.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОтобразитьПравилаЗабораТекущегоИсследования(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсследованияПередУдалением(Элемент, Отказ)
	
	// Удаление связанных правил забора внешних лабораторий
	Если ИспользуетсяИнтеграцияСВнешнимиЛабораториями Тогда
		Отбор = Новый Структура("КлючСтрокиИсследования", Элемент.ТекущиеДанные.КлючСтроки);
		
		СтрокиНаУдаление = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Отбор);
		Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
			Объект.ПравилаВнешнихЛабораторий.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		ПравилаАнализа.Очистить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсследованияПослеУдаления(Элемент)
	ОбработкаИзмененияВлияющегоНаСоставЛабораторий();
КонецПроцедуры

&НаКлиенте
Процедура ИсследованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Исследования.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.ИД = Неопределено;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Исследования);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Лаборатория)
			И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
			И КешАнализовАктуальнойЛаборатории.НайтиПоЗначению(ТекущиеДанные.Номенклатура) <> Неопределено
		Тогда
			ТекущиеДанные.Лаборатория = АктуальнаяЛаборатория;
			ОбработкаИзмененияВлияющегоНаСоставЛабораторий();
		КонецЕсли;
		
		Если Копирование
			И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
			И ЗначениеЗаполнено(ТекущиеДанные.Лаборатория)
		Тогда
			ЗаполнитьПравилаВнешнихЛабораторийДляАнализа(ТекущиеДанные);
			ОтобразитьПравилаЗабораТекущегоИсследования(ТекущиеДанные);
		Иначе // Не копирование.
			Если Не ВСпискеКлиент И Не ЗначениеЗаполнено(ТекущиеДанные.Клиент) Тогда
				ТекущиеДанные.Клиент = Клиент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсследованияНоменклатураПриИзменении(Элемент)
	
	Если ИспользуетсяРасширеннаяЛаборатория Тогда
		
		ТекущиеДанные = Элементы.Исследования.ТекущиеДанные;
				
		мНоменклатура = Новый Массив;
		мНоменклатура.Добавить(ТекущиеДанные.Номенклатура);
		
		Если ТекущиеДанные.Лаборатория.Пустая() Тогда
			РаспределитьАнализыПоЛабораториям(ТекущиеДанные)
		Иначе
			ЗаполнитьПравилаВнешнихЛабораторийДляАнализа(ТекущиеДанные);
			ОбработкаИзмененияВлияющегоНаПараметрыАнализов();
		КонецЕсли;
		
		ОтобразитьПравилаЗабораТекущегоИсследования(ТекущиеДанные);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсследованияЛабораторияПриИзменении(Элемент)
	
	Если ИспользуетсяРасширеннаяЛаборатория Тогда
		ТекущиеДанные = Элементы.Исследования.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			мАктуальнаПроверкаДоступностиАнализов = Истина;
			ЗаполнитьПравилаВнешнихЛабораторийДляАнализа(ТекущиеДанные);
			ОтобразитьПравилаЗабораТекущегоИсследования(ТекущиеДанные);
		КонецЕсли; 
		ОбработкаИзмененияВлияющегоНаСоставЛабораторий();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаПриИзменении(Элемент)
	ЗаполнитьСписокПодбораАнализовПоГруппе();
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание <> 0 Тогда
		ТекстОтбора = Текст;
		ЗаполнитьСписокПодбораАнализовПоГруппе(ТекстОтбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыАнализовПриАктивизацииСтроки(Элемент)
	
	// Очистка отбора
	Если ЗначениеЗаполнено(ЗначениеПоискаАнализа) Тогда
		ЗначениеПоискаАнализа = "";
	КонецЕсли;
	
	// Вывод содержимого текущей группы
	ЗаполнитьСписокПодбораАнализовПоГруппе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПодбораАнализовПоГруппе(ТекстОтбора = Неопределено)
	
	Если ТекстОтбора = Неопределено Тогда
		ТекстОтбора = ЗначениеПоискаАнализа;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ГруппыАнализов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		НоменклатураАнализов.Очистить();
		СтрокиНоменклатурыГруппы = Новый Массив;
		Для Каждого эл Из глКешНСИЛаборатории.НоменклатураГрупп Цикл 
			Если эл.Группа = ТекущиеДанные.Значение Тогда 
				СтрокиНоменклатурыГруппы.Добавить(эл);
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстОтбора) Тогда 
			КоллекцияДляОбходаНоменклатур = СтрокиНоменклатурыГруппы;
		Иначе
			КоллекцияДляОбходаНоменклатур = глКешНСИЛаборатории.НоменклатураГрупп;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатурыГруппы Из КоллекцияДляОбходаНоменклатур Цикл
			Если ПустаяСтрока(ТекстОтбора)
				Или Найти(ВРег(СтрокаНоменклатурыГруппы.ПредставлениеНоменклатуры), ВРег(ТекстОтбора)) <> 0
				Или Найти(ВРег(СтрокаНоменклатурыГруппы.ИД), ВРег(ТекстОтбора)) <> 0
			Тогда
				СтрокаНоменклатурыАнализов = НоменклатураАнализов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоменклатурыАнализов, СтрокаНоменклатурыГруппы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураАнализовПриАктивизацииСтроки(Элемент)
	ПриАктивацииНоменклатураАнализов();
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивацииНоменклатураАнализов()
	
	ТекущиеДанные = Элементы.НоменклатураАнализов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияАнализаОбщая = ТекущиеДанные.Комментарий;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураАнализовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаИсследования = Объект.Исследования.Добавить();
	СтрокаИсследования.Номенклатура = НоменклатураАнализов.НайтиПоИдентификатору(ВыбраннаяСтрока).Номенклатура;
	Если Не ВСпискеКлиент Тогда
		СтрокаИсследования.Клиент = Клиент;
	КонецЕсли;
	
	Если Не ВСпискеИсследование
		И СтрокаИсследования.Номенклатура <> НоменклатураАнализов
	Тогда
		ВСпискеИсследование = Истина;
		ВСпискеИсследованиеПриИзменении(Неопределено);
	КонецЕсли;
	СтрокаИсследования.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Исследования);
	
	Если ИспользуетсяРасширеннаяЛаборатория Тогда
		РаспределитьАнализыПоЛабораториям(СтрокаИсследования);
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
	Элементы.Исследования.ТекущаяСтрока = СтрокаИсследования.ПолучитьИдентификатор();
	ЭтаФорма.ТекущийЭлемент = Элементы.Исследования;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаАнализаПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаАнализа.ТекущиеДанные;
	ТекущиеДанныеИсследования = Элементы.Исследования.ТекущиеДанные;
	Если ТекущиеДанныеИсследования <> Неопределено Тогда
			
		Если ТекущиеДанные.Пометка Тогда
			
			УстановитьИспользованиеПравилаАнализа(ТекущиеДанныеИсследования.КлючСтроки, ТекущиеДанные.ИдПравила, Истина);
			
			Если Не ТекущиеДанные.ВыборНесколькихПравилЗабора Тогда
				
				Для Каждого СтрокаПравило Из ПравилаАнализа Цикл
					Если СтрокаПравило.ПолучитьИдентификатор() <> Элементы.ПравилаАнализа.ТекущаяСтрока И Не СтрокаПравило.Обязательное Тогда
						СтрокаПравило.Пометка = Ложь;
						УстановитьИспользованиеПравилаАнализа(ТекущиеДанныеИсследования.КлючСтроки, СтрокаПравило.ИдПравила, Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.Обязательное Тогда
				ТекущиеДанные.Пометка = Истина;
			Иначе 
				УстановитьИспользованиеПравилаАнализа(ТекущиеДанныеИсследования.КлючСтроки, ТекущиеДанные.ИдПравила, Ложь);
			КонецЕсли; 
		КонецЕсли;
		
		ОбработкаИзмененияВлияющегоНаПараметрыАнализов();
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИспользованиеПравилаАнализа(КлючСтрокиИсследования, ИдПравила, Пометка)
	
	Отбор = Новый Структура("КлючСтрокиИсследования, ИдПравила", КлючСтрокиИсследования, ИдПравила);
	СтрокиПравил = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Отбор);
	Если СтрокиПравил.Количество() <> 0 Тогда
		СтрокиПравил[0].Пометка = Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравилаЗабораИсследования(СтрокаИсследования)
	
	Отбор = Новый Структура("КлючСтрокиИсследования", СтрокаИсследования.КлючСтроки);
	СтрокиПравил = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Отбор);
	Для Каждого ОбъектСтрокаПравилаАнализа Из СтрокиПравил Цикл
		Объект.ПравилаВнешнихЛабораторий.Удалить(ОбъектСтрокаПравилаАнализа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПравилаЗабораТекущегоИсследования(СтрокаИсследования)
	
	ПравилаАнализа.Очистить();
	
	ПравилаЗабора = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Новый Структура("КлючСтрокиИсследования", СтрокаИсследования.КлючСтроки));
	Для Каждого ПравилоЗабора Из ПравилаЗабора Цикл
		
		ЗаполнитьЗначенияСвойств(ПравилаАнализа.Добавить(), ПравилоЗабора);
		
	КонецЦикла;
	
	Элементы.ВыборНесколькихПравилЗабора.Видимость = ПравилаЗабора.Количество() <> 0 И ПравилаЗабора[0].ВыборНесколькихПравилЗабора;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилаВнешнихЛабораторийДляАнализа(СтрокаИсследования)

	УдалитьПравилаЗабораИсследования(СтрокаИсследования);
	
	Если СтрокаИсследования.Номенклатура.Пустая()
		Или СтрокаИсследования.Лаборатория.Пустая()
		Или Не ЛабораторияКлиентСерверПовтИсп.ИспользуютсяПравилаЗабора(СтрокаИсследования.Лаборатория)
	Тогда
		Возврат; 
	КонецЕсли;
	
	ПравилаЗабораАнализа = ЛабораторияКлиент.ПолучитьПравилаЗабораАнализа(СтрокаИсследования.Номенклатура, СтрокаИсследования.Лаборатория, ЭтотОбъект);
	
	Если ТипЗнч(ПравилаЗабораАнализа) = Тип("Массив") Тогда  // Первоначальный обработчик.
		
		ЗаполнитьПравилаВнешнихЛабораторийДляАнализаПолученнымиПравилами(СтрокаИсследования, ПравилаЗабораАнализа);
		
	ИначеЕсли ТипЗнч(ПравилаЗабораАнализа) = Тип("Строка") Тогда  // Адрес временного хранилища. Лаборатория делает интерактивный ввод в отдельном окне.
		
		Если ТипЗнч(РезультатОжиданияИнтерактивногоВвода) <> Тип("Массив") Тогда
			РезультатОжиданияИнтерактивногоВвода = Новый Массив;
		КонецЕсли;
		
		СтрокаИнтерактивногоВвода = Новый Структура;
		СтрокаИнтерактивногоВвода.Вставить("СтрокаИсследования", СтрокаИсследования);
		СтрокаИнтерактивногоВвода.Вставить("АдресПравилаЗабораАнализа", ПравилаЗабораАнализа);
		РезультатОжиданияИнтерактивногоВвода.Добавить(СтрокаИнтерактивногоВвода);
		
		ПодключитьОбработчикОжидания("ЗаполнитьПравилаАнализаПослеИнтерактивногоВводаЛабораторией", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилаВнешнихЛабораторийДляАнализаПолученнымиПравилами(СтрокаИсследования, ПравилаЗабораАнализа)
	
	Если ТипЗнч(ПравилаЗабораАнализа) = Тип("Массив") Тогда  // Первоначальный обработчик.
		Для Каждого ПравилоЗабора Из ПравилаЗабораАнализа Цикл
			ПравилоЗабораИсследования = Объект.ПравилаВнешнихЛабораторий.Добавить();
			ЗаполнитьЗначенияСвойств(ПравилоЗабораИсследования, ПравилоЗабора);
			ПравилоЗабораИсследования.КлючСтрокиИсследования = СтрокаИсследования.КлючСтроки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилаАнализаПослеИнтерактивногоВводаЛабораторией()
	
	Если РезультатОжиданияИнтерактивногоВвода <> Неопределено Тогда
		Если ВводДоступен() Тогда
			// Ввод в отдельных окнах завершен.
			Для Каждого СтрокаИнтерактивногоВвода Из РезультатОжиданияИнтерактивногоВвода Цикл
				ПравилаЗабораАнализа = ПолучитьИзВременногоХранилища(СтрокаИнтерактивногоВвода.АдресПравилаЗабораАнализа);
				Если ТипЗнч(ПравилаЗабораАнализа) = Тип("Массив") Тогда
					ЗаполнитьПравилаВнешнихЛабораторийДляАнализаПолученнымиПравилами(СтрокаИнтерактивногоВвода.СтрокаИсследования, ПравилаЗабораАнализа);
				КонецЕсли;
			КонецЦикла;
			РезультатОжиданияИнтерактивногоВвода = Неопределено;
			Если Элементы.Исследования.ТекущиеДанные <> Неопределено Тогда
				ОтобразитьПравилаЗабораТекущегоИсследования(Элементы.Исследования.ТекущиеДанные);
			КонецЕсли;
		Иначе
			// Интерактивный ввод еще продолжается. Ждем возврата управления в форму документа.
			ПодключитьОбработчикОжидания("ЗаполнитьПравилаАнализаПослеИнтерактивногоВводаЛабораторией", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СброситьПравилаЗабора(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Исследования.ВыделенныеСтроки Цикл
		
		СтрокаИсследования = Элементы.Исследования.ДанныеСтроки(ВыделеннаяСтрока);
		Если СтрокаИсследования = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаИсследования.Лаборатория)
			И ЛабораторияКлиентСерверПовтИсп.ИспользуютсяПравилаЗабора(СтрокаИсследования.Лаборатория)
		Тогда
			ВыбранныеПравилаЗабора = Новый Массив;
			
			ПравилаЗабораИсследования = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Новый Структура("КлючСтрокиИсследования", СтрокаИсследования.КлючСтроки));
			Для Каждого ПравилоЗабора Из ПравилаЗабораИсследования Цикл
				
				Если ПравилоЗабора.Пометка И Не ПравилоЗабора.Обязательное Тогда
					ВыбранныеПравилаЗабора.Добавить(ПравилоЗабора.ИдПравила);
				КонецЕсли;
				
			КонецЦикла;
			
			УдалитьПравилаЗабораИсследования(СтрокаИсследования);
			ЗаполнитьПравилаВнешнихЛабораторийДляАнализа(СтрокаИсследования);
			
			ПравилаЗаборИсследования = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Новый Структура("КлючСтрокиИсследования", СтрокаИсследования.КлючСтроки));
			Для Каждого ПравилоЗабора Из ПравилаЗаборИсследования Цикл
				Если ВыбранныеПравилаЗабора.Найти(ПравилоЗабора.ИдПравила) <> Неопределено Тогда
					ПравилоЗабора.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.Исследования.ТекущиеДанные <> Неопределено Тогда
		ОтобразитьПравилаЗабораТекущегоИсследования(Элементы.Исследования.ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьАнализыПоЛабораториям(СтрокиИсследований = Неопределено)
	
	Если СтрокиИсследований = Неопределено Тогда
		СтрокиИсследованийМассив = Объект.Исследования;
	ИначеЕсли ТипЗнч(СтрокиИсследований) = Тип("ДанныеФормыКоллекция")
		Или ТипЗнч(СтрокиИсследований) = Тип("Массив")
	Тогда
		СтрокиИсследованийМассив = СтрокиИсследований;
	Иначе
		СтрокиИсследованийМассив = Новый Массив;
		СтрокиИсследованийМассив.Добавить(СтрокиИсследований);
	КонецЕсли;
	
	СтрокиИсследованийБезЛаб = Новый Массив;
	НоменклатураИсследований = Новый Массив;
	
	Для Каждого СтрокаИсследования Из СтрокиИсследованийМассив Цикл
		Если Не ЗначениеЗаполнено(СтрокаИсследования.Лаборатория)
			И ЗначениеЗаполнено(СтрокаИсследования.Номенклатура)
		Тогда
			СтрокиИсследованийБезЛаб.Добавить(СтрокаИсследования);
			Если НоменклатураИсследований.Найти(СтрокаИсследования.Номенклатура) = Неопределено Тогда
				НоменклатураИсследований.Добавить(СтрокаИсследования.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АктуальнаяЛаборатория) Тогда
		// В базе единственная лаборатория с включенными настройкми обмена.
		// подставляем её без учёта приоритетов и наличия оснвной лаборатории филиала.
		ЛабораторииИсследований = Новый Соответствие;
		ЭтоВнутренняяЛаборатория = Не ЗначениеЗаполнено(ЛабораторияСерверПовтИсп.ВидЛаборатории(АктуальнаяЛаборатория));
		
		Для Каждого СтрокаИсследования Из СтрокиИсследованийБезЛаб Цикл
			Если ЭтоВнутренняяЛаборатория
				Или КешАнализовАктуальнойЛаборатории.НайтиПоЗначению(СтрокаИсследования.Номенклатура) <> Неопределено
			Тогда
				ЛабораторииИсследований.Вставить(СтрокаИсследования.Номенклатура, АктуальнаяЛаборатория);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Вычисление на сервере с учётом приоритетов лабораторий.
		ЛабораторииИсследований = ЛабораторияСервер.ПолучитьЛабораторииИсследований(НоменклатураИсследований, Объект.Дата, Объект.Филиал);
	КонецЕсли;

	БылиИзмененияЛабораторий = Ложь;
	Для Каждого СтрокаИсследования Из СтрокиИсследованийБезЛаб Цикл
		
		СтрокаИсследования.Лаборатория = ЛабораторииИсследований.Получить(СтрокаИсследования.Номенклатура);
		БылиИзмененияЛабораторий = Истина;
		
		// Заполнение правил забора, если применимо.
		Если ЗначениеЗаполнено(СтрокаИсследования.Лаборатория) Тогда
			ЗаполнитьПравилаВнешнихЛабораторийДляАнализа(СтрокаИсследования);
		КонецЕсли;
	КонецЦикла;
	
	Если БылиИзмененияЛабораторий Тогда
		ОбработкаИзмененияВлияющегоНаСоставЛабораторий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументНазначения(Команда)
	
	ТекущиеДанные = Элементы.Исследования.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИД) Тогда
		ПоказатьПредупреждение(,"Необходимо сначала записать документ или распределить анализы по контейнерам");
	Иначе
		СсылкаНаДокумент = ПолучитьДокументНазначенияПоИД(ТекущиеДанные.ИД);
		Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			ПоказатьЗначение(,СсылкаНаДокумент);
		Иначе
			ПоказатьПредупреждение(, "Не найден документ назначения анализа");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументНазначенияПоИД(ИД)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИД", ИД);
	Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияИсследований.Назначен);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛабораторныеИсследования.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ЛабораторныеИсследования КАК ЛабораторныеИсследования
		|ГДЕ
		|	ЛабораторныеИсследования.ИД = &ИД
		|	И ЛабораторныеИсследования.Статус = &Статус";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор; 
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьЗаказВЛабораторию(Команда)
	
	РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтотОбъект, Истина, Новый ОписаниеОповещения("ОтправитьЗаказВЛабораториюПослеЗаписи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказВЛабораториюПослеЗаписи(Результат = Неопределено, Параметры = Неопределено) Экспорт
	
	ОтправляющиеЛаборатории = ПредставлениеКнопокОтправкиЗаказа();
	
	Если ОтправляющиеЛаборатории.Количество() = 1 Тогда
		// Выполнить команду
		ОтправитьЗаказВЛабораториюПослеВыбораЛаборатории(ОтправляющиеЛаборатории[0]);
		
	ИначеЕсли ОтправляющиеЛаборатории.Количество() > 1 Тогда
		// В документе более одной лаборатории с отправкой заказа. Выбираем желаемую
		ОтправляющиеЛаборатории.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
		Оповещение = Новый ОписаниеОповещения("ОтправитьЗаказВЛабораториюПослеВыбораЛаборатории", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "В какую лабораторию произвести отправку?", ОтправляющиеЛаборатории,,КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказВЛабораториюПослеВыбораЛаборатории(ДанныеЛаборатории, Параметры = Неопределено) Экспорт
	
	Если ДанныеЛаборатории = Неопределено
		Или ДанныеЛаборатории = КодВозвратаДиалога.Отмена
	Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЛаборатории) = Тип("ЭлементСпискаЗначений") Тогда
		Лаборатория = ДанныеЛаборатории.Значение;
	ИначеЕсли ТипЗнч(ДанныеЛаборатории) = Тип("СправочникСсылка.Лаборатории") Тогда
		Лаборатория = ДанныеЛаборатории;
	Иначе
		Возврат;
	КонецЕсли;
	
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория, Ложь);
	Попытка
		СделанныеИзменения = МодульОбработчик.ОтправитьЗаказИнтерактивно(Объект, Лаборатория);
		
		ОбновитьВидКнопкиОтправкиЗаказа();
		УстановитьВидимостьМенюПечатиЭтикеток();
		
		Если ТипЗнч(СделанныеИзменения) = Тип("Структура") Тогда
			ПостобработкаОтправкиЗаказа(СделанныеИзменения);
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостобработкаОтправкиЗаказа(СделанныеИзменения)
	
	Если СделанныеИзменения.Свойство("Изменен_Контейнеры") Тогда
		ЗаполнитьДеревоКонтейнеровДаннымиДокумента();
	КонецЕсли;
	
	Если СделанныеИзменения.Свойство("Изменен_Объект") Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоЛабораториям(Команда)
	
	РаспределитьАнализыПоЛабораториям(Объект.Исследования);
	
	Если Элементы.Исследования.ТекущиеДанные <> Неопределено Тогда
		ОтобразитьПравилаЗабораТекущегоИсследования(Элементы.Исследования.ТекущиеДанные);
	КонецЕсли; 
	
	ОбработкаИзмененияВлияющегоНаСоставЛабораторий();
	ЭтаФорма.Модифицированность = Истина;
	мАктуальнаПроверкаДоступностиАнализов = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДоступностьИсследованийВнешнихЛабораторий(Команда)
	
	МассивНоменклатура = Новый Массив;
	МассивЛаборатории = Новый Массив;
	
	Для Каждого СтрИсследования Из Объект.Исследования Цикл
		Если ЗначениеЗаполнено(СтрИсследования.Номенклатура)
			И МассивНоменклатура.Найти(СтрИсследования.Номенклатура) = Неопределено 
		Тогда
			МассивНоменклатура.Добавить(СтрИсследования.Номенклатура);	
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрИсследования.Лаборатория)
			И МассивЛаборатории.Найти(СтрИсследования.Лаборатория) = Неопределено 
		Тогда
			ВнешняяЛаборатория = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрИсследования.Лаборатория, "ВнешняяЛаборатория");
			Если ЗначениеЗаполнено(ВнешняяЛаборатория) Тогда
				МассивЛаборатории.Добавить(СтрИсследования.Лаборатория);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент = ТабличныйДокументСДаннымиОДоступностиИсследованийВнешнихЛабораторий(НачалоДня(Объект.Дата),
		МассивЛаборатории, МассивНоменклатура);
		
	Если ТабличныйДокумент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не удалось получить данные о доступности исследований внешних лабораторий.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТабличныйДокумент", ТабличныйДокумент);
	ОткрытьФорму("Отчет.ДоступностьИсследованийВнешнихЛабораторий.Форма.ДоступностьВДокументеЗабораИсследований",
		ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТабличныйДокументСДаннымиОДоступностиИсследованийВнешнихЛабораторий(Дата, МассивЛаборатории, МассивНоменклатура)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	МакетСКД = Отчеты.ДоступностьИсследованийВнешнихЛабораторий.ПолучитьМакет("ДоступностьВДокументеЗабораИсследований");
	
	ОтчетОбъект = Отчеты.ДоступностьИсследованийВнешнихЛабораторий.Создать();
	ОтчетОбъект.мНоменклатураАнализов = МассивНоменклатура;
	
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);		
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ПараметрДата = ПараметрыДанных.Найти("Дата");
	ПараметрДата.Значение = ТекущаяДатаСеанса();
	ПараметрДата.Использование = Истина;
	
	Лаборатории = Новый СписокЗначений;
	Лаборатории.ЗагрузитьЗначения(МассивЛаборатории);
	ПараметрЛаборатории = ПараметрыДанных.Найти("Лаборатории");
	Если ПараметрЛаборатории = Неопределено Тогда
		ПараметрЛаборатории = ПараметрыДанных.Добавить();
		ПараметрЛаборатории.Параметр = Новый ПараметрКомпоновкиДанных("Лаборатории");
	КонецЕсли;
	ПараметрЛаборатории.Значение = Лаборатории;
	ПараметрЛаборатории.Использование = Истина;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОтчетОбъект.СкомпоноватьРезультат(ТабличныйДокумент);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьДоступностьАнализов(Команда)
	
	Если АнализыДоступныВЛабораториях(Объект.Дата) Тогда
		Предупреждение(НСтр("ru='Конфликтов доступности нет.'"), 10);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АнализыДоступныВЛабораториях(ДатаПроверки)
	
	Результат = Истина;
	
	ТекстСообщения = ЛабораторияСервер.ПроверитьДоступностьИсследованийВнешнихЛабораторий(Объект.Исследования, ДатаПроверки);
	
	Если ЗначениеЗаполнено(ТекстСообщения)  Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
		Результат = Ложь;
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьГруппуАнализовПоУмолчанию()
	
	Возврат ХранилищеОбщихНастроек.Загрузить("ФормаДействияНадАнализами", "ОсновнаяГруппаАнализов");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьГруппуАнализовПоУмолчанию(Знач ТекущаяГруппа)
	
	ХранилищеОбщихНастроек.Сохранить("ФормаДействияНадАнализами", "ОсновнаяГруппаАнализов", ТекущаяГруппа);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоКонтейнерамНаСервере()
	
	Документы.ДействияНадАнализами.ЗаполнитьИдентификаторыИсследований(Объект, Клиент);
	
	СтароеРаспределение = РеквизитФормыВЗначение("ДеревоРаспределенияБиоматериалов");
	
	ОчиститьПерезаполняемыеКонтейнеры(); // Удаляем контейнеры только тех лабораторий, которые заполняют их в стандартном порядке.
	ДеревоРаспределенияБиоматериаловЗначение = РеквизитФормыВЗначение("ДеревоРаспределенияБиоматериалов"); 	
	
	УникальныеВидыЛабораторий = ЛабораторияСервер.ЛабораторииИсследований(Объект.Исследования, Истина);
	
	Для Каждого ВидЛаборатории Из УникальныеВидыЛабораторий Цикл 
		
		ДанныеЗабора = ПолучитьДанныеЗабораДляРаспределенияПоКонтейнерам(ВидЛаборатории);
		
		ДанныеРаспределенияБиоматериалов = ЛабораторияСервер.РаспределениеБиоматериаловПоКонтейнерам(ВидЛаборатории, ДанныеЗабора);
		Если ДанныеРаспределенияБиоматериалов = Неопределено Тогда
			Продолжить;
		КонецЕсли;              
		
		ДополнитьДеревоРаспределенияПоКонтейнерам(ДанныеРаспределенияБиоматериалов, ДеревоРаспределенияБиоматериаловЗначение);
		
	КонецЦикла;
	
	// Восстановление кодов проб, где возможно.
	СтарыеКонтейнеры = Новый ТаблицаЗначений;
	СтарыеКонтейнеры.Колонки.Добавить("Лаборатория");
	СтарыеКонтейнеры.Колонки.Добавить("Контейнер");
	СтарыеКонтейнеры.Колонки.Добавить("Биоматериал");
	СтарыеКонтейнеры.Колонки.Добавить("КодПробы");
	СтарыеКонтейнеры.Колонки.Добавить("Учтен", Новый ОписаниеТипов("Булево"));
	Отбор = Новый Структура("Лаборатория, Контейнер, Биоматериал, Учтен",,,,Ложь);
	
	// Составляю список старых кодов проб по контейнерам.
	Для Каждого СтараяСтрокаЛаборатории Из СтароеРаспределение.Строки Цикл 
		Для Каждого СтараяСтрокаКонтейнер Из СтараяСтрокаЛаборатории.Строки Цикл
			СтрокаСтарыеКонтейнеры = СтарыеКонтейнеры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтарыеКонтейнеры, СтараяСтрокаКонтейнер);
			СтрокаСтарыеКонтейнеры.Лаборатория = СтараяСтрокаЛаборатории.Лаборатория;
		КонецЦикла;
	КонецЦикла;
	
	// Если лаборатория использует пулы номеров и полы кончились, в эту таблицу сохраняются контейнеры для запроса пула.
	ТаблицаКодыПроб = ПустаяТаблицаКодыПробДляЗапросаПула();
	
	МассивСтрокКодыПробПустые = Новый Массив;
	
	Для Каждого СтрокаЛаборатории Из ДеревоРаспределенияБиоматериаловЗначение.Строки Цикл
		Лаборатория = СтрокаЛаборатории.Лаборатория;
		// Проверить применение пулов номеров заявок для лаборатории.
		ИспользуютсяПулыНомеров = ЛабораторияСерверПовтИсп.ИспользуютсяПулыНомеровЗаявокЛабораторий(Лаборатория);
		// Проверить использование существующих в контейнерах кодов проб при формировании кодов проб новых контейнеров.
		ИспользуютсяСуществующиеКодыПроб = ЛабораторияКлиентСерверПовтИсп.ИспользуютсяСуществующиеКодыПробПриПолученииНомеровЗаявок(Лаборатория);
		Для Каждого СтрокаКонтейнер Из СтрокаЛаборатории.Строки Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаКонтейнер);
			Отбор.Вставить("Лаборатория", Лаборатория);
			СтарыеКоды = СтарыеКонтейнеры.НайтиСтроки(Отбор);
			
			// Проставляю коды проб из старых.
			Если СтарыеКоды.Количество() <> 0 Тогда
				СтрокаКонтейнер.КодПробы = СтарыеКоды[0].КодПробы;
				СтарыеКоды[0].Учтен = Истина;
			КонецЕсли;
			
			// Если для лаборатории применяются пулы номеров заявок, и код пробы пустой, тогда нужно получить новый.
			Если ИспользуютсяПулыНомеров Тогда
				ПустойКодПробы = ПустаяСтрока(СтрокаКонтейнер.КодПробы);
				// Если лаборатория использует существующие в контейнерах коды проб для получения новых,
				// тогда добавляем в таблицу все коды проб лаборатории.
				Если ПустойКодПробы Или ИспользуютсяСуществующиеКодыПроб Тогда
					Если ПустойКодПробы Тогда
						МассивСтрокКодыПробПустые.Добавить(Новый Структура("Лаборатория, СтрокаКонтейнер", Лаборатория, СтрокаКонтейнер));
					КонецЕсли;
					
					СтрокаКодПробы = ТаблицаКодыПроб.Добавить();
					СтрокаКодПробы.Лаборатория		= Лаборатория;
					СтрокаКодПробы.Контейнер		= СтрокаКонтейнер.Контейнер;
					СтрокаКодПробы.Биоматериал		= СтрокаКонтейнер.Биоматериал;
					СтрокаКодПробы.НомерКонтейнера	= СтрокаКонтейнер.НомерКонтейнера;
					СтрокаКодПробы.КодПробы			= СокрЛП(СтрокаКонтейнер.КодПробы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗапроситьПулыДляКонтейнеровБезКодаПробы(ТаблицаКодыПроб, МассивСтрокКодыПробПустые);
	
	ЗначениеВРеквизитФормы(ДеревоРаспределенияБиоматериаловЗначение, "ДеревоРаспределенияБиоматериалов");
	
	ПоказатьИнформациюПоОбработкеКонтейнеров(ДеревоРаспределенияБиоматериаловЗначение);
	
	УстановитьВидимостьМенюПечатиЭтикеток(ДеревоРаспределенияБиоматериаловЗначение.Строки);
	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьПерезаполняемыеКонтейнеры()
	
	СтрокиНаУдаление = Новый Массив;
	
	ЛабораторииНеИспользующиеРаспределениеПоКонтейнерам = ЛабораторияСерверПовтИсп.ЛабораторииНеИспользующиеКонтейнеры();
	Для Каждого СтрокаЛаборатория Из ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы() Цикл
		
		ВидЛаборатории = ЛабораторияСерверПовтИсп.ВидЛаборатории(СтрокаЛаборатория.Лаборатория);
		Если ЗначениеЗаполнено(ВидЛаборатории) Тогда
			ИмяВидаЛаборатории = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидЛаборатории);
			
			// Одни и те же лаборатории - не распределяющие по котейнерам и отправляющие интерактивно.
			Если ЛабораторииНеИспользующиеРаспределениеПоКонтейнерам.Найти(ИмяВидаЛаборатории) = Неопределено Тогда
				СтрокиНаУдаление.Добавить(СтрокаЛаборатория); // Классическая лаборатория с перезаполнением контейнеров.
			КонецЕсли;
		Иначе
			СтрокиНаУдаление.Добавить(СтрокаЛаборатория); // Внутренняя лаборатория - тоже классическая лаборатория с перезаполнением контейнеров.
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
		ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы().Удалить(СтрокаНаУдаление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустаяТаблицаКодыПробДляЗапросаПула()
	
	ТаблицаКодыПроб = Новый ТаблицаЗначений;
	ТаблицаКодыПроб.Колонки.Добавить("Лаборатория");
	ТаблицаКодыПроб.Колонки.Добавить("Контейнер");
	ТаблицаКодыПроб.Колонки.Добавить("Биоматериал");
	ТаблицаКодыПроб.Колонки.Добавить("НомерКонтейнера");
	ТаблицаКодыПроб.Колонки.Добавить("КодПробы");
	ТаблицаКодыПроб.Колонки.Добавить("Учтен", Новый ОписаниеТипов("Булево"));
	ТаблицаКодыПроб.Колонки.Добавить("ДиапазонОтсутствует", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаКодыПроб;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапроситьПулыДляКонтейнеровБезКодаПробы(ТаблицаКодыПроб, МассивСтрокКодыПробПустые)
	
	// Если есть строки контейнеров с пустыми кодами проб, тогда получаем для них новые коды проб.
	Если МассивСтрокКодыПробПустые.Количество() > 0 Тогда
		ЛабораторияСервер.ПолучитьНовыеНомераЗаявок(ТаблицаКодыПроб);
		Для Каждого ЭлементКодПробыПустой Из МассивСтрокКодыПробПустые Цикл
			ОтборКодПробы = Новый Структура();
			ОтборКодПробы.Вставить("Лаборатория",		ЭлементКодПробыПустой.Лаборатория);
			ОтборКодПробы.Вставить("Контейнер",			ЭлементКодПробыПустой.СтрокаКонтейнер.Контейнер);
			ОтборКодПробы.Вставить("Биоматериал",		ЭлементКодПробыПустой.СтрокаКонтейнер.Биоматериал);
			ОтборКодПробы.Вставить("НомерКонтейнера",	ЭлементКодПробыПустой.СтрокаКонтейнер.НомерКонтейнера);
			ОтборКодПробы.Вставить("Учтен",				Истина);
			НайденыСтрокиКодыПроб = ТаблицаКодыПроб.НайтиСтроки(ОтборКодПробы);
			Если НайденыСтрокиКодыПроб.Количество() > 0 Тогда
				ЭлементКодПробыПустой.СтрокаКонтейнер.КодПробы = НайденыСтрокиКодыПроб[0].КодПробы;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗабораДляРаспределенияПоКонтейнерам(ВидЛаборатории)
	
	Результат = Новый Структура("Исследования, ПравилаЗабора", Объект.Исследования.Выгрузить(Новый Массив), Объект.ПравилаВнешнихЛабораторий.Выгрузить(Новый Массив));
	
	ОтборПравилЗабора = Новый Структура("КлючСтрокиИсследования");
	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
		
		Если ВидЛаборатории = ЛабораторияСерверПовтИсп.ВидЛаборатории(СтрокаИсследования.Лаборатория) Тогда
			
			ЗаполнитьЗначенияСвойств(Результат.Исследования.Добавить(), СтрокаИсследования);
			
			ОтборПравилЗабора.КлючСтрокиИсследования = СтрокаИсследования.КлючСтроки;
			СтрокиПравилЗабора = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(ОтборПравилЗабора);
			Для Каждого СтрокаПравилЗабора Из СтрокиПравилЗабора Цикл
				
				Если СтрокаПравилЗабора.Пометка Тогда
					ЗаполнитьЗначенияСвойств(Результат.ПравилаЗабора.Добавить(), СтрокаПравилЗабора);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РаспределитьПоКонтейнерам(Команда)
	
	Если ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы().Количество() > 0 Тогда
		ИсследованияСКодамиПробПоЛабораториям = Новый Соответствие;
		ЕстьКонтейнерыСКодомПробы = Ложь;
		ИспользуетсяИнтеграцияСВнешнимиЛабораториями = ЛабораторияСервер.НастройкиУчетаЛабораторий().ИспользуетсяИнтеграцияСВнешнимиЛабораториями;
		
		Для Каждого СтрокаЛаборатории Из ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы() Цикл
			// Для каждой внешней лаборатории проверяем использование существующих в контейнерах кодов проб
			// при формировании кодов проб новых контейнеров.
			ИспользуютсяСуществующиеКодыПроб = Ложь;
			ИсследованияСКодамиПроб = Новый Массив;
			Если ИспользуетсяИнтеграцияСВнешнимиЛабораториями И ЗначениеЗаполнено(СтрокаЛаборатории.Лаборатория) Тогда
				Лаборатория = СтрокаЛаборатории.Лаборатория;
				ИспользуютсяСуществующиеКодыПроб = ЛабораторияКлиентСерверПовтИсп.ИспользуютсяСуществующиеКодыПробПриПолученииНомеровЗаявок(Лаборатория);
			КонецЕсли;
			
			Для Каждого СтрокаКонтейнер Из СтрокаЛаборатории.ПолучитьЭлементы() Цикл
				ЗаполненКодПробы = ЗначениеЗаполнено(СтрокаКонтейнер.КодПробы);
				ЕстьКонтейнерыСКодомПробы = ЕстьКонтейнерыСКодомПробы Или ЗаполненКодПробы;
				Если ИспользуютсяСуществующиеКодыПроб И ЗаполненКодПробы Тогда
					КодПробы = СтрокаКонтейнер.КодПробы;
					
					Для Каждого СтрокаИсследования Из СтрокаКонтейнер.ПолучитьЭлементы() Цикл
						ИсследованияСКодамиПроб.Добавить(Новый Структура("КлючСтрокиИсследования, КодПробы",
																		  СтрокаИсследования.КлючСтрокиИсследования, КодПробы));
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если ИсследованияСКодамиПроб.Количество() > 0 Тогда
				ИсследованияСКодамиПробПоЛабораториям.Вставить(Лаборатория, ИсследованияСКодамиПроб);
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьКонтейнерыСКодомПробы Тогда
			Ответ = Вопрос(НСтр("ru =	'Хотите перераспределить анализы по контейнерам?
										|Заполненные штрих-коды контейнеров могут быть очищены!'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
			// Проверяем наличие заказов во внешнюю лабораторию с существующими исследованиями и кодами проб
			// во избежание дублирования заказов и исследований при отправке во внешнюю лабораторию.
			Если ИсследованияСКодамиПробПоЛабораториям.Количество() > 0 Тогда
				РезультатПроверки = ЛабораторияСервер.ПроверитьНаличиеИсследованийИзДокументаЗабораВЗаказахВоВнешнююЛабораторию(Объект.Исследования, ИсследованияСКодамиПробПоЛабораториям);
				Если РезультатПроверки.Свойство("ЕстьИсследованияВЗаказах") И РезультатПроверки.ЕстьИсследованияВЗаказах Тогда
					// Запрещаем перераспределение исследований по контейнерам,
					// если данные исследования уже отправлены во внешнюю лабораторию.
					Если РезультатПроверки.Свойство("ЕстьОтправленныеИсследования") И РезультатПроверки.ЕстьОтправленныеИсследования Тогда
						Возврат;
					Иначе
						Ответ = Вопрос(НСтр("ru='Продолжить перераспределение?'"), РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Нет Тогда
							Возврат;
						Иначе
							// Если созданы неотправленные заказы с существующими исследованиями,
							// тогда их необходимо удалить из заказов при перераспределении по контейнерам.
							Если РезультатПроверки.Свойство("Заказы") Тогда
                            	ИсследованияУдалены = ЛабораторияСервер.УдалитьИсследованияИзЗаказовВоВнешнююЛабораторию(РезультатПроверки.Заказы);
								Если Не ИсследованияУдалены Тогда
									Возврат;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РаспределитьПоКонтейнерамНаСервере();
	мИзмененыИсследования = Ложь;
	ЭтаФорма.Модифицированность = Истина;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтейнеры;
	
	// Автораскрытие подчиненных уровней.
	Для Каждого СтрокаДерева Из ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРаспределенияБиоматериалов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДеревоКонтейнеровВДанныеДокумента(ТекущийОбъект,Дерево)
	
	ТекущийОбъект.Контейнеры.Очистить();
	Для Каждого СтрокаДанныхУровень1 Из Дерево.Строки Цикл
		Для Каждого СтрокаДанныхУровень2 Из СтрокаДанныхУровень1.Строки Цикл
			Для Каждого СтрокаДанныхУровень3 Из СтрокаДанныхУровень2.Строки Цикл
				СтрокаТЧ = ТекущийОбъект.Контейнеры.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДанныхУровень3,,"НомерСтроки");
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДанныхУровень2,,"ИдАнализа,ИДПравила,КлючСтрокиИсследования,НомерСтроки,ПредставлениеАнализа");
				СтрокаТЧ.Лаборатория = СтрокаДанныхУровень1.Лаборатория;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКонтейнеровДаннымиДокумента()
	
	ДеревоРезультатов = ОбщегоНазначенияСервер.ТаблицуЗначенийВДеревоЗначений(Объект.Контейнеры.Выгрузить(), "Лаборатория, НомерКонтейнера");

	ДеревоРаспределенияБиоматериаловЗначение = РеквизитФормыВЗначение("ДеревоРаспределенияБиоматериалов"); 
	ДеревоРаспределенияБиоматериаловЗначение.Строки.Очистить();
	
	ДополнитьДеревоРаспределенияПоКонтейнерам(ДеревоРезультатов, ДеревоРаспределенияБиоматериаловЗначение, Истина);

	ЗначениеВРеквизитФормы(ДеревоРаспределенияБиоматериаловЗначение, "ДеревоРаспределенияБиоматериалов");
	
	ПоказатьИнформациюПоОбработкеКонтейнеров(ДеревоРаспределенияБиоматериаловЗначение);
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьДеревоРаспределенияПоКонтейнерам(ДеревоИсточник, ДеревоРаспределенияБиоматериаловЗначение,ДанныеКонтейнераИзСтроки3Уровня = Ложь)
	
	ОчиститьОформленияПоЦветуКонтейнера();
	
	Для Каждого СтрокаДанныхУровень1 Из ДеревоИсточник.Строки Цикл
		СтрокаДереваУровень1 = ДеревоРаспределенияБиоматериаловЗначение.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДереваУровень1, СтрокаДанныхУровень1,,"ПредставлениеАнализа");
		СтрокаДереваУровень1.ЭтоЛаборатория = Истина;
		
		Для Каждого СтрокаДанныхУровень2 Из СтрокаДанныхУровень1.Строки Цикл
			СтрокаДереваУровень2 = СтрокаДереваУровень1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДереваУровень2, СтрокаДанныхУровень2,,"ПредставлениеАнализа");
			СтрокаДереваУровень2.ЭтоКонтейнер = Истина;
			КодАнализа = "";
			БиоматериалРасш = "";
			Для Каждого СтрокаДанныхУровень3 Из СтрокаДанныхУровень2.Строки Цикл
				СтрокаДереваУровень3 = СтрокаДереваУровень2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваУровень3, СтрокаДанныхУровень3,,"Лаборатория, НомерКонтейнера");
				
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(КодАнализа, СтрокаДанныхУровень3.ИдАнализа);
				// Дополнение строки уровня контейнера
				Если ДанныеКонтейнераИзСтроки3Уровня Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДереваУровень2,СтрокаДереваУровень3, "КодПробы, Биоматериал, БиоматериалПредставление, Контейнер, КонтейнерПредставление, ЦветКонтейнера, УсловияХранения, УсловияТранспортировки");
				КонецЕсли;
			КонецЦикла;
			СтрокаДереваУровень2.ИдАнализа = КодАнализа;
			
			УстановитьОформлениеПоЦветуКонтейнера(СтрокаДереваУровень2.ЦветКонтейнера);
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьМенюПечатиЭтикеток(Контейнеры = Неопределено)
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийАнализов.Забор Тогда
		Возврат;
	КонецЕсли;
	
	// Контейнеры - любая коллекция, элементы которой имеют поле Лаборатория.
	
	Если Контейнеры = Неопределено Тогда
		Контейнеры = Объект.Контейнеры;
	КонецЕсли;
	
	Лаборатории = Новый Массив;
	Для Каждого СтрокаКонтейнера Из Контейнеры Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(Лаборатории, СтрокаКонтейнера.Лаборатория);
	КонецЦикла;
	
	Элементы.ДеревоРаспределенияБиоматериаловГруппаПечатьЭтикеток.Видимость = ЛабораторияСервер.ИспользуетсяПечатьЭтикеток(Лаборатории);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформациюПоОбработкеКонтейнеров(Знач ДеревоРаспределенияБиоматериаловЗначение)
	
	ТабличныйДокументИнформация.Очистить();	
	
	ТаблицаКонтейнеры = Новый ТаблицаЗначений;
	ТаблицаКонтейнеры.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
	ТаблицаКонтейнеры.Колонки.Добавить("ВидЛаборатории", Новый ОписаниеТипов("ПеречислениеСсылка.ВнешниеЛаборатории"));
	ТаблицаКонтейнеры.Колонки.Добавить("БиоматериалПредставление", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ТаблицаКонтейнеры.Колонки.Добавить("КонтейнерПредставление", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ТаблицаКонтейнеры.Колонки.Добавить("КодПробы", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаКонтейнеры.Колонки.Добавить("ИДПравила", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаКонтейнеры.Колонки.Добавить("ИдАнализа", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	
	Для Каждого СтрокаЛаборатории Из ДеревоРаспределенияБиоматериаловЗначение.Строки Цикл
		Лаборатория = СтрокаЛаборатории.Лаборатория;
		ВидЛаборатории = ЛабораторияСерверПовтИсп.ВидЛаборатории(Лаборатория);
		Для Каждого СтрокаКонтейнер Из СтрокаЛаборатории.Строки Цикл
			Для Каждого СтрокаПравило Из СтрокаКонтейнер.Строки Цикл
				СтрокаТаблицаКонтейнеры = ТаблицаКонтейнеры.Добавить();
				СтрокаТаблицаКонтейнеры.Лаборатория = Лаборатория;
				СтрокаТаблицаКонтейнеры.ВидЛаборатории = ВидЛаборатории;
				СтрокаТаблицаКонтейнеры.БиоматериалПредставление = СтрокаКонтейнер.БиоматериалПредставление;
				СтрокаТаблицаКонтейнеры.КонтейнерПредставление = СтрокаКонтейнер.КонтейнерПредставление;
				СтрокаТаблицаКонтейнеры.КодПробы = СтрокаКонтейнер.КодПробы;
				СтрокаТаблицаКонтейнеры.ИДПравила = СтрЗаменить(СтрокаПравило.ИДПравила, Символы.НПП, "");
				СтрокаТаблицаКонтейнеры.ИдАнализа = СтрокаПравило.ИдАнализа;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
	МассивОписанияОбработкиКонтейнеров = ЛабораторияСервер.ПолучитьОписанияОбработкиКонтейнеров(ТаблицаКонтейнеры);
	Элементы.СтраницаИнформация.Видимость = МассивОписанияОбработкиКонтейнеров.Количество() > 0;
	
	Если МассивОписанияОбработкиКонтейнеров.Количество() > 0 Тогда 
		МакетОписаниеОбработкиКонтейнеров = Документы.ДействияНадАнализами.ПолучитьТабДокСОписаниямиОбработкиКонтейнеров(МассивОписанияОбработкиКонтейнеров);
		ТабличныйДокументИнформация.Вывести(МакетОписаниеОбработкиКонтейнеров);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ИсследованияКлиентПриИзменении(Элемент)
	
	Если ИспользуетсяИнтеграцияСВнешнимиЛабораториями Тогда
		
		СтрокаТекущегоИсследования = Элементы.Исследования.ТекущиеДанные;
		
		Если СтрокаТекущегоИсследования <> Неопределено 
			И Не УКлиентовКорректноУказанаДатаРождения(СтрокаТекущегоИсследования.Клиент)
		Тогда
			Предупреждение("У клиента " + Строка(СтрокаТекущегоИсследования.Клиент) + " указана неправильная дата рождения!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсследованияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ИспользуетсяРасширеннаяЛаборатория Тогда
		мИзмененыИсследования = Не ОтменаРедактирования;
		
		Если НоваяСтрока И ОтменаРедактирования Тогда
			ОбработкаИзмененияВлияющегоНаСоставЛабораторий();
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Клиент)
		И Не ВСпискеКлиент
	Тогда
		Элемент.ТекущиеДанные.Клиент = Клиент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОформленияПоЦветуКонтейнера()
	
	мОбрИнд = УсловноеОформление.Элементы.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы[мОбрИнд-сч];
		Если ЭлементОформления.Отбор.Элементы.Количество() = 1
			И ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРаспределенияБиоматериалов.ЦветКонтейнера")
		Тогда
			УсловноеОформление.Элементы.Удалить(мОбрИнд-сч);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПоЦветуКонтейнера(ЦветКонтейнераСтрока)

	Попытка
		ЦветКонтейнера = ?(ЦветКонтейнераСтрока = "", Новый Цвет(0,0,0),ЗначениеИзСтрокиВнутр(ЦветКонтейнераСтрока));
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ЦветКонтейнера <> Новый Цвет(0,0,0) Тогда
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКонтейнера);
		
		ЭлементУсловия = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ДеревоРаспределенияБиоматериалов.ЦветКонтейнера");                     	
		ЭлементУсловия.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.ПравоеЗначение	= ЦветКонтейнераСтрока;
		ЭлементУсловия.Использование	= Истина;
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоРаспределенияБиоматериаловКонтейнерПредставление");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчиститьИдентификаторыАнализовПолучитьЗначения(ИдИсследований, ДокументСсылка, ДокументДата)
	
	// Есть ли заполненные ИД?
	ЗаполненныеИД = Новый Массив;
	Для Каждого ИД Из ИдИсследований Цикл
		Если ЗначениеЗаполнено(ИД) Тогда
			ЗаполненныеИД.Добавить(ИД);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненныеИД.Количество() <> 0 Тогда
		
		// Очищаем те, где после этого документа не было событий в регистре исследований.
		//  Игнорируем поле Клиент.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИД", ЗаполненныеИД);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсследованияСрез.Период КАК Период,
			|	ИсследованияСрез.Регистратор КАК Регистратор,
			|	ИсследованияСрез.ИД КАК ИД
			|ИЗ
			|	РегистрСведений.ЛабораторныеИсследования.СрезПоследних(, ИД В (&ИД)) КАК ИсследованияСрез";
		Выб = Запрос.Выполнить().Выбрать();
		Отбор = Новый Структура("ИД");
		
		Для Сч = 0 По ИдИсследований.Количество() - 1 Цикл
			
			
			Отбор.ИД = ИдИсследований[Сч];
			Выб.Сбросить();
			Если Выб.НайтиСледующий(Отбор) Тогда
				Если Выб.Регистратор = ДокументСсылка
					Или Выб.Период > ДокументДата
				Тогда
					Продолжить; // Не надо очищать ИД.
				КонецЕсли;
			КонецЕсли;
			
			ИдИсследований.Установить(Сч, Неопределено); // Если дошло сюда, то очищаем ИД анализа.
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдИсследований;
	
КонецФункции

#Область СШК

&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	
	Номенклатура				= ДанныеНоменклатуры.Номенклатура;
	Количество					= ДанныеНоменклатуры.Количество;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсследования Тогда
		ОбработкаВнесенияНоменклатуры(Номенклатура, Количество);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СШКНоменклатура()

&НаКлиенте
Функция СШККлиент(фКлиент, СШК) Экспорт
	
	Клиент = фКлиент;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсследования Тогда
		// Страница Исследования.
		ТекДанные = Элементы.Исследования.ТекущиеДанные;
		
		Если ТекДанные <> Неопределено Тогда
			Если ЛабораторияСерверПовтИсп.ЛабораторияРазрешаетВводКодаПробы(ТекДанные.Лаборатория) Тогда
				ТекДанные.КодПробы = Штрихкод;		
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтейнеры Тогда	
		// Страница Контейнеры.
		ТекДанные = ДеревоРаспределенияБиоматериалов.НайтиПоИдентификатору(Элементы.ДеревоРаспределенияБиоматериалов.ТекущаяСтрока);
		
		Если ТекДанные <> Неопределено Тогда
			
			Лаборатория = Неопределено;
			
			Если ТекДанные.ЭтоЛаборатория Тогда
				// Это строка лаборатории.
				Если ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы().Количество() = 1 
					И ТекДанные.ПолучитьЭлементы().Количество() = 1
				Тогда
					Лаборатория = ТекДанные.Лаборатория;
					ТекДанные = ТекДанные.ПолучитьЭлементы()[0]; // Данные строки-контейнера.
				Иначе
					// Текущая строка не позволяет определить контейнер, получающий штрихкод. Нельзя присвоить.
					Возврат Истина;
				КонецЕсли;
			Иначе
				Если Не ТекДанные.ЭтоКонтейнер Тогда
					// Это строка анализа в контейнере.
					ТекДанные = ТекДанные.ПолучитьРодителя();
				КонецЕсли;
				Лаборатория = ТекДанные.ПолучитьРодителя().Лаборатория;
			КонецЕсли;
			
			Если ЛабораторияСерверПовтИсп.ЛабораторияРазрешаетВводКодаПробы(Лаборатория) Тогда
				ТекДанные.КодПробы = Штрихкод;
				ПоказатьОповещениеПользователя(НСтр("ru='Штрихкод присвоен контейнеру'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // СШКНеизвестныйКод()

#КонецОбласти

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("Подключаемый_КнопкаФилиалПриНажатииЗавершение", ЭтотОбъект);
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма, , ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатииЗавершение(Результат, ДополнительныеЗначения) Экспорт
	
	ИсходныйФилиал = Результат.ИсходныйФилиал;
	
	// При изменении филиала, возможно, требуется предложить перераспределить по лабораториям и контейнерам
	Если ИсходныйФилиал <> Объект.Филиал Тогда
		Если Объект.Исследования.Количество() <> Объект.Исследования.НайтиСтроки(Новый Структура("Лаборатория", ПредопределенноеЗначение("Справочник.Лаборатории.ПустаяСсылка"))).Количество() Тогда
			// Есть строки с заполненной лабораторией!
			Ответ = Вопрос(НСтр("ru='Выполнить перераспределение анализов по лабораториям и контейнерам?'"), РежимДиалогаВопрос.ДаНет, 30);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				// Очистим лаборатории в строках исследований
				Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
					СтрокаИсследования.Лаборатория = ПредопределенноеЗначение("Справочник.Лаборатории.ПустаяСсылка");
				КонецЦикла;
				// Распределение
				РаспределитьПоЛабораториям(Неопределено);
				РаспределитьПоКонтейнерам(Неопределено);
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтейнеры;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаВнесенияНоменклатуры(Номенклатура, Количество)
	
	Если ДопСерверныеФункции.ПолучитьРеквизит(Номенклатура, "ВидНоменклатуры") <> ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
		Возврат;
	КонецЕсли;
	
	Cч = 1;
	Пока Cч <= Количество Цикл
		Стр = Объект.Исследования.Добавить();
		Стр.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Исследования);
		Стр.Номенклатура = Номенклатура;
		Cч = Cч + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область ПроцедурыРасширеннойЛаборатории // Общие

&НаКлиенте
Процедура ОбработкаИзмененияВлияющегоНаСоставЛабораторий()
	
	ОбработкаИзмененияВлияющегоНаПараметрыАнализов();
	
	ОбновитьВидКнопкиОтправкиЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияВлияющегоНаПараметрыАнализов()
	ЗаполнитьПараметрыАнализов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыАнализов()
	
	ПараметрыАнализа = Новый Соответствие;
	Для Каждого СтрокаПараметр Из Объект.ПараметрыЗабора Цикл
		ПараметрыАнализа.Вставить(СтрокаПараметр.Параметр, Новый Структура("Значение, Заполнен", СтрокаПараметр.Значение, СтрокаПараметр.Заполнен));
	КонецЦикла;
	
	Объект.ПараметрыЗабора.Очистить();
	
	// Определяю использование правил забора для всех лабораторий документа
	ЛабораторииИсследований = Новый Массив;
	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
		Если ЛабораторииИсследований.Найти(СтрокаИсследования.Лаборатория) = Неопределено Тогда
			ЛабораторииИсследований.Добавить(СтрокаИсследования.Лаборатория);
		КонецЕсли;
	КонецЦикла;
	ИспользованиеПравилЗабора = ПолучитьИспользованиеПравилЗабораЛабораторий(ЛабораторииИсследований);
	
	ИсследованияЛабораторий = Новый Соответствие;
	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
		
		Если ЗначениеЗаполнено(СтрокаИсследования.Лаборатория) Тогда
		
			Если ИсследованияЛабораторий.Получить(СтрокаИсследования.Лаборатория) = Неопределено Тогда
				ИсследованияЛабораторий.Вставить(СтрокаИсследования.Лаборатория, Новый Массив);
			КонецЕсли;
			
			Если ИспользованиеПравилЗабора.Получить(СтрокаИсследования.Лаборатория) Тогда
				СтрокиПравилЗабора = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Новый Структура("КлючСтрокиИсследования", СтрокаИсследования.КлючСтроки));
				
				Для Каждого СтрокаПравилаЗабора Из СтрокиПравилЗабора Цикл
					Если СтрокаПравилаЗабора.Пометка Тогда
						ИсследованияЛабораторий.Получить(СтрокаИсследования.Лаборатория).Добавить(СтрокаПравилаЗабора.ИдПравила);
					КонецЕсли;
				КонецЦикла;
				ИсследованияЛабораторий.Получить(СтрокаИсследования.Лаборатория).Добавить(СтрокаИсследования.Номенклатура);
			Иначе
				// Добавляем номенклатуру в число исследований лаборатории
				ИсследованияЛабораторий.Получить(СтрокаИсследования.Лаборатория).Добавить(СтрокаИсследования.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ПараметрыПримененияЗначенияПоУмолчанию = ЛабораторияСервер.ПараметрыЗабораПолучитьПараметрыПримененияЗначенияПоУмолчанию(Клиент);

	ПараметрыЗабора = ПолучитьПараметрыЗабора(ИсследованияЛабораторий, Клиент);
	ЕстьЗаполненныеИзПрошлыхЗаборов = Ложь;
	
	Для Каждого ДанныеПараметра Из ПараметрыЗабора Цикл
		
		СтрокаПараметр = Объект.ПараметрыЗабора.Добавить();
		СтрокаПараметр.Параметр = ДанныеПараметра.Параметр;
		СтрокаПараметр.Обязательный = ДанныеПараметра.Обязательный; 
		
		ПараметрЗабораЗначениеПоУмолчаниюПрименимо = ЛабораторияКлиентСерверПовтИсп.ПараметрЗабораЗначениеПоУмолчаниюПрименимо(ДанныеПараметра.ЗначениеПоУмолчанию,
														ДанныеПараметра.ЗначенияПоУмолчаниюУсловияПрименения,
														ПараметрыПримененияЗначенияПоУмолчанию);
		
														
		СтароеЗначение = ПараметрыАнализа.Получить(СтрокаПараметр.Параметр);
		Если СтароеЗначение <> Неопределено Тогда
		// Значение уже было внесено, оставляем его
		СтрокаПараметр.Значение = СтароеЗначение.Значение;
		СтрокаПараметр.Заполнен = Истина;
		ИначеЕсли ПараметрЗабораЗначениеПоУмолчаниюПрименимо
			И ТипЗнч(ДанныеПараметра.ЗначениеПоУмолчанию) = Тип("СправочникСсылка.ВычисляемыеЗначенияПараметров")
		Тогда
			// Расчет значения алгоритмом
			ЗначениеЗаполненияПараметра = ВычислитьЗначениеПараметраПоУмолчанию(ДанныеПараметра.ЗначениеПоУмолчанию, Объект, Клиент);
			Если ЗначениеЗаполнено(ЗначениеЗаполненияПараметра) Тогда
				СтрокаПараметр.Значение = ЗначениеЗаполненияПараметра;
				СтрокаПараметр.Заполнен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаПараметр.Заполнен Тогда
			СрокАктуальностиПрошлогоЗначения = 0; // Далее получить из серверной функции.
			ЗначениеЗаполненияПараметра = ПолучитьЗначениеПараметраИзПредыдущихДокументов(ДанныеПараметра, Клиент, Объект.Дата, СрокАктуальностиПрошлогоЗначения);
			Если ЗначениеЗаполнено(ЗначениеЗаполненияПараметра) Тогда 
				// Присвоение значения из прошлого забора
				СтрокаПараметр.Значение = ЗначениеЗаполненияПараметра;	
				СтрокаПараметр.Заполнен = Истина;
				Если СрокАктуальностиПрошлогоЗначения < 10000 Тогда // Когда 10000, значение не меняется в течении жизни, например, "Раса".
					ЕстьЗаполненныеИзПрошлыхЗаборов = Истина;
				КонецЕсли;
			ИначеЕсли ПараметрЗабораЗначениеПоУмолчаниюПрименимо 
				И ТипЗнч(ДанныеПараметра.ЗначениеПоУмолчанию) <> Тип("СправочникСсылка.ВычисляемыеЗначенияПараметров") 
			Тогда
				// Присвоение фиксированного значения по умолчанию этого параметра забора
				СтрокаПараметр.Значение = ДанныеПараметра.ЗначениеПоУмолчанию;	
				СтрокаПараметр.Заполнен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПровереныАвтоматическиЗаполненныеПараметры.Видимость = Элементы.ПровереныАвтоматическиЗаполненныеПараметры.Видимость Или ЕстьЗаполненныеИзПрошлыхЗаборов;
	ИндикацияПараметрыЗабораТребуютВнимания();
		
КонецПроцедуры

&НаКлиенте
Процедура ПровереныАвтоматическиЗаполненныеПараметры(Команда)
	Элементы.ПровереныАвтоматическиЗаполненныеПараметры.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИндикацияПараметрыЗабораТребуютВнимания() Экспорт
	
	НужнаИндикация = Элементы.ПровереныАвтоматическиЗаполненныеПараметры.Видимость;
	Если Не НужнаИндикация Тогда
		// Анализ
		Для Каждого СтрокаПараметра Из Объект.ПараметрыЗабора Цикл
			Если СтрокаПараметра.Обязательный И Не ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
				НужнаИндикация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СтраницаПараметрыЗабора.Картинка = ?(НужнаИндикация, БиблиотекаКартинок.Внимание, Новый Картинка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьЗначениеПараметраПоУмолчанию(ВычисляемоеЗначение, Знач Объект, Клиент)
	
	Результат = Неопределено;
	
	ДокументОбъект = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Объект);
	ДокументОбъект.Вставить("Клиент", Клиент);
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить(ВычисляемоеЗначение.АлгоритмВычисления);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПараметраИзПредыдущихДокументов(ДанныеПараметра, Клиент, ДатаДокумента, СрокАктуальностиПрошлогоЗначения = Неопределено)
	
	ПараметрМетаданные = ДанныеПараметра.Параметр.Метаданные();
	
	Если ПараметрМетаданные.Реквизиты.Найти("СрокАктуальностиПрошлогоЗначения") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СрокАктуальностиПрошлогоЗначения = ДанныеПараметра.Параметр.СрокАктуальностиПрошлогоЗначения;
	
	Если ЗначениеЗаполнено(СрокАктуальностиПрошлогоЗначения)
		И ЗначениеЗаполнено(Клиент)
		И ЗначениеЗаполнено(ДатаДокумента)
	Тогда
		ДатаНачалаПоиска = КонецДня(ДатаДокумента) - СрокАктуальностиПрошлогоЗначения * (7 * 86400);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ДействияНадАнализамиПараметрыЗабора.Значение КАК Значение
		               |ИЗ
		               |	Документ.ДействияНадАнализами.ПараметрыЗабора КАК ДействияНадАнализамиПараметрыЗабора
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
		               |		ПО ДействияНадАнализамиПараметрыЗабора.Ссылка = ДействияНадАнализамиИсследования.Ссылка
		               |ГДЕ
		               |	ДействияНадАнализамиИсследования.Клиент = &Клиент
		               |	И ДействияНадАнализамиПараметрыЗабора.Ссылка.Дата > &ДатаНачалаПоиска
					   |	И ДействияНадАнализамиПараметрыЗабора.Ссылка.ВидОперации = &ВидОперации
		               |	И ДействияНадАнализамиПараметрыЗабора.Параметр = &Параметр
		               |	И ДействияНадАнализамиПараметрыЗабора.Заполнен = ИСТИНА
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДействияНадАнализамиПараметрыЗабора.Ссылка.Дата УБЫВ";
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("ДатаНачалаПоиска", ДатаНачалаПоиска);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийАнализов.Забор);
		Запрос.УстановитьПараметр("Параметр", ДанныеПараметра.Параметр);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИспользованиеПравилЗабораЛабораторий(ЛабораторииИсследований)
	
	ИспользованиеПравилЗабора = Новый Соответствие;
	Для Каждого Лаборатория Из ЛабораторииИсследований Цикл
		
		ИспользованиеПравилЗабора.Вставить(Лаборатория, ЛабораторияКлиентСерверПовтИсп.ИспользуютсяПравилаЗабора(Лаборатория));
		
	КонецЦикла;
	
	Возврат ИспользованиеПравилЗабора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЗабора(ИсследованияЛабораторий, Клиент)
	
	Результат = Новый Массив; // Массив структур с данными о параметрах.
	
	Для Каждого кзИсследованияЛабораторий Из ИсследованияЛабораторий Цикл
		
		ПараметрыЛаборатории = ЛабораторияСервер.ПолучитьПараметрыЗабора(кзИсследованияЛабораторий.Ключ, кзИсследованияЛабораторий.Значение, Клиент);
		
		Для Каждого ДанныеПараметра Из ПараметрыЛаборатории Цикл
			
			ДобавитьПараметр = Истина;
			
			Для Каждого ДанныеПараметраРез Из Результат Цикл
				
				Если ДанныеПараметраРез.Параметр = ДанныеПараметра.Параметр Тогда
					
					ДобавитьПараметр = Ложь;
					ДанныеПараметраРез.Обязательный = ДанныеПараметраРез.Обязательный Или ДанныеПараметра.Обязательный;
					
				КонецЕсли;
			КонецЦикла;
			
			Если ДобавитьПараметр Тогда
				
				ДанныеПараметраРез = Новый Структура;
				ДанныеПараметраРез.Вставить("Параметр", ДанныеПараметра.Параметр);
				ДанныеПараметраРез.Вставить("Обязательный", ДанныеПараметра.Обязательный);
				ДанныеПараметраРез.Вставить("ЗначениеПоУмолчанию", ДанныеПараметра.ЗначениеПоУмолчанию);
				
				ЗначенияПоУмолчаниюУсловияПрименения = Новый Структура;
				
			ЗначенияПоУмолчаниюУсловияПрименения.Вставить("Пол", 
						?(ДанныеПараметра.Свойство("ЗначенияПоУмолчаниюУсловиеПримененияПол"),
						ДанныеПараметра.ЗначенияПоУмолчаниюУсловиеПримененияПол,
						ДанныеПараметра.Параметр.ЗначенияПоУмолчаниюУсловиеПримененияПол));
				
				ДанныеПараметраРез.Вставить("ЗначенияПоУмолчаниюУсловияПрименения", ЗначенияПоУмолчаниюУсловияПрименения);
				
				Результат.Добавить(ДанныеПараметраРез);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыАнализаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ПараметрыАнализаЗначение.АвтоОтметкаНезаполненного = ТекущиеДанные.Обязательный;
	КонецЕсли;
	
КонецПроцедуры

// Некоторые лаборатории предполагают отправку заказа в процессе оформления забора.
&НаКлиенте
Процедура ОбновитьВидКнопкиОтправкиЗаказа()
  
  Кнопка = Элементы.Найти("ОтправитьЗаказВЛабораторию");
  Если Кнопка = Неопределено Тогда
    Возврат;
  ИначеЕсли Не ИспользуетсяРасширеннаяЛаборатория Тогда
    Кнопка.Видимость = Ложь;
    Возврат;
  КонецЕсли;
  
  ПредставленияКнопок = ПредставлениеКнопокОтправкиЗаказа();
  
  НоваяВидимость = ПредставленияКнопок.Количество() <> 0;
  Если Кнопка.Видимость <> НоваяВидимость Тогда
    Элементы.Исследования.ЗакончитьРедактированиеСтроки(Ложь);
    Кнопка.Видимость = НоваяВидимость;
  КонецЕсли;
  
  Если Кнопка.Видимость Тогда
    Если ПредставленияКнопок.Количество() = 1 Тогда
      Кнопка.Заголовок = ПредставленияКнопок[0].Представление;
    Иначе
      Кнопка.Заголовок = ""; // Дефолтное представление команды.
    КонецЕсли;
  КонецЕсли;
  
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеКнопокОтправкиЗаказа()
	
	// Получение списка лабораторий (не видов), для которых актуальна отправка заказов
	// Формирование заголовков (отправлен / отправить)
	ОтправляющиеЛаборатории = Новый СписокЗначений;
	
	ЛабораторииИсследований = ЛабораторияСервер.ЛабораторииИсследований(Объект.Исследования);
	Для Каждого Лаборатория Из ЛабораторииИсследований Цикл
		
		ЛабораторияОтправляетЗаказыИнтерактивно = ЛабораторияСерверПовтИсп.ЛабораторияОтправляетЗаказыИнтерактивно(Лаборатория); 
		Если ЛабораторияОтправляетЗаказыИнтерактивно
			И ОтправляющиеЛаборатории.НайтиПоЗначению(Лаборатория) = Неопределено
		Тогда
			ОтправляющиеЛаборатории.Добавить(Лаборатория);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОтправляющаяЛаборатория Из ОтправляющиеЛаборатории Цикл
		
		МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ОтправляющаяЛаборатория.Значение, Ложь);
		Попытка
			ОтправляющаяЛаборатория.Представление = МодульОбработчик.ОтправитьЗаказИнтерактивно_ПредставлениеКоманды(Объект, ОтправляющаяЛаборатория.Значение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ОтправляющиеЛаборатории
	
КонецФункции

&НаКлиенте
Функция ЕстьЛабораторииИспользующиеКонтейнеры(Знач Исследования)
	
	ЕстьЛабораторииСКонтейнерами = Ложь;
	
	ЛабораторииНеИспользующиеКонтейнеры = ЛабораторияСерверПовтИсп.ЛабораторииНеИспользующиеКонтейнеры(Истина);
	
	ВидыЛабораторий = ЛабораторияСервер.ЛабораторииИсследований(Объект.Исследования, Истина);
	Для Каждого ВидЛаборатории Из ВидыЛабораторий Цикл
		
		Если ЛабораторииНеИспользующиеКонтейнеры.Найти(ВидЛаборатории) = Неопределено Тогда
			ЕстьЛабораторииСКонтейнерами = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьЛабораторииСКонтейнерами;
	
КонецФункции

&НаКлиенте
Функция ОтсутствуетНоменклатураАнализовБезПравилЗабораДляНесколькихЗаявокВОднуЛабораторию()
	
	Результат = Истина;
	
	МассивСообщений = ЛабораторияСервер.ПроверитьНоменклатуруАнализовБезПравилЗабораДляНесколькихЗаявокВОднуЛабораторию(
		Объект.Исследования, ДеревоРаспределенияБиоматериалов);
	
	Если МассивСообщений.Количество() > 0 Тогда
		
		Для Каждого ТекстСообщения Из МассивСообщений Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЦикла;
		
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИсключитьНедоступныеАнализыЛабораторииНаСервере(НоменклатураАнализовЛаборатории, Лаборатория, Дата)
	
	НедоступностьАнализов = ЛабораторияСервер.ПолучитьНедоступностьАнализов(НоменклатураАнализовЛаборатории, Дата);
	НедоступностьАнализовЛаборатории = НедоступностьАнализов.НайтиСтроки(Новый Структура("Лаборатория", Лаборатория));
	
	Для Каждого СтрНедоступностьАнализов Из НедоступностьАнализовЛаборатории Цикл
		ИндексУдаление = НоменклатураАнализовЛаборатории.Найти(СтрНедоступностьАнализов.Номенклатура);
		Если ИндексУдаление <> Неопределено Тогда
			НоменклатураАнализовЛаборатории.Удалить(ИндексУдаление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьЭтикеток

&НаКлиенте
Процедура РаспечататьЭтикетки(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Команда.Имя = "РаспечататьЭтикетки" Тогда 
		СтрокиКонтейнеров = Объект.Контейнеры;
	КонецЕсли;
	
	ЛабораторияКлиент.НапечататьЭтикеткиПоДокументу(Объект.Ссылка, СтрокиКонтейнеров, Клиент);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьШтрихкоды(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда 
		Возврат;
	КонецЕсли;
	
	//ЛабораторияСервер.СгенерироватьШтрихкоды(Объект.Ссылка, Объект.Исследования);
	
	// Автораскрытие подчиненных уровней
	Для Каждого СтрокаДерева Из ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРаспределенияБиоматериалов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПараметрыАнализаЗначениеПриИзменении(Элемент)
	
	ТипыЗнаполняемыеПустымЗначением = Новый Массив;
	ТипыЗнаполняемыеПустымЗначением.Добавить(Тип("Число")); // Указанный 0 - заполненное значение. Не указанный 0 - не заполненное.
	ТипыЗнаполняемыеПустымЗначением.Добавить(Тип("Булево"));
	//ТипыЗнаполняемыеПустымЗначением.Добавить(Тип("Дата"));
	
	ТекущиеДанные = Элементы.ПараметрыАнализа.ТекущиеДанные;
	Если ТипыЗнаполняемыеПустымЗначением.Найти(ТипЗнч(ТекущиеДанные.Значение)) <> Неопределено Тогда
		ТекущиеДанные.Заполнен = Истина;
	Иначе
		ТекущиеДанные.Заполнен = ЗначениеЗаполнено(ТекущиеДанные.Значение);
	КонецЕсли;
	
	ЛабораторияКлиент.ОчиститьЗависимыеПараметрыЗабора(ЭтаФорма);
	ИндикацияПараметрыЗабораТребуютВнимания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАнализаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЛабораторияКлиент.УстановитьДопустимыеЗначенияПараметраЗабора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАнализаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторСтроки = Элементы.ПараметрыАнализа.ТекущаяСтрока;
	ТекущаяСтрока = Объект.ПараметрыЗабора.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяСтрока.Заполнен = Ложь;
	ТекущаяСтрока.Значение = Неопределено;
	Модифицированность = Истина;
	
	ЛабораторияКлиент.ОчиститьЗависимыеПараметрыЗабора(ЭтаФорма);
	ИндикацияПараметрыЗабораТребуютВнимания();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияБиоматериаловПриАктивизацииСтроки(Элемент)

	РазрешеноРедактироватьКодПробы = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ЭтоКонтейнер
	Тогда
		Лаборатория = ДеревоРаспределенияБиоматериалов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя().Лаборатория;
		РазрешеноРедактироватьКодПробы = ЛабораторияСерверПовтИсп.ЛабораторияРазрешаетВводКодаПробы(Лаборатория);
	КонецЕсли;
	
	Элементы.ДеревоРаспределенияБиоматериаловКодПробы.ТолькоПросмотр = Не РазрешеноРедактироватьКодПробы;
	
КонецПроцедуры

#Область АктуальностьСправочниковЛабораторий

&НаКлиенте
Процедура ПроверитьАктуальностьСправочниковЛабораторий()
	
	ЛабораторияКлиент.ПроверитьАктуальностьСправочниковЛабораторий(ЭтаФорма);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктуальностьСправочниковЛабораторийПроверена()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.АктуальностьСправочниковЛабораторийПроверена;
		
КонецФункции	

#КонецОбласти
