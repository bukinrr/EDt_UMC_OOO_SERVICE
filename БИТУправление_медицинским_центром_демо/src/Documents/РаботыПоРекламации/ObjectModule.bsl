#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Работы") Тогда
			Для Каждого СтрокаРабот Из ДанныеЗаполнения.Работы Цикл
				НоваяСтрока = ЭтотОбъект.Работы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРабот);
				НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
			КонецЦикла;
			Документы.РаботыПоРекламации.ЗаполнитьМатериалыПоНормамРабот(ЭтотОбъект);
		ИначеЕсли ДанныеЗаполнения.Свойство("Рекламация") Тогда
			ЭтотОбъект.Рекламация = ДанныеЗаполнения.Рекламация;
			Документы.РаботыПоРекламации.ПерезаполнитьРаботыПоРекламации(ЭтотОбъект, УчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоНовый() Тогда
		ДокументыРабот = CRMСервер.ПолучитьДокументыРаботПоРекламации(ЭтотОбъект.Рекламация);
		Если ДокументыРабот.Количество() > 0 Тогда 
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Работы по данной рекламации уже отражены документом " + Строка(ДокументыРабот[0]));
		КонецЕсли;
	КонецЕсли;
	ЭтотОбъект.ВычитатьИзВыработкиВиновника = ЭтотОбъект.ВычитатьИзВыработкиВиновника И
		ЗначениеЗаполнено(ЭтотОбъект.Рекламация.Исполнитель) И
		ЭтотОбъект.Рекламация.Исполнитель <> ЭтотОбъект.Исполнитель;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоРаботам, ТаблицаПоМатериалам;
	
	Движения.ВыработкаСотрудников.Записывать = Истина;
	
	Заголовок = НСтр("ru='Проведение документа'");
	Заголовок = Заголовок + " """ + СокрЛП(Ссылка) + """: ";
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураОбязательныхПолей = Новый Структура("Клиент");	
	Если ЕстьСтрокиСПустымСкладом("Материалы") Тогда
		СтруктураОбязательныхПолей.Вставить("СкладМатериалов");
	КонецЕсли;	
	СтруктураОбязательныхПолей.Вставить("Исполнитель");
	
	// Вызываем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	НачислятьВыработку = ЗначениеЗаполнено(Исполнитель) И (ЭтотОбъект.Рекламация.Исполнитель <> Исполнитель);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоМатериалам, ТаблицаПоРаботам);
	
	Если Не Отказ Тогда
		
		ВыполнитьДвиженияПоВыработкеСотрудников(НачислятьВыработку);
		РегистрыНакопления.РасходМатериалов.ВыполнитьДвиженияПоРегистру(ЭтотОбъект,ТаблицаПоМатериалам, ТаблицаПоРаботам, СтруктураШапкиДокумента, Отказ);
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
		ПартионныйУчет.пуДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(), Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоМатериалам, ТаблицаПоРаботам)
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Работы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"		  , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры" , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ВидНоменклатуры"     , "Номенклатура.ВидНоменклатуры");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("СуммаБезСкидок"      , "СуммаБезСкидок");
	СтруктураПолей.Вставить("КатегорияВыработки"  , "Номенклатура.КатегорияВыработки");
	СтруктураПолей.Вставить("КлючСтроки"        	, "КлючСтроки");  
	СтруктураПолей.Вставить("Сотрудник"				, "Ссылка.Исполнитель");
		
	РезультатЗапросаПоРаботам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Работы", СтруктураПолей);
	ТаблицаПоРаботам = РезультатЗапросаПоРаботам.Выгрузить();
	
	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Материалы".
	ПроведениеДокументов.ПодготовитьТаблицуТоварыДокумента(ЭтотОбъект, ТаблицаПоМатериалам, "Материалы", Новый Структура("КлючСтрокиРаботы","КлючСтрокиРаботы"));
	Для Каждого СтрокаМатериалы Из ТаблицаПоМатериалам Цикл
		Если Не ЗначениеЗаполнено(СтрокаМатериалы.Склад) Тогда
			СтрокаМатериалы.Склад = СкладМатериалов;
		КонецЕсли;
	КонецЦикла;
	ТаблицаПоМатериалам.Колонки.Добавить("Сотрудник");
	Для Каждого СтрокаМатериал Из ТаблицаПоМатериалам Цикл
		СтрокаМатериал.Сотрудник = ЭтотОбъект.Исполнитель;
	КонецЦикла;
		
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Функция ЕстьСтрокиСПустымСкладом(ИмяТЧ)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект[ИмяТЧ] Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыполнитьДвиженияПоВыработкеСотрудников(НачислятьВыработку)
	
	Если НачислятьВыработку Тогда 
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.Работы Цикл
			
			Движение = Движения.ВыработкаСотрудников.Добавить();
			Движение.Период = ЭтотОбъект.Дата;
			Движение.Сотрудник = ЭтотОбъект.Исполнитель;
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.ТипВыработки = Перечисления.ТипыВыработки.Услуги;
			
		КонецЦикла;	
		
		// Материалы, которые включаются в стоимость.
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.Материалы Цикл
			Если СтрокаТаблицы.Сумма <> 0 Тогда
				Движение = Движения.ВыработкаСотрудников.Добавить();
				Движение.Период = Дата;
				Движение.Сотрудник = Исполнитель;
				ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
				Движение.Продолжительность	= 0;
				Движение.ТипВыработки       = Перечисления.ТипыВыработки.Материалы;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ЭтотОбъект.ВычитатьИзВыработкиВиновника Тогда
		
		ДвиженияПоВыработке = Движения.ВыработкаСотрудников.Выгрузить();
		Для Каждого СтрокаДвижение Из ДвиженияПоВыработке Цикл
			Движение = Движения.ВыработкаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижение);
			Движение.Сотрудник = ЭтотОбъект.Рекламация.Исполнитель;
			Движение.Сумма			= 0 - Движение.Сумма;
			Движение.СуммаБезСкидок = 0 - Движение.СуммаБезСкидок;
			Движение.Количество		= 0 - Движение.Количество;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) 
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
