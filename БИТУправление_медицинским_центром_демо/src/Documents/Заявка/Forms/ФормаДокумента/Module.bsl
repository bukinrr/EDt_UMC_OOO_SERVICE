&НаКлиенте
Перем мТекущаяДатаДокумента Экспорт; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
&НаКлиенте
Перем мПериодичностьПланирования; // Размер периода планирования документа
&НаКлиенте
Перем мЗапроситьПричинуОтменыПриЗаписи;

// При автоподборе и окончании ввода текста указывает, следует ли искать введенное значение в кодах справочника.
&НаКлиенте
Перем мИспользоватьАвтоПодборКлиентовПоКоду;

&НаКлиенте
Перем НоваяЗаявка;

&НаКлиенте
Процедура НесколькоСотрудниковПриИзменении(Элемент)
	
	Если Объект.ХочуРаньше И Объект.НесколькоСотрудников Тогда
		ПоказатьПредупреждение(,ПолучитьТекстПредупрежденияОдновременноХочуРаньшеНесколькоСотрудников(), 30);
		Объект.НесколькоСотрудников = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ТекущийРежимЗаписиНаПрием = ПредопределенноеЗначение("Перечисление.РежимыЗаписиНаПрием.КВрачу") Тогда
		ПроверитьСотрудниковВТЧ(ДополнительныеПараметры);
	ИначеЕсли ТекущийРежимЗаписиНаПрием = ПредопределенноеЗначение("Перечисление.РежимыЗаписиНаПрием.ВКабинет") Тогда
		ДополнительныеПараметры.Вставить("СдвинутьЗначенияКолонокОборудованияНесколькоВрачейПриИзменении", Истина);
		ДополнительныеПараметры.Вставить("УстановитьКабинетыВТЧ", Истина);
		НесколькоСотрудниковПриИзмененииЗавершение(ДополнительныеПараметры);
	ИначеЕсли ТекущийРежимЗаписиНаПрием = ПредопределенноеЗначение("Перечисление.РежимыЗаписиНаПрием.ВКабинетКВрачу") Тогда
		ДополнительныеПараметры.Вставить("СдвинутьЗначенияКолонокОборудованияНесколькоВрачейПриИзменении", Истина);
		ДополнительныеПараметры.Вставить("УстановитьКабинетыВТЧ", Истина);
		ПроверитьСотрудниковВТЧ(ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НесколькоСотрудниковПриИзмененииЗавершение(ДополнительныеПараметры)
	
	Элементы.РаботыСотрудник.Видимость = Объект.НесколькоСотрудников;
	Элементы.РежимДлительностиЗаявки.Доступность = Не Объект.НесколькоСотрудников;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(ДополнительныеПараметры, "СдвинутьЗначенияКолонокОборудованияНесколькоВрачейПриИзменении", Ложь) Тогда
	    СдвинутьЗначенияКолонокОборудованияНесколькоВрачейПриИзменении();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(ДополнительныеПараметры, "УстановитьКабинетыВТЧ", Ложь) Тогда
	    УстановитьКабинетыВТЧ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЗначенияКолонокОборудованияНесколькоВрачейПриИзменении()
	
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		
		Если Объект.НесколькоСотрудников Тогда
			
			СтрокаРаботы.Оборудование3 = СтрокаРаботы.Оборудование2;
			СтрокаРаботы.Оборудование2 = СтрокаРаботы.Оборудование1;
			СтрокаРаботы.Оборудование1 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			
		Иначе
			
			СтрокаРаботы.Оборудование1 = СтрокаРаботы.Оборудование2;
			СтрокаРаботы.Оборудование2 = СтрокаРаботы.Оборудование3;
			СтрокаРаботы.Оборудование3 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКабинетыВТЧ()

	Если ТекущийРежимЗаписиНаПрием = ПредопределенноеЗначение("Перечисление.РежимыЗаписиНаПрием.ВКабинет")
		Или ТекущийРежимЗаписиНаПрием = ПредопределенноеЗначение("Перечисление.РежимыЗаписиНаПрием.ВКабинетКВрачу")
	Тогда
		Если Не Объект.НесколькоСотрудников Тогда
			Если ПерваяКолонкаКабинеты Тогда
				ПерваяКолонкаКабинеты = Ложь;
				Элементы.РаботыОборудование1.Заголовок = "Кабинет/Оборудование";
			КонецЕсли;
		Иначе
			Элементы.РаботыОборудование1.Заголовок = "Кабинет";
			ПерваяКолонкаКабинеты = Истина;
		КонецЕсли;
	Иначе
		ПерваяКолонкаКабинеты = Ложь;
		Элементы.РаботыОборудование1.Заголовок = "Кабинет/Оборудование";
	КонецЕсли;
	НастройкаВидимостиКолонокРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСотрудниковВТЧ(ДополнительныеПараметры)

	ВыполнитьНесколькоСотрудниковПриИзмененииЗавершение = Истина;
	
	Если Не Объект.НесколькоСотрудников Тогда
		
		флЕстьСотрудника = Ложь;
		Для Каждого СтрРабота Из Объект.Работы Цикл
			Если ЗначениеЗаполнено(СтрРабота.Сотрудник) Тогда
				флЕстьСотрудника = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флЕстьСотрудника Тогда
			ВыполнитьНесколькоСотрудниковПриИзмененииЗавершение = Ложь;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьСотрудниковВТЧЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				НСтр("ru='Сотрудники в табличной части будут очищены. Продолжить?'"),
				РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;

	КонецЕсли;
	
	Если ВыполнитьНесколькоСотрудниковПриИзмененииЗавершение Тогда
		НесколькоСотрудниковПриИзмененииЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСотрудниковВТЧЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Для Каждого СтрРабота Из Объект.Работы Цикл
			СтрРабота.Сотрудник = Неопределено;
		КонецЦикла;
	Иначе
		Объект.НесколькоСотрудников = Истина;	
	КонецЕсли;
	
	НесколькоСотрудниковПриИзмененииЗавершение(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	РаботаСФормамиКлиент.ОбработчикРегулированияКвантуемогоВремени(Объект.ВремяНачала,Направление,мПериодичностьПланирования);
	ВремяНачалаПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.РежимДлительностиЗаявки <> Перечисления.РежимДлительностиЗаявки.Фиксированная Или Объект.НесколькоСотрудников Тогда
		Объект.РежимДлительностиЗаявки = Перечисления.РежимДлительностиЗаявки.ПоНормам;
		Если Объект.НесколькоСотрудников Тогда
			Элементы.РежимДлительностиЗаявки.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();	
	ТекущийРежимЗаписиНаПрием = мУчетнаяПолитика.РежимЗаписиНаПрием;
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);
	
	ДополнительныеСвойства = Новый Структура;
	
	Если ОграничениеДоступаНаУровнеЗаписей.ЗаписьВЖурналЗаписиФилиалаЗапрещенаПользователю(Объект.Филиал) Тогда
		ДополнительныеСвойства.Вставить("ЗаписьВЖурналЗаписиФилиалаЗапрещенаПользователю", Истина);
	КонецЕсли;

	Если Объект.Ссылка.Пустая()
		И ЗначениеЗаполнено(Параметры.Оборудование)
	Тогда
		Если ЗначениеЗаполнено(Параметры.Оборудование.ОсновнаяУслуга) Тогда
			Номенклатура = Параметры.Оборудование.ОсновнаяУслуга;
			СтруктураОборудования = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(Номенклатура,Объект.Филиал);
			ОбработкаВнесенияРаботы(Номенклатура, 1,,Объект);
			СтрокаРаботы = Объект.Работы[Объект.Работы.Количество()-1];
			Если ТекущийРежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.КВрачу Тогда 
				Для инд = 1 По 3 Цикл
					Если СтруктураОборудования["Оборудование"+инд] = Параметры.Оборудование.Модель Тогда
						СтрокаРаботы["Оборудование"+инд] = Параметры.Оборудование;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ПересчетВремениОкончания(Объект, Продолжительность);
		КонецЕсли;
		
		Если ТекущийРежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинет
			Или ТекущийРежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинетКВрачу
		Тогда 
			Объект.Кабинет = Параметры.Оборудование;
		КонецЕсли;
	КонецЕсли;
	
	ПроцедурыСпециализацииПоставки.УстановитьСинонимНесколькимВрачам(Элементы.НесколькоСотрудников.Заголовок,ТекущийРежимЗаписиНаПрием);
	РаботаСФормамиСервер.НастройкаПодбораПриСоздании(ЭтаФорма, Истина, "Работы", "Услуга", "Набор");
	
	Элементы.РаботыОборудование1.Видимость = Ложь;
	Элементы.РаботыОборудование2.Видимость = Ложь;
	Элементы.РаботыОборудование3.Видимость = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.Состояние = Справочники.ВидыСостоянийЗаявок.Запланирована;
		Если Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ДатаНачала)) Тогда
			
			Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда              
				Объект.ДатаНачала = НачалоДня(Объект.Дата);
			КонецЕсли;
			
			ВремяНачалаРаботыСек = ОбщегоНазначенияКлиентСервер.ВремяВСекунды(мУчетнаяПолитика.ВремяНачалаРаботы);
			
			Объект.ДатаНачала = Объект.ДатаНачала + ВремяНачалаРаботыСек;
			ТекДата = ТекущаяДата();
			Если ТекДата > Объект.ДатаНачала Тогда
				Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(ТекДата);

				КалендарьПланирования.ОкруглитьВремяДоПериодаПланирования(Объект.ДатаНачала);

				Если ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ДатаНачала) > ОбщегоНазначенияКлиентСервер.ВремяВСекунды(мУчетнаяПолитика.ВремяОкончанияРаботы) Тогда
					Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + 86400 + ВремяНачалаРаботыСек;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ПродолжительностьЗаявки = Объект.ДатаОкончания - Объект.ДатаНачала;
		Если Объект.РежимДлительностиЗаявки <> Перечисления.РежимДлительностиЗаявки.Фиксированная Тогда
			Для Каждого СтрРаботы Из Объект.Работы Цикл
					Если Не ЗначениеЗаполнено(СтрРаботы.Продолжительность) Тогда
						ОбработкаВнесенияРаботы(СтрРаботы.Номенклатура, 1,,Объект);
					КонецЕсли;
			КонецЦикла;
		Иначе
			
			Если Объект.Работы.Количество() = 0 Тогда
				Объект.Работы.Добавить();
			КонецЕсли;
			
			Для Каждого СтрРаботы Из Объект.Работы Цикл
				СтрРаботы.Продолжительность = Дата(1,1,1);
			КонецЦикла;
				
			Объект.Работы[0].Продолжительность = Дата(1,1,1) + ПродолжительностьЗаявки;
		КонецЕсли;
		
		Объект.ДатаОкончания = Объект.ДатаНачала + ПродолжительностьЗаявки;
		Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда 
			Объект.ДатаОкончания = Объект.ДатаНачала;
		КонецЕсли;
		
		Объект.ВремяНачала		= Объект.ДатаНачала;
		Объект.ВремяОкончания	= Объект.ДатаОкончания;
		
		// Определение нужного значения флага "Несколько сотрудников".
		ЗаполненоНесколькоИсполнителей = Ложь;
		РаботыКопия = Объект.Работы.Выгрузить(,"Сотрудник");
		РаботыКопия.Свернуть("Сотрудник","");
		Объект.НесколькоСотрудников = РаботыКопия.Количество() > 1 Или мУчетнаяПолитика.ИспользоватьНесколькоСотрудниковВДокументах И мУчетнаяПолитика.ОсновноеЗначениеПереключателяНесколькихСотрудниковВЗаявке;
	Иначе		
		Если Параметры.Свойство("ЗначенияПерезаполнения") Тогда
			ПерезаполнитьЗаявку(Параметры.ЗначенияПерезаполнения);
		КонецЕсли;
		
		ЭтаФорма.ДатаЗаявкиПредыдущейВерсииДокумента = Объект.ДатаНачала;
	КонецЕсли;
	
	ОбновитьВыпадающийСписокСотрудниковСервер();

	Элементы.Кабинет.Видимость	=	(мУчетнаяПолитика.РежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинет
								 Или мУчетнаяПолитика.РежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинетКВрачу);
	Элементы.ВыравниваниеВертикальное3.Видимость = Элементы.Кабинет.Видимость;
								 
	Элементы.НесколькоСотрудников.Видимость = мУчетнаяПолитика.ИспользоватьНесколькоСотрудниковВДокументах;
	Элементы.НесколькоСотрудников.Доступность = Объект.РежимДлительностиЗаявки <> Перечисления.РежимДлительностиЗаявки.Фиксированная; 
	Элементы.РаботыСотрудник.Видимость	= Объект.НесколькоСотрудников
									И мУчетнаяПолитика.РежимЗаписиНаПрием <> Перечисления.РежимыЗаписиНаПрием.ВКабинет;

	// Установка текущего элемента исходя из заполненности полей.
	Если Объект.Клиент.Пустая() Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Клиент;
	ИначеЕсли Объект.Сотрудник.Пустая()
			И ТекущийРежимЗаписиНаПрием <> Перечисления.РежимыЗаписиНаПрием.ВКабинет
	Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Сотрудник;
	ИначеЕсли Объект.Кабинет.Пустая()
			И Элементы.Кабинет.Видимость
	Тогда
	    ЭтаФорма.ТекущийЭлемент = Элементы.Кабинет;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Работы;
	КонецЕсли;

	// Настройка видимости элементов блока "Хочу посещение раньше"
	Элементы.ХочуРаньше.Видимость = мУчетнаяПолитика.ИспользоватьХочуРаньшеВЗаявках;
	Элементы.СтраницаХочуРаньше.Видимость = мУчетнаяПолитика.ИспользоватьХочуРаньшеВЗаявках И Объект.ХочуРаньше;
	
	Элементы.КомментарийКлиента.Видимость = ЗначениеЗаполнено(Объект.КомментарийКлиента); // Видимость комментария клиента, полученного при импорте заявлки из вненей системы.
	
	УстановитьВидимостьКнопкиПодбораРасписания(Объект, Элементы.РаботыПодборВремени, ТекущийРежимЗаписиНаПрием, мУчетнаяПолитика);
	
	ОбновитьСвойства();
	ОбновитьВидимостьСтраницПанелиФормы(Элементы.Страницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мПериодичностьПланирования			  = мУчетнаяПолитика.ПериодичностьПланирования;
	мИспользоватьАвтоПодборКлиентовПоКоду = мУчетнаяПолитика.ИспользоватьАвтоПодборКлиентовПоКоду;
	мТекущаяДатаДокумента = Объект.Дата;
	
	Если ДополнительныеСвойства.Свойство("ЗаписьВЖурналЗаписиФилиалаЗапрещенаПользователю") Тогда
		Предупреждение(НСтр("ru='Запись в журнал записи в указанный филиал запрещена Вашему пользователю!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Истина // ИспользоватьПодключаемоеОборудование  Проверка на включенную ФО "Использовать ВО"
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);

	КонецЕсли;

	РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма);
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	РассчитатьПродолжительностьПосещения(Продолжительность);
	ПересчитатьДоступностьВремениОкончания();
	УстановитьКабинетыВТЧ();
	
	Если мУчетнаяПолитика.ИспользоватьХочуРаньшеВЗаявках Тогда
		ОбновитьОграничениеТиповОтборовХочуРаньше();
		УстановитьВидимостьОтбораХочуРаньше(Элементы.ОтборыХочуРаньше, Элементы.ВидОтбораХочуРаньше.СписокВыбора, Объект.ОтборХочуРаньше);
	КонецЕсли;
	
	НоваяЗаявка = Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТипСостояния = ДопСерверныеФункции.ПолучитьРеквизит(Объект.Состояние, "ТипСостояния");
	Если Объект.ДатаНачала = Объект.ДатаОкончания И
		Не Объект.ПометкаУдаления И
		ТипСостояния <> ПредопределенноеЗначение("Перечисление.ТипыСостоянийЗаявок.Выполнена") И
		Объект.Состояние <> ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаявок.Выполнена") И
		ТипСостояния <> ПредопределенноеЗначение("Перечисление.ТипыСостоянийЗаявок.Отменена")  И
		Объект.Состояние <> ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаявок.Отменена") И 
		ТипСостояния <> ПредопределенноеЗначение("Перечисление.ТипыСостоянийЗаявок.Выполняется")
	Тогда
		Ответ = Вопрос(НСтр("ru='Заявка имеет нулевую продолжительность и поэтому не будет отображена в журнале записи. Всё равно записать?'"),
						РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, НСтр("ru='Продолжительность не указана'"), КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			Отказ = Истина;					
		КонецЕсли;				
	КонецЕсли;
	ОчиститьОборудование();
	Если КалендарьПланирования.ИнтерактивнаяСменаСостоянияЗаявкиТребуетУказанияПричиныОтмены(Объект.Состояние, Объект.Ссылка) Тогда
		ОтменитьЗаявкуКлиент(Отказ, Объект.Состояние);
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если мУчетнаяПолитика.ИспользоватьХочуРаньшеВЗаявках Тогда
		ПроверитьКорректностьОтборовЗаявкиХочуРаньше(Отказ);	
	КонецЕсли;
	
	// Подготовка к автоустановке исхода звонка или обработки обращения.
	Если ЗначениеЗаполнено(Объект.Основание)
		И (		ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.Событие")
			Или	ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ЛистОжидания"))
	Тогда
		Если ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.Событие") Тогда
			ФормаСобытия = ПолучитьФорму("Документ.Событие.ФормаОбъекта", Новый Структура("Ключ", Объект.Основание));
		ИначеЕсли ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ЛистОжидания") Тогда
			ФормаСобытия = ПолучитьФорму("Документ.ЛистОжидания.ФормаОбъекта", Новый Структура("Ключ", Объект.Основание));
		КонецЕсли;
		Если Не ФормаСобытия.Открыта() Тогда
			ПараметрыЗаписи.Вставить("ДокументОснованиеДляОбновления", Объект.Основание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьВФорме");
	
	// Установить необходимость указания причины закрытия заявки, если требуется.
	КалендарьПланирования.ЗаявкаПриИнтерактивнойСменеСостояния(ТекущийОбъект);
	
	СвойстваИЗначенияСервер.ПодготовитьКЗаписиЗначенияСвойствВФорме(ТекущийОбъект, Свойства.СвойстваИЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(ТекущийОбъект,,ЭтаФорма);
	
	// Если форма открыта на основании листа ожидания с указанием дополнительных листов записи, они тоже выполняются.
	Если ТипЗнч(Параметры.ПараметрыЗаписиПоДокументу) = Тип("Структура")
		И Параметры.ПараметрыЗаписиПоДокументу.Свойство("СопутствующиеЛистыОжидания")
	Тогда
	    СопутствующиеЛистыОжидания = Параметры.ПараметрыЗаписиПоДокументу.СопутствующиеЛистыОжидания;
		Для Каждого ЛистОжидания Из СопутствующиеЛистыОжидания Цикл
			Попытка
				CRMСервер.ОтметитьВыполнениеЛистаОжидания(ЛистОжидания, Объект.Ссылка);
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// Автоустановка исхода звонка или обработки обращения.
	ДокументОснованиеДляОбновления = Неопределено;
	ПараметрыЗаписи.Свойство("ДокументОснованиеДляОбновления", ДокументОснованиеДляОбновления);
	Если ТипЗнч(ДокументОснованиеДляОбновления) = Тип("ДокументСсылка.Событие") Тогда
		Попытка
			CRMСервер.УстановитьИсходЗаписанСобытию(Объект.Основание, Объект.Ссылка);
		Исключение
		КонецПопытки;
		ДокументОснованиеДляОбновления = Неопределено;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляОбновления) = Тип("ДокументСсылка.ЛистОжидания") Тогда
		Попытка
			CRMСервер.ОтметитьВыполнениеЛистаОжидания(Объект.Основание, Объект.Ссылка);
		Исключение
		КонецПопытки;
		ДокументОснованиеДляОбновления = Неопределено;
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ОповеститьОбИзмененииЗаявки") Тогда
		ДополнительныеСвойства.Вставить("ОповеститьОбИзмененииЗаявки", ТекущийОбъект.ДополнительныеСвойства.ОповеститьОбИзмененииЗаявки);
	КонецЕсли;
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзменилосьТолькоСостояние") Тогда
		ДополнительныеСвойства.Вставить("ИзменилосьТолькоСостояние", ТекущийОбъект.ДополнительныеСвойства.ИзменилосьТолькоСостояние);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещенияЗаявкаИзменение = Новый Структура("Дата, Ссылка", Новый Массив, Объект.Ссылка);
	ПараметрыОповещенияЗаявкаИзменение.Дата.Добавить(Объект.ДатаНачала);
	
	// Оповещение той даты, с которой переместили заявку
	Если ЗначениеЗаполнено(ДатаЗаявкиПредыдущейВерсииДокумента) 
		И ДатаЗаявкиПредыдущейВерсииДокумента <> Объект.ДатаНачала
	Тогда
		ПараметрыОповещенияЗаявкаИзменение.Дата.Добавить(ДатаЗаявкиПредыдущейВерсииДокумента);
	КонецЕсли;
	ДатаЗаявкиПредыдущейВерсииДокумента = Объект.ДатаНачала;
	
	Если ДополнительныеСвойства.ОповеститьОбИзмененииЗаявки Тогда
		Если ДополнительныеСвойства.Свойство("ИзменилосьТолькоСостояние") Тогда
			ПараметрыОповещенияЗаявкаИзменение.Вставить("ИзменилосьТолькоСостояние", ДополнительныеСвойства.ИзменилосьТолькоСостояние);
		КонецЕсли;
		Оповестить("ЗаявкаИзменение", ПараметрыОповещенияЗаявкаИзменение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда  
		Оповестить("ЗаявкаПоДокументуЗапись", Новый Структура("ДокументЗаписи, Заявка", Объект.Основание, Объект.Ссылка), Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
	
	Если Не ЗавершениеРаботы Тогда
		Если НоваяЗаявка И ЗначениеЗаполнено(Объект.Ссылка)
			И Не ЗначениеЗаполнено(Объект.Основание)
			И CRMСервер.НайтиВероятныеЛистыОжиданияПоЗаявке(Объект.Ссылка, Истина)
		Тогда
			ОткрытьФорму("ОбщаяФорма.ЛистыОжиданияКлиента", Новый Структура("Заявка", Объект.Ссылка));	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "TracksData" Тогда
		Если ВводДоступен() Тогда
			КодКарты = Неопределено;
			СМК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСМК(ЭтаФорма,  Параметр[0], СМК, Неопределено, Неопределено);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаявкаИзменена" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, РучноеРедактирование = Ложь)
	
	Результат = "";
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Клиенты") Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Объект.Клиент = ВыбранноеЗначение;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Результат = ОбработкаВводаНоменклатуры(ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.Количество);
	Иначе
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные.НомерСтроки-1;
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				ПозицияВводаСтроки = СтрокаТабличнойЧасти;
				Если РаботаСФормамиСервер.ЭтоНабор(Элементы.Работы.ТекущиеДанные.Номенклатура) Тогда
					Объект.Работы.Удалить(ПозицияВводаСтроки);
				КонецЕсли;
			Иначе
				ПозицияВводаСтроки = Объект.Работы.Количество()-1;
			КонецЕсли;
		Иначе
			ПозицияВводаСтроки = Неопределено;
		КонецЕсли;
		Результат = ОбработкаВводаНоменклатуры(ВыбранноеЗначение,,ПозицияВводаСтроки, РучноеРедактирование);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда 
		Предупреждение(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработкаВводаНоменклатуры(Номенклатура, Количество = 1, ПозицияВводаСтроки = Неопределено, РучноеРедактирование = Ложь)
	
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат "";
	КонецЕсли;
	
	Если Номенклатура.Пустая() Или Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		ОбработкаВнесенияРаботы(Номенклатура, Количество, ПозицияВводаСтроки, Объект, РучноеРедактирование);
	ИначеЕсли Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
		СоставНабора = ОбщегоНазначенияСервер.ПолучитьСоставНабора(Номенклатура);
		Для Каждого СтрокаСостава Из СоставНабора Цикл
			ОбработкаВнесенияРаботы(СтрокаСостава.Комплектующая, СтрокаСостава.Количество*Количество, ПозицияВводаСтроки, Объект);
			Если ПозицияВводаСтроки <> Неопределено Тогда
				ПозицияВводаСтроки = ПозицияВводаСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Строка("Номенклатура "+Строка(Номенклатура)+" не является работой. Допускается только подбор работ.");
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ОбработкаВнесенияРаботы(Номенклатура, Количество, ПозицияВводаСтроки, ДокументОбъект, РучноеРедактирование = Ложь)
	
	Если Количество = 0 Тогда
		Количество = 1;
	КонецЕсли;
	
	Если ПозицияВводаСтроки <> Неопределено
		И ПозицияВводаСтроки < (ДокументОбъект.Работы.Количество() - 1)
	Тогда
		СтрокаРаботы = ДокументОбъект.Работы[ПозицияВводаСтроки];
	Иначе
		СтруктураПоиска = Новый Структура("Номенклатура", Номенклатура);
		
		СуществующиеСтрокиРабот = ДокументОбъект.Работы.НайтиСтроки(СтруктураПоиска);
		Если СуществующиеСтрокиРабот.Количество() > 0 Тогда
			СтрокаРаботы = СуществующиеСтрокиРабот[СуществующиеСтрокиРабот.Количество() - 1];
		Иначе
			СтрокаРаботы = ДокументОбъект.Работы.Добавить();
		КонецЕсли;
	КонецЕсли;
	
	ИнкрементацияКоличества = Не РучноеРедактирование И СтрокаРаботы.Номенклатура = Номенклатура;
	СтрокаРаботы.Номенклатура = Номенклатура;
	
	Если Объект.РежимДлительностиЗаявки <> Перечисления.РежимДлительностиЗаявки.Фиксированная Тогда
		// Установка продолжительности по норме
		Если ЗначениеЗаполнено(СтрокаРаботы.Номенклатура) Тогда
			
			СтрокаРаботы.ПродолжительностьИзмененаВручную = Ложь;
			
			ИспользоватьОсновнуюПродолжительностьРаботы = Истина;
			ТекущийСотрудник = ПолучитьТекущегоСотрудникаРабот(СтрокаРаботы, Объект.Сотрудник, Объект.НесколькоСотрудников);
			
			нзОУС = РегистрыСведений.ОсновныеУслугиСотрудников.СоздатьНаборЗаписей();
			нзОУС.Отбор.Сотрудник.Установить(ТекущийСотрудник);
			нзОУС.Отбор.Номенклатура.Установить(СтрокаРаботы.Номенклатура);
			нзОУС.Прочитать();
			Если нзОУС.Количество() <> 0 Тогда
				СтрокаУслуги = нзОУС[0];
				Если (СтрокаУслуги.Часы + СтрокаУслуги.Минуты) <> 0 Тогда
					ПродолжительностьУслугиЧас = СтрокаУслуги.Часы;	
					ПродолжительностьУслугиМин = СтрокаУслуги.Минуты;
					ИспользоватьОсновнуюПродолжительностьРаботы = Ложь;
			    КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьОсновнуюПродолжительностьРаботы Тогда
				ПродолжительностьУслугиЧас = СтрокаРаботы.Номенклатура.ПродолжительностьЧас;	
				ПродолжительностьУслугиМин = СтрокаРаботы.Номенклатура.ПродолжительностьМин;
			КонецЕсли;
			
			СтрокаРаботы.Продолжительность	= Дата(1,1,1)
											+ (ПродолжительностьУслугиЧас*60*60
											+  ПродолжительностьУслугиМин*60)
											* Количество
											+ ?(ИнкрементацияКоличества, ОбщегоНазначения.ВремяВСекунды(СтрокаРаботы.Продолжительность), 0);
		КонецЕсли;
	ИначеЕсли ПозицияВводаСтроки = 0 Тогда
		СтрокаРаботы.Продолжительность = Дата(1,1,1) + Продолжительность * 60;
	КонецЕсли;
	
	ЭтаФорма.Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
	
	ПересчетВремениОкончания(Объект, Продолжительность);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетВремениОкончания(Объект, Продолжительность = Неопределено)
	
	Объект.ДатаОкончания = Объект.ДатаНачала;
	Объект.ВремяОкончания = Объект.ВремяНачала;
	
	Если Объект.РежимДлительностиЗаявки <> ПредопределенноеЗначение("Перечисление.РежимДлительностиЗаявки.Фиксированная") Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			ПродолжительностьСтроки = (СтрокаТабличнойЧасти.Продолжительность-НачалоДня(СтрокаТабличнойЧасти.Продолжительность));
			
			Если Объект.ДатаОкончания + ПродолжительностьСтроки > КонецДня(Объект.ДатаНачала)+1 Тогда
				СтрокаТабличнойЧасти.Продолжительность = Дата(1,1,1) + 86400 - ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ВремяОкончания);
				Объект.ВремяОкончания =	Дата(1,1,1);
				Объект.ДатаОкончания  = КонецДня(Объект.ДатаНачала) + 1; 
			Иначе	
				Объект.ВремяОкончания = Объект.ВремяОкончания + ПродолжительностьСтроки;
				Объект.ДатаОкончания  = Объект.ДатаОкончания  + ПродолжительностьСтроки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаТабличнойЧасти = Объект.Работы[0];		
		Если Объект.ДатаОкончания + Продолжительность * 60 > КонецДня(Объект.ДатаНачала)+1 Тогда
			СтрокаТабличнойЧасти.Продолжительность = Дата(1,1,1) + 86400 - ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ВремяОкончания);
			Объект.ВремяОкончания =	Дата(1,1,1);
			Объект.ДатаОкончания  = КонецДня(Объект.ДатаНачала) + 1; 
		Иначе	
			Объект.ВремяОкончания = Объект.ВремяОкончания + Продолжительность * 60;
			Объект.ДатаОкончания  = Объект.ДатаОкончания  + Продолжительность * 60;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВремяОкончания) Тогда
	    Продолжительность = (КонецДня(Объект.ВремяОкончания)+1 - Объект.ВремяНачала)/60;
	Иначе
		Продолжительность = (Объект.ВремяОкончания - Объект.ВремяНачала)/60;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФиксированнаяПродолжительность(Объект, Продолжительность)
	
	Если Объект.Работы.Количество() = 0 Тогда
		Объект.Работы.Добавить();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.Продолжительность = Дата(1,1,1);
	КонецЦикла;
	
	Объект.Работы[0].Продолжительность = Дата(1,1,1) + Продолжительность * 60;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииСервер(мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Объект.Дата;
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер(НачальнаяДатаДокумента)
	
	РаботаСДиалогамиСервер.ПроверитьНомерДокумента(ЭтаФорма, НачальнаяДатаДокумента);	
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора, мИспользоватьАвтоПодборКлиентовПоКоду);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора, мИспользоватьАвтоПодборКлиентовПоКоду);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентов(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаКлиентаУпр",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ВремяНачала);

	Если Объект.ДатаНачала + Продолжительность*60 > КонецДня(Объект.ДатаНачала) + 1 Тогда 
		// При такой дате начала время в заявку не влезет - отбрасываем время начала.
	    Объект.ДатаНачала	 = КонецДня(Объект.ДатаНачала) + 1 - Продолжительность*60;
		Объект.ДатаОкончания = КонецДня(Объект.ДатаНачала) + 1; 
	КонецЕсли;
	
	Объект.ВремяНачала	 = Объект.ДатаНачала;
	Объект.ДатаОкончания = Объект.ДатаНачала + 60 * Продолжительность;
	
	ОбновитьВыпадающийСписокСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзменении(Элемент);
	ПересчетВремениОкончания(Объект, Продолжительность);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВремяОкончания) Тогда
	    Объект.ВремяОкончания = НачалоМинуты(Макс(Объект.ВремяНачала, Объект.ВремяОкончания));
		Объект.ДатаОкончания  = НачалоДня(Объект.ДатаНачала) + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ВремяОкончания);
		РассчитатьПродолжительностьПосещения(Продолжительность);
	Иначе
		Объект.ДатаОкончания  = КонецДня(Объект.ДатаНачала) + 1;
		Объект.ВремяОкончания = Объект.ДатаОкончания;
		Продолжительность = (86400 - ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ВремяНачала))/60;
	КонецЕсли;
	
	СуммарнаяПродолжительность = 0;	
	КоличествоНенулевыхСтрок = 0;
	
	Если Объект.Работы.Количество() = 0 Тогда
		Если Объект.ДатаОкончания <> Объект.ДатаНачала Тогда
			Объект.Работы.Добавить();
			КорректируемаяСтрока = Объект.Работы[0];
			УстановитьВидимостьКнопкиПодбораРасписания(Объект, Элементы.РаботыПодборВремени, ТекущийРежимЗаписиНаПрием, мУчетнаяПолитика);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		КорректируемаяСтрока = Объект.Работы[0];
		Для Каждого Работа из Объект.Работы Цикл
			Если Работа.Продолжительность > Дата(1,1,1) Тогда
				КорректируемаяСтрока = Работа;
				КоличествоНенулевыхСтрок = КоличествоНенулевыхСтрок + 1;
				СуммарнаяПродолжительность = СуммарнаяПродолжительность + (Работа.Продолжительность - Дата(1,1,1));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоНенулевыхСтрок <= 1 Тогда
		КорректируемаяСтрока.Продолжительность = Дата(1,1,1) + (Объект.ДатаОкончания - Объект.ДатаНачала);
	Иначе
		Объект.ВремяОкончания = Объект.ВремяНачала + СуммарнаяПродолжительность;			
	КонецЕсли;
	
	Если Объект.Работы[0].Продолжительность = Дата(1,1,1)
		И Не ЗначениеЗаполнено(Объект.Работы[0].Номенклатура)
	Тогда
		Объект.Работы.Удалить(0);
		УстановитьВидимостьКнопкиПодбораРасписания(Объект, Элементы.РаботыПодборВремени, ТекущийРежимЗаписиНаПрием, мУчетнаяПолитика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если НачалоДня(Объект.ДатаОкончания) <> НачалоДня(Объект.ДатаНачала)
		И Направление = 1
	Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФормамиКлиент.ОбработчикРегулированияКвантуемогоВремени(Объект.ДатаОкончания,Направление,мПериодичностьПланирования);
	Объект.ВремяОкончания = Объект.ДатаОкончания;
	ВремяОкончанияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПродолжительностьПосещения(Продолжительность)
	
	Если Не ЗначениеЗаполнено(Объект.ВремяОкончания)
		И НачалоДня(Объект.ДатаОкончания) <> НачалоДня(Объект.ДатаНачала)
	Тогда
		Продолжительность = (86400 - ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ВремяНачала))/60
	Иначе
		Продолжительность = (Объект.ВремяОкончания - Объект.ВремяНачала)/60;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжительностьПриИзменении(Элемент)
	
	Продолжительность = Мин(Продолжительность, (86400 - ОбщегоНазначенияКлиентСервер.ВремяВСекунды(Объект.ВремяНачала))/60);
	
	Если Продолжительность < (КонецДня(Объект.ВремяНачала) - Объект.ВремяНачала)/60 Тогда
		Объект.ВремяОкончания = Объект.ВремяНачала + Продолжительность * 60;
		Объект.ВремяОкончания = Макс(Объект.ВремяОкончания, Объект.ВремяНачала);
	Иначе
		Объект.ВремяОкончания = Дата(1,1,1);
	КонецЕсли;
	
	ВремяОкончанияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжительностьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	КвантПланирования = ОбщегоНазначенияКлиент.ВремяВСекунды(мПериодичностьПланирования) / 60; // В минутах.
	Продолжительность = Продолжительность + КвантПланирования * Направление;
	
	ПродолжительностьПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Работы");	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборПодбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВводаНоменклатуры(ВыбранноеЗначение, 1);
	ПересчитатьДоступностьВремениОкончания();
	Модифицированность = Истина;
	
	УстановитьВидимостьКнопкиПодбораРасписания(Объект, Элементы.РаботыПодборВремени, ТекущийРежимЗаписиНаПрием, мУчетнаяПолитика);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрейскурантПодборПриИзменении(Элемент)
	РаботаСФормамиКлиент.УстановитьПараметрПрейскурантПодбора(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	Если Объект.Работы.Количество() = 0 Тогда
		НоваяСтрока = Объект.Работы.Добавить();
		НоваяСтрока.Продолжительность = Дата(1,1,1) + Продолжительность * 60;
	КонецЕсли;
	
	Если Объект.РежимДлительностиЗаявки <> ПредопределенноеЗначение("Перечисление.РежимДлительностиЗаявки.Фиксированная") Тогда
		ПересчетВремениОкончания(Объект, Продолжительность);
	Иначе
		ФиксированнаяПродолжительность(Объект, Продолжительность);
	КонецЕсли;
	
	НастройкаВидимостиКолонокРаботы();
	ПересчитатьДоступностьВремениОкончания();

	Если Объект.ХочуРаньше 
		И Объект.ОтборХочуРаньше = "К врачу, с теми же компетенциями"
	Тогда
		ЗаполнитьОтборХочуРаньшеСпециализациямиУслугДокумента();
	КонецЕсли;
	
	УстановитьВидимостьКнопкиПодбораРасписания(Объект, Элементы.РаботыПодборВремени, ТекущийРежимЗаписиНаПрием, мУчетнаяПолитика);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование И Объект.РежимДлительностиЗаявки = ПредопределенноеЗначение("Перечисление.РежимДлительностиЗаявки.Фиксированная") Тогда
		Элементы.Работы.ТекущиеДанные.Продолжительность = Дата(1,1,1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчетВремениОкончания(Объект, Продолжительность);
	
	Если ОтменаРедактирования Тогда
		НастройкаВидимостиКолонокРаботы();
	Иначе
		ПересчитатьДоступностьВремениОкончания();
	КонецЕсли;	

	Если Объект.ХочуРаньше 
		И Объект.ОтборХочуРаньше = "К врачу, с теми же компетенциями"
	Тогда
		ЗаполнитьОтборХочуРаньшеСпециализациямиУслугДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент)
	
	ОбработкаВыбора(Элемент.Родитель.ТекущиеДанные.Номенклатура, Неопределено, Истина);
	НастройкаВидимостиКолонокРаботы();
	
	УстановитьВидимостьКнопкиПодбораРасписания(Объект, Элементы.РаботыПодборВремени, ТекущийРежимЗаписиНаПрием, мУчетнаяПолитика);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПродолжительностьПриИзменении(Элемент)
	
	ПересчетВремениОкончания(Объект, Продолжительность);
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	ТекущаяСтрока.ПродолжительностьИзмененаВручную = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПродолжительностьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	РаботаСФормамиКлиент.ОбработчикРегулированияКвантуемогоВремени(ТекущаяСтрока.Продолжительность,Направление,мПериодичностьПланирования);
	ПересчетВремениОкончания(Объект, Продолжительность);
	
	ТекущаяСтрока.ПродолжительностьИзмененаВручную = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоступностьВремениОкончания()
	
	КоличествоНенулевыхСтрок = 0;
	
	Для Каждого Работа Из Объект.Работы Цикл
		Если Работа.Продолжительность > Дата(1,1,1) Тогда
			КоличествоНенулевыхСтрок = КоличествоНенулевыхСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.РежимДлительностиЗаявки <> ПредопределенноеЗначение("Перечисление.РежимДлительностиЗаявки.Фиксированная") Тогда
		Элементы.ВремяОкончания.Доступность = Объект.Работы.Количество() <= 1
											Или (Объект.Работы.Количество() > 1 И КоличествоНенулевыхСтрок <= 1);
	
		Элементы.Продолжительность.Доступность = Элементы.ВремяОкончания.Доступность;
	Иначе
		Элементы.ВремяОкончания.Доступность = Истина;	
		Элементы.Продолжительность.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаявку(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не сохраненная заявка не может быть отменена!'"));
	ИначеЕсли Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Заявка помечена на удаление!'"));
	Иначе
		ОтменитьЗаявкуКлиент();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаявкуКлиент(Отказ = Ложь, СостояниеОтмены = Неопределено)
	
	Если мУчетнаяПолитика.ЗапрашиватьПричинуЗакрытияЗаявок Тогда
		КалендарьПланированияКлиент.ОткрытьДиалогПричиныОтменыЗаявки(Объект.Ссылка, СостояниеОтмены);
	Иначе
		ОтменитьЗаявкуСервер();
		Если ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы") Тогда
			ВладелецФормы.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗаявкуСервер()
	
	ЗаявкаОбъект = РеквизитФормыВЗначение("Объект");
	КалендарьПланирования.ОтменитьЗаявкуСервер(Неопределено, ЗаявкаОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБОРУДОВАНИЕ УСЛУГ

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	Если Элементы.Работы.ТекущиеДанные <> Неопределено Тогда
		НастройкаКолонокРаботы(Элементы.Работы.ТекущиеДанные.Номенклатура);
	КонецЕсли;	
КонецПроцедуры

// Настройка доступности колонок ТЧ Работы
&НаКлиенте
Процедура НастройкаКолонокРаботы(Номенклатура)
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ОборудованиеУслуги = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(Номенклатура,Объект.Филиал);
	Иначе
		ОборудованиеУслуги = Новый Структура("Оборудование1, Оборудование2, Оборудование3");
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Оборудование"));
	ОписТипов = Новый ОписаниеТипов(Массив);
		
	Для Инд = 1 По ?(ПерваяКолонкаКабинеты,2,3) Цикл
		
		Элт = Элементы["РаботыОборудование" + (Инд + ?(ПерваяКолонкаКабинеты,1,0))];
		Элт.ОграничениеТипа = ОписТипов;
		
		ОборудованиеЗначениеЗаполнено = ЗначениеЗаполнено(ОборудованиеУслуги["Оборудование" + Инд]);
		Если НЕ ОборудованиеЗначениеЗаполнено 
			ИЛИ (ОборудованиеЗначениеЗаполнено И ТипЗнч(ОборудованиеУслуги["Оборудование" + Инд]) = Тип("СправочникСсылка.Оборудование")) Тогда
			ОборудованиеДоступность = Ложь;
		Иначе
			ОборудованиеДоступность = Истина;
		КонецЕсли;	
		
		Элт.ТолькоПросмотр = Не ОборудованиеДоступность;
		
	КонецЦикла;
	
	Если ПерваяКолонкаКабинеты Тогда
		Элементы.РаботыОборудование1.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

// Настройка доступности колонок ТЧ Работы
&НаКлиенте
Процедура НастройкаВидимостиКолонокРаботы()
	
	КолонкиРабот = Элементы.Работы.ПодчиненныеЭлементы;
	СтруктураВидимостиКолонок = Новый Структура;
	Для Инд = 1 По 3 Цикл
		СтруктураВидимостиКолонок.Вставить("РаботыОборудование"+Инд, Ложь);
	КонецЦикла;
		
	Для ИндСтр = 0 По Объект.Работы.Количество() - 1 Цикл 
		
		Если ЗначениеЗаполнено(Объект.Работы[ИндСтр].Номенклатура) Тогда 

			Если ЗначениеЗаполнено(Объект.Работы[ИндСтр].Номенклатура) Тогда
				ОборудованиеУслуги = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(Объект.Работы[ИндСтр].Номенклатура,Объект.Филиал);		
			Иначе
				ОборудованиеУслуги = Новый Структура("Оборудование1, Оборудование2, Оборудование3");
			КонецЕсли;

			Для Инд = 1 По 3 Цикл 
				Если СтруктураВидимостиКолонок["РаботыОборудование"+Инд] = Ложь					
					И ТипЗнч(ОборудованиеУслуги["Оборудование"+Инд]) = Тип("СправочникСсылка.МоделиОборудования") 
				Тогда
					СтруктураВидимостиКолонок["РаботыОборудование"+Инд] = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ПерваяКолонкаКабинеты Тогда
		СтруктураВидимостиКолонок["РаботыОборудование3"] = СтруктураВидимостиКолонок["РаботыОборудование2"];
		СтруктураВидимостиКолонок["РаботыОборудование2"] = СтруктураВидимостиКолонок["РаботыОборудование1"];
		СтруктураВидимостиКолонок["РаботыОборудование1"] = Истина;
	КонецЕсли;
	Для Каждого КлючЗначение Из СтруктураВидимостиКолонок Цикл
		КолонкиРабот[КлючЗначение.Ключ].Видимость = КлючЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЭтоМодель(Ном, НаимПоля, Филиал)
	Структура = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(Ном, Филиал);
	Возврат ЗначениеЗаполнено(Структура[НаимПоля]) И ТипЗнч(Структура[НаимПоля]) = Тип("СправочникСсылка.МоделиОборудования");
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьСписокОборудования(Ном, НаимПоля, Филиал)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(Ном, Филиал);	
	Если ЗначениеЗаполнено(Структура[НаимПоля]) И ТипЗнч(Структура[НаимПоля]) = тип("СправочникСсылка.МоделиОборудования") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Оборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Оборудование КАК Оборудование
		|ГДЕ
		|	Оборудование.ПометкаУдаления = ЛОЖЬ
		|	И Оборудование.Модель = &Модель";
		
		Запрос.УстановитьПараметр("Модель", Структура[НаимПоля]);
		
		Результат = Запрос.Выполнить().Выгрузить();
		мас = Результат.ВыгрузитьКолонку("Ссылка");
		
		СписокОборудования = Новый СписокЗначений;
		Для инд = 0 по мас.Количество() - 1 Цикл 
			СписокОборудования.Добавить(мас[инд]);
		КонецЦикла;	
		
		Возврат СписокОборудования;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РаботыОборудование1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ПерваяКолонкаКабинеты Тогда
		Если ЭтоМодель(Элементы.Работы.ТекущиеДанные.Номенклатура, "Оборудование1", Объект.Филиал) Тогда
			СтандартнаяОбработка = Ложь;
			
			списокОборудования = ПолучитьСписокОборудования(Элементы.Работы.ТекущиеДанные.Номенклатура, "Оборудование1", Объект.Филиал);
			Значение = ВыбратьИзСписка(списокОборудования,Элемент,списокОборудования.НайтиПоЗначению(Элементы.Работы.ТекущиеДанные.Оборудование1));
			
			Если Значение <> Неопределено Тогда
				Элементы.Работы.ТекущиеДанные.Оборудование1 = Значение.Значение;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОборудование2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяПоляОборудования = ?(ПерваяКолонкаКабинеты, "Оборудование1", "Оборудование2");
	
	Если ЭтоМодель(Элементы.Работы.ТекущиеДанные.Номенклатура, ИмяПоляОборудования, Объект.Филиал) Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокОборудования = ПолучитьСписокОборудования(Элементы.Работы.ТекущиеДанные.Номенклатура, ИмяПоляОборудования, Объект.Филиал);
		Значение = ВыбратьИзСписка(СписокОборудования,Элемент,СписокОборудования.НайтиПоЗначению(Элементы.Работы.ТекущиеДанные.Оборудование2));
		
		Если Значение <> Неопределено Тогда
			Элементы.Работы.ТекущиеДанные.Оборудование2 = Значение.Значение;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОборудование3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяПоляОборудования = ?(ПерваяКолонкаКабинеты, "Оборудование2", "Оборудование3");
	
	Если ЭтоМодель(Элементы.Работы.ТекущиеДанные.Номенклатура, ИмяПоляОборудования, Объект.Филиал) Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокОборудования = ПолучитьСписокОборудования(Элементы.Работы.ТекущиеДанные.Номенклатура, ИмяПоляОборудования, Объект.Филиал);
		Значение = ВыбратьИзСписка(СписокОборудования,Элемент,списокОборудования.НайтиПоЗначению(Элементы.Работы.ТекущиеДанные.Оборудование3));
		
		Если Значение <> Неопределено Тогда
			Элементы.Работы.ТекущиеДанные.Оборудование3 = Значение.Значение;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	Номенклатура				= ДанныеНоменклатуры.Номенклатура;
	Количество					= ДанныеНоменклатуры.Количество;
	ХарактеристикаНоменклатуры	= ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
	Единица						= ДанныеНоменклатуры.ЕдиницаИзмерения;
	Цена						= ДанныеНоменклатуры.Цена;
	
	Если ЗначениеЗаполнено(Единица) И
		 Единица.Коэффициент <> 0 
	Тогда
		Количество = Количество * Единица.Коэффициент;
	КонецЕсли;
	
	ОбработкаВводаНоменклатуры(Номенклатура, Количество);
	Возврат Истина;
	
КонецФункции // СШКНоменклатура()

&НаКлиенте
Функция СШККлиент(фКлиент, СШК) Экспорт
	
	Объект.Клиент = фКлиент;
	Модифицированность = Истина;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШККарта(Карта, Клиент, СШК) Экспорт
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		Объект.Клиент = Клиент;
		Модифицированность = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКСертификат(Сертификат, СШК) Экспорт
	
	ДанныеЗаполнения = ПолучитьДанныеЗаполненияПоСертификату(Сертификат);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Клиент)
		И Не ЗначениеЗаполнено(Объект.Клиент)
	Тогда
		Объект.Клиент = ДанныеЗаполнения.Клиент;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Услуга") Тогда 
		
		Результат = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура",ДанныеЗаполнения.Услуга));
		
		Если Результат.Количество() = 1 Тогда
			
			Результат[0].Продолжительность = Результат[0].Продолжительность + ДанныеЗаполнения.Продолжительность;
			
		Иначе
			НоваяСтрока = Объект.Работы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеЗаполнения.Услуга;
			НоваяСтрока.Продолжительность = НоваяСтрока.Продолжительность + ДанныеЗаполнения.Продолжительность;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаполненияПоСертификату(Сертификат)
	
	ДанныеЗаполнения = Новый Структура("Клиент",Сертификат.ВладелецКарты);
	
	ВидСертификата = Сертификат.ВидСертификата;
	Если Не ВидСертификата.КомплексныйСертификат 
		И ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги
		И ВидСертификата.Услуги.Количество() = 1
	Тогда
		Услуга = ВидСертификата.Услуги.Получить(0).Фильтр;
		
		Если Не Услуга.ЭтоГруппа Тогда
			ДанныеЗаполнения.Вставить("Услуга",Услуга);
			ДанныеЗаполнения.Вставить("Продолжительность",Услуга.ПродолжительностьЧас * 3600 + Услуга.ПродолжительностьМин * 60);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция СШКСотрудник(Сотрудник, СШК) Экспорт
	
	Объект.Сотрудник = Сотрудник;
	Модифицированность = Истина;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

&НаКлиенте
Функция СМКМагнитнаяКарта(ВладелецМагнитногоКода, СМК) Экспорт

	Результат = Истина;

	Если ТипЗнч(ВладелецМагнитногоКода) = Тип("СправочникСсылка.Клиенты") Тогда
		Объект.Клиент = ВладелецМагнитногоКода;
	ИначеЕсли ТипЗнч(ВладелецМагнитногоКода) = Тип("СправочникСсылка.КартыСкидок") Тогда
		ВладелецКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецМагнитногоКода, "ВладелецКарты");
		Если ЗначениеЗаполнено(ВладелецКарты) Тогда
			Объект.Клиент = ВладелецКарты;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	Модифицированность = Модифицированность Или Результат;
	
	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Обработка считывания в форме штрихкода медицинской карты
&НаКлиенте
Функция СШКМедКарта(Карта, Клиент, СШК) Экспорт
	
	Объект.Клиент = Клиент;
	Модифицированность = Истина;
	Возврат Истина;
	
КонецФункции

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОчиститьОборудование()
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
	    ОборудованиеУслуги = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(СтрокаРаботы.Номенклатура,Объект.Филиал);
		Для Инд = 1 По ?(ПерваяКолонкаКабинеты,2,3) Цикл 
			ОборудованиеНоменклатуры = ОборудованиеУслуги["Оборудование" + Инд];
			Если	ТипЗнч(ОборудованиеНоменклатуры) <> Тип("СправочникСсылка.МоделиОборудования") 
				Или Не ЗначениеЗаполнено(ОборудованиеНоменклатуры)
			Тогда
				СтрокаРаботы["Оборудование" + (Инд + ?(ПерваяКолонкаКабинеты,1,0))] = Неопределено;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыпадающийСписокСотрудников()
	
	МассивСотрудников = ПолучитьМассивСотрудников(Объект.ДатаНачала, Объект.Филиал);
	Если МассивСотрудников.Количество() > 0 Тогда
		Элементы.Сотрудник.СписокВыбора.ЗагрузитьЗначения(МассивСотрудников);
		Элементы.Сотрудник.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
		Элементы.Сотрудник.КнопкаВыпадающегоСписка = Истина;
	Иначе
		Элементы.Сотрудник.СписокВыбора.Очистить();
		Элементы.Сотрудник.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		Элементы.Сотрудник.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;
	Элементы.Сотрудник.КнопкаОткрытия = Не Элементы.Сотрудник.КнопкаВыпадающегоСписка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыпадающийСписокСотрудниковСервер()
	
	МассивСотрудников = ПолучитьМассивСотрудников(Объект.ДатаНачала, Объект.Филиал);
	Если МассивСотрудников.Количество() > 0 Тогда
		Элементы.Сотрудник.СписокВыбора.ЗагрузитьЗначения(МассивСотрудников);
		Элементы.Сотрудник.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
		Элементы.Сотрудник.КнопкаВыпадающегоСписка = Истина;
	Иначе
		Элементы.Сотрудник.СписокВыбора.Очистить();
		Элементы.Сотрудник.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		Элементы.Сотрудник.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;
	Элементы.Сотрудник.КнопкаОткрытия = Не Элементы.Сотрудник.КнопкаВыпадающегоСписка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСотрудников(Дата, Филиал)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикиРаботы.Сотрудник КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	               |ГДЕ
	               |	ГрафикиРаботы.Дата = &ДатаНач
	               |	И ГрафикиРаботы.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И ГрафикиРаботы.Филиал = &Филиал
	               |	И ГрафикиРаботы.Сотрудник.УчаствуетВКалендарномПланировании
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикиРаботы.Сотрудник";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Выборка;
КонецФункции

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Если Объект.Работы.Количество() <> 0 Тогда
		ПересчитатьИндивидуальнуюПродолжительностьУслуг();
	КонецЕсли;
	
	Если мУчетнаяПолитика.ИспользоватьХочуРаньшеВЗаявках Тогда
		ОтборСотрудникПриИзменении(Элементы.ВидОтбораХочуРаньше);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ПересчитатьИндивидуальнуюПродолжительностьУслуги(ТекущиеДанные,
													 ПолучитьТекущегоСотрудникаРабот(ТекущиеДанные, Объект.Сотрудник, Объект.НесколькоСотрудников),
													 ДополнительныеСвойства);
	ПересчетВремениОкончания(Объект, Продолжительность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИндивидуальнуюПродолжительностьУслуг()
	
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		ПересчитатьИндивидуальнуюПродолжительностьУслуги(СтрокаРаботы,
													 	 ПолучитьТекущегоСотрудникаРабот(СтрокаРаботы, Объект.Сотрудник, Объект.НесколькоСотрудников),
														 ЭтаФорма.ДополнительныеСвойства);
	КонецЦикла;
	ПересчетВремениОкончания(Объект, Продолжительность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИндивидуальнуюПродолжительностьУслуги(ТекущиеДанные, Сотрудник, ДополнительныеСвойства)
	
	Если ТекущиеДанные.ПродолжительностьИзмененаВручную Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьОсновнуюПродолжительностьРаботы = Истина;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ОсновныеУслугиСотрудника = УправлениеЗаявкамиКлиент.ПолучитьОсновныеУслугиСотрудника(Сотрудник);
		Для Каждого СтрокаУслуги Из ОсновныеУслугиСотрудника Цикл
			Если СтрокаУслуги.Номенклатура = ТекущиеДанные.Номенклатура Тогда
				Если (СтрокаУслуги.Часы + СтрокаУслуги.Минуты) <> 0 Тогда
					ПродолжительностьУслугиЧас = СтрокаУслуги.Часы;	
					ПродолжительностьУслугиМин = СтрокаУслуги.Минуты;
					ИспользоватьОсновнуюПродолжительностьРаботы = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ИспользоватьОсновнуюПродолжительностьРаботы Тогда
		#Если Клиент Тогда
		РеквизитыРаботы = ОбщегоНазначенияСервер.ПолучитьРеквизитыСсылки(ТекущиеДанные.Номенклатура);
		#Иначе
		РеквизитыРаботы = ТекущиеДанные.Номенклатура;
		#КонецЕсли
		ПродолжительностьУслугиЧас = РеквизитыРаботы.ПродолжительностьЧас;	
		ПродолжительностьУслугиМин = РеквизитыРаботы.ПродолжительностьМин;
	КонецЕсли;
	
	ПродолжительностьДт	= Дата(1,1,1)
						+ (ПродолжительностьУслугиЧас*60*60
						+  ПродолжительностьУслугиМин*60);

	Если ЗначениеЗаполнено(ПродолжительностьДт) Тогда
		ТекущиеДанные.Продолжительность	= ПродолжительностьДт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьТекущегоСотрудникаРабот(ТекущиеДанные, Сотрудник, НесколькоСотрудников)
	
	Если НесколькоСотрудников Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			ТекущийСотрудник = ТекущиеДанные.Сотрудник;
		Иначе
			ТекущийСотрудник = Сотрудник;
		КонецЕсли;
	Иначе
		ТекущийСотрудник = Сотрудник;
	КонецЕсли;
	
	Возврат ТекущийСотрудник;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОсновныеРаботыСотрудника(Сотрудник)
	
	СписокВыбора = Новый СписокЗначений;
	ОсновныеУслугиСотрудника = УправлениеЗаявкамиКлиент.ПолучитьОсновныеУслугиСотрудника(Сотрудник);
	Для Каждого СтрокаУслуга Из ОсновныеУслугиСотрудника Цикл
		ЭлементСЗ = СписокВыбора.Добавить(СтрокаУслуга.Номенклатура,,,БиблиотекаКартинок.Пользователь);
	КонецЦикла;
	СписокВыбора.СортироватьПоЗначению();
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура РаботыРаботаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
		ТекущийСотрудник = ПолучитьТекущегоСотрудникаРабот(ТекущиеДанные, Объект.Сотрудник, Объект.НесколькоСотрудников);
		СписокРабот = ПолучитьОсновныеРаботыСотрудника(ТекущийСотрудник);
		
		НачальноеЗначение = 0;
		
		Если  СписокРабот.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
			Для Каждого ЭлементСЗ Из СписокРабот Цикл
				Если ЭлементСЗ.Значение = ТекущиеДанные.Номенклатура Тогда
					НачальноеЗначение = ЭлементСЗ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеВыбора = СписокРабот;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСотрудникПриИзменении(Элемент)
	
	ОбновитьОграничениеТиповОтборовХочуРаньше();
	УстановитьВидимостьОтбораХочуРаньше(Элементы.ОтборыХочуРаньше, Элементы.ВидОтбораХочуРаньше.СписокВыбора, Объект.ОтборХочуРаньше);
	Объект.ОтборыХочуРаньше.Очистить();

	Если Объект.ОтборХочуРаньше = "К тому же врачу" Тогда
		
		Если Не Объект.НесколькоСотрудников Тогда
			НоваяСтрока = Объект.ОтборыХочуРаньше.Добавить();
			НоваяСтрока.Фильтр = Объект.Сотрудник;
		Иначе
			НоваяСтрока = Объект.ОтборыХочуРаньше.Добавить();
			НоваяСтрока.Фильтр = Объект.Сотрудник;
			мВрачи = ПолучитьВрачейУслуг(Объект.Работы);
			Для Каждого Врач Из мВрачи Цикл
				НоваяСтрока = Объект.ОтборыХочуРаньше.Добавить();
				НоваяСтрока.Фильтр = Врач;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Объект.ОтборХочуРаньше = "К врачу, с теми же компетенциями" Тогда
		
		ЗаполнитьОтборХочуРаньшеСпециализациямиУслугДокумента();
		
	ИначеЕсли Объект.ОтборХочуРаньше = "К указанным врачам" Тогда
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			НоваяСтрока = Объект.ОтборыХочуРаньше.Добавить();
			НоваяСтрока.Фильтр = Объект.Сотрудник;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборХочуРаньшеСпециализациямиУслугДокумента()
	
	Объект.ОтборыХочуРаньше.Очистить();
	
	мСпециализаций = ПолучитьСпециализацииУслуг(Объект.Работы);
	Для Каждого Специализация Из мСпециализаций Цикл
		НоваяСтрока = Объект.ОтборыХочуРаньше.Добавить();
		НоваяСтрока.Фильтр = Специализация;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпециализацииУслуг(Знач Работы)
	БуферТЗ = Новый ТаблицаЗначений();
	БуферТЗ.Колонки.Добавить("Специализация");
	
	Для Каждого стрТЧ Из Работы Цикл
		нстр = БуферТЗ.Добавить();
		нстр.Специализация = стрТЧ.Номенклатура.КатегорияВыработки;
	КонецЦикла;
	БуферТЗ.Свернуть("Специализация");
	
	Результат = Новый Массив();
	Для Каждого стр из БуферТЗ Цикл 
		Если ЗначениеЗаполнено(стр.Специализация) Тогда
			Результат.Добавить(стр.Специализация);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВрачейУслуг(Знач Работы)
	
	БуферТЗ = Новый ТаблицаЗначений;
	БуферТЗ.Колонки.Добавить("Сотрудник");
	
	Для Каждого СтрокаТаблицы Из Работы Цикл
		НоваяСтрока = БуферТЗ.Добавить();
		НоваяСтрока.Сотрудник = СтрокаТаблицы.Сотрудник;
	КонецЦикла;
	БуферТЗ.Свернуть("Сотрудник");
	
	Результат = Новый Массив();
	Для Каждого СтрокаТаблицы Из БуферТЗ Цикл 
		Если ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
			Результат.Добавить(СтрокаТаблицы.Сотрудник);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОграничениеТиповОтборовХочуРаньше()
	
	МассивТипов = Новый Массив;
	Если	Объект.ОтборХочуРаньше = "К указанным врачам"
		Или	Объект.ОтборХочуРаньше = "К тому же врачу"
	Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
		
	ИначеЕсли	Объект.ОтборХочуРаньше = "К врачу, с выбранными компетенциями"
			Или Объект.ОтборХочуРаньше = "К врачу, с теми же компетенциями"
	Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КатегорииВыработки"));
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Элементы.ОтборыХочуРаньшеФильтр.ОграничениеТипа = ОписаниеТипов;
	
КонецПроцедуры

&НаКлиенте
Процедура ХочуРаньшеПриИзменении(Элемент)
	
	Если Объект.ХочуРаньше И Объект.НесколькоСотрудников Тогда
		ПоказатьПредупреждение(,ПолучитьТекстПредупрежденияОдновременноХочуРаньшеНесколькоСотрудников(), 30);
		Объект.ХочуРаньше = Ложь;
	КонецЕсли;
	
	Если Объект.ХочуРаньше Тогда
		Если Не ЗначениеЗаполнено(Объект.ОтборХочуРаньше) Тогда
			Объект.ОтборХочуРаньше = "К тому же врачу";
		КонецЕсли;
		УстановитьВидимостьОтбораХочуРаньше(Элементы.ОтборыХочуРаньше, Элементы.ВидОтбораХочуРаньше.СписокВыбора, Объект.ОтборХочуРаньше);
	КонецЕсли;
	
	ОтборСотрудникПриИзменении(Элементы.ВидОтбораХочуРаньше);
	
	Элементы.СтраницаХочуРаньше.Видимость = Объект.ХочуРаньше;
	ОбновитьВидимостьСтраницПанелиФормы(Элементы.Страницы);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаХочуРаньше;
	ЭтаФорма.ТекущийЭлемент = Элементы.ПримечаниеХочуРаньше;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьОтборовЗаявкиХочуРаньше(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ХочуРаньше Тогда
		Если Объект.ОтборыХочуРаньше.Количество() = 0 Тогда
			
			Если Объект.ОтборХочуРаньше = "К врачу, с теми же компетенциями" Тогда
				ТекстОшибки = НСтр("ru='В заявке нет услуг. Для функции оповещения о возможности записаться раньше нельзя использовать режим врача с требуемыми для услуг компетенциями!'");
			Иначе
				ТекстОшибки = НСтр("ru='Необходимо указать хотя бы одно условие отбора для переноса заявки на более раннее время.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			Отказ = Истина;
		Иначе
			Для Каждого СтрокаОтбора Из Объект.ОтборыХочуРаньше Цикл
				Если Не ЗначениеЗаполнено(СтрокаОтбора.Фильтр) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя оставлять незаполненными врача или специализацию в фильтре переноса заявки на более раннее время.'"));
					Отказ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЗаявку(ИмпортируемыеЗначенияЗаполнения)
	ИмпортируемыеЗначенияЗаполнения.Вставить("ДатаОкончания", ИмпортируемыеЗначенияЗаполнения.ДатаНачала + (Объект.ДатаОкончания - Объект.ДатаНачала));
	ИмпортируемыеЗначенияЗаполнения.Вставить("ВремяОкончания", ИмпортируемыеЗначенияЗаполнения.ДатаОкончания);
	ЗаполнитьЗначенияСвойств(Объект, ИмпортируемыеЗначенияЗаполнения);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстПредупрежденияОдновременноХочуРаньшеНесколькоСотрудников()
	
	Возврат НСтр("ru='Не допускается одновременное использование режима нескольких сотрудников заявки и поиска возможности более раннего посещения!'");
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьОтбораХочуРаньше(ЭлементОтбор, ВидыОтбора, ЗначениеОтбора)
	
	Видимость = (ЗначениеОтбора <> ВидыОтбора[0].Значение И ЗначениеОтбора <> ВидыОтбора[1].Значение);
	Элементы.ГруппаСтраницыОтбораХочуРаньше.ТекущаяСтраница = ?(Видимость, Элементы.ГруппаСтраницыОтбораХочуРаньшеВидимый, Элементы.ГруппаСтраницыОтбораХочуРаньшеНевидимый);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьСтраницПанелиФормы(ЭлементСтраницы)
	
	Сч = 0;
	Для Каждого Страница Из ЭлементСтраницы.ПодчиненныеЭлементы Цикл
		Если Страница.Видимость Тогда
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементСтраницы.ОтображениеСтраниц = ?(Сч < 2, ОтображениеСтраницФормы.Нет, ОтображениеСтраницФормы.ЗакладкиСверху);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
&НаСервере
Процедура ОбновитьСвойства()
	
	Свойства.ОбъектОтбораЗначений   = Объект.Ссылка;
	Свойства.ОбъектОтбораНазначений = Объект.Ссылка;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Свойства");
	ОбъектОбработки.ПрочитатьЗаполнитьСвойстваИЗначения();
	Если ОбъектОбработки.СвойстваИЗначения.Количество() = 0 Тогда
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "Свойства", Ложь);
	Иначе
		ЗначениеВРеквизитФормы(ОбъектОбработки, "Свойства");
	КонецЕсли;
	
	Элементы.Свойства.Видимость = Свойства.СвойстваИЗначения.Количество() <> 0;
	
КонецПроцедуры

#Область ПодборРасписания // Автопоиск времени записи.

&НаКлиенте
Процедура ПодборВремени(Команда)
	
	УправлениеЗаявкамиКлиент.ОткрытьПодборВремениЗаписи(ЭтаФорма, Объект, мУчетнаяПолитика);
	
КонецПроцедуры

// Для вызова на клиенте и при создании формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКнопкиПодбораРасписания(Объект, ЭлементКнопка, ТекущийРежимЗаписиНаПрием, УчетнаяПолитика)
	
	Видимость = Ложь;
	
	Если ТекущийРежимЗаписиНаПрием <> ПредопределенноеЗначение("Перечисление.РежимыЗаписиНаПрием.ВКабинет") Тогда
		СтрокНоменклатурыОжидания = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", УчетнаяПолитика.НоменклатураОжиданияКлиента)).Количество();
		Видимость = 0 <> (Объект.Работы.Количество() - СтрокНоменклатурыОжидания);
	КонецЕсли;
		
	ЭлементКнопка.Видимость = Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВводаПриИзменении(Элемент)
	
	Если Объект.РежимДлительностиЗаявки <> ПредопределенноеЗначение("Перечисление.РежимДлительностиЗаявки.Фиксированная") Тогда
		Элементы.НесколькоСотрудников.Доступность = Истина;
		ПересчитатьИндивидуальнуюПродолжительностьУслуг();
		ПересчетВремениОкончания(Объект, Продолжительность);
	Иначе
		Элементы.НесколькоСотрудников.Доступность = Ложь;
		ФиксированнаяПродолжительность(Объект, Продолжительность)
	КонецЕсли;
	ПересчитатьДоступностьВремениОкончания();
	
КонецПроцедуры

#КонецОбласти 

