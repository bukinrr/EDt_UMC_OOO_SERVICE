#Область ПеременныеМодуля

Перем мНеДелатьПроверокПриЗаписи Экспорт; // Предназначена для записи заявки без проверки наложений, корректности
                                          // данных, (например, при смене состояния заявки из других объектов
                                          // конфигурации.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура отменяет заявку
// Параметры:
//  ПроверитьПричинуОтмены - Булево - По умолчанию Истина.
//
Процедура ОтменитьЗаявку(ПроверитьПричинуОтмены = Истина, СостояниеОтмены = Неопределено) Экспорт
	
	Если Не ПометкаУдаления Тогда
		Если ПроверитьПричинуОтмены Тогда
			КалендарьПланирования.ДобавитьВЗаявкуОтметкуНеобходимостиУказанияПричины(ЭтотОбъект);
		КонецЕсли;
		СостояниеДляОтката = Состояние;
		Состояние = ?(ЗначениеЗаполнено(СостояниеОтмены), СостояниеОтмены, Справочники.ВидыСостоянийЗаявок.Отменена);
		
		Попытка 
			ЭтотОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Операция не выполнена!'"));
			Состояние = СостояниеДляОтката;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ПометкаУдаления Тогда
		РаботаСДокументамиСервер.ОбработкаПроведенияДокументов(ЭтотОбъект,Отказ,РежимПроведения);
	КонецЕсли;
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	ЗаявкаОтменена = ПометкаУдаления Или УправлениеЗаявками.СостоянияЗаявкиОтменена().Найти(Состояние) <> Неопределено;
	
	#Область ОбработкаДанныхПередЗаписью // Операции дозаполнения перед записью.
	Если ДатаОкончания <> (КонецДня(ДатаНачала) + 1) Тогда 
		ДатаОкончания = НачалоДня(ДатаНачала) + ОбщегоНазначения.ВремяВСекунды(ДатаОкончания);
	КонецЕсли;
	
	// Заполнение реквизитов ДатаНачала и ДатаОкончания т.ч. работы.
	УпорядочитьРаботыСПустойПродолжительностью();
	текДатаНачала = ДатаНачала;
	Для Каждого СтрРаботы Из Работы Цикл
		СтрРаботы.ДатаНачала	= текДатаНачала;
		СтрРаботы.ДатаОкончания	= СтрРаботы.ДатаНачала + ОбщегоНазначения.ВремяВСекунды(СтрРаботы.Продолжительность);
		текДатаНачала = СтрРаботы.ДатаОкончания;
	КонецЦикла;
		
	// Таблица работ
	ТабРаботы = Работы.Выгрузить();
	ИспользованиеКабинетов = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимЗаписиНаПрием") <> Перечисления.РежимыЗаписиНаПрием.КВрачу;
	Для Каждого СтрРаботы Из ТабРаботы Цикл
		Если Не ЗначениеЗаполнено(СтрРаботы.Сотрудник) Тогда
			СтрРаботы.Сотрудник = Сотрудник;
		КонецЕсли;
		Если ИспользованиеКабинетов И НесколькоСотрудников Тогда
			Если Не ЗначениеЗаполнено(СтрРаботы.Оборудование1) Тогда
				СтрРаботы.Оборудование1 = Кабинет;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	#КонецОбласти
		
	Если Не ЗаявкаОтменена И мНеДелатьПроверокПриЗаписи <> Истина Тогда
		
		МетаданныеДокумента = Метаданные();
		
		СпЗнач = Новый СписокЗначений;
		Если ДатаНачала > ДатаОкончания Тогда
			СпЗнач.Добавить(НСтр("ru='Время окончания заявки меньше времени начала. Некорректно указано время заявки!'"));
		КонецЕсли;
		
		РежимЗаписиНаПрием = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимЗаписиНаПрием");
		// Контроль заполнения сотрудников
		Если РежимЗаписиНаПрием <> Перечисления.РежимыЗаписиНаПрием.ВКабинет Тогда
			спПредупрежденияНеуказанияСотрудниковВТЧ = Новый Массив;
			Для Каждого СтрРаботы Из ТабРаботы Цикл
				Если Не (ЗначениеЗаполнено(СтрРаботы.Номенклатура) И СтрРаботы.Номенклатура.ПланируетсяБезСотрудника) Тогда
					Если НесколькоСотрудников Тогда
						// Сразу проверяем на заполнение
						Если Не ЗначениеЗаполнено(СтрРаботы.Сотрудник) Тогда
							спПредупрежденияНеуказанияСотрудниковВТЧ.Добавить(СтрРаботы.НомерСтроки);
						КонецЕсли;
					ИначеЕсли Не ЗначениеЗаполнено(ЭтотОбъект.Сотрудник) Тогда
						СпЗнач.Добавить(СтрШаблон(НСтр("ru='Поле ""%1"" не заполнено'"), МетаданныеДокумента.Реквизиты["Сотрудник"].Синоним));
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПерваяКолонкаОборудованияКабинет = НесколькоСотрудников И РежимЗаписиНаПрием <> Перечисления.РежимыЗаписиНаПрием.КВрачу;
		флЕстьРаботыБезКабинета = Ложь;
		Для Каждого СтрокаРаботы Из ТабРаботы Цикл
		    стр = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(СтрокаРаботы.Номенклатура, ЭтотОбъект[ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов()]);
			
			Для Инд = 1 По ?(ПерваяКолонкаОборудованияКабинет,2,3) Цикл
				Если ТипЗнч(стр["Оборудование" + Инд]) = Тип("СправочникСсылка.МоделиОборудования") 
					И Не ЗначениеЗаполнено(СтрокаРаботы["Оборудование" + (Инд + ?(ПерваяКолонкаОборудованияКабинет,1,0))]) 
				Тогда
					СпЗнач.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для работы %1 не заполнено кабинет/оборудование №%2.'"),СтрокаРаботы.Номенклатура,Инд));
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		Если СпЗнач.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьСписок(СпЗнач);	
			Отказ = Истина;
			Возврат;
		КонецЕсли;		
		
		Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимЗаписиНаПрием") <> Перечисления.РежимыЗаписиНаПрием.ВКабинет Тогда
			Для Каждого НомСтрПредупрежденияСотрудник из спПредупрежденияНеуказанияСотрудниковВТЧ Цикл
				ТекстСообщения = НСтр("ru='Не указан сотрудник в строке №%1.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомСтрПредупрежденияСотрудник);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
				Отказ = Истина;
			КонецЦикла;
		КонецЕсли;
		
		// Проверка, нет ли уже заявки по клиенту на это время
		Если ДатаНачала <> ДатаОкончания
			И Не ОбменДанными.Загрузка
		Тогда			
			ПроверитьНаложениеЗаявокКлиентов(Отказ);
		КонецЕсли;
		
		// Проверка наложения заявок сотрудников
		Если Работы.Количество() <> 0 Тогда			
			ПроверитьНаложениеЗаявокСотрудников(Отказ, ТабРаботы.Скопировать());
			
			// Проверка, нет ли уже заявки по оборудованию на это время.
			РезультатНаложение = КалендарьПланирования.ПроверкаНаложенияЗаявокОборудования(ТабРаботы.Скопировать(),ДатаНачала,ДатаОкончания,ЭтотОбъект,ИспользованиеКабинетов);
			Если РезультатНаложение <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка записи документа'") );
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя записать заявку, т.к. на необходимые для работ кабинеты/оборудование на данный период уже имеются заявки:'") );
				Для Каждого стр Из РезультатНаложение Цикл
					ТекстСообщения = НСтр("ru='   %1 - %2, сотрудник: %3
						|      на %4: %5-%6'") ;
				    ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
						Строка(стр.Оборудование), Строка(стр.Заявка), стр.Сотрудник,
						Формат(стр.ДатаНачала,"ДФ=dd.MM.yyyy"), Формат(стр.ВремяНачала,"ДФ=HH:mm"), Формат(стр.ВремяОкончания,"ДФ=HH:mm"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЦикла;
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Если есть ошибки при проверке, но это загрузку нового документа из внешнего источника,
		Если Отказ
			И ОбменДанными.Загрузка
			И ЭтоНовый()
		Тогда
			ЗаписатьПроблемнуюЗаявкуИзВнешнегоИсточника(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеЗаявками.СостоянияЗаявкиДоПродажиИлиВыполнения().Найти(Состояние) <> Неопределено Тогда // Состояние до использования автосостояний.
		СостояниеДляОтката = Состояние;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДополнительныеСвойства.Вставить("СостояниеПредыдущее", Ссылка.Состояние);
	КонецЕсли;
	
	ОпределениеНеобходимостиОбновленияЖурналаЗаписи();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		УправлениеЗаявками.ЗаписатьОповещенияОПриходеКлиентов(Ссылка, ДополнительныеСвойства); 
	КонецЕсли;
	
	Если Не Отказ И ХочуРаньше И УправлениеЗаявками.СостояниеЗаявкиРабочее(Состояние) Тогда
		Эталон = Константы.ДатаПоследнейЗаявкиХочуРаньше.Получить();
		Если Не ЗначениеЗаполнено(Эталон) ИЛИ НачалоДня(ДатаНачала) > Эталон Тогда
			Константы.ДатаПоследнейЗаявкиХочуРаньше.Установить(ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
	// Отметка выполнения листа ожидания-основания.
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("ДокументСсылка.ЛистОжидания")
	Тогда
		Попытка
			CRMСервер.ОтметитьВыполнениеЛистаОжидания(Основание, Ссылка);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ПометкаУдаления
		Или УправлениеЗаявками.СостоянияЗаявкиОтменена().Найти(Состояние) <> Неопределено
	Тогда
		ВебИнтеграция.ПометитьКакПрочитанныйДокумент(Ссылка, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЛистОжидания") Тогда
				
		// Заполнение шапки
		Филиал	= ДанныеЗаполнения.Филиал;
		Клиент	= ДанныеЗаполнения.Клиент;
		Сотрудник	= ДанныеЗаполнения.Сотрудник;
		Ответственный	= ДанныеЗаполнения.Ответственный;
		Примечание		= ДанныеЗаполнения.Примечание;
		
		Основание = ДанныеЗаполнения;
		
		Для Каждого ТекСтрокаРаботы Из ДанныеЗаполнения.Работы Цикл
			НоваяСтрока = Работы.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрокаРаботы.Номенклатура;
			НоваяСтрока.Продолжительность = УправлениеЗаявками.ПлановаяДлительностьУслуги(НоваяСтрока.Номенклатура);// ТекСтрокаРаботы.Продолжительность;
		КонецЦикла;
		
		СтрЖелаемоеВремя = Неопределено;
		Если ДанныеЗаполнения.ЖелаемоеВремя.Количество() = 1 Тогда
			СтрЖелаемоеВремя = ДанныеЗаполнения.ЖелаемоеВремя[0];
		ИначеЕсли ДанныеЗаполнения.ЖелаемоеВремя.Количество() > 1 Тогда
			Для Каждого СтрокаТабЧасти Из ДанныеЗаполнения.ЖелаемоеВремя Цикл 
				Если СтрокаТабЧасти.Дата >= НачалоДня(ТекущаяДата()) Тогда
					СтрЖелаемоеВремя = СтрокаТабЧасти;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрЖелаемоеВремя <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрЖелаемоеВремя.Дата) Тогда
				ДатаНачала = СтрЖелаемоеВремя.Дата + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(СтрЖелаемоеВремя.Начало);
				Если ДатаНачала <= ТекущаяДата() Тогда
					// За прошедший день нет смысла записывать - по-умолчанию поставляем завтраший.
					ДатаНачала = НачалоДня(ТекущаяДата()) + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(СтрЖелаемоеВремя.Начало);
				КонецЕсли;
			Иначе
			    ДатаНачала = НачалоДня(ТекущаяДата()) + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(СтрЖелаемоеВремя.Начало);
			КонецЕсли;
			ДатаОкончания = ДатаНачала;
			
			Для Каждого СтрокаРаботы Из Работы Цикл
				ДатаОкончания = ДатаОкончания + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(СтрокаРаботы.Продолжительность);
			КонецЦикла;
			
			ВремяНачала		= СтрЖелаемоеВремя.Начало;
			ВремяОкончания  = Дата(1,1,1) + (ДатаОкончания - НачалоДня(ДатаОкончания));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Клиент") Тогда
			Клиент = ДанныеЗаполнения.Клиент;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			Сотрудник = ДанныеЗаполнения.Сотрудник;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Работы") Тогда
			ДанныеЗаполненияРаботы = ДанныеЗаполнения.Работы;
		ИначеЕсли ДанныеЗаполнения.Свойство("Основание")
			И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЛистОжидания")
		Тогда
			ДанныеЗаполненияРаботы = ДанныеЗаполнения.Основание.Работы;
		КонецЕсли;
		
		Если ДанныеЗаполненияРаботы <> Неопределено Тогда
			Для Каждого ДанныеРаботы Из ДанныеЗаполненияРаботы Цикл
				СтрокаРаботы = Работы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаботы, ДанныеРаботы);
				СтрокаРаботы.Продолжительность = УправлениеЗаявками.ПлановаяДлительностьУслуги(СтрокаРаботы.Номенклатура);
			КонецЦикла;
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Для Каждого СтрокаРаботы Из Работы Цикл
				Если ЗначениеЗаполнено(СтрокаРаботы.Сотрудник) Тогда
					Сотрудник = СтрокаРаботы.Сотрудник;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ДанныеЗаполнения.Свойство("РежимДлительностиЗаявки")
			Или (Не ДанныеЗаполнения.РежимДлительностиЗаявки = Перечисления.РежимДлительностиЗаявки.Фиксированная И ДанныеЗаполнения.КоличествоВыбранныхЯчеек = 1)
		Тогда
			РежимДлительностиЗаявки = Перечисления.РежимДлительностиЗаявки.ПоНормам;
			
			Если Не ДанныеЗаполнения.Свойство("ДатаНачала") Тогда
				ДанныеЗаполнения.Вставить("ДатаНачала", ТекущаяДата());
				КалендарьПланирования.ОкруглитьВремяДоПериодаПланирования(ДанныеЗаполнения.ДатаНачала);
			КонецЕсли;
			Если Не ДанныеЗаполнения.Свойство("ВремяНачала") Тогда
				ДанныеЗаполнения.Вставить("ВремяНачала", ДанныеЗаполнения.ДатаНачала);
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить("ВремяОкончания", ДанныеЗаполнения.ВремяНачала);
			ДанныеЗаполнения.Вставить("ДатаОкончания", ДанныеЗаполнения.ДатаНачала);
			
			Если Работы.Количество() <> 0 Тогда
				ПродолжительностьОбщая = 0;
				Для Каждого СтрокаРаботы Из Работы Цикл
					ПродолжительностьОбщая = ПродолжительностьОбщая + ОбщегоНазначения.ВремяВСекунды(СтрокаРаботы.Продолжительность);
				КонецЦикла;
				ДанныеЗаполнения.ВремяОкончания	 = ДанныеЗаполнения.ВремяОкончания	 + ПродолжительностьОбщая;
				ДанныеЗаполнения.ДатаОкончания	 = ДанныеЗаполнения.ДатаОкончания	 + ПродолжительностьОбщая;
			КонецЕсли;
			
			РежимДлительностиЗаявки = Перечисления.РежимДлительностиЗаявки.ПоНормам;
		Иначе
			РежимДлительностиЗаявки = Перечисления.РежимДлительностиЗаявки.Фиксированная;
			Если ДанныеЗаполнения.КоличествоВыбранныхЯчеек = 1 
				И ДанныеЗаполнения.СредняяПродолжительность <> Дата(1,1,1)
			Тогда
				ДанныеЗаполнения.ВремяОкончания = ДанныеЗаполнения.ВремяНачала + ОбщегоНазначения.ВремяВСекунды(ДанныеЗаполнения.СредняяПродолжительность);
				ДанныеЗаполнения.ДатаОкончания = НачалоДня(ДанныеЗаполнения.ДатаНачала) + ОбщегоНазначения.ВремяВСекунды(ДанныеЗаполнения.ВремяОкончания);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Состояние = Справочники.ВидыСостоянийЗаявок.Забронирована Тогда
		Индекс = ПроверяемыеРеквизиты.Найти("Клиент");
		Если Индекс <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Клиент"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьПроблемнуюЗаявкуИзВнешнегоИсточника(Отказ)
	
	Отказ = Ложь;
	Состояние = Справочники.ВидыСостоянийЗаявок.Отменена;
	
	Если ЭтоНовый() Тогда
		СсылкаНаОбъект = ПолучитьСсылкуНового();
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Документы.Заявка.ПолучитьСсылку(Новый УникальныйИдентификатор);
			УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Ссылка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.ОшибкиОбменовДанными.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Описание = НСтр("ru='Заявка, полученная из ""%1"" не может быть записана в базу без ручной корректировки.'");
		Если ЗначениеЗаполнено(ОбменДанными.Отправитель) Тогда
			Источник = Строка(ОбменДанными.Отправитель);
		ИначеЕсли ДополнительныеСвойства.Свойство("ИсточникДокумента") Тогда
			Источник = ДополнительныеСвойства.ИсточникДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник) Тогда
			Описание = СтрШаблон(Описание, Источник);
			
			// Запись в регистр предупреждений
			Запись = НаборЗаписей.Добавить();
			Запись.Объект = СсылкаНаОбъект;
			Запись.Описание = Описание;
			Запись.ДатаРегистрации = ТекущаяДата();
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьНаложениеЗаявокСотрудников(Отказ, Знач ТабРаботы)
	
	флРазрыв  = Ложь;
	махОбрИнд = ТабРаботы.Количество()-1;
	Для сч = 0 По махОбрИнд Цикл
		ТекСтрока = ТабРаботы[махОбрИнд-сч];
		
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) И ТекСтрока.Номенклатура.ПланируетсяБезСотрудника Тогда
			ТабРаботы.Удалить(ТекСтрока);
			флРазрыв = Истина;
		ИначеЕсли Не флРазрыв Тогда
			Если сч = махОбрИнд Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВыше = ТабРаботы[махОбрИнд-сч-1];
			Если ТекСтрока.Сотрудник = СтрокаВыше.Сотрудник
				И Не (ЗначениеЗаполнено(СтрокаВыше.Номенклатура) И СтрокаВыше.Номенклатура.ПланируетсяБезСотрудника)
			Тогда
				СтрокаВыше.ДатаОкончания = ТекСтрока.ДатаОкончания;
				ТабРаботы.Удалить(ТекСтрока);
			КонецЕсли;
			флРазрыв = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ТабПроверкиНаложений = ТабРаботы.Скопировать(,"Сотрудник, ДатаНачала, ДатаОкончания");
	
	спСотрудникаСВыведеннымиПредупреждениями = Новый СписокЗначений;
	Для Каждого СтрПроверки Из ТабПроверкиНаложений Цикл
		Если СтрПроверки.Сотрудник.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка, нет ли уже заявки по сотруднику на это время
		РезультатНаложение = КалендарьПланирования.ПроверкаНаложенияЗаявок(СтрПроверки.Сотрудник, СтрПроверки.ДатаНачала, СтрПроверки.ДатаОкончания, Ссылка);
		Если РезультатНаложение <> Неопределено
			И спСотрудникаСВыведеннымиПредупреждениями.НайтиПоЗначению(СтрПроверки.Сотрудник) = Неопределено
		Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка записи документа'"));
			
			ТекстСообщения = НСтр("ru='Нельзя записать заявку, т.к. по сотруднику %1 на данный период уже имеются заявки:'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтрПроверки.Сотрудник));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			// Формируем текст, какая конкретно заявка, на какую дату и какой интервал времени.
			ТекстСообщения = НСтр("ru='   %1 
				|      на %2: %3-%4'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				Строка(РезультатНаложение.Ссылка), Формат(РезультатНаложение.ДатаНачала,"ДФ=dd.MM.yyyy"), Формат(РезультатНаложение.ДатаНачала,"ДФ=HH:mm"),
				Формат(РезультатНаложение.ДатаОкончания,"ДФ=HH:mm"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			спСотрудникаСВыведеннымиПредупреждениями.Добавить(СтрПроверки.Сотрудник);
			Отказ = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		спСотрудникаСВыведеннымиПредупреждениями.Очистить();
		мСотрудники = Новый Массив;
		Для Каждого СтрПроверки Из ТабПроверкиНаложений Цикл
			Если Не СтрПроверки.Сотрудник.Пустая() Тогда
				мСотрудники.Добавить(СтрПроверки.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		РабочееВремя = ГрафикиСотрудников.ПолучитьРабочееВремяЗаПериод(ДатаНачала, ДатаОкончания, Ложь, , Филиал, мСотрудники);
		Для Каждого СтрПроверки Из ТабПроверкиНаложений Цикл
			Если СтрПроверки.Сотрудник.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			флОшибка = Истина;
			Для Каждого СтрокаРабочегоВремени Из РабочееВремя.НайтиСтроки(Новый Структура("Сотрудник", СтрПроверки.Сотрудник)) Цикл
				Если СтрПроверки.ДатаНачала >= СтрокаРабочегоВремени.Дата + (СтрокаРабочегоВремени.ВремяНачала - Дата(1,1,1))
					И СтрПроверки.ДатаОкончания <= СтрокаРабочегоВремени.Дата + (СтрокаРабочегоВремени.ВремяОкончания - Дата(1,1,1))
				Тогда
					флОшибка = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если флОшибка
				И спСотрудникаСВыведеннымиПредупреждениями.НайтиПоЗначению(СтрПроверки.Сотрудник) = Неопределено
			Тогда
				ТекстПредупреждения = СтрШаблон(НСтр("ru='Время выполнения работ по заявке выходит за границы рабочего дня сотрудника %1 в этот день!'"), Строка(СтрПроверки.Сотрудник));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
				спСотрудникаСВыведеннымиПредупреждениями.Добавить(СтрПроверки.Сотрудник);
				
				// Если запрещено записывать на нерабочее время, то отказываем в записи заявки
				Если Не ОбменДанными.Загрузка
					И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗапретитьЗаписьНаНерабочееВремяСотрудника") = Истина
					И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ВсегдаРазрешатьЗаписыватьНаНерабочееВремяСотрудников") = Ложь
				Тогда
					Отказ = Истина; // В учетной политике запрещено записывать на нерабочее время и у пользователя нет личного разрешения.
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаложениеЗаявокКлиентов(Отказ)
	
	Если Не ОбменДанными.Загрузка
		И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗапретитьЗаписьКлиентаНаДваПосещенияОдновременно") = Истина
	Тогда 
		РезультатНаложение = КалендарьПланирования.ПроверкаНаложенияЗаявокКлиента(Клиент, ДатаНачала, ДатаОкончания, Ссылка);
		Если РезультатНаложение <> Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='Нельзя записать заявку, т.к. по клиенту %1 на данный период уже имеются заявки:'"); 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				Строка(Клиент));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Для Каждого СтрокаНаложение Из РезультатНаложение Цикл
				ТекстСообщения = НСтр("ru='   %1 
				|      на %2: %3-%4'"); 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
					Строка(СтрокаНаложение.Ссылка), Формат(СтрокаНаложение.ДатаНачала,"ДФ=dd.MM.yyyy"),Формат(СтрокаНаложение.ДатаНачала,"ДФ=HH:mm"),
					Формат(СтрокаНаложение.ДатаОкончания,"ДФ=HH:mm")); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В базе включен запрет на запись клиента несколькими заявками на одно время.'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОпределениеНеобходимостиОбновленияЖурналаЗаписи

Процедура ОпределениеНеобходимостиОбновленияЖурналаЗаписи()
	
	Если Не ДополнительныеСвойства.Свойство("ЗаписьВФорме") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("ОповеститьОбИзмененииЗаявки", Истина);
		ДополнительныеСвойства.Вставить("ИзменилосьТолькоСостояние", Ложь);
	Иначе
		ПроверяемыеРеквизиты = РеквизитыВлияющиеНаЖурналЗаписи();
		ТекущиеЗначенияРеквизитов = ЗначенияРеквизитовВМассив(ПроверяемыеРеквизиты, ЭтотОбъект);
		СтарыеЗначенияРеквизитов  = ЗначенияРеквизитовВМассив(ПроверяемыеРеквизиты, Ссылка);
		
		ПоляЗаявкиИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(ТекущиеЗначенияРеквизитов, СтарыеЗначенияРеквизитов);
		СостояниеИзменилось	 = Ссылка.Состояние <> ЭтотОбъект.Состояние;
		
		// Свойства объекта
		Если Не ПоляЗаявкиИзменились И ДополнительныеСвойства.Свойство("ЗначенияСвойствОбъекта") И ДополнительныеСвойства.ЗначенияСвойствОбъекта.Количество() > 0 Тогда
			НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			НаборЗаписей.Прочитать();
			ПоляЗаявкиИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(ДополнительныеСвойства.ЗначенияСвойствОбъекта.Скопировать(,"Значение,Свойство"), НаборЗаписей.Выгрузить(,"Значение,Свойство"));
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ОповеститьОбИзмененииЗаявки", ПоляЗаявкиИзменились Или СостояниеИзменилось);
		ДополнительныеСвойства.Вставить("ИзменилосьТолькоСостояние", СостояниеИзменилось И Не ПоляЗаявкиИзменились);
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыВлияющиеНаЖурналЗаписи()
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Клиент");
	ПроверяемыеРеквизиты.Добавить("Сотрудник");
	ПроверяемыеРеквизиты.Добавить(ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов());
	ПроверяемыеРеквизиты.Добавить("ДатаНачала");
	ПроверяемыеРеквизиты.Добавить("ДатаОкончания");
	ПроверяемыеРеквизиты.Добавить("ВремяНачала");
	ПроверяемыеРеквизиты.Добавить("ВремяОкончания");
	ПроверяемыеРеквизиты.Добавить("Примечание");
	ПроверяемыеРеквизиты.Добавить("КомментарийКлиента");
	
	МетаданныеДокумента = Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Групповая", МетаданныеДокумента) Тогда
		ПроверяемыеРеквизиты.Добавить("Групповая");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Кабинет", МетаданныеДокумента) Тогда
		ПроверяемыеРеквизиты.Добавить("Кабинет");
	КонецЕсли;
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

Функция ЗначенияРеквизитовВМассив(ПроверяемыеРеквизиты, Заявка)
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		МассивРеквизитов.Добавить(Заявка[ПроверяемыйРеквизит]);
	КонецЦикла;
	
	Возврат МассивРеквизитов;
	
КонецФункции

#КонецОбласти

Процедура УпорядочитьРаботыСПустойПродолжительностью()
	
	мОбработанныеСотрудники = Новый Массив;
	Для Каждого СтрокаРаботы Из Работы Цикл
		Если мОбработанныеСотрудники.Найти(СтрокаРаботы.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мОбработанныеСотрудники.Добавить(СтрокаРаботы.Сотрудник);
		Если Не ЗначениеЗаполнено(СтрокаРаботы.Продолжительность) Тогда
			РаботыСотрудника = Работы.НайтиСтроки(Новый Структура("Сотрудник", СтрокаРаботы.Сотрудник));
			ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(РаботыСотрудника, Работы);
			Для Каждого СтрокаРаботыСотрудника Из РаботыСотрудника Цикл
				Если ЗначениеЗаполнено(СтрокаРаботыСотрудника.Продолжительность) Тогда
					Сдвиг = Работы.Индекс(СтрокаРаботыСотрудника) - Работы.Индекс(СтрокаРаботы);
					Работы.Сдвинуть(СтрокаРаботы, Сдвиг);
					Работы.Сдвинуть(СтрокаРаботыСотрудника, 1 - Сдвиг);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
