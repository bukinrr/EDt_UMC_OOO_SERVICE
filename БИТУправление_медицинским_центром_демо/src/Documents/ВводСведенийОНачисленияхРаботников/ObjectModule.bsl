
#Область ПрограммныйИнтерфейс

// Процедура заполнения табличной части начислений по актуальному состоянию на момент документа.
//
// Параметры:
//  Сотрудник		 - СправочникСсылка.Сотрудники	 - сотрудник
//  ДатаАктуальности - Дата							 - среза данных о сотруднике. По умолчанию Неопределено
//
Процедура ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник, ДатаАктуальности = Неопределено) Экспорт
	
	Если ДатаАктуальности = Неопределено Тогда
		ДатаАктуальности = Дата
	КонецЕсли;
	
	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросНачисления.УстановитьПараметр("Период",  ДатаАктуальности);
	ЗапросНачисления.УстановитьПараметр("Прекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	
	ЗапросНачисления.Текст =
	"ВЫБРАТЬ
	|	СведенияОНачисленияхСотрудниковСрезПоследних.Начисление КАК ВидРасчета,
	|	СведенияОНачисленияхСотрудниковСрезПоследних.Параметр1 КАК Показатель1,
	|	СведенияОНачисленияхСотрудниковСрезПоследних.Параметр2 КАК Показатель2,
	|	СведенияОНачисленияхСотрудниковСрезПоследних.Параметр3 КАК Показатель3
	|ИЗ
	|	РегистрСведений.СведенияОНачисленияхСотрудников.СрезПоследних(
	|			&Период,
	|			Сотрудник = &Сотрудник
	|				И Действие <> &Прекратить) КАК СведенияОНачисленияхСотрудниковСрезПоследних";

	Выборка = ЗапросНачисления.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета, Действие");
	СтруктураПоиска.Действие   = Перечисления.ВидыДействияСНачислением.НеИзменять;
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		МассивНачислений = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрокаТЧ	= ОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,Выборка);
		НоваяСтрокаТЧ.Действие		= Перечисления.ВидыДействияСНачислением.НеИзменять;
		НоваяСтрокаТЧ.Сотрудник		= Сотрудник;
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиНачисленийПоРаботнику()

// Процедура удаления строк табличной части начислений указанного соттрудника.
//
// Параметры:
//  Сотрудник	 - СправочникСсылка.Сотрудники	 - сотрудник
//
Процедура УдалитьСтрокиНачисленийПоРаботнику(Сотрудник) Экспорт
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	МассивСтрок = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";

	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТрудоваяРоль) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник или трудовая роль!");
		Отказ = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + "не задано действие!");
		Отказ = Истина;
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + "не задан вид расчета!");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоРаботникиОрганизации)

	Если ВыборкаПоРаботникиОрганизации.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		
		Движение = Движения.СведенияОНачисленияхСотрудников.Добавить();
		
		Движение.Период					= Дата;
		Движение.Сотрудник				= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.ТрудоваяРоль			= ВыборкаПоРаботникиОрганизации.ТрудоваяРоль;
		Движение.Начисление				= ВыборкаПоРаботникиОрганизации.ВидРасчета;
		Движение.Действие				= ВыборкаПоРаботникиОрганизации.Действие;
		
		Если ВыборкаПоРаботникиОрганизации.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Движение.Параметр1 			= ВыборкаПоРаботникиОрганизации.Показатель1;		
			Движение.Параметр2 			= ВыборкаПоРаботникиОрганизации.Показатель2;		
			Движение.Параметр3 			= ВыборкаПоРаботникиОрганизации.Показатель3;		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)               
	
	Для Каждого СтрокаНачисления Из ОсновныеНачисления Цикл               
		
		ПроверитьЗаполнениеСтрокиРаботникаОрганизации(СтрокаНачисления, Отказ);

		Если НЕ Отказ Тогда
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(СтрокаНачисления);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СтрокаКраткийСоставДокумента = "";
	Сотрудники = Новый ТаблицаЗначений;
	Сотрудники = ОсновныеНачисления.Выгрузить(,"Сотрудник");
	Сотрудники.Свернуть("Сотрудник");
	
	Для Каждого Строка Из Сотрудники Цикл
		Если Строка.Сотрудник.ЭтоГруппа Тогда
			ФИО = Строка(Строка.Сотрудник);
		Иначе
			ФИО = Строка.Сотрудник.Фамилия + " " + Лев(Строка.Сотрудник.Имя,1) + "." + Лев(Строка.Сотрудник.Отчество,1) + ".";
		КонецЕсли;
	    СтрокаКраткийСоставДокумента = СтрокаКраткийСоставДокумента + ФИО + ", ";
	КонецЦикла;
	КраткийСоставДокумента = Лев(Лев(СтрокаКраткийСоставДокумента,СтрДлина(СтрокаКраткийСоставДокумента)-2),50);
	
КонецПроцедуры

#КонецОбласти
