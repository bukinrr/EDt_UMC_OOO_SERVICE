&НаКлиенте
Перем мТекущаяДатаДокумента Экспорт; // Хранит текущую дату документа - для проверки перехода документа в другой период
                                     // установки номера.

&НаКлиенте
Перем мТекущийСотрудник;

&НаКлиенте
Перем мВидРасчетаИзменился;

&НаКлиенте
Процедура УстановитьОтборРаботника(Сотрудник)
	
	Если Элементы.ГруппаНачисления.ПодчиненныеЭлементы.ОсновныеНачисления.КоманднаяПанель.ПодчиненныеЭлементы.ОсновныеНачисленияВсеРаботники.Пометка Тогда
		Элементы.ОсновныеНачисления.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Сотрудник);
    КонецЕсли;
	
КонецПроцедуры // УстановитьОтборРаботника().

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	РаботаСДиалогамиСервер.ПроверитьНомерДокумента(Объект, мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРаботники(Команда)
	
	Если Элементы.РаботникиОрганизации.ТекущиеДанные <> Неопределено
		И Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник <> Неопределено Тогда
		
		Если Элементы.ОсновныеНачисления.ОтборСтрок <> Неопределено Тогда
			
			// Отключим отбор.
			Элементы.ГруппаНачисления.ПодчиненныеЭлементы.ОсновныеНачисления.КоманднаяПанель.ПодчиненныеЭлементы.ОсновныеНачисленияВсеРаботники.Пометка = Ложь;
			Элементы.ОсновныеНачисления.ОтборСтрок = Неопределено;
			Элементы.ОсновныеНачисления.Обновить();
			
		Иначе
			// Установим отбор.
			Элементы.ОсновныеНачисления.ОтборСтрок = Новый ФиксированнаяСтруктура("Сотрудник", Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
			Элементы.ГруппаНачисления.ПодчиненныеЭлементы.ОсновныеНачисления.КоманднаяПанель.ПодчиненныеЭлементы.ОсновныеНачисленияВсеРаботники.Пометка = Истина;
			
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В таблице работников не выбрана строка!");
		
	КонецЕсли;
	
КонецПроцедуры

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);
	
	// Заполним таблицу работников.
	ЗаполнитьТаблицуРаботниковОрганизации();
	
	Работники = ДанныеФормыВЗначение(РаботникиОрганизации, Тип("ТаблицаЗначений"));
	Работники.Индексы.Добавить("Сотрудник");
	
	ЗначениеВДанныеФормы(Работники, РаботникиОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущаяДатаДокумента = Объект.Дата;
	
	// Кнопки "По сотруднику" командных панелей установим в оключенное состояние.
	Элементы.ГруппаНачисления.ПодчиненныеЭлементы.ОсновныеНачисления.КоманднаяПанель.ПодчиненныеЭлементы.ОсновныеНачисленияВсеРаботники.Пометка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Истина, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНЫХ ЧАСТЕЙ. 

&НаСервере
Процедура ЗаполнитьТаблицуРаботниковОрганизации()
	
	РаботникиОрганизации.Очистить();
	
	ТЗ = Объект.ОсновныеНачисления.Выгрузить();
	ТЗ.Свернуть("Сотрудник");
	ТЗ.Сортировать("Сотрудник");
	
	Для Каждого СтрокаТабличнойЧасти Из ТЗ Цикл
		ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуРаботниковОрганизации().

&НаКлиенте
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.РаботникиОрганизации.ТекущиеДанные;
	
	Если	ДанныеСтроки = Неопределено 
		Или ДанныеСтроки.Сотрудник = Неопределено 
	Тогда
		мТекущийСотрудник = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Запомним текущего работника.
	мТекущийСотрудник	= ДанныеСтроки.Сотрудник;
	
	УстановитьОтборРаботника(ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	РаботникиОрганизацииПередУдалениемСервер(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаСервере
Процедура РаботникиОрганизацииПередУдалениемСервер(Сотрудник)
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 1 Тогда
		Об = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ВводСведенийОНачисленияхРаботников"));
		Об.УдалитьСтрокиНачисленийПоРаботнику(Сотрудник);
		ЗначениеВДанныеФормы(Об, Объект);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	// Если работник изменился, то по предыдущему работнику удалим строки, а по новому добавим.
	Если ДанныеСтроки.Сотрудник <> мТекущийСотрудник И
		РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", мТекущийСотрудник)).Количество() = 0
	Тогда
		РаботникиОрганизацииПередУдалениемСервер(мТекущийСотрудник);
		мТекущийСотрудник = ДанныеСтроки.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Попытка
		УстановитьОтборРаботника(Элемент.ТекущиеДанные.Сотрудник);
	Исключение КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.РаботникиОрганизации.ТекущиеДанные;
	УстановитьОтборРаботника(ДанныеСтроки.Сотрудник);
		
КонецПроцедуры

// Обработка выбора сотрудника в таблице сотрудников, проверка на повторяющихся сотрудников.
&НаКлиенте
Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	
	Если СтрокиРаботников.Количество() > 0 И Элемент.Родитель.ТекущиеДанные.Сотрудник <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному работнику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Родитель.ТекущиеДанные.Сотрудник = ВыбранноеЗначение;
	
	УстановитьОтборРаботника(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		мсСтр = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
		Если мсСтр.Количество() <> 0 Тогда
			Элементы.РаботникиОрганизации.ТекущаяСтрока = мсСтр[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Если Элементы.ОсновныеНачисления.ОтборСтрок <> Неопределено И ЗначениеЗаполнено(Элементы.ОсновныеНачисления.ОтборСтрок.Сотрудник) Тогда
			ДанныеСтроки.Сотрудник = Элементы.ОсновныеНачисления.ОтборСтрок.Сотрудник;
			
		Иначе
			ДанныеСтрокиТЧРаботники = Элементы.РаботникиОрганизации.ТекущиеДанные;
			Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
				ДанныеСтроки.Сотрудник = ДанныеСтрокиТЧРаботники.Сотрудник;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияПослеУдаления(Элемент)
	ЗаполнитьТаблицуРаботниковОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	
	ОсновныеНачисленияСотрудникПриИзмененииСервер(Элементы.ОсновныеНачисления.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаСервере
Процедура ОсновныеНачисленияСотрудникПриИзмененииСервер(Значение)
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник",Значение)).Количество() = 0 Тогда
		ЗаполнитьТаблицуРаботниковОрганизации();
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервереБезКонтекста
Функция ПолучитьЗначенияПоказателей(ВидНачисленияСсылка)
	
	Показатели = Новый Структура;
	
	ВидНачисления = ВидНачисленияСсылка.ПолучитьОбъект();
	пчВидыПараметровРасчета = Перечисления.ВидыПараметровРасчетаНачислений;
	
	Для ТекПараметр = 1 По 3 Цикл
		
		ВидПараметра = ВидНачисления["ВидПараметра"+ТекПараметр];
		
		Если ВидПараметра = пчВидыПараметровРасчета.КатегорияВыработки Тогда
			Значение = Справочники.КатегорииВыработки.ПустаяСсылка();
		ИначеЕсли ВидПараметра = пчВидыПараметровРасчета.ДанныеТабеля Тогда
			ПоказательНачисления = ВидНачисления["ПоказательРасчета"+ТекПараметр];
			Если ПоказательНачисления = Перечисления.ПоказателиРасчетаНачислений.КоличествоДнейПоТабелю
				Или ПоказательНачисления = Перечисления.ПоказателиРасчетаНачислений.КоличествоЧасовПоТабелю
			Тогда
				Значение = Неопределено;
			Иначе
				Значение = Справочники.ВидыГрафиков.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ВидПараметра = пчВидыПараметровРасчета.Число Тогда
			Значение = 0;
		ИначеЕсли ВидПараметра = пчВидыПараметровРасчета.Шкала Тогда
			Значение = Справочники.ШкалыРасчета.ПустаяСсылка();
		ИначеЕсли ВидПараметра = пчВидыПараметровРасчета.ВидНачисления Тогда
			Значение = ПланыВидовРасчета.Начисления.ПустаяСсылка();
		ИначеЕсли ВидПараметра = пчВидыПараметровРасчета.Ответственный Тогда
			Значение = Справочники.Пользователи.ПустаяСсылка();
		ИначеЕсли ВидПараметра = пчВидыПараметровРасчета.Филиал Тогда
			Если ПроцедурыСпециализацииПоставки.ПоддерживаетсяУчетПоНесколькимФилиалам() Тогда
				Значение = Справочники.Филиалы.ПустаяСсылка();
			Иначе
				Значение = Неопределено;
			КонецЕсли;
		ИначеЕсли ВидПараметра = пчВидыПараметровРасчета.ДополнительныйПараметр Тогда
			Значение = Справочники.ПараметрыРасчетаЗП.ПустаяСсылка();
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		
		Показатели.Вставить("Показатель" + ТекПараметр, Значение);
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	ОсновныеНачисленияВидРасчетаПриИзмененииПереопред(Элемент, Элементы.ОсновныеНачисления.ТекущиеДанные.ВидРасчета, мВидРасчетаИзменился) 
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	мВидРасчетаИзменился = Элемент.Родитель.ТекущиеДанные.ВидРасчета <> ВыбранноеЗначение; 
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеНачисленияВидРасчетаПриИзмененииПереопред(Элемент, ВидНачисления, ИзменятьЗначение = Истина)
	
	Если ЗначениеЗаполнено(ВидНачисления) Тогда
		Показатели = ПолучитьЗначенияПоказателей(ВидНачисления);
		
		Для ТекПараметр = 1 По 3 Цикл
			
			Если ИзменятьЗначение Тогда
				ЗначениеПоУмолчанию = Показатели["Показатель" + ТекПараметр];
				Если ТипЗнч(Элементы.ОсновныеНачисления.ТекущиеДанные["Показатель"+ТекПараметр]) <> ТипЗнч(ЗначениеПоУмолчанию) Тогда
					Элементы.ОсновныеНачисления.ТекущиеДанные["Показатель"+ТекПараметр] = ЗначениеПоУмолчанию;
				КонецЕсли;
			КонецЕсли;		
			
			Если Показатели["Показатель" + ТекПараметр] = Неопределено Тогда
				Элементы["ОсновныеНачисленияПоказатель"+ ТекПараметр].Доступность = Ложь;
			Иначе
				Элементы["ОсновныеНачисленияПоказатель"+ ТекПараметр].Доступность = Истина;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьСведениямиПоСотрудникам(Команда)
	Если Объект.ОсновныеНачисления.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Объект.ОсновныеНачисления.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьСведениямиПоСотрудникамСервер();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведениямиПоСотрудникамСервер()
	
	РаботникиНаФорме = РаботникиОрганизации.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОНачисленияхСотрудников.Период КАК Период,
	               |	СведенияОНачисленияхСотрудников.Сотрудник КАК Сотрудник,
	               |	СведенияОНачисленияхСотрудников.Начисление КАК ВидРасчета,
	               |	СведенияОНачисленияхСотрудников.Действие КАК Действие,
	               |	СведенияОНачисленияхСотрудников.Параметр1 КАК Показатель1,
	               |	СведенияОНачисленияхСотрудников.Параметр2 КАК Показатель2,
	               |	СведенияОНачисленияхСотрудников.Параметр3 КАК Показатель3,
	               |	ПрекращенныеНачисления.Период КАК ПериодПрекращения,
	               |	ВЫБОР
	               |		КОГДА СведенияОНачисленияхСотрудников.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ СведенияОНачисленияхСотрудников.Сотрудник.ЭтоГруппа
	               |	КОНЕЦ КАК СотрудникЭтоГруппа,
	               |	СведенияОНачисленияхСотрудников.ТрудоваяРоль КАК ТрудоваяРоль
	               |ИЗ
	               |	РегистрСведений.СведенияОНачисленияхСотрудников КАК СведенияОНачисленияхСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СведенияОНачисленияхСотрудников.Период КАК Период,
	               |			СведенияОНачисленияхСотрудников.Сотрудник КАК Сотрудник,
	               |			СведенияОНачисленияхСотрудников.Начисление КАК Начисление,
	               |			СведенияОНачисленияхСотрудников.ТрудоваяРоль КАК ТрудоваяРоль
	               |		ИЗ
	               |			РегистрСведений.СведенияОНачисленияхСотрудников КАК СведенияОНачисленияхСотрудников
	               |		ГДЕ
	               |			СведенияОНачисленияхСотрудников.Действие = &Прекратить) КАК ПрекращенныеНачисления
	               |		ПО СведенияОНачисленияхСотрудников.Сотрудник = ПрекращенныеНачисления.Сотрудник
	               |			И СведенияОНачисленияхСотрудников.Начисление = ПрекращенныеНачисления.Начисление
	               |			И СведенияОНачисленияхСотрудников.Период < ПрекращенныеНачисления.Период
	               |			И СведенияОНачисленияхСотрудников.ТрудоваяРоль = ПрекращенныеНачисления.ТрудоваяРоль
	               |ГДЕ
	               |	СведенияОНачисленияхСотрудников.Действие <> &Прекратить
	               |	И СведенияОНачисленияхСотрудников.Сотрудник В(&МассивСотрудников)
	               |	И (ПрекращенныеНачисления.Период ЕСТЬ NULL 
	               |			ИЛИ ПрекращенныеНачисления.Период > &Дата)
	               |	И СведенияОНачисленияхСотрудников.Период <= &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ВидРасчета";
				   
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Прекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("МассивСотрудников", РаботникиНаФорме);
	
	Начисления = Запрос.Выполнить().Выгрузить();
	
	ТабВидыРасчета = Начисления.Скопировать(,"ВидРасчета, Сотрудник");
	ТабВидыРасчета.Свернуть("ВидРасчета, Сотрудник","");
	
	ТаблицаДляПереноса = Объект.ОсновныеНачисления.Выгрузить().СкопироватьКолонки();
	ТаблицаДляПереноса.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаВидРасчета Из ТабВидыРасчета Цикл
		
		СтрокаПоискаПовторного = "Сотрудник, ВидРасчета, ТрудоваяРоль";
		Если СтрокаВидРасчета.ВидРасчета.ВидПараметра1 <> Перечисления.ВидыПараметровРасчетаНачислений.Число Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаПоискаПовторного,"Показатель1");
		КонецЕсли;
		Если СтрокаВидРасчета.ВидРасчета.ВидПараметра2 <> Перечисления.ВидыПараметровРасчетаНачислений.Число Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаПоискаПовторного,"Показатель2");
		КонецЕсли;
		Если СтрокаВидРасчета.ВидРасчета.ВидПараметра3 <> Перечисления.ВидыПараметровРасчетаНачислений.Число Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаПоискаПовторного,"Показатель3");
		КонецЕсли;
		
		мсСтр = Начисления.НайтиСтроки(Новый Структура("ВидРасчета, Сотрудник", СтрокаВидРасчета.ВидРасчета, СтрокаВидРасчета.Сотрудник));
		
		ПослСтрока = мсСтр[0];
		ОтборВР = Новый Структура(СтрокаПоискаПовторного);
		Для Каждого СтрТаб Из мсСтр Цикл
			ЗаполнитьЗначенияСвойств(ОтборВР, СтрТаб,СтрокаПоискаПовторного);
			
			мсСтрВР = ТаблицаДляПереноса.НайтиСтроки(ОтборВР);
			
			Если мсСтрВР.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДляПереноса.Добавить(), СтрТаб);
			ИначеЕсли мсСтрВР[0].Период < СтрТаб.Период Тогда
				ЗаполнитьЗначенияСвойств(мсСтрВР[0], СтрТаб);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаДляПереноса Из ТаблицаДляПереноса Цикл
		СтрокаНачисления = Объект.ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаДляПереноса);
		СтрокаНачисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбщимиСведениямиПоТрудовымРолям(Команда)
	
	ЗаполнитьОбщимиСведениямиПоТрудовымРолямСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбщимиСведениямиПоТрудовымРолямСервер()
	
	мОбрИнд = Объект.ОсновныеНачисления.Количество()-1;
	Для сч = 0 По мОбрИнд Цикл
		
		СтрокаТЗ = Объект.ОсновныеНачисления[мОбрИнд-сч];
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Сотрудник)
			И ЗначениеЗаполнено(СтрокаТЗ.ТрудоваяРоль)
		Тогда
			Объект.ОсновныеНачисления.Удалить(мОбрИнд-сч);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОНачисленияхСотрудниковСрезПоследних.Начисление КАК ВидРасчета,
	               |	СведенияОНачисленияхСотрудниковСрезПоследних.Параметр1 КАК Показатель1,
	               |	СведенияОНачисленияхСотрудниковСрезПоследних.Параметр2 КАК Показатель2,
	               |	СведенияОНачисленияхСотрудниковСрезПоследних.Параметр3 КАК Показатель3,
	               |	СведенияОНачисленияхСотрудниковСрезПоследних.ТрудоваяРоль,
	               |	СведенияОНачисленияхСотрудниковСрезПоследних.Действие
	               |ИЗ
	               |	РегистрСведений.СведенияОНачисленияхСотрудников.СрезПоследних(
	               |			&Дата,
	               |			Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |				И Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК СведенияОНачисленияхСотрудниковСрезПоследних";
				   
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ЗаполнитьЗначенияСвойств(Объект.ОсновныеНачисления.Добавить(),Выборка);		
	
	КонецЦикла;	
КонецПроцедуры
