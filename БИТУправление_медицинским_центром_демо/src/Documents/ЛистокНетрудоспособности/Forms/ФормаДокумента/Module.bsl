#Область РазделОписанияПеременных

&НаКлиенте
Перем мЗаписьПриПолученииНомераЭЛН;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);
	
	КодыПричинНетрудоспособностиСРодственником.ЗагрузитьЗначения(Справочники.ПричиныНетрудоспособности.КодыПричинНетрудоспособностиСРодственником());
	
	// Заполняем возраст	
	Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		ВозрастПациента = ОбщегоНазначенияКлиентСервер.ПолучитьВозрастСтрокой(Объект.ДатаРождения, Объект.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Номер = "";
	КонецЕсли;
	
	// Заполняем реквизит медицинская карта
	Если ЗначениеЗаполнено(Параметры.МедицинскаяКарта) 
					И Не ЗначениеЗаполнено(Объект.МедицинскаяКарта) Тогда
		Объект.МедицинскаяКарта = Параметры.МедицинскаяКарта;
	КонецЕсли;
	
	ВсеКромеРаботыТолькоПросмотр = Ложь;
	РаботаТолькоПросмотр = Ложь;
	Если ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		Объект.ДокументОснование = Параметры.Основание;
		
		Если Параметры.Продолжение Тогда
			Если Параметры.Основание.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.ДругогоЛПУ Тогда
				Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.ПродолжениеДругогоЛПУ;
			Иначе
				Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Продолжение;
			КонецЕсли;
		КонецЕсли;
		
		Если (Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.ПродолжениеДругогоЛПУ Или Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Продолжение)
			И Не Параметры.НаМестоРаботыПоСовместительству
		Тогда
			ЗависимыйЛН = Параметры.Основание.ПолучитьОбъект().ЗависимыйЛН(Истина);
			Если ЗависимыйЛН <> Документы.ЛистокНетрудоспособности.ПустаяСсылка() Тогда
				ТекстСообщения = НСтр("ru='На основании этого листка уже создан листок продолжение « "
					+ЗависимыйЛН+" ». Он может быть только один.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;	
			КонецЕсли;
			
			Если Параметры.Основание.МестоРаботыВидЗанятости = 1 Тогда
				ТекстСообщения = НСтр("ru='Листок нетрудоспособности - продолжение нельзя создать на основании листка нетрудоспособности по месту работы по совместительству.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Объект, Параметры.Основание,
				 "МедицинскаяКарта, Фамилия, Имя, Отчество, Пол, СНИЛС, ДатаРождения, " +
				 "МестоРаботы, МестоРаботыВидЗанятости, НаУчетеВОрганахЗанятости ",
				 "ДокументОснование"
			);
			Объект.ПервичныйЛисток = ?(Параметры.Продолжение, Параметры.Основание, 0);
			Объект.Первичный = Ложь;
			Объект.СтатусНетрудоспособного = Справочники.СтатусыНетрудоспособного.ПустаяСсылка();
			Объект.ДатаУстановленияСтатуса = Дата(1,1,1);
			Объект.СледующийЛН = ""; 
			РаботаТолькоПросмотр = Истина;
		
		ИначеЕсли Параметры.НаМестоРаботыПоСовместительству Тогда
			
			Если Параметры.Основание.НаУчетеВОрганахЗанятости Тогда
				ТекстСообщения = НСтр("ru='В ЛН указано, что нетрудоспособный состоит на учете в органах занятости, поэтому нельзя создать ЛН для места работы по совместительству.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
			
			Если Не Параметры.Основание.МестоРаботыВидЗанятости = 2 Тогда
				ТекстСообщения = НСтр("ru='Создать ЛН для места работы по совместительству можно только на основании ЛН выданного для основного места работы.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(Объект, Параметры.Основание, ,
				"ДанныеПоУходуЗаРодственниками, ЭлектронныеПодписиОбменаФСС, МестоРаботы, МестоРаботыВидЗанятости, " +
				"ДокументОснование, Номер, Дата"
			);
			Объект.МестоРаботы = "";
			Объект.МестоРаботыВидЗанятости = 1;
			Объект.ПервичныйЛисток = Параметры.Основание;
			ВсеКромеРаботыТолькоПросмотр = Истина;
			
		ИначеЕсли Параметры.Дубликат Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.Основание, , 
				"Дубликат, " +
				"ДокументОснование, Номер, Дата, Статус, " +
				"Запись2ДатаНачала, Запись2ДатаОкончания, Запись2Врач, Запись2ПредседательВК, " +
				"Запись3ДатаНачала, Запись3ДатаОкончания, Запись3Врач, Запись3ПредседательВК "
			);
			Объект.Дубликат = Истина;
			Объект.ПервичныйЛисток = Параметры.Основание;
			ДатаКонца1 = Параметры.Основание.Запись1ДатаОкончания;
			ДатаКонца2 = Параметры.Основание.Запись2ДатаОкончания;
			ДатаКонца3 = Параметры.Основание.Запись3ДатаОкончания;
			Объект.Запись1ДатаОкончания = Макс(ДатаКонца1, ДатаКонца2, ДатаКонца3);
		КонецЕсли;
		
		// Заполняем первичный листок
		Объект.ПервичныйЛисток = ?(ЗначениеЗаполнено(Параметры.Основание.ПервичныйЛисток),
			Параметры.Основание.ПервичныйЛисток,
			Параметры.Основание
		);
		
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		
		// Первоначальное заполнение данных об организации (по филиалу документа)
		Реквизиты = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Объект.Филиал);
		Объект.ЛПУАдрес	 = Реквизиты.Адрес;
		Объект.ЛПУИмя	 = Реквизиты.НазваниеОрганизации;
		Объект.ЛПУОГРН	 = Реквизиты.ОГРН;
		
		// Первоначальное заполнение данных о пациенте
		Если ЗначениеЗаполнено(Объект.Клиент) 
			И ДанныеОКлиентеНеЗаполнены() 
		Тогда
			Если ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(Объект.Клиент.ДатаРождения, Объект.Дата) >= 18 Тогда
				ЗаполнитьЗначенияСвойств(Объект, ДанныеПациента(Объект.Клиент));
			Иначе
				Представители = Справочники.Клиенты.ПолучитьПредставителейКлиента(Объект.Клиент, Объект.Дата);
				Если Представители.Количество() > 0 Тогда	
					Документы.ЛистокНетрудоспособности.ЗаполнитьДанныеКлиентаПоПредставителю(ЭтотОбъект, Представители[0]);		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Объект.РабочийКонтур = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("РабочийРежимОбменаСФСС");
	КонецЕсли; 
	
	Если ВсеКромеРаботыТолькоПросмотр Тогда
		Элементы.НаУчетеВОрганахЗанятости.ТолькоПросмотр = Истина;
		Элементы.ПричиныНетрудоспособности.ТолькоПросмотр = Истина;
		Элементы.НарушениеРежима.ТолькоПросмотр = Истина;
		Элементы.Санаторий.ТолькоПросмотр = Истина;
		Элементы.ГруппаПродолжение.ТолькоПросмотр = Истина;
		Элементы.СтраницаДанныеУхода.ТолькоПросмотр = Истина;
		Элементы.Стационар.ТолькоПросмотр = Истина;
		Элементы.МСЭ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	СозданНаОсновании = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	ОснованиеВыданоВДругомЛПУ = СозданНаОсновании И ЗначениеЗаполнено(Объект.ДокументОснование);
	
	Если Параметры.ОтборПоКарте Тогда
		Элементы.МедицинскаяКарта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.МедицинскаяКарта);
	КонецЕсли; 
		
	Если Отказ = Ложь И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СписокСобытий = Новый СписокЗначений();
		Стр = Новый Структура("ИмяСобытия,Данные,ОбъектМетаданных,ПредставлениеУровня,Комментарий",
						"Открытие формы документа ЛистокНетрудоспособности",
						Объект.Ссылка,
						"Документ.ЛистокНетрудоспособности",
						"Информация",
						"");
		СписокСобытий.Добавить(Стр);
		ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СписокСобытий);
	КонецЕсли;
	
	Элементы.ДекорацияТестКонтур.Видимость = Не Объект.РабочийКонтур И СтатусФСС <> "Нет";
	ЗаполнитьСписокВыбораДляПричинНетрудоспособностиПоУходуЗаРодственниками();
	ЗаполнитьСписокВыбораДляСтепениРодства();
	ОтборСертификаторВключен = Не УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ОтключитьКонтрольСертификатовФСС");
	Если Не ЗначениеЗаполнено(Объект.ДиагнозПоМКБ10) Тогда
		Объект.ДиагнозПоМКБ10 = Справочники.Диагнозы.ПустаяСсылка();
	ИначеЕсли ТипЗнч(Объект.ДиагнозПоМКБ10) = Тип("Строка") Тогда
		Элементы.ДиагнозПоМКБ10.ВыбиратьТип = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("СледующийЛН") Тогда
		Если ЗначениеЗаполнено(Объект.СледующийЛН) И Объект.СледующийЛН <> Параметры.СледующийЛН Тогда
			ОбщегоНазначения.СообщитьПользователю("Номер следующего ЛН не совпадает с номером источника!");
		Иначе
			Объект.СледующийЛН = Параметры.СледующийЛН;	
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ФормаОткрытьПредыдущийЛист.Видимость = ?(Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Первичный 
														Или Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.ДругогоЛПУ, Ложь, Истина);
														
	ДополнительныеСвойства = Новый Структура;													
	Если ЭтоНовый И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)Тогда
		ДополнительныеСвойства.Вставить("Модифицированность", Истина);	
	КонецЕсли;
														
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.ЭлектронныйБольничный = Истина;
		ЭлектронныйБольничныйПриИзменении("");
		
	КонецЕсли;
	Элементы.ЭлектронныйБольничный.Видимость = Не Объект.ЭлектронныйБольничный;
		
	Элементы.Запись1ВрачДолжность.Доступность = ЗначениеЗаполнено(Объект.Запись1ВрачДолжность);
	Элементы.Запись2ВрачДолжность.Доступность = ЗначениеЗаполнено(Объект.Запись2ВрачДолжность);
	Элементы.Запись3ВрачДолжность.Доступность = ЗначениеЗаполнено(Объект.Запись3ВрачДолжность);
	
	ОбновитьДоступностьКнопокПодписей();
	
	ЭтаФорма.Заголовок = ЗаголовокФормы();
	
	НастроитьВидимостьДоступностьПоСтатусуЛистка();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И Не ЗначениеЗаполнено(Объект.ЛистокОсновногоМестаРаботы)
	Тогда
		Объект.ЛистокОсновногоМестаРаботы = ПолучитьЛистокОсновногоМестаРаботы(Объект.ДокументОснование);
	КонецЕсли;
	
	Элементы.ЛистокОсновногоМестаРаботы.Видимость = ЗначениеЗаполнено(Объект.ЛистокОсновногоМестаРаботы);
	
	// Обмен с ФСС
	УстановитьДоступностьПолейЭлектронный();
	ПричинаНетрудоспособностиПриИзменении(Неопределено);
	НастроитьВидимостьДоступностьПоВидуЛистка();
	ОбновитьСтатусФСС(); 
	
	Если Объект.ЭлектронныйБольничный Тогда
		ЭлектронныйНомер = Объект.Номер;	
	КонецЕсли; 
	
	// Обмен с ФСС: подписи
	ОбновитьДоступностьКнопокПодписей();
	УстановитьДоступностьПолейПоПодписям();
	Элементы.СНИЛС.Маска = МедицинскоеСтрахованиеКлиентСервер.МаскаСНИЛС();
	
	// Санатории
	Если Не ЗначениеЗаполнено(Объект.Санаторий) Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
		Объект.Санаторий = ?(ТипЗнч(Объект.Санаторий) = Тип("Строка"),Объект.Санаторий = ОписаниеТипов.ПривестиЗначение(Объект.Санаторий),Объект.Санаторий);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Модифицированность") Тогда
		Модифицированность = Истина;
		ДополнительныеСвойства = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ФЛК_ПередЗаписью(Отказ, ПараметрыЗаписи);
	
	Если Не Отказ И мЗаписьПриПолученииНомераЭЛН = Истина Тогда
		ПодключитьОбработчикОжидания("ПослеПопыткиЗаписиПриПолученииНомераЭЛН",0.1, Истина);
		мЗаписьПриПолученииНомераЭЛН = Ложь;
	КонецЕсли;
	
	ДополнительныеСвойства = Новый Структура;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Заполнение номера, если он пустой
	Если ТекущийОбъект.Номер = 0 И Не ТекущийОбъект.ПометкаУдаления Тогда
		Номер = ПолучитьТекущийНомерЭЛНИзПула(ТекущийОбъект.ЛПУОГРН, ТекущийОбъект.РабочийКонтур);	
		Если Номер <> Неопределено Тогда
			ТекущийОбъект.Номер = Номер;
			ЭлектронныйНомер = Номер;
			ДополнительныеСвойства.Вставить("НомерПрисвоенПриЗаписи");
		Иначе
			ОбщегоНазначения.СообщитьПользователю("В пуле закончились номера, воспользуйтесь кнопкой ручного присвоения номера, для получения нового номера!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка занятости номера в другом листке
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистокНетрудоспособности.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
	|ГДЕ
	|	ЛистокНетрудоспособности.Номер = &Номер
	|	И НЕ ЛистокНетрудоспособности.ПометкаУдаления
	|	И (НЕ ЛистокНетрудоспособности.Ссылка = &Ссылка
	|			ИЛИ &Ссылка = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("Номер", ТекущийОбъект.Номер);
	Запрос.УстановитьПараметр("Ссылка", ?(ЗначениеЗаполнено(ТекущийОбъект.Ссылка), ТекущийОбъект.Ссылка, Неопределено));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Номер " + ТекущийОбъект.Номер + " использован в другом листке! Получите новый номер.");
	КонецЕсли;
	
	// Проверки использования номера в друкгих листах в качестве предыдущего и следующего 
	ПроверитьНомерНаИспользованиеВПолеСледующийЛН(Строка(Формат(ТекущийОбъект.Номер, "ЧДЦ=0; ЧГ=0")), ТекущийОбъект.СНИЛС, ТекущийОбъект.ВидЛистка, Отказ);
	
	Если ЗначениеЗаполнено(ТекущийОбъект.СледующийЛН) Тогда
		ПроверитьНомерСледующегоЛН(Число(СокрЛП(ТекущийОбъект.СледующийЛН)), ТекущийОбъект.СНИЛС, Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Ложь, ЭтаФорма);
	
	Если Модифицированность И Объект.ЭлектронныйБольничный Тогда
		Запись = РегистрыСведений.СтатусыОбменаФСС.СоздатьМенеджерЗаписи();
		Запись.Объект = Объект.Ссылка;
		Запись.Прочитать();
		Запись.Объект = Объект.Ссылка;
		Если Не ЗначениеЗаполнено(Запись.СтатусФСС) Тогда
			Запись.Статус = Перечисления.СтатусыФСС.Черновик;
		Иначе
			Запись.Статус = Перечисления.СтатусыФСС.Редактируется;	
		КонецЕсли; 
		Запись.Записать();	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтаФорма.Заголовок = ЗаголовокФормы();
	
	Оповестить("ЛистНетрудоспособностиЗапись", Объект.Клиент);
	
	Если ДополнительныеСвойства.Свойство("НомерПрисвоенПриЗаписи")
		И Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.Продолжение")
		И ЗначениеЗаполнено(Объект.ДокументОснование)
	Тогда
		Оповестить("ПолучениеНомераЛистаПродолжения", Новый Структура("НомерСледующего, ДокументОснование", Объект.Номер, Объект.ДокументОснование));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолучениеНомераЛистаПродолжения" Тогда
		Если Параметр.ДокументОснование = Объект.Ссылка 
			И Не ЗначениеЗаполнено(Объект.СледующийЛН)	
		Тогда 
			Объект.СледующийЛН = Строка(Формат(Параметр.НомерСледующего, "ЧГ=0"));
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("Подключаемый_КнопкаФилиалПриНажатииЗавершение", ЭтотОбъект);
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма, , ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатииЗавершение(Результат, ДополнительныеЗначения) Экспорт
	
	Реквизиты = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Объект.Филиал);
	Объект.ЛПУАдрес = Реквизиты.Адрес;
	Объект.ЛПУИмя = Реквизиты.НазваниеОрганизации;
	Объект.ЛПУОГРН = Реквизиты.ОГРН;
	Объект.Номер = Неопределено;
	ПолучитьНомерЭЛН(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьОсновныеДанные(Команда)
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		ДанныеПациента = ДанныеПациента(Объект.Клиент);
	Иначе
		ДанныеПациента = Новый Структура("Фамилия, Имя, Отчество, Пол, СНИЛС, ДатаРождения, МестоРаботы");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеПациента);	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзРодственников(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке("Не выбран клиент!");
		Возврат;
	КонецЕсли;
	
	СписокРодственников = ДобавитьИзРодственниковНаСервере(Объект.Клиент);
	Если СписокРодственников.Количество() <> 0 Тогда
		РезультатВыбора = СписокРодственников.ВыбратьЭлемент("Выбрать родственника");	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке("Не имеется родственных связей!");
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора <> Неопределено Тогда
		Родственник =  ПолучитьДанныеРодственника(РезультатВыбора.Значение, Объект.Клиент);
		НоваяСтрока = Объект.ДанныеПоУходуЗаРодственниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Родственник);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредставителюКлиента(Команда)
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		ОткрытьФорму("Справочник.Клиенты.Форма.ВыборСовершеннолетнегоПредставителя", Новый Структура("Клиент, Дата",Объект.Клиент, Объект.Дата),
						ЭтотОбъект,,,,Новый ОписаниеОповещения("ВыборПредставителя_Завершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
	
КонецПроцедуры

// Обмен с ФСС
&НаКлиенте
Процедура АннулироватьЭЛН(Команда)
	
	Если ПроверкаКонтураРаботы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Необходимо записать документ.'", "ru"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Действие, Документ","АннулироватьЭЛН",Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыОбменаФСС",ЭтаФорма, "АннулироватьЭЛН");
	ОткрытьФорму("Документ.ЛистокНетрудоспособности.Форма.ОбменСФСС",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭЛН(Команда)
	
	Если ПроверкаКонтураРаботы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Необходимо записать документ.'", "ru"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Действие, Документ","ОбновитьЭЛН",Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыОбменаФСС",ЭтаФорма, "ОбновитьЭЛН");
	ОткрытьФорму("Документ.ЛистокНетрудоспособности.Форма.ОбменСФСС",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВФСС(Команда)
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Необходимо записать документ.'", "ru"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Номер = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Необходимо получить номер.'", "ru"));
		Возврат;
	КонецЕсли;
	
	Если ПроверкаКонтураРаботы() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Действие, Документ, СНИЛС","ОтправитьЭЛН",Объект.Ссылка,Объект.СНИЛС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыОбменаФСС",ЭтаФорма,"ОтправитьЭЛН");
	ОткрытьФорму("Документ.ЛистокНетрудоспособности.Форма.ОбменСФСС",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНомерЭЛН(Команда)
	
	Если ЗначениеЗаполнено(Объект.Номер) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбПолученииНомера",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,нСтр("ru='Номер уже заполнен! Уверены что хотите получить новый?'", "ru"),РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьНомерДокумента();	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВнешнихЗакрытыхЛистов(Команда)
	ПраметрыФормы = Новый Структура("ДокументЛН", Объект.Ссылка);	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораВнешнегоЛН", ЭтаФорма);
	ОткрытьФорму("Документ.ЛистокНетрудоспособности.Форма.ВыборВнешнихЗакрытыхЛН",ПраметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСтроку(Команда)
		
	ИмяСтроки = Прав(ТекущийЭлемент.Имя, СтрДлина(ТекущийЭлемент.Имя)-1);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьДокументПродолжение",
		ЭтотОбъект, Новый Структура("Строка", ИмяСтроки));
	
	РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма, Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредыдущийЛист(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЛистокНетрудоспособности") Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, СледующийЛН", Объект.ДокументОснование, Строка(Формат(Объект.Номер, "ЧДЦ=0; ЧГ=0")));
		ОткрытьФорму("Документ.ЛистокНетрудоспособности.Форма.ФормаДокумента", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	ВозрастПациента = ОбщегоНазначенияКлиентСервер.ПолучитьВозрастСтрокой(Объект.ДатаРождения, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ОбщегоНазначенияКлиент.ДатаСеанса()));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЭтаФорма.Заголовок = ЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВидЛисткаПриИзменении(Элемент)
	
	НастроитьВидимостьДоступностьПоВидуЛистка();
	
	Если Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.Первичный") Тогда
		Объект.ДокументОснование = Неопределено;
		Объект.Первичный = Истина;
	Иначе
		Объект.Первичный = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЛистковНетрудоспособности.Закрыт") Тогда 
		Объект.ДатаЗакрытия = Дата(1,1,1);
	КонецЕсли;
	НастроитьВидимостьДоступностьПоСтатусуЛистка();
	
КонецПроцедуры

&НаКлиенте
Процедура ДубликатПриИзменении(Элемент)
	Элементы.ВзаменРанееВаданного.Видимость = Объект.Дубликат;
КонецПроцедуры

&НаКлиенте
Процедура ВзаменРанееВаданногоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВзаменРанееВаданногоНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЛистокНетрудоспособности.ФормаВыбора",, ЭтотОбъект,,,,ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ВзаменРанееВаданногоНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ВзаменРанееВыданного = Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "Номер"), "ЧГ=0");
	КонецЕсли;
КонецПроцедуры

#Область ГруппаМестоРаботы

&НаКлиенте
Процедура НаУчетеВОрганахЗанятостиПриИзменении(Элемент)
	
	Если Объект.НаУчетеВОрганахЗанятости Тогда
		
		Объект.МестоРаботы = "";
		Объект.МестоРаботыВидЗанятости = 0;
		
		Элементы.МестоРаботы.Доступность = Ложь;
		Элементы.ПризнакМестаРаботы.Доступность = Ложь;
		
	ИначеЕсли Объект.МестоРаботыВидЗанятости <> 1 Тогда
		Объект.МестоРаботыВидЗанятости = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРаботыПриИзменении(Элемент)
	Если СтрДлина(Объект.МестоРаботы) > 29 Тогда
		Объект.МестоРаботы = РаботаСЛисткомНетрудоспособностиКлиент.ПолучитьСтрокуБезСпецСимволов(Объект.МестоРаботы);
	КонецЕсли; 
	РаботаСЛисткомНетрудоспособностиКлиент.КоличествоСимволовБольшеЧемВБланке(
		Элемент, Объект.МестоРаботы, 29
	);
КонецПроцедуры

&НаКлиенте
Процедура МестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораКонтрагента",ЭтаФорма);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ,,,,,ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораКонтрагента(Результат, Параметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ПолноеНаименованиеРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат,"НаименованиеПолное");
		Если ЗначениеЗаполнено(ПолноеНаименованиеРаботы) Тогда
			Объект.МестоРаботы = ПолноеНаименованиеРаботы;
		Иначе
			Объект.МестоРаботы = Результат;	
		КонецЕсли; 
	КонецЕсли; 		
КонецПроцедуры

&НаКлиенте
Процедура ПризнакМестаРаботыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.МестоРаботыВидЗанятости = 1 Тогда
		Объект.ЛистокОсновногоМестаРаботы = ПолучитьЛистокОсновногоМестаРаботы(Объект.ДокументОснование);
		Если ЗначениеЗаполнено(Объект.ЛистокОсновногоМестаРаботы) Тогда
			Элементы.ЛистокОсновногоМестаРаботы.Видимость = Истина;
		Иначе
			Элементы.ЛистокОсновногоМестаРаботы.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Объект.ЛистокОсновногоМестаРаботы = ПредопределенноеЗначение("Документ.ЛистокНетрудоспособности.ПустаяСсылка");
		Элементы.ЛистокОсновногоМестаРаботы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписиПериодов

&НаКлиенте
Процедура Запись1ДатаНачалаПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.Запись1ДатаНачала, Объект.Запись1ДатаОкончания);
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись1ДатаОкончанияПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.Запись1ДатаНачала, Объект.Запись1ДатаОкончания);
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись1ВрачПриИзменении(Элемент)
	
	Врач = Объект.Запись1Врач;
	Если ЗначениеЗаполнено(Врач) Тогда
		Элементы.Запись1ВрачДолжность.Доступность = Истина;
		Если ТипЗнч(Врач) = Тип("СправочникСсылка.Сотрудники") Тогда
			Объект.Запись1ВрачДолжность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Врач,"Должность"));	
		КонецЕсли; 
	Иначе
		Элементы.Запись1ВрачДолжность.Доступность = Ложь;
	КонецЕсли; 
	
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись2ДатаНачалаПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.Запись2ДатаНачала, Объект.Запись2ДатаОкончания);
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись2ДатаОкончанияПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.Запись2ДатаНачала, Объект.Запись2ДатаОкончания);
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись2ВрачПриИзменении(Элемент)
	
	Врач = Объект.Запись2Врач;
	Если ЗначениеЗаполнено(Врач) Тогда
		Элементы.Запись2ВрачДолжность.Доступность = Истина;
		Если ТипЗнч(Врач) = Тип("СправочникСсылка.Сотрудники") Тогда
			Объект.Запись2ВрачДолжность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Врач,"Должность"));	
		КонецЕсли; 
	Иначе
		Элементы.Запись2ВрачДолжность.Доступность = Ложь;
	КонецЕсли; 
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись3ДатаНачалаПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.Запись3ДатаНачала, Объект.Запись3ДатаОкончания);
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись3ДатаОкончанияПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.Запись3ДатаНачала, Объект.Запись3ДатаОкончания);
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

#КонецОбласти

#Область Стационар

&НаКлиенте
Процедура СтационарДатаНачалаПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.СтационарДатаНачала, Объект.СтационарДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура СтационарДатаОкончанияПриИзменении(Элемент)
	ПроверкаЗаписейДатНетрудоспособностей(Объект.СтационарДатаНачала, Объект.СтационарДатаОкончания);
КонецПроцедуры

#КонецОбласти

#Область Клиент

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ПеречитатьОсновныеДанные(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЭлектронныйБольничныйПриИзменении(Элемент)
	
	УстановитьДоступностьПолейЭлектронный();
	
	Объект.Номер = Неопределено;
	Если Объект.ЭлектронныйБольничный И Не ЗначениеЗаполнено(Объект.Номер) Тогда
		Если ЗначениеЗаполнено(ЭлектронныйНомер) Тогда
			Объект.Номер = ЭлектронныйНомер;
		КонецЕсли; 		
	КонецЕсли; 
	
	ОбновитьДоступностьКнопокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиПриИзменении(Элемент)
	Элементы.СтраницаДанныеУхода.Видимость = Строка(Объект.ПричинаНетрудоспособности) = "09 - Уход за больным членом семьи";
КонецПроцедуры

&НаКлиенте
Процедура СтатусФССНажатие(Элемент, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;	
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	СтруктураЗаписи = Новый Структура("Объект", Объект.Ссылка);
	МассивСтруктураЗаписи = Новый Массив;
	МассивСтруктураЗаписи.Добавить(СтруктураЗаписи);
	КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.СтатусыОбменаФСС", МассивСтруктураЗаписи);
	                              
	Параметрыформы = Новый Структура("Ключ", КлючЗаписи);
	ОткрытьФорму("РегистрСведений.СтатусыОбменаФСС.Форма.ФормаЗаписи",Параметрыформы,ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Запись3ВрачПриИзменении(Элемент)
	
	Врач = Объект.Запись3Врач;	
	Если ЗначениеЗаполнено(Врач) Тогда
		Элементы.Запись3ВрачДолжность.Доступность = Истина;
		Если ТипЗнч(Врач) = Тип("СправочникСсылка.Сотрудники") Тогда
			Объект.Запись3ВрачДолжность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Врач,"Должность"));	
		КонецЕсли; 
	Иначе
		Элементы.Запись3ВрачДолжность.Доступность = Ложь;
	КонецЕсли;
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись1ПредседательВКПриИзменении(Элемент)
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись2ПредседательВКПриИзменении(Элемент)
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись3ПредседательВКПриИзменении(Элемент)
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура СтационарНарушениеРежимаПриИзменении(Элемент)
	Элементы.ПНарушение.Доступность = ЗначениеЗаполнено(Объект.НарушениеРежима) И ЗначениеЗаполнено(Объект.ДатаНарушенияРежима); 
КонецПроцедуры

&НаКлиенте
Процедура СтационарДатаНарушенияРежимаПриИзменении(Элемент)
	Элементы.ПНарушение.Доступность = ЗначениеЗаполнено(Объект.НарушениеРежима) И ЗначениеЗаполнено(Объект.ДатаНарушенияРежима);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРаботыПриИзменении(Элемент)
	Элементы.ПЗакрытие.Доступность = ЗначениеЗаполнено(Объект.СтатусНетрудоспособного) 
									Или ЗначениеЗаполнено(Объект.ДатаНачалаРаботы);
КонецПроцедуры

&НаКлиенте
Процедура СтатусНетрудоспособногоПриИзменении(Элемент)
	Элементы.ПЗакрытие.Доступность = ЗначениеЗаполнено(Объект.СтатусНетрудоспособного)
									Или ЗначениеЗаполнено(Объект.ДатаНачалаРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ДатаУстановленияСтатусаПриИзменении(Элемент)
	Элементы.ПЗакрытие.Доступность = ЗначениеЗаполнено(Объект.СтатусНетрудоспособного)
									Или ЗначениеЗаполнено(Объект.ДатаНачалаРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоУходуЗаРодственникамиПередНачаломИзменения(Элемент, Отказ)
	Индекс = Объект.ДанныеПоУходуЗаРодственниками.Индекс(Элемент.ТекущиеДанные);
	Отказ = Объект.ДанныеПоУходуЗаРодственниками.Получить(Индекс).СтрокаЗарегистрирована;
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Строка с данными ухода уже отправлена в ФСС и не доступная для изменения!'", "ru"));	
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоУходуЗаРодственникамиПередУдалением(Элемент, Отказ)
	Индекс = Объект.ДанныеПоУходуЗаРодственниками.Индекс(Элемент.ТекущиеДанные);
	Отказ = Объект.ДанныеПоУходуЗаРодственниками.Получить(Индекс).СтрокаЗарегистрирована;
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Строка с данными ухода уже отправлена в ФСС и не доступная для изменения!'", "ru"));	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийЛНПриИзменении(Элемент)
	Объект.Первичный = Не ЗначениеЗаполнено(Объект.ДокументОснование);
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СледующийЛНПриИзменении(Элемент)
	
	Объект.СледующийЛН = СтрЗаменить(Объект.СледующийЛН, " ", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРН_СанаторияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.Санатории.ФормаВыбора",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ОГРН_СанаторияОкончаниеВыбора", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОГРН_СанаторияОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Санаторий = ДопСерверныеФункции.ПолучитьРеквизит(Результат, "ОГРН");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРН_СанаторияПриИзменении(Элемент)
	
	Если СтрДлина(СокрЛП(Объект.Санаторий)) <> 13 И СтрДлина(СокрЛП(Объект.Санаторий)) <> 15 Тогда
		Объект.Санаторий = "";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОГРН должен состоять из 13 или 15 цифр!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ЗаполнитьСписокВыбораДляСтепениРодства()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтепениРодства.Ссылка КАК Ссылка,
		|	СтепениРодства.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СтепениРодства КАК СтепениРодства
		|ГДЕ
		|	НЕ СтепениРодства.КодФСС = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.ДанныеПоУходуЗаРодственникамиСтепеньРодства.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование); 
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокВыбораДляПричинНетрудоспособностиПоУходуЗаРодственниками()
	
	МассивКодов = Справочники.ПричиныНетрудоспособности.КодыПричинНетрудоспособностиСРодственником();
	
	Для Каждого Код ИЗ МассивКодов Цикл
		
		Элемент = Справочники.ПричиныНетрудоспособности.НайтиПоКоду(Код);
		Если Элемент <> Справочники.ПричиныНетрудоспособности.ПустаяСсылка() Тогда
			Элементы.ДанныеПоУходуЗаРодственникамиПричинаНетрудоспособности.СписокВыбора.Добавить(Элемент, Элемент.Наименование);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаЗаписейДатНетрудоспособностей(Дата1, Дата2)
	
	Если ЗначениеЗаполнено(Дата2) И Дата2 < Дата1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата окончания периода нетрудоспособности должна быть больше даты начала.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокФормы()
	
	ЗаголовокТекст = ОбщегоНазначения.ФамилияИнициалыФизЛица(, Объект.Фамилия, Объект.Имя, Объект.Отчество);
	Если ЗначениеЗаполнено(Объект.Номер) Тогда
		ЗаголовокТекст = ЗаголовокТекст + " №" + Объект.Номер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ЗаголовокТекст, Формат(Объект.Дата, "ДФ=dd.MM.yyyy"), " от ");
	КонецЕсли;
	
	ВидЛистка = ?(Объект.ЭлектронныйБольничный, "ЭЛН", "ЛН");
	ЗаголовокТекст = ВидЛистка + " " + ЗаголовокТекст;
	
	Возврат ЗаголовокТекст;
	
КонецФункции

&НаКлиенте
Процедура НастроитьВидимостьДоступностьПоВидуЛистка()
	
	Если Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.Первичный") Тогда 
		Объект.ПервичныйЛисток = Неопределено;
		Элементы.ПредыдущийЛН.Видимость = Ложь;
		Элементы.ОткрытьСписокВнешнихЗакрытыхЛистов.Видимость = Ложь;
	ИначеЕсли Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.Продолжение") Тогда 
		Объект.ПервичныйЛисток = ПредопределенноеЗначение("Документ.ЛистокНетрудоспособности.ПустаяСсылка");
		Элементы.ПредыдущийЛН.Видимость = Истина;
		Элементы.ОткрытьСписокВнешнихЗакрытыхЛистов.Видимость = Истина;
	Иначе
		Объект.ПервичныйЛисток = "";
		Элементы.ПредыдущийЛН.Видимость = Истина;
		Элементы.ОткрытьСписокВнешнихЗакрытыхЛистов.Видимость = Истина;
	КонецЕсли; 
	
	Элементы.ФормаОткрытьПредыдущийЛист.Видимость = ?(Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.Первичный") 
														Или Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.ДругогоЛПУ"), 
														Ложь, Истина);
	
	Элементы.ВзаменРанееВаданного.Видимость = Объект.Дубликат;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДоступностьПоСтатусуЛистка()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛистковНетрудоспособности.Закрыт") И ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда 
		Элементы.ДатаЗакрытия.Доступность = Ложь;
	Иначе 
		Элементы.ДатаЗакрытия.Доступность = Истина;
	КонецЕсли; 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЛистокОсновногоМестаРаботы(ДокументЛН)
	
	Если ЗначениеЗаполнено(ДокументЛН) И ТипЗнч(ДокументЛН) = Тип("Строка") Тогда
		Возврат ПредопределенноеЗначение("Документ.ЛистокНетрудоспособности.ПустаяСсылка"); 
	ИначеЕсли ЗначениеЗаполнено(ДокументЛН.ЛистокОсновногоМестаРаботы) Тогда
		Возврат ДокументЛН.ЛистокОсновногоМестаРаботы;
	ИначеЕсли ДокументЛН.МестоРаботыВидЗанятости = 2 Тогда
		Возврат ДокументЛН;
	ИначеЕсли ЗначениеЗаполнено(ДокументЛН.ДокументОснование) И ДокументЛН.МестоРаботыВидЗанятости = 1 Тогда
		Возврат ПолучитьЛистокОсновногоМестаРаботы(ДокументЛН.ДокументОснование);
	Иначе
		Возврат ПредопределенноеЗначение("Документ.ЛистокНетрудоспособности.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеПациента(Клиент)
	
	Данные = Новый Структура("Фамилия, Имя, Отчество, Пол, СНИЛС, ДатаРождения, МестоРаботы");
	ЗаполнитьЗначенияСвойств(Данные, Клиент);
	МестоРаботы = Клиент.умцМестоРаботы;
	Если ТипЗнч(МестоРаботы) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(МестоРаботы.НаименованиеПолное) Тогда
		Данные.МестоРаботы = МестоРаботы.НаименованиеПолное;	
	Иначе
		Данные.МестоРаботы = МестоРаботы;
	КонецЕсли; 
	
	Возврат Данные;
	
КонецФункции

// Обмен с ФСС
&НаКлиенте
Процедура УстановитьДоступностьПолейЭлектронный()
	Электронный = Объект.ЭлектронныйБольничный;
	Элементы.Статус.Видимость = Не Электронный;
	Элементы.ДатаЗакрытия.Видимость = Не Электронный;
	Элементы.ГруппаФСС.Видимость = Электронный;
	Элементы.СтатусФСС.Видимость = Электронный;
	Элементы.Работа.Видимость = Не Электронный; 
	Элементы.ПолучитьНомерЭЛН.Видимость = Электронный;
	Элементы.Номер.ТолькоПросмотр = Электронный;
	Элементы.СтатусОбмена.Видимость = Электронный;	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьТекущийНомерЭЛНИзПула(ОГРН, РабочийКонтур)
	Возврат РегистрыСведений.ПулыНомеровЭЛН.ПолучитьТекущийНомер(ОГРН, РабочийКонтур);
КонецФункции 
 
&НаКлиенте
Процедура ОбновитьСтатусФСС()
	
	ДанныеОбмена = ПолучитьДанныеОбемена(Объект.Ссылка);
	СтатусФСС = ДанныеОбмена.СтатусФСС;
	Статус = ?(ЗначениеЗаполнено(ДанныеОбмена.Статус),ДанныеОбмена.Статус,ПредопределенноеЗначение("Перечисление.СтатусыФСС.Черновик")); 
	Если Не ЗначениеЗаполнено(СтатусФСС) Тогда
		СтатусФСС = "Нет";
		Элементы.АннулироватьЭЛН.Доступность = Ложь;  
		Элементы.ОбновитьЭЛН.Доступность = Ложь;
	Иначе
		ЗаблокироватьПоляПослеОбмена();
	КонецЕсли;
	
	Элементы.ДекорацияТестКонтур.Видимость = Не Объект.РабочийКонтур И СтатусФСС <> "Нет";
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьДанныеОбемена(Ссылка)
	Возврат РегистрыСведений.СтатусыОбменаФСС.Получить(Новый Структура("Объект",Ссылка));	
КонецФункции

&НаКлиенте
Процедура ЗаблокироватьПоляПослеОбмена()
	
	Если ЗначениеЗаполнено(СтатусФСС) И ТипЗнч(СтатусФСС) = Тип("ПеречислениеСсылка.СтатусыФСС") Тогда
	
		Элементы.ПолучитьНомерЭЛН.Доступность = Ложь;
		Элементы.ПеречитатьОсновныеДанные.Доступность = Ложь;
		Элементы.ОткрытьСписокВнешнихЗакрытыхЛистов.Доступность = Ложь;
	
		Если СтатусФСС = ПредопределенноеЗначение("Перечисление.СтатусыФСС.ЭЛНЗакрыт")
			Или СтатусФСС = ПредопределенноеЗначение("Перечисление.СтатусыФСС.ДействияПрекращены")
		Тогда
			Элементы.ГруппаТело.ТолькоПросмотр = Истина;
			// Команды обмена с ФСС
			Элементы.ОтправитьВФСС.Доступность = Ложь;
			//Элементы.ОбновитьЭЛН.Доступность = Ложь;
			Элементы.АннулироватьЭЛН.Доступность = (СтатусФСС <> ПредопределенноеЗначение("Перечисление.СтатусыФСС.ДействияПрекращены")); // Уже аннулированный нельзя аннулировать.
			
			УстановитьДоступностьКнопокПодписей(Ложь);	
		Иначе // Остальные статусы ЭЛН, уже отправленного в ФСС.
			Элементы.ГруппаЛПУ.ТолькоПросмотр = Истина;
			Элементы.ГруппаДанныеКлиента.ТолькоПросмотр = Истина;
			Элементы.ГруппаВидЛистка.Доступность = Ложь; 
			Элементы.ГруппаПервичныйДубликат.Доступность = Ложь;
			Элементы.ВзаменРанееВаданного.Доступность = Ложь;
			Элементы.ГруппаКлиент.Доступность = Ложь;  
			Элементы.МедицинскаяКарта.Доступность = Ложь;
			Элементы.ДиагнозПоМКБ10.Доступность = Истина;
			Элементы.ЭлектронныйБольничный.Доступность = Ложь;
			Элементы.ГруппаДатаНомер.Доступность = Ложь;
	     	Элементы.ПричинаНетрудоспособности.Доступность  = Ложь;
			ПричинаНетрудоспособностиПриИзменении(Неопределено);
			Элементы.АннулироватьЭЛН.Доступность = Истина;
			Элементы.ОбновитьЭЛН.Доступность = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если СтатусФСС <> "Нет" Тогда
		ЭлементФормы = Элементы.Найти("КнопкаФилиал");
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы["Доступность"] = Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокПодписей(ДоступЕсть)
	Элементы.ПЗакрытие.Доступность = ДоступЕсть;
	Элементы.УЗакрытие.Доступность = Истина;
	
	Элементы.ПНарушение.Доступность = ДоступЕсть;
	Элементы.УНарушение.Доступность = Истина;
	
	Элементы.ПЗапись1Врач.Доступность = ДоступЕсть;
	Элементы.ПЗапись1Председатель.Доступность = ДоступЕсть;
	Элементы.УЗапись1Врач.Доступность = Истина;
	Элементы.УЗапись1Председатель.Доступность = Истина;
	
	Элементы.ПЗапись2Врач.Доступность = ДоступЕсть;
	Элементы.ПЗапись2Председатель.Доступность = ДоступЕсть;
	Элементы.УЗапись2Врач.Доступность = Истина;
	Элементы.УЗапись2Председатель.Доступность = Истина;
	
	Элементы.ПЗапись3Врач.Доступность = ДоступЕсть;
	Элементы.ПЗапись3Председатель.Доступность = ДоступЕсть;
	Элементы.УЗапись3Врач.Доступность = Истина;
	Элементы.УЗапись3Председатель.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокПодписей(ВидимостьЕсть)
	Элементы.ПЗакрытие.Видимость = ВидимостьЕсть;
	Элементы.УЗакрытие.Видимость = Ложь;
	
	Элементы.ПНарушение.Видимость = ВидимостьЕсть;
	Элементы.УНарушение.Видимость = Ложь;
	
	Элементы.ПЗапись1Врач.Видимость = ВидимостьЕсть;
	Элементы.ПЗапись1Председатель.Видимость = ВидимостьЕсть;
	Элементы.УЗапись1Врач.Видимость = Ложь;
	Элементы.УЗапись1Председатель.Видимость = Ложь;
	
	Элементы.ПЗапись2Врач.Видимость = ВидимостьЕсть;
	Элементы.ПЗапись2Председатель.Видимость = ВидимостьЕсть;
	Элементы.УЗапись2Врач.Видимость = Ложь;
	Элементы.УЗапись2Председатель.Видимость = Ложь;
	
	Элементы.ПЗапись3Врач.Видимость = ВидимостьЕсть;
	Элементы.ПЗапись3Председатель.Видимость = ВидимостьЕсть;
	Элементы.УЗапись3Врач.Видимость = Ложь;
	Элементы.УЗапись3Председатель.Видимость = Ложь;
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияФормыОбменаФСС(Результат, Действие) Экспорт
	
	Если Действие = "ОбновитьЭЛН" Тогда
		Прочитать();
		ОбновитьДоступностьКнопокПодписей();
		УстановитьДоступностьПолейПоПодписям();
		ОбновитьСтатусФСС();
	ИначеЕсли Действие = "ОтправитьЭЛН"
		Или Действие = "АннулироватьЭЛН"
	Тогда 
		Прочитать();
		ОбновитьДоступностьКнопокПодписей();
		ОбновитьСтатусФСС();
	ИначеЕсли Действие = "ПолучитьСписокНомеров" Тогда 	
		ЭлектронныйНомер = ПолучитьТекущийНомерЭЛНИзПула(Объект.ЛПУОГРН, Объект.РабочийКонтур); 
		Объект.Номер = ЭлектронныйНомер;
		Модифицированность = Истина;
		мЗаписьПриПолученииНомераЭЛН = Истина;
		Записать();
	КонецЕсли;
	Если Действие = "ОбновитьЭЛН" 
		Или Действие = "ОтправитьЭЛН"
		Или Действие = "АннулироватьЭЛН"
	Тогда
		Оповестить("ИзменениеЛистка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбПолученииНомера(Результат, Параметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
        ЗаполнитьНомерДокумента(); 	
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораВнешнегоЛН(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СсылкаДокументПредыдущий = ПолучитьЛистокНетрудоспособностиПоНомеру(Результат.Номер);
		
		Если Не ЗначениеЗаполнено(СсылкаДокументПредыдущий) Тогда
			ТекстВопроса = "Выбранный листок нетрудоспособности не загружен в базу, выполнить загрузку?";
			ОповещениеПродолжения = Новый ОписаниеОповещения("ПослеВопросаОНеобходиомстиЗагрузитьЛН", ЭтотОбъект, Результат);
			ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Объект.ДокументОснование = Результат.Номер;
		Иначе
			Объект.ДокументОснование = СсылкаДокументПредыдущий;
		КонецЕсли;
		
		Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.ПродолжениеДругогоЛПУ");
		Объект.Первичный = Ложь;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОНеобходиомстиЗагрузитьЛН(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура("Действие, Номер, СНИЛС","ОбновитьЭЛН",ДопПараметры.Номер, ДопПараметры.СНИЛС);
		ОповещениеПродолжения = Новый ОписаниеОповещения("ПослеЗагрузкиДокумента", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("Документ.ЛистокНетрудоспособности.Форма.ОбменСФСС",ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗагрузкиДокумента(Результат, ДопПараметры) Экспорт
	
	  СсылкаДокументПредыдущий = ПолучитьЛистокНетрудоспособностиПоНомеру(ДопПараметры.Номер);
	  Если ЗначениеЗаполнено(СсылкаДокументПредыдущий) Тогда
		   Объект.ДокументОснование = СсылкаДокументПредыдущий;
	  КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЛистокНетрудоспособностиПоНомеру(Номер)
	
	Возврат Документы.ЛистокНетрудоспособности.НайтиПоНомеру(Номер);
	
КонецФункции

&НаКлиенте
Процедура ПодписатьДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Не Результат Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", Объект.Ссылка);
	ПараметрыОбработчика.Вставить("Строка", Параметры.Строка);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ДоступныеСертификаты = Новый Массив;
	
	ПараметрыПодписи = ОбменФСС.ПараметрыДляПодписанияДокумента(Объект.Ссылка, Параметры.Строка, ДоступныеСертификаты);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("Операция",            "Подписание");
	ОписаниеДанных.Вставить("Данные",         ПараметрыПодписи);
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Данные'"));
	Если ОтборСертификаторВключен Тогда
		Если ДоступныеСертификаты.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Нет доступных сертификатов для подписания");
			Возврат;
		КонецЕсли;
		ОписаниеДанных.Вставить("ОтборСертификатов", ДоступныеСертификаты); 
	КонецЕсли;

	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных,ЭтаФорма,ОбработчикЗавершения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, Параметры) Экспорт
		
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ЗанестиИнформациюОПодписи(Объект.Ссылка, Результат, Параметры.Строка, УникальныйИдентификатор);
		
	Прочитать();
	
	УстановитьВидимостьКнопкиПодписи(Параметры.Строка,Истина,Ложь);
	УстановитьДоступностьПолейПоПодписям();
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗанестиИнформациюОПодписи(Ссылка, Результат, ИмяСтроки, ИндетификаторФормы)
	ПодписанныеДанные = Ссылка;
	
	Если Не Результат.Свойство("СвойстваПодписи") Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Результат.СвойстваПодписи) = Тип("Строка") Тогда
		Попытка
			Результат.СвойстваПодписи = ПолучитьИзВременногоХранилища(Результат.СвойстваПодписи);
		Исключение
			Возврат;
		КонецПопытки;
	ИначеЕсли ТипЗнч(Результат.СвойстваПодписи) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СвойстваПодписи = Результат.СвойстваПодписи;
	ДатаПодписи = СвойстваПодписи.ДатаПодписи;
	
	ПодписиОбъекта = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	ПодписиОбъекта.Отбор.Объект.Установить(ПодписанныеДанные);
	ПодписиОбъекта.Прочитать();
		
	МенеджерЗаписи = ПодписиОбъекта.Добавить();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныеДанные;
	МенеджерЗаписи.ПорядковыйНомер = ПодписиОбъекта.Количество();
	
	МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.Объект = ПодписанныеДанные;
	МенеджерЗаписи.УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Версия = ЭЦП_СерверПереопределяемый.ПолучитьАктуальныйНомерВерсииПодписываемыхДанных(ТипЗнч(ПодписанныеДанные));
	СвойстваПодписи.Свойство("Комментарий",МенеджерЗаписи.Комментарий);
	МенеджерЗаписи.КомуВыданСертификат = СвойстваПодписи.КомуВыданСертификат;
	МенеджерЗаписи.Отпечаток = СвойстваПодписи.Отпечаток;
	МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(СвойстваПодписи.Подпись);
	
	МенеджерЗаписи.ДатаПроверкиПодписи = ДатаПодписи;
	МенеджерЗаписи.ПодписьВерна = Истина;
	МенеджерЗаписи.СертификатДействителен = Истина;
	
	ПодписиОбъекта.Записать();
	
	// Записываем данные в таблицу
	ДокументОбъект = ПодписанныеДанные.ПолучитьОбъект();	
	НоваяСтрокаПодписи = ДокументОбъект.ЭлектронныеПодписиОбменаФСС.Добавить();
	НоваяСтрокаПодписи.ИмяСтроки = ИмяСтроки;
	НоваяСтрокаПодписи.ИдентификаторПодписи = МенеджерЗаписи.УникальныйИдентификатор;
	ДокументОбъект.Записать();
	
	РазблокироватьДанныеДляРедактирования(Ссылка, ИндетификаторФормы);

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УдалитьДанныеПодписи(ИмяСтроки, ДокументСсылка)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	МассивСтрок = ДокументОбъект.ЭлектронныеПодписиОбменаФСС.НайтиСтроки(Новый Структура("ИмяСтроки",ИмяСтроки));
	
	Для Каждого Строка Из МассивСтрок Цикл	
		ДокументОбъект.ЭлектронныеПодписиОбменаФСС.Удалить(Строка);
	КонецЦикла;	
	ДокументОбъект.Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКнопокПодписей()
	
	Если Не Объект.ЭлектронныйБольничный Тогда
		УстановитьВидимостьКнопокПодписей(Ложь);
		Возврат;
	Иначе
		УстановитьВидимостьКнопокПодписей(Истина);	
	КонецЕсли; 
	
	УстановитьДоступностьКнопокПодписей(Ложь);	
	
	Для каждого СтрокаПодписи Из Объект.ЭлектронныеПодписиОбменаФСС Цикл
		УстановитьВидимостьКнопкиПодписи(СтрокаПодписи.ИмяСтроки,Истина,СтрокаПодписи.ПодписьЗарегистрирована);
	КонецЦикла; 
	
	ЗаполненаЗапись1 = ЗначениеЗаполнено(Объект.Запись1Врач) 
						И ЗначениеЗаполнено(Объект.Запись1ВрачДолжность)
						И ЗначениеЗаполнено(Объект.Запись1ДатаНачала)
						И ЗначениеЗаполнено(Объект.Запись1ДатаОкончания);
	Элементы.ПЗапись1Врач.Доступность = ЗаполненаЗапись1;
	Элементы.ПЗапись1Председатель.Доступность = ЗаполненаЗапись1 И ЗначениеЗаполнено(Объект.Запись1ПредседательВК);
												
	ЗаполненаЗапись2 = ЗначениеЗаполнено(Объект.Запись2Врач) 
						И ЗначениеЗаполнено(Объект.Запись2ВрачДолжность)
						И ЗначениеЗаполнено(Объект.Запись2ДатаНачала)
						И ЗначениеЗаполнено(Объект.Запись2ДатаОкончания);
	Элементы.ПЗапись2Врач.Доступность = ЗаполненаЗапись2;
	Элементы.ПЗапись2Председатель.Доступность = ЗаполненаЗапись2 И ЗначениеЗаполнено(Объект.Запись2ПредседательВК);
	
	Запись3Заполнена = ЗначениеЗаполнено(Объект.Запись3Врач) 
						И ЗначениеЗаполнено(Объект.Запись3ВрачДолжность)
						И ЗначениеЗаполнено(Объект.Запись3ДатаНачала)
						И ЗначениеЗаполнено(Объект.Запись3ДатаОкончания);
	Элементы.ПЗапись3Врач.Доступность = Запись3Заполнена;
	Элементы.ПЗапись3Председатель.Доступность = Запись3Заполнена И ЗначениеЗаполнено(Объект.Запись3ПредседательВК);
	
	Элементы.ПЗакрытие.Доступность = ЗначениеЗаполнено(Объект.СтатусНетрудоспособного) 
									Или ЗначениеЗаполнено(Объект.ДатаНачалаРаботы);
									                
	Элементы.ПНарушение.Доступность = ЗначениеЗаполнено(Объект.НарушениеРежима) И ЗначениеЗаполнено(Объект.ДатаНарушенияРежима);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопкиПодписи(ИмяКнопки, Подписана, Зарегистрирована)
	
	КнопкаПодписи = Элементы["П" + ИмяКнопки];
	КнопкаУдаления = Элементы["У" + ИмяКнопки]; 
	
	КнопкаПодписи.Видимость = Не Подписана;
	КнопкаУдаления.Видимость = Подписана;
	
КонецПроцедуры
 
&НаКлиенте
Процедура УдалитьПодпись(ИмяСтроки)
	
	ТекстВопроса = НСтр("ru = 'Удалить подпись?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьПодписиПродолжение",
		ЭтотОбъект, ИмяСтроки);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиПродолжение(Результат, ИмяСтроки) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Объект.ЭлектронныеПодписиОбменаФСС.НайтиСтроки(Новый Структура("ИмяСтроки",ИмяСтроки));
	Если МассивСтрок.Количество() > 0 Тогда	
		УдалитьПодписьНаСервере(Объект.Ссылка, ИмяСтроки);
		Прочитать();
		УстановитьВидимостьКнопкиПодписи(ИмяСтроки,Ложь, Ложь);
		УстановитьДоступностьПолейПоПодписям();
	КонецЕсли; 
						
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПодписьНаСервере(ДокументСсылка, ИмяСтроки)
	
	СтрокиПодписи = ДокументСсылка.ЭлектронныеПодписиОбменаФСС.НайтиСтроки(Новый Структура("ИмяСтроки",ИмяСтроки));
	
	Для Каждого СтрокаПодписи ИЗ СтрокиПодписи Цикл
		ЗаписьПодписи = бит_СертификатыЭЦП.ПолучитьЭлектроннуюПодпись(ДокументСсылка,,,СтрокаПодписи.ИдентификаторПодписи);
		Если ЗаписьПодписи <> Неопределено Тогда
			ЭлектроннаяПодпись.УдалитьПодпись(ДокументСсылка,ЗаписьПодписи.ПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьДанныеПодписи(ИмяСтроки,ДокументСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ВыборДейтвияСПодписью()
	
	ИмяСтроки = Прав(ТекущийЭлемент.Имя, СтрДлина(ТекущийЭлемент.Имя)-1);
		
	МассивСтрок = Объект.ЭлектронныеПодписиОбменаФСС.НайтиСтроки(Новый Структура("ИмяСтроки",ИмяСтроки));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаПодписи = МассивСтрок[0];	
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Открыть", НСтр("ru = 'Открыть подпись'", "ru"));
		Если Не СтрокаПодписи.ПодписьЗарегистрирована Тогда
			СписокКнопок.Добавить("Удалить", НСтр("ru = 'Удалить подпись'", "ru"));
			Описание = нСтр("ru='Не отправлена в ФСС'", "ru");
		Иначе
			Описание = нСтр("ru='Отправлена в ФСС'", "ru");	
		КонецЕсли; 
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		Оповещение = Новый ОписаниеОповещения("ВыборДействияСПодписьюЗавершение", ЭтотОбъект, ИмяСтроки);

		ПоказатьВопрос(Оповещение,Описание,СписокКнопок, , "Открыть",
						НСтр("ru = 'Выберите действие с подписью'", "ru"));
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ВыборДействияСПодписьюЗавершение(Результат, ИмяСтроки) Экспорт
	Если Результат = "Открыть" Тогда
		ОткрытьПодпись(ИмяСтроки);	
	ИначеЕсли Результат = "Удалить" Тогда 
		УдалитьПодпись(ИмяСтроки);
	КонецЕсли; 	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьПолейПоПодписям()
	
	// Запись1
	ЕстьДоступВрач = Не Элементы.УЗапись1Врач.Видимость;
	ЕстьДоступПредседатель = Не Элементы.УЗапись1Председатель.Видимость;
	
	Элементы.Запись1ДатаНачала.Доступность = ЕстьДоступВрач;
	Элементы.Запись1ВрачДолжность.Доступность = ЕстьДоступВрач;
	Элементы.Запись1ДатаОкончания.Доступность = ЕстьДоступВрач;
	Элементы.Запись1Врач.Доступность = ЕстьДоступВрач;
	Элементы.Запись1ПредседательВК.Доступность = ЕстьДоступПредседатель;
	
	// Запись2
	ЕстьДоступВрач = Не Элементы.УЗапись2Врач.Видимость;
	ЕстьДоступПредседатель = Не Элементы.УЗапись2Председатель.Видимость;
	
	Элементы.Запись2ДатаНачала.Доступность = ЕстьДоступВрач;
	Элементы.Запись2ДатаОкончания.Доступность = ЕстьДоступВрач;
	Элементы.Запись2ВрачДолжность.Доступность = ЕстьДоступВрач;
	Элементы.Запись2Врач.Доступность = ЕстьДоступВрач;
	Элементы.Запись2ПредседательВК.Доступность = ЕстьДоступПредседатель;
	
	// Запись3
	ЕстьДоступВрач = Не Элементы.УЗапись3Врач.Видимость;
	ЕстьДоступПредседатель = Не Элементы.УЗапись3Председатель.Видимость;
	
	Элементы.Запись3ДатаНачала.Доступность = ЕстьДоступВрач;
	Элементы.Запись3ДатаОкончания.Доступность = ЕстьДоступВрач;
	Элементы.Запись3ВрачДолжность.Доступность = ЕстьДоступВрач;
	Элементы.Запись3Врач.Доступность = ЕстьДоступВрач;
	Элементы.Запись3ПредседательВК.Доступность = ЕстьДоступПредседатель;
	
	ЕстьДоступ = Не Элементы.УЗакрытие.Видимость;
	Элементы.ИноеСтатус.Доступность = ЕстьДоступ;
	Элементы.ДатаНачалаРаботы.Доступность = ЕстьДоступ;
	
	ЕстьДоступ = Не Элементы.УНарушение.Видимость;
	Элементы.СтационарНарушениеРежима.Доступность = ЕстьДоступ;
	Элементы.СтационарДатаНарушенияРежима.Доступность = ЕстьДоступ;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(ИмяСтроки)
	
	МассивСтрок = Объект.ЭлектронныеПодписиОбменаФСС.НайтиСтроки(Новый Структура("ИмяСтроки",ИмяСтроки));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаПодписи = МассивСтрок[0];
		Если Не ЗначениеЗаполнено(СтрокаПодписи.ИдентификаторПодписи) Тогда
			Возврат;	
		КонецЕсли; 
		ДанныеПодписи = ДанныеПодписи(Объект.Ссылка,СтрокаПодписи.ИдентификаторПодписи);
		
		Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			Возврат;
		КонецЕсли;
		
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(ДанныеПодписи);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПодписи(ДокументСсылка, Идентификатор)
	ЗаписьПодписи = бит_СертификатыЭЦП.ПолучитьЭлектроннуюПодпись(ДокументСсылка,,,Идентификатор);
	
	СвойстваПодписи = Новый Структура(
		"ДатаПодписи, Комментарий, КомуВыданСертификат, Отпечаток,
		|АдресПодписи, УстановившийПодпись, АдресСертификата,
		|Статус, ТекстОшибкиПроверкиПодписи, ПодписьВерна, ДатаПроверкиПодписи");
	
	ЗаполнитьЗначенияСвойств(СвойстваПодписи, ЗаписьПодписи);
	
	Возврат СвойстваПодписи;
	
КонецФункции

&НаКлиенте
Процедура Запись1ВрачДолжностьПриИзменении(Элемент)
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись3ВрачДолжностьПриИзменении(Элемент)
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура Запись2ВрачДолжностьПриИзменении(Элемент)
	ОбновитьДоступностьКнопокПодписей();
КонецПроцедуры

&НаКлиенте
Процедура СледующийЛННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НомераПродложения = ПолучитьПодходящиеЛН(Объект.Ссылка); 
	Если НомераПродложения.Количество() = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Объект.СледующийЛН = НомераПродложения[0];
		ЭтаФорма.Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Клиент, ДокументОснование", Объект.Клиент, Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеСледующийЛННачалоВыбора", ЭтотОбъект);

	ОткрытьФорму("Документ.ЛистокНетрудоспособности.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения); 
		
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьПодходящиеЛН(ТекущийЛН)
	
	НомераПродложения = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистокНетрудоспособности.Номер КАК Номер
	               |ИЗ
	               |	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
	               |ГДЕ
	               |	ЛистокНетрудоспособности.ДокументОснование = &ТекущийДокумент";
	
    Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийЛН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НомераПродложения.Добавить(Строка(Формат(Выборка.Номер, "ЧГ=")));	
	КонецЦикла;
	
	Возврат НомераПродложения; 
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеСледующийЛННачалоВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Объект.СледующийЛН = Строка(Формат(ОбщегоНазначения.ПолучитьЗначениеРеквизита(РезультатЗакрытия, "Номер"), "ЧГ="));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаКонтураРаботы()
	
	Если СтатусФСС = "Нет" Тогда
		Объект.РабочийКонтур = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("РабочийРежимОбменаСФСС"); 
	КонецЕсли;
		
	Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("РабочийРежимОбменаСФСС") 
		И НЕ Объект.РабочийКонтур
	Тогда
	    ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Данный документ создан в тестовом контуре, а сейчас установлен рабочий контур!'", "ru"));
		Возврат Истина;
	ИначеЕсли Не УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("РабочийРежимОбменаСФСС")
		И Объект.РабочийКонтур
	Тогда
		ОбщегоНазначения.СообщитьПользователю(нСтр("ru='Данный документ создан в рабочем контуре, а сейчас установлен тестовый контур!'", "ru"));
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ФЛК_ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЛистковНетрудоспособности.Закрыт")
		И Не ЗначениеЗаполнено(Объект.ДатаЗакрытия)
	Тогда
		ПоказатьПредупреждение(,"Необходимо указать дату закрытия!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка на наличие недопустимых символов в ФИО
	ПроверитьФИОНаНедопустимыеСимволы();
		
	//// Проверка заполнения родственника.
	//Если ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности) Тогда
	//	КодПричины = ДопСерверныеФункции.ПолучитьРеквизит(Объект.ПричинаНетрудоспособности, "Код");
	//	Если КодыПричинНетрудоспособностиСРодственником.НайтиПоЗначению(КодПричины) <> Неопределено
	//		И Объект.ДанныеПоУходуЗаРодственниками.Количество() = 0
	//	Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены данные по уходу");
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьИзРодственниковНаСервере(СсылкаНаКлиент)
	
	// Формируем список значений с родственниками клиента
	СписокРезультат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСведенийСвязиМеждуКлиентами.Клиент2 КАК Клиент2
		|ИЗ
		|	РегистрСведений.СвязиМеждуКлиентами КАК РегистрСведенийСвязиМеждуКлиентами
		|ГДЕ
		|	РегистрСведенийСвязиМеждуКлиентами.Клиент = &Ссылка
		|	И РегистрСведенийСвязиМеждуКлиентами.Клиент2 ССЫЛКА Справочник.Клиенты
		|	И РегистрСведенийСвязиМеждуКлиентами.Клиент2 <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрСведенийСвязиМеждуКлиентами.Клиент2";
	
	Запрос.Параметры.Вставить("Ссылка", СсылкаНаКлиент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокРезультат.Добавить(Выборка.Клиент2);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеРодственника(РодственникСсылка, КлиентСсылка)
	
	// Получение данных клиента и его родственной связи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Клиенты.Фамилия КАК Фамилия,
	|	Клиенты.Имя КАК Имя,
	|	Клиенты.Отчество КАК Отчество,
	|	Клиенты.ДатаРождения КАК ДатаРождения,
	|	Клиенты.СНИЛС КАК СНИЛС,
	|	Клиенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Родственник
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка = &РодственникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Родственник.Фамилия КАК Фамилия,
	|	Родственник.Имя КАК Имя,
	|	Родственник.Отчество КАК Отчество,
	|	Родственник.ДатаРождения КАК ДатаРождения,
	|	Родственник.СНИЛС КАК СНИЛС,
	|	СвязиМеждуКлиентами.ТипСвязи КАК ТипСвязи
	|ИЗ
	|	Родственник КАК Родственник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиМеждуКлиентами КАК СвязиМеждуКлиентами
	|		ПО Родственник.Ссылка = СвязиМеждуКлиентами.Клиент
	|			И (СвязиМеждуКлиентами.Клиент2 = &КлиентСсылка)";
	
	Запрос.УстановитьПараметр("КлиентСсылка", КлиентСсылка);
	Запрос.УстановитьПараметр("РодственникСсылка", РодственникСсылка);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ДанныеРодственника = Новый Структура;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДанныеРодственника.Вставить("Фамилия", ВыборкаДетальныеЗаписи.Фамилия);
		ДанныеРодственника.Вставить("Имя", ВыборкаДетальныеЗаписи.Имя);
		ДанныеРодственника.Вставить("Отчество", ВыборкаДетальныеЗаписи.Отчество);
		ДанныеРодственника.Вставить("ДатаРождения", ВыборкаДетальныеЗаписи.ДатаРождения);
		ДанныеРодственника.Вставить("СНИЛС", ВыборкаДетальныеЗаписи.СНИЛС);
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТипСвязи)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТипСвязи.КодФСС)
			Тогда
			ДанныеРодственника.Вставить("СтепеньРодства", ВыборкаДетальныеЗаписи.ТипСвязи);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеРодственника;		
	
КонецФункции

&НаКлиенте
Процедура ПроверитьФИОНаНедопустимыеСимволы()

	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Объект.Фамилия);
	МассивДанных.Добавить(Объект.Имя);
	МассивДанных.Добавить(Объект.Отчество);
	
	КодыДопустимыхСимволов = Новый Массив;
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	КодыДопустимыхСимволов.Добавить(1025); // "Ё"
	КодыДопустимыхСимволов.Добавить(32); // " "
	КодыДопустимыхСимволов.Добавить(45); // "-"
	КодыДопустимыхСимволов.Добавить(46); // "."
    КодыДопустимыхСимволов.Добавить(39); // "'"
	КодыДопустимыхСимволов.Добавить(73); // "I"
	КодыДопустимыхСимволов.Добавить(86); // "V"
	КодыДопустимыхСимволов.Добавить(88); // "X"
	
	СтрокаВывода = "";
	НайденНедопустимыйСимвол = Ложь;
	
	Для Каждого СтрокаПроверки Из МассивДанных Цикл
		Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
			ТекущийСимвол = Сред(СтрокаПроверки, Индекс, 1);
			КодСимвола = КодСимвола(ТекущийСимвол);
			Если ((КодСимвола < 1040) Или (КодСимвола > 1103)) 
				И (КодыДопустимыхСимволов.Найти(КодСимвола) = Неопределено) 
			Тогда
		    	СтрокаВывода = Новый ФорматированнаяСтрока(СтрокаВывода, Новый ФорматированнаяСтрока(ТекущийСимвол, Новый Шрифт(,,Истина), Новый Цвет(255,0,0)));
				НайденНедопустимыйСимвол = Истина;
			Иначе
				СтрокаВывода = Новый ФорматированнаяСтрока(СтрокаВывода, ТекущийСимвол);
			КонецЕсли;
		КонецЦикла;
		СтрокаВывода = Новый ФорматированнаяСтрока(СтрокаВывода, " ");
	КонецЦикла;
	
	Если НайденНедопустимыйСимвол Тогда
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока("Поля ""Фамилия"", ""Имя"", ""Отчество"" застрахованного могут содержать буквы кириллицы, тире, точку, апостроф, пробел и символы I, V, X", Символы.ПС, СтрокаВывода));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНомерСледующегоЛН(Номер, СНИЛС, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистокНетрудоспособности.Ссылка КАК Ссылка,
	               |	ЛистокНетрудоспособности.СНИЛС КАК СНИЛС,
	               |	ЛистокНетрудоспособности.ВидЛистка КАК ВидЛистка
	               |ИЗ
	               |	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
	               |ГДЕ
	               |	ЛистокНетрудоспособности.Номер = &Номер
	               |	И НЕ ЛистокНетрудоспособности.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Выборка.СНИЛС) <> СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СНИЛС)
			Или Выборка.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Первичный
			Или Выборка.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.ДругогоЛПУ
		Тогда
			ТекстОшибки = СтрШаблон("Номер следующего ЛН: %1 уже занят в другом листке!", Номер);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНомерНаИспользованиеВПолеСледующийЛН(Номер, СНИЛС, ВидЛистка, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛистокНетрудоспособности.Ссылка КАК Ссылка,
	               |	ЛистокНетрудоспособности.СНИЛС КАК СНИЛС
	               |ИЗ
	               |	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
	               |ГДЕ
	               |	ЛистокНетрудоспособности.СледующийЛН = &Номер
	               |	И НЕ ЛистокНетрудоспособности.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	ИначеЕсли (ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Первичный 
		Или ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.ДругогоЛПУ)	
	Тогда
		ТекстОшибки = СтрШаблон("Номер: %1 уже в другом листке как номер следующего ЛН!", Номер);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	Иначе 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Выборка.СНИЛС) <> СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СНИЛС) Тогда
			ТекстОшибки = СтрШаблон("Номер: %1 уже в листке другого пациента как номер следующего ЛН!", Номер);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеПопыткиЗаписиПриПолученииНомераЭЛН()
	
	Если Модифицированность Тогда // Не записался.
		Объект.Номер = 0;
		ЭлектронныйНомер = 0;
	Иначе
		Если Объект.ВидЛистка = ПредопределенноеЗначение("Перечисление.ВидыЛистковНетрудоспособности.Продолжение")
			И ЗначениеЗаполнено(Объект.ДокументОснование)
		Тогда
			Оповестить("ПолучениеНомераЛистаПродолжения", Новый Структура("НомерСледующего, ДокументОснование", Объект.Номер, Объект.ДокументОснование));		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомерДокумента()

	Номер = ПолучитьТекущийНомерЭЛНИзПула(Объект.ЛПУОГРН, Объект.РабочийКонтур);	
	Если Номер <> Неопределено Тогда
		Объект.Номер = Номер;
		ЭлектронныйНомер = Номер;
		Модифицированность = Истина;
		мЗаписьПриПолученииНомераЭЛН = Истина;
		Записать();
	Иначе
		ПараметрыФормы = Новый Структура("Действие, Документ","ПолучитьСписокНомеров",Объект.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыОбменаФСС",ЭтаФорма,"ПолучитьСписокНомеров");
		ОткрытьФорму("Документ.ЛистокНетрудоспособности.Форма.ОбменСФСС",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПредставителя_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Объект.ДанныеПоУходуЗаРодственниками.Количество() > 0 Тогда
			Ответ = Вопрос("Данные по уходу будут перезаполнены! Текущие данные будут утеряны. Продолжить?",РежимДиалогаВопрос.ДаНетОтмена,0);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;	
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьДанныеКлиентаПоПредставителю(Результат);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКлиентаПоПредставителю(Представитель)
	
	Документы.ЛистокНетрудоспособности.ЗаполнитьДанныеКлиентаПоПредставителю(ЭтотОбъект, Представитель);
		
КонецПроцедуры

&НаСервере
Функция ДанныеОКлиентеНеЗаполнены()
	
	Возврат Не (ЗначениеЗаполнено(Объект.СНИЛС) Или ЗначениеЗаполнено(Объект.Фамилия) Или ЗначениеЗаполнено(Объект.Пол) 
			Или ЗначениеЗаполнено(Объект.Имя) Или ЗначениеЗаполнено(Объект.Отчество) Или ЗначениеЗаполнено(Объект.ДатаРождения))
	
КонецФункции

#КонецОбласти