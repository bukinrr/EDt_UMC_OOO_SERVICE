#Область ПрограммныйИнтерфейс

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура - Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("СводкаЭЛН",	   "Печать ЭЛН (А5)");
	СтруктураМакетов.Вставить("СведенияОбЭЛН", "Печать ЭЛН (А4)");
	
	Возврат СтруктураМакетов;

КонецФункции

// Процедура формирует печатную форму документа
//  Название макета печати передается в качестве параметра,
//  по переданному имени макета определяется соответствующая функция печати.
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка.ЛистокНетрудоспособности - ссылка на распечатываемый документ.
//  ИмяМакета		 - Строка			 - имя макета из структуры печатных форм.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция Печать(СсылкаНаОбъект, ИмяМакета) Экспорт
	
	Перем ТабДокумент;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СведенияОбЭЛН" Тогда
		ТабДокумент = ПечатьСведенияОбЭЛН(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "СводкаЭЛН" Тогда
		ТабДокумент = ПечатьСводкаЭЛН(СсылкаНаОбъект);
	КонецЕсли;
		
	Возврат ТабДокумент;
	
КонецФункции

// Проверяет наличие номера в информационной базе.
//
// Параметры:
//   Значение - Число, ДокументСсылка.ЛисткиНетрудоспособности - номер или объект с номером на проверку. 
//
// Возвращаемое значение:
//  ЛистокНетрудоспособности.Ссылка - ссылка на листок нетрудоспособности или Неопределено.
//
Функция ПроверитьСуществованиеНомераЛисткаВИнформационнойБазе(Значение) Экспорт
	Если ТипЗнч(Значение) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛистокНетрудоспособности.Ссылка
		|ИЗ
		|	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
		|ГДЕ
		|	ЛистокНетрудоспособности.Номер = &Номер"
	;
	Запрос.УстановитьПараметр("Номер", Значение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Заполняет ЛН по представителю
//
// Параметры:
//  Документ		 - ЛистокНетрудоспособности	 -	Документ для заполнения 
//  Представитель	 - Структура -	Объект (строка, СправочникСсылка.Клиент) - СтепеньРодства(Строка, СправочникСсылка.СтепениРодства) 
//
Процедура ЗаполнитьДанныеКлиентаПоПредставителю(Документ, Представитель) Экспорт
	
	Объект = Документ.Объект;
	
	Если ТипЗнч(Представитель.Объект) = Тип("Строка") Тогда
		ФИО = СтрРазделить(Представитель.Объект, " ");
		Объект.Фамилия 	= ?(ФИО.Количество() > 0, ФИО[0], "");
		Объект.Имя 		= ?(ФИО.Количество() > 1, ФИО[1], "");
		Объект.Отчество = ?(ФИО.Количество() > 2, ФИО[2], "");
		
		Объект.Пол = УниверсальныеМеханизмыСервер.ОпределитьПол(Объект.Имя, Объект.Фамилия, Объект.Отчество);
		
		Если Объект.ДатаРождения = Объект.Клиент.ДатаРождения Тогда
			Объект.ДатаРождения = Неопределено;
		КонецЕсли;
		Если Объект.СНИЛС = Объект.Клиент.СНИЛС Тогда
			Объект.СНИЛС = Неопределено;
		КонецЕсли;
	Иначе
		ПредставительОбъект = Представитель.Объект;
		Объект.Фамилия 		= ПредставительОбъект.Фамилия; 
		Объект.Имя 			= ПредставительОбъект.Имя;
		Объект.Отчество 	= ПредставительОбъект.Отчество;		
		Объект.Пол 			= ПредставительОбъект.Пол;
		Объект.ДатаРождения = ПредставительОбъект.ДатаРождения;
		Объект.СНИЛС		= ПредставительОбъект.СНИЛС;
	КонецЕсли;
	
	Объект.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.НайтиПоКоду("09");
	Документ.Элементы.СтраницаДанныеУхода.Видимость = Истина;

	Объект.ДанныеПоУходуЗаРодственниками.Очистить();
	ДанныеПоУходу = Объект.ДанныеПоУходуЗаРодственниками.Добавить();
	ЗаполнитьЗначенияСвойств(ДанныеПоУходу, Объект.Клиент);
	ДанныеПоУходу.СтепеньРодства = ?(ТипЗнч(Представитель.СтепеньРодства) = Тип("Строка") Или Представитель.СтепеньРодства.КодФСС = "",
									Справочники.СтепениРодства.ПустаяСсылка() ,Представитель.СтепеньРодства);
	
КонецПроцедуры

// Листы нетрудоспособности случая обращения.
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - клиент для листка нетрудоспособности.
// 
// Возвращаемое значение:
//  Результат - структура, содержит массивы актуальных и законченных листков.
//
Функция ЛН_Пациента(Клиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Актуальные, Законченные", Новый Массив, Новый Массив);
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Лёгкий запрос на поиск любых больничных этого клиента. Обычно их нет.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистокНетрудоспособности.Ссылка КАК ЛН,
	|	ВЫБОР
	|		КОГДА НЕ ЭлектронныйБольничный
	|			ИЛИ ДатаНачалаРаботы <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ ДатаУстановленияСтатуса <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ ДатаНарушенияРежима <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполнениеОкончено
	|ИЗ
	|	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
	|ГДЕ
	|	ЛистокНетрудоспособности.Клиент = &Клиент
	|	И НЕ ЛистокНетрудоспособности.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗаполнениеОкончено Тогда
			Результат.Законченные.Добавить(Выборка.ЛН);
		Иначе
			Результат.Актуальные.Добавить(Выборка.ЛН);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область КОРП

// Функция возвращает данные последней заполненной строки нетрудоспособности
//
// Параметры:
//  ЛН	 - ДокументСсылка.ЛистокНетрудоспособности	 - листок.
// 
// Возвращаемое значение:
//  Структура - с реквизитами НомерСтроки,Врач,ДатаНачала,ДатаОкончания и ПредседательВК.
//
Функция ПолучитьПоследниееДанныеЛН(ЛН) Экспорт
	
	ДанныеЛН = Новый Структура();
	Если ЗначениеЗаполнено(ЛН.Запись3ДатаНачала) Тогда
		ДанныеЛН.Вставить("НомерСтроки",3);	
	ИначеЕсли ЗначениеЗаполнено(ЛН.Запись2ДатаНачала) Тогда 
		ДанныеЛН.Вставить("НомерСтроки",2);
	Иначе
		ДанныеЛН.Вставить("НомерСтроки",1);
	КонецЕсли;
	
	Имя = "Запись" + ДанныеЛН.НомерСтроки; 
	ДанныеЛН.Вставить("Врач",			 ДопСерверныеФункции.ПолучитьРеквизит(ЛН, Имя + "Врач"));	
	ДанныеЛН.Вставить("ДатаНачала",		 ДопСерверныеФункции.ПолучитьРеквизит(ЛН, Имя + "ДатаНачала"));	
	ДанныеЛН.Вставить("ДатаОкончания",	 ДопСерверныеФункции.ПолучитьРеквизит(ЛН, Имя + "ДатаОкончания"));	
	ДанныеЛН.Вставить("ПредседательВК",	 ДопСерверныеФункции.ПолучитьРеквизит(ЛН, Имя + "ПредседательВК"));	
	
	Возврат ДанныеЛН;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьСведенияОбЭЛН(СсылкаНаОбъект)
	 
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСправа = 5;
	ТабДок.РазмерСтраницы = "A4";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_ЛистокНетрудоспособности_СведенияОбЭЛН";
	
	// ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;

	
	Макет = ПолучитьМакет("СведенияОбЭЛН");
	
	Выборка = Неопределено;
	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
	ДанныеДляЗаполнения = ДанныеДляПечатиПоДокументу(СсылкаНаОбъект, Выборка);
	Макет.Параметры.Заполнить(ДанныеДляЗаполнения);
	
	Макет.Параметры.Номер = СсылкаНаОбъект.Номер; 
	
	Для Каждого Элемент Из СсылкаНаОбъект.ЭлектронныеПодписиОбменаФСС Цикл
		
		Если Элемент.ПодписьЗарегистрирована Тогда
			
			Если Элемент.ИмяСтроки = "Нарушение" Тогда 
				Макет.Параметры.Подпись1 = "Подписано ЭЦП";	
			КонецЕсли;
			
			Если Элемент.ИмяСтроки = "Закрытие" Тогда 
				Макет.Параметры.Подпись6 = "Подписано ЭЦП";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;                                                             
		
	// Работа с линиями пустых полей
	ОбластьОсвобождениеЛиния2_0 = Макет.Области.Найти("ОсвобождениеЛиния2_0");
	ОбластьОсвобождениеЛиния3_0 = Макет.Области.Найти("ОсвобождениеЛиния3_0");
	
	Если ДанныеДляЗаполнения.ПечататьОсвобождениеЛинии2 = Ложь Тогда
		Если ОбластьОсвобождениеЛиния2_0 <> Неопределено Тогда
			Макет.Рисунки.Удалить(ОбластьОсвобождениеЛиния2_0);
		КонецЕсли; 
	КонецЕсли; 
	Если ДанныеДляЗаполнения.ПечататьОсвобождениеЛинии3 = Ложь Тогда
		Если ОбластьОсвобождениеЛиния3_0 <> Неопределено Тогда
			Макет.Рисунки.Удалить(ОбластьОсвобождениеЛиния3_0);
		КонецЕсли; 
	КонецЕсли; 
	
	// Длина наименования организации
	Если Не ДанныеДляЗаполнения.Свойство("НаименованиеМО50") Тогда
		Макет.УдалитьОбласть(Макет.Область(10,,10), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Макет.УдалитьОбласть(Макет.Область(9,,9), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	ТабДок.Вывести(Макет);
	
	Возврат ТабДок;
	
КонецФункции

// Возвращает запрос для формирования печатной формы и штрихкода листка нетрудоспособности.
Функция ПолучитьЗапросДанныхЛН()
	Возврат Новый Запрос(
	"ВЫБРАТЬ
	|	ЛН.Номер,
	| ВЫБОР
	|  КОГДА ЛН.ПервичныйЛисток ССЫЛКА Документ.ЛистокНетрудоспособности
	|   ТОГДА ЛН.ДокументОснование.Номер
	|  ИНАЧЕ ЛН.ПервичныйЛисток
	| КОНЕЦ КАК ПредыдущийЛННомер,
	|	ЛН.Первичный КАК Первичный,
	|	ЛН.Дубликат КАК Дубликат,
	|	ЛН.Дата,
	|	КИ.Представление КАК АдресМО,
	|	ЛН.Филиал КАК Филиал,
	|	ЛН.Фамилия,
	|	ЛН.Имя,
	|	ЛН.Отчество,
	|	ЛН.ДатаРождения,
	|	ВЫБОР
	|		КОГДА ЛН.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Пол,
	|	ВЫБОР
	|		КОГДА ЛН.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА ""Ж""
	|		КОГДА ЛН.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	|			ТОГДА ""М""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПолПредставление,
	|	ЛН.МестоРаботы,
	|	ВЫБОР
	|		КОГДА ЛН.МестоРаботыВидЗанятости = 2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МестоРаботыВидЗанятости,
	|	ЛН.ПричинаНетрудоспособности.Код КАК ПричинаКод,
	|	ЛН.ДополнительнаяПричинаНетрудоспособности.Код КАК ДопКод,
	|	ЛН.ИзмененнаяПричинаНетрудоспособности.Код КАК КодИзм,
	|	ВЫБОР
	|		КОГДА ЛН.ДокументОснование.МестоРаботыВидЗанятости = 2
	|			ТОГДА ЛН.ДокументОснование.Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЛНДляОсновногоМестаРаботыНомер,
	|	ВЫБОР
	|		КОГДА ЛН.НаУчетеВОрганахЗанятости
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаУчетеВОрганахЗанятости,
	|	ЛН.Дата1,
	|	ЛН.Дата2,
	|	ЛН.НомерПутевки,
	|	ЛН.Санаторий.ОГРН КАК СанаторийОГРН,
	|	ЛН.Санаторий,
	|	ЛН.СтационарДатаНачала,
	|	ЛН.СтационарДатаОкончания,
	|	ЛН.НарушениеРежима.Код КАК НарушениеРежима,
	|	ЛН.ДатаНарушенияРежима,
	|	ЛН.ДатаНаправленияВБюроМСЭ,
	|	ЛН.ДатаРегистрацииВБюроМСЭ,
	|	ЛН.ДатаОсвидетельствованияВБюроМСЭ,
	|	ВЫБОР
	|		КОГДА ЛН.ГруппаИнвалидности = ЗНАЧЕНИЕ(Перечисление.ГруппыИнвалидности.I)
	|			ТОГДА 1
	|		КОГДА ЛН.ГруппаИнвалидности = ЗНАЧЕНИЕ(Перечисление.ГруппыИнвалидности.II)
	|			ТОГДА 2
	|		КОГДА ЛН.ГруппаИнвалидности = ЗНАЧЕНИЕ(Перечисление.ГруппыИнвалидности.III)
	|			ТОГДА 3
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГруппаИнвалидности,
	|	ВЫБОР
	|		КОГДА ЛН.Запись1ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛН.Запись1ДатаНачала
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК Запись1ДатаНачала,
	|	ЛН.Запись1ДатаОкончания,
	|	ЛН.Запись1ВрачДолжность КАК Запись1ВрачДолжность,
	|	ЛН.Запись1Врач КАК Запись1ВрачФИО,
	|	ЛН.Запись2ДатаНачала,
	|	ЛН.Запись2ДатаОкончания,
	|	ЛН.Запись2ВрачДолжность КАК Запись2ВрачДолжность,
	|	ЛН.Запись2Врач КАК Запись2ВрачФИО,
	|	ЛН.Запись3ДатаНачала,
	|	ЛН.Запись3ДатаОкончания,
	|	ЛН.Запись3ВрачДолжность КАК Запись3ВрачДолжность,
	|	ЛН.Запись3Врач КАК Запись3ВрачФИО,
	|	ЛН.СтатусНетрудоспособного.Код КАК СтатусНетрудоспособного,
	|	ЛН.ДатаУстановленияСтатуса,
	|	ЛН.ДатаНачалаРаботы,
	|	ЛН.СледующийЛН КАК НомерСледующегоЛН,
	|	ЛН.ДокументОснование КАК ПредыдущийЛН,
	|	ВЫБОР
	|		КОГДА ЛН.ДокументОснование.МестоРаботыВидЗанятости = 2
	|			ТОГДА ЛН.ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЛистокНетрудоспособности.ПустаяСсылка)
	|	КОНЕЦ КАК ЛНДляОсновногоМестаРаботы,
	|	ВЫБОР
	|		КОГДА ЛН.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	|			ТОГДА ""v""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПолМ,
	|	ВЫБОР
	|		КОГДА ЛН.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА ""v""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПолЖ,
	|	ВЫБОР
	|		КОГДА ЛН.МестоРаботыВидЗанятости = 2
	|			ТОГДА ""v""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Основное,
	|	ВЫБОР
	|		КОГДА ЛН.МестоРаботыВидЗанятости = 1
	|			ТОГДА ""v""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПоСовместительству,
	|	ВЫБОР
	|		КОГДА ЛН.НаУчетеВОрганахЗанятости
	|			ТОГДА ""v""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СлужбаЗанятости,
	|	ЛН.Запись1ПредседательВК КАК Запись1ПредседательВКФИО,
	|	ВЫБОР
	|		КОГДА ЛН.Запись1ПредседательВК.Должность.НаименованиеСокращенное = """"
	|			ТОГДА ЛН.Запись1ПредседательВК.Должность.Представление
	|		ИНАЧЕ ЛН.Запись1ПредседательВК.Должность.НаименованиеСокращенное
	|	КОНЕЦ КАК Запись1ПредседательВКДолжность,
	|	ЛН.Запись2ПредседательВК КАК Запись2ПредседательВКФИО,
	|	ВЫБОР
	|		КОГДА ЛН.Запись2ПредседательВК.Должность.НаименованиеСокращенное = """"
	|			ТОГДА ЛН.Запись2ПредседательВК.Должность.Представление
	|		ИНАЧЕ ЛН.Запись2ПредседательВК.Должность.НаименованиеСокращенное
	|	КОНЕЦ КАК Запись2ПредседательВКДолжность,
	|	ЛН.Запись3ПредседательВК КАК Запись3ПредседательВКФИО,
	|	ВЫБОР
	|		КОГДА ЛН.Запись3ПредседательВК.Должность.НаименованиеСокращенное = """"
	|			ТОГДА ЛН.Запись3ПредседательВК.Должность.Представление
	|		ИНАЧЕ ЛН.Запись3ПредседательВК.Должность.НаименованиеСокращенное
	|	КОНЕЦ КАК Запись3ПредседательВКДолжность,
	|	ЛН.МедицинскаяКарта.НомерКарты КАК НомерКарты,
	|	ВЫБОР
	|		КОГДА КИ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресФактический)
	|			ТОГДА 1
	|		КОГДА КИ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЮридический)
	|			ТОГДА 2
	|		КОГДА КИ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПочтовый)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ИЗ
	|	Документ.ЛистокНетрудоспособности КАК ЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КИ
	|		ПО ЛН.Филиал = КИ.Объект
	|			И (КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|ГДЕ
	|	ЛН.Ссылка = &ЛН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания"
	);
КонецФункции

Функция ПолучитьЗапросДанныхЛНПоУходу()
	
	Возврат Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛистокНетрудоспособностиДанныеПоУходуЗаРодственниками.ДатаРождения КАК ДатаРождения,
		|	ЛистокНетрудоспособностиДанныеПоУходуЗаРодственниками.Фамилия КАК Фамилия,
		|	ЛистокНетрудоспособностиДанныеПоУходуЗаРодственниками.Имя КАК Имя,
		|	ЛистокНетрудоспособностиДанныеПоУходуЗаРодственниками.Отчество КАК Отчество,
		|	ЛистокНетрудоспособностиДанныеПоУходуЗаРодственниками.СтепеньРодства КАК СтепеньРодства
		|ИЗ
		|	Документ.ЛистокНетрудоспособности.ДанныеПоУходуЗаРодственниками КАК ЛистокНетрудоспособностиДанныеПоУходуЗаРодственниками
		|ГДЕ
		|	ЛистокНетрудоспособностиДанныеПоУходуЗаРодственниками.Ссылка = &ЛН"
		);
	
КонецФункции

 // Преобразует номер листка нетрудоспособности в строковое представление.
Функция НомерЛНСтрокой(НомерЧислом)
	НомерСтрокой = "";
	Если ЗначениеЗаполнено(НомерЧислом) Тогда
		НомерСтрокой = Формат(НомерЧислом, "ЧЦ=12; ЧВН=; ЧГ=0");
		ОбщегоНазначенияБИТКлиентСервер.ВыполнитьПроверкуССообщением(СтрДлина(НомерСтрокой) = 12, "Номер листка нетрудоспособности должен состоять из двенадцати цифр: " + НомерСтрокой);
	КонецЕсли;
	Возврат НомерСтрокой;
КонецФункции

// Удаляет из переданной строки символ "!" и обрезает пробелы справа и слева.
//
// Параметры:
//   Стр - Строка - строка для преобразования
//   МаксДлинаСтроки - Число - допустимая длина строки
//
// Возврат:
//   Строка.
//
Функция ОбработатьСтроку(Строка, МаксДлинаСтроки = 0)
	ОбрабатываемаяСтрока = СтрЗаменить(Строка, "!", "");
	ОбрабатываемаяСтрока = СокрЛП(ОбрабатываемаяСтрока);
	Если Не МаксДлинаСтроки = 0 Тогда
		ОбрабатываемаяСтрока = Лев(ОбрабатываемаяСтрока, МаксДлинаСтроки);
	КонецЕсли;
	Возврат ОбрабатываемаяСтрока;
КонецФункции

// Формирует структуру для заполнения параметров табличного документа.
//   
// Параметры:
//   СсылкаНаОбъект - ДокументСсылка.ЛистокНетрудоспособности - ссылка на документ
//
// Возврат:
//   Структура.
//
Функция ДанныеДляПечатиПоДокументу(СсылкаНаОбъект, Знач Выборка)
	ДанныеЛН = Новый Структура(
		"ПечататьОсвобождениеЛинии2, ПечататьОсвобождениеЛинии3, " +
		"Первичный, Дубликат, ПолМ, ПолЖ, ГруппаИнвалидности, " +
		"Основное, ПоСовместительству, СлужбаЗанятости",
		Ложь, Ложь
	);
	Запрос = ПолучитьЗапросДанныхЛН();
	Запрос.УстановитьПараметр("ЛН", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЛН, Выборка, , "Первичный, Дубликат");
		ДанныеЛН.Первичный = ?(Выборка.Первичный И Не Выборка.Дубликат, "v", "");
		ДанныеЛН.Дубликат = ?(Выборка.Дубликат, "v", "");
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект.ДокументОснование)
			И СсылкаНаОбъект.МестоРаботыВидЗанятости = 1
			И (СсылкаНаОбъект.ДокументОснование.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Продолжение
				Или СсылкаНаОбъект.ДокументОснование.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.ПродолжениеДругогоЛПУ)
		Тогда
			Запрос = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ЛистокНетрудоспособности.Ссылка КАК Ссылка,
			               |	ЛистокНетрудоспособности.Номер КАК Номер
			               |ИЗ
			               |	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
			               |ГДЕ
			               |	ЛистокНетрудоспособности.ПервичныйЛисток = &ПервичныйЛисток
			               |	И ЛистокНетрудоспособности.МестоРаботыВидЗанятости = 1
			               |	И ЛистокНетрудоспособности.ВидЛистка <> ЗНАЧЕНИЕ(Перечисление.ВидыЛистковНетрудоспособности.Продолжение)
			               |	И ЛистокНетрудоспособности.ВидЛистка <> ЗНАЧЕНИЕ(Перечисление.ВидыЛистковНетрудоспособности.ПродолжениеДругогоЛПУ)
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ЛистокНетрудоспособности.Номер";
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ПервичныйЛисток", СсылкаНаОбъект.ПервичныйЛисток);
			РезультатЗапросаНомера = Запрос.Выполнить();
			Если РезультатЗапросаНомера.Пустой() Тогда
				РазложитьСтроку(ДанныеЛН, 12, "ПродолжениеЛН", НомерЛНСтрокой(Выборка.ПредыдущийЛННомер));
			Иначе
				ВыборкаНомера = РезультатЗапросаНомера.Выбрать();
				Пока ВыборкаНомера.Следующий() Цикл
					РазложитьСтроку(ДанныеЛН, 12, "ПродолжениеЛН", НомерЛНСтрокой(ВыборкаНомера.Номер));
					Прервать;
				КонецЦикла;
			КонецЕсли;
		Иначе
			РазложитьСтроку(ДанныеЛН, 12, "ПродолжениеЛН", НомерЛНСтрокой(Выборка.ПредыдущийЛННомер));
		КонецЕсли;
		
		РазложитьСтроку(ДанныеЛН, 98, "НаименованиеМО", СсылкаНаОбъект.ЛПУИмя);
		РазложитьСтроку(ДанныеЛН, 49, "АдресМО", СсылкаНаОбъект.ЛПУАдрес);
		РазложитьДату(ДанныеЛН, "ДатаВыдачи", Выборка.Дата);

		РазложитьСтроку(ДанныеЛН, 15, "ОГРН", СсылкаНаОбъект.ЛПУОГРН);
		РазложитьСтроку(ДанныеЛН, 28, "Ф", Выборка.Фамилия);
		РазложитьСтроку(ДанныеЛН, 28, "И", Выборка.Имя);
		РазложитьСтроку(ДанныеЛН, 28, "О", Выборка.Отчество);
		РазложитьДату(ДанныеЛН, "ДатаРожд", Выборка.ДатаРождения);
		
		РазложитьСтроку(ДанныеЛН,  2, "ПричинаКод", Выборка.ПричинаКод);
		РазложитьСтроку(ДанныеЛН,  3, "ДопКод", Выборка.ДопКод);
		
		РазложитьСтроку(ДанныеЛН, 12, "ОсновнойЛН", НомерЛНСтрокой(Выборка.ЛНДляОсновногоМестаРаботыНомер));
					
		РазложитьДату(ДанныеЛН, "Запись1ДатаНачала", Выборка.Запись1ДатаНачала);
		РазложитьДату(ДанныеЛН, "Запись1ДатаОкончания", Выборка.Запись1ДатаОкончания);
		РазложитьСтроку(ДанныеЛН, 14, "Запись1ВрачДолжность", Выборка.Запись1ВрачДолжность);
		РазложитьВрачаИПредседателяВК(ДанныеЛН, "Запись1",
			ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Запись1ВрачФИО), ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Запись1ПредседательВКФИО), Выборка.Запись1ПредседательВКДолжность
		);
		РазложитьСтроку(ДанныеЛН, 17, "ВрачФИО", СтрЗаменить(ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Запись1ВрачФИО),".",""));
		РазложитьСтроку(ДанныеЛН, 10, "МедицинскаяКарта", Выборка.НомерКарты);
		
		// Место работы
		РазложитьСтроку(ДанныеЛН, 29, "МестоРаботы", Выборка.МестоРаботы);
		// Дата 1
		РазложитьДату(ДанныеЛН, "Дата1", Выборка.Дата1);
		// Дата 2
		РазложитьДату(ДанныеЛН, "Дата2", Выборка.Дата2);
		// Путевка санаторий
		РазложитьСтроку(ДанныеЛН,  7, "Путевка", Выборка.НомерПутевки);
		РазложитьСтроку(ДанныеЛН, 15, "Санаторий", Выборка.СанаторийОГРН);
		// Находился в стационаре
		РазложитьДату(ДанныеЛН, "СтационарДатаНачала", Выборка.СтационарДатаНачала);
		РазложитьДату(ДанныеЛН, "СтационарДатаОкончания", Выборка.СтационарДатаОкончания);
		// Код изм
		РазложитьСтроку(ДанныеЛН,  2, "КодИзм", Выборка.КодИзм);
		
		РазложитьСтроку(ДанныеЛН,  2, "НарушениеРежима", Выборка.НарушениеРежима);
		РазложитьДату(ДанныеЛН, "ДатаНарушенияРежима", Выборка.ДатаНарушенияРежима);
		
		// Направление на МСЭ
		РазложитьДату(ДанныеЛН, "ДатаНаправленияВБюроМСЭ", Выборка.ДатаНаправленияВБюроМСЭ);
		РазложитьДату(ДанныеЛН, "ДатаРегистрацииВБюроМСЭ", Выборка.ДатаРегистрацииВБюроМСЭ);
		РазложитьДату(ДанныеЛН, "ДатаОсвидетельствованияВБюроМСЭ", Выборка.ДатаОсвидетельствованияВБюроМСЭ);
		
		//  Освобождение от работы
		
		// Строка 2
		РазложитьДату(ДанныеЛН, "Запись2ДатаНачала", Выборка.Запись2ДатаНачала);
		РазложитьДату(ДанныеЛН, "Запись2ДатаОкончания", Выборка.Запись2ДатаОкончания);
		РазложитьСтроку(ДанныеЛН, 14, "Запись2ВрачДолжность", Выборка.Запись2ВрачДолжность);
		РазложитьВрачаИПредседателяВК(ДанныеЛН, "Запись2",
		ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Запись2ВрачФИО), ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Запись2ПредседательВКФИО), Выборка.Запись2ПредседательВКДолжность); 
		
		// Строка 3
		РазложитьДату(ДанныеЛН, "Запись3ДатаНачала", Выборка.Запись3ДатаНачала);
		РазложитьДату(ДанныеЛН, "Запись3ДатаОкончания", Выборка.Запись3ДатаОкончания);
		РазложитьСтроку(ДанныеЛН, 14, "Запись3ВрачДолжность", Выборка.Запись3ВрачДолжность);
		РазложитьВрачаИПредседателяВК(ДанныеЛН, "Запись3",
		ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Запись3ВрачФИО), ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Запись3ПредседательВКФИО), Выборка.Запись3ПредседательВКДолжность);
		
		// Приступить к работе.
		РазложитьДату(ДанныеЛН, "ДатаНачалаРаботы", Выборка.ДатаНачалаРаботы);
		РазложитьСтроку(ДанныеЛН, 12, "ВыданЛНПродолжение", НомерЛНСтрокой(Выборка.НомерСледующегоЛН));
		
		РазложитьСтроку(ДанныеЛН, 2, "СтатусНетрудоспособного", Выборка.СтатусНетрудоспособного);
		РазложитьДату(ДанныеЛН, "ДатаУстановленияСтатуса", Выборка.ДатаУстановленияСтатуса);
		
		ДанныеЛН.Вставить("ПоСоместительству", ДанныеЛН.ПоСовместительству);
		
	КонецЕсли;
	
	Запрос = ПолучитьЗапросДанныхЛНПоУходу();
	Запрос.УстановитьПараметр("ЛН", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Сч = 1 По 2 Цикл
		Если Выборка.Следующий() Тогда
			СтруктураВозраст = ОбщегоНазначенияБИТКлиентСервер.ВозрастСтруктурой(Выборка.ДатаРождения, СсылкаНаОбъект.Дата);
			Если ТипЗнч(СтруктураВозраст) = Тип("Структура") Тогда
				ЛетСтрокой = Строка(СтруктураВозраст.Лет);
				МесяцевСтрокой = Строка(СтруктураВозраст.Месяцев);
				РазложитьСтроку(ДанныеЛН, 2, "Родственник" + Сч + "Лет", ?(СтрДлина(ЛетСтрокой)=1, "0"+ЛетСтрокой, ЛетСтрокой));
				РазложитьСтроку(ДанныеЛН, 2, "Родственник" + Сч + "Мес", ?(СтрДлина(МесяцевСтрокой)=1, "0"+МесяцевСтрокой, МесяцевСтрокой));
			КонецЕсли;
			РазложитьСтроку(ДанныеЛН, 2, "Родственник" + Сч + "СтепеньРодства", Строка(Выборка.СтепеньРодства.КодФСС));
			РазложитьСтроку(ДанныеЛН, 39, "Родственник" + Сч + "ФИО", Строка(Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество));
		КонецЕсли;
	КонецЦикла;

	Возврат ДанныеЛН;
	
КонецФункции

Процедура РазложитьСтроку(ДанныеДляЗаполнения, ДлинаСтроки, ОбщееИмя, СтрокаДанных)
	СтрокаВрем = ОбработатьСтроку(СтрокаДанных, ДлинаСтроки);
	ИндексПоследнейЯчейки = СтрДлина(СтрокаВрем);
	Для Инд = 1 По ИндексПоследнейЯчейки Цикл
		ИмяПараметра = ОбщееИмя + Инд;
		ДанныеДляЗаполнения.Вставить(ИмяПараметра);
		ДанныеДляЗаполнения[ИмяПараметра] = ВРег(Сред(СтрокаВрем, Инд, 1));
	КонецЦикла;
КонецПроцедуры

Процедура РазложитьДату(пДанныеДляЗаполнения, пОбщееИмя, пДата)
	Если Не ЗначениеЗаполнено(пДата) Тогда
		Возврат;
	КонецЕсли;
	
	ДеньСтр = Формат(День(пДата), "ЧЦ=2; ЧВН=");
	МесСтр = Формат(Месяц(пДата), "ЧЦ=2; ЧВН=");
	ГодСтр = Формат(Год(пДата), "ЧЦ=4; ЧВН=; ЧГ=0");
	
	РазложитьСтроку(пДанныеДляЗаполнения, 2, пОбщееИмя + "Д", ДеньСтр);
	РазложитьСтроку(пДанныеДляЗаполнения, 2, пОбщееИмя + "М", МесСтр);
	РазложитьСтроку(пДанныеДляЗаполнения, 4, пОбщееИмя + "Г", ГодСтр);
	
КонецПроцедуры

Процедура РазложитьВрачаИПредседателяВК(Данные, ОбщееИмя, Знач Врач, Знач ПредседательВК, ДолжностьПредседателяВК)
	// Выводим врача
	Если ЗначениеЗаполнено(Врач) Тогда
		Врач = СтрЗаменить(Врач, ".","");
		Инд = Найти(Врач, " ");
		Если Инд > 0 Тогда
			// Берем только фамилию врача
			Если Не ЗначениеЗаполнено(ПредседательВК) И СтрДлина(Врач) > 34 Тогда
				Врач = Лев(Врач, Инд - 1);
			ИначеЕсли ЗначениеЗаполнено(ПредседательВК) И СтрДлина(Врач) > 17 Тогда
				Врач = Лев(Врач, Инд - 1);
			КонецЕсли;
		КонецЕсли;
		РазложитьСтроку(Данные, 17, ОбщееИмя + "ВрачФИО", Врач);
		Если Не ЗначениеЗаполнено(ПредседательВК) И СтрДлина(Врач) > 17 Тогда 
			РазложитьСтроку(Данные, 17, ОбщееИмя + "ПредседательВКФИО", СокрЛП(Сред(Врач, 15)));
		КонецЕсли;
	КонецЕсли;
	// Выводим председателя ВК
	Если ЗначениеЗаполнено(ПредседательВК) Тогда
		ПредседательВК = СтрЗаменить(ПредседательВК,".","");
		Инд = Найти(ПредседательВК, " ");
		Если Инд > 0 Тогда
			// Берем только фамилию председателя ВК
			Если ЗначениеЗаполнено(ПредседательВК) И СтрДлина(ПредседательВК) > 14 Тогда
				ПредседательВК = Лев(ПредседательВК, Инд - 1);
			КонецЕсли;
		КонецЕсли;
		РазложитьСтроку(Данные, 17, ОбщееИмя + "ПредседательВКФИО", ПредседательВК);
		Если ЗначениеЗаполнено(ДолжностьПредседателяВК) Тогда
			РазложитьСтроку(Данные, 14, ОбщееИмя + "ПредседательВКДолжность", ДолжностьПредседателяВК);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция КонвертироватьАдрес(Адрес, ЗначенияПолей)
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат "";
	КонецЕсли;
	
	ЗначенияПолейАдреса = ЗначенияПолей;
	ЧастиАдреса = Новый Структура("Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
	ЗаполнитьСтруктуруАдреса(ЧастиАдреса, ЗначенияПолейАдреса);
	
	Стр = "";
	Если  Не ЗначениеЗаполнено(ЧастиАдреса.Район) 
		И Не ЗначениеЗаполнено(ЧастиАдреса.Город) 
		И Не ЗначениеЗаполнено(ЧастиАдреса.НаселенныйПункт)
	Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, УбратьОбозначенияАдреса(ЧастиАдреса.Регион, Истина), " ");
	КонецЕсли;

	Если  Не ЗначениеЗаполнено(ЧастиАдреса.Город) 
		И Не ЗначениеЗаполнено(ЧастиАдреса.НаселенныйПункт)
	Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, ЧастиАдреса.Район, " ");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, УбратьОбозначенияАдреса(ЧастиАдреса.Город, Истина),				" ");
	ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, УбратьОбозначенияАдреса(ЧастиАдреса.НаселенныйПункт, , Истина), " ");
	ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, УбратьОбозначенияАдреса(ЧастиАдреса.Улица, , , Истина), 		" ");
	ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, ЧастиАдреса.Дом,	 " ");
	ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, ЧастиАдреса.Корпус,	 "/", Истина);
	ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Стр, ЧастиАдреса.Квартира," ");
	
	Возврат Стр;
	
КонецФункции

Процедура ЗаполнитьСтруктуруАдреса(ЧастиАдреса, Знач ЗначенияПолей);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Поле1 КАК Поле1,
	               |	КонтактнаяИнформация.Поле2 КАК Поле2,
	               |	КонтактнаяИнформация.Поле3 КАК Поле3,
	               |	КонтактнаяИнформация.Поле4 КАК Поле4,
	               |	КонтактнаяИнформация.Поле5 КАК Поле5,
	               |	КонтактнаяИнформация.Поле6 КАК Поле6,
	               |	КонтактнаяИнформация.Поле7 КАК Поле7,
	               |	КонтактнаяИнформация.Поле8 КАК Поле8,
	               |	КонтактнаяИнформация.Поле9 КАК Поле9,
	               |	КонтактнаяИнформация.Поле10 КАК Поле10,
	               |	КонтактнаяИнформация.Поле11 КАК Поле11,
	               |	КонтактнаяИнформация.Поле12 КАК Поле12,
	               |	КонтактнаяИнформация.ГородскойРайон КАК ГородскойРайон,
	               |	КонтактнаяИнформация.ТипДома КАК ТипДома,
	               |	КонтактнаяИнформация.ТипКорпуса КАК ТипКорпуса,
	               |	КонтактнаяИнформация.ТипКвартиры КАК ТипКвартиры,
	               |	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	               |	ВЫБОР
	               |		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресФактический)
	               |			ТОГДА 1
	               |		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЮридический)
	               |			ТОГДА 2
	               |		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПочтовый)
	               |			ТОГДА 3
	               |		ИНАЧЕ 4
	               |	КОНЕЦ КАК ПолеУпорядочивания
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПолеУпорядочивания";
	
	Запрос.УстановитьПараметр("Объект", ЗначенияПолей);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ЗначенияПолей) Тогда
			ДанныеАдреса = КонтактнаяИнформацияСервер.ПолучитьПредставлениеЭлементовАдресов(Выборка.ЗначенияПолей, Истина);
			Попытка
				ЗаполнитьЗначенияСвойств(ЧастиАдреса, ДанныеАдреса);
			Исключение
			КонецПопытки;
		Иначе
			ЧастиАдреса.Город = Выборка.Поле4;
			ЧастиАдреса.Дом = Выборка.Поле7;
			ЧастиАдреса.Квартира = Выборка.Поле9;
			ЧастиАдреса.Корпус = Выборка.Поле8;
			ЧастиАдреса.НаселенныйПункт = Выборка.Поле5;
			ЧастиАдреса.Район = Выборка.Поле3;
			ЧастиАдреса.Регион = Выборка.Поле2;
			ЧастиАдреса.Улица = Выборка.Поле6;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УбратьОбозначенияАдреса(Знач ИсходнаяСтрока, Город = Ложь, НаселенныйПункт = Ложь, Улица = Ложь)
	
	Если Не ЗначениеЗаполнено(ИсходнаяСтрока) Тогда 
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	ИсходнаяСтрока = ИсходнаяСтрока + " ";
	
	УдаляемыеОбозначений = Новый Массив;
	
	Если Город Тогда
		УдаляемыеОбозначений.Добавить("г");
	КонецЕсли;
	
	Если НаселенныйПункт Тогда
		УдаляемыеОбозначений.Добавить("п");
		УдаляемыеОбозначений.Добавить("д");
		УдаляемыеОбозначений.Добавить("пгт");
	КонецЕсли;
	
	Если Улица Тогда
		УдаляемыеОбозначений.Добавить("ул");
	КонецЕсли;
		
	Для Каждого Обозначение Из УдаляемыеОбозначений Цикл
		ЗаменяемаяПодстрока = " " + Обозначение + " ";
		Если СтрЧислоВхождений(ИсходнаяСтрока, ЗаменяемаяПодстрока) <> 0 Тогда
			ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ЗаменяемаяПодстрока, " ");		
		КонецЕсли;	
	КонецЦикла;
	
	ИсходнаяСтрока = СокрП(ИсходнаяСтрока);
	
	Возврат ИсходнаяСтрока;
КонецФункции

Функция ПечатьСводкаЭЛН(СсылкаНаОбъект)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_ЛистокНетрудоспособности_СводкаЭЛН";
	ТабДок.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("СводкаЭЛН");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заголовок = "Листок нетрудоспособности № " + СсылкаНаОбъект.Номер;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьПараметры = Макет.ПолучитьОбласть("ПараметрыШапки");
	
	ОбластьПараметры.Параметры.ДанныеЛПУ = СсылкаНаОбъект.ЛПУИмя + Символы.ПС + "ОГРН: " + СсылкаНаОбъект.ЛПУОГРН + ", " + СсылкаНаОбъект.ЛПУАдрес;
	
	ОбластьПараметры.Параметры.Пациент = СсылкаНаОбъект.Клиент;
	ОбластьПараметры.Параметры.Пол = СсылкаНаОбъект.Клиент.Пол;
	ОбластьПараметры.Параметры.ДатаРождения = Формат(СсылкаНаОбъект.ДатаРождения,"ДФ=dd.MM.yyyy");
	
	ОбластьПараметры.Параметры.Дубликат = ?(СсылкаНаОбъект.Дубликат, "V", "");
	
	Если СсылкаНаОбъект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Первичный Тогда
		Если ЗначениеЗаполнено(СсылкаНаОбъект.СледующийЛН) Тогда
			ОбластьПараметры.Параметры.ВидЛН1 = "Следующий ЛН №:";
			ОбластьПараметры.Параметры.НомерЛН1 = СсылкаНаОбъект.СледующийЛН;
		Иначе
			ОбластьПараметры.Параметры.ВидЛН1 = "";
			ОбластьПараметры.Параметры.НомерЛН1 = "";		
		КонецЕсли;
		ОбластьПараметры.Параметры.ВидЛН2 = "";
		ОбластьПараметры.Параметры.НомерЛН2 = "";
		ОбластьПараметры.Параметры.ВидЛН = "Первичный"; 
	Иначе
		ОбластьПараметры.Параметры.ВидЛН1 = "Предыдущий ЛН №:";
		ОбластьПараметры.Параметры.НомерЛН1 = ?(ТипЗнч(СсылкаНаОбъект.ДокументОснование) = Тип("Строка"),
												СсылкаНаОбъект.ДокументОснование,
												СсылкаНаОбъект.ДокументОснование.Номер);
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект.СледующийЛН) Тогда
			ОбластьПараметры.Параметры.ВидЛН2 = "Следующий ЛН №:";
			ОбластьПараметры.Параметры.НомерЛН2 = СсылкаНаОбъект.СледующийЛН;
		Иначе
			ОбластьПараметры.Параметры.ВидЛН2 = "";
			ОбластьПараметры.Параметры.НомерЛН2 = "";		
		КонецЕсли;
		ОбластьПараметры.Параметры.ВидЛН = "Продолжение";
	КонецЕсли;
	
	ПустаяДата = Дата(1,1,1);
	ДатаНачала = СсылкаНаОбъект.Запись1ДатаНачала;
	ДатаНачала = ?(ДатаНачала > СсылкаНаОбъект.Запись2ДатаНачала И СсылкаНаОбъект.Запись2ДатаНачала <> ПустаяДата, СсылкаНаОбъект.Запись2ДатаНачала, ДатаНачала);
	ДатаНачала = ?(ДатаНачала > СсылкаНаОбъект.Запись3ДатаНачала И СсылкаНаОбъект.Запись3ДатаНачала <> ПустаяДата, СсылкаНаОбъект.Запись3ДатаНачала, ДатаНачала);
	ОбластьПараметры.Параметры.ДатаНачала = Формат(ДатаНачала,"ДФ=dd.MM.yyyy");
	
	ДатаОкончания = СсылкаНаОбъект.Запись1ДатаОкончания;
	ДатаОкончания = ?(ДатаОкончания < СсылкаНаОбъект.Запись2ДатаОкончания, СсылкаНаОбъект.Запись2ДатаОкончания, ДатаОкончания);
	ДатаОкончания = ?(ДатаОкончания < СсылкаНаОбъект.Запись3ДатаОкончания, СсылкаНаОбъект.Запись3ДатаОкончания, ДатаОкончания);
	ОбластьПараметры.Параметры.ДатаОкончания = Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	
	ОбластьПараметры.Параметры.ПричинаНетрудоспособности = СсылкаНаОбъект.ПричинаНетрудоспособности;
	
	ТабДок.Вывести(ОбластьПараметры);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДополнительнаяПричинаНетрудоспособности) Тогда
		ОбластьПН = Макет.ПолучитьОбласть("ДопПричинаНетрудоспособности");
		ОбластьПН.Параметры.ДопПричина = СсылкаНаОбъект.ДополнительнаяПричинаНетрудоспособности;
		ТабДок.Вывести(ОбластьПН);
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ИзмененнаяПричинаНетрудоспособности) Тогда
		ОбластьПН = Макет.ПолучитьОбласть("ИзмПричинаНетрудоспособности");
		ОбластьПН.Параметры.ИзмПричина = СсылкаНаОбъект.ИзмененнаяПричинаНетрудоспособности;
		ТабДок.Вывести(ОбластьПН);
	КонецЕсли;
	
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Запись2ДатаНачала) Тогда
		ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы = "Периоды нетрудоспособности";
	Иначе
		ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы = "Период нетрудоспособности";	
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьЗаголовокТаблицы);
	
	Реквизит = "Запись1";
	Запись = 1;
	Пока Запись < 4 И ЗначениеЗаполнено(СсылкаНаОбъект[Реквизит + "ДатаНачала"]) Цикл
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		ОбластьСтрокаТаблицы.Параметры.ДатаНачала = Формат(СсылкаНаОбъект[Реквизит + "ДатаНачала"],"ДФ=dd.MM.yyyy");
		ОбластьСтрокаТаблицы.Параметры.ДатаОкончания = Формат(СсылкаНаОбъект[Реквизит + "ДатаОкончания"],"ДФ=dd.MM.yyyy");
		ОбластьСтрокаТаблицы.Параметры.ДолжностьВрача = СсылкаНаОбъект[Реквизит + "ВрачДолжность"];
		ОбластьСтрокаТаблицы.Параметры.ФИОВрача = СсылкаНаОбъект[Реквизит + "Врач"];
		ОбластьСтрокаТаблицы.Параметры.ФИОПредседателяВК = СсылкаНаОбъект[Реквизит + "ПредседательВК"];
		
		ТабДок.Вывести(ОбластьСтрокаТаблицы);
		
		Запись = Запись + 1;
		Реквизит = "Запись" + Запись; 
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти