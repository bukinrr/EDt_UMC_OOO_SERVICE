#Область РазделОписанияПеременных

&НаКлиенте
Перем ТекущийЭлементРеквизитовПрофпатолога;

&НаКлиенте
Перем СписокОтбораФакторов;

&НаКлиенте
Перем ТекущийВидМедосмотра;

&НаКлиенте
Перем ТекущийСписокПМО;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма, Ложь);
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.ТипМедосмотра.Пустая() Тогда
			Объект.ТипМедосмотра = Перечисления.ТипыМедосмотров.Периодический;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ВидМО) Тогда
			Объект.ВидМО = Справочники.ВидыМедосмотров.ПоПриказу29н;	
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		
		Если Объект.Ссылка.Пустая() 
			И Объект.ФакторыИУсловияРаботы.Количество() = 0 
		Тогда
			//Если Не ЗначениеЗаполнено(Объект.ВидМедосмотра) Тогда
			//	Объект.ВидМедосмотра = Справочники.ВидыМедосмотров.ПоПриказу29н;
			//КонецЕсли;
			
			Вредности = ПолучитьВредностиИзПоследнегоПМОСервер(Объект.Профессия, Объект.МестоРаботы, Объект.СписокНаПрохождениеМедосмотра, Объект.Клиент, Объект.ВидМО, Объект.Ссылка);
			Для Каждого Вредность Из Вредности Цикл
				Объект.ФакторыИУсловияРаботы.Добавить().Фактор = Вредность.Вредность;
			КонецЦикла;
		КонецЕсли;
				
		Если Объект.Ссылка.Пустая() 
			И Объект.ДействияМедосмотра.Количество() = 0 
		Тогда
			ПерезаполнитьДействияМедосмотра();
		КонецЕсли;
		
		ПерезаполнитьРекомендации();
		ПерезаполнитьПротивопоказания();
		ПерезаполнитьСопуствующиеПаталогии();
		
		НастроитьВидЭлементовНазначений();
		
	КонецЕсли;
	
	// Автоопределение текущей страницы Назначения или Противопоказания
	Если Не Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументПрохождения", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Прием.Ссылка
		|ИЗ
		|	Документ.Прием КАК Прием
		|ГДЕ
		|	Прием.ПервичныйПрием = &ДокументПрохождения"
		;
		Если Не Запрос.Выполнить().Пустой() Тогда
			Элементы.ГруппаСтраницВыбора.ТекущаяСтраница = Элементы.ГруппаПротивопоказания;
		КонецЕсли;
		ОбновитьОписаниеВредныхФакторовКритическихПротивопоказаний();

	КонецЕсли;
	
	// Заключение
	Если Не ЗначениеЗаполнено(Объект.ДатаЗавершения)
		Или Не ЗначениеЗаполнено(Объект.ПредседательМедКомиссии)
	Тогда
		Элементы.ГруппаЗаключение.Видимость = Ложь;
		Элементы.СделатьЗаключение.Видимость = Истина;
	КонецЕсли;
	
	ЗаполнитьДеревоЗначенийПараметров();
	ВредностиДиагноза = ПолучитьВредностиКлиентаДляДиагнозов(Объект.Клиент, Объект.ВредныеФакторыПротивопоказаний, Объект.ФакторыИУсловияРаботы);
	
	ЗаполнитьОтметкиПоРегистру();
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		Элементы.КнопкаСоздатьШтрихкод.Доступность = (РаботаСТорговымОборудованиемСервер.ПолучитьШтрихкодВладельца(Объект.Ссылка) = Неопределено);
	КонецЕсли;
	
	ОбновитьСписокВыбораГруппыЗдоровья(Элементы.ДиспансернаяГруппа, Объект.Клиент, Объект.ДатаЗавершения);
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаСохраненныеДанные", Не ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра));
	
	// ЭЦП
	ИспользуютсяЭП = ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК();
	Если ИспользуютсяЭП И Не Объект.Ссылка.Пустая() Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьВидимостьПоЭП();
	
	УстановитьПодсказкуВводаСведенияОПрививкахИИнфекционныйАнамнез();
	
	// РЭМД
	ИспользуетсяРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	
	ВыводитьГруппуЭП = ИспользуютсяЭП И ЗначениеЗаполнено(Объект.ДатаЗавершения) И (ИспользуетсяРЭМД Или МедосмотрыСервер.ЕстьЗаполненныеМакетыПриказов(Объект.ФакторыИУсловияРаботы));
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ЭП", ВыводитьГруппуЭП);
	
	УстановитьВидимостьГруппыЗаключения(Истина);
	
	Если Параметры.Свойство("ОтключитьКнопкиПроведения") Тогда
		СкрытьКнопкиПроведения();
	КонецЕсли;
	
	ОбновитьСвязанныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	УстановитьОтбор();
	ПодключитьОбработчикОжидания("УстановитьТекущийЭлементГруппыПрофпатолога",0.1,Истина);
	ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновитьОтборыДоступныхЗначений();
	УстановитьПараметрыВыбораДляФакторыИУсловияРаботы();
	УстановитьДоступностьФакторовИУсловийРабот();
	ТекущийВидМедосмотра = Объект.ВидМО;
	
	Если Не Объект.ПодписанЭП Тогда
		МедосмотрыКлиентСервер.ОбновитьИдентификаторыПриказов(Объект, Модифицированность);
	КонецЕсли;
	
	ТекущийСписокПМО = Объект.СписокНаПрохождениеМедосмотра;
	
	УстановитьВидимостьПолейСвязанныхСПМО();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПредыдущийСПМО = Объект.Ссылка.СписокНаПрохождениеМедосмотра;
		ПредыдущийКлиент = Объект.Ссылка.Клиент;
		
		Если ЗначениеЗаполнено(ПредыдущийСПМО)
			И ЗначениеЗаполнено(ПредыдущийКлиент)
			И (ПредыдущийСПМО <> ТекущийОбъект.СписокНаПрохождениеМедосмотра
				Или ПредыдущийКлиент <> ТекущийОбъект.Клиент)
		Тогда
			// Убеждаемся, что в старом списке на прохождение этот клиент был.
			Если ПредыдущийСПМО.Клиенты.Найти(ПредыдущийКлиент, "Клиент") <> Неопределено Тогда
				// Убеждаемся, что к старому списку этот клиент не увязан и другим прохождением медосмотра.
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
				Запрос.УстановитьПараметр("Клиент", ПредыдущийКлиент);
				Запрос.УстановитьПараметр("СписокНаПрохождениеМедосмотра", ПредыдущийСПМО);
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПрохождениеМедосмотра.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
				|ГДЕ
				|	ПрохождениеМедосмотра.Проведен
				|	И ПрохождениеМедосмотра.Клиент = &Клиент
				|	И ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра
				|	И ПрохождениеМедосмотра.Ссылка <> &ЭтотДокумент"
				;
				Если Запрос.Выполнить().Пустой() Тогда
					// Фиксируем, что нужно отработать старый список на удаление из него клиента.
					ПараметрыЗаписи.Вставить("ПредыдущийСПМО", ПредыдущийСПМО);
					ПараметрыЗаписи.Вставить("ПредыдущийКлиент", ПредыдущийКлиент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем и фиксируем, что нужно добавить клиента в новый список.
	Если ЗначениеЗаполнено(ТекущийОбъект.СписокНаПрохождениеМедосмотра)
		И ТекущийОбъект.СписокНаПрохождениеМедосмотра.Клиенты.Найти(ТекущийОбъект.Клиент, "Клиент") = Неопределено
	Тогда
		ПараметрыЗаписи.Вставить("ДобавитьКлиентаВНовыйСписокНаПрохождение", Истина);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТЗДопДанныхПрохожденияМО", СформироватьТЧДляЗаписиВРегистрДопДанныхМО());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МедосмотрыСервер.ЗаписатьОтметкиВыполненияДействияМедосмотра(ТекущийОбъект.Ссылка, ТекущийОбъект.Ссылка, Объект.ДействияМедосмотра);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Ложь, ЭтаФорма);
	
	// Автоматические доабвления-удаления клиента в список на прохождения при измненении его в шапке документа.
	Если ПараметрыЗаписи.Свойство("ДобавитьКлиентаВНовыйСписокНаПрохождение")
		И ЗначениеЗаполнено(ТекущийОбъект.СписокНаПрохождениеМедосмотра)
	Тогда
		Попытка
			СПМООбъект = ТекущийОбъект.СписокНаПрохождениеМедосмотра.ПолучитьОбъект();
			НоваяСтрока = СПМООбъект.Клиенты.Добавить();
			НоваяСтрока.Клиент = ТекущийОбъект.Клиент;
			НоваяСтрока.ТипМедосмотра = ТекущийОбъект.ТипМедосмотра;
			СПМООбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ПараметрыЗаписи.Вставить("ТекущийСписокНаПрохождениеИзменен", Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ОбновитьОписаниеВредныхФакторовКритическихПротивопоказаний();
	
	Если ИспользуютсяЭП Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСвязанныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьПрохожденияМедосмотра");
	ЗаполнитьОтметкиПоРегистру();
	Элементы.КнопкаСоздатьШтрихкод.Доступность = (РаботаСТорговымОборудованиемСервер.ПолучитьШтрихкодВладельца(Объект.Ссылка) = Неопределено);
	
	Если ПараметрыЗаписи.Свойство("ТекущийСписокНаПрохождениеИзменен") Тогда
		Оповестить("СписокНаПрохождениеИзменен", Объект.СписокНаПрохождениеМедосмотра);
	КонецЕсли;
	
	// Предложить удалить клиента из старого списка на прохождение
	Если ПараметрыЗаписи.Свойство("ПредыдущийСПМО") Тогда
			
		ТекстВопроса = НСтр("ru='Был выбран другой список на прохождение. Удалить работника из прошлого списка?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			УдалитьКлиентаИзСпискаНаМедосмотр(ПараметрыЗаписи.ПредыдущийСПМО, ПараметрыЗаписи.ПредыдущийКлиент);
			Оповестить("СписокНаПрохождениеИзменен", ПараметрыЗаписи.ПредыдущийСПМО);
		КонецЕсли; 
	КонецЕсли;
	
	//ПодключитьОбработчикОжидания("ПослеЗаписиОбновитьДополнительныеРеквизиты", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьОтметки" Тогда
		Если Параметр.ПрохождениеМО = Объект.Ссылка Тогда
			ЗаполнитьОтметкиПоРегистру(); // Что делать с изменениями
			ЗаполнитьДеревоЗначенийПараметров();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменилисьПодписи"
		И Параметр = Объект.Ссылка
	Тогда
		ОбновитьДанныеПослеПодписания();
		ЭтотОбъект.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПодписей"
		И Параметр = Объект.Ссылка
	Тогда
		ОбновитьСписокПодписей();
	ИначеЕсли ИмяСобытия = "ВыборМедицинскогоПротивопоказанияИДиагноза" Тогда
		Если Параметр.Свойство("ВладелецФормы")
			И Параметр.ВладелецФормы = ЭтаФорма
		Тогда
			ТекущиеДанные = Элементы.ВыявленныеПротивопоказания.ТекущиеДанные;
			ТекущиеДанные.Диагноз = Параметр.Диагноз;
			ТекущиеДанные.Противопоказание = Параметр.Противопоказание;
			ТекущиеДанные.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.КритичныеПротивопоказания);
			Если ЗначениеЗаполнено(Параметр.ВредныйФактор) Тогда
				ТекущиеДанные.ВредныеФакторы = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Параметр.ВредныйФактор, "НомерПП");
				СтрокаВредности = Объект.ВредныеФакторыПротивопоказаний.Добавить();
				СтрокаВредности.КлючСтроки = Объект.КритичныеПротивопоказания.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()).КлючСтроки;
				СтрокаВредности.ВредныйФактор = Параметр.ВредныйФактор;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПрохождениеМедосмотраИзменено" 
		И Параметр = Объект.Ссылка
	Тогда
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ОбновленыПМОИзСПМО"
		И ТипЗнч(Параметр) = Тип("Структура") 
	Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) 
			И Объект.СписокНаПрохождениеМедосмотра = Параметр.СсылкаСПМО
			И (Параметр.ОбновленыВсе 
				Или Параметр.мОбновленных.Найти(Объект.Ссылка) <> Неопределено) 
		Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФакторыИУсловияРаботыФакторПриИзменении(Элемент)
	
	Если Объект.ДействияМедосмотра.Количество() > 0 Тогда
		ТекстВопроса = "Список вредных факторов был изменен, перезаполнить действия медосмотра?";
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДействияМедосмотраПерезаполнить(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействияМедосмотраПерезаполнить(Команда)
	
	ПерезаполнитьДействияМедосмотра();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьОтметкиПоРегистру();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьСопутсвующуюПаталогию(Команда)
	ПерезаполнитьСопуствующиеПаталогии();
КонецПроцедуры

&НаКлиенте
Процедура СделатьЗаключение(Команда)
	
	Если Объект.ДействияМедосмотра.НайтиСтроки(Новый Структура("Выполнено", Ложь)).Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаключении",ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru='Есть не пройденные врачи или исследования либо не отмеченные как пройденные. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
	Иначе
		СделатьЗаключениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрием(Команда)
	
	Если Элементы.ГруппаСтраницВыбора.ТекущаяСтраница = Элементы.ГруппаПротивопоказания Тогда
		КлючЗаписи = Элементы.ПротивопоказанияВыявленныеВрачами.ТекущаяСтрока;
		Если КлючЗаписи <> Неопределено Тогда
			ОткрытьЗначение(ВернутьРегистраторИзКлючаЗаписи(КлючЗаписи));
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницВыбора.ТекущаяСтраница = Элементы.ГруппаПрочиеДиагнозы Тогда
		ТД = Элементы.СопуствующаяПаталогия.ТекущиеДанные;
		Если ТД <> Неопределено Тогда
			ОткрытьЗначение(ТД.Прием);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		
		Возврат;
		
	КонецЕсли;

	Структура = Новый Структура("ШтрихКод, ТипШтрихкода, ЕдиницаИзмерения, ХарактеристикаНоменклатуры", "", ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13"), ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"), ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	РаботаСТорговымОборудованиемКлиент.КнопкаНовыйШрихкодНажатие(Структура, Объект.Ссылка);
	
	Элементы.КнопкаСоздатьШтрихкод.Доступность = (РаботаСТорговымОборудованиемСервер.ПолучитьШтрихкодВладельца(Объект.Ссылка) = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВредностиИзПредыдущегоПрохождения(Команда)
	
	Отбор = Новый Структура ("Клиент", Объект.Клиент);
	Отбор.Вставить("СписокНаПрохождениеМедосмотра", Объект.СписокНаПрохождениеМедосмотра);
	ОткрытьФорму("Документ.ПрохождениеМедосмотра.ФормаВыбора", Отбор,,,,, Новый ОписаниеОповещения("ЗаполнитьВредностиИзПредыдущегоПрохожденияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Заключения(Команда)
	
	Если Объект.Ссылка.Пустая() Или Объект.ДействияМедосмотра.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Необходимо записать документ и заполнить таблицу действий медосмотра'"));
		Возврат;
	КонецЕсли;
	
	СписокДействий = Новый Массив;
	Для каждого СтрокаДействия Из Объект.ДействияМедосмотра Цикл
		СписокДействий.Добавить(СтрокаДействия.Действие);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("Действия, ПрохождениеМедосмотра", СписокДействий, Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ЗаключенияПоДействиямМедосмотра.Форма.ЗаключенияМедосмотра", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ПослеЗакрытияЗаключенияПоДействиямМедосмотра", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытияСправки(Команда)
	//Элементы[Команда.Имя];
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСправки(Команда)
	
	ТекущаяСтраница = Элементы.Умц_ГруппаСправокСтраницы.ТекущаяСтраница;
	ИмяТабДока = НайтиИмяПоляТабличногоДокументаПоГруппе(ТекущаяСтраница);
	ЭтаФорма[ИмяТабДока].Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	ОбновитьПредпросмотрСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоляЗаключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Параметр = Неопределено;
	Если Элемент.Имя = "Заключение" Тогда
		Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыHTML.ПрофпатологЗаключение");
		ИмяРеквизитаОбъекта = "Заключение";
	ИначеЕсли Элемент.Имя = "Рекомендации" Тогда
		Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыHTML.ПрофпатологРекомендации");
		ИмяРеквизитаОбъекта = "Рекомендации";
	ИначеЕсли Элемент.Имя = "СведенияОПрививках" Тогда
		Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыHTML.ПрофпатологСведенияОПрививках");
		ИмяРеквизитаОбъекта = "СведенияОПрививках";
	ИначеЕсли Элемент.Имя = "ИнфекционныйАнамнез" Тогда
		Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыHTML.ПрофпатологИнфекционныйАнамнез");
		ИмяРеквизитаОбъекта = "ИнфекционныйАнамнез";
	ИначеЕсли Элемент.Имя = "ДополнениеКЗаключению" Тогда
		Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыHTML.ПрофпатологДополнениеКЗаключению");
		ИмяРеквизитаОбъекта = "ДополнениеКЗаключению";
	Иначе
		Возврат;
	КонецЕсли;
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВыбораЗначенияПараметраЗавершение", ЭтотОбъект, ИмяРеквизитаОбъекта);
	
	Если Элемент.Имя = "ИнфекционныйАнамнез" Тогда
		МассивФакторов = Новый Массив;
		Для Каждого СтрокаФактора Из Объект.ФакторыИУсловияРаботы Цикл 
			МассивФакторов.Добавить(СтрокаФактора.Фактор);	
		КонецЦикла;
		ОткрытьФорму("Обработка.ИнтерфейсВводаПолейЭМД.Форма.ИнфекционныйАнамнез",Новый Структура("ВредныеФакторы", МассивФакторов),ЭтотОбъект,,,,ОповещениеОВыборе,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		МедицинскаяДеятельностьКлиент.ПоказатьФормуВводаТекста(Строка(Элемент.ТекстРедактирования), Параметр, ОповещениеОВыборе, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеПротивопоказанияПротивопоказаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	
	СтруктураПараметров = Новый Структура("Клиент",Объект.Клиент);
	СтруктураПараметров.Вставить("ТипМедосмотра", Объект.ТипМедосмотра);
	СтруктураПараметров.Вставить("ПрохождениеМедосмотра", Объект.Ссылка);
	ДанныеВыбора = ОткрытьФорму("Справочник.МедицинскиеПротивопоказания.Форма.ФормаПодбораСДиагнозом",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофессияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МедосмотрыКлиент.ОбработкаВыбораПрофессии(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ВредныеФакторы = ПолучитьВредностиИзПоследнегоПМОСервер(Объект.Профессия, Объект.МестоРаботы, Объект.СписокНаПрохождениеМедосмотра, Объект.Клиент, Объект.ВидМО, Объект.Ссылка);
	
	Если Объект.ФакторыИУсловияРаботы.Количество() = 0 Тогда
		ПерезаполнитьВредности(ВредныеФакторы);
	Иначе
		Ответ = Неопределено;
		Если ВредныеФакторы.Количество() > 0 Тогда 
			Ответ = Вопрос("Перезаполнить факторы и условия работы клиента?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Ответ = Вопрос("Очистить факторы и условия работы клиента?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПерезаполнитьВредности(ВредныеФакторы);
		КонецЕсли;
	КонецЕсли;

	УстановитьОтбор();
	Если Объект.ДействияМедосмотра.Количество() = 0 Тогда
		ПерезаполнитьДействияМедосмотра();
	Иначе
		ПерезаполнитьПротивопоказания();
	КонецЕсли;
	
	ОбновитьДанныеРаботникаПоКлиенту();
	ОбновитьСписокВыбораГруппыЗдоровья(Элементы.ДиспансернаяГруппа, Объект.Клиент, Объект.ДатаЗавершения);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "Тестовый") = Истина Тогда
		Объект.Тестовый = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендованныеДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ИзмененияЗапрещены Тогда
		НоваяСтрока = Объект.ДействияМедосмотра.Добавить();
		НоваяСтрока.Действие = Элементы.РекомендованныеДействия.ТекущиеДанные.ДействиеМедосмотра;
		НоваяСтрока.НазначенДополнительно = Истина;
		РекомендованныеДействия.Удалить(РекомендованныеДействия.НайтиПоИдентификатору(ВыбраннаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияМедосмотраПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		
		Элементы.ДействияМедосмотра.ТекущиеДанные.НазначенДополнительно = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействияМедосмотраДействиеМедосмотраПриИзменении(Элемент)
	ПерезаполнитьРекомендации();
КонецПроцедуры

&НаКлиенте
Процедура ДействияМедосмотраПослеУдаления(Элемент)
	ПерезаполнитьРекомендации();//?
КонецПроцедуры

&НаКлиенте
Процедура ПротивопоказанияВыявленныеВрачамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборПротивопоказанияСервер(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка
		ВидНаправления = ОбщегоНазначения.ЗначениеПеречисленияПоИмени(Элемент.Имя, "ВидыНаправленийПоРезультатамМедосмотра");
		Если ЗначениеЗаполнено(ВидНаправления) Тогда
			ДокументыНаправления = ПолучитьДокументыНаправления(Объект.Ссылка, ВидНаправления);
			Если ДокументыНаправления.Количество() = 1 Тогда
				ОткрытьЗначение(ДокументыНаправления[0]);
			Иначе
				СписокВыбора = Новый СписокЗначений;
				СписокВыбора.ЗагрузитьЗначения(ДокументыНаправления);
				Отбор = Новый Структура("Ссылка", СписокВыбора);
				ОткрытьФорму("Документ.Прием.ФормаВыбора", Новый Структура("Отбор", Отбор));
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДиспансернаяГруппаПриИзменении(Элемент)
	
	Если Объект.ДиспансернаяГруппа <> ПредопределенноеЗначение("Перечисление.ГруппыЗдоровья.I")
		И ЗначениеЗаполнено(Объект.ДиспансернаяГруппа)
	Тогда
		Объект.НуждаетсяВДиспансерномНаблюдении = Истина;
	КонецЕсли;
	
	Если (Объект.ДиспансернаяГруппа = ПредопределенноеЗначение("Перечисление.ГруппыЗдоровья.I")
		ИЛИ  Объект.ДиспансернаяГруппа = ПредопределенноеЗначение("Перечисление.ГруппыЗдоровья.II"))
		И Объект.СтойкаяУтратаТрудоспособности Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пациента отмечена стойкая утрата трудоспособности. Установлена группа здоровья: " + Объект.ДиспансернаяГруппа + ". Убедитель с правильности введенных данных");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеПротивопоказанияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ВыявленныеПротивопоказания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		мсСтр = Объект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
		Для Каждого СтрокаВредность Из мсСтр Цикл
			Объект.ВредныеФакторыПротивопоказаний.Удалить(СтрокаВредность);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеПротивопоказанияПослеУдаления(Элемент)
	
	ПерезаполнитьСопуствующиеПаталогии();

КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеПротивопоказанияПриИзменении(Элемент)
	
	ПерезаполнитьСопуствующиеПаталогии();
	
КонецПроцедуры

&НаКлиенте
Процедура СтойкаяУтратаТрудоспособностиПриИзменении(Элемент)
	
	Если Объект.СтойкаяУтратаТрудоспособности
		И (Объект.ДиспансернаяГруппа = ПредопределенноеЗначение("Перечисление.ГруппыЗдоровья.I")
			Или Объект.ДиспансернаяГруппа = ПредопределенноеЗначение("Перечисление.ГруппыЗдоровья.II"))
	Тогда
		Объект.ДиспансернаяГруппа = ПредопределенноеЗначение("Перечисление.ГруппыЗдоровья.IIIа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопуствующаяПаталогияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элементы.СопуствующаяПаталогия.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ОткрытьЗначение(ТД.Прием);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПараметров1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоПараметров1.ТекущиеДанные;
	Если ТекущиеДанные.Уровень = 2 Тогда
		Если ТекущийЭлементРеквизитовПрофпатолога <> Неопределено Тогда
			Объект[ТекущийЭлементРеквизитовПрофпатолога.Имя] = СокрЛП(Объект[ТекущийЭлементРеквизитовПрофпатолога.Имя] + 
			" " + ТекущиеДанные.Значение);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеПротивопоказанияВредныеФакторыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВыявленныеПротивопоказания.ТекущиеДанные;
	ВредностиДиагноза.Очистить();
	Для Каждого Элемента Из Объект.ФакторыИУсловияРаботы Цикл
		ВредностиДиагноза.Добавить(Элемента.Фактор, ОбщегоНазначения.ПолучитьЗначениеРеквизита(Элемента.Фактор, "Представление")); 	
	КонецЦикла;
	// ВредностиДиагноза
	Отбор = Новый Структура("КлючСтроки, ВредныйФактор", ТекущиеДанные.КлючСтроки);
	Для Каждого ЭлементСписка Из ВредностиДиагноза Цикл
		Отбор.ВредныйФактор = ЭлементСписка.Значение;
		ЭлементСписка.Пометка = Объект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Отбор).Количество() <> 0;
	КонецЦикла;
	ВредностиДиагноза.ОтметитьЭлементы("Выберите нужные факторы");
	
	мсСтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаВредности Из Объект.ВредныеФакторыПротивопоказаний Цикл
		Если СтрокаВредности.КлючСтроки = ТекущиеДанные.КлючСтроки Тогда
			ЭлементСписка = ВредностиДиагноза.НайтиПоЗначению(СтрокаВредности.ВредныйФактор);
			Если ЭлементСписка = Неопределено
				Или Не ЭлементСписка.Пометка 
				Тогда
				мсСтрокиКУдалению.Добавить(СтрокаВредности);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВредности Из мсСтрокиКУдалению Цикл
		Объект.ВредныеФакторыПротивопоказаний.Удалить(СтрокаВредности);	
	КонецЦикла;
	
	Отбор = Новый Структура("КлючСтроки, ВредныйФактор", ТекущиеДанные.КлючСтроки);
	Для Каждого ЭлементСписка Из ВредностиДиагноза Цикл
		Если ЭлементСписка.Пометка Тогда
			Отбор.ВредныйФактор = ЭлементСписка.Значение;
			Если Объект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СтрокаВредности = Объект.ВредныеФакторыПротивопоказаний.Добавить();
				СтрокаВредности.КлючСтроки = Объект.КритичныеПротивопоказания.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()).КлючСтроки;
				СтрокаВредности.ВредныйФактор = ЭлементСписка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;                                                                                                                                     
	
	ОбновитьОписаниеВредныхФакторовКритическихПротивопоказаний();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияМедосмотраВыполненоПриИзменении(Элемент)
	
	ТД = Элементы.ДействияМедосмотра.ТекущиеДанные;
	
	Если ТД <> Неопределено Тогда
		
		ТД.Изменено = НЕ ТД.Изменено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра) Тогда
		
		СтандартнаяОбработка = Ложь;
		МассивКлиентов = ПолучитьНеПрошедших(Объект.СписокНаПрохождениеМедосмотра);
		
		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
			МассивКлиентов.Добавить(Объект.Клиент);	
		КонецЕсли;
	
		Отбор = Новый Структура("Ссылка",МассивКлиентов);
		ФормаВыбора = ПолучитьФорму("Справочник.Клиенты.ФормаВыбора",Новый Структура("Отбор,ТекущаяСтрока",Отбор,Объект.Клиент));
				
		ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
		Если ЗначениеВыбора <> Неопределено Тогда
			Объект.Клиент = ЗначениеВыбора;
			КлиентПриИзменении(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МедицинскаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Клиент) И ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МедКарты = ПолучитьНеЗакрытыеМедкарты025У(Объект.Клиент, Объект.СписокНаПрохождениеМедосмотра, Объект.Дата);
		
		Если ЗначениеЗаполнено(Объект.МедицинскаяКарта) Тогда
			МедКарты.Добавить(Объект.МедицинскаяКарта);	
		КонецЕсли;
	
		Отбор = Новый Структура("Ссылка, Клиент", МедКарты, Объект.Клиент);
		ФормаВыбора = ПолучитьФорму("Справочник.МедицинскиеКарты.ФормаВыбора",Новый Структура("Отбор,ТекущаяСтрока",Отбор, Объект.МедицинскаяКарта));
				
		ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
		Если ЗначениеВыбора <> Неопределено Тогда
			Объект.МедицинскаяКарта = ЗначениеВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МедицинскаяКартаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 И ЗначениеЗаполнено(Объект.Клиент) И ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МедКарты = ПолучитьНеЗакрытыеМедкарты025У(Объект.Клиент, Объект.СписокНаПрохождениеМедосмотра, Объект.Дата);
		
		Если ЗначениеЗаполнено(Объект.МедицинскаяКарта)
			И МедКарты.Найти(Объект.МедицинскаяКарта) = Неопределено
		Тогда
			МедКарты.Добавить(Объект.МедицинскаяКарта);	
		КонецЕсли;
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(МедКарты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СписокНаПрохождениеМедосмотраПриИзменении(Элемент)
	 
	ВидМедосмотраНовогоСПМО = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.СписокНаПрохождениеМедосмотра, "ВидМО"); 
	Если Объект.ФакторыИУсловияРаботы.Количество() > 0 
		И ТекущийСписокПМО <> Объект.СписокНаПрохождениеМедосмотра
		И ВидМедосмотраНовогоСПМО <> Объект.ВидМО
	Тогда
		ТекстВопроса = "Выбранный список на прохождение медосмотра имеет другой ""Вид медосмотра"", вредные факторы прохождения будут очищены, продолжить?";
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ФакторыИУсловияРаботы.Очистить();
			Объект.ВидМО = ВидМедосмотраНовогоСПМО;
			ТекущийСписокПМО = Объект.СписокНаПрохождениеМедосмотра;
		Иначе
			Объект.СписокНаПрохождениеМедосмотра = ТекущийСписокПМО;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаСохраненныеДанные", Не ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра));
	УстановитьВидимостьПолейСвязанныхСПМО();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещние = Новый ОписаниеОповещения("ОбработкаОповещнияВыбораМестаРаботы", ЭтотОбъект);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", , ЭтаФорма, , , , Оповещние);
КонецПроцедуры

&НаКлиенте
Процедура ПрофессияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	МедосмотрыСервер.ПрофессияОкончаниеВводаТекстаНаСервере(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМедосмотраПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидМО) Тогда 
		Если ТекущийВидМедосмотра <> Объект.ВидМО Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВидМедосмотраПриИзмененииПродолжение", ЭтотОбъект);
			ТекстВопроса = "Вид медосмотра был изменен, вредные факторы клиента и действия медосмотра будут очищены, продолжить?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		Объект.ВидМО = ТекущийВидМедосмотра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМедосмотраПриИзмененииПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьВидимостьГруппыЗаключения();
		УстановитьПараметрыВыбораДляФакторыИУсловияРаботы();
		Объект.ФакторыИУсловияРаботы.Очистить();
		Объект.ДействияМедосмотра.Очистить();
		ТекущийВидМедосмотра = Объект.ВидМО;
	Иначе
		Объект.ВидМО = ТекущийВидМедосмотра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыСправокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьУсловноеОформлениеДляСправок(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриемаЗначениеПриИзменении(Элемент)
	
	ПараметрыПриемаЗначениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФакторыИУсловияРаботыПриИзменении(Элемент)
	
	МедосмотрыКлиентСервер.ОбновитьИдентификаторыПриказов(Объект, Модифицированность);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПодсказкуВводаСведенияОПрививкахИИнфекционныйАнамнез()
	
	 Элементы.СведенияОПрививках.ПодсказкаВвода = ПланыВидовХарактеристик.ПараметрыHTML.ПрофпатологСведенияОПрививках.ЗначениеПоУмолчанию;
	 Элементы.ИнфекционныйАнамнез.ПодсказкаВвода = ПланыВидовХарактеристик.ПараметрыHTML.ПрофпатологИнфекционныйАнамнез.ЗначениеПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолейСвязанныхСПМО()
	
	Элементы.ТипМедосмотра.Доступность = Не ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра);
	Элементы.ВидМедосмотра.Доступность = Не ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьКнопкиПроведения()
	
	Если Не Объект.Проведен Тогда
		
		ФормаПровестиИЗакрыть = ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаПровестиИЗакрыть");
		Если ФормаПровестиИЗакрыть <> Неопределено Тогда
			ФормаПровестиИЗакрыть.Видимость = Ложь;
		КонецЕсли;
		
		ФормаПроведение = ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаПроведение");
		Если ФормаПроведение <> Неопределено Тогда
			ФормаПроведение.Видимость = Ложь;
		КонецЕсли;
		
		ФормаЗаписать = ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаЗаписать");
		Если ФормаЗаписать <> Неопределено Тогда
			ФормаЗаписать.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораДляФакторыИУсловияРаботы()
	
	//мЗначенийПараметровВыбораПриказы = Новый Массив;
	//мЗначенийПараметровВыбораСправки = Новый Массив;
	//
	//Для Каждого Эл Из ПолучитьМассивПриказовИИныхМедосмотров(Объект.ВидМедосмотра) Цикл
	//	Если ТипЗнч(Эл) = Тип("СправочникСсылка.ПриказыМедосмотров") Тогда
	//		мЗначенийПараметровВыбораПриказы.Добавить(Эл);
	//	Иначе
	//		мЗначенийПараметровВыбораСправки.Добавить(Эл);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//мПараметровВыбора = Новый Массив;
	//
	//Если мЗначенийПараметровВыбораПриказы.Количество() > 0 Тогда
	//	НовыйПараметр = Новый ПараметрВыбора("Отбор.Приказ", Новый ФиксированныйМассив(мЗначенийПараметровВыбораПриказы));
	//	мПараметровВыбора.Добавить(НовыйПараметр);
	//КонецЕсли;
	
	//Если мЗначенийПараметровВыбораСправки.Количество() > 0 Тогда
	//	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(мЗначенийПараметровВыбораСправки));
	//	мПараметровВыбора.Добавить(НовыйПараметр);
	//КонецЕсли;
	
	//Элементы.ФакторыИУсловияРаботыФактор.ПараметрыВыбора = Новый ФиксированныйМассив(мПараметровВыбора);
	
	мПараметровВыбора = Новый Массив;
	мЗначенийПараметровВыбораПриказы = МедосмотрыСервер.ПолучитьМассивПриказовИИныхМедосмотров(Объект.ВидМО);
	мЗначенийПараметровВыбораПриказы = Новый ФиксированныйМассив(мЗначенийПараметровВыбораПриказы);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", мЗначенийПараметровВыбораПриказы);
	мПараметровВыбора.Добавить(НовыйПараметр);
	Элементы.ФакторыИУсловияРаботыФактор.ПараметрыВыбора = Новый ФиксированныйМассив(мПараметровВыбора);
	СписокОтбораФакторов = мЗначенийПараметровВыбораПриказы; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыЗаключения(ПриСозданииФормы = Ложь)
	
	УничтожитьДополнительныеРеквизитыИПоля();
	
	// Если заключения нет то все это не нужно
	Если Объект.ДатаЗавершения = Дата(1,1,1,0,0,0) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем запомненные из регистра данные
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеПрохожденийМО.Ключ КАК Ключ,
			|	ДанныеПрохожденийМО.Приказ КАК Приказ,
			|	ДанныеПрохожденийМО.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.ДанныеПрохожденийМО КАК ДанныеПрохожденийМО
			|ГДЕ
			|	ДанныеПрохожденийМО.ДокументПрохожденияМО = &ДокументПрохожденияМО";
		
		Запрос.УстановитьПараметр("ДокументПрохожденияМО", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		тзЗначенияДопПолей = РезультатЗапроса.Выгрузить();
	Иначе
		тзЗначенияДопПолей = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Элементы.ГруппаЗаключение29Н.Видимость = Ложь;
	
	СоздатьДополнительныеРеквизитыНаФормеДляЗаключения(тзЗначенияДопПолей);
	
	СоздатьЭлементыНаФормеИСоздатьДанныеДляСправок(ПриСозданииФормы);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДополнительныеРеквизитыНаФормеДляЗаключения(тзЗначенияДопПолей)
	
	Если ЗначениеЗаполнено(Объект.ВидМО) Тогда
		
		ВидМО = Объект.ВидМО;
		Сч = 0;
		ДобавляемыеРеквизиты = Новый Массив;
		
		ОбработанныеПриказы = Новый Массив;
		
		ФакторыИПриказы = ПолучитьСписокУникальныхПриказовИСправок(ВидМО);
		
		Для Каждого СтрокаПриказ Из ФакторыИПриказы Цикл
			ЭтоСправка = Ложь;
			// Добавляем реквизиты на форму для ввода доп данных по медосмотрам
			// при этом если есть алгоритм расчета вычисляем его
			// для 29н выводим старое представление
			Если СтрокаПриказ = Справочники.ПриказыМедосмотров.Приказ29н Или СтрокаПриказ = Справочники.ПриказыМедосмотров.Приказ302н Тогда
				Элементы.ГруппаЗаключение29Н.Видимость = Истина;
			Иначе
				Если ТипЗнч(СтрокаПриказ) = Тип("СправочникСсылка.ПриказыМедосмотров") Тогда
					ДополнительныеПоля = СтрокаПриказ.ДополнительныеПоля;
				Иначе
					ДополнительныеПоля = СтрокаПриказ.Приказ.ДополнительныеПоля;
					ЭтоСправка = Истина;
				КонецЕсли;
				
				Для Каждого ДопПоле Из ДополнительныеПоля Цикл 
					ИмяРеквизита = "п_" + Сч + "_" + ДопПоле.Ключ;
					//Тип
					мТипов = Новый Массив;
					Если ТипЗнч(ДопПоле.ТипЗначения) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
						ТипРеквизита = ТипЗнч(ДопПоле.ТипЗначения.ЗначениеПустойСсылки);
						мТипов.Добавить(ТипРеквизита);
					Иначе
						Попытка
							ТипРеквизита = Тип(ДопПоле.ТипЗначения);
							мТипов.Добавить(ТипРеквизита);
						Исключение
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					ОписаниеТипов = Новый ОписаниеТипов(мТипов);
					Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,"", ДопПоле.Синоним);
					НоваяСтрока = ДопРеквизиты.Добавить();
					НоваяСтрока.Ключ = ДопПоле.Ключ;
					НоваяСтрока.Приказ = СтрокаПриказ;
					НоваяСтрока.ИмяНаФорме = ИмяРеквизита;
					НоваяСтрока.ТекущееЗначение = ВычислитьЗначениеПредзаполнения(ДопПоле.АлгоритмЗаполнения, Объект.Ссылка);
					ДобавляемыеРеквизиты.Добавить(Реквизит);
					Сч = Сч + 1;
				КонецЦикла;
				
				Если ЭтоСправка Тогда
					Ключ = "ВредныйФакторСправки"; 
					ИмяРеквизита = Ключ + Сч;
					ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ПереченьВредныхФакторовИРабот");
					Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,"");
					НоваяСтрока = ДопРеквизиты.Добавить();
					НоваяСтрока.Ключ = Ключ + Сч;
					НоваяСтрока.Приказ = СтрокаПриказ;
					НоваяСтрока.ИмяНаФорме = Ключ + Сч;
					НоваяСтрока.ТекущееЗначение = СтрокаПриказ;
					ДобавляемыеРеквизиты.Добавить(Реквизит);
					Сч = Сч + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		
		УдаляемыеДопРеквизиты = Новый Массив;
		
		// Заполняем из сохраненных в регистре данных если ничего не сохранено пытаемся вычислить по алгоритму
		Для Каждого ДопРеквизит Из ДопРеквизиты Цикл 
			
			ЗаполнитьЗначениемПоУмолчанию = Истина;
			Если тзЗначенияДопПолей.Количество() <> 0 Тогда
				НайденныеСтроки = тзЗначенияДопПолей.НайтиСтроки(Новый Структура("Ключ, Приказ", ДопРеквизит.Ключ, ДопРеквизит.Приказ));
				Если НайденныеСтроки.Количество() <> 0 Тогда
					ЭтаФорма[ДопРеквизит.ИмяНаФорме] = НайденныеСтроки[0].Значение;
					ДопРеквизит.ТекущееЗначение = НайденныеСтроки[0].Значение;
					ЗаполнитьЗначениемПоУмолчанию = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаполнитьЗначениемПоУмолчанию Тогда
				Попытка 
					ЭтаФорма[ДопРеквизит.ИмяНаФорме] = ДопРеквизит.ТекущееЗначение;
				Исключение
					УдаляемыеДопРеквизиты.Добавить(ДопРеквизит);
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокУникальныхПриказовИСправок(ВидМО)
	
	// получим уникальные приказы и справки для вывода в заключении
	УникальныеПриказы = Новый Массив();
	УникальныеВредныеФакторы = Новый Массив();
	
	Для Каждого Эл Из Объект.ФакторыИУсловияРаботы Цикл
		Если МедосмотрыСервер.ЭтоПриказСправки(Эл.Фактор.Приказ) Тогда
			Если УникальныеВредныеФакторы.Найти(Эл.Фактор) = Неопределено Тогда
				УникальныеВредныеФакторы.Добавить(Эл.Фактор);
			КонецЕсли;
		Иначе
			Если УникальныеПриказы.Найти(Эл.Фактор.Приказ) = Неопределено Тогда
				УникальныеПриказы.Добавить(Эл.Фактор.Приказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Эл Из ВидМО.Приказы Цикл
		Если МедосмотрыСервер.ЭтоПриказСправки(Эл.Приказ) Тогда
			Если Не Эл.НеИспользоватьБезВФ 
				И УникальныеВредныеФакторы.Найти(Эл.Приказ) = Неопределено 
			Тогда
				УникальныеВредныеФакторы.Добавить(Эл.Приказ);
			КонецЕсли;
		Иначе
			Если Не Эл.НеИспользоватьБезВФ 
				И УникальныеПриказы.Найти(Эл.Приказ) = Неопределено 
			Тогда
				УникальныеПриказы.Добавить(Эл.Приказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// сортируем чтобы во всех документах порядок был одинаковый
	УникальныеПриказы = ОтсортироватьМассив(УникальныеПриказы);
	УникальныеВредныеФакторы = ОтсортироватьМассив(УникальныеВредныеФакторы);
	
	// соединяем
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УникальныеПриказы, УникальныеВредныеФакторы);
	
	Возврат УникальныеПриказы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтсортироватьМассив(Массив)
	
	Список = Новый СписокЗначений; 
	Список.ЗагрузитьЗначения(Массив);
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Массив = Список.ВыгрузитьЗначения();
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыНаФормеИСоздатьДанныеДляСправок(ПриСозданииФормы)
	
	тзГруппПриказа = Новый ТаблицаЗначений;
	тзГруппПриказа.Колонки.Добавить("Приказ");
	тзГруппПриказа.Колонки.Добавить("ЭлементГруппы");
	
	Сч = 0;
	
	// Выводим поля на форму для реквизитов
	Для Каждого ДопРеквизит Из ДопРеквизиты Цикл
		СтрокаГруппаПриказа = тзГруппПриказа.Найти(ДопРеквизит.Приказ, "Приказ");
		Если СтрокаГруппаПриказа <> Неопределено Тогда
			ЭлементГруппы = СтрокаГруппаПриказа.ЭлементГруппы;
		Иначе
			ИмяГруппы = "ГруппаЗаключение" + Строка(Сч);
			ЭлементГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаЗаключение);
			ЭлементГруппы.Заголовок = "Заключение по приказу " + ДопРеквизит.Приказ.Код;
			ЭлементГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			Если ТипЗнч(ДопРеквизит.Приказ) = Тип("СправочникСсылка.ПриказыМедосмотров") Тогда 
				Приказ = ДопРеквизит.Приказ;
			Иначе
				Приказ = ДопРеквизит.Приказ.Приказ;
			КонецЕсли;
			
			Если Приказ.ВариантГруппировкиГруппыЗаключения = 1 Тогда
				ЭлементГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ИначеЕсли Приказ.ВариантГруппировкиГруппыЗаключения = 2 Тогда
				ЭлементГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			КонецЕсли;
			СтрокаГруппаПриказа = тзГруппПриказа.Добавить();
			СтрокаГруппаПриказа.Приказ = ДопРеквизит.Приказ;
			СтрокаГруппаПриказа.ЭлементГруппы = ЭлементГруппы;
			Сч = Сч + 1;
		КонецЕсли;
		
		ИмяПоля = "ДопПоле" + Сч;
		ЭлементПоле = Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), ЭлементГруппы);
		ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементПоле.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
		ЭлементПоле.ПутьКДанным = ДопРеквизит.ИмяНаФорме; 
		ЭлементПоле.УстановитьДействие("ПриИзменении", "ПриИзмененииДанныхДополнительныхПолей");
		
		Если ТипЗнч(ЭтаФорма[ДопРеквизит.ИмяНаФорме]) = Тип("СправочникСсылка.ПереченьВредныхФакторовИРабот") Тогда 
			ДобавитьРеквизитыИПоляДляСправкиЗаключение(ДопРеквизит, Сч, ЭлементПоле, ЭлементГруппы, ПриСозданииФормы);
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыИПоляДляСправкиЗаключение(ДопРеквизит, Сч, ЭлементПоле, ЭлементГруппы, ПриСозданииФормы) 

	ВредныйФакторСправки = ЭтаФорма[ДопРеквизит.ИмяНаФорме];
	ЭлементПоле.Видимость = Ложь;
	
	ГруппаСправок = Элементы.Найти("умц_ГруппаСправок");
	
	Если ГруппаСправок = Неопределено Тогда
		
		ГруппаСправок = Элементы.Добавить("умц_ГруппаСправок", Тип("ГруппаФормы"), Элементы.ГруппаЗаключение);
		ГруппаСправок.Заголовок = "Заключение по иным приказам и справкам";
		ГруппаСправок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСправок.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
		
		ГруппаСправокГоризонтальнаяГруппа = Элементы.Добавить("умц_ГруппаСправокГоризонтальная", Тип("ГруппаФормы"),ГруппаСправок); 
		ГруппаСправокГоризонтальнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСправокГоризонтальнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		ЭлементТаблица = Элементы.Добавить("ТаблицаПараметровСправок", Тип("ТаблицаФормы"), ГруппаСправокГоризонтальнаяГруппа);
		//ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементТаблица.ПутьКДанным = "Объект.ПараметрыПриема"; 
		ЭлементТаблица.Ширина = 20;
		ЭлементТаблица.КоманднаяПанель.Видимость = Ложь;
		ЭлементТаблица.КоманднаяПанель.Доступность = Ложь;
		ЭлементТаблица.КонтекстноеМеню.Видимость = Ложь;
		ЭлементТаблица.КонтекстноеМеню.Доступность = Ложь;
		//ЭлементТаблица.Составу
		
		ЭлементТаблица.УстановитьДействие("ПриИзменении", "ПриИзмененииДанныхДополнительныхПолей");
		ЭлементПоле = Элементы.Добавить("ТаблицаПараметровСправокПараметр", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементПоле.ПутьКДанным = "Объект.ПараметрыПриема.Параметр";
		ЭлементПоле.ТолькоПросмотр = Истина;
		
		ЭлементПоле = Элементы.Добавить("ТаблицаПараметровСправокЗначение", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементПоле.ПутьКДанным = "Объект.ПараметрыПриема.Значение";
		ЭлементПоле.УстановитьДействие("ПриИзменении", "ПараметрыПриемаЗначениеПриИзменении");
		ЭлементПоле.УстановитьДействие("НачалоВыбора", "ПараметрыПриемаЗначениеНачалоВыбора");
		
		ГруппаСправокСтраницы = Элементы.Добавить("умц_ГруппаСправокСтраницы", Тип("ГруппаФормы"), ГруппаСправокГоризонтальнаяГруппа);	
		ГруппаСправокСтраницы.Вид = ВидГруппыФормы.Страницы;
		ГруппаСправокСтраницы.УстановитьДействие("ПриСменеСтраницы", "ГруппаСтраницыСправокПриСменеСтраницы");
		
	КонецЕсли;
	
	ГруппаСправокСтраницы = Элементы.Найти("умц_ГруппаСправокСтраницы"); 
	СтраницаСправки = Элементы.Добавить("умц_ГруппаСправки" + Сч, Тип("ГруппаФормы"), ГруппаСправокСтраницы);
	СтраницаСправки.Заголовок = ДопРеквизит.Приказ.Наименование;
	СтраницаСправки.Вид = ВидГруппыФормы.Страница;
	
	ПараметрыСправки = ПерезаполнитьПараметрыПриема(ВредныйФакторСправки, Не ПриСозданииФормы);
	Для Каждого Эл Из ПараметрыСправки Цикл
		
		НайденныеСтроки = Объект.ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр, ВредныйФактор", Эл.Параметр, ВредныйФакторСправки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НовыйПараметр = Объект.ПараметрыПриема.Добавить();
			НовыйПараметр.ВредныйФактор = ВредныйФакторСправки; 
			НовыйПараметр.Параметр = Эл.Параметр;
			НовыйПараметр.Значение = Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗначенияУсловногоОформления = ДопЗначенияУсловногоОформленияСправок.Добавить();
	СтрокаЗначенияУсловногоОформления.ИмяСтраницы = СтраницаСправки.Имя;
	СписокЗнченийОтбора = Новый СписокЗначений;
	СписокЗнченийОтбора.ЗагрузитьЗначения(ПараметрыСправки.ВыгрузитьКолонку("Параметр"));
	СтрокаЗначенияУсловногоОформления.СписокЗнченийОтбора = СписокЗнченийОтбора;
	
	РеквизитТабДока = ДопРеквизитыСправок.Добавить();
	РеквизитТабДока.Реквизит = "ТабличноеПолеСправки" + Сч;
	
	ИмяРеквизита = РеквизитТабДока.Реквизит;
	ОписаниеТипов = Новый ОписаниеТипов("ТабличныйДокумент");
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,"");
	мДобавляемыхРеквизитов = Новый Массив;
	мДобавляемыхРеквизитов.Добавить(Реквизит);
	ИзменитьРеквизиты(мДобавляемыхРеквизитов);
	
	ЭтаФорма[ИмяРеквизита] = ПолучитьТабДокСправки(ВредныйФакторСправки, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
	
	ГруппаПредпросмотрСправки = Элементы.Добавить("ГруппаПредпросмотрСправки" + Сч, Тип("ГруппаФормы"), СтраницаСправки);  
	ГруппаПредпросмотрСправки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПредпросмотрСправки.ОтображатьЗаголовок = Ложь;
	ГруппаПредпросмотрСправки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	КоманднаяПанельСправки = Элементы.Добавить("КоманднаяПанельСправки" + Сч, Тип("ГруппаФормы"), ГруппаПредпросмотрСправки);
	КоманднаяПанельСправки.Вид = ВидГруппыФормы.КоманднаяПанель;
	ДобавитьКомандуНаФорму("ОбновитьПредпросмотр" + Сч, КоманднаяПанельСправки, "Обновить предпросмотр", "ОбновитьПредпросмотр");
	ДобавитьКомандуНаФорму("ПечатьСправки" + Сч, КоманднаяПанельСправки, "Печать", "ПечатьСправки");
	
	ПолеТабДокумента = Элементы.Добавить(РеквизитТабДока.Реквизит, Тип("ПолеФормы"), ГруппаПредпросмотрСправки);
	ПолеТабДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
	ПолеТабДокумента.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеТабДокумента.ПутьКДанным = ИмяРеквизита;
	
	Элементы.Переместить(ЭлементГруппы, СтраницаСправки, ПолеТабДокумента);
	
	ГруппаСправокСтраницы.ТекущаяСтраница = СтраницаСправки;
	УстановитьУсловноеОформлениеДляСправок(ГруппаСправокСтраницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры

Процедура ДобавитьКомандуНаФорму(ИмяКоманды, Родитель, Заголовок, Действие)
	
	КомандаНайденная = Команды.Найти(ИмяКоманды);
	Если КомандаНайденная = Неопределено Тогда
		 КомандаНайденная = Команды.Добавить(ИмяКоманды);
	КонецЕсли;
	
	КомандаНайденная.Действие = Действие; 
	 
	ЭлементФормы = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Родитель);
	ЭлементФормы.Заголовок = Заголовок;
	ЭлементФормы.ИмяКоманды = КомандаНайденная.Имя;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьЗначениеПредзаполнения(СтрокаАлгоритма, Знач ОбъектСсылка)
	
	Если ЗначениеЗаполнено(СтрокаАлгоритма) Тогда
		
		Результат = Неопределено;
		
		НачатьТранзакцию();
		Попытка
			Выполнить(СтрокаАлгоритма.АлгоритмВычисления);
			Возврат Результат;
		Исключение КонецПопытки;
		ОтменитьТранзакцию();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УничтожитьДополнительныеРеквизитыИПоля()
	
	мУничтожаемыхРеквизитов = Новый Массив;
	Для Каждого Эл Из ДопРеквизиты Цикл	
		мУничтожаемыхРеквизитов.Добавить(Эл.ИмяНаФорме);	
	КонецЦикла;
	
	Для Каждого Эл Из ДопРеквизитыСправок Цикл
		мУничтожаемыхРеквизитов.Добавить(Эл.Реквизит);
	КонецЦикла;
	
	Если мУничтожаемыхРеквизитов.Количество() <> 0 Тогда
		ИзменитьРеквизиты(,мУничтожаемыхРеквизитов);
	КонецЕсли;
	
	Сч = Элементы.ГруппаЗаключение.ПодчиненныеЭлементы.Количество() - 1;
	
	Пока Сч > 0 Цикл
		Эл = Элементы.ГруппаЗаключение.ПодчиненныеЭлементы[Сч];
		Если Не (Эл.Имя = "ГруппаЗаключение29Н" Или Эл.Имя = "ГруппаДатаЗаключения") Тогда
			Элементы.Удалить(Эл);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	ДопРеквизиты.Очистить();
	ДопРеквизитыСправок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбораЗначенияПараметраЗавершение(Значение, ИмяРеквизитаОбъекта) Экспорт 
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ИмяРеквизитаОбъекта] = Значение;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРаботникаПоКлиенту()
	
	Если Не ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра) Тогда
		
		ДанныеКлиента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Клиент, "Профессия, ЦехУчасток, умцМестоРаботы");
		
		Объект.Профессия = ДанныеКлиента.Профессия;
		Объект.ЦехУчасток = ДанныеКлиента.ЦехУчасток;
		Объект.ФИОКлиента = ОбщегоНазначения.ФИОФизЛица(Объект.Клиент);
		МестоРаботы = ДанныеКлиента.УМЦМестоРаботы;
		Если ТипЗнч(МестоРаботы) = Тип("СправочникСсылка.Контрагенты") Тогда
			НаменованияРаботодателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(МестоРаботы, "НаименованиеПолное, Представление");
			Объект.МестоРаботы = ?(ЗначениеЗаполнено(НаменованияРаботодателя.НаименованиеПолное), НаменованияРаботодателя.НаименованиеПолное, НаменованияРаботодателя.Представление); 
		Иначе
			Объект.МестоРаботы = МестоРаботы;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПротивопоказанияВыявленныеВрачами.Отбор, "СлучайОбращения", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДействияМедосмотра()
	
	Документы.ПрохождениеМедосмотра.ПерезаполнитьДействияПрохожденияМедосмотра(Объект);
	ПерезаполнитьРекомендации();
	ПерезаполнитьПротивопоказания();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРекомендации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПереченьВредныхФакторовИРаботВрачи.Врач КАК ДействиеМедосмотра,
	               |	ПереченьВредныхФакторовИРаботВрачи.Врач.Порядок КАК ВрачПорядок,
	               |	1 КАК ИсследованиеВид
	               |ИЗ
	               |	Справочник.ПереченьВредныхФакторовИРабот.Врачи КАК ПереченьВредныхФакторовИРаботВрачи
	               |ГДЕ
	               |	ПереченьВредныхФакторовИРаботВрачи.Ссылка В(&Вредности)
	               |	И НЕ ПереченьВредныхФакторовИРаботВрачи.Врач В (&МассивВТЧ)
	               |	И ВЫБОР
	               |			КОГДА ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ (ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия.Пол = &Пол
	               |					ИЛИ ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка))
	               |					И ВЫБОР
	               |						КОГДА ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия.Возраст = 0
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА НЕ ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия.ВозрастОценкаДостижения
	               |									ТОГДА ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия.Возраст <= &Возраст
	               |								ИНАЧЕ ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия.Возраст >= &Возраст
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |		КОНЕЦ
	               |	И (ПереченьВредныхФакторовИРаботВрачи.ТипМедосмотра = ЗНАЧЕНИЕ(Перечисление.ТипыМедосмотров.ПустаяСсылка)
	               |			ИЛИ ПереченьВредныхФакторовИРаботВрачи.ТипМедосмотра = &ТипМедосмотра)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПереченьВредныхФакторовИРаботВрачи.Врач,
	               |	ПереченьВредныхФакторовИРаботВрачи.Врач.Порядок
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование,
	               |	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.Порядок,
	               |	2
	               |ИЗ
	               |	Справочник.ПереченьВредныхФакторовИРабот.ЛабораторныеИФункциональныеИсследования КАК ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования
	               |ГДЕ
	               |	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ссылка В(&Вредности)
	               |	И НЕ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование В (&МассивВТЧ)
	               |	И ВЫБОР
	               |			КОГДА ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ (ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия.Пол = &Пол
	               |					ИЛИ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка))
	               |					И ВЫБОР
	               |						КОГДА ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия.Возраст = 0
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА НЕ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия.ВозрастОценкаДостижения
	               |									ТОГДА ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия.Возраст <= &Возраст
	               |								ИНАЧЕ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия.Возраст >= &Возраст
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |		КОНЕЦ
	               |	И (ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.ТипМедосмотра = ЗНАЧЕНИЕ(Перечисление.ТипыМедосмотров.ПустаяСсылка)
	               |			ИЛИ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.ТипМедосмотра = &ТипМедосмотра)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование,
	               |	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.Порядок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИсследованиеВид,
	               |	ВрачПорядок УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Клиент", Объект.Клиент);
	Запрос.УстановитьПараметр("МассивВТЧ", Объект.ДействияМедосмотра.Выгрузить().ВыгрузитьКолонку("Действие"));
	Запрос.УстановитьПараметр("Пол", Объект.Клиент.Пол);
	ВозрастЛет = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(Объект.Клиент.ДатаРождения, ТекущаяДата());
	Запрос.УстановитьПараметр("Возраст", ВозрастЛет);
	Запрос.УстановитьПараметр("ТипМедосмотра", Объект.ТипМедосмотра);
	
	Вредности = Объект.ФакторыИУсловияРаботы.Выгрузить();
	Документы.ПрохождениеМедосмотра.УбратьЛишниеВредности(Вредности, Объект.ВидМО);
	
	Запрос.УстановитьПараметр("Вредности", Вредности.ВыгрузитьКолонку("Фактор"));
	
	Результат = Запрос.Выполнить();
	РекомендованныеДействия.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПротивопоказания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор КАК ПереченьВредныхФакторовИРабот
	               |ПОМЕСТИТЬ ВредныеФакторы
	               |ИЗ
	               |	&Вредности КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеПротивопоказания.Противопоказание КАК Противопоказание,
	               |	ВсеПротивопоказания.НомерПротивопоказания КАК НомерПротивопоказания
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПереченьВредныхФакторовИРаботМедицинскиеПротивопоказания.Противопоказание КАК Противопоказание,
	               |		ПереченьВредныхФакторовИРаботМедицинскиеПротивопоказания.Противопоказание.НомерПротивопоказания КАК НомерПротивопоказания
	               |	ИЗ
	               |		ВредныеФакторы КАК ВредныеФакторы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот.МедицинскиеПротивопоказания КАК ПереченьВредныхФакторовИРаботМедицинскиеПротивопоказания
	               |			ПО ВредныеФакторы.ПереченьВредныхФакторовИРабот = ПереченьВредныхФакторовИРаботМедицинскиеПротивопоказания.Ссылка
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПереченьВредныхФакторовИРаботМедицинскиеПротивопоказания.Противопоказание,
	               |		ПереченьВредныхФакторовИРаботМедицинскиеПротивопоказания.Противопоказание.НомерПротивопоказания
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ОбщиеПротивопоказанияМедосмотров.Противопоказание,
	               |		ОбщиеПротивопоказанияМедосмотров.Противопоказание.НомерПротивопоказания
	               |	ИЗ
	               |		ВредныеФакторы КАК ВредныеФакторы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот.ГруппыВредныхВеществ КАК ПереченьВредныхФакторовИРаботГруппыВредныхВеществ
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеПротивопоказанияМедосмотров КАК ОбщиеПротивопоказанияМедосмотров
	               |				ПО ПереченьВредныхФакторовИРаботГруппыВредныхВеществ.ГруппаВредныхВеществ = ОбщиеПротивопоказанияМедосмотров.ГруппаОпасныхВеществ
	               |			ПО (ПереченьВредныхФакторовИРаботГруппыВредныхВеществ.Ссылка = ВредныеФакторы.ПереченьВредныхФакторовИРабот)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ОбщиеПротивопоказанияМедосмотров.Противопоказание,
	               |		ОбщиеПротивопоказанияМедосмотров.Противопоказание.НомерПротивопоказания
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ОбщиеПротивопоказанияМедосмотров.Противопоказание,
	               |		ОбщиеПротивопоказанияМедосмотров.Противопоказание.НомерПротивопоказания
	               |	ИЗ
	               |		РегистрСведений.ОбщиеПротивопоказанияМедосмотров КАК ОбщиеПротивопоказанияМедосмотров
	               |	
	               |	ГДЕ ГруппаОпасныхВеществ = ЗНАЧЕНИЕ(Перечисление.ГруппыОпасныхВеществ.ПустаяСсылка)
				   |		
				   |) КАК ВсеПротивопоказания
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВсеПротивопоказания.Противопоказание.НомерПротивопоказанияДляСортировки
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Вредности = Объект.ФакторыИУсловияРаботы.Выгрузить();
	Документы.ПрохождениеМедосмотра.УбратьЛишниеВредности(Вредности, Объект.ВидМО);
	
	Запрос.УстановитьПараметр("Вредности", Вредности);
	
	Противопоказания.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьВредности(ВредныеФакторы)
	
	Объект.ФакторыИУсловияРаботы.Очистить();
	//ВредныеФакторы = ПолучитьВредностиИзПоследнегоПМОСервер(Объект.Профессия, Объект.МестоРаботы, Объект.СписокНаПрохождениеМедосмотра, Объект.Клиент, Объект.ВидМО, Объект.Ссылка);
	Для Каждого ВредныйФактор Из ВредныеФакторы Цикл
		СтрокаФактор = Объект.ФакторыИУсловияРаботы.Добавить();
		СтрокаФактор.Фактор = ВредныйФактор.Вредность; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВредностиИзПоследнегоПМОСервер(Профессия, МестоРаботы, СписокНаПрохождениеМедосмотра, Клиент, ВидМО, СсылкаПМО)
	ДанныеПрофесиияМР = МедосмотрыСервер.ПрофессияМестоРаботыПоПолямПМОИСпискуМО(Профессия, МестоРаботы, СписокНаПрохождениеМедосмотра, Клиент); 
	Возврат МедосмотрыСервер.ПолучитьВредностиКлиентаИзПредыдущегоПМО(Клиент, ВидМО, СсылкаПМО, Истина, ДанныеПрофесиияМР.Профессия, ДанныеПрофесиияМР.МестоРаботы);
КонецФункции

&НаСервере
Процедура ПерезаполнитьСопуствующиеПаталогии()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументПрохождения",Объект.Ссылка);
		Запрос.УстановитьПараметр("Диагнозы",Объект.КритичныеПротивопоказания.Выгрузить().ВыгрузитьКолонку("Диагноз"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Диагнозы.Диагноз,
		|	Диагнозы.ВыявленВпервые,
		|	Диагнозы.Детализация КАК РасшифровкаДиагноза,
		|	Диагнозы.Классификация1,
		|	Диагнозы.Классификация2,
		|	Диагнозы.Профессиональное,
		|	Диагнозы.Регистратор КАК Прием
		|ИЗ
		|	РегистрСведений.Диагнозы КАК Диагнозы
		|ГДЕ
		|	Диагнозы.Регистратор.ПервичныйПрием = &ДокументПрохождения
		|	И НЕ Диагнозы.Диагноз В (&Диагнозы)";
		
		СопуствующаяПаталогия.Загрузить(Запрос.Выполнить().Выгрузить());
		КоличествоСопуствующихПаталогий = СопуствующаяПаталогия.Количество();
		
		Если КоличествоСопуствующихПаталогий <> 0 Тогда
			
			Приемы = СопуствующаяПаталогия.Выгрузить().ВыгрузитьКолонку("Прием");
			
			Запрос.УстановитьПараметр("Приемы", Приемы);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументПрием.Ссылка КАК Прием,
			|	ДокументПрием.Врач КАК ВрачСсылка,
			|	ДокументПрием.Врач.Представление КАК Врач,
			|	ДокументПрием.Специализация.Представление КАК Специализация
			|ИЗ
			|	Документ.Прием КАК ДокументПрием
			|ГДЕ
			|	ДокументПрием.Ссылка В(&Приемы)";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор КАК Прием,
			|	ОтметкиВыполненияДействийСрезПоследних.Действие.Представление КАК Действие
			|ИЗ
			|	РегистрСведений.ОтметкиВыполненияДействий КАК ОтметкиВыполненияДействийСрезПоследних
			|ГДЕ
			|	ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра = &ДокументПрохождения
			|	И ОтметкиВыполненияДействийСрезПоследних.Действие.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДействийМедицинскогоОсмотра.Врач)
			|	И ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор В(&Приемы)
			|	И ОтметкиВыполненияДействийСрезПоследних.Выполнено";
			ВыбОтметки = Запрос.Выполнить().Выбрать();
			
			Отбор = Новый Структура("Прием");
			Для Каждого СтрокаСопутствующая Из СопуствующаяПаталогия Цикл
				Отбор.Прием = СтрокаСопутствующая.Прием;
				Выборка.Сбросить();
				Если Выборка.НайтиСледующий(Отбор) Тогда
					// Колонка Врач
					СтрокаСопутствующая.Врач = Выборка.Врач;
					
					// Колонка Специализация
					СпециальностьВрача = "";
					ВыбОтметки.Сбросить();
					Пока ВыбОтметки.НайтиСледующий(Отбор) Цикл
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СпециальностьВрача, ВыбОтметки.Действие,,Истина);
					КонецЦикла;
					Если ЗначениеЗаполнено(СпециальностьВрача) Тогда
						// Из отметок
						СтрокаСопутствующая.Специальность = СпециальностьВрача;
					ИначеЕсли ЗначениеЗаполнено(Выборка.Специализация) Тогда
						// Из специализации Приёма, подставившейся из АРМ Работа с медосмотрами (со списками на медосмотр)
						СтрокаСопутствующая.Специальность = Выборка.Специализация;
					Иначе
						// Какие-то разовые нестандартные документы Приём.
						СтрокаСопутствующая.Специальность = Строка(Выборка.ВрачСсылка.Специализация);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВыборПротивопоказанияСервер(знач ВыбраннаяСтрока)
	
	Если Объект.КритичныеПротивопоказания.НайтиСтроки(Новый Структура("Противопоказание,Диагноз",ВыбраннаяСтрока.Противопоказание,ВыбраннаяСтрока.Диагноз)).Количество() = 0 Тогда
		
		НоваяСтрока = Объект.КритичныеПротивопоказания.Добавить();
		НоваяСтрока.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.КритичныеПротивопоказания);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбраннаяСтрока);
		
		// Получение вредностей противопоказания
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВредныеФакторыПротивопоказаний.ВредныйФактор
		|ИЗ
		|	РегистрСведений.ВредныеФакторыПротивопоказаний КАК ВредныеФакторыПротивопоказаний
		|ГДЕ
		|	ВредныеФакторыПротивопоказаний.СлучайОбращения = &СлучайОбращения
		|	И ВредныеФакторыПротивопоказаний.Документ = &Документ
		|	И ВредныеФакторыПротивопоказаний.Противопоказание = &Противопоказание
		|	И ВредныеФакторыПротивопоказаний.Диагноз = &Диагноз"
		;
		Запрос.УстановитьПараметр("СлучайОбращения",  ВыбраннаяСтрока.СлучайОбращения);
		Запрос.УстановитьПараметр("Документ", 		  ВыбраннаяСтрока.Документ);
		Запрос.УстановитьПараметр("Противопоказание", ВыбраннаяСтрока.Противопоказание);
		Запрос.УстановитьПараметр("Диагноз", 		  ВыбраннаяСтрока.Диагноз);
		Выб = Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			СтрокаВредность = Объект.ВредныеФакторыПротивопоказаний.Добавить();
			СтрокаВредность.КлючСтроки = НоваяСтрока.КлючСтроки;
			СтрокаВредность.ВредныйФактор = Выб.ВредныйФактор;
		КонецЦикла;
		
		ПерезаполнитьСопуствующиеПаталогии();
		ОбновитьОписаниеВредныхФакторовКритическихПротивопоказаний();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеВредныхФакторовКритическихПротивопоказаний()
	
	КлючиСтрок = Новый Массив;
	Для Каждого СтрокаПротивопоказания Из Объект.КритичныеПротивопоказания Цикл
		КлючиСтрок.Добавить(СтрокаПротивопоказания.КлючСтроки);
	КонецЦикла;
	
	ОписаниеВредныхФакторов = ПолучитьОписанияВредныхФакторов(КлючиСтрок, Объект.ВредныеФакторыПротивопоказаний);
	
	сч = 0;
	Для Каждого СтрокаПротивопоказания Из Объект.КритичныеПротивопоказания Цикл 
		СтрокаПротивопоказания.ВредныеФакторы = ОписаниеВредныхФакторов[сч];
		сч = сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписанияВредныхФакторов(КлючиСтрок, Знач ВредныеФакторыПротивопоказаний)
	
	Отбор = Новый Структура("КлючСтроки");
	ОписаниеВредныхФакторов = Новый Массив;
	Для Каждого КлючСтроки Из КлючиСтрок Цикл
		
		ТекРезультат = "";
		
		Отбор.КлючСтроки = КлючСтроки;
		мсСтр = ВредныеФакторыПротивопоказаний.НайтиСтроки(Отбор);
		Для Каждого СтрокаВредности Из мсСтр Цикл
			ТекРезультат = ТекРезультат + ?(ПустаяСтрока(ТекРезультат),"",", ") + СтрокаВредности.ВредныйФактор.НомерПП;
		КонецЦикла;
		
		ОписаниеВредныхФакторов.Добавить(ТекРезультат);
		
	КонецЦикла;
	
	Возврат ОписаниеВредныхФакторов;
	
КонецФункции

&НаСервере
Процедура НастроитьВидЭлементовНазначений()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументПрохождения", Объект.Ссылка);
		Запрос.Текст = 
		 "ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	НаправленияПоРезультатамМедосмотра.ВидНаправления
		 |ИЗ
		 |	РегистрСведений.НаправленияПоРезультатамМедосмотра КАК НаправленияПоРезультатамМедосмотра
		 |ГДЕ
		 |	НаправленияПоРезультатамМедосмотра.ПрохождениеМедосмотра = &ДокументПрохождения
		 |	И НаправленияПоРезультатамМедосмотра.Регистратор <> &ДокументПрохождения";
		
		ВыборкаНаправления = Запрос.Выполнить().Выбрать();
		
		пчВидыНаправлений = Перечисления.ВидыНаправленийПоРезультатамМедосмотра;	
		ВидыНаправлений = Перечисления.ВидыНаправленийПоРезультатамМедосмотра.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
		
		Пока ВыборкаНаправления.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаНаправления.ВидНаправления) Тогда
				ИмяРеквизита = ВидыНаправлений.Получить(пчВидыНаправлений.Индекс(ВыборкаНаправления.ВидНаправления)).Имя;
				Элемент = Элементы.Найти(ИмяРеквизита);
				Если Элемент <> Неопределено Тогда
					Элемент.Вид = ВидПоляФормы.ПолеНадписи;
					Элемент.Формат = "БЛ=Направлен; БИ=Направлен";
					Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
					Элемент.Гиперссылка = Истина;
					Элемент.УстановитьДействие("Нажатие", "НаправлениеНажатие");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыНаправления(ДокументПрохождения, ВидНаправления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПрохождения", ДокументПрохождения);
	Запрос.УстановитьПараметр("ВидНаправления", ВидНаправления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НаправленияПоРезультатамМедосмотра.Регистратор
	|ИЗ
	|	РегистрСведений.НаправленияПоРезультатамМедосмотра КАК НаправленияПоРезультатамМедосмотра
	|ГДЕ
	|	НаправленияПоРезультатамМедосмотра.ПрохождениеМедосмотра = &ДокументПрохождения
	|	И НаправленияПоРезультатамМедосмотра.Регистратор <> &ДокументПрохождения
	|	И НаправленияПоРезультатамМедосмотра.ВидНаправления = &ВидНаправления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаключении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СделатьЗаключениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьЗаключениеНаКлиенте()
	
	Объект.ДатаЗавершения = ТекущаяДата();
	
	Объект.ПредседательМедКомиссии = ПредседательДляЗаключенияПоУмолчанию(Объект.ДатаЗавершения, Объект.Филиал);
	
	Если Не ЗначениеЗаполнено(Объект.ПредседательМедКомиссии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Председатель комиссии не указан!");
	КонецЕсли;
	
	Элементы.ГруппаЗаключение.Видимость = Истина;
	Элементы.СделатьЗаключение.Видимость = Ложь;
	
	ОбновитьСписокВыбораГруппыЗдоровья(Элементы.ДиспансернаяГруппа, Объект.Клиент, Объект.ДатаЗавершения);
	
	УстановитьВидимостьГруппыЗаключения();
	
	ВыводитьГруппуЭП = ИспользуютсяЭП И ЗначениеЗаполнено(Объект.ДатаЗавершения) И (ИспользуетсяРЭМД Или МедосмотрыСервер.ЕстьЗаполненныеМакетыПриказов(Объект.ФакторыИУсловияРаботы));
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ЭП", ВыводитьГруппуЭП);
	
	УстановитьДоступностьФакторовИУсловийРабот();
	
	Если ИспользуютсяЭП
		И ИспользуетсяРЭМД
		И Не Объект.Ссылка.Пустая()
		И Не Объект.ПодписанЭП
	Тогда
		ОбновитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи, Объект.ФакторыИУсловияРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредседательДляЗаключенияПоУмолчанию(ДатаЗавершения, Филиал)
	
	ТекущийСотрудник = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
	
	Если ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		ПредседательМедКомиссии = ТекущийСотрудник;
	Иначе
		ПредседательМедКомиссии = МедосмотрыСерверПовтИсп.ПолучитьСотрудникаМедкомиссии(ДатаЗавершения, Филиал,, Справочники.РолиЧленовКомиссии.Председатель);
	КонецЕсли;
	
	Возврат ПредседательМедКомиссии;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьРегистраторИзКлючаЗаписи(КлючЗаписи)
	Возврат КлючЗаписи.Документ;		
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоЗначенийПараметров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоПараметров.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияПараметровHTML.Документ.Врач КАК Врач,
	               |	ЗначенияПараметровHTML.Документ.Специализация КАК Специализация,
	               |	ЗначенияПараметровHTML.Параметр,
	               |	ЗначенияПараметровHTML.Значение,
	               |	ЗначенияПараметровHTML.Документ.Дата КАК Дата,
	               |	ЗначенияПараметровHTML.Документ КАК Документ
	               |ИЗ
	               |	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
	               |ГДЕ
	               |	ЗначенияПараметровHTML.Параметр.ИспользуетсяПрофпатологом
	               |	И ЗначенияПараметровHTML.Документ.ПервичныйПрием = &ПервичныйПрием
	               |ИТОГИ ПО
	               |	Документ";
	
	Запрос.УстановитьПараметр("ПервичныйПрием", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	
		ВыборкаДетальная = Выборка.Выбрать();
		
		СтрокаВрача = ДеревоПараметров.ПолучитьЭлементы().Добавить();
		
		СтрокаВрача.Врач = Выборка.Врач;
		СтрокаВрача.Специализация = Выборка.Специализация;
		СтрокаВрача.Дата	 = Выборка.Дата;
		СтрокаВрача.Документ = Выборка.Документ;
		СтрокаВрача.Уровень	 = 1;
		
		Пока ВыборкаДетальная.Следующий() Цикл
			
			СтрокаПараметра = СтрокаВрача.ПолучитьЭлементы().Добавить();
			СтрокаПараметра.Параметр = ВыборкаДетальная.Параметр;
			СтрокаПараметра.Значение = ВыборкаДетальная.Значение;
			СтрокаПараметра.Уровень = 2;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Элементы.ДеревоПараметров1.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементГруппыПрофпатолога()
	
	Попытка
		ТекущаяГруппаЭлемента = ТекущийЭлемент.Родитель;
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТекущаяГруппаЭлемента = Элементы.ГруппаРеквизитыПрофпатолога Тогда
		Если ТекущийЭлементРеквизитовПрофпатолога <> Неопределено Тогда
			ТекущийЭлементРеквизитовПрофпатолога.ЦветФона = WebЦвета.Белый;
		КонецЕсли;
		ТекущийЭлементРеквизитовПрофпатолога = ЭтаФорма.ТекущийЭлемент;
		ТекущийЭлементРеквизитовПрофпатолога.ЦветФона = WebЦвета.Роса;
	КонецЕсли;
	ПодключитьОбработчикОжидания("УстановитьТекущийЭлементГруппыПрофпатолога",0.1,Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВредностиКлиентаДляДиагнозов(Клиент, Знач ВредностиДиагнозов, Знач ВредныеФакторы)
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Эл Из ВредныеФакторы Цикл
		Представление	= Эл.Фактор.НомерПП
						+ " " + Эл.Фактор.НаименованиеПолное;
		ЭлементСписка = Результат.Добавить(Эл.Фактор, Представление);
	КонецЦикла;
	
	Для Каждого ВредностьДиагноза Из ВредностиДиагнозов Цикл
		Если Результат.НайтиПоЗначению(ВредностьДиагноза.ВредныйФактор) = Неопределено Тогда
			Представление	= ВредностьДиагноза.ВредныйФактор.НомерПП
							+ " " + ВредностьДиагноза.ВредныйФактор.НаименованиеПолное;
			ЭлементСписка = Результат.Добавить(ВредностьДиагноза.ВредныйФактор, Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтметкиПоРегистру()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ.Действие,
	               |	ВТ.НазначенДополнительно
	               |ПОМЕСТИТЬ ТабЧасть
	               |ИЗ
	               |	&ВТ КАК ВТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтметкиВыполненияДействийСрезПоследних.Действие,
	               |	ОтметкиВыполненияДействийСрезПоследних.Выполнено
	               |ПОМЕСТИТЬ Отметки
	               |ИЗ
	               |	РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(, АктивностьЗаписи = ИСТИНА) КАК ОтметкиВыполненияДействийСрезПоследних
	               |ГДЕ
	               |	ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра = &ПрохождениеМедОсмотра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабЧасть.НазначенДополнительно,
	               |	ТабЧасть.Действие,
	               |	ЕСТЬNULL(Отметки.Выполнено, ЛОЖЬ) КАК Выполнено
	               |ИЗ
	               |	ТабЧасть КАК ТабЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Отметки КАК Отметки
	               |		ПО ТабЧасть.Действие = Отметки.Действие";
	
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВТ", Объект.ДействияМедосмотра.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Объект.ДействияМедосмотра.Загрузить(Результат.Выгрузить());
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНеЗакрытыеМедкарты025У(Клиент, СписокНаПрохождениеМедосмотра, ДатаМедосмотра)
	
	Возврат МедосмотрыСервер.ПолучитьНеЗакрытыеМедкарты025У(Клиент, СписокНаПрохождениеМедосмотра.Филиал, ДатаМедосмотра);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНеПрошедших(СписокПМО)
	
	Если ЗначениеЗаполнено(СписокПМО) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокНаПрохождениеМедосмотра", СписокПМО);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрохождениеМедосмотра.Клиент
		|ПОМЕСТИТЬ СписокИсключаемых
		|ИЗ
		|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
		|ГДЕ
		|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра
		|	И ПрохождениеМедосмотра.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокНаПрохождениеМедосмотраКлиенты.Клиент
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра.Клиенты КАК СписокНаПрохождениеМедосмотраКлиенты
		|ГДЕ
		|	СписокНаПрохождениеМедосмотраКлиенты.Ссылка = &СписокНаПрохождениеМедосмотра
		|	И НЕ СписокНаПрохождениеМедосмотраКлиенты.Клиент В
		|				(ВЫБРАТЬ
		|					ВТ.Клиент
		|				ИЗ
		|					СписокИсключаемых КАК ВТ)"
		;
		ЗавершившиеМО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
	Иначе
		ЗавершившиеМО = Новый Массив;
	КонецЕсли;
	
	Возврат ЗавершившиеМО;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьКлиентаИзСпискаНаМедосмотр(СписокНаПрохождение, Клиент)
	
	СписокНаПрохождениеОбъект = СписокНаПрохождение.ПолучитьОбъект();
	СтруктураДляПоиска = Новый Структура("Клиент", Клиент);
	ТабЧастьКлиенты = СписокНаПрохождениеОбъект.Клиенты;
	УдаляемаяСтрока = ТабЧастьКлиенты.Найти(Клиент, "Клиент");
	Если УдаляемаяСтрока <> Неопределено Тогда
		ТабЧастьКлиенты.Удалить(УдаляемаяСтрока);
		СписокНаПрохождениеОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВредностиИзПредыдущегоПрохожденияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ДокументСсылка.ПрохождениеМедосмотра") Тогда
		
		Объект.ФакторыИУсловияРаботы.Очистить();
		
		Вредности = ПолучитьВредностиПредыдущегоПрохождения(Результат, Объект.ВидМО);
		Для Каждого Вредность Из Вредности Цикл
			Объект.ФакторыИУсловияРаботы.Добавить().Фактор = Вредность;
		КонецЦикла;
		
		МедосмотрыКлиентСервер.ОбновитьИдентификаторыПриказов(Объект, Модифицированность);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВредностиПредыдущегоПрохождения(ПрохождениеМедосмотра, ВидМедосмотра) 
	
	ПриказыПМО = МедосмотрыСервер.ПолучитьМассивПриказовПоВидуМО(ВидМедосмотра);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор КАК Фактор
		|ИЗ
		|	Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
		|ГДЕ
		|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка = &Ссылка
		|	И (ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.Приказ В (&ПриказыПМО)
		|			ИЛИ ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор В (&ПриказыПМО))";
	
	Запрос.УстановитьПараметр("Ссылка", ПрохождениеМедосмотра);
	Запрос.УстановитьПараметр("ПриказыПМО", ПриказыПМО);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Фактор");
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещнияВыбораМестаРаботы(ВыбранныйКонтрагент, ИсточникВыбора) Экспорт
	
	Если ВыбранныйКонтрагент <> Неопределено Тогда
		ДанныеРаботодателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВыбранныйКонтрагент, "НаименованиеПолное, Представление, ИНН");
		Объект.МестоРаботы = ?(ЗначениеЗаполнено(ДанныеРаботодателя.НаименованиеПолное), ДанныеРаботодателя.НаименованиеПолное, ДанныеРаботодателя.Представление);
		Объект.ИННРаботодателя = ДанныеРаботодателя.ИНН;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораГруппыЗдоровья(ЭлементДиспансернаяГруппа, Клиент, ДатаЗавершения)
	
	Если ЗначениеЗаполнено(Клиент)
		И ЗначениеЗаполнено(ДатаЗавершения)
	Тогда
		ДатаРождения = ДопСерверныеФункции.ПолучитьРеквизит(Клиент, "ДатаРождения");
		
		Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
			ДатаРождения = Дата(1900, 1, 1);
		КонецЕсли;
	
		Возраст = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(ДатаРождения, ДатаЗавершения);
		
		Если Возраст >= 18 Тогда
			ГруппыЗдоровья = ОбщегоНазначенияСервер.ФункцияМенеджера("Перечисления.ГруппыЗдоровья", "Взрослые");
		Иначе
			ГруппыЗдоровья = ОбщегоНазначенияСервер.ФункцияМенеджера("Перечисления.ГруппыЗдоровья", "Несовершеннолетние");
		КонецЕсли;
		
		ЭлементДиспансернаяГруппа.СписокВыбора.ЗагрузитьЗначения(ГруппыЗдоровья);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформироватьТЧДляЗаписиВРегистрДопДанныхМО()
	
	Для Каждого Эл Из ДопРеквизиты Цикл
		
		Эл.ТекущееЗначение = ЭтаФорма[Эл.ИмяНаФорме];
		
	КонецЦикла;
	
	Возврат РеквизитФормыВЗначение("ДопРеквизиты", Тип("ТаблицаЗначений"));
	
КонецФункции

&НаКлиенте
Функция ПриИзмененииДанныхДополнительныхПолей(Элемент) 
	Модифицированность = Истина;
КонецФункции
//Элемент.УстановитьДействие("ПриИзменении", Новый Действие("ПриИзмененииДанныхДополнительныхПолей"));

// ПЕРЕОПРЕДЕЛИТЬ
&НаСервереБезКонтекста
Функция ЗначенияПараметровИзДокументовВрачей(ДокументМедосмотра)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументМедосмотра", ДокументМедосмотра);
	Запрос.Текст = 
	"
	//|ВЫБРАТЬ
	//|	ЗначенияПараметровHTML.Параметр КАК Параметр,
	//|	ЗначенияПараметровHTML.Значение КАК Значение
	//|ИЗ
	//|	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
	//|ГДЕ
	//|	(ЗначенияПараметровHTML.Документ ССЫЛКА Документ.Прием
	//|				И ВЫРАЗИТЬ(ЗначенияПараметровHTML.Документ КАК Документ.Прием).ПервичныйПрием = &ДокументМедосмотра
	////|			ИЛИ ЗначенияПараметровHTML.Документ ССЫЛКА Документ.ОтметкаВыполненияМедосмотра
	////|				И ВЫРАЗИТЬ(ЗначенияПараметровHTML.Документ КАК Документ.ОтметкаВыполненияМедосмотра).ПрохождениеМедОсмотра = &ДокументМедосмотра)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтметкаВыполненияМедосмотраПараметрыПриема.Параметр,
	|	ОтметкаВыполненияМедосмотраПараметрыПриема.Значение
	|ИЗ
	|	Документ.ОтметкаВыполненияМедосмотра.ПараметрыПриема КАК ОтметкаВыполненияМедосмотраПараметрыПриема
	|ГДЕ
	|	ОтметкаВыполненияМедосмотраПараметрыПриема.Ссылка.ПрохождениеМедОсмотра = &ДокументМедосмотра"
	;
	Значения = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаЗначения Из Значения Цикл
		Если ЗначениеЗаполнено(СтрокаЗначения.Значение) Тогда
			Результат.Вставить(СтрокаЗначения.Параметр, СтрокаЗначения.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПерезаполнитьПараметрыПриема(ВредныйФакторСправки, ТребуетсяАвтозаполнение)
	
	ДействияМедосмотра = ПолучитьДействияМедОсмотраПоВредномуФактору(ВредныйФакторСправки).ВыгрузитьКолонку("Действие");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначенияВрачей = ЗначенияПараметровИзДокументовВрачей(Объект.Ссылка);
	Иначе
		ЗначенияВрачей = Неопределено;
	КонецЕсли;
	
	ПараметрыПриема = Новый ТаблицаЗначений;
	ПараметрыПриема.Колонки.Добавить("Параметр");
	ПараметрыПриема.Колонки.Добавить("Значение");
	
	МедосмотрыСервер.ОбновитьСписокПараметровДокументаМедосмотраСправки(ДействияМедосмотра, ПараметрыПриема, Объект, ВредныйФакторСправки, , Истина, ЗначенияВрачей, ТребуетсяАвтозаполнение);
	
	МедосмотрыСервер.ЗаполнитьУсловноеОформлениеСпискаПараметровПриема(ЭтаФорма.УсловноеОформление, Объект.ПараметрыПриема, "Объект.ПараметрыПриема.Параметр", "ТаблицаПараметровСправокЗначение");
	
	Возврат ПараметрыПриема;
	
КонецФункции

&НаСервере
Функция ПолучитьДействияМедОсмотраПоВредномуФактору(ВредныйФактор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПереченьВредныхФакторовИРаботВрачи.Врач КАК Действие
		|ПОМЕСТИТЬ ВредныеФакторы
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.Врачи КАК ПереченьВредныхФакторовИРаботВрачи
		|ГДЕ
		|	ПереченьВредныхФакторовИРаботВрачи.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.ЛабораторныеИФункциональныеИсследования КАК ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования
		|ГДЕ
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействияМО.Действие КАК Действие
		|ПОМЕСТИТЬ ДействияМО
		|ИЗ
		|	&ДействияМО КАК ДействияМО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВредныеФакторы.Действие КАК Действие
		|ИЗ
		|	ВредныеФакторы КАК ВредныеФакторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействияМО КАК ДействияМО
		|		ПО ВредныеФакторы.Действие = ДействияМО.Действие";
	
	
	Запрос.УстановитьПараметр("Ссылка", ВредныйФактор);
	Запрос.УстановитьПараметр("ДействияМО", Объект.ДействияМедосмотра.Выгрузить()); 
	ТаблицаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДетальныеЗаписи;
	
	
КонецФункции

&НаСервере
Функция ПолучитьТабДокСправки(ВредныйФактор, Знач ПараметрыПриема, Ссылка, Знач Подписи)
	
	//Если Ложь Тогда Номенклатура = Справочники.Номенклатура.ПустаяСсылка() КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Область(1,1).Текст = НСтр("ru='Не удалось сформировать форму для печати'");
	
	Шаблон = ВредныйФактор.ШаблонОсмотраСправки;
	Если ЗначениеЗаполнено(Шаблон)
		И Шаблон.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент
	Тогда
		ТабДок = Шаблон.ТабличныйДокумент.Получить();
		Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
			
			Если Ложь Тогда ТабДок = Новый ТабличныйДокумент КонецЕсли;
			
			ЗначенияПараметров = Новый Структура;
			Для Каждого СтрокаПараметра Из Шаблон.СоответствияПараметрам Цикл
				Если ЗначениеЗаполнено(СтрокаПараметра.Параметр) Тогда
					мсСтрокаПриема = ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр, ВредныйФактор", СтрокаПараметра.Параметр, ВредныйФактор));
					Если мсСтрокаПриема.Количество() <> 0 Тогда
						Попытка
							Значение = мсСтрокаПриема[0].Значение;
							Значение = Формат(Значение, СтрокаПараметра.Параметр.ФорматнаяСтрока);
							
							ЗначенияПараметров.Вставить(СтрокаПараметра.Наименование, Значение);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТабДок.Параметры.Заполнить(ЗначенияПараметров);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ТабДок);
			
			// Настройки печати
			ТабличныйДокумент.ИмяПараметровПечати = Строка(Шаблон.УникальныйИдентификатор());
			
			ТабличныйДокумент.АвтоМасштаб = Шаблон.ПечатьАвтомасштабирование;
			ТабличныйДокумент.ОриентацияСтраницы = ?(Шаблон.ПечатьОриентацияСтраницы, ОриентацияСтраницы.Ландшафт, ОриентацияСтраницы.Портрет);
			
			Если ЗначениеЗаполнено(Шаблон.ПечатьРазмерБумаги) Тогда
				ТабличныйДокумент.РазмерСтраницы = Шаблон.ПечатьРазмерБумаги;
			КонецЕсли;
			
			Если Шаблон.ПечатьДвусторонняяПечать = 0 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ИспользоватьНастройкиПринтера;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 1 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.Нет;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 2 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВверх;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 3 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево;
			КонецЕсли;
			
			ВывестиБлокЭЦПВТабличныйДокумент(Ссылка, ТабличныйДокумент, Подписи, Шаблон);
		КонецЕсли;
	Иначе
		ТабличныйДокумент.Область(1,1).Текст = НСтр("ru='Не задан шаблон справки у услуги медосмотра справки'");
	КонецЕсли;	
		
	Возврат ТабличныйДокумент;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ВывестиБлокЭЦПВТабличныйДокумент(Ссылка, ТабличныйДокумент, Подписи, Шаблон)
	
	Если Не Ссылка.ПодписанЭП
		Или Подписи.Количество() = 0
		Или Шаблон.РасположениеПодписи = Перечисления.РасположениеПодписи.НеВыводить
	Тогда
		Возврат;
	КонецЕсли;
	
	тзПодписи = Подписи.Выгрузить();
	тзПодписи.Сортировать("ЭтоПодписьВрача Убыв, ДатаПодписи");
	
	Для Каждого СтрокаПодписи Из тзПодписи Цикл
		Если Не СтрокаПодписи.ПодписьВерна Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПодписи = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(СтрокаПодписи.АдресСертификата, Ссылка, СтрокаПодписи.ДатаПодписи);
		ЭЦП_УМЦ_Сервер.ДобавитьРисунокЭЦПВТабличныйДокумент(ТабличныйДокумент, Шаблон.ПараметрыЭЦПТабличногоШаблона, ДанныеПодписи, Шаблон.РасположениеПодписи, ТабличныйДокумент.ВысотаТаблицы);
		Возврат;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляСправок(ИмяСтраницы)
	
	//Если ДопУсловноеОформленияСправки <> Неопределено Тогда
	//	УсловноеОформление.Элементы.Удалить(ДопУсловноеОформленияСправки);
	//КонецЕсли;
	//Для Каждого Эл Из УсловноеОформление.Элементы Цикл
	//	
	//	Если Эл.Представление = "Таблица параметров справок" Тогда
	//		УсловноеОформление.Элементы.Удалить(Эл);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
 //   СтрокаУсловноеОформление = УсловноеОформление.Элементы.Добавить();
 //
 //   СтрокаУсловноеОформление.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
 //   
 //   ПолеЭлемента = СтрокаУсловноеОформление.Поля.Элементы.Добавить();
 //   ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПараметровСправокПараметр.Имя);
 //   
 //   ПолеЭлемента = СтрокаУсловноеОформление.Поля.Элементы.Добавить();
 //   ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПараметровСправокЗначение.Имя);
 //   
 //   ОтборЭлемента = СтрокаУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 //   ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыПриема.Параметр");
 //   ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
 //   
 //   НайденныеСтроки = ДопЗначенияУсловногоОформленияСправок.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
 //   Если НайденныеСтроки.Количество() <> 0 Тогда
 //   	СписокЗнченийОтбора = НайденныеСтроки[0].СписокЗнченийОтбора;
 //   Иначе
 //   	СписокЗнченийОтбора = Новый СписокЗначений;
 //   КонецЕсли;
 //   ОтборЭлемента.ПравоеЗначение = СписокЗнченийОтбора;
 //   СтрокаУсловноеОформление.Представление = "Таблица параметров справок";
 //   
 //   
 //   //ДопУсловноеОформленияСправки = СтрокаУсловноеОформление;
 //   
 //   Элементы.ТаблицаПараметровСправок.Обновить();
 ГруппаСправки = Элементы.Найти(ИмяСтраницы);
 Элементы.ТаблицаПараметровСправок.ОтборСтрок = Новый ФиксированнаяСтруктура("ВредныйФактор", ПолучитьВредныйФакторСправкиИТабДокПоГруппеСправки(ГруппаСправки).ВредныйФакторСправки);
 
КонецПроцедуры

&НаСервере
Процедура ПараметрыПриемаЗначениеПриИзмененииНаСервере()
	ГруппаСправки = Элементы.Умц_ГруппаСправокСтраницы.ТекущаяСтраница;
	ДанныеСправки = ПолучитьВредныйФакторСправкиИТабДокПоГруппеСправки(ГруппаСправки);
	ПутьТабличногоДокументСправки = ДанныеСправки.ПутьТабличногоДокументСправки;
	ЭтаФорма[ПутьТабличногоДокументСправки] = ПолучитьТабДокСправки(ДанныеСправки.ВредныйФакторСправки, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
КонецПроцедуры

&НаСервере
Функция ПолучитьВредныйФакторСправкиИТабДокПоГруппеСправки(ГруппаСправки)
	
	ВредныйФакторСправки = Неопределено;
	ТабличныйДокументСправки = Неопределено;
	
	Для Каждого Подчиненные Из ГруппаСправки.ПодчиненныеЭлементы Цикл
		
		Если СтрНачинаетсяС(Подчиненные.Имя, "ГруппаЗаключение") И Не ЗначениеЗаполнено(ВредныйФакторСправки) Тогда 
			Для Каждого Эл Из Подчиненные.ПодчиненныеЭлементы Цикл
				Если СтрНачинаетсяС(Эл.ПутьКДанным, "ВредныйФакторСправки") Тогда
					ВредныйФакторСправки = ЭтаФорма[Эл.ПутьКДанным];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПутьТабличногоДокументСправки = НайтиИмяПоляТабличногоДокументаПоГруппе(ГруппаСправки);
		//Если СтрНачинаетсяС(Подчиненные.Имя, "ТабличноеПолеСправки") И Не ЗначениеЗаполнено(ТабличныйДокументСправки) Тогда
		//	ПутьТабличногоДокументСправки = Подчиненные.ПутьКДанным;  
		//КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ВредныйФакторСправки, ПутьТабличногоДокументСправки", ВредныйФакторСправки, ПутьТабличногоДокументСправки); 
	
	
КонецФункции

&НаСервере
Процедура ОбновитьПредпросмотрСервер()
	
	ТекущаяСтраница = Элементы.Умц_ГруппаСправокСтраницы.ТекущаяСтраница;
	Для Каждого Подчиненный Из ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если СтрНачинаетсяС(Подчиненный.Имя, "ГруппаПредпросмотрСправки") Тогда
			Для Каждого Эл Из Подчиненный.ПодчиненныеЭлементы Цикл
				Если СтрНачинаетсяС(Эл.Имя, "ТабличноеПолеСправки") Тогда
					ДанныеСправки = ПолучитьВредныйФакторСправкиИТабДокПоГруппеСправки(ТекущаяСтраница);
					ЭтаФорма[Эл.ПутьКДанным] = ПолучитьТабДокСправки(ДанныеСправки.ВредныйФакторСправки, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиИмяПоляТабличногоДокументаПоГруппе(ТекущаяСтраница)
	
	Для Каждого Подчиненный Из ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если СтрНачинаетсяС(Подчиненный.Имя, "ГруппаПредпросмотрСправки") Тогда
			Для Каждого Эл Из Подчиненный.ПодчиненныеЭлементы Цикл
				Если СтрНачинаетсяС(Эл.Имя, "ТабличноеПолеСправки") Тогда
					Возврат Эл.Имя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьСвязанныеДокументы()
	
	СвязанныеДокументы.Очистить();
	
	Если Не (ИспользуютсяЭП И ИспользуетсяРЭМД И ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		Элементы.ГруппаСвязанныеДокументы.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСвязанныеДокументы.Видимость = Истина;
	
	ПриемыЛабораторноеИсследование = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьПриемыСВидомЛабораторноеИсследование(Объект.Ссылка);
	Для Каждого ЛабораторноеИсследование Из ПриемыЛабораторноеИсследование Цикл
		НоваяСтрока = СвязанныеДокументы.Добавить();
		НоваяСтрока.Дата = ЛабораторноеИсследование.Дата;
		НоваяСтрока.ВидДокумента = ЛабораторноеИсследование.ВидДокумента;
		НоваяСтрока.Описание = ЛабораторноеИсследование.Описание;
		НоваяСтрока.Документ = ЛабораторноеИсследование.Документ;
	КонецЦикла;
	
	ПриемыКонсультации = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьПриемыСВидомКонсультация(Объект.Ссылка);
	Для Каждого Консультация Из ПриемыКонсультации Цикл
		НоваяСтрока = СвязанныеДокументы.Добавить();
		НоваяСтрока.Дата = Консультация.Дата;
		НоваяСтрока.ВидДокумента = Консультация.ВидДокумента;
		НоваяСтрока.Описание = Консультация.Описание;
		НоваяСтрока.Документ = Консультация.Документ;
	КонецЦикла;
	
	ПриемыИнструментальноеИсследование = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьПриемыСВидомИнструментальноеИсследование(Объект.Ссылка);
	Для Каждого ИнструментальноеИсследование Из ПриемыИнструментальноеИсследование Цикл
		НоваяСтрока = СвязанныеДокументы.Добавить();
		НоваяСтрока.Дата = ИнструментальноеИсследование.Дата;
		НоваяСтрока.ВидДокумента = ИнструментальноеИсследование.ВидДокумента;
		НоваяСтрока.Описание = ИнструментальноеИсследование.Описание;
		НоваяСтрока.Документ = ИнструментальноеИсследование.Документ;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияЗаключенияПоДействиямМедосмотра(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьСвязанныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписи

#Область ЭлектронныеПодписиКоманды

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если МожноПерейтиКПодписанию() Тогда
		ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Ложь, Истина, ИспользуетсяРЭМД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодписаниюЭМД(Команда)
	
	Если МожноПерейтиКПодписанию() Тогда
		ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Истина, Истина, ИспользуетсяРЭМД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РЭМДПроверитьДанныеПередПодписанием(Команда)
	
	ИнтеграцияЕГИСЗ_РЭМДКлиент.ВыполнитьДействие(ЭтотОбъект, "ПроверитьДанныеПередПодписанием");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбъектаФормы()
	
	КопииТабличныхЧастей = КопироватьТабЧастиСКолонамиРеквизитов(Объект.ФакторыИУсловияРаботы, Объект.КритичныеПротивопоказания, Объект.ДействияМедосмотра);
	Прочитать();
	Для Каждого КлючТабличнаяЧасть Из КопииТабличныхЧастей Цикл
		КопироватьДанныеФормы(КлючТабличнаяЧасть.Значение, Объект[КлючТабличнаяЧасть.Ключ]);
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КопироватьТабЧастиСКолонамиРеквизитов(Знач ФакторыИУсловияРаботы, Знач КритичныеПротивопоказания, Знач ДействияМедосмотра)
	
	Возврат Новый Структура("ФакторыИУсловияРаботы, КритичныеПротивопоказания, ДействияМедосмотра", ФакторыИУсловияРаботы, КритичныеПротивопоказания, ДействияМедосмотра);
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписиСлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокПодписей()
	
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписей(Объект.Ссылка, УникальныйИдентификатор, Неопределено, ЭлектронныеПодписи,, СводкаHTML);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПодписания()
	
	ОбновитьСписокПодписей();
	УстановитьДоступностьВидимостьПоЭП();
	
КонецПроцедуры

&НаКлиенте
Функция МожноПерейтиКПодписанию()
	
	Если Не (ЗначениеЗаполнено(Объект.ПредседательМедКомиссии) И ЗначениеЗаполнено(Объект.ДатаЗавершения)) Тогда
		ПоказатьПредупреждение(, ?(ЗначениеЗаполнено(Объект.ПредседательМедКомиссии), НСтр("ru='Не заполнена дата заключения!'"), НСтр("ru='Не заполнен председатель мед комиссии!'")));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьСводкуПодписей(Ссылка, СводкаHTML, Знач ЭлектронныеПодписи, Знач ФакторыИУсловияРаботы)
	
	бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Ссылка, СводкаHTML, ЭлектронныеПодписи,, Новый Структура("ТаблицаФакторовИУсловийРабот", ФакторыИУсловияРаботы));
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписиУправлениеДоступностьюПолей

&НаСервере
Процедура УстановитьДоступностьВидимостьПоЭП()
		
	ПодписанЭП = ЭЦП_УМЦ_Сервер.ДокументПодписан(Объект.Ссылка);
	
	Если ИспользуютсяЭП Тогда
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаОсмотр",						Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаЗаключениеПрофпотолога",		Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаГруппаЗдоровья",				Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаЗаключениеПоРезультатам",	Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаПредседательДата",			Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаНомерДата",					Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаСохраненныеДанные",			Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаЗаключение",					Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Дата",								Не ПодписанЭП);
		
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "СделатьЗаключение",				"Доступность", Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ДействияМедосмотраПерезаполнить",	"Доступность", Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "Заполнить",						"Доступность", Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ОтменитьЗаключение",				"Доступность", Не ПодписанЭП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаключение(Команда)
	Объект.ДатаЗавершения = Дата(1,1,1,0,0,0);
	Элементы.ГруппаЗаключение.Видимость = Ложь;
	Элементы.СделатьЗаключение.Видимость = Истина;
	УстановитьВидимостьГруппыЗаключения();
	ВыводитьГруппуЭП = ИспользуютсяЭП И ЗначениеЗаполнено(Объект.ДатаЗавершения) И (ИспользуетсяРЭМД Или МедосмотрыСервер.ЕстьЗаполненныеМакетыПриказов(Объект.ФакторыИУсловияРаботы));
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ЭП", ВыводитьГруппуЭП);
	УстановитьДоступностьФакторовИУсловийРабот();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриемаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.ТаблицаПараметровСправокЗначение.РежимВыбораИзСписка = Ложь;
	Элементы.ТаблицаПараметровСправокЗначение.СписокВыбора.Очистить();
	ТекущиеДанные = Элементы.ТаблицаПараметровСправок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Параметр) Тогда
			
			СтрокиОтбораПараметра = ОтборыПараметров.НайтиСтроки(Новый Структура("Параметр, ВредныйФактор", ТекущиеДанные.Параметр, ТекущиеДанные.ВредныйФактор));
			Если СтрокиОтбораПараметра.Количество() > 0 Тогда
				ВидКлассификатора = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ВидКлассификатора");
				ПараметрыВыбораПоля = Новый Массив;
				ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.ВидКлассификатора", ВидКлассификатора));
				ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.УИДЕГИСЗ", СтрокиОтбораПараметра[0].Отбор.ВыгрузитьЗначения()));
				Элементы.ТаблицаПараметровСправокЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
				Возврат;
			КонецЕсли;
			
			ТипЗначения = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ТипЗначения");
			СписокЗначенийПараметра = ПолучитьСписокВыбораДляПараметра(ТекущиеДанные.Параметр); 
			
			Если СписокЗначенийПараметра.Количество() > 0 Тогда
				Элементы.ТаблицаПараметровСправокЗначение.РежимВыбораИзСписка = Истина;
				Для каждого ЗначениеПараметра Из СписокЗначенийПараметра Цикл
					Элементы.ТаблицаПараметровСправокЗначение.СписокВыбора.Добавить(ЗначениеПараметра.Значение,ЗначениеПараметра.Представление);	
				КонецЦикла; 
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				// Если это строковый параметр, то открываем форму ввода медицинского текстового параметра.
				СтандартнаяОбработка = Ложь;
				ОповещениеОВыборе = Новый ОписаниеОповещения("ВыбораЗначенияПараметраСправкиЗавершение", ЭтотОбъект); 
				МедицинскаяДеятельностьКлиент.ПоказатьФормуВводаТекста(Строка(ТекущиеДанные.Значение), ТекущиеДанные.Параметр, ОповещениеОВыборе, ЭтотОбъект);
			ИначеЕсли ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава")) Тогда 
				ВидКлассификатора = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ВидКлассификатора");
				НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидКлассификатора", ВидКлассификатора);
				ПараметрыВыбораПоля = Новый Массив;
				ПараметрыВыбораПоля.Добавить(НовыйПараметрВыбора);
				Элементы.ТаблицаПараметровСправокЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
			ИначеЕсли ТипЗначения.СодержитТип(Тип("ДокументСсылка.ДоговорСКлиентом"))
				Или ТипЗначения.СодержитТип(Тип("ДокументСсылка.Прием"))
			Тогда
				НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.Клиент", Объект.Клиент);
				ПараметрыВыбораПоля = Новый Массив;
				ПараметрыВыбораПоля.Добавить(НовыйПараметрВыбора);
				Элементы.ТаблицаПараметровСправокЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборыДоступныхЗначений()
	
	ОтборыПараметров.Очистить();
	
	Для Каждого ВрФактор Из Объект.ФакторыИУсловияРаботы Цикл
		                                                                        
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВрФактор.Фактор, "Родитель") = МедосмотрыКлиент.ПолучитьГруппуПриказовСправок() Тогда
			Продолжить;
		КонецЕсли;
		
		мОтборыПараметров = ПолучитьОтборыПараметров(Объект.Номенклатура);
		Для Каждого СтруктураОтбораПараметра Из мОтборыПараметров Цикл
			СтрокаОтбора = ОтборыПараметров.Добавить();
			СтрокаОтбора.Параметр = СтруктураОтбораПараметра.Параметр;
			СтрокаОтбора.ВредныйФактор = ВрФактор.Фактор;
			СтрокаОтбора.Отбор.ЗагрузитьЗначения(СтруктураОтбораПараметра.Отбор);
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтборыПараметров(Номенклатура)
	
	Шаблон = Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
	ОтборыПараметров = Новый Массив;
	МассивLocalid = ИнтеграцияЕГИСЗ_СЭМД.МассивLocalidДокумента(Шаблон.ВидДокумента);
	Для Каждого СтруктураLocalid Из МассивLocalid Цикл
		Если Не СтруктураLocalid.Свойство("ДопустимыеЗначения")
			Или СтруктураLocalid.ДопустимыеЗначения = Неопределено
		Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПараметрШаблона Из Шаблон.СоответствияПараметрам.НайтиСтроки(Новый Структура("localid", СтруктураLocalid.localid)) Цикл
			ОтборыПараметров.Добавить(Новый Структура("Параметр, Отбор", ПараметрШаблона.Параметр, СтруктураLocalid.ДопустимыеЗначения));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОтборыПараметров;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораДляПараметра(Параметр)
	
	СписокВыбора = Новый СписокЗначений;
	Для каждого СтрокаЗначения Из Параметр.ЗначенияВыбора Цикл
		Если Не СтрокаЗначения.ЭтоГруппа Тогда
			СписокВыбора.Добавить(СтрокаЗначения.Значение,СтрокаЗначения.Представление);	
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВыбораЗначенияПараметраСправкиЗавершение(Значение, ДополнительныеПараметры) Экспорт 
	
	Если Значение = Неопределено Тогда // Выбора не было
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаПараметровСправок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФакторыИУсловияРаботыФакторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ОтборСписка", СписокОтбораФакторов);
	Оповещение = Новый ОписаниеОповещения("ФакторыИУсловияРаботыФакторНачалоВыбораПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПереченьВредныхФакторовИРабот.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФакторыИУсловияРаботыФакторНачалоВыбораПродолжение(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.ФакторыИУсловияРаботы.ТекущиеДанные.Фактор = Результат;
		МедосмотрыКлиентСервер.ОбновитьИдентификаторыПриказов(Объект, Модифицированность);
		ФакторыИУсловияРаботыФакторПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФакторовИУсловийРабот()
	Элементы.ФакторыИУсловияРаботы.Доступность = Не ЗначениеЗаполнено(Объект.ДатаЗавершения);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
