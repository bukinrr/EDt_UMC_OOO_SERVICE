#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДополнительныеСвойства = Новый Структура;
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма, Ложь);
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		
		Если Объект.Ссылка.Пустая()
			И Объект.ДействияМедосмотра.Количество() = 0
		Тогда
			ПерезаполнитьДействияМедосмотра();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПараметрыПриема.Количество() = 0
		И Объект.ДействияМедосмотра.Количество() <> 0
	Тогда
		ПерезаполнитьПараметрыПриема();
	КонецЕсли;
	
	// Заключение
	Элементы.ГруппаЗаключение.Видимость = ЗначениеЗаполнено(Объект.ДатаЗавершения) И ЗначениеЗаполнено(Объект.ДатаЗавершения);
	Элементы.СделатьЗаключение.Видимость = Не Элементы.ГруппаЗаключение.Видимость;
	
	ЗаполнитьОтметкиПоРегистру();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		//Элементы.КнопкаСоздатьШтрихкод.Доступность = (РаботаСТорговымОборудованиемСервер.ПолучитьШтрихкодВладельца(Объект.Ссылка) = Неопределено);
	КонецЕсли;
	
	МедосмотрыСервер.ЗаполнитьУсловноеОформлениеСпискаПараметровПриема(ЭтаФорма.УсловноеОформление, Объект.ПараметрыПриема, "Объект.ПараметрыПриема.Параметр", "ПараметрыПриемаЗначение");
	
	// ЭЦП
	ИспользуютсяЭП = ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК();
	Если ИспользуютсяЭП И Не Объект.Ссылка.Пустая() Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
	СправкаТабличныйДокумент = ПолучитьТабДокСправки(Объект.Номенклатура, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
	
	// РЭМД
	ИспользуетсяРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	ШаблонРЭМД = ИспользуетсяРЭМД И ИнтеграцияЕГИСЗ_РЭМД.ИспользуетсяШаблонРЭМД(Объект.Номенклатура);
	
	УстановитьДоступностьВидимостьПоЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	// РЭМД
	ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновитьОтборыДоступныхЗначений();
	
	Если Не Объект.ПодписанЭП Тогда
		МедосмотрыКлиентСервер.ОбновитьИдентификаторыПриказов(Объект, Модифицированность);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МедосмотрыСервер.ЗаписатьОтметкиВыполненияДействияМедосмотра(ТекущийОбъект.Ссылка, ТекущийОбъект.Ссылка, Объект.ДействияМедосмотра);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Ложь, ЭтаФорма);
	
	Если ИспользуютсяЭП Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьПрохожденияМедосмотра");
	ЗаполнитьОтметкиПоРегистру();
	
	// ЭЦП.
	Если ДополнительныеСвойства.Свойство("ВыполнитьПроверкуЭП") Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("КоллекцияПодписей", ЭлектронныеПодписи);
		ПараметрыОповещения.Вставить("ДокументПодписан", Объект.ПодписанЭП);
		ПараметрыОповещения.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеЗавершенияПроверкиПодписи", ЭтотОбъект));
		
		бит_СертификатыЭЦПКлиент.ПроверитьПодписиОбъекта(ЭтотОбъект,,
			Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", бит_СертификатыЭЦПКлиент, ПараметрыОповещения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьОтметки" Тогда
		Если Параметр.ПрохождениеМО = Объект.Ссылка Тогда
			ЗаполнитьОтметкиПоРегистру(); // Что делать с изменениями
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменилисьПодписи" И Объект.Ссылка = Параметр Тогда
		ОбновитьДанныеПослеПодписания();
		ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
		ЭтотОбъект.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПодписей" И Объект.Ссылка = Параметр Тогда
		ОбновитьСписокПодписей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьОтметкиПоРегистру();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЭтоПодписание") Тогда
		ДополнительныеСвойства.Вставить("ЭтоПодписание");
	КонецЕсли;
	
	Если ИспользуютсяЭП И Не ДополнительныеСвойства.Свойство("ЭтоПодписание") Тогда
		Если Не Объект.Ссылка.Пустая() И Объект.ПодписанЭП Тогда
			Если Вопрос(НСтр("ru='Документ подписан, после записи подпись будет перепроверена. Продолжить?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			Иначе
				ДополнительныеСвойства.Вставить("ВыполнитьПроверкуЭП");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействияМедосмотраПерезаполнить(Команда)
	
	ПерезаполнитьДействияМедосмотра();
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	ЗаполнитьОтметкиПоРегистру();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюЗначенияПараметров(Команда)
	
	ПараметрыДляАвтоЗаполнения = Новый Массив;
	Для Каждого СтрокаПараметр Из Объект.ПараметрыПриема Цикл
		ПараметрыДляАвтоЗаполнения.Добавить(СтрокаПараметр.Параметр);
	КонецЦикла;
	
	ЗначенияПоУмолчанию = РаботаСШаблонамиHTML.ПолучитьЗначенияПоУмолчаниюМассиваПараметров(ПараметрыДляАвтоЗаполнения, Объект);
	Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
		НайденныеСтроки = Объект.ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр", ЗначениеПоУмолчанию.Параметр));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденныеСтроки[0].Значение = ЗначениеПоУмолчанию.Значение;
		КонецЕсли;
	КонецЦикла;
	
	СправкаТабличныйДокумент = ПолучитьТабДокСправки(Объект.Номенклатура, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНеЗаполненныеПоОтметкам(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначенияВрачей = ЗначенияПараметровИзДокументовВрачей(Объект.Ссылка);
		Для Каждого СтрокаПараметр Из Объект.ПараметрыПриема Цикл
			Если Не ЗначениеЗаполнено(СтрокаПараметр.Значение) Тогда
				Значение = ЗначенияВрачей.Получить(СтрокаПараметр.Параметр);
				Если Значение <> Неопределено Тогда
					СтрокаПараметр.Значение = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СправкаТабличныйДокумент = ПолучитьТабДокСправки(Объект.Номенклатура, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьЗаключение(Команда)
	
	СделатьЗаключениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВФормеПечати(Команда)
	
	СтруктураНаПечать = Новый Структура;
	
	ОписаниеПечатнойФормы = Новый Структура;
	ОписаниеПечатнойФормы.Вставить("СинонимМакета", Строка(Объект.Номенклатура));
	ОписаниеПечатнойФормы.Вставить("Экземпляров",	1);
	ОписаниеПечатнойФормы.Вставить("ИмяМакета", Строка(Объект.Номенклатура));
	ОписаниеПечатнойФормы.Вставить("ПолныйПутьКМакету", "");
	ОписаниеПечатнойФормы.Вставить("ИмяФайлаПечатнойФормы", "");
	ОписаниеПечатнойФормы.Вставить("ТабличныйДокумент", СправкаТабличныйДокумент);
	
	КоллекцияПечатныхФорм = Новый Массив; 
	КоллекцияПечатныхФорм.Добавить(ОписаниеПечатнойФормы);
	СтруктураНаПечать.Вставить("КоллекцияПечатныхФорм",КоллекцияПечатныхФорм);

	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов",СтруктураНаПечать,,Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПараметров(Команда)
	
	ПерезаполнитьПараметрыПриема();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	СправкаТабличныйДокумент = ПолучитьТабДокСправки(Объект.Номенклатура, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРаботыПоискКонтрагента(Команда)
	Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора");
	Результат = Форма.ОткрытьМодально();
	Если Результат <> Неопределено Тогда 
		НаименованиеПолное = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Результат, "НаименованиеПолное");
		Объект.МестоРаботы = ?(ЗначениеЗаполнено(НаименованиеПолное), НаименованиеПолное, 
								ОбщегоНазначения.ПолучитьЗначениеРеквизита(Результат, "Представление"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	Если Объект.ДействияМедосмотра.Количество() = 0 Тогда
		ПерезаполнитьДействияМедосмотра();
	КонецЕсли;
	Объект.Профессия = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Клиент, "Профессия");
	Объект.ЦехУчасток = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Клиент, "ЦехУчасток");
	Объект.ФИОКлиента = CRMСервер.ПолучитьФИООбъекта(Объект.Клиент);
	УМЦМестоРаботы = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Клиент, "УМЦМестоРаботы");
	Если ТипЗнч(УМЦМестоРаботы) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.МестоРаботы = ОбщегоНазначения.ПолучитьЗначениеРеквизита(УМЦМестоРаботы, "НаименованиеПолное");
	Иначе
		Объект.МестоРаботы = УМЦМестоРаботы;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Клиент, "Тестовый") = Истина Тогда
		Объект.Тестовый = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияМедосмотраВыполненоПриИзменении(Элемент)
	
	ТД = Элементы.ДействияМедосмотра.ТекущиеДанные;
	
	Если ТД <> Неопределено Тогда
		
		ТД.Изменено = НЕ ТД.Изменено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если Объект.ДействияМедосмотра.Количество() = 0 Тогда
		ПерезаполнитьДействияМедосмотра();
	КонецЕсли;
	
	// РЭМД
	ШаблонРЭМД = ИспользуетсяРЭМД И ИнтеграцияЕГИСЗ_РЭМД.ИспользуетсяШаблонРЭМД(Объект.Номенклатура);
	
	Элементы.ГруппаЭП.Видимость = ИспользуютсяЭП И Не ПустойТабДок(ШаблонРЭМД, Объект.Номенклатура);
	
	ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновитьОтборыДоступныхЗначений();
	МедосмотрыКлиентСервер.ОбновитьИдентификаторыПриказов(Объект, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриемаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.ПараметрыПриемаЗначение.РежимВыбораИзСписка = Ложь;
	Элементы.ПараметрыПриемаЗначение.СписокВыбора.Очистить();
	ТекущиеДанные = Элементы.ПараметрыПриема.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Параметр) Тогда
			
			СтрокиОтбораПараметра = ОтборыПараметров.НайтиСтроки(Новый Структура("Параметр", ТекущиеДанные.Параметр));
			Если СтрокиОтбораПараметра.Количество() > 0 Тогда
				ВидКлассификатора = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ВидКлассификатора");
				ПараметрыВыбораПоля = Новый Массив;
				ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.ВидКлассификатора", ВидКлассификатора));
				ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.УИДЕГИСЗ", СтрокиОтбораПараметра[0].Отбор.ВыгрузитьЗначения()));
				Элементы.ПараметрыПриемаЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
				Возврат;
			КонецЕсли;
			
			ТипЗначения = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ТипЗначения");
			СписокЗначенийПараметра = ПолучитьСписокВыбораДляПараметра(ТекущиеДанные.Параметр); 
			
			Если СписокЗначенийПараметра.Количество() > 0 Тогда
				Элементы.ПараметрыПриемаЗначение.РежимВыбораИзСписка = Истина;
				Для каждого ЗначениеПараметра Из СписокЗначенийПараметра Цикл
					Элементы.ПараметрыПриемаЗначение.СписокВыбора.Добавить(ЗначениеПараметра.Значение,ЗначениеПараметра.Представление);	
				КонецЦикла; 
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				// Если это строковый параметр, то открываем форму ввода медицинского текстового параметра.
				СтандартнаяОбработка = Ложь;
				ОповещениеОВыборе = Новый ОписаниеОповещения("ВыбораЗначенияПараметраЗавершение", ЭтотОбъект); 
				МедицинскаяДеятельностьКлиент.ПоказатьФормуВводаТекста(Строка(ТекущиеДанные.Значение), ТекущиеДанные.Параметр, ОповещениеОВыборе, ЭтотОбъект);
			ИначеЕсли ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава")) Тогда 
				ВидКлассификатора = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ВидКлассификатора");
				НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидКлассификатора", ВидКлассификатора);
				ПараметрыВыбораПоля = Новый Массив;
				ПараметрыВыбораПоля.Добавить(НовыйПараметрВыбора);
				Элементы.ПараметрыПриемаЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
			ИначеЕсли ТипЗначения.СодержитТип(Тип("ДокументСсылка.ДоговорСКлиентом"))
				Или ТипЗначения.СодержитТип(Тип("ДокументСсылка.Прием"))
			Тогда
				НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.Клиент", Объект.Клиент);
				ПараметрыВыбораПоля = Новый Массив;
				ПараметрыВыбораПоля.Добавить(НовыйПараметрВыбора);
				Элементы.ПараметрыПриемаЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриемаЗначениеПриИзменении(Элемент)
	
	СправкаТабличныйДокумент = ПолучитьТабДокСправки(Объект.Номенклатура, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЭП Тогда
		ИнтеграцияЕГИСЗ_РЭМДКлиент.НастроитьЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриемаЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПараметрыПриема.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Параметр) Тогда
			
			СтрокиОтбораПараметра = ОтборыПараметров.НайтиСтроки(Новый Структура("Параметр", ТекущиеДанные.Параметр));
			Если СтрокиОтбораПараметра.Количество() > 0 Тогда
				ВидКлассификатора = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ВидКлассификатора");
				ПараметрыПолученияДанных.Отбор.Вставить("ВидКлассификатора", ВидКлассификатора);
				ПараметрыПолученияДанных.Отбор.Вставить("УИДЕГИСЗ", СтрокиОтбораПараметра[0].Отбор.ВыгрузитьЗначения());
				Возврат;
			КонецЕсли;
			
			ТипЗначения = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ТипЗначения");
			СписокЗначенийПараметра = ПолучитьСписокВыбораДляПараметра(ТекущиеДанные.Параметр); 
			
			Если СписокЗначенийПараметра.Количество() > 0 Тогда
				Элементы.ПараметрыПриемаЗначение.РежимВыбораИзСписка = Истина;
				Для каждого ЗначениеПараметра Из СписокЗначенийПараметра Цикл
					Элементы.ПараметрыПриемаЗначение.СписокВыбора.Добавить(ЗначениеПараметра.Значение,ЗначениеПараметра.Представление);	
				КонецЦикла; 
			ИначеЕсли ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава")) Тогда
				ВидКлассификатора = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.Параметр, "ВидКлассификатора");
				ПараметрыПолученияДанных.Отбор.Вставить("ВидКлассификатора", ВидКлассификатора);
			ИначеЕсли ТипЗначения.СодержитТип(Тип("ДокументСсылка.ДоговорСКлиентом"))
				Или ТипЗначения.СодержитТип(Тип("ДокументСсылка.Прием")) Тогда
				ПараметрыПолученияДанных.Отбор.Вставить("Клиент", Объект.Клиент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбораЗначенияПараметраЗавершение(Значение, ДополнительныеПараметры) Экспорт 
	
	Если Значение = Неопределено Тогда // Выбора не было
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ПараметрыПриема.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДействияМедосмотра()
	
	Документы.ПрохождениеМедосмотра.ПерезаполнитьДействияПрохожденияМедосмотраСправки(Объект, Объект.ДействияМедосмотра);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПараметрыПриема()
	
	ДействияМедосмотра = Объект.ДействияМедосмотра.Выгрузить().ВыгрузитьКолонку("Действие");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначенияВрачей = ЗначенияПараметровИзДокументовВрачей(Объект.Ссылка);
	Иначе
		ЗначенияВрачей = Неопределено;
	КонецЕсли;
	
	МедосмотрыСервер.ОбновитьСписокПараметровДокументаМедосмотраСправки(ДействияМедосмотра, Объект.ПараметрыПриема, Объект, Объект.Номенклатура.ВредныйФакторСправки, , Истина, ЗначенияВрачей);
	
	МедосмотрыСервер.ЗаполнитьУсловноеОформлениеСпискаПараметровПриема(ЭтаФорма.УсловноеОформление, Объект.ПараметрыПриема, "Объект.ПараметрыПриема.Параметр", "ПараметрыПриемаЗначение");
	
	СправкаТабличныйДокумент = ПолучитьТабДокСправки(Объект.Номенклатура, Объект.ПараметрыПриема, Объект.Ссылка, ЭлектронныеПодписи);
	
КонецПроцедуры

&НаСервере
Процедура СделатьЗаключениеСервер()
	
	Объект.ДатаЗавершения = ТекущаяДата();
	
	СотрудникПользователя = ОтраслевыеДополнения.СотрудникПользователяПоФилиалу(ПараметрыСеанса.ТекущийПользователь, Объект.Филиал);
	
	Если ЗначениеЗаполнено(СотрудникПользователя) Тогда
		Объект.ПредседательМедКомиссии = СотрудникПользователя;
	Иначе
		Объект.ПредседательМедКомиссии = МедосмотрыСерверПовтИсп.ПолучитьСотрудникаМедкомиссии(Объект.ДатаЗавершения, Объект.Филиал,, Справочники.РолиЧленовКомиссии.Председатель);
	КонецЕсли;
	
	Элементы.ГруппаЗаключение.Видимость = Истина;
	Элементы.СделатьЗаключение.Видимость = Ложь;
	
	ПерезаполнитьПараметрыПриема();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтметкиПоРегистру()
	
	Документы.ПрохождениеМедосмотра.ЗаполнитьОтметкиВыполненияДействийМедосмотра(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПараметровИзДокументовВрачей(ДокументМедосмотра)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументМедосмотра", ДокументМедосмотра);
	Запрос.Текст = 
	"
	//|ВЫБРАТЬ
	//|	ЗначенияПараметровHTML.Параметр КАК Параметр,
	//|	ЗначенияПараметровHTML.Значение КАК Значение
	//|ИЗ
	//|	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
	//|ГДЕ
	//|	(ЗначенияПараметровHTML.Документ ССЫЛКА Документ.Прием
	//|				И ВЫРАЗИТЬ(ЗначенияПараметровHTML.Документ КАК Документ.Прием).ПервичныйПрием = &ДокументМедосмотра
	////|			ИЛИ ЗначенияПараметровHTML.Документ ССЫЛКА Документ.ОтметкаВыполненияМедосмотра
	////|				И ВЫРАЗИТЬ(ЗначенияПараметровHTML.Документ КАК Документ.ОтметкаВыполненияМедосмотра).ПрохождениеМедОсмотра = &ДокументМедосмотра)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтметкаВыполненияМедосмотраПараметрыПриема.Параметр,
	|	ОтметкаВыполненияМедосмотраПараметрыПриема.Значение
	|ИЗ
	|	Документ.ОтметкаВыполненияМедосмотра.ПараметрыПриема КАК ОтметкаВыполненияМедосмотраПараметрыПриема
	|ГДЕ
	|	ОтметкаВыполненияМедосмотраПараметрыПриема.Ссылка.ПрохождениеМедОсмотра = &ДокументМедосмотра"
	;
	Значения = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаЗначения Из Значения Цикл
		Если ЗначениеЗаполнено(СтрокаЗначения.Значение) Тогда
			Результат.Вставить(СтрокаЗначения.Параметр, СтрокаЗначения.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТабДокСправки(Номенклатура, Знач ПараметрыПриема, Ссылка, Знач Подписи)
	
	Если Ложь Тогда Номенклатура = Справочники.Номенклатура.ПустаяСсылка() КонецЕсли;
	
	Возврат Документы.ПрохождениеМедосмотра.ТабличныйДокументСправки(Ссылка, Номенклатура, ПараметрыПриема, Подписи);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораДляПараметра(Параметр)
	
	СписокВыбора = Новый СписокЗначений;
	Для каждого СтрокаЗначения Из Параметр.ЗначенияВыбора Цикл
		Если Не СтрокаЗначения.ЭтоГруппа Тогда
			СписокВыбора.Добавить(СтрокаЗначения.Значение,СтрокаЗначения.Представление);	
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтборыДоступныхЗначений()
	
	ОтборыПараметров.Очистить();
	Если Не ШаблонРЭМД Тогда
		Возврат;
	КонецЕсли;
	
	мОтборыПараметров = ПолучитьОтборыПараметров(Объект.Номенклатура);
	Для Каждого СтруктураОтбораПараметра Из мОтборыПараметров Цикл
		СтрокаОтбора = ОтборыПараметров.Добавить();
		СтрокаОтбора.Параметр = СтруктураОтбораПараметра.Параметр;
		СтрокаОтбора.Отбор.ЗагрузитьЗначения(СтруктураОтбораПараметра.Отбор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтборыПараметров(Номенклатура)
	
	Шаблон = Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
	ОтборыПараметров = Новый Массив;
	МассивLocalid = ИнтеграцияЕГИСЗ_СЭМД.МассивLocalidДокумента(Шаблон.ВидДокумента);
	Для Каждого СтруктураLocalid Из МассивLocalid Цикл
		Если Не СтруктураLocalid.Свойство("ДопустимыеЗначения")
			Или СтруктураLocalid.ДопустимыеЗначения = Неопределено
		Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПараметрШаблона Из Шаблон.СоответствияПараметрам.НайтиСтроки(Новый Структура("localid", СтруктураLocalid.localid)) Цикл
			ОтборыПараметров.Добавить(Новый Структура("Параметр, Отбор", ПараметрШаблона.Параметр, СтруктураLocalid.ДопустимыеЗначения));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОтборыПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустойТабДок(ШаблонРЭМД, Номенклатура)
	
	Если Не ШаблонРЭМД Тогда
		Если Не ЗначениеЗаполнено(Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
			Возврат Истина;
		Иначе
			Возврат МедосмотрыСервер.ПустойТабДокШаблонаСправки(Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

#Область ЭлектронныеПодписиКоманды

&НаКлиенте
Процедура ПодписатьВсе(Команда)
	
	ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодписаниюЭМД(Команда)
	
	ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РЭМДПроверитьДанныеПередПодписанием(Команда)
	
	ИнтеграцияЕГИСЗ_РЭМДКлиент.ВыполнитьДействие(ЭтотОбъект, "ПроверитьДанныеПередПодписанием");
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписиСлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокПодписей()
	
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписей(Объект.Ссылка, УникальныйИдентификатор, Элементы.ГруппаЭП, ЭлектронныеПодписи,, СводкаHTML);
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПодписания()
	
	ОбновитьСписокПодписей();
	УстановитьДоступностьВидимостьПоЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияПроверкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписиУправлениеДоступностьюПолей

&НаСервере
Процедура УстановитьДоступностьВидимостьПоЭП()
	
	Элементы.ГруппаЭП.Видимость = ИспользуютсяЭП И (ИспользуетсяРЭМД Или Не ПустойТабДок(ШаблонРЭМД, Объект.Номенклатура));
	ПодписанЭП = ЭЦП_УМЦ_Сервер.ДокументПодписан(Объект.Ссылка);
	
	Если ИспользуютсяЭП Тогда
		
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Дата",					Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Номенклатура",			Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "Клиент",				Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(Элементы, "ГруппаРабочаяОбласть",	Не ПодписанЭП);
		
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ДействияМедосмотраПерезаполнить",			"Доступность", Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ПараметрыПриемаГруппаЗаполнить",			"Доступность", Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ПараметрыПриемаОбновитьСписокПараметров",	"Доступность", Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "СделатьЗаключение",						"Доступность", Не ПодписанЭП);
		РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "КнопкаФилиал",							"Доступность", Не ПодписанЭП);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи()
	
	Прочитать();
	УстановитьДоступностьВидимостьПоЭП();
	ОбновитьСписокПодписей();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти