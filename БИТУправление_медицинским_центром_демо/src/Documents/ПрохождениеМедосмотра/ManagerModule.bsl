#Область ПрограммныйИнтерфейс

Функция ПолучитьСписокДинамическихПечатныхФорм() Экспорт
	
	мПечатныхФорм = Новый Массив;
	
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "Заключение",				 НСтр("ru='Заключение медицинского осмотра'")));
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "КартаМедОсмотра025у",	 НСтр("ru='Программа прохождения и медкарта (025у)'")));
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "КартаМедОсмотра025уA5",	 НСтр("ru='Титульный лист медицинской карты (025у)'")));
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "ОсмотрПрофпатолога",		 НСтр("ru='Осмотр профпатолога'")));
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "ПаспортЗдоровья",		 НСтр("ru='Паспорт здоровья работника (302н)'")));
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "Паспорт14Пункт",			 НСтр("ru='Паспорт здоровья работника (только 14 пункт)(302н)'")));
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "Заключение342н",			 НСтр("ru='Заключение психиатрического освидетельствования работника'")));

	Возврат мПечатныхФорм;
	
КонецФункции

// Возвращает доступные варианты печати документа
// 
// Возвращаемое значение:
//  Струткура - структура каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Заключение",				 НСтр("ru='Заключение медицинского осмотра (29н)'"));
	СтруктураМакетов.Вставить("КартаМедОсмотра025у",	 НСтр("ru='Программа прохождения и медкарта (025у)'"));
	СтруктураМакетов.Вставить("КартаМедОсмотра025уA5",	 НСтр("ru='Титульный лист медицинской карты (025у)'"));
	СтруктураМакетов.Вставить("КартаМедОсмотра",		 НСтр("ru='Программа прохождения мед. осмотра'"));
	СтруктураМакетов.Вставить("КартаМедОсмотраСокр",	 НСтр("ru='Исследования программы прохождения мед. осмотра'"));
	СтруктураМакетов.Вставить("Выписка",				 НСтр("ru='Выписка из медицинской карты о прохождении'"));
	СтруктураМакетов.Вставить("ОсмотрПрофпатолога",		 НСтр("ru='Осмотр профпатолога'"));
	СтруктураМакетов.Вставить("ПаспортЗдоровья",		 НСтр("ru='Паспорт здоровья работника (302н)'"));
	СтруктураМакетов.Вставить("Паспорт14Пункт",			 НСтр("ru='Паспорт здоровья работника (только 14 пункт)(302н)'"));
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПолучитьСтруктуруДинамическихПечатныхФорм(СсылкаДокумент) Экспорт
	
	ВидМедосмотра = СсылкаДокумент.ВидМО;
	ПолныйСписокПечатныхФорм = Новый Массив;
	Если ЗначениеЗаполнено(ВидМедосмотра) Тогда
		Если ТипЗнч(ВидМедосмотра) = Тип("СправочникСсылка.ВидыМедосмотров") Тогда
			Для Каждого СтрокаПриказ Из ВидМедосмотра.Приказы Цикл
				Если ТипЗнч(СтрокаПриказ.Приказ) = Тип("СправочникСсылка.ПриказыМедосмотров") 
					И ЗначениеЗаполнено(СтрокаПриказ.Приказ) 
				Тогда
					Для Каждого ПечФорма Из СтрокаПриказ.Приказ.МакетыПечати Цикл
						Если ПечФорма.ОбластьПрименения = Перечисления.ОбластьПримененияПФДляМО.ПрохождениеМО
							И ПолныйСписокПечатныхФорм.Найти(ПечФорма) = Неопределено 
						Тогда 
							ПолныйСписокПечатныхФорм.Добавить(ПечФорма);
						КонецЕсли;
					КонецЦикла;
				Иначе
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДинамическихПечатныхФорм = Новый Структура;
	
	Для Каждого ПФ Из ПолныйСписокПечатныхФорм Цикл
		
		Если ТипЗнч(ПФ.Макет) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", Неопределено, ПФ.Макет);
			УникальноеИмя = СтрЗаменить("u" + Строка(Новый УникальныйИдентификатор()), "-", "_");
			СтруктураДинамическихПечатныхФорм.Вставить(УникальноеИмя, СтруктураДанныхПФ);
		ИначеЕсли ТипЗнч(ПФ.Макет) = Тип("Строка") Тогда
			ОбработатьВстроенныеПечатныеФормы(ПФ.Макет, СтруктураДинамическихПечатныхФорм);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Программа прохождения мед. осмотра'"), Неопределено);
	СтруктураДинамическихПечатныхФорм.Вставить("КартаМедОсмотра", СтруктураДанныхПФ);
	
	СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Исследования программы прохождения мед. осмотра'"), Неопределено);
	СтруктураДинамическихПечатныхФорм.Вставить("КартаМедОсмотраСокр", СтруктураДанныхПФ);

	СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Выписка из медицинской карты о прохождении'"), Неопределено);
	СтруктураДинамическихПечатныхФорм.Вставить("Выписка", СтруктураДанныхПФ);
	
	Возврат СтруктураДинамическихПечатныхФорм; 
	
КонецФункции

Процедура ОбработатьВстроенныеПечатныеФормы(ИмяМакета, СтруктураДинамическихПечатныхФорм)
	
	Если ИмяМакета = "Заключение" Тогда 
		СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Заключение медицинского осмотра'"), Неопределено); 
		СтруктураДинамическихПечатныхФорм.Вставить("Заключение", СтруктураДанныхПФ);
	ИначеЕсли ИмяМакета = "КартаМедОсмотра025у" Тогда
	    СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Программа прохождения и медкарта (025у)'"), Неопределено);
		СтруктураДинамическихПечатныхФорм.Вставить("КартаМедОсмотра025у", СтруктураДанныхПФ); 
	ИначеЕсли ИмяМакета = "КартаМедОсмотра025уA5" Тогда	
		СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Титульный лист медицинской карты (025у)'"), Неопределено);
		СтруктураДинамическихПечатныхФорм.Вставить("КартаМедОсмотра025уA5", СтруктураДанныхПФ);
	ИначеЕсли ИмяМакета = "ОсмотрПрофпатолога" Тогда	
		СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Осмотр профпатолога'"), Неопределено);
		СтруктураДинамическихПечатныхФорм.Вставить("ОсмотрПрофпатолога", СтруктураДанныхПФ);
	ИначеЕсли ИмяМакета = "ПаспортЗдоровья" Тогда	
		СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю",  НСтр("ru='Паспорт здоровья работника (302н)'"), Неопределено);
		СтруктураДинамическихПечатныхФорм.Вставить("ПаспортЗдоровья", СтруктураДанныхПФ);
	ИначеЕсли ИмяМакета = "Заключение342н" Тогда
		СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю",  НСтр("ru='Заключение психиатрического освидетельствования работника'"), Неопределено);
		СтруктураДинамическихПечатныхФорм.Вставить("Заключение342н", СтруктураДанныхПФ);
	КонецЕсли;

КонецПроцедуры

// Процедура формирует печатную форму документа
//  
//  Название макета печати передается в качестве параметра,
//  по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка.ПрохождениеМедосмотра - документ прохождения.
//  ИмяМакета		 - Строка	 - название макета.
//  СохранениеЭМД	 - Булево	 - для сохранения ЭМД.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция Печать(СсылкаНаОбъект, ИмяМакета, СохранениеЭМД = Ложь) Экспорт
	
	Перем ТабДокумент;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КартаМедОсмотра" Тогда
		ТабДокумент = ПечатьКарта(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "КартаМедОсмотраСокр" Тогда
		ТабДокумент = ПечатьКарта(СсылкаНаОбъект,,,Истина);
	ИначеЕсли ИмяМакета = "КартаМедОсмотра025у" Тогда
		ТабДокумент = ПечатьКарта(СсылкаНаОбъект, Истина);
	ИначеЕсли ИмяМакета = "КартаМедОсмотра025уA5" Тогда
		ТабДокумент = ПечатьКарта(СсылкаНаОбъект, Истина, Истина);
	ИначеЕсли ИмяМакета = "МедицинскоеЗаключение" Тогда
		ТабДокумент = ПечатьМедЗаключение(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "Заключение" Тогда
		ТабДокумент = ПечатьЗаключение(СсылкаНаОбъект, СохранениеЭМД);
	ИначеЕсли ИмяМакета = "Заключение342н" Тогда
		ТабДокумент = ПечатьЗаключение342н(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "Выписка" Тогда
		ТабДокумент = ПечатьВыписка(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "ПаспортЗдоровья" Тогда
		ТабДокумент = ПечатьПаспортаЗдоровья(СсылкаНаОбъект,Ложь);
	ИначеЕсли ИмяМакета = "Паспорт14Пункт" Тогда
		ТабДокумент = ПечатьПаспортаЗдоровья(СсылкаНаОбъект,Истина);
	ИначеЕсли ИмяМакета = "ОсмотрПрофпатолога" Тогда
		ТабДокумент = ПечатьОсмотрПрофпатолога(СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Перезаполняет действия медосмотра по данным клиента.
//
// Параметры:
//  Объект	 - ДокументСсылка.ПрохождениеМедосмотра	 - документ медосмотра.
//
Процедура ПерезаполнитьДействияПрохожденияМедосмотра(Объект, ВыводитьСообщения=Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ВидМО) Тогда
		//Возврат; подумать нужна ли эта проверка здесь
	КонецЕсли;
	
	Клиент = Объект.Клиент;
	
	ЗаполнятьИзСметы = 
		ЗначениеЗаполнено(Объект.СписокНаПрохождениеМедосмотра) И 
		Объект.СписокНаПрохождениеМедосмотра.ДействияМедосмотраФиксируютсяСметой И
		Объект.СписокНаПрохождениеМедосмотра.Услуги.Количество() > 0;
	
	Если ЗаполнятьИзСметы Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокНаПрохождениеМедосмотраУслуги.Действие
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра.Услуги КАК СписокНаПрохождениеМедосмотраУслуги
		|ГДЕ
		|	СписокНаПрохождениеМедосмотраУслуги.Ссылка = &СписокНаПрохождение
		|	И СписокНаПрохождениеМедосмотраУслуги.Клиент = &Клиент";
		Запрос.УстановитьПараметр("СписокНаПрохождение", Объект.СписокНаПрохождениеМедосмотра);
		Запрос.УстановитьПараметр("Клиент", Объект.Клиент);
		
		Результат = Запрос.Выполнить();
		
		Если ЗаполнятьИзСметы И Результат.Пустой() И ВыводитьСообщения Тогда
			ТекстСообщения = НСтр("ru = 'В смете на медосмотр отсутствуют услуги на данного пациента'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ДействияМедосмотра = Результат.Выгрузить();
		
	Иначе
		
		СписокКлиентов = Новый ТаблицаЗначений;
		СписокКлиентов.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
		СписокКлиентов.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
		СписокКлиентов.Колонки.Добавить("Возраст", Новый ОписаниеТипов("Число"));
		СписокКлиентов.Колонки.Добавить("ТипМедосмотра", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыМедосмотров"));
		
		Пол = Объект.Клиент.Пол;
		Возраст = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(Объект.Клиент.ДатаРождения, Объект.Дата); 
		
		СтрокаКлиент = СписокКлиентов.Добавить();
		СтрокаКлиент.Клиент = Объект.Клиент;
		СтрокаКлиент.Пол = Пол;
		СтрокаКлиент.Возраст = Возраст;
		СтрокаКлиент.ТипМедосмотра = Объект.ТипМедосмотра;
		
		ВредныеФакторы = Новый ТаблицаЗначений;
		ВредныеФакторы.Колонки.Добавить("ВредныйФактор", Новый ОписаниеТипов("СправочникСсылка.ПереченьВредныхФакторовИРабот"));
		ВредныеФакторы.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
		ВредныеФакторы.Колонки.Добавить("ТипМедосмотра", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыМедосмотров"));
		ВредныеФакторы.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
		ВредныеФакторы.Колонки.Добавить("Возраст", Новый ОписаниеТипов("Число"));
		
		Для Каждого СтрокаФактор Из Объект.ФакторыИУсловияРаботы Цикл
			СтрокаВредныйФактор = ВредныеФакторы.Добавить();
			СтрокаВредныйФактор.ВредныйФактор = СтрокаФактор.Фактор;
			СтрокаВредныйФактор.Клиент = Объект.Клиент;
			СтрокаВредныйФактор.ТипМедосмотра = Объект.ТипМедосмотра;
			СтрокаВредныйФактор.Пол = Пол;
			СтрокаВредныйФактор.Возраст = Возраст;
		КонецЦикла;
		
		ДействияМедосмотра = МедосмотрыСервер.ПолучитьСписокУслугПоКлиентам(Объект.ВидМО, СписокКлиентов, ВредныеФакторы, Объект.Дата,,Истина); 
		
	КонецЕсли;
		
	Объект.ДействияМедосмотра.Загрузить(ДействияМедосмотра);
	
КонецПроцедуры

// Перезаполняет действия прохождения медосмотра справки.
//
// Параметры:
//  Объект	 - ДокументОбъект.ПрохождениеМедосмотра	 - документ медосмотра.
//
Процедура ПерезаполнитьДействияПрохожденияМедосмотраСправки(Объект, ДействияМедосмотра = Неопределено) Экспорт
	
	Если ДействияМедосмотра = Неопределено Тогда
		ТзДействияМедосмотра = Объект.ДействияМедосмотра;
	Иначе
		ТзДействияМедосмотра = ДействияМедосмотра;
	КонецЕсли;
	
	ТзДействияМедосмотра.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ВредныйФакторСДействиями = Объект.Номенклатура.ВредныйФакторСправки;
	мФакторов = Новый Массив;
	мФакторов.Добавить(ВредныйФакторСДействиями);
	
	
	тзДействия = МедосмотрыСервер.ПолучитьСписокУслугПоКлиенту(Неопределено, Перечисления.ТипыМедосмотров.ПустаяСсылка(), Объект.Клиент, мФакторов, ТекущаяДата(), , Истина);
	
	Для Каждого Эл Из тзДействия Цикл
		
		ТзДействияМедосмотра.Добавить().Действие = Эл.Действие;
		
	КонецЦикла;
	
	ЗаписываемОтметки = Ложь;
	
	ДокументПродажи = Объект.ДокументПродажи;
	ТЗДействийОтметкаЛожь = Новый ТаблицаЗначений;
	ТЗДействийОтметкаЛожь.Колонки.Добавить("Действие");
	
	Если ЗначениеЗаполнено(ДокументПродажи) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияМедОсмотровДляСправок.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ДействияМедОсмотровДляСправок КАК ДействияМедОсмотровДляСправок
		|ГДЕ
		|	ДействияМедОсмотровДляСправок.ОказаниеУслуг = &ОказаниеУслуг
		|	И ДействияМедОсмотровДляСправок.НоменклатураСправки = &НоменклатураСправки";
		
		Запрос.УстановитьПараметр("ОказаниеУслуг", ДокументПродажи);
		Запрос.УстановитьПараметр("НоменклатураСправки", Объект.Номенклатура);
		
		ТЗДействийОтметкаЛожь = Запрос.Выполнить().Выгрузить();
		
		Если ТЗДействийОтметкаЛожь.Количество() > 0 Тогда
			ЗаписываемОтметки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРаботВрачи.Врач КАК Действие
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.Врачи КАК ПереченьВредныхФакторовИРаботВрачи
		|ГДЕ
		|	ПереченьВредныхФакторовИРаботВрачи.НеТребуетОтметкиВыполнения = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.ЛабораторныеИФункциональныеИсследования КАК ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования
		|ГДЕ
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.НеТребуетОтметкиВыполнения = ИСТИНА";
	
	ТЗДействийНеТребующиеВыполнения = Запрос.Выполнить().Выгрузить();
	
	Если ТЗДействийНеТребующиеВыполнения.Количество() > 0 Тогда
		ЗаписываемОтметки = Истина;
	КонецЕсли;
	
	Если ЗаписываемОтметки Тогда
		Если ДействияМедосмотра = Неопределено Тогда
			ЗаписатьВРегистрОтметкиВыполнения(ТзДействияМедосмотра, ТЗДействийОтметкаЛожь, ТЗДействийНеТребующиеВыполнения, Объект);
		Иначе
			УстановитьНаФормеОтметкиВыполнения(ТзДействияМедосмотра, ТЗДействийОтметкаЛожь, ТЗДействийНеТребующиеВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНаФормеОтметкиВыполнения(ДействияМедосмотра, ТЗДействийОтметкаЛожь, ТЗДействийНеТребующиеВыполнения) 
	
	// Если ТЗ пустая то все действия не выполнены
	ТЗДействийОтметкаЛожьПустая = ТЗДействийОтметкаЛожь.Количество() = 0;
	
	Для Каждого Эл Из ДействияМедосмотра Цикл
		Если Не ТЗДействийОтметкаЛожьПустая
			И ТЗДействийОтметкаЛожь.НайтиСтроки(Новый Структура("Действие", Эл.Действие)).Количество() = 0 
		Тогда
			Эл.Выполнено = Истина;
		КонецЕсли;
		Если ТЗДействийНеТребующиеВыполнения.НайтиСтроки(Новый Структура("Действие", Эл.Действие)).Количество() <> 0 Тогда
			Эл.Выполнено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьВРегистрОтметкиВыполнения(ДействияМедосмотра, ТЗДействийОтметкаЛожь, ТЗДействийНеТребующиеВыполнения, Объект)
	
	ТаблицаОтметок = Новый ТаблицаЗначений;
	ТаблицаОтметок.Колонки.Добавить("Действие");
	ТаблицаОтметок.Колонки.Добавить("Выполнено");
	
	// Если ТЗ пустая то все действия не выполнены
	ТЗДействийОтметкаЛожьПустая = ТЗДействийОтметкаЛожь.Количество() = 0;
	
	Попытка 
		Объект.Записать();
	
		Для Каждого Эл Из ДействияМедосмотра Цикл
			УстановленаОтметка = Ложь;
			Если Не ТЗДействийОтметкаЛожьПустая
				И Не ТЗДействийОтметкаЛожь.НайтиСтроки(Новый Структура("Действие", Эл.Действие)).Количество() = 0 
			Тогда
				НоваяСтрока = ТаблицаОтметок.Добавить();
				НоваяСтрока.Действие = Эл.Действие;
				НоваяСтрока.Выполнено = Истина;
				УстановленаОтметка = Истина;
			КонецЕсли;
			
			Если Не УстановленаОтметка 
				И ТЗДействийНеТребующиеВыполнения.НайтиСтроки(Новый Структура("Действие", Эл.Действие)).Количество() <> 0 
			Тогда
				НоваяСтрока = ТаблицаОтметок.Добавить();
				НоваяСтрока.Действие = Эл.Действие;
				НоваяСтрока.Выполнено = Истина;
				УстановленаОтметка = Истина;
			КонецЕсли;
			
		КонецЦикла;
	
		МедосмотрыСервер.ЗаписатьОтметкиВыполненияДействияМедосмотра(Объект.Ссылка, Объект.Ссылка, ТаблицаОтметок);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Заполнить отметки выполнения действий медосмотра в реквизитах таблицы действий медосмотра на форме документа.
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура  - объект документа медосмотра на форме.
//
Процедура ЗаполнитьОтметкиВыполненияДействийМедосмотра(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ.Действие,
	               |	ВТ.НазначенДополнительно
	               |ПОМЕСТИТЬ ТабЧасть
	               |ИЗ
	               |	&ВТ КАК ВТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтметкиВыполненияДействийСрезПоследних.Действие,
	               |	ОтметкиВыполненияДействийСрезПоследних.Выполнено
	               |ПОМЕСТИТЬ Отметки
	               |ИЗ
	               |	РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(, АктивностьЗаписи = ИСТИНА) КАК ОтметкиВыполненияДействийСрезПоследних
	               |ГДЕ
	               |	ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра = &ПрохождениеМедОсмотра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабЧасть.НазначенДополнительно,
	               |	ТабЧасть.Действие,
	               |	ЕСТЬNULL(Отметки.Выполнено, ЛОЖЬ) КАК Выполнено
	               |ИЗ
	               |	ТабЧасть КАК ТабЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Отметки КАК Отметки
	               |		ПО ТабЧасть.Действие = Отметки.Действие";
	
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВТ", Объект.ДействияМедосмотра.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Объект.ДействияМедосмотра.Загрузить(Результат.Выгрузить());
		
КонецПроцедуры

// Создает прохождение медосмотра по заданным параметрам.
//
// Параметры:
//  ПоляДокумента	 - Структура - значения реквизитов и прочие параметры создания.
// 
// Возвращаемое значение:
//  ДокументСсылка.ПрохождениеМедосмотра - новый документ.
//
Функция СоздатьПрохождениеМедосмотра(ПоляДокумента) Экспорт
	
	Если ЗначениеЗаполнено(ПоляДокумента) Тогда
		
		ПМО = Документы.ПрохождениеМедосмотра.СоздатьДокумент();
		ПМО.Дата = ТекущаяДата();
		ПМО.СписокНаПрохождениеМедосмотра = ПоляДокумента.СПМО;
		ПМО.Филиал = ПоляДокумента.Филиал;
		ПМО.Клиент = ПоляДокумента.Клиент;
		
		Если ПоляДокумента.Свойство("ТипМедосмотра") Тогда
			ПМО.ТипМедосмотра = ?(ЗначениеЗаполнено(ПоляДокумента.ТипМедосмотра), ПоляДокумента.ТипМедосмотра, Перечисления.ТипыМедосмотров.Периодический);
		Иначе
			ПМО.ТипМедосмотра = Перечисления.ТипыМедосмотров.Периодический;
		КонецЕсли;
		
		Если ПоляДокумента.Свойство("Профессия") Тогда
			ПМО.Профессия = ПоляДокумента.Профессия;
		КонецЕсли;
		Если ПоляДокумента.Свойство("ФИОКлиента") Тогда
			ПМО.ФИОКлиента = ПоляДокумента.ФИОКлиента;
		КонецЕсли;
		Если ПоляДокумента.Свойство("ЦехУчасток") Тогда
			ПМО.ЦехУчасток = ПоляДокумента.ЦехУчасток;
		КонецЕсли;
		Если ПоляДокумента.Свойство("ВидМедосмотра") Тогда               	
			ПМО.ВидМО = ПоляДокумента.ВидМедосмотра;
		КонецЕсли;
		Если ПоляДокумента.Свойство("ВидМО") Тогда               	
			ПМО.ВидМО = ПоляДокумента.ВидМО;
		КонецЕсли;
		Если ПоляДокумента.Свойство("НеВыполнятьЗаполнениеВФ") Тогда 
			ПМО.Заполнить(Новый Структура("НеВыполнятьЗаполнениеВФ, НеПереопеределятьПоля", ПоляДокумента.НеВыполнятьЗаполнениеВФ, Истина));
		Иначе
			ПМО.Заполнить(Неопределено);
		КонецЕсли;
		
		Документы.ПрохождениеМедосмотра.ПерезаполнитьДействияПрохожденияМедосмотра(ПМО, Ложь);
		
		РежимЗаписи = Неопределено;
		ПоляДокумента.Свойство("РежимЗаписи", РежимЗаписи);
		Если Не ЗначениеЗаполнено(РежимЗаписи) Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		Попытка 
			ПМО.Записать(РежимЗаписи);
			Возврат ПМО.Ссылка;
		Исключение
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;

КонецФункции

// Противопоказания, выявленные в указанном медосмотре.
//
// Параметры:
//  ПМО	 - ДокументСсылка.ПрохождениеМедосмотра	 - документ медосмотра.
// 
// Возвращаемое значение:
//  СписокПротивопоказаний - ТаблицаЗначений.
//
Функция ПротивопоказанияМедОсмотра(ПМО) Экспорт
	
	// Находим противопоказания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", ПМО);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Противопоказания.Противопоказание КАК Противопоказание,
	               |	ОтметкиВыполненияДействийСрезПоследних.Действие КАК Действие,
	               |	Противопоказания.СлучайОбращения КАК СлучайОбращения
	               |ПОМЕСТИТЬ Противопоказания
	               |ИЗ
	               |	РегистрСведений.Противопоказания КАК Противопоказания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних КАК ОтметкиВыполненияДействийСрезПоследних
	               |		ПО Противопоказания.СлучайОбращения = ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра
	               |			И Противопоказания.Документ = ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор
	               |ГДЕ
	               |	ОтметкиВыполненияДействийСрезПоследних.Выполнено
	               |	И Противопоказания.СлучайОбращения = &ПрохождениеМедОсмотра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВредныеФакторыПротивопоказаний.ВредныйФактор КАК ВредныйФактор,
	               |	Противопоказания.Действие КАК Действие,
	               |	Противопоказания.Противопоказание КАК Противопоказание
	               |ИЗ
	               |	Противопоказания КАК Противопоказания
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ВредныеФакторыПротивопоказаний КАК ВредныеФакторыПротивопоказаний
	               |		ПО Противопоказания.СлучайОбращения = ВредныеФакторыПротивопоказаний.СлучайОбращения
	               |			И Противопоказания.Противопоказание = ВредныеФакторыПротивопоказаний.Противопоказание";
	СписокПротивопоказаний = Запрос.Выполнить().Выгрузить();
	
	Возврат СписокПротивопоказаний;
	
КонецФункции

Процедура УбратьЛишниеВредности(Вредности, ВидМедосмотра) Экспорт
	
	мПриказы = МедосмотрыСервер.ПолучитьМассивПриказовПоВидуМО(ВидМедосмотра);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вредности.Фактор КАК Фактор
		|ПОМЕСТИТЬ ВрТабФакторы
		|ИЗ
		|	&Вредности КАК Вредности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВрТабФакторы.Фактор КАК Фактор
		|ИЗ
		|	ВрТабФакторы КАК ВрТабФакторы
		|ГДЕ
		|	НЕ(ВрТабФакторы.Фактор.Приказ В (&мПриказы)
		|				ИЛИ ВрТабФакторы.Фактор В (&мПриказы))";
	
	Запрос.УстановитьПараметр("мПриказы", мПриказы);
	Запрос.УстановитьПараметр("Вредности", Вредности);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Лишние = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Вредности.НайтиСтроки(Новый Структура("Фактор", Выборка.Фактор));
		Для Каждого Эл Из НайденныеСтроки Цикл
			Вредности.Удалить(Эл);
		КонецЦикла;	
	КонецЦикла;
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ") Тогда
			ЭтоСправка = Параметры.Ключ.ВидПрохожденияМО = Перечисления.ВидыМедосмотров.СправкаПрочий;
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
			ЭтоСправка = Параметры.ЗначенияЗаполнения.Свойство("ВидПрохожденияМО") И Параметры.ЗначенияЗаполнения.ВидПрохожденияМО = Перечисления.ВидыМедосмотров.СправкаПрочий;
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
			ЭтоСправка = Параметры.ЗначениеКопирования.ВидПрохожденияМО = Перечисления.ВидыМедосмотров.СправкаПрочий;
		Иначе
			ЭтоСправка = Ложь;
		КонецЕсли;
		
		Если ЭтоСправка Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаДокументаСправки";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьКарта(СсылкаНаОбъект, ШапкаМедКарты = Ложь, ТолькоТитульныйЛистМедкарты = Ложь, СокращеннаяФорма = Ложь)
	
	КоллекцияПечатныхФорм = Новый Массив; 
	
	Макет = ПолучитьМакет("КартаМедОсмотра");
	
	Если ШапкаМедКарты Тогда
	
		Если ЗначениеЗаполнено(СсылкаНаОбъект.МедицинскаяКарта) Тогда
			ТабДокумент = МедицинскаяДеятельность.ПолучитьТекстТитульного(СсылкаНаОбъект.МедицинскаяКарта, СсылкаНаОбъект.Клиент);
		Иначе
			ВидМедкартыПрофосмотров = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойВидМедКартДляПрофОсмотров");
			Если ЗначениеЗаполнено(ВидМедкартыПрофосмотров) Тогда
				
				СтруктураМедкарты = Новый Структура;
				СтруктураМедкарты.Вставить("ВидКарты", ВидМедкартыПрофосмотров);
				СтруктураМедкарты.Вставить("Клиент", СсылкаНаОбъект.Клиент);
				СтруктураМедкарты.Вставить("Филиал", СсылкаНаОбъект.Филиал);
				СтруктураМедкарты.Вставить("ДатаРегистрации", СсылкаНаОбъект.Дата);
				СтруктураМедкарты.Вставить("НомерКарты", "");
				СтруктураМедкарты.Вставить("Наименование", "");
//				СтруктураМедкарты.Вставить("ЗаполняемыеПараметры", Новый Массив);
				
				ТабДокумент = МедицинскаяДеятельность.ПолучитьТекстТитульного(СтруктураМедкарты, СсылкаНаОбъект.Клиент);
			КонецЕсли;
		КонецЕсли;
		
		Если ТабДокумент <> Неопределено И ТабДокумент.ВысотаТаблицы <> 0 Тогда
			УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ТабДокумент,
				"ТитульныйЛистМедкарты", НСтр("ru='Титульный лист медкарты 025/у'"));
		КонецЕсли;
		
		Если ТолькоТитульныйЛистМедкарты Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрохождениеМедосмотра_КартаМедОсмотра";
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	ВывестиПервуюШапкуПрограммыПрохожденияМО(ТабДокумент, Макет, СсылкаНаОбъект);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрохождениеМедосмотраДействияМедосмотра.Действие.Врач КАК Врач,
	|	ПрохождениеМедосмотраДействияМедосмотра.Действие
	|ИЗ
	|	Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ПрохождениеМедосмотраДействияМедосмотра
	|ГДЕ
	|	ПрохождениеМедосмотраДействияМедосмотра.Ссылка = &Ссылка
	|	И ПрохождениеМедосмотраДействияМедосмотра.Действие.ПечататьВПрограммеПрохождения
	|	И ПрохождениеМедосмотраДействияМедосмотра.Действие.Врач <> ЗНАЧЕНИЕ(Справочник.ДействияМедосмотра.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Результат = Запрос.Выполнить();
	ОбследованиеВоВрачах = Результат.Выгрузить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие КАК Врач,
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие.НаименованиеДляПечати КАК НаименованиеДляПечати,
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие.ТолькоДляОтметкиИсследования КАК КраткоеИсследование,
	               |	ВЫБОР
	               |		КОГДА ПрохождениеМедосмотраДействияМедосмотра.Действие.Вид = &Вид
	               |			ТОГДА 1
	               |		КОГДА ПрохождениеМедосмотраДействияМедосмотра.Действие.ТолькоДляОтметкиИсследования
	               |			ТОГДА 0
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК Порядок,
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие.НомерКабинетаДляПечати КАК НомерКабинета
	               |ИЗ
	               |	Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ПрохождениеМедосмотраДействияМедосмотра
	               |ГДЕ
	               |	ПрохождениеМедосмотраДействияМедосмотра.Ссылка = &Ссылка
	               |	И (ПрохождениеМедосмотраДействияМедосмотра.Действие.Вид = &Вид
	               |			ИЛИ ПрохождениеМедосмотраДействияМедосмотра.Действие.ПечататьВПрограммеПрохождения
	               |				И ПрохождениеМедосмотраДействияМедосмотра.Действие.Врач = ЗНАЧЕНИЕ(Справочник.ДействияМедосмотра.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Если СокращеннаяФорма Тогда 
		Запрос.УстановитьПараметр("Вид", Перечисления.ВидыДействийМедицинскогоОсмотра.Исследование);
	Иначе 
		Запрос.УстановитьПараметр("Вид", Перечисления.ВидыДействийМедицинскогоОсмотра.Врач);	
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТекущийВыводВЛевой = Истина;
	
	ВывестиШапкуИсследований = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КраткоеИсследование Или СокращеннаяФорма Тогда
			
			Если ВывестиШапкуИсследований Тогда
				ТабДокумент.Вывести(Макет.ПолучитьОбласть("ИсследованияШапка"));
				ВывестиШапкуИсследований = Ложь;
			КонецЕсли;
			
			Если ТекущийВыводВЛевой Тогда 			
				
				ОбластьИсследование = Макет.ПолучитьОбласть("ОтметкиИсследования");
				ОбластьИсследование.Параметры.Обследование = ДействиеМОНаименованиеДляПечати(Выборка.Врач, Выборка.НаименованиеДляПечати);
				
				Если ТабДокумент.ПроверитьВывод(ОбластьИсследование) Тогда
					ТабДокумент.Вывести(ОбластьИсследование);
				Иначе
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьПродолжение = Макет.ПолучитьОбласть("Продолжение");
					ОбластьПродолжение.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
					ОбластьПродолжение.Параметры.ФИО = СокрЛП(СсылкаНаОбъект.Клиент.Фамилия) + " " + СокрЛП(СсылкаНаОбъект.Клиент.Имя) + " " + СокрЛП(СсылкаНаОбъект.Клиент.Отчество);
					ТабДокумент.Вывести(ОбластьПродолжение);
					ТабДокумент.Вывести(ОбластьИсследование);
				КонецЕсли;
			
				ТекущийВыводВЛевой = Ложь;
				
			Иначе
				ОбластьИсследование = Макет.ПолучитьОбласть("ОтметкиИсследования");
				ОбластьИсследование.Параметры.Обследование = ДействиеМОНаименованиеДляПечати(Выборка.Врач, Выборка.НаименованиеДляПечати);
				ТабДокумент.Присоединить(ОбластьИсследование);
				ТекущийВыводВЛевой = Истина;
			КонецЕсли;
			
		Иначе
			
			ОбластьВрач = Макет.ПолучитьОбласть("ВрачДата");
			ВрачебнаяСпециальность = ДействиеМОНаименованиеДляПечати(Выборка.Врач, Выборка.НаименованиеДляПечати);
			ОбластьВрач.Параметры.ВрачебнаяСпециальность = ВрачебнаяСпециальность + ?(ЗначениеЗаполнено(Выборка.НомерКабинета), ". Каб. № " + СокрЛП(Выборка.НомерКабинета),"");
			
			СтруктураПоиска = Новый Структура("Врач",Выборка.Врач);
			СтрокиОбследований = ОбследованиеВоВрачах.НайтиСтроки(СтруктураПоиска);
			
			ТекущийВыводВЛевой = Истина;
			
			Для Каждого СтрокаОбследования Из СтрокиОбследований Цикл
				ОбластьОбследование = Макет.ПолучитьОбласть("ВрачОбследование");
				
				Обследование = ДействиеМОНаименованиеДляПечати(СтрокаОбследования.Действие);
				НомерКабинета = СокрЛП(СтрокаОбследования.Действие.НомерКабинетаДляПечати);
				ОбластьОбследование.Параметры.Обследование = Обследование + ?(ЗначениеЗаполнено(НомерКабинета), ". Каб. № " + НомерКабинета, "");
				
				ОбластьВрач.Вывести(ОбластьОбследование);
			КонецЦикла;
		
			ОбластьОкончание = Макет.ПолучитьОбласть("ВрачОкончание");
			ОбластьВрач.Вывести(ОбластьОкончание);
			Если ТабДокумент.ПроверитьВывод(ОбластьВрач) Тогда
				ТабДокумент.Вывести(ОбластьВрач);
			Иначе
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьПродолжение = Макет.ПолучитьОбласть("Продолжение");
				ОбластьПродолжение.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
				ОбластьПродолжение.Параметры.ФИО = СокрЛП(СсылкаНаОбъект.Клиент.Фамилия) + " " + СокрЛП(СсылкаНаОбъект.Клиент.Имя) + " " + СокрЛП(СсылкаНаОбъект.Клиент.Отчество);
				ТабДокумент.Вывести(ОбластьПродолжение);
				ТабДокумент.Вывести(ОбластьВрач);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ТабДокумент,
		"БегунокМедосмотра", НСтр("ru='Программа прохождения медосмотра'"));

	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
	Иначе
		Возврат КоллекцияПечатныхФорм;
	КонецЕсли;
	
КонецФункции

// Вывод первой (полной) шапки обходного листа
Процедура ВывестиПервуюШапкуПрограммыПрохожденияМО(ТабДокумент, Макет, СсылкаНаОбъект)
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект); 
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.НазваниеОрганизации) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Организация = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.Адрес) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Адрес");
		ОбластьМакета.Параметры.Адрес = СтруктураРеквизитовОрганизации.Адрес;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ДанныеКлиента = ДанныеРаботникаДляМедосмотра(СсылкаНаОбъект, СсылкаНаОбъект.Клиент);
	
	ОбластьШапка.Параметры.ФИО = ДанныеКлиента.ФИОКлиента;
	ОбластьШапка.Параметры.Пол = СсылкаНаОбъект.Клиент.Пол;
	ОбластьШапка.Параметры.ДатаРожд = Формат(СсылкаНаОбъект.Клиент.ДатаРождения,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПолныхЛет = ОбщегоНазначенияКлиентСервер.ПолучитьВозрастСтрокой(СсылкаНаОбъект.Клиент.ДатаРождения);
	
	// Место работы
	ОбластьШапка.Параметры.МестоРаботы = ДанныеКлиента.МестоРаботы;
	
	ОбластьШапка.Параметры.Профессия = ДанныеКлиента.Профессия;
	ОбластьШапка.Параметры.Телефон = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(СсылкаНаОбъект.Клиент);
	ОбластьШапка.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	// Штрихкод
	ДанныеШтрихкода = ПолучитьКартинкуШтрихкода(СсылкаНаОбъект);
	Если ДанныеШтрихкода <> Неопределено Тогда 
		Штрихкод = Новый Картинка(ДанныеШтрихкода);
		Рис = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Индекс = ТабДокумент.Рисунки.Индекс(Рис);
		ТабДокумент.Рисунки[Индекс].Картинка = Штрихкод;
		ТабДокумент.Рисунки[Индекс].РазмерКартинки = РазмерКартинки.Пропорционально;
		ТабДокумент.Рисунки[Индекс].Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		ТабДокумент.Рисунки[Индекс].Расположить(ТабДокумент.Область("Штрихкод"));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьЗаключение(СсылкаНаОбъект, СохранениеЭМД)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрохождениеМедосмотра_Заключение";
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("Заключение");
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект);
	ДанныеКлиента = ДанныеРаботникаДляМедосмотра(СсылкаНаОбъект, СсылкаНаОбъект.Клиент);
	
	ОбщаяОбласть = Макет.ПолучитьОбласть("Шаблон");
	ОбщаяОбласть.Параметры.Адрес = СтруктураРеквизитовОрганизации.Адрес;
	//ОбщаяОбласть.Параметры.Дата = "«____» ________________ 20____ г."; 
	ОбщаяОбласть.Параметры.Организация = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
	ОбщаяОбласть.Параметры.ОГРН = СтруктураРеквизитовОрганизации.ОГРН;
	
	ОбщаяОбласть.Параметры.ФИО = ДанныеКлиента.ФИОКлиента;
	ОбщаяОбласть.Параметры.МестоРаботы = ДанныеКлиента.МестоРаботы;
	
	ОбщаяОбласть.Параметры.Профессия = ДанныеКлиента.Профессия;
	ОбщаяОбласть.Параметры.ЦехУчасток = ДанныеКлиента.ЦехУчасток;
	//ОбщаяОбласть.Параметры.ФИОКратко = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.Клиент);
	ОбщаяОбласть.Параметры.ДатаРождения = ?(ЗначениеЗаполнено(СсылкаНаОбъект.Клиент.ДатаРождения),", " + Строка(Формат(СсылкаНаОбъект.Клиент.ДатаРождения,"ДФ=дд.ММ.гггг")),"");
	ОбщаяОбласть.Параметры.Пол = ?(ЗначениеЗаполнено(СсылкаНаОбъект.Клиент.Пол),", " + Строка(СсылкаНаОбъект.Клиент.Пол),"");
	
	ОбщаяОбласть.Параметры.ВредныеПроизводственныеФакторы = СформироватьТекстВредныеФакторыМедосмотра(СсылкаНаОбъект, Справочники.ПриказыМедосмотров.Приказ29н);
	
	ОбщаяОбласть.Параметры.РезультатОбследования = СформироватьТекстРезультатаОбследования(СсылкаНаОбъект);
	
	ГруппаЗдоровья = СсылкаНаОбъект.ДиспансернаяГруппа;
	Если ЗначениеЗаполнено(ГруппаЗдоровья) Тогда
		
		ПредставлениеГруппыЗдоровья = Строка(ГруппаЗдоровья);
		
		ОбщаяОбласть.Параметры.ГруппаЗдоровья = ?(ЗначениеЗаполнено(ОбщаяОбласть.Параметры.РезультатОбследования), Символы.ПС, "")
			+ "Группа здоровья: " + ПредставлениеГруппыЗдоровья + ".";
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбщаяОбласть);
	
	Если Не СохранениеЭМД Тогда
		Если ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК()
			И СсылкаНаОбъект.ПодписанЭП
		Тогда
			ВывестиБлокиЭЦП(СсылкаНаОбъект, ТабДокумент, Макет);
		Иначе
			ВывестиОбластьПодписей(СсылкаНаОбъект, Макет, ТабДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьЗаключение342н(СсылкаНаОбъект)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрохождениеМедосмотра_Заключение";
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("Заключение342н");
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект);
	ДанныеКлиента = ДанныеРаботникаДляМедосмотра(СсылкаНаОбъект, СсылкаНаОбъект.Клиент);
	
	ОбщаяОбласть = Макет.ПолучитьОбласть("Шаблон");
	ОбщаяОбласть.Параметры.Адрес = СтруктураРеквизитовОрганизации.Адрес;
	//ОбщаяОбласть.Параметры.Дата = "«____» ________________ 20____ г."; 
	ОбщаяОбласть.Параметры.Организация = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
	ОбщаяОбласть.Параметры.ОГРН = СтруктураРеквизитовОрганизации.ОГРН;
	
	ОбщаяОбласть.Параметры.ФИО = ДанныеКлиента.ФИОКлиента;
	ОбщаяОбласть.Параметры.МестоРаботы = ДанныеКлиента.МестоРаботы;
	
	Если ТипЗнч(ДанныеКлиента.МестоРаботы) = Тип("СправочникСсылка.Контрагенты")
		И ЗначениеЗаполнено(ДанныеКлиента.МестоРаботы)
	Тогда
		ОбщаяОбласть.Параметры.ОКВЭД = ДанныеКлиента.МестоРаботы.ВидЭкономДеятельности;
	КонецЕсли;
		
	
	ОбщаяОбласть.Параметры.Профессия = ДанныеКлиента.Профессия;
	ОбщаяОбласть.Параметры.ЦехУчасток = ДанныеКлиента.ЦехУчасток;
	//ОбщаяОбласть.Параметры.ФИОКратко = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.Клиент);
	ОбщаяОбласть.Параметры.ДатаРождения = ?(ЗначениеЗаполнено(СсылкаНаОбъект.Клиент.ДатаРождения),", " + Строка(Формат(СсылкаНаОбъект.Клиент.ДатаРождения,"ДФ=дд.ММ.гггг")),"");
	ОбщаяОбласть.Параметры.Пол = ?(ЗначениеЗаполнено(СсылкаНаОбъект.Клиент.Пол),", " + Строка(СсылкаНаОбъект.Клиент.Пол),"");
	
	ОбщаяОбласть.Параметры.ВредныеПроизводственныеФакторы = СформироватьТекстВредныеФакторыМедосмотра(СсылкаНаОбъект, Справочники.ПриказыМедосмотров.Приказ342н);
	
	ДопПараметры = ПолучитьЗначениеДопПараметровПрохожденияМОПоПриказу(СсылкаНаОбъект, Справочники.ПриказыМедосмотров.Приказ342н);
	
	Если ДопПараметры.Свойство("Пригодность") Тогда
		Если ДопПараметры.Пригодность Тогда
			ЗначениеПригоден = "Отсутствуют";
		Иначе
			ЗначениеПригоден = "Имеются";
		КонецЕсли;
	Иначе
		ЗначениеПригоден = "__________________";
	КонецЕсли;	
	
	ОбщаяОбласть.Параметры.Пригоден = ЗначениеПригоден;
	
	Если ДопПараметры.Свойство("СрокНепригодности") И ЗначениеЗаполнено(ДопПараметры.СрокНепригодности) Тогда
		ОбщаяОбласть.Параметры.СрокаНепригодности = "Срок непригодности: " + ДопПараметры.СрокНепригодности;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбщаяОбласть);
	
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	ОбластьПодписи.Параметры.ДатаЗавершения = ?(СсылкаНаОбъект.ДатаЗавершения = Дата(1,1,1),"«____» ________________ 20____ г.",Формат(СсылкаНаОбъект.ДатаЗавершения,"ДФ='«dd» MMMM yyyy'") + " г.");
	
	Если ДопПараметры.Свойство("ПредседКомиссии") Тогда
		ОбластьПодписи.Параметры.Председатель = ДопПараметры.ПредседКомиссии;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ЧленКомиссии1") Тогда
		ОбластьПодписи.Параметры.ЧленКомиссии1 = ДопПараметры.ЧленКомиссии1;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ЧленКомиссии2") Тогда
		ОбластьПодписи.Параметры.ЧленКомиссии2 = ДопПараметры.ЧленКомиссии2;
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьПодписи);
	
	//Если Не СохранениеЭМД Тогда
	//	Если ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК()
	//		И СсылкаНаОбъект.ПодписанЭП
	//	Тогда
	//		ВывестиБлокиЭЦП(СсылкаНаОбъект, ТабДокумент, Макет);
	//	Иначе
	//		ВывестиОбластьПодписей(СсылкаНаОбъект, Макет, ТабДокумент);
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьЗначениеДопПараметровПрохожденияМОПоПриказу(ДокументСсылка, Приказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПрохожденийМО.Ключ КАК Ключ,
		|	ДанныеПрохожденийМО.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДанныеПрохожденийМО КАК ДанныеПрохожденийМО
		|ГДЕ
		|	ДанныеПрохожденийМО.Приказ = &Приказ
		|	И ДанныеПрохожденийМО.ДокументПрохожденияМО = &ДокументПрохожденияМО";
	
	Запрос.УстановитьПараметр("ДокументПрохожденияМО", ДокументСсылка);
	Запрос.УстановитьПараметр("Приказ", Приказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДопДанные = Новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДопДанные.Вставить(ВыборкаДетальныеЗаписи.Ключ, ВыборкаДетальныеЗаписи.Значение); 
	КонецЦикла;
	
	Возврат ДопДанные;
	
КонецФункции

Процедура ВывестиБлокиЭЦП(СсылкаНаОбъект, ТабДокумент, Макет)
	
	ДанныеПодписиПредседателя = Неопределено;
	ДанныеПодписиМО = Неопределено;
	СообщениеРЭМД = Неопределено;
	
	Если ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД() Тогда
		СтрокиЭМДПоПриказу29н = СсылкаНаОбъект.ЭМД.НайтиСтроки(Новый Структура("ПриказВредныйФактор", Справочники.ПриказыМедосмотров.Приказ29н));
		Если СтрокиЭМДПоПриказу29н.Количество() > 0 Тогда
			СообщениеРЭМД = СтрокиЭМДПоПриказу29н[0].СообщениеРЭМД;
		КонецЕсли;
	КонецЕсли;
	
	Если СообщениеРЭМД <> Неопределено Тогда
		
		УИДЭЦППредседателя = Неопределено;
		УИДЭЦПМО = Неопределено;
		
		СтрокиПодписей = СообщениеРЭМД.ЭлектронныеПодписиЭМД;
		Для Каждого СтрокаПодписи Из СтрокиПодписей Цикл
			Если СтрокаПодписи.РольРЭМД = Перечисления.РолиПодписей.РольПредседательМедкомиссии() Тогда // Председатель.
				УИДЭЦППредседателя = СтрокаПодписи.УИД_ЭЦП;
			ИначеЕсли СтрокаПодписи.ЭтоПодписьМО Тогда
				УИДЭЦПМО = СтрокаПодписи.УИД_ЭЦП;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЭлектронныеПодписи.УникальныйИдентификатор КАК УникальныйИдентификатор,
			|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|ГДЕ
			|	(&УсловиеУИДЭЦППредседателя
			|			ИЛИ &УсловиеУИДЭЦПМО)";
		
		Если УИДЭЦППредседателя <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУИДЭЦППредседателя", "ЭлектронныеПодписи.УникальныйИдентификатор = &УИДЭЦППредседателя");
			Запрос.УстановитьПараметр("УИДЭЦППредседателя", УИДЭЦППредседателя);
		Иначе
			Запрос.УстановитьПараметр("УсловиеУИДЭЦППредседателя", Ложь);
		КонецЕсли;
		
		Если УИДЭЦПМО <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУИДЭЦПМО", "ЭлектронныеПодписи.УникальныйИдентификатор = &УИДЭЦПМО");
			Запрос.УстановитьПараметр("УИДЭЦПМО", УИДЭЦПМО);
		Иначе
			Запрос.УстановитьПараметр("УсловиеУИДЭЦПМО", Ложь);
		КонецЕсли;
		
		ДанныеПодписей = Запрос.Выполнить().Выгрузить();
		СтрокиПредседателя = ДанныеПодписей.НайтиСтроки(Новый Структура("УникальныйИдентификатор", УИДЭЦППредседателя));
		Если СтрокиПредседателя.Количество() > 0 Тогда
			ДанныеПодписиПредседателя = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(СтрокиПредседателя[0].Сертификат, СсылкаНаОбъект, СтрокиПредседателя[0].ДатаПодписи);
		КонецЕсли;
		
		СтрокиМО = ДанныеПодписей.НайтиСтроки(Новый Структура("УникальныйИдентификатор", УИДЭЦПМО));
		Если СтрокиМО.Количество() > 0 Тогда
			ДанныеПодписиМО = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(СтрокиМО[0].Сертификат, СсылкаНаОбъект, СтрокиМО[0].ДатаПодписи);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РолиИПодписиЭМД.РольПодписи КАК РольПодписи,
			|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
			|		ПО (РолиИПодписиЭМД.Документ = &Документ)
			|			И (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
			|			И (РолиИПодписиЭМД.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|				ИЛИ РолиИПодписиЭМД.Пользователь = ЭлектронныеПодписи.УстановившийПодпись)";
		
		Запрос.УстановитьПараметр("Документ", СсылкаНаОбъект);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.РольПодписи = Перечисления.РолиПодписей.РольПредседательМедкомиссии() Тогда // Председатель.
				ДанныеПодписиПредседателя = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(Выборка.Сертификат, СсылкаНаОбъект, Выборка.ДатаПодписи);
			ИначеЕсли Выборка.РольПодписи = Перечисления.РолиПодписей.МедицинскаяОрганизация Тогда
				ДанныеПодписиМО = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(Выборка.Сертификат, СсылкаНаОбъект, Выборка.ДатаПодписи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеПодписиПредседателя <> Неопределено Тогда
		ОбластьПредседательЭЦП = Макет.ПолучитьОбласть("ПредседательЭЦП");
		ЗаполнитьЗначенияСвойств(ОбластьПредседательЭЦП.Параметры, ДанныеПодписиПредседателя);
		ОбластьПредседательЭЦП.Параметры.ДатаЗавершения = Формат(СсылкаНаОбъект.ДатаЗавершения,"ДФ='«dd» MMMM yyyy'") + " г.";
		ОбластьПредседательЭЦП.Параметры.Председатель = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.ПредседательМедКомиссии);
		ТабДокумент.Вывести(ОбластьПредседательЭЦП);
	КонецЕсли;
	
	Если ДанныеПодписиМО <> Неопределено Тогда
		ОбластьМОЭЦП = Макет.ПолучитьОбласть("ОбластьЭЦП");
		ЗаполнитьЗначенияСвойств(ОбластьМОЭЦП.Параметры, ДанныеПодписиМО);
		ТабДокумент.Вывести(ОбластьМОЭЦП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОбластьПодписей(СсылкаНаОбъект, Макет, ТабДокумент)
	
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	ОбластьПодписи.Параметры.ДатаЗавершения = ?(СсылкаНаОбъект.ДатаЗавершения = Дата(1,1,1),"«____» ________________ 20____ г.",Формат(СсылкаНаОбъект.ДатаЗавершения,"ДФ='«dd» MMMM yyyy'") + " г.");
	ОбластьПодписи.Параметры.Председатель = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.ПредседательМедКомиссии);
	ТабДокумент.Вывести(ОбластьПодписи);
	
КонецПроцедуры

Функция ПечатьМедЗаключение(СсылкаНаОбъект)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрохождениеМедосмотра_МедЗаключение";
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("МедицинскоеЗаключение");
	
	ОбщаяОбласть = Макет.ПолучитьОбласть("Шаблон");
	
	// Данные организации
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект);
	ОбщаяОбласть.Параметры.Адрес = СтруктураРеквизитовОрганизации.Адрес;
	ОбщаяОбласть.Параметры.Организация = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
	ОбщегоНазначения.ЗаполнитьПараметрПосимвольно(ОбщаяОбласть, "ОГРН", СтруктураРеквизитовОрганизации.ОГРН);
	
	// Общие данные клиента
	ДанныеКлиента = ДанныеРаботникаДляМедосмотра(СсылкаНаОбъект, СсылкаНаОбъект.Клиент);
	ФИО = СтрРазделить(ДанныеКлиента.ФИОКлиента, " ");
	Если ФИО.Количество() > 0 Тогда
		ОбщаяОбласть.Параметры.Фамилия = СокрЛП(ФИО[0]);
	КонецЕсли;
	Если ФИО.Количество() > 1 Тогда
		ОбщаяОбласть.Параметры.Имя = СокрЛП(ФИО[1]);
	КонецЕсли;
	Если ФИО.Количество() > 2 Тогда
		ОбщаяОбласть.Параметры.Отчество = СокрЛП(ФИО[2]);
	КонецЕсли;
	
	// Место работы
	ОбщаяОбласть.Параметры.МестоРаботы = ДанныеКлиента.МестоРаботы;
	ОбщаяОбласть.Параметры.Профессия = ДанныеКлиента.Профессия;
	ОбщаяОбласть.Параметры.ЦехУчасток = ДанныеКлиента.ЦехУчасток;
	
	// Тип медосмотра: предварительный либо периодический
	ОбщаяОбласть.Параметры.ТипМедосмотра = СсылкаНаОбъект.ТипМедосмотра;
	Если СсылкаНаОбъект.ТипМедосмотра = Перечисления.ТипыМедосмотров.Предварительный Тогда
		ОбщаяОбласть.Параметры.ТипМедосмотраРодПадеж = "предварительного";
	ИначеЕсли СсылкаНаОбъект.ТипМедосмотра = Перечисления.ТипыМедосмотров.Предварительный Тогда
		ОбщаяОбласть.Параметры.ТипМедосмотраРодПадеж = "периодического";
	КонецЕсли;
	
	// Вредные факторы и условия работ
	ОбщаяОбласть.Параметры.ВредныеПроизводственныеФакторы = СформироватьТекстВредныеФакторыМедосмотра(СсылкаНаОбъект);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрохождениеМедосмотра", СсылкаНаОбъект);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Противопоказания.Диагноз.Наименование КАК Диагноз,
	|	Противопоказания.Диагноз.КодДиагноза КАК КодДиагноза
	|ИЗ
	|	РегистрСведений.Противопоказания КАК Противопоказания
	|ГДЕ
	|	Противопоказания.СлучайОбращения = &ПрохождениеМедосмотра
	|	И Противопоказания.Диагноз <> ЗНАЧЕНИЕ(Справочник.Диагнозы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Диагноз.Наименование,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Диагноз.КодДиагноза
	|ИЗ
	|	Документ.ПрохождениеМедосмотра.КритичныеПротивопоказания КАК ПрохождениеМедосмотраКритичныеПротивопоказания
	|ГДЕ
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Ссылка = &ПрохождениеМедосмотра"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// патология не выявлена/выявлены заболевания
	Если Выборка.Количество() = 0 Тогда
		ОбщаяОбласть.Параметры.ВыявлениеЗаболеваний = НСтр("ru='патология не выявлена.'");
	Иначе
		ОбщаяОбласть.Параметры.ВыявлениеЗаболеваний = НСтр("ru='выявлены заболевания.'");
		
		НаименованиеЗаболеваний = "";
		Пока Выборка.Следующий() Цикл
			НаименованиеЗаболеваний = НаименованиеЗаболеваний + ?(ПустаяСтрока(НаименованиеЗаболеваний),"", "; ")
									+ "{" + Выборка.КодДиагноза +  "} " + Выборка.Диагноз;
		КонецЦикла;
		ОбщаяОбласть.Параметры.НаименованиеЗаболеваний = НаименованиеЗаболеваний;
	КонецЕсли;
	
	// Выявленные противопоказания
	ОбщаяОбласть.Параметры.РезультатОбследования = СформироватьТекстРезультатаОбследования(СсылкаНаОбъект);
	
	// Прочее
	ОбщаяОбласть.Параметры.Рекомендации = СсылкаНаОбъект.Рекомендации;
	ОбщаяОбласть.Параметры.ДиспансернаяГруппа = СсылкаНаОбъект.ДиспансернаяГруппа;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ИзвещениеОПредварительномДиагнозеНомер)
		И ЗначениеЗаполнено(СсылкаНаОбъект.ИзвещениеОПредварительномДиагнозеДата)
	Тогда
		ОбщаяОбласть.Параметры.ДатаНомерИзвещения	= СокрЛП(СсылкаНаОбъект.ИзвещениеОПредварительномДиагнозеНомер)
													 + " " + Формат(СсылкаНаОбъект.ИзвещениеОПредварительномДиагнозеДата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	ОбщаяОбласть.Параметры.ДатаЗавершения = ?(СсылкаНаОбъект.ДатаЗавершения = Дата(1,1,1),"«____» ________________ 20____ г.",Формат(СсылкаНаОбъект.ДатаЗавершения,"ДФ='«dd» MMMM yyyy'") + " г.");
	ОбщаяОбласть.Параметры.Председатель = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.ПредседательМедКомиссии);
	
	ТабДокумент.Вывести(ОбщаяОбласть);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция СформироватьТекстВредныеФакторыМедосмотра(ПрохождениеМедосмотра, Приказ = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.НаименованиеПолное КАК НаименованиеПолное,
	               |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.НомерПП КАК НомерПП
	               |ИЗ
	               |	Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
	               |ГДЕ
	               |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка = &ПрохождениеМедосмотра
	               |	И (ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.Приказ = &Приказ
	               |			ИЛИ &Приказ = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("Приказ", Приказ); 
	Запрос.УстановитьПараметр("ПрохождениеМедосмотра", ПрохождениеМедосмотра);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВредныйФактор = "";
		
	Пока Выборка.Следующий() Цикл
		
		ОписаниеВредногоФактора = ?(ПустаяСтрока(Выборка.НомерПП), "", Выборка.НомерПП + " ") + Выборка.НаименованиеПолное;
		
		Если ВредныйФактор = "" Тогда
			ВредныйФактор = ОписаниеВредногоФактора;
		Иначе
			ВредныйФактор = ВредныйФактор + ";" + Символы.ПС + ОписаниеВредногоФактора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВредныйФактор;
	
КонецФункции

Функция СформироватьТекстЗаключенияПоИмеющимсяПротивопоказаниям(СсылкаНаОбъект, КритичныеПротивопоказания, ВредныеФакторыПротивопоказаний)
	
	ТекстИмеетПротивопоказания = "";
	ТекстНеИмеетПротивопоказания = "";
	
	Отбор = Новый Структура("ВредныйФактор");
	Для Каждого СтрокаВредныйФактор Из СсылкаНаОбъект.ФакторыИУсловияРаботы Цикл
		
		Отбор.ВредныйФактор = СтрокаВредныйФактор.Фактор;
		мсСтр = СсылкаНаОбъект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Отбор);
		Если мсСтр.Количество() = 0 Тогда
			ТекстНеИмеетПротивопоказания = ТекстНеИмеетПротивопоказания + ?(ПустаяСтрока(ТекстНеИмеетПротивопоказания), "", Символы.ПС)
										 + Символы.Таб + СтрокаВредныйФактор.Фактор["НомерПП"] + " " + СтрокаВредныйФактор.Фактор.НаименованиеПолное;
		Иначе
			ТекстИмеетПротивопоказания	= ТекстИмеетПротивопоказания + ?(ПустаяСтрока(ТекстИмеетПротивопоказания), "", Символы.ПС)
										+ Символы.Таб + СтрокаВредныйФактор.Фактор["НомерПП"] + " " + СтрокаВредныйФактор.Фактор.НаименованиеПолное;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ТекстИмеетПротивопоказания, ТекстНеИмеетПротивопоказания", ТекстИмеетПротивопоказания, ТекстНеИмеетПротивопоказания);
	
КонецФункции

Функция СформироватьТекстРезультатаОбследования(СсылкаНаОбъект)
	
	РезультатОбследования = "";
	ТекстыПротивопоказаний = СформироватьТекстЗаключенияПоИмеющимсяПротивопоказаниям(СсылкаНаОбъект,
																					 СсылкаНаОбъект.КритичныеПротивопоказания,
																					 СсылкаНаОбъект.ВредныеФакторыПротивопоказаний);
																					 
	Если ПустаяСтрока(ТекстыПротивопоказаний.ТекстИмеетПротивопоказания) Тогда
		РезультатОбследования = НСтр("ru='медицинские противопоказания к работе не выявлены%1.'");
		ДополнениеКЗаключению = ?(ЗначениеЗаполнено(СсылкаНаОбъект.ДополнениеКЗаключению), " " + СсылкаНаОбъект.ДополнениеКЗаключению, "");
		РезультатОбследования = СтрШаблон(РезультатОбследования, ДополнениеКЗаключению);
	Иначе
		Если ЗначениеЗаполнено(ТекстыПротивопоказаний.ТекстИмеетПротивопоказания) Тогда
			РезультатОбследования	= НСтр("ru='медицинские противопоказания к работе выявлены для:'");
			РезультатОбследования	= РезультатОбследования + Символы.ПС
									+ ТекстыПротивопоказаний.ТекстИмеетПротивопоказания;
			Если ЗначениеЗаполнено(СсылкаНаОбъект.ДополнениеКЗаключению) Тогда
				РезультатОбследования	= РезультатОбследования + Символы.ПС
									+ СсылкаНаОбъект.ДополнениеКЗаключению;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбследования;
	
КонецФункции

Функция ПечатьВыписка(СсылкаНаОбъект)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрохождениеМедосмотра_Выписка";
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("Выписка");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	// Реквизиты организации
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект);
	Область.Параметры.Организация = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
	Область.Параметры.АдресОрганизации = СтруктураРеквизитовОрганизации.Адрес;
	Область.Параметры.ОГРН	 = СтруктураРеквизитовОрганизации.ОГРН;
	
	Если СсылкаНаОбъект.ТипМедосмотра = Перечисления.ТипыМедосмотров.Предварительный Тогда
		Область.Параметры.ПриПоступленииНаРаботу = "при поступлении на работу";
	Иначе
		Область.Параметры.Периодического = "периодического ";
	КонецЕсли;
	
	// Данные работника
	Клиент = СсылкаНаОбъект.Клиент;
	ДанныеКлиента = ДанныеРаботникаДляМедосмотра(СсылкаНаОбъект, Клиент);
	Область.Параметры.ФИО = ДанныеКлиента.ФИОКлиента;
	Область.Параметры.ДатаРождения = Формат(Клиент.ДатаРождения,"ДФ='дд ММММ гггг'");
	Область.Параметры.Пол = Строка(Клиент.Пол);
	Область.Параметры.АдресРегистрации = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
	
	// Место работы, цех, профессия
	Область.Параметры.МестоРаботы = ДанныеКлиента.МестоРаботы;
	
	Область.Параметры.Профессия = ДанныеКлиента.Профессия;
	Область.Параметры.ЦехУчасток = ДанныеКлиента.ЦехУчасток;
	Область.Параметры.ВредныеПроизводственныеФакторы = СтрЗаменить(СформироватьТекстВредныеФакторыМедосмотра(СсылкаНаОбъект, Справочники.ПриказыМедосмотров.Приказ29н), Символы.ПС, " ");
	ТабДокумент.Вывести(Область);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДействияМедосмотра", СсылкаНаОбъект.ДействияМедосмотра.Выгрузить());
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", СсылкаНаОбъект);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДействияМедосмотра.Действие КАК Справочник.ДействияМедосмотра) КАК Действие
	|ПОМЕСТИТЬ ДействияМедосмотра
	|ИЗ
	|	&ДействияМедосмотра КАК ДействияМедосмотра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияМедосмотра.Действие КАК Действие,
	|	ДействияМедосмотра.Действие.Представление КАК Наименование,
	|	ДействияМедосмотра.Действие.НаименованиеДляПечати КАК НаименованиеДляПечати,
	|	ДействияМедосмотра.Действие.Вид КАК Вид,
	|	ДействияМедосмотра.Действие.ТекстЗаключенияПоУмолчанию КАК ТекстЗаключенияПоУмолчанию,
	|	ЗаключенияПоДействиямМедосмотра.Заключение КАК Заключение
	|ИЗ
	|	ДействияМедосмотра КАК ДействияМедосмотра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаключенияПоДействиямМедосмотра КАК ЗаключенияПоДействиямМедосмотра
	|		ПО (ЗаключенияПоДействиямМедосмотра.ПрохождениеМедОсмотра = &ПрохождениеМедОсмотра)
	|			И ДействияМедосмотра.Действие = ЗаключенияПоДействиямМедосмотра.Действие"
	;
	ДействияМедосмотра = Запрос.Выполнить().Выгрузить();
	
	// Выводим врачей и исследования одинаково.
	ОбластиЗаключений = Новый Массив;
	ОбластиЗаключений.Добавить(Новый Структура("ОбластьШапка, ОбластьСтрока, Вид",
												"ВрачиШапка", "ВрачиСтрока", Перечисления.ВидыДействийМедицинскогоОсмотра.Врач));
	
	ОбластиЗаключений.Добавить(Новый Структура("ОбластьШапка, ОбластьСтрока, Вид",
												"ИсследованияШапка", "ИсследованияСтрока", Перечисления.ВидыДействийМедицинскогоОсмотра.Исследование));
	
	СписокПротивопоказаний = Документы.ПрохождениеМедосмотра.ПротивопоказанияМедОсмотра(СсылкаНаОбъект);
	
	ТаблицаПараметровИЗначений = МедосмотрыСервер.ПолучитьТаблицуДействийМедосмотраИЗначений(СсылкаНаОбъект, ДействияМедосмотра);
	ОтборДействиеМедосмотра = Новый Структура("ДействиеМедосмотра");
	
	Для Каждого ОбластьЗаключения Из ОбластиЗаключений Цикл
		
		ДействияПоОтбору = ДействияМедосмотра.НайтиСтроки(Новый Структура("Вид", ОбластьЗаключения.Вид));
		Если ДействияПоОтбору.Количество() <> 0 Тогда
			
			ТабДокумент.Вывести(Макет.ПолучитьОбласть(ОбластьЗаключения.ОбластьШапка));
			Область = Макет.ПолучитьОбласть(ОбластьЗаключения.ОбластьСтрока);
			Для Каждого СтрокаДействия Из ДействияПоОтбору Цикл
				
				Область.Параметры.Действие = ДействиеМОНаименованиеДляПечати(СтрокаДействия.Наименование, СтрокаДействия.НаименованиеДляПечати);
				
				Заключение = СтрокаДействия.Заключение;
				Если ЗначениеЗаполнено(СтрокаДействия.Заключение) Тогда
					Заключение = СтрокаДействия.Заключение;
				Иначе
					СтрокиВредныхФакторов = СписокПротивопоказаний.НайтиСтроки(Новый Структура("Действие",СтрокаДействия.Действие));
					СписокВредныхФакторов = СписокПротивопоказаний.Скопировать(СтрокиВредныхФакторов).ВыгрузитьКолонку("ВредныйФактор");
					
					ОтборДействиеМедосмотра.ДействиеМедосмотра = СтрокаДействия.Действие;
					ТаблицаПараметровДействия = ТаблицаПараметровИЗначений.Скопировать(ТаблицаПараметровИЗначений.НайтиСтроки(ОтборДействиеМедосмотра));
					
					Заключение = МедосмотрыСервер.ЗаключениеДляДействияМедОсмотра(СписокВредныхФакторов, СтрокаДействия.ТекстЗаключенияПоУмолчанию, ТаблицаПараметровДействия, СтрокаДействия.Вид);
				КонецЕсли;
				Область.Параметры.Заключение = Заключение;
				ТабДокумент.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Заключение
	Область = Макет.ПолучитьОбласть("Заключение");
	Область.Параметры.РезультатОбследования = СформироватьТекстРезультатаОбследования(СсылкаНаОбъект);
	
	ГруппаЗдоровья = СсылкаНаОбъект.ДиспансернаяГруппа;
	Если ЗначениеЗаполнено(ГруппаЗдоровья) Тогда
		
		ПредставлениеГруппыЗдоровья = Строка(ГруппаЗдоровья);
		
		Область.Параметры.ГруппаЗдоровья = ?(ЗначениеЗаполнено(Область.Параметры.РезультатОбследования), Символы.ПС, "")
			+ "Группа здоровья: " + ПредставлениеГруппыЗдоровья + ".";
	КонецЕсли;
	Область.Параметры.ДатаЗаключения = ?(СсылкаНаОбъект.ДатаЗавершения = Дата(1,1,1),"«____» ________________ 20____ г.",Формат(СсылкаНаОбъект.ДатаЗавершения,"ДФ='«dd» MMMM yyyy'") + " г.");	ТабДокумент.Вывести(Область);
	
	// Рекомендации
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Рекомендации) Тогда
		Область = Макет.ПолучитьОбласть("Рекомендации");
		Область.Параметры.Рекомендации = СсылкаНаОбъект.Рекомендации;
		ТабДокумент.Вывести(Область);
	КонецЕсли; 
	
	// Подвал
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Дата = Формат(ТекущаяДата(),"ДФ='«dd» MMMM yyyy'") + " г.";
	Область.Параметры.Председатель = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.ПредседательМедКомиссии);
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПаспортаЗдоровья(СсылкаНаОбъект,Только14Пункт)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрохождениеМедосмотра_ПаспортЗдоровья";
		
	Макет = ПолучитьМакет("ПаспортЗдоровья");
	Если НЕ Только14Пункт Тогда
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьДатаШапки		= Макет.ПолучитьОбласть("ДатаШапки");
		ОбластьДанныеРаботника	= Макет.ПолучитьОбласть("ДанныеРаботника");
		ОбластьРабота			= Макет.ПолучитьОбласть("Работа");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		ОбластьУсловияТрудаШапка = Макет.ПолучитьОбласть("УсловияТрудаШапка");
		ОбластьУсловияТрудаСтрока = Макет.ПолучитьОбласть("УсловияТрудаСтрока");
		
		// Данные организации
		СтруктураРеквизитовОрганизации	= ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект.Филиал);
		ОбластьШапка.Параметры.НаимОрг = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
		// АдресТелефон
		ОбластьШапка.Параметры.АдресОрг = СтруктураРеквизитовОрганизации.Адрес;
		ОбластьШапка.Параметры.ТелефонОрг = СтруктураРеквизитовОрганизации.Телефон;	
		// ОГРН 
		ОбщегоНазначения.ЗаполнитьПараметрПосимвольно(ОбластьШапка,"ОГ", СтруктураРеквизитовОрганизации.ОГРН);
		ТабДокумент.Вывести(ОбластьШапка);
		
		// Дата шапки
		ОбластьДатаШапки.Параметры.номПор = СсылкаНаОбъект.Номер;
		ОбластьДатаШапки.Параметры.День = Формат(СсылкаНаОбъект.Дата, "ДФ=dd; ДЛФ=DD");
		ОбластьДатаШапки.Параметры.Месяц = Формат(СсылкаНаОбъект.Дата, "ДФ=MMMM");
		ОбластьДатаШапки.Параметры.Год = Формат(СсылкаНаОбъект.Дата, "ДФ=yy");
		ТабДокумент.Вывести(ОбластьДатаШапки);
		
		// Данные работника
		Клиент = СсылкаНаОбъект.Клиент;
		ОбластьДанныеРаботника.Параметры.Фам = Клиент.Фамилия;
		ОбластьДанныеРаботника.Параметры.Имя = Клиент.Имя;
		ОбластьДанныеРаботника.Параметры.Отч = Клиент.Отчество;
		ОбластьДанныеРаботника.Параметры.Пол = ?(Клиент.Пол = Перечисления.ПолФизическихЛиц.Женский, "Ж", "М");
		ОбластьДанныеРаботника.Параметры.ДатаРожд = Формат(Клиент.ДатаРождения, "ДФ=dd.MM.yyyy");
		// Паспортные данные
		ПаспДанные = РегистрыСведений.ПаспортныеДанные.ПолучитьПоследнее(СсылкаНаОбъект.Дата, Новый Структура("ФизЛицо", Клиент));
		ОбластьДанныеРаботника.Параметры.Серия = ПаспДанные.ДокументСерия;
		ОбластьДанныеРаботника.Параметры.Номер = ПаспДанные.ДокументНомер;
		ОбластьДанныеРаботника.Параметры.ДатаВыд = Формат(ПаспДанные.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy");
		ОбластьДанныеРаботника.Параметры.Выдан = ПаспДанные.ДокументКемВыдан;
		// Контактная информация
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	ВЫБОР
		|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЮридический)
		|			ТОГДА 0
		|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресФактический)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтактнаяИнформация.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Запрос.УстановитьПараметр("Объект", Клиент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбластьДанныеРаботника.Параметры.Адрес = Выборка.Представление;
		КонецЕсли;
		ОбластьДанныеРаботника.Параметры.Телефон = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент);
		ТабДокумент.Вывести(ОбластьДанныеРаботника);
		
		// Работа
		МестоРаботы = "";
		МестоРаботыПолн = "";
		ВидДеят = "";
		ФормаСобств = "";
		Если ТипЗнч(Клиент.умцМестоРаботы) = Тип("СправочникСсылка.Контрагенты") Тогда
			МестоРаботы = Клиент.умцМестоРаботы.Наименование;
			МестоРаботыПолн = Клиент.умцМестоРаботы.НаименованиеПолное;
			ВидДеят = Клиент.умцМестоРаботы.ВидЭкономДеятельности;
			ФормаСобств = Клиент.умцМестоРаботы.ФормаСобственности;
		Иначе 
			МестоРаботы = Клиент.умцМестоРаботы;
			МестоРаботыПолн = Клиент.умцМестоРаботы;
		КонецЕсли;
		ОбластьРабота.Параметры.КраткоеОрг = МестоРаботы;
		ОбластьРабота.Параметры.НаимПолн = МестоРаботыПолн;
		ОбластьРабота.Параметры.ВидЭкономДеят = ВидДеят;
		ОбластьРабота.Параметры.ФормаСобств = ФормаСобств;
		ОбластьРабота.Параметры.Цех = Клиент.ЦехУчасток;
		ОбластьРабота.Параметры.Проф = Клиент.Профессия;
		ТабДокумент.Вывести(ОбластьРабота);
		
		// Условия труда
		ТабДокумент.Вывести(ОбластьУсловияТрудаШапка);
		Для Каждого ЗаписьФактор Из СсылкаНаОбъект.ФакторыИУсловияРаботы Цикл
			ОбластьУсловияТрудаСтрока.Параметры.Фактор	= ЗаписьФактор.Фактор["НомерПП"]
														+ " " + ЗаписьФактор.Фактор.НаименованиеПолное;
			ТабДокумент.Вывести(ОбластьУсловияТрудаСтрока);
		КонецЦикла;
		ОбластьУсловияТрудаСтрока.Параметры.Фактор = "";
		Для Сч = 1 По Мин(3 - СсылкаНаОбъект.ФакторыИУсловияРаботы.Количество(),1) Цикл
			ТабДокумент.Вывести(ОбластьУсловияТрудаСтрока);
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьПодвал);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Противопоказания.Документ.Врач КАК Врач,
	               |	МАКСИМУМ(Противопоказания.ПрофнепригодностьВременная) КАК ПрофнепригодностьВременная,
	               |	Противопоказания.Документ.Дата КАК Дата
	               |ИЗ
	               |	РегистрСведений.Противопоказания КАК Противопоказания
	               |ГДЕ
	               |	Противопоказания.СлучайОбращения = &СлучайОбращения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Противопоказания.Документ.Врач,
	               |	Противопоказания.Документ.Дата";
	
	Запрос.УстановитьПараметр("СлучайОбращения", СсылкаНаОбъект);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда
		
		ПустаяОбласть = Макет.ПолучитьОбласть("Пункт14Пустой");
		ТабДокумент.Вывести(ПустаяОбласть);
		
	Иначе
		
		ШапкаПункт14 = Макет.ПолучитьОбласть("ШапкаПункт14");
		ТабДокумент.Вывести(ШапкаПункт14);
		
		ПП = 1;
		СтрокаПункт14 = Макет.ПолучитьОбласть("СтрокаПункт14"); 
		Пока Выборка.Следующий() Цикл
		
			СтрокаПункт14.Параметры.ПП = ПП;
			СтрокаПункт14.Параметры.Врач = СокрЛП(Выборка.Врач.Фамилия) + " " + СокрЛП(Выборка.Врач.Имя) + " " + СокрЛП(Выборка.Врач.Отчество);
			СтрокаПункт14.Параметры.Дата = Формат(Выборка.Дата,"ДФ=dd.MM.yyyy");
			СтрокаПункт14.Параметры.Заключение = ?(ЗначениеЗаполнено(Выборка.ПрофнепригодностьВременная),
			Выборка.ПрофнепригодностьВременная, НСтр("ru='Не выявлена (годен)'"));
			ТабДокумент.Вывести(СтрокаПункт14);
			ПП = ПП + 1;
		
		КонецЦикла;
		
		ПодвалПункт14 = Макет.ПолучитьОбласть("ПодвалПункт14");
		ТабДокумент.Вывести(ПодвалПункт14);
		
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати = "ПечатьПаспортаЗдоровья" + Число(Только14Пункт);
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
		
КонецФункции

Функция ПечатьОсмотрПрофпатолога(СсылкаНаОбъект)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрохождениеМедосмотра_ОсмотрПрофпатолога";
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПечатьОсмотрПрофпатолога";
	
	Макет = ПолучитьМакет("ОсмотрПрофпатолога");
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект); 
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.НазваниеОрганизации) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Организация = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.Адрес) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Адрес");
		ОбластьМакета.Параметры.Адрес = СтруктураРеквизитовОрганизации.Адрес;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаЗаключение");
	
	ДанныеКлиента = ДанныеРаботникаДляМедосмотра(СсылкаНаОбъект, СсылкаНаОбъект.Клиент);
	
	ОбластьШапка.Параметры.ФИО = ДанныеКлиента.ФИОКлиента;
	ОбластьШапка.Параметры.Пол = СсылкаНаОбъект.Клиент.Пол;
	ОбластьШапка.Параметры.ДатаРожд = Формат(СсылкаНаОбъект.Клиент.ДатаРождения,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПолныхЛет = ОбщегоНазначенияКлиентСервер.ПолучитьВозрастСтрокой(СсылкаНаОбъект.Клиент.ДатаРождения);
	
	// Место работы
	ОбластьШапка.Параметры.МестоРаботы = ДанныеКлиента.МестоРаботы;
	ОбластьШапка.Параметры.Профессия = ДанныеКлиента.Профессия;
	ОбластьШапка.Параметры.Телефон = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(СсылкаНаОбъект.Клиент);
	ОбластьШапка.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
	
	ТабДокумент.Вывести(ОбластьШапка);				
	
	ОбластьШапкаОсмотра = Макет.ПолучитьОбласть("ШапкаОсмотра");
	ТабДокумент.Вывести(ОбластьШапкаОсмотра);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Жалобы");
	МассивРеквизитов.Добавить("Исследования");
	МассивРеквизитов.Добавить("Осмотр");
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		
		ОбластьРеквизитПрофпатолога = Макет.ПолучитьОбласть("РеквизитПрофпатолога");
		ОбластьРеквизитПрофпатолога.Параметры.НаименованиеПараметра = ИмяРеквизита + ":";
		ОбластьРеквизитПрофпатолога.Параметры.Значение = СсылкаНаОбъект[ИмяРеквизита];
		
		ТабДокумент.Вывести(ОбластьРеквизитПрофпатолога);
		
	КонецЦикла;
	
	Если СсылкаНаОбъект.КритичныеПротивопоказания.Количество() <> 0 Тогда
		ОбластьШапкаДиагнозы = Макет.ПолучитьОбласть("ШапкаДиагнозы");
		ТабДокумент.Вывести(ОбластьШапкаДиагнозы);
	КонецЕсли;
	
	НомерПП = 1;
	
	Для Каждого СтрокаПротивопоказаний Из СсылкаНаОбъект.КритичныеПротивопоказания Цикл
		
		ОбластьСтрокаДиагнозы = Макет.ПолучитьОбласть("ДиагнозыСтрока");
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаДиагнозы.Параметры,СтрокаПротивопоказаний);
		ОбластьСтрокаДиагнозы.Параметры.МКБ10 = СтрокаПротивопоказаний.Диагноз.КодДиагноза;
		
		Отбор = Новый Структура("КлючСтроки",СтрокаПротивопоказаний.КлючСтроки);
		
		мсСтр = СсылкаНаОбъект.ВредныеФакторыПротивопоказаний.НайтиСтроки(Отбор);
		ТекРезультат = "";
		Для Каждого СтрокаВредности Из мсСтр Цикл
			ТекРезультат = ТекРезультат + ?(ПустаяСтрока(ТекРезультат),"",", ") + СтрокаВредности.ВредныйФактор["НомерПП"];
		КонецЦикла;
		
		ОбластьСтрокаДиагнозы.Параметры.ВредныеФакторы = ТекРезультат;
		ОбластьСтрокаДиагнозы.Параметры.ПП = НомерПП;
		
		ТабДокумент.Вывести(ОбластьСтрокаДиагнозы);
		
		НомерПП = НомерПП + 1;
	КонецЦикла;
	
	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	ТабДокумент.Вывести(ОбластьОтступ);
	
	МассивРеквизитов.Очистить();
	МассивРеквизитов.Добавить("Рекомендации");
	МассивРеквизитов.Добавить("Заключение");
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		
		ОбластьРеквизитПрофпатолога = Макет.ПолучитьОбласть("РеквизитПрофпатолога");
		ОбластьРеквизитПрофпатолога.Параметры.НаименованиеПараметра = ИмяРеквизита + ":";
		ОбластьРеквизитПрофпатолога.Параметры.Значение = СсылкаНаОбъект[ИмяРеквизита];
		
		ТабДокумент.Вывести(ОбластьРеквизитПрофпатолога);
		
	КонецЦикла;
	
	ОбластьОсмотрПодвал = Макет.ПолучитьОбласть("ОсмотрПодвал");
	ОбластьОсмотрПодвал.Параметры.ДатаЗавершения = ?(СсылкаНаОбъект.ДатаЗавершения = Дата(1,1,1),"«____» ________________ 20____ г.",Формат(СсылкаНаОбъект.ДатаЗавершения,"ДФ='«dd» MMMM yyyy'") + " г.");
	ОбластьОсмотрПодвал.Параметры.Председатель = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.ПредседательМедКомиссии);
	
	ТабДокумент.Вывести(ОбластьОсмотрПодвал);
	
	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьКартинкуШтрихкода(Ссылка)
	
	ТипШК = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	
	Штрихкод = РаботаСТорговымОборудованиемСервер.ПолучитьШтрихкодВладельца(Ссылка, ТипШК);
	
	Если Штрихкод = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВнешняяКомпонента = ГенерацияШтрихкодаСерверПовтИсп.ПодключитьКомпонентуГенерацииИзображенияШтрихкода("");
	
	ТипКода = Штрихкодирование.ПолучитьЗначениеТипаШтрихкодаДляЭУ(ТипШК);
	
	ПараметрыШтрихкода = Штрихкодирование.ПолучитьПараметрыШтрихкода(300,40, ТипКода, Штрихкод);
	ПараметрыШтрихкода.ОтображатьТекст = Истина;	
	
	Возврат Штрихкодирование.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода, Истина);
	
КонецФункции

Функция ДанныеРаботникаДляМедосмотра(ПрохождениеМедосмотра, Клиент)
	
	Перем Работодатель;
	
	СтруктураДанныхКлиента = Новый Структура("ФИОКлиента, МестоРаботы, Профессия, ЦехУчасток");
	Если ЗначениеЗаполнено(ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра) Тогда
		
		СПМО = ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра;
		СтрокаСПМО = СПМО.Клиенты.Найти(Клиент, "Клиент");
		
		Если СтрокаСПМО <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанныхКлиента, СтрокаСПМО, "ФИОКлиента, Профессия, ЦехУчасток");
			
			Если ЗначениеЗаполнено(СПМО.МестоРаботы) Тогда
				СтруктураДанныхКлиента.МестоРаботы = СПМО.МестоРаботы;
			Иначе
				Работодатель = СПМО.Контрагент; // Для заполнения в конце функции.
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураДанныхКлиента, ПрохождениеМедосмотра, "ФИОКлиента, Профессия, ЦехУчасток, МестоРаботы");
	КонецЕсли;
	
	// Дозаполнение из карточки клиента.
	Если Не ЗначениеЗаполнено(СтруктураДанныхКлиента.ФИОКлиента) Тогда
		СтруктураДанныхКлиента.ФИОКлиента = ОбщегоНазначения.ФИОФизЛица(Клиент);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтруктураДанныхКлиента.Профессия) Тогда
		СтруктураДанныхКлиента.Профессия = Клиент.Профессия;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтруктураДанныхКлиента.ЦехУчасток) Тогда
		СтруктураДанныхКлиента.ЦехУчасток = Клиент.ЦехУчасток;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураДанныхКлиента.МестоРаботы) Тогда
		
		Если Не ЗначениеЗаполнено(Работодатель) Тогда
			Работодатель = Клиент.умцМестоРаботы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Работодатель) Тогда
			Если ТипЗнч(Работодатель) = Тип("Строка") Тогда
				СтруктураДанныхКлиента.МестоРаботы = Работодатель;
			ИначеЕсли ТипЗнч(Работодатель) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтруктураДанныхКлиента.МестоРаботы = ?(ПустаяСтрока(Работодатель.НаименованиеПолное), Работодатель.Наименование, Работодатель.НаименованиеПолное);	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураДанныхКлиента;
	
КонецФункции

Функция ДействиеМОНаименованиеДляПечати(Действие, НаименованиеДляПечати = Неопределено)
	
	Если НаименованиеДляПечати = Неопределено
		И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияМедосмотра")
	Тогда
		НаименованиеДляПечати = Действие.НаименованиеДляПечати;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(НаименованиеДляПечати), НаименованиеДляПечати, Строка(Действие));
	
КонецФункции

Функция ТабличныйДокументСправки(ПМО, Номенклатура = Неопределено, ПараметрыПриема = Неопределено, Подписи = Неопределено, ДляПодписи = Ложь, ВредныйФакторСправки = Неопределено) Экспорт
	
	Если ДляПодписи Тогда
		Номенклатура = ПМО.Номенклатура;
		ПараметрыПриема = ПМО.ПараметрыПриема;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Область(1,1).Текст = НСтр("ru='Не удалось сформировать форму для печати'");
	
	Если ВредныйФакторСправки = Неопределено Тогда
		Шаблон = Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
	Иначе
		Шаблон = ВредныйФакторСправки.ШаблонОсмотраСправки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шаблон)
		И Шаблон.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент
	Тогда
		ТабДок = Шаблон.ТабличныйДокумент.Получить();
		Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
			
			Если Ложь Тогда ТабДок = Новый ТабличныйДокумент КонецЕсли;
			
			ЗначенияПараметров = Новый Структура;
			Для Каждого СтрокаПараметра Из Шаблон.СоответствияПараметрам Цикл
				Если ЗначениеЗаполнено(СтрокаПараметра.Параметр) Тогда
					Если ВредныйФакторСправки <> Неопределено Тогда
						мсСтрокаПриема = ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр, ВредныйФактор", СтрокаПараметра.Параметр, ВредныйФакторСправки));
					Иначе
						мсСтрокаПриема = ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметра.Параметр));
					КонецЕсли;
					Если мсСтрокаПриема.Количество() <> 0 Тогда
						Попытка
							Значение = мсСтрокаПриема[0].Значение;
							Значение = Формат(Значение, СтрокаПараметра.Параметр.ФорматнаяСтрока);
							
							ЗначенияПараметров.Вставить(СтрокаПараметра.Наименование, Значение);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТабДок.Параметры.Заполнить(ЗначенияПараметров);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ТабДок);
			
			// Настройки печати
			ТабличныйДокумент.ИмяПараметровПечати = Строка(Шаблон.УникальныйИдентификатор());
			
			ТабличныйДокумент.АвтоМасштаб = Шаблон.ПечатьАвтомасштабирование;
			ТабличныйДокумент.ОриентацияСтраницы = ?(Шаблон.ПечатьОриентацияСтраницы, ОриентацияСтраницы.Ландшафт, ОриентацияСтраницы.Портрет);
			
			Если ЗначениеЗаполнено(Шаблон.ПечатьРазмерБумаги) Тогда
				ТабличныйДокумент.РазмерСтраницы = Шаблон.ПечатьРазмерБумаги;
			КонецЕсли;
			
			Если Шаблон.ПечатьДвусторонняяПечать = 0 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ИспользоватьНастройкиПринтера;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 1 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.Нет;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 2 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВверх;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 3 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево;
			КонецЕсли;
			
			Если Подписи <> Неопределено Тогда
				ВывестиБлокЭЦПВТабличныйДокумент(ПМО, ТабличныйДокумент, Подписи, Шаблон);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТабличныйДокумент.Область(1,1).Текст = НСтр("ru='Не задан шаблон справки у услуги медосмотра справки'");
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область ЭЦП

// Возвращает массив имен ключевых реквизитов согласно версии
//
// Параметры:
//  Версия	 - Число - версия набора ключевых реквизитов. По умолчанию Неопределено - значит последняя.
// 
// Возвращаемое значение:
//  Массив - имена ключевых реквизитов и групп реквизитов.
//
Функция ПолучитьИменаКлючевыхРеквизитов(Версия = Неопределено) Экспорт
	
	// !ДанныеОбъекта - служебное имя реквизита, означающее, что процедура формирования строки значений полей полностью переопределена.		
	// !ХешФайлов - служебное имя реквизита, формирует строку хеша файлов по объекту
	
	МассивИмен = Новый Массив;
	
	Если Версия = 2 Тогда
		МассивИмен.Добавить("!ДанныеОбъекта");
	Иначе // Реквизиты актуальной версии
		МассивИмен.Добавить("!ДанныеОбъекта");
		МассивИмен.Добавить("!ДанныеФайлов");
	КонецЕсли;
	
	Возврат МассивИмен;
	
КонецФункции

Процедура ВывестиБлокЭЦПВТабличныйДокумент(Ссылка, ТабличныйДокумент, Подписи, Шаблон)
	
	Если Не Ссылка.ПодписанЭП
		Или Подписи.Количество() = 0
		Или Шаблон.РасположениеПодписи = Перечисления.РасположениеПодписи.НеВыводить
	Тогда
		Возврат;
	КонецЕсли;
	
	тзПодписи = Подписи.Выгрузить();
	тзПодписи.Сортировать("ЭтоПодписьВрача Убыв, ДатаПодписи");
	
	Для Каждого СтрокаПодписи Из тзПодписи Цикл
		Если Не СтрокаПодписи.ПодписьВерна Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПодписи = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(СтрокаПодписи.АдресСертификата, Ссылка, СтрокаПодписи.ДатаПодписи);
		ЭЦП_УМЦ_Сервер.ДобавитьРисунокЭЦПВТабличныйДокумент(ТабличныйДокумент, Шаблон.ПараметрыЭЦПТабличногоШаблона, ДанныеПодписи, Шаблон.РасположениеПодписи, ТабличныйДокумент.ВысотаТаблицы);
		Возврат;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНеподписанныеДокументыДляОтчётаЭЦП(ПараметрыДанных, ДокументыРЭМД) Экспорт
	
	Запрос = Новый Запрос;
	Если ДокументыРЭМД Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	""Медосмотры (справки)"" КАК ТипМедицинскогоДокумента,
			|	ПрохождениеМедосмотра.Ссылка КАК Ссылка,
			|	ПрохождениеМедосмотра.Дата КАК ДатаДокумента,
			|	ИСТИНА КАК ПодписьРЭМД,
			|	ЛОЖЬ КАК ПодписьФайловЭМД
			|ИЗ
			|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
			|				ПО (ШаблоныHTML.Ссылка = ПереченьВредныхФакторовИРабот.ШаблонОсмотраСправки)
			|					И (ШаблоныHTML.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка))
			|			ПО СпрНоменклатура.ВредныйФакторСправки = ПереченьВредныхФакторовИРабот.Ссылка
			|		ПО ПрохождениеМедосмотра.Номенклатура = СпрНоменклатура.Ссылка
			|			И (ПрохождениеМедосмотра.ВидПрохожденияМО = ЗНАЧЕНИЕ(Перечисление.ВидыМедосмотров.СправкаПрочий))
			|			И (ПрохождениеМедосмотра.Дата >= &ДатаНачалаОбменаСРЭМД)
			|			И (ПрохождениеМедосмотра.ПредседательМедКомиссии В (&СотрудникиДокумента))
			|			И (НЕ ПрохождениеМедосмотра.ПометкаУдаления)
			|			И (НЕ ПрохождениеМедосмотра.Тестовый)
			|			И (ПрохождениеМедосмотра.Проведен)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.РолиИПодписиЭМД КАК ПМОРолиИПодписиЭМД
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|			ПО (ЭП.УникальныйИдентификатор = ПМОРолиИПодписиЭМД.УИД_ЭЦП)
			|		ПО (ПМОРолиИПодписиЭМД.Ссылка = ПрохождениеМедосмотра.Ссылка)
			|ГДЕ
			|	&ИспользуетсяРЭМД
			|	И ПМОРолиИПодписиЭМД.Ссылка ЕСТЬ NULL
			|	И (&КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ИЛИ ПрохождениеМедосмотра.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	""Заключения медосмотров"",
			|	ЗаключениеМО.Ссылка,
			|	ЗаключениеМО.Дата,
			|	ИСТИНА,
			|	ЛОЖЬ
			|ИЗ
			|	Документ.ПрохождениеМедосмотра КАК ЗаключениеМО
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.РолиИПодписиЭМД КАК ПМОРолиИПодписиЭМД
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|			ПО (ЭП.УникальныйИдентификатор = ПМОРолиИПодписиЭМД.УИД_ЭЦП)
			|		ПО (ПМОРолиИПодписиЭМД.Ссылка = ЗаключениеМО.Ссылка)
			|ГДЕ
			|	&ИспользуетсяРЭМД
			|	И ЗаключениеМО.ВидПрохожденияМО <> ЗНАЧЕНИЕ(Перечисление.ВидыМедосмотров.СправкаПрочий)
			|	И ЗаключениеМО.Дата >= &ДатаНачалаОбменаСРЭМД
			|	И ЗаключениеМО.ПредседательМедКомиссии В(&СотрудникиДокумента)
			|	И ПМОРолиИПодписиЭМД.Ссылка ЕСТЬ NULL
			|	И НЕ ЗаключениеМО.ПометкаУдаления
			|	И НЕ ЗаключениеМО.Тестовый
			|	И ЗаключениеМО.Проведен
			|	И (&КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ИЛИ ЗаключениеМО.Дата МЕЖДУ &НачалоПериода И &КонецПериода)";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПрохождениеМедосмотра.Дата КАК ДатаДокумента,
			|	ПрохождениеМедосмотра.Ссылка КАК Ссылка,
			|	ПрохождениеМедосмотра.Филиал КАК Филиал,
			|	ШаблоныHTML.Ссылка КАК ШаблонHTML,
			|	ЛОЖЬ КАК Заключение
			|ПОМЕСТИТЬ ПМО
			|ИЗ
			|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
			|				ПО (ШаблоныHTML.Ссылка = ПереченьВредныхФакторовИРабот.ШаблонОсмотраСправки)
			|					И (ШаблоныHTML.ВидДокумента = ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка))
			|			ПО СпрНоменклатура.ВредныйФакторСправки = ПереченьВредныхФакторовИРабот.Ссылка
			|		ПО ПрохождениеМедосмотра.Номенклатура = СпрНоменклатура.Ссылка
			|			И (ПрохождениеМедосмотра.ВидПрохожденияМО = ЗНАЧЕНИЕ(Перечисление.ВидыМедосмотров.СправкаПрочий))
			|			И (ПрохождениеМедосмотра.ПредседательМедКомиссии В (&СотрудникиДокумента))
			|			И (НЕ ПрохождениеМедосмотра.ПометкаУдаления)
			|			И (НЕ ПрохождениеМедосмотра.Тестовый)
			|			И (ПрохождениеМедосмотра.Проведен)
			|			И (&КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ИЛИ ПрохождениеМедосмотра.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПрохождениеМедосмотра.Дата,
			|	ПрохождениеМедосмотра.Ссылка,
			|	ПрохождениеМедосмотра.Филиал,
			|	НЕОПРЕДЕЛЕНО,
			|	ИСТИНА
			|ИЗ
			|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
			|ГДЕ
			|	ПрохождениеМедосмотра.ВидПрохожденияМО <> ЗНАЧЕНИЕ(Перечисление.ВидыМедосмотров.СправкаПрочий)
			|	И ПрохождениеМедосмотра.ПредседательМедКомиссии В(&СотрудникиДокумента)
			|	И НЕ ПрохождениеМедосмотра.ПометкаУдаления
			|	И НЕ ПрохождениеМедосмотра.Тестовый
			|	И ПрохождениеМедосмотра.Проведен
			|	И (&КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ИЛИ ПрохождениеМедосмотра.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПМО.Ссылка КАК Ссылка,
			|	ПМО.ДатаДокумента КАК ДатаДокумента,
			|	ПМО.Филиал КАК Филиал,
			|	ПМО.ШаблонHTML КАК ШаблонHTML,
			|	ПМО.Заключение КАК Заключение
			|ПОМЕСТИТЬ ПМОДляПодписиПоРолям
			|ИЗ
			|	ПМО КАК ПМО
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			ПМО.Ссылка КАК Ссылка
			|		ИЗ
			|			ПМО КАК ПМО
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
			|					ПО (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
			|				ПО (ЭлектронныеПодписи.Объект = ПМО.Ссылка)
			|					И (НЕ ЭлектронныеПодписи.ПодписанФайлЭМД)
			|		ГДЕ
			|			РолиИПодписиЭМД.УИД_ЭЦП ЕСТЬ NULL) КАК ПМОСПодписямиБезРоли
			|		ПО (ПМОСПодписямиБезРоли.Ссылка = ПМО.Ссылка)
			|ГДЕ
			|	ПМОСПодписямиБезРоли.Ссылка ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ПМО.Заключение
			|			ТОГДА ""Заключения медосмотров""
			|		ИНАЧЕ ""Медосмотры (справки)""
			|	КОНЕЦ КАК ТипМедицинскогоДокумента,
			|	ПМО.Ссылка КАК Ссылка,
			|	ПМО.ДатаДокумента КАК ДатаДокумента,
			|	ПМО.ШаблонHTML КАК ШаблонHTML,
			|	ЛОЖЬ КАК ПодписьРЭМД,
			|	НЕ ПМО.Заключение КАК ПодписьФайловЭМД
			|ИЗ
			|	ПМОДляПодписиПоРолям КАК ПМО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			ПМО.Ссылка КАК Ссылка,
			|			ПМО.ДатаДокумента КАК ДатаДокумента
			|		ИЗ
			|			ПМОДляПодписиПоРолям КАК ПМО
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
			|					ПО (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
			|						И (РолиИПодписиЭМД.РольПодписи = &РольПредседателя)
			|				ПО (ЭлектронныеПодписи.Объект = ПМО.Ссылка)
			|					И (НЕ ЭлектронныеПодписи.ПодписанФайлЭМД)
			|		ГДЕ
			|			ЭлектронныеПодписи.Объект ЕСТЬ NULL
			|		
			|		ОБЪЕДИНИТЬ
			|		
			|		ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			ПМО.Ссылка,
			|			ПМО.ДатаДокумента
			|		ИЗ
			|			ПМОДляПодписиПоРолям КАК ПМО
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ПодписиМО.Филиал КАК Филиал
			|				ИЗ
			|					РегистрСведений.ПодписиМО КАК ПодписиМО
			|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
			|						ПО (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)
			|							И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = ПодписиМО.Сертификат)
			|							И (СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления = ЛОЖЬ)) КАК ФилиалыПодписейМО
			|				ПО (ФилиалыПодписейМО.Филиал = ПМО.Ссылка.Филиал
			|						ИЛИ ФилиалыПодписейМО.Филиал = ПМО.Ссылка.Филиал.Организация)
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
			|					ПО (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
			|						И (РолиИПодписиЭМД.РольПодписи = ЗНАЧЕНИЕ(Перечисление.РолиПодписей.МедицинскаяОрганизация))
			|				ПО (ЭлектронныеПодписи.Объект = ПМО.Ссылка)
			|					И (НЕ ЭлектронныеПодписи.ПодписанФайлЭМД)
			|		ГДЕ
			|			ЭлектронныеПодписи.Объект ЕСТЬ NULL) КАК НеподписанныеПМО
			|		ПО ПМО.Ссылка = НеподписанныеПМО.Ссылка";
		
		Запрос.УстановитьПараметр("Пользователь",		ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачалаОбменаСРЭМД",	ПараметрыДанных.ДатаНачалаОбменаСРЭМД);
	Запрос.УстановитьПараметр("СотрудникиДокумента",	ПараметрыДанных.СотрудникиДокумента);
	Запрос.УстановитьПараметр("ИспользуетсяРЭМД",		ПараметрыДанных.ИспользуетсяРЭМД);
	Запрос.УстановитьПараметр("НачалоПериода",			ПараметрыДанных.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",			ПараметрыДанных.КонецПериода);
	Запрос.УстановитьПараметр("РольПредседателя",		Перечисления.РолиПодписей.РольПредседательМедкомиссии());
	
	Если ДокументыРЭМД Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	НеподписанныеПМО = Запрос.Выполнить().Выгрузить();
	
	ШаблоныСправок = НеподписанныеПМО.Скопировать();
	ШаблоныСправок.Свернуть("ШаблонHTML");
	
	Для Каждого СтрокаШаблонаСправки Из ШаблоныСправок Цикл
		Если СтрокаШаблонаСправки.ШаблонHTML = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если МедосмотрыСервер.ПустойТабДокШаблонаСправки(СтрокаШаблонаСправки.ШаблонHTML) Тогда
			Для Каждого СтрокаКУдалению Из НеподписанныеПМО.НайтиСтроки(Новый Структура("ШаблонHTML, ПодписьФайловЭМД", СтрокаШаблонаСправки.ШаблонHTML, Истина)) Цикл
				НеподписанныеПМО.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НеподписанныеПМО.Колонки.Удалить("ШаблонHTML");
	
	Возврат НеподписанныеПМО;
	
КонецФункции

#КонецОбласти

#КонецОбласти
