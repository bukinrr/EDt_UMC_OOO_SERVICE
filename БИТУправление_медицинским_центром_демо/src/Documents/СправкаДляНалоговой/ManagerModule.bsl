#Область ПрограммныйИнтерфейс
// Возвращает доступные варианты печати документа.
//  Результатом является Струткура, каждая строка которой соответствует одному из вариантов печати.
// 
// Возвращаемое значение:
//	Структура.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("СправкаДляНалоговой",		 НСтр("ru='Справка для налоговой'"));
	СтруктураМакетов.Вставить("СправкаДляНалоговой2024",	 НСтр("ru='Справка для налоговой (новая с 2024г ЕА-7-11/824)'"));
	СтруктураМакетов.Вставить("СправкаДляНалоговой2001",	 НСтр("ru='Справка для налоговой (старая до 2023г по 289/БГ-3-04/256)'"));
	СтруктураМакетов.Вставить("СправкаДляНалоговойПустая",	 НСтр("ru='Справка для налоговой (пустой бланк ЕА-7-11/824)'"));
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура формирует печатную форму документа
//  Название макета печати передается в качестве параметра,
//  по переданному имени макета определяется соответствующая функция печати.
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка	 - ссылка на распечатываемый документ.
//  ИмяМакета		 - Строка			 - имя макета из структуры печатных форм.
// 
// Возвращаемое значение:
//	ТабличныйДокумент.
//
Функция Печать(СсылкаНаОбъект, ИмяМакета) Экспорт
	
	Перем ТабДокумент;
	
	// Получить экземпляр документа на печать.
	Если ИмяМакета = "СправкаДляНалоговой" Тогда
		Если СсылкаНаОбъект.ОтчетныйГод < 2024 Тогда
			ТабДокумент = ПечатьСправкиДо2024(СсылкаНаОбъект);	
		Иначе
			ТабДокумент = ПечатьСправки(СсылкаНаОбъект);
		КонецЕсли;
	ИначеЕсли ИмяМакета = "СправкаДляНалоговойПустая" Тогда
		ТабДокумент = ПечатьСправкиПустой(СсылкаНаОбъект);		
	ИначеЕсли ИмяМакета = "СправкаДляНалоговой2024" Тогда
		ТабДокумент = ПечатьСправки(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "СправкаДляНалоговой2001" Тогда
		ТабДокумент = ПечатьСправкиДо2024(СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Возвращает паспортные данные клиента, необходимые для справкки для налоговой с приоритетом паспорта РФ
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - Клиент
//  Дата	 - Дата	 - Дата выдачи справки
// 
// Возвращаемое значение:
//  Структура - "ВидДУЛ,СерияДУЛ,НомерДУЛ,ДатаВыдачиДУЛ" 
//
Функция ПолучитьПаспортныеДанныеКлиента(Клиент, Дата = Неопределено) Экспорт
		
	Период = ?(Дата = Неопределено, ТекущаяДата(), Дата);
	
	ПаспортныеДанные = Новый Структура("ВидДУЛ, СерияДУЛ, НомерДУЛ, ДатаВыдачиДУЛ");
	
	ПаспДанныеРегистр = РегистрыСведений.ПаспортныеДанные.ПолучитьПоследнее(Период, Новый Структура("ФизЛицо", Клиент));
	Если ЗначениеЗаполнено(ПаспДанныеРегистр.ДокументВид) Тогда
		
		ПаспортныеДанные.ВидДУЛ			 = ПаспДанныеРегистр.ДокументВид;
		ПаспортныеДанные.СерияДУЛ		 = ПаспДанныеРегистр.ДокументСерия;
		ПаспортныеДанные.НомерДУЛ		 = ПаспДанныеРегистр.ДокументНомер;
		ПаспортныеДанные.ДатаВыдачиДУЛ	 = ПаспДанныеРегистр.ДокументДатаВыдачи;
		
		ПаспортныеДанные.ВидДУЛ = ПолучитьСоответствиеВидДУЛКод().Получить(ПаспортныеДанные.ВидДУЛ);
		ПаспортныеДанные.ВидДУЛ = ?(Не ЗначениеЗаполнено(ПаспортныеДанные.ВидДУЛ), "91", ПаспортныеДанные.ВидДУЛ); 
	КонецЕсли;
	
	Возврат ПаспортныеДанные;
	
КонецФункции

Функция РевизитыПриказа_Справка2024() Экспорт

	Структура = Новый Структура;
	
	Структура.Вставить("ДатаПриказа", "08.11.2023");
	Структура.Вставить("НомерПриказа", "ЕА-7-11/824@");
	
	Возврат Структура;
	
КонецФункции

Функция ОписаниеОрганизацииДляПечати_Справка2024(ДанныеОрганизации, СсылкаНаОбъект = Неопределено) Экспорт
	
	Описание = ДанныеОрганизации.НазваниеОрганизации;
	
	// Приказ категорически не раскрывает наполнение поля "Данные организации", давая на них жалкие 160 символов.
	// При необходимости конкретной клиники рекомендуется расширениями конфигурации корректировать эту процедуру. 
	// Для единичных случаев - править табличный документ справки в форме просмотра печати (после формирования).
	
	// ОбщегоНазначенияБИТКлиентСервер.КонкатенацияСтрок(Описание, ДанныеОрганизации.Адрес, " ", Истина);
	
	// ОбщегоНазначенияБИТКлиентСервер.КонкатенацияСтрок(Описание, "Лицензия" + ДанныеОрганизации.ЛицензияПредставление, " ", Истина);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий 

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("Ключ") Тогда
			// Открытие старого
			Документ = Параметры.Ключ;
			Если Документ.НачалоПериода < Дата(2024,1,1) Тогда
				ВыбраннаяФорма = "ФормаДокументаДо2024_n289";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ТекущаяДата() < Дата(2025,1,1) Тогда
			// Новый документ
			ВыбраннаяФорма = "ФормаДокументаДо2024_n289";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ПечатьСправкиДо2024(СсылкаНаОбъект)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект.ИНН) Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.Область(1,1,1,1).Текст = "Не заполнен ИНН налогоплательщика";
		Возврат ТабДокумент;
	КонецЕсли;
	
	ВалютаДокумента = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВалютаУчета");
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Справочники.Валюты.Рубль;
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("СправкаДляНалоговой_n289");
	ОбластьКорешок = Макет.ПолучитьОбласть("Корешок");
	ОбластьЛинияОтрыва = Макет.ПолучитьОбласть("ЛинияОтрыва");
	ОбластьСправка = Макет.ПолучитьОбласть("Справка");
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект); 
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.НазваниеОрганизации) Тогда
		ОбластьСправка.Параметры.ДанныеОрганизацииНаименование = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.Адрес) Тогда
		ОбластьСправка.Параметры.ДанныеОрганизацииАдрес = СтруктураРеквизитовОрганизации.Адрес;
	КонецЕсли;
	
	ДанныеОрганизации  = "";
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.ИНН) Тогда
		ДанныеОрганизации = ДанныеОрганизации + НСтр("ru='ИНН'") + ": " + СтруктураРеквизитовОрганизации.ИНН;
		Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.КПП) Тогда
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСправка.Параметры.ДанныеОрганизацииИНН = ДанныеОрганизации;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.Телефон) Тогда
		ОбластьСправка.Параметры.Телефон = СтруктураРеквизитовОрганизации.Телефон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.ЛицензияПредставление) Тогда
		ОбластьСправка.Параметры.Лицензия = СтруктураРеквизитовОрганизации.ЛицензияПредставление;
	КонецЕсли;
	
	ЗапросШапки = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	СправкаДляНалоговой.Номер КАК Номер,
	                           |	СправкаДляНалоговой.ДатаВыдачи КАК ДатаВыдачи,
	                           |	СправкаДляНалоговой.Клиент КАК Клиент,
	                           |	СправкаДляНалоговой.Налогоплательщик КАК Налогоплательщик,
	                           |	СправкаДляНалоговой.Филиал КАК Филиал,
	                           |	СправкаДляНалоговой.ИНН КАК ИНН,
	                           |	СправкаДляНалоговой.Сумма КАК Сумма,
	                           |	СправкаДляНалоговой.ДатаОплаты КАК ДатаОплаты,
	                           |	СправкаДляНалоговой.Ответственный.Сотрудник КАК Сотрудник,
	                           |	СправкаДляНалоговой.МедицинскаяКарта.НомерКарты КАК НомерКарты,
	                           |	СправкаДляНалоговой.КодУслуги КАК КодУслуги,
	                           |	СправкаДляНалоговой.Ответственный.Сотрудник.Должность.Представление КАК Должность,
	                           |	СправкаДляНалоговой.КомуОказаныУслуги КАК КомуОказаныУслуги,
	                           |	СправкаДляНалоговой.ДатыОплаты.(
	                           |		Дата КАК Дата,
	                           |		Сумма КАК Сумма
	                           |	) КАК ДатыОплаты
	                           |ИЗ
	                           |	Документ.СправкаДляНалоговой КАК СправкаДляНалоговой
	                           |ГДЕ
	                           |	СправкаДляНалоговой.Ссылка = &Ссылка");
	ЗапросШапки.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = ЗапросШапки.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		
		ЗаполнитьЗначенияСвойств(ОбластьКорешок.Параметры, Выборка);
		ЗаполнитьЗначенияСвойств(ОбластьСправка.Параметры, Выборка);

		ОбластьСправка.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
		ОбластьКорешок.Параметры.Номер = ОбластьСправка.Параметры.Номер;
		
		ОбластьСправка.Параметры.Клиент = ОбщегоНазначения.ФИОФизЛица(Выборка.Клиент);
		ОбластьКорешок.Параметры.Клиент = ОбластьСправка.Параметры.Клиент;
		
		Если ЗначениеЗаполнено(Выборка.КомуОказаныУслуги) Тогда
			ОбластьСправка.Параметры.КомуОказаныУслуги = Выборка.КомуОказаныУслуги;
			ОбластьСправка.УдалитьОбласть(ОбластьСправка.Область("КомуОказаныУслугиНужноеПодчеркнуть"));
		Иначе
			ОбластьСправка.Параметры.КомуОказаныУслуги = "ему (ей), супруге(у), сыну (дочери), матери (отцу)";
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Выборка.Сотрудник) Тогда
			Ответственный = ОбщегоНазначения.ФИОФизЛица(Выборка.Сотрудник);
			Если ЗначениеЗаполнено(Выборка.Должность) Тогда
				Ответственный = Ответственный + ", " + Выборка.Должность;
			КонецЕсли; 
			ОбластьСправка.Параметры.Ответственный = Ответственный;
		КонецЕсли;
		
		Если Выборка.Сумма <> 0 Тогда 
			ОбластьСправка.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(Выборка.Сумма, ВалютаДокумента);
		КонецЕсли;
		
		ВыборкаДатыОплаты = Выборка.ДатыОплаты.Выбрать();
		Если ВыборкаДатыОплаты.Количество() < 5 Тогда
			ОбластьДатаОплаты = ОбластьКорешок.Область("КорешокДатаОплаты");
			ОбластьДатаОплаты.Шрифт = Новый Шрифт("Times New Roman", 11);
			ОбластьДатаОплаты = ОбластьСправка.Область("СправкаДатаОплаты");
			ОбластьДатаОплаты.Шрифт = Новый Шрифт("Times New Roman", 11);
		КонецЕсли;
		
		Если ВыборкаДатыОплаты.Следующий() Тогда
			СтрокаДатаОплаты = Формат(ВыборкаДатыОплаты.Дата,"ДФ=dd.MM.yyyy") + " - " + Формат(ВыборкаДатыОплаты.Сумма,"ЧДЦ=2; ЧГ=");
			ДлиннаСуммы = СтрДлина(Строка(Формат(ВыборкаДатыОплаты.Сумма, "ЧДЦ=2; ЧГ=")));
			Сч = 1;
			Пока ВыборкаДатыОплаты.Следующий() Цикл
				Если Сч % 3 <> 0 Тогда
					СтрокаДатаОплаты = СтрокаДатаОплаты + Символы.Таб + Символы.Таб;
					Если ДлиннаСуммы < 7 Тогда
						СтрокаДатаОплаты = СтрокаДатаОплаты + Символы.Таб;
					КонецЕсли;
				Иначе
					СтрокаДатаОплаты = СтрокаДатаОплаты + Символы.ПС;
				КонецЕсли;
				СтрокаДатаОплаты = СтрокаДатаОплаты + Формат(ВыборкаДатыОплаты.Дата,"ДФ=dd.MM.yyyy")+ " - " + Формат(ВыборкаДатыОплаты.Сумма, "ЧДЦ=2; ЧГ=");
				ДлиннаСуммы = СтрДлина(Строка(Формат(ВыборкаДатыОплаты.Сумма, "ЧДЦ=2; ЧГ=")));
				Сч = Сч + 1;
			КонецЦикла;
			ОбластьКорешок.Параметры.ДатаОплаты = СтрокаДатаОплаты;
			ОбластьСправка.Параметры.ДатаОплаты = СтрокаДатаОплаты;
		Иначе
			ОбластьСправка.Параметры.ДатаОплаты = Формат(Выборка.ДатаОплаты,"ДФ=dd.MM.yyyy");
			ОбластьКорешок.Параметры.ДатаОплаты = ОбластьСправка.Параметры.ДатаОплаты;
		КонецЕсли;	
		
		ОбластьСправка.Параметры.ДатаВыдачи = Формат(Выборка.ДатаВыдачи,"ДФ=dd.MM.yyyy");
		ОбластьКорешок.Параметры.ДатаВыдачи = ОбластьСправка.Параметры.ДатаВыдачи;
		
		ОбластьКорешок.Параметры.НомерКарты = СокрЛП(Выборка.НомерКарты);
	КонецЕсли;
	
	МассивОбластейТабДокумента = Новый Массив;
	МассивОбластейТабДокумента.Добавить(ОбластьЛинияОтрыва);
	МассивОбластейТабДокумента.Добавить(ОбластьСправка);

	ТабДокумент.Вывести(ОбластьКорешок);
	Если ТабДокумент.ПроверитьВывод(МассивОбластейТабДокумента) Тогда  
		ТабДокумент.Вывести(ОбластьЛинияОтрыва);
	Иначе
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьСправка);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСправкиПустой(СсылкаНаОбъект)

	ИмяМакетаПечати = "СправкаДляНалоговой_nЕА_7_11_824";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху = 7;
	ТабДокумент.ПолеСнизу = 7;
	ТабДокумент.ПолеСправа = 7;
	ТабДокумент.ПолеСлева = 7; 
    ТабДокумент.РазмерСтраницы = "A4";
	ТабДокумент.КлючПараметровПечати = ИмяМакетаПечати;
	
	Макет = ПолучитьМакет(ИмяМакетаПечати);
	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1");
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеПриказа = РевизитыПриказа_Справка2024();
	ДанныеДляЗаполнения.Вставить("ДатаПриказа", ДанныеПриказа.ДатаПриказа);
	ДанныеДляЗаполнения.Вставить("НомерПриказа", ДанныеПриказа.НомерПриказа);
	ОбластьСтраница.Параметры.Заполнить(ДанныеДляЗаполнения);
	ТабДокумент.Вывести(ОбластьСтраница);
	
	ОбластьСтраница = Макет.ПолучитьОбласть("Страница2");
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОбластьСтраница);
	
	Возврат ТабДокумент;	
	
КонецФункции

Функция ПечатьСправки(СсылкаНаОбъект)
	
	Перем ДокументВыводОшибки;
	
	// Проверка минимального заполнения для требований печати
	ДокументОшибки = Новый ТабличныйДокумент;
	ПроверкаЗаполненияДокумента_Справка2024_ЕА_7_11_824(СсылкаНаОбъект, ДокументОшибки);
	Если ДокументОшибки.ВысотаТаблицы > 0 Тогда
		ДокументВыводОшибки = Новый ТабличныйДокумент;
		ДокументВыводОшибки.Область(1,1).Текст = "Печатная форма не заполнена по причине:";
		ДокументВыводОшибки.Область(1,1).Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
		ДокументВыводОшибки.Область(2,1).Текст = "";
		ДокументВыводОшибки.Вывести(ДокументОшибки);
		
		Для Сч = 1 По ДокументОшибки.ВысотаТаблицы Цикл
			Область = ДокументОшибки.Область(Сч, 1, Сч, ДокументОшибки.ШиринаТаблицы);
			Область.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
		КонецЦикла;
		
	КонецЕсли;
	
	// Печать справки
	ИмяМакетаПечати = "СправкаДляНалоговой_nЕА_7_11_824";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху = 7;
	ТабДокумент.ПолеСнизу = 7;
	ТабДокумент.ПолеСправа = 7;
	ТабДокумент.ПолеСлева = 7;
    ТабДокумент.РазмерСтраницы = "A4";
	ТабДокумент.КлючПараметровПечати = ИмяМакетаПечати;
	
	Макет = ПолучитьМакет(ИмяМакетаПечати);
	ОбластьСтраница = Макет.ПолучитьОбласть("Страница1");
	
	ДанныеОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект);
	ДанныеОрганизации.Вставить("ОписаниеОрганизацииДляПечати", ОписаниеОрганизацииДляПечати_Справка2024(ДанныеОрганизации, СсылкаНаОбъект));
	
	ДанныеДляЗаполнения = ДанныеДляПечатиПоДокументу_Справка2024_ЕА_7_11_824_Страница1(СсылкаНаОбъект, ДанныеОрганизации);
	ОбластьСтраница.Параметры.Заполнить(ДанныеДляЗаполнения); 
	
	ТабДокумент.Вывести(ОбластьСтраница);
	
	ТабДокумент.Область("ЗонаQRКода").Картинка = ПолучитьQRКод(СсылкаНаОбъект);
	
	Если ДанныеДляЗаполнения.НалогоплательщикЯвляетсяПациентом = "0" Тогда
		ОбластьСтраница = Макет.ПолучитьОбласть("Страница2");
		ДанныеДляЗаполнения = ДанныеДляПечатиПоДокументу_Справка2024_ЕА_7_11_824_Страница2(СсылкаНаОбъект, ДанныеОрганизации);
	    ОбластьСтраница.Параметры.Заполнить(ДанныеДляЗаполнения);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(ОбластьСтраница);
	КонецЕсли;
	
	Если ТипЗнч(ДокументВыводОшибки) = Тип("ТабличныйДокумент") Тогда
		
		КоллекцияПечатныхФорм = Новый Массив;
		УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ДокументВыводОшибки,
				"СписокОшибок", "Список ошибок");
		УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ТабДокумент,
				"СправкаДляНалоговой", "Справка для налоговой");
		Возврат КоллекцияПечатныхФорм;
	Иначе
		Возврат ТабДокумент;
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляПечатиПоДокументу_Справка2024_ЕА_7_11_824_Страница1(СсылкаНаОбъект, ДанныеОрганизации)

	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляЗаполнения = Новый Структура;

	ДанныеПриказа = РевизитыПриказа_Справка2024();
	ДанныеДляЗаполнения.Вставить("ДатаПриказа", ДанныеПриказа.ДатаПриказа);
	ДанныеДляЗаполнения.Вставить("НомерПриказа", ДанныеПриказа.НомерПриказа);
	
	РазложитьСтроку(ДанныеДляЗаполнения, 12, "ИНН_", ДанныеОрганизации.ИНН);
	РазложитьСтроку(ДанныеДляЗаполнения, 9, "КПП_", ДанныеОрганизации.КПП);
	РазложитьСтроку(ДанныеДляЗаполнения, 160, "ДанныеОрганизации_", ДанныеОрганизации.ОписаниеОрганизацииДляПечати);	
	РазложитьСтроку(ДанныеДляЗаполнения, 3, "СТР_", "001");
	
	РазложитьСтроку(ДанныеДляЗаполнения, 12, "НомерСправки_", Формат(СсылкаНаОбъект.НомерСправки, "ЧГ="), Ложь);
	РазложитьСтроку(ДанныеДляЗаполнения, 3, "НомерКорректировки_", СсылкаНаОбъект.НомерКорректировки, Ложь);
	РазложитьСтроку(ДанныеДляЗаполнения, 4, "ОтчетныйГод_", Формат(СсылкаНаОбъект.ОтчетныйГод, "ЧГ="), Ложь);
	
	ДанныеДляЗаполнения.Вставить("НалогоплательщикЯвляетсяПациентом", ?(СсылкаНаОбъект.ПациентЯвляетсяНалогоплательщиком, "1", "0"));
	
	Если СсылкаНаОбъект.ПациентЯвляетсяНалогоплательщиком Тогда
		
		Клиент = СсылкаНаОбъект.Клиент;
		РазложитьСтроку(ДанныеДляЗаполнения, 36, "Фамилия_", Клиент.Фамилия);
		РазложитьСтроку(ДанныеДляЗаполнения, 36, "Имя_", Клиент.Имя);
		РазложитьСтроку(ДанныеДляЗаполнения, 36, "Отчество_", Клиент.Отчество);  
		
	Иначе
		СтруктураФИО = ОбщегоНазначенияБИТКлиентСервер.ФИОСтруктураИзСтроки(СсылкаНаОбъект.Налогоплательщик);
		
		РазложитьСтроку(ДанныеДляЗаполнения, 36, "Фамилия_",  СтруктураФИО.Фамилия);
		РазложитьСтроку(ДанныеДляЗаполнения, 36, "Имя_",	  СтруктураФИО.Имя);
		РазложитьСтроку(ДанныеДляЗаполнения, 36, "Отчество_", СтруктураФИО.Отчество);  
	КонецЕсли;
	
	// Сотрудник клиники
	Автор = СсылкаНаОбъект.Ответственный;
	Сотрудник = ?(ЗначениеЗаполнено(Автор.ФизическоеЛицо), Автор.ФизическоеЛицо, Автор.Сотрудник);
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтруктураФИО = Сотрудник;
		Иначе
			СтруктураФИО = ОбщегоНазначенияБИТКлиентСервер.ФИОСтруктураИзСтроки(Сотрудник.Наименование);
		КонецЕсли;
		
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Фамилия_",  СтруктураФИО.Фамилия);
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Имя_",	  СтруктураФИО.Имя);
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Отчество_", СтруктураФИО.Отчество);
	Иначе
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Фамилия_",  "");
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Имя_",	  "");
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Отчество_", "");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У автора документа не указан сотрудник. ФИО сотрудника клиники не заполнено автоматически в справке");
	КонецЕсли;
	
	РазложитьСтроку(ДанныеДляЗаполнения, 12, "ИНН_ФЛ_", СсылкаНаОбъект.ИНН);
	РазложитьДату(ДанныеДляЗаполнения, "ДатаРождения_", СсылкаНаОбъект.ДатаРождения);
	
	// ДУЛ
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ИНН) Тогда 
		РазложитьСтроку(ДанныеДляЗаполнения, 2, "КодВидаДокумента_", "");
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "СерияНомерДУЛ_", "");
		РазложитьДату(ДанныеДляЗаполнения, "ДатаВыдачиДУЛ_", "");
	Иначе 
		РазложитьСтроку(ДанныеДляЗаполнения, 2, "КодВидаДокумента_", СсылкаНаОбъект.ВидДУЛ);
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "СерияНомерДУЛ_", СокрЛП(СсылкаНаОбъект.СерияДУЛ) + " " + СокрЛП(СсылкаНаОбъект.НомерДУЛ));
		РазложитьДату(ДанныеДляЗаполнения, "ДатаВыдачиДУЛ_", СсылкаНаОбъект.ДатаВыдачиДУЛ);	
	КонецЕсли;
	
	// Сумма по коду 1
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Сумма) Тогда
		Сумма1 = Формат(Цел(СсылкаНаОбъект.Сумма), "ЧДЦ=0; ЧГ=");
		Копейки1 = Прав(Формат(СсылкаНаОбъект.Сумма - Цел(СсылкаНаОбъект.Сумма), "ЧДЦ=2; ЧН=00"), 2);
	Иначе
		Сумма1 = "";
		Копейки1 = "";
	КонецЕсли;
	РазложитьСтроку(ДанныеДляЗаполнения, 13, "СуммаПоКоду1_", Сумма1, Ложь); 
	РазложитьСтроку(ДанныеДляЗаполнения, 2, "СуммаПоКоду1_Копейки_", Копейки1);
	
	// Сумма по коду 2
	Если ЗначениеЗаполнено(СсылкаНаОбъект.СуммаПоКоду2) Тогда
		Сумма2 = Формат(Цел(СсылкаНаОбъект.СуммаПоКоду2), "ЧДЦ=0; ЧГ=");
		Копейки2 = Прав(Формат(СсылкаНаОбъект.СуммаПоКоду2 - Цел(СсылкаНаОбъект.СуммаПоКоду2), "ЧДЦ=2; ЧН=00"), 2); 
	Иначе
		Сумма2 = "";
		Копейки2 = "";
	КонецЕсли;
	РазложитьСтроку(ДанныеДляЗаполнения, 13, "СуммаПоКоду2_", Сумма2, Ложь);
	РазложитьСтроку(ДанныеДляЗаполнения, 2, "СуммаПоКоду2_Копейки_", Копейки2);
	
	РазложитьДату(ДанныеДляЗаполнения, "Дата_", СсылкаНаОбъект.ДатаВыдачи);
	РазложитьСтроку(ДанныеДляЗаполнения, 3, "ВсегоСтраниц_", ?(СсылкаНаОбъект.ПациентЯвляетсяНалогоплательщиком, "1", "2"), Ложь); 
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ДанныеДляПечатиПоДокументу_Справка2024_ЕА_7_11_824_Страница2(СсылкаНаОбъект, ДанныеОрганизации)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляЗаполнения = Новый Структура;

	РазложитьСтроку(ДанныеДляЗаполнения, 12, "ИНН_", ДанныеОрганизации.ИНН);
	РазложитьСтроку(ДанныеДляЗаполнения, 9, "КПП_", ДанныеОрганизации.КПП);	
	РазложитьСтроку(ДанныеДляЗаполнения, 3, "СТР_", "002"); 
			
	Клиент = СсылкаНаОбъект.Клиент;
	РазложитьСтроку(ДанныеДляЗаполнения, 36, "Фамилия_", Клиент.Фамилия);
	РазложитьСтроку(ДанныеДляЗаполнения, 36, "Имя_", Клиент.Имя);
	РазложитьСтроку(ДанныеДляЗаполнения, 36, "Отчество_", Клиент.Отчество);  
		
	РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Фамилия_", Клиент.Фамилия);
	РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Имя_", Клиент.Имя);
	РазложитьСтроку(ДанныеДляЗаполнения, 20, "ФИО_Отчество_", Клиент.Отчество);  
			
	РазложитьСтроку(ДанныеДляЗаполнения, 12, "ИНН_ФЛ_", Клиент.ИНН);
	РазложитьДату(ДанныеДляЗаполнения, "ДатаРождения_", Клиент.ДатаРождения);
	
	Если ЗначениеЗаполнено(Клиент.ИНН) Тогда 
		РазложитьСтроку(ДанныеДляЗаполнения, 2, "КодВидаДокумента_", "");
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "СерияНомерДУЛ_", "");
		РазложитьДату(ДанныеДляЗаполнения, "ДатаВыдачиДУЛ_", "");
	Иначе
		ПаспортныеДанные = ПолучитьПаспортныеДанныеКлиента(Клиент, СсылкаНаОбъект.ДатаВыдачи);
	
		РазложитьСтроку(ДанныеДляЗаполнения, 2, "КодВидаДокумента_", ПаспортныеДанные.ВидДУЛ);
		РазложитьСтроку(ДанныеДляЗаполнения, 20, "СерияНомерДУЛ_", СокрЛП(ПаспортныеДанные.СерияДУЛ) + " " + СокрЛП(ПаспортныеДанные.НомерДУЛ));
		РазложитьДату(ДанныеДляЗаполнения, "ДатаВыдачиДУЛ_", ПаспортныеДанные.ДатаВыдачиДУЛ);
	КонецЕсли;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Процедура Справка2024_ЕА_7_11_824_ТрактовкаПункта7_1(ВыравниваниеПоЛевомуКраю)
	
	// Трактуем так, что конкретные примеры в пунктах 14 и 19 приоритетнее тупой формулировки в 7.1.
	// (чтобы сделать 7.1 приоритетнее, нужно отменить эту процедуру, например, расширением).
	
	ВыравниваниеПоЛевомуКраю = Истина; // Всегда прижимаем к левому краю.
	
КонецПроцедуры

Процедура РазложитьСтроку(ДанныеДляЗаполнения, ДлинаСтроки, ОбщееИмя, СтрокаДанных, Знач ВыравниваниеПоЛевомуКраю = Истина) 
	
	// Противоречие пункта 7.1 с 14 и 19 в приказе. 
	// Вынесено в отдельную процедуру для расширений конфигурации (когда-то же ФНС разъяснит конкретно).
	Справка2024_ЕА_7_11_824_ТрактовкаПункта7_1(ВыравниваниеПоЛевомуКраю);
	
	
	СтрокаВрем = Лев(СтрокаДанных, ДлинаСтроки);
	ИндексПоследнейЯчейки = СтрДлина(СтрокаВрем);
	
	ИнтервалЗначения = Новый Структура("Начало, Конец");
	ИнтервалПрочеков = Новый Структура("Начало, Конец");
	
	Если ВыравниваниеПоЛевомуКраю Тогда
		ИнтервалЗначения.Начало = 1;
		ИнтервалЗначения.Конец = ИндексПоследнейЯчейки;
		ИнтервалПрочеков.Начало = ИндексПоследнейЯчейки + 1;
		ИнтервалПрочеков.Конец = ДлинаСтроки;
	Иначе
		ИнтервалЗначения.Начало = ДлинаСтроки - ИндексПоследнейЯчейки + 1;
		ИнтервалЗначения.Конец = ДлинаСтроки;
		ИнтервалПрочеков.Начало = 1;
		ИнтервалПрочеков.Конец = ИнтервалЗначения.Начало - 1;
	КонецЕсли;
	
	// Вывод в ячейки
	
	// Вывод значения
	Поз = 1;
	Для Сч = ИнтервалЗначения.Начало По ИнтервалЗначения.Конец Цикл
		ИмяПараметра = ОбщееИмя + Сч;
		ДанныеДляЗаполнения.Вставить(ИмяПараметра);
		ДанныеДляЗаполнения[ИмяПараметра] = ВРег(Сред(СтрокаВрем, Поз, 1));
		Поз = Поз + 1;
	КонецЦикла;
	
	// Забивка остатка прочерками.
	Для Сч = ИнтервалПрочеков.Начало По ИнтервалПрочеков.Конец Цикл
		ИмяПараметра = ОбщееИмя + Сч;
		ДанныеДляЗаполнения.Вставить(ИмяПараметра);
		ДанныеДляЗаполнения[ИмяПараметра] = "-";
	КонецЦикла;
	
КонецПроцедуры 

Процедура РазложитьДату(ДанныеДляЗаполнения, ОбщееИмя, Дата)
	
	Если ЗначениеЗаполнено(Дата) Тогда
		ВремДата = Формат(Дата, "ДФ=dd.MM.yyyy");
		
		РазбивкаДаты = СтрРазделить(ВремДата, ".");
		РазложитьСтроку(ДанныеДляЗаполнения, 2, ОбщееИмя + "День_", РазбивкаДаты[0]);
		РазложитьСтроку(ДанныеДляЗаполнения, 2, ОбщееИмя + "Месяц_", РазбивкаДаты[1]);
		РазложитьСтроку(ДанныеДляЗаполнения, 4, ОбщееИмя + "Год_", РазбивкаДаты[2]);
	Иначе
		РазложитьСтроку(ДанныеДляЗаполнения, 2, ОбщееИмя + "День_", "");
		РазложитьСтроку(ДанныеДляЗаполнения, 2, ОбщееИмя + "Месяц_", "");
		РазложитьСтроку(ДанныеДляЗаполнения, 4, ОбщееИмя + "Год_", "");	
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьQRКод(СсылкаНаОбъект)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("ДанныеQRКода");
	
	Запись.ЗаписатьАтрибут("СуммаПродажиУслугПоКоду1", Формат(СсылкаНаОбъект.Сумма, "ЧДЦ=2; ЧГ=")); 
	Запись.ЗаписатьАтрибут("СуммаПродажиУслугПоКоду2", Формат(СсылкаНаОбъект.СуммаПоКоду2, "ЧДЦ=2; ЧГ="));
	
	Запись.ЗаписатьКонецЭлемента();
	СтрокаQRКода = Запись.Закрыть(); 
	
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(СтрокаQRКода, 0, 190);
	КартинкаQRКода = Новый Картинка(ДанныеQRКода);
	
	Возврат КартинкаQRКода;
	
КонецФункции

Процедура ПроверкаЗаполненияДокумента_Справка2024_ЕА_7_11_824(СсылкаНаОбъект, ДокументОшибки)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект.Сумма + СсылкаНаОбъект.СуммаПоКоду2) Тогда
		ПроверкаЗаполненияДокумента_ДобавитьСообщениеОшибки(ДокументОшибки, "Не заполнена сумма справки", 1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект.ДатаРождения) Тогда
		ПроверкаЗаполненияДокумента_ДобавитьСообщениеОшибки(ДокументОшибки, "Не заполнена дата рождения налогоплательщика", 1);
	КонецЕсли;
	
	// ИНН и ДУЛ налогоплательщика.
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект.ИНН) Тогда
		
		ПроверкаЗаполненияДокумента_ДобавитьСообщениеОшибки(ДокументОшибки, "Не заполнен ИНН налогоплательщика");
		
		ПоляПаспортныхДанных = Новый Соответствие;
		ПоляПаспортныхДанных.Вставить("ВидДУЛ", " вид документа, удостоверяющего личность ");
		// ПоляПаспортныхДанных.Вставить("СерияДУЛ", "а серия документа, удостоверяющего личность ");
		ПоляПаспортныхДанных.Вставить("НомерДУЛ", " номер документа, удостоверяющего личность  ");
		ПоляПаспортныхДанных.Вставить("ДатаВыдачиДУЛ", "а дата выдачи документа, удостоверяющего личность ");
		
		ДУЛ_Корректен = Истина;
		Для Каждого КлючИЗначение Из ПоляПаспортныхДанных Цикл
			Если Не ЗначениеЗаполнено(СсылкаНаОбъект[КлючИЗначение.Ключ]) Тогда
				ПроверкаЗаполненияДокумента_ДобавитьСообщениеОшибки(ДокументОшибки, "Не заполнен" + КлючИЗначение.Значение + "налогоплательщика");
				ДУЛ_Корректен = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ДУЛ_Корректен Тогда
			ДокументОшибки.Очистить();
		Иначе
			ПроверкаЗаполненияДокумента_ДобавитьСообщениеОшибки(ДокументОшибки, "Заполните либо ИНН налогоплательщика, либо его документ удостоверения личности", 2);
		КонецЕсли;
	КонецЕсли;
	
	// Проверки для второй страницы справки (налогоплательщик не пациент)
	Если Не СсылкаНаОбъект.ПациентЯвляетсяНалогоплательщиком Тогда
		Если ЗначениеЗаполнено(СсылкаНаОбъект.Клиент.ИНН) Тогда
			Если СтрДлина(СсылкаНаОбъект.Клиент.ИНН) <> 12 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Длина ИНН в карточке пациента не равна 12. Возможно, указано ошибочное значение!");
			КонецЕсли;
		Иначе
			// Проверяем, есть ли у пациента паспортные данные, т.к. будет вторая страница документа, куда отдельно данные пациента пойдут.
			ПаспДанные = РегистрыСведений.ПаспортныеДанные.ПолучитьПоследнее(СсылкаНаОбъект.ДатаВыдачи, Новый Структура("ФизЛицо", СсылкаНаОбъект.Клиент));
			Если Не ЗначениеЗаполнено(ПаспДанные.ДокументВид)
				И Не ЗначениеЗаполнено(ПаспДанные.ДокументНомер)
			Тогда
				ПроверкаЗаполненияДокумента_ДобавитьСообщениеОшибки(ДокументОшибки, 
																	СтрШаблон("У пациента %1 не заполнены в карточке ни ИНН, ни паспортные данные (документ достоверяющий личность).", СсылкаНаОбъект.Клиент),
																	1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияДокумента_ДобавитьСообщениеОшибки(ДокументОшибки, Сообщение, ОтступПосле = 0)
	
	ДокументОшибки.Область(ДокументОшибки.ВысотаТаблицы + 1,1).Текст = Сообщение;
	Если ОтступПосле <> 0 Тогда
		ДокументОшибки.Область(ДокументОшибки.ВысотаТаблицы + 1,1,ДокументОшибки.ВысотаТаблицы + ОтступПосле).Текст = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

Функция ПолучитьСоответствиеВидДУЛКод()

	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03, "03");
	Соответствие.Вставить(Справочники.ДокументыУдостоверяющиеЛичность.ИМНС10, "10");
	Соответствие.Вставить(Справочники.ДокументыУдостоверяющиеЛичность.ИМНС14, "14");
	Соответствие.Вставить(Справочники.ДокументыУдостоверяющиеЛичность.ИМНС15, "15");
	Соответствие.Вставить(Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21, "21");
	Соответствие.Вставить(Справочники.ДокументыУдостоверяющиеЛичность.ИМНС91, "91");
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти  