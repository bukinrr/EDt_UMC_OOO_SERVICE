#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьТаблицыДокументаТоварыНаСкладахРасход(СтруктураШапкиДокумента, ТаблицаПоТоварам) 

	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Склад"                   			 ,"СкладОтправитель");
	СтруктураПолей.Вставить("СкладПолучатель"                    ,"СкладПолучатель");
	СтруктураПолей.Вставить("Количество"                         , "Количество * Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		 , "СерияНоменклатуры");
	
	РезультатЗапросаПоТоварам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	Для Каждого СтрокаТовары из ТаблицаПоТоварам Цикл
		Если не ЗначениеЗаполнено(СтрокаТовары.Склад) Тогда
			СтрокаТовары.Склад = СкладОтправитель;
		КонецЕсли;
		Если не ЗначениеЗаполнено(СтрокаТовары.СкладПолучатель) Тогда
			СтрокаТовары.СкладПолучатель = СкладПолучатель;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Процедура ПодготовитьТаблицыДокументаТоварыНаСкладахПриход(СтруктураШапкиДокумента, ТаблицаПоТоварам) 

	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Склад"                    			 , "СкладПолучатель");
	СтруктураПолей.Вставить("Количество"                         , "Количество * Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		 , "СерияНоменклатуры");
	
	РезультатЗапросаПоТоварам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	Для Каждого СтрокаТовары из ТаблицаПоТоварам Цикл
		Если не ЗначениеЗаполнено(СтрокаТовары.Склад) Тогда
			СтрокаТовары.Склад = СкладПолучатель;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамРасход, ТаблицаПоТоварамПриход, Отказ, Заголовок)
	
	Перем ТабДвижений;
	
    ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварамРасход, Отказ, Заголовок); 
	ПартионныйУчет.пуДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(), Отказ,,,,Истина);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) 
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыНаСкладах(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИмяТабличнойЧасти = "Товары";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, ЕдиницаИзмерения");

	// Теперь позовем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьСовпаденияФилиалаИФилиалаСклада(Отказ)
	
	СообщениеПользователю = ОграничениеДоступаНаУровнеЗаписей.ТребуетсяПредупреждениеНесоответствияСкладаИФилиала(СкладОтправитель, Филиал);
	Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
		СообщениеПользователю = ОграничениеДоступаНаУровнеЗаписей.ТребуетсяПредупреждениеНесоответствияСкладаИФилиала(СкладПолучатель, Филиал);
		Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварамРасход, ТаблицаПоТоварамПриход;
	Сообщ = новый СписокЗначений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа'");
	Заголовок = Заголовок + " """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	
	Если Товары.Количество() > 0 Тогда     
		СтруктураОбязательныхПолей.Вставить("СкладОтправитель");
		СтруктураОбязательныхПолей.Вставить("СкладПолучатель");
		
	КонецЕсли;

	ПроверитьСовпаденияФилиалаИФилиалаСклада(Отказ);
	
	// Теперь позовем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПодготовитьТаблицыДокументаТоварыНаСкладахРасход(СтруктураШапкиДокумента, ТаблицаПоТоварамРасход);
	ПодготовитьТаблицыДокументаТоварыНаСкладахПриход(СтруктураШапкиДокумента, ТаблицаПоТоварамПриход);
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТоварыНаСкладах(ТаблицаПоТоварамРасход, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамРасход, ТаблицаПоТоварамПриход, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры
                                                                     
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		Или ТипЗнч(Основание) = Тип("ДокументСсылка.ОприходованиеТоваров")
		Или ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет")
	Тогда
		СкладОтправитель = Основание.Склад;
		Товары.Загрузить(Основание.Товары.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
