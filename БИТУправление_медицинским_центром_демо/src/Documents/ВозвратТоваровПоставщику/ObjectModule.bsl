#Область ПрограммныйИнтерфейс

// Возвращает структуру обязательных / уникальных реквизитов документа.
// Возвращаемая структура содержит строковые идентификаторы реквизитов или вложенные структуры для табличных частей.
// Для реквизита значение структуры содержит число 1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный.
//
// Возвращаемое значение:
//  Структура.
Функция ПолучитьОбязательныеРеквизиты() Экспорт
	// Обязательные поля таблицы товаров.
	ОбязательныеТовары=Новый Структура();
	ОбязательныеТовары.Вставить("Номенклатура",3);
	ОбязательныеТовары.Вставить("Количество",1);
	ОбязательныеТовары.Вставить("ЕдиницаИзмерения",3);

	// Обязательные реквизиты документа.
	ОбязательныеРеквизиты=Новый Структура();
	ОбязательныеРеквизиты.Вставить("Склад",1);
	ОбязательныеРеквизиты.Вставить("Контрагент",1);
	ОбязательныеРеквизиты.Вставить("Товары",ОбязательныеТовары);
	
	Возврат ОбязательныеРеквизиты;
КонецФункции

// Дополняет табличную часть "Товары" данными о товарах из указанного документа поступления.
// Параметры:
//   ДокументПоступления - Документы.ДокументПоступления.
Процедура ДополнитьТоварыИзПоступления(ДокументПоступления) Экспорт
	
	Для Каждого СтрокаПоступления Из ДокументПоступления.Товары Цикл
		СтрокаТовары = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаПоступления);
	КонецЦикла;
	
	СуммаДокумента = Товары.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем ТаблицаПоТоварам;
	
	// Заголовок для сообщений об ошибках проведения.
	ЗаголовокПроведениеДокумента = НСтр("ru='Проведение документа'");
	Заголовок = ЗаголовокПроведениеДокумента + " """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент");
	
	Если Товары.Количество()>0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, "Товары");	
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок); 
		ПартионныйУчет.пуДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(), Отказ);
		
		Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Сумма = СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Контрагент	= Основание.Контрагент;
		Склад 		= Основание.Склад;
		Филиал		= Основание.Филиал;
		
		ДополнитьТоварыИзПоступления(Основание);
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыОбеспеченияПроведенияДокумента

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) 
	
	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		 , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВидНоменклатуры"                    , "Номенклатура.ВидНоменклатуры");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Сумма"                              , "Сумма");
	СтруктураПолей.Вставить("Количество"                         , "Количество * Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("НомерСтроки"                        , "НомерСтроки");
	
	РезультатЗапросаПоТоварам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаПоТоварам.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаПоТоварам.ЗаполнитьЗначения(Склад,"Склад");
	
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяТабличнойЧасти = "Товары")

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, ЕдиницаИзмерения, Сумма");
	                                                        
	// Общая процедура проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	РаботаСДокументамиСервер.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) 
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрамУпр()

#КонецОбласти

#КонецОбласти
