#Область РазделОписанияПеременных

&НаКлиенте
Перем мТекущаяДатаДокумента Экспорт; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера.

&НаКлиенте
Перем мИзмененыНастройкиПодбора; // По-умолчанию = Неопределено.

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);

	ПоказыватьАртикул = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоказыватьАртикул" , ТекущаяДата());
	Элементы.ТоварыАртикул.Видимость = ПоказыватьАртикул;
	Элементы.ТоварыХарактеристикаНоменклатуры.Видимость = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
	
	Если Объект.Товары.Количество() = 0
		И Объект.Услуги.Количество() <> 0 
	Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаУслуги;
	КонецЕсли;
	
	РаботаСФормамиСервер.НастройкаПодбораПриСоздании(ЭтаФорма, Ложь);

	РаботаСФормамиСервер.УстановитьВидимостьКнопокЗагрузитьИзТСД(Элементы.ТоварыЗагрузитьДанныеИзТСД);
	
	Если Объект.Ссылка.Пустая() ТОгда
		// ИнтеграцияМДЛП
		СформироватьТекстУведомленияМДЛП();
		// Конец ИнтеграцияМДЛП
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущаяДатаДокумента = Объект.Дата;
	
	Если Параметры.Ключ.Пустая() Тогда
		ВхДокДата = ТекущаяДата();
		Модифицированность = ЛОЖЬ;
	КонецЕсли;
	
	ОбновитьДолги();
	ПриИзмененииВариантПолучателяЗатрат();
	
	Если Истина// ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ВО"
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("ТерминалСбораДанных");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);

	КонецЕсли;
	
	РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма);
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления, Элементы.ТоварыПредыдущаяЦена, Элементы.УслугиПредыдущаяЦена);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления);
	
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект.Ссылка, Ложь, ЭтаФорма);
	
	РаботаСДокументамиСервер.ПроверитьПринадлежностьСкладаФилиалу(Объект.Ссылка);
	
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьДолги();
	АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	ПоддерживаемыеТипыВО.Добавить("ТерминалСбораДанных");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиПодбора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник) 
	Перем Действие;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Действие", Действие);
		
		Если Действие = "ПодборТовара" ИЛИ Действие = "ПодборУслуги" Тогда
			
			ДанныеНоменклатуры = РаботаСТорговымОборудованиемКлиент.ДанныеНоменклатуры();
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, ЗначениеВыбора);
			СШКНоменклатура(ДанныеНоменклатуры, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияМДЛП
	Если (ИмяСобытия = "ИзменениеСостоянияМДЛП"
	  Или ИмяСобытия = "Запись_УведомлениеОПриемкеМДЛП"
	  Или ИмяСобытия = "Запись_УведомлениеОПеремещенииМДЛП")
	   И Параметр.Основание = Объект.Ссылка Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	// Конец ИнтеграцияМДЛП
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ.

&НаКлиенте
Процедура КнопкаПодборПриНажатии(Команда)
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаТовары Тогда
		ПодборПометка = РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Товары", "Материал");	
	Иначе
		ПодборПометка = РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Услуги", "Услуга");
	КонецЕсли;
	
	Элементы.УслугиПодбор.Пометка = ПодборПометка;
	Элементы.ТоварыПодбор.Пометка = ПодборПометка;
	
	Если ПодборПометка Тогда
		ПодключитьОбработчикОжидания("ОбновитьСписокПодбора", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ.

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ВызватьОбщийМодульПроверитьНомерДокумента(мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Объект.Дата;
	
	АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления);
КонецПроцедуры

&НаСервере
Процедура ВызватьОбщийМодульПроверитьНомерДокумента(ДатаДок)
	
	РаботаСДиалогамиСервер.ПроверитьНомерДокумента(ЭтаФорма, ДатаДок);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьДолги();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЦеныПредыдущегоПоступленияПриИзменении(Элемент)
	АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления, Элементы.ТоварыПредыдущаяЦена, Элементы.УслугиПредыдущаяЦена);
КонецПроцедуры

&НаКлиенте
Процедура ВариантПолучателяЗатратПриИзменении(Элемент)

	ПриИзмененииВариантПолучателяЗатрат();
	
	Если Объект.ВариантПолучателяЗатрат = ПредопределенноеЗначение("Перечисление.ВариантыПолучателяПоступившихЗатрат.НоменклатураЗатраты") Тогда
		Для Каждого СтрокаУслуги Из Объект.Услуги Цикл 
			Если ЗначениеЗаполнено(СтрокаУслуги.НоменклатураПолучатель) Тогда 
				СтрокаУслуги.НоменклатураПолучатель = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТОВАРЫ" И ЕГО РЕКВИЗИТО0.

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		РасчитатьСуммуДокумента();
		АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент, НомерСтроки = Неопределено)
	ТоварыРеквизитПриИзменении("Товары.Номенклатура", НомерСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.ХарактеристикаНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.ЕдиницаИзмерения");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.Количество");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.Цена");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ТоварыРеквизитПриИзменении("Товары.Сумма");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРеквизитПриИзменении(ИмяРеквизита, НомерСтроки = Неопределено)
	ОбработкаРеквизитаУпр(ИмяРеквизита,?(НомерСтроки = Неопределено, Элементы.Товары.ТекущиеДанные, Объект.Товары[НомерСтроки]),ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "УСЛУГИ" И ЕГО РЕКВИЗИТОВ.

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент, НомерСтроки = Неопределено)
	УслугиРеквизитПриИзменении("Услуги.Номенклатура",НомерСтроки)
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	УслугиРеквизитПриИзменении("Услуги.Количество");
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	УслугиРеквизитПриИзменении("Услуги.Цена");
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	УслугиРеквизитПриИзменении("Услуги.Сумма");
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтатьяЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено и 
		ЗначениеЗаполнено(ТекущиеДанные.СтатьяЗатрат) и
		не ЗначениеЗаполнено(ТекущиеДанные.КатегорияВыработки)
		Тогда
		
		ТекущиеДанные.КатегорияВыработки = ДопСерверныеФункции.ПолучитьРеквизит(ТекущиеДанные.СтатьяЗатрат, "ОсновнойПолучательЗатрат");
		
	КонецЕсли;                                               
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		РасчитатьСуммуДокумента();
		АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
ПРоцедура УслугиРеквизитПриИзменении(ИмяРеквизита, НомерСтроки = Неопределено)
	ОбработкаРеквизитаУпр(ИмяРеквизита,?(НомерСтроки = Неопределено, Элементы.Услуги.ТекущиеДанные, Объект.Услуги[НомерСтроки]),ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ПРОЧИХ СОБЫТИЙ.

&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если	ТекущаяСтраница = Элементы.ГруппаТовары
		Или	ТекущаяСтраница = Элементы.ГруппаУслуги
	Тогда
		Если 	Элементы.ТоварыПодбор.Пометка
			Или	Элементы.УслугиПодбор.Пометка
		Тогда
			Если ТекущаяСтраница = Элементы.ГруппаТовары Тогда 
				РаботаСФормамиКлиент.ОбновитьОтборПодбора(ЭтаФорма, "Товары", "Материал");
			ИначеЕсли ТекущаяСтраница = Элементы.ГруппаУслуги Тогда
				РаботаСФормамиКлиент.ОбновитьОтборПодбора(ЭтаФорма, "Услуги", "Услуга", "Набор");
			КонецЕсли;
			ПодключитьОбработчикОжидания("ОбновитьСписокПодбора", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодбора()
	РаботаСФормамиКлиент.ОбновитьДинамическийСписокПринудительно(ЭтаФорма.РеквизитСписокПодбор);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.

&НаСервере
Процедура ОбновитьДолги()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, Контрагент = &КонтрАг) КАК ВзаиморасчетыСКонтрагентамиОстатки";
		
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());			   
		Запрос.УстановитьПараметр("КонтрАг", Объект.Контрагент);
		Рез = Запрос.Выполнить().Выгрузить();				   
		пДолг = Рез[0].Остаток;
		
		Валюта = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
		Если пДолг = 0 ИЛИ Не ЗначениеЗаполнено(пДолг) Тогда
			Элементы.Долг.Заголовок = нСтр("ru='С контрагентом нет долгов по взаиморасчетам'");	
		ИначеЕсли пДолг > 0 Тогда
			ТекстЗадолженность = НСтр("ru='Долг контрагента: %1 %2'");
			ТекстЗадолженность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗадолженность, Строка(пДолг), Валюта); 
			Элементы.Долг.Заголовок = ТекстЗадолженность;
		Иначе
			ТекстЗадолженность = НСтр("ru='Долг фирмы перед контрагентом: %1 %2'");
			ТекстЗадолженность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗадолженность, Строка(-пДолг), Валюта); 
			Элементы.Долг.Заголовок = ТекстЗадолженность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДолгНажатие(Команда)
	ОбновитьДолги();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

// Расчитывает сумму документа.
//
&НаКлиенте
Процедура РасчитатьСуммуДокумента() 
	РасчитатьСуммуДокументаСервер();
КонецПроцедуры

&НаСервере
Процедура РасчитатьСуммуДокументаСервер()
	РаботаСДокументамиСервер.РасчитатьСуммуДокумента(Объект);	
КонецПроцедуры

// Обработка изменения реквизитов документа.
// Параметры
//  Имя			– Строка			– Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ЭтаФорма	– Форма				– Ссылка на форму документа. 
//									  Если значение неопределено, производится программная обработка реквизитов.
//  ТекСтрока	– СтрокаТабличнойЧасти – Ссылка на строку табличной части документа, реквизит которой обрабатывается.
//										 Имеет смысл только для табличных частей документов.
//  ДопПараметры– Стркутура			– Структура, содержащая дополнительные параметры обработки реквизита.
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
&НаКлиенте
Функция ОбработкаРеквизитаУпр(Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено)
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// ОБРАБОТКА РЕКВИЗИТОВ ДОКУМЕНТА
	Если Имя="Склад" Тогда
		
	// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ"
	ИначеЕсли Имя="Товары.Номенклатура" Тогда
		
		ДопПараметры.Вставить("ИспользоватьЕдиницуТоваров",Истина);
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			ТекСтрока.Цена = ПолучитьЦенуПозиции(Объект.Контрагент, ТекСтрока.Номенклатура,ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения);
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		Иначе 	
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		КонецЕсли;
		
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Товары.ХарактеристикаНоменклатуры" Тогда
		
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			ТекСтрока.Цена = ПолучитьЦенуПозиции(Объект.Контрагент, ТекСтрока.Номенклатура,ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения);
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		Иначе 
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		КонецЕсли;
		
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Товары.ЕдиницаИзмерения" Тогда
		
		ТекСтрока.Коэффициент = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.ЕдиницаИзмерения,"Коэффициент");
		Если Не ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			ТекСтрока.Цена = ПолучитьЦенуПозиции(Объект.Контрагент, ТекСтрока.Номенклатура,ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения);
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		Иначе
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		КонецЕсли;
		
		РасчитатьСуммуДокумента();           
		
	ИначеЕсли Имя="Товары.Количество" Тогда
		
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,допПараметры);
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Товары.Цена" Тогда
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Товары.Сумма" Тогда
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Услуги.Номенклатура" Тогда
		
		Если ТекСтрока.Количество = 0 Тогда ТекСтрока.Количество = 1; КонецЕсли; 
		Если Не ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			ТекСтрока.Цена = ПолучитьЦенуПозиции(Объект.Контрагент, ТекСтрока.Номенклатура, Неопределено, Неопределено);
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		Иначе
			ОбработкаРеквизитаУпр("Товары.Цена", ТекСтрока, ЭтаФорма);
		КонецЕсли;
		
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Услуги.Цена" Тогда
		
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,допПараметры);
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Услуги.Количество" Тогда
		
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,допПараметры);
		РасчитатьСуммуДокумента();
		
	ИначеЕсли Имя="Услуги.Сумма" Тогда
		
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,допПараметры);
		РасчитатьСуммуДокумента();
		
		
	Иначе 
		Возврат РаботаСДокументамиКлиент.
		РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
	КонецЕсли;
	
КонецФункции // ОбработкаРеквизита()

&НаСервереБезКонтекста
Функция ПолучитьЦенуПозиции(Контрагент, Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураЦен = Ценообразование.ПолучитьЦену(Контрагент, Номенклатура, , ХарактеристикаНоменклатуры, ЕдиницаИзмерения);
	
	// Если цена не найдена, выполняется поиск цены, общей для поставщиков
	Если СтруктураЦен.Цена = 0 Тогда
		СтруктураЦен = Ценообразование.ПолучитьЦену(Неопределено, Номенклатура, , ХарактеристикаНоменклатуры, ЕдиницаИзмерения);	
	КонецЕсли;
	
	Возврат СтруктураЦен.Цена;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления, КолонкаПредЦенаТовары = Неопределено, КолонкаПредЦенаУслуги = Неопределено, ДанныеСтроки = Неопределено)
	
	Если КолонкаПредЦенаТовары <> Неопределено Тогда
		КолонкаПредЦенаТовары.Видимость = ПоказыватьЦеныПредыдущегоПоступления;
	КонецЕсли;
	Если КолонкаПредЦенаУслуги <> Неопределено Тогда
		КолонкаПредЦенаУслуги.Видимость = ПоказыватьЦеныПредыдущегоПоступления;
	КонецЕсли;
	
	// Если предыдущие цены не видно, то и актуализировать их не требуется
	Если НЕ ПоказыватьЦеныПредыдущегоПоступления Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки = Неопределено Тогда
		ДанныеТЧ = Новый Массив();
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			ДанныеТЧ.Добавить(Новый Структура("ИмяТЧ, Номенклатура, ЕдиницаИзмерения", "Товары", СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения));	
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
			ДанныеТЧ.Добавить(Новый Структура("ИмяТЧ, Номенклатура, ЕдиницаИзмерения", "Услуги", СтрокаТЧ.Номенклатура, ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка")));	
		КонецЦикла;
		
		ОбновлениеВсехТЧ	= Истина;
	Иначе
		ДанныеТЧ			= Неопределено;
		ОбновлениеВсехТЧ	= Ложь;
	КонецЕсли;
	
	Данные = Новый Структура("ОбновлениеВсехТЧ, ДанныеТЧ, ДанныеСтроки, Ссылка, ДатаДокумента", ОбновлениеВсехТЧ, ДанныеТЧ, ДанныеСтроки, Объект.Ссылка, Объект.Дата);
	
	СтарыеДанные = ПолучитьПредыдущиеЦены(Данные);
	
	Если СтарыеДанные <> Неопределено Тогда
		ЗаполнитьПредыдущиеЦеныВТЧ(Объект, "Товары", СтарыеДанные);
		ЗаполнитьПредыдущиеЦеныВТЧ(Объект, "Услуги", СтарыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредыдущиеЦены(Данные)
	
	ОбщаяТЧ = Новый ТаблицаЗначений();
	КС = Новый КвалификаторыСтроки(32);
	ОбщаяТЧ.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка", , КС));
	ОбщаяТЧ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбщаяТЧ.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	Если Данные.ОбновлениеВсехТЧ Тогда
		// Значит надо актуализировать цены всех позиций

		Для Каждого СтрокаМассива Из Данные.ДанныеТЧ Цикл
			СтрокаОбщихДанных = ОбщаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОбщихДанных, СтрокаМассива);
		КонецЦикла;
	Иначе
		// Значит изменилась конкретная строка
		СтрокаОбщихДанных = ОбщаяТЧ.Добавить();
		СтрокаОбщихДанных.ИмяТЧ				= Данные.ДанныеСтроки.ИмяТЧ;
		СтрокаОбщихДанных.Номенклатура		= Данные.ДанныеСтроки.Номенклатура;	
		Если Данные.ДанныеСтроки.ИмяТЧ = "Товары" Тогда
			СтрокаОбщихДанных.ЕдиницаИзмерения	= Данные.ДанныеСтроки.ЕдиницыИзмерения;	
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПолучитьПредыдущиеЦеныОбщейТЧ(ОбщаяТЧ, Данные.Ссылка, Данные.ДатаДокумента);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредыдущиеЦеныОбщейТЧ(ОбщаяТЧ, Ссылка, ДатаДокумента)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбщаяТЧ.Номенклатура КАК Номенклатура,
		|	ОбщаяТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОбщаяТЧ.ИмяТЧ КАК ИмяТЧ
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	&ОбщаяТЧ КАК ОбщаяТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщаяТЧ.Номенклатура КАК Номенклатура,
		|	ОбщаяТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОбщаяТЧ.ИмяТЧ КАК ИмяТЧ,
		|	ВЫБОР
		|		КОГДА ЕдиницыИзмерения.Коэффициент = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ ЕдиницыИзмерения.Коэффициент
		|	КОНЕЦ КАК КоэффициентТекущий
		|ПОМЕСТИТЬ ДанныеТЧ
		|ИЗ
		|	Данные КАК ОбщаяТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ОбщаяТЧ.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТЧ.Номенклатура КАК Номенклатура,
		|	ДанныеТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДанныеТЧ.ИмяТЧ КАК ИмяТЧ,
		|	ДанныеТЧ.КоэффициентТекущий КАК КоэффициентТекущий,
		|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугУслуги.Цена КАК Цена,
		|	ПоступлениеТоваровУслугУслуги.Количество КАК Количество,
		|	1 КАК КоэффициентСтарый
		|ПОМЕСТИТЬ ПоступленияПоОбщейТЧ
		|ИЗ
		|	ДанныеТЧ КАК ДанныеТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|		ПО ДанныеТЧ.Номенклатура = ПоступлениеТоваровУслугУслуги.Номенклатура
		|			И (ДанныеТЧ.ИмяТЧ = ""Услуги"")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеТЧ.Номенклатура,
		|	ДанныеТЧ.ЕдиницаИзмерения,
		|	ДанныеТЧ.ИмяТЧ,
		|	ДанныеТЧ.КоэффициентТекущий,
		|	ПоступлениеТоваровУслугТовары.Ссылка,
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Количество,
		|	ПоступлениеТоваровУслугТовары.Коэффициент
		|ИЗ
		|	ДанныеТЧ КАК ДанныеТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ПО ДанныеТЧ.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
		|			И (ДанныеТЧ.ИмяТЧ = ""Товары"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступленияПоОбщейТЧ.Номенклатура КАК Номенклатура,
		|	ПоступленияПоОбщейТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПоступленияПоОбщейТЧ.ИмяТЧ КАК ИмяТЧ,
		|	ПоступленияПоОбщейТЧ.Ссылка КАК Ссылка,
		|	ПоступленияПоОбщейТЧ.Цена КАК ЦенаСтарая,
		|	ПоступленияПоОбщейТЧ.КоэффициентСтарый КАК КоэффициентСтарый,
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступленияПоОбщейТЧ.КоэффициентТекущий КАК КоэффициентТекущий,
		|	ПоступленияПоОбщейТЧ.Количество КАК КоличествоСтарое
		|ПОМЕСТИТЬ ДатыОбщейТЧ
		|ИЗ
		|	ПоступленияПоОбщейТЧ КАК ПоступленияПоОбщейТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ПО ПоступленияПоОбщейТЧ.Ссылка = ПоступлениеТоваровУслуг.Ссылка
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Дата < &ДатаДокумента
		|	И ПоступлениеТоваровУслуг.Ссылка <> &ТекущийДокумент
		|	И ПоступлениеТоваровУслуг.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыОбщейТЧ.Номенклатура КАК Номенклатура,
		|	ДатыОбщейТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДатыОбщейТЧ.ИмяТЧ КАК ИмяТЧ,
		|	МАКСИМУМ(ДатыОбщейТЧ.Дата) КАК Дата,
		|	ДатыОбщейТЧ.КоэффициентТекущий КАК КоэффициентТекущий
		|ПОМЕСТИТЬ МаксимальныеДаты
		|ИЗ
		|	ДатыОбщейТЧ КАК ДатыОбщейТЧ
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыОбщейТЧ.Номенклатура,
		|	ДатыОбщейТЧ.ИмяТЧ,
		|	ДатыОбщейТЧ.ЕдиницаИзмерения,
		|	ДатыОбщейТЧ.КоэффициентТекущий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеДаты.Номенклатура КАК Номенклатура,
		|	МаксимальныеДаты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	МаксимальныеДаты.ИмяТЧ КАК ИмяТЧ,
		|	СУММА(ВЫБОР
		|			КОГДА ДатыОбщейТЧ.КоэффициентСтарый = 0
		|				ТОГДА 0
		|			ИНАЧЕ ДатыОбщейТЧ.КоличествоСтарое * ДатыОбщейТЧ.ЦенаСтарая * ДатыОбщейТЧ.КоэффициентТекущий / ДатыОбщейТЧ.КоэффициентСтарый
		|		КОНЕЦ) КАК СуммаУдельнаяСтарая,
		|	СУММА(ДатыОбщейТЧ.КоличествоСтарое) КАК КоличествоСтарое
		|ПОМЕСТИТЬ ДоВычисленияСрЗн
		|ИЗ
		|	МаксимальныеДаты КАК МаксимальныеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыОбщейТЧ КАК ДатыОбщейТЧ
		|		ПО МаксимальныеДаты.Номенклатура = ДатыОбщейТЧ.Номенклатура
		|			И МаксимальныеДаты.ЕдиницаИзмерения = ДатыОбщейТЧ.ЕдиницаИзмерения
		|			И МаксимальныеДаты.ИмяТЧ = ДатыОбщейТЧ.ИмяТЧ
		|			И МаксимальныеДаты.Дата = ДатыОбщейТЧ.Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДаты.ИмяТЧ,
		|	МаксимальныеДаты.ЕдиницаИзмерения,
		|	МаксимальныеДаты.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоВычисленияСрЗн.Номенклатура КАК Номенклатура,
		|	ДоВычисленияСрЗн.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДоВычисленияСрЗн.ИмяТЧ КАК ИмяТЧ,
		|	ВЫБОР
		|		КОГДА ДоВычисленияСрЗн.КоличествоСтарое <> 0
		|			ТОГДА ДоВычисленияСрЗн.СуммаУдельнаяСтарая / ДоВычисленияСрЗн.КоличествоСтарое
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПредыдущаяЦена
		|ИЗ
		|	ДоВычисленияСрЗн КАК ДоВычисленияСрЗн";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ОбщаяТЧ", ОбщаяТЧ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредыдущиеЦеныВТЧ(Объект, ИмяТЧ, ДанныеЦен)
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		СтрокаТЧ.ПредыдущаяЦена = 0;
		Для Каждого СтрокаСтарыхДанных Из ДанныеЦен Цикл
			Если СтрокаТЧ.Номенклатура = СтрокаСтарыхДанных.Номенклатура Тогда
				СтрокаТЧ.ПредыдущаяЦена = СтрокаСтарыхДанных.ПредыдущаяЦена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВариантПолучателяЗатрат()
	
	Элементы.Услуги.ПодчиненныеЭлементы.УслугиНоменклатураПолучатель.Видимость = 
		Объект.ВариантПолучателяЗатрат <> ПредопределенноеЗначение("Перечисление.ВариантыПолучателяПоступившихЗатрат.НоменклатураЗатраты");
 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API).

// Функция осуществляет обработку считывания штрихкода номенклатуры.
//
// Параметры:
//  ДанныеНоменклатуры	 - Старуктура	 - сведения о считанной позиции.
//  СШК					 - Строка		 - Идентификатор сканера штрих-кода, с которым связано данное событие.
// 
// Возвращаемое значение:
//  Булево - Событие обработано.
//
&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	Номенклатура				= ДанныеНоменклатуры.Номенклатура;
	Количество					= ДанныеНоменклатуры.Количество;
	ХарактеристикаНоменклатуры	= ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
	Единица						= ДанныеНоменклатуры.ЕдиницаИзмерения;
	Цена						= ДанныеНоменклатуры.Цена;
	СерияНоменклатуры			= ДанныеНоменклатуры.СерияНоменклатуры;
	Штрихкод					= ДанныеНоменклатуры.Штрихкод;
	
	РеквизитыНоменклатуры = РаботаСДокументамиСервер.ДанныеНоменклатурыДляОбработкиЧтенияШК(Номенклатура, Истина);
	
	Если РеквизитыНоменклатуры.ЭтоМатериал Тогда
		ИмяТЧ			= "Товары";
		ТабличнаяЧасть	= Объект.Товары;
		
		Если Не ЗначениеЗаполнено(Единица) Тогда
			Единица = РеквизитыНоменклатуры.ЕдиницаИзмерения;
			ДанныеНоменклатуры.ЕдиницаИзмерения = Единица;
		КонецЕсли;
		
		мсСтрокиТЧ		= ТабличнаяЧасть.НайтиСтроки(РаботаСДокументамиКлиент.ЧтениеШтрихкода_ОтборДляПоискаСтрокиДокумента(ДанныеНоменклатуры));
		
	ИначеЕсли РеквизитыНоменклатуры.ЭтоУслуга Тогда
		ИмяТЧ			= "Услуги";
		ТабличнаяЧасть	= Объект.Услуги;
		мсСтрокиТЧ		= ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru='Номенклатура %1 является набором. Допускается только подбор номенклатуры материалов или услуг.'"), Строка(Номенклатура)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		Если мсСтрокиТЧ.Количество() = 0 Тогда
			
			// Добавление новой строки
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			СтрокаТЧ.Номенклатура = Номенклатура;
			СтрокаТЧ.Количество = Количество;      
			
			Если СтрокаТЧ.Свойство("Цена") Тогда
				Если Цена <> Неопределено  И Цена > 0 Тогда
					СтрокаТЧ.Цена = Цена;      
				КонецЕсли;	
			КонецЕсли;
			
			СтрокаТЧ.Сумма = СтрокаТЧ.Цена*Количество;
			
			Если ИмяТЧ = "Товары" Тогда
				СтрокаТЧ.ХарактеристикаНоменклатуры	= ХарактеристикаНоменклатуры;      
				СтрокаТЧ.СерияНоменклатуры			= СерияНоменклатуры;
				СтрокаТЧ.ЕдиницаИзмерения			= Единица;
				СтрокаТЧ.Коэффициент				= ?(СтрокаТЧ.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения,
														РеквизитыНоменклатуры.ЕдиницаИзмеренияКоэффициент,
														ДопСерверныеФункции.ПолучитьРеквизит(СтрокаТЧ.ЕдиницаИзмерения, "Коэффициент"));
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "Штрихкод") Тогда
					СтрокаТЧ.Штрихкод = Штрихкод;	
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Истина;
		Иначе
			// Увеличивается количество в существующей строке
			СтрокаТЧ = мсСтрокиТЧ[0];
			СтрокаТЧ.Количество = СтрокаТЧ.Количество + Количество;      
			Если СтрокаТЧ.Свойство("Цена") Тогда
				Если Цена <> Неопределено И Цена > 0 Тогда
					СтрокаТЧ.Цена = Цена;      
				КонецЕсли;	
			КонецЕсли;
			
			СтрокаТЧ.Сумма = СтрокаТЧ.Цена*Количество;
			НоваяСтрока = Ложь;
		КонецЕсли;
		
		Если ИмяТЧ = "Товары" Тогда
			Если Не НоваяСтрока
				Или (ЗначениеЗаполнено(Единица) И Цена <> Неопределено)
			Тогда
				ТоварыРеквизитПриИзменении("Товары.Цена");
			Иначе
				ТоварыНоменклатураПриИзменении(Неопределено, СтрокаТЧ.НомерСтроки - 1);
			КонецЕсли;
			ТоварыПриОкончанииРедактирования(Элементы.Товары, НоваяСтрока, Ложь);
		Иначе
			//УслугиНоменклатураПриИзменении(Неопределено, СтрокаТЧ.НомерСтроки - 1);
			УслугиПриОкончанииРедактирования(Элементы.Товары, НоваяСтрока, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СШКНоменклатура()

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%1"".'" );
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////
// МЕТОДЫ ПОДБОРА.

&НаКлиенте
Процедура Подключаемый_ВыборПодбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Ложь Тогда ЗапрашиватьКоличество = Ложь; ЗапрашиватьЦену = Ложь; ЗапрашиватьХарактеристику = Ложь; ЗапрашиватьСерию = Ложь; КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ДопСерверныеФункции.ПолучитьРеквизит(ВыбранноеЗначение, "ЭтоГруппа") Тогда
		
		Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ГруппаУслуги Тогда
			Действие = "ПодборУслуги";
		ИначеЕсли Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ГруппаТовары Тогда
			Действие = "ПодборТовара";
		КонецЕсли;
		
		Результат = РаботаСФормамиКлиент.ВыборПодборОбработка(ВыбранноеЗначение, ЗапрашиватьКоличество, ЗапрашиватьЦену, ЗапрашиватьХарактеристику, ЗапрашиватьСерию, Действие, ЭтаФорма);
		Если Результат <> Неопределено Тогда
			ОбработкаВыбора(Результат, Неопределено);
			АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления);
			Модифицированность = Истина;
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПодбораПриИзменении(Элемент)
	мИзмененыНастройкиПодбора = Истина;
	СохранитьНастройкиПодбора();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПодбора()
	
	Если ЗначениеЗаполнено(мИзмененыНастройкиПодбора) Тогда 		
		РаботаСФормамиСервер.СохранитьНастройкиПодбора(ЭтаФорма.ЗапрашиватьКоличество, ЭтаФорма.ЗапрашиватьЦену, ЭтаФорма.ЗапрашиватьХарактеристику, ЭтаФорма.ЗапрашиватьСерию, ТипЗнч(Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПКлиент.ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#Область ТерминалыСбораДанных // ТЕРМИНАЛЫ СБОРА ДАННЫХ

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ЗагрузитьДанныеИзТСДЗавершение", ЭтотОбъект);    
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриПодключении, УникальныйИдентификатор, Ложь)			
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		мсШтрихкоды = РезультатВыполнения.ТаблицаТоваров;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ДобавлятьБезВладельца", Истина);
		РаботаСТорговымОборудованиемКлиент.ОбработатьШтрихкоды(ЭтаФорма, Объект, мсШтрихкоды, "Товары", ДопПараметры);
		АктуализироватьПредыдущиеЦены(Объект, ПоказыватьЦеныПредыдущегоПоступления);
	Иначе
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
		|""%1"".'" );
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ИнтеграцияМДЛП

&НаСервере
Процедура СформироватьТекстУведомленияМДЛП()
	
	ИнтеграцияМДЛП.СформироватьТекстУведомленияМДЛП(ЭтотОбъект);
	
КонецПроцедуры

// Конец ИнтеграцияМДЛП
