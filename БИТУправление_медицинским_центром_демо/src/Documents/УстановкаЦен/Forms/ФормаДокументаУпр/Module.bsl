#Область РазделОписанияПеременных

&НаКлиенте 
Перем мКэшВидовНоменклатуры;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма, Ложь);	
	Элементы.НоменклатураХарактеристикаНоменклатуры.Видимость = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
	
	УстановитьПодменюВыбораОпераций();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийУстановкиЦен.ЦеныКонтрагентов Тогда
		ДействияФормыДействиеУстановитьОперациюСервер("ЦеныКонтрагентов");
	Иначе
		ДействияФормыДействиеУстановитьОперациюСервер("ЦеныПрейскурантов");
	КонецЕсли;
	
	// Заполнить цены из прайса в новом документе, если номенклатура уже есть, но вся без цен.
	Если Объект.Ссылка.Пустая()
		И Объект.Номенклатура.Количество() <> 0
		И Объект.Номенклатура.Количество() = Объект.Номенклатура.НайтиСтроки(Новый Структура("Цена", 0))
	Тогда
		ОбъектКопия = Объект;
		ОперацияПерезаполнения("ПерезаполнитьПоПрейскуранту",ОбъектКопия,Объект.Прейскурант);	
		КопироватьДанныеФормы(ОбъектКопия, Объект);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьКэшВидовНоменклатуры(мКэшВидовНоменклатуры, Объект.Номенклатура);
	НастроитьВидимостьЭлементовСравнения();

	// Установим дату входящего документа на текущую.
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкиЦен.ЦеныПрейскурантов");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Истина // ИспользоватьПодключаемоеОборудование Проверка на включенную ФО "Использовать ВО"
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	
	КонецЕсли;

	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Истина, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ДействияФормыДействиеУстановитьОперацию(Команда)
	Если Команда <> Неопределено Тогда
		ДействияФормыДействиеУстановитьОперациюСервер(Команда.Имя);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппе(Команда)
	
	Группа = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбораГруппыУпр", , ЭтаФорма).ОткрытьМодально();

	ОбъектКопия = Объект;
	Если Группа <> Неопределено Тогда
		ОперацияПерезаполнения("ДобавитьНоменклатуруВДокументПоГруппе", ОбъектКопия,,,Группа, Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
	КонецЕсли;
	КопироватьДанныеФормы(ОбъектКопия, Объект);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦены(Команда)
	
	СтруктураТЧ = СформироватьСтруктуруТЧ();
	ПараметрыФормы = Новый Структура("ДокументСсылка,ДанныеДокумента", Объект.Ссылка, СтруктураТЧ);
	
	ФормаФормированиеЦен = ПолучитьФорму("Обработка.ФормированиеЦен.Форма.ФормаУпр", ПараметрыФормы, ЭтаФорма);
			
	ЗначениеОтОбработки = ФормаФормированиеЦен.ОткрытьМодально();
	Если ЗначениеОтОбработки <> Неопределено Тогда
		ОбновитьТабличнуюЧасть(ЗначениеОтОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеКнопкиМенюЗаполнения(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	// Проверка заполнения/выбора прейскуранта, если он актуален для операции
	Прейскурант = Null; // Уникальное пустое значение.
	
	Если 	ИмяКоманды = "ПерезаполнитьПоПрейскурантуДокумента"
		Или ИмяКоманды = "ДополнитьИзПрейскурантаДокумента"
		Или ИмяКоманды = "ОчиститьИЗаполнитьИзПрейскурантаДокумента"
		Или ИмяКоманды = "ДополнитьПоОстаткамНаСкладе"
	Тогда
		Прейскурант = Объект.Прейскурант;
		
	ИначеЕсли ИмяКоманды = "ПерезаполнитьПоДругомуПрейскуранту"
		Или	  ИмяКоманды = "ДополнитьИзДругогоПрейскуранта"
		Или   ИмяКоманды = "ОчиститьИЗаполнитьИзДругогоПрейскуранта"
	Тогда
		Прейскурант = ВыбратьПрейскурант();
	КонецЕсли;
	
	Если Прейскурант <> Null
		И Не ЗначениеЗаполнено(Прейскурант)
	Тогда
		ПоказатьПредупреждение(,"Не выбран прейскурант.");
		Возврат;
	КонецЕсли;
	
	// Начало выполнения операции
	ОбъектКопия = Объект;
	
	Если ИмяКоманды = "ПерезаполнитьПоПрейскурантуДокумента" Тогда
		ОперацияПерезаполнения("ПерезаполнитьПоПрейскуранту", ОбъектКопия, Объект.Прейскурант,,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ПерезаполнитьПоДругомуПрейскуранту" Тогда
		ОперацияПерезаполнения("ПерезаполнитьПоПрейскуранту", ОбъектКопия, Прейскурант,,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ПерезаполнитьПоЦенамПоступления" Тогда
		ОперацияПерезаполнения("ПерезаполнитьПоЦенамПоступления", ОбъектКопия);
		
	ИначеЕсли ИмяКоманды = "ДополнитьИзПрейскурантаДокумента" Тогда
		ОперацияПерезаполнения("ДополнитьИзПрейскуранта", ОбъектКопия, Объект.Прейскурант,,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ДополнитьИзДругогоПрейскуранта" Тогда
		ОперацияПерезаполнения("ДополнитьИзПрейскуранта", ОбъектКопия, Прейскурант,,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ДополнитьИзДокументовПоступления" Тогда
		ОперацияПерезаполнения("ДополнитьИзДокументовПоступления", ОбъектКопия,,,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ОчиститьИЗаполнитьИзПрейскурантаДокумента" Тогда
		Очистить = Истина;
		ОперацияПерезаполнения("ДополнитьИзПрейскуранта", ОбъектКопия, Объект.Прейскурант, Очистить,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ОчиститьИЗаполнитьИзДругогоПрейскуранта" Тогда
		Очистить = Истина;
		ОперацияПерезаполнения("ДополнитьИзПрейскуранта", ОбъектКопия, Прейскурант, Очистить,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ОчиститьИЗаполнитьИзДокументовПоступления" Тогда
		Очистить = Истина;
		ОперацияПерезаполнения("ДополнитьИзДокументовПоступления", ОбъектКопия,, Очистить,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения);
		
	ИначеЕсли ИмяКоманды = "ДополнитьПоОстаткамНаСкладе" Тогда
		Склад = ВыбратьСклад();
		Если ЗначениеЗаполнено(Склад) Тогда
			ОперацияПерезаполнения("ДополнитьПоОстаткамНаСкладе", ОбъектКопия, Прейскурант,,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения, Склад);	
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ДополнитьПоОстаткамНаСкладеВУчетныхЦенах" Тогда
		Склад = ВыбратьСклад();
		Если ЗначениеЗаполнено(Склад) Тогда
			ОперацияПерезаполнения("ДополнитьПоОстаткамНаСкладеВУчетныхЦенах", ОбъектКопия, Прейскурант,,,Элементы.Сравнить.Пометка, ПрейскурантСравнения, ДатаСравнения, Склад);	
		КонецЕсли;
	КонецЕсли;
	
	КопироватьДанныеФормы(ОбъектКопия, Объект);

	ЗаполнитьКэшВидовНоменклатуры(мКэшВидовНоменклатуры, Объект.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура Сравнить(Команда)
	Элементы.Сравнить.Пометка = НЕ Элементы.Сравнить.Пометка;
	НастроитьВидимостьЭлементовСравнения();
	ПерезаполнитьЦеныСравнения();
КонецПроцедуры

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НоменклатураПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Номенклатура.ТекущийЭлемент = Элементы.НоменклатураЕдиницаИзмерения Тогда
		Элементы.НоменклатураЕдиницаИзмерения.ТолькоПросмотр = 
			мКэшВидовНоменклатуры.Получить(Элементы.Номенклатура.ТекущиеДанные.Номенклатура) <> ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.Номенклатура.ТекущийЭлемент <> Элементы.НоменклатураЕдиницаИзмерения Тогда
		Элементы.НоменклатураЕдиницаИзмерения.ТолькоПросмотр = 
			мКэшВидовНоменклатуры.Получить(Элементы.Номенклатура.ТекущиеДанные.Номенклатура) <> ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Номенклатура.ТекущиеДанные;
	ТекущаяСтрока.ЕдиницаИзмерения = Ценообразование.ПолучитьЕдиницуПродажиНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ЕдиницаИзмерения);
	
	// Добавление номенклатуры в кэш видов номенклатуры.
	ВидНоменклатуры = мКэшВидовНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
	Если ВидНоменклатуры = Неопределено Тогда
		ВидНоменклатуры = ?(ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения), 
							ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал"), 
							ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга"));
							
		мКэшВидовНоменклатуры.Вставить(ТекущаяСтрока.Номенклатура, ВидНоменклатуры);
		
	КонецЕсли;
	
	Элементы.НоменклатураЕдиницаИзмерения.ТолькоПросмотр = 
		ВидНоменклатуры <> ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Номенклатура.ТекущиеДанные;
	ВидНоменклатуры = мКэшВидовНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
	Если ВидНоменклатуры <> ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияПриИзменении(Элемент)
	Элементы.ПрейскурантСравнения.Доступность = (ВидСравнения = "Прейскурант");
	Элементы.ДатаСравнения.Доступность = (ВидСравнения = "Прейскурант");
	Если ВидСравнения <> "Прейскурант" Тогда
		ПрейскурантСравнения = ПредопределенноеЗначение("Справочник.Прейскуранты.ПустаяСсылка");
		ДатаСравнения = '00010101';
	КонецЕсли;
	ПерезаполнитьЦеныСравнения();
КонецПроцедуры

&НаКлиенте
Процедура ПрейскурантСравненияПриИзменении(Элемент)
	ПерезаполнитьЦеныСравнения();
КонецПроцедуры

&НаКлиенте
Процедура ДатаСравненияПриИзменении(Элемент)
	ПерезаполнитьЦеныСравнения();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЦенаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Разница   = ТекущиеДанные.Цена - ТекущиеДанные.СравниваемаяЦена;
		ТекущиеДанные.Отношение = ?(ТекущиеДанные.СравниваемаяЦена = 0, 0, ТекущиеДанные.Цена/ТекущиеДанные.СравниваемаяЦена*100);	
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьКэшВидовНоменклатуры(КэшВидовНоменклатуры, Знач ОбъектНоменклатура)
	
	КэшВидовНоменклатуры = Новый Соответствие;
	Если ОбъектНоменклатура.Количество() <> 0 Тогда
		НоменклатураДокумента = ОбъектНоменклатура.Выгрузить().ВыгрузитьКолонку("Номенклатура");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатураДокумента", НоменклатураДокумента);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ВидНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&НоменклатураДокумента)"
		;
		Выб = Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			КэшВидовНоменклатуры.Вставить(Выб.Номенклатура, Выб.ВидНоменклатуры);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// ЗАПОЛНЕНИЕ СПИСКА ОПЕРАЦИЙ.
&НаСервере
Процедура УстановитьПодменюВыбораОпераций()
	
	МассивТипов = Перечисления.ВидыОперацийУстановкиЦен.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
	РаботаСДиалогамиСервер.УстановитьПодменюОперации(МассивТипов, ЭтаФорма, "Подключаемый_ДействияФормыДействиеУстановитьОперацию");
	
КонецПроцедуры

&НаСервере
Процедура ДействияФормыДействиеУстановитьОперациюСервер(КомандаИмя)
	
	Если ЗначениеЗаполнено(КомандаИмя) Тогда 
		Объект.ВидОперации = Перечисления.ВидыОперацийУстановкиЦен[КомандаИмя];
	КонецЕсли;
	
	// Установить тип значения поля ввода.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийУстановкиЦен.ЦеныКонтрагентов Тогда
		ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Иначе
		ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.Прейскуранты");
	КонецЕсли;
	
	ЭУПрейскурант	=	 Элементы.Прейскурант;
	ЭУПрейскурант.ОграничениеТипа = ОграничениеТипа;
	
	мПрейскурант = ОграничениеТипа.ПривестиЗначение(Объект.Прейскурант);
	Если Объект.Прейскурант <> мПрейскурант Тогда
		Объект.Прейскурант = мПрейскурант;
	КонецЕсли;
	
	ЭУПрейскурант.АвтоОтметкаНезаполненного	= Объект.ВидОперации <> Перечисления.ВидыОперацийУстановкиЦен.ЦеныКонтрагентов;
	ЭУПрейскурант.ОтметкаНезаполненного		= ЭУПрейскурант.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(Объект.Прейскурант);
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект.Ссылка, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруТЧ()
	массивВозвратаСтрок = новый Массив;
	Для каждого СтрокаОбъекта из Объект.Номенклатура Цикл
		СтруктураСтроки = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Цена");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,СтрокаОбъекта);
		массивВозвратаСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	Возврат массивВозвратаСтрок;
КонецФункции

&НаСервере
Процедура ОбновитьТабличнуюЧасть(МассивСтруктур)
	ТабличнаяЧасть = Объект.Номенклатура;	
	ТабличнаяЧасть.Очистить();           	
	Для Каждого Элемент Из МассивСтруктур Цикл		
		НоваяСтрока = ТабличнаяЧасть.Добавить();		
		НоваяСтрока.Номенклатура = Элемент.Номенклатура;		
		НоваяСтрока.ХарактеристикаНоменклатуры = Элемент.ХарактеристикаНоменклатуры;		
		НоваяСтрока.ЕдиницаИзмерения = Элемент.ЕдиницаИзмерения;                    		
		НоваяСтрока.Цена = Элемент.Цена;                                            		
	КонецЦикла;
	Если Элементы.Сравнить.Пометка Тогда
		ПерезаполнитьЦеныСравнения();	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ВыбратьПрейскурант()
	
	ПараметрыВыбораСклада = Новый Структура("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ВыбранныйПрейскурант = ОткрытьФормуМодально("Справочник.Прейскуранты.ФормаВыбора", ПараметрыВыбораСклада);
	
	Возврат ВыбранныйПрейскурант;
	
КонецФункции

&НаКлиенте
Функция ВыбратьСклад()
	
	ПараметрыВыбораСклада = Новый Структура("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	Склад = ОткрытьФормуМодально("Справочник.Склады.ФормаВыбора", ПараметрыВыбораСклада);
	
	Возврат Склад;
	
КонецФункции

&НаСервере
Функция ПолучитьЦеныПоступления()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДатыПоследнихПоступлений.Номенклатура,
	|	ДатыПоследнихПоступлений.ХарактеристикаНоменклатуры,
	|	ДатыПоследнихПоступлений.ЕдиницаИзмерения,
	|	Товары.Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Номенклатура КАК Номенклатура,
	|		МАКСИМУМ(Товары.Ссылка.Дата) КАК Дата,
	|		Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		Документ.%Док%.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНом
	|			ПО Товары.Номенклатура = СпрНом.Ссылка
	|	ГДЕ
	|		Товары.Ссылка.Дата <= &Дата
	|		И Товары.Ссылка.Проведен
	|		И НЕ Товары.Номенклатура.ПометкаУдаления
	|		И НЕ Товары.Номенклатура.Архив
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Номенклатура,
	|		Товары.ХарактеристикаНоменклатуры,
	|		Товары.ЕдиницаИзмерения) КАК ДатыПоследнихПоступлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%Док%.Товары КАК Товары
	|		ПО ДатыПоследнихПоступлений.Дата = Товары.Ссылка.Дата
	|			И ДатыПоследнихПоступлений.Номенклатура = Товары.Номенклатура
	|			И ДатыПоследнихПоступлений.ХарактеристикаНоменклатуры = Товары.ХарактеристикаНоменклатуры
	|			И ДатыПоследнихПоступлений.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения";	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%Док%", "ПоступлениеТоваровУслуг");
	РезПоступления = Запрос.Выполнить();
	
	Если РезПоступления.Пустой() Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%Док%", "ОприходованиеТоваров");
		РезОприходования = Запрос.Выполнить();
		
		Если РезОприходования.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			ТЗ = РезОприходования.Выгрузить();
		КонецЕсли;
	Иначе
		ТЗ = РезПоступления.Выгрузить();
	КонецЕсли;
	
	Возврат ТЗ;	
КонецФункции

&НаСервере
Процедура ПерезаполнитьЦеныСравненияПоПрейскурантуНаДатуСервер(Прейскурант, Дата)
	Для Каждого СТР Из Объект.Номенклатура Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Прейскурант",                Прейскурант);
		Отбор.Вставить("Номенклатура",               СТР.Номенклатура);
		Отбор.Вставить("ХарактеристикаНоменклатуры", СТР.ХарактеристикаНоменклатуры);
		Отбор.Вставить("ЕдиницаИзмерения",           СТР.ЕдиницаИзмерения);	
		Цены  = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(?(Дата = '00010101', Объект.Дата, Дата), Отбор);
		Если Цены.Количество() = 0 Тогда
			СТР.СравниваемаяЦена = 0;
			СТР.Разница          = 0;
			СТР.Отношение        = 0;
			Продолжить;	
		КонецЕсли;
		ЦенаПрейскуранта = Цены[0].Цена;
		Если СТР.СравниваемаяЦена <> ЦенаПрейскуранта Тогда
			СТР.СравниваемаяЦена = ЦенаПрейскуранта;
			СТР.Разница          = СТР.Цена - СТР.СравниваемаяЦена;
			СТР.Отношение        = ?(СТР.СравниваемаяЦена = 0, 0, СТР.Цена/СТР.СравниваемаяЦена*100);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦеныСравненияПоПоследнемуПоступлениюСервер()
	ЦеныПоступления = ПолучитьЦеныПоступления();
	Для Каждого СТР Из Объект.Номенклатура Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",               СТР.Номенклатура);
		Отбор.Вставить("ХарактеристикаНоменклатуры", СТР.ХарактеристикаНоменклатуры);
		Отбор.Вставить("ЕдиницаИзмерения",           СТР.ЕдиницаИзмерения);
		
		ТЗ = ЦеныПоступления.НайтиСтроки(Отбор);
		Если ТЗ.Количество() = 0 Тогда
			СТР.СравниваемаяЦена = 0;
			СТР.Разница          = 0;
			СТР.Отношение        = 0;
			Продолжить;	
		КонецЕсли;
		
		Цена = ТЗ[0].Цена;
		Если СТР.СравниваемаяЦена <> Цена Тогда
			СТР.СравниваемаяЦена = Цена;
			СТР.Разница          = СТР.Цена - СТР.СравниваемаяЦена;
			СТР.Отношение        = ?(СТР.СравниваемаяЦена = 0, 0, СТР.Цена/СТР.СравниваемаяЦена*100);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьЭлементовСравнения()
	СравнениеВключено = Элементы.Сравнить.Пометка;
	Элементы.ПараметрыСравнения.Видимость = СравнениеВключено;
	Элементы.ПрейскурантСравнения.Доступность = (ВидСравнения = "Прейскурант");
	Элементы.ДатаСравнения.Доступность        = (ВидСравнения = "Прейскурант");
	Элементы.НоменклатураСравниваемаяЦена.Видимость = СравнениеВключено;
	Элементы.НоменклатураРазница.Видимость = СравнениеВключено;
	Элементы.НоменклатураОтношение.Видимость = СравнениеВключено;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦеныСравнения()
	ОчиститьЦеныСравнения();
	Если ВидСравнения = "Прейскурант" И ЗначениеЗаполнено(ПрейскурантСравнения) Тогда
		ПерезаполнитьЦеныСравненияПоПрейскурантуНаДатуСервер(ПрейскурантСравнения, ДатаСравнения);		
	ИначеЕсли ВидСравнения = "Поступление" Тогда
		ПерезаполнитьЦеныСравненияПоПоследнемуПоступлениюСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьЦеныСравнения()
	Для каждого СТР Из Объект.Номенклатура Цикл
		СТР.СравниваемаяЦена = 0;
		СТР.Разница          = 0;
		СТР.Отношение        = 0;
	КонецЦикла; 
КонецПроцедуры 

// Обработка изменения реквизитов документа.
// Параметры
//  Имя			– Строка			– Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ЭтаФорма	– Форма				– Ссылка на форму документа. 
// 									  Если значение неопределено, производится программная обработка реквизитов.
//  ТекСтрока	– СтрокаТабличнойЧасти – Ссылка на строку табличной части документа, реквизит которой обрабатывается.
// 										 Имеет смысл только для табличных частей документов.
//  ДопПараметры– Стркутура			– Структура, содержащая дополнительные параметры обработки реквизита.
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
&НаКлиенте
Функция ОбработкаРеквизитаУпр(Имя, ТекСтрока=Неопределено, ЭтаФорма=Неопределено, ДопПараметры=Неопределено)

	Если Имя="Номенклатура" Тогда		
		Если Не ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			ТекСтрока.Цена = ПолучитьЦенуПозиции(ТекСтрока.Номенклатура,ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения,Объект.Прейскурант);
		КонецЕсли;
	ИначеЕсли Имя="Сертификаты" Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			ТекСтрока.Цена = ПолучитьЦенуПозиции(ТекСтрока.ВидСертификата,,,Объект.Прейскурант);
		КонецЕсли;
	КонецЕсли;
КонецФункции // ОбработкаРеквизита()

&НаСервереБезКонтекста
Функция ПолучитьЦенуПозиции(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ЕдиницаИзмерения = Неопределено, Прейскурант)
	
	Если ЗначениеЗаполнено(Прейскурант) Тогда
		СтруктураЦен = Ценообразование.ПолучитьЦену(Прейскурант, Номенклатура, , ХарактеристикаНоменклатуры, ЕдиницаИзмерения);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат СтруктураЦен.Цена;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет обработку считывания штрихкода номенклатуры.
//
// Параметры:
//  ДанныеНоменклатуры	 - Структура	 - сведения о считанной позиции.
//  СШК					 - Строка		 - Идентификатор сканера штрих-кода, с которым связано данное событие.
// 
// Возвращаемое значение:
//  Булево - Событие обработано.
//
&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	Номенклатура				= ДанныеНоменклатуры.Номенклатура;
	ХарактеристикаНоменклатуры	= ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
	Единица						= ДанныеНоменклатуры.ЕдиницаИзмерения;
	
	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		ХарактеристикаНоменклатуры = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"); 
	КонецЕсли;	
	СерияНоменклатуры = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	вид = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал");
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ВидНом = Номенклатура.ВидНоменклатуры;
	#Иначе
		ВидНом = ДопСерверныеФункции.ПолучитьРеквизит(Номенклатура,"ВидНоменклатуры"); 
	#КонецЕсли
	
	Если ВидНом = вид Тогда
		ТабличнаяЧасть	= Объект.Номенклатура;
		мсСтрокиТовары = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения",Номенклатура, ХарактеристикаНоменклатуры, Единица));
		
		Если мсСтрокиТовары.Количество() = 0 Тогда
			
			// Добавление новой строки
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			СтрокаТЧ.Номенклатура = Номенклатура;     
			СтрокаТЧ.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;      
			СтрокаТЧ.ЕдиницаИзмерения = Единица;
			
			НомерСтроки = СтрокаТЧ.НомерСтроки - 1;
			ОбработкаРеквизитаУпр("Номенклатура", Объект.Номенклатура[НомерСтроки], ЭтаФорма);
			НоваяСтрока = Истина;
		КонецЕсли;		
	Иначе
		ТекстПредупреждения = НСтр("ru='Номенклатура %1 не является материалом. Допускается только подбор номенклатуры материалов.'"); 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Строка(Номенклатура)); 
		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли;
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНоменклатура;
	Возврат Истина;
	
КонецФункции // СШКНоменклатура()

&НаКлиенте
Функция СШКСертификат(Сертификат, СШК) Экспорт
	
	ВидСертификата = ДопСерверныеФункции.ПолучитьРеквизит(Сертификат, "ВидСертификата");
	
	СтрокиЦен = Объект.Сертификаты.НайтиСтроки(Новый Структура("ВидСертификата",ВидСертификата));
	Если СтрокиЦен.Количество() = 0 Тогда
		// Добавление новой строки
		СтрокаТЧ = Объект.Сертификаты.Добавить();
		СтрокаТЧ.ВидСертификата = ВидСертификата;     
		
		НомерСтроки = СтрокаТЧ.НомерСтроки - 1;
		ОбработкаРеквизитаУпр("Сертификаты", Объект.Сертификаты[НомерСтроки], ЭтаФорма);
		НоваяСтрока = Истина;	
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСертификаты;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОперацияПерезаполнения (ПроцедураЗаполнения, Объект, Прейскурант = Неопределено, Очистить = Ложь, Группа = Неопределено, ПометкаСравнить = Ложь, ПрейскурантСравнения = Неопределено, ДатаСравнения = Неопределено, Склад = Неопределено)
	
	Если ПроцедураЗаполнения = "ДополнитьИзПрейскуранта" Тогда
		Документы.УстановкаЦен.ДополнитьИзПрейскуранта(Объект, Прейскурант, Очистить);
	ИначеЕсли ПроцедураЗаполнения = "ПерезаполнитьПоПрейскуранту"  Тогда
		Документы.УстановкаЦен.ПерезаполнитьПоПрейскуранту(Объект, Прейскурант);
	ИначеЕсли ПроцедураЗаполнения = "ПерезаполнитьПоЦенамПоступления" Тогда
		Документы.УстановкаЦен.ПерезаполнитьПоЦенамПоступления(Объект);
	ИначеЕсли ПроцедураЗаполнения = "ДополнитьИзДокументовПоступления" Тогда
		Документы.УстановкаЦен.ДополнитьИзДокументовПоступления(Объект, Очистить);
	ИначеЕсли ПроцедураЗаполнения = "ДобавитьНоменклатуруВДокументПоГруппе" Тогда
		Документы.УстановкаЦен.ДобавитьНоменклатуруВДокументПоГруппе(Объект, Группа);
	ИначеЕсли ПроцедураЗаполнения = "ДополнитьПоОстаткамНаСкладе" Тогда
		Документы.УстановкаЦен.ДополнитьПоОстаткамНаСкладе(Объект, Склад);
	ИначеЕсли ПроцедураЗаполнения = "ДополнитьПоОстаткамНаСкладеВУчетныхЦенах" Тогда
		Документы.УстановкаЦен.ДополнитьПоОстаткамНаСкладеВУчетныхЦенах(Объект, Склад);
	КонецЕсли;
	Если ПометкаСравнить Тогда
		Документы.УстановкаЦен.ПерезаполнитьЦеныСравнения(Объект, ПрейскурантСравнения, ДатаСравнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
