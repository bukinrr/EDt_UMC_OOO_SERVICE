#Область ПрограммныйИнтерфейс

// Возвращает доступные варианты печати документа.
//  Результатом является Струткура, каждая строка которой соответствует одному из вариантов печати.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Акт",		 НСтр("ru='Акт об оказании услуг'"));
	СтруктураМакетов.Вставить("АктБезПолиса",НСтр("ru='Акт об оказании услуг (без услуг по полису)'"));
	СтруктураМакетов.Вставить("ТоварныйЧек", НСтр("ru='Товарный чек'"));
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура формирует печатную форму документа
//  Название макета печати передается в качестве параметра,
//  по переданному имени макета определяется соответствующая функция печати.
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка	 - ссылка на распечатываемый документ.
//  ИмяМакета		 - Строка			 - имя макета из структуры печатных форм.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция Печать(СсылкаНаОбъект, ИмяМакета) Экспорт
	
	Перем ТабДокумент;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акт" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(СсылкаНаОбъект);
		
	ИначеЕсли ИмяМакета = "АктБезПолиса" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(СсылкаНаОбъект, Истина);
		
	ИначеЕсли ИмяМакета = "ТоварныйЧек" Тогда 
		
		ТабДокумент = ПечатьТоварногоЧека(СсылкаНаОбъект);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Функция печати акта об оказании услуг
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект
//
// Возвращаемое значение:
//  Табличный документ.
//
Функция ПечатьАктаОбОказанииУслуг(СсылкаНаОбъект, БезПолиса = Ложь)
	
	ВалютаДокумента = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВалютаУчета");
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Справочники.Валюты.Рубль;
	КонецЕсли;
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	ОказаниеУслуг.Номер КАК Номер,
	|	ОказаниеУслуг.Дата КАК Дата,
	|	ОказаниеУслуг.ДатаНачала КАК ДатаНачала,
	|	ОказаниеУслуг.ДатаОкончания КАК ДатаОкончания,
	|	ОказаниеУслуг.Сотрудник КАК Сотрудник,
	|	ОказаниеУслуг.Клиент КАК Клиент,
	|	ОказаниеУслуг.Работы.(
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		Сотрудник КАК Сотрудник,
	|		ПроцентСкидки КАК Скидка,
	|		Сертификат КАК Сертификат,
	|		СуммаСкидки КАК СуммаСкидки,
	|		Номенклатура.Представление КАК НоменклатураПредставление,
	|		НеОплачиваетсяПолисом КАК НеОплачиваетсяПолисом,
	|		СуммаНеПоПолису КАК СуммаНеПоПолису
	|	) КАК Работы,
	|	ОказаниеУслуг.Документ КАК Полис,
	|	ОказаниеУслуг.Документ.ВидПолиса КАК ВидПолиса
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОказаниеУслуг.Работы.НомерСтроки";
	
	Шапка = ЗапросУслуги.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЕстьПолис = ЗначениеЗаполнено(Шапка.Полис);
	
	ТаблицаУслуги = Шапка.Работы.Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет	= Документы.ОказаниеУслуг.ПолучитьМакет("Акт");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект); 
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.НазваниеОрганизации) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Организация = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.Адрес) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Адрес");
		ОбластьМакета.Параметры.Адрес = СтруктураРеквизитовОрганизации.Адрес;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.Телефон) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Телефон");
		ОбластьМакета.Параметры.Телефон = СтруктураРеквизитовОрганизации.Телефон;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.ИНН) Тогда
		
		РеквизитыИНН = НСтр("ru='ИНН'") + ": " + СтруктураРеквизитовОрганизации.ИНН;
		Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.КПП) Тогда
			РеквизитыИНН = РеквизитыИНН + ", " + НСтр("ru='КПП'") + ": " + СтруктураРеквизитовОрганизации.КПП;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Реквизиты");
		ОбластьМакета.Параметры.Реквизиты = РеквизитыИНН;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Клиент;
	ТабДокумент.Вывести(ОбластьМакета);
	ЕстьРаботы = Ложь;
	ЕстьТовары = Ложь;
	ЕстьМатериалы = Ложь;
	
	ЕстьРаботыПоАбонементу = Ложь;
	
	ЕстьСкидки = Ложь;
	
	ЧислоНаименований = 0;
	СуммаПоДокументу = 0;
	СуммаПоДокументуПоПолису = 0;
	
	ЕстьПозицииУслуги = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
		Если Не БезПолиса Или Не ЕстьПолис Или СтрокаТабличнойЧасти.НеОплачиваетсяПолисом Тогда
			ЕстьПозицииУслуги = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сертификат) Тогда
			ЕстьРаботыПоАбонементу = Истина;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Сумма <> СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Цена Тогда
			ЕстьСкидки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Вывод перечня услуг
	Если ЕстьПозицииУслуги Тогда
		
		ИмяОбластиШапки  = ?(ЕстьСкидки, "ШапкаТаблицыСоСкидкой", "ШапкаТаблицы");
		ИмяОбластиСтроки = ?(ЕстьСкидки, "СтрокаСоСкидкой", "Строка");
		
		Если ЕстьРаботыПоАбонементу Тогда
			ИмяОбластиСотрудникШапки = "ШапкаТаблицы|Сотрудник";
			ИмяОбластиСотрудникСтроки = "Строка|Сотрудник";
		Иначе
			ИмяОбластиСотрудникШапки = "ШапкаРаботыСотрудникБезАбонемента|СотрудникБезАбонемента";
			ИмяОбластиСотрудникСтроки = "СтрокаРаботыСотрудникБезАбонемента|СотрудникБезАбонемента";
		КонецЕсли;
		
		ОбластьШапка		  = Макет.ПолучитьОбласть(ИмяОбластиШапки + "|ПродажаУслуги");
		ОбластьШапкаАбонемент = Макет.ПолучитьОбласть(ИмяОбластиШапки + "|Абонемент");
		ОбластьШапкаСотрудник = Макет.ПолучитьОбласть(ИмяОбластиСотрудникШапки);
		
		ОбластьСтрока		   = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|ПродажаУслуги");
		ОбластьСтрокаАбонемент = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|Абонемент");
		ОбластьСтрокаСотрудник = Макет.ПолучитьОбласть(ИмяОбластиСотрудникСтроки);
		
		СинонимСотрудник = ПроцедурыСпециализацииПоставки.ОтраслевыеПредставленияРеквизитов().Получить("Сотрудник");
		Если Не ЗначениеЗаполнено(СинонимСотрудник) Тогда
			СинонимСотрудник = "Сотрудник";
		КонецЕсли;
		ОбластьШапкаСотрудник.Параметры.Сотрудник = СинонимСотрудник;
		
		// Вывод шапки работ в табличный документ
		ТабДокумент.Вывести(ОбластьШапка);
		Если ЕстьРаботыПоАбонементу Тогда
			ТабДокумент.Присоединить(ОбластьШапкаАбонемент);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьШапкаСотрудник);
		
		НомерСтроки = 0;
		СуммаИтого = 0;
		СуммаИтогоПоПолису = 0;
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
			
			Если БезПолиса И ЕстьПолис И Не СтрокаТабличнойЧасти.НеОплачиваетсяПолисом Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтрокаАбонемент.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтрокаСотрудник.Параметры.Заполнить(СтрокаТабличнойЧасти);
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Товар) Тогда
				ОбластьСтрока.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
			Иначе
				ОбластьСтрока.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.НоменклатураПредставление);
			КонецЕсли;
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			
			Если Не СтрокаТабличнойЧасти.Сертификат.Пустая() Тогда
				// Услуги по абонементу идут с нулевой суммой
				СтрокаТабличнойЧасти.Цена  = 0;
				СтрокаТабличнойЧасти.Сумма = 0
			КонецЕсли;
			
			// Сумма / (100 - Скидка) * Скидка;
			Если СтрокаТабличнойЧасти.Цена = 0 тогда
				ОбластьСтрока.Параметры.Цена = "0";
			КонецЕсли;   
			Если СтрокаТабличнойЧасти.Сумма = 0 тогда
				ОбластьСтрока.Параметры.Сумма = "0";
			Иначе
				ОбластьСтрока.Параметры.Сумма = СтрокаТабличнойЧасти.Сумма;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
				ОбластьСтрокаСотрудник.Параметры.Сотрудник = Шапка.Сотрудник;
			КонецЕсли; 
			
			Если ЕстьСкидки Тогда
				СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество; 
				
				ОбластьСтрока.Параметры.Скидка         = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма,,"0");
				ОбластьСтрока.Параметры.СуммаБезСкидки = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаБезСкидки,,"0");
			КонецЕсли;
			
			Если ЕстьПолис И Не СтрокаТабличнойЧасти.НеОплачиваетсяПолисом Тогда
				СуммаИтогоПоПолису = СуммаИтогоПоПолису + (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНеПоПолису);
				СуммаИтого = СуммаИтого + СтрокаТабличнойЧасти.СуммаНеПоПолису;
			Иначе
				СуммаИтого = СуммаИтого + СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;
			
			// Вывод строки работы в табличный документ
			ТабДокумент.Вывести(ОбластьСтрока);
			Если ЕстьРаботыПоАбонементу Тогда
				ТабДокумент.Присоединить(ОбластьСтрокаАбонемент);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьСтрокаСотрудник);
		КонецЦикла;
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("КонецТаблицы"));
		
		ЧислоНаименований = ЧислоНаименований + НомерСтроки;
		СуммаПоДокументу = СуммаПоДокументу + СуммаИтого;
		СуммаПоДокументуПоПолису = СуммаПоДокументуПоПолису + СуммаИтогоПоПолису;
		ТекстСуммаВсего = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаИтого + СуммаИтогоПоПолису,,"0");
		
		// Вывод строки Итого по работам.
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего  = ТекстСуммаВсего;
		ОбластьМакета.Параметры.Валюта = ВалютаДокумента;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;	
		
	// Конец вывода таблицы работ
	// Материалы.
	ЗапросСМТ = Новый Запрос;
	ЗапросСМТ.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	
	ЗапросСМТ.Текст =
	"ВЫБРАТЬ
	|	ОказаниеУслугСертификаты.Сертификат КАК Номенклатура,
	|	ОказаниеУслугСертификаты.Сертификат.Код КАК Код,
	|	ОказаниеУслугСертификаты.Сертификат.ВидСертификата.Представление КАК Товар,
	|	1 КАК Количество,
	|	ОказаниеУслугСертификаты.Сумма КАК Цена,
	|	ОказаниеУслугСертификаты.Сумма КАК Сумма,
	|	NULL КАК Характеристика,
	|	NULL КАК ЕдиницаИзмерения,
	|	0 КАК Скидка,
	|	0 КАК СуммаСкидки,
	|	ЛОЖЬ КАК ЭтоПополнениеСертификата,
	|	NULL КАК НоменклатураПредставление,
	|	ОказаниеУслугСертификаты.НеОплачиваетсяПолисом КАК НеОплачиваетсяПолисом,
	|	ОказаниеУслугСертификаты.СуммаНеПоПолису КАК СуммаНеПоПолису
	|ИЗ
	|	Документ.ОказаниеУслуг.Сертификаты КАК ОказаниеУслугСертификаты
	|ГДЕ
	|	ОказаниеУслугСертификаты.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугМатериалы.Номенклатура,
	|	ОказаниеУслугМатериалы.Номенклатура.Код,
	|	ПОДСТРОКА(ОказаниеУслугМатериалы.Номенклатура.НаименованиеПолное, 1, 500),
	|	ОказаниеУслугМатериалы.Количество,
	|	ОказаниеУслугМатериалы.Цена,
	|	ОказаниеУслугМатериалы.Сумма,
	|	ОказаниеУслугМатериалы.ХарактеристикаНоменклатуры,
	|	ОказаниеУслугМатериалы.ЕдиницаИзмерения,
	|	ОказаниеУслугМатериалы.ПроцентСкидки,
	|	ОказаниеУслугМатериалы.СуммаСкидки,
	|	ЛОЖЬ,
	|	ОказаниеУслугМатериалы.Номенклатура.Представление,
	|	ОказаниеУслугМатериалы.НеОплачиваетсяПолисом,
	|	ОказаниеУслугМатериалы.СуммаНеПоПолису
	|ИЗ
	|	Документ.ОказаниеУслуг.Материалы КАК ОказаниеУслугМатериалы
	|ГДЕ
	|	ОказаниеУслугМатериалы.Ссылка = &ТекущийДокумент
	|	И ОказаниеУслугМатериалы.Сумма > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугТовары.Номенклатура,
	|	ОказаниеУслугТовары.Номенклатура.Код,
	|	ПОДСТРОКА(ОказаниеУслугТовары.Номенклатура.НаименованиеПолное, 1, 500),
	|	ОказаниеУслугТовары.Количество,
	|	ОказаниеУслугТовары.Цена,
	|	ОказаниеУслугТовары.Сумма,
	|	ОказаниеУслугТовары.ХарактеристикаНоменклатуры,
	|	ОказаниеУслугТовары.ЕдиницаИзмерения,
	|	ОказаниеУслугТовары.ПроцентСкидки,
	|	ОказаниеУслугТовары.СуммаСкидки,
	|	ЛОЖЬ,
	|	ОказаниеУслугТовары.Номенклатура.Представление,
	|	ОказаниеУслугТовары.НеОплачиваетсяПолисом,
	|	ОказаниеУслугТовары.СуммаНеПоПолису
	|ИЗ
	|	Документ.ОказаниеУслуг.Товары КАК ОказаниеУслугТовары
	|ГДЕ
	|	ОказаниеУслугТовары.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугПополнениеСертификатов.Сертификат,
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.Код,
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.Представление,
	|	ОказаниеУслугПополнениеСертификатов.Количество,
	|	ОказаниеУслугПополнениеСертификатов.Сумма / ВЫБОР
	|		КОГДА ОказаниеУслугПополнениеСертификатов.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ОказаниеУслугПополнениеСертификатов.Количество
	|	КОНЕЦ,
	|	ОказаниеУслугПополнениеСертификатов.Сумма,
	|	NULL,
	|	NULL,
	|	0,
	|	0,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ОказаниеУслугПополнениеСертификатов.Номенклатура.НаименованиеПолное, 1, 1) = """"
	|			ТОГДА ОказаниеУслугПополнениеСертификатов.Номенклатура.Представление
	|		ИНАЧЕ ПОДСТРОКА(ОказаниеУслугПополнениеСертификатов.Номенклатура.НаименованиеПолное, 1, 500)
	|	КОНЕЦ,
	|	ОказаниеУслугПополнениеСертификатов.НеОплачиваетсяПолисом,
	|	ОказаниеУслугПополнениеСертификатов.СуммаНеПоПолису
	|ИЗ
	|	Документ.ОказаниеУслуг.ПополнениеСертификатов КАК ОказаниеУслугПополнениеСертификатов
	|ГДЕ
	|	ОказаниеУслугПополнениеСертификатов.Ссылка = &ТекущийДокумент
	|	И ОказаниеУслугПополнениеСертификатов.Сумма > 0";
	ВыборкаСМТ = ЗапросСМТ.Выполнить().Выбрать();
	
	ЕстьПозицииСМТ = Ложь;
	Пока ВыборкаСМТ.Следующий() Цикл	
		Если Не БезПолиса Или Не ЕстьПолис Или ВыборкаСМТ.НеОплачиваетсяПолисом Тогда
			ЕстьПозицииСМТ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПозицииСМТ Тогда
		ВыборкаСМТ.Сбросить();
		ЕстьСкидки = Ложь;  
		Пока ВыборкаСМТ.Следующий() Цикл	
			Если ВыборкаСМТ.Сумма <> ВыборкаСМТ.Количество*ВыборкаСМТ.Цена Тогда
				ЕстьСкидки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		// Вывести табличную часть
		Если ЕстьСкидки  Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкойМатериалы");
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкойМатериалы");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы");
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаМатериалы");
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		СуммаИтого = 0;
		СуммаИтогоПоПолису = 0;
		
		ВыборкаСМТ.Сбросить();
		Пока ВыборкаСМТ.Следующий() Цикл	
			
			Если БезПолиса И ЕстьПолис И Не ВыборкаСМТ.НеОплачиваетсяПолисом Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаСМТ.Сумма = 0 Тогда 
				Продолжить;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСМТ);
			
			Если ЗначениеЗаполнено(ВыборкаСМТ.Товар) Тогда
				ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСМТ.Товар);
			Иначе
				ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСМТ.НоменклатураПредставление);
			КонецЕсли;

			Если ВыборкаСМТ.ЭтоПополнениеСертификата Тогда
				ТекстПополнение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru=' (пополнение%1)'"),
									?(ЗначениеЗаполнено(ВыборкаСМТ.НоменклатураПредставление), НСтр("ru=' услугой: ""'")+СокрЛП(ВыборкаСМТ.НоменклатураПредставление)+"""",""));
				ОбластьСтроки.Параметры.Товар	= ОбластьСтроки.Параметры.Товар + ТекстПополнение;
			КонецЕсли;
			
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			//   Сумма / (100 - Скидка) * Скидка;
			Если ВыборкаСМТ.Цена = 0 Тогда
				ОбластьСтроки.Параметры.Цена = "0";
			КонецЕсли;   
			Если ВыборкаСМТ.Сумма = 0 Тогда
				ОбластьСтроки.Параметры.Сумма = "0";
			Иначе
				ОбластьСтроки.Параметры.Сумма = ВыборкаСМТ.Сумма;
			КонецЕсли; 
			Если ЕстьСкидки Тогда
				СуммаБезСкидки = ВыборкаСМТ.Цена * ВыборкаСМТ.Количество; 
				
				ОбластьСтроки.Параметры.Скидка         = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаБезСкидки - ВыборкаСМТ.Сумма,,"0");
				ОбластьСтроки.Параметры.СуммаБезСкидки = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаБезСкидки,,"0");
			КонецЕсли;
			
			Если ЕстьПолис И Не ВыборкаСМТ.НеОплачиваетсяПолисом Тогда 
				СуммаИтогоПоПолису = СуммаИтогоПоПолису + (ВыборкаСМТ.Сумма - ВыборкаСМТ.СуммаНеПоПолису);
				СуммаИтого = СуммаИтого + ВыборкаСМТ.СуммаНеПоПолису;
			Иначе
				СуммаИтого = СуммаИтого + ВыборкаСМТ.Сумма;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("КонецТаблицы"));
		
		ЧислоНаименований = ЧислоНаименований + НомерСтроки;
		СуммаПоДокументу = СуммаПоДокументу + СуммаИтого;
		СуммаПоДокументуПоПолису = СуммаПоДокументуПоПолису + СуммаИтогоПоПолису;
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаИтого + СуммаИтогоПоПолису) + " " + ВалютаДокумента;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Итого
	ВсегоПоДокументу = СуммаПоДокументу + СуммаПоДокументуПоПолису;
	
	Если ВсегоПоДокументу <> 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Всего наименований %1, на сумму %2'"),
				ЧислоНаименований,
				ОбщегоНазначенияКлиентСервер.ФорматСумм(ВсегоПоДокументу,ВалютаДокумента));
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоПоДокументу, ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Оплата
	ЗапросОплата = Новый Запрос;
	ЗапросОплата.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	
	ЗапросОплата.Текст =
	"ВЫБРАТЬ              
	|	ВидОплаты,
	|	Сумма,
	|	Сертификат
	|ИЗ
	|	Документ.ОказаниеУслуг.Оплата КАК ОказаниеУслугОплата
	|ГДЕ
	|	ОказаниеУслугОплата.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	ТаблицаОплата = ЗапросОплата.Выполнить().Выгрузить();
	// Добавление в таблицу оплат суммы перевода наличных в депозит.
	Если СсылкаНаОбъект.СдачуВДепозит 
		И СсылкаНаОбъект.Сдача > 0
	Тогда
		СтрокаОплата = ТаблицаОплата.Добавить();	
		СтрокаОплата.ВидОплаты = Перечисления.ВидыОплаты.Наличными;
		СтрокаОплата.Сумма = СсылкаНаОбъект.Сдача;
		СтрокаОплата.Сертификат = Справочники.Сертификаты.ПустаяСсылка();
		ТаблицаОплата.Свернуть("ВидОплаты, Сертификат", "Сумма");
	КонецЕсли;
		
	Если  Не (ТаблицаОплата.Итог("Сумма") = 0 И ВсегоПоДокументу = 0) Тогда
		Счетом = Ложь;
		Если ТаблицаОплата.Количество() = 0 Тогда
			Счетом = Истина
		КонецЕсли;	
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОплаты");
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		ОбластьОплата = Макет.ПолучитьОбласть("СтрокаОплата");
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаОплата Цикл
			
			ОбластьОплата.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьОплата.Параметры.Сумма = ОбщегоНазначенияКлиентСервер.ФорматСумм(СтрокаТабличнойЧасти.Сумма,,"0");
			
			// Сумма остатка по сертификату
			Если НЕ СтрокаТабличнойЧасти.Сертификат.Пустая() Тогда
				ОстатокПоСертификату = СертификатыКлиентов.ПолучитьОстатокПоСертификату(СтрокаТабличнойЧасти.Сертификат,
																						Новый Граница(СсылкаНаОбъект.Дата,ВидГраницы.Включая));
				ОбластьОплата.Параметры.СуммаОстатка = ОбщегоНазначенияКлиентСервер.ФорматСумм(ОстатокПоСертификату,,"0");
			Иначе 
				ОбластьОплата.Параметры.СуммаОстатка = "          - ";		
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьОплата);
		КонецЦикла;	
		
		Если ТаблицаОплата.Итог("Сумма") < СуммаПоДокументу Тогда
			Если СсылкаНаОбъект.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Аванс Тогда
				ОбластьОплата.Параметры.ВидОплаты = НСтр("ru='Зачёт предоплаты'");
				ОбластьОплата.Параметры.Сумма = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаПоДокументу - ТаблицаОплата.Итог("Сумма"),,"0");
			ИначеЕсли СсылкаНаОбъект.СуммаЗачетаАвансаПродажиВДолг > 0 Тогда 
				ОбластьОплата.Параметры.Сумма = ОбщегоНазначенияКлиентСервер.ФорматСумм(СсылкаНаОбъект.СуммаЗачетаАвансаПродажиВДолг,,"0");
				ОбластьОплата.Параметры.ВидОплаты = НСтр("ru='Зачёт предоплаты'");
				ОбластьОплата.Параметры.СуммаОстатка = "          - ";
				ТабДокумент.Вывести(ОбластьОплата);
				ОбластьОплата.Параметры.ВидОплаты = НСтр("ru='Кредит'");
				ОбластьОплата.Параметры.Сумма = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаПоДокументу - СсылкаНаОбъект.СуммаЗачетаАвансаПродажиВДолг - ТаблицаОплата.Итог("Сумма"),,"0");
			Иначе
				ОбластьОплата.Параметры.ВидОплаты = НСтр("ru='Кредит'");
				ОбластьОплата.Параметры.Сумма = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаПоДокументу - ТаблицаОплата.Итог("Сумма"),,"0");
			КонецЕсли;
			ОбластьОплата.Параметры.СуммаОстатка = "          - ";
			ТабДокумент.Вывести(ОбластьОплата);
		КонецЕсли;
		
		Если СуммаПоДокументуПоПолису > 0 Тогда
			ТекстПоДоговору = НСтр("ru='По договору с'");
			ОбластьОплата.Параметры.ВидОплаты = ТекстПоДоговору + " " + Строка(Шапка.ВидПолиса.Контрагент);
			ОбластьОплата.Параметры.Сумма = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаПоДокументуПоПолису,,"0");
			ОбластьОплата.Параметры.СуммаОстатка = "          - ";
			ТабДокумент.Вывести(ОбластьОплата);
		КонецЕсли;
		
	КонецЕсли;
	
	// Формирование текст о пополнении баланса
	СуммаДепозита = Макс(ТаблицаОплата.Итог("Сумма") - СуммаПоДокументу, 0);
	Если СуммаДепозита > 0 Тогда
		ТекстПополнение = СокрЛП(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПредставлениеВЧекеККМОперацииПополненияБаланса"));
		ТекстПополнение = НСтр("ru='В т.ч.'") + " " + Нрег(?(ЗначениеЗаполнено(ТекстПополнение), ТекстПополнение, НСтр("ru='Взнос денег на баланс'")));
		
		Область = Макет.ПолучитьОбласть("ПополнениеБаланса");
		Область.Параметры.Текст = ТекстПополнение + ": " + ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаДепозита,ВалютаДокумента,"0");
		ТабДокумент.Вывести(Область);
	КонецЕсли;
	
	// Подвал печатной формы
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	
	// Текст перед подписями
	Параметры = Новый Структура;
	Параметры.Вставить("ЕстьПозицииУслуги", ЕстьПозицииУслуги);
	Параметры.Вставить("ЕстьПозицииСМТ", ЕстьПозицииСМТ);
	Параметры.Вставить("ТаблицаОплата", ТаблицаОплата);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбластьМакета.Параметры, "ТекстПодвалаДоПодписей") Тогда
		ОбластьМакета.Параметры.ТекстПодвалаДоПодписей = ПечатьАктаОбОказанииУслуг_ТекстПодвалаДоПодписей(СсылкаНаОбъект, Параметры);
	КонецЕсли;
	
	// Вывод области
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ПечатьАктаОбОказанииУслуг_ТекстПодвалаДоПодписей(СсылкаНаОбъект, Параметры)
	
	ТекстПодвалаДоПодписей = "";
	
	Если Параметры.ЕстьПозицииУслуги Тогда
		ТекстУслуги = "Вышеуказанные услуги выполнены полностью и в срок.
					  |Заказчик/Потребитель претензий по объемам, качеству и сроку не имеет.";
					
		ОбщегоНазначенияБИТКлиентСервер.КонкатенацияСтрок(ТекстПодвалаДоПодписей, ТекстУслуги);
	КонецЕсли;		
	
	Возврат ТекстПодвалаДоПодписей;
	
КонецФункции

// Функция печати товарного чека
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект
//
// Возвращаемое значение:
//  Табличный документ.
//
Функция ПечатьТоварногоЧека(СсылкаНаОбъект)
	
	ВалютаДокумента = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВалютаУчета");
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Справочники.Валюты.Рубль;
	КонецЕсли;
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	ОказаниеУслуг.Номер,
	|	ОказаниеУслуг.Дата,
	|	ОказаниеУслуг.ДатаНачала,
	|	ОказаниеУслуг.ДатаОкончания,
	|	ОказаниеУслуг.Сотрудник,
	|	ОказаниеУслуг.Клиент,
	|	ОказаниеУслуг.Работы.(
	|		Номенклатура,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		Сотрудник КАК СотрудникРаботы,
	|		ПроцентСкидки КАК Скидка,
	|		Сертификат КАК Сертификат,
	|		СуммаСкидки КАК СуммаСкидки,
	|		Номенклатура.Представление,
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.) КАК ЕдиницаИзмерения
	|	),
	|	ОказаниеУслуг.Материалы.(
	|		Номенклатура,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПроцентСкидки,
	|		СуммаСкидки,
	|		Номенклатура.Представление,
	|		ЕдиницаИзмерения
	|	),
	|	ОказаниеУслуг.Товары.(
	|		Номенклатура,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПроцентСкидки,
	|		СуммаСкидки КАК СуммаСкидки,
	|		Номенклатура.Представление,
	|		ЕдиницаИзмерения
	|	),
	|	ОказаниеУслуг.Ответственный
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОказаниеУслуг.Работы.НомерСтроки,
	|	ОказаниеУслуг.Материалы.НомерСтроки,
	|	ОказаниеУслуг.Товары.НомерСтроки";
	
	Шапка = ЗапросУслуги.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТаблицаУслуги = Шапка.Работы.Выгрузить();
	ТаблицаМатериалы = Шапка.Материалы.Выгрузить();
	ТаблицаТовары = Шапка.Товары.Выгрузить();
	мсТаблицы = Новый Массив;
	мсТаблицы.Добавить(ТаблицаУслуги);
	мсТаблицы.Добавить(ТаблицаМатериалы);	
	мсТаблицы.Добавить(ТаблицаТовары);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТоварныйЧек";
	Макет	= Документы.ОказаниеУслуг.ПолучитьМакет("ТоварныйЧек");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Товарный чек");
	ТабДокумент.Вывести(ОбластьМакета);
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект); 
	Если ЗначениеЗаполнено(СтруктураРеквизитовОрганизации.НазваниеОрганизации) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Клиент;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ЕстьРаботы = ТаблицаУслуги.Количество() > 0;
	ЕстьТовары = ТаблицаТовары.Количество() > 0;
	ЕстьМатериалы = ТаблицаМатериалы.Количество() > 0;
	
	ЕстьСкидки = Ложь;
	Для Каждого Таблица Из мсТаблицы Цикл 
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Если СтрокаТаблицы.Сумма <> СтрокаТаблицы.Количество * СтрокаТаблицы.Цена Тогда
				ЕстьСкидки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	// Вывод шапки
	ОбластьНомера    = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов     = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных    = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок    = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы     = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	ОбластьКодов.Параметры.ИмяКолонкиКодов = НСтр("ru='Артикул'");
	ТабДокумент.Присоединить(ОбластьКодов);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.Скидка = НСтр("ru='Скидка'");
		ОбластьСкидок.Параметры.СуммаБезСкидки = НСтр("ru='Сумма без скидки'");
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Строки таблицы
	ОбластьНомера    = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов     = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных    = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок    = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы     = Макет.ПолучитьОбласть("Строка|Сумма");
	
	СуммаИтого		= 0;
	ВсегоСкидок		= 0;
	ВсегоБезСкидок	= 0;
	НомерСтроки		= 0;
	
	Для Каждого элТаблица Из мсТаблицы Цикл
		Для Каждого СтрокаТабличнойЧасти Из элТаблица Цикл
			Если СтрокаТабличнойЧасти.Сумма = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьНомера);
			ОбластьКодов.Параметры.Артикул = СтрокаТабличнойЧасти.Артикул;
			ТабДокумент.Присоединить(ОбластьКодов);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Товар) Тогда
				ОбластьДанных.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
			Иначе
				ОбластьДанных.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.НоменклатураПредставление);
			КонецЕсли;
			ОбластьДанных.Параметры.Количество = СтрокаТабличнойЧасти.Количество;
			ОбластьДанных.Параметры.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
			ОбластьДанных.Параметры.Цена = СтрокаТабличнойЧасти.Цена;
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				
				ОбластьСкидок.Параметры.Скидка         = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма,,"0");
				ОбластьСкидок.Параметры.СуммаБезСкидки = ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаБезСкидки,,"0");
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначенияКлиентСервер.ФорматСумм(СтрокаТабличнойЧасти.Сумма,,"0");
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаИтого = СуммаИтого + СтрокаТабличнойЧасти.Сумма;
			ВсегоСкидок = ВсегоСкидок + (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.СуммаСкидки);
			ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		КонецЦикла;
	КонецЦикла;
	
	// Итого
	ИмяОбласти = "Итого";
	
	ОбластьНомера    = Макет.ПолучитьОбласть(ИмяОбласти + "|НомерСтроки");
	ОбластьКодов     = Макет.ПолучитьОбласть(ИмяОбласти + "|КолонкаКодов");
	ОбластьДанных    = Макет.ПолучитьОбласть(ИмяОбласти + "|Данные");
	ОбластьСкидок    = Макет.ПолучитьОбласть(ИмяОбласти + "|Скидка");
	ОбластьСуммы     = Макет.ПолучитьОбласть(ИмяОбласти + "|Сумма");
		
	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьКодов);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Сумма = СуммаИтого;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Итого
	Если СуммаИтого<>0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Всего наименований %1, на сумму %2'"),
				НомерСтроки,
				ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаИтого,ВалютаДокумента));
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого, ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Сотрудник = Шапка.Ответственный.Сотрудник;
	Если ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(Сотрудник.Фамилия)
		И ЗначениеЗаполнено(Сотрудник.Имя)
		И ЗначениеЗаполнено(Сотрудник.Отчество)
	Тогда
		ОбластьМакета.Параметры.ОтветственныйПредставление = ОбщегоНазначения.ФамилияИнициалыФизЛица(Сотрудник);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура заполнения табличной части "Материалы" по нормам работ документа
//
// Параметры:
//  СтруктураШапкиДокумента			 - Структура	 - шапка документа
//  Работы							 - Массив		 - номенклатура услуг документа.
//  КорректировкаПоНормеНаДокумент	 - Булево		 - контроль норм расходов на документ по флагу ОбщийРасходНаУслугиДокумента
//  ТаблицаСохраненныхМатериалов	 - ТаблицаЗначений	 - количество материалов, которое присутствует в документе независимо от заполнения
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗаполнитьМатериалыПоНормамРабот(СтруктураШапкиДокумента, Работы, КорректировкаПоНормеНаДокумент = Неопределено, ТаблицаСохраненныхМатериалов = Неопределено) Экспорт
	
	Материалы = Документы.ОказаниеУслуг.ПустаяСсылка().Материалы.ВыгрузитьКолонки();
	
	Если Работы.Количество() = 0 Тогда
		Возврат Материалы;
	КонецЕсли;
	
	сзСписокРабот = Новый СписокЗначений;
	сзСписокХарактеристикНоменклатуры = Новый СписокЗначений;

	сзСписокРабот.ЗагрузитьЗначения(Работы.ВыгрузитьКолонку("Номенклатура"));
	сзСписокХарактеристикНоменклатуры.ЗагрузитьЗначения(Работы.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	
	сзСписокХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	
	ТаблицаРабот = Работы.Скопировать();
	ТаблицаРабот.Колонки.Добавить("кНомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	Для Каждого СтрокаТаблицы Из ТаблицаРабот Цикл
		СтрокаТаблицы.кНомерСтроки = СтрокаТаблицы.НомерСтроки;
	КонецЦикла;
	
	Для Каждого СтрокаРаботы Из Работы Цикл
		Если ЗначениеЗаполнено(СтрокаРаботы.ХарактеристикаНоменклатуры) Тогда
			СтрокаТаблицы = ТаблицаРабот.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаРаботы);
			СтрокаТаблицы.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СтрокаТаблицы.кНомерСтроки = СтрокаТаблицы.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем из таблицы работ, для которой будем запросом получать нормы расхода, те строки, где есть признак
	// ручного редактирования по строке: РучнаяКорректировкаМатериалов.
	мОбрИнд = ТаблицаРабот.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		СтрокаТЗ = ТаблицаРабот[мОбрИнд-сч];
		Если СтрокаТЗ.РучнаяКорректировкаМатериалов Тогда
			ТаблицаРабот.Удалить(мОбрИнд-сч);
		КонецЕсли;
	КонецЦикла;

	РаботаСДокументамиСервер.ЗаполнитьРасходМатериаловПоНормамНаРаботы(ТаблицаРабот, Материалы, СтруктураШапкиДокумента, КорректировкаПоНормеНаДокумент, ТаблицаСохраненныхМатериалов);	
	
	Материалы.Свернуть("КлючСтрокиРаботы, КлючСтроки, Работа, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Цена, ПроцентСкидки, Склад","Количество,Сумма,СуммаСкидки,СуммаСоСкидкой");
	
	// Заполнить склады материалов для тех услуг, по которым работали сотрудники, указанные в
	// табличной части и имеющие другой основной склад материалов.
	мсНеосновныеСотрудникаРаботДокумента = Новый СписокЗначений;
	Для Каждого СтрокаРаботы Из Работы Цикл
		Если ЗначениеЗаполнено(СтрокаРаботы.Сотрудник) И СтрокаРаботы.Сотрудник <> СтруктураШапкиДокумента.Сотрудник Тогда
			мсНеосновныеСотрудникаРаботДокумента.Добавить(СтрокаРаботы.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если мсНеосновныеСотрудникаРаботДокумента.Количество() <> 0 Тогда
		
		Если мсНеосновныеСотрудникаРаботДокумента.Количество() = 1 Тогда
			ТабСкладыСотрудников = Новый ТаблицаЗначений;
			ТабСкладыСотрудников.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТабСкладыСотрудников.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
			СтрСМ = ТабСкладыСотрудников.Добавить();
			СтрСМ.Сотрудник = мсНеосновныеСотрудникаРаботДокумента[0].Значение;
			СтрСМ.Склад  = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(СтрСМ.Сотрудник, "ОсновнойСкладМатериалов");
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудника", мсНеосновныеСотрудникаРаботДокумента);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиСотрудников.Сотрудник КАК Сотрудник,
			|	НастройкиСотрудников.Значение КАК Склад
			|ИЗ
			|	РегистрСведений.НастройкиСотрудников КАК НастройкиСотрудников
			|ГДЕ
			|	НастройкиСотрудников.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиСотрудников.ОсновнойСкладМатериалов)
			|			И НастройкиСотрудников.Сотрудник В (&Сотрудника)"
			;
			ТабСкладыСотрудников = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		Для Каждого СтрокаРаботы Из Работы Цикл
			Если мсНеосновныеСотрудникаРаботДокумента.НайтиПоЗначению(СтрокаРаботы.Сотрудник) <> Неопределено Тогда
				СтрокаСкладСотрудника = ТабСкладыСотрудников.Найти(СтрокаРаботы.Сотрудник);
				Если СтрокаСкладСотрудника <> Неопределено 		И 
					ЗначениеЗаполнено(СтрокаСкладСотрудника.Склад) И
					СтрокаСкладСотрудника.Склад <> СтруктураШапкиДокумента.СкладМатериалов
				Тогда
					мсСтрМатериалыРаботы = Материалы.НайтиСтроки(Новый Структура("КлючСтрокиРаботы",СтрокаРаботы.КлючСтроки));
					Для Каждого СтрокаМатериал Из мсСтрМатериалыРаботы Цикл
						СтрокаМатериал.Склад = СтрокаСкладСотрудника.Склад;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Материалы;
	
КонецФункции

// Заполняет материалы по нормам работ документа.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект.ОказаниеУслуг	 - документ продажи.
//
Процедура ЗаполнитьМатериалыПоНормамРаботОбъекта(ДокументОбъект) Экспорт
	
	Если УправлениеНастройками.ПараметрУчета("ВестиУчетРасходаМатериаловНаУслуги") Тогда
		
		Материалы = ЗаполнитьМатериалыПоНормамРабот(ДокументОбъект, ДокументОбъект.Работы.Выгрузить());
		ДокументОбъект.Материалы.Загрузить(Материалы);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданный в неё документ оказания услуг данными оказания услуг, указанного в нём как основание.
//
// Параметры:
//  Объект	 - ДокументОбъект.ОказаниеУслуг - создаваемый документ.
//
Процедура ЗаполнитьНаОснованииОУ(Объект) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, Объект.ДокументОснование, "КартаКлиента, 
															|Документ, 
															|Касса, 
															|Клиент, 
															|Сотрудник, 
															|Прейскурант, 
															|Сертификат, 
															|Склад, 
															|СкладМатериалов, 
															|ПолученоНаличными, 
															|СтатьяДвиженияДенежныхСредств");
	
	Если Объект.ДокументОснование.Метаданные().Реквизиты.Найти("Филиал") <> Неопределено Тогда
		Объект.Филиал = Объект.ДокументОснование.Филиал;
	КонецЕсли;
	Объект.РучнаяКорректировкаМатериалов = Истина;
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту");
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Работы");
	МассивТЧ.Добавить("Материалы");
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Сертификаты");
	МассивТЧ.Добавить("Скидки");
	МассивТЧ.Добавить("Оплата");
	Для Каждого ЭлементМассива Из МассивТЧ Цикл
		Объект[ЭлементМассива].Загрузить(Объект.ДокументОснование[ЭлементМассива].Выгрузить());	
	КонецЦикла;
	Сч = Объект.Материалы.Количество();
	Пока Сч <> 0 Цикл
		Если Объект.Материалы[сч-1].Сумма = 0 Тогда
			Объект.Материалы.Удалить(сч-1);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	// Расчет суммы возврата сертификатов
	Для Каждого СтрокаТЧ Из Объект.Сертификаты Цикл
		
		СуммаВозврата = РасчитатьСуммуВозвратаСертификата(СтрокаТЧ.Сертификат, Объект.Дата, Объект.Прейскурант);
		Если СуммаВозврата >= 0 Тогда
			СтрокаТЧ.Сумма = СуммаВозврата;
		Иначе
			СтрокаТЧ.Сумма = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Расчитать сумму возврата сертификата
//
// Параметры:
//  Сертификат					 - СправочникСсылка.Сертификаты - сертификат
//  ДатаВозврата				 - Дата - дата возврата
//  ПрейскурантДокументаВозврата - СправочникСсылка.Прейскурант - прейскурант документа возврата
// 
// Возвращаемое значение:
//  Число - сумма возврата.
//
Функция РасчитатьСуммуВозвратаСертификата(Сертификат, ДатаВозврата, ПрейскурантДокументаВозврата) Экспорт
	
	ВидСертификата = Сертификат.ВидСертификата;
	пчСпособыРасчетаЦены = Перечисления.СпособыРасчетаЦеныСертификатаПриВозврате;	

	Сумма = 0;
	
	Если ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаОплату Тогда
		// Сертификат на оплату (депозитный)
		Сумма = СертификатыКлиентов.ПолучитьОстатокПоСертификату(Сертификат, ДатаВозврата);
		
	ИначеЕсли Не СертификатыКлиентов.ЕстьРасходПоСертификату(Сертификат) Тогда
		// Не потраченный сертификат
		Сумма = Сертификат.СуммаПродажи;
		
	Иначе
	    // Абонемент на услуги
		Если Не ЗначениеЗаполнено(ВидСертификата.СпособРасчетаЦеныПриВозврате) Тогда
			Возврат -1; // Не смогли рассчитать.
		КонецЕсли;
		
		Если ВидСертификата.КомплексныйСертификат Тогда
			// Комплексный сертификат
			ОстаткиПоСертификату = СертификатыКлиентов.ОстаткиКомплексногоСертификата(Сертификат, ДатаВозврата);
			
			Если ВидСертификата.СпособРасчетаЦеныПриВозврате = пчСпособыРасчетаЦены.ПоРозничнойЦене Тогда
				Сумма = Сертификат.СуммаПродажи; // Цена покупки клиентом.
			КонецЕсли;
			
			Для Каждого Услуга Из ВидСертификата.Услуги Цикл
				Для Каждого СтрокаОстаток Из ОстаткиПоСертификату Цикл
					Если СтрокаОстаток.Номенклатура = Услуга.Фильтр Тогда
						
						Если Услуга.Количество < СтрокаОстаток.Остаток Тогда
							Возврат -1;
							
						ИначеЕсли ВидСертификата.СпособРасчетаЦеныПриВозврате = пчСпособыРасчетаЦены.Пропорционально Тогда
							Сумма = Сумма + СтрокаОстаток.СуммаПокупки;	
							
						ИначеЕсли ВидСертификата.СпособРасчетаЦеныПриВозврате = пчСпособыРасчетаЦены.ПоРозничнойЦене Тогда
							
							Цена = Ценообразование.ПолучитьЦену(ПрейскурантДокументаВозврата, СтрокаОстаток.Номенклатура, Сертификат.ДатаНачалаДействия);
							Сумма = Сумма - Цена.Цена * (Услуга.Количество - СтрокаОстаток.Остаток);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			// Не комплексный
			Остаток = СертификатыКлиентов.ПолучитьОстатокПоСертификату(Сертификат, ДатаВозврата);
			
			Номинал = ?(ЗначениеЗаполнено(ВидСертификата.Номинал), ВидСертификата.Номинал, 1);
			Если ВидСертификата.СпособРасчетаЦеныПриВозврате = пчСпособыРасчетаЦены.Пропорционально Тогда
				Сумма = Сертификат.СуммаПродажи * Остаток / Номинал;
				
			ИначеЕсли ВидСертификата.СпособРасчетаЦеныПриВозврате = пчСпособыРасчетаЦены.ПоРозничнойЦене Тогда
				
				Цена = Ценообразование.ПолучитьЦену(ПрейскурантДокументаВозврата, ВидСертификата.Услуги[0].Фильтр, Сертификат.ДатаНачалаДействия);
				Сумма = Сертификат.СуммаПродажи - Цена.Цена * (Номинал - Остаток);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Сумма = Макс(Сумма, 0);
	Возврат Сумма;

КонецФункции

// Перезаполнять табличную часть Скидки документа.
//
// Параметры:
//  Объект			 - ДокументОбъект.ОказаниеУслуг	 - заполняемый документ.
//  РасчитатьСкидки	 - Булево	 - будут ли пересчитаны скидки по строкам продаж у документа.
//
Процедура ПерезаполнитьСкидкиДокумента(Объект, Знач РасчитатьСкидки = Истина) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
		ДокументОбъект = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ОказаниеУслуг"));
		// В конце процедуры выполняется обратное преобразование.
	Иначе
		Возврат;
	КонецЕсли;
	
	СкидкиДоЗаполнения = ДокументОбъект.Скидки.Выгрузить();
	ДокументОбъект.Скидки.Очистить();
	ДокументОбъект.НатуральныеСкидки.Очистить();
	
	// Очистка сумм скидки
	мсИменаТЧ = Новый Массив;
	мсИменаТЧ.Добавить("Работы");
	мсИменаТЧ.Добавить("Материалы");
	мсИменаТЧ.Добавить("Товары");
	Для Каждого ИмяТЧ Из мсИменаТЧ Цикл                     
		Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТЧ] Цикл      
			СтрокаТЧ.ПроцентСкидки	= 0;
			СтрокаТЧ.СуммаСкидки	= 0;
			СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		КонецЦикла;
	КонецЦикла;
	РаботаСДокументамиСервер.РасчитатьСуммуДокумента(ДокументОбъект);
	
	ТипыСкидки = Неопределено;
	Если ЗначениеЗаполнено(Объект.КомплексныйРасчет) И
		Не КомплексныеРасчетыКлиентов.РасчетРазрешаетСкидки(Объект.КомплексныйРасчет) 
	Тогда
		ТипыСкидки = Новый Массив;
		ТипыСкидки.Добавить(Перечисления.ТипыСкидок.Бонусы);
	КонецЕсли;
	
	// Получение таблицы видов скидок действующих на дату документа.
	ТаблицаСкидок = РаботаСоСкидками.ПолучитьДействующиеСкидки(ДокументОбъект.ДатаНачала, 
																СформироватьСписокПолучателейДокумента(ДокументОбъект),
																ТипыСкидки,
																ПолучитьФилиалДокумента(ДокументОбъект));
	// Получение единой таблицы строк документа, на которые могут распространяться скидки (табличные части со скидками).
	ТаблицаПродаж = ПолучитьТаблицуПродажДокумента(ДокументОбъект);																   

	Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
		
		// Отработка флага НеРаспространятьОбщиеНакопительныеСкидки у клиента.
		Если СтрокаСкидки.ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.НакопительнаяСкидка И СтрокаСкидки.ВидСкидки.ВидПолучателя = Перечисления.ВидПолучателя.ВсеКлиенты 
			И ЗначениеЗаполнено(ДокументОбъект.Клиент) 
			И ДокументОбъект.Клиент.НеРаспространятьОбщиеНакопительныеСкидки 
		Тогда
			Продолжить;
		КонецЕсли;
				
		ТаблицаПродажПрименение = РаботаСоСкидками.ПолучитьПродажиСоответствующиеОтбору(ТаблицаПродаж, СтрокаСкидки.ВидСкидки,,ДокументОбъект.Дата);
		Если ТаблицаПродажПрименение.Количество() > 0 Тогда
			
			Если СтрокаСкидки.ФормаСкидки = Перечисления.ФормыСкидки.НатуральнаяСкидка Тогда
				СкидкаДокумента = ДокументОбъект.Скидки.Добавить();
				СкидкаДокумента.ПрименятьСкидку = Истина;
				СкидкаДокумента.Скидка			= СтрокаСкидки.ВидСкидки;
			Иначе
				Для Каждого ПрименяемаяСтрока Из ТаблицаПродажПрименение Цикл
					СкидкаДокумента = ДокументОбъект.Скидки.Добавить();
					СкидкаДокумента.ПрименятьСкидку = СтрокаСкидки.ТипСкидки <> Перечисления.ТипыСкидок.Купоны;
					СкидкаДокумента.Скидка			= СтрокаСкидки.ВидСкидки;
					СкидкаДокумента.ТабЧасть		= ПрименяемаяСтрока.ИмяТЧ;
					СкидкаДокумента.КлючСтроки		= ПрименяемаяСтрока.КлючСтроки;		
					СкидкаДокумента.Номенклатура	= ПрименяемаяСтрока.Номенклатура;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;                                                           
	
	// Восстановление флажков "ПрименятьСкидку", "Ручное редактирование", а также КоличествоБонусов.
	Отбор = Новый Структура("Скидка,Номенклатура,ТабЧасть,КлючСтроки");                                       
	Для Каждого СтрокаСкидки Из ДокументОбъект.Скидки Цикл                                
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаСкидки);	
		мсСтр = СкидкиДоЗаполнения.НайтиСтроки(Отбор);
		Если мсСтр.Количество() <> 0 Тогда
			СтрокаСкидки.ПрименятьСкидку		= мсСтр[0].ПрименятьСкидку;
			СтрокаСкидки.РучноеРедактирование	= мсСтр[0].РучноеРедактирование;
			СтрокаСкидки.КоличествоБонусов		= мсСтр[0].КоличествоБонусов;
		КонецЕсли;
	КонецЦикла;

	Если РасчитатьСкидки Тогда
		РассчитатьСкидкиДокумента(ДокументОбъект);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	КонецЕсли;

КонецПроцедуры

// Рассчитывает величины скидок документа.
//
// Параметры:
//  Объект			 - ДокументОбъект.ОказаниеУслуг	 - заполняемый документ.
//
Процедура РассчитатьСкидкиДокумента(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
		ДокументОбъект = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ОказаниеУслуг"));
		// В конце процедуры выполняется обратное преобразование.
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначенияСервер.СформироватьСтруктуруШапкиДокумента(ДокументОбъект);
	
	ТаблицаПродаж	= ПолучитьТаблицуПродажДокумента(ДокументОбъект);
	ТаблицаПродаж.ЗаполнитьЗначения(0, "СуммаСкидки");
	ТаблицаПродаж.Колонки.Добавить("СуммаБонуса",	Новый ОписаниеТипов("Число"));
	
	ТаблицаРассчитанныхСкидок = ТаблицаПродаж.СкопироватьКолонки();
	ТаблицаРассчитанныхСкидок.Колонки.Добавить("Скидка", Новый ОписаниеТипов("СправочникСсылка.ВидыСкидок"));
	
	НулевыеСкидки = Новый Массив; // Строки рассчитанных скидок, которые можно будет удалить из итогового результата расчета.
	
	Для Каждого СкидкаДокумента Из ДокументОбъект.Скидки Цикл
		
		Если СкидкаДокумента.ПрименятьСкидку Тогда
			
			Если СкидкаДокумента.Скидка.ФормаСкидки = Перечисления.ФормыСкидки.НатуральнаяСкидка Тогда
				Для Каждого ПодарокСкидки Из СкидкаДокумента.Скидка.СоставНатуральнойСкидки Цикл
					СтрокаНатуральнойСкидки = ДокументОбъект.НатуральныеСкидки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНатуральнойСкидки, ПодарокСкидки);
					СтрокаНатуральнойСкидки.Скидка = СкидкаДокумента.Скидка;
				КонецЦикла;
				
			ИначеЕсли ((	СкидкаДокумента.Скидка.ТипСкидки = Перечисления.ТипыСкидок.Скидка 
						Или СкидкаДокумента.Скидка.ТипСкидки = Перечисления.ТипыСкидок.Купоны)
							И СкидкаДокумента.Скидка.ФормаСкидки <> Перечисления.ФормыСкидки.НатуральнаяСкидка)
					Или СкидкаДокумента.Скидка.ТипСкидки = Перечисления.ТипыСкидок.НакопительнаяСкидка
			Тогда
				СтрокаПродаж = РаботаСоСкидками.НайтиСтрокуПродажСтрокиСкидки(СкидкаДокумента, ТаблицаПродаж);
				Если СтрокаПродаж <> Неопределено Тогда
					СтрокаРасчетаСкидки = ТаблицаРассчитанныхСкидок.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасчетаСкидки, СтрокаПродаж);
					СтрокаРасчетаСкидки.Скидка = СкидкаДокумента.Скидка;
					
					РаботаСоСкидками.РассчитатьСуммуПроцентСкидкиСтроки(СкидкаДокумента.Скидка, СтрокаРасчетаСкидки,СтруктураШапкиДокумента);
					
					Если СтрокаРасчетаСкидки.СуммаСкидки = 0 И СтрокаРасчетаСкидки.ПроцентСкидки = 0 Тогда
						НулевыеСкидки.Добавить(СкидкаДокумента);
						ТаблицаРассчитанныхСкидок.Удалить(СтрокаРасчетаСкидки);						
					КонецЕсли;  
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСкидки Из НулевыеСкидки Цикл
		ДокументОбъект.Скидки.Удалить(СтрокаСкидки);	
	КонецЦикла; 
	
	// Расчет объединения скидок
	// Для каждой строки берется максимум между суммой суммируемых видов скидок и каждой несуммируемой.
	Отбор = Новый Структура("ИмяТЧ, КлючСтроки");
	Для Каждого СтрокаПродаж Из ТаблицаПродаж Цикл
		
		СуммаСкидкиСуммируемыхСкидок = 0;
		ЕстьСуммируемыеСкидки = Ложь;
		МаксСтрокаРасчетаНесуммируемойСкидки = Неопределено;
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПродаж);
		мсСтр = ТаблицаРассчитанныхСкидок.НайтиСтроки(Отбор);
		Для Каждого СтрокаРасчетаСкидки Из мсСтр Цикл
			Если СтрокаРасчетаСкидки.Скидка.СуммируемаяСкидка Тогда
				СуммаСкидкиСуммируемыхСкидок = СуммаСкидкиСуммируемыхСкидок + СтрокаРасчетаСкидки.СуммаСкидки;
				ЕстьСуммируемыеСкидки = Истина;
			Иначе
				Если МаксСтрокаРасчетаНесуммируемойСкидки = Неопределено
					Или МаксСтрокаРасчетаНесуммируемойСкидки.СуммаСкидки < СтрокаРасчетаСкидки.СуммаСкидки 
				Тогда
					МаксСтрокаРасчетаНесуммируемойСкидки = СтрокаРасчетаСкидки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МаксСтрокаРасчетаНесуммируемойСкидки <> Неопределено Тогда
			Если ЕстьСуммируемыеСкидки Тогда
				СуммаСкидки = Макс(СуммаСкидкиСуммируемыхСкидок, МаксСтрокаРасчетаНесуммируемойСкидки.СуммаСкидки);
			Иначе
				СуммаСкидки = МаксСтрокаРасчетаНесуммируемойСкидки.СуммаСкидки;
			КонецЕсли;
		ИначеЕсли ЕстьСуммируемыеСкидки Тогда
			СуммаСкидки = СуммаСкидкиСуммируемыхСкидок;
		Иначе
			СуммаСкидки = 0;
		КонецЕсли;
		
		СуммаСкидки = Мин(СуммаСкидки, СтрокаПродаж.Сумма); // Сумма скидки не может быть больше полной стоимости.
		Если СуммаСкидки <> 0 Тогда
			СтрокаПродаж.СуммаСкидки = СуммаСкидки;
			РаботаСДокументамиСервер.ПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(Неопределено, Неопределено, СтрокаПродаж);
		КонецЕсли;
	КонецЦикла;
	
	// Для Каждого вида бонуса определяю, сколько их сейчас у клиента.
	БонусныеСкидки = Новый Массив;
	Для Каждого СтрокаСкидки Из ДокументОбъект.Скидки Цикл
		Если  СтрокаСкидки.Скидка.ТипСкидки = Перечисления.ТипыСкидок.Бонусы 
			И БонусныеСкидки.Найти(СтрокаСкидки.Скидка) = Неопределено
		Тогда
			БонусныеСкидки.Добавить(СтрокаСкидки.Скидка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого БонуснаяСкидка Из БонусныеСкидки Цикл

		ПолучательСкидки = РаботаСоСкидками.ОпределитьПолучаетеляСкидкиДокумента(БонуснаяСкидка, ДокументОбъект.Клиент, ДокументОбъект.КартаКлиента);
		Если ЗначениеЗаполнено(ПолучательСкидки) Тогда
			ДатаОстаткаБонуса = ?(ДокументОбъект.ЭтоНовый(), ДокументОбъект.Дата, ДокументОбъект.МоментВремени());
			БонусовКлиента	= РаботаСоСкидками.ПолучитьНакоплениеПоСкидке(БонуснаяСкидка, ПолучательСкидки, ДатаОстаткаБонуса, ДокументОбъект.Ссылка)
							* БонуснаяСкидка.НоминалБонуса;
			БонусовКлиента = Окр(БонусовКлиента,2,РежимОкругления.Окр15как20);
			
			// Если бонусов нет, удаляем все строки этой скидки из табличной части скидок документа.
			Если БонусовКлиента = 0 Тогда
				мсСтрокиСкидки = ДокументОбъект.Скидки.НайтиСтроки(Новый Структура("Скидка", БонуснаяСкидка));
				Для Каждого СтрокаСкидки Из мсСтрокиСкидки Цикл
					ДокументОбъект.Скидки.Удалить(СтрокаСкидки);
				КонецЦикла;
				Продолжить;
			КонецЕсли; 
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПродаж Из ТаблицаПродаж Цикл
			
			Если БонусовКлиента > 0 Тогда
				// Рассчет максимальной и применённой суммы бонусов.
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура",	СтрокаПродаж.Номенклатура);
				Отбор.Вставить("Скидка",		БонуснаяСкидка);
				Отбор.Вставить("ТабЧасть",		СтрокаПродаж.ИмяТЧ);
				Отбор.Вставить("КлючСтроки",	СтрокаПродаж.КлючСтроки);
				
				мсСтрокиСкидки = ДокументОбъект.Скидки.НайтиСтроки(Отбор);
				Если мсСтрокиСкидки.Количество() <> 0 Тогда
					
					СтрокаСкидки = мсСтрокиСкидки[0];
					
					// Если бонусы не применяются ко строкам со скидкой, строка игнорируется.
					Если СтрокаПродаж.СуммаСкидки <> 0
						И БонуснаяСкидка.БонусыЗапретитьОплачиватьПозицииСоСкидкой
					Тогда
						СтрокаСкидки.КоличествоБонусов = 0;
						СтрокаСкидки.БонусМакс = 0;
						Продолжить;
					КонецЕсли;
					
					Отбор.Вставить("ВидСкидки",Отбор.Скидка);
					РазмерПределаЗачета = РаботаСоСкидками.ВычислитьРазмерСкидки(Отбор, Истина);
					Если БонуснаяСкидка.ФормаСкидки = Перечисления.ФормыСкидки.Процент Тогда
						МаксимальныйБонус = РазмерПределаЗачета/100 * СтрокаПродаж.Сумма; 
					ИначеЕсли БонуснаяСкидка.ФормаСкидки = Перечисления.ФормыСкидки.Сумма Тогда
						МаксимальныйБонус = РазмерПределаЗачета;
					Иначе
						МаксимальныйБонус = 0;
					КонецЕсли;
					
					ОтнесеноСуммыБонусовНаСтрокуПродаж = Мин(МаксимальныйБонус, БонусовКлиента, СтрокаПродаж.Сумма);
					БонусовКлиента			= БонусовКлиента - ОтнесеноСуммыБонусовНаСтрокуПродаж;
					СтрокаСкидки.БонусМакс	= ОтнесеноСуммыБонусовНаСтрокуПродаж;
					
					Если СтрокаСкидки.ПрименятьСкидку Тогда
						Если СтрокаСкидки.КоличествоБонусов = 0 Тогда
							СтрокаПродаж.СуммаБонуса = ОтнесеноСуммыБонусовНаСтрокуПродаж;	
						Иначе
							Если СтрокаСкидки.РучноеРедактирование Тогда
								СтрокаПродаж.СуммаБонуса = Мин(СтрокаСкидки.КоличествоБонусов, ОтнесеноСуммыБонусовНаСтрокуПродаж);
							Иначе
								СтрокаПродаж.СуммаБонуса = ОтнесеноСуммыБонусовНаСтрокуПродаж;
							КонецЕсли;
						КонецЕсли;
					Иначе
						СтрокаПродаж.СуммаБонуса		= 0;
					КонецЕсли;
					СтрокаСкидки.КоличествоБонусов = СтрокаПродаж.СуммаБонуса;
					
					СтрокаПродаж.Сумма = СтрокаПродаж.Сумма - СтрокаПродаж.СуммаБонуса;
					
				КонецЕсли;
			Иначе
				Отбор = Новый Структура;
				
				Отбор.Вставить("Скидка",		БонуснаяСкидка);
				Отбор.Вставить("ТабЧасть",		СтрокаПродаж.ИмяТЧ);
				Отбор.Вставить("КлючСтроки",	СтрокаПродаж.КлючСтроки);
				мсСтрокиСкидки = ДокументОбъект.Скидки.НайтиСтроки(Отбор);
				Если мсСтрокиСкидки.Количество() <> 0 Тогда
					СтрокаСкидки = мсСтрокиСкидки[0];
					СтрокаСкидки.КоличествоБонусов = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Перенос скидок в документ
	Для Каждого СтрокаПродаж Из ТаблицаПродаж Цикл
		СтрокаДокумента = ДокументОбъект[СтрокаПродаж.ИмяТЧ].Найти(СтрокаПродаж.КлючСтроки, "КлючСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПродаж,"Сумма,ПроцентСкидки,СуммаСкидки");	
	КонецЦикла;
	
	Для Каждого СтрокаСкидки Из ДокументОбъект.Скидки Цикл
		// При коррекции дадим возможность указать произвольный размер бонусной скидки
		Если ДокументОбъект.Коррекция И СтрокаСкидки.Скидка.ТипСкидки = Перечисления.ТипыСкидок.Бонусы Тогда
			СтрокаСкидки.РучноеРедактирование	= Истина;
			СтрокаСкидки.БонусМакс				= 1000000;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список получателей скидок переданного документа Оказание услуг: ссылки или объекта.
//
// Параметры:
//  Документ - ДокументОбъект.ОказаниеУслуг	 - заполняемый документ.
// 
// Возвращаемое значение:
//  Массив - возможные получатели скидки в документе.
//
Функция СформироватьСписокПолучателейДокумента(Документ) Экспорт
	
	СписокПолучателей = Новый Массив;
	Если ЗначениеЗаполнено(Документ.Клиент) Тогда
		СписокПолучателей.Добавить(Документ.Клиент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.КартаКлиента) Тогда
		СписокПолучателей.Добавить(Документ.КартаКлиента);
	КонецЕсли;
	
	Возврат СписокПолучателей;
	
КонецФункции

// Возвращает значение реквизита, хранящего филиал переданного документа оказания услуг (ссылки или объекта).
// Если в данной конфигурации такой реквизит не предусматривается, возвращает Неопределено.
//
// Параметры:
//  Документ - ДокументОбъект.ОказаниеУслуг	 - заполняемый документ.
// 
// Возвращаемое значение:
//  ДокументСсылка.Филиал - найденный филиал или Неопределено.
//
Функция ПолучитьФилиалДокумента(Документ) Экспорт
	Если Документ.Метаданные().Реквизиты.Найти("Филиал") <> Неопределено Тогда
		Возврат Документ["Филиал"];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает таблицу скидок, активных для данного документа с учетом отборов скидки, даты документа
//
// Параметры:
//  Документ		 - ДокументОбъект.ОказаниеУслуг	 - рассчитываемый документ
//  ДляРасчетаСкидок - Булево						 - признак вызова в процессе расчета скидок этого документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуПродажДокумента(Документ, ДляРасчетаСкидок = Истина) Экспорт
	
	ТаблСтроки = Новый ТаблицаЗначений;
	ТаблСтроки.Колонки.Добавить("Номенклатура");
	ТаблСтроки.Колонки.Добавить("Сумма");
	ТаблСтроки.Колонки.Добавить("Количество");
	ТаблСтроки.Колонки.Добавить("Цена");
	ТаблСтроки.Колонки.Добавить("ПроцентСкидки", Новый ОписаниеТипов("Число"));
	ТаблСтроки.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число"));
	ТаблСтроки.Колонки.Добавить("ИмяТЧ");
	ТаблСтроки.Колонки.Добавить("Клиент");
	ТаблСтроки.Колонки.Добавить("ВидКарты");
	ТаблСтроки.Колонки.Добавить("КартаКлиента");
	ТаблСтроки.Колонки.Добавить("Сотрудник");
	ТаблСтроки.Колонки.Добавить("Прейскурант");
	ТаблСтроки.Колонки.Добавить("СуммаДокумента");
	ТаблСтроки.Колонки.Добавить("НомерСтроки");
	ТаблСтроки.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблСтроки.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблСтроки.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблСтроки.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Число"));
	ТаблСтроки.Колонки.Добавить("Документ", Новый ОписаниеТипов("СправочникСсылка.СтраховыеПолисы"));
	ТаблСтроки.Колонки.Добавить("НеОплачиваетсяПолисом", Новый ОписаниеТипов("Булево"));
	ТаблСтроки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОказаниеУслуг"));
	
	// Собрать все 5 тч в 1,
	ДобавитьСтрокиИзТЧ(Документ.Работы,	  "Работы", ТаблСтроки, Документ.Сотрудник, Документ);
	ДобавитьСтрокиИзТЧ(Документ.Товары,	  "Товары", ТаблСтроки, Документ.Сотрудник, Документ);
	ДобавитьСтрокиИзТЧ(Документ.Материалы, "Материалы", ТаблСтроки, Документ.Сотрудник, Документ);
	
	ТаблСтроки.ЗаполнитьЗначения(Документ.Ссылка,					"Ссылка");
	ТаблСтроки.ЗаполнитьЗначения(Документ.Клиент, 					"Клиент");
	ТаблСтроки.ЗаполнитьЗначения(Документ.Прейскурант,				"Прейскурант");
	ТаблСтроки.ЗаполнитьЗначения(ПолучитьСуммуДокументаБезУчетаСкидок(Документ), "СуммаДокумента");
	ТаблСтроки.ЗаполнитьЗначения(Документ.КартаКлиента,				"КартаКлиента");
	ТаблСтроки.ЗаполнитьЗначения(Документ.КартаКлиента.ВидКарты,	"ВидКарты");
	ТаблСтроки.ЗаполнитьЗначения(Документ.Документ,					"Документ");
		
	Если ДляРасчетаСкидок Тогда
		Для Каждого СтрокаПродаж Из ТаблСтроки Цикл
			СтрокаПродаж.Сумма = СтрокаПродаж.Количество * СтрокаПродаж.Цена;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблСтроки;
	
КонецФункции

Процедура ДобавитьСтрокиИзТЧ(ТЧ, ИмяТЧ, ТаблСтроки, СотрудникДокумента, Документ)
	
	Для Каждого стрТЧ Из ТЧ Цикл
		Если Не (ИмяТЧ="Материалы" И стрТЧ.Сумма=0) Тогда
			новСтр = ТаблСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(новСтр, стрТЧ);
			новСтр.ИмяТЧ			= ИмяТЧ;
			
			Если ИмяТЧ = "Материалы" Тогда
				новСтр.Сотрудник = ПолучитьСотрудникаСтрокиМатериала(Документ, стрТЧ);
			Иначе
				новСтр.Сотрудник = ?(ЗначениеЗаполнено(стрТЧ.Сотрудник), стрТЧ.Сотрудник, СотрудникДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьСотрудникаСтрокиМатериала(Документ, СтрокаМатериала)
	
	СтрокаРаботы = Неопределено;
	Для Каждого СтрокаТЧ Из Документ.Работы Цикл
		Если СтрокаТЧ.КлючСтроки = СтрокаМатериала.КлючСтрокиРаботы Тогда
			СтрокаРаботы = СтрокаТЧ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаРаботы <> Неопределено Тогда
		Возврат ?(ЗначениеЗаполнено(СтрокаРаботы.Сотрудник), СтрокаРаботы.Сотрудник, Документ.Сотрудник);
	Иначе
		Возврат Документ.Сотрудник;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСуммуДокументаБезУчетаСкидок(Документ)
	
	СтруктураДокумента = Новый Структура("СуммаДокумента");
	СтруктураДокумента.Вставить("Работы",		Документ.Работы.Выгрузить());
	СтруктураДокумента.Вставить("Материалы",	Документ.Материалы.Выгрузить());
	СтруктураДокумента.Вставить("Товары",		Документ.Товары.Выгрузить());
	СтруктураДокумента.Вставить("Сертификаты",	Документ.Сертификаты.Выгрузить());
	СтруктураДокумента.Вставить("Ссылка",		Документ.Ссылка);
	СтруктураДокумента.Вставить("ПополнениеСертификатов",	Документ.ПополнениеСертификатов.Выгрузить());
	СтруктураДокумента.Вставить("Документ",		Документ.Документ);
	
	РаботаСДокументамиСервер.РасчитатьСуммуДокумента(СтруктураДокумента);
	
	Возврат СтруктураДокумента.СуммаДокумента;
	
КонецФункции

// Возвращает сумму, оплаченную безналом в документе без учета ЭС НСПК
//
// Параметры:
//  Документ - ДокументСсылка.ОказаниеУслуг	 - Документ продажи.
// 
// Возвращаемое значение:
//  Число - Сумма оплаты. 
//
Функция СуммаБезналичнойОплатыДокумента(Документ) Экспорт
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(Документ.ИдентификаторКорзиныНСПК) Тогда
		Для Каждого СтрокаОплаты Из Документ.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплаты.Безналичные
				И СтрокаОплаты.ЭквайринговыйТерминал.Тип <> Перечисления.ТипыСпособовОплат.СертификатНСПК
			Тогда
				Сумма = Сумма + СтрокаОплаты.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

#Область ЧекиККМ                              

#Область ПерезаполнитьЧекиДокумента

// Перезаполняет суммы к оплате в чеках документа
//
// Параметры:
//  Объект	 - ДокументОбъект.ОказаниеУслуг - оказание услуг
//
Процедура ПерезаполнитьЧекиДокумента(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
		ДокументОбъект = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ОказаниеУслуг"));
		// В конце процедуры выполняется обратное преобразование.
	Иначе
		Возврат;
	КонецЕсли;
	
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(ДокументОбъект.Филиал, Истина);
	
	// Получение единой таблицы строк документа
	ТаблицаПродаж	= ПолучитьТаблицуПродажДокументаДляЧеков(ДокументОбъект, Ложь, Истина);
	ОсновнаяСНО		= НастройкаПечатиЧеков.ОсновнаяСистемаНалогоОбложения;
	СтрокаОСН		= Неопределено;
	
	ДатаРасчетаСтавкиНДС = ДокументОбъект.Дата;	
		
	// Сначала отнесем все на чек по основной СНО
	Для Каждого СтрокаЧека Из ДокументОбъект.Чеки Цикл
		Если ОсновнаяСНО = СтрокаЧека.СистемаНалогоОбложения И Не СтрокаЧека.РеализацияСертификата Тогда
			
			СтрокаОСНЧек = СтрокаЧека;
			// Используем таблицу продаж для ускорения обхода ТЧ Документа
			Для Каждого СтрокаПродаж из ТаблицаПродаж Цикл
				СтавкаНДС = УчетНДСВызовСервера.СтавкаНДС(СтрокаПродаж.Номенклатура, ТекущаяДатаСеанса());
				
				стрТЧ = ДокументОбъект[СтрокаПродаж.ИмяТЧ][СтрокаПродаж.НомерСтроки - 1];
				Если НЕ ОтраслевыеДополнения.НоменклатураПолностьОплачиваетсяПолисом(стрТЧ, ДокументОбъект) Тогда
					стрТЧ.КлючСтрокиЧеки		= СтрокаЧека.КлючСтроки;
					стрТЧ.СтавкаНДСФискализации	= СтавкаНДС;    // индивидуальные ставки номенклатур
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Запомним ставку по умолчанию для каждой СНО, чтобы облегчить подстановку в ставки номенклатур в других ТЧ
		СтрокаЧека.СтавкаНДСПоУмолчаниюФискализации = УчетНДСКлиентСервер.ПолучитьОсновнуюСтавкуНДСПоСНО(СтрокаЧека.СистемаНалогоОбложения, НастройкаПечатиЧеков, ТекущаяДатаСеанса());
	КонецЦикла;
	
	// Теперь, если используется доп СНО = ЕНВД, найдем все строки, на которые могут распространяться отборы по ЕНВД
	// и свяжем найденные строки с чеком ЕНВД.
	ЕстьУчетПоЕНВД = НастройкаПечатиЧеков.ЕстьУчетПоЕНВД;
	ЕстьУчетПоПатенту = НастройкаПечатиЧеков.ЕстьУчетПоПатенту;
	Для Каждого СтрокаЧека Из ДокументОбъект.Чеки Цикл
		Если ЕстьУчетПоЕНВД И СтрокаЧека.СистемаНалогоОбложения = Перечисления.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход Тогда
			ВидОтбора = "ОтборЕНВД";
		ИначеЕсли ЕстьУчетПоПатенту И СтрокаЧека.СистемаНалогоОбложения = Перечисления.СистемыНалогообложения.ПатентнаяСистемаНалогообложения Тогда 
			ВидОтбора = "ОтборПатент";
		Иначе 
			ВидОтбора = Неопределено;
		КонецЕсли;
		Если ВидОтбора <> Неопределено Тогда  
			ТаблицаПродажПрименение = РаботаСНДССервер.ПолучитьПродажиПоДополнительнойСНО(ТаблицаПродаж, ДокументОбъект.Филиал.НастройкаПечатиЧеков, ДокументОбъект.Дата, ВидОтбора);
			Если ТаблицаПродажПрименение <> Неопределено 
				И ТаблицаПродажПрименение.Количество() > 0 Тогда
				Для Каждого ПрименяемаяСтрока Из ТаблицаПродажПрименение Цикл
					СтрокаТЧ = ДокументОбъект[ПрименяемаяСтрока.ИмяТЧ][ПрименяемаяСтрока.НомерСтроки - 1];
					СтрокаТЧ.КлючСтрокиЧеки = СтрокаЧека.КлючСтроки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	// Переносим оплаты сертификатом в соответствующий чек
	СтрокаЧека = ДокументОбъект.Чеки.Найти(Истина, "РеализацияСертификата");
	Если СтрокаЧека <> Неопределено Тогда
		СтрокиРабот = ТаблицаПродаж.НайтиСтроки(Новый Структура("ИмяТЧ", "Работы"));
		Для Каждого СтрокаПродаж Из СтрокиРабот Цикл
			СтрокаТЧ = ДокументОбъект[СтрокаПродаж.ИмяТЧ][СтрокаПродаж.НомерСтроки - 1];
			Если ЗначениеЗаполнено(СтрокаТЧ.Сертификат)
				И РаботаСТорговымОборудованием.ПолучитьДатуПервойПродажиСертификата(СтрокаТЧ.Сертификат, ДокументОбъект.Ссылка) > Константы.ДатаНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041.Значение() 
			Тогда
				СтрокаТЧ.КлючСтрокиЧеки = СтрокаЧека.КлючСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// В случае если необходимо включать в сумму услуги или в отдельную услугу, материлы относим к тому же КлючСтроки чека,
	// что и работа для которой этот материал
	Если НастройкаПечатиЧеков.СпособФискализацииМатериалов = Перечисления.СпособФискализацииРасходныхМатериалов.ВключатьВСуммуУслуги
		ИЛИ НастройкаПечатиЧеков.СпособФискализацииМатериалов = Перечисления.СпособФискализацииРасходныхМатериалов.ПечататьОтдельнойУслугой
	Тогда
		
		Для Каждого СтрокаПродаж из ТаблицаПродаж Цикл
			
			Если Не СтрокаПродаж.ИмяТЧ = "Материалы" Тогда
				Продолжить;	
			КонецЕсли;
			
			стрТЧ = ДокументОбъект[СтрокаПродаж.ИмяТЧ][СтрокаПродаж.НомерСтроки - 1];
			КлючСтрокиРаботы = стрТЧ.КлючСтрокиРаботы;
			стрРабота =  ДокументОбъект["Работы"].Найти(КлючСтрокиРаботы, "КлючСтроки");
			
			Если стрРабота = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			ЧекРеализацияСертификата = ДокументОбъект.Чеки.Найти(Истина, "РеализацияСертификата");
			КлючСтрокиРеализацииСертификата = ?(ЧекРеализацияСертификата = Неопределено, -1, ЧекРеализацияСертификата.КлючСтроки);
			
			Если КлючСтрокиРеализацииСертификата <> стрРабота.КлючСтрокиЧеки Тогда
				стрТЧ.СтавкаНДСФискализации = стрРабота.СтавкаНДСФискализации; 
				стрТЧ.КлючСтрокиЧеки = стрРабота.КлючСтрокиЧеки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Дозаполним служебные ставки НДС в ТЧ ставками по умолчанию для выбранных СНО	
	Для Каждого СтрокаПродаж Из ТаблицаПродаж Цикл
		СтрокаТЧ = ДокументОбъект[СтрокаПродаж.ИмяТЧ][СтрокаПродаж.НомерСтроки - 1];
		Для Каждого СтрокаЧеки Из ДокументОбъект.Чеки Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДСФискализации) И СтрокаЧеки.КлючСтроки = СтрокаТЧ.КлючСтрокиЧеки Тогда
				СтрокаТЧ.СтавкаНДСФискализации = СтрокаЧеки.СтавкаНДСПоУмолчаниюФискализации;			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;		
	
	// Определим суммы к оплате по чекам
	Суммы = Новый Структура();
	Для Каждого стр Из ДокументОбъект.Чеки Цикл
		Суммы.Вставить("ф" + Строка(стр.КлючСтроки),0);
	КонецЦикла;
	
	Для Каждого СтрокаПродаж Из ТаблицаПродаж Цикл
		СтрокаТЧ = ДокументОбъект[СтрокаПродаж.ИмяТЧ][СтрокаПродаж.НомерСтроки - 1];
		Если ЗначениеЗаполнено(СтрокаТЧ.КлючСтрокиЧеки) Тогда
			Суммы["ф" + Строка(СтрокаТЧ.КлючСтрокиЧеки)] = Суммы["ф" + Строка(СтрокаТЧ.КлючСтрокиЧеки)] + ОтраслевыеДополнения.ПолучитьОплачиваемуюСуммуСтрокиТЧ(СтрокаТЧ, ДокументОбъект);
		КонецЕсли;
	КонецЦикла;
	
	// Сохраним суммы в чеках
	Для Каждого стр из ДокументОбъект.Чеки Цикл
		стр.Сумма = Суммы["ф" + Строка(стр.КлючСтроки)];
	КонецЦикла;
	
	// Недоплаты и переплаты учтем в специальной сумме депозита
	Если ДокументОбъект.СдачуВДепозит
		И ДокументОбъект.Сдача <> 0
	Тогда
		ВеличинаВзносаНаДепозит = ДокументОбъект.Сдача;
	Иначе 
		ВеличинаВзносаНаДепозит = 0;
	КонецЕсли;
		
	// Учтем, что по сути оплаты сертификатом и за счет фирмы являются "как бы расходованием депозита"
	СуммаКорректировки = 0;
	Для каждого стр из ДокументОбъект.Оплата Цикл
		Если стр.ВидОплаты = Перечисления.ВидыОплаты.ЗаСчетФирмы
			ИЛИ стр.ВидОплаты = Перечисления.ВидыОплаты.Сертификатом
			Тогда
			СуммаКорректировки = СуммаКорректировки + стр.Сумма;	
		КонецЕсли;
	КонецЦикла;
	// Рассчитаем сумму использования депозита
	СуммаСнятияСДепозита =  ДокументОбъект.Чеки.Итог("Сумма") - ДокументОбъект.Оплата.Итог("Сумма") - ВеличинаВзносаНаДепозит;
	
	Если СуммаСнятияСДепозита > 0 Тогда		// Недоплата
		ОстатокСуммыДепозита = 0;
		// Пытаемся отнести всю сумму снятую с депозита на основную систему налогообложения
		Для Каждого СтрокаЧека из ДокументОбъект.Чеки Цикл
			Если ОсновнаяСНО = СтрокаЧека.СистемаНалогоОбложения Тогда
				Если СтрокаЧека.Сумма >= СуммаСнятияСДепозита Тогда
					СтрокаЧека.СуммаДепозит = СуммаСнятияСДепозита;
				Иначе
					СтрокаЧека.СуммаДепозит = СтрокаЧека.Сумма;
					ОстатокСуммыДепозита = СуммаСнятияСДепозита - СтрокаЧека.СуммаДепозит;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Отнесем остатки снятые с депозита на добавочную систему налогообложения
		Для Каждого СтрокаЧека Из ДокументОбъект.Чеки Цикл
			Если ОсновнаяСНО <> СтрокаЧека.СистемаНалогоОбложения Тогда
				Если СтрокаЧека.Сумма >= ОстатокСуммыДепозита Тогда
					СтрокаЧека.СуммаДепозит = ОстатокСуммыДепозита;
				Иначе
					СтрокаЧека.СуммаДепозит = СтрокаЧека.Сумма;
				КонецЕсли;
				ОстатокСуммыДепозита = ОстатокСуммыДепозита - СтрокаЧека.Сумма; 
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СуммаСнятияСДепозита < 0 Тогда	// Перплата. 
		СуммаСнятияСДепозита = -СуммаСнятияСДепозита;
		Если Не ДокументОбъект.СдачуВДепозит Тогда
			СуммаСнятияСДепозита = СуммаСнятияСДепозита - ВеличинаВзносаНаДепозит; // Уберем сдачу. 
		КонецЕсли;
		// Относим всю сумму внесенную с депозита на основную систему налогообложения
		Для Каждого СтрокаЧека из ДокументОбъект.Чеки Цикл
			Если ОсновнаяСНО = СтрокаЧека.СистемаНалогоОбложения Тогда
				СтрокаЧека.СуммаВзнос = СуммаСнятияСДепозита;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	// Разнесем полученные оплаты по чекам
	РазнестиОплатуПоЧекам(ДокументОбъект);
	
	// Найдем и удалим те чеки, по которым в документе нет продаж
	СтрокиЧековНаУдаление = РаботаСТорговымОборудованием.ПолучитьУдаляемыеЧекиБезПродаж(ДокументОбъект, ТаблицаПродаж);	
	Для Каждого СтрокаНаУдаление Из СтрокиЧековНаУдаление Цикл
		ДокументОбъект.Чеки.Удалить(СтрокаНаУдаление);	
	КонецЦикла;
	
	// Вернем результат в форму
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет суммы, с учетом видов оплаты в чеках
Процедура РазнестиОплатуПоЧекам(Документ)
	
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Документ.Филиал);	
	пчВидыОплаты = Перечисления.ВидыОплаты;
	
	ТаблицаОплаты	= Документ.Оплата.Выгрузить();
	ТаблицаОплаты.Свернуть("ВидОплаты", "Сумма");
	// Если переплата наличными идёт не в сдачу, а в депозит - прибавляю сдачу к сумме оплаты наличными. 
	// Учитываем, что переплата наличными не отражается в табличной части "Оплаты".
	Если Документ.СдачуВДепозит
		И Документ.Сдача <> 0
	Тогда
		СтрокаОплатыНаличными = ТаблицаОплаты.Найти(пчВидыОплаты.Наличными, "ВидОплаты");
		Если СтрокаОплатыНаличными = Неопределено Тогда
			СтрокаОплатыНаличными = ТаблицаОплаты.Добавить();
			СтрокаОплатыНаличными.ВидОплаты = пчВидыОплаты.Наличными;
		КонецЕсли;
		
		СтрокаОплатыНаличными.Сумма = СтрокаОплатыНаличными.Сумма + Документ.Сдача;
	КонецЕсли;
	ОсновнаяСНО = НастройкаПечатиЧеков.ОсновнаяСистемаНалогообложения;			
	// По каждому чеку набираем сумму к оплате из доступных сумм по видам оплаты в определенном порядке
	Для Каждого стр Из Документ.Чеки Цикл
		
		СуммаНаличныхДругихЧеков	= Документ.Чеки.Итог("СуммаНал");
		СуммаБезналичныхДругихЧеков	= Документ.Чеки.Итог("СуммаБезнал");
		СуммаСертификатовДругихЧеков= Документ.Чеки.Итог("СуммаСертификат");
		СуммаДепозитовДругихЧеков	= Документ.Чеки.Итог("СуммаДепозит") - стр.СуммаДепозит; // Т.к. депозиты предзаполняются ранее.
		
		фПродолжатьРаспределениеСуммы = Истина;
		РаспределяемаяСумма = стр.Сумма - стр.СуммаДепозит + стр.СуммаВзнос;
		ТаблицаОплатыРаспределенная = ТаблицаОплаты.Скопировать();
		ТаблицаОплатыРаспределенная.Очистить();
		
		// 1. Безналичные
		Если фПродолжатьРаспределениеСуммы Тогда
			ВидОплаты = пчВидыОплаты.Безналичные;
			СтрокаОплаты = ТаблицаОплаты.Найти(ВидОплаты, "ВидОплаты");
			Если СтрокаОплаты <> Неопределено Тогда
				Если СтрокаОплаты.Сумма - СуммаБезналичныхДругихЧеков >= РаспределяемаяСумма Тогда
					нСтрокаОплаты = ТаблицаОплатыРаспределенная.Добавить();
					нСтрокаОплаты.ВидОплаты = ВидОплаты;
					нСтрокаОплаты.Сумма = РаспределяемаяСумма;
					фПродолжатьРаспределениеСуммы = Ложь;
					РаспределяемаяСумма = 0;
				Иначе
					нСтрокаОплаты = ТаблицаОплатыРаспределенная.Добавить();
					нСтрокаОплаты.ВидОплаты = ВидОплаты;
					нСтрокаОплаты.Сумма = СтрокаОплаты.Сумма - СуммаБезналичныхДругихЧеков;
					РаспределяемаяСумма = РаспределяемаяСумма - нСтрокаОплаты.Сумма;
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		// 2. Наличные
		Если фПродолжатьРаспределениеСуммы Тогда
			ВидОплаты = пчВидыОплаты.Наличными;
			СтрокаОплаты = ТаблицаОплаты.Найти(ВидОплаты, "ВидОплаты");
			Если СтрокаОплаты <> Неопределено Тогда
				Если СтрокаОплаты.Сумма - СуммаНаличныхДругихЧеков >= РаспределяемаяСумма Тогда
					нСтрокаОплаты = ТаблицаОплатыРаспределенная.Добавить();
					нСтрокаОплаты.ВидОплаты = ВидОплаты;
					нСтрокаОплаты.Сумма = РаспределяемаяСумма;
					фПродолжатьРаспределениеСуммы = Ложь;
					РаспределяемаяСумма = 0;
				Иначе
					нСтрокаОплаты = ТаблицаОплатыРаспределенная.Добавить();
					нСтрокаОплаты.ВидОплаты = ВидОплаты;
					нСтрокаОплаты.Сумма = СтрокаОплаты.Сумма - СуммаНаличныхДругихЧеков;
					РаспределяемаяСумма = РаспределяемаяСумма - нСтрокаОплаты.Сумма;
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		// 3. Сертификатом и за счет фирмы
		Если фПродолжатьРаспределениеСуммы Тогда
			СуммаОплаты = 0;
			СтрокаОплатыСертификат = ТаблицаОплаты.Найти(пчВидыОплаты.Сертификатом, "ВидОплаты");
			Если СтрокаОплатыСертификат <> Неопределено Тогда
				СуммаОплаты = СуммаОплаты + СтрокаОплатыСертификат.Сумма;				
			КонецЕсли;
			СтрокаОплатыЗаСчетФирмы = ТаблицаОплаты.Найти(пчВидыОплаты.ЗаСчетФирмы, "ВидОплаты");
			Если СтрокаОплатыЗаСчетФирмы <> Неопределено Тогда
				СуммаОплаты = СуммаОплаты + СтрокаОплатыЗаСчетФирмы.Сумма;				
			КонецЕсли;
			Если СуммаОплаты <> 0 Тогда
				ВидОплаты = пчВидыОплаты.Сертификатом;
				Если СуммаОплаты - СуммаСертификатовДругихЧеков>= РаспределяемаяСумма Тогда
					нСтрокаОплаты = ТаблицаОплатыРаспределенная.Добавить();
					нСтрокаОплаты.ВидОплаты = ВидОплаты;
					нСтрокаОплаты.Сумма = РаспределяемаяСумма;
					фПродолжатьРаспределениеСуммы = Ложь;
					РаспределяемаяСумма = 0;
				Иначе
					нСтрокаОплаты = ТаблицаОплатыРаспределенная.Добавить();
					нСтрокаОплаты.ВидОплаты = ВидОплаты;
					нСтрокаОплаты.Сумма = СуммаОплаты - СуммаСертификатовДругихЧеков;
					РаспределяемаяСумма = РаспределяемаяСумма - нСтрокаОплаты.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// 0.Все лишнее уходит в 3й вид оплаты
		Если РаспределяемаяСумма > 0 Тогда
			ВидОплаты = пчВидыОплаты.ЗаСчетФирмы;
			рСтрокаОплаты = ТаблицаОплатыРаспределенная.Найти(ВидОплаты, "ВидОплаты");
			Если рСтрокаОплаты <> Неопределено Тогда
				рСтрокаОплаты.Сумма = рСтрокаОплаты.Сумма + РаспределяемаяСумма;
				фПродолжатьРаспределениеСуммы = Ложь;
				РаспределяемаяСумма = 0;
			Иначе
				нСтрокаОплаты = ТаблицаОплатыРаспределенная.Добавить();
				нСтрокаОплаты.ВидОплаты = ВидОплаты;
				нСтрокаОплаты.Сумма = РаспределяемаяСумма;
				фПродолжатьРаспределениеСуммы = Ложь;
				РаспределяемаяСумма = 0;
			КонецЕсли;		
		КонецЕсли;
		
		// Заполним суммы в колонках текущей строки
		Для Каждого стрОплата из ТаблицаОплатыРаспределенная Цикл
			Если	  стрОплата.ВидОплаты = пчВидыОплаты.Наличными Тогда
				стр.СуммаНал		= стрОплата.Сумма;
				
			ИначеЕсли стрОплата.ВидОплаты = пчВидыОплаты.Безналичные Тогда
				стр.СуммаБезнал		= стрОплата.Сумма;
				
			ИначеЕсли стрОплата.ВидОплаты = пчВидыОплаты.Сертификатом Тогда
				стр.СуммаСертификат	= стрОплата.Сумма;
				
			ИначеЕсли стрОплата.ВидОплаты = пчВидыОплаты.ЗаСчетФирмы
				И стр.СуммаДепозит = 0
			Тогда
				стр.СуммаДепозит	= стрОплата.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПродажДокументаДляЧеков(Документ, ДляРасчетаСкидок = Истина, ВключатьСертификаты = Ложь)
	
	ТаблСтроки = Новый ТаблицаЗначений;
	ТаблСтроки.Колонки.Добавить("Номенклатура");
	ТаблСтроки.Колонки.Добавить("ВидНоменклатуры");
	ТаблСтроки.Колонки.Добавить("ИмяТЧ");
	ТаблСтроки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	// Собрать все 5 тч в 1,
	ДобавитьСтрокиИзТЧДляЧеков(Документ.Работы,	  "Работы", ТаблСтроки, Документ);
	ДобавитьСтрокиИзТЧДляЧеков(Документ.Товары,	  "Товары", ТаблСтроки, Документ);
	ДобавитьСтрокиИзТЧДляЧеков(Документ.Материалы, "Материалы", ТаблСтроки, Документ);
	ДобавитьСтрокиИзТЧДляЧеков(Документ.Сертификаты, "Сертификаты", ТаблСтроки, Документ);
	ДобавитьСтрокиИзТЧДляЧеков(Документ.ПополнениеСертификатов, "ПополнениеСертификатов", ТаблСтроки, Документ);
	
	Возврат ТаблСтроки;
	
КонецФункции

Процедура ДобавитьСтрокиИзТЧДляЧеков(ТЧ, ИмяТЧ, ТаблСтроки, Документ)
	
	Для Каждого стрТЧ Из ТЧ Цикл
		
		// Пропускаем материалы-товары с нулевой суммой в чеке
		Если (ИмяТЧ = "Материалы" Или ИмяТЧ = "Товары")
			И ОтраслевыеДополнения.ПолучитьОплачиваемуюСуммуСтрокиТЧ(стрТЧ, Документ) = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавление строки
		новСтр = ТаблСтроки.Добавить();
		новСтр.НомерСтроки = стрТЧ.НомерСтроки;
		Если ИмяТЧ = "ПополнениеСертификатов" Или ИмяТЧ = "Сертификаты" Тогда
			новСтр.Номенклатура = стрТЧ.Сертификат.ВидСертификата.Номенклатура;
		Иначе
			новСтр.Номенклатура = стрТЧ.Номенклатура;
		КонецЕсли;
		новСтр.ВидНоменклатуры	= новСтр.Номенклатура.ВидНоменклатуры;
		новСтр.ИмяТЧ			= ИмяТЧ;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Формирует структуру шаблона чека для передачи в методы библиотеки оборудования
//
// Параметры:
//  Объект			 - ДокументОбъект.ОказаниеУслуг - оказание услуг
//  СтрокаЧекаИндекс - Строка - строка чека 
//  ПараметрыЧека	 - Структура - параметры чека
// 
// Возвращаемое значение:
//  Структура - шаблон чека.
//
Функция ПолучитьШаблонЧека(Объект, СтрокаЧекаИндекс, ПараметрыЧека) Экспорт
	
	СтрокаТЧЧеки = Объект.Чеки[СтрокаЧекаИндекс];
	
	НастройкаПечатиЧеков		 = ПараметрыЧека.НастройкаПечатиЧеков;
	ПерсональныеДанныеПокупателя = ПараметрыЧека.ПерсональныеДанныеПокупателя;
	ОперационныйРеквизит		 = ПараметрыЧека.ОперационныйРеквизит;
	ОтраслевойРеквизит			 = ПараметрыЧека.ОтраслевойРеквизит;
	Электронно					 = ПараметрыЧека.Электронно;
	ШиринаСтроки				 = ПараметрыЧека.ШиринаСтроки;
	ОборудованиеСсылка			 = ПараметрыЧека.ОборудованиеСсылка;
	УникальныйИдентификаторФормы = ПараметрыЧека.УникальныйИдентификаторФормы;
	
	// Общие параметры чека.
	Если НЕ Объект.Коррекция Тогда
		ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	Иначе
		ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	КонецЕсли;
	
	// Параметры установлены по умолчанию.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ПродажаКлиенту") Тогда
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");		//  0 - Тип чека Продажа
	Иначе
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");	//  1 - Тип чека Возврат
	КонецЕсли;
	
	ОбщиеПараметры.ТипРасчета = ТипРасчета; // Перечисление "ТипыРасчетаДенежнымиСредствами"
	ОбщиеПараметры.Электронно = Электронно; // Если Электронно = Истина, то чек будет предоставлен в электронной форме, без печати.
	
	ОбщиеПараметры.Отправляет1СSMS   = Ложь; // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Ложь; // Email отправляет средствами 1C.
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;
	
	ОбщиеПараметры.ПокупательEmail = ?(НЕ ЗначениеЗаполнено(Объект.АдресEmailЧек),Неопределено ,Объект.АдресEmailЧек);
	ОбщиеПараметры.ПокупательНомер = ?(НЕ ЗначениеЗаполнено(Объект.ТелефонЧек),Неопределено ,Объект.ТелефонЧек);	
	
	// Начало блока коррекции
	ОбщиеПараметры.Вставить("Организация"			  , ОбщегоНазначенияБИТКлиентСервер.ОрганизацияОбъекта(Объект.Филиал)); // Ссылка,Обязательно. Организация по которому пробивается чек.
	ОбщиеПараметры.Вставить("ДополнительныйРеквизит"  , Объект.ДополнительныйРеквизит); // Строка,Необязательно - Дополнительный реквизит Тег 1192.
	ОбщиеПараметры.Вставить("СформироватьЧекКоррекции", Объект.Коррекция); // Булево,Необязательно - сформировать чек коррекции, только для ФФД 1.1.
	
	Если Объект.Коррекция Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Не Объект.НеприменениеККТ
		Тогда
			ОбщиеПараметры.КорректируемыйДокумент = Объект.ДокументОснование;
		КонецЕсли;
		ОбщиеПараметры.ДанныеКоррекции.ТипКоррекции      = Объект.ТипКоррекции;
		ОбщиеПараметры.ДанныеКоррекции.ОписаниеКоррекции = Объект.ОписаниеКоррекции;
		ОбщиеПараметры.ДанныеКоррекции.ДатаКоррекции     = Объект.ДатаКоррекции;
		ОбщиеПараметры.ДанныеКоррекции.НомерПредписания  = Объект.НомерПредписания;
		ОбщиеПараметры.НеприменениеККТ					 = Объект.НеприменениеККТ;	
		
		// Т.к. может быть несколько чеков по текущему документу, а сторнировать данные документа-основания надо всего 1 раз,
		// то проверим, что мы это еще не выполняли при печати предыдущих строк ТЧ Чеки.
		Если СтрокаТЧЧеки <> Неопределено Тогда
			Для Каждого СтрЧек Из Объект.Чеки Цикл
				Если ЗначениеЗаполнено(СтрЧек.НомераЧековСторно) И СтрЧек <> СтрокаТЧЧеки Тогда
					ОбщиеПараметры.Вставить("НеСторнировать", Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	// Конец блока коррекции
	
	// Подготовка таблицы товаров.
	
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	
	ОбщиеПараметры.Вставить("КлючСтрокиЧеки", СтрокаТЧЧеки.КлючСтроки);
	
	Если Не РаботаСТорговымОборудованием.ПечататьЧек(СтрокаТЧЧеки) Тогда
		ОбщиеПараметры = Неопределено;
		Возврат ОбщиеПараметры;
	КонецЕсли;
	
	// Если чек содержит суммы к оплате/возврату.
	ОсновнаяСтавкаНДС = УчетНДСКлиентСервер.ПолучитьОсновнуюСтавкуНДСПоСНО(СтрокаТЧЧеки.СистемаНалогообложения, НастройкаПечатиЧеков, ТекущаяДата());
	
	СуммаЧека				= СтрокаТЧЧеки.Сумма - СтрокаТЧЧеки.СуммаДепозит;
	СуммаСнятияСДепозита	= СтрокаТЧЧеки.СуммаДепозит;
	СуммаВзносаНаДепозит	= СтрокаТЧЧеки.СуммаВзнос;
	
	СписаниеСДепозитаУказыватьВОплатах	= Истина;
	ПереплатуДобавлятьВТовары			= СуммаВзносаНаДепозит > 0;
	
	ТаблицаТоваров = СформироватьТаблицуТоваров(СтрокаТЧЧеки.КлючСтроки, ОсновнаяСтавкаНДС, ПереплатуДобавлятьВТовары, СуммаВзносаНаДепозит, Объект, НастройкаПечатиЧеков);
	
	ДанныеОплат = ПолучитьДанныеОплатДляСтрокиТЧЧеки(Объект.СуммаДокумента,СуммаЧека, СуммаСнятияСДепозита, СуммаВзносаНаДепозит, СтрокаТЧЧеки.КлючСтроки, ОсновнаяСтавкаНДС, СписаниеСДепозитаУказыватьВОплатах, ПереплатуДобавлятьВТовары, Объект);
	
	ТаблицаОплат = Новый Массив();
	
	// Нал.
	Если ЗначениеЗаполнено(ДанныеОплат.СтруктураОплат.Наличными) Тогда
		
		СтрокаОплаты	= ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты	= ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"); // Наличная оплата
		СтрокаОплаты.Сумма		= ДанныеОплат.СтруктураОплат.Наличными;
		
		ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Безнал
	Если ЗначениеЗаполнено(ДанныеОплат.СтруктураОплат.Безналичные)
		Или ЗначениеЗаполнено(ДанныеОплат.СтруктураОплат.СертификатомЭСНСПК)
	Тогда
		
		СтрокаОплаты	= ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты	= ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"); // Сумма электронной оплаты
		СтрокаОплаты.Сумма		= ДанныеОплат.СтруктураОплат.Безналичные;
		
		Если ЗначениеЗаполнено(ДанныеОплат.СтруктураОплат.СертификатомЭСНСПК) Тогда
			СтрокаОплаты.Сумма	= СтрокаОплаты.Сумма + ДанныеОплат.СтруктураОплат.СертификатомЭСНСПК; 		
		КонецЕсли;
		
		ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	СуммаТретийВид = 0;
	Если ЗначениеЗаполнено(ДанныеОплат.СтруктураОплат.ЗаСчетФирмы) Тогда
		СуммаТретийВид = ДанныеОплат.СтруктураОплат.ЗаСчетФирмы;	
	КонецЕсли;
	
	СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаПредоплаты = Неопределено;
	Если Не ЗначениеЗаполнено(Объект.СпособРасчетаЧекаККМ) Или Объект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Аванс") Тогда
		// Всё идёт в предоплату
		СтрокаОплаты.ТипОплаты	= ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"); // Сумма предоплатой (зачетом аванса).
		СтрокаОплаты.Сумма = СуммаТретийВид;
		ТаблицаОплат.Добавить(СтрокаОплаты);
		СтрокаПредоплаты = СтрокаОплаты;
	Иначе
		Если Объект.СуммаЗачетаАвансаПродажиВДолг <> 0
			И СуммаТретийВид >= Объект.СуммаЗачетаАвансаПродажиВДолг
		Тогда // Проверка, что неполным авансом не оплатили всю нехватку.
			СтрокаОплаты.ТипОплаты	= ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"); // Сумма предоплатой (зачетом аванса).
			СтрокаОплаты.Сумма = Объект.СуммаЗачетаАвансаПродажиВДолг;
			ТаблицаОплат.Добавить(СтрокаОплаты);
			СуммаТретийВид = СуммаТретийВид - СтрокаОплаты.Сумма;
		КонецЕсли;
	
	    // Если это одновременно и списание аванса, и оплата остатка в долг, то добавляем еще одну строку оплат.
		// Если пользователь указал сумму зачета больше суммы кредита, но зачитываем сумму кредита.
		Если СуммаТретийВид > 0 Тогда
			СтрокаОплатыОстатокАванса = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
			СтрокаОплатыОстатокАванса.ТипОплаты	= ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"); // Сумма постоплатой (в долг).
			СтрокаОплатыОстатокАванса.Сумма = СуммаТретийВид;
			ТаблицаОплат.Добавить(СтрокаОплатыОстатокАванса);
	    КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОплат.СтруктураОплат.Сертификатом) Тогда
		Если СтрокаПредоплаты <> Неопределено Тогда
			СтрокаТО = ТаблицаОплат.Найти(СтрокаПредоплаты);
			ТаблицаОплат[СтрокаТО].Сумма = ТаблицаОплат[СтрокаТО].Сумма + ДанныеОплат.СтруктураОплат.Сертификатом;
		Иначе
			СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
			СтрокаОплаты.ТипОплаты	= ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата");
			СтрокаОплаты.Сумма = ДанныеОплат.СтруктураОплат.Сертификатом;
			ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеПараметры.ТаблицаОплат = ТаблицаОплат;
	ОбщиеПараметры.ПозицииЧека = ТаблицаТОваров;
	
	ОбщиеПараметры.Вставить("ИтогБонусов",				СуммаБонусныхСкидокДокумента(Объект));
	ОбщиеПараметры.Вставить("РасшифровкаПлатежа",		ДанныеОплат.РасшифровкаПлатежа);
	ОбщиеПараметры.Вставить("КлиентДокумента",			?(Не ПустаяСтрока(Объект.ПринятоОт), Объект.ПринятоОт, Объект.Клиент));
	ОбщиеПараметры.Вставить("ЭтоОказаниеУслуг",			Истина);
	ОбщиеПараметры.Вставить("ДанныеФилиала",			РаботаСНДССервер.ПолучитьДанныеФилиала(Объект.Филиал));	
	ОбщиеПараметры.Вставить("УчетНДСНеИспользуется",	Ложь);
	ОбщиеПараметры.Вставить("НомерДокумента",			Объект.Номер);
	ОбщиеПараметры.Вставить("ДокументОснование", 		Объект.Ссылка);
	ОбщиеПараметры.Вставить("ПодключаемоеОборудование",	ОборудованиеСсылка);
	
	//	Маркированные лекарственные препараты должны проверяться на ККТ перед пробитием чека
	ОбщиеПараметры.Вставить("СодержитМаркированныеТовары",	Ложь);
	ОбщиеПараметры.Вставить("ПараметрыПроверкиНаККТ",		Новый Структура());
	
	ПараметрыПроверкиНаККТ = РаботаСДокументамиСервер.ПроверитьПодготовитьДанныеПоМаркированнымТоварам(Объект.Ссылка, ОбщиеПараметры.ПозицииЧека, Объект.Видоперации);
	ПараметрыПроверкиНаККТ.ФормаОсновногоОбъектаУникальныйИдентификатор = УникальныйИдентификаторФормы;
	ПараметрыПроверкиНаККТ.ИдентификаторККТ = ОборудованиеСсылка;
	Если ПараметрыПроверкиНаККТ.ПроверяемыеКМ.Количество() > 0 Тогда
		ОбщиеПараметры.СодержитМаркированныеТовары	= Истина;
		ОбщиеПараметры.ПараметрыПроверкиНаККТ		= ПараметрыПроверкиНаККТ;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОборудованиеСсылка) Тогда
		РеквизитыОборудования  = ФорматноЛогическийКонтрольВызовСервера.СтруктураДанныхФорматноЛогическогоКонтроля(ОборудованиеСсылка);
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыОборудования.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыОборудования.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
	Иначе
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = ПредопределенноеЗначение("Перечисление.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки");
	КонецЕсли;
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
	РаботаСДокументамиСервер.ЗаполнитьПерсональныеДанныеШаблонаЧека(ОбщиеПараметры, ПерсональныеДанныеПокупателя, Объект, Объект.Клиент);
	//// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
	//ОбщиеПараметры.Вставить("Получатель",				МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНазваниеПолучателя(Объект.ПринятоОт, Объект.Клиент)); // Строка,Необязательно - Тэг 1227 - Получатель (покупатель)
	//ОбщиеПараметры.Вставить("ПолучательИНН",			МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьИННПолучателя(Объект.ПринятоОтИНН, Объект.Клиент)); // Строка,Необязательно - Тэг 1228 - ИНН получателя (ИНН покупателя)

	//СведенияОПокупателе = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСведенияОПокупателе();  // Структура,Заполнение необязательно - Тэг 1256 - Сведения о покупателе (клиенте)	
	//СведенияОПокупателе.Покупатель		= ОбщиеПараметры.Получатель;
	//СведенияОПокупателе.ПокупательИНН	= ОбщиеПараметры.ПолучательИНН;
	//СведенияОПокупателе.ПокупательАдрес = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьАдресПолучателя(Объект.ПринятоОтАдрес, Объект.Клиент);
	//
	//ОбщиеПараметры.Вставить("СведенияОПокупателе", СведенияОПокупателе);
	//// Реквизиты начиная с ФФД 1.2 (Введены приказом от 14.09.2020 N ЕД-7-20/662@)
	//
	//Если ЗначениеЗаполнено(ПерсональныеДанныеПокупателя) Тогда
	//	ОбщиеПараметры.Вставить("СубъектПерсональныхДанных", ПерсональныеДанныеПокупателя);    // Необязательно  - Физическое лицо, которое прямо или косвенно определено или определяемо с помощью персональных данных.
	//	ОбщиеПараметры.Вставить("ЕстьПерсональныеДанные", Истина); // Булево,Необязательно - Параметры чека содержат персональные данные.
	//	ОбщиеПараметры.Вставить("ТипПерсональныхДанных", ПредопределенноеЗначение("Перечисление.ТипыПерсональныхДанныхККТ.ПаспортныеДанные"));        // ПеречислениеСсылка.ТипыПерсональныхДанныеККТ, Необязательно - Тип персональных данных.		
	//КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОперационныйРеквизит) Тогда
		ОбщиеПараметры.Вставить("ОперационныйРеквизит", ОперационныйРеквизит); // Структура,Заполнение необязательно - Тэг 1270 - 
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтраслевойРеквизит) Тогда
		ОбщиеПараметры.Вставить("ОтраслевойРеквизит", ОтраслевойРеквизит);   // Структура,Заполнение необязательно - Тэг 1261 - Отраслевой реквизит чека,
	КонецЕсли;
	
	Если СтрокаТЧЧеки <> Неопределено Тогда
		ОбщиеПараметры.Вставить("СНО", СтрокаТЧЧеки.СистемаНалогоОбложения);
		ОбщиеПараметры.Вставить("ОсновнаяСтавкаНДС", ОсновнаяСтавкаНДС);
		Если ЗначениеЗаполнено(СтрокаТЧЧеки.ВидОперации) Тогда
			ОбщиеПараметры.ЭтоОказаниеУслуг	= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// МДЛП
	ОбщиеПараметры.Вставить("Склад", Объект.Склад);
	
	ОбщиеПараметры.Вставить("ШиринаЧековойЛенты", ШиринаСтроки);  
	
	// Параметры необходимые для чека ЕНВД на принтере чеков.
	// Параметры необходимые для печати чека на ККТ.
	МенеджерОборудованияВызовСервераПереопределяемый.ЗаполнитьОбщиеПараметрыЧека(ОборудованиеСсылка, ОбщиеПараметры, НастройкаПечатиЧеков, Объект.Филиал);
	
	Если ОбщиеПараметры <> Неопределено 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОборудованиеСсылка, "ТипОборудования") = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ")
	Тогда
		ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, ОборудованиеСсылка);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

Функция СуммаБонусныхСкидокДокумента(Объект)
	
	Итог = 0;
	
	Если Объект.Скидки.Количество() <> 0 Тогда
		ВидыСкидокДокумента = Новый Массив;
		Для Каждого СтрокаСкидки Из Объект.Скидки Цикл
			ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(ВидыСкидокДокумента, СтрокаСкидки.Скидка);
		КонецЦикла;
		ТипыСкидокДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыСкидокДокумента, "ТипСкидки");
		ТипСкидкиБонусы = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Бонусы");
		
		// Расчет суммы бонусов.
		Для Каждого СтрокаСкидки Из Объект.Скидки Цикл
			
			Если ТипыСкидокДокумента.Получить(СтрокаСкидки.Скидка) = ТипСкидкиБонусы Тогда
				Итог = Итог + СтрокаСкидки.КоличествоБонусов;
	 		КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

#Область ПолучитьДанныеОплатДляСтрокиТЧЧеки

// Данные оплат для чека документа
//
// Параметры:
//  СуммаДокумента						 - Число - сумма документа
//  СуммаЧека							 - Число - сумма чека
//  СуммаСнятияСДепозита				 - Число - сумма снятия с депозита
//  СуммаВзносаНаДепозит				 - Число - сумма взноса на депозит
//  КлючСтрокиЧека						 - Строка - ключ строки чека 
//  СтавкаНДС							 - ПеречислениеСсылка.СтавкиНДС - ставка НДС 
//  СписаниеСДепозитаУказыватьВОплатах	 - Булево - указывать в оплатах списание с депозита
//  ПереплатуДобавлятьВТовары			 - Булево - добавлять переплату в товары
//  Объект								 - ДокументОбъект.ОказаниеУслуг - оказание услуг
// 
// Возвращаемое значение:
//  Структура - данные оплат. 
//
Функция ПолучитьДанныеОплатДляСтрокиТЧЧеки(СуммаДокумента, СуммаЧека, СуммаСнятияСДепозита, СуммаВзносаНаДепозит, КлючСтрокиЧека, СтавкаНДС = Неопределено, СписаниеСДепозитаУказыватьВОплатах = Истина, ПереплатуДобавлятьВТовары = Истина, Объект) Экспорт
	
	пчВидыОплаты = Перечисления.ВидыОплаты;
	
	НомерСмены		= 0;
	ТаблицаОплаты	= Объект.Оплата.Выгрузить();
	ТаблицаОплаты.Колонки.Добавить("НДС",				Новый ОписаниеТипов("Число"));
	ТаблицаОплаты.Колонки.Добавить("НомерСекции",		Новый ОписаниеТипов("Число"));
	ТаблицаОплаты.Колонки.Добавить("ПорядокВидаОплаты",	Новый ОписаниеТипов("Число"));
	ТаблицаОплаты.Колонки.Удалить("ВидОплаты"); // Смена типа колонки пустой таблицы на произвольный.
	ТаблицаОплаты.Колонки.Добавить("ВидОплаты");
	
	ТаблицаОплаты.Очистить();
	
	ЗаполнитьТаблицуОплатИзЧекаПоКлючу(ТаблицаОплаты, КлючСтрокиЧека, СписаниеСДепозитаУказыватьВОплатах, Объект);
	
	ТаблицаТоваров = РаботаСТорговымОборудованием.СформироватьТаблицуТоваровДокументаДляЧека(Объект.Ссылка, КлючСтрокиЧека,, ПереплатуДобавлятьВТовары);
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьСекцииККМ") Тогда
		РазбитьТаблицуОплатПродажиДокументаНаСекцииЧека(ТаблицаОплаты,ТаблицаТоваров.Скопировать());
	Иначе
		ТаблицаОплаты.ЗаполнитьЗначения(1,"НомерСекции");
	КонецЕсли;
	
	ИмяВидОплатыЭСНСПК = РаботаСДокументамиСервер.ВидОплатыЭСНСПК_ВнутреннееИмя();
	ЗначенияПеречисленияОплаты = Метаданные.Перечисления.ВидыОплаты.ЗначенияПеречисления;
	Для Каждого СтрокаОплаты Из ТаблицаОплаты Цикл
		Если СтрокаОплаты.ВидОплаты = ИмяВидОплатыЭСНСПК Тогда
			СтрокаОплаты.ПорядокВидаОплаты = пчВидыОплаты.Индекс(пчВидыОплаты.Безналичные) + 0.5; // Сразу после безнала.
		Иначе
			СтрокаОплаты.ПорядокВидаОплаты = пчВидыОплаты.Индекс(СтрокаОплаты.ВидОплаты);
		КонецЕсли;
	КонецЦикла;
	ТаблицаОплаты.Сортировать("ПорядокВидаОплаты, НомерСекции");
	
	ФорматнаяСтрокаСуммы = "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
	СтруктураОплат = Новый Структура("Наличными,Безналичные,Сертификатом,ЗаСчетФирмы,ВСчетЗарплаты,СертификатомЭСНСПК",0,0,0,0,0,0);
	
	Для Каждого СтрокаОплаты Из ТаблицаОплаты Цикл
		Если СтрокаОплаты.ВидОплаты = ИмяВидОплатыЭСНСПК Тогда
			ИмяВидаОплаты = "СертификатомЭСНСПК";
		Иначе
			ИмяВидаОплаты = ЗначенияПеречисленияОплаты[СтрокаОплаты.ПорядокВидаОплаты].Имя;
		КонецЕсли;
		СтруктураОплат[ИмяВидаОплаты] = СтруктураОплат[ИмяВидаОплаты] + СтрокаОплаты.Сумма;
	КонецЦикла;
	
	МассивСтрокРасшифровкиПлатежа = Новый Массив;
	
	НефискальноеПредставлениеОплатыАвансДолг = НСтр("ru='В счет аванса/долга'");
	Для Каждого СтрокаПлатежа Из ТаблицаОплаты Цикл
		
		Если СтрокаПлатежа.ВидОплаты = пчВидыОплаты.Наличными ИЛИ
			СтрокаПлатежа.ВидОплаты	= пчВидыОплаты.Безналичные ИЛИ 
			(СтрокаПлатежа.ВидОплаты = пчВидыОплаты.ЗаСчетФирмы)
		Тогда
			СтруктураПлатежа = Новый Структура("ВидОплаты,ИсходныйНомерСтроки,НомерСтроки,Сертификат,Сумма,НомерСекции");
			ЗаполнитьЗначенияСвойств(СтруктураПлатежа,СтрокаПлатежа);
			
			СтруктураПлатежа.ВидОплаты = ?(СтруктураПлатежа.ВидОплаты = пчВидыОплаты.ЗаСчетФирмы, НефискальноеПредставлениеОплатыАвансДолг, СтруктураПлатежа.ВидОплаты);
			
			// Разделим аванс и кредит на отдельные строки, если нехватает депозита
			Если СтруктураПлатежа.ВидОплаты = НефискальноеПредставлениеОплатыАвансДолг
				И Объект.СуммаЗачетаАвансаПродажиВДолг <> 0
				И Объект.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит
			Тогда
				Если СтруктураПлатежа.Сумма > Объект.СуммаЗачетаАвансаПродажиВДолг Тогда // Проверка, что неполным авансом не оплатили всю нехватку.
					СтруктураПлатежа.ВидОплаты = НСтр("ru='В счет долга'");
					СтруктураПлатежа.Сумма = СтруктураПлатежа.Сумма - Объект.СуммаЗачетаАвансаПродажиВДолг;
					МассивСтрокРасшифровкиПлатежа.Добавить(СтруктураПлатежа);
				КонецЕсли;
				
				СуммаЗачетаАвансаПродажиВДолг = Мин(СтруктураПлатежа.Сумма, Объект.СуммаЗачетаАвансаПродажиВДолг);
				Если СуммаЗачетаАвансаПродажиВДолг > 0 Тогда
					СтруктураПлатежаАванс = Новый Структура("ВидОплаты,ИсходныйНомерСтроки,НомерСтроки,Сертификат,Сумма,НомерСекции");
					ЗаполнитьЗначенияСвойств(СтруктураПлатежаАванс, СтрокаПлатежа);
					СтруктураПлатежаАванс.ВидОплаты = НСтр("ru='Зачет аванса'");
					СтруктураПлатежаАванс.Сумма = СуммаЗачетаАвансаПродажиВДолг;
					МассивСтрокРасшифровкиПлатежа.Добавить(СтруктураПлатежаАванс);
				КонецЕсли;
			Иначе
				МассивСтрокРасшифровкиПлатежа.Добавить(СтруктураПлатежа);
			КонецЕсли;
		Иначе 
			ЗаголовокСтроки = ?(СтрокаПлатежа.ВидОплаты = ИмяВидОплатыЭСНСПК, НСтр("ru='ЭС НСПК'"), Строка(СтрокаПлатежа.ВидОплаты));
			МассивСтрокРасшифровкиПлатежа.Добавить(Новый Структура("ВидОплаты, Сумма", ЗаголовокСтроки, СтрокаПлатежа.Сумма));
		КонецЕсли;			
		
	КонецЦикла;
	
	// Случай, когда депозит есть
	Если СуммаСнятияСДепозита > 0 И НЕ ЗначениеЗаполнено(СтруктураОплат.ЗаСчетФирмы) И СписаниеСДепозитаУказыватьВОплатах Тогда
		СтруктураПлатежа = Новый Структура("ВидОплаты,ИсходныйНомерСтроки,НомерСтроки,Сертификат,Сумма,НомерСекции");
		СтруктураПлатежа.ВидОплаты = "Снято с депозита";
		СтруктураПлатежа.Сумма = СуммаСнятияСДепозита;
		
		МассивСтрокРасшифровкиПлатежа.Добавить(СтруктураПлатежа);
	ИначеЕсли СуммаСнятияСДепозита > 0 И НЕ ЗначениеЗаполнено(СтруктураОплат.ЗаСчетФирмы) И НЕ СписаниеСДепозитаУказыватьВОплатах Тогда
		МассивСтрокРасшифровкиПлатежа.Добавить("Снято с депозита");
		МассивСтрокРасшифровкиПлатежа.Добавить(СуммаСнятияСДепозита);	
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СтруктураОплат", СтруктураОплат);
	Результат.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкиПлатежа);
	
	Возврат Результат;
	
КонецФункции

Процедура РазбитьТаблицуОплатПродажиДокументаНаСекцииЧека(ТаблицаПлатежей,Знач ТаблицаТоваров)
	
	Если ТаблицаТоваров.Количество() = 0 Или ТаблицаТоваров.Итог("Сумма")=0 Тогда
		Для Каждого СтрПлатежа Из ТаблицаПлатежей Цикл
			СтрПлатежа.НомерСекции = 1;
		КонецЦикла;
	Иначе
		ТаблицаТоваров.Свернуть("НомерСекции","Сумма");
		
		// Вычисление весов позиций из заказа и распределение суммы платежа между ними
		// Расчет весов.
		РассчитатьВесаСекцийТаблицыПродажи(ТаблицаТоваров);
		
		// Распределение суммы платежа по секциям
		ТаблицаПлатежей = РаспределитьТаблицуПлатежаПоСекциям(ТаблицаПлатежей, ТаблицаТоваров);
		
		Если ТаблицаПлатежей.Колонки.Найти("Заголовок") <> Неопределено Тогда
			Для сч = 2 по ТаблицаПлатежей.Количество() Цикл
				ТаблицаПлатежей[сч-1].Заголовок = "";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Рассчитывает веса секций таблицы продажи
//
// Параметры:
//  ТабТовары - таблица товаров .
//
Процедура РассчитатьВесаСекцийТаблицыПродажи(ТабТовары)
	
	ИтогСуммыОснования = ТабТовары.Итог("Сумма");
	
	ТабТовары.Колонки.Добавить("Вес",Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрТовары Из ТабТовары Цикл
		СтрТовары.Вес = СтрТовары.Сумма/ИтогСуммыОснования;
	КонецЦикла;
	
КонецПроцедуры

// Распределяет таблицу платежей по секциям
//
// Параметры:
//  ТаблицаПлатежей - таблица платежей
//  ТабТовары - таблица товаров
//
// Вовращаемое значение
//  Отформатированная таблица платежей.
//
Функция РаспределитьТаблицуПлатежаПоСекциям(ТаблицаПлатежей, ТабТовары)
	
	НовТаблицаПлатежей = ТаблицаПлатежей.СкопироватьКолонки();
	
	Для Каждого СтрПлатежа из ТаблицаПлатежей Цикл
		ОстатосьРаспределитьОтСуммыПлатежа  = СтрПлатежа.Сумма;
		Если СтрПлатежа.ВидОплаты = Перечисления.ВидыОплаты.Безналичные
			ИЛИ СтрПлатежа.ВидОплаты = Перечисления.ВидыОплаты.Наличными Тогда
			Для Каждого СтрТовары из ТабТовары Цикл
				ТекСуммаПлатежа = Окр(СтрТовары.Вес * СтрПлатежа.Сумма,2);
				Если ТекСуммаПлатежа <> 0 Тогда
					СтрНовПлатеж = НовТаблицаПлатежей.Добавить();
					ЗаполнитьЗначенияСвойств(СтрНовПлатеж,СтрПлатежа);
					СтрНовПлатеж.Сумма = Мин(ТекСуммаПлатежа,ОстатосьРаспределитьОтСуммыПлатежа);
					ОстатосьРаспределитьОтСуммыПлатежа = ОстатосьРаспределитьОтСуммыПлатежа - СтрНовПлатеж.Сумма;  
					СтрНовПлатеж.НомерСекции = СтрТовары.НомерСекции;
				КонецЕсли;
			КонецЦикла;
			
			// Копейки могли остаться
			Если ОстатосьРаспределитьОтСуммыПлатежа<>0 Тогда 				
				// Убираю их в последнюю введенную строку
				СтрНовПлатеж.Сумма = СтрНовПлатеж.Сумма + ОстатосьРаспределитьОтСуммыПлатежа; 
			КонецЕсли;
			
		Иначе
			СтрНовПлатеж = НовТаблицаПлатежей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрНовПлатеж,СтрПлатежа);
			СтрНовПлатеж.Сумма = ОстатосьРаспределитьОтСуммыПлатежа;  
			СтрНовПлатеж.НомерСекции = 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовТаблицаПлатежей;
КонецФункции

Процедура ЗаполнитьТаблицуОплатИзЧекаПоКлючу(ТаблицаОплаты, КлючСтрокиЧека, СписаниеСДепозитаУказыватьВОплатах, Объект)
	пчВидыОплаты = Перечисления.ВидыОплаты;
	СтрокиЧеков = Объект.Чеки.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтрокиЧека));
	
	СуммаНСПК = 0;
	
	СтрокиБезнал = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные));
	Если СтрокиБезнал.Количество() > 0 Тогда
		Для Каждого СтрокаБезнал Из СтрокиБезнал Цикл
			Если СтрокаБезнал.ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.СертификатНСПК Тогда
				нстрОплаты = ТаблицаОплаты.Добавить();		
				нстрОплаты.Сумма = СтрокаБезнал.Сумма;
				нстрОплаты.ВидОплаты = РаботаСДокументамиСервер.ВидОплатыЭСНСПК_ВнутреннееИмя();
				СуммаНСПК = нстрОплаты.Сумма;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого стр Из СтрокиЧеков Цикл
		Если стр.РеализацияСертификата Тогда
			нстрОплаты = ТаблицаОплаты.Добавить();
			Движения = Объект.Ссылка.ПолучитьОбъект().Движения.ОстаткиПоСертификатам;
			Движения.Прочитать();
			нстрОплаты.Сумма = 0;
			Для Каждого СтрокаДвижения Из Движения Цикл
				ВидДвижения = ?(Объект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход); 
				Если СтрокаДвижения.ВидДвижения = ВидДвижения Тогда
					нстрОплаты.Сумма = нстрОплаты.Сумма + СтрокаДвижения.СуммаПокупки;
				КонецЕсли;
			КонецЦикла;
			нстрОплаты.ВидОплаты = пчВидыОплаты.Сертификатом;		
		Иначе
			Если стр.СуммаНал > 0 Тогда
				нстрОплаты = ТаблицаОплаты.Добавить();		
				нстрОплаты.Сумма = стр.СуммаНал;
				нстрОплаты.ВидОплаты = пчВидыОплаты.Наличными;
			КонецЕсли;
			Если стр.СуммаБезнал - СуммаНСПК > 0 Тогда
				нстрОплаты = ТаблицаОплаты.Добавить();		
				нстрОплаты.Сумма = стр.СуммаБезнал - СуммаНСПК;
				нстрОплаты.ВидОплаты = пчВидыОплаты.Безналичные;
			КонецЕсли;
			Если СписаниеСДепозитаУказыватьВОплатах И стр.СуммаДепозит > 0 Тогда
				нстрОплаты = ТаблицаОплаты.Добавить();		
				нстрОплаты.Сумма = стр.СуммаДепозит;
				нстрОплаты.ВидОплаты = пчВидыОплаты.ЗаСчетФирмы;
			КонецЕсли;
			Если стр.СуммаСертификат > 0 Тогда
				нстрОплаты = ТаблицаОплаты.Добавить();		
				нстрОплаты.Сумма = стр.СуммаСертификат;
				нстрОплаты.ВидОплаты = пчВидыОплаты.Сертификатом;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Таблица товаров документов
//
// Параметры:
//  КлючСтроки							 - Строка - ключ строки 
//  ОсновнаяСтавкаНДС					 - ПеречислениеСсылка.СтавкиНДС - ставка НДС 
//  СписаниеСДепозитаУказыватьВОплатах	 - Булево - указывать в оплатах списание с депозита 
//  СуммаВзносаНаДепозит				 - Число - сумма взноса на депозит
//  ВидДепозитнойОперации				 - Перечисления.СпособыРасчетаЧекаККМ - вид депозитной операции
//  Объект								 - ДокументОбъект.ОказаниеУслуг - оказание услуг
//  НастройкаПечатиЧеков				 - Структура - настройки печати чеков 
// 
// Возвращаемое значение:
//  Массив - таблица товаров
//
Функция СформироватьТаблицуТоваров(КлючСтроки = Неопределено, ОсновнаяСтавкаНДС = Неопределено, СписаниеСДепозитаУказыватьВОплатах = Истина, СуммаВзносаНаДепозит = 0, Объект, НастройкаПечатиЧеков)
	
	ТаблицаТоваров = Новый Массив;
	МассивСтрокОписанияЧека = Неопределено;
	МассивСтрокРасшифровкиПлатежа = Неопределено;
	СтруктураОплат = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.СпособРасчетаЧекаККМ)
		И Объект.СуммаДокумента > Объект.Оплата.Итог("Сумма")
	Тогда
		ВидДепозитнойОперации =	Объект.СпособРасчетаЧекаККМ
	Иначе
		ВидДепозитнойОперации =	Перечисления.СпособыРасчетаЧекаККМ.ПустаяСсылка();
	КонецЕсли;
	
	ЧекБезОплаты = Ложь;
	Если КлючСтроки <> Неопределено
		И ВидДепозитнойОперации = Перечисления.СпособыРасчетаЧекаККМ.Кредит
	Тогда
		СтрокиЧека = Объект.Чеки.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
		Если СтрокиЧека.Количество() <> 0
			И СтрокиЧека[0].СуммаДепозит = СтрокиЧека[0].Сумма
		Тогда
			ЧекБезОплаты = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТЗ = РаботаСТорговымОборудованием.СформироватьТаблицуТоваровДокументаДляЧека(Объект.Ссылка, КлючСтроки, ОсновнаяСтавкаНДС, СписаниеСДепозитаУказыватьВОплатах, СуммаВзносаНаДепозит, ВидДепозитнойОперации, НастройкаПечатиЧеков.ПравилоПечатиКодаНМУ, ЧекБезОплаты);
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		// Переопределение ПризнакаПредметаРасчета для маркированных лекарств
		Если ЗначениеЗаполнено(СтрокаТЗ.Штрихкод) Тогда
			ДанныеШтрихкода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(СтрокаТЗ.Штрихкод);
			
			// Убрано, пока в ходу еще есть ФФД 1.1, нужно чтобы были Товары.
			//Если ДанныеШтрихкода.Разобран
			//	И ДанныеШтрихкода.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			//	СтрокаТЗ.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.МаркированныйТоварПодлМаркировкеСИИмеющийКМ");		
			//КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		
		СтрокаТаблицыТоваров.Добавить(?(ЗначениеЗаполнено(СтрокаТЗ.НаименованиеПолное),СтрокаТЗ.НаименованиеПолное,СтрокаТЗ.Наименование));		   //  1 - Наименование
		СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.НомерСекции);   //  4 - Номер отдела
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Цена);          //  5 - Цена за позицию без скидки
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Количество);    //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("С учетом бонусов");     //  7 - Наименование скидки/наценки
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.СуммаСкидки);   //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Скидка);        //  9 - Процент скидки/наценки
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Сумма);         // 10 - Сумма позиции со скидкой
		СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.СуммаНДС);	   // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.СтавкаНДСЧислом);     // 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");                     // 17 - Наименование секции форматирования товарной строки
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Сертификат);    // 18 - Сертификат
		
		// Добавим новые свойства ФЗ-54 после основных, чтобы не изменять нумерацию
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.ЦенаСоСкидкой);			// 19 - ФФД 1.0.5
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.ПризнакСпособаРасчета);  // 20 - ФФД 1.0.5
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.ПризнакПредметаРасчета); // 21 - ФФД 1.1
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Штрихкод);				// 22 - МДЛП.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.СерияНоменклатуры);		// 23 - МДЛП.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.МераКоличества);			// 24 - ФФД 1.2.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.КоличествоЧислитель);	// 25 - ФФД 1.2.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.КоличествоЗнаменатель);	// 26 - ФФД 1.2.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.ВидМаркировки);			// 27 - Для различия маркированных товаров при продаже.
		
		// Код ТРУ
		Если СтрокаТЗ.Номенклатура <> Неопределено Тогда 
			СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Номенклатура.КодТРУ);// 28 - Код ТРУ.
		Иначе
			СтрокаТаблицыТоваров.Добавить(Неопределено);// 28 - Код ТРУ.	
		КонецЕсли;
		
		СтрокаТаблицыТоваров.Добавить(ЗаполнитьСтрокуТаблицыТоваровМДЛППоРецептам(СтрокаТаблицыТоваров, Объект, СтрокаТЗ.Сумма));	// 29 - Рецепт МДЛП

		СтрокаТаблицыТоваров.Добавить(СтрокаТЗ.Номенклатура); // 30 - Агентские договоры
		
		ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ЗаполнитьСтрокуТаблицыТоваровМДЛППоРецептам(Знач СтрокаТаблицыТоваров, Объект, Сумма)
	
	УстановитьПривилегированныйРежим(Истина);
	Если СтрокаТаблицыТоваров[26].Значение = "МаркированноеЛекарство"	
		И ЗначениеЗаполнено(СтрокаТаблицыТоваров[21].Значение)
	Тогда
		МЗ = РегистрыСведений.РецептыДокументовПродаж.СоздатьМенеджерЗаписи();
		МЗ.ДокументПродажи = Объект.Ссылка;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда;
			ОписаниеДанных = ИнтеграцияМДЛПКлиентСервер.ОписаниеДанныхПараметраЗначениеОтраслевогоРеквизитаМДЛП();
			Если МЗ.ПроцентЛьготы > 0 Тогда
				ОписаниеДанных.ПроцентЛьготы                   = МЗ.ПроцентЛьготы;
				Если МЗ.ПроцентЛьготы < 100 Тогда
					ОписаниеДанных.СуммаЛьготы = Сумма * МЗ.ПроцентЛьготы; 
				КонецЕсли;
				ОписаниеДанных.НомерСерииЛьготногоРецепта      = МЗ.СерияРецепта;
				ОписаниеДанных.НомерЛьготногоРецепта           = МЗ.НомерРецепта;
				ОписаниеДанных.ДатаРегистрацииЛьготногоРецепта = МЗ.ДатаРецепта;
			Иначе
				ОписаниеДанных.НомерСерииРецепта               = МЗ.СерияРецепта;
				ОписаниеДанных.НомерРецепта                    = МЗ.НомерРецепта;
				ОписаниеДанных.ДатаРегистрацииРецепта          = МЗ.ДатаРецепта;
			КонецЕсли;
			
			ОписаниеДанных.ИдентификаторМестаДеятельностиМДЛП = МЗ.ИдентификаторМестаДеятельности;
			
			ЗначениеОтраслевогоРеквизита = ИнтеграцияМДЛПКлиентСервер.СформироватьПараметрЗначениеОтраслевогоРеквизитаМДЛП(ОписаниеДанных);
			
			Возврат ИнтеграцияМДЛПКлиентСервер.СформироватьПараметрОтраслевойРеквизитМДЛП(ЗначениеОтраслевогоРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПлатежныеСистемыНСПК // Электронные сертификты НСПК.

// Возвращает способ оплаты НСПК документа
//
// Параметры:
//  Документ - ДокументСсылка.ОказаниеУслуг	 - Документ продажи.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭквайринговыеТерминалы - Способ оплаты НСПК в документе. Если такой не был найден - возвращает Неопределено.
//
Функция ПолучитьСпособОплатыНСПК(Документ) Экспорт
	
	СтрокиБезнал = Документ.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные));
	
	Если ЗначениеЗаполнено(СтрокиБезнал) Тогда
		Для Каждого СтрокаОплаты Из СтрокиБезнал Цикл
			Если СтрокаОплаты.ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.СертификатНСПК Тогда
				НСПК_СпособОплаты = СтрокаОплаты.ЭквайринговыйТерминал;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НСПК_СпособОплаты;
	
КонецФункции

// Возвращает сумму, оплаенную ЭС НСПК в документе
//
// Параметры:
//  Документ - ДокументСсылка.ОказаниеУслуг	 - Документ продажи.
// 
// Возвращаемое значение:
//  Число - Сумма оплаты. 
//
Функция ПолучитьСуммуОплатыНСПК(Документ) Экспорт

	Если ЗначениеЗаполнено(Документ.ИдентификаторКорзиныНСПК) Тогда
		Для Каждого СтрокаОплаты Из Документ.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплаты.Безналичные
				И СтрокаОплаты.ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.СертификатНСПК
			Тогда
				Возврат	СтрокаОплаты.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. РаботаСДокументамиСервер.СметаПоДокументу()
Функция СметаПоДокументу(Документ, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТаблицаПродаж = ПолучитьТаблицуПродажДокумента(Документ, Ложь);
	
	Возврат ТаблицаПродаж;
	
КонецФункции

#КонецОбласти
