#Область РазделОписанияПеременных

Перем мУчетнаяПолитика; // Структура со значениями учетной политики
Перем мИспользоватьСертификаты; // Признак исползвоания сертификатов

Перем мСтруктураНастроек;

#КонецОбласти

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА.

// Где ИмяТЧ - имя метаданных табличной части, а не её представление.
Функция ТекстОшибкиТабличнойЧасти(ИмяТЧ, НомерСтроки, Ошибка)
	
	СинонимТЧ = Метаданные().ТабличныеЧасти[ИмяТЧ].Представление(); // Синоним табличной части.
	
	ШаблонОшибки = НСтр("ru='В строке номер ""%2"" табличной части ""%1"":  %3'");
	
	Возврат СтрШаблон(ШаблонОшибки, СинонимТЧ, СокрЛП(НомерСтроки), Ошибка);
	
КонецФункции

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяТабличнойЧасти = "Товары")
	
	// Указывается, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, ЕдиницаИзмерения");
	Если ИмяТабличнойЧасти = "Товары" И 
		Не мУчетнаяПолитика.РазрешитьПродажуПоНулевойСтоимости 
	Тогда
		СтруктураОбязательныхПолей.Вставить("Сумма");
	КонецЕсли;                                                                             
	
	// Теперь позовем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	РаботаСДокументамиСервер.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
		ЭтоОбщийСкладОтделения = ЭтотОбъект.Склад.ТипСклада = Перечисления.ТипыСкладов.Отделение;
		Для Каждого Товар Из ЭтотОбъект.Товары Цикл
			Если Товар.СерияНоменклатуры.СерияПромаркированаДляЦелейМДЛП
				И (Товар.Склад = Перечисления.ТипыСкладов.Отделение ИЛИ (Не ЗначениеЗаполнено(Товар.Склад) И ЭтоОбщийСкладОтделения))
			Тогда
				Отказ = Истина;
				Ошибка = "содержится маркированное лекарственное средство, отпускаемое со склада отделения. "
					   + "Маркированные лекарственные средства не могут отпускаться со склада с типом ""Отделение""!";
				ТекстОшибки = ТекстОшибкиТабличнойЧасти(ИмяТабличнойЧасти, Товар.НомерСтроки, Ошибка);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Работы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРаботы(ТаблицаПоРаботам, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИмяТабличнойЧасти = "Работы";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Теперь вызовем процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Работы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка заполнения сумм - только для тех позиций, для которых не выбран абонемнет.
	
	МетаданныеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти.Работы;
	
	Для Каждого СтрокаРаботы Из Работы Цикл
		Если Не ЗначениеЗаполнено(СтрокаРаботы.Сертификат) И
			Не ЗначениеЗаполнено(СтрокаРаботы.Сумма)      И
			Не мУчетнаяПолитика.РазрешитьПродажуПоНулевойСтоимости
		Тогда
			Ошибка = СтрШаблон(НСтр("ru='Не заполнено значение реквизита ""%1""'"), МетаданныеТабличнойЧасти.Реквизиты.Сумма.Синоним);
			ТекстОшибки = ТекстОшибкиТабличнойЧасти("Работы", СтрокаРаботы.НомерСтроки, Ошибка);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ДополнительныеСвойства.Свойство("ОбменДаннымиЗагрузка") Тогда
		// Проверка, что нет товаров в списке работ
		РаботаСДокументамиСервер.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Работы", ТаблицаПоРаботам, Отказ, Заголовок);
		
		ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти["Работы"].Представление();
		ТаблицаНевхожденияВОграничениеСертификатов = СертификатыКлиентов.ПроверитьНаПопаданиеНоменклатурыВОграниченияСертификата(ТаблицаПоРаботам);
		Если ТаблицаНевхожденияВОграничениеСертификатов <> Неопределено Тогда
			
			Для Каждого СтрокаПредупреждения Из ТаблицаНевхожденияВОграничениеСертификатов Цикл
				Ошибка = СтрШаблон(НСтр("ru='указана работа, которая не входит в список допустимых услуг по сертификату вида ""%1""'"), СтрокаПредупреждения.Сертификат.ВидСертификата.Наименование);
				ТекстОшибки = ТекстОшибкиТабличнойЧасти("Работы", СтрокаРаботы.НомерСтроки, Ошибка);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
    СвернутаяТаблицаРабот = Работы.Выгрузить();
	СвернутаяТаблицаРабот.Свернуть("Номенклатура");
	МассивНоменклатурыБезДоговора = ОтраслевыеДополнения.ПолучитьНоменклатуруНаКоторуюНетДоговора(СвернутаяТаблицаРабот.ВыгрузитьКолонку("Номенклатура"), Клиент, Дата);
	Если МассивНоменклатурыБезДоговора.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(ОтраслевыеДополнения.СформироватьТекстСообщенияНоменклатурыБезДоговора(МассивНоменклатурыБезДоговора));
		
		// Если проведение услуг, требующих договора, без договора запрещено, то отменить проведение.
		Отказ = Отказ Или мУчетнаяПолитика.ЗапретитьПроведениеПродажиНоменклатурыБезДоговора;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиРаботы()

// Процедура проверяет корректность заполнения табличной части "Сертификаты" документов,
//  реализующих сертификаты и абонементы
//
// Параметры:
//  ТаблицаПоСертификатам	 - ТаблицаЗначений	 - таблица сертификатов документа
//  СтруктураШапкиДокумента	 - Структура		 - структура шапки документа, откуда вызвана процедура
//  Отказ					 - Булево			 - при возникновении ошибок процедура возвращает в этот параметр значение Истина
//  Заголовок				 - Строка			 - заголовок сообщений об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСертификаты(ТаблицаПоСертификатам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Проверка заполнения
	// Указывается, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Сертификат");
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Сертификаты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ
		И ВидОперации <> Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту
	Тогда
		СписокСертификатовДляУдаленияВладельца = Новый СписокЗначений;
		Для Каждого стрСертификат Из ТаблицаПоСертификатам Цикл
			мСертификат = стрСертификат.Сертификат;
			Если ЗначениеЗаполнено(мСертификат.ВладелецКарты) Тогда
				СписокСертификатовДляУдаленияВладельца.Добавить(мСертификат);
			КонецЕсли;
		КонецЦикла;
		Если СписокСертификатовДляУдаленияВладельца.Количество() <> 0 Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОстаткиПоСертификатамОбороты.Сертификат,
			|	ОстаткиПоСертификатамОбороты.Регистратор,
			|	ОстаткиПоСертификатамОбороты.Сертификат.ВладелецКарты КАК ВладелецКарты
			|ПОМЕСТИТЬ ОборотыПоСертификатам
			|ИЗ
			|	РегистрНакопления.ОстаткиПоСертификатам.Обороты(, , Регистратор, Сертификат В (&Сертификаты)) КАК ОстаткиПоСертификатамОбороты
			|ГДЕ
			|	ОстаткиПоСертификатамОбороты.СуммаПриход > 0
			|	И ОстаткиПоСертификатамОбороты.Регистратор <> &Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОборотыПоСертификатам.Сертификат,
			|	ОборотыПоСертификатам.Регистратор,
			|	ОборотыПоСертификатам.Сертификат.ВладелецКарты КАК Владелец,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ОборотыПоСертификатам.Регистратор ССЫЛКА Документ.ОказаниеУслуг
			|					И НЕ ОказаниеУслугСертификаты.Ссылка ЕСТЬ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ЕстьПродажа
			|ИЗ
			|	ОборотыПоСертификатам КАК ОборотыПоСертификатам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОказаниеУслуг.Сертификаты КАК ОказаниеУслугСертификаты
			|		ПО ОборотыПоСертификатам.Сертификат = ОказаниеУслугСертификаты.Сертификат
			|			И ОборотыПоСертификатам.Регистратор = ОказаниеУслугСертификаты.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОборотыПоСертификатам.Сертификат,
			|	ОборотыПоСертификатам.Сертификат.ВладелецКарты,
			|	ОборотыПоСертификатам.Регистратор
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ОборотыПоСертификатам.Регистратор ССЫЛКА Документ.ОказаниеУслуг
			|					И НЕ ОказаниеУслугСертификаты.Ссылка ЕСТЬ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) = ИСТИНА"
			);
			Запрос.УстановитьПараметр("Сертификаты",СписокСертификатовДляУдаленияВладельца);
			Запрос.УстановитьПараметр("Регистратор",Ссылка);
			
			СписокСертификатовСВладельцами = Новый СписокЗначений;
			Выб = Запрос.Выполнить().Выбрать();
			Пока Выб.Следующий() Цикл
				ЭлСписка = СписокСертификатовДляУдаленияВладельца.НайтиПоЗначению(Выб.Сертификат);
				Если ЭлСписка <> Неопределено Тогда					
					СписокСертификатовДляУдаленияВладельца.Удалить(ЭлСписка);	
					СписокСертификатовСВладельцами.Добавить(Новый Структура("Сертификат, Владелец, Документ",Выб.Сертификат, Выб.Владелец, Выб.Регистратор));
				КонецЕсли;
			КонецЦикла;
			
			Если СписокСертификатовСВладельцами.Количество()<>0 Тогда
				Если НЕ Коррекция Тогда // при коррекции за это отвечает пользователь.
					// Цикл с предупреждениями, что сертификаты уже проданы
					Для Каждого ЭлСписка Из СписокСертификатовСВладельцами Цикл
						ОбщегоНазначения.СообщитьОбОшибке(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Сертификат №%1 уже продан клиенту %2 документом %3!'"),
								Строка(ЭлСписка.Значение.Сертификат),
								Строка(ЭлСписка.Значение.Владелец),
								Строка(ЭлСписка.Значение.Документ)),
							Отказ,Заголовок);
					КонецЦикла;
				КонецЕсли;
			Иначе			
				Для Каждого ЭлСписка из СписокСертификатовДляУдаленияВладельца Цикл
					ЗаполнитьРеквизитыСертификата(ЭлСписка.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТЧПополнениеСертификатов(ТаблицаПополнениеСертификатов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для Каждого СтрСертификат Из ТаблицаПополнениеСертификатов Цикл
		
		ВидСертификата = СтрСертификат.Сертификат.ВидСертификата;
		Если Не ЗначениеЗаполнено(СтрСертификат.Номенклатура)
			 И ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги
			 И ВидСертификата.КомплексныйСертификат
		Тогда
			ОбщегоНазначения.СообщитьОбОшибке(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При пополнении сертификата №%1 обязательно указание услуги, которой он пополняется'"),
					СтрСертификат.Сертификат),
				Отказ);
		КонецЕсли;
		
		Если СертификатыКлиентов.СертификатПополняемСписком(СтрСертификат.Сертификат) 
			И Не СертификатыКлиентов.НоменклатураВходитВОграничениеСертификата(СтрСертификат.Номенклатура, СтрСертификат.Сертификат)
		Тогда
			ОбщегоНазначения.СообщитьОбОшибке(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Услуга %1 не входит в число разрешенных для пополнения сертификатов вида %2'"),
					СтрСертификат.Номенклатура,
					СтрСертификат.Сертификат.ВидСертификата),
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения табличной части "Оплата" документов
//
// Параметры:
//  ТаблицаПоОплате			 - ТаблицаЗначений	 - таблица оплаты документа
//  СтруктураШапкиДокумента	 - Структура		 - структура шапки документа, откуда вызвана процедура
//  Отказ					 - Булево			 - при возникновении ошибок процедура возвращает в этот параметр значение Истина
//  Заголовок				 - Строка			 - заголовок сообщений об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту Тогда
		//БезналВозврата = ТаблицаПоОплате.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные));
		//// Возврат по безналу обязательно должен выполняться на основании документа продажи.
		//Если БезналВозврата.Количество() > 0 И 
		//	(НЕ ЗначениеЗаполнено(ДокументОснование) Или ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ОказаниеУслуг"))
		//Тогда 
		//	ОбщегоНазначения.СообщитьОбОшибке("Возврат по безналичному расчету должен выполняться только на основании документа продажи.", Отказ, Заголовок);
		//ИначеЕсли ЗначениеЗаполнено(ДокументОснование)
		//	И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
		//Тогда
		//	// Проверим что возврат по безналичному расчету сделан на ту же сумму, что и продажа.
		//	СуммаВозвратаПоБезналу = 0;
		//	Для каждого строка из БезналВозврата Цикл
		//		СуммаВозвратаПоБезналу = СуммаВозвратаПоБезналу + Строка.Сумма;
		//	КонецЦикла;
		//	БезналПродажи = ДокументОснование.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные));
		//	СуммаПродажиПоБезналу = 0;
		//	Для каждого строка из БезналПродажи Цикл
		//		СуммаПродажиПоБезналу = СуммаПродажиПоБезналу + Строка.Сумма;
		//	КонецЦикла;
		//	Если СуммаПродажиПоБезналу <> СуммаВозвратаПоБезналу И СуммаВозвратаПоБезналу <> 0 Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("По безналичному расчету может быть возвращена либо вся сумма целиком, либо ничего.", Отказ, Заголовок);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	СтрокиОплатыСертификаторм = Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Сертификатом));
	Если СтрокиОплатыСертификаторм.Количество() <> 0 Тогда
		
		СтруктураОбязательныхПолей = Новый Структура("Сертификат");
		
		// Теперь позовем общую процедуру проверки.
		ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок, СтрокиОплатыСертификаторм);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасчитатьСуммуВыработкиПоРаботеАбонемента(СтрокаДанных)
	
	Сумма = 0;
	Если СтрокаДанных.СертификатСпособРасчетаСуммыВыработки = Перечисления.СпособыРасчетаСтоимостиВыработкиПоРаботеАбонемента.ПоЦенеПродажи Тогда
		Если СтрокаДанных.Сертификат.ВидСертификата.КомплексныйСертификат Тогда
			Сумма = СтрокаДанных.СертификатСуммаПокупкиСписание;
		Иначе
			Сумма = СтрокаДанных.Количество * СтрокаДанных.Сертификат.СуммаПродажи / СтрокаДанных.СертификатНоминал;
		КонецЕсли;
	ИначеЕсли СтрокаДанных.СертификатСпособРасчетаСуммыВыработки = Перечисления.СпособыРасчетаСтоимостиВыработкиПоРаботеАбонемента.ПоПрейскурантуДокумента Тогда
		Если Прейскурант.Пустая() Тогда
			мПрейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(ЭтотОбъект.Филиал);
		Иначе
			мПрейскурант = Прейскурант;
		КонецЕсли;
		Сумма = СтрокаДанных.Количество * Ценообразование.ПолучитьЦену(мПрейскурант, СтрокаДанных.Номенклатура,Дата, СтрокаДанных.ХарактеристикаНоменклатуры).Цена;
	ИначеЕсли СтрокаДанных.СертификатСпособРасчетаСуммыВыработки = Перечисления.СпособыРасчетаСтоимостиВыработкиПоРаботеАбонемента.ПоОтдельномуПрейскуранту Тогда
		Сумма = СтрокаДанных.Количество * Ценообразование.ПолучитьЦену(СтрокаДанных.СертификатПрейскурант, СтрокаДанных.Номенклатура,Дата, СтрокаДанных.ХарактеристикаНоменклатуры).Цена;
	КонецЕсли;              
	
	Возврат Сумма;
КонецФункции

Процедура ЗаполнитьРеквизитыСертификата(СертификатСсылка,Владелец = Неопределено, СуммаПродажи = 0, ДатаНачалаДействия = Неопределено)
	
	ОбъектСертификат = СертификатСсылка.ПолучитьОбъект();
	
	Если Не ОбъектСертификат.РучноеРедактированиеВладельца
		Или Не ЗначениеЗаполнено(ОбъектСертификат.ВладелецКарты)
	Тогда 
		ОбъектСертификат.ВладелецКарты = Владелец;
		ОбъектСертификат.РучноеРедактированиеВладельца = Ложь;
	КонецЕсли;
	
	Если Не ОбъектСертификат.РучноеРедактированиеДатыДействия
		Или Не ЗначениеЗаполнено(ОбъектСертификат.ДатаНачалаДействия)
	Тогда 
		ОбъектСертификат.ДатаНачалаДействия = ДатаНачалаДействия;
		ОбъектСертификат.РучноеРедактированиеДатыДействия = Ложь;
	КонецЕсли;
	
	ОбъектСертификат.СуммаПродажи = СуммаПродажи;
	ОбъектСертификат.Записать();
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПодаркам, ТаблицаПоРаботам, ТаблицаПоМатериалам, ТаблицаПоОплате, ТаблицаПоСертификатам, Отказ, Заголовок, ЭтоПродажа,ТаблицаПополнениеСертификатов)
	
	// Документ коррекции дополнительно сторнирует движения если это требуется
	Если Коррекция Тогда	
		РаботаСДокументамиСервер.СторнироватьДвиженияПоРегистрамУПР(ЭтотОбъект, Отказ);	
	КонецЕсли;
	
	Движения.Записать();
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоРаботам, ТаблицаПоМатериалам, ТаблицаПоОплате, ТаблицаПоСертификатам, Отказ, Заголовок, ЭтоПродажа, ТаблицаПополнениеСертификатов);
	
	Если ЭтоПродажа Тогда
		ТаблицаСписания = ТаблицаПоМатериалам.Скопировать();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПодаркам, ТаблицаСписания);
		
		// Добавление строк т.ч. "Товары"
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("БезСкладскогоУчета", Метаданные(), "Товары")
			И Товары.Найти(Истина, "БезСкладскогоУчета") <> Неопределено
		Тогда
			Для Каждого СтрокаТабЧасти Из Товары.НайтиСтроки(Новый Структура("БезСкладскогоУчета", Ложь)) Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаСписания.Добавить(), СтрокаТабЧасти);
			КонецЦикла;
		Иначе
			// Основное поведение
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаСписания);
		КонецЕсли;
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаСписания, Отказ, Заголовок);
		ТЗСписаний = Движения.СписанныеТовары.Выгрузить();
		ПартионныйУчет.пуДвижениеПартийТоваров(Ссылка, ТЗСписаний, Отказ);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту Тогда
		ДвиженияПоПартиямОприходованиеВозврата(СтруктураШапкиДокумента, ТаблицаПоТоварам);		
	КонецЕсли;
	
	// Восстановление Периодов сторнированных записей, сдвинутых назад в прошлое на 1 секунду
	Если Коррекция Тогда	
		НаборДвиженийПоПартиям = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		НаборДвиженийПоПартиям.Отбор.Регистратор.Установить(Ссылка);
		НаборДвиженийПоПартиям.Прочитать();
		
		Для Каждого ЗаписьПоПартиям Из НаборДвиженийПоПартиям Цикл
			ЗаписьПоПартиям.Период = ЭтотОбъект.Дата;
		КонецЦикла;
		
		НаборДвиженийПоПартиям.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоРаботам, ТаблицаПоМатериалам,ТаблицаПоОплате, ТаблицаПоСертификатам, Отказ, Заголовок, ЭтоПродажа, ТаблицаПополнениеСертификатов)
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ Продажи.
	НаборДвижений = Движения.Продажи;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ТаблицаПоРаботамДляПродаж = ТаблицаПоРаботам.Скопировать();
	Для Каждого СтрокаРабот Из ТаблицаПоРаботамДляПродаж Цикл
		Если ЗначениеЗаполнено(СтрокаРабот.Сертификат) Тогда
			СтрокаРабот.Цена = 0;
			СтрокаРабот.Сумма = 0;
			СтрокаРабот.СуммаБезСкидок = 0;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоРаботамДляПродаж, ТаблицаДвижений);
	ТаблицаПоРаботамДляПродаж = Неопределено;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	Для Каждого стрМатериал Из ТаблицаПоМатериалам Цикл
		Если стрМатериал.Сумма<>0 Или стрМатериал.СуммаБезСкидок<>0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(),стрМатериал);
		КонецЕсли;
	КонецЦикла;
	Для Каждого стрСертификат Из ТаблицаПоСертификатам Цикл
		Если стрСертификат.Сумма <> 0 И
			стрСертификат.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги
		Тогда
			СтрДвижения = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрДвижения,стрСертификат);
			СтрДвижения.Номенклатура = стрСертификат.ВидСертификата;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого стрДопродажаСертификата Из ТаблицаПополнениеСертификатов Цикл
		Если стрДопродажаСертификата.Сумма <> 0 И
			стрДопродажаСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги
		Тогда
			СтрДвижения = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрДвижения,стрДопродажаСертификата);
			СтрДвижения.Номенклатура = стрДопродажаСертификата.ВидСертификата;
			СтрДвижения.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Клиент,"Клиент");
	НаборДвижений.мПериод            = Дата;
	Если Не ЭтоПродажа Тогда
		ИнвертироватьСуммы(ТаблицаДвижений);
	КонецЕсли;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	Если Не Отказ Тогда
		Движения.Продажи.ВыполнитьДвижения();
	КонецЕсли;
	
	// Движения ПО РЕГИСТРУ Остатки по сертификатам. 
	ДвижениеПоРегиструОстаткиПоСертификатам(СтруктураШапкиДокумента, ЭтоПродажа, ТаблицаПоСертификатам, ТаблицаПополнениеСертификатов, ТаблицаПоОплате, ТаблицаПоРаботам, Отказ, Заголовок);
	
	// Движения ПО РЕГИСТРУ Оплаты.
	Если Не ЭтоПродажа Тогда
		ИзменитьДопустимыйЗнак(ТаблицаПоОплате);
		ИнвертироватьСуммы(ТаблицаПоОплате);
	КонецЕсли;
	// Заполним таблицу движений. 
	РаботаСДокументамиСервер.ВыполнитьДвиженияПоРегиструОплаты(ЭтотОбъект, ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ);
	
	// Движения ПО РЕГИСТРУ Взаиморасчеты с клиентами.
	
	ТаблицаНоменклатурыПоПолису = Новый Массив;
	
	СуммаОплаты = Оплата.Итог("Сумма");
	СуммаПоКлиенту = 0;
	СуммаПОКонтрагенту = 0;
	ИспользоватьСтраховыеПолисы = мУчетнаяПолитика.ИспользоватьСтраховыеПолисы;
	Если Не ИспользоватьСтраховыеПолисы Или Контрагент.Пустая() Или Не ЗначениеЗаполнено(Документ) Тогда
		СуммаПоКлиенту = СуммаДокумента;
	Иначе
		// Определение, сколько должен клиент, а сколько его контрагент.
		мсТаблиц = Новый Массив();
		мсТаблиц.Добавить(ТаблицаПоРаботам);
		мсТаблиц.Добавить(ТаблицаПоМатериалам);
		мсТаблиц.Добавить(ТаблицаПоТоварам);
		мсТаблиц.Добавить(ТаблицаПоСертификатам);
		мсТаблиц.Добавить(ТаблицаПополнениеСертификатов);
		
		УчетПлатныхМатериаловОбособленноОтУслуг = Документ.ВидПолиса.УчетПлатныхМатериаловОбособленноОтУслуг;
		
		Для Каждого Таблица Из мсТаблиц Цикл
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				Если СтрокаТаблицы.НеОплачиваетсяПолисом Тогда
					СуммаПоКлиенту = СуммаПоКлиенту + СтрокаТаблицы.Сумма;
				Иначе
					СуммаСтрокиПоКонтрагенту = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНеПоПолису;
					Если СуммаСтрокиПоКонтрагенту <> 0 Тогда
						
						Если УчетПлатныхМатериаловОбособленноОтУслуг Или Таблица <> ТаблицаПоМатериалам Тогда
							
							СуммаСтроки = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНеПоПолису;
							
							// Добавление к сумме услуги суммы её платных расходных материалов
							Если Не УчетПлатныхМатериаловОбособленноОтУслуг
								И Таблица = ТаблицаПоРаботам
							Тогда
								СтрокиМатериалов = Материалы.НайтиСтроки(Новый Структура("КлючСтрокиРаботы", СтрокаТаблицы.КлючСтроки));
								Для Каждого СтрокаМатериала Из СтрокиМатериалов Цикл
									Если Не СтрокаМатериала.НеОплачиваетсяПолисом Тогда
										СуммаСтроки = СуммаСтроки + (СтрокаМатериала.Сумма - СтрокаМатериала.СуммаНеПоПолису);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							ТаблицаНоменклатурыПоПолису.Добавить(
								Новый Структура("Номенклатура,Сумма,Количество,Сотрудник",
								?(Таблица.Колонки.Найти("Номенклатура") <> Неопределено, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Сертификат.ВидСертификата.Номенклатура),
								СуммаСтроки,
								?(Таблица <> ТаблицаПополнениеСертификатов,СтрокаТаблицы.Количество,0),
								СтрокаТаблицы.Сотрудник));
							
								СуммаПОКонтрагенту	= СуммаПОКонтрагенту + СуммаСтроки;							
							
							НоменклатураСтроки = ?(Таблица.Колонки.Найти("Номенклатура") <> Неопределено, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Сертификат.ВидСертификата.Номенклатура);
							НоменклатураПолиса = МедицинскоеСтрахование.ДопустимаяНоменклатураПолиса(Документ.ВидПолиса);
							Если НоменклатураПолиса.Количество() <> 0
								И НоменклатураПолиса.Найти(НоменклатураСтроки) = Неопределено
							Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Номенклатура %1 не входит в перечень допустимых по полису'"),
										?(Таблица.Колонки.Найти("Номенклатура") <> Неопределено, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Сертификат.ВидСертификата.Номенклатура)));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//  1. Стоимость услуг.
	Если СуммаДокумента <> 0 Тогда
		Движение = Движения.ВзаиморасчетыСКлиентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма	= СуммаДокумента * ?(ЭтоПродажа, 1, -1);
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КомплексныйРасчет", Метаданные()) И ЗначениеЗаполнено(ЭтотОбъект["КомплексныйРасчет"]) Тогда
			Если ЭтотОбъект.КомплексныйРасчет.Вид.ОбособленныйУчетВзаиморасчетов Тогда
				Движение.Сделка = ЭтотОбъект.КомплексныйРасчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Движения ПО РЕГИСТРУ Взаиморасчеты с контрагентами.
	Если СуммаПоКонтрагенту <> 0
		И Не СтруктураШапкиДокумента.Документ.ВидПолиса.ФиксироватьДолгКонтрагентаПриПроведенииРеестраОУ
	Тогда
		Движение = Движения.ВзаиморасчетыСКонтрагентами.ДобавитьПриход();
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Сумма      = ?(ЭтоПродажа,СуммаПоКонтрагенту,-СуммаПоКонтрагенту);
	КонецЕсли;
	
	//  2. Оплата.
	СуммаОплаты = Оплата.Итог("Сумма") + ?(СдачуВДепозит, Сдача, 0);
	Если СуммаОплаты <> 0 Тогда
		Движение = Движения.ВзаиморасчетыСКлиентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;

		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма	= СуммаОплаты * ?(ЭтоПродажа, 1, -1);
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КомплексныйРасчет", Метаданные()) И ЗначениеЗаполнено(ЭтотОбъект["КомплексныйРасчет"]) Тогда
			Если ЭтотОбъект.КомплексныйРасчет.Вид.ОбособленныйУчетВзаиморасчетов Тогда
				Движение.Сделка = ЭтотОбъект.КомплексныйРасчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Движения ПО РЕГИСТРУ Денежные средства.
	СуммаОплатыНаличными = 0;
	ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	Для Каждого СтрокаОплаты Из ТаблицаПоОплате Цикл
		Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплаты.Наличными Тогда
			СуммаОплатыНаличными = СуммаОплатыНаличными + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СдачуВДепозит Тогда
		СуммаОплатыНаличными = СуммаОплатыНаличными + ?(ЭтоПродажа, Сдача, -Сдача);	
	КонецЕсли;
	
	Если СуммаОплатыНаличными <> 0 Тогда
		// При возврате делается приход на отрицательную сумму.
		Движение = Движения.ДенежныеСредства.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Касса  = Касса;
		Движение.Сумма  = СуммаОплатыНаличными;
	КонецЕсли;
	
	// Движения ПО РЕГИСТРУ Движения денежных средств
	Если СуммаОплатыНаличными <> 0 Тогда
		СуммаДвижения = ?(ЭтоПродажа,СуммаОплатыНаличными,-СуммаОплатыНаличными);
		РегистрыНакопления.ДвиженияДенежныхСредств.СформироватьДвиженияПоШапкеДокумента(Новый Структура("Дата, Касса, СуммаДокумента, СтатьяДвиженияДенежныхСредств",Дата,Касса,СуммаДвижения, СтатьяДвиженияДенежныхСредств),
			Движения.ДвиженияДенежныхСредств,ЭтоПродажа,Отказ);
	КонецЕсли;
	Для Каждого СтрокаОплаты Из ТаблицаПоОплате.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные)) Цикл
		СуммаДвижения = СтрокаОплаты.Сумма * ?(ЭтоПродажа, 1, -1);
		РегистрыНакопления.ДвиженияДенежныхСредств.СформироватьДвиженияПоШапкеДокумента(Новый Структура("Дата, Касса, СуммаДокумента, СтатьяДвиженияДенежныхСредств",Дата,СтрокаОплаты.ЭквайринговыйТерминал,СуммаДвижения, СтатьяДвиженияДенежныхСредств),
			Движения.ДвиженияДенежныхСредств,ЭтоПродажа,Отказ);
	КонецЦикла;
	
	// Движения ПО РЕГИСТРУ ВыработкаСотрудников.
	УменьшатьВыработкуПриВозврате = мУчетнаяПолитика.УменьшатьВыработкуПриВозврате;
	ИндексПервойСтроки = Движения.ВыработкаСотрудников.Количество();
	// Услуги.
	Если ЭтоПродажа Или УменьшатьВыработкуПриВозврате Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПоРаботам Цикл
			Если СтрокаТаблицы.Сертификат.Пустая() Или СтрокаТаблицы.СертификатВключатьВыполнениеРаботВВыработку Тогда
				Движение = Движения.ВыработкаСотрудников.Добавить();
				Движение.Период = Дата;
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Продолжительность	= СтрокаТаблицы.Продолжительность-НачалоДня(СтрокаТаблицы.Продолжительность);
				Движение.ТипВыработки       = ?(ЗначениеЗаполнено(СтрокаТаблицы.Сертификат),Перечисления.ТипыВыработки.УслугиПоАбонементу,Перечисления.ТипыВыработки.Услуги);
				Если Не СтрокаТаблицы.Сертификат.Пустая() Тогда
					Движение.Сумма			= РасчитатьСуммуВыработкиПоРаботеАбонемента(СтрокаТаблицы);
					Движение.СуммаБезСкидок = Движение.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		// Товары.
		Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			Движение = Движения.ВыработкаСотрудников.Добавить();
			Движение.Период = Дата;
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.Продолжительность	= 0;
			Движение.ТипВыработки       = Перечисления.ТипыВыработки.Товары;
		КонецЦикла;	                      
		
		// Материалы, которые включаются в стоимость.
		Для Каждого СтрокаТаблицы Из ТаблицаПоМатериалам Цикл
			Если СтрокаТаблицы.Сумма <> 0 Тогда
				Движение = Движения.ВыработкаСотрудников.Добавить();
				Движение.Период = Дата;
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Продолжительность	= 0;
				Движение.ТипВыработки       = Перечисления.ТипыВыработки.Материалы;
			КонецЕсли;
		КонецЦикла;	
		// Сертификаты.
		Для Каждого СтрокаТаблицы Из ТаблицаПоСертификатам Цикл
			Если СтрокаТаблицы.Сумма <> 0 Или СтрокаТаблицы.СуммаБезСкидок <> 0 Тогда
				Движение = Движения.ВыработкаСотрудников.Добавить();
				Движение.Период = Дата;
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Продолжительность	= 0;
				Если СтрокаТаблицы.ТипСертификата = Перечисления.ТипыСертификатов.НаОплату Тогда
					Движение.ТипВыработки       = Перечисления.ТипыВыработки.Сертификаты;
				Иначе
					Движение.ТипВыработки       = Перечисления.ТипыВыработки.Абонементы;
				КонецЕсли;
				Движение.Номенклатура = СтрокаТаблицы.ВидСертификата;
			КонецЕсли;
		КонецЦикла;
		// Сертификаты допроданные строки.
		Для Каждого СтрокаТаблицы Из ТаблицаПополнениеСертификатов Цикл
			Если СтрокаТаблицы.Сумма <> 0 Тогда
				Движение = Движения.ВыработкаСотрудников.Добавить();
				Движение.Период = Дата;
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Продолжительность	= 0;
				Движение.Количество = 0;
				Если СтрокаТаблицы.ТипСертификата = Перечисления.ТипыСертификатов.НаОплату Тогда
					Движение.ТипВыработки       = Перечисления.ТипыВыработки.Сертификаты;
				Иначе
					Движение.ТипВыработки       = Перечисления.ТипыВыработки.Абонементы;
				КонецЕсли;
				Движение.Номенклатура = СтрокаТаблицы.ВидСертификата;
			КонецЕсли;
		КонецЦикла;
		
		// Выработка по ролям.
		Для каждого СтрокаТаблицы из РолиИсполнителей Цикл
			
			ИскомыеСтроки = Новый Массив;
			Если СтрокаТаблицы.ИмяТЧ = "Работы" Тогда
				
				ИскомыеСтроки = ТаблицаПоРаботам.НайтиСтроки(Новый Структура("КлючСтроки",СтрокаТаблицы.КлючСтроки));		
				Для Каждого СтрокаИскомойТаблицы Из ИскомыеСтроки Цикл
					
					Если СтрокаИскомойТаблицы.Сертификат.Пустая() Или СтрокаИскомойТаблицы.СертификатВключатьВыполнениеРаботВВыработку Тогда
						Движение = Движения.ВыработкаСотрудников.Добавить();
						Движение.Период = Дата;
						ЗаполнитьЗначенияСвойств(Движение,СтрокаИскомойТаблицы);
						Движение.Продолжительность	= СтрокаИскомойТаблицы.Продолжительность-НачалоДня(СтрокаИскомойТаблицы.Продолжительность);
						Движение.ТипВыработки       = ?(ЗначениеЗаполнено(СтрокаИскомойТаблицы.Сертификат),Перечисления.ТипыВыработки.УслугиПоАбонементу,Перечисления.ТипыВыработки.Услуги);
						Если Не СтрокаИскомойТаблицы.Сертификат.Пустая() Тогда
							Движение.Сумма			= РасчитатьСуммуВыработкиПоРаботеАбонемента(СтрокаИскомойТаблицы);
							Движение.СуммаБезСкидок = Движение.Сумма;
						КонецЕсли;
						
						Движение.Сотрудник = СтрокаТаблицы.Сотрудник;
						Движение.ТрудоваяРоль = СтрокаТаблицы.Роль;
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли СтрокаТаблицы.ИмяТЧ = "Товары" Тогда
				
				ИскомыеСтроки = ТаблицаПоТоварам.НайтиСтроки(Новый Структура("КлючСтроки",СтрокаТаблицы.КлючСтроки));
				Для каждого СтрокаИскомойТаблицы Из ИскомыеСтроки Цикл
					Движение = Движения.ВыработкаСотрудников.Добавить();
					Движение.Период = Дата;
					ЗаполнитьЗначенияСвойств(Движение,СтрокаИскомойТаблицы);
					Движение.Продолжительность	= 0;
					Движение.ТипВыработки       = Перечисления.ТипыВыработки.Товары;
					
					Движение.Сотрудник = СтрокаТаблицы.Сотрудник;
					Движение.ТрудоваяРоль = СтрокаТаблицы.Роль;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтоПродажа Тогда
			Для Сч = ИндексПервойСтроки По Движения.ВыработкаСотрудников.Количество()-1 Цикл
				Движение = Движения.ВыработкаСотрудников[Сч];
				Движение.Сумма			= 0 - Движение.Сумма;
				Движение.СуммаБезСкидок = 0 - Движение.СуммаБезСкидок;
				Движение.Количество		= 0 - Движение.Количество;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	

	// Движения ПО РЕГИСТРУ Расход материалов. 
	Если ЭтоПродажа Тогда
		РегистрыНакопления.РасходМатериалов.ВыполнитьДвиженияПоРегистру(ЭтотОбъект,ТаблицаПоМатериалам, ТаблицаПоРаботам, СтруктураШапкиДокумента, Отказ);
	КонецЕсли;
	
	// Движения по РЕГИСТРУ Накопление по скидкам.
	ДвиженияПоРегиструНакопленияПоСкидкам(ЭтоПродажа, Отказ);
	
	ОбщаяСуммаПоПолису = 0;
	// Движение по регистру ПродажиПоСтраховымПолисам.
	Если ТаблицаНоменклатурыПоПолису.Количество() <> 0 Тогда
		ВидПолиса = Документ.ВидПолиса;
		ДоговорСоСтраховой = МедицинскоеСтрахование.ДоговорСоСтраховойПолиса(ВидПолиса, Филиал, Дата);
		Если Не ЗначениеЗаполнено(ДоговорСоСтраховой) Тогда
			МедицинскоеСтрахование.СообщитьОбОшибкеНетДоговораСоСтраховой(ВидПолиса, Филиал.Организация, Дата, Отказ);
		КонецЕсли;
			
		Для Каждого СтрокаТаблицы Из ТаблицаНоменклатурыПоПолису Цикл
			
			Если СуммаСтроки <> 0 Тогда
				
				Движение = Движения.ПродажиПоСтраховымПолисам.Добавить();
				Движение.Период = Дата;
				Движение.Контрагент = ВидПолиса.Контрагент;
				Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
				Движение.Полис = Документ;
				Движение.СоглашениеСКонтрагентом = ДоговорСоСтраховой;
				Движение.Количество = ?(ЭтоПродажа, 1, -1) * СтрокаТаблицы.Количество;
				Движение.Сумма = ?(ЭтоПродажа, 1, -1) * СтрокаТаблицы.Сумма;
				Движение.Сотрудник = СтрокаТаблицы.Сотрудник;
				
				ОбщаяСуммаПоПолису = ОбщаяСуммаПоПолису + Движение.Сумма;
			КонецЕсли;     
		КонецЦикла;
	КонецЕсли;
	 
	// Проверим на лимиты и вылет за лимиты.
	Если ЭтоПродажа
		И Не ДополнительныеСвойства.Свойство("ОбменДаннымиЗагрузка")
		И ОбщаяСуммаПоПолису > 0
	Тогда
		Если Документ.ВидПолиса.ЛимитированноеНаправление Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЛимитыСтрахованияСрезПоследних.ВидПолиса,
			               |	ЛимитыСтрахованияСрезПоследних.ДатаОкончания,
			               |	ЛимитыСтрахованияСрезПоследних.Сумма,
			               |	ЛимитыСтрахованияСрезПоследних.Период,
						   |	ЛимитыСтрахованияСрезПоследних.Регистратор
			               |ИЗ
			               |	РегистрСведений.ЛимитыСтрахования.СрезПоследних(&НаДату, ВидПолиса = &ВидПолиса) КАК ЛимитыСтрахованияСрезПоследних";
			
			Запрос.УстановитьПараметр("НаДату", Дата);
			Запрос.УстановитьПараметр("ВидПолиса", Документ.ВидПолиса);
			
			Результат	= Запрос.Выполнить();
			Выгрузка	= Результат.Выгрузить();
			
			Если Выгрузка.Количество() = 0 
				ИЛИ Выгрузка[0].ДатаОкончания < НачалоДня(Дата) Тогда
				
				ТекстОшибки = НСтр("ru='На дату документа не установлены лимиты страхования по виду полиса клиента!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
				
			Иначе
				
				ИскомыйЛимит = Выгрузка[0].Сумма;
				
				// Определим границы того "месяца/периода", в который попала продажа		
				Если Выгрузка[0].Регистратор.ЕжемесячныйЛимит Тогда
					ДатыОпределены = Ложь;
					СчетчикМесяцев = 1;
					ЛеваяГраницаПериода = Выгрузка[0].Период;
					// Двигаемся слева направо, добавляя по 1 месяцу, пока не определим нужный
					Пока НЕ ДатыОпределены Цикл
						Если Дата < ДобавитьМесяц(ЛеваяГраницаПериода, СчетчикМесяцев) Тогда
							НачалоДействия = ДобавитьМесяц(ЛеваяГраницаПериода, СчетчикМесяцев - 1);
							Если ДобавитьМесяц(ЛеваяГраницаПериода, СчетчикМесяцев) >= Выгрузка[0].ДатаОкончания Тогда 
								ОкончаниеДействия = Выгрузка[0].ДатаОкончания;
							Иначе
								ОкончаниеДействия = ДобавитьМесяц(ЛеваяГраницаПериода, СчетчикМесяцев);
							КонецЕсли;						
							ДатыОпределены = Истина;
						КонецЕсли;
						СчетчикМесяцев = СчетчикМесяцев + 1;
					КонецЦикла;
				Иначе 
					НачалоДействия		= Выгрузка[0].Период;
					ОкончаниеДействия	= Выгрузка[0].ДатаОкончания;
				КонецЕсли;
													
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПродажиПоСтраховымПолисамОбороты.СуммаОборот
				|ИЗ
				|	РегистрНакопления.ПродажиПоСтраховымПолисам.Обороты(&НачалоДействия, &ОкончаниеДействия, , Полис.ВидПолиса = &ВидПолиса) КАК ПродажиПоСтраховымПолисамОбороты";
				
				Запрос.УстановитьПараметр("НачалоДействия", НачалоДня(НачалоДействия));
				Запрос.УстановитьПараметр("ОкончаниеДействия", КонецДня(ОкончаниеДействия));
				Запрос.УстановитьПараметр("ВидПолиса", Документ.ВидПолиса);
				
				Результат	= Запрос.Выполнить();
				Выгрузка	= Результат.Выгрузить();
				СуммаОборот = 0;
				Если Выгрузка.Количество() <> 0 Тогда
					СуммаОборот = Выгрузка[0].СуммаОборот	
				КонецЕсли;
				Если ИскомыйЛимит < СуммаОборот + ОбщаяСуммаПоПолису Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Превышен лимит по полису %1 на сумму %2'"),
							Документ,
							ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаОборот + ОбщаяСуммаПоПолису - ИскомыйЛимит)));
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДвиженияПоГарантийнымПисьмам(Отказ, ЭтоПродажа, ОбщаяСуммаПоПолису);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КомплексныйРасчет", Метаданные())
		И ЗначениеЗаполнено(ЭтотОбъект["КомплексныйРасчет"])
	Тогда
		ПозицииДокумента = ТаблицаПоТоварам.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена, КоличествоЕИ");
		ПозицииДокумента.Колонки.КоличествоЕИ.Имя = "Количество";
		Для Каждого СтрокаТаблицы Из ТаблицаПоРаботам Цикл
			ПозицияДокумента = ПозицииДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(ПозицияДокумента, СтрокаТаблицы);
			ПозицияДокумента.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		КонецЦикла;
		ПозицииДокумента.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена", "Количество");
		
		ТаблицаДвижений = КомплексныеРасчетыКлиентов.ПроверитьВозможностьСписанияПозицийКомплексногоРасчета(ЭтотОбъект, МоментВремени(), ЭтотОбъект.КомплексныйРасчет, Ложь, ПозицииДокумента, Отказ, ЭтоПродажа);
		Если ТаблицаДвижений.Итог("Нехватка") <> 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(КомплексныеРасчетыКлиентов.СформироватьСообщениеОшибкиОстаткаПоКомплексномуРасчету(ТаблицаДвижений, ЭтоПродажа));
		КонецЕсли;
		
		Если Не Отказ Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
				Движение = Движения.НоменклатураКомплексныхРасчетовКлиентов.ДобавитьРасход();
				Движение.Период = Дата;
				Движение.КомплексныйРасчет = ЭтотОбъект.КомплексныйРасчет;
				ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
				Если Не ЭтоПродажа Тогда
					Движение.Количество = -СтрокаТаблицы.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегиструНакопленияПоСкидкам(ЭтоПродажа, Отказ)
	
	// Получение действующих скидок документа для накопления
	МенеджерДокумента = Документы.ОказаниеУслуг;
	СписокПолучателей = МенеджерДокумента.СформироватьСписокПолучателейДокумента(ЭтотОбъект);
	
	ТипыСкидки = Новый Массив;
	ТипыСкидки.Добавить(Перечисления.ТипыСкидок.Бонусы);
	ТипыСкидки.Добавить(Перечисления.ТипыСкидок.НакопительнаяСкидка);
	
	ТаблСкидок = РаботаСоСкидками.ПолучитьДействующиеСкидки(Дата,
															СписокПолучателей,
															ТипыСкидки,
															МенеджерДокумента.ПолучитьФилиалДокумента(ЭтотОбъект));
	
	// Формирование таблицы строк документа
	ТаблСтроки = МенеджерДокумента.ПолучитьТаблицуПродажДокумента(ЭтотОбъект, Ложь);
	
	// Расчет накоплений
	ТаблицаНакопления = Новый ТаблицаЗначений;
	ТаблицаНакопления.Колонки.Добавить("Получатель");
	ТаблицаНакопления.Колонки.Добавить("Накопление");
	ТаблицаНакопления.Колонки.Добавить("ВидСкидки");
	
	Если ТаблСкидок.Количество() > 0 Тогда
		
		Для Каждого СтрокаСкидки Из ТаблСкидок Цикл
			
			суммНакопл = 0;
			
			текВидСкидки = СтрокаСкидки.ВидСкидки;
			ТаблСтрокиОтбор = РаботаСоСкидками.ПолучитьПродажиСоответствующиеОтбору(ТаблСтроки, СтрокаСкидки.ВидСкидки, Ложь, Дата);
			
			// Если бонус не начисляется на строки со скидкой, то убираем все строки со скидками.
			Если СтрокаСкидки.ВидСкидки.БонусыНеНачислятьНаПозицииСоСкидкой Тогда
				мОбрИнд = ТаблСтрокиОтбор.Количество()-1;
				Для Сч = 0 По мОбрИнд Цикл
					
					СтрокаТЗ = ТаблСтрокиОтбор[мОбрИнд-Сч];
					Если СтрокаТЗ.СуммаСкидки <> 0 Тогда
						ТаблСтрокиОтбор.Удалить(мОбрИнд-Сч);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если ТаблСтрокиОтбор = Неопределено Или ТаблСтрокиОтбор.Количество() = 0 Тогда Продолжить; КонецЕсли;
			
			// ОПРЕДЕЛЕНИЕ СУММЫ НАКОПЛЕНИЯ
			
			// ЕСЛИ БОНУС
			Если текВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.Бонусы Тогда
				
				// Анализ таблицы накопления, так как бонус
				РазмерыНакопления = СтрокаСкидки.ВидСкидки.РазмерыНакопления;
			
				Если РазмерыНакопления.Количество() = 0 Тогда 
					Продолжить; 
					
				ИначеЕсли РазмерыНакопления.Количество() = 1 И Не ЗначениеЗаполнено(РазмерыНакопления[0].Номенклатура) Тогда 
					
					Если РазмерыНакопления[0].Размер > 0 Тогда
						Если СтрокаСкидки.ВидСкидки.НакоплениеБонусов = Перечисления.ФормыСкидки.Процент Тогда
							суммНакопл = суммНакопл + ТаблСтрокиОтбор.Итог("Сумма") * РазмерыНакопления[0].Размер/100;
						ИначеЕсли СтрокаСкидки.ВидСкидки.НакоплениеБонусов = Перечисления.ФормыСкидки.Количество Тогда
							суммНакопл = суммНакопл + ТаблСтрокиОтбор.Итог("Количество") * РазмерыНакопления[0].Размер;
						КонецЕсли;
					КонецЕсли;
					
				// Если есть таблица расшифровки	
				Иначе
					суммНакопл = 0;
					Для Каждого стрОтб Из ТаблСтрокиОтбор Цикл 
						
						Для Каждого стрНак Из размерыНакопления Цикл
							
							Если стрОтб.Номенклатура = стрНак.Номенклатура ИЛИ стрОтб.Номенклатура.КатегорияВыработки = стрНак.Номенклатура
								Или (ТипЗнч(стрНак.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И стрОтб.Номенклатура.ПринадлежитЭлементу(стрНак.Номенклатура)) Тогда
								
								Если СтрокаСкидки.ВидСкидки.НакоплениеБонусов = Перечисления.ФормыСкидки.Процент Тогда
									суммНакопл = суммНакопл + стрОтб.Сумма * стрНак.Размер/100;
								ИначеЕсли СтрокаСкидки.ВидСкидки.НакоплениеБонусов = Перечисления.ФормыСкидки.Количество Тогда
									суммНакопл = суммНакопл + стрОтб.Количество * стрНак.Размер;
								КонецЕсли;
								
								Прервать;
								
							КонецЕсли;	  
						КонецЦикла;	
					КонецЦикла;	
				КонецЕсли;
				
			// ЕСЛИ НАКОПИТЕЛЬНАЯ СКИДКА
			ИначеЕсли текВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.НакопительнаяСкидка Тогда
				
				Если текВидСкидки.ФормаСкидки = Перечисления.ФормыСкидки.Количество Тогда
					суммНакопл = ТаблСтрокиОтбор.Итог("Количество");
				Иначе
					суммНакопл = ТаблСтрокиОтбор.Итог("Сумма");
				КонецЕсли;
				
			КонецЕсли;
			
			// Записываем накопление в итоговую табл
			ТекПолучатель = РаботаСоСкидками.ОпределитьПолучаетеляСкидкиДокумента(текВидСкидки, Клиент, КартаКлиента);;
			Если суммНакопл > 0 И ЗначениеЗаполнено(ТекПолучатель) Тогда
				нс = ТаблицаНакопления.Добавить();
				нс.Получатель	= ТекПолучатель;
				нс.Накопление	= суммНакопл;
				нс.ВидСкидки	= текВидСкидки;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Для Каждого СтрокаНакопления Из ТаблицаНакопления Цикл
		Движение = Движения.НакопленияПоСкидкам.ДобавитьПриход();
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, СтрокаНакопления);
		Если Не ЭтоПродажа Тогда
			Движение.Накопление = -Движение.Накопление;
		КонецЕсли;
	КонецЦикла;	
	
	// Списание бонусов
	ЕстьСписаниеБонусов = Ложь;
	
	Для Каждого СтрокаСкидки Из Скидки Цикл
		
		Если СтрокаСкидки.ПрименятьСкидку
			И СтрокаСкидки.Скидка.ТипСкидки = Перечисления.ТипыСкидок.Бонусы
			И СтрокаСкидки.КоличествоБонусов <> 0 
		Тогда
			Движение = Движения.НакопленияПоСкидкам.ДобавитьРасход();
           	Движение.Период		= Дата;
			Движение.ВидСкидки = СтрокаСкидки.Скидка;
			Если ЭтоПродажа Тогда
				Движение.Накопление = СтрокаСкидки.КоличествоБонусов / СтрокаСкидки.Скидка.НоминалБонуса;
			Иначе
				Движение.Накопление = -СтрокаСкидки.КоличествоБонусов / СтрокаСкидки.Скидка.НоминалБонуса;			
			КонецЕсли;
			
			Движение.Получатель = РаботаСоСкидками.ОпределитьПолучаетеляСкидкиДокумента(СтрокаСкидки.Скидка, Клиент, КартаКлиента);
			
			ЕстьСписаниеБонусов = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСписаниеБонусов Тогда
		ПроверитьПоявлениеОтрицательныхОстатковБонусов(Отказ, ЭтоПродажа);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) 
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоГарантийнымПисьмам(Отказ, ЭтоПродажа, Знач ОбщаяСуммаПоПолису)
	
	Перем ОсталосьСписатьСуммуПоПолису;
	
	Если ОбщаяСуммаПоПолису <> 0
		И Документ.ВидПолиса.УчетОстаткаПоГарантийнымПисьмам
	Тогда
		ОсталосьСписатьСуммуПоПолису = ОбщаяСуммаПоПолису;
	
		// Получение перечня услуг с суммой, с суммой материалов, оплачиваемых ими.
		УслугиПоПолису = Новый ТаблицаЗначений;
		УслугиПоПолису.Колонки.Добавить("Номенклатура");
		УслугиПоПолису.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		УслугиПоПолису.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		
		УслугиПоПолису.Сортировать("Номенклатура, Сумма УБЫВ, Количество"); // Более дорогие (по какой-то причине ценообразования) засчитывать в первую очередь.
		
		Для Каждого СтрокаРаботы Из Работы Цикл
			
			Если Не СтрокаРаботы.НеОплачиваетсяПолисом
				И СтрокаРаботы.СуммаНеПоПолису < СтрокаРаботы.Сумма
			Тогда // Услуга по полису.
			
				// Определяю сумму материалов, которая будет засчитываться в услуге через гарантийные письма на услуги.
				СуммаМатериалов = 0;
				Если Не Документ.ВидПолиса.УчетПлатныхМатериаловОбособленноОтУслуг Тогда
					// Только для видов полисов, где выключен режим материалов, обособленных от услуг (по умолчанию как раз выключен).
					СтрокиМатериалов = Материалы.НайтиСтроки(Новый Структура("КлючСтрокиРаботы", СтрокаРаботы.КлючСтроки));
					Для Каждого СтрокаМатериала Из СтрокиМатериалов Цикл
						Если Не СтрокаМатериала.НеОплачиваетсяПолисом Тогда
							СуммаМатериалов = СуммаМатериалов + (СтрокаМатериала.Сумма - СтрокаМатериала.СуммаНеПоПолису);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			    СтрокаУслугиПоПолису = УслугиПоПолису.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУслугиПоПолису, СтрокаРаботы);
				СтрокаУслугиПоПолису.Сумма = СтрокаРаботы.Сумма - СтрокаРаботы.СуммаНеПоПолису + СуммаМатериалов;
			КонецЕсли;
		КонецЦикла;
		
		ОстаткиПоПолису = МедицинскоеСтрахование.ОстаткиГарантийныхПоПолису(МоментВремени(), Документ);
		ТаблицыСписания = ДвиженияПоГарантийнымПисьмам_ПустыеТаблицыДвижений();
		
		// Обход остатков на услуги.
		Отбор = Новый Структура("Номенклатура");
		Для Каждого СтрокаОстаток Из ОстаткиПоПолису.НаУслуги Цикл
			
			Отбор.Номенклатура = СтрокаОстаток.Номенклатура;
			СтрокиУслугиВДокументе = УслугиПоПолису.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУслуги Из СтрокиУслугиВДокументе Цикл
				
				Если СтрокаУслуги.Количество > 0
					И СтрокаОстаток.Количество > 0
				Тогда
					// Строка будущего списания (движения)
					СтрокаСписания = ТаблицыСписания.НаУслуги.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСписания, СтрокаОстаток);
					СтрокаСписания.Количество = Мин(СтрокаОстаток.Количество, СтрокаУслуги.Количество);
					
					// Уменьшение остатка незачтенной суммы по полису
					Если СтрокаСписания.Количество = СтрокаУслуги.Количество Тогда
						ОсталосьСписатьСуммуПоПолису = ОсталосьСписатьСуммуПоПолису - СтрокаУслуги.Сумма;
					Иначе
						ОсталосьСписатьСуммуПоПолису = ОсталосьСписатьСуммуПоПолису - СтрокаУслуги.Сумма * СтрокаСписания.Количество / СтрокаУслуги.Количество;
					КонецЕсли;
					
					СтрокаОстаток.Количество = СтрокаОстаток.Количество - СтрокаСписания.Количество;
					СтрокаУслуги.Количество = СтрокаУслуги.Количество - СтрокаСписания.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОстатокСуммПоПолису = ОстаткиПоПолису.НаСумму.Итог("Сумма");
		Если ОсталосьСписатьСуммуПоПолису > ОстатокСуммПоПолису Тогда
			// Попытка оплатить полисом больше, чем есть по гарантийным писмам на сумму и на услуги.
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Превышен остаток по гарантийным письмам по полису %1 на сумму %2'"),
							Документ,
							ОбщегоНазначенияКлиентСервер.ФорматСумм(ОсталосьСписатьСуммуПоПолису - ОстатокСуммПоПолису));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Отказ = Истина;	
			
		Иначе
			// Зачет суммовых гарантийных писем
			Для Каждого СтрокаОстаток Из ОстаткиПоПолису.НаСумму Цикл
				
				СтрокаСписания = ТаблицыСписания.НаСумму.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСписания, СтрокаОстаток);
				
				СтрокаСписания.Сумма = Мин(СтрокаОстаток.Сумма, ОсталосьСписатьСуммуПоПолису);
				ОсталосьСписатьСуммуПоПолису = ОсталосьСписатьСуммуПоПолису - СтрокаСписания.Сумма;
				Если ОсталосьСписатьСуммуПоПолису = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТаблицыСписания.НаСумму.ЗаполнитьЗначения(Документ, "СтраховойПолис");
		ТаблицыСписания.НаУслуги.ЗаполнитьЗначения(Документ, "СтраховойПолис");
		
		// Движения по регистрам
		Для Каждого СтрокаСписания Из ТаблицыСписания.НаСумму Цикл
			
			Движение = Движения.ОстаткиПоГарантийнымПисьмам.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаСписания);
			Движение.Регистратор = Ссылка;
			Движение.Период = Дата;
			
		КонецЦикла;
		
		Для Каждого СтрокаСписания Из ТаблицыСписания.НаУслуги Цикл
			
			Движение = Движения.ОстаткиПоГарантийнымПисьмамНаУслуги.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаСписания);
			Движение.Регистратор = Ссылка;
			Движение.Период = Дата;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДвиженияПоГарантийнымПисьмам_ПустыеТаблицыДвижений()
	
	НаСумму = Новый ТаблицаЗначений;
	НаСумму.Колонки.Добавить("СтраховойПолис", Новый ОписаниеТипов("СправочникСсылка.СтраховыеПолисы"));
	НаСумму.Колонки.Добавить("ГарантийноеПисьмо", Новый ОписаниеТипов("ДокументСсылка.ГарантийноеПисьмоПоПолису"));
	НаСумму.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	НаУслуги = Новый ТаблицаЗначений;
	НаУслуги.Колонки.Добавить("СтраховойПолис", Новый ОписаниеТипов("СправочникСсылка.СтраховыеПолисы"));
	НаУслуги.Колонки.Добавить("ГарантийноеПисьмо", Новый ОписаниеТипов("ДокументСсылка.ГарантийноеПисьмоПоПолису"));
	НаУслуги.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НаУслуги.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Возврат Новый Структура("НаСумму, НаУслуги", НаСумму, НаУслуги);
	
КонецФункции

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПодаркам, ТаблицаПоМатериалам, ТаблицаПоРаботам, ТаблицаПоОплате, ТаблицаПоСертификатам, ТаблицаПополнениеСертификатов)
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Работы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры" , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ВидНоменклатуры"     , "Номенклатура.ВидНоменклатуры");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("СуммаБезСкидок"      , "Количество * Цена");
	СтруктураПолей.Вставить("КатегорияВыработки"  , "Номенклатура.КатегорияВыработки");
	СтруктураПолей.Вставить("Продолжительность"   , "Продолжительность");
	СтруктураПолей.Вставить("Сертификат"          , "Сертификат");
	
	СтруктураПолей.Вставить("ВидСертификата"      , "Сертификат.ВидСертификата");
	СтруктураПолей.Вставить("СертификатНоминал"      		  , "Сертификат.ВидСертификата.Номинал");
	СтруктураПолей.Вставить("СертификатВключатьВыполнениеРаботВВыработку" , "Сертификат.ВидСертификата.ВключатьВыполнениеРаботВВыработку");
	СтруктураПолей.Вставить("СертификатСпособРасчетаСуммыВыработки"       , "Сертификат.ВидСертификата.СпособРасчетаСуммыВыработки");
	СтруктураПолей.Вставить("СертификатПрейскурант", "Сертификат.ВидСертификата.Прейскурант");
	
	СтруктураПолей.Вставить("КлючСтроки"        	, "КлючСтроки");  
	СтруктураПолей.Вставить("Сотрудник"				, "Сотрудник");
	СтруктураПолей.Вставить("НеОплачиваетсяПолисом"	, "НеОплачиваетсяПолисом");
	СтруктураПолей.Вставить("СуммаНеПоПолису"		, "СуммаНеПоПолису");
	
	РезультатЗапросаПоРаботам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Работы", СтруктураПолей);
	ТаблицаПоРаботам = РезультатЗапросаПоРаботам.Выгрузить();
	ТаблицаПоРаботам.Колонки.Добавить("СертификатСумма", Новый ОписаниеТипов("Число"));
	ТаблицаПоРаботам.Колонки.Добавить("СертификатСуммаПокупки", Новый ОписаниеТипов("Число"));
	ТаблицаПоРаботам.Колонки.Добавить("СертификатСуммаПокупкиСписание", Новый ОписаниеТипов("Число"));
	ДополнитьСотрудникаВТаблицеВыработки(ТаблицаПоРаботам);
	
	// Получим необходимые данные по табличной части "НатуральныеСкидки".
	СтруктураПолей.Очистить(); 
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ВидНоменклатуры"     , "Номенклатура.ВидНоменклатуры");
	СтруктураПолей.Вставить("Количество"          , "Количество * ЕдиницаИзмерения.Коэффициент/Выбор Когда Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда 1 Иначе Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Конец");	
	СтруктураПолей.Вставить("ЕдиницаИзмерения"    , "ЕдиницаИзмерения");
	РезультатЗапросаПоРаботам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НатуральныеСкидки", СтруктураПолей);
	ТаблицаПоПодаркам = РезультатЗапросаПоРаботам.Выгрузить();
	ТаблицаПоПодаркам.Колонки.Добавить("Склад");
	ТаблицаПоПодаркам.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаПоПодаркам.Колонки.Добавить("Сотрудник");
	ДополнитьСотрудникаВТаблицеВыработки(ТаблицаПоПодаркам);
	
	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Товары".
	ДопПоля = Новый Структура("КлючСтроки, НеОплачиваетсяПолисом","КлючСтроки","НеОплачиваетсяПолисом");
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КомплексныйРасчет", Метаданные()) И ЗначениеЗаполнено(ЭтотОбъект["КомплексныйРасчет"]) Тогда
		ДопПоля.Вставить("КоличествоЕИ", "Количество");
	КонецЕсли;
	ПроведениеДокументов.ПодготовитьТаблицуТоварыДокумента(ЭтотОбъект, ТаблицаПоТоварам, "Товары", ДопПоля);
	ДополнитьСотрудникаВТаблицеВыработки(ТаблицаПоТоварам);
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Материалы".
	ПроведениеДокументов.ПодготовитьТаблицуТоварыДокумента(ЭтотОбъект, ТаблицаПоМатериалам, "Материалы", Новый Структура("КлючСтрокиРаботы, КлючСтроки, НеОплачиваетсяПолисом","КлючСтрокиРаботы","КлючСтроки", "НеОплачиваетсяПолисом"));
	Для Каждого СтрокаМатериалы Из ТаблицаПоМатериалам Цикл
		Если Не ЗначениеЗаполнено(СтрокаМатериалы.Склад) Тогда
			СтрокаМатериалы.Склад = СкладМатериалов;
		КонецЕсли;
	КонецЦикла;
	ТаблицаПоМатериалам.Колонки.Добавить("Сотрудник");
	Для Каждого СтрокаМатериал Из ТаблицаПоМатериалам Цикл
		СтрокаРаботы = ТаблицаПоРаботам.Найти(СтрокаМатериал.КлючСтрокиРаботы, "КлючСтроки");
		Если СтрокаРаботы<>Неопределено Тогда
			СтрокаМатериал.Сотрудник = СтрокаРаботы.Сотрудник;
		Иначе
			СтрокаМатериал.Сотрудник = Сотрудник;
		КонецЕсли;
	КонецЦикла;
	ТаблицаПоМатериалам.Колонки.Добавить("ОплачиваетсяКлиентом");
	Для Каждого СтрокаМатериал Из ТаблицаПоМатериалам Цикл
		Если СтрокаМатериал.Цена <> 0 Тогда
			СтрокаМатериал.ОплачиваетсяКлиентом = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Оплата".
	СтруктураПолей = Новый Структура();                                   
	СтруктураПолей.Вставить("Сертификат"          , "Сертификат");
	СтруктураПолей.Вставить("ВидОплаты"           , "ВидОплаты");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("ЭквайринговыйТерминал", "ЭквайринговыйТерминал");
	
	РезультатЗапросаПоОплате = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей);
	
	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();
	Для Каждого стрОплата Из ТаблицаПоОплате Цикл 
		
		Если стрОплата.ВидОплаты = Перечисления.ВидыОплаты.Сертификатом И Не ЗначениеЗаполнено(стрОплата.Сертификат) Тогда 
			стрОплата.Сертификат = СтруктураШапкиДокумента.Сертификат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Сертификаты".
	СтруктураПолей = Новый Структура();                                   
	СтруктураПолей.Вставить("Сертификат"          , "Сертификат");
	СтруктураПолей.Вставить("Номинал"             , "Сертификат.ВидСертификата.Номинал");
	СтруктураПолей.Вставить("Сумма"				  , "Сумма");
	СтруктураПолей.Вставить("ВидСертификата"      , "Сертификат.ВидСертификата");
	СтруктураПолей.Вставить("ТипСертификата"      , "Сертификат.ВидСертификата.ТипСертификата");
	СтруктураПолей.Вставить("Сотрудник"           , "Сотрудник");
	СтруктураПолей.Вставить("СуммаБезСкидок"      , "Сумма");       
	СтруктураПолей.Вставить("ДатаНачалаДействия"  , "ДатаНачалаДействия");
	СтруктураПолей.Вставить("НеОплачиваетсяПолисом", "НеОплачиваетсяПолисом");
	СтруктураПолей.Вставить("СуммаНеПоПолису", "СуммаНеПоПолису");
	
	РезультатЗапросаПоСертификату = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Сертификаты", СтруктураПолей);
	
	ТаблицаПоСертификатам = РезультатЗапросаПоСертификату.Выгрузить();
	ТаблицаПоСертификатам.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаПоСертификатам.ЗаполнитьЗначения(1,"Количество");
	
	ДополнитьСотрудникаВТаблицеВыработки(ТаблицаПоСертификатам);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ПополнениеСертификатов".
	СтруктураПолей = Новый Структура();                                   
	СтруктураПолей.Вставить("Сертификат"          , "Сертификат");
	СтруктураПолей.Вставить("Номинал"             , "Сертификат.ВидСертификата.Номинал");
	СтруктураПолей.Вставить("Сумма"				  , "Сумма");
	СтруктураПолей.Вставить("ВидСертификата"      , "Сертификат.ВидСертификата");
	СтруктураПолей.Вставить("ТипСертификата"      , "Сертификат.ВидСертификата.ТипСертификата");
	СтруктураПолей.Вставить("Сотрудник"           , "Сотрудник");
	СтруктураПолей.Вставить("СуммаБезСкидок"      , "Сумма");       
	СтруктураПолей.Вставить("ДатаНачалаДействия"  , "ДатаНачалаДействия");
	СтруктураПолей.Вставить("НеОплачиваетсяПолисом", "НеОплачиваетсяПолисом");
	СтруктураПолей.Вставить("СуммаНеПоПолису"      ,    "СуммаНеПоПолису");
	СтруктураПолей.Вставить("Номенклатура"		  , "Номенклатура");
	СтруктураПолей.Вставить("Количество"		  , "Количество");

	РезультатЗапросаПоСертификату = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПополнениеСертификатов", СтруктураПолей);
	
	ТаблицаПополнениеСертификатов = РезультатЗапросаПоСертификату.Выгрузить();
	ДополнитьСотрудникаВТаблицеВыработки(ТаблицаПополнениеСертификатов);
	
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Процедура ДополнитьСотрудникаВТаблицеВыработки(ТаблицаВыработки)
	Для Каждого СтрокаТаблицы из ТаблицаВыработки Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
			СтрокаТаблицы.Сотрудник = Сотрудник;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЕстьСтрокиСПустымСкладом(ИмяТЧ)
	
	ЕстьРеквизитБезСкладскогоУчета = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("БезСкладскогоУчета", Метаданные(), ИмяТЧ);
	Для Каждого СтрокаТЧ Из ЭтотОбъект[ИмяТЧ] Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Склад)
			И Не (ЕстьРеквизитБезСкладскогоУчета И СтрокаТЧ["БезСкладскогоУчета"])
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ПроверитьСовпадениеФилиалаИФилиалаКассы(Отказ)
	
	Если Не ОбменДанными.Загрузка Тогда
		
		Если ПолученоНаличными = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СообщениеПользователю = ОграничениеДоступаНаУровнеЗаписей.ТребуетсяПредупреждениеНесоответствияКассыФилиала(Касса, Филиал);
		Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытий

// Обработчик заполнения документа
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Если Основание.Свойство("РежимЗаполненияПолноеКопирование") Тогда
			СтрокаЗаполнения = Неопределено;
		Иначе
			СтрокаЗаполнения = "";
			Реквизиты = ЭтотОбъект.Метаданные().Реквизиты;
			Для Каждого Реквизит Из Реквизиты Цикл 
				Если Реквизит.ЗаполнятьИзДанныхЗаполнения
					И Основание.Свойство(Реквизит.Имя)
				Тогда
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаЗаполнения, Реквизит.Имя, ",");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, СтрокаЗаполнения);
		
		// Массив заявок, на основании которых вводится документ
		Если Основание.Свойство("ЗаявкиОснования") Тогда
			ДополнительныеСвойства.Вставить("Заявки", Основание.ЗаявкиОснования);
			Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
				ДокументОснование = ?(Основание.ЗаявкиОснования.Количество() > 0, Основание.ЗаявкиОснования[0], Документы.Заявка.ПустаяСсылка());
			КонецЕсли;
			
			Для Каждого Заявка Из Основание.ЗаявкиОснования Цикл
				Если Заявка <> ЭтотОбъект.ДокументОснование
					И ЭтотОбъект.Заявки.Найти(Заявка, "Заявка") = Неопределено
				Тогда
					ЭтотОбъект.Заявки.Добавить().Заявка = Заявка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Если Основание.Свойство("ДокументОснование")
			И ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.Заявка")
			И Не Основание.Свойство("НеВыполнятьСтандартноеЗаполнениеПоДокументуОснованию")
		Тогда
			// Стандартное заполнение на основании заявки
			РаботаСДокументамиСервер.ОбработкаЗаполнения(ЭтотОбъект, ДокументОснование);
		Иначе
			// Заполнение табличных частей из стурктуры значений заполнения.
			Для Каждого МетаданныеТЧ Из Ссылка.Метаданные().ТабличныеЧасти Цикл
				Если Основание.Свойство(МетаданныеТЧ.Имя) Тогда
					
					Если МетаданныеТЧ.Имя = "Материалы"
						И Не УправлениеНастройками.ПараметрУчета("ВестиУчетРасходаМатериаловНаУслуги")
					Тогда
						Продолжить; // Не заполнять таб.часть Материалы, если учёт расхода в документе не ведётся.
					КонецЕсли;
					
					Для Каждого СтрокаТЧ Из Основание[МетаданныеТЧ.Имя] Цикл
						НоваяСтрока = ЭтотОбъект[МетаданныеТЧ.Имя].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
						
						// Проверка заполнения колонки Коэффициент в табличных частях Товары и Материалы.
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Коэффициент")
							И Не ЗначениеЗаполнено(НоваяСтрока.Коэффициент)
							И ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(НоваяСтрока, "ЕдиницаИзмерения", Неопределено))
						Тогда
							НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
						КонецЕсли; 
						
						// Заполнение колонки сотрудника
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Сотрудник")
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "Сотрудник")
						Тогда
							НоваяСтрока.Сотрудник = СтрокаТЧ.Сотрудник;
						КонецЕсли;
						
						// Заполнение цены
						Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "Цена") // Перезаполняем цену по прайсу только если в значениях заполнения не передавали её.
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Цена")
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Номенклатура")
						Тогда
							Если Не ЗначениеЗаполнено(Прейскурант) И НоваяСтрока.НомерСтроки = 1 Тогда
								Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(ЭтотОбъект[ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов()]);
							КонецЕсли;
							НоваяСтрока.Цена = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(ЭтотОбъект, МетаданныеТЧ.Имя, НоваяСтрока,?(ЗначениеЗаполнено(Прейскурант),Прейскурант,Неопределено),МетаданныеТЧ.Реквизиты).Цена;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если Основание.Свойство("Коррекция") И Основание.Коррекция Тогда
				РаботаСДокументамиСервер.ЗаполнитьДанныеДокументаКоррекцииПоОснованию(ЭтотОбъект, Основание);
			ИначеЕсли Основание.Свойство("ВидОперации") И Основание.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту Тогда
				// Копирование форм участия из исходного документа
				Если Основание.Свойство("ДокументОснование") Тогда
					РолиИсполнителей.Загрузить(Основание.ДокументОснование.РолиИсполнителей.Выгрузить());
				КонецЕсли;
			КонецЕсли;
			
			Если Не Основание.Свойство("РежимЗаполненияПолноеКопирование") Тогда
				Документы.ОказаниеУслуг.ЗаполнитьМатериалыПоНормамРаботОбъекта(ЭтотОбъект);
				РучнаяКорректировкаМатериалов = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ИмяРеквизитаФилиал = ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов();
		Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаФилиал]) Тогда
			Основание.Свойство("Филиал", ЭтотОбъект[ИмяРеквизитаФилиал]);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Заявка")
		Или ТипЗнч(Основание) = Тип("ДокументСсылка.Прием")
		Или ДопСерверныеФункции.ИмяСсылочногоТипа(Основание) = "Документ.ПрохождениеМедосмотра"
	Тогда
		РаботаСДокументамиСервер.ОбработкаЗаполнения(ЭтотОбъект, Основание);
	КонецЕсли;
	
	ВычислитьСотрудникаШапкиПослеОбработкиЗаполнения(Основание);
	
	Чеки.Очистить();
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		РаботаСДокументамиСервер.ЗаполнитьУчастникаИИННДенежнойОперации(Клиент, ПринятоОт, ПринятоОтИНН, ПринятоОтАдрес);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Контрагент = Документ.ВидПолиса.Контрагент;
	КонецЕсли;
	
	// Вычисление состояния документа по пробитию чеков ККМ.
	СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиНеПробиты; // Состояние по-умолчанию.
	
	Если Чеки.Количество() = 0 Тогда
		Если НомерЧекаККМ <> 0 Тогда
			СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиПробиты;
		ИначеЕсли ЗначениеЗаполнено(НомерЧекаЭТ) Тогда
			СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиЧастичноПробиты;
		КонецЕсли;
	Иначе
		КоличествоПробитыхЧеков = 0;
		Для Каждого стр Из Чеки Цикл
			Если стр.НомерЧека <> 0 Тогда
				КоличествоПробитыхЧеков = КоличествоПробитыхЧеков + 1;	
			КонецЕсли;
		КонецЦикла;
		
		ФискальныеЧеки = Чеки.НайтиСтроки(Новый Структура("Фискально", Истина)); 
		
		Если КоличествоПробитыхЧеков = 0 Тогда
			СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиНеПробиты;
			Если Коррекция Тогда
				КоличествоФискЧековКор = РаботаСТорговымОборудованием.КоличествоФискализированныхЧековКоррекции(Ссылка);
				Если КоличествоФискЧековКор <> 0 Тогда
					СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиЧастичноПробиты;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли КоличествоПробитыхЧеков = ФискальныеЧеки.Количество() Тогда
			СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиПробиты;
		Иначе
			СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиЧастичноПробиты;
		КонецЕсли;
	КонецЕсли;

	РаботаСДокументамиСервер.ПроверитьДанныеКоррекции(ЭтотОбъект, Отказ, РежимЗаписи);
	
	ЗапомнитьБонусныеНакопленияПрошлойВерсии(РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту Тогда	
		МедицинскоеСтрахование.СформироватьЗаписиПоПараметрамПродажПоСтраховымпрограммам(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик проведения документа
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПодаркам, ТаблицаПоРаботам, ТаблицаПоМатериалам, ТаблицаПоОплате, ТаблицаПоСертификатам, ТаблицаПополнениеСертификатов;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа'") + " """ + СокрЛП(Ссылка) + """: ";
	
	РаботаСДокументамиСервер.ОбработкаПроведенияДокументов(ЭтотОбъект,Отказ,РежимПроведения);
	
	Если ЗначениеЗаполнено(Документ) 
		И Не ДополнительныеСвойства.Свойство("ОбменДаннымиЗагрузка") 
	Тогда
		Если Документ.ВидПолиса.СоставСтрахуемыхФиксируетсяДокументально Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СоставыСтрахуемыхСрезПоследних.Исключен
			|ИЗ
			|	РегистрСведений.СоставыСтрахуемых.СрезПоследних(&Дата, Полис = &Полис) КАК СоставыСтрахуемыхСрезПоследних";
			
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Полис", Документ);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				Если Выборка.Исключен Тогда
					Отказ = Истина;
				КонецЕсли;
			Иначе
				Отказ = Истина;
			КонецЕсли;
			Если Отказ Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 не содержится в списках страхуемых по виду полиса %2'"),
						Клиент,
						Документ));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	мИспользоватьСертификаты = мУчетнаяПолитика.ИспользоватьСертификаты;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Укажем, что надо проверить
	СтруктураОбязательныхПолей = Новый Структура("Клиент");
	
	Если (ПолученоНаличными - Сдача) > 0 Тогда
		СтруктураОбязательныхПолей = Новый Структура("Касса");
	КонецЕсли;
	
	Если ЕстьСтрокиСПустымСкладом("Товары") Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если ЕстьСтрокиСПустымСкладом("Материалы") Тогда
		СтруктураОбязательныхПолей.Вставить("СкладМатериалов");
	КонецЕсли;
	
	ПроверитьСовпадениеФилиалаИФилиалаКассы(Отказ);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПодаркам, ТаблицаПоМатериалам, ТаблицаПоРаботам, ТаблицаПоОплате, ТаблицаПоСертификатам, ТаблицаПополнениеСертификатов);
	
	СтруктураОбязательныхПолей.Вставить("Сотрудник");
	
	// Вызываем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиРаботы(ТаблицаПоРаботам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок, "Материалы");
	
	ПроверитьЗаполнениеТабличнойЧастиСертификаты(ТаблицаПоСертификатам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧПополнениеСертификатов(ТаблицаПополнениеСертификатов, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПоОплате.Свернуть("ВидОплаты, Сертификат, ЭквайринговыйТерминал","Сумма");
	
	ПроверитьДопустимыйДолгКлиента(Отказ, ТаблицаПоОплате); // Проверить превышение допустимой суммы долга клиента в результате проведения.
	
	ЭтоПродажа = ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;

	// УМЦ Проверка отраслевых условий
	Если Не ДополнительныеСвойства.Свойство("ОбменДаннымиЗагрузка") Тогда
		ОтраслевыеДополнения.ПроверитьЗаполнениеДокумента(ЭтотОбъект, Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПодаркам, ТаблицаПоРаботам, ТаблицаПоМатериалам, ТаблицаПоОплате, ТаблицаПоСертификатам, Отказ, Заголовок,ЭтоПродажа,ТаблицаПополнениеСертификатов);
	КонецЕсли;
	
	// Установка состояния заявки
	Если ЭтоПродажа Тогда
		КалендарьПланирования.ОказаниеУслугПриемПриПроведенииРаспроведенииСменаСостоянияЗаявки(Ссылка, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ЭтоПродажа = ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;
	Если Не Отказ Тогда
		Для Каждого стрСертификат Из Сертификаты Цикл
			Если ЭтоПродажа Тогда
				ЗаполнитьРеквизитыСертификата(стрСертификат.Сертификат);
			Иначе
				ВладелецСертификатаВосстановленный = СертификатыКлиентов.ПолучитьПоследнегоВладельцаСертификата(стрСертификат.Сертификат);
				ЗаполнитьРеквизитыСертификата(стрСертификат.Сертификат, ВладелецСертификатаВосстановленный);
			КонецЕсли;
		КонецЦикла;
		// Установка состояния заявки
		Если ЭтоПродажа Тогда
			КалендарьПланирования.ОказаниеУслугПриемПриПроведенииРаспроведенииСменаСостоянияЗаявки(Ссылка, Ложь);
		КонецЕсли;
		
		// Восстановление клиента в случае возврата
		Если НЕ ЭтоПродажа И ЗначениеЗаполнено(Сертификаты) Тогда
			Для Каждого стрСертификат Из Сертификаты Цикл
				ОбъектСертификат = стрСертификат.Сертификат.ПолучитьОбъект();
				ОбъектСертификат.ВладелецКарты = СертификатыКлиентов.ПолучитьПоследнегоВладельцаСертификата(стрСертификат.Сертификат);
				ОбъектСертификат.Записать();
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьПоявлениеОтрицательныхОстатковБонусов(Отказ, ЭтоПродажа, Ложь);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	Заявки.Очистить();
	Чеки.Очистить();
	
	ТабЧасти = Новый Массив;
	ТабЧасти.Добавить(ЭтотОбъект.Работы);
	ТабЧасти.Добавить(ЭтотОбъект.Товары);
	ТабЧасти.Добавить(ЭтотОбъект.Материалы);
	ТабЧасти.Добавить(ЭтотОбъект.Сертификаты);
	ТабЧасти.Добавить(ЭтотОбъект.ПополнениеСертификатов);
	
	Для Каждого ТабЧасть Из ТабЧасти Цикл
		Для Каждого стрТЧ Из ТабЧасть Цикл
			стрТЧ.КлючСтрокиЧеки = 0;
		КонецЦикла;
	КонецЦикла;
	
	СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиНеПробиты;
	СпособРасчетаЧекаККМ = Неопределено;
	СуммаЗачетаАвансаПродажиВДолг = 0;
	СсылочныйНомер = "";
	НомерКарты = "";
	
КонецПроцедуры

// Обработчик удаления документа
Процедура ПередУдалением(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторКорзиныНСПК) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.СодержимоеКорзиныНСПК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторКорзиныНСПК.Установить(ИдентификаторКорзиныНСПК);
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Определение сотрудника в шапке документа по конфигурации данных основания
Процедура ВычислитьСотрудникаШапкиПослеОбработкиЗаполнения(Основание)
	
	ИмяРеквизитаСотрудник = "Сотрудник";
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаСотрудник]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("Структура")
		И Основание.Свойство("Сотрудник")
	Тогда
		ЭтотОбъект[ИмяРеквизитаСотрудник] = Основание.Сотрудник;
	Иначе
		// Если во всех строках продажи документа сотрудник указан и только один, то подставим его в шапку
		ТаблицаПродаж = Документы.ОказаниеУслуг.ПолучитьТаблицуПродажДокумента(ЭтотОбъект, Ложь);
		СотрудникСтрокПродажи = Неопределено;
		Для Каждого СтрокаПродажи Из ТаблицаПродаж Цикл
			Если ЗначениеЗаполнено(СтрокаПродажи.Сотрудник) Тогда
				Если СотрудникСтрокПродажи = Неопределено Тогда
					СотрудникСтрокПродажи = СтрокаПродажи.Сотрудник;
				ИначеЕсли СотрудникСтрокПродажи <> СтрокаПродажи.Сотрудник Тогда
					СотрудникСтрокПродажи = Неопределено;
					Прервать;
				КонецЕсли;
			Иначе
				СотрудникСтрокПродажи = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СотрудникСтрокПродажи <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизитаСотрудник] = СотрудникСтрокПродажи;
			
			// Очистка сотрудника в табличных частях
			ИменаТЧ = ОбщегоНазначенияКлиентСервер.НовыйМассив("Работы", "Товары");
			Для Каждого ИмяТЧ Из ИменаТЧ Цикл
				Для Каждого СтрокаТЧ Из ЭтотОбъект[ИмяТЧ] Цикл
					СтрокаТЧ[ИмяРеквизитаСотрудник] = Неопределено;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнвертироватьСуммы(ТаблицаДвижений)
	Для каждого строкаТаблицы из ТаблицаДвижений Цикл
		Если ТаблицаДвижений.Колонки.Найти("Количество") <> Неопределено Тогда строкаТаблицы.Количество = 0 - строкаТаблицы.Количество КонецЕсли;
		Если ТаблицаДвижений.Колонки.Найти("Сумма") <> Неопределено Тогда строкаТаблицы.Сумма = 0 - строкаТаблицы.Сумма КонецЕсли;
		Если ТаблицаДвижений.Колонки.Найти("СуммаБезСкидок") <> Неопределено Тогда строкаТаблицы.СуммаБезСкидок = 0 - строкаТаблицы.СуммаБезСкидок КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьДопустимыйЗнак(ТаблицаПоОплате)
	КЧ = Новый КвалификаторыЧисла(15,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	НоваяКолонка = ТаблицаПоОплате.Колонки.Добавить("Сумма1",ОписаниеТиповЧ);
	ТаблицаПоОплате.ЗагрузитьКолонку(ТаблицаПоОплате.ВыгрузитьКолонку("Сумма"),"Сумма1");
	ТаблицаПоОплате.Колонки.Удалить("Сумма");
	НоваяКолонка.Имя = "Сумма";
КонецПроцедуры

Процедура ПроверитьДопустимыйДолгКлиента(Отказ, ТаблицаПоОплате)
	
	Если Не ЭтотОбъект.ОбменДанными.Загрузка
		И мУчетнаяПолитика.МаксимальнаяСуммаДолгаКлиента <> Неопределено
	Тогда
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("КомплексныйРасчет", Метаданные()) 
			Или (ОбщегоНазначения.ЕстьРеквизитОбъекта("КомплексныйРасчет", Метаданные())
			И Не ЗначениеЗаполнено(ЭтотОбъект["КомплексныйРасчет"]))
		Тогда
			УвеличениеДолгаДокументом 	= (ЭтотОбъект.СуммаДокумента - ТаблицаПоОплате.Итог("Сумма") - ?(СдачуВДепозит,Сдача,0))
										* ?(ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту, 1, -1);
			
			Если УвеличениеДолгаДокументом > 0 Тогда
				
				СуммаДолгаПередДокументом = РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(Клиент,МоментВремени());
				
				МаксимальнаяСуммаДолгаКлиента	= ?(Клиент.МаксимальнаяСуммаДолгаКлиента <> Неопределено, 
													Клиент.МаксимальнаяСуммаДолгаКлиента,
													мУчетнаяПолитика.МаксимальнаяСуммаДолгаКлиента);
				
				Валюта = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
				Если (СуммаДолгаПередДокументом + УвеличениеДолгаДокументом) > МаксимальнаяСуммаДолгаКлиента Тогда
					Отказ = Истина;
					
					Если СуммаДолгаПередДокументом >= 0 Тогда
						ТекстДолг = НСтр("ru='Долг клиента:'") + " " + ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаДолгаПередДокументом, Валюта);
					Иначе
						ТекстДолг = НСтр("ru='На счету клиента:'") + " " + ОбщегоНазначенияКлиентСервер.ФорматСумм(-СуммаДолгаПередДокументом, Валюта);
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Превышена максимальная сумма долга клиента:
									|%1
									|Увеличение долга документом: %2
									|Итоговая величина долга: %3
									|Допустимый долг: %4'"),
							ТекстДолг,
							ОбщегоНазначенияКлиентСервер.ФорматСумм(УвеличениеДолгаДокументом, Валюта),
							ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаДолгаПередДокументом + УвеличениеДолгаДокументом, Валюта),
							ОбщегоНазначенияКлиентСервер.ФорматСумм(МаксимальнаяСуммаДолгаКлиента, Валюта,"0")));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
// Заполняет текущий объект на основании ОУ
//
Процедура ЗаполнитьНаОснованииОУ() Экспорт
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование, "КартаКлиента, 
															|Документ, 
															|Касса, 
															|Клиент, 
															|Сотрудник, 
															|Прейскурант, 
															|Сертификат, 
															|Скидка, 
															|Склад, 
															|СкладМатериалов, 
															|ПолученоНаличными, 
															|СтатьяДвиженияДенежныхСредств");
	
	Если ДокументОснование.Метаданные().Реквизиты.Найти("Филиал") <> Неопределено Тогда
		Филиал = ДокументОснование.Филиал;
	КонецЕсли;
	РучнаяКорректировкаМатериалов = Истина;
	ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту;
	массивТЧ = Новый Массив;
	массивТЧ.Добавить("Работы");
	массивТЧ.Добавить("Материалы");
	массивТЧ.Добавить("Товары");
	массивТЧ.Добавить("Сертификаты");
	массивТЧ.Добавить("Скидки");
	массивТЧ.Добавить("Оплата");
	Для Каждого элементМассива Из массивТЧ Цикл
		ЭтотОбъект[элементМассива].Загрузить(ДокументОснование[элементМассива].Выгрузить());	
	КонецЦикла;
	Сч = Материалы.Количество();
	Пока Сч <> 0 Цикл
		Если Материалы[сч-1].Сумма = 0 Тогда
			Материалы.Удалить(сч-1);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоПартиямОприходованиеВозврата(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоискаСтоимости = ТаблицаПоТоварам.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Количество");
	ТаблицаПоискаСтоимости.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", "Количество");
	
	ТаблицаОприходования = ТаблицаПоискаСтоимости.СкопироватьКолонки();
	ТаблицаОприходования.Колонки.Добавить("ДокументОприходования");
	ТаблицаОприходования.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры");
	
	// Поиск продаж этих товаров данному клиенту
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Таб", ТаблицаПоискаСтоимости);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры,
	|	Таб.СерияНоменклатуры
	|ПОМЕСТИТЬ ТабВозврата
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровНаСкладахОбороты.Номенклатура,
	|	ПартииТоваровНаСкладахОбороты.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладахОбороты.СерияНоменклатуры,
	|	ПартииТоваровНаСкладахОбороты.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладахОбороты.КоличествоРасход КАК Количество,
	|	ПартииТоваровНаСкладахОбороты.СуммаРасход КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
	|			,
	|			&МоментВремени,
	|			Регистратор,
	|			(Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ТабВозврата.Номенклатура,
	|					ТабВозврата.ХарактеристикаНоменклатуры,
	|					ТабВозврата.СерияНоменклатуры
	|				ИЗ
	|					ТабВозврата)) КАК ПартииТоваровНаСкладахОбороты
	|ГДЕ
	|	ПартииТоваровНаСкладахОбороты.Регистратор ССЫЛКА Документ.ОказаниеУслуг
	|	И ПартииТоваровНаСкладахОбороты.Регистратор.Клиент = &Клиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровНаСкладахОбороты.Период УБЫВ,
	|	ДокументОприходования УБЫВ"	
	;
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Выб);
		мсСтр = ТаблицаПоискаСтоимости.НайтиСтроки(Отбор);
		Если мсСтр.Количество() <> 0 Тогда
			СтрокаВозврата = мсСтр[0];
			КоличествоНайдено = Мин(Выб.Количество, СтрокаВозврата.Количество);
			Если КоличествоНайдено > 0 Тогда
				
				СтрокаОприходования = ТаблицаОприходования.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОприходования, Выб);
				СтрокаОприходования.Количество = КоличествоНайдено;
				Если Выб.Количество = КоличествоНайдено Тогда
					СтрокаОприходования.Сумма = Выб.Сумма;
				Иначе
					СтрокаОприходования.Сумма = Выб.Сумма * КоличествоНайдено / Выб.Количество;
				КонецЕсли;
				
				СтрокаВозврата.Количество = СтрокаВозврата.Количество - КоличествоНайдено;
				Если СтрокаВозврата.Количество = 0 Тогда
					ТаблицаПоискаСтоимости.Удалить(СтрокаВозврата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаПоискаСтоимости.Количество() > 0 Тогда
		// Анализ текущих остатков, оприходование по текущей средней стоимости.
		Запрос.УстановитьПараметр("Таб", ТаблицаПоискаСтоимости);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура,
		|	Таб.ХарактеристикаНоменклатуры,
		|	Таб.СерияНоменклатуры
		|ПОМЕСТИТЬ ТабВозврата
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОстатки.Номенклатура,
		|	ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры,
		|	ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК Количество,
		|	ПартииТоваровНаСкладахОстатки.СуммаОстаток КАК Сумма,
		|	NULL КАК Период,
		|	1 КАК ПериодТаб
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		|			&МоментВремени,
		|			(Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры) В
		|				(ВЫБРАТЬ
		|					ТабВозврата.Номенклатура,
		|					ТабВозврата.ХарактеристикаНоменклатуры,
		|					ТабВозврата.СерияНоменклатуры
		|				ИЗ
		|					ТабВозврата)) КАК ПартииТоваровНаСкладахОстатки
		|ГДЕ
		|	ПартииТоваровНаСкладахОстатки.КоличествоОстаток <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахОбороты.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахОбороты.СерияНоменклатуры,
		|	ПартииТоваровНаСкладахОбороты.КоличествоПриход,
		|	ПартииТоваровНаСкладахОбороты.СуммаПриход,
		|	ПартииТоваровНаСкладахОбороты.Период,
		|	2
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
		|			,
		|			&МоментВремени,
		|			Регистратор,
		|			(Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры) В
		|				(ВЫБРАТЬ
		|					ТабВозврата.Номенклатура,
		|					ТабВозврата.ХарактеристикаНоменклатуры,
		|					ТабВозврата.СерияНоменклатуры
		|				ИЗ
		|					ТабВозврата)) КАК ПартииТоваровНаСкладахОбороты
		|ГДЕ
		|	ПартииТоваровНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И ПартииТоваровНаСкладахОбороты.КоличествоПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодТаб,
		|	Период УБЫВ"	
		;
		Выб = Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Выб);
			мсСтр = ТаблицаПоискаСтоимости.НайтиСтроки(Отбор);
			Если мсСтр.Количество() <> 0 Тогда
				
				СтрокаВозврата = мсСтр[0];
				Если СтрокаВозврата.Количество > 0 Тогда
					СтрокаОприходования = ТаблицаОприходования.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОприходования, Выб);
					СтрокаОприходования.Количество = СтрокаВозврата.Количество;
					СтрокаОприходования.Сумма = СтрокаВозврата.Количество * Выб.Сумма / Выб.Количество;
					СтрокаОприходования.ДокументОприходования = Ссылка;
				КонецЕсли;
				
				ТаблицаПоискаСтоимости.Удалить(СтрокаВозврата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Остатки оприходую по нулевой стоимости
	Для Каждого СтрокаВозврата Из ТаблицаПоискаСтоимости Цикл 
		СтрокаОприходования = ТаблицаОприходования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОприходования, СтрокаВозврата);
		СтрокаОприходования.ДокументОприходования = Ссылка;
	КонецЦикла;
	
	// Простановка в таблицу оприходования поля Склад - из табличной части возврата товаров.
	ТаблицаТоваровПоСкладам = ТаблицаПоТоварам.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад, Количество");
	ТаблицаТоваровПоСкладам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад", "Количество");
	
	ТаблицаОприходованияИтоговая = ТаблицаОприходования.СкопироватьКолонки();
	ТаблицаОприходованияИтоговая.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры");
	Для Каждого СтрокаОприходования Из ТаблицаОприходования Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаОприходования);
		СтрокиСоСкладами = ТаблицаТоваровПоСкладам.НайтиСтроки(Отбор);
		Для Каждого СтрокаСоСкладом Из СтрокиСоСкладами Цикл
			
			Количество = Мин(СтрокаСоСкладом.Количество, СтрокаОприходования.Количество);
			
			Если Количество > 0 Тогда
				СтрокаИтоговая = ТаблицаОприходованияИтоговая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтоговая, СтрокаОприходования);
				СтрокаИтоговая.Количество = Количество;
				СтрокаИтоговая.Склад = СтрокаСоСкладом.Склад;
			КонецЕсли;
			
			СтрокаОприходования.Количество = СтрокаОприходования.Количество - Количество;
			
		КонецЦикла;
	КонецЦикла;
	
	ПартионныйУчет.пуОприходованиеПартийТоваров(СтруктураШапкиДокумента, ТаблицаОприходованияИтоговая, ЭтотОбъект.Движения.ПартииТоваровНаСкладах);
	
КонецПроцедуры

// Выполняется перед записью объекта
Процедура ЗапомнитьБонусныеНакопленияПрошлойВерсии(РежимЗаписи)
	
	Если Не ЭтоНовый()
		И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("БонусыЗапретОтрицательныхОстатков") = Истина
		И (РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
		И РаботаСоСкидками.ЕстьДействующиеБонусныеСкидки()
		И Ссылка.Проведен
	Тогда
		Движения.НакопленияПоСкидкам.Прочитать();
		ТаблицаНакопления = Движения.НакопленияПоСкидкам.Выгрузить(, "Получатель, ВидСкидки, ВидДвижения, Накопление");
		Для Каждого СтрокаНакопления Из ТаблицаНакопления Цикл
			Если СтрокаНакопления.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				СтрокаНакопления.Накопление = -СтрокаНакопления.Накопление;
			КонецЕсли;
		КонецЦикла;
		ТаблицаНакопления.Свернуть("Получатель, ВидСкидки", "Накопление");
		
		// Интересуют только те бонусные скидки, по которым в прошлой версии было начисление.
		мОбрИнд = ТаблицаНакопления.Количество()-1;
		Для Сч = 0 По мОбрИнд Цикл
			
			СтрокаТЗ = ТаблицаНакопления[мОбрИнд-Сч];
			Если СтрокаТЗ.ВидСкидки.ТипСкидки <> Перечисления.ТипыСкидок.Бонусы Тогда
				ТаблицаНакопления.Удалить(мОбрИнд-Сч);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаНакопления.Количество() <> 0 Тогда
			ДополнительныеСвойства.Вставить("БонусныеНакопленияПрошлойВерсии", ТаблицаНакопления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область СертификатыКлиентов // Сертификаты, Абонементы, движения по регистру ОстаткиПоСертификатам.

Процедура ДвижениеПоРегиструОстаткиПоСертификатам(СтруктураШапкиДокумента, ЭтоПродажа, ТаблицаПоСертификатам, ТаблицаПополнениеСертификатов, ТаблицаПоОплате, ТаблицаПоРаботам, Отказ, Заголовок)
	
	Если мИспользоватьСертификаты Тогда
		
		// Продажа сертификатов.
		Если ЭтоПродажа Тогда
			РегистрыНакопления.ОстаткиПоСертификатам.ВыполнитьДвиженияПоРегиструОстаткиПоСертификатамПриход(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоСертификатам, ТаблицаПополнениеСертификатов, ЭтоПродажа);
		КонецЕсли;
		
		СправочникЗаписан = Ложь;
		
		// Расход, включая проверки и движения.
		Если ЕстьРасходСертификатов(ТаблицаПоОплате, ТаблицаПоРаботам) Тогда
			Если ЭтоПродажа И Движения.ОстаткиПоСертификатам.Количество() <> 0 Тогда
				// В документе и приход, и расход. Нужно записать движения прихода в регистр для проверки остатков/сроков.
				Движения.ОстаткиПоСертификатам.Записать();
				ЭтоРасходСПродажей = Истина
			Иначе
				ЭтоРасходСПродажей = Ложь;
			КонецЕсли;
			
			ЗаполнитьРеквизитыСертификатовПриПроведении(ЭтоПродажа);
			СправочникЗаписан = Истина;
			
			ПроверитьСертификатыКлиентаПриПроведении(ТаблицаПоОплате, ТаблицаПоРаботам, СтруктураШапкиДокумента, Отказ, ЭтоПродажа, Заголовок, ЭтоРасходСПродажей);
			Если Отказ Тогда 
				// Не делать расход, если не хватает остатков, просрочены и т.д.
				Возврат;
			КонецЕсли;
			
			// Расход по сертификатам.
			РегистрыНакопления.ОстаткиПоСертификатам.ВыполнитьДвиженияПоРегиструОстаткиПоСертификатамРасход(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоОплате, ТаблицаПоРаботам, Отказ, ЭтоПродажа, ЭтоРасходСПродажей);
		КонецЕсли;
		
		// Возврат проданных сертификатов
		Если Не ЭтоПродажа Тогда
			ЭтоВозвратСВозвратомРасхода = Движения.ОстаткиПоСертификатам.Количество() <> 0;
			Если ЭтоВозвратСВозвратомРасхода Тогда
				Движения.ОстаткиПоСертификатам.Записать();
			КонецЕсли;
			РегистрыНакопления.ОстаткиПоСертификатам.ВыполнитьДвиженияПоРегиструОстаткиПоСертификатамПриход(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоСертификатам, ТаблицаПополнениеСертификатов, ЭтоПродажа, ЭтоВозвратСВозвратомРасхода);
		КонецЕсли;
		
		Если НЕ (СправочникЗаписан Или Отказ) Тогда
			ЗаполнитьРеквизитыСертификатовПриПроведении(ЭтоПродажа);
		КонецЕсли; 
		
	КонецЕсли;	
	
КонецПроцедуры

// При перепроведении и отмене проведения документа
Процедура ПроверитьПоявлениеОтрицательныхОстатковБонусов(Отказ, ЭтоПродажа, ЭтоПроведение = Истина)
	
	Если ЭтоПродажа
		И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("БонусыЗапретОтрицательныхОстатков") = Истина
	Тогда
		ПроверяемыеБонусы = Новый ТаблицаЗначений;
		ПроверяемыеБонусы.Колонки.Добавить("Получатель");
		ПроверяемыеБонусы.Колонки.Добавить("ВидСкидки");
		Отбор = Новый Структура("Получатель, ВидСкидки");
	
		Если ДополнительныеСвойства.Свойство("БонусныеНакопленияПрошлойВерсии") Тогда
			БонусныеНакопленияПрошлойВерсии = ДополнительныеСвойства.БонусныеНакопленияПрошлойВерсии;
		Иначе
			БонусныеНакопленияПрошлойВерсии = Неопределено;
		КонецЕсли;
		
		Если Не ЭтоПроведение Тогда
			Движения.НакопленияПоСкидкам.Очистить();
			Движения.НакопленияПоСкидкам.Записать();
		КонецЕсли;
		
		// Упрощаем и берем просто все уменьшения оборота по сравнению с прошлым.
		ТаблицаНакопления = Движения.НакопленияПоСкидкам.Выгрузить(?(ЭтоПроведение, Неопределено, Новый Массив), "Получатель, ВидСкидки, ВидДвижения, Накопление");
		Для Каждого СтрокаНакопления Из ТаблицаНакопления Цикл
			Если СтрокаНакопления.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				СтрокаНакопления.Накопление = -СтрокаНакопления.Накопление;
			КонецЕсли;
		КонецЦикла;
		
		Если БонусныеНакопленияПрошлойВерсии <> Неопределено Тогда
			Для Каждого СтрокаПрошлой Из БонусныеНакопленияПрошлойВерсии Цикл
				СтрокаНакопления = ТаблицаНакопления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНакопления, СтрокаПрошлой);
				СтрокаНакопления.Накопление = -СтрокаНакопления.Накопление; // Вычитаем прошлое из актуального.
			КонецЦикла;
		КонецЕсли;
		ТаблицаНакопления.Свернуть("Получатель, ВидСкидки","Накопление");
		
		Для Каждого СтрокаНакопления Из ТаблицаНакопления Цикл
			
			Если СтрокаНакопления.Накопление < 0 Тогда
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаНакопления);
				Если ПроверяемыеБонусы.НайтиСтроки(Отбор).Количество() = 0 Тогда
					СтрокаПроверка = ПроверяемыеБонусы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПроверка, Отбор);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаПроверка Из ПроверяемыеБонусы Цикл
			ВидСообщенияОшибки = ?(ЭтоПроведение, "ПроверкаCписания", "ПроверкаОтменыПроведения");
			РаботаСоСкидками.КонтрольОтрицательныхОстатков(Отказ, СтрокаПроверка.Получатель,  СтрокаПроверка.ВидСкидки, "ПроверкаОтменыПроведения");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатыКлиентаПриПроведении(ТаблицаПоОплате, ТаблицаПоРаботам, СтруктураШапкиДокумента, Отказ, ЭтоПродажа, Заголовок, ЭтоРасходСПродажей)
		
	ПроверитьЗаполнениеТабличнойЧастиОплата_Сертификаты(Оплата, СтруктураШапкиДокумента, Отказ, Заголовок, ЭтоПродажа);
	
	Если ЭтоПродажа 
		И Не ДополнительныеСвойства.Свойство("ОбменДаннымиЗагрузка")
		И Не ДополнительныеСвойства.Свойство("СписаниеСертификатов")
	Тогда
		// Проверка срока действия сертификатов (абонементов)
		Для Каждого СтрокаРаботы Из Работы Цикл
			Если ЗначениеЗаполнено(СтрокаРаботы.Сертификат) Тогда
				Если СертификатыКлиентов.СрокСертификатаИстек(СтрокаРаботы.Сертификат, Дата) Тогда
					
					ТекстОшибки = ТекстОшибкиТабличнойЧасти("Работы", СтрокаРаботы.НомерСтроки, НСтр("ru='указан сертификат, срок действия которого истек'"));
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
					
				ИначеЕсли Не СертификатыКлиентов.ПроверитьНаВхождениеСертификатаВОграничениеПоДнямНедели(СтрокаРаботы.Сертификат, Дата) Тогда
					
					ТекстОшибки = ТекстОшибкиТабличнойЧасти("Работы", СтрокаРаботы.НомерСтроки, НСтр("ru='указан сертификат, который не предназначен для данного дня недели или времени'"));
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		ДатаАнализаОстатков = ?(ЭтоРасходСПродажей, МоментВремени().Дата + 1, МоментВремени());
		ПревышениеПоСертификатам = СертификатыКлиентов.ПроверитьПревышениеОстатковПоСертификатам(ТаблицаПоОплате, ТаблицаПоРаботам, СтруктураШапкиДокумента, ДатаАнализаОстатков);
		Если ТипЗнч(ПревышениеПоСертификатам) = Тип("Строка") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПревышениеПоСертификатам);
			Отказ = Истина;
		Иначе
			Если ПревышениеПоСертификатам.Количество() <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Превышены остатки по сертификатам: '"));
				Для Каждого стр Из ПревышениеПоСертификатам Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По сертификату №%1 %2 остаток %3 равен %4. Не хватает %5'"),
						стр.Сертификат.Код,
						?(стр.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка(), НСтр("ru='по позиции номенклатуры:'") + стр.Номенклатура,""),
						?(стр.НаОплату,"суммы","количества услуг"),
						Строка(стр.СуммаСертификата),
						Строка(стр.Сумма-стр.СуммаСертификата)));
				КонецЦикла;
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура проверяет корректность заполнения табличной части "Оплата" документов
//
// Параметры:
//  ТаблицаПоОплате			 - ТаблицаЗначений	 - таблица оплаты документа
//  СтруктураШапкиДокумента	 - Структура		 - структура шапки документа, откуда вызвана процедура
//  Отказ					 - Булево			 - при возникновении ошибок процедура возвращает в этот параметр значение Истина
//  Заголовок				 - Строка			 - заголовок сообщений об ошибках.
//	ЭтоПродажа				 - Булево			 - является ли продажей.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата_Сертификаты(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок, ЭтоПродажа) экспорт
	
	Для Каждого стрОплата Из ТаблицаПоОплате Цикл
		
		Если стрОплата.ВидОплаты = Перечисления.ВидыОплаты.Сертификатом Тогда
			Если Не ЗначениеЗаполнено(стрОплата.Сертификат)	Тогда
				ТекстОшибки = ТекстОшибкиТабличнойЧасти("Оплата", стрОплата.НомерСтроки, НСтр("ru='не указан сертификат'"));
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			ИначеЕсли СертификатыКлиентов.СрокСертификатаИстек(стрОплата.Сертификат) 
				И ЭтоПродажа 
			Тогда 
				ТекстОшибки = ТекстОшибкиТабличнойЧасти("Оплата", стрОплата.НомерСтроки, НСтр("ru='указан сертификат с истёкшим сроком действия'"));
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьРасходСертификатов(ТаблицаПоОплате, ТаблицаПоРаботам) 
		
	Для Каждого СтрокаРаботы Из ТаблицаПоРаботам Цикл
		Если ЗначениеЗаполнено(СтрокаРаботы.Сертификат) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаОплаты Из ТаблицаПоОплате Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.Сертификат)
			И СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплаты.Сертификатом
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции 

Процедура ЗаполнитьРеквизитыСертификатовПриПроведении(ЭтоПродажа)
	
	//Если НЕ Коррекция Тогда
		Если ЭтоПродажа Тогда
			Для Каждого стрСертификат Из Сертификаты Цикл
				ДатаСертификата = ?(ЗначениеЗаполнено(стрСертификат.ДатаНачалаДействия),стрСертификат.ДатаНачалаДействия,Дата);
				ЗаполнитьРеквизитыСертификата(стрСертификат.Сертификат, Клиент, стрСертификат.Сумма, ДатаСертификата);
			КонецЦикла;
		Иначе	
			Для Каждого стрСертификат Из Сертификаты Цикл
				ЗаполнитьРеквизитыСертификата(стрСертификат.Сертификат);
			КонецЦикла;
		КонецЕсли;
	//Иначе
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#КонецОбласти
