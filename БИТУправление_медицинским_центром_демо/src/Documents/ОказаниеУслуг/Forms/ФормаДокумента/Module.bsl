/////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ 

&НаКлиенте
Перем мЕстьПравоИзмененияЦены Экспорт; // Празнак права пользователя менять цену.

&НаКлиенте
Перем мЕстьПравоИзмененияРучныхСкидок Экспорт; // Празнак права пользователя менять ручные скидки.

&НаКлиенте
Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера.

&НаКлиенте
Перем мОсновнойВидОплаты;

&НаКлиенте
Перем мВидОплатыСертификатом; // Вид оплаты сертификатом.

&НаКлиенте
Перем мВестиУчетДлительностиРабот; // Значение реквизита учетной политки "ВестиУчетДлительностиРабот".

&НаКлиенте
Перем мБылаРучнаяПравкаОплаты;

&НаКлиенте
Перем мСписокРаботДокумента;

&НаКлиенте
Перем ПодключеннаяККМ; // Для записи в чеки фискального устройства, фискализировавшего чек.

// При автоподборе и окончании ввода текста указывает, следует ли искать введенное значение в кодах справочника.
&НаКлиенте
Перем мИспользоватьАвтоПодборКлиентовПоКоду;

&НаКлиенте
Перем мАвтоматическиЗаполнятьМатериалы; // Признак автоматического заполнения материалов по работам.

&НаКлиенте
Перем мЦветФонаКнопкиПересчитатьСкидку;

&НаКлиенте
Перем мИнтерактивноеИзменениеПолиса;

&НаКлиенте
Перем мТекущиеИсходныеДанныеДисплеяПокупателя;

&НаКлиенте
Перем мНачатоКопированиеСтрокиРаботыВлияющееНаМатериалы;

&НаКлиенте
Перем мИзмененыНастройкиПодбора;

&НаКлиенте
Перем мТекущийВидПолиса;

&НаКлиенте
Перем мАдресНоменклатураВидаПолиса;

&НаКлиенте
Перем мПредыдущаяСтраницаОсновнойПанелиПодбор;

&НаКлиенте
Перем мПозицииДокументаДляСопутствующих;

&НаКлиенте
Перем СуммаСтрокиОплатыДоНачалаРедактирования;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура КоманднаяПанельРаботыКнопкаПодбор(Кнопка)
	
	ПриНажатииКнопкиПодбор("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМатериалыКнопкаПодбор(Кнопка)
	
	ПриНажатииКнопкиПодбор("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельТоварыКнопкаПодбор(Кнопка)
	
	ПриНажатииКнопкиПодбор("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииКнопкиПодбор(ИмяТабличнойЧасти)
	
	Если ЗначениеЗаполнено(Объект.КомплексныйРасчет) Тогда
		// Открытие подбора из комплексного расчета, выборанного в документе.
		ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту");
		
		КомплексныеРасчетыКлиентовКлиент.ОткрытьПодборИзКомплексногоРасчетаКлиента(Объект.КомплексныйРасчет, 
			КомплексныеРасчетыКлиентовКлиент.ПолучитьВФормеПозицииДокументаДляПодбораИзКомплексногоРасчета(Объект), Объект.Ссылка, ЭтотОбъект, ЭтоВозврат);
	Иначе
		Если ИмяТабличнойЧасти = "Работы" Тогда
			ПодборПометка = РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Работы", "Услуга", "Набор");
		КонецЕсли;
		Если ИмяТабличнойЧасти = "Материалы" Тогда
			ПодборПометка = РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Материалы", "Материал");
		КонецЕсли;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ПодборПометка = РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Товары", "Материал");
		КонецЕсли;
		
		Элементы.РаботыПодбор.Пометка		= ПодборПометка;
		Элементы.МатериалыПодбор.Пометка	= ПодборПометка;
		Элементы.ТоварыПодбор.Пометка		= ПодборПометка;
		
		Если ПодборПометка Тогда
			ПодключитьОбработчикОжидания("ОбновитьСписокПодбора", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	КонецЕсли;
	
	Если	ТекущаяСтраница = Элементы.ГруппаТовары
		Или	ТекущаяСтраница = Элементы.ГруппаМатериалы
		Или	ТекущаяСтраница = Элементы.ГруппаРаботы
	Тогда
		Если ТекущаяСтраница <> мПредыдущаяСтраницаОсновнойПанелиПодбор
			И (Элементы.МатериалыПодбор.Пометка
				Или	Элементы.ТоварыПодбор.Пометка
				Или	Элементы.РаботыПодбор.Пометка)
		Тогда
			Если ТекущаяСтраница = Элементы.ГруппаТовары Тогда 
				РаботаСФормамиКлиент.ОбновитьОтборПодбора(ЭтаФорма, "Товары", "Материал");
			ИначеЕсли ТекущаяСтраница = Элементы.ГруппаМатериалы  Тогда 
				РаботаСФормамиКлиент.ОбновитьОтборПодбора(ЭтаФорма, "Материалы", "Материал");
			ИначеЕсли ТекущаяСтраница = Элементы.ГруппаРаботы Тогда
				РаботаСФормамиКлиент.ОбновитьОтборПодбора(ЭтаФорма, "Работы", "Услуга", "Набор");
			КонецЕсли;
			ПодключитьОбработчикОжидания("ОбновитьСписокПодбора", 0.1, Истина);
		КонецЕсли;
		мПредыдущаяСтраницаОсновнойПанелиПодбор = ТекущаяСтраница;
	КонецЕсли;	
	
	Если ЕстьСтрокиПродаж() Тогда
		Для Каждого ЭлементВерхнегоУровня Из ДеревоСкидки.ПолучитьЭлементы() Цикл
			Элементы.ДеревоСкидки.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодбора()
	РаботаСФормамиКлиент.ОбновитьДинамическийСписокПринудительно(ЭтаФорма.РеквизитСписокПодбор);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСкидкуНажатие(Элемент)
	
	ПересчитатьСкидкуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСкидкуНаКлиенте(ВызовИзПриЗаписи = Ложь)
	
	Если ЕстьСтрокиПродаж() Тогда
		
		Если Не ВызовИзПриЗаписи И ЭтаФорма.Модифицированность И РаботаСоСкидкамиПовтИсп.ЕстьСкидкиТребующиеЗаписьДокумента(НачалоДня(Объект.Дата)) Тогда
			Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтотОбъект) Тогда
				ПоказатьПредупреждение(, "Скидки не расчитаны!");
				Возврат;
			КонецЕсли;
		КонецЕсли;    
		
		ЭтаФорма.Модифицированность = Истина;
				
		мСкидки = КонвертироватьДеревоВСкидки(Объект.Скидки, ДеревоСкидки);
		Объект.Скидки.Очистить();
		Для Каждого стр Из мСкидки Цикл
			нстрТЧ = Объект.Скидки.Добавить();
			ЗаполнитьЗначенияСвойств(нстрТЧ, стр);
		КонецЦикла;
		
		// Перезаполнение и перерасчет скидок
		ОбъектКопия = Объект;
		ПерезаполнитьСкидки(ОбъектКопия);
		КопироватьДанныеФормы(ОбъектКопия, Объект);
		ИнициализацияТрудовыхРолей();

		ОбновитьСтоимостьДокумента();
		ОбновлениеОтображения();
		РаботаСФормамиКлиент.ВывестиЗаголовкиСкидокДокумента(ЭтаФорма);
		КонвертироватьСкидкиВДерево(Объект.Скидки, ДеревоСкидки);
		
		Для Каждого ЭлементВерхнегоУровня Из ДеревоСкидки.ПолучитьЭлементы() Цикл
			Элементы.ДеревоСкидки.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
		КонецЦикла;
	Иначе
		ДеревоСкидки.ПолучитьЭлементы().Очистить();
		Объект.НатуральныеСкидки.Очистить();
		Объект.Скидки.Очистить();
	КонецЕсли;
	
	ВыключитьИндикациюНуженПересчетСкидки();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСкидкуНаСервереПриСозданииФормы()
	
	ПерезаполнитьСкидки(Объект);
	КонвертироватьСкидкиВДерево(Объект.Скидки, ДеревоСкидки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаполнитьСкидки(Объект)
	
	Документы.ОказаниеУслуг.ПерезаполнитьСкидкиДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаКлиентаУпр",,ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ "ТОВАРЫ","МАТЕРИАЛЫ" И ИХ РЕКВИЗИТОВ.

&НаКлиенте
Процедура ОбновитьНадписьОстатокСертификата()

	Элементы.НадписьОстатокСертификата.Заголовок = СформироватьНадписьОстатокСертификата(Объект.Сертификат, Объект.Ссылка, Объект.Дата, глКраткоеНаименованиеОсновнойВалюты);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьОстатокСертификатаСервер()

	Элементы.НадписьОстатокСертификата.Заголовок = СформироватьНадписьОстатокСертификата(Объект.Сертификат, Объект.Ссылка, Объект.Дата, ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты());

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьНадписьОстатокСертификата(Сертификат, ДокументСсылка, Дата, КраткоеНаименованиеОсновнойВалюты = Неопределено, ОстатокСертификата = Неопределено)
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		
		Если ОстатокСертификата = Неопределено Тогда
			ОстатокСертификата = СертификатыКлиентов.ПолучитьОстатокПоСертификату(Сертификат, ?(ЗначениеЗаполнено(ДокументСсылка),ПолучитьМоментВремени(ДокументСсылка, Дата), Дата));
		КонецЕсли;
		
		Если КраткоеНаименованиеОсновнойВалюты = Неопределено Тогда
			КраткоеНаименованиеОсновнойВалюты = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
		КонецЕсли;
		
		Заголовок	= НСтр("ru='Остаток по сертификату:'");
		Заголовок	= Заголовок + " "
					+ Формат(ОстатокСертификата, "ЧДЦ=2; ЧН=0,00")
					+ " " + КраткоеНаименованиеОсновнойВалюты;
	Иначе
		Заголовок = "";
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМоментВремени(Ссылка, Дата)
	
	Возврат Новый МоментВремени(Дата, Ссылка);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ "ТОВАРЫ","МАТЕРИАЛЫ" И ИХ РЕКВИЗИТОВ.

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТабличнаяЧастьПозицийПродажи_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если НоваяСтрока Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Работа)
			И Объект.Работы.Количество() = 1
		Тогда
			ТекущиеДанные.Работа = Объект.Работы[0].Номенклатура;
			ТекущиеДанные.КлючСтрокиРаботы = Объект.Работы[0].КлючСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// После удаления строки
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РаботаСФормамиКлиент.ТоварыПослеУдаления(ЭтаФорма,Элемент);
	ОбновитьСтоимостьДокумента();
	ЗаполнитьСопутствующиеТоварыКлиент();
	
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент)
	
	РаботаСФормамиКлиент.ТоварыПослеУдаления(ЭтаФорма,Элемент);
	ОбновитьСтоимостьДокумента();
	
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПозицийПродажи_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект[Элемент.Имя]);
		
		Если Копирование Тогда
			ОбновитьСтоимостьДокумента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// После редактирования строки
&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИмяДок = "ОказаниеУслуг";
	РаботаСФормамиКлиент.ТоварыПриОкончанииРедактирования(ЭтаФорма,Элемент, НоваяСтрока, ОтменаРедактирования,ИмяДок);
	
	ЗаполнитьСопутствующиеТоварыКлиент();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСопутствующиеТоварыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МатериалыНачалоВыбораРаботы(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРаботаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		МатериалыНачалоВыбораРаботы(СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНачалоВыбораРаботы(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйЭлемент = ВыбратьИзСписка(мСписокРаботДокумента);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
		ТекущаяСтрока.КлючСтрокиРаботы = ВыбранныйЭлемент.Значение;
		Для Каждого СтрокаРаботы Из Объект.Работы Цикл 
			Если СтрокаРаботы.КлючСтроки = ТекущаяСтрока.КлючСтрокиРаботы Тогда
				ТекущаяСтрока.Работа = СтрокаРаботы.Номенклатура;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТекущаяСтрока.РаботаПредставление = ВыбранныйЭлемент.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРаботМатериалов()
	
	Для Каждого СтрокаМатериал Из Объект.Материалы Цикл
		
		СтрокаМатериал.РаботаПредставление = "";
		Для Каждого СтрокаРаботы Из Объект.Работы Цикл
			Если СтрокаМатериал.КлючСтрокиРаботы = СтрокаРаботы.КлючСтроки Тогда
				
				Если ЗначениеЗаполнено(СтрокаРаботы.Номенклатура) Тогда
					СтрокаМатериал.РаботаПредставление = СокрЛП(СтрокаРаботы.Номенклатура.Наименование) + " " + СокрЛП(СтрокаРаботы.ХарактеристикаНоменклатуры);
				КонецЕсли;	
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Изменение номенклатуры
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыРеквизитПриИзменении("Товары.Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРеквизитПриИзменении(ИмяРеквизита, НомерСтроки = Неопределено)
	
	Если НомерСтроки <> Неопределено Тогда
		ОбработкаРеквизитаУпр(ИмяРеквизита,Объект.Товары[НомерСтроки-1],ЭтаФорма);
	Иначе
		ОбработкаРеквизитаУпр(ИмяРеквизита,Элементы.Товары.ТекущиеДанные,ЭтаФорма);
	КонецЕсли;
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент, НомерСтроки = Неопределено)
	
	Если НомерСтроки <> Неопределено Тогда
		ОбработкаРеквизитаУпр("Материалы.Номенклатура",Объект.Материалы[НомерСтроки],ЭтаФорма);
	Иначе
		ОбработкаРеквизитаУпр("Материалы.Номенклатура", Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
	КонецЕсли;	
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Товары.ХарактеристикаНоменклатуры", Элементы.Товары.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Материалы".
//
&НаКлиенте
Процедура МатериалыХарактеристикаНоменклатурыПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Материалы.ХарактеристикаНоменклатуры",Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		Возврат;	
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Номенклатура, Склад, ЕдиницаИзмерения, ЭтоПодбор, ТолькоВНаличии", ТекущиеДанные.Номенклатура, ?(ЗначениеЗаполнено(ТекущиеДанные.Склад),
					ТекущиеДанные.Склад, Объект.Склад), ТекущиеДанные.ЕдиницаИзмерения, Ложь, Истина);
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаПодбораХарактеристикНоменклатуры", ПараметрыФормы, Элемент,ПараметрыФормы,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		Возврат;	
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Номенклатура, Склад, ЕдиницаИзмерения, ЭтоПодбор, ТолькоВНаличии", ТекущиеДанные.Номенклатура, ?(ЗначениеЗаполнено(ТекущиеДанные.Склад),
					ТекущиеДанные.Склад, Объект.СкладМатериалов), ТекущиеДанные.ЕдиницаИзмерения, Ложь, Истина);
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаПодбораХарактеристикНоменклатуры", ПараметрыФормы, Элемент,ПараметрыФормы,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		Возврат;	
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Склад, ЕдиницаИзмерения, ЭтоПодбор, ТолькоВНаличии", ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, 
					?(ЗначениеЗаполнено(ТекущиеДанные.Склад), ТекущиеДанные.Склад, Объект.Склад), ТекущиеДанные.ЕдиницаИзмерения, Ложь, Истина);
	ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаПодбораСерийНоменклатуры", ПараметрыФормы, Элемент,ПараметрыФормы,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
		Возврат;	
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Склад, ЕдиницаИзмерения, ЭтоПодбор, ТолькоВНаличии", ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, 
					?(ЗначениеЗаполнено(ТекущиеДанные.Склад), ТекущиеДанные.Склад, Объект.СкладМатериалов), ТекущиеДанные.ЕдиницаИзмерения, Ложь, Истина);
	ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаПодбораСерийНоменклатуры", ПараметрыФормы, Элемент,ПараметрыФормы,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоFEFOТовары(Команда)

	РаботаСДокументамиКлиент.ЗаполнитьПоFEFOКлиент(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоFEFOТекущаяСтрокаТовары(Команда)
	
	ТоварыТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТоварыТекущиеДанные <> Неопределено Тогда 
		НомерСтроки = ТоварыТекущиеДанные.НомерСтроки;
		РаботаСДокументамиКлиент.ЗаполнитьПоFEFOКлиент(ЭтаФорма, "Товары", НомерСтроки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоFEFOМатериалы(Команда)

	РаботаСДокументамиКлиент.ЗаполнитьПоFEFOКлиент(ЭтаФорма, "Материалы");
	
КонецПроцедуры                                      

&НаКлиенте
Процедура ЗаполнитьПоFEFOТекущаяСтрокаМатериалы(Команда)

	
	ТоварыТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если ТоварыТекущиеДанные <> Неопределено Тогда 
		НомерСтроки = ТоварыТекущиеДанные.НомерСтроки;
		РаботаСДокументамиКлиент.ЗаполнитьПоFEFOКлиент(ЭтаФорма, "Материалы", НомерСтроки);
	КонецЕсли;	
	
КонецПроцедуры 

// Изменение количества
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Товары.Количество",Элементы.Товары.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
КонецПроцедуры

// Изменение количества
&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Материалы.Количество",Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
КонецПроцедуры

// Изменение цены
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Товары.Цена",Элементы.Товары.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
КонецПроцедуры

// Изменение цены
&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Материалы.Цена",Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Товары.ЕдиницаИзмерения",Элементы.Товары.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Материалы.ЕдиницаИзмерения",Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры

// Изменение суммы
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Товары.Сумма",Элементы.Товары.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

// Изменение суммы
&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Материалы.Сумма",Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
КонецПроцедуры

// Изменение % скидки
&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Товары.ПроцентСкидки",Элементы.Товары.ТекущиеДанные,ЭтаФорма);
	
КонецПроцедуры

// Изменение % скидки
&НаКлиенте
Процедура МатериалыПроцентСкидкиПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Материалы.ПроцентСкидки",Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
	
КонецПроцедуры

// Изменение % скидки
&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Товары.СуммаСкидки",Элементы.Товары.ТекущиеДанные,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Материалы.СуммаСкидки",Элементы.Материалы.ТекущиеДанные,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)
	
	УдалитьДанныеФормУчастияУстроки("Работы", Элемент.ТекущиеДанные.КлючСтроки);
	
	РаботаСФормамиКлиент.ОказаниеУслугРаботыПередУдалением(ЭтаФорма, Элемент);
	
КонецПроцедуры

// После удаления строки
&НаКлиенте
Процедура РаботыПослеУдаления(Элемент) Экспорт
	
	УдалитьМатериалыУдаленныхРабот();
	ОбновитьСтоимостьДокумента();
	УстановитьДоступностьВремениОкончания();
	ПересчетВремениОкончания(, мВестиУчетДлительностиРабот);
	
	ЗаполнитьСопутствующиеТоварыКлиент();
	
	ОбновитьФормыУчастияПослеИзмененияРабот(,,Истина);

	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Работы);
		Если Копирование Тогда
			ПерезаполнитьТаблицуРолейИсполнителей();
			ОбновитьСтоимостьДокумента();
			мНачатоКопированиеСтрокиРаботыВлияющееНаМатериалы = Истина;
		Иначе
			Если СтрокаТабличнойЧасти.Количество = 0 Тогда
				СтрокаТабличнойЧасти.Количество = 1;
			КонецЕсли;
			
			ЗаполнитьСотрудниковОбщихФормУчастия(СтрокаТабличнойЧасти, "Работы");
			
			Если СтрокаТабличнойЧасти.НомерСтроки > 1 Тогда
				ЗаполнитьТрудовыеРолиПоПредыдущейСтроке(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЕсли;
		ИнициализацияТрудовыхРолейКлиент();
	КонецЕсли;
	
	ЗаблокироватьПоляЕслиРаботаПоАбонементу();
	
КонецПроцедуры

// После редактирования строки
&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Перезаполнение норм расхода материалов после копирования строки без изменения номенклатуры.
	Если мНачатоКопированиеСтрокиРаботыВлияющееНаМатериалы
		И мАвтоматическиЗаполнятьМатериалы
		И Не ОтменаРедактирования 
	Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	
	ОбновитьСтоимостьДокумента();	
	
	ОбновитьСписокРаботДокумента();
	УстановитьДоступностьВремениОкончания();
	ПересчетВремениОкончания(, мВестиУчетДлительностиРабот);
	
	ЗаполнитьСопутствующиеТоварыКлиент();
	ОбновлениеОтображения();
	
КонецПроцедуры

// Изменение работы
&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент, НомерСтроки = Неопределено) 

	Если НомерСтроки <> Неопределено Тогда
		ИндексТекущейСтроки = НомерСтроки;
	ИначеЕсли Элементы.Работы.ТекущиеДанные <> Неопределено Тогда
		ИндексТекущейСтроки = Элементы.Работы.ТекущиеДанные.НомерСтроки-1;
	Иначе
		Возврат;
	КонецЕсли;
	
	РаботыРаботаПриИзмененииТекСтрока(Элемент, ИндексТекущейСтроки);
	
	ОбновитьФормыУчастияПослеИзмененияРабот(Элементы.Работы.ТекущиеДанные,,,Элементы.Работы);
	
	ЗаблокироватьПоляЕслиРаботаПоАбонементу();
	
КонецПроцедуры	

// Изменение работы
&НаКлиенте
Процедура РаботыРаботаПриИзмененииТекСтрока(Элемент, ТекущаяСтрока = Неопределено)
	
	СтрокаТабличнойЧасти = Объект.Работы[ТекущаяСтрока];
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		ПозицияВводаСтроки = 0;
	Иначе
		ПозицияВводаСтроки = ТекущаяСтрока;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Ном = СтрокаТабличнойЧасти.Номенклатура;
	Иначе
		Ном = Элемент;
	КонецЕсли;	
	
	Если РаботаСФормамиСервер.ЭтоУслуга(Ном) Тогда
		
		ОбработкаРеквизитаУпр("Работы.Номенклатура",СтрокаТабличнойЧасти,ЭтаФорма);
		
		Если мВестиУчетДлительностиРабот Тогда
			УстановитьПродолжительностьРаботы(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ПересчетВремениОкончания(, мВестиУчетДлительностиРабот);
		
	ИначеЕсли РаботаСФормамиСервер.ЭтоНабор(Ном) Тогда
		
		СоставНабора = ОбщегоНазначенияСервер.ПолучитьСоставНабора(Ном);
		
		Если СоставНабора <> Неопределено И СоставНабора.Количество() > 0 Тогда
			
			// Удаление форм участия для удаляемой строки набора
			мОбр = Объект.РолиИсполнителей.Количество() - 1;
			Для сч = 0 По мОбр Цикл
				СтрокаРолиИсполнителя = Объект.РолиИсполнителей[мОбр - сч];
				Если СтрокаРолиИсполнителя.ИмяТЧ = "Работы"
					И СтрокаРолиИсполнителя.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки
				Тогда
					Объект.РолиИсполнителей.Удалить(мОбр - сч);
				КонецЕсли;
			КонецЦикла;
			ИнициализацияТрудовыхРолейКлиент(Истина);
			
			// Удаление строки с набором, чтобы создать на её месте новые - для состава набора.
			Объект.Работы.Удалить(ПозицияВводаСтроки);
			
			УдалитьМатериалыУдаленныхРабот();
			
			Для Инд = 0 По СоставНабора.Количество() - 1 Цикл
				
				Если СоставНабора[Инд].ЭтоУслуга Тогда
				
					СтрокаРаботы = Объект.Работы.Вставить(ПозицияВводаСтроки);
					СтрокаРаботы.Номенклатура = СоставНабора[Инд].Комплектующая;
					СтрокаРаботы.ХарактеристикаНоменклатуры = СоставНабора[Инд].ХарактеристикаКомплектующей;
					СтрокаРаботы.Количество   = СоставНабора[Инд].Количество;
					СтрокаРаботы.КлючСтроки   = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Работы);
					
					ЗаполнитьСотрудниковОбщихФормУчастия(СтрокаРаботы, "Работы");
					РаботыРаботаПриИзменении(Неопределено, СтрокаРаботы.НомерСтроки - 1);
					
					ПозицияВводаСтроки = ПозицияВводаСтроки + 1;
				
				ИначеЕсли СоставНабора[Инд].ЭтоТовар Тогда
					
					СтрокаТовары = Объект.Товары.Добавить();
					СтрокаТовары.Номенклатура = СоставНабора[Инд].Комплектующая;
					СтрокаТовары.ХарактеристикаНоменклатуры = СоставНабора[Инд].ХарактеристикаКомплектующей;
					СтрокаТовары.Количество   = СоставНабора[Инд].Количество;
					СтрокаТовары.КлючСтроки   = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Товары);
					ТоварыРеквизитПриИзменении("Товары.Номенклатура",СтрокаТовары.НомерСтроки);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		РаботыПриОкончанииРедактирования(Элементы.Работы, Ложь, Ложь);
		
	КонецЕсли;
	
	// Определение по таб. части Материалы, изменилась ли номенклатура работы, имеющая расходники.
	ИзмениласьРаботаНаКоторуюЕстьРасходМатериалов = Ложь;
	Для Каждого СтрокаМатериал Из Объект.Материалы Цикл
		Если СтрокаМатериал.КлючСтрокиРаботы = СтрокаТабличнойЧасти.КлючСтроки
			И СтрокаМатериал.Работа <> СтрокаТабличнойЧасти.Номенклатура
		Тогда
			ИзмениласьРаботаНаКоторуюЕстьРасходМатериалов = Истина;
			СтрокаМатериал.Работа = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
	КонецЦикла;
		
	// Перезаполнение расхода материалов по нормативам
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		
		Если ТребуетсяПерезаполнениеНормыРасходаПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИзмениласьРаботаНаКоторуюЕстьРасходМатериалов) Тогда
			СтрокаТабличнойЧасти.РучнаяКорректировкаМатериалов = Ложь; // Независимо от того, не было ли уже Ложь.
			
			мНачатоКопированиеСтрокиРаботыВлияющееНаМатериалы = Ложь;
			
			КолМатериаловСтарое = Объект.Материалы.Количество();
				
			ЗаполнитьМатериалыПоНормамРабот();
			Если КолМатериаловСтарое <> 0 
				Или Объект.Материалы.Количество() <> 0
			Тогда
				ОбновитьСписокРаботДокумента();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСтоимостьДокумента();
	
	РаботаСФормамиКлиент.ОказаниеУслугРаботыРаботаПриИзмененииТекСтрока(ЭтаФорма, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормыУчастияПослеИзмененияРабот(ИзмененныеСтрокиРабот = Неопределено, ЗаполнитьСотрудниковОбщихФормУчастия = Ложь, ЗаполнятьСводнуюТаблицуПустымиЗначениями = Ложь, РедактируеммаяТаблицаФормы = Неопределено)

	Если ТипЗнч(ИзмененныеСтрокиРабот) = Тип("Массив") Тогда
		ИзмененныеСтроки = ИзмененныеСтрокиРабот;
	ИначеЕсли ИзмененныеСтрокиРабот <> Неопределено Тогда
		// Одна строка
		ИзмененныеСтроки = Новый Массив;
		ИзмененныеСтроки.Добавить(ИзмененныеСтрокиРабот);
	КонецЕсли;
	
	Если ТипЗнч(ИзмененныеСтроки) = Тип("Массив")
		И ИзмененныеСтроки.Количество() = 0
	Тогда
		// Ничего не изменилось, формы участия обновлять не надо
		Возврат
	КонецЕсли;
	
	РасчитатьКолонкиПоТрудовымРолям("Работы", Элементы.Работы);
	
	Если РедактируеммаяТаблицаФормы <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ПродолжитьРедактированиеСпискаПослеРасчетаКолонокТрудовыхРолей",0.1,Истина);
	КонецЕсли;
	
	Если ЗаполнитьСотрудниковОбщихФормУчастия Тогда
		Если ТипЗнч(ИзмененныеСтроки) = Тип("Массив") Тогда
			Для Каждого СтрокаРаботы Из ИзмененныеСтроки Цикл
				ЗаполнитьСотрудниковОбщихФормУчастия(СтрокаРаботы, "Работы");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИнициализацияТрудовыхРолейКлиент(ЗаполнятьСводнуюТаблицуПустымиЗначениями);
	
	Если ТипЗнч(ИзмененныеСтроки) = Тип("Массив") Тогда
		
		ФормаУчастияДляНаправившегоВрача = мУчетнаяПолитика.ФормаУчастияДляНаправившегоВрача;
		АвтозаполнениеНаправившегоВрача = мУчетнаяПолитика.АвтозаполнениеНаправившегоВрача;
		ВыполненаПодстановкаНаправившегоВрача = Ложь;
		
		Если АвтозаполнениеНаправившегоВрача И ЗначениеЗаполнено(ФормаУчастияДляНаправившегоВрача) Тогда
			НаправившиеВрачи = ПолучитьНаправившихВрачей(ИзмененныеСтроки, ФормаУчастияДляНаправившегоВрача, Истина);
			ИмяКолонкиНаправившегоВрача = ПолучитьИмяКолонкиНаправившегоВрача(ФормаУчастияДляНаправившегоВрача);
		КонецЕсли;
		
		Для Каждого СтрокаРаботы Из ИзмененныеСтроки Цикл
			
			Если АвтозаполнениеНаправившегоВрача И ЗначениеЗаполнено(ФормаУчастияДляНаправившегоВрача)  Тогда
				
				ЗаполнитьНаправившегоВрачаВСтрокеТЧ(СтрокаРаботы, НаправившиеВрачи, ФормаУчастияДляНаправившегоВрача, ВыполненаПодстановкаНаправившегоВрача, Истина);	
				НаправившийВрач = Неопределено;
				
				Попытка
					НаправившийВрач = СтрокаРаботы[ИмяКолонкиНаправившегоВрача];
				Исключение
				КонецПопытки;
				
			КонецЕсли;			
			
			ЗаполнитьСотрудниковФормыУчастияНоменклатурыСтроки(СтрокаРаботы, "Работы");
			
		КонецЦикла;
		
		Если ВыполненаПодстановкаНаправившегоВрача Тогда 
			ТрудоваяРольПриИзменении();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРедактированиеСпискаПослеРасчетаКолонокТрудовыхРолей()
	
	ТекущийЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	Пока ТекущийЭлементФормы <> Неопределено
		И ТекущийЭлементФормы <> ЭтаФорма 
		И ТипЗнч(ТекущийЭлементФормы) <> Тип("ТаблицаФормы")
	Цикл
		ТекущийЭлементФормы = ТекущийЭлементФормы.Родитель;
	КонецЦикла;
	
	Если ТекущийЭлементФормы = Элементы.Работы
		И Элементы.Работы.ТекущаяСтрока <> Неопределено
	Тогда
		Элементы.Работы.ИзменитьСтроку();
		ПолеНоменклатурыНайдено = Ложь;
		Для Каждого ЭлементТаблицы Из Элементы.Работы.ПодчиненныеЭлементы Цикл
			Если ЭлементТаблицы = Элементы.РаботыНоменклатура Тогда
				ПолеНоменклатурыНайдено = Истина;
			ИначеЕсли ПолеНоменклатурыНайдено
				И ТипЗнч(ЭлементТаблицы) = Тип("ПолеФормы")
			Тогда
				ЭтаФорма.ТекущийЭлемент = ЭлементТаблицы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// При добавлении форм участия по другим табличным частям продаж добавить их в этот блок.
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура РасчитатьКолонкиПоТрудовымРолям(ИмяТЧ, ПолеТабличнойЧасти)
	
	НоменклатураТабличнойЧасти = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если НоменклатураТабличнойЧасти.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
			НоменклатураТабличнойЧасти.Добавить(СтрокаТЧ.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	// Заполняю перечень трудовых ролей, актуальных для номенклатур табличной части (т.ч. РАБОТЫ).
	ТрудовыеРолиДляТЧ = Новый Массив;
	Для Каждого СтрокаКеш Из кешТрудовыхРолейИНоменклатур Цикл
		Если ТрудовыеРолиДляТЧ.Найти(СтрокаКеш.ТрудоваяРоль) = Неопределено
			И (СтрокаКеш.ДляВсехУслуг 
				Или НоменклатураТабличнойЧасти.Найти(СтрокаКеш.Номенклатура) <> Неопределено)
		Тогда
			ТрудовыеРолиДляТЧ.Добавить(СтрокаКеш.ТрудоваяРоль);
		КонецЕсли;
	КонецЦикла;
	
	ВсегоТрудовыхРолей = ТрудовыеРолиДляТЧ.Количество();
	ТекущаяТрудоваяРоль = 0;
	
	Если СоответствиеТрудовыхРолейИКолонок.Количество() <> 0 Тогда
		мОбр = СоответствиеТрудовыхРолейИКолонок.Количество() - 1;
		Для сч = 0 по мОбр Цикл
			Если СоответствиеТрудовыхРолейИКолонок[мОбр-сч].ТабличнаяЧасть = ИмяТЧ Тогда
				СоответствиеТрудовыхРолейИКолонок.Удалить(мОбр-сч);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для инд = 1 по 8 Цикл
		
		Колонка = ПолеТабличнойЧасти.ПодчиненныеЭлементы[ИмяТЧ + "ТрудоваяРоль" + инд];
		
		Если ТекущаяТрудоваяРоль < ВсегоТрудовыхРолей Тогда
			
			Колонка.Заголовок = ТрудовыеРолиДляТЧ[ТекущаяТрудоваяРоль];
			Колонка.Видимость = Истина;
			
			НоваяСтрока = СоответствиеТрудовыхРолейИКолонок.Добавить();
			НоваяСтрока.Колонка = СтрЗаменить(Колонка.Имя,ИмяТЧ,"");
			НоваяСтрока.ТабличнаяЧасть = ИмяТЧ;
			НоваяСтрока.ТрудоваяРоль = ТрудовыеРолиДляТЧ[ТекущаяТрудоваяРоль];
			
			ТекущаяТрудоваяРоль = ТекущаяТрудоваяРоль + 1;
		Иначе
			Колонка.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаполнитьТабличнуюЧастьЗаполненийСотрудниковПоРолям();
	
	// Видимость элемента формы со списком всех форм участия.
	Элементы.ГруппаЗаполнениеТрудовыхРолей.Видимость = ТаблицаЗаполненийТрудовыхРолей.Количество() <> 0;
	
	// ИнициализацияТрудовыхРолей на клиенте
	Для Каждого СтрокаРабот Из Объект.Работы Цикл
		Для Каждого СтрокаСоответствия Из СоответствиеТрудовыхРолейИКолонок Цикл
			// Закончить после заполнения соответсвий ролей и колонок
			НайденныеСтроки = Объект.РолиИсполнителей.НайтиСтроки(Новый Структура("КлючСтроки,ИмяТЧ,Роль",СтрокаРабот.КлючСтроки,"Работы",СтрокаСоответствия.ТрудоваяРоль));
			Если НайденныеСтроки.Количество() >= 1 Тогда
				СтрокаРабот[СтрокаСоответствия.Колонка] = НайденныеСтроки[0].Сотрудник;
			Иначе
				СтрокаРабот[СтрокаСоответствия.Колонка] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТабличнуюЧастьЗаполненийСотрудниковПоРолям()
	
	СтарыеЗаполненияТрудовыхРолей = Новый Соответствие;
	Для Каждого СтрокаЗаполненияТР Из ТаблицаЗаполненийТрудовыхРолей Цикл
		СтарыеЗаполненияТрудовыхРолей.Вставить(СтрокаЗаполненияТР.ТрудоваяРоль, СтрокаЗаполненияТР.Сотрудник);
	КонецЦикла;
	ТаблицаЗаполненийТрудовыхРолей.Очистить();

	Для Каждого СтрокаТР Из СоответствиеТрудовыхРолейИКолонок Цикл
		
		НоваяСтрока = ТаблицаЗаполненийТрудовыхРолей.Добавить();
		НоваяСтрока.ТрудоваяРоль = СтрокаТР.ТрудоваяРоль;
		Сотрудник = СтарыеЗаполненияТрудовыхРолей.Получить(СтрокаТР.ТрудоваяРоль);
		Если Сотрудник <> Неопределено Тогда
			НоваяСтрока.Сотрудник = Сотрудник;
		КонецЕсли;
		НоваяСтрока.Колонка = СтрокаТР.Колонка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияТрудовыхРолей()
	
	Для Каждого СтрокаРабот Из Объект.Работы Цикл
		Для Каждого СтрокаСоответствия Из СоответствиеТрудовыхРолейИКолонок Цикл
			// Закончить после заполнения соответсвий ролей и колонок
			НайденныеСтроки = Объект.РолиИсполнителей.НайтиСтроки(Новый Структура("КлючСтроки,ИмяТЧ,Роль",СтрокаРабот.КлючСтроки,"Работы",СтрокаСоответствия.ТрудоваяРоль));
			Если НайденныеСтроки.Количество() >= 1 Тогда
				СтрокаРабот[СтрокаСоответствия.Колонка] = НайденныеСтроки[0].Сотрудник;
			Иначе
				СтрокаРабот[СтрокаСоответствия.Колонка] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияТрудовыхРолейКлиент(ЗаполнятьСводнуюТаблицуПустымиЗначениями = Ложь)
	// Массив хранит сотрудника, если тот одинаков во всех колонках ТР или Ложь, если нет.
	КолРолей = СоответствиеТрудовыхРолейИКолонок.Количество();
	мсСовпаденияСотрудников = ?(КолРолей = 0, Новый Массив, Новый Массив(КолРолей));
	
	Для Каждого СтрокаРабот Из Объект.Работы Цикл
		Сч = 0;
		Для Каждого СтрокаСоответствия Из СоответствиеТрудовыхРолейИКолонок Цикл
			
			Если ТрудоваяРольДоступна(СтрокаРабот.Номенклатура,СтрокаСоответствия.ТрудоваяРоль) Тогда
				
				НайденныеСтроки = Объект.РолиИсполнителей.НайтиСтроки(Новый Структура("КлючСтроки,ИмяТЧ,Роль",СтрокаРабот.КлючСтроки,"Работы",СтрокаСоответствия.ТрудоваяРоль));
				
				Если НайденныеСтроки.Количество() >= 1 Тогда
					СотрудникРолиВСтроке = НайденныеСтроки[0].Сотрудник;
				Иначе
					СотрудникРолиВСтроке = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				КонецЕсли;
				
				// Нашли сотрудника - проверим, одинаков ли с предыдущим
				Если мсСовпаденияСотрудников[Сч] = Неопределено Тогда // Первый сотрудник.
					мсСовпаденияСотрудников[Сч] = СотрудникРолиВСтроке;
				ИначеЕсли мсСовпаденияСотрудников[Сч] <> СотрудникРолиВСтроке Тогда // Если не совпадают.
					мсСовпаденияСотрудников[Сч] = Ложь;
				КонецЕсли;	
				
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
	// Заполним теперь таблицу заполнений трудовых ролей 
	Для Сч = 0 По СоответствиеТрудовыхРолейИКолонок.Количество() - 1 Цикл
		НайденныеСтроки = ТаблицаЗаполненийТрудовыхРолей.НайтиСтроки(Новый Структура("ТрудоваяРоль",СоответствиеТрудовыхРолейИКолонок[Сч].ТрудоваяРоль));
		Если НайденныеСтроки.Количество() = 1 Тогда // Нашли такую трудовую роль.
			Если мсСовпаденияСотрудников[Сч] <> Ложь Тогда // Если есть неповторяющийся сотрудник (или неопределено).
				Если ЗначениеЗаполнено(мсСовпаденияСотрудников[Сч]) 
					Или ЗаполнятьСводнуюТаблицуПустымиЗначениями Тогда
					
					НайденныеСтроки[0].Сотрудник = мсСовпаденияСотрудников[Сч];
				КонецЕсли;
			Иначе // Иначе заполняем пустой ссылкой
				НайденныеСтроки[0].Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ТрудоваяРольДоступна(Номенклатура,ТрудоваяРоль)
	НайденныеСтроки = кешТрудовыхРолейИНоменклатур.НайтиСтроки(Новый Структура("Номенклатура,ТрудоваяРоль",Номенклатура,ТрудоваяРоль));
	Если НайденныеСтроки.Количество() = 0 Тогда
		НайденныеСтроки = кешТрудовыхРолейИНоменклатур.НайтиСтроки(Новый Структура("ТрудоваяРоль",ТрудоваяРоль));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Если НайденныеСтроки[0].ДляВсехУслуг Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура УдалитьДанныеФормУчастияУстроки(ИмяТЧ, КлючСтроки)
	
	СтрокиКУдалению = Объект.РолиИсполнителей.НайтиСтроки(Новый Структура("ИмяТЧ,КлючСтроки",ИмяТЧ, КлючСтроки));
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.РолиИсполнителей.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Перезаполнение временных данных для форм участия сотрудников (трудовых ролей).
&НаСервере
Процедура ПерезаполнитьКешПоТрудовымРолям()
	
	Работы = Объект.Работы.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТрудовыеРоли.Ссылка КАК ТрудоваяРоль,
	               |	ИСТИНА КАК ДляВсехУслуг,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
	               |ПОМЕСТИТЬ ТрудовыеРолиДокумента
	               |ИЗ
	               |	Справочник.ТрудовыеРоли КАК ТрудовыеРоли
	               |ГДЕ
	               |	ТрудовыеРоли.ДляВсехУслуг
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТрудовыеРолиРаботИТоваров.ТрудоваяРоль,
	               |	ЛОЖЬ,
	               |	ТрудовыеРолиРаботИТоваров.Номенклатура
	               |ИЗ
	               |	РегистрСведений.ТрудовыеРолиРаботИТоваров КАК ТрудовыеРолиРаботИТоваров
				   // |ГДЕ
				   // |	ТрудовыеРолиРаботИТоваров.Номенклатура В(&Номенклатура).
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТрудовыеРолиРаботИТоваров.ТрудоваяРоль,
	               |	ТрудовыеРолиРаботИТоваров.Номенклатура
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОказаниеУслугРолиИсполнителей.Роль,
	               |	ОказаниеУслугРолиИсполнителей.Роль.ДляВсехУслуг,
	               |	ОказаниеУслугРаботы.Номенклатура
	               |ИЗ
	               |	Документ.ОказаниеУслуг.РолиИсполнителей КАК ОказаниеУслугРолиИсполнителей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОказаниеУслуг.Работы КАК ОказаниеУслугРаботы
	               |		ПО ОказаниеУслугРолиИсполнителей.КлючСтроки = ОказаниеУслугРаботы.КлючСтроки
	               |ГДЕ
	               |	ОказаниеУслугРолиИсполнителей.Ссылка = &Ссылка
	               |	И ОказаниеУслугРолиИсполнителей.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И ОказаниеУслугРаботы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОказаниеУслугРолиИсполнителей.Роль,
	               |	ОказаниеУслугРаботы.Номенклатура,
	               |	ОказаниеУслугРолиИсполнителей.Роль.ДляВсехУслуг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТрудовыеРолиДокумента.ТрудоваяРоль,
	               |	ТрудовыеРолиДокумента.Номенклатура,
	               |	ТрудовыеРолиДокумента.ДляВсехУслуг
	               |ИЗ
	               |	ТрудовыеРолиДокумента КАК ТрудовыеРолиДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТрудовыеРолиДокумента.ТрудоваяРоль,
	               |	ТрудовыеРолиДокумента.Номенклатура,
	               |	ТрудовыеРолиДокумента.ДляВсехУслуг";
	
	Запрос.УстановитьПараметр("Номенклатура", Работы);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	кешТрудовыхРолейИНоменклатур.Загрузить(Результат.Выгрузить());
		
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаНоменклатурыПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Работы.ХарактеристикаНоменклатуры",Элементы.Работы.ТекущиеДанные,ЭтаФорма);
	
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
		ОбновитьСтоимостьДокумента();	
	КонецЕсли;
	
КонецПроцедуры

// Изменение количества
&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Работы.Количество",Элементы.Работы.ТекущиеДанные,ЭтаФорма);
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если мВестиУчетДлительностиРабот Тогда
		УстановитьПродолжительностьРаботы(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ПересчетВремениОкончания(, мВестиУчетДлительностиРабот);
	
	Если мАвтоматическиЗаполнятьМатериалы Тогда
		ЗаполнитьМатериалыПоНормамРабот();
	КонецЕсли;
	
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

// Изменение цены
&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент, ТекущиеДанные = Неопределено) Экспорт
	
	ОбработкаРеквизитаУпр("Работы.Цена",Элементы.Работы.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

// Изменение суммы
&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Работы.Сумма",Элементы.Работы.ТекущиеДанные,ЭтаФорма);
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РаботыПроцентСкидкиПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Работы.ПроцентСкидки",Элементы.Работы.ТекущиеДанные,ЭтаФорма);
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаРеквизитаУпр("Работы.СуммаСкидки",Элементы.Работы.ТекущиеДанные,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	ЗаблокироватьПоляЕслиРаботаПоАбонементу();
	
	Если Элементы.Работы.ТекущиеДанные <> Неопределено Тогда
		ОпределитьДоступностьПоля(Элементы.Работы.ТекущиеДанные.Номенклатура);
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает доступность колонок дополнительных исполнителей в табличной части в соответствии с формами участия.
&НаКлиенте
Процедура ОпределитьДоступностьПоля(Номенклатура)
	
	Для Каждого СтрокаСоотв Из СоответствиеТрудовыхРолейИКолонок Цикл
		
		НайденныеСтроки = кешТрудовыхРолейИНоменклатур.НайтиСтроки(Новый Структура("Номенклатура,ТрудоваяРоль",Номенклатура,СтрокаСоотв.ТрудоваяРоль));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = кешТрудовыхРолейИНоменклатур.НайтиСтроки(Новый Структура("ТрудоваяРоль",СтрокаСоотв.ТрудоваяРоль));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				Если НайденныеСтроки[0].ДляВсехУслуг Тогда
					Элементы.Работы.ПодчиненныеЭлементы["Работы" + СтрокаСоотв.Колонка].ТолькоПросмотр = Ложь;
				Иначе
					Элементы.Работы.ПодчиненныеЭлементы["Работы" + СтрокаСоотв.Колонка].ТолькоПросмотр = Истина;
				КонецЕсли;
			Иначе
				Элементы.Работы.ПодчиненныеЭлементы["Работы" + СтрокаСоотв.Колонка].ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			
			Элементы.Работы.ПодчиненныеЭлементы["Работы" + СтрокаСоотв.Колонка].ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ОПЛАТА" И ЕГО РЕКВИЗИТОВ.

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеОплата.ТекущиеДанные;
	
	Если НоваяСтрока И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОплаты) Тогда
		СтрокаТабличнойЧасти.ВидОплаты = мОсновнойВидОплаты;
		Если мОсновнойВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные") Тогда
			СтрокаТабличнойЧасти.ЭквайринговыйТерминал = ЭквайринговыйТерминалНаФорме;
		КонецЕсли;
	КонецЕсли;
	АвтоЗаполнениеПоляСертификатОплаты();
	
	СуммаСтрокиОплатыДоНачалаРедактирования = СтрокаТабличнойЧасти.Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Две строки оплаты безналом не допускается. Если редактированием сделали так, то вторая удаляется.
	Если Не ОтменаРедактирования Тогда
		ПроверкаСтрокиИУдалениеСтрокиОплатыНСПК();
		ВидыОплатыНаличными = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными");
		ВидыОплатыБезналом = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные");
		
		Если Элемент.ТекущиеДанные.ВидОплаты = ВидыОплатыБезналом Тогда
			Если Оплата_СтрокиОплатыБезналом().Количество() > 1 Тогда
				Объект.Оплата.Удалить(Элемент.ТекущиеДанные);
				Возврат;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЭквайринговыйТерминал) Тогда
			Элемент.ТекущиеДанные.ЭквайринговыйТерминал = Неопределено;
		КонецЕсли;
	
		мБылаРучнаяПравкаОплаты = Истина;
		ТекДанные = Элементы.ТабличноеПолеОплата.ТекущиеДанные;
		
		Если ТекДанные.ВидОплаты = ВидыОплатыНаличными Тогда
			Объект.ПолученоНаличными = ПолучитьСуммуОпалатыПоВидуОплаты(ВидыОплатыНаличными);
		ИначеЕсли ТекДанные.ВидОплаты = ВидыОплатыБезналом Тогда
			ОплаченоБезналичным = ПолучитьСуммуОпалатыПоВидуОплаты(ВидыОплатыБезналом);
			ЭквайринговыйТерминалНаФорме = ТекДанные.ЭквайринговыйТерминал; 
			ВидимостьКомандОплатыНСПК(ЭквайринговыйТерминалНаФорме, Элементы.НСПК_ОдобрениеКорзины, Элементы.НСПК_ОтправитьПодтверждение); // НСПК Видимость команд по оплате.
		КонецЕсли;
		
		АвтоЗаполнениеПоляСертификатОплаты();
		РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект, ТекДанные.ВидОплаты <> ВидыОплатыНаличными, СуммаСтрокиОплатыДоНачалаРедактирования);
		РаботаСДокументамиКлиентСервер.ВывестиЗаголовокСуммаОплатыДокумента(ЭтотОбъект);
		
		РаботаСФормамиКлиент.ОплатаПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
		ОбнулениеОплатыНаличными();
		
		ОплаченоБезналичным = ПолучитьСуммуОпалатыПоВидуОплаты(ВидыОплатыБезналом); // Реквизит формы для ввода не из табличной части.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеОплатаПередНачаломИзменения(Элемент, Отказ)
		
	Если Элемент.ТекущийЭлемент.Имя = "ТабличноеПолеОплатаЭквайринговыйТерминал" Тогда
		Если Элемент.ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные") Тогда 
			Если Не Элементы.ЭкваринговыйТерминал.Доступность Тогда
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ
		И Не Оплаты_ЭтоСтрокаОплатыНеНСПК(Элемент.ТекущиеДанные, НСПК_СпособОплаты)
	Тогда
		Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры

// Возвращает сумму введенной оплаты по указанному виду оплаты
//
// Параметры: 
// 	ВидОплаты - вид оплаты
//
// Возвращаемое значение:
// 	Число.
//
&НаКлиенте
Функция ПолучитьСуммуОпалатыПоВидуОплаты(ВидОплаты)
	
	СтрокиОплаты = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплаты));
	СтрокаОплатыНСПК = НСПК_СтрокаОплаты();
	
	пСумма = 0;
	Для Каждого СтрокаОплаты Из СтрокиОплаты Цикл
		Если СтрокаОплаты <> СтрокаОплатыНСПК Тогда
			пСумма = пСумма + СтрокаОплаты.Сумма
		КонецЕсли;
	КонецЦикла;
	
	Возврат пСумма;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЭТСтрокиОплатыБезналом(ЭквайринговыйТерминал)
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные")
			И СтрокаОплаты.ЭквайринговыйТерминал <> ЭквайринговыйТерминал
			И Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты)
		Тогда
			СтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоляБезналаНаПанелиИзОплаты(ЭТНаФорме, ОплатаБезналомНаФорме, Знач ТабЧастьОплата, Знач Филиал, Знач Касса, Знач НСПК_СпособОплаты)
	
	СтрокаБезнал = Неопределено;
	
	Для Каждого СтрокаОплаты Из ТабЧастьОплата Цикл
		
		Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные")
			И Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты)
		Тогда
			СтрокаБезнал = СтрокаОплаты;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаБезнал <> Неопределено Тогда
		ОплатаБезналомНаФорме = СтрокаБезнал.Сумма;
		ЭТНаФорме			  = СтрокаБезнал.ЭквайринговыйТерминал;
	Иначе
		ЭТНаФорме = РаботаСТорговымОборудованием.ПолучитьЭквайринговыйТерминал(, Филиал, Касса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = НСПК_СтрокаОплаты() Тогда
		Отказ = Истина;
	Иначе
		Если Элементы.ТабличноеПолеОплата.ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными") Тогда
			Объект.ПолученоНаличными = 0;
			Объект.Сдача = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПослеУдаления(Элемент)
	РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект);
	РаботаСДокументамиКлиентСервер.ВывестиЗаголовокСуммаОплатыДокумента(ЭтаФорма);	
	ЗаполнитьПолеОплатаБезналичнымиИзОплат();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ.

// Изменение даты документа
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата = НачалоДня(Объект.Дата) Тогда // Выбрали другую дату.
		Объект.ДатаНачала = НачалоДня(Объект.Дата) + ОбщегоНазначенияКлиент.ВремяВСекунды(ВремяНачала);
	Иначе // Изменили время в дате документа
		Продолжительность = ВремяОкончания - ВремяНачала;
		ВремяОкончания = Дата(1,1,1) + (Объект.Дата - НачалоДня(Объект.Дата));
		ВремяНачала	= ?(ОбщегоНазначенияКлиент.ВремяВСекунды(ВремяОкончания) > Продолжительность, ВремяОкончания - Продолжительность, Дата(1,1,1));
	КонецЕсли;
	
	ОбновитьСтоимостьДокумента();
	
	РаботаСФормамиКлиент.ДокументПриИзмененииДаты(ЭтаФорма, мТекущаяДатаДокумента);
	
	ОбновитьНадписьОстатокСертификата();
	ПодсветитьКнопкуПересчетаСкидки();
	
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

// Изменение даты начала
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Объект.ДатаНачала=НачалоДня(Объект.ДатаНачала)+(ВремяНачала-НачалоДня(ВремяНачала));//+(Час(ДатаНачалаВремя)*60*60)+(Минута(ДатаНачалаВремя)*60)+(Секунда(ДатаНачалаВремя));
	ДатаНачалаВремя=Объект.ДатаНачала;
КонецПроцедуры

// Изменение времени начала
&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	Если мВестиУчетДлительностиРабот Тогда
		ДельтаВремени = 0;
	Иначе
		ДельтаВремени = (ВремяНачала - НачалоДня(ВремяНачала)) - (Объект.ДатаНачала-НачалоДня(Объект.ДатаНачала));
	КонецЕсли;
	
	ДатаНачалаПриИзменении(Элемент);
	ПересчетВремениОкончания(ДельтаВремени, мВестиУчетДлительностиРабот);	
	Объект.ДатаОкончания = НачалоДня(Объект.ДатаНачала)+(ВремяОкончания-(НачалоДня(ВремяОкончания)));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВремяНачала = ВремяНачала + 60 * Направление;
	ДатаНачалаВремяПриИзменении(Элемент)
	
КонецПроцедуры

&НаСервере
Процедура РассчетВремениОкончания()
	
	ВремяОкончания = ВремяНачала;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		Продолжительность = СтрокаТабличнойЧасти.Номенклатура.ПродолжительностьЧас * 3600 + СтрокаТабличнойЧасти.Номенклатура.ПродолжительностьМин * 60;
		ВремяОкончания = ВремяОкончания + Продолжительность;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетВремениОкончания(ДельтаВремени=0, мВестиУчетДлительностиРаботСервер) 
	
	Если мВестиУчетДлительностиРаботСервер Тогда
		ВремяОкончания = ВремяНачала;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			Продолжительность = (СтрокаТабличнойЧасти.Продолжительность-НачалоДня(СтрокаТабличнойЧасти.Продолжительность));
			ВремяОкончания = ВремяОкончания + Продолжительность;// * СтрокаТабличнойЧасти.Количество;
		КонецЦикла;
	Иначе 
		ВремяОкончания = ВремяОкончания + ДельтаВремени;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПродолжительностьПродолжительностьПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПересчетВремениОкончания(,мВестиУчетДлительностиРабот);	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	Объект.ДатаОкончания = НачалоДня(Объект.ДатаОкончания) + ОбщегоНазначенияКлиент.ВремяВСекунды(ВремяОкончания);
		
	Если мВестиУчетДлительностиРабот и Объект.Работы.Количество() = 1 Тогда
		Объект.Работы[0].Продолжительность = Дата(1,1,1) + (ВремяОкончания - ВремяНачала)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВремяОкончания = ВремяОкончания + 60 * Направление;
	ДатаОкончанияВремяПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ЗаполнитьДокументНастройкамиСотрудникаПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент, ПриОткрытии = Ложь)
	
	ОбновитьНадписьДолгаКлиента();

	Если Не ПриОткрытии Тогда
		ПодсветитьКнопкуПересчетаСкидки();
	КонецЕсли;
	//КлиентПриИзмененииПередОбновлениемСтоимости();
	ОбновитьСтоимостьДокумента();
	
	РаботаСДокументамиСервер.ЗаполнитьУчастникаИИННДенежнойОперации(Объект.Клиент, Объект.ПринятоОт, Объект.ПринятоОтИНН, Объект.ПринятоОтАдрес);
	
	РаботаСФормамиКлиент.ОказаниеУслугКлиентПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)

	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора, мИспользоватьАвтоПодборКлиентовПоКоду);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСФормамиКлиент.ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора, мИспользоватьАвтоПодборКлиентовПоКоду);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДолгНажатие(Элемент)
	
	ОбновитьНадписьДолгаКлиента();

КонецПроцедуры

&НаКлиенте
Процедура РучнаяКорректировкаМатериаловПриИзменении(Элемент)
	
	НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект, мАвтоматическиЗаполнятьМатериалы);
	
	Если РаботаСФормамиКлиентСервер.ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Тогда // 8.3.23 и выше.
		РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма, Истина); // Обход проблемы 8.3.23+ по сбросу основной команды документа от изменения Материалы.ИзменятьСоставСтрок.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуДокумента()
	
	РаботаСДокументамиКлиентСервер.РасчитатьСуммуДокументаОказанияУслуг(Объект);
	
	РаботаСФормамиКлиент.ВывестиЗаголовкиСкидокДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВремениОкончания()
	
	Если мВестиУчетДлительностиРабот Тогда
		Элементы.ДатаОкончанияВремя.ТолькоПросмотр = (Объект.Работы.Количество()<>1);
	Иначе
		Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	АвтоЗаполнениеПоляСертификатОплаты();
	АвтоЗаполнениеПоляЭквайринговыйТерминал();	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОплатуПоСуммеДокумента(Объект, мУчетнаяПолитика, СуммаОплаты, ОплаченоБезналичным, НСПК_СпособОплаты)
	
	Если Объект.Оплата.Количество()<2 Тогда
		Если Объект.Оплата.Количество() = 0 Тогда
			СтрокаОплаты = Объект.Оплата.Добавить();
			СтрокаОплаты.ВидОплаты = мУчетнаяПолитика.ОсновнойВидОплаты;
			Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Сертификатом") Тогда
				СтрокаОплаты.Сертификат = Объект.Сертификат;
			КонецЕсли;
		Иначе 
			СтрокаОплаты = Объект.Оплата[0];
		КонецЕсли;
		
		Если Не Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты) Тогда
			Возврат; // Оплату НСПК не трогаем.
		КонецЕсли;
		
		Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Сертификатом") Тогда
			
			Если ЗначениеЗаполнено(СтрокаОплаты.Сертификат) Тогда
				ОстатокПоСертификату = СертификатыКлиентов.ПолучитьОстатокПоСертификату(СтрокаОплаты.Сертификат, ?(ЗначениеЗаполнено(Объект.Ссылка),ПолучитьМоментВремени(Объект.Ссылка, Объект.Дата), Объект.Дата));
				СтрокаОплаты.Сумма = Мин(Объект.СуммаДокумента, ОстатокПоСертификату);
			Иначе
				СтрокаОплаты.Сумма = Объект.СуммаДокумента;
			КонецЕсли;
			
		ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными") Тогда
			Если Объект.Сдача = 0 Тогда
				СтрокаОплаты.Сумма = Объект.СуммаДокумента;
				Объект.ПолученоНаличными  = СтрокаОплаты.Сумма;
			КонецЕсли;
		Иначе
			СтрокаОплаты.Сумма = Объект.СуммаДокумента;
		КонецЕсли;
		
		// Автоподстановка эквайирнгового терминала.
		Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные") Тогда
			
			ОплаченоБезналичным = СтрокаОплаты.Сумма;
			
			Если Не ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
				РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
				СтрокаОплаты.ЭквайринговыйТерминал = РаботаСТорговымОборудованием.ПолучитьЭквайринговыйТерминал(РабочееМесто, Объект.Филиал, Объект.Касса);
				ОплаченоБезналичным = СтрокаОплаты.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Отказ = Ложь;
		СуммаОплаты = ПолучитьИтогОплаты(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора_ДобавитьПроданныеЭтимДокументом(ПараметрыВыбораСертификата)
	
	СертификатыДокумента = Новый Массив;
	Для Каждого СтрокаСертификат Из Объект.Сертификаты Цикл
		СертификатыДокумента.Добавить(СтрокаСертификат.Сертификат);	
	КонецЦикла;
	ПараметрыВыбораСертификата.Добавить(Новый ПараметрВыбора("СертификатыДокумента", СертификатыДокумента));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеСертификатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьСтоимостьДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПослеУдаления(Элемент)
	
	ОбновитьСтоимостьДокумента();
	ОбновлениеОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатАвтоПодбор(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		ПараметрыВыбораЗначения = Новый Массив;
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаУслуги", Ложь));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаОплату", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("СертификатыТолькоВладельца", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ВладелецСертификата", Объект.Клиент));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ПроданныеСертификаты", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("Дата", Объект.Дата));
		
		СертификатНачалоВыбора_ДобавитьПроданныеЭтимДокументом(ПараметрыВыбораЗначения);
		
		Элементы.Сертификат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначения);
	Иначе
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,НСтр("ru='Нельзя выбрать сертификат, т.к. не указан клиент!'"), 10);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатПриИзменении(Элемент)
	ОбновитьНадписьОстатокСертификата();
КонецПроцедуры

&НаКлиенте
Процедура СертификатОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьНадписьОстатокСертификата();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступностьПолейПоТипуСертификата(Сертификат)

	Запись = Новый Структура;
	Запись.Вставить("ПополнениеСертификатовНоменклатура", Истина);
	Запись.Вставить("ПополнениеСертификатовКоличество", Истина);
	
	Если Сертификат.ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги Тогда
		Запись.ПополнениеСертификатовКоличество = Ложь;
		Если Сертификат.ВидСертификата.КомплексныйСертификат Тогда
			Запись.ПополнениеСертификатовНоменклатура = Ложь;
		КонецЕсли;
	КонецЕсли;
			
	Возврат Запись;

КонецФункции

&НаКлиенте
Процедура РаботыСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		ПараметрыВыбораЗначения = Новый Массив;
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаУслуги", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаОплату", Ложь));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("СертификатыТолькоВладельца", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ВладелецСертификата", Объект.Клиент));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ПроданныеСертификаты", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("Дата", Объект.Дата));
		
		СертификатНачалоВыбора_ДобавитьПроданныеЭтимДокументом(ПараметрыВыбораЗначения);
		
		Элементы.РаботыСертификат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначения);
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Нельзя выбрать сертификат, т.к. не указан клиент!'"), 10);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСертификатПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И
		Не СертификатыКлиентов.НоменклатураВходитВОграничениеСертификата(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Сертификат) 
	Тогда
		ПредупреждениеНоменклатураНеВходитВСертификат(ТекущаяСтрока);
		ТекущаяСтрока.Сертификат = Неопределено;
		Возврат;
	КонецЕсли;
	
	ОбработкаРеквизитаУпр("Работы.Сертификат",ТекущаяСтрока,ЭтаФорма);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Сертификат) Тогда
		ТекущаяСтрока.Цена = 0;
		ТекущаяСтрока.Сумма = 0;
	Иначе
		РаботыРаботаПриИзменении(Неопределено);
	КонецЕсли;
	
	ЗаблокироватьПоляЕслиРаботаПоАбонементу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатПриИзменении(Элемент)
	
	Сертификат = Элементы.ТабличноеПолеОплата.ТекущиеДанные.Сертификат;
	ПроверитьНаВхождениеСертификатаВОграничениеПоДнямНедели(Сертификат);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораЗначения = Новый Массив;
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаУслуги", Ложь));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаОплату", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("СертификатыТолькоВладельца", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ВладелецСертификата", Объект.Клиент));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ПроданныеСертификаты", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("Дата", Объект.Дата));
	
	СертификатНачалоВыбора_ДобавитьПроданныеЭтимДокументом(ПараметрыВыбораЗначения);
	
	Элементы.ОплатаСертификат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначения);

КонецПроцедуры

&НаКлиенте
Процедура СертификатыСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту") Тогда
		
		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
			ПараметрыВыбораЗначения = Новый Структура;
			ПараметрыВыбораЗначения.Вставить("НаУслуги", Истина);
			ПараметрыВыбораЗначения.Вставить("НаОплату", Истина);
			ПараметрыВыбораЗначения.Вставить("СертификатыТолькоВладельца", Истина);
			ПараметрыВыбораЗначения.Вставить("ВладелецСертификата", Объект.Клиент);
			ПараметрыВыбораЗначения.Вставить("ПроданныеСертификаты", Истина);
			ПараметрыВыбораЗначения.Вставить("Дата", Объект.Дата);
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Сертификаты.Форма.ФормаСпискаРасширеннаяУпр", ПараметрыВыбораЗначения, Элемент, Объект.Ссылка);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru='Нельзя выбрать сертификат, т.к. не указан клиент!'"), 10);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
		ПараметрыВыбораЗначения = Новый Массив;
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаУслуги", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаОплату", Истина));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("СертификатыТолькоВладельца", Ложь));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ПроданныеСертификаты", Ложь));
		ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("Дата", Объект.Дата));
		
		Элементы.СертификатыСертификат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаВхождениеСертификатаВОграничениеПоДнямНедели(Сертификат)
	
	Если НЕ СертификатыКлиентов.ПроверитьНаВхождениеСертификатаВОграничениеПоДнямНедели(Сертификат,Объект.Дата) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выбранный вид сертификата не предназначен для данного времени суток или дня недели'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуЗаполненияДокументаДляНовогоФилиала()
	
	ДополнительныеПараметры = Новый Структура;
	
	СтруктураНастроек = ПолучитьСтруктуруНастроекСкладов(Объект.Сотрудник, Объект.Филиал);
	СкладМатериаловСотрудникаНовогоФилиала = СтруктураНастроек.СкладМатериалов;
	СкладТоваровСотрудникаНовогоФилиала = СтруктураНастроек.Склад;
	ДополнительныеПараметры.Вставить("СкладМатериаловСотрудникаНовогоФилиала", СкладМатериаловСотрудникаНовогоФилиала);
	ДополнительныеПараметры.Вставить("СкладТоваровСотрудникаНовогоФилиала", СкладТоваровСотрудникаНовогоФилиала);
	
	ПрейскурантНовогоФилиала = УправлениеНастройками.ПолучитьПрейскурантФилиала(Объект.Филиал);
	ДополнительныеПараметры.Вставить("ПрейскурантНовогоФилиала", ПрейскурантНовогоФилиала);
	
	ПроверитьПрейскурантФилиала(ДополнительныеПараметры);
	ПроверитьСкладыСотрудника(ДополнительныеПараметры);
	
	АвтозаполнениеПоляЭквайринговыйТерминал(Ложь, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПрейскурантФилиала(ДополнительныеПараметры)
	
	ПрейскурантНовогоФилиала = ДополнительныеПараметры.ПрейскурантНовогоФилиала;
	
	Если ЗначениеЗаполнено(ПрейскурантНовогоФилиала)
		И ПрейскурантНовогоФилиала <> Объект.Прейскурант
	Тогда
		Если ЕстьСтрокиПродаж(Ложь) Тогда
		    СписокКнопокВопроса = Новый СписокЗначений;
			СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Да);
		    СписокКнопокВопроса.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Да и обновить цены'"));
			СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Нет);
			
			Оповещение = Новый ОписаниеОповещения("УстановитьПрейскурантФилиала", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, 
				НСтр("ru='Основной прейскурант выбранного филиала отличается от текущего.
				|Изменить прейскурант?'"),
				СписокКнопокВопроса,
				60,
				КодВозвратаДиалога.ОК,
				НСтр("ru='Прейскурант из выбранного филиала'"),
				КодВозвратаДиалога.Нет);
		Иначе
			Объект.Прейскурант = ПрейскурантНовогоФилиала;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПрейскурантФилиала(РезультатВопроса, ДополнительныеПараметры) Экспорт
			
	Объект.Прейскурант = ДополнительныеПараметры.ПрейскурантНовогоФилиала;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОбновитьЦеныДиалог(Ложь);
		РаботаСФормамиКлиент.УстановитьПараметрПрейскурантПодбора(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСкладыСотрудника(ДополнительныеПараметры)
	
	СкладМатериаловСотрудникаНовогоФилиала = ДополнительныеПараметры.СкладМатериаловСотрудникаНовогоФилиала;
	СкладТоваровСотрудникаНовогоФилиала = ДополнительныеПараметры.СкладТоваровСотрудникаНовогоФилиала;
	
	Если (ЗначениеЗаполнено(СкладМатериаловСотрудникаНовогоФилиала)
			И СкладМатериаловСотрудникаНовогоФилиала <> Объект.СкладМатериалов
			И Объект.Материалы.Количество() > 0)
		ИЛИ (ЗначениеЗаполнено(СкладТоваровСотрудникаНовогоФилиала)
			И СкладТоваровСотрудникаНовогоФилиала <> Объект.Склад
			И Объект.Товары.Количество() > 0)
	Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСкладыСотрудника", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, 
			НСтр("ru='Склады сотрудника для выбранного филиала отличаются от текущих.
				|Изменить склады?'"),
			РежимДиалогаВопрос.ДаНет,
			60,
			КодВозвратаДиалога.Да,
			НСтр("ru='Склады из настроек сотрудника для выбранного филиала'"),
			КодВозвратаДиалога.Нет);
	Иначе
		УстановитьСкладыСотрудника(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСкладыСотрудника(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СкладМатериаловСотрудникаНовогоФилиала = ДополнительныеПараметры.СкладМатериаловСотрудникаНовогоФилиала;
	СкладТоваровСотрудникаНовогоФилиала = ДополнительныеПараметры.СкладТоваровСотрудникаНовогоФилиала;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СкладМатериалов = СкладМатериаловСотрудникаНовогоФилиала;
		Объект.Склад = СкладТоваровСотрудникаНовогоФилиала;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрейскурантПриИзменении(Элемент)
	
	ОбновитьЦеныДиалог();
	
	РаботаСФормамиКлиент.УстановитьПараметрПрейскурантПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	АвтозаполнениеПоляЭквайринговыйТерминал(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоБезналичнымПриИзменении(Элемент)
	
	мБылаРучнаяПравкаОплаты = Истина;
	ВидОплатыБезнал = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные");
	СтрокиБезнал = Оплата_СтрокиОплатыБезналом();
	Если СтрокиБезнал.Количество() <> 0 Тогда
		СтрокаБезнал = СтрокиБезнал[0];
		Если ОплаченоБезналичным = 0 Тогда 
			Объект.Оплата.Удалить(Объект.Оплата.Индекс(СтрокаБезнал));
		Иначе
			СтрокаБезнал.Сумма = ОплаченоБезналичным;
		КонецЕсли;
	Иначе
		Если ОплаченоБезналичным <> 0 Тогда
			СтрокаБезнал = Объект.Оплата.Добавить();
			СтрокаБезнал.Сумма = ОплаченоБезналичным;
			СтрокаБезнал.ВидОплаты = ВидОплатыБезнал;
			СтрокаБезнал.ЭквайринговыйТерминал = ЭквайринговыйТерминалНаФорме;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект);
	РаботаСФормамиКлиент.ОплатаПриОкончанииРедактирования(ЭтаФорма,Неопределено, Неопределено, Неопределено);
	ОбнулениеОплатыНаличными();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоБезналичнымОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОплаченоДругимиСпособами = 0;
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные")
			И Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты)
		Тогда
			Продолжить;
		КонецЕсли;
		ОплаченоДругимиСпособами = ОплаченоДругимиСпособами + СтрокаОплаты.Сумма;
	КонецЦикла;
	ОплаченоБезналичным = Объект.СуммаДокумента - ОплаченоДругимиСпособами;
	ОплаченоБезналичнымПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоБезналичнымНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПеренестиРеальнуюОплатуНаВид(ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные"));
КонецПроцедуры

&НаКлиенте
Процедура ПолученоНаличнымиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПеренестиРеальнуюОплатуНаВид(ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными"));
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРеальнуюОплатуНаВид(ВидОплаты)
	
	НуженБезнал = ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные");
	
	ИзымаемыйВид = ?(НуженБезнал, ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными"), ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные"));
	ИзымаемаяСтрока = Неопределено;
	ЦелеваяСтрокаОплаты = Неопределено;
	
	СуммаПрочие = 0;
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		
		Если Не Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты) Тогда
			СуммаПрочие = СуммаПрочие + СтрокаОплаты.Сумма;
			
		ИначеЕсли СтрокаОплаты.ВидОплаты = ИзымаемыйВид Тогда
			ИзымаемаяСтрока = СтрокаОплаты;
		ИначеЕсли СтрокаОплаты.ВидОплаты = ВидОплаты Тогда
			ЦелеваяСтрокаОплаты = СтрокаОплаты;
		Иначе
			СуммаПрочие = СуммаПрочие + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзымаемаяСтрока <> Неопределено Тогда
		Объект.Оплата.Удалить(ИзымаемаяСтрока);
	КонецЕсли;
	
	СуммаДляОплаты = 0;
	Если СуммаПрочие < Объект.СуммаДокумента Тогда
		СуммаДляОплаты = Объект.СуммаДокумента - СуммаПрочие;
		Если ЦелеваяСтрокаОплаты = Неопределено Тогда
			ЦелеваяСтрокаОплаты = Объект.Оплата.Добавить();
			ЦелеваяСтрокаОплаты.ВидОплаты = ВидОплаты;
			Если НуженБезнал Тогда
				ЦелеваяСтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминалНаФорме;
			КонецЕсли;
		КонецЕсли;
		ЦелеваяСтрокаОплаты.Сумма = СуммаДляОплаты;
	КонецЕсли;
	
	Если НуженБезнал Тогда
		Объект.ПолученоНаличными = 0;
		ОплаченоБезналичным = СуммаДляОплаты;
	Иначе 
		Объект.ПолученоНаличными = СуммаДляОплаты;
		ОплаченоБезналичным = 0;
	КонецЕсли;
	Объект.Сдача = 0;
	
	ЗаполнитьОплатуПоСуммеДокумента(Объект, мУчетнаяПолитика, СуммаОплаты, ОплаченоБезналичным, НСПК_СпособОплаты);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкваринговыйТерминалПриИзменении(Элемент)
	
	СтрокиБезнал = Оплата_СтрокиОплатыБезналом();
	Если СтрокиБезнал.Количество() <> 0 Тогда
		СтрокиБезнал[0].ЭквайринговыйТерминал = ЭквайринговыйТерминалНаФорме;
	КонецЕсли;
	
	ВидимостьКомандОплатыНСПК(ЭквайринговыйТерминалНаФорме, Элементы.НСПК_ОдобрениеКорзины, Элементы.НСПК_ОтправитьПодтверждение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкваринговыйТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.НомерЧекаЭТ)
		И ЗначениеЗаполнено(ЭквайринговыйТерминалНаФорме)
	Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя изменять эквайринговый терминал, если уже пробит чек'"));
		Возврат; // Запретим изменять эквайринговые терминалы если уже пробит чек.	
	КонецЕсли;
	
	ПараметрыВыбораЗначения = ПараметрыВыбораЭТ(ЭквайринговыйТерминалНаФорме);
	Если ПараметрыВыбораЗначения <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ЭкваринговыйТерминалПослеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.ФормаВыбора", ПараметрыВыбораЗначения,,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкваринговыйТерминалПослеВыбора(ЭТ, ДополнительныеПараметры) Экспорт
	
	Если ЭТ <> Неопределено Тогда
		ЭквайринговыйТерминалНаФорме = ЭТ;
		ЭкваринговыйТерминалПриИзменении(Элементы.ЭкваринговыйТерминал);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьКомандОплатыНСПК(ЭквайринговыйТерминалНаФорме, Элементы_НСПК_ОдобрениеКорзины, Элементы_НСПК_ОтправитьПодтверждение)
	
	// Видимость команд работы с НСПК по терминалу.
	ЕстьСпособОплатыНСПК = ЗначениеЗаполнено(ЭквайринговыйТерминалНаФорме)
						 И РаботаСДокументамиСервер.СпособыОплатыЭСНСПКЭквайринговогоТерминала(ЭквайринговыйТерминалНаФорме).Количество() <> 0;
						 
	Элементы_НСПК_ОдобрениеКорзины.Видимость = ЕстьСпособОплатыНСПК;
	Элементы_НСПК_ОтправитьПодтверждение.Видимость = ЕстьСпособОплатыНСПК;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбнулениеОплатыНаличными()
	
	Если Объект.ПолученоНаличными = Объект.Сдача И СдачаИлиДепозит = 1 Тогда
		ПолученоНаличнымиОткрытие(Объект.ПолученоНаличными, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦены(Команда)
	ОбновитьЦеныДиалог(,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныДиалог(Спрашивать = Истина, ПересчитываемаяНоменклатура = Неопределено, ПересчитыватьПозицииПоПолису = Ложь)
		
	мсНазванияТЧ = Новый Массив;
	мсНазванияТЧ.Добавить("Работы");
	мсНазванияТЧ.Добавить("Материалы");
	мсНазванияТЧ.Добавить("Товары");
	мсНазванияТЧ.Добавить("Сертификаты");
	мсНазванияТЧ.Добавить("ПополнениеСертификатов");
	
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		
		ЕстьПродажиНеПоПолису = Ложь;
		
		Для Каждого ИмяТЧ Из мсНазванияТЧ Цикл
			Для Каждого СтрТЧ Из Объект[ИмяТЧ] Цикл
				Если СтрТЧ.НеОплачиваетсяПолисом Тогда
					ЕстьПродажиНеПоПолису = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьПродажиНеПоПолису Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьПродажиНеПоПолису = Истина;
	КонецЕсли;
	
	Если (ЕстьПродажиНеПоПолису Или ПересчитыватьПозицииПоПолису)
		И (Не Спрашивать Или Вопрос(НСтр("ru='Обновить цены документа?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да)
	Тогда
		
		// Без "ПополнениеСертификатов", т.к. не имеет цены.
		мсНазванияТЧ.Удалить(4);
		
		ПозицииДокумента = Новый Массив;
		ПозицииДокументаПоПолису = Новый Массив;
		Для Каждого ТабЧасть Из мсНазванияТЧ Цикл
			Для Каждого ТекСтрока Из Объект[ТабЧасть] Цикл
				
				Если ТабЧасть = "Работы" И ЗначениеЗаполнено(ТекСтрока.Сертификат) Тогда Продолжить; КонецЕсли; // Не обновляем цены в строках услуг по сертификату.
				
				СтрокаПозиции = Новый Структура("ТабЧасть, НомерСтроки, Номенклатура, Характеристика, ЕдиницаИзмерения");
				СтрокаПозиции.Номенклатура	 	= ?(ТабЧасть = "Сертификаты",ТекСтрока.Сертификат,ТекСтрока.Номенклатура);
				СтрокаПозиции.Характеристика	= ?(ТабЧасть = "Сертификаты",Неопределено,ТекСтрока.ХарактеристикаНоменклатуры);
				СтрокаПозиции.ЕдиницаИзмерения	= ?(ТабЧасть = "Материалы" Или ТабЧасть = "Товары",
													ТекСтрока.ЕдиницаИзмерения,
													Неопределено);
				СтрокаПозиции.ТабЧасть		 = ТабЧасть;
				СтрокаПозиции.НомерСтроки	 = ТекСтрока.НомерСтроки;
				
				Если ПересчитываемаяНоменклатура = Неопределено
					Или ПересчитываемаяНоменклатура.Найти(СтрокаПозиции.Номенклатура) <> Неопределено
				Тогда
					Если Не ЗначениеЗаполнено(Объект.Документ)
						Или ТекСтрока.НеОплачиваетсяПолисом
					Тогда
						ПозицииДокумента.Добавить(СтрокаПозиции);
					Иначе
						ПозицииДокументаПоПолису.Добавить(СтрокаПозиции);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если (ПозицииДокумента.Количество() + ПозицииДокументаПоПолису.Количество()) <> 0 Тогда
			
			Если ПозицииДокумента.Количество() <> 0 Тогда
				ЦеныСтрокДокумента = ПолучитьЦеныПозицийДокумента(ПозицииДокумента, Объект.Прейскурант, Объект.Дата, Объект);
				ПроставитьЦеныВДокументе(ЦеныСтрокДокумента);
			КонецЕсли;
			
			Если ПозицииДокументаПоПолису.Количество() <> 0 Тогда
				
				ВидПолиса = ДопСерверныеФункции.ПолучитьРеквизит(Объект.Документ, "ВидПолиса");
				ПрейскурантПолиса = ДопСерверныеФункции.ПолучитьРеквизит(ВидПолиса, "Прейскурант");
				Если Не ЗначениеЗаполнено(ПрейскурантПолиса) Тогда
					ПрейскурантПолиса = Объект.Прейскурант;
				КонецЕсли;
				
				ЦеныСтрокДокумента = ПолучитьЦеныПозицийДокумента(ПозицииДокументаПоПолису, ПрейскурантПолиса, Объект.Дата, Объект);
				ПроставитьЦеныВДокументе(ЦеныСтрокДокумента);
			КонецЕсли;
				
			// Если есть материалы и не ручное редактирование, перезаполняем их, обновляя цены с учетом вхождения в цену услуг.
			Если Объект.Материалы.Количество() > 0 Тогда
				Если Объект.РучнаяКорректировкаМатериалов Тогда
					ОбъектКопия = Объект;
					ОчиститьЦеныПоВхождениюМатериаловВСтоимостьУслуг(ОбъектКопия);
					КопироватьДанныеФормы(ОбъектКопия.Материалы, Объект.Материалы);
				Иначе
					ЗаполнитьМатериалыПоНормамРабот();
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьСтоимостьДокумента();
			ОбновлениеОтображения();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСФормамиКлиент.ОказаниеУслугОбновитьЦеныДиалог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьЦеныВДокументе(ЦеныСтрокДокумента)
	
	Для Каждого ЦенаСтроки Из ЦеныСтрокДокумента Цикл
		
		СтрокаДокумента = Объект[ЦенаСтроки.ТабЧасть][ЦенаСтроки.НомерСтроки-1];
		
		Если ЦенаСтроки.ТабЧасть = "Сертификаты" Тогда
			СтрокаДокумента.Сумма = ЦенаСтроки.Цена;
		Иначе
			СтрокаДокумента.Цена = ЦенаСтроки.Цена;
			ОбработкаРеквизитаУпр(ЦенаСтроки.ТабЧасть+".Цена",СтрокаДокумента,ЭтаФорма);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьЦеныПозицийДокумента(ПозицииДокумента, Прейскурант, Дата, Знач Объект)
	
	ЦеныСтрокДокумента = Новый Массив; 
	
	Для Каждого ПозицияДокумента Из ПозицииДокумента Цикл
		
		ЦенаСтроки = Новый Структура("ТабЧасть, НомерСтроки, Цена");
		ЗаполнитьЗначенияСвойств(ЦенаСтроки, ПозицияДокумента);
		
		Если ТипЗнч(ПозицияДокумента.Номенклатура) = Тип("СправочникСсылка.Сертификаты") Тогда
			ЦенаСтроки.Цена = ПолучитьЦенуВидаСертификата(Прейскурант,ПозицияДокумента.Номенклатура,Дата);
		Иначе
			ЦенаСтроки.Цена = РаботаСДокументамиСервер.ПолучитьЦену(Объект,
																	Прейскурант, 
																	ПозицияДокумента.Номенклатура,
																	Дата,
																	ПозицияДокумента.Характеристика,
																	ПозицияДокумента.ЕдиницаИзмерения).Цена;
		КонецЕсли;
		
		ЦеныСтрокДокумента.Добавить(ЦенаСтроки);
		
	КонецЦикла;
	
	Возврат ЦеныСтрокДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуВидаСертификата(Прейскурант,Сертификат,Дата)
	
	ВидСертификата = Сертификат.ВидСертификата;
	Цена = Ценообразование.ПолучитьЦену(Прейскурант,ВидСертификата, Дата).Цена;
	
	Если Цена = 0 
		И ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаОплату
	Тогда 
		Цена = ВидСертификата.Номинал;
	КонецЕсли;

	Возврат Цена;			
	
КонецФункции

&НаКлиенте
Процедура Оплата_СуммаОплатыЧерезНСПК_ПриИзменении(Сумма)
		
	СтрокаОплаты = НСПК_СтрокаОплаты();
	Если Сумма = 0 Тогда
		// Удаление оплаты по НСПК
		Если СтрокаОплаты <> Неопределено Тогда
			Объект.Оплата.Удалить(СтрокаОплаты);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК) Тогда
			УдалитьИнформациюОСоставеКорзины(Объект.ИдентификаторКорзиныНСПК);
			Объект.ИдентификаторКорзиныНСПК = Неопределено;
		КонецЕсли;
	Иначе
		Если СтрокаОплаты = Неопределено Тогда
			СтрокаОплаты = Объект.Оплата.Добавить();
			СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные");
			СтрокаОплаты.ЭквайринговыйТерминал = НСПК_СпособОплаты;
		КонецЕсли;
		
		Если СтрокаОплаты.Сумма <> Сумма Тогда
			СтрокаОплаты.Сумма = Сумма;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект);
	РаботаСФормамиКлиент.ОплатаПриОкончанииРедактирования(ЭтаФорма,Неопределено, Неопределено, Неопределено);
	ОбнулениеОплатыНаличными();
	
КонецПроцедуры

&НаКлиенте
Функция НСПК_СтрокаОплаты()
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если СтрокаОплаты.ЭквайринговыйТерминал = НСПК_СпособОплаты И ЗначениеЗаполнено(НСПК_СпособОплаты) Тогда
			Возврат СтрокаОплаты;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция НСПК_СпособыОплатыНСПК()
	
	ЭТ = ЭквайринговыйТерминалНаФорме;
	Если Не ЗначениеЗаполнено(ЭТ) Тогда
		СтрокиОплаты = Оплата_СтрокиОплатыБезналом();
		Если СтрокиОплаты.Количество() <> 0 Тогда
			ЭТ = СтрокиОплаты[0].ЭквайринговыйТерминал;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭТ) Тогда
		Возврат НСПК_СпособыОплатыНСПК_ПоЭквайрингу(ЭТ);
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция НСПК_СпособыОплатыНСПК_ПоЭквайрингу(ЭквайринговыйТерминал)
	
	Если ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.Эквайринг Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	И ЭквайринговыеТерминалы.ЭквайрингНСПК = &ЭквайринговыйТерминал
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И ЭквайринговыеТерминалы.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыСпособовОплат.СертификатНСПК)"
		;
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Оплата_ЭтоОбычныйБезнал(СтрокаОплаты)
	
	Возврат	  СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные")
			И Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты)

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты)
	
	Возврат НСПК_СпособОплаты.Пустая() Или СтрокаОплаты.ЭквайринговыйТерминал <> НСПК_СпособОплаты;
	
КонецФункции
		
&НаКлиенте
Функция Оплата_СтрокиОплатыБезналом()
	
	СтрокиОплаты = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если Оплата_ЭтоОбычныйБезнал(СтрокаОплаты) Тогда
			СтрокиОплаты.Добавить(СтрокаОплаты)
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокиОплаты;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Элементы.ТоварыАртикул.Видимость	= мУчетнаяПолитика.ПоказыватьАртикул;
	Элементы.МатериалыАртикул.Видимость = мУчетнаяПолитика.ПоказыватьАртикул;
	
	// Параметры "Оборудование" и ЗначенияЗаполнения {Структура}.
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьНовыйДокументПоПараметрамЗаполнения();
		ЗаполнитьКлючиТабличныхЧастей();
	КонецЕсли;
	
	Если Объект.СдачуВДепозит Тогда
		СдачаИлиДепозит = 2;
	Иначе
		СдачаИлиДепозит = 1;
	КонецЕсли;
	
	РаботаСФормамиСервер.НастройкаПодбораПриСоздании(ЭтотОбъект, Истина);
	Если РаботаСФормамиКлиентСервер.ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Тогда
		НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоКомплексномуРасчету();
	
	Если Не ЗначениеЗаполнено(Объект.Сдача) Тогда
		Объект.Сдача = 0;
	КонецЕсли;	
	
	Если мУчетнаяПолитика.ПоказыватьСопутствующиеТовары Тогда
		ЗаполнитьСопутствующиеТовары(СопутствующиеТовары, Объект.Работы, Объект.Товары);
	Иначе
		Элементы.Сопутствующие_Товары.Видимость = Ложь;
	КонецЕсли;
	УсловноеОформлениеДереваСкидок();
		
	// Вид операции.
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;
	КонецЕсли;
	
	// Заполнение структуры параметров для передачи с сервера на клиент.
	СтруктураПараметров = РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтотОбъект, Ложь);
	
	СтруктураПараметров.Вставить("Номенклатура", Параметры.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", Параметры.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", Параметры.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Единица", Параметры.Единица);
	СтруктураПараметров.Вставить("АвтоПробитиеЧека", Параметры.Свойство("АвтоПробитиеЧека"));
	
	РаботаСКлиентамиПереопределяемый.ОказаниеУслугПриСозданииНаСервере(Объект,СтруктураПараметров,Параметры);

	Если Объект.Ссылка.Пустая() И
		 Не Параметры.НеПроверятьПовторОУпоЗаявке И
		 ЗначениеЗаполнено(Объект.ДокументОснование) И
		 ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Заявка") И 
		 Не (РаботаСКлиентамиПереопределяемый.ЕстьФункционалГрупповойЗаписи() И РаботаСКлиентамиПереопределяемый.ЭтоГрупповаяЗаявка(Объект.ДокументОснование))
	Тогда
		ДругиеОУЗаявки = КалендарьПланирования.ПолучитьОказаниеУслугЗаявки(Объект.ДокументОснование);
		Если ЗначениеЗаполнено(ДругиеОУЗаявки) Тогда
			СтруктураПараметров.Вставить("ЕстьДругиеОУЗаявки", Истина);
		КонецЕсли;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту
			И ЗначениеЗаполнено(Объект.ДокументОснование)
		Тогда
			// Это возврат от клиента
			Документы.ОказаниеУслуг.ЗаполнитьНаОснованииОУ(Объект);
			СтруктураПараметров.Вставить("ЭтоНовыйВозвратНаОснованииПродажи", Истина);
			Если мУчетнаяПолитика.ПоУмолчаниюРучноеРедактированиеСкидок Тогда
				Объект.РучноеРедактированиеСкидок = Истина;	
				Элементы.РучноеРедактированиеСкидок.Доступность = Ложь;
			КонецЕсли; 
		Иначе
			// Это продажа клиенту
			Объект.РучноеРедактированиеСкидок = мУчетнаяПолитика.ПоУмолчаниюРучноеРедактированиеСкидок;
			
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				ЗаполнитьДокументНастройкамиСотрудникаПоУмолчаниюСервер();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНадписьОстатокСертификатаСервер();
	
	РаботаСДокументамиКлиентСервер.РасчитатьСуммуДокументаОказанияУслуг(Объект);
	РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект);
	РаботаСДокументамиКлиентСервер.ВывестиЗаголовокСуммаОплатыДокумента(ЭтаФорма);	
	ОбновитьПредставлениеРаботМатериалов();
	КонвертироватьСкидкиВДерево(Объект.Скидки, ДеревоСкидки);
	
	РаботаСФормамиКлиентСервер.ПолучитьОписаниеВзаиморасчетов(Объект.Клиент,, ЭтаФорма);

	УстановитьПодменюВыбораТипаОперации();
	
	НастроитьВидимостьТаблицыПополненияСертификата();
	ОпределитьВидимостьКолонокПополненияСертификата();
	РаботаСФормамиСервер.УстановитьВидимостьКнопокЗагрузитьИзТСД(Элементы.ТоварыЗагрузитьДанныеИзТСД, Элементы.МатериалыЗагрузитьДанныеИзТСДМатериалы);
	
	Элементы.РаботыСотрудник.Видимость	= мУчетнаяПолитика.ИспользоватьНесколькоСотрудниковВДокументах;
	
	Элементы.ПерезаполнитьОплачиваетсяПоПолису.Видимость = ЗначениеЗаполнено(Объект.Документ);
	Если Элементы.Найти("СтраховыеПолисыОткрытьПараметрыРеестра") <> Неопределено Тогда
		Элементы.СтраховыеПолисыОткрытьПараметрыРеестра.Видимость = ЗначениеЗаполнено(Объект.Документ) И Объект.Документ.ВидПолиса.РеестрТребуетМедицинскихПараметров;
	КонецЕсли;
	
	Элементы.РаботыРучнаяКорректировкаМатериалов.Видимость = Не Объект.РучнаяКорректировкаМатериалов И ЕстьСтрокиРаботРучногоВводаМатериалов(Объект.Работы);
	
	Элементы.СсылочныйНомер.ТолькоПросмотр = Объект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;
	Элементы.НомерКарты.ТолькоПросмотр = Объект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;
	
	ОбновитьВидимостьНомеровЧековНаСервере(Элементы.ГруппаНомераЧеков, Элементы.НомерЧекаККМ, Элементы.НомерЧекаЭТ, Объект.НомерЧекаККМ, Объект.НомерЧекаЭТ);
	
	ПерезаполнитьКешПоТрудовымРолям();
	
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Объект.Филиал, Истина);
	Если Объект.Ссылка.Пустая() Тогда
		СпособРасчетаЧекаККМ = ЗаполнитьДепозитнуюОперациюККМ(НастройкаПечатиЧеков);
		Если ЗначениеЗаполнено(СпособРасчетаЧекаККМ) Тогда
			Объект.СпособРасчетаЧекаККМ = СпособРасчетаЧекаККМ;
		КонецЕсли;
	КонецЕсли;
	
	// НСПК
	НСПК_ПриСозданииНаСервере();
	
	// Заполнение полей безналичной оплаты на лицевой панели
	ЗаполнитьПоляБезналаНаПанелиИзОплаты(ЭквайринговыйТерминалНаФорме, ОплаченоБезналичным, Объект.Оплата, Объект.Филиал, Объект.Касса, НСПК_СпособОплаты);
	ВидимостьКомандОплатыНСПК(ЭквайринговыйТерминалНаФорме, Элементы.НСПК_ОдобрениеКорзины, Элементы.НСПК_ОтправитьПодтверждение);
	
	// МДЛП. Работа с КМ и ККТ.
	УстановитьУсловноеОформлениеСтатусовКМ();
	ПоместитьРеквизитыККТИзХЗвРеквизитыФормы();
	
	ИспользуетсяПродажаМаркированныхТоваров = мУчетнаяПолитика.ИспользоватьПродажуМаркированныхТоваров;
	Элементы.ОбновитьСтатусыМаркированныхТоваров.Видимость	= ИспользуетсяПродажаМаркированныхТоваров;
	Элементы.ДекорацияСтатусыКМ.Видимость					= ИспользуетсяПродажаМаркированныхТоваров;
	Элементы.ТоварыСтатусКМ.Видимость						= ИспользуетсяПродажаМаркированныхТоваров;
	Элементы.СтатусКМ.Видимость								= ИспользуетсяПродажаМаркированныхТоваров;
	
	// Пересчет скидок, если документ уже заполнен
	Если Объект.Ссылка.Пустая()
		И ЕстьСтрокиПродаж_БезКонтекста(Объект.Работы, Объект.Товары, Объект.Сертификаты, Объект.ПополнениеСертификатов)
		И ЗначениеЗаполнено(Объект.Клиент)
		И Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту")
		И Не Объект.Коррекция
	Тогда
		ПересчитатьСкидкуНаСервереПриСозданииФормы();
	КонецЕсли;
	
	УстановитьВидимость_ПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	
	Если СтруктураПараметров.АвтоПробитиеЧека Тогда
		ПечататьБумажныйЧек = Не ЗначениеЗаполнено(Объект.АдресEmailЧек);
		Чек(Неопределено);
		ЭтотОбъект.Закрыть();	
	КонецЕсли;
	
	Если Не РаботаСДокументамиКлиент.ФормаДокументаПриОткрытии(ЭтотОбъект, СтруктураПараметров) Тогда
		ЭтотОбъект.Закрыть();
		Возврат;
	КонецЕсли;
	
	Если РаботаСФормамиКлиентСервер.ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Тогда // 8.3.23 и выше.
		// Довычисление клиентской переменной.
		мАвтоматическиЗаполнятьМатериалы = мУчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги И мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловОУ И Не Объект.РучнаяКорректировкаМатериалов; // См. НастроитьРежимРедактированияТабличногоПоляМатериалов()
	Иначе // 8.3.21, 8.3.22.
		НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект, мАвтоматическиЗаполнятьМатериалы);
	КонецЕсли;
	
	РаботаСДокументамиКлиент.ОбновитьВидимостьЭлементовКоррекции(ЭтаФорма, Объект.Коррекция);
	
	Если СтруктураПараметров.Свойство("ЕстьДругиеОУЗаявки") Тогда
		Ответ = Вопрос(НСтр("ru='По заявке есть созданные документы оказание услуг. Все равно создать?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			 ЭтаФорма.Закрыть();
			 Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВремяОкончания = Объект.ДатаОкончания;
	
	мВестиУчетДлительностиРабот = СтруктураПараметров.мВестиУчетДлительностиРабот;
	мОсновнойВидОплаты 			= СтруктураПараметров.мОсновнойВидОплаты;
	мВидОплатыСертификатом		= СтруктураПараметров.мВидОплатыСертификатом;
	мТекущаяДатаДокумента		= СтруктураПараметров.мТекущаяДатаДокумента;
	мЕстьПравоИзмененияЦены		= СтруктураПараметров.мЕстьПравоИзмененияЦены;
	мЕстьПравоИзмененияРучныхСкидок	= СтруктураПараметров.мЕстьПравоИзмененияРучныхСкидок;
	мЦветФонаКнопкиПересчитатьСкидку = Новый Цвет(252,238,238);
	
	мБылаРучнаяПравкаОплаты = Ложь;
	мНачатоКопированиеСтрокиРаботыВлияющееНаМатериалы = Ложь;

	РаботаСДокументамиКлиентСервер.ВывестиЗаголовокСуммаОплатыДокумента(ЭтаФорма);
	
	Если Объект.Документ.Пустая() Тогда
		мТекущийВидПолиса = "";
	Иначе
		мТекущийВидПолиса = Истина; // Важно уникальное непустое значение, а не реальная ссылка, поэтому используется не вызов ДопСерверныеФункции.ПолучитьРеквизит(Объект.Документ, "ВидПолиса");.
	КонецЕсли;
	
	// Установим дату входящего документа на текущую
	Если Объект.Ссылка.Пустая() Тогда
		ВхДокДата = ТекущаяДата();
		
		Если Не СтруктураПараметров.Свойство("ЭтоНовыйВозвратНаОснованииПродажи") Тогда
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				ОбновитьСтоимостьДокумента();           
			КонецЕсли;
		КонецЕсли;
	
		Если Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = Объект.ДатаНачала + ОбщегоНазначенияКлиент.ВремяВСекунды(мУчетнаяПолитика.ВремяНачалаРаботы);
			
			ТекДата = ТекущаяДата();
			Если ТекДата - Объект.ДатаНачала > 0 Тогда
				Объект.ДатаНачала = ТекДата;
				КалендарьПланирования.ОкруглитьВремяДоПериодаПланирования(Объект.ДатаНачала);
			КонецЕсли;
			
			КвантПланирования = ОбщегоНазначенияКлиент.ВремяВСекунды(мУчетнаяПолитика.ПериодичностьПланирования);
			Если ОбщегоНазначенияКлиент.ВремяВСекунды(Объект.ДатаНачала)>=КвантПланирования Тогда
				Объект.ДатаНачала = Объект.ДатаНачала - КвантПланирования;
			КонецЕсли;
		КонецЕсли;
		
		Объект.ДатаНачала = НачалоДня(Объект.Дата) + ОбщегоНазначенияКлиент.ВремяВСекунды(Объект.ДатаНачала);
		ВремяНачала = Объект.ДатаНачала;
		
		Если мВестиУчетДлительностиРабот Тогда
			ПересчетВремениОкончания(,мВестиУчетДлительностиРабот);
		Иначе
			РассчетВремениОкончания();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
			КлиентПриИзменении(Неопределено, Истина);
		КонецЕсли;
		
		Объект.НомерЧекаККМ = 0;
		Объект.НомерЧекаЭТ  = "";
	
		Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = Объект.Дата;
			КалендарьПланирования.ОкруглитьВремяДоПериодаПланирования(Объект.ДатаНачала);
		КонецЕсли;
	Иначе
		мБылаРучнаяПравкаОплаты = ЗначениеЗаполнено(Объект.Ссылка) Или Объект.ПолученоНаличными <> 0;
	КонецЕсли;
	
	мИспользоватьАвтоПодборКлиентовПоКоду = мУчетнаяПолитика.ИспользоватьАвтоПодборКлиентовПоКоду;
	
	ВремяНачала = Объект.ДатаНачала;
	
	УстановитьДоступностьВремениОкончания();

	// Настройка видимости карты скидок
	Элементы.КартаКлиента.Видимость = мУчетнаяПолитика.ИспользоватьСкидки И мУчетнаяПолитика.ИспользоватьКартыСкидок;	
		
	Если ПолучитьИтогОплаты(Объект) <> Объект.СуммаДокумента И Не мБылаРучнаяПравкаОплаты И 
		Не мУчетнаяПолитика.НеЗаполнятьОплатуПоСуммеДокументаАвтоматически
	Тогда
		ЗаполнитьОплатуПоСуммеДокумента(Объект, мУчетнаяПолитика, СуммаОплаты, ОплаченоБезналичным, НСПК_СпособОплаты);
	КонецЕсли;
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("ГруппаРаботы", "Работы");
	Страницы.Добавить("ГруппаТовары", "Товары");
	Страницы.Добавить("ГруппаСертификаты", "Сертификаты");
	Страницы.Добавить("ГруппаСертификаты", "ПополнениеСертификатов");
	Страницы.Добавить("ГруппаОплата", "Оплата");
	
	РаботаСДиалогамиКлиент.УстановкаТекущейСтраницы(Объект.Ссылка.Пустая(), Объект, Элементы.Страницы, Страницы,);
	
	Если ДобавленаУслугаПоДаннымЗаполнения Тогда
		РаботыРаботаПриИзмененииТекСтрока(Элементы.Работы.ПодчиненныеЭлементы.РаботыНоменклатура, 0);
		РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,"Работы.Номенклатура",Объект.Работы[0],ЭтаФорма,Неопределено);
	КонецЕсли;
	
	// Заполнение по параметрам номенклатуры
	Если ЗначениеЗаполнено(СтруктураПараметров.Номенклатура) Тогда
		ОбработкаВнесенияНоменклатуры(СтруктураПараметров.Номенклатура, 
									  СтруктураПараметров.ХарактеристикаНоменклатуры, 
									  СтруктураПараметров.Единица, 
									  1,,,,,,,
									  СтруктураПараметров.СерияНоменклатуры);
	КонецЕсли;
	
	ВыключитьИндикациюНуженПересчетСкидки();
	
	Если Истина // ИспользоватьПодключаемоеОборудование Проверка на включенную ФО "Использовать ВО"
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("ТерминалСбораДанных");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);

	КонецЕсли;
	
	ОбновитьСписокРаботДокумента();
	
	РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма);
	РаботаСФормамиКлиент.ВывестиЗаголовкиСкидокДокумента(ЭтаФорма);
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
	мТекущиеИсходныеДанныеДисплеяПокупателя = "";
	ОбновлениеОтображения(Истина);
	УправлениеВидимостьКолонкиНеОплачиваетсяПолисом();
	
	Если ЕстьСтрокиПродаж() Тогда
		Для Каждого ЭлементВерхнегоУровня Из ДеревоСкидки.ПолучитьЭлементы() Цикл
			Элементы.ДеревоСкидки.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьФормыУчастияПослеИзмененияРабот(,,Истина);
	
	ОбновитьВидимостьЭлементовПоЧекамККМ();	
	ОбновитьВидимостьДепозитнойОперацииККМ();
	
	ОбновитьДанныеПоОплатеКомплексногоРасчета();
	
	ОбновитьТекстГиперссылкиЗаявок();
	
	Если Объект.Ссылка.Пустая()
		И мУчетнаяПолитика.АвтозаполнениеНаправившегоВрача
		И ЗначениеЗаполнено(мУчетнаяПолитика.ФормаУчастияДляНаправившегоВрача)
	Тогда 
		ЗаполнитьНаправившихВрачей(Неопределено);
	КонецЕсли;
	
	мПозицииДокументаДляСопутствующих = ПолучитьПозицииДокументаДляСопутствующих();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьИндикациюЧекиПробиты();
	КонецЕсли;
	
	// МДЛП. ФФД 1.2.
	ОбновитьИнформациюОКМ();
	
	// ЭС НСПК
	НСПК_ПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверка необходимости пересчета скидки
	Если Элементы.ПересчитатьСкидки.ЦветФона = мЦветФонаКнопкиПересчитатьСкидку
		И Не Объект.РучноеРедактированиеСкидок
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту")
	Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru='Необходимо пересчитать скидки в документе!
		|Пересчитать?'"), Режим, 0);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПересчитатьСкидкуНаКлиенте(Истина);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru='Скидки не были рассчитаны, проведение невозможно!'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Подсказка о некорректных оплатах полисом
	ПроблемнаяНоменклатура = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		ТекстСообщения = ЕстьНоменклатураПоПолисуНеСоотвествующаяРазрешенной(Объект, ПроблемнаяНоменклатура,мАдресНоменклатураВидаПолиса);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			ТекстСообщения = ТекстСообщения + Символы.ПС;
			Для Каждого НаименованиеПозиции Из ПроблемнаяНоменклатура Цикл 
				ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.Таб + " - " + НаименованиеПозиции;
			КонецЦикла;
			ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС + НСтр("ru='Продолжить?'");
			
			Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Подготовка оповещения журнала записи об изменении состояния заявки
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Заявка")
	Тогда
		СтруктураПараметров.Вставить("СостояниеЗаявки", Объект.ДокументОснование.Состояние);
	КонецЕсли;
	
	ТекущийОбъект.РолиИсполнителей.Очистить();
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		Для Каждого СтрокаСоответ Из СоответствиеТрудовыхРолейИКолонок Цикл
			Если СтрокаСоответ.ТабличнаяЧасть = "Работы" Тогда
				Если ЗначениеЗаполнено(СтрокаРаботы["" + СтрокаСоответ.Колонка]) Тогда
					СтрокаИсполнитель = ТекущийОбъект.РолиИсполнителей.Добавить();
					СтрокаИсполнитель.ИмяТЧ = "Работы";
					СтрокаИсполнитель.КлючСтроки = СтрокаРаботы.КлючСтроки; 
					СтрокаИсполнитель.Роль = СтрокаСоответ.ТрудоваяРоль;
					СтрокаИсполнитель.Сотрудник = СтрокаРаботы[СтрокаСоответ.Колонка];
					
				ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
					И СтрокаСоответ.ТрудоваяРоль.ИнформироватьОНезаполненности
				Тогда
					// Предупреждение о незаполненных формах участия, если требуется
					Если СтрокаСоответ.ТрудоваяРоль.ДляВсехУслуг Тогда
						ВывестиПредупреждение = Истина;
					Иначе
						СтруктураПоиска = Новый Структура("ТрудоваяРоль, Номенклатура", СтрокаСоответ.ТрудоваяРоль, СтрокаРаботы.Номенклатура);
						ВывестиПредупреждение = кешТрудовыхРолейИНоменклатур.НайтиСтроки(СтруктураПоиска).Количество() <> 0;
					КонецЕсли;
					Если ВывестиПредупреждение Тогда
						// Раскомментировать передачу параметра "Поле", если после перехода на режим совместимости
						// 8.3.12 прекратятся ошибки платформы на просмотр предупреждения,
						// привязанного к элементу формы (аварийное закрытие приложения).
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='В строке работ №%1 не указан %2'"),
								СтрокаРаботы.НомерСтроки,
								СтрокаСоответ.ТрудоваяРоль),
							//,"Объект.Работы["+(СтрокаРаботы.НомерСтроки-1)+"]."+СтрокаСоответ.Колонка
							);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьРеквизитыККТИзРеквизитовФормыВХЗ(ТекущийОбъект);
	
	РаботаСФормамиСервер.ФормаДокументаПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Истина, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Заявка")
		И (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Или
		   ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
	Тогда
	    СтруктураПараметров.Вставить("ОповеститьОбИзмененииЗаявки", СтруктураПараметров.СостояниеЗаявки <> Объект.ДокументОснование.Состояние);
		СтруктураПараметров.Вставить("ДатаЗаявки", Объект.ДокументОснование.ДатаНачала);
	Иначе
	    СтруктураПараметров.Вставить("ОповеститьОбИзмененииЗаявки", Ложь);
		СтруктураПараметров.Вставить("ДатаЗаявки", Дата(1,1,1));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КомплексныйРасчет") И ЗначениеЗаполнено(Объект["КомплексныйРасчет"]) Тогда
		СтруктураПараметров.Вставить("ОповеститьОбИзменениеДанныхОплатыКомплексногоРасчета", Ложь);
	КонецЕсли;
	
	Элементы.РаботыРучнаяКорректировкаМатериалов.Видимость = Не Объект.РучнаяКорректировкаМатериалов И ЕстьСтрокиРаботРучногоВводаМатериалов(Объект.Работы);
	
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РасчитатьСуммуДокумента();
	ОбновитьНадписьДолгаКлиента();
	
	// Предупреждение о скором завершении (номинала) сертификатов документа.
	мсСертификаты = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Работы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Сертификат) Тогда
			мсСертификаты.Добавить(СтрокаТЧ.Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	Если мсСертификаты.Количество() <> 0 Тогда
		ТекстПредупреждения = СертификатыКлиентов.СформироватьПредупреждениеОбОкончанииСертификатов(мсСертификаты);
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Предупреждение(ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	РаботаСКлиентамиКлиентПереопределяемый.ОказаниеУслугПослеЗаписи(Объект, СтруктураПараметров);
	
	// Оповещение журнала записи о возможном изменении состояний заявок
	Если СтруктураПараметров.ОповеститьОбИзмененииЗаявки Тогда
		
		ОписаниеЗаявок = Новый Структура("Дата, Ссылка, ИзменилосьТолькоСостояние", СтруктураПараметров.ДатаЗаявки,, Истина);
		Если Объект.Заявки.Количество() = 0 Тогда
			ОписаниеЗаявок.Ссылка = Объект.ДокументОснование;
		Иначе
			ЗаявкиДокумента = Новый Массив;
			ЗаявкиДокумента.Добавить(Объект.ДокументОснование);
			Для Каждого СтрокаЗаявки ИЗ Объект.Заявки Цикл
				ЗаявкиДокумента.Добавить(СтрокаЗаявки.Заявка);
			КонецЦикла;
			ОписаниеЗаявок.Ссылка = ЗаявкиДокумента;
		КонецЕсли;
		
		Оповестить("ЗаявкаИзменение", ОписаниеЗаявок);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОповеститьОбИзменениеДанныхОплатыКомплексногоРасчета") Тогда
		Оповестить("ИзменениеДанныхОплатыКомплексногоРасчета", Новый Структура("Сделка", Объект["КомплексныйРасчет"]), Объект.Ссылка);
	КонецЕсли;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ОтложенныйОбработчикИнициализацияТрудовыхРолей", 0.1, Истина);
	ИнициализацияТрудовыхРолей();

	ОбновитьИнформациюОКМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
	ПоддерживаемыеТипыВО.Добавить("ТерминалСбораДанных");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
	Если НЕ ЗавершениеРаботы Тогда	
		СохранитьНастройкиПодбора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, ИсточникВыбора, НовСтр = Неопределено)
	
	Перем Действие;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.Клиенты") Тогда
		Если ЗначениеЗаполнено(ЗначениеВыбора)
			И Не ЭтаФорма.ТолькоПросмотр
		Тогда
			Объект.Клиент = ЗначениеВыбора;
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Действие", Действие);
		
		Если Действие = "ПодборРаботы" Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаРаботы;
			ДобавленныеСтроки = Новый Массив;
			
			Если ДопСерверныеФункции.ПолучитьРеквизит(ЗначениеВыбора.Номенклатура, "ВидНоменклатуры") = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
				ОбработкаВнесенияНоменклатуры(ЗначениеВыбора.Номенклатура, ЗначениеВыбора.ХарактеристикаНоменклатуры, ЗначениеВыбора.ЕдиницаИзмерения,
											  ЗначениеВыбора.Количество, ЗначениеВыбора.Цена,,,,Истина,ДобавленныеСтроки);
			Иначе
				СоставНабора = ОбщегоНазначенияСервер.ПолучитьСоставНабора(ЗначениеВыбора.Номенклатура);
				Для Инд = 0 По СоставНабора.Количество()-1 Цикл
					ОбработкаВнесенияНоменклатуры(СоставНабора[Инд].Комплектующая, СоставНабора[Инд].ХарактеристикаКомплектующей,Неопределено,
													СоставНабора[Инд].Количество * ЗначениеВыбора.Количество,,,,,,ДобавленныеСтроки);
				КонецЦикла;
			КонецЕсли;
			ОбновитьФормыУчастияПослеИзмененияРабот(ДобавленныеСтроки, Истина);
			
		ИначеЕсли Действие = "ПодборТовара" Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТовары;
			ОбработкаВнесенияНоменклатуры (ЗначениеВыбора.Номенклатура, ЗначениеВыбора.ХарактеристикаНоменклатуры, ЗначениеВыбора.ЕдиницаИзмерения,
			ЗначениеВыбора.Количество, ЗначениеВыбора.Цена
			,,,,,, ЗначениеВыбора.СерияНоменклатуры   
			);
			
		ИначеЕсли Действие = "ПодборМатериала" Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаМатериалы;
			ОбработкаВнесенияНоменклатуры (ЗначениеВыбора.Номенклатура, ЗначениеВыбора.ХарактеристикаНоменклатуры, ЗначениеВыбора.ЕдиницаИзмерения,
			ЗначениеВыбора.Количество, ЗначениеВыбора.Цена
			,,,,,, ЗначениеВыбора.СерияНоменклатуры   
			);
			
 		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "TracksData" Тогда
		Если ВводДоступен() Тогда
			СМК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСМК(ЭтаФорма, Параметр[0], СМК, Неопределено, Неопределено);
		КонецЕсли;
	// Подбор из комплексного расчета.
	ИначеЕсли ИмяСобытия = "ПодборИзКомплексногоРасчетаКлиента" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.ВладелецФормы = ЭтаФорма
		Тогда
			ПеренестиВДокументРезультатомПодбора(Параметр.РезультатПодбора);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхОплатыКомплексногоРасчета" Тогда 
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Сделка") И Объект.КомплексныйРасчет = Параметр.Сделка Тогда 
			ОбновитьДанныеПоОплатеКомплексногоРасчета();
		КонецЕсли;
	КонецЕсли;

	// ИнтеграцияМДЛП
	Если (ИмяСобытия = "ИзменениеСостоянияМДЛП"
		Или ИмяСобытия = "Запись_УведомлениеОПриемкеМДЛП"
		Или ИмяСобытия = "Запись_УведомлениеОПеремещенииМДЛП")
		И Параметр.Основание = Объект.Ссылка Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	// Конец ИнтеграцияМДЛП
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеОтображения(ПриОткрытии = Ложь)
		
	Если Не ПриОткрытии Тогда
		ПодсветитьКнопкуПересчетаСкидки();
		Элементы.РаботыРучнаяКорректировкаМатериалов.Видимость = Не Объект.РучнаяКорректировкаМатериалов И ЕстьСтрокиРаботРучногоВводаМатериалов(Объект.Работы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОборудованиеДисплеиПокупателяКлиент.НачатьОчисткуДисплеяПокупателя(,УникальныйИдентификатор);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ ФОРМЫ

&НаСервереБезКонтекста
Функция ЕстьНоменклатураПоПолисуНеСоотвествующаяРазрешенной(Знач Объект, Массив, АдресНоменклатурыПолиса)
	
	ВидПолиса = Объект.Документ.ВидПолиса;
	
	Если ЗначениеЗаполнено(АдресНоменклатурыПолиса) Тогда
		НоменклатураПолиса = ПолучитьИзВременногоХранилища(АдресНоменклатурыПолиса);
		Если НоменклатураПолиса = Неопределено Тогда
			АдресНоменклатурыПолиса = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресНоменклатурыПолиса) Тогда
		НоменклатураПолиса = МедицинскоеСтрахование.ДопустимаяНоменклатураПолиса(ВидПолиса);
		АдресНоменклатурыПолиса = ПоместитьВоВременноеХранилище(НоменклатураПолиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПолиса.Прейскурант) Тогда
		Прейскурант = ВидПолиса.Прейскурант;	
	Иначе
		Прейскурант = Объект.Прейскурант; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Прейскурант КАК Прейскурант,
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Прейскурант = &Прейскурант) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Прейскурант", ?(ЗначениеЗаполнено(ВидПолиса.Прейскурант), ВидПолиса.Прейскурант, Объект.Прейскурант));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	ЦеныНоменклатуры = Запрос.Выполнить().Выгрузить();
		
	мсТЧ = Новый Массив();
	мсТЧ.Добавить(Объект.Работы);
	мсТЧ.Добавить(Объект.Товары);
	
	Если ВидПолиса.УчетПлатныхМатериаловОбособленноОтУслуг Тогда
		мсТЧ.Добавить(Объект.Материалы);
	КонецЕсли;
	
	Отказ = Ложь;
	Если НоменклатураПолиса.Количество() <> 0 Тогда
		Для Каждого ТабЧастьДокумента Из мсТЧ Цикл
			Для Каждого СтрокаТЧ Из ТабЧастьДокумента Цикл
				Если Не СтрокаТЧ.НеОплачиваетсяПолисом
					И НоменклатураПолиса.Найти(СтрокаТЧ.Номенклатура) = Неопределено
				Тогда 
					Отказ = Истина;
					Массив.Добавить(Строка(СтрокаТЧ.Номенклатура));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат НСтр("ru='Некоторые номенклатурные позиции, оплачиваемые полисом, не входят в список оплачиваемых этим видом полиса!'");	
	КонецЕсли;
			 
	Если ЦеныНоменклатуры.Количество() <> 0 Тогда
		Для Каждого ТабЧастьДокумента Из мсТЧ Цикл
			Для Каждого СтрокаТЧ Из ТабЧастьДокумента Цикл
				Если Не СтрокаТЧ.НеОплачиваетсяПолисом
					И ЦеныНоменклатуры.Найти(СтрокаТЧ.Номенклатура, "Номенклатура") = Неопределено
				Тогда
					Отказ = Истина;
					Массив.Добавить(Строка(СтрокаТЧ.Номенклатура));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат НСтр("ru='У некоторых номенклатурных позиций, оплачиваемых полисом, не задана цена в прейскуранте вида полиса'");	
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура УстановитьПродолжительностьРаботы(СтрокаРаботы)
	
	Если ЗначениеЗаполнено(СтрокаРаботы.Номенклатура) Тогда
		СтрокаРаботы.Продолжительность = ПолучитьПродолжительностьЧасМин(СтрокаРаботы.Номенклатура,СтрокаРаботы.Количество);
	Иначе
		СтрокаРаботы.Продолжительность = Дата(1,1,1);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПродолжительностьЧасМин(Номенклатура,Количество)
	ЧислоСекунд = Номенклатура.ПродолжительностьЧас*60*60 + Номенклатура.ПродолжительностьМин*60;
	ЧислоСекунд = Дата(1,1,1) + ЧислоСекунд * Количество;
	Возврат ЧислоСекунд;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьРежимРедактированияТабличногоПоляМатериалов(Элементы, мУчетнаяПолитика, Объект, мАвтоматическиЗаполнятьМатериалы = Неопределено)
	
	Если мУчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги Тогда
		
		мАвтоматическиЗаполнятьМатериалы = мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловОУ И Не Объект.РучнаяКорректировкаМатериалов;
		
		Элементы.Материалы.ИзменятьСоставСтрок = Не мАвтоматическиЗаполнятьМатериалы; // Для 8.3.23+ приводит к смене основной команды формы.
		Элементы.Материалы.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Доступность = Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.Материалы.КоманднаяПанель.ПодчиненныеЭлементы.МатериалыПодбор.Доступность= Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыНоменклатура.Доступность = Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыРабота.Доступность = Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыКоличество.Доступность = Не мАвтоматическиЗаполнятьМатериалы;
		Элементы.МатериалыЕдиницаИзмерения.Доступность = Не мАвтоматическиЗаполнятьМатериалы;
		
		// Запрет на снятие взведенного ручного редактирования
		Если Не мАвтоматическиЗаполнятьМатериалы Тогда
			Элементы.РучнаяКорректировкаМатериалов.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		мАвтоматическиЗаполнятьМатериалы = Ложь;
		Элементы.Материалы.Видимость = Объект.Материалы.Количество() <> 0; // Т.е. видима только если не пустая.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученоНаличнымиПриИзменении(Элемент)
	
	РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект);
	РаботаСФормамиКлиент.ОплатаПриОкончанииРедактирования(ЭтаФорма,Неопределено, Неопределено, Неопределено);
	мБылаРучнаяПравкаОплаты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаботДокумента()
	
	мСписокРаботДокумента = Новый СписокЗначений;
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		
		Если ЗначениеЗаполнено(СтрокаРаботы.Номенклатура) Тогда
			мСписокРаботДокумента.Добавить(СтрокаРаботы.КлючСтроки, СокрЛП(СтрокаРаботы.Номенклатура) + " " + СокрЛП(СтрокаРаботы.ХарактеристикаНоменклатуры));
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМатериалыУдаленныхРабот()
	
	ОбновитьСписокРаботДокумента();
	
	МахОбрИнд = Объект.Материалы.Количество()-1;
	Для сч = 0 По МахОбрИнд Цикл
		СтрокаМатериалов = Объект.Материалы[МахОбрИнд-сч];
		флУдалять = Истина;
		Для Каждого ЭлементСписка Из мСписокРаботДокумента Цикл
			Если ЭлементСписка.Значение = СтрокаМатериалов.КлючСтрокиРаботы Тогда
				флУдалять = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если флУдалять Тогда
			Объект.Материалы.Удалить(СтрокаМатериалов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоЗаполнениеПоляСертификатОплаты()
	
	Если Объект.Оплата.Количество() > 0 Тогда
		
		ТекущаяСтрокаОплаты = Элементы.ТабличноеПолеОплата.ТекущиеДанные;
		Если ТекущаяСтрокаОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Сертификатом") Тогда
			Элементы.ОплатаСертификат.ТолькоПросмотр = Ложь;
			Если Не ЗначениеЗаполнено(ТекущаяСтрокаОплаты.Сертификат) 
				И ЗначениеЗаполнено(Объект.Сертификат)
			Тогда
				ТекущаяСтрокаОплаты.Сертификат = Объект.Сертификат;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрокаОплаты.Сертификат) Тогда
				ТекущаяСтрокаОплаты.Сертификат = ПредопределенноеЗначение("Справочник.Сертификаты.ПустаяСсылка");
			КонецЕсли;
			Элементы.ОплатаСертификат.ТолькоПросмотр = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

// Обновляет сумму документа, сумму оплаты, суммы скидок документа в форм.
&НаКлиенте
Процедура ОбновитьСтоимостьДокумента()
	
	РасчитатьСуммуДокумента();
	
	Если ПолучитьИтогОплаты(Объект) <> Объект.СуммаДокумента И Не мБылаРучнаяПравкаОплаты И 
		Не мУчетнаяПолитика.НеЗаполнятьОплатуПоСуммеДокументаАвтоматически
	Тогда
		ЗаполнитьОплатуПоСуммеДокумента(Объект, мУчетнаяПолитика, СуммаОплаты, ОплаченоБезналичным, НСПК_СпособОплаты);
	КонецЕсли;
	
	РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект);
	РаботаСДокументамиКлиентСервер.ВывестиЗаголовокСуммаОплатыДокумента(ЭтаФорма);	
	РаботаСФормамиКлиент.ВывестиЗаголовкиСкидокДокумента(ЭтаФорма);
	
	ЛогическийКонтрольСуммыЗачетаАвансаПродажиВДолг();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИтогОплаты(Объект)
	Возврат Объект.Оплата.Итог("Сумма");
КонецФункции	

&НаКлиенте
Процедура ПредупреждениеНоменклатураНеВходитВСертификат(ТекущаяСтрока) 
	
	ПоказатьПредупреждение(,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Номенклатура ''%1'' не входит в число услуг, которые могут быть оплачены сертификатом вида ''%2'''"),
			Строка(ТекущаяСтрока.Номенклатура),
			Строка(ДопСерверныеФункции.ПолучитьРеквизит(ТекущаяСтрока.Сертификат, "ВидСертификата")))
		);
	
КонецПроцедуры

// Процедура используется для обработки ситуаций ввода номенклатуры пользователем
// с помощью СШК, обработки подбора и т.д.
&НаКлиенте
Процедура ОбработкаВнесенияНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Единица, Количество = 1, 
										Цена = Неопределено, СтраницаДобавления = Неопределено, ПозицияВводаСтроки = Неопределено, 
										Абонемент = Неопределено, ЭтоУслуга = Неопределено, ДобавленныеСтроки = Неопределено
										, СерияНоменклатуры = Неопределено, Штрихкод = Неопределено
										)
	
	Перем ПустаяХарактеристика, ПустойСертификат, ЭтоГруппа;
	Перем ПустаяСерия;
	
	ПанельТЧ = Элементы.Страницы;
	
	флДелатьСтраницуДобавленияТекущей = СтраницаДобавления = Неопределено;
	Если СтраницаДобавления = Неопределено Тогда
		СтраницаДобавления = ПанельТЧ.ТекущаяСтраница;
	КонецЕсли;
	
	Если ЭтоУслуга = Неопределено Тогда
		ОбработкаВнесенияНоменклатурыПредзаполнениеСервер(Номенклатура, ЭтоУслуга, ЭтоГруппа, ХарактеристикаНоменклатуры, ПустаяХарактеристика, ПустойСертификат, СерияНоменклатуры, ПустаяСерия);
	Иначе
		ПустаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ПустойСертификат = ПредопределенноеЗначение("Справочник.Сертификаты.ПустаяСсылка");
		Если ХарактеристикаНоменклатуры = Неопределено Тогда
			ХарактеристикаНоменклатуры = ПустаяХарактеристика;
		КонецЕсли;
		ПустаяСерия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
		Если СерияНоменклатуры = Неопределено Тогда
			СерияНоменклатуры = ПустаяСерия;
		КонецЕсли;
		ЭтоГруппа = Ложь;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		СтрокаРаботы = Объект.Работы.Добавить();
		СтрокаРаботы.Количество = Количество;
		СтрокаРаботы.КлючСтроки	= ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Работы);
		
		Если СтрокаРаботы.НомерСтроки > 1 Тогда
			ЗаполнитьТрудовыеРолиПоПредыдущейСтроке(СтрокаРаботы);
		КонецЕсли;
		
	ИначеЕсли ЭтоУслуга Тогда
		
		Если Абонемент = Неопределено Тогда
			Абонемент = ПустойСертификат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Единица) И
			Единица.Коэффициент <> 0 
		Тогда
			Количество = Количество * Единица.Коэффициент;
		КонецЕсли;
		
		// Обработка считывания работы
		СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры,Сертификат", Номенклатура, ХарактеристикаНоменклатуры, Абонемент);
		Если Цена <> Неопределено Тогда
			СтруктураПоиска.Вставить("Цена", Цена);
		КонецЕсли;
		мсСтрокиРаботы = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		Если мсСтрокиРаботы.Количество()=0 Тогда
			// Добавляется новая строка
			СтрокаРаботы = Объект.Работы.Добавить();
			СтрокаРаботы.Номенклатура = Номенклатура;
			СтрокаРаботы.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
			СтрокаРаботы.Количество = Количество;
			СтрокаРаботы.Сертификат = Абонемент;
			СтрокаРаботы.КлючСтроки	= ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Работы);
			РаботыРаботаПриИзмененииТекСтрока(Неопределено, СтрокаРаботы.НомерСтроки-1);
			
			Если СтрокаРаботы.НомерСтроки > 1 Тогда
				ЗаполнитьТрудовыеРолиПоПредыдущейСтроке(СтрокаРаботы);
			КонецЕсли;
			
			Если ТипЗнч(ДобавленныеСтроки) = Тип("Массив") Тогда
				ДобавленныеСтроки.Добавить(СтрокаРаботы);
			КонецЕсли;
			
			Если Цена <> Неопределено Тогда
				Если Цена <>  0 Тогда 
					СтрокаРаботы.Цена = Цена;					
					СтрокаРаботы.Сумма = Количество*СтрокаРаботы.Цена;					
				КонецЕсли;	
			КонецЕсли;
			
			ОбработкаРеквизитаУпр("Работы.Цена",Элементы.Работы.ТекущиеДанные,ЭтаФорма);
			
			Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
		Иначе
			// Увеличивается количество по существующей
			СтрокаРаботы = мсСтрокиРаботы[0];
			Если ПозицияВводаСтроки <> (СтрокаРаботы.НомерСтроки - 1) Тогда
				СтрокаРаботы.Количество = СтрокаРаботы.Количество + Количество;
			КонецЕсли;
			Элементы.Работы.ТекущаяСтрока = СтрокаРаботы.ПолучитьИдентификатор();
			РаботыКоличествоПриИзменении(Неопределено);
			
		КонецЕсли;
		
		ОбновитьСписокРаботДокумента();
		ЗаполнитьСопутствующиеТоварыКлиент();

		Если флДелатьСтраницуДобавленияТекущей Тогда
			ПанельТЧ.ТекущаяСтраница = ПанельТЧ.ПодчиненныеЭлементы.ГруппаРаботы;
		КонецЕсли;
		
	Иначе // Товар	
		
		Если СтраницаДобавления = ПанельТЧ.ПодчиненныеЭлементы.ГруппаМатериалы Тогда
			
			// Считан материал
			Если Элементы.Работы.ТекущиеДанные <> Неопределено Тогда
				ТекСтрокаРаботы = Элементы.Работы.ТекущиеДанные;
			Иначе
				ТекСтрокаРаботы = Неопределено;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения", Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Единица);
			Если Цена <> Неопределено Тогда
				СтруктураПоиска.Вставить("Цена",Цена);
			КонецЕсли;
			
			мсСтрокиТовары = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
			Если мсСтрокиТовары.Количество()=0 и ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристика);
				мсСтрокиТовары = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если мсСтрокиТовары.Количество()=0 Или 
				(ТекСтрокаРаботы <> Неопределено и ТекСтрокаРаботы.КлючСтроки <> мсСтрокиТовары[0].КлючСтрокиРаботы)
			Тогда
				
				СтрокаТовар = Объект.Материалы.Добавить();
				Элементы.Материалы.ТекущаяСтрока = СтрокаТовар.ПолучитьИдентификатор();
				
				Если ТекСтрокаРаботы<>Неопределено Тогда
					СтрокаТовар.Работа			 = ТекСтрокаРаботы.Номенклатура;
					СтрокаТовар.КлючСтрокиРаботы = ТекСтрокаРаботы.КлючСтроки;
				КонецЕсли;
				
				СтрокаТовар.Номенклатура = Номенклатура;
				СтрокаТовар.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				СтрокаТовар.СерияНоменклатуры = СерияНоменклатуры;
				СтрокаТовар.ЕдиницаИзмерения = Единица;
				
				Если ЗначениеЗаполнено(Единица) Тогда
					СтрокаТовар.ЕдиницаИзмерения = Единица;
				Иначе
					СтрокаТовар.ЕдиницаИзмерения = ДопСерверныеФункции.ПолучитьРеквизит(Номенклатура, "ЕдиницаХраненияОстатков");
				КонецЕсли;
				
				#Если ТолстыйКлиентУправляемоеПриложение Тогда
					СтрокаТовар.Коэффициент	= СтрокаТовар.ЕдиницаИзмерения.Коэффициент;
				#Иначе
					СтрокаТовар.Коэффициент	= ДопСерверныеФункции.ПолучитьРеквизит(СтрокаТовар.ЕдиницаИзмерения, "Коэффициент");
				#КонецЕсли

				СтрокаТовар.Количество = Количество;
				СтрокаТовар.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Материалы);
				
				МатериалыНоменклатураПриИзменении(Неопределено, СтрокаТовар.НомерСтроки - 1);
				
				Если Цена<>Неопределено Тогда
					Если Цена <> 0 Тогда
						СтрокаТовар.Цена = Цена;					
					КонецЕсли;	
					СтрокаТовар.Сумма = Количество*СтрокаТовар.Цена;
				КонецЕсли;
				
				МатериалыЦенаПриИзменении(Неопределено);
				
				НоваяСтрока = Истина;
			Иначе
				СтрокаТовар = мсСтрокиТовары[0];
				СтрокаТовар.Количество = СтрокаТовар.Количество + Количество;
				Если Не ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) И
					ЗначениеЗаполнено(ХарактеристикаНоменклатуры)
				Тогда
					// Рассматриваем как заполнение характеристики в норме на материал.
					СтрокаТовар.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				КонецЕсли;
				Элементы.Материалы.ТекущаяСтрока = СтрокаТовар.ПолучитьИдентификатор();
				МатериалыКоличествоПриИзменении(Неопределено);
				НоваяСтрока = Ложь;
			КонецЕсли;	
			
			ТоварыПриОкончанииРедактирования(Элементы.Материалы, НоваяСтрока, Ложь);
			
			Если флДелатьСтраницуДобавленияТекущей Тогда
				ПанельТЧ.ТекущаяСтраница = ПанельТЧ.ПодчиненныеЭлементы.ГруппаМатериалы;
			КонецЕсли;
			
		Иначе
			// Считан товар
			СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры);
			Если ЗначениеЗаполнено(Единица) Тогда // Учитываем Единицу при поиске только если она задана.
				СтруктураПоиска.Вставить("ЕдиницаИзмерения", Единица);
			КонецЕсли;
			Если Цена <> Неопределено Тогда // Учитываем Цену при поиске только если она задана.
				СтруктураПоиска.Вставить("Цена",Цена);
			КонецЕсли;
			
			мсСтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
			// Если был считан штрихкод МАРКИРУЕМОГО товара, то либо новая строка, либо предупреждение, если повторный штрихкод.
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				ДанныеШтрихКод = РаботаСТорговымОборудованиемКлиент.ПолучитьДанныеИзШтрихкода(Штрихкод);
				Если ДанныеШтрихКод.ТипШтрихкода = "ШтрихкодМДЛП"
					Или ДанныеШтрихКод.ТипШтрихкода = "ШтрихкодГС1"
				Тогда
					СтрокиТоварыНовый = Новый Массив;
					Для Каждого СтрокаТовар Из мсСтрокиТовары Цикл
						Если СтрокаТовар.Штрихкод = Штрихкод Тогда
							ТекстПредупреждения = "Упаковка с данным штрихкодом уже есть в документе!";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
							Возврат;
						КонецЕсли;
					КонецЦикла;
					мсСтрокиТовары.Очистить(); // Очищаем результат поиска, чтобы добавилась новая строка.
				КонецЕсли;
			КонецЕсли;
			
			Если мсСтрокиТовары.Количество()=0 Тогда
				
				СтрокаТовар = Объект.Товары.Добавить();
				СтрокаТовар.Номенклатура = Номенклатура;
				СтрокаТовар.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				СтрокаТовар.СерияНоменклатуры = СерияНоменклатуры;
				СтрокаТовар.ЕдиницаИзмерения = Единица;
				
				стрЕдКоэф = ПолучитьЕдиницуИКоэф(Номенклатура, Единица);
				СтрокаТовар.ЕдиницаИзмерения = стрЕдКоэф.ЕдиницаИзмерения;
				СтрокаТовар.Коэффициент		 = стрЕдКоэф.Коэффициент;
				
				СтрокаТовар.Количество = Количество;
				СтрокаТовар.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Товары);
				
				Элементы.Товары.ТекущаяСтрока = СтрокаТовар.ПолучитьИдентификатор();
				ТоварыРеквизитПриИзменении("Товары.Номенклатура", СтрокаТовар.НомерСтроки);
				
				Если Цена<>Неопределено Тогда
					Если Цена <> 0 Тогда
						СтрокаТовар.Цена = Цена;					
						СтрокаТовар.Сумма = СтрокаТовар.Цена*Количество;
					КонецЕсли;	
				КонецЕсли;
				ТоварыЦенаПриИзменении(Неопределено);
				НоваяСтрока = Истина;
			Иначе
				СтрокаТовар = мсСтрокиТовары[0];
				Если ЗначениеЗаполнено(СерияНоменклатуры) И ОбщегоНазначения.ПолучитьЗначениеРеквизита(СерияНоменклатуры, "СерияПромаркированаДляЦелейМДЛП") Тогда
					// МДЛП. Считанный штрихкод уже содержится в документе, данные строки табличной части Товары перезаполнены с нуля.
					СтрокаТовар.Количество = Количество;	
				Иначе
					СтрокаТовар.Количество = СтрокаТовар.Количество + Количество;
				КонецЕсли;
				Элементы.Товары.ТекущаяСтрока = СтрокаТовар.ПолучитьИдентификатор();
				ТоварыЦенаПриИзменении(Неопределено);
				НоваяСтрока = Ложь;
			КонецЕсли;	
			
			Если Штрихкод <> Неопределено И СтрокаТовар.Свойство("Штрихкод") Тогда
				СтрокаТовар.Штрихкод = Штрихкод;
				ПриЗаполненииИзмененииШКТовары();
			КонецЕсли;
			
			ТоварыПриОкончанииРедактирования(Элементы.Товары, НоваяСтрока, Ложь);
			
			Если флДелатьСтраницуДобавленияТекущей Тогда
				ПанельТЧ.ТекущаяСтраница = ПанельТЧ.ПодчиненныеЭлементы.ГруппаТовары;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаВнесенияНоменклатурыПредзаполнениеСервер(Знач Номенклаутра, ЭтоУслуга, ЭтоГруппа, ХарактеристикаНоменклатуры, ПустаяХарактеристика, ПустойСертификат
															, СерияНоменклатуры, ПустаяСерия
															)
	                                                        
	ЭтоУслуга = Номенклаутра.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
	ЭтоГруппа = Номенклаутра.ЭтоГруппа;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		ХарактеристикаНоменклатуры = ПустаяХарактеристика;
	КонецЕсли;
	
	ПустаяСерия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Если СерияНоменклатуры = Неопределено Тогда
		СерияНоменклатуры = ПустаяСерия;
	КонецЕсли;
	
	ПустойСертификат = Справочники.Сертификаты.ПустаяСсылка();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИКоэф(Номенклатура, Единица)
	стрЕдКоэф = Новый Структура;
	Если ЗначениеЗаполнено(Единица) Тогда
		стрЕдКоэф.Вставить("ЕдиницаИзмерения", Единица);
		стрЕдКоэф.Вставить("Коэффициент", Единица.Коэффициент);
	Иначе
		стрЕдКоэф.Вставить("ЕдиницаИзмерения", Номенклатура.ЕдиницаХраненияОстатков);
		стрЕдКоэф.Вставить("Коэффициент", Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
	КонецЕсли;
	Возврат стрЕдКоэф;
КонецФункции

// Заполняет по сертификату
//
// Параметры:
//  СертификатКлиента - сертификат клиента.
//
&НаСервере
Функция ЗаполнитьПоСертификату(СертификатКлиента)
	
	Если НЕ ЗначениеЗаполнено(СертификатКлиента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СертификатКлиента.ВидСертификата.ТипСертификата = ПредопределенноеЗначение("Перечисление.ТипыСертификатов.НаУслуги") Тогда
		
		ВидСертификата = СертификатКлиента.ВидСертификата;
		Если ВидСертификата.Услуги.Количество()<>0 Тогда
			
			УслугаСертификата = ВидСертификата.Услуги[0].Фильтр;
			Возврат УслугаСертификата;
			
		КонецЕсли;
		
	ИначеЕсли СертификатКлиента.ВидСертификата.ТипСертификата = ПредопределенноеЗначение("Перечисление.ТипыСертификатов.НаОплату") Тогда
		
		Объект.Сертификат = СертификатКлиента;
		
		ОстатокСертификата = СертификатыКлиентов.ПолучитьОстатокПоСертификату(Объект.Сертификат, Объект.Дата);
		ОплатаСертификатом = Мин(ОстатокСертификата,Объект.СуммаДокумента);		
		
		Объект.Оплата.Очистить();
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты	= ПредопределенноеЗначение("Перечисление.ВидыОплаты.Сертификатом");
		НоваяСтрока.Сертификат	= СертификатКлиента;
		НоваяСтрока.Сумма		= ОплатаСертификатом;
		
		Если ОплатаСертификатом < Объект.СуммаДокумента Тогда
			НоваяСтрока = Объект.Оплата.Добавить();
			НоваяСтрока.ВидОплаты	= мУчетнаяПолитика.ОсновнойВидОплаты;
			НоваяСтрока.Сумма		= Объект.СуммаДокумента  - ОплатаСертификатом;
		КонецЕсли;
		
		Элементы.НадписьОстатокСертификата.Заголовок = СформироватьНадписьОстатокСертификата(Объект.Сертификат, Объект.Ссылка, Объект.Дата,, ОстатокСертификата);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоНормам(Команда)
	
	// Вопрос об очистке
	Если Объект.Материалы.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	ЗаполнитьМатериалыПоНормамРабот();
	ОбновитьСтоимостьДокумента();
	
	ОбновитьПредставлениеРаботМатериалов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормамРабот(КлючСтрокиРаботы = Неопределено)
	
	// Удаление строк таб. части материалов, которые будут перезаполнены
	мОбрИнд = Объект.Материалы.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаМатериалы = Объект.Материалы[мОбрИнд-сч];
		Если (КлючСтрокиРаботы <> Неопределено И СтрокаМатериалы.КлючСтрокиРаботы = КлючСтрокиРаботы) Тогда
			Объект.Материалы.Удалить(мОбрИнд-сч);
		Иначе
			СтрокиРаботы = Объект.Работы.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаМатериалы.КлючСтрокиРаботы));
			Если СтрокиРаботы.Количество() <> 0 И Не СтрокиРаботы[0].РучнаяКорректировкаМатериалов Тогда
				Объект.Материалы.Удалить(мОбрИнд-сч);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Материалы = ПолучитьМатериалыПоНормамРабот(Объект, КлючСтрокиРаботы);
	Для Каждого СтрокаНормыМатериала Из Материалы Цикл
		ЗаполнитьЗначенияСвойств(Объект.Материалы.Добавить(), СтрокаНормыМатериала);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМатериалыПоНормамРабот(Знач Объект, Знач КлючСтрокиРаботы = Неопределено)
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Объект);
	
	Отбор = Новый Структура;
	Если КлючСтрокиРаботы <> Неопределено Тогда
		Отбор.Вставить("КлючСтроки", КлючСтрокиРаботы);
	КонецЕсли;
	
	ТаблицаСохраненныхМатериалов = Объект.Материалы.Выгрузить(,"Работа, Номенклатура, ХарактеристикаНоменклатуры, Количество, КлючСтрокиРаботы");
	ТаблицаСохраненныхМатериалов.Колонки.Добавить("ХарактеристикаРаботы");
	ТаблицаРабот = Объект.Работы.Выгрузить();
	Для Каждого СтрокаМатериала Из ТаблицаСохраненныхМатериалов Цикл
		СтрокаРаботы = ТаблицаРабот.Найти(СтрокаМатериала.КлючСтрокиРаботы, "КлючСтроки");
		СтрокаМатериала.ХарактеристикаРаботы = СтрокаРаботы.ХарактеристикаНоменклатуры;
	КонецЦикла;
	ТаблицаСохраненныхМатериалов.Колонки.Удалить("КлючСтрокиРаботы");
	
	ОснованиеЭтоПМО = ДопСерверныеФункции.ИмяСсылочногоТипа(Объект.ДокументОснование) = "ДокументСсылка.ПрохождениеМедосмотра";
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Документы.ОказаниеУслуг.ЗаполнитьМатериалыПоНормамРабот(СтруктураШапкиДокумента, Объект.Работы.Выгрузить(Отбор),Не ОснованиеЭтоПМО, ТаблицаСохраненныхМатериалов));
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьЦеныПоВхождениюМатериаловВСтоимостьУслуг(Объект, КлючИнтересующейСтрокиМатериала = Неопределено)
	
	ТаблицаРасхода = Новый ТаблицаЗначений;
	ТаблицаРасхода.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаРасхода.Колонки.Добавить("КлючСтрокиРаботы", Новый ОписаниеТипов("Число"));
	ТаблицаРасхода.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасхода.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРасхода.Колонки.Добавить("Материал", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасхода.Колонки.Добавить("ХарактеристикаМатериала", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	// Подготовка таблицы провераяемого расхода материалов (отсев неактуальных строк материалов).
	// Обязательно включить все-все строки табличной части.
	Для Каждого СтрокаМатериала Из Объект.Материалы Цикл
		
		СтрокаРасхода = ТаблицаРасхода.Добавить();
		СтрокаРасхода.КлючСтроки			  = СтрокаМатериала.КлючСтроки;
		СтрокаРасхода.КлючСтрокиРаботы		  = СтрокаМатериала.КлючСтрокиРаботы;
		СтрокаРасхода.Материал				  = СтрокаМатериала.Номенклатура;
		СтрокаРасхода.ХарактеристикаМатериала = СтрокаМатериала.ХарактеристикаНоменклатуры;
		
		Попытка
			СтрокаРаботы = Объект.Работы.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаРасхода.КлючСтрокиРаботы))[0];
		Исключение Возврат КонецПопытки;
		
		СтрокаРасхода.Номенклатура				 = СтрокаРаботы.Номенклатура;
		СтрокаРасхода.ХарактеристикаНоменклатуры = СтрокаРаботы.ХарактеристикаНоменклатуры;
		
	КонецЦикла;
	
	// Получение норм из базы данных
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРасхода", ТаблицаРасхода);
	Запрос.Текст = ТекстЗапросаВхождениеМатериаловВСтоимость();
	ВыбНормы = Запрос.Выполнить().Выбрать();
	ОтборНормы = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Материал, ХарактеристикаМатериала");
	
	ПримененныеВхождения = ТаблицаРасхода.СкопироватьКолонки();
	ОтборПримененныеВхождения = Новый Структура("КлючСтрокиРаботы, Материал, ХарактеристикаМатериала");
	
	// Очистка цены по необходимости
	Для Каждого СтрокаРасхода Из ТаблицаРасхода Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборНормы, СтрокаРасхода);
		ЗаполнитьЗначенияСвойств(ОтборПримененныеВхождения, СтрокаРасхода);
		
		Если Не Объект.РучнаяКорректировкаМатериалов
			Или ПримененныеВхождения.НайтиСтроки(ОтборПримененныеВхождения).Количество() = 0
		Тогда
			ВыбНормы.Сбросить();
			Если ВыбНормы.НайтиСледующий(ОтборНормы)
				И ВыбНормы.ВходитВСтоимость
			Тогда
				Если КлючИнтересующейСтрокиМатериала = Неопределено
					Или СтрокаРасхода.КлючСтроки = КлючИнтересующейСтрокиМатериала
				Тогда			
					СтрокаМатериала = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаРасхода.КлючСтроки))[0];
					СтрокаМатериала.Цена = 0;
					СтрокаМатериала.СуммаСкидки = 0;
					СтрокаМатериала.Сумма		= 0;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ПримененныеВхождения.Добавить(), СтрокаРасхода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаВхождениеМатериаловВСтоимость()
	
	Возврат 	
	"ВЫБРАТЬ
	|	Расход.Номенклатура КАК Номенклатура,
	|	Расход.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Расход.Материал КАК Материал,
	|	Расход.ХарактеристикаМатериала КАК ХарактеристикаМатериала
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	&ТаблицаРасхода КАК Расход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расход.Номенклатура КАК Номенклатура,
	|	Расход.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Расход.Материал КАК Материал,
	|	Расход.ХарактеристикаМатериала КАК ХарактеристикаМатериала,
	|	НормыРасходаМатериалов.ВходитВСтоимость КАК ВходитВСтоимость,
	|	ВЫБОР
	|		КОГДА Расход.ХарактеристикаНоменклатуры = НормыРасходаМатериалов.ХарактеристикаНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА Расход.ХарактеристикаМатериала = НормыРасходаМатериалов.ХарактеристикаМатериала
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокХарактеристикаМатериала
	|ИЗ
	|	Расход КАК Расход
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормыРасходаМатериалов КАК НормыРасходаМатериалов
	|		ПО Расход.Номенклатура = НормыРасходаМатериалов.Номенклатура
	|			И Расход.Материал = НормыРасходаМатериалов.Материал
	|			И (Расход.ХарактеристикаНоменклатуры = НормыРасходаМатериалов.ХарактеристикаНоменклатуры
	|				ИЛИ НормыРасходаМатериалов.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (Расход.ХарактеристикаМатериала = НормыРасходаМатериалов.ХарактеристикаНоменклатуры
	|				ИЛИ Расход.ХарактеристикаМатериала = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЛИ НормыРасходаМатериалов.ХарактеристикаМатериала = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	НЕ НормыРасходаМатериалов.Производственная
	|	И НЕ НормыРасходаМатериалов.ДляВнешнегоПроизводства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокХарактеристикаМатериала,
	|	ПорядокХарактеристикаНоменклатуры"
	;
	
КонецФункции

// Обработка изменения реквизитов документа
// Параметры
//  Имя			– Строка			– Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ЭтаФорма	– Форма				– Ссылка на форму документа. 
// 									  Если значение неопределено, производится программная обработка реквизитов.
//  ТекСтрока	– СтрокаТабличнойЧасти – Ссылка на строку табличной части документа, реквизит которой обрабатывается.
// 										 Имеет смысл только для табличных частей документов.
//  ДопПараметры– Стркутура			– Структура, содержащая дополнительные параметры обработки реквизита.
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
&НаКлиенте
Функция ОбработкаРеквизитаУпр(Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено)

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	// ОБРАБОТКА РЕКВИЗИТОВ ДОКУМЕНТА
	Если Имя="Склад" Тогда
		
	ИначеЕсли Имя = "Сертификат" Тогда
		
		Если ЗначениеЗаполнено(Объект.Сертификат) Тогда
			мСтр = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты",ПредопределенноеЗначение("Перечисление.ВидыОплаты.Сертификатом")));
			Для Каждого СтрокаОплаты из мСтр Цикл
				Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Сертификатом") И 
					Не ЗначениеЗаполнено(СтрокаОплаты.Сертификат)
				Тогда
					СтрокаОплаты.Сертификат = Объект.Сертификат;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ"
	ИначеЕсли Имя="Товары.Номенклатура" Тогда
		
		ДопПараметры.Вставить("ИспользоватьЕдиницуТоваров",Истина);
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);

	ИначеЕсли Имя="Материалы.Номенклатура" Тогда
		
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		Возврат Рез;
		
	// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "РАБОТЫ"
	ИначеЕсли Имя="Работы.Номенклатура" Тогда
		
		Если ТекСтрока.Количество = 0 Тогда ТекСтрока.Количество = 1; КонецЕсли; 
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		Возврат Истина;
		
	ИначеЕсли Имя = "Товары.ХарактеристикаНоменклатуры"	Или
		Имя = "Работы.ХарактеристикаНоменклатуры" Или
		Имя = "Материалы.ХарактеристикаНоменклатуры" Тогда
		
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		Возврат Истина;				
		
	ИначеЕсли Имя="Товары.Количество" Или Имя="Материалы.Количество" Или Имя="Работы.Количество" Тогда
		
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		ОбновитьСтоимостьДокумента();

		Возврат рез;
		
	ИначеЕсли Имя="Товары.ЕдиницаИзмерения" Или Имя="Материалы.ЕдиницаИзмерения" Тогда
		
		рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		ОбновитьСтоимостьДокумента();

		Возврат рез;
		
	ИначеЕсли Имя="Товары.Цена" Или Имя="Материалы.Цена" Или  Имя="Работы.Цена" Тогда
		
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		ОбновитьСтоимостьДокумента();

		Возврат Рез;
		
	ИначеЕсли Имя="Товары.Сумма" Или Имя="Материалы.Сумма" Или Имя="Работы.Сумма" Тогда
		
		ДопПараметры.Вставить("ЕстьПравоИзмененияЦены", мЕстьПравоИзмененияЦены);
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		ОбновитьСтоимостьДокумента();

		Возврат Рез;
		
	// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Материалы"
	ИначеЕсли Имя = "Товары.ПроцентСкидки" Или
		Имя = "Работы.ПроцентСкидки" Или
		Имя = "Материалы.ПроцентСкидки"
	Тогда
		
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		ОбновитьСтоимостьДокумента();

		Возврат Истина;				
		
	ИначеЕсли Имя = "Товары.СуммаСкидки" Или
		Имя = "Работы.СуммаСкидки" Или
		Имя = "Материалы.СуммаСкидки" 
	Тогда
		
		Рез=РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
		ОбновитьСтоимостьДокумента();

		Возврат Истина;				
		
	ИначеЕсли Имя="Работы.Сертификат" Тогда
		
		Если ЗначениеЗаполнено(ТекСтрока.Сертификат) И
			ЗначениеЗаполнено(ТекСтрока.Цена)
		Тогда
			ТекСтрока.Цена = 0;
			РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,"Работы.Цена",ТекСтрока,ЭтаФорма,ДопПараметры);
			
		ИначеЕсли	Не ЗначениеЗаполнено(ТекСтрока.Сертификат) И
					Не ЗначениеЗаполнено(ТекСтрока.Цена) 
		Тогда
			стр = РаботаСДокументамиКлиент.СтрокуФормыВСтруктуру(ТекСтрока);
			СтрЦенаСумма	= РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(Объект.Ссылка, "Работы", стр);
			ТекСтрока.Цена	= СтрЦенаСумма.Цена;
			ТекСтрока.Сумма = СтрЦенаСумма.Сумма;
			СтруктураШапкиДокумента = РаботаСДокументамиКлиент.СформироватьСтруктуруШапкиДокумента(Объект);
			СтрЦенаСумма = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(СтруктураШапкиДокумента, "Работы", стр);

			РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,"Работы.Цена",ТекСтрока,ЭтаФорма,ДопПараметры);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Сертификат) 
			И Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) 
		Тогда
			УслугиСертификата = СертификатыКлиентов.ПолучитьУслугиСертификата(ТекСтрока.Сертификат);
			Если УслугиСертификата.Количество() = 1 Тогда
				ТекСтрока.Номенклатура = УслугиСертификата[0];
			КонецЕсли;
		КонецЕсли;
		РасчитатьСуммуДокумента();
		
		Возврат Истина;	
		
	ИначеЕсли Имя="Сертификаты.Сертификат" Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту") Тогда
			// Попытка расчета суммы возврата
			СуммаВозврата = ОбщегоНазначенияСервер.ФункцияМенеджера("Документы.ОказаниеУслуг", "РасчитатьСуммуВозвратаСертификата", ТекСтрока.Сертификат, Объект.Дата, Объект.Прейскурант); 
			Если СуммаВозврата >= 0 Тогда
				ТекСтрока.Сумма = СуммаВозврата;
			Иначе
				ТекСтрока.Сумма = 0;
			КонецЕсли;
		Иначе
			ТекСтрока.Сумма = ПолучитьЦенуВидаСертификата(Объект.Прейскурант,ТекСтрока.Сертификат, Объект.Дата);
		КонецЕсли;
		
		РасчитатьСуммуДокумента();
		Возврат Истина;		
		
	ИначеЕсли Имя="Сертификаты.Сумма" Тогда
		РасчитатьСуммуДокумента();
		Возврат Истина;		
		
	ИначеЕсли Имя="ПополнениеСертификатов.Количество" Тогда
		ТекСтрока.Сумма = ТекСтрока.Цена*ТекСтрока.Количество;
		
		РасчитатьСуммуДокумента();
		Возврат Истина;		
		
	ИначеЕсли Имя="ПополнениеСертификатов.Цена" Тогда
		
		ТекСтрока.Сумма = ТекСтрока.Цена*ТекСтрока.Количество;
		
		РасчитатьСуммуДокумента();
		Возврат Истина;	
		
	ИначеЕсли Имя="ПополнениеСертификатов.Сумма" Тогда
		
		Если (ТекСтрока.Количество<>0) Тогда
			ТекСтрока.Цена = ТекСтрока.Сумма/ТекСтрока.Количество;
		Иначе
			ВремТекСтрока = СформироватьСтруктуруСтрокиПополнениеСертификатов(ТекСтрока);
			ТекСтрока.Цена = ВремТекСтрока.Цена;
		КонецЕсли;
		
		РасчитатьСуммуДокумента();
		Возврат Истина;	
	
	Иначе 
		Возврат РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,Имя,ТекСтрока,ЭтаФорма,ДопПараметры);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновлениеОтображения();
	ОбновитьИнформациюОКМ();
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПриИзменении(Элемент)
	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура СдачаИлиДепозитПриИзменении(Элемент)
	Если СдачаИлиДепозит = 1 Тогда
		Объект.СдачуВДепозит = Ложь;
		ОбнулениеОплатыНаличными();
	ИначеЕсли СдачаИлиДепозит = 2 Тогда
		Объект.СдачуВДепозит = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеОплатаПриАктивизацииСтроки(Элемент)
	
	АвтоЗаполнениеПоляСертификатОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыСертификатПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("Сертификаты.Сертификат",Элементы.Сертификаты.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СертификатыСуммаПриИзменении(Элемент)
	РасчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументНастройкамиСотрудникаПоУмолчанию()
	СтруктураНастроек = ПолучитьСтруктуруНастроекСкладов(Объект.Сотрудник, Объект.Филиал);		
	Если ЗначениеЗаполнено(СтруктураНастроек.Склад) Тогда
		Объект.Склад = СтруктураНастроек.Склад;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураНастроек.СкладМатериалов) Тогда
		Объект.СкладМатериалов = СтруктураНастроек.СкладМатериалов;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНастройкамиСотрудникаПоУмолчаниюСервер()
	
	// Заполнение складов из настроек сотрудника, если они еще не заполнены.
	СтруктураНастроек = ПолучитьСтруктуруНастроекСкладов(Объект.Сотрудник, Объект.Филиал);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.Склад) > ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = СтруктураНастроек.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураНастроек.СкладМатериалов) > ЗначениеЗаполнено(Объект.СкладМатериалов) Тогда
		Объект.СкладМатериалов = СтруктураНастроек.СкладМатериалов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает настройки складов сотрудника
Функция ПолучитьСтруктуруНастроекСкладов(Сотрудник, Филиал = Неопределено)
	Настройки = Новый Структура("Склад, СкладМатериалов");
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Настройки.Склад = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(Сотрудник,"ОсновнойСкладТоваров", Филиал);
		Настройки.СкладМатериалов = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(Сотрудник,"ОсновнойСкладМатериалов", Филиал);
	КонецЕсли;
	Возврат Настройки;
КонецФункции

&НаКлиенте
Функция ПолучитьПозицииДокументаДляСопутствующих()
	
	ПозицииДокумента = Новый Массив;

	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("Работы");
	ТабличныеЧасти.Добавить("Товары");
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
			Если ПозицииДокумента.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
				ПозицииДокумента.Добавить(СтрокаТЧ.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПозицииДокумента;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяОбновитьСопутствующиеТовары()
	
	Если мПозицииДокументаДляСопутствующих = Неопределено Тогда
		мПозицииДокументаДляСопутствующих = Новый Массив;
	КонецЕсли;
	
	ТекущиеНоменклатурыДокумента = ПолучитьПозицииДокументаДляСопутствующих();
	Если Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(мПозицииДокументаДляСопутствующих, ТекущиеНоменклатурыДокумента) Тогда
		мПозицииДокументаДляСопутствующих.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мПозицииДокументаДляСопутствующих, ТекущиеНоменклатурыДокумента);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

///////////////////////////////////////////////
// МЕТОДЫ ПОДБОРА

&НаКлиенте
Процедура Подключаемый_ВыборПодбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Ложь Тогда ЗапрашиватьКоличество = Ложь; ЗапрашиватьЦену = Ложь; ЗапрашиватьХарактеристику = Ложь; ЗапрашиватьСерию = Ложь; КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаРаботы Тогда
		Действие = "ПодборРаботы";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда
		Действие = "ПодборТовара";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаМатериалы И Объект.РучнаяКорректировкаМатериалов Тогда
		Действие = "ПодборМатериала";
	КонецЕсли;
	Результат = РаботаСФормамиКлиент.ВыборПодборОбработка(ВыбранноеЗначение, ЗапрашиватьКоличество, ЗапрашиватьЦену, ЗапрашиватьХарактеристику, ЗапрашиватьСерию, Действие, ЭтаФорма); 
	
	Если Результат <> Неопределено Тогда
		ОбработкаВыбора(Результат, Неопределено);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПодбораПриИзменении(Элемент)
	мИзмененыНастройкиПодбора = Истина;
	СохранитьНастройкиПодбора();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПодбора()
	
	Если ЗначениеЗаполнено(мИзмененыНастройкиПодбора) Тогда 
		РаботаСФормамиСервер.СохранитьНастройкиПодбора(ЭтаФорма.ЗапрашиватьКоличество, ЭтаФорма.ЗапрашиватьЦену, ЭтаФорма.ЗапрашиватьХарактеристику, ЭтаФорма.ЗапрашиватьСерию, ТипЗнч(Объект.Ссылка)); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьРаботПродолжительностьПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПересчетВремениОкончания(,мВестиУчетДлительностиРабот);	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьРаботПродолжительностьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Продолжительность = СтрокаТабличнойЧасти.Продолжительность  + 60 * Направление;
	РаботыПродолжительностьПродолжительностьПриИзменении(Элемент);
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ЗаполнитьСопутствующиеТовары(СопутствующиеТовары, Знач Работы, Знач Товары)
	
	СопТов = СопутствующиеТовары;
	СопТов.Очистить();
	НоменклатураИсточник = Новый Массив;
	НоменклатураВДокументе = Новый Массив;
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Работы);
	ТабличныеЧасти.Добавить(Товары);
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			НоменклатураВДокументе.Добавить(СтрокаТЧ.Номенклатура);
			НоменклатураИсточник.Добавить(СтрокаТЧ.Номенклатура);
			
			СписокРодителей = ОбщегоНазначения.ПолучитьСписокРодителейЭлемента(СтрокаТЧ.Номенклатура);
			Для Каждого Номенклатура Из СписокРодителей Цикл
				Если НоменклатураИсточник.Найти(Номенклатура) = Неопределено Тогда
					НоменклатураИсточник.Добавить(Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Обработаем массив номенклатуры
	Для Каждого Номенклатура Из НоменклатураИсточник Цикл
		// Сопутствующие позиции этой номенклатуры или группы.
		Для Каждого СтрокаСопутствующийТовар Из Номенклатура.СопутствующиеТовары Цикл
			
			СопутствующийТовар = СтрокаСопутствующийТовар.Номенклатура;
			Если НоменклатураВДокументе.Найти(СопутствующийТовар) = Неопределено Тогда // Не учитываем те, что уже есть в документе.
				
				Отбор = Новый Структура("Номенклатура", СопутствующийТовар);
				Если СопТов.НайтиСтроки(Отбор).Количество() = 0 Тогда
					
					НоваяСтрока = СопТов.Добавить();
					НоваяСтрока.Номенклатура	 = СопутствующийТовар;
					НоваяСтрока.Код				 = СокрЛП(СопутствующийТовар.Код);
					НоваяСтрока.Артикул			 = СокрЛП(СопутствующийТовар.Артикул);
					НоваяСтрока.ВидНоменклатуры	 = СопутствующийТовар.ВидНоменклатуры;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСопутствующиеТоварыКлиент()
	
	Если мУчетнаяПолитика.ПоказыватьСопутствующиеТовары 
		И ТребуетсяОбновитьСопутствующиеТовары()
	Тогда
		СопутствующиеТовары.Очистить();
		
		ТабРаботы = Объект.Работы;
		ТабТовары = Объект.Товары;
		ТабСопутствующиеТовары = СопутствующиеТовары;
		ЗаполнитьСопутствующиеТовары(ТабСопутствующиеТовары, ТабРаботы, ТабТовары);
		КопироватьДанныеФормы(ТабСопутствующиеТовары, СопутствующиеТовары);
		
		СопутствующиеТоварыКоличество = СопутствующиеТовары.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопутствующиеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяНоменклатура = Элемент.ТекущиеДанные.Номенклатура;
	ОбработкаВнесенияНоменклатуры(ВыбраннаяНоменклатура, , , 1);

	мОбр = СопутствующиеТовары.Количество() - 1;
	Для сч = 0 По мОбр Цикл
		Если СопутствующиеТовары[мОбр - сч].Номенклатура = ВыбраннаяНоменклатура Тогда
			СопутствующиеТовары.Удалить(мОбр - сч);	
		КонецЕсли;
	КонецЦикла;
	
	ОбновлениеОтображения();

КонецПроцедуры

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("Подключаемый_КнопкаФилиалПриНажатииЗавершение", ЭтотОбъект);
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма, , ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатииЗавершение(Результат, ДополнительныеЗначения) Экспорт
	
	ИсходныйФилиал = Результат.ИсходныйФилиал;
	
	// Получение и обработка настроек печати онлайн-чеков филиала.
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Объект.Филиал, Истина);
	
	СпособРасчетаЧекаККМ = ЗаполнитьДепозитнуюОперациюККМ(НастройкаПечатиЧеков);
	Если ЗначениеЗаполнено(СпособРасчетаЧекаККМ) Тогда
		Объект.СпособРасчетаЧекаККМ = СпособРасчетаЧекаККМ;
	КонецЕсли;
	
	ОбновитьВидимостьДепозитнойОперацииККМ();	
	
	// Возможно, требуется замена прейскуранта и склада на основной нового филиала.
	Если Объект.Филиал <> ИсходныйФилиал Тогда
		
		ВыполнитьПроверкуЗаполненияДокументаДляНовогоФилиала();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Чек(Команда)
	
	СуммаОперации	= 0;
	НомерЧекаЭТ		= "";

	ОсуществленАсинхронныйВызовОплатыНАЭТ = Ложь;

	ОписаниеОшибки = "";
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		РаботаСДокументамиКлиент.ПредложитьПечатьКопииЧекаПоДокументу(Объект.Ссылка, УникальныйИдентификатор, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Перед пробитием чека на фискальном регистраторе документ необходимо провести!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма, Истина) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Перед пробитием чека на фискальном регистраторе документ необходимо провести!'"));
		Возврат;	
	КонецЕсли;
	
	// Проверки НСПК
	Если ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК) И НСПК_СтрокаОплаты() = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Отсутствует оплата электронным сертификатом НСПК сертификатом!'"));
		Возврат;				
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК) И НСПК_СтрокаОплаты() <>  Неопределено Тогда 	
		ПоказатьПредупреждение(,НСтр("ru = 'Не заполнен идентификатор корзины НСПК!'"));
		Возврат;	
	КонецЕсли;
	
	// Сверка корзины НСПК
	СтрокаОплатыНСПК = НСПК_СтрокаОплаты();
	Если СтрокаОплатыНСПК <> Неопределено
		И СоставКорзиныНСПКИзменен(Объект.Ссылка, Объект.ИдентификаторКорзиныНСПК, СтрокаОплатыНСПК.Сумма) 
	Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Состав корзины НСПК изменен. Необходимо получить новый идентификатор корзины!'"));
		Возврат;	
	КонецЕсли;
		
	// Проверки при совместной работе нескольких пользователей над документом
	Если Не РаботаСДокументамиКлиент.КонтрольИзмененийДанныхВДругихСеансахКлиент(ЭтаФорма)Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности штрихкода маркируемых товаров по МДЛП
	ТекстОшибки = ПроверкаНеЗаполненыШКМаркируемыхТоваров();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Проверка правильности заполнения числителя и знаменателя МДЛП
	Ошибки = ПроверкаСтрокТоваровМДЛП(Объект.Товары);
	Если Ошибки.Количество() > 0 Тогда
		Для Каждого ТекстОшибки Из Ошибки Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
		// Проверим-перезаполним табличную часть чеков
	ОбновитьЧеки();
	СохранитьИзмененияОбъектаФормы();
	ОбновитьВидимостьЧеков();
	
	Если Объект.Чеки.Количество() > 1 
		И ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК) 
	Тогда
		ПоказатьПредупреждение(,"В документе с электронными сертификатами НСПК может быьт не более одного чека (позиции только по одной системе налогообложения)!");
		Возврат;		
	КонецЕсли;
	
	// Если табличная часть чеков не пуста, проверяем, есть ли в ней непробитые чеки.	
	Если Объект.Чеки.Количество() > 0 Тогда
		ВсеЧекиПробиты = Истина;
		Для Каждого СтрокаЧек Из Объект.Чеки Цикл
			Если СтрокаЧек.НомерЧека = 0 Тогда
				ВсеЧекиПробиты = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВсеЧекиПробиты Тогда
			ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
			РаботаСДокументамиКлиент.ПредложитьПечатьКопииЧекаПоДокументу(Объект.Ссылка, УникальныйИдентификатор, ТекстСообщения);
			Возврат;	
		КонецЕсли;
	
		РаботаСДокументамиКлиент.ВыполнитьОперациюОПКВПК(ЭтаФорма); // Печать чеков.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндикациюЧекиПробиты() Экспорт
	
	Если Объект.СостояниеЧековККМ = ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиПробиты") Тогда
		Элементы.НадписьСтатусЧеков.Заголовок = "Чеки пробиты";
		Элементы.НадписьСтатусЧеков.ЦветТекста =  Новый Цвет(0, 128, 0);
		Элементы.НадписьСтатусЧеков.Видимость = Истина;
		Элементы.ЭкваринговыйТерминал.Доступность = Ложь;
	ИначеЕсли Объект.СостояниеЧековККМ = ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиЧастичноПробиты") Тогда
		Элементы.НадписьСтатусЧеков.Заголовок = "Чеки пробиты частично";
		Элементы.НадписьСтатусЧеков.ЦветТекста = Новый Цвет(83, 106, 194);
		Элементы.НадписьСтатусЧеков.Видимость = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	
	Номенклатура				= ДанныеНоменклатуры.Номенклатура;
	Количество					= ДанныеНоменклатуры.Количество;
	ХарактеристикаНоменклатуры	= ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
	Единица						= ДанныеНоменклатуры.ЕдиницаИзмерения;
	Цена						= ДанныеНоменклатуры.Цена;
	СерияНоменклатуры			= ДанныеНоменклатуры.СерияНоменклатуры;
	Штрихкод					= ДанныеНоменклатуры.Штрихкод;
		
	ДобавленныеСтроки = Новый Массив;
	ОбработкаВнесенияНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Единица, Количество, Неопределено,,,,,ДобавленныеСтроки, СерияНоменклатуры, Штрихкод);
	ОбновитьФормыУчастияПослеИзмененияРабот(ДобавленныеСтроки, Истина);
	
	Возврат Истина;
	
КонецФункции // СШКНоменклатура()

&НаКлиенте
Функция СШККлиент(фКлиент, СШК) Экспорт
	
	Объект.Клиент = фКлиент;
	КлиентПриИзменении(Неопределено);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКСотрудник(Сотрудник, СШК) Экспорт
	
	Объект.Сотрудник = Сотрудник;
	СотрудникПриИзменении(Неопределено);
	Возврат Истина;
	
КонецФункции

// Функция осуществляет обработку считывания штрих-кода клиенты
//
// Параметры:
//  Клиент   - <СправочникСсылка.Клиенты>
//                 - клиент, штрих-код которой был отсканирован.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
&НаКлиенте
Функция СШКСертификат(СертификатКлиента, СШК) Экспорт
	
	фКлиент = ДопСерверныеФункции.ПолучитьРеквизит(СертификатКлиента,"ВладелецКарты");
	
	Если Не ЗначениеЗаполнено(фКлиент) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сертификат/абонемент еще не продан!'"));
		
	Иначе
		Если ЗначениеЗаполнено(Объект.Клиент) И 
			 Объект.Клиент <> фКлиент
		Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Сертификат продан другому клиенту: %1. Изменить клиента в документе?'"),
							фКлиент);
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Объект.Клиент = фКлиент;
				КлиентПриИзменении(Неопределено);
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли Объект.Клиент.Пустая() Тогда
			Объект.Клиент = фКлиент;
			КлиентПриИзменении(Неопределено);
		КонецЕсли;
		
		ПараметрРезультатаОбработки = ЗаполнитьПоСертификату(СертификатКлиента);
		Если ТипЗнч(ПараметрРезультатаОбработки) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДобавленныеСтроки = Новый Массив;
			ОбработкаВнесенияНоменклатуры(ПараметрРезультатаОбработки, Неопределено, Неопределено, 1, , , , СертификатКлиента,,ДобавленныеСтроки);
			ОбновитьФормыУчастияПослеИзмененияРабот(ДобавленныеСтроки, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШККарта(Карта, Клиент, СШК) Экспорт
	
	Если Объект.КартаКлиента <> Карта Тогда
		Объект.КартаКлиента = Карта;
		КартаКлиентаПриИзменении(Неопределено);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Если	ТипКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ШтрихкодМДЛП")
		Или	ТипКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ШтрихкодГС1")
	Тогда
		ТекущаяСтрокаТовары = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущаяСтрокаТовары <> Неопределено
			И ПустаяСтрока(ТекущаяСтрокаТовары.Штрихкод)
		Тогда
			ТекущаяСтрокаТовары.Штрихкод = Штрихкод;
		Иначе
			// Добавляем новую строку
			Номенклатура				= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Количество					= 1;
			ХарактеристикаНоменклатуры	= Неопределено;
			Единица						= Неопределено;
			Цена						= 0;
			СерияНоменклатуры			= Неопределено;
			
			ДобавленныеСтроки = Новый Массив;
			ОбработкаВнесенияНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Единица, Количество, Неопределено,,,, Ложь, ДобавленныеСтроки, СерияНоменклатуры, Штрихкод);
			ОбновитьФормыУчастияПослеИзмененияРабот(ДобавленныеСтроки, Истина);	
		КонецЕсли;
	Иначе
		РаботаСТорговымОборудованиемКлиент.ПоказатьПредупреждениеНеизвестныйШтрихкод();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СШКНеизвестныйКод()

&НаКлиенте
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	ПоказатьПредупреждение(,НСтр("ru='Неизвестный магнитный код! Данный код не присвоен ни одному объекту!'"));
	Возврат Истина;

КонецФункции // СМКНеизвестныйКод()

&НаКлиенте
Функция СМКМагнитнаяКарта(ВладелецКарты, СМК) Экспорт

	Результат = Истина;

	Если ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Клиенты") Тогда
		Объект.Клиент = ВладелецКарты;
		КлиентПриИзменении(Неопределено);
	ИначеЕсли ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.КартыСкидок") Тогда
		Если Объект.КартаКлиента <> ВладелецКарты Тогда
			Объект.КартаКлиента = ВладелецКарты;
			КартаКлиентаПриИзменении(Неопределено);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Сертификаты") Тогда
		СШКСертификат(ВладелецКарты, "");
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

&НаКлиенте
Процедура ПодсветитьКнопкуПересчетаСкидки()
	Если мУчетнаяПолитика.ИспользоватьСкидки
		И ЕстьСтрокиПродаж()
	Тогда
		НужнаИндикация = Истина;
		
		ИменаТЧ = ОбщегоНазначенияКлиентСервер.НовыйМассив("Работы", "Товары");
		Если РаботаСоСкидкамиПовтИсп.ЕстьСкидкиНаСертификаты() Тогда
			ИменаТЧ.Добавить("Сертификаты");
			ИменаТЧ.Добавить("ПополнениеСертификатов");
		КонецЕсли;
		
		ПрограммаОбслуживания = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(Объект, "Документ", Неопределено); // Полис.
		
		Если НужнаИндикация И ЗначениеЗаполнено(ПрограммаОбслуживания) Тогда
			
			НужнаИндикация = Ложь;
			 
			// Ищем хотя бы одну строку, для которой актуальны скидки
			ИменаТЧ = ОбщегоНазначенияКлиентСервер.НовыйМассив("Работы", "Товары");
			Если РаботаСоСкидкамиПовтИсп.ЕстьСкидкиНаСертификаты() Тогда
				ИменаТЧ.Добавить("Сертификаты");
				ИменаТЧ.Добавить("ПополнениеСертификатов");
			КонецЕсли;
			
			Для Каждого ИмяТЧ Из ИменаТЧ Цикл
				Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
					Если СтрокаТЧ.НеОплачиваетсяПолисом Тогда
						НужнаИндикация = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НужнаИндикация Тогда Прервать; КонецЕсли;
			КонецЦикла;
			
			НужнаИндикация = Ложь;
		КонецЕсли;
		
		// Изменение хранимого признака и индикации.
	    Если НужнаИндикация Тогда
			Элементы.ПересчитатьСкидки.ЦветФона = мЦветФонаКнопкиПересчитатьСкидку;
			Элементы.ПересчитатьСкидки.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Иначе
			ВыключитьИндикациюНуженПересчетСкидки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьИндикациюНуженПересчетСкидки()
	Элементы.ПересчитатьСкидки.ЦветФона = Новый Цвет();
	Элементы.ПересчитатьСкидки.Отображение = ОтображениеКнопки.Текст;
КонецПроцедуры

&НаКлиенте
Процедура НатуральныеСкидкиПослеУдаления(Элемент)
	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КонвертироватьСкидкиВДерево(ТабЧастьСкидки, ДеревоСкидки)
	
	Перем флВсеСтрокиИспользуютТекСкидку;	
	
    ДеревоСкидки.ПолучитьЭлементы().Очистить();
	
	ДанныеДляКонвертации = СкидкиДанныеТабличнойЧастиДляКонвертацииВДерево(ТабЧастьСкидки);
	ТЧ = ДанныеДляКонвертации.МассивСтрокСкидок;
	ТипыСкидок = ДанныеДляКонвертации.ТипыСкидок;
	
	ТекущаяСкидка = Неопределено;
	ТекущаяНоменклатура = Неопределено;
	ЭлементыДерева = ДеревоСкидки.ПолучитьЭлементы();
	
	// Заполнение дерева на форме
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		
		Если ТекущаяСкидка = Неопределено ИЛИ ТекущаяСкидка.Скидка <> СтрокаТЧ.Скидка Тогда
			СтрокаДереваССкидкой = ЭлементыДерева.Добавить();
			СтрокаДереваССкидкой.Скидка = СтрокаТЧ.Скидка;
			
			// Вывод итогового количества бонусов
			Если ТипыСкидок.Получить(СтрокаДереваССкидкой.Скидка) = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Бонусы") Тогда
				мсСтр = ОбщегоНазначенияБИТКлиентСервер.НайтиСтрокиКоллекции(ТЧ, Новый Структура("Скидка, ПрименятьСкидку", СтрокаТЧ.Скидка, Истина));
				КоличествоИспользованныхБонусов = 0;
				Для Каждого СтрСкидки Из мсСтр Цикл
					КоличествоИспользованныхБонусов = КоличествоИспользованныхБонусов + СтрСкидки.КоличествоБонусов;
				КонецЦикла;
				СтрокаДереваССкидкой.КоличествоБонусов = КоличествоИспользованныхБонусов;
			КонецЕсли;
			
			// Установка галочки применимости для всей ветки скидки (предыдущей ветки).
			Если ТекущаяСкидка <> Неопределено 
				И флВсеСтрокиИспользуютТекСкидку
			Тогда
				ТекущаяСкидка.ПрименятьСкидку = Истина;
			КонецЕсли;
			флВсеСтрокиИспользуютТекСкидку = Истина;
			ТекущаяСкидка = СтрокаДереваССкидкой;
		КонецЕсли;	
		Если СтрокаТЧ.Номенклатура <> ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			Если ТекущаяНоменклатура = Неопределено ИЛИ ТекущаяНоменклатура.Номенклатура <> СтрокаТЧ.Номенклатура Тогда
				
				ЭлементыСкидок = СтрокаДереваССкидкой.ПолучитьЭлементы();
				СтрокаДереваСНоменклатурой = ЭлементыСкидок.Добавить(); 
				ЗаполнитьЗначенияСвойств(СтрокаДереваСНоменклатурой, СтрокаТЧ,,"Скидка");
				
				флВсеСтрокиИспользуютТекСкидку = флВсеСтрокиИспользуютТекСкидку И СтрокаДереваСНоменклатурой.ПрименятьСкидку;

			КонецЕсли;
		Иначе
			СтрокаДереваССкидкой.КлючСтроки = СтрокаТЧ.КлючСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяСкидка <> Неопределено 
		И флВсеСтрокиИспользуютТекСкидку
	Тогда
		ТекущаяСкидка.ПрименятьСкидку = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СкидкиДанныеТабличнойЧастиДляКонвертацииВДерево(Знач ТабличнаяЧасть)
	
	Результат = Новый Структура("МассивСтрокСкидок, ТипыСкидок");
	
	ТабличнаяЧасть.Сортировать("Скидка УБЫВ,Номенклатура УБЫВ");
	Результат.МассивСтрокСкидок = ОбщегоНазначенияКлиентСервер.ТаблицуЗначенийВМассивСтруктур(ТабличнаяЧасть.Выгрузить());
	
	ВидыСкидокДокумента = Новый Массив;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(ВидыСкидокДокумента, СтрокаТЧ.Скидка);
	КонецЦикла;
	Результат.ТипыСкидок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыСкидокДокумента, "ТипСкидки");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДеревоСкидкиПрименятьСкидкуПриИзменении(Элемент)
	
	ТД = Элементы.ДеревоСкидки.ТекущиеДанные;
	Если ТД.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда 
		Для Каждого ЭлементТД Из ТД.ПолучитьЭлементы() Цикл
			ЭлементТД.ПрименятьСкидку = ТД.ПрименятьСкидку;
		КонецЦикла;
	Иначе
		флПрервать = Ложь;
		ИдентификаторТекЭлемента = Элементы.ДеревоСкидки.ТекущаяСтрока;
		Для Каждого ЭлементВерхнегоУровня Из ДеревоСкидки.ПолучитьЭлементы() Цикл
			Для Каждого ЭлементНижнегоУровня Из ЭлементВерхнегоУровня.ПолучитьЭлементы() Цикл
				Если ЭлементНижнегоУровня.ПолучитьИдентификатор() = ИдентификаторТекЭлемента Тогда
					
					флИспВсе = Истина;
					Для Каждого ЭлементНижнегоУровня Из ЭлементВерхнегоУровня.ПолучитьЭлементы() Цикл
						флИспВсе = флИспВсе И ЭлементНижнегоУровня.ПрименятьСкидку;
					КонецЦикла;
					ЭлементВерхнегоУровня.ПрименятьСкидку = флИспВсе;
					флПрервать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если флПрервать Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазвернутыеУзлыДереваСкидок = ПолучитьРазвернутыеУзлыДереваСкидок();
	
	РасчитатьСкидки(мБылаРучнаяПравкаОплаты);
	
	УстановитьСостояниеРазвернутостиУзловДереваСкидок(РазвернутыеУзлыДереваСкидок);
	
	ИнициализацияТрудовыхРолей();	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРазвернутыеУзлыДереваСкидок()
	
	РазвернутыеУзлыДереваСкидок = Новый Массив;
	
	Для Каждого УзелВидаСкидок Из ДеревоСкидки.ПолучитьЭлементы() Цикл
		Если Элементы.ДеревоСкидки.Развернут(УзелВидаСкидок.ПолучитьИдентификатор()) Тогда
			РазвернутыеУзлыДереваСкидок.Добавить(УзелВидаСкидок.Скидка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазвернутыеУзлыДереваСкидок;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСостояниеРазвернутостиУзловДереваСкидок(РазвернутыеУзлыДереваСкидок)
	
	Для Каждого УзелВидаСкидок Из ДеревоСкидки.ПолучитьЭлементы() Цикл
		Если РазвернутыеУзлыДереваСкидок.Найти(УзелВидаСкидок.Скидка) <> Неопределено Тогда
			Элементы.ДеревоСкидки.Развернуть(УзелВидаСкидок.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеДереваСкидок()
	
	// Убираем скидки
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	НовыйЭлементУсловногоОформления.Использование = Истина;
	
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;         
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСкидки.Скидка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Справочники.ВидыСкидок.ПустаяСсылка();
	
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСкидкиСкидка");
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Убираем номенклатуру
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	НовыйЭлементУсловногоОформления.Использование = Истина;

	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;    
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСкидки.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСкидкиНоменклатура");
	
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСкидкиТабЧасть");
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонвертироватьДеревоВСкидки(Знач ДанныеФормыСкидкиТЧ, Знач ДанныеФормыДеревоСкидки) 
	
	СкидкиТЧ = ДанныеФормыСкидкиТЧ.Выгрузить();
	СкидкиТЧ.Очистить();

	Для Каждого СтрокаСкидки Из ДанныеФормыДеревоСкидки.ПолучитьЭлементы() Цикл
		
		Скидка = СтрокаСкидки.Скидка;
		Для Каждого СтрокаНоменклатуры Из СтрокаСкидки.ПолучитьЭлементы() Цикл
			
			СтрокаТЧ = СкидкиТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНоменклатуры,,"Скидка");
			СтрокаТЧ.Скидка = Скидка;
			
		КонецЦикла;
		
		Если СтрокаСкидки.ПолучитьЭлементы().Количество() = 0 Тогда
			
			СтрокаТЧ = СкидкиТЧ.Добавить();	
			СтрокаТЧ.Скидка = Скидка;
			СтрокаТЧ.КлючСтроки = СтрокаСкидки.КлючСтроки;
			СтрокаТЧ.ПрименятьСкидку = СтрокаСкидки.ПрименятьСкидку;
			
		КонецЕсли;
	КонецЦикла;

	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СкидкиТЧ);
КонецФункции

&НаКлиенте
Процедура ДеревоСкидкиКоличествоБонусовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСкидки.ТекущиеДанные;
	Если ТекущиеДанные.КоличествоБонусов >= ТекущиеДанные.БонусМакс Тогда
		ТекущиеДанные.РучноеРедактирование = Ложь;
		ТекущиеДанные.КоличествоБонусов = ТекущиеДанные.БонусМакс;
		
	ИначеЕсли ТекущиеДанные.КоличествоБонусов = 0 
		И ТекущиеДанные.ПрименятьСкидку 
	Тогда                                              
		ТекущиеДанные.ПрименятьСкидку = Ложь;
	Иначе
		ТекущиеДанные.РучноеРедактирование = Истина;
	КонецЕсли;
	
	РасчитатьСкидки(мБылаРучнаяПравкаОплаты);
	
КонецПроцедуры

&НаКлиенте
Функция СуммаБонусныхСкидокДокумента()
	
	Итог = 0;
	
	Если Объект.Скидки.Количество() <> 0 Тогда
		ВидыСкидокДокумента = Новый Массив;
		Для Каждого СтрокаСкидки Из Объект.Скидки Цикл
			ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(ВидыСкидокДокумента, СтрокаСкидки.Скидка);
		КонецЦикла;
		ТипыСкидокДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыСкидокДокумента, "ТипСкидки");
		ТипСкидкиБонусы = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Бонусы");
		
		// Расчет суммы бонусов.
		Для Каждого СтрокаСкидки Из Объект.Скидки Цикл
			
			Если ТипыСкидокДокумента.Получить(СтрокаСкидки.Скидка) = ТипСкидкиБонусы Тогда
				Итог = Итог + СтрокаСкидки.КоличествоБонусов;
	 		КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

&НаКлиенте
Процедура ДокументПриИзменении(Элемент)
	
	Перем ДанныеПолиса;
	
	Если мИнтерактивноеИзменениеПолиса <> Истина Тогда // Неопределено либо Ложь.
		Возврат;
	КонецЕсли;
	
	ВидПолисаИзменен = Ложь;
	ВидПолисаЗаменен = Ложь;
	ДобавитьВозможноВВопросПересчета = мТекущийВидПолиса = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		
		ДанныеПолиса = ПолисПриИзмененииПолучитьДанныеНаСервере(Объект.Документ,Объект.Дата, Объект.Филиал);
		
		Если ЗначениеЗаполнено(ДанныеПолиса.ТекстОшибкиПолисНеДействителен) Тогда
			ПоказатьПредупреждение(,ДанныеПолиса.ТекстОшибкиПолисНеДействителен);
		КонецЕсли;
		
		НовыйВидПолиса = ДанныеПолиса.ВидПолиса;
		Если мТекущийВидПолиса <> НовыйВидПолиса Тогда
			ВидПолисаИзменен = Истина;
			ВидПолисаЗаменен = ВидПолисаИзменен И ЗначениеЗаполнено(мТекущийВидПолиса); // Еще старый вид полиса.
			мТекущийВидПолиса = НовыйВидПолиса;
			мАдресНоменклатураВидаПолиса = Неопределено;
		КонецЕсли;
	Иначе
		мТекущийВидПолиса = "";
	КонецЕсли;
	
	Если ВидПолисаИзменен Тогда
		Если ЕстьСтрокиПродаж(Ложь) Тогда
			ПоказатьПредупреждение_ПозицииПолисаБудутПересчитаны(ВидПолисаЗаменен);
			// Обновим галочки "Не оплачивается полисом" и цену.
			ЗаполнитьСтоимостьОпличиваемостьПозицийПоПолису(мАдресНоменклатураВидаПолиса);
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Документ) Тогда
		// Обновим галочки "Не оплачивается полисом" и цену.
		ЗаполнитьСтоимостьОпличиваемостьПозицийПоПолису(мАдресНоменклатураВидаПолиса);
	КонецЕсли;		
	
	ОбновитьСтоимостьДокумента();
	УправлениеВидимостьКолонкиНеОплачиваетсяПолисом();
	
	Если Элементы.Найти("СтраховыеПолисыОткрытьПараметрыРеестра") <> Неопределено Тогда
		Элементы.СтраховыеПолисыОткрытьПараметрыРеестра.Видимость = ЗначениеЗаполнено(Объект.Документ)
			И ДанныеПолиса.РеестрТребуетМедицинскихПараметров;
	КонецЕсли;
	Элементы.ПерезаполнитьОплачиваетсяПоПолису.Видимость = ЗначениеЗаполнено(Объект.Документ);
	
	мИнтерактивноеИзменениеПолиса = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждение_ПозицииПолисаБудутПересчитаны(ВидПолисаЗаменен)
	
	Если ВидПолисаЗаменен Тогда
		ПоказатьПредупреждение(, НСтр("ru='Цены и оплачиваемость по полису будут пересчитаны'"), 5);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	мИнтерактивноеИзменениеПолиса = (ВыбранноеЗначение <> Объект.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОчистка(Элемент, СтандартнаяОбработка)
	
	мИнтерактивноеИзменениеПолиса = ЗначениеЗаполнено(Объект.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьКолонкиНеОплачиваетсяПолисом()
	
	флОтображать = Не Объект.Документ.Пустая() И мУчетнаяПолитика.ИспользоватьСтраховыеПолисы;
	
	Элементы.РаботыНеОплачиваетсяПолисом.Видимость		= флОтображать;
	Элементы.МатериалыНеОплачиваетсяПолисом.Видимость	= флОтображать;
	Элементы.ТоварыНеОплачиваетсяПолисом.Видимость		= флОтображать;
	Элементы.СертификатыНеОплачиваетсяПолисом.Видимость	= флОтображать;
	Элементы.ПополнениеСертификатовНеОплачиваетсяПолисом.Видимость = флОтображать;
	
	Элементы.РаботыСуммаНеПоПолису.Видимость		= флОтображать;
	Элементы.МатериалыСуммаНеПоПолису.Видимость		= флОтображать;
	Элементы.ТоварыСуммаНеПоПолису.Видимость		= флОтображать;
	Элементы.СертификатыСуммаНеПоПолису.Видимость	= флОтображать;
	                                       
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтоимостьОпличиваемостьПозицийПоПолису(АдресНоменклатурыПолиса)
	
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		Если ЗначениеЗаполнено(АдресНоменклатурыПолиса) Тогда
			НоменклатураПолиса = ПолучитьИзВременногоХранилища(АдресНоменклатурыПолиса);
			Если НоменклатураПолиса = Неопределено Тогда
				АдресНоменклатурыПолиса = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(АдресНоменклатурыПолиса) Тогда
			НоменклатураПолиса = МедицинскоеСтрахование.ДопустимаяНоменклатураПолиса(Объект.Документ.ВидПолиса);
			АдресНоменклатурыПолиса = ПоместитьВоВременноеХранилище(НоменклатураПолиса);
		КонецЕсли;
	КонецЕсли;
	
	МатериалыВходятВУслугуПолиса = Не Объект.Документ.ВидПолиса.УчетПлатныхМатериаловОбособленноОтУслуг;
	ПрейскурантВидаПолиса = Объект.Документ.ВидПолиса.Прейскурант;
	
	// Перебор строк документа.
	мсТЧ = Новый Массив;
	мсТЧ.Добавить(Объект.Работы);
	мсТЧ.Добавить(Объект.Материалы);
	мсТЧ.Добавить(Объект.Товары);
	Для Каждого ТЧДокумента Из мсТЧ Цикл
		Для Каждого СтрокаТЧ Из ТЧДокумента Цикл
			
			Если ТЧДокумента = Объект.Работы И ЗначениеЗаполнено(СтрокаТЧ.Сертификат) Тогда Продолжить; КонецЕсли; // Не обрабатываем для услуг по сертификату.
			
			Если ЗначениеЗаполнено(Объект.Документ) Тогда
				
				Если МатериалыВходятВУслугуПолиса И ТЧДокумента = Объект.Материалы Тогда
					Номенклатура = СтрокаТЧ.Работа;
				Иначе
					Номенклатура = СтрокаТЧ.Номенклатура;
				КонецЕсли;
					
				НеОплачиваетсяПолисом = (НоменклатураПолиса.Количество() <> 0 
										И НоменклатураПолиса.Найти(Номенклатура) = Неопределено);
				СтрокаТЧ.НеОплачиваетсяПолисом = НеОплачиваетсяПолисом;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Документ)
				Или Не СтрокаТЧ.НеОплачиваетсяПолисом
			Тогда
				СтрокаТЧ.СуммаНеПоПолису = 0;
			КонецЕсли;
			
			ЗаполнитьСтоимостьОпличиваемостьПозицийПоПолису_УстановитьЦенуСтроки(СтрокаТЧ, ПрейскурантВидаПолиса);
			
		КонецЦикла;
	КонецЦикла;
	ОчиститьЦеныПоВхождениюМатериаловВСтоимостьУслуг(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтоимостьОпличиваемостьПозицийПоПолису_УстановитьЦенуСтроки(СтрокаТЧ, ПрейскурантВидаПолиса)
	
	// Определение прейскуранта, актуального для строки продажи
	Если СтрокаТЧ.НеОплачиваетсяПолисом 
		Или Не ЗначениеЗаполнено(Объект.Документ)
		Или Не ЗначениеЗаполнено(ПрейскурантВидаПолиса)
	Тогда 
		Прейскурант = Объект.Прейскурант;
	Иначе
		Прейскурант = ПрейскурантВидаПолиса;
		Если Не ЗначениеЗаполнено(Прейскурант) Тогда
			Прейскурант = Объект.Прейскурант;
			// См. также ОтраслевыеДополнения.ПолучитьПрейскурантДляСтрокиТабличнойЧасти
			//Если Не ЗначениеЗаполнено(Прейскурант) Тогда 
			//	Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(Объект.Филиал);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет цены и сумм строки
	СтараяЦена = СтрокаТЧ.Цена;
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		НоваяЦена = 0;
	ИначеЕсли СтрокаТЧ.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		НоваяЦена = Ценообразование.ПолучитьЦену(Прейскурант, СтрокаТЧ.Номенклатура, Объект.Дата, СтрокаТЧ.ХарактеристикаНоменклатуры, Неопределено).Цена;
	Иначе
		НоваяЦена = Ценообразование.ПолучитьЦену(Прейскурант, СтрокаТЧ.Номенклатура, Объект.Дата, СтрокаТЧ.ХарактеристикаНоменклатуры, СтрокаТЧ.ЕдиницаИзмерения).Цена;
	КонецЕсли;
	
	Если СтараяЦена = НоваяЦена Или 
		 НоваяЦена = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.Цена = НоваяЦена;
	
	РаботаСДокументамиСервер.РассчитатьСуммуСкидкиСтроки(СтрокаТЧ);
	
	СтрокаТЧ.СуммаНеПоПолису = Мин(СтрокаТЧ.СуммаНеПоПолису, СтрокаТЧ.Сумма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВозврат(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ДокументОснование, ВидОперации",
																  Объект.Ссылка,
																  ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту")));
	// Подстановка того же комплексного расчета															  
	КомплексныйРасчет = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(Объект, "КомплексныйРасчет");
	Если ЗначениеЗаполнено(КомплексныйРасчет) Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("КомплексныйРасчет", КомплексныйРасчет);
	КонецЕсли;

	ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта",ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстатокАвансаДляЧека(Команда)
	Объект.СуммаЗачетаАвансаПродажиВДолг = Макс(0, -РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(Объект.Клиент, Объект.Дата, Объект.КомплексныйРасчет));
	ЛогическийКонтрольСуммыЗачетаАвансаПродажиВДолг();
КонецПроцедуры

// При создании формы на сервере
&НаСервере
Процедура УстановитьВидимость_ПриСозданииНаСервере()
	
	мВестиУчетПоХарктеристикам = мУчетнаяПолитика.ВестиУчетПоХарактеристикам;
	Элементы.РаботыХарактеристикаНоменклатуры.Видимость = мВестиУчетПоХарктеристикам;
	Элементы.ТоварыХарактеристикаНоменклатуры.Видимость = мВестиУчетПоХарктеристикам;
	Элементы.МатериалыХарактеристикаНоменклатуры.Видимость = мВестиУчетПоХарктеристикам;
	Элементы.НатуральныеСкидкиХарактеристикаНоменклатуры.Видимость = мВестиУчетПоХарктеристикам И РаботаСоСкидками.ЕстьНатуральныеСкидкиСХарактеристиками();
	Элементы.ГруппаКомандыЗаполненияТрудовыхРолей.Видимость = ЗначениеЗаполнено(мУчетнаяПолитика.ФормаУчастияДляНаправившегоВрача);
	Элементы.ДеревоСкидкиБонусМакс.Видимость = РаботаСоСкидками.ЕстьДействующиеБонусныеСкидки() Или Объект.Скидки.Итог("БонусМакс") > 0;
	Элементы.ДеревоСкидкиКоличествоБонусов.Видимость = Элементы.ДеревоСкидкиБонусМакс.Видимость;
	
	// Установка видимости по виду операции.
	ПоляОбъекта = Новый Структура("ВидОперации, ДокументОснование, РучноеРедактированиеСкидок");
	ЗаполнитьЗначенияСвойств(ПоляОбъекта, Объект);
	УстановитьВидимостьПоТипуОперации_БезКонтекста(Элементы, ПоляОбъекта, мУчетнаяПолитика)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоТипуОперации()
	
	УстановитьВидимостьПоТипуОперации_БезКонтекста(Элементы, Объект, мУчетнаяПолитика);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПоТипуОперации_БезКонтекста(Элементы, Объект, мУчетнаяПолитика)
	
	ЭтоПродажа = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ПродажаКлиенту");
	
	Элементы.Натуральные_Скидки.Видимость = ЭтоПродажа И РаботаСоСкидками.ИспользуютсяНатуральныеСкидки();	
	Элементы.ДлительностьРаботПродолжительность.Видимость = ЭтоПродажа И мУчетнаяПолитика.ВестиУчетДлительностиРабот;
	Элементы.Сопутствующие_Товары.Видимость = мУчетнаяПолитика.ПоказыватьСопутствующиеТовары И ЭтоПродажа;
	Элементы.ДокументОснование.Заголовок = ?(ЭтоПродажа, НСтр("ru='Заявка клиента'"), НСтр("ru='Документ основание'"));
	Если ЭтоПродажа Тогда
		Если ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.Заявка")
			И Не ЗначениеЗаполнено(Объект.ДокументОснование)
		Тогда
			Объект.ДокументОснование = ПредопределенноеЗначение("Документ.Заявка.ПустаяСсылка");
		КонецЕсли;
	Иначе
		Если ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			Объект.ДокументОснование = ПредопределенноеЗначение("Документ.ОказаниеУслуг.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	ЭтоВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту"));
	Элементы.НадписьВозврата.Видимость = ЭтоВозврат;
	Если ЭтоВозврат И мУчетнаяПолитика.ПоУмолчаниюРучноеРедактированиеСкидок Тогда
		Объект.РучноеРедактированиеСкидок = Истина;	
	КонецЕсли; 
	Элементы.РучноеРедактированиеСкидок.Доступность = Не ЭтоВозврат Или Не мУчетнаяПолитика.ПоУмолчаниюРучноеРедактированиеСкидок;	 	
		
	Элементы.ФормаОформитьВозврат.Видимость = ЭтоПродажа;
	Элементы.ДатаНачалаВремя.Видимость		= ЭтоПродажа;
	Элементы.ДатаОкончанияВремя.Видимость	= ЭтоПродажа;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЗачетаАвансаПрипродажеВДолг()
	
	ПрошлаяВидимость = Элементы.ГруппаСуммаЗачетаАвансаПродажиВДолг.Видимость;
	Элементы.ГруппаСуммаЗачетаАвансаПродажиВДолг.Видимость = НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи
													 И Элементы.СпособРасчетаЧекаККМ.Видимость
													 И Объект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Кредит");
	// Всега имеет смысл обновить текущий депозит.
	Если Элементы.ГруппаСуммаЗачетаАвансаПродажиВДолг.Видимость
		И Не ПрошлаяВидимость
	Тогда
		Объект.СуммаЗачетаАвансаПродажиВДолг = Макс(0, -РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(Объект.Клиент, Объект.Дата, Объект.КомплексныйРасчет));
		ЛогическийКонтрольСуммыЗачетаАвансаПродажиВДолг();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодменюВыбораТипаОперации()
	
	МассивТипов = Перечисления.ВидыОперацийОказанияУслуг.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
	
	РаботаСДиалогамиСервер.УстановитьПодменюОперации(МассивТипов, ЭтаФорма);
				
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)
	Если Команда <> Неопределено Тогда
		ДействияФормыДействиеУстановитьОперациюСервер(Команда.Имя);
		УстановитьВидимостьПоТипуОперации();
		ОбновитьТекстГиперссылкиЗаявок();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ДействияФормыДействиеУстановитьОперациюСервер(КомандаИмя)
	
	Если ЗначениеЗаполнено(КомандаИмя) Тогда
		// Найти новое значение вида операции.
		Объект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг[КомандаИмя];
	КонецЕсли;
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(Объект, Истина, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНеОплачиваетсяПолисомПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ОбработкаРеквизитаУпр("Работы.ХарактеристикаНоменклатуры",ТекущиеДанные,ЭтаФорма);
		Если ТекущиеДанные.НеОплачиваетсяПолисом Тогда 
			ТекущиеДанные.СуммаНеПоПолису = 0;
		КонецЕсли;
	КонецЕсли;
	ОбновитьСтоимостьДокумента();
	
	
	НеОплачиваетсяПолисомПриИзменении(Элементы.Работы, "Работы.ХарактеристикаНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНеОплачиваетсяПолисомПриИзменении(Элемент)
	
	НеОплачиваетсяПолисомПриИзменении(Элементы.Материалы, "Материалы.ХарактеристикаНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНеОплачиваетсяПолисомПриИзменении(Элемент)
	
	НеОплачиваетсяПолисомПриИзменении(Элементы.Товары, "Товары.ХарактеристикаНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыНеОплачиваетсяПолисомПриИзменении(Элемент)
	
	НеОплачиваетсяПолисомПриИзменении(Элементы.Сертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОплачиваетсяПолисомПриИзменении(ТаблицаФормы, ПолноеИмяРеквизита = "")
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПолноеИмяРеквизита) Тогда
			ОбработкаРеквизитаУпр(ПолноеИмяРеквизита, ТекущиеДанные, ЭтотОбъект);
		КонецЕсли;
		
		Если ТаблицаФормы = Элементы.Материалы
			И ТекущиеДанные.Цена <> 0
		Тогда
			ОбъектКопия = Объект;
			ОчиститьЦеныПоВхождениюМатериаловВСтоимостьУслуг(ОбъектКопия, ТекущиеДанные.КлючСтроки);
			КопироватьДанныеФормы(ОбъектКопия.Материалы, Объект.Материалы);
		КонецЕсли;
		
		Если ТекущиеДанные.НеОплачиваетсяПолисом Тогда 
			ТекущиеДанные.СуммаНеПоПолису = 0;
		КонецЕсли;
	КонецЕсли;
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявку(Команда)
	
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		ЗначенияЗаполнения = Новый Структура("Клиент, Сотрудник", Объект.Клиент, Объект.Сотрудник);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.Заявка.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриходныйКассовыйОрдер(Команда)
	
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		Если Объект.СуммаДокумента<=Объект.Оплата.Итог("Сумма") Тогда
			Ответ = Вопрос(НСтр("ru='Документ полностью оплачен, добавление дополнительного кассового ордера не требуется!
							|Все равно создать?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПлатежнойКартой(Команда)
	
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		СуммаНедоплаты = Макс(0, Объект.СуммаДокумента - Объект.Оплата.Итог("Сумма"));
		Если СуммаНедоплаты = 0 Тогда
			Ответ = Вопрос(НСтр("ru='Документ полностью оплачен, добавление дополнительного прихода денег не требуется!
							|Все равно создать?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗначенияЗаполнения = Новый Структура("Клиент, СуммаДокумента, ДокументОснование", Объект.Клиент, СуммаНедоплаты, Объект.Ссылка);
		Если Объект.Свойство("КомплексныйРасчет") Тогда
			ЗначенияЗаполнения.Вставить("Сделка", Объект["КомплексныйРасчет"]);
		КонецЕсли;
		
		Если ИнтеграцияСБП.ЭтоЭквайринговыйТерминалСБП(ЭквайринговыйТерминалНаФорме) Тогда
			ЗначенияЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминалНаФорме);	
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.ОплатаПлатежнойКартой.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратПоПлатежнойКарте(Команда)
	
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтотОбъект) Тогда
		
		ДанныеОплаты = Неопределено;
		ТекстВопросаНетБезнала = НСтр("ru='Безналичная оплата отсутствует.'") + " " + НСтр("ru='Продолжить?'");
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ПродажаКлиенту") Тогда
			ДокументПродажи = Объект.Ссылка;
		Иначе
			ДокументПродажи = Объект.ДокументОснование;
			
			Если ТипЗнч(ДокументПродажи) <> Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ДанныеОплаты = Новый Структура("СсылочныйНомер, НомерКарты, СуммаОплаты", "", "", 0);
				Если Вопрос(ТекстВопросаНетБезнала, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если Оплата_СтрокиОплатыБезналом().Количество() > 0 Тогда
				ДанныеОплаты = Новый Структура("СсылочныйНомер, НомерКарты, СуммаОплаты", "", "", 0);
				Если Объект.НомерЧекаККМ <> 0 Тогда
					ТекстВопроса = НСтр("ru='Возврат по эквайрингу уже отражен в документе и проведен в терминале.'");
				Иначе
					ТекстВопроса = НСтр("ru='Возврат по эквайрингу уже отражен в документе.'");
				КонецЕсли;
				
				ТекстВопроса = ТекстВопроса + " " + НСтр("ru='Продолжить?'");
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеОплаты = Неопределено Тогда
			ДанныеОплаты = ПолучитьДанныеОплатыДляБезнала(ДокументПродажи, НСПК_СпособОплаты);
			Если ЗначениеЗаполнено(ДанныеОплаты.ОписаниеОшибки) Тогда
				ПоказатьПредупреждение(, ДанныеОплаты.ОписаниеОшибки);
				Возврат;
			КонецЕсли;
			Если ДанныеОплаты.СуммаОплаты = 0 Тогда
				Если Вопрос(ТекстВопросаНетБезнала, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СсылочныйНомер	= ДанныеОплаты.СсылочныйНомер;
		НомерКарты		= ДанныеОплаты.НомерКарты;
		СуммаВозврата	= ДанныеОплаты.СуммаОплаты;
		
		ЗначенияЗаполнения = Новый Структура("Клиент, СуммаДокумента, ДокументОснование, СсылочныйНомер, НомерКарты");
		ЗначенияЗаполнения.Клиент			 = Объект.Клиент;
		ЗначенияЗаполнения.СуммаДокумента	 = СуммаВозврата;
		ЗначенияЗаполнения.ДокументОснование = Объект.Ссылка;
		ЗначенияЗаполнения.СсылочныйНомер	 = СсылочныйНомер;
		ЗначенияЗаполнения.НомерКарты		 = НомерКарты;
		Если Объект.Свойство("КомплексныйРасчет") Тогда
			ЗначенияЗаполнения.Вставить("Сделка", Объект["КомплексныйРасчет"]);
		КонецЕсли;
		
		Если ИнтеграцияСБП.ЭтоЭквайринговыйТерминалСБП(ЭквайринговыйТерминалНаФорме) Тогда
			ЗначенияЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминалНаФорме);	
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.ВозвратПоПлатежнойКарте.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Сертификат)
	Тогда
		ЗначенияДоступностиПолейТабЧасти = ПолучитьДоступностьПолейПоТипуСертификата(ТекущиеДанные.Сертификат);
		Для Каждого ЭлементСтруктуры Из ЗначенияДоступностиПолейТабЧасти Цикл
			Элементы[ЭлементСтруктуры.Ключ].ТолькоПросмотр = ЭлементСтруктуры.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(СертификатыКлиентов.ПолучитьУслугиСертификата(Элементы.ПополнениеСертификатов.ТекущиеДанные.Сертификат));
	
	Если СертификатыКлиентов.СертификатПополняемСписком(Элементы.ПополнениеСертификатов.ТекущиеДанные.Сертификат) Тогда
		Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;		
	Иначе                                              
		Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораЗначения = Новый Массив;
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаУслуги", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("НаОплату", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("СертификатыТолькоВладельца", ЗначениеЗаполнено(Объект.Клиент)));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ВладелецСертификата", Объект.Клиент));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ПроданныеСертификаты", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ТолькоПополняемые", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("ПоказыватьПросроченные", Истина));
	ПараметрыВыбораЗначения.Добавить(Новый ПараметрВыбора("Дата", Объект.Дата));
	
	СертификатНачалоВыбора_ДобавитьПроданныеЭтимДокументом(ПараметрыВыбораЗначения);
	
	Элементы.ПополнениеСертификатовСертификат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовСертификатПриИзменении(Элемент)
	
	ОпределитьВидимостьКолонокПополненияСертификата();
	
	ТекСтрока = Элементы.ПополнениеСертификатов.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ВидСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Сертификат, "ВидСертификата");
		ПополнениеПоЦенеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидСертификата, "ПополнениеПоЦенеСертификата");
		Если ПополнениеПоЦенеСертификата Тогда
			ТекСтрока.Сумма = ПолучитьЦенуВидаСертификата(Объект.Прейскурант, ТекСтрока.Сертификат, Объект.Дата);
			ТекСтрока.Количество = 1;
			ТекСтрока.Цена = ТекСтрока.Сумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовКоличествоПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("ПополнениеСертификатов.Количество",Элементы.ПополнениеСертификатов.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовЦенаПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("ПополнениеСертификатов.Цена",Элементы.ПополнениеСертификатов.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовСуммаПриИзменении(Элемент)
	ОбработкаРеквизитаУпр("ПополнениеСертификатов.Сумма",Элементы.ПополнениеСертификатов.ТекущиеДанные,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПополнениеСертификатовНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СертификатНеКомплексный(Элементы.ПополнениеСертификатов.ТекущиеДанные.Сертификат) Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруСтрокиПополнениеСертификатов(СтрокаПополнениеСертификатов)
	
	СтруктураСтроки = Новый Структура;
	
	СтруктураСтроки.Вставить("НомерСтроки", СтрокаПополнениеСертификатов.НомерСтроки);
	СтруктураСтроки.Вставить("Количество", СтрокаПополнениеСертификатов.Количество);
	СтруктураСтроки.Вставить("Цена", СтрокаПополнениеСертификатов.Цена);
	СтруктураСтроки.Вставить("Сумма", СтрокаПополнениеСертификатов.Сумма);
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СертификатНеКомплексный(Сертификат)
	Возврат НЕ (Сертификат.ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги И Сертификат.ВидСертификата.КомплексныйСертификат);	
КонецФункции

&НаСервере         
Процедура НастроитьВидимостьТаблицыПополненияСертификата()
	
	ПополняемыйВидСертификата = Справочники.ВидыСертификатов.НайтиПоРеквизиту("ПополняемыйСертификат",Истина);
	Если Не ЗначениеЗаполнено(ПополняемыйВидСертификата) Тогда
		Элементы.ГруппаПополениеСертификатов.Видимость = Ложь;
		Элементы.ГруппаСертификатыПродажа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.ГруппаСертификатыПродажа.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
КонецПроцедуры
                                                            
&НаСервере         
Процедура ОпределитьВидимостьКолонокПополненияСертификата()
	Элементы.ПополнениеСертификатовНоменклатура.Видимость = Ложь;
	Элементы.ПополнениеСертификатовКоличество.Видимость	  = Ложь;
	Элементы.ПополнениеСертификатовЦена.Видимость		  = Ложь;
	Для Каждого СтрокаДопродажи Из Объект.ПополнениеСертификатов Цикл
		Если ЗначениеЗаполнено(СтрокаДопродажи.Сертификат) Тогда
			Если СтрокаДопродажи.Сертификат.ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги Тогда
				Элементы.ПополнениеСертификатовКоличество.Видимость = Истина;
				Элементы.ПополнениеСертификатовЦена.Видимость       = Истина;
				Если СтрокаДопродажи.Сертификат.ВидСертификата.КомплексныйСертификат Тогда
					Элементы.ПополнениеСертификатовНоменклатура.Видимость = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаполненийТрудовыхРолейСотрудникПриИзменении(Элемент)
	
	ДляВсехУслуг = Ложь;
	СтруктураПоиска = Новый Структура("ТрудоваяРоль",Элементы.ТаблицаЗаполненийТрудовыхРолей.ТекущиеДанные.ТрудоваяРоль);
	Строки = кешТрудовыхРолейИНоменклатур.НайтиСтроки(СтруктураПоиска);
	
	Если Строки.Количество() = 0 Тогда
		ДляВсехУслуг = Ложь;
	Иначе
		ДляВсехУслуг = Строки[0].ДляВсехУслуг;
	КонецЕсли;
	
	Для Каждого СтрокаРабот Из Объект.Работы Цикл
		Если ДляВсехУслуг Тогда
			СтрокаРабот[Элементы.ТаблицаЗаполненийТрудовыхРолей.ТекущиеДанные.Колонка] = Элементы.ТаблицаЗаполненийТрудовыхРолей.ТекущиеДанные.Сотрудник;
		Иначе
			СтруктураПоиска.Вставить("Номенклатура",СтрокаРабот.Номенклатура);
			Строки = кешТрудовыхРолейИНоменклатур.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() <> 0 Тогда
				СтрокаРабот[Элементы.ТаблицаЗаполненийТрудовыхРолей.ТекущиеДанные.Колонка] = Элементы.ТаблицаЗаполненийТрудовыхРолей.ТекущиеДанные.Сотрудник;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	ПерезаполнитьТаблицуРолейИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуРолейИсполнителей()
	Объект.РолиИсполнителей.Очистить();
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		Для каждого СтрокаСоответ из СоответствиеТрудовыхРолейИКолонок Цикл
			Если СтрокаСоответ.ТабличнаяЧасть = "Работы" Тогда
				СтрокаИсполнитель = Объект.РолиИсполнителей.Добавить();
				СтрокаИсполнитель.ИмяТЧ = "Работы";
				СтрокаИсполнитель.КлючСтроки = СтрокаРаботы.КлючСтроки; 
				СтрокаИсполнитель.Роль = СтрокаСоответ.ТрудоваяРоль;
				СтрокаИсполнитель.Сотрудник = СтрокаРаботы[СтрокаСоответ.Колонка];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РаботыТрудоваяРоль1ПриИзменении(Элемент)
	ТрудоваяРольПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТрудоваяРольПриИзменении()
	
	ПерезаполнитьТаблицуРолейИсполнителей();
	ИнициализацияТрудовыхРолейКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниковОбщихФормУчастия(СтрокаТабличнойЧасти, ИмяТЧ)
	
	Если ИмяТЧ = "Работы" Тогда
		Для Каждого СтрокаКеш Из кешТрудовыхРолейИНоменклатур Цикл
			Если СтрокаКеш.ДляВсехУслуг Тогда
				мсСтр = ТаблицаЗаполненийТрудовыхРолей.НайтиСтроки(Новый Структура("ТрудоваяРоль", СтрокаКеш.ТрудоваяРоль));
				Если мсСтр.Количество() <> 0 И
					ЗначениеЗаполнено(мсСтр[0].Сотрудник)
				Тогда
					Для Каждого КолонкаРоль Из СоответствиеТрудовыхРолейИКолонок Цикл
						Если КолонкаРоль.ТабличнаяЧасть = ИмяТЧ
							И КолонкаРоль.ТрудоваяРоль = СтрокаКеш.ТрудоваяРоль
						Тогда
							СтрокаТабличнойЧасти[КолонкаРоль.Колонка] = мсСтр[0].Сотрудник;
							
							СтрокаРоль = Объект.РолиИсполнителей.Добавить();
							СтрокаРоль.ИмяТЧ = ИмяТЧ;
							СтрокаРоль.Роль  = СтрокаКеш.ТрудоваяРоль;
							СтрокаРоль.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
							СтрокаРоль.Сотрудник  = мсСтр[0].Сотрудник;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниковФормыУчастияНоменклатурыСтроки(СтрокаТабличнойЧасти, ИмяТЧ)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;
	  
	Если ИмяТЧ = "Работы" Тогда
		
		ТребуетсяПерезаполнитьТаблицуРолейИсполнителей = Ложь;
		
		ОтборСтрокКешаДляВсехУслуг = Новый Структура("ДляВсехУслуг, ТрудоваяРоль", Истина);
		ОтборСтрокКешаНоменклатура = Новый Структура("Номенклатура, ТрудоваяРоль");
		Для Каждого КолонкаРоль Из СоответствиеТрудовыхРолейИКолонок Цикл
			Если КолонкаРоль.ТабличнаяЧасть = ИмяТЧ Тогда
				// Что-либо делаю только если форма участия не для всех услуг/товаров.
				ОтборСтрокКешаДляВсехУслуг.ТрудоваяРоль = КолонкаРоль.ТрудоваяРоль;
				Если кешТрудовыхРолейИНоменклатур.НайтиСтроки(ОтборСтрокКешаДляВсехУслуг).Количество() = 0 Тогда
					ОтборСтрокКешаНоменклатура.ТрудоваяРоль = КолонкаРоль.ТрудоваяРоль;
					ОтборСтрокКешаНоменклатура.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
					Если кешТрудовыхРолейИНоменклатур.НайтиСтроки(ОтборСтрокКешаНоменклатура).Количество() = 0 Тогда
						// Форма участия не для всех услуг/товаров и для этой номенклатуры неприменима.
						СтрокаТабличнойЧасти[КолонкаРоль.Колонка] = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
						ТребуетсяПерезаполнитьТаблицуРолейИсполнителей = Истина;
					Иначе
						// Присваиваю общее значение по документу для этой формы участия (может быть не заполнено).
						мсСтр = ТаблицаЗаполненийТрудовыхРолей.НайтиСтроки(Новый Структура("ТрудоваяРоль", КолонкаРоль.ТрудоваяРоль));
						Если мсСтр.Количество() <> 0 И
							ЗначениеЗаполнено(мсСтр[0].Сотрудник)
						Тогда
							СтрокаТабличнойЧасти[КолонкаРоль.Колонка] = мсСтр[0].Сотрудник;
							ТребуетсяПерезаполнитьТаблицуРолейИсполнителей = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяПерезаполнитьТаблицуРолейИсполнителей Тогда
			ПерезаполнитьТаблицуРолейИсполнителей();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТрудовыеРолиПоПредыдущейСтроке(СтрокаТабличнойЧасти)
	
	// К этому моменту Точно знаем, что строки в ТЧ выше этой есть.
	ПредыдущаяСтрока = Объект.Работы[СтрокаТабличнойЧасти.НомерСтроки - 2];
	мсРолиЭтойСтроки	 = Объект.РолиИсполнителей.НайтиСтроки(Новый Структура("ИмяТЧ, КлючСтроки", "Работы", СтрокаТабличнойЧасти.КлючСтроки));
	мсРолиПредыдущейСтроки = Объект.РолиИсполнителей.НайтиСтроки(Новый Структура("ИмяТЧ, КлючСтроки", "Работы", ПредыдущаяСтрока.КлючСтроки));
	
	Для Каждого СтрокаРольПредСтроки Из мсРолиПредыдущейСтроки Цикл
		
		флНашли = Ложь;
		Для Каждого СтрокаРольЭтойСтроки Из мсРолиЭтойСтроки Цикл
			Если СтрокаРольЭтойСтроки.Роль = СтрокаРольПредСтроки.Роль Тогда
				флНашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не флНашли Тогда
			СтрокаРоль = Объект.РолиИсполнителей.Добавить();
			СтрокаРоль.ИмяТЧ = "Работы";
			СтрокаРоль.Роль  = СтрокаРольПредСтроки.Роль;
			СтрокаРоль.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
			СтрокаРоль.Сотрудник  = СтрокаРольПредСтроки.Сотрудник;
			
			Для Каждого КолонкаРоль Из СоответствиеТрудовыхРолейИКолонок Цикл
				Если КолонкаРоль.ТабличнаяЧасть = "Работы"
					И КолонкаРоль.ТрудоваяРоль = СтрокаРольПредСтроки.Роль
				Тогда
					СтрокаТабличнойЧасти[КолонкаРоль.Колонка] = СтрокаРоль.Сотрудник;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Функция ПолучитьНаправившихВрачей(Знач ТаблицаРаботы, ФормаУчастия, ПерезаполнитьСотрудника);
	
	ИмяКолонкиНаправившегоВрача = ПолучитьИмяКолонкиНаправившегоВрача(ФормаУчастия);
	
	МассивНоменклатура = Новый Массив;
	Для Каждого СтрокаРаботы Из ТаблицаРаботы Цикл   
		
		НаправившийВрач = Неопределено;
		
		Попытка
			НаправившийВрач = СтрокаРаботы[ИмяКолонкиНаправившегоВрача];
		Исключение
		КонецПопытки;
				
		Номенклатура = СтрокаРаботы.Номенклатура;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Если Не ПерезаполнитьСотрудника И ЗначениеЗаполнено(НаправившийВрач) Тогда 
				Продолжить;	
			КонецЕсли;
			МассивНоменклатура.Добавить(Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МедицинскаяДеятельность.ПолучитьНаправившихВрачей(Объект.Клиент, Объект.Дата, МассивНоменклатура, ФормаУчастия); 
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНаправившегоВрачаВСтрокеТЧ(СтрокаРаботы, НаправившиеВрачи, ФормаУчастия, ВыполненаПодстановкаНаправившегоВрача, ПерезаполнитьСотрудника)
	
	ИмяКолонкиНаправившегоВрача = ПолучитьИмяКолонкиНаправившегоВрача(ФормаУчастия);
	НаправившийВрач = Неопределено;
	
	Попытка
		НаправившийВрач = СтрокаРаботы[ИмяКолонкиНаправившегоВрача];
	Исключение
	КонецПопытки;
	
	Номенклатура = СтрокаРаботы.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если Не ПерезаполнитьСотрудника И ЗначениеЗаполнено(НаправившийВрач) Тогда 
			Возврат;	
		КонецЕсли;
		
		Попытка
			СтрокаРаботы[ИмяКолонкиНаправившегоВрача] = НаправившиеВрачи.Получить(Номенклатура);
			ВыполненаПодстановкаНаправившегоВрача = Истина;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяКолонкиНаправившегоВрача(ФормаУчастия)
	
	ИмяКолонки = "";
	
	МассивСтроки = СоответствиеТрудовыхРолейИКолонок.НайтиСтроки(
		Новый Структура("ТрудоваяРоль, ТабличнаяЧасть", ФормаУчастия, "Работы"));
		
	Если МассивСтроки.Количество() <> 0 Тогда 
		ИмяКолонки = МассивСтроки[0].Колонка; 		
	КонецЕсли;
	
	Возврат ИмяКолонки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНаправившихВрачей(Команда)
	
	ФормаУчастияДляНаправившегоВрача = мУчетнаяПолитика.ФормаУчастияДляНаправившегоВрача;
	
	Если Не ЗначениеЗаполнено(ФормаУчастияДляНаправившегоВрача) Тогда
		Если Команда <> Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В учетной политике не заполнена форма участия для направившего врача!'"));
		КонецЕсли;
		Возврат;	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		Если Команда <> Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В документе не указан клиент!'"));
		КонецЕсли;
		Возврат;	
	КонецЕсли;
		
	ПерезаполнитьСотрудника = Истина;
	Если Команда <> Неопределено Тогда
		Если Команда.Имя = "ЗаполнитьНаправившихВрачей" Тогда 
			ПерезаполнитьСотрудника = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НаправившиеВрачи = ПолучитьНаправившихВрачей(Объект.Работы, ФормаУчастияДляНаправившегоВрача, ПерезаполнитьСотрудника);
	ВыполненаПодстановкаНаправившегоВрача = Ложь;
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		ЗаполнитьНаправившегоВрачаВСтрокеТЧ(СтрокаРаботы, НаправившиеВрачи, ФормаУчастияДляНаправившегоВрача, ВыполненаПодстановкаНаправившегоВрача, ПерезаполнитьСотрудника);	
	КонецЦикла;
	Если ВыполненаПодстановкаНаправившегоВрача Тогда 
		ТрудоваяРольПриИзменении();
		Если Команда <> Неопределено Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьСтрокиПродаж(ДляСкидок = Истина)
	
	Возврат ЕстьСтрокиПродаж_БезКонтекста(Объект.Работы, Объект.Товары, Объект.Сертификаты, Объект.ПополнениеСертификатов, ДляСкидок = Истина)
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСтрокиПродаж_БезКонтекста(ТаблицаРаботы, ТаблицаТовары, ТаблицаСертификаты, ТаблицаПополнениеСертификатов, ДляСкидок = Истина)
	
	Количество = ТаблицаРаботы.Количество() // Количество Материалов не анализируем, т.к. без Работы их не бывает.
			+ ТаблицаТовары.Количество();
			
			
	Если Не ДляСкидок
		Или РаботаСоСкидкамиПовтИсп.ЕстьСкидкиНаСертификаты()
	Тогда
		Количество	= Количество
					+ ТаблицаСертификаты.Количество()
					+ ТаблицаПополнениеСертификатов.Количество();
	КонецЕсли;
	
	Возврат Количество <> 0;
					
КонецФункции

&НаСервере
Процедура РасчитатьСкидки(мБылаРучнаяПравкаОплаты)
	
	мСкидки = КонвертироватьДеревоВСкидки(Объект.Скидки, ДеревоСкидки);
	Объект.Скидки.Очистить();
	Для Каждого СтрокаСкидок Из мСкидки Цикл
		НоваяСтрокаТЧ = Объект.Скидки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаСкидок);
	КонецЦикла;
	
	Документы.ОказаниеУслуг.РассчитатьСкидкиДокумента(Объект);

	РаботаСДокументамиКлиентСервер.РасчитатьСуммуДокументаОказанияУслуг(Объект);
	
	Если ПолучитьИтогОплаты(Объект) <> Объект.СуммаДокумента И Не мБылаРучнаяПравкаОплаты И 
		Не мУчетнаяПолитика.НеЗаполнятьОплатуПоСуммеДокументаАвтоматически
	Тогда
		ЗаполнитьОплатуПоСуммеДокумента(Объект, мУчетнаяПолитика, СуммаОплаты, ОплаченоБезналичным, НСПК_СпособОплаты);
	КонецЕсли;
	
	РаботаСДокументамиКлиентСервер.РассчитатьОплатуСдачуПоПолученнымНаличным(Объект);
	РаботаСДокументамиКлиентСервер.ВывестиЗаголовокСуммаОплатыДокумента(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученоНаличнымиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СуммаПрочихВидовОплаты = 0;
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если СтрокаОплаты.ВидОплаты <> ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными") Тогда
			СуммаПрочихВидовОплаты = СуммаПрочихВидовОплаты + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПолученоНаличными <> Объект.СуммаДокумента - СуммаПрочихВидовОплаты Тогда
		Объект.ПолученоНаличными = Объект.СуммаДокумента - СуммаПрочихВидовОплаты;
		ПолученоНаличнымиПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьДолгаКлиента()
	
	РаботаСФормамиКлиентСервер.ПолучитьОписаниеВзаиморасчетов(Объект.Клиент,, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КартаКлиентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КартаКлиента) Тогда
		
		РеквизитыКарты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.КартаКлиента, "СрокДействия, ВладелецКарты");
		
		СрокДействияКарты = РеквизитыКарты.СрокДействия;
		
		Если ЗначениеЗаполнено(СрокДействияКарты)
			И КонецДня(СрокДействияКарты) < Объект.Дата
			И Вопрос(НСтр("ru='Срок действия карты клиента истек! Все равно выбрать её?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет 
		Тогда
			Объект.КартаКлиента = Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Клиент) 
			И ЗначениеЗаполнено(РеквизитыКарты.ВладелецКарты)
		Тогда
			Объект.Клиент = РеквизитыКарты.ВладелецКарты;
			КлиентПриИзменении(Неопределено);
		КонецЕсли;
		
		Если мУчетнаяПолитика.ПересчитыватьСкидкиПриВыбореКартыКлиента Тогда
			ПересчитатьСкидкуНаКлиенте();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеПоляЭквайринговыйТерминал(ПриИзмененииСтрокиОплаты = Истина, ПриИзмененииКассы = Ложь, ПриИзмененииФилиала = Ложь)
	
	УстановитьТерминалПоУмолчанию = Ложь;
	
	Если ПриИзмененииСтрокиОплаты Тогда
		СтрокаОплаты = Элементы.ТабличноеПолеОплата.ТекущиеДанные;
		Если Оплата_СтрокиОплатыБезналом().Найти(СтрокаОплаты) <> Неопределено
			И ЭквайринговыйТерминалНаФорме <> СтрокаОплаты.ЭквайринговыйТерминал
			И ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал)	
		Тогда
			ЭквайринговыйТерминалНаФорме = СтрокаОплаты.ЭквайринговыйТерминал;
			
		ИначеЕсли СтрокаОплаты.ВидОплаты <> ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные")
			И ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал)
		Тогда
			СтрокаОплаты.ЭквайринговыйТерминал = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыТерминала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭквайринговыйТерминалНаФорме, "Касса, Договор");
	ПривязкаТерминала = РеквизитыТерминала.Касса;
	
	Если Не ЗначениеЗаполнено(РеквизитыТерминала.Договор) Или
		Не ОрганизацииЭлементовСовпадают(Объект.Филиал, РеквизитыТерминала.Договор)
	Тогда
		ЭквайринговыйТерминалНаФорме = Неопределено;
		Если ПриИзмененииСтрокиОплаты Тогда
			СтрокаОплаты.ЭквайринговыйТерминал = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭквайринговыйТерминалНаФорме) Тогда
		УстановитьТерминалПоУмолчанию = Истина;
		
	ИначеЕсли ПриИзмененииФилиала
		И ЗначениеЗаполнено(ПривязкаТерминала)
		И ТипЗнч(ПривязкаТерминала) = Тип("СправочникСсылка.Филиалы")
		И ПривязкаТерминала <> Объект.Филиал
	Тогда
		// Не тот филиал.
		УстановитьТерминалПоУмолчанию = Истина;
		
	ИначеЕсли (ПриИзмененииКассы Или ПриИзмененииСтрокиОплаты) // Проверяем допустимость текущего терминала кассе
				И ЗначениеЗаполнено(ПривязкаТерминала)
				И ТипЗнч(ПривязкаТерминала) = Тип("СправочникСсылка.Кассы")
				И ПривязкаТерминала <> Объект.Касса
	Тогда
		// Не та касса.
		УстановитьТерминалПоУмолчанию = Истина;
	Иначе
		// При изменении терминала либо терминал подходит текущим реквизитам документа
		УстановитьЭТСтрокиОплатыБезналом(ЭквайринговыйТерминалНаФорме);
	КонецЕсли;
	
	Если УстановитьТерминалПоУмолчанию Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		ЭквайринговыйТерминалНаФорме = РаботаСТорговымОборудованием.ПолучитьЭквайринговыйТерминал(, Объект.Филиал, Объект.Касса);
		УстановитьЭТСтрокиОплатыБезналом(ЭквайринговыйТерминалНаФорме);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацииЭлементовСовпадают(Элемент1, Элемент2)
	
	Если ЗначениеЗаполнено(Элемент1.Организация)
		И ЗначениеЗаполнено(Элемент2.Организация)
	Тогда
		Возврат Элемент1.Организация = Элемент2.Организация;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТабличноеПолеОплатаЭквайринговыйТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТабличноеПолеОплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ВидОплаты <> ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные") 
	Тогда
		Возврат; // Запретим изменять эквайринговые терминалы если это не безнал.	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерЧекаЭТ)
		И ЗначениеЗаполнено(ТекущиеДанные.ЭквайринговыйТерминал)
	Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя изменять эквайринговый терминал, если уже пробит чек'"));
		Возврат; // Запретим изменять эквайринговые терминалы если уже пробит чек.	
	КонецЕсли;
	
	ПараметрыВыбораЗначения = ПараметрыВыбораЭТ(ТекущиеДанные.ЭквайринговыйТерминал);
	Если ПараметрыВыбораЗначения <> Неопределено Тогда
		Результат = ОткрытьФормуМодально("Справочник.ЭквайринговыеТерминалы.ФормаВыбора", ПараметрыВыбораЗначения);
		Если Результат <> Неопределено Тогда
			ТекущиеДанные.ЭквайринговыйТерминал = Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораЭТ(ТекущийЭТ)
	
	Перем ПараметрыВыбораЗначения;
	
	ПараметрыВыбораЗначения = Новый Структура;
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();		
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		ПараметрыВыбораЗначения.Вставить("РабочееМесто", РабочееМесто);
	КонецЕсли;
	
	Если Значениезаполнено(Объект.Касса) Тогда
		ДопустимыеКассы = ОбщегоНазначенияКлиентСервер.НовыйМассив(Объект.Касса, ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка"));
		ПараметрыВыбораЗначения.Вставить("Касса", Новый ФиксированныйМассив(ДопустимыеКассы));
	КонецЕсли;
		
	ПараметрыВыбораЗначения.Вставить("Филиал", Объект.Филиал);
	ПараметрыВыбораЗначения.Вставить("ТекущаяСтрока", ТекущийЭТ);
	
	Возврат ПараметрыВыбораЗначения;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПолеОплатаБезналичнымиИзОплат()
	
	СтрокиБезнал = Оплата_СтрокиОплатыБезналом();
	Если СтрокиБезнал.Количество() <> 0 Тогда
		ОплаченоБезналичным = СтрокиБезнал[0].Сумма;
	Иначе
		ОплаченоБезналичным = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОплатыДляБезнала(Документ, НСПК_СпособОплаты)
	
	СтруктураВозврата = Новый Структура("ЭквайринговыйТерминал, ИдентификаторУстройства, ИспользоватьЭТАвтономно, СуммаОплаты, ОписаниеОшибки, СсылочныйНомер, НомерКарты, ЭтоОплатаСБП");
	СтруктураВозврата.СуммаОплаты = 0;
	
	// Поиск строк оплаты безналом
	мОплатыБезналом = Новый Массив;
	Для Каждого СтрокаОплаты Из Документ.Оплата Цикл
		Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплаты.Безналичные
			И Оплаты_ЭтоСтрокаОплатыНеНСПК(СтрокаОплаты, НСПК_СпособОплаты)
		Тогда
			мОплатыБезналом.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата.ОписаниеОшибки = "";
	Если мОплатыБезналом.Количество() = 1 Тогда
		СтрокаОплаты = мОплатыБезналом[0];
		Если ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
			СтруктураВозврата.ЭквайринговыйТерминал = СтрокаОплаты.ЭквайринговыйТерминал;
			МассивОборудования = Новый Массив();
			Для Каждого СтрокаОборудование Из СтрокаОплаты.ЭквайринговыйТерминал.Оборудование Цикл
				МассивОборудования.Добавить(СтрокаОборудование.ПодключаемоеОборудование);		
			КонецЦикла;
			СтруктураВозврата.ИдентификаторУстройства = МассивОборудования;
			СтруктураВозврата.ИспользоватьЭТАвтономно = СтрокаОплаты.ЭквайринговыйТерминал.ИспользоватьЭТАвтономно;
			СтруктураВозврата.ЭтоОплатаСБП = СтрокаОплаты.ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.СБП;
			СтруктураВозврата.СуммаОплаты = СтрокаОплаты.Сумма;
			
			СтруктураВозврата.СсылочныйНомер = Документ.СсылочныйНомер;
			СтруктураВозврата.НомерКарты	 = Документ.НомерКарты;
			
			СтруктураВозврата.Вставить("ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ", СтрокаОплаты.ЭквайринговыйТерминал.ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ);
			
		ИначеЕсли ИспользуютсяЭквайринговыеТерминалы() Тогда
			СтруктураВозврата.ОписаниеОшибки = "В строке безналичной оплаты не заполнен эквайринговый терминал.";
		КонецЕсли;
	ИначеЕсли мОплатыБезналом.Количество() > 1 Тогда
		СтруктураВозврата.ОписаниеОшибки = НСтр("ru='В таблице оплат должна быть только одна строка безналичной оплаты.'");
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаСервереБезКонтекста
Функция ИспользуютсяЭквайринговыеТерминалы()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.УстройствоИспользуется
		|	И ПодключаемоеОборудование.ТипОборудования = &ТипОборудования
		|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления";

	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);

	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьНомеровЧеков(ЭлементГруппаНомераЧеков, ЭлементНомерЧекаККМ, ЭлементНомерЧекаЭТ, НомерЧекаККМ, НомерЧекаЭТ) Экспорт
	
	ОбновитьВидимостьНомеровЧековНаСервере(ЭлементГруппаНомераЧеков, ЭлементНомерЧекаККМ, ЭлементНомерЧекаЭТ, НомерЧекаККМ, НомерЧекаЭТ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьНомеровЧековНаСервере(ЭлементГруппаНомераЧеков, ЭлементНомерЧекаККМ, ЭлементНомерЧекаЭТ, НомерЧекаККМ, НомерЧекаЭТ)
	
	ЭлементНомерЧекаККМ.Видимость = ЗначениеЗаполнено(НомерЧекаККМ);
	ЭлементНомерЧекаЭТ.Видимость  = ЗначениеЗаполнено(НомерЧекаЭТ);
	ЭлементГруппаНомераЧеков.Видимость = ЭлементНомерЧекаККМ.Видимость Или ЭлементНомерЧекаЭТ.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикИнициализацияТрудовыхРолей()
	
	ИнициализацияТрудовыхРолей();
	ИнициализацияТрудовыхРолейКлиент();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНовыйДокументПоПараметрамЗаполнения()
	
	Если	ЗначениеЗаполнено(Параметры.Оборудование) 
		И	ЗначениеЗаполнено(Параметры.Оборудование.ОсновнаяУслуга) 
	Тогда
		Номенклатура = Параметры.Оборудование.ОсновнаяУслуга;
		СтрокаРаботы = Объект.Работы.Добавить();
		СтрокаРаботы.Номенклатура = Номенклатура;
		СтрокаРаботы.Количество = 1;
		СтрокаРаботы.КлючСтроки	= ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Работы);
		
		ДобавленаУслугаПоДаннымЗаполнения = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
		И Параметры.ЗначенияЗаполнения.Свойство("Сертификат")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Сертификат)
	Тогда
		ВидСертификата = Параметры.ЗначенияЗаполнения.Сертификат.ВидСертификата;
		Если ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги Тогда
			Если ВидСертификата.Услуги.Количество() <> 0 Тогда	
				УслугаСертификата = ВидСертификата.Услуги[0].Фильтр;
			Иначе
				УслугаСертификата = Неопределено
			КонецЕсли;
			
			СтрокаСертификатаОбработана = Ложь;
			
			Если Объект.Работы.Количество() <> 0 Тогда
				Если ЗначениеЗаполнено(УслугаСертификата) Тогда
					// Ищем строку работы с услугой сертификата
					СтрокаРаботыСертификата = Неопределено;
					Для Каждого СтрокаРаботы Из Объект.Работы Цикл
						Если СтрокаРаботы.Номенклатура = УслугаСертификата Тогда
							СтрокаРаботы.Сертификат = Параметры.ЗначенияЗаполнения.Сертификат;
							СтрокаСертификатаОбработана = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не СтрокаРаботыСертификата
					И ВидСертификата.Услуги.Количество() > 1
				Тогда
					Для Каждого СтрокаРаботы Из Объект.Работы Цикл
						Если ВидСертификата.Услуги.Найти(СтрокаРаботы.Номенклатура) <> Неопределено Тогда
							СтрокаРаботы.Сертификат = Параметры.ЗначенияЗаполнения.Сертификат;
							СтрокаСертификатаОбработана = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Не СтрокаСертификатаОбработана Тогда
				СтрокаРаботы = Объект.Работы.Добавить();
				СтрокаРаботы.Количество = 1;
				СтрокаРаботы.КлючСтроки	= ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Работы);
				СтрокаРаботы.Сертификат = Параметры.ЗначенияЗаполнения.Сертификат;
				Если ЗначениеЗаполнено(УслугаСертификата) Тогда
					СтрокаРаботы.Номенклатура = УслугаСертификата;
					ДобавленаУслугаПоДаннымЗаполнения = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Объект.Сертификат = Параметры.ЗначенияЗаполнения.Сертификат; // Суммовой сертификат.
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКлючиТабличныхЧастей()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого МетаданныеТЧ Из Метаданные.Документы.ОказаниеУслуг.ТабличныеЧасти Цикл
		Если МетаданныеТЧ.Реквизиты.Найти("КлючСтроки") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаботы Из Объект[МетаданныеТЧ.Имя] Цикл
			Если ЗначениеЗаполнено(СтрокаРаботы.КлючСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект[МетаданныеТЧ.Имя]);
			
			Если МетаданныеТЧ = Метаданные.Документы.ОказаниеУслуг.ТабличныеЧасти.Работы Тогда
				СтрокиМатериалов = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСтрокиРаботы", 0));
				Для Каждого СтрокаМатериала Из СтрокиМатериалов Цикл
					СтрокаМатериала.КлючСтрокиРаботы = СтрокаРаботы.КлючСтроки;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#Область ТерминалыСбораДанных // ТЕРМИНАЛЫ СБОРА ДАННЫХ

&НаКлиенте
Процедура ТоварыЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("Товары");
		
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(НаименованиеТабличнойЧасти)
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ЗагрузитьДанныеИзТСДЗавершение", ЭтотОбъект, Новый Структура("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти));    
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриПодключении, УникальныйИдентификатор, Ложь)	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		мсШтрихкоды = РезультатВыполнения.ТаблицаТоваров;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ДобавлятьБезВладельца", Истина);
		РаботаСТорговымОборудованиемКлиент.ОбработатьШтрихкоды(ЭтаФорма, Объект, мсШтрихкоды, Параметры.НаименованиеТабличнойЧасти, ДопПараметры);
	Иначе
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
		|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПерезаполнитьОплачиваетсяПоПолису(Команда)
	
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить признак ""Не оплачивается полисом"" по настройке вида полиса?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСтоимостьОпличиваемостьПозицийПоПолису(мАдресНоменклатураВидаПолиса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьСуммыСверхПолисаИнтерактивно(ТекДанные)
	
	Если ТекДанные <> Неопределено Тогда 
		Если ТекДанные.НеОплачиваетсяПолисом Тогда 
			ТекДанные.СуммаНеПоПолису = 0;
		Иначе
			Если ТекДанные.СуммаНеПоПолису >  ТекДанные.Сумма Тогда 
				ПоказатьПредупреждение(,НСтр("ru='Сумма, доплачиваемая по строке сверх страхового полиса, не может быть больше полной суммы услуги!'"));
				ТекДанные.СуммаНеПоПолису = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаНеПоПолисуПриИзменении(Элемент)
	ПроверитьКорректностьСуммыСверхПолисаИнтерактивно(Элементы.Работы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаНеПоПолисуПриИзменении(Элемент)
	ПроверитьКорректностьСуммыСверхПолисаИнтерактивно(Элементы.Материалы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНеПоПолисуПриИзменении(Элемент)
	ПроверитьКорректностьСуммыСверхПолисаИнтерактивно(Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СертификатыСуммаНеПоПолисуПриИзменении(Элемент)
	ПроверитьКорректностьСуммыСверхПолисаИнтерактивно(Элементы.Сертификаты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументРезультатомПодбора(РезультатПодбора)
	
	Для Каждого СтрокаПодбора Из РезультатПодбора Цикл
		ОбработкаВнесенияНоменклатуры(СтрокаПодбора.Номенклатура, СтрокаПодбора.ХарактеристикаНоменклатуры, СтрокаПодбора.ЕдиницаИзмерения,
				СтрокаПодбора.Количество, СтрокаПодбора.Цена, Элементы.ГруппаТовары,,,
				СтрокаПодбора.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга"));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомплексныйРасчетПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КомплексныйРасчет) Тогда
		
		// Предупреждение об очистке заполненных абонементов
		Если Объект.Работы.Количество() <> 0 Тогда
			Отбор = Новый Структура("Сертификат", ПредопределенноеЗначение("Справочник.Сертификаты.ПустаяСсылка"));
			Если Объект.Работы.НайтиСтроки(Отбор).Количество() <> Объект.Работы.Количество() Тогда
				Ответ = Вопрос("Абонементы будут очищены в списке работ. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Объект.КомплексныйРасчет = Неопределено;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если (Объект.Работы.Количество() + Объект.Товары.Количество()) <> 0 Тогда
			
			ОбъектКопия = Объект;
			НераспределенныеСтроки = АнализПересчетаПоКомплексномуРасчету(ОбъектКопия);
			
			Если НераспределенныеСтроки.Количество() = 0 Тогда
				КомплексныйРасчет_ПрименитьПересчетСтрок(ОбъектКопия);
				КомплексныйРасчетПриИзменении_ПослеАнализаОстатков();
			Иначе
				ТекстВопроса = НСтр("ru='В выбранном расчете не хватает не выполненного остатка по следующим позициям документа:'");
				Для Каждого ТабличнаяЧасть Из НераспределенныеСтроки Цикл
					Если ТабличнаяЧасть.Ключ <> "Материалы" Тогда
						Для Каждого СтрокаОстатка Из ТабличнаяЧасть.Значение Цикл
							ТекстВопроса = ТекстВопроса + Символы.ПС + ТабличнаяЧасть.Ключ + " - " + СтрокаОстатка.Номенклатура + ": " + СтрокаОстатка.Количество;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

				ВариантыОтвета = Новый СписокЗначений;
				ВариантыОтвета.Добавить(1, НСтр("ru='Удалить позиции документа'"));
				Если Не Объект.Коррекция Тогда
					ВариантыОтвета.Добавить(2, НСтр("ru='Перенести позиции в отдельную продажу'"));
				КонецЕсли;
				ВариантыОтвета.Добавить(3, НСтр("ru='Отменить выбор расчета'"));
				
				РезультатыАнализа = Новый Структура;
				РезультатыАнализа.Вставить("ОбъектКопия", ОбъектКопия);
				РезультатыАнализа.Вставить("НераспределенныеСтроки", НераспределенныеСтроки);
				ОбработчикОтвета = Новый ОписаниеОповещения("КомплексныйРасчет_ОбработкаОтветаПоАнализуОстатков", ЭтотОбъект, РезультатыАнализа);
				
				ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, ВариантыОтвета, 30, 3,,3);
			КонецЕсли;
		Иначе	
			КомплексныйРасчетПриИзменении_ПослеАнализаОстатков();
		КонецЕсли;
	Иначе
		КомплексныйРасчетПриИзменении_Завершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомплексныйРасчет_ПрименитьПересчетСтрок(ОбъектКопия)
	
	КопироватьДанныеФормы(ОбъектКопия, Объект);
	
	УдалитьМатериалыУдаленныхРабот();
	
	Для Каждого СтрокаТЧ Из Объект.Работы Цикл
		РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,"Работы.Цена", СтрокаТЧ,ЭтаФорма);
	КонецЦикла;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		РаботаСДокументамиКлиент.дкОбработкаРеквизитаКлиент(Объект,"Товары.Цена", СтрокаТЧ,ЭтаФорма);
	КонецЦикла;
	ОбновитьСтоимостьДокумента();
	
КонецПроцедуры

// Обработчик оповещения вопроса о вариантах отработки строк документа, недостающих в копслексном расчета.
&НаКлиенте
Процедура КомплексныйРасчет_ОбработкаОтветаПоАнализуОстатков(Ответ, РезультатыАнализа) Экспорт
			
	СуммаДокументаИзменена = Ложь;
	
	Если Ответ = 3 Тогда
		Объект.КомплексныйРасчет = Неопределено;
		Возврат;
	ИначеЕсли Ответ = 2 Или Ответ = 1 Тогда
		СуммаДокументаИзменена = Истина;
		КомплексныйРасчет_ПрименитьПересчетСтрок(РезультатыАнализа.ОбъектКопия);
		
		Если Ответ = 2 Тогда
			// Открываем новую продажу со строками без остатка.
			ЗначенияЗаполнения = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(РезультатыАнализа.ОбъектКопия);
			ЗначенияЗаполнения.Вставить("РежимЗаполненияПолноеКопирование");
			
			ЗначенияЗаполнения.Удалить("Ссылка");
			ЗначенияЗаполнения.Удалить("КомплексныйРасчет");
			ЗначенияЗаполнения.Удалить("НомерЧекаЭТ");
			ЗначенияЗаполнения.Удалить("НомерЧекаККМ");
			ЗначенияЗаполнения.Удалить("ПолученоНаличными");
			ЗначенияЗаполнения.Удалить("Сдача");
			
			Для Каждого кзТабЧасть Из РезультатыАнализа.НераспределенныеСтроки Цикл
				ЗначенияЗаполнения.Вставить(кзТабЧасть.Ключ, кзТабЧасть.Значение);
			КонецЦикла;
			
			ЗначенияЗаполнения.Вставить("НеВыполнятьСтандартноеЗаполнениеПоДокументуОснованию");
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта", ПараметрыФормы,,Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	КомплексныйРасчетПриИзменении_ПослеАнализаОстатков(СуммаДокументаИзменена)
	
КонецПроцедуры
	
&НаКлиенте
Процедура КомплексныйРасчетПриИзменении_ПослеАнализаОстатков(СуммаДокументаИзменена = Ложь)
	
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		Если ЗначениеЗаполнено(СтрокаРаботы.Сертификат) Тогда
			СтрокаРаботы.Сертификат = Неопределено;
			ОбработкаРеквизитаУпр("Работы.Сертификат",СтрокаРаботы,ЭтаФорма);
		КонецЕсли;
	КонецЦикла;
	
	РасчетЗапрещаетСкидки = Не КомплексныеРасчетыКлиентов.РасчетРазрешаетСкидки(Объект.КомплексныйРасчет);
	Если РасчетЗапрещаетСкидки Тогда
		СуммаДокументаИзменена = Истина;
		Если Объект.Скидки.Количество() = 0 Тогда
			мсТЧ = Новый Массив;
			мсТЧ.Добавить("Работы");
			мсТЧ.Добавить("Материалы");
			мсТЧ.Добавить("Товары");
			Для Каждого ИмяТЧ Из мсТЧ Цикл
				Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
					Если СтрокаТЧ.СуммаСкидки <> 0 Тогда
						СтрокаТЧ.СуммаСкидки = 0;
						СтрокаТЧ.ПроцентСкидки = 0;
						СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
						СуммаДокументаИзменена = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе	
			СуммаДокументаИзменена = Истина;
			ОбъектКопия = Объект;
			ПерезаполнитьСкидки(ОбъектКопия);
			КопироватьДанныеФормы(ОбъектКопия, Объект);
			ДеревоСкидки.ПолучитьЭлементы().Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаДокументаИзменена Тогда
		ОбновитьСтоимостьДокумента();
	КонецЕсли;
	
	КомплексныйРасчетПриИзменении_Завершение();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплексныйРасчетПриИзменении_Завершение()
	УстановитьДоступностьЭлементовПоКомплексномуРасчету();
	ОбновитьДанныеПоОплатеКомплексногоРасчета();
КонецПроцедуры

&НаСервереБезКонтекста
Функция АнализПересчетаПоКомплексномуРасчету(Объект)
	
	ОстаткиРасчета = КомплексныеРасчетыКлиентов.ПолучитьОстаткиКомплексногоРасчета(Объект.КомплексныйРасчет, ПолучитьМоментВремени(Объект.Ссылка, Объект.Дата), Ложь);
	НераспределенныеОстатки = Новый Структура;
	
	ЕстьПересчет = Ложь;
	
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		Если ЗначениеЗаполнено(СтрокаРаботы.Сертификат) Тогда
			СтрокаРаботы.Сертификат = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Отбор	  = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	ОтборЦены = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена");
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить("Работы");
	ИменаТЧ.Добавить("Товары");
	Для Каждого ИмяТЧ Из ИменаТЧ Цикл
		
		ОстаткиТЧ = Объект[ИмяТЧ].Выгрузить();
		СтрокиКУдалению = Новый Массив;
		Объект[ИмяТЧ].Очистить();
		
		Для Каждого СтрокаТЧ Из ОстаткиТЧ Цикл
			
			АнализПересчетаПоКомплексномуРасчету_ПрименитьОстатокПоРасчету(СтрокаТЧ, ОстаткиРасчета, ОтборЦены,	Объект, ИмяТЧ); // Поиск с учетом цены.
			АнализПересчетаПоКомплексномуРасчету_ПрименитьОстатокПоРасчету(СтрокаТЧ, ОстаткиРасчета, Отбор,		Объект, ИмяТЧ); // Поиск без учета цены.
		
			Если СтрокаТЧ.Количество = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СтрокиКУдалению Цикл
			ОстаткиТЧ.Удалить(СтрокаТЧ);
		КонецЦикла;
		
		Если ОстаткиТЧ.Количество() <> 0 Тогда
			НераспределенныеОстатки.Вставить(ИмяТЧ, ОбщегоНазначения.ТаблицаЗначенийВМассив(ОстаткиТЧ));
			
			// Материалы работ тоже готовим к потенциальному переносу в отдельный документ
			Если ИмяТЧ = "Работы" Тогда
				СтрокиМатериаловНераспределенныхРабот = Новый Массив;
				Для Каждого СтрокаРаботаНераспределенная Из ОстаткиТЧ Цикл
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиМатериаловНераспределенныхРабот,
																 Объект.Материалы.НайтиСтроки(Новый Структура("КлючСтрокиРаботы", СтрокаРаботаНераспределенная.КлючСтроки)));
				КонецЦикла;
				
				Материалы = Объект.Материалы.Выгрузить(СтрокиМатериаловНераспределенныхРабот);
				
				НераспределенныеОстатки.Вставить("Материалы", ОбщегоНазначения.ТаблицаЗначенийВМассив(Материалы));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НераспределенныеОстатки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура АнализПересчетаПоКомплексномуРасчету_ПрименитьОстатокПоРасчету(СтрокаТЧ, ОстаткиРасчета, Отбор, Объект, ИмяТЧ)
	
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
	Если Не ЗначениеЗаполнено(Отбор.ЕдиницаИзмерения) Тогда
		Отбор.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;

	СтрокиОстатка = ОстаткиРасчета.НайтиСтроки(Отбор);
	Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
		КоличествоНайдено = Мин(СтрокаОстатка.Количество, СтрокаТЧ.Количество);
		Если КоличествоНайдено > 0 Тогда
			НоваяСтрокаТЧ = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
			НоваяСтрокаТЧ.Количество = КоличествоНайдено; // Без пересчета суммы по количеству.
			НоваяСтрокаТЧ.Цена 		 = СтрокаОстатка.Цена;
		КонецЕсли;
		
		СтрокаОстатка.Количество = СтрокаОстатка.Количество - КоличествоНайдено;
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоНайдено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоКомплексномуРасчету()
	
	РасчетЗаполнен = ЗначениеЗаполнено(Объект.КомплексныйРасчет);
	
	Элементы.РаботыСертификат.Доступность = Не РасчетЗаполнен;
	
	РазрешитьПрименениеСкидокПриПродаже = Не РасчетЗаполнен Или Объект.КомплексныйРасчет.Вид.РазрешитьПрименениеСкидокПриПродаже;
	
	Элементы.РаботыПроцентСкидки.Доступность	= РазрешитьПрименениеСкидокПриПродаже;
	Элементы.РаботыСуммаСкидки.Доступность		= РазрешитьПрименениеСкидокПриПродаже;
	Элементы.РаботыСумма.Доступность			= РазрешитьПрименениеСкидокПриПродаже;
	
	Элементы.ТоварыПроцентСкидки.Доступность	= РазрешитьПрименениеСкидокПриПродаже;
	Элементы.ТоварыСуммаСкидки.Доступность		= РазрешитьПрименениеСкидокПриПродаже;
	Элементы.ТоварыСумма.Доступность			= РазрешитьПрименениеСкидокПриПродаже;
	
	Элементы.МатериалыПроцентСкидки.Доступность	= РазрешитьПрименениеСкидокПриПродаже;
	Элементы.МатериалыСуммаСкидки.Доступность	= РазрешитьПрименениеСкидокПриПродаже;
	Элементы.МатериалыСумма.Доступность			= РазрешитьПрименениеСкидокПриПродаже;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИзДокументаРасчета(Команда)
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту");
	
	КомплексныеРасчетыКлиентовКлиент.ОткрытьПодборИзКомплексногоРасчетаКлиента(Объект.КомплексныйРасчет, 
		КомплексныеРасчетыКлиентовКлиент.ПолучитьВФормеПозицииДокументаДляПодбораИзКомплексногоРасчета(Объект), Объект.Ссылка, ЭтотОбъект, ЭтоВозврат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОплатеКомплексногоРасчета()
	
	Если Не ЗначениеЗаполнено(Объект.КомплексныйРасчет) Тогда 
		Элементы.ГруппаОплатаКомплексногоРасчета.Видимость = Ложь;
		Возврат;
	КонецЕсли;
		
	ДанныеОплаты = КомплексныеРасчетыКлиентов.ПолучитьДанныеПоОплатеРасчета(Объект.КомплексныйРасчет);
	
	Если ДанныеОплаты.ОплатаАктуальна Тогда
		
		крСуммаОплаты = ДанныеОплаты.СуммаОплаты;
		крПроцентОплаты = ?(ДанныеОплаты.СуммаДокумента = 0, 100, Окр(100 * крСуммаОплаты / ДанныеОплаты.СуммаДокумента));
		крСуммаАванса = ДанныеОплаты.СуммаАванса;
		крСуммаДокумента = ДанныеОплаты.СуммаДокумента;
		
		Элементы.ГруппаОплатаКомплексногоРасчета.Видимость = Истина;
		
		ВидимостьЗачетаАвансаПрипродажеВДолг();
	Иначе
		Элементы.ГруппаОплатаКомплексногоРасчета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры                                  

&НаКлиенте
Процедура ПоказатьИсториюОплат(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("КомплексныйРасчет", Объект.КомплексныйРасчет));
	ФормаОтчета = ПолучитьФорму("Отчет.КомплексныеПрограммыПросмотрИсторииОплат.Форма", ПараметрыФормы);
	ФормаОтчета.СкомпоноватьРезультат();
	ФормаОтчета.Открыть();
	ФормаОтчета.ПользовательскиеНастройкиМодифицированы = Ложь;
	ФормаОтчета.ВариантМодифицирован = Ложь;
	ФормаОтчета.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСтрокиРаботРучногоВводаМатериалов(Знач РаботыДокумента)
	
	Для Каждого СтрокаРаботы Из РаботыДокумента Цикл
		Если СтрокаРаботы.РучнаяКорректировкаМатериалов Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяПерезаполнениеНормыРасходаПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИзмениласьРаботаНаКоторуюЕстьРасходМатериалов)
	
	ТребуетсяПерезаполнитьМатериалыПоНормам = Истина;
	
	// Отработка строк с включенным ручным редактирвоанием материалов строки
	Если СтрокаТабличнойЧасти.РучнаяКорректировкаМатериалов Тогда
		Если ИзмениласьРаботаНаКоторуюЕстьРасходМатериалов Тогда
			ВариантыОтвета = Новый СписокЗначений;
			ВариантыОтвета.Добавить(КодВозвратаДиалога.Пропустить,	НСтр("ru='Не изменять'"));
			ВариантыОтвета.Добавить(КодВозвратаДиалога.Отмена,		НСтр("ru='Очистить'"));
			ВариантыОтвета.Добавить(КодВозвратаДиалога.ОК,			НСтр("ru='Перезаполнить по нормам'"));
			
			Ответ = Вопрос(НСтр("ru='Изменилась номенклатура в строке с включенным ручным редактированием расходных материалов
							|К данной строке привязаны расходные материалы. 
							|Выберите операцию над материалами этой работы.'"), ВариантыОтвета, 30, КодВозвратаДиалога.Пропустить);
			Если Ответ = КодВозвратаДиалога.Пропустить Тогда
				ТребуетсяПерезаполнитьМатериалыПоНормам = Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				ТребуетсяПерезаполнитьМатериалыПоНормам = Ложь;
				мОбрИнд = Объект.Материалы.Количество()-1;
				Для сч = 0 по мОбрИнд Цикл
					
					СтрокаТЗ = Объект.Материалы[мОбрИнд-сч];
					Если СтрокаТЗ.КлючСтрокиРаботы = СтрокаТабличнойЧасти.КлючСтроки Тогда
						Объект.Материалы.Удалить(мОбрИнд-сч);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаМатериал Из Объект.Материалы Цикл
					Если СтрокаМатериал.КлючСтрокиРаботы = СтрокаТабличнойЧасти.КлючСтроки
						И СтрокаМатериал.Работа <> СтрокаТабличнойЧасти.Номенклатура
					Тогда
						ИзмениласьРаботаНаКоторуюЕстьРасходМатериалов = Истина;
						СтрокаМатериал.Работа = СтрокаТабличнойЧасти.Номенклатура;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТребуетсяПерезаполнитьМатериалыПоНормам = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяПерезаполнитьМатериалыПоНормам;
		
КонецФункции

&НаКлиенте
Процедура РаботыРучнаяКорректировкаМатериаловПриИзменении(Элемент)
	
	Если Не Объект.РучнаяКорректировкаМатериалов Тогда
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если Не ТекущиеДанные.РучнаяКорректировкаМатериалов Тогда
			Ответ = Вопрос(НСтр("ru='Расход материалов в строке будет перезаполнен по норме. Продложить?'"), РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена);
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				ЗаполнитьМатериалыПоНормамРабот(ТекущиеДанные.КлючСтроки);
				ОбновитьСтоимостьДокумента();
			Иначе
				ТекущиеДанные.РучнаяКорректировкаМатериалов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьПоляЕслиРаботаПоАбонементу()
	
	Если Элементы.Работы.ТекущиеДанные <> Неопределено Тогда
		ЭтоРаботаПоАбонементу = ЗначениеЗаполнено(Элементы.Работы.ТекущиеДанные.Сертификат);
		Элементы.РаботыЦена.ТолькоПросмотр	= ЭтоРаботаПоАбонементу Или Не мЕстьПравоИзмененияЦены;
		Элементы.РаботыСумма.ТолькоПросмотр	= ЭтоРаботаПоАбонементу Или Не мЕстьПравоИзмененияРучныхСкидок;
		Элементы.РаботыПроцентСкидки.ТолькоПросмотр = ЭтоРаботаПоАбонементу Или Не мЕстьПравоИзмененияРучныхСкидок;
		Элементы.РаботыСуммаСкидки.ТолькоПросмотр	= ЭтоРаботаПоАбонементу Или Не мЕстьПравоИзмененияРучныхСкидок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияОбъектаФормы() Экспорт
	
	ОбъектКопия = Объект;
	ЗаписатьОбъектФормы(ОбъектКопия);
	ЭтаФорма.Прочитать();
	ИнициализацияТрудовыхРолей();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОбъектФормы(Знач ОбъектКопия)
	
	ДокументОбъект = ДанныеФормыВЗначение(ОбъектКопия, Тип("ДокументОбъект.ОказаниеУслуг"));
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолисПриИзмененииПолучитьДанныеНаСервере(Полис, ДатаДокумента, ФилиалДокумента)
	
	Результат = Новый Структура("ВидПолиса, РеестрТребуетМедицинскихПараметров, Прейскурант");
	
	Результат.ВидПолиса = Полис.ВидПолиса;
	Результат.РеестрТребуетМедицинскихПараметров = Результат.ВидПолиса.РеестрТребуетМедицинскихПараметров;
	Результат.Прейскурант = Результат.ВидПолиса.Прейскурант;
	
	Результат.Вставить("ТекстОшибкиПолисНеДействителен", МедицинскоеСтрахование.ПроверитьПолисДействителен(Полис, ДатаДокумента));
	Если Не ЗначениеЗаполнено(Результат.ТекстОшибкиПолисНеДействителен) Тогда
		ДоговорСоСтраховой = МедицинскоеСтрахование.ДоговорСоСтраховойПолиса(Полис.ВидПолиса, ФилиалДокумента, ДатаДокумента);
		Если Не ЗначениеЗаполнено(ДоговорСоСтраховой) Тогда
			МедицинскоеСтрахование.СообщитьОбОшибкеНетДоговораСоСтраховой(Полис.ВидПолиса, ФилиалДокумента.Организация, ДатаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Розничный прейскурант филиала
	Результат.Вставить("ПрейскурантФилиала", УправлениеНастройками.ПолучитьПрейскурантФилиала(ФилиалДокумента));
	
	Возврат Результат;
	
КонецФункции

#Область СлужебныеПроцедурыПечатиЧеков

&НаСервере
Процедура ОбновитьЧеки()
	
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Объект.Филиал, Истина);
	
	Если Не ЗначениеЗаполнено(НастройкаПечатиЧеков.Ссылка) Тогда
		ВызватьИсключение "Печать чека не возможна, для текущего филиала не выбраны настройки печати чеков";	
	КонецЕсли;
	
	фЗапретОбновления = Ложь;
	Для Каждого стр Из Объект.Чеки Цикл
		Если ЗначениеЗаполнено(стр.НомерЧека) Или ЗначениеЗаполнено(Объект.НомерЧекаЭТ) Тогда
			фЗапретОбновления = Истина;
		КонецЕсли;
	КонецЦикла;
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ИспользоватьДетальныеЧеки = Не НастройкаПечатиЧеков.ПустаяСсылка;

	Если Объект.Коррекция Тогда
		Если Не ЗначениеЗаполнено(Объект.ДатаКоррекции) Тогда
			Объект.ДатаКоррекции = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Если Не фЗапретОбновления И ИспользоватьДетальныеЧеки Тогда
		Объект.Чеки.Очистить();
		
		НПЧ = НастройкаПечатиЧеков;
		
		// Добавляем основную СНО
		Если ЗначениеЗаполнено(НПЧ.ОсновнаяСистемаНалогообложения) Тогда
			ЗаполнитьСтруктуруЧекаПоОрганизации(Объект.Чеки.Добавить(), НПЧ.ОсновнаяСистемаНалогообложения);
		КонецЕсли;
		
		// Добавляем чек под реализацию сертификатов
		Если ВДокументеЕстьРеализацияСертификатовПоАБ_4_20_13041() Тогда
			ЗаполнитьСтруктуруЧекаПоОрганизации(Объект.Чеки.Добавить(), НПЧ.ОсновнаяСистемаНалогообложения, Истина);
		КонецЕсли;
		
		// Добавляем дополнительную СНО - ЕНВД
		Если НПЧ.ЕстьУчетПоЕНВД Тогда
			ЗаполнитьСтруктуруЧекаПоОрганизации(Объект.Чеки.Добавить(), Перечисления.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход);
		КонецЕсли;
		
		// Добавляем дополнительную СНО - Патент
		Если НПЧ.ЕстьУчетПоПатенту Тогда
			ЗаполнитьСтруктуруЧекаПоОрганизации(Объект.Чеки.Добавить(), Перечисления.СистемыНалогообложения.ПатентнаяСистемаНалогообложения);
		КонецЕсли;
		
		ОбновитьФискальностьСтрок();			
		ПерезаполнитьСуммы();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФискальностьСтрок()
	
	СНО_Нефискально = Перечисления.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход;
	Для Каждого СтрокаЧек Из Объект.Чеки Цикл
		СтрокаЧек.Фискально = (СтрокаЧек.СистемаНалогоОбложения <> СНО_Нефискально);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовОбновитьЧеки() Экспорт
	ОбновитьЧеки();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовПоЧекамККМ()
	ОбновитьВидимостьЧеков();
	ОбновитьДопКолонкиЧеков();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЧекаПоОрганизации(СтрокаТЧ, СНО, РеализацияСертификата = Ложь)
	СтрокаТЧ.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Чеки);
	СтрокаТЧ.НомерЧека			= 0;
	СтрокаТЧ.ВидОперации		= Неопределено;
	СтрокаТЧ.СистемаНалогоОбложения	= СНО;
	СтрокаТЧ.РеализацияСертификата = РеализацияСертификата;
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьСуммы()
	ОбъектКопия = Объект;
	Документы.ОказаниеУслуг.ПерезаполнитьЧекиДокумента(ОбъектКопия);
	КопироватьДанныеФормы(ОбъектКопия, Объект);	
КонецФункции

&НаКлиенте
Процедура СлужебныеДанные(Команда)
	Элементы.СлужебныеДанные.Пометка = НЕ Элементы.СлужебныеДанные.Пометка;
	ОбновитьДопКолонкиЧеков();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДопКолонкиЧеков() 
	ПоказыватьДопКолонки = Элементы.СлужебныеДанные.Пометка;
	Элементы.ЧекиСуммаВзнос.Видимость			= ПоказыватьДопКолонки;	
	Элементы.ЧекиСуммаДепозит.Видимость			= ПоказыватьДопКолонки;
	Элементы.ЧекиСуммаНаличные.Видимость		= ПоказыватьДопКолонки;
	Элементы.ЧекиСуммаБезналичные.Видимость		= ПоказыватьДопКолонки;
	Элементы.ЧекиСуммаСертификат.Видимость		= ПоказыватьДопКолонки;
	Элементы.ЧекиДатаПечатиЧека.Видимость		= ПоказыватьДопКолонки;
	Элементы.ЧекиФискальноеУстройство.Видимость = ПоказыватьДопКолонки;
	Элементы.ЧекиНомераЧековСторно.Видимость	= ПоказыватьДопКолонки;	
	
	Элементы.РаботыСтавкаНДСФискализации.Видимость					= ПоказыватьДопКолонки;
	Элементы.ТоварыСтавкаНДСФискализации.Видимость					= ПоказыватьДопКолонки;
	Элементы.МатериалыСтавкаНДСФискализации.Видимость				= ПоказыватьДопКолонки;
	Элементы.СертификатыСтавкаНДСФискализации.Видимость				= ПоказыватьДопКолонки;
	Элементы.ПополнениеСертификатовСтавкаНДСФискализации.Видимость	= ПоказыватьДопКолонки;
	Элементы.ЧекиСтавкаНДСПоУмолчаниюФискализации.Видимость			= ПоказыватьДопКолонки;
	Элементы.ПополнениеСертификатовСтавкаНДСФискализации.Видимость	= ПоказыватьДопКолонки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЧеков()
	
	Если Объект.Чеки.Количество() > 0 Тогда
		Если НЕ Элементы.ГруппаЧеки.Видимость Тогда
			Элементы.ГруппаЧеки.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЧеки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.НомерЧекаККМ.Видимость = Не Элементы.ГруппаЧеки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаSMS(Команда)
	ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	Объект.ТелефонЧек = КонтактнаяИнформацияКлиент.ВыбратьСоздатьКИКлиента(Объект.Клиент, ТипКИ, Объект.Филиал);
КонецПроцедуры

&НаКлиенте
Процедура КомандаEmail(Команда)
	ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	Объект.АдресEmailЧек = КонтактнаяИнформацияКлиент.ВыбратьСоздатьКИКлиента(Объект.Клиент, ТипКИ, Объект.Филиал);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьДепозитнойОперацииККМ() Экспорт
	
	Если ЗначениеЗаполнено(Объект.СпособРасчетаЧекаККМ) Тогда
		Если (Объект.СуммаДокумента - СуммаОплаты) > 0 Тогда // Требуется доплата
			Элементы.СпособРасчетаЧекаККМ.Видимость = Истина;
			Элементы.СпособРасчетаЧекаККМ.Доступность = Истина;
			
			Если ЗначениеЗаполнено(НастройкаПечатиЧеков)
				И 
				НЕ (НастройкаПечатиЧеков.ДоступныКредитныеПлатежи И НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи)
			Тогда
				Элементы.СпособРасчетаЧекаККМ.Доступность = Ложь;					
			КонецЕсли;
		Иначе
			Элементы.СпособРасчетаЧекаККМ.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не НастройкаПечатиЧеков.ПустаяСсылка
			И НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи
			И НастройкаПечатиЧеков.ДоступныКредитныеПлатежи
		Тогда
			Если (Объект.СуммаДокумента - СуммаОплаты) > 0 Тогда // Требуется доплата
				Элементы.СпособРасчетаЧекаККМ.Видимость = Истина;
				Элементы.СпособРасчетаЧекаККМ.Доступность = Истина;
			Иначе
				Элементы.СпособРасчетаЧекаККМ.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.СпособРасчетаЧекаККМ.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	ВидимостьЗачетаАвансаПрипродажеВДолг();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДепозитнуюОперациюККМ(НастройкаПечатиЧеков)
	Если ЗначениеЗаполнено(НастройкаПечатиЧеков) Тогда
		Если НастройкаПечатиЧеков.ДоступныКредитныеПлатежи И НЕ НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи Тогда
			СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит;
		ИначеЕсли НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи И НЕ НастройкаПечатиЧеков.ДоступныКредитныеПлатежи Тогда
			СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Аванс;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособРасчетаЧекаККМ;
	
КонецФункции

&НаСервере
Функция ВДокументеЕстьРеализацияСертификатовПоАБ_4_20_13041()
	
	Для Каждого СтрокаРаботы Из Объект.Работы Цикл
		Если ЗначениеЗаполнено(СтрокаРаботы.Сертификат)
			И РаботаСТорговымОборудованием.ПолучитьДатуПервойПродажиСертификата(СтрокаРаботы.Сертификат, Объект.Ссылка) > Константы.ДатаНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041.Значение() 	
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьДанныеПолучателя(Команда)
	РаботаСДокументамиСервер.ЗаполнитьУчастникаИИННДенежнойОперации(Объект.Клиент, Объект.ПринятоОт, Объект.ПринятоОтИНН, Объект.ПринятоОтАдрес,  Истина);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЛогическийКонтрольСуммыЗачетаАвансаПродажиВДолг()
	
	СуммаНедоплаты = Макс(0, Объект.СуммаДокумента - Объект.Оплата.Итог("Сумма"));
	Объект.СуммаЗачетаАвансаПродажиВДолг = Мин(СуммаНедоплаты, Объект.СуммаЗачетаАвансаПродажиВДолг);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаЧекаККМПриИзменении(Элемент)
	ВидимостьЗачетаАвансаПрипродажеВДолг();
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗачетаАвансаПродажиВДолгПриИзменении(Элемент)
	
	ЛогическийКонтрольСуммыЗачетаАвансаПродажиВДолг();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументКоррекцииПриИзменении(Элемент)
	УстановитьВидимостьПоТипуОперации();
	РаботаСДокументамиКлиент.ОбновитьВидимостьЭлементовКоррекции(ЭтаФорма, Объект.Коррекция);
КонецПроцедуры

#Область ЗаявкиДокумента // Заявки, оформляемые документом, помимо указанной в качестве основания.

&НаКлиенте
Процедура ЗаявкиДокументаСсылкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",	Объект.Ссылка);
	ПараметрыФормы.Вставить("Клиент",	Объект.Клиент); 
	ПараметрыФормы.Вставить("Дата",		Объект.Дата);
	ПараметрыФормы.Вставить("Филиал",	Объект.Филиал);
	
	Заявки = ПолучитьЗаявкиДокумента();
	Если Заявки.Количество() <> 0 Тогда
		ПараметрыФормы.Вставить("ЗаявкиДокументаПродажи", Заявки);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗаявок", ЭтаФорма);
	
	ОткрытьФорму("Документ.ОказаниеУслуг.Форма.ЗаявкиДокумента", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстГиперссылкиЗаявок()
	
	Элементы.ЗаявкиДокументаСсылка.Видимость = Не Объект.Коррекция И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ПродажаКлиенту");
	
	Если Элементы.ЗаявкиДокументаСсылка.Видимость Тогда
		КоличествоДопЗаявок = Объект.Заявки.Количество();
		Если КоличествоДопЗаявок > 0 Тогда
			Элементы.ЗаявкиДокументаСсылка.Заголовок = НСтр("ru='и еще'") + " " + Строка(КоличествоДопЗаявок) + " " + УправлениеЗаявками.СклонениеСловаЗаявка(КоличествоДопЗаявок);
			Элементы.РаботыПерезаполнитьПоЗаявкам.Видимость = Истина;
			Элементы.РаботыДополнитьРаботыПоЗаявкам.Видимость = Истина;
		Иначе
			Элементы.ЗаявкиДокументаСсылка.Заголовок = НСтр("ru='Добавить заявки'") + "...";
			Элементы.РаботыПерезаполнитьПоЗаявкам.Видимость = Ложь;
			Элементы.РаботыДополнитьРаботыПоЗаявкам.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаявкиДокумента()
	
	Заявки = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Заявки Цикл
		Заявки.Добавить(СтрокаТЧ.Заявка);
	КонецЦикла;
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Заявка")
		И ЗначениеЗаполнено(Объект.ДокументОснование)
	Тогда
		Заявки.Добавить(Объект.ДокументОснование);
	КонецЕсли;
	
	Возврат Заявки;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораЗаявок(ВыбранныеЗаявки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеЗаявки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	// Определение, каких заявок из выбранных не было в документе.
	ДобавленныеЗаявки = Новый Массив;
	ТекущиеЗаявки = ПолучитьЗаявкиДокумента();
	Для Каждого Заявка Из ВыбранныеЗаявки Цикл
		
		Если ТекущиеЗаявки.Найти(Заявка) = Неопределено Тогда
			ДобавленныеЗаявки.Добавить(Заявка);
		КонецЕсли;
	КонецЦикла;
	
	// Перенос выбранных заявок в документ.
	Объект.Заявки.Очистить();
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Заявка")
		И ВыбранныеЗаявки.Найти(Объект.ДокументОснование) = Неопределено
	Тогда
		Объект.ДокументОснование = ПредопределенноеЗначение("Документ.Заявка.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого Заявка Из ВыбранныеЗаявки Цикл
		Если Заявка <> Объект.ДокументОснование Тогда
			Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Объект.ДокументОснование = Заявка;
			Иначе
				Объект.Заявки.Добавить().Заявка = Заявка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьТекстГиперссылкиЗаявок();
	
	// Предложение дополнить услуги по заявкам
	Если ДобавленныеЗаявки.Количество() <> 0 Тогда
		Если Объект.Работы.Количество() <> 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаДополнитьРаботыДобавленныемиЗаявками", ЭтаФорма, ДобавленныеЗаявки);
			ПоказатьВопрос(Оповещение, НСтр("ru='Дополнить документ работами из добавленных заявок?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,, КодВозвратаДиалога.Да);
		Иначе
			ДополнитьРаботыПоЗаявкамДокумента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаДополнитьРаботыДобавленныемиЗаявками(Ответ, Заявки) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Таймаут Тогда

		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаДополнитьРаботыДобавленныемиЗаявками", ЭтаФорма, Заявки);
		ПоказатьВопрос(Оповещение, НСтр("ru='Дополнить документ работами из добавленных заявок?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,, КодВозвратаДиалога.Да);
	
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнитьРаботыПоЗаявкамДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьРаботыПоЗаявкамДокумента(Заявки = Неопределено)
	
	Если Заявки = Неопределено Тогда
		Заявки = ПолучитьЗаявкиДокумента();
	КонецЕсли;
	
	Отбор = Новый Структура("Номенклатура, Сотрудник");
	РаботыЗаявок = ПолучитьРаботыЗаявок(Заявки);
	Для Каждого РаботаЗаявки Из РаботыЗаявок Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, РаботаЗаявки);
		Если Объект.Работы.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			// Если в строке сотрудник шапки, то нужно также проверить, есть ли в документе строка с пустым сотрудником
			Отбор.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			
			Если Не (РаботаЗаявки.Сотрудник = Объект.Сотрудник И Объект.Работы.НайтиСтроки(Отбор).Количество() > 0) Тогда
				Отбор.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				
				СтрокаРаботы = Объект.Работы.Добавить();
				СтрокаРаботы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.Работы);
				ЗаполнитьЗначенияСвойств(СтрокаРаботы, РаботаЗаявки);
				Если СтрокаРаботы.Сотрудник = Объект.Сотрудник Тогда
					СтрокаРаботы.Сотрудник = Неопределено;
				КонецЕсли;
				
				Если РаботаЗаявки.ПродолжительностьЕдиницыУслуги <> 0 Тогда
					СтрокаРаботы.Количество	= Окр((ОбщегоНазначения.ВремяВСекунды(РаботаЗаявки.Продолжительность)/60/РаботаЗаявки.ПродолжительностьЕдиницыУслуги)+0.5,0,0);
				Иначе
					СтрокаРаботы.Количество	= 1;
				КонецЕсли;
				
				ЗаполнитьСотрудниковОбщихФормУчастия(СтрокаРаботы, "Работы");
				РаботыРаботаПриИзменении(Неопределено, СтрокаРаботы.НомерСтроки - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРаботыЗаявок(Заявки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", Заявки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаРаботы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА ЗаявкаРаботы.Ссылка.Сотрудник
	|		ИНАЧЕ ЗаявкаРаботы.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	ЗаявкаРаботы.Продолжительность КАК Продолжительность,
	|	ЗаявкаРаботы.Номенклатура.ПродолжительностьЕдиницыУслуги КАК ПродолжительностьЕдиницыУслуги
	|ИЗ
	|	Документ.Заявка.Работы КАК ЗаявкаРаботы
	|ГДЕ
	|	ЗаявкаРаботы.Ссылка В(&Заявки)
	|	И ЗаявкаРаботы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаРаботы.Ссылка.ДатаНачала"
	;
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьРаботыПоЗаявкам(Команда)
	
	Если Объект.Работы.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРаботыПоЗаявкамЗавершение", ЭтаФорма, Истина);
		ТекстВопроса = НСтр("ru='Перезаполнить документ работами из заявок? Текущий список работ будет очищен!'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьРаботыПоЗаявкамЗавершение(, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьРаботыПоЗаявкам(Команда)
	
	ЗаполнитьРаботыПоЗаявкамЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаботыПоЗаявкамЗавершение(Ответ = Неопределено, ПолноеПерезаполнение = Ложь) Экспорт
	
	Если Ответ = Неопределено Или Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ПолноеПерезаполнение Тогда
			Объект.Работы.Очистить();
			Объект.Материалы.Очистить();
		КонецЕсли;
		
		ДополнитьРаботыПоЗаявкамДокумента();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП
КонецПроцедуры

// ИнтеграцияМДЛП

&НаСервере
Процедура СформироватьТекстУведомленияМДЛП()
	
	ИнтеграцияМДЛП.СформироватьТекстУведомленияМДЛП(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПКлиент.ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец ИнтеграцияМДЛП

#Область ФД12вЧеке // ФД 1.2 и маркировка в чеке.

&НаКлиенте
Процедура ОбновитьИнформациюОКМ() Экспорт
	
	ЕстьШтрихкодированныеТовары = Ложь;
	Штрихкоды = Новый Массив();
	// Подготовим массив только из ШК, являющихся КМ.
	Для Каждого Товар Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Товар.Штрихкод) Тогда
			ЕстьШтрихкодированныеТовары = Истина;
			ДанныеШтрихкода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Товар.Штрихкод);		
			Если ДанныеШтрихкода.Разобран Тогда
				НаименованиеРеквизита = ДанныеШтрихкода.НаименованиеРеквизита;				
				// Проверим, что это ШК от маркированного лекарственного препарата
				// TODO: добавить проверку номенклатуры на наличие потребительской упаковки?
				Если ДанныеШтрихкода.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
					Штрихкоды.Добавить(Товар.Штрихкод);	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если Штрихкоды.Количество() = 0 Тогда
		// Среди товаров нет КМ, обнулим статусы в ТЧ Товары и прервемся.	
		Для Каждого СтрТовары Из Объект.Товары Цикл
			СтрТовары.СтатусКМ = "";
		КонецЦикла;
		Если ЕстьШтрихкодированныеТовары Тогда
			СтатусКМ = "Нет маркированных товаров.";
		Иначе
			СтатусКМ = "";
		КонецЕсли;
		Возврат;
	Иначе
		СтатусКМ = "Есть маркированные товары!";
	КонецЕсли;
	
	РезультатыПроверокКМ = ПолучитьДанныеПроверокКМИзРегистра(Объект.Ссылка, Штрихкоды);
	
	Если РезультатыПроверокКМ.Количество() > 0 Тогда		
		// Перенесем найденные результаты проверки КМ на ККТ из регистра в ТЧ Товары.
		Для Каждого СтрТовары Из Объект.Товары Цикл			
			Для Каждого РезультатПроверкиКМ Из РезультатыПроверокКМ Цикл
				Если РезультатПроверкиКМ.Штрихкод = СтрТовары.Штрихкод Тогда
					СтрТовары.СтатусКМ = РезультатПроверкиКМ.ПредставлениеВЧеке;
					Если РезультатПроверкиКМ.СтатусТовара <> ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараКорректен") Тогда
						СтатусКМ = СтатусКМ + "*";
						Элементы.СтатусКМ.ЦветТекста = Новый Цвет(255, 0, 0);							

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;
	Иначе
		// В регистре совпадений не нашли, значит проверка на ККТ ни разу не выполнялась.
		// Обойдем массив штрихкодов, относящийся к КМ, и проставим статусы для этих строк в ТЧ Товары. 
		Для Каждого Штрихкод Из Штрихкоды Цикл
			Для Каждого СтрТовары Из Объект.Товары Цикл
				Если СтрТовары.Штрихкод = ШтрихКод Тогда
					СтрТовары.СтатусКМ = "[!М]";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПроверокКМИзРегистра(Документ, Штрихкоды)
	РезультатПроверокКМ = Новый Массив();
	
	// Получим данные из регистра, в котором сохраняются результаты всех проверок КМ на ККТ.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыПроверкиКМНаККТ.Штрихкод КАК Штрихкод,
	|	РезультатыПроверкиКМНаККТ.КодРезультатаПроверки КАК КодРезультатаПроверки,
	|	РезультатыПроверкиКМНаККТ.КодМаркировкиПроверен КАК КодМаркировкиПроверен,
	|	РезультатыПроверкиКМНаККТ.КодОбработкиЗапроса КАК КодОбработкиЗапроса,
	|	РезультатыПроверкиКМНаККТ.РезультатПроверки КАК РезультатПроверки,
	|	РезультатыПроверкиКМНаККТ.РезультаПроверкиОИСМ КАК РезультаПроверкиОИСМ,
	|	РезультатыПроверкиКМНаККТ.СтатусТовара КАК СтатусТовара,
	|	РезультатыПроверкиКМНаККТ.ТребуетсяПолныйКодМаркировки КАК ТребуетсяПолныйКодМаркировки,
	|	РезультатыПроверкиКМНаККТ.ПредставлениеРезультатаПроверки КАК ПредставлениеРезультатаПроверки,
	|	РезультатыПроверкиКМНаККТ.ПредставлениеВЧеке КАК ПредставлениеВЧеке
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиКМНаККТ КАК РезультатыПроверкиКМНаККТ
	|ГДЕ
	|	РезультатыПроверкиКМНаККТ.Документ = &Документ
	|	И РезультатыПроверкиКМНаККТ.Штрихкод В(&Штрихкоды)";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Штрихкоды", Штрихкоды);	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выгрузка = РезультатЗапроса.Выгрузить();
		РезультатПроверокКМ = ОбщегоНазначения.ТаблицаЗначенийВМассив(Выгрузка);
	КонецЕсли;
	
	Возврат РезультатПроверокКМ;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеСтатусовКМ()
	
	ПредставленияВЧеке		= ИнтеграцияМДЛПМедицинаКлиентСервер_БИТ.ПредставлениеКодаМаркировкиВЧеке();
	ПутьКДаннымПоляСтатусКМ	= "Объект.Товары.СтатусКМ";
	ИмяРеквизитаСтатусКМ	= "ТоварыСтатусКМ";
	
	// [М+]	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	НовыйЭлементУсловногоОформления.Использование = Истина;
	// Отбор
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;         
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляСтатусКМ);
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= ПредставленияВЧеке.МПлюс;
	// Оформляемое поле	
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле			= Новый ПолеКомпоновкиДанных(ИмяРеквизитаСтатусКМ);
	// Установка цвета фона
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(153, 204, 0));
	
	// [М-]	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	НовыйЭлементУсловногоОформления.Использование = Истина;
	// Отбор
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;         
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляСтатусКМ);
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= ПредставленияВЧеке.ММинус;
	// Оформляемое поле
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование	= Истина;
	НовоеПоле.Поле			= Новый ПолеКомпоновкиДанных(ИмяРеквизитаСтатусКМ);
	// Установка цвета фона	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 0, 0));
	
	// [М]	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	НовыйЭлементУсловногоОформления.Использование = Истина;
	// Отбор
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;         
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляСтатусКМ);
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= ПредставленияВЧеке.М;
	// Оформляемое поле
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование	= Истина;
	НовоеПоле.Поле			= Новый ПолеКомпоновкиДанных(ИмяРеквизитаСтатусКМ);
	// Установка цвета фона	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(128, 0, 128));

	// [М] отсутствует
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	НовыйЭлементУсловногоОформления.Использование = Истина;
	// Отбор
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;         
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляСтатусКМ);
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= ПредставленияВЧеке.НепроверенныйКМ;
	// Оформляемое поле
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование	= Истина;
	НовоеПоле.Поле			= Новый ПолеКомпоновкиДанных(ИмяРеквизитаСтатусКМ);
	// Установка цвета фона
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 153, 204));	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтатусыКМНажатие(Элемент)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма, Истина) Тогда
		Предупреждение(НСтр("ru = 'Перед открытием результатов проверки кодов маркировки документ необходимо записать!'"));
		Возврат;	
	КонецЕсли;
	
	ОтборКМ = Новый Структура("Документ", Объект.Ссылка);
	ПараметрыФормыКМ = Новый Структура("Отбор", ОтборКМ);
	ОткрытьФорму("РегистрСведений.РезультатыПроверкиКМНаККТ.ФормаСписка", ПараметрыФормыКМ, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыМаркированныхТоваров(Команда)

	// Обновим статусы КМ по данным из регистра РезультатыПроверкиКМНаККТ	
	ОбновитьИнформациюОКМ();
	
КонецПроцедуры

&наСервере
Процедура ПоместитьРеквизитыККТИзХЗвРеквизитыФормы()
	
	ОУОбъект = РеквизитФормыВЗначение("Объект");
	ПерсональныеДанныеПокупателя	= ОУОбъект.ПерсональныеДанныеПокупателя.Получить();
	ОперационныйРеквизит			= ОУОбъект.ОперационныйРеквизит.Получить();
	ОтраслевойРеквизит				= ОУОбъект.ОтраслевойРеквизит.Получить();
	
КонецПроцедуры

&наСервере
Процедура ЗаписатьРеквизитыККТИзРеквизитовФормыВХЗ(ОУОбъект)
	
	ОУОбъект.ПерсональныеДанныеПокупателя	= Новый ХранилищеЗначения(ПерсональныеДанныеПокупателя);
	ОУОбъект.ОперационныйРеквизит			= Новый ХранилищеЗначения(ОперационныйРеквизит);
	ОУОбъект.ОтраслевойРеквизит				= Новый ХранилищеЗначения(ОтраслевойРеквизит);
	
КонецПроцедуры

&НаКлиенте
Функция ПоместитьЗначениеРеквизитаККТВХранилище(НазваниеРеквизитаККТ)
	
	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект[НазваниеРеквизитаККТ], ЭтотОбъект.УникальныйИдентификатор) 	
	
КонецФункции

&НаКлиенте
Процедура СохранитьЗначениеРеквизитаККТВОбъекте(ЗначениеРеквизитаККТ, НазваниеРеквизитаККТ)
	
	Если ЗначениеЗаполнено(НазваниеРеквизитаККТ) Тогда
		ЭтотОбъект[НазваниеРеквизитаККТ]	= ЗначениеРеквизитаККТ;
		ЭтотОбъект.Модифицированность		= Истина;
	Иначе
		ВызватьИсключение "Реквизит с названием " + НазваниеРеквизитаККТ + " не найден. Обратитесь в техподдержку разработчика программного продукта.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗначениеРеквизитаККТВОбъекте(НазваниеРеквизитаККТ)
	
	Если ЗначениеЗаполнено(НазваниеРеквизитаККТ) Тогда
		ЭтотОбъект[НазваниеРеквизитаККТ]	= Неопределено;
		ЭтотОбъект.Модифицированность		= Истина;
		Объект.ПринятоОт = Объект.Клиент;
		Объект.ПринятоОтИНН = Неопределено;
		Объект.ПринятоОтАдрес = Неопределено;	
	Иначе
		ВызватьИсключение "Реквизит с названием " + НазваниеРеквизитаККТ + " не найден. Обратитесь в техподдержку разработчика программного продукта.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияРеквизитаККТ(Результат, ПараметрыРеквизитаККТ) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Свойство("ДетальнаяИнформация") Тогда
			СохранитьЗначениеРеквизитаККТВОбъекте(Результат.ДетальнаяИнформация, ПараметрыРеквизитаККТ.НазваниеРеквизитаККТ);
			Если ПараметрыРеквизитаККТ.НазваниеРеквизитаККТ = "ПерсональныеДанныеПокупателя" Тогда
				Объект.ПринятоОт = Результат.Клиент;
				Объект.ПринятоОтИНН = Результат.ДетальнаяИнформация.ИНН;
				Объект.ПринятоОтАдрес = Результат.Адрес;
			КонецЕсли;
		ИначеЕсли Результат.Свойство("Удалить") Тогда
			ОчиститьЗначениеРеквизитаККТВОбъекте(ПараметрыРеквизитаККТ.НазваниеРеквизитаККТ);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьРедактированиеРеквизитаККТ(НазваниеРеквизитаККТ)
	
	СтандартнаяОбработка = Ждать РаботаСТорговымОборудованиемКлиент.ПередРедактированиемРеквизитаЧекаККТ(НазваниеРеквизитаККТ, ЭтотОбъект);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРеквизитаККТ = Новый Структура("НазваниеРеквизитаККТ", НазваниеРеквизитаККТ, Объект.Клиент);
	
	Если НазваниеРеквизитаККТ = "ПерсональныеДанныеПокупателя" Тогда
		ПерсональныеДанные = Новый Структура;
		ПерсональныеДанные.Вставить("Клиент", Объект.Клиент);
		ПерсональныеДанные.Вставить("КлиентПредставление", Объект.ПринятоОт);
		ПерсональныеДанные.Вставить("ИНН", Объект.ПринятоОтИНН);
		ПерсональныеДанные.Вставить("Адрес", Объект.ПринятоОтАдрес);
		ПараметрыРеквизитаККТ.Вставить("ПерсональныеДанные", ПерсональныеДанные);
	КонецЕсли;
	
	ПараметрыРеквизитаККТ.Вставить("Дата", Объект.Дата);
	ПараметрыРеквизитаККТ.Вставить("АдресХранилищаДанныхРеквизита", ПоместитьЗначениеРеквизитаККТВХранилище(ПараметрыРеквизитаККТ.НазваниеРеквизитаККТ));
	ОповещениеОЗакрытииФормыРедактированияРеквизитаККТ = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияРеквизитаККТ", ЭтотОбъект, ПараметрыРеквизитаККТ);	
	ОткрытьФорму("ОбщаяФорма.РеквизитыЧекаККТ", ПараметрыРеквизитаККТ, ЭтотОбъект,,,, ОповещениеОЗакрытииФормыРедактированияРеквизитаККТ);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПерсональныеДанныеПокупателяНажатие(Элемент)
	
	ВыполнитьРедактированиеРеквизитаККТ("ПерсональныеДанныеПокупателя");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОперационныйРеквизитНажатие(Элемент)
	
	ВыполнитьРедактированиеРеквизитаККТ("ОперационныйРеквизит");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтраслевойРеквизитНажатие(Элемент)
	
	ВыполнитьРедактированиеРеквизитаККТ("ОтраслевойРеквизит");
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаНеЗаполненыШКМаркируемыхТоваров()
	
	ТекстОшибки = "";
	
	// Проверка маркировки товаров
	Если мУчетнаяПолитика.КонтролироватьЗаполнениеШКМаркированногоТовараПриПродаже Тогда
			
		СерииТоваровБезШК = Новый Массив;
		СтрокиТоварыОшибкаНетШК = Новый Массив;
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры)
				И ПустаяСтрока(СтрокаТовары.Штрихкод)
			Тогда
				СерииТоваровБезШК.Добавить(СтрокаТовары.СерияНоменклатуры);
				СтрокиТоварыОшибкаНетШК.Добавить(СтрокаТовары);
			КонецЕсли;
		КонецЦикла;
		
		Если СерииТоваровБезШК.Количество() <> 0 Тогда
			РеквизитСерияМаркируетсяМДЛП = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СерииТоваровБезШК, "СерияПромаркированаДляЦелейМДЛП");
			
			мОбрИнд = СтрокиТоварыОшибкаНетШК.Количество()-1;
			Для Сч = 0 По мОбрИнд Цикл
				СерияТовара = СтрокиТоварыОшибкаНетШК[мОбрИнд-Сч].СерияНоменклатуры;
				Если РеквизитСерияМаркируетсяМДЛП.Получить(СерияТовара) = Ложь Тогда
					СтрокиТоварыОшибкаНетШК.Удалить(мОбрИнд-Сч);
				КонецЕсли;
			КонецЦикла;
			
			Ошибка = "содержится товар маркируемой серии с незаполненным штрихкодом!";
			ШаблонОшибки = НСтр("ru='В строке номер ""%1"" табличной части ""Товары"":  %2'");
			
			Для Каждого СтрокаТовара Из СтрокиТоварыОшибкаНетШК Цикл
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, СтрШаблон(ШаблонОшибки, СтрокаТовара.НомерСтроки, Ошибка), Символы.ПС);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ТоварыШтрихкодПриИзменении(Элемент)
		
	ПриЗаполненииИзмененииШКТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗаполненииИзмененииШКТовары()

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеШтрихкода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ТекущиеДанные.Штрихкод);
	Если ДанныеШтрихкода.Разобран 
		И ДанныеШтрихкода.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1")
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
	Тогда
		ДробнаяЧасть = РаботаСДокументамиСервер.ПолучитьДробнуюЧастьМДЛП(ТекущиеДанные.Номенклатура, ТекущиеДанные.ЕдиницаИзмерения);
		ТекущиеДанные.КоличествоЧислитель = ДробнаяЧасть.Числитель;
		ТекущиеДанные.КоличествоЗнаменатель = ДробнаяЧасть.Знаменатель;
	Иначе
		ТекущиеДанные.КоличествоЧислитель = 0;
		ТекущиеДанные.КоличествоЗнаменатель = 0;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверкаСтрокТоваровМДЛП(Знач Товары)
	
	Ошибки = Новый Массив;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Штрихкод) И ЗначениеЗаполнено(СтрокаТовары.КоличествоЗнаменатель) Тогда
			Если СтрокаТовары.КоличествоЧислитель > СтрокаТовары.КоличествоЗнаменатель Тогда
				Ошибки.Добавить("Количество к реализации больше количества в упаковке" + Символы.ПС
															  + "Товары. Стр. " + СтрокаТовары.НомерСтроки);
			ИначеЕсли СтрокаТовары.Количество > 1 Тогда
				Ошибки.Добавить("Невозможно продать более одной маркированной упаковки с одним штрихкодом" + Символы.ПС
															  + "Товары. Стр. " + СтрокаТовары.НомерСтроки);
			ИначеЕсли СтрокаТовары.Количество = 1 И СтрокаТовары.КоличествоЧислитель <> СтрокаТовары.Коэффициент Тогда
				Ошибка = СтрШаблон("Значение колонки ""Кол-во штук к реализации"" должно быть равно коэффициенту единицы измерения (%1)" + Символы.ПС
															  + "Товары. Стр. " + СтрокаТовары.НомерСтроки, СтрокаТовары.Коэффициент);
				Ошибки.Добавить(Ошибка);
			ИначеЕсли СтрокаТовары.Коэффициент < СтрокаТовары.КоличествоЗнаменатель И СтрокаТовары.КоличествоЧислитель = 0 Тогда
				Ошибки.Добавить("Не заполнена колонка ""Кол-во штук к реализации"". Её необходимо заполнить т.к. упаковка продается частично." + Символы.ПС
															  + "Товары. Стр. " + СтрокаТовары.НомерСтроки);
			ИначеЕсли СтрокаТовары.Коэффициент > СтрокаТовары.КоличествоЗнаменатель Тогда
				Ошибки.Добавить("В единице измерения маркированного товара больше вместимость, чем в потребительской упаковке" + Символы.ПС
															  + "Товары. Стр. " + СтрокаТовары.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

#КонецОбласти

#Область ОплатаНСПК

// При создании на сервере
&НаСервере
Процедура НСПК_ПриСозданииНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		// Подготовка нового документа.
		УдалитьПоляНСПК();
		ОбработатьВозвратПоПродажеНСПК(); // Обработка ввода возврата по продаже с ЭС НСПК.
	Иначе
		// Заполнение данных НСПК на форме при открытии старого документа.
		ЗаполнитьПоляНСПК();
	КонецЕсли;
	
КонецПроцедуры

// При создании на сервере
&НаСервере
Процедура ЗаполнитьПоляНСПК()
	
	НСПК_СпособОплаты = Документы.ОказаниеУслуг.ПолучитьСпособОплатыНСПК(Объект);
	
КонецПроцедуры

// При создании на сервере
&НаСервере
Процедура УдалитьПоляНСПК()
	
	Объект.ИдентификаторКорзиныНСПК = Неопределено;
	
	// Удаление оплаты ЭС НСПК.
	СтрокиБезнал = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные));
	Для Каждого СтрокаОплаты Из СтрокиБезнал Цикл
		Если СтрокаОплаты.ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.СертификатНСПК Тогда
			Объект.Оплата.Удалить(СтрокаОплаты);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// При создании на сервере
&НаСервере
Процедура ОбработатьВозвратПоПродажеНСПК()
	
	Если	Объект.ВидОперации <> Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту
		Или	ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ОказаниеУслуг")
	Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Объект.ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОказаниеУслуг.ИдентификаторКорзиныНСПК КАК ИдентификаторКорзиныНСПК
	               |ИЗ
	               |	Документ.ОказаниеУслуг КАК ОказаниеУслуг
	               |ГДЕ
	               |	ОказаниеУслуг.Ссылка = &Основание";
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий()
		И ЗначениеЗаполнено(Выб.ИдентификаторКорзиныНСПК)
	Тогда
		СтруктураПараметров.Вставить("НСПК_ЭтоВозвратПродажиПоЭсНСПК", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НСПК_ПриОткрытии()
	
	// Новый возврат по ЭС НСПК. Если сразу очевидно, что будут возвращать, то открываем одобрение корзины возврата.
	Если СтруктураПараметров.Свойство("НСПК_ЭтоВозвратПродажиПоЭсНСПК")
		И Объект.Ссылка.Пустая()
		И Объект.Товары.Количество() = 1
		И Объект.Товары[0].Количество = 1
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту")
		И (Объект.СостояниеЧековККМ = ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиНеПробиты")
			Или Не ЗначениеЗаполнено(Объект.СостояниеЧековККМ))
	Тогда
		НСПК_ОдобритьКорзину(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НСПК_ОдобритьКорзину(Команда)
	
	Если Объект.СостояниеЧековККМ = ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиПробиты") Тогда
		ПоказатьПредупреждение(, "Чеки уже пробиты. Нельзя редактировать оплату по ЭС НСПК для фискализированного документа.");
		Возврат;
	КонецЕсли;
	
	ТРУТовары = Новый Массив; 
	
	НоменклатураТоваров = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(Объект.Документ) Или СтрокаТЧ.НеОплачиваетсяПолисом Тогда
			НоменклатураТоваров.Добавить(СтрокаТЧ.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	КодыТРУ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НоменклатураТоваров, "КодТРУ");
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(КодыТРУ.Получить(СтрокаТЧ.Номенклатура)) Тогда 
			СтрокаТовары = Новый Структура;
			СтрокаТовары.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			СтрокаТовары.Вставить("Серия", СтрокаТЧ.СерияНоменклатуры);
			СтрокаТовары.Вставить("Количество", СтрокаТЧ.Количество);
			СтрокаТовары.Вставить("Цена", СтрокаТЧ.Сумма / ?(СтрокаТЧ.Количество <> 0, СтрокаТЧ.Количество, 1));
			ТРУТовары.Добавить(СтрокаТовары);	
		КонецЕсли;
	КонецЦикла;
	
	Если ТРУТовары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "В документе нет товаров с заполненным кодом ТРУ.");
		Возврат;
	КонецЕсли;
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Товары", ТРУТовары);
	ПараметрыОткрытия.Вставить("ЭквайринговыйТерминал", ?(ЗначениеЗаполнено(НСПК_СпособОплаты), НСПК_СпособОплаты, ЭквайринговыйТерминалНаФорме));
	ПараметрыОткрытия.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК) Тогда
		ПараметрыОткрытия.Вставить("ИдентификаторКорзиныНСПК", Объект.ИдентификаторКорзиныНСПК);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту") Тогда
		ПараметрыОткрытия.Вставить("ИдентификаторКорзиныНСПК", ОбщегоНазначенияСервер.ПолучитьРеквизитСсылки(Объект.ДокументОснование ,"ИдентификаторКорзиныНСПК"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредварительнаяПроверкаНСПКЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ОказаниеУслуг.Форма.ПроверкаПозицийЧекаНСПК", ПараметрыОткрытия,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры 

&НаКлиенте
Процедура ПредварительнаяПроверкаНСПКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Свойство("ЭквайринговыйТерминал") Тогда
			НСПК_СпособОплаты = Результат.ЭквайринговыйТерминал;		
		КонецЕсли;
				
		Если Результат.Свойство("ИдентификаторКорзиныНСПК") Тогда
			
			Модифицированность = Истина;
			
			Объект.ИдентификаторКорзиныНСПК = Результат.ИдентификаторКорзиныНСПК;
			
		КонецЕсли;
		
		Если Результат.Свойство("Сумма") Тогда
			Оплата_СуммаОплатыЧерезНСПК_ПриИзменении(Результат.Сумма);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьИнформациюОСоставеКорзины(ИдентификаторКорзины)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СодержимоеКорзиныНСПК.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.СодержимоеКорзиныНСПК КАК СодержимоеКорзиныНСПК
	               |ГДЕ
	               |	СодержимоеКорзиныНСПК.ИдентификаторКорзиныНСПК = &ИКНСПК";
	
	Запрос.УстановитьПараметр("ИКНСПК", ИдентификаторКорзины);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СодержимоеКорзиныНСПК.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторКорзиныНСПК = ИдентификаторКорзины;
		Запись.Номенклатура = Выборка.Номенклатура;
		Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НСПК_ОтправитьПодтверждение(Команда)
	
	РаботаСДокументамиКлиент.ОтправитьПодтверждениеНСПК(ЭтотОбъект);
	                                       
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоставКорзиныНСПКИзменен(Документ, ИдентификаторКорзины, СуммаНСПКВДокументе)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорзинаНСПК", ИдентификаторКорзины);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СодержимоеКорзиныНСПК.ИдентификаторКорзиныНСПК КАК ИдентификаторКорзиныНСПК,
	               |	СодержимоеКорзиныНСПК.Номенклатура КАК Номенклатура,
	               |	СодержимоеКорзиныНСПК.ЦенаПродажи КАК ЦенаПродажи,
	               |	СодержимоеКорзиныНСПК.ЦенаНСПК КАК ЦенаНСПК,
	               |	СодержимоеКорзиныНСПК.Количество КАК Количество
	               |ИЗ
	               |	РегистрСведений.СодержимоеКорзиныНСПК КАК СодержимоеКорзиныНСПК
	               |ГДЕ
	               |	СодержимоеКорзиныНСПК.ИдентификаторКорзиныНСПК = &КорзинаНСПК";
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		СуммаНСПК = 0;
		
		Пока Выборка.Следующий() Цикл
			СтрокаТовара = Документ.Товары.Найти(Выборка.Номенклатура, "Номенклатура");
			Если СтрокаТовара <> Неопределено Тогда
				Если Выборка.ЦенаПродажи <> (СтрокаТовара.Сумма / ?(СтрокаТовара.Количество <> 0, СтрокаТовара.Количество, 1)) 
					Или Выборка.Количество > СтрокаТовара.Количество
				Тогда
					Возврат Истина; 	
				КонецЕсли;
				СуммаНСПК = СуммаНСПК + Выборка.ЦенаНСПК * Выборка.Количество;		
			Иначе
				Возврат Истина;	
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаНСПКВДокументе <> СуммаНСПК Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаСтрокиИУдалениеСтрокиОплатыНСПК()
	ТекущиеДанные = Элементы.ТабличноеПолеОплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(НСПК_СпособОплаты) 
		И ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные")
		И Не ТекущиеДанные.ЭквайринговыйТерминал = НСПК_СпособОплаты
	Тогда
		ЭквайрингНСПК = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НСПК_СпособОплаты, "ЭквайрингНСПК");	
		Если ТекущиеДанные.ЭквайринговыйТерминал <> ЭквайрингНСПК Тогда
			Оплата_СуммаОплатыЧерезНСПК_ПриИзменении(0);
			НСПК_СпособОплаты = ПредопределенноеЗначение("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СправкиИИныеМедосмотры

&НаКлиенте
Процедура СоставСправокСправкиПриАктивизацииСтроки(Элемент) Экспорт
	ТекущиеДанные = Элементы["СоставСправокСправки"].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Если ЭтаФорма["СоставСправокСправки"].Количество() > 0 Тогда  
			Элементы["СоставСправокСправки"].ТекущаяСтрока = ЭтаФорма["СоставСправокСправки"][0].ПолучитьИдентификатор();
			ТекущиеДанные = ЭтаФорма["СоставСправокСправки"][0];
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Отбор = Новый Структура("НоменклатураСправки", ТекущиеДанные.Номенклатура);
	Элементы["СоставСправок"].ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте
Процедура СоставСправокИспользоватьПриИзменении(Элемент)
	
	Номенклатура = Элементы["СоставСправок"].ТекущиеДанные.НоменклатураСправки;
	//НоменклатураРаботы = Объект.Работы.НайтиСтроки("Номенклатура", Номенклатура);
	
	ДействияДляПересчетаЦен = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки, Использовать", Номенклатура, Истина));
	НоваяЦена = 0;
	Для Каждого Эл Из ДействияДляПересчетаЦен Цикл
		НоваяЦена = НоваяЦена + Эл.Цена;
	КонецЦикла;
	СтрокиДляИзменения = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Для Каждого Эл Из СтрокиДляИзменения Цикл
		Эл.Цена = НоваяЦена;
		РаботыЦенаПриИзменении(Неопределено, Эл);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьСправкуНоменклатуройДействий(Команда)
	ТекущиеДанные = Элементы["СоставСправокСправки"].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоменклатураРаботы = ТекущиеДанные.Номенклатура;
		
		УдалитьСтрокуНоменклатуры = Ложь;
		
		СтрокаДляУдаления = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураРаботы));
		Если Не (СтрокаДляУдаления.Количество() = 0) Тогда
			УдалитьСтрокуНоменклатуры = Истина;
		КонецЕсли;
		
		ДействияДляДобавления = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки, Использовать", НоменклатураРаботы, Истина));
		Для Каждого Эл Из ДействияДляДобавления Цикл
			
			Если Эл.Использовать Тогда
				
				СтрокаДействияВРаботах = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", Эл.НоменклатураДействия));
				Если СтрокаДействияВРаботах.Количество() = 0 Тогда
					
					Если Эл.Цена = 0 Тогда
						Цена = 0.0001;
					Иначе
						Цена = Эл.Цена;
					КонецЕсли;
					
					ОбработкаВнесенияНоменклатуры(Эл.НоменклатураДействия, Неопределено, Неопределено, , Цена);
					СтрокаДействияВРаботах = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", Эл.НоменклатураДействия));
					
				ИначеЕсли ЭтаФорма["СоставСправокУвеличивватьКолвоДляСправок"] Тогда
					СтрокаДействияВРаботах[0].Количество = СтрокаДействияВРаботах[0].Количество + 1;
					РаботыЦенаПриИзменении(Неопределено, СтрокаДействияВРаботах[0]); 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СоставСправокСправкиПриАктивизацииСтроки(Неопределено);
		
		Если УдалитьСтрокуНоменклатуры Тогда
			Объект.Работы.Удалить(Объект.Работы.Индекс(СтрокаДляУдаления[0]));
			РаботыПослеУдаления(Неопределено);
		КонецЕсли;
		
		ГруппаСоставСправок = Элементы.Найти("ГруппаСоставСправок");
		Если ГруппаСоставСправок <> Неопределено Тогда
			ГруппаСоставСправок.Скрыть();
		КонецЕсли;
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не выбрана справка/медосмотр");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСправкуИзСоставаСправок(Команда)
	
	ТекущиеДанные = Элементы["СоставСправокСправки"].ТекущиеДанные;
	НайденныеСтроки = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура));
	Если НайденныеСтроки.Количество() > 0 Тогда
		УдаляемаяНоменклатура = НайденныеСтроки[0];
		ДопПараметры = Новый Структура("УдаляемаяНоменклатура, ЭтаФорма", УдаляемаяНоменклатура, ЭтаФорма); 
		ОповещениеПродолжения = Новый ОписаниеОповещения("УдалитьСправкуИзСоставаСправокНоменклатураПродолжение", МедосмотрыКлиент, ДопПараметры);
		ПоказатьВопрос(ОповещениеПродолжения, "Удалить номенклатуру справки из работ?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ДопПараметры = Новый Структура("ЭтаФорма", ЭтаФорма);
		ОповещениеПродолжения = Новый ОписаниеОповещения("УдалениеДействийСправкиИзСоставаСправокНоменклатураПродолжение", МедосмотрыКлиент, ДопПараметры);
		ПоказатьВопрос(ОповещениеПродолжения, "Удалить номенклатуру действий справки из работ?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьГруппуНоменклатураДействийСправки(Команда)
	
	Элементы["ГруппаСоставСправок"].Скрыть();
	
КонецПроцедуры

#КонецОбласти

