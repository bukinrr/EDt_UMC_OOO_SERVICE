&НаКлиенте
Перем ТекущийВидМедосмотра;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.ВидМО) Тогда
		Объект.ВидМО = Справочники.ВидыМедосмотров.ПоПриказу29н;
	КонецЕсли;
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма, Ложь);
	
	ОбновитьСтатусыПрохождения();
	Если Объект.ВыполнениеРекомендаций.Количество() = 0 Тогда
		ЗаполнитьТаблицуРекомендаций();
	КонецЕсли;
	
	// ЭЦП
	ИспользуютсяЭП = ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК();
	Если ИспользуютсяЭП И Не Объект.Ссылка.Пустая() Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ЭП.Видимость = ИспользуютсяЭП;
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ФормаДокументСписокНаПрохождениеМедосмотраСписокЭМД", ИспользуютсяЭП);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ВредныеФакторыКлиента", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);

	УстановкаДоступностиПолямВвода(Объект.РучнаяКорректировка);
	ВидимостьНадписиЗавершен();
	УстановитьДоступностьЭлементов();
	
	КоличествоКлиентовВСмете = ПолучитьКоличествоКлиентовСметы();
	
	УстановитьОтборВредныеФакторыКлиента(Неопределено, Неопределено);
	
	ТекущийВидМедосмотра = Объект.ВидМО;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеПМО" Тогда 
		ОбновитьСтатусыПрохождения();
	ИначеЕсли ИмяСобытия = "СписокНаПрохождениеИзменен"
		И Параметр = Объект.Ссылка
	Тогда
		Прочитать();
		ОбновитьСтатусыПрохождения();
	ИначеЕсли ИмяСобытия = "ИзменилисьПодписи"
		И Параметр = Объект.Ссылка
	Тогда
		ОбновитьДанныеПослеПодписания();
		ЭтотОбъект.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПодписей"
		И Параметр = Объект.Ссылка
	Тогда
		ОбновитьСписокПодписей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(ТекущийОбъект,,ЭтаФорма);
	ОбновитьСтатусыПрохождения();
	
	Если ИспользуютсяЭП Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзмененныеДокументы") Тогда
		ДокументыДляОповещенияПослеЗаписи = Новый ФиксированныйМассив(ТекущийОбъект.ДополнительныеСвойства.ИзмененныеДокументы);
	Иначе
		ДокументыДляОповещенияПослеЗаписи = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Параметр = Новый Структура("СсылкаСПМО, ОбновленыВсе, мОбновленных", Объект.Ссылка, Ложь, ДокументыДляОповещенияПослеЗаписи);
	Оповестить("ОбновленыПМОИзСПМО", Параметр);
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПричинаНеявкиПриИзменении(Элемент)
	
	ОбновитьСтатусыПрохождения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыПрохождения()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокНаПрохождениеМедосмотра", Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрохождениеМедосмотра.Клиент КАК Клиент
		|ИЗ
		|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
		|ГДЕ
		|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра
		|	И ПрохождениеМедосмотра.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ ПрохождениеМедосмотра.ПометкаУдаления"
		;
		ЗавершившиеМО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
	Иначе
		ЗавершившиеМО = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаКлиент Из Объект.Клиенты Цикл
		
		Если ЗначениеЗаполнено(СтрокаКлиент.ПричинаНеявки) Тогда
			СтрокаКлиент.СостояниеПрохождения = "Неявка";
		ИначеЕсли ЗавершившиеМО.Найти(СтрокаКлиент.Клиент) <> Неопределено Тогда 
			СтрокаКлиент.СостояниеПрохождения = "Завершен";
		Иначе
			СтрокаКлиент.СостояниеПрохождения = "Не пройден";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	Если Объект.Клиенты.Количество() <> 0 Тогда
		Если Вопрос("Текущая таблица не пуста, очистить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.Клиенты.Очистить();
			Объект.Услуги.Очистить();
			КоличествоКлиентовВСмете = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДляПередачи = Новый Структура("Организация, ДатаСпискаНаМедосмотр, ВидМО", Объект.Контрагент, Объект.Дата, Объект.ВидМО);
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзExcel_ПослеЗагрузки", ЭтотОбъект);
	ОткрытьФорму("Документ.СписокНаПрохождениеМедосмотра.Форма.ЗагрузкаСпискаНаПрохождение",ПараметрыДляПередачи,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel_ПослеЗагрузки(ЗагруженныеКлиенты, ДополнительныеПараметры) Экспорт
	
	Если ЗагруженныеКлиенты <> Неопределено Тогда
		ЗаполнениеДанныхКлиента(ЗагруженныеКлиенты);
		ЭтаФорма.Записать();
		УстановкаВредныхФакторовВПМО(Объект.Ссылка, ЗагруженныеКлиенты);
		ПоказатьПредупреждение(, "Загрузка выполнена");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановкаВредныхФакторовВПМО(СсылкаСПМО, ЗагруженныеКлиенты)
	
	Клиенты = Новый Массив;
	СоответствиеВредныеФакторы = Новый Соответствие;
	
	Для Каждого Эл Из ЗагруженныеКлиенты Цикл
		Клиенты.Добавить(Эл.Клиент);
		СоответствиеВредныеФакторы.Вставить(Эл.Клиент, Эл.ВредныеФакторы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрохождениеМедосмотра.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
		|ГДЕ
		|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра
		|	И ПрохождениеМедосмотра.Клиент В(&Клиенты)";
	
	Запрос.УстановитьПараметр("Клиенты", Клиенты);
	Запрос.УстановитьПараметр("СписокНаПрохождениеМедосмотра", СсылкаСПМО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ФакторыИУсловияРаботы.Очистить();
		ВредныеФакторы = СоответствиеВредныеФакторы.Получить(ДокументОбъект.Клиент);
		Если ВредныеФакторы <> Неопределено Тогда
			Для Каждого Эл Из ВредныеФакторы Цикл
				НовыйВредныйФактор = ДокументОбъект.ФакторыИУсловияРаботы.Добавить();
				НовыйВредныйФактор.Фактор = Эл; 
			КонецЦикла;
		КонецЕсли;
		Документы.ПрохождениеМедосмотра.ПерезаполнитьДействияПрохожденияМедосмотра(ДокументОбъект);
		ДокументОбъект.Записать();
		Счетчик = Счетчик + 1;
		Если Счетчик > 25 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			Счетчик = 0;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДанныхКлиента(ЗагруженныеКлиенты)
	
	Для Каждого Эл Из ЗагруженныеКлиенты Цикл
		
		НоваяСтрока = Объект.Клиенты.Добавить();
		НоваяСтрока.Клиент = Эл.Клиент;
		НоваяСтрока.ТипМедосмотра = Эл.ТипМедосмотра;
		НоваяСтрока.ФИОКлиента = ОбщегоНазначения.ФИОФизЛица(Эл.Клиент);
		
		НоваяСтрока.Профессия = Эл.Профессия; 
		НоваяСтрока.ЦехУчасток = Эл.Подразделение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРекомендаций()
	
	пчМероприятия = Перечисления.МероприятияПоРезультатамМедосмотров;	
	Мероприятия = Перечисления.МероприятияПоРезультатамМедосмотров.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
	
	Для сч = 0 По Мероприятия.Количество()-1 Цикл
		текМероприятие = пчМероприятия[сч];
		Строка = Объект.ВыполнениеРекомендаций.Добавить();
		Строка.Мероприятие = текМероприятие;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаДоступностиПолямВВода(Доступность)
	
	Элементы.РаботникиНаТяжРаботахВсего.Доступность   = Доступность;
	Элементы.РаботникиНаТяжРаботахЖенщин.Доступность  = Доступность;
	Элементы.РаботникиНаТяжРаботахДо18Лет.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьНадписиЗавершен()
	
	Элементы.НадписьЗавершен.Видимость = ЗначениеЗаполнено(Объект.ДатаЗаключительногоАкта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаключительногоАктаПриИзменении(Элемент)
	ВидимостьНадписиЗавершен();
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено Или ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	мКлиентов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Клиенты.НайтиПоИдентификатору(ВыделеннаяСтрока);
		мКлиентов.Добавить(ТекДанные.Клиент);
	КонецЦикла;
	
	ДопПараметры = ПолучитьСтруктуруДопПараметров();
	ДопПараметры.мКлиентов = мКлиентов;
	ДопПараметры.ВыделенныеСтроки = ВыделенныеСтроки;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОповещениеПродолжения = Новый ОписаниеОповещения("КлиентыПередУдалениемПослеПроверкиМодифицированности", ЭтотОбъект, ДопПараметры); 
		
		Если ЭтаФорма.Модифицированность Тогда
			ТекстВопроса = "Документ был изменен, перед удалением необходимо сохранить документ. Выполнить сохранение?";
			ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Истина);
		КонецЕсли;
		
	Иначе
		ОповещениеПродолжения = Новый ОписаниеОповещения("КлиентыПередУдалениемЗавершение", ЭтотОбъект, ДопПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура КлиентыПередУдалениемПослеПроверкиМодифицированности(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Или Результат = Истина Тогда
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЭтаФорма.Записать();
		КонецЕсли;
		
		Если ИмеютсяНачатыеПрохожденияМедосмотра(Объект.Ссылка, ДопПараметры.мКлиентов, ДопПараметры.СписокПМО) Тогда
			ТекстВопроса = "У вабранных клиентов имеются начатые прохождения медосмотров, выберите действие:";
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(1, "Отмена");
			СписокКнопок.Добавить(2, "Пометить на удаление");
			СписокКнопок.Добавить(3, "Открыть список");
			
			ОповещениеПродолжения = Новый ОписаниеОповещения("КлиентыПередУдалениемПослеВыбораДействия", ЭтотОбъект, ДопПараметры);
			
			ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, СписокКнопок);
			
		Иначе
			
			ОповещениеПродолжения = Новый ОписаниеОповещения("КлиентыПередУдалениемЗавершение", ЭтотОбъект, ДопПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередУдалениемПослеВыбораДействия(Результат, ДопПараметры) Экспорт
	
	Если Результат = 1 Тогда
		Возврат;
	ИначеЕсли Результат = 2 Тогда
		ДопПараметры.ПометитьНаУдалениеПМО = Истина;
	Иначе
		ДопПараметры.ВывестиСписокПМО = Истина;
	КонецЕсли;
	
	ДопПараметры.НеобходимоЗаписатьДокументПослеУдаления = Истина;
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("КлиентыПередУдалениемЗавершение", ЭтотОбъект, ДопПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередУдалениемЗавершение(Результат, ДопПараметры) Экспорт
	
	Для Каждого КлиентНаУдаление Из ДопПараметры.мКлиентов Цикл
		Если Объект.Клиенты.НайтиСтроки(Новый Структура("Клиент", КлиентНаУдаление)).Количество() = 1 Тогда 
			УдалитьКлиентаИзСметы(КлиентНаУдаление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДопПараметры.ПометитьНаУдалениеПМО Тогда
		ПометитьНаУдалениеПрохожденияМО(ДопПараметры.СписокПМО);
	КонецЕсли;
	
	Если ДопПараметры.ВывестиСписокПМО Тогда
		ВывестиСписокПМО(ДопПараметры.СписокПМО);
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ДопПараметры.ВыделенныеСтроки Цикл
		УдаляемаяСтрока = Объект.Клиенты.НайтиПоИдентификатору(ВыделеннаяСтрока);        
		Объект.Клиенты.Удалить(УдаляемаяСтрока); 
	КонецЦикла;
	
	Если ДопПараметры.НеобходимоЗаписатьДокументПослеУдаления Тогда
		ПодключитьОбработчикОжидания("ЗаписатьПослеУдаления", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПослеУдаления()
	Записать();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДопПараметров()
	
	Структура = Новый Структура;
	Структура.Вставить("ПометитьНаУдалениеПМО", Ложь);
	Структура.Вставить("мКлиентов", Неопределено);
	Структура.Вставить("ВывестиСписокПМО", Ложь);
	Структура.Вставить("НеобходимоЗаписатьДокументПослеУдаления", Ложь);
	Структура.Вставить("ВыделенныеСтроки", Неопределено);
	Структура.Вставить("СписокПМО", Новый Массив);
	Возврат Структура;
	

	
КонецФункции

&НаСервереБезКонтекста
Функция ИмеютсяНачатыеПрохожденияМедосмотра(ДокументСсылка, СписокКлиентов, СписокПМО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКлиентовНаМО.Клиент КАК Клиент,
		|	ТаблицаКлиентовНаМО.ПМО КАК ПМО,
		|	ТаблицаКлиентовНаМО.СписокМО КАК СписокМО,
		|	ТаблицаКлиентовНаМО.Неявка КАК Неявка,
		|	ТаблицаКлиентовНаМО.ДатаЗавершения КАК ДатаЗавершения
		|ПОМЕСТИТЬ ТаблицаКлиентовНаМО
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпискиМО.Клиент КАК Клиент,
		|		ПрохождениеМедосмотра.Ссылка КАК ПМО,
		|		ЕСТЬNULL(ПрохождениеМедосмотра.ДатаЗавершения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗавершения,
		|		СпискиМО.Ссылка КАК СписокМО,
		|		СпискиМО.Неявка КАК Неявка
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СписокНаПрохождениеМедосмотраКлиенты.Клиент КАК Клиент,
		|			СписокНаПрохождениеМедосмотраКлиенты.Ссылка КАК Ссылка,
		|			ВЫБОР
		|				КОГДА СписокНаПрохождениеМедосмотраКлиенты.ПричинаНеявки = ЗНАЧЕНИЕ(Справочник.ПричиныНеявкиНаМедосмотр.ПустаяСсылка)
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ КАК Неявка
		|		ИЗ
		|			Документ.СписокНаПрохождениеМедосмотра.Клиенты КАК СписокНаПрохождениеМедосмотраКлиенты
		|		ГДЕ
		|			СписокНаПрохождениеМедосмотраКлиенты.Ссылка = &ДокументСсылка
		|			И СписокНаПрохождениеМедосмотраКлиенты.Клиент В(&СписокКлиентов)) КАК СпискиМО
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
		|			ПО СпискиМО.Ссылка = ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра
		|				И СпискиМО.Клиент = ПрохождениеМедосмотра.Клиент
		|				И (НЕ ПрохождениеМедосмотра.ПометкаУдаления)) КАК ТаблицаКлиентовНаМО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКлиентовНаМО.Клиент КАК Клиент,
		|	ТаблицаКлиентовНаМО.ПМО КАК ПМО,
		|	ТаблицаКлиентовНаМО.СписокМО КАК СписокМО,
		|	ВЫБОР
		|		КОГДА ТаблицаКлиентовНаМО.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА 3
		|		КОГДА ТаблицаКлиентовНаМО.Неявка
		|			ТОГДА 4
		|		КОГДА ТаблицаКлиентовНаМО.ПМО ЕСТЬ NULL
		|				ИЛИ &НуженОтборПоОтметкам
		|					И Отметки.ПрохождениеМедОсмотра ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК СостояниеПрохождения
		|ИЗ
		|	ТаблицаКлиентовНаМО КАК ТаблицаКлиентовНаМО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВыполненияДействий КАК Отметки
		|		ПО ТаблицаКлиентовНаМО.ПМО = Отметки.ПрохождениеМедОсмотра
		|			И (Отметки.АктивностьЗаписи = ИСТИНА)";
	
	НуженОтборПоОтметкам = УправлениеНастройками.ПараметрУчета("МедосмотрыПравилоОпределенияНезавершивших") = Перечисления.МедосмотрыПравилаОпределенияНеЗавершивших.ЕстьОтметкиПрохождения;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
	Запрос.УстановитьПараметр("НуженОтборПоОтметкам", НуженОтборПоОтметкам);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЧислоНачатых = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.СостояниеПрохождения = 3 Или Выборка.СостояниеПрохождения = 1 Тогда
			ЧислоНачатых = ЧислоНачатых + 1;
			СписокПМО.Добавить(Выборка.ПМО);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧислоНачатых > 0;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеПрохожденияМО(СписокПМО)
	
	Для Каждого Эл Из СписокПМО Цикл
		Если ЗначениеЗаполнено(Эл) Тогда
			ОбъектПМО = Эл.ПолучитьОбъект();
			ОбъектПМО.ПометкаУдаления = Истина;
			Если ОбъектПМО.Проведен Тогда
				ОбъектПМО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ОбъектПМО.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСписокПМО(СписокПМО)
	
	ТабличныйДокументПМО = Новый ТабличныйДокумент;
	
	Сч = 1;
	Для Каждого Эл Из СписокПМО Цикл
		РабочаяОбласть = ТабличныйДокументПМО.Область(Сч,1);
		РабочаяОбласть.Текст = Строка(Эл);
		РабочаяОбласть.Расшифровка = Эл;
		РабочаяОбласть.ШиринаКолонки = 100;
		Сч = Сч + 1;
	КонецЦикла;
	
	ТабличныйДокументПМО.ТолькоПросмотр = Истина;
	ТабличныйДокументПМО.Показать("Список прохождений мед. осмотра удаленных из списка клиентов");
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)
	
	УстановкаДоступностиПолямВВода(Объект.РучнаяКорректировка);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	КоличествоКлиентовВСмете = ПолучитьКоличествоКлиентовСметы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСметуНаСервере()
	
	Объект.ДействияМедосмотраФиксируютсяСметой = Истина;
	Объект.Услуги.Очистить();
	
	ЗапросСписокКлиентов = Новый Запрос;
	ЗапросСписокКлиентов.Текст = "ВЫБРАТЬ *
	|ПОМЕСТИТЬ СписокКлиентов
	|ИЗ
	|	&СписокКлиентов КАК СписокКлиентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокКлиентов.Клиент КАК Клиент,
	|	ВЫБОР
	|		КОГДА СписокКлиентов.ТипМедосмотра = ЗНАЧЕНИЕ(Перечисление.ТипыМедосмотров.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыМедосмотров.Периодический)
	|		ИНАЧЕ СписокКлиентов.ТипМедосмотра
	|	КОНЕЦ КАК ТипМедосмотра,
	|	СписокКлиентов.Пол КАК Пол,
	|	СписокКлиентов.Возраст КАК Возраст
	|ИЗ
	|	СписокКлиентов КАК СписокКлиентов";	
	
	// Подготовка таблицы списка клиентов
	СписокКлиентовВЗапрос = Объект.Клиенты.Выгрузить().СкопироватьКолонки("Клиент, ТипМедосмотра");
	СписокКлиентовВЗапрос.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	СписокКлиентовВЗапрос.Колонки.Добавить("Возраст", Новый ОписаниеТипов("Число"));	
	
	Для Каждого СтрокаКлиент Из Объект.Клиенты Цикл	
		НоваяСтрока = СписокКлиентовВЗапрос.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКлиент);
		НоваяСтрока.Пол = СтрокаКлиент.Клиент.Пол;
		ВозрастЛет = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(СтрокаКлиент.Клиент.ДатаРождения, ТекущаяДата());
		НоваяСтрока.Возраст = ВозрастЛет;	
	КонецЦикла;
		
	ЗапросСписокКлиентов.УстановитьПараметр("СписокКлиентов", СписокКлиентовВЗапрос);
	
	СписокКлиентов = ЗапросСписокКлиентов.Выполнить().Выгрузить();
	
	ЗапросВредныеФакторы = Новый Запрос;
	ЗапросВредныеФакторы.Текст = "ВЫБРАТЬ
	                             |	СписокКлиентов.Клиент КАК Клиент,
	                             |	СписокКлиентов.Пол КАК Пол,
	                             |	СписокКлиентов.Возраст КАК Возраст,
	                             |	СписокКлиентов.ТипМедосмотра КАК ТипМедосмотра
	                             |ПОМЕСТИТЬ СписокКлиентов
	                             |ИЗ
	                             |	&СписокКлиентов КАК СписокКлиентов
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	СписокКлиентов.Пол КАК Пол,
	                             |	СписокКлиентов.Возраст КАК Возраст,
	                             |	СписокКлиентов.ТипМедосмотра КАК ТипМедосмотра,
	                             |	СписокКлиентов.Клиент КАК Клиент,
	                             |	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор КАК ВредныйФактор
	                             |ИЗ
	                             |	СписокКлиентов КАК СписокКлиентов
	                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
	                             |		ПО (ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра)
	                             |			И СписокКлиентов.Клиент = ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.Клиент
	                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыМедосмотров.Приказы КАК Приказы
	                             |		ПО (Приказы.Ссылка = &ВидМедосмотра)
	                             |			И (ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.Приказ = Приказы.Приказ)";
	
	ЗапросВредныеФакторы.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
	ЗапросВредныеФакторы.УстановитьПараметр("ВидМедосмотра", Объект.ВидМО);
	ЗапросВредныеФакторы.УстановитьПараметр("СписокНаПрохождениеМедосмотра", Объект.Ссылка);
	ВредныеФакторы = ЗапросВредныеФакторы.Выполнить().Выгрузить();
	Прейскурант = Объект.ВидПолиса.Прейскурант;
	Если Не ЗначениеЗаполнено(Прейскурант) Тогда 
		Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(Объект.Филиал);
	КонецЕсли;
	
	ТаблицаПриказовКлиентов = Неопределено;
	
	Выборка = МедосмотрыСервер.ПолучитьСписокУслугПоКлиентам(Объект.ВидМО, СписокКлиентов, ВредныеФакторы, Объект.Дата, Прейскурант, ,ТаблицаПриказовКлиентов);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Клиент = Выборка.Клиент;
		НоваяСтрока.Действие = Выборка.Действие;
		НоваяСтрока.Цена = Выборка.Цена;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоличествоКлиентовСметы()
	
	мсСписокКлиентов = Новый Массив;
	Для Каждого СтрокаКлиент Из Объект.Услуги Цикл
		Если мсСписокКлиентов.Найти(СтрокаКлиент.Клиент) = Неопределено Тогда
			мсСписокКлиентов.Добавить(СтрокаКлиент.Клиент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсСписокКлиентов.Количество();
	
КонецФункции

&НаКлиенте
Асинх Функция ЗаполнитьСмету(Команда)
	
	Если Объект.ВидПолиса.Пустая() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Поле ""Программа обслуживания"" требуется заполнить для заполнения сметы.'"),30);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидМО) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Вид медосмотра"" требуется заполнить для заполнения сметы.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для заполнения сметы необходимо записать документ, выполнить запись?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтаФорма.Записать();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
	Если Объект.Услуги.Количество() > 0  Тогда
		Ответ = Ждать Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	ЗаполнитьСметуНаСервере();
	КоличествоКлиентовВСмете = ПолучитьКоличествоКлиентовСметы();
	
КонецФункции

&НаКлиенте
Процедура УдалитьКлиентаИзСметы(Клиент)
	
	Для Каждого СтрокаКлиент Из Объект.Услуги.НайтиСтроки(Новый Структура("Клиент", Клиент)) Цикл
		Объект.Услуги.Удалить(СтрокаКлиент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФИОКлиентов(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДатаЗаключительногоАкта)
		И ТекущаяДата() > КонецДня(Объект.ДатаЗаключительногоАкта)
	Тогда
		Ответ = Вопрос("Заключение по списку уже сделано. Всё равно обновить?", РежимДиалогаВопрос.ОКОтмена,30,КодВозвратаДиалога.Отмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРаботники = Объект.Клиенты;
	ОбновитьФИОИзКарточекНаСервере(ТаблицаРаботники);
	КопироватьДанныеФормы(ТаблицаРаботники, Объект.Клиенты);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КлиентыКлиентПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ДанныеКлиента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекущиеДанные.Клиент, "Профессия, ЦехУчасток, Фамилия, Имя, Отчество");
	ТекущиеДанные.Профессия = ДанныеКлиента.Профессия;
	ТекущиеДанные.ЦехУчасток = ДанныеКлиента.ЦехУчасток;
	ТекущиеДанные.ФИОКлиента = CRMСервер.ПолучитьФИООбъекта(ДанныеКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	НаменованияРаботодателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Контрагент, "НаименованиеПолное, Представление");
	Объект.МестоРаботы = ?(ЗначениеЗаполнено(НаменованияРаботодателя.НаименованиеПолное), НаменованияРаботодателя.НаименованиеПолное, НаменованияРаботодателя.Представление);
	
	Объект.ВыводитьПриПечатиСметыДействияБезЦены = ОпределитьВыводДействийБезЦеныПоКонтрагенту(Объект.Контрагент, Объект.ВыводитьПриПечатиСметыДействияБезЦены);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьВыводДействийБезЦеныПоКонтрагенту(Контрагент, ТекущееЗначение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СПМО.ВыводитьПриПечатиСметыДействияБезЦены
	|ИЗ
	|	Документ.СписокНаПрохождениеМедосмотра КАК СПМО
	|ГДЕ
	|	СПМО.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	СПМО.Дата УБЫВ"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВыводитьПриПечатиСметыДействияБезЦены;
	Иначе
		Возврат ТекущееЗначение;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПрофессияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ТекущийИдентификаторСтроки", Элементы.Клиенты.ТекущиеДанные.ПолучитьИдентификатор());
	Оповещние = Новый ОписаниеОповещения("ОбработкаОповещнияВыбораПрофессии", ЭтотОбъект, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ВидКлассификатора", ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих"));
	СтруктураПараметров = Новый Структура("ПроизвольныйЗапрос, Отбор", МедосмотрыКлиент.ТекстЗапросаДляВыбораПрофессии(), Отбор);
	ОткрытьФорму("Справочник.КлассификаторыМинЗдрава.ФормаВыбора", СтруктураПараметров, ЭтаФорма, , , , Оповещние);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещнияВыбораПрофессии(ВыбраннаяПрофессия, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяПрофессия <> Неопределено Тогда 
		НаменованиеПрофессии = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбраннаяПрофессия, "НаименованиеПолное");
		СтрокаТаблицы = Объект.Клиенты.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущийИдентификаторСтроки);
		СтрокаТаблицы.Профессия = НаменованиеПрофессии;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофессияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПрофессияОкончаниеВводаТекстаНаСервере(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьФИОИзКарточекНаСервере(ТаблицаРаботники)
	
	Для Каждого СтрокаРаботник Из ТаблицаРаботники Цикл
		
		СтрокаРаботник.ФИОКлиента = CRMСервер.ПолучитьФИООбъекта(СтрокаРаботник.Клиент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрофессияОкончаниеВводаТекстаНаСервере(Текст, СтандартнаяОбработка, ДанныеВыбора)
	
	Если ЗначениеЗаполнено(Текст) И СтрДлина(Текст) > 2 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СправочникКлассификаторыМинЗдрава.НаименованиеПолное КАК НаименованиеПолное
			|ИЗ
			|	Справочник.КлассификаторыМинЗдрава КАК СправочникКлассификаторыМинЗдрава
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			ВЫРАЗИТЬ(КлассификаторыМинЗдрава.НаименованиеПолное КАК СТРОКА(1024)) КАК НаименованиеПолное,
			|			МИНИМУМ(КлассификаторыМинЗдрава.УИДЕГИСЗ) КАК УИДЕГИСЗ
			|		ИЗ
			|			Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
			|		ГДЕ
			|			КлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих)
			|			И КлассификаторыМинЗдрава.НаименованиеПолное ПОДОБНО &НаименованиеПрофессии
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ВЫРАЗИТЬ(КлассификаторыМинЗдрава.НаименованиеПолное КАК СТРОКА(1024))) КАК УникальныеПрофессии
			|		ПО (СправочникКлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих))
			|			И (УникальныеПрофессии.УИДЕГИСЗ = СправочникКлассификаторыМинЗдрава.УИДЕГИСЗ)";
		
		Запрос.УстановитьПараметр("НаименованиеПрофессии", "%" + СтрСоединить(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Текст, " -.,():;'""/"), "%") + "%");
		
		мсПрофессии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НаименованиеПолное");
		сзПрофессии = Новый СписокЗначений;
		сзПрофессии.ЗагрузитьЗначения(мсПрофессии);
		
		Если сзПрофессии.Количество() >= 1 Тогда
			ДанныеВыбора = сзПрофессии;
		ИначеЕсли ДанныеВыбора <> Неопределено Тогда 
			ДанныеВыбора.Очистить();
		ИначеЕсли ДанныеВыбора = Неопределено Тогда 
			СтандартнаяОбработка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВидМедосмотраПриИзменении(Элемент)
	
	Если Объект.Клиенты.Количество() > 0 И Объект.ВидМО <> ТекущийВидМедосмотра Тогда
		ТекстПредупреждения = "Вид медосмотра был изменен, необходимо записать документ. Выполнить запись документа?";
		Ответ = Ждать ВопросАсинх(ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтаФорма.Записать();
			ТекущийВидМедосмотра = Объект.ВидМО;
		Иначе
			Объект.ВидМО = ТекущийВидМедосмотра; 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Услуги.Количество() <> 0 Тогда
		Ответ = Ждать ВопросАсинх("Вид медосмотра был изменен, перезаполнить смету?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Услуги.Очистить();
			Ждать ЗаполнитьСмету(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ЭлектронныеПодписи

&НаКлиенте
Процедура ПодписатьВсе(Команда)
	
	Если МожноПерейтиКПодписанию() Тогда
		ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Ложь, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодписаниюЭМД(Команда)
	
	Если МожноПерейтиКПодписанию() Тогда
		ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Истина, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	СтатусыПрохождения = Новый Соответствие;
	Для Каждого СтрокаКлиенты Из Объект.Клиенты Цикл
		СтатусыПрохождения.Вставить(СтрокаКлиенты.Клиент, СтрокаКлиенты.СостояниеПрохождения);
	КонецЦикла;
	
	Прочитать();
	
	Для Каждого СтрокаКлиенты Из Объект.Клиенты Цикл
		СтрокаКлиенты.СостояниеПрохождения = СтатусыПрохождения.Получить(СтрокаКлиенты.Клиент);
	КонецЦикла;
	
	бит_СертификатыЭЦПКлиент.УстановитьДоступностьЭлементов(ЭтотОбъект, СписокНередактируемыхЭлеменовПоЭП(), Объект.ПодписанЭП);
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "КнопкаФилиал", "Доступность", Не Объект.ПодписанЭП);
	
КонецПроцедуры

&НаКлиенте
Функция СписокНередактируемыхЭлеменовПоЭП()
	
	Возврат СтрРазделить("ГруппаНомерДата,ГруппаКонтрагент,СтраницаСписокРаботников,ГруппаСмета,СтраницаИнфРаботодателя,Дата", ",");
	
КонецФункции

&НаКлиенте
Функция МожноПерейтиКПодписанию()
	
	Если Не (ЗначениеЗаполнено(Объект.ПредседательМедКомиссии) И ЗначениеЗаполнено(Объект.ДатаЗаключительногоАкта)) Тогда
		ПоказатьПредупреждение(, ?(ЗначениеЗаполнено(Объект.ПредседательМедКомиссии), НСтр("ru='Не заполнена дата заключения!'"), НСтр("ru='Не заполнен председатель мед комиссии!'")));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокПодписей()
	
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписей(Объект.Ссылка, УникальныйИдентификатор, Неопределено, ЭлектронныеПодписи,, СводкаHTML);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПодписания()
	
	ОбновитьСписокПодписей();
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ФормаДокументСписокНаПрохождениеМедосмотраСписокЭМД", ИспользуютсяЭП);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВредныеФакторыКлиента(СписокНаПрохождениеМедосмотра, Клиент)
	ВредныеФакторыКлиента.Параметры.УстановитьЗначениеПараметра("Клиент", Клиент);
	ВредныеФакторыКлиента.Параметры.УстановитьЗначениеПараметра("СписокНаПрохождениеМедосмотра", СписокНаПрохождениеМедосмотра);
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПриАктивизацииСтроки(Элемент)
	Если Элементы.ВредныеФакторыКлиента.Видимость Тогда
		ТекущиеДанные = Элементы.Клиенты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			УстановитьОтборВредныеФакторыКлиента(Неопределено, Неопределено);
			Возврат;
		КонецЕсли;
		УстановитьОтборВредныеФакторыКлиента(Объект.Ссылка, ТекущиеДанные.Клиент); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВредныеФакторы(Команда)
	
	ТекущиеДанные = Элементы.Клиенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = "Для изменения вредных факторов у клиентов, необходимо записать документ. Выполнить запись документа?";
		ДопПараметры = Новый Структура("ТекущиеДанные, Записывать", ТекущиеДанные, Истина);
		ОповещениеПродолжения = Новый ОписаниеОповещения("ПродолжениеИзменитьВредныеФакторы", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ТекущиеДанные, Записывать", ТекущиеДанные, Ложь);
	ПродолжениеИзменитьВредныеФакторы(КодВозвратаДиалога.Да, ДопПараметры);  
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеИзменитьВредныеФакторы(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ДопПараметры.Записывать Тогда
			ЭтаФорма.Записать();
		КонецЕсли;
		
		ТекущиеДанные = ДопПараметры.ТекущиеДанные;
		
		СтруктураДляСозданияПМО = ПолучитьСтруктуруДляСозданияПМО(ТекущиеДанные); 
		
		СсылкаПМО = ПолучитьСсылкуНаПМОКлиента(ТекущиеДанные.Клиент, Объект.Ссылка, СтруктураДляСозданияПМО);
		ПараметрыФормы = Новый Структура("Ключ, ОтключитьКнопкиПроведения", СсылкаПМО, Истина);
		ОповещениеПродолжения = Новый ОписаниеОповещения("ЗавершениеИзменитьВредныеФакторы", ЭтотОбъект);
		ОткрытьФорму("Документ.ПрохождениеМедосмотра.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,, ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзменитьВредныеФакторы(Результат, ДопПараметры) Экспорт
	Если Элементы.ВредныеФакторыКлиента.Видимость Тогда
		Элементы.ВредныеФакторыКлиента.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДляСозданияПМО(ТекущиеДанные)
	
	СтруктураДляСозданияПМО = Новый Структура;
	СтруктураДляСозданияПМО.Вставить("Клиент", ТекущиеДанные.Клиент);
	СтруктураДляСозданияПМО.Вставить("СПМО", Объект.Ссылка);
	СтруктураДляСозданияПМО.Вставить("Дата", Объект.Дата);
	СтруктураДляСозданияПМО.Вставить("Филиал", Объект.Филиал);
	СтруктураДляСозданияПМО.Вставить("Профессия", ТекущиеДанные.Профессия);
	СтруктураДляСозданияПМО.Вставить("ЦехУчасток", ТекущиеДанные.ЦехУчасток);
	СтруктураДляСозданияПМО.Вставить("ФИОКлиента", ТекущиеДанные.ФИОКлиента);
	СтруктураДляСозданияПМО.Вставить("ТипМедосмотра", ТекущиеДанные.ТипМедосмотра);
	СтруктураДляСозданияПМО.Вставить("ВидМО", Объект.ВидМО); 
	
	Возврат СтруктураДляСозданияПМО;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаПМОКлиента(Клиент, СсылкаСПМО, СтруктураДляСозданияПМО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрохождениеМедосмотра.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
		|ГДЕ
		|	ПрохождениеМедосмотра.Клиент = &Клиент
		|	И ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("СписокНаПрохождениеМедосмотра", СсылкаСПМО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка; 
	КонецЦикла;
	
	СтруктураДляСозданияПМО.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Возврат Документы.ПрохождениеМедосмотра.СоздатьПрохождениеМедосмотра(СтруктураДляСозданияПМО);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВредныеФакторы(Команда)
	Видимость = Не Элементы.ВредныеФакторыКлиента.Видимость;
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ВредныеФакторыКлиента", Видимость);
	Элементы.КлиентыПоказатьВредныеФакторы.Пометка = Видимость;
	Если Видимость Тогда
		КлиентыПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВредныеФакторыКлиентаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВредныеФакторыКлиента.ТекущиеДанные;
	Фактор = ТекущиеДанные.Фактор;
	Если ЗначениеЗаполнено(Фактор) Тогда
		ПоказатьЗначение(,Фактор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИзменитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Клиенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИндексСтроки", Объект.Клиенты.Индекс(ТекущиеДанные));
	ПараметрыФормы.Вставить("Клиент", ТекущиеДанные.Клиент);
	ПараметрыФормы.Вставить("ТипМедосмотра", ТекущиеДанные.ТипМедосмотра);
	ПараметрыФормы.Вставить("ФИОКлиента", ТекущиеДанные.ФИОКлиента);
	ПараметрыФормы.Вставить("Профессия", ТекущиеДанные.Профессия);
	ПараметрыФормы.Вставить("ЦехУчасток", ТекущиеДанные.ЦехУчасток);
	ПараметрыФормы.Вставить("СПМОСсылка", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЭтаФорма.Модифицированность Тогда
			ТекстВопроса = "Документ был изменен/или еще не записан, для изменения данных клиента необходимо записать, выполнить запись?";
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭтаФорма.Записать();
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ОткрытьФорму("Документ.СписокНаПрохождениеМедосмотра.Форма.ФормаРедактированияДанныхКлиента", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПараметрыФормы.Вставить("РедактированиеНесохраненного", Истина);
		ОповещениеПродолжения = Новый ОписаниеОповещения("КлиентыДобавлениеЗавершение", ЭтотОбъект, Истина);
		ОткрытьФорму("Документ.СписокНаПрохождениеМедосмотра.Форма.ФормаРедактированияДанныхКлиента", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеНового", Истина);
	ОповещениеПродолжения = Новый ОписаниеОповещения("КлиентыДобавлениеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СписокНаПрохождениеМедосмотра.Форма.ФормаРедактированияДанныхКлиента", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КлиентыДобавлениеЗавершение(Результат, ТекущаяСтрока) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТекущаяСтрока = Неопределено Тогда
			НоваяСтрока = Объект.Клиенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
			Элементы.Клиенты.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Иначе
			ЗаполнитьЗначенияСвойств(Элементы.Клиенты.ТекущиеДанные, Результат);
		КонецЕсли;
		Модифицированность = Истина;
		МедосмотрыКлиентСервер.ЗаполнитьДанныеПоЧислуРаботниковПодлежащихПереодМедосмотру(Объект);
		КоличествоКлиентовВСмете = ПолучитьКоличествоКлиентовСметы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле <> Неопределено Тогда
		Если Не Поле.Имя = "КлиентыПричинаНеявки" Тогда
			СтандартнаяОбработка = Ложь;
			ИзменитьСтроку(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПерезаполнитьДействияПМО(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		ТекстВопроса = "Для перезаполнения ПМО клиентов, необходимо записать документ. Выполнить запись документа?";    
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтаФорма.Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПерезаполнитьДействияПМОНаСервере(Объект.Ссылка);
	Параметр = Новый Структура("СсылкаСПМО, ОбновленыВсе, мОбновленных", Объект.Ссылка, Истина, Новый Массив);
	Оповестить("ОбновленыПМОИзСПМО", Параметр);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаполнитьДействияПМОНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрохождениеМедосмотра.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
		|ГДЕ
		|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра
		|	И ПрохождениеМедосмотра.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокНаПрохождениеМедосмотра", Ссылка);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектПМО = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Документы.ПрохождениеМедосмотра.ПерезаполнитьДействияПрохожденияМедосмотра(ОбъектПМО, Ложь);
		ОбъектПМО.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти