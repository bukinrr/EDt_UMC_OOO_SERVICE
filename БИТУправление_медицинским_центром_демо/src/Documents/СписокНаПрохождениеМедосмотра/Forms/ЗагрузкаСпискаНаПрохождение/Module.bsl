#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФорматФайлаЗагрузки = НастройкиИзХранилища("Загрузка", "ФорматФайлаЗагрузки");
	
	Если ЗначениеЗаполнено(ФорматФайлаЗагрузки) Тогда
		УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(ФорматФайлаЗагрузки, ИнформацияПоКолонкам, ШаблонСДанными); 
	Иначе
		УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(ПолучитьФорматФайлаПоУмолчанию(), ИнформацияПоКолонкам, ШаблонСДанными);
	КонецЕсли;
	Организация = Параметры.Организация;
	ДатаСпискаНаМедосмотр = Параметры.ДатаСпискаНаМедосмотр;
	ВидМО = Параметры.ВидМО;
	
	Если ЗначениеЗаполнено(ВидМО) Тогда
		УстановитьЗначенияВыбораДляПриказа(Отказ);
	Иначе
		ТекстСообщения = "Не указан вид медосмотра, загрузка не возможна. " 
		 					+ "Установите вид медосмотра.";
							
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
		Элементы.Организация.ОграничениеТипа = ОписаниеТипа; 
		Организация = ОписаниеТипа.ПривестиЗначение(Организация); 
		
		Элементы.Организация.ВыбиратьТип = Ложь;
	Иначе
		МестоРаботыИзСправочника = (ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура УстановитьЗначенияВыбораДляПриказа(Отказ)
	
	Для Каждого ПриказВФ Из МедосмотрыСервер.ПолучитьМассивПриказовПоВидуМО(ВидМО) Цикл
		
		Если ТипЗнч(ПриказВФ) = Тип("СправочникСсылка.ПереченьВредныхФакторовИРабот") Тогда
			ДобавляемыйПриказ = ПриказВФ.Приказ;
		Иначе
			ДобавляемыйПриказ = ПриказВФ;
		КонецЕсли;
		Элементы.Приказ.СписокВыбора.Добавить(ДобавляемыйПриказ);
		
	КонецЦикла;
	
	Если Элементы.Приказ.СписокВыбора.НайтиПоЗначению(Справочники.ПриказыМедосмотров.Приказ29н) <> Неопределено Тогда
		Приказ = Справочники.ПриказыМедосмотров.Приказ29н;
	ИначеЕсли Элементы.Приказ.СписокВыбора.Количество() > 0 Тогда
		Приказ = Элементы.Приказ.СписокВыбора[0].Значение;
	Иначе
		ТекстСообщения = "У вида медосмотра не имеется установленных приказов, загрузка не возможно. " 
		 					+ "Установите приказы для вида медосмотра или измените вид медосмотра.";
							
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонИзФайла(Команда)
	
	АдресВременногоХранилища = "";
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл'");
	ДиалогОткрытияФайла.Фильтр = "Табличный документ(*.xlsx,*.csv)|*.xlsx;*.csv";
	Если ДиалогОткрытияФайла.Выбрать() Тогда

		ПередатьФайлНаСервер(Истина, АдресВременногоХранилища, ДиалогОткрытияФайла.ПолноеИмяФайла, Неопределено)
		
	Иначе
		Текст = НСтр("ru='Файл не выбран!'; en='File not selected!'");
		ПоказатьПредупреждение(,Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблонВФайл(Команда)
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Если Истина Тогда
			ПутьКФайлу = "";
		Иначе
			ПутьКФайлу = "";
		КонецЕсли;
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.РасширениеФайла",, ЭтаФорма, Истина);
		ПутьКФайлу = "";
	КонецЕсли;
	
	ИмяФайла = "Загрузка клиентов";
	ПолучитьПутьКФайлуНачалоВыбора(РежимДиалогаВыбораФайла.Сохранение, ПутьКФайлу, ИмяФайла);
	ВыбранныйФайл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);
	РасширениеФайла = СтрЗаменить(ВыбранныйФайл.Расширение,".","");
	Если ЗначениеЗаполнено(ВыбранныйФайл.Имя) тогда
		Если РасширениеФайла = "csv" тогда
			СохранитьТаблицуВCSVФайл(ПутьКФайлу, ИнформацияПоКолонкам);
		ИначеЕсли РасширениеФайла = "xlsx" тогда
			АдресВоВременномХранилище = ТабличныйДокументУдалениеПримечаний();
			ТабличныйДокументБезПримечаний = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
			ТабличныйДокументБезПримечаний.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.xlsx);
		ИначеЕсли РасширениеФайла = "mxl" тогда 
			ШаблонСДанными.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.mxl);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Шаблон файла не был сохранен.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	
	РезультатЗагрузки = ЗагрузитьНаСервере(Отказ);
	ЗагруженныеКлиенты = РезультатЗагрузки.ЗагруженныеКлиенты;
	
	Если РезультатЗагрузки.Свойство("ТаблицаОшибок") Тогда
		СтруктураНаПечать = Новый Структура;
		
		ОписаниеПечатнойФормы = Новый Структура;
		ОписаниеПечатнойФормы.Вставить("СинонимМакета", "Предупреждения загрузки списка медосмотра");
		ОписаниеПечатнойФормы.Вставить("Экземпляров",	1);
		ОписаниеПечатнойФормы.Вставить("ИмяМакета", "");
		ОписаниеПечатнойФормы.Вставить("ПолныйПутьКМакету", "");
		ОписаниеПечатнойФормы.Вставить("ИмяФайлаПечатнойФормы", "");
		ОписаниеПечатнойФормы.Вставить("ТабличныйДокумент", РезультатЗагрузки.ТаблицаОшибок);
		
		КоллекцияПечатныхФорм = Новый Массив; 
		КоллекцияПечатныхФорм.Добавить(ОписаниеПечатнойФормы);
		СтруктураНаПечать.Вставить("КоллекцияПечатныхФорм",КоллекцияПечатныхФорм);

		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов",СтруктураНаПечать,ЭтотОбъект.ВладелецФормы);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(ЗагруженныеКлиенты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МестоРаботыИзСправочникаПриИзменении(Элемент)
	
	ОписаниеТипа = ?(МестоРаботыИзСправочника, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), Новый ОписаниеТипов("Строка"));
	Элементы.Организация.ОграничениеТипа = ОписаниеТипа; 
	Организация = ОписаниеТипа.ПривестиЗначение(Организация); 
	
	Элементы.Организация.ВыбиратьТип = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФорматФайлаЗагрузкиПриИзменении(Элемент)
	
	ИнформацияПоКолонкамНаСервер = ИнформацияПоКолонкам;
	Если ЗначениеЗаполнено(ФорматФайлаЗагрузки) Тогда
		НастройкиВХранилище("Загрузка", "ФорматФайлаЗагрузки", ФорматФайлаЗагрузки);
		УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(ФорматФайлаЗагрузки, ИнформацияПоКолонкамНаСервер, ШаблонСДанными);		
	Иначе
		ФорматФайлаЗагрузкиПриИзмененииНаСервере(ИнформацияПоКолонкамНаСервер, ШаблонСДанными);		
	КонецЕсли;
	КопироватьДанныеФормы(ИнформацияПоКолонкамНаСервер, ИнформацияПоКолонкам);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФорматФайлаЗагрузкиПриИзмененииНаСервере(ИнформацияПоКолонкамНаСервер, ШаблонСДанными)
	
	Формат = ПолучитьФорматФайлаПоУмолчанию();
	НастройкиВХранилище("Загрузка", "ФорматФайлаЗагрузки", Формат);
	УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(Формат, ИнформацияПоКолонкамНаСервер, ШаблонСДанными);		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПреобразоватьТаблицуВМассивСтруктур()
	
	Данные = Новый Массив;
	Для Каждого Эл Из ВредныеФакторыКлиентовЗагрузкаИзExcel Цикл
		Данные.Добавить(Новый Структура("Клиент, ВредныйФактор", Эл.Клиент, Эл.ВредныйФактор));
	КонецЦикла;
	Возврат Данные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФорматФайлаПоУмолчанию()
	
	СписокКолонок = Справочники.ФорматыФайловДляЗагрузкиДанных.ПустаяСсылка().СписокКолонок.Выгрузить();
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 1;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО;
	НоваяСтрока.ИмяКолонкиВФайле = "ФИО";

	НоваяСтрока = СписокКолонок.Добавить(); 
	НоваяСтрока.НомерСтроки = 2;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаРождения;
	НоваяСтрока.ИмяКолонкиВФайле = "Дата рождения";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 3;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ТипМедосмотра;
	НоваяСтрока.ИмяКолонкиВФайле = "Тип медицинского осмотра";
	
    НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 4;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВредныеФакторыИУсловия;
	НоваяСтрока.ИмяКолонкиВФайле = "Пункты вредности";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 5;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.Подразделение;
	НоваяСтрока.ИмяКолонкиВФайле = "Подразделение";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 6;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.Профессия;
	НоваяСтрока.ИмяКолонкиВФайле = "Профессия";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 7;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаНачалаРаботы;
	НоваяСтрока.ИмяКолонкиВФайле = "Дата начала работы";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 8;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.Адрес;
	НоваяСтрока.ИмяКолонкиВФайле = "Адрес";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 9;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.СНИЛС;
	НоваяСтрока.ИмяКолонкиВФайле = "СНИЛС";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 10;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ИНН;
	НоваяСтрока.ИмяКолонкиВФайле = "ИНН";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 11;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВидДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Вид документа удостоверяющего личность";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 12;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.СерияДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Серия";   
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 13;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.НомерДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Номер";       
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 14;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаВыдачиДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Дата выдачи";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 15;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.КемВыданДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Кем выдан";
		
	Возврат Новый Структура("СписокКолонок", СписокКолонок);
	
КонецФункции

&НаСервереБезКонтекста
Процедура НастройкиВХранилище(КлючОбъекта, КлючНастроек, Настройки)
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиИзХранилища(КлючОбъекта, КлючНастроек)
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
КонецФункции

&НаКлиенте
Процедура ПередатьФайлНаСервер(Результат, АдресВременногоХранилища, ИмяФайла, Параметр) 
	
	Если Результат = Истина Тогда
		Расширение = СтрЗаменить(ОбщегоНазначения.ПолучитьРасширениеФайла(ИмяФайла),".","");
		Если Расширение = "csv" ИЛИ Расширение = "xlsx" ИЛИ Расширение = "mxl" Тогда
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
			ФоновоеЗадание = Ложь;
			ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru ='Не получилось загрузить данные из файла. Убедитесь в корректности данных в файле.'"));        
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание = Ложь)
	ИмяВременногоФайла=ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОчисткаШаблонСДанными();

	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("Расширение", Расширение);
	ПараметрыВызоваСервера.Вставить("ШаблонСДанными", ШаблонСДанными);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ПараметрыВызоваСервера.Вставить("ИнформацияПоКолонкам", ТаблицаИнформацияПоКолонкам);
	
	Обработки.ЗагрузкаДанныхИзФайла.ЗагрузитьФайлВТаблицу(ПараметрыВызоваСервера, АдресВременногоХранилища);
	ШаблонСДанными = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	НормализоватьТабличныйДокумент();
	
КонецПроцедуры

&НаСервере
Процедура НормализоватьТабличныйДокумент()
		
	СоответствиеНомеровКолонок = ПолучитьСоответствиеНомеровКолонок(ИнформацияПоКолонкам);
	Если СоответствиеНомеровКолонок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	// В качестве области, по которой "группируется" таблица берется ФИО или первая колонка.
	НомерКолонкиГруппировки = 1;
	Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО] <> Неопределено Тогда
		НомерКолонкиГруппировки = СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО];
		СоответствиеНомеровКолонок.Удалить(СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО]);
	КонецЕсли;
	
	ПоследнийНомерНепустойКолонкиГруппировки = 2;
	Счетчик = 2;
	Пока Счетчик <= ШаблонСДанными.ВысотаТаблицы Цикл
		ОбластьГруппировки = ШаблонСДанными.Область(Счетчик, НомерКолонкиГруппировки);
		КолонкаГруппировки = СокрЛП(ОбластьГруппировки.Текст);
		Если ПустаяСтрока(КолонкаГруппировки) Тогда
			Если Счетчик <> 2 Тогда
				Для Каждого НомерКолонки Из СоответствиеНомеровКолонок Цикл
					Если НомерКолонки.Значение = НомерКолонкиГруппировки Тогда
						Продолжить;
					КонецЕсли;
					ПредКолонка = ШаблонСДанными.Область(ПоследнийНомерНепустойКолонкиГруппировки, НомерКолонки.Значение);
					ТекКолонка = ШаблонСДанными.Область(Счетчик, НомерКолонки.Значение);
					Если Не ПустаяСтрока(ТекКолонка.Текст) Тогда
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(
							ПредКолонка.Текст, ШаблонСДанными.Область(Счетчик, НомерКолонки.Значение).Текст, ПолучитьРазделительПоТипуКолонки(НомерКолонки.Ключ));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ШаблонСДанными.УдалитьОбласть(ШаблонСДанными.Область(Счетчик, , Счетчик), ТипСмещенияТабличногоДокумента.ПоВертикали); // Удаляем строку
		Иначе
			ПоследнийНомерНепустойКолонкиГруппировки = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазделительПоТипуКолонки(ТипКолонки)
	
	Если ТипКолонки = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВредныеФакторыИУсловия Тогда
		Возврат "; ";
	Иначе 
		Возврат " ";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОчисткаШаблонСДанными()
	ОбластьЗаголовка = ШаблонСДанными.ПолучитьОбласть(1, 1, 1, ШаблонСДанными.ШиринаТаблицы);
	ШаблонСДанными.Очистить();
	ШаблонСДанными.Вывести(ОбластьЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПутьКФайлуНачалоВыбора(РежимДиалога, ПутьКФайлу, ИмяФайла = "")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	
	ДиалогВыбораФайла.Фильтр                      = НСтр("ru='Книга Excel 2007 (*.xlsx)|*.xlsx|Текстовый документ c разделителями (*.csv)|*.csv|Табличный документ (*.mxl)|*.mxl'");
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "csv";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайла;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

// Функция для обхода ошибки сохранения, если в документе есть примечания.
//
&НаСервере
Функция ТабличныйДокументУдалениеПримечаний()
	ТабличныйДокументДляСохранения = новый ТабличныйДокумент;
	
	ТабличныйДокументДляСохранения =  ШаблонСДанными;
	Для Индекс = 1 По ШаблонСДанными.ШиринаТаблицы Цикл 
		Ячейка = ТабличныйДокументДляСохранения.ПолучитьОбласть(1, Индекс, 1, Индекс).ТекущаяОбласть;
		Ячейка.Примечание.Текст = "";
		Ячейка.ЦветФона = Новый Цвет();
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокументДляСохранения);
	Возврат АдресВоВременномХранилище;
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьТаблицуВCSVФайл(ПолноеИмяФайла, ИнформацияПоКолонкам)
	Обработки.ЗагрузкаДанныхИзФайла.СохранитьТаблицуВCSVФайл(ПолноеИмяФайла, ИнформацияПоКолонкам);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере(Отказ)
	
	ЗагруженныеКлиенты = Новый Массив;
	ТипыМедосмотраКлиентов = Новый Соответствие;
	ОшибкиЗагрузки.Очистить();
	
	УниверсальныеМеханизмыСервер.ОбновитьИнформациюПоКолонкам(ИнформацияПоКолонкам, ШаблонСДанными);
	
	СоответствиеНомеровКолонок = ПолучитьСоответствиеНомеровКолонок(ИнформацияПоКолонкам);
	ПриказыИВредныеФакторыВидаМО = МедосмотрыСервер.ПолучитьМассивПриказовПоВидуМО(ВидМО);
	
	ОбозначенияПредварительныйМО = ОбозначенияПредварительныйМО();
	СоответствиеУникальныхВредныхФакторовИКодовПриказов = ПолучитьСоответствиеУникальныхВредныхФакторовИКодовПриказов();
	
	ЗагруженныеДанныеКлиентов = Новый Массив;
	
	Для Счетчик = 2 По ШаблонСДанными.ВысотаТаблицы Цикл
		
		ФИО = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО]).Текст;
		ФИО = УбратьЛишниеПереносыПробелы(ФИО);
		ДатаРождения = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаРождения]).Текст;
		
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Пол] <> Неопределено Тогда
			Пол = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Пол]).Текст;
			Пол = ВРег(Лев(СокрЛ(Пол), 1));
			Если Пол = "М" Тогда
				Пол = Перечисления.ПолФизическихЛиц.Мужской;
			ИначеЕсли Пол = "Ж" Тогда 
				Пол = Перечисления.ПолФизическихЛиц.Женский;
			Иначе
				Пол = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// Тип медосмотра
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ТипМедосмотра] <> Неопределено Тогда
			ТипМОТекст = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ТипМедосмотра]).Текст;
			Если ЗначениеЗаполнено(ТипМОТекст) Тогда
				Если ОбозначенияПредварительныйМО.Найти(ТипМОТекст) <> Неопределено Тогда
					ТипМедосмотра = Перечисления.ТипыМедосмотров.Предварительный;
				Иначе
					ТипМедосмотра = Перечисления.ТипыМедосмотров.Периодический;	
				КонецЕсли;
			Иначе
				ТипМедосмотра = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// ВредныеФакторыИУсловия
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВредныеФакторыИУсловия] <> Неопределено Тогда
			НомераПунктов = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВредныеФакторыИУсловия]).Текст;
		КонецЕсли;
		// Подразделение
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Подразделение] <> Неопределено Тогда
			Подразделение = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Подразделение]).Текст;
			Подразделение = УбратьЛишниеПереносыПробелы(Подразделение);
		КонецЕсли;
		// Профессия
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Профессия] <> Неопределено Тогда
			Профессия = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Профессия]).Текст;
			Профессия = УбратьЛишниеПереносыПробелы(Профессия);
		КонецЕсли;
		// ДатаНачалаРаботы
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаНачалаРаботы] <> Неопределено Тогда
			ДатаНачалаРаботы = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаНачалаРаботы]).Текст;
		КонецЕсли;
		// СНИЛС
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СНИЛС] <> Неопределено Тогда
			СНИЛС = ШаблонСДанными.Область(счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СНИЛС]).Текст;
			СНИЛС = УбратьЛишниеПереносыПробелы(СНИЛС);
		КонецЕсли;
		// ИНН
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ИНН] <> Неопределено Тогда
			ИНН = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ИНН]).Текст;	
		КонецЕсли;
		// СрокСтажа
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СрокСтажа] <> Неопределено Тогда
			СрокСтажа = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СрокСтажа]).Текст;
			СрокСтажа = НайтиЧислоВСтроке(СрокСтажа);
		КонецЕсли;
		
		Клиент = НайтиПоФИОИДатеРождения(ФИО, ДатаРождения, Организация, Пол, Подразделение, Профессия, ДатаНачалаРаботы, СрокСтажа, СНИЛС, ИНН);
		
		НаборПаспортныхДанных = ПолучитьСтруктуруПаспотрныхДанных(Счетчик, СоответствиеНомеровКолонок);
		Если НаборПаспортныхДанных <> Неопределено Тогда
			ДобавитьПаспортныеДанныеКлиенту(НаборПаспортныхДанных, Клиент);
		КонецЕсли;
		
		// Адрес
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Адрес] <> Неопределено Тогда
			Адрес = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Адрес]).Текст;
			Адрес = УбратьЛишниеПереносыПробелы(Адрес);
		КонецЕсли;
			
		ДобавитьПунктыКлиенту(Клиент,НомераПунктов,Отказ, СоответствиеУникальныхВредныхФакторовИКодовПриказов, ПриказыИВредныеФакторыВидаМО);
		
		НаборКонтактнойИнформации = Новый Массив;
		НаборКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаборКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЮридический);	
		НаборКонтактнойИнформации.Добавить(Адрес);		
		
		ДобавитьЮридическийАдресКлиенту(НаборКонтактнойИнформации, Клиент, Отказ, Адрес);
		
		Если ЗагруженныеКлиенты.Найти(Клиент) = Неопределено Тогда
			ЗагруженныеКлиенты.Добавить(Клиент);
			СтруктураКлиент = Новый Структура("Клиент, Профессия, Подразделение, ТипМедосмотра, ВредныеФакторы");
			СтруктураКлиент.Клиент = Клиент;
			СтруктураКлиент.Профессия = Профессия;
			СтруктураКлиент.Подразделение = Подразделение;
			СтрокиВредныеФакторы = ВредныеФакторыКлиентовЗагрузкаИзExcel.НайтиСтроки(Новый Структура("Клиент", Клиент)); 
			
			ВредныеФакторы = Новый Массив;
			Для Каждого Эл Из СтрокиВредныеФакторы Цикл
				ВредныеФакторы.Добавить(Эл.ВредныйФактор);
			КонецЦикла;
			
			СтруктураКлиент.ВредныеФакторы = ВредныеФакторы;
			СтруктураКлиент.ТипМедосмотра = ТипМедосмотра;
			ЗагруженныеДанныеКлиентов.Добавить(СтруктураКлиент);
		КонецЕсли;
	КонецЦикла;
	
	РезультатЗагрузки = Новый Структура("ЗагруженныеКлиенты", ЗагруженныеДанныеКлиентов);
	
	// Представление ошибок
	Если ОшибкиЗагрузки.Количество() <> 0 Тогда
		ТаблицаОшибок = Новый ТабличныйДокумент;
		
		Сч = 1;
		Для Каждого ЭлементОшибка Из ОшибкиЗагрузки Цикл
			ТаблицаОшибок.Область(Сч,1).Текст = ЭлементОшибка.Значение;
			Сч = Сч + 1;
		КонецЦикла;
		
		РезультатЗагрузки.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	КонецЕсли;
	
	Возврат РезультатЗагрузки;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбозначенияПредварительныйМО()
	
	Обозначения = Новый Массив;
	Обозначения.Добавить("1");
	Обозначения.Добавить("Первичный");
	Обозначения.Добавить("Предварительный");
	
	Возврат Обозначения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеНомеровКолонок(Знач ИнформацияПоКолонкам)
	
	СоответствиеНомеровКолонок = Новый Соответствие;
	Для Каждого СтрокаКолонка Из ИнформацияПоКолонкам Цикл
		СоответствиеНомеровКолонок.Вставить(СтрокаКолонка.Колонка, СтрокаКолонка.Позиция);
	КонецЦикла;
	Возврат СоответствиеНомеровКолонок;
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьЛишниеПереносыПробелы(Знач ИсхСтрока)
	Возврат СокрЛП(СтрЗаменить(СтрЗаменить(ИсхСтрока, Символы.ПС, " "), "  ", " "));
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЧислоВСтроке(Знач ИсхСтрока)
	
	ШаблонЦифры = "01234567890";
	СтрокаЧисло = "";
	Для Сч = 1 По СтрДлина(ИсхСтрока) Цикл
		ТекСимвол = Сред(ИсхСтрока, Сч, 1);
		Если Найти(ШаблонЦифры, ТекСимвол) > 0 Тогда
			СтрокаЧисло = СтрокаЧисло + ТекСимвол;
		ИначеЕсли Не ПустаяСтрока(СтрокаЧисло) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(СтрокаЧисло) Тогда
		Возврат 0;
	Иначе
		Возврат Число(СтрокаЧисло);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиПоФИОИДатеРождения(ФИО, ДатаРождения, Организация, Пол = Неопределено, Подразделение = Неопределено, Профессия = Неопределено, ДатаОтсчетаСтажа = Неопределено, СрокСтажа = Неопределено, СНИЛС = Неопределено, ИНН = Неопределено)
	
	Если ДатаРождения <> Неопределено И ТипЗнч(ДатаРождения) = Тип("Строка") Тогда
		
		ДатаРождения = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(ДатаРождения);
		Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
			ОшибкиЗагрузки.Добавить(Строка(ФИО) + ": " + "Некорректно предоставлена дата рождения");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДатаОтсчетаСтажа = Неопределено Тогда 
		Если СрокСтажа <> Неопределено Тогда
			ДатаОтсчетаСтажа = ДобавитьМесяц(НачалоГода(ТекущаяДата()), - СрокСтажа * 12);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ДатаОтсчетаСтажа) = Тип("Строка") Тогда
			ДатаОтсчетаСтажа = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(ДатаОтсчетаСтажа);
		КонецЕсли;	
	КонецЕсли;
	
	МассивФИО = СтрРазделить(ФИО," ", Ложь);
	Фамилия	 = ?(МассивФИО.Количество() > 0, ТРег(МассивФИО[0]), "");
	Имя		 = ?(МассивФИО.Количество() > 1, ТРег(МассивФИО[1]), "");
	
	Отчество = "";
	Если МассивФИО.Количество() > 2 Тогда
		Для Сч = 3 По МассивФИО.Количество() Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Отчество, МассивФИО[Сч - 1], " ");
		КонецЦикла;
	КонецЕсли;
	Если СтрРазделить(Отчество, " ").Количество() = 1
		Или НРег(Отчество) = Отчество // Оглы не выделен другим регистром.
	Тогда
		Отчество = ТРег(Отчество);
	КонецЕсли;
	
	Если МассивФИО.Количество() >= 3 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Клиенты.Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	Клиенты.Фамилия = &Фамилия
		               |	И Клиенты.Имя = &Имя
		               |	И Клиенты.Отчество = &Отчество
		               |	И (Клиенты.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ Клиенты.ДатаРождения = &ДатаРождения
					   |			ИЛИ &ДатаРождения = ДАТАВРЕМЯ(1, 1, 1))
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Клиенты.ДатаРождения УБЫВ";
		
		Запрос.УстановитьПараметр("Фамилия",  Фамилия);
		Запрос.УстановитьПараметр("Имя",	  Имя);
		Запрос.УстановитьПараметр("Отчество", Отчество);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Клиенты.Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	(Клиенты.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ Клиенты.ДатаРождения = &ДатаРождения
					   |			ИЛИ &ДатаРождения = ДАТАВРЕМЯ(1, 1, 1))
		               |	И Клиенты.Наименование = &Наименование
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Клиенты.ДатаРождения УБЫВ";
		
		Запрос.УстановитьПараметр("Наименование", ФИО);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОбъектКлиент = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектКлиент.ДатаРождения = ДатаРождения;
		ОбъектКлиент.ЦехУчасток = Подразделение;
		ОбъектКлиент.Профессия = Профессия;
		ОбъектКлиент.умцМестоРаботы = Организация;
		ОбъектКлиент.ДатаОтсчетаСтажа = ДатаОтсчетаСтажа;
		ОбъектКлиент.СНИЛС = СНИЛС;
		ОбъектКлиент.ИНН = ИНН;
		ОбъектКлиент.Записать();
		Возврат ОбъектКлиент.Ссылка;		
		
	КонецЕсли;
	
	// Если не нашли создаем
	Если МассивФИО.Количество() <> 0 Тогда
		
		НовыйКлиент = Справочники.Клиенты.СоздатьЭлемент();
		НовыйКлиент.Наименование = Фамилия + " " + Имя + " " + Отчество;
		НовыйКлиент.ДатаРождения = ДатаРождения;
		
		НовыйКлиент.Фамилия	 = Фамилия;
		НовыйКлиент.Имя		 = Имя;
		НовыйКлиент.Отчество = Отчество;
		
		НовыйКлиент.ЦехУчасток = Подразделение;
		НовыйКлиент.Профессия = Профессия;
		НовыйКлиент.умцМестоРаботы = Организация;
		НовыйКлиент.ДатаОтсчетаСтажа = ДатаОтсчетаСтажа;
		НовыйКлиент.СНИЛС = СНИЛС;
		НовыйКлиент.ИНН = ИНН;
		
		Если Не ЗначениеЗаполнено(Пол) И Не ПустаяСтрока(ФИО) Тогда
			НовыйКлиент.Пол = ОбщегоНазначения.ОпределитьПол(НовыйКлиент.Имя, НовыйКлиент.Фамилия, НовыйКлиент.Отчество);
		Иначе
			НовыйКлиент.Пол = Пол;
		КонецЕсли;
		
		НовыйКлиент.Записать();
		Возврат НовыйКлиент.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.Клиенты.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ДобавитьПунктыКлиенту(Клиент,Знач НомераПунктов,Отказ, СоответствиеУникальныхВредныхФакторовИКодовПриказов, ПриказыИВредныеФакторыВидаМО )
	
	ТЗПункты = ВредныеФакторыТЗИзСтроки(НомераПунктов, Приказ, СоответствиеУникальныхВредныхФакторовИКодовПриказов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пункты.КодПриказа КАК КодПриказа,
	|	Пункты.НомерПункта КАК НомерПункта,
	|	Пункты.ИсходныйПункт КАК ИсходныйПункт
	|ПОМЕСТИТЬ ТЗВредныхФакторов
	|ИЗ
	|	&Пункты КАК Пункты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗВредныхФакторов.КодПриказа КАК КодПриказа,
	|	ТЗВредныхФакторов.НомерПункта КАК НомерПункта,
	|	ПереченьВредныхФакторовИРабот.Ссылка КАК Ссылка,
	|	ПереченьВредныхФакторовИРабот.НомерПП КАК НомерПП,
	|	ТЗВредныхФакторов.ИсходныйПункт КАК ИсходныйПункт
	|ИЗ
	|	ТЗВредныхФакторов КАК ТЗВредныхФакторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
	|		ПО ТЗВредныхФакторов.НомерПункта = ПереченьВредныхФакторовИРабот.НомерПП
	|			И (ТЗВредныхФакторов.КодПриказа ССЫЛКА Справочник.ПриказыМедосмотров
	|					И ТЗВредныхФакторов.КодПриказа = ПереченьВредныхФакторовИРабот.Приказ
	|				ИЛИ ТЗВредныхФакторов.КодПриказа = ПереченьВредныхФакторовИРабот.Приказ.Код)
	|			И (ПереченьВредныхФакторовИРабот.Ссылка В (&ПриказыИВредныеФакторы)
	|				ИЛИ ПереченьВредныхФакторовИРабот.Приказ В (&ПриказыИВредныеФакторы))";
	
	Запрос.УстановитьПараметр("ПриказыИВредныеФакторы", ПриказыИВредныеФакторыВидаМО);
	Запрос.УстановитьПараметр("Пункты", ТЗПункты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВредныеФакторыКлиентовЗагрузкаИзExcel.НайтиСтроки(Новый Структура("Клиент", Клиент));
	
	Для Каждого Эл Из ВредныеФакторыКлиентовЗагрузкаИзExcel Цикл
		ВредныеФакторыКлиентовЗагрузкаИзExcel.Удалить(ВредныеФакторыКлиентовЗагрузкаИзExcel.Индекс(Эл));
	КонецЦикла;
	
	// Если хотя бы один пункт удалось расшифровать в очередном Excel, то затираем старые, заменяя новыми.
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			НоваяСтрока = ВредныеФакторыКлиентовЗагрузкаИзExcel.Добавить();
			НоваяСтрока.Клиент = Клиент;
			НоваяСтрока.ВредныйФактор = Выборка.Ссылка;
		Иначе
			ОшибкиЗагрузки.Добавить(Строка(Клиент) + ": " + "Неправильные номера пунктов: " + СокрЛП(Выборка.ИсходныйПункт));
			Отказ = Истина;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВредныеФакторыТЗИзСтроки(Знач НомераПунктов, Приказ, СоответствиеУникальныхВредныхФакторовИКодовПриказов)
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	ТЗПунктов = Новый ТаблицаЗначений;
	ТЗПунктов.Колонки.Добавить("КодПриказа",	 Новый ОписаниеТипов("Строка, СправочникСсылка.ПриказыМедосмотров",,КвалификаторыСтроки));
	ТЗПунктов.Колонки.Добавить("НомерПункта",	 Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));
	ТЗПунктов.Колонки.Добавить("ИсходныйПункт",	 Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));
	
	Если Прав(НомераПунктов, 1) = "." Тогда
		НомераПунктов = Сред(НомераПунктов, 1, СтрДлина(НомераПунктов) - 1);
	КонецЕсли;
	
	МассивПодпунктов = СтрРазделить(НомераПунктов, ",", Ложь);
	Для Каждого ЭлементМассиваПодпунктов Из МассивПодпунктов Цикл
		Для Каждого Подпункт Из СтрРазделить(ЭлементМассиваПодпунктов, ";", Ложь) Цикл
			Подпункт = СокрЛП(Подпункт);
			Если Не ПустаяСтрока(Подпункт) Тогда
				КодПриказа = Лев(Подпункт, СтрНайти(Подпункт, "_") - 1);
				НомерПункта = Прав(Подпункт, СтрДлина(Подпункт) - СтрНайти(Подпункт, "_"));
				СтруктураОтбора = Новый Структура("КодПриказа, НомерПункта", КодПриказа, НомерПункта);
				СтрокиСДаннымиПунктами = ТЗПунктов.НайтиСтроки(СтруктураОтбора);
				Если СтрокиСДаннымиПунктами.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ТЗПунктов.Добавить();
				НоваяСтрока.КодПриказа = КодПриказа;
				НоваяСтрока.НомерПункта = НомерПункта;
				НоваяСтрока.ИсходныйПункт = Подпункт;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Каждого СтрокаПункт Из ТЗПунктов Цикл
		Если ПустаяСтрока(СтрокаПункт.КодПриказа) Тогда
			
			КодПриказаУникальногоПункта = СоответствиеУникальныхВредныхФакторовИКодовПриказов.Получить(СтрокаПункт.НомерПункта);
			Если КодПриказаУникальногоПункта <> Неопределено Тогда
				СтрокаПункт.КодПриказа = КодПриказаУникальногоПункта;
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Приказ) Тогда
				СтрокаПункт.КодПриказа = Приказ;
			Иначе
				СтрокаПункт.КодПриказа = Справочники.ПриказыМедосмотров.Приказ29н;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗПунктов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеУникальныхВредныхФакторовИКодовПриказов()
	
	СоответствиеУникальныхВредныхФакторовИКодовПриказа = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРабот.НомерПП КАК НомерПП,
		|	КОЛИЧЕСТВО(ПереченьВредныхФакторовИРабот.Приказ.Код) КАК КоличествоПриказКод,
		|	МАКСИМУМ(ПереченьВредныхФакторовИРабот.Приказ.Код) КАК ПриказКод
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	ПереченьВредныхФакторовИРабот.НомерПП
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПереченьВредныхФакторовИРабот.Приказ.Код) = 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеУникальныхВредныхФакторовИКодовПриказа.Вставить(Выборка.НомерПП, Выборка.ПриказКод);   
	КонецЦикла;
	
	Возврат СоответствиеУникальныхВредныхФакторовИКодовПриказа;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЮридическийАдресКлиенту(НаборКонтактнойИнформации, Клиент, Отказ, Адрес)

	Если ЗначениеЗаполнено(Клиент) Тогда
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = Клиент;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.АдресЮридический;
	   	Запись.Представление = Адрес;
		Запись.Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПаспортныеДанныеКлиенту(НаборПаспортныхДанных, Клиент)

	Если ЗначениеЗаполнено(Клиент) Тогда
		
		Запись = РегистрыСведений.ПаспортныеДанные.СоздатьМенеджерЗаписи();
		Запись.ФизЛицо = Клиент; 
		Запись.ДокументВид = НаборПаспортныхДанных.ВидДУЛ; 
		Запись.ДокументСерия = НаборПаспортныхДанных.СерияДУЛ;
		Запись.ДокументНомер = НаборПаспортныхДанных.НомерДУЛ;
		Запись.ДокументДатаВыдачи = НаборПаспортныхДанных.ДатаВыдачиДУЛ;
		Запись.ДокументКемВыдан = НаборПаспортныхДанных.КемВыданДУЛ; 
		Если ЗначениеЗаполнено(НаборПаспортныхДанных.ДатаВыдачиДУЛ) Тогда
			Запись.Период = Дата(НаборПаспортныхДанных.ДатаВыдачиДУЛ);
		Иначе
			Если УниверсальныеМеханизмыСервер.НайтиПаспортныеДанные(НаборПаспортныхДанных, Клиент) Тогда 
				Возврат;
			Иначе
				Запись.Период = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;
		Запись.Записать();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПаспотрныхДанных(Счетчик, СоответствиеНомеровКолонок)
	
	// ВидДУЛ
	Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВидДУЛ] <> Неопределено Тогда
		ВидДУЛТекст = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВидДУЛ]).Текст;
		ВидДУЛТекст = УбратьЛишниеПереносыПробелы(ВидДУЛТекст); 
		ВидДул = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоНаименованию(ВидДУЛТекст);
	КонецЕсли; 
	
	// СерияДУЛ
	Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СерияДУЛ] <> Неопределено Тогда
		СерияДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СерияДУЛ]).Текст;
		СерияДУЛ = УбратьЛишниеПереносыПробелы(СерияДУЛ);
	КонецЕсли;
	
	// НомерДУЛ
	Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.НомерДУЛ] <> Неопределено Тогда
		НомерДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.НомерДУЛ]).Текст;
		НомерДУЛ = УбратьЛишниеПереносыПробелы(НомерДУЛ);
	КонецЕсли;
	
	// ДатаВыдачиДУЛ
	Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаВыдачиДУЛ] <> Неопределено Тогда
		ДатаВыдачиДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаВыдачиДУЛ]).Текст;
		ДатаВыдачиДУЛ = УбратьЛишниеПереносыПробелы(ДатаВыдачиДУЛ);
		ДатаВыдачиДУЛ = СтрЗаменить(ДатаВыдачиДУЛ,".", "");
		ДатаВыдачиДУЛ = Прав(ДатаВыдачиДУЛ, 4) + Сред(ДатаВыдачиДУЛ, 3, 2) + Лев(ДатаВыдачиДУЛ, 2);
	КонецЕсли;
	
	// КемВыданДУЛ
	Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.КемВыданДУЛ] <> Неопределено Тогда
		КемВыданДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.КемВыданДУЛ]).Текст;
		КемВыданДУЛ = УбратьЛишниеПереносыПробелы(КемВыданДУЛ);
	КонецЕсли; 
	
	Если НЕ (ЗначениеЗаполнено(СерияДУЛ) ИЛИ ЗначениеЗаполнено(НомерДУЛ)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидДУЛ) Тогда
		ВидДУЛ = УправлениеНастройками.ПараметрУчета("ОсновнойВидДУЛ");
		Если НЕ ЗначениеЗаполнено(ВидДУЛ) Тогда
			ВидДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21;
		КонецЕсли;
	КонецЕсли;
	
	НаборПаспортныхДанных = Новый Структура;
	НаборПаспортныхДанных.Вставить("ВидДУЛ", ВидДУЛ);
	НаборПаспортныхДанных.Вставить("СерияДУЛ", СерияДУЛ);
	НаборПаспортныхДанных.Вставить("НомерДУЛ", НомерДУЛ);
	НаборПаспортныхДанных.Вставить("ДатаВыдачиДУЛ", ДатаВыдачиДУЛ);
	НаборПаспортныхДанных.Вставить("КемВыданДУЛ", КемВыданДУЛ);
	
	Возврат НаборПаспортныхДанных; 
	
КонецФункции 

#КонецОбласти
