#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипМО = Перечисления.ТипыМедосмотров.Периодический;
	
	Если ЭтотОбъект.Параметры.Свойство("Ключ") Тогда
		
		СписокНаПрохождение = ЭтотОбъект.Параметры.Ключ;
		
		ЗаполнитьТаблицуПрохождениями(ТипМО);
		
		ЗагрузитьНастройкиОтбораПоУмолчанию();
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипМОПриИзменении(Элемент)
	ЗаполнитьТаблицуПрохождениями(ТипМО);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОтбор(Команда)
	
	ПримеритьОтборКТаблицеПрохождений();
	ТекущийЭлемент = Элементы.СтраницаДокументы;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьТаблицуПрохождениями(ТипМО);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для каждого Строчка Из Таблица Цикл
		Строчка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для каждого Строчка Из ЭтотОбъект.Таблица Цикл
		Строчка.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	ЗначениеОтбора = Новый Структура("СписокНаПрохождениеМедосмотра, ТипМедосмотра", ПредопределенноеЗначение("Документ.СписокНаПрохождениеМедосмотра.ПустаяСсылка"), ТипМО);
	ПараметрыОтбора = Новый Структура("Отбор", ЗначениеОтбора);
	
	ОткрытьФорму("Документ.ПрохождениеМедосмотра.Форма.ФормаВыбора", ПараметрыОтбора, Элементы.Таблица, , , ,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	ВыделЭлементы = Новый Массив;
	
	Для каждого Строка Из Элементы.Таблица.ВыделенныеСтроки Цикл
		ВыделЭлементы.Добавить(ЭтотОбъект.Таблица.НайтиПоИдентификатору(Строка));	
	КонецЦикла;
	
	Для каждого Элем Из ВыделЭлементы Цикл
		ЭтотОбъект.Таблица.Удалить(Элем);
	КонецЦикла;
	Элементы.Таблица.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьПрохожденияКСписку(Команда)
	
	ПрохожденияМедосмотра = Новый Массив;
	Для Каждого Элемент Из Таблица.НайтиСтроки(Новый Структура("Пометка", Истина)) Цикл
		ПрохожденияМедосмотра.Добавить(Элемент.ДокументПМО);
	КонецЦикла;
	
	Если ПрохожденияМедосмотра.Количество() <> 0 Тогда
		ПривязатьПрохожденияКСпискуСервер(ПрохожденияМедосмотра, СписокНаПрохождение);
		Оповестить("СписокНаПрохождениеИзменен", СписокНаПрохождение);
		ЗаполнитьТаблицуПрохождениями(ТипМО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМО(Команда)
	ТипМО = ПредопределенноеЗначение("Перечисление.ТипыМедосмотров.ПустаяСсылка");
	ЗаполнитьТаблицуПрохождениями(ТипМО);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПрохождениеМедосмотра") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ДокументПМО", ВыбранноеЗначение);
		Если ЭтотОбъект.Таблица.НайтиСтроки(Отбор).Количество() = 0 Тогда
			РеквизитыПрохождения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранноеЗначение, "Клиент, ДатаЗавершения", Истина);
			СтрТаблицы = Таблица.Добавить();
			СтрТаблицы.Пометка = Истина;
			СтрТаблицы.Клиент  = РеквизитыПрохождения.Клиент;
			СтрТаблицы.ДокументПМО = ВыбранноеЗначение;
			СтрТаблицы.ДатаЗавершения = РеквизитыПрохождения.ДатаЗавершения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуПрохождениями(ТипМО)
	
	Таблица.Очистить();
	
	КонтрагентСтрокой = СписокНаПрохождение.МестоРаботы;
	ИНН = СокрЛП(СписокНаПрохождение.Контрагент.ИНН);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрохождениеМедосмотра.Ссылка КАК ДокументПМО,
	               |	ПрохождениеМедосмотра.ДатаЗавершения КАК ДатаЗавершения,
	               |	ПрохождениеМедосмотра.Клиент КАК Клиент
	               |ИЗ
	               |	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
	               |ГДЕ
	               |	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = ЗНАЧЕНИЕ(Документ.СписокНаПрохождениеМедосмотра.ПустаяСсылка)
	               |	И (ПрохождениеМедосмотра.МестоРаботы = &КонтрагентСтрокой
	               |			ИЛИ &ИНН <> """" И ПрохождениеМедосмотра.ИННРаботодателя = &ИНН)
	               |	И НЕ ПрохождениеМедосмотра.ПометкаУдаления
	               |	И ПрохождениеМедосмотра.ТипМедосмотра = &ТипМО";
	
	Запрос.УстановитьПараметр("ТипМО", ТипМО);
	Запрос.УстановитьПараметр("КонтрагентСтрокой", КонтрагентСтрокой);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Если ТипМО = Перечисления.ТипыМедосмотров.ПустаяСсылка() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПрохождениеМедосмотра.ТипМедосмотра = &ТипМО", "");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрТаблицы = Таблица.Добавить();
		СтрТаблицы.Пометка = Истина;
		СтрТаблицы.Клиент  = Выборка.Клиент;
		СтрТаблицы.ДокументПМО = Выборка.ДокументПМО;
		СтрТаблицы.ДатаЗавершения = Выборка.ДатаЗавершения;
	КонецЦикла;
	
	ПримеритьОтборКТаблицеПрохождений();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПривязатьПрохожденияКСпискуСервер(ПрохожденияМедосмотра, СписокНаПрохождение)
	
	НачатьТранзакцию();
	
	Для Каждого ДокументПрохождения Из ПрохожденияМедосмотра Цикл
		УстановитьДляПМОСПМО(ДокументПрохождения, СписокНаПрохождение);	
	КонецЦикла;
			
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ПримеритьОтборКТаблицеПрохождений()
	
	мсДокументыПМО = Новый Массив;
	Для Каждого стрТаблица Из Таблица Цикл
		мсДокументыПМО.Добавить(стрТаблица.ДокументПМО);	
	КонецЦикла;

	мсДокументыПМООтбор = ВыполнитьОтборСервер(КомпоновщикОтбора.Настройки, мсДокументыПМО);
	
	мсУдаляемыеСтроки = Новый Массив;
	Для Каждого стрТаблица Из Таблица Цикл
		Если мсДокументыПМООтбор.Найти(стрТаблица.ДокументПМО) = Неопределено Тогда 
			мсУдаляемыеСтроки.Добавить(стрТаблица);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого удСтрока Из мсУдаляемыеСтроки Цикл
		Таблица.Удалить(удСтрока);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьОтборСервер(Знач НастройкиОтбор, Значение)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	СхемаКомпоновкиДанных = Документы.СписокНаПрохождениеМедосмотра.ПолучитьМакет("ПоляШаблонаДокументаПрохождениеМедосмотра");
	ИмяПоляКомпоновкиДанных = "ПрохождениеМедосмотра"; 
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.ВСписке;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если НастройкиОтбор <> Неопределено Тогда
		ОбщегоНазначенияСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, НастройкиОтбор.Отбор);
	КонецЕсли;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
	Отбор.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Отбор.ЛевоеЗначение		= ПолеОтбора;
	Отбор.ПравоеЗначение	= Значение;
	Отбор.ВидСравнения		= ВидСравненияВОтборе;
	Отбор.Использование		= Истина;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультата.ВыгрузитьКолонку("ПрохождениеМедосмотра");
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СхемаКомпоновкиДанных = Документы.СписокНаПрохождениеМедосмотра.ПолучитьМакет("ПоляШаблонаДокументаПрохождениеМедосмотра");
	ВремХранилищеСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	КомпоновщикОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВремХранилищеСКД));
	КомпоновщикОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикОтбора.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УстановитьДляПМОСПМО(ПМОСсылка, СписокНаПрохождение)
	
	НачатьТранзакцию();
	
	Попытка
		
		Док = ПМОСсылка.ПолучитьОбъект();
		
		Если Док.СписокНаПрохождениеМедосмотра <> СписокНаПрохождение Тогда
			// Вносим в ПМО запись об СПМО
			Док.СписокНаПрохождениеМедосмотра = СписокНаПрохождение;
			Док.ДополнительныеСвойства.Вставить("НеПроверятьГраницуЗапретаИзмененияДанных", Истина);

			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;

		ДокСПМО = СписокНаПрохождение.ПолучитьОбъект();
		// Поиск существующиего клиента, если его нет, тогда добавляем
		СтруктураДляПоиска = Новый Структура("Клиент", Док.Клиент);
		ТабличнаяЧастьДок = ДокСПМО.Клиенты; 
		
		Если ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска).Количество() = 0 Тогда
			НоваяСтрока = ТабличнаяЧастьДок.Добавить();
			НоваяСтрока.Клиент = Док.Клиент;
			НоваяСтрока.Профессия = ?(ЗначениеЗаполнено(Док.Профессия), Док.Профессия, Док.Клиент.Профессия);
			НоваяСтрока.ФИОКлиента = ?(ЗначениеЗаполнено(Док.ФИОКлиента), Док.ФИОКлиента, ОбщегоНазначения.ФИОФизЛица(Док.Клиент));
			НоваяСтрока.ЦехУчасток = ?(ЗначениеЗаполнено(Док.ЦехУчасток), Док.ЦехУчасток, Док.Клиент.ЦехУчасток);
			НоваяСтрока.ТипМедосмотра = ПМОСсылка.ТипМедосмотра;
			
			ДокСПМО.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
