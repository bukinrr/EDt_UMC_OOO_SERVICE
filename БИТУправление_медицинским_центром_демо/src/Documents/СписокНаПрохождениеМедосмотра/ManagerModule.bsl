#Область ПрограммныйИнтерфейс

Функция ПолучитьСписокДинамическихПечатныхФорм() Экспорт
	
	мПечатныхФорм = Новый Массив;
	
	мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "ЗаключительныйАкт", НСтр("ru='Заключительный акт'")));
	//мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "Смета", НСтр("ru='Смета медицинского осмотра'")));
	//мПечатныхФорм.Добавить(Новый Структура("Имя, Синоним", "СметаПоУслугам", НСтр("ru='Смета краткая по услугам'")));
	
	Возврат мПечатныхФорм;
	
КонецФункции

// Возвращает доступные варианты печати документа.
//  Результатом является Струткура, каждая строка которой соответствует одному из вариантов печати.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("ЗаключительныйАкт", НСтр("ru='Заключительный акт'"));
	
	Если ТекущийЯзык() = Метаданные.Языки.Русский Тогда
		СтруктураМакетов.Вставить("ЗаключительныйАкт_ПриложениеСводнаяТаблица", "Заключительный акт и сводная таблица");
		СтруктураМакетов.Вставить("ПриложениеСводнаяТаблицаЗаключительногоАкта", "Сводная таблица к заключительному акту");
	КонецЕсли;
	
	СтруктураМакетов.Вставить("Смета", НСтр("ru='Смета медицинского осмотра'")); 
	СтруктураМакетов.Вставить("СметаПоУслугам", НСтр("ru='Смета краткая по услугам'"));
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПолучитьСтруктуруДинамическихПечатныхФорм(СсылкаДокумент) Экспорт
	
	ВидМедосмотра = СсылкаДокумент.ВидМО;
	ПолныйСписокПечатныхФорм = Новый Массив;
	Если ЗначениеЗаполнено(ВидМедосмотра) Тогда
		Если ТипЗнч(ВидМедосмотра) = Тип("СправочникСсылка.ВидыМедосмотров") Тогда
			Для Каждого СтрокаПриказ Из ВидМедосмотра.Приказы Цикл
				Если ТипЗнч(СтрокаПриказ.Приказ) = Тип("СправочникСсылка.ПриказыМедосмотров") 
					И ЗначениеЗаполнено(СтрокаПриказ.Приказ) 
				Тогда
					Для Каждого ПечФорма Из СтрокаПриказ.Приказ.МакетыПечати Цикл
						Если ПечФорма.ОбластьПрименения = Перечисления.ОбластьПримененияПФДляМО.СписокНаПрохождениеМО
							И ПолныйСписокПечатныхФорм.Найти(ПечФорма) = Неопределено
						Тогда
							ПолныйСписокПечатныхФорм.Добавить(ПечФорма);
						КонецЕсли;
					КонецЦикла;
				Иначе
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДинамическихПечатныхФорм = Новый Структура;
	
	Для Каждого ПФ Из ПолныйСписокПечатныхФорм Цикл
		
		Если ТипЗнч(ПФ.Макет) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", Неопределено, ПФ.Макет);
			УникальноеИмя = СтрЗаменить("u" + Строка(Новый УникальныйИдентификатор()), "-", "_");
			СтруктураДинамическихПечатныхФорм.Вставить(УникальноеИмя, СтруктураДанныхПФ);
		ИначеЕсли ТипЗнч(ПФ.Макет) = Тип("Строка") Тогда
			ОбработатьВстроенныеПечатныеФормы(ПФ.Макет, СтруктураДинамическихПечатныхФорм);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДинамическихПечатныхФорм; 
	
КонецФункции

Процедура ОбработатьВстроенныеПечатныеФормы(ИмяМакета, СтруктураДинамическихПечатныхФорм)
	
	СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Заключительный акт'"), Неопределено); 
	СтруктураДинамическихПечатныхФорм.Вставить("ЗаключительныйАкт", СтруктураДанныхПФ);
	
	Если ТекущийЯзык() = Метаданные.Языки.Русский Тогда
		СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", "Заключительный акт и сводная таблица", Неопределено);
		СтруктураДинамическихПечатныхФорм.Вставить("ЗаключительныйАкт_ПриложениеСводнаяТаблица", СтруктураДанныхПФ);
		СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", "Сводная таблица к заключительному акту", Неопределено);
		СтруктураДинамическихПечатныхФорм.Вставить("ПриложениеСводнаяТаблицаЗаключительногоАкта", СтруктураДанныхПФ);
	КонецЕсли;
	
	СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Смета медицинского осмотра'"), Неопределено);
	СтруктураДинамическихПечатныхФорм.Вставить("Смета", СтруктураДанныхПФ); 
	СтруктураДанныхПФ = Новый Структура("Имя, СсылкаНаВнешнюю", НСтр("ru='Смета краткая по услугам'"), Неопределено);
	СтруктураДинамическихПечатныхФорм.Вставить("СметаПоУслугам", СтруктураДанныхПФ);
	
КонецПроцедуры

// Процедура формирует печатную форму документа
//  Название макета печати передается в качестве параметра,
//  по переданному имени макета определяется соответствующая функция печати.
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка.СписокНаПрохождениеМедосмотра	 - документ списка.
//  ИмяМакета		 - Строка	 - название макета.
//  СохранениеЭМД	 - Булево	 - для сохранения ЭМД заключения.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция Печать(СсылкаНаОбъект, ИмяМакета, СохранениеЭМД = Ложь) Экспорт
	
	Перем ТабДокумент;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ЗаключительныйАкт" Тогда
		ТабДокумент = ПечатьЗаключительныйАкт(СсылкаНаОбъект, , СохранениеЭМД);
	ИначеЕсли ИмяМакета = "ПриложениеСводнаяТаблицаЗаключительногоАкта" Тогда
		ТабДокумент = ПечатьПриложенияСводнаяТаблицаЗаключительногоАкта(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "ЗаключительныйАкт_ПриложениеСводнаяТаблица" Тогда
		ТабДокумент = ПечатьЗаключительныйАкт_ПриложениеСводнаяТаблица(СсылкаНаОбъект);
	ИначеЕсли ИмяМакета = "Смета" Тогда
		ТабДокумент = ПечатьСметаМедицинскогоОсмотра(СсылкаНаОбъект);  
	ИначеЕсли ИмяМакета = "СметаПоУслугам" Тогда
		ТабДокумент = ПечатьСметаМедицинскогоОсмотраПоУслугам(СсылкаНаОбъект);
   	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьНеподписанныеДокументыДляОтчётаЭЦП(ПараметрыДанных, ДокументыРЭМД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНаПрохождениеМедосмотра.ДатаЗаключительногоАкта КАК ДатаДокумента,
		|	СписокНаПрохождениеМедосмотра.Ссылка КАК Ссылка,
		|	СписокНаПрохождениеМедосмотра.Филиал КАК Филиал
		|ПОМЕСТИТЬ СПМО
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра КАК СписокНаПрохождениеМедосмотра
		|ГДЕ
		|	СписокНаПрохождениеМедосмотра.ПредседательМедКомиссии В (&СотрудникиДокумента)
		|	И НЕ СписокНаПрохождениеМедосмотра.ПометкаУдаления
		|	И СписокНаПрохождениеМедосмотра.Проведен
		|	И (&КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ИЛИ СписокНаПрохождениеМедосмотра.ДатаЗаключительногоАкта МЕЖДУ &НачалоПериода И &КонецПериода)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СПМО.Ссылка КАК Ссылка,
		|	СПМО.ДатаДокумента КАК ДатаДокумента,
		|	СПМО.Филиал КАК Филиал
		|ПОМЕСТИТЬ СПМОДляПодписиПоРолям
		|ИЗ
		|	СПМО КАК СПМО
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СПМО.Ссылка КАК Ссылка
		|		ИЗ
		|			СПМО КАК СПМО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|					ПО (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
		|				ПО (ЭлектронныеПодписи.Объект = СПМО.Ссылка)
		|					И (НЕ ЭлектронныеПодписи.ПодписанФайлЭМД)
		|		ГДЕ
		|			РолиИПодписиЭМД.УИД_ЭЦП ЕСТЬ NULL) КАК СПМОСПодписямиБезРоли
		|		ПО (СПМОСПодписямиБезРоли.Ссылка = СПМО.Ссылка)
		|ГДЕ
		|	СПМОСПодписямиБезРоли.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Списки на прохождение м/о"" КАК ТипМедицинскогоДокумента,
		|	СПМО.Ссылка КАК Ссылка,
		|	СПМО.ДатаДокумента КАК ДатаДокумента,
		|	ЛОЖЬ КАК ПодписьРЭМД,
		|	ИСТИНА КАК ПодписьФайловЭМД
		|ИЗ
		|	СПМОДляПодписиПоРолям КАК СПМО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СПМО.Ссылка КАК Ссылка,
		|			СПМО.ДатаДокумента КАК ДатаДокумента
		|		ИЗ
		|			СПМОДляПодписиПоРолям КАК СПМО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|					ПО (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
		|						И (РолиИПодписиЭМД.РольПодписи = &РольПредседателя)
		|				ПО (ЭлектронныеПодписи.Объект = СПМО.Ссылка)
		|					И (НЕ ЭлектронныеПодписи.ПодписанФайлЭМД)
		|		ГДЕ
		|			ЭлектронныеПодписи.Объект ЕСТЬ NULL
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СПМО.Ссылка,
		|			СПМО.ДатаДокумента
		|		ИЗ
		|			СПМОДляПодписиПоРолям КАК СПМО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПодписиМО.Филиал КАК Филиал
		|				ИЗ
		|					РегистрСведений.ПодписиМО КАК ПодписиМО
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|						ПО (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)
		|							И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = ПодписиМО.Сертификат)
		|							И (СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления = ЛОЖЬ)) КАК ФилиалыПодписейМО
		|				ПО (ФилиалыПодписейМО.Филиал = СПМО.Ссылка.Филиал ИЛИ ФилиалыПодписейМО.Филиал = СПМО.Ссылка.Филиал.Организация)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|					ПО (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
		|						И (РолиИПодписиЭМД.РольПодписи = ЗНАЧЕНИЕ(Перечисление.РолиПодписей.МедицинскаяОрганизация))
		|				ПО (ЭлектронныеПодписи.Объект = СПМО.Ссылка)
		|					И (НЕ ЭлектронныеПодписи.ПодписанФайлЭМД)
		|		ГДЕ
		|			ЭлектронныеПодписи.Объект ЕСТЬ NULL) КАК НеподписанныеСПМО
		|		ПО СПМО.Ссылка = НеподписанныеСПМО.Ссылка";
	
	Запрос.УстановитьПараметр("СотрудникиДокумента",	ПараметрыДанных.СотрудникиДокумента);
	Запрос.УстановитьПараметр("НачалоПериода",			ПараметрыДанных.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",			ПараметрыДанных.КонецПериода);
	Запрос.УстановитьПараметр("Пользователь",			ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("РольПредседателя",		Перечисления.РолиПодписей.РольПредседательМедкомиссии());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьЗаключительныйАкт(СсылкаНаОбъект, МВТ = Неопределено, СохранениеЭМД = Ложь)
	
	Если Ложь Тогда СсылкаНаОбъект = Документы.СписокНаПрохождениеМедосмотра.ПустаяСсылка() КонецЕсли;
	
	РеквизитНомерППиПриказа = ПолучитьРеквизитНомерППиПриказа(СсылкаНаОбъект);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокНаПрохождениеМедосмотра_ЗаключительныйАкт";
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("ЗаключительныйАкт");
	
	СтруктПоказателей = Новый Структура;
	СтруктПоказателей.Вставить("Всего", 0);
	СтруктПоказателей.Вставить("ВТЧЖенщин", 0);
	СтруктПоказателей.Вставить("РабДо18", 0);
	СтруктПоказателей.Вставить("РабУтрТруд", 0);
	
	
	ОбластьПустаяСтрока			= Макет.ПолучитьОбласть("ОбластьПустаяСтрока");
	
	// Данные организации
	ОбластьШапка 				= Макет.ПолучитьОбласть("ОбластьШапка");
	СтруктураРеквизитовОрганизации	= ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СсылкаНаОбъект.Филиал);
	ОбластьШапка.Параметры.НазваниеОрганизации = СтруктураРеквизитовОрганизации.НазваниеОрганизации;
	ОбластьШапка.Параметры.АдресОрганизации = СтруктураРеквизитовОрганизации.Адрес;
	ОбластьШапка.Параметры.ОГРН = СтруктураРеквизитовОрганизации.ОГРН;
	
	мДатаАкта = ?(ЗначениеЗаполнено(СсылкаНаОбъект.ДатаЗаключительногоАкта), СсылкаНаОбъект.ДатаЗаключительногоАкта, СсылкаНаОбъект.Дата);
	ОбластьШапка.Параметры.Дата = Формат(мДатаАкта, "ДЛФ=DD");
	ОбластьШапка.Параметры.ДатаГ = Формат(мДатаАкта, "ДФ=yyyy");
	ОбластьШапка.Параметры.Контрагент = ?(ЗначениеЗаполнено(СсылкаНаОбъект.МестоРаботы), СсылкаНаОбъект.МестоРаботы,
											?(ЗначениеЗаполнено(СсылкаНаОбъект.Контрагент.НаименованиеПолное), СсылкаНаОбъект.Контрагент.НаименованиеПолное, СсылкаНаОбъект.Контрагент.Наименование));
	ТабДокумент.Вывести(ОбластьШапка);
	
	// Предоставляется работодателем
	ОбластьЧислОбщ				= Макет.ПолучитьОбласть("ОбластьЧислОбщ");
	ОбластьЧислНаТяжРаб			= Макет.ПолучитьОбласть("ОбластьЧислНаТяжРаб");
	ОбластьЧислОбязОсм			= Макет.ПолучитьОбласть("ОбластьЧислОбязОсм");
	ОбластьЧислПрошОсм			= Макет.ПолучитьОбласть("ОбластьЧислПрошОсм");
	ОбластьЧислПодлежОсм		= Макет.ПолучитьОбласть("ОбластьЧислПодлежОсм");
	
	// Временные таблицы по документам
	МВТ = СформироватьВременныеДанные(СсылкаНаОбъект);
	
	// 1
	ОбластьЧислОбщ.Параметры.Всего		= СсылкаНаОбъект.ОбщЧисленностьРаботниковВсего;
	ОбластьЧислОбщ.Параметры.ВТЧЖенщин	= СсылкаНаОбъект.ОбщЧисленностьРаботниковЖенщин;
	ОбластьЧислОбщ.Параметры.РабДо18	= СсылкаНаОбъект.ОбщЧисленностьРаботниковДо18Лет;
	ОбластьЧислОбщ.Параметры.РабУтрТруд	= СсылкаНаОбъект.ОбщЧисленностьРаботниковУстУтратаНетрудоспособности;
	ТабДокумент.Вывести(ОбластьЧислОбщ);
	
	// 2
	ОбластьЧислНаТяжРаб.Параметры.Всего			= СсылкаНаОбъект.РаботникиНаТяжРаботахВсего;
	//ОбластьЧислНаТяжРаб.Параметры.ВТЧЖенщин		= СсылкаНаОбъект.РаботникиНаТяжРаботахЖенщин;
	//ОбластьЧислНаТяжРаб.Параметры.РабДо18		= СсылкаНаОбъект.РаботникиНаТяжРаботахДо18Лет;
	//ОбластьЧислНаТяжРаб.Параметры.РабУтрТруд	= СсылкаНаОбъект.РаботникиНаТяжРаботахУстУтратаНетрудоспособности;
	ТабДокумент.Вывести(ОбластьЧислНаТяжРаб);
	
	// 3
	ОбластьЧислОбязОсм.Параметры.Всего			= СсылкаНаОбъект.РаботникиНаТяжРаботахВсего;
	ОбластьЧислОбязОсм.Параметры.ВТЧЖенщин		= СсылкаНаОбъект.РаботникиНаТяжРаботахЖенщин;
	ОбластьЧислОбязОсм.Параметры.РабДо18		= СсылкаНаОбъект.РаботникиНаТяжРаботахДо18Лет;
	ОбластьЧислОбязОсм.Параметры.РабУтрТруд		= СсылкаНаОбъект.РаботникиНаТяжРаботахУстУтратаНетрудоспособности;
	ТабДокумент.Вывести(ОбластьЧислОбязОсм);
	СтруктЧислОбязОсм = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктПоказателей);
	ЗаполнитьЗначенияСвойств(СтруктЧислОбязОсм, ОбластьЧислОбязОсм.Параметры);	
	
	// 4
	ОбластьЧислПодлежОсм.Параметры.Всего			= СсылкаНаОбъект.РаботникиНаТяжРаботахВсего;
	ОбластьЧислПодлежОсм.Параметры.ВТЧЖенщин		= СсылкаНаОбъект.РаботникиНаТяжРаботахЖенщин;
	ОбластьЧислПодлежОсм.Параметры.РабДо18			= СсылкаНаОбъект.РаботникиНаТяжРаботахДо18Лет;
	ОбластьЧислПодлежОсм.Параметры.РабУтрТруд		= СсылкаНаОбъект.РаботникиНаТяжРаботахУстУтратаНетрудоспособности;
	ТабДокумент.Вывести(ОбластьЧислПодлежОсм);
	                                        	
	// Число завершивших осмотр
	// 5.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокНаПрохождение.Клиент) КАК Всего,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СписокНаПрохождение.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ВТЧЖенщин,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА СписокНаПрохождение.Возраст < 18
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК РабДо18,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ПрохожденияМедосмотра.СтойкаяУтратаТрудоспособности
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК РабУтрТруд
	|ИЗ
	|	СписокНаПрохождение КАК СписокНаПрохождение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ПО СписокНаПрохождение.Клиент = ПрохожденияМедосмотра.Клиент
	|			И (ПрохожденияМедосмотра.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1))";
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктЧислПрошОсм = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктПоказателей);
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктЧислПрошОсм, Выборка);
		ОбластьЧислПрошОсм.Параметры.Заполнить(Выборка);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьЧислПрошОсм);
	
	// Процент охвата
	// 6.
	ОбластьПроцОхвата = Макет.ПолучитьОбласть("ОбластьПроцОхвата");
	Для Каждого элПоказатель Из СтруктПоказателей Цикл
		Попытка
		ОбластьПроцОхвата.Параметры[элПоказатель.Ключ] = ?(СтруктЧислПрошОсм[элПоказатель.Ключ] = 0, 0, 
														 Формат(СтруктЧислПрошОсм[элПоказатель.Ключ]/СтруктЧислОбязОсм[элПоказатель.Ключ] * 100, "ЧДЦ=2"));
		Исключение КонецПопытки;
	КонецЦикла;	
	ТабДокумент.Вывести(ОбластьПроцОхвата);
	
	// Список прошедших
	// 7.
	НачавшиеПроходитьМедосмотр = Новый Массив;
	
	ОбластьСписПрошШапка		= Макет.ПолучитьОбласть("ОбластьСписПрошШапка");
	ОбластьСписПрошСтрока		= Макет.ПолучитьОбласть("ОбластьСписПрошСтрока");
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНаПрохождение.Клиент КАК Клиент,
	|	СписокНаПрохождение.Пол КАК Пол,
	|	СписокНаПрохождение.ДатаРождения КАК ДатаРождения,
	|	СписокНаПрохождение.Ссылка.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВыявленныеПротивопоказания.Противопоказание ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьПротивопоказания,
	|	СписокНаПрохождение.ЦехУчасток КАК ЦехУчасток,
	|	СписокНаПрохождение.ФИОКлиента КАК ФИОКлиента
	|ИЗ
	|	СписокНаПрохождение КАК СписокНаПрохождение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ПО (ПрохожденияМедосмотра.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1))
	|			И СписокНаПрохождение.Клиент = ПрохожденияМедосмотра.Клиент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыявленныеПротивопоказания КАК ВыявленныеПротивопоказания
	|		ПО СписокНаПрохождение.Клиент = ВыявленныеПротивопоказания.Клиент
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНаПрохождение.Клиент,
	|	СписокНаПрохождение.Пол,
	|	СписокНаПрохождение.ДатаРождения,
	|	СписокНаПрохождение.Ссылка.Контрагент,
	|	СписокНаПрохождение.ЦехУчасток,
	|	СписокНаПрохождение.ФИОКлиента";
	Выборка = Запрос.Выполнить().Выбрать();
	Сч = 1;
	ТабДокумент.Вывести(ОбластьСписПрошШапка);
	Пока Выборка.Следующий() Цикл
		
		ОбластьСписПрошСтрока.Параметры.Номер = Сч;
		ОбластьСписПрошСтрока.Параметры.ФИО = ДанныеРаботника(Выборка.Клиент, "ФИОКлиента", Выборка.ФИОКлиента);
		ОбластьСписПрошСтрока.Параметры.Пол = ПредставлениеПолаДляЗаклАкта(Выборка.Пол);
		ОбластьСписПрошСтрока.Параметры.ДатаР = Формат(Выборка.ДатаРождения, "ДФ=dd.MM.yyyy");
		ОбластьСписПрошСтрока.Параметры.Подразделение = ДанныеРаботника(Выборка.Клиент, "ЦехУчасток", Выборка.ЦехУчасток);
		ОбластьСписПрошСтрока.Параметры.Противопоказания = ?(Выборка.ЕстьПротивопоказания, НСтр("ru='Выявлены'"), НСтр("ru='Не выявлены'"));
		ТабДокумент.Вывести(ОбластьСписПрошСтрока);
		
		Сч = Сч + 1;
		
		НачавшиеПроходитьМедосмотр.Добавить(Выборка.Клиент);
		
	КонецЦикла;	
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	
	// Число не завершивших
	// 8,9.
	ОбластьЧислНеЗаверш		= Макет.ПолучитьОбласть("ОбластьЧислНеЗаверш");
	ОбластьСписокНеЗавершШапка		= Макет.ПолучитьОбласть("ОбластьСписокНеЗавершШапка");
	ОбластьСписокНеЗавершСтрока		= Макет.ПолучитьОбласть("ОбластьСписокНеЗавершСтрока");
	
	ВыборкиДанных = ПолучитьДанныеОНезавершившихМедосмотр(МВТ);
	ВыборкаЧислНеЗаверш = ВыборкиДанных.ВыборкаЧислНеЗаверш;
	ВыборкаСписокНеЗаверш = ВыборкиДанных.ВыборкаСписокНеЗаверш;
	
	Если ВыборкаЧислНеЗаверш.Следующий() Тогда
		ОбластьЧислНеЗаверш.Параметры.Заполнить(ВыборкаЧислНеЗаверш);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьЧислНеЗаверш);
	
	ТабДокумент.Вывести(ОбластьСписокНеЗавершШапка);
	Сч = 1;
	Пока ВыборкаСписокНеЗаверш.Следующий() Цикл
		
		ОбластьСписокНеЗавершСтрока.Параметры.Номер = Сч;
		ОбластьСписокНеЗавершСтрока.Параметры.ФИО = ДанныеРаботника(ВыборкаСписокНеЗаверш.Клиент, "ФИОКлиента", ВыборкаСписокНеЗаверш.ФИОКлиента);
		ОбластьСписокНеЗавершСтрока.Параметры.Пол = ПредставлениеПолаДляЗаклАкта(ВыборкаСписокНеЗаверш.Пол);
		ОбластьСписокНеЗавершСтрока.Параметры.Возраст = ВыборкаСписокНеЗаверш.Возраст;
		
		ОбластьСписокНеЗавершСтрока.Параметры.Подразделение = ДанныеРаботника(ВыборкаСписокНеЗаверш.Клиент, "ЦехУчасток", ВыборкаСписокНеЗаверш.ЦехУчасток);
		ТабДокумент.Вывести(ОбластьСписокНеЗавершСтрока);
		
		Сч = Сч + 1;
		
		НачавшиеПроходитьМедосмотр.Добавить(ВыборкаСписокНеЗаверш.Клиент);
		
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	
	// Не прошедшие
	// 10, 11.
	ОбластьЧислНеПрошед			= Макет.ПолучитьОбласть("ОбластьЧислНеПрошед");
	ОбластьСписокНеПрошШапка	= Макет.ПолучитьОбласть("ОбластьСписокНеПрошШапка");
	ОбластьСписокНеПрошСтрока	= Макет.ПолучитьОбласть("ОбластьСписокНеПрошСтрока");

	ВыборкиДанных = ПолучитьДанныеОНепрошедшихМедосмотр(МВТ, НачавшиеПроходитьМедосмотр);

	ВыборкаСписокНеПрошед = ВыборкиДанных.ВыборкаСписокНеПрошед;
	ВыборкаЧислНеПрошед	  = ВыборкиДанных.ВыборкаЧислНеПрошед;
	
	Если ВыборкаЧислНеПрошед.Следующий() Тогда
		ОбластьЧислНеПрошед.Параметры.Заполнить(ВыборкаЧислНеПрошед);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьЧислНеПрошед);
	
	ТабДокумент.Вывести(ОбластьСписокНеПрошШапка);
	Сч = 1;
	Пока ВыборкаСписокНеПрошед.Следующий() Цикл
		
		ОбластьСписокНеПрошСтрока.Параметры.Номер = Сч;
		ОбластьСписокНеПрошСтрока.Параметры.ФИО = ДанныеРаботника(ВыборкаСписокНеПрошед.Клиент, "ФИОКлиента", ВыборкаСписокНеПрошед.ФИОКлиента);
		ОбластьСписокНеПрошСтрока.Параметры.Пол = ПредставлениеПолаДляЗаклАкта(ВыборкаСписокНеПрошед.Пол);
		ОбластьСписокНеПрошСтрока.Параметры.Возраст = ВыборкаСписокНеПрошед.Возраст;
		
		ОбластьСписокНеПрошСтрока.Параметры.Подразделение = ДанныеРаботника(ВыборкаСписокНеПрошед.Клиент, "ЦехУчасток", ВыборкаСписокНеПрошед.ЦехУчасток);
		ТабДокумент.Вывести(ОбластьСписокНеПрошСтрока);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	
	// Заключение по результатам данного периодического медицинского осмотра (обследования)
	// 12.
	ОбластьЗаключПоРез = Макет.ПолучитьОбласть("ОбластьЗаключПоРез");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрохожденияМедосмотра.Клиент) КАК НеИмПрот
	|ИЗ
	|	ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыявленныеПротивопоказания КАК ВыявленныеПротивопоказания
	|		ПО ПрохожденияМедосмотра.Клиент = ВыявленныеПротивопоказания.Клиент
	|ГДЕ
	|	ВыявленныеПротивопоказания.Клиент ЕСТЬ NULL 
	|	И ПрохожденияМедосмотра.ДатаЗавершения <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|ИМЕЮЩИЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрохожденияМедосмотра.Клиент) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК ИмПрот,
	|	СУММА(ВЫБОР
	|			КОГДА КлиентыСПротивопоказаниями.Клиент.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИмПротЖ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫРАЗИТЬ(ВыявленныеПротивопоказания.Клиент КАК Справочник.Клиенты) КАК Клиент
	|	ИЗ
	|		ВыявленныеПротивопоказания КАК ВыявленныеПротивопоказания
	|	) КАК КлиентыСПротивопоказаниями
	|ИМЕЮЩИЕ СУММА(1) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК ИмВремПрот,
	|	СУММА(ВЫБОР
	|			КОГДА КлиентыСВремПротивопоказаниями.Клиент.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИмВремПротЖ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫРАЗИТЬ(ВыявленныеПротивопоказания.Клиент КАК Справочник.Клиенты) КАК Клиент
	|	ИЗ
	|		ВыявленныеПротивопоказания КАК ВыявленныеПротивопоказания
	|	ГДЕ
	|		ВыявленныеПротивопоказания.ПрофнепригодностьВременная = ЗНАЧЕНИЕ(Перечисление.ХарактерПрофнепригодности.Временная)) КАК КлиентыСВремПротивопоказаниями
	|ИМЕЮЩИЕ СУММА(1) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК ИмПостПрот,
	|	СУММА(ВЫБОР
	|			КОГДА КлиентыСПостПротивопоказаниями.Клиент.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИмПостПротЖ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫРАЗИТЬ(ВыявленныеПротивопоказания.Клиент КАК Справочник.Клиенты) КАК Клиент
	|	ИЗ
	|		ВыявленныеПротивопоказания КАК ВыявленныеПротивопоказания
	|	ГДЕ
	|		НЕ ВыявленныеПротивопоказания.ПрофнепригодностьВременная = ЗНАЧЕНИЕ(Перечисление.ХарактерПрофнепригодности.Временная)) КАК КлиентыСПостПротивопоказаниями
	|ИМЕЮЩИЕ СУММА(1) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК ИмПодНаПрофЗаб,
	|	СУММА(ВЫБОР
	|			КОГДА КлиентыСПодозрениемНаПрофЗаболевание.Клиент.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИмПодНаПрофЗабЖ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫРАЗИТЬ(ПрохожденияМедосмотра.Клиент КАК Справочник.Клиенты) КАК Клиент
	|	ИЗ
	|		ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Диагнозы КАК Диагнозы
	|			ПО ПрохожденияМедосмотра.Ссылка = Диагнозы.Регистратор.ПервичныйПрием
	|				И (Диагнозы.Профессиональное)
	|				И (Диагнозы.Классификация1 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.Предварительный))) КАК КлиентыСПодозрениемНаПрофЗаболевание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрохожденияМедосмотра.Клиент КАК Клиент,
	|	Диагнозы.Диагноз
	|ИЗ
	|	ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Диагнозы КАК Диагнозы
	|		ПО ПрохожденияМедосмотра.Ссылка = Диагнозы.Регистратор.ПервичныйПрием
	|			И (Диагнозы.Профессиональное)
	|			И (Диагнозы.Классификация1 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.Предварительный))
	|ИТОГИ ПО
	|	Клиент";
	Результат = Запрос.ВыполнитьПакет();
	
	// Нет противопоказаний
	ВыборкаБезПротивопок = Результат[0].Выбрать();
	Если ВыборкаБезПротивопок.Следующий() Тогда
		ОбластьЗаключПоРез.Параметры.Заполнить(ВыборкаБезПротивопок);
	КонецЕсли;
	
	// Всего имеет
	ВыборкаСПротивопок = Результат[1].Выбрать();
	Если ВыборкаСПротивопок.Следующий() Тогда
		Значение = ВыборкаСПротивопок.ИмПрот;
	Иначе
		Значение = 0;
	КонецЕсли;
	ОбластьЗаключПоРез.Параметры.ИмПрот = Значение;
	
	// Временные
	ВыборкаСВремПротивопок = Результат[2].Выбрать();
	Если ВыборкаСВремПротивопок.Следующий() Тогда
		Значение = ВыборкаСВремПротивопок.ИмВремПрот;
	Иначе
		Значение = 0;
	КонецЕсли;
	ОбластьЗаключПоРез.Параметры.ИмВремПрот = Значение;
	
	// Постоянные
	ВыборкаСПостПротивопок = Результат[3].Выбрать();
	Если ВыборкаСПостПротивопок.Следующий() Тогда
		Значение = ВыборкаСПостПротивопок.ИмПостПрот;
	Иначе
		Значение = 0;
	КонецЕсли;
	ОбластьЗаключПоРез.Параметры.ИмПостПрот = Значение;
	
	// С подозрением на проф заболевание
	ВыборкаСПодозрНаПрофЗабол = Результат[4].Выбрать();
	Если ВыборкаСПодозрНаПрофЗабол.Следующий() Тогда
		ОбластьЗаключПоРез.Параметры.Заполнить(ВыборкаСПодозрНаПрофЗабол);
	КонецЕсли;
	
	// Список лиц с подозрением на проф заболевание
	ВыборкаСписокПодозрНаПрофЗабол = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Количество лиц, нуждающихся в лечении и наблюдении
	ВыборкаНаправления = ПолучитьДанныеСводнойТаблицы2(СсылкаНаОбъект, МВТ).ВыборкаКлиентыСводнойТаблицы;
	НаправленияИтоги = Новый Структура("НуждДопОбсл, НуждОбслПроф,НуждОбслАмб,НуждОбслСтац,НуждСанКур,НуждДисп",0,0,0,0,0,0);
	Пока ВыборкаНаправления.Следующий() Цикл
		Если ВыборкаНаправления.НуждаетсяВПроведенииДопОбследования Тогда
			НаправленияИтоги.НуждДопОбсл = НаправленияИтоги.НуждДопОбсл + 1;
		КонецЕсли;
		Если ВыборкаНаправления.НуждаетсяВОбследованииВЦентреПрофпатологии Тогда
			НаправленияИтоги.НуждОбслПроф = НаправленияИтоги.НуждОбслПроф + 1;
		КонецЕсли;
		Если ВыборкаНаправления.НуждаетсяВАмбулаторномОбследованииИЛечении Тогда
			НаправленияИтоги.НуждОбслАмб = НаправленияИтоги.НуждОбслАмб + 1;
		КонецЕсли;
		Если ВыборкаНаправления.НуждаетсяВСтационарномОбследованииИЛечении Тогда
			НаправленияИтоги.НуждОбслСтац = НаправленияИтоги.НуждОбслСтац + 1;
		КонецЕсли;
		Если ВыборкаНаправления.НуждаетсяВСанаторноКурортномЛечении Тогда
			НаправленияИтоги.НуждСанКур = НаправленияИтоги.НуждСанКур + 1;
		КонецЕсли;
		Если ВыборкаНаправления.НуждаетсяВДиспансерномНаблюдении Тогда
			НаправленияИтоги.НуждДисп = НаправленияИтоги.НуждДисп + 1;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьЗаключПоРез.Параметры.Заполнить(НаправленияИтоги);
	ТабДокумент.Вывести(ОбластьЗаключПоРез);
		
	// Список лиц с установленным предварительным диагнозом профессионального заболевания
	// 13, 14, 15.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрохожденияМедосмотра.Клиент КАК Клиент,
	|	Диагнозы.Диагноз КАК Диагноз,
	|	Диагнозы.ВыявленВпервые КАК ВыявленВпервые,
	|	ПОДСТРОКА(Диагнозы.Детализация,1,200) КАК Детализация,
	|	Диагнозы.Классификация1 КАК Классификация1,
	|	Диагнозы.Классификация2 КАК Классификация2,
	|	Диагнозы.Профессиональное КАК Профессиональное
	|ПОМЕСТИТЬ Диагнозы
	|ИЗ
	|	РегистрСведений.Диагнозы КАК Диагнозы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ПО Диагнозы.Регистратор.ПервичныйПрием = ПрохожденияМедосмотра.Ссылка
	|ОБЪЕДИНИТЬ		
	|		
	|ВЫБРАТЬ 
	|	ВыявленныеПротивопоказания.Клиент,
	|	ВыявленныеПротивопоказания.Диагноз,
	|	ВыявленныеПротивопоказания.ВыявленВпервые,
	|	ПОДСТРОКА(ВыявленныеПротивопоказания.Примечание,1,200),
	|	ВыявленныеПротивопоказания.УточненностьДиагноза,
	|	ВыявленныеПротивопоказания.ХарактерЗаболевания,
	|	ВыявленныеПротивопоказания.Профессиональное
	|
	|ИЗ ВыявленныеПротивопоказания КАК ВыявленныеПротивопоказания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Диагнозы.Клиент КАК Клиент,
	|	Диагнозы.Клиент.Пол КАК Пол,
	|	ВредныеФакторыУсловияРаботКлиентов.Фактор КАК ВредныйФактор,
	//|	ВредныеФакторыУсловияРаботКлиентов.Фактор.НомерППиПриказа_302н КАК НомерППиПриказа_302н,
	|	ВредныеФакторыУсловияРаботКлиентов.Фактор.НомерПП КАК НомерПП
	|ИЗ
	|	Диагнозы КАК Диагнозы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ВредныеФакторыУсловияРаботКлиентов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|			ПО ВредныеФакторыУсловияРаботКлиентов.Ссылка = ПрохожденияМедосмотра.Ссылка
	|		ПО Диагнозы.Клиент = ВредныеФакторыУсловияРаботКлиентов.Ссылка.Клиент
	|			И (ВредныеФакторыУсловияРаботКлиентов.Фактор.ВидПеречняДляМедОсмотра = ЗНАЧЕНИЕ(Перечисление.ВидыПеречняДляМедОсмотров.Фактор))
	|ГДЕ
	|	Диагнозы.Профессиональное
	|	И Диагнозы.Классификация1 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.Предварительный)
	|ИТОГИ ПО
	|	Клиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Диагнозы.Диагноз КАК Диагноз,
	|	Диагнозы.Диагноз.КодДиагноза КАК КодДиагноза,
	|	Диагнозы.Диагноз.Наименование КАК НаименованиеДиагноза,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Диагнозы.Клиент) КАК КоличРаб
	|ИЗ
	|	Диагнозы КАК Диагнозы
	|ГДЕ
	|	Диагнозы.ВыявленВпервые
	|	И Диагнозы.Классификация2 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.ХроническоеВпервыеВыявленное)
	|
	|СГРУППИРОВАТЬ ПО
	|	Диагнозы.Диагноз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Диагнозы.Диагноз КАК Диагноз,
	|	Диагнозы.Диагноз.КодДиагноза КАК КодДиагноза,
	|	Диагнозы.Диагноз.Наименование КАК НаименованиеДиагноза,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Диагнозы.Клиент) КАК КоличРаб
	|ИЗ
	|	Диагнозы КАК Диагнозы
	|ГДЕ
	|	Диагнозы.ВыявленВпервые
	|	И Диагнозы.Классификация2 <> ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.ХроническоеВпервыеВыявленное)
	|
	|СГРУППИРОВАТЬ ПО
	|	Диагнозы.Диагноз";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// 13
	ОбластьСписокУстДиагШапка = Макет.ПолучитьОбласть("ОбластьСписокУстДиагШапка");
	ТабДокумент.Вывести(ОбластьСписокУстДиагШапка);
	
	ВыборкаСписокУстДиаг = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Сч = 1;
	Пока ВыборкаСписокУстДиаг.Следующий() Цикл
		
		ОбластьСписокУстДиагСтрока = Макет.ПолучитьОбласть("ОбластьСписокУстДиагСтрока");
		ОбластьСписокУстДиагСтрока.Параметры.Номер = Сч;
		СтрокаКлиента = СсылкаНаОбъект.Клиенты.Найти(ВыборкаСписокУстДиаг.Клиент);
		Если СтрокаКлиента <> Неопределено Тогда
			ФИОКлиента = СтрокаКлиента.ФИОКлиента;
			ЦехУчасток = СтрокаКлиента.ЦехУчасток;
			Профессия = СтрокаКлиента.Профессия;
		Иначе
			ФИОКлиента = Неопределено;
			ЦехУчасток = Неопределено;
			Профессия = Неопределено;
		КонецЕсли;	
		
		ОбластьСписокУстДиагСтрока.Параметры.ФИО = ДанныеРаботника(ВыборкаСписокУстДиаг.Клиент, "ФИОКлиента", ФИОКлиента); 
		ОбластьСписокУстДиагСтрока.Параметры.Подразделение = ДанныеРаботника(ВыборкаСписокУстДиаг.Клиент, "ЦехУчасток", ЦехУчасток);
		ОбластьСписокУстДиагСтрока.Параметры.Профессия = ДанныеРаботника(ВыборкаСписокУстДиаг.Клиент, "Профессия", Профессия);
		ОбластьСписокУстДиагСтрока.Параметры.Пол = ПредставлениеПолаДляЗаклАкта(ВыборкаСписокУстДиаг.Пол);
		ОбластьСписокУстДиагСтрока.Параметры.ДатаР = Формат(ВыборкаСписокУстДиаг.Клиент.ДатаРождения, "ДФ=dd.MM.yyyy");
		
		ПроизвФакторы = "";
		ВыборкаПроизвФакторы = ВыборкаСписокУстДиаг.Выбрать();
		
		Пока ВыборкаПроизвФакторы.Следующий() Цикл		
			ПроизвФакторы = ПроизвФакторы + ВыборкаПроизвФакторы[РеквизитНомерППиПриказа] + " " + ВыборкаПроизвФакторы.ВредныйФактор + Символы.ПС;			
		КонецЦикла;
		ОбластьСписокУстДиагСтрока.Параметры.ПроизвФакторы = Лев(ПроизвФакторы, СтрДлина(ПроизвФакторы) - 1);
		ТабДокумент.Вывести(ОбластьСписокУстДиагСтрока);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	
	// 14
	ОбластьВыявлХронШапка = Макет.ПолучитьОбласть("ОбластьВыявлХронШапка");
	ТабДокумент.Вывести(ОбластьВыявлХронШапка);
	
	ВыборкаДиагХронич = Результат[2].Выбрать();
	Сч = 1;
	Пока ВыборкаДиагХронич.Следующий() Цикл
		
		ОбластьВыявлХронСтрока = Макет.ПолучитьОбласть("ОбластьВыявлХронСтрока");
		ОбластьВыявлХронСтрока.Параметры.Номер = Сч;
		ОбластьВыявлХронСтрока.Параметры.КодМКБ = ВыборкаДиагХронич.КодДиагноза + " " + ВыборкаДиагХронич.НаименованиеДиагноза;
		ОбластьВыявлХронСтрока.Параметры.КоличРаб = ВыборкаДиагХронич.КоличРаб;
		ТабДокумент.Вывести(ОбластьВыявлХронСтрока);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
		
	// 15, 16
	// Отравления: T36-T50, T61-T61.2, T96-T97. Инфекционные: A00-B99, J00-J06, J10-J18, J20-J22
	ДиагнозыИнфекция = Новый Массив;
	ДиагнозыИнфекция.Добавить("T36-T50");
	ДиагнозыИнфекция.Добавить("T61-T61.2");
	ДиагнозыИнфекция.Добавить("T96-T97");
	ДиагнозыИнфекция.Добавить("A00-B99");
	ДиагнозыИнфекция.Добавить("J00-J06");
	ДиагнозыИнфекция.Добавить("J10-J18");
	ДиагнозыИнфекция.Добавить("J20-J22");
	
	ВыборкаДиагПроф = Результат[3].Выбрать();
	
	// 15. Профессиональные
	ОбластьВыявлПрофШапка = Макет.ПолучитьОбласть("ОбластьВыявлПрофШапка");
	ТабДокумент.Вывести(ОбластьВыявлПрофШапка);
	
	ОбластьВыявлПрофСтрока = Макет.ПолучитьОбласть("ОбластьВыявлПрофСтрока");
	
	Сч = 1;
	Пока ВыборкаДиагПроф.Следующий() Цикл
		
		Если Не МедицинскаяДеятельность.ДиагнозВДиапазонеКодов(ВыборкаДиагПроф.Диагноз, ДиагнозыИнфекция) Тогда
			ОбластьВыявлПрофСтрока.Параметры.Номер = Сч;
			ОбластьВыявлПрофСтрока.Параметры.КодМКБ = ВыборкаДиагПроф.КодДиагноза + " " + ВыборкаДиагПроф.НаименованиеДиагноза;
			ОбластьВыявлПрофСтрока.Параметры.КоличРаб = ВыборкаДиагПроф.КоличРаб;
			ТабДокумент.Вывести(ОбластьВыявлПрофСтрока);
			
			Сч = Сч + 1;
		КонецЕсли;		
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	
	// 16. Инфекции и отравления
	ВыборкаДиагПроф.Сбросить();
	
	ОбластьВыявлИнфекцШапка = Макет.ПолучитьОбласть("ОбластьВыявлИнфекцШапка");
	ТабДокумент.Вывести(ОбластьВыявлИнфекцШапка);
	
	ОбластьВыявлИнфекцСтрока = Макет.ПолучитьОбласть("ОбластьВыявлИнфекцСтрока");
	
	Сч = 1;
	Пока ВыборкаДиагПроф.Следующий() Цикл
		
		Если МедицинскаяДеятельность.ДиагнозВДиапазонеКодов(ВыборкаДиагПроф.Диагноз, ДиагнозыИнфекция) Тогда
			ОбластьВыявлИнфекцСтрока.Параметры.Номер = Сч;
			ОбластьВыявлИнфекцСтрока.Параметры.КодМКБ = ВыборкаДиагПроф.КодДиагноза + " " + ВыборкаДиагПроф.НаименованиеДиагноза;
			ОбластьВыявлИнфекцСтрока.Параметры.КоличРаб = ВыборкаДиагПроф.КоличРаб;
			ТабДокумент.Вывести(ОбластьВыявлИнфекцСтрока);
			
			Сч = Сч + 1;
		КонецЕсли;		
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	
	// Рекомендации
	// 17, 18.
	ОбластьРезРеком = Макет.ПолучитьОбласть("ОбластьРезРеком");
	ОбластьРеком	= Макет.ПолучитьОбласть("ОбластьРеком");
	
	ОбластьРезРеком.Параметры.РезультатВыполненияРекомендацийПредАкта = СсылкаНаОбъект.РезультатВыполненияРекомендацийПредАкта;
	ОбластьРеком.Параметры.РекомендацииПоКомплексуОздоровительныхМероприятий = СсылкаНаОбъект.РекомендацииПоКомплексуОздоровительныхМероприятий;
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДатаПредыдущегоЗаключительногоАкта) Тогда
		ОбластьРезРеком.Параметры.ДатаПредыдущегоЗаключительногоАкта = Формат(СсылкаНаОбъект.ДатаПредыдущегоЗаключительногоАкта, "ДЛФ=DD");
	Иначе
		ОбластьРезРеком.Параметры.ДатаПредыдущегоЗаключительногоАкта = "«___» __________ 20___г.";
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьРезРеком);
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	ТабДокумент.Вывести(ОбластьРеком);
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	
	// Подвал
	Если Не СохранениеЭМД Тогда
		Если ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК()
			И СсылкаНаОбъект.ПодписанЭП
		Тогда
			ВывестиБлокиЭЦП(СсылкаНаОбъект, ТабДокумент, Макет);
		Иначе
			ВывестиПодвал(СсылкаНаОбъект, Макет, ТабДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТабДокумент;
		
КонецФункции

Процедура ВывестиБлокиЭЦП(СсылкаНаОбъект, ТабДокумент, Макет)
	
	ТабДокЭЦП = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИПодписиЭМД.РольПодписи КАК РольПодписи,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|		ПО (РолиИПодписиЭМД.Документ = &Документ)
		|			И (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
		|			И (РолиИПодписиЭМД.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				ИЛИ РолиИПодписиЭМД.Пользователь = ЭлектронныеПодписи.УстановившийПодпись)";
	
	Запрос.УстановитьПараметр("Документ", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеПодписиПредседателя = Неопределено;
	ДанныеПодписиМО = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.РольПодписи = Перечисления.РолиПодписей.РольПредседательМедкомиссии() Тогда // Председатель
			ДанныеПодписиПредседателя = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(Выборка.Сертификат, СсылкаНаОбъект, Выборка.ДатаПодписи);
		ИначеЕсли Выборка.РольПодписи = Перечисления.РолиПодписей.МедицинскаяОрганизация Тогда
			ДанныеПодписиМО = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(Выборка.Сертификат, СсылкаНаОбъект, Выборка.ДатаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	ОбластьЭЦП = Макет.ПолучитьОбласть("ПодписиЭЦП|ЭЦП");
	
	Если ДанныеПодписиПредседателя <> Неопределено Тогда
		ТабДокЭЦП.Присоединить(Макет.ПолучитьОбласть("ПодписиЭЦП|ПодписьПредседателя"));
		
		ЗаполнитьЗначенияСвойств(ОбластьЭЦП.Параметры, ДанныеПодписиПредседателя);
		ТабДокЭЦП.Присоединить(ОбластьЭЦП);
		
		ТабДокЭЦП.Присоединить(Макет.ПолучитьОбласть("ПодписиЭЦП|ПустаяКолонка"));
	КонецЕсли;
	
	Если ДанныеПодписиМО <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбластьЭЦП.Параметры, ДанныеПодписиМО);
		ТабДокЭЦП.Присоединить(ОбластьЭЦП);
	КонецЕсли;
	
	ТабДокумент.Вывести(ТабДокЭЦП);
	
КонецПроцедуры

Процедура ВывестиПодвал(СсылкаНаОбъект, Макет, ТабДокумент)
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ОбластьПодвал");
	ПредставлениеПредседатель = ОбщегоНазначения.ФИОФизЛица(СсылкаНаОбъект.ПредседательМедКомиссии);
	ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ПредставлениеПредседатель, СсылкаНаОбъект.ДолжностьПредседателяМедКомиссии,,Истина);
	ОбластьПодвал.Параметры.Председатель = ПредставлениеПредседатель;
	ТабДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Функция ПечатьСметаМедицинскогоОсмотра(СсылкаНаОбъект, ИспользоватьНаименованиеДляПечатиДействийМО = Ложь, СметаБезСсылки = Ложь, ДанныеСметы = Неопределено) Экспорт
	
	Если Ложь Тогда СсылкаНаОбъект = Документы.СписокНаПрохождениеМедосмотра.ПустаяСсылка() КонецЕсли;
	
	ВалютаДокумента = УправлениеНастройками.КраткоеНаименованиеОсновнойВалюты();
	ВалютаДокументаСсылка = УправлениеНастройками.ОсновнаяВалюта();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокНаПрохождениеМедосмотра_СметаМедОсмотра";
	Макет = ПолучитьМакет("Смета");
	
	ЧислоРядовУслуг = 3;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ОбластьПустаяСтрока");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
	ОбластьСтрокаПациент = Макет.ПолучитьОбласть("ОбластьСтрокаПациент");
	ОбластьИтогоПоПациенту = Макет.ПолучитьОбласть("ОбластьИтогоПоПациенту");
	ОбластьСтрокаОбследование = Макет.ПолучитьОбласть("ОбластьСтрокаОбследование|ОбластьОбследование");
	
	ТабДокумент.Вывести(ОбластьШапка);
	ТабДокумент.Вывести(ОбластьПустаяСтрока);
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);

	Запрос = Новый Запрос;
	
	Если СметаБезСсылки Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДействий.Клиент КАК Клиент, 
		|	ТаблицаДействий.Наименование КАК Наименование,
		|	ТаблицаДействий.НаименованиеДляПечати КАК НаименованиеДляПечати,
		|	ТаблицаДействий.Цена КАК Цена
		|ПОМЕСТИТЬ ТаблицаДействий
		|ИЗ &ТаблицаДействий КАК ТаблицаДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаФакторов.Клиент КАК Клиент,
		|	ТаблицаФакторов.ВредныйФактор КАК ВредныйФактор,
		|	ТаблицаФакторов.НомерПП КАК НомерПП
		|ПОМЕСТИТЬ ТаблицаФакторов
		|ИЗ &ТаблицаФакторов КАК ТаблицаФакторов";
		
		Запрос.УстановитьПараметр("ТаблицаДействий", ДанныеСметы.ТаблицаДействий);
		Запрос.УстановитьПараметр("ТаблицаФакторов", ДанныеСметы.ТаблицаФакторов);
		
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаДействий.Клиент КАК Клиент,
		|	ТаблицаДействий.Наименование КАК Наименование,
		|	ТаблицаДействий.НаименованиеДляПечати КАК НаименованиеДляПечати,
		|	ТаблицаДействий.Цена КАК Цена
		|ИЗ ТаблицаДействий КАК ТаблицаДействий
		|ИТОГИ
		|	СУММА(Цена)
		|ПО
		|	Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаФакторов.Клиент КАК Клиент,
		|	ТаблицаФакторов.ВредныйФактор КАК ВредныйФактор,
		|	ПОДСТРОКА(ТаблицаФакторов.ВредныйФактор.НаименованиеПолное, 1, 1000) КАК ВредныйФакторНаименованиеПолное,
		|	ТаблицаФакторов.ВредныйФактор.Наименование КАК ВредныйФакторНаименование,
		|	ТаблицаФакторов.НомерПП КАК НомерПП
		|ИЗ ТаблицаФакторов КАК ТаблицаФакторов
		|ИТОГИ ПО
		|	Клиент";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СПМО.Клиент КАК Клиент,
		|	СПМО.Действие.Представление КАК Наименование,
		|	СПМО.Действие.НаименованиеДляПечати КАК НаименованиеДляПечати,
		|	СПМО.Цена КАК Цена
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра.Услуги КАК СПМО
		|ГДЕ
		|	СПМО.Ссылка = &СписокНаПрохождение
		|	И (&ВыводитьПриПечатиСметыДействияБезЦены = ИСТИНА
		|			ИЛИ СПМО.Цена <> 0)
		|ИТОГИ
		|	СУММА(Цена)
		|ПО
		|	Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СПМО.Клиент КАК Клиент,
		|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор КАК ВредныйФактор,
		|	ПОДСТРОКА(ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.НаименованиеПолное, 1, 1000) КАК ВредныйФакторНаименованиеПолное,
		|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.Наименование КАК ВредныйФакторНаименование,
		|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.НомерПП КАК НомерПП
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра.Клиенты КАК СПМО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
		|		ПО СПМО.Ссылка = ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.СписокНаПрохождениеМедосмотра
		|			И СПМО.Клиент = ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.Клиент
		|			И (ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	СПМО.Ссылка = &СписокНаПрохождение
		|УПОРЯДОЧИТЬ ПО
		|	НомерПП
		|ИТОГИ ПО
		|	Клиент";
	
		Запрос.УстановитьПараметр("СписокНаПрохождение", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("ВыводитьПриПечатиСметыДействияБезЦены", СсылкаНаОбъект.ВыводитьПриПечатиСметыДействияБезЦены);
		
	КонецЕсли;

	Результат = Запрос.ВыполнитьПакет();
	ВыборкаКлиенты = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВредныеФакторы = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	СуммаИтого = 0;
		
	Пока ВыборкаКлиенты.Следующий() Цикл
		
		Если СметаБезСсылки Тогда
			ДанныеКлиента = ДанныеСметы.ДанныеКлиентов.Получить(ВыборкаКлиенты.Клиент);
			
			ПациентФИО = "";
			ПациентДатаРождения = "";
			ПациентМестоРаботы = "";
			ПациентАдрес = ""; 
			
			Если ДанныеКлиента <> Неопределено Тогда
				ПациентФИО = ДанныеКлиента.ФИО;
				ПациентДатаРождения = ДанныеКлиента.ДатаРождения;
			КонецЕсли; 
		Иначе
			Результат = СсылкаНаОбъект.Клиенты.Найти(ВыборкаКлиенты.Клиент, "Клиент");
			ПациентФИО = ДанныеРаботника(ВыборкаКлиенты.Клиент, "ФИОКлиента",Результат.ФИОКлиента);
			ПациентАдрес = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(ВыборкаКлиенты.Клиент, Перечисления.ТипыКонтактнойИнформации.Адрес);
			Если Результат <> Неопределено Тогда
				Профессия = ДанныеРаботника(ВыборкаКлиенты.Клиент, "Профессия", Результат.Профессия);
				ПациентМестоРаботы =  ДанныеРаботника(ВыборкаКлиенты.Клиент, "МестоРаботы",СсылкаНаОбъект.МестоРаботы) 
									+ ?(ЗначениеЗаполнено(Профессия), " (" + Профессия + ")", "");
			Иначе
				ПациентМестоРаботы = Строка(ВыборкаКлиенты.Клиент.умцМестоРаботы) + ?(ЗначениеЗаполнено(ВыборкаКлиенты.Клиент.Профессия), " (" + ВыборкаКлиенты.Клиент.Профессия + ")", "");
			КонецЕсли;
			ПациентДатаРождения = ?(ВыборкаКлиенты.Клиент.ДатаРождения = Дата(1,1,1), "", Формат(ВыборкаКлиенты.Клиент.ДатаРождения, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ПациентИнфо = ПациентФИО +
			?(ЗначениеЗаполнено(ПациентМестоРаботы), ", " + ПациентМестоРаботы, "") +
			?(ЗначениеЗаполнено(ПациентДатаРождения), ", " + ПациентДатаРождения, "") +
			?(ЗначениеЗаполнено(ПациентАдрес), ", " + ПациентАдрес, ""); 
		
		// Вредные факторы
		ПациентФакторы = "";
		ВыборкаВредныеФакторы.Сбросить();
		Если ВыборкаВредныеФакторы.НайтиСледующий(Новый Структура("Клиент", ВыборкаКлиенты.Клиент)) Тогда
			Выборка = ВыборкаВредныеФакторы.Выбрать();
			Пока Выборка.Следующий() Цикл
				ВредныйФакторНазвание = СокрЛП(ОбщегоНазначенияБИТКлиентСервер.ЗаполненноеЗначение(Выборка.ВредныйФакторНаименованиеПолное, Выборка.ВредныйФакторНаименование));
				ВредныйФакторНазвание = СтрЗаменить(ВредныйФакторНазвание, Символы.ВК, "");
				КонкатенацияСтрок(ПациентФакторы, СокрЛП(СокрЛП(Выборка.НомерПП) + Символы.НПП + ВредныйФакторНазвание), ", ");
			КонецЦикла;
		КонецЕсли;
		
		ОбластьСтрокаПациент.Параметры.ПациентИнфо = ПациентИнфо;
		ОбластьСтрокаПациент.Параметры.Клиент = ВыборкаКлиенты.Клиент;
		ОбластьСтрокаПациент.Параметры.ВредныеФакторы = ПациентФакторы;
		
		ТабДокумент.Вывести(ОбластьСтрокаПациент);
		
		ВыборкаОбследования = ВыборкаКлиенты.Выбрать();
		
		УслугВРяду = ВыборкаОбследования.Количество() / ЧислоРядовУслуг;
		УслугВРяду = ?(УслугВРяду = Цел(УслугВРяду), УслугВРяду, Цел(УслугВРяду) + 1);
		
		НомерУслугиВРяду = 1;
		ОбластьРяд = Новый ТабличныйДокумент;
		Пока ВыборкаОбследования.Следующий() Цикл
			
			Если ИспользоватьНаименованиеДляПечатиДействийМО Тогда
				// Для расширений конфигурации
				ОбластьСтрокаОбследование.Параметры.Обследование = ?(ЗначениеЗаполнено(ВыборкаОбследования.НаименованиеДляПечати),
																	 ВыборкаОбследования.НаименованиеДляПечати,
																	 ВыборкаОбследования.Наименование);
			Иначе
				// Основной режим с внутренними (короткими, более близкими к форме прайса) наименованиями
				ОбластьСтрокаОбследование.Параметры.Обследование = ВыборкаОбследования.Наименование;
			КонецЕсли;
			
			ОбластьСтрокаОбследование.Параметры.Цена = ОбщегоНазначенияКлиентСервер.ФорматСумм(ВыборкаОбследования.Цена);
			ОбластьРяд.Вывести(ОбластьСтрокаОбследование);
			НомерУслугиВРяду = НомерУслугиВРяду + 1;
			
			Если НомерУслугиВРяду > УслугВРяду Тогда
				НомерУслугиВРяду = 1;
				ТабДокумент.Присоединить(ОбластьРяд);
				ОбластьРяд = Новый ТабличныйДокумент;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыборкаОбследования.Количество() <> 0 Тогда
			ТабДокумент.Присоединить(ОбластьРяд);
		КонецЕсли;
		
		ОбластьИтогоПоПациенту.Параметры.ПациентФИО = ПациентФИО;
		ОбластьИтогоПоПациенту.Параметры.СуммаИтого = ОбщегоНазначенияКлиентСервер.ФорматСумм(ВыборкаКлиенты.Цена, ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьИтогоПоПациенту);
		
		СуммаИтого = СуммаИтого + ВыборкаКлиенты.Цена;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
    ОбластьМакета.Параметры.ИтогоРаботников = ВыборкаКлиенты.Количество();
	ОбластьМакета.Параметры.ИтогоСумма	= ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаИтого,ВалютаДокумента)
										+ "(" + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого, ВалютаДокументаСсылка) + ")";
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.НижнийКолонтитул.Выводить = Истина;
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСметаМедицинскогоОсмотраПоУслугам(СсылкаНаОбъект, ИспользоватьНименованиеДляПечатиДействийМО = Ложь)

	Если Ложь Тогда СсылкаНаОбъект = Документы.СписокНаПрохождениеМедосмотра.ПустаяСсылка() КонецЕсли;
	
	ВалютаДокумента = УправлениеНастройками.КраткоеНаименованиеОсновнойВалюты();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокНаПрохождениеМедосмотра_СметаМедОсмотра_ПоУслугам";
	Макет = ПолучитьМакет("СметаПоУслугам");
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ОбластьПустаяСтрока");  
	ОбластьШапкаТаблицыПоУслугам = Макет.ПолучитьОбласть("ОбластьШапкаТаблицыПоУслугам"); 
	ОбластьСтрокаНоменклатура = Макет.ПолучитьОбласть("ОбластьСтрокаНоменклатура"); 
	ОбластьИтогоПоУслугам = Макет.ПолучитьОбласть("ОбластьИтогоПоУслугам");

	ТабДокумент.Вывести(ОбластьШапка);
	ТабДокумент.Вывести(ОбластьПустаяСтрока);  
	ТабДокумент.Вывести(ОбластьШапкаТаблицыПоУслугам);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СПМО.Действие.Представление КАК Наименование,
	|	СПМО.Цена КАК Цена,
	|	КОЛИЧЕСТВО(СПМО.Цена) КАК Количество
	|ИЗ
	|	Документ.СписокНаПрохождениеМедосмотра.Услуги КАК СПМО
	|ГДЕ
	|	СПМО.Ссылка = &СписокНаПрохождение
	|	И (&ВыводитьПриПечатиСметыДействияБезЦены = ИСТИНА
	|			ИЛИ СПМО.Цена <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	СПМО.Действие,
	|	СПМО.Цена,
	|	СПМО.Действие.Представление";
	
	Запрос.УстановитьПараметр("СписокНаПрохождение", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ВыводитьПриПечатиСметыДействияБезЦены", СсылкаНаОбъект.ВыводитьПриПечатиСметыДействияБезЦены);
	
	Результат = Запрос.Выполнить();
	ВыборкаУслуги = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	ИтогПоУслугам = 0;
	Пока ВыборкаУслуги.Следующий() Цикл 
		НаименованиеУслуги = ВыборкаУслуги.Наименование;
		КоличествоУслуг = ВыборкаУслуги.Количество;
		ЦенаУслуги = ВыборкаУслуги.Цена;   
		ОбластьСтрокаНоменклатура.Параметры.НаименованиеУслуги = НаименованиеУслуги; 
		ОбластьСтрокаНоменклатура.Параметры.Количество = КоличествоУслуг; 
		ОбластьСтрокаНоменклатура.Параметры.Цена = ОбщегоНазначенияКлиентСервер.ФорматСумм(ЦенаУслуги);   
		ОбластьСтрокаНоменклатура.Параметры.Стоимость = ОбщегоНазначенияКлиентСервер.ФорматСумм(ЦенаУслуги*КоличествоУслуг); 
		ИтогПоУслугам = ИтогПоУслугам + ЦенаУслуги * КоличествоУслуг;
		ТабДокумент.Вывести(ОбластьСтрокаНоменклатура);
	КонецЦикла;
	
	ОбластьИтогоПоУслугам.Параметры.ИтогоСуммаПоУслугам = ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогПоУслугам,ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьИтогоПоУслугам);
	
	Возврат ТабДокумент;
	
КонецФункции	

Функция ПолучитьДанныеОНезавершившихМедосмотр(МВТ)
	
	НеЗавершившие = НезавершившиеМедосмотр(МВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("НеЗавершившие", НеЗавершившие);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СписокНаПрохождение.Клиент КАК Справочник.Клиенты) КАК Клиент,
	|	СписокНаПрохождение.Пол КАК Пол,
	|	СписокНаПрохождение.Возраст КАК Возраст,
	|	СписокНаПрохождение.Ссылка.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ЕСТЬNULL(ПрохожденияМедосмотра.СтойкаяУтратаТрудоспособности, ЛОЖЬ)) КАК РабУтрТруд,
	|	СписокНаПрохождение.ФИОКлиента КАК ФИОКлиента,
	|	СписокНаПрохождение.ЦехУчасток КАК ЦехУчасток
	|ПОМЕСТИТЬ НеЗавершившие
	|ИЗ
	|	СписокНаПрохождение КАК СписокНаПрохождение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ПО СписокНаПрохождение.Клиент = ПрохожденияМедосмотра.Клиент
	|ГДЕ
	|	СписокНаПрохождение.Клиент В(&НеЗавершившие)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНаПрохождение.Клиент,
	|	СписокНаПрохождение.Пол,
	|	СписокНаПрохождение.Ссылка.Контрагент,
	|	СписокНаПрохождение.Возраст,
	|	СписокНаПрохождение.ПричинаНеявки,
	|	СписокНаПрохождение.ФИОКлиента,
	|	СписокНаПрохождение.ЦехУчасток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеЗавершившие.Клиент КАК Клиент,
	|	НеЗавершившие.Пол КАК Пол,
	|	НеЗавершившие.Возраст КАК Возраст,
	|	НеЗавершившие.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(НеЗавершившие.РабУтрТруд, ЛОЖЬ) КАК РабУтрТруд,
	|	НеЗавершившие.ЦехУчасток КАК ЦехУчасток,
	|	НеЗавершившие.ФИОКлиента КАК ФИОКлиента
	|ИЗ
	|	НеЗавершившие КАК НеЗавершившие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеЗавершившие.Клиент) КАК Всего,
	|	СУММА(ВЫБОР
	|			КОГДА НеЗавершившие.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВТЧЖенщин,
	|	СУММА(ВЫБОР
	|			КОГДА НеЗавершившие.Возраст < 18
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабДо18,
	|	СУММА(ВЫБОР
	|			КОГДА НеЗавершившие.РабУтрТруд
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабУтрТруд
	|ИЗ
	|	НеЗавершившие КАК НеЗавершившие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НеЗавершившие";
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСписокНеЗаверш = Результат[1].Выбрать();
	ВыборкаЧислНеЗаверш = Результат[2].Выбрать();
	
	Возврат Новый Структура("ВыборкаСписокНеЗаверш, ВыборкаЧислНеЗаверш", ВыборкаСписокНеЗаверш, ВыборкаЧислНеЗаверш);
	
КонецФункции

Функция НезавершившиеМедосмотр(МВТ)
	
	ПравилоОпределенияНезавершивших = УправлениеНастройками.ПараметрУчета("МедосмотрыПравилоОпределенияНезавершивших");
	пчПравила = Перечисления.МедосмотрыПравилаОпределенияНеЗавершивших;
	
	Если ПравилоОпределенияНезавершивших = пчПравила.ЕстьДокументПрохождения Тогда
		НеЗавершившие = НезавершившиеМедосмотрПоПричинамНеявкиИДокументамПрохождения(МВТ);
		
	ИначеЕсли ПравилоОпределенияНезавершивших = пчПравила.ЕстьДокументПрохожденияИгнорОтказа Тогда
		НеЗавершившие = НезавершившиеМедосмотрПоНаличиюПМО(МВТ);
	Иначе
		НеЗавершившие = НезавершившиеМедосмотрПоНаличиюОтметок(МВТ);
	КонецЕсли;
	
	Возврат НеЗавершившие;
	
КонецФункции

// Не завершившие - работники, не отмеченные какой-то причиной неявки в списке и
// имеющие документ прохождения, но без даты заключения.
Функция НезавершившиеМедосмотрПоПричинамНеявкиИДокументамПрохождения(МВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = НезавершившиеМедосмотрТекстЗапросаПоПМО(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
	
КонецФункции

// Не завершившие - работники, у которые есть документ прохождения, но нет даты заключения.
Функция НезавершившиеМедосмотрПоНаличиюПМО(МВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = НезавершившиеМедосмотрТекстЗапросаПоПМО();
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
	
КонецФункции

Функция НезавершившиеМедосмотрТекстЗапросаПоПМО(ОтборПричинаНеявкиЗаполнена = Ложь)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СписокНаПрохождение.Клиент КАК Клиент
		|
		|ИЗ
		|	СписокНаПрохождение КАК СписокНаПрохождение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
		|		ПО СписокНаПрохождение.Клиент = ПрохожденияМедосмотра.Клиент
		|ГДЕ
		|	ИСТИНА
		|	//%ОтборПричинаНеявкиЗаполнена И СписокНаПрохождение.ПричинаНеявки = ЗНАЧЕНИЕ(Справочник.ПричиныНеявкиНаМедосмотр.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокНаПрохождение.Клиент
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ПрохожденияМедосмотра.ДатаЗавершения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) = ЛОЖЬ
		|";
	
	Если ОтборПричинаНеявкиЗаполнена Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборПричинаНеявкиЗаполнена", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

// Не завершившие - работники, у которые есть документ прохождения, но нет даты заключения.
Функция НезавершившиеМедосмотрПоНаличиюОтметок(МВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНаПрохождение.Клиент КАК Клиент
	|ИЗ
	|	СписокНаПрохождение КАК СписокНаПрохождение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ПО СписокНаПрохождение.Клиент = ПрохожденияМедосмотра.Клиент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(
	|				,
	|				АктивностьЗаписи = ИСТИНА
	|					И ПрохождениеМедОсмотра В
	|						(ВЫБРАТЬ
	|							ПМО.Ссылка
	|						ИЗ
	|							ПрохожденияМедосмотра КАК ПМО)) КАК Отметки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПМО
	|			ПО Отметки.ПрохождениеМедОсмотра = ПМО.Ссылка
	|		ПО (Отметки.Выполнено)
	|			И (СписокНаПрохождение.Клиент = ПМО.Клиент)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНаПрохождение.Клиент
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПрохожденияМедосмотра.ДатаЗавершения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
	
КонецФункции

Функция ПолучитьДанныеОНепрошедшихМедосмотр(МВТ, НачавшиеПроходитьМедосмотр)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("НачавшиеПроходитьМедосмотр", НачавшиеПроходитьМедосмотр);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СписокНаПрохождение.Клиент КАК Справочник.Клиенты) КАК Клиент,
	|	СписокНаПрохождение.Пол,
	|	СписокНаПрохождение.Возраст,
	|	СписокНаПрохождение.Ссылка.Контрагент КАК Контрагент,
	|	СписокНаПрохождение.ПричинаНеявки КАК ПричинаНеявки,
	|	СписокНаПрохождение.ФИОКлиента КАК ФИОКлиента,
	|	СписокНаПрохождение.ЦехУчасток КАК ЦехУчасток
	|ПОМЕСТИТЬ НеПрошедшие
	|ИЗ
	|	СписокНаПрохождение КАК СписокНаПрохождение
	|ГДЕ
	|	НЕ СписокНаПрохождение.Клиент В (&НачавшиеПроходитьМедосмотр)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеПрошедшие.Клиент КАК Клиент,
	|	НеПрошедшие.Пол,
	|	НеПрошедшие.Возраст,
	|	НеПрошедшие.Контрагент,
	|	НеПрошедшие.ПричинаНеявки,
	|	НеПрошедшие.ЦехУчасток КАК ЦехУчасток,
	|	НеПрошедшие.ФИОКлиента КАК ФИОКлиента
	|ИЗ
	|	НеПрошедшие КАК НеПрошедшие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеПрошедшие.Клиент) КАК Всего,
	|	СУММА(ВЫБОР
	|			КОГДА НеПрошедшие.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВТЧЖенщин,
	|	СУММА(ВЫБОР
	|			КОГДА НеПрошедшие.Возраст < 18
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабДо18
	|ИЗ
	|	НеПрошедшие КАК НеПрошедшие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеПрошедшие.ПричинаНеявки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеПрошедшие.Клиент) КАК Количество
	|ИЗ
	|	НеПрошедшие КАК НеПрошедшие
	|
	|СГРУППИРОВАТЬ ПО
	|	НеПрошедшие.ПричинаНеявки";
	Результат = Запрос.ВыполнитьПакет();

	ВыборкаСписокНеПрошед = Результат[1].Выбрать();
	ВыборкаЧислНеПрошед = Результат[2].Выбрать();
	ВыборкаЧислНеПрошедПоПричинам = Результат[3].Выбрать();
	
	Возврат Новый Структура("ВыборкаСписокНеПрошед, ВыборкаЧислНеПрошед, ВыборкаЧислНеПрошедПоПричинам", 
							 ВыборкаСписокНеПрошед, 
							 ВыборкаЧислНеПрошед, 
							 ВыборкаЧислНеПрошедПоПричинам);
	
КонецФункции
						 
Функция СформироватьВременныеДанные(СсылкаНаОбъект)
	
	// Список клиентов на осмотр и документы прохождения осмотра по этому списку
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНаПрохождениеМедосмотраКлиенты.Ссылка КАК Ссылка,
	|	СписокНаПрохождениеМедосмотраКлиенты.Клиент КАК Клиент,
	|	ВЫБОР
	|		КОГДА СписокНаПрохождениеМедосмотраКлиенты.Клиент.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА "" ""
	|		ИНАЧЕ РАЗНОСТЬДАТ(СписокНаПрохождениеМедосмотраКлиенты.Клиент.ДатаРождения, СписокНаПрохождениеМедосмотраКлиенты.Ссылка.Дата, ГОД) - ВЫБОР
	|				КОГДА ДЕНЬГОДА(СписокНаПрохождениеМедосмотраКлиенты.Клиент.ДатаРождения) >= ДЕНЬГОДА(СписокНаПрохождениеМедосмотраКлиенты.Ссылка.Дата)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Возраст,
	|	СписокНаПрохождениеМедосмотраКлиенты.Клиент.Пол КАК Пол,
	|	СписокНаПрохождениеМедосмотраКлиенты.Клиент.ДатаРождения КАК ДатаРождения,
	|	СписокНаПрохождениеМедосмотраКлиенты.Клиент.умцМестоРаботы КАК МестоРаботы,
	|	СписокНаПрохождениеМедосмотраКлиенты.Профессия КАК Профессия,
	|	СписокНаПрохождениеМедосмотраКлиенты.ЦехУчасток КАК ЦехУчасток,
	|	СписокНаПрохождениеМедосмотраКлиенты.ФИОКлиента КАК ФИОКлиента,
	|	СписокНаПрохождениеМедосмотраКлиенты.ПричинаНеявки КАК ПричинаНеявки
	|ПОМЕСТИТЬ СписокНаПрохождение
	|ИЗ
	|	Документ.СписокНаПрохождениеМедосмотра.Клиенты КАК СписокНаПрохождениеМедосмотраКлиенты
	|ГДЕ
	|	СписокНаПрохождениеМедосмотраКлиенты.Ссылка = &СписокНаПрохождениеМедосмотра
	|	И СписокНаПрохождениеМедосмотраКлиенты.ТипМедосмотра <> ЗНАЧЕНИЕ(Перечисление.ТипыМедосмотров.Предварительный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрохождениеМедосмотра.Ссылка КАК Ссылка,
	|	ПрохождениеМедосмотра.Клиент КАК Клиент,
	|	ДанныеСпискаПрохождения.ДатаРождения КАК ДатаРождения,
	|	ДанныеСпискаПрохождения.Возраст КАК Возраст,
	|	ДанныеСпискаПрохождения.Пол КАК Пол,
	|	ДанныеСпискаПрохождения.МестоРаботы КАК МестоРаботы,
	|	ПрохождениеМедосмотра.ФИОКлиента КАК ФИОКлиента,
	|	ПрохождениеМедосмотра.Профессия КАК Профессия,
	|	ПрохождениеМедосмотра.ЦехУчасток КАК ЦехУчасток,
	|	ПрохождениеМедосмотра.ДатаЗавершения КАК ДатаЗавершения,
	|	ПрохождениеМедосмотра.СтойкаяУтратаТрудоспособности КАК СтойкаяУтратаТрудоспособности,
	|	ПрохождениеМедосмотра.ДиспансернаяГруппа КАК ДиспансернаяГруппа
	|ПОМЕСТИТЬ ПрохожденияМедосмотра
	|ИЗ
	|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СписокНаПрохождение.Клиент КАК Клиент,
	|			СписокНаПрохождение.ДатаРождения КАК ДатаРождения,
	|			СписокНаПрохождение.Возраст КАК Возраст,
	|			СписокНаПрохождение.Пол КАК Пол,
	|			СписокНаПрохождение.МестоРаботы КАК МестоРаботы,
	|			СписокНаПрохождение.Профессия КАК Профессия,
	|			СписокНаПрохождение.ЦехУчасток КАК ЦехУчасток
	|		ИЗ
	|			СписокНаПрохождение КАК СписокНаПрохождение) КАК ДанныеСпискаПрохождения
	|		ПО ПрохождениеМедосмотра.Клиент = ДанныеСпискаПрохождения.Клиент
	|ГДЕ
	|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра = &СписокНаПрохождениеМедосмотра
	|	И ПрохождениеМедосмотра.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Ссылка.Клиент КАК Клиент,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Противопоказание КАК Противопоказание,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Диагноз КАК Диагноз,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.ДетализацияДиагноза КАК ДетализацияДиагноза,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.УточненностьДиагноза КАК УточненностьДиагноза,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.ХарактерЗаболевания КАК ХарактерЗаболевания,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Профессиональное КАК Профессиональное,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.ВыявленВпервые КАК ВыявленВпервые,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.ПрофнепригодностьВременная КАК ПрофнепригодностьВременная,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.КлючСтроки КАК КлючСтроки,
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Примечание КАК Примечание
	|ПОМЕСТИТЬ ВыявленныеПротивопоказания
	|ИЗ
	|	Документ.ПрохождениеМедосмотра.КритичныеПротивопоказания КАК ПрохождениеМедосмотраКритичныеПротивопоказания
	|ГДЕ
	|	ПрохождениеМедосмотраКритичныеПротивопоказания.Ссылка В
	|			(ВЫБРАТЬ
	|				ПрохожденияМедосмотра.Ссылка
	|			ИЗ
	|				ПрохожденияМедосмотра)
	|	И ПрохождениеМедосмотраКритичныеПротивопоказания.Ссылка.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрохождениеМедосмотраВредныеФакторыПротивопоказаний.Ссылка.Клиент КАК Клиент,
	|	ПрохождениеМедосмотраВредныеФакторыПротивопоказаний.ВредныйФактор КАК ВредныйФактор,
	|	ПрохождениеМедосмотраВредныеФакторыПротивопоказаний.КлючСтроки КАК КлючСтроки
	|ПОМЕСТИТЬ ВредныеФакторыПротивопоказаний
	|ИЗ
	|	Документ.ПрохождениеМедосмотра.ВредныеФакторыПротивопоказаний КАК ПрохождениеМедосмотраВредныеФакторыПротивопоказаний";
	Запрос.УстановитьПараметр("СписокНаПрохождениеМедосмотра", СсылкаНаОбъект);
	Запрос.Выполнить();
	
	Возврат МВТ;
	
КонецФункции							

Функция ПредставлениеПричиныНеявкиДляЗаклАкта(ПричинаНеявки)
	
	Представление = Строка(ПричинаНеявки);
	
	спрПричиныНеявки = Справочники.ПричиныНеявкиНаМедосмотр;
	Если ПричинаНеявки = спрПричиныНеявки.БольничныйЛист Тогда
		Представление = НСтр("ru='Б/л'");
	ИначеЕсли ПричинаНеявки = спрПричиныНеявки.ОбследованиеПоМестуЖительства Тогда
		Представление = НСтр("ru='Обслед. по м/жит-ва'");
	ИначеЕсли ПричинаНеявки = спрПричиныНеявки.Отказ Тогда
		Представление = НСтр("ru='Отказ'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеПолаДляЗаклАкта(Пол)
	
	Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		Представление = НСтр("ru='М'");
	ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		Представление = НСтр("ru='Ж'");
	Иначе
		Представление = "";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьДанныеСводнойТаблицы2(СсылкаНаОбъект, МВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("НачавшиеНеЗавершившие", НезавершившиеМедосмотр(МВТ));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрохожденияМедосмотра.Клиент КАК Клиент,
	|	ПрохожденияМедосмотра.Пол КАК Пол,
	|	ПрохожденияМедосмотра.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(Направления.НуждаетсяВПроведенииДопОбследования, ЛОЖЬ) КАК НуждаетсяВПроведенииДопОбследования,
	|	ЕСТЬNULL(Направления.НуждаетсяВОбследованииВЦентреПрофпатологии, ЛОЖЬ) КАК НуждаетсяВОбследованииВЦентреПрофпатологии,
	|	ЕСТЬNULL(Направления.НуждаетсяВАмбулаторномОбследованииИЛечении, ЛОЖЬ) КАК НуждаетсяВАмбулаторномОбследованииИЛечении,
	|	ЕСТЬNULL(Направления.НуждаетсяВСтационарномОбследованииИЛечении, ЛОЖЬ) КАК НуждаетсяВСтационарномОбследованииИЛечении,
	|	ЕСТЬNULL(Направления.НуждаетсяВСанаторноКурортномЛечении, ЛОЖЬ) КАК НуждаетсяВСанаторноКурортномЛечении,
	|	ЕСТЬNULL(Направления.НуждаетсяВДиспансерномНаблюдении, ЛОЖЬ) КАК НуждаетсяВДиспансерномНаблюдении,
	|	ЕСТЬNULL(Направления.НуждаетсяВЛечебноПрофилактическомПитании, ЛОЖЬ) КАК НуждаетсяВЛечебноПрофилактическомПитании,
	|	ЕСТЬNULL(Направления.НуждаетсяВНаправленииНаМедикоСоциальнуюЭкспертизу, ЛОЖЬ) КАК НуждаетсяВНаправленииНаМедикоСоциальнуюЭкспертизу,
	|	ПрохожденияМедосмотра.ДиспансернаяГруппа КАК ДиспансернаяГруппа,
	|	ВЫБОР
	|		КОГДА ПрохожденияМедосмотра.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаключениеДано,
	|	ПрохожденияМедосмотра.Клиент.ДатаОтсчетаСтажа КАК ДатаОтсчетаСтажа,
	|	ПрохожденияМедосмотра.Возраст КАК Возраст
	|ИЗ
	|	ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Направления.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВПроведенииДопОбследования)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВПроведенииДопОбследования,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВОбследованииВЦентреПрофпатологии)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВОбследованииВЦентреПрофпатологии,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВАмбулаторномОбследованииИЛечении)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВАмбулаторномОбследованииИЛечении,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВСтационарномОбследованииИЛечении)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВСтационарномОбследованииИЛечении,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВСанаторноКурортномЛечении)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВСанаторноКурортномЛечении,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВДиспансерномНаблюдении)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВДиспансерномНаблюдении,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВЛечебноПрофилактическомПитании)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВЛечебноПрофилактическомПитании,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА Направления.ВидНаправления = ЗНАЧЕНИЕ(Перечисление.ВидыНаправленийПоРезультатамМедосмотра.НуждаетсяВНаправленииНаМедикоСоциальнуюЭкспертизу)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НуждаетсяВНаправленииНаМедикоСоциальнуюЭкспертизу
	|		ИЗ
	|			РегистрСведений.НаправленияПоРезультатамМедосмотра КАК Направления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Направления.ПрохождениеМедосмотра) КАК Направления
	|		ПО ПрохожденияМедосмотра.Ссылка = Направления.ПрохождениеМедосмотра
	|ГДЕ
	|	(ПрохожденияМедосмотра.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ ПрохожденияМедосмотра.Клиент В (&НачавшиеНеЗавершившие))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыявленныеПротивопоказания.Клиент КАК Клиент,
	|	ВыявленныеПротивопоказания.Противопоказание КАК Противопоказание,
	|	ВыявленныеПротивопоказания.Диагноз КАК Диагноз,
	|	ВыявленныеПротивопоказания.ДетализацияДиагноза КАК ДетализацияДиагноза,
	|	ВыявленныеПротивопоказания.УточненностьДиагноза КАК УточненностьДиагноза,
	|	ВыявленныеПротивопоказания.ХарактерЗаболевания КАК ХарактерЗаболевания,
	|	ВыявленныеПротивопоказания.Профессиональное КАК Профессиональное,
	|	ВыявленныеПротивопоказания.ВыявленВпервые КАК ВыявленВпервые,
	|	ВыявленныеПротивопоказания.ПрофнепригодностьВременная КАК ПрофнепригодностьВременная,
	|	ВыявленныеПротивопоказания.Примечание КАК Примечание,
	|	ВыявленныеПротивопоказания.КлючСтроки КАК КлючСтроки
	|ИЗ
	|	ВыявленныеПротивопоказания КАК ВыявленныеПротивопоказания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрохожденияМедосмотра.Клиент КАК Клиент,
	|	ВредныеФакторыУсловияРаботКлиентов.Фактор КАК ПереченьВредныхФакторовИРабот
	|ИЗ
	|	Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ВредныеФакторыУсловияРаботКлиентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ПО ВредныеФакторыУсловияРаботКлиентов.Ссылка = ПрохожденияМедосмотра.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВредныеФакторыПротивопоказаний.Клиент КАК Клиент,
	|	ВредныеФакторыПротивопоказаний.ВредныйФактор КАК ВредныйФактор,
	|	ВредныеФакторыПротивопоказаний.КлючСтроки КАК КлючСтроки
	|ИЗ
	|	ВредныеФакторыПротивопоказаний КАК ВредныеФакторыПротивопоказаний";
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДанных = Новый Структура;
	ВыборкаДанных.Вставить("ВыборкаКлиентыСводнойТаблицы",			Результат[0].Выбрать());
	ВыборкаДанных.Вставить("ВыборкаПротивопоказания",				Результат[1].Выбрать());
	ВыборкаДанных.Вставить("ВыборкаВсеВредныеФакторыКлиентов",		Результат[2].Выбрать());
	ВыборкаДанных.Вставить("ВыборкаВредныеФакторыПротивопоказаний", Результат[3].Выбрать());
	
	Возврат ВыборкаДанных;
	
КонецФункции

Функция ПолучитьСлучаиПодозренияИРискаНаПрофЗаболевание(МВТ, РеквизитНомерППиПриказа)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрохожденияМедосмотра.Клиент КАК Клиент,
	|	ПрохожденияМедосмотра.Клиент.Фамилия КАК Фамилия,
	|	ПрохожденияМедосмотра.Клиент.Имя КАК Имя,
	|	ПрохожденияМедосмотра.Клиент.Отчество КАК Отчество,
	|	ПрохожденияМедосмотра.Профессия,
	|	ПрохожденияМедосмотра.ЦехУчасток,
	|	Диагнозы.Диагноз КАК Диагноз,
	|	Диагнозы.ДиагнозКодДиагноза КАК КодДиагноза,
	|	ПОДСТРОКА(Диагнозы.Детализация, 1, 100) КАК Детализация,
	|	Диагнозы.Предварительный,
	|	Диагнозы.РискЗаболевания,
	|	ВредныеФакторыПротивопоказаний.ВредныйФактор,
	|	ПрохожденияМедосмотра.ДатаРождения
	|ПОМЕСТИТЬ РискиИПодозрения
	|ИЗ
	|	ПрохожденияМедосмотра КАК ПрохожденияМедосмотра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Диагнозы.Диагноз КАК Диагноз,
	|			Диагнозы.Диагноз.КодДиагноза КАК ДиагнозКодДиагноза,
	|			Диагнозы.Детализация КАК Детализация,
	|			Диагнозы.ВыявленВпервые КАК ВыявленВпервые,
	|			Диагнозы.Профессиональное КАК Профессиональное,
	|			ВЫБОР
	|				КОГДА Диагнозы.Классификация1 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.Предварительный)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК Предварительный,
	|			ВЫБОР
	|				КОГДА Диагнозы.Классификация1 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.РискЗаболевания)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК РискЗаболевания,
	|			Диагнозы.Регистратор.Клиент КАК Клиент,
	|			Диагнозы.Регистратор КАК Прием,
	|			Диагнозы.Регистратор.ПервичныйПрием КАК ПрохождениеМедосмотра
	|		ИЗ
	|			РегистрСведений.Диагнозы КАК Диагнозы
	|		ГДЕ
	|			Диагнозы.Профессиональное
	|			И Диагнозы.Регистратор.ПервичныйПрием В
	|					(ВЫБРАТЬ
	|						ПрохожденияМедосмотра.Ссылка
	|					ИЗ
	|						ПрохожденияМедосмотра)) КАК Диагнозы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВредныеФакторыПротивопоказаний КАК ВредныеФакторыПротивопоказаний
	|			ПО Диагнозы.Диагноз = ВредныеФакторыПротивопоказаний.Диагноз
	|				И Диагнозы.Прием = ВредныеФакторыПротивопоказаний.Документ
	|				И Диагнозы.ПрохождениеМедосмотра = ВредныеФакторыПротивопоказаний.СлучайОбращения
	|		ПО ПрохожденияМедосмотра.Клиент = Диагнозы.Клиент
	|ГДЕ
	|	(Диагнозы.Предварительный
	|			ИЛИ Диагнозы.РискЗаболевания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РискиИПодозрения.Клиент КАК Клиент,
	|	РискиИПодозрения.Фамилия КАК Фамилия,
	|	РискиИПодозрения.Имя КАК Имя,
	|	РискиИПодозрения.Отчество КАК Отчество,
	|	РискиИПодозрения.Профессия КАК Профессия,
	|	РискиИПодозрения.ЦехУчасток,
	|	РискиИПодозрения.Диагноз КАК Диагноз,
	|	РискиИПодозрения.КодДиагноза КАК КодДиагноза,
	|	РискиИПодозрения.ВредныйФактор,
	|	РискиИПодозрения.ДатаРождения КАК ДатаРождения,
	//|	РискиИПодозрения.ВредныйФактор.НомерППиПриказа_302н КАК НомерППиПриказа_302н,
	|	РискиИПодозрения.ВредныйФактор.НомерПП КАК НомерПП,
	|	РискиИПодозрения.Детализация КАК Детализация
	|ИЗ
	|	РискиИПодозрения КАК РискиИПодозрения
	|ГДЕ
	|	РискиИПодозрения.Предварительный
	|ИТОГИ
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество),
	|	МАКСИМУМ(Профессия),
	|	МАКСИМУМ(КодДиагноза),
	|	МАКСИМУМ(ДатаРождения),
	|	МАКСИМУМ(Детализация)
	|ПО
	|	Клиент,
	|	Диагноз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РискиИПодозрения.Клиент КАК Клиент,
	|	РискиИПодозрения.Фамилия КАК Фамилия,
	|	РискиИПодозрения.Имя КАК Имя,
	|	РискиИПодозрения.Отчество КАК Отчество,
	|	РискиИПодозрения.Профессия КАК Профессия,
	|	РискиИПодозрения.ЦехУчасток,
	|	РискиИПодозрения.Диагноз КАК Диагноз,
	|	РискиИПодозрения.КодДиагноза,
	|	РискиИПодозрения.ВредныйФактор,
	|	РискиИПодозрения.ДатаРождения КАК ДатаРождения,
	//|	РискиИПодозрения.ВредныйФактор.НомерППиПриказа_302н КАК НомерППиПриказа_302н,
	|	РискиИПодозрения.ВредныйФактор.НомерПП КАК НомерПП,
	|	РискиИПодозрения.Детализация
	|ИЗ
	|	РискиИПодозрения КАК РискиИПодозрения
	|ГДЕ
	|	РискиИПодозрения.РискЗаболевания
	|ИТОГИ
	|	МАКСИМУМ(Фамилия),
	|	МАКСИМУМ(Имя),
	|	МАКСИМУМ(Отчество),
	|	МАКСИМУМ(Профессия),
	|	МАКСИМУМ(КодДиагноза),
	|	МАКСИМУМ(ДатаРождения),
	|	МАКСИМУМ(Детализация)
	|ПО
	|	Клиент,
	|	Диагноз"
	//"ВЫБРАТЬ
	//|	ПрохожденияМедосмотра.Клиент,
	//|	ПрохожденияМедосмотра.Клиент.Фамилия КАК Фамилия,
	//|	ПрохожденияМедосмотра.Клиент.Имя КАК Имя,
	//|	ПрохожденияМедосмотра.Клиент.Отчество КАК Отчество,
	//|	ПрохожденияМедосмотра.Профессия,
	//|	ПрохожденияМедосмотра.ЦехУчасток,
	//|	Диагнозы.Диагноз,
	//|	Диагнозы.ДиагнозКодДиагноза КАК КодДиагноза,
	//|	Диагнозы.Детализация,
	//|	Диагнозы.Предварительный,
	//|	Диагнозы.РискЗаболевания
	//|ИЗ
	//|	ПрохожденияМедосмотра КАК ПрохожденияМедосмотра,
	//|	(ВЫБРАТЬ
	//|		Диагнозы.Диагноз КАК Диагноз,
	//|		Диагнозы.Диагноз.КодДиагноза КАК ДиагнозКодДиагноза,
	//|		Диагнозы.Детализация КАК Детализация,
	//|		Диагнозы.ВыявленВпервые КАК ВыявленВпервые,
	//|		Диагнозы.Профессиональное КАК Профессиональное,
	//|		ВЫБОР
	//|			КОГДА Диагнозы.Классификация1 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.Предварительный)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК Предварительный,
	//|		ВЫБОР
	//|			КОГДА Диагнозы.Классификация1 = ЗНАЧЕНИЕ(Перечисление.КлассификацииДиагнозов.РискЗаболевания)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК РискЗаболевания
	//|	ИЗ
	//|		РегистрСведений.Диагнозы КАК Диагнозы
	//|	ГДЕ
	//|		Диагнозы.Профессиональное
	//|		И Диагнозы.Регистратор.ПервичныйПрием В
	//|				(ВЫБРАТЬ
	//|					ПрохожденияМедосмотра.Ссылка
	//|				ИЗ
	//|					ПрохожденияМедосмотра)) КАК Диагнозы
	//|ГДЕ
	//|	(Диагнозы.Предварительный
	//|			ИЛИ Диагнозы.РискЗаболевания)"
	;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДанных = Новый Структура;
	ВыборкаДанных.Вставить("ВыборкаПодозренияПрофзаболевания",	Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ВыборкаДанных.Вставить("ВыборкаРискПрофзаболевания",		Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат ВыборкаДанных;
	
	
КонецФункции

Процедура КонкатенацияСтрок(Приемник, Источник, Разделитель)
	
	Приемник = Приемник + ?(ПустаяСтрока(Приемник), "", Разделитель) + Источник;
	
КонецПроцедуры

Функция ПолучитьРеквизитНомерППиПриказа(СсылкаНаОбъект)
	
	Дата = ПолучитьДатуДляОпределенияПриказа(СсылкаНаОбъект);
	Возврат МедосмотрыСервер.ПолучитьРеквизитНомерППиПриказа(Дата);
	
КонецФункции

Функция ПолучитьДатуДляОпределенияПриказа(СсылкаНаОбъект) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДатаЗаключительногоАкта) Тогда
		Дата = СсылкаНаОбъект.ДатаЗаключительногоАкта;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаОбъект.Дата) Тогда
		Дата = СсылкаНаОбъект.Дата;
	Иначе
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

Функция ПечатьПриложенияСводнаяТаблицаЗаключительногоАкта(СсылкаНаОбъект, МВТ = Неопределено)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокНаПрохождениеМедосмотра_ЗаключительныйАкт_ПриложениеСводнаяТаблица";
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = ПолучитьМакет("ЗаключительныйАкт");
	ОбластьСводнаяТаблица2Шапка  = Макет.ПолучитьОбласть("СводнаяТаблица2Шапка");
	ОбластьСводнаяТаблица2Строка = Макет.ПолучитьОбласть("СводнаяТаблица2Строка");
	
	Если МВТ = Неопределено Тогда
		МВТ = СформироватьВременныеДанные(СсылкаНаОбъект);
	КонецЕсли;
	
	РеквизитНомерППиПриказа = ПолучитьРеквизитНомерППиПриказа(СсылкаНаОбъект);
	
    ВыборкиДанных = ПолучитьДанныеСводнойТаблицы2(СсылкаНаОбъект, МВТ);
	ВыборкаКлиентыСводнойТаблицы 	 = ВыборкиДанных.ВыборкаКлиентыСводнойТаблицы;
	ВыборкаПротивопоказания			 = ВыборкиДанных.ВыборкаПротивопоказания;
	ВыборкаВсеВредныеФакторыКлиентов = ВыборкиДанных.ВыборкаВсеВредныеФакторыКлиентов;
	ВыборкаВредныеФакторыПротивопоказаний = ВыборкиДанных.ВыборкаВредныеФакторыПротивопоказаний;
	ТабДокумент.Вывести(ОбластьСводнаяТаблица2Шапка);
	
	
	ТабВредныеФакторыКлиента = Новый ТаблицаЗначений;
	ТабВредныеФакторыКлиента.Колонки.Добавить("ВредныйФактор");
	ТабВредныеФакторыКлиента.Колонки.Добавить("НомерППиПриказа", Новый ОписаниеТипов("Строка"));
	ТабВредныеФакторыКлиента.Колонки.Добавить("ПостоянноНепригоден", Новый ОписаниеТипов("Булево"));
	ТабВредныеФакторыКлиента.Колонки.Добавить("ВременноНепригоден",  Новый ОписаниеТипов("Булево"));
	ТабВредныеФакторыКлиента.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
	
	НПП = 1;
	Пока ВыборкаКлиентыСводнойТаблицы.Следующий() Цикл
		ОбластьСводнаяТаблица2Строка.Параметры.Номер = Формат(НПП,"ЧГ=");
		
		СтрокаКлиенты = СсылкаНаОбъект.Клиенты.Найти(ВыборкаКлиентыСводнойТаблицы.Клиент);
		Если СтрокаКлиенты <> Неопределено Тогда
			ФИОКлиента	= СтрокаКлиенты.ФИОКлиента;
			ЦехУчасток	= СтрокаКлиенты.ЦехУчасток;
			Профессия	= СтрокаКлиенты.Профессия;
		Иначе
			ФИОКлиента	= Неопределено;
			ЦехУчасток	= Неопределено;
			Профессия	= Неопределено;
		КонецЕсли;
		ОбластьСводнаяТаблица2Строка.Параметры.ФИО			 = ДанныеРаботника(ВыборкаКлиентыСводнойТаблицы.Клиент, "ФИОКлиента", ФИОКлиента);
		ОбластьСводнаяТаблица2Строка.Параметры.Подразделение = ДанныеРаботника(ВыборкаКлиентыСводнойТаблицы.Клиент, "ЦехУчасток", ЦехУчасток);
		ОбластьСводнаяТаблица2Строка.Параметры.Профессия	 = ДанныеРаботника(ВыборкаКлиентыСводнойТаблицы.Клиент, "Профессия", Профессия);
		
		ОбластьСводнаяТаблица2Строка.Параметры.Пол	 = ПредставлениеПолаДляЗаклАкта(ВыборкаКлиентыСводнойТаблицы.Пол);
		ОбластьСводнаяТаблица2Строка.Параметры.ДатаР = Формат(ВыборкаКлиентыСводнойТаблицы.ДатаРождения,"ДФ=dd.MM.yyyy");
		
		ОбластьСводнаяТаблица2Строка.Параметры.ГруппаЗдоровья = ВыборкаКлиентыСводнойТаблицы.ДиспансернаяГруппа;
		
		// Вредности
		ВредныеФакторы = "";
		ТабВредныеФакторыКлиента.Очистить();
		Отбор = Новый Структура("Клиент", ВыборкаКлиентыСводнойТаблицы.Клиент);
		ВыборкаВсеВредныеФакторыКлиентов.Сбросить();
		Пока ВыборкаВсеВредныеФакторыКлиентов.НайтиСледующий(Отбор) Цикл
			КонкатенацияСтрок(ВредныеФакторы, ВыборкаВсеВредныеФакторыКлиентов.ПереченьВредныхФакторовИРабот[РеквизитНомерППиПриказа], Символы.ПС);
			СтрокаВредности = ТабВредныеФакторыКлиента.Добавить();
			СтрокаВредности.ВредныйФактор = ВыборкаВсеВредныеФакторыКлиентов.ПереченьВредныхФакторовИРабот;
			СтрокаВредности.НомерППиПриказа = ВыборкаВсеВредныеФакторыКлиентов.ПереченьВредныхФакторовИРабот[РеквизитНомерППиПриказа];
		КонецЦикла;
		ОбластьСводнаяТаблица2Строка.Параметры.ВредныеФакторы = ВредныеФакторы;
		
		// Стаж
		Если ЗначениеЗаполнено(ВыборкаКлиентыСводнойТаблицы.ДатаОтсчетаСтажа) Тогда
			ОбластьСводнаяТаблица2Строка.Параметры.Стаж = ОбщегоНазначенияКлиентСервер.ПолучитьВозрастСтрокой(ВыборкаКлиентыСводнойТаблицы.ДатаОтсчетаСтажа, СсылкаНаОбъект.ДатаЗаключительногоАкта);
		Иначе
			ОбластьСводнаяТаблица2Строка.Параметры.Стаж = "";
		КонецЕсли;
		
		// Степени профпригодности, Диагнозы
		Диагнозы = "";
		ВыборкаПротивопоказания.Сбросить();
		ОтборВредныеФакторы = Новый Структура("Клиент, КлючСтроки");
		Пока ВыборкаПротивопоказания.НайтиСледующий(Отбор) Цикл
			
			КодДиагноза = ВыборкаПротивопоказания.Диагноз.КодДиагноза;
			Если Не ПустаяСтрока(КодДиагноза) И СтрНайти(Диагнозы, КодДиагноза) = 0 Тогда
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Диагнозы, КодДиагноза, " ");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборВредныеФакторы, ВыборкаПротивопоказания);
			// Вредные факторы очередного противопоказания
			ВыборкаВредныеФакторыПротивопоказаний.Сбросить();
			Пока ВыборкаВредныеФакторыПротивопоказаний.НайтиСледующий(ОтборВредныеФакторы) Цикл
				
				Для Каждого СтрокаВредности Из ТабВредныеФакторыКлиента Цикл
					// определение степени непригодности очередного вредного фактора
					Если СтрокаВредности.ВредныйФактор = ВыборкаВредныеФакторыПротивопоказаний.ВредныйФактор Тогда
						Если ВыборкаПротивопоказания.ПрофнепригодностьВременная = Перечисления.ХарактерПрофнепригодности.Временная 
							И Не СтрокаВредности.ПостоянноНепригоден 
						Тогда
							СтрокаВредности.ВременноНепригоден = Истина;
							СтрокаВредности.Примечание = ВыборкаПротивопоказания.Примечание;
							
						ИначеЕсли ВыборкаПротивопоказания.ПрофнепригодностьВременная = Перечисления.ХарактерПрофнепригодности.Постоянная Тогда
							СтрокаВредности.ПостоянноНепригоден = Истина;
							СтрокаВредности.Примечание = ВыборкаПротивопоказания.Примечание;

							Если СтрокаВредности.ВременноНепригоден Тогда
								СтрокаВредности.ВременноНепригоден = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		// Степени профпригодности: формирование строковых перечней
		мсПримечанияПротивопоказаний = Новый Массив;
		Для Каждого СтрокаВредности Из ТабВредныеФакторыКлиента Цикл
			Если мсПримечанияПротивопоказаний.Найти(СтрокаВредности.Примечание) = Неопределено Тогда
				мсПримечанияПротивопоказаний.Добавить(СтрокаВредности.Примечание);
			КонецЕсли;
		КонецЦикла;
		
		ВредностиПрофпригоден = "";
		ВредностиПрофНепригоденПост = "";
		ВредностиПрофНепригоденВрем = "";
		
		Для Каждого Примечание Из мсПримечанияПротивопоказаний Цикл
			
			ВредностиПрофпригоденТек = "";
			ВредностиПрофНепригоденПостТек = "";
			ВредностиПрофНепригоденВремТек = "";
			
			мсСтр = ТабВредныеФакторыКлиента.НайтиСтроки(Новый Структура("Примечание", Примечание));
			Для Каждого СтрокаВредности Из мсСтр Цикл
				Если СтрокаВредности.ПостоянноНепригоден Тогда
					КонкатенацияСтрок(ВредностиПрофНепригоденПостТек, СтрокаВредности.НомерППиПриказа, Символы.ПС)
				ИначеЕсли СтрокаВредности.ВременноНепригоден Тогда
					КонкатенацияСтрок(ВредностиПрофНепригоденВремТек, СтрокаВредности.НомерППиПриказа, Символы.ПС)
				Иначе
					КонкатенацияСтрок(ВредностиПрофпригоденТек, СтрокаВредности.НомерППиПриказа, Символы.ПС)
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Примечание) Тогда
				ВредностиПрофпригоденТек = ?(ПустаяСтрока(ВредностиПрофпригоденТек), "", ВредностиПрофпригоденТек + " - " + Примечание);
				ВредностиПрофНепригоденПостТек = ?(ПустаяСтрока(ВредностиПрофНепригоденПостТек), "", ВредностиПрофНепригоденПостТек + " - " + Примечание);
				ВредностиПрофНепригоденВремТек = ?(ПустаяСтрока(ВредностиПрофНепригоденВремТек), "", ВредностиПрофНепригоденВремТек + " - " + Примечание);
			КонецЕсли;				
			
			КонкатенацияСтрок(ВредностиПрофпригоден, ВредностиПрофпригоденТек, Символы.ПС);
			КонкатенацияСтрок(ВредностиПрофНепригоденПост, ВредностиПрофНепригоденПостТек, Символы.ПС);
			КонкатенацияСтрок(ВредностиПрофНепригоденВрем, ВредностиПрофНепригоденВремТек, Символы.ПС);
			
		КонецЦикла;
		ОбластьСводнаяТаблица2Строка.Параметры.Пригоден = ?(ВыборкаКлиентыСводнойТаблицы.ЗаключениеДано, ВредностиПрофпригоден, "не завершен");
		ОбластьСводнаяТаблица2Строка.Параметры.ПостоянноНепригоден	= ВредностиПрофНепригоденПост;
		ОбластьСводнаяТаблица2Строка.Параметры.ВременноНепригоден	= ВредностиПрофНепригоденВрем;
		
		ОбластьСводнаяТаблица2Строка.Параметры.Диагноз = Диагнозы;
		
		// Флаги "Нуждается в ..."
		ОбластьСводнаяТаблица2Строка.Параметры.НуждОбслПрофПат = ВыборкаКлиентыСводнойТаблицы.НуждаетсяВОбследованииВЦентреПрофпатологии;
		ОбластьСводнаяТаблица2Строка.Параметры.НуждОбслАмб = ВыборкаКлиентыСводнойТаблицы.НуждаетсяВАмбулаторномОбследованииИЛечении;
		ОбластьСводнаяТаблица2Строка.Параметры.НуждОбслСтац = ВыборкаКлиентыСводнойТаблицы.НуждаетсяВСтационарномОбследованииИЛечении;
		ОбластьСводнаяТаблица2Строка.Параметры.НуждСанКур = ВыборкаКлиентыСводнойТаблицы.НуждаетсяВСанаторноКурортномЛечении;
		ОбластьСводнаяТаблица2Строка.Параметры.НуждПитание = Ложь;
		ОбластьСводнаяТаблица2Строка.Параметры.НуждДисп = ВыборкаКлиентыСводнойТаблицы.НуждаетсяВДиспансерномНаблюдении;
		ОбластьСводнаяТаблица2Строка.Параметры.НуждСоцЭкспертиза = Ложь;
				
		ОбластьСводнаяТаблица2Строка.Параметры.ЗаключениеНеДано = Формат(Не ВыборкаКлиентыСводнойТаблицы.ЗаключениеДано, "БЛ=; БИ=!");
		
		ТабДокумент.Вывести(ОбластьСводнаяТаблица2Строка);

		НПП = НПП + 1;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьЗаключительныйАкт_ПриложениеСводнаяТаблица(СсылкаНаОбъект)
	
	КоллекцияПечатныхФорм = Новый Массив; 
	
	МВТ = Неопределено;
	ТабДокумент = ПечатьЗаключительныйАкт(СсылкаНаОбъект, МВТ);
	
	УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ТабДокумент,
		"ЗаключительныйАкт", НСтр("ru='Заключительный акт'"));
	
	
	ТабДокумент = ПечатьПриложенияСводнаяТаблицаЗаключительногоАкта(СсылкаНаОбъект, МВТ);
	УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ТабДокумент,
		"ПриложениеСводнаяТаблица", НСтр("ru='Приложение 1. Сводная таблица'"));

	Возврат КоллекцияПечатныхФорм;
		
КонецФункции

Функция ДанныеРаботника(Клиент, Параметр, ТекущееЗначение)
		
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
		
		Если Параметр = "Профессия" Тогда
			Значение = Клиент.Профессия;
			
		ИначеЕсли Параметр = "ЦехУчасток" Тогда
			Значение = Клиент.ЦехУчасток;
			
		ИначеЕсли Параметр = "ФИОКлиента" Тогда
			Значение = ОбщегоНазначения.ФИОФизЛица(Клиент);
			
		ИначеЕсли Параметр = "МестоРаботы" Тогда
			Значение = Клиент.умцМестоРаботы;
		КонецЕсли;
	Иначе
		Возврат ТекущееЗначение;
	КонецЕсли;
	
	Возврат СокрЛП(Значение);
	
КонецФункции

#КонецОбласти
