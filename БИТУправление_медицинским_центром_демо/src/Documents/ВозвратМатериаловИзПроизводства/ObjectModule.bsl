#Область ПрограммныйИнтерфейс
// Процедура заполняет шапку документа настройками сотрудника.
//
Процедура ЗаполнитьДокументНастройкамиМастераПоУмолчанию() Экспорт
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ЗначениеЗаполнено(ТекПользователь) И ЗначениеЗаполнено(ТекПользователь.Сотрудник) Тогда
		
		ЗначениеНастройки	= УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(ТекПользователь.Сотрудник, "ОсновнойСкладТоваров");
		Склад				= ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Склад);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемЗаказаИзМастерской")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаЗаказаВМастерскую")
	Тогда
		Контрагент		= ДанныеЗаполнения.Контрагент;
		Ответственный	= ДанныеЗаполнения.Ответственный;
		Филиал			= ДанныеЗаполнения.Филиал;
		Склад			= ДанныеЗаполнения.Склад;
		Заказ			= ДанныеЗаполнения.Заказ;
		
		Если ЗначениеЗаполнено(Заказ) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МатериалыВПроизводствеОстатки.Номенклатура,
			|	МатериалыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
			|	МатериалыВПроизводствеОстатки.КоличествоОстаток,
			|	МатериалыВПроизводствеОстатки.СуммаОстаток,
			|	МатериалыВПроизводствеОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
			|ИЗ
			|	РегистрНакопления.МатериалыВПроизводстве.Остатки(
			|			,
			|			Заказ = &Заказ
			|				И Контрагент = &Контрагент) КАК МатериалыВПроизводствеОстатки";
			
			Запрос.УстановитьПараметр("Заказ", Заказ);
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				стрТЧ = Материалы.Добавить();
				стрТЧ.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
				стрТЧ.ХарактеристикаНоменклатуры = ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры;
				стрТЧ.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
				стрТЧ.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
				стрТЧ.Сумма = ВыборкаДетальныеЗаписи.СуммаОстаток;
				стрТЧ.Вид = Перечисления.ВидыВозвратаМатериаловПроизводства.ВВидеКоличества;
			КонецЦикла;			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	// Заголовок для сообщений об ошибках проведения.
	ТекстПроведение = НСтр("ru='Проведение документа'");
	Заголовок = ТекстПроведение + " """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	
	Если Материалы.Количество() > 0 Тогда     
		СтруктураОбязательныхПолей.Вставить("Склад");
		СтруктураОбязательныхПолей.Вставить("Ответственный");
		ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТоварыНаСкладах(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыНаСкладах(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИмяТабличнойЧасти = "Материалы";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество");
	
	//// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	//СтруктураОбязательныхПолей.Вставить("Склад");
	
	// Теперь позовем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка на наличие услуг в т.ч. товаров.
	РаботаСДокументамиСервер.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаПоТоварам, Отказ, Заголовок);
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) 
	
	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Материалы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Количество"                         , "Количество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");
	СтруктураПолей.Вставить("НомерСтроки"                        , "НомерСтроки");
	
	РезультатЗапросаПоТоварам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	Для Каждого СтрокаТовар Из ТаблицаПоТоварам Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовар.Склад) Тогда
			СтрокаТовар.Склад = СтруктураШапкиДокумента.Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если Не Отказ Тогда
		СуммаСписываемыхТоваров = 0;
		
		ВозвращаемыеМатериалы = Материалы.ВыгрузитьКолонки();
		
		Для Каждого ТекСтрокаТовары Из Материалы Цикл 
			// Регистр Партии товаров на складах.
			// Либо нам вернули излишки
			Если ТекСтрокаТовары.Вид = Перечисления.ВидыВозвратаМатериаловПроизводства.ВВидеКоличества Тогда
				
				ЗаполнитьЗначенияСвойств(ВозвращаемыеМатериалы.Добавить(), ТекСтрокаТовары);
				
			// Либо нам предложили компенсацию за потраченные не на производство материалы.
			ИначеЕсли ТекСтрокаТовары.Вид = Перечисления.ВидыВозвратаМатериаловПроизводства.ВВидеСуммы Тогда
				СуммаСписываемыхТоваров = СуммаСписываемыхТоваров + ТекСтрокаТовары.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ДвиженияПоПартиямОприходованиеВозврата(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		Если СуммаСписываемыхТоваров > 0 Тогда
			Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Контрагент = Контрагент;
			Движение.Сумма = СуммаСписываемыхТоваров;
		КонецЕсли;
		
		Движения.ВзаиморасчетыСКонтрагентами.Записать();
		Движения.ПартииТоваровНаСкладах.Записать();
		
	КонецЕсли;
	
	// Движение по регистру МатериалыВПроизводстве.
	НаборДвижений = Движения.МатериалыВПроизводстве;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	Для Каждого СтрокаТовар Из ТаблицаПоТоварам Цикл
		Если ТекСтрокаТовары.Вид = Перечисления.ВидыВозвратаМатериаловПроизводства.ВВидеКоличества Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(),СтрокаТовар);
		КонецЕсли;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Заказ, "Заказ");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
	НаборДвижений.Записывать		 = Истина;
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	НаборДвижений.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемЗаказаИзМастерскойМатериалы.Номенклатура,
		|	ПриемЗаказаИзМастерскойМатериалы.ХарактеристикаНоменклатуры,
		|	ПриемЗаказаИзМастерскойМатериалы.Количество,
		|	ПриемЗаказаИзМастерскойМатериалы.Сумма,
		|	ПриемЗаказаИзМастерскойМатериалы.НомерСтроки
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	Документ.ПриемЗаказаИзМастерской.Материалы КАК ПриемЗаказаИзМастерскойМатериалы
		|ГДЕ
		|	ПриемЗаказаИзМастерскойМатериалы.Ссылка = &Ссылка
		|	И ПриемЗаказаИзМастерскойМатериалы.Номенклатура.ВидНоменклатуры = &Материал
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МатериалыВПроизводствеОстатки.Номенклатура,
		|	МатериалыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
		|	МатериалыВПроизводствеОстатки.КоличествоОстаток,
		|	МатериалыВПроизводствеОстатки.СуммаОстаток,
		|	Материалы.НомерСтроки
		|ИЗ
		|	РегистрНакопления.МатериалыВПроизводстве.Остатки(
		|			&МоментВремени,
		|			Заказ = &Заказ
		|				И Контрагент = &Контрагент) КАК МатериалыВПроизводствеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО МатериалыВПроизводствеОстатки.Номенклатура = Материалы.Номенклатура
		|			И МатериалыВПроизводствеОстатки.ХарактеристикаНоменклатуры = Материалы.ХарактеристикаНоменклатуры
		|ГДЕ
		|	МатериалыВПроизводствеОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("МоментВремени",  Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Материал", Перечисления.ВидыНоменклатуры.Материал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не хватает товара " + ВыборкаДетальныеЗаписи.Номенклатура
						+ ", после проведения документа остаток составит " + ВыборкаДетальныеЗаписи.КоличествоОстаток;
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЦикла;
	
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоПартиямОприходованиеВозврата(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоискаСтоимости = ТаблицаПоТоварам.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, Количество");
	ТаблицаПоискаСтоимости.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");
	
	ТаблицаОприходования = ТаблицаПоискаСтоимости.СкопироватьКолонки();
	ТаблицаОприходования.Колонки.Добавить("ДокументОприходования");
	ТаблицаОприходования.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	
	// Поиск передач этих товаров по данному заказу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Таб", ТаблицаПоискаСтоимости);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТабВозврата
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровНаСкладахОбороты.Номенклатура,
	|	ПартииТоваровНаСкладахОбороты.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладахОбороты.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладахОбороты.КоличествоРасход КАК Количество,
	|	ПартииТоваровНаСкладахОбороты.СуммаРасход КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
	|			,
	|			&МоментВремени,
	|			Регистратор,
	|			(Номенклатура, ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ТабВозврата.Номенклатура,
	|					ТабВозврата.ХарактеристикаНоменклатуры
	|				ИЗ
	|					ТабВозврата)) КАК ПартииТоваровНаСкладахОбороты
	|ГДЕ
	|	ПартииТоваровНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПередачаЗаказаВМастерскую
	|	И ПартииТоваровНаСкладахОбороты.Регистратор.ДокументОснование = &Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровНаСкладахОбороты.Период УБЫВ,
	|	ДокументОприходования УБЫВ"	
	;
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Выб);
		мсСтр = ТаблицаПоискаСтоимости.НайтиСтроки(Отбор);
		Если мсСтр.Количество() <> 0 Тогда
			СтрокаВозврата = мсСтр[0];
			КоличествоНайдено = Мин(Выб.Количество, СтрокаВозврата.Количество);
			Если КоличествоНайдено > 0 Тогда
				
				СтрокаОприходования = ТаблицаОприходования.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОприходования, Выб);
				СтрокаОприходования.Количество = КоличествоНайдено;
				Если Выб.Количество = КоличествоНайдено Тогда
					СтрокаОприходования.Сумма = Выб.Сумма;
				Иначе
					СтрокаОприходования.Сумма = Выб.Сумма * КоличествоНайдено / Выб.Количество;
				КонецЕсли;
				
				СтрокаВозврата.Количество = СтрокаВозврата.Количество - КоличествоНайдено;
				Если СтрокаВозврата.Количество = 0 Тогда
					ТаблицаПоискаСтоимости.Удалить(СтрокаВозврата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаПоискаСтоимости.Количество() > 0 Тогда
		// Анализ текущих остатков, оприходование по текущей средней стоимости.
		Запрос.УстановитьПараметр("Таб", ТаблицаПоискаСтоимости);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура,
		|	Таб.ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ТабВозврата
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОстатки.Номенклатура,
		|	ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК Количество,
		|	ПартииТоваровНаСкладахОстатки.СуммаОстаток КАК Сумма,
		|	NULL КАК Период,
		|	1 КАК ПериодТаб
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		|			&МоментВремени,
		|			(Номенклатура, ХарактеристикаНоменклатуры) В
		|				(ВЫБРАТЬ
		|					ТабВозврата.Номенклатура,
		|					ТабВозврата.ХарактеристикаНоменклатуры
		|				ИЗ
		|					ТабВозврата)) КАК ПартииТоваровНаСкладахОстатки
		|ГДЕ
		|	ПартииТоваровНаСкладахОстатки.КоличествоОстаток <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахОбороты.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахОбороты.КоличествоПриход,
		|	ПартииТоваровНаСкладахОбороты.СуммаПриход,
		|	ПартииТоваровНаСкладахОбороты.Период,
		|	2
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
		|			,
		|			&МоментВремени,
		|			Регистратор,
		|			(Номенклатура, ХарактеристикаНоменклатуры) В
		|				(ВЫБРАТЬ
		|					ТабВозврата.Номенклатура,
		|					ТабВозврата.ХарактеристикаНоменклатуры
		|				ИЗ
		|					ТабВозврата)) КАК ПартииТоваровНаСкладахОбороты
		|ГДЕ
		|	ПартииТоваровНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И ПартииТоваровНаСкладахОбороты.КоличествоПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодТаб,
		|	Период УБЫВ"	
		;
		Выб = Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Выб);
			мсСтр = ТаблицаПоискаСтоимости.НайтиСтроки(Отбор);
			Если мсСтр.Количество() <> 0 Тогда
				
				СтрокаВозврата = мсСтр[0];
				Если СтрокаВозврата.Количество > 0 Тогда
					СтрокаОприходования = ТаблицаОприходования.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОприходования, Выб);
					СтрокаОприходования.Количество = СтрокаВозврата.Количество;
					СтрокаОприходования.Сумма = СтрокаВозврата.Количество * Выб.Сумма / Выб.Количество;
					СтрокаОприходования.ДокументОприходования = Ссылка;
				КонецЕсли;
				
				ТаблицаПоискаСтоимости.Удалить(СтрокаВозврата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Остатки оприходую по нулевой стоимости.
	Для Каждого СтрокаВозврата Из ТаблицаПоискаСтоимости Цикл 
		СтрокаОприходования = ТаблицаОприходования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОприходования, СтрокаВозврата);
		СтрокаОприходования.ДокументОприходования = Ссылка;
	КонецЦикла;
	
	// Простановка в таблицу оприходования поля Склад - из табличной части возврата товаров.
	ТаблицаТоваровПоСкладам = ТаблицаПоТоварам.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, Склад, Количество");
	ТаблицаТоваровПоСкладам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Склад", "Количество");
	
	ТаблицаОприходованияИтоговая = ТаблицаОприходования.СкопироватьКолонки();
	ТаблицаОприходованияИтоговая.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	Для Каждого СтрокаОприходования Из ТаблицаОприходования Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаОприходования);
		СтрокиСоСкладами = ТаблицаТоваровПоСкладам.НайтиСтроки(Отбор);
		Для Каждого СтрокаСоСкладом Из СтрокиСоСкладами Цикл
			
			Количество = Мин(СтрокаСоСкладом.Количество, СтрокаОприходования.Количество);
			
			Если Количество > 0 Тогда
				СтрокаИтоговая = ТаблицаОприходованияИтоговая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтоговая, СтрокаОприходования);
				СтрокаИтоговая.Количество = Количество;
				СтрокаИтоговая.Склад = СтрокаСоСкладом.Склад;
			КонецЕсли;
			
			СтрокаОприходования.Количество = СтрокаОприходования.Количество - Количество;
			
		КонецЦикла;
	КонецЦикла;
	
	ПартионныйУчет.пуОприходованиеПартийТоваров(СтруктураШапкиДокумента, ТаблицаОприходованияИтоговая, ЭтотОбъект.Движения.ПартииТоваровНаСкладах);
	
КонецПроцедуры

#КонецОбласти