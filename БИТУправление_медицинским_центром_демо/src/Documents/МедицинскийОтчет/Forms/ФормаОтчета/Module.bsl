#Область ОписаниеПеременных

&НаСервере
Перем ОтчетОбъект;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяФорма = Параметры.мВыбраннаяФорма;
	Если Параметры.ПутьКОтчету <> Неопределено Тогда
		ИмяОтчета = МедицинскаяОтчетностьВызовСервера.ИсточникОтчета(Параметры.ПутьКОтчету);
	ИначеЕсли Параметры.мСохраненныйДок <> Неопределено Тогда
		ИмяОтчета = Параметры.мСохраненныйДок.ИсточникОтчета;
	КонецЕсли;
	
	ОтчетОбъект = МедицинскаяОтчетностьВызовСервера.ОтчетФабрикаМакетов(ИмяОтчета);
	ОтчетМетаданные		= ОтчетОбъект.Метаданные();
	ЭтаФорма.Заголовок	= ОтчетМетаданные.Синоним;
	ПутьКОтчету			= ОтчетМетаданные.ПолноеИмя();
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы(ИмяОтчета);
	
	ЦветЗаполняетсяТолькоВручную	 = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир	 = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир	 = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически	 = Новый Цвет(255, 255, 255);
	
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	
	СтруктураДанныхСтраниц = ПолучитьСтруктуруДанныхСтраниц(ОтчетОбъект);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	мСтруктураЦветовРаскраски.Вставить("_7", ЦветЗаполняетсяАвтоБезКорректир);
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2001";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мВыбраннаяФорма						= Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета				= Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета				= Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность							= Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма						= Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок						= Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Филиал									= Параметры.Филиал;
	СтруктураРеквизитовФормы.Организация							= Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически	= Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ДатаПодписи							= ТекущаяДатаСеанса();
	
	СтруктураДанныхФормаОтчета			= Новый Структура;
	мСтруктураМногостраничныхРазделов	= Новый Структура;
	
	// Структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	//мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	//мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	//мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Попытка
		ПодписываетсяЭП = МедицинскаяОтчетность.МедОтчеты(ИмяОтчета).ПодписываетсяЭП();
	Исключение КонецПопытки;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		ПодписанЭП = СтруктураРеквизитовФормы.мСохраненныйДок.ПодписанЭП;
	Иначе
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если ПодписанЭП Тогда
		
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.СохраненныеДанныеПодписанногоДокумента.Получить();
		
		Если ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
			ЗначениеВРеквизитФормы(ДанныеОтчета.ДеревоРазделов, "РазделыОтчета");
			Если ДанныеОтчета.Свойство("СоотвествиеТабДокументы") Тогда
				СоответствиеТабДоков = ДанныеОтчета.СоотвествиеТабДокументы;
			Иначе
				ТекстыОшибок = Новый Массив;
				Попытка
					СоответствиеТабДоков = ПолучитьСоответствиеТабДоковИзАрхива(СтруктураРеквизитовФормы.мСохраненныйДок, ТекстыОшибок);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					СоответствиеТабДоков = Новый Соответствие;
				КонецПопытки;
				
				Для Каждого ТекстОшибки Из ТекстыОшибок Цикл
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				КонецЦикла;
			КонецЕсли;
			
			СоответствиеТабДоковПодписанногоДокумента = Новый ФиксированноеСоответствие(СоответствиеТабДоков);
		Иначе
			СообщениеОПоврежденииПодписанныхДанных();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Если НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			Предлог = НСтр("ru='на'");
		Иначе
			Предлог = НСтр("ru='за'");
		КонецЕсли;
		Заголовок = СтрШаблон("%1 %2 %3", Заголовок, Предлог, СтруктураРеквизитовФормы.СтрПериодОтчета);
	КонецЕсли;
	
	ОргСтр = СтрШаблон(" (%1, %2)", СтруктураРеквизитовФормы.НаимОрганизации, СтруктураРеквизитовФормы.Филиал);
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, НСтр("ru=' - внешний отчет'"), "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина); // Не используется
	
	Элементы.РазделыОтчета.ТекущаяСтрока = 0;
	Элементы.ФормаПерейтиКПодписаниюЭМД.Видимость = ПодписываетсяЭП Или ПодписанЭП;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) И ПодписанЭП Тогда
		ЗаблокироватьРазблокироватьИзмененийНаФорме(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) И ПодписанЭП Тогда
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	МедицинскаяОтчетностьКлиент.ПередЗакрытиемМедицинскогоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	МедицинскаяОтчетность.ПриЗакрытииМедицинскогоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилисьПодписи"
		И Параметр = СтруктураРеквизитовФормы.мСохраненныйДок
	Тогда
		ПодписанЭП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ПодписанЭП");
		Элементы.ФормаПерейтиКПодписаниюЭМД.Видимость = ПодписываетсяЭП Или ПодписанЭП;
		ЗаблокироватьРазблокироватьИзмененийНаФорме(ПодписанЭП);
		Если ПодписанЭП Тогда
			СформироватьТабличныеДокументыИСохранить();
			СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Неопределено;
			РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		Иначе
			ОчиститьХранилищеЗначенийИПровестиИнициалищациюФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		Или Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета
	Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	//Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) И ПодписанЭП Тогда
		Если СоответствиеТабДоковПодписанногоДокумента = Неопределено Тогда
			СообщениеОПоврежденииПодписанныхДанных();
		Иначе
			СокрНаим = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
			ПолеТабличногоДокументаФормаОтчета = СоответствиеТабДоковПодписанногоДокумента.Получить(СокрНаим);
		КонецЕсли;
	Иначе
		// Стандартный вывод
		Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Истина);
		Иначе
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Обновить.Доступность = Не ПодписанЭП И Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный";
	Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть = ПолеТабличногоДокументаФормаОтчета.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		Возврат;
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		ТестовоеИмя = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ПолеТабличногоДокументаФормаОтчета.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ПодписанЭП Тогда
		Возврат;
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		Возврат;
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрНайти(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрНайти(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
	ИначеЕсли СтрНайти(Область.Имя, "Полужирный") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ИзменитьПолужирность("");
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчетаВыборНаСервере(Область.Имя, СтандартнаяОбработка);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		Возврат;
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ТабличныйДокументПриИзмененииСодержимогоОбластиНаСервере(Область.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Филиал", СтруктураРеквизитовФормы.Филиал);
	ПараметрыОтчета.Вставить("НаимОрганизации", СтруктураРеквизитовФормы.НаимОрганизации);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("СтрПериодОтчета", СтруктураРеквизитовФормы.СтрПериодОтчета);
	ПараметрыОтчета.Вставить("ТекущаяСтрокаРазделовОтчета", СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть.Имя);
	ОткрытьРасшифровкуОтчета(ИмяОтчета, ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ЗаполнитьАвтоНаСервере();
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ОбновитьТекущийРаздел();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПолужирность(Команда)
	
	ТабДок = ЭтаФорма.Элементы["ПолеТабличногоДокументаФормаОтчета"];
	ТекущаяОбласть = ТабДок.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;
	ШрифтПервойЯчейки = ПолеТабличногоДокументаФормаОтчета.Область(ТекущаяОбласть.Верх - 1, 3).Шрифт;
	ОбластьСтроки = ПолеТабличногоДокументаФормаОтчета.Область(ТекущаяОбласть.Верх - 1, 3, ТекущаяОбласть.Верх, 17);
	РежимПолужирный = Не ШрифтПервойЯчейки.Полужирный;
	ОбластьСтроки.Шрифт = Новый Шрифт(ШрифтПервойЯчейки,,,РежимПолужирный);
	ОбластьСтроки.Отступ = Число(ШрифтПервойЯчейки.Полужирный) + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСправку(Команда)
	
	ОткрытьСправку(ПутьКОтчету);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПрошлойОтчетности(Команда)
	
	Отбор = Новый Структура("ИсточникОтчета", ИмяОтчета);
	ОткрытьФорму("Документ.МедицинскийОтчет.ФормаВыбора", Новый Структура("Отбор", Отбор), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодписаниюЭМД(Команда)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Для выполнения данной операции необходимо записать документ. Выполнить запись?'");
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверитьМодифицированностьВФормеВопросЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Истина, , Ложь, СтруктураРеквизитовФормы.мСохраненныйДок, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		ВставитьДополнительнуюСтрокуНаСервере();
	#Иначе
		ВставитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	Если СтруктураРеквизитовФормы.мИдГруппы1 = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ЭтаФорма.Элементы["ПолеТабличногоДокументаФормаОтчета"].ТекущаяОбласть;
	
	ИмяГруппы = МедицинскаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Элементы.РазделыОтчета.ТекущаяСтрока = 0;
	
	Если Не ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	МедицинскаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если Не МедицинскаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ПараметрыСтраницы = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(0);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Очистить();
	СтруктураПараметров.Вставить("НаименованиеЛиста",	ПараметрыСтраницы.Представление);
	СтруктураПараметров.Вставить("ОриентацияЛиста",		ПараметрыСтраницы.ОриентацияСтраницы);
	СтруктураПараметров.Вставить("ИмяТабличногоПоля",	"ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ИмяОбластиТаблПоля",	"");
	СтруктураПараметров.Вставить("ВидПечати",			ВидПечати);
	
	Если ПодписанЭП Тогда
		СформироватьПечатныеЛистыПодписанногоДокумента(СтруктураРеквизитовФормы.мПечатныеФормы);
	Иначе
		ДополнитьСписокПечатныхЛистов(СтруктураРеквизитовФормы.мПечатныеФормы);
		// Закоментированое использовалось для формирования первой страницы, перевели на стандартный режим
		//МедицинскаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметров, ПолеТабличногоДокументаФормаОтчета, СтруктураРеквизитовФормы.мПечатныеФормы);
	КонецЕсли;
	
	МедицинскаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьПечатныеЛистыПодписанногоДокумента(СписокПечатаемыхЛистов)
	
	Страницы = мДеревоСтраницОтчета.ПолучитьЭлементы();
	
	Если СоответствиеТабДоковПодписанногоДокумента = Неопределено Тогда
		ВызватьИсключение "Данные подписанного документа повреждены, печать не возможна!";
	КонецЕсли;
	
	Для Каждого Эл Из Страницы Цикл
		ТабДок = СоответствиеТабДоковПодписанногоДокумента.Получить(Эл.ИмяСтраницы);
		Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент")Тогда
			СписокПечатаемыхЛистов.Добавить(ТабДок, Эл.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСписокПечатныхЛистов(СписокПечатаемыхЛистов)
	
	ОтчетФабрикаМакетов = МедицинскаяОтчетностьВызовСервера.ОтчетФабрикаМакетов(ИмяОтчета);
	Страницы = мДеревоСтраницОтчета.ПолучитьЭлементы();
	
	Для Сч = 0 По Страницы.Количество() - 1 Цикл
		ПараметрыСтраницы = Страницы.Получить(Сч);
		НомерРаздела = Строка(Сч);
		ИмяРаздела = ПараметрыСтраницы.ИмяСтраницы;
		ТабДок = ОтчетФабрикаМакетов.ПолучитьМакет(СтруктураРеквизитовФормы.НаименованиеФормыОтчета + "_" + ИмяРаздела);
		
		Документы.МедицинскийОтчет.РаботаСМногострочнымиОбластями(ТабДок, ИмяРаздела, ЭтаФорма["СтруктураДанныхСтраниц"]);
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанныхСтраниц"][ИмяРаздела] Цикл
			Попытка
				ОбластьТабДокумента = ТабДок.Области[ЭлСтруктуры.Ключ];
				Если ЗначениеЗаполнено(ЭлСтруктуры.Значение) Тогда
					ОбластьТабДокумента.СодержитЗначение = Ложь;
					ОбластьТабДокумента.Текст = Строка(ЭлСтруктуры.Значение);
				КонецЕсли;
			Исключение КонецПопытки;
		КонецЦикла;
		
		Если ПараметрыСтраницы.ОриентацияСтраницы = "Ландшафт" Тогда
			ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабДок.Макет = Ложь;
		СписокПечатаемыхЛистов.Добавить(ТабДок, ПараметрыСтраницы.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

&НаСервере
Функция ПолучитьСтруктуруДанныхСтраниц(ОтчетОбъект)
	
	СтруктураСтраниц = Новый Структура();
	Для Каждого Элемента ИЗ ОтчетОбъект.Метаданные().Макеты Цикл
		СтруктураСтраниц.Вставить(СтрЗаменить(Элемента.Имя, "ФормаОтчета_", ""), Новый Структура());
	КонецЦикла;
	
	Возврат СтруктураСтраниц;
	
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы(ИмяОтчета)
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Филиал");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("ЦветАвтозаполняемойЯчейки", Новый Цвет(230, 240, 220));
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мСдвигНиз");
	СтруктураРеквизитовФормы.Вставить("мСдвигПраво");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела", "");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", ИмяОтчета);
	СтруктураРеквизитовФормы.Вставить("НаименованиеФормыОтчета", ВыбраннаяФорма); // "ФормаОтчета");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы", 0);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаМедицинскийОтчет", Документы.МедицинскийОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	Для Каждого Элемента Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
		СтрокаУровня1.ИмяСтраницы					= Элемента.ИмяСтраницы;
		СтрокаУровня1.СохранятьМногострКакТЗ		= Неопределено;
		СтрокаУровня1.МногостраничностьВРазделе		= Ложь;
		СтрокаУровня1.ОчищатьРаздел					= Ложь;
		СтрокаУровня1.ИмяПредставления				= "";
		СтрокаУровня1.ПредставлениеДанных			= Истина;
		СтрокаУровня1.РазделОбязателенДляВыгрузки	= Неопределено;
		СтрокаУровня1.РазделЯвляетсяАвтозаполняемым	= Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета			= ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим	= ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки				= 1;
			ЭлементРазделовОтчета.РазделМногостраничный			= Ложь;
			ЭлементРазделовОтчета.РазделМногострочный			= ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если Не НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки		= 0;
					ЭлементРазделовОтчета.РазделМногостраничный	= Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						СтраницаРазделаОтчета.КолонкаРазделыОтчета				= "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим		= ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета	= НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки					= 1;
						СтраницаРазделаОтчета.РазделМногостраничный				= ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный				= ЭлементРазделовОтчета.РазделМногострочный;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Если ОтчетОбъект = Неопределено Тогда
		ОтчетОбъект = МедицинскаяОтчетностьВызовСервера.ОтчетФабрикаМакетов(ИмяОтчета);
	КонецЕсли;
	
	ОтчетОбъект.ФормироватьСтруктуруСтраницОтчета(ВыбраннаяФорма, мДеревоСтраницОтчета);
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	мАдресвФорматеДляВыгрузки = "";
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		// Создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
			
			ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				НомерСтроки = Формат(НСтр, "ЧГ=0");
				
				Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтрокаГруппы.Свойство(ИмяКолонки) Тогда
						
						КодПоказателя = ИмяКолонки + "_" + НомерСтроки;
						ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
						
						Если ОбластьЯчейки.СодержитЗначение Тогда
							ЗначениеЯчейки = ОбластьЯчейки.Значение;
						Иначе
							ЗначениеЯчейки = ОбластьЯчейки.Текст;
						КонецЕсли;
						
						СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если Не БезОткрытияФормы
			И Не СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
			И Не СтруктураРеквизитовФормы.мСохраненныйДок.ПодписанЭП
		Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанныхСтраниц.Свойство("Титульный") Тогда
		ИмяРаздела = "Титульный";
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяРаздела, Ложь);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ГодОтчетности = Число(Прав(Строка(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), 2));
			ЭтаФорма.ПолеТабличногоДокументаФормаОтчета.Области.ОтчетГод.Значение = ГодОтчетности;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если Не СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если Не СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаполнитьАвтоНаСервере();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
		Или СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
	Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(СтруктураРеквизитовФормы.Филиал).НазваниеОрганизации;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	МедицинскаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьАвтоНаСервере();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ПеренумероватьСтроки(ПолеТабличногоДокументаФормаОтчета);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Элементы.НаименованиеЭтапа.Заголовок = "В работе";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ПолучитьИмяСтраницыДляСведенийОбОрганизации());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИмяСтраницы)
	
	Если (Форма.СтруктураРеквизитовФормы.Филиал = Неопределено)
		Или (Форма.СтруктураРеквизитовФормы.Филиал = МедицинскаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Филиалы"))
	Тогда
		Возврат;
	КонецЕсли;
	
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	
	Сведения.Добавить("", "АдрПочт");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "ОКПО");
	
	СведенияОбОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Форма.СтруктураРеквизитовФормы.Филиал);
	
	ИННЮЛ			= "";
	АдрПочт			= "";
	ТелОрганизации	= "";
	ОргДиректор		= "";
	ОргБухгалтер	= "";
	НаимЮЛПол		= "";
	ОКПО			= "";
	
	СведенияОбОрганизации.Свойство("ИНН",					ИННЮЛ);
	СведенияОбОрганизации.Свойство("Адрес",					АдрПочт);
	СведенияОбОрганизации.Свойство("Телефон",				ТелОрганизации);
	СведенияОбОрганизации.Свойство("ОКПО",					ОКПО);
	СведенияОбОрганизации.Свойство("НазваниеОрганизации",	НаимЮЛПол);
	
	Попытка
		Если (Не ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение))
			Или (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Попытка
		Если (Не ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОКПО.Значение))
			Или (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОКПО.Значение = ОКПО;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Попытка
		Если (Не Форма["СтруктураДанныхСтраниц"][ИмяСтраницы].Свойство("НомерТелефона"))
			Или (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Тогда
			Форма["СтруктураДанныхСтраниц"][ИмяСтраницы].Вставить("НомерТелефона", ТелОрганизации);
		КонецЕсли;
	Исключение КонецПопытки;
	
	ТекДата = ТекущаяДата();
	ГодДокумента = Число(Прав(Строка(Год(ТекДата)),2));
	МесяцДокумента = Число(Прав(Строка(Месяц(ТекДата)),2));
	ДеньДокумента = Число(Прав(Строка(День(ТекДата)),2));
	
	Попытка
		Форма["СтруктураДанныхСтраниц"][ИмяСтраницы].Вставить("ДеньДокумента", ДеньДокумента);
		Форма["СтруктураДанныхСтраниц"][ИмяСтраницы].Вставить("МесяцДокумента", МесяцДокумента);
		Форма["СтруктураДанныхСтраниц"][ИмяСтраницы].Вставить("ГодДокумента", ГодДокумента);
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяСтраницыДляСведенийОбОрганизации()
	
	ЭлементыДерева = мДеревоСтраницОтчета.ПолучитьЭлементы();
	Возврат ЭлементыДерева[ЭлементыДерева.Количество()-1].ИмяСтраницы;
	
КонецФункции

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Филиал",					 СтруктураРеквизитовФормы.Филиал);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",	 СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели = МедицинскаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Филиал <> СтруктураРеквизитовФормы.мСохраненныйДок.Филиал
		И СтруктураРеквизитовФормы.Филиал <> МедицинскаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Филиалы")
		И СтруктураРеквизитовФормы.Филиал <> Неопределено
	Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// Восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Филиал = СтруктураРеквизитовФормы.мСохраненныйДок.Филиал;
	КонецЕсли;
	
	ДатаПодписи		= СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий		= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	Ответственный	= СтруктураРеквизитовФормы.мСохраненныйДок.Ответственный;
	
	// Восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если Не НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				ВывестиРазделВТабличныйДокументНаСервере(ЭлементСтруктуры.Ключ, ЭтаФорма[НайденноеЗначение]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если Не ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	// Восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле = ЭтаФорма["СтруктураДанныхСтраниц"][ИмяТекТабличноеПоле];
		ПоказателиТаблПоле = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя		= Показатель.Ключ;
			ЗначениеПоказателя	= Показатель.Значение;
			
			// Установим значение в таблице
			ТекТабличноеПоле.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	МедицинскаяОтчетность.ОперацииПриВосстановленииМедицинскогоОтчета(ЭтаФорма);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// Период в заголовке отчета.
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	// Период для показа в шапке отчета.
	Если НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ДатаПериода = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	Иначе
		ДатаПериода = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета + 1;
	КонецЕсли;
	//ПолеТабличногоДокументаФормаОтчета.Области.Период.Значение
	//	= "за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	Возврат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеТабДоковИзАрхива(МедицинскийОтчет, ТекстыОшибок)
	
	СоответствиеТабДоков = Новый Соответствие;
	
	ДанныеФайловЭМД = бит_РаботаСФайлами.ПолучитьДанныеФайловЭМД(МедицинскийОтчет, , ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Если ДанныеФайловЭМД.Количество() = 0 Тогда
		Возврат СоответствиеТабДоков;
	КонецЕсли;
	
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДанныеФайловЭМД.Получить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор()).ДвоичныеДанные);
	ЧтениеZipФайла = Новый ЧтениеZipФайла(Новый ПотокВПамяти(БуферДвоичныхДанных));
	
	ДеревоСтраниц = МедицинскийОтчет.ДеревоНастройкиСтраниц.Получить();
	
	ИмяВременногоКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + Новый УникальныйИдентификатор);
	
	ПоследнийУдачноСформированныйТабДок = Неопределено;
	
	Для Каждого ФайлТабДока Из ЧтениеZipФайла.Элементы Цикл
		
		ЧтениеZipФайла.Извлечь(ФайлТабДока, ИмяВременногоКаталога);
		
		Попытка
			ТабДок = Новый ТабличныйДокумент;
			ТабДок.Прочитать(ИмяВременногоКаталога + ФайлТабДока.Имя);
			
			Префикс = СтрРазделить(ФайлТабДока.Имя, " ")[0];
			НомераСтрок = СтрРазделить(Префикс, ".", Ложь);
			
			КоллекцияСтрок = ДеревоСтраниц.Строки;
			Для Каждого НомерСтроки Из НомераСтрок Цикл
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСтроки) Тогда
					СтрокаДерева = КоллекцияСтрок[Число(НомерСтроки)-1];
					КоллекцияСтрок = СтрокаДерева.Строки;
				КонецЕсли;
			КонецЦикла;
			
			ПоследнийУдачноСформированныйТабДок = ТабДок;
			СоответствиеТабДоков.Вставить(СтрокаДерева.ИмяСтраницы, ТабДок);
		Исключение
			ТекстыОшибок.Добавить(СтрШаблон(НСтр("ru='Не удалось идентифицировать файл ""%1"". Возможно архив ЭМД был модифицирован, требуется переподписание документа.'"), ФайлТабДока.Имя));
		КонецПопытки;
	КонецЦикла;
	
	Если ПоследнийУдачноСформированныйТабДок <> Неопределено Тогда
		ДобавитьВТабДокЭЦП(ПоследнийУдачноСформированныйТабДок, МедицинскийОтчет);
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяВременногоКаталога);
	Исключение КонецПопытки;
	
	Возврат СоответствиеТабДоков;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьВТабДокЭЦП(ТабДок, МедицинскийОтчет)
	
	Выборка = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(МедицинскийОтчет);
	ДанныеПодписи = Новый Структура;
	МакетЭЦП = Документы.МедицинскийОтчет.ПолучитьМакет("МакетЭЦП");
	ТабличныйДокументПодписьЭЦП = Новый ТабличныйДокумент;
	
	Пока Выборка.Следующий() Цикл
		ОбластьЭЦП = МакетЭЦП.ПолучитьОбласть("ОбластьЭЦП");
		ОбластьЭЦП.Область("ОбластьЭЦП").Имя = СтрШаблон("ОбластьЭЦП_%2", Строка(Новый УникальныйИдентификатор));
		ДанныеПодписи = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(Выборка.Сертификат, МедицинскийОтчет, Выборка.ДатаПодписи);
		ЗаполнитьЗначенияСвойств(ОбластьЭЦП.Параметры, ДанныеПодписи);
		
		ОбластьЯчеек = ТабличныйДокументПодписьЭЦП.Вывести(ОбластьЭЦП);
		ОбластьЯчеек.СоздатьФорматСтрок();
	КонецЦикла;
	
	ТабДок.Вывести(ТабличныйДокументПодписьЭЦП);
	
КонецПроцедуры

#КонецОбласти

#Область МногострочныеТаблицы

// +ДОБАВЛЕНИЕ И УДАЛЕНИЕ СТРОК

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитов = Форма.СтруктураРеквизитовФормы;
	// Сначала выполним проверку на активную страницу панели формы, которая содержит многострочный раздел
	ИмяГруппы = СтруктураРеквизитов.мИдГруппы1;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	#Если НаКлиенте Тогда
		ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	ТекТабличноеПоле = Форма[ТекТабличноеПоле];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	НомерГрафы = 1;
	
	КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
	
	ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + КолСтрок;
	
	// Область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	// Номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + СтруктураРеквизитов.мСдвигНиз;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	МедицинскаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, "", "", НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма.ПолеТабличногоДокументаФормаОтчета = ТекТабличноеПоле;
	
	// Переопределяем имена вставленной области
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
			
			ИмяОбластиЯчейки	= КолонкаТаблицыИмя + "_" + КолСтрок;
			ИмяНовОбластиЯчейки	= КолонкаТаблицыИмя + "_" + (КолСтрок + 1);
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки	= ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки	= ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки	= ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки	= ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области, (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
				
				НовОбластьЯчейкиПолужирный = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх + 1, 2, ОбластьЯчейки.Верх + 1, 2);
				НовОбластьЯчейкиПолужирный.Имя = "Полужирный" + КолСтрок + 1;
				ИсхОбластьЯчейкиПолужирный = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх + 1, 2, ОбластьЯчейкиИсходнойОбласти.Верх + 1, 2);
				ИсхОбластьЯчейкиПолужирный.Имя = "Полужирный" + КолСтрок;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой
				ИсходныйНомер		 = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст = ? (Не НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НомерГрафы = 1;
	
	КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = КолонкаТаблицыИмя + "_" + (КолСтрок + 1);
	
	Форма.Элементы["ПолеТабличногоДокументаФормаОтчета"].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	// Добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Инд = 0;
	Пока Истина Цикл
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Инд);
		Если Обл = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	Форма.Модифицированность = Истина;
	ПеренумероватьСтроки(Форма.ПолеТабличногоДокументаФормаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		УдалитьДополнительнуюСтрокуНаСервере();
	#Иначе
		УдалитьДополнительнуюСтрокуНаКлиенте();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	#Если НаКлиенте Тогда
		ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	ТекТабличноеПоле = Форма[ТекТабличноеПоле];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть	= Форма.Элементы["ПолеТабличногоДокументаФормаОтчета"].ТекущаяОбласть;
	ИмяЯчейки		= ТекущаяОбласть.Имя;
	
	#Если НаКлиенте Или ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = МедицинскаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		Форма.ОбновитьСтруктуруМногострочныхРазделовНаКлиенте();
	#Иначе
		ИмяГруппы = МедицинскаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		Форма.ОбновитьСтруктуруМногострочныхРазделовНаСервере();
	#КонецЕсли
	
	// Номер строки многострочного раздела определим по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// Удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = КолонкаТаблицыИмя + "_" + НомУдаляемойСтроки;
		
		// Область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// Номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + Форма.СтруктураРеквизитовФормы.мСдвигНиз;
		
		МедицинскаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, "", ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма.ПолеТабличногоДокументаФормаОтчета = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// Обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаТаблицыИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
							
							// Обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа, а должна осуществляться сдвиг строк
		
		// Обновляем структуру многострочного раздела методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					НомерСтрокиВТаблице		 = СтруктураГруппы.Индекс(СтрокаТаблицы);
					НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					ИмяЯчейки				 = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы	 = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// Обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// Определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	
	НомерГрафы = 1;
	
	КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
	
	ИмяТекущейОбласти = КолонкаТаблицыИмя + "_" + НомТекущейСтроки;
	
	Форма.Элементы["ПолеТабличногоДокументаФормаОтчета"].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы["ПолеТабличногоДокументаФормаОтчета"];
	Если СтруктураГруппы.Количество() = Форма.мСтруктураИсхКолвоСтрокРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы1] Тогда
		Для Инд = 1 По Форма.мСтруктураИсхКолвоСтрокРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы1] Цикл  
			Обл = Форма.ПолеТабличногоДокументаФормаОтчета.Области.Найти("УдалитьСтроку" + Форма.СтруктураРеквизитовФормы.мИдГруппы1 + "01_" + Инд);
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	ПеренумероватьСтроки(Форма.ПолеТабличногоДокументаФормаОтчета);
	
КонецПроцедуры

// -ДОБАВЛЕНИЕ И УДАЛЕНИЕ СТРОК

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "ПолеТабличногоДокументаФормаОтчета";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочныхРазделовНаКлиенте() Экспорт
	
	ОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочныхРазделовНаСервере() Экспорт
	
	ОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочныхРазделов(Форма)
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	//МедицинскаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = Форма[СтруктураГруппы];
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки		= ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки	= ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВыводТабДокументов

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы)
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Определим исходное колво строк многострочного раздела, соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// Реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	#Если НаКлиенте Тогда
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекТабличноеПолеИмя = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// Выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице		 = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки				 = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы	 = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки			 = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// Задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// Устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(МногострочнаяЧастьНиз, , МногострочнаяЧастьНиз);
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + ТекущееКоличествоСтрокГруппы - ИсходноеКоличествоСтрокГруппы), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьНиз + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ИсходноеКоличествоСтрокГруппы + ТекущееКоличествоСтрокГруппы - НомНовойСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, Сохранять = Истина)
	
	Если Сохранять Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела);
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	ОтчетОбъект.УстановитьДоступностьОбластей(ВыбраннаяФорма, ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтаФорма["СтруктураДанныхСтраниц"][НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ПолеТабличногоДокументаФормаОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела)
	
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	ПолеТабличногоДокументаФормаОтчета = ПолучитьТабличныйДокументПоРазделу(ИмяТекРаздела, ОтчетОбъект, ИмяОтчета, СтруктураРеквизитовФормы.НаименованиеФормыОтчета, СтруктураДанныхСтраниц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоРазделу(ИмяТекРаздела, ОтчетОбъект, ИмяОтчета, НаименованиеФормыОтчета, СтруктураДанныхСтраниц)
	
	Возврат Документы.МедицинскийОтчет.СформироватьТабличныйДокументПоРазделу(ИмяТекРаздела, ОтчетОбъект, ИмяОтчета, НаименованиеФормыОтчета, СтруктураДанныхСтраниц);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПеренумероватьСтроки(ТабДок)
	
	Инд = 1;
	Пока Истина Цикл
		Обл = ТабДок.Области.Найти("П010000101001_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Обл.Значение = Инд*2 - 1;
		Обл = ТабДок.Области.Найти("П010000101016_" + Формат(Инд, "ЧГ="));
		Обл.Значение = Инд*2;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Сохранение

&НаКлиенте
Процедура СохранитьНаКлиенте(ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если Не МедицинскаяОтчетностьКлиент.ПриЗаписиМедицинскогоОтчетаНаКлиенте(ЭтаФорма, , , 0) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	РезультатСохранения = ПередСохранением(ПодобныйОтчетСуществует, ВыбраннаяФорма, Ложь, "ФормаОтчета");
	НуженВопросПередСохранением = ПодобныйОтчетСуществует;
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Ложь, 0, ВыполняемоеОповещение, ПодобныйОтчетСуществует);
	Иначе
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
	Иначе
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение)
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, Вариант, "ФормаОтчета");
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		МедицинскаяОтчетностьКлиент.ПослеЗаписиМедицинскогоОтчета(ЭтаФорма);
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, Вариант, НаимТекРаздела)
	
	Перем ДокументОбъект;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
		ДокументОбъект = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если Не МедицинскаяОтчетность.ПриЗаписиМедицинскогоОтчетаНаСервере(ЭтаФорма, Автосохранение, Вариант, ДокументОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Значения реквизитов документа
	ОтчетСсылка = МедицинскаяОтчетность.ОтчетСсылка(ИмяОтчета);
	ДокументОбъект.ИсточникОтчета		= ИмяОтчета;
	ДокументОбъект.НаименованиеОтчета	= ОтчетСсылка.Наименование;
	ДокументОбъект.ДатаНачала			= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДокументОбъект.ДатаОкончания		= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ДокументОбъект.Комментарий			= Комментарий;
	ДокументОбъект.Периодичность		= СтруктураРеквизитовФормы.мПериодичность;
	ДокументОбъект.ВыбраннаяФорма		= СтруктураРеквизитовФормы.мВыбраннаяФорма;
	ДокументОбъект.Филиал				= СтруктураРеквизитовФормы.Филиал;
	ДокументОбъект.ДатаПодписи			= СтруктураРеквизитовФормы.ДатаПодписи;
	ДокументОбъект.Вид					= Вариант;
	ДокументОбъект.Ответственный		= Ответственный;
	СтруктураРеквизитовФормы.мВариант	= Вариант;
	
	// Подготовка данных редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// Подготовка списка сохранения
	СписокСохранения = Новый Структура;
	
	// Данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	
	// Данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	// Данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// Версия формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	ДокументОбъект.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	МедицинскаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект, ДокументОбъект, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// Обработчик ПриЗаписи
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТабДок", ПолеТабличногоДокументаФормаОтчета);
	СтруктураДанных.Вставить("СтруктураДанныхСтраниц", ЭтаФорма["СтруктураДанныхСтраниц"]);
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	Попытка
		Отчет = Отчеты[ИмяОтчета].Создать();
		Отчет.ПриЗаписи(ДокументОбъект, СтруктураДанных, Отказ, ОписаниеОшибки);
	Исключение
	КонецПопытки;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Записываем документ, хранящий данные отчета
	Попытка
		ДокументОбъект.Записать();
	Исключение
		Если Не Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), МедицинскаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(ДокументОбъект);
	
	// ПроцессыОбработкиДокументов
	//
	МедицинскаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект, СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = ДокументОбъект.Ссылка;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаСервере
Функция ПередСохранением(ПодобныйОтчетСуществует, Вариант, Автосохранение, ПоказателиОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	Возврат Сохранить(Автосохранение, Вариант, "ФормаОтчета");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если Не Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанныхСтраниц"][Раздел.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя		= ТекущаяОбласть.Имя;
		ЗначениеПоказателя	= ТекущаяОбласть.Значение;
		
		Если ЗначениеЗаполнено(ЗначениеПоказателя)
			// Нужно чтобы выводить пустые строки, чтобы вывести передаем 3 пробела
			Или (ТипЗнч(ЗначениеПоказателя) = Тип("Строка") И ЗначениеПоказателя = "   ")
		Тогда
			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИначеЕсли СтруктураДанныхПоля.Свойство(ИмяПоказателя) Тогда
			СтруктураДанныхПоля.Удалить(ИмяПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.МедицинскийОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПоле();
	Инд = 0;
	Пока Истина Цикл
		Инд = Инд + 1;
		Обл = ПолеТабличногоДокументаФормаОтчета.Области.Найти("УдалитьСтроку" + СтруктураРеквизитовФормы.мИдГруппы1 + "01_" + Инд);
		Если Обл = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	КонецЦикла;
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	ПеренумероватьСтроки(ПолеТабличногоДокументаФормаОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле() Экспорт
	
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерТелефона");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Директор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Бухгалтер");
	
	Для Каждого ДанныеСтраницы Из СтруктураДанныхСтраниц Цикл
		Для Каждого СвойствоСтруктуры Из ДанныеСтраницы Цикл
			Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(СвойствоСтруктуры.Ключ) = Неопределено Тогда
				СтруктураДанныхСтраниц.Удалить(СвойствоСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ПолеТабличногоДокументаФормаОтчета.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ПолеТабличногоДокументаФормаОтчета.Области[Инд];
		
		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	УдалитьМногстрочнуюЧасть();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМногстрочнуюЧасть()
	
	Перем ПромТаблицаДопСтрокРаздела;
	
	ИмяГруппыДопСтрок = СтруктураРеквизитовФормы.мИдГруппы1;
	
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.
		
		// Получим таблицу значений, содержащую данные дополнительных строк.
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
		
		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
		
		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
		
		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.
			
			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
				
				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
				НомерГрафы = 1;
				КолонкаТаблицыИмя = ИмяГруппыДопСтрок + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				ИмяПервойЯчейкиУдаляемойСтроки  = КолонкаТаблицыИмя + "_" + НСтр;
				
				// Область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ПолеТабличногоДокументаФормаОтчета.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				
				// Нмера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				
				МедицинскаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ПолеТабличногоДокументаФормаОтчета, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				
				// Удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
				
				НСтр = НСтр - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Филиал", СтруктураРеквизитовФормы.Филиал);
	ПараметрыОтчета.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	Если НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		// Отчет нового образца, сформированный на дату.
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", '00010101');
		ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета - 86400));
	Иначе
		// Отчет старого образца, сформированный за период.
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	КонецЕсли;
	
	ОтчетОбъект = МедицинскаяОтчетностьВызовСервера.ОтчетФабрикаМакетов(ИмяОтчета);
	ОтчетОбъект.ЗаполнитьОтчет(ВыбраннаяФорма, ПараметрыОтчета, ЭтаФорма, СтруктураРеквизитовФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
	
КонецФункции

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	МедицинскаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.МедицинскийОтчет.Форма.ФормаВыбора" Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		ЗагрузитьРазделыИзДокумента(ВыбранноеЗначение);
		ОбновитьТекущийРаздел();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийРаздел()
	
	ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела);
	УстановитьДоступностьОбластей(ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОбластей(ИмяТекРаздела)
	
	ОтчетОбъект = МедицинскаяОтчетностьВызовСервера.ОтчетФабрикаМакетов(ИмяОтчета);
	ОтчетОбъект.УстановитьДоступностьОбластей(ВыбраннаяФорма, ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРазделыИзДокумента(Документ)
	
	СписокСохранения = Документ.ДанныеОтчета.Получить();
	ПоказателиОтчета = СписокСохранения.ПоказателиОтчета;
	
	ОтчетОбъект = МедицинскаяОтчетностьВызовСервера.ОтчетФабрикаМакетов(ИмяОтчета);
	СписокРазделовДляЗагрузки = ОтчетОбъект.ПолучитьСписокРазделовДляЗагрузки(ВыбраннаяФорма);
	
	Если ПоказателиОтчета <> Неопределено Тогда
		Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
			ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
			Если СписокРазделовДляЗагрузки.Найти(СтрЗаменить(ИмяТекТабличноеПоле,"СтруктураДанных","")) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекТабличноеПоле	= ЭтаФорма["СтруктураДанныхСтраниц"][ИмяТекТабличноеПоле];
			ПоказателиТаблПоле	= ПоказателиСтраницы.Значение;
			
			Для Каждого Показатель Из ПоказателиТаблПоле Цикл
				ИмяПоказателя		= Показатель.Ключ;
				ЗначениеПоказателя	= Показатель.Значение;
				
				// Установим значение в таблице
				ТекТабличноеПоле.Вставить(ИмяПоказателя,ЗначениеПоказателя);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьВФормеВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНаКлиенте(Новый ОписаниеОповещения("ПерейтиКПодписаниюПослеСохранения", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодписаниюПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Истина, , Ложь, СтруктураРеквизитовФормы.мСохраненныйДок, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьРазблокироватьИзмененийНаФорме(Блокировать)
	
	Элементы.ПолеТабличногоДокументаФормаОтчета.ТолькоПросмотр	= Блокировать;
	Элементы.Подвал.ТолькоПросмотр								= Блокировать;
	Элементы.Сохранить.Доступность								= Не Блокировать;
	Элементы.ФормаЗаполнитьПоПрошлойОтчетности.Доступность		= Не Блокировать;
	Элементы.Заполнить.Доступность								= Не Блокировать;
	Элементы.Очистка.Доступность								= Не Блокировать;
	Элементы.Обновить.Доступность								= Не Блокировать;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТабличныеДокументыИСохранить()
	
	РазблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
	
	ТекстыОшибок = Новый Массив;
	
	Попытка
		СоответствиеТабДоков = ПолучитьСоответствиеТабДоковИзАрхива(СтруктураРеквизитовФормы.мСохраненныйДок, ТекстыОшибок);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		СоответствиеТабДоков = Новый Соответствие;
	КонецПопытки;
	
	Для Каждого ТекстОшибки Из ТекстыОшибок Цикл
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	СоответствиеТабДоковПодписанногоДокумента = Новый ФиксированноеСоответствие(СоответствиеТабДоков);
	
	СохраненныеДанныеПодписанногоДокумента = Новый Структура;
	СохраненныеДанныеПодписанногоДокумента.Вставить("ДеревоРазделов", РеквизитФормыВЗначение("РазделыОтчета", Тип("ДеревоЗначений")));
	
	ДокументОбъект = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	ДокументОбъект.СохраненныеДанныеПодписанногоДокумента = Новый ХранилищеЗначения(СохраненныеДанныеПодписанногоДокумента, Новый СжатиеДанных(9));
	ДокументОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьХранилищеЗначенийИПровестиИнициалищациюФормы()
	
	ДокументОбъект = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	ДокументОбъект.СохраненныеДанныеПодписанногоДокумента = Новый ХранилищеЗначения(Неопределено);
	ДокументОбъект.Записать();
	СоответствиеТабДоковПодписанногоДокумента = Неопределено;
	Инициализация();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщениеОПоврежденииПодписанныхДанных()
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Данные подписанного документа повреждены, попробуйте удалить подпись документа и сформировать отчет снова'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасшифровкуОтчета(ИмяОтчета, ИДИменПоказателей, ПараметрыОтчета)
	
	Если ИДИменПоказателей.Количество() > 0 Тогда
		
		ПользовательскиеНастройки = Неопределено;
		
		ИмяЯчейки = ИДИменПоказателей[0];
		СтруктураДанныхОтчета = УстановитьПараметрыРасшифровки(ВыбраннаяФорма, ИмяОтчета, ПараметрыОтчета, ИмяЯчейки);
		
		Если СтруктураДанныхОтчета <> Неопределено Тогда
			
			Если ПользовательскиеНастройки = Неопределено Тогда
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			КонецЕсли;
			
			ЕстьОтбор = ПользовательскиеНастройки.Элементы.Найти("Отбор") <> Неопределено;
			ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Ложь, ЕстьОтбор, Ложь);
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			ФормаОтчета = ПолучитьФорму(СтруктураДанныхОтчета.ИмяФормыРасшифровкиОтчета, ПараметрыФормы, ,Новый УникальныйИдентификатор);
			ПараметрыРасшифровки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
			
			ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаНачала = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
			ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ДатаОкончания = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
			
			Для Каждого Элемента ИЗ СтруктураДанныхОтчета.ПараметрыРасшифровки Цикл
				ПараметрыРасшифровки.Найти(Элемента.Ключ).Значение = Элемента.Значение;
			КонецЦикла;
			
			ФормаОтчета.СкомпоноватьРезультат();
			
			ФормаОтчета.Открыть();
			ФормаОтчета.ПользовательскиеНастройкиМодифицированы = Ложь;
			ФормаОтчета.ВариантМодифицирован = Ложь;
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Для выбранной ячейки расшифровка не существует.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПараметрыРасшифровки(ВыбраннаяФорма, ИмяОтчета, ПараметрыОтчета, ИмяЯчейки)
	
	ОтчетОбъект = МедицинскаяОтчетностьВызовСервера.ОтчетФабрикаМакетов(ИмяОтчета);
	Возврат ОтчетОбъект.УстановитьПараметрыРасшифровки(ВыбраннаяФорма, ПараметрыОтчета, ИмяЯчейки);
	
КонецФункции

&НаСервере
Процедура ПолеТабличногоДокументаФормаОтчетаВыборНаСервере(ИмяОбласти, СтандартнаяОбработка)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТабДок", ПолеТабличногоДокументаФормаОтчета);
	
	Попытка
		Отчет = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].Создать();
		Отчет.ПолеТабличногоДокументаВыбор(СтруктураДанных, ИмяОбласти, СтандартнаяОбработка);
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ТабличныйДокументПриИзмененииСодержимогоОбластиНаСервере(ИмяОбласти)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СтруктураДанныхСтраниц", ЭтаФорма["СтруктураДанныхСтраниц"]);
	СтруктураДанных.Вставить("ТабДок",ПолеТабличногоДокументаФормаОтчета);
	
	Попытка
		Отчет = Отчеты[СтруктураРеквизитовФормы.НаименованиеОтчета].Создать();
		Отчет.ПолеТабличногоДокументаПриИзменении(СтруктураДанных, ИмяОбласти);
	Исключение
	КонецПопытки		
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти