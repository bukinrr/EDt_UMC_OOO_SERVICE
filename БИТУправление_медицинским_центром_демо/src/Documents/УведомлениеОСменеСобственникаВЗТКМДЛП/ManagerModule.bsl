
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка  КАК Ссылка,
	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&КонечныеСостояния)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ВзаимодействиеЗавершено,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПередатьДанные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПередатьДанные,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеПодтверждения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ОжиданиеПодтверждения,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеОбмена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ОжиданиеОбмена,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПолучитьКвитанциюОФиксации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПолучитьКвитанциюОФиксации,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноОтозватьТовары)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноОтозватьТовары,
	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноЗакрытьВСвязиСВвозомВРФБезПодтверждения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноЗакрытьВСвязиСВвозомВРФБезПодтверждения
	
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераУпаковок.Ссылка                  КАК Ссылка,
	|		НомераУпаковок.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|	ИЗ
	|		Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ГДЕ
	|		НомераУпаковок.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НомераУпаковок.Ссылка                  КАК Ссылка,
	|		НомераУпаковок.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|	ИЗ
	|		Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ГДЕ
	|		НомераУпаковок.Ссылка = &Ссылка
	|	) КАК НомераУпаковок
	|СГРУППИРОВАТЬ ПО
	|	Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
	
	
	МожноПередатьДанные = Новый Массив;
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноПередатьДанные", МожноПередатьДанные);
	
	
	ОжиданиеОбмена = Новый Массив;
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПередано);
	Запрос.УстановитьПараметр("ОжиданиеОбмена", ОжиданиеОбмена);
	
	
	МожноПолучитьКвитанциюОФиксации = Новый Массив;
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПередано);
	Запрос.УстановитьПараметр("МожноПолучитьКвитанциюОФиксации", МожноПолучитьКвитанциюОФиксации);
	
	
	ОжиданиеПодтверждения = Новый Массив;
	ОжиданиеПодтверждения.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	ОжиданиеПодтверждения.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	Запрос.УстановитьПараметр("ОжиданиеПодтверждения", ОжиданиеПодтверждения);
	
	
	МожноОтозватьТовары = Новый Массив;
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отозвать);
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноОтозватьТовары", МожноОтозватьТовары);
	
	
	МожноЗакрытьВСвязиСВвозомВРФБезПодтверждения = Новый Массив;
	МожноЗакрытьВСвязиСВвозомВРФБезПодтверждения.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения);
	Запрос.УстановитьПараметр("МожноЗакрытьВСвязиСВвозомВРФБезПодтверждения", МожноЗакрытьВСвязиСВвозомВРФБезПодтверждения);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	
	ДальнейшиеДействия = Новый Массив;
	Если Выборка.ВзаимодействиеЗавершено Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
		Статусы.Принят  = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
		
	ИначеЕсли Выборка.ОжиданиеОбмена Тогда
		
		Если Выборка.МожноПолучитьКвитанциюОФиксации Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
		КонецЕсли;
		
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
		
	Иначе
		
		Если Выборка.МожноПередатьДанные Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
		КонецЕсли;
		
		Если Выборка.ОжиданиеПодтверждения Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияПодтверждения);
		КонецЕсли;
		
		Если Выборка.МожноОтозватьТовары Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеПереданныйТовар);
		КонецЕсли;
		
		Если Выборка.МожноЗакрытьВСвязиСВвозомВРФБезПодтверждения
		 Или ДальнейшиеДействия.Количество() = 1 И ДальнейшиеДействия[0] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия  , ДальнейшиеДействия);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ОтклоненДействия, ДальнейшиеДействия);
	
	Если Не Выборка.ВзаимодействиеЗавершено Тогда
		
		Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации Тогда
			
			СтатусОбработки = ДополнительныеПараметры.СтатусОбработки;
			
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Принято;
			
			Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично Тогда
				Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято;
			Иначе
				Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.Отклонено;
			КонецЕсли;
			
		ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходованииИмпорт Тогда
			
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ВвезеноВРФБезПодтверждения;
			
		Иначе // Входящее уведомление
			
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ПринятоИзМДЛП;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления.Вставить("Комментарий", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Комментарий"));
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	НовоеСостояние = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Отозвать;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПередано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком;
		КонецЕсли;
		
	Иначе
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовоеСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(ИсходноеСообщение);
	ОбъектXDTO = ИнтеграцияМДЛП.ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщения, "documents", ИнтеграцияМДЛП.ПространствоИмен());
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения);
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_СменаСобственникаНаТаможне Тогда
		ДанныеДокумента = ОбъектXDTO["change_owner"];
		СостояниеОтклонено = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара Тогда
		ДанныеДокумента = ОбъектXDTO["refusal_sender"];
		СостояниеОтклонено = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ;
	КонецЕсли;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_СменаСобственникаНаТаможне
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара Тогда
		
		Для Каждого НомерУпаковки Из ДанныеДокумента.order_details.sgtin Цикл
			
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = СостояниеОтклонено;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого НомерУпаковки Из ДанныеДокумента.order_details.sscc Цикл
			
			Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = СостояниеОтклонено;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Уведомление = Неопределено;
		Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
			ЗначениеСвойства = ОбъектXDTO[Свойство.Имя];
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				Уведомление = ЗначениеСвойства;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Уведомление <> Неопределено Тогда
			Для Каждого НомерУпаковки Из Уведомление.order_details.sgtin Цикл
				Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
				Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
					Строка.СостояниеПодтверждения = НовоеСостояние;
				Иначе
					Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
					Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
				КонецЕсли;
			КонецЦикла;
			Для Каждого НомерУпаковки Из Уведомление.order_details.sscc Цикл
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
				Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
					Строка.СостояниеПодтверждения = НовоеСостояние;
				Иначе
					Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
					Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОСменеСобственникаВЗТК(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	Входящее  = Перечисления.ТипыСообщенийМДЛП.Входящее;
	
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_СменаСобственникаНаТаможне);
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке);
	
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара);
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОСменеСобственникаВЗТК(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияПодтверждения);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОСменеСобственникаВЗТКМДЛП,
		НСтр("ru = 'Смена собственника в ЗТК'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделИмпортЭкспорт());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 80;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОСменеСобственникаВЗТКТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОСменеСобственникаВЗТКМДЛП КАК Уведомления
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|ГДЕ
	|	НЕ Уведомления.ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Организация = &Организация)
	|	И (&Ответственный = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Ответственный = &Ответственный)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОСменеСобственникаВЗТКМДЛП КАК Уведомления
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|ГДЕ
	|	НЕ Уведомления.ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Организация = &Организация)
	|	И (&Ответственный = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Ответственный = &Ответственный)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Уведомления.Ссылка                                                              КАК Ссылка,
	|	Уведомления.ПометкаУдаления                                                     КАК ПометкаУдаления,
	|	Уведомления.Номер                                                               КАК Номер,
	|	Уведомления.Дата                                                                КАК Дата,
	|	Уведомления.Проведен                                                            КАК Проведен,
	|	Уведомления.Основание                                                           КАК Основание,
	|	Уведомления.Организация                                                         КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)                         КАК МестоДеятельности,
	|	Уведомления.Ответственный                                                       КАК Ответственный,
	|	Уведомления.Комментарий                                                         КАК Комментарий,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие1,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие1,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие2,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие2,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие3,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие3,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие3,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие4,
	|	ЕСТЬNULL(Статусы.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Отсутствует))               КАК Статус
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП КАК Уведомления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОСменеСобственникаВЗТКТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеПереданныйТовар Тогда
		Возврат УведомлениеОбОтзывеПереданногоТовара(ДокументСсылка, ДополнительныеПараметры);
	Иначе
		Возврат УведомлениеОСменеСобственникаВЗТК(ДокументСсылка, ДальнейшееДействие);
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеПоПодтверждению(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеПоОтказу(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОшибкиПриПриемкеЛПНаСкладеПолучателя Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено); // Сообщение загружаться не будет
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходованииИмпорт Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеПоОприходованиюИмпорт(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке Тогда
		ЗагрузитьУведомлениеОПодтверждении(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара Тогда
		ЗагрузитьУведомлениеОбОтказе(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходованииИмпорт Тогда
		ЗагрузитьУведомлениеВладельцаОбОприходованииИмпорт(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не известная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление о смене собственника в зоне таможенного контроля МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОСменеСобственникаВЗТКМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОСменеСобственникаВЗТКМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление о смене собственника в зоне таможенного контроля МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление о смене собственника в зоне таможенного контроля МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление о смене собственника в зоне таможенного контроля МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСообщенийМДЛП

Функция УведомлениеОСменеСобственникаВЗТК(ДокументСсылка, ДальнейшееДействие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена                    КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                          КАК Ссылка,
	|	Шапка.Дата                                            КАК Дата,
	|	Шапка.Основание                                       КАК Основание,
	|	Шапка.Организация.РегистрационныйНомерУчастника       КАК ИдентификаторОрганизации,
	|	Шапка.Контрагент.РегистрационныйНомерУчастника        КАК ИдентификаторКонтрагента,
	|	Шапка.НомерДокумента                                  КАК НомерДокумента,
	|	Шапка.ДатаДокумента                                   КАК ДатаДокумента
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Результат[2].Пустой()) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	ИмяПакета = "change_owner";
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_СменаСобственникаНаТаможне;
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receiver_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбОтзывеПереданногоТовара(ДокументСсылка, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена               КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                     КАК Ссылка,
	|	Шапка.Дата                                       КАК Дата,
	|	Шапка.Основание                                  КАК Основание,
	|	Шапка.Организация.РегистрационныйНомерУчастника  КАК ИдентификаторОрганизации,
	|	Шапка.Контрагент.РегистрационныйНомерУчастника   КАК ИдентификаторКонтрагента
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отозвать)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отозвать)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "refusal_sender";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receiver_id" , Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	
	ПричинаОтзыва = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Причина");
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "reason", ПричинаОтзыва, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", Ложь, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеПоПодтверждению(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "counterparty_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Возврат ОпределитьДокументыСменыСобственности(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок);
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеПоОтказу(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "shipper_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Возврат ОпределитьДокументыСменыСобственности(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок);
	
КонецФункции

Функция ОпределитьДокументыСменыСобственности(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка  КАК Документ
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.НомераУпаковок КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерКиЗ В (&НомераПотребительскихУпаковок)
	|	И НЕ Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|	И Ссылка.Организация.РегистрационныйНомерУчастника = &ИдентификаторОрганизации
	|	И Ссылка.Контрагент.РегистрационныйНомерУчастника = &ИдентификаторКонтрагента
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Ссылка.Дата <= &ДатаОперации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ссылка  КАК Документ
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.ТранспортныеУпаковки КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерУпаковки В (&НомераТранспортныхУпаковок)
	|	И НЕ Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|	И Ссылка.Организация.РегистрационныйНомерУчастника = &ИдентификаторОрганизации
	|	И Ссылка.Контрагент.РегистрационныйНомерУчастника = &ИдентификаторКонтрагента
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Ссылка.Дата <= &ДатаОперации
	|");
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения);
	
	Запрос.УстановитьПараметр("КонечныеСостояния"            , КонечныеСостояния);
	Запрос.УстановитьПараметр("НомераПотребительскихУпаковок", НомераПотребительскихУпаковок);
	Запрос.УстановитьПараметр("НомераТранспортныхУпаковок"   , НомераТранспортныхУпаковок);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации"     , ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента"     , ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ДатаОперации"                 , ДатаОперации);
	
	ДокументыСУпаковками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Возврат ДокументыСУпаковками;
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеПоОприходованиюИмпорт(ДанныеДокумента)
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "owner_id");
	ИдентификаторОрганизацииОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "ИдентификаторОрганизацииОтправителя");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	Если ИдентификаторОрганизации = ИдентификаторКонтрагента Или ИдентификаторОрганизации = ИдентификаторОрганизацииОтправителя Тогда
		// Операция Оприходования была применена к собственным упаковкам, на том же МД.
		// В этом случае обрабатывать Уведомление владельца об оприходовании не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	
	НомераУпаковок = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НомераУпаковок, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НомераУпаковок, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = РегистрыСведений.УпаковкиМДЛП.ПолучитьДанныеУпаковок(НомераУпаковок, Тип("МенеджерВременныхТаблиц"));
	Запрос.Текст = "
	// Упаковки без родителей.
	|ВЫБРАТЬ
	|	ДанныеУпаковок.НомерУпаковки      КАК НомерУпаковки,
	|	ДанныеУпаковок.ГрупповаяУпаковка  КАК ГрупповаяУпаковка
	|ПОМЕСТИТЬ УпаковкиДляПоиска
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|ГДЕ
	|	ДанныеУпаковок.НомерГрупповойУпаковки = &ПустаяГрупповаяУпаковка
	|	И ДанныеУпаковок.МестоДеятельности.РегистрационныйНомерУчастника = &ИдентификаторОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	// Родительские упаковки самого верхнего уровня. Необходимы в случае если в 702 было использовано автоизъятие.
	|ВЫБРАТЬ
	|	РодительскиеУпаковкиСамогоВерхнегоУровня.НомерУпаковки      КАК НомерУпаковки,
	|	РодительскиеУпаковкиСамогоВерхнегоУровня.ГрупповаяУпаковка  КАК ГрупповаяУпаковка
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК РодительскиеУпаковкиСамогоВерхнегоУровня
	|		ПО
	|			РодительскиеУпаковкиСамогоВерхнегоУровня.НомерУпаковки = ДанныеУпаковок.ДокументРезерва
	|			И РодительскиеУпаковкиСамогоВерхнегоУровня.МестоДеятельности.РегистрационныйНомерУчастника = &ИдентификаторОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Получение документов, в которых указаны упаковки из оприходования.
	// Примечание. Брать документ напрямую из измерения ДокументРезерва РС.УпаковкиМДЛП нельзя,
	// т.к. документ может быть не проведен, а только загружен.
	|ВЫБРАТЬ
	|	Упаковки.Ссылка       КАК Документ,
	|	Упаковки.Ссылка.Дата  КАК Дата
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.НомераУпаковок КАК Упаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			УпаковкиДляПоиска КАК УпаковкиДляПоиска
	|		ПО
	|			УпаковкиДляПоиска.НомерУпаковки = Упаковки.НомерКиЗ
	|			И НЕ УпаковкиДляПоиска.ГрупповаяУпаковка
	|ГДЕ
	|	НЕ Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|	И Ссылка.Организация.РегистрационныйНомерУчастника = &ИдентификаторОрганизации
	|	И Ссылка.Контрагент.РегистрационныйНомерУчастника = &ИдентификаторКонтрагента
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Упаковки.Ссылка.Дата <= &ДатаОперации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Упаковки.Ссылка       КАК Документ,
	|	Упаковки.Ссылка.Дата  КАК Дата
	|ИЗ
	|	Документ.УведомлениеОСменеСобственникаВЗТКМДЛП.ТранспортныеУпаковки КАК Упаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			УпаковкиДляПоиска КАК УпаковкиДляПоиска
	|		ПО
	|			УпаковкиДляПоиска.НомерУпаковки = Упаковки.НомерУпаковки
	|			И УпаковкиДляПоиска.ГрупповаяУпаковка
	|ГДЕ
	|	НЕ Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|	И Ссылка.Организация.РегистрационныйНомерУчастника = &ИдентификаторОрганизации
	|	И Ссылка.Контрагент.РегистрационныйНомерУчастника = &ИдентификаторКонтрагента
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Упаковки.Ссылка.Дата <= &ДатаОперации
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Документ УБЫВ
	|";
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения);
	
	Запрос.УстановитьПараметр("КонечныеСостояния"       , КонечныеСостояния);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ДатаОперации"            , ДатаОперации);
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка" , Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	ДокументыСУпаковками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Возврат ДокументыСУпаковками;
	
КонецФункции

Процедура ЗагрузитьУведомлениеОПодтверждении(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтказе(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеВладельцаОбОприходованииИмпорт(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		// Новый документ, при загрузке Уведомления владельца об оприходовании не создается.
		Возврат;
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	ИсходныеНомераТранспортныхУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	НомераТранспортныхУпаковок = ?(ЗначениеЗаполнено(ИсходныеНомераТранспортныхУпаковок), ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеНомераТранспортныхУпаковок), Новый Массив);
	
	ИсходныеНомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераПотребительскихУпаковок = ?(ЗначениеЗаполнено(ИсходныеНомераПотребительскихУпаковок), ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеНомераПотребительскихУпаковок), Новый Массив);
	
	НеотработанныеТранспортныеУпаковкиДокумента = Новый Массив;
	Для Каждого Строка Из Документ.ТранспортныеУпаковки Цикл
		
		Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексУпаковки = НомераТранспортныхУпаковок.Найти(Строка.НомерУпаковки);
		Если ИндексУпаковки <> Неопределено Тогда
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения;
			
			НомераТранспортныхУпаковок.Удалить(ИндексУпаковки);
			
		Иначе
			НеотработанныеТранспортныеУпаковкиДокумента.Добавить(Строка.НомерУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	НеотработанныеПотребительскиеУпаковкиДокумента = Новый Массив;
	Для Каждого Строка Из Документ.НомераУпаковок Цикл
		
		Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексУпаковки = НомераПотребительскихУпаковок.Найти(Строка.НомерКИЗ);
		Если ИндексУпаковки <> Неопределено Тогда
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения;
			
			НомераПотребительскихУпаковок.Удалить(ИндексУпаковки);
			
		Иначе
			НеотработанныеПотребительскиеУпаковкиДокумента.Добавить(Строка.НомерКИЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеотработанныеТранспортныеУпаковкиДокумента.Количество() > 0 И (НомераТранспортныхУпаковок.Количество() > 0 Или НомераПотребительскихУпаковок.Количество() > 0) Тогда
		
		// Обработка случая, когда со стороны грузополучателя было автоизъятие.
		
		ТаблицаВложенныхУпаковок = РегистрыСведений.УпаковкиМДЛП.ПолучитьДанныеВсехПодчиненныхУпаковокБезИерархии(НеотработанныеТранспортныеУпаковкиДокумента, Новый Структура("МестоДеятельности", Документ.МестоДеятельности));
		ТаблицаВложенныхУпаковок.Колонки.Добавить("Отработана", Новый ОписаниеТипов("Булево"));
		
		Для Каждого НомерУпаковки Из НеотработанныеТранспортныеУпаковкиДокумента Цикл
			
			// Ограничения:
			// Нет возможности обработать транспортную упаковку, в случае если на стороне грузополучателя было автоизъятие, а информации о вложенных потребительских упаковках в ИБ нет.
			
			Очередь = ТаблицаВложенныхУпаковок.НайтиСтроки(Новый Структура("НомерГрупповойУпаковки", НомерУпаковки));
			Пока Очередь.Количество() > 0 Цикл
				
				СтрокаТаблицы = Очередь[0];
				Очередь.Удалить(0);
				
				Если Не СтрокаТаблицы.ГрупповаяУпаковка Тогда
					
					Если НомераПотребительскихУпаковок.Количество() > 0 Тогда
						
						ИндексУпаковки = НомераПотребительскихУпаковок.Найти(СтрокаТаблицы.НомерУпаковки);
						Если ИндексУпаковки <> Неопределено Тогда
							
							СтрокаТаблицы.Отработана = Истина;
							
							Если НеотработанныеПотребительскиеУпаковкиДокумента.Количество() > 0 Тогда
								Строка = Документ.НомераУпаковок.Найти(СтрокаТаблицы.НомерУпаковки, "НомерКиЗ");
								Если Строка <> Неопределено Тогда
									Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения;
								КонецЕсли;
							КонецЕсли;
							
							НомераПотребительскихУпаковок.Удалить(ИндексУпаковки);
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					
					Если НомераТранспортныхУпаковок.Количество() > 0 Тогда
						
						ИндексУпаковки = НомераТранспортныхУпаковок.Найти(СтрокаТаблицы.НомерУпаковки);
						Если ИндексУпаковки <> Неопределено Тогда
							
							СтрокаТаблицы.Отработана = Истина;
							
							Если НеотработанныеПотребительскиеУпаковкиДокумента.Количество() > 0 Тогда
								Строки = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("НомерГрупповойУпаковки", СтрокаТаблицы.НомерУпаковки));
								Если Строки.Количество() > 0 Тогда
									Для Каждого Строка Из Строки Цикл
										Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
							
							НомераТранспортныхУпаковок.Удалить(ИндексУпаковки);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ОчередныеВложенныеУпаковки = ТаблицаВложенныхУпаковок.НайтиСтроки(Новый Структура("НомерГрупповойУпаковки", СтрокаТаблицы.НомерУпаковки));
					
					Если СтрокаТаблицы.Отработана Тогда
						Для Каждого ВложеннаяСтрокаТаблицы Из ОчередныеВложенныеУпаковки Цикл
							ВложеннаяСтрокаТаблицы.Отработана = Истина;
						КонецЦикла;
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Очередь, ОчередныеВложенныеУпаковки);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НеотработанныеВложенныеПотребительскиеУпаковки = ТаблицаВложенныхУпаковок.НайтиСтроки(Новый Структура("ДокументРезерва, ГрупповаяУпаковка, Отработана", НомерУпаковки, Ложь, Ложь));
			Если НеотработанныеВложенныеПотребительскиеУпаковки.Количество() = 0 Тогда
				Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияВладельцаОбОприходовании(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
