
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
	Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ВвезеноВРФБезПодтверждения;
	Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления.Вставить("Комментарий", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Комментарий"));
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Входящее = Перечисления.ТипыСообщенийМДЛП.Входящее;
	
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходованииИмпорт);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП,
		НСтр("ru = 'Уведомление владельца о ввозе ЛП в РФ без подтверждения грузоотправителя'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделИмпортЭкспорт());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 62;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП КАК Уведомления
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|ГДЕ
	|	НЕ Уведомления.ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Организация = &Организация)
	|	И (&Ответственный = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Ответственный = &Ответственный)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП КАК Уведомления
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|ГДЕ
	|	НЕ Уведомления.ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Организация = &Организация)
	|	И (&Ответственный = НЕОПРЕДЕЛЕНО ИЛИ Уведомления.Ответственный = &Ответственный)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Уведомления.Ссылка                                                              КАК Ссылка,
	|	Уведомления.ПометкаУдаления                                                     КАК ПометкаУдаления,
	|	Уведомления.Номер                                                               КАК Номер,
	|	Уведомления.Дата                                                                КАК Дата,
	|	Уведомления.Проведен                                                            КАК Проведен,
	|	Уведомления.Основание                                                           КАК Основание,
	|	Уведомления.Организация                                                         КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)                         КАК МестоДеятельности,
	|	Уведомления.Ответственный                                                       КАК Ответственный,
	|	Уведомления.Комментарий                                                         КАК Комментарий,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие1,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие1,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие2,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие2,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие3,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие3,
	|	ЕСТЬNULL(Статусы.ДальнейшееДействие4,
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется))  КАК ДальнейшееДействие4,
	|	ЕСТЬNULL(Статусы.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Отсутствует))               КАК Статус
	|ИЗ
	|	Документ.УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП КАК Уведомления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = Уведомления.Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УведомлениеВладельцаОбОприходованииИмпорт(ДокументСсылка);
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходованииИмпорт Тогда
		Возврат ОпределитьУведомлениеВладельцаОбОприходованииИмпорт(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходованииИмпорт Тогда
		ЗагрузитьУведомлениеВладельцаОбОприходованииИмпорт(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление владельца о ввозе ЛП в РФ без подтверждения грузоотправителя МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП";
	ВозвращаемоеЗначение.КомандаСвязать                       = НСтр("ru = 'Создать уведомление владельца о ввозе ЛП в РФ без подтверждения грузоотправителя МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСвязать                    = "СвязатьУведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление владельца о ввозе ЛП в РФ без подтверждения грузоотправителя МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление владельца о ввозе ЛП в РФ без подтверждения грузоотправителя МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление владельца о ввозе ЛП в РФ без подтверждения грузоотправителя МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСообщенийМДЛП

Функция УведомлениеВладельцаОбОприходованииИмпорт(ДокументСсылка)
	
	Сообщения = Новый Массив;
	
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеВладельцаОбОприходованииИмпорт(ДанныеДокумента)
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "owner_id");
	ИдентификаторОрганизацииОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "ИдентификаторОрганизацииОтправителя");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	Если ИдентификаторОрганизации = ИдентификаторКонтрагента Или ИдентификаторОрганизации = ИдентификаторОрганизацииОтправителя Тогда
		// Операция Оприходования была применена к собственным упаковкам, на том же МД.
		// В этом случае обрабатывать Уведомление владельца об оприходовании не нужно.
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
	
КонецФункции

Функция ЗагрузитьУведомлениеВладельцаОбОприходованииИмпорт(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "owner_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Контрагент);
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		
		GTIN = Лев(НомерУпаковки, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN", GTIN));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = НомерУпаковки;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения;
		
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = НомерУпаковки;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ВвезеноВРФБезПодтверждения;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
