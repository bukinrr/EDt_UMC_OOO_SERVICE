&НаКлиенте
Перем мТекущаяДатаДокумента Экспорт; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера.

&НаКлиенте
Перем КолонкиДерева;

&НаКлиенте
Перем мТекущиеДанныеКопирования;

&НаКлиенте
Перем мДанныеКопирования;

&НаКлиенте
Перем мОперацияКопирования;

&НаКлиенте
Перем мСтруктураСтрокиГрафика;

// Используется для обхода неотработки платформой обязательств по автовысоте ячейки дерева без обращения к серверу.
&НаКлиенте
Перем мФлагИмитацияИзмененияСтрокиДереваГрафиков;

&НаКлиенте
Перем мНаименованиеТекущегоВидаВремени;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);

	Если Объект.Ссылка.Пустая() Тогда
				
		Если Не ЗначениеЗаполнено(Объект.ПлДата) Тогда
			Объект.ПлДата = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), 1));
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Объект.Режим) Тогда
			РежимЗаписиНаПрием = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимЗаписиНаПрием");
			Если РежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинет Тогда
				Объект.Режим = Перечисления.ВидыУстановкиГрафиков.Кабинеты;
			ИначеЕсли РежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинетКВрачу Тогда
				Объект.Режим = Перечисления.ВидыУстановкиГрафиков.СотрудникиКабинеты;
			Иначе
				Объект.Режим = Перечисления.ВидыУстановкиГрафиков.Сотрудники;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВремяУказВручную = 2;
		
	Если ЗначениеЗаполнено(Объект.ПлДата) Тогда
		ДатаНачала = НачалоМесяца(Объект.ПлДата);
		ДатаОкончания = КонецМесяца(Объект.ПлДата);
	КонецЕсли;
	
	ВремяНачала    = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы");
	ВремяОкончания = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяОкончанияРаботы");
	
	Элементы.ДеревоГрафиков.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	НастроитьПоляФормыПоРежимуГрафика();
	СформироватьДеревоГрафикаКлиент();
	
	МесяцГрафика = РаботаСДиалогамиКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПлДата);
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	ВидВремениПриИзменении(Неопределено);	
    ВремяУказВручнуюПриИзменении(Неопределено);

	мСтруктураСтрокиГрафика = СформироватьСтруктуруСтрокиГрафика();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(ТекущийОбъект,,ЭтаФорма);
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ": "+Строка(ТекущийОбъект.Режим);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ГрафикиРаботыИзменение", Новый Структура("Дата",Объект.ПлДата));
	СформироватьДеревоГрафикаКлиент();
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыполнитьУстановкуГрафиковРаботы" Тогда
		СкопироватьГрафикиСервер(Параметр);
		СформироватьДеревоГрафикаКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииСервер(мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаНачалаВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Объект.ПлДата, ЭтаФорма);
	
	ДатаНачала		= НачалоМесяца(Объект.ПлДата);
	ДатаОкончания	= КонецМесяца (Объект.ПлДата);
	МесяцГрафика = РаботаСДиалогамиКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПлДата);
	
	ПеренестиСтрокиГрафикаВРедактируемыйМесяц();
	СформироватьДеревоГрафикаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцГрафикаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	РаботаСДиалогамиКлиент.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, Объект.ПлДата, МесяцГрафика);

	ДатаНачала		= НачалоМесяца(Объект.ПлДата);
	ДатаОкончания	= КонецМесяца (Объект.ПлДата);
	МесяцГрафика	= РаботаСДиалогамиКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПлДата);
	
	ПеренестиСтрокиГрафикаВРедактируемыйМесяц();
	СформироватьДеревоГрафикаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокиГрафикаВРедактируемыйМесяц()
	
	Для Каждого СтрокаГрафика Из Объект.ГрафикиРаботы Цикл
		
		Если НачалоМесяца(СтрокаГрафика.Дата) <> Объект.ПлДата Тогда
			
			Если День(СтрокаГрафика.Дата) <= День(КонецМесяца(Объект.ПлДата)) Тогда
				СтрокаГрафика.Дата = Дата(Год(Объект.ПлДата), Месяц(Объект.ПлДата), День(СтрокаГрафика.Дата));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер(НачальнаяДатаДокумента)
	
	РаботаСДиалогамиСервер.ПроверитьНомерДокумента(ЭтаФорма, НачальнаяДатаДокумента);	
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаАвтозаполнить(Команда)
	
	Отказ = Ложь;
	
	// Проверка заполнения параметров.
	ЭтоГрафикСотрудников = РежимГрафикСотрудников();
	ВГрафикеИКабинетИСотрудник	= Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники")
									Или Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты");
	
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные[?(ЭтоГрафикСотрудников,"Сотрудник","Кабинет")])
	Тогда
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В графике не выбрана колонка %1 для которого будет выполнено заполнение'"),
							?(ЭтоГрафикСотрудников,НСтр("ru='сотрудника'"),НСтр("ru='кабинета'")));
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СпособЗаполнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан способ заполнения!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана дата начала заполнения!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана дата окончания заполнения!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если ВремяУказВручную = 1 И Не ЗначениеЗаполнено(Смена) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана смена для заполнения!'"));
		Отказ = Истина;
	ИначеЕсли ВремяУказВручную = 2 
			И Не ЗначениеЗаполнено(ВремяНачала) 
			И Не ЗначениеЗаполнено(ВремяОкончания)
	Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указано время для заполнения!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не все параметры автозаполнения указаны. Операция не выполнена!'"));
		Возврат;
	КонецЕсли;

	Участник = ТекущиеДанные[?(ЭтоГрафикСотрудников,"Сотрудник","Кабинет")];
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Заполнить график для %1?'"),
					ПолучитьНаименованиеСервер(Участник));
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаполнения = Новый Структура("Участник, КонтрУчастник, СпособЗаполнения, ДатаНачала, ДатаОкончания, Замещать, ВидВремени, Название, Комментарий");
		Если ВремяУказВручную = 1 Тогда
			ПараметрыЗаполнения.Вставить("Смена");
		ИначеЕсли ВремяУказВручную = 2 Тогда
			ПараметрыЗаполнения.Вставить("ВремяНачала");
			ПараметрыЗаполнения.Вставить("ВремяОкончания");
		КонецЕсли;
		
		ПараметрыЗаполнения.СпособЗаполнения = СпособЗаполнения;
		ПараметрыЗаполнения.Замещать = ЗаполнениеЗамещать = 0;
		ПараметрыЗаполнения.Участник = Участник;
		
		Если ВГрафикеИКабинетИСотрудник Тогда
			ПараметрыЗаполнения.Вставить("КонтрУчастник", ЗаполнениеКонтрУчастник);
		КонецЕсли;
		
		ПараметрыЗаполнения.Название	= СобытиеНазвание; 
		ПараметрыЗаполнения.Комментарий = СобытиеКомментарий;
		ПараметрыЗаполнения.ВидВремени	= ВидВремени;
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения,ЭтаФорма);
		ЗаполнитьГрафикСервер(ПараметрыЗаполнения);
		
		СформироватьДеревоГрафикаКлиент();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикСервер(ПараметрыЗаполнения)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьГрафик(ПараметрыЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеСервер(Сотрудник)
	Возврат Сотрудник.Наименование;
КонецФункции

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	СформироватьДеревоГрафикаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		КолонкаДерева = КолонкиДерева.Получить(ТекущиеДанные.Участник);
		Если КолонкаДерева <> Неопределено Тогда
			Колонка = Элементы.Найти(КолонкаДерева);
			Если Элементы.ДеревоГрафиков.ТекущийЭлемент <> Колонка Тогда
				Элементы.ДеревоГрафиков.ТекущийЭлемент = Колонка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбновитьОсновныеВидыЗаполненияГрафиков();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоГрафикаКлиент()
	
	Перем ТекущаяДатаГрафика;
	Перем ТекущийУчастник;
	Перем ИдентификаторСтроки;
	
	// Сохранение текущей позиции в дереве.
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		Если Не ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
			ТекущаяДатаГрафика = ТекущиеДанные.Дата;
			Если ЗначениеЗаполнено(ТекущаяДатаГрафика) Тогда
				ТекущаяКолонка = Элементы.ДеревоГрафиков.ТекущийЭлемент;
				Если ТекущаяКолонка <> Элементы.ДеревоГрафиковДата Тогда
					Для Каждого кзКолонка Из КолонкиДерева Цикл
						Если кзКолонка.Значение = ТекущаяКолонка.Имя Тогда
							ТекущийУчастник = кзКолонка.Ключ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Обновление дерева.
	ДеревоГрафиков.ПолучитьЭлементы().Очистить();
	СформироватьДеревоГрафика(КолонкиДерева);
	
	// Восстановление текущей позиции в дереве.
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		// По строке графика.
		СтрокиДерева = ДеревоГрафиков.ПолучитьЭлементы();
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если НайтиПозициюДереваПоИдентификаторуСтрокиГрафика(СтрокаДерева,КолонкиДерева,ИдентификаторСтроки) Тогда
				Прервать;
			Иначе
				СтрокиДерева2ур = СтрокаДерева.ПолучитьЭлементы();
				Для Каждого СтрокаДерева Из СтрокиДерева2ур Цикл
					Если НайтиПозициюДереваПоИдентификаторуСтрокиГрафика(СтрокаДерева,КолонкиДерева,ИдентификаторСтроки) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоГрафиков.ПолучитьЭлементы() Цикл
		Элементы.ДеревоГрафиков.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	// Ошибка платформы, несмотря на установленный состав команд, при динамическом изменении табилцы после
	// открытия формы, все равно показывается стандратная команда "Копировать", отключенная для него.
	Элементы.ДеревоГрафиковКонтекстноеМенюКопированиеИВыделение.Видимость = Ложь;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеЦветаФона()
	
	// Очистка старого оформления.
	мОбрИнд = УсловноеОформление.Элементы.Количество() - 1;
	Для сч = 0 по мОбрИнд Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы[мОбрИнд-сч];
		Если ЭлементОформления.Оформление.Элементы.Количество() <> 0
			И ЭлементОформления.Оформление.Элементы[0].Параметр = Новый ПараметрКомпоновкиДанных("ЦветФона")
		Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементОформления);
		КонецЕсли;
		
	КонецЦикла;
	
	УсловноеОформление.Элементы.Очистить();
	ПЭ = Элементы.ДеревоГрафиков.ПодчиненныеЭлементы;	
	Для Каждого подчЭлемент Из ПЭ Цикл
		Имя = ПодчЭлемент.Имя;
		Если Найти(Имя,"Представление") = 0 И ПЭ.Индекс(подчЭлемент)>0 Тогда
			Для Каждого стрЦвета Из ЦветаВидовВремени Цикл
				Если стрЦвета.Цвет <> Новый Цвет(0,0,0) Тогда
					ЭлементОУ = УсловноеОформление.Элементы.Добавить();
					ЭлементОУ.Использование    = Истина;
					ЭлементОУ.Оформление.УстановитьЗначениеПараметра("ЦветФона", стрЦвета.Цвет);
					ЭлементУсловия                = ЭлементОУ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоГрафиков." + Строка(Имя));
					ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
					ЭлементУсловия.ПравоеЗначение = стрЦвета.СписокИдентификаторов;
					ЭлементУсловия.Использование  = Истина;
					ОформляемоеПоле      = ЭлементОУ.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоГрафика(КолонкиДерева)
	
	пчВидыГрафиков = Перечисления.ВидыУстановкиГрафиков;
	мРежимПоСотруднику = Объект.Режим = пчВидыГрафиков.Сотрудники Или Объект.Режим = пчВидыГрафиков.СотрудникиКабинеты;
	ПолеКолонок = ?(мРежимПоСотруднику,"Сотрудник","Кабинет");
	
	мДеревоГрафиков = РеквизитФормыВЗначение("ДеревоГрафиков");
	Если Ложь Тогда мДеревоГрафиков = Новый ДеревоЗначений КонецЕсли;
	мДеревоГрафиков.Строки.Очистить();
	мДеревоГрафиков.Колонки.Очистить();
	мДеревоГрафиков.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата,Число",Новый КвалификаторыЧисла(10,0),Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	КолонкиДерева = Новый Соответствие;
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Объект.ГрафикиРаботы.Сортировать("Дата, ВремяНачала, ВремяОкончания, Смена");
	
	// Создание колонок дерева графика.
	Для Каждого СтрокаУчастникГрафика Из Объект.Участники Цикл
		Если ЗначениеЗаполнено(СтрокаУчастникГрафика.Участник)
			И КолонкиДерева.Получить(СтрокаУчастникГрафика.Участник) = Неопределено 
		Тогда
			КолонкаЗначение = мДеревоГрафиков.Колонки.Добавить("Колонка" + СтрЗаменить(Новый УникальныйИдентификатор,"-","_"), ТипЧисло);
			КолонкаПредставление = мДеревоГрафиков.Колонки.Добавить(КолонкаЗначение.Имя+"Представление", ТипСтрока);
			Если мРежимПоСотруднику Тогда
				КолонкаПредставление.Заголовок = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаУчастникГрафика.Участник);
			Иначе
				КолонкаПредставление.Заголовок = Строка(СтрокаУчастникГрафика.Участник);
			КонецЕсли;
			КолонкиДерева.Вставить(СтрокаУчастникГрафика.Участник, КолонкаЗначение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Создание строк верхнего уровня.
	мсДаты = Новый Массив;
	ТекДата = НачалоМесяца(Объект.ПлДата);
	Пока ТекДата < КонецМесяца(Объект.ПлДата) Цикл
		
		СтрокаДереваДата = ДобавитьСтрокуДереваГрафиков(мДеревоГрафиков.Строки, КолонкиДерева);
		СтрокаДереваДата.Дата = ТекДата;
		
		// Определение количества строк в дате (если одна, то подстроки не создаются).
		МахКоличествоСтрокНаДату = 0;
		Отбор = Новый Структура("Дата,"+ПолеКолонок, СтрокаДереваДата.Дата);
		Для Каждого кзКолонка Из КолонкиДерева Цикл
			Отбор[ПолеКолонок] = кзКолонка.Ключ;
			МахКоличествоСтрокНаДату = Макс(МахКоличествоСтрокНаДату, Объект.ГрафикиРаботы.НайтиСтроки(Отбор).Количество());
		КонецЦикла;
		
		// Заполнение значений на дату ТекДата.
		Для Каждого кзКолонка Из КолонкиДерева Цикл
			Отбор[ПолеКолонок] = кзКолонка.Ключ;
			СтрокиГрафика = Объект.ГрафикиРаботы.НайтиСтроки(Отбор);
			сч = 1;
			Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
				
				Если МахКоличествоСтрокНаДату = 1 или сч=1 Тогда
					СтрокаДерева = СтрокаДереваДата;
				ИначеЕсли сч-1 <= СтрокаДереваДата.Строки.Количество() Тогда
					СтрокаДерева = СтрокаДереваДата.Строки[сч - 2];
				Иначе
					СтрокаДерева = ДобавитьСтрокуДереваГрафиков(СтрокаДереваДата.Строки, КолонкиДерева);
				КонецЕсли;

				СтрокаДерева[кзКолонка.Значение+"Представление"] = СформироватьПредствлениеЯчейкиДереваГрафиков(СтрокаГрафика, Объект.Режим);
				СтрокаДерева[кзКолонка.Значение] = СтрокаГрафика.ПолучитьИдентификатор();
				
				сч = сч + 1;
			КонецЦикла;
			
		КонецЦикла;
		
		ТекДата = ТекДата + 86400;
		
	КонецЦикла;
		
	// Удаление старых колонок элемента таблицы формы, оставляется только предопределенная колонка даты.
	ЭлементДеревоГрафиков = Элементы.ДеревоГрафиков;
	мОбрИнд = ЭлементДеревоГрафиков.ПодчиненныеЭлементы.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		Элемент = ЭлементДеревоГрафиков.ПодчиненныеЭлементы[мОбрИнд-сч];
		Если Элемент.Имя <> "ДеревоГрафиковДата" Тогда
			Элементы.Удалить(Элемент)
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементДеревоГрафиков.ПодчиненныеЭлементы Цикл
		Если Элемент.Имя <> "ДеревоГрафиковДата" Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыДобавляемые = Новый Массив;
	РеквизитыУдаляемые	 = Новый Массив;
	Для Каждого Реквизит Из ПолучитьРеквизиты("ДеревоГрафиков") Цикл
		Если Реквизит.Имя <> "Дата" Тогда
			РеквизитыУдаляемые.Добавить("ДеревоГрафиков." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого кзКолонка Из КолонкиДерева Цикл
		РеквизитыДобавляемые.Добавить(Новый РеквизитФормы(кзКолонка.Значение, ТипЧисло,  "ДеревоГрафиков"));
		РеквизитыДобавляемые.Добавить(Новый РеквизитФормы(кзКолонка.Значение + "Представление", ТипСтрока, "ДеревоГрафиков"));
	КонецЦикла;
	ИзменитьРеквизиты(РеквизитыДобавляемые, РеквизитыУдаляемые);
	ЗначениеВРеквизитФормы(мДеревоГрафиков, "ДеревоГрафиков");
	
	Для Каждого СтрокаУчастникГрафика Из Объект.Участники Цикл
		ИмяКолонки = КолонкиДерева.Получить(СтрокаУчастникГрафика.Участник);
		Если ИмяКолонки <> Неопределено Тогда
			Если Элементы.Найти(ИмяКолонки) = Неопределено Тогда
				ЭлементКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ЭлементДеревоГрафиков);
				ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
				ЭлементКолонка.ПутьКДанным = "ДеревоГрафиков." + ИмяКолонки + "Представление";
				ЭлементКолонка.АвтоВысотаЯчейки = Истина;
				ЭлементКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
				ЭлементКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
				ЭлементКолонка.РедактированиеТекста = Ложь;
				
				Если ТипЗнч(СтрокаУчастникГрафика.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
					ЭлементКолонка.Заголовок = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаУчастникГрафика.Участник);
				Иначе
					ЭлементКолонка.Заголовок = Строка(СтрокаУчастникГрафика.Участник);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбновитьУсловноеОформлениеЦветаФонаЯчеекДерева();
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПозициюДереваПоИдентификаторуСтрокиГрафика(СтрокаДерева,КолонкиДерева,ИдентификаторСтроки)
	
	Для Каждого кзКолонка Из КолонкиДерева Цикл
		
		Если СтрокаДерева[кзКолонка.Значение] = ИдентификаторСтроки Тогда
			Элементы.ДеревоГрафиков.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			Элементы.ДеревоГрафиков.ТекущийЭлемент = Элементы.Найти(кзКолонка.Значение);
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьСтрокуДереваГрафиков(УровеньДерева, Колонки)
	
	СтрокаДерева = УровеньДерева.Добавить();
	Для сч = 1 По Колонки.Количество() * 2 Цикл
		Если ТипЗнч(СтрокаДерева[сч]) = Тип("Число") Тогда
			СтрокаДерева[сч] = -1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаДерева;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеТекущейПозицииДереваГрафика()

	Перем ТекущееЗначение;
	
	Если Элементы.ДеревоГрафиков.ТекущаяСтрока = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		ТекущаяСтрока = ДеревоГрафиков.НайтиПоИдентификатору(Элементы.ДеревоГрафиков.ТекущаяСтрока);	
		Если ТекущаяСтрока = Неопределено Тогда
			Результат = Неопределено;
		Иначе
			Результат = Новый Структура("Дата, Сотрудник, Кабинет, ВремяНачала, ВремяОкончания, Смена, ИдентификаторСтроки, Участник, ИмяКолонки, ВидВремени, Название, Комментарий");
			
			ТекущаяКолонка = Элементы.ДеревоГрафиков.ТекущийЭлемент;
			Если ТекущаяКолонка <> Элементы.ДеревоГрафиковДата Тогда
				ТекущееЗначение = ТекущаяСтрока[ТекущаяКолонка.Имя];
			КонецЕсли;
			
			Если ?(ТекущееЗначение = Неопределено,-1,ТекущееЗначение) >= 0 Тогда
				СтрокаГрафика = Объект.ГрафикиРаботы.НайтиПоИдентификатору(ТекущееЗначение);
			КонецЕсли;
				
			Если СтрокаГрафика = Неопределено Тогда
				Если ТипЗнч(ТекущаяСтрока.Дата) = Тип("Дата") Тогда
					Результат.Дата = ТекущаяСтрока.Дата;
				Иначе
					Результат.Дата = ТекущаяСтрока.ПолучитьРодителя().Дата;	
				КонецЕсли;
			КонецЕсли;

			Если ТекущееЗначение = -1
				Или (ТекущееЗначение <> Неопределено И СтрокаГрафика = Неопределено)
			Тогда
				
				Для Каждого кзКолонка Из КолонкиДерева Цикл
					Если кзКолонка.Значение = ТекущаяКолонка.Имя Тогда
						Участник = кзКолонка.Ключ;
						Результат.ИмяКолонки = ТекущаяКолонка.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
					Результат.Сотрудник = Участник
				ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.Оборудование") Тогда
					Результат.Кабинет = Участник
				КонецЕсли;
				Результат.ВидВремени			= ВидВремени;
				Результат.Название				= СобытиеНазвание;
				Результат.Комментарий			= СобытиеКомментарий;
			ИначеЕсли ТекущееЗначение <> Неопределено Тогда
				СтрокаГрафика = Объект.ГрафикиРаботы.НайтиПоИдентификатору(ТекущееЗначение);
				ЗаполнитьЗначенияСвойств(Результат, СтрокаГрафика);
				Результат.ИмяКолонки = ТекущаяКолонка.Имя;
				Результат.ИдентификаторСтроки = ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьПараметрыФормыВводаВремени(ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура("Дата", ТекущиеДанные.Дата);
	Если Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники") Тогда
		ПараметрыФормы.Вставить("ВыбиратьСотрудника", Истина);
		ПараметрыФормы.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
	ИначеЕсли Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") Тогда
		ПараметрыФормы.Вставить("ВыбиратьКабинет", Истина);
		ПараметрыФормы.Вставить("Кабинет", ТекущиеДанные.Кабинет);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВводаВремениВДиалоге(РезультатВвода, ТекущиеДанные, НоваяСтрокаГрафика = Ложь)
	
	Если РезультатВвода <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Если НоваяСтрокаГрафика Тогда
			
			Для Каждого КлючЗначение Из мСтруктураСтрокиГрафика	Цикл
				мСтруктураСтрокиГрафика[КлючЗначение.Ключ] = Неопределено;
			КонецЦикла;
			
			СтрокаГрафика = мСтруктураСтрокиГрафика; 			СтрокаГрафика.Дата = ТекущиеДанные.Дата;
		Иначе
			СтрокаГрафика = Объект.ГрафикиРаботы.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
		КонецЕсли;
		
		СтрокаГрафика.ВидВремени	= РезультатВвода.ВидВремени;
		СтрокаГрафика.Название		= РезультатВвода.Название;
		СтрокаГрафика.Комментарий	= РезультатВвода.Комментарий;
		
		Если ЗначениеЗаполнено(РезультатВвода.Смена) Тогда
			СтрокаГрафика.Смена = РезультатВвода.Смена;
			СтрокаГрафика.ВремяНачала = Дата(1,1,1);
			СтрокаГрафика.ВремяОкончания = Дата(1,1,1);
		Иначе
			СтрокаГрафика.Смена = Неопределено;
			СтрокаГрафика.ВремяНачала	 = РезультатВвода.ВремяНачала;
			СтрокаГрафика.ВремяОкончания = РезультатВвода.ВремяОкончания;
		КонецЕсли;
		
		Если Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники") Тогда
			
			СтрокаГрафика.Кабинет	= ТекущиеДанные.Кабинет;
			СтрокаГрафика.Сотрудник = РезультатВвода.Сотрудник;
			
		ИначеЕсли Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Кабинеты") Тогда
			
			СтрокаГрафика.Кабинет	= ТекущиеДанные.Кабинет;
			
		ИначеЕсли Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") Тогда
			
			СтрокаГрафика.Кабинет	= РезультатВвода.Кабинет;
			СтрокаГрафика.Сотрудник = ТекущиеДанные.Сотрудник;
			
		ИначеЕсли Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Сотрудники") Тогда
			
			СтрокаГрафика.Сотрудник = ТекущиеДанные.Сотрудник;
			
		КонецЕсли;
		
		Если НоваяСтрокаГрафика Тогда
			РазместитьНовыеСтрокиГрафикаПоСтруктуреСтроки();	
		Иначе
			ЯчейкаДерева = НайтиЯчейкуДереваПоИдентификаторуСрокиГрафика(ТекущиеДанные.ИдентификаторСтроки);
			Если ЯчейкаДерева <> Неопределено Тогда
				ОбновитьДанныеЯчейкиДереваГрафиков(ЯчейкаДерева.СтрокаДерева, 
												   ЯчейкаДерева.ИмяКолонки, 
												   ТекущиеДанные.ИдентификаторСтроки,
												   СформироватьПредствлениеЯчейкиДереваГрафиков(СтрокаГрафика, Объект.Режим),
												   ТекущиеДанные.ИдентификаторСтроки,
												   РезультатВвода.ВидВремени);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредствлениеЯчейкиДереваГрафиков(СтрокаГрафика, Режим)
	
	Если ЗначениеЗаполнено(СтрокаГрафика.Смена) Тогда 
		Представление = Строка(СтрокаГрафика.Смена)
					  + "  (" + Формат(СтрокаГрафика.Дата, "ДФ='дд ддд'") + ")";
														 
	Иначе
		Представление = Формат(СтрокаГрафика.ВремяНачала,	"ДФ=ЧЧ:мм; ДП=00:00")
					  + " - "
					  + Формат(СтрокаГрафика.ВремяОкончания, "ДФ=ЧЧ:мм; ДП=24:00")
					  + "  (" + Формат(СтрокаГрафика.Дата, "ДФ='дд ддд'") + ")";
	КонецЕсли;	

	Если Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") Тогда
		Представление = СокрЛП(Представление + Символы.ПС + Строка(СтрокаГрафика.Кабинет));
	ИначеЕсли Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники") Тогда
		Представление = СокрЛП(Представление + Символы.ПС + Строка(СтрокаГрафика.Сотрудник));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеЯчейкиДереваГрафиков(СтрокаДерева, ИмяКолонки, Значение, Представление, ИдентификаторСтроки, ВидВремени = Неопределено)
	
	СтрокаДерева[ИмяКолонки] = Значение;
	СтрокаДерева[ИмяКолонки+"Представление"] = Представление;
				
	мФлагИмитацияИзмененияСтрокиДереваГрафиков = Истина;
	Элементы.ДеревоГрафиков.ИзменитьСтроку();
	Элементы.ДеревоГрафиков.ЗакончитьРедактированиеСтроки(Ложь);
	мФлагИмитацияИзмененияСтрокиДереваГрафиков = Ложь;

	// Обновление условного оформления ЦветаФона в ячейке.
	ОбновитьУсловноеОформлениеЯчейкиДереваГрафиков(ИдентификаторСтроки, ВидВремени)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУсловноеОформлениеЯчейкиДереваГрафиков(ИдентификаторСтроки, Знач ВидВремени)
	
	Если ВидВремени = ПредопределенноеЗначение("Справочник.ВидыВремениГрафика.РабочееВремя") Тогда
		ВидВремени = Неопределено;
	КонецЕсли;
	
	ВидВремениОформленияЯчейки = Неопределено;
	Для Каждого СтрокаТЗ Из ЦветаВидовВремени Цикл
		Если СтрокаТЗ.СписокИдентификаторов.НайтиПоЗначению(ИдентификаторСтроки) <> Неопределено Тогда
			ВидВремениОформленияЯчейки = СтрокаТЗ.ВидВремени;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВидВремени <> ВидВремениОформленияЯчейки Тогда
		ОбновитьУсловноеОформлениеЦветаФонаЯчеекДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазместитьНовуюСтрокуГрафикаВДеревеГрафика(СтрокаГрафика)
	
	// Определение количества строк всего на дату и по этому участнику.
	Отбор = Новый Структура("Дата", СтрокаГрафика.Дата);
	СтрокиДерева = Новый Массив;
	Для Каждого СтрокаДерева Из ДеревоГрафиков.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Дата = СтрокаГрафика.Дата Тогда
			СтрокиДерева.Добавить(СтрокаДерева);
			Для Каждого СтрокаДерева2ур Из СтрокаДерева.ПолучитьЭлементы() Цикл
				СтрокиДерева.Добавить(СтрокаДерева2ур);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	КоличествоСтрокНаДатуВсего = СтрокиДерева.Количество();
	
	ИмяПоляУчастник = ?(РежимГрафикСотрудников(),"Сотрудник","Кабинет");
	Отбор.Вставить(ИмяПоляУчастник, СтрокаГрафика[ИмяПоляУчастник]);
	КоличествоСтрокНаДатуУчастника = Объект.ГрафикиРаботы.НайтиСтроки(Отбор).Количество();
	
	// Определение имени колонки дерева графиков для данного участника.
	ИмяКолонки = Неопределено;
	Для Каждого кзКолонка Из КолонкиДерева Цикл
		Если кзКолонка.Ключ = СтрокаГрафика[ИмяПоляУчастник] Тогда
			ИмяКолонки = кзКолонка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяКолонки = Неопределено Тогда
		СформироватьДеревоГрафикаКлиент();
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрокНаДатуВсего >= КоличествоСтрокНаДатуУчастника Тогда
		// Определение первой свободной строки данного участника.
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева[ИмяКолонки] = -1 Тогда
				// Нашли пустую ячейку по этому сотруднику.
				СтрокаДерева[ИмяКолонки] = СтрокаГрафика.ПолучитьИдентификатор();
				СтрокаДерева[ИмяКолонки + "Представление"] = СформироватьПредствлениеЯчейкиДереваГрафиков(СтрокаГрафика, Объект.Режим);
				
				ОбновитьУсловноеОформлениеЯчейкиДереваГрафиков(СтрокаГрафика.ПолучитьИдентификатор(), СтрокаГрафика.ВидВремени);
				
				мФлагИмитацияИзмененияСтрокиДереваГрафиков = Истина;
				Элементы.ДеревоГрафиков.ИзменитьСтроку();
				Элементы.ДеревоГрафиков.ЗакончитьРедактированиеСтроки(Ложь);
                мФлагИмитацияИзмененияСтрокиДереваГрафиков = Ложь;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Добавление строки дерева.
		СтрокаДерева2ур = Неопределено;
		Для Каждого СтрокаДерева Из ДеревоГрафиков.ПолучитьЭлементы() Цикл
			Если СтрокаДерева.Дата = СтрокаГрафика.Дата Тогда
				СтрокаДерева2ур = СтрокаДерева.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДерева2ур.Дата = 0;
		Для Каждого кзКолонка Из КолонкиДерева Цикл
			Если кзКолонка.Значение = ИмяКолонки Тогда
				СтрокаДерева2ур[кзКолонка.Значение] = СтрокаГрафика.ПолучитьИдентификатор();
				СтрокаДерева2ур[кзКолонка.Значение + "Представление"] = СформироватьПредствлениеЯчейкиДереваГрафиков(СтрокаГрафика, Объект.Режим);
			Иначе
				СтрокаДерева2ур[кзКолонка.Значение] = -1;
				СтрокаДерева2ур[кзКолонка.Значение + "Представление"] = "";
			КонецЕсли;
			ОбновитьУсловноеОформлениеЯчейкиДереваГрафиков(СтрокаДерева2ур.ПолучитьИдентификатор(), СтрокаГрафика.ВидВремени)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГрафиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыФормы = ЗаполнитьПараметрыФормыВводаВремени(ТекущиеДанные);
		ПараметрыФормы.Вставить("РежимВремяСмена", 3 - ВремяУказВручную);
		ПараметрыФормы.Вставить("ВидВремени", ПредопределенноеЗначение("Справочник.ВидыВремениГрафика.РабочееВремя"));

		РезультатВвода = ОткрытьФормуМодально("Документ.УстановкаГрафиковРаботы.Форма.ФормаВводаВремениУпр", ПараметрыФормы);
		ОбработатьРезультатВводаВремениВДиалоге(РезультатВвода, ТекущиеДанные, Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоГрафиковПередНачаломИзменения(Элемент, Отказ)
	
	Если мФлагИмитацияИзмененияСтрокиДереваГрафиков = Истина Тогда
		Возврат 
	КонецЕсли;
	
	Отказ = Истина;
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	Если ТекущиеДанные <> Неопределено Тогда
		
		НоваяСтрокаГрафика = ТекущиеДанные.ИдентификаторСтроки = Неопределено;
		
		ПараметрыФормы = ЗаполнитьПараметрыФормыВводаВремени(ТекущиеДанные);
		Если НоваяСтрокаГрафика Тогда
			
			Если ((Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники") 
					Или Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Кабинеты")) 
					И Не ЗначениеЗаполнено(ТекущиеДанные.Кабинет))
				Или
				 ((Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") 
					Или Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Сотрудники")) 
					И Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник))
			Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы.Вставить("РежимВремяСмена", 3 - ВремяУказВручную);
			ПараметрыФормы.Вставить("ВидВремени", ПредопределенноеЗначение("Справочник.ВидыВремениГрафика.РабочееВремя"));
		Иначе
			СтрокаГрафика = Объект.ГрафикиРаботы.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
			
			Если ЗначениеЗаполнено(СтрокаГрафика.Смена) Тогда
				ПараметрыФормы.Вставить("Смена", СтрокаГрафика.Смена);
				ПараметрыФормы.Вставить("РежимВремяСмена", 2);
			Иначе
				ПараметрыФормы.Вставить("ВремяНачала",	  СтрокаГрафика.ВремяНачала); 
				ПараметрыФормы.Вставить("ВремяОкончания", СтрокаГрафика.ВремяОкончания); 
				ПараметрыФормы.Вставить("РежимВремяСмена", 1);
			КонецЕсли;
			ПараметрыФормы.Вставить("ВидВремени",	ТекущиеДанные.ВидВремени);
			ПараметрыФормы.Вставить("Название",		ТекущиеДанные.Название);
			ПараметрыФормы.Вставить("Комментарий",	ТекущиеДанные.Комментарий);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ЗапретитьСмены",	Истина);
		
		РезультатВвода = ОткрытьФормуМодально("Документ.УстановкаГрафиковРаботы.Форма.ФормаВводаВремениУпр", ПараметрыФормы);
		ОбработатьРезультатВводаВремениВДиалоге(РезультатВвода, ТекущиеДанные, НоваяСтрокаГрафика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГрафиковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ИдентификаторСтроки <> Неопределено
	Тогда
		УдалитьСтрокуГрафика(Объект.ГрафикиРаботы.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГрафиковПриАктивизацииПоля(Элемент)
	
	Участник = Неопределено;
	Для Каждого КолонкаДерева Из КолонкиДерева Цикл
		Если КолонкаДерева.Значение = Элемент.ТекущийЭлемент.Имя Тогда
			Участник = КолонкаДерева.Ключ;
			мсСтр = Объект.Участники.НайтиСтроки(Новый Структура("Участник", Участник));
			Если мсСтр.Количество() <> 0 Тогда
				Если Элементы.Участники.ТекущаяСтрока <> мсСтр[0].ПолучитьИдентификатор() Тогда
					Элементы.Участники.ТекущаяСтрока = мсСтр[0].ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГрафиковПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	Если ТекущиеДанные <> Неопределено Тогда
		ТекСобытиеКомментарий	= ТекущиеДанные.Комментарий;
		ТекСобытиеНазвание		= ТекущиеДанные.Название;
		ЗаполнитьСпособЗаполнения(ТекущиеДанные.Сотрудник);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГрафиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	
	НоваяСтрокаГрафика = ТекущиеДанные.ИдентификаторСтроки = Неопределено;
	Если НоваяСтрокаГрафика Тогда
		
		Для Каждого КлючЗначение Из мСтруктураСтрокиГрафика	Цикл
			мСтруктураСтрокиГрафика[КлючЗначение.Ключ] = Неопределено;
		КонецЦикла;
		
		Если (ВремяУказВручную = 1 
				И Не ЗначениеЗаполнено(Смена))
			Или (ВремяУказВручную = 2
				И Не ЗначениеЗаполнено(ВремяНачала)
				И Не ЗначениеЗаполнено(ВремяОкончания))
		Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники") 
			Или Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Кабинеты")
		Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Кабинет) Тогда
				СтрокаГрафика = мСтруктураСтрокиГрафика;
				СтрокаГрафика.Кабинет = ТекущиеДанные.Кабинет;
			Иначе
				Возврат;
			КонецЕсли;
			
		ИначеЕсли Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") 
				Или Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Сотрудники")
		Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
				СтрокаГрафика = мСтруктураСтрокиГрафика;
				СтрокаГрафика.Сотрудник = ТекущиеДанные.Сотрудник;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаГрафика.Дата = ТекущиеДанные.Дата;
		Если ВремяУказВручную = 1 Тогда
			СтрокаГрафика.Смена = Смена;
		Иначе
			СтрокаГрафика.ВремяНачала = ВремяНачала;
			СтрокаГрафика.ВремяОкончания = ВремяОкончания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаполнениеКонтрУчастник) Тогда
			Если Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") Тогда
				СтрокаГрафика.Кабинет = ЗаполнениеКонтрУчастник;
			ИначеЕсли Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники") Тогда
				СтрокаГрафика.Сотрудник = ЗаполнениеКонтрУчастник;
			КонецЕсли;
		КонецЕсли;
		СтрокаГрафика.Название = СобытиеНазвание;
		СтрокаГрафика.Комментарий = СобытиеКомментарий;
		СтрокаГрафика.ВидВремени = ВидВремени;
		СтрокаГрафика.ДатаСоздания = ТекущаяДата();
		СтрокаГрафика.Автор = Пользователи.ТекущийПользователь();
		
		Модифицированность = Истина;
		РазместитьНовыеСтрокиГрафикаПоСтруктуреСтроки();
	Иначе 
		Объект.ГрафикиРаботы.Удалить(Объект.ГрафикиРаботы.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки));
		Модифицированность = Истина;
				
		ЯчейкаДерева = НайтиЯчейкуДереваПоИдентификаторуСрокиГрафика(ТекущиеДанные.ИдентификаторСтроки);
		Если ЯчейкаДерева <> Неопределено Тогда
			ОбновитьДанныеЯчейкиДереваГрафиков(ЯчейкаДерева.СтрокаДерева, ЯчейкаДерева.ИмяКолонки, "-1", "", ТекущиеДанные.ИдентификаторСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазместитьНовыеСтрокиГрафикаПоСтруктуреСтроки()
	
	Если ЗначениеЗаполнено(мСтруктураСтрокиГрафика.Смена) Тогда
		// Разделение смены на отдельные строки графика.
		ПериодыСмены = ПолучитьПериодыСмены(мСтруктураСтрокиГрафика.Смена);
		Для Каждого ПериодСмены Из ПериодыСмены Цикл
			
			НоваяСтрокаГрафика = Объект.ГрафикиРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГрафика, мСтруктураСтрокиГрафика);
			
			НоваяСтрокаГрафика.Смена = Неопределено;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГрафика, ПериодСмены, "ВремяНачала, ВремяОкончания, ВидВремени, Название, Комментарий");
			
			РазместитьНовуюСтрокуГрафикаВДеревеГрафика(НоваяСтрокаГрафика);

		КонецЦикла;			
	Иначе
		// Добавление одной строки графика.
		НоваяСтрокаГрафика = Объект.ГрафикиРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаГрафика, мСтруктураСтрокиГрафика);
		
		РазместитьНовуюСтрокуГрафикаВДеревеГрафика(НоваяСтрокаГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуГрафика(СтрокаГрафика)
	
	ИдентификаторСтроки = СтрокаГрафика.ПолучитьИдентификатор();
	Объект.ГрафикиРаботы.Удалить(СтрокаГрафика);
	Модифицированность = Истина;
	
	ЯчейкаДерева = НайтиЯчейкуДереваПоИдентификаторуСрокиГрафика(ИдентификаторСтроки);
	Если ЯчейкаДерева <> Неопределено Тогда
		// Проверяю, не стала ли вся строка дерева пустой.
		РодительСтроки = ЯчейкаДерева.СтрокаДерева.ПолучитьРодителя();
		флСтрокаПустая = Истина;
		Если РодительСтроки <> Неопределено Тогда
			Для Каждого кзКолонка Из КолонкиДерева Цикл
				Если кзКолонка.Значение <> ЯчейкаДерева.ИмяКолонки
					И ЯчейкаДерева.СтрокаДерева[кзКолонка.Значение] >= 0 
					Тогда
					флСтрокаПустая = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если флСтрокаПустая 
			И РодительСтроки <> Неопределено
		Тогда
			РодительСтроки.ПолучитьЭлементы().Удалить(ЯчейкаДерева.СтрокаДерева);
		Иначе
			ОбновитьДанныеЯчейкиДереваГрафиков(ЯчейкаДерева.СтрокаДерева, ЯчейкаДерева.ИмяКолонки, "-1", "", ИдентификаторСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Функция НайтиЯчейкуДереваПоИдентификаторуСрокиГрафика(ИдентификаторСтрокиГрафика)
	
	Результат = Новый Структура("СтрокаДерева, ИмяКолонки");
	
	Для Каждого кзКолонка Из КолонкиДерева Цикл
		Для Каждого СтрокаДерева Из ДеревоГрафиков.ПолучитьЭлементы() Цикл
			Если СтрокаДерева[кзКолонка.Значение] = ИдентификаторСтрокиГрафика Тогда
				Результат.СтрокаДерева	= СтрокаДерева;
				Результат.ИмяКолонки	= кзКолонка.Значение;
				Возврат Результат;
			Иначе
				Для Каждого СтрокаДерева2ур Из СтрокаДерева.ПолучитьЭлементы() Цикл
					Если СтрокаДерева2ур[кзКолонка.Значение] = ИдентификаторСтрокиГрафика Тогда
						Результат.СтрокаДерева	= СтрокаДерева2ур;
						Результат.ИмяКолонки	= кзКолонка.Значение;
						Возврат Результат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВремяУказВручнуюПриИзменении(Элемент)
	
	Элементы.Смена.ТолькоПросмотр = ВремяУказВручную = 2;
	
	// Вернуть управление доступностью группы, когда разработчики платформы реализуют это без неявного серверного вызова.
	// Элементы.ГруппаМинутоЧасы.ТолькоПросмотр = ВремяУказВручную = 1;
	Элементы.ВремяНачало.ТолькоПросмотр = ВремяУказВручную = 1;
	Элементы.ВремяОкончания.ТолькоПросмотр = ВремяУказВручную = 1;
	
	// Вернуть управление доступностью группы, когда разработчики платформы реализуют это без неявного серверного вызова.
	//Элементы.ГруппаСобытия.ТолькоПросмотр = ВремяУказВручную = 1;
	Элементы.ВидВремени.ТолькоПросмотр = ВремяУказВручную = 1;
	Элементы.РедактироватьПараметрыСобытия.Доступность = ВремяУказВручную = 1;
	
КонецПроцедуры

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ГрафикВставить(Команда)
	
	Если мДанныеКопирования <> Неопределено Тогда
		
		ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
		Если ТекущиеДанные <> Неопределено Тогда
			
			СтрокаГрафика = Объект.ГрафикиРаботы.НайтиПоИдентификатору(мДанныеКопирования);
			Если СтрокаГрафика <> Неопределено Тогда
				НоваяСтрока = Объект.ГрафикиРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГрафика);
				
				НоваяСтрока.Дата = ТекущиеДанные.Дата;
				Если РежимГрафикСотрудников() Тогда
					НоваяСтрока.Сотрудник = ТекущиеДанные.Сотрудник;
				Иначе
					НоваяСтрока.Кабинет = ТекущиеДанные.Кабинет;
				КонецЕсли;
				
				РазместитьНовуюСтрокуГрафикаВДеревеГрафика(НоваяСтрока);

				Если Не мОперацияКопирования Тогда
					УдалитьСтрокуГрафика(СтрокаГрафика);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВырезать(Команда)
	
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ИдентификаторСтроки = Неопределено
	Тогда
		мДанныеКопирования = Неопределено;
	Иначе
		мДанныеКопирования = ТекущиеДанные.ИдентификаторСтроки;
		мОперацияКопирования = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикКопировать(Команда)
	
	ТекущиеДанные = ПолучитьДанныеТекущейПозицииДереваГрафика();
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ИдентификаторСтроки = Неопределено
	Тогда
		мДанныеКопирования = Неопределено;
	Иначе
		мДанныеКопирования = ТекущиеДанные.ИдентификаторСтроки;
		мОперацияКопирования = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПоляФормыПоРежимуГрафика()

	Если РежимГрафикСотрудников() Тогда
		Элементы.УчастникиУчастник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Элементы.УчастникиУчастник.Заголовок = НСтр("ru='Сотрудники'");
		
		Элементы.ЗаполнениеКонтрУчастник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Оборудование");
		Элементы.ЗаполнениеКонтрУчастник.Заголовок = НСтр("ru='Кабинет'");
	Иначе
		Элементы.УчастникиУчастник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Оборудование");
		Элементы.УчастникиУчастник.Заголовок = НСтр("ru='Кабинеты/оборудование'");
		
		Элементы.ЗаполнениеКонтрУчастник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Элементы.ЗаполнениеКонтрУчастник.Заголовок = НСтр("ru='Сотрудник'");
	КонецЕсли;
	
	Элементы.ЗаполнениеКонтрУчастник.Видимость = (Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.КабинетыСотрудники"))
				 							 Или (Объект.Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты"));

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчастниковВДокумент(ДобавляемыеУчастники)
	
	Если ТипЗнч(ДобавляемыеУчастники) <> Тип("Массив") Тогда
		ПереченьУчастников = Новый Массив;
		ПереченьУчастников.Добавить(ДобавляемыеУчастники);
	Иначе
		ПереченьУчастников = ДобавляемыеУчастники;
	КонецЕсли;
	
	Отбор = Новый Структура("Участник");
	Для Каждого Участник Из ПереченьУчастников Цикл
		
		Отбор.Участник = Участник;
		Если Объект.Участники.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Объект.Участники.Добавить().Участник = Участник;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	УдаляемыеУчастники = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Участники.ВыделенныеСтроки Цикл
		СтрокаУчастник = Объект.Участники.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если СтрокаУчастник <> Неопределено Тогда
			УдаляемыеУчастники.Добавить(СтрокаУчастник.Участник);
		КонецЕсли;
	КонецЦикла;
	
	ЭтоГрафикСотрудников = РежимГрафикСотрудников();
	мОбрИнд = Объект.ГрафикиРаботы.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаГрафика = Объект.ГрафикиРаботы[мОбрИнд-сч];
		Если (ЭтоГрафикСотрудников 
				И УдаляемыеУчастники.Найти(СтрокаГрафика.Сотрудник) <> Неопределено)
			Или (Не ЭтоГрафикСотрудников 
				И УдаляемыеУчастники.Найти(СтрокаГрафика.Кабинет) <> Неопределено)
		Тогда
			Объект.ГрафикиРаботы.Удалить(мОбрИнд-сч);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьУчастниковВДокумент(ВыбранноеЗначение);
	СформироватьДеревоГрафикаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПодбор(Команда)
	
	ПараметрыФормы = Новый Структура("ВыборГруппИЭлементов, ЗакрыватьПриВыборе", ИспользованиеГруппИЭлементов.Элементы, Ложь);
	Если РежимГрафикСотрудников() Тогда
		ИмяФормыПодбора = "Справочник.Сотрудники.ФормаВыбора";
	Иначе
		ИмяФормыПодбора = "Справочник.Оборудование.ФормаВыбора";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыПодбора, ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Функция РежимГрафикСотрудников(Режим = Неопределено)
	
	Если Режим = Неопределено Тогда
		Режим = Объект.Режим;
	КонецЕсли;
	
	Если Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") 
		Или Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Сотрудники")
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСоставПоПодразделениюДокумента(Команда)
	
	Если Объект.Подразделение.Пустая() Тогда
		
		Ответ = Вопрос(НСтр("ru='Подразделение в документе не выбрано. Заполнить по всем подразделениям филиала?'"), РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ДополнитьСписокУчастниковПоПодразделению();
		КонецЕсли;
	Иначе
		ДополнитьСписокУчастниковПоПодразделению(Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПоПодразделению(Команда)
	
	Подразделение = ОткрытьФормуМодально("Справочник.Подразделения.ФормаВыбора");
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ДополнитьСписокУчастниковПоПодразделению(Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСписокУчастниковПоПодразделению(Подразделение = Неопределено)
	
	СтруктурнаяЕдиница = ?(Подразделение = Неопределено, Объект.Филиал, Подразделение);
	СоставПодразделения = ПолучитьСоставПодразделения(СтруктурнаяЕдиница, РежимГрафикСотрудников());
	ДобавитьУчастниковВДокумент(СоставПодразделения);
	
	СформироватьДеревоГрафикаКлиент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоставПодразделения(Подразделение, ВыборкаСотрудников)
	
	ИмяСправочника = ?(ВыборкаСотрудников, "Сотрудники", "Оборудование");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиКабинеты.Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК СотрудникиКабинеты
	|ГДЕ
	|	НЕ СотрудникиКабинеты.ЭтоГруппа
	|	И НЕ СотрудникиКабинеты.ПометкаУдаления";
	Если ВыборкаСотрудников Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|	И НЕ СотрудникиКабинеты.Архив";
	КонецЕсли;
	
	Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.Подразделения") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СотрудникиКабинеты.Подразделение В ИЕРАРХИИ(&Подразделение)";
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.Подразделения")
		И ПараметрыСеанса.УчетПоНесколькимФилиалам
	Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СотрудникиКабинеты.Подразделение.Филиал = &Филиал";
		Запрос.УстановитьПараметр("Филиал", Подразделение);
	КонецЕсли;		

	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО СотрудникиКабинеты.Подразделение.Наименование, СотрудникиКабинеты.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСоставПоМоделиРасписания(Команда)
	
	ПараметрыФормы = Новый Структура("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	МодельРасписания = ОткрытьФормуМодально("Справочник.МоделиРасписания.ФормаВыбора", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(МодельРасписания) Тогда
		
		СоставМодели = КалендарьПланирования.ПолучитьУчастниковМоделиРасписания(МодельРасписания);
		ЭтоГрафикСотрудников = РежимГрафикСотрудников();
		
		мОбрИнд = СоставМодели.Количество()-1;
		Для сч = 0 по мОбрИнд Цикл
			
			Участник = СоставМодели[мОбрИнд-сч];
			Если ЭтоГрафикСотрудников <> (ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники")) Тогда
				СоставМодели.Удалить(мОбрИнд-сч);
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьУчастниковВДокумент(СоставМодели);
		
		СформироватьДеревоГрафикаКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Участники.Количество() <> 0
		И РежимГрафикСотрудников() <> РежимГрафикСотрудников(ВыбранноеЗначение) 
	Тогда
		Ответ = Вопрос(НСтр("ru='Изменение вида графика потребует очистить ранее введенные графики.'") + " " + НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Объект.Участники.Очистить();
			Объект.ГрафикиРаботы.Очистить();
			Объект.Режим = ВыбранноеЗначение;
			СформироватьДеревоГрафикаКлиент();
			Модифицированность = Истина;
		Иначе
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Режим = ВыбранноеЗначение;
	НастроитьПоляФормыПоРежимуГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПостроить(Команда)
	
	СформироватьДеревоГрафикаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПараметрыСобытия(Команда)
	ПараметрыОткрытия = Новый Структура("Название, Комментарий, ВидВремени",СобытиеНазвание, СобытиеКомментарий, ВидВремени);
	Результат = ОткрытьФормуМодально("Документ.УстановкаГрафиковРаботы.Форма.ШапкаСобытия", ПараметрыОткрытия);
	Если Значениезаполнено(Результат) Тогда
		 ВидВремени			= Результат.ВидВремени;
		 СобытиеНазвание 	= Результат.Название;
		 СобытиеКомментарий = Результат.Комментарий;
		 ДеревоГрафиковПриАктивизацииЯчейки(Элементы.ДеревоГрафиков);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидВремениПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВидВремени) Тогда
		ВидВремени = ПредопределенноеЗначение("Справочник.ВидыВремениГрафика.РабочееВремя");
	КонецЕсли;
	
	Если ВидВремени = ПредопределенноеЗначение("Справочник.ВидыВремениГрафика.РабочееВремя") Тогда
		СобытиеНазвание = "";
		СобытиеКомментарий	= "";
		мНаименованиеТекущегоВидаВремени = "";
	Иначе
		НаименованиеВидаВремени = Строка(ВидВремени);
		Если СокрЛП(СобытиеНазвание) = мНаименованиеТекущегоВидаВремени
			Или ПустаяСтрока(СобытиеНазвание)
		Тогда
			СобытиеНазвание = НаименованиеВидаВремени;
			СобытиеКомментарий	= "";
		КонецЕсли;
		мНаименованиеТекущегоВидаВремени = НаименованиеВидаВремени;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТаблицуЦветов()
	
	ЦветаВидовВремени.Очистить();
	КопияГрафиков = Объект.ГрафикиРаботы.Выгрузить();
	КопияГрафиков.Свернуть("ВидВремени");
	Для Каждого СтрокаГрафика Из КопияГрафиков Цикл
		Если СтрокаГрафика.ВидВремени <> Справочники.ВидыВремениГрафика.РабочееВремя Тогда
			СтрокаЦветаИВидаВремени = ЦветаВидовВремени.Добавить();
			СтрокаЦветаИВидаВремени.Цвет = СтрокаГрафика.ВидВремени.Цвет.Получить();
			СтрокаЦветаИВидаВремени.ВидВремени = СтрокаГрафика.ВидВремени;
			Отбор = Новый Структура ("ВидВремени",СтрокаЦветаИВидаВремени.ВидВремени);
			СтрокиТЧГрафиков = Объект.ГрафикиРаботы.НайтиСтроки(Отбор);
			Для Каждого строкаТЧ Из СтрокиТЧГрафиков Цикл
				СтрокаЦветаИВидаВремени.СписокИдентификаторов.Добавить(строкаТЧ.ПолучитьИдентификатор());
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеЦветаФонаЯчеекДерева()
	
	ПерезаполнитьТаблицуЦветов();
	ОбновитьУсловноеОформлениеЦветаФона();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПериодыСмены(Смена)
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Смена.ПериодыСмены.Выгрузить());
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСтруктуруСтрокиГрафика()
	
	Результат = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Документы.УстановкаГрафиковРаботы.ТабличныеЧасти.ГрафикиРаботы.Реквизиты Цикл
		Результат.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОсновныеВидыЗаполненияГрафиков()
	
	Для Каждого Стр Из ОсновныеВидыЗаполненияГрафиков Цикл
		РезультатПоиска = Объект.Участники.НайтиСтроки(Новый Структура("Участник",Стр.Сотрудник));
		Если РезультатПоиска.Количество() = 0 Тогда
			Попытка
				ОсновныеВидыЗаполненияГрафиков.Удалить(Стр);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхСотрудников = Новый Массив;
	
	Для Каждого Стр Из Объект.Участники Цикл
		Если Не Стр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка") Тогда
			РезультатПоиска = ОсновныеВидыЗаполненияГрафиков.НайтиСтроки(Новый Структура("Сотрудник",Стр.Участник));
			Если РезультатПоиска.Количество() = 0 Тогда
				МассивДобавляемыхСотрудников.Добавить(Стр.Участник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не МассивДобавляемыхСотрудников.Количество() = 0 Тогда
		МассивДобавляемыхСотрудников = ДобавитьСотрудниковВТаблицуОсновныеВидыЗаполненияГрафиков(МассивДобавляемыхСотрудников);
	КонецЕсли;	
	
	Для Каждого Стр Из МассивДобавляемыхСотрудников Цикл
		НоваяСтрока = ОсновныеВидыЗаполненияГрафиков.Добавить();
		НоваяСтрока.Сотрудник = Стр.Участник;
		НоваяСтрока.ВидЗаполнения = Стр.ВидЗаполнения;	 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьСотрудниковВТаблицуОсновныеВидыЗаполненияГрафиков(МассивДобавляемыхСотрудников)
	Массив = Новый Массив;
	
	Для Каждого Участник Из МассивДобавляемыхСотрудников Цикл
		Если Участник <> Неопределено Тогда
			Если Участник.ОсновнойСпособЗаполненияГрафика = ПредопределенноеЗначение("Справочник.СпособыЗаполненияГрафиковРабот.ПустаяСсылка") Тогда
				ВидЗаполнения = Участник.Подразделение.ОсновнойСпособЗаполненияГрафика;	 
			Иначе
				ВидЗаполнения = Участник.ОсновнойСпособЗаполненияГрафика; 
			КонецЕсли;
			Массив.Добавить(Новый Структура("Участник, ВидЗаполнения",Участник,ВидЗаполнения));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСпособЗаполнения(Сотрудник)
	
	РезультатПоиска = ОсновныеВидыЗаполненияГрафиков.НайтиСтроки(Новый Структура("Сотрудник",Сотрудник));
	Если РезультатПоиска.Количество() = 1
		И ЗначениеЗаполнено(РезультатПоиска[0].ВидЗаполнения)
	Тогда
		СпособЗаполнения = РезультатПоиска[0].ВидЗаполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновнымСпособом(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ВремяУказВручную = 1 И Не ЗначениеЗаполнено(Смена) Тогда
		Отказ = Истина;
	ИначеЕсли ВремяУказВручную = 2 
		И Не ЗначениеЗаполнено(ВремяНачала) 
		И Не ЗначениеЗаполнено(ВремяОкончания)
	Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ПоказатьПредупреждение(,НСтр("ru='Указаны не все параметры автозаполнения. Операция не выполнена!'"));
		Возврат;
	КонецЕсли;	
	
	МассивПараметрыЗаполнения = Новый Массив;
	
	Для Каждого Стр Из Объект.Участники Цикл
		
		Участник = Стр.Участник;
		
		РезультатПоиска = ОсновныеВидыЗаполненияГрафиков.НайтиСтроки(Новый Структура("Сотрудник",Участник));
		Если Не РезультатПоиска.Количество() = 0 И ЗначениеЗаполнено(РезультатПоиска[0].ВидЗаполнения) Тогда
			ВидЗаполнения = РезультатПоиска[0].ВидЗаполнения;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("Участник, КонтрУчастник, СпособЗаполнения, ДатаНачала, ДатаОкончания, Замещать, ВидВремени, Название, Комментарий");
		Если ВремяУказВручную = 1 Тогда
			ПараметрыЗаполнения.Вставить("Смена");
		ИначеЕсли ВремяУказВручную = 2 Тогда
			ПараметрыЗаполнения.Вставить("ВремяНачала");
			ПараметрыЗаполнения.Вставить("ВремяОкончания");
		КонецЕсли;
		
		ПараметрыЗаполнения.СпособЗаполнения = ВидЗаполнения;
		ПараметрыЗаполнения.Замещать = ЗаполнениеЗамещать = 0;
		ПараметрыЗаполнения.Участник = Участник;
		
		ПараметрыЗаполнения.Название	= СобытиеНазвание; 
		ПараметрыЗаполнения.Комментарий = СобытиеКомментарий;
		ПараметрыЗаполнения.ВидВремени	= ВидВремени;
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения,ЭтаФорма,,"СпособЗаполнения");
		
		МассивПараметрыЗаполнения.Добавить(ПараметрыЗаполнения);
	КонецЦикла;
	
	ЗаполнитьПоОсновнымСпособамЗаполненияСотрудников(МассивПараметрыЗаполнения);
	СформироватьДеревоГрафикаКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОсновнымСпособамЗаполненияСотрудников(МассивПараметрыЗаполнения)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого ПараметрыЗаполнения Из МассивПараметрыЗаполнения Цикл		
		ДокументОбъект.ЗаполнитьГрафик(ПараметрыЗаполнения);
	КонецЦикла;		
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаНастроекКопированияГрафиков(Команда)
	
	МассивСотрудники = Новый Массив;
	Для Каждого Стр Из Объект.Участники Цикл
		МассивСотрудники.Добавить(Стр.Участник);
	КонецЦикла;
	ПараметрыЗаполнения = Новый Структура("Сотрудники, МесяцГрафика", МассивСотрудники, Объект.ПлДата);
	ОткрытьФорму("Документ.УстановкаГрафиковРаботы.Форма.ФормаКопированиеГрафиков",ПараметрыЗаполнения,ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьГрафикиСервер(Знач ПараметрыЗаполнения)
	
	ПараметрыЗаполнения.Вставить("ДатаНачала",		ДатаНачала);
	ПараметрыЗаполнения.Вставить("ДатаОкончания",	ДатаОкончания);
	ПараметрыЗаполнения.Вставить("ЗамещатьГрафик",	ЗаполнениеЗамещать = 0);
	ПараметрыЗаполнения.СписокСотрудников = ПараметрыЗаполнения.СписокСотрудников.Выгрузить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.СкопироватьГрафикиПонедельно(ПараметрыЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	Модифицированность = Истина;
	
КонецПроцедуры
