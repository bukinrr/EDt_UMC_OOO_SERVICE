#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	пчВидыУстановки = Перечисления.ВидыУстановкиГрафиков;
	
	// Удаление строк, не вошедших в месяц при регулировании в форме (например, переход с месяца с 31 днем на 30-дневный)
	// и строк, не относящихся к списку участников этого документа.
	ПолеУчастников = ?(Режим = пчВидыУстановки.Сотрудники Или Режим = пчВидыУстановки.СотрудникиКабинеты,
						"Сотрудник", "Кабинет");
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаГрафика Из ГрафикиРаботы Цикл
		Если НачалоМесяца(СтрокаГрафика.Дата) <> ПлДата 
			Или Участники.Найти(СтрокаГрафика[ПолеУчастников], "Участник") = Неопределено 
		Тогда
			СтрокиКУдалению.Добавить(СтрокаГрафика);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаГрафика Из СтрокиКУдалению Цикл
		ГрафикиРаботы.Удалить(СтрокаГрафика);
	КонецЦикла;
	
	Если Режим = пчВидыУстановки.Сотрудники Тогда
		Для Каждого СтрокаГрафика Из ГрафикиРаботы Цикл
			СтрокаГрафика.Кабинет = Неопределено;
		КонецЦикла;
	ИначеЕсли Режим = пчВидыУстановки.Кабинеты Тогда
		Для Каждого СтрокаГрафика Из ГрафикиРаботы Цикл
			СтрокаГрафика.Сотрудник = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроверкаНаложенияГрафиковВнутриДокумента(Отказ);
	
	Если Не Отказ Тогда
		ПроверкаНаложенияГрафиковСДругимиДокументами(Отказ);
	КонецЕсли;
	
	// Движения по регистрам
	Если Не Отказ Тогда
		СфомироватьДвиженияПоРегистрам(Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть "ГрафикиРаботы" документа
//
// Параметры:
// 	ПараметрыЗаполнения - СправочникСсылка.СпособыЗаполненияГрафиковРабот - параметры заполнения.
//
Процедура ЗаполнитьГрафик(ПараметрыЗаполнения) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения.СпособЗаполнения) = Тип ("СправочникСсылка.СпособыЗаполненияГрафиковРабот") Тогда
		
		ПараметрыЗаполнения.ДатаНачала = Мин(ПараметрыЗаполнения.ДатаНачала, НачалоДня(КонецМесяца(ПлДата)));
		ПараметрыЗаполнения.ДатаОкончания = Макс(ПараметрыЗаполнения.ДатаОкончания, ПлДата);
		ПараметрыЗаполнения.ДатаОкончания = Мин(ПараметрыЗаполнения.ДатаОкончания, НачалоДня(КонецМесяца(ПлДата)));
		
		ЭтоГрафикСотрудников =	Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.СотрудникиКабинеты") 
		Или Режим = ПредопределенноеЗначение("Перечисление.ВидыУстановкиГрафиков.Сотрудники");
		
		// 1. Получаем массив строк т.ч. "Графики работы" для последующей обработки.
		Если ПараметрыЗаполнения.Замещать Тогда
			
			Отбор = Новый Структура(?(ЭтоГрафикСотрудников, "Сотрудник", "Кабинет"), ПараметрыЗаполнения.Участник);
			мсСтрокиГрафика = ГрафикиРаботы.НайтиСтроки(Отбор);
			
			махОбрИнд = мсСтрокиГрафика.Количество()-1;
			Для сч = 0 по махОбрИнд Цикл
				СтрокаГрафика = мсСтрокиГрафика[махОбрИнд-сч];
				Если  СтрокаГрафика.Дата >= ПараметрыЗаполнения.ДатаНачала
					И СтрокаГрафика.Дата <= ПараметрыЗаполнения.ДатаОкончания
					Тогда
					ГрафикиРаботы.Удалить(СтрокаГрафика);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполняемыеДаты = Новый Массив;
		ТекДата = ПараметрыЗаполнения.ДатаНачала;
		Пока ТекДата <= ПараметрыЗаполнения.ДатаОкончания Цикл
			Если ТекДата >= ПлДата Тогда
				ЗаполняемыеДаты.Добавить(ТекДата);
			КонецЕсли;
			ТекДата = ТекДата + 86400;
		КонецЦикла;
		
		// 2. Перезаполнение строк графика по способу заполнения
		Если ПараметрыЗаполнения.СпособЗаполнения.Предопределенный Тогда
			
			Для Каждого ДатаГрафика Из ЗаполняемыеДаты Цикл
				
				ДобавитьСтрокуГрафика = Ложь;
				Если ПараметрыЗаполнения.СпособЗаполнения = Справочники.СпособыЗаполненияГрафиковРабот.БудниеДни Тогда
					ДобавитьСтрокуГрафика = ДеньНедели(ДатаГрафика) <= 5;
				ИначеЕсли ПараметрыЗаполнения.СпособЗаполнения = Справочники.СпособыЗаполненияГрафиковРабот.ВыходныеДни Тогда
					ДобавитьСтрокуГрафика = ДеньНедели(ДатаГрафика) >= 6;
				ИначеЕсли ПараметрыЗаполнения.СпособЗаполнения = Справочники.СпособыЗаполненияГрафиковРабот.ВсеДни Тогда
					ДобавитьСтрокуГрафика = Истина;
				ИначеЕсли ПараметрыЗаполнения.СпособЗаполнения = Справочники.СпособыЗаполненияГрафиковРабот.ДваДняЧерезДваДня Тогда
					РазницаДней = (НачалоДня(ДатаГрафика) - НачалоДня(ПараметрыЗаполнения.ДатаНачала))/86400;
					ДобавитьСтрокуГрафика = (РазницаДней - Цел(РазницаДней/4)*4) <= 1;  
				ИначеЕсли ПараметрыЗаполнения.СпособЗаполнения = Справочники.СпособыЗаполненияГрафиковРабот.ОдинДеньЧерезОдинДень Тогда
					РазницаДней = (НачалоДня(ДатаГрафика) - НачалоДня(ПараметрыЗаполнения.ДатаНачала))/86400;
					ДобавитьСтрокуГрафика = (РазницаДней - Цел(РазницаДней/2)*2) = 0;  
				КонецЕсли; 
				
				Если ДобавитьСтрокуГрафика Тогда
					ЗаполнитьДеньСотрудника(ПараметрыЗаполнения, ЭтоГрафикСотрудников, ДатаГрафика);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Не предопределенный способ заполнения
			Если ПараметрыЗаполнения.СпособЗаполнения.ТипГрафика = Перечисления.ТипыГрафика.Недельный Тогда
				// Недельный график
				Для Каждого ДатаГрафика Из ЗаполняемыеДаты Цикл
					СтрокаСпр = ПараметрыЗаполнения.СпособЗаполнения.Смены.Найти(Перечисления.ДниНедели.Получить(ДеньНедели(ДатаГрафика)-1));
					Если СтрокаСпр <> Неопределено 
						И (СтрокаСпр.БратьИзНастроекЗаполнения
						Или (СтрокаСпр.ВремяНачала <> Дата(1,1,1) И СтрокаСпр.ВремяОкончания <> Дата(1,1,1))
						Или ЗначениеЗаполнено(СтрокаСпр.Смена))
					Тогда
						ЗаполнитьДеньСотрудника(ПараметрыЗаполнения, ЭтоГрафикСотрудников, ДатаГрафика, СтрокаСпр);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ПараметрыЗаполнения.СпособЗаполнения.ТипГрафика = Перечисления.ТипыГрафика.Двухнедельный Тогда
				// Двухнедельный график
				
				ТекущаяНеделя = 2;
				Для Каждого ДатаГрафика Из ЗаполняемыеДаты Цикл
					
					// Определим используется ли четность
					Если ПараметрыЗаполнения.СпособЗаполнения.ЧетностьНедели Тогда
						// Используем
						ТекущаяНеделя = ?(НеделяГода(ДатаГрафика) % 2 = 0,2,1);
					Иначе
						// Не используем, определяем номер недели от даты начала заполнения.
						НачалоНеделиНачалаЗаполнения = НачалоНедели(ПараметрыЗаполнения.ДатаНачала);
						НачалоНеделиТек = НачалоНедели(ДатаГрафика);
						ТекущаяНеделя = 1 + (Цел((НачалоНеделиТек - НачалоНеделиНачалаЗаполнения)/86400/7)%2);
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура("ДеньНедели,НомерДня",Перечисления.ДниНедели.Получить(ДеньНедели(ДатаГрафика)-1),ТекущаяНеделя);
					мсСтрокаСпр = ПараметрыЗаполнения.СпособЗаполнения.Смены.НайтиСтроки(СтруктураПоиска);
					Если мсСтрокаСпр.Количество() <> 0 Тогда
						СтрокаСпр = мсСтрокаСпр[0];
						Если СтрокаСпр.БратьИзНастроекЗаполнения
							Или (СтрокаСпр.ВремяНачала <> Дата(1,1,1) И СтрокаСпр.ВремяОкончания <> Дата(1,1,1))
							Или ЗначениеЗаполнено(СтрокаСпр.Смена)
							Тогда
							ЗаполнитьДеньСотрудника(ПараметрыЗаполнения, ЭтоГрафикСотрудников, ДатаГрафика, СтрокаСпр);
						КонецЕсли;
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Проверьте корректность заполнения табличной части вида графика'"));
						Возврат;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ПараметрыЗаполнения.СпособЗаполнения.ТипГрафика = Перечисления.ТипыГрафика.Сменный Тогда
				// Сменный тип заполнения
				КоличествоДнейВЦикле = ПараметрыЗаполнения.СпособЗаполнения.Смены.Количество();
				
				Для Каждого ДатаГрафика Из ЗаполняемыеДаты Цикл
					
					НомерДняДляСмены = ((ДатаГрафика - ПараметрыЗаполнения.ДатаНачала)/86400) % КоличествоДнейВЦикле;
					НомерДняДляСмены = ?(НомерДняДляСмены < 0, -НомерДняДляСмены, НомерДняДляСмены);
					
					СтрокаСпр = ПараметрыЗаполнения.СпособЗаполнения.Смены[НомерДняДляСмены];
					Если СтрокаСпр.БратьИзНастроекЗаполнения
						Или (СтрокаСпр.ВремяНачала <> Дата(1,1,1) Или СтрокаСпр.ВремяОкончания <> Дата(1,1,1))
						Или ЗначениеЗаполнено(СтрокаСпр.Смена)
					Тогда
						ЗаполнитьДеньСотрудника(ПараметрыЗаполнения, ЭтоГрафикСотрудников, ДатаГрафика, СтрокаСпр);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// * не реализовано
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть "ГрафикиРаботы" документа по данным эталонной недели.
//
// Параметры:
// 	ПараметрыЗаполнения - СправочникСсылка.СпособыЗаполненияГрафиковРабот - параметры заполнения.
//
Процедура СкопироватьГрафикиПонедельно(ПараметрыЗаполнения) Экспорт
	
	СписокСотрудников	= ПараметрыЗаполнения.СписокСотрудников;
	ДатаНачала			= ПараметрыЗаполнения.ДатаНачала;
	ДатаОкончания		= ПараметрыЗаполнения.ДатаОкончания;
	ПериодКопированияОт	= ПараметрыЗаполнения.ПериодОт;
	ПериодКопированияПо	= ПараметрыЗаполнения.ПериодПо;
	
	ТаблицаСотрудников = СписокСотрудников.Скопировать();
	Для Каждого СтрокаСотрудник Из ТаблицаСотрудников Цикл
		Если Не ЗначениеЗаполнено(СтрокаСотрудник.ПериодОт) Тогда
			СтрокаСотрудник.ПериодОт = ПериодКопированияОт;
			СтрокаСотрудник.ПериодПо = ПериодКопированияПо;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление старых строк графика
	ЭтоГрафикСотрудников = ЭтотОбъект.Режим <> Перечисления.ВидыУстановкиГрафиков.Кабинеты
						 И ЭтотОбъект.Режим <> Перечисления.ВидыУстановкиГрафиков.КабинетыСотрудники;

	ИмяПоляУчастника = ?(ЭтоГрафикСотрудников, "Сотрудник", "Кабинет");
	
	Если ПараметрыЗаполнения.ЗамещатьГрафик Тогда
		мОбрИнд = ГрафикиРаботы.Количество()-1;
		Для сч = 0 По мОбрИнд Цикл
			СтрокаГрафика = ГрафикиРаботы[мОбрИнд-сч];
			Если СписокСотрудников.Найти(СтрокаГрафика[ИмяПоляУчастника]) <> Неопределено Тогда
				ГрафикиРаботы.Удалить(мОбрИнд-сч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТаблицаСотрудников ИЗ &ТаблицаСотрудников КАК ТаблицаСотрудников";
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ГрафикиРаботы.Смена,
	|	ГрафикиРаботы.ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания,
	|	ДЕНЬНЕДЕЛИ(ГрафикиРаботы.Дата) КАК ДеньНедели,
	|	ГрафикиРаботы.Дата,
	|	ГрафикиРаботы.Кабинет,
	|	ГрафикиРаботы.ВидВремени,
	|	ГрафикиРаботы.Комментарий,
	|	ГрафикиРаботы.Название
	|ИЗ
	|	ТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО ТаблицаСотрудников.Сотрудник = ГрафикиРаботы.Сотрудник//%ИмяПоляУчастникаВГрафике%
	|			И (ТаблицаСотрудников.Выбран)
	|			И (ГрафикиРаботы.Дата >= ТаблицаСотрудников.ПериодОт)
	|			И (ГрафикиРаботы.Дата <= КОНЕЦПЕРИОДА(ТаблицаСотрудников.ПериодПо, ДЕНЬ))
	|			И (ГрафикиРаботы.Подразделение = &Подразделение
	|				ИЛИ ГрафикиРаботы.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			И (ГрафикиРаботы.Филиал = &Филиал)
	|ИТОГИ ПО
	|	Сотрудник";
	Если	ЭтотОбъект.Режим = Перечисления.ВидыУстановкиГрафиков.Кабинеты
		Или ЭтотОбъект.Режим = Перечисления.ВидыУстановкиГрафиков.КабинетыСотрудники
	Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГрафикиРаботы.Сотрудник//%ИмяПоляУчастникаВГрафике%", "ГрафикиРаботы.Кабинет");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаСотрудники = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		РезультатПоиска = Участники.НайтиСтроки(Новый Структура("Участник",ВыборкаСотрудники.Сотрудник));
		
		Если РезультатПоиска.Количество() = 1 Тогда
			НовыйУчастник = РезультатПоиска[0];
		Иначе
			Продолжить;	
		КонецЕсли;
		
		НовыйУчастник.Участник = ВыборкаСотрудники.Сотрудник;
		
		// Заполнение графиков
		ВыборкаГрафики = ВыборкаСотрудники.Выбрать();
		ТекДата = ДатаНачала;
		Пока ТекДата <= ДатаОкончания Цикл
			
			ВыборкаГрафики.Сбросить();
			Пока ВыборкаГрафики.НайтиСледующий(Новый Структура("ДеньНедели", ДеньНедели(ТекДата))) Цикл
				СтрокаГрафика = ГрафикиРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГрафика, ВыборкаГрафики);
				
				СтрокаГрафика.Дата = ТекДата;
				СтрокаГрафика.Автор			= ПараметрыСеанса.ТекущийПользователь;
				СтрокаГрафика.ДатаСоздания	= ТекущаяДатаСеанса();
			КонецЦикла;
			
			ТекДата = ТекДата + 86400;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения документа по его табличным частям.
//
// Параметры:
//  Отказ	 - Булево - признак отмены операции проведения.
//
Процедура СфомироватьДвиженияПоРегистрам(Отказ) Экспорт
	
	Для Каждого СтрокаГрафика Из ГрафикиРаботы Цикл
		Запись = Движения.ГрафикиРаботы.Добавить();
		Запись.Регистратор = Ссылка;
		ЗаполнитьЗначенияСвойств(Запись, СтрокаГрафика);
		Запись.ИдентификаторСобытия = Новый УникальныйИдентификатор;
		Запись.Филиал = Филиал;
		Запись.Подразделение = Подразделение;
		
		// Не актуально в текущем функционал, но измерение требуется уникальности возможных старых записей.
		Запись.КлючУникальностиЗаписи = Новый УникальныйИдентификатор;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДеньСотрудника(ПараметрыЗаполнения, ЭтоГрафикСотрудников, ДатаГрафика, СтрокаСпр = Неопределено)
	
	СтрокаГрафика = ГрафикиРаботы.Добавить();
	СтрокаГрафика.Дата = ДатаГрафика;
	СтрокаГрафика.ВидВремени			= ПараметрыЗаполнения.ВидВремени;
	СтрокаГрафика.Название				= ПараметрыЗаполнения.Название;
	СтрокаГрафика.Комментарий			= ПараметрыЗаполнения.Комментарий;
	СтрокаГрафика.Автор					= ПараметрыСеанса.ТекущийПользователь;
	СтрокаГрафика.ДатаСоздания			= ТекущаяДатаСеанса();
	
	Если ЭтоГрафикСотрудников Тогда
		СтрокаГрафика.Сотрудник = ПараметрыЗаполнения.Участник;
		СтрокаГрафика.Кабинет = ПараметрыЗаполнения.КонтрУчастник;
	Иначе
		СтрокаГрафика.Кабинет = ПараметрыЗаполнения.Участник;
		СтрокаГрафика.Сотрудник = ПараметрыЗаполнения.КонтрУчастник;
	КонецЕсли;
	
	Если СтрокаСпр <> Неопределено Тогда
		Если СтрокаСпр.БратьИзНастроекЗаполнения Тогда
			Если ПараметрыЗаполнения.Свойство("Смена") Тогда
				ПериодыСмены = ПараметрыЗаполнения.Смена.ПериодыСмены;
				Для Каждого Период из ПериодыСмены Цикл
					новСтрокаГрафика = ГрафикиРаботы.Добавить();	
					ЗаполнитьЗначенияСвойств(новСтрокаГрафика,Период);
					новСтрокаГрафика.Дата = ДатаГрафика;
					новСтрокаГрафика.Автор					= ПараметрыСеанса.ТекущийПользователь;
					новСтрокаГрафика.ДатаСоздания			= ТекущаяДатаСеанса();
					новСтрокаГрафика.Сотрудник = СтрокаГрафика.Сотрудник;
					новСтрокаГрафика.Кабинет = СтрокаГрафика.Кабинет;
				КонецЦикла;
				ГрафикиРаботы.Удалить(СтрокаГрафика);
			Иначе
				СтрокаГрафика.Смена = Неопределено;                                
				СтрокаГрафика.ВремяНачала    = ПараметрыЗаполнения.ВремяНачала;
				СтрокаГрафика.ВремяОкончания = ПараметрыЗаполнения.ВремяОкончания;
			КонецЕсли;
			
		ИначеЕсли (СтрокаСпр.ВремяНачала <> Дата(1,1,1) Или СтрокаСпр.ВремяОкончания <> Дата(1,1,1))
				И (СтрокаСпр.ВремяНачала <= СтрокаСпр.ВремяОкончания Или СтрокаСпр.ВремяОкончания = Дата(1,1,1))
		Тогда
			СтрокаГрафика.ВремяНачала    = СтрокаСпр.ВремяНачала;
			СтрокаГрафика.ВремяОкончания = СтрокаСпр.ВремяОкончания;
		ИначеЕсли ЗначениеЗаполнено(СтрокаСпр.Смена) Тогда
			ПериодыСмены = СтрокаСпр.Смена.ПериодыСмены;
			Для Каждого Период из ПериодыСмены Цикл
				новСтрокаГрафика = ГрафикиРаботы.Добавить();	
				ЗаполнитьЗначенияСвойств(новСтрокаГрафика,Период);
				новСтрокаГрафика.Дата = ДатаГрафика;
				новСтрокаГрафика.Автор			= ПараметрыСеанса.ТекущийПользователь;
				новСтрокаГрафика.ДатаСоздания	= ТекущаяДатаСеанса();
				новСтрокаГрафика.Сотрудник = СтрокаГрафика.Сотрудник;
				новСтрокаГрафика.Кабинет = СтрокаГрафика.Кабинет;
			КонецЦикла;
			ГрафикиРаботы.Удалить(СтрокаГрафика);
		КонецЕсли;
	Иначе
		Если ПараметрыЗаполнения.Свойство("Смена") Тогда
			ПериодыСмены = ПараметрыЗаполнения.Смена.ПериодыСмены;
			Для Каждого Период из ПериодыСмены Цикл
				новСтрокаГрафика = ГрафикиРаботы.Добавить();	
				ЗаполнитьЗначенияСвойств(новСтрокаГрафика,Период);
				новСтрокаГрафика.Дата = ДатаГрафика;
				новСтрокаГрафика.Автор			= ПараметрыСеанса.ТекущийПользователь;
				новСтрокаГрафика.ДатаСоздания	= ТекущаяДатаСеанса();
				новСтрокаГрафика.Сотрудник = СтрокаГрафика.Сотрудник;
				новСтрокаГрафика.Кабинет = СтрокаГрафика.Кабинет;
			КонецЦикла;
			ГрафикиРаботы.Удалить(СтрокаГрафика);
		Иначе
			СтрокаГрафика.Смена = Неопределено;                                
			СтрокаГрафика.ВремяНачала    = ПараметрыЗаполнения.ВремяНачала;
			СтрокаГрафика.ВремяОкончания = ПараметрыЗаполнения.ВремяОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиНаложенияГрафиковВЛокации(УникальноеСочетание, ТаблицаСтрокУникальногоСочетания, ТаблицаДляСравнения, ТаблицаНаложений, ТаблицаИспользованныхСочетаний)
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|   ТаблицаДляСравнения.Сотрудник КАК Сотрудник,
			|   ТаблицаДляСравнения.Кабинет КАК Кабинет,
			|   ТаблицаДляСравнения.Дата КАК Дата,
			|   ТаблицаДляСравнения.ВремяНачала КАК ВремяНачала,
			|   ТаблицаДляСравнения.ВремяОкончания КАК ВремяОкончания,
			|   ТаблицаДляСравнения.Филиал КАК Филиал,
			|   ТаблицаДляСравнения.Подразделение КАК Подразделение,
			|	ТаблицаДляСравнения.НомерДок КАК НомерДок,
			|	ТаблицаДляСравнения.ДатаДок КАК ДатаДок
			|ПОМЕСТИТЬ ТаблицаДляСравнения
			|ИЗ
			|   &ТаблицаДляСравнения КАК ТаблицаДляСравнения;
			|///////////////////////////////////////////////
			|ВЫБРАТЬ
			|   ТаблицаЗначений.Сотрудник КАК Сотрудник,
			|   ТаблицаЗначений.Кабинет КАК Кабинет,
			|   ТаблицаЗначений.Дата КАК Дата,
			|   ТаблицаЗначений.ВремяНачала КАК ВремяНачала,
			|   ТаблицаЗначений.ВремяОкончания КАК ВремяОкончания,
			|   ТаблицаЗначений.Филиал КАК Филиал,
			|   ТаблицаЗначений.Подразделение КАК Подразделение
			|ПОМЕСТИТЬ ТаблицаЗначений
			|ИЗ
			|   &ТаблицаЗначений КАК ТаблицаЗначений;
			|///////////////////////////////////////////////
			|ВЫБРАТЬ
			|   ТаблицаДляСравнения.ВремяНачала КАК ВремяНачала2,
			|   ТаблицаДляСравнения.ВремяОкончания КАК ВремяОкончания2,
			|	ТаблицаДляСравнения.Сотрудник КАК Сотрудник2,
			|	ТаблицаДляСравнения.НомерДок КАК НомерДок,
			|	ТаблицаДляСравнения.ДатаДок КАК ДатаДок,
			|	ТаблицаДляСравнения.Филиал КАК Филиал,
			|	ТаблицаДляСравнения.Подразделение КАК Подразделение,
			|	ТаблицаДляСравнения.Кабинет КАК Кабинет,
			|   ТаблицаЗначений.ВремяНачала КАК ВремяНачала1,
			|   ТаблицаЗначений.ВремяОкончания КАК ВремяОкончания1,
			|	ТаблицаЗначений.Дата КАК Дата,
			|   ТаблицаЗначений.Сотрудник КАК Сотрудник1
			|ИЗ
			|   ТаблицаДляСравнения КАК ТаблицаДляСравнения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗначений КАК ТаблицаЗначений
			|		ПО (ТаблицаДляСравнения.Сотрудник = ТаблицаЗначений.Сотрудник И ТаблицаЗначений.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
			|   		И ТаблицаДляСравнения.Дата = ТаблицаЗначений.Дата
			|   		И ТаблицаДляСравнения.ВремяНачала < ТаблицаЗначений.ВремяОкончания
			|   		И ТаблицаДляСравнения.ВремяОкончания > ТаблицаЗначений.ВремяНачала
			|   		И ((ТаблицаДляСравнения.Кабинет <> ТаблицаЗначений.Кабинет
			|					И ТаблицаДляСравнения.Кабинет <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
			|					И ТаблицаЗначений.Кабинет <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка))
			|   			ИЛИ ТаблицаДляСравнения.Филиал <> ТаблицаЗначений.Филиал
			|   			//%УсловиеПодразделенияНеРавны
			|			  )
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДляСравнения.ВремяНачала КАК ВремяНачала2,
			|	ТаблицаДляСравнения.ВремяОкончания КАК ВремяОкончания2,
			|	ТаблицаДляСравнения.Сотрудник КАК Сотрудник2,
			|	ТаблицаДляСравнения.НомерДок КАК НомерДок,
			|	ТаблицаДляСравнения.ДатаДок КАК ДатаДок,
			|	ТаблицаДляСравнения.Филиал КАК Филиал,
			|	ТаблицаДляСравнения.Подразделение КАК Подразделение,
			|	ТаблицаДляСравнения.Кабинет КАК Кабинет,
			|	ТаблицаЗначений.ВремяНачала КАК ВремяНачала1,
			|	ТаблицаЗначений.ВремяОкончания КАК ВремяОкончания1,
			|	ТаблицаЗначений.Дата КАК Дата,
			|	ТаблицаЗначений.Сотрудник КАК Сотрудник1
			|ИЗ
			|	ТаблицаДляСравнения КАК ТаблицаДляСравнения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗначений КАК ТаблицаЗначений
			|		ПО (ТаблицаДляСравнения.Кабинет = ТаблицаЗначений.Кабинет И ТаблицаЗначений.Кабинет <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка))
			|			И ТаблицаДляСравнения.Дата = ТаблицаЗначений.Дата
			|			И ТаблицаДляСравнения.ВремяНачала < ТаблицаЗначений.ВремяОкончания
			|			И ТаблицаДляСравнения.ВремяОкончания > ТаблицаЗначений.ВремяНачала
			|			И ((ТаблицаДляСравнения.Сотрудник <> ТаблицаЗначений.Сотрудник
			|					И ТаблицаДляСравнения.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|					И ТаблицаЗначений.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
			|				ИЛИ ТаблицаДляСравнения.Филиал <> ТаблицаЗначений.Филиал
			|				//%УсловиеПодразделенияНеРавны
			|			  )";
		
		РасписаниеПоСтруктуреПодразделений = Не УправлениеНастройками.ПараметрУчета("РежимОтбораЖурналаЗаписиПоМоделямРасписания");
		Если РасписаниеПоСтруктуреПодразделений Тогда
			// Проверять несовпадения Подразделения в таблицах, если режим ЖЗ - по структуре подразделений.
			// Не проверять, если по моделям расписания.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеПодразделенияНеРавны", "ИЛИ ТаблицаДляСравнения.Подразделение <> ТаблицаЗначений.Подразделение");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаДляСравнения", ТаблицаДляСравнения);
		Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаСтрокУникальногоСочетания);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Сотрудник",Выборка.Сотрудник2);
			Отбор.Вставить("Кабинет",Выборка.Кабинет);
			Отбор.Вставить("Филиал",Выборка.Филиал);
			Если РасписаниеПоСтруктуреПодразделений Тогда
				Отбор.Вставить("Подразделение",Выборка.Подразделение);
			КонецЕсли;
			
			Если ТаблицаИспользованныхСочетаний.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СтрокаНаложения = ТаблицаНаложений.Добавить();
				СтрокаНаложения.Дата = Выборка.Дата;
				Если Выборка.Сотрудник1 = Выборка.Сотрудник2 Тогда
					СтрокаНаложения.Участник = УникальноеСочетание.Сотрудник;
				Иначе
					СтрокаНаложения.Участник = УникальноеСочетание.Кабинет;			
				КонецЕсли; 
				СтрокаНаложения.ВремяНачала1 = Выборка.ВремяНачала1;
				СтрокаНаложения.ВремяНачала2 = Выборка.ВремяНачала2;
				СтрокаНаложения.ВремяОкончания1 = Выборка.ВремяОкончания1;
				СтрокаНаложения.ВремяОкончания2 = Выборка.ВремяОкончания2;
				СтрокаНаложения.НомерДок = Выборка.НомерДок;
				СтрокаНаложения.ДатаДок = Выборка.ДатаДок;
			КонецЕсли; 
		КонецЦикла; 	
КонецПроцедуры

Процедура ПроверкаНаложенияГрафиковВнутриДокумента(Отказ)
	
	РабочееВремяПредопред = Справочники.ВидыВремениГрафика.РабочееВремя;
	
	ТаблицаНаложений = Новый ТаблицаЗначений;
	ТаблицаНаложений.Колонки.Добавить("Дата");
	ТаблицаНаложений.Колонки.Добавить("Участник");
	ТаблицаНаложений.Колонки.Добавить("ВремяНачала1");
	ТаблицаНаложений.Колонки.Добавить("ВремяНачала2");
	ТаблицаНаложений.Колонки.Добавить("ВремяОкончания1");
	ТаблицаНаложений.Колонки.Добавить("ВремяОкончания2");
	ТаблицаНаложений.Колонки.Добавить("НомерДок");
	ТаблицаНаложений.Колонки.Добавить("ДатаДок");	

	ТаблицаДляСравнения = Новый ТаблицаЗначений;
	ТаблицаДляСравнения = ГрафикиРаботы.ВыгрузитьКолонки();
	ТаблицаДляСравнения.Колонки.Добавить("Филиал",Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	ТаблицаДляСравнения.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаДляСравнения.Колонки.Добавить("НомерДок", Новый ОписаниеТипов("Строка"));
	ТаблицаДляСравнения.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Строка"));
	
	ТаблицаСтрокУникальногоСочетания = Новый ТаблицаЗначений;
	ТаблицаСтрокУникальногоСочетания = ГрафикиРаботы.ВыгрузитьКолонки();
	ТаблицаСтрокУникальногоСочетания.Колонки.Добавить("Филиал",Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	ТаблицаСтрокУникальногоСочетания.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	
	ТаблицаУникальныхСочетаний = Новый ТаблицаЗначений;
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Сотрудник");
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Кабинет");
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Филиал");
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Подразделение");
	
	// Уникальные сочетания пар Сотрудник + Кабинет в пределах локации Филиал + Подразделение
	ТаблицаИспользованныхСочетаний = Новый ТаблицаЗначений;
	ТаблицаИспользованныхСочетаний = ТаблицаУникальныхСочетаний.СкопироватьКолонки();
	
	Для сч = 1 По ГрафикиРаботы.Количество() Цикл
		СтрокаГрафика = ГрафикиРаботы[сч - 1];
		
		СтрокаДляСравнения = ТаблицаДляСравнения.Добавить();
		СтрокаДляСравнения.Сотрудник = СтрокаГрафика.Сотрудник;
		СтрокаДляСравнения.Кабинет = СтрокаГрафика.Кабинет;
		СтрокаДляСравнения.Дата = СтрокаГрафика.Дата;
		СтрокаДляСравнения.ВремяНачала = СтрокаГрафика.ВремяНачала;
		СтрокаДляСравнения.ВремяОкончания = СтрокаГрафика.ВремяОкончания;
		СтрокаДляСравнения.Филиал = Филиал;
		СтрокаДляСравнения.Подразделение = Подразделение;
		СтрокаДляСравнения.НомерДок = ЭтотОбъект.Номер;
		СтрокаДляСравнения.ДатаДок = ЭтотОбъект.Дата;
		
		СтрокаУникальногоСочетания = ТаблицаУникальныхСочетаний.Добавить();
		СтрокаУникальногоСочетания.Сотрудник = СтрокаГрафика.Сотрудник;
		СтрокаУникальногоСочетания.Кабинет = СтрокаГрафика.Кабинет;
		СтрокаУникальногоСочетания.Филиал = Филиал;
		СтрокаУникальногоСочетания.Подразделение = Подразделение;
		
	КонецЦикла;
	
	ТаблицаУникальныхСочетаний.Свернуть("Сотрудник, Кабинет, Филиал, Подразделение");
	
	Для Каждого УникальноеСочетание Из ТаблицаУникальныхСочетаний Цикл

		ТаблицаСтрокУникальногоСочетания.Очистить();
		Для Сч = 1 По ГрафикиРаботы.Количество() Цикл
			Если  ГрафикиРаботы[Сч - 1].Сотрудник = УникальноеСочетание.Сотрудник 
				И ГрафикиРаботы[Сч - 1].Кабинет = УникальноеСочетание.Кабинет
			Тогда
				СтрокаГрафика = ГрафикиРаботы[Сч - 1];
		        
				СтрокаДляМассиваСтрок = ТаблицаСтрокУникальногоСочетания.Добавить();
				СтрокаДляМассиваСтрок.Сотрудник = СтрокаГрафика.Сотрудник;
				СтрокаДляМассиваСтрок.Кабинет = СтрокаГрафика.Кабинет;
				СтрокаДляМассиваСтрок.Дата = СтрокаГрафика.Дата;
				СтрокаДляМассиваСтрок.ВремяНачала = СтрокаГрафика.ВремяНачала;
				СтрокаДляМассиваСтрок.ВремяОкончания = СтрокаГрафика.ВремяОкончания;
				СтрокаДляМассиваСтрок.Филиал = Филиал;
				СтрокаДляМассиваСтрок.Подразделение = Подразделение;
			
			КонецЕсли; 
		КонецЦикла;
		
		НайтиНаложенияГрафиковВЛокации(УникальноеСочетание, ТаблицаСтрокУникальногоСочетания, ТаблицаДляСравнения, ТаблицаНаложений, ТаблицаИспользованныхСочетаний);
		НоваяСтрока = ТаблицаИспользованныхСочетаний.Добавить();
		НоваяСтрока.Сотрудник = УникальноеСочетание.Сотрудник;
		НоваяСтрока.Кабинет = УникальноеСочетание.Кабинет;
		НоваяСтрока.Филиал = УникальноеСочетание.Филиал;		
		НоваяСтрока.Подразделение = УникальноеСочетание.Подразделение;
		
	КонецЦикла; 
		
	Если ТаблицаНаложений.Количество() > 0 Тогда
		
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Внутри документа имеются наложения графиков:'");
		
		Для Каждого СтрокаНаложения Из ТаблицаНаложений Цикл
			
			ПредставлениеУчастника	= 	?(ТипЗнч(СтрокаНаложения.Участник) = Тип("СправочникСсылка.Сотрудники")
			, ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаНаложения.Участник)
			, Строка(СтрокаНаложения.Участник));
			
			СообщениеОбОшибке 	= СообщениеОбОшибке + Символы.ПС
			+ ПредставлениеУчастника + " "
			+ " - " + Формат(СтрокаНаложения.Дата, НСтр("ru='ДФ=dd.MM.yy'")) + Символы.ПС 
			+ Формат(СтрокаНаложения.ВремяНачала1, НСтр("ru='ДФ=ЧЧ:мм'")) + "-" + Формат(СтрокаНаложения.ВремяОкончания1, НСтр("ru='ДФ=ЧЧ:мм'"))
			+ НСтр("ru=' и '")
			+ Формат(СтрокаНаложения.ВремяНачала2, НСтр("ru='ДФ=ЧЧ:мм'")) + "-" + Формат(СтрокаНаложения.ВремяОкончания2, НСтр("ru='ДФ=ЧЧ:мм'"));
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаНаложенияГрафиковСДругимиДокументами(Отказ)
	
	РабочееВремяПредопред = Справочники.ВидыВремениГрафика.РабочееВремя;
	
	ТаблицаНаложений = Новый ТаблицаЗначений;
	ТаблицаНаложений.Колонки.Добавить("Дата");
	ТаблицаНаложений.Колонки.Добавить("Участник");
	ТаблицаНаложений.Колонки.Добавить("ВремяНачала1");
	ТаблицаНаложений.Колонки.Добавить("ВремяНачала2");
	ТаблицаНаложений.Колонки.Добавить("ВремяОкончания1");
	ТаблицаНаложений.Колонки.Добавить("ВремяОкончания2");
	ТаблицаНаложений.Колонки.Добавить("НомерДок");
	ТаблицаНаложений.Колонки.Добавить("ДатаДок");
	
	ТаблицаДляСравнения = Новый ТаблицаЗначений;
	ТаблицаДляСравнения = ГрафикиРаботы.ВыгрузитьКолонки();
	ТаблицаДляСравнения.Колонки.Добавить("Филиал",Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	ТаблицаДляСравнения.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаДляСравнения.Колонки.Добавить("НомерДок", Новый ОписаниеТипов("Строка"));
	ТаблицаДляСравнения.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Строка"));
	
	ТаблицаСтрокУникальногоСочетания = Новый ТаблицаЗначений;
	ТаблицаСтрокУникальногоСочетания = ГрафикиРаботы.ВыгрузитьКолонки();
	ТаблицаСтрокУникальногоСочетания.Колонки.Добавить("Филиал",Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	ТаблицаСтрокУникальногоСочетания.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	
	ТаблицаУникальныхСочетаний = Новый ТаблицаЗначений;
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Сотрудник");
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Кабинет");
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Филиал");
	ТаблицаУникальныхСочетаний.Колонки.Добавить("Подразделение");
	
	ТаблицаИспользованныхСочетаний = Новый ТаблицаЗначений;
	ТаблицаИспользованныхСочетаний = ТаблицаУникальныхСочетаний.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Месяц", ПлДата);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботы.Сотрудник КАК Сотрудник,
		|	ГрафикиРаботы.Кабинет КАК Кабинет,
		|	ГрафикиРаботы.Филиал КАК Филиал,
		|	ГрафикиРаботы.Подразделение КАК Подразделение,
		|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
		|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
		|	ГрафикиРаботы.Дата КАК Дата,
		|	ГрафикиРаботы.Регистратор,
		|	ГрафикиРаботы.Регистратор.Номер КАК РегистраторНомер,
		|	ГрафикиРаботы.Регистратор.Дата КАК РегистраторДата
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = &Месяц
		|	И ГрафикиРаботы.Регистратор <> &ЭтотДокумент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаДляСравнения = ТаблицаДляСравнения.Добавить();
		СтрокаДляСравнения.Сотрудник = Выборка.Сотрудник;
		СтрокаДляСравнения.Кабинет = Выборка.Кабинет;
		СтрокаДляСравнения.Дата = Выборка.Дата;
		СтрокаДляСравнения.ВремяНачала = Выборка.ВремяНачала;
		СтрокаДляСравнения.ВремяОкончания = Выборка.ВремяОкончания;
		СтрокаДляСравнения.Филиал = Выборка.Филиал;
		СтрокаДляСравнения.Подразделение = Выборка.Подразделение;
		СтрокаДляСравнения.НомерДок = Выборка.РегистраторНомер;
		СтрокаДляСравнения.ДатаДок = Выборка.РегистраторДата;
	КонецЦикла;
		
	Для сч = 1 По ГрафикиРаботы.Количество() Цикл
		
		СтрокаГрафика = ГрафикиРаботы[сч - 1];
		
		СтрокаУникальногоСочетания = ТаблицаУникальныхСочетаний.Добавить();
		СтрокаУникальногоСочетания.Сотрудник = СтрокаГрафика.Сотрудник;
		СтрокаУникальногоСочетания.Кабинет = СтрокаГрафика.Кабинет;
		СтрокаУникальногоСочетания.Филиал = Филиал;
		СтрокаУникальногоСочетания.Подразделение = Подразделение;
		
	КонецЦикла;
	 
	ТаблицаУникальныхСочетаний.Свернуть("Сотрудник, Кабинет, Филиал, Подразделение");
	
	Для Каждого УникальноеСочетание Из ТаблицаУникальныхСочетаний Цикл

		ТаблицаСтрокУникальногоСочетания.Очистить();
		Для сч = 1 По ГрафикиРаботы.Количество() Цикл
			Если  ГрафикиРаботы[сч - 1].Сотрудник = УникальноеСочетание.Сотрудник 
				И ГрафикиРаботы[сч - 1].Кабинет = УникальноеСочетание.Кабинет
			Тогда
				СтрокаГрафика = ГрафикиРаботы[сч - 1];
		        
				СтрокаДляМассиваСтрок = ТаблицаСтрокУникальногоСочетания.Добавить();
				СтрокаДляМассиваСтрок.Сотрудник = СтрокаГрафика.Сотрудник;
				СтрокаДляМассиваСтрок.Кабинет = СтрокаГрафика.Кабинет;
				СтрокаДляМассиваСтрок.Дата = СтрокаГрафика.Дата;
				СтрокаДляМассиваСтрок.ВремяНачала = СтрокаГрафика.ВремяНачала;
				СтрокаДляМассиваСтрок.ВремяОкончания = СтрокаГрафика.ВремяОкончания;
				СтрокаДляМассиваСтрок.Филиал = Филиал;
				СтрокаДляМассиваСтрок.Подразделение = Подразделение;			
			КонецЕсли; 
		КонецЦикла;
		
		НайтиНаложенияГрафиковВЛокации(УникальноеСочетание, ТаблицаСтрокУникальногоСочетания, ТаблицаДляСравнения, ТаблицаНаложений, ТаблицаИспользованныхСочетаний);
		НоваяСтрока = ТаблицаИспользованныхСочетаний.Добавить();
		НоваяСтрока.Сотрудник = УникальноеСочетание.Сотрудник;
		НоваяСтрока.Кабинет = УникальноеСочетание.Кабинет;
		НоваяСтрока.Филиал = УникальноеСочетание.Филиал;		
		НоваяСтрока.Подразделение = УникальноеСочетание.Подразделение;
	КонецЦикла; 
	
	Если ТаблицаНаложений.Количество() > 0 Тогда
		
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Имеются наложения графиков с другими документами:'");
		
		Для Каждого СтрокаНаложения Из ТаблицаНаложений Цикл
			
			ПредставлениеУчастника	= 	?(ТипЗнч(СтрокаНаложения.Участник) = Тип("СправочникСсылка.Сотрудники")
			, ОбщегоНазначения.ФамилияИнициалыФизЛица(СтрокаНаложения.Участник)
			, Строка(СтрокаНаложения.Участник));
			
			СообщениеОбОшибке 	= СообщениеОбОшибке + Символы.ПС 
			+ ПредставлениеУчастника + " "
			+ " - " + Формат(СтрокаНаложения.Дата, "ДФ=dd.MM.yy")
			+ " " + НСтр("ru='Документ №'") + СокрЛП(СтрокаНаложения.НомерДок) + " " + НСтр("ru='от'") + " " + Формат(СтрокаНаложения.ДатаДок,"ДФ=dd.MM.yy")
			+ Символы.ПС 
			+ Формат(СтрокаНаложения.ВремяНачала1, "ДФ=ЧЧ:мм") + "-" + Формат(СтрокаНаложения.ВремяОкончания1, "ДФ=ЧЧ:мм")
			+ " " + НСтр("ru='и'") + " "
			+ Формат(СтрокаНаложения.ВремяНачала2, "ДФ=ЧЧ:мм") + "-" + Формат(СтрокаНаложения.ВремяОкончания2, "ДФ=ЧЧ:мм");
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
