Функция ПолучитьСписокСотрудниковПоОтборам(ПостроительОтчета)
	
	Если ТипЗнч(ПостроительОтчета) = Тип("ПостроительОтчета") Тогда
		
		Если ПостроительОтчета = Неопределено Тогда
			
			ПостроительОтчета = Новый ПостроительОтчета;	
			ПостроительОтчета.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
			
		КонецЕсли;
		
		ПостроительОтчета.Выполнить();
		ТабРезультат = ПостроительОтчета.Результат.Выгрузить();
		
		Возврат ТабРезультат.ВыгрузитьКолонку("Сотрудник");
		
	ИначеЕсли ТипЗнч(ПостроительОтчета) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет("СхемаКомпоновкиДанных");
		
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ПостроительОтчета.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос);
		
		Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			
			Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
			
		КонецЦикла;
		
		ТабРезультат = Запрос.Выполнить().Выгрузить();
		
		Возврат ТабРезультат.ВыгрузитьКолонку("Сотрудник");
		
	КонецЕсли;	
КонецФункции

Функция ПолучитьСписокСотрудниковСИерархией(МассивСотрудниковДляРасчетаБазы)
	
	Запрос = Новый Запрос;
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)
	|ИТОГИ ПО
	|	Сотрудник ТОЛЬКО ИЕРАРХИЯ";
	;
	Запрос.УстановитьПараметр("СписокСотрудников",МассивСотрудниковДляРасчетаБазы);
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	ТабРезультат.Свернуть("Сотрудник","");
	
	Возврат ТабРезультат.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Процедура ПолучитьДанныеПоСдельнымНачислениям(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОНачисленияхСотрудников.Период КАК Период,
	               |	СведенияОНачисленияхСотрудников.Сотрудник КАК Сотрудник,
	               |	СведенияОНачисленияхСотрудников.Начисление КАК Начисление,
	               |	СведенияОНачисленияхСотрудников.Действие КАК Действие,
	               |	СведенияОНачисленияхСотрудников.Параметр1 КАК Параметр1,
	               |	СведенияОНачисленияхСотрудников.Параметр2 КАК Параметр2,
	               |	СведенияОНачисленияхСотрудников.Параметр3 КАК Параметр3,
	               |	ПрекращенныеНачисления.Период КАК ПериодПрекращения,
	               |	ВЫБОР
	               |		КОГДА СведенияОНачисленияхСотрудников.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ СведенияОНачисленияхСотрудников.Сотрудник.ЭтоГруппа
	               |	КОНЕЦ КАК СотрудникЭтоГруппа,
	               |	СведенияОНачисленияхСотрудников.ТрудоваяРоль КАК ТрудоваяРоль
	               |ИЗ
	               |	РегистрСведений.СведенияОНачисленияхСотрудников КАК СведенияОНачисленияхСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СведенияОНачисленияхСотрудников.Период КАК Период,
	               |			СведенияОНачисленияхСотрудников.Сотрудник КАК Сотрудник,
	               |			СведенияОНачисленияхСотрудников.Начисление КАК Начисление,
	               |			СведенияОНачисленияхСотрудников.ТрудоваяРоль КАК ТрудоваяРоль
	               |		ИЗ
	               |			РегистрСведений.СведенияОНачисленияхСотрудников КАК СведенияОНачисленияхСотрудников
	               |		ГДЕ
	               |			СведенияОНачисленияхСотрудников.Действие = &Прекратить) КАК ПрекращенныеНачисления
	               |		ПО СведенияОНачисленияхСотрудников.Сотрудник = ПрекращенныеНачисления.Сотрудник
	               |			И СведенияОНачисленияхСотрудников.Начисление = ПрекращенныеНачисления.Начисление
	               |			И СведенияОНачисленияхСотрудников.Период < ПрекращенныеНачисления.Период
	               |			И СведенияОНачисленияхСотрудников.ТрудоваяРоль = ПрекращенныеНачисления.ТрудоваяРоль
	               |ГДЕ
	               |	(СведенияОНачисленияхСотрудников.Действие <> &Прекратить
	               |				И СведенияОНачисленияхСотрудников.Начисление.ФормулаРасчета <> &Фиксированная
	               |				И СведенияОНачисленияхСотрудников.Сотрудник В ИЕРАРХИИ (&СписокСотрудниковСИерархией)
	               |			ИЛИ СведенияОНачисленияхСотрудников.ТрудоваяРоль <> ЗНАЧЕНИЕ(Справочник.ТрудовыеРоли.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ТрудоваяРоль,
	               |	Начисление,
	               |	Период";
				   
	ТаблицаНачисленийИсх = Запрос.Выполнить().Выгрузить();
	
	// Расстановка периодов прекращения для изменявшихся начислений.
	Для Каждого Строка из ТаблицаНачисленийИсх Цикл
		Инд = ТаблицаНачисленийИсх.Индекс(Строка);
		Если Инд > 0 Тогда
			
			Если	Строка.Начисление.ВидПараметра1 = Перечисления.ВидыПараметровРасчетаНачислений.КатегорияВыработки
				Или	Строка.Начисление.ВидПараметра2 = Перечисления.ВидыПараметровРасчетаНачислений.КатегорияВыработки
				Или	Строка.Начисление.ВидПараметра2 = Перечисления.ВидыПараметровРасчетаНачислений.КатегорияВыработки
			Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Не ЗначениеЗаполнено(ТаблицаНачисленийИсх[Инд-1].ПериодПрекращения) Или ТаблицаНачисленийИсх[Инд-1].ПериодПрекращения > Строка.Период) И
				 Строка.Сотрудник	 = ТаблицаНачисленийИсх[Инд-1].Сотрудник И
				 Строка.ТрудоваяРоль = ТаблицаНачисленийИсх[Инд-1].ТрудоваяРоль И
				 Строка.Начисление	 = ТаблицаНачисленийИсх[Инд-1].Начисление И
				 Строка.Период		 > ТаблицаНачисленийИсх[Инд-1].Период
			Тогда
				ТаблицаНачисленийИсх[Инд-1].ПериодПрекращения = Строка.Период;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// ПериодПрекращения для начислений от категории выработки
	ТаблицаНачисленийСпециализации = ТаблицаНачисленийИсх.СкопироватьКолонки();
	ТаблицаНачисленийСпециализации.Колонки.Добавить("НомерСтрокиТаблицаНачисленийИсх");
	
	Для Сч = 1 По 3 Цикл
		ТаблицаНачисленийСпециализации.Очистить();
		Для Каждого Строка из ТаблицаНачисленийИсх Цикл
			
			Если Строка.Начисление["ВидПараметра"+Сч] = Перечисления.ВидыПараметровРасчетаНачислений.КатегорияВыработки Тогда
				СтрокаСпец = ТаблицаНачисленийСпециализации.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСпец, Строка);
				СтрокаСпец.НомерСтрокиТаблицаНачисленийИсх = ТаблицаНачисленийИсх.Индекс(Строка);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаНачисленийСпециализации.Сортировать("Сотрудник, ТрудоваяРоль, Начисление, Параметр"+Сч + ", Период");
		
		Для Каждого Строка Из ТаблицаНачисленийСпециализации Цикл
			Инд = ТаблицаНачисленийСпециализации.Индекс(Строка);
			Если Инд > 0 Тогда
				Если (Не ЗначениеЗаполнено(ТаблицаНачисленийСпециализации[Инд-1].ПериодПрекращения) Или ТаблицаНачисленийСпециализации[Инд-1].ПериодПрекращения >  Строка.Период) И	
					 Строка.Сотрудник		 = ТаблицаНачисленийСпециализации[Инд-1].Сотрудник И
					 Строка.ТрудоваяРоль	 = ТаблицаНачисленийСпециализации[Инд-1].ТрудоваяРоль И
					 Строка.Начисление		 = ТаблицаНачисленийСпециализации[Инд-1].Начисление И
					 Строка["Параметр"+Сч]	 = ТаблицаНачисленийСпециализации[Инд-1]["Параметр"+Сч] И
					 Строка.Период			 > ТаблицаНачисленийСпециализации[Инд-1].Период
				Тогда
					ТаблицаНачисленийСпециализации[Инд-1].ПериодПрекращения = Строка.Период;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ТаблицаНачисленийСпециализации Цикл
			Если ЗначениеЗаполнено(Строка.ПериодПрекращения) Тогда
				ТаблицаНачисленийИсх[Строка.НомерСтрокиТаблицаНачисленийИсх].ПериодПрекращения = Строка.ПериодПрекращения;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	// Простановка даты прекращения по умолчанию.
	Для Каждого Строка из ТаблицаНачисленийИсх Цикл
		Если ЗначениеЗаполнено(Строка.ПериодПрекращения) Тогда
			Строка.ПериодПрекращения = Строка.ПериодПрекращения - 1;
		Иначе
			Строка.ПериодПрекращения = Дата(3000,1,1);
		КонецЕсли;
	КонецЦикла;
	
	// Развёртка групп сотрудников до сотрудников
	ТаблицаНачислений = ТаблицаНачисленийИсх.СкопироватьКолонки();
	ТаблицаНачислений.Колонки.Удалить("СотрудникЭтоГруппа");
	Для Каждого Строка Из ТаблицаНачисленийИсх Цикл
		
		флПервичноеНачисление = Истина;
		ЧислоПараметров = РасчетЗаработнойПлаты.ПолучитьЧислоПараметровВидаНачисления(Строка.Начисление);
		Для НомерПараметра = 1 По ЧислоПараметров Цикл
			ВидПараметра = Строка.Начисление["ВидПараметра"+НомерПараметра];
			Если ВидПараметра = Перечисления.ВидыПараметровРасчетаНачислений.ВидНачисления Тогда
				флПервичноеНачисление = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка попадания в ограничение документа на первичные-вторичные виды начислений.
		Если (флПервичноеНачисление 	И Не ВключатьПервичныеНачисления) Или 
			 (Не флПервичноеНачисление 	И Не ВключатьВторичныеНачисления) 
		Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.СотрудникЭтоГруппа Тогда
			Выб = Справочники.Сотрудники.Выбрать(Строка.Сотрудник);
			Пока Выб.Следующий() Цикл
				Если Не Выб.ЭтоГруппа Тогда
					СтрокаНачисления = ТаблицаНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНачисления,Строка);	
					СтрокаНачисления.Сотрудник = Выб.Ссылка;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(),Строка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = " ВЫБРАТЬ * ПОМЕСТИТЬ ТаблицаНачислений ИЗ &Таб КАК Таб ГДЕ Сотрудник В ИЕРАРХИИ (&СписокСотрудников) ИЛИ Сотрудник = Значение(Справочник.Сотрудники.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Таб", ТаблицаНачислений);
	Запрос.Выполнить();
	Запрос.Текст = " ВЫБРАТЬ * ИЗ ТаблицаНачислений; УНИЧТОЖИТЬ ТаблицаНачислений";
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	
	// Возврат результата
	Запрос.Текст = "ВЫБРАТЬ	*
	               |ПОМЕСТИТЬ Начисления
	               |ИЗ  &ТаблицаНачислений КАК ТаблицаНачислений";
	Запрос.УстановитьПараметр("ТаблицаНачислений",ТаблицаНачислений);
	Запрос.Выполнить();
				   
КонецПроцедуры				   

Процедура ЗаполнитьБазуРасчетаПоСдельнымНачислениям(Запрос, МассивСотрудниковДляРасчетаБазы)
	
	Запрос.Текст="ВЫБРАТЬ
	             |	Начисления.Сотрудник,
	             |	Начисления.ТрудоваяРоль КАК ТрудоваяРоль,
	             |	Начисления.Параметр1 КАК Показатель,
	             |	Начисления.Период КАК ПериодНачала,
	             |	Начисления.ПериодПрекращения,
	             |	Начисления.Начисление КАК ВидРасчета,
	             |	Начисления.Начисление.ВидПараметра1 КАК ВидПараметра,
	             |	Начисления.Начисление.ПоказательРасчета1 КАК ПоказательРасчета
	             |ИЗ
	             |	Начисления КАК Начисления
	             |
	             |ОБЪЕДИНИТЬ
	             |
	             |ВЫБРАТЬ
	             |	Начисления.Сотрудник,
	             |	Начисления.ТрудоваяРоль,
	             |	Начисления.Параметр2,
	             |	Начисления.Период,
	             |	Начисления.ПериодПрекращения,
	             |	Начисления.Начисление,
	             |	Начисления.Начисление.ВидПараметра2,
	             |	Начисления.Начисление.ПоказательРасчета2
	             |ИЗ
	             |	Начисления КАК Начисления
	             |
	             |ОБЪЕДИНИТЬ
	             |
	             |ВЫБРАТЬ
	             |	Начисления.Сотрудник,
	             |	Начисления.ТрудоваяРоль,
	             |	Начисления.Параметр3,
	             |	Начисления.Период,
	             |	Начисления.ПериодПрекращения,
	             |	Начисления.Начисление,
	             |	Начисления.Начисление.ВидПараметра3,
	             |	Начисления.Начисление.ПоказательРасчета3
	             |ИЗ
	             |	Начисления КАК Начисления";
				 
	ТаблицаПараметровРасчета = Запрос.Выполнить().Выгрузить();
	ТаблицаПараметровРасчета.Свернуть("Сотрудник,ТрудоваяРоль,Показатель,ПериодНачала,ПериодПрекращения,ВидПараметра,ПоказательРасчета","");
		
	// Вот тут вставить замену общей роли на сотрудников
	// Необходимо проверить есть ли эта роль для данного сотрудника в нашей таблице (если есть значит что-то её перекрывает и по общему начислению мы не будем начислять).
	
	ТаблицаДляСчитывания = ТаблицаПараметровРасчета.Скопировать();
	
	Для каждого СтрокаТаблицыПараметров из ТаблицаДляСчитывания Цикл
		Если СтрокаТаблицыПараметров.Сотрудник = Справочники.Сотрудники.ПустаяСсылка() И СтрокаТаблицыПараметров.ТрудоваяРоль <> Справочники.ТрудовыеРоли.ПустаяСсылка() Тогда
			
			Для каждого СотрудникМассива из МассивСотрудниковДляРасчетаБазы Цикл				
				Если СотрудникМассива <> Справочники.Сотрудники.ПустаяСсылка() Тогда
					
					ОтборПоРолиИСотруднику = Новый Структура("Сотрудник,ТрудоваяРоль",СотрудникМассива,СтрокаТаблицыПараметров.ТрудоваяРоль);
					НайденныеСтроки = ТаблицаДляСчитывания.НайтиСтроки(ОтборПоРолиИСотруднику);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						НоваяСтрока = ТаблицаПараметровРасчета.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыПараметров);
						НоваяСтрока.Сотрудник = СотрудникМассива;
						
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЦикла;
	
	мОбрИнд = ТаблицаПараметровРасчета.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаТЗ = ТаблицаПараметровРасчета[мОбрИнд-сч];
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ВидПараметра) ИЛИ Не ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Тогда
			ТаблицаПараметровРасчета.Удалить(мОбрИнд-сч);
		КонецЕсли;
		
	КонецЦикла;
		
	ВыборкаПоказателиПрямойВыработки = СформироватьВыборкуПрямойВыработки(Запрос, ТаблицаПараметровРасчета);
	ТаблицаТабельныхДанные			 = СформироватьТаблицуТабельныхДанных(ТаблицаПараметровРасчета);
	ТаблицаНормыПоГрафику	 		 = СформироватьНормыПоГрафику(ТаблицаПараметровРасчета);
	
	СтруктураДанныхДляРасчета = Новый Структура;
	СтруктураДанныхДляРасчета.Вставить("ВыборкаПоказателиПрямойВыработки",	ВыборкаПоказателиПрямойВыработки);
	СтруктураДанныхДляРасчета.Вставить("ТаблицаТабельныхДанные",			ТаблицаТабельныхДанные);
	СтруктураДанныхДляРасчета.Вставить("ТаблицаНормыПоГрафику",	ТаблицаНормыПоГрафику);
	
	СформироватьВременнуюТаблицуНепрямойВыработки(Запрос);
	СформироватьВременнуюТаблицуПоПервичнымВидамРасчета(Запрос, ТаблицаПараметровРасчета);
	
	// Заполнение значений параметров расчета	
	ТаблицаЗначенийПараметровРасчета = ТаблицаПараметровРасчета.Скопировать();
	ТаблицаЗначенийПараметровРасчета.Колонки.Добавить("Период"	,Новый ОписаниеТипов("Дата"));
	ТаблицаЗначенийПараметровРасчета.Колонки.Добавить("Значение",Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаПараметраРасчета Из ТаблицаПараметровРасчета Цикл
		ВычислитьЗначениеПараметраРасчета(СтрокаПараметраРасчета, СтруктураДанныхДляРасчета, Запрос, ТаблицаЗначенийПараметровРасчета);		
	КонецЦикла;
	
	// Собственно заполнение базы расчета
	БазаРасчета.Очистить();
	ТаблицаБазаРасчета = БазаРасчета.Выгрузить();
	
	Запрос.Текст="ВЫБРАТЬ
	             |	Начисления.Сотрудник,
				 |	Начисления.ТрудоваяРоль,
	             |	Начисления.Начисление КАК ВидРасчета,
	             |	Начисления.Параметр1  КАК Показатель1,
	             |	Начисления.Параметр2  КАК Показатель2,
	             |	Начисления.Параметр3  КАК Показатель3,
	             |	Начисления.Период	  КАК ПериодНачала,
	             |	Начисления.ПериодПрекращения
	             |ИЗ
	             |	Начисления КАК Начисления";
	
	ВидыРасчетаСотрудников = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДляСчитывания = ВидыРасчетаСотрудников.Скопировать();
	
	Для каждого СтрокаТаблицыПараметров из ТаблицаДляСчитывания Цикл
		Если СтрокаТаблицыПараметров.Сотрудник = Справочники.Сотрудники.ПустаяСсылка() И СтрокаТаблицыПараметров.ТрудоваяРоль <> Справочники.ТрудовыеРоли.ПустаяСсылка() Тогда
			
			Для каждого СотрудникМассива из МассивСотрудниковДляРасчетаБазы Цикл				
				Если СотрудникМассива <> Справочники.Сотрудники.ПустаяСсылка() Тогда
					
					ОтборПоРолиИСотруднику = Новый Структура("Сотрудник,ТрудоваяРоль",СотрудникМассива,СтрокаТаблицыПараметров.ТрудоваяРоль);
					НайденныеСтроки = ТаблицаДляСчитывания.НайтиСтроки(ОтборПоРолиИСотруднику);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						НоваяСтрока = ВидыРасчетаСотрудников.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыПараметров);
						НоваяСтрока.Сотрудник = СотрудникМассива;
						
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЦикла;
	
	Для каждого ВыбВидыРасчетаСотрудников из ВидыРасчетаСотрудников Цикл
		
		ЧислоПараметров = РасчетЗаработнойПлаты.ПолучитьЧислоПараметровВидаНачисления(ВыбВидыРасчетаСотрудников.ВидРасчета);
		
		ТаблицыЗначенийПараметровВидаРасчета = Новый Структура;
		МассивПериодов	= Новый Массив;
		Для НомерПараметра = 1 По ЧислоПараметров Цикл
			ПолучитьТаблицуЗначенийПараметраВидаРасчета(ВыбВидыРасчетаСотрудников,
														НомерПараметра,
														ТаблицаЗначенийПараметровРасчета,
														ТаблицыЗначенийПараметровВидаРасчета,
														МассивПериодов);
		КонецЦикла;
		
		Для Каждого Период Из МассивПериодов Цикл
			НоваяСтрокаБазы = ТаблицаБазаРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаБазы, ВыбВидыРасчетаСотрудников);
			НоваяСтрокаБазы.ПериодНачисления = Период;
			                 
			// Поиск и подстановка значений
			Для НомерПараметра = 1 По ЧислоПараметров Цикл			
				ТаблицаЗначенийПараметра = ТаблицыЗначенийПараметровВидаРасчета["ЗначенияПараметра"+НомерПараметра];
				СтрокаЗначенияПараметра	= ТаблицаЗначенийПараметра.Найти(Период,"Период");
				Если СтрокаЗначенияПараметра <> Неопределено Тогда
					НоваяСтрокаБазы["ЗначениеПоказателя" + НомерПараметра] = СтрокаЗначенияПараметра.Значение;
				КонецЕсли;
			КонецЦикла;
				
			// Подбор категории выработки отнесения затрат на з/п
			Для НомерПараметра = 1 По ЧислоПараметров Цикл			
				Если ТипЗнч(ВыбВидыРасчетаСотрудников["Показатель"+НомерПараметра]) = Тип("СправочникСсылка.КатегорииВыработки") Тогда
					НоваяСтрокаБазы.КатегорияВыработки = ВыбВидыРасчетаСотрудников["Показатель"+НомерПараметра];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	СвернутьТаблицуБазыРасчета(ТаблицаБазаРасчета);
	
	// Расчет показателей, вычисляемых на втором обходе: шкалы.
	Для Каждого СтрокаБазы Из ТаблицаБазаРасчета Цикл
		                                           
		ПеречислениеПоказатели		= Перечисления.ПоказателиРасчетаНачислений;
		НомерОцениваемогоПараметра	= 0;
		ЧислоПараметров = РасчетЗаработнойПлаты.ПолучитьЧислоПараметровВидаНачисления(СтрокаБазы.ВидРасчета);
		Для НомерПараметра = 1 По ЧислоПараметров Цикл
			     
			ВидПараметра = СтрокаБазы.ВидРасчета["ВидПараметра"+НомерПараметра];
			Если ВидПараметра = Перечисления.ВидыПараметровРасчетаНачислений.Шкала Тогда
				ПоказательРасчета = СтрокаБазы.ВидРасчета["ПоказательРасчета"+НомерПараметра];
				Если ПоказательРасчета = ПеречислениеПоказатели.Параметр1 Тогда
					НомерОцениваемогоПараметра = 1;
				ИначеЕсли ПоказательРасчета = ПеречислениеПоказатели.Параметр2 Тогда
					НомерОцениваемогоПараметра = 2;
				ИначеЕсли ПоказательРасчета = ПеречислениеПоказатели.Параметр3 Тогда
					НомерОцениваемогоПараметра = 3;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НомерОцениваемогоПараметра) Тогда
					СтрокаБазы["ЗначениеПоказателя"+НомерПараметра] = РасчетЗаработнойПлаты.ОценитьЗначениеПоШкале(	СтрокаБазы["ЗначениеПоказателя"+НомерОцениваемогоПараметра],
																													СтрокаБазы["Показатель"+НомерПараметра]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	БазаРасчета.Загрузить(ТаблицаБазаРасчета);
	
КонецПроцедуры	                                                      
	
Процедура ЗаполнитьБазуРасчетаПоЕжемесячнымНачислениям(Запрос)

	Запрос.Текст="ВЫБРАТЬ
	             |	СведенияОНачислениях.Сотрудник,
	             |	СведенияОНачислениях.Начисление КАК ВидРасчета,
	             |	СведенияОНачислениях.Параметр1 КАК Показатель1,
	             |	СведенияОНачислениях.Параметр1 КАК ЗначениеПоказателя1,
	             |	0 КАК Показатель2,
	             |	0 КАК Показатель3,
	             |	&КонецПериода КАК ПериодНачисления,
	             |	СведенияОНачислениях.Сотрудник.ЭтоГруппа КАК ЭтоГруппа
	             |ИЗ
	             |	РегистрСведений.СведенияОНачисленияхСотрудников КАК СведенияОНачислениях
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			СведенияОНачисленияхСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	             |			СведенияОНачисленияхСотрудниковСрезПоследних.Начисление КАК Начисление,
	             |			МАКСИМУМ(СведенияОНачисленияхСотрудниковСрезПоследних.Период) КАК Период
	             |		ИЗ
	             |			РегистрСведений.СведенияОНачисленияхСотрудников.СрезПоследних(
	             |					&КонецПериода,
	             |					Действие <> &НеИзменять
	             |						И (Начисление.ФормулаРасчета = &Фиксированная 
				 |                      	ИЛИ Начисление.ФормулаРасчета = &МинимальныйОклад)   
	             |						И Сотрудник В ИЕРАРХИИ (&СписокСотрудниковСИерархией)) КАК СведенияОНачисленияхСотрудниковСрезПоследних
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			СведенияОНачисленияхСотрудниковСрезПоследних.Сотрудник,
	             |			СведенияОНачисленияхСотрудниковСрезПоследних.Начисление) КАК ПериодыПоследних
	             |		ПО СведенияОНачислениях.Период = ПериодыПоследних.Период
	             |			И СведенияОНачислениях.Сотрудник = ПериодыПоследних.Сотрудник
	             |			И СведенияОНачислениях.Начисление = ПериодыПоследних.Начисление
	             |ГДЕ
	             |	СведенияОНачислениях.Действие <> &Прекратить";
	
	ТаблицаНачисленийИсх = Запрос.Выполнить().Выгрузить();
	ТаблицаНачислений = ТаблицаНачисленийИсх.СкопироватьКолонки();
	ТаблицаНачислений.Колонки.Удалить("ЭтоГруппа");
	         
	// Деиерархизация начислений, указанных для групп сотрудников (Развёртка групп сотрудников до сотрудников).
	Для Каждого Строка Из ТаблицаНачисленийИсх Цикл
		Если Строка.ЭтоГруппа Тогда
			Выб = Справочники.Сотрудники.Выбрать(Строка.Сотрудник);
			Пока Выб.Следующий() Цикл
				Если Не Выб.ЭтоГруппа Тогда
					СтрокаНачисления = ТаблицаНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНачисления,Строка);	
					СтрокаНачисления.Сотрудник = Выб.Ссылка;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(),Строка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = " ВЫБРАТЬ * ПОМЕСТИТЬ ТаблицаНачислений ИЗ &Таб КАК Таб ГДЕ Сотрудник В ИЕРАРХИИ (&СписокСотрудников)";
	Запрос.УстановитьПараметр("Таб", ТаблицаНачислений);
	Запрос.Выполнить();
	Запрос.Текст = " ВЫБРАТЬ * ИЗ ТаблицаНачислений; УНИЧТОЖИТЬ ТаблицаНачислений ";
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаНачислений Цикл
		НоваяСтрока = БазаРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ВыровнятьПериодПоПериодичностиВидаРасчета(НоваяСтрока.ВидРасчета,НоваяСтрока.ПериодНачисления);
	КонецЦикла;
	
КонецПроцедуры	
	
Функция РассчитатьРезультат(СтрокаБазыРасчета)
	
	Результат = 0;
	
	ФормулыРасчета = Перечисления.ФормулыРасчетаЗаработнойПлаты;
	
	Если СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.ФиксированнаяСумма Тогда
		Результат = СтрокаБазыРасчета.ЗначениеПоказателя1;
	ИначеЕсли  СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.Процент Тогда
		Результат = СтрокаБазыРасчета.ЗначениеПоказателя1 * СтрокаБазыРасчета.ЗначениеПоказателя2 / 100;
	ИначеЕсли  СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.Произведение Тогда
		Результат = СтрокаБазыРасчета.ЗначениеПоказателя1 * СтрокаБазыРасчета.ЗначениеПоказателя2;
	ИначеЕсли  СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.Разность Тогда
		Результат = СтрокаБазыРасчета.ЗначениеПоказателя1 - СтрокаБазыРасчета.ЗначениеПоказателя2;
	ИначеЕсли  СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.ПроцентОтРазности Тогда
		Результат = (СтрокаБазыРасчета.ЗначениеПоказателя1 - СтрокаБазыРасчета.ЗначениеПоказателя2) * СтрокаБазыРасчета.ЗначениеПоказателя3/100;
	ИначеЕсли  СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.ТройноеПроизведение Тогда
		Результат = СтрокаБазыРасчета.ЗначениеПоказателя1 * СтрокаБазыРасчета.ЗначениеПоказателя2 * СтрокаБазыРасчета.ЗначениеПоказателя3;
	ИначеЕсли  СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.Деление Тогда
		Если ЗначениеЗаполнено(СтрокаБазыРасчета.ЗначениеПоказателя2) Тогда
			Результат = СтрокаБазыРасчета.ЗначениеПоказателя1 / СтрокаБазыРасчета.ЗначениеПоказателя2;
		Иначе
			Результат = 0;
		КонецЕсли;
	ИначеЕсли  СтрокаБазыРасчета.ВидРасчета.ФормулаРасчета = ФормулыРасчета.ДелениеПроизведения Тогда
		Если ЗначениеЗаполнено(СтрокаБазыРасчета.ЗначениеПоказателя3) Тогда
			Результат = (СтрокаБазыРасчета.ЗначениеПоказателя1 * СтрокаБазыРасчета.ЗначениеПоказателя2) / СтрокаБазыРасчета.ЗначениеПоказателя3;
		Иначе
			Результат = 0;
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВычислитьЗначениеПараметраРасчета(СтрокаПараметраРасчета, СтруктураДанныхДляРасчета, Запрос, ТаблицаЗначенийПараметровРасчета)
	
	ВидПараметра	= СтрокаПараметраРасчета.ВидПараметра;
	ПеречислениеВидыПараметров = Перечисления.ВидыПараметровРасчетаНачислений;
	
	ВыборкаПоказателиПрямойВыработки = СтруктураДанныхДляРасчета.ВыборкаПоказателиПрямойВыработки;
	ТаблицаНормыПоГрафику = СтруктураДанныхДляРасчета.ТаблицаНормыПоГрафику;
	
	Если ВидПараметра = ПеречислениеВидыПараметров.КатегорияВыработки Тогда
		
		Отбор = Новый Структура("Сотрудник, ТрудоваяРоль, Показатель, ПериодНачала, ПериодПрекращения, ВидПараметра, ПоказательРасчета");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПараметраРасчета);
		ВыборкаПоказателиПрямойВыработки.Сбросить();
		Пока ВыборкаПоказателиПрямойВыработки.НайтиСледующий(Отбор) Цикл
			СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
			СтрокаЗначенияПараметраРасчета.Период	= ВыборкаПоказателиПрямойВыработки.Период;
			СтрокаЗначенияПараметраРасчета.Значение = ПолучитьЗначениеПоВарификатору(ВыборкаПоказателиПрямойВыработки, СтрокаПараметраРасчета.ПоказательРасчета);
		КонецЦикла;
		
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.ВсеТовары Или ВидПараметра = ПеречислениеВидыПараметров.ВсеУслуги Тогда
		
		Отбор = Новый Структура("Сотрудник, ТрудоваяРоль, ПериодНачала, ПериодПрекращения, ВидПараметра, ПоказательРасчета, Материал");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПараметраРасчета);
		Отбор.Материал = ?(ВидПараметра = ПеречислениеВидыПараметров.ВсеТовары,Истина,?(ВидПараметра = ПеречислениеВидыПараметров.ВсеУслуги,Ложь,NULL));
		ВыборкаПоказателиПрямойВыработки.Сбросить();
		Пока ВыборкаПоказателиПрямойВыработки.НайтиСледующий(Отбор) Цикл
			СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
			СтрокаЗначенияПараметраРасчета.Период	= ВыборкаПоказателиПрямойВыработки.Период;
			СтрокаЗначенияПараметраРасчета.Значение = ПолучитьЗначениеПоВарификатору(ВыборкаПоказателиПрямойВыработки, СтрокаПараметраРасчета.ПоказательРасчета);
		КонецЦикла;
		
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.Число Тогда
		СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
		СтрокаЗначенияПараметраРасчета.Значение = СтрокаПараметраРасчета.Показатель;
	
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.Шкала Тогда
		// Вычисляется при втором обходе 
		
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.ВидНачисления Тогда
		ВыборкаПервичныеНачисления = ПолучитьВыборкуПервичныхНачислений(Запрос, СтрокаПараметраРасчета);
		Пока ВыборкаПервичныеНачисления.Следующий() Цикл
			СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
			СтрокаЗначенияПараметраРасчета.Период	= ВыборкаПервичныеНачисления.Период;
			СтрокаЗначенияПараметраРасчета.Значение = ВыборкаПервичныеНачисления.Сумма;
		КонецЦикла;
		
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.Ответственный Тогда
		ВыборкаНепрямойВыработки = ПолучитьВыборкуНепрямойВыработки(Запрос, "Ответственный", СтрокаПараметраРасчета);
		Пока ВыборкаНепрямойВыработки.Следующий() Цикл
			СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
			СтрокаЗначенияПараметраРасчета.Период	 = ВыборкаНепрямойВыработки.Период;
			СтрокаЗначенияПараметраРасчета.Значение = ПолучитьЗначениеПоВарификатору(ВыборкаНепрямойВыработки, СтрокаПараметраРасчета.ПоказательРасчета);
		КонецЦикла;
		
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.Филиал Тогда
		Если ПроцедурыСпециализацииПоставки.ПоддерживаетсяУчетПоНесколькимФилиалам() Тогда
			ВыборкаНепрямойВыработки = ПолучитьВыборкуНепрямойВыработки(Запрос, "Филиал", СтрокаПараметраРасчета);
		Иначе
			ВыборкаНепрямойВыработки = ПолучитьВыборкуНепрямойВыработки(Запрос, , СтрокаПараметраРасчета);
		КонецЕсли;
		Пока ВыборкаНепрямойВыработки.Следующий() Цикл
			СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
			СтрокаЗначенияПараметраРасчета.Период	 = ВыборкаНепрямойВыработки.Период;
			СтрокаЗначенияПараметраРасчета.Значение = ПолучитьЗначениеПоВарификатору(ВыборкаНепрямойВыработки, СтрокаПараметраРасчета.ПоказательРасчета);
		КонецЦикла;
		
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.ДанныеТабеля Тогда
		
		Если СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.КоличествоДнейПоТабелю 
			ИЛИ СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.КоличествоЧасовПоТабелю 
		Тогда
			Отбор = Новый Структура("Сотрудник", СтрокаПараметраРасчета.Сотрудник);
			мсСтрокиТабельныхДанных = СтруктураДанныхДляРасчета.ТаблицаТабельныхДанные.НайтиСтроки(Отбор);
			Для Каждого СтрокаТабельныхДанных Из мсСтрокиТабельныхДанных Цикл
				Если СтрокаТабельныхДанных.День >= СтрокаПараметраРасчета.ПериодНачала
					И СтрокаТабельныхДанных.День <= СтрокаПараметраРасчета.ПериодПрекращения
				Тогда
					СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
					СтрокаЗначенияПараметраРасчета.Период	= СтрокаТабельныхДанных.День;
					СтрокаЗначенияПараметраРасчета.Значение = ПолучитьЗначениеПоВарификатору(СтрокаТабельныхДанных, СтрокаПараметраРасчета.ПоказательРасчета);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаНормПоГрафику Из ТаблицаНормыПоГрафику Цикл
				Если СтрокаНормПоГрафику.Месяц >= НачалоМесяца(СтрокаПараметраРасчета.ПериодНачала)
					И СтрокаНормПоГрафику.Месяц <= КонецМесяца(СтрокаПараметраРасчета.ПериодПрекращения)
					И СтрокаНормПоГрафику.ВидГрафика = СтрокаПараметраРасчета.Показатель
				Тогда
					ПоказателиРасчета = Новый Структура("КоличествоДнейПоТабелю, КоличествоЧасовПоТабелю, 
														|ДнейПоНорме,	ДнейОтработаноПоНорме,	ДнейОтработаноСверхНормы, 
														|ЧасовПоНорме,	ЧасовОтработаноПоНорме,	ЧасовОтработаноСверхНормы",
														0,0,0,0,0,0,0,0);
														
					ПоказателиРасчета.ДнейПоНорме = СтрокаНормПоГрафику.ДнейПоНорме;
				    ПоказателиРасчета.ЧасовПоНорме = СтрокаНормПоГрафику.ЧасовПоНорме;
					
					// Определяем количество дней и часов, отработанных в этом месяце по табелю
					Отбор = Новый Структура("Сотрудник", СтрокаПараметраРасчета.Сотрудник);
					СтрокиТабельныхДанных = СтруктураДанныхДляРасчета.ТаблицаТабельныхДанные.НайтиСтроки(Отбор);
					Для Каждого СтрокаТабельныхДанных Из СтрокиТабельныхДанных Цикл
						Если СтрокаТабельныхДанных.День >= СтрокаПараметраРасчета.ПериодНачала
							И СтрокаТабельныхДанных.День <= СтрокаПараметраРасчета.ПериодПрекращения
							И НачалоМесяца(СтрокаТабельныхДанных.День) = СтрокаНормПоГрафику.Месяц
						Тогда
							ПоказателиРасчета.КоличествоДнейПоТабелю = ПоказателиРасчета.КоличествоДнейПоТабелю  + СтрокаТабельныхДанных.КоличествоДнейПоТабелю;
							ПоказателиРасчета.КоличествоЧасовПоТабелю = ПоказателиРасчета.КоличествоЧасовПоТабелю + СтрокаТабельныхДанных.КоличествоЧасовПоТабелю;
						КонецЕсли;	
					КонецЦикла;
														
					ПоказателиРасчета.ДнейОтработаноПоНорме	 = Мин(ПоказателиРасчета.КоличествоДнейПоТабелю, СтрокаНормПоГрафику.ДнейПоНорме);
					ПоказателиРасчета.ЧасовОтработаноПоНорме = Мин(ПоказателиРасчета.КоличествоЧасовПоТабелю, СтрокаНормПоГрафику.ЧасовПоНорме);
					
					ПоказателиРасчета.ДнейОтработаноСверхНормы  = Макс(0, ПоказателиРасчета.КоличествоДнейПоТабелю  - ПоказателиРасчета.ДнейОтработаноПоНорме);
					ПоказателиРасчета.ЧасовОтработаноСверхНормы = Макс(0, ПоказателиРасчета.КоличествоЧасовПоТабелю - ПоказателиРасчета.ЧасовОтработаноПоНорме);
					
					СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
					СтрокаЗначенияПараметраРасчета.Период = СтрокаНормПоГрафику.Месяц;
					СтрокаЗначенияПараметраРасчета.Значение = ПолучитьЗначениеПоВарификатору(ПоказателиРасчета, СтрокаПараметраРасчета.ПоказательРасчета);

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ВидПараметра = ПеречислениеВидыПараметров.ДополнительныйПараметр Тогда
		
		ДатаНачала = Макс(ЭтотОбъект.НачалоПериода, СтрокаПараметраРасчета.ПериодНачала);
		ДатаОкончания = Мин(ЭтотОбъект.КонецПериода, СтрокаПараметраРасчета.ПериодПрекращения);
		
		ТекущийМесяц = НачалоМесяца(ДатаНачала);
		Пока ТекущийМесяц < КонецМесяца(ДатаОкончания) Цикл
			
			ТекущееНачалоПериода = Макс(ТекущийМесяц, ДатаНачала);
			ТекущийКонецПериода = Мин(КонецМесяца(ТекущийМесяц), ДатаОкончания);
			
			ПараметрыВычисления = Новый Структура;
			ПараметрыВычисления.Вставить("ПараметрРасчета", СтрокаПараметраРасчета.Показатель);
			ПараметрыВычисления.Вставить("Сотрудник", 		СтрокаПараметраРасчета.Сотрудник);
			ПараметрыВычисления.Вставить("НачалоПериода", 	ТекущееНачалоПериода);
			ПараметрыВычисления.Вставить("КонецПериода", 	КонецДня(ТекущийКонецПериода));
			#Если Клиент Тогда
			ПараметрыВычисления.Вставить("Документ", ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект));
			#Иначе
			ПараметрыВычисления.Вставить("Документ", ЭтотОбъект);
			#КонецЕсли
			Результат = РасчетЗаработнойПлаты.ПолучитьЗначениеДополнительногоПараметра(ПараметрыВычисления);
			
			Если ЗначениеЗаполнено(Результат) Тогда
				
				СтрокаЗначенияПараметраРасчета = ТаблицаЗначенийПараметровРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметраРасчета, СтрокаПараметраРасчета);
				СтрокаЗначенияПараметраРасчета.Период	= ТекущийМесяц;
				СтрокаЗначенияПараметраРасчета.Значение = Результат;
				
			КонецЕсли;
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

// Получает расход материалов на выработку по непустой трудовой роли (форме участия) 
//	для встройки в общий запрос прямой выработки - только выработка по услугам.
Функция ПолучитьТаблицуРасходаМатериаловНаДополнительныеФормыУчастия()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыработкаСотрудниковОбороты.Сотрудник КАК Сотрудник,
	|	ВыработкаСотрудниковОбороты.Номенклатура КАК Номенклатура,
	|	ВыработкаСотрудниковОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВыработкаСотрудниковОбороты.ТрудоваяРоль КАК ТрудоваяРоль,
	|	ВыработкаСотрудниковОбороты.Регистратор КАК Регистратор,
	|	ВыработкаСотрудниковОбороты.КоличествоОборот КАК Количество,
	|	ВыработкаСотрудниковОбороты.Период КАК Период
	|ПОМЕСТИТЬ Выработка
	|ИЗ
	|	РегистрНакопления.ВыработкаСотрудников.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|				И ТрудоваяРоль <> ЗНАЧЕНИЕ(Справочник.ТрудовыеРоли.ПустаяСсылка)) КАК ВыработкаСотрудниковОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходМатериаловОбороты.Регистратор КАК Регистратор,
	|	РасходМатериаловОбороты.Номенклатура КАК Номенклатура,
	|	РасходМатериаловОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РасходМатериаловОбороты.Материал КАК Материал,
	|	РасходМатериаловОбороты.ХарактеристикаМатериала КАК ХарактеристикаМатериала,
	|	РасходМатериаловОбороты.РасходФактическийОборот КАК РасходФактическийОборот
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	РегистрНакопления.РасходМатериалов.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК РасходМатериаловОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выработка.Номенклатура КАК Номенклатура,
	|	Выработка.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(Выработка.Количество) КАК Количество,
	|	Выработка.Регистратор КАК Регистратор,
	|	Выработка.ТрудоваяРоль КАК ТрудоваяРоль
	|ПОМЕСТИТЬ ВсегоВыработка
	|ИЗ
	|	Выработка КАК Выработка
	|
	|СГРУППИРОВАТЬ ПО
	|	Выработка.Номенклатура,
	|	Выработка.ХарактеристикаНоменклатуры,
	|	Выработка.Регистратор,
	|	Выработка.ТрудоваяРоль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выработка.Сотрудник КАК Сотрудник,
	|	Выработка.ТрудоваяРоль КАК ТрудоваяРоль,
	|	Выработка.Номенклатура.КатегорияВыработки КАК КатегорияВыработки,
	|	Выработка.Регистратор КАК Регистратор,
	|	Выработка.Период КАК Период,
	|	Расход.Материал КАК Материал,
	|	Расход.ХарактеристикаМатериала КАК ХарактеристикаМатериала,
	|	СУММА(Расход.РасходФактическийОборот * ВЫБОР
	|			КОГДА ВсегоВыработка.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ Выработка.Количество / ВсегоВыработка.Количество
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Выработка КАК Выработка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсегоВыработка КАК ВсегоВыработка
	|		ПО Выработка.Номенклатура = ВсегоВыработка.Номенклатура
	|			И Выработка.ХарактеристикаНоменклатуры = ВсегоВыработка.ХарактеристикаНоменклатуры
	|			И Выработка.Регистратор = ВсегоВыработка.Регистратор
	|			И Выработка.ТрудоваяРоль = ВсегоВыработка.ТрудоваяРоль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расход КАК Расход
	|		ПО Выработка.Номенклатура = Расход.Номенклатура
	|			И Выработка.ХарактеристикаНоменклатуры = Расход.ХарактеристикаНоменклатуры
	|			И Выработка.Регистратор = Расход.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Расход.ХарактеристикаМатериала,
	|	Выработка.Период,
	|	Выработка.Сотрудник,
	|	Выработка.Регистратор,
	|	Выработка.ТрудоваяРоль,
	|	Расход.Материал,
	|	Выработка.Номенклатура.КатегорияВыработки"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьВыборкуПрямойВыработки(Запрос, ТаблицаПараметровРасчета)
	
	ТаблицаПараметровРасчетаПрямойВыработки = ТаблицаПараметровРасчета.Скопировать();
	мОбрИнд = ТаблицаПараметровРасчетаПрямойВыработки.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		СтрокаТЗ = ТаблицаПараметровРасчетаПрямойВыработки[мОбрИнд-сч];
		Если СтрокаТЗ.ВидПараметра <> Перечисления.ВидыПараметровРасчетаНачислений.КатегорияВыработки 
			И СтрокаТЗ.ВидПараметра <> Перечисления.ВидыПараметровРасчетаНачислений.ВсеТовары 
			И СтрокаТЗ.ВидПараметра <> Перечисления.ВидыПараметровРасчетаНачислений.ВсеУслуги Тогда
			ТаблицаПараметровРасчетаПрямойВыработки.Удалить(мОбрИнд-сч);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.ПоместитьТзВоВременнуюТаблицу(ТаблицаПараметровРасчетаПрямойВыработки, "ПараметрыСдельныхНачислений", Запрос, "Сотрудник, ТрудоваяРоль, Показатель, ВидПараметра, ПоказательРасчета, ПериодНачала, ПериодПрекращения");
	ОбщегоНазначения.ПоместитьТзВоВременнуюТаблицу(ПолучитьТаблицуРасходаМатериаловНаДополнительныеФормыУчастия(),"РасходТМЦУслугиТрудовыхРолей", Запрос, "Сотрудник, ТрудоваяРоль, КатегорияВыработки, Регистратор, Период, Материал, ХарактеристикаМатериала, Количество");
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	РасходТМЦ.Сотрудник КАК Сотрудник,
	             |	РасходТМЦ.КатегорияВыработки КАК КатегорияВыработки,
	             |	РасходТМЦ.Номенклатура КАК Номенклатура,
	             |	РасходТМЦ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(РасходТМЦ.Количество) КАК Количество,
	             |	НАЧАЛОПЕРИОДА(РасходТМЦ.Период, ДЕНЬ) КАК Дата,
	             |	РасходТМЦ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК НоменклатураЕХОКоэффициент,
	             |	РасходТМЦ.Регистратор КАК Регистратор,
	             |	РасходТМЦ.РасходНаТМЦ КАК РасходНаТМЦ,
	             |	РасходТМЦ.ТрудоваяРоль КАК ТрудоваяРоль
	             |ПОМЕСТИТЬ РасходТМЦ
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		РасходМатериаловОбороты.Сотрудник КАК Сотрудник,
	             |		РасходМатериаловОбороты.Номенклатура.КатегорияВыработки КАК КатегорияВыработки,
	             |		РасходМатериаловОбороты.Материал КАК Номенклатура,
	             |		РасходМатериаловОбороты.ХарактеристикаМатериала КАК ХарактеристикаНоменклатуры,
	             |		РасходМатериаловОбороты.РасходФактическийОборот КАК Количество,
	             |		РасходМатериаловОбороты.Период КАК Период,
	             |		РасходМатериаловОбороты.Регистратор КАК Регистратор,
	             |		ВЫБОР
	             |			КОГДА РасходМатериаловОбороты.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	             |				ТОГДА ИСТИНА
	             |			КОГДА РасходМатериаловОбороты.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	             |				ТОГДА ЛОЖЬ
	             |			ИНАЧЕ NULL
	             |		КОНЕЦ КАК РасходНаТМЦ,
	             |		ЗНАЧЕНИЕ(Справочник.ТрудовыеРоли.ПустаяСсылка) КАК ТрудоваяРоль
	             |	ИЗ
	             |		РегистрНакопления.РасходМатериалов.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК РасходМатериаловОбороты
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		ВыработкаСотрудниковОбороты.Сотрудник,
	             |		ВыработкаСотрудниковОбороты.Номенклатура.КатегорияВыработки,
	             |		ВыработкаСотрудниковОбороты.Номенклатура,
	             |		ВыработкаСотрудниковОбороты.ХарактеристикаНоменклатуры,
	             |		ВыработкаСотрудниковОбороты.КоличествоОборот,
	             |		НАЧАЛОПЕРИОДА(ВыработкаСотрудниковОбороты.Период, ДЕНЬ),
	             |		ВыработкаСотрудниковОбороты.Регистратор,
	             |		ИСТИНА,
	             |		ВыработкаСотрудниковОбороты.ТрудоваяРоль
	             |	ИЗ
	             |		РегистрНакопления.ВыработкаСотрудников.Обороты(&НачалоПериода, &КонецПериода, Запись, ТипВыработки = ЗНАЧЕНИЕ(Перечисление.ТипыВыработки.Товары)) КАК ВыработкаСотрудниковОбороты
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		РасходТМЦ.Сотрудник,
	             |		РасходТМЦ.КатегорияВыработки,
	             |		РасходТМЦ.Материал,
	             |		РасходТМЦ.ХарактеристикаМатериала,
	             |		РасходТМЦ.Количество,
	             |		НАЧАЛОПЕРИОДА(РасходТМЦ.Период, ДЕНЬ),
	             |		РасходТМЦ.Регистратор,
	             |		ЛОЖЬ,
	             |		РасходТМЦ.ТрудоваяРоль
	             |	ИЗ
	             |		РасходТМЦУслугиТрудовыхРолей КАК РасходТМЦ) КАК РасходТМЦ
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	РасходТМЦ.КатегорияВыработки,
	             |	РасходТМЦ.ХарактеристикаНоменклатуры,
	             |	РасходТМЦ.Сотрудник,
	             |	РасходТМЦ.Номенклатура,
	             |	НАЧАЛОПЕРИОДА(РасходТМЦ.Период, ДЕНЬ),
	             |	РасходТМЦ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	             |	РасходТМЦ.Регистратор,
	             |	РасходТМЦ.РасходНаТМЦ,
	             |	РасходТМЦ.ТрудоваяРоль
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЦеныНоменклатуры.Период КАК Период,
	             |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	             |	ЦеныНоменклатуры.Цена КАК Цена,
	             |	ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	             |ПОМЕСТИТЬ ЦеныНоменклатуры
	             |ИЗ
	             |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |		РасходТМЦ.Номенклатура КАК Номенклатура
	             |	ИЗ
	             |		РасходТМЦ КАК РасходТМЦ) КАК НоменклатураРасхода
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	             |		ПО НоменклатураРасхода.Номенклатура = ЦеныНоменклатуры.Номенклатура
	             |			И (ЦеныНоменклатуры.Прейскурант = &ПрейскурантРасчетаСтоимостиМатериалов)
	             |			И (ЦеныНоменклатуры.Активность)
	             |			И (ЦеныНоменклатуры.Период <= &КонецПериода)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	НоменклатураСС.Номенклатура КАК Номенклатура,
	             |	НоменклатураСС.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	НоменклатураСС.Дата КАК Дата,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(Цены.Цена, ЦеныБХ.Цена) ЕСТЬ NULL
	             |			ТОГДА 0
	             |		ИНАЧЕ ЕСТЬNULL(Цены.Цена, ЦеныБХ.Цена)
	             |	КОНЕЦ КАК Цена,
	             |	ЕСТЬNULL(Цены.ЕдиницаИзмерения, ЦеныБХ.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(Цены.ЕдиницаИзмерения, ЦеныБХ.ЕдиницаИзмерения) ЕСТЬ NULL
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА ЕСТЬNULL(Цены.ЕдиницаИзмерения, ЦеныБХ.ЕдиницаИзмерения) = НоменклатураСС.Номенклатура.ЕдиницаХраненияОстатков
	             |					ТОГДА ИСТИНА
	             |				ИНАЧЕ ЛОЖЬ
	             |			КОНЕЦ
	             |	КОНЕЦ КАК ЭтоЦенаЕХО
	             |ПОМЕСТИТЬ РасценкиТМЦ_Предварительная
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		РасходТМЦ.Номенклатура КАК Номенклатура,
	             |		РасходТМЦ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |		РасходТМЦ.Дата КАК Дата
	             |	ИЗ
	             |		РасходТМЦ КАК РасходТМЦ
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		РасходТМЦ.ХарактеристикаНоменклатуры,
	             |		РасходТМЦ.Номенклатура,
	             |		РасходТМЦ.Дата) КАК НоменклатураСС
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			РасходЦены.Номенклатура КАК Номенклатура,
	             |			РасходЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |			РасходЦены.Дата КАК Дата,
	             |			ЦеныНоменклатуры.Цена * РасходЦены.НоменклатураЕХОКоэффициент / ВЫБОР
	             |				КОГДА ЦеныНоменклатуры.ЕдиницаИзмеренияКоэффициент = 0
	             |					ТОГДА 1
	             |				ИНАЧЕ ЦеныНоменклатуры.ЕдиницаИзмеренияКоэффициент
	             |			КОНЕЦ КАК Цена,
	             |			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	             |		ИЗ
	             |			(ВЫБРАТЬ
	             |				РасходТМЦ.Номенклатура КАК Номенклатура,
	             |				РасходТМЦ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |				РасходТМЦ.Дата КАК Дата,
	             |				РасходТМЦ.НоменклатураЕХОКоэффициент КАК НоменклатураЕХОКоэффициент,
	             |				МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	             |			ИЗ
	             |				РасходТМЦ КАК РасходТМЦ
	             |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	             |					ПО РасходТМЦ.Номенклатура = ЦеныНоменклатуры.Номенклатура
	             |						И РасходТМЦ.Дата >= ЦеныНоменклатуры.Период
	             |						И РасходТМЦ.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
	             |			
	             |			СГРУППИРОВАТЬ ПО
	             |				РасходТМЦ.Дата,
	             |				РасходТМЦ.Номенклатура,
	             |				РасходТМЦ.ХарактеристикаНоменклатуры,
	             |				РасходТМЦ.НоменклатураЕХОКоэффициент) КАК РасходЦены
	             |				ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	             |				ПО РасходЦены.Номенклатура = ЦеныНоменклатуры.Номенклатура
	             |					И РасходЦены.Период = ЦеныНоменклатуры.Период
	             |					И РасходЦены.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры) КАК Цены
	             |		ПО НоменклатураСС.Номенклатура = Цены.Номенклатура
	             |			И НоменклатураСС.ХарактеристикаНоменклатуры = Цены.ХарактеристикаНоменклатуры
	             |			И НоменклатураСС.Дата = Цены.Дата
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			РасходЦены.Номенклатура КАК Номенклатура,
	             |			РасходЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |			РасходЦены.Дата КАК Дата,
	             |			ЦеныНоменклатуры.Цена * РасходЦены.НоменклатураЕХОКоэффициент / ВЫБОР
	             |				КОГДА ЦеныНоменклатуры.ЕдиницаИзмеренияКоэффициент = 0
	             |					ТОГДА 1
	             |				ИНАЧЕ ЦеныНоменклатуры.ЕдиницаИзмеренияКоэффициент
	             |			КОНЕЦ КАК Цена,
	             |			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	             |		ИЗ
	             |			(ВЫБРАТЬ
	             |				РасходТМЦ.Номенклатура КАК Номенклатура,
	             |				РасходТМЦ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |				РасходТМЦ.Дата КАК Дата,
	             |				РасходТМЦ.НоменклатураЕХОКоэффициент КАК НоменклатураЕХОКоэффициент,
	             |				МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	             |			ИЗ
	             |				РасходТМЦ КАК РасходТМЦ
	             |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	             |					ПО РасходТМЦ.Номенклатура = ЦеныНоменклатуры.Номенклатура
	             |						И РасходТМЦ.Дата >= ЦеныНоменклатуры.Период
	             |						И (ЦеныНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	             |			
	             |			СГРУППИРОВАТЬ ПО
	             |				РасходТМЦ.Дата,
	             |				РасходТМЦ.Номенклатура,
	             |				РасходТМЦ.ХарактеристикаНоменклатуры,
	             |				РасходТМЦ.НоменклатураЕХОКоэффициент) КАК РасходЦены
	             |				ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	             |				ПО РасходЦены.Номенклатура = ЦеныНоменклатуры.Номенклатура
	             |					И РасходЦены.Период = ЦеныНоменклатуры.Период
	             |					И (ЦеныНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ЦеныБХ
	             |		ПО НоменклатураСС.Номенклатура = ЦеныБХ.Номенклатура
	             |			И НоменклатураСС.ХарактеристикаНоменклатуры = ЦеныБХ.ХарактеристикаНоменклатуры
	             |			И НоменклатураСС.Дата = ЦеныБХ.Дата
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	РасценкиТМЦ_Предварительная.Номенклатура КАК Номенклатура,
	             |	РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	РасценкиТМЦ_Предварительная.Дата КАК Дата,
	             |	РасценкиТМЦ_Предварительная.Цена КАК Цена
	             |ПОМЕСТИТЬ РасценкиТМЦ
	             |ИЗ
	             |	РасценкиТМЦ_Предварительная КАК РасценкиТМЦ_Предварительная
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			РасценкиТМЦ_Предварительная.Номенклатура КАК Номенклатура,
	             |			РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |			РасценкиТМЦ_Предварительная.Дата КАК Дата,
	             |			МИНИМУМ(РасценкиТМЦ_Предварительная.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	             |		ИЗ
	             |			РасценкиТМЦ_Предварительная КАК РасценкиТМЦ_Предварительная
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			РасценкиТМЦ_Предварительная.Номенклатура,
	             |			РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры,
	             |			РасценкиТМЦ_Предварительная.Дата) КАК МаксимальныеЕдиницыЦенРасходаТМЦ
	             |		ПО РасценкиТМЦ_Предварительная.Номенклатура = МаксимальныеЕдиницыЦенРасходаТМЦ.Номенклатура
	             |			И РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры = МаксимальныеЕдиницыЦенРасходаТМЦ.ХарактеристикаНоменклатуры
	             |			И РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры = МаксимальныеЕдиницыЦенРасходаТМЦ.ХарактеристикаНоменклатуры
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			РасценкиТМЦ_Предварительная.Номенклатура КАК Номенклатура,
	             |			РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |			РасценкиТМЦ_Предварительная.Дата КАК Дата,
	             |			МАКСИМУМ(РасценкиТМЦ_Предварительная.ЭтоЦенаЕХО) КАК ЭтоЦенаЕХО
	             |		ИЗ
	             |			РасценкиТМЦ_Предварительная КАК РасценкиТМЦ_Предварительная
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			РасценкиТМЦ_Предварительная.Номенклатура,
	             |			РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры,
	             |			РасценкиТМЦ_Предварительная.Дата) КАК РасценкиПоЕХО
	             |		ПО РасценкиТМЦ_Предварительная.Номенклатура = РасценкиПоЕХО.Номенклатура
	             |			И РасценкиТМЦ_Предварительная.ХарактеристикаНоменклатуры = РасценкиПоЕХО.ХарактеристикаНоменклатуры
	             |			И РасценкиТМЦ_Предварительная.Дата = РасценкиПоЕХО.Дата
	             |ГДЕ
	             |	ВЫБОР
	             |			КОГДА РасценкиПоЕХО.ЭтоЦенаЕХО ЕСТЬ NULL
	             |					ИЛИ РасценкиПоЕХО.ЭтоЦенаЕХО = ЛОЖЬ
	             |				ТОГДА ВЫБОР
	             |						КОГДА НЕ МаксимальныеЕдиницыЦенРасходаТМЦ.ЕдиницаИзмерения ЕСТЬ NULL
	             |								И МаксимальныеЕдиницыЦенРасходаТМЦ.ЕдиницаИзмерения = РасценкиТМЦ_Предварительная.ЕдиницаИзмерения
	             |							ТОГДА ИСТИНА
	             |						ИНАЧЕ ЛОЖЬ
	             |					КОНЕЦ
	             |			ИНАЧЕ ВЫБОР
	             |					КОГДА РасценкиТМЦ_Предварительная.ЭтоЦенаЕХО = ИСТИНА
	             |						ТОГДА ИСТИНА
	             |					ИНАЧЕ ЛОЖЬ
	             |				КОНЕЦ
	             |		КОНЕЦ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ЦеныНоменклатуры
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	РасходТМЦ.Сотрудник КАК Сотрудник,
	             |	РасходТМЦ.КатегорияВыработки КАК КатегорияВыработки,
	             |	СУММА(РасходТМЦ.Количество * РасценкиТМЦ.Цена) КАК Себестоимость,
	             |	РасходТМЦ.Дата КАК Дата,
	             |	РасходТМЦ.ТрудоваяРоль КАК ТрудоваяРоль,
	             |	РасходТМЦ.Регистратор КАК Регистратор,
	             |	РасходТМЦ.РасходНаТМЦ КАК РасходНаТМЦ
	             |ПОМЕСТИТЬ СебестоимостьВыработки
	             |ИЗ
	             |	РасценкиТМЦ КАК РасценкиТМЦ
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходТМЦ КАК РасходТМЦ
	             |		ПО РасценкиТМЦ.Номенклатура = РасходТМЦ.Номенклатура
	             |			И РасценкиТМЦ.ХарактеристикаНоменклатуры = РасходТМЦ.ХарактеристикаНоменклатуры
	             |			И РасценкиТМЦ.Дата = РасходТМЦ.Дата
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	РасходТМЦ.Сотрудник,
	             |	РасходТМЦ.КатегорияВыработки,
	             |	РасходТМЦ.Дата,
	             |	РасходТМЦ.ТрудоваяРоль,
	             |	РасходТМЦ.Регистратор,
	             |	РасходТМЦ.РасходНаТМЦ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ РасценкиТМЦ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ РасценкиТМЦ_Предварительная
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ РасходТМЦ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВыработкаСотрудников.Сотрудник КАК Сотрудник,
	             |	ВыработкаСотрудников.Период КАК Период,
	             |	ВыработкаСотрудников.КатегорияВыработки КАК КатегорияВыработки,
	             |	ВыработкаСотрудников.Ответственный КАК Ответственный,
	             |	ВыработкаСотрудников.Филиал КАК Филиал,
	             |	ВыработкаСотрудников.Сумма КАК Сумма,
	             |	ВыработкаСотрудников.СуммаБезСкидок КАК СуммаБезСкидок,
	             |	ВыработкаСотрудников.Количество КАК Количество,
	             |	ВыработкаСотрудников.Себестоимость КАК Себестоимость,
	             |	ВыработкаСотрудников.СтоимостьПоПрайсу КАК СтоимостьПоПрайсу,
	             |	ВыработкаСотрудников.Материал КАК Материал,
	             |	ВыработкаСотрудников.ТрудоваяРоль КАК ТрудоваяРоль
	             |ПОМЕСТИТЬ Выработка
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВыработкаСотрудников.Сотрудник КАК Сотрудник,
	             |		ВыработкаСотрудников.КатегорияВыработки КАК КатегорияВыработки,
	             |		СУММА(ВыработкаСотрудников.Сумма) КАК Сумма,
	             |		СУММА(ВыработкаСотрудников.СуммаБезСкидок) КАК СуммаБезСкидок,
	             |		СУММА(ВыработкаСотрудников.Количество) КАК Количество,
	             |		СУММА(ЕСТЬNULL(СебестоимостьВыработки.Себестоимость, 0)) КАК Себестоимость,
	             |		ВыработкаСотрудников.Период КАК Период,
	             |		ВыработкаСотрудников.Ответственный КАК Ответственный,
	             |		ВыработкаСотрудников.Филиал КАК Филиал,
	             |		СУММА(ВыработкаСотрудников.СтоимостьПоПрайсу) КАК СтоимостьПоПрайсу,
	             |		ВыработкаСотрудников.Материал КАК Материал,
	             |		ВыработкаСотрудников.ТрудоваяРоль КАК ТрудоваяРоль
	             |	ИЗ
	             |		(ВЫБРАТЬ
	             |			ВыработкаСотрудников.Сотрудник КАК Сотрудник,
	             |			СУММА(ВыработкаСотрудников.СуммаОборот) КАК Сумма,
	             |			СУММА(ВыработкаСотрудников.СуммаБезСкидокОборот) КАК СуммаБезСкидок,
	             |			СУММА(ВыработкаСотрудников.КоличествоОборот) КАК Количество,
	             |			ВыработкаСотрудников.Номенклатура.КатегорияВыработки КАК КатегорияВыработки,
	             |			НАЧАЛОПЕРИОДА(ВыработкаСотрудников.Период, ДЕНЬ) КАК Период,
	             |			ВыработкаСотрудников.Регистратор.Ответственный КАК Ответственный,
	             |			ВыработкаСотрудников.Филиал КАК Филиал,
	             |			СУММА(ЕСТЬNULL(ЦеныНоменклатуры.Цена * ВыработкаСотрудников.КоличествоОборот, 0)) КАК СтоимостьПоПрайсу,
	             |			ВЫБОР
	             |				КОГДА ВыработкаСотрудников.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	             |					ТОГДА ИСТИНА
	             |				КОГДА ВыработкаСотрудников.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ NULL
	             |			КОНЕЦ КАК Материал,
	             |			ВыработкаСотрудников.ТрудоваяРоль КАК ТрудоваяРоль,
	             |			ВыработкаСотрудников.Регистратор КАК Регистратор
	             |		ИЗ
	             |			РегистрНакопления.ВыработкаСотрудников.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК ВыработкаСотрудников
	             |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |						&КонецПериода,
	             |						Прейскурант = &ПрейскурантРасчетаСтоимостиМатериалов
	             |							И (НЕ Номенклатура ССЫЛКА Справочник.Номенклатура
	             |								ИЛИ Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	             |								ИЛИ Номенклатура.ЕдиницаХраненияОстатков = ЕдиницаИзмерения)) КАК ЦеныНоменклатуры
	             |				ПО ВыработкаСотрудников.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
	             |					И ВыработкаСотрудников.Номенклатура = ЦеныНоменклатуры.Номенклатура
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			ВыработкаСотрудников.Сотрудник,
	             |			ВыработкаСотрудников.Номенклатура.КатегорияВыработки,
	             |			НАЧАЛОПЕРИОДА(ВыработкаСотрудников.Период, ДЕНЬ),
	             |			ВыработкаСотрудников.Регистратор.Ответственный,
	             |			ВыработкаСотрудников.Филиал,
	             |			ВЫБОР
	             |				КОГДА ВыработкаСотрудников.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	             |					ТОГДА ИСТИНА
	             |				КОГДА ВыработкаСотрудников.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ NULL
	             |			КОНЕЦ,
	             |			ВыработкаСотрудников.ТрудоваяРоль,
	             |			ВыработкаСотрудников.Регистратор) КАК ВыработкаСотрудников
	             |			ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьВыработки КАК СебестоимостьВыработки
	             |			ПО ВыработкаСотрудников.КатегорияВыработки = СебестоимостьВыработки.КатегорияВыработки
	             |				И (НАЧАЛОПЕРИОДА(ВыработкаСотрудников.Период, ДЕНЬ) = СебестоимостьВыработки.Дата)
	             |				И ВыработкаСотрудников.Сотрудник = СебестоимостьВыработки.Сотрудник
	             |				И ВыработкаСотрудников.ТрудоваяРоль = СебестоимостьВыработки.ТрудоваяРоль
	             |				И ВыработкаСотрудников.Материал = СебестоимостьВыработки.РасходНаТМЦ
	             |				И ВыработкаСотрудников.Регистратор = СебестоимостьВыработки.Регистратор
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		ВыработкаСотрудников.Сотрудник,
	             |		ВыработкаСотрудников.КатегорияВыработки,
	             |		ВыработкаСотрудников.Период,
	             |		ВыработкаСотрудников.Ответственный,
	             |		ВыработкаСотрудников.Филиал,
	             |		ВыработкаСотрудников.Материал,
	             |		ВыработкаСотрудников.ТрудоваяРоль) КАК ВыработкаСотрудников
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Сотрудник,
	             |	ТрудоваяРоль,
	             |	Ответственный,
	             |	Филиал
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ СебестоимостьВыработки
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПараметрыСдельныхНачислений.Сотрудник КАК Сотрудник,
	             |	ПараметрыСдельныхНачислений.ТрудоваяРоль КАК ТрудоваяРоль,
	             |	ПараметрыСдельныхНачислений.Показатель КАК Показатель,
	             |	ПараметрыСдельныхНачислений.ПериодНачала КАК ПериодНачала,
	             |	ПараметрыСдельныхНачислений.ПериодПрекращения КАК ПериодПрекращения,
	             |	ПараметрыСдельныхНачислений.ВидПараметра КАК ВидПараметра,
	             |	ПараметрыСдельныхНачислений.ПоказательРасчета КАК ПоказательРасчета,
	             |	Выработка.Период КАК Период,
	             |	Выработка.КатегорияВыработки КАК КатегорияВыработки,
	             |	Выработка.Ответственный КАК Ответственный,
	             |	Выработка.Филиал КАК Филиал,
	             |	Выработка.Сумма КАК Сумма,
	             |	Выработка.СуммаБезСкидок КАК СуммаБезСкидок,
	             |	Выработка.Количество КАК Количество,
	             |	Выработка.Себестоимость КАК Себестоимость,
	             |	Выработка.СтоимостьПоПрайсу КАК СтоимостьПоПрайсу,
	             |	Выработка.Материал КАК Материал
	             |ИЗ
	             |	ПараметрыСдельныхНачислений КАК ПараметрыСдельныхНачислений
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Выработка КАК Выработка
	             |		ПО (Выработка.Сотрудник = ПараметрыСдельныхНачислений.Сотрудник
	             |				И (Выработка.Период МЕЖДУ ПараметрыСдельныхНачислений.ПериодНачала И ПараметрыСдельныхНачислений.ПериодПрекращения)
	             |				И (Выработка.КатегорияВыработки = ПараметрыСдельныхНачислений.Показатель
	             |					ИЛИ ПараметрыСдельныхНачислений.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровРасчетаНачислений.ВсеУслуги)
	             |					ИЛИ ПараметрыСдельныхНачислений.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровРасчетаНачислений.ВсеТовары))
	             |				И Выработка.ТрудоваяРоль = ПараметрыСдельныхНачислений.ТрудоваяРоль)
	             |			И (&Филиал = НЕОПРЕДЕЛЕНО
	             |				ИЛИ Выработка.Филиал = &Филиал)";
				 
	ВыборкаПоказателиПрямойВыработки = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаПоказателиПрямойВыработки;
	
КонецФункции

Функция СформироватьНормыПоГрафику(ТаблицаПараметровРасчета)
	
	ТаблицаПараметровРасчетаОкладПоГрафику = ТаблицаПараметровРасчета.Скопировать();
	мОбрИнд = ТаблицаПараметровРасчетаОкладПоГрафику.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		СтрокаТЗ = ТаблицаПараметровРасчетаОкладПоГрафику[мОбрИнд-сч];
		Если СтрокаТЗ.ВидПараметра <> Перечисления.ВидыПараметровРасчетаНачислений.ДанныеТабеля 
			ИЛИ СтрокаТЗ.Показатель = Перечисления.ПоказателиРасчетаНачислений.КоличествоДнейПоТабелю
			ИЛИ СтрокаТЗ.Показатель = Перечисления.ПоказателиРасчетаНачислений.КоличествоЧасовПоТабелю
		Тогда
			ТаблицаПараметровРасчетаОкладПоГрафику.Удалить(мОбрИнд-сч);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	ОбщегоНазначения.ПоместитьТзВоВременнуюТаблицу(ТаблицаПараметровРасчетаОкладПоГрафику, "ПараметрыСдельныхНачислений", Запрос, "Сотрудник, Показатель, ВидПараметра, ПоказательРасчета");
	
	Запрос.Текст="ВЫБРАТЬ
	             |	НормыГрафиков.ВидГрафика,
	             |	НормыГрафиков.Дней КАК ДнейПоНорме,
	             |	НормыГрафиков.Часов КАК ЧасовПоНорме,
	             |	НормыГрафиков.Дата КАК Месяц
	             |
	             |ИЗ
	             |	РегистрСведений.НормыГрафиков КАК НормыГрафиков
	             |ГДЕ
	             |	НормыГрафиков.Дата >= &ДатаНачала
	             |	И НормыГрафиков.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(КонецПериода));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьТаблицуТабельныхДанных(ТаблицаПараметровРасчета)
	
	СотрудникиДляПолученияТабеля = Новый Массив;
	Для Каждого СтрокаПараметраРасчета Из ТаблицаПараметровРасчета Цикл
		Если (	СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.КоличествоДнейПоТабелю 
			Или СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.КоличествоЧасовПоТабелю
			Или СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.ДнейОтработаноПоНорме
			Или СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.ЧасовОтработаноПоНорме
			Или СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.ДнейОтработаноСверхНормы
			Или СтрокаПараметраРасчета.ПоказательРасчета = Перечисления.ПоказателиРасчетаНачислений.ЧасовОтработаноСверхНормы
			)
			И СотрудникиДляПолученияТабеля.Найти(СтрокаПараметраРасчета.Сотрудник) = Неопределено
		Тогда
			СотрудникиДляПолученияТабеля.Добавить(СтрокаПараметраРасчета.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТабелейПоДням = РасчетЗаработнойПлаты.ПолучитьДанныеТабеляСотрудинков(НачалоПериода, КонецПериода, СотрудникиДляПолученияТабеля, ?(ПоОдномуФилиалу, Филиал, Неопределено));
	
	Возврат ТаблицаТабелейПоДням;
	
КонецФункции

Процедура СформироватьВременнуюТаблицуНепрямойВыработки(Запрос)
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НепрямаяВыработка.Ответственный,
	|	НепрямаяВыработка.Филиал,
	|	СУММА(НепрямаяВыработка.Сумма) КАК Сумма,
	|	СУММА(НепрямаяВыработка.СуммаБезСкидок) КАК СуммаБезСкидок,
	|	СУММА(НепрямаяВыработка.Количество) КАК Количество,
	|	СУММА(НепрямаяВыработка.СуммаОплат) КАК СуммаОплат,
	|	СУММА(НепрямаяВыработка.СуммаПродажУслуги) КАК СуммаПродажУслуги,
	|	СУММА(НепрямаяВыработка.СуммаПродажТовары) КАК СуммаПродажТовары,
	|	СУММА(НепрямаяВыработка.СуммаПродажАбонементы) КАК СуммаПродажАбонементы,
	|	НепрямаяВыработка.Период
	|ПОМЕСТИТЬ НепрямаяВыработка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПродажиОбороты.Регистратор.Ответственный КАК Ответственный,
	|		ПродажиОбороты.Филиал КАК Филиал,
	|		ПродажиОбороты.СуммаОборот КАК Сумма,
	|		ПродажиОбороты.СуммаБезСкидокОборот КАК СуммаБезСкидок,
	|		ПродажиОбороты.КоличествоОборот КАК Количество,
	|		0 КАК СуммаОплат,
	|		ПродажиОбороты.Период КАК Период,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|				ТОГДА ПродажиОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаПродажУслуги,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Материал)
	|				ТОГДА ПродажиОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаПродажТовары,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Номенклатура ССЫЛКА Справочник.ВидыСертификатов
	|				ТОГДА ПродажиОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаПродажАбонементы
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ПродажиОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОплатыОбороты.Регистратор.Ответственный,
	|		ОплатыОбороты.Филиал,
	|		0,
	|		0,
	|		0,
	|		ОплатыОбороты.СуммаОборот,
	|		ОплатыОбороты.Период,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.Оплаты.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				ВидОплаты = ЗНАЧЕНИЕ(перечисление.видыоплаты.наличными)
	|					ИЛИ ВидОплаты = ЗНАЧЕНИЕ(перечисление.видыоплаты.безналичные)) КАК ОплатыОбороты) КАК НепрямаяВыработка
	|
	|СГРУППИРОВАТЬ ПО
	|	НепрямаяВыработка.Филиал,
	|	НепрямаяВыработка.Ответственный,
	|	НепрямаяВыработка.Период"
	;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуПоПервичнымВидамРасчета(Запрос, ТаблицаПараметровРасчета)
	
	ТаблицаПервичныхВидовРасчета = Новый ТаблицаЗначений;
	ТаблицаПервичныхВидовРасчета.Колонки.Добавить("Сотрудник",	Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПервичныхВидовРасчета.Колонки.Добавить("ВидРасчета",	Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметровРасчета Цикл
		Если СтрокаПараметра.ВидПараметра = Перечисления.ВидыПараметровРасчетаНачислений.ВидНачисления Тогда
			СтрокаПВР = ТаблицаПервичныхВидовРасчета.Добавить();
			СтрокаПВР.Сотрудник	 = СтрокаПараметра.Сотрудник;
			СтрокаПВР.ВидРасчета = СтрокаПараметра.Показатель;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПервичныхВидовРасчета.Свернуть("Сотрудник, ВидРасчета","");
	
	Запрос.УстановитьПараметр("ПервичныеНачисления", ТаблицаПервичныхВидовРасчета);
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыПервичныхНачислений.Сотрудник,
	|	ВидыПервичныхНачислений.ВидРасчета
	|ПОМЕСТИТЬ ВидыПервичныхНачислений
	|ИЗ
	|	&ПервичныеНачисления КАК ВидыПервичныхНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыПервичныхНачислений.Сотрудник,
	|	ВидыПервичныхНачислений.ВидРасчета,
	|	ЕСТЬNULL(НачисленияСотрудникамОбороты.СуммаОборот, 0) КАК Сумма,
	|	НачисленияСотрудникамОбороты.Период
	|ПОМЕСТИТЬ ПервичныеНачисления
	|ИЗ
	|	ВидыПервичныхНачислений КАК ВидыПервичныхНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияСотрудникам.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				ВидРасчета В
	|					(ВЫБРАТЬ
	|						ВидыПервичныхНачислений.ВидРасчета
	|					ИЗ
	|						ВидыПервичныхНачислений)) КАК НачисленияСотрудникамОбороты
	|		ПО ВидыПервичныхНачислений.Сотрудник = НачисленияСотрудникамОбороты.Сотрудник
	|			И ВидыПервичныхНачислений.ВидРасчета = НачисленияСотрудникамОбороты.ВидРасчета
	|			И (НачисленияСотрудникамОбороты.Регистратор <> &ЭтотДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВидыПервичныхНачислений";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьВыборкуНепрямойВыработки(Запрос, НаименованиеПараметра, СтрокаПараметраРасчета)
	
	Запрос.Текст="ВЫБРАТЬ
	             |"+?(ПустаяСтрока(НаименованиеПараметра),"","	Выработка."+НаименованиеПараметра+",") + "
	             |	СУММА(Выработка.Сумма)			 КАК Сумма,
	             |	СУММА(Выработка.СуммаБезСкидок)	 КАК СуммаБезСкидок,
	             |	СУММА(Выработка.Количество)		 КАК Количество,
	             |	СУММА(Выработка.СуммаОплат)		 КАК СуммаОплат,
				 |	СУММА(Выработка.СуммаПродажУслуги) 		КАК СуммаПродажУслуги,
				 |	СУММА(Выработка.СуммаПродажТовары) 		КАК СуммаПродажТовары,
				 |	СУММА(Выработка.СуммаПродажАбонементы) 	КАК СуммаПродажАбонементы,
				 |	Выработка.Период КАК Период
	             |ИЗ
	             |	НепрямаяВыработка КАК Выработка
	             |ГДЕ
				 |  Выработка.Период МЕЖДУ &ПериодНачала И &ПериодПрекращения  
	             |"+?(ПустаяСтрока(НаименованиеПараметра),"","	И Выработка."+НаименованиеПараметра+" = &ЗначениеПараметраОтбора") + "
	             |СГРУППИРОВАТЬ ПО
				 |	Выработка.Период"+?(ПустаяСтрока(НаименованиеПараметра),"",",
	             |	Выработка."+НаименованиеПараметра);
				 
	Запрос.УстановитьПараметр("ЗначениеПараметраОтбора"	,СтрокаПараметраРасчета.Показатель);
	Запрос.УстановитьПараметр("ПериодНачала"			,СтрокаПараметраРасчета.ПериодНачала);
	Запрос.УстановитьПараметр("ПериодПрекращения"		,СтрокаПараметраРасчета.ПериодПрекращения);
				 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьВыборкуПервичныхНачислений(Запрос, СтрокаПараметраРасчета)
	
	Запрос.Текст="ВЫБРАТЬ
	             |	СУММА(Выработка.Сумма)	КАК Сумма,
				 |	Выработка.Период		КАК Период
	             |ИЗ
	             |	ПервичныеНачисления КАК Выработка
	             |ГДЕ
				 |  Выработка.Период МЕЖДУ &ПериодНачала И &ПериодПрекращения  
				 |  И Выработка.Сотрудник	= &Сотрудник 
				 |  И Выработка.ВидРасчета	= &ВидРасчета
	             |СГРУППИРОВАТЬ ПО
				 |	Выработка.Период
	             |";
				 
	Запрос.УстановитьПараметр("Сотрудник"		 ,СтрокаПараметраРасчета.Сотрудник);
	Запрос.УстановитьПараметр("ВидРасчета"		 ,СтрокаПараметраРасчета.Показатель);
	Запрос.УстановитьПараметр("ПериодНачала"	 ,СтрокаПараметраРасчета.ПериодНачала);
	Запрос.УстановитьПараметр("ПериодПрекращения",СтрокаПараметраРасчета.ПериодПрекращения);
				 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьЗначениеПоВарификатору(СтруктураВыработки, ТребуемыйПоказатель)
	
	Если ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.Сумма Тогда
		Результат = СтруктураВыработки["Сумма"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.СуммаБезСкидок Тогда
		Результат = СтруктураВыработки["СуммаБезСкидок"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.Себестоимость Тогда
		Результат = СтруктураВыработки["Себестоимость"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.Количество Тогда
		Результат = СтруктураВыработки["Количество"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.СуммаОплат Тогда
		Результат = СтруктураВыработки["СуммаОплат"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.СтоимостьПоПрайсу Тогда
		Результат = СтруктураВыработки["СтоимостьПоПрайсу"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.КоличествоДнейПоТабелю	Тогда
		Результат = СтруктураВыработки["КоличествоДнейПоТабелю"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.КоличествоЧасовПоТабелю Тогда
		Результат = СтруктураВыработки["КоличествоЧасовПоТабелю"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.СуммаПродажУслуг Тогда
		Результат = СтруктураВыработки["СуммаПродажУслуги"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.СуммаПродажТоваров Тогда
		Результат = СтруктураВыработки["СуммаПродажТовары"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.СуммаПродажАбонементов Тогда
		Результат = СтруктураВыработки["СуммаПродажАбонементы"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.ДнейПоНорме Тогда
		Результат = СтруктураВыработки["ДнейПоНорме"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.ДнейОтработаноПоНорме Тогда
		Результат = СтруктураВыработки["ДнейОтработаноПоНорме"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.ДнейОтработаноСверхНормы Тогда
		Результат = СтруктураВыработки["ДнейОтработаноСверхНормы"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.ЧасовПоНорме Тогда
		Результат = СтруктураВыработки["ЧасовПоНорме"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.ЧасовОтработаноПоНорме Тогда
		Результат = СтруктураВыработки["ЧасовОтработаноПоНорме"];
	ИначеЕсли ТребуемыйПоказатель = Перечисления.ПоказателиРасчетаНачислений.ЧасовОтработаноСверхНормы Тогда
		Результат = СтруктураВыработки["ЧасовОтработаноСверхНормы"];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьТаблицуЗначенийПараметраВидаРасчета(ВыбВидыРасчетаСотрудников,
														НомерПараметра,
														ТаблицаЗначенийПараметровРасчета,
														ТаблицыЗначенийПараметровВидаРасчета,
														МассивПериодов)
														
	Отбор = Новый Структура("Сотрудник,ТрудоваяРоль,Показатель,ПериодНачала,ПериодПрекращения,ПоказательРасчета,ВидПараметра");													
	ЗаполнитьЗначенияСвойств(Отбор, ВыбВидыРасчетаСотрудников);
	Отбор.ПоказательРасчета = ВыбВидыРасчетаСотрудников.ВидРасчета["ПоказательРасчета"+НомерПараметра];
	Отбор.Показатель = ВыбВидыРасчетаСотрудников["Показатель"+НомерПараметра];
	Отбор.ВидПараметра = ВыбВидыРасчетаСотрудников.ВидРасчета["ВидПараметра"+НомерПараметра];
	
	ТаблицаРезультат = ТаблицаЗначенийПараметровРасчета.СкопироватьКолонки();
	
	мсСтрокиЗначенийПараметра = ТаблицаЗначенийПараметровРасчета.НайтиСтроки(Отбор);
	Для Каждого СтрокаЗначенияПараметра Из мсСтрокиЗначенийПараметра Цикл
		СтрокаРезультат = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаЗначенияПараметра);
		Если ЗначениеЗаполнено(СтрокаРезультат.Период) Тогда
			ВыровнятьПериодПоПериодичностиВидаРасчета(ВыбВидыРасчетаСотрудников.ВидРасчета,СтрокаРезультат.Период);
		КонецЕсли;
	КонецЦикла;
	
	// Свёртка по периодам
	Если ВыбВидыРасчетаСотрудников["Показатель"+НомерПараметра] <> Перечисления.ВидыПараметровРасчетаНачислений.Число Тогда
		СтрокаСвёртки = "";
		Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
			Если Колонка.Имя <> "Значение" Тогда
				СтрокаСвёртки = СтрокаСвёртки + ?(ПустаяСтрока(СтрокаСвёртки),"",",") + Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаРезультат.Свернуть(СтрокаСвёртки,"Значение");
		
		Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			Если МассивПериодов.Найти(СтрокаРезультат.Период) = Неопределено И
				 ЗначениеЗаполнено(СтрокаРезультат.Период)
			Тогда
				МассивПериодов.Добавить(СтрокаРезультат.Период);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ТаблицыЗначенийПараметровВидаРасчета.Вставить("ЗначенияПараметра"+НомерПараметра,ТаблицаРезультат);
														
КонецПроцедуры														

Процедура СвернутьТаблицуБазыРасчета(ТаблицаБазаРасчета)
	
	ТаблицаБазаРасчета.Свернуть("Сотрудник,ТрудоваяРоль,ВидРасчета,Показатель1,Показатель2,Показатель3,ПериодНачисления,КатегорияВыработки","ЗначениеПоказателя1,ЗначениеПоказателя2,ЗначениеПоказателя3");
	
	// Исправление значений числовых показателей, которые завышаются сверткой.
	// Учитывается, что числовые показатели - константа для базы расчета.
	Для Каждого СтрокаРасчета из ТаблицаБазаРасчета Цикл
		Для НомерПоказателя = 1 По 3 Цикл
			Если ТипЗнч(СтрокаРасчета["Показатель"+НомерПоказателя]) = Тип("Число") Тогда
				СтрокаРасчета["ЗначениеПоказателя"+НомерПоказателя] = СтрокаРасчета["Показатель"+НомерПоказателя];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть "БазаРасчета" по реквизитам документа
//
// Параметры:
// 	ПостроительОтчета - построитель отчета с настройками отборов сотрудинков.
//
Процедура ЗаполнитьБазуРасчета(ПостроительОтчета = Неопределено) Экспорт
	
	БазаРасчета.Очистить();
	Начисления.Очистить();
	
	МассивСотрудниковДляРасчетаБазы = ПолучитьСписокСотрудниковПоОтборам(ПостроительОтчета);

	МассивСотрудниковСИерархией		= ПолучитьСписокСотрудниковСИерархией(МассивСотрудниковДляРасчетаБазы);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокСотрудников",МассивСотрудниковДляРасчетаБазы);
	Запрос.УстановитьПараметр("СписокСотрудниковСИерархией",МассивСотрудниковСИерархией);
	Запрос.УстановитьПараметр("Подразделение"	,Подразделение);
	Запрос.УстановитьПараметр("Количество"		,Перечисления.ПоказателиРасчетаНачислений.Количество);
	Запрос.УстановитьПараметр("КонецПериода"	,КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода"	,НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("Прекратить"		,Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("Изменить"		,Перечисления.ВидыДействияСНачислением.Изменить);
	Запрос.УстановитьПараметр("НеИзменять"		,Перечисления.ВидыДействияСНачислением.НеИзменять);
	Запрос.УстановитьПараметр("Сумма"			,Перечисления.ПоказателиРасчетаНачислений.Сумма);
	Запрос.УстановитьПараметр("Фиксированная"	,Перечисления.ФормулыРасчетаЗаработнойПлаты.ФиксированнаяСумма);
	Запрос.УстановитьПараметр("МинимальныйОклад",Перечисления.ФормулыРасчетаЗаработнойПлаты.МинимальныйОклад);
	Запрос.УстановитьПараметр("ПрейскурантРасчетаСтоимостиМатериалов",УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПрейскурантРасчетаСтоимостиМатериалов"));
	Запрос.УстановитьПараметр("Филиал"			,?(ПоОдномуФилиалу = Истина, Филиал, Неопределено));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Если ВключатьСдельныеНачисления Тогда
		ПолучитьДанныеПоСдельнымНачислениям(Запрос);
    	ЗаполнитьБазуРасчетаПоСдельнымНачислениям(Запрос, МассивСотрудниковДляРасчетаБазы);
	КонецЕсли;
	
	Если ВключатьФиксированныеНачисления Тогда 
		ЗаполнитьБазуРасчетаПоЕжемесячнымНачислениям(Запрос);
	КонецЕсли;                                                   
	
	БазаРасчета.Сортировать("Сотрудник, ПериодНачисления, КатегорияВыработки");
	
КонецПроцедуры

// Заполняет табличную часть "Начисления" по документу
Процедура ЗаполнитьНачисления() Экспорт
	
	Начисления.Очистить();
	
	Для Каждого Строка из БазаРасчета Цикл
		Если Строка.ВидРасчета.ФормулаРасчета <> Перечисления.ФормулыРасчетаЗаработнойПлаты.МинимальныйОклад Тогда
			
			Результат = РассчитатьРезультат(Строка);
			Если Результат <> 0 Тогда
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Результат = Результат;
				ВыровнятьПериодПоПериодичностиВидаРасчета(НоваяСтрока.ВидРасчета,НоваяСтрока.ПериодНачисления);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Начисления.Свернуть("Сотрудник,ВидРасчета,ПериодНачисления,КатегорияВыработки","Результат");              
	
	РассчитатьЗначениеМинимальногоОклада();
	
	Начисления.Сортировать("Сотрудник, ПериодНачисления, КатегорияВыработки");
	
КонецПроцедуры

Процедура РассчитатьЗначениеМинимальногоОклада()

	ВремТЗНачислений = Начисления.Выгрузить();
	ВремТЗНачислений.Свернуть("Сотрудник, ВидРасчета, ПериодНачисления", "Результат");
	
	МинимальныйОклад = Перечисления.ФормулыРасчетаЗаработнойПлаты.МинимальныйОклад;
	ВремТЗБазыРасчета = БазаРасчета.Выгрузить();
	
	ВремТЗБазыРасчета.Очистить();
		
	Для Каждого Строка Из БазаРасчета Цикл
		
		Если Строка.ВидРасчета.ФормулаРасчета = МинимальныйОклад Тогда
			
			НоваяСтрока = ВремТЗБазыРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаБазыМинОклад Из ВремТЗБазыРасчета Цикл
		
		ПараметрыОтбора = Новый Структура("Сотрудник", СтрокаБазыМинОклад.Сотрудник);
		НачисленияСотрудника = ВремТЗНачислений.НайтиСтроки(ПараметрыОтбора);
		
		СуммаПоДругимНачислениям = 0;
		
		Для Каждого Начисление Из НачисленияСотрудника Цикл
			
			Если Начисление.ВидРасчета.Периодичность = СтрокаБазыМинОклад.ВидРасчета.Периодичность // Важно.
				И Начисление.ПериодНачисления = СтрокаБазыМинОклад.ПериодНачисления
			Тогда
				СуммаПоДругимНачислениям = СуммаПоДругимНачислениям + Начисление.Результат;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаПоДругимНачислениям > 0
			И СуммаПоДругимНачислениям < СтрокаБазыМинОклад.ЗначениеПоказателя1
		Тогда
			НовоеНачисление = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеНачисление, СтрокаБазыМинОклад);
			
			НовоеНачисление.Результат = СтрокаБазыМинОклад.ЗначениеПоказателя1 - СуммаПоДругимНачислениям;
			НовоеНачисление.ПериодНачисления = Начисление.ПериодНачисления;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура выравнивает период начисления по периодичности вида начисления
//
// Параметры:
// 	ВидРасчета	- вид расчета
//  Период		- <Дата> - корректируемый период начисления.
//
Процедура ВыровнятьПериодПоПериодичностиВидаРасчета(ВидРасчета,Период) Экспорт
	
	Если ВидРасчета.Периодичность = Перечисления.ПериодичностиВидовРасчета.Неделя Тогда
		Период = НачалоНедели(Период);
	ИначеЕсли ВидРасчета.Периодичность = Перечисления.ПериодичностиВидовРасчета.Месяц Тогда   
		Период = НачалоМесяца(Период);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Формирование таблицы начислений и удержаний
	ТаблицаНачислений = Движения.НачисленияСотрудникам.Выгрузить(); 
	ТаблицаНачислений.Очистить();
	
	Для Каждого СтрокаРасчета из Начисления Цикл
		НоваяСтрока = ТаблицаНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		НоваяСтрока.Сумма = СтрокаРасчета.Результат;
		НоваяСтрока.Активность = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаРасчета из Удержания Цикл
		НоваяСтрока = ТаблицаНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		НоваяСтрока.Сумма = -СтрокаРасчета.Результат;
		НоваяСтрока.Активность = Истина;
	КонецЦикла;
	
	// Формирование движений по регистру "НачисленияСотрудникам".
	Для Каждого СтрокаРасчета Из ТаблицаНачислений Цикл
		
		Движение = Движения.НачисленияСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРасчета);
		Движение.Период	= СтрокаРасчета.ПериодНачисления;
		
	КонецЦикла;
	
	// Формирование движения по регистру "ВзаиморасчетыССотрудниками".
	ТаблицаВзаиморасчетов = ТаблицаНачислений.Скопировать();
	ТаблицаВзаиморасчетов.Свернуть("Сотрудник","Сумма");
	
	Для Каждого СтрокаРасчета Из ТаблицаВзаиморасчетов Цикл
		
		Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения			= ?(СтрокаРасчета.Сумма>=0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		Движение.Период					= Дата;
		Движение.Сотрудник				= СтрокаРасчета.Сотрудник;
		
		Движение.Сумма					= Макс(СтрокаРасчета.Сумма,-СтрокаРасчета.Сумма);
	
	КонецЦикла;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СтрокаКраткийСоставДокумента = "";
	Сотрудники = Новый ТаблицаЗначений;
	Сотрудники = Начисления.Выгрузить(,"Сотрудник");
	Сотрудники.Свернуть("Сотрудник");
	
	Для Каждого Строка из Сотрудники Цикл
		ФИО = Строка.Сотрудник.Фамилия + " " + Лев(Строка.Сотрудник.Имя,1) + "." + Лев(Строка.Сотрудник.Отчество,1) + ".";
	    СтрокаКраткийСоставДокумента = СтрокаКраткийСоставДокумента + ФИО + ", ";
	КонецЦикла;
	КраткийСоставДокумента = Лев(Лев(СтрокаКраткийСоставДокумента,СтрДлина(СтрокаКраткийСоставДокумента)-2),50);
	
КонецПроцедуры
