/////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ 

&НаКлиенте
Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период
                             // установки номера.

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.ФормаДокументаПриОткрытииСервер(ЭтаФорма);

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьНачальныеНастройкиОтбора();
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗагрузитьСохраненныеНастройкиОтбора();
	КонецЕсли;
	
	Элементы.ПоОдномуФилиалу.Видимость = ПараметрыСеанса.УчетПоНесколькимФилиалам;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущаяДатаДокумента = Объект.Дата;
	            
	Если ЭтаФорма.Объект.Ссылка.Пустая() Тогда
		Если Не Объект.ВключатьСдельныеНачисления И Не Объект.ВключатьФиксированныеНачисления Тогда
			Объект.ВключатьСдельныеНачисления 		= Истина;
			Объект.ВключатьФиксированныеНачисления  = Истина;
			Объект.ВключатьПервичныеНачисления		= Истина;
		КонецЕсли;
	КонецЕсли;
             
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранить Настройки Отбора
	ТекущийОбъект.НастройкаОтбораСотрудников = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСервер.ВывестиЗаголовокФормыДокумента(ТекущийОбъект,,ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройкиОтбора()
	
	СхемаКомпоновкиДанных = Документы.НачислениеЗарплаты.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);	
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСохраненныеНастройкиОтбора()
	
	ЗначениеНастроекОтбора = ПолучитьНастройкиОтбора();
	
	Если ТипЗнч(ЗначениеНастроекОтбора) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ЗначениеНастроекОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтборИзПостроителя(ЗначенияНастроекОтбора)
	
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|{ГДЕ
	|	Сотрудники.Ссылка.* КАК Сотрудник,
	|	Сотрудники.Подразделение.*}";
	
	Построитель.Отбор.Добавить("Сотрудник");
	Построитель.Отбор.Добавить("Подразделение");
	
	Построитель.УстановитьНастройки(ЗначенияНастроекОтбора);
	
	Сотр = Построитель.Отбор.Сотрудник;
	Подр = Построитель.Отбор.Подразделение;
	
	ВС   = ВидСравнения;
	ВСКД = ВидСравненияКомпоновкиДанных;
	
	Построитель.УстановитьНастройки(ЗначенияНастроекОтбора, Истина, Ложь, Ложь, Ложь, Ложь);
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СправочникСсылка.Сотрудники") И Сотр.Использование Тогда
			
			Если      Сотр.ВидСравнения = ВидСравнения.Равно     Тогда Элемент.ВидСравнения = ВСКД.Равно;
			ИначеЕсли Сотр.ВидСравнения = ВС.НеРавно             Тогда Элемент.ВидСравнения = ВСКД.НеРавно;
			ИначеЕсли Сотр.ВидСравнения = ВС.ВСписке             Тогда Элемент.ВидСравнения = ВСКД.ВСписке;
			ИначеЕсли Сотр.ВидСравнения = ВС.ВСпискеПоИерархии   Тогда Элемент.ВидСравнения = ВСКД.ВСпискеПоИерархии;
			ИначеЕсли Сотр.ВидСравнения = ВС.НеВСписке           Тогда Элемент.ВидСравнения = ВСКД.НеВСписке;
			ИначеЕсли Сотр.ВидСравнения = ВС.НеВСпискеПоИерархии Тогда Элемент.ВидСравнения = ВСКД.НеВСпискеПоИерархии;
			ИначеЕсли Сотр.ВидСравнения = ВС.ВИерархии           Тогда Элемент.ВидСравнения = ВСКД.ВИерархии;
			ИначеЕсли Сотр.ВидСравнения = ВС.НеВИерархии         Тогда Элемент.ВидСравнения = ВСКД.НеВИерархии;
			КонецЕсли;
			
			Элемент.ПравоеЗначение = Сотр.Значение;
			Элемент.Использование  = Сотр.Использование;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СправочникСсылка.Подразделения") И Подр.Использование Тогда
			
			Если      Подр.ВидСравнения = ВидСравнения.Равно     Тогда Элемент.ВидСравнения = ВСКД.Равно;
			ИначеЕсли Подр.ВидСравнения = ВС.НеРавно             Тогда Элемент.ВидСравнения = ВСКД.НеРавно;
			ИначеЕсли Подр.ВидСравнения = ВС.ВСписке             Тогда Элемент.ВидСравнения = ВСКД.ВСписке;
			ИначеЕсли Подр.ВидСравнения = ВС.ВСпискеПоИерархии   Тогда Элемент.ВидСравнения = ВСКД.ВСпискеПоИерархии;
			ИначеЕсли Подр.ВидСравнения = ВС.НеВСписке           Тогда Элемент.ВидСравнения = ВСКД.НеВСписке;
			ИначеЕсли Подр.ВидСравнения = ВС.НеВСпискеПоИерархии Тогда Элемент.ВидСравнения = ВСКД.НеВСпискеПоИерархии;
			ИначеЕсли Подр.ВидСравнения = ВС.ВИерархии           Тогда Элемент.ВидСравнения = ВСКД.ВИерархии;
			ИначеЕсли Подр.ВидСравнения = ВС.НеВИерархии         Тогда Элемент.ВидСравнения = ВСКД.НеВИерархии;
			КонецЕсли;
			
			Элемент.ПравоеЗначение = Подр.Значение;
			Элемент.Использование  = Подр.Использование;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Если в реквизите объекта НастройкаОтбораСотрудников сохранены настройки построителя отчета (которые
// не подходят для компоновщика настроек), то возвращаем настройки компоновщика по умолчанию.
&НаСервере
Функция ПолучитьНастройкиОтбора(ТолькоПроверить = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ЗначениеНастроекОтбора = ДокументОбъект.НастройкаОтбораСотрудников.Получить();
	
	Если ТолькоПроверить Тогда
		
		Возврат ТипЗнч(ЗначениеНастроекОтбора) = Тип("НастройкиПостроителяОтчета");
		
	ИначеЕсли ТипЗнч(ЗначениеНастроекОтбора) <> Тип("НастройкиКомпоновкиДанных") 
		И ЗначениеНастроекОтбора <> Неопределено Тогда
		
		ПолучитьОтборИзПостроителя(ЗначениеНастроекОтбора);
		
	КонецЕсли;
	
	Возврат ЗначениеНастроекОтбора;	
		
КонецФункции

&НаСервере
Процедура ВызватьМодульОбъектаЗаполнитьБазуРасчета()
	СКД = Новый СхемаКомпоновкиДанных;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьБазуРасчета(КомпоновщикНастроек);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ВызватьМодульОбъектаЗаполнитьНачисления()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьНачисления();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ВызватьОбщийМодульПроверитьНомерДокумента(ДатаДок)
	
	РаботаСДиалогамиСервер.ПроверитьНомерДокумента(ЭтаФорма, ДатаДок);
	
КонецПроцедуры

&НаСервере
Процедура ВыровнятьПериодНачисленияСтроки(ВидРасчета, ПериодНачисления)
	
	Если ЗначениеЗаполнено(ВидРасчета) И ЗначениеЗаполнено(ПериодНачисления) Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ВыровнятьПериодПоПериодичностиВидаРасчета(ВидРасчета, ПериодНачисления);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБазуРасчета(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.БазаРасчета.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр("ru='Таблица с базой расчета будет очищена. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьМодульОбъектаЗаполнитьБазуРасчета();

	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаБазаРасчета;
	
КонецПроцедуры
                              
&НаКлиенте
Процедура РассчитатьНачисленияПоБазе(Команда)
	
	Если Объект.Начисления.Количество() <> 0 Тогда
		
		ТекстВопроса = "Таблица с начислениями будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;

	ВызватьМодульОбъектаЗаполнитьНачисления();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНачисления;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИРассчитать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.БазаРасчета.Количество() + Объект.Начисления.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр("ru='Все таблицы документа будут очищены. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьМодульОбъектаЗаполнитьБазуРасчета();
	ВызватьМодульОбъектаЗаполнитьНачисления();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНачисления;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
    Диалог = Новый ДиалогРедактированияСтандартногоПериода();                                 
    Диалог.Период = Новый СтандартныйПериод(Объект.НачалоПериода, Объект.КонецПериода);        
    Если Диалог.Редактировать() Тогда
        Объект.НачалоПериода = Диалог.Период.ДатаНачала;
        Объект.КонецПериода	 = Диалог.Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ВызватьОбщийМодульПроверитьНомерДокумента(мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПервичныхВторичныхНачислений()
	
	Элементы.ВключатьПервичныеНачисления.Доступность = Объект.ВключатьСдельныеНачисления;
	Элементы.ВключатьВторичныеНачисления.Доступность = Объект.ВключатьСдельныеНачисления;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьСдельныеНачисленияПриИзменении(Элемент)
	
	УстановитьДоступностьПервичныхВторичныхНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Элемент.ТекущиеДанные.ПериодНачисления = Объект.КонецПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	ВыровнятьПериодНачисленияСтроки(Элементы.Удержания.ТекущиеДанные.ВидРасчета,
	                                Элементы.Удержания.ТекущиеДанные.ПериодНачисления);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ВыровнятьПериодНачисленияСтроки(Элементы.Начисления.ТекущиеДанные.ВидРасчета,
	                                Элементы.Начисления.ТекущиеДанные.ПериодНачисления);
КонецПроцедуры

#Область ОбработчикиДинамическиСоздаваемыхКоманд

&НаКлиенте
Процедура Подключаемый_КнопкаФилиалПриНажатии(Команда)
	РаботаСДиалогамиКлиент.ДиалогКнопкаФилиалПриНажатии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиДвиженияДокумента(Команда)
	РаботаСДиалогамиКлиент.ВывестиДвиженияДокумента(Объект.Ссылка, Команда);
КонецПроцедуры

#КонецОбласти
