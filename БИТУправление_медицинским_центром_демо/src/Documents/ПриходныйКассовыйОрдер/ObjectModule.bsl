#Область ПрограммныйИнтерфейс

// Расчет суммы документа
// 
// Возвращаемое значение:
//	Число.
//
Функция РассчитатьСуммуВсего()Экспорт
	Возврат СуммаДокумента;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьСовпадениеФилиалаИФилиалаКассы(Отказ)
	
	Если Не ОбменДанными.Загрузка Тогда
		СообщениеПользователю = ОграничениеДоступаНаУровнеЗаписей.ТребуетсяПредупреждениеНесоответствияКассыФилиала(Касса, Филиал);
		Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик заполнения документа
//
Процедура ОбработкаЗаполнения(Основание)
	
	РаботаСДокументамиСервер.ОбработкаЗаполнения(ЭтотОбъект, Основание);
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	Если Основание=Неопределено Тогда Возврат; КонецЕсли;
	
	ДокументОснование = Основание;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
	
		СуммаДокумента	= Макс(Основание.СуммаДокумента - Основание.Оплата.Итог("Сумма"),0);
		ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтКлиента;
		
		Клиент = Основание.Клиент;
		СтатьяДвиженияДенежныхСредств = Основание.СтатьяДвиженияДенежныхСредств;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", Метаданные()) Тогда
			Сделка = Основание.КомплексныйРасчет;
		КонецЕсли;

		НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Филиал, Истина);	
		РаботаСДокументамиСервер.ДокументОплатыЗаполнитьРасчетыПоДолгуПоОказаниюУслуг(ДокументОснование, НастройкаПечатиЧеков, КредитныеДанные, СуммаДокумента, СпособРасчетаЧекаККМ);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда

		ВидОперации		= Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствОтКонтрагента;
		Клиент			= Основание.Контрагент;
		СуммаДокумента	= Основание.СуммаДокумента;
		
	ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(Основание) = "Документ.КомплексныйРасчетКлиента" Тогда
		
		СуммаДокумента = КомплексныеРасчетыКлиентов.ВерятнаяСуммаДляОплатыРасчета(Основание);
		Сделка = Основание;
		
		НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Филиал, Истина);	
		РаботаСДокументамиСервер.ДокументОплатыЗаполнитьРасчетыПоДолгуПоКомплексномуРасчетуСервер(Сделка, НастройкаПечатиЧеков, КредитныеДанные, СуммаДокумента);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("Структура") 
		И Основание.Свойство("Коррекция")
		И Основание.Коррекция 
	Тогда
	
		РаботаСДокументамиСервер.ЗаполнитьДанныеДокументаКоррекцииПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		РаботаСДокументамиСервер.ЗаполнитьУчастникаИИННДенежнойОперации(Клиент, ПринятоОт, ПринятоОтИНН, ПринятоОтАдрес);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеДенежныхСредствОтСотрудника;
		Клиент = Основание.Сотрудник;
		ДокументОснование = Основание;
		СуммаДокумента = Основание.ВыданныеАвансы.Итог("СуммаАванса") - Основание.СуммаДокумента - Основание.ВыданныеАвансы.Итог("СуммаИзрасходовано");
		
	КонецЕсли;	
	
	НомерЧекаККМ = "";
	НомерЧекаЭТ = "";

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроверитьСовпадениеФилиалаИФилиалаКассы(Отказ);
	
	Движение = Движения.ДенежныеСредства.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Касса  = Касса;
	Движение.Сумма  = СуммаДокумента;
	
	РегистрыНакопления.ДвиженияДенежныхСредств.СформироватьДвиженияПоШапкеДокумента(Новый Структура("Дата, Касса, СуммаДокумента, СтатьяДвиженияДенежныхСредств",Дата,Касса,СуммаДокумента,СтатьяДвиженияДенежныхСредств),Движения.ДвиженияДенежныхСредств, Истина, Отказ);

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствОтКонтрагента Тогда
		Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период      = Дата;
		Движение.Контрагент  = Клиент;
		Движение.Сумма 		 = СуммаДокумента;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеДенежныхСредствОтСотрудника Тогда
		Движение = Движения.ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период      = Дата;
		Движение.Сотрудник   = Клиент;
		Движение.Сумма 		 = СуммаДокумента;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтКлиента Тогда
		Движение = Движения.ВзаиморасчетыСКлиентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период 	 = Дата;
		Движение.Клиент	     = Клиент;
		Движение.Сумма		 = СуммаДокумента;
		
		// Комплексные расчеты в взиморасчетах с клиентами.
		Если ЗначениеЗаполнено(Сделка)
			И ТипЗнч(Сделка) = Тип("ДокументСсылка.КомплексныйРасчетКлиента")
			И ОбщегоНазначения.ОбщийМодуль("КомплексныеРасчетыКлиентов").РасчетСОбособленнымУчетомВзаиморасчетов(ЭтотОбъект.Сделка)
		Тогда
			Движение.Сделка = ЭтотОбъект.Сделка;
		КонецЕсли;
		
		// Регистр "Оплаты".
		РаботаСДокументамиСервер.ДобавитьДвижениеПоРегиструОплаты(Движения.Оплаты, Дата, Клиент, Перечисления.ВидыОплаты.Наличными, СуммаДокумента);
	КонецЕсли;
	
	// Документ коррекции дополнительно сторнирует движения если это требуется
	Если Коррекция Тогда	
		РаботаСДокументамиСервер.СторнироватьДвиженияПоРегистрамУПР(ЭтотОбъект, Отказ);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Клиент"));
	
	Если Не ЗначениеЗаполнено(Клиент)
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ПрочееПоступлениеДенежныхСредств
		И ВидОперации <> Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
	Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаОтКлиента Тогда
			НазваниеПлательщика = НСтр("ru='Клиент'");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеДенежныхСредствОтСотрудника Тогда
			НазваниеПлательщика = НСтр("ru='Сотрудник'");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствОтКонтрагента Тогда
			НазваниеПлательщика = НСтр("ru='Контрагент'");
		Иначе
			НазваниеПлательщика = НСтр("ru='Источник'");
		КонецЕсли;
		
		ШаблонОшибки = НСтр("ru='Поле %1 не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибки, НазваниеПлательщика), ЭтотОбъект, "Клиент",, Отказ);
	КонецЕсли;
    
КонецПроцедуры 

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСДокументамиСервер.ОчиститьРеквизитыККМДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ПрочееПоступлениеДенежныхСредств
			Или ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке)
		И Клиент <> Неопределено
	Тогда
		Клиент = Неопределено;
	КонецЕсли;
	
	РаботаСДокументамиСервер.ДокументОплатыПроверитьСуммыКредитаККМПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	РаботаСДокументамиСервер.ПроверитьДанныеКоррекции(ЭтотОбъект, Отказ, РежимЗаписи);
КонецПроцедуры

#КонецОбласти
