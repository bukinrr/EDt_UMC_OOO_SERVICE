
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции) Экспорт
	
	ОперацияКвитанции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКвитанции, "ОперацияКвитанции");
	Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ЗавершениеОкончательнойУпаковкиСКЗКМ Тогда
		ДанныеКвитанции.Вставить("ЗавершитьПриОтказе", Истина);
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	ПараметрыОбновления = ИнтеграцияМДЛП.СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
	Если ДокументОбъект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ
	   И ЗначениеЗаполнено(ОтклоненныеНомера) Тогда
		
		Номера = ДокументОбъект.НомераУпаковок.Выгрузить(, "НомерКИЗ, НомерСтроки");
		Номера.Индексы.Добавить("НомерКИЗ");
		Для Каждого Номер Из ОтклоненныеНомера Цикл
			Строка = ДокументОбъект.НомераУпаковок[Номера.Найти(Номер.Ключ, "НомерКИЗ").НомерСтроки - 1];
			Строка.Отклонено = Истина;
			Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Расчет статуса оформления при смене статуса информирования.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформирования - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформирования - Новый статус.
//
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОЗавершенииЭтапаОкончательнойУпаковки(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	
	ПередачаСведенийЧерезСКЗКМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ПередачаСведенийЧерезСКЗКМ");
	Если ПередачаСведенийЧерезСКЗКМ = Истина Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.Получение_ЗавершениеОкончательнойУпаковкиСКЗКМ);
	Иначе
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗавершениеЭтапаОкончательнойУпаковки);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОЗавершенииЭтапаОкончательнойУпаковки(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП,
		НСтр("ru = 'Завершение этапа окончательной упаковки'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделПроизводство());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 10;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОЗавершенииЭтапаОкончательнойУпаковкиТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОЗавершенииЭтапаОкончательнойУпаковкиТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УведомлениеОЗавершенииЭтапаОкончательнойУпаковки(ДокументСсылка);
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ЗавершениеОкончательнойУпаковкиСКЗКМ Тогда
		Возврат ОпределитьУведомлениеОЗавершенииОкончательнойУпаковки(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ЗавершениеОкончательнойУпаковкиСКЗКМ Тогда
		ЗагрузитьУведомлениеОЗавершенииОкончательнойУпаковки(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление о завершении этапа упаковки МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОЗавершенииЭтапаУпаковкиМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОЗавершенииЭтапаУпаковкиМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление о завершении этапа упаковки МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление о завершении этапа упаковки МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление о завершении этапа упаковки МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УведомлениеОЗавершенииЭтапаОкончательнойУпаковки(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗавершениеЭтапаОкончательнойУпаковки;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена               КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                     КАК Ссылка,
	|	Шапка.Основание                                  КАК Основание,
	|	Шапка.Дата                                       КАК Дата,
	|	Шапка.МестоДеятельности.Идентификатор            КАК ИдентификаторОрганизации,
	|	Шапка.ТипЗаказа                                  КАК ТипЗаказа,
	|	Шапка.Собственник.РегистрационныйНомерУчастника  КАК ИдентификаторСобственника,
	|	Шапка.НомерСерии                                 КАК НомерСерии,
	|	Шапка.ГоденДо                                    КАК ГоденДо,
	|	Шапка.GTIN                                       КАК GTIN,
	|	Шапка.КодТНВЭД                                   КАК КодТНВЭД
	|ИЗ
	|	Документ.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП.НомераУпаковок КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка  = Результат[0].Выбрать();
	Товары = Результат[1].Выгрузить();
	
	Если Не Шапка.Следующий() Или Товары.Количество() = 0 Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "register_end_packing";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "order_type", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипЗаказа), СообщениеКПередаче);
	Если Шапка.ТипЗаказа = Перечисления.ВидыПроизводственногоЗаказаМДЛП.КонтрактноеПроизводство Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "owner_id", Шапка.ИдентификаторСобственника, СообщениеКПередаче);
	КонецЕсли;
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "series_number"  , Шапка.НомерСерии, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "expiration_date", Формат(Шапка.ГоденДо, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "gtin"           , Шапка.GTIN, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "tnved_code"     , Шапка.КодТНВЭД, СообщениеКПередаче);
	
	Уведомление.signs = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "signs");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.signs, "sgtin" , Строка.НомерКИЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеОЗавершенииОкончательнойУпаковки(ДанныеДокумента)
	
	//ИнформацияОбУстройстве = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "device_info");
	//ИдентификаторЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОбУстройстве, "skzkm_origin_msg_id");
	//
	//Отбор = Новый Структура;
	//Отбор.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМДЛП.Исходящее);
	//Отбор.Вставить("Операция", Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВыводИзОборотаЛППоРазличнымПричинамСКЗКМ);
	//Отбор.Вставить("ИдентификаторКвитанции", ИдентификаторЗапроса);
	//Сообщение = ИнтеграцияМДЛП.НайтиСообщениеОбмена(Отбор);
	//
	//Если ЗначениеЗаполнено(Сообщение) Тогда
	//	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сообщение.Документ);
	//КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
	
КонецФункции

Процедура ЗагрузитьУведомлениеОЗавершенииОкончательнойУпаковки(ДанныеДокумента, ДокументСсылка)
	
	Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	ТипЗаказа = Перечисления.ВидыПроизводственногоЗаказаМДЛП.Получить(
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "order_type") - 1);
	НомерСерии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "series_number");
	ГоденДо = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "expiration_date"));
	GTIN = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "gtin");
	
	Документ = СоздатьДокумент();
	Документ.УстановитьСсылкуНового(ДокументСсылка);
	Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
	Документ.ТипЗаказа = ТипЗаказа;
	Если ТипЗаказа = Перечисления.ВидыПроизводственногоЗаказаМДЛП.КонтрактноеПроизводство Тогда
		ИдентификаторСобственника = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "owner_id");
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторСобственника, Документ.Собственник);
	КонецЕсли;
	Документ.НомерСерии = НомерСерии;
	Документ.ГоденДо = ГоденДо;
	Документ.GTIN = GTIN;
	Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
	Документ.ПередачаСведенийЧерезСКЗКМ = Истина;
	
	Для Каждого НомерУпакоки Из ДанныеДокумента.signs.sgtin Цикл
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.НомерКИЗ = НомерУпакоки;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОЗавершенииОкончательнойУпаковки(Документ);
	
	РезультатОбработки = ДанныеДокумента.Квитанция.result.operation_result;
	Если РезультатОбработки = "Accepted" Или РезультатОбработки = "Partial" Тогда
		Документ.Проведен = Истина;
		// Упаковки будут зарезервированы при проведении
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
	Иначе
		// Резервировать не требуется, так как отказано в регистрации сведений.
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	
КонецПроцедуры

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП КАК ДокументыДляОбработки
	|ГДЕ
	|		ДокументыДляОбработки.УдалитьИдентификаторОрганизации <> """"
	|		И ДокументыДляОбработки.МестоДеятельности = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|	ИЛИ
	|		ДокументыДляОбработки.УдалитьИдентификаторСобственника <> """"
	|		И ДокументыДляОбработки.Собственник = ЗНАЧЕНИЕ(Справочник.ОрганизацииМДЛП.ПустаяСсылка)
	|");

	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП";
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если ПараметрыОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокументыДляОбработки.Ссылка               КАК Ссылка,
		|	МестаДеятельности.Организация              КАК Организация,
		|	МестаДеятельности.Ссылка                   КАК МестоДеятельности,
		|	Организации.Ссылка                         КАК Собственник,
		|	Документ.УдалитьИдентификаторОрганизации   КАК Идентификатор,
		|	Документ.УдалитьИдентификаторСобственника  КАК ИдентификаторСобственника
		|ИЗ
		|	#ДокументыДляОбработки КАК ДокументыДляОбработки
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП КАК Документ
		|	ПО
		|		Документ.Ссылка = ДокументыДляОбработки.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
		|	ПО
		|		МестаДеятельности.Идентификатор = Документ.УдалитьИдентификаторОрганизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ОрганизацииМДЛП КАК Организации
		|	ПО
		|		Организации.РегистрационныйНомерУчастника = Документ.УдалитьИдентификаторСобственника
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументыДляОбработки", ПараметрыОбработки.ИмяВременнойТаблицы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										Выборка.Ссылка.Метаданные(),
										Выборка.Ссылка,
										ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено
			 Или Не ЗначениеЗаполнено(Выборка.МестоДеятельности)
			   И Не ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.Идентификатор, "subject_id_type")
			   И Не ЗначениеЗаполнено(Выборка.Собственник)
			   И ЗначениеЗаполнено(Выборка.ИдентификаторСобственника)
			   И Не ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.ИдентификаторСобственника, "system_subject_type") Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.МестоДеятельности) Тогда
				Объект.Организация       = Выборка.Организация;
				Объект.МестоДеятельности = Выборка.МестоДеятельности;
			ИначеЕсли ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.Идентификатор, "subject_id_type") Тогда
				ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Выборка.Идентификатор, Объект.Организация, Объект.МестоДеятельности);
				Если Не ЗначениеЗаполнено(Объект.МестоДеятельности) Тогда
					МестоДеятельности = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
					МестоДеятельности.Идентификатор = Выборка.Идентификатор;
					МестоДеятельности.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место деятельности %1'"), Выборка.Идентификатор);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МестоДеятельности);
					Объект.МестоДеятельности = МестоДеятельности.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Собственник) Тогда
				Объект.Собственник = Выборка.Собственник;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ИдентификаторСобственника)
					И ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.ИдентификаторСобственника, "system_subject_type") Тогда
				ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Выборка.ИдентификаторСобственника, Объект.Собственник);
				Если Не ЗначениеЗаполнено(Объект.Собственник) Тогда
					Организация = Справочники.ОрганизацииМДЛП.СоздатьЭлемент();
					Организация.РегистрационныйНомерУчастника = Выборка.ИдентификаторСобственника;
					Организация.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Организация %1'"), Выборка.ИдентификаторСобственника);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Организация);
					Объект.Собственник = Организация.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
	Иначе
		Параметры.ОбработкаЗавершена = Не ПараметрыОбработки.ЕстьДанныеДляОбработки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
