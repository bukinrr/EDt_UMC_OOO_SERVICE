
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		// Схема 311 удалена из набора, начиная с версии 1.36.
		ВызватьИсключение НСтр("ru = 'Уведомление о завершении этапа окончательной упаковки поддерживает только загрузку информации из СУЗ. Создание нового документа недоступно.'");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Элементы.Номенклатура.Имя);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.Характеристика.Имя, "Объект.Номенклатура");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.Серия.Имя, "Объект.Номенклатура");
	
	Элементы.Характеристика.Видимость = ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры();
	Элементы.Серия.Видимость = ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормМДЛППереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП"
	   И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		
		ОбновитьСтатусУведомления();
		
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			ОбработатьШтрихкоды(ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
			МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП.Форма.ФормаДокумента.Провести");
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусУведомления();
	
	СобытияФормМДЛППереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.Основание);
	Оповестить("Запись_УведомлениеОЗавершенииЭтапаУпаковкиМДЛП", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОрдерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьДокументПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаказаПриИзменении(Элемент)
	
	КонтрактноеПроизводство = Объект.ТипЗаказа = ПредопределенноеЗначение("Перечисление.ВидыПроизводственногоЗаказаМДЛП.КонтрактноеПроизводство");
	Элементы.Собственник.Видимость = КонтрактноеПроизводство;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ОбработатьУпаковки  = Ложь;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	Шапка = Новый Структура("Номенклатура, Характеристика, Серия, СтатусУказанияСерий, GTIN, ХарактеристикиИспользуются, ЕдиницаИзмерения, Артикул, ТипНоменклатуры");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, Шапка, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ЗаполнитьЗначенияСвойств(Объект, Шапка);
	
	Если Шапка.ХарактеристикиИспользуются = Истина Тогда
		Элементы.Характеристика.Доступность = Истина;
		Элементы.Характеристика.ПодсказкаВвода = "";
	Иначе
		Элементы.Характеристика.Доступность = Ложь;
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru = '<характеристики не используются>'");
	КонецЕсли;
	
	Если ПризнакИспользованияСерий(Объект.Номенклатура) Тогда
		Элементы.Серия.Доступность = Истина;
		Элементы.Серия.ПодсказкаВвода = "";
	Иначе
		Элементы.Серия.Доступность = Ложь;
		Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<серии не используются>'");;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораНоменклатуры(ЭтотОбъект, Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораСерии(ЭтотОбъект, Объект, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, Объект, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиНомераУпаковок

&НаКлиенте
Процедура НомераУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.НомерКиЗ = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Шапка = Новый Структура("Номенклатура, ХарактеристикиИспользуются, ЕдиницаИзмерения, Артикул, ТипНоменклатуры");
	Шапка.Номенклатура = Объект.Номенклатура;
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Шапка));
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Объект, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка));
	
	Если Шапка.ХарактеристикиИспользуются = Истина Тогда
		Элементы.Характеристика.Доступность = Истина;
		Элементы.Характеристика.ПодсказкаВвода = "";
	Иначе
		Элементы.Характеристика.Доступность = Ложь;
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru = '<характеристики не используются>'");
	КонецЕсли;
	
	Если ПризнакИспользованияСерий(Объект.Номенклатура) Тогда
		Элементы.Серия.Доступность = Истина;
		Элементы.Серия.ПодсказкаВвода = "";
	Иначе
		Элементы.Серия.Доступность = Ложь;
		Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<серии не используются>'");;
	КонецЕсли;
	
	КонтрактноеПроизводство = Объект.ТипЗаказа = ПредопределенноеЗначение("Перечисление.ВидыПроизводственногоЗаказаМДЛП.КонтрактноеПроизводство");
	Элементы.Собственник.Видимость = КонтрактноеПроизводство;
	
	ДоступноОснованиеУведомления = ИнтеграцияМДЛП.ДоступноОснованиеУведомления(Объект.Ссылка);
	Элементы.Основание.Видимость = ДоступноОснованиеУведомления И Не Объект.ПередачаСведенийЧерезСКЗКМ;
	Элементы.ОснованиеОрдер.Видимость = ДоступноОснованиеУведомления И Объект.ПередачаСведенийЧерезСКЗКМ;
	
	ОбновитьСтатусУведомления();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ИнтеграцияМДЛП.УстановитьУсловноеОформлениеОтклоненнойСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусУведомления()
	
	ТекущийСтатус = ИнтеграцияМДЛП.ТекущийСтатусУведомления(Объект.Ссылка);
	СтатусПредставление = ИнтеграцияМДЛП.ПредставлениеСтатусаУведомления(ТекущийСтатус);
	
	Если ЗначениеЗаполнено(ТекущийСтатус.ДальнейшееДействие)
	   И ТекущийСтатус.ДальнейшееДействие.Найти(ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ДальнейшееДействиеПоУмолчанию()) <> Неопределено Тогда
		РедактированиеФормыНедоступно = Ложь;
	ИначеЕсли Объект.ПередачаСведенийЧерезСКЗКМ Тогда
		НастроитьФормуПоОперации();
		РедактированиеФормыНедоступно = Ложь;
	Иначе
		РедактированиеФормыНедоступно = Не ОбщегоНазначенияКлиентСервер.РежимОтладки();
	КонецЕсли;
	
	ТолькоПросмотр = РедактированиеФормыНедоступно;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОперации()
	
	ЭтоВходящееУведомление = Объект.ПередачаСведенийЧерезСКЗКМ;
	Если ЭтоВходящееУведомление Тогда
		Элементы.Номер.ТолькоПросмотр = Ложь;
		Элементы.Дата.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;
		Элементы.МестоДеятельности.ТолькоПросмотр = Ложь;
		Элементы.ТипЗаказа.ТолькоПросмотр = Ложь;
		Элементы.Собственник.ТолькоПросмотр = Ложь;
		Элементы.GTIN.ТолькоПросмотр = Ложь;
		Элементы.НомерСерии.ТолькоПросмотр = Ложь;
		Элементы.ГоденДо.ТолькоПросмотр = Ложь;
		Элементы.КодТНВЭД.ТолькоПросмотр = Ложь;
		Элементы.НомераУпаковок.ТолькоПросмотр = Ложь;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПризнакИспользованияСерий(Знач Номенклатура)
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПризнакИспользованияСерий(Номенклатура);
	
КонецФункции

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если РедактированиеФормыНедоступно Или Элементы.НомераУпаковок.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодовПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	Для Каждого Данные Из ДанныеШтрихкодовПоТипам.НомераКиЗ Цикл
		
		Если Объект.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", Данные.sgtin)). Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект.GTIN <> Данные.GTIN Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Код товара упаковки %1 не соответствует выбранной номенклатуре.'"), Данные.GTIN);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.НомераУпаковок.Добавить();
		НоваяСтрока.НомерКиЗ = Данные.sgtin;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыбратьДокументПоступления()
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуВыбораДокументаПоступлениеТоваров(
		ЭтотОбъект, Объект, Новый ОписаниеОповещения("ПослеВыбораДокументаПоступления", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаПоступления(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		
		Если ИнтеграцияМДЛПВызовСервера.ЕстьРасхожденияМеждуУведомлениемИОснованием(Объект.Ссылка, ВыбранныйДокумент) Тогда
			
			ДополнительныеПараметрыВопроса = Новый Структура;
			ДополнительныеПараметрыВопроса.Вставить("ДокументПоступления", ВыбранныйДокумент);
			
			Обработчик = Новый ОписаниеОповещения("ОбработатьОтветОРасхождениях", ЭтотОбъект, ДополнительныеПараметрыВопроса);
			ТекстВопроса = НСтр("ru='В уведомлении есть товары которых нет в выбранном документе. Продолжить выбор?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьВыборДокументаПоступления(ВыбранныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОРасхождениях(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборДокументаПоступления(ДополнительныеПараметры.ДокументПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаПоступления(ДокументПоступления)
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		Объект.Основание = ДокументПоступления;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
