#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// Виртуально заказ возвращается к нам в виде собранного изделия, состоящего из комплектующих,
	// переданных документом-основанием ПередачаЗаказаВМастерскую. Поэтому первоначальное заполнение происходит 1 в 1
	// и корректируется вручную, в случаях, если в процессе производства часть комплектующих не была использована или 
	// была утрачена без использования в производстве.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаЗаказаВМастерскую") Тогда
		// Заполнение шапки
		ДокументОснование		= ДанныеЗаполнения;
		Контрагент				= ДанныеЗаполнения.Контрагент;
		Ответственный			= ДанныеЗаполнения.Ответственный;
		Филиал					= ДанныеЗаполнения.Филиал;
		Склад					= ДанныеЗаполнения.Склад;
		Заказ					= ДанныеЗаполнения.Заказ;
		// Заполнение табличной части
		Для Каждого ТекСтрокаМатериалы Из ДанныеЗаполнения.Материалы Цикл
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения			= ТекСтрокаМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.Количество					= ТекСтрокаМатериалы.Количество;
			НоваяСтрока.Коэффициент					= ТекСтрокаМатериалы.Коэффициент;
			НоваяСтрока.Номенклатура				= ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.Склад						= ТекСтрокаМатериалы.Склад;
			НоваяСтрока.Сумма						= ТекСтрокаМатериалы.Сумма;
			НоваяСтрока.ХарактеристикаНоменклатуры	= ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена						= ТекСтрокаМатериалы.Цена;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа'");
	Заголовок = Заголовок + " """ + СокрЛП(Ссылка) + """: ";
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	
	Если Материалы.Количество() > 0 Тогда     
		СтруктураОбязательныхПолей.Вставить("Склад");
		СтруктураОбязательныхПолей.Вставить("Ответственный");
		ПроведениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТоварыНаСкладах(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ПроверитьОчередностьСтатусовПоЗаказу(Отказ);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку документа настройками сотрудника
//
Процедура ЗаполнитьДокументНастройкамиМастераПоУмолчанию() Экспорт
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ЗначениеЗаполнено(ТекПользователь) И ЗначениеЗаполнено(ТекПользователь.Сотрудник) Тогда
		
		ЗначениеНастройки	= УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(ТекПользователь.Сотрудник, "ОсновнойСкладТоваров");
		Склад				= ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Склад);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОчередностьСтатусовПоЗаказу(Отказ)
	
	ДанныеСостоянияЗаказа = УправлениеЗаказами.ПолучитьСостояниеЗаказа(ДокументОснование, ?(ЗначениеЗаполнено(Дата),Дата, ТекущаяДата()));

	Если ДанныеСостоянияЗаказа.Состояние = Справочники.ВидыСостоянийЗаказов.УКлиента Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Нельзя провести этот документ с датой позднее, чем %1, когда исходный заказ получил статус ""У клиента"".'"),
				Формат(ДанныеСостоянияЗаказа.Период, "ДЛФ=DT"))
			);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыНаСкладах(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИмяТабличнойЧасти = "Материалы";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество");
	
	//// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	//СтруктураОбязательныхПолей.Вставить("Склад");
	
	// Теперь позовем общую процедуру проверки.
	ПроведениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка на наличие услуг в т.ч. товаров
	РаботаСДокументамиСервер.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаПоТоварам, Отказ, Заголовок);
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) 
	
	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Материалы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Количество"                         , "Количество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");
	СтруктураПолей.Вставить("НомерСтроки"                        , "НомерСтроки");
	СтруктураПолей.Вставить("Сумма"                      	     , "Сумма");

	
	РезультатЗапросаПоТоварам = ПроведениеДокументов.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	Для Каждого СтрокаТовар Из ТаблицаПоТоварам Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовар.Склад) Тогда
			СтрокаТовар.Склад = СтруктураШапкиДокумента.Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
		
	// Движение по регистру ВзаиморасчетыСКонтрагентами
	Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Сумма = СтоимостьРабот;
	Движения.ВзаиморасчетыСКонтрагентами.Записать();

	// Движение по регистру МатериалыВПроизводстве
	НаборДвижений = Движения.МатериалыВПроизводстве;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	Для Каждого СтрокаТовар Из ТаблицаПоТоварам Цикл
		Если СтрокаТовар.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(),СтрокаТовар);
		КонецЕсли;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка.ДокументОснование.Заказ, "Заказ");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
	НаборДвижений.Записывать		 = Истина;
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	НаборДвижений.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемЗаказаИзМастерскойМатериалы.Номенклатура,
		|	ПриемЗаказаИзМастерскойМатериалы.ХарактеристикаНоменклатуры,
		|	ПриемЗаказаИзМастерскойМатериалы.Количество,
		|	ПриемЗаказаИзМастерскойМатериалы.Сумма,
		|	ПриемЗаказаИзМастерскойМатериалы.НомерСтроки
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	Документ.ПриемЗаказаИзМастерской.Материалы КАК ПриемЗаказаИзМастерскойМатериалы
		|ГДЕ
		|	ПриемЗаказаИзМастерскойМатериалы.Ссылка = &Ссылка
		|	И ПриемЗаказаИзМастерскойМатериалы.Номенклатура.ВидНоменклатуры = &Материал
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МатериалыВПроизводствеОстатки.Номенклатура,
		|	МатериалыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
		|	МатериалыВПроизводствеОстатки.КоличествоОстаток,
		|	МатериалыВПроизводствеОстатки.СуммаОстаток,
		|	Материалы.НомерСтроки
		|ИЗ
		|	РегистрНакопления.МатериалыВПроизводстве.Остатки(
		|			&МоментВремени,
		|			Заказ = &Заказ
		|				И Контрагент = &Контрагент) КАК МатериалыВПроизводствеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО МатериалыВПроизводствеОстатки.Номенклатура = Материалы.Номенклатура
		|			И МатериалыВПроизводствеОстатки.ХарактеристикаНоменклатуры = Материалы.ХарактеристикаНоменклатуры
		|ГДЕ
		|	МатериалыВПроизводствеОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("МоментВремени",  Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Материал", Перечисления.ВидыНоменклатуры.Материал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
 	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не хватает товара %1, после проведения документа остаток составит %2'"),
							ВыборкаДетальныеЗаписи.Номенклатура,
							ВыборкаДетальныеЗаписи.КоличествоОстаток);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЦикла;
	
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти
