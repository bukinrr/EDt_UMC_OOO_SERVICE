#Область ОбработчикиСобытий

Процедура УстановкаПараметровСеанса(ТребуемыеПараметры)
	
	Если ТребуемыеПараметры <> Неопределено Тогда
	
		// Установка параметров сеанса "по требованию"
		УстановкаПараметровСеансаДоп(ТребуемыеПараметры);
		
		// Инициализация параметров сеанса системы лицензирования
		Если БИТ_Защита_Конфигурации.ИспользуемаяВерсияСистемыЛицензирования() = "1.6" Тогда
			бит_сл_сервер.ИнициализацияПараметровСеанса(ТребуемыеПараметры);
		КонецЕсли;

		
		// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
		// следует инициализировать сразу группой. для того, чтобы избежать их повторной инициализации, 
		// имена уже установленных параметров сеанса сохраняются в структуре УстановленныеПараметры.
		УстановленныеПараметры = Новый Массив();
		Для Каждого ИмяПараметра ИЗ ТребуемыеПараметры Цикл
			УстановитьЗначениеПараметраСеанса(ИмяПараметра, УстановленныеПараметры);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ПолныеПрава.ОпределитьФактИспользованияРИБ();
	
	ПолныеПрава.УстановитьПараметрСеансаУчетПоНесколькимФилиалам();
	
	ПараметрыСеанса.ЖурналЗаписиТекущиеПараметры = "";
	
	// Инициализация параметра сеанса "ТекущийПользователь"
	УстановитьПараметрСеансаТекущийПользователь();
	
	ОбменДаннымиСервер.ОбновитьПовторноИспользуемыеЗначенияМРО();
	ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов();
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
	ПараметрыСеанса.УчетнаяПолитика = Новый ФиксированнаяСтруктура(УправлениеНастройками.ПолучитьУчетнуюПолитику(Ложь));
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ПроверкаГраницыЗапретаИзмененияДанныхВыключена = Ложь;
	УстановитьПривилегированныйРежим(Ложь);
	
	ПроцедурыСпециализацииПоставки.УстановкаПараметровСеанса();
	
	ОграничениеДоступаНаУровнеЗаписей.УстановкаПараметровСеанса();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает параметр сеанса "ТекущийПользователь"
Процедура УстановитьПараметрСеансаТекущийПользователь() 
	
	ИмяПользователя = ИмяПользователя();	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		// Пользователь не авторизовался.
		ИмяПользователя = "НеАвторизован";		
	КонецЕсли;	
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
		ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
		
		Если ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
			ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
			
			ОбъектПользователь.Код			= ИмяПользователя;
			ОбъектПользователь.Наименование	= ПолноеИмяПользователя();
			ОбъектПользователь.ОбменДанными.Загрузка = Истина;
						
			// Автоматическая установка сотрудника в нового пользователя. 
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
			              |	Сотрудники.Ссылка
			              |ИЗ
			              |	Справочник.Сотрудники КАК Сотрудники
			              |ГДЕ
			              |	(Сотрудники.Наименование = &ИмяПользователя
			              |			ИЛИ Сотрудники.Наименование = &ПолноеИмяПользователя
			              |			ИЛИ Сотрудники.Фамилия + "" "" + Сотрудники.Имя + "" "" + Сотрудники.Отчество = &ИмяПользователя
			              |			ИЛИ Сотрудники.Фамилия + "" "" + Сотрудники.Имя + "" "" + Сотрудники.Отчество = &ПолноеИмяПользователя)";
			
			Запрос.УстановитьПараметр("ИмяПользователя", ИмяПользователя);
			Запрос.УстановитьПараметр("ПолноеИмяПользователя", ПолноеИмяПользователя());
			
			Выборка = Запрос.Выполнить().Выбрать();
	
			Если Выборка.Следующий() Тогда	
				ОбъектПользователь.Сотрудник = Выборка.Ссылка;
			КонецЕсли;
						
			ОбъектПользователь.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена"); 
			ОбъектПользователь.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Пользователь зарегистрирован в справочнике пользователей.'"));
			
			ТекущийПользователь = ОбъектПользователь.Ссылка;
		КонецЕсли;
	КонецЕсли;		
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
КонецПроцедуры	

// Инициализация параметров сенаса.
//
// Параметры:
//  ИменаПараметровСеанса	 - Массив	 - в массиве имена параметров сеанса для инициализации
// 
// Возвращаемое значение:
//  Массив - Возвращает массив имен установленных параметров сеанса.
//
Функция УстановкаПараметровСеансаДоп(ИменаПараметровСеанса)
	
	Перем ТекстСообщения;
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		Возврат УстановленныеПараметры;
	КонецЕсли;
	
	ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(Новый Структура("Источник, Данные"));
	
	Обработчики = СтандартныеПодсистемыПереопределяемый.ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем();
	ОбработчикиСобственные = ОбщегоНазначенияПереопределяемый.ОбработчикиИнициализацииПараметровСеанса();
	
	Для Каждого Запись Из ОбработчикиСобственные Цикл
		Обработчики.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	
	// Массив с ключами параметров сеанса.
	// Задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если Найти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			Продолжить;
		КонецЕсли;
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если Лев(ИмяПараметра, СтрДлина(ИмяКлючаПараметра)) = ИмяКлючаПараметра Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра+"*");
				Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат УстановленныеПараметры;
	
КонецФункции

Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, УстановленныеПараметры)
	
	Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Переопределяемый блок

	// ПодключаемоеОборудование
	МенеджерОборудованияВызовСервера.УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры);
	// Конец ПодключаемоеОборудование

	// Конец переопределяемого блока

КонецПроцедуры

#КонецОбласти
