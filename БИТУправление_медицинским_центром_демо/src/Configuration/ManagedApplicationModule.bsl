#Область ОписаниеПеременных

Перем глОбщиеЗначения Экспорт; // Структура общих значений сеанса.

// ПодключаемоеОборудование.
Перем глПодключаемоеОборудование Экспорт; // Для кэширования данных оборудования на клиенте.

Перем глКэшПечатныхФорм Экспорт; // Кэш имён печатных форм.

Перем СообщенияДляЖурналаРегистрации Экспорт; // Сообщения для журнала регистрации 

Перем глКэшАдресовФилиалов Экспорт; // Кэш адресов филиалов.

Перем глКраткоеНаименованиеОсновнойВалюты Экспорт; // Наименование основной валюты.

Перем глКэшОсновныхУслугСотрудников Экспорт; // Кэш основных услуг сотрудников.

// СтандартныеПодсистемы.ЗавершениеРаботыПользователей.
Перем РаботаПользователейЗавершается Экспорт; // Флаг РаботаПользователейЗавершается.
// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей.

// СтандартныеПодсистемы.ОбновлениеКонфигурации (РБД).
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 
// Признак необходимости обновления конфигурации информационной базы при завершении сеанса.
Перем ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса Экспорт;
// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации.

Перем ПараметрыПриложения Экспорт; // СтандартныеПодсистемы.

Перем ЧастотаЧтенияОповещенийКлиентПришел; // Частота чтения оповещений о том, что клиент пришел по записи.

#Область УправлениеМедицинскимЦентром
Перем глКешВидыКлассификаторовПараметровПриемаФРНСИ Экспорт; // Соответствие параметров приема типа классификатор МЗ и их вида классификатора.
Перем глКешНСИЛаборатории Экспорт; // Кэш справочных данных лабораторий.
Перем глНоменклатураСправокЦенаПоПолуКлиента Экспорт; // Номенклатура, цена которой зависит от пола клиента.
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Если Не СтандартныеПодсистемыКлиент.ПроверитьВерсиюПлатформыПриЗапуске("ПередНачаломРаботы") Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;

	МенеджерОборудованияКлиент.ПередНачаломРаботыСистемы();
	
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	
КонецПроцедуры

// Процедура - обработчик события "При начале работы системы".
//
Процедура ПриНачалеРаботыСистемы()
	
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
	
 	ПервыйЗапуск = (ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("НомерВерсииКонфигурации") = "");
	БИТ_Защита_Конфигурации.ПриНачалеРаботыСистемы();
	#Если Не МобильныйКлиент Тогда
		Если БИТ_Защита_Конфигурации.ИспользуемаяВерсияСистемыЛицензирования() = "1.6" Тогда
			бит_сл_клиент.ИнициализацияКлиентаЛицензирования();
		Иначе
			сл2_Клиент.Инициализация();
		КонецЕсли;
		
	#КонецЕсли
	
	ВыполнитьОбновлениеИнформационнойБазы(ПервыйЗапуск);
	
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	ВыполнитьОбработкуИФормированиеЗадачПользователей();
	ПодключитьОбработчикОжидания("ВыполнитьОбработкуИФормированиеЗадачПользователей", 600, Ложь);	

	Если Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(),"НеФормироватьАвтоSMS")
		И Пользователи.ЕстьПравоСозданияРассылок()
	Тогда
		ВыполнитьОбработкуИФормированиеАвтоСообщений();
		ПодключитьОбработчикОжидания("ВыполнитьОбработкуИФормированиеАвтоСообщений", 600, Ложь);
	КонецЕсли;

	глКэшПечатныхФорм = ПечатьДокументовСервер.ЗаполнитьКэшПечатныхФорм();
	глКэшАдресовФилиалов = ОбщегоНазначенияСервер.ПолучитьАдресаФилиалов();
	глКраткоеНаименованиеОсновнойВалюты = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
	
	МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	
	// Проверка на автозапуск БИТ:Phone при старте системы 	
	Если бит_БитфонСервер.ДоступнаРольБитФонДляПользователя() И бит_БитфонСервер.ПолучитьФлагАвтостартаПриЗапускеСистемы() Тогда		
	  ФормаБит = ПолучитьФорму("Обработка.бит_Битфон.Форма");
	  ФормаБит.Открыть();
	КонецЕсли;
	// Проверка на автозапуск БИТ.Phone (монитор) при старте системы 	
	Если бит_АТССервер.ПроверитьПраваОткрытьМонитор() И бит_АТССервер.ПолучитьФлагАвтостартаПриЗапускеСистемы() Тогда
		бит_АТСКлиент.ОткрытьМонитор();
	КонецЕсли;
	
   	Попытка
		Если ОбменДаннымиСервер.НастройкаПодчиненногоУзлаРИБ() Тогда
			ОбменДаннымиКлиент.ОткрытьПомощникНастройкиОбменаДанными("Полный");	
		КонецЕсли;
	Исключение
	КонецПопытки;
	                                                           
	Если ОбщегоНазначенияСервер.НужноОткрытьПомощникПервоначальногоЗаполнения(ПервыйЗапуск) Тогда
		ПодключитьОбработчикОжидания("ОткрытьПомощникПервоначальногоЗаполнения", 0.1, Истина);
	КонецЕсли;
	
	// Вывод оповещений
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуТекущихОповещений", 5, Истина);	
	
	// ИнтеграцияМДЛП
	ИнтеграцияМДЛПКлиент.ПодключитьОбработчикВыполненияОбменаНаКлиентеПоРасписанию();
	// Конец ИнтеграцияМДЛП
	
	// Подключение обработчика ожидания списка выполнения хозяйственных процедур.
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьХозяйственныйБлок")
		И ХозяйственныйБлок.ЕстьПраваНаВыполнениеХозяйственныхПроцедур()
	Тогда
		Если ХозяйственныйБлок.ЕстьНаличиеХозяйственныхПроцедур() Тогда
			ПодключитьОбработчикОжидания("ПоказатьНевыполненныеХозяйственныеПроцедуры", 30, Истина);				
		КонецЕсли;
	КонецЕсли;
	
	// Подключение обработчика ожидания списка клиентов, пришедших на прием.
	Если УправлениеЗаявками.ОповещатьПользователяОПриходеКлиента() Тогда 
		ПодключитьОбработчикОжидания("ПоказатьОповещениеОПриходеКлиентов", 30, Истина);				
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
		МодульСоединенияИБКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	
	// Система взаимодействия
	#Если Не МобильныйКлиент Тогда
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		ОбсужденияСлужебныйКлиент.ПодключитьОбработчикиНовыхСообщений();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();

КонецПроцедуры

// Процедура - обработчик события "При завершении работы системы".
//
Процедура ПриЗавершенииРаботыСистемы()
	
	МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	// ПодключаемоеОборудование
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";

	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);

	// Передать на обработку данные
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
		                                                 + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполняет обработку задач пользователей при запуске
Процедура ВыполнитьОбработкуИФормированиеЗадачПользователей() Экспорт
	
	// Автоматическое формирование напоминаний и задач
    УправлениеКонтактами.СформироватьАвтоматическиеЗадачиПользователя();
	
КонецПроцедуры

// Процедура выполняет формирование событий и автоматических сообщений
Процедура ВыполнитьОбработкуИФормированиеАвтоСообщений() Экспорт
	ФормированиеСообщений.ВыполнитьОбработкуИФормированиеАвтоматическихСообщений();	
КонецПроцедуры                

// Открывает помощник первоначального заполнения при начале работы.
//
Процедура ОткрытьПомощникПервоначальногоЗаполнения() Экспорт
	ПутьКФорме = "Обработка.ПомощникПервоначальногоЗаполнения.Форма";
	ОткрытьФорму(ПутьКФорме);
КонецПроцедуры

// Показать по обработчику ожидания невыполненные хозяйственные процедуры, если для ролей пользователя это актуально..
//
Процедура ПоказатьНевыполненныеХозяйственныеПроцедуры() Экспорт
	
	ОкнаПриложения = ПолучитьОкна();
	Для Каждого Окно Из ОкнаПриложения Цикл
		Для Каждого ЭлементФорма Из Окно.Содержимое Цикл
			Попытка
				СсылкаОбъекта = ЭлементФорма.Объект.Ссылка;
			Исключение
			КонецПопытки;
			Если СсылкаОбъекта <> Неопределено Тогда 
				Если СсылкаОбъекта.Пустая() Тогда 
					ПодключитьОбработчикОжидания("ПоказатьНевыполненныеХозяйственныеПроцедуры", 60, Истина);				
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НевыполненныеХозяйственныеПроцедуры = ХозяйственныйБлок.ПолучитьНевыполненныеХозяйственныеПроцедуры();
	Если НевыполненныеХозяйственныеПроцедуры.Количество() <> 0 Тогда 
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("НевыполненныеХозяйственныеПроцедуры", НевыполненныеХозяйственныеПроцедуры);
		мФорма = ОткрытьФорму("ОбщаяФорма.ОтметкаВыполненияХозяйственныхПроцедур", ПараметрыФормы);
	КонецЕсли;		
	ПодключитьОбработчикОжидания("ПоказатьНевыполненныеХозяйственныеПроцедуры", 600, Истина);				
	
КонецПроцедуры

Процедура ПоказатьОповещениеОПриходеКлиентов() Экспорт
	
	ЗаписиОповещений = УправлениеЗаявками.ПолучитьЗаписиОповещенийОПриходеКлиентов();
	Если ЗаписиОповещений.Количество() <> 0 Тогда
		ПараметрыФормы = Новый Структура("ЗаписиОповещений", ЗаписиОповещений);
		ОткрытьФорму("РегистрСведений.ОповещенияСотрудниковОПриходеКлиентов.Форма.ОповещениеОПриходеКлиента", ПараметрыФормы);
	КонецЕсли;
	
	ЧастотаЧтенияОповещенийКлиентПришел = РаботаСФормамиСервер.ПолучитьНастройкуФормы("ОповещенияОПриходеКлиентов", "ЧастотаЧтенияОповещений", 180);
	ЧастотаЧтенияОповещенийКлиентПришел = Макс(ЧастотаЧтенияОповещенийКлиентПришел, 60);
	
	ПодключитьОбработчикОжидания("ПоказатьОповещениеОПриходеКлиентов", ЧастотаЧтенияОповещенийКлиентПришел, Истина);
	
КонецПроцедуры

// Процедура ВыполнитьПроверкуТекущихОповещений.
//
Процедура ВыполнитьПроверкуТекущихОповещений() Экспорт
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ВыводитьОповещения") Тогда
		
		Если ОповещенияПользователя.ЕстьТекущиеОповещения() Тогда
			Форма = ОткрытьФорму("Задача.ЗадачиПользователя.Форма.ФормаСпискаДляНапоминания",,,Истина,,,,РежимОткрытияОкнаФормы.Независимый);
			Форма.Активизировать();
		КонецЕсли;

		ЧастотаПроверкиНаличияОповещений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ЧастотаПроверкиНаличияОповещений");
		ЧастотаПроверкиНаличияОповещений = ?(ЧастотаПроверкиНаличияОповещений > 0, ЧастотаПроверкиНаличияОповещений, 1);
		ПодключитьОбработчикОжидания("ВыполнитьПроверкуТекущихОповещений", ЧастотаПроверкиНаличияОповещений * 60, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьПроверкуТекущихОповещений", 5 * 60, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Предполагается переход после открытия формы с подбором-панелью 
// для обхода особенностией 8.3.23+ по смене кнопок по умолчанию на форме.
// Допускается редкий сбой обработчика.
Процедура Подбор_ПослеОткрытияФормыГлобальный() Экспорт
	ТекущаяОткрываемаяФорма = УниверсальныеМеханизмыКлиент.ПолучитьЗначениеКлиентскогоКеша("ТекущаяОткрываемаяФорма");
	Если ТипЗнч(ТекущаяОткрываемаяФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ТекущаяОткрываемаяФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  ПервыйЗапуск - булево, в этот параметр возвращается значение, является ли запуск конфигурации первым.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы(ПервыйЗапуск)

	НомерВерсии = ДопСерверныеФункции.ПолучитьНомерВерсииКонфигурации();
	ПервыйЗапуск = (НомерВерсии = "");
	
	// Обновление информационной базы.
	ОбщегоНазначенияКлиент.ЗапуститьОбработкуОбновления();

	Если ПервыйЗапуск Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

