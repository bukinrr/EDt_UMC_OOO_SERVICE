
#Область ОбработчикиПодписокНаСобытия

// Обработчик подписки на событие ПередЗаписью для типов:
//  СправочникОбъект
//  ПланВидовХарактеристикОбъект
//  ПланСчетовОбъект
//  ПланВидовРасчетаОбъект
//  БизнесПроцессОбъект
//  ЗадачаОбъект
//  ПланОбменаОбъект.
//
Процедура ПроверитьДатуЗапретаИзмененияПередЗаписью(Источник, Отказ) Экспорт
	
	СтандартнаяОбработка = Истина;
	УзелПланаОбмена = Неопределено;
	СообщитьОЗапрете = Истина;
	//
	Если ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Если ИзменениеЗапрещено(Источник, , СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если ИзменениеЗапрещено(Источник, Источник.Ссылка, СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью для типа ДокументОбъект.
Процедура ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	СтандартнаяОбработка = Истина;
	УзелПланаОбмена = Неопределено;
	СообщитьОЗапрете = Истина;
	//
	Если ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Если ИзменениеЗапрещено(Источник, , СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если ИзменениеЗапрещено(Источник, Источник.Ссылка, СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью для типов:
//  РегистрСведенийНаборЗаписей
//  РегистрНакопленияНаборЗаписей.
//
Процедура ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт
	
	СтандартнаяОбработка = Истина;
	УзелПланаОбмена = Неопределено;
	СообщитьОЗапрете = Истина;
	//
	Если ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Тогда
		Возврат;
	КонецЕсли;
	
	Если Замещение Тогда
		Если ИзменениеЗапрещено(Источник, Источник.Отбор, СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если ИзменениеЗапрещено(Источник, , СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью для типа РегистрБухгалтерииНаборЗаписей.
Процедура ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраБухгалтерии(Источник, Отказ, РежимЗаписи) Экспорт
	
	СтандартнаяОбработка = Истина;
	УзелПланаОбмена = Неопределено;
	СообщитьОЗапрете = Истина;
	//
	Если ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменениеЗапрещено(Источник, Источник.Отбор, СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью для типа РегистрРасчетаНаборЗаписей.
Процедура ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраРасчета(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	СтандартнаяОбработка = Истина;
	УзелПланаОбмена = Неопределено;
	СообщитьОЗапрете = Истина;
	//
	Если ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Тогда
		Возврат;
	КонецЕсли;
	
	Если Замещение Тогда
		Если ИзменениеЗапрещено(Источник, Источник.Отбор, СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если ИзменениеЗапрещено(Источник, , СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалением для типов:
//  СправочникОбъект
//  ДокументОбъект
//  ПланВидовХарактеристикОбъект
//  ПланСчетовОбъект
//  ПланВидовРасчетаОбъект
//  БизнесПроцессОбъект
//  ЗадачаОбъект
//  ПланОбменаОбъект.
//
Процедура ПроверитьДатуЗапретаИзмененияПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	УзелПланаОбмена = Неопределено;
	СообщитьОЗапрете = Истина;
	//
	Если ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменениеЗапрещено(Источник, , СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку механизма дат запрета изменения для объекта.
// Процедура используется для проверки объекта без открытия транзакции записи.
//
// Параметры:
//  Источник – объект, для которого необходимо выполнить проверку. Может быть следующих типов:
//  СправочникОбъект
//  ПланВидовХарактеристикОбъект
//  ПланСчетовОбъект
//  ПланВидовРасчетаОбъект
//  БизнесПроцессОбъект
//  ЗадачаОбъект
//  ПланОбменаОбъект
//  ДокументОбъект
//  РегистрСведенийНаборЗаписей
//  РегистрНакопленияНаборЗаписей
//  РегистрБухгалтерииНаборЗаписей
//  РегистрРасчетаНаборЗаписей.
//
//  Отказ – Булево – флаг отказа; Истина – объект не проходит проверки дат запрета изменения; Ложь – проходит.
// 
Процедура ВыполнитьПроверкуДатыЗапретаИзменения(Источник, Отказ) Экспорт
	
	ОбъектМетаданных = Источник.Метаданные();
	
	ИсточникиДанных = ДатыЗапретаИзмененияПовтИсп.ИсточникиДанныхДляПроверкиЗапретаИзменения().НайтиСтроки(Новый Структура("Таблица", ОбъектМетаданных.ПолноеИмя()));
	
	Если ИсточникиДанных.Количество() = 0 Тогда
		Возврат; // Для текущего типа объекта не определены запреты по датам.
	КонецЕсли;
	
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
	
	Если    ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаСправочники()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыСчетов()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовРасчета()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаБизнесПроцессы()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаЗадачи()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыОбмена() Тогда
		
		ПроверитьДатуЗапретаИзмененияПередЗаписью(Источник, Отказ);
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаДокументы() Тогда
		
		ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(Источник, Отказ, Неопределено, Неопределено);
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений()
		  ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
		
		ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей(Источник, Отказ, Истина);
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыБухгалтерии() Тогда
		
		ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраБухгалтерии(Источник, Отказ, Неопределено);
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыРасчета() Тогда
		
		ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраРасчета(Источник, Отказ, Истина, Неопределено, Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция ИзменениеЗапрещено() проверяет элемент данных
// на запрет его изменения.
//  Для работы функции требуется настройка
// процедуры ДанныеДляПроверкиЗапретаИзменения()
// модуля ДатыЗапретаИзмененияПереопределяемый.
//  Если Данные - полное имя объекта метаданных,
// тогда данные для проверки будут получены
// из базы данных через ИдентификаторДанных.
//  Если Данные - объект, тогда данные для проверки
// будут получены из экземпляра объекта или
// набора записей.
//  Если Данные - объект и задан ИдентификаторДанных,
// тогда будут выполнены две проверки, причем
// данные будут получены и из объекта/набора записей,
// и из базы данных через ИдентификаторДанных.
//
// Параметры:
//  Данные              - Строка (полное имя объекта метаданных),
//                        СправочникОбъект.<Имя>,
//                        ДокументОбъект.<Имя>,
//                        ПланВидовХарактеристикОбъект.<Имя>,
//                        ПланСчетовОбъект.<Имя>,
//                        ПланВидовРасчетаОбъект.<Имя>,
//                        БизнесПроцессОбъект.<Имя>,
//                        ЗадачаОбъект.<Имя>,
//                        ПланОбменаОбъект.<Имя>,
//                        РегистрСведенийНаборЗаписей.<Имя>,
//                        РегистрНакопленияНаборЗаписей.<Имя>,
//                        РегистрБухгалтерииНаборЗаписей.<Имя>,
//                        РегистрРасчетаНаборЗаписей.<Имя>,
//
//  ИдентификаторДанных - СправочникСсылка.<Имя>,
//                        ДокументСсылка.<Имя>,
//                        ПланВидовХарактеристикСсылка.<Имя>,
//                        ПланСчетовСсылка.<Имя>,
//                        ПланВидовРасчетаСсылка.<Имя>,
//                        БизнесПроцессСсылка.<Имя>,
//                        ЗадачаСсылка.<Имя>,
//                        ПланОбменаСсылка.<Имя>,
//                        РегистрСведенийНаборЗаписей.<Имя>.Отбор,
//                        РегистрНакопленияНаборЗаписей.<Имя>.Отбор,
//                        РегистрБухгалтерииНаборЗаписей.<Имя>.Отбор,
//                        РегистрРасчетаНаборЗаписей.<Имя>.Отбор,
//
//  СообщитьОЗапрете    - Булево, если Истина, будет выведено сообщение пользователю
//                        о запрете изменения данных.
//
//  СтандартнаяОбработка - Булево, если Ложь, проверка запрета изменения (для пользователей)
//                        будет пропущена.
//
//  УзелПланаОбмена     - Неопределено, ПланыОбменаСсылка.<Имя плана обмена> -
//                        если задать узел будет выполнена проверка запрета загрузки.
//
//	НайденныеЗапреты	- Неопределено.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИзменениеЗапрещено(Знач Данные, Знач ИдентификаторДанных = Неопределено, Знач СообщитьОЗапрете = Истина, Знач СтандартнаяОбработка = Истина, Знач УзелПланаОбмена = Неопределено, НайденныеЗапреты = Неопределено) Экспорт
	
	ДанныеДляПроверки = Новый Структура;
	ДанныеДляПроверки.Вставить("Таблица",                Данные);
	ДанныеДляПроверки.Вставить("ИдентификаторДанных",    ИдентификаторДанных);
	ДанныеДляПроверки.Вставить("ЗначенияПолейИзОбъекта", Неопределено);
	
	Если ТипЗнч(Данные) <> Тип("Строка") Тогда
		ДанныеДляПроверки.Таблица = Данные.Метаданные().ПолноеИмя();
		ДанныеДляПроверки.ЗначенияПолейИзОбъекта = ИзвлечьЗначенияПолейИзОбъекта(Данные);
	КонецЕсли;
	
	НайденныеЗапреты = Неопределено;
	ЗапретНайден = ДатыЗапретаИзмененияВызовСервера.НайденЗапретИзмененияДанных(ДанныеДляПроверки, СообщитьОЗапрете, , СтандартнаяОбработка, УзелПланаОбмена, НайденныеЗапреты);
	
	Если ЗапретНайден И ТипЗнч(Данные) <> Тип("Строка") Тогда
		Для каждого КлючИЗначение Из НайденныеЗапреты Цикл
			Данные.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗапретНайден;
	
КонецФункции

// Функция ОбъектПриЧтенииНаСервере встраивается
// формы элементов данных (элементов справочников,
// документов, записей регистров, и др.), которые проверяются
// на запрет изменения с целью установить блокировку изменения
// и уведомления пользователя о наличии запрета.
//
// Параметры:
//  Форма               - УправляемаяФорма,
//
//  ТекущийОбъект	    - СправочникСсылка.<Имя>,
//                        ДокументСсылка.<Имя>,
//                        ПланВидовХарактеристикСсылка.<Имя>,
//                        ПланСчетовСсылка.<Имя>,
//                        ПланВидовРасчетаСсылка.<Имя>,
//                        БизнесПроцессСсылка.<Имя>,
//                        ЗадачаСсылка.<Имя>,
//                        ПланОбменаСсылка.<Имя>,
//                        РегистрСведенийНаборЗаписей.Отбор,
//                        РегистрНакопленияНаборЗаписей.Отбор,
//                        РегистрБухгалтерииНаборЗаписей.Отбор,
//                        РегистрРасчетаНаборЗаписей.Отбор,.
//
Функция ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийОбъект));
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		// Приведение менеджера записи к набору записей с одной записью.
		МенеджерДанных = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		Источник = МенеджерДанных.СоздатьНаборЗаписей();
		Для каждого ЭлементОтбора Из Источник.Отбор Цикл
			ЭлементОтбора.Установить(ТекущийОбъект[ЭлементОтбора.Имя], Истина);
		КонецЦикла;
		ИдентификаторДанных = Источник.Отбор;
		ЗаполнитьЗначенияСвойств(Источник.Добавить(), ТекущийОбъект);
	Иначе
		Источник = ТекущийОбъект;
		ИдентификаторДанных = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	УзелПланаОбмена = Неопределено;
	СообщитьОЗапрете = Ложь;
	//
	Если ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИзменениеЗапрещено(ПолноеИмя, ИдентификаторДанных, СообщитьОЗапрете, СтандартнаяОбработка, УзелПланаОбмена) Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецФункции

// Процедура ДобавитьСтроку добавляет
// строку описание источников данных для
// проверки запрета изменения.
// 
// Параметры:
//	Данные		- Табличные данные.
//  Таблица     - Строка.
//  ПолеДаты    - Строка.
//  Раздел      - Строка.
//  ПолеОбъекта - Строка.
//
Процедура ДобавитьСтроку(Данные, Таблица, ПолеДаты, Раздел = "", ПолеОбъекта = "") Экспорт
	
	НоваяСтрока = Данные.Добавить();
	НоваяСтрока.Таблица     = Таблица;
	НоваяСтрока.ПолеДаты    = ПолеДаты;
	НоваяСтрока.Раздел      = Раздел;
	НоваяСтрока.ПолеОбъекта = ПолеОбъекта;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
Функция ПропуститьПроверкуЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете)
	
	Если ДатыЗапретаИзмененияВызовСервера.ЗапретИзмененияДанныхНеИспользуется() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатыЗапретаИзмененияПереопределяемый.ПередПроверкойЗапретаИзменения(Источник, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете);
	
	Возврат НЕ СтандартнаяОбработка И УзелПланаОбмена = Неопределено;
	
КонецФункции

// Только для внутреннего использования.
Функция ИзвлечьЗначенияПолейИзОбъекта(Знач Данные)
	
	ЗначенияПолей = Новый Структура;
	ОбъектМетаданных = Данные.Метаданные();
	Отбор = Новый Структура("Таблица", ОбъектМетаданных.ПолноеИмя());
	ИсточникиДанных = ПолучитьИсточникиДанных(Отбор);
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		// Заполнение значений полей из набора записей.
		ПоляРегистра = ПолучитьПоляРегистра(ИсточникиДанных, Отбор.Таблица);
		ЗначенияПолей = Данные.Выгрузить(, ПоляРегистра);
		ЗначенияПолей.Свернуть(ПоляРегистра);
	Иначе
		// Заполнение значений полей из объекта.
		ЗначенияПолей = ПолучитьСтруктуруПолейОбъекта(ОбъектМетаданных, ИсточникиДанных, Отбор.Таблица);
		Для каждого Поле Из ЗначенияПолей Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Найти(Поле.Ключ) <> Неопределено Тогда
				Поля = Поле.Значение;
				ЗначенияПолей[Поле.Ключ] = Данные[Поле.Ключ].Выгрузить(, Поля);
				ЗначенияПолей[Поле.Ключ].Свернуть(Поля);
			Иначе
				ЗначенияПолей[Поле.Ключ] = Данные[Поле.Ключ];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначенияПолей;
	
КонецФункции

// Только для внутреннего использования.
Функция ПолучитьИсточникиДанных(Отбор) Экспорт
	
	ИсточникиДанныхТаблиц = ДатыЗапретаИзмененияПовтИсп.ИсточникиДанныхДляПроверкиЗапретаИзменения();
	//
	ИсточникиДанных = ИсточникиДанныхТаблиц.НайтиСтроки(Отбор);
	//
	Если ИсточникиДанных.Количество() = 0 Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для проверки запрета изменения не найдены
			           |источники данных для таблицы ""%1"".'"),
			Отбор.Таблица));
	КонецЕсли;
	
	Возврат ИсточникиДанных;
	
КонецФункции

// Только для внутреннего использования.
Функция ПолучитьПоляРегистра(ИсточникиДанных, Таблица) Экспорт
	
	ПоляРегистра = ",";
	
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		
		Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсточникДанных.ПолеДаты, ".");
		Если Поля.Количество() = 0 Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |не задано поле даты.'"),
				Таблица));
		ИначеЕсли НЕ ЗначениеЗаполнено(Поля[0]) Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано поле даты: %2.'"),
				Таблица,
				ИсточникДанных.ПолеДаты));
		КонецЕсли;
		Если Найти(ПоляРегистра, "," + Поля[0] + ",") = 0 Тогда
			ПоляРегистра = ПоляРегистра + Поля[0] + ",";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникДанных.ПолеОбъекта) Тогда
			Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсточникДанных.ПолеОбъекта, ".");
			Если НЕ ЗначениеЗаполнено(Поля[0]) Тогда
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для проверки запрета изменения 
					           |в источнике данных для таблицы ""%1""
					           |неверно задано поле объекта: %2.'"),
					Таблица,
					ИсточникДанных.ПолеОбъекта));
			КонецЕсли;
			Если Найти(ПоляРегистра, "," + Поля[0] + ",") = 0 Тогда
				ПоляРегистра = ПоляРегистра + Поля[0] + ",";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сред(ПоляРегистра, 2, СтрДлина(ПоляРегистра)-2);
	
КонецФункции

// Только для внутреннего использования.
Функция ПолучитьСтруктуруПолейОбъекта(ОбъектМетаданных, ИсточникиДанных, Таблица) Экспорт
	
	СтруктураПолей = Новый Структура;
	
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		//
		ДобавитьПоле(ОбъектМетаданных, ИсточникДанных, СтруктураПолей, ИсточникДанных.ПолеДаты, Таблица, НСтр("ru = 'поле даты'"));
		//
		Если ЗначениеЗаполнено(ИсточникДанных.ПолеОбъекта) Тогда
			ДобавитьПоле(ОбъектМетаданных, ИсточникДанных, СтруктураПолей, ИсточникДанных.ПолеОбъекта, Таблица, НСтр("ru = 'поле объекта'"));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПолей;
	
КонецФункции

// Только для внутреннего использования.
Процедура ДобавитьПоле(ОбъектМетаданных, ИсточникДанных, СтруктураПолей, Поле, Таблица, ВидПоляДляСообщений)
	
	Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
	Если Поля.Количество() = 0 Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для проверки запрета изменения 
			           |в источнике данных для таблицы ""%1""
			           |не задано %2.'"),
			Таблица,
			ВидПоляДляСообщений));
		//
	ИначеЕсли НЕ ЗначениеЗаполнено(Поля[0]) Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для проверки запрета изменения 
			           |в источнике данных для таблицы ""%1""
			           |неверно задано %2: ""%3""'"),
			Таблица,
			ВидПоляДляСообщений,
			Поле));
	КонецЕсли;
	
	Если НЕ СтруктураПолей.Свойство(Поля[0]) Тогда
		СтруктураПолей.Вставить(Поля[0]);
	КонецЕсли;
	
	Если ОбъектМетаданных.ТабличныеЧасти.Найти(Поля[0]) <> Неопределено Тогда
		Если Поля.Количество() = 1 Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано %2:
				           |не задано поле заданной табличной части ""%3"".'"),
				Таблица,
				ВидПоляДляСообщений,
				Поле));
		ИначеЕсли НЕ ЗначениеЗаполнено(Поля[1]) Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проверки запрета изменения 
				           |в источнике данных для таблицы ""%1""
				           |неверно задано %2:
				           |неверно задано поле заданной табличной части ""%3"".'"),
				Таблица,
				ВидПоляДляСообщений,
				Поле));
		КонецЕсли;
		Если СтруктураПолей[Поля[0]] = Неопределено Тогда
			СтруктураПолей[Поля[0]] = Поля[1];
		Иначе
			СтруктураПолей[Поля[0]] = СтруктураПолей[Поле] + "," + Поля[1];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияДанныхПодстистем

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.12";
	Обработчик.Процедура = "ДатыЗапретаИзменения.ЗаменитьНеопределеноНаЗначениеПеречисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.2";
	Обработчик.Процедура = "ДатыЗапретаИзменения.УдалитьПустыеДатыЗапретаПоУмолчанию";
	
КонецПроцедуры

// Обработчик обновления выполняет замену значения Неопределено
// измерения Пользователь регистра сведений ДатыЗапретаИзменения
// на значение Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей.
//
Процедура ЗаменитьНеопределеноНаЗначениеПеречисления() Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик обновления выполняет удаление пустых дат запрета заданных
// для всех пользователей или всех планов обмена, т.е. "По умолчанию",
// т.к. по умолчанию даты запрета пустые.
//
Процедура УдалитьПустыеДатыЗапретаПоУмолчанию() Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти