#Область ПрограммныйИнтерфейс

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы, 
//    имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина)
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда проверяется наличие
//                 роли для администрирования системы.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = СвойстваПроверяемогоПользователяИБ(Пользователь);
	
	Если СвойстваПользователяИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверитьРольПолныеПрава = Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы = ПроверятьПраваАдминистрированияСистемы;
	
	Если Не СвойстваПользователяИБ.УказанТекущийПользовательИБ Тогда
		Роли = СвойстваПользователяИБ.ПользовательИБ.Роли;
		
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И Не Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПроверитьРольАдминистратораСистемы
		   И Не Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтандартныеПодсистемыПовтИсп.ПривилегированныйРежимУстановленПриЗапуске() Тогда
		// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
		// пользователь является полноправным, если привилегированный режим установлен.
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
		// Когда основные роли не указаны, тогда у неуказанного пользователя
		// есть все права (как в привилегированном режиме).
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя)
	   И ПривилегированныйРежимУстановлен
	   И СвойстваПользователяИБ.ПравоАдминистрирование Тогда
		// Когда у неуказанного пользователя есть право Администрирование,
		// тогда привилегированный режим учитывается всегда для поддержки
		// параметра запуска UsePrivilegedMode у не клиентских приложений.
		Возврат Истина;
	КонецЕсли;
	
	// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
	// а роли в текущем сеансе.
	Если ПроверитьРольПолныеПрава
	   И Не СвойстваПользователяИБ.РольДоступнаПолныеПрава Тогда // Не заменять на РолиДоступны.
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с пользователями информационной базы.

// Возвращает ссылку неуказанного пользователя.
// Параметры:
//  СоздатьЕслиНеСуществует - Булево - начальное значение Ложь. Если указать Истина,
//                            тогда будет выполнено создание пользователя "<Не указан>".
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - неуказанный пользователь существует в справочнике.
//  Неопределено - неуказанный пользователь не существует в справочнике.
//
Функция СсылкаНеуказанногоПользователя(СоздатьЕслиНеСуществует = Ложь) Экспорт
	
	Ссылка = ПользователиСлужебный.СвойстваНеуказанногоПользователя().Ссылка;
	
	Если Ссылка = Неопределено И СоздатьЕслиНеСуществует Тогда
		Ссылка = ПользователиСлужебный.СоздатьНеуказанногоПользователя();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции программного интерфейса

// Функция АвторизованныйПользователь возвращает
// текущего пользователя сеанса.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи.
// 
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь), ПараметрыСеанса.ТекущийПользователь, ПараметрыСеанса.ТекущийВнешнийПользователь);
	
КонецФункции

// Получает значение параметра сеанса "Текущий пользователь"
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи.
//
Функция ТекущийПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Функция ЭтоПолноправныйПользовательИБ проверяет,
// является ли полноправным текущий пользователь ИБ или
// пользователь ИБ заданного пользователя (обычного или внешнего).
//
//  Полноправными считается:
// а) пользователь ИБ при пустом списке пользователей ИБ,
//    если основная роль не задана или ПолныеПрава,
// б) пользователь ИБ с ролью ПолныеПрава.
//
//
// Параметры:
//  Пользователь - Неопределено (проверяется текущий пользователь ИБ),
//                 Справочник.Пользователи, Справочник.ВнешниеПользователи
//                 (осуществляется поиск пользователя ИБ по уникальному
//                  идентификатору, заданному в реквизите ИдентификаторПользователяИБ,
//                  если пользователь ИБ не найден, возвращается Ложь).
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользовательИБ(Пользователь = Неопределено, ПроверятьТолькоРольПолныеПрава = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		// Задан не текущий пользователь
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор <> ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
	Иначе
		Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			
			// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
			// а роли в текущем сеансе.
			Возврат РольДоступна(Метаданные.Роли.ПолныеПрава);
		Иначе
			// Для неуказанного пользователя ИБ проверяется основная роль конфигурации:
			// должна быть ПолныеПрава или не указана (привилегированный режим).
			Если Метаданные.ОсновныеРоли.Количество() = 0
				ИЛИ Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава)
			Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция ПолноеИмяНеУказанногоПользователя возвращает
// представление не указанного пользователя, т.е. когда
// список пользователей пуст.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПолноеИмяНеУказанногоПользователя() Экспорт
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

// Функция выполняет поиск элемента справочника Пользователи
// по имени пользователя информационной базы
// Параметры
//  ИмяПользователя - строка - имя пользователя информационной базы
// Возвращаемое значение
//  ссылка на пользователя типа СправочникСсылка.Пользователи,
//  если элемент справочника не найден, возвращается пустая ссылка,
//  если пользователь ИБ не найден, возвращается Неопределено.
//
// Примечание: В случае, если пользователь имеет административные права,
// 	то допускается поиск любого пользователя. Если пользователь не имеет
// 	административных прав, то допускается поиск только того пользователя,
// 	под которым данный пользователь авторизовался.
//
Функция НайтиПоИмени(знач ИмяПользователяИБ) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Возвращает назначение ролей, указанное разработчиками библиотек и прикладных решений.
// Область применения: только для автоматизированной проверки конфигурации.
//
// Возвращаемое значение:
//  Структура - смотри одноименный параметр в процедуре ПриОпределенииНазначенияРолей
//              общего модуля ПользователиПереопределяемый.
//
Функция НазначениеРолей() Экспорт
	
	НазначениеРолей = Новый Структура;
	НазначениеРолей.Вставить("ТолькоДляАдминистраторовСистемы",                Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляПользователейСистемы",                  Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляВнешнихПользователей",                  Новый Массив);
	НазначениеРолей.Вставить("СовместноДляПользователейИВнешнихПользователей", Новый Массив);
	
	ПользователиПереопределяемый.ПриОпределенииНазначенияРолей(НазначениеРолей);
	
	Возврат НазначениеРолей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы для внутренних нужд.

// Функция ПрочитатьПользователяИБ считывает свойства пользователя
// информационной базы по строковому или уникальному идентификатору.
//
// Параметры:
//  Идентификатор - Неопределено, Строка, УникальныйИдентификатор (идентификатор пользователя).
//  Свойства     - Структура:
//                 ПользовательИнфБазыУникальныйИдентификатор   - УникальныйИдентификатор
//                 ПользовательИнфБазыИмя                       - Строка
//                 ПользовательИнфБазыПолноеИмя                 - Строка
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Булево
//                 ПользовательИнфБазыПароль                    - Неопределено
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Строка
//                 ПользовательИнфБазыПарольУстановлен          - Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Булево
//                 ПользовательИнфБазыПользовательОС            - Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Строка (имя языка из коллекции Метаданные.Языки)
//
//  Роли           - Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//  
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ПрочитатьПользователяИБ(Знач Идентификатор, Свойства = Неопределено, Роли = Неопределено, ОписаниеОшибки = "", ПользовательИБ = Неопределено) Экспорт
	
	// Подготовка структур возвращаемых данных
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   Новый УникальныйИдентификатор);
	Свойства.Вставить("ПользовательИнфБазыИмя",                       "");
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 "");
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    Неопределено);
	Свойства.Вставить("ПользовательИнфБазыСохраняемоеЗначениеПароля", "");
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            "");
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         ?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              "Авто");
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      ?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователь информационной базы ""%1""' не найден."), Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	Свойства.ПользовательИнфБазыУникальныйИдентификатор     = ПользовательИБ.УникальныйИдентификатор;
	Свойства.ПользовательИнфБазыИмя                         = ПользовательИБ.Имя;
	Свойства.ПользовательИнфБазыПолноеИмя                   = ПользовательИБ.ПолноеИмя;
	Свойства.ПользовательИнфБазыАутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
	Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора     = ПользовательИБ.ПоказыватьВСпискеВыбора;
	Свойства.ПользовательИнфБазыСохраняемоеЗначениеПароля   = ПользовательИБ.СохраняемоеЗначениеПароля;
	Свойства.ПользовательИнфБазыПарольУстановлен            = ПользовательИБ.ПарольУстановлен;
	Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль     = ПользовательИБ.ЗапрещеноИзменятьПароль;
	Свойства.ПользовательИнфБазыАутентификацияОС            = ПользовательИБ.АутентификацияОС;
	Свойства.ПользовательИнфБазыПользовательОС              = ПользовательИБ.ПользовательОС;
	Свойства.ПользовательИнфБазыОсновнойИнтерфейс           = ?(ПользовательИБ.ОсновнойИнтерфейс = Неопределено, "", ПользовательИБ.ОсновнойИнтерфейс.Имя);
	Свойства.ПользовательИнфБазыРежимЗапуска                = ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение,
	                                                            "ОбычноеПриложение",
	                                                            ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение,
	                                                              "УправляемоеПриложение",
	                                                              "Авто"));
	Свойства.ПользовательИнфБазыЯзык                        = ?(ПользовательИБ.Язык = Неопределено, "", ПользовательИБ.Язык.Имя);
	
	Для каждого Роль Из ПользовательИБ.Роли Цикл
		Роли.Добавить(Роль.Имя);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция ЗаписатьПользователяИБ
// либо перезаписывает свойства пользователяИБ,
//      найденного по строковому или уникальному идентификатору,
// либо создает нового пользователяИБ, когда задано создать,
//      при этом, если пользовательИБ найден будет ошибка
//
// Параметры:
//  Идентификатор - Строка, УникальныйИдентификатор (идентификатор пользователя).
//  НовыеСвойства - Структура (свойство может быть не задано,
//                            тогда используется прочитанное или начальное значение)
//                 ПользовательИнфБазыУникальныйИдентификатор   - Неопределено (задается после записи пользователя ИБ)
//                 ПользовательИнфБазыИмя                       - Неопределено, Строка
//                 ПользовательИнфБазыПолноеИмя                 - Неопределено, Строка
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Неопределено, Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Неопределено, Булево
//                 ПользовательИнфБазыПароль                    - Неопределено, Строка
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Неопределено, Строка
//                 ПользовательИнфБазыПарольУстановлен          - Неопределено, Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Неопределено, Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Неопределено, Булево
//                 ПользовательИнфБазыПользовательОС            - Неопределено, Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Неопределено, Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Неопределено, Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Неопределено, Строка (имя языка из коллекции Метаданные.Языки)
//
//  НовыеРоли      - Неопределено, Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ЗаписатьПользователяИБ(Знач Идентификатор, Знач НовыеСвойства, Знач НовыеРоли, Знач СоздатьНового = Ложь, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	СтарыеСвойства = Неопределено;
	СтарыеРоли     = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	ПредварительноеЧтение = ПрочитатьПользователяИБ(Идентификатор, СтарыеСвойства, СтарыеРоли, ОписаниеОшибки);
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) ИЛИ НЕ ПредварительноеЧтение Тогда
		
		Если СоздатьНового Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СоздатьНового Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно создать пользователя информационной базы ""%1"",
		                                        |так как он уже существует.'"),
				Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	// Подготовка новых значений свойств
	Для каждого КлючИЗначение Из Свойства Цикл
		Если НовыеСвойства.Свойство(КлючИЗначение.Ключ) И НовыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			Свойства[КлючИЗначение.Ключ] = НовыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеРоли <> Неопределено Тогда
		Роли = НовыеРоли;
	КонецЕсли;
	
	// Установка новых значений свойств
	
	ПользовательИБ.Имя                         = Свойства.ПользовательИнфБазыИмя;
	ПользовательИБ.ПолноеИмя                   = Свойства.ПользовательИнфБазыПолноеИмя;
	ПользовательИБ.АутентификацияСтандартная   = Свойства.ПользовательИнфБазыАутентификацияСтандартная;
	ПользовательИБ.ПоказыватьВСпискеВыбора     = Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора;
	Если Свойства.ПользовательИнфБазыПароль <> Неопределено Тогда
		ПользовательИБ.Пароль                  = Свойства.ПользовательИнфБазыПароль;
	КонецЕсли;
	ПользовательИБ.ЗапрещеноИзменятьПароль     = Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль;
	ПользовательИБ.АутентификацияОС            = Свойства.ПользовательИнфБазыАутентификацияОС;
	ПользовательИБ.ПользовательОС              = Свойства.ПользовательИнфБазыПользовательОС;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыОсновнойИнтерфейс) Тогда
	    ПользовательИБ.ОсновнойИнтерфейс       = Метаданные.Интерфейсы[Свойства.ПользовательИнфБазыОсновнойИнтерфейс];
	Иначе
	    ПользовательИБ.ОсновнойИнтерфейс       = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыРежимЗапуска) Тогда
	    ПользовательИБ.РежимЗапуска            = РежимЗапускаКлиентскогоПриложения[Свойства.ПользовательИнфБазыРежимЗапуска];
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыЯзык) Тогда
	    ПользовательИБ.Язык                    = Метаданные.Языки[Свойства.ПользовательИнфБазыЯзык];
	Иначе
	    ПользовательИБ.Язык                    = Неопределено;
	КонецЕсли;
	
	ПользовательИБ.Роли.Очистить();
	Для каждого Роль Из Роли Цикл
		ПользовательИБ.Роли.Добавить(Метаданные.Роли[Роль]);
	КонецЦикла;
	
	// Добавление роли ПолныеПрава, при попытке создать первого пользователя с пустым списком ролей.
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		КонецЕсли;
		
		Если НЕ ПользовательИБ.Роли.Содержит(ПользователиПереопределяемый.РольАдминистратораСистемы()) Тогда
			ПользовательИБ.Роли.Добавить(ПользователиПереопределяемый.РольАдминистратораСистемы());
		КонецЕсли;
	КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ
	Попытка
		ПользовательИБ.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ИнформацияОбОшибке.Причина = Неопределено Тогда
			ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		Иначе
			ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
		КонецЕсли;
		ОписаниеОшибки = НСтр("ru = 'Ошибка при записи пользователя информационной базы:'") + Символы.ПС + ОписаниеОшибки;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Пользователи'"), УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Ложь;
	КонецПопытки;
	
	НовыеСвойства.ПользовательИнфБазыУникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
	
	ПользователиПереопределяемый.ПриЗаписиПользователяИнформационнойБазы(СтарыеСвойства, Свойства);
	
	Возврат Истина;
	
КонецФункции

// Функция удаляет пользователя информационной базы
// по строковому или уникальному идентификатору.
//
// Параметры:
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция УдалитьПользователяИБ(Знач Идентификатор, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) Тогда
		Возврат Ложь;
	Иначе
		Попытка
			ПользовательИБ.Удалить();
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка при удалении пользователя информационной базы:'") + Символы.ПС + ИнформацияОбОшибке().Причина.Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ПользователиПереопределяемый.ПослеУдаленияПользователяИнформационнойБазы(Свойства);
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет существования пользователя информационной базы
// Параметры
// Идентификатор - УникальныйИдентификатор, Строка
//                 УИД пользователяИБ или Имя пользователяИБ
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполняет поиск идентификаторов пользователей ИБ используемых более одного раза и
// либо вызывает исключение, либо возвращает найденных пользователей ИБ для дальнейшей
// обработки.
//
// Параметры:
//  Пользователь - Неопределено - проверка для всех пользователей и внешних пользователей.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - проверка
//                 только для указанной ссылки.
//
//  УникальныйИдентификатор - Неопределено - проверка всех заданных идентификаторов пользователей ИБ.
//                          - УникальныйИдентификатор - проверка только для заданного идентификатора.
//
//  НайденныеИдентификаторы - Неопределено - при нахождении ошибок вызывается исключение.
//                          - Соответствие - при нахождении ошибок исключение не вызывается,
//                              а вместо этого заполняется переданное соответствие:
//                              * Ключ     - неоднозначный идентификатор пользователя ИБ.
//                              * Значение - массив пользователей и внешних пользователей.
//
//  ИдентификаторПользователяСервиса - Булево - если Ложь, тогда проверять ИдентификаторПользователяИБ,
//                                              если Истина,тогда проверять ИдентификаторПользователяСервиса.
//
Процедура НайтиНеоднозначныхПользователейИБ(Знач Пользователь,
                                            Знач УникальныйИдентификатор = Неопределено,
                                            Знач НайденныеИдентификаторы = Неопределено,
                                            Знач ИдентификаторПользователяСервиса = Ложь) Экспорт
	
КонецПроцедуры

// Функция определяет наличие элемента в справочнике Пользователи
// или ВнешниеПользователи по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки связи пользователяИБ только
// с одним элементом справочников Пользователи, ВнешниеПользователи.
//
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор пользователя ИБ
//  СсылкаНаТекущего - СправочникСсылка.Пользователи
//                     СправочникСсылка.ВнешниеПользователи
//                     Неопределено, - когда параметр задан
//                     указанная ссылка исключается из поиска,
//                     т.е. может быть найден только другой элемент.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор, СсылкаНаТекущего = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	               |	И Пользователи.Ссылка <> &СсылкаНаТекущего
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ИСТИНА
	               |ИЗ
	               |	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	               |ГДЕ
	               |	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	               |	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Процедура ОбновитьСоставыГруппПользователей обновляет в регистре сведений
// "Состав групп пользователей" соответствие групп пользователей и пользователей
// с учетом иерархии групп пользователей (родитель включает пользователей порожденных групп).
//  Эти данные требуются для формы списка и формы выбора пользователей.
//  Данные регистра могут быть применены в других целях для повышения производительности,
// т.к. не требуется работать с иерархией на языке запросов.
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей.
//
Процедура ОбновитьСоставыГруппПользователей(Знач ГруппаПользователей) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаГруппРодителей.Родитель,
	|	ТаблицаГруппРодителей.Ссылка
	|ПОМЕСТИТЬ ТаблицаГруппРодителей
	|ИЗ
	|	&ТаблицаГруппРодителей КАК ТаблицаГруппРодителей");
	Запрос.УстановитьПараметр("ТаблицаГруппРодителей", ТаблицаГруппРодителей("Справочник.ГруппыПользователей"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Выполнение для текущий группы и каждой группы-родителя.
	Пока НЕ ГруппаПользователей.Пустая() Цикл
		
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
		
		Если ГруппаПользователей <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			// Удаление связей для удаленных пользователей.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|			ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|				И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
			|	И ГруппыПользователейСостав.Ссылка ЕСТЬ NULL ";
			ПользователиУдаленныеИзГруппы = Запрос.Выполнить().Выбрать();
			МенеджерЗаписи = РегистрыСведений.СоставыГруппПользователей.СоздатьМенеджерЗаписи();
			Пока ПользователиУдаленныеИзГруппы.Следующий() Цикл
				МенеджерЗаписи.ГруппаПользователей = ГруппаПользователей;
				МенеджерЗаписи.Пользователь        = ПользователиУдаленныеИзГруппы.Пользователь;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
		КонецЕсли;
		
		// Добавление связей для добавленных пользователей.
		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи) КАК ГруппаПользователей,
			|	Пользователи.Ссылка КАК Пользователь
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
			|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
			|ГДЕ
			|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Пользователи.Ссылка,
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
			|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
			|ГДЕ
			|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ГруппаПользователей КАК ГруппаПользователей,
			|	ГруппыПользователейСостав.Пользователь
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|		ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|			И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И (СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь)
			|ГДЕ
			|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
		КонецЕсли;
		ПользователиДобавленныеВГруппу = Запрос.Выполнить().Выгрузить();
		Если ПользователиДобавленныеВГруппу.Количество() > 0 Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ПользователиДобавленныеВГруппу);
			НаборЗаписей.Записать(Ложь); // Добавление недостающих записей связей.
		КонецЕсли;
		
		ГруппаПользователей = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ГруппаПользователей, "Родитель");
	КонецЦикла;
	
КонецПроцедуры

// Функция ТаблицаГруппРодителей используется в процедурах ОбновитьСоставыГруппПользователей,
// ОбновитьСоставГруппВнешнихПользователей.
//
Функция ТаблицаГруппРодителей(Таблица) Экспорт
	
	// Подготовка состава групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыТаблицы.Ссылка,
	|	ГруппыТаблицы.Родитель
	|ИЗ
	|	" + Таблица + " КАК ГруппыТаблицы");
	ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭлементов.Индексы.Добавить("Родитель");
	ТаблицаГруппРодителей = ТаблицаЭлементов.Скопировать(Новый Массив);
	
	Для каждого ОписаниеЭлемента Из ТаблицаЭлементов Цикл
		ОписаниеГруппыРодителя = ТаблицаГруппРодителей.Добавить();
		ОписаниеГруппыРодителя.Родитель = ОписаниеЭлемента.Ссылка;
		ОписаниеГруппыРодителя.Ссылка   = ОписаниеЭлемента.Ссылка;
		ЗаполнитьГруппыРодителя(ОписаниеЭлемента.Ссылка, ОписаниеЭлемента.Ссылка, ТаблицаЭлементов, ТаблицаГруппРодителей);
	КонецЦикла;
	
	Возврат ТаблицаГруппРодителей;
	
КонецФункции

Процедура ЗаполнитьГруппыРодителя(Знач Родитель, Знач ТекущийРодитель, Знач ТаблицаЭлементов, Знач ТаблицаРодителей)
	
	ОписанияГруппРодителя = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));
	Для каждого ОписаниеГруппы Из ОписанияГруппРодителя Цикл
		ОписаниеГруппыРодителя = ТаблицаРодителей.Добавить();
		ОписаниеГруппыРодителя.Родитель = Родитель;
		ОписаниеГруппыРодителя.Ссылка   = ОписаниеГруппы.Ссылка;
		ЗаполнитьГруппыРодителя(Родитель, ОписаниеГруппы.Ссылка, ТаблицаЭлементов, ТаблицаРодителей);
	КонецЦикла;
	
КонецПроцедуры

// Есть ли право создания рассылок у пользователя.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЕстьПравоСозданияРассылок() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.Рассылка);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Для функций ЭтоПолноправныйПользователь и РолиДоступны.

Функция СвойстваПроверяемогоПользователяИБ(Пользователь)
	
	СвойстваТекущегоПользовательИБ = ПользователиСлужебныйПовтИсп.СвойстваТекущегоПользователяИБ();
	ПользовательИБ = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	ИначеЕсли Пользователь = Неопределено Или Пользователь = АвторизованныйПользователь() Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ИдентификаторПользователяИБ = Пользователь.УникальныйИдентификатор();
			Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ИдентификаторПользователяИБ Тогда
				Возврат СвойстваТекущегоПользовательИБ;
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	КонецЕсли;
	
	Свойства = Новый Структура;
	Свойства.Вставить("УказанТекущийПользовательИБ", Ложь);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти
