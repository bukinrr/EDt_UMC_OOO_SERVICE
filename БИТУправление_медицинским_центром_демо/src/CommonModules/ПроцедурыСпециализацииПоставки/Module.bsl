#Область ПрограммныйИнтерфейс

// Возвращает структуру с данными об организации на основании филиала переданного документа.
//
// Параметры:
//  ИсточникЗапроса	 - ДокументСсылка, СправочникСсылка.Филиалы - контекст получения информации.
//	ДатаЛицензии - Дата - дата лицензии.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьРеквизитыОрганизации(ИсточникЗапроса = Неопределено, ДатаЛицензии = Неопределено) Экспорт 
	
	СтруктураРеквизитов = Новый Структура("НазваниеОрганизации,ИНН,КПП,Адрес,Телефон, ОГРН, ОКПО, Лицензия, ЛицензияКемВыдана, ЛицензияДата, ЛицензияПредставление");
	
	Если ИсточникЗапроса <> Неопределено Тогда
		
		// Определение Организации и Филиала
		Организация = Неопределено;
		ИмяРеквизитаФилиал = ИмяРеквизитаФилиалДокументов();
		
		Если ТипЗнч(ИсточникЗапроса) = Тип("СправочникСсылка.Организации") Тогда
			Организация = ИсточникЗапроса;
			Филиал = Неопределено;
		Иначе
			Если ТипЗнч(ИсточникЗапроса) = Тип("СправочникСсылка.Филиалы") Тогда
				Филиал = ИсточникЗапроса;
			ИначеЕсли ТипЗнч(ИсточникЗапроса) = Тип("ДанныеФормыСтруктура") Тогда
				ИсточникЗапроса.Свойство(ИмяРеквизитаФилиал, Филиал);
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизитаФилиал,ИсточникЗапроса.Метаданные()) Тогда
				Филиал = ИсточникЗапроса[ИмяРеквизитаФилиал];
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Филиал) Тогда
				Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
			КонецЕсли;
			Организация = Филиал.Организация;
		КонецЕсли;
		
		// Заполнение структуры возврата
		Если ЗначениеЗаполнено(Организация) Тогда
			
			// Реквизиты организации
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Организация);
			СтруктураРеквизитов.НазваниеОрганизации = Организация.НаименованиеПолное;
			
			// Лицензия на медицинскую деятельность
			Если ДатаЛицензии = Неопределено Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникЗапроса, "Дата") Тогда
					ДатаЛицензии = ИсточникЗапроса.Дата;
				Иначе
					ДатаЛицензии = ТекущаяДатаСеанса();
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЛицензии = РегистрыСведений.ЛицензииМедицинскойДеятельности.ПолучитьСтруктуруДанныхЛицензии(Организация, ДатаЛицензии);
			Если ДанныеЛицензии <> Неопределено Тогда
				СтруктураРеквизитов.Вставить("Лицензия", ДанныеЛицензии.НомерЛицензии);
				СтруктураРеквизитов.Вставить("ЛицензияКемВыдана", ДанныеЛицензии.ВыдавшийЛицензиюОрган);
				
				Если ДанныеЛицензии.Период <> Дата(1900,1,1) Тогда
					СтруктураРеквизитов.Вставить("ЛицензияДата", ДанныеЛицензии.Период);
				Иначе
					СтруктураРеквизитов.Вставить("ЛицензияДата", "");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураРеквизитов.ЛицензияДата) Тогда
					ПолноеНаименованиеЛицензии = СтрШаблон(НСтр("ru='%1 от %3, выдана %2'"),
															СтруктураРеквизитов.Лицензия,
															СтруктураРеквизитов.ЛицензияКемВыдана,
															Формат(СтруктураРеквизитов.ЛицензияДата, "ДЛФ=D"));
				
				Иначе
					ПолноеНаименованиеЛицензии = СтруктураРеквизитов.Лицензия;
				КонецЕсли;
				
				СтруктураРеквизитов.Вставить("ЛицензияПредставление", ПолноеНаименованиеЛицензии);
			КонецЕсли;
		КонецЕсли;
		
		// Контактная информация
		КИ = Новый запрос;
		КИ.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект) = ТИП(Справочник.Организации)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект В(&Орг)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		КИ.УстановитьПараметр("Орг", ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(Организация, Филиал));
		КИ.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		КИ.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЮридический);
		Выборка = Ки.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураРеквизитов.Адрес = Выборка.Представление;
		КонецЕсли;
		
		КИ.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		КИ.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
		Выборка = КИ.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураРеквизитов.Телефон = Выборка.Представление;
		Иначе
			КИ.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонРабочий);
			Выборка = КИ.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураРеквизитов.Телефон = Выборка.Представление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Поддерживается ли учет по нескольким филиалам в базе.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ПоддерживаетсяУчетПоНесколькимФилиалам() Экспорт
	
	Возврат Метаданные.Справочники.Найти("Филиалы") <> Неопределено;
	
КонецФункции

// Возвращает структуру с данными о Главном бухгалтере организации и кассире
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы - филиал, чьих ответственных надо получить.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ОтветственныеЛицаФилиала(Филиал = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураРеквизитов = Новый Структура("ГлавныйБухгалтер, Кассир");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Филиал);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическоеЛицо,
		|   ОтветственноеЛицо
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
		|ГДЕ
		|	СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	пчЛица = Перечисления.ДолжностныеЛицаОрганизации;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ОтветственноеЛицо = пчЛица.ГлавныйБухгалтер Тогда
			СтруктураРеквизитов.ГлавныйБухгалтер = ВыборкаДетальныеЗаписи.ФизическоеЛицо;
		ИначеЕсли ВыборкаДетальныеЗаписи.ОтветственноеЛицо = пчЛица.Кассир Тогда
			СтруктураРеквизитов.Кассир = ВыборкаДетальныеЗаписи.ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает список филиалов организации
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы, СправочникСсылка.Организация	 - Филиал организации или организация.
// 
// Возвращаемое значение:
//  Массив - Список филиалов
//
Функция ФилиалыОрганизации(Филиал, ВключаяПомеченныеНаУдаление = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Филиалы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Филиалы КАК Филиалы
	               |ГДЕ
	               |	Филиалы.Организация = &Организация
	               |	И (&ВключаяПомеченныеНаУдаление = ИСТИНА
	               |			ИЛИ НЕ Филиалы.ПометкаУдаления)";
	
	Если ТипЗнч(Филиал) = Тип("СправочникСсылка.Филиалы") Тогда
		Организация = Филиал.Организация;
	ИначеЕсли ТипЗнч(Филиал) = Тип("СправочникСсылка.Организации") Тогда
		Организация = Филиал;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВключаяПомеченныеНаУдаление",ВключаяПомеченныеНаУдаление);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Перечень собственных организаций в базе для технических сообщений (заказ звонка, подключение модулей и т.д.).
// 
// Возвращаемое значение:
//  Строка - названия и ИНН организаций в базе.
//
Функция ОрганизацииБазыСтрокой() Экспорт
	
	Результат = "";
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Организации = Новый Соответствие;
		
		Выб = Справочники.Организации.Выбрать();
		Пока Выб.Следующий() Цикл
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выб, "ЭтоГруппа")
				Или Не Выб.ЭтоГруппа
			Тогда
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выб, "МедицинскаяОрганизация")
					И ЗначениеЗаполнено(Выб.МедицинскаяОрганизация)
				Тогда
					// Медорганизанция из классификатора приоритетнее
					Организации.Вставить(Выб.МедицинскаяОрганизация.ИНН, Выб.МедицинскаяОрганизация.ПолноеНаименование);
					
				ИначеЕсли (ЗначениеЗаполнено(Выб.НаименованиеПолное)
							Или  ЗначениеЗаполнено(Выб.ИНН))
						И Организации.Получить(Выб.ИНН) = Неопределено
				Тогда
					Организации.Вставить(Выб.ИНН, Выб.НаименованиеПолное);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение КонецПопытки;
	
	// Свертка в строку
	Для Каждого КлючЗначение Из Организации Цикл
		
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Результат, КлючЗначение.Значение + " ИНН: " + КлючЗначение.Ключ, "; ");
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Перечень настроек программы, хранимые в узле РБД этой базы.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьПереченьНастроекУзлаРБД() Экспорт
	
	НастройкиУзлаРБД = Новый Массив;
	НастройкиУзлаРБД.Добавить("БазовыйКаталогФайлов");
	НастройкиУзлаРБД.Добавить("Филиал");
	
	Возврат НастройкиУзлаРБД;
	
КонецФункции

// Дополняет струтуру учетной политики настройкми узла РБД
//
// Параметры:
//  УчетнаяПолитика	 - Структура - произвольная структура.
//
Процедура ДополнитьУчетнуюПолитикуНастройкамиУзла(УчетнаяПолитика) Экспорт
	
	Если Метаданные.ПланыОбмена.Найти("Полный") <> Неопределено Тогда
		НастройкиУзлаРБД = ПолучитьПереченьНастроекУзлаРБД();
		Узел = ПланыОбмена["Полный"].ЭтотУзел();
		
		Для Каждого Настройка Из НастройкиУзлаРБД Цикл
			
			УчетнаяПолитика.Вставить(Настройка, Узел[Настройка]);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя реквизита филиала в метаданных документов.
// 
// Возвращаемое значение:
//  Строка - имя реквизита у документов.
//
Функция ИмяРеквизитаФилиалДокументов() Экспорт
	Возврат "Филиал";
КонецФункции

// Получение по ссылке на клиента пути к папке клиента
//
// Параметры:
//  КлиентСсылка - СправочникСсылка.Клиенты	 - клиент.
// 
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьБазовыйКаталогФото(КлиентСсылка) Экспорт
	УИД = КлиентСсылка.УникальныйИдентификатор();
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ИмяКаталога = УчетнаяПолитика.БазовыйКаталогФайлов + Строка(УИД) + "\";
	Возврат ИмяКаталога;
КонецФункции
 
// Кабинеты/оборудование, прописанное в номенклатуре - с учетом филиала.
//
// Параметры:
//  Номенклатура - СправочникиСсылка.Номенклатура - номенклатура
//  Филиал		 - СправочникСсылка.Филиалы	 - филиал документа.
// 
// Возвращаемое значение:
//  Структура - оборудование.
//
Функция ПолучитьЗначенияОборудования(Номенклатура, Филиал) Экспорт
	
	ОборудованиеУслуги = Новый Структура("Оборудование1,Оборудование2,Оборудование3");
	
	Сч = 1;
	Для Каждого СтрокаОборудования Из Номенклатура.Оборудования Цикл
		// Берем оборудование/кабинет, если нет учета по нескольким филиалам
		// или оборудование/кабинет привязано к этому филиалу
		// или оборудование/кабинет общее для всех филиалов (не привязано к конкретному).
		Если Не ПараметрыСеанса.УчетПоНесколькимФилиалам
			Или (СтрокаОборудования.Филиал = Филиал)
			Или Не ЗначениеЗаполнено(СтрокаОборудования.Филиал)
		Тогда
			ОборудованиеУслуги["Оборудование" + Сч] = СтрокаОборудования.Оборудование;	
			Сч = Сч + 1;
			Если Сч > 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОборудованиеУслуги;
	
КонецФункции

// Устанавливает синоним флагу использования нескльких врачей в форме.
//
// Параметры:
//  ЗаголовокЭлемента			 - Строка - заголовок элемента на форме.
//  ТекущийРежимЗаписиНаПрием	 - ПеречислениеСсылка.РежимыЗаписиНаПрием	 - режим записи из учетной политики.
//
Процедура УстановитьСинонимНесколькимВрачам(ЗаголовокЭлемента,ТекущийРежимЗаписиНаПрием) Экспорт
	РежимЗаписиНаПрием = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимЗаписиНаПрием");
	ТекущийРежимЗаписиНаПрием = РежимЗаписиНаПрием;
	Если РежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.КВрачу Тогда
		ЗаголовокЭлемента = "Несколько врачей";
	ИначеЕсли РежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинетКВрачу Тогда
		ЗаголовокЭлемента = "Несколько врачей и кабинетов";
	ИначеЕсли РежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.ВКабинет Тогда
		ЗаголовокЭлемента = "Несколько кабинетов";
	Иначе
		ТекущийРежимЗаписиНаПрием = Перечисления.РежимыЗаписиНаПрием.КВрачу;
	КонецЕсли;
КонецПроцедуры

// Формирует заголовок кнопки филиала форм документов
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы	 - филиал документа.
// 
// Возвращаемое значение:
//   Строка.
//
Функция СформироватьЗаголовокКнопкиФилиала(Филиал) Экспорт
	
	Возврат "Клиника: "+?(ЗначениеЗаполнено(Филиал),СокрЛП(Филиал)," не выбрана");
	
КонецФункции

// Возвращает специализации сотрудника. Первой идёт основная специализация.
//
// Параметры:
//  Сотрудник	 - СправочникСсылка.Сотрудники - сотрудник.
// 
// Возвращаемое значение:
//   Массив. 
//
Функция ПолучитьМассивСпециализацийСотрудника(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиСпециализации.Специализация,
	|	ВЫБОР
	|		КОГДА СотрудникиСпециализации.Специализация = СотрудникиСпециализации.Ссылка.Специализация
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.Сотрудники.Специализации КАК СотрудникиСпециализации
	|ГДЕ
	|	СотрудникиСпециализации.Ссылка = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Специализация");
	
КонецФункции

// Возвращает представления для частых реквизитов, имеющих различные обозначения в зависимости от конкретной отрасли.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ОтраслевыеПредставленияРеквизитов() Экспорт
	
	Представления = Новый Соответствие;
	
	Представления.Вставить("Сотрудник", "Врач");
	Представления.Вставить("Сотрудники", "Врачи");
	Представления.Вставить("Сотрудника", "Врача");
	Представления.Вставить("Сотруднику", "Врачу");
	
	Возврат Представления;
	
КонецФункции

// Возвращает синоним справочинка филиалов.
// 
// Возвращаемое значение:
//   Строка.
//
Функция СинонимСправочникаФилиалов() Экспорт
	
	Возврат Справочники.Филиалы.ПустаяСсылка().Метаданные().Синоним;
	
КонецФункции

// Адрес технической поддержки конфигурации.
// 
// Возвращаемое значение:
//  Строка - названия и ИНН организаций в базе.
//
Функция АдресТехПоддержкиКонфигурации() Экспорт
	Возврат "med@1cbit.ru";
КонецФункции

#Область Стоматология

// Определяет, есть ли в конфигурации функциональный блок стоматологии.
// 
// Возвращаемое значение:
//  Булево - есть ли подсистема стоматологии.
//
Функция ЕстьПодсистемаСтоматологии() Экспорт 
	
	Возврат Метаданные.РегистрыСведений.Найти("стомУчетнаяПолитика") <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДополнениеСтандартныхОбработчиковСистемы

// Установка параметров сеанса
//
Процедура УстановкаПараметровСеанса() Экспорт
	
	// Исключение приложений сеанса, для которых заведомо не актуальны параметры сеанса раздела
	Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
	ЭтоФоновоеЗадание = Сеанс.ИмяПриложения = "BackgroundJob"
					Или Сеанс.ИмяПриложения = "SystemBackgroundJob";
	
	// Заполняет параметры сеанса видами комплексных расчетов клиентов
	УстановитьПараметрСеансаТипыВидовКомплексныхРасчетов();
	
	#Область Лаборатории
	Если Не ЭтоФоновоеЗадание Тогда
		
		МодульЛабораторияСервер = ДопСерверныеФункции.ОбщийМодуль("ЛабораторияСервер");
		Если МодульЛабораторияСервер <> Неопределено Тогда
		
			МодульЛабораторияСервер.УстановкаПараметровСеанса();
			
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Установка параметра сеанса ТипыВидовКомплексныхРасчетов.
//
Процедура УстановитьПараметрСеансаТипыВидовКомплексныхРасчетов() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СоответствияКлюч = Новый Соответствие;
	Справочник = Справочники.ВидыКомплексныхРасчетовКлиентов.ПолучитьСсылку();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКомплексныхРасчетовКлиентов.Тип,
	|	ВидыКомплексныхРасчетовКлиентов.Ссылка КАК Вид
	|ИЗ
	|	Справочник.ВидыКомплексныхРасчетовКлиентов КАК ВидыКомплексныхРасчетовКлиентов
	|ГДЕ
	|	НЕ ВидыКомплексныхРасчетовКлиентов.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствияКлюч.Вставить(Выборка.Вид, Выборка.Тип);
	КонецЦикла;
	
	ПараметрыСеанса.ТипыВидовКомплексныхРасчетов = Новый ФиксированноеСоответствие(СоответствияКлюч);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
