#Область ПрограммныйИнтерфейс

// Устанавливает в параметр сеанса текущего пользователя.
Процедура УстановитьПараметрСеансаТекущийПользователь() Экспорт
	
	ИмяПользователя = ИмяПользователя();	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		// Пользователь не авторизовался.
		ИмяПользователя = "НеАвторизован";		
	КонецЕсли;	
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
		ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
	КонецЕсли;		
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
КонецПроцедуры	

// Устанавливает изменяемые параметры сеанса текущего пользователя.
//
// Параметры:
//  Интерактивно	 - Булево	 - интерактивно.
//  ТекстРезультата	 - Строка	 - текст результата.
//
Процедура УстановитьИзменяемыеПараметрыСеансаПользователя(Интерактивно = Ложь, ТекстРезультата = "") Экспорт
	
	УстановитьПараметрГраницыЗапретаИзмененияДанных();
	ТекстРезультата = ТекстРезультата + " - обновлены даты запрета изменения данных" + Символы.ПС;
	
	// Инициализация параметров сеанса, связанных с механизмом РИБ:
	// ПрефиксУзлаРаспределеннойИнформационнойБазы, НаличиеОбменаДаннымиПоОрганизации
	// ВсеУзлыОбменаПоОрганизациям, СоответствиеОрганизацийИУзловОбменаПоОрганизации
	// ИспользованиеРИБ.
	ОпределитьФактИспользованияРИБ();
	ТекстРезультата = ТекстРезультата + " - обновлены параметры распределенной информационной базы" + Символы.ПС;
	
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	ТекстРезультата = ТекстРезультата + " - сброшен кэш значений текущего сеанса" + Символы.ПС;
	
КонецПроцедуры

// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных.
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГраницыЗапретаИзмененияДанных.Пользователь КАК пользователь,
	               |	ЕСТЬNULL(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ГраницаЗапрета
	               |ИЗ
	               |	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	               |ГДЕ
	               |	(ГраницыЗапретаИзмененияДанных.Пользователь = &Пользователь
	               |			ИЛИ ГраницыЗапретаИзмененияДанных.Пользователь ЕСТЬ NULL 
	               |			ИЛИ ГраницыЗапретаИзмененияДанных.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГраницыЗапретаИзмененияДанных.Пользователь,
	               |	ЕСТЬNULL(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59))";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
    
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Соответствие[Выборка.Пользователь] = Выборка.ГраницаЗапрета;
		КонецЦикла;
		Если Соответствие.Получить(ПараметрыСеанса.ТекущийПользователь) = Неопределено Тогда
			Соответствие[ПараметрыСеанса.ТекущийПользователь] = Соответствие[Справочники.Пользователи.ПустаяСсылка()];
		КонецЕсли;
		Соответствие.Удалить(Справочники.Пользователи.ПустаяСсылка());
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		Соответствие.Вставить(Справочники.Пользователи.ПустаяСсылка(), Дата('00010101'));
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли КлючИЗначение.Значение <> Дата('00010101') Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
	
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));;	
	
КонецПроцедуры

// Определяет факт использования РИБ.
Процедура ОпределитьФактИспользованияРИБ() Экспорт
	
	Если Метаданные.ПланыОбмена.Найти("Полный") = Неопределено Тогда
		
		ПараметрыСеанса.ИспользованиеРИБ = Ложь;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					|	Полный.Ссылка
					|ИЗ
					|	ПланОбмена.Полный КАК Полный
					|ГДЕ
					|	Полный.Ссылка <> &ЭтотУзелПолный
					|
					|";
		
		Запрос.УстановитьПараметр("ЭтотУзелПолный", ПланыОбмена["Полный"].ЭтотУзел());
		
		ПараметрыСеанса.ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();	
		
	КонецЕсли;
	
	ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();	
	
КонецПроцедуры

// Устанавливает парамтр сеанса по нескольким Филиалам.
Процедура УстановитьПараметрСеансаУчетПоНесколькимФилиалам() Экспорт
	
	ИмяСправочника = "Филиалы";
	Если Метаданные.Справочники.Найти(ИмяСправочника)<>Неопределено Тогда
		
		Выборка = Справочники[ИмяСправочника].Выбрать();
		счФилиалыВБазе = 0;		
		Пока Выборка.Следующий() Цикл
			счФилиалыВБазе = счФилиалыВБазе + 1;
		КонецЦикла;
		
		ПараметрыСеанса.УчетПоНесколькимФилиалам = (счФилиалыВБазе > 1);
		
	Иначе
		
		ПараметрыСеанса.УчетПоНесколькимФилиалам = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция по пользователю ИБ определяет есть ли у него Windows авторизация.
//
// Параметры:
//  ИмяПользователяИБ - Строка - Имя пользователя информационной базы, для которого необходимо проверить наличие Windows авторизации.
// 
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть Windows авторизация.
//
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

// Процедура устанавливает значение константы.
//
// Параметры:
//  МенеджерКонстанты	 - КонстантаМенеджер - Менеджер константы, значение которой необходимо установить.
//  НовоеЗначение		 - Произвольный - Новое значение константы.
//
Процедура УстановитьЗначениеКонстанты(МенеджерКонстанты, НовоеЗначение) Экспорт
	МенеджерКонстанты.Установить(НовоеЗначение);
КонецПроцедуры

// Обновляет нумерацию обектов указанных метаданных.
//
// Параметры:
//  Метаданные	 - Метаданные	 - метаданные объекта конфигурации.
//
Процедура ОбновитьНумерациюОбъекта(Метаданные) Экспорт
	
	ОбновитьНумерациюОбъектов(Метаданные);

КонецПроцедуры

#КонецОбласти
