#Область ПрограммныйИнтерфейс

// Обработчик результата который приходит от РЭМД
Функция registerDocumentResult(Параметры, Заголовок, СтруктураДляЛогов) Экспорт
	
	ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации("ВЫЗОВ sendRegisterDocumentResult");
	
	DOM = ИнтеграцияЕГИСЗСлужебныйСервер.ПостроитьDOM(Параметры);
	ПИ = ИнтеграцияЕГИСЗСерверПовтИсп.РазыменовательПространствРЭМД();
	
	Заголовок = СтрШаблон("<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:%1</MessageID>", Строка(Новый УникальныйИдентификатор));
	
	relatesToMessage = СтрЗаменить(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:relatesToMessage/text()"), "uuid:", "");
	
	Если Не ЗначениеЗаполнено(relatesToMessage) Тогда
		Сообщение = НСтр("ru='Не удалось получить relatesToMessage'");
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело, Заголовок", ТекстXMLCallbackResponse(), Заголовок);
	Иначе
		СтруктураДляЛогов.УИДСообщения = relatesToMessage;
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьВАрхивЛогов(СтруктураДляЛогов);
	КонецЕсли;
	
	ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(СтрШаблон("relatesToMessage = %1", relatesToMessage));
	
	// Статус процесса регистраци ЭМД (success, error).
	Статус = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:status/text()");
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Сообщение = НСтр("ru='Не удалось получить status'");
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело, Заголовок", ТекстXMLCallbackResponse(), Заголовок);
	КонецЕсли;
	
	ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(СтрШаблон("Статус = %1", Статус));
	
	ТекстОшибки = "";
	emdrId = Неопределено;
	Если НРег(Статус) = "success" Тогда
		
		// Присвоенный идентификатор ЭМД.
		emdrId = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:registryItem/ns3:emdrId/text()");
		// Присвоенный идентификатор ЭМД.
		documentVersion = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:registryItem/ns3:documentVersion/text()");
		// Дата регистрации ЭМД.
		registrationDate = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:registryItem/ns3:registrationDate/text()");
		// Хранить до.
		storeTillDate = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:registryItem/ns3:storeTillDate/text()");
		
		ХранитьДо = Неопределено;
		Если ЗначениеЗаполнено(storeTillDate) Тогда
			Попытка
				ХранитьДо = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьДатуИзСтроки(storeTillDate, Истина);
			Исключение
				ХранитьДо = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		ИдентификаторДокумента = ПолучитьИдентификаторДокументаПоУИДСообщения(relatesToMessage);
		
		СтрокиСообщения = Новый Массив;
		СтрокиСообщения.Добавить(СтрШаблон("emdrId = %1",					emdrId));
		СтрокиСообщения.Добавить(СтрШаблон("registrationDate = %1",			registrationDate));
		СтрокиСообщения.Добавить(СтрШаблон("storeTillDate = %1",			storeTillDate));
		СтрокиСообщения.Добавить(СтрШаблон("documentVersion = %1",			documentVersion));
		СтрокиСообщения.Добавить(СтрШаблон("ИдентификаторДокумента = %1",	ИдентификаторДокумента));
		
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(СтрСоединить(СтрокиСообщения, Символы.ПС));
		
		Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			СообщениеРЭМД = Справочники.СообщенияРЭМД.ЗаписатьEmdrId(ИдентификаторДокумента, emdrId, documentVersion, ХранитьДо);
			УдалитьКэшОтветаПоЗапросуПолученияФайла(СообщениеРЭМД);
		КонецЕсли;
		
		// Прочитаем предупреждения, если есть.
		ДеталиОтвета = DOM.ПолучитьЭлементыПоИмени("registrationWarnings");
		
		Для Каждого ДетальОтвета Из ДеталиОтвета Цикл
			ТэгиItem = ДетальОтвета.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item Из ТэгиItem Цикл
				Код = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "code");
				Сообщение = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "message");
				
				Текст = СтрШаблон("Предупреждение = '%1', Код = '%2'", Сообщение, Код);
				ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Текст);
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + Текст;
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли НРег(Статус) = "error" Тогда
		
		ДеталиОтвета = DOM.ПолучитьЭлементыПоИмени("errors");
		
		Для Каждого ДетальОтвета Из ДеталиОтвета Цикл
			ТэгиItem = ДетальОтвета.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item Из ТэгиItem Цикл
				Код = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "code");
				Сообщение = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "message");
				
				Текст = СтрШаблон("Ошибка = '%1', Код = '%2'", Сообщение, Код);
				ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Текст);
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + Текст;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Ошибка = ЗаписатьДанныеОтветаВРегистр(relatesToMessage, ТекущаяДатаСеанса(), emdrId, ТекстОшибки, Неопределено);
	
	Если Ошибка <> Неопределено Тогда
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Ошибка.Сообщение, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело, Заголовок", СоздатьОтветСОшибкой(Ошибка.Код, Ошибка.Сообщение, ТекстXMLCallbackResponse(Истина)), Заголовок);
	КонецЕсли;
	
	КэшОтвета = ИнтеграцияЕГИСЗСерверПовтИсп.КэшОтветаЕГИСЗ(ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьМедицинскуюОрганизацию(), Перечисления.ПодсистемыЕГИСЗ.РЭМД, "registerDocumentResult");
	
	Возврат Новый Структура("Тело, Заголовок, КэшОтвета", ТекстXMLCallbackResponse(), Заголовок, КэшОтвета);
	
КонецФункции

// Обработчик вызова от РЭМД с запросом на получение электронного мед. документа.
Функция getDocumentFile(Параметры, Заголовок, СтруктураДляЛогов) Экспорт
	
	ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации("ВЫЗОВ getDocumentFile");
	
	DOM = ИнтеграцияЕГИСЗСлужебныйСервер.ПостроитьDOM(Параметры);
	ПИ = ИнтеграцияЕГИСЗСерверПовтИсп.РазыменовательПространствРЭМД();
	
	emdrId = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:emdrId/text()");
	
	Заголовок = СтрШаблон("<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:%1</MessageID>", Строка(Новый УникальныйИдентификатор));
	
	РеквизитыОрганизации = ПолучитьOIDИНаменованиеМедицинскойОрганизации();
	
	Если ЗначениеЗаполнено(emdrId) Тогда
		ДанныеФайла = Справочники.СообщенияРЭМД.ПолучитьДанныеДокументаПоEmdrId(emdrId);
	Иначе
		УИДДокумента = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:localUid/text()");
		OIDМО = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:organization/text()");
		Если ЗначениеЗаполнено(УИДДокумента) И РеквизитыОрганизации.КодOIDМедицинскойОрганизации = OIDМО Тогда
			// registerDocument
			ДанныеФайла = Справочники.СообщенияРЭМД.ПолучитьДанныеДокументаПоУИДСообщения(УИДДокумента);
		Иначе
			Сообщение = НСтр("ru='Не удалось получить emdrId'");
			ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
			Возврат Новый Структура("Тело,Заголовок", СоздатьОтветСОшибкой("NO_EMDRID", Сообщение, ТекстXMLGetDocumentFileResponse(Истина)), Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеФайла = Неопределено Тогда
		Сообщение = СтрШаблон(НСтр("ru='Не удалось найти данные о файле по emdrId: %1'"), emdrId);
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело, Заголовок", СоздатьОтветСОшибкой("RECORD_NOTFOUND_FOR_EMDRID", Сообщение, ТекстXMLGetDocumentFileResponse(Истина)), Заголовок);
	Иначе
		СтруктураДляЛогов.УИДСообщения = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьУИДОтправленногоСообщения(ДанныеФайла.Ссылка);
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьВАрхивЛогов(СтруктураДляЛогов);
	КонецЕсли;
	
	КэшОтвета = Неопределено;
	Если ЗначениеЗаполнено(ДанныеФайла.Ссылка) Тогда
		КэшОтвета = ИнтеграцияЕГИСЗСервер.КэшОтветаЕГИСЗ(ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьМедицинскуюОрганизацию(), Перечисления.ПодсистемыЕГИСЗ.РЭМД, "getDocumentFile", ДанныеФайла.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КэшОтвета) Тогда
		ТелоОтвета = ТекстXMLGetDocumentFileResponse();
	Иначе
		ТелоОтвета = ПолучитьТелоОтвета(РеквизитыОрганизации, ДанныеФайла);
	КонецЕсли;
	
	Если ТелоОтвета = Неопределено Тогда
		Сообщение = СтрШаблон(НСтр("ru='Не удалось получить файл по emdrId: %1'"), emdrId);
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело, Заголовок", СоздатьОтветСОшибкой("EMD_NOTFOUND", Сообщение, ТекстXMLGetDocumentFileResponse(Истина)), Заголовок);
	КонецЕсли;
	
	Возврат Новый Структура("Тело, Заголовок, КэшОтвета", ТелоОтвета, Заголовок, КэшОтвета);
	
КонецФункции

Функция ПолучитьТелоОтвета(РеквизитыОрганизации, ДанныеФайла)
	
	Шаблон = ТекстXMLGetDocumentFileResponse();
	
	Данные = Новый Соответствие;
	
	Данные["[ИДЕНТИФИКАТОР_МИС_В_РЭМД]"] = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентифакаторМИС_В_РЭМД();
	Данные["[OID_MO]"] = РеквизитыОрганизации.КодOIDМедицинскойОрганизации;
	Данные["[DOCUMENT_ID]"] = ДанныеФайла.ИдентификаторДокумента;
	
	// Тело документа.
	Попытка
		ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(ДанныеФайла.ОтносительныйПутьКФайлуЭМД);
		ДанныеДокумента = ПолучитьТелоФайлаИКонтрольнуюСумму(ПолныйПуть);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Данные["[ТЕЛО_ДОКУМЕНТА]"] = ДанныеДокумента.ТелоДокументаBase64;
	Данные["[КОНТРОЛЬНАЯ_СУММА_ДОКУМЕНТА]"] = Формат(ДанныеДокумента.КонтрольнаяСумма, "ЧГ=0");
	
	Возврат ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
КонецФункции

// Обработчик вызова от РЭМД в который приходит документ ранее запрошенный из РЭМД через вызов demandContent.
Функция sendDocumentFile(Параметры, Заголовок, СтруктураДляЛогов) Экспорт
	
	ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации("ОПЕРАЦИЯ sendDocumentFile");
	
	DOM = ИнтеграцияЕГИСЗСлужебныйСервер.ПостроитьDOM(Параметры);
	ПИ = ИнтеграцияЕГИСЗСерверПовтИсп.РазыменовательПространствРЭМД();
	
	Заголовок = СтрШаблон("<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:%1</MessageID>", Строка(Новый УникальныйИдентификатор));
	
	// Идентификатор сообщения, в ответ на которое пришел запрос.
	relatesToMessage = СтрЗаменить(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:relatesToMessage/text()"), "uuid:", "");
	
	Если Не ЗначениеЗаполнено(relatesToMessage) Тогда
		Сообщение = НСтр("ru='Не удалось получить relatesToMessage'");
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело, Заголовок", ТекстXMLCallbackResponse(), Заголовок);
	Иначе
		СтруктураДляЛогов.УИДСообщения = relatesToMessage;
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьВАрхивЛогов(СтруктураДляЛогов);
	КонецЕсли;
	
	ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(СтрШаблон("relatesToMessage = %1", relatesToMessage));
	
	// Статус регистраци ЭМД: ожидается success или error.
	Статус = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:status/text()");
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Сообщение = НСтр("ru='Не удалось получить status'");
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок);
	КонецЕсли;
	
	ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(СтрШаблон("Статус = %1", Статус));
	
	ТекстОшибки = "";
	ПутьКФайлу = "";
	Если НРег(Статус) = "success" Тогда
		
		ТелоДокументаB64 = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:file/ns3:data/text()");
		КонтрольнаяСумма = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСтрокуПоXPath(DOM, ПИ, "/*/ns3:file/ns3:checksum/text()");
		
		ДокументДД = Base64Значение(ТелоДокументаB64);
		
		СтрокиСообщения = Новый Массив;
		СтрокиСообщения.Добавить("Файл, размер = " + ДокументДД.Размер());
		СтрокиСообщения.Добавить("КонтрольнаяСумма = " + КонтрольнаяСумма);
		
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(СтрСоединить(СтрокиСообщения, Символы.ПС));
		
	ИначеЕсли НРег(Статус) = "error" Тогда
		
		ДеталиОтвета = DOM.ПолучитьЭлементыПоИмени("errors");
		
		Для Каждого ДетальОтвета Из ДеталиОтвета Цикл
			ТэгиItem = ДетальОтвета.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item Из ТэгиItem Цикл
				Код = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "code");
				Сообщение = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "message");
				
				Текст = СтрШаблон("Ошибка = '%1', Код = '%2'", Сообщение, Код);
				ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Текст);
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + Текст;
			КонецЦикла;
		КонецЦикла;
	
	КонецЕсли;
	
	Клиент = Неопределено;
	
	ИдентификаторРЭМД = ПолучитьИдентификаторРЭМДПоУИДСообщения(relatesToMessage);
	
	МетаданныеДокумента = Неопределено;
	
	Если ЗначениеЗаполнено(ИдентификаторРЭМД) Тогда
		СтруктураМетаданныхДокумента = ПолучитьМетаданныеДокументаИзРЭМД(ИдентификаторРЭМД, "");
		Если ТипЗнч(СтруктураМетаданныхДокумента) = Тип("Структура") Тогда
			МетаданныеДокумента = СтруктураМетаданныхДокумента.Структура;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеДокумента <> Неопределено Тогда
		// Если файл запрошен из карточки клиента
		Клиент = ПолучитьОбъектПоИсходномуЗапросу(relatesToMessage);
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Клиент = ПолучитьКлиентаПоМетаданным(МетаданныеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Файл = ДобавитьФайлКлиенту(Клиент, ДокументДД, МетаданныеДокумента, ИдентификаторРЭМД);
	Исключение
		Файл = Неопределено;
	КонецПопытки;
	
	Ошибка = ЗаписатьДанныеОтветаВРегистр(relatesToMessage, ТекущаяДатаСеанса(), Неопределено, ТекстОшибки, Файл);
	
	Возврат Новый Структура("Тело, Заголовок", ТекстXMLCallbackResponse(), Заголовок);
	
КонецФункции

#Область ИсходящиеВызовыРЭМД

Функция ЗарегистрироватьДокументВРЭМД(СообщениеРЭМД, НастройкиОтправки = Неопределено) Экспорт
	
	СохранитьКэшиОтветовНаЗапросыПолученияФайловПоСообщениям(СообщениеРЭМД);
	
	СтруктураОтвета = ПодготовитьТелоСообщенияРЭМД(СообщениеРЭМД, НастройкиОтправки);
	ДанныеДляОтправки = Новый Структура("СообщениеРЭМД, СтруктураОтвета", СообщениеРЭМД, СтруктураОтвета);
	
	Возврат ОтправкаТелаСообщенияРЭМД(ДанныеДляОтправки);
	
КонецФункции

// Получает данные о документе из РЭМД. Операция веб-сервиса getRegistryItem.
Функция ПолучитьДанныеОДокументеИзРЭМД(ИдентификаторРЭМД, ИдЗапросаТестовыхИспытаний = Неопределено) Экспорт
	
	//Шаблон = ТекстXMLПолучитьДанныеОДокументеИзРЭМД();
	
	//Данные = Новый Соответствие;
	//
	//Данные["[EMDRID]"] = ИдентификаторРЭМД;
	
	//ТелоСообщения = ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	//Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	//
	//Если Не ЗначениеЗаполнено(Адрес) Тогда
	//	//TODO: В СообщенияПользователю
	//	ИмяВебСервиса = "РЭМД";
	//	ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: " + ИмяВебСервиса;
	//КонецЕсли;
	
	СтруктураОтвета = ПолучитьДанныеВызоваПолучитьДанныеОДокументеИзРЭМД(ИдентификаторРЭМД);
	
	//ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
	//	Адрес,
	//	ТелоСообщения,
	//	ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС(),
	//	Строка(Новый УникальныйИдентификатор),
	//	"getRegistryItem"
	//);
	ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
						СтруктураОтвета.Адрес,
						СтруктураОтвета.ТелоСообщения,
						СтруктураОтвета.ИдентификаторМИС_В_ИПС, // Зарегистрированный идентификатор клиента.
						СтруктураОтвета.УИДСообщения, // Уникальный идентификатор сообщения.
						СтруктураОтвета.ТипПакета,
						ИдЗапросаТестовыхИспытаний
					);
	
	ОтветСтруктурой = РазобратьОтветРЭМД(ОтветОтСервера, СтруктураОтвета.Адрес);
	
	Если ОтветСтруктурой.ЕстьОшибка Тогда
		Текст = "Ошибка при получении данных о документе из РЭМД, ИдентификаторРЭМД: "+ ИдентификаторРЭМД;
		Для Каждого Деталь Из ОтветСтруктурой.Детали Цикл
			Текст = Текст + Символы.ПС + СтрШаблон("%1 %2", Деталь.Код, Деталь.Сообщение);
		КонецЦикла;
		
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Возврат РазобратьРезультатЗапросаДанныхДокумента(ОтветОтСервера);
	
КонецФункции

// Выполняет поиск зарегистрированных в РЭМД документов по критериям. Операция веб-сервиса searchRegistryItem.
Функция ПоискДокументовВРЭМД(
			КодOIDМедицинскойОрганизации = Неопределено,
			УидДокумента = Неопределено,
			КодВидаДокумента = Неопределено,
			НомерДокумента = Неопределено,
			ДатаСозданияДокумента = Неопределено,
			УидПациента = Неопределено,
			СНИЛС = Неопределено,
			НомерСтраницы = Неопределено
		) Экспорт
	Результат = Неопределено;
	
	//Шаблон = ТекстXMLПоискДокументовВРЭМД(
	//	ЗначениеЗаполнено(КодOIDМедицинскойОрганизации),
	//	ЗначениеЗаполнено(УидДокумента),
	//	ЗначениеЗаполнено(КодВидаДокумента),
	//	ЗначениеЗаполнено(НомерДокумента),
	//	ЗначениеЗаполнено(ДатаСозданияДокумента),
	//	ЗначениеЗаполнено(УидПациента),
	//	ЗначениеЗаполнено(СНИЛС),
	//	ЗначениеЗаполнено(НомерСтраницы)
	//);
	
	//Данные = Новый Соответствие;
	//
	//Данные["[OID_MO]"] = КодOIDМедицинскойОрганизации;
	//Данные["[DOCUMENT_ID]"] = УидДокумента;
	//Данные["[ВИД_ДОКУМЕНТА]"] = КодВидаДокумента;
	//Данные["[НОМЕР_ДОКУМЕНТА]"] = НомерДокумента;
	//Данные["[ДАТА_ДОКУМЕНТА]"] = ДатаСозданияДокумента;
	//Данные["[PATIENT_ID]"] = УидПациента;
	//Данные["[СНИЛС_НОМЕР]"] = СтрЗаменить(СтрЗаменить(СНИЛС, "-", ""), " ", "");
	//Данные["[НОМЕР_СТРАНИЦЫ]"] = НомерСтраницы;
	
	//ТелоСообщения = ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	//Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	//
	//Если Не ЗначениеЗаполнено(Адрес) Тогда
	//	ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	//КонецЕсли;
	
	СтруктураОтвета = ПолучитьДанныеВызоваПоискДокументовВРЭМД(КодOIDМедицинскойОрганизации,
							УидДокумента,
							КодВидаДокумента,
							НомерДокумента,
							ДатаСозданияДокумента,
							УидПациента,
							СНИЛС,
							НомерСтраницы
						);
	
	//ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
	//	Адрес,
	//	ТелоСообщения,
	//	ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор клиента.
	//	Строка(Новый УникальныйИдентификатор), // Уникальный идентификатор сообщения.
	//	"searchRegistryItem"
	//);
	ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
						СтруктураОтвета.Адрес,
						СтруктураОтвета.ТелоСообщения,
						СтруктураОтвета.ИдентификаторМИС_В_ИПС, // Зарегистрированный идентификатор клиента.
						СтруктураОтвета.УИДСообщения, // Уникальный идентификатор сообщения.
						СтруктураОтвета.ТипПакета
					);
	
	ОтветСтруктурой = РазобратьОтветРЭМД(ОтветОтСервера, СтруктураОтвета.Адрес);
	
	Если ОтветСтруктурой.ЕстьОшибка Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при выполнении поиска документов в РЭМД.");
		Для Каждого Деталь Из ОтветСтруктурой.Детали Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("%1 %2", Деталь.Код, Деталь.Сообщение));
		КонецЦикла;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = РазобратьРезультатПоискаДокументов(ОтветОтСервера.ПолучитьТелоКакСтроку());
	
	Возврат Результат;
	
КонецФункции

// Отправляет запрос на асинхронное получение документа из РЭМД. Операция веб-сервиса demandContent.
Функция ЗапроситьДокументИзРЭМД(emdrId, Объект = Неопределено, ИдЗапросаТестовыхИспытаний = Неопределено) Экспорт
	
	//Шаблон = ТекстXMLЗаявкаНаПолучениеДокументаИзРЭМД();
	//Данные = Новый Соответствие;
	//// уникальное в пределах МО строковое значение.
	//MSG_ID = Строка(Новый УникальныйИдентификатор());
	//Данные["[MSG_ID]"] = MSG_ID;
	//Данные["[EMDRID]"] = emdrId;
	
	//ТелоСообщения = ПодставитьДанныеВШаблон(Шаблон, Данные);
	//Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	//
	//Если Не ЗначениеЗаполнено(Адрес) Тогда
	//	ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	//КонецЕсли;
	СтруктураОтвета = ПолучитьДанныеВызоваЗапроситьДокументИзРЭМД(emdrId, Объект, ИдЗапросаТестовыхИспытаний);
	
	//ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
	//	Адрес,
	//	ТелоСообщения,
	//	ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор клиента.
	//	Строка(Новый УникальныйИдентификатор), // Уникальный идентификатор сообщения.
	//	"demandContent"
	//);
	
	ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
						СтруктураОтвета.Адрес,
						СтруктураОтвета.ТелоСообщения,
						СтруктураОтвета.ИдентификаторМИС_В_ИПС, // Зарегистрированный идентификатор клиента.
						СтруктураОтвета.УИДСообщения, // Уникальный идентификатор сообщения.
						СтруктураОтвета.ТипПакета,
						СтруктураОтвета.MSG_ID
					);
	
	ОтветСтруктурой = РазобратьОтветРЭМД(ОтветОтСервера, СтруктураОтвета.Адрес);
	
	Если ОтветСтруктурой.ЕстьОшибка Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка при отправке заявки на получение документа из РЭМД.'"));
		Для Каждого Деталь Из ОтветСтруктурой.Детали Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("%1 %2", Деталь.Код, Деталь.Сообщение));
		КонецЦикла;
		
		Возврат Неопределено;
	КонецЕсли;
	
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Идентификатор отправленного сообщения: " + MSG_ID_);
	
	//ЗаписатьДанныеОтправленногоСообщенияВРегистр(
	//	MSG_ID, 
	//	ТекущаяДатаСеанса(), 
	//	Неопределено,
	//	emdrId,
	//	Объект
	//);
	//
	//Возврат MSG_ID;
	
	ЗаписатьДанныеОтправленногоСообщенияВРегистр(
		СтруктураОтвета.MSG_ID, 
		ТекущаяДатаСеанса(), 
		Неопределено,
		emdrId,
		Объект
	);
	
	Возврат СтруктураОтвета.MSG_ID;
	
КонецФункции

// Получает метаописание документа из РЭМД. Операция веб-сервиса getMetadata.
Функция ПолучитьМетаданныеДокументаИзРЭМД(emdrId, grantingEmdrId, ИдЗапросаТестовыхИспытаний = Неопределено) Экспорт
	
	//Шаблон = ТекстXMLПолучитьМетаданныеДокументаИзРЭМД();
	//Данные = Новый Соответствие;
	//Данные["[EMDRID]"] = emdrId;
	//Данные["[GRANTING_EMDRID]"] = ?(ЗначениеЗаполнено(grantingEmdrId), grantingEmdrId, "");
	
	//ТелоСообщения = ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	//Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	//
	//Если Не ЗначениеЗаполнено(Адрес) Тогда
	//	ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	//КонецЕсли;
	СтруктураОтвета = ПолучитьДанныеВызоваПолучитьМетаданныеДокументаИзРЭМД(emdrId, grantingEmdrId);
	
	//ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
	//	Адрес,
	//	ТелоСообщения,
	//	ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор клиента.
	//	Строка(Новый УникальныйИдентификатор), // Уникальный идентификатор сообщения.
	//	"getMetadata"
	//);
	
	ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
						СтруктураОтвета.Адрес,
						СтруктураОтвета.ТелоСообщения,
						СтруктураОтвета.ИдентификаторМИС_В_ИПС, // Зарегистрированный идентификатор клиента.
						СтруктураОтвета.УИДСообщения, // Уникальный идентификатор сообщения.
						СтруктураОтвета.ТипПакета,
						ИдЗапросаТестовыхИспытаний
					);
	
	ОтветСтруктурой = РазобратьОтветРЭМД(ОтветОтСервера, СтруктураОтвета.Адрес);
	
	Если ОтветСтруктурой.ЕстьОшибка Тогда
		Текст = "Ошибка при получении метаданных документа из РЭМД, emdrId: "+ emdrId + ", grantingEmdrId: " + grantingEmdrId;
		Для Каждого Деталь Из ОтветСтруктурой.Детали Цикл
			Текст = Текст + Символы.ПС + СтрШаблон("%1 %2", Деталь.Код, Деталь.Сообщение);
		КонецЦикла;
		
		Возврат Текст;
	КонецЕсли;
	
	РезультатСтруктура = РазобратьРезультатЗапросаМетаданныхДокумента(ОтветОтСервера.ПолучитьТелоКакСтроку());
	
	Возврат Новый Структура("Структура, Текст", РезультатСтруктура, ОтветОтСервера.ПолучитьТелоКакСтроку());
	
КонецФункции

#КонецОбласти

#Область ИсходящиеВызовыРЭМДДляКлиента

Функция ПодготовитьТелоСообщенияРЭМД(СообщениеРЭМД, НастройкиОтправки = Неопределено) Экспорт
	
	Если НастройкиОтправки = Неопределено Тогда
		НастройкиОтправки = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьНастройкиОтправкиКлиентСервер();
	КонецЕсли;
	
	// Проверяем, заданы ли настройки отправки для медицинской организации из исходного документа?
	МО = СообщениеРЭМД.Документ.Филиал.Организация.МедицинскаяОрганизация;
	НастройкиОтправкиМО = НастройкиОтправки.Получить(МО);
	
	Если НастройкиОтправкиМО = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеРЭМД, "Документ");
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		ВызватьИсключение СтрШаблон("В элементе ""%1"" не заполнен реквизит Документ", СообщениеРЭМД);
	КонецЕсли;
	ДанныеДляРегистрации = ПолучитьДанныеДляРегистрацииДокументаВРЭМД(СообщениеРЭМД, ДокументСсылка);
	
	Шаблон = ТекстXMLРегистрацияДокументаВРЭМД(
		ЗначениеЗаполнено(ДанныеДляРегистрации.Получить("[PATIENT_ID]")),
		ЗначениеЗаполнено(ДанныеДляРегистрации.Получить("[ОТЧЕСТВО]")),
		ЗначениеЗаполнено(ДанныеДляРегистрации.Получить("[СНИЛС_НОМЕР]")),
		Ложь,
		Ложь,
		ЗначениеЗаполнено(ДанныеДляРегистрации.Получить("[EMDRID_ОБНОВЛЯЕМОГО]")),
		ДанныеДляРегистрации.Получить("[КОЛИЧЕСТВО_ПОДПИСЕЙ]"),
		(ЗначениеЗаполнено(ДанныеДляРегистрации.Получить("[EMDRID_ОБНОВЛЯЕМОГО]")) И ДанныеДляРегистрации.Получить("[ВЕРСИЯ_ОБНОВЛЯЕМОГО]")>1)
	);
	
	Если ДанныеДляРегистрации.Получить("[OID_MO]") = Неопределено Тогда
		
		РеквизитыОрганизации = ПолучитьOIDИНаменованиеМедицинскойОрганизации();
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.КодOIDМедицинскойОрганизации) Тогда
			ВызватьИсключение "Не заполнен ""Код OID Медицинской организации"" у организации: " + РеквизитыОрганизации.Наименование;
		КонецЕсли;
		
		//OID мед. организации.
		ДанныеДляРегистрации["[OID_MO]"] = РеквизитыОрганизации.КодOIDМедицинскойОрганизации;
	КонецЕсли;
	
	Если ДанныеДляРегистрации.Получить("[MSG_ID]") = Неопределено Тогда
		// уникальное в пределах МО строковое значение.
		MSG_ID = Строка(Новый УникальныйИдентификатор());
		ДанныеДляРегистрации["[MSG_ID]"] = MSG_ID;
	Иначе
		MSG_ID = ДанныеДляРегистрации.Получить("[MSG_ID]");
	КонецЕсли;
	
	Если ДанныеДляРегистрации.Получить("ИДЕНТИФИКАТОР_МИС_В_РЭМД") = Неопределено Тогда
		// Идентификатор МИС в РЭМД.
		ДанныеДляРегистрации["[ИДЕНТИФИКАТОР_МИС_В_РЭМД]"] = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентифакаторМИС_В_РЭМД();
	КонецЕсли;
	
	Если ДанныеДляРегистрации.Получить("ИДЕНТИФИКАТОР_МИС_В_ИПС") = Неопределено Тогда
		// Зарегистрированный идентификатор клиента.
		ПолучитьИдентификаторМИС_В_ИПС = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС();
	Иначе
		ПолучитьИдентификаторМИС_В_ИПС = ДанныеДляРегистрации.Свойство("ИДЕНТИФИКАТОР_МИС_В_ИПС");
	КонецЕсли;
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, ДанныеДляРегистрации);
	
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ИмяВебСервиса= "РЭМД";
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: " + ИмяВебСервиса;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("Адрес, ТелоСообщения, ИдентификаторМИС_В_ИПС, УИДСообщения, MSG_ID, ДанныеДляРегистрации",
										Адрес, ТелоСообщения, ПолучитьИдентификаторМИС_В_ИПС, Строка(Новый УникальныйИдентификатор), MSG_ID, ДанныеДляРегистрации);
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

// Возвращает соответствие с данными для заполнения шаблона сообщения для регистрации документа в РЭМД.
Функция ПолучитьДанныеДляРегистрацииДокументаВРЭМД(СообщениеРЭМД, ДокументСсылка) Экспорт
	
	Шаблон = Новый Соответствие();
	
	Документ = СообщениеРЭМД.Документ;
	
	Шаблон["[DOCUMENT_ID]"]			= СообщениеРЭМД.ИдентификаторДокумента;
	//Шаблон["[DOCUMENT_ID]"]			= ?(ЗначениеЗаполнено(СообщениеРЭМД.ИдентификаторШаблонаЭМД), СообщениеРЭМД.ИдентификаторШаблонаЭМД, СообщениеРЭМД.ИдентификаторДокумента);
	//Шаблон["[НОМЕР_ДОКУМЕНТА]"]		= СообщениеРЭМД.НомерДокумента; // СОМНЕНИЕ
	Шаблон["[НОМЕР_ДОКУМЕНТА]"]		= ?(ЗначениеЗаполнено(СообщениеРЭМД.ИдентификаторШаблонаЭМД), СообщениеРЭМД.ИдентификаторШаблонаЭМД, СообщениеРЭМД.НомерДокумента); // СОМНЕНИЕ
	
	Шаблон["[ВИД_ДОКУМЕНТА]"]		= СообщениеРЭМД.ВидДокумента.OIDКлассификатораМинздрава;
	Шаблон["[ДАТА_ДОКУМЕНТА]"]		= ИнтеграцияЕГИСЗСервер.ПредставлениеЛокальнойДатыСоСмещением(Документ.Дата, "ДФ=гггг-ММ-ддTЧЧ:мм:сс.000", "ДФ=HH:mm");
	Шаблон["[ОПИСАНИЕ]"]			= СообщениеРЭМД.ВидДокумента;//ДанныеДокумента.Описание;
	
	Шаблон["[EMDRID_ОБНОВЛЯЕМОГО]"] = СообщениеРЭМД.ИдентификаторРЭМД;
	Шаблон["[ВЕРСИЯ_ОБНОВЛЯЕМОГО]"] = СообщениеРЭМД.НомерВерсии;
	Шаблон["[MSG_ID]"]				= Строка(СообщениеРЭМД.УникальныйИдентификатор());
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(ДокументСсылка);
	
	Если ИмяТипаДокумента = "Документ.Прием"
		Или ИмяТипаДокумента = "Документ.Рецепт"
	Тогда
		Врач = ДокументСсылка.Врач;
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		Врач = ДокументСсылка.ПредседательМедКомиссии;
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		Врач = ДокументСсылка.ПредседательКомиссии;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Врач.Подразделение.ПодразделениеМинздрава) Тогда
		Шаблон["[DEP_OID]"]		= Врач.Подразделение.ПодразделениеМинздрава.OIDСтруктурногоПодразделения;
		Шаблон["[DEP_NAME]"]	= Врач.Подразделение.ПодразделениеМинздрава.ПолноеНаименование;
	Иначе
		Если Не ЗначениеЗаполнено(Врач.Подразделение) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='У врача %1 не заполнено подразделение'"), Врач);
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru='У подразделения врача %1 не заполнено подразделение минздрава'"), Врач.Подразделение);
		КонецЕсли;
	КонецЕсли;
	
	// Клиент
	Если ЗначениеЗаполнено(Документ.Клиент) Тогда
		Клиент = Документ.Клиент;
		СНИЛС = СтрЗаменить(СтрЗаменить(Клиент.СНИЛС, "-", ""), " ", "");
		
		Шаблон["[PATIENT_ID]"]			= ПолучитьИдентификаторПациентаДляИЭМК(Клиент);
		Шаблон["[ФАМИЛИЯ]"]				= ЭкранироватьЗначение(Клиент.Фамилия);
		Шаблон["[ИМЯ]"]					= ЭкранироватьЗначение(Клиент.Имя);
		Шаблон["[ОТЧЕСТВО]"]			= ЭкранироватьЗначение(Клиент.Отчество);
		Шаблон["[ДАТАРОЖДЕНИЯ]"]		= Формат(Клиент.ДатаРождения, "ДФ=yyyy-MM-dd");
		Шаблон["[ПОЛ]"]					= ПолПациентаВКодРЭМД(Клиент.Пол);
		Шаблон["[СНИЛС_НОМЕР]"]			= СНИЛС;
		Шаблон["[ЕДИНЫЙ_НОМЕР_ПОЛИСА]"]	= "";
	КонецЕсли;
	
	//Сотрудники и их подписи.
	Шаблон["[КОЛИЧЕСТВО_ПОДПИСЕЙ]"]		= 0;
	Шаблон["[ПОДПИСЬ_МО]"]				= "";
	
	Если ЗначениеЗаполнено(СообщениеРЭМД) Тогда
		
		КоличествоПодписей = 0;
		
		Номер = 1;
		Для Каждого СтрокаПодписиСообщения Из СообщениеРЭМД.ЭлектронныеПодписиЭМД Цикл
		
			Если СтрокаПодписиСообщения.ЭтоПодписьМО = Истина Тогда
				// Это подпись мед. организации, а не сотрудника.
				
				Если ЗначениеЗаполнено(СтрокаПодписиСообщения.ПутьКФайлуПодписиЭМД) Тогда
					
					ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(СтрокаПодписиСообщения.ПутьКФайлуПодписиЭМД);
					
					ФайлПодписи = ПолучитьТелоФайлаИКонтрольнуюСумму(ПолныйПуть);
					
					Шаблон["[ПОДПИСЬ_МО]"]						= ФайлПодписи.ТелоДокументаBase64;
					Шаблон["[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_МО]"]	= Формат(ФайлПодписи.КонтрольнаяСумма,"ЧГ=0");
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Сотрудник = СтрокаПодписиСообщения.Сотрудник;
			
			КоличествоПодписей = КоличествоПодписей + 1;
			
			Шаблон[СтрШаблон("[ИДЕНТИФИКАТОР_СОТРУДНИКА_%1]", Номер)] = ПолучитьИдентификаторСотрудникаДляРЭМД(Сотрудник);
			
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				//Если Не ЗначениеЗаполнено(строкаТЧ.Роль) Тогда
				//	ВызватьИсключение СтрШаблон("Не удалось определить роль сотрудника при подписании по виду документа ""%1"" и коду должности ""%2"".", ДанныеДокумента.ВидДокумента, КодДолжности);
				//КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПодписиСообщения.ДолжностьМинздрава) Тогда
					КодМинздраваДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодписиСообщения.ДолжностьМинздрава, "УИДЕГИСЗ");
				ИначеЕсли ЗначениеЗаполнено(Сотрудник.Должность) И ЗначениеЗаполнено(Сотрудник.Должность.ДолжностьМинздрава) Тогда
					// Для поддержки 48.26 и ниже, где не было реквизита таб части ДолжностьМинздрава
					КодМинздраваДолжности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник.Должность.ДолжностьМинздрава, "УИДЕГИСЗ");
				Иначе
					КодМинздраваДолжности = "";
				КонецЕсли;
				
				КодМинздраваСпециализации = "";
				Если ПравилоПодписиТребуетСпециализацию(СтрокаПодписиСообщения.РольРЭМД, СообщениеРЭМД.ВидДокумента) Тогда
					Если ЗначениеЗаполнено(СтрокаПодписиСообщения.СпециальностьМинздрава) Тогда
						КодМинздраваСпециализации = СтрокаПодписиСообщения.СпециальностьМинздрава.УИДЕГИСЗ;
					Иначе
						СпециализацияФРМР = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьСпециализациюФРМР(Сотрудник);
						Если ЗначениеЗаполнено(СпециализацияФРМР) Тогда
							КодМинздраваСпециализации = СпециализацияФРМР.УИДЕГИСЗ;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаПодписиСообщения.РольРЭМД) Тогда
					Роль = СтрокаПодписиСообщения.РольРЭМД;
				Иначе
					Роль = ПолучитьРольСотрудникаПриПодписании(СообщениеРЭМД.ВидДокумента.OIDКлассификатораМинздрава, КодМинздраваДолжности);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Роль) Тогда
					ВызватьИсключение СтрШаблон("Не удалось определить роль сотрудника при подписании по виду документа ""%1"" и коду должности ""%2"".", СообщениеРЭМД.ВидДокумента, КодМинздраваДолжности);
				КонецЕсли;
				
				ДолжностьФРМР = ИнтеграцияЕГИСЗСервер.ПолучитьЭлементКлассификатораПоЗначениюАтрибута("federal_code", КодМинздраваДолжности, Перечисления.ВидыКлассификаторовМинЗдрава.ФРМРДолжностиМедицинскогоПерсонала);
				Если Не (ЗначениеЗаполнено(КодМинздраваДолжности)
						И ЗначениеЗаполнено(ДолжностьФРМР)
						И ЗначениеЗаполнено(ДолжностьФРМР.УИДЕГИСЗ))
				Тогда
					ВызватьИсключение "Не удалось определить должность сотрудника по классификатору должностей ФРМР.";
				КонецЕсли;
				
				НомерТелефона = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Сотрудник, Перечисления.ТипыКонтактнойИнформации.Телефон,,Истина);
				
				Попытка
					НормализованныйНомерТелефона = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(НомерТелефона, Ложь);
				Исключение
					НормализованныйНомерТелефона = "";
				КонецПопытки;
				
				СНИЛС = СтрЗаменить(СтрЗаменить(Сотрудник.СНИЛС, "-", ""), " ", "");
				
				Шаблон[СтрШаблон("[РОЛЬ_СОТРУДНИКА_%1]",			Номер)] = ЭкранироватьЗначение(Роль.Код);
				Шаблон[СтрШаблон("[ФАМИЛИЯ_СОТРУДНИКА_%1]",			Номер)] = ЭкранироватьЗначение(Сотрудник.Фамилия);
				Шаблон[СтрШаблон("[ИМЯ_СОТРУДНИКА_%1]",				Номер)] = ЭкранироватьЗначение(Сотрудник.Имя);
				Шаблон[СтрШаблон("[ОТЧЕСТВО_СОТРУДНИКА_%1]",		Номер)] = ЭкранироватьЗначение(Сотрудник.Отчество);
				Шаблон[СтрШаблон("[ДАТАРОЖДЕНИЯ_СОТРУДНИКА_%1]",	Номер)] = Формат(Сотрудник.ДатаРождения, "ДФ=yyyy-MM-dd");
				Шаблон[СтрШаблон("[СНИЛС_СОТРУДНИКА_%1]",			Номер)] = СНИЛС;
				Шаблон[СтрШаблон("[КОД_ДОЛЖНОСТИ_%1]",				Номер)] = ДолжностьФРМР.УИДЕГИСЗ; // Указывается должность по справочнику 1.2.643.5.1.13.13.99.2.181 (ФРМР. Должности медицинского персонала).
				Шаблон[СтрШаблон("[СПЕЦИАЛИЗАЦИЯ_СОТРУДНИКА_%1]",	Номер)] = КодМинздраваСпециализации; // Указывается специализация по справочнику  (ФРМР. ).
				Шаблон[СтрШаблон("[EMAIL_СОТРУДНИКА_%1]",			Номер)] = КонтактнаяИнформацияСервер.ПолучитьEMAILАдрес(Сотрудник);
				Шаблон[СтрШаблон("[ТЕЛЕФОН_СОТРУДНИКА_%1]",			Номер)] = НормализованныйНомерТелефона;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПодписиСообщения.ПутьКФайлуПодписиЭМД) Тогда
				
				ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(СтрокаПодписиСообщения.ПутьКФайлуПодписиЭМД);
				
				ФайлПодписи = ПолучитьТелоФайлаИКонтрольнуюСумму(ПолныйПуть);
				
				Шаблон[СтрШаблон("[ПОДПИСЬ_%1]", Номер)] = ФайлПодписи.ТелоДокументаBase64;
				Шаблон[СтрШаблон("[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_%1]", Номер)] = Формат(ФайлПодписи.КонтрольнаяСумма,"ЧГ=0");
			КонецЕсли;
			
			Номер = Номер + 1;
		КонецЦикла;
		Шаблон["[КОЛИЧЕСТВО_ПОДПИСЕЙ]"] = КоличествоПодписей;
		
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

// Преобразует относительный путь в полный.
Функция ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Путь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Файл = Новый Файл(Путь);
	
	Если Не Файл.Существует() Тогда
		ПутьКХранилищу = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПутьКАрхивуРЭМД();
		
		Если Не ЗначениеЗаполнено(ПутьКХранилищу) Тогда
			ВызватьИсключение "Не заполнен путь к хранилищу файлов ЭМД.";
		КонецЕсли;
		
		Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКХранилищу) + Путь;
	Иначе
		// Теоретически путь уже может быть полным, если документ отладочный.
		Возврат Путь;
	КонецЕсли;
	
КонецФункции

// Возвращает тело документа и контрольную сумму для отправки в РЭМД.
Функция ПолучитьТелоФайлаИКонтрольнуюСумму(Путь) Экспорт
	
	ДД = Новый ДвоичныеДанные(Путь);
	РасчетКонтрольнойСуммы = Новый ХешированиеДанных(ХешФункция.CRC32);
	РасчетКонтрольнойСуммы.Добавить(ДД);
	
	Возврат Новый Структура ("ТелоДокументаBase64, КонтрольнаяСумма", Base64Строка(ДД), РасчетКонтрольнойСуммы.ХешСумма);
	
КонецФункции

// Возвращает идентификатор и номер документа для регистрации в РЭМД.
Функция ПолучитьИдентификаторИНомерДокументаДляРЭМД(Документ, НовыйИдентификатор = Ложь, ИдентификаторШаблонаЭМД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерДокумента = Строка(Документ.УникальныйИдентификатор());
	
	ИдентификаторРЭМД = Неопределено;
	НомерВерсии = Неопределено;
	
	Если НовыйИдентификатор = Ложь Тогда
		// Попробуем найти ранее созданный идентификатор и ИдентификаторРЭМД документа.
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
			|	СообщенияРЭМД.ИдентификаторРЭМД КАК ИдентификаторРЭМД,
			|	СообщенияРЭМД.НомерВерсии КАК НомерВерсии
			|ИЗ
			|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
			|ГДЕ
			|	СообщенияРЭМД.НомерДокумента = &НомерДокумента
			|	И СообщенияРЭМД.ПометкаУдаления = ЛОЖЬ
			|	И &ИдентификаторШаблонаЭМД";
			
		Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
		
		Если ЗначениеЗаполнено(ИдентификаторШаблонаЭМД) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторШаблонаЭМД", "СообщенияРЭМД.ИдентификаторШаблонаЭМД = &ИдентификаторШаблонаЭМД");
			Запрос.УстановитьПараметр("ИдентификаторШаблонаЭМД", ИдентификаторШаблонаЭМД);
		Иначе
			Запрос.УстановитьПараметр("ИдентификаторШаблонаЭМД", Истина);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если НовыйИдентификатор = Ложь Тогда
				ИдентификаторДокумента = Выборка.ИдентификаторДокумента;
			Иначе
				ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			ИдентификаторРЭМД = Выборка.ИдентификаторРЭМД;
			НомерВерсии = Выборка.НомерВерсии;
		Иначе
			// В хранилище записывается новый документ, присвоем ему новый идентификатор.
			ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		// В хранилище записывается новый документ, присвоем ему новый идентификатор.
		ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Результат = Новый Структура("НомерДокумента, ИдентификаторДокумента, ИдентификаторРЭМД, НомерВерсии",
		НомерДокумента, ИдентификаторДокумента, ИдентификаторРЭМД, НомерВерсии
	);
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьФайлыДляПодписания(МедицинскийДокумент, ДолжностиМЗ, ВыбранныйСертификат, ТекстыОшибок) Экспорт
	
	ВрачДокумента = Неопределено;
	ДокументПриема = Ложь;
	ДокументПМО = Ложь;
	ДокументОбъект = МедицинскийДокумент.ПолучитьОбъект();
	
	СотрудникУстановившийПодпись = ПодходящийСотрудникПользователяДляДокумента(ВыбранныйСертификат.Пользователь, МедицинскийДокумент, ДокументОбъект.Филиал);
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		ВрачДокумента = МедицинскийДокумент.Врач;
		ДокументПриема = Истина;
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		ВрачДокумента = МедицинскийДокумент.ПредседательМедКомиссии;
		ДокументПМО = Истина;
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		ВрачДокумента = МедицинскийДокумент.ПредседательКомиссии;
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		ВрачДокумента = МедицинскийДокумент.Врач;
		ДокументРецепт = Истина;
	КонецЕсли;
	
	Если ЭЦП_УМЦ_Сервер.ТекущийПользовательЯвляетсяВрачомДокумента(ВрачДокумента)
		И МедицинскийДокумент.РолиИПодписиЭМД.Количество() = 0
	Тогда
		// Сформируем файлы ЭМД по актуальной информации из шаблонов Приема.
		СформированныеФайлыЭМД = Справочники.СообщенияРЭМД.СформироватьФайлыЭМДПоМД(МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностиМЗ, ТекстыОшибок);
		
		Если СформированныеФайлыЭМД.Количество() = 0 Тогда
			ТекстыОшибок.Добавить(НСтр("ru='В документе отсутствуют подписываемые виды ЭМД или их формирование не удалось.'"));
			Возврат;
		КонецЕсли;
		
		Если ДокументПриема
			Или ДокументПМО
			Или ДокументРецепт
		Тогда
			ДокументОбъект.ЭМД.Очистить();
		КонецЕсли;
		
		Для Каждого СтрокаЭМД Из СформированныеФайлыЭМД Цикл
			
			Если ДокументПриема Тогда
				СтрокаТабЭМД = ДокументОбъект.ЭМД.Добавить();
				СтрокаТабЭМД.УИД				= Новый УникальныйИдентификатор();
				СтрокаТабЭМД.УИД_Шаблона		= СтрокаЭМД.УИД_Шаблона;
				СтрокаТабЭМД.ШаблонЭМД			= СтрокаЭМД.ШаблонПриема;
				СтрокаТабЭМД.ВидДокументаЭМД	= СтрокаЭМД.ВидДокументаШаблона;
				СтрокаТабЭМД.ПутьКФайлуВАрхиве	= СтрокаЭМД.ОтносительныйПуть;
				
				ДанныеСообщенияРЭМД = Справочники.СообщенияРЭМД.ПолучитьДанныеДокументаПоУИД(Строка(СтрокаЭМД.УИД_Шаблона));
				Если ДанныеСообщенияРЭМД <> Неопределено Тогда
					СтрокаТабЭМД.СообщениеРЭМД	= ДанныеСообщенияРЭМД.Ссылка;
				КонецЕсли;
			ИначеЕсли ДокументПМО Тогда
				
				СтрокаТабЭМД = ДокументОбъект.ЭМД.Добавить();
				СтрокаТабЭМД.УИД				 = Новый УникальныйИдентификатор();
				СтрокаТабЭМД.УИД_Шаблона		 = СтрокаЭМД.УИД_Шаблона;
				СтрокаТабЭМД.ШаблонЭМД			 = СтрокаЭМД.ШаблонПриема;
				СтрокаТабЭМД.ВидДокументаЭМД	 = СтрокаЭМД.ВидДокументаШаблона;
				СтрокаТабЭМД.ПутьКФайлуВАрхиве	 = СтрокаЭМД.ОтносительныйПуть;
				СтрокаТабЭМД.ПриказВредныйФактор = ИнтеграцияЕГИСЗВызовСервера.ПолучитьПриказВредныйФакторПоУИД(МедицинскийДокумент, СтрокаЭМД.УИД_Шаблона);
				
				ДанныеСообщенияРЭМД = Справочники.СообщенияРЭМД.ПолучитьДанныеДокументаПоУИДиНомеруДокумента(Строка(СтрокаЭМД.УИД_Шаблона), Строка(ДокументОбъект.Ссылка.УникальныйИдентификатор()));
				Если ДанныеСообщенияРЭМД <> Неопределено Тогда
					СтрокаТабЭМД.СообщениеРЭМД	= ДанныеСообщенияРЭМД.Ссылка;
				КонецЕсли;
				
			ИначеЕсли ДокументРецепт Тогда
				
				СтрокаТабЭМД = ДокументОбъект.ЭМД.Добавить();
				СтрокаТабЭМД.УИД				 = Новый УникальныйИдентификатор();
				СтрокаТабЭМД.ВидДокументаЭМД	 = СтрокаЭМД.ВидДокументаШаблона;
				СтрокаТабЭМД.ПутьКФайлуВАрхиве	 = СтрокаЭМД.ОтносительныйПуть;
				СтрокаТабЭМД.УИД_Шаблона		= ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
				
				ДанныеСообщенияРЭМД = Справочники.СообщенияРЭМД.ПолучитьДанныеДокументаПоУИДиНомеруДокумента(Строка(СтрокаТабЭМД.УИД_Шаблона), Строка(ДокументОбъект.Ссылка.УникальныйИдентификатор()));
				Если ДанныеСообщенияРЭМД <> Неопределено Тогда
					СтрокаТабЭМД.СообщениеРЭМД	= ДанныеСообщенияРЭМД.Ссылка;
				КонецЕсли;
				
			Иначе
				ДокументОбъект.ПутьКФайлуВАрхиве = СтрокаЭМД.ОтносительныйПуть;
			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПодходящийСотрудникПользователяДляДокумента(Пользователь, МедицинскийДокумент, Знач Филиал = Неопределено)
	
	Если Филиал = Неопределено Тогда
		Филиал = МедицинскийДокумент.Филиал;
	КонецЕсли;
	
	СотрудникиПользователя = ОтраслевыеДополнения.СотрудникиПользователя(Пользователь);
	
	// Если это автор документа, берём его
	АвторДокумента = МедицинскаяДеятельность.АвторДокумента(МедицинскийДокумент);
	Если ЗначениеЗаполнено(АвторДокумента)
		И СотрудникиПользователя.Найти(АвторДокумента) <> Неопределено
	Тогда
		Возврат АвторДокумента;
	КонецЕсли;
	
	// Наиболее подходящий документу сотрудник
	Возврат ОтраслевыеДополнения.СотрудникПользователяПоФилиалу(Пользователь, Филиал);
	
КонецФункции

Процедура ПроверитьНаличиеПроблемныхПараметровВДокументеПослеЗаписи(Документ, ПараметрыЗаписи) Экспорт
	
	Если Не ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И Документ.Дата >= ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьДатуНачалаОбменаИнформациейСРЭМД()
	Тогда
		ТекстПредупрежденияПоПроблемнымПараметрам = ИнтеграцияЕГИСЗ_СЭМД.СформироватьТекстПредупрежденияПоПроблемнымПараметрам(Документ);
		Если ЗначениеЗаполнено(ТекстПредупрежденияПоПроблемнымПараметрам) Тогда
			ПараметрыЗаписи.Вставить("ТекстПредупреждения", ТекстПредупрежденияПоПроблемнымПараметрам);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяШаблонРЭМД(НоменклатураДокументаПМО) Экспорт
	
	Возврат ЗначениеЗаполнено(НоменклатураДокументаПМО.ВредныйФакторСправки.ШаблонОсмотраСправки.ВидДокумента);
	
КонецФункции

Функция ПолучитьДДСформрованныхЭМД(Документ, УникальныйИдентификаторФормы) Экспорт
	
	ДвоичныеДанныеЭМД = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Документ.РолиИПодписиЭМД Цикл
		
		ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Документ);
		
		Если ИмяТипаДокумента = "Документ.Прием" 
			Или ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра"
			Или ИмяТипаДокумента = "Документ.Рецепт"
		Тогда
			ЭМД = Документ.ЭМД.Найти(СтрокаТЧ.УИД_ЭМД, "УИД");
		ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" // Версия КОРП
		Тогда
			ЭМД = Документ;
		КонецЕсли;
		
		Попытка
			ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(ЭМД.ПутьКФайлуВАрхиве);
			СсылкаНаДвоичныеДанные = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолныйПуть), УникальныйИдентификаторФормы);
		Исключение
			СсылкаНаДвоичныеДанные = ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеИзСтроки(""), УникальныйИдентификаторФормы);
		КонецПопытки;
		ДвоичныеДанныеЭМД.Вставить(СтрокаТЧ.УИД_ЭЦП, СсылкаНаДвоичныеДанные);
		Если ЗначениеЗаполнено(ЭМД.СообщениеРЭМД) Тогда
			ДополнитьПодписямиПоСообщению(СтрокаТЧ.УИД_ЭЦП, ЭМД.СообщениеРЭМД.ЭлектронныеПодписиЭМД, ДвоичныеДанныеЭМД, СсылкаНаДвоичныеДанные);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДвоичныеДанныеЭМД;
	
КонецФункции

Процедура ДополнитьПодписямиПоСообщению(УИД_ЭЦП, ЭПСообщения, ДвоичныеДанныеЭМД, СсылкаНаДвоичныеДанные)
	
	Для Каждого ЭП Из ЭПСообщения Цикл
		Если ЭП.УИД_ЭЦП = УИД_ЭЦП
			Или Не ЗначениеЗаполнено(ЭП.УИД_ЭЦП)
		Тогда
			Продолжить;
		КонецЕсли;
		ДвоичныеДанныеЭМД.Вставить(ЭП.УИД_ЭЦП, СсылкаНаДвоичныеДанные);
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправкаТелаСообщенияРЭМД(ДанныеСообщения) Экспорт
	
	Данные = ДанныеСообщения.СтруктураОтвета;
	
	Если Данные = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Не заданы настройки отправки для медицинской организации по филиалу документа ""%1""", ДанныеСообщения.СообщениеРЭМД.Документ.Филиал);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
		Данные.Адрес,
		Данные.ТелоСообщения,
		Данные.ИдентификаторМИС_В_ИПС, // Зарегистрированный идентификатор клиента.
		Данные.УИДСообщения, // Уникальный идентификатор сообщения.
		"registerDocument",
		Данные.MSG_ID
	);
	
	ОтветСтруктурой = РазобратьОтветРЭМД(ОтветОтСервера, Данные.Адрес);
	
	Попытка
		Если ЗначениеЗаполнено(Данные.MSG_ID)
			И ЗначениеЗаполнено(Данные.ДанныеДляРегистрации.Получить("[DOCUMENT_ID]"))
		Тогда
			ТекстОшибки = Неопределено;
			Если ЗначениеЗаполнено(ОтветСтруктурой.ТекстОшибки) Тогда
				ТекстОшибки = ОтветСтруктурой.ТекстОшибки;
			КонецЕсли;
			
			ЗаписатьДанныеОтправленногоСообщенияВРегистр(Данные.MSG_ID, ТекущаяДатаСеанса(), Данные.ДанныеДляРегистрации.Получить("[DOCUMENT_ID]"), , , ТекстОшибки);
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если ОтветСтруктурой.ЕстьОшибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при регистрации документа в РЭМД.");
		Для Каждого Деталь Из ОтветСтруктурой.Детали Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("%1 %2", Деталь.Код, Деталь.Сообщение));
		КонецЦикла;
		
		Возврат ОтветСтруктурой;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Идентификатор отправленного сообщения: " + Данные.MSG_ID);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДляОбработкиИсходящиеВызовыРЭМД() Экспорт
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.УИДВызова КАК УИДВызова,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.Отправить КАК Отправить,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.Адрес КАК Адрес,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.ТелоСообщения КАК ТелоСообщения,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.УИДСообщения КАК УИДСообщения,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.ТипПакета КАК ТипПакета,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.Ответ КАК Ответ,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.ТекстОшибки КАК ТекстОшибки,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.ДатаСоздания КАК ДатаСоздания,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.ДатаОтвета КАК ДатаОтвета,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.Ответственный КАК Ответственный,
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.ПолучитьТекстОтвета КАК ПолучитьТекстОтвета
		|ИЗ
		|	РегистрСведений.ИнтеграцияЕГИСЗОчередьИсходящихВызовов КАК ИнтеграцияЕГИСЗОчередьИсходящихВызовов
		|ГДЕ
		|	ИнтеграцияЕГИСЗОчередьИсходящихВызовов.Отправить
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выгрузка = РезультатЗапроса.Выгрузить();
		Результат = Общегоназначения.ТаблицаЗначенийВМассив(Выгрузка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьРезультатОтправкиИсходящегоВызова(Вызов) Экспорт
	
	//	Получить менеджер записи, снять галку отправку и заполнить измененные значения.
	
КонецПроцедуры

Функция СформироватьТелоСообщенияПолучитьДанныеОДокументеИзРЭМД(ИдентификаторРЭМД, ПолучитьТекстОтвета = Ложь) Экспорт
	
	Шаблон = ТекстXMLПолучитьДанныеОДокументеИзРЭМД();
	
	Данные = Новый Соответствие;
	Данные["[EMDRID]"] = ИдентификаторРЭМД;
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		//TODO: В СообщенияПользователю
		ИмяВебСервиса = "РЭМД";
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: " + ИмяВебСервиса;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("Адрес, ТелоСообщения, ИдентификаторМИС_В_ИПС, УИДСообщения, ИдентификаторРЭМД",
	Адрес, ТелоСообщения, ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС(), Строка(Новый УникальныйИдентификатор), ИдентификаторРЭМД);
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура СохранитьОтветНаИсходящийВызов(ДанныеВызова) Экспорт
	
	Если Не (ТипЗнч(ДанныеВызова) = Тип("Структура") Или ДанныеВызова.Свойства("УИДВызова")) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходящийВызовЗапись = РегистрыСведений.ИнтеграцияЕГИСЗОчередьИсходящихВызовов.СоздатьМенеджерЗаписи();
	ИсходящийВызовЗапись.УИДВызова = ДанныеВызова.УИДВызова;
	ИсходящийВызовЗапись.Прочитать();
	
	Если ИсходящийВызовЗапись.Выбран() Тогда
		ИсходящийВызовЗапись.ВыполняетсяОтправка = Ложь;
		
		ИсходящийВызовЗапись.Ответ		= ДанныеВызова.Ответ;
		ИсходящийВызовЗапись.ДатаОтвета = ДанныеВызова.ДатаОтвета;
		ИсходящийВызовЗапись.Отправить	= ДанныеВызова.Отправить;
		ИсходящийВызовЗапись.Записать(Истина);
	Иначе
		//	Запись не найдена?
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаблокироватьЗаписьИсходящегоВызова(ДанныеВызова) Экспорт
	
	//	Получилось ли заблокировать запись для редактирования.
	Результат = Ложь;
	
	ИсходящийВызовЗапись = РегистрыСведений.ИнтеграцияЕГИСЗОчередьИсходящихВызовов.СоздатьМенеджерЗаписи();
	ИсходящийВызовЗапись.УИДВызова = ДанныеВызова.УИДВызова;
	ИсходящийВызовЗапись.Прочитать();
	
	Если ИсходящийВызовЗапись.Выбран() Тогда
		Если НЕ ИсходящийВызовЗапись.ВыполняетсяОтправка Тогда
			ИсходящийВызовЗапись.ВыполняетсяОтправка = Истина;
			Попытка
				ИсходящийВызовЗапись.Записать(Истина);
				Результат = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		// Запись не найдена?
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьИсходящийВызовРЭМД(ДанныеВызова) Экспорт
	
	ИсходящийВызовЗапись = РегистрыСведений.ИнтеграцияЕГИСЗОчередьИсходящихВызовов.СоздатьМенеджерЗаписи();
	ИсходящийВызовЗапись.УИДВызова = Новый УникальныйИдентификатор;
	ИсходящийВызовЗапись.Прочитать();
	
	ИсходящийВызовЗапись.Адрес					= ДанныеВызова.Адрес;
	ИсходящийВызовЗапись.ТелоСообщения			= ДанныеВызова.ТелоСообщения;
	ИсходящийВызовЗапись.ИдентификаторКлиента	= ДанныеВызова.ИдентификаторКлиента;
	ИсходящийВызовЗапись.УИДСообщения			= ДанныеВызова.УИДСообщения;
	ИсходящийВызовЗапись.ТипПакета				= ДанныеВызова.ТипПакета;
	ИсходящийВызовЗапись.ПолучитьТекстОтвета	= ДанныеВызова.ПолучитьТекстОтвета;
	ИсходящийВызовЗапись.emdrId					= ДанныеВызова.emdrId;
	ИсходящийВызовЗапись.MSG_ID					= ДанныеВызова.MSG_ID;
	ИсходящийВызовЗапись.Объект					= ДанныеВызова.Объект;
	ИсходящийВызовЗапись.ДатаСоздания			= ТекущаяДатаСеанса();
	
	ИсходящийВызовЗапись.Записать(Истина);
	
	Возврат ИсходящийВызовЗапись.УИДВызова;
	
КонецФункции

Функция ПолучитьСтруктуруИсходящегоВызова()
	
	Результат = Новый Структура();
	Результат.Вставить("Адрес",						""																);
	Результат.Вставить("ТелоСообщения",				""																);
	Результат.Вставить("ИдентификаторМИС_В_ИПС",	ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС()	);
	Результат.Вставить("УИДСообщения",				Строка(Новый УникальныйИдентификатор)							);
	Результат.Вставить("ТипПакета",					""																);
	Результат.Вставить("ПолучитьТекстОтвета",		Ложь															);
	Результат.Вставить("emdrId",					Неопределено													);
	Результат.Вставить("MSG_ID",					Неопределено													);
	Результат.Вставить("Объект",					Справочники.Клиенты.ПустаяСсылка()								);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьВызовПолучитьДанныеОДокументеИзРЭМД(ИдентификаторРЭМД, ПолучитьТекстОтвета = Ложь) Экспорт
	
	СтруктураОтвета = ПолучитьДанныеВызоваПолучитьДанныеОДокументеИзРЭМД(ИдентификаторРЭМД, ПолучитьТекстОтвета);
	УИДВызова = СоздатьИсходящийВызовРЭМД(СтруктураОтвета);
	
	Возврат УИДВызова;
	
КонецФункции

Функция ПолучитьДанныеВызоваПолучитьДанныеОДокументеИзРЭМД(ИдентификаторРЭМД, ПолучитьТекстОтвета = Ложь) Экспорт
	
	Шаблон = ТекстXMLПолучитьДанныеОДокументеИзРЭМД();
	
	Данные = Новый Соответствие;
	
	Данные["[EMDRID]"] = ИдентификаторРЭМД;
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		//TODO: В СообщенияПользователю
		ИмяВебСервиса = "РЭМД";
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: " + ИмяВебСервиса;
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруИсходящегоВызова();
	СтруктураОтвета.Адрес				= Адрес;
	СтруктураОтвета.ТелоСообщения		= ТелоСообщения;
	СтруктураОтвета.emdrId				= ИдентификаторРЭМД;
	СтруктураОтвета.ПолучитьТекстОтвета	= ПолучитьТекстОтвета;
	СтруктураОтвета.ТипПакета			= "getRegistryItem";
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ЗаписатьВызовПоискДокументовВРЭМД(
			КодOIDМедицинскойОрганизации = Неопределено,
			УидДокумента = Неопределено,
			КодВидаДокумента = Неопределено,
			НомерДокумента = Неопределено,
			ДатаСозданияДокумента = Неопределено,
			УидПациента = Неопределено,
			СНИЛС = Неопределено,
			НомерСтраницы = Неопределено
		) Экспорт
	
	СтруктураОтвета = ПолучитьДанныеВызоваПоискДокументовВРЭМД(КодOIDМедицинскойОрганизации,
							УидДокумента,
							КодВидаДокумента,
							НомерДокумента,
							ДатаСозданияДокумента,
							УидПациента,
							СНИЛС,
							НомерСтраницы
						);
	УИДВызова = СоздатьИсходящийВызовРЭМД(СтруктураОтвета);
	
	Возврат УИДВызова;
	
КонецФункции

Функция ПолучитьДанныеВызоваПоискДокументовВРЭМД(
			КодOIDМедицинскойОрганизации = Неопределено,
			УидДокумента = Неопределено,
			КодВидаДокумента = Неопределено,
			НомерДокумента = Неопределено,
			ДатаСозданияДокумента = Неопределено,
			УидПациента = Неопределено,
			СНИЛС = Неопределено,
			НомерСтраницы = Неопределено
		) Экспорт
	Результат = Неопределено;
	
	Шаблон = ТекстXMLПоискДокументовВРЭМД(
		ЗначениеЗаполнено(КодOIDМедицинскойОрганизации),
		ЗначениеЗаполнено(УидДокумента),
		ЗначениеЗаполнено(КодВидаДокумента),
		ЗначениеЗаполнено(НомерДокумента),
		ЗначениеЗаполнено(ДатаСозданияДокумента),
		ЗначениеЗаполнено(УидПациента),
		ЗначениеЗаполнено(СНИЛС),
		ЗначениеЗаполнено(НомерСтраницы)
	);
	
	Данные = Новый Соответствие;
	
	Данные["[OID_MO]"] = КодOIDМедицинскойОрганизации;
	Данные["[DOCUMENT_ID]"] = УидДокумента;
	Данные["[ВИД_ДОКУМЕНТА]"] = КодВидаДокумента;
	Данные["[НОМЕР_ДОКУМЕНТА]"] = НомерДокумента;
	Данные["[ДАТА_ДОКУМЕНТА]"] = ДатаСозданияДокумента;
	Данные["[PATIENT_ID]"] = УидПациента;
	Данные["[СНИЛС_НОМЕР]"] = СтрЗаменить(СтрЗаменить(СНИЛС, "-", ""), " ", "");
	Данные["[НОМЕР_СТРАНИЦЫ]"] = НомерСтраницы;
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруИсходящегоВызова();
	СтруктураОтвета.Адрес				= Адрес;
	СтруктураОтвета.ТелоСообщения		= ТелоСообщения;
	СтруктураОтвета.ТипПакета			= "searchRegistryItem";
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ЗаписатьВызовЗапроситьДокументИзРЭМД(emdrId, Объект = Неопределено) Экспорт
	
	СтруктураОтвета = ПолучитьДанныеВызоваЗапроситьДокументИзРЭМД(emdrId, Объект);
	УИДВызова = СоздатьИсходящийВызовРЭМД(СтруктураОтвета);
	
	Возврат УИДВызова;
	
КонецФункции

Функция ПолучитьДанныеВызоваЗапроситьДокументИзРЭМД(emdrId, Объект = Неопределено, ИдЗапросаТестовыхИспытаний = Неопределено) Экспорт
	
	Шаблон = ТекстXMLЗаявкаНаПолучениеДокументаИзРЭМД();
	Данные = Новый Соответствие;
	
	// уникальное в пределах МО строковое значение.
	Если ИдЗапросаТестовыхИспытаний = Неопределено Тогда
		MSG_ID = Строка(Новый УникальныйИдентификатор());
	Иначе
		MSG_ID = ИдЗапросаТестовыхИспытаний;
	КонецЕсли;
	
	Данные["[MSG_ID]"] = MSG_ID;
	Данные["[EMDRID]"] = emdrId;
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруИсходящегоВызова();
	СтруктураОтвета.Адрес				= Адрес;
	СтруктураОтвета.ТелоСообщения		= ТелоСообщения;
	СтруктураОтвета.emdrId				= emdrId;
	СтруктураОтвета.ТипПакета			= "demandContent";
	СтруктураОтвета.MSG_ID				= MSG_ID;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ЗаписатьВызовПолучитьМетаданныеДокументаИзРЭМД(emdrId, grantingEmdrId) Экспорт
	
	СтруктураОтвета = ПолучитьДанныеВызоваПолучитьМетаданныеДокументаИзРЭМД(emdrId, grantingEmdrId);
	УИДВызова = СоздатьИсходящийВызовРЭМД(СтруктураОтвета);
	
	Возврат УИДВызова;
	
КонецФункции

Функция ПолучитьДанныеВызоваПолучитьМетаданныеДокументаИзРЭМД(emdrId, grantingEmdrId) Экспорт
	
	Результат = Неопределено;
	
	Шаблон = ТекстXMLПолучитьМетаданныеДокументаИзРЭМД();
	
	Данные = Новый Соответствие;
	
	Данные["[EMDRID]"] = emdrId;
	Данные["[GRANTING_EMDRID]"] = ?(ЗначениеЗаполнено(grantingEmdrId), grantingEmdrId, "");
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруИсходящегоВызова();
	СтруктураОтвета.Адрес				= Адрес;
	СтруктураОтвета.ТелоСообщения		= ТелоСообщения;
	СтруктураОтвета.emdrId				= emdrId;
	СтруктураОтвета.ТипПакета			= "getMetadata";
	
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ОбработатьПодготовленныеСообщенияРЭМД() Экспорт
	
	КоличествоДостиженийЛимитов = 0;
	
	ПодготовленныеСообщенияРЭМД = ПолучитьПодготовленныеСообщенияРЭМД();
	Для Каждого СообщениеРЭМД Из ПодготовленныеСообщенияРЭМД Цикл
		//TODO: Реализовать проверку подписания ЭЦП медицинской организации
		Попытка
			
			НеобходимоОтправитьЗапрос = Истина;
			
			// Если очередной запрос превысил лимит запросов - сообщение нужно отправить еще раз после паузы
			Пока НеобходимоОтправитьЗапрос Цикл
				РезультатОтРЭМД = ЗарегистрироватьДокументВРЭМД(СообщениеРЭМД);
				
				Если ТипЗнч(РезультатОтРЭМД) = Тип("Структура")
					И РезультатОтРЭМД.Свойство("ДостигнутЛимит")
					И РезультатОтРЭМД.ДостигнутЛимит = Истина
				Тогда
					КоличествоДостиженийЛимитов = КоличествоДостиженийЛимитов + 1;
					Если КоличествоДостиженийЛимитов < 10 Тогда
						ИнтернетПоддержкаПользователей.Пауза(ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ДлительностьПаузыПослеПревышенияЛимита());
					Иначе
						// Не более 10 достижений лимитов за одно рег. задание
						Возврат;
					КонецЕсли;
				Иначе
					НеобходимоОтправитьЗапрос = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если РезультатОтРЭМД <> Истина Тогда
				Справочники.СообщенияРЭМД.ЗаписатьТекстОшибки(СообщениеРЭМД, РезультатОтРЭМД);
				Продолжить;
			КонецЕсли;
			
			Справочники.СообщенияРЭМД.ЗаписатьТекстОшибки(СообщениеРЭМД, "");
		Исключение
			Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Справочники.СообщенияРЭМД.ЗаписатьТекстОшибки(СообщениеРЭМД, Текст);
			ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПодготовленныеСообщенияРЭМД() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СообщенияРЭМД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтеграцияЕГИСЗСообщенияРЭМД КАК ИнтеграцияЕГИСЗСообщенияРЭМД
		|		ПО СообщенияРЭМД.ИдентификаторДокумента = ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента
		|ГДЕ
		|	СообщенияРЭМД.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
		|	И СообщенияРЭМД.Документ <> НЕОПРЕДЕЛЕНО
		|	И НЕ СообщенияРЭМД.ПометкаУдаления
		|	И (СообщенияРЭМД.Отправить
		|			ИЛИ СообщенияРЭМД.ИдентификаторРЭМД = """"
		|				И ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента ЕСТЬ NULL
		|				И СообщенияРЭМД.ТекстПоследнейОшибки = """"
		|			ИЛИ СообщенияРЭМД.Обновить
		|				И СообщенияРЭМД.ИдентификаторРЭМД <> """")";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗаписатьТекстОшибкиВСообщениеРЭМД(СообщениеРЭМД, Ошибка) Экспорт
	
	Справочники.СообщенияРЭМД.ЗаписатьТекстОшибки(СообщениеРЭМД, Ошибка);
	
КонецПроцедуры

Процедура СохранитьРезультатыОтправкиСообщения(РезультатыОтправкиСообщения) Экспорт
	
	Если РезультатыОтправкиСообщения.РезультатОтРЭМД <> Истина Тогда
		Справочники.СообщенияРЭМД.ЗаписатьТекстОшибки(РезультатыОтправкиСообщения.СообщениеРЭМД, РезультатыОтправкиСообщения.РезультатОтРЭМД);
		Возврат;
	КонецЕсли;
	
	Справочники.СообщенияРЭМД.ЗаписатьТекстОшибки(РезультатыОтправкиСообщения.СообщениеРЭМД, "");
	
КонецПроцедуры

Функция СформироватьСвойстваЭМД(МедицинскийДокумент, ДополнительныеПараметры) Экспорт
	
	ШаблонОсмотра = ДополнительныеПараметры.ШаблонОсмотра;
	ИндексШаблона = ДополнительныеПараметры.ИндексШаблона;
	ПриказМО = ДополнительныеПараметры.ПриказМО;
	
	СвойстваЭМД = Новый Структура("ВидСЭМД, ВидРЭМД, ИдентификаторРЭМД, ЗаголовокЭМД, УИДДокумента");
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	
	Если ИндексШаблона <> Неопределено
		И ИмяТипаДокумента = "Документ.Прием"
	Тогда
		СвойстваЭМД.УИДДокумента = Строка(МедицинскийДокумент.ШаблоныПриема.Получить(ИндексШаблона).УИД);
	Иначе
		СвойстваЭМД.УИДДокумента = Строка(МедицинскийДокумент.УникальныйИдентификатор());
	КонецЕсли;
	
	ЗаголовокЭМД = "";
	
	Если ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра"
		И Не ЗначениеЗаполнено(ШаблонОсмотра)
	Тогда
		ВидДокумента = ИнтеграцияЕГИСЗ_СЭМД.ОпределитьВидДокументаПоПриказуМО(ПриказМО, ДополнительныеПараметры.СообщениеРЭМД, МедицинскийДокумент);
		ЗаголовокЭМД = ?(ЗначениеЗаполнено(ПриказМО.НаименованиеСЭМД), ПриказМО.НаименованиеСЭМД, ПриказМО.Наименование);
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		// Выписка из протокола врачебной комиссии (CDA) Редакция 1
		ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидРЭМДВрачебнойКомиссии();
		ЗаголовокЭМД = ЗаголовокЭМДВрачебнойКомиссии();
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидРЭМДРецепта(МедицинскийДокумент.ФормаРецепта);
		ЗаголовокЭМД = ЗаголовокЭМДРецепта();
	Иначе
		ВидДокумента = ШаблонОсмотра.ВидДокумента;
		Если ЗначениеЗаполнено(ШаблонОсмотра.НаименованиеСЭМД) Тогда
			ЗаголовокЭМД = ШаблонОсмотра.НаименованиеСЭМД;
		ИначеЕсли ТипЗнч(ШаблонОсмотра) = Тип("СправочникСсылка.ВерсииШаблоновHTML") Тогда
			ЗаголовокЭМД = ШаблонОсмотра.Владелец.Наименование;
		Иначе
			ЗаголовокЭМД = ШаблонОсмотра.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваЭМД.ЗаголовокЭМД = ЗаголовокЭМД;
	СвойстваЭМД.ВидРЭМД = ВидДокумента;
	
	Если ВидДокумента.УИДЕГИСЗ = 194 Тогда
		СвойстваЭМД.ВидСЭМД = ВидДокумента.ВидДокумента.ВидСЭМД;
	Иначе
		СвойстваЭМД.ВидСЭМД = ВидДокумента.ВидДокумента;
	КонецЕсли;
	
	СвойстваЭМД.ИдентификаторРЭМД = ВидДокумента.УИДЕГИСЗ;
	
	Возврат СвойстваЭМД;
	
КонецФункции

// Вид документа требует подпись МО
//
// Параметры:
//  ВидДокумента - СправочникСсылка.РегистрируемыеЭлектронныеМедДокументы - Вид документа
// 
// Возвращаемое значение:
//  Булево
//
Функция ВидДокументаТребуетПодписьМО(ВидДокумента) Экспорт
	
	Для Каждого Атрибут Из ВидДокумента.Атрибуты Цикл
		Если ВРег(Атрибут.Ключ) = "MO_SIGN" Тогда
			Попытка
				Возврат Булево(Атрибут.Значение);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТекстXMLCallbackResponse(Ошибка = Ложь) Экспорт
	
	Если Ошибка = Ложь Тогда
		Текст =
			"<ns3:callbackResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|	<ns3:status>success</ns3:status>
			|</ns3:callbackResponse>";
	Иначе
		Текст =
			"<ns3:callbackResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|	<ns3:status>error</ns3:status>
			|	<ns3:errors>
			|		<ns3:item>
			|			<ns3:code>[КОД_ОШИБКИ]</ns3:code>
			|			<ns3:message>[СООБЩЕНИЕ]</ns3:message>
			|		</ns3:item>
			|	</ns3:errors>
			|</ns3:callbackResponse>";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьРольСотрудникаПриПодписании(КодМинздраваВидаДокумента, КодМинздраваДолжности)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыМедицинскихДокументов.РольРЭМД КАК РольРЭМДРоль
		|ИЗ
		|	Справочник.ВидыМедицинскихДокументов.ДолжностиДляПодписания КАК ВидыМедицинскихДокументов
		|ГДЕ
		//|	ВидыМедицинскихДокументов.Ссылка.codeSystem = ""1.2.643.5.1.13.13.99.2.41""
		//|	И
		|ВидыМедицинскихДокументов.Ссылка.УИДЕГИСЗ = &КодМинздраваВидаДокумента
		|	И ВидыМедицинскихДокументов.Должность.ДолжностьМинздрава.УИДЕГИСЗ = &КодМинздраваДолжности";
	
	Запрос.УстановитьПараметр("КодМинздраваВидаДокумента", КодМинздраваВидаДокумента);
	Запрос.УстановитьПараметр("КодМинздраваДолжности", КодМинздраваДолжности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РольРЭМДРоль;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИдентификаторРЭМДПоУИДСообщения(relatesToMessage)
	
	МЗ = РегистрыСведений.ИнтеграцияЕГИСЗСообщенияРЭМД.СоздатьМенеджерЗаписи();
	МЗ.УИДСообщения = relatesToMessage;
	МЗ.Прочитать();
	Возврат МЗ.ИдентификаторРЭМД;
	
КонецФункции

Функция ПолучитьОбъектПоИсходномуЗапросу(relatesToMessage)
	
	МЗ = РегистрыСведений.ИнтеграцияЕГИСЗСообщенияРЭМД.СоздатьМенеджерЗаписи();
	МЗ.УИДСообщения = relatesToMessage;
	МЗ.Прочитать();
	Возврат ?(ЗначениеЗаполнено(МЗ.Объект), МЗ.Объект, Неопределено);
	
КонецФункции

Функция ПолучитьКлиентаПоМетаданным(МетаданныеДокумента)
	
	Если МетаданныеДокумента.Свойство("patientSnils") Тогда
		Возврат РаботаСКлиентами.НайтиКлиента(Новый Структура("СНИЛС", МетаданныеДокумента.patientsnils));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДобавитьФайлКлиенту(Клиент, ДокументДД, МетаданныеДокумента, ИдентификаторРЭМД = "")
	
	СтруктураДанныхФайла = Новый Структура("Объект, ДвоичныеДанные, Идентификатор, ИмяБезРасширения, Расширение, ИмяФайла, Классификация");
	
	Если ЗначениеЗаполнено(ДокументДД) Тогда
		ЧастиФИОВрача = Новый Массив;
		Если МетаданныеДокумента.Свойство("signer") Тогда
			ЧастиФИОВрача.Добавить(МетаданныеДокумента.signer.surname);
			ЧастиФИОВрача.Добавить(МетаданныеДокумента.signer.name);
			Если МетаданныеДокумента.signer.Свойство("patrName") Тогда
				ЧастиФИОВрача.Добавить(МетаданныеДокумента.signer.patrName);
			КонецЕсли;
		КонецЕсли;
		ЧастиИмениДокумента = Новый Массив;
		
		ЧастиИмениДокумента.Добавить("[" + ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(МетаданныеДокумента.registrationDateTime) + "]");
		// Организация
		OIDОрганизации = МетаданныеДокумента.organization;
		Организация = Справочники.РеестрМедицинскихОрганизаций.НайтиПоРеквизиту("OIDОрганизации", OIDОрганизации);
		НаименованиеОрганизации = ?(ЗначениеЗаполнено(Организация), Организация.ПолноеНаименование, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'OID организации: [%1]'"), OIDОрганизации));
		
		ЧастиИмениДокумента.Добавить(НаименованиеОрганизации);
		
		ЧастиИмениДокумента.Добавить(МетаданныеДокумента.description);
		
		Если ЧастиФИОВрача.Количество() > 0 Тогда
			ЧастиИмениДокумента.Добавить(СтрСоединить(ЧастиФИОВрача, " "));
		КонецЕсли;
		
		ИмяДокумента = СтрСоединить(ЧастиИмениДокумента, ", ");
		
		Расширение = ПолучитьРасширениеФайлаПоМетаданным(МетаданныеДокумента);
	Иначе
		Возврат Неопределено;
		//ИмяДокумента = "Не удалось загрузить файл";
		//Расширение = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		СтруктураДанныхФайла.Объект			= Клиент;
	КонецЕсли;
	СтруктураДанныхФайла.ДвоичныеДанные		= ДокументДД;
	СтруктураДанныхФайла.ИмяБезРасширения	= ИмяДокумента;
	СтруктураДанныхФайла.Расширение			= Расширение;
	СтруктураДанныхФайла.Идентификатор		= ИдентификаторРЭМД;
	СтруктураДанныхФайла.ИмяФайла			= ИмяДокумента + Расширение;
	СтруктураДанныхФайла.Классификация		= Справочники.КлассификацияПрикрепленныхФайлов.ИзВнешнейМИС;
	
	Возврат РаботаСФайлами.ПоместитьФайлВХранилищеНаСервере(СтруктураДанныхФайла);
	
КонецФункции

#Область ПультКонтролера

Функция ТекстЗапросаДокументыБезВсехПодписей() Экспорт
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ШаблоныHTML.Ссылка КАК Ссылка,
		|	ШаблоныHTML.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ШаблоныЭМД
		|ИЗ
		|	Справочник.ШаблоныHTML КАК ШаблоныHTML
		|ГДЕ
		|	ШаблоныHTML.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭМД.Ссылка КАК Ссылка,
		|	ЭМД.Клиент КАК Клиент,
		|	ЭМД.Врач КАК Врач,
		|	ЭМД.Филиал КАК Филиал,
		|	ЭМД.РольСотрудника КАК РольСотрудника,
		|	ЭМД.ВидДокумента КАК ЭМДВидДокумента,
		|	ЭМД.Дата КАК Дата,
		|	ЭМД.ПодписанЭП КАК ПодписанЭП,
		|	КОЛИЧЕСТВО(ЭМД.РольСотрудника) КАК КоличествоПодписей
		|ПОМЕСТИТЬ ДокументыЭМД
		|ИЗ
		|	(%1) КАК ЭМД
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭМД.Ссылка,
		|	ЭМД.Клиент,
		|	ЭМД.Врач,
		|	ЭМД.Филиал,
		|	ЭМД.РольСотрудника,
		|	ЭМД.ВидДокумента,
		|	ЭМД.Дата,
		|	ЭМД.ПодписанЭП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыЭМД.Ссылка КАК Ссылка,
		|	ДокументыЭМД.Дата КАК Дата,
		|	ДокументыЭМД.Клиент КАК Клиент,
		|	ДокументыЭМД.Врач КАК Врач,
		|	ДокументыЭМД.Филиал КАК Филиал,
		|	ДокументыЭМД.ПодписанЭП КАК ПодписанЭП,
		|	РЭМДПравилаПодписи.ВидДокумента КАК ВидДокумента,
		|	РЭМДПравилаПодписи.Роль КАК Роль,
		|	РЭМДПравилаПодписи.МинКолПодписей КАК МинКолПодписей
		|ПОМЕСТИТЬ НеобходимыеПодписи
		|ИЗ
		|	ДокументыЭМД КАК ДокументыЭМД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|		ПО (РЭМДПравилаПодписи.ВидДокумента = ДокументыЭМД.ЭМДВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НеобходимыеПодписи.Ссылка КАК Ссылка,
		|	НеобходимыеПодписи.Дата КАК Дата,
		|	НеобходимыеПодписи.Клиент КАК Клиент,
		|	НеобходимыеПодписи.Врач КАК Врач,
		|	НеобходимыеПодписи.Филиал КАК Филиал,
		|	НеобходимыеПодписи.ПодписанЭП КАК ПодписанЭП,
		|	НеобходимыеПодписи.Дата >= &НачалоСегодняшнегоДня КАК ЗаСегодня
		|ПОМЕСТИТЬ ДокументыРЭМД
		|ИЗ
		|	НеобходимыеПодписи КАК НеобходимыеПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыЭМД КАК ДокументыЭМД
		|		ПО (ДокументыЭМД.Ссылка = НеобходимыеПодписи.Ссылка)
		|			И (ДокументыЭМД.РольСотрудника = НеобходимыеПодписи.Роль)
		|			И (ДокументыЭМД.ЭМДВидДокумента = НеобходимыеПодписи.ВидДокумента)
		|ГДЕ
		|	ЕСТЬNULL(ДокументыЭМД.КоличествоПодписей, 0) < НеобходимыеПодписи.МинКолПодписей";
		
	ТекстыЗапросовДокументов = Новый Массив;
	
	ТекстЗапросаПрием =
		"ВЫБРАТЬ
		|		ПриемШаблоныПриемаНаДату.Ссылка КАК Ссылка,
		|		Прием.Клиент КАК Клиент,
		|		Прием.Дата КАК Дата,
		|		Прием.Врач КАК Врач,
		|		Прием.Филиал КАК Филиал,
		|		Прием.ПодписанЭП КАК ПодписанЭП,
		|		ШаблоныЭМД.ВидДокумента КАК ВидДокумента,
		|		ПриемРолиИПодписиЭМД.РольСотрудника КАК РольСотрудника
		|	ИЗ
		|		Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриемаНаДату
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныЭМД КАК ШаблоныЭМД
		|			ПО (ШаблоныЭМД.Ссылка = ПриемШаблоныПриемаНаДату.ШаблонПриема)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием КАК Прием
		|			ПО (Прием.Ссылка = ПриемШаблоныПриемаНаДату.Ссылка)
		|				И (Прием.Дата >= &ДатаНачалаОбменаСРЭМД)
		|				И (Прием.Проведен)
		|				И (НЕ Прием.ПометкаУдаления)
		|				И (НЕ Прием.Тестовый)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Прием.ЭМД КАК ПриемЭМД
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.РолиИПодписиЭМД КАК ПриемРолиИПодписиЭМД
		|				ПО ПриемЭМД.Ссылка = ПриемРолиИПодписиЭМД.Ссылка
		|					И ПриемЭМД.УИД = ПриемРолиИПодписиЭМД.УИД_ЭМД
		|			ПО ПриемШаблоныПриемаНаДату.Ссылка = ПриемЭМД.Ссылка
		|				И ПриемШаблоныПриемаНаДату.ШаблонПриема = ПриемЭМД.ШаблонЭМД";
	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаПрием);
	
	Если Метаданные.Документы.Найти("ПрохождениеМедосмотра") <> Неопределено Тогда
		
		ТекстЗапросаПМО =
			"	ВЫБРАТЬ
			|		ПМО.Ссылка,
			|		ПМО.Клиент,
			|		ПМО.Дата,
			|		ПМО.ПредседательМедКомиссии,
			|		ПМО.Филиал,
			|		ПМО.ПодписанЭП,
			|		ШаблоныЭМД.ВидДокумента,
			|		ПМОРолиИПодписиЭМД.РольСотрудника
			|	ИЗ
			|		Документ.ПрохождениеМедосмотра.РолиИПодписиЭМД КАК ПМОРолиИПодписиЭМД
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра КАК ПМО
			|			ПО (ПМО.Ссылка = ПМОРолиИПодписиЭМД.Ссылка)
			|				И (ПМО.Дата >= &ДатаНачалаОбменаСРЭМД)
			|				И (ПМО.Проведен)
			|				И (НЕ ПМО.ПометкаУдаления)
			|				И (НЕ ПМО.Тестовый)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныЭМД КАК ШаблоныЭМД
			|				ПО СпрНоменклатура.ИндивидуальныйШаблонОсмотра = ШаблоныЭМД.Ссылка
			|			ПО (ПМО.Номенклатура = СпрНоменклатура.Ссылка)";
		ТекстыЗапросовДокументов.Добавить(ТекстЗапросаПМО);
		
		ТекстЗапросаЗМО =
			"ВЫБРАТЬ
			|	ПМО.Ссылка,
			|	ПМО.Клиент,
			|	ПМО.Дата,
			|	ПМО.ПредседательМедКомиссии,
			|	ПМО.Филиал,
			|	ПМО.ПодписанЭП,
			|	ВЫБОР
			|		КОГДА ПрохождениеМедосмотраЭМД.ВидДокументаЭМД ЕСТЬ NULL
			|			ТОГДА ФакторыПМО.ВидДокументаФактораПриказа
			|		ИНАЧЕ ПрохождениеМедосмотраЭМД.ВидДокументаЭМД
			|	КОНЕЦ,
			|	ПрохождениеМедосмотраРолиИПодписиЭМД.РольСотрудника
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор КАК ВредныйФакторПриказ,
			|		ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.ШаблонОсмотраСправки.ВидДокумента КАК ВидДокументаФактораПриказа,
			|		ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка КАК Ссылка
			|	ИЗ
			|		Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПриказыМедосмотров КАК ПриказыМедосмотров
			|				ПО (ПриказыМедосмотров.Ссылка = ПереченьВредныхФакторовИРабот.Приказ)
			|					И (ПриказыМедосмотров.Родитель = ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.СправкиИИныеМедосмотры))
			|			ПО ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор = ПереченьВредныхФакторовИРабот.Ссылка
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
			|			ПО (ШаблоныHTML.Ссылка = ПереченьВредныхФакторовИРабот.ШаблонОсмотраСправки)
			|				И (ШаблоныHTML.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗаключенияМедосмотров.ВредныйФакторПриказ,
			|		ВЫБОР
			|			КОГДА ЗаключенияМедосмотров.ЗаключениеДляМедкнижки
			|				ТОГДА &ВидЗаключенияДляМедкнижки
			|			ИНАЧЕ &ВидЗаключенияНеДляМедкнижки
			|		КОНЕЦ,
			|		ЗаключенияМедосмотров.Ссылка
			|	ИЗ
			|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.Приказ КАК ВредныйФакторПриказ,
			|			МАКСИМУМ(ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.НомерПП В (&ПунктыВредныхФакторовДляМедкнижки)) КАК ЗаключениеДляМедкнижки,
			|			ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка КАК Ссылка
			|		ИЗ
			|			Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПриказыМедосмотров КАК ПриказыМедосмотров
			|					ПО (ПриказыМедосмотров.Ссылка = ПереченьВредныхФакторовИРабот.Приказ)
			|						И (ПриказыМедосмотров.Родитель <> ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.СправкиИИныеМедосмотры))
			|						И (ПриказыМедосмотров.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)
			|							ИЛИ ПриказыМедосмотров.Ссылка = ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.Приказ29н))
			|				ПО ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор = ПереченьВредныхФакторовИРабот.Ссылка
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.Приказ,
			|			ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка) КАК ЗаключенияМедосмотров) КАК ФакторыПМО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра КАК ПМО
			|		ПО (ПМО.Ссылка = ФакторыПМО.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ЭМД КАК ПрохождениеМедосмотраЭМД
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.РолиИПодписиЭМД КАК ПрохождениеМедосмотраРолиИПодписиЭМД
			|			ПО (ПрохождениеМедосмотраЭМД.Ссылка = ПрохождениеМедосмотраРолиИПодписиЭМД.Ссылка)
			|				И (ПрохождениеМедосмотраЭМД.УИД = ПрохождениеМедосмотраРолиИПодписиЭМД.УИД_ЭМД)
			|		ПО (ФакторыПМО.ВредныйФакторПриказ = ПрохождениеМедосмотраЭМД.ПриказВредныйФактор)
			|			И (ФакторыПМО.Ссылка = ПрохождениеМедосмотраЭМД.Ссылка)";
		ТекстыЗапросовДокументов.Добавить(ТекстЗапросаЗМО);
	КонецЕсли;
	
	// Версия КОРП
	//Если Метаданные.Документы.Найти("ВрачебнаяКомиссия") <> Неопределено Тогда
	//	
	//	ТекстЗапросаВК =
	//		"	ВЫБРАТЬ
	//		|		ВрачебнаяКомиссия.Ссылка КАК Ссылка,
	//		|		ВрачебнаяКомиссия.Клиент КАК Клиент,
	//		|		ВрачебнаяКомиссия.Дата КАК Дата,
	//		|		ВрачебнаяКомиссия.ПредседательКомиссии КАК ПредседательКомиссии,
	//		|		ВрачебнаяКомиссия.Филиал КАК Филиал,
	//		|		ВрачебнаяКомиссия.ПодписанЭП КАК ПодписанЭП,
	//		|		&ВидДокументаВК КАК ВидДокументаВК,
	//		|		ВрачебнаяКомиссияРолиИПодписиЭМД.РольСотрудника КАК РольСотрудника
	//		|	ИЗ
	//		|		Документ.ВрачебнаяКомиссия.РолиИПодписиЭМД КАК ВрачебнаяКомиссияРолиИПодписиЭМД
	//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВрачебнаяКомиссия КАК ВрачебнаяКомиссия
	//		|			ПО (ВрачебнаяКомиссия.Дата >= &ДатаНачалаОбменаСРЭМД)
	//		|				И (ВрачебнаяКомиссия.Ссылка = ВрачебнаяКомиссияРолиИПодписиЭМД.Ссылка)
	//		|				И (ВрачебнаяКомиссия.Проведен)
	//		|				И (НЕ ВрачебнаяКомиссия.ПометкаУдаления)
	//		|				И (НЕ ВрачебнаяКомиссия.Тестовый)";
	//	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаВК);
	//КонецЕсли;
	
	ТекстЗапросаРецепт =
		"ВЫБРАТЬ
		|	Рецепт.Ссылка КАК Ссылка,
		|	Рецепт.Клиент КАК Клиент,
		|	Рецепт.Дата КАК Дата,
		|	Рецепт.Врач КАК Врач,
		|	Рецепт.Филиал КАК Филиал,
		|	Рецепт.ПодписанЭП КАК ПодписанЭП,
		|	РецептЭМД.ВидДокументаЭМД КАК ВидДокументаЭМД,
		|	РецептРолиИПодписиЭМД.РольСотрудника КАК РольСотрудника
		|ИЗ
		|	Документ.Рецепт.ЭМД КАК РецептЭМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рецепт КАК Рецепт
		|		ПО РецептЭМД.Ссылка = Рецепт.Ссылка
		|			И (РецептЭМД.НомерСтроки = 0)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рецепт.РолиИПодписиЭМД КАК РецептРолиИПодписиЭМД
		|		ПО РецептЭМД.Ссылка = РецептРолиИПодписиЭМД.Ссылка
		|			И РецептЭМД.УИД = РецептРолиИПодписиЭМД.УИД_ЭМД
		|ГДЕ
		|	Рецепт.Дата >= &ДатаНачалаОбменаСРЭМД
		|	И НЕ Рецепт.ПометкаУдаления
		|	И НЕ Рецепт.Тестовый";
	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаРецепт);
	
	Возврат СтрШаблон(ШаблонТекстаЗапроса, СтрСоединить(ТекстыЗапросовДокументов, СтрШаблон("%1%1%2ОБЪЕДИНИТЬ ВСЕ%1%1", Символы.ПС, Символы.Таб)));
	
КонецФункции

Функция ТекстЗапросаДокументыБезСообщений() Экспорт
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ШаблоныHTML.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ШаблоныЭМД
		|ИЗ
		|	Справочник.ШаблоныHTML КАК ШаблоныHTML
		|ГДЕ
		|	ШаблоныHTML.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыРЭМД.Ссылка КАК Ссылка,
		|	ДокументыРЭМД.Дата КАК Дата,
		|	ДокументыРЭМД.Клиент КАК Клиент,
		|	ДокументыРЭМД.Врач КАК Врач,
		|	ДокументыРЭМД.Филиал КАК Филиал,
		|	ДокументыРЭМД.ПодписанЭП КАК ПодписанЭП,
		|	ДокументыРЭМД.Дата >= &НачалоСегодняшнегоДня КАК ЗаСегодня
		|ПОМЕСТИТЬ ДокументыРЭМД
		|ИЗ
		|	(%1) КАК ДокументыРЭМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|		ПО ДокументыРЭМД.Ссылка = СообщенияРЭМД.Документ
		|			И (НЕ СообщенияРЭМД.ПометкаУдаления)
		|ГДЕ
		|	СообщенияРЭМД.Документ ЕСТЬ NULL";
	
	ТекстыЗапросовДокументов = Новый Массив;
	
	ТекстЗапросаПрием =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДокументПрием.Ссылка КАК Ссылка,
		|		ДокументПрием.Дата КАК Дата,
		|		ДокументПрием.Клиент КАК Клиент,
		|		ДокументПрием.Врач КАК Врач,
		|		ДокументПрием.Филиал КАК Филиал,
		|		ДокументПрием.ПодписанЭП КАК ПодписанЭП
		|	ИЗ
		|		Документ.Прием КАК ДокументПрием
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныЭМД КАК ШаблоныЭМД
		|				ПО (ШаблоныЭМД.Ссылка = ПриемШаблоныПриема.ШаблонПриема)
		|			ПО (ПриемШаблоныПриема.Ссылка = ДокументПрием.Ссылка)
		|				И (ДокументПрием.Дата >= &ДатаНачалаОбменаСРЭМД)
		|				И (НЕ ДокументПрием.ПометкаУдаления)
		|				И (НЕ ДокументПрием.Тестовый)
		|				И (ДокументПрием.Проведен)
		|				И (ДокументПрием.ПодписанЭП)";
	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаПрием);
	
	Если Метаданные.Документы.Найти("ПрохождениеМедосмотра") <> Неопределено Тогда
		
		ТекстЗапросаПМО =
			"	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ПМО.Ссылка,
			|		ПМО.Дата,
			|		ПМО.Клиент,
			|		ПМО.ПредседательМедКомиссии,
			|		ПМО.Филиал,
			|		ПМО.ПодписанЭП
			|	ИЗ
			|		Документ.ПрохождениеМедосмотра КАК ПМО
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныЭМД КАК ШаблоныЭМД
			|			ПО ПМО.Номенклатура.ИндивидуальныйШаблонОсмотра = ШаблоныЭМД.Ссылка
			|				И (ПМО.Дата >= &ДатаНачалаОбменаСРЭМД)
			|				И (НЕ ПМО.ПометкаУдаления)
			|				И (НЕ ПМО.Тестовый)
			|				И (ПМО.Проведен)
			|				И (ПМО.ПодписанЭП)";
		ТекстыЗапросовДокументов.Добавить(ТекстЗапросаПМО);
		
		ТекстЗапросаЗМО =
			"	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ЗаключениеМО.Ссылка,
			|		ЗаключениеМО.Дата,
			|		ЗаключениеМО.Клиент,
			|		ЗаключениеМО.ПредседательМедКомиссии,
			|		ЗаключениеМО.Филиал,
			|		ЗаключениеМО.ПодписанЭП
			|	ИЗ
			|		Документ.ПрохождениеМедосмотра КАК ЗаключениеМО
			|	ГДЕ
			|		ЗаключениеМО.ВидПрохожденияМО <> ЗНАЧЕНИЕ(Перечисление.ВидыМедосмотров.СправкаПрочий)
			|		И ЗаключениеМО.Дата >= &ДатаНачалаОбменаСРЭМД
			|		И НЕ ЗаключениеМО.ПометкаУдаления
			|		И НЕ ЗаключениеМО.Тестовый
			|		И ЗаключениеМО.Проведен
			|		И ЗаключениеМО.ПодписанЭП";
		ТекстыЗапросовДокументов.Добавить(ТекстЗапросаЗМО);
	КонецЕсли;
	
	// Версия КОРП
	//Если Метаданные.Документы.Найти("ВрачебнаяКомиссия") <> Неопределено Тогда
	//	
	//	ТекстЗапросаВК =
	//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		|	ВрачебнаяКомиссия.Ссылка КАК Ссылка,
	//		|	ВрачебнаяКомиссия.Дата КАК Дата,
	//		|	ВрачебнаяКомиссия.Клиент КАК Клиент,
	//		|	ВрачебнаяКомиссия.ПредседательКомиссии КАК ПредседательКомиссии,
	//		|	ВрачебнаяКомиссия.Филиал КАК Филиал,
	//		|	ВрачебнаяКомиссия.ПодписанЭП КАК ПодписанЭП
	//		|ИЗ
	//		|	Документ.ВрачебнаяКомиссия КАК ВрачебнаяКомиссия
	//		|ГДЕ
	//		|	ВрачебнаяКомиссия.Дата >= &ДатаНачалаОбменаСРЭМД
	//		|	И НЕ ВрачебнаяКомиссия.ПометкаУдаления
	//		|	И НЕ ВрачебнаяКомиссия.Тестовый
	//		|	И ВрачебнаяКомиссия.Проведен
	//		|	И ВрачебнаяКомиссия.ПодписанЭП";
	//	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаВК);
	//КонецЕсли;
	
	ТекстЗапросаРецепт =
		"ВЫБРАТЬ
		|	Рецепт.Ссылка КАК Ссылка,
		|	Рецепт.Дата КАК Дата,
		|	Рецепт.Клиент КАК Клиент,
		|	Рецепт.Врач КАК Врач,
		|	Рецепт.Филиал КАК Филиал,
		|	Рецепт.ПодписанЭП КАК ПодписанЭП
		|ИЗ
		|	Документ.Рецепт КАК Рецепт
		|ГДЕ
		|	Рецепт.Дата >= &ДатаНачалаОбменаСРЭМД
		|	И НЕ Рецепт.ПометкаУдаления
		|	И НЕ Рецепт.Тестовый
		|	И Рецепт.ПодписанЭП";
	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаРецепт);
	
	Возврат СтрШаблон(ШаблонТекстаЗапроса, СтрСоединить(ТекстыЗапросовДокументов, СтрШаблон("%1%1%2ОБЪЕДИНИТЬ ВСЕ%1%1", Символы.ПС, Символы.Таб)));
	
КонецФункции

Функция ТекстЗапросаДокументыСНесформированнымиФайламиРЭМД() Экспорт
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ШаблоныHTML.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ШаблоныЭМД
		|ИЗ
		|	Справочник.ШаблоныHTML КАК ШаблоныHTML
		|ГДЕ
		|	ШаблоныHTML.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыРЭМД.Ссылка КАК Ссылка,
		|	ДокументыРЭМД.Дата КАК Дата,
		|	ДокументыРЭМД.Клиент КАК Клиент,
		|	ДокументыРЭМД.Врач КАК Врач,
		|	ДокументыРЭМД.Филиал КАК Филиал,
		|	ДокументыРЭМД.ПодписанЭП КАК ПодписанЭП,
		|	ДокументыРЭМД.Дата >= &НачалоСегодняшнегоДня КАК ЗаСегодня
		|ПОМЕСТИТЬ ДокументыРЭМД
		|ИЗ
		|	(%1) КАК ДокументыРЭМД";
	
	ТекстыЗапросовДокументов = Новый Массив;
	
	ТекстЗапросаПрием =
		"ВЫБРАТЬ
		|		ДокументПрием.Ссылка КАК Ссылка,
		|		ДокументПрием.Дата КАК Дата,
		|		ДокументПрием.Клиент КАК Клиент,
		|		ДокументПрием.Врач КАК Врач,
		|		ДокументПрием.Филиал КАК Филиал,
		|		ДокументПрием.ПодписанЭП КАК ПодписанЭП
		|	ИЗ
		|		Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныЭМД КАК ШаблоныЭМД
		|			ПО (ШаблоныЭМД.Ссылка = ПриемШаблоныПриема.ШаблонПриема)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием КАК ДокументПрием
		|			ПО ПриемШаблоныПриема.Ссылка = ДокументПрием.Ссылка
		|				И (ДокументПрием.Дата >= &ДатаНачалаОбменаСРЭМД)
		|				И (ДокументПрием.Проведен)
		|				И (НЕ ДокументПрием.ПометкаУдаления)
		|				И (НЕ ДокументПрием.Тестовый)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Прием.ЭМД КАК ПриемЭМД
		|			ПО ПриемШаблоныПриема.Ссылка = ПриемЭМД.Ссылка
		|				И ПриемШаблоныПриема.УИД = ПриемЭМД.УИД_Шаблона
		|	ГДЕ
		|		(ВЫРАЗИТЬ(ЕСТЬNULL(ПриемЭМД.ПутьКФайлуВАрхиве, """") КАК СТРОКА(100))) = """"";
	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаПрием);
	
	Если Метаданные.Документы.Найти("ПрохождениеМедосмотра") <> Неопределено Тогда
		
		ТекстЗапросаПМО =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПМО.Ссылка КАК Ссылка,
			|	ПМО.Дата КАК Дата,
			|	ПМО.Клиент КАК Клиент,
			|	ПМО.ПредседательМедКомиссии КАК ПредседательМедКомиссии,
			|	ПМО.Филиал КАК Филиал,
			|	ПМО.ПодписанЭП КАК ПодписанЭП
			|ИЗ
			|	Документ.ПрохождениеМедосмотра КАК ПМО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныЭМД КАК ШаблоныЭМД
			|			ПО СпрНоменклатура.ВредныйФакторСправки.ШаблонОсмотраСправки = ШаблоныЭМД.Ссылка
			|		ПО ПМО.Номенклатура = СпрНоменклатура.Ссылка
			|			И (ПМО.Дата >= &ДатаНачалаОбменаСРЭМД)
			|			И (ПМО.Проведен)
			|			И (НЕ ПМО.ПометкаУдаления)
			|			И (НЕ ПМО.Тестовый)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ЭМД КАК ЭМД_ПМО
			|		ПО (ЭМД_ПМО.Ссылка = ПМО.Ссылка)
			|			И (ЭМД_ПМО.ПриказВредныйФактор = СпрНоменклатура.ВредныйФакторСправки)
			|ГДЕ
			|	(ВЫРАЗИТЬ(ЕСТЬNULL(ЭМД_ПМО.ПутьКФайлуВАрхиве, """") КАК СТРОКА(10))) = """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПМО.Ссылка,
			|	ПМО.Дата,
			|	ПМО.Клиент,
			|	ПМО.ПредседательМедКомиссии,
			|	ПМО.Филиал,
			|	ПМО.ПодписанЭП
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПМОФакторы.Ссылка КАК Ссылка,
			|		ПМОФакторы.Фактор КАК ПриказВредныйФактор
			|	ИЗ
			|		Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПМОФакторы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ВредныеФакторы
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныЭМД КАК ШаблоныЭМД
			|				ПО ВредныеФакторы.ШаблонОсмотраСправки = ШаблоныЭМД.Ссылка
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПриказыМедосмотров КАК ПриказыМедосмотров
			|				ПО ВредныеФакторы.Приказ = ПриказыМедосмотров.Ссылка
			|					И (ПриказыМедосмотров.Родитель = ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.СправкиИИныеМедосмотры))
			|			ПО (ВредныеФакторы.Ссылка = ПМОФакторы.Фактор)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ПМОФакторы.Ссылка,
			|		ПМОФакторы.Фактор.Приказ
			|	ИЗ
			|		Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПМОФакторы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ВредныеФакторы
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПриказыМедосмотров КАК ПриказыМедосмотров
			|				ПО ВредныеФакторы.Приказ = ПриказыМедосмотров.Ссылка
			|					И (ПриказыМедосмотров.Родитель <> ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.СправкиИИныеМедосмотры))
			|					И (ПриказыМедосмотров.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)
			|						ИЛИ ПриказыМедосмотров.Ссылка = ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.Приказ29н))
			|			ПО (ВредныеФакторы.Ссылка = ПМОФакторы.Фактор)) КАК ПриказыВредныеФакторыРЭМД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра КАК ПМО
			|		ПО (ПМО.Ссылка = ПриказыВредныеФакторыРЭМД.Ссылка)
			|			И (ПМО.Дата >= &ДатаНачалаОбменаСРЭМД)
			|			И (ПМО.ВидПрохожденияМО <> ЗНАЧЕНИЕ(Перечисление.ВидыМедосмотров.СправкаПрочий))
			|			И (ПМО.Проведен)
			|			И (НЕ ПМО.ПометкаУдаления)
			|			И (НЕ ПМО.Тестовый)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ЭМД КАК ЭМД_ПМО
			|		ПО (ЭМД_ПМО.Ссылка = ПриказыВредныеФакторыРЭМД.Ссылка)
			|			И (ЭМД_ПМО.ПриказВредныйФактор = ПриказыВредныеФакторыРЭМД.ПриказВредныйФактор)
			|ГДЕ
			|	(ВЫРАЗИТЬ(ЕСТЬNULL(ЭМД_ПМО.ПутьКФайлуВАрхиве, """") КАК СТРОКА(10))) = """"";
		
		ТекстыЗапросовДокументов.Добавить(ТекстЗапросаПМО);
	КонецЕсли;
	
	// Версия КОРП
	//Если Метаданные.Документы.Найти("ВрачебнаяКомиссия") <> Неопределено Тогда
	//	
	//	ТекстЗапросаВК =
	//		"ВЫБРАТЬ
	//		|	ВрачебнаяКомиссия.Ссылка КАК Ссылка,
	//		|	ВрачебнаяКомиссия.Дата КАК Дата,
	//		|	ВрачебнаяКомиссия.Клиент КАК Клиент,
	//		|	ВрачебнаяКомиссия.ПредседательКомиссии КАК ПредседательКомиссии,
	//		|	ВрачебнаяКомиссия.Филиал КАК Филиал,
	//		|	ВрачебнаяКомиссия.ПодписанЭП КАК ПодписанЭП
	//		|ИЗ
	//		|	Документ.ВрачебнаяКомиссия КАК ВрачебнаяКомиссия
	//		|ГДЕ
	//		|	ВрачебнаяКомиссия.Дата >= &ДатаНачалаОбменаСРЭМД
	//		|	И ВрачебнаяКомиссия.Проведен
	//		|	И НЕ ВрачебнаяКомиссия.ПометкаУдаления
	//		|	И НЕ ВрачебнаяКомиссия.Тестовый
	//		|	И (ВЫРАЗИТЬ(ВрачебнаяКомиссия.ПутьКФайлуВАрхиве КАК СТРОКА(100))) = """"";
	//КонецЕсли;
	
	ТекстЗапросаРецепт =
		"ВЫБРАТЬ
		|	Рецепт.Ссылка КАК Ссылка,
		|	Рецепт.Дата КАК Дата,
		|	Рецепт.Клиент КАК Клиент,
		|	Рецепт.Врач КАК Врач,
		|	Рецепт.Филиал КАК Филиал,
		|	Рецепт.ПодписанЭП КАК ПодписанЭП
		|ИЗ
		|	Документ.Рецепт.ЭМД КАК РецептЭМД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Рецепт КАК Рецепт
		|		ПО РецептЭМД.Ссылка = Рецепт.Ссылка
		|ГДЕ
		|	(ВЫРАЗИТЬ(ЕСТЬNULL(РецептЭМД.ПутьКФайлуВАрхиве, """") КАК СТРОКА(100))) = """"
		|	И Рецепт.Дата >= &ДатаНачалаОбменаСРЭМД
		|	И НЕ Рецепт.ПометкаУдаления
		|	И НЕ Рецепт.Тестовый
		|	И Рецепт.ПодписанЭП";
	ТекстыЗапросовДокументов.Добавить(ТекстЗапросаРецепт);
	
	Возврат СтрШаблон(ШаблонТекстаЗапроса, СтрСоединить(ТекстыЗапросовДокументов, СтрШаблон("%1%1%2ОБЪЕДИНИТЬ ВСЕ%1%1", Символы.ПС, Символы.Таб)));
	
КонецФункции

Функция ТекстЗапросаВТСообщенияЗарегистрированные(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Поля
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	НЕ СообщенияРЭМД.ПометкаУдаления
		|	И СообщенияРЭМД.ИдентификаторРЭМД <> """"
		|	И СообщенияРЭМД.ДатаСоздания >= &НачалоДня
		|	И (СообщенияРЭМД.Документ.Филиал = &ВыбранныйФилиал
		|			ИЛИ НЕ &ПоВыбранномуФилиалу)";
	
	Поля = СтрШаблон("СообщенияРЭМД.Ссылка КАК Ссылка ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", Поля);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСообщенияКОтправке(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Поля
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	НЕ СообщенияРЭМД.ПометкаУдаления
		|	И СообщенияРЭМД.ИдентификаторРЭМД = """"
		|	И СообщенияРЭМД.ДатаСоздания >= &НачалоДня
		|	И СообщенияРЭМД.Отправить
		|	И (СообщенияРЭМД.Документ.Филиал = &ВыбранныйФилиал
		|			ИЛИ НЕ &ПоВыбранномуФилиалу)";
	
	Поля = СтрШаблон("СообщенияРЭМД.Ссылка КАК Ссылка ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", Поля);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСообщенияНеПодписаныМО(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Поля
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	НЕ СообщенияРЭМД.ПометкаУдаления
		|	И СообщенияРЭМД.ИдентификаторРЭМД = """"
		|	И СообщенияРЭМД.ДатаСоздания >= &НачалоДня
		|	И (СообщенияРЭМД.Документ.Филиал = &ВыбранныйФилиал
		|			ИЛИ НЕ &ПоВыбранномуФилиалу)
		|	И НЕ СообщенияРЭМД.Ссылка В
		|				(ВЫБРАТЬ
		|					СообщенияРЭМДЭлектронныеПодписиЭМД.Ссылка КАК Ссылка
		|				ИЗ
		|					Справочник.СообщенияРЭМД.ЭлектронныеПодписиЭМД КАК СообщенияРЭМДЭлектронныеПодписиЭМД
		|				ГДЕ
		|					СообщенияРЭМДЭлектронныеПодписиЭМД.ЭтоПодписьМО = ИСТИНА)";
	
	Поля = СтрШаблон("СообщенияРЭМД.Ссылка КАК Ссылка ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", Поля);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСообщенияСОшибками(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Поля
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СообщенияРЭМД.Ссылка КАК Ссылка,
		|		СообщенияРЭМД.ТекстПоследнейОшибки КАК ТекстПоследнейОшибки,
		|		СообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|		СообщенияРЭМД.ИдентификаторРЭМД КАК ИдентификаторРЭМД
		|	ИЗ
		|		Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|	ГДЕ
		|		НЕ СообщенияРЭМД.ПометкаУдаления
		|		И СообщенияРЭМД.ДатаСоздания >= &НачалоДня
		|		И (СообщенияРЭМД.Документ.Филиал = &ВыбранныйФилиал
		|				ИЛИ НЕ &ПоВыбранномуФилиалу)) КАК ОтправленныеСообщения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтеграцияЕГИСЗСообщенияРЭМД КАК ИнтеграцияЕГИСЗСообщенияРЭМД
		|		ПО (ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента = ОтправленныеСообщения.ИдентификаторДокумента)
		|ГДЕ
		|	(ИнтеграцияЕГИСЗСообщенияРЭМД.ТекстОшибки ЕСТЬ NULL
		|				И ОтправленныеСообщения.ТекстПоследнейОшибки <> """"
		|			ИЛИ НЕ ИнтеграцияЕГИСЗСообщенияРЭМД.ТекстОшибки ЕСТЬ NULL
		|				И (ВЫРАЗИТЬ(ИнтеграцияЕГИСЗСообщенияРЭМД.ТекстОшибки КАК СТРОКА(100))) <> """")
		|	И ЕСТЬNULL(ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторРЭМД, ОтправленныеСообщения.ИдентификаторРЭМД) = """"";
	
	Поля = СтрШаблон("ОтправленныеСообщения.Ссылка КАК Ссылка ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", Поля);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСообщенияНеПолученОтвет(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Поля
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СообщенияРЭМД.Ссылка КАК Ссылка,
		|		СообщенияРЭМД.ТекстПоследнейОшибки КАК ТекстПоследнейОшибки,
		|		СообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента
		|	ИЗ
		|		Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|	ГДЕ
		|		НЕ СообщенияРЭМД.ПометкаУдаления
		|		И СообщенияРЭМД.ИдентификаторРЭМД = """"
		|		И СообщенияРЭМД.ДатаСоздания >= &НачалоДня
		|		И (СообщенияРЭМД.Документ.Филиал = &ВыбранныйФилиал
		|				ИЛИ НЕ &ПоВыбранномуФилиалу)) КАК ОтправленныеСообщения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнтеграцияЕГИСЗСообщенияРЭМД КАК ИнтеграцияЕГИСЗСообщенияРЭМД
		|		ПО (ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента = ОтправленныеСообщения.ИдентификаторДокумента)
		|ГДЕ
		|	ОтправленныеСообщения.ТекстПоследнейОшибки = """"
		|	И (ВЫРАЗИТЬ(ИнтеграцияЕГИСЗСообщенияРЭМД.ТекстОшибки КАК СТРОКА(100))) = """"
		|	И ИнтеграцияЕГИСЗСообщенияРЭМД.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ИнтеграцияЕГИСЗСообщенияРЭМД.ТипВызова = ЗНАЧЕНИЕ(Перечисление.ТипВызоваРЭМД.Отправка)";
	
	Поля = СтрШаблон("ОтправленныеСообщения.Ссылка КАК Ссылка ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", Поля);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьДолжностиПоВидамЭМД(ВидыДокументов) Экспорт
	
	// Закешируем коды должностей, они нам пригодятся при парсинге правил подписания.
	КэшДолжностей = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторыМинЗдрава.Ссылка КАК Ссылка,
		|	КлассификаторыМинЗдрава.УИДЕГИСЗ КАК УИДЕГИСЗ
		|ИЗ
		|	Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
		|ГДЕ
		|	КлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ДолжностиРаботниковМедОрганизаций)
		|	И НЕ КлассификаторыМинЗдрава.ПометкаУдаления
		|	И НЕ КлассификаторыМинЗдрава.Архив
		|
		|УПОРЯДОЧИТЬ ПО
		|	УИДЕГИСЗ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КэшДолжностей.Вставить(Выборка.УИДЕГИСЗ, Выборка.Ссылка)
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭМДПравилаПодписи.ВидДокумента КАК ВидДокумента,
		|	РЭМДПравилаПодписи.Роль КАК Роль,
		|	РЭМДПравилаПодписи.Должности КАК Должности
		|ИЗ
		|	Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|ГДЕ
		|	НЕ РЭМДПравилаПодписи.Архив
		|	И НЕ РЭМДПравилаПодписи.ПометкаУдаления
		|	И РЭМДПравилаПодписи.ВидДокумента В(&ВидыДокументов)";
	
	Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
	
	ДолжностиВидовДокумента = Запрос.Выполнить().Выгрузить();
	ДолжностиВидовДокумента.Колонки.Добавить("мДолжности", Новый ОписаниеТипов("Массив"));
	
	Для Каждого СтрокаДолжности Из ДолжностиВидовДокумента Цикл
		Должности = Новый Массив;
		ДолжностиПравила = СтрРазделить(СтрокаДолжности.Должности, ",", Ложь);
		
		Для Каждого КодДолжности Из ДолжностиПравила Цикл
			УИДДолжности = Число(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(КодДолжности));
			Должность = КэшДолжностей.Получить(УИДДолжности);
			Если Должность <> Неопределено Тогда
				Должности.Добавить(Должность);
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДолжности.мДолжности = Должности;
	КонецЦикла;
	
	ДолжностиВидовДокумента.Колонки.Удалить("Должности");
	ДолжностиВидовДокумента.Колонки["мДолжности"].Имя = "Должности";
	
	Возврат ДолжностиВидовДокумента;
	
КонецФункции

#КонецОбласти

Функция ПолучитьДДФайловПоДокументу(МедицинскийДокумент, УИДы_Шаблонов, ДанныеРЭМДПоШаблонам) Экспорт
	
	ДДФайлов = Новый Соответствие;
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		ЗаполнитьДДФайловПоПриему(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам);
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		ЗаполнитьДДФайловПоПМО(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам);
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		ЗаполнитьДДФайловПоВК(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам);
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		ЗаполнитьДДФайловПоРецепту(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам);
	КонецЕсли;
	
	Возврат ДДФайлов;
	
КонецФункции

Процедура ОбновитьДанныеСообщенийРЭМД(УИДыДляСообщенийРЭМД, МедицинскийДокумент) Экспорт
	
	МДОбъект = МедицинскийДокумент.ПолучитьОбъект();
	
	СпециальностиЭЦППоЭМД = Новый Соответствие;
	Попытка
		ЗаполнитьСпециальностиЭЦППоЭМД(СпециальностиЭЦППоЭМД, МДОбъект, УИДыДляСообщенийРЭМД);
	Исключение КонецПопытки;
	
	ИмяТипа = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	Если ИмяТипа = "Документ.Прием" Тогда
		Для Каждого СтрЭМД Из МДОбъект.ЭМД Цикл
			
			СпециальностиЭЦП = СпециальностиЭЦППоЭМД.Получить(СтрЭМД.УИД);
			
			Если СпециальностиЭЦП = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Либо мы обновляем существующее сообщение РЭМД, либо создаем новое.
			Если ЗначениеЗаполнено(СтрЭМД.СообщениеРЭМД)
				И ЗначениеЗаполнено(СтрЭМД.СообщениеРЭМД.ИдентификаторРЭМД)
				И СтрЭМД.СообщениеРЭМД.ВидДокумента <> СтрЭМД.ВидДокументаЭМД
			Тогда
				// В этом случае помечаем старое сообщение на удаление.
				СтрЭМД.СообщениеРЭМД.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				// Убираем ссылку на него из Приема, т.к. возможно, что новое мы не сможем сгенерировать.
				СтрЭМД.СообщениеРЭМД = Справочники.СообщенияРЭМД.ПустаяСсылка();
			КонецЕсли;
			
			СтрЭМД.СообщениеРЭМД = СформироватьСообщениеПоЭЦПФайла(МДОбъект.Ссылка, СтрЭМД, МДОбъект.РолиИПодписиЭМД, СпециальностиЭЦП);
		КонецЦикла;
		
	ИначеЕсли ИмяТипа = "Документ.ПрохождениеМедосмотра" Тогда
		
		Для Каждого СтрЭМД Из МДОбъект.ЭМД Цикл
			
			СпециальностиЭЦП = СпециальностиЭЦППоЭМД.Получить(СтрЭМД.УИД);
			
			Если СпециальностиЭЦП = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Либо мы обновляем существующее сообщение РЭМД, либо создаем новое.
			Если ЗначениеЗаполнено(СтрЭМД.СообщениеРЭМД)
				И ЗначениеЗаполнено(СтрЭМД.СообщениеРЭМД.ИдентификаторРЭМД)
				И СтрЭМД.СообщениеРЭМД.ВидДокумента <> СтрЭМД.ВидДокументаЭМД
			Тогда
				// В этом случае помечаем старое сообщение на удаление.
				СтрЭМД.СообщениеРЭМД.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				// Убираем ссылку на него из Приема, т.к. возможно, что новое мы не сможем сгенерировать.
				СтрЭМД.СообщениеРЭМД = Справочники.СообщенияРЭМД.ПустаяСсылка();
			КонецЕсли;
			
			СтрЭМД.СообщениеРЭМД = СформироватьСообщениеПоЭЦПФайла(МДОбъект.Ссылка, СтрЭМД, МДОбъект.РолиИПодписиЭМД, СпециальностиЭЦП);
		КонецЦикла;
		
	ИначеЕсли ИмяТипа = "Документ.Рецепт" Тогда
		
		Для Каждого СтрЭМД Из МДОбъект.ЭМД Цикл
			
			СпециальностиЭЦП = СпециальностиЭЦППоЭМД.Получить(СтрЭМД.УИД);
			
			Если СпециальностиЭЦП = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Либо мы обновляем существующее сообщение РЭМД, либо создаем новое.
			Если ЗначениеЗаполнено(СтрЭМД.СообщениеРЭМД)
				И ЗначениеЗаполнено(СтрЭМД.СообщениеРЭМД.ИдентификаторРЭМД)
				И СтрЭМД.СообщениеРЭМД.ВидДокумента <> СтрЭМД.ВидДокументаЭМД
			Тогда
				// В этом случае помечаем старое сообщение на удаление.
				СтрЭМД.СообщениеРЭМД.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				// Убираем ссылку на него из Приема, т.к. возможно, что новое мы не сможем сгенерировать.
				СтрЭМД.СообщениеРЭМД = Справочники.СообщенияРЭМД.ПустаяСсылка();
			КонецЕсли;
			
			СтрЭМД.СообщениеРЭМД = СформироватьСообщениеПоЭЦПФайла(МДОбъект.Ссылка, СтрЭМД, МДОбъект.РолиИПодписиЭМД, СпециальностиЭЦП);
		КонецЦикла;
		
	//ИначеЕсли ИмяТипа = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
	//	
	//	ВидДокументаВК = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидРЭМДВрачебнойКомиссии();
	//	
	//	Если ЗначениеЗаполнено(МДОбъект.СообщениеРЭМД)
	//		И ЗначениеЗаполнено(МДОбъект.СообщениеРЭМД.ИдентификаторРЭМД)
	//		И МДОбъект.СообщениеРЭМД.ВидДокумента <> ВидДокументаВК
	//	Тогда
	//		// В этом случае помечаем старое сообщение на удаление.
	//		МДОбъект.СообщениеРЭМД.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	//		// Убираем ссылку на него из Приема, т.к. возможно, что новое мы не сможем сгенерировать.
	//		МДОбъект.СообщениеРЭМД = Справочники.СообщенияРЭМД.ПустаяСсылка();
	//	КонецЕсли;
	//	
	//	СтрЭМД = Новый Структура("ПутьКФайлуВАрхиве, ВидДокументаЭМД, СообщениеРЭМД, УИД_Шаблона, УИД", МДОбъект.ПутьКФайлуВАрхиве, ВидДокументаВК, МДОбъект.СообщениеРЭМД, "", МДОбъект.Ссылка.УникальныйИдентификатор());
	//	МДОбъект.СообщениеРЭМД = СформироватьСообщениеПоЭЦПФайла(МДОбъект.Ссылка, СтрЭМД, МДОбъект.РолиИПодписиЭМД);
	КонецЕсли;
	
	МДОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

// Возвращает идентификатор сотрудника из федерального регистра ФРМР.
Функция ПолучитьИдентификаторСотрудникаДляРЭМД(СотрудникСсылка) Экспорт
	
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		Возврат Строка(СотрудникСсылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьOIDИНаменованиеМедицинскойОрганизации()
	
	Филиал = УправлениеНастройками.ПолучитьУчетнуюПолитику().Филиал;
	Результат = Новый Структура("Наименование, КодOIDМедицинскойОрганизации", Филиал.Организация.Наименование, Филиал.Организация.МедицинскаяОрганизация.OIDОрганизации);
	Возврат Результат;
	
КонецФункции

// Возвращает идентификатор пациента для федерального регистра ИЭМК.
Функция ПолучитьИдентификаторПациентаДляИЭМК(ПациентСсылка) Экспорт
	
	Возврат Строка(ПациентСсылка.УникальныйИдентификатор());
	
КонецФункции

Функция ПолучитьOidПодразделения(Подразделение) Экспорт
	
	РеквизитыПодразделения = Новый Структура("OIDКлассификатораМинздрава, Наименование, Родитель", Подразделение.OIDКлассификатораМинздрава, Подразделение.Наименование, Подразделение.Родитель.Ссылка);
	Если ЗначениеЗаполнено(РеквизитыПодразделения.OIDКлассификатораМинздрава) Тогда
		Возврат РеквизитыПодразделения;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения.Родитель) Тогда
		Возврат ПолучитьOidПодразделения(РеквизитыПодразделения.Родитель);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает код пола пациента для РЭМД.
Функция ПолПациентаВКодРЭМД(Пол)
	
	Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		Возврат "1";
	ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		Возврат "2";
	Иначе
		Возврат "3";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗапроса

// Операция федерального веб-сервиса РЭМД «registerDocument».
Функция ТекстXMLРегистрацияДокументаВРЭМД(Клиент = Истина, Отчество = Ложь, СНИЛС = Истина, ЕНП = Истина, ДУЛ = Ложь, replace = Ложь, КоличествоПодписей = 1, version = Ложь)
	
	ШаблонТекста =
		"<registerDocumentRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|<messageId>[MSG_ID]</messageId>
		|<localUid>[DOCUMENT_ID]</localUid>
		|<kind>[ВИД_ДОКУМЕНТА]</kind>
		|<system>[ИДЕНТИФИКАТОР_МИС_В_РЭМД]</system>
		|<organization>[OID_MO]</organization>
		|<department>
		|	<localId>[DEP_OID]</localId>
		|	<name>[DEP_NAME]</name>
		|</department>
		|<documentNumber>[НОМЕР_ДОКУМЕНТА]</documentNumber>
		|<creationDateTime>[ДАТА_ДОКУМЕНТА]</creationDateTime>
		|%1
		|{{<orgSignature>
		|		<data>[ПОДПИСЬ_МО]</data>
		|		<checksum>[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_МО]</checksum>
		|</orgSignature>}}
		|<description>[ОПИСАНИЕ]</description>
		|%2
		|%3
		|</registerDocumentRequest>";
	
	Если Клиент Тогда
		ШаблонФрагментаКлиент ="
		|<patient>
		|	<surname>[ФАМИЛИЯ]</surname>
		|	<name>[ИМЯ]</name>
		|	%1
		|	<birthDate>[ДАТАРОЖДЕНИЯ]</birthDate>
		|	<gender>[ПОЛ]</gender>
		|	<localId>[PATIENT_ID]</localId>
		|	%2
		|	%3
		|	%4
		|</patient>";
		
		ФрагментОтечство = ?(Отчество,	"<patrName>[ОТЧЕСТВО]</patrName>", "");
		ФрагментСНИЛС	 = ?(СНИЛС,		"<snils>[СНИЛС_НОМЕР]</snils>", "");
		ФрагментЕНП		 = ?(ЕНП,		"<enp>[ЕДИНЫЙ_НОМЕР_ПОЛИСА]</enp>", "");
		ФрагментДУЛ		 = ?(ДУЛ,		"<otherId><type>[ДУЛ_ТИП]</type><number>[ДУЛ_НОМЕР]</number></otherId>", "");
		
		ФрагментКлиент = СтрШаблон(ШаблонФрагментаКлиент, ФрагментОтечство, ФрагментСНИЛС, ФрагментЕНП, ФрагментДУЛ);
	Иначе
		ФрагментКлиент = "";
	КонецЕсли;
	
	ТекстПодписи = "
	|<personalSignature>
	|	<signer>
	|		<localId>[ИДЕНТИФИКАТОР_СОТРУДНИКА_%НОМЕР%]</localId>
	|		<role>[РОЛЬ_СОТРУДНИКА_%НОМЕР%]</role>
	|		<surname>[ФАМИЛИЯ_СОТРУДНИКА_%НОМЕР%]</surname>
	|		<name>[ИМЯ_СОТРУДНИКА_%НОМЕР%]</name>
	|		{{<patrName>[ОТЧЕСТВО_СОТРУДНИКА_%НОМЕР%]</patrName>}}
	|		{{<birthDate>[ДАТАРОЖДЕНИЯ_СОТРУДНИКА_%НОМЕР%]</birthDate>}}
	|		<snils>[СНИЛС_СОТРУДНИКА_%НОМЕР%]</snils>
	|		<position>[КОД_ДОЛЖНОСТИ_%НОМЕР%]</position>
	|		{{<speciality>[СПЕЦИАЛИЗАЦИЯ_СОТРУДНИКА_%НОМЕР%]</speciality>}}
	|		{{<email>[EMAIL_СОТРУДНИКА_%НОМЕР%]</email>}}
	|		{{<phone>[ТЕЛЕФОН_СОТРУДНИКА_%НОМЕР%]</phone>}}
	|	</signer>
	|	<signature>
	|		<data>[ПОДПИСЬ_%НОМЕР%]</data>
	|		<checksum>[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_%НОМЕР%]</checksum>
	|	</signature>
	|</personalSignature>";
	
	ФрагментПодписей = ИнтеграцияЕГИСЗСлужебныйСервер.ПовторитьФрагментТекста(КоличествоПодписей, ТекстПодписи);
	
	Если replace Тогда
		
		ШаблонФрагментаReplace = "
		|<replace>
		|	<root>[EMDRID_ОБНОВЛЯЕМОГО]</root>
		|	%1
		|</replace>";
		
		ФрагментVersion = ?(version, "{{<version>[ВЕРСИЯ_ОБНОВЛЯЕМОГО]</version>}}", "");
		ФрагментReplace = СтрШаблон(ШаблонФрагментаReplace, ФрагментVersion);
	Иначе
		ФрагментReplace = "";
	КонецЕсли;
	
	Текст = СтрШаблон(ШаблонТекста, ФрагментКлиент, ФрагментПодписей, ФрагментReplace);
	
	Возврат Текст;
	
КонецФункции

// Операция федерального веб-сервиса РЭМД «demandContent».
Функция ТекстXMLЗаявкаНаПолучениеДокументаИзРЭМД()
	
	Текст =
		"<demandContentRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|	<messageId>[MSG_ID]</messageId>
		|	<emdrId>[EMDRID]</emdrId>
		|</demandContentRequest>";
	
	Возврат Текст;

КонецФункции

// Операция федерального веб-сервиса РЭМД «getMetadata».
Функция ТекстXMLПолучитьМетаданныеДокументаИзРЭМД()
	
	Текст =
		"<getMetadataRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|	<emdrId>[EMDRID]</emdrId>
		|	{{<grantingEmdrId>[GRANTING_EMDRID]</grantingEmdrId>}}
		|</getMetadataRequest>";
	
	Возврат Текст;
	
КонецФункции

// Операция федерального веб-сервиса РЭМД «searchRegistryItem».
Функция ТекстXMLПоискДокументовВРЭМД(Организация = Истина, УидДокумента = Истина, ВидДокумента = Истина, НомерДокумента = Истина, ДатаДокумента = Истина, Пациент = Истина, Снилс = Истина, Страница = Истина)
	
	Текст =
		"<searchRegistryItemRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">"
		+ ?(Организация, "<organization>[OID_MO]</organization>", "")
		+ ?(УидДокумента, "<localUid>[DOCUMENT_ID]</localUid>", "")
		+ ?(ВидДокумента, "<kind>[ВИД_ДОКУМЕНТА]</kind>", "")
		+ ?(НомерДокумента, "<documentNumber>[НОМЕР_ДОКУМЕНТА]</documentNumber>", "")
		+ ?(ДатаДокумента, "<creationDate>[ДАТА_ДОКУМЕНТА]</creationDate>", "")
		+ ?(Пациент, "<patientId>[PATIENT_ID]</patientId>", "")
		+ ?(Снилс, "<patientSnils>[СНИЛС_НОМЕР]</patientSnils>", "")
		+ ?(Страница, "<page>[НОМЕР_СТРАНИЦЫ]</page>", "") + "
		|</searchRegistryItemRequest>";
	
	Возврат Текст;
	
КонецФункции

Функция ЭкранироватьЗначение(Строка)
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("q");
	ЗаписьXML.ЗаписатьАтрибут("s", Строка(Строка));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	XML = ЗаписьXML.Закрыть();
	
	Длина = стрДлина(XML);
	Если Длина > 8 Тогда
		Результат = Сред(XML, 7, Длина - 9);
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтправкаЗапроса

Функция РазобратьОтветРЭМД(ОтветОтСервера, Адрес)
	
	ТекстОтвета = ОтветОтСервера.ПолучитьТелоКакСтроку();
	
	ЧитаемXML = Новый ЧтениеXML;
	ЧитаемXML.УстановитьСтроку(ТекстОтвета);
	
	ПостроительDOM = Новый ПостроительDOM;
	DOM = ПостроительDOM.Прочитать(ЧитаемXML);
	
	Результат = Новый Структура("ЕстьОшибка, Детали, ТекстОшибки, ДостигнутЛимит", Ложь, Новый Массив, "", Ложь);
	
	Статус = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(DOM, "status");
	
	Если НРег(Статус) = "error" Тогда
		
		Результат.ЕстьОшибка = Истина;
		
		ДеталиОтвета = DOM.ПолучитьЭлементыПоИмени("errors");
		
		Для Каждого ДетальОтвета Из ДеталиОтвета Цикл
			ТэгиItem = ДетальОтвета.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item Из ТэгиItem Цикл
				Деталь = Новый Структура("Код, Сообщение");
				Деталь.Код = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "code");
				Деталь.Сообщение = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "message");
				
				Результат.Детали.Добавить(Деталь);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ОтветОтСервера.КодСостояния <> 200 Тогда
		Результат.ЕстьОшибка = Истина;
		
		ОписаниеОшибки = ПолучитьТекстОшибкиSoap(ОтветОтСервера);
		ШаблонТекста = НСтр("ru = 'Обращение по адресу ""%1"" завершилось с ошибкой. Код ответа %2. %3'");
		ТекстОписанияОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), "Ошибка: " + ОписаниеОшибки, "");
		Текст = СтрШаблон(ШаблонТекста, Адрес, ОтветОтСервера.КодСостояния, ТекстОписанияОшибки);
		
		Результат.ТекстОшибки = Текст;
		Результат.ДостигнутЛимит = ДостигнутЛимит(DOM);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДостигнутЛимит(DOM)
	
	Попытка
		УзлыОшибки = DOM.ПолучитьЭлементыПоИмени("Fault");
		Если УзлыОшибки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		УзлыСубкода = УзлыОшибки[0].ПолучитьЭлементыПоИмени("Subcode");
		Если УзлыСубкода.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		УзлыЗначенияСубкода = УзлыСубкода[0].ПолучитьЭлементыПоИмени("Value");
		Если УзлыЗначенияСубкода.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат СтрНайти(ВРег(УзлыЗначенияСубкода[0].ТекстовоеСодержимое), "GW-066") > 0;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция СоздатьОтветСОшибкой(КодОшибки, Сообщение, Шаблон)

	Данные = Новый Соответствие;
	
	Данные["[КОД_ОШИБКИ]"] = КодОшибки;
	Данные["[СООБЩЕНИЕ]"] = Сообщение;
	
	ТелоОтвета = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Возврат ТелоОтвета;
	
КонецФункции

Функция ПолучитьИдентификаторДокументаПоУИДСообщения(УИДСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	РегистрСведений.ИнтеграцияЕГИСЗСообщенияРЭМД КАК ИнтеграцияЕГИСЗСообщенияРЭМД
		|ГДЕ
		|	ИнтеграцияЕГИСЗСообщенияРЭМД.УИДСообщения = &УИДСообщения";
	Запрос.УстановитьПараметр("УИДСообщения", УИДСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторДокумента;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаписатьДанныеОтветаВРегистр(УИДСообщения, ДатаОтвета, ИдентификаторРЭМД, ТекстОшибки, Файл)
	
	Набор = РегистрыСведений.ИнтеграцияЕГИСЗСообщенияРЭМД.СоздатьНаборЗаписей();
	Набор.Отбор.УИДСообщения.Установить(УИДСообщения);
	Набор.Прочитать();
	
	Если Набор.Количество() = 0 Тогда
		Возврат Новый Структура("Код, Сообщение", "UNKNOWN_MSGID", СтрШаблон(НСтр("ru='Не удалось найти сообщение, отправленное в РЭМД, с идентификатором: %1'"), УИДСообщения));
	КонецЕсли;
	
	Набор[0].УИДСообщения = УИДСообщения;
	Набор[0].ДатаОтвета = ДатаОтвета;
	Набор[0].ИдентификаторРЭМД = ИдентификаторРЭМД;
	Набор[0].ТекстОшибки = ТекстОшибки;
	Если ЗначениеЗаполнено(Файл) Тогда
		Набор[0].ПутьКФайлу = Файл;
	КонецЕсли;
	Набор[0].ТипВызова = Перечисления.ТипВызоваРЭМД.Получение;
	Набор.Записать(Истина);
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаписатьДанныеОтправленногоСообщенияВРегистр(УИДСообщения, ДатаСообщения, ИдентификаторДокумента, ИдентификаторРЭМД = Неопределено, Объект = Неопределено, ТекстОшибки = Неопределено) Экспорт
	
	Если ДатаСообщения = Неопределено Тогда
		ДатаСообщения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Набор = РегистрыСведений.ИнтеграцияЕГИСЗСообщенияРЭМД.СоздатьНаборЗаписей();
	
	Набор.Отбор.УИДСообщения.Установить(УИДСообщения);
	
	Набор.Добавить();
	
	Набор[0].УИДСообщения = УИДСообщения;
	Набор[0].ДатаСообщения = ДатаСообщения;
	Набор[0].ИдентификаторДокумента = ИдентификаторДокумента;
	Набор[0].ТипВызова = Перечисления.ТипВызоваРЭМД.Отправка;
	
	Если ЗначениеЗаполнено(ИдентификаторРЭМД) Тогда
		Набор[0].ИдентификаторРЭМД = ИдентификаторРЭМД;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Набор[0].Объект = Объект;
	КонецЕсли;
	
	Если ТекстОшибки <> Неопределено Тогда
		Набор[0].ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	
	Набор.Записать();
	
КонецПроцедуры

Функция ТекстXMLGetDocumentFileResponse(Ошибка = Ложь)
	
	Если Ошибка = Ложь Тогда
		Текст =
			"<ns3:getDocumentFileResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|	<ns3:status>success</ns3:status>
			|		<ns3:documentFile>
			|		<ns3:system>[ИДЕНТИФИКАТОР_МИС_В_РЭМД]</ns3:system>
			|		<ns3:organization>[OID_MO]</ns3:organization>
			|		<ns3:localUid>[DOCUMENT_ID]</ns3:localUid>
			|		<ns3:file>
			|			<ns3:data>[ТЕЛО_ДОКУМЕНТА]</ns3:data>
			|			<ns3:checksum>[КОНТРОЛЬНАЯ_СУММА_ДОКУМЕНТА]</ns3:checksum>
			|		</ns3:file>
			|	</ns3:documentFile>
			|</ns3:getDocumentFileResponse>";
	Иначе
		Текст =
			"<ns3:getDocumentFileResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|	<ns3:status>error</ns3:status>
			|	<ns3:errors>
			|		<ns3:item>
			|			<ns3:code>[КОД_ОШИБКИ]</ns3:code>
			|			<ns3:message>[СООБЩЕНИЕ]</ns3:message>
			|		</ns3:item>
			|	</ns3:errors>
			|</ns3:getDocumentFileResponse>";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

// Используется в регламентном задании.
Процедура УдалитьСтарыеДокументыИзАрхиваЭМД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	НайтиИУдалитьСтарыеДокументыИзАрхиваЭМД();
	
КонецПроцедуры

Процедура НайтиИУдалитьСтарыеДокументыИзАрхиваЭМД()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияРЭМД.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
			|ГДЕ
			|	СообщенияРЭМД.ХранитьДо < &ТекущаяДата
			|	И СообщенияРЭМД.ХранитьДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И СообщенияРЭМД.ИдентификаторРЭМД <> """"
			|	И СообщенияРЭМД.ПометкаУдаления = ЛОЖЬ";
			
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				// Проверка актуальности значения реквизита ХранитьДо.
				Результат = ПолучитьДанныеОДокументеИзРЭМД(Объект.ИдентификаторРЭМД);
			Исключение
				Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка);
				ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации("Не получить значение storeTillDate из РЭМД для документа: " + Объект.ИдентификаторРЭМД, УровеньЖурналаРегистрации.Ошибка);
				Продолжить;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Результат.storeTillDate) Тогда
				storeTillDate = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьДатуИзСтроки(Результат.storeTillDate, Истина);
				
				Если Не ЗначениеЗаполнено(storeTillDate) Тогда
					ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации("Не получить значение storeTillDate из РЭМД для документа: " + Объект.ИдентификаторРЭМД, УровеньЖурналаРегистрации.Ошибка);
					Продолжить;
				КонецЕсли;
				
				Если storeTillDate <> Объект.ХранитьДо Тогда
					Объект.ХранитьДо = storeTillDate;
					Объект.Записать();
				КонецЕсли;
			Иначе
				ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации("Не удалось получить значение storeTillDate из РЭМД для документа: " + Объект.ИдентификаторРЭМД, УровеньЖурналаРегистрации.Ошибка);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ХранитьДо) И Объект.ХранитьДо < НачалоДня(ТекущаяДатаСеанса()) Тогда
				УдаляемыеФайлы = Новый Массив;
				Если ЗначениеЗаполнено(Объект.ПутьКФайлуЭМД) Тогда
					УдаляемыеФайлы.Добавить(Объект.ПутьКФайлуЭМД);
				КонецЕсли;
				
				Для Каждого строкаТЧ Из Объект.ЭлектронныеПодписиЭМД Цикл
					Если ЗначениеЗаполнено(строкаТЧ.ПутьКФайлуПодписиЭМД) Тогда
						УдаляемыеФайлы.Добавить(строкаТЧ.ПутьКФайлуПодписиЭМД);
					КонецЕсли;
				КонецЦикла;
				
				Объект.УстановитьПометкуУдаления(Истина);
				
				УдалитьФайлыИзАрхиваЭМД(УдаляемыеФайлы);
			КонецЕсли;
			
		КонецЦикла;
	
	Исключение
		Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());   
		ИнтеграцияЕГИСЗСлужебныйСервер.ЗаписатьСобытиеВЖурналРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

Функция РазобратьРезультатЗапросаДанныхДокумента(ОтветОтСервера)
	
	Результат = Новый Структура("Предупреждения, emdrId, registrationDate, storeTillDate", Новый Массив);
	
	XML = ОтветОтСервера.ПолучитьТелоКакСтроку();
	
	ЧитаемXML = Новый ЧтениеXML;
	ЧитаемXML.УстановитьСтроку(XML);
	
	ПостроительDOM = Новый ПостроительDOM;
	DOM = ПостроительDOM.Прочитать(ЧитаемXML);
	
	Результат.emdrId = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(DOM, "emdrId");
	Результат.registrationDate = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(DOM, "registrationDate");
	Результат.storeTillDate = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(DOM, "storeTillDate");
	
	ТэгиRegistrationWarnings = DOM.ПолучитьЭлементыПоИмени("http://egisz.rosminzdrav.ru/iehr/emdr/service/","registrationWarnings");
	
	Если ТэгиRegistrationWarnings.Количество() > 0 Тогда
		RegistrationWarnings  = ТэгиRegistrationWarnings[0];
		
		ТэгиItem = RegistrationWarnings.ПолучитьЭлементыПоИмени("item");
		
		Для Каждого Item Из ТэгиItem Цикл
			Деталь = Новый Структура("Код, Сообщение");
			Деталь.Код = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "code");
			Деталь.Сообщение = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Item, "message");
			
			Результат.Предупреждения.Добавить(Деталь);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьРезультатЗапросаМетаданныхДокумента(ТелоОтветаОтСервера)
	
	Результат = Новый Структура;
	
	XML = ТелоОтветаОтСервера;
	
	ЧитаемXML = Новый ЧтениеXML;
	ЧитаемXML.УстановитьСтроку(XML);
	
	ПостроительDOM = Новый ПостроительDOM;
	DOM = ПостроительDOM.Прочитать(ЧитаемXML);
	
	Найденные = DOM.ПолучитьЭлементыПоИмени("http://egisz.rosminzdrav.ru/iehr/emdr/service/","metadata");
	
	Если Найденные.Количество() > 0 Тогда
		ТэгMetadata = Найденные[0];
		Dom2Структура(ТэгMetadata, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура Dom2Структура(Dom, Результат)
	
	Для Каждого Узел Из Dom.ДочерниеУзлы Цикл
	
		ИмяУзла = УбратьПрефиксИзИмени(Узел.ИмяУзла);
	
		Если Узел.ДочерниеУзлы.Количество() > 0 И Узел.ДочерниеУзлы[0].ИмяУзла <> "#text" Тогда
			Результат.Вставить(ИмяУзла, Новый Структура);
			Dom2Структура(Узел, Результат[ИмяУзла]);
		Иначе
			Результат.Вставить(ИмяУзла, Узел.ТекстовоеСодержимое);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УбратьПрефиксИзИмени(ИмяУзла)
	
	Номер = стрНайти(ИмяУзла, ":");
	Если Номер > 0 Тогда
		Возврат Прав(ИмяУзла, стрДлина(ИмяУзла) - Номер);
	Иначе
		Возврат ИмяУзла;
	КонецЕсли;
	
КонецФункции

Функция РазобратьРезультатПоискаДокументов(ТелоОтветаОтСервера)
	
	Результат = Новый Структура("Найденные, КоличествоЭлементовНаСтранице, ЕстьЕщеСтраницы", Новый Массив);
	
	XML = ТелоОтветаОтСервера;
	
	ЧитаемXML = Новый ЧтениеXML;
	ЧитаемXML.УстановитьСтроку(XML);
	
	ПостроительDOM = Новый ПостроительDOM;
	DOM = ПостроительDOM.Прочитать(ЧитаемXML);
	
	ТэгиItem = DOM.ПолучитьЭлементыПоИмени("http://egisz.rosminzdrav.ru/iehr/emdr/service/","item");
	
	Для Каждого item Из ТэгиItem Цикл
		Документ = Новый Структура;
		
		Для Каждого Узел Из item.ДочерниеУзлы Цикл
			ИмяУзла = УбратьПрефиксИзИмени(Узел.ИмяУзла);
			Документ.Вставить(ИмяУзла, Узел.ТекстовоеСодержимое);
		КонецЦикла;
		
		Результат.Найденные.Добавить(Документ);
	КонецЦикла;
	
	Результат.КоличествоЭлементовНаСтранице = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(DOM, "itemsPerPage");
	Результат.ЕстьЕщеСтраницы = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(DOM, "hasNext");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстXMLПолучитьДанныеОДокументеИзРЭМД()
	
	Текст =
		"<getRegistryItemRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|	<emdrId>[EMDRID]</emdrId>
		|</getRegistryItemRequest>";
	
	Возврат Текст;
	
КонецФункции

Процедура УдалитьФайлыИзАрхиваЭМД(УдаляемыеФайлы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Путь Из УдаляемыеФайлы Цикл
		Если ЗначениеЗаполнено(Путь) Тогда
			ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Путь);
			Файл = Новый Файл(ПолныйПуть);
			Если Файл.Существует() И Файл.ЭтоФайл() Тогда
				УдалитьФайлы(ПолныйПуть);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРасширениеФайлаПоМетаданным(МетаданныеДокумента)
	
	Если МетаданныеДокумента.contentType = "1" Тогда
		Возврат ".pdf";
	Иначе
		Возврат ".xml";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДДФайловПоПриему(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам)
	
	Для Каждого СтрокаЭМД Из МедицинскийДокумент.ЭМД Цикл
		ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(СтрокаЭМД.ПутьКФайлуВАрхиве);
		ДанныеРЭМДПоШаблонам.Вставить(СтрокаЭМД.УИД_Шаблона, Новый Структура("ПутьКФайлуВАрхиве, УИД", ПолныйПуть, СтрокаЭМД.УИД));
		
		Если УИДы_Шаблонов.Найти(СтрокаЭМД.УИД_Шаблона) <> Неопределено Тогда
			ДДФайлов.Вставить(СтрокаЭМД.УИД_Шаблона, ИнтеграцияЕГИСЗВызовСервера.ПолучитьДДФайла(ПолныйПуть));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДДФайловПоПМО(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам)
	
	Для Каждого СтрокаЭМД Из МедицинскийДокумент.ЭМД Цикл
		
		ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(СтрокаЭМД.ПутьКФайлуВАрхиве);
		ДанныеРЭМДПоШаблонам.Вставить(СтрокаЭМД.УИД_Шаблона, Новый Структура("ПутьКФайлуВАрхиве, УИД", ПолныйПуть, СтрокаЭМД.УИД));
		
		Если УИДы_Шаблонов.Найти(СтрокаЭМД.УИД_Шаблона) <> Неопределено Тогда
			ДДФайлов.Вставить(СтрокаЭМД.УИД_Шаблона, ИнтеграцияЕГИСЗВызовСервера.ПолучитьДДФайла(ПолныйПуть));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДДФайловПоВК(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам)
	
	Для Каждого УИД_Шаблона Из УИДы_Шаблонов Цикл
		
		ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(МедицинскийДокумент.ПутьКФайлуВАрхиве);
		ДанныеРЭМДПоШаблонам.Вставить(УИД_Шаблона, Новый Структура("ПутьКФайлуВАрхиве, УИД", ПолныйПуть, МедицинскийДокумент.УникальныйИдентификатор()));
		
		ДДФайлов.Вставить(УИД_Шаблона, ИнтеграцияЕГИСЗВызовСервера.ПолучитьДДФайла(ПолныйПуть));
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДДФайловПоРецепту(МедицинскийДокумент, УИДы_Шаблонов, ДДФайлов, ДанныеРЭМДПоШаблонам)
	
	Для Каждого СтрокаЭМД Из МедицинскийДокумент.ЭМД Цикл
		ПолныйПуть = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(СтрокаЭМД.ПутьКФайлуВАрхиве);
		ДанныеРЭМДПоШаблонам.Вставить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор(), Новый Структура("ПутьКФайлуВАрхиве, УИД", ПолныйПуть, СтрокаЭМД.УИД));
		ДДФайлов.Вставить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор(), ИнтеграцияЕГИСЗВызовСервера.ПолучитьДДФайла(ПолныйПуть));
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСообщениеПоЭЦПФайла(Ссылка, СтрокаЭМД, РолиИПодписиЭМД, СпециальностиПоЭМД)
	
	// Найдем все установленные подписи по данному шаблону ЭМД.
	ОтборПодписей = Новый Структура("УИД_ЭМД", СтрокаЭМД.УИД);
	НайденныеПодписи = РолиИПодписиЭМД.НайтиСтроки(ОтборПодписей);
	Если НайденныеПодписи.Количество() <> 0 Тогда
		// Модифицировать процедуру подписания, чтобы она принимала на вход массив структур вида УИД_ЭЦП + РольСотрудника вместо пары параметров (УИД_ЭЦП; РольСотрудника)
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИмяФайла",			СтрокаЭМД.ПутьКФайлуВАрхиве);
		ДанныеФайла.Вставить("ВидДокументаШаблона",	СтрокаЭМД.ВидДокументаЭМД);
		ДанныеФайла.Вставить("СообщениеРЭМД",		СтрокаЭМД.СообщениеРЭМД);
		ДанныеФайла.Вставить("УИД_Шаблона",			СтрокаЭМД.УИД_Шаблона);
		
		Справочники.СообщенияРЭМД.СформироватьНовоеСообщениеПоЭЦПФайла(Ссылка, ДанныеФайла, НайденныеПодписи, СпециальностиПоЭМД);
		Возврат ДанныеФайла.СообщениеРЭМД;
	Иначе
		// Ошибка?
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗаголовокЭМДЗаключенияМедосмотра()
	
	Возврат НСтр("ru='Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования)'");
	
КонецФункции

Функция ЗаголовокЭМДВрачебнойКомиссии()
	
	Возврат НСтр("ru='Выписка из протокола врачебной комиссии'");
	
КонецФункции

Функция ЗаголовокЭМДРецепта()
	
	Возврат НСтр("ru='Рецепт на лекарственный препарат'");
	
КонецФункции

Функция ПолучитьТекстОшибкиSoap(ТелоОтветаСервера)
	
	ТекстОтвета = ТелоОтветаСервера.ПолучитьТелоКакСтроку();
	Попытка
		ЧитаемXML = Новый ЧтениеXML;
		ЧитаемXML.УстановитьСтроку(ТекстОтвета);
		
		ПостроительDOM = Новый ПостроительDOM;
		DOM = ПостроительDOM.Прочитать(ЧитаемXML);
		
		FaultТэги = DOM.ПолучитьЭлементыПоИмени("Fault");
		
		Результат = Неопределено;
		Если FaultТэги.Количество() > 0 Тогда
			TextТэги = FaultТэги[0].ПолучитьЭлементыПоИмени("Text");
			Если TextТэги.Количество() > 0 Тогда
				Результат = TextТэги[0].ТекстовоеСодержимое;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	Исключение
		Возврат ТекстОтвета;
	КонецПопытки;
	
КонецФункции

Процедура УдалитьКэшОтветаПоЗапросуПолученияФайла(СообщениеРЭМД)
	
	Если ЗначениеЗаполнено(СообщениеРЭМД) Тогда
		ИнтеграцияЕГИСЗСервер.УдалитьКэшОтветаПоЗапросу(СообщениеРЭМД.Документ.Филиал.Организация.МедицинскаяОрганизация, Перечисления.ПодсистемыЕГИСЗ.РЭМД, "getDocumentFile", СообщениеРЭМД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьКэшиОтветовНаЗапросыПолученияФайловПоСообщениям(СообщенияРЭМД) Экспорт
	
	Если ТипЗнч(СообщенияРЭМД) = Тип("Массив") Тогда
		мСообщения = СообщенияРЭМД;
	Иначе
		мСообщения = Новый Массив;
		мСообщения.Добавить(СообщенияРЭМД);
	КонецЕсли;
	
	КэшируемыеСообщения = Новый Массив;
	Для Каждого СообщениеРЭМД Из мСообщения Цикл
		Если ИнтеграцияЕГИСЗСерверПовтИсп.КэшироватьОтветыРЭМД(СообщениеРЭМД.Документ.Филиал) Тогда
			КэшируемыеСообщения.Добавить(СообщениеРЭМД);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем до отправки и до запуска фонового задания, чтобы исключить возможность отправки неактуального текста
	УдалитьКэшОтветовНаЗапросыПолученияФайловСообщенийПередРегистрации(КэшируемыеСообщения);
	
	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(КэшируемыеСообщения);
	
	ФоновыеЗадания.Выполнить("ИнтеграцияЕГИСЗ_РЭМД.СохранитьКэшиОтветовНаЗапросыПолученияФайловПоСообщениямВФоне", ПараметрыФЗ, Новый УникальныйИдентификатор(), НСтр("ru='РЭМД: Кэширование ответов на запросы получения файлов'"));
	
КонецПроцедуры

Процедура УдалитьКэшОтветовНаЗапросыПолученияФайловСообщенийПередРегистрации(КэшируемыеСообщения)
	
	НачатьТранзакцию();
	Для Каждого СообщениеРЭМД Из КэшируемыеСообщения Цикл
		НЗ = РегистрыСведений.ИнтеграцияЕГИСЗКэшОтветов.СоздатьНаборЗаписей();
		НЗ.Отбор.Запрос.Установить("getDocumentFile");
		НЗ.Отбор.СообщениеРЭМД.Установить(СообщениеРЭМД);
		НЗ.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура СохранитьКэшиОтветовНаЗапросыПолученияФайловПоСообщениямВФоне(СообщенияРЭМД) Экспорт
	
	УдалитьКэшОтветовНаЗапросыПолученияФайловЗарегистрированныхДокументов();
	
	Для Каждого СообщениеРЭМД Из СообщенияРЭМД Цикл
		Если ЗначениеЗаполнено(СообщениеРЭМД) Тогда
			Попытка
				СохранитьКэшОтветаНаЗапросПолученияФайлов(СообщениеРЭМД);
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьКэшОтветовНаЗапросыПолученияФайловЗарегистрированныхДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнтеграцияЕГИСЗКэшОтветов.СообщениеРЭМД КАК СообщениеРЭМД
		|ИЗ
		|	РегистрСведений.ИнтеграцияЕГИСЗКэшОтветов КАК ИнтеграцияЕГИСЗКэшОтветов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|		ПО (СообщенияРЭМД.Ссылка = ИнтеграцияЕГИСЗКэшОтветов.СообщениеРЭМД)
		|			И (СообщенияРЭМД.ИдентификаторРЭМД <> """")
		|			И (ИнтеграцияЕГИСЗКэшОтветов.Запрос = ""getDocumentFile"")
		|			И (НЕ СообщенияРЭМД.Отправить)
		|			И (НЕ СообщенияРЭМД.Обновить)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НЗ = РегистрыСведений.ИнтеграцияЕГИСЗКэшОтветов.СоздатьНаборЗаписей();
		НЗ.Отбор.Запрос.Установить("getDocumentFile");
		НЗ.Отбор.СообщениеРЭМД.Установить(Выборка.СообщениеРЭМД);
		НЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьКэшОтветаНаЗапросПолученияФайлов(СообщениеРЭМД)
	
	// Если на момент вызова процедуры документ уже зарегистирован
	Если ЭМДЗарегистрирован(СообщениеРЭМД) Тогда
		Возврат;
	КонецЕсли;
	
	Организация = СообщениеРЭМД.Документ.Филиал.Организация;
	СертификатЭЦП = ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("СертификатЭЦППодписиSOAPСообщений",, Организация.МедицинскаяОрганизация);
	
	Если Не ЗначениеЗаполнено(СертификатЭЦП)
		Или СертификатЭЦП.ДействителенДо <= ТекущаяДата()
	Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = Справочники.СообщенияРЭМД.ПолучитьДанныеДокументаПоУИДСообщения(СообщениеРЭМД.ИдентификаторДокумента);
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОрганизации = Новый Структура("Наименование, КодOIDМедицинскойОрганизации", Организация.НаименованиеПолное, Организация.МедицинскаяОрганизация.OIDОрганизации);
	ТелоОтвета = ПолучитьТелоОтвета(РеквизитыОрганизации, ДанныеФайла);
	
	ШаблонКонверта =
		"<soap:Envelope xmlns:soap=""http://www.w3.org/2003/05/soap-envelope"">
		|	<soap:Header>
		|		<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:%1</MessageID>
		|	</soap:Header>
		|	<soap:Body>
		|		%2
		|	</soap:Body>
		|</soap:Envelope>";
	
	Конверт = СтрШаблон(ШаблонКонверта, Строка(Новый УникальныйИдентификатор), СтрЗаменить(ТелоОтвета, Символы.ПС, Символы.ПС + Символы.Таб + Символы.Таб));
	ТекстНеподписанногоСообщения = Конверт;
	ТекстПодписанногоСообщения = ИнтеграцияЕГИСЗ_ЭЦП.ПодписатьSoapСообщение(Конверт, СертификатЭЦП);
	
	Если ТекстПодписанногоСообщения = ТекстНеподписанногоСообщения
		Или ИнтеграцияЕГИСЗСервер.ТекстСообщенияСодержитНезаполненныеТегиСертификата(ТекстПодписанногоСообщения)
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭМДЗарегистрирован(СообщениеРЭМД) Тогда // Если документ успел зарегистрироваться, пока текст подписывался
		ИнтеграцияЕГИСЗСервер.СохранитьКэшОтветаПоЗапросу(Организация.МедицинскаяОрганизация, Перечисления.ПодсистемыЕГИСЗ.РЭМД, "getDocumentFile", СообщениеРЭМД, ТекстПодписанногоСообщения, СертификатЭЦП.ДействителенДо);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭМДЗарегистрирован(СообщениеРЭМД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ИнтеграцияЕГИСЗСообщенияРЭМД.УИДСообщения) КАК Количество
		|ИЗ
		|	РегистрСведений.ИнтеграцияЕГИСЗСообщенияРЭМД КАК ИнтеграцияЕГИСЗСообщенияРЭМД
		|ГДЕ
		|	ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента = &ИдентификаторДокумента
		|	И ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторРЭМД <> """"";
	
	Запрос.УстановитьПараметр("ИдентификаторДокумента", СообщениеРЭМД.ИдентификаторДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество > 0;
	
КонецФункции

Функция ПравилоПодписиТребуетСпециализацию(РольРЭМД, ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭМДПравилаПодписиАтрибуты.Значение КАК Значение
		|ИЗ
		|	Справочник.РЭМДПравилаПодписи.Атрибуты КАК РЭМДПравилаПодписиАтрибуты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|		ПО РЭМДПравилаПодписиАтрибуты.Ссылка = РЭМДПравилаПодписи.Ссылка
		|			И ((ВЫРАЗИТЬ(РЭМДПравилаПодписиАтрибуты.Ключ КАК СТРОКА(50))) = ""SPECIALITY_CONTROL"")
		|			И (РЭМДПравилаПодписи.ВидДокумента = &ВидДокумента)
		|			И (РЭМДПравилаПодписи.Роль = &Роль)";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Роль", РольРЭМД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат НРег(СокрЛП(Выборка.Значение)) = "обязательна";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьСпециальностиЭЦППоЭМД(СпециальностиЭЦППоЭМД, МДОбъект, УИДыДляСообщенийРЭМД)
	
	Для Каждого СтрЭМД Из МДОбъект.ЭМД Цикл
		
		СпециальностиМинздрава = Новый Соответствие;
		
		Для Каждого СтруктураУИДов Из УИДыДляСообщенийРЭМД Цикл
			Если СтруктураУИДов.УИД_ЭМД = СтрЭМД.УИД Тогда
				СпециальностиМинздрава.Вставить(СтруктураУИДов.УИД_ЭЦП, СтруктураУИДов.СпециальностьМинздрава);
			КонецЕсли;
		КонецЦикла;
		
		Если СпециальностиМинздрава.Количество() > 0 Тогда
			СпециальностиЭЦППоЭМД.Вставить(СтрЭМД.УИД, СпециальностиМинздрава);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти