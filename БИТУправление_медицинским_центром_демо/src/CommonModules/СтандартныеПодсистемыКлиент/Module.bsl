
#Область ПрограммныйИнтерфейс

// Устанавливает заголовок главного окна приложения, используя значение константы
// ЗаголовокПриложения и заголовок приложения по умолчанию.
//
// Параметры:
//   ПриЗапуске - Булево - Истина, если вызывается при начале работы программы.
//
Процедура УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
	
	ПараметрыКлиента = ?(ПриЗапуске, ПараметрыРаботыКлиентаПриЗапуске(), ПараметрыРаботыКлиента());
	
	Если ПараметрыКлиента.Свойство("ЗаголовокПриложения") Тогда
		
		ПредставлениеЗаголовка = ПараметрыКлиента.ЗаголовокПриложения;
		ПредставлениеКонфигурации = ПараметрыКлиента.ПодробнаяИнформация;
		ВерсияКонфигурации = ПараметрыКлиента.ВерсияКонфигурации;
		
		Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
			ШаблонЗаголовка = "%1";
			// ШаблонЗаголовка = "%1 (%2)";
			ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
				ПредставлениеКонфигурации, ВерсияКонфигурации);
		Иначе
			ШаблонЗаголовка = "%1 (%2)";
			// ШаблонЗаголовка = "%1. %2 (%3)";
			ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
				ПредставлениеЗаголовка, ПредставлениеКонфигурации, ВерсияКонфигурации);
		КонецЕсли;
	
		КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложения);
	
	КонецЕсли;
	
КонецПроцедуры

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
//                                                        вопроса
//                                                        со следующими параметрами: 
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение
//                                                                       системного перечисления или значение,
//                                                                       связанное с нажатой кнопкой. В случае закрытия
//                                                                       диалога по истечении времени - значение
//                                                                       Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора
//                                                                                                  пользователя в
//                                                                                                  одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором.
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может
//                                                  использоваться значение
//                                                  перечисления КодВозвратаДиалога, а также другие значения,
//                                                  поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к
//                                                        ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе
		Параметры = Новый Структура;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыВопросаПользователю(), Ложь);
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",         КнопкиПараметр);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);
	
	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,,ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//  Структура   - структура со свойствами:
//    * КнопкаПоУмолчанию             - Произвольный - определяет кнопку по умолчанию по типу кнопки или по связанному
//                                                     с ней значению.
//    * Таймаут                       - Число        - интервал времени в секундах до автоматического закрытия окна
//                                                     вопроса.
//    * КнопкаТаймаута                - Произвольный - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                     на которой отображается количество секунд, оставшихся до
//                                                     истечения таймаута.
//    * Заголовок                     - Строка       - заголовок вопроса. 
//    * ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево- если Истина, то в окне вопроса будет доступен одноименный флажок.
//    * БольшеНеЗадаватьЭтотВопрос    - Булево       - принимает значение, выбранное пользователем в соответствующем
//                                                     флажке.
//    * БлокироватьВесьИнтерфейс      - Булево       - если Истина, форма вопроса открывается блокируя работу всех
//                                                     остальных открытых окон, включая главное окно.
//    * Картинка                      - Картинка     - картинка, выводимая в окне вопроса.
//
Функция ПараметрыВопросаПользователю() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	Параметры.Вставить("Заголовок", ПолучитьЗаголовокКлиентскогоПриложения());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	Параметры.Вставить("Картинка", БиблиотекаКартинок.Вопрос32);
	Возврат Параметры;
	
КонецФункции	

// Выполнить стандартные действия перед началом работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередНачаломРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПередНачаломРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
//                         оповещение с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
//                         выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
Процедура ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
	
	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы", 
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	
	//+бит
	ПараметрыПриложения.Вставить("ЗапрашиватьПодтверждениеПриЗакрытии", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ЗапрашиватьПодтверждениеПриЗакрытии"));
	ДопСерверныеФункции.ПередНачаломРаботыСистемы();
	УниверсальныеМеханизмыКлиент.ПередНачаломРаботыСистемы();
	//-бит
	
	УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
	
КонецПроцедуры

// Выполнить стандартные действия перед завершением работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередЗавершениемРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  Отказ                - Булево - Возвращаемое значение. Признак отказа от завершения работы 
//                         для обработчика события ПередЗавершениемРаботыСистемы, либо программного отказа,
//                         либо потребовалась интерактивная обработка. В случае успешного взаимодействия
//                         с пользователем, завершение работы будет продолжено.
//  ТекстПредупреждения  - Строка - см. ПередЗавершениемРаботыСистемы() в синтакс-помощнике.
//
Процедура ПередЗавершениемРаботыСистемы(Отказ = Ложь, ТекстПредупреждения = "") Экспорт
	
	//+бит Сократили проверку БСП
	// В режиме работы толстый клиент (обычное приложение) не выводится список предупреждений.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат;
	#КонецЕсли
	
	Предупреждения = Новый Массив;
	
	Если Предупреждения.Количество() = 0 И ПараметрыПриложения.Получить("ЗапрашиватьПодтверждениеПриЗакрытии") <> Неопределено Тогда
		Если Не ПараметрыПриложения.Получить("ЗапрашиватьПодтверждениеПриЗакрытии") Тогда
			Возврат;
		КонецЕсли;
		ТекстПредупреждения = НСтр("ru = 'Завершить работу с программой?'");
		Отказ = Истина;
	КонецЕсли;
	//-бит
	
КонецПроцедуры

// Выполнить стандартные действия при начале работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПриНачалеРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПриНачалеРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
//                         оповещение с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
//                         выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
//  НепрерывноеВыполнение - Булево - только для внутреннего использования.
//                          Для перехода из обработчика ПередНачаломРаботыСистемы
//                          выполненного в режиме интерактивной обработки.
//
Процедура ПриНачалеРаботыСистемы(Знач ОповещениеЗавершения = Неопределено, НепрерывноеВыполнение = Истина) Экспорт
	
	УстановитьРасширенныйЗаголовокПриложения(Истина);
	
КонецПроцедуры

// Возвращает значения параметров, необходимых для работы клиентского кода
// при запуске конфигурации за один серверный вызовов (для минимизации клиент-серверного взаимодействия
// и снижения времени запуска). 
// С помощью этой функции можно обращаться к параметрам в клиентском коде, вызываемом из обработчиков событий:
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы.
//
// В этих обработчиках, при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура - параметры работы клиента при запуске. 
//                            Состав свойств см. в ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске.
//
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
КонецФункции

// Возвращает значения параметров, необходимых для работы клиентского кода конфигурации
// без дополнительных серверных вызовов.
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура - параметры работы клиента.
//                            Состав свойств см. в ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента.
//
Функция ПараметрыРаботыКлиента() Экспорт
	
	Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрКлиента(ИмяПараметра = Неопределено) Экспорт
	
	ИмяГлобальногоПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	ПараметрыКлиента = ПараметрыПриложения[ИмяГлобальногоПараметра];
	
	Если ПараметрыКлиента = Неопределено Тогда
		// Заполнение постоянных параметров клиента.
		ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	КонецЕсли;
	
	Если ИмяПараметра = Неопределено Тогда
		Возврат ПараметрыКлиента;
	Иначе
		Возврат ПараметрыКлиента[ИмяПараметра];
	КонецЕсли;
	
КонецФункции

// Устанавливает / отменяет хранение ссылки на управляемую форму в глобальной переменной.
// Требуется для случаев, когда ссылка на форму передается через ДополнительныеПараметры
// в объекте ОписаниеОповещения, который не блокирует освобождение закрытой формы.
//
Процедура УстановитьХранениеФормы(Форма, Хранение) Экспорт
	
#Если ВебКлиент Или МобильныйКлиент Тогда
	Хранилище = ПараметрыПриложения["СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы"];
	Если Хранилище = Неопределено Тогда
		Хранилище = Новый Соответствие;
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы", Хранилище);
	КонецЕсли;
	
	Если Хранение Тогда
		Хранилище.Вставить(Форма, Новый Структура("Форма", Форма));
	ИначеЕсли Хранилище.Получить(Форма) <> Неопределено Тогда
		Хранилище.Удалить(Форма);
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вывод результата выполнения.

// Выводит предупреждение или текст ошибки.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, для которой требуется вывод.
//   ПараметрыПредупреждения - Структура - Параметры предупреждения.
//       * Текст               - Строка - Текст предупреждения.
//       * Подробно            - Строка - Необязательный. Тексты ошибок, которые при желании может просмотреть пользователь.
//       * Заголовок           - Строка - Необязательный. Заголовок окна.
//       * ПутьКРеквизитуФормы - Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//   ОбработчикЗавершения - ОписаниеОповещения - Описание процедуры,
//       которая будет вызвана после завершения показа (со значением Неопределено).
//
Процедура ВывестиПредупреждение(Форма, ПараметрыПредупреждения, ОбработчикЗавершения = Неопределено) Экспорт
	Контекст = Новый Структура("Текст, Подробно, Заголовок, ПутьКРеквизитуФормы, Форма, ОбработчикЗавершения");
	ЗаполнитьЗначенияСвойств(Контекст, ПараметрыПредупреждения);
	Контекст.Форма = Форма;
	Контекст.ОбработчикЗавершения = ОбработчикЗавершения;
	
	Если Не ЗначениеЗаполнено(Контекст.Текст) Тогда
		ВывестиПредупреждениеЗавершение(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	Если Контекст.Заголовок = Неопределено Тогда
		Контекст.Заголовок = "";
	КонецЕсли;
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
	
	Кнопки = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Контекст.Подробно) И Контекст.Подробно <> Контекст.Текст Тогда
		Кнопки.Добавить(1, НСтр("ru = 'Подробнее...'"));
	КонецЕсли;
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") И ЗначениеЗаполнено(Контекст.ПутьКРеквизитуФормы) Тогда
		Кнопки.Добавить(2, НСтр("ru = 'Перейти к реквизиту'"));
	КонецЕсли;
	// Кнопка "Закрыть" должна быть крайней справа,
	// т.к. это ее стандартное место в диалогах, в которых команды размещаются внизу формы.
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Закрыть'"));
	
	Обработчик = Новый ОписаниеОповещения("ВывестиПредупреждениеПродолжение", ЭтотОбъект, Контекст);
	ПоказатьВопрос(Обработчик, Контекст.Текст, Кнопки, , КнопкаПоУмолчанию, Контекст.Заголовок);
КонецПроцедуры

// Продолжение процедуры ВывестиПредупреждение.
Процедура ВывестиПредупреждениеПродолжение(Ответ, Контекст) Экспорт
	Если Ответ = 1 Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВывестиПредупреждениеЗавершение", ЭтотОбъект, Контекст);
		ПолныйТекст = Строка(Контекст.Текст) + Символы.ПС + Символы.ПС + Контекст.Подробно;
		ПоказатьПодробнуюИнформацию(Обработчик, ПолныйТекст, Контекст.Заголовок);
		
		Возврат;
		
	ИначеЕсли Ответ = 2 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = Контекст.Форма.УникальныйИдентификатор;
		Сообщение.Текст = Контекст.Текст;
		Сообщение.Поле  = Контекст.ПутьКРеквизитуФормы;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	ВывестиПредупреждениеЗавершение(Неопределено, Контекст);
КонецПроцедуры

// Продолжение процедуры ВывестиПредупреждение.
Процедура ВывестиПредупреждениеЗавершение(Ответ, Контекст) Экспорт
	Если ТипЗнч(Контекст.ОбработчикЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
	КонецЕсли;
КонецПроцедуры


// Разворачивает узлы указанного дерева на форме.
//
// Параметры:
//   Форма                     - УправляемаяФорма - форма, на которой размещен элемент управления с деревом значений.
//   ИмяЭлементаФормы          - Строка           - имя элемента с таблицей формы (деревом значений) и связанного с ней
//                                                  реквизита формы (должны совпадать).
//   ИдентификаторСтрокиДерева - Произвольный     - идентификатор строки дерева, которую требуется развернуть.
//                                                  Если указано "*", то будут развернуты все узлы верхнего уровня.
//                                                  Если указано Неопределено, то строки дерева развернуты не будут.
//                                                  Значение по умолчанию: "*".
//   РазвернутьСПодчиненными   - Булево           - если Истина, то следует раскрыть также и все подчиненные узлы.
//                                                  По умолчанию Ложь.
//
Процедура РазвернутьУзлыДерева(Форма, ИмяЭлементаФормы, ИдентификаторСтрокиДерева = "*", РазвернутьСПодчиненными = Ложь) Экспорт
	
	ТаблицаЭлемент = Форма.Элементы[ИмяЭлементаФормы];
	Если ИдентификаторСтрокиДерева = "*" Тогда
		Узлы = Форма[ИмяЭлементаФормы].ПолучитьЭлементы();
		Для Каждого Узел Из Узлы Цикл
				ПОПЫТКА //+бит
			ТаблицаЭлемент.Развернуть(Узел.ПолучитьИдентификатор(), РазвернутьСПодчиненными);
				Исключение КонецПопытки; //+бит
		КонецЦикла;
	Иначе
			ПОПЫТКА //+бит
		ТаблицаЭлемент.Развернуть(ИдентификаторСтрокиДерева, РазвернутьСПодчиненными);
			Исключение КонецПопытки; //+бит
	КонецЕсли;
	
КонецПроцедуры

// Выводит текст, который пользователь может скопировать.
//
// Параметры:
//   Обработчик - ОписаниеОповещения - Описание процедуры, которая будет вызвана после завершения показа.
//       Возвращаемое значение аналогично ПоказатьВопросПользователю().
//   Текст     - Строка - Текст информации.
//   Заголовок - Строка - Необязательный. Заголовок окна. По умолчанию "Подробнее".
//
Процедура ПоказатьПодробнуюИнформацию(Обработчик, Текст, Заголовок = Неопределено) Экспорт
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", Неопределено);
	НастройкиДиалога.Вставить("ПоказыватьКартинку", Ложь);
	НастройкиДиалога.Вставить("МожноКопировать", Истина);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("ВыделятьКнопкуПоУмолчанию", Ложь);
	НастройкиДиалога.Вставить("Заголовок", Заголовок);
	
	Если Не ЗначениеЗаполнено(НастройкиДиалога.Заголовок) Тогда
		НастройкиДиалога.Заголовок = НСтр("ru = 'Подробнее'");
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru = 'Закрыть'"));
	
	ПоказатьВопросПользователю(Обработчик, Текст, Кнопки, НастройкиДиалога);
КонецПроцедуры

// Возвращает элементы стиля конфигурации.
//
// Возвращаемое значение:
//  Структура:
//   * Ключ - Строка - имя элемента стиля, например, "ГиперссылкаЦвет".
//   * Значение - ОбъектМетаданныхЭлементСтиля.
//
Функция ЭлементыСтиля() Экспорт
	
	ЭлементыСтиля = Новый Структура;
	
	ПараметрыРаботыКлиента = ПараметрыРаботыКлиента();
	Для каждого ЭлементСтиля Из ПараметрыРаботыКлиента.ЭлементыСтиля Цикл
#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение.Получить());
#Иначе
		ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение);
#КонецЕсли
	КонецЦикла;
	
	Возврат ЭлементыСтиля;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строковое представление значения типа КодВозвратаДиалога.
Функция КодВозвратаДиалогаВСтроку(Значение)
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске()
	
	ПараметрыПриЗапускеПрограммы = Новый Структура;
	ПараметрыПриЗапускеПрограммы.Вставить("ПараметрУчетнаяПолитикаРасширенная", ПредопределенноеЗначение("Перечисление.ПараметрыУчетнойПолитики.ИспользоватьХочуРаньшеВЗаявках"));
	
	УстановитьПараметрыФункциональныхОпцийИнтерфейса(ПараметрыПриЗапускеПрограммы);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

// Переадресует оповещение без результата на оповещение с результатом.
Функция ОповещениеБезРезультата(ОповещениеСРезультатом) Экспорт
	
	Возврат Новый ОписаниеОповещения("ВыполнитьОповещениеСПустымРезультатом", ЭтотОбъект, ОповещениеСРезультатом);
	
КонецФункции

#КонецОбласти

// Показывает пользователю диалог подтверждения выхода из программы.
// Параметры:
//  Отказ - (булево) устанавливается в процедуре, как Истина
//                   если пользователь отказлся от закрытия программы
// Возвращаемое значение
//  Истина - пользователь отказался от закрытия программы
//  Ложь - пользователь решил закрыть программу, или диалог закрытия не вызывался
//
Функция ВопросПользователюПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Не СтандартныеПодсистемыВызовСервера.ЗагрузитьНастройкуПодтвержденияПриЗавершенииПрограммы();
	Если ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БольшеНеЗадаватьЭтотВопрос = Ложь;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("КодВозвратаДиалога.Да",	НСтр("ru = 'Завершить'"));
	Кнопки.Добавить("КодВозвратаДиалога.Нет",	НСтр("ru = 'Не завершать'"));
	
	Результат = ВопросПользователю(НСтр("ru = 'Завершить работу с программой?'"), Кнопки, , КодВозвратаДиалога.Да, "Завершение работы", 
		КодВозвратаДиалога.Нет, БольшеНеЗадаватьЭтотВопрос);
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// Проверяет версию платформы, в зависмости от места вызова и возвращает Истина, 
// если она подходит для запуска конфигурации.
//
// Параметры:
//	МестоВызова - Строка - место, из которого вызывается процедура.
//						   Варианты: 	"ПередНачаломРаботы" - если вызывается из обработчика ПередНачаломРаботыСистемы()
//										"ПриНачалеРаботы" - если вызывается из обработчика ПриНачалеРаботыСистемы()
//
// Возвращаемое значение - Булево - Если версия актуальна, тогда Истина, иначе - Ложь.
//
Функция ПроверитьВерсиюПлатформыПриЗапуске(МестоВызова) Экспорт
	
	// Для Обычного режима проверка выполняется в обработчике "ПриНачалеРаботыСистемы".
	// Для Управляемого режима проверка выполняется в обработчике "ПередНачаломРаботыСистемы".
	#Если ТолстыйКлиентОбычноеПриложение Тогда  
		Если МестоВызова = "ПередНачаломРаботы" Тогда 
			Возврат Истина;
		КонецЕсли;
	#Иначе
		Если МестоВызова = "ПриНачалеРаботы" Тогда 
			Возврат Истина;
		КонецЕсли;
	#КонецЕсли	
	
	ПараметрыПроверки = Новый ФиксированнаяСтруктура("ВерсияПлатформы, РаботаВПрограммеЗапрещена", "8.2.14.519", Ложь);
	СтандартныеПодсистемыКлиентПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки);
	
	Возврат ПроверитьВерсиюПлатформы(ПараметрыПроверки.ВерсияПлатформы, ПараметрыПроверки.РаботаВПрограммеЗапрещена);
	
КонецФункции	

// Проверяет минимально допустимую версию платформы для запуска.
// Если версия платформы более поздняя, чем РекомендуемаяВерсияПлатформы, то пользователю будет 
// показано оповещение. Работа программы будет прекращена, если ЗавершитьРаботу = Истина.
//
// Параметры
//  РекомендуемаяВерсияПлатформы - Строка - версия платформы рекомендуемая для работы
//  РаботаВПрограммеЗапрещена    - Булево - если Истина и текущая версия платформы меньше рекомендуемой, 
//                                          то продолжение работы в программе невозможно.
//
// Возвращаемое значение
//  Булево - Истина, если версия платформы подходит для работы
//
Функция ПроверитьВерсиюПлатформы(знач РекомендуемаяВерсияПлатформы, знач РаботаВПрограммеЗапрещена = Ложь) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, РекомендуемаяВерсияПлатформы) >= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = 
		НСтр("ru='Для работы с конфигурацией требуется версия платформы 1С:Предприятие %1 или более поздняя.
		         |Используемая сейчас версия: %2.
		         |
				 |'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения, РекомендуемаяВерсияПлатформы, СистемнаяИнформация.ВерсияПриложения);
	
	Если РаботаВПрограммеЗапрещена Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru='Продолжение невозможно, работа программы будет завершена.'");
	Иначе
		ТекстСообщения = ТекстСообщения +
			НСтр("ru='Рекомендуется прекратить работу программы и обновить версию платформы 1С:Предприятие.
		         |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.
				 |
		         |Прекратить работу программы?'");
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстСообщения", ТекстСообщения);
	Параметры.Вставить("ЗавершитьРаботу", РаботаВПрограммеЗапрещена);
	Результат = ОткрытьФормуМодально("ОбщаяФорма.НерекомендуемаяВерсияПлатформы", Параметры);
	Если РаботаВПрограммеЗапрещена Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.OK Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает заголовок главного окна приложения, используя представление текущего пользователя,
// значение константы ЗаголовокПриложения и заголовок приложения по умолчанию.
//
Процедура УстановитьПроизвольныйЗаголовокПриложения() Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	ПредставлениеЗаголовка = ПараметрыКлиента.ЗаголовокПриложения;
	ПредставлениеПользователя = ПараметрыКлиента.АвторизованныйПользователь;
	ПредставлениеКонфигурации = ПараметрыКлиента.СинонимКонфигурации;
	
	ШаблонЗаголовка = "%1 / %2 / ";
	Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
			ПараметрыКлиента.ПодробнаяИнформация, ПредставлениеПользователя);
	Иначе
		ШаблонЗаголовка = ШаблонЗаголовка+ " %3 / ";
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
			СокрЛП(ПредставлениеЗаголовка), ПредставлениеПользователя, ПредставлениеКонфигурации);
	КонецЕсли;
	
	УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	
КонецПроцедуры

// Вызывает форму вопроса.
//
// Параметры:
//  ТекстСообщения - строка - текст вопроса для пользователя
//  Кнопки - РежимДиалогаВопрос; СписокЗначений. 
//           Задает состав и текст кнопок диалога, а также, связанные с кнопками значения.
//           При использовании типа СписокЗначений:
//           Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки.
//           В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;
//           Примечание: значение должно поддерживать XDTO сериализацию.
//           Представление – задает текст кнопки.
//  Таймаут - значение таймаута в секундах, по истечению этого времени функцию вернет значение КодВозвратаДиалога.Таймаут
//
// Возвращаемое значение:
//  КодВозвратаДиалога
//
Функция ВопросПользователю(ТекстСообщения, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", 
	КнопкаТаймаута = Неопределено, БольшеНеЗадаватьЭтотВопрос = Ложь) Экспорт
	
	БольшеНеЗадаватьЭтотВопрос = Ложь;
	
	Параметры = Новый Структура;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = "КодВозвратаДиалога." + Строка(КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = "КодВозвратаДиалога." + Строка(КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстСообщения);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.Вопрос", Параметры);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
		Возврат Результат.Значение;
	Иначе
		Возврат КодВозвратаДиалога.Отмена;
	КонецЕсли;
	
КонецФункции

// ЗАВЕРШЕНИЕ РАБОТЫ СИСТЕМЫ
//

// Выводит форму сообщений пользователю при закрытии программы,
// либо выводит сообщение.
//
Процедура ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Отказ) Экспорт
	Предупреждения = Новый Массив;
	СтандартныеПодсистемыКлиентПереопределяемый.ПолучитьСписокПредупреждений(Предупреждения);
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("Предупреждения", Предупреждения);
	
	ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";
	
	//Если Предупреждения.Количество() = 0 Тогда
	//	Если ВопросПользователюПередЗавершениемРаботыСистемы(Отказ) Тогда
	//		Возврат;
	//	КонецЕсли;
	//ИначеЕсли Предупреждения.Количество() = 1 Тогда
	//	Отказ = ОткрытьПрикладнуюФормуПредупреждения(Предупреждения.Получить(0), ИмяФормы, ПараметрыПередачи);
	//ИначеЕсли Предупреждения.Количество() > 1 Тогда	
	//	Отказ = ОткрытьФормуМодально(ИмяФормы, ПараметрыПередачи);
	//КонецЕсли;	
КонецПроцедуры	
	
	
Функция КлиентскийОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

// Только для внутреннего использования.
Процедура ИдентификаторыОбъектовМетаданныхФормаСпискаСписокВыборЗначения(Форма, Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	Если Не Форма.ВыбиратьГруппыОбъектовМетаданных
	   И Элемент.ТекущиеДанные <> Неопределено
	   И Не Элемент.ТекущиеДанные.ПометкаУдаления
	   И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Родитель) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.Отображение = ОтображениеТаблицы.Дерево Тогда
			Если Элемент.Развернут(Элемент.ТекущаяСтрока) Тогда
				Элемент.Свернуть(Элемент.ТекущаяСтрока);
			Иначе
				Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КонецЕсли;
			
		ИначеЕсли Элемент.Отображение = ОтображениеТаблицы.ИерархическийСписок Тогда
			
			Если Элемент.ТекущийРодитель <> Элемент.ТекущаяСтрока Тогда
				Элемент.ТекущийРодитель = Элемент.ТекущаяСтрока;
			Иначе
				ТекущаяСтрока = Элемент.ТекущаяСтрока;
				Элемент.ТекущийРодитель = Неопределено;
				Элемент.ТекущаяСтрока = ТекущаяСтрока;
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru = 'Невозможно выбрать группу объектов метаданных.
				           |Выберите объект метаданных.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

