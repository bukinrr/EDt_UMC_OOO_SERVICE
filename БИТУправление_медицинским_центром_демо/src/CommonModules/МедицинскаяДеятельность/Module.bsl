#Область РаботаСШаблонамиОсмотров

Функция ПолучитьОсновнойШаблонОсмотраСотрудника(Сотрудник, ДляМедОсмотра = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Справочники.ШаблоныHTML.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Если ДляМедОсмотра Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпециализацииШаблоновОсмотра.ШаблонОсмотра,
		|	ВЫБОР
		|		КОГДА СпециализацииШаблоновОсмотра.Основной
		|			ТОГДА 1
		|		КОГДА СпециализацииШаблоновОсмотра.Профосмотр
		|			ТОГДА 2
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпециализацииШаблоновОсмотра КАК СпециализацииШаблоновОсмотра
		|		ПО (Сотрудники.Ссылка = &Сотрудник)
		|			И Сотрудники.Специализация = СпециализацииШаблоновОсмотра.Специализация
		|			И (СпециализацииШаблоновОсмотра.Основной
		|				ИЛИ СпециализацииШаблоновОсмотра.Профосмотр)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ"
		;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СпециализацииШаблоновОсмотра.ШаблонОсмотра,
		|	СпециализацииШаблоновОсмотра.Основной КАК Основной
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпециализацииШаблоновОсмотра КАК СпециализацииШаблоновОсмотра
		|		ПО (Сотрудники.Ссылка = &Сотрудник)
		|			И Сотрудники.Специализация = СпециализацииШаблоновОсмотра.Специализация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Основной УБЫВ"
		;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ШаблоныHTML.ПустаяСсылка();
	Иначе
		ТаблицаШаблонов = Результат.Выгрузить();
		ПерваяСтрока = ТаблицаШаблонов[0];
		
		// Для обычного приёма подставляем шаблон, только если он основной или единственный
		// Для медосмотров подставляем первый приоритетный шаблон.
		Если ДляМедОсмотра Или ПерваяСтрока.Основной Или ТаблицаШаблонов.Количество() = 1 Тогда
			Возврат ПерваяСтрока.ШаблонОсмотра;
		Иначе
			Возврат Справочники.ШаблоныHTML.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОсновнойШаблонОсмотраСпециализации(Специализация, ДляМедосмотра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Специализация", Специализация);
	Запрос.УстановитьПараметр("ДляМедосмотра", ДляМедосмотра);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СпециализацииШаблоновОсмотра.ШаблонОсмотра КАК ШаблонОсмотра,
	|	ВЫБОР
	|		КОГДА СпециализацииШаблоновОсмотра.Профосмотр
	|			ТОГДА ВЫБОР
	|					КОГДА &ДляМедосмотра
	|						ТОГДА 1
	|					ИНАЧЕ 4
	|				КОНЕЦ
	|		КОГДА СпециализацииШаблоновОсмотра.Основной
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок,
	|	СпециализацииШаблоновОсмотра.Основной КАК Основной,
	|	СпециализацииШаблоновОсмотра.Профосмотр КАК Профосмотр
	|ИЗ
	|	РегистрСведений.СпециализацииШаблоновОсмотра КАК СпециализацииШаблоновОсмотра
	|ГДЕ
	|	СпециализацииШаблоновОсмотра.Специализация = &Специализация
	|	И (НЕ &ДляМедосмотра
	|			ИЛИ СпециализацииШаблоновОсмотра.Профосмотр)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок"
	;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ШаблоныHTML.ПустаяСсылка();
	Иначе
		ТаблицаШаблонов = Результат.Выгрузить();
		ПерваяСтрока = ТаблицаШаблонов[0];
		
		// Для обычного приёма подставляем шаблон, только если он основной или единственный
		// Для медосмотров подставляем только шаблон, отмеченный для медосмотра (первый)
		Если (ДляМедОсмотра И ПерваяСтрока.Профосмотр)
			Или (Не ДляМедосмотра И (ПерваяСтрока.Основной Или ТаблицаШаблонов.Количество() = 1))
		Тогда
			Возврат ПерваяСтрока.ШаблонОсмотра;
		Иначе
			Возврат Справочники.ШаблоныHTML.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СформироватьСтрокуЭМКНеограниченнойДлины(Владелец, Параметр, Значение, ПометкаУдаления, АдресНеогрСтроки = Неопределено, СтрокаЭМК = Неопределено, ВыполнятьПоиск = Истина) Экспорт
	
	ИндексШаблона		 = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(АдресНеогрСтроки, "ИндексШаблона", 0);
	ТаблицаШаблонов		 = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(АдресНеогрСтроки, "ТаблицаШаблонов", Справочники.ТаблицыШаблоновПриема.ПустаяСсылка());
	НомерСтрокиТаблицы	 = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(АдресНеогрСтроки, "НомерСтрокиТаблицы", 0);
	
	СтрокаЭМКСсылка = СтрокаЭМК;
	Если СтрокаЭМК = Неопределено И ВыполнятьПоиск Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Параметр", Параметр);
		Запрос.УстановитьПараметр("ИндексШаблона",		 ИндексШаблона);
		Запрос.УстановитьПараметр("ТаблицаШаблонов",	 ТаблицаШаблонов);
		Запрос.УстановитьПараметр("НомерСтрокиТаблицы",	 НомерСтрокиТаблицы);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтрокиЭМКНеограниченнойДлины.Ссылка
		|ИЗ
		|	Справочник.СтрокиЭМКНеограниченнойДлины КАК СтрокиЭМКНеограниченнойДлины
		|ГДЕ
		|	СтрокиЭМКНеограниченнойДлины.ВладелецСтроки = &Владелец
		|	И СтрокиЭМКНеограниченнойДлины.ИндексШаблона = &ИндексШаблона
		|	И СтрокиЭМКНеограниченнойДлины.ТаблицаШаблонов = &ТаблицаШаблонов
		|	И СтрокиЭМКНеограниченнойДлины.НомерСтрокиТаблицы = &НомерСтрокиТаблицы
		|	И СтрокиЭМКНеограниченнойДлины.Параметр = &Параметр"
		;
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			СтрокаЭМКСсылка = Выб.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаЭМКСсылка = Неопределено Тогда 
		СтрокаЭМКОбъект = Справочники.СтрокиЭМКНеограниченнойДлины.СоздатьЭлемент();
		СтрокаЭМКОбъект.ВладелецСтроки = Владелец;
		СтрокаЭМКОбъект.ИндексШаблона		 = ИндексШаблона;
		СтрокаЭМКОбъект.ТаблицаШаблонов		 = ТаблицаШаблонов;
		СтрокаЭМКОбъект.НомерСтрокиТаблицы	 = НомерСтрокиТаблицы;
		СтрокаЭМКОбъект.Параметр = Параметр;
		СтрокаЭМКОбъект.Значение = Значение;
		СтрокаЭМКОбъект.ПометкаУдаления = ПометкаУдаления;
		СтрокаЭМКОбъект.Записать();
		СтрокаЭМКСсылка = СтрокаЭМКОбъект.Ссылка;
	Иначе
		СтрокаЭМКОбъект = СтрокаЭМКСсылка.ПолучитьОбъект();
		СтрокаЭМКОбъект.Значение = Значение;
		СтрокаЭМКОбъект.ПометкаУдаления = ПометкаУдаления;
		СтрокаЭМКОбъект.Записать();
	КонецЕсли;
	
	Возврат СтрокаЭМКСсылка;
	
КонецФункции

// Таблица строк ЭМКНеограниченной длины владельца
//
// Параметры:
//  Владелец					 - ДокументСсылка, СправочникСсылка - Владелец строки ЭМК согласно допустимым типам для реквизита ВладелецСтроки справочника.
//  РежимЗначенияТаблицШаблонов	 - Булево, Неопределено - Если заполнено, то возвращает только табличные либо только нетабличные строки ЭМК (по значению реквизита номера строки таблицы).
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьТаблицуСтрокЭМКНеограниченнойДлиныПоВладельцу(Владелец, РежимЗначенияТаблицШаблонов = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиЭМКНеограниченнойДлины.Ссылка КАК Ссылка,
	|	СтрокиЭМКНеограниченнойДлины.ИндексШаблона КАК ИндексШаблона,
	|	СтрокиЭМКНеограниченнойДлины.ТаблицаШаблонов КАК ТаблицаШаблонов,
	|	СтрокиЭМКНеограниченнойДлины.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
	|	СтрокиЭМКНеограниченнойДлины.Параметр КАК Параметр,
	|	СтрокиЭМКНеограниченнойДлины.Значение КАК Значение,
	|	СтрокиЭМКНеограниченнойДлины.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.СтрокиЭМКНеограниченнойДлины КАК СтрокиЭМКНеограниченнойДлины
	|ГДЕ
	|	СтрокиЭМКНеограниченнойДлины.ВладелецСтроки = &Владелец
	|	И (&РежимЗначенияТаблицШаблонов = НЕОПРЕДЕЛЕНО
	|			ИЛИ (СтрокиЭМКНеограниченнойДлины.НомерСтрокиТаблицы <> 0) = &РежимЗначенияТаблицШаблонов)";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("РежимЗначенияТаблицШаблонов", РежимЗначенияТаблицШаблонов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Документы медкарты по виду документации
//
// Параметры:
//  МедКарта		 - СправочникСсылка.МедицинскиеКарты - медкарта.
//  ВидДокументации	 - СправочникСсылка.ВидыМедицинскихДокументов, Массив - вид мед. документов или их массив.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//		Ссылка - ДокументСсылка.Прием - ссылка на документ,
//		ИндексШаблона - Число - индекс шаблона в документе
//		УИД - УникальныйИдентификатор - внутренний uid МД строки шаблона.
//		ШаблонПриема - СправочникСсылка.ШаблоныHTML - ссылка на шаблон.
//
Функция ДокументыПоВидуДокументации(МедКарта, ВидДокументации = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МедицинскаяКарта", МедКарта);
	Запрос.УстановитьПараметр("ВидМедицинскойДокументации", ВидДокументации);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Прием.Ссылка КАК Ссылка,
		|	Прием.Дата КАК Дата
		|ПОМЕСТИТЬ ДокументыКарты
		|ИЗ
		|	Документ.Прием КАК Прием
		|ГДЕ
		|	Прием.МедицинскаяКарта = &МедицинскаяКарта
		|	И Не Прием.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	Прием.Дата КАК ДатаПриема,
		|	Прием.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ШаблоныПриемов
		|ИЗ
		|	ДокументыКарты КАК Прием
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|		ПО Прием.Ссылка = ПриемШаблоныПриема.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныПриемов.Ссылка КАК Документ,
		|	ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|	ЕСТЬNULL(ВерсииШаблонов.ВерсияШаблона, ШаблоныПриемов.ШаблонПриема) КАК ВерсияШаблона
		|ПОМЕСТИТЬ ВерсииШаблоновПриемов
		|ИЗ
		|	ШаблоныПриемов КАК ШаблоныПриемов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыВерсий.ШаблонПриема КАК ШаблонПриема,
		|			ДатыВерсий.ДатаПриема КАК ДатаПриема,
		|			ДатыВерсий.ДатаВерсии КАК ДатаВерсии,
		|			ВерсииШаблоновHTML.Ссылка КАК ВерсияШаблона
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема КАК ДатаПриема,
		|				МАКСИМУМ(ВерсииШаблоновHTML.Дата) КАК ДатаВерсии
		|			ИЗ
		|				ШаблоныПриемов КАК ШаблоныПриемов
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|					ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|						И (ВерсииШаблоновHTML.Дата >= ШаблоныПриемов.ДатаПриема)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ШаблоныПриемов.ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема) КАК ДатыВерсий
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|				ПО ДатыВерсий.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|					И (ВерсииШаблоновHTML.Дата = ДатыВерсий.ДатаВерсии)) КАК ВерсииШаблонов
		|		ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблонов.ШаблонПриема
		|			И ШаблоныПриемов.ДатаПриема = ВерсииШаблонов.ДатаПриема
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриемШаблоныПриема.Ссылка КАК Документ,
		|	ПриемШаблоныПриема.НомерСтроки - 1 КАК ИндексШаблона,
		|	ПриемШаблоныПриема.УИД КАК УИД,
		|	ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	ДокументыКарты.Дата КАК Дата
		|ИЗ
		|	ДокументыКарты КАК ДокументыКарты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииШаблоновПриемов КАК ВерсииШаблоновПриемов
		|			ПО (ВерсииШаблоновПриемов.Документ = ПриемШаблоныПриема.Ссылка)
		|				И (ВерсииШаблоновПриемов.ШаблонПриема = ПриемШаблоныПриема.ШаблонПриема)
		|				И (&ВидМедицинскойДокументации = НЕОПРЕДЕЛЕНО
		|					ИЛИ ВерсииШаблоновПриемов.ВерсияШаблона.ВидМедицинскойДокументации В (&ВидМедицинскойДокументации))
		|		ПО ДокументыКарты.Ссылка = ПриемШаблоныПриема.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыКарты.Дата,
		|	ДокументыКарты.Ссылка,
		|	ИндексШаблона";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует полную таблицу значений параметров с отмеченными назначениями по медкарте.
//
// Параметры:
//  МедКарта - СправочникСсылка.МедицинскиеКарты - медкарта.
//  Назначения			 - Массив	 - из ДокументСсылка.Прием.
//  ПроверяемыеДокументы - ТаблицаЗначений - ограничение на список интересуемых документов с колонками Ссылка и ИндрекШаблона.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками Параметр, Назначение, Значение, Документ, ИндексШаблона.
//
Функция ЗначенияПоНазначениямПолейМедкарты(МедКарта, Назначения, ПроверяемыеДокументы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МедицинскаяКарта", МедКарта);
	Запрос.УстановитьПараметр("Назначения", Назначения);
	Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыHTML.Ссылка КАК Ссылка,
	|	ПараметрыHTML.Назначение КАК Назначение
	|ПОМЕСТИТЬ Параметры
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыHTML КАК ПараметрыHTML
	|ГДЕ
	|	ПараметрыHTML.Назначение В(&Назначения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Прием.Ссылка КАК Ссылка,
	|	Прием.Дата КАК Дата
	|ПОМЕСТИТЬ ДокументыКарты
	|ИЗ
	|	Документ.Прием КАК Прием
	|ГДЕ
	|	Прием.МедицинскаяКарта = &МедицинскаяКарта
	|	И (&ПроверяемыеДокументы = НЕОПРЕДЕЛЕНО
	|			ИЛИ Прием.Ссылка В (&ПроверяемыеДокументы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПараметровHTML.Параметр КАК Параметр,
	|	Параметры.Назначение КАК Назначение,
	|	ЗначенияПараметровHTML.Значение КАК Значение,
	|	ЗначенияПараметровHTML.Документ КАК Документ,
	|	ЗначенияПараметровHTML.ИндексШаблона КАК ИндексШаблона
	|ИЗ
	|	ДокументыКарты КАК ДокументыКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
	|		ПО ДокументыКарты.Ссылка = ЗначенияПараметровHTML.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	|		ПО (Параметры.Ссылка = ЗначенияПараметровHTML.Параметр)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыКарты.Дата"
	;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область РаботаСПланомЛечения

Функция ВыгрузитьПланЛечения(Знач СписокНазначений, ОбъектСсылка) Экспорт
	
	Выгрузка = Новый ТаблицаЗначений;
	Выгрузка.Колонки.Добавить("Номенклатура");
	Выгрузка.Колонки.Добавить("ВидЭлемента");
	Выгрузка.Колонки.Добавить("ИдентификаторНазначения");
	Выгрузка.Колонки.Добавить("Дата");
	Выгрузка.Колонки.Добавить("Сотрудник");
    Выгрузка.Колонки.Добавить("Количество");
	Выгрузка.Колонки.Добавить("ДокументРегистратор");
	Выгрузка.Колонки.Добавить("Комментарий");
	Выгрузка.Колонки.Добавить("ДатаОкончания");
	Выгрузка.Колонки.Добавить("ПриемовВДень");
	Выгрузка.Колонки.Добавить("Дозировка");	
	Выгрузка.Колонки.Добавить("ЕдиницаИзмерения");
	
	Для Каждого Назначение Из СписокНазначений.ПолучитьЭлементы() Цикл 
		НоваяЗапись = Выгрузка.Добавить();
		НоваяЗапись.ИдентификаторНазначения = Назначение.ИдентификаторНазначения;
		НоваяЗапись.Дата = Назначение.Дата;
		НоваяЗапись.Номенклатура = Назначение.Назначение;
		НоваяЗапись.ВидЭлемента	= Назначение.ВидНазначения;
		НоваяЗапись.Сотрудник	= Назначение.Сотрудник;
		НоваяЗапись.Количество	= Назначение.Количество;
		НоваяЗапись.Комментарий	= Назначение.Комментарий;
		Если Назначение.Свойство("ДатаОкончания") Тогда
			НоваяЗапись.ДатаОкончания		= Назначение.ДатаОкончания;	
			НоваяЗапись.ПриемовВДень		= Назначение.ПриемовВДень;	
			НоваяЗапись.Дозировка			= Назначение.Дозировка;	
			НоваяЗапись.ЕдиницаИзмерения	= Назначение.ЕдиницаИзмерения;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Назначение.ДокументРегистратор) Тогда
			НоваяЗапись.ДокументРегистратор = Назначение.ДокументРегистратор;
		Иначе
			НоваяЗапись.ДокументРегистратор = ОбъектСсылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Выгрузка;

КонецФункции

// Таблица плана лечения с количеством выполненния назначений.
//
// Параметры:
//  ПервичныйПрием			 - ОпределяемыйТип.ПервичныйПрием - случай обращения.
//  СтоматологическийПрием	 - Булево - выполняется ли получение информации в рамках стоматологического приёма.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - план лечения.
//
Функция ПланЛеченияСВыполнением(ПервичныйПрием, СтоматологическийПрием = Ложь) Экспорт
	
	Если СтоматологическийПрием Тогда
		ДополнительныеПоля = "ЗубВКарте, Конструкция,";
	Иначе
		ДополнительныеПоля = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПервичныйПрием", ПервичныйПрием);
	Запрос.УстановитьПараметр("Диагностика", Перечисления.ВидыНазначений.Обследование);
	Запрос.Текст = "ВЫБРАТЬ //%ДополнительныеПоля%
	               |	ПланЛечения.ПервичныйПрием КАК ПервичныйПрием,
	               |	ПланЛечения.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	               |	ПланЛечения.Номенклатура КАК Номенклатура,
				   |	ПланЛечения.Комментарий,
	               |	ПланЛечения.Количество КАК Количество,
	               |	Выполнение.ВыполненоКоличество КАК ВыполненоКоличество,
	               |	ПланЛечения.Количество - ЕСТЬNULL(Выполнение.ВыполненоКоличество, 0) КАК Остаток,
	               |	ПланЛечения.ВидЭлемента КАК ВидЭлемента,
	               |	ВЫБОР
	               |		КОГДА ПланЛечения.Количество - ЕСТЬNULL(Выполнение.ВыполненоКоличество, 0) > 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОстатокПоложительный,
	               |	ВЫБОР
	               |		КОГДА ПланЛечения.ВидЭлемента = &Диагностика
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ПорядокПоВидуНазначения,
	               |	ПланЛечения.ПорядокЭлемента КАК ПорядокЭлемента
	               |ИЗ
	               |	(ВЫБРАТЬ //%ДополнительныеПоля%
	               |		ПланыЛечения.ПервичныйПрием КАК ПервичныйПрием,
	               |		ПланыЛечения.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	               |		СУММА(ПланыЛечения.Количество) КАК Количество,
	               |		ПланыЛечения.ВидЭлемента КАК ВидЭлемента,
				   |		ПланыЛечения.Комментарий КАК Комментарий,
	               |		ПланыЛечения.ПорядокЭлемента КАК ПорядокЭлемента,
	               |		ПланыЛечения.Номенклатура КАК Номенклатура
	               |	ИЗ
	               |		РегистрСведений.ПланыЛечения КАК ПланыЛечения
	               |	ГДЕ
	               |		ПланыЛечения.ПервичныйПрием = &ПервичныйПрием
	               |	
	               |	СГРУППИРОВАТЬ ПО //%ДополнительныеПоля%
	               |		ПланыЛечения.ПервичныйПрием,
	               |		ПланыЛечения.ИдентификаторЭлемента,
	               |		ПланыЛечения.ВидЭлемента,
	               |		ПланыЛечения.ПорядокЭлемента,
				   |		ПланыЛечения.Комментарий,
	               |		ПланыЛечения.Номенклатура) КАК ПланЛечения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВыполнениеПланаЛечения.ПервичныйПрием КАК ПервичныйПрием,
	               |			ВыполнениеПланаЛечения.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	               |			СУММА(ВыполнениеПланаЛечения.Количество) КАК ВыполненоКоличество
	               |		ИЗ
	               |			РегистрСведений.ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
	               |		ГДЕ
	               |			ВыполнениеПланаЛечения.ПервичныйПрием = &ПервичныйПрием
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВыполнениеПланаЛечения.ПервичныйПрием,
	               |			ВыполнениеПланаЛечения.ИдентификаторЭлемента) КАК Выполнение
	               |		ПО ПланЛечения.ИдентификаторЭлемента = Выполнение.ИдентификаторЭлемента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОстатокПоложительный УБЫВ,
	               |	ПорядокПоВидуНазначения,
	               |	ПланЛечения.ПорядокЭлемента";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеПоля%", ДополнительныеПоля);
	
	ПланЛечения = Запрос.Выполнить().Выгрузить();
	
	Если СтоматологическийПрием Тогда
		ПланЛечения.Колонки.ЗубВКарте.Имя = "ЗубВКартеЗапрос";
		ПланЛечения.Колонки.Добавить("ЗубВКарте");
		Для Каждого СтрокаПлана Из ПланЛечения Цикл
			Если ЗначениеЗаполнено(СтрокаПлана.Конструкция) Тогда
				СтрокаПлана.ЗубВКарте = СтрокаПлана.Конструкция;
			Иначе
				СтрокаПлана.ЗубВКарте = СтрокаПлана.ЗубВКартеЗапрос;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПланЛечения;
	
КонецФункции

// Готовит движения выполнения плана лечения по выполнению и текущему плану лечения.
//
// Параметры:
//  ПланЛечения		 - ТаблицаЗначений	 - план лечения с данными о выполнении из ПланЛеченияСВыполнением().
//  ВыполнениеПлана	 - ТаблицаЗначений	 - выполненнение плана в документе.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные для формирования движений по регистру.
//
Функция РассчитатьДвиженияВыполненияПланаЛечения(ПланЛечения, ВыполнениеПлана) Экспорт
	
	ДвиженияВыполнения = Новый ТаблицаЗначений;
	ДвиженияВыполнения.Колонки.Добавить("ИдентификаторЭлемента");
	ДвиженияВыполнения.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Если ПланЛечения.Колонки.Найти("Списано") = Неопределено Тогда
		ПланЛечения.Колонки.Добавить("Списано", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ОтборПЛ = Новый Структура("Номенклатура, ИдентификаторЭлемента");
	Если ПланЛечения.Колонки.Найти("ЗубВКарте") <> Неопределено Тогда
		ОтборПЛ.Вставить("ЗубВКарте");
	КонецЕсли;
	
	Если ВыполнениеПлана.Колонки.Найти("Списано") = Неопределено Тогда
		ВыполнениеПлана.Колонки.Добавить("Списано", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	// Отнесение выполнения на такой же id в плане лечения, если в выполнении он есть.
	ВыполнениеПлана.Сортировать("ИдентификаторЭлемента Убыв");
	
	Для Каждого СтрокаРаботы Из ВыполнениеПлана Цикл
		
		Если ЗначениеЗаполнено(СтрокаРаботы.ИдентификаторЭлемента) Тогда
			ЗаполнитьЗначенияСвойств(ОтборПЛ, СтрокаРаботы);
			ОтборПЛ.ИдентификаторЭлемента = СтрокаРаботы.ИдентификаторЭлемента;
			СтрокиПлана = ПланЛечения.НайтиСтроки(ОтборПЛ);
			Если СтрокиПлана.Количество() <> 0 Тогда
				СтрокаПлана = СтрокиПлана[0];
			
				// Всё выполнение на конкретную строку плана
				СтрокаДвижения = ДвиженияВыполнения.Добавить();
				СтрокаДвижения.ИдентификаторЭлемента = СтрокаПлана.ИдентификаторЭлемента;
				СтрокаДвижения.Количество			 = СтрокаРаботы.Количество;
				
				СтрокаРаботы.Списано = СтрокаРаботы.Количество;
				СтрокаПлана.Списано  = СтрокаРаботы.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Отнесение выполнения на остатки плана лечения.
	ОтборПЛ.Удалить("ИдентификаторЭлемента");
	
	Для НомерОбхода = 1 По 2 Цикл
		// Первый обход - списание по остатку плана лечения, второй обход - сверх остатка, если не все работы пристроили.
		Если НомерОбхода = 2 Тогда
			Если ВыполнениеПлана.Итог("Количество") = ВыполнениеПлана.Итог("Списано") Тогда
				Прервать;
			КонецЕсли;
			
			ПланЛечения.Сортировать("ПорядокПоВидуНазначения УБЫВ, ПорядокЭлемента УБЫВ");
		КонецЕсли;
		
		Для Каждого СтрокаРаботы Из ВыполнениеПлана Цикл
			
			Если СтрокаРаботы.Списано < СтрокаРаботы.Количество Тогда
				
				ЗаполнитьЗначенияСвойств(ОтборПЛ, СтрокаРаботы);
				СтрокиПлана = ПланЛечения.НайтиСтроки(ОтборПЛ);
				Для Каждого СтрокаПлана Из СтрокиПлана Цикл
					
					Если СтрокаРаботы.Списано < СтрокаРаботы.Количество Тогда

						ДоступноКСписанию = СтрокаПлана.Остаток - СтрокаПлана.Списано;
						Если ДоступноКСписанию > 0 Или НомерОбхода = 2 Тогда
							
							Если НомерОбхода = 1 Тогда
								СписатьКоличество = Мин(ДоступноКСписанию, СтрокаРаботы.Количество - СтрокаРаботы.Списано);
							Иначе
								СписатьКоличество = СтрокаРаботы.Количество - СтрокаРаботы.Списано;
							КонецЕсли;
							
							СтрокаДвижения = ДвиженияВыполнения.Добавить();
							СтрокаДвижения.ИдентификаторЭлемента = СтрокаПлана.ИдентификаторЭлемента;
							СтрокаДвижения.Количество			 = СписатьКоличество;
							
							СтрокаРаботы.Списано = СтрокаРаботы.Списано + СписатьКоличество;
							СтрокаПлана.Списано	= СтрокаПлана.Списано + СписатьКоличество;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДвиженияВыполнения;
	
КонецФункции

// Возвращает перечень врачей, направивших пациента на обследования (процедуры).
//
// Параметры:
//  Клиент				 - СправочникСсылка.Клиенты	 - Пациент, которого направили на обследования (процедуры).
//  Дата				 - Дата						 - Определяет срок наступления даты назначения обследований (процедур).
//  МассивНоменклатура	 - Массив					 - перечень назначенных обследований (процедур).
//  ФормаУчастия		 - СправочникСсылка.ТрудовыеРоли - Форма участия для направивших врачей, указанная в учетной политике.
// 
// Возвращаемое значение:
//   Соответствие.
//
Функция ПолучитьНаправившихВрачей(Клиент, Дата, МассивНоменклатура, ФормаУчастия) Экспорт
	
	ДляВсехУслуг = ФормаУчастия.ДляВсехУслуг;
	Если Не ДляВсехУслуг Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТрудовыеРолиРаботИТоваров.Номенклатура КАК Номенклатура
		               |ИЗ
		               |	РегистрСведений.ТрудовыеРолиРаботИТоваров КАК ТрудовыеРолиРаботИТоваров
		               |ГДЕ
		               |	ТрудовыеРолиРаботИТоваров.ТрудоваяРоль = &ФормаУчастия
		               |	И ТрудовыеРолиРаботИТоваров.Номенклатура В(&Номенклатура)";
	
		Запрос.УстановитьПараметр("ФормаУчастия", ФормаУчастия);
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатура);
		МассивНоменклатура = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	
	НаправившиеВрачи = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Прием.Ссылка КАК Ссылка,
	               |	Прием.Дата КАК Дата,
	               |	Прием.Закрыт КАК Закрыт,
	               |	Прием.Врач КАК Врач
	               |ПОМЕСТИТЬ Приемы
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.Клиент = &Клиент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПланыЛечения.Номенклатура КАК Номенклатура,
	               |	ЕстьNULL(ПервичныеПриемы.Закрыт, ЛОЖЬ) КАК Закрыт,
	               |	ВЫБОР
	               |		КОГДА ПланыЛечения.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	               |				И ПланыЛечения.Дата <= &Дата
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ПланыЛечения.Дата
	               |	КОНЕЦ КАК ДатаНазначения,
	               |	Приемы.Дата КАК ДатаДокументаНазначения,
	               |	Приемы.Врач КАК Врач,
	               |	ПланыЛечения.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	               |	ПланыЛечения.ПервичныйПрием КАК ПервичныйПрием,
	               |	ПланыЛечения.Количество КАК Количество
	               |ПОМЕСТИТЬ План
	               |ИЗ
	               |	РегистрСведений.ПланыЛечения КАК ПланыЛечения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приемы КАК Приемы
	               |		ПО ПланыЛечения.ДокументРегистратор = Приемы.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Приемы КАК ПервичныеПриемы
	               |		ПО ПланыЛечения.ПервичныйПрием = Приемы.Ссылка
	               |ГДЕ
	               |	ПланыЛечения.Номенклатура В(&Номенклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыполнениеПланаЛечения.ПервичныйПрием КАК ПервичныйПрием,
	               |	ВыполнениеПланаЛечения.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	               |	СУММА(ВыполнениеПланаЛечения.Количество) КАК Количество
	               |ПОМЕСТИТЬ Выполнение
	               |ИЗ
	               |	РегистрСведений.ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
	               |ГДЕ
	               |	ВыполнениеПланаЛечения.ИдентификаторЭлемента В
	               |			(ВЫБРАТЬ План.ИдентификаторЭлемента ИЗ План)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыполнениеПланаЛечения.ПервичныйПрием,
	               |	ВыполнениеПланаЛечения.ИдентификаторЭлемента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	План.Номенклатура КАК Номенклатура,
	               |	План.Закрыт КАК Закрыт,
	               |	ВЫБОР
	               |		КОГДА План.Количество - ЕстьNULL(Выполнение.Количество, 0) <= 0
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьОстатокНазначения,
	               |	План.ДатаНазначения КАК ДатаНазначения,
	               |	План.ДатаДокументаНазначения КАК ДатаДокументаНазначения,
	               |	План.Врач КАК Врач
	               |ИЗ
	               |	План КАК План
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Выполнение КАК Выполнение
	               |		ПО План.ПервичныйПрием = Выполнение.ПервичныйПрием
	               |			И План.ИдентификаторЭлемента = Выполнение.ИдентификаторЭлемента";
		
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		ТаблицаРезультата.Сортировать("Номенклатура, Закрыт, ЕстьОстатокНазначения Убыв, ДатаНазначения, ДатаДокументаНазначения");
		Для Каждого СтрокаРезультат Из ТаблицаРезультата Цикл 
			Если НаправившиеВрачи.Получить(СтрокаРезультат.Номенклатура) <> Неопределено Тогда 	
				Продолжить;
			КонецЕсли;
			НаправившиеВрачи.Вставить(СтрокаРезультат.Номенклатура, СтрокаРезультат.Врач); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат НаправившиеВрачи;	
	
КонецФункции

#КонецОбласти

#Область РаботаСМедкартами

// Возвращает основную мед. карту клиента нужного типа
//  или, если основной нет, единственную, по заданным параметрам, не основную.
//
// Параметры:
//  Клиент			- 	СправочникСсылка.Клиенты - пациент мед. карты; 
//  Дата			-	Дата - Для возвращения актуальной мед. карты для данной даты;
//  ТипКарты		- 	ПеречислениеСсылка.ТипыМедицинскихКарт. 
// 
// Возвращаемое значение:
//   - СправочникСсылка.МедицинскиеКарты. 
//
Функция ПолучитьОсновнуюМедКартуПациента(Клиент, Дата = Неопределено, ТипКарты = Неопределено) Экспорт
	
	// Возвращаем основную карт, если он сответствует заданному типу карты
	Если ЗначениеЗаполнено(Клиент.ОсновнаяМедицинскаяКарта) Тогда
		Если ТипКарты = Неопределено Тогда
			Возврат Клиент.ОсновнаяМедицинскаяКарта;
		Иначе
			ТипОсновнойКарты = Клиент.ОсновнаяМедицинскаяКарта.ВидКарты.ТипКарты;
			
			Если ТипЗнч(ТипКарты) = Тип("ПеречислениеСсылка.ТипыМедицинскихКарт")
					И ТипОсновнойКарты = ТипКарты
				Или ТипЗнч(ТипКарты) = Тип("Массив")
					И ТипКарты.Найти(ТипОсновнойКарты) <> Неопределено
			Тогда
				Возврат Клиент.ОсновнаяМедицинскаяКарта;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	// Если актуальная карта нужного типа строго одна, она считается основной и будет возвращена.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Клиент);
	ЗапросТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	МедицинскиеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|ГДЕ
	|	МедицинскиеКарты.Клиент = &Клиент";
	
	Если ЗначениеЗаполнено(Дата) Тогда
		ЗапросТекст = ЗапросТекст + " И (МедицинскиеКарты.ДатаЗакрытия > &Дата ИЛИ МедицинскиеКарты.ДатаЗакрытия ЕСТЬ NULL)
									| И МедицинскиеКарты.ДатаРегистрации <= &Дата";	
		Запрос.УстановитьПараметр("Дата", Дата);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТипКарты) Тогда
		ЗапросТекст = ЗапросТекст + " И МедицинскиеКарты.ВидКарты.ТипКарты В (&ТипКарты)";
		Запрос.УстановитьПараметр("ТипКарты", ТипКарты);
	КонецЕсли; 
	
	Запрос.Текст = ЗапросТекст;
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Количество() = 1 Тогда
		Выб.Следующий();
		Возврат Выб.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.МедицинскиеКарты.ПустаяСсылка();
			
КонецФункции

// Возвращает актуалный первичный приём медкарты, если он есть и он один (без параллаельных первичных приёмов.
Функция ПолучитьТекущийПервичныйПриемМедкарты(МедицинскаяКарта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Прием.Ссылка
	|ИЗ
	|	Документ.Прием КАК Прием
	|ГДЕ
	|	Прием.МедицинскаяКарта = &МедицинскаяКарта
	|	И Прием.ЭтоПервичный
	|	И Прием.Проведен
	|	И НЕ Прием.Закрыт";
	
	Запрос.УстановитьПараметр("МедицинскаяКарта", МедицинскаяКарта);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстТитульного(МедицинскаяКарта, Клиент = Неопределено, ОписаниеОшибки = "", ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ДляРедактирования = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(МедицинскаяКарта.ВидКарты) Тогда
		МакетСсылка = МедицинскаяКарта.ВидКарты.Макет;
		Если ЗначениеЗаполнено(МакетСсылка) Тогда
			Если МедицинскаяКарта.ВидКарты.ИспользуетсяВнешняяПФ Тогда
				ИмяВнешнейОбработки = ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(МакетСсылка, "ХранилищеВнешнейОбработки"), "ВнОбр", Ложь);
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
				ВнешняяОбработка.СсылкаНаОбъект = МедицинскаяКарта;
				Попытка
					ТабДокТитульныйЛист = ВнешняяОбработка.Печать();
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
				КонецПопытки;
			Иначе
				ТабДокТитульныйЛист = ЗаполнитьМедицинскуюКарту(МедицинскаяКарта, Клиент,,, ДатаНачала, ДатаОкончания, ДляРедактирования);
			КонецЕсли;
		Иначе
			ОписаниеОшибки = "Для вида медкарт """ + Строка(МедицинскаяКарта.ВидКарты) + """ не указан шаблон печати титульного листа";
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "Не заполнен вид медицинской карты.";
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТабДокТитульныйЛист;
	
КонецФункции

Функция ПолучитьВычисляемыеЗначенияПараметровМедкарты(Медкарта, Знач ВидМедкарты = Неопределено, Знач ТекущиеЗначенияПараметров = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПараметров = Новый Структура("Параметры, Значения", Новый Структура, Новый Структура);
	
	Если ТипЗнч(Медкарта) <> Тип("СправочникСсылка.МедицинскиеКарты") Тогда
		Возврат ДанныеПараметров;
	КонецЕсли;
	
	Если ВидМедкарты = Неопределено Тогда 
		ВидМедкарты = Медкарта.ВидКарты;
	КонецЕсли;
	
	Если Не Справочники.ВидыМедицинскихКарт.ИспользуютсяВычисляемыеПараметры(ВидМедкарты) Тогда
		Возврат ДанныеПараметров;
	КонецЕсли;
	
	Если ТекущиеЗначенияПараметров = Неопределено Тогда 
		ТекущиеЗначенияПараметров = Медкарта.ЗаполняемыеПараметры.Выгрузить();
	ИначеЕсли ТипЗнч(ТекущиеЗначенияПараметров) = Тип("ДанныеФормыКоллекция") Тогда 
		ТекущиеЗначенияПараметров = ТекущиеЗначенияПараметров.Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыМедицинскихКартЗаполняемыеПараметры.Ссылка КАК ВидМедкарты,
	|	ВидыМедицинскихКартЗаполняемыеПараметры.ИмяПараметра КАК Параметр,
	|	ВидыМедицинскихКартЗаполняемыеПараметры.ЗначениеПоУмолчанию,
	|	ВидыМедицинскихКартЗаполняемыеПараметры.ИмяПараметра.ПараметрШаблонаОсмотра КАК ПараметрШаблонаОсмотра,
	|	ВидыМедицинскихКартЗаполняемыеПараметры.ИмяПараметра.ИспользуетсяПервоеЗначениеПараметраШаблона КАК ИспользуетсяПервоеЗначениеПараметраШаблона
	|ПОМЕСТИТЬ ПараметрыВидаМедкарты
	|ИЗ
	|	Справочник.ВидыМедицинскихКарт.ЗаполняемыеПараметры КАК ВидыМедицинскихКартЗаполняемыеПараметры
	|ГДЕ
	|	ВидыМедицинскихКартЗаполняемыеПараметры.Ссылка = &ВидМедкарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МедицинскиеКартыЗаполняемыеПараметры.ИмяПараметра КАК Параметр,
	|	МедицинскиеКартыЗаполняемыеПараметры.Значение
	|ПОМЕСТИТЬ ПараметрыМедкарты
	|ИЗ
	|	&ТекущиеЗначенияПараметров КАК МедицинскиеКартыЗаполняемыеПараметры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыВидаМедкарты.ВидМедкарты,
	|	ПараметрыВидаМедкарты.Параметр,
	|	ПараметрыВидаМедкарты.ПараметрШаблонаОсмотра,
	|	ПараметрыВидаМедкарты.ИспользуетсяПервоеЗначениеПараметраШаблона
	|ПОМЕСТИТЬ ПараметрыПолучаемыеИзПриемов
	|ИЗ
	|	ПараметрыВидаМедкарты КАК ПараметрыВидаМедкарты
	|ГДЕ
	|	ПараметрыВидаМедкарты.ПараметрШаблонаОсмотра <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыHTML.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПараметровHTML.Документ.Дата КАК Дата,
	|	ЗначенияПараметровHTML.Параметр,
	|	ЗначенияПараметровHTML.Значение
	|ПОМЕСТИТЬ ПараметрыПриемов
	|ИЗ
	|	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
	|ГДЕ
	|	ЗначенияПараметровHTML.Документ.МедицинскаяКарта = &Медкарта
	|	И ЗначенияПараметровHTML.Документ.Проведен
	|	И ЗначенияПараметровHTML.Параметр В
	|			(ВЫБРАТЬ
	|				ПараметрыПолучаемыеИзПриемов.ПараметрШаблонаОсмотра
	|			ИЗ
	|				ПараметрыПолучаемыеИзПриемов КАК ПараметрыПолучаемыеИзПриемов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыПриемов.Параметр,
	|	ПараметрыПриемов.Значение,
	|	ЛОЖЬ КАК ПервоеЗначение
	|ПОМЕСТИТЬ ЗначенияПараметровПриемов
	|ИЗ
	|	ПараметрыПриемов КАК ПараметрыПриемов
	|ГДЕ
	|	ПараметрыПриемов.Дата В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ПараметрыПриемовМаксимум.Дата) КАК Дата
	|			ИЗ
	|				ПараметрыПриемов КАК ПараметрыПриемовМаксимум
	|			ГДЕ
	|				ПараметрыПриемовМаксимум.Параметр = ПараметрыПриемов.Параметр)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПриемов.Параметр,
	|	ПараметрыПриемов.Значение,
	|	ИСТИНА
	|ИЗ
	|	ПараметрыПриемов КАК ПараметрыПриемов
	|ГДЕ
	|	ПараметрыПриемов.Дата В
	|			(ВЫБРАТЬ
	|				МИНИМУМ(ПараметрыПриемовМинимум.Дата) КАК Дата
	|			ИЗ
	|				ПараметрыПриемов КАК ПараметрыПриемовМинимум
	|			ГДЕ
	|				ПараметрыПриемовМинимум.Параметр = ПараметрыПриемов.Параметр)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыВидаМедкарты.Параметр,
	|	ПараметрыВидаМедкарты.ЗначениеПоУмолчанию,
	|	ПараметрыМедкарты.Значение,
	|	ЗначенияПараметровПриемов.Значение КАК ЗначениеИзПриема,
	|	ПараметрыВидаМедкарты.ПараметрШаблонаОсмотра <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыHTML.ПустаяСсылка) КАК ИспользуетсяПараметрШаблона,
	|	ПараметрыВидаМедкарты.ПараметрШаблонаОсмотра,
	|	ПараметрыВидаМедкарты.ИспользуетсяПервоеЗначениеПараметраШаблона
	|ИЗ
	|	ПараметрыВидаМедкарты КАК ПараметрыВидаМедкарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыМедкарты КАК ПараметрыМедкарты
	|		ПО ПараметрыВидаМедкарты.Параметр = ПараметрыМедкарты.Параметр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПараметровПриемов КАК ЗначенияПараметровПриемов
	|		ПО ПараметрыВидаМедкарты.ПараметрШаблонаОсмотра = ЗначенияПараметровПриемов.Параметр
	|			И ПараметрыВидаМедкарты.ИспользуетсяПервоеЗначениеПараметраШаблона = ЗначенияПараметровПриемов.ПервоеЗначение";
	Запрос.УстановитьПараметр("ВидМедкарты", ВидМедкарты);
	Запрос.УстановитьПараметр("Медкарта", Медкарта);
	Запрос.УстановитьПараметр("ТекущиеЗначенияПараметров", ТекущиеЗначенияПараметров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыВычисляемыеИзПриемов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяПараметра = Выборка.Параметр.Наименование;

		Значение = ""; // Значение для печати в титульном листе, актуальное значение.
		РучноеЗначение = ""; // Внесенное вручную или значением по умолчанию из вида карты при создании медкарты.
		ВычисленноеЗначение = ""; // Рассчитанное по данным приёмов, если параметр медкарты связан с параметром приёма.
		
		Если ЗначениеЗаполнено(Выборка.Значение)
			Или (ТипЗнч(Выборка.Значение) = Тип("Строка") И СтрДлина(Выборка.Значение) <> 0)
		Тогда
			РучноеЗначение = Выборка.Значение;
		КонецЕсли;
		
		Если Выборка.ИспользуетсяПараметрШаблона
			И ЗначениеЗаполнено(Выборка.ЗначениеИзПриема)
		Тогда
			ВычисленноеЗначение = Выборка.ЗначениеИзПриема;
		КонецЕсли;
		
		ЭтоНовый = Выборка.Значение = NULL И Не ЗначениеЗаполнено(ВычисленноеЗначение);
		
		Если РучноеЗначение <> "" Тогда
			Значение = РучноеЗначение;
		ИначеЕсли ЗначениеЗаполнено(ВычисленноеЗначение) Тогда
			Значение = ВычисленноеЗначение;
		ИначеЕсли ЭтоНовый И ЗначениеЗаполнено(Выборка.ЗначениеПоУмолчанию)	Тогда
			Значение = Выборка.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Дата")
			И Значение = НачалоДня(Значение)
		Тогда
			Значение = Формат(Значение, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		// Значение для незаполненного параметра
		ЗначениеПоУмолчанию = "";
		Если ЗначениеЗаполнено(ВычисленноеЗначение) Тогда
			ЗначениеПоУмолчанию = ВычисленноеЗначение;
		Иначе
			ЗначениеПоУмолчанию = Выборка.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		СтруктураПараметра = Новый Структура("Параметр, ТипЗначения, Значение, РучноеЗначение, ВычисленноеЗначение, ЗначениеПоУмолчанию, ЭтоНовый", 
			Выборка.Параметр, Выборка.Параметр.ТипЗначения, Значение, РучноеЗначение, ВычисленноеЗначение, ЗначениеПоУмолчанию, ЭтоНовый);
		ДанныеПараметров.Параметры.Вставить(ИмяПараметра, СтруктураПараметра);
		ДанныеПараметров.Значения.Вставить(ИмяПараметра, Значение);
		
	КонецЦикла;	
	
	Возврат ДанныеПараметров;
	
КонецФункции

Функция ЗаполнитьМедицинскуюКарту(МедКарта, Клиент = Неопределено, ИмяМакета = Неопределено, ОписаниеОшибки = "", ДатаНачала, ДатаОкончания, ДляРедактирования = Ложь)
	
	Если Ложь Тогда Медкарта = Справочники.МедицинскиеКарты.ПустаяСсылка(); КонецЕсли;
		
	ТабДокумент	= Новый ТабличныйДокумент;
	
	Если ИмяМакета = Неопределено Тогда 
		ИмяМакета = МедКарта.ВидКарты.Макет;
	КонецЕсли;
	
	Если Клиент = Неопределено Тогда 
		Клиент = МедКарта.Клиент;
	КонецЕсли;
		
	МакетМетаданные = Метаданные.Справочники.ВидыМедицинскихКарт.Макеты.Найти(ИмяМакета);
	Если МакетМетаданные = Неопределено Тогда 
		ОписаниеОшибки = "Не найден выбранный макет вида медкарты.";
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = Справочники.ВидыМедицинскихКарт.ПолучитьМакет(ИмяМакета);
		
	Если ТипЗнч(Макет) <> Тип("ТабличныйДокумент") Тогда
		ОписаниеОшибки = "Выбранный макет не является табличным документом.";
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполняемые параметры медкарты
	ЗначенияПараметровМедкарты = ПолучитьЗначенияПараметровМедкарты(Медкарта);	
	ДанныеВычисляемыхПараметровМедкарты = ПолучитьВычисляемыеЗначенияПараметровМедкарты(Медкарта, Медкарта.ВидКарты);
	ЗначенияВычисляемыхПараметровМедкарты = ДанныеВычисляемыхПараметровМедкарты.Значения;
	
	ТабДокумент = МедицинскаяДеятельностьПереопределяемый.ПечатьКарты(МедКарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты, ИмяМакета, ДляРедактирования);
	
	Если ТабДокумент = Неопределено Тогда
	
	Если	ИмяМакета = "МедицинскаяКарта025у_А4_приказ834н"
		Или ИмяМакета = "МедицинскаяКарта025у_А5_приказ834н"
		Или ИмяМакета = "МедицинскаяКарта025у_А4_приказ834н_На_1_Лист"
	Тогда
		
		ТабДокумент = ПечатьАмбулаторнойКарты025у(МедКарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты, ИмяМакета, ДатаНачала, ДатаОкончания);
		
	ИначеЕсли	ИмяМакета = "стомАмбулаторнаяКарта043У" Или ИмяМакета = "стомАмбулаторнаяКарта043УПолная"
			Или	ИмяМакета = "стомАмбулаторнаяКарта043У_А4" Или ИмяМакета = "стомАмбулаторнаяКарта043УПолная_А4"
	Тогда
		
		ТабДокумент = ПечатьАмбулаторнойКарты043у(МедКарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты, ИмяМакета, ДатаНачала, ДатаОкончания);
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ЗаполнитьОбластьМедкартыПараметрами(ОбластьМакета, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
		
		ОбщегоНазначения.ЗаполнитьПараметрПосимвольно(ОбластьМакета, "ОГРН", ЗначенияПараметровМедкарты.ОГРН);
		ОбщегоНазначения.ЗаполнитьПараметрПосимвольно(ОбластьМакета, "СНИЛС", ЗначенияПараметровМедкарты.СНИЛС);
			
		ТабДокумент.Вывести(ОбластьМакета);
		
		Попытка
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЛист2");
			ЗаполнитьОбластьМедкартыПараметрами(ОбластьМакета, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
			ТабДокумент.Вывести(ОбластьМакета);
		Исключение
		КонецПопытки;
			
	КонецЕсли;
	КонецЕсли;
	
	Если ТабДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ИспользоватьНастройкиПринтера Тогда
		
		ДвусторонняяПечать = МедКарта.ВидКарты.ДвусторонняяПечать;
		Если ДвусторонняяПечать = "Нет" Тогда
			ТабДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.Нет;
		ИначеЕсли ДвусторонняяПечать = "ПереворотВлево" Тогда
			ТабДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево;
		ИначеЕсли ДвусторонняяПечать = "ПереворотВверх" Тогда 
			ТабДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВверх;
		Иначе
			ТабДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ИспользоватьНастройкиПринтера;
		КонецЕсли;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати = ИмяМакета;

	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьКартинкуШтрихкода(Ссылка)

	ТипШК = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	
	Штрихкод = РаботаСТорговымОборудованиемСервер.ПолучитьШтрихкодВладельца(Ссылка, ТипШК);

	Если Штрихкод = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВнешняяКомпонента = ГенерацияШтрихкодаСерверПовтИсп.ПодключитьКомпонентуГенерацииИзображенияШтрихкода("");
	
	ТипКода = Штрихкодирование.ПолучитьЗначениеТипаШтрихкодаДляЭУ(ТипШК);
	
	ПараметрыШтрихкода = Штрихкодирование.ПолучитьПараметрыШтрихкода(300,40, ТипКода, Штрихкод);
	ПараметрыШтрихкода.ОтображатьТекст = Истина;	
		
	Возврат Штрихкодирование.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода, Истина);
	
КонецФункции

// Адрес клиента для медкарты
//
// Параметры:
//  Клиент						 - СправочникСсылка.Клиенты - клиент 
//  ВернутьТолькоПредставление	 - Булево - вернуть только представление 
//  ВидАдреса					 - СправочникСсылка.ВидыКонтактнойИнформации - вид адреса 
// 
// Возвращаемое значение:
//  Структура, Строка - адрес клиента как строка или структура полей адреса.
//
Функция ПолучитьАдресКлиентаДляМедкарты(Клиент, ВернутьТолькоПредставление = Истина, ВидАдреса = Неопределено) Экспорт
	
	Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Запись.Объект = Клиент;
	Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Запись.Вид = ?(ВидАдреса <> Неопределено, ВидАдреса, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
	Запись.Прочитать();
	Если Не Запись.Выбран() И ВидАдреса = Неопределено Тогда
		Запись.Объект = Клиент;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.АдресФактический;
		Запись.Прочитать();
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура("Представление, СубъектРФ, Район, Город, НаселПункт, Улица, Дом, Корпус, Квартира");
	
	Если Запись.Выбран() Тогда
		// Адрес найден
		Если Не ЗначениеЗаполнено(Запись.ЗначенияПолей) Тогда
			Запись = КонтактнаяИнформацияСервер.ОбновитьКИПодФорматФИАС(Клиент, Запись.Вид);	
		КонецЕсли;
		
		Если ВернутьТолькоПредставление Тогда
			
			ВидИнформации = Новый Структура("ФорматАдреса, ВключатьИндексВПредставление", "ФИАС", Ложь);
			ВидИнформации.Вставить("ВключатьСтрануВПредставление", Ложь); // Вывод страны в адресе не осуществлять.
			
			АдресXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Запись.ЗначенияПолей);
			СоставАдреса = АдресXDTO.Состав.Состав;
			
			Если ТипЗнч(СоставАдреса) = Тип("Строка") Тогда
				// Адрес другой страны.
				Представление = СоставАдреса;
			Иначе
				СоставАдреса.КраткоеПредставление = Ложь;
				СтруктураJSONАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Запись.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
				Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеАдреса(СтруктураJSONАдреса, ВидИнформации);
			КонецЕсли;
			
			Возврат Представление;
		Иначе
			
			ДанныеАдреса = КонтактнаяИнформацияСервер.ПолучитьПредставлениеЭлементовАдресов(Запись.ЗначенияПолей, Истина);
			ДанныеАдреса.Вставить("Представление", СокрЛП(Запись.Представление));
			
			Возврат ДанныеАдреса;
			
		КонецЕсли;
	Иначе
		// У пациента нет подходящего адреса
		Если ВернутьТолькоПредставление Тогда
			Возврат "";
		Иначе
			Возврат ОбщегоНазначенияРасширенный.СоздатьСтруктуруПоЭлементуКоллекции(СтруктураАдреса, , "");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Телефон клиента для медкарты
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - клиент
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьТелефонКлиентаДляМедкарты(Клиент)
	
	Телефон = "";
	
	Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Запись.Объект = Клиент;
	Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Запись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонДомашний;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Телефон = Запись.Представление;
	Иначе
		ЛюбойТелефонКлиента = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон,,Истина);
		Если ЗначениеЗаполнено(ЛюбойТелефонКлиента) Тогда
			Телефон = ЛюбойТелефонКлиента;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Телефон;
	
КонецФункции

Функция ПолучитьЗначенияПараметровМедкарты(Медкарта, Филиал = Неопределено) Экспорт
	
	Клиент = Медкарта.Клиент;
	ИмяМакета = Медкарта.ВидКарты.Макет;
	
	СтруктураПараметров = Новый Структура;
	
	Если Филиал = Неопределено Тогда
		Филиал = ?(ЗначениеЗаполнено(Медкарта.Филиал), Медкарта.Филиал, ПланыОбмена.Полный.ЭтотУзел().Филиал);
	КонецЕсли;
	
	СтруктураРеквизитовОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Филиал); 
	
	МестоРаботы = Строка(Клиент.умцМестоРаботы);
	Если ТипЗнч(Клиент.умцМестоРаботы) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Клиент.умцМестоРаботы.НаименованиеПолное) Тогда
		МестоРаботы = Клиент.умцМестоРаботы.НаименованиеПолное;
	КонецЕсли;
	Если ЗначениеЗаполнено(Клиент.Профессия) Тогда 
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(МестоРаботы, Клиент.Профессия, " ");
	КонецЕсли;	
	СтруктураАдреса = ПолучитьАдресКлиентаДляМедкарты(Клиент, Ложь);
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("Клиент", Клиент);
	ЗапросШапка.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Клиенты.Фамилия,
	|	Клиенты.Имя,
	|	Клиенты.Отчество,
	|	Клиенты.Пол,
	|	Клиенты.ДатаРождения,
	|	Клиенты.СНИЛС КАК СНИЛС,
	|	Клиенты.умцМестоРаботы КАК МестоРаботы1,
	|	Клиенты.умцМестоРаботыДополнительное КАК МестоРаботы2,
	|	Клиенты.умцМестоРаботы.НаименованиеПолное КАК МестоРаботы1НаименованиеПолное
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка = &Клиент";
	Результат = ЗапросШапка.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Для Каждого Колонка Из Результат.Колонки Цикл
		СтруктураПараметров.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	// Заполнение данных полиса ОМС
	ДанныеПолиса = МедицинскоеСтрахование.ПолучитьДанныеПолисаДляМедкарты(Клиент);
	Для Каждого КлючЗначение Из ДанныеПолиса Цикл
		СтруктураПараметров.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	// Общие параметры
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", СтруктураРеквизитовОрганизации.НазваниеОрганизации);
	СтруктураПараметров.Вставить("АдресОрганизации", СтруктураРеквизитовОрганизации.Адрес);
	СтруктураПараметров.Вставить("ОКПО", СтруктураРеквизитовОрганизации.ОКПО);
	СтруктураПараметров.Вставить("ОГРН", СтруктураРеквизитовОрганизации.ОГРН);
	
	СтруктураПараметров.Вставить("ФИО", CRMСервер.ПолучитьФИООбъекта(Клиент));	
	СтруктураПараметров.Вставить("Пол", ?(Клиент.Пол = Перечисления.ПолФизическихЛиц.Женский, "Ж", "М"));
	СтруктураПараметров.Вставить("ДатаРождения", Формат(Клиент.ДатаРождения, "ДФ=dd.MM.yyyy"));
	СтруктураПараметров.Вставить("Возраст", ОбщегоНазначенияКлиентСервер.ПолучитьВозрастСтрокой(Клиент.ДатаРождения, Медкарта.ДатаРегистрации, Истина)); // На дату заведения медкарты.
	СтруктураПараметров.Вставить("Адрес", ПолучитьАдресКлиентаДляМедкарты(Клиент, Истина)); // Содержит все компоненты адреса, в отличие от СтруктураАдреса.Представление.
	СтруктураПараметров.Вставить("Телефон", ПолучитьТелефонКлиентаДляМедкарты(Клиент));
	СтруктураПараметров.Вставить("МестоРаботы", МестоРаботы);
	СтруктураПараметров.Вставить("Профессия", Клиент.Профессия);
	СтруктураПараметров.Вставить("КодЛьготы", КодЛьготыКлиента(Клиент));
	СтруктураПараметров.Вставить("СНИЛС", ОбщегоНазначенияКлиентСервер.ПривестиЧисловуюСтрокуКМаске(СтруктураПараметров.СНИЛС, МедицинскоеСтрахованиеКлиентСервер.МаскаСНИЛС()));
	
	// Номер карты
	НомерКарты = СтрЗаменить(Медкарта.Наименование, ", " + СтруктураПараметров.ФИО, ""); // В очень старых релизах наименование медкарты дополнялось ФИО клиента.
	СтруктураПараметров.Вставить("НомерКарты", СокрЛП(НомерКарты));
	
	// Специфичные параметры медкарт
	Если СтрНайти(ИмяМакета, "стомАмбулаторнаяКарта043У") <> 0 Тогда  
	
		СтруктураПараметров.Вставить("Год", Формат(?(ЗначениеЗаполнено(Медкарта.ДатаРегистрации), Медкарта.ДатаРегистрации, ТекущаяДата()), "ДФ='гггг ''г.'''"));	
		
	ИначеЕсли СтрНайти(ИмяМакета, "МедицинскаяКарта025у") <> 0 Тогда
		
		СтруктураПараметров.Вставить("Пол", ?(Клиент.Пол = Перечисления.ПолФизическихЛиц.Женский, "жен. - 2", "муж. - 1"));
		СтруктураПараметров.Вставить("ДатаЗаполнения", Формат(МедКарта.ДатаРегистрации,"ДФ=dd.MM.yyyy"));
		
		ПаспДанные = РегистрыСведений.ПаспортныеДанные.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("ФизЛицо", Клиент));
		Если ЗначениеЗаполнено(ПаспДанные) Тогда
			СтруктураПараметров.Вставить("ДокументП",	ПаспДанные.ДокументВид);
			СтруктураПараметров.Вставить("СерияП",		ПаспДанные.ДокументСерия);
			СтруктураПараметров.Вставить("НомерП",		ПаспДанные.ДокументНомер);			
		КонецЕсли; 

		СтруктураПараметров.Вставить("СубъектРФ", 		СтруктураАдреса.СубъектРФ);
		СтруктураПараметров.Вставить("Район", 			СтруктураАдреса.Район);
		СтруктураПараметров.Вставить("Город",			СтруктураАдреса.Город);
		СтруктураПараметров.Вставить("НаселенныйПункт", СтруктураАдреса.НаселПункт);
		
		Если СтруктураАдреса.Свойство("Территория")
			И ЗначениеЗаполнено(СтруктураАдреса.Территория)
		Тогда
			СтруктураПараметров.Вставить("Улица", 		СтруктураАдреса.Территория + ", " + СтруктураАдреса.Улица);
		Иначе
			СтруктураПараметров.Вставить("Улица", 		СтруктураАдреса.Улица);
		КонецЕсли;

		СтруктураПараметров.Вставить("Дом",				Строка(СтруктураАдреса.Дом) + " " + Строка(СтруктураАдреса.Корпус));
		СтруктураПараметров.Вставить("Квр",				СтруктураАдреса.Квартира);
		
		СтруктураПараметров.Вставить("Тел", СтруктураПараметров.Телефон);
		
		СтруктураПараметров.Вставить("МестоРаботы1", МестоРаботы);
		СтруктураПараметров.Вставить("МестоРаботы2", Клиент.умцМестоРаботыДополнительное);
			
	ИначеЕсли ИмяМакета = "стомМедицинскаяКартаОртодонтия043_1У" Тогда 
		
		СтруктураПараметров.Вставить("АдресСубъектРФ", 		СтруктураАдреса.СубъектРФ);
		СтруктураПараметров.Вставить("АдресРайон", 			СтруктураАдреса.Район);			
		СтруктураПараметров.Вставить("АдресГород",			СтруктураАдреса.Город);			
		СтруктураПараметров.Вставить("АдресНаселенныйПункт",СтруктураАдреса.НаселПункт);
		СтруктураПараметров.Вставить("АдресУлица",			СтруктураАдреса.Улица);
		СтруктураПараметров.Вставить("АдресДом",			Строка(СтруктураАдреса.Дом) + " " + Строка(СтруктураАдреса.Корпус));
		СтруктураПараметров.Вставить("АдресКвартира",		СтруктураАдреса.Квартира);
		
		СтруктураПараметров.Вставить("Телефон", СтруктураПараметров.Телефон);
		
		// Паспортные данные
		ПаспДанные = РегистрыСведений.ПаспортныеДанные.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("ФизЛицо", Клиент));
		Если ЗначениеЗаполнено(ПаспДанные) Тогда
			СтруктураПараметров.Вставить("ПаспортКемВыдан",		ПаспДанные.ДокументКемВыдан);
			СтруктураПараметров.Вставить("ПаспортСерия",		ПаспДанные.ДокументСерия);
			СтруктураПараметров.Вставить("ПаспортНомер",		ПаспДанные.ДокументНомер);			
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "Форма_111у_ИндивидуальнаяКартаБеременной" Тогда
		СтруктураПараметров.Вставить("ПолныхЛет",		 Строка(ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(Клиент.ДатаРождения, Медкарта.ДатаРегистрации)));
		СтруктураПараметров.Вставить("АдресПроживания",	 ПолучитьАдресКлиентаДляМедкарты(Клиент, Истина, Справочники.ВидыКонтактнойИнформации.АдресФактический));
		СтруктураПараметров.Вставить("АдресРегистрации", ПолучитьАдресКлиентаДляМедкарты(Клиент, Истина, Справочники.ВидыКонтактнойИнформации.АдресЮридический));
		СтруктураПараметров.Вставить("МобильныйТелефон", КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонСотовый, Истина));
		СтруктураПараметров.Вставить("ДомашнийТелефон",	 КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонДомашний, Истина));
		СтруктураПараметров.Вставить("РабочийТелефон",	 КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонРабочий, Истина));
		СтруктураПараметров.Вставить("АдресЭлектроннойПочты", КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, Истина));
	КонецЕсли;
		
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ЗаполнитьОбластьМедкартыПараметрами(ОбластьМедкарты, Значения, ВычисляемыеЗначения) Экспорт
	
	// Предварительная подготовка к заполнению
	ВычисляемыеЗначенияЗаполненные = Новый Структура;
	Для Каждого КлючЗначение Из ВычисляемыеЗначения Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение)
			Или ТипЗнч(КлючЗначение.Значение) <> Тип("Строка")
		Тогда
			ВычисляемыеЗначенияЗаполненные.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;		
	
	// Заполнение параметров макета медкарты.
	ОбластьМедкарты.Параметры.Заполнить(Значения);
	ОбластьМедкарты.Параметры.Заполнить(ВычисляемыеЗначенияЗаполненные);
		
КонецПроцедуры

// Функция - Получает данные о диагнозах, установленных по медкарте.
//
// Параметры:
//  Медкарта		- 	СправочникСсылка.МедицинскиеКарты - медкарта, которая выводится на печать; 
//  ДатаНачала		-	Дата - нижняя граница отбора по дате;
//  ДатаОкончания	- 	Дата - верхняя граница отбора по дате. 
// 
// Возвращаемое значение:
//   Массив - коллекция данных о диагнозах в виде структур. 
//
Функция ПолучитьДиагнозыПоМедкарте(Медкарта, ДатаНачала, Знач ДатаОкончания)
	
	Массив = Новый Массив;
	
	Если ТипЗнч(Медкарта) <> Тип("СправочникСсылка.МедицинскиеКарты") Тогда
		Возврат Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Прием.Ссылка КАК Ссылка,
	               |	Прием.Врач КАК Врач
	               |ПОМЕСТИТЬ Прием
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.МедицинскаяКарта = &Медкарта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Диагнозы.Период КАК Дата,
	               |	Прием.Врач КАК Врач,
	               |	Диагнозы.МедицинскаяКарта КАК МедицинскаяКарта,
	               |	Диагнозы.Диагноз КАК Диагноз,
	               |	Диагнозы.ВыявленВпервые КАК ВыявленВпервые
	               |ПОМЕСТИТЬ ВсеДиагнозы
	               |ИЗ
	               |	РегистрСведений.Диагнозы КАК Диагнозы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Прием КАК Прием
	               |ПО
	               |	Диагнозы.МедицинскаяКарта = &Медкарта
	               |	И Диагнозы.Классификация1 = &Окончательный
	               |	И (&ДатаНачала = НЕОПРЕДЕЛЕНО
	               |			ИЛИ Диагнозы.Период >= &ДатаНачала)
	               |	И (&ДатаОкончания = НЕОПРЕДЕЛЕНО
	               |			ИЛИ Диагнозы.Период <= &ДатаОкончания)
				   |	И Диагнозы.Регистратор = Прием.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВсеДиагнозы.Дата) КАК МинимальнаяДата,
	               |	ВсеДиагнозы.МедицинскаяКарта КАК МедицинскаяКарта,
	               |	ВсеДиагнозы.Диагноз КАК Диагноз
	               |ПОМЕСТИТЬ ПервичныеДиагнозы
	               |ИЗ
	               |	ВсеДиагнозы КАК ВсеДиагнозы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВсеДиагнозы.МедицинскаяКарта,
	               |	ВсеДиагнозы.Диагноз
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеДиагнозы.Дата КАК ДатаУстановкиДиагноза,
	               |	ВсеДиагнозы.Врач КАК ВрачУстановилДиагноз,
	               |	ВсеДиагнозы.Диагноз.КодДиагноза + "" "" + ВсеДиагнозы.Диагноз.НаименованиеПолное КАК ДиагнозЗаключительный,
	               |	ВсеДиагнозы.ВыявленВпервые КАК ДиагнозУстановленВпервые,
	               |	ПервичныеДиагнозы.Диагноз КАК Диагноз
	               |ИЗ
	               |	ВсеДиагнозы КАК ВсеДиагнозы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервичныеДиагнозы КАК ПервичныеДиагнозы
	               |		ПО ВсеДиагнозы.МедицинскаяКарта = ПервичныеДиагнозы.МедицинскаяКарта
	               |			И ВсеДиагнозы.Дата = ПервичныеДиагнозы.МинимальнаяДата
	               |			И ВсеДиагнозы.Диагноз = ПервичныеДиагнозы.Диагноз
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаУстановкиДиагноза";
	
	Если ДатаОкончания = Дата(1,1,1) Тогда
		ДатаОкончанияПараметр = Неопределено;
	ИначеЕсли ТипЗнч(ДатаОкончания) = Тип("Дата") Тогда
		ДатаОкончанияПараметр = КонецДня(ДатаОкончания);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Медкарта", Медкарта);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияПараметр);
	Запрос.УстановитьПараметр("Окончательный", Перечисления.КлассификацииДиагнозов.Окончательный);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл 
		Структура = Новый Структура;
		Структура.Вставить("ДатаУстановкиДиагноза", ВыборкаРезультатаЗапроса.ДатаУстановкиДиагноза);
		Структура.Вставить("ВрачУстановилДиагноз", ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаРезультатаЗапроса.ВрачУстановилДиагноз));
		Структура.Вставить("Диагноз", ВыборкаРезультатаЗапроса.Диагноз);
		Структура.Вставить("ДиагнозЗаключительный", ВыборкаРезультатаЗапроса.ДиагнозЗаключительный);
		Структура.Вставить("ДиагнозУстановленВпервые", Формат(ВыборкаРезультатаЗапроса.ДиагнозУстановленВпервые,"БЛ=-; БИ=+"));
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

#Область ИндивидуальныеОбработчикиЗаполненияМакетовМедкарт

Функция ПечатьАмбулаторнойКарты025у(Медкарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты, ИмяМакета = Неопределено, ДатаНачала, ДатаОкончания)
	
	Макет = Справочники.ВидыМедицинскихКарт.ПолучитьМакет(?(ИмяМакета = Неопределено, Медкарта.ВидКарты.Макет, ИмяМакета));
	Клиент = Медкарта.Клиент;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьОбластьМедкартыПараметрами(ОбластьМакета, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
	
	ОбщегоНазначения.ЗаполнитьПараметрПосимвольно(ОбластьМакета, "ОГРН", ЗначенияПараметровМедкарты.ОГРН);
	ОбщегоНазначения.ЗаполнитьПараметрПосимвольно(ОбластьМакета, "СНИЛС", ЗначенияПараметровМедкарты.СНИЛС);
	
	// Штрихкод
	ДанныеШтрихкода = ПолучитьКартинкуШтрихкода(МедКарта);
	Если ДанныеШтрихкода <> Неопределено Тогда 
		Штрихкод = Новый Картинка(ДанныеШтрихкода);
		Рис = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Индекс = ОбластьМакета.Рисунки.Индекс(Рис);
		ОбластьМакета.Рисунки[Индекс].Картинка = Штрихкод;
		ОбластьМакета.Рисунки[Индекс].РазмерКартинки = РазмерКартинки.Пропорционально;
		ОбластьМакета.Рисунки[Индекс].Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		ОбластьМакета.Рисунки[Индекс].Расположить(ОбластьМакета.Область("Штрихкод"));
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ИмяМакета <> "МедицинскаяКарта025у_А4_приказ834н_На_1_Лист" Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Если у макета есть область "Лист2", тогда выводим данную область.
	// Если у макета область "Лист2" отсутствует, тогда вызываем процедуру печати второй страницы медкарты по частям.
	Если Макет.Области.Найти("Лист2") <> Неопределено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Лист2"); 
		ЗаполнитьОбластьМедкартыПараметрами(ОбластьМакета, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
		ТабДокумент.Вывести(ОбластьМакета);
	Иначе			
		ПечатьВторойСтраницыАмбулаторнойКарты025у(ТабДокумент, Макет, Медкарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты, ДатаНачала, ДатаОкончания);
	КонецЕсли;
	
	Если ИмяМакета = "МедицинскаяКарта025у_А5_приказ834н" Тогда 
		ТабДокумент.РазмерСтраницы = "A5 Rotated";
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура - Печать второй страницы амбулаторной карты 025у.
//
// Параметры:
//  ТабДокумент								 - 	ТабличныйДокумент - печатная форма; 
//  Макет									 - 	МакетТабличногоДокумента - макет, на основании которого
//           									происходит вывод в табличный документ;  
//  Медкарта								 - 	СправочникСсылка.МедицинскиеКарты - медкарта, которая выводится на печать; 
//  ЗначенияПараметровМедкарты				 - 	Структура - коллекция значений параметров медкарты; 
//  ЗначенияВычисляемыхПараметровМедкарты	 - 	Структура - коллекция значений вычисляемых параметров медкарты;
//  ДатаНачала								 -	Дата - нижняя граница отбора по дате;
//  ДатаОкончания							 - 	Дата - верхняя граница отбора по дате. 
//
Процедура ПечатьВторойСтраницыАмбулаторнойКарты025у(ТабДокумент, Макет, Медкарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты, ДатаНачала, ДатаОкончания)

	Если Макет.Области.Найти("Лист2_Начало") <> Неопределено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Лист2_Начало"); 
		ЗаполнитьОбластьМедкартыПараметрами(ОбластьМакета, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если Макет.Области.Найти("Лист2_Пункт20_Шапка") <> Неопределено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Лист2_Пункт20_Шапка"); 
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	мсДиагнозы = ПолучитьДиагнозыПоМедкарте(Медкарта, ДатаНачала, ДатаОкончания);
	Если мсДиагнозы.Количество() <> 0 Тогда 
		Если Макет.Области.Найти("Лист2_Пункт20_Строка") <> Неопределено Тогда
			Для Каждого Диагноз Из мсДиагнозы Цикл 	
				ОбластьМакета = Макет.ПолучитьОбласть("Лист2_Пункт20_Строка"); 
				ОбластьМакета.Параметры.Заполнить(Диагноз);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("Лист2_Пункт20_Строка"); 
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	Иначе
		Если Макет.Области.Найти("Лист2_Пункт20_ПустаяТаблица") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Лист2_Пункт20_ПустаяТаблица"); 
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
	Если Макет.Области.Найти("Лист2_Конец") <> Неопределено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Лист2_Конец"); 
		ЗаполнитьОбластьМедкартыПараметрами(ОбластьМакета, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьАмбулаторнойКарты043у(Медкарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты, ИмяМакета = Неопределено, ДатаНачала, ДатаОкончания)
	
	ЭтоА5 = Прав(ИмяМакета,2) <> "А4";
	
	ТабДокумент = Новый ТабличныйДокумент;
	Если ЭтоА5 Тогда ТабДокумент.РазмерСтраницы = "A5 Rotated"; КонецЕсли;
	
	Макет = Справочники.ВидыМедицинскихКарт.ПолучитьМакет("стомАмбулаторнаяКарта043УПолная");
	Клиент = Медкарта.Клиент;
		
	#Область Страница1	
	СтраницаШапка = Макет.ПолучитьОбласть("СтраницаШапка");
	ЗаполнитьОбластьМедкартыПараметрами(СтраницаШапка, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
	ТабДокумент.Вывести(СтраницаШапка);
	#КонецОбласти

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	#Область Страница2
	Страница2Шапка = Макет.ПолучитьОбласть("Страница2Шапка");
	ЗаполнитьОбластьМедкартыПараметрами(Страница2Шапка, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);	
	ТабДокумент.Вывести(Страница2Шапка);
	
	#Область УМЦ
	ОбластьЗФ = Макет.ПолучитьОбласть("Страница2ЗФ");
	ДанныеЗубнойФормулы = ПолучитьДанныеЗубнойФормулыУМЦ(Клиент);
	Для Каждого кзЗуб Из ДанныеЗубнойФормулы Цикл
		СтруктураЗуб = кзЗуб.Значение;
		НомерЗуба = СтруктураЗуб.Номер;
		ОбластьЗФ.Параметры["З" + НомерЗуба] = НомерЗуба;
		Если СтруктураЗуб.Свойство("ОбозначениеСостояний") Тогда 
			ОбластьЗФ.Параметры["З" + НомерЗуба + "С"] = СтруктураЗуб.ОбозначениеСостояний;
		КонецЕсли;
	КонецЦикла;
	ОбластьЗФ.Параметры.ОписаниеОбозначений = ПолучитьОписаниеОбозначенийЗубовУМЦ(ДанныеЗубнойФормулы);
	ТабДокумент.Вывести(ОбластьЗФ);
	#КонецОбласти
	
	Страница2Подвал = Макет.ПолучитьОбласть("Страница2Подвал");
	ЗаполнитьОбластьМедкартыПараметрами(Страница2Подвал, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
	ТабДокумент.Вывести(Страница2Подвал);
	#КонецОбласти
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Если ИмяМакета = "стомАмбулаторнаяКарта043УПолная" Или ИмяМакета = "стомАмбулаторнаяКарта043УПолная_А4" Тогда 
		
		Диагнозы = ПолучитьДиагнозыПоМедкарте043У(Медкарта, ДатаНачала, ДатаОкончания);
		
		#Область Страница3
		
		ТабДокСтраница = Новый ТабличныйДокумент;
		Если ЭтоА5 Тогда ТабДокСтраница.РазмерСтраницы = "A5 Rotated"; КонецЕсли;
		Страница3Шапка = Макет.ПолучитьОбласть("Страница3Шапка");
		Страница3ДневникСтрока = Макет.ПолучитьОбласть("Страница3ДневникСтрока");
		Страница3Подвал = Макет.ПолучитьОбласть("Страница3Подвал");
		ЗаполнитьОбластьМедкартыПараметрами(Страница3Подвал, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
		ТабДокСтраница.Вывести(Страница3Шапка);
		
		ИндДиагноза = 0;
		КоличествоДиагнозов = Диагнозы.Количество()-1;
		
		СтрокиПодвалДневника = Новый Массив;
		СтрокиПодвалДневника.Добавить(Страница3Подвал);
		
		ВывестиСтрокиДиагноза043У(ТабДокСтраница, Макет, Диагнозы, ИндДиагноза, СтрокиПодвалДневника);
		
		ТабДокумент.Вывести(ТабДокСтраница);
		#КонецОбласти
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		#Область Страница4
		ТабДокСтраница = Новый ТабличныйДокумент;
		Если ЭтоА5 Тогда ТабДокСтраница.РазмерСтраницы = "A5 Rotated"; КонецЕсли;
		Страница4Шапка = Макет.ПолучитьОбласть("Страница4Шапка");
		Страница4ДневникСтрока = Макет.ПолучитьОбласть("Страница4ДневникСтрока");
		ЗаполнитьОбластьМедкартыПараметрами(Страница4Шапка, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
		ТабДокСтраница.Вывести(Страница4Шапка);
		
		ВывестиСтрокиДиагноза043У(ТабДокСтраница, Макет, Диагнозы, ИндДиагноза, Новый Массив);
		
		ТабДокумент.Вывести(ТабДокСтраница);
		#КонецОбласти
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		#Область Страница5
		ТабДокСтраница = Новый ТабличныйДокумент;
		Если ЭтоА5 Тогда ТабДокСтраница.РазмерСтраницы = "A5 Rotated"; КонецЕсли;
		Страница5Шапка = Макет.ПолучитьОбласть("Страница5Шапка");
		Страница5Строка = Макет.ПолучитьОбласть("Страница5Строка");
		ЗаполнитьОбластьМедкартыПараметрами(Страница5Шапка, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты);
		ТабДокСтраница.Вывести(Страница5Шапка);
		Пока ТабДокСтраница.ПроверитьВывод(Страница5Строка) Цикл 
			ТабДокСтраница.Вывести(Страница5Строка);
		КонецЦикла;
		ТабДокумент.Вывести(ТабДокСтраница);
		#КонецОбласти
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Функция - Получает данные о диагнозах, установленных по медкарте 043у.
//
// Параметры:
//  Медкарта		- 	СправочникСсылка.МедицинскиеКарты - медкарта, которая выводится на печать; 
//  ДатаНачала		-	Дата - нижняя граница отбора по дате;
//  ДатаОкончания	- 	Дата - верхняя граница отбора по дате. 
// 
// Возвращаемое значение:
//   Массив - коллекция данных о диагнозах в виде структур. 
//
Функция ПолучитьДиагнозыПоМедкарте043У(Медкарта, ДатаНачала, Знач ДатаОкончания)
	
	Массив = Новый Массив;
	
	Если ТипЗнч(Медкарта) <> Тип("СправочникСсылка.МедицинскиеКарты") Тогда
		Возврат Массив;
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.Диагнозы.Ресурсы.Найти("ЗубВКарте") <> Неопределено
		И Метаданные.РегистрыСведений.ПланыЛечения.Ресурсы.Найти("ЗубВКарте") <> Неопределено
		И Метаданные.Документы.Прием.ТабличныеЧасти.Работы.Реквизиты.Найти("ЗубВКарте") <> Неопределено
	Тогда
		ДоступнаСтоматология = Истина;
	Иначе
		ДоступнаСтоматология = Ложь;
	КонецЕсли;
					   
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Диагнозы.Период КАК Дата,
	               |	Диагнозы.Регистратор.Врач КАК Врач,
	               |	Диагнозы.МедицинскаяКарта КАК МедицинскаяКарта,
	               |	Диагнозы.Диагноз КАК Диагноз,
	               |	Диагнозы.ВыявленВпервые КАК ВыявленВпервые,
	               |	Диагнозы.Регистратор КАК Регистратор" 
				   + ?(ДоступнаСтоматология,",
	               |	Диагнозы.ЗубВКарте КАК ЗубВКарте","") 
				   + "
	               |ПОМЕСТИТЬ ВсеДиагнозы
	               |ИЗ
	               |	РегистрСведений.Диагнозы КАК Диагнозы
	               |ГДЕ
	               |	Диагнозы.МедицинскаяКарта = &Медкарта
	               |	И Диагнозы.Классификация1 = &Окончательный
	               |	И (&ДатаНачала = НЕОПРЕДЕЛЕНО
	               |			ИЛИ Диагнозы.Период >= &ДатаНачала)
	               |	И (&ДатаОкончания = НЕОПРЕДЕЛЕНО
	               |			ИЛИ Диагнозы.Период <= &ДатаОкончания)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВсеДиагнозы.Дата) КАК МинимальнаяДата,
	               |	ВсеДиагнозы.МедицинскаяКарта КАК МедицинскаяКарта,
	               |	ВсеДиагнозы.Диагноз КАК Диагноз
	               |ПОМЕСТИТЬ ПервичныеДиагнозы
	               |ИЗ
	               |	ВсеДиагнозы КАК ВсеДиагнозы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВсеДиагнозы.МедицинскаяКарта,
	               |	ВсеДиагнозы.Диагноз
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Прием.Ссылка КАК Регистратор
	               |ПОМЕСТИТЬ ВсеДокументы
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.МедицинскаяКарта = &Медкарта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Прием.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
	               |	ВсеДиагнозы.Дата КАК ДатаУстановкиДиагноза,
	               |	ВсеДиагнозы.Врач КАК ВрачУстановилДиагноз,
	               |	ВЫБОР
	               |		КОГДА ВсеДиагнозы.Диагноз.КодДиагноза <> """"
	               |			ТОГДА ""("" + ВсеДиагнозы.Диагноз.КодДиагноза + "") ""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА НЕ ВсеДиагнозы.Диагноз.НаименованиеПолное В (НЕОПРЕДЕЛЕНО, NULL, """")
	               |			ТОГДА ВсеДиагнозы.Диагноз.НаименованиеПолное
	               |		ИНАЧЕ ВсеДиагнозы.Диагноз.Наименование
	               |	КОНЕЦ КАК ДиагнозЗаключительный,
	               |	ВсеДиагнозы.ВыявленВпервые КАК ДиагнозУстановленВпервые,
	               |	""Диагноз"" КАК Тип,
	               |	""1"" КАК Порядок" 
				   + ?(ДоступнаСтоматология,",
	               |	ВсеДиагнозы.ЗубВКарте КАК ЗубВКарте","") 
				   + "
				   |ПОМЕСТИТЬ ВсеДиагнозыРаботыПланы
	               |ИЗ
	               |	ВсеДиагнозы КАК ВсеДиагнозы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервичныеДиагнозы КАК ПервичныеДиагнозы
	               |		ПО ВсеДиагнозы.МедицинскаяКарта = ПервичныеДиагнозы.МедицинскаяКарта
	               |			И ВсеДиагнозы.Дата = ПервичныеДиагнозы.МинимальнаяДата
	               |			И ВсеДиагнозы.Диагноз = ПервичныеДиагнозы.Диагноз
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
				   |ВЫБРАТЬ
				   |	ВсеДокументы.Регистратор.Дата,
				   |	ВсеДокументы.Регистратор.Врач,
	               |	ПриемРаботы.Номенклатура.Наименование,
	               |	ЛОЖЬ,
				   |	""Работа"",
	               |	""2""" 
				   + ?(ДоступнаСтоматология,",
	               |	ПриемРаботы.ЗубВКарте КАК ЗубВКарте","") 
				   + "
	               |ИЗ
	               |	ВсеДокументы КАК ВсеДокументы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Прием.Работы КАК ПриемРаботы
	               |		ПО (ПриемРаботы.Ссылка = ВсеДокументы.Регистратор)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
				   |	ПланыЛечения.ДокументРегистратор.Дата, 
	               |	ПланыЛечения.ДокументРегистратор.Врач,
				   |	ПланыЛечения.Номенклатура.Наименование, 
	               |	ЛОЖЬ,
	               |	""План"",
	               |	""3""" 
				   + ?(ДоступнаСтоматология,",
	               |	ВЫБОР 
				   |		КОГДА
				   |			ПланыЛечения.ЗубВКарте = ЗНАЧЕНИЕ(Справочник.стомЗубыКарты.ПустаяСсылка)
				   |		ТОГДА
				   |			ПланыЛечения.Конструкция
				   |		ИНАЧЕ
				   |			ПланыЛечения.ЗубВКарте
				   |	КОНЕЦ","") 
				   + "
	               |ИЗ
	               |	ВсеДокументы КАК ВсеДокументы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыЛечения КАК ПланыЛечения
	               |		ПО ВсеДокументы.Регистратор = ПланыЛечения.ДокументРегистратор
				   |ГДЕ
				   |	ПланыЛечения.ВидЭлемента В (ЗНАЧЕНИЕ(Перечисление.ВидыНазначений.Обследование), ЗНАЧЕНИЕ(Перечисление.ВидыНазначений.Процедура), ЗНАЧЕНИЕ(Перечисление.ВидыНазначений.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеДиагнозыРаботыПланы.ДатаУстановкиДиагноза КАК ДатаУстановкиДиагноза,
	               |	ВсеДиагнозыРаботыПланы.ВрачУстановилДиагноз КАК ВрачУстановилДиагноз,
	               |	ВЫРАЗИТЬ(ВсеДиагнозыРаботыПланы.ДиагнозЗаключительный  КАК СТРОКА(1000)) КАК ДиагнозЗаключительный,
	               |	ВсеДиагнозыРаботыПланы.ДиагнозУстановленВпервые КАК ДиагнозУстановленВпервые,
	               |	ВсеДиагнозыРаботыПланы.Тип КАК Тип,
	               |	ВсеДиагнозыРаботыПланы.Порядок КАК Порядок" 
				   + ?(ДоступнаСтоматология,",
	               |	ВсеДиагнозыРаботыПланы.ЗубВКарте КАК ЗубВКарте","") 
				   + "
	               |ИЗ
	               |	ВсеДиагнозыРаботыПланы КАК ВсеДиагнозыРаботыПланы
	               |ГДЕ
	               |	ВсеДиагнозыРаботыПланы.Тип В (""Диагноз"", ""Работа"", ""План"")
	               |
				   |СГРУППИРОВАТЬ ПО
	               |	ВсеДиагнозыРаботыПланы.ДатаУстановкиДиагноза,
	               |	ВсеДиагнозыРаботыПланы.ВрачУстановилДиагноз,
	               |	ВЫРАЗИТЬ(ВсеДиагнозыРаботыПланы.ДиагнозЗаключительный  КАК СТРОКА(1000)),
	               |	ВсеДиагнозыРаботыПланы.ДиагнозУстановленВпервые,
	               |	ВсеДиагнозыРаботыПланы.Тип,
	               |	ВсеДиагнозыРаботыПланы.Порядок" 
				   + ?(ДоступнаСтоматология,",
	               |	ВсеДиагнозыРаботыПланы.ЗубВКарте","") 
				   + "
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаУстановкиДиагноза,
	               |	Порядок,
	               |	ВрачУстановилДиагноз";
	
	Запрос.Текст = ТекстЗапроса;
	
	Если ДатаОкончания = Дата(1,1,1) Тогда
		ДатаОкончанияПараметр = Неопределено;
	ИначеЕсли ТипЗнч(ДатаОкончания) = Тип("Дата") Тогда
		ДатаОкончанияПараметр = КонецДня(ДатаОкончания);
	КонецЕсли;
	
	Если ДатаНачала = Дата(1,1,1) Тогда
		ДатаНачалаПараметр = Неопределено;
	ИначеЕсли ТипЗнч(ДатаНачала) = Тип("Дата") Тогда
		ДатаНачалаПараметр = НачалоДня(ДатаНачала);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Медкарта", Медкарта);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаПараметр);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияПараметр);
	Запрос.УстановитьПараметр("Окончательный", Перечисления.КлассификацииДиагнозов.Окончательный);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл 
		Если ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.ДиагнозЗаключительный) Тогда
			Структура = Новый Структура;
			Структура.Вставить("ДатаУстановкиДиагноза", Формат(ВыборкаРезультатаЗапроса.ДатаУстановкиДиагноза, "ДФ=дд.ММ.гг"));
			Структура.Вставить("ВрачУстановилДиагноз", ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаРезультатаЗапроса.ВрачУстановилДиагноз));
			ДиагнозЗаключительный = ВыборкаРезультатаЗапроса.ДиагнозЗаключительный;
			Если ДоступнаСтоматология Тогда
				Если ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.ЗубВКарте) Тогда
					ДиагнозЗаключительный = ДиагнозЗаключительный + " [" + ВыборкаРезультатаЗапроса.ЗубВКарте + "]";
				КонецЕсли;
			КонецЕсли;
			Структура.Вставить("ДиагнозЗаключительный", ДиагнозЗаключительный);
			Структура.Вставить("ДиагнозУстановленВпервые", Формат(ВыборкаРезультатаЗапроса.ДиагнозУстановленВпервые,"БЛ=-; БИ=+"));
			Структура.Вставить("Тип", ВыборкаРезультатаЗапроса.Тип);
			Массив.Добавить(Структура);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Процедура ВывестиСтрокиДиагноза043У(ТабДокСтраница, Макет, Диагнозы, ИндДиагноза, СтрокиПодвалДневника)
	
	КоличествоДиагнозов = Диагнозы.Количество()-1;
	
	КоличествоЭлементовПодвала = СтрокиПодвалДневника.Количество();
	
	ВремСписок = Новый СписокЗначений;
	ВремСписок.ЗагрузитьЗначения(СтрокиПодвалДневника);
	СтрокиПроверкиВывода = ВремСписок.ВыгрузитьЗначения();
	
	Страница3ДневникСтрока = Макет.ПолучитьОбласть("Страница3ДневникСтрока");
	СохраненнаяСтрока = Макет.ПолучитьОбласть("Страница3ДневникСтрока");
	
	Если ИндДиагноза <= Диагнозы.Количество()-1 Тогда
		ПредСтрокаДата = Диагнозы[ИндДиагноза].ДатаУстановкиДиагноза;
	Иначе
		ПредСтрокаДата = Неопределено;
	КонецЕсли;
	МассивыДанных = Новый Структура("МассивВрачей,МассивДиагнозов,МассивРабот,МассивПланов", Новый Массив, Новый Массив, Новый Массив, Новый Массив);
	
	СтраницаЗаполнена = Ложь;
	
	Пока ИндДиагноза <= КоличествоДиагнозов И Не СтраницаЗаполнена Цикл
		
		Диагноз = Диагнозы[ИндДиагноза];
		
		Если ПредСтрокаДата <> Диагноз.ДатаУстановкиДиагноза Тогда
			
			СтрокиПодвалДневника.Добавить(Страница3ДневникСтрока);
			СохраненнаяСтрока = Макет.ПолучитьОбласть("Страница3ДневникСтрока");
			
			Страница3ДневникСтрока = Макет.ПолучитьОбласть("Страница3ДневникСтрока");
			ПредСтрокаДата = Диагноз.ДатаУстановкиДиагноза;
			МассивыДанных = Новый Структура("МассивВрачей,МассивДиагнозов,МассивРабот,МассивПланов", Новый Массив, Новый Массив, Новый Массив, Новый Массив);
			
		КонецЕсли;
		
		Если Диагноз.Тип = "Диагноз" Тогда
			МассивыДанных.МассивДиагнозов.Добавить(Диагноз.ДиагнозЗаключительный);
		ИначеЕсли Диагноз.Тип = "Работа" Тогда
			МассивыДанных.МассивРабот.Добавить(Диагноз.ДиагнозЗаключительный);
		ИначеЕсли Диагноз.Тип = "План" Тогда
			МассивыДанных.МассивПланов.Добавить(Диагноз.ДиагнозЗаключительный);
		КонецЕсли;
		
		Если МассивыДанных.МассивВрачей.Найти(Диагноз.ВрачУстановилДиагноз) = Неопределено Тогда
			МассивыДанных.МассивВрачей.Добавить(Диагноз.ВрачУстановилДиагноз);
		КонецЕсли;
		
		ТекстДиагнозЗаключительный = ЗаполнитьСтрокуВыводаДневника043у("", МассивыДанных.МассивДиагнозов, "Диагнозы: ");
		ТекстДиагнозЗаключительный = ЗаполнитьСтрокуВыводаДневника043у(ТекстДиагнозЗаключительный, МассивыДанных.МассивРабот, "Выполнено: ");
		ТекстДиагнозЗаключительный = ЗаполнитьСтрокуВыводаДневника043у(ТекстДиагнозЗаключительный, МассивыДанных.МассивПланов, "Назначено: ");
		
		ТекстВрачУстановилДиагноз = ЗаполнитьСтрокуВыводаДневника043у("", МассивыДанных.МассивВрачей);
		
		СтруктураПроверкиВывода = Новый Структура("ДатаУстановкиДиагноза, ДиагнозЗаключительный, ВрачУстановилДиагноз",
													ПредСтрокаДата, ТекстДиагнозЗаключительный, ТекстВрачУстановилДиагноз);
		
		СохраненнаяСтрока.Параметры.Заполнить(Страница3ДневникСтрока.Параметры);
		Страница3ДневникСтрока.Параметры.Заполнить(СтруктураПроверкиВывода);
		
		ВремСписок.ЗагрузитьЗначения(СтрокиПодвалДневника);
		СтрокиПроверкиВывода = ВремСписок.ВыгрузитьЗначения();
		
		СтрокиПроверкиВывода.Добавить(Страница3ДневникСтрока);
		
		Если ТабДокСтраница.ПроверитьВывод(СтрокиПроверкиВывода) Тогда
			Если ИндДиагноза = КоличествоДиагнозов Тогда
				СтрокиПодвалДневника.Добавить(Страница3ДневникСтрока);
				ИндДиагноза = ИндДиагноза + 1;
			Иначе
				ИндДиагноза = ИндДиагноза + 1;
			КонецЕсли;
		Иначе
			СтраницаЗаполнена = Истина;
			Если ЗначениеЗаполнено(СохраненнаяСтрока.Параметры.ДиагнозЗаключительный) Тогда
				СтрокиПодвалДневника.Добавить(СохраненнаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополняем пустыми строками
	ВремСписок = Новый СписокЗначений;
	ВремСписок.ЗагрузитьЗначения(СтрокиПодвалДневника);
	СтрокиПроверкиВывода = ВремСписок.ВыгрузитьЗначения();
	
	Пока ТабДокСтраница.ПроверитьВывод(СтрокиПроверкиВывода) Цикл
		Страница3ДневникСтрока = Макет.ПолучитьОбласть("Страница3ДневникСтрока");
		СтрокиПроверкиВывода.Добавить(Страница3ДневникСтрока);
		Если ТабДокСтраница.ПроверитьВывод(СтрокиПроверкиВывода) Тогда
			СтрокиПодвалДневника.Добавить(Страница3ДневникСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод в табличный документ
	Если СтрокиПодвалДневника.Количество() > 1 Тогда
		Для Сч = КоличествоЭлементовПодвала По СтрокиПодвалДневника.ВГраница() Цикл
			ТабДокСтраница.Вывести(СтрокиПодвалДневника[Сч]);
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоЭлементовПодвала > 0 Тогда
		Для Сч = 0 По КоличествоЭлементовПодвала-1 Цикл
			ТабДокСтраница.Вывести(СтрокиПодвалДневника[КоличествоЭлементовПодвала - 1 - Сч]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСтрокуВыводаДневника043у(Текст, Массив, Описание = Неопределено)
	
	Если Массив.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(Текст)Тогда
			Текст = Текст + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Описание) Тогда
			Текст = Текст + Описание;
		КонецЕсли;
		
		ТекстМассива = "";
		Для Каждого Элемент Из Массив Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстМассива, Элемент,", ", Истина);
		КонецЦикла;
		Текст = Текст + ТекстМассива;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

Функция КодЛьготыКлиента(Клиент)
	
	Если Метаданные.РегистрыСведений.Найти("ЛьготыКлиентов") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЛьготы = "";
	
	Льготы = РегистрыСведений["ЛьготыКлиентов"].СоздатьНаборЗаписей();
	Льготы.Отбор.Клиент.Установить(Клиент);
	Льготы.Прочитать();
	
	Для Каждого ЗаписьЛьготы Из Льготы Цикл
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстЛьготы, Строка(ЗаписьЛьготы.Льгота.Код), ", ", Истина);
	КонецЦикла;
	
	Возврат ТекстЛьготы;
	
КонецФункции

Процедура ДополнитьВручнуюЗаполненнымиПараметрами(МедКарта, ЗначенияПараметровМедкарты, ЗначенияВычисляемыхПараметровМедкарты) Экспорт
	
	Для Каждого СтрокаПараметра Из МедКарта.ЗаполняемыеПараметры Цикл
		Если ЗначениеЗаполнено(СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра) Тогда
			Если ЗначенияПараметровМедкарты.Свойство(СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра) Тогда
				ЗначенияПараметровМедкарты.Вставить(СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра, СтрокаПараметра.Значение);
			Иначе
				ЗначенияВычисляемыхПараметровМедкарты.Вставить(СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра, СтрокаПараметра.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область СтандартноеОписаниеДиагнозовДокумента

Функция СтандатноеОписаниеДиагнозовСВидамиНозологий(ДокументОбъект, ДляHTMLВерсии = Ложь, ДопОписаниеЗаболевания = "") Экспорт
	
	Результат = Новый Структура("ОписаниеДиагнозов, ДиагнозыПоКлассификациям, ДополнительныеСведения", "", Новый Соответствие, "");
	
	Диагнозы = ДокументОбъект.Диагнозы.Выгрузить();
	Если Диагнозы.Количество() = 0
		И ЗначениеЗаполнено(ДокументОбъект.ПервичныйПрием)
		И ДокументОбъект.ПервичныйПрием <> ДокументОбъект.Ссылка
	Тогда
		Диагнозы = ДокументыПриемаСервер.ПолучитьАктуальныеДиагнозыНаМоментДокумента(ДокументОбъект, Истина);
	КонецЕсли;
	
	Если Диагнозы <> Неопределено Тогда
		Если Диагнозы.Колонки.Найти("Классификация3") <> Неопределено Тогда
			Диагнозы.Колонки.Классификация3.Имя = "ВидНозологии";
		КонецЕсли;
		
		пнВидыНозологий = Перечисления.КлассификацииДиагнозов;
		
		ФорматыНозологий = Новый Массив;
		ФорматыНозологий.Добавить(ФорматВидаНозологииВОписанииДиагнозаМД(пнВидыНозологий.ОсновноеЗаболевание,			 "Основное заболевание", 1));
		ФорматыНозологий.Добавить(ФорматВидаНозологииВОписанииДиагнозаМД(пнВидыНозологий.ОсложнениеОсновногоЗаболевания, "Осложнения основного заболевания"));
		ФорматыНозологий.Добавить(ФорматВидаНозологииВОписанииДиагнозаМД(пнВидыНозологий.ВнешняяПричина,				 "Внешняя причина при травмах, отравлениях"));
		ФорматыНозологий.Добавить(ФорматВидаНозологииВОписанииДиагнозаМД(пнВидыНозологий.СопутствующееЗаболевание,		 "Сопутствующие заболевания"));
		
		Результат.ОписаниеДиагнозов = ТекстОписанияНозологийДляМД(Диагнозы, ФорматыНозологий, Результат.ДиагнозыПоКлассификациям, , ДляHTMLВерсии);
		
		ФорматыНозологий.Очистить();
		ФорматыНозологий.Добавить(ФорматВидаНозологииВОписанииДиагнозаМД(пнВидыНозологий.КонкурирующееЗаболевание,		 "Конкурентные заболевания"));
		ФорматыНозологий.Добавить(ФорматВидаНозологииВОписанииДиагнозаМД(пнВидыНозологий.ФоновоеЗаболевание,			 "Фоновые заболевания"));
		ФорматыНозологий.Добавить(ФорматВидаНозологииВОписанииДиагнозаМД(пнВидыНозологий.ОсложнениеСопутствующегоЗаболевания, "Осложнения сопутствующих"));
		
		ДополнительныеДиагнозы = ТекстОписанияНозологийДляМД(Диагнозы, ФорматыНозологий, Результат.ДиагнозыПоКлассификациям, Ложь, ДляHTMLВерсии);
		Если Не ПустаяСтрока(ДополнительныеДиагнозы) Или Не ПустаяСтрока(ДопОписаниеЗаболевания) Тогда
			
			ДопСведения = ДопОписаниеЗаболевания;
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ДопСведения, ДополнительныеДиагнозы,
															?(Не ПустаяСтрока(ДопОписаниеЗаболевания) И Прав(ДопОписаниеЗаболевания,1)<>".",".","") + " "); // Нужна ли точка как разделитель частей описания.
			
			
			Результат.ОписаниеДиагнозов = Результат.ОписаниеДиагнозов + Символы.ПС
					  + "Дополнительные сведения о заболевании: " + ДопСведения;
			Результат.ДополнительныеСведения = ДопСведения;
		КонецЕсли;
		
		Если ДляHTMLВерсии Тогда
			Результат.ОписаниеДиагнозов = СтрЗаменить(Результат.ОписаниеДиагнозов, Символы.ПС, "<br>");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматВидаНозологииВОписанииДиагнозаМД(ВидНозологии, Представление, Количество = 10)
	
	Возврат Новый Структура("ВидНозологии, Представление, Количество", ВидНозологии, Представление, Количество);
	
КонецФункции

Функция ТекстОписанияНозологийДляМД(Диагнозы, ФорматыНозологий, ДиагнозыПоКлассификациям, ВыводитьЗаголовкиВидов = Истина, ДляHTMLВерсии = Ложь)
	
	ТекстОписанияНозологий = "";
	
	ШаблонТекстаДиагноза = "%1. Код_по_МКБ_[%2]. %3"; // Вид нозологии: Дзагноз. Код по МКБ: Код. Детали.
	ШаблонТекстаДиагноза = СтрЗаменить(ШаблонТекстаДиагноза,"_",Символы.НПП);
	
	Если ДляHTMLВерсии Тогда
		ШаблонТекстаВидаНозологии = "<u>%1</u>: %2";
	Иначе
		ШаблонТекстаВидаНозологии = "%1: %2";
	КонецЕсли;
	
	Отбор = Новый Структура("ВидНозологии");
	Для Каждого ВидФормат Из ФорматыНозологий Цикл
		
		Отбор.ВидНозологии = ВидФормат.ВидНозологии;
		СтрокиДиагнозов = Диагнозы.НайтиСтроки(Отбор);
		ТекстВидаНозологии = "";
		мТекстыДиагнозовПоКлассификации = Новый Массив;
		мТекстыКодовДиагнозовПоКлассификации = Новый Массив;
		
		СчЛимит = 1;
		МассивДиагнозов = Новый Массив;
		Для Каждого СтрокаДиагноза Из СтрокиДиагнозов Цикл
			
			Если СчЛимит > ВидФормат.Количество Тогда
				Прервать;
			КонецЕсли;
			
			МассивДиагнозов.Добавить(СтрокаДиагноза.Диагноз);
			
			НаименованиеДиагноза = ?(ПустаяСтрока(СтрокаДиагноза.Диагноз.НаименованиеПолное), СтрокаДиагноза.Диагноз.Наименование, СтрокаДиагноза.Диагноз.НаименованиеПолное);
			ТекстДиагноза = СтрШаблон(ШаблонТекстаДиагноза, НаименованиеДиагноза, СтрокаДиагноза.Диагноз.КодДиагноза, СтрокаДиагноза.Детализация);
			
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстВидаНозологии, ТекстДиагноза, Символы.ПС);
			
			мТекстыДиагнозовПоКлассификации.Добавить(НаименованиеДиагноза);
			мТекстыКодовДиагнозовПоКлассификации.Добавить(СтрокаДиагноза.Диагноз.КодДиагноза);
			
			СчЛимит = СчЛимит + 1;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстВидаНозологии)
			И ВыводитьЗаголовкиВидов
		Тогда
			ТекстВидаНозологии = СтрШаблон(ШаблонТекстаВидаНозологии, ВидФормат.Представление, ТекстВидаНозологии);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОписанияНозологий, ТекстВидаНозологии, Символы.ПС, Истина);
		
		Если МассивДиагнозов.Количество() > 0 Тогда
			ТекстДиагнозов = СтрСоединить(мТекстыДиагнозовПоКлассификации, Символы.ПС);
			ТекстКодов = СтрСоединить(мТекстыКодовДиагнозовПоКлассификации, ", ");
			СтруктураДиагнозовПоКлассификации = Новый Структура("МассивДиагнозов, ТекстДиагнозов, ТекстКодов", МассивДиагнозов, ТекстДиагнозов, ТекстКодов);
			ДиагнозыПоКлассификациям.Вставить(ВидФормат.ВидНозологии, СтруктураДиагнозовПоКлассификации);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОписанияНозологий;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЭМД_Подписи

Функция СформироватьЭМДМедицинскогоДокумента(МедицинскийДокумент, ТекстОшибки, СохранитьЭМД = Истина) Экспорт
	
	ДанныеЭМД = МедицинскаяДеятельностьПереопределяемый.СформироватьЭМДМедицинскогоДокумента(МедицинскийДокумент, ТекстОшибки, СохранитьЭМД);
	
	Если ДанныеЭМД = Неопределено И Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
		
		Если ИмяТипаДокумента = "Документ.Прием" Тогда
			ДанныеЭМД = СформироватьЭМДПриема(МедицинскийДокумент, СохранитьЭМД);
		ИначеЕсли ИмяТипаДокумента = "Справочник.МедицинскиеКарты" Тогда
			ДанныеЭМД = СформироватьЭМДМедкарты(МедицинскийДокумент, ТекстОшибки, СохранитьЭМД);
		ИначеЕсли ИмяТипаДокумента = "Документ.СписокНаПрохождениеМедосмотра" Тогда
			ДанныеЭМД = СформироватьЭМДПоТабДоку(МедицинскийДокумент, "ЗаключительныйАкт", СохранитьЭМД);
		ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
			ДанныеЭМД = СформироватьЭМДПрохожденияМО(МедицинскийДокумент, ТекстОшибки, СохранитьЭМД);
		ИначеЕсли ИмяТипаДокумента = "Документ.МедицинскийОтчет" Тогда
			ДанныеЭМД = СформироватьЭМДМедицинскогоОтчета(МедицинскийДокумент, СохранитьЭМД);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФайловЭМД = Неопределено;
	
	Если ТипЗнч(ДанныеЭМД) = Тип("Соответствие") Тогда
		ДанныеФайловЭМД = ДанныеЭМД;
	ИначеЕсли ДанныеЭМД <> Неопределено Тогда
		ДанныеФайловЭМД = Новый Соответствие;
		ДанныеФайловЭМД.Вставить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор(), ДанныеЭМД);
	КонецЕсли;
	
	Возврат ДанныеФайловЭМД;
	
КонецФункции

Функция СформироватьЭМДМедкарты(Медкарта, ТекстОшибки, СохранитьЭМД = Истина) Экспорт
	
	ТабДок = МедицинскаяДеятельность.ПолучитьТекстТитульного(Медкарта,, ТекстОшибки,,, Истина);
	ОбщегоНазначенияБИТКлиентСервер.УдалитьПримечанияИРасшифровкиИзТабличногоДокументаПередПодписанием(ТабДок);
	
	Если ТабДок <> Неопределено Тогда
		
		Области = Новый Массив;
		Для Строка = 1 По ТабДок.ВысотаТаблицы Цикл
			Для Колонка = 1 По ТабДок.ШиринаТаблицы Цикл
				ТекОбласть = ТабДок.Область(Строка, Колонка);
				
				Если Области.Найти(ТекОбласть.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Области.Добавить(ТекОбласть.Имя);
				
				Если ЗначениеЗаполнено(ТекОбласть.Расшифровка)
					И Не (ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура")
						И ТекОбласть.Расшифровка.Свойство("ПараметрРасшифровки"))
				Тогда
					ТекОбласть.Расшифровка = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПотокФайла = Новый ПотокВПамяти();
		ТабДок.Записать(ПотокФайла, ТипФайлаТабличногоДокумента.MXL);
		
		ДД = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();
		
		Если СохранитьЭМД Тогда
			бит_РаботаСФайлами.ДобавитьФайлЭМД(Медкарта, ДД, "mxl");
		КонецЕсли;
		
		Возврат Новый Структура("ДД, Расширение", ДД, "mxl");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьЭМДПоТабДоку(МедицинскийДокумент, ИмяМакета, СохранитьЭМД = Истина, ПриказМО = Неопределено)
	
	Поток = ЭЦП_УМЦ_Сервер.СформировтьPDFИзТабДока(МедицинскийДокумент, ИмяМакета,, СохранитьЭМД,, Истина);
	
	ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Если СохранитьЭМД Тогда
		УИД_ЭМД = ?(ПриказМО <> Неопределено, ПриказМО.УникальныйИдентификатор(), Неопределено);
		бит_РаботаСФайлами.ДобавитьФайлЭМД(МедицинскийДокумент, ДД, "pdf", УИД_ЭМД);
	КонецЕсли;
	
	Возврат Новый Структура("ДД, Расширение", ДД, "pdf");
	
КонецФункции

Функция СформироватьЭМДСправки(МедицинскийДокумент, СохранитьЭМД, ВредныйФакторСправки = Неопределено)
	
	ТабДок = Документы.ПрохождениеМедосмотра.ТабличныйДокументСправки(МедицинскийДокумент,,,, Истина, ВредныйФакторСправки);
	Поток = ЭЦП_УМЦ_Сервер.СформировтьPDFИзТабДока(МедицинскийДокумент,,, СохранитьЭМД,, Истина, ТабДок);
	
	ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Если СохранитьЭМД Тогда
		УИД_ЭМД = ?(ВредныйФакторСправки <> Неопределено, ВредныйФакторСправки.УникальныйИдентификатор(), Неопределено);
		бит_РаботаСФайлами.ДобавитьФайлЭМД(МедицинскийДокумент, ДД, "pdf", УИД_ЭМД);
	КонецЕсли;
	
	Возврат Новый Структура("ДД, Расширение", ДД, "pdf");;
	
КонецФункции

Функция СформироватьЭМДМедицинскогоОтчета(МедицинскийДокумент, СохранитьЭМД)
	
	мТабДоки = Документы.МедицинскийОтчет.ПолучитьТабличныеДокументыОтчета(МедицинскийДокумент);
	
	Если мТабДоки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПотокZIP = Новый ПотокВПамяти();
	Архив = Новый ЗаписьZipФайла(ПотокZIP,,,, УровеньСжатияZIP.Максимальный);
	
	ИмяВременногоКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + Новый УникальныйИдентификатор);
	
	ФайлКаталог = Новый Файл(ИмяВременногоКаталога);
	Если ФайлКаталог.Существует() Тогда
		// На всякий случай
		УдалитьФайлы(ИмяВременногоКаталога);
	КонецЕсли;
	СоздатьКаталог(ИмяВременногоКаталога);
	
	Для Каждого СтруктураТабДока Из мТабДоки Цикл
		
		КаталогТабдока = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + Новый УникальныйИдентификатор);
		
		СоздатьКаталог(КаталогТабдока);
		
		ИмяMXL = СтрШаблон("%1%2.mxl", КаталогТабдока, СтруктураТабДока.ИмяФайла);
		
		СтруктураТабДока.ТабДок.Записать(ИмяMXL, ТипФайлаТабличногоДокумента.MXL);
		Архив.Добавить(ИмяMXL, РежимСохраненияПутейZIP.НеСохранятьПути);
	КонецЦикла;
	
	Архив.Записать();
	ДД = ПотокZIP.ЗакрытьИПолучитьДвоичныеДанные();
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Если СохранитьЭМД Тогда
		бит_РаботаСФайлами.ДобавитьФайлЭМД(МедицинскийДокумент, ДД, "zip");
	КонецЕсли;
	
	Возврат Новый Структура("ДД, Расширение", ДД, "zip");;
	
КонецФункции

Функция СформироватьЭМДПриема(МедицинскийДокумент, СохранитьЭМД)
	
	ДанныеПриема = Новый Соответствие;
	
	ДанныеПриема.Вставить("Прием",										МедицинскийДокумент);
	ДанныеПриема.Вставить("Дата",										НачалоДня(МедицинскийДокумент.Дата));
	ДанныеПриема.Вставить("Клиент",										МедицинскийДокумент.Клиент);
	ДанныеПриема.Вставить("Врач",										МедицинскийДокумент.Врач);
	ДанныеПриема.Вставить("Медкарта",									МедицинскийДокумент.МедицинскаяКарта);
	ДанныеПриема.Вставить("Клиника",									МедицинскийДокумент.Филиал);
	ДанныеПриема.Вставить("ПометкаУдаления",							МедицинскийДокумент.ПометкаУдаления);
	ДанныеПриема.Вставить("НуждаетсяВПроведенииДопОбследования",		МедицинскийДокумент.НуждаетсяВПроведенииДопОбследования);
	ДанныеПриема.Вставить("НуждаетсяВОбследованииВЦентреПрофпатологии",	МедицинскийДокумент.НуждаетсяВОбследованииВЦентреПрофпатологии);
	ДанныеПриема.Вставить("НуждаетсяВАмбулаторномОбследованииИЛечении",	МедицинскийДокумент.НуждаетсяВАмбулаторномОбследованииИЛечении);
	ДанныеПриема.Вставить("НуждаетсяВСтационарномОбследованииИЛечении",	МедицинскийДокумент.НуждаетсяВСтационарномОбследованииИЛечении);
	ДанныеПриема.Вставить("НуждаетсяВСанаторноКурортномЛечении",		МедицинскийДокумент.НуждаетсяВСанаторноКурортномЛечении);
	ДанныеПриема.Вставить("НуждаетсяВДиспансерномНаблюдении",			МедицинскийДокумент.НуждаетсяВДиспансерномНаблюдении);
	
	// Диагнозы
	ДанныеПриема.Вставить("Диагнозы", Новый Массив);
	
	ТаблицаДиагнозов = МедицинскийДокумент.Диагнозы.Выгрузить();
	ОтраслевыеДополнения.СвернутьТаблицуДиагнозов(ТаблицаДиагнозов);
	ТаблицаДиагнозов.Сортировать("Диагноз");
	
	Для Каждого СтрокаДиагноз Из ТаблицаДиагнозов Цикл
		
		ДанныеДиагноза = Новый Соответствие;
		ДанныеДиагноза.Вставить("Диагноз",			СтрокаДиагноз.Диагноз);
		ДанныеДиагноза.Вставить("Детализация",		СтрокаДиагноз.Детализация);
		ДанныеДиагноза.Вставить("ВыявленВпервые",	СтрокаДиагноз.ВыявленВпервые);
		ДанныеДиагноза.Вставить("Классификация1",	СтрокаДиагноз.Классификация1);
		ДанныеДиагноза.Вставить("Классификация2",	СтрокаДиагноз.Классификация2);
		ДанныеДиагноза.Вставить("Классификация3",	СтрокаДиагноз.Классификация3);
		ДанныеДиагноза.Вставить("Сопутствующий",	СтрокаДиагноз.Сопутствующий);
		ДанныеДиагноза.Вставить("Травма",			СтрокаДиагноз.Травма);
		ДанныеДиагноза.Вставить("Исход",			СтрокаДиагноз.Исход);
		
		Если ТаблицаДиагнозов.Колонки.Найти("Профессиональное") <> Неопределено Тогда
			ДанныеДиагноза.Вставить("Профессиональное", СтрокаДиагноз.Профессиональное);
		КонецЕсли;
		
		ДанныеПриема.Получить("Диагнозы").Добавить(ДанныеДиагноза);
	КонецЦикла;
	
	// Вредные факторы
	Если Метаданные.Документы.Прием.ТабличныеЧасти.Найти("ВредныеФакторыПротивопоказаний") <> Неопределено Тогда
		
		ДанныеПриема.Вставить("ВредныеФакторы", Новый Массив);
		
		ТаблицаФакторов = МедицинскийДокумент.ВредныеФакторыПротивопоказаний.Выгрузить(, "ВредныйФактор");
		ТаблицаФакторов.Свернуть("ВредныйФактор");
		ТаблицаФакторов.Сортировать("ВредныйФактор");
		Для Каждого СтрокаФактор Из МедицинскийДокумент.ВредныеФакторыПротивопоказаний Цикл
			ДанныеПриема.Получить("ВредныеФакторы").Добавить(СтрокаФактор.ВредныйФактор);
		КонецЦикла;
	КонецЕсли;
	
	// Значения параметров html
	ДанныеПриема.Вставить("ШаблоныПриема", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	ШаблоныПриема.ДатаПриема КАК ДатаПриема,
		|	ШаблоныПриема.Ссылка КАК Ссылка,
		|	ШаблоныПриема.УИД КАК УИД,
		|	ШаблоныПриема.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(РолиШаблонов.КоличествоРолей, 0) КАК КоличествоРолей
		|ПОМЕСТИТЬ ШаблоныПриема
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|		Прием.Дата КАК ДатаПриема,
		|		Прием.Ссылка КАК Ссылка,
		|		ПриемШаблоныПриема.УИД КАК УИД,
		|		ПриемШаблоныПриема.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		Документ.Прием КАК Прием
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|			ПО (Прием.Ссылка = &Прием)
		|				И Прием.Ссылка = ПриемШаблоныПриема.Ссылка) КАК ШаблоныПриема
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РолиПодписей.Ссылка КАК Ссылка,
		|			КОЛИЧЕСТВО(РолиПодписей.Роль) КАК КоличествоРолей
		|		ИЗ
		|			Справочник.ШаблоныHTML.РолиПодписей КАК РолиПодписей
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РолиПодписей.Ссылка) КАК РолиШаблонов
		|		ПО (РолиШаблонов.Ссылка = ШаблоныПриема.ШаблонПриема)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|	ШаблоныПриемов.УИД КАК УИД,
		|	ШаблоныПриемов.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВерсииШаблонов.ВерсияШаблона, ШаблоныПриемов.ШаблонПриема) КАК ВерсияШаблона,
		|	ЕСТЬNULL(ВерсииШаблонов.КоличествоРолей, ШаблоныПриемов.КоличествоРолей) КАК КоличествоРолей
		|ПОМЕСТИТЬ ВерсииШаблоновПриема
		|ИЗ
		|	ШаблоныПриема КАК ШаблоныПриемов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыВерсий.ШаблонПриема КАК ШаблонПриема,
		|			ДатыВерсий.ДатаПриема КАК ДатаПриема,
		|			ДатыВерсий.ДатаВерсии КАК ДатаВерсии,
		|			ВерсииШаблоновHTML.Ссылка КАК ВерсияШаблона,
		|			ЕСТЬNULL(РолиВерсий.КоличествоРолей, 0) КАК КоличествоРолей
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема КАК ДатаПриема,
		|				МАКСИМУМ(ВерсииШаблоновHTML.Дата) КАК ДатаВерсии
		|			ИЗ
		|				ШаблоныПриема КАК ШаблоныПриемов
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|					ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|						И (ВерсииШаблоновHTML.Дата >= ШаблоныПриемов.ДатаПриема)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ШаблоныПриемов.ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема) КАК ДатыВерсий
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|				ПО ДатыВерсий.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|					И (ВерсииШаблоновHTML.Дата = ДатыВерсий.ДатаВерсии)
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					РолиПодписей.Ссылка КАК Ссылка,
		|					КОЛИЧЕСТВО(РолиПодписей.Роль) КАК КоличествоРолей
		|				ИЗ
		|					Справочник.ВерсииШаблоновHTML.РолиПодписей КАК РолиПодписей
		|				
		|				СГРУППИРОВАТЬ ПО
		|					РолиПодписей.Ссылка) КАК РолиВерсий
		|				ПО (РолиВерсий.Ссылка = ВерсииШаблоновHTML.Ссылка)) КАК ВерсииШаблонов
		|		ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблонов.ШаблонПриема
		|			И ШаблоныПриемов.ДатаПриема = ВерсииШаблонов.ДатаПриема
		|ГДЕ
		|	(&УчитыватьШаблоныБезРолей
		|			ИЛИ ЕСТЬNULL(ВерсииШаблонов.КоличествоРолей, ШаблоныПриемов.КоличествоРолей) > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПараметровHTML.Параметр КАК Параметр,
		|	ЗначенияПараметровHTML.Значение КАК Значение,
		|	ВерсииШаблонов.УИД КАК УИД
		|ИЗ
		|	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииШаблоновПриема КАК ВерсииШаблонов
		|		ПО (ЗначенияПараметровHTML.Документ = &Прием)
		|			И (ВерсииШаблонов.НомерСтроки - 1 = ЗначенияПараметровHTML.ИндексШаблона)
		|			И (ВерсииШаблонов.ВерсияШаблона.ВидДокумента = ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)
		|				ИЛИ &ИспользуетсяРЭМД = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УИД,
		|	ЗначенияПараметровHTML.Параметр.Наименование
		|ИТОГИ ПО
		|	УИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТаблицШаблоновПриема.Параметр КАК Параметр,
		|	ДанныеТаблицШаблоновПриема.Значение КАК Значение,
		|	ВерсииШаблонов.УИД КАК УИД
		|ИЗ
		|	РегистрСведений.ДанныеТаблицШаблоновПриема КАК ДанныеТаблицШаблоновПриема
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииШаблоновПриема КАК ВерсииШаблонов
		|		ПО (ДанныеТаблицШаблоновПриема.Документ = &Прием)
		|			И (ВерсииШаблонов.НомерСтроки - 1 = ДанныеТаблицШаблоновПриема.ИндексШаблона)
		|			И (ВерсииШаблонов.ВерсияШаблона.ВидДокумента = ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)
		|				ИЛИ &ИспользуетсяРЭМД = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УИД,
		|	ДанныеТаблицШаблоновПриема.НомерСтрокиТаблицы,
		|	ДанныеТаблицШаблоновПриема.Параметр.Наименование
		|ИТОГИ ПО
		|	УИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииШаблоновПриема.УИД КАК УИД
		|ИЗ
		|	ВерсииШаблоновПриема КАК ВерсииШаблоновПриема
		|
		|УПОРЯДОЧИТЬ ПО
		|	УИД";
	
	Запрос.УстановитьПараметр("Прием", МедицинскийДокумент);
	Запрос.УстановитьПараметр("ИспользуетсяРЭМД", ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД());
	Запрос.УстановитьПараметр("УчитыватьШаблоныБезРолей", Ложь);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаШаблоновПараметров = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗначенияПараметровШаблонов = Новый Соответствие;
	
	Пока ВыборкаШаблоновПараметров.Следующий() Цикл
		
		мПараметрыШаблона = Новый Массив;
		ЗначенияПараметровШаблонов.Вставить(ВыборкаШаблоновПараметров.УИД, мПараметрыШаблона);
		
		ВыборкаПараметров = ВыборкаШаблоновПараметров.Выбрать();
		Пока ВыборкаПараметров.Следующий() Цикл
			
			ЗначениеПараметра = ВыборкаПараметров.Значение;
			Если ТипЗнч(ЗначениеПараметра) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
				ЗначениеПараметра = ЗначениеПараметра.Значение;
			КонецЕсли;
			
			ДанныеПараметра = Новый Соответствие;
			ДанныеПараметра.Вставить("ПараметрОсмотра",		ВыборкаПараметров.Параметр);
			ДанныеПараметра.Вставить("ЗначениеПараметра",	ЗначениеПараметра);
			
			мПараметрыШаблона.Добавить(ДанныеПараметра);
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаШаблоновПараметровТаблиц = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗначенияПараметровТаблицШаблонов = Новый Соответствие;
	
	Пока ВыборкаШаблоновПараметровТаблиц.Следующий() Цикл
		
		мПараметрыТаблиц = Новый Массив;
		ЗначенияПараметровТаблицШаблонов.Вставить(ВыборкаШаблоновПараметровТаблиц.УИД, мПараметрыТаблиц);
		
		ВыборкаПараметровТаблиц = ВыборкаШаблоновПараметровТаблиц.Выбрать();
		Пока ВыборкаПараметровТаблиц.Следующий() Цикл
			
			ЗначениеПараметра = ВыборкаПараметровТаблиц.Значение;
			Если ТипЗнч(ЗначениеПараметра) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
				ЗначениеПараметра = ЗначениеПараметра.Значение;
			КонецЕсли;
			
			ДанныеПараметра = Новый Соответствие;
			ДанныеПараметра.Вставить("ПараметрОсмотра",		ВыборкаПараметровТаблиц.Параметр);
			ДанныеПараметра.Вставить("ЗначениеПараметра",	ЗначениеПараметра);
			мПараметрыТаблиц.Добавить(ДанныеПараметра);
		КонецЦикла;
	КонецЦикла;
	
	СписокРолей = СписокРолейПоШаблонамПриёма(МедицинскийДокумент);
	
	ИдентификаторыОтдельныхЭМД = Новый Массив;
	Для Каждого ДанныеРоли Из СписокРолей Цикл
		Если ЗначениеЗаполнено(ДанныеРоли.ПараметрыРоли.УИД_ЭМД)
			И ИдентификаторыОтдельныхЭМД.Найти(ДанныеРоли.ПараметрыРоли.УИД_ЭМД) = Неопределено
		Тогда
			ИдентификаторыОтдельныхЭМД.Добавить(ДанныеРоли.ПараметрыРоли.УИД_ЭМД);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаШаблонов = Результат[4].Выбрать();
	
	ДанныеПриемаПоЭМД = Новый Соответствие;
	
	Пока ВыборкаШаблонов.Следующий() Цикл
		
		УИДШаблона = ВыборкаШаблонов.УИД;
		
		Если ИдентификаторыОтдельныхЭМД.Найти(УИДШаблона) = Неопределено Тогда
			УИДЭМД = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		Иначе
			УИДЭМД = УИДШаблона;
		КонецЕсли;
		
		ДанныеПриемаЭМД = ДанныеПриемаПоЭМД.Получить(УИДЭМД);
		Если ДанныеПриемаЭМД = Неопределено Тогда
			ДанныеПриемаЭМД = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПриема);
			ДанныеПриемаПоЭМД.Вставить(УИДЭМД, ДанныеПриемаЭМД);
		КонецЕсли;
		
		ЗначенияПараметровШаблона = ЗначенияПараметровШаблонов.Получить(УИДШаблона);
		Если ЗначенияПараметровШаблона = Неопределено Тогда
			ЗначенияПараметровШаблона = Новый Массив;
		КонецЕсли;
		
		ЗначенияПараметровТаблицШаблона = ЗначенияПараметровТаблицШаблонов.Получить(УИДШаблона);
		Если ЗначенияПараметровТаблицШаблона = Неопределено Тогда
			ЗначенияПараметровТаблицШаблона = Новый Массив;
		КонецЕсли;
		
		ДанныеШаблона = Новый Структура("ЗначенияПараметровШаблонов, ЗначенияПараметровТаблицШаблонов", ЗначенияПараметровШаблона, ЗначенияПараметровТаблицШаблона);
		ДанныеПриемаЭМД.Получить("ШаблоныПриема").Вставить(Формат(УИДШаблона, "ЧН=0; ЧГ=0"), ДанныеШаблона);
		
	КонецЦикла;
	
	//Для Каждого ДанныеПараметровШаблона Из ЗначенияПараметровШаблонов Цикл
	//	УИДШаблона = ДанныеПараметровШаблона.УИДШаблона;
	//	
	//	Если ИдентификаторыОтдельныхЭМД.Найти(УИДШаблона) = Неопределено Тогда
	//		УИДЭМД = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	//	Иначе
	//		УИДЭМД = УИДШаблона;
	//	КонецЕсли;
	//	
	//	ДанныеПриемаЭМД = ДанныеПриемаПоЭМД.Получить(УИДЭМД);
	//	
	//	Если ДанныеПриемаЭМД = Неопределено Тогда
	//		ДанныеПриемаЭМД = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПриема);
	//		ДанныеПриемаПоЭМД.Вставить(УИДЭМД, ДанныеПриемаЭМД);
	//	КонецЕсли;
	//	
	//	ДанныеШаблона = Новый Структура("ЗначенияПараметровШаблонов, ЗначенияПараметровТаблицШаблонов", ДанныеПараметровШаблона.ПараметрыШаблона, Новый Массив);
	//	ДанныеПриемаЭМД.Получить("ШаблоныПриема").Вставить(Формат(УИДШаблона, "ЧН=0; ЧГ=0"), ДанныеШаблона);
	//КонецЦикла;
	//
	//Для Каждого ДанныеПараметровТаблиц Из ЗначенияПараметровТаблицШаблонов Цикл
	//	УИДШаблона = ДанныеПараметровТаблиц.УИДШаблона;
	//	
	//	Если ИдентификаторыОтдельныхЭМД.Найти(УИДШаблона) = Неопределено Тогда
	//		УИДЭМД = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	//	Иначе
	//		УИДЭМД = УИДШаблона;
	//	КонецЕсли;
	//	
	//	ДанныеПриемаЭМД = ДанныеПриемаПоЭМД.Получить(УИДЭМД);
	//	
	//	Если ДанныеПриемаЭМД = Неопределено Тогда
	//		ДанныеПриемаЭМД = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПриема);
	//		ДанныеПриемаПоЭМД.Вставить(УИДЭМД, ДанныеПриемаЭМД);
	//	КонецЕсли;
	//	
	//	СтруктураШаблона = ДанныеПриемаЭМД.Получить("ШаблоныПриема").Получить(Формат(УИДШаблона, "ЧН=0; ЧГ=0"));
	//	
	//	Если СтруктураШаблона = Неопределено Тогда
	//		ДанныеШаблона = Новый Структура("ЗначенияПараметровШаблонов, ЗначенияПараметровТаблицШаблонов", Новый Массив, ДанныеПараметровТаблиц.ПараметрыТаблиц);
	//		ДанныеПриемаЭМД.Получить("ШаблоныПриема").Вставить(Формат(УИДШаблона, "ЧН=0; ЧГ=0"), ДанныеШаблона);
	//	Иначе
	//		СтруктураШаблона.ЗначенияПараметровТаблицШаблонов = ДанныеПараметровТаблиц.ПараметрыТаблиц;
	//	КонецЕсли;
	//КонецЦикла;
	
	Для Каждого ИдентификаторЭМД Из ИдентификаторыОтдельныхЭМД Цикл
		Если ДанныеПриемаПоЭМД.Получить(ИдентификаторЭМД) = Неопределено Тогда
			ДанныеПриемаПоЭМД.Вставить(ИдентификаторЭМД, ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПриема));
		КонецЕсли;
	КонецЦикла;
	
	ДДПоЭМД = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ДанныеПриемаПоЭМД Цикл
		
		Поток = Новый ПотокВПамяти();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьПоток(Поток,,, Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, КлючЗначение.Значение, , "ПреобразованиеJSON", ОбщегоНазначенияПереопределяемый);
		ЗаписьJSON.Закрыть();
		
		ДД = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
		Если СохранитьЭМД Тогда
			бит_РаботаСФайлами.ДобавитьФайлЭМД(МедицинскийДокумент, ДД, "json", КлючЗначение.Ключ);
		КонецЕсли;
		
		ДДПоЭМД.Вставить(КлючЗначение.Ключ, Новый Структура("ДД, Расширение", ДД, "json"));
	КонецЦикла;
	
	Возврат ДДПоЭМД;
	
КонецФункции

// Роли для подписания медицинского документа не для РЭМД
//
// Параметры:
//  МедицинскийДокумент		 - ПодписанныйОбъект - Ссылка на подписываемый документ
//  ДополнительныеПараметры	 - Произвольный - Дополнительные параметры
// 
// Возвращаемое значение:
//  Массив - требуемые роли
//
Функция РолиДляПодписанияМедицинскогоДокумента(МедицинскийДокумент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Роли = МедицинскаяДеятельностьПереопределяемый.РолиДляПодписанияМедицинскогоДокумента(МедицинскийДокумент, ДополнительныеПараметры);
	
	Если Роли = Неопределено Тогда
		
		ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
		
		Если ИмяТипаДокумента = "Документ.Прием" Тогда
			Роли = РолиДляПодписанияПриёма(МедицинскийДокумент);
		ИначеЕсли ИмяТипаДокумента = "Справочник.МедицинскиеКарты" Тогда
			Роли = Справочники.ВидыМедицинскихКарт.РолиДляПодписания(МедицинскийДокумент.ВидКарты);
		ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
			Роли = РолиДляПодписанияПрохожденияМедосмотра(МедицинскийДокумент, ДополнительныеПараметры);
		ИначеЕсли ИмяТипаДокумента = "Документ.СписокНаПрохождениеМедосмотра" Тогда
			Роли = Новый Массив;
			Роли.Добавить(Перечисления.РолиПодписей.РольПредседательМедкомиссии()); // Председатель.
			Роли.Добавить(Перечисления.РолиПодписей.МедицинскаяОрганизация);
		ИначеЕсли ИмяТипаДокумента = "Документ.МедицинскийОтчет" Тогда
			Роли = Документы.МедицинскийОтчет.РолиДляПодписания(МедицинскийДокумент.ИсточникОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Если Роли <> Неопределено Тогда
		ДанныеРолей = Новый Массив;
		
		Для Каждого ДанныеРоли Из Роли Цикл
			СтруктураРоли = Новый Структура("Роль, ПараметрыРоли");
			
			Если Не (ТипЗнч(ДанныеРоли) = Тип("Структура")
					И ДанныеРоли.Свойство("ПараметрыРоли"))
			Тогда
				СтруктураРоли.Роль = ДанныеРоли;
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураРоли, ДанныеРоли);
			КонецЕсли;
			
			ДанныеРолей.Добавить(СтруктураРоли);
		КонецЦикла;
		
		Возврат ДанныеРолей;
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

Функция РолиДляПодписанияПриёма(МедицинскийДокумент)
	
	Если ТребуютсяРолиПоШаблонамПриёма(МедицинскийДокумент) Тогда
		Возврат СписокРолейПоШаблонамПриёма(МедицинскийДокумент);
	Иначе
		// Старый формат с фиксированным набором ролей
		Роли = Новый Массив;
		Роли.Добавить(ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(19,	"РолиПриПодписиМедДокументов")); // Автор документа
		Роли.Добавить(ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(1,	"РолиПриПодписиМедДокументов")); // Врач
		Возврат Роли;
	КонецЕсли;
	
КонецФункции

Функция ТребуютсяРолиПоШаблонамПриёма(МедицинскийДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныеПодписи.ДатаПодписи";
	
	Запрос.УстановитьПараметр("Объект", МедицинскийДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДатаПереходаНаРежимРаздельногоПодписанияЭМД = Константы.ДатаПереходаНаРежимРаздельногоПодписанияЭМДПриёмов.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Выборка.ДатаПодписи > ДатаПереходаНаРежимРаздельногоПодписанияЭМД;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СписокРолейПоШаблонамПриёма(МедицинскийДокумент)
	
	ИспользуетсяРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	
	тзРоли = Новый ТаблицаЗначений;
	тзРоли.Колонки.Добавить("Роль");
	тзРоли.Колонки.Добавить("УИД_ЭМД");
	тзРоли.Колонки.Добавить("ПредставлениеЭМД");
	тзРоли.Колонки.Добавить("ДанныеРолей");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	Прием.Дата КАК ДатаПриема,
		|	Прием.Ссылка КАК Ссылка,
		|	ПриемШаблоныПриема.НомерСтроки КАК НомерСтроки,
		|	ПриемШаблоныПриема.УИД КАК УИД
		|ПОМЕСТИТЬ ШаблоныПриема
		|ИЗ
		|	Документ.Прием КАК Прием
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|		ПО (Прием.Ссылка = &Прием)
		|			И Прием.Ссылка = ПриемШаблоныПриема.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВерсииШаблоновПриема.ВерсияШаблона.НеФормироватьОтдельныйЭМД
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ВерсииШаблоновПриема.УИД
		|	КОНЕЦ КАК УИДШаблонаПриемаОтдельногоЭМД,
		|	ВерсииШаблоновПриема.ШаблонПриема КАК ШаблонПриема,
		|	ВерсииШаблоновПриема.НомерСтроки КАК НомерСтроки,
		|	ВерсииШаблоновПриема.ВерсияШаблона КАК ВерсияШаблона
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|		ШаблоныПриемов.НомерСтроки КАК НомерСтроки,
		|		ШаблоныПриемов.УИД КАК УИД,
		|		ЕСТЬNULL(ВерсииШаблонов.ВерсияШаблона, ШаблоныПриемов.ШаблонПриема) КАК ВерсияШаблона
		|	ИЗ
		|		ШаблоныПриема КАК ШаблоныПриемов
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ДатыВерсий.ШаблонПриема КАК ШаблонПриема,
		|				ДатыВерсий.ДатаПриема КАК ДатаПриема,
		|				ДатыВерсий.ДатаВерсии КАК ДатаВерсии,
		|				ВерсииШаблоновHTML.Ссылка КАК ВерсияШаблона
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|					ШаблоныПриемов.ДатаПриема КАК ДатаПриема,
		|					МАКСИМУМ(ВерсииШаблоновHTML.Дата) КАК ДатаВерсии
		|				ИЗ
		|					ШаблоныПриема КАК ШаблоныПриемов
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|						ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|							И (ВерсииШаблоновHTML.Дата >= ШаблоныПриемов.ДатаПриема)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ШаблоныПриемов.ШаблонПриема,
		|					ШаблоныПриемов.ДатаПриема) КАК ДатыВерсий
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|					ПО ДатыВерсий.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|						И (ВерсииШаблоновHTML.Дата = ДатыВерсий.ДатаВерсии)) КАК ВерсииШаблонов
		|			ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблонов.ШаблонПриема
		|				И ШаблоныПриемов.ДатаПриема = ВерсииШаблонов.ДатаПриема) КАК ВерсииШаблоновПриема
		|ГДЕ
		|	(&ИспользуетсяРЭМД = ЛОЖЬ
		|			ИЛИ ВерсииШаблоновПриема.ВерсияШаблона.ВидДокумента = ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка))
		|ИТОГИ ПО
		|	УИДШаблонаПриемаОтдельногоЭМД";
	
	Запрос.УстановитьПараметр("ИспользуетсяРЭМД", ИспользуетсяРЭМД);
	Запрос.УстановитьПараметр("Прием", МедицинскийДокумент);
	
	ВыборкаЭМД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	мРоли = Новый Массив;
	
	Пока ВыборкаЭМД.Следующий() Цикл
		
		ВыборкаШаблоны = ВыборкаЭМД.Выбрать();
		РолиЭМД = Новый ТаблицаЗначений;
		РолиЭМД.Колонки.Добавить("Роль");
		РолиЭМД.Колонки.Добавить("ПараметрыРоли");
		
		Пока ВыборкаШаблоны.Следующий() Цикл
			
			Для Каждого СтрокаРоли Из ВыборкаШаблоны.ВерсияШаблона.РолиПодписей Цикл
				
				УИД_ЭМД = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
				ПредставлениеЭМД = "";
				Если ЗначениеЗаполнено(ВыборкаЭМД.УИДШаблонаПриемаОтдельногоЭМД) Тогда
					УИД_ЭМД = ВыборкаЭМД.УИДШаблонаПриемаОтдельногоЭМД;
					ПредставлениеЭМД = ВыборкаШаблоны.ШаблонПриема.Наименование;
				КонецЕсли;
				
				СтрокиДанныхРолиЭМД = РолиЭМД.НайтиСтроки(Новый Структура("Роль", СтрокаРоли.Роль));
				МинКолПодписейПоШаблону = ВыборкаШаблоны.ВерсияШаблона.РолиПодписей.НайтиСтроки(Новый Структура("Роль, Обязательная", СтрокаРоли.Роль, Истина)).Количество();
				МаксКолПодписейПоШаблону = ВыборкаШаблоны.ВерсияШаблона.РолиПодписей.НайтиСтроки(Новый Структура("Роль", СтрокаРоли.Роль)).Количество();
				Если СтрокиДанныхРолиЭМД.Количество() = 0 Тогда
					РолиШаблона = Новый Массив;
					НоваяСтрока = РолиЭМД.Добавить();
					НоваяСтрока.Роль = СтрокаРоли.Роль;
					СтруктураПараметровРоли = Новый Структура;
					СтруктураПараметровРоли.Вставить("УИД_ЭМД", УИД_ЭМД);
					СтруктураПараметровРоли.Вставить("ПредставлениеЭМД", ПредставлениеЭМД);
					СтруктураПараметровРоли.Вставить("РолиШаблона", РолиШаблона);
					СтруктураПараметровРоли.Вставить("МинКолПодписей", МинКолПодписейПоШаблону);
					СтруктураПараметровРоли.Вставить("МаксКолПодписей", МаксКолПодписейПоШаблону);
					НоваяСтрока.ПараметрыРоли = СтруктураПараметровРоли;
				Иначе
					ПараметрыРоли = СтрокиДанныхРолиЭМД[0].ПараметрыРоли;
					РолиШаблона = ПараметрыРоли.РолиШаблона;
					ПараметрыРоли.МинКолПодписей = Макс(ПараметрыРоли.МинКолПодписей, МинКолПодписейПоШаблону);
					ПараметрыРоли.МаксКолПодписей = Макс(ПараметрыРоли.МаксКолПодписей, МаксКолПодписейПоШаблону);
				КонецЕсли;
				
				СтруктураРоли = Новый Структура("РежимНастройкиДоступности, ПризнакДоступностиРоли, ИдентификаторРоли, Обязательная");
				ЗаполнитьЗначенияСвойств(СтруктураРоли, СтрокаРоли);
				
				ИндексШаблона = Неопределено;
				Если РольЗависитОтШаблона(СтрокаРоли) Тогда
					ИндексШаблона = ВыборкаШаблоны.НомерСтроки - 1;
				КонецЕсли;
				
				СтруктураРоли.Вставить("ИндексШаблона", ИндексШаблона);
				СтруктураРоли.Вставить("Доступна", Ложь);
				
				РолиШаблона.Добавить(СтруктураРоли);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СтрокаРолиЭМД Из РолиЭМД Цикл
			мРоли.Добавить(Новый Структура("Роль, ПараметрыРоли", СтрокаРолиЭМД.Роль, СтрокаРолиЭМД.ПараметрыРоли));
		КонецЦикла;
	КонецЦикла;
	
	Возврат мРоли;
	
КонецФункции

Функция РольЗависитОтШаблона(СтрокаРоли)
	
	Если СтрокаРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ЗначениеПараметра Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДоступныеРолиПодписанияМедицинскогоДокументаДляТекущегоПользователя(МедицинскийДокумент) Экспорт
	
	ДоступныеРоли = Новый Массив;
	
	Для Каждого ДанныеРоли Из РолиДляПодписанияМедицинскогоДокумента(МедицинскийДокумент) Цикл
		СтруктураРоли = Новый Структура("Роль, Доступна, ПараметрыРоли");
		ЗаполнитьЗначенияСвойств(СтруктураРоли, ДанныеРоли);
		СтруктураРоли.Доступна = РольДоступнаТекущемуПользователю(МедицинскийДокумент, ДанныеРоли.Роль, ДанныеРоли.ПараметрыРоли);
		ДоступныеРоли.Добавить(СтруктураРоли);
	КонецЦикла;
	
	Возврат ДоступныеРоли;
	
КонецФункции

Функция РольДоступнаТекущемуПользователю(МедицинскийДокумент, Роль, ПараметрыРоли) Экспорт
	
	РольДоступна = МедицинскаяДеятельностьПереопределяемый.РольДоступнаТекущемуПользователю(МедицинскийДокумент, Роль);
	
	Если РольДоступна = Неопределено Тогда
		
		ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
		
		Если ИмяТипаДокумента = "Документ.Прием" Тогда
			РольДоступна = ОпределитьДоступностьРолиПоПриему(МедицинскийДокумент, Роль, ПараметрыРоли);
		ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
			РольДоступна = ОпределитьДоступностьРолиПоПроходжениюМедосмотра(МедицинскийДокумент, Роль, ПараметрыРоли);
		ИначеЕсли ИмяТипаДокумента = "Документ.СписокНаПрохождениеМедосмотра" Тогда
			Если Роль = Перечисления.РолиПодписей.РольПредседательМедкомиссии() Тогда // Председатель.
				РольДоступна = ЭЦП_УМЦ_Сервер.ТекущийПользовательЯвляетсяВрачомДокумента(МедицинскийДокумент.ПредседательМедКомиссии);
			ИначеЕсли Роль = Перечисления.РолиПодписей.МедицинскаяОрганизация Тогда
				РольДоступна = ЭЦП_УМЦ_Сервер.ПолучитьСертификатыМОПользователя(РаботаСДокументамиСервер.ФилиалДокумента(МедицинскийДокумент)).Количество() > 0;
			КонецЕсли;
		ИначеЕсли ИмяТипаДокумента = "Документ.МедицинскийОтчет" Тогда
			РольДоступна = Документы.МедицинскийОтчет.РольДоступнаТекущемуПользователю(МедицинскийДокумент, Роль);
		КонецЕсли;
	КонецЕсли;
	
	Если РольДоступна = Неопределено Тогда
		РольДоступна = Ложь;
	КонецЕсли;
	
	Возврат РольДоступна;
	
КонецФункции

Функция ОпределитьДоступностьРолиПоПриему(МедицинскийДокумент, Роль, ПараметрыРоли)
	
	Если ПараметрыРоли = Неопределено Тогда
		// Старый формат с фиксированным набором ролей
		РольДоступна = Ложь;
		Если Роль = ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(19, "РолиПриПодписиМедДокументов") Тогда // Автор документа
			РольДоступна = ЭЦП_УМЦ_Сервер.ТекущийПользовательЯвляетсяВрачомДокумента(МедицинскийДокумент.Врач);
		ИначеЕсли Роль = ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(1, "РолиПриПодписиМедДокументов") Тогда // Врач
			РольДоступна = Не ЭЦП_УМЦ_Сервер.ТекущийПользовательЯвляетсяВрачомДокумента(МедицинскийДокумент.Врач)
				И бит_СертификатыЭЦП.ПолучитьЭлектроннуюПодпись(МедицинскийДокумент, ПараметрыСеанса.ТекущийПользователь) = Неопределено;
		КонецЕсли;
		
		Возврат РольДоступна;
	КонецЕсли;
	
	НЗ = РегистрыСведений.РолиИПодписиЭМД.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(МедицинскийДокумент);
	НЗ.Отбор.РольПодписи.Установить(Роль);
	НЗ.Прочитать();
	
	тзДанныеПодписей = НЗ.Выгрузить();
	
	РольДоступна = Ложь;
	
	Для Каждого ДанныеРоли Из ПараметрыРоли.РолиШаблона Цикл
		
		РольШаблонаДоступна = Ложь;
		
		Если ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ДоступнаВсем Тогда
			РольШаблонаДоступна = Истина;
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.АвторДокумента Тогда
			РольШаблонаДоступна = ЭЦП_УМЦ_Сервер.ТекущийПользовательЯвляетсяВрачомДокумента(МедицинскийДокумент.Врач);
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ДоступнаВсемКромеАвтора Тогда
			РольШаблонаДоступна = Не ЭЦП_УМЦ_Сервер.ТекущийПользовательЯвляетсяВрачомДокумента(МедицинскийДокумент.Врач);
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.МедицинскаяОрганизация Тогда
			РольШаблонаДоступна = ЭЦП_УМЦ_Сервер.ПолучитьСертификатыМОПользователя(РаботаСДокументамиСервер.ФилиалДокумента(МедицинскийДокумент)).Количество() > 0;
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ЗначениеПараметра Тогда
			
			МЗ = РегистрыСведений.ЗначенияПараметровHTML.СоздатьМенеджерЗаписи();
			МЗ.Параметр = ДанныеРоли.ПризнакДоступностиРоли;
			МЗ.Документ = МедицинскийДокумент;
			МЗ.ИндексШаблона = ДанныеРоли.ИндексШаблона;
			МЗ.Прочитать();
			
			Если МЗ.Выбран() Тогда
				РольШаблонаДоступна = ОтраслевыеДополнения.СотрудникиПользователя(ПараметрыСеанса.ТекущийПользователь).Найти(МЗ.Значение) <> Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если РольШаблонаДоступна Тогда
			
			Если 	тзДанныеПодписей.НайтиСтроки(Новый Структура("УИД_ЭМД, Пользователь", 		ПараметрыРоли.УИД_ЭМД, ПараметрыСеанса.ТекущийПользователь)).Количество() > 0
				Или тзДанныеПодписей.НайтиСтроки(Новый Структура("УИД_ЭМД, ИдентификаторРоли", 	ПараметрыРоли.УИД_ЭМД, ДанныеРоли.ИдентификаторРоли)).Количество() > 0
			Тогда
				Продолжить;
			Иначе
				ДанныеРоли.Доступна = Истина;
				РольДоступна = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РольДоступна;
	
КонецФункции

Функция СформироватьЭМДПрохожденияМО(МедицинскийДокумент, ТекстОшибки, СохранитьЭМД)
	
	ДанныеЭМД = Новый Соответствие;
	
	Если ЗначениеЗаполнено(МедицинскийДокумент.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
		ИдВредногоФаткора = МедицинскийДокумент.Номенклатура.ВредныйФакторСправки.УникальныйИдентификатор();
		ДанныеЭМД.Вставить(ИдВредногоФаткора, СформироватьЭМДСправки(МедицинскийДокумент, СохранитьЭМД, МедицинскийДокумент.Номенклатура.ВредныйФакторСправки));
	Иначе
		МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
		ОбработанныеПриказы = Новый Массив;
		Для Каждого СтрокаФактора Из МедицинскийДокумент.ФакторыИУсловияРаботы Цикл
			Если МодульМедосмотрыСервер.ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
				Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИдВредногоФаткора = СтрокаФактора.Фактор.УникальныйИдентификатор();
				ДанныеЭМД.Вставить(ИдВредногоФаткора, СформироватьЭМДСправки(МедицинскийДокумент, СохранитьЭМД, СтрокаФактора.Фактор));
				
				ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор);
			Иначе
				Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор.Приказ) <> Неопределено
					Или Не ЗначениеЗаполнено(СтрокаФактора.Фактор.Приказ.МакетДляПодписанияЭЦП)
				Тогда
					Продолжить;
				КонецЕсли;
				
				ИдПриказа = СтрокаФактора.Фактор.Приказ.УникальныйИдентификатор();
				ДанныеЭМД.Вставить(ИдПриказа, СформироватьЭМДПоТабДоку(МедицинскийДокумент, СтрокаФактора.Фактор.Приказ.МакетДляПодписанияЭЦП, СохранитьЭМД, СтрокаФактора.Фактор.Приказ));
				
				ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор.Приказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЭМД;
	
КонецФункции

Функция РолиДляПодписанияПрохожденияМедосмотра(МедицинскийДокумент, ДополнительныеПараметры = Неопределено)
	
	ИспользуетсяРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	
	мРоли = Новый Массив;
	
	//УИД_ЭМД = МедицинскийДокумент.УникальныйИдентификатор();
	КоллекцияДляОбхода = Неопределено;
	
	Если ЗначениеЗаполнено(МедицинскийДокумент.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
		КоллекцияДляОбхода = Новый Массив;
		КоллекцияДляОбхода.Добавить(Новый Структура("Фактор", МедицинскийДокумент.Номенклатура.ВредныйФакторСправки));
	Иначе
		КоллекцияДляОбхода = МедицинскийДокумент.ФакторыИУсловияРаботы;
	КонецЕсли;
	
	МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
	ОбработанныеПриказы = Новый Массив;
	Для Каждого СтрокаФактора Из КоллекцияДляОбхода Цикл
		
		РолиЭМД = Новый ТаблицаЗначений;
		РолиЭМД.Колонки.Добавить("Роль");
		РолиЭМД.Колонки.Добавить("ПараметрыРоли");
		
		Если МодульМедосмотрыСервер.ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
			Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МодульМедосмотрыСервер.ПустойТабДокШаблонаСправки(СтрокаФактора.Фактор.ШаблонОсмотраСправки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользуетсяРЭМД Тогда
				Если Не СтрокаФактора.Фактор.ШаблонОсмотраСправки.ВидДокумента = Справочники.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаРоли Из СтрокаФактора.Фактор.Приказ.РолиПодписей Цикл
				
				ПредставлениеЭМД = СтрокаФактора.Фактор.Наименование;
				
				СтрокиДанныхРолиЭМД = РолиЭМД.НайтиСтроки(Новый Структура("Роль", СтрокаРоли.Роль));
				МинКолПодписейПоШаблону = СтрокаФактора.Фактор.Приказ.РолиПодписей.НайтиСтроки(Новый Структура("Роль, Обязательная", СтрокаРоли.Роль, Истина)).Количество();
				МаксКолПодписейПоШаблону = СтрокаФактора.Фактор.Приказ.РолиПодписей.НайтиСтроки(Новый Структура("Роль", СтрокаРоли.Роль)).Количество();
				Если СтрокиДанныхРолиЭМД.Количество() = 0 Тогда
					РолиШаблона = Новый Массив;
					НоваяСтрока = РолиЭМД.Добавить();
					НоваяСтрока.Роль = СтрокаРоли.Роль;
					СтруктураПараметровРоли = Новый Структура;
					СтруктураПараметровРоли.Вставить("УИД_ЭМД", СтрокаФактора.Фактор.УникальныйИдентификатор());
					СтруктураПараметровРоли.Вставить("ПредставлениеЭМД", ПредставлениеЭМД);
					СтруктураПараметровРоли.Вставить("РолиШаблона", РолиШаблона);
					СтруктураПараметровРоли.Вставить("МинКолПодписей", МинКолПодписейПоШаблону);
					СтруктураПараметровРоли.Вставить("МаксКолПодписей", МаксКолПодписейПоШаблону);
					НоваяСтрока.ПараметрыРоли = СтруктураПараметровРоли;
				КонецЕсли;
				
				СтруктураРоли = Новый Структура("РежимНастройкиДоступности, ПризнакДоступностиРоли, ИдентификаторРоли, Обязательная");
				ЗаполнитьЗначенияСвойств(СтруктураРоли, СтрокаРоли);
				СтруктураРоли.Вставить("Доступна", Ложь);
				
				РолиШаблона.Добавить(СтруктураРоли);
				
			КонецЦикла;
			
			ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор);
			
		Иначе
			
			Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор.Приказ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаФактора.Фактор.Приказ.МакетДляПодписанияЭЦП) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользуетсяРЭМД Тогда
				ВидДокументаПриказа = МодульМедосмотрыСервер.ВидДокументаПоПриказу(СтрокаФактора.Фактор.Приказ, МедицинскийДокумент, ДополнительныеПараметры);
				Если ВидДокументаПриказа <> Справочники.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаРоли Из СтрокаФактора.Фактор.Приказ.РолиПодписей Цикл
				
				ПредставлениеЭМД = СтрокаФактора.Фактор.Приказ.Наименование;
				
				СтрокиДанныхРолиЭМД = РолиЭМД.НайтиСтроки(Новый Структура("Роль", СтрокаРоли.Роль));
				МинКолПодписейПоШаблону = СтрокаФактора.Фактор.Приказ.РолиПодписей.НайтиСтроки(Новый Структура("Роль, Обязательная", СтрокаРоли.Роль, Истина)).Количество();
				МаксКолПодписейПоШаблону = СтрокаФактора.Фактор.Приказ.РолиПодписей.НайтиСтроки(Новый Структура("Роль", СтрокаРоли.Роль)).Количество();
				Если СтрокиДанныхРолиЭМД.Количество() = 0 Тогда
					РолиШаблона = Новый Массив;
					НоваяСтрока = РолиЭМД.Добавить();
					НоваяСтрока.Роль = СтрокаРоли.Роль;
					СтруктураПараметровРоли = Новый Структура;
					СтруктураПараметровРоли.Вставить("УИД_ЭМД", СтрокаФактора.Фактор.Приказ.УникальныйИдентификатор());
					СтруктураПараметровРоли.Вставить("ПредставлениеЭМД", ПредставлениеЭМД);
					СтруктураПараметровРоли.Вставить("РолиШаблона", РолиШаблона);
					СтруктураПараметровРоли.Вставить("МинКолПодписей", МинКолПодписейПоШаблону);
					СтруктураПараметровРоли.Вставить("МаксКолПодписей", МаксКолПодписейПоШаблону);
					НоваяСтрока.ПараметрыРоли = СтруктураПараметровРоли;
				КонецЕсли;
				
				СтруктураРоли = Новый Структура("РежимНастройкиДоступности, ПризнакДоступностиРоли, ИдентификаторРоли, Обязательная");
				ЗаполнитьЗначенияСвойств(СтруктураРоли, СтрокаРоли);
				СтруктураРоли.Вставить("Доступна", Ложь);
				
				РолиШаблона.Добавить(СтруктураРоли);
				
			КонецЦикла;
			
			ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор.Приказ);
		КонецЕсли;
		
		Для Каждого СтрокаРолиЭМД Из РолиЭМД Цикл
			мРоли.Добавить(Новый Структура("Роль, ПараметрыРоли", СтрокаРолиЭМД.Роль, СтрокаРолиЭМД.ПараметрыРоли));
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат мРоли;
	
КонецФункции

Функция ОпределитьДоступностьРолиПоПроходжениюМедосмотра(МедицинскийДокумент, Роль, ПараметрыРоли)
	
	НЗ = РегистрыСведений.РолиИПодписиЭМД.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(МедицинскийДокумент);
	НЗ.Отбор.РольПодписи.Установить(Роль);
	НЗ.Прочитать();
	
	тзДанныеПодписей = НЗ.Выгрузить();
	
	РольДоступна = Ложь;
	
	СотрудникиПользователя = ОтраслевыеДополнения.СотрудникиПользователя(ПараметрыСеанса.ТекущийПользователь);
	
	Для Каждого ДанныеРоли Из ПараметрыРоли.РолиШаблона Цикл
		
		Если ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ДоступнаВсем Тогда
			РольШаблонаДоступна = Истина;
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.АвторДокумента Тогда
			//РольШаблонаДоступна = ПараметрыСеанса.ТекущийПользователь.Сотрудник = МедицинскийДокумент.Ответственный;
			РольШаблонаДоступна = СотрудникиПользователя.Найти(МедицинскийДокумент.ПредседательМедКомиссии) <> Неопределено;
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ДоступнаВсемКромеАвтора Тогда
			//РольШаблонаДоступна = Не ПараметрыСеанса.ТекущийПользователь.Сотрудник = МедицинскийДокумент.Ответственный;
			РольШаблонаДоступна = Не (СотрудникиПользователя.Найти(МедицинскийДокумент.ПредседательМедКомиссии) <> Неопределено);
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.МедицинскаяОрганизация Тогда
			РольШаблонаДоступна = ЭЦП_УМЦ_Сервер.ПолучитьСертификатыМОПользователя(РаботаСДокументамиСервер.ФилиалДокумента(МедицинскийДокумент)).Количество() > 0;
		ИначеЕсли ДанныеРоли.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ЗначениеПараметра Тогда
			
			Если ЗначениеЗаполнено(МедицинскийДокумент.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
				НайденныеСтроки = МедицинскийДокумент.ПараметрыПриема.НайтиСтроки("Параметр", ДанныеРоли.ПризнакДоступностиРоли);
				Если НайденныеСтроки.Колчество() > 0 Тогда
					РольШаблонаДоступна = СотрудникиПользователя.Найти(НайденныеСтроки[0].Значение) <> Неопределено;
				КонецЕсли;
			Иначе
				
				ПриказВредныйФактор = Неопределено;
				ПриказВредныйФактор = Справочники.ПриказыМедосмотров.ПолучитьСсылку(ПараметрыРоли.УИД_ЭМД);
				Если Не ОбщегоНазначения.СсылкаСуществует(ПриказВредныйФактор) Тогда
					ПриказВредныйФактор = Справочники.ПереченьВредныхФакторовИРабот.ПолучитьСсылку(ПараметрыРоли.УИД_ЭМД);
					Если Не ОбщегоНазначения.СсылкаСуществует(ПриказВредныйФактор) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(ПриказВредныйФактор) = Тип("СправочникСсылка.ПриказыМедосмотров") Тогда
					МЗ = РегистрыСведений.ДанныеПрохожденийМО.СоздатьМенеджерЗаписи();
					МЗ.Ключ = ДанныеРоли.ПризнакДоступностиРоли;
					МЗ.ДокументПрохожденияМО = МедицинскийДокумент;
					МЗ.Приказ = ПриказВредныйФактор;
					МЗ.Прочитать();
					Если МЗ.Выбран() Тогда
						РольШаблонаДоступна = СотрудникиПользователя.Найти(МЗ.Значение) <> Неопределено;
					КонецЕсли;
				Иначе
					НайденныеСтроки = МедицинскийДокумент.ПараметрыПриема.НайтиСтроки("ВредныйФактор, Параметр", ПриказВредныйФактор, ДанныеРоли.ПризнакДоступностиРоли);
					Если НайденныеСтроки.Колчество() > 0 Тогда
						РольШаблонаДоступна = СотрудникиПользователя.Найти(НайденныеСтроки[0].Значение) <> Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если РольШаблонаДоступна Тогда
			
			Если тзДанныеПодписей.НайтиСтроки(Новый Структура("УИД_ЭМД, Пользователь", ПараметрыРоли.УИД_ЭМД, ПараметрыСеанса.ТекущийПользователь)).Количество() > 0
				Или тзДанныеПодписей.НайтиСтроки(Новый Структура("УИД_ЭМД, ИдентификаторРоли", ПараметрыРоли.УИД_ЭМД, ДанныеРоли.ИдентификаторРоли)).Количество() > 0
			Тогда
				Продолжить;
			Иначе
				ДанныеРоли.Доступна = Истина;
				РольДоступна = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РольДоступна;
	
КонецФункции

// Автор медицинского документа
//
// Параметры:
//  МедицинскийДокумент	 - ДокументСсылка - медицинский документ.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники. 
//
Функция АвторДокумента(МедицинскийДокумент) Экспорт 
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		Возврат МедицинскийДокумент.Врач;
		
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра"
		Или   ИмяТипаДокумента = "Документ.СписокНаПрохождениеМедосмотра"
	Тогда
		Возврат МедицинскийДокумент.ПредседательМедКомиссии;
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область ЗубнаяФормулаУМЦ

Функция ПолучитьОписаниеОбозначенийЗубовУМЦ(ДанныеЗубнойФормулы)
	
	СоотвСостояния = Новый Соответствие;
	ОписаниеОбозначений = "";
	Для Каждого кзЗуб Из ДанныеЗубнойФормулы Цикл
		
		СтруктураЗуб = кзЗуб.Значение;
		Если СтруктураЗуб.Свойство("Состояния") Тогда
			Для Каждого СтруктураСостояние Из СтруктураЗуб.Состояния Цикл
				Если ЗначениеЗаполнено(СтруктураСостояние.Обозначение) И 
					СоотвСостояния.Получить(СтруктураСостояние.Состояние) = Неопределено
				Тогда
					Описаение = СтруктураСостояние.Обозначение + " - " + Строка(СтруктураСостояние.Состояние);
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОбозначений, Описаение, ", ");
					СоотвСостояния.Вставить(СтруктураСостояние.Состояние, СтруктураСостояние.Обозначение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеОбозначений;
	
КонецФункции

Функция ПолучитьДанныеЗубнойФормулыУМЦ(Клиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураЗК = Новый Структура;
	РасположениеЗубов = ПолучитьРасположениеЗубов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЗубовСрезПоследних.Регистратор.Дата КАК Дата,
	|	СостоянияЗубовСрезПоследних.Регистратор,
	|	СостоянияЗубовСрезПоследних.НомерЗуба,
	|	СостоянияЗубовСрезПоследних.Состояние,
	|	СостоянияЗубовСрезПоследних.Состояние.КраткоеОбозначение КАК Обозначение
	|ПОМЕСТИТЬ АктуальныеСостоянияЗубов
	|ИЗ
	|	РегистрСведений.СостоянияЗубов.СрезПоследних(, Клиент = &Клиент) КАК СостоянияЗубовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктуальныеСостоянияЗубов.НомерЗуба КАК НомерЗуба,
	|	АктуальныеСостоянияЗубов.Состояние,
	|	АктуальныеСостоянияЗубов.Обозначение
	|ИЗ
	|	АктуальныеСостоянияЗубов КАК АктуальныеСостоянияЗубов
	|ГДЕ
	|	АктуальныеСостоянияЗубов.Дата В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(АктуальныеСостоянияЗубов.Дата) КАК Дата
	|			ИЗ
	|				АктуальныеСостоянияЗубов КАК АктуальныеСостоянияЗубов)
	|ИТОГИ ПО
	|	НомерЗуба";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Результат = Запрос.Выполнить();
	ВыборкаЗубы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗубы.Следующий() Цикл 
		
		СтруктураЗуб = РасположениеЗубов.Получить(ВыборкаЗубы.НомерЗуба);
		Если СтруктураЗуб = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		СтруктураЗуб.Вставить("Состояния", Новый Массив);
		ОбозначениеСостояний = "";
		
		ВыборкаСостояния = ВыборкаЗубы.Выбрать();
		Пока ВыборкаСостояния.Следующий() Цикл
			
			СтруктураСостояние = Новый Структура("Состояние, Обозначение", ВыборкаСостояния.Состояние, ВыборкаСостояния.Обозначение);
			СтруктураЗуб.Состояния.Добавить(СтруктураСостояние);
			Если ЗначениеЗаполнено(ВыборкаСостояния.Обозначение) Тогда 
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОбозначениеСостояний, ВыборкаСостояния.Обозначение, ", ");
			КонецЕсли;
			
		КонецЦикла;
		СтруктураЗуб.Вставить("ОбозначениеСостояний", ОбозначениеСостояний);
		
	КонецЦикла;
	
	Возврат РасположениеЗубов;
	
КонецФункции

Функция ПолучитьРасположениеЗубов() 
	
	РасположениеЗубов = Новый Соответствие;
	
	РасположениеЗубов.Вставить("18", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "18", 0, "в", "1"));
	РасположениеЗубов.Вставить("17", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "17", 1, "в", "1"));
	РасположениеЗубов.Вставить("16", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "16", 2, "в", "1"));
	РасположениеЗубов.Вставить("15", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "15", 3, "в", "1"));
	РасположениеЗубов.Вставить("14", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "14", 4, "в", "1"));
	РасположениеЗубов.Вставить("13", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "13", 5, "в", "1"));
	РасположениеЗубов.Вставить("12", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "12", 6, "в", "1"));
	РасположениеЗубов.Вставить("11", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "11", 7, "в", "1"));
	
	РасположениеЗубов.Вставить("21", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "21", 8, "в", "2"));
	РасположениеЗубов.Вставить("22", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "22", 9, "в", "2"));
	РасположениеЗубов.Вставить("23", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "23", 10, "в", "2"));
	РасположениеЗубов.Вставить("24", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "24", 11, "в", "2"));
	РасположениеЗубов.Вставить("25", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "25", 12, "в", "2"));
	РасположениеЗубов.Вставить("26", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "26", 13, "в", "2"));
	РасположениеЗубов.Вставить("27", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "27", 14, "в", "2"));
	РасположениеЗубов.Вставить("28", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "28", 15, "в", "2"));
	
	РасположениеЗубов.Вставить("48", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "48", 16, "н", "3"));
	РасположениеЗубов.Вставить("47", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "47", 17, "н", "3"));
	РасположениеЗубов.Вставить("46", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "46", 18, "н", "3"));
	РасположениеЗубов.Вставить("45", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "45", 19, "н", "3"));
	РасположениеЗубов.Вставить("44", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "44", 20, "н", "3"));
	РасположениеЗубов.Вставить("43", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "43", 21, "н", "3"));
	РасположениеЗубов.Вставить("42", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "42", 22, "н", "3"));
	РасположениеЗубов.Вставить("41", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "41", 23, "н", "3"));
	
	РасположениеЗубов.Вставить("31", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "31", 24, "н", "4"));
	РасположениеЗубов.Вставить("32", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "32", 25, "н", "4"));
	РасположениеЗубов.Вставить("33", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "33", 26, "н", "4"));
	РасположениеЗубов.Вставить("34", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "34", 27, "н", "4"));
	РасположениеЗубов.Вставить("35", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "35", 28, "н", "4"));
	РасположениеЗубов.Вставить("36", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "36", 29, "н", "4"));
	РасположениеЗубов.Вставить("37", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "37", 30, "н", "4"));
	РасположениеЗубов.Вставить("38", Новый Структура("Номер, Порядок, Челюсть, Квадрант", "38", 31, "н", "4"));
	
	Возврат РасположениеЗубов;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ЗаголовокКнопкиОткрытьЛекарственнуюНепереносимость(Клиент) Экспорт
	
	Заголовок = Метаданные.РегистрыСведений.ЛекарственнаяНепереносимость.Команды.ОткрытьЛекарственнуюНепереносимость.Синоним;
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		
		НаборЗаписей = РегистрыСведений.ЛекарственнаяНепереносимость.СоздатьНаборЗаписей();
		Если ПравоДоступа("Чтение", НаборЗаписей.Метаданные()) Тогда
			НаборЗаписей = РегистрыСведений.ЛекарственнаяНепереносимость.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Клиент.Установить(Клиент);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				Заголовок = Заголовок + " (" + НаборЗаписей.Количество() + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Проверяет попадание диагноза в диапазон кодов. Пустой код не попадает ни в какой диапазон.
//
// Параметры:
//  Диагноз	 - Строка, СправочникСсылка.Диагнозы	 - ссылка на диагноз или строка кода диагноза.
//  Диапазон - Строка, Массив	 - диапазон кодов, например, "A00-B99" или "K01". Либо массив таких строк.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ДиагнозВДиапазонеКодов(Диагноз, Диапазон) Экспорт
	
	КодДиагноза = ?(ТипЗнч(Диагноз) = Тип("Строка"), ВРег(Диагноз), ВРег(Диагноз.КодДиагноза));
	Если Не ПустаяСтрока(КодДиагноза) Тогда // Пустой код диагноза не попадает в любой диапазон.
		
		Если ТипЗнч(Диапазон) = Тип("Строка") Тогда
			Диапазоны = Новый Массив;
			Диапазоны.Добавить(Диапазон);
		Иначе
			Диапазоны = Диапазон;
		КонецЕсли;
		
		Для Каждого ТекущийДиапазон Из Диапазоны Цикл
			
			Границы = СтрРазделить(ТекущийДиапазон, "-", Ложь);
			Если Границы.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НачалоДиапазона = ВРег(Границы[0]);
				Если Границы.Количество() > 1 Тогда
					// Диапазон с 2 границами.
					КонецДиапазона = ВРег(Границы[1]);
					
					Если КодДиагноза >= НачалоДиапазона И КодДиагноза <= КонецДиапазона Тогда
						Возврат Истина;
					КонецЕсли;
					
				Иначе
					// Диапазон вида "A01" без интервала.
					Если Лев(КодДиагноза, СтрДлина(НачалоДиапазона)) = НачалоДиапазона Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; // Перебор диапазонов.
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает основной диагноз из приема
//
// Параметры:
//  Прием							 - ДокументСсылка.Прием	 - Ссылка на прием
//  ПриоритетыКлассификацийДиагнозов - Строка				 - Порядок наименований реквизитов классификаций по приоритету. По умолчанию "Классификация2,Классификация3,Классификация1".
//  Отбор							 - Структура			 - Структура для отбор строк диагнозов:
//  																* Классификация1 - Массив - Массив из Перечисления.КлассификацииДиагнозов.
//  																* Классификация2 - Массив - Массив из Перечисления.КлассификацииДиагнозов.
//  																* Классификация3 - Массив - Массив из Перечисления.КлассификацииДиагнозов.
//  ВозвращатьПервый				 - Булево, Неопределено	 -	Если Истина, то возвращает первый по приоритету,
//  															Если Ложь, то возвращает массив диагнозов с самым высоким приоритетом,
//  															Если Неопределено - если есть несколько диагнозов с равным приоритетом, то возвращает пустую ссылку, иначе - первый по приоритету.
//  Классификатор					 - Строка				 - Отбор по oid классификатора диагноза
// 
// Возвращаемое значение:
//  СправочникСсылка.Диагнозы - Основной диагноз по приоритету
//
Функция ОсновнойДиагнозПриема(Прием, ПриоритетыКлассификацийДиагнозов = "Классификация2,Классификация3,Классификация1",
					Отбор = Неопределено, ВозвращатьПервый = Истина, Классификатор = Неопределено) Экспорт
	
	Если ТипЗнч(Прием) = Тип("ТаблицаЗначений") Тогда
		ТаблДиагнозы = Прием;
	ИначеЕсли ТипЗнч(Прием) = Тип("ДокументСсылка.Прием") Тогда
		ТаблДиагнозы = Прием.Диагнозы.Выгрузить();
	Иначе
		Возврат Справочники.Диагнозы.ПустаяСсылка();
	КонецЕсли;
	
	// Отбор
	Если Отбор <> Неопределено Тогда
		ТаблицаПослеОтбора = ТаблДиагнозы.СкопироватьКолонки("Диагноз, Классификация1, Классификация2, Классификация3");
		Для Каждого СтрокаДиагноза Из ТаблДиагнозы Цикл
			Если СтрокаДиагнозаПрошлаОтбор(СтрокаДиагноза, Отбор) Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПослеОтбора.Добавить(), СтрокаДиагноза);
			КонецЕсли;
		КонецЦикла;
		ТаблДиагнозы = ТаблицаПослеОтбора;
	КонецЕсли;
	
	// Классификатор
	Если Классификатор <> Неопределено Тогда
		ТаблицаПослеОтбора = ТаблДиагнозы.СкопироватьКолонки();
		Для Каждого СтрокаДиагноза Из ТаблДиагнозы Цикл
			Если СтрокаДиагноза.Диагноз.OIDСправочникаИсточника = Классификатор Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПослеОтбора.Добавить(), СтрокаДиагноза);
			КонецЕсли;
		КонецЦикла;
		ТаблДиагнозы = ТаблицаПослеОтбора;
	КонецЕсли;
	
	Если ТаблДиагнозы.Количество() = 0 Тогда
		Возврат Справочники.Диагнозы.ПустаяСсылка();
	КонецЕсли;
	
	ТаблДиагнозы.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
	
	// Подготовка данных расчета приоритетов. Создаем структуру с весами для каждой классификации диагноза.
	ПриоритетыКлассификаций = Новый Структура("Классификация1, Классификация2, Классификация3", 0, 0, 0);
	
	Если ЗначениеЗаполнено(ПриоритетыКлассификацийДиагнозов) Тогда
		ПорядокКлассификаций = СтрРазделить(ПриоритетыКлассификацийДиагнозов, ",", Ложь);
		Для Каждого Классификация Из ПорядокКлассификаций Цикл
			Классификация = СокрЛП(Классификация);
			Если ПриоритетыКлассификаций.Свойство(Классификация) Тогда
				ПриоритетыКлассификаций[Классификация] = 10 / 10 * (ПорядокКлассификаций.Найти(Классификация) + 1);  // От 1 до 0,01.
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Расстановка приоритетов классификациям диагнозов
	пчКлассификация = Перечисления.КлассификацииДиагнозов;
	ЗначенияПриоритетов = Новый Соответствие;
	ЗначенияПриоритетов.Вставить(пчКлассификация.ПустаяСсылка(), 9);
	
	ЗначенияПриоритетов.Вставить(пчКлассификация.Окончательный, 1);
	ЗначенияПриоритетов.Вставить(пчКлассификация.Предварительный, 2);
	
	ЗначенияПриоритетов.Вставить(пчКлассификация.Острое, 1);
	ЗначенияПриоритетов.Вставить(пчКлассификация.ОбострениеХронического, 2);
	ЗначенияПриоритетов.Вставить(пчКлассификация.ХроническоеВпервыеВыявленное, 3);
	ЗначенияПриоритетов.Вставить(пчКлассификация.ХроническоеРанееВыявленное, 4);
	
	ЗначенияПриоритетов.Вставить(пчКлассификация.ОсновноеЗаболевание, 1);
	ЗначенияПриоритетов.Вставить(пчКлассификация.ОсложнениеОсновногоЗаболевания, 2);
	ЗначенияПриоритетов.Вставить(пчКлассификация.СопутствующееЗаболевание, 3);
	ЗначенияПриоритетов.Вставить(пчКлассификация.ОсложнениеСопутствующегоЗаболевания, 4);
	ЗначенияПриоритетов.Вставить(пчКлассификация.КонкурирующееЗаболевание, 5);
	ЗначенияПриоритетов.Вставить(пчКлассификация.ФоновоеЗаболевание, 6);
	ЗначенияПриоритетов.Вставить(пчКлассификация.ВнешняяПричина, 7);
	
	// Расстановка приоритетов в таблице диагнозов
	ТипЧисло = Новый ОписаниеТипов("Число");
	Для Каждого СтрокаДиагноза Из ТаблДиагнозы Цикл
		ПриоритетПоКлассификация1 = ТипЧисло.ПривестиЗначение(ЗначенияПриоритетов.Получить(СтрокаДиагноза.Классификация1));
		ПриоритетПоКлассификация2 = ТипЧисло.ПривестиЗначение(ЗначенияПриоритетов.Получить(СтрокаДиагноза.Классификация2));
		ПриоритетПоКлассификация3 = ТипЧисло.ПривестиЗначение(ЗначенияПриоритетов.Получить(СтрокаДиагноза.Классификация3));
		
		СтрокаДиагноза.Приоритет = ПриоритетПоКлассификация1 * ПриоритетыКлассификаций.Классификация1
								+ ПриоритетПоКлассификация2 * ПриоритетыКлассификаций.Классификация2
								+ ПриоритетПоКлассификация3 * ПриоритетыКлассификаций.Классификация3;
	
	КонецЦикла;
	ТаблДиагнозы.Сортировать("Приоритет, Диагноз");
	
	Результат = Новый Массив();
	ВерхнийПриоритет = ТаблДиагнозы[0].Приоритет;
	Для каждого СтрокаДиагноза Из ТаблДиагнозы Цикл
		Если СтрокаДиагноза.Приоритет = ВерхнийПриоритет Тогда
			Результат.Добавить(СтрокаДиагноза.Диагноз);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 1 Или ВозвращатьПервый Тогда
		Возврат Результат[0];
	ИначеЕсли ВозвращатьПервый = Неопределено Тогда
		Возврат Справочники.Диагнозы.ПустаяСсылка();
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция СтрокаДиагнозаПрошлаОтбор(СтрокаДиагноза, Отбор)
	Если Отбор.Свойство("Классификация1") 
	И ?(ТипЗнч(Отбор.Классификация1) = Тип("Массив"),
		(Отбор.Классификация1.Найти(СтрокаДиагноза.Классификация1)=Неопределено),
		(Отбор.Классификация1<>СтрокаДиагноза.Классификация1))
	Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Отбор.Свойство("Классификация2") 
	И ?(ТипЗнч(Отбор.Классификация2) = Тип("Массив"),
		(Отбор.Классификация2.Найти(СтрокаДиагноза.Классификация2)=Неопределено),
		(Отбор.Классификация2<>СтрокаДиагноза.Классификация2))
	Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Отбор.Свойство("Классификация3") 
	И ?(ТипЗнч(Отбор.Классификация3) = Тип("Массив"),
		(Отбор.Классификация3.Найти(СтрокаДиагноза.Классификация3)=Неопределено),
		(Отбор.Классификация3<>СтрокаДиагноза.Классификация3))
	Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Должность и специализация врача по классификаторам МЗ.
//
// Параметры:
//  Врач - СправочникСсылка.Сотрудники - врач.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ДолжностьСпециализацияВрача(Врач) Экспорт
	
	ДанныеВрача = Новый Структура("Должность, ДолжностьПредставление, Специализация, СпециализацияПредставление",
					Справочники.КлассификаторыМинЗдрава.ПустаяСсылка(), Справочники.КлассификаторыМинЗдрава.ПустаяСсылка(), "", "");
	
	Если ЗначениеЗаполнено(Врач) Тогда
		
		Если ЗначениеЗаполнено(Врач.Должность) Тогда
			ДанныеВрача.Должность = Врач.Должность.ДолжностьМинздрава;
			ДанныеВрача.ДолжностьПредставление = ДанныеВрача.Должность.НаименованиеПолное;
		КонецЕсли;
		Если Врач.СпециализацииФРМР.Количество() > 0 Тогда
			ДанныеВрача.Специализация = Врач.СпециализацииФРМР[0].Специализация;
			ДанныеВрача.СпециализацияПредставление = ДанныеВрача.Специализация.НаименованиеПолное;
		КонецЕсли;
	Иначе
		ДанныеВрача.Должность	  = Справочники.КлассификаторыМинЗдрава.ПустаяСсылка();
		ДанныеВрача.Специализация = Справочники.КлассификаторыМинЗдрава.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДанныеВрача;
	
КонецФункции

#КонецОбласти