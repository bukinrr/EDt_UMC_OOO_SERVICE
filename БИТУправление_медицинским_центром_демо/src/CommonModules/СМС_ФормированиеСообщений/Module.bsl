#Область ПрограммныйИнтерфейс

// Функция ВычислитьТекстСообщения.
//
// Параметры:
//  ВидСообщения		 - СправочникСсылка.ВидыСообщений	 - вид сообщения.
//  ПараметрыСообщения	 - Структура						 - параметры
// 
// Возвращаемое значение:
//  Строка.
//
Функция ВычислитьТекстСообщения(ВидСообщения, ПараметрыСообщения) Экспорт
	
	Перем Источник, ШаблонТекста;
	
	УстановитьБезопасныйРежим(Истина);
	
	ШаблонТекста = ВидСообщения.ШаблонТекста;
	
	// Определение Филиала сообщения
	Филиал = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСообщения, "Источник")
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрыСообщения.Источник))
	Тогда
		МетаданныеИсточника = ПараметрыСообщения.Источник.Метаданные();
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника)
			И МетаданныеИсточника.Реквизиты.Найти("Филиал") <> Неопределено
		Тогда
			Филиал = ПараметрыСообщения.Источник.Филиал;
			
		ИначеЕсли ТипЗнч(ПараметрыСообщения.Источник) = Тип("СправочникСсылка.Филиалы") Тогда
			Филиал = ПараметрыСообщения.Источник;
		КонецЕсли;
	КонецЕсли;
	// Не определили Филиал - пробуем из последнего посещения клиента.
	Если Не ЗначениеЗаполнено(Филиал)
		И ТипЗнч(ПараметрыСообщения.Получатель) = Тип("СправочникСсылка.Клиенты")
	Тогда
		Филиал = РаботаСКлиентами.ФилиалПоследнегоПосещения(ПараметрыСообщения.Получатель);
	КонецЕсли;
	// Не определили Филиал - берём основной филиал
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	КонецЕсли;
	
	// Вычисление дополнительных полей.
	ТаблицаПолей = ВидСообщения.ПоляШаблонаТекста.Выгрузить();
		
	ТаблицаПолей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаПоля Из ТаблицаПолей Цикл
		
		Источник  = ПараметрыСообщения.Источник; // На случай изменения при вычислении.
		Получатель= ПараметрыСообщения.Получатель;
		Результат = "";
		Попытка
			Выполнить(СтрокаПоля.Выражение);
		Исключение
		КонецПопытки;
		
		СтрокаПоля.Значение = Результат;
		
	КонецЦикла;
	
	// Предопределенные поля
	СтрокаПоля = ТаблицаПолей.Вставить(0);
	СтрокаПоля.Имя = "Получатель";
	СтрокаПоля.Значение = ПараметрыСообщения.Получатель;
		
	СтрокаПоля = ТаблицаПолей.Вставить(0);
	СтрокаПоля.Имя = "ПолучательФИО";
	СтрокаПоля.Значение = СокрЛП(ПараметрыСообщения.Получатель.Фамилия + " " + ПараметрыСообщения.Получатель.Имя + " " + ПараметрыСообщения.Получатель.Отчество);
	СтрокаПоля.Значение = СтрЗаменить(СтрокаПоля.Значение,"  "," ");
		
	СтрокаПоля = ТаблицаПолей.Вставить(0);
	СтрокаПоля.Имя = "ПолучательИмя";
	СтрокаПоля.Значение = СокрЛП(ПараметрыСообщения.Получатель.Имя);
	Если ПустаяСтрока(СтрокаПоля.Значение) Тогда СтрокаПоля.Значение = ПараметрыСообщения.Получатель КонецЕсли;
	СтрокаПоля.Значение = СтрЗаменить(СтрокаПоля.Значение,"  "," ");
		
	СтрокаПоля = ТаблицаПолей.Вставить(0);
	СтрокаПоля.Имя = "ПолучательИО";
	СтрокаПоля.Значение = СокрЛП(ПараметрыСообщения.Получатель.Имя + " " + ПараметрыСообщения.Получатель.Отчество);
	СтрокаПоля.Значение = СтрЗаменить(СтрокаПоля.Значение,"  "," ");
	
	СтрокаПоля = ТаблицаПолей.Вставить(0);
	СтрокаПоля.Имя = "ПолучательФамилияИО";
	СтрокаПоля.Значение = ОбщегоНазначения.ФамилияИнициалыФизЛица(ПараметрыСообщения.Получатель.Фамилия + " " + ПараметрыСообщения.Получатель.Имя + " " + ПараметрыСообщения.Получатель.Отчество);
	// Поля филиала и организации
	НазваниеФилиала = ОбщегоНазначенияБИТКлиентСервер.ЗаполненноеЗначение(Филиал.РекламноеНазвание, Филиал.Наименование);
	ТелефонФилиала = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Филиал, Перечисления.ТипыКонтактнойИнформации.Телефон);
	Если Не ЗначениеЗаполнено(ТелефонФилиала) Тогда
		ТелефонФилиала = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Филиал.Организация, Перечисления.ТипыКонтактнойИнформации.Телефон);
	КонецЕсли;
	
	СтрокаПоля = ТаблицаПолей.Вставить(0);
	СтрокаПоля.Имя = "НазваниеОрганизации";
	СтрокаПоля.Значение = НазваниеФилиала;
	
	СтрокаПоля = ТаблицаПолей.Вставить(0);
	СтрокаПоля.Имя = "ТелефонОрганизации";
	СтрокаПоля.Значение = ТелефонФилиала;
	
	// Вычисление Текста
	Для Каждого СтрокаПоля Из ТаблицаПолей Цикл
		ШаблонТекста = СтрЗаменить(ШаблонТекста, "<"+СтрокаПоля.Имя+">", СтрокаПоля.Значение);
	КонецЦикла;
	
	Возврат ШаблонТекста;
	
КонецФункции

// Функция СформироватьПараметрыОбработкиРассылки.
//
// Параметры:
//  ОбработкаРассылки - СправочникСсылка.ОбработкиSMSрассылки - обработчик рассылки.
//
// Возвращаемое значение:
//  Структура.
//
Функция СформироватьПараметрыОбработкиРассылки(ОбработкаРассылки) Экспорт
	
	СтруктураПараметров = Новый Структура("Пользователь, Пароль, Подпись");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ОбработкаРассылки);
	ДанныеДополнительныхПараметров = ОбработкаРассылки.ДополнительныеПараметры.Получить();
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДанныеДополнительныхПараметров);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция ПолучитьОбработкуИзХранилища.
//
// Параметры:
//  ОбработкаSMSРассылки - СправочникСсылка.ВидыСообщений	 - вид сообщения.
//
// Возвращаемое значение:
//  Строка - имя .
//
Функция ПолучитьОбработкуИзХранилища(ОбработкаSMSРассылки) Экспорт
	
	Перем ВнешняяОбработка;
	
	ДанныеХранилища = ОбработкаSMSРассылки.ХранилищеВнешнейОбработки.Получить();
	
	Если ДанныеХранилища <> Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДанныеХранилища.Записать(ИмяФайла);
		ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	КонецЕсли;
	
	Возврат ВнешняяОбработка;
	
КонецФункции

// Функция СоздатьДокументРассылка.
//
// Параметры:
//  ПараметрыСообщения - Неопределено
//
// Возвращаемое значение:
//  ВнешняяОбработка.
//
Функция СоздатьДокументРассылка(ПараметрыСообщения) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяРассылка = Документы.Рассылка.СоздатьДокумент();
	НоваяРассылка.Дата = ТекущаяДатаСеанса();                                                          
	НоваяРассылка.ДатаОтправки = ПараметрыСообщения.ДатаОтправки;
	НоваяРассылка.СозданАвтоматически	= Истина;
	НоваяРассылка.ДоставитьСообщениеВУказанноеВремя = ПараметрыСообщения.ДоставитьСообщениеВУказанноеВремя;
	НоваяРассылка.ОбработкаSMSРассылки	= УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнаяОбработкаSMSРассылки");
	
	Попытка
		НоваяРассылка.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать документ Рассылка по причине:" + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НоваяРассылка.Ссылка;
		
	
КонецФункции

// Функция ПолучитьДанныеВидовСообщений.
//
// Параметры:
//  ВидыСообщений - Массив.
//
// Возвращаемое значение:
//  Массив.
//
Функция ПолучитьДанныеВидовСообщений(ВидыСообщений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСообщений",ВидыСообщений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСообщенийРассылки.Ссылка КАК ВидСообщения,
	|	ВидыСообщенийРассылки.ВидСобытия,
	|	ВидыСообщенийРассылки.Дата,
	|	ВидыСообщенийРассылки.Время,
	|	ВидыСообщенийРассылки.ЗапасДней,
	|	ВидыСообщенийРассылки.ШаблонТекста,
	|	ВидыСообщенийРассылки.ОтправлятьБезПодтверждения,
	|	ВидыСообщенийРассылки.Получатели.(
	|		Ссылка,
	|		НомерСтроки,
	|		ИмяПоля,
	|		ИмяРеквизита
	|	),
	|	ВидыСообщенийРассылки.ПоляШаблонаТекста.(
	|		Ссылка,
	|		НомерСтроки,
	|		Имя,
	|		Выражение
	|	),
	|	ВидыСообщенийРассылки.ВидСобытия.ТипСобытия КАК ТипСобытия
	|ИЗ
	|	Справочник.ВидыСообщенийРассылки КАК ВидыСообщенийРассылки
	|ГДЕ
	|	ВидыСообщенийРассылки.Ссылка В(&ВидыСообщений)"
	;
	Выб = Запрос.Выполнить().Выбрать();
	
	Возврат Выб;
	
КонецФункции

////////////////////////////////////////////////////////////////////////
// Процедуры отправки сообщений.

// Функция ОтправитьНеотправленныеСообщения.
//
// Параметры:
//  ДокументРассылки		 - ДокументСсылка.Рассылка		 - рассылка.
//  НаборЗаписейСообщения	 - РегистрСведенийНаборЗаписей.СообщенияSMS					 - сообщения.
//  ОбработкаSMSРассылки	 - СправочникСсылка.ВидыСообщений	 - вид сообщения.
// 
// Возвращаемое значение:
//  Структура - описание результата отправки.
//
Функция ОтправитьНеотправленныеСообщения(ДокументРассылки, НаборЗаписейСообщения = Неопределено, ОбработкаSMSРассылки = Неопределено) Экспорт
	
	Перем СообщениеОбОшибке;
	
	ОтправленоСообщений = 0;
	ОтправлялосьСообщений = 0;
	
	РезультатОтправки = Новый Структура("ОтправленоСообщений, ОтправлялосьСообщений, СообщениеОбОшибке",0,,"");
	
	Если ДокументРассылки.Проведен Тогда
		
		Если ОбработкаSMSРассылки = Неопределено Тогда
			
			ОбработкаSMSРассылки = ДокументРассылки.ОбработкаSMSРассылки;
			Если Не ЗначениеЗаполнено(ОбработкаSMSРассылки) Тогда
				
				РезультатОтправки.СообщениеОбОшибке = "Не выбрана обработка SMS-рассылки!";
				Возврат РезультатОтправки;
				
			КонецЕсли;                    
		КонецЕсли;
		
		Если НаборЗаписейСообщения = Неопределено Тогда
			
			НаборЗаписейСообщения = РегистрыСведений.СообщенияSMS.СоздатьНаборЗаписей();
			НаборЗаписейСообщения.Отбор.Рассылка.Установить(ДокументРассылки.Ссылка);
			НаборЗаписейСообщения.Прочитать();
			
		ИначеЕсли НаборЗаписейСообщения.Модифицированность() Тогда
			
			// Удаление дублей сообщений из набора записей.
			ТаблицаСообщенийДокумента = НаборЗаписейСообщения.Выгрузить();
			Отбор = Новый Структура;
			
			Для Каждого Измерение Из НаборЗаписейСообщения.Метаданные().Измерения Цикл
				
				Отбор.Вставить(Измерение.Имя);
				
			КонецЦикла;
			
			мОбр = НаборЗаписейСообщения.Количество() - 1;
			Для сч = 0 По мОбр Цикл
				
				Запись = НаборЗаписейСообщения[мОбр - сч];
				ЗаполнитьЗначенияСвойств(Отбор, Запись);
				
				Если ТаблицаСообщенийДокумента.НайтиСтроки(Отбор).Количество() > 1 Тогда
					НаборЗаписейСообщения.Удалить(Запись);
					ТаблицаСообщенийДокумента.Удалить(мОбр - сч);	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТаблицаСообщенийДокумента = НаборЗаписейСообщения.Выгрузить();
		РазмерПакетаСообщений = ПолучитьРазмерПакетаСообщенийSMS();
		
		ТаблицаСообщенийКОтправке = ТаблицаСообщенийДокумента.СкопироватьКолонки();
		ТаблицаСообщенийКОтправке.Колонки.Добавить("Отправлено", Новый ОписаниеТипов("Булево"));
		ТаблицаСообщенийКОтправке.Колонки.Добавить("ОжидаетПодтвержденияОтправки", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрокаСообщения Из ТаблицаСообщенийДокумента Цикл
			
			Если СтрокаСообщения.СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.НеОтправлено Тогда
				СтрокаСообщенияКОтправке = ТаблицаСообщенийКОтправке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСообщенияКОтправке, СтрокаСообщения);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСообщенийКОтправке.Колонки.КонтактПолучателя.Имя = "ТелефонПолучателя";
		ТаблицаСообщенийКОтправке_Копия = ТаблицаСообщенийКОтправке.Скопировать();
		
		ОтправленыВсеSMS = Ложь;
		ЭтоПервыйПакетСообщений = Истина;
		Начало = 0;
		Пока Не ОтправленыВсеSMS Цикл
			
			Если РазмерПакетаСообщений > 0 
				И ТаблицаСообщенийКОтправке_Копия.Количество() > 0
			Тогда
				ТаблицаСообщенийКОтправке.Очистить();
				Для Инд = Начало По ТаблицаСообщенийКОтправке_Копия.Количество() - 1 Цикл
					НСтр = ТаблицаСообщенийКОтправке.Добавить();		
					ЗаполнитьЗначенияСвойств(нстр, ТаблицаСообщенийКОтправке_Копия[Инд]);
					НСтр.ТелефонПолучателя = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(НСтр.ТелефонПолучателя);
					
					Если ТаблицаСообщенийКОтправке.Количество() = РазмерПакетаСообщений Тогда 
						Если Инд < ТаблицаСообщенийКОтправке_Копия.Количество() - 1 Тогда
							Начало = Инд + 1;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Инд = ТаблицаСообщенийКОтправке_Копия.Количество() - 1 Тогда
						ОтправленыВсеSMS = Истина;
					КонецЕсли;
				КонецЦикла;				
			Иначе
				ОтправленыВсеSMS = Истина;
			КонецЕсли;
			
			РезультатОтправки.ОтправлялосьСообщений = ТаблицаСообщенийКОтправке.Количество();
			
			ОбработкаРассылки = СМС_ФормированиеСообщений.ПолучитьОбработкуИзХранилища(ОбработкаSMSРассылки);
			СтруктураПараметров = СМС_ФормированиеСообщений.СформироватьПараметрыОбработкиРассылки(ОбработкаSMSРассылки);
			Если ЭтоПервыйПакетСообщений Тогда 
				СтруктураПараметров.Вставить("ЭтоПервыйПакетСообщений", ЭтоПервыйПакетСообщений);
			КонецЕсли;
			Попытка
				ОбработкаРассылки.ИнициализироватьОбработку(СтруктураПараметров, СообщениеОбОшибке, Истина);
			Исключение
				РезультатОтправки.СообщениеОбОшибке = "В обработке SMS-рассылки возникла ошибка при инициализации!";
				Возврат РезультатОтправки;
			КонецПопытки;
			Если Не ЗначениеЗаполнено(РезультатОтправки.СообщениеОбОшибке) Тогда
				
				// Формирование структуры параметров отпарвки.
				СтруктураПараметровОтправки = Новый Структура;
				Для Каждого КЗ Из СтруктураПараметров Цикл
					СтруктураПараметровОтправки.Вставить(КЗ.Ключ, КЗ.Значение);	
				КонецЦикла;
				СтруктураПараметровОтправки.Вставить("ДоставитьВУказанноеВремя", Ложь);
				СтруктураПараметровОтправки.Вставить("ДатаОтправки");
				
				Если ДокументРассылки.ДоставитьСообщениеВУказанноеВремя Тогда
					СтруктураПараметровОтправки.ДатаОтправки = ДокументРассылки.ДатаОтправки;
					СтруктураПараметровОтправки.ДоставитьВУказанноеВремя = Истина;
				КонецЕсли;
				
				// Отправка сообщений
				Попытка
					РезультатОтправки.ОтправленоСообщений = ОбработкаРассылки.ОтправитьСообщения(ТаблицаСообщенийКОтправке, СтруктураПараметровОтправки, СообщениеОбОшибке);
				Исключение
					мсСтр = ТаблицаСообщенийКОтправке.НайтиСтроки(Новый Структура("Отправлено", Истина));
					Если мсСтр.Количество() = 0 Тогда
						РезультатОтправки.СообщениеОбОшибке = "В обработке SMS-рассылки возникла ошибка при отправке сообщений! " + ОписаниеОшибки();	
						РезультатОтправки.ОтправленоСообщений = мсСтр.Количество();
					КонецЕсли;
				КонецПопытки;
				
				ОтправленоСообщений = ОтправленоСообщений + РезультатОтправки.ОтправленоСообщений;
				ОтправлялосьСообщений = ОтправлялосьСообщений + РезультатОтправки.ОтправлялосьСообщений;
				
				Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
					РезультатОтправки.СообщениеОбОшибке = РезультатОтправки.СообщениеОбОшибке + СообщениеОбОшибке;
				КонецЕсли;
				
				// Отметка отправленных сообщений как отправленных и запись набора записей.
				Для Каждого СтрокаСообщенияКОтправке Из ТаблицаСообщенийКОтправке Цикл
					
					Если СтрокаСообщенияКОтправке.Отправлено Тогда                                         
						СтрокаСообщения = ТаблицаСообщенийДокумента.Найти(СтрокаСообщенияКОтправке.ВнутреннийИдентификаторСообщения);
						Если СтрокаСообщения <> Неопределено Тогда
							НаборЗаписейСообщения[ТаблицаСообщенийДокумента.Индекс(СтрокаСообщения)].СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.Отправлена;
							НаборЗаписейСообщения[ТаблицаСообщенийДокумента.Индекс(СтрокаСообщения)].КтоОтправил	= ПараметрыСеанса.ТекущийПользователь;
							НаборЗаписейСообщения[ТаблицаСообщенийДокумента.Индекс(СтрокаСообщения)].ДатаФактическойОтправки = ТекущаяДата();
						КонецЕсли;
					КонецЕсли;
					
					Если НаборЗаписейСообщения.Модифицированность() Тогда
						НаборЗаписейСообщения.Записать();
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			ЭтоПервыйПакетСообщений = Ложь;
		КонецЦикла;
		РезультатОтправки.ОтправленоСообщений	= ОтправленоСообщений;
		РезультатОтправки.ОтправлялосьСообщений	= ОтправлялосьСообщений;
	Иначе
		РезультатОтправки.СообщениеОбОшибке = "Документ рассылки " + ДокументРассылки + " не проведен!";	
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Процедура ОтправитьВсеНеотправленныеСообщения.
//
// Параметры:
//  ОбработкаSMSРассылки - СправочникСсылка.ОбработкиSMSРассылки	 - обработка.
//
Процедура ОтправитьВсеНеотправленныеСообщения(Знач ОбработкаSMSРассылки) Экспорт 
	
	Если Не ЗначениеЗаполнено(ОбработкаSMSРассылки) Тогда
		ОбработкаSMSРассылки = Неопределено;
	КонецЕсли;
	
	МаксимальноеУпреждениеОтправкиСМСОператору =  ФормированиеСообщений.ПолучитьМаксимальноеУпреждениеОтправкиСМСОператору();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаТек", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаНачалаОтправки", ТекущаяДата() + МаксимальноеУпреждениеОтправкиСМСОператору * 3600);
	Запрос.УстановитьПараметр("ТипЗаявка", Тип("ДокументСсылка.Заявка"));
	Запрос.УстановитьПараметр("СтатусОтправки",	Перечисления.СтатусыОтправкиСообщений.НеОтправлено);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СообщенияSMS.Рассылка,
	|	СообщенияSMS.Рассылка.ОбработкаSMSРассылки
	|ИЗ
	|	РегистрСведений.СообщенияSMS КАК СообщенияSMS
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(СообщенияSMS.Источник) <> &ТипЗаявка
	|				И СообщенияSMS.ДатаОтправки >= &ДатаТек
	|			ИЛИ ТИПЗНАЧЕНИЯ(СообщенияSMS.Источник) = &ТипЗаявка
	|				И СообщенияSMS.ДатаОтправки >= &ДатаТек
	|				И СообщенияSMS.ДатаОтправки <= &ДатаНачалаОтправки)
	|	И СообщенияSMS.Рассылка.Проведен
	|	И СообщенияSMS.СтатусОтправки = &СтатусОтправки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщенияSMS.Рассылка.ДатаОтправки"
	;
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отправка сообщений документа " + Выб.Рассылка + ":");
		РезультатОтправки = ОтправитьНеотправленныеСообщения(Выб.Рассылка,,ОбработкаSMSРассылки);
		Если ЗначениеЗаполнено(РезультатОтправки.СообщениеОбОшибке) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	Ошибка. "	+ РезультатОтправки.СообщениеОбОшибке + ?(РезультатОтправки.ОтправленоСообщений<>0,
						+ " Отправлено " + РезультатОтправки.ОтправленоСообщений + " из " + РезультатОтправки.ОтправлялосьСообщений + " сообщений.",""));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отправлено " + РезультатОтправки.ОтправленоСообщений + " из " + РезультатОтправки.ОтправлялосьСообщений + " сообщений.");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Прочие процедуры работы с сообщениями.

// Сотовый телефон объекта.
//
// Параметры:
//  Объект - СправочникСсылка - обладатель контактной информации.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьСотовыйТелефон(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Клиент
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотовый)";
	Запрос.УстановитьПараметр("Клиент", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерТелефона = Выборка.Представление;
		НомерТелефона = НормализоватьСотовыйТелефон(НомерТелефона);
	Иначе
		НомерТелефона = "";
	КонецЕсли;
		
	Возврат НомерТелефона;
	
КонецФункции

// Нормализует сотовый телефон.
//
// Параметры:
//  ИсходныйНомер - Строка - исходный телефон.
//
// Возвращаемое значение:
//  Строка.
//
Функция НормализоватьСотовыйТелефон(ИсходныйНомер) Экспорт
	
	ТребуемаяПерваяЦифра = "8";
	
	ТелефонЦифры = "";
	
	Для Сч = 1 По СтрДлина(ИсходныйНомер) Цикл
		Символ = Сред(ИсходныйНомер,Сч,1);
		Если ОбщегоНазначенияКлиентСервер.ЭтоЦифра(Символ) Тогда
			ТелефонЦифры = ТелефонЦифры + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(ТелефонЦифры) = 11 Или СтрДлина(ТелефонЦифры) = 10 Тогда
		
		ТелефонЦифры = ТребуемаяПерваяЦифра + Прав(ТелефонЦифры,10);
		
	Иначе
		
		// Неправильный номер
		ТелефонЦифры = "";
		
	КонецЕсли;
	
	Возврат ТелефонЦифры;
	
КонецФункции

// Процедура ОтправитьНеОтправленныеСМС.
//
// Параметры:
//  ТолькоОтправляемыеАвтоматически - Булево - надо ли отправлять неавтоматически отпарвляемые.
//
Процедура ОтправитьНеОтправленныеСМС(ТолькоОтправляемыеАвтоматически = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщенияSMS.Рассылка
	               |ИЗ
	               |	РегистрСведений.СообщенияSMS КАК СообщенияSMS
	               |ГДЕ
	               |	СообщенияSMS.СтатусОтправки = &СтатусОтправки
	               |	И СообщенияSMS.ДатаОтправки >= &ДатаНач
				   |	И СообщенияSMS.ДатаОтправки <= &ДатаКон
	               |	И СообщенияSMS.Рассылка.Проведен
	               |	И НЕ СообщенияSMS.Рассылка.ПометкаУдаления
	               |	И (НЕ &ТолькоОтправляемыеАвтоматически ИЛИ СообщенияSMS.ВидСообщения.ОтправлятьБезПодтверждения)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СообщенияSMS.Рассылка";
	
	МаксимальноеУпреждениеОтправкиСМСОператору = ФормированиеСообщений.ПолучитьМаксимальноеУпреждениеОтправкиСМСОператору();
				   
	Запрос.УстановитьПараметр("СтатусОтправки", Перечисления.СтатусыОтправкиСообщений.НеОтправлено);
	Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата()-2*86400);
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата() + МаксимальноеУпреждениеОтправкиСМСОператору * 3600);
	Запрос.УстановитьПараметр("ТолькоОтправляемыеАвтоматически", ТолькоОтправляемыеАвтоматически);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		РезультатОтправки = ОтправитьНеотправленныеСообщения(Выборка.Рассылка);
		
		Если Не ПустаяСтрока(РезультатОтправки.СообщениеОбОшибке) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтправки.СообщениеОбОшибке);
			
		КонецЕсли;
	
	КонецЦикла;		
	
КонецПроцедуры

Функция ПолучитьРазмерПакетаСообщенийSMS()
	Возврат 50;
КонецФункции
#КонецОбласти