#Область ПрограммныйИнтерфейс

#Область УниверсальноеРегламентноеЗадание

// Добавляет экземпляр регламентного задания УниверсальноеРегламентноеЗадание для целей расширения конфигурации. 
// Если с заданным ключем задание уже существует, то обновляет его.
//
// Параметры:
//  Ключ		 - Строка - Ключ регламентного задания, определяемый расширением конфигурации, например "ОнДок.ВыгрузкаОперативная".
//  Обработчик	 - Строка - Обработчик регламентного задания в формате "ИмяМодуля.ИмяПроцедуры".
//  Наименование - Строка - Наименование регламентного задания.
//  Расписание	 - РасписаниеРегламентногоЗадания, Структура - Структура, со значениями полей расписания регламентного задания как в РасписаниеРегламентногоЗадания.
//
Процедура ДобавитьРегламентноеЗаданиеРасширения(Ключ, Обработчик, Наименование = Неопределено, Расписание = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ключ)
		Или Не ЗначениеЗаполнено(Обработчик)
		Или СтрРазделить(Обработчик, ".", Ложь).Количество() <> 2
	Тогда
		ВызватьИсключение НСтр("ru='Задание не добавлено'");
	КонецЕсли;
	
	РегЗадание = НайтиРегламентноеЗаданиеРасширенияПоКлючу(Ключ);
	
	Если РегЗадание = Неопределено Тогда
		РегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("УниверсальноеРегламентноеЗадание");
	КонецЕсли;
	
	РегЗадание.Наименование	 = ?(ЗначениеЗаполнено(Наименование), Наименование, Ключ);
	РегЗадание.Ключ			 = Ключ;
	РегЗадание.Использование = Истина;
	
	Если Расписание = Неопределено Тогда
		РегЗадание.Расписание.ПериодПовтораДней = 1;
		РегЗадание.Расписание.ВремяНачала = Дата('00010101000005');
		РегЗадание.Расписание.ДатаНачала = ТекущаяДата();
		РегЗадание.Расписание.ДниНедели.Добавить(1);
		РегЗадание.Расписание.ДниНедели.Добавить(2);
		РегЗадание.Расписание.ДниНедели.Добавить(3);
		РегЗадание.Расписание.ДниНедели.Добавить(4);
		РегЗадание.Расписание.ДниНедели.Добавить(5);
		РегЗадание.Расписание.ДниНедели.Добавить(6);
		РегЗадание.Расписание.ДниНедели.Добавить(7);
	Иначе
		ЗаполнитьЗначенияСвойств(РегЗадание.Расписание, Расписание);
	КонецЕсли;
	
	РегЗадание.Параметры.Добавить(Обработчик);
	РегЗадание.Записать();
	
КонецПроцедуры

// Найти по ключу экземпляр регламентного задания УниверсальноеРегламентноеЗадание
//
// Параметры:
//  Ключ - Строка - Ключ регламентного задания
// 
// Возвращаемое значение:
//  РегламентноеЗадание, Неопределено
//
Функция НайтиРегламентноеЗаданиеРасширенияПоКлючу(Ключ) Экспорт
	
	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Ключ", Ключ));
	Если РезультатПоиска.Количество() <> 0 Тогда
		Возврат РезультатПоиска[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Запускает регламентное задание.
//
// Параметры:
//  Задание	 - Строка, Регламентное задание - Ключ регламентного задания, либо регламентное задание
//
Процедура ЗапуститьОбработчикРегламентногоЗаданияРасширения(Задание) Экспорт
	
	Если ТипЗнч(Задание) = Тип("Строка") Тогда // Ключ
		РегЗадание = НайтиРегламентноеЗаданиеРасширенияПоКлючу(Задание);
	КонецЕсли;
	
	Попытка
		ВыполнениеРегламентногоЗаданияРасширения(Задание.Параметры[0]);
	Исключение
		ЗаписьЖурналаРегистрации("Запуск обработчика регламентного задания расширения", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Запустить регламентное задание расширения
//
// Параметры:
//  Задание	 - Строка, РегламентноеЗадание - Ключ регламентного задания, либо экземпляр задания.
//
Процедура ЗапуститьРегламентноеЗаданиеРасширения(Задание) Экспорт
	
	Если ТипЗнч(Задание) = Тип("Строка") Тогда
		РегЗадание = НайтиРегламентноеЗаданиеРасширенияПоКлючу(Задание);
	КонецЕсли;
	
	Попытка
		РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(РегЗадание);
	Исключение
		ЗаписьЖурналаРегистрации("Запуск регламентного задания расширения", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Процедура-обработчик регламентного задания УниверсальноеРегламентноеЗадание.
//
// Параметры:
//  Обработчик	 - Строка - Обработчик регламентного задания в формате "ИмяМодуля.ИмяПроцедуры".
//
Процедура ВыполнениеРегламентногоЗаданияРасширения(Обработчик = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ВызватьИсключение НСтр("ru='Ошибка при запуске обработчика регламентного задания расширения'") + ": " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		ВызватьИсключение НСтр("ru='Не задан параметр расширения, указывающий на процедуру-обработчик. Необходима повторная инициализация реглмантного задания расширением.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти