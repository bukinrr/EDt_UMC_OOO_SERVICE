///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. функцию ДобавитьПрисоединенныйФайл в модуле РаботаСФайлами.
Функция ДобавитьФайл(ПараметрыФайла,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "") Экспорт
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		АдресФайлаВоВременномХранилище,
		АдресВременногоХранилищаТекста,
		Описание);
	
КонецФункции

// Записывает кодировку версии файла.
//
// Параметры:
// ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
// Кодировка - Строка - новая кодировка версии файла.
//
Процедура ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.Кодировка = Кодировка;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ПодсчитатьРазмерФайловНаТоме(Том) Экспорт
	
	ОбъемТома = 0;
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат ОбъемТома;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ВсеИменаСправочников = Новый Соответствие;
	ТипыПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Версии.Размер), 0) КАК РазмерФайлов
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Том = &Том";
	
	Для Каждого Тип Из ТипыПрисоединенныхФайлов Цикл
		
		Если Тип = Тип("СправочникСсылка.ВерсииФайлов")
			Или Тип = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			
			Продолжить;
		КонецЕсли;
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеСправочника.Реквизиты.Найти("ТекущаяВерсия") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаПоСправочнику = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПрисоединенныеФайлы.Размер), 0)
		|ИЗ
		|	&ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.Том = &Том";
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + СтрЗаменить(ТекстЗапросаПоСправочнику, "&ИмяСправочника",
			Метаданные.НайтиПоТипу(Тип).ПолноеИмя());
		
	КонецЦикла;
	
	Запрос.Параметры.Вставить("Том", Том);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъемТома = ОбъемТома + Выборка.РазмерФайлов;
	КонецЦикла;
			
	Возврат ОбъемТома;
	
КонецФункции

// Выполняет ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку.
// Параметры:
// ВерсияСсылка - версия файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Строка  - навигационная ссылка во временном хранилище.
//
Функция ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылка, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(ВерсияСсылка));
	
КонецФункции

// Возвращает структуру, содержащую различные сведения о файле и версии.
//
// Параметры:
//  ФайлИлиВерсияСсылка  - СправочникСсылка.Файлы
//                       - СправочникСсылка.ВерсииФайлов - файл или версия файла.
//
// Возвращаемое значение:
//   Структура:
//     * Ссылка - ОпределяемыйТип.ПрисоединенныйФайл
//     * Версия - СправочникСсылка.ВерсииФайлов
//     * Расширение - Строка
//
Функция ДанныеФайла(ФайлСсылка, ВерсияСсылка = Неопределено, ИдентификаторФормы = Неопределено, Знач ВызыватьИсключение = Истина) Экспорт
	Возврат Неопределено;
КонецФункции

// Возвращает сведения о файле и версии.
// 
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов
//  ИдентификаторФормы - УникальныйИдентификатор
//  РабочийКаталогВладельца - Строка
//  ПредыдущийАдресФайла - Строка
// 
// Возвращаемое значение:
//   см. ДанныеФайла
//
Функция ДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы = Неопределено,
	РабочийКаталогВладельца = Неопределено, ПредыдущийАдресФайла = Неопределено) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ЭтоЭлементРаботаСФайлами(ЭлементДанных) Экспорт
	Возврат РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ЭлементДанных); 
КонецФункции

Функция НовыйТабличныйДокументНаСервере(КоличествоСтраниц) Экспорт
	ТабличныйДокумент =Новый ТабличныйДокумент;
	ПустаяОбласть = ТабличныйДокумент.ПолучитьОбласть(1,1,1,1);
	Для ИндексОбъекта = 1 По КоличествоСтраниц Цикл
		ТабличныйДокумент.Вывести(ПустаяОбласть);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	Возврат ТабличныйДокумент;
КонецФункции  

Функция КонвертироватьНастройкиСканирования(ВходящиеНастройки) Экспорт
	НастройкиСканирования = Новый Структура("Разрешение, Цветность, Поворот, РазмерБумаги, СжатиеTIFF");
	Результат = Новый Структура("Разрешение, Цветность, Поворот, РазмерБумаги, СжатиеTIFF");
	
	ЗаполнитьЗначенияСвойств(НастройкиСканирования, ВходящиеНастройки);
	
	Результат.Разрешение = -1;
	Если НастройкиСканирования.Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi200 Тогда
		Результат.Разрешение = 200; 
	ИначеЕсли НастройкиСканирования.Разрешение  = Перечисления.РазрешенияСканированногоИзображения.dpi300 Тогда
		Результат.Разрешение = 300;
	ИначеЕсли НастройкиСканирования.Разрешение  = Перечисления.РазрешенияСканированногоИзображения.dpi600 Тогда
		Результат.Разрешение = 600;
	ИначеЕсли НастройкиСканирования.Разрешение  = Перечисления.РазрешенияСканированногоИзображения.dpi1200 Тогда
		Результат.Разрешение = 1200;
	КонецЕсли;
	
	Результат.Цветность = -1;
	Если НастройкиСканирования.Цветность = Перечисления.ЦветностиИзображения.Монохромное Тогда
		Результат.Цветность = 0;
	ИначеЕсли НастройкиСканирования.Цветность = Перечисления.ЦветностиИзображения.ГрадацииСерого Тогда
		Результат.Цветность = 1;
	ИначеЕсли НастройкиСканирования.Цветность = Перечисления.ЦветностиИзображения.Цветное Тогда
		Результат.Цветность = 2;
	КонецЕсли;
	
	Результат.Поворот = 0;
	Если НастройкиСканирования.Поворот = Перечисления.СпособыПоворотаИзображения.НетПоворота Тогда
		Результат.Поворот = 0;
	ИначеЕсли НастройкиСканирования.Поворот  = Перечисления.СпособыПоворотаИзображения.ВправоНа90 Тогда
		Результат.Поворот = 90;
	ИначеЕсли НастройкиСканирования.Поворот  = Перечисления.СпособыПоворотаИзображения.ВправоНа180 Тогда
		Результат.Поворот = 180;
	ИначеЕсли НастройкиСканирования.Поворот  = Перечисления.СпособыПоворотаИзображения.ВлевоНа90 Тогда
		Результат.Поворот = 270;
	КонецЕсли;
	
	Результат.РазмерБумаги = 0;
	Если НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.НеЗадано Тогда
		Результат.РазмерБумаги = 0;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.A3 Тогда
		Результат.РазмерБумаги = 11;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.A4 Тогда
		Результат.РазмерБумаги = 1;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.A5 Тогда
		Результат.РазмерБумаги = 5;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.B4 Тогда
		Результат.РазмерБумаги = 6;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.B5 Тогда
		Результат.РазмерБумаги = 2;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.B6 Тогда
		Результат.РазмерБумаги = 7;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.C4 Тогда
		Результат.РазмерБумаги = 14;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.C5 Тогда
		Результат.РазмерБумаги = 15;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.C6 Тогда
		Результат.РазмерБумаги = 16;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.USLetter Тогда
		Результат.РазмерБумаги = 3;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.USLegal Тогда
		Результат.РазмерБумаги = 4;
	ИначеЕсли НастройкиСканирования.РазмерБумаги = Перечисления.РазмерыБумаги.USExecutive Тогда
		Результат.РазмерБумаги = 10;
	КонецЕсли;
	
	Результат.СжатиеTIFF = 6; // БезСжатия
	Если НастройкиСканирования.СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.LZW Тогда
		Результат.СжатиеTIFF = 2;
	ИначеЕсли НастройкиСканирования.СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.RLE Тогда
		Результат.СжатиеTIFF = 5;
	ИначеЕсли НастройкиСканирования.СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.БезСжатия Тогда
		Результат.СжатиеTIFF = 6;
	ИначеЕсли НастройкиСканирования.СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.CCITT3 Тогда
		Результат.СжатиеTIFF = 3;
	ИначеЕсли НастройкиСканирования.СжатиеTIFF = Перечисления.ВариантыСжатияTIFF.CCITT4 Тогда
		Результат.СжатиеTIFF = 4;
	КонецЕсли;
	
	Возврат  Результат;
	
КонецФункции

Функция ПараметрыСканирования(Заполнить = Ложь, ИдентификаторКлиента = Неопределено) Экспорт
	ПараметрыСканирования = Новый Структура; 
	ПараметрыСканирования.Вставить("ПоказыватьДиалог", Истина);
	ПараметрыСканирования.Вставить("ВыбранноеУстройство", "");
	ПараметрыСканирования.Вставить("ФорматКартинки", "png");
	ПараметрыСканирования.Вставить("Разрешение", 200);
	ПараметрыСканирования.Вставить("Цветность", 1);
	ПараметрыСканирования.Вставить("Поворот", 0);
	ПараметрыСканирования.Вставить("РазмерБумаги", 1);
	ПараметрыСканирования.Вставить("КачествоJPG", 100);
	ПараметрыСканирования.Вставить("СжатиеTIFF", 6);
	ПараметрыСканирования.Вставить("ДвустороннееСканирование", Ложь);
	ПараметрыСканирования.Вставить("СохранятьВPDF", Ложь);
	ПараметрыСканирования.Вставить("ИспользоватьImageMagickДляПреобразованияВPDF", Ложь);
	
	Если Заполнить И ИдентификаторКлиента <> Неопределено Тогда
		НастройкиСканированияПользователя = РаботаСФайлами.ПолучитьНастройкиСканированияПользователя(ИдентификаторКлиента);
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, НастройкиСканированияПользователя);
	КонецЕсли;
	
	Возврат ПараметрыСканирования;
КонецФункции

//+бит
Функция ПараметрыСканированияПоТекущемуРабочемуМесту(Заполнить = Ложь) Экспорт
	
	РабочееМестоКлиента = ПараметрыСеанса.РабочееМестоКлиента;
	Возврат ПараметрыСканирования(Заполнить, РабочееМестоКлиента); 
	
КонецФункции
//-бит

Функция ПолучитьНастройкиСканированияПользователя(Знач ИдентификаторКлиента) Экспорт
	//+бит
	// Используем рабочее место клиента
	Если ИдентификаторКлиента = Неопределено Тогда
		ИдентификаторКлиента = ПараметрыСеанса.РабочееМестоКлиента;
	КонецЕсли;
	//-бит
	Возврат РаботаСФайлами.ПолучитьНастройкиСканированияПользователя(ИдентификаторКлиента);
КонецФункции

Процедура СохранитьНастройкиСканированияПользователя(НастройкиСканированияКлиента, ИдентификаторКлиента) Экспорт
	РаботаСФайлами.СохранитьНастройкиСканированияПользователя(НастройкиСканированияКлиента, ИдентификаторКлиента);
КонецПроцедуры

Функция ОбъединитьИзображенияВTifФайл(Изображения) Экспорт
	ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Изображения, ФорматКартинки.TIFF);
	Возврат ОбрабатываемаяКартинка.ПолучитьКартинку();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
Процедура ПроверитьПодписи(ИсходныеДанные, ДанныеСтрок) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	МенеджерКриптографии = МодульЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи");
	
	Для Каждого СтрокаПодписи Из ДанныеСтрок Цикл
		ОписаниеОшибки = "";
		
		// +БИТ
		Если ТипЗнч(СтрокаПодписи) = Тип("Структура") И СтрокаПодписи.Свойство("ДвоичныеДанныеЭМД") Тогда
			ИсходныеДанныеДляПроверки = СтрокаПодписи.ДвоичныеДанныеЭМД;
		ИначеЕсли ТипЗнч(СтрокаПодписи) = Тип("Структура") И СтрокаПодписи.Свойство("ДвоичныеДанныеФайлов") Тогда
			ИсходныеДанныеДляПроверки = СтрокаПодписи.ДвоичныеДанныеФайлов;
		Иначе
			ИсходныеДанныеДляПроверки = ИсходныеДанные;
		КонецЕсли;
		
		ПодписьВерна = МодульЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
			ИсходныеДанныеДляПроверки, СтрокаПодписи.АдресПодписи, ОписаниеОшибки, СтрокаПодписи.ДатаПодписи);
		//ПодписьВерна = МодульЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
		//	ИсходныеДанные, СтрокаПодписи.АдресПодписи, ОписаниеОшибки, СтрокаПодписи.ДатаПодписи);
		// -БИТ
		
		СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаПодписи.ПодписьВерна   = ПодписьВерна;
		СтрокаПодписи.ОписаниеОшибки = ОписаниеОшибки;
		
		// +БИТ
		СтрокаПодписи.ТекстОшибкиПроверкиПодписи = ОписаниеОшибки;
		
		ЭП = бит_СертификатыЭЦП.ПолучитьЭлектроннуюПодпись(СтрокаПодписи.Объект,,, СтрокаПодписи.УникальныйИдентификатор);
		Если ЭП <> Неопределено Тогда
			ЭП.ДатаПроверкиПодписи = СтрокаПодписи.ДатаПроверкиПодписи;
			ЭП.ПодписьВерна = СтрокаПодписи.ПодписьВерна;
			ЭП.ТекстОшибкиПроверкиПодписи = СтрокаПодписи.ТекстОшибкиПроверкиПодписи;
			ЭП.Записать();
		КонецЕсли;
		// -БИТ
		
		РаботаСФайламиСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(СтрокаПодписи);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет путь к рабочему каталогу пользователя в настройках.
//
// Параметры:
//  ИмяКаталога - Строка - имя каталога.
//
Процедура УстановитьРабочийКаталогПользователя(ИмяКаталога) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов", ИмяКаталога,,, Истина);
	
КонецПроцедуры

Функция ЭтоСправочникФайлы(ВладелецФайлов) Экспорт
	
	Возврат РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов) = "Файлы";
	
КонецФункции

#КонецОбласти
