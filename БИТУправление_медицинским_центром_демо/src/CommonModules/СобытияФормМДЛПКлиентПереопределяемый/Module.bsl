
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Возникает на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма записываемого объекта,
//  Отказ - Булево - признак отказа от записи,
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	
	
КонецПроцедуры

// Вызывается во всех созданных формах при вызове метода Оповестить.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - оповещаемая форма,
//  ИмяСобытия - Строка - имя события,
//  Параметр - Произвольный - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник - Произвольный - источник события.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	// +бит	

	Строка = Новый Структура;
	Строка.Вставить("Номенклатура"    , ТекущаяСтрока.Номенклатура);
	Строка.Вставить("ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмерения);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), ВРег("ПотребительскаяУпаковка"));
	Если ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус Тогда
		Строка.Вставить("СерияНоменклатуры", ТекущаяСтрока.Серия);
		СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.Серия);
	КонецЕсли;
	
	// ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(Строка, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
	Если Строка.Свойство("СерияНоменклатуры") Тогда
		ТекущаяСтрока.Серия = Строка.СерияНоменклатуры;
	КонецЕсли;
	// Конец
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		//ТекущаяСтрока.GTIN = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока.Номенклатура, "GTIN");
		НаборGTIN = ИнтеграцияМДЛПВызовСервера_БИТ.ПолучитьGTIN(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Серия);
		Если НаборGTIN.Количество() = 1 Тогда
			ТекущаяСтрока.GTIN = НаборGTIN[0];
			//Сообщить(НСтр("ru = 'Обнаружен лишь один GTIN для данной пары Номенклатуры и Серии!';"));
		ИначеЕсли НаборGTIN.Количество() > 1 Тогда
			ТекущаяСтрока.GTIN = НаборGTIN[0];
			Сообщить(НСтр("ru = 'Обнаружено несколько различных GTIN для данной пары Номенклатуры и Серии!';"));
			Для Каждого СтрокаGTIN Из НаборGTIN Цикл
				Сообщить(СтрокаGTIN);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//ТекущаяСтрока.ЕдиницаИзмерения = Ценообразование.ПолучитьЕдиницуПродажиНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ЕдиницаИзмерения);
	ТекущаяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока.Номенклатура, "Упаковка"); 
	
	// -бит
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	
	
КонецПроцедуры

// Выполняет действия при изменении серии в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииСерии(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	
	
КонецПроцедуры

// Выполняет действия при изменении упаковки в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	
	
КонецПроцедуры

// Выполняет действия при изменении количества упаковок в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	// +бит
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	Если ПараметрыЗаполнения.ПересчитатьЦену Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ?(ТекущаяСтрока.КоличествоУпаковок = 0, 1, ТекущаяСтрока.КоличествоУпаковок);
	КонецЕсли;
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	// -бит	
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	// +бит
	Если ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
	КонецЕсли;
	Если ПараметрыЗаполнения.ПересчитатьЦену Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ?(ТекущаяСтрока.КоличествоУпаковок = 0, 1, ТекущаяСтрока.КоличествоУпаковок);
	КонецЕсли;
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	// -бит
	
	
КонецПроцедуры

// Выполняет действия при изменении цены в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииЦены(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	// +бит	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
	КонецЕсли;	
	// -бит
	
КонецПроцедуры

// Выполняет действия при изменении суммы в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииСуммы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	// +бит
	Если ПараметрыЗаполнения.ПересчитатьЦену Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ?(ТекущаяСтрока.Количество = 0, 1, ТекущаяСтрока.Количество);
	КонецЕсли;	
	// -бит
	
КонецПроцедуры

// Выполняет действия при начале выбора номенклатуры в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Характеристика,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораНоменклатуры(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	// +бит
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбораНоменклатуры = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидНоменклатуры", ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал"));
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.GTIN) Тогда
		ДопустимыеGTIN = Новый СписокЗначений;
		ДопустимыеGTIN.Добавить("");
		ДопустимыеGTIN.Добавить(ТекущаяСтрока.GTIN);
		
		Отбор.Вставить("GTIN", ДопустимыеGTIN);
	КонецЕсли;
	
	ПараметрыФормыВыбораНоменклатуры.Вставить("Отбор"               , Отбор);
	ПараметрыФормыВыбораНоменклатуры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормыВыбораНоменклатуры.Вставить("ТекущаяСтрока"       , ТекущаяСтрока.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормыВыбораНоменклатуры, Элемент);
	// -бит	
	
КонецПроцедуры

// Выполняет действия при начале выбора характеристики в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Характеристика,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораХарактеристики(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	//+бит
	Если Не ТекущаяСтрока.Свойство("Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	мПараметрыВыбора = Новый Массив();
	мПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ТекущаяСтрока.Номенклатура));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(мПараметрыВыбора);
	//-бит
	
КонецПроцедуры

// Выполняет действия при начале выбора серии в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров;
//  ПараметрыУказанияСерий - Структура - параметры указания серий, возвращаемые соответствующей
//         процедурой модуля менеджера документа;
//  Элемент - ПолеВвода - элемент формы Характеристика;
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора;
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораСерии(ЭтотОбъект, ТекущаяСтрока, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	//+бит
	Если Не ТекущаяСтрока.Свойство("Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	мПараметрыВыбора = Новый Массив();
	мПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ТекущаяСтрока.Номенклатура));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(мПараметрыВыбора);
	//-бит
	
КонецПроцедуры

// Выполняет действия при начале выбора упаковки в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Упаковка,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораУпаковки(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик переопределяемой команды формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта справочника или документа,
//  Команда - КомандаФормы - команда формы.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда) Экспорт
	
	
	
КонецПроцедуры

// Открывает форму создания нового документа поступления товаров на основании уведомления о приемке.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда создания документа. Для автоматической подстановки
//         создаваемого документа в поле "Основание", форма должна быть передана в качестве владельца открываемой формы;
//  Ссылка - ДокументСсылка.Уведомление - ссылка на уведомление о поступлении.
//
Процедура ОткрытьФормуСозданияДокументаПоступленияТоваровНаОсновании(Форма, Ссылка) Экспорт
	
	// +бит
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", Новый Структура("Основание", Ссылка), Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	// -бит
	
КонецПроцедуры

// Открывает форму выбора документа поступления товаров.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда выбора документа;
//  Объект - ДокументОбъект.Уведомление - уведомление для которого подбирается поступление;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора;
//
Процедура ОткрытьФормуВыбораДокументаПоступлениеТоваров(Форма, Объект, ОповещениеПриЗавершении) Экспорт
	
	// +бит
	Если ИнтеграцияМДЛПМедицинаКлиент_БИТ.ЭтоСсылкаИлиОбъектФормы(Объект, Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП")) Тогда
		ИнтеграцияМДЛПМедицинаКлиент_БИТ.ВыбратьДокументПоступления(Форма, Объект, ОповещениеПриЗавершении);
	ИначеЕсли ИнтеграцияМДЛПМедицинаКлиент_БИТ.ЭтоСсылкаИлиОбъектФормы(Объект, Тип("ДокументСсылка.УведомлениеОбОприходованииМДЛП")) Тогда
		ИнтеграцияМДЛПМедицинаКлиент_БИТ.ВыбратьДокументПоступленияДляОприходования(Форма, Объект, ОповещениеПриЗавершении);
	ИначеЕсли ИнтеграцияМДЛПМедицинаКлиент_БИТ.ЭтоСсылкаИлиОбъектФормы(Объект, Тип("ДокументСсылка.УведомлениеОПеремещенииМДЛП")) Тогда
		ИнтеграцияМДЛПМедицинаКлиент_БИТ.ВыбратьДокументПоступленияДляПеремещения(Форма, Объект, ОповещениеПриЗавершении);
	КонецЕсли;
	// Конец БольничнаяАптека

	// -бит	
	
КонецПроцедуры

// Открывает форму выбора документа выбытия товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда выбора документа;
//  Объект - ДокументОбъект.Уведомление - уведомление для которого подбирается документ выбытия;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора;
//
Процедура ОткрытьФормуВыбораДокументаВыбытияТоваров(Форма, Объект, ОповещениеПриЗавершении) Экспорт
	
	
	
КонецПроцедуры

// Открывает форму создания нового документа инвентаризация товаров на основании инвентаризации МДЛП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда создания документа. Для автоматической подстановки
//         создаваемого документа в поле "Основание", форма должна быть передана в качестве владельца открываемой формы;
//  Ссылка - ДокументСсылка - ссылка на документ МДЛП.
//
Процедура ОткрытьФормуСозданияДокументаИнвентаризацияТоваровНаОсновании(Форма, Ссылка) Экспорт
	
	
	
КонецПроцедуры

// Открывает форму выбора документа инвентаризация товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда выбора документа;
//  Объект - ДокументОбъект - документ-объект МДЛП для которого подбирается инвентаризация;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора;
//
Процедура ОткрытьФормуВыбораДокументаИнвентаризацияТоваров(Форма, Объект, ОповещениеПриЗавершении) Экспорт
	
	
	
КонецПроцедуры

// Открывает форму создания нового документа инвентаризационная опись товаров на основании инвентаризации МДЛП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда создания документа. Для автоматической подстановки
//         создаваемого документа в поле "Основание", форма должна быть передана в качестве владельца открываемой формы;
//  Ссылка - ДокументСсылка - ссылка на документ МДЛП.
//
Процедура ОткрытьФормуСозданияДокументаИнвентаризационнаяОписьТоваровНаОсновании(Форма, Ссылка) Экспорт
	
	
	
КонецПроцедуры

// Открывает форму выбора документа инвентаризационная опись товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда выбора документа;
//  Объект - ДокументОбъект - документ-объект МДЛП для которого подбирается инвентаризационная опись;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора;
//
Процедура ОткрытьФормуВыбораДокументаИнвентаризационнаяОписьТоваров(Форма, Объект, ОповещениеПриЗавершении) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеНоменклатуры

// В функции нужно реализовать подготовку данных для дальнейшей обработки штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка,
//  ДанныеШтрихкодовПоТипам - Структура
//     * НомераКиЗ - Массив - разобранные данные штрихкодов вторичных упаковок;
//     * НомераТранспортныхУпаковок - Массив - разобранные данные штрихкодов транспортных упаковок;
//     * НеизвестныеШтрихкоды - Массив - полученные данные прочих штрихкодов.
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ,
//  ПараметрыЗаполнения - Структура - параметры заполнения (см. ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти()).
//  ОтборСтрок - Структура - отбор строк списков товары и транспортные упаковки, для заполения по штрихкодам.
//
// Возвращаемое значение:
//  Структура - подготовленные данные.
//
Функция ПодготовитьДанныеДляОбработкиШтрихкодов(Форма, ДанныеШтрихкодовПоТипам, КэшированныеЗначения, ПараметрыЗаполнения, ОтборСтрок = Неопределено) Экспорт
	
	// +бит
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(Новый Массив, ПараметрыЗаполнения, ПараметрыЗаполнения);
	
	ПараметрыДействия.Штрихкоды = ДанныеШтрихкодовПоТипам.НомераКиЗ;
	ПараметрыДействия.НеизвестныеШтрихкоды = ОбработкаТабличнойЧастиКлиент.ПодготовитьВходящиеШтирхкодыДляОбработки(ДанныеШтрихкодовПоТипам.НеизвестныеШтрихкоды);
	
	ДанныеШтрихкодовПоТипам.НомераКиЗ = Новый Массив;
	ДанныеШтрихкодовПоТипам.НеизвестныеШтрихкоды = Новый Массив;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")Тогда
		ИсключаемыеТипы = Новый Массив;
		ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УдалитьЗапросСоставаУпаковкиМДЛП"));
		ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП"));
		ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОбОтгрузкеМДЛП"));
		ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП"));
		Если ИсключаемыеТипы.Найти(ТипЗнч(Форма.Объект.Ссылка)) = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыДействия.НеизвестныеШтрихкоды, ДанныеШтрихкодовПоТипам.НомераТранспортныхУпаковок);
			ДанныеШтрихкодовПоТипам.НомераТранспортныхУпаковок.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	// -бит
	
	
КонецФункции

// Вызывается после загрузки данных по штрихкодам.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой были обработаны штрихкоды,
//  ОбработанныеДанные - Структура - подготовленные ранее данные штрихкодов,
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ.
//
Процедура ПослеОбработкиШтрихкодов(Форма, ОбработанныеДанные, КэшированныеЗначения) Экспорт
	
	// +бит
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ОбработанныеДанные);
	// -бит
	
КонецПроцедуры

// Требуется реализовать получение данных связанной номенклатуры.
//
// Параметры:
//  Данные - Структура - 
//    * Штрихкод - Строка - представление исходного штрихкода;
//    * GTIN - Строка - код товара;
//    * SGTIN - Строка - уникальный код упаковки;
// 
// Возвращаемое значение:
//   - Структура
//      * Номенклатура
//      * Характеристика
//      * Упаковка
//
Функция ПолучитьДанныеНоменклатурыПоКиЗ(Данные) Экспорт
	
	
	
КонецФункции

#КонецОбласти

#Область ЗапросИнформацииОбУпаковках

// В процедуре можно переопределить стандартный алгоритм запроса информации о потребительских упаковках для документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка.
//  ПараметрыПодключения - Структура - параметры подключения к ИС "Маркировка.МДЛП".
//  НомераУпаковок - Массив - запрашиваемые номера упаковок.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ЗапроситьИнформациюОПотребительскихУпаковках(Форма, ПараметрыПодключения, НомераУпаковок, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// В процедуре можно переопределить стандартный алгоритм обработки получения информации о потребительских упаковках для документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка.
//  Результат - Структура - результат функции ТранспортМДЛПАПИКлиентСервер.ПолучитьИнформациюОПотребительскихУпаковках.
//  Контекст - Структура - дополнительные параметры, переданные из функции ЗапроситьИнформациюОПотребительскихУпаковках формы документа.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработатьПолучениеИнформацииОПотребительскихУпаковках(Форма, Результат, Контекст, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// В процедуре можно переопределить стандартный алгоритм запроса информации о транспортных упаковках для документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка.
//  ПараметрыПодключения - Структура - параметры подключения к ИС "Маркировка.МДЛП".
//  НомераУпаковок - Массив - запрашиваемые номера упаковок.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ЗапроситьИнформациюОТранспортныхУпаковках(Форма, ПараметрыПодключения, НомераУпаковок, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// В процедуре можно переопределить стандартный алгоритм обработки получения информации о транспортных упаковках для документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка.
//  Результат - Структура - результат функции ТранспортМДЛПАПИКлиентСервер.ПолучитьИнформациюОТранспортныхУпаковках.
//  Контекст - Структура - дополнительные параметры, переданные из функции ЗапроситьИнформациюОПотребительскихУпаковках формы документа.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработатьПолучениеИнформацииОТранспортныхУпаковках(Форма, Результат, Контекст, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область бит
// Показывает оповещение пользователя об окончании заполнения серий
//
// Параметры:
//  Результат - Структура - см. ИнтеграцияМДЛП.РезультатЗаполненияСерий
//
Процедура ОповеститьОбОкончанииСозданияШтрихкодовВДокументе(Результат) Экспорт
	
	ОчиститьСообщения();
	
	Если Результат.ЕстьЗаполненныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Штрихкоды созданы'"),
			,
			НСтр("ru = 'Штрихкоды созданы'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Штрихкоды не созданы'"),
			,
			НСтр("ru = 'Не заполнены ключевые поля для создания штрихкодов или штрихкоды были уже созданы ранее'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Результат.Ошибки);
	
КонецПроцедуры
#КонецОбласти
