#Область ПрограммныйИнтерфейс

// Получить ставку НДС как число.
//
// Параметры:
//  СтавкаНДС			 - ПеречислениеСсылка.СтавкиНДС 	 - ставка.
//  ПрименяютсяСтавки4и2 - Булево	 - применение ставок 10 и 18.
// 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС, ПрименяютсяСтавки4и2 = Ложь) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Ставка = ?(ПрименяютсяСтавки4и2, 2, 10);
		Возврат Ставка;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Ставка = ?(ПрименяютсяСтавки4и2, 4, 18);
		Возврат Ставка;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Ставка = 0;
		Возврат Ставка;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Ставка = "";
		Возврат Ставка;
	КонецЕсли;

	Возврат 0;

КонецФункции

// Определяет продажи, соответствующие отбору по ЕНВД, Патенту в настройке печати чека.
//
// Параметры:
//  ТаблицаПродажДокумента	 - ТаблицаЗначений				 - таблица продаж.
//  НастройкаСсылка			 - СправочникСсылка.НастройкиПечатиЧеков - настройка формирования чеков.
//  Дата					 - Дата									 - дата.
//  ВидОтбора				 - Строка								 - отбор.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьПродажиСоответствующиеОтбору(ТаблицаПродажДокумента, НастройкаСсылка, Дата = Неопределено, ВидОтбора = "ОтборЕНВД") Экспорт
	
	Если ВидОтбора = "ОтборЕНВД" Тогда  	
		Отбор = НастройкаСсылка.ХранилищеОтбор.Получить();
	ИначеЕсли ВидОтбора = "ОтборПатент" Тогда 
		Отбор = НастройкаСсылка.ХранилищеОтборПатент.Получить();
	КонецЕсли;
	                                                 
	// Загрузка настроек
	СхемаКомпоновкиДанных = Справочники.НастройкиПечатиЧеков.ПолучитьМакетВыполненияОтбора();
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если Отбор <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Отбор);
	КонецЕсли;
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьПустуюСтруктуруНастроек();
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	СтруктураНастроек.ИсходныеДанные 	  = ТаблицаПродажДокумента;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "МакетВыполненияОтбора";
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = ОбщегоНазначенияСервер.ПодготовитьСтруктуруДанных(СтруктураНастроек, СхемаКомпоновкиДанных);
	Возврат СтруктураРезультата.ТаблицаРезультат;
	
КонецФункции

// Получает таблицу продаваемой номенклатуры документа, соответствующей отбору для дополнительной СНО
// в настройке печати чеков филиала.  
//
// Параметры:
//  ТаблицаПродажДокумента	 - Таблица значений	 						- таблица продаваемой номенклатуры документа.
//  НастройкаСсылка			 - СправочникСсылка.НастройкиПечатиЧеков	- настройка печати чеков филиала документа.
//  Дата					 - Дата	 									- дата документа.
//  ВидОтбора				 - Строка	 								- вид отбора номенклатуры для доп. СНО в настройке печати чеков филиала.
//                                                                      - Значения: "ОтборЕНВД", "ОтборПатент".  
// 
// Возвращаемое значение:
//   Таблица значений, Неопределено - если не получена таблица значений, но Неопределено.
//
Функция ПолучитьПродажиПоДополнительнойСНО(ТаблицаПродажДокумента, НастройкаСсылка, Дата, ВидОтбора = "ОтборЕНВД") Экспорт 
		
	Если НастройкаСсылка.ЕстьУчетПоЕНВД Тогда 
		ТаблицаПродажПрименениеЕНВД = ПолучитьПродажиСоответствующиеОтбору(ТаблицаПродажДокумента, НастройкаСсылка, Дата, "ОтборЕНВД");
		Если ВидОтбора = "ОтборЕНВД" Тогда
			Возврат ТаблицаПродажПрименениеЕНВД; 
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОтбора = "ОтборПатент" Тогда 
		ТаблицаПродажПрименениеПатент = ПолучитьПродажиСоответствующиеОтбору(ТаблицаПродажДокумента, НастройкаСсылка, Дата, "ОтборПатент");
		
		// Если номенклатура уже входит в отбор по ЕНВД, тогда для патента ее не применяем.
		// Отбор по ЕНВД имеет преимущество над отбором по патенту.
		Если ТаблицаПродажПрименениеПатент.Количество() > 0 
			И ТаблицаПродажПрименениеЕНВД <> Неопределено
			И ТаблицаПродажПрименениеЕНВД.Количество() > 0 Тогда
			МассивУдаляемыхСтрокПатент = Новый Массив;
			Для Каждого СтрокаЕНВД Из ТаблицаПродажПрименениеЕНВД Цикл
				МассивСтрокиПатент = ТаблицаПродажПрименениеПатент.НайтиСтроки(Новый Структура("Номенклатура", СтрокаЕНВД.Номенклатура));
				Если МассивСтрокиПатент.Количество() > 0 Тогда 
					Для Каждого СтрокаПатент Из МассивСтрокиПатент Цикл
						МассивУдаляемыхСтрокПатент.Добавить(СтрокаПатент);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если МассивУдаляемыхСтрокПатент.Количество() > 0 Тогда 
				Для Каждого УдаляемаяСтрокПатент Из МассивУдаляемыхСтрокПатент Цикл
					ТаблицаПродажПрименениеПатент.Удалить(УдаляемаяСтрокПатент);
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат ТаблицаПродажПрименениеПатент; 
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Для документа чека формирует таблицу с информацией об использовании ЕНВД и патента его номенклатурой.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - документ чека.
//  НастройкаПечатиЧеков - СправочникСсылка.НастройкиПечатиЧеков - настройка формирования чеков.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ЗаполнитьПризнакЕНВДПатентДляНоменклатуры(Знач Объект, НастройкаПечатиЧеков) Экспорт
		
	ТаблицаПродаж = Новый ТаблицаЗначений;
	ТаблицаПродаж.Колонки.Добавить("Номенклатура");
	ТаблицаПродаж.Колонки.Добавить("ВидНоменклатуры");
	ТаблицаПродаж.Колонки.Добавить("ИмяТЧ");
	ТаблицаПродаж.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Для Каждого стрТЧ Из Объект.КредитныеДанные Цикл
		
		новСтр = ТаблицаПродаж.Добавить();
		новСтр.НомерСтроки		= стрТЧ.НомерСтроки;
		новСтр.Номенклатура		= стрТЧ.Номенклатура;
		новСтр.ВидНоменклатуры	= новСтр.Номенклатура.ВидНоменклатуры;
		новСтр.ИмяТЧ			= "Работы";
		
	КонецЦикла;
	
	ДатаОтбора = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		
	Если НастройкаПечатиЧеков.ЕстьУчетПоЕНВД Тогда
		ТаблицаПродажПрименениеЕНВД = РаботаСНДССервер.ПолучитьПродажиСоответствующиеОтбору(ТаблицаПродаж, НастройкаПечатиЧеков, ДатаОтбора, "ОтборЕНВД");
	КонецЕсли;
	
	Если НастройкаПечатиЧеков.ЕстьУчетПоПатенту Тогда
		ТаблицаПродажПрименениеПатент = РаботаСНДССервер.ПолучитьПродажиСоответствующиеОтбору(ТаблицаПродаж, НастройкаПечатиЧеков, ДатаОтбора, "ОтборПатент");
	КонецЕсли;
	
	ТаблицаПродажОбщая = ТаблицаПродаж.Скопировать();
	ТаблицаПродажОбщая.Колонки.Добавить("ЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаПродажОбщая.Колонки.Добавить("Патент", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаПродаж Из ТаблицаПродажОбщая Цикл
		Если ТаблицаПродажПрименениеЕНВД <> Неопределено 
			И ТаблицаПродажПрименениеЕНВД.Количество() > 0 Тогда 
			Если ТаблицаПродажПрименениеЕНВД.Найти(СтрокаПродаж.Номенклатура) <> Неопределено Тогда 
				СтрокаПродаж.ЕНВД = Истина;
				// Если номенклатура уже входит в отбор по ЕНВД, тогда для патента ее не применяем.
				// Отбор по ЕНВД имеет преимущество над отбором по патенту.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ТаблицаПродажПрименениеПатент <> Неопределено 
			И ТаблицаПродажПрименениеПатент.Количество() > 0 Тогда 
			Если ТаблицаПродажПрименениеПатент.Найти(СтрокаПродаж.Номенклатура) <> Неопределено Тогда 
				СтрокаПродаж.Патент = Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПродажОбщая);
	
КонецФункции

// Создает документы для отражения оплаты нескольких СНО.
//
// Параметры:
//  ОбъектФормы	 - ДанныеФормыСтруктура	 - 
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПлатежныйДокументРаспределитьНоменклатуруПоРазнымСНО(Знач ОбъектФормы) Экспорт
	
	ДокументОбъект = ДанныеФормыВЗначение(ОбъектФормы, ТипЗнч(Документы[ОбъектФормы.Ссылка.Метаданные().Имя].СоздатьДокумент()));
	КредитныеДанные = ОбъектФормы.КредитныеДанные;
	КэшКредитныеДанные = КредитныеДанные.Выгрузить();
	
	Результат = Новый Массив;	
	МассивДокументов = Новый Массив;
	МассивДопСНО = Новый Массив;
	МассивДопСНО.Добавить("ЕНВД");
	МассивДопСНО.Добавить("Патент");	
	
	ДокументОбъект = ЗаполнитьДокументПоСНО(ДокументОбъект, КэшКредитныеДанные, ДокументОбъект.СпособРасчетаЧекаККМ, "ОСН");	
		
	Если ДокументОбъект.КредитныеДанные.Количество() = 0 Тогда 
		НомерЭлементаЕНВД = МассивДопСНО.Найти("ЕНВД");
		МассивДопСНО.Удалить(НомерЭлементаЕНВД);
		ДокументОбъект = ЗаполнитьДокументПоСНО(ДокументОбъект, КэшКредитныеДанные, ДокументОбъект.СпособРасчетаЧекаККМ, "ЕНВД");	
	КонецЕсли;	
	
	Для Каждого ВидДопСНО Из МассивДопСНО Цикл 
		Если КэшКредитныеДанные.Найти(Истина, ВидДопСНО) <> Неопределено Тогда 
			ДокументОбъектДопСНО = ЗаполнитьДокументПоСНО(ДокументОбъект.Скопировать(), КэшКредитныеДанные, ДокументОбъект.СпособРасчетаЧекаККМ, ВидДопСНО);	
			Если ДокументОбъектДопСНО.КредитныеДанные.Количество() > 0 Тогда 
				МассивДокументов.Добавить(ДокументОбъектДопСНО);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Попытка			
		ДокументОбъект.Записать();
		Для Каждого ДокументДопСНО Из МассивДокументов Цикл 
			ДокументДопСНО.Записать();	
			Результат.Добавить(ДокументДопСНО.Ссылка);
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокументПоСНО(ДокументОбъект, КэшКредитныеДанные, СпособРасчетаЧекаККМ, ВидСНО)

	// Заполнение создаваемого документа
	Если ДокументОбъект.Ссылка.Пустая() Тогда 
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.СпособРасчетаЧекаККМ = СпособРасчетаЧекаККМ;
	КонецЕсли;	
	
	ДокументОбъект.КредитныеДанные.Очистить();
	
	Для Каждого СтрокаКредит Из КэшКредитныеДанные Цикл
		Если ВидСНО = "ОСН" И Не СтрокаКредит.ЕНВД И Не СтрокаКредит.Патент
			Или ВидСНО = "ЕНВД" И СтрокаКредит.ЕНВД
			Или ВидСНО = "Патент" И СтрокаКредит.Патент Тогда
			НоваяСтрокаКредит = ДокументОбъект.КредитныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКредит, СтрокаКредит);
		КонецЕсли;	
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.КредитныеДанные.Итог("Сумма");
	
	Возврат ДокументОбъект;
	
КонецФункции	

// Получить параметры филиала для печати чеков.
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы	 - филиал чека.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьДанныеФилиала(Филиал) Экспорт
	
	Рез = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Филиал);
	СотрудникПользователя = (ПараметрыСеанса.ТекущийПользователь.Сотрудник);
	Рез.Вставить("Кассир",?(ЗначениеЗаполнено(СотрудникПользователя),СотрудникПользователя.Наименование, "Администратор"));
		
	Возврат Рез;
	
КонецФункции

// Функция - Получить основную ставку НДСПо СНО
//
// Параметры:
//  СНО					 - ПеречислениеСсылка.СистемыНалогообложения	 - СНО.
//  НастройкаПечатиЧеков - СправочникСсылка.НастройкиПечатиЧеков - настройка формирования чеков.
// 
// Возвращаемое значение:
//   ПеречислениеСсылка.СтавкиНДС.
//
Функция ПолучитьОсновнуюСтавкуНДСПоСНО(СНО, НастройкаПечатиЧеков) Экспорт
	
	Если ЗначениеЗаполнено(СНО) И Не НастройкаПечатиЧеков.ПустаяСсылка Тогда
		Если НастройкаПечатиЧеков.ОсновнаяСистемаНалогообложения = СНО Тогда
			Возврат НастройкаПечатиЧеков.СтавкаНДСДляОсновнойСистемыНалогообложения;
		ИначеЕсли СНО = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход")
			Или	СНО = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ПатентнаяСистемаНалогообложения") Тогда
			Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		Иначе
			Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
		КонецЕсли;
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
	КонецЕсли;
	
КонецФункции

#КонецОбласти