#Область ПрограммныйИнтерфейс

// Актуализирует и сохраняет в базе текст осмотра шаблонов приема.
//
// Параметры:
//  Прием						 - ДокументСсылка.Прием	 - Прием.
//  ИгнорироватьТекстПечатиИзТЧ	 - Булево				 - следует ли учитывать сохраненный в табличной части ШаблоныПриема текст.
//
Процедура АктуализироватьТекстОсмотраШаблоновПриема(Прием, ИгнорироватьТекстПечатиИзТЧ = Истина) Экспорт 
	
	// Подготовка таблицы шаблонов приёма.
	ШаблоныПриема = Прием.ШаблоныПриема.Выгрузить();
	ШаблоныПриема.Колонки.Добавить("ТекстШаблона");
		
	// Прочие исходные данные.
	ТаблицаПараметров = ПолучитьТаблицуПараметровПриема(Прием);
	ПланЛечения	= ПолучитьНазначенияПриема(Прием);
	
	Для Каждого СтрокаШаблона Из ШаблоныПриема Цикл
		
		БезРазрыва = СтрокаШаблона.ШаблонПриема.ПечатаетсяБезПереходаНаНовуюСтраницу;
		
		// Формирование печатного варианта для каждого отдельного шаблона
		Если СтрокаШаблона.ШаблонПриема.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон")
				И (ИгнорироватьТекстПечатиИзТЧ Или ПустаяСтрока(СтрокаШаблона.ТекстДляПечати))
		Тогда
			СтрокаШаблона.ТекстШаблона = СтрокаШаблона.ШаблонПриема.ТекстHTML;
			Попытка
				ДанныеШаблона = Новый Структура("Шаблон, ИдентификаторСтрокиШаблона, ТекстШаблона", 
					СтрокаШаблона.ШаблонПриема, ИдентификаторСтрокиШаблона(СтрокаШаблона), СтрокаШаблона.ТекстШаблона);
				// Колонтитулы ЭЦП не используются.
				ДанныеСформированногоШаблона = РаботаСШаблонамиHTMLКлиентСервер.СформироватьВерсиюДляПечатиШаблонаОсмотра(Прием, ДанныеШаблона, ТаблицаПараметров,, ПланЛечения);
				
				СтрокаШаблона.ТекстДляПечати = ДанныеСформированногоШаблона.ТекстШаблонаТело;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Сохранение.
	ПриемОбъект = Прием.ПолучитьОбъект();
	Попытка
		ПриемОбъект.Заблокировать();
		
		Попытка
			ПриемОбъект.ШаблоныПриема.ЗагрузитьКолонку(ШаблоныПриема.ВыгрузитьКолонку("ТекстДляПечати"), "ТекстДляПечати");
			ПриемОбъект.Записать();
		Исключение
		КонецПопытки;
		
		ПриемОбъект.Разблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не удалось заблокировать документ '") + Строка(Прием));
	КонецПопытки;
	
КонецПроцедуры

// Собирает сохраненный по первичному приему план лечения документа.
//
// Параметры:
//  Документ - ДокументСсылка.Прием, ДокументОбъект.Прием	 - Прием.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьНазначенияПриема(Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		// Возвращаем пустую таблицу значений с колонками как из запроса.
		ПустойРезультат = Новый ТаблицаЗначений;
		
		ПустойРезультат.Колонки.Добавить("ИдентификаторЭлемента", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ПустойРезультат.Колонки.Добавить("ВидНазначения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНазначений"));
		ПустойРезультат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ПустойРезультат.Колонки.Добавить("ПорядокЭлемента", Новый ОписаниеТипов("Число"));
		ПустойРезультат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		ПустойРезультат.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число"));
		ПустойРезультат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ПустойРезультат.Колонки.Добавить("ДокументРегистратор", Новый ОписаниеТипов("ДокументСсылка.Прием"));
		
		ПустойРезультат.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		ПустойРезультат.Колонки.Добавить("ПриемовВДень", Новый ОписаниеТипов("Число"));
		ПустойРезультат.Колонки.Добавить("Дозировка", Новый ОписаниеТипов("Число"));
		ПустойРезультат.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
		ПустойРезультат.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
		ПустойРезультат.Колонки.Добавить("СписокРегистраторов", Новый ОписаниеТипов("СписокЗначений"));
		
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланыЛечения.ИдентификаторЭлемента,
	|	ПланыЛечения.ВидЭлемента,
	|	ПланыЛечения.Номенклатура,
	|	ПланыЛечения.ПорядокЭлемента КАК ПорядокЭлемента,
	|	ПланыЛечения.Дата,
	|	ПланыЛечения.Сотрудник,
	|	ПланыЛечения.Количество,
	|	ПланыЛечения.ДокументРегистратор,
	|	ПланыЛечения.Комментарий,
	|
	|	&ПланыЛеченияМедикамент_ДатаОкончания КАК ДатаОкончания,
	|	&ПланыЛеченияМедикамент_ПриемовВДень КАК ПриемовВДень,
	|	&ПланыЛеченияМедикамент_Дозировка КАК Дозировка,
	|	&ПланыЛеченияМедикамент_ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|
	|	ПланыЛечения.ПервичныйПрием
	|ПОМЕСТИТЬ ПланЛечения
	|ИЗ
	|	РегистрСведений.ПланыЛечения КАК ПланыЛечения
	|ГДЕ
	|	ПланыЛечения.ПервичныйПрием = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыЛечения.Количество,
	|	ПланыЛечения.Сотрудник,
	|	ПланыЛечения.Дата,
	|	ПланыЛечения.ПорядокЭлемента,
	|	ПланыЛечения.Номенклатура,
	|	ПланыЛечения.ВидЭлемента,
	|	ПланыЛечения.ИдентификаторЭлемента,
	|	ПланыЛечения.ДокументРегистратор,
	|	ПланыЛечения.Комментарий,
	|
	|	&ПланыЛеченияМедикамент_ДатаОкончания,
	|	&ПланыЛеченияМедикамент_ПриемовВДень,
	|	&ПланыЛеченияМедикамент_Дозировка,
	|	&ПланыЛеченияМедикамент_ЕдиницаИзмерения,
	|
	|	ПланыЛечения.ПервичныйПрием
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента,
	|	СУММА(ВЫБОР
	|			КОГДА ВыполнениеПланаЛечения.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВыполнениеПланаЛечения.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВыполнениеПланаЛечения.Регистратор
	|ПОМЕСТИТЬ ВыполнениеПланаЛечения
	|ИЗ
	|	ПланЛечения КАК ПланЛечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
	|		ПО ПланЛечения.ИдентификаторЭлемента = ВыполнениеПланаЛечения.ИдентификаторЭлемента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента,
	|	ВыполнениеПланаЛечения.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланЛечения.ИдентификаторЭлемента,
	|	ПланЛечения.ВидЭлемента КАК ВидНазначения,
	|	ПланЛечения.Номенклатура,
	|	ПланЛечения.ПорядокЭлемента КАК ПорядокЭлемента,
	|	ПланЛечения.Дата,
	|	ПланЛечения.Сотрудник,
	|	СУММА(ВыполнениеПланаЛечения.Количество) КАК Факт,
	|	ПланЛечения.Количество,
	|	ПланЛечения.ДокументРегистратор,
	|
	|	ПланЛечения.ДатаОкончания,
	|	ПланЛечения.ПриемовВДень,
	|	ПланЛечения.Дозировка,
	|	ПланЛечения.ЕдиницаИзмерения,
	|
	|	ПланЛечения.Комментарий
	|ИЗ
	|	ПланЛечения КАК ПланЛечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
	|		ПО ПланЛечения.ИдентификаторЭлемента = ВыполнениеПланаЛечения.ИдентификаторЭлемента
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланЛечения.Количество,
	|	ПланЛечения.Сотрудник,
	|	ПланЛечения.Дата,
	|	ПланЛечения.ПорядокЭлемента,
	|	ПланЛечения.Номенклатура,
	|	ПланЛечения.ВидЭлемента,
	|	ПланЛечения.ИдентификаторЭлемента,
	|	ПланЛечения.ДокументРегистратор,
	|
	|	ПланЛечения.ДатаОкончания,
	|	ПланЛечения.ПриемовВДень,
	|	ПланЛечения.Дозировка,
	|	ПланЛечения.ЕдиницаИзмерения,
	|
	|	ПланЛечения.Комментарий
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЭлемента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыполнениеПланаЛечения.Регистратор,
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента
	|ИЗ
	|	ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если Метаданные.РегистрыСведений.ПланыЛечения.Ресурсы.Найти("Дозировка") = Неопределено Тогда
		Запрос.УстановитьПараметр("ПланыЛеченияМедикамент_ДатаОкончания", Дата(1,1,1));
		Запрос.УстановитьПараметр("ПланыЛеченияМедикамент_ПриемовВДень", 0);
		Запрос.УстановитьПараметр("ПланыЛеченияМедикамент_Дозировка", 0);
		Запрос.УстановитьПараметр("ПланыЛеченияМедикамент_ЕдиницаИзмерения", Неопределено);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПланыЛеченияМедикамент_", "ПланыЛечения.");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПланЛечения = РезультатЗапроса[2].Выгрузить();
	ПланЛечения.Колонки.Добавить("СписокРегистраторов");
	
	ТаблицаВыполнения = РезультатЗапроса[3].Выгрузить();
	Отбор = Новый Структура("ИдентификаторЭлемента");
	Для Каждого СтрокаПлана Из ПланЛечения Цикл
		
		Отбор.ИдентификаторЭлемента = СтрокаПлана.ИдентификаторЭлемента;
		
		СписокРегистраторов = Новый  СписокЗначений;
		СтрокиТаблицыВыполнения = ТаблицаВыполнения.НайтиСтроки(Отбор);
		Для Каждого СтрокаВыполнения Из СтрокиТаблицыВыполнения Цикл
			
			СписокРегистраторов.Добавить(СтрокаВыполнения.Регистратор);
		
		КонецЦикла;
		
		СтрокаПлана.СписокРегистраторов = СписокРегистраторов;			
		
	КонецЦикла;
	
	Возврат ПланЛечения;
	
КонецФункции

// Формирует таблицу параметров приема для использования на форме документа или при расчете версий для печати.
//
// Параметры:
//  Документ - ДокументСсылка.Прием, ДокументОбъект.Прием	 - Прием.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуПараметровПриема(Документ) Экспорт
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Параметр",		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыHTML"));
	ТаблицаПараметров.Колонки.Добавить("Представление",	Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторСтрокиШаблона",	Новый ОписаниеТипов("Число"));
	ТаблицаПараметров.Колонки.Добавить("СтрокаУидПараметра");
	ТаблицаПараметров.Колонки.Добавить("НеРедактируетсяПользователем",	Новый ОписаниеТипов("Булево"));
	ТаблицаПараметров.Колонки.Добавить("ТипЗначения",	Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаПараметров.Колонки.Добавить("ФорматнаяСтрока",	Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.добавить("ДеревоЗначенийВыбора");
	
	ШаблоныПриема = Документ.ШаблоныПриема;
	
	// Заполнение из БД всеми сохранеными значениями параметров документа.
	Если Документ <> Документы.Прием.ПустаяСсылка() Тогда
		
		НаборЗаписей = РегистрыСведений.ЗначенияПараметровHTML.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.ИндексШаблона < ШаблоныПриема.Количество() Тогда
				ВидШаблона = ШаблоныПриема[Запись.ИндексШаблона].ШаблонПриема;
				ИдентификаторСтроки = ИдентификаторСтрокиШаблона(ШаблоныПриема[Запись.ИндексШаблона]);

				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.Параметр      = Запись.Параметр;
				НоваяСтрока.СтрокаУидПараметра = Строка(НоваяСтрока.Параметр.УникальныйИдентификатор());
				НоваяСтрока.ИдентификаторСтрокиШаблона = ИдентификаторСтроки;
				НоваяСтрока.НеРедактируетсяПользователем = НоваяСтрока.Параметр.НеРедактируетсяПользователем;
				НоваяСтрока.ТипЗначения = НоваяСтрока.Параметр.ТипЗначения;
				НоваяСтрока.ФорматнаяСтрока = НоваяСтрока.Параметр.ФорматнаяСтрока;
				
				Если ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
					НоваяСтрока.Значение      = Запись.Значение;
				Иначе
					Если ТипЗнч(Запись.Значение) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
						НоваяСтрока.Значение = Запись.Значение.Значение;
					Иначе
						НоваяСтрока.Значение = Запись.Значение;
					КонецЕсли;
					НоваяСтрока.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение параметрами шаблона.
	ДополнитьТаблицуПараметровПоШаблонамПриема(Документ, ТаблицаПараметров);
	
	Возврат ТаблицаПараметров;
	
КонецФункции

// Дополняет таблицу параметров по шаблонам приема
//
// Параметры:
//  Документ				 - ДокументСсылка.Прием, ДокументОбъект.Прием	 - Прием.
//  ТаблицаПараметров		 - ТаблицаПараметров	 - таблица параметров медицинского документа
//  ВерсииШаблонов			 - ДанныеФормыКоллекция, ТаблицаЗнчений	 - таблица версий шаблонов документа.
//  КешЗависимыхПараметров	 - ТаблицаЗначений	 - кеш связей между параметрами для авторасчета зависимых при изменении.
//
Процедура ДополнитьТаблицуПараметровПоШаблонамПриема(Документ, ТаблицаПараметров, ВерсииШаблонов = Неопределено, КешЗависимыхПараметров = Неопределено) Экспорт
	
	Если ВерсииШаблонов = Неопределено Тогда
		ВерсииШаблонов = Новый ТаблицаЗначений;
		ВерсииШаблонов.Колонки.Добавить("ШаблонПриема", Новый ОписаниеТипов("СправочникСсылка.ШаблоныHTML"));
		ВерсииШаблонов.Колонки.Добавить("ВерсияШаблона", Новый ОписаниеТипов("СправочникСсылка.ВерсииШаблоновHTML, СправочникСсылка.ШаблоныHTML"));
		ДокументыПриемаКлиентСервер.ЗаполнитьТаблицуВерсийШаблонов(ВерсииШаблонов, Документ);
		МассивВерсий = ВерсииШаблонов.ВыгрузитьКолонку("ВерсияШаблона")
	Иначе
		МассивВерсий = ВерсииШаблонов.Выгрузить().ВыгрузитьКолонку("ВерсияШаблона");
	КонецЕсли;
	
	СтруктВыбПараметры = ПолучитьВыборкуПараметровШаблоновПриема(МассивВерсий);
	ВыбПараметры = СтруктВыбПараметры.Параметры;
	
	// Обновление кеша параметров, зависимых от других параметров (пересчитываемых при изменении других).
	Если КешЗависимыхПараметров <> Неопределено Тогда
		КешЗависимыхПараметров.Загрузить(СтруктВыбПараметры.ЗависимыеПараметры);
		
		Реквизиты = ПолучитьРеквизитыСвязанныеСПараметрамиШаблонов(ВерсииШаблонов.Выгрузить().ВыгрузитьКолонку("ВерсияШаблона"));
		
		Для Каждого Строка Из Реквизиты Цикл
			НоваяСтрока = КешЗависимыхПараметров.Добавить();
			НоваяСтрока.ЗависимыйПараметр = Строка.ЗависимыйПараметр;
			НоваяСтрока.Параметр = Строка.Параметр;
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем из таблицы параметров параметры удалённых шаблонов приёма.
	ИдентификаторыСтрокШаблонов = Новый Массив;
	Для Каждого СтрокаШаблона Из Документ.ШаблоныПриема Цикл
		ИдентификаторыСтрокШаблонов.Добавить(ИдентификаторСтрокиШаблона(СтрокаШаблона));
	КонецЦикла;
	СтрокиПараметровКУдалению = Новый Массив;
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		Если ИдентификаторыСтрокШаблонов.Найти(СтрокаПараметра.ИдентификаторСтрокиШаблона) = Неопределено Тогда
			СтрокиПараметровКУдалению.Добавить(СтрокаПараметра);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПараметра Из СтрокиПараметровКУдалению Цикл
		ТаблицаПараметров.Удалить(СтрокаПараметра);
	КонецЦикла;
	
	КолонкаДоступныхЗначений = Неопределено;
	Если ТипЗнч(ТаблицаПараметров) = Тип("ТаблицаЗначений") Тогда
		КолонкаДоступныхЗначений = ТаблицаПараметров.Колонки.Найти("ДопустимыеЗначения");
	ИначеЕсли ТипЗнч(ТаблицаПараметров) = Тип("ДанныеФормыКоллекция") Тогда
		КолонкаДоступныхЗначений = ТаблицаПараметров.Выгрузить().Колонки.Найти("ДопустимыеЗначения");
	КонецЕсли;
	
	КолонкаНазначения = Неопределено;
	Если ТипЗнч(ТаблицаПараметров) = Тип("ТаблицаЗначений") Тогда
		КолонкаНазначения = ТаблицаПараметров.Колонки.Найти("Назначение");
	ИначеЕсли ТипЗнч(ТаблицаПараметров) = Тип("ДанныеФормыКоллекция") Тогда
		КолонкаНазначения = ТаблицаПараметров.Выгрузить().Колонки.Найти("Назначение");
	КонецЕсли;
	
	ПараметрыСНазначениями = Новый Массив;
	
	// Добавляем недостающие параметры шаблонов.
	ОтборШаблон = Новый Структура("ШаблонПриема");
	ОтборИдПарам = Новый Структура("ИдентификаторСтрокиШаблона, Параметр");
	Для Каждого СтрокаШаблона Из Документ.ШаблоныПриема Цикл
		
		ДоступныеЗначения = Новый Соответствие;
		
		Если КолонкаДоступныхЗначений <> Неопределено
			И ЗначениеЗаполнено(СтрокаШаблона.ВидДокумента)
		Тогда
			Для Каждого СтруктураLocalid Из ИнтеграцияЕГИСЗ_СЭМД.МассивLocalidДокумента(СтрокаШаблона.ВидДокумента) Цикл
				Если СтруктураLocalid.Свойство("ДопустимыеЗначения")
					И СтруктураLocalid.ДопустимыеЗначения <> Неопределено
				Тогда
					ДоступныеЗначения.Вставить(СтруктураLocalid.localid, СтруктураLocalid.ДопустимыеЗначения);
				ИначеЕсли СтруктураLocalid.Свойство("ДопустимыеКлассификации")
					И СтруктураLocalid.ДопустимыеКлассификации <> Неопределено
				Тогда
					ДоступныеЗначения.Вставить(СтрШаблон("%1.КлассификацияПоля", СтруктураLocalid.localid), СтруктураLocalid.ДопустимыеКлассификации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОтборШаблон.ШаблонПриема = СтрокаШаблона.ШаблонПриема;
		ОтборИдПарам.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона(СтрокаШаблона);
		ВыбПараметры.Сбросить();
		Пока ВыбПараметры.НайтиСледующий(ОтборШаблон) Цикл
			
			ОтборИдПарам.Параметр = ВыбПараметры.Параметр;
			СтрокиПараметра = ТаблицаПараметров.НайтиСтроки(ОтборИдПарам);
			
			Если СтрокиПараметра.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.Параметр = ВыбПараметры.Параметр;
				НоваяСтрока.СтрокаУидПараметра = Строка(НоваяСтрока.Параметр.УникальныйИдентификатор());
				НоваяСтрока.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона(СтрокаШаблона);
				НоваяСтрока.НеРедактируетсяПользователем = ВыбПараметры.НеРедактируетсяПользователем;
				НоваяСтрока.ТипЗначения = ВыбПараметры.ТипЗначения;
				НоваяСтрока.ФорматнаяСтрока = ВыбПараметры.ФорматнаяСтрока;
				
				Значение = НоваяСтрока.ТипЗначения.ПривестиЗначение(Неопределено);
				Если ВыбПараметры.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
					НоваяСтрока.Значение      = Значение;
				Иначе
					НоваяСтрока.Значение      = Значение;
					НоваяСтрока.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(НоваяСтрока);
				КонецЕсли;
				
				Если КолонкаНазначения <> Неопределено Тогда
					НоваяСтрока.Назначение = ВыбПараметры.Назначение;
				КонецЕсли;
				
				ЗаполнитьПараметрыВводаСтрокиПараметра(НоваяСтрока, ВыбПараметры);
				
				СтрокаТекущегоПараметра = НоваяСтрока;
				
				Если КолонкаНазначения <> Неопределено
					И ЗначениеЗаполнено(НоваяСтрока.Назначение)
				Тогда
					СтрокаВерсииШаблона = ВерсииШаблонов.НайтиСтроки(Новый Структура("ШаблонПриема", СтрокаШаблона.ШаблонПриема));
					Если СтрокаВерсииШаблона.Количество() > 0 Тогда
						ПараметрыСНазначениями.Добавить(Новый Структура("ВерсияШаблона, СтрокаПараметра", СтрокаВерсииШаблона[0].ВерсияШаблона, СтрокаТекущегоПараметра));
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаТекущегоПараметра = СтрокиПараметра[0];
			КонецЕсли;
			
			Если КолонкаДоступныхЗначений <> Неопределено Тогда
				СтрокаТекущегоПараметра.ДопустимыеЗначения.Очистить();
				ДоступныеЗначенияПараметра = ДоступныеЗначения.Получить(ВыбПараметры.localid);
				Если ТипЗнч(ДоступныеЗначенияПараметра) = Тип("Массив") Тогда
					СтрокаТекущегоПараметра.ДопустимыеЗначения.ЗагрузитьЗначения(ДоступныеЗначенияПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьДополнительныеПараметрыПоНазначениям(Документ, ПараметрыСНазначениями);
	
КонецПроцедуры

// Заполнить атрибуты ввода значения параметра для строки таблицы параметров медицинского документа.
//
// Параметры:
//  СтрокаПараметров	 - СтрокаТаблицыЗначений - строка таблицы параметров на форме медицинского документа с шаблонами.
//  РеквизитыПараметра	 - Произвольный	 - Структура или иной источник значений реквизитов параметра (кеш).
//
Процедура ЗаполнитьПараметрыВводаСтрокиПараметра(СтрокаПараметров, РеквизитыПараметра = Неопределено) Экспорт
	
	Если РеквизитыПараметра = Неопределено Тогда
		РеквизитыПараметра = СтрокаПараметров.Параметр;
	КонецЕсли;
	
	// Дерево значений выбора.
	Если Не СтрокаПараметров.НеРедактируетсяПользователем
		И РеквизитыПараметра.ВыборПоСсылкеИзОграниченногоСписка
	Тогда
		СтрокаПараметров.ДеревоЗначенийВыбора = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьДеревоЗначенийВыбораПараметра(СтрокаПараметров.Параметр);
		
	// Интерфейс ввода полей ЭМД.
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПараметра.Назначение)
		И Обработки.ИнтерфейсВводаПолейЭМД.КодировкаПоляЭМДИмеетИнтерфейсВвода(РеквизитыПараметра.Назначение)
	Тогда
		СтрокаПараметров.ДеревоЗначенийВыбора = РеквизитыПараметра.Назначение;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет получить реквизиты связанные с параметрами шаблонов
//
// Параметры:
//  ШаблоныПриема	 - Массив	 - Массив из элементов СправочникСсылка.ШаблоныHTML.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьРеквизитыСвязанныеСПараметрамиШаблонов(ШаблоныПриема) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныHTMLСоответствияПараметрам.Ссылка КАК ШаблонПриема,
	|	ШаблоныHTMLСоответствияПараметрам.Ссылка.ВидШаблона КАК ВидШаблона,
	|	ШаблоныHTMLСоответствияПараметрам.Параметр КАК Параметр
	|ПОМЕСТИТЬ ПараметрыШаблонов
	|ИЗ
	|	Справочник.ШаблоныHTML.СоответствияПараметрам КАК ШаблоныHTMLСоответствияПараметрам
	|ГДЕ
	|	ШаблоныHTMLСоответствияПараметрам.Ссылка В(&ШаблоныПриема)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииШаблоновHTMLСоответствияПараметрам.Ссылка.Владелец,
	|	ВерсииШаблоновHTMLСоответствияПараметрам.Ссылка.ВидШаблона,
	|	ВерсииШаблоновHTMLСоответствияПараметрам.Параметр
	|ИЗ
	|	Справочник.ВерсииШаблоновHTML.СоответствияПараметрам КАК ВерсииШаблоновHTMLСоответствияПараметрам
	|ГДЕ
	|	ВерсииШаблоновHTMLСоответствияПараметрам.Ссылка В(&ШаблоныПриема)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыШаблонов.Параметр КАК ЗависимыйПараметр,
	|	ВычисляемыеЗначения.Реквизит КАК Параметр
	|ИЗ
	|	ПараметрыШаблонов КАК ПараметрыШаблонов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычисляемыеЗначенияПараметров.СвязанныеРеквизиты КАК ВычисляемыеЗначения
	|		ПО (ПараметрыШаблонов.Параметр.ИспользуетсяВычисляемоеЗначение)
	|			И ПараметрыШаблонов.Параметр.ЗначениеПоУмолчанию = ВычисляемыеЗначения.Ссылка";
	
	Запрос.УстановитьПараметр("ШаблоныПриема", ШаблоныПриема);
	Результат = Запрос.Выполнить().Выгрузить();
		
	Возврат Результат;
	
КонецФункции

// Позволяет получить выборку параметров шаблонов приема
//
// Параметры:
//  ШаблоныПриема	 - Массив	 - Массив из элементов СправочникСсылка.ШаблоныHTML.
// 
// Возвращаемое значение:
//  Структура - параметры шаблона.
//
Функция ПолучитьВыборкуПараметровШаблоновПриема(ШаблоныПриема) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныHTMLСоответствияПараметрам.Ссылка КАК ШаблонПриема,
		|	ШаблоныHTML.ВидШаблона КАК ВидШаблона,
		|	ШаблоныHTMLСоответствияПараметрам.Параметр КАК Параметр,
		|	ШаблоныHTML.ВидДокумента КАК ВидДокумента,
		|	ШаблоныHTMLСоответствияПараметрам.localid КАК localid
		|ПОМЕСТИТЬ ПараметрыШаблонов
		|ИЗ
		|	Справочник.ШаблоныHTML.СоответствияПараметрам КАК ШаблоныHTMLСоответствияПараметрам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
		|		ПО (ШаблоныHTML.Ссылка = ШаблоныHTMLСоответствияПараметрам.Ссылка)
		|ГДЕ
		|	ШаблоныHTMLСоответствияПараметрам.Ссылка В(&ШаблоныПриема)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииШаблоновHTML.Владелец,
		|	ВерсииШаблоновHTML.ВидШаблона,
		|	ВерсииШаблоновHTMLСоответствияПараметрам.Параметр,
		|	ВерсииШаблоновHTML.ВидДокумента,
		|	ВерсииШаблоновHTMLСоответствияПараметрам.localid
		|ИЗ
		|	Справочник.ВерсииШаблоновHTML.СоответствияПараметрам КАК ВерсииШаблоновHTMLСоответствияПараметрам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|		ПО (ВерсииШаблоновHTML.Ссылка = ВерсииШаблоновHTMLСоответствияПараметрам.Ссылка)
		|ГДЕ
		|	ВерсииШаблоновHTMLСоответствияПараметрам.Ссылка В(&ШаблоныПриема)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыШаблонов.ШаблонПриема КАК ШаблонПриема,
		|	ПараметрыШаблонов.ВидШаблона КАК ВидШаблона,
		|	ПараметрыШаблонов.Параметр КАК Параметр,
		|	ПараметрыШаблонов.Параметр.ТипЗначения КАК ТипЗначения,
		|	ПараметрыШаблонов.ВидДокумента КАК ВидДокумента,
		|	ПараметрыШаблонов.localid КАК localid,
		|	ЕСТЬNULL(ПараметрыШаблонов.Параметр.ФорматнаяСтрока, """") КАК ФорматнаяСтрока,
		|	ЕСТЬNULL(ПараметрыШаблонов.Параметр.НеРедактируетсяПользователем, ЛОЖЬ) КАК НеРедактируетсяПользователем,
		|	ЕСТЬNULL(ПараметрыШаблонов.Параметр.ВыборПоСсылкеИзОграниченногоСписка, ЛОЖЬ) КАК ВыборПоСсылкеИзОграниченногоСписка,
		|	ПараметрыШаблонов.Параметр.Назначение КАК Назначение
		|ИЗ
		|	ПараметрыШаблонов КАК ПараметрыШаблонов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыШаблонов.Параметр КАК ЗависимыйПараметр,
		|	ВычисляемыеЗначенияПараметровСписокПеременных.Параметр КАК Параметр
		|ИЗ
		|	ПараметрыШаблонов КАК ПараметрыШаблонов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычисляемыеЗначенияПараметров.СписокПеременных КАК ВычисляемыеЗначенияПараметровСписокПеременных
		|		ПО (ПараметрыШаблонов.Параметр.ИспользуетсяВычисляемоеЗначение)
		|			И ПараметрыШаблонов.Параметр.ЗначениеПоУмолчанию = ВычисляемыеЗначенияПараметровСписокПеременных.Ссылка
		|			И (ВычисляемыеЗначенияПараметровСписокПеременных.Приемник = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыHTML.ПустаяСсылка)
		|				ИЛИ ВычисляемыеЗначенияПараметровСписокПеременных.Приемник = ПараметрыШаблонов.Параметр)";
	
	Запрос.УстановитьПараметр("ШаблоныПриема", ШаблоныПриема);
	Результат = Запрос.ВыполнитьПакет();
	ВыбПараметры = Результат[1].Выбрать();
	ВыбЗависимые = Результат[2].Выгрузить();
		
	Возврат Новый Структура("Параметры, ЗависимыеПараметры", ВыбПараметры, ВыбЗависимые);
	
КонецФункции

// Возвращает таблицу анализов, назначенных клиентам и еще не сданных.
//
// Параметры:
//  ПараметрыВыбора	 - Структура - структура с ключами "Клиент" и "Дата".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - номенклатура анализов, возможных для забора.
//
Функция НазначенияПриемов(ПараметрыВыбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ПараметрыВыбора.Дата));
	Запрос.УстановитьПараметр("Клиент", ?(ЗначениеЗаполнено(ПараметрыВыбора.Клиент), ПараметрыВыбора.Клиент, Неопределено));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛабораторныеИсследованияСрезПоследних.ИД КАК ИД,
	               |	ЛабораторныеИсследованияСрезПоследних.Клиент КАК Клиент,
	               |	ЛабораторныеИсследованияСрезПоследних.Номенклатура КАК Номенклатура,
	               |	1 КАК Количество
	               |ИЗ
	               |	РегистрСведений.ЛабораторныеИсследования.СрезПоследних(
	               |			,
	               |			(&Клиент = НЕОПРЕДЕЛЕНО
	               |				ИЛИ &Клиент = Клиент)
	               |				И ДатаНачала >= &Дата) КАК ЛабораторныеИсследованияСрезПоследних
	               |ГДЕ
	               |	ЛабораторныеИсследованияСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияИсследований.Назначен)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЛабораторныеИсследованияСрезПоследних.Клиент.Представление";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьАктуальныеДиагнозыНаМоментДокумента(МедицинскийДокумент, ВернутьТаблицуЗначений = Ложь) Экспорт
	
	Перем ПриемСДиагнозами;
	
	МоментВремени = МедицинскийДокумент.Дата;
	МедКарта = МедицинскийДокумент.МедицинскаяКарта;
	СлучайОбращения = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(МедицинскийДокумент, "ПервичныйПрием", Неопределено);
	Если Не ЗначениеЗаполнено(СлучайОбращения) Тогда
		СлучайОбращения = Неопределено; // Приведение к единому пустому значению.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Прием.Ссылка КАК Ссылка,
	               |	Прием.Диагнозы.(
	               |		Ссылка КАК Ссылка
	               |	) КАК Диагнозы
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.МедицинскаяКарта = &МедКарта
				   |	И (&ПервичныйПрием = НЕОПРЕДЕЛЕНО ИЛИ Прием.ПервичныйПрием = &ПервичныйПрием)
				   |	И Прием.Дата <= &МоментВремени
	               |	И Прием.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Прием.Дата УБЫВ";
	Запрос.УстановитьПараметр("МедКарта", МедКарта);
	Запрос.УстановитьПараметр("ПервичныйПрием", СлучайОбращения);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		Если Строка.Диагнозы.Количество() > 0 Тогда
			ПриемСДиагнозами = Строка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПриемСДиагнозами <> Неопределено Тогда
		Диагнозы = ПриемСДиагнозами.Диагнозы.Выгрузить();
		Если ВернутьТаблицуЗначений Тогда
			Возврат Диагнозы;
		Иначе
			Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Диагнозы);
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторСтрокиШаблона(СтрокаШаблона)
	
	Если ТипЗнч(СтрокаШаблона) = Тип("ДокументТабличнаяЧастьСтрока.Прием.ШаблоныПриема")
		Или ТипЗнч(СтрокаШаблона) = Тип("СтрокаТаблицыЗначений")
	Тогда
		Возврат СтрокаШаблона.НомерСтроки;
	Иначе
		Возврат СтрокаШаблона.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПараметрыПоНазначениям(Документ, ПараметрыСНазначениями)
	
	Для Каждого СтруктураПараметра Из ПараметрыСНазначениями Цикл
		
		Назначение = СтруктураПараметра.СтрокаПараметра.Назначение;
		
		Если Назначение = Перечисления.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра Тогда
			ЗаполнитьДополнительныеПараметрыПоВитальномуПараметру(СтруктураПараметра.СтрокаПараметра, СтруктураПараметра.ВерсияШаблона);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПараметрыПоВитальномуПараметру(СтрокаПараметра, ВерсияШаблона)
	
	СтрокиПараметраШаблона = ВерсияШаблона.СоответствияПараметрам.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметра.Параметр));
	Если СтрокиПараметраШаблона.Количество() = 0
		Или Не ЗначениеЗаполнено(СтрокиПараметраШаблона[0].localid)
	Тогда
		Возврат;
	КонецЕсли;
	
	localidКлассификации = СтрШаблон("%1.КлассификацияПоля", СтрокиПараметраШаблона[0].localid);
	СтрокиПараметраКлассификации = ВерсияШаблона.СоответствияПараметрам.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле", localidКлассификации, СтрокаПараметра.Параметр));
	
	Если СтрокиПараметраКлассификации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПараметра.ДопПараметрыПоНазначению = Новый Структура("ПараметрКлассификации", СтрокиПараметраКлассификации[0].Параметр);
	
КонецПроцедуры

#КонецОбласти
