#Область ПрограммныйИнтерфейс

// Создает Лид в базе для метода CreateLead http-сервиса ОбменCRMУниверсальный (post) или других добавленных сервисов.
//
// Параметры:
//  ОписаниеОшибки	 - Строка	 - Текст ошибки.
//  ПараметрыЗапроса - Стуктура	 - повторяет параметры http-запроса.
//  Параметры		 - Структура - данные для создания Лида.
//
Процедура CreateLeadPOST(ОписаниеОшибки, ПараметрыЗапроса, Параметры) Экспорт
	
	Примечание = ПолучитьПримечание(ПараметрыЗапроса, Параметры);
	ДанныеКлиента = ПолучитьДанныеКлиента(ПараметрыЗапроса, Параметры);
	Клиент = ПолучитьКлиента(ПараметрыЗапроса, Параметры, ДанныеКлиента);
	ДанныеЗаписи = ПолучитьДанныеЗаписи(ПараметрыЗапроса, Параметры);
	UTM = ПолучитьUTM(ПараметрыЗапроса, Параметры);
	
	СоздатьЛид(ОписаниеОшибки, Примечание, Клиент, ДанныеКлиента, ДанныеЗаписи, UTM);
	
КонецПроцедуры

// Создать лид по параметрам из внешней системы. 
//	Степень заполнения документа зависит от того, как много исходных данных было передано.
//
// Параметры:
//  Примечание	  - Строка					 - Содержит примечание лида.
//  Клиент		  - СправочникСсылка.Клиенты - Необязательный. Ссылка на клиента.
//  ДанныеКлиента - Структура				 - Необязательный. Содержит поля.
//   Фамилия		- Строка - Фамилия клиента.
//   Имя			- Строка - Имя клиента.
//   Отчество		- Строка - Отчество клиента.
//   ДатаРождения	- Дата   - Дата рождения клиента.
//   Телефон		- Строка - Номер телефона клиента.
//   Email			- Строка - Email клиента.
//
//  ДанныеЗаписи - Структура - Необязательный. Содержит поля.
//   Сотрудник		- СправочникСсылка.Сотрудники			- Ссылка на врача.
//   Специализация	- СправочникСсылка.КатегорииВыработки	- Ссылка на специализацию врача.
//   Клиника		- СправочникСсылка.Филиалы				- Ссылка на филиал.
//   ДатаЗаписи	- Дата	 - Дата желаемой записи.
//   ВремяЗаписи	- Дата	 - Время желаемой записи.
//   Работы		- Массив - Номенклатуры работ (СправочникСсылка.Номенклатура).
//
//  UTM - Структура - Необязательный. Содержит поля.
//   utm_medium	- СправочникСсылка.ТипыРекламы			- Ссылка на тип рекламы.
//   utm_source	- СправочникСсылка.ИсточникиИнформации	- Ссылка на источник информации.
//   utm_compaign	- СправочникСсылка.РекламныеКомпании	- Ссылка на рекламную компанию.
//   utm_term		- Строка - Ключевое слово рекламной компании.
//   utm_content	- Строка - Содержание объявления.
// 
// Возвращаемое значение:
//  ДокументСсылка.ЛистОжидания, Неопределено - созданный документ.
//
Функция СоздатьЛид(ОписаниеОшибки, Примечание, Клиент = Неопределено, ДанныеКлиента = Неопределено, ДанныеЗаписи = Неопределено, UTM = Неопределено, НастройкаОбменаССайтом = Неопределено) Экспорт
	
	ЛистОжиданияОбъект = Документы.ЛистОжидания.СоздатьДокумент();
	
	ЛистОжиданияОбъект.Дата = ТекущаяДатаСеанса();
	ЛистОжиданияОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ЛистОжиданияОбъект.Примечание = Примечание;
	
	Если Клиент = Неопределено Тогда
		Клиент = ОбработатьДанныеКлиента(ДанныеКлиента);
	КонецЕсли;
	ЛистОжиданияОбъект.Клиент = Клиент;
	
	Если НастройкаОбменаССайтом <> Неопределено Тогда
		ЛистОжиданияОбъект.ВнешнийИсточникЗагрузки = НастройкаОбменаССайтом;
	КонецЕсли;

	Если ДанныеЗаписи <> Неопределено Тогда
		
		СтрокаТЧ = ЛистОжиданияОбъект.ЖелаемоеВремя.Добавить();
		СтрокаТЧ.Дата	= ДанныеЗаписи.ДатаЗаписи;
		СтрокаТЧ.Начало	= ДанныеЗаписи.ВремяЗаписи;
		
		ЛистОжиданияОбъект.Специализация = ДанныеЗаписи.Специализация;
		ЛистОжиданияОбъект.Сотрудник = ДанныеЗаписи.Сотрудник;
		ЛистОжиданияОбъект.Филиал = ДанныеЗаписи.Клиника;
		
		Для Каждого Работа Из ДанныеЗаписи.Работы Цикл
			НоваяРабота = ЛистОжиданияОбъект.Работы.Добавить();
			НоваяРабота.Номенклатура = Работа;
			НоваяРабота.Продолжительность = Дата(1,1,1)	+ (НоваяРабота.Номенклатура.ПродолжительностьЧас*60*60	+  НоваяРабота.Номенклатура.ПродолжительностьМин*60);
		КонецЦикла;
		
	КонецЕсли;
	
	Если UTM <> Неопределено Тогда
		ЛистОжиданияОбъект.ТипРекламы						= UTM.utm_medium;
		ЛистОжиданияОбъект.ИсточникИнформации				= UTM.utm_source;
		ЛистОжиданияОбъект.РекламнаяКомпания				= UTM.utm_compaign;
		ЛистОжиданияОбъект.КлючевоеСловоРекламнойКомпании	= UTM.utm_term;
		ЛистОжиданияОбъект.СодержаниеОбъявления				= UTM.utm_content;
	КонецЕсли;
	
	Попытка
		ЛистОжиданияОбъект.Записать();
		УИД = ЛистОжиданияОбъект.Ссылка.УникальныйИдентификатор();
		ОписаниеОшибки = "";
		Результат = Истина;
	Исключение		
		ОписаниеОшибки = НСтр("ru='Не удалось записать документ ЛистОжидания.'");
		Результат = Ложь;
	КонецПопытки;
	Если Результат Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи = РегистрыСведений.НепросмотренныеДокументыССайта.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = ЛистОжиданияОбъект.Ссылка;
		МенеджерЗаписи.Записать();
		
		Если ЗначениеЗаполнено(ЛистОжиданияОбъект.ИсточникИнформации) Тогда
			Запись = РегистрыСведений.НеотработанныеОбращения.СоздатьМенеджерЗаписи();
			Запись.Документ = ЛистОжиданияОбъект.Ссылка;
			Запись.Записать();
		КонецЕсли;
		
		Возврат ЛистОжиданияОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПримечание(ПараметрыЗапроса, Параметры)
	
	Возврат Параметры.Получить("Примечание");
	
КонецФункции

Функция ПолучитьДанныеКлиента(ПараметрыЗапроса, Параметры)
	
	ЗначениеПараметраКлиент = Параметры.Получить("Клиент");
	
	ДанныеКлиента = Новый Структура("Фамилия, Имя, Отчество, ДатаРождения, Телефоны, АдресаПочты");
	
	Клиент = ПолучитьЭлементСправочника(ЗначениеПараметраКлиент, Справочники.Клиенты);
	
	Если Клиент <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКлиента, Клиент);
		НомерТелефона = Строка(КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон));
		АдресПочты = Строка(КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		ДанныеКлиента.Вставить("КлиентСсылка", Клиент);
	Иначе
		ФИО = СтрРазделить(СокрЛП(ЗначениеПараметраКлиент), " ", Ложь);
		Если ФИО.Количество()>0 Тогда
			ДанныеКлиента["Фамилия"] = ФИО[0];
		КонецЕсли;
		Если ФИО.Количество()>1 Тогда
			ДанныеКлиента["Имя"] = ФИО[1];
		КонецЕсли;
		Если ФИО.Количество()>2 Тогда
			ДанныеКлиента["Отчество"] = ФИО[2];
		КонецЕсли;
		ДанныеКлиента["ДатаРождения"]	= ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(Параметры.Получить("ДатаРождения"));
		НомерТелефона = Параметры.Получить("НомерТелефона");
		АдресПочты = Параметры.Получить("email");
	КонецЕсли;
	ДанныеКлиента["Телефоны"]		= Новый Массив;
	ДанныеКлиента["АдресаПочты"]	= Новый Массив;
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		ДанныеКлиента["Телефоны"].Добавить(НомерТелефона);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресПочты) Тогда
		ДанныеКлиента["АдресаПочты"].Добавить(АдресПочты);
	КонецЕсли;
	
	Возврат ДанныеКлиента;
	
КонецФункции

Функция ПолучитьКлиента(ПараметрыЗапроса, Параметры, ДанныеКлиента)
	
	Если ДанныеКлиента.Свойство("КлиентСсылка") Тогда
		Клиент = ДанныеКлиента["КлиентСсылка"];
	Иначе
		Клиент = НайтиКлиента(ДанныеКлиента);
	КонецЕсли;
	
	Возврат Клиент;
	
КонецФункции

Функция ПолучитьДанныеЗаписи(ПараметрыЗапроса, Параметры)
	
	ДанныеЗаписи = Новый Структура;
	
	ДанныеЗаписи.Вставить("Сотрудник",		ПолучитьЭлементСправочника(Параметры.Получить("Сотрудник"), Справочники.Сотрудники, Истина, Истина));
	ДанныеЗаписи.Вставить("Специализация",	ПолучитьЭлементСправочника(Параметры.Получить("Специализация"), Справочники.КатегорииВыработки, Истина, Истина));
	ДанныеЗаписи.Вставить("Клиника",		ПолучитьЭлементСправочника(Параметры.Получить("УИДФилиала"), Справочники.Филиалы));
	
	ДатаЗаписи = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(Параметры.Получить("ДатаЗаписи"));
	Если ДатаЗаписи = Неопределено Тогда
		ДатаЗаписи = Дата(1,1,1);
	КонецЕсли;
	ДанныеЗаписи.Вставить("ДатаЗаписи", НачалоДня(ДатаЗаписи));
	ДанныеЗаписи.Вставить("ВремяЗаписи", Дата(1,1,1) + (ДатаЗаписи - НачалоДня(ДатаЗаписи)));
	
	МассивРабот = Новый Массив;
	Работы = Параметры.Получить("Работы");
	Для Каждого Работа Из Работы Цикл
		Номенклатура = ПолучитьЭлементСправочника(Работа, Справочники.Номенклатура);
		Если Номенклатура <> Неопределено Тогда
			МассивРабот.Добавить(Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	
	ДанныеЗаписи.Вставить("Работы", МассивРабот);
	
	Возврат ДанныеЗаписи;
	
КонецФункции

// Получить структуру UTM-полей по параметрам http-запроса создания лида.
//
// Параметры:
//  ПараметрыЗапроса - Стуктура	 - повторяет параметры http-запроса.
//  Параметры		 - Структура - данные для создания Лида.
// 
// Возвращаемое значение:
//  Структура - данные utm-меток.
//
Функция ПолучитьUTM(ПараметрыЗапроса, Параметры) Экспорт
	
	UTM = Новый Структура;
	
	UTM.Вставить("utm_medium",	 ПолучитьЭлементСправочника(Параметры.Получить("UTM_MEDIUM"),	Справочники.ТипыРекламы,		,Истина, "ИмяUTM"));
	UTM.Вставить("utm_source",	 ПолучитьЭлементСправочника(Параметры.Получить("UTM_SOURCE"),	Справочники.ИсточникиИнформации,,Истина, "ИмяUTM"));
	UTM.Вставить("utm_compaign", ПолучитьЭлементСправочника(Параметры.Получить("UTM_COMPAIGN"),	Справочники.РекламныеКомпании,	,Истина, "ИмяUTM"));
	UTM.Вставить("utm_term",	 Параметры.Получить("UTM_TERM"));
	UTM.Вставить("utm_content",	 Параметры.Получить("UTM_CONTENT"));
	
	Возврат UTM;
	
КонецФункции

Функция НайтиКлиента(СтруктураПоиска)
	
	// Изменить в ВебИнтеграции
	
	НомераТелефонов = Новый Массив;
	Для Каждого НомерТелефона Из СтруктураПоиска.Телефоны Цикл
		НомераТелефонов.Добавить(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(НомерТелефона));
	КонецЦикла;
	
	АдресаПочты = Новый ТаблицаЗначений;
	АдресаПочты.Колонки.Добавить("АдресПочты", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	Для Каждого АдресПочты Из СтруктураПоиска.АдресаПочты Цикл
		НоваяСтрока = АдресаПочты.Добавить();
		НоваяСтрока.АдресПочты = АдресПочты;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипТелефон",	Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТипEmail",	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Запрос.УстановитьПараметр("Фамилия",		?(СтруктураПоиска.Фамилия		= Неопределено, "НеУчитывать", СтруктураПоиска.Фамилия));
	Запрос.УстановитьПараметр("Имя",			?(СтруктураПоиска.Имя			= Неопределено, "НеУчитывать", СтруктураПоиска.Имя));
	Запрос.УстановитьПараметр("Отчество",		?(СтруктураПоиска.Отчество		= Неопределено, "НеУчитывать", СтруктураПоиска.Отчество));
	Запрос.УстановитьПараметр("ДатаРождения",	?(СтруктураПоиска.ДатаРождения	= Неопределено, "НеУчитывать", СтруктураПоиска.ДатаРождения));
	
	Запрос.УстановитьПараметр("УчитыватьТелефоны",		НомераТелефонов.Количество()>0);
	Запрос.УстановитьПараметр("УчитыватьАдресаПочты",	АдресаПочты.Количество()>0);
	
	Запрос.УстановитьПараметр("ТелефонЦифры", НомераТелефонов);
	Запрос.УстановитьПараметр("АдресаПочты",  АдресаПочты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресаПочты.АдресПочты КАК АдресПочты
	|ПОМЕСТИТЬ АдресаПочты
	|ИЗ
	|	&АдресаПочты КАК АдресаПочты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Клиент,
	|	2 КАК Приоритет
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	(Клиенты.Фамилия = &Фамилия
	|			ИЛИ &Фамилия = ""НеУчитывать"")
	|	И (Клиенты.Имя = &Имя
	|			ИЛИ &Имя = ""НеУчитывать"")
	|	И (Клиенты.Отчество = &Отчество
	|			ИЛИ &Отчество = ""НеУчитывать"")
	|	И (Клиенты.ДатаРождения = &ДатаРождения
	|			ИЛИ &ДатаРождения = ""НеУчитывать"")";
	Если НомераТелефонов.Количество()>0 Или АдресаПочты.Количество()>0 Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект КАК Объект,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АдресаПочты КАК АдресаПочты
		|		ПО (КонтактнаяИнформация.Тип = &ТипEmail
		|					И КонтактнаяИнформация.Представление ПОДОБНО ""%"" + АдресаПочты.АдресПочты + ""%""
		|				ИЛИ &УчитыватьАдресаПочты = ЛОЖЬ)
		|			И (КонтактнаяИнформация.Тип = &ТипТелефон
		|					И КонтактнаяИнформация.Поле12 В (&ТелефонЦифры)
		|				ИЛИ &УчитыватьТелефоны = ЛОЖЬ)
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	КонецЕсли;
	
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Возврат Рез.Выгрузить()[0].Клиент;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Создает клиента по значениям реквизитов и других данных в ходе обмена с htt-сервисом CRM обмена.
//
// Параметры:
//  ДанныеКлиента	 - Структура - реквизиты клиента для добавления.
// 
// Возвращаемое значение:
//  СправочникСсылка.Клиенты - клиент в базе.
//
Функция ОбработатьДанныеКлиента(ДанныеКлиента) Экспорт
	
	ДанныеКлиента.Вставить("Пол", УниверсальныеМеханизмыСервер.ОпределитьПол(ДанныеКлиента.Имя, ДанныеКлиента.Фамилия, ДанныеКлиента.Отчество));
	Если Не ДанныеКлиента.Свойство("ИсточникИнформации") Тогда 
		ДанныеКлиента.Вставить("ИсточникИнформации",Справочники.ИсточникиИнформации.ПустаяСсылка());
	КонецЕсли;
	
	КлиентВБазе = СоздатьКлиента(ДанныеКлиента);
	
	Если ЗначениеЗаполнено(КлиентВБазе) Тогда
		Телефоны = ДанныеКлиента.Телефоны;
		АдресаПочты = ДанныеКлиента.АдресаПочты;
		
		МассивСтруктурКИ = Новый Массив;
		КоличествоСтрок = Макс(Телефоны.Количество(), АдресаПочты.Количество());
		Для НомерСтроки = 0 По КоличествоСтрок-1 Цикл
			НоваяСтруктураКИ = Новый Структура;
			НоваяСтруктураКИ.Вставить("Телефон", ?(Телефоны.Количество() <= НомерСтроки, Неопределено, Телефоны[НомерСтроки]));
			НоваяСтруктураКИ.Вставить("Email", ?(АдресаПочты.Количество() <= НомерСтроки, Неопределено, АдресаПочты[НомерСтроки]));
			НоваяСтруктураКИ.Вставить("Адрес", Неопределено);
			ВебИнтеграция.ОбработатьКИКлиента(НоваяСтруктураКИ, КлиентВБазе);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КлиентВБазе;
	
КонецФункции

Функция СоздатьКлиента(ДанныеКлиента)
	
	Если ЗначениеЗаполнено(ДанныеКлиента.Фамилия) Или ЗначениеЗаполнено(ДанныеКлиента.Имя) Тогда
		Клиент = Справочники.Клиенты.СоздатьЭлемент();
		Клиент.Фамилия 		= ДанныеКлиента.Фамилия;
		Клиент.Имя			= ДанныеКлиента.Имя;
		Клиент.Отчество		= ДанныеКлиента.Отчество;
		Клиент.Наименование = РаботаСКлиентамиПереопределяемый.ПредставлениеПоФИО(Клиент.Фамилия, Клиент.Имя, Клиент.Отчество);
		
		Клиент.ИсточникИнформации = ДанныеКлиента.ИсточникИнформации;
		
		Если ТипЗнч(ДанныеКлиента.Пол) = Тип("ПеречислениеСсылка.ПолФизическихЛиц")
			И ЗначениеЗаполнено(ДанныеКлиента.Пол)
		Тогда
		    Клиент.Пол = ДанныеКлиента.Пол;
		ИначеЕсли Лев(НРег(ДанныеКлиента.Пол),1) = "ж" Тогда
			Клиент.Пол		= Перечисления.ПолФизическихЛиц.Женский;
		ИначеЕсли Лев(НРег(ДанныеКлиента.Пол),1) = "м" Тогда
			Клиент.Пол		= Перечисления.ПолФизическихЛиц.Мужской;
		Иначе
			Клиент.Пол		= Перечисления.ПолФизическихЛиц.НеУказан;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеКлиента.ДатаРождения) Тогда
			Клиент.ДатаРождения = ДанныеКлиента.ДатаРождения;
		КонецЕсли;
		
		Если ДанныеКлиента.Свойство("Родитель") Тогда
			Клиент.Родитель = ДанныеКлиента.Родитель;
		КонецЕсли;
		
		Клиент.Записать();
		
		Возврат Клиент.Ссылка;
	Иначе
		Возврат Справочники.Клиенты.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

// Ищет элемент справочника в базе по критериям поиска.
//
// Параметры:
//  Значение				 - Строка	 - Наименование элемента или значение реквизита для поиска, или guid ссылки.
//  Справочник				 - СправочникМенеджер - Менеджер справочника
//  ИскатьПоНаименованию	 - Булево - искать ли по наименованию.
//  ВозвращатьПустуюСсылку	 - Булево - Когда Ложь, не найденный элемент вернется как Неопределено.
//  РеквизитДляПоиска		 - Строка - реквизит для поиска существующего.
// 
// Возвращаемое значение:
//  СправочникСсылка. 
//
Функция ПолучитьЭлементСправочника(Значение, Справочник, ИскатьПоНаименованию = Ложь, ВозвращатьПустуюСсылку = Ложь, РеквизитДляПоиска = Неопределено) Экспорт
	
	Элемент = Неопределено;
	Если ЗначениеЗаполнено(Значение) Тогда
		Попытка
			Элемент = Справочник.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		Исключение
			Если РеквизитДляПоиска <> Неопределено Тогда
				Элемент = Справочник.НайтиПоРеквизиту(РеквизитДляПоиска, Значение);
			ИначеЕсли ИскатьПоНаименованию Тогда
				Элемент = Справочник.НайтиПоНаименованию(Значение);
			КонецЕсли;
		КонецПопытки;
	ИначеЕсли ВозвращатьПустуюСсылку Тогда
		Элемент = Справочник.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

#КонецОбласти