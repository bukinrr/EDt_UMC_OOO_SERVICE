///////////////////////////////////////////////////////////////////////////////
// Общий серверный модуль телефонии БИТ
// Содержит функции, реализация которых зависит от конфигурации.
///////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

//-----------------------------------------------------------------------------
// === УТ 11 ===

// Возвращает булево - признак хранения контактной информации в регистре сведений
//  (иначе в табличной части справочников контрагентов и контактных лиц).
Функция КонтактнаяИнформацияВРегистреСведений() ЭКСПОРТ
	Возврат Ложь;
КонецФункции

// Возвращает строку, имя документа - события взаимодействия.
Функция ПолучитьИмяДокументаСобытие() ЭКСПОРТ
	Возврат "ТелефонныйЗвонок";
КонецФункции

// Возвращает таблицу значений с полями контрагентов и контактных лиц.
Функция НайтиКонтрагентовПоНомеруВКонтактах(НомерДляПоиска, флагТолькоПервый) ЭКСПОРТ
	
	таблК = Новый ТаблицаЗначений;
	таблК.Колонки.Добавить("Контрагент");
	таблК.Колонки.Добавить("КонтактноеЛицо");
	
	//+БИТ
	Контакты = КонтактнаяИнформацияСерверПереопределяемый.НайтиОбъектыПоНомеруТелефона(НомерДляПоиска);
	Для Каждого СтрокаКонтакт Из Контакты Цикл
		СтрРез = таблК.Добавить();
		СтрРез.Контрагент = СтрокаКонтакт.Объект;
		СтрРез.КонтактноеЛицо = СтрокаКонтакт.Номер;
	КонецЦикла;
	
	Возврат таблК;

	//-БИТ А всё типовое игнорируем.
	
	стрПодобия = "%" + НомерДляПоиска + "%";

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона
		|ИЗ
		|	Справочник." + ПолучитьИмяСправочникаКонтрагентов() + ".КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Тип = &Тип
		|	И ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерТелефона
		|	И ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("НомерТелефона", стрПодобия);

	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		табл = Результат.Выгрузить();
		Для Каждого строкаТ Из табл Цикл
			НомерЦифр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(строкаТ.НомерТелефона);
			// поиск полного соответствия
			Если НомерЦифр = НомерДляПоиска Тогда
				строкаК = таблК.Добавить();
				строкаК.Контрагент = строкаТ.Ссылка;
				строкаК.КонтактноеЛицо = Справочники[ПолучитьИмяСправочникаКонтактныхЛиц()].ПустаяСсылка();
				//
				Если флагТолькоПервый Тогда
					Возврат таблК;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
				   |	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
				   |ИЗ
				   |	Справочник." + ПолучитьИмяСправочникаКонтактныхЛиц() + ".КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
				   |ГДЕ
				   |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип
				   |	И КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона ПОДОБНО &НомерТелефона
				   |	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("НомерТелефона", стрПодобия);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		табл = Результат.Выгрузить();
		Для Каждого строкаТ Из табл Цикл
			НомерЦифр = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(строкаТ.НомерТелефона);
			// поиск полного соответствия
			Если НомерЦифр = НомерДляПоиска Тогда
				КонтактноеЛицоСсылка = строкаТ.Ссылка;
				строкаК = таблК.Добавить();
				строкаК.КонтактноеЛицо = КонтактноеЛицоСсылка;
				строкаК.Контрагент = ПолучитьКонтрагентаКонтактногоЛица(КонтактноеЛицоСсылка);
				//
				Если флагТолькоПервый Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат таблК;
КонецФункции

// Возвращает массив строк номеров сотрудника
Функция НайтиНомераСотрудника(СотрудникСсылка) ЭКСПОРТ
	//Возврат НайтиКонтактнуюИнформацию(СотрудникСсылка, ПолучитьИмяСправочникаСотрудников(), Неопределено);
	Возврат КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(СотрудникСсылка, , , Ложь);
КонецФункции

Функция ПолучитьКонтактСобытия(ссылкаСобытие, стрСообщениеОбОшибкеВозвращ) ЭКСПОРТ
	стрСообщениеОбОшибкеВозвращ = "";
	контакт = "";
	Если ссылкаСобытие <> Неопределено Тогда
		контакт = ссылкаСобытие.АбонентКонтакт;
		Если НЕ ЗначениеЗаполнено(контакт) Тогда
			контакт = ссылкаСобытие.АбонентПредставление;
			// проверка Избранного
			индИзбр = Найти(контакт, " (избранное)");
			Если индИзбр > 0 Тогда
				наименИзбр = Лев(контакт, индИзбр-1);
				контакт = бит_ТелефонияСервер.ИзбранноеНайтиНомер(наименИзбр);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат контакт;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиКонтактнуюИнформацию(СсылкаНаОбъект, стрТипОбъекта, ВидКонтактнойИнформации)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактнаяИнформация.НомерТелефона
	               |ИЗ
	               |	Справочник." + стрТипОбъекта + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид.ПометкаУдаления = ЛОЖЬ";
				   
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		Запрос.Текст = Запрос.Текст + " И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("НомерТелефона");
КонецФункции

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////
// Общий серверный модуль телефонии БИТ
// Содержит функции, реализация которых зависит от конфигурации
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// === БИТ.Красота и здоровье ===

// Возвращает строку, имя справочника контрагентов
Функция ПолучитьИмяСправочникаКонтрагентов() Экспорт
	Возврат бит_ТелефонияКлиентСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов();
КонецФункции

// Возвращает строку, имя справочника контактных лиц
Функция ПолучитьИмяСправочникаКонтактныхЛиц() ЭКСПОРТ
	Возврат бит_ТелефонияКлиентСерверПереопределяемый.ПолучитьИмяСправочникаКонтактныхЛиц();
КонецФункции

// Возвращает строку, имя справочника сотрудников
Функция ПолучитьИмяСправочникаСотрудников() ЭКСПОРТ
	Возврат "Сотрудники";
КонецФункции

// Возвращает массив строк номеров контрагента
Функция НайтиНомераКонтрагента(КлиентСсылка) Экспорт 
	
	Возврат КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(КлиентСсылка, , , Ложь);
	
КонецФункции

// Возвращает строку - номер контрагента по виду контактной информации
Функция НайтиНомерКонтрагента(КлиентСсылка, ВидКонтактнойИнформации) Экспорт 
	
	Возврат КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(КлиентСсылка, , ВидКонтактнойИнформации, Истина); 
	
КонецФункции

// Возвращает массив видов телефонов
Функция ПолучитьВидыКонтактнойИнформацииКонтрагента() Экспорт 
	
	Возврат КонтактнаяИнформацияСерверПереопределяемый.ПолучитьВидыКонтактнойИнформацииМетаданных("Клиенты", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецФункции

// Возвращает массив строк номеров контрактного лица
Функция НайтиНомераКонтактногоЛица(КонтактноеЛицоСсылка) Экспорт
	
	Возврат НайтиНомераКонтрагента(КонтактноеЛицоСсылка);
	
КонецФункции

// Возвращает ссылку на контрагента по его контактному лицу
Функция ПолучитьКонтрагентаКонтактногоЛица(КонтактноеЛицоСсылка) Экспорт
	Возврат КонтактноеЛицоСсылка.Владелец;
КонецФункции

// Возвращает ссылку на элемент справочника Пользователи
Функция ПолучитьОсновногоМенеджераКонтрагента(контрагентСсылка) Экспорт 
	Возврат Неопределено;
КонецФункции

Процедура ЗаписатьНомерТелефонаКонтрагента(КлиентСсылка, ВидКонтактнойИнформации = Неопределено, Знач НомерТелефона) Экспорт
	
	Если ЗначениеЗаполнено(ВидКонтактнойИнформации)
		И ВидКонтактнойИнформации.ИспользоватьМаскуВвода
	Тогда
		НомерТелефона = ОбщегоНазначенияКлиентСервер.ПривестиЧисловуюСтрокуКМаске(НомерТелефона, ВидКонтактнойИнформации.МаскаВводаТелефонногоНомера);
	КонецЕсли;
	
	КонтактнаяИнформацияСерверПереопределяемый.ЗаписатьНомерТелефона(КлиентСсылка, НомерТелефона, ВидКонтактнойИнформации);
	
КонецПроцедуры

// Возвращает ссылку на новый созданный документ события взаимодействия
Функция СоздатьСобытиеЗвонка(структПараметры) Экспорт
		
	СтруктураСобытия = CRMКлиентСервер.ПолучитьСтруктуруСобытия(Истина);
	СтруктураСобытия.Клиент = структПараметры.Контрагент;
	СтруктураСобытия.НомерТелефона = структПараметры.Номер;
	СтруктураСобытия.ЗаписьРазговора = структПараметры.ЗаписьРазговора;
	СтруктураСобытия.бит_НабранныйНомер = структПараметры.НабранныйНомер;
	Если СтруктПараметры.Свойство("Основание") Тогда
		СтруктураСобытия.Вставить("Основание", структПараметры.Основание);
	КонецЕсли;
	
	ПараметрыUTMПоТелефону = РегистрыСведений.ПараметрыUTMПоТелефону.ПолучитьПараметрыUTM(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СтруктПараметры.НабранныйНомер));
	Если ПараметрыUTMПоТелефону.Количество() > 0 Тогда
		ПараметрыUTM = ОбщегоНазначенияСервер.ПреобразоватьТаблицуЗначенийВМассивСтруктур(ПараметрыUTMПоТелефону)[0];
		СтруктураСобытия.Вставить("ИсточникИнформации", ПараметрыUTM.ИсточникИнформации);
		СтруктураСобытия.Вставить("РекламнаяКомпания", ПараметрыUTM.РекламнаяКомпания);
		СтруктураСобытия.Вставить("ТипРекламы", ПараметрыUTM.ТипРекламы);
	КонецЕсли;
	
	ВидСобытия = ?(структПараметры.Входящий, 
		ПредопределенноеЗначение("Перечисление.ВидыСобытий.ВходящийЗвонок"), 
		ПредопределенноеЗначение("Перечисление.ВидыСобытий.ИсходящийЗвонок"));
	
	НовоеСобытие = CRMСервер.ДобавитьСобытие(ВидСобытия, , , СтруктураСобытия);
	
	Возврат НовоеСобытие;
	
КонецФункции

// Проверяет возможность автозапуска при начале работы системы
Функция ЕстьВозможностьАвтозапуска() Экспорт 
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьCallЦентр");
КонецФункции

// проверяет что заданный контрагент является покупателем
Функция ПроверкаКонтрагентПокупатель(контрагентСсылка) Экспорт
	
	Возврат Истина;
	
КонецФункции

// проверяет что заданный контрагент является поставщиком
Функция ПроверкаКонтрагентПоставщик(контрагентСсылка) Экспорт
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьВСобытия(ТипСобытия) Экспорт
	Запись = РегистрыСведений.бит_СобытияБитФон.СоздатьМенеджерЗаписи();
	Запись.Пользователь   = ПараметрыСеанса.ТекущийПользователь;
	Запись.Дата			  = ТекущаяДата();
	Запись.Событие 		  = ТипСобытия;
	Запись.Записать();
КонецПроцедуры

Процедура СдвигНаЛинии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_СобытияБитФон.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.бит_СобытияБитФон КАК бит_СобытияБитФон
		|ГДЕ
		|	бит_СобытияБитФон.Событие = &Событие
		|	И бит_СобытияБитФон.Пользователь = &Пользователь
		|	И бит_СобытияБитФон.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ВыбДата, МЕСЯЦ, -1) И ДОБАВИТЬКДАТЕ(&ВыбДата, СЕКУНДА, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	бит_СобытияБитФон.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияБитФон.Логин);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ВыбДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	ДатаПоследнегоЛогина = РезультатЗапроса.Дата;
	Если ТипЗнч(ДатаПоследнегоЛогина) <> Тип("Дата") Тогда
		ДатаПоследнегоЛогина = Дата("39991231");  
	КонецЕсли; 
		
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_СобытияБитФон.Дата КАК ДатаНаЛинии
		|ИЗ
		|	РегистрСведений.бит_СобытияБитФон КАК бит_СобытияБитФон
		|ГДЕ
		|	бит_СобытияБитФон.Событие = &Событие
		|	И бит_СобытияБитФон.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	бит_СобытияБитФон.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияБитФон.НаЛинии);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();	

	Если РезультатЗапроса.Количество() <> 0
		И РезультатЗапроса.ДатаНаЛинии > ДатаПоследнегоЛогина
	Тогда
		Запись = РегистрыСведений.бит_СобытияБитФон.СоздатьМенеджерЗаписи();
		Запись.Пользователь   = ПараметрыСеанса.ТекущийПользователь;
		Запись.Дата			  = РезультатЗапроса.ДатаНаЛинии;
		Запись.Событие		  = Перечисления.СобытияБитФон.НаЛинии;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			Запись.Дата = ТекущаяДата();
			Запись.Записать();
		КонецЕсли;	
	Иначе
		ДобавитьВСобытия(Перечисления.СобытияБитФон.НаЛинии);
	КонецЕсли
	
КонецПроцедуры

Функция НайтиКлиентовПоНомеруТелефона(НомерТелефона, флагПоискДублей) Экспорт
	
	НормализованныйНомер = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(НомерТелефона);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект Как Ссылка,
	|	КонтактнаяИнформация.Представление КАК НомерТелефона
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.Клиенты И
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
	|	И КонтактнаяИнформация.Представление ПОДОБНО &НомерТелефона";
	Запрос.УстановитьПараметр("НомерТелефона", "%" + НормализованныйНомер.ДляПоиска + "%");
	
	Результат = Запрос.Выполнить();
	
	таблК = Новый ТаблицаЗначений;
	таблК.Колонки.Добавить("Контрагент");
	таблК.Колонки.Добавить("КонтактноеЛицо");
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомерЦифр = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(Выборка.НомерТелефона, Ложь);
			// поиск полного соответствия
			Если НомерЦифр = НормализованныйНомер.Номер Тогда
				строкаК = таблК.Добавить();
				строкаК.Контрагент = Выборка.Ссылка;
				строкаК.КонтактноеЛицо = Справочники[ПолучитьИмяСправочникаКонтактныхЛиц()].ПустаяСсылка();
				//
				Если Не флагПоискДублей Тогда
					Возврат таблК;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат таблК;
	
КонецФункции

Функция ПолучитьСсылкуНаЗаписьРазговораИзДанныхРасшифровкиВоВременномХранилище(стрАдресВХранилище, Расшифровка) Экспорт
	
	стрЗапись = "";
	ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(стрАдресВХранилище);
	Если ДанныеРасшифровкиОтчета <> Неопределено И ТипЗнч(ДанныеРасшифровкиОтчета)=Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеРасшифровки = ДанныеРасшифровкиОтчета.Элементы[Расшифровка];
		Если ЗначениеРасшифровки <> Неопределено Тогда
			поле0 = ЗначениеРасшифровки.ПолучитьПоля()[0];
			Если поле0.Поле = "ЗаписьРазговора" И ЗначениеЗаполнено(поле0.Значение) Тогда
				стрЗапись = поле0.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат стрЗапись;
	
КонецФункции