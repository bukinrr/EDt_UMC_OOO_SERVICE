#Область ПрограммныйИнтерфейс

// Сохраняет файл ЭМД в базе/внешнем каталоге
//
// Параметры:
//  Документ			 - ОпределяемыйТип.ПодписанныйОбъект - Объект, по которому сохраняется файл;
//  ДвоичныеДанныеФайла	 - ДвоичныеДанные					 - Двоичные данные файла ЭМД;
//  Расширение			 - Строка							 - Расширение файла.
//
Процедура ДобавитьФайлЭМД(Документ, ДвоичныеДанныеФайла, Знач Расширение, УИД_ЭМД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Расширение) Тогда
		Расширение = "txt";
	КонецЕсли;
	
	МЗ = РегистрыСведений.ФайлыЭМД.СоздатьМенеджерЗаписи();
	МЗ.Документ = Документ;
	МЗ.Расширение = Расширение;
	МЗ.ПутьКФайлу = Неопределено;
	МЗ.ЭМД = Неопределено;
	
	Если ЗначениеЗаполнено(УИД_ЭМД) Тогда
		МЗ.УИД_ЭМД = УИД_ЭМД;
	КонецЕсли;
	
	СохранитьВБазе = Истина;
	
	ХранитьФайлыЭМДВоВнешнемАрхиве = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ХранитьФайлыЭМДВоВнешнемАрхиве");
	Если ХранитьФайлыЭМДВоВнешнемАрхиве Тогда
		ПутьКАрхивуЭМД = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ПутьКАрхивуЭМД");
		
		Если ЗначениеЗаполнено(УИД_ЭМД) Тогда
			ИмяФайла = СтрШаблон("%1_%2", Строка(Документ.УникальныйИдентификатор()), Строка(УИД_ЭМД));
		Иначе
			ИмяФайла = Строка(Документ.УникальныйИдентификатор());
		КонецЕсли;
		
		ОтносительныйПуть = СтрШаблон("%1.%2", ИмяФайла, Расширение);
		Попытка
			ДвоичныеДанныеФайла.Записать(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуЭМД) + ОтносительныйПуть);
			СохранитьВБазе = Ложь;
		Исключение КонецПопытки;
	КонецЕсли;
	
	Если СохранитьВБазе Тогда
		МЗ.ЭМД = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
	Иначе
		МЗ.ПутьКФайлу = ОтносительныйПуть;
	КонецЕсли;
	
	МЗ.Записать();
	
КонецПроцедуры

// Возвращает данные файлов ЭМД
//
// Параметры:
//  Документ			 - ОпределяемыйТип.ПодписанныйОбъект - Объект, по которому сформирован файл;
//  ВернутьПутьКФайлу	 - Строка							 - Путь до файла на сервере.
// 
// Возвращаемое значение:
//  Массив - Данные ЭМД.
//
Функция ПолучитьДанныеФайловЭМД(Документ, ВернутьПутиКФайлам = Ложь, УИД_ЭМД = Неопределено) Экспорт
	
	сДанныеЭМД = Новый Соответствие;
	
	НЗ = РегистрыСведений.ФайлыЭМД.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(Документ);
	
	Если УИД_ЭМД <> Неопределено Тогда
		НЗ.Отбор.УИД_ЭМД.Установить(УИД_ЭМД);
	КонецЕсли;
	
	НЗ.Прочитать();
	
	Если НЗ.Количество() = 0 Тогда
		Возврат сДанныеЭМД;
	КонецЕсли;
	
	Для Каждого СтрокаНЗ Из НЗ Цикл
		Расширение = СтрокаНЗ.Расширение;
		
		Если Не ЗначениеЗаполнено(Расширение) Тогда
			// Запись попала в регистр до появления ресурса "Расширение"
			Расширение = ПолучитьРасширениеПоИмениТипаДокумента(ДопСерверныеФункции.ИмяСсылочногоТипа(Документ));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНЗ.ПутьКФайлу) Тогда
			ПутьКАрхивуЭМД = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ПутьКАрхивуЭМД");
			ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуЭМД) + СтрокаНЗ.ПутьКФайлу;
			Если Не ЗначениеЗаполнено(ПутьКАрхивуЭМД) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru='В учётной политике не указан путь к архиву ЭМД'"));
				Возврат Новый Соответствие;
			ИначеЕсли Не ФайлСуществует(ПутьКАрхивуЭМД) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(СтрШаблон(НСтр("ru='Не удалось получить доступ к архиву ЭМД по указанному пути: ""%1""'"), ПутьКАрхивуЭМД));
				Возврат Новый Соответствие;
			ИначеЕсли Не ФайлСуществует(ПолныйПутьКФайлу) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(СтрШаблон(НСтр("ru='Не удалось получить доступ к файлу ЭМД по указанному пути: ""%1""'"), ПолныйПутьКФайлу));
				Возврат Новый Соответствие;
			КонецЕсли;
			
			Если ВернутьПутиКФайлам Тогда
				КаталогВременныхФайлов = СтандартныеПодсистемыСервер.СоздатьКаталогВременныхФайлов(Строка(Новый УникальныйИдентификатор));
				ВременныйФайл = СтрШаблон("%1%2.%3", КаталогВременныхФайлов, НСтр("ru='ЭМД'"), Расширение);
				КопироватьФайл(ПолныйПутьКФайлу, ВременныйФайл);
				сДанныеЭМД.Вставить(СтрокаНЗ.УИД_ЭМД, ВременныйФайл);
			Иначе
				сДанныеЭМД.Вставить(СтрокаНЗ.УИД_ЭМД, Новый Структура("ДвоичныеДанные, Расширение", Новый ДвоичныеДанные(ПолныйПутьКФайлу), Расширение));
			КонецЕсли;
		Иначе
			ДвоичныеДанныеЭМД = СтрокаНЗ.ЭМД.Получить();
			Если ВернутьПутиКФайлам Тогда
				КаталогВременныхФайлов = СтандартныеПодсистемыСервер.СоздатьКаталогВременныхФайлов(Строка(Новый УникальныйИдентификатор));
				ПутьДоЭМД = СтрШаблон("%1%2.%3", КаталогВременныхФайлов, НСтр("ru='ЭМД'"), Расширение);
				ДвоичныеДанныеЭМД.Записать(ПутьДоЭМД);
				сДанныеЭМД.Вставить(СтрокаНЗ.УИД_ЭМД, ПутьДоЭМД);
			Иначе
				сДанныеЭМД.Вставить(СтрокаНЗ.УИД_ЭМД, Новый Структура("ДвоичныеДанные, Расширение", ДвоичныеДанныеЭМД, Расширение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат сДанныеЭМД;
	
КонецФункции

// Удалить файл ЭМД
//
// Параметры:
//  Документ - ОпределяемыйТип.ПодписанныйОбъект - Объект, чей файл нужно убрать из регистра.
//
Процедура УдалитьФайлЭМД(Документ, УИД_ЭМД = Неопределено) Экспорт
	
	НЗ = РегистрыСведений.ФайлыЭМД.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(Документ);
	
	Если ЗначениеЗаполнено(УИД_ЭМД) Тогда
		НЗ.Отбор.УИД_ЭМД.Установить(УИД_ЭМД);
	КонецЕсли;
	
	НЗ.Записать();
	
КонецПроцедуры

Функция ФайлЭМДСохранен(Документ, УИД_ЭМД = Неопределено) Экспорт
	
	НЗ = РегистрыСведений.ФайлыЭМД.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(Документ);
	
	Если ЗначениеЗаполнено(УИД_ЭМД) Тогда
		НЗ.Отбор.УИД_ЭМД.Установить(УИД_ЭМД);
	КонецЕсли;
	
	НЗ.Прочитать();
	
	Возврат НЗ.Количество() > 0;
	
КонецФункции

Функция ФайлСуществует(Знач ПутьКФайлу) Экспорт
	
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
	
КонецФункции

Процедура ПереместитьВсеФайлыЭМД(Параметры, АдресРезультата) Экспорт
	
	ПродолжатьВыгрузку = Истина;
	
	ОбработанныеСтроки = Новый ТаблицаЗначений;
	ОбработанныеСтроки.Колонки.Добавить("Документ", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ПодписанныйОбъект.Тип));
	ОбработанныеСтроки.Колонки.Добавить("УИД_ЭМД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ПутьКАрхивуЭМД = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ПутьКАрхивуЭМД");
	
	Пока ПродолжатьВыгрузку Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбработанныеСтроки.Документ КАК Документ,
			|	ОбработанныеСтроки.УИД_ЭМД КАК УИД_ЭМД
			|ПОМЕСТИТЬ ОбработанныеСтроки
			|ИЗ
			|	&ОбработанныеСтроки КАК ОбработанныеСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 500
			|	ФайлыЭМД.Документ КАК Документ,
			|	ФайлыЭМД.УИД_ЭМД КАК УИД_ЭМД,
			|	ФайлыЭМД.ЭМД КАК ЭМД,
			|	ФайлыЭМД.ПутьКФайлу КАК ПутьКФайлу,
			|	ФайлыЭМД.Расширение КАК Расширение
			|ИЗ
			|	РегистрСведений.ФайлыЭМД КАК ФайлыЭМД
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОбработанныеСтроки КАК ОбработанныеСтроки
			|		ПО (ОбработанныеСтроки.Документ = ФайлыЭМД.Документ)
			|			И (ОбработанныеСтроки.УИД_ЭМД = ФайлыЭМД.УИД_ЭМД)
			|ГДЕ
			|	ОбработанныеСтроки.УИД_ЭМД ЕСТЬ NULL
			|	И (&РежимВыгрузки = 1
			|				И (ВЫРАЗИТЬ(ФайлыЭМД.ПутьКФайлу КАК СТРОКА(10))) = """"
			|			ИЛИ &РежимВыгрузки = 2
			|				И (ВЫРАЗИТЬ(ФайлыЭМД.ПутьКФайлу КАК СТРОКА(10))) <> """")";
		
		Запрос.УстановитьПараметр("РежимВыгрузки", Параметры.РежимВыгрузки);
		Запрос.УстановитьПараметр("ОбработанныеСтроки", ОбработанныеСтроки);
		
		Результат = Запрос.Выполнить();
		
		ПродолжатьВыгрузку = Не Результат.Пустой();
		
		Выборка = Результат.Выбрать();
		
		КончилисьФайлыКПеремещению = Результат.Пустой();
		
		Пока Не КончилисьФайлыКПеремещению Цикл
			КоличествоПеремещённыхФайлов = 0;
			КоличествоОбработанныхСтрок = 0;
			НачатьТранзакцию();
			// Не больше 500 записей за транзакцию
			Пока Выборка.Следующий()
				И КоличествоПеремещённыхФайлов < 20
			Цикл
				
				Попытка
					ДанныеФайла = Новый Структура("Документ, УИД_ЭМД, ЭМД, ПутьКФайлу, Расширение");
					ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
					ПереместитьФайлЭМД(ПутьКАрхивуЭМД, ДанныеФайла, Параметры.РежимВыгрузки, КоличествоПеремещённыхФайлов);
				Исключение КонецПопытки;
				
				КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
				ЗаполнитьЗначенияСвойств(ОбработанныеСтроки.Добавить(), Выборка);
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			КончилисьФайлыКПеремещению = КоличествоОбработанныхСтрок = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьВсеИзображения(Параметры, АдресРезультата) Экспорт
	
	ПродолжатьВыгрузку = Истина;
	
	ОбработанныеСтроки = Новый ТаблицаЗначений;
	ОбработанныеСтроки.Колонки.Добавить("Документ",				 Метаданные.РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.Измерения.Документ.Тип);
	ОбработанныеСтроки.Колонки.Добавить("ИндексШаблона",		 Метаданные.РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.Измерения.ИндексШаблона.Тип);
	ОбработанныеСтроки.Колонки.Добавить("ИдентификаторЭлемента", Метаданные.РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.Измерения.ИдентификаторЭлемента.Тип);
	ОбработанныеСтроки.Колонки.Добавить("Тип",					 Метаданные.РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.Измерения.Тип.Тип);
	
	ПутьКАрхивуИзображений = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ПутьКАрхивуИзображений");
	
	Пока ПродолжатьВыгрузку Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбработанныеСтроки.Документ КАК Документ,
			|	ОбработанныеСтроки.ИндексШаблона КАК ИндексШаблона,
			|	ОбработанныеСтроки.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
			|	ОбработанныеСтроки.Тип КАК Тип
			|ПОМЕСТИТЬ ОбработанныеСтроки
			|ИЗ
			|	&ОбработанныеСтроки КАК ОбработанныеСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 500
			|	ИзображенияПриемов.Документ КАК Документ,
			|	ИзображенияПриемов.ИндексШаблона КАК ИндексШаблона,
			|	ИзображенияПриемов.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
			|	ИзображенияПриемов.Тип КАК Тип,
			|	ИзображенияПриемов.Файл КАК Файл,
			|	ИзображенияПриемов.ПутьКФайлу КАК ПутьКФайлу,
			|	ИзображенияПриемов.Расширение КАК Расширение
			|ИЗ
			|	РегистрСведений.ФайлыРедактируемыхЭлементовШаблонаПриема КАК ИзображенияПриемов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОбработанныеСтроки КАК ОбработанныеСтроки
			|		ПО (ОбработанныеСтроки.Документ = ИзображенияПриемов.Документ)
			|			И (ОбработанныеСтроки.ИндексШаблона = ИзображенияПриемов.ИндексШаблона)
			|			И (ОбработанныеСтроки.ИдентификаторЭлемента = ИзображенияПриемов.ИдентификаторЭлемента)
			|			И (ОбработанныеСтроки.Тип = ИзображенияПриемов.Тип)
			|ГДЕ
			|	ОбработанныеСтроки.ИдентификаторЭлемента ЕСТЬ NULL
			|	И (ИзображенияПриемов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок)
			|			ИЛИ ИзображенияПриемов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыФайловРедактируемыхЭлементовШаблона.ДобавленноеИзображение))
			|	И (&РежимВыгрузки = 1
			|				И (ВЫРАЗИТЬ(ИзображенияПриемов.ПутьКФайлу КАК СТРОКА(10))) = """"
			|			ИЛИ &РежимВыгрузки = 2
			|				И (ВЫРАЗИТЬ(ИзображенияПриемов.ПутьКФайлу КАК СТРОКА(10))) <> """")";
		
		Запрос.УстановитьПараметр("РежимВыгрузки", Параметры.РежимВыгрузки);
		Запрос.УстановитьПараметр("ОбработанныеСтроки", ОбработанныеСтроки);
		
		Результат = Запрос.Выполнить();
		
		ПродолжатьВыгрузку = Не Результат.Пустой();
		
		Выборка = Результат.Выбрать();
		
		КончилисьФайлыКПеремещению = Результат.Пустой();
		
		Пока Не КончилисьФайлыКПеремещению Цикл
			КоличествоПеремещённыхФайлов = 0;
			КоличествоОбработанныхСтрок = 0;
			НачатьТранзакцию();
			// Не больше 500 записей за транзакцию
			Пока Выборка.Следующий()
				И КоличествоПеремещённыхФайлов < 20
			Цикл
				
				Попытка
					ДанныеФайла = Новый Структура("Документ, ИндексШаблона, ИдентификаторЭлемента, Тип, Файл, ПутьКФайлу, Расширение");
					ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
					ПереместитьИзображениеПриема(ПутьКАрхивуИзображений, ДанныеФайла, Параметры.РежимВыгрузки, КоличествоПеремещённыхФайлов);
				Исключение КонецПопытки;
				
				КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
				ЗаполнитьЗначенияСвойств(ОбработанныеСтроки.Добавить(), Выборка);
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			КончилисьФайлыКПеремещению = КоличествоОбработанныхСтрок = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДвоичныеДанныеФайлаРедактируемогоЭлемента(ПутьКФайлу, Файл) Экспорт
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ПутьКАрхивуИзображений = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ПутьКАрхивуИзображений");
		ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуИзображений) + ПутьКФайлу;
		СообщениеОбОшибке = Неопределено;
		Если Не ЗначениеЗаполнено(ПутьКАрхивуИзображений) Тогда
			СообщениеОбОшибке = НСтр("ru='В учётной политике не указан путь к архиву изображений'");
		ИначеЕсли Не ФайлСуществует(ПутьКАрхивуИзображений) Тогда
			СообщениеОбОшибке = СтрШаблон(НСтр("ru='Не удалось получить доступ к архиву изображений по указанному пути: ""%1""'"), ПутьКАрхивуИзображений);
		ИначеЕсли Не ФайлСуществует(ПутьКАрхивуИзображений) Тогда
			СообщениеОбОшибке = СтрШаблон(НСтр("ru='Не удалось получить доступ к файлу изображений по указанному пути: ""%1""'"), ПолныйПутьКФайлу);
		КонецЕсли;
		
		Если СообщениеОбОшибке <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(СообщениеОбОшибке);
			Возврат Неопределено;
		Иначе
			Возврат Новый ДвоичныеДанные(ПолныйПутьКФайлу);
		КонецЕсли;
	Иначе
		Возврат Файл.Получить();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруСохраненияФайлаРедактируемогоЭлемента(ДвоичныеДанныеФайла, ЗаписьРегистра) Экспорт
	
	СтруктураСохраненияФайла = Новый Структура("Файл, ПутьКФайлу");
	
	СохранитьВБазе = Истина;
	ТекстСообщения = "";
	
	ПутьКАрхивуИзображений = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("ПутьКАрхивуИзображений");
	
	Если ЗначениеЗаполнено(ПутьКАрхивуИзображений) Тогда
		
		ОтносительныйПуть = СтрШаблон("%1_%2_%3_%4.%5", ЗаписьРегистра.Документ.УникальныйИдентификатор(), ЗаписьРегистра.ИндексШаблона, ЗаписьРегистра.ИдентификаторЭлемента, ЗаписьРегистра.Тип, ЗаписьРегистра.Расширение);
		ПолныйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуИзображений) + ОтносительныйПуть;
		Попытка
			ДвоичныеДанныеФайла.Записать(ПолныйПуть);
			СохранитьВБазе = Ложь;
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось сохранить файл %1'"), ПолныйПуть);
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru='Необходимо заполнить настройку медицинского учета ""Путь к архиву изображений шаблонов приёмов""'");
	КонецЕсли;
	
	Если СохранитьВБазе Тогда
		СтруктураСохраненияФайла.Файл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		СтруктураСохраненияФайла.ПутьКФайлу = ОтносительныйПуть;
	КонецЕсли;
	
	Возврат СтруктураСохраненияФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьРасширениеПоИмениТипаДокумента(ИмяТипаДокумента)
	
	РасширенияПоИмениТипа = Новый Соответствие;
	РасширенияПоИмениТипа.Вставить("Документ.СписокНаПрохождениеМедосмотра", "pdf");
	РасширенияПоИмениТипа.Вставить("Документ.ПрохождениеМедосмотра",		 "pdf");
	РасширенияПоИмениТипа.Вставить("Справочник.МедицинскиеКарты",			 "mxl");
	РасширенияПоИмениТипа.Вставить("Документ.Форма066",						 "mxl");
	
	Возврат РасширенияПоИмениТипа.Получить(ИмяТипаДокумента);
	
КонецФункции

Процедура ПереместитьФайлЭМД(ПутьКАрхивуЭМД, Знач ДанныеФайла, РежимВыгрузки, КоличествоПеремещённыхФайлов)
	
	Расширение = ДанныеФайла.Расширение;
	Документ = ДанныеФайла.Документ;
	УИД_ЭМД = ДанныеФайла.УИД_ЭМД;
	
	Если РежимВыгрузки = 1 Тогда
		// Из базы в архив
		
		Если Не ЗначениеЗаполнено(Расширение) Тогда
			Расширение = ПолучитьРасширениеПоИмениТипаДокумента(ДопСерверныеФункции.ИмяСсылочногоТипа(Документ));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УИД_ЭМД) Тогда
			ИмяФайла = СтрШаблон("%1_%2", Строка(Документ.УникальныйИдентификатор()), Строка(УИД_ЭМД));
		Иначе
			ИмяФайла = Строка(Документ.УникальныйИдентификатор());
		КонецЕсли;
		
		ОтносительныйПуть = СтрШаблон("%1.%2", ИмяФайла, Расширение);
		
		ПутьКНовомуФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуЭМД) + ОтносительныйПуть;
		ДанныеФайла.ЭМД.Получить().Записать(ПутьКНовомуФайлу);
		
		ФайлЭМД = Новый Файл(ПутьКНовомуФайлу);
		Если ФайлЭМД.Существует() Тогда
			
			НЗ = РегистрыСведений.ФайлыЭМД.СоздатьНаборЗаписей();
			НЗ.Отбор.Документ.Установить(Документ);
			НЗ.Отбор.УИД_ЭМД.Установить(УИД_ЭМД);
			
			СтрокаФайлаЭМД = НЗ.Добавить();
			СтрокаФайлаЭМД.Документ		= Документ;
			СтрокаФайлаЭМД.УИД_ЭМД		= УИД_ЭМД;
			СтрокаФайлаЭМД.ЭМД			= Неопределено;
			СтрокаФайлаЭМД.ПутьКФайлу	= ОтносительныйПуть;
			СтрокаФайлаЭМД.Расширение	= Расширение;
			
			НЗ.Записать(Истина);
			КоличествоПеремещённыхФайлов = КоличествоПеремещённыхФайлов + 1;
		КонецЕсли;
	Иначе
		// Из архива в базу
		
		ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуЭМД) + ДанныеФайла.ПутьКФайлу;
		ФайлЭМД = Новый Файл(ПолныйПутьКФайлу);
		Если ФайлЭМД.Существует() Тогда
			ДДФайла = Новый ДвоичныеДанные(ПолныйПутьКФайлу);
			
			НЗ = РегистрыСведений.ФайлыЭМД.СоздатьНаборЗаписей();
			НЗ.Отбор.Документ.Установить(Документ);
			НЗ.Отбор.УИД_ЭМД.Установить(УИД_ЭМД);
			
			СтрокаФайлаЭМД = НЗ.Добавить();
			СтрокаФайлаЭМД.Документ		= Документ;
			СтрокаФайлаЭМД.УИД_ЭМД		= УИД_ЭМД;
			СтрокаФайлаЭМД.ЭМД			= Новый ХранилищеЗначения(ДДФайла, Новый СжатиеДанных(9));
			СтрокаФайлаЭМД.ПутьКФайлу	= Неопределено;
			СтрокаФайлаЭМД.Расширение	= Расширение;
			
			НЗ.Записать(Истина);
			КоличествоПеремещённыхФайлов = КоличествоПеремещённыхФайлов + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьИзображениеПриема(ПутьКАрхивуИзображений, Знач ДанныеФайла, РежимВыгрузки, КоличествоПеремещённыхФайлов)
	
	Если ДанныеФайла.Тип = Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок Тогда
		Расширение = "png";
	Иначе
		Расширение = СтрЗаменить(ДанныеФайла.Расширение, ".", "");
	КонецЕсли;
	
	Документ = ДанныеФайла.Документ;
	ИндексШаблона = ДанныеФайла.ИндексШаблона;
	ИдентификаторЭлемента = ДанныеФайла.ИдентификаторЭлемента;
	Тип = ДанныеФайла.Тип;
	
	Если РежимВыгрузки = 1 Тогда
		// Из базы в архив
		
		ОтносительныйПуть = СтрШаблон("%1_%2_%3_%4.%5", Строка(Документ.УникальныйИдентификатор()), Строка(ИндексШаблона), Строка(ИдентификаторЭлемента), Строка(Тип), Расширение);
		
		ПутьКНовомуФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуИзображений) + ОтносительныйПуть;
		ДанныеФайла.Файл.Получить().Записать(ПутьКНовомуФайлу);
		
		ФайлИзображения = Новый Файл(ПутьКНовомуФайлу);
		Если ФайлИзображения.Существует() Тогда
			
			НЗ = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
			НЗ.Отбор.Документ.Установить(Документ);
			НЗ.Отбор.ИндексШаблона.Установить(ИндексШаблона);
			НЗ.Отбор.ИдентификаторЭлемента.Установить(ИдентификаторЭлемента);
			НЗ.Отбор.Тип.Установить(Тип);
			
			СтрокаФайлаЭМД = НЗ.Добавить();
			СтрокаФайлаЭМД.Документ				 = Документ;
			СтрокаФайлаЭМД.ИндексШаблона		 = ИндексШаблона;
			СтрокаФайлаЭМД.ИдентификаторЭлемента = ИдентификаторЭлемента;
			СтрокаФайлаЭМД.Тип					 = Тип;
			СтрокаФайлаЭМД.Файл					 = Неопределено;
			СтрокаФайлаЭМД.ПутьКФайлу			 = ОтносительныйПуть;
			СтрокаФайлаЭМД.Расширение			 = Расширение;
			
			НЗ.Записать(Истина);
			КоличествоПеремещённыхФайлов = КоличествоПеремещённыхФайлов + 1;
		КонецЕсли;
	Иначе
		// Из архива в базу
		
		ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуИзображений) + ДанныеФайла.ПутьКФайлу;
		ФайлИзображения = Новый Файл(ПолныйПутьКФайлу);
		Если ФайлИзображения.Существует() Тогда
			ДДФайла = Новый ДвоичныеДанные(ПолныйПутьКФайлу);
			
			НЗ = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
			НЗ.Отбор.Документ.Установить(Документ);
			НЗ.Отбор.ИндексШаблона.Установить(ИндексШаблона);
			НЗ.Отбор.ИдентификаторЭлемента.Установить(ИдентификаторЭлемента);
			НЗ.Отбор.Тип.Установить(Тип);
			
			СтрокаФайлаЭМД = НЗ.Добавить();
			СтрокаФайлаЭМД.Документ				 = Документ;
			СтрокаФайлаЭМД.ИндексШаблона		 = ИндексШаблона;
			СтрокаФайлаЭМД.ИдентификаторЭлемента = ИдентификаторЭлемента;
			СтрокаФайлаЭМД.Тип					 = Тип;
			СтрокаФайлаЭМД.Файл					 = Новый ХранилищеЗначения(ДДФайла, Новый СжатиеДанных(9));
			СтрокаФайлаЭМД.ПутьКФайлу			 = Неопределено;
			СтрокаФайлаЭМД.Расширение			 = Расширение;
			
			НЗ.Записать(Истина);
			КоличествоПеремещённыхФайлов = КоличествоПеремещённыхФайлов + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти