 
#Область ПрограммныйИнтерфейс

Функция ПравоДоступаКМедицинскомуОтчету(ИдентификаторОтчета) Экспорт
	
	Если Не МедицинскаяОтчетность.ЭтоВнешнийОтчет(ИдентификаторОтчета) Тогда
		
		Если Метаданные.Документы.Найти(ИдентификаторОтчета) <> Неопределено Тогда // Это документ.
			
			
			Если НЕ ПравоДоступа("Изменение", Метаданные.Документы[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли Метаданные.Отчеты.Найти(ИдентификаторОтчета) <> Неопределено Тогда // Это отчет.
			
			Если Не ПравоДоступа("Использование", Метаданные.Отчеты[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторОтчета) Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт

	Если Организация = Неопределено ИЛИ Организация = МедицинскаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Филиалы") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(СписокПоказателей) = Тип("Строка") Тогда
		
		СписокПоказателейСтрока = Строка(СписокПоказателей);
		СписокПоказателей = Новый СписокЗначений;
		ВхождениеЗапятой = СтрНайти(СписокПоказателейСтрока, ",");
		Пока ВхождениеЗапятой <> 0 Цикл
			ИмяПоказателя = СокрЛП(Лев(СписокПоказателейСтрока, ВхождениеЗапятой - 1));
			СписокПоказателейСтрока = Сред(СписокПоказателейСтрока, ВхождениеЗапятой + 1);
			ВхождениеЗапятой = СтрНайти(СписокПоказателейСтрока, ",");
			Если ПустаяСтрока(ИмяПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			СписокПоказателей.Добавить("", ИмяПоказателя);
		КонецЦикла;
		ИмяПоказателя = СокрЛП(СписокПоказателейСтрока);
		Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
			СписокПоказателей.Добавить("", ИмяПоказателя);
		КонецЕсли;
		
	КонецЕсли;	
				
	Возврат МедицинскаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(Организация, ДатаЗначения, СписокПоказателей);

КонецФункции

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона) Экспорт
    	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЧисловойКодРегиона);

КонецФункции

Процедура ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
	
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
КонецПроцедуры

Процедура УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
	
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
КонецПроцедуры

Процедура ВывестиРазделВТабличныйДокументНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МедицинскаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

Функция КодРегионаПоНазванию(Название) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Название) Тогда
		Возврат "";
	КонецЕсли;
	
	Назв = СокрЛП(Название);
	КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(Назв);
	
	Если ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат Формат(КодРегиона, "ЧЦ=2; ЧВН=");
	КонецЕсли;
	
	ПервыйПробел = СтрНайти(Назв, " ");
	Если ПервыйПробел <> 0 Тогда
		Назв = Лев(Назв, ПервыйПробел - 1);
	КонецЕсли;
	
	МакетРегионы = Обработки.ОбщиеОбъектыМедОтчетности.ПолучитьМакет("Регионы");
	НРегАдресРегион = НРег(Название);
	Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
		ТекРегион = СокрЛП(МакетРегионы.Область(Инд, 1, Инд, 1).Текст);
		Если Лев(НРегАдресРегион, СтрДлина(ТекРегион)) = НРег(ТекРегион) Тогда
			Возврат СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВерсияФормы) Экспорт
	
	ВерсияФормыДанных = Док.ДанныеОтчета.Получить().ВерсияФормы;
	
	Если НЕ МедицинскаяОтчетность.ПродолжитьПриНесоответствииВерсийФорм(ВерсияФормыДанных, ВерсияФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаМедОтч) Экспорт
	
	ПредставлениеДокументаМедОтч = МедицинскаяОтчетностьКлиентСервер.ПредставлениеДокументаМедОтч(Док.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(Док.ДатаНачала));
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецДня(Док.ДатаОкончания));
	ПараметрыФормы.Вставить("мСохраненныйДок",          Док.Ссылка);
	ПараметрыФормы.Вставить("мПериодичность",           Док.Периодичность);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          Док.ВыбраннаяФорма);
	ПараметрыФормы.Вставить("ИсточникОтчета",           Док.ИсточникОтчета);
	ПараметрыФормы.Вставить("Организация",              Док.Организация);
			
	Возврат ПараметрыФормы;
	
КонецФункции

Функция РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	Иначе
		ИмяТекОбласти = ТекущаяОбласть.Имя;
		ПозицияНачалаИмениПараметра = СтрНайти(ИмяТекОбласти, "П0");
		ИмяАктивногоРаздела = Сред(ИмяТекОбласти, ПозицияНачалаИмениПараметра, ДлИмениОбласти);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма поддержки внешних медицинских отчетов.

Функция СвойстваВнешнегоОтчета(ОбъектЭлемент, Отчет) Экспорт
	
	СвойстваОтчета = Новый Структура;
	
	// создаем объект из выбранного внешнего отчета
	Если ЭтоАдресВременногоХранилища(Отчет) Тогда 
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ПолучитьИзВременногоХранилища(Отчет).Записать(ИмяФайлаОтчета);
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета);
		Исключение
			
			ТекстПредупреждения = 	"Ошибка при загрузке внешнего отчета. Выбран недопустимый вариант отчета.
									|
									|" + ИнформацияОбОшибке().Описание;
			СвойстваОтчета.Вставить("Результат", Ложь);
			СвойстваОтчета.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Возврат СвойстваОтчета;
		КонецПопытки;
		УдалитьФайлы(ИмяФайлаОтчета);
	Иначе
		ОбъектОтчет = Отчет;
	КонецЕсли;
	
	// заполняем свойства внешнего отчета
	ПолнаяВерсияВнешнегоОтчета = ПолучитьВерсиюМедицинскогоОтчета(ОбъектОтчет);
	СвойстваПолнойВерсии = РазложитьПолнуюВерсиюМедицинскогоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	СвойстваОтчета.Вставить("Результат", Истина);
	
	СвойстваОтчета.Вставить("ИДКонфигурацииМетаданные", Метаданные.Имя);
	СвойстваОтчета.Вставить("ИДКонфигурацииИмя", МедицинскаяОтчетностьПереопределяемый.ИДКонфигурации());
	
	СвойстваОтчета.Вставить("ВерсияКонфигурацииВнешнегоОтчета", СвойстваПолнойВерсии.ВерсияКонфигурации);
	СвойстваОтчета.Вставить("ВерсияКонфигурацииМетаданные", Метаданные.Версия);
	
	СвойстваОтчета.Вставить("КраткаяВерсияВнешнегоОтчета", СвойстваПолнойВерсии.КраткаяВерсия);
	СвойстваОтчета.Вставить("ОбъектОтчетМетаданныеИмя", ОбъектОтчет.Метаданные().Имя);
	
	Возврат СвойстваОтчета;
	
КонецФункции

Функция ЗарегистрироватьВнешнийОтчет(ОбъектСсылка, Отчет) Экспорт
	
	Результат = Новый Структура;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ТекстПредупреждения = "Метод не предназначен для использования в модели сервиса";
		Результат.Вставить("Зарегистрирован", Ложь);
		Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		Возврат Результат;
	КонецЕсли;
	
	// Создаем объект из выбранного внешнего отчета
	Если ЭтоАдресВременногоХранилища(Отчет) Тогда 
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ПолучитьИзВременногоХранилища(Отчет).Записать(ИмяФайлаОтчета);
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета);
		Исключение
			ТекстПредупреждения = 	"Ошибка при загрузке внешнего отчета:
									|
									|" + ИнформацияОбОшибке().Описание;
			Результат.Вставить("Зарегистрирован", Ложь);
			Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Возврат Результат;
		КонецПопытки;
		УдалитьФайлы(ИмяФайлаОтчета);
	КонецЕсли;
	
	Если ОбъектСсылка = Справочники.МедицинскиеОтчеты.ПустаяСсылка() Тогда 
		ОбъектЭлемент = Неопределено;
	Иначе
		ОбъектЭлемент = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	МетаданныеОтчета = ОбъектОтчет.Метаданные();
	ИмяМетаданныхОтчета = МетаданныеОтчета.Имя;
	СинонимМетаданныхОтчета = МетаданныеОтчета.Синоним;
	КомментарийКМетаданнымОтчета = МетаданныеОтчета.Комментарий;
	
	Если ОбъектЭлемент = Неопределено
		Или ПустаяСтрока(ОбъектЭлемент.ИсточникОтчета)
	Тогда
		Результат.Вставить("ИсточникОтчета", ИмяМетаданныхОтчета);
	Иначе
		Результат.Вставить("ИмяМетаданныхОтчета", ИмяМетаданныхОтчета);
	КонецЕсли;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.Наименование) Тогда
		Результат.Вставить("Наименование", ?(ЗначениеЗаполнено(СинонимМетаданныхОтчета), СинонимМетаданныхОтчета, ОбъектЭлемент.ИсточникОтчета));
	КонецЕсли;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.Описание) И ЗначениеЗаполнено(КомментарийКМетаданнымОтчета) И КомментарийКМетаданнымОтчета <> МетаданныеОтчета.Синоним Тогда
		Результат.Вставить("Описание", КомментарийКМетаданнымОтчета);
	КонецЕсли;
	
	Результат.Вставить("ВнешнийОтчетИспользовать", Истина);
	
	ПолнаяВерсияВнешнегоОтчета = ПолучитьВерсиюМедицинскогоОтчета(ОбъектОтчет);
	СвойстваПолнойВерсии = РазложитьПолнуюВерсиюМедицинскогоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	Результат.Вставить("ВнешнийОтчетВерсия", СвойстваПолнойВерсии.КраткаяВерсия);
	
	Результат.Вставить("Зарегистрирован", Истина);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВерсиюМедицинскогоОтчета(ОбъектОтчет) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектОтчет, "мВерсияОтчета") Тогда
		Возврат ОбъектОтчет.мВерсияОтчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РазложитьПолнуюВерсиюМедицинскогоОтчета(ПолнаяВерсия) Экспорт
	
	Результат = Новый Структура("ВерсияКонфигурации, КраткаяВерсия, Подверсия");
	
	Результат.КраткаяВерсия =  ПолнаяВерсия;
	
	Если ЗначениеЗаполнено(ПолнаяВерсия) Тогда
		
		КраткаяВерсия = Результат.КраткаяВерсия;
		СтрДлинаКраткаяВерсия = СтрДлина(КраткаяВерсия);
		Для ОбратныйИндекс = 1 По СтрДлинаКраткаяВерсия Цикл
			Инд = СтрДлинаКраткаяВерсия - ОбратныйИндекс + 1;
			ТекСимв = Сред(КраткаяВерсия, Инд, 1);
			Если ТекСимв = "." Тогда
				Результат.ВерсияКонфигурации = СокрЛП(Лев(КраткаяВерсия, Инд - 1));
				Результат.Подверсия = СокрЛП(Сред(КраткаяВерсия, Инд + 1));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсточникОтчета(ИмяФормыСтр) Экспорт
	
	МассивИмениФормы = СтрРазделить(ИмяФормыСтр, ".", Ложь);
	Если СтрНачинаетсяС(МассивИмениФормы[1], "МедицинскийОтчет") Тогда
		Возврат МассивИмениФормы[1];
		
	КонецЕсли;
	
	Для Каждого ЭлементИмени Из МассивИмениФормы Цикл
		Если СтрНачинаетсяС(ЭлементИмени, "МедицинскийОтчет") Тогда
			Возврат ЭлементИмени;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ОтчетОбъект(ИсточникОтчета) Экспорт
	
	ОтчетСсылка = МедицинскаяОтчетность.ОтчетСсылка(ИсточникОтчета);
	ЭтоВнешнийОтчет = МедицинскаяОтчетность.ЭтоВнешнийОтчет(ОтчетСсылка);
	
	Если ЭтоВнешнийОтчет Тогда
		
		ВременныйФайл = МедицинскаяОтчетность.ФайлОтчета(ОтчетСсылка);
		Возврат ВнешниеОтчеты.Создать(ВременныйФайл, Ложь);
		
	Иначе
		Попытка
			МенеджерОтчета = Отчеты[ИсточникОтчета];
		Исключение
			ТекстОшибки = НСтр("ru='Источник отчета'") + " """ + ИсточникОтчета + """ " + НСтр("ru='не существует в метаданных конфигурации'");
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		Возврат Отчеты[ИсточникОтчета].Создать();
	КонецЕсли;
	
КонецФункции

Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если СтрНайти(ЭтаФормаИмя, "Внешний") > 0 Тогда
		ФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
		Попытка
			Возврат ВнешниеОтчеты.Создать(Сред(Лев(ФормаИмя, СтрНайти(ФормаИмя, ".Форма.") - 1), 7));
		Исключение
			Возврат ВнешнийОтчетВФоновомЗадании(Сред(Лев(ФормаИмя, СтрНайти(ФормаИмя, ".Форма.") - 1), 7));
		КонецПопытки;
	ИначеЕсли СтрНачинаетсяС(ЭтаФормаИмя, "Документ") Тогда
		Возврат Документы[Сред(Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1), 10)].СоздатьДокумент();
	Иначе
		Возврат Отчеты[Сред(Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1), 7)].Создать();
	КонецЕсли;
	
КонецФункции

Функция ОтчетМетаданные(ИсточникОтчета) Экспорт
	
	ОтчетСсылка = МедицинскаяОтчетность.ОтчетСсылка(ИсточникОтчета);
	ЭтоВнешнийОтчет = МедицинскаяОтчетность.ЭтоВнешнийОтчет(ОтчетСсылка);
	
	Если ЭтоВнешнийОтчет Тогда 
		
		ВременныйФайл = МедицинскаяОтчетность.ФайлОтчета(ОтчетСсылка);
		Возврат ВнешниеОтчеты.Создать(ВременныйФайл, Ложь).Метаданные();
		
	Иначе
		Попытка
			Возврат Метаданные.Отчеты[ИсточникОтчета]
		Исключение
			ТекстОшибки = НСтр("ru='Источник отчета'") + " """ + ИсточникОтчета + """ " + НСтр("ru='не существует в метаданных конфигурации'");
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция ОтчетФабрикаМакетов(ИсточникОтчета) Экспорт
	
	ОтчетСсылка = МедицинскаяОтчетность.ОтчетСсылка(ИсточникОтчета);
	ЭтоВнешнийОтчет = МедицинскаяОтчетность.ЭтоВнешнийОтчет(ОтчетСсылка);
	
	Если ЭтоВнешнийОтчет Тогда 
		ВременныйФайл = МедицинскаяОтчетность.ФайлОтчета(ОтчетСсылка);
		Возврат ВнешниеОтчеты.Создать(ВременныйФайл, Ложь);
	Иначе
		Попытка
			Возврат Отчеты[ИсточникОтчета].Создать();
		Исключение
			ТекстОшибки = НСтр("ru='Источник отчета'") + " """ + ИсточникОтчета + """ " + НСтр("ru='не существует в метаданных конфигурации'");
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция ВнешнийОтчетВФоновомЗадании(НаимМедОтчета)
	МедОтч = Справочники.МедицинскиеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", НаимМедОтчета);
	Если МедОтч = Справочники.МедицинскиеОтчеты.ПустаяСсылка() Тогда
		Если Метаданные.Отчеты.Найти(НаимМедОтчета) <> Неопределено Тогда
			Возврат Отчеты[НаимМедОтчета];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	МедицинскиеОтчеты.ВнешнийОтчетИспользовать,
	                      |	МедицинскиеОтчеты.ИсточникОтчета,
	                      |	ВЫБОР
	                      |		КОГДА МедицинскиеОтчеты.ВнешнийОтчетИспользовать
	                      |			ТОГДА МедицинскиеОтчеты.ВнешнийОтчетХранилище
	                      |		ИНАЧЕ NULL
	                      |	КОНЕЦ КАК ВнешнийОтчетХранилище
	                      |ИЗ
	                      |	Справочник.МедицинскиеОтчеты КАК МедицинскиеОтчеты
	                      |ГДЕ
	                      |	МедицинскиеОтчеты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", МедОтч);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ПризнакИспользованияВнешнегоОтчета = Выборка.ВнешнийОтчетИспользовать;
	Если ПризнакИспользованияВнешнегоОтчета Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Выборка.ВнешнийОтчетХранилище.Получить());
		ИмяОбработки = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Ложь,
				ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
		Возврат ВнешниеОтчеты.Создать(ИмяОбработки, Истина);
	КонецЕсли;
КонецФункции

Функция ПолныйПутьКФорме(ИсточникОтчета, ВыбраннаяФорма) Экспорт
	
	ЭтоВнешнийОтчет = МедицинскаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета);
	Возврат ?(ЭтоВнешнийОтчет, "ВнешнийОтчет.", "Отчет.") + ИсточникОтчета + ".Форма." + ВыбраннаяФорма;
	
КонецФункции

Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт

	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если СтрНайти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли; 
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, Постфикс = "ХХ_1") Экспорт
	
	// Определим область удаляемой строки.
	НазначитьИмяОбластиМЧ = Ложь;
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,);
	Если СтрНайти(УдаляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = УдаляемаяОбласть.Имя;
	КонецЕсли;
	// Определяем позицию области ячейки номера строки, если она содержится в удаляемой строке.
	ПозицияОбластиЯчейкиНомераСтроки = 0;
	ОбластьЯчейкиНомераСтроки = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,).Области.Найти(ИмяГруппы + Постфикс);
	Если ОбластьЯчейкиНомераСтроки <> Неопределено Тогда
		Если НЕ ОбластьЯчейкиНомераСтроки.СодержитЗначение Тогда
			ПозицияОбластиЯчейкиНомераСтроки = ОбластьЯчейкиНомераСтроки.Лево;
		КонецЕсли; 
	КонецЕсли; 
	// Непосредственно удаляем область строки табличного документа.
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	// Восстанавливаем ячейку номера строки, если она была в составе удаленной области.
	Если ПозицияОбластиЯчейкиНомераСтроки > 0 Тогда
		ЗаменяемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, ПозицияОбластиЯчейкиНомераСтроки, НомерНижнЯчейкиОбласти, ПозицияОбластиЯчейкиНомераСтроки);
		ТекстОбластиЯчейкиНомераСтроки = ОбластьЯчейкиНомераСтроки.Текст;
		ЗаполнитьЗначенияСвойств(ЗаменяемаяОбласть, ОбластьЯчейкиНомераСтроки,, "Имя");
		ЗаменяемаяОбласть.Текст = ТекстОбластиЯчейкиНомераСтроки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеОтчетногоПериода(ДатаНачалаОтчетногоПериода, ДатаОкончанияОтчетногоПериода, ФП = "Истина") Экспорт

	ДатаНачалаОП    = ?(ЗначениеЗаполнено(ДатаНачалаОтчетногоПериода), ДатаНачалаОтчетногоПериода, Дата(1, 1, 1));
	ДатаОкончанияОП = ?(ЗначениеЗаполнено(ДатаОкончанияОтчетногоПериода), ДатаОкончанияОтчетногоПериода, Дата(1, 1, 1));
	ДатаОкончанияОП = ?(ДатаНачалаОП > ДатаОкончанияОП, ДатаНачалаОП, ДатаОкончанияОП);
	
	ПредставлениеФинПериода = ПредставлениеПериода(НачалоДня(ДатаНачалаОП), КонецДня(ДатаОкончанияОП), "Л=ru_RU;ФП=" + ФП);
	
	Если ЗначениеЗаполнено(ДатаОкончанияОтчетногоПериода) Тогда
		
		ПредставлениеФинПериодаГод = ПредставлениеПериода(НачалоГода(ДатаОкончанияОП), КонецГода(ДатаОкончанияОП), "Л=ru_RU;ФП=" + ФП);
		
		Если ФП = "Ложь"
		   И ДатаНачалаОП = НачалоГода(ДатаНачалаОП)
		Тогда
			
			Если СтрНайти(ПредставлениеФинПериода, "1 квартал") > 0 Тогда
				
				ПредставлениеФинПериода = СтрЗаменить(ПредставлениеФинПериода, НСтр("ru='1 квартал'"), НСтр("ru='Январь - Март'"));
				
			ИначеЕсли ПредставлениеФинПериода = ПредставлениеФинПериодаГод Тогда
				
				ПредставлениеФинПериода = НСтр("ru='Январь - Декабрь '") + ПредставлениеФинПериодаГод;
				
			КонецЕсли;	
			
		КонецЕсли;
						
		Если СтрНайти(ПредставлениеФинПериода, ПредставлениеФинПериодаГод) > 0 Тогда
			
			ПредставлениеФинПериода = СтрЗаменить(СтрЗаменить(ПредставлениеФинПериода, ПредставлениеФинПериодаГод, ""), "  ", " ")
									+ ПредставлениеФинПериодаГод;
									
		КонецЕсли; 
	КонецЕсли;
		
	Возврат ПредставлениеФинПериода;
	
КонецФункции

Процедура РазрешитьВводДанныхВОбластьАвтоЗаполнения(ЦветОбластиРучногоВвода, ОбрабатываемаяОбласть) Экспорт
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

Процедура ЗапретитьВводДанныхВОбласть(ЦветНедоступнойОбласти, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина) Экспорт
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазрешитьВводДанныхВОбласть(ЦветОбластиРучногоВвода, ОбрабатываемаяОбласть) Экспорт
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

#КонецОбласти
