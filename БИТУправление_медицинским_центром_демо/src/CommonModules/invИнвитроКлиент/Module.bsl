
#Область ПрограммныйИнтерфейс

// Получить правила забора указанного анализа для данной лаборатории.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура анализа, для которой получаем правила забора.
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - лаборатория, для которой получаем правила забора.
// 
// Возвращаемое значение:
//   - Массив из Структура:
//  	* Биоматериал 					- Строка
//  	* ВыборНесколькихПравилЗабора 	- Булево
//  	* ИДБиоматериала 				- Строка
//  	* ИДКонтейнера 					- Строка
//  	* ИдПравила 					- УникальныйИдентификатор
//  	* Контейнер 					- Строка
//  	* Обязательное 					- Булево
//  	* Пометка 						- Булево
//  	* Представление 				- Неопределено.
//
Функция ПолучитьПравилаЗабораАнализа(Номенклатура, Лаборатория, ФормаДокумента) Экспорт
	
	Перем ДанныеКешаНоменклатуры;
	Перем ПравилаЗабораАнализа;
	
	Если глКешНСИЛаборатории.Свойство("Invitro") Тогда		
		Для Каждого Анализ Из глКешНСИЛаборатории.Invitro.НоменклатураАнализов Цикл 
			Если Анализ.Номенклатура = Номенклатура
				И Анализ.Лаборатория = Лаборатория
			Тогда 
				ДанныеКешаНоменклатуры = Анализ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеКешаНоменклатуры) Тогда
			ПравилаЗабораАнализа = ПолучитьПравилаАнализаИзКешаПоАнализу(ДанныеКешаНоменклатуры.ИД, Лаборатория);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПравилаЗабораАнализа) = Тип("Структура") Тогда
		
		ПравилаЗабора = Новый Массив;
		АдресХранилищаРезультата = ПоместитьВоВременноеХранилище(ПравилаЗабора, Новый УникальныйИдентификатор); // Адрес в хранилище нужно получить уже сейчас.
		
		IDТекущийПродукт = ПравилаЗабораАнализа.УИД;
		ПараметрыОбработкиОбщ = Новый Структура("АдресХранилищаРезультата, ПравилаЗабора, IdВыборБМ", АдресХранилищаРезультата, ПравилаЗабора);
		
		Если ПравилаЗабораАнализа.ВыборБМ.Количество() > 0 Тогда
			Для Каждого ЭлементВыбораБМ Из ПравилаЗабораАнализа.ВыборБМ Цикл
				
				ПараметрыОбработки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОбработкиОбщ);
				
				ПараметрыОбработки.Вставить("IdВыборБМ", ЭлементВыбораБМ.Id);
				
				Если ЭлементВыбораБМ.БМ.Количество() > 1 Тогда
					
					ПараметрыВыбора = Новый Структура("СписокБиоматериалов", ЭлементВыбораБМ.БМ);
					ОповещениеВыбора = Новый ОписаниеОповещения("ПравилаЗабораАнализа_ПриВыбореБиоматериалаИзСписка", invИнвитроКлиент, ПараметрыОбработки);
					ОткрытьФорму("Обработка.invАРМПС2.Форма.ФормаВыбораБиоматериала", ПараметрыВыбора, ФормаДокумента,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
					
				ИначеЕсли ЭлементВыбораБМ.БМ.Количество() = 1 Тогда
					ПравилаЗабораАнализа_ПриВыбореБиоматериалаИзСписка(ЭлементВыбораБМ.БМ[0], ПараметрыОбработки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресХранилищаРезультата;
	
КонецФункции

&НаКлиенте
Процедура ПравилаЗабораАнализа_ПриВыбореБиоматериалаИзСписка(СсылкаБМ, ПараметрыОбработки) Экспорт
	
	Если СсылкаБМ <> Неопределено Тогда
		
		ПравилоЗабора = Новый Структура;
		ПравилоЗабора.Вставить("ИДБиоматериала",СсылкаБМ.УникальныйИдентификатор());
		ПравилоЗабора.Вставить("Биоматериал", ДопСерверныеФункции.ПолучитьРеквизит(СсылкаБМ, "Наименование"));
		ПравилоЗабора.Вставить("ИдПравила", ПараметрыОбработки.IdВыборБМ);
		ПравилоЗабора.Вставить("Обязательное", Истина);
		ПравилоЗабора.Вставить("Пометка", Истина);
		
		ПравилаЗабора = ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресХранилищаРезультата);
		ПравилаЗабора.Добавить(ПравилоЗабора);
		ПоместитьВоВременноеХранилище(ПравилаЗабора, ПараметрыОбработки.АдресХранилищаРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает для параметра забора массив допустимых для выбора значений на основании значения другого параметра.
//
// Параметры:
//  ТекущийПараметрЗабора	 - ПланВидовХарактеристикСсылка.invЛабораторныеПараметры - параметр забора, для которого получаем допустимые значения.
//  ПараметрыЗабора			 - ДанныеФормыКоллекция - данные всех параметров забора в форме документа "Действия над анализами".
// 
// Возвращаемое значение:
//   - Массив из СправочникСсылка.ЗначенияПараметровЗабора
//   - Неопределено, если для параметра забора не действует отбор определенных значений.
//
Функция ПолучитьДопустимыеЗначенияПараметраЗабора(ТекущийПараметрЗабора, ПараметрыЗабора) Экспорт
	
	Параметр_АдресКлиента_Страна = ПредопределенноеЗначение("ПланВидовХарактеристик.invЛабораторныеПараметры.АдресКлиента_Страна");
	Параметр_АдресКлиента_Регион = ПредопределенноеЗначение("ПланВидовХарактеристик.invЛабораторныеПараметры.АдресКлиента_Регион");
	Параметр_АдресКлиента_Город = ПредопределенноеЗначение("ПланВидовХарактеристик.invЛабораторныеПараметры.АдресКлиента_Город");

	Если ТекущийПараметрЗабора = Параметр_АдресКлиента_Регион Тогда
		ПараметрЗабораВладелец = Параметр_АдресКлиента_Страна;
	ИначеЕсли ТекущийПараметрЗабора = Параметр_АдресКлиента_Город Тогда
		ПараметрЗабораВладелец = Параметр_АдресКлиента_Регион;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаПараметры Из ПараметрыЗабора Цикл
		Если СтрокаПараметры.Параметр = ПараметрЗабораВладелец И глКешНСИЛаборатории.Свойство("Invitro") Тогда
			Если ЗначениеЗаполнено(СтрокаПараметры.Значение) Тогда
				Возврат глКешНСИЛаборатории.Invitro.ИерархияПараметровЗабораИЗначений.Получить(СтрокаПараметры.Значение);
			Иначе
				Возврат Новый Массив();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает для параметра забора массив зависимых параметров.
//
// Параметры:
//  ТекущийПараметрЗабора	 - ПланВидовХарактеристикСсылка.invЛабораторныеПараметры - параметр забора, для которого получаем зависимые параметры.
// 
// Возвращаемое значение:
//   - Массив из ПланВидовХарактеристикСсылка.invЛабораторныеПараметры
//   - Неопределено, если для параметра забора не определены зависимые параметры.
//
Функция ПолучитьЗависимыеПараметрыЗабора(ТекущийПараметрЗабора) Экспорт
	
	Если глКешНСИЛаборатории.Свойство("Invitro") Тогда
		Возврат глКешНСИЛаборатории.Invitro.ИерархияПараметровЗабораИЗначений.Получить(ТекущийПараметрЗабора);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает представление для кнопки отправки анализа в лабораторию из документа забора (интерактивно).
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект.ДействияНадАнализами	 - документ забора анализов.
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - Лаборатория.
// 
// Возвращаемое значение:
//  Строка - представление кнопки отправки заказа.
//
Функция ОтправитьЗаказИнтерактивно_ПредставлениеКоманды(ДокументОбъект, Лаборатория) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.InvЗаявка) Тогда
		Возврат НСтр("ru='Открыть заказ'") + " (Invitro)";
	Иначе
		Возврат НСтр("ru='Отправить заказ'") + " (Invitro)";
	КонецЕсли;
	
КонецФункции

// Выполняет открытие документа "Заявка на исследование",
// либо заполняет документ "Действия над анализами" данными документа "Заявка на исследование" и возвращает структуру с признаками изменений в документе.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект.ДействияНадАнализами	 - документ забора анализов.
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - Лаборатория.
// 
// Возвращаемое значение:
//  Структура, Неопределено.
//
Функция ОтправитьЗаказИнтерактивно(ДокументОбъект, Лаборатория) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.InvЗаявка) Тогда
		// Открытие отправленной заявки
		ОткрытьЗначение(ДокументОбъект.InvЗаявка); 
	Иначе
		// Отправка заявки
		InvЗаявка = invИнвитроСервер.СоздатьЗаявкуНаСервере(ДокументОбъект.Ссылка);
		
		Если ТипЗнч(InvЗаявка) = Тип("ДокументСсылка.invЗаявкаНаИсследование") Тогда
			
			ДокументОбъект.InvЗаявка = InvЗаявка;
			
			Контейнеры = invИнвитроСервер.КонтейнерыЗаявки(InvЗаявка);
			
			Для Каждого Контейнер Из Контейнеры Цикл
				КонтейнерСтр = ДокументОбъект.Контейнеры.Добавить();
				КонтейнерСтр.Лаборатория 	 = Лаборатория;
				КонтейнерСтр.Биоматериал 	 = Контейнер.Биоматериал;	
				КонтейнерСтр.НомерКонтейнера = КонтейнерСтр.НомерСтроки;
				КонтейнерСтр.Контейнер 	 	 = Контейнер.Контейнер;
				КонтейнерСтр.КодПробы 	 	 = Контейнер.ИЛН;
				
				КонтейнерСтр.БиоматериалПредставление 	= Контейнер.Биоматериал;
				КонтейнерСтр.КонтейнерПредставление	 	= Контейнер.Контейнер;                                                                      	
				
				СвойстваКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контейнер.Контейнер, "Температура, ОписаниеКонтейнераДоставки, Описание");
				КонтейнерСтр.УсловияХранения		= СвойстваКонтейнера.Температура;
				КонтейнерСтр.УсловияТранспортировки = СвойстваКонтейнера.ОписаниеКонтейнераДоставки;
				КонтейнерСтр.ПредставлениеАнализа 	= СвойстваКонтейнера.Описание;
			КонецЦикла;
			
			СделанныеИзменения = Новый Структура;
			СделанныеИзменения.Вставить("Изменен_Объект");
			СделанныеИзменения.Вставить("Изменен_Контейнеры");
			
			Возврат СделанныеИзменения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции                                           	

Функция ПолучитьПравилаАнализаИзКешаПоАнализу(КодПродукта, Лаборатория)
	
	Если глКешНСИЛаборатории.Invitro <> Неопределено И глКешНСИЛаборатории.Invitro.ПравилаАнализов.Количество() > 0 Тогда	
		Возврат глКешНСИЛаборатории.Invitro.ПравилаАнализов[КодПродукта];		
	КонецЕсли; 
					
КонецФункции

#КонецОбласти