#Область Зашифровать

Процедура Зашифровать(ОповещениеОЗавершении, СертификатОтправителя, ИмяФайлаДанных, СертификатПолучателя, ПараметрыКриптографии, 
						КаталогРезультата = Неопределено, ВыводитьСоообщения = Истина, МенеджерКриптографии = Неопределено) Экспорт
	
	ЗашифроватьВнутренняя(
		ОповещениеОЗавершении, СертификатОтправителя, ИмяФайлаДанных, СертификатПолучателя, 
		ПараметрыКриптографии, КаталогРезультата, ВыводитьСоообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ЗашифроватьВнутренняя(ОповещениеОЗавершении, СертификатОтправителя, ИмяФайлаДанных, СертификатПолучателя, ПараметрыКриптографии,
						КаталогРезультата, ВыводитьСоообщения, МенеджерКриптографии) Экспорт

	
	ВходящиеПараметры = ПараметрыВМассив(5, СертификатОтправителя, ИмяФайлаДанных, СертификатПолучателя, ПараметрыКриптографии, КаталогРезультата);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ЗашифроватьПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ЗашифроватьПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Оповещение = Новый ОписаниеОповещения("ЗашифроватьПослеПолученияИмениКаталога", ШифрованиеФССКлиент, ВходящийКонтекст);
		Если ЗначениеЗаполнено(ВходящийКонтекст.ВходящиеПараметры[4]) Тогда // Каталог результата
			ВыполнитьОбработкуОповещения(
				Оповещение,
				ПодготовитьРезультат(Истина, "ИмяКаталога", ВходящийКонтекст.ВходящиеПараметры[4], ВходящийКонтекст));
		Иначе
			СоздатьКаталогНаКлиенте(Оповещение, ВходящийКонтекст.ВыводитьСообщения);
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеПолученияИмениКаталога(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьПослеВыполнения", ШифрованиеФССКлиент, ВходящийКонтекст,
			"ЗашифроватьПриОшибкеВыполнения", ШифрованиеФССКлиент);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		
		Если ЗначениеЗаполнено(ВходящиеПараметры[0]) Тогда
			СертификатОтправителяСерийныйНомер = ВходящиеПараметры[0].СерийныйНомер;
			СертификатОтправителяПоставщик = ВходящиеПараметры[0].Поставщик;	
		Иначе
			СертификатОтправителяСерийныйНомер = "";
			СертификатОтправителяПоставщик = "";
		КонецЕсли;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовЗашифровать(
			Оповещение,
			ВходящиеПараметры[1], // исходный файл
			СертификатОтправителяСерийныйНомер, СертификатОтправителяПоставщик, // сертификат отправителя
			ВходящиеПараметры[2].СерийныйНомер, ВходящиеПараметры[2].Поставщик, // сертификат получателя
			Результат.ИмяКаталога, // каталог с результатом
			ВходящиеПараметры[3].АлгоритмШифрования, 
			ВходящиеПараметры[3].АлгоритмКлюча,
			ВходящиеПараметры[3].Режим
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "КаталогРезультата", Параметры[5], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ЗашифроватьПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"Зашифровать",
		ОписаниеОшибкиНеУдалосьЗашифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьМенеджерКриптографии

Процедура ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении,
		ИмяМетода,
		ВходящиеПараметры = Неопределено,
		ВыводитьСообщения = Истина,
		МенеджерКриптографии = Неопределено,
		ПараметрыОпределенияАлгоритма = Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Если ЗначениеЗаполнено(ВходящиеПараметры) Тогда
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
	КонецЕсли;
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения(
		ИмяМетода, ЭтотОбъект, Контекст);
		
	Если МенеджерКриптографии <> Неопределено Тогда
		Алгоритм = ?(ПараметрыОпределенияАлгоритма <> Неопределено И ПараметрыОпределенияАлгоритма.Свойство("Алгоритм"),
			ПараметрыОпределенияАлгоритма.Алгоритм, "");
		КонтекстДляАлгоритма = Новый Структура("Алгоритм, ТипКриптопровайдераВладельца", Алгоритм,
			?(ПараметрыОпределенияАлгоритма <> Неопределено
			И ПараметрыОпределенияАлгоритма.Свойство("ТипКриптопровайдераВладельца"),
			ПараметрыОпределенияАлгоритма.ТипКриптопровайдераВладельца, Неопределено));
		Результат = ПодготовитьРезультат(Истина, "МенеджерКриптографии",
			МенеджерКриптографии, КонтекстДляАлгоритма);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	Иначе
		СоздатьМенеджерКриптографии(
			Оповещение,
			ВыводитьСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографии(ОповещениеОЗавершении, ВыводитьСообщения, ПараметрыКриптографии = Неопределено, ПредлагатьУстановкуРасширения = Неопределено, ПослеУстановки = Ложь) Экспорт
	
	Попытка
		МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	ПутьВК = "ОбщийМакет.Шифрование";
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПутьВК", ПутьВК);
	Контекст.Вставить("ПослеУстановки", ПослеУстановки);
	Контекст.Вставить("ПараметрыКриптографии", ПараметрыКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ПредлагатьУстановкуРасширения", ПредлагатьУстановкуРасширения);
	
	Если МенеджерКриптографии = Неопределено Тогда // компонента еще не подключена
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияКомпоненты", ШифрованиеФССКлиент, Контекст);
		НачатьПодключениеВнешнейКомпоненты(Оповещение, ПутьВК, "ЭДОNative");
	Иначе
		СоздатьМенеджерКриптографииИнициализацияНачало(Контекст);
	КонецЕсли;
			
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПодключенияКомпоненты(Подключена, ВходящийКонтекст) Экспорт
	
	Если Подключена Тогда
		СоздатьМенеджерКриптографииИнициализацияНачало(ВходящийКонтекст);
	Иначе
		Если ВходящийКонтекст.ПослеУстановки Тогда
			// Побробовали установить компоненту, но не вышло
			
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии();
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
		Иначе
			// Возможно компонента еще не установлена
			Если ВходящийКонтекст.ПредлагатьУстановкуРасширения = Истина
				ИЛИ ВходящийКонтекст.ПредлагатьУстановкуРасширения = Неопределено И ВходящийКонтекст.ВыводитьСообщения Тогда
				Оповещение = Новый ОписаниеОповещения(
					"СоздатьМенеджерКриптографииПослеУстановкиКомпоненты", ШифрованиеФССКлиент, ВходящийКонтекст);
				НачатьУстановкуВнешнейКомпоненты(Оповещение, ВходящийКонтекст.ПутьВК);
			Иначе
				ВыполнитьОбработкуОповещения(
					ВходящийКонтекст.ОповещениеОЗавершении,
					ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии(), ВходящийКонтекст));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиКомпоненты(ВходящийКонтекст) Экспорт
	
	СоздатьМенеджерКриптографии(
		ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.ВыводитьСообщения,
		ВходящийКонтекст.ПараметрыКриптографии,, Истина);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииИнициализацияНачало(ВходящийКонтекст) Экспорт
	
	МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
	
	ВходящийКонтекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках", ШифрованиеФССКлиент, ВходящийКонтекст,
		"СоздатьМенеджерКриптографииПриОшибкеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках", ШифрованиеФССКлиент);	
		
	// Отключим вывод сообщений об ошибках пользователю. 
	// Ошибки будем получать из свойства СписокОшибок.
	МенеджерКриптографии.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Оповещение, Истина);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках(ВходящийКонтекст) Экспорт
	
	// Если в СоздатьМенеджерКриптографии были переданы значения параметров криптопровайдера,
	// то будут использованы они, иначе будут получены данные из ИБ или выполнен перебор по поддерживаемых криптопровайдерам.
	Если ВходящийКонтекст.ПараметрыКриптографии <> Неопределено Тогда
		ДоступныеКриптопровайдеры = Новый Массив;
		ДоступныеКриптопровайдеры.Добавить(ВходящийКонтекст.ПараметрыКриптографии);
	Иначе
		ДоступныеКриптопровайдеры = Неопределено;
		ОписаниеОшибки = "";
		Если Не ЗаполнитьПараметрыКриптографии(ДоступныеКриптопровайдеры, ОписаниеОшибки) Тогда
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщение, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДоступныеКриптопровайдеры", ДоступныеКриптопровайдеры);
	Контекст.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
	Контекст.Вставить("ТекущийКриптопровайдер", 0);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииПослеИнициализации", ШифрованиеФССКлиент, Контекст);
		
	СоздатьМенеджерКриптографииИнициализация(Оповещение, Контекст);

КонецПроцедуры

Функция ЗаполнитьПараметрыКриптографии(ДоступныеКриптопровайдеры, ОписаниеОшибки)
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ПутьМодуляКриптографии = ПутьМодуляКриптографии();
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			ОписаниеОшибки = НСтр("ru='Не указан путь модуля криптографии в настройках программы.'");
			Возврат Ложь;
		КонецЕсли;            
		КриптопровайдерCryptoPro = КриптопровайдерCryptoPro();
		
		ДоступныеКриптопровайдеры = Новый Массив;
		ДоступныеКриптопровайдеры.Добавить(Новый ФиксированнаяСтруктура(Новый Структура("Имя, Путь, Тип", КриптопровайдерCryptoPro.Имя, ПутьМодуляКриптографии, КриптопровайдерCryptoPro.Тип)));
		Возврат Истина;
	Иначе
		ПоддерживаемыеКриптопровайдеры = ПоддерживаемыеКриптопровайдеры();
		ДоступныеКриптопровайдеры = ПоддерживаемыеКриптопровайдеры;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьМенеджерКриптографииПриОшибкеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "НеВыводитьСообщенияОбОшибках",, ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииИнициализация(ОповещениеОЗавершении, ВходящийКонтекст)
	
	Имя = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Имя; 
	Путь = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Путь;
	Тип = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Тип;
		
	ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСоздатьМенеджераКриптографии(
		ОповещениеОЗавершении, Имя, Путь, Тип);
		
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеИнициализации(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	// Надо проверить не было ли ошибок при инициализации - проверить свойство СписокОшибок.
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации", ШифрованиеФССКлиент, ВходящийКонтекст);
	
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации(СписокОшибок, ВходящийКонтекст) Экспорт
	
	// Менеджер криптографии инициализовать не удалось.
	// Попробуем следующий криптопровайдер.
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		// Сохраним информацию в журнал регистрации.
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка создания менеджер криптографии (%2, %3, %4) по причине:
	              |%1'"),
			СписокОшибок,
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Имя, 
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Путь, 
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Тип); 
			
		//КриптографияЭДКОКлиентСервер.ЗаписатьСобытиеВЖурнал(ИмяСобытия(), "Информация", ОписаниеОшибки);
		
		// Создадим новый менеджер, чтобы обнулить свойство СписокОшибок 
		ВходящийКонтекст.МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
		
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибкахПовторно", ШифрованиеФССКлиент, ВходящийКонтекст);	
		
		// Отключим вывод сообщений об ошибках пользователю. 
		// Ошибки будем получать из свойства СписокОшибок.
		ВходящийКонтекст.МенеджерКриптографии.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Оповещение, Истина);	
	Иначе
		// Криптопровайдеры могут маскироваться под другие, например, ViPNet может маскироваться под CryptoPro.
		// Поэтому проверим установлен ли криптопровайдер в системе.
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПолученияСпискаКриптопровайдеров", ШифрованиеФССКлиент, ВходящийКонтекст);
		ПолучитьКриптопровайдеры(Оповещение, Истина, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибкахПовторно(ВходящийКонтекст) Экспорт
	
	// Попробуем следующий криптопровайдер.		
	Если ВходящийКонтекст.ТекущийКриптопровайдер < ВходящийКонтекст.ДоступныеКриптопровайдеры.ВГраница() Тогда
		ВходящийКонтекст.ТекущийКриптопровайдер = ВходящийКонтекст.ТекущийКриптопровайдер + 1;
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеИнициализации", ШифрованиеФССКлиент, ВходящийКонтекст);
		
		СоздатьМенеджерКриптографииИнициализация(Оповещение, ВходящийКонтекст);	
	Иначе
		// Менеджер криптографии инициализовать не удалось.
		ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии();
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПолученияСпискаКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		ТекущийКриптопровайдер = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер];
		КриптопровайдерУстановленВСистеме = Ложь;
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если ТекущийКриптопровайдер.Имя = Криптопровайдер.Имя
				И ТекущийКриптопровайдер.Тип = Криптопровайдер.Тип Тогда
				КриптопровайдерУстановленВСистеме = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КриптопровайдерУстановленВСистеме Тогда
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				ПодготовитьРезультат(Истина, "МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст));
		Иначе
			СписокОшибок = НСтр("ru = 'Менеджер криптографии успешно инициализирован с указанными параметрами криптопровайдера, но криптопровайдер не найден в системе.'");		
			СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации(СписокОшибок, ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область ПолучитьКриптопровайдер

Процедура ПолучитьКриптопровайдеры(ОповещениеОЗавершении, ТолькоПоддерживаемые, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ТолькоПоддерживаемые);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, 
		"ПолучитьКриптопровайдерыПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, 
		ВыводитьСообщения, 
		МенеджерКриптографии);
		
КонецПроцедуры   

Процедура ПолучитьКриптопровайдерыПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("Криптопровайдеры", Новый Массив);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьКриптопровайдерыЗавершение", ЭтотОбъект, Контекст);
			ПолучитьКриптопровайдерыПолучитьСледующий(Оповещение, Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Криптопровайдеры = Новый Массив;
		
		CryptoProCSP = КриптопровайдерCryptoPro();
		ViPNetCSP = КриптопровайдерViPNet();
		
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если ВходящийКонтекст.ВходящиеПараметры[0] // ТолькоПоддерживаемые
				И НЕ (CryptoProCSP.Имя = Криптопровайдер.Имя И CryptoProCSP.Тип = Криптопровайдер.Тип)
				И НЕ (ViPNetCSP.Имя = Криптопровайдер.Имя И ViPNetCSP.Тип = Криптопровайдер.Тип) Тогда
				Продолжить;
			КонецЕсли;		
			Криптопровайдеры.Добавить(Криптопровайдер);
		КонецЦикла;
		
		Результат = ПодготовитьРезультат(Истина, "Криптопровайдеры", Новый ФиксированныйМассив(Криптопровайдеры), ВходящийКонтекст);
	Иначе
		Результат = ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПолучитьСледующий(ОповещениеОЗавершении, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьКриптопровайдерыПослеПолучитьСледующийКриптопровайдер", ЭтотОбъект, Контекст,
		"ПолучитьКриптопровайдерыПриОшибкеПолучитьСледующийКриптопровайдер", ЭтотОбъект);
		
	Имя = "";
	Путь = "";
	Тип = 0;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийКриптопровайдер(Оповещение, Имя, Путь, Тип);
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПослеПолучитьСледующийКриптопровайдер(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // Криптопровайдер получен
		Криптопровайдер = Новый Структура("Имя,Путь,Тип", "", "", 0);
		Криптопровайдер.Имя = Параметры[0];
		Криптопровайдер.Путь = Параметры[1];
		Криптопровайдер.Тип = Параметры[2];
		
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Криптопровайдеры.Добавить(Новый ФиксированнаяСтруктура(Криптопровайдер));		
		ПолучитьКриптопровайдерыПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Истина, "Криптопровайдеры", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Криптопровайдеры, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПриОшибкеПолучитьСледующийКриптопровайдер(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийКриптопровайдер",, ИнформацияОбОшибке);			  
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьКаталогНаКлиенте

Процедура СоздатьКаталогНаКлиенте(ОповещениеОЗавершении, ВыводитьСообщения, ДвоичныеДанные=Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьКаталогНаКлиентеПослеПолученияКаталогаВременныхФайлов", ШифрованиеФССКлиент, Контекст);
	КаталогВременныхФайловНаКлиенте(Оповещение, ВыводитьСообщения, ДвоичныеДанные);
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеПолученияКаталогаВременныхФайлов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ИмяНовогоКаталога = Результат.ИмяКаталога + СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", "") + ПолучитьРазделительПути();
		
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ИмяКаталога", ИмяНовогоКаталога);
		
		#Если ВебКлиент Тогда
			ПредварительноСоздатьДвоичныеДанные(
				ВходящийКонтекст.ОповещениеОЗавершении, "СоздатьКаталогНаКлиентеПослеСозданияДвоичныхДанных",
				Контекст,
				Результат.ДвоичныеДанные,
				ВходящийКонтекст.ВыводитьСообщения);
		#Иначе
			Оповещение = Новый ОписаниеОповещения(
				"СоздатьКаталогНаКлиентеПослеСозданияКаталога", ШифрованиеФССКлиент, Контекст);
			НачатьСозданиеКаталога(Оповещение, ИмяНовогоКаталога);
		#КонецЕсли
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеСозданияДвоичныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		
		ИмяНовогоКаталога = ВходящийКонтекст.ВходящиеПараметры.ИмяКаталога;
		ВходящийКонтекст.Вставить("ИмяКаталога", ИмяНовогоКаталога);
		
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьКаталогНаКлиентеПослеВызоваСоздатьКаталог", ШифрованиеФССКлиент, ВходящийКонтекст,
			"СоздатьКаталогНаКлиентеПриОшибкеВызоваСоздатьКаталог", ШифрованиеФССКлиент);
		ВходящийКонтекст.ДвоичныеДанные.НачатьВызовСоздатьКаталог(Оповещение, ИмяНовогоКаталога);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеВызоваСоздатьКаталог(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	СоздатьКаталогНаКлиентеПослеСозданияКаталога(ВходящийКонтекст.ИмяКаталога, ВходящийКонтекст);
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПриОшибкеВызоваСоздатьКаталог(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	//СтандартнаяОбработка = Ложь;
	//ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
	//	ИмяСобытия(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),, Истина);
	//                 
	//ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьКаталог();
	////ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	//ВыполнитьОбработкуОповещения(
	//	ВходящийКонтекст.ОповещениеОЗавершении,
	//	ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры

Процедура СоздатьКаталогНаКлиентеПослеСозданияКаталога(ИмяКаталога, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "ИмяКаталога", ВходящийКонтекст.ИмяКаталога, ВходящийКонтекст));
	
КонецПроцедуры

#КонецОбласти

#Область РасшифроватьФайл

Процедура РасшифроватьФайл(
		ОповещениеОЗавершении,
		СертификатПолучателя,
		ИмяЗашифрованногоФайла,
		ПубличныйКлючОтправителя,
		СессионныйКлюч,
		ИнициализационныйВектор,
		ИмяФайлаИлиРасширениеИлиАдрес = Неопределено,
		ВыводитьСоообщения = Истина,
		МенеджерКриптографии = Неопределено,
		Алгоритм = Неопределено) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(6, СертификатПолучателя, ИмяЗашифрованногоФайла, ПубличныйКлючОтправителя, СессионныйКлюч, ИнициализационныйВектор, ИмяФайлаИлиРасширениеИлиАдрес);
	
	ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм, Сертификат", Алгоритм, СертификатПолучателя);
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "РасшифроватьФайлПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура РасшифроватьПослеРасшифровкиСервисомКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат)=Тип("Структура") Тогда
		РасшифрованныеДанные = Неопределено;
		Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные);
		
		Если Результат.Свойство("ИнформацияОбОшибке") Тогда 
			Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
			Результат.Удалить("ИнформацияОбОшибке");
		КонецЕсли;
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		Если РасшифрованныеДанные <> Неопределено Тогда
			Если ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда
				РасшифрованныйФайл = ПереместитьВоВременномХранилище(РасшифрованныеДанные,
					ИмяФайлаИлиРасширениеИлиАдрес,, Истина);
			Иначе //Двоичные данные
				РасшифрованныйФайл = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить("РасшифрованныйФайл", РасшифрованныйФайл);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.МенеджерКриптографии.АлгоритмПодписи);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[5], ВходящийКонтекст, "РасшифроватьФайлПослеПолученияИмениФайла");
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьФайлПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"РасшифроватьФайлПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
				
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовРасшифроватьФайл(
			Оповещение,
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат получателя
			ВходящиеПараметры[1], // зашифрованный файл
			ВходящийКонтекст.ИмяФайлаРезультата, // расшифрованны файл
			ВходящиеПараметры[2], // файл публичного ключа
			ВходящиеПараметры[3], // файл сессионного ключа
			ВходящиеПараметры[4] // файл инициализационного вектора
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Истина, "РасшифрованныйФайл", ВходящийКонтекст.ИмяФайлаРезультата, ВходящийКонтекст));
	
КонецПроцедуры

Процедура РасшифроватьФайлПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"РасшифрованныйФайл",
		ОписаниеОшибкиНеУдалосьРасшифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

Функция ПараметрыВМассив(КоличествоПараметров, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено,
						Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено, 
						Параметр7 = Неопределено, Параметр8 = Неопределено, Параметр9 = Неопределено)
						
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Параметр1);
	
	Если КоличествоПараметров > 1 Тогда
		МассивПараметров.Добавить(Параметр2);
	КонецЕсли;
	
	Если КоличествоПараметров > 2 Тогда
		МассивПараметров.Добавить(Параметр3);
	КонецЕсли;
	
	Если КоличествоПараметров > 3 Тогда
		МассивПараметров.Добавить(Параметр4);
	КонецЕсли;
	
	Если КоличествоПараметров > 4 Тогда
		МассивПараметров.Добавить(Параметр5);
	КонецЕсли;
	
	Если КоличествоПараметров > 5 Тогда
		МассивПараметров.Добавить(Параметр6);
	КонецЕсли;
	
	Если КоличествоПараметров > 6 Тогда
		МассивПараметров.Добавить(Параметр7);
	КонецЕсли;
	
	Если КоличествоПараметров > 7 Тогда
		МассивПараметров.Добавить(Параметр8);
	КонецЕсли;
	
	Если КоличествоПараметров > 8 Тогда
		МассивПараметров.Добавить(Параметр9);
	КонецЕсли;
	
	Возврат МассивПараметров;
						
КонецФункции  

Функция ПодготовитьРезультат(Выполнено, ИмяПоляРезультат = Неопределено, ЗначениеРезультат = Неопределено, ВходящийКонтекст)
	
	Если ВходящийКонтекст.Свойство("ОповещениеОЗавершении") Тогда
		
		Если (ВходящийКонтекст.ОповещениеОЗавершении.ИмяПроцедуры = "ПослеРасшифровки"
				Или ВходящийКонтекст.ОповещениеОЗавершении.ИмяПроцедуры = "ОтправитьПослеШифрования") 
			И Не Выполнено И ШифрованиеФСС.ПодписаниеНаСервере() 
		Тогда
		    Если ВходящийКонтекст.ОповещениеОЗавершении.ИмяПроцедуры = "ПослеРасшифровки" Тогда 
				РезультатШифрования = ПопыткаРасшифровкиНаСервере(ВходящийКонтекст);
				Если РезультатШифрования.Выполнено Тогда
					Результат = Новый Структура("Выполнено", Истина);
					Результат.Вставить("РасшифрованныйФайл", РезультатШифрования.АдресФайлаРезультат);
				Возврат Результат;
			КонецЕсли;
			Иначе
				РезультатШифрования = ПопыткаЗашифроватьНаСервере(ВходящийКонтекст);
				Если РезультатШифрования.Выполнено Тогда
					Результат = Новый Структура("Выполнено", Истина);
					Результат.Вставить("КаталогРезультата", РезультатШифрования.КаталогРезультата);
				Возврат Результат;
			КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("Выполнено", Выполнено);
	
	Если ВходящийКонтекст <> Неопределено Тогда
		Если ВходящийКонтекст.Свойство("МенеджерКриптографии") Тогда
			Результат.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ДвоичныеДанные") Тогда
			Результат.Вставить("ДвоичныеДанные", ВходящийКонтекст.ДвоичныеДанные);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ОписаниеОшибки") Тогда
			Результат.Вставить("ОписаниеОшибки", ВходящийКонтекст.ОписаниеОшибки);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ИнформацияОбОшибке") И Не ВходящийКонтекст.Свойство("ОписаниеОшибки") Тогда
			Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибкиКриптосервиса(ВходящийКонтекст.ИнформацияОбОшибке));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляРезультат) Тогда
		Результат.Вставить(ИмяПоляРезультат, ЗначениеРезультат);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, ИмяМетода, ОписаниеОшибки = Неопределено, ИнформацияОбОшибке = Неопределено)
	
	ВходящийКонтекст.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	ВходящийКонтекст.Вставить("ИмяМетода", ИмяМетода);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ВходящийКонтекст.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения(
		"МенеджерКриптографииПослеПолученияЗначенияСвойстваСписокОшибок", ШифрованиеФССКлиент, ВходящийКонтекст,
		"МенеджерКриптографииПриОшибкеПолученияЗначенияСвойстваСписокОшибок", ШифрованиеФССКлиент);
		
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Функция ОписаниеОшибкиНеУдалосьЗашифроватьФайл()

	Возврат НСтр("ru = 'Не удалось зашифровать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии()
	
	Возврат НСтр("ru = 'Не удалось создать объект для работы с криптографией. В системе не обнаружен криптопровайдер.'");
	
КонецФункции 

Процедура КаталогВременныхФайловНаКлиенте(ОповещениеОЗавершении, ВыводитьСообщения, ДвоичныеДанные)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"КаталогВременныхФайловНаКлиентеПослеПодключенияРасширенияРаботыСФайлами", Контекст, Ложь);
	
КонецПроцедуры  

Функция КраткоеПредставлениеОшибкиКриптосервиса(Знач ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда 
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда 
		Возврат ИнформацияОбОшибке;
	ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Структура") Тогда 
		Если ИнформацияОбОшибке.Свойство("ИнформацияОбОшибке") Тогда
			Возврат КраткоеПредставлениеОшибкиКриптосервиса(ИнформацияОбОшибке.ИнформацияОбОшибке);
		ИначеЕсли ИнформацияОбОшибке.Свойство("ОписаниеОшибки") Тогда
			Возврат ИнформацияОбОшибке.ОписаниеОшибки;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии()

	Возврат НСтр("ru='Не удалось подключить внешнюю компоненту для работы с криптографией.'");

КонецФункции
	
Процедура ВывестиСообщениеПриНеобходимости(ВыводитьСообщения, Сообщение)
	
		
КонецПроцедуры

Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ИмяМетода, Контекст, ВозможноПродолжениеБезУстановки)
	
	Оповещение = Новый ОписаниеОповещения(ИмяМетода, ШифрованиеФССКлиент, Контекст);
	ТекстСообщения = НСтр("ru = 'Для работы подсистемы документооборота с контролирующими органами необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения, ВозможноПродолжениеБезУстановки);
	
КонецПроцедуры

Функция КриптопровайдерCryptoPro() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			80);
	Свойства.Вставить("Представление", 	"КриптоПро CSP (ГОСТ 2012)");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция ПоддерживаемыеКриптопровайдеры() Экспорт
	
	СписокКриптопровайдеров = Новый Массив;
	СписокКриптопровайдеров.Добавить(КриптопровайдерCryptoPro());
	СписокКриптопровайдеров.Добавить(КриптопровайдерViPNet());
	
	Возврат Новый ФиксированныйМассив(СписокКриптопровайдеров);
	
КонецФункции

Функция КриптопровайдерViPNet() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"Infotecs GOST 2012/512 Cryptographic Service Provider");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			77);
	Свойства.Вставить("Представление", 	"ViPNet CSP");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция ПутьМодуляКриптографии() Экспорт
	
	ПерсональныеНастройки = ЭлектроннаяПодписьКлиент.ПерсональныеНастройки();
	Если ПерсональныеНастройки.Свойство("ПутиКПрограммамЭлектроннойПодписиИШифрования")
		И ПерсональныеНастройки.ПутиКПрограммамЭлектроннойПодписиИШифрования.Количество() > 0 Тогда
		
		ОписанияПрограмм = ЭлектроннаяПодписьКлиент.ОбщиеНастройки().ОписанияПрограмм;
		
		Для ИндексПрограммы = 0 По ОписанияПрограмм.ВГраница() Цикл
			Если 	ОписанияПрограмм[ИндексПрограммы].ИмяПрограммы = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider" 
				Или ОписанияПрограмм[ИндексПрограммы].ИмяПрограммы = "Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider"
			Тогда
				СсылкаНаПрограмму = ОписанияПрограмм[ИндексПрограммы].Ссылка;
				ПутьКПрограмме = ПерсональныеНастройки.ПутиКПрограммамЭлектроннойПодписиИШифрования.Получить(СсылкаНаПрограмму);
				Возврат Строка(ПутьКПрограмме);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат("");
	
КонецФункции

Процедура МенеджерКриптографииПослеПолученияЗначенияСвойстваСписокОшибок(ЗначениеСвойства, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.Свойство("ИнформацияОбОшибке") Тогда
		ИнформацияОбОшибке = ВходящийКонтекст.ИнформацияОбОшибке;
	Иначе
		ИнформацияОбОшибке = Неопределено;
	КонецЕсли;
	
	//ЗаписатьИнформациюОбОшибке(ВходящийКонтекст.ИмяМетода, ЗначениеСвойства, ИнформацияОбОшибке);
	
	Если ВходящийКонтекст.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ВходящийКонтекст.ОписаниеОшибки) Тогда
		ОписаниеОшибки = ВходящийКонтекст.ОписаниеОшибки;
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ЗначениеСвойства);
	Иначе
		//ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии();
	КонецЕсли;
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры

Процедура МенеджерКриптографииПриОшибкеПолученияЗначенияСвойстваСписокОшибок(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Ошибка чтения свойства ""СписокОшибок"" менеджера криптографии.'");
	//риптографияЭДКОКлиентСервер.ЗаписатьСобытиеВЖурнал(ИмяСобытия(), "Ошибка", ОписаниеОшибки);
	
//	ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии();
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры

Функция СертификатВЗащищенномХранилищеНаСервере(Сертификат) Экспорт
	
	Возврат ЗначениеЗаполнено(Сертификат) 
			И (Сертификат.Свойство("ЭтоЭлектроннаяПодписьВМоделиСервиса") И Сертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса = Истина
			ИЛИ Сертификат.Свойство("ЭлектроннаяПодписьВМоделиСервиса") И Сертификат.ЭлектроннаяПодписьВМоделиСервиса = Истина);
	
КонецФункции 
		
Функция ЭтоАдресВоВременномХранилище(Адрес)
	
	Если СтрНайти(Адрес, "e1cib/tempstorage/") = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьИмяФайла(ИмяФайлаИлиРасширение, Контекст, ИмяМетода)
		
	Оповещение = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект, Контекст);
	Если СтрНайти(ИмяФайлаИлиРасширение, "|") Тогда
		СоставляющиеПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаИлиРасширение, "|");
		ИмяФайлаИлиРасширение = СоставляющиеПути[0] + СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", "") + СоставляющиеПути[1];
	КонецЕсли;                                 
	
	Если ЗначениеЗаполнено(ИмяФайлаИлиРасширение) И Лев(ИмяФайлаИлиРасширение, 1) <> "." Тогда
		ВыполнитьОбработкуОповещения(
			Оповещение,
			ПодготовитьРезультат(Истина, "ИмяФайла", ИмяФайлаИлиРасширение, Контекст));
	КонецЕсли;
		
КонецПроцедуры

Функция ПереместитьВоВременномХранилище(Знач ОткудаАдрес, Знач КудаАдрес, Знач ОчиститьИсходный = Ложь, Знач ПолучатьАдрес = Ложь) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(ОткудаАдрес) Или 
		Не ПолучатьАдрес И Не ЭтоАдресВременногоХранилища(КудаАдрес) Тогда 
		Возврат Ложь;
	КонецЕсли;
		
	ДанныеСодержимое = ПолучитьИзВременногоХранилища(ОткудаАдрес);
	Результат = ПоместитьВоВременноеХранилище(ДанныеСодержимое, КудаАдрес);
	
	Если ОчиститьИсходный Тогда 
		УдалитьИзВременногоХранилища(ОткудаАдрес);
	КонецЕсли;
	
	Возврат ?(ПолучатьАдрес, Результат, Истина);
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьРасшифроватьФайл()

	Возврат НСтр("ru = 'Не удалось расшифровать файл.'");
	
КонецФункции

Функция ПопыткаРасшифровкиНаСервере(ВходящийКонтекст)
	
	ВходящихПараметрыДляСервера = Новый Массив;
	Для Каждого Элемент Из ВходящийКонтекст.ВходящиеПараметры Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Попытка
				Файл = Новый ДвоичныеДанные(Элемент);
				Адрес = ПоместитьВоВременноеХранилище(Файл, Новый УникальныйИдентификатор);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		ВходящихПараметрыДляСервера.Добавить(Адрес);
	КонецЦикла;			
	
	ВходящийКонтекстКопия = Новый Структура;
	
	Для Каждого Эл Из ВходящийКонтекст Цикл
		ВходящийКонтекстКопия.Вставить(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	Сертификат = ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.ПараметрыЗапроса.Результат.СвойстваПодписи.Сертификат;
	ВходящийКонтекстКопия.Удалить("ОповещениеОЗавершении");
	ВходящийКонтекстКопия.Удалить("МенеджерКриптографии");
	
	Если ВходящийКонтекстКопия.Свойство("ОписаниеОшибки") Тогда
			ВходящийКонтекстКопия.Удалить("ОписаниеОшибки");
	КонецЕсли;
	
	Если ВходящийКонтекстКопия.Свойство("ИнформацияОбОшибке") Тогда
			ВходящийКонтекстКопия.ИнформацияОбОшибке = Неопределено;
	КонецЕсли;
	
	Попытка
		Результат = ШифрованиеФСС.РасшифроватьНаСервере(ВходящийКонтекстКопия, ВходящихПараметрыДляСервера, Сертификат);
	Исключение
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Выполнено", Ложь);
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Если Результат.Выполнено Тогда  
		СтруктураВозврата = Новый Структура;
		Адрес = ПолучитьИмяВременногоФайла(".xml");
		ПолучитьИзВременногоХранилища(Результат.АдресРезультатаВоВрХранилище).Записать(Адрес);
		СтруктураВозврата.Вставить("Выполнено", Истина);
		СтруктураВозврата.Вставить("АдресФайлаРезультат", Адрес);
	Иначе
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Выполнено", Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПопыткаЗашифроватьНаСервере(ВходящийКонтекст)
	
	ВходящихПараметрыДляСервера = Новый Массив;
	Для Каждого Элемент Из ВходящийКонтекст.ВходящиеПараметры Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") И СтрНайти(Элемент,".bin") <> 0 Тогда
			Попытка
				Файл = Новый ДвоичныеДанные(Элемент);
				Адрес = ПоместитьВоВременноеХранилище(Файл, Новый УникальныйИдентификатор);
			Исключение
				Продолжить;
			КонецПопытки;
			ВходящихПараметрыДляСервера.Добавить(Новый Структура("АдресФайла", Адрес));
		Иначе
			ВходящихПараметрыДляСервера.Добавить(Элемент);	
		КонецЕсли;
	КонецЦикла;
	
	ВходящийКонтекстКопия = Новый Структура;
	
	Для Каждого Эл Из ВходящийКонтекст Цикл
		ВходящийКонтекстКопия.Вставить(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	Сертификат = ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.ПараметрыЗапроса.Результат.СвойстваПодписи.Сертификат;
	ВходящийКонтекстКопия.Удалить("ОповещениеОЗавершении");
	ВходящийКонтекстКопия.Удалить("МенеджерКриптографии");
	
	Если ВходящийКонтекстКопия.Свойство("ОписаниеОшибки") Тогда
			ВходящийКонтекстКопия.Удалить("ОписаниеОшибки");
	КонецЕсли;
	
	Если ВходящийКонтекстКопия.Свойство("ИнформацияОбОшибке") Тогда
			ВходящийКонтекстКопия.ИнформацияОбОшибке = Неопределено;
	КонецЕсли;
		
	Попытка
		Результат = ШифрованиеФСС.ЗашифроватьНаСервере(ВходящийКонтекстКопия, ВходящихПараметрыДляСервера, Сертификат);
	Исключение
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Выполнено", Ложь);
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Если Результат.Выполнено Тогда  
		СтруктураВозврата = Новый Структура;
		Адрес = ПолучитьИмяВременногоФайла(".zip");
		ПолучитьИзВременногоХранилища(Результат.АдресРезультатаВоВрХранилище).Записать(Адрес); 
		
		ЧтениеZip = Новый ЧтениеZipФайла(Адрес);
		ИмяКаталога = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		КаталогРезультата = КаталогВременныхФайлов() + ИмяКаталога;
		ЧтениеZip.ИзвлечьВсе(КаталогРезультата);
		
		СтруктураВозврата.Вставить("Выполнено", Истина);
		СтруктураВозврата.Вставить("КаталогРезультата", КаталогРезультата + ПолучитьРазделительПутиКлиента());
	Иначе
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Выполнено", Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти