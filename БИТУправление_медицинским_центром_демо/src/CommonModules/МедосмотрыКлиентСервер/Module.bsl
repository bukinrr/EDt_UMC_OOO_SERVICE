#Область ПрограммныйИнтерфейс

// Обновляет идентификаторы ЭМД в разрезе приказов медосмотра в указанном документе медосмотра.
//
// Параметры:
//  ДокументМедосмотра	 - ДокументОбъект.ПрохождениеМедосмотра, ДанныеФормыСтруктура - документ медосмотра, в котором будет сделано изменение.
//  Модифицированность	 - Булево - Признак модифицированности. Устанавливается, если объект документа изменен.
//
Процедура ОбновитьИдентификаторыПриказов(ДокументМедосмотра, Модифицированность = Неопределено) Экспорт
	
	Если ДокументМедосмотра.ВидПрохожденияМО = ПредопределенноеЗначение("Перечисление.ВидыМедосмотров.СправкаПрочий") Тогда
		ОбновитьИдентификаторыПриказовСправки(ДокументМедосмотра, Модифицированность);
	Иначе
		ОбновитьИдентификаторыПриказовПМО(ДокументМедосмотра, Модифицированность);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеПоЧислуРаботниковПодлежащихПереодМедосмотру(Объект) Экспорт
	
	Если Не Объект.РучнаяКорректировка Тогда 
		
		СписокМедосмотра = Новый Массив;
		Для Каждого СтрокаКлиенты Из Объект.Клиенты Цикл
			Если ЗначениеЗаполнено(СтрокаКлиенты.Клиент) 
				И СписокМедосмотра.Найти(СтрокаКлиенты.Клиент) = Неопределено 
			Тогда  
				СписокМедосмотра.Добавить(СтрокаКлиенты.Клиент);
			КонецЕсли;
		КонецЦикла;
		
		СтатистикаРаботников = МедосмотрыСервер.ПолучитьСтатистикуРаботников(СписокМедосмотра);
		Объект.РаботникиНаТяжРаботахВсего   = СписокМедосмотра.Количество();
		Объект.РаботникиНаТяжРаботахЖенщин  = СтатистикаРаботников.КолЖ;
		Объект.РаботникиНаТяжРаботахДо18Лет = СтатистикаРаботников.Кол18;	
		
	КонецЕсли;
	
КонецФункции

// Функция-константа: Текст заключения по умолчанию
// 
// Возвращаемое значение:
//  Строка.
//
Функция ТекстЗаключенияПоУмолчанию() Экспорт
	Возврат НСтр("ru='Не имеет противопоказаний'"); 		
КонецФункции

// Функция-константа: Дата вступления приказа 29н.
// 
// Возвращаемое значение:
//  Дата.
//
Функция ДатаПриказа29н() Экспорт
	
	Возврат Дата('2021.04.01');
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьИдентификаторыПриказовСправки(ДокументМедосмотра, Модифицированность)
	
	Если Не ЗначениеЗаполнено(ДокументМедосмотра.Номенклатура) Тогда
		ДокументМедосмотра.ИдентификаторыПриказов.Очистить();
		Возврат;
	КонецЕсли;
	
	ВредныйФактор = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументМедосмотра.Номенклатура, "ВредныйФакторСправки");
	Если ДокументМедосмотра.ИдентификаторыПриказов.Количество() = 0
		Или ДокументМедосмотра.ИдентификаторыПриказов[0].ПриказВредныйФактор <> ВредныйФактор
	Тогда
		ДокументМедосмотра.ИдентификаторыПриказов.Очистить();
		НоваяСтрока = ДокументМедосмотра.ИдентификаторыПриказов.Добавить();
		НоваяСтрока.ПриказВредныйФактор = ВредныйФактор;
		НоваяСтрока.УИД = Новый УникальныйИдентификатор;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИдентификаторыПриказовПМО(ДокументМедосмотра, Модифицированность)
	
	ФакторыДокумента = Новый Массив;
	Для Каждого СтрокаФактора Из ДокументМедосмотра.ФакторыИУсловияРаботы Цикл
		Если ЗначениеЗаполнено(СтрокаФактора.Фактор) Тогда
			ФакторыДокумента.Добавить(СтрокаФактора.Фактор);
		КонецЕсли;
	КонецЦикла;
	
	ПриказыФакторы = МедосмотрыСервер.ПолучитьПриказыИВредныеФакторыПрохожденияМедосмотраПоФакторам(ФакторыДокумента);
	
	Для Каждого ПриказФактор Из ПриказыФакторы Цикл
		Если ДокументМедосмотра.ИдентификаторыПриказов.НайтиСтроки(Новый Структура("ПриказВредныйФактор", ПриказФактор)).Количество() = 0 Тогда
			НоваяСтрока = ДокументМедосмотра.ИдентификаторыПриказов.Добавить();
			НоваяСтрока.ПриказВредныйФактор = ПриказФактор;
			НоваяСтрока.УИД = Новый УникальныйИдентификатор;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаИдентификатора Из ДокументМедосмотра.ИдентификаторыПриказов Цикл
		Если ПриказыФакторы.Найти(СтрокаИдентификатора.ПриказВредныйФактор) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаИдентификатора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ДокументМедосмотра.ИдентификаторыПриказов.Удалить(СтрокаКУдалению);
		Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти