// Получает структуру кэшированных значений
//
Функция ПолучитьСтруктуруКэшированныхЗначений() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("Штрихкоды"                       , Новый Соответствие);
	КэшированныеЗначения.Вставить("ЕдиницыИзмерения"                , Новый Соответствие);
	КэшированныеЗначения.Вставить("СлужебныеРеквизитыСтатейРасходов", Новый Соответствие);
	КэшированныеЗначения.Вставить("СлужебныеРеквизитыСтатейДоходов" , Новый Соответствие);
	
	Возврат КэшированныеЗначения;
	
КонецФункции

// Возвращает структуру, содержащую поля кэшируемой информации, получаемой по штрихкоду товара.
//
// Возвращаемое значение:
//  Структура - структура кэшируемых данных товара, получаемая по штрихкоду товара
//
Функция СтуктураКэшируемойИнформацииПоШтрихкоду(Штрихкод) Экспорт
	
	ИнформацияПоШтрихкоду = Новый Структура;
	ИнформацияПоШтрихкоду.Вставить("Штрихкод", Штрихкод);
	ИнформацияПоШтрихкоду.Вставить("НеизвестныйШтрихкод", Истина);
	
	ИнформацияПоШтрихкоду.Вставить("Номенклатура");
	ИнформацияПоШтрихкоду.Вставить("СерияНоменклатуры");
	ИнформацияПоШтрихкоду.Вставить("Партия");
	ИнформацияПоШтрихкоду.Вставить("ЕдиницаИзмерения");
	ИнформацияПоШтрихкоду.Вставить("Коэффициент");
	
	ИнформацияПоШтрихкоду.Вставить("ШтрихкодУпаковки", Ложь);
	ИнформацияПоШтрихкоду.Вставить("УпаковкаМаркированногоТовара");
	
	Возврат ИнформацияПоШтрихкоду;
	
КонецФункции

Функция ПолучитьДанныеИзШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	ДанныеИзШтрихкода = Новый Структура;
	ДанныеИзШтрихкода.Вставить("ТипШтрихкода", ТипШтрихкода);
	
	Если ТипШтрихкода = "ITF14" Или ТипШтрихкода = "EAN13" Или ТипШтрихкода = "EAN8" Тогда
		ДанныеИзШтрихкода.Вставить("Штрихкод", Штрихкод);
		Возврат ДанныеИзШтрихкода;
	КонецЕсли;
	
	Попытка
		ДанныеИзШтрихкода = ИнтеграцияМДЛПКлиентСервер.ДанныеШтрихкода(Штрихкод);
		ДанныеИзШтрихкода.Вставить("ТипШтрихкода", "ШтрихкодМДЛП");
	Исключение
		Попытка
			Данные = ИнтеграцияМДЛПКлиентСервер.РазобратьСтрокуШтрихкодаГС1(Штрихкод);
			Если Данные.ДанныеШтрихкода.Количество() > 0 И Данные.ДанныеШтрихкода[0].ИдентификаторПрименения = "01" Тогда
				ДанныеИзШтрихкода.Вставить("ТипШтрихкода"   , "ШтрихкодГС1");
				ДанныеИзШтрихкода.Вставить("Штрихкод"       , Данные.ПредставлениеШтрихкода);
				ДанныеИзШтрихкода.Вставить("ДанныеШтрихкода", Данные.ДанныеШтрихкода);
				ДанныеИзШтрихкода.Вставить("GTIN", Данные.ДанныеШтрихкода[0].Значение);
				Для Индекс = 1 По Данные.ДанныеШтрихкода.ВГраница() Цикл
					Если Данные.ДанныеШтрихкода[Индекс] = "10" Тогда
						ДанныеИзШтрихкода.Вставить("Серия", Данные.ДанныеШтрихкода[Индекс].Значение);
					ИначеЕсли Данные.ДанныеШтрихкода[Индекс] = "17" Тогда
						ГоденДоСтрокой = Данные.ДанныеШтрихкода[Индекс].Значение;
						Год = "20" + Сред(ГоденДоСтрокой, 1, 2);
						Месяц = Сред(ГоденДоСтрокой, 3, 2);
						День = Сред(ГоденДоСтрокой, 5, 2);
						Попытка
							Если День = "00" Тогда
								ГоденДо = КонецМесяца(Дата(Год + Месяц + "01000000"));
							Иначе
								ГоденДо = Дата(Год + Месяц + День + "000000");
							КонецЕсли;
						Исключение
							ВызватьИсключение НСтр("ru = 'Некорректный срок годности.'");
						КонецПопытки;
						ДанныеИзШтрихкода.Вставить("ГоденДо", ГоденДо);
					КонецЕсли
				КонецЦикла;
			Иначе
				ВызватьИсключение НСтр("ru = 'Не штрихкод товара ГС1'");
			КонецЕсли;
		Исключение
			ДанныеИзШтрихкода.Вставить("ТипШтрихкода", ?(ПустаяСтрока(ТипШтрихкода), "Прочее", ТипШтрихКода));
			ДанныеИзШтрихкода.Вставить("Штрихкод", ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Штрихкод));
		КонецПопытки;
	КонецПопытки;
	
	Возврат ДанныеИзШтрихкода;
	
КонецФункции


// Функция получает данные штрихкода
//
// Параметры:
//  Штрихкод - строка штрихкода
//  Количество - число
//
// Возвращаемое значение:
//  Структура - структура с данными штрихкода
//
Функция ПолучитьДанныеШтрихкода(Штрихкод, Количество) Экспорт
	
	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);
	
КонецФункции


// Возвращает структуру, содержащую поля кэшируемой информации, получаемой по штрихкоду товара.
//
// Возвращаемое значение:
//  Структура - структура кэшируемых данных товара, получаемая по штрихкоду товара
//
Функция СтруктураКэшируемойИнформацииПоШтрихкоду(Штрихкод) Экспорт
	
	ИнформацияПоШтрихкоду = Новый Структура;
	ИнформацияПоШтрихкоду.Вставить("Штрихкод", Штрихкод);
	ИнформацияПоШтрихкоду.Вставить("НеизвестныйШтрихкод", Истина);
	
	ИнформацияПоШтрихкоду.Вставить("Владелец");
	ИнформацияПоШтрихкоду.Вставить("СерияНоменклатуры");
	//ИнформацияПоШтрихкоду.Вставить("Партия");
	ИнформацияПоШтрихкоду.Вставить("ХарактеристикаНоменклатуры");
	ИнформацияПоШтрихкоду.Вставить("ЕдиницаИзмерения");
	ИнформацияПоШтрихкоду.Вставить("Коэффициент");
	
	ИнформацияПоШтрихкоду.Вставить("ШтрихкодУпаковки", Ложь);
	ИнформацияПоШтрихкоду.Вставить("УпаковкаМаркированногоТовара");
	
	Возврат ИнформацияПоШтрихкоду;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Идентификаторы действий со строками табличной части
#Область Действия

// Идентификатор действия
//
Функция Действие_ПроверитьСериюНоменклатурыПоВладельцу() Экспорт
	Возврат "ПроверитьСериюНоменклатурыПоВладельцу";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьУпаковкуПоВладельцу() Экспорт
	Возврат "ПроверитьУпаковкуПоВладельцу";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьПартиюПоВладельцу() Экспорт
	Возврат "ПроверитьПартиюПоВладельцу";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьЕдиницуИзмеренияПоОтбору() Экспорт
	Возврат "ПроверитьЕдиницуИзмеренияПоОтбору";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЕдиницуИзмерения() Экспорт
	Возврат "ЗаполнитьЕдиницуИзмерения";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЕдиницуИзмеренияПоОтбору() Экспорт
	Возврат "ЗаполнитьЕдиницуИзмеренияПоОтбору";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьПараметрыУчета() Экспорт
	Возврат "ЗаполнитьПараметрыУчета";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьПризнакВедетсяУчетПоГТД() Экспорт
	Возврат "ЗаполнитьПризнакВедетсяУчетПоГТД";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЗабраковкуСерий() Экспорт
	Возврат "ЗаполнитьЗабраковкуСерий";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоэффициент() Экспорт
	Возврат "ПересчитатьКоэффициент";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоэффициентЕдиницыЗаказа() Экспорт
	Возврат "ПересчитатьКоэффициентЕдиницыЗаказа";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСтавкуНДС() Экспорт
	Возврат "ЗаполнитьСтавкуНДС";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЦенуЗакупки() Экспорт
	Возврат "ЗаполнитьЦенуЗакупки";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЦенуПродажи() Экспорт
	Возврат "ЗаполнитьЦенуПродажи";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя() Экспорт
	Возврат "ЗаполнитьЗарегистрированнуюЦенуПроизводителя";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика() Экспорт
	Возврат "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре() Экспорт
	Возврат "ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоЕдиниц() Экспорт
	Возврат "ПересчитатьКоличествоЕдиниц";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоУпаковок() Экспорт
	Возврат "ПересчитатьКоличествоУпаковок";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоПоДаннымУчета() Экспорт
	Возврат "ПересчитатьКоличествоПоДаннымУчета";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоУпаковокПоДаннымУчета() Экспорт
	Возврат "ПересчитатьКоличествоУпаковокПоДаннымУчета";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьКоличествоВЕдиницахЗаказа() Экспорт
	Возврат "ПересчитатьКоличествоВЕдиницахЗаказа";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьЦенуЗаУпаковку() Экспорт
	Возврат "ПересчитатьЦенуЗаУпаковку";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьЦену() Экспорт
	Возврат "ПересчитатьЦену";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСумму() Экспорт
	Возврат "ПересчитатьСумму";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСуммуНДС() Экспорт
	Возврат "ПересчитатьСуммуНДС";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСуммуСНДС() Экспорт
	Возврат "ПересчитатьСуммуСНДС";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьРасхождения() Экспорт
	Возврат "ЗаполнитьРасхождения";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСлужебныеРеквизитыСтатьиРасходов() Экспорт
	Возврат "ЗаполнитьСлужебныеРеквизитыСтатьиРасходов";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСлужебныеРеквизитыСтатьиДоходов() Экспорт
	Возврат "ЗаполнитьСлужебныеРеквизитыСтатьиДоходов";
КонецФункции

// Идентификатор действия
//
Функция Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре() Экспорт
	Возврат "ЗаполнитьСлужебныеРеквизитыПоНоменклатуре";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьСуммуРегл() Экспорт
	Возврат "ПересчитатьСуммуРегл";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПересчитатьНДСРегл() Экспорт
	Возврат "ПересчитатьНДСРегл";
КонецФункции

// Идентификатор действия
//
Функция Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика() Экспорт
	Возврат "ПроверитьСопоставленнуюНоменклатуруПоставщика";
КонецФункции

#КонецОбласти // Действия
