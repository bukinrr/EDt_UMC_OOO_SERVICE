#Область ПрограммныйИнтерфейс

// Сохраняет данные об отметках выполнения отдельных действий в рамках медосмотра в регистр отметок
//  для указанного документа-регистратора.
//
// Параметры:
//  ДокументРегистратор		 - ДокументСсылка					 - документ, которым изменяют отметки выполнения.
//  ПрохождениеМедОсмотра	 - ДокументСсылка.ПрохождениеМедосмотра	- документ прохождения медосмотра.
//  ТаблицаОтметок			 - ДанныеФормыКоллекция					- коллекция строк с данными об отметках выполнения.
//  Период					 - Дата									- дата записи.
//
Процедура ЗаписатьОтметкиВыполненияДействияМедосмотра(ДокументРегистратор, ПрохождениеМедОсмотра, ТаблицаОтметок, Период = Неопределено) Экспорт
	
	ОчиститьОтметкиВыполненияДействияМедосмотра(ДокументРегистратор);
	
	Для Каждого СтрокаОтметки Из ТаблицаОтметок Цикл
		
		Если ЗначениеЗаполнено(Период) Тогда
			ПериодДляПодстановки = Период;
		Иначе
			ПериодДляПодстановки = ТекущаяДата();
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПрохождениеМедОсмотра", ПрохождениеМедОсмотра);
		Отбор.Вставить("Действие", СтрокаОтметки.Действие);
		Отбор.Вставить("АктивностьЗаписи", Истина);
		ТаблицаОтметки = РегистрыСведений.ОтметкиВыполненияДействий.СрезПоследних(ПериодДляПодстановки, Отбор);
		
		ДобавитьНовуюЗапись = Ложь;
		Если ТаблицаОтметки.Количество() > 0 Тогда
			Строка = ТаблицаОтметки[0];
			Если Строка.ДокументРегистратор <> ДокументРегистратор
				И СтрокаОтметки.Выполнено <> Строка.Выполнено
			Тогда
				ДобавитьНовуюЗапись = Истина;
			КонецЕсли;
		ИначеЕсли СтрокаОтметки.Выполнено Тогда
			ДобавитьНовуюЗапись = Истина;
		КонецЕсли;
		
		Если ДобавитьНовуюЗапись Тогда
			МЗ = РегистрыСведений.ОтметкиВыполненияДействий.СоздатьМенеджерЗаписи();
			МЗ.Действие = СтрокаОтметки.Действие;
			МЗ.ПрохождениеМедОсмотра = ПрохождениеМедОсмотра;
			МЗ.Период = ПериодДляПодстановки;
			МЗ.Выполнено = СтрокаОтметки.Выполнено;
			МЗ.ДокументРегистратор = ДокументРегистратор;
			МЗ.АктивностьЗаписи = Истина;
			МЗ.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет данные об отметках выполнения отдельных действий в рамках медосмотра в регистре отметок.
//
// Параметры:
//  ДокументРегистратор - ДокументСсылка - документ, которым изменяют отметки выполнения.
//  ДействияМедосмотра - Массив - элементов типа СправочникСсылка,
//						действияМедосмотра - отбор по конкретному списку действий у удалению.
//
Процедура ОчиститьОтметкиВыполненияДействияМедосмотра(ДокументРегистратор, ДействияМедосмотра = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРегистратор", ДокументРегистратор);
	Запрос.УстановитьПараметр("ДействияМедосмотра", ДействияМедосмотра);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтметкиВыполненияДействий.Действие КАК Действие,
	|	ОтметкиВыполненияДействий.ПрохождениеМедОсмотра КАК ПрохождениеМедОсмотра,
	|	ОтметкиВыполненияДействий.АктивностьЗаписи КАК АктивностьЗаписи,
	|	ОтметкиВыполненияДействий.Период КАК Период
	|ИЗ
	|	РегистрСведений.ОтметкиВыполненияДействий КАК ОтметкиВыполненияДействий
	|ГДЕ
	|	ОтметкиВыполненияДействий.ДокументРегистратор = &ДокументРегистратор
	|	И (&ДействияМедосмотра = НЕОПРЕДЕЛЕНО
	|			ИЛИ ОтметкиВыполненияДействий.Действие В (&ДействияМедосмотра))"
	;
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		МенеджерЗаписи = РегистрыСведений.ОтметкиВыполненияДействий.СоздатьМенеджерЗаписи();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			//МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает действия медосмотра по документу медосмотра и специализации врача
//
// Параметры:
//  ПрохождениеМедОсмотра	 - ДокументСсылка.ПрохождениеМедосмотра	 - медосмотр.
//  Специализация			 - СправочникСсылка.Специализация - специализация, чьи действия медосмотра требуются.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьДействияМедосмотраПМОПоСпециализации(ПрохождениеМедОсмотра, Специализация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие КАК Действие,
	               |	ЕСТЬNULL(ОтметкиВыполненияДействийСрезПоследних.Выполнено, ЛОЖЬ) КАК Выполнено,
	               |	1 КАК Порядок,
	               |	ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор КАК ДокументРегистратор,
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие.Наименование КАК ДействиеНаименование
	               |ИЗ
	               |	Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ПрохождениеМедосмотраДействияМедосмотра
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(, АктивностьЗаписи = ИСТИНА) КАК ОтметкиВыполненияДействийСрезПоследних
	               |		ПО ПрохождениеМедосмотраДействияМедосмотра.Ссылка = ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра
	               |			И ПрохождениеМедосмотраДействияМедосмотра.Действие = ОтметкиВыполненияДействийСрезПоследних.Действие
	               |ГДЕ
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие.Специализация = &Специализация
	               |	И ПрохождениеМедосмотраДействияМедосмотра.Действие.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДействийМедицинскогоОсмотра.Врач)
	               |	И ПрохождениеМедосмотраДействияМедосмотра.Ссылка = &ПрохождениеМедОсмотра
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие,
	               |	ЕСТЬNULL(ОтметкиВыполненияДействийСрезПоследних.Выполнено, ЛОЖЬ),
	               |	2,
	               |	ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор,
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие.Наименование
	               |ИЗ
	               |	Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ПрохождениеМедосмотраДействияМедосмотра
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(, АктивностьЗаписи = ИСТИНА) КАК ОтметкиВыполненияДействийСрезПоследних
	               |		ПО ПрохождениеМедосмотраДействияМедосмотра.Ссылка = ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра
	               |			И ПрохождениеМедосмотраДействияМедосмотра.Действие = ОтметкиВыполненияДействийСрезПоследних.Действие
	               |ГДЕ
	               |	ПрохождениеМедосмотраДействияМедосмотра.Действие.Специализация = &Специализация
	               |	И ПрохождениеМедосмотраДействияМедосмотра.Действие.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДействийМедицинскогоОсмотра.Исследование)
	               |	И ПрохождениеМедосмотраДействияМедосмотра.Ссылка = &ПрохождениеМедОсмотра
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ДействиеНаименование";
	
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", ПрохождениеМедОсмотра);
	Запрос.УстановитьПараметр("Специализация", Специализация);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Имя реквизита, отвечающего за номер приказа в пункте вредности.
//
// Параметры:
//  Дата - Дата - Дата.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьРеквизитНомерППиПриказа(Знач Дата) Экспорт
	
	Возврат "НомерПП";
	
КонецФункции

// Возвращает таблицу анализов, назначенных медосмотрами клиентам и еще не сданных.
//
// Параметры:
//  ПараметрыВыбора	 - Структура - структура с ключами "Клиент" и "Дата".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - номенклатура анализов, возможных для забора.
//
Функция НазначенияАнализыМедосмотров(ПараметрыВыбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", ?(ЗначениеЗаполнено(ПараметрыВыбора.Клиент), ПараметрыВыбора.Клиент, Неопределено));
	Запрос.УстановитьПараметр("ДатаНачала", ДобавитьМесяц(ПараметрыВыбора.Дата, -3));
	
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	СПМО.Ссылка КАК СПМО
	              	|ПОМЕСТИТЬ СПМО_НЕ_ЗАКРЫТЫЕ
	              	|ИЗ
	              	|	Документ.СписокНаПрохождениеМедосмотра КАК СПМО
	              	|ГДЕ
	              	|	СПМО.ДатаЗаключительногоАкта = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	              	|	И СПМО.Проведен
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	ЗНАЧЕНИЕ(Документ.СписокНаПрохождениеМедосмотра.ПустаяСсылка)
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ПМО.Ссылка КАК Ссылка,
	              	|	ПМО.Клиент КАК Клиент
	              	|ПОМЕСТИТЬ ПМО_ПО_СПМО
	              	|ИЗ
	              	|	Документ.ПрохождениеМедосмотра КАК ПМО
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СПМО_НЕ_ЗАКРЫТЫЕ КАК СПМО_НЕ_ЗАКРЫТЫЕ
	              	|		ПО ПМО.СписокНаПрохождениеМедосмотра = СПМО_НЕ_ЗАКРЫТЫЕ.СПМО
	              	|			И (ПМО.Проведен)
	              	|			И (ПМО.Дата >= &ДатаНачала)
	              	|			И (&Клиент = НЕОПРЕДЕЛЕНО
	              	|				ИЛИ &Клиент = ПМО.Клиент)
	              	|			И (ПМО.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ДействияМедосмотра.Ссылка КАК Ссылка,
	              	|	ДействияМедосмотра.Номенклатура КАК Номенклатура
	              	|ПОМЕСТИТЬ ДействияМедосмотраСАнализами
	              	|ИЗ
	              	|	Справочник.ДействияМедосмотра КАК ДействияМедосмотра
	              	|ГДЕ
	              	|	ДействияМедосмотра.Номенклатура.Анализ
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ПМО.Клиент КАК Клиент,
	              	|	ПМО.Ссылка КАК ПМО,
	              	|	ПрохождениеМедосмотраДействияМедосмотра.Действие КАК Действие,
	              	|	ДействияМедосмотраСАнализами.Номенклатура КАК Номенклатура
	              	|ПОМЕСТИТЬ ПМО_АКТУАЛЬНЫЕ_ДЕЙСТВИЯ
	              	|ИЗ
	              	|	ПМО_ПО_СПМО КАК ПМО
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ПрохождениеМедосмотраДействияМедосмотра
	              	|		ПО ПМО.Ссылка = ПрохождениеМедосмотраДействияМедосмотра.Ссылка
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействияМедосмотраСАнализами КАК ДействияМедосмотраСАнализами
	              	|		ПО (ПрохождениеМедосмотраДействияМедосмотра.Действие = ДействияМедосмотраСАнализами.Ссылка)
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ОтметкиВыполненияДействийСрезПоследних.Действие КАК Действие,
	              	|	ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра КАК ПрохождениеМедОсмотра,
	              	|	ОтметкиВыполненияДействийСрезПоследних.Выполнено КАК Выполнено
	              	|ПОМЕСТИТЬ ОтметкиВыполненияДействийМО
	              	|ИЗ
	              	|	РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(
	              	|			,
	              	|			ПрохождениеМедОсмотра В
	              	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|						ПМО_АКТУАЛЬНЫЕ.ПМО КАК ПМО
	              	|					ИЗ
	              	|						ПМО_АКТУАЛЬНЫЕ_ДЕЙСТВИЯ КАК ПМО_АКТУАЛЬНЫЕ)
	              	|				И Действие В
	              	|					(ВЫБРАТЬ
	              	|						ДействияМедосмотраСАнализами.Ссылка
	              	|					ИЗ
	              	|						ДействияМедосмотраСАнализами)) КАК ОтметкиВыполненияДействийСрезПоследних
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ПМОДействияМедосмотра.Номенклатура КАК Номенклатура,
	              	|	ПМОДействияМедосмотра.Клиент КАК Клиент,
	              	|	1 КАК Количество
	              	|ИЗ
	              	|	ПМО_АКТУАЛЬНЫЕ_ДЕЙСТВИЯ КАК ПМОДействияМедосмотра
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтметкиВыполненияДействийМО КАК ОтметкиВыполненияДействийСрезПоследних
	              	|		ПО (ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра = ПМОДействияМедосмотра.ПМО)
	              	|			И (ОтметкиВыполненияДействийСрезПоследних.Действие = ПМОДействияМедосмотра.Действие)
	              	|ГДЕ
	              	|	НЕ ЕСТЬNULL(ОтметкиВыполненияДействийСрезПоследних.Выполнено, ЛОЖЬ)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ПериодическиеМедосмотрыРаботников

// Возвращает медицинские карты клиента без отметки как закрытая с макетом медкарты 025/у.
//
// Параметры:
//  Клиент			 - СправочникСсылка.Клиенты	 - Клиент.
//  Филиал			 - СправочникСсылка.Филиалы	 - Филиал, где проводят медосмотр.
//  ДатаМедосмотра	 - Дата	 - Дата события медосмотра.
// 
// Возвращаемое значение:
//   Массив - Содержит элементы типа СправочникСсылка.МедицинскиеКарты
//
Функция ПолучитьНеЗакрытыеМедкарты025У(Клиент, Филиал, Знач ДатаМедосмотра) Экспорт
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ДатаМедосмотра = ?(ЗначениеЗаполнено(ДатаМедосмотра), ДатаМедосмотра, НачалоДня(ТекущаяДатаСеанса()));
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Филиал", Филиал);
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("ДатаМедосмотра", ДатаМедосмотра);
		Запрос.УстановитьПараметр("Макет025У", "%025%");
		Запрос.УстановитьПараметр("ОсновнойВидМедкартПрофосмотров", УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойВидМедКартДляПрофОсмотров"));
		Запрос.УстановитьПараметр("ИскатьДругие025у", УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("МедкартуДляПрофосмотраИскатьДругие025у"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыМедицинскихКарт.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыМедицинскихКарт.Ссылка = &ОсновнойВидМедкартПрофосмотров
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВидПрофосмотров
		|ПОМЕСТИТЬ ВидыМедКарт025У
		|ИЗ
		|	Справочник.ВидыМедицинскихКарт КАК ВидыМедицинскихКарт
		|ГДЕ
		|	((ВЫРАЗИТЬ(ВидыМедицинскихКарт.Макет КАК СТРОКА(100)) ПОДОБНО &Макет025У И &ИскатьДругие025у = ИСТИНА)
		|			ИЛИ ВидыМедицинскихКарт.Ссылка = &ОсновнойВидМедкартПрофосмотров)
		//|	И ВидыМедицинскихКарт.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыМедицинскихКарт.Амбулаторная)
		|	И НЕ ВидыМедицинскихКарт.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МедицинскиеКарты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыМедКарт025У КАК ВидыМедКарт025У
		|		ПО МедицинскиеКарты.ВидКарты = ВидыМедКарт025У.Ссылка
		|ГДЕ
		|	МедицинскиеКарты.Клиент = &Клиент
		|	И НЕ МедицинскиеКарты.ПометкаУдаления
		|	И (МедицинскиеКарты.ДатаРегистрации <= ДОБАВИТЬКДАТЕ(&ДатаМедосмотра, МЕСЯЦ, 1)
		|			ИЛИ МедицинскиеКарты.ДатаРегистрации = ДАТАВРЕМЯ(1, 1, 1))
		|	И (МедицинскиеКарты.ДатаЗакрытия >= &ДатаМедосмотра
		|			ИЛИ МедицинскиеКарты.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
//		|	И МедицинскиеКарты.Филиал = &Филиал
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыМедКарт025У.ЭтоВидПрофосмотров УБЫВ,
		|	МедицинскиеКарты.ДатаРегистрации"
		;
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Результат = Новый Массив();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает первую медицинскую карту клиента без отметки как закрытая с макетом медкарты 025/у.
//
// Параметры:
//  Клиент			 - СправочникСсылка.Клиенты	 - Клиент.
//  Филиал			 - СправочникСсылка.Филиалы	 - Филиал, где проводят медосмотр.
//  ДатаМедосмотра	 - Дата	 - Дата события медосмотра.
// 
// Возвращаемое значение:
//   СправочникСсылка.МедицинскиеКарты
//
Функция ПолучитьНезакрытуюМедкарту025У(Клиент, Филиал, ДатаМедосмотра) Экспорт
	
	МедКарты = ПолучитьНеЗакрытыеМедкарты025У(Клиент, Филиал, ДатаМедосмотра);
	Если Медкарты.Количество() > 0 Тогда
		
		Если Медкарты.Найти(Клиент.ОсновнаяМедицинскаяКарта) <> Неопределено Тогда
			Возврат Клиент.ОсновнаяМедицинскаяКарта;
		Иначе
			Возврат МедКарты[0];
		КонецЕсли;
	Иначе
		Возврат Справочники.МедицинскиеКарты.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Создает медкарту для медосмотра, если в учетной политике указан основной вид медкарты для медосмотров.
//
// Параметры:
//  Клиент			- СправочникСсылка.Клиенты	- Клиент.
//  Филиал			- СправочникСсылка.Филиалы	- Филиал, где проводят медосмотр.
//  Дата	 		- Дата	 					- Дата события медосмотра.
// 
// Возвращаемое значение:
//   СправочникСсылка.МедицинскиеКарты
//
Функция СоздатьМедкартуДляМедОсмотра(Клиент, Филиал, Знач Дата) Экспорт
	
	ПараметрыМедкарты = Новый Структура;
	ВидКарты = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойВидМедКартДляПрофОсмотров");
	
	Если ЗначениеЗаполнено(ВидКарты) Тогда
		Медкарта = Справочники.МедицинскиеКарты.СоздатьЭлемент();
		
		Медкарта.Клиент = Клиент;
		Медкарта.ВидКарты = ВидКарты;
		
		Если ЗначениеЗаполнено(Дата) Тогда
			Медкарта.ДатаРегистрации = Дата;	
		Иначе
			Медкарта.ДатаРегистрации = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Филиал) Тогда
			Медкарта.Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
		Иначе
			Медкарта.Филиал = Филиал;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Медкарта.НомерКарты) Тогда 
			ОтраслевыеДополнения.ФормированиеНомера(Медкарта, Истина);
		КонецЕсли;
		
		Медкарта.Записать();
		
		Возврат Медкарта.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.МедицинскиеКарты.ПустаяСсылка();
	
КонецФункции

// Формирует строку заключения для действия врача, если выявлено хотя бы один вредный фактор, в ином случае возвращает строку по умолчанию.
//
// Параметры:
//  ПереченьВредныхФакторов			 - Массив				 - Массив вредных факторов
//  ЗаключениеДействияПоУмолчанию	 - Строка				 - Заключение по умолчанию
//  ТаблицаПараметровДействия		 - ТаблицаЗначений		 - см. ПолучитьТаблицуДействийМедосмотраИЗначений().
//  Вид								 - ПеречислениеСсылка.ВидыДействийМедицинскогоОсмотра	 - вид вредности (вид работ или производственный фактор).
// 
// Возвращаемое значение:
//  Строка - Строка заключения.
//
Функция ЗаключениеДляДействияМедОсмотра(ПереченьВредныхФакторов, ЗаключениеДействияПоУмолчанию, ТаблицаПараметровДействия = Неопределено, Вид = Неопределено) Экспорт
	
	// Расчет стандартного заключения (по умолчанию либо по противопоказаниям, если есть).
	СтандартноеЗаключение = ЗаключениеДействияПоУмолчанию;
	
	Если ПереченьВредныхФакторов.Количество() > 0 Тогда
		СтандартноеЗаключение = "";
		Для Каждого ВредныйФактор Из ПереченьВредныхФакторов Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтандартноеЗаключение, ВредныйФактор.НомерПП);
		КонецЦикла;
		СтандартноеЗаключение = НСтр("ru='Медицинские противопоказания к работе выявлены для: '") + СтандартноеЗаключение;
	ИначеЕсли Не ЗначениеЗаполнено(СтандартноеЗаключение) Тогда
		СтандартноеЗаключение = МедосмотрыКлиентСервер.ТекстЗаключенияПоУмолчанию();
	КонецЕсли;
	
	// Расчет автозаключения
	АвтоЗаключение = "";
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметровДействия Цикл
		
		НайденныеДубликаты = ТаблицаПараметровДействия.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметра.Параметр));
		ПропуститьЗначение = Ложь;
		Для Каждого СтрокаДубль Из НайденныеДубликаты Цикл
			
			Если СтрокаДубль <> СтрокаПараметра Тогда
				// Если по действию медосмотра есть более одного значения для одного и того же параметра,
				// то берём только одно значение, более позднее по дате.
				Если СтрокаДубль.Дата > СтрокаПараметра.Дата
					Или (СтрокаДубль.Дата = СтрокаПараметра.Дата
						И ТаблицаПараметровДействия.Индекс(СтрокаДубль) < ТаблицаПараметровДействия.Индекс(СтрокаПараметра))
				Тогда
					ПропуститьЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПропуститьЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеПараметра = ?(ЗначениеЗаполнено(СтрокаПараметра.НаименованиеПараметра), СтрокаПараметра.НаименованиеПараметра, Строка(СтрокаПараметра.Параметр));
		
		Если ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
			ТекстЗначения = НаименованиеПараметра + ": " + Формат(СтрокаПараметра.Значение,"БЛ=Нет; БИ=Да");
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(АвтоЗаключение, ТекстЗначения, "; ");
		КонецЕсли;
		
	КонецЦикла;
	АвтоЗаключение = СокрЛП(АвтоЗаключение);
	
	// Выбор текста для заключения
	Если ЗначениеЗаполнено(АвтоЗаключение) Тогда
		Если Вид = Перечисления.ВидыДействийМедицинскогоОсмотра.Врач
			И ПереченьВредныхФакторов.Количество() > 0
		Тогда
			Возврат СтандартноеЗаключение + Символы.ПС + АвтоЗаключение;
		Иначе
			Возврат АвтоЗаключение;
		КонецЕсли;
	Иначе
		Возврат СтандартноеЗаключение;
	КонецЕсли;
	
КонецФункции

// Формирует таблицу значений параметров приёмов, формирующих автозаключения для Выписки по медосмотру работника.
//
// Параметры:
//  ПрохождениеМедосмотра	 - ДокументСсылка.ПрохождениеМедосмотра	 - документ прохождения медосмотра.
//  СписокДействий			 - Массив	 - массив ссылок на справочник ДействияМедосмотра.
// 
// Возвращаемое значение:
//  ТаблицаЗначений. 
//
Функция ПолучитьТаблицуДействийМедосмотраИЗначений(ПрохождениеМедосмотра, СписокДействий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрохождениеМедосмотра", ПрохождениеМедосмотра);
	Запрос.УстановитьПараметр("СписокДействий", СписокДействий);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПараметровHTML.Параметр КАК Параметр,
		|	ЗначенияПараметровHTML.Значение КАК Значение,
		|	Прием.Дата КАК Дата
		|ПОМЕСТИТЬ СписокПараметров
		|ИЗ
		|	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием КАК Прием
		|		ПО (Прием.ПервичныйПрием = &ПрохождениеМедосмотра)
		|			И (Прием.Проведен)
		|			И ЗначенияПараметровHTML.Документ = Прием.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействияМедосмотровПараметрыАвтозаключений.ДействиеМедосмотра КАК ДействиеМедосмотра,
		|	ДействияМедосмотровПараметрыАвтозаключений.Параметр КАК Параметр,
		|	СписокПараметров.Значение КАК Значение,
		|	СписокПараметров.Дата КАК Дата,
		|	ДействияМедосмотровПараметрыАвтозаключений.Наименование КАК НаименованиеПараметра
		|ИЗ
		|	СписокПараметров КАК СписокПараметров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияМедосмотровПараметрыАвтозаключений КАК ДействияМедосмотровПараметрыАвтозаключений
		|		ПО СписокПараметров.Параметр = ДействияМедосмотровПараметрыАвтозаключений.Параметр
		|			И (ДействияМедосмотровПараметрыАвтозаключений.ДействиеМедосмотра В (&СписокДействий))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьМассивПриказовПоВидуМО(ВидМедосмотра, ВернутьЗначениеДопПараметра = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыМедосмотровПриказы.Приказ КАК Приказ,
		|	ВидыМедосмотровПриказы.НеИспользоватьБезВФ КАК НеИспользоватьБезВФ
		|ИЗ
		|	Справочник.ВидыМедосмотров.Приказы КАК ВидыМедосмотровПриказы
		|ГДЕ
		|	ВидыМедосмотровПриказы.Ссылка = &ВидМедосмотра";
	
	Запрос.УстановитьПараметр("ВидМедосмотра", ВидМедосмотра);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	мПриказовВВидеМО = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если ВернутьЗначениеДопПараметра Тогда
			СтрДанные = Новый Структура("ВредныйФактор, НеИспользоватьБезВФ", Выборка.Приказ, Выборка.НеИспользоватьБезВФ);
			мПриказовВВидеМО.Добавить(СтрДанные);	
		Иначе		
			мПриказовВВидеМО.Добавить(Выборка.Приказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мПриказовВВидеМО;
	
КонецФункции

Функция ПолучитьСписокУслугПоКлиенту(ВидМедосмотра, ТипМедосмотра, Клиент, МассивФакторов, Дата, Прейскурант = Неопределено, ВозвратТаблица = Ложь) Экспорт
	
	СписокКлиентов = Новый ТаблицаЗначений;
	СписокКлиентов.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
	СписокКлиентов.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	СписокКлиентов.Колонки.Добавить("Возраст", Новый ОписаниеТипов("Число"));
	СписокКлиентов.Колонки.Добавить("ТипМедосмотра", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыМедосмотров"));
		
	Пол = Клиент.Пол;
	Возраст = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(Клиент.ДатаРождения, Дата); 
		
	СтрокаКлиент = СписокКлиентов.Добавить();
	СтрокаКлиент.Клиент = Клиент;
	СтрокаКлиент.Пол = Пол;
	СтрокаКлиент.Возраст = Возраст;
	СтрокаКлиент.ТипМедосмотра = ТипМедосмотра;
	
	ВредныеФакторы = Новый ТаблицаЗначений;
	ВредныеФакторы.Колонки.Добавить("ВредныйФактор", Новый ОписаниеТипов("СправочникСсылка.ПереченьВредныхФакторовИРабот"));
	ВредныеФакторы.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
	ВредныеФакторы.Колонки.Добавить("ТипМедосмотра", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыМедосмотров"));
	ВредныеФакторы.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	ВредныеФакторы.Колонки.Добавить("Возраст", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаФактор Из МассивФакторов Цикл
		СтрокаВредныйФактор = ВредныеФакторы.Добавить();
		СтрокаВредныйФактор.ВредныйФактор = СтрокаФактор;
		СтрокаВредныйФактор.Клиент = Клиент;
		СтрокаВредныйФактор.ТипМедосмотра = ТипМедосмотра;
		СтрокаВредныйФактор.Пол = Пол;
		СтрокаВредныйФактор.Возраст = Возраст;
	КонецЦикла;
	
	Возврат ПолучитьСписокУслугПоКлиентам(ВидМедосмотра, СписокКлиентов, ВредныеФакторы, Дата, Прейскурант, ВозвратТаблица);
	
КонецФункции

// Список услуг по клиентам исходя из их вредных факторов.
//
// Параметры:
//  СписокКлиентов	 - Массив - клиенты
//  ВредныеФакторы	 - Массив Из СправочникСсылка.ПереченьВредныхФакторовИРабот - вредные факторы
//  Дата			 - Дата - дата
//  Прейскурант		 - СправочникСсылка.Прейскуранты - прейскурант 
//  ВозвратТаблица	 - Булево - возвращать ли в таблице значений.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - результат выполнения запроса.
//
Функция ПолучитьСписокУслугПоКлиентам(ВидМедосмотра, СписокКлиентов, ВредныеФакторы, Дата, Прейскурант = Неопределено, ВозвратТаблица = Ложь, ТаблицаПриказовКлиентов = Неопределено) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ВТ_ЗагрузитьСписокКлиентовИВредныхФакторовИВеществ(МенеджерВТ, СписокКлиентов, ВредныеФакторы, ВидМедосмотра, ТаблицаПриказовКлиентов);
	ВТ_ДействияМедосмотровКлиентов(МенеджерВТ);
	ВТ_ВыполнитьУдалениеПоОграничениям(МенеджерВТ);
	ВТ_ПолучитьЗаменяемыеПозиции(МенеджерВТ);
	РезультатЗапроса = ПолучитьРезультатЗапросаСпискаУслугКлиентов(МенеджерВТ, Дата, Прейскурант);
	
	Если ВозвратТаблица Тогда
		Возврат РезультатЗапроса.Выгрузить();
	Иначе
		Возврат РезультатЗапроса.Выбрать();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПриказыИВредныеФакторыПрохожденияМедосмотраПоФакторам(ФакторыДокумента) Экспорт
	
	ПриказыФакторы = Новый Массив;
	
	Для Каждого Фактор Из ФакторыДокумента Цикл
		Если Фактор.Приказ.Родитель = МедосмотрыСервер.ПолучитьГруппуПриказовСправок() Тогда
			ПриказыФакторы.Добавить(Фактор);
		Иначе
			ПриказыФакторы.Добавить(Фактор.Приказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПриказыФакторы;
	
КонецФункции

Функция ЕстьЗаполненныеМакетыПриказов(Знач ФакторыИУсловияРаботы) Экспорт
	
	Для Каждого СтрокаФактора Из ФакторыИУсловияРаботы Цикл
		Если ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
			Если Не ПустойТабДокШаблонаСправки(СтрокаФактора.Фактор.ШаблонОсмотраСправки) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаФактора.Фактор.Приказ.МакетДляПодписанияЭЦП) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПустойТабДокШаблонаСправки(ШаблонОсмотраСправки) Экспорт
	
	ТабДок = ШаблонОсмотраСправки.ТабличныйДокумент.Получить();
	Возврат ТипЗнч(ТабДок) <> Тип("ТабличныйДокумент") Или ТабДок.ВысотаТаблицы = 0;
	
КонецФункции

Функция ПриемыПоДействиямМедосмотров(ПрохождениеМедОсмотра, СписокДействий) Экспорт
	
	ПриемыПоДействиямМедосмотров = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтметкиВыполненияДействий.Действие КАК Действие,
		|	ОтметкиВыполненияДействий.ДокументРегистратор КАК ДокументРегистратор
		|ИЗ
		|	РегистрСведений.ОтметкиВыполненияДействий КАК ОтметкиВыполненияДействий
		|ГДЕ
		|	ОтметкиВыполненияДействий.ПрохождениеМедОсмотра = &ПрохождениеМедОсмотра
		|	И ОтметкиВыполненияДействий.Выполнено
		|	И ОтметкиВыполненияДействий.Действие В(&СписокДействий)
		|	И ТИПЗНАЧЕНИЯ(ОтметкиВыполненияДействий.ДокументРегистратор) = ТИП(Документ.Прием)";
	
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", ПрохождениеМедОсмотра);
	Запрос.УстановитьПараметр("СписокДействий", СписокДействий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПриемыПоДействиямМедосмотров.Вставить(Выборка.Действие, Выборка.ДокументРегистратор);
	КонецЦикла;
	
	Возврат ПриемыПоДействиямМедосмотров;
	
КонецФункции

Функция ПолучитьВредностиКлиентаИзПредыдущегоПМО(Клиент, ВидМО, СсылкаПМО, ПопыткаУчестьКонтрагентаПрофессию=Ложь, Профессия=Неопределено, МестоРаботы=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНаПрохождениеМедосмотраКлиенты.Ссылка КАК Ссылка,
		|	СписокНаПрохождениеМедосмотраКлиенты.Клиент КАК Клиент,
		|	СписокНаПрохождениеМедосмотраКлиенты.Профессия КАК Профессия
		|ПОМЕСТИТЬ СписокНаПрохождениеМедосмотраКлиенты
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра.Клиенты КАК СписокНаПрохождениеМедосмотраКлиенты
		|ГДЕ
		|	СписокНаПрохождениеМедосмотраКлиенты.Клиент = &Клиент
		|	И СписокНаПрохождениеМедосмотраКлиенты.Ссылка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка КАК Ссылка,
		|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор КАК ВредныйФактор,
		|	ВЫБОР
		|		КОГДА СписокНаПрохождениеМедосмотраКлиенты.Профессия ЕСТЬ NULL
		|			ТОГДА ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.Профессия
		|		ИНАЧЕ СписокНаПрохождениеМедосмотраКлиенты.Профессия
		|	КОНЕЦ КАК Профессия,
		|	ВЫБОР
		|		КОГДА СписокНаПрохождениеМедосмотраКлиенты.Ссылка.МестоРаботы ЕСТЬ NULL
		|			ТОГДА ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.МестоРаботы
		|		ИНАЧЕ СписокНаПрохождениеМедосмотраКлиенты.Ссылка.МестоРаботы
		|	КОНЕЦ КАК МестоРаботы
		|ПОМЕСТИТЬ ТЗДанные
		|ИЗ
		|	Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокНаПрохождениеМедосмотраКлиенты КАК СписокНаПрохождениеМедосмотраКлиенты
		|		ПО ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.Клиент = СписокНаПрохождениеМедосмотраКлиенты.Клиент
		|			И ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка.СписокНаПрохождениеМедосмотра = СписокНаПрохождениеМедосмотраКлиенты.Ссылка
		|ГДЕ
		|	(ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор.Приказ В (&Приказы)
		|			ИЛИ ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор В (&Приказы))
		|	И ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка <> &СсылкаПМО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗДанные.Ссылка КАК Ссылка,
		|	ТЗДанные.ВредныйФактор КАК ВредныйФактор,
		|	ТЗДанные.Профессия КАК Профессия,
		|	ТЗДанные.МестоРаботы КАК МестоРаботы
		|ИЗ
		|	ТЗДанные КАК ТЗДанные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	
	Приказы = ПолучитьМассивПриказовПоВидуМО(ВидМО);
	
	Запрос.УстановитьПараметр("Приказы", Приказы);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("СсылкаПМО", СсылкаПМО);
	
	ТЗДанныеВредныхФакторов = Запрос.Выполнить().Выгрузить();
	
	мВредныхФакторов = Новый Массив;
	
	Если ТЗДанныеВредныхФакторов.Количество() > 0 Тогда
		
		Если ПопыткаУчестьКонтрагентаПрофессию Тогда
			СтрокиСПрофМР = ТЗДанныеВредныхФакторов.НайтиСтроки(Новый Структура("Профессия, МестоРаботы", Профессия, МестоРаботы));
			Если СтрокиСПрофМР.Количество() > 0 Тогда
				ДокументОтбор = СтрокиСПрофМР[0].Ссылка;
			Иначе
				ДокументОтбор = ТЗДанныеВредныхФакторов[0].Ссылка;
			КонецЕсли;
		Иначе
			ДокументОтбор = ТЗДанныеВредныхФакторов[0].Ссылка;
		КонецЕсли;
		
		ВредныеФакторыПоДокументу = ТЗДанныеВредныхФакторов.НайтиСтроки(Новый Структура("Ссылка", ДокументОтбор));
		
		Для Каждого Эл Из ВредныеФакторыПоДокументу Цикл
			мВредныхФакторов.Добавить(Новый Структура("Вредность, НомерПП", Эл.ВредныйФактор, Эл.ВредныйФактор.НомерПП));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат мВредныхФакторов;
	
КонецФункции

Функция ПолучитьМассивПриказовИИныхМедосмотров(ВидМедосмотра) Экспорт
	
	мДоступных = Новый Массив;
	мВредныхФакторов = Новый Массив;
	мПриказов = Новый Массив;
	
	
	Для Каждого Эл Из ВидМедосмотра.Приказы Цикл
		Если ТипЗнч(Эл.Приказ) = Тип("СправочникСсылка.ПриказыМедосмотров") Тогда
			мПриказов.Добавить(Эл.Приказ);
		Иначе
			мВредныхФакторов.Добавить(Эл.Приказ);
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
		|ГДЕ
		|	(ПереченьВредныхФакторовИРабот.Ссылка В (&Ссылка)
		|			ИЛИ ПереченьВредныхФакторовИРабот.Приказ В (&Приказ))";
	
	Запрос.УстановитьПараметр("Приказ", мПриказов);
	Запрос.УстановитьПараметр("Ссылка", мВредныхФакторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		мДоступных.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
		
	Возврат мДоступных;
	
КонецФункции

Функция ПрофессияМестоРаботыПоПолямПМОИСпискуМО(Профессия, МестоРаботы, СписокНаПМО, Клиент) Экспорт
	
	ВозвращаемыеДанные = Новый Структура("МестоРаботы, Профессия");
	
	Если ЗначениеЗаполнено(СписокНаПМО) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНаПрохождениеМедосмотраКлиенты.Профессия КАК Профессия,
		|	СписокНаПрохождениеМедосмотраКлиенты.Ссылка.МестоРаботы КАК МестоРаботы
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра.Клиенты КАК СписокНаПрохождениеМедосмотраКлиенты
		|ГДЕ
		|	СписокНаПрохождениеМедосмотраКлиенты.Ссылка = &Ссылка
		|	И СписокНаПрохождениеМедосмотраКлиенты.Клиент = &Клиент";
		
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Ссылка", СписокНаПМО);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ВозвращаемыеДанные.МестоРаботы = Выборка.МестоРаботы;
			ВозвращаемыеДанные.Профессия = Выборка.Профессия;
			Возврат ВозвращаемыеДанные;
		КонецЦикла;
	КонецЕсли;
	
	ВозвращаемыеДанные.МестоРаботы = МестоРаботы;
	ВозвращаемыеДанные.Профессия = Профессия;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

Функция ПолучитьСтатистикуРаботников(СписокМедосмотра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА кл.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КолЖ,
	|	СУММА(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(кл.ДатаРождения, &ТекущаяДата, ГОД) < 18
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Кол18
	|ИЗ
	|	Справочник.Клиенты КАК кл
	|ГДЕ
	|	кл.Ссылка В(&СписокМедосмотра)
	|	И (кл.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ИЛИ РАЗНОСТЬДАТ(кл.ДатаРождения, &ТекущаяДата, ГОД) < 18)";
	
	Запрос.Параметры.Вставить("СписокМедосмотра",СписокМедосмотра);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат Новый Структура("КолЖ, Кол18", ТабРезультат.Итог("КолЖ"),ТабРезультат.Итог("Кол18"));
	
КонецФункции

// Номера пунктов вредных условий работы по приказу 29н, подразумеважщие необходимость медицинской книжки работника.
// 
// Возвращаемое значение:
//  Массив - из Строка - номера пунктов вредностей.
//
Функция ПунктыВредныхФакторовДляМедкнижки() Экспорт
	
	ПунктыВредныхФакторовДляМедкнижки = Новый Массив;
	ПунктыВредныхФакторовДляМедкнижки.Добавить("23");
	ПунктыВредныхФакторовДляМедкнижки.Добавить("24");
	ПунктыВредныхФакторовДляМедкнижки.Добавить("25");
	ПунктыВредныхФакторовДляМедкнижки.Добавить("26");
	
	Возврат ПунктыВредныхФакторовДляМедкнижки;
	
КонецФункции

#КонецОбласти

#Область Справки

// Возвращает перечень номенклатуры справок, цена которых зависит от пола клиента
// 
// Возвращаемое значение:
//   Массив - массив элементов СправочникСсылка.Номенклатура.
//
Функция НоменклатураСправокЦенаПоПолуКлиента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МедосмотрСправка = ИСТИНА
	|	И (Номенклатура.СпособФомированияЦеныМедосмотра = ЗНАЧЕНИЕ(Перечисление.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямСРедактированием)
	|			ИЛИ Номенклатура.СпособФомированияЦеныМедосмотра = ЗНАЧЕНИЕ(Перечисление.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямБезРедактирования))"
	;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

// Обработчик события ПередЗаписью документов ОказаниеУслуг, подготавливающий документ для последующего обработчика
//	события ПриЗаписи в части медосмотров.
//
// Параметры:
//  Источник - ДокументОбъект.ОказаниеУслуг	 - записываемый документ.
//  Отказ	 - Булево.
//  РежимЗаписи - РежимЗаписиДокумента.
//  РежимПроведения - РежимПроведенияДокумента.
//                                                                         
Процедура МедосмотрыОказаниеУслугПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	СсылкаПометкаУдаления = Источник.Ссылка.ПометкаУдаления;
	
	Если Источник.ПометкаУдаления И СсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("УстановкаПометкиУдаления", Источник.ПометкаУдаления И Не СсылкаПометкаУдаления);
	Источник.ДополнительныеСвойства.Вставить("СнятиеПометкиУдаления", Не Источник.ПометкаУдаления И СсылкаПометкаУдаления);
	Источник.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

// Обработчик записи документа ОказаниеУслуг для функционала медицинских справок.
//
// Параметры:
//  Источник - ДокументОбъект.ОказаниеУслуг	 - записываемой документ.
//  Отказ	 - Булево						 - признак отказа записи.
//
Процедура МедосмотрыОказаниеУслугПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("СоставСправок") Тогда
		ЗаписатьДействияМедОсмотровДляСправок(Источник.ДополнительныеСвойства.СоставСправок, Источник.Ссылка);
	КонецЕсли;
	
	Если	Не Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
		Или	Не Источник.ДополнительныеСвойства.Свойство("УстановкаПометкиУдаления")
		Или	Не Источник.ДополнительныеСвойства.Свойство("СнятиеПометкиУдаления")
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Коррекция Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("УстановкаПометкиУдаления", Источник.ДополнительныеСвойства.УстановкаПометкиУдаления);
	ПараметрыЗаписи.Вставить("СнятиеПометкиУдаления", Источник.ДополнительныеСвойства.СнятиеПометкиУдаления);
	ПараметрыЗаписи.Вставить("РежимЗаписи", Источник.ДополнительныеСвойства.РежимЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ДанныеПоМедосмотрам") Тогда
		ДанныеПоМедосмотрам = ПараметрыЗаписи.ДанныеПоМедосмотрам;
	Иначе
		ДанныеПоМедосмотрам = ОказаниеУслугСправкиПриЗаписиСборДанных(Источник, ПараметрыЗаписи).ДанныеПоМедосмотрам;
	КонецЕсли;
	
	ОказаниеУслугПриЗаписиЗавершение(Источник, ПараметрыЗаписи, ДанныеПоМедосмотрам);
	
КонецПроцедуры

Процедура ЗаписатьДействияМедОсмотровДляСправок(СоставСправок, СсылкаНаДокумент)
	
	НЗ = РегистрыСведений.ДействияМедОсмотровДляСправок.СоздатьНаборЗаписей();
	НЗ.Отбор.ОказаниеУслуг.Установить(СсылкаНаДокумент);
	
	Для Каждого Эл Из СоставСправок Цикл
		// Пропускаем если ни одной отметки не сняли
		Если СоставСправок.НайтиСтроки(Новый Структура("НоменклатураСправки, Использовать", Эл.НоменклатураСправки, Ложь)).Количество() = 0 
			И СсылкаНаДокумент.Работы.НайтиСтроки(Новый Структура("Номенклатура", Эл.НоменклатураСправки)).Количество() <> 0 
		Тогда
			Продолжить;
		КонецЕсли;
		
		Если Эл.Использовать Тогда
			Запись = НЗ.Добавить();
			Запись.ОказаниеУслуг = СсылкаНаДокумент;
		    Запись.НоменклатураСправки = Эл.НоменклатураСправки;
			Запись.Действие = Эл.Действие;
		КонецЕсли;
	КонецЦикла;
	
	НЗ.Записать(Истина);
	
КонецПроцедуры

// Обновляет список параметров приема для списка действия медосмотра справки.
//  Обязательно указывается либо номенклатура, либо прохождение медосмотра.
//
// Параметры:
//  ДействияМедосмотра			 - Массив						 - Массив элементов типа СправочникСсылка.ДействияМедосмотра.
//  ПараметрыПриема				 - ТабличнаяЧасть, ДанныеФормыКоллекция	 - Табличная часть параметров редактируемого документа медосмотра.
//  Документ					 - ДокументОбъект						 - Контекст расчета значений по умолчанию для добавляемых параметров в ПараметрыПриема.
//  Номенклатура				 - СправочникСсылка.Номенклатура		 - Номенклатура справки для определения шаблона печати справки.
//  ПрохождениеМедОсмотра		 - ДокументСсылка.ПрохождениеМедосмотра	 - Указывается, если не указана номенклатура справки.
//  ВключатьПараметрыБезДействий - Булево								 - Требуется ли добавлять параметры, которым нет соответствующего действия медосмотра в шаблоне номенклатуры справки.
//  ЗначенияАвтозаполнения		 - Соответствие							 - Ключ - ссылнка на параметр, значение - значение параметра для установки, если он добавляется в ПараметрыПриема.
//
Процедура ОбновитьСписокПараметровДокументаМедосмотраСправки(Знач ДействияМедосмотра, ПараметрыПриема, Знач Документ, Номенклатура = Неопределено, 
															 ПрохождениеМедОсмотра = Неопределено, ВключатьПараметрыБезДействий = Ложь,
															 ЗначенияАвтозаполнения = Неопределено, ТребуетсяАвтозаполнение = Истина) Экспорт
															 
	Если ВключатьПараметрыБезДействий Тогда
		ДействияМедосмотра.Добавить(ПредопределенноеЗначение("Справочник.ДействияМедосмотра.ПустаяСсылка"));
	КонецЕсли;
															 
	ПараметрыДействий = МедосмотрыСервер.ПараметрыПриемаДействийМедосмотра(ДействияМедосмотра, Номенклатура, ПрохождениеМедОсмотра);
	
	СтарыеЗначения = Новый Соответствие;
	Для Каждого СтрокаПараметра Из ПараметрыПриема Цикл
		Если ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
			СтарыеЗначения.Вставить(СтрокаПараметра.Параметр, СтрокаПараметра.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДляАвтоЗаполнения = Новый Массив;
	
	ПараметрыПриема.Очистить();
	Для Каждого СтруктураПараметра Из ПараметрыДействий Цикл
		СтрокаПараметра = ПараметрыПриема.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметра, СтруктураПараметра);
		
		СтароеЗначение = СтарыеЗначения.Получить(СтрокаПараметра.Параметр);
		Если СтароеЗначение <> Неопределено Тогда
			СтрокаПараметра.Значение = СтароеЗначение;
		Иначе
			ПараметрыДляАвтоЗаполнения.Добавить(СтрокаПараметра.Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ЗначенияАвтозаполнения) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ЗначенияАвтозаполнения Цикл
			мсСтрокаПараметра = ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр", КлючЗначение.Ключ));
			Если мсСтрокаПараметра.Количество() <> 0 Тогда
				Индекс = ПараметрыДляАвтоЗаполнения.Найти(КлючЗначение.Ключ);
				Если Индекс <> Неопределено Тогда
					мсСтрокаПараметра[0].Значение = КлючЗначение.Значение; // Менее приоритетно, чем старое значение, но более, чем обычное автозаполнение.
					ПараметрыДляАвтоЗаполнения.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяАвтозаполнение Тогда
		Если ПараметрыДляАвтоЗаполнения.Количество() <> 0 Тогда
			ЗначенияПоУмолчанию = РаботаСШаблонамиHTML.ПолучитьЗначенияПоУмолчаниюМассиваПараметров(ПараметрыДляАвтоЗаполнения, Документ);
			Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
				НайденныеСтроки = ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр", ЗначениеПоУмолчанию.Параметр));
				Если НайденныеСтроки.Количество() <> 0 Тогда
					НайденныеСтроки[0].Значение = ЗначениеПоУмолчанию.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет список параметров приема для списка действия медосмотра справки.
//  Возвращает массив структур с ключами "Параметр" и "Представление".
//
// Параметры:
//  ДействияМедосмотра			 - Массив						 - Массив элементов типа СправочникСсылка.ДействияМедосмотра.
//  Номенклатура				 - СправочникСсылка.Номенклатура - Номенклатура справки для определения шаблона печати справки.
//  ПрохождениеМедосмотра		 - ДокументСсылка.ПрохождениеМедосмотра	 - Указывается, если не указана номенклатура справки.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПараметрыПриемаДействийМедосмотра(Знач ДействияМедосмотра, ВредныйФакторСправки = Неопределено, ПрохождениеМедосмотра = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ВредныйФакторСправки) Тогда
		ШаблонСправки = ВредныйФакторСправки.ШаблонОсмотраСправки;
	ИначеЕсли ЗначениеЗаполнено(ПрохождениеМедосмотра) Тогда
		ШаблонСправки = ПрохождениеМедосмотра.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонСправки) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ШаблонСправки", ШаблонСправки);
		Запрос.УстановитьПараметр("ДействияМедосмотра", ДействияМедосмотра);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныHTMLСоответствияПараметрам.Параметр КАК Параметр,
		|	ШаблоныHTMLСоответствияПараметрам.Представление КАК Представление
		|ИЗ
		|	Справочник.ШаблоныHTML.СоответствияПараметрам КАК ШаблоныHTMLСоответствияПараметрам
		|ГДЕ
		|	ШаблоныHTMLСоответствияПараметрам.ДействиеМедосмотра В(&ДействияМедосмотра)
		|	И ШаблоныHTMLСоответствияПараметрам.Ссылка = &ШаблонСправки
		|	И ШаблоныHTMLСоответствияПараметрам.Параметр <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыHTML.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШаблоныHTMLСоответствияПараметрам.НомерСтроки"
		;
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

// Заполнить условное оформление списка параметров приема
//
// Параметры:
//   УсловноеОформление - УсловноеОформление
//   ПараметрыПриема - Параметры.
//   ПолеОтбора - Строка - Поле отбора.
//   ПолеОформления - Строка - Поле оформления.
//
Процедура ЗаполнитьУсловноеОформлениеСпискаПараметровПриема(УсловноеОформление, Знач ПараметрыПриема, ПолеОтбора, ПолеОформления) Экспорт
	
	Для Каждого СтрокаПараметра Из ПараметрыПриема Цикл
		Параметр = СтрокаПараметра.Параметр;
		
		Если ЗначениеЗаполнено(Параметр) Тогда
			ФорматнаяСтрока = Параметр.ФорматнаяСтрока;
			Если ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
				НужныйЭлементОформления = Неопределено;
				Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
					Отбор = ЭлементОформления.Отбор.Элементы;
					Если Отбор.Количество() = 1
						И ТипЗнч(Отбор[0]) = Тип("ЭлементОтбораКомпоновкиДанных")
						И Отбор[0].ЛевоеЗначение = ПолеОтбора
						И Отбор[0].ПравоеЗначение = Параметр
					Тогда
						НужныйЭлементОформления = ЭлементОформления;
					КонецЕсли;
				КонецЦикла;
				
				Если НужныйЭлементОформления = Неопределено Тогда
					НужныйЭлементОформления = УсловноеОформление.Элементы.Добавить();
					Отбор = НужныйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора);
					Отбор.ПравоеЗначение = Параметр;
					Отбор.Использование = Истина;
				КонецЕсли;
				
				НужныйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", ФорматнаяСтрока);
				
				НужныйЭлементОформления.Поля.Элементы.Очистить();
				Поле = НужныйЭлементОформления.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);
				Поле.Использование = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПриказСправки(Приказ) Экспорт
	Возврат Приказ.Родитель = ПолучитьГруппуПриказовСправок();
КонецФункции

Функция ПолучитьГруппуПриказовСправок() Экспорт
	Возврат Справочники.ПриказыМедосмотров.СправкиИИныеМедосмотры;
КонецФункции

#Область РаботаСоСправкамиОказаниеУслуг

Процедура СоздатьРеквизитыКомандыИЭлементыДляРаботыСоСправками(ЭтаФорма) Экспорт
	
	СоздатьРеквизитыДляРаботыСоСправками(ЭтаФорма);
	СоздатьКомандыДляРаботыСоСправками(ЭтаФорма);
	СоздатьЭлементыДляРаботыСоСправками(ЭтаФорма);
	
КонецПроцедуры

Процедура СоздатьРеквизитыДляРаботыСоСправками(ЭтаФорма)
	
	МассивДобавлеяемыхРеквизитов = Новый Массив;
	МассивДобавлеяемыхРеквизитов.Добавить(Новый РеквизитФормы("СоставСправок", Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));

	ТЗСоставСправок = Новый ТаблицаЗначений;
	ТЗСоставСправок.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
	ТЗСоставСправок.Колонки.Добавить("Действие", Новый ОписаниеТипов("СправочникСсылка.ДействияМедосмотра"));
	ТЗСоставСправок.Колонки.Добавить("НоменклатураДействия", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗСоставСправок.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ТЗСоставСправок.Колонки.Добавить("НоменклатураСправки", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для Каждого Колонка Из ТЗСоставСправок.Колонки Цикл
		МассивДобавлеяемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"СоставСправок"));   
	КонецЦикла;
	
	МассивДобавлеяемыхРеквизитов.Добавить(Новый РеквизитФормы("СоставСправокСправки", Новый ОписаниеТипов("ТаблицаЗначений")));

	ТЗСоставСправок = Новый ТаблицаЗначений;
	ТЗСоставСправок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для Каждого Колонка Из ТЗСоставСправок.Колонки Цикл
		МассивДобавлеяемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"СоставСправокСправки"));   
	КонецЦикла;
	
	МассивДобавлеяемыхРеквизитов.Добавить(Новый РеквизитФормы("СоставСправокУвеличивватьКолвоДляСправок", Новый ОписаниеТипов("Булево")));
	
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавлеяемыхРеквизитов);
	
КонецПроцедуры

Процедура СоздатьКомандыДляРаботыСоСправками(ЭтаФорма)
	
	Команды = ЭтаФорма.Команды;
	
	// Кнопка "Закрыть"
	НоваяКоманда = Команды.Добавить("ЗакрытьГруппуНоменклатураДействийСправки");
	НоваяКоманда.Заголовок = "Закрыть";
	НоваяКоманда.Действие = "Подключаемый_ЗакрытьГруппуНоменклатураДействийСправки";
	
	// Кнопка "Заменить справку номенклатурой действий"
	НоваяКоманда = Команды.Добавить("ЗаменитьСправкуНоменклатуройДействий");
	НоваяКоманда.Заголовок = "Заменить справку номенклатурой действий";
	НоваяКоманда.Действие = "Подключаемый_ЗаменитьСправкуНоменклатуройДействий";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
	// Кнопка "Удалить справку"
	НоваяКоманда = Команды.Добавить("УдалитьСправкуИзСоставаСправок");
	НоваяКоманда.Заголовок = "Удалить справку";
	НоваяКоманда.Действие = "Подключаемый_УдалитьСправкуИзСоставаСправок";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
КонецПроцедуры

Процедура СоздатьЭлементыДляРаботыСоСправками(ЭтаФорма)
	
	Элементы = ЭтаФорма.Элементы;
	
	// Всплывающая группа
	ГруппаСоставСправок = Элементы.Добавить("ГруппаСоставСправок", Тип("ГруппаФормы"), Элементы.ГруппаРаботы);
	ГруппаСоставСправок.Заголовок = "Состав медосмотров, справок";
	ГруппаСоставСправок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСоставСправок.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаСоставСправок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Группа с кнопками и флагом увеличения количества номенклатуры.
	ГруппаСоставСправокКоманды = Элементы.Добавить("ГруппаСоставСправокКоманды", Тип("ГруппаФормы"), ГруппаСоставСправок);
	ГруппаСоставСправокКоманды.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСоставСправокКоманды.ОтображатьЗаголовок = Ложь;
	ГруппаСоставСправокКоманды.Ширина = 100;
	ГруппаСоставСправокКоманды.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементФормы = Элементы.Добавить("СоставСправокСправкиЗакрытьГруппуНоменклатураДействийСправки", Тип("КнопкаФормы"), ГруппаСоставСправокКоманды);
	ЭлементФормы.ИмяКоманды = "ЗакрытьГруппуНоменклатураДействийСправки";
	ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
	ЭлементФормы.Ширина = 10;
	
	ЭлементФормы = Элементы.Добавить("СоставСправокСправкиУдалитьСправкуИзСоставаСправок", Тип("КнопкаФормы"), ГруппаСоставСправокКоманды);
	ЭлементФормы.ИмяКоманды = "УдалитьСправкуИзСоставаСправок";
	ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементФормы = Элементы.Добавить("СоставСправокСправкиЗаменитьСправкуНоменклатуройДействий", Тип("КнопкаФормы"), ГруппаСоставСправокКоманды);
	ЭлементФормы.ИмяКоманды = "ЗаменитьСправкуНоменклатуройДействий";
	ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементПоле = Элементы.Добавить("СоставСправокУвеличивватьКолвоДляСправок", Тип("ПолеФормы"), ГруппаСоставСправок);
	ЭлементПоле.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПоле.ПутьКДанным = "СоставСправокУвеличивватьКолвоДляСправок";
	ЭлементПоле.Заголовок = "При замене увеличивать количество если уже умеется такая номенклатура";
	
	ЭлементСоставСправокСправки = Элементы.Добавить("СоставСправокСправки", Тип("ТаблицаФормы"), ГруппаСоставСправок);
	ЭлементСоставСправокСправки.ПутьКДанным = "СоставСправокСправки";
	ЭлементСоставСправокСправки.Шапка = Ложь;
	ЭлементСоставСправокСправки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементСоставСправокСправки.Заголовок = "Справки в документе";
	ЭлементСоставСправокСправки.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветАкцента;
	ЭлементСоставСправокСправки.Высота = 1;
	ЭлементСоставСправокСправки.Ширина = 100;
	ЭлементСоставСправокСправки.РастягиватьПоГоризонтали = Ложь;
	ЭлементСоставСправокСправки.КоманднаяПанель.Видимость = Ложь;
	ЭлементСоставСправокСправки.КоманднаяПанель.Доступность = Ложь;
	ЭлементСоставСправокСправки.КонтекстноеМеню.Видимость = Ложь;
	ЭлементСоставСправокСправки.КонтекстноеМеню.Доступность = Ложь;

	ЭлементСоставСправокСправки.УстановитьДействие("ПриАктивизацииСтроки", "СоставСправокСправкиПриАктивизацииСтроки");
	
	// Таблица с Номенклатура
	ЭлементПоле = Элементы.Добавить("СоставСправокСправкиНоменклатура", Тип("ПолеФормы"), ЭлементСоставСправокСправки);
	ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоле.ПутьКДанным = "СоставСправокСправки.Номенклатура";
	ЭлементПоле.ТолькоПросмотр = Истина;
	
	// Таблица с Действие медосмотра, Номенклатура, Цена
	СоставСправок = Элементы.Добавить("СоставСправок", Тип("ТаблицаФормы"), ГруппаСоставСправок);
	СоставСправок.ПутьКДанным = "СоставСправок";
	СоставСправок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	СоставСправок.Заголовок = "Состав выбранного медосмотра";
	СоставСправок.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветАкцента;
	СоставСправок.Ширина = 100;
	СоставСправок.РастягиватьПоГоризонтали = Ложь;
	СоставСправок.КоманднаяПанель.Видимость = Ложь;
	СоставСправок.КоманднаяПанель.Доступность = Ложь;
	СоставСправок.КонтекстноеМеню.Видимость = Ложь;
	СоставСправок.КонтекстноеМеню.Доступность = Ложь;

	ЭлементПоле = Элементы.Добавить("СоставСправокИспользовать", Тип("ПолеФормы"), СоставСправок);
	ЭлементПоле.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПоле.ПутьКДанным = "СоставСправок.Использовать";
	ЭлементПоле.Заголовок = "☑";
	ЭлементПоле.УстановитьДействие("ПриИзменении", "СоставСправокИспользоватьПриИзменении");
	
	ЭлементПоле = Элементы.Добавить("СоставСправокДействие", Тип("ПолеФормы"), СоставСправок);
	ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоле.ПутьКДанным = "СоставСправок.Действие";
	ЭлементПоле.ТолькоПросмотр = Истина;
	
	ЭлементПоле = Элементы.Добавить("СоставСправокНоменклатураДействия", Тип("ПолеФормы"), СоставСправок);
	ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоле.ПутьКДанным = "СоставСправок.НоменклатураДействия";
	ЭлементПоле.Заголовок = "Номенклатура действия";
	ЭлементПоле.ТолькоПросмотр = Истина;
	
	ЭлементПоле = Элементы.Добавить("СоставСправокЦена", Тип("ПолеФормы"), СоставСправок);
	ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоле.ПутьКДанным = "СоставСправок.Цена";
	ЭлементПоле.ТолькоПросмотр = Истина;
	ЭлементПоле.Ширина = 10;
	ЭлементПоле.РастягиватьПоГоризонтали = Ложь;
	
КонецПроцедуры

Процедура УстановитьДанныеСправокИзРегистра(ЭтаФорма) Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	Объект = ЭтаФорма.Объект;
	
	Элементы["ГруппаСоставСправок"].Видимость = Ложь;
	
	ОбработаннаяНоменклатура = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияМедОсмотровДляСправок.ОказаниеУслуг КАК ОказаниеУслуг,
		|	ДействияМедОсмотровДляСправок.НоменклатураСправки КАК НоменклатураСправки,
		|	ДействияМедОсмотровДляСправок.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ДействияМедОсмотровДляСправок КАК ДействияМедОсмотровДляСправок
		|ГДЕ
		|	ДействияМедОсмотровДляСправок.ОказаниеУслуг = &ОказаниеУслуг
		|ИТОГИ ПО
		|	НоменклатураСправки";
		
		Запрос.УстановитьПараметр("ОказаниеУслуг", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			ОбработаннаяНоменклатура.Добавить(Выборка.НоменклатураСправки);
			Если ЭтаФорма["СоставСправокСправки"].НайтиСтроки(Новый Структура("Номенклатура", Выборка.НоменклатураСправки)).Количество() = 0 Тогда
				НоваяСтрока = ЭтаФорма["СоставСправокСправки"].Добавить();
				НоваяСтрока.Номенклатура = Выборка.НоменклатураСправки;
			КонецЕсли;
			ВыборкаДетальныеЗаписи = Выборка.Выбрать();
			КонтекстДействия = ОбновитьСоставСправокПоСтрокеСервер(Выборка.НоменклатураСправки, Объект.Клиент, Объект.Дата, Объект.Прейскурант);
			
			Если КонтекстДействия = Неопределено 
				Или КонтекстДействия.СпособФомированияЦеныМедосмотра <> Перечисления.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямСРедактированием 
			Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Действие Из КонтекстДействия.ДействияМедосмотра Цикл
				НоваяСтрока = ЭтаФорма["СоставСправок"].Добавить();
				НоваяСтрока.Действие = Действие.Действие;
				НоваяСтрока.НоменклатураСправки = Выборка.НоменклатураСправки;
				НоваяСтрока.Цена = Действие.Цена;
				НоваяСтрока.НоменклатураДействия = Действие.Номенклатура;
			КонецЦикла;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НайденныеДействия = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки, Действие", Выборка.НоменклатураСправки, ВыборкаДетальныеЗаписи.Действие));
				Для Каждого Эл Из НайденныеДействия Цикл
					Эл.Использовать = Истина;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Эл Из Объект.Работы Цикл
		Если ОбработаннаяНоменклатура.Найти(Эл.Номенклатура) = Неопределено Тогда
			КонтекстДействия = ОбновитьСоставСправокПоСтрокеСервер(Эл.Номенклатура, Объект.Клиент, Объект.Дата, Объект.Прейскурант);
			Если КонтекстДействия = Неопределено 
				Или КонтекстДействия.СпособФомированияЦеныМедосмотра <> Перечисления.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямСРедактированием 
			Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтаФорма["СоставСправокСправки"].НайтиСтроки(Новый Структура("Номенклатура", Эл.Номенклатура)).Количество() = 0 Тогда
				НоваяСтрока = ЭтаФорма["СоставСправокСправки"].Добавить();
				НоваяСтрока.Номенклатура = Эл.Номенклатура;
			КонецЕсли;
			
			Для Каждого Действие Из КонтекстДействия.ДействияМедосмотра Цикл
				НоваяСтрока = ЭтаФорма["СоставСправок"].Добавить();
				НоваяСтрока.Действие = Действие.Действие;
				НоваяСтрока.НоменклатураСправки = Эл.Номенклатура;
				НоваяСтрока.Цена = Действие.Цена;
				НоваяСтрока.НоменклатураДействия = Действие.Номенклатура;
				НоваяСтрока.Использовать = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Элементы["ГруппаСоставСправок"].Видимость = ЭтаФорма["СоставСправок"].Количество() > 0;
	
КонецПроцедуры

Функция ОбновитьСоставСправокПоСтрокеСервер(Номенклатура, Клиент, ДатаДокумента, Прейскурант) Экспорт
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "МедосмотрСправка") = Истина Тогда
		
		Если Номенклатура.СпособФомированияЦеныМедосмотра = Перечисления.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямСРедактированием
			ИЛИ Номенклатура.СпособФомированияЦеныМедосмотра = Перечисления.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямБезРедактирования 
		Тогда
			
			Контекст = Новый Структура("СпособФомированияЦеныМедосмотра, ДействияМедосмотра", Номенклатура.СпособФомированияЦеныМедосмотра);
			
			ВредныеФакторы = Новый Массив;
			ВредныеФакторы.Добавить(Номенклатура.ВредныйФакторСправки);
			
			Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
				ДатаДляСправки = ТекущаяДата();
			Иначе
				ДатаДляСправки = ДатаДокумента;
			КонецЕсли;
			
			ТЗДействий = МедосмотрыСервер.ПолучитьСписокУслугПоКлиенту(Неопределено, Перечисления.ТипыМедосмотров.ПустаяСсылка(), Клиент, ВредныеФакторы, ДатаДляСправки, Прейскурант, Истина);
			
			ДействияМедосмотра = Новый Массив;
			
			Для Каждого Эл Из ТЗДействий Цикл
				
				Данные = Новый Структура();
				Данные.Вставить("Действие", Эл.Действие);
				Данные.Вставить("Номенклатура", Эл.Номенклатура);
				ОтборВрачи = Новый Структура("Врач, НеУчитыватьПриРасчетеЦены",Эл.Действие, Истина);
				ОтборИсследования = Новый Структура("Исследование, НеУчитыватьПриРасчетеЦены",Эл.Действие, Истина);
				Если Номенклатура.ВредныйФакторСправки.Врачи.НайтиСтроки(ОтборВрачи).Количество()
					+ Номенклатура.ВредныйФакторСправки.ЛабораторныеИФункциональныеИсследования.НайтиСтроки(ОтборИсследования).Количество() > 0
				Тогда
					Данные.Вставить("Цена", 0);
				Иначе
					Данные.Вставить("Цена", Эл.Цена);
				КонецЕсли;
				ДействияМедосмотра.Добавить(Данные);
				
			КонецЦикла;
			
			Контекст.ДействияМедосмотра = ДействияМедосмотра;
			
			Возврат Контекст;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ФормаОказаниеУслугПередЗаписьюНаСервере(ЭтаФорма, ДокументОбъект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "СоставСправок") Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("СоставСправок", ЭтаФорма["СоставСправок"].Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПустуюТЗДляПростановкиОтметокПМО() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ЗаказВоВнешююЛабораторию", Новый ОписаниеТипов("ДокументСсылка.ЗаказВоВнешнююЛабораторию"));
	ТипКодПробы = Метаданные.Документы.ЗаказВоВнешнююЛабораторию.ТабличныеЧасти.Исследования.Реквизиты.КодПробы.Тип;
	ТЗ.Колонки.Добавить("КодПробы", ТипКодПробы);
	ТЗ.Колонки.Добавить("Прием", Новый ОписаниеТипов("ДокументСсылка.Прием"));
	
	Возврат ТЗ;
	
КонецФункции

Процедура УстановитьОтметкиДляДействийПМОПриСозданииДокументаИзВнЛаборатории(ТЗДляПростановкиОтметокПМО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТЗДляПростановкиОтметокПМО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Запросом получаем ПМО которым может проставить отметки о выполнении анализов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗДляПростановкиОтметокПМО.ЗаказВоВнешююЛабораторию КАК ЗаказВоВнешююЛабораторию,
		|	ТЗДляПростановкиОтметокПМО.КодПробы КАК КодПробы,
		|	ТЗДляПростановкиОтметокПМО.Прием КАК Прием
		|ПОМЕСТИТЬ ТЗДляПростановкиОтметокПМО
		|ИЗ
		|	&ТЗДляПростановкиОтметокПМО КАК ТЗДляПростановкиОтметокПМО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка КАК Ссылка,
		|	ЗаказВоВнешнююЛабораториюИсследования.Номенклатура КАК Номенклатура,
		|	ТЗДляПростановкиОтметокПМО.Прием КАК Прием
		|ПОМЕСТИТЬ ДанныеЗаказовНеобходимыхОбработать
		|ИЗ
		|	ТЗДляПростановкиОтметокПМО КАК ТЗДляПростановкиОтметокПМО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
		|		ПО ТЗДляПростановкиОтметокПМО.ЗаказВоВнешююЛабораторию = ЗаказВоВнешнююЛабораториюИсследования.Ссылка
		|			И ТЗДляПростановкиОтметокПМО.КодПробы = ЗаказВоВнешнююЛабораториюИсследования.КодПробы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаказовНеобходимыхОбработать.Прием КАК Прием,
		|	ПрохождениеМедосмотраДействияМедосмотра.Действие КАК Действие,
		|	ПрохождениеМедосмотраДействияМедосмотра.Ссылка КАК СсылкаПМО
		|ИЗ
		|	ДанныеЗаказовНеобходимыхОбработать КАК ДанныеЗаказовНеобходимыхОбработать
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ПрохождениеМедосмотраДействияМедосмотра
		|		ПО ДанныеЗаказовНеобходимыхОбработать.Ссылка.Клиент = ПрохождениеМедосмотраДействияМедосмотра.Ссылка.Клиент
		|			И ДанныеЗаказовНеобходимыхОбработать.Номенклатура = ПрохождениеМедосмотраДействияМедосмотра.Действие.Номенклатура
		|			И (ПрохождениеМедосмотраДействияМедосмотра.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПрохождениеМедосмотраДействияМедосмотра.Ссылка.Дата";
	
	Запрос.УстановитьПараметр("ТЗДляПростановкиОтметокПМО", ТЗДляПростановкиОтметокПМО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.ОтметкиВыполненияДействий.СоздатьМенеджерЗаписи();
		МЗ.Период = Выборка.Прием.Дата;
		МЗ.Выполнено = Истина;
		МЗ.АктивностьЗаписи = Истина;
		МЗ.Действие = Выборка.Действие;
		МЗ.ПрохождениеМедОсмотра = Выборка.СсылкаПМО;
		МЗ.ДокументРегистратор = Выборка.Прием;
		МЗ.Записать();
		УстановитьПриемуПервичныйПриемПМО(Выборка.Прием, Выборка.СсылкаПМО);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПриемуПервичныйПриемПМО(ПриемСсылка, ПМОСсылка)
	
	Попытка
		ПриемОбъект = ПриемСсылка.ПолучитьОбъект();
		ПриемОбъект.ПервичныйПрием = ПМОСсылка;
		ПриемОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрофессияОкончаниеВводаТекстаНаСервере(Текст, СтандартнаяОбработка, ДанныеВыбора) Экспорт
	
	Если ЗначениеЗаполнено(Текст) И СтрДлина(Текст) > 2 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СправочникКлассификаторыМинЗдрава.НаименованиеПолное КАК НаименованиеПолное
			|ИЗ
			|	Справочник.КлассификаторыМинЗдрава КАК СправочникКлассификаторыМинЗдрава
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			ВЫРАЗИТЬ(КлассификаторыМинЗдрава.НаименованиеПолное КАК СТРОКА(1024)) КАК НаименованиеПолное,
			|			МИНИМУМ(КлассификаторыМинЗдрава.УИДЕГИСЗ) КАК УИДЕГИСЗ
			|		ИЗ
			|			Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
			|		ГДЕ
			|			КлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих)
			|			И КлассификаторыМинЗдрава.НаименованиеПолное ПОДОБНО &НаименованиеПрофессии
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ВЫРАЗИТЬ(КлассификаторыМинЗдрава.НаименованиеПолное КАК СТРОКА(1024))) КАК УникальныеПрофессии
			|		ПО (СправочникКлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих))
			|			И (УникальныеПрофессии.УИДЕГИСЗ = СправочникКлассификаторыМинЗдрава.УИДЕГИСЗ)";
		
		Запрос.УстановитьПараметр("НаименованиеПрофессии", "%" + СтрСоединить(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Текст, " -.,():;'""/"), "%") + "%");
		
		мсПрофессии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НаименованиеПолное");
		сзПрофессии = Новый СписокЗначений;
		сзПрофессии.ЗагрузитьЗначения(мсПрофессии);
		
		Если сзПрофессии.Количество() >= 1 Тогда
			Если сзПрофессии.НайтиПоЗначению(Текст) = Неопределено Тогда
				сзПрофессии.Вставить(0, Текст, Текст);
			КонецЕсли;
			ДанныеВыбора = сзПрофессии;
		ИначеЕсли ДанныеВыбора <> Неопределено Тогда
			ДанныеВыбора.Очистить();
		ИначеЕсли ДанныеВыбора = Неопределено Тогда
			СтандартнаяОбработка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЕГИСЗ

// Возвращает нужный СЭМД для приказа медосмотров.
//
// Параметры:
//  Приказ					 - СправочникСсылка.ПриказыМедосмотров	 - приказ медосмотра.
//  ПрохождениеМедОсмотра	 - ДокументСсылка.ПрохождениеМедосмотра	 - документ медосмотра для получения подробностей.
//  ДополнительныеПараметры	 - Структура							 - дополнительные параметры.
// 
// Возвращаемое значение:
//  СправочникСсылка.РегистрируемыеЭлектронныеМедДокументы - СЭМД.
//
Функция ВидДокументаПоПриказу(Приказ, ПрохождениеМедОсмотра, ДополнительныеПараметры = Неопределено) Экспорт
	
	// В случае приказа 29н зависит от деталей медосмотра.
	Если Приказ = Справочники.ПриказыМедосмотров.Приказ29н Тогда
		Возврат ВидДокументаПоПриказу29н(ПрохождениеМедосмотра, ДополнительныеПараметры);
	КонецЕсли;
	
	// В иных случая прописывается прямо в справочнике приказов.
	Возврат Приказ.ВидДокумента;
	
КонецФункции

// Возвращает нужный СЭМД для медосмотра по приказу 29н (согласно требованиям РЭМД ЕГИСЗ).
//
// Параметры:
//  ПрохождениеМедосмотра	 - ДокументСсылка.ПрохождениеМедосмотра - медосмотр.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
// 
// Возвращаемое значение:
//  СправочникСсылка.РегистрируемыеЭлектронныеМедДокументы. 
//
Функция ВидДокументаПоПриказу29н(ПрохождениеМедосмотра, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если МедосмотрДляМедицинскихКнижек(ПрохождениеМедосмотра, ДополнительныеПараметры) Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.РегистрируемыеЭлектронныеМедДокументы(194);
	Иначе
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.РегистрируемыеЭлектронныеМедДокументы(103);
	КонецЕсли;
	
КонецФункции

Функция МедосмотрДляМедицинскихКнижек(ПрохождениеМедосмотра, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ПрохождениеМедосмотраСодержитФакторДляМедкнижки(ПрохождениеМедосмотра, ДополнительныеПараметры);
	
КонецФункции

Функция ПрохождениеМедосмотраСодержитФакторДляМедкнижки(ПрохождениеМедосмотра, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПунктыВредныхФакторовДляМедкнижки = ПунктыВредныхФакторовДляМедкнижки();
	
	Если ДополнительныеПараметры <> Неопределено
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ТаблицаФакторовИУсловийРабот")
	Тогда
		ТаблицаФакторовИУсловийРабот = ДополнительныеПараметры.ТаблицаФакторовИУсловийРабот;
	Иначе
		ТаблицаФакторовИУсловийРабот = ПрохождениеМедосмотра.ФакторыИУсловияРаботы;
	КонецЕсли;
	
	Для Каждого СтрокаФактора Из ТаблицаФакторовИУсловийРабот Цикл
		Если СтрокаФактора.Фактор.Приказ = ПредопределенноеЗначение("Справочник.ПриказыМедосмотров.Приказ29н")
			И ПунктыВредныхФакторовДляМедкнижки.Найти(СтрокаФактора.Фактор.НомерПП) <> Неопределено
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// По медосмотру формирует таблицу с приказами медосмотров и видами СЭДМ.
//
// Параметры:
//  ПрохождениеМедОсмотра	 - ДокументСсылка.ПрохождениеМедосмотра - медосмотр.
//  ДополнительныеПараметры	 - Структура - структура доп. параметров формирования.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ПриказыМедосмотра(), а также с колонкой ВидДокумента - СправочникСсылка.РегистрируемыеЭлектронныеМедДокументы.
//
Функция ПриказыМедосмотраСВидамиДокументов(ПрохождениеМедОсмотра, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПриказыВредныеФакторы = ПриказыМедосмотра(ПрохождениеМедОсмотра, ДополнительныеПараметры);
	
	ПриказыВредныеФакторы.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.РегистрируемыеЭлектронныеМедДокументы"));
	
	ПриказыДокумента = Новый Массив;
	ВидыСправок = Новый Массив;
	Для Каждого СтрокаФактора Из ПриказыВредныеФакторы Цикл
		Если ТипЗнч(СтрокаФактора.ПриказВредныйФактор) = Тип("СправочникСсылка.ПереченьВредныхФакторовИРабот") Тогда
			Приказ = СтрокаФактора.ПриказВредныйФактор.Приказ;
		Иначе
			Приказ = СтрокаФактора.ПриказВредныйФактор;
		КонецЕсли;
		
		Если МедосмотрыСервер.ЭтоПриказСправки(Приказ) Тогда
			СтрокаФактора.ВидДокумента = СтрокаФактора.ПриказВредныйФактор.ШаблонОсмотраСправки.ВидДокумента;
		Иначе
			
			СтрокаЭМД = ПрохождениеМедОсмотра.ЭМД.Найти(Приказ, "ПриказВредныйФактор");
			Если СтрокаЭМД <> Неопределено Тогда
				// В приоритете вид уже сформированного ЭМД
				СтрокаФактора.ВидДокумента = СтрокаЭМД.ВидДокументаЭМД;
			Иначе
				СтрокаФактора.ВидДокумента = ВидДокументаПоПриказу(Приказ, ПрохождениеМедОсмотра, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПриказыВредныеФакторы;
	
КонецФункции

// По медосмотру формирует таблицу с приказами медосмотров и видами СЭДМ.
//
// Параметры:
//  ПрохождениеМедОсмотра	 - ДокументСсылка.ПрохождениеМедосмотра - медосмотр.
//  ДополнительныеПараметры	 - Структура - структура доп. параметров формирования.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками ПриказВредныйФактор и Ссылка (на документ медосмотра.
//
Функция ПриказыМедосмотра(ПрохождениеМедОсмотра, ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокТиповПриказВредныйФактор = Новый Массив;
	СписокТиповПриказВредныйФактор.Добавить(Тип("СправочникСсылка.ПереченьВредныхФакторовИРабот"));
	СписокТиповПриказВредныйФактор.Добавить(Тип("СправочникСсылка.ПриказыМедосмотров"));
	
	ПриказыВредныеФакторы = Новый ТаблицаЗначений;
	ПриказыВредныеФакторы.Колонки.Добавить("ПриказВредныйФактор", Новый ОписаниеТипов(СписокТиповПриказВредныйФактор));
	ПриказыВредныеФакторы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПрохождениеМедосмотра"));
	
	Если ЗначениеЗаполнено(ПрохождениеМедОсмотра.Номенклатура.ВредныйФакторСправки) Тогда
		НоваяСтрокаТаблицы = ПриказыВредныеФакторы.Добавить();
		НоваяСтрокаТаблицы.ПриказВредныйФактор = ПрохождениеМедОсмотра.Номенклатура.ВредныйФакторСправки;
		НоваяСтрокаТаблицы.Ссылка = ПрохождениеМедОсмотра;
	Иначе
		
		Если ДополнительныеПараметры <> Неопределено
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ТаблицаФакторовИУсловийРабот")
		Тогда
			ТаблицаФакторовИУсловийРабот = ДополнительныеПараметры.ТаблицаФакторовИУсловийРабот;
		Иначе
			ТаблицаФакторовИУсловийРабот = ПрохождениеМедосмотра.ФакторыИУсловияРаботы;
		КонецЕсли;
		
		Для Каждого СтрокаФактора Из ТаблицаФакторовИУсловийРабот Цикл
			НоваяСтрокаТаблицы = ПриказыВредныеФакторы.Добавить();
			НоваяСтрокаТаблицы.Ссылка = ПрохождениеМедОсмотра;
			Если МедосмотрыСервер.ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
				НоваяСтрокаТаблицы.ПриказВредныйФактор = СтрокаФактора.Фактор;
			Иначе
				НоваяСтрокаТаблицы.ПриказВредныйФактор = СтрокаФактора.Фактор.Приказ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПриказыВредныеФакторы.Свернуть("ПриказВредныйФактор, Ссылка");
	
	Возврат ПриказыВредныеФакторы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Справки

// Собирает данные по медосмотрам для отработки при записи
//  логической связи документов ОказаниеУсуг и ПрохождениеМедосмотров в части справок и прочик медосмотров.
//
// Параметры:
//  Объект			 - ДанныеФормыКоллекция, ДокументОбъект.ОказаниеУслуг	 - записываемый документ.
//  ПараметрыЗаписи	 - Структура											 - Параметры записи документа.
// 
// Возвращаемое значение:
//  Структура - Состав полей меняется в зависимост от параметра ВызовСКлиента.
//
Функция ОказаниеУслугСправкиПриЗаписиСборДанных(Объект, ПараметрыЗаписи)
	
	ДанныеПоМедосмотрам = Новый Структура(	"ДокументыМедосмотраАктуальные,
											|ДокументыМедосмотраНаУдаление,
											|ДокументыМедосмотраНаУдалениеСВыполнением,
											|МедосмотрыНаДобавление");
	
	Результат = Новый Структура("ДанныеПоМедосмотрам, ЕстьУдалениеВыполняемых, ДокументыМедосмотраНаУдалениеСВыполнением", ДанныеПоМедосмотрам, Ложь); 
	
	ДокументыМедосмотраАктуальные = Новый Массив;	// Документы ПМО.
	ДокументыМедосмотраНаУдаление = Новый Массив;	// Документы ПМО.
	ДокументыМедосмотраНаУдалениеСВыполнением = Новый Массив;	// Документы ПМО.
	МедосмотрыНаДобавление = Новый Массив;	// Номенклатура.
	
	ПроданныеМедосмотры = ПолучитьНоменклатуруСправокДокументаПродажи(Объект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		МедосмотрыПоПродаже = ПолучитьМедосмотрыДокументаПродажи(Объект.Ссылка);
	Иначе
		МедосмотрыПоПродаже = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если МедосмотрыПоПродаже.Количество() <> 0 Тогда
		
		Для Каждого МедосмотрПоПродаже Из МедосмотрыПоПродаже Цикл
			Если ПроданныеМедосмотры.Найти(МедосмотрПоПродаже.Номенклатура) = Неопределено Тогда
				Если Не МедосмотрПоПродаже.ПометкаУдаления Тогда
					ДокументыМедосмотраНаУдаление.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(МедосмотрПоПродаже));
				КонецЕсли;
			Иначе
				ДокументыМедосмотраАктуальные.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(МедосмотрПоПродаже));
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументыМедосмотраНаУдаление.Количество() <> 0 Тогда
			ДокументыМассив = Новый Массив;
			Для Каждого МедосмотрПоПродаже Из ДокументыМедосмотраНаУдаление Цикл
				ДокументыМассив.Добавить(МедосмотрПоПродаже.Ссылка);
			КонецЦикла;
			
			ДокументыМедосмотраНаУдалениеСВыполнением = ПолучитьВыполнениеДокументовМедосмотра(ДокументыМассив);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если это проведение/перепроведение документа, то определяем, по какой номенклатуре добавить документ ПМО.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого ПроданныйМедосмотр Из ПроданныеМедосмотры Цикл
			Если МедосмотрыПоПродаже.Найти(ПроданныйМедосмотр, "Номенклатура") = Неопределено Тогда
				МедосмотрыНаДобавление.Добавить(ПроданныйМедосмотр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат.ДанныеПоМедосмотрам.Вставить("ДокументыМедосмотраАктуальные", ДокументыМедосмотраАктуальные);
	Результат.ДанныеПоМедосмотрам.Вставить("ДокументыМедосмотраНаУдаление", ДокументыМедосмотраНаУдаление);
	Результат.ДанныеПоМедосмотрам.Вставить("ДокументыМедосмотраНаУдалениеСВыполнением", ДокументыМедосмотраНаУдалениеСВыполнением);
	Результат.ДанныеПоМедосмотрам.Вставить("МедосмотрыНаДобавление", МедосмотрыНаДобавление);
	
	Результат.ЕстьУдалениеВыполняемых = ДокументыМедосмотраНаУдалениеСВыполнением.Количество() <> 0;
	
	Возврат Результат;
	
КонецФункции

Процедура ОказаниеУслугПриЗаписиЗавершение(Объект, ПараметрыЗаписи, Знач ДанныеПоМедосмотрам)
	
	ЭтоПометкаНаУдаление		= ПараметрыЗаписи.УстановкаПометкиУдаления;
	ЭтоСнятиеПометкиНаУдаление	= ПараметрыЗаписи.СнятиеПометкиУдаления;
	ЭтоПроведение				= ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение; // Добавлять новые.
	ЭтоОтменаПроведения			= ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	
	УдалятьНеактуальные = ЭтоПроведение Или ЭтоОтменаПроведения;
	
	Если Объект.ПометкаУдаления И Не ЭтоПометкаНаУдаление Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПоМедосмотрам) = Тип("Строка") Тогда
		АдресДанныеПоМедосмотрам = ДанныеПоМедосмотрам;
		ДанныеПоМедосмотрам = ПолучитьИзВременногоХранилища(АдресДанныеПоМедосмотрам);
		УдалитьИзВременногоХранилища(АдресДанныеПоМедосмотрам);
	КонецЕсли;
	
	// Отработка установки/снятия пометки удаления на документ продажи
	Если ЭтоПометкаНаУдаление Или ЭтоСнятиеПометкиНаУдаление Тогда
		ПометкаУдаления = ЭтоПометкаНаУдаление;
		
		МассивыДанныхДокументов = Новый Массив;
		МассивыДанныхДокументов.Добавить(ДанныеПоМедосмотрам.ДокументыМедосмотраАктуальные);
		МассивыДанныхДокументов.Добавить(ДанныеПоМедосмотрам.ДокументыМедосмотраНаУдаление);
		
		Для Каждого МассивДанныхДокументов Из МассивыДанныхДокументов Цикл
			Для Каждого ДанныеДокумента Из МассивДанныхДокументов Цикл
				Если ДанныеДокумента.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
					ДокументОбъект = ДанныеДокумента.Ссылка.ПолучитьОбъект();
					ДокументОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
					
					ЗаполнитьЗначенияСвойств(ДанныеДокумента, ДокументОбъект, "ПометкаУдаления, Проведен");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Создание новых документов медосмотра
	Если ЭтоПроведение Тогда
		
		Для Каждого Номенклатура Из ДанныеПоМедосмотрам.МедосмотрыНаДобавление Цикл
			СоздатьМедосмотрНаОснованииПродажи(Объект, Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
	// Удаление документов медосмотра, номенклатуры медосмотра которых больше нет в документе продажи
	Если УдалятьНеактуальные Тогда
		
		Для Каждого ДанныеДокумента Из ДанныеПоМедосмотрам.ДокументыМедосмотраНаУдаление Цикл
			ДокументОбъект = ДанныеДокумента.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			Если ДанныеДокумента.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Актуализация состояния актуальных документов медосмотров
	Для Каждого ДанныеДокумента Из ДанныеПоМедосмотрам.ДокументыМедосмотраАктуальные Цикл
		ПометкаУдаления = Неопределено;
		РежимЗаписи = Неопределено;
		
		Если ДанныеДокумента.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
			ПометкаУдаления = Объект.ПометкаУдаления;
		КонецЕсли;
		
		Если ЭтоПроведение И Не ДанныеДокумента.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ИначеЕсли ЭтоОтменаПроведения И ДанныеДокумента.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		Если ПометкаУдаления <> Неопределено
			Или РежимЗаписи <> Неопределено
		Тогда
			ДокументОбъект = ДанныеДокумента.Ссылка.ПолучитьОбъект();
			Если ПометкаУдаления <> Неопределено Тогда
				ДокументОбъект.ПометкаУдаления = ПометкаУдаления;
			КонецЕсли;
			
			Если РежимЗаписи <> Неопределено Тогда
				ДокументОбъект.Записать(РежимЗаписи);
			Иначе
				ДокументОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Информирование о распроведении проведенны документов медосмотра
	Для Каждого ДанныеДокумента Из ДанныеПоМедосмотрам.ДокументыМедосмотраНаУдалениеСВыполнением Цикл
		
	КонецЦикла;
	
КонецПроцедуры

// Получает номенклатуру и дополнительные поля услуг медосмотров у документа продажи.
//
// Параметры:
//  ДокументПродажи	 - ДокументСсылка.ОказаниеУслуг - документ продажи.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьМедосмотрыДокументаПродажи(ДокументПродажи)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрохождениеМедосмотра.Ссылка КАК Ссылка,
	|	ПрохождениеМедосмотра.Номенклатура КАК Номенклатура,
	|	ПрохождениеМедосмотра.Клиент КАК Клиент,
	|	ПрохождениеМедосмотра.ПометкаУдаления КАК ПометкаУдаления,
	|	ПрохождениеМедосмотра.Проведен КАК Проведен
	|ИЗ
	|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
	|ГДЕ
	|	ПрохождениеМедосмотра.ДокументПродажи = &ДокументПродажи"
	;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьНоменклатуруСправокДокументаПродажи(ДокументПродажи)
	
	Запрос = Новый Запрос;
	ТаблицаСправокСРедактированием = ПолучитьДанныеИзРегистраДействийМедосмотра(ДокументПродажи.Ссылка);
	Запрос.УстановитьПараметр("Номенклатура", ДокументПродажи.Работы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТаблицаСправокСРедактированием", ТаблицаСправокСРедактированием);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСправокСРедактированием.НоменклатураСправки КАК НоменклатураСправки
	|ПОМЕСТИТЬ ВТ_ТаблицаСправокСРедактированием
	|ИЗ
	|	&ТаблицаСправокСРедактированием КАК ТаблицаСправокСРедактированием
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|	И Номенклатура.МедосмотрСправка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаСправокСРедактированием.НоменклатураСправки
	|ИЗ
	|	ВТ_ТаблицаСправокСРедактированием КАК ВТ_ТаблицаСправокСРедактированием"
	;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьДанныеИзРегистраДействийМедосмотра(СсылкаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияМедОсмотровДляСправок.НоменклатураСправки КАК НоменклатураСправки
		|ИЗ
		|	РегистрСведений.ДействияМедОсмотровДляСправок КАК ДействияМедОсмотровДляСправок
		|ГДЕ
		|	ДействияМедОсмотровДляСправок.ОказаниеУслуг = &ОказаниеУслуг";
	
	Запрос.УстановитьПараметр("ОказаниеУслуг", СсылкаДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьВыполнениеДокументовМедосмотра(ДокументыМедосмотра)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыМедосмотра", ДокументыМедосмотра);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтметкиВыполненияДействий.ПрохождениеМедОсмотра КАК ПрохождениеМедОсмотра
	|ИЗ
	|	РегистрСведений.ОтметкиВыполненияДействий КАК ОтметкиВыполненияДействий
	|ГДЕ
	|	ОтметкиВыполненияДействий.ПрохождениеМедОсмотра В(&ДокументыМедосмотра)
	|	И ОтметкиВыполненияДействий.Выполнено"
	;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПрохождениеМедОсмотра");
	
КонецФункции

Процедура СоздатьМедосмотрНаОснованииПродажи(ДокументПродажи, Номенклатура)
	
	НовыйДокумент = Документы.ПрохождениеМедосмотра.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата();
	
	НовыйДокумент.ВидПрохожденияМО	= Перечисления.ВидыМедосмотров.СправкаПрочий;
	НовыйДокумент.ДокументПродажи	= ДокументПродажи.Ссылка;
	НовыйДокумент.Номенклатура		= Номенклатура;
	НовыйДокумент.Клиент			= ДокументПродажи.Клиент;
	
	НоваяСтрокаПриказы = НовыйДокумент.ИдентификаторыПриказов.Добавить();
	НоваяСтрокаПриказы.ПриказВредныйФактор = Номенклатура.ВредныйФакторСправки;
	НоваяСтрокаПриказы.УИД = Новый УникальныйИдентификатор;
	
	Документы.ПрохождениеМедосмотра.ПерезаполнитьДействияПрохожденияМедосмотраСправки(НовыйДокумент);
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

#КонецОбласти

Процедура ВТ_ЗагрузитьСписокКлиентовИВредныхФакторовИВеществ(МенеджерВТ, СписокКлиентов, ВредныеФакторы, ВидМедосмотра, ТаблицаПриказовКлиентов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ДополнитьОбязательныеДействияКлиентов(ВредныеФакторы, СписокКлиентов, ВидМедосмотра, ТаблицаПриказовКлиентов);
	Запрос.УстановитьПараметр("ВредныеФакторы", ВредныеФакторы);
	Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
	Запрос.УстановитьПараметр("ВидМедосмотра", ВидМедосмотра);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВредныеФакторы.ВредныйФактор КАК ВредныйФактор,
		|	ВредныеФакторы.Клиент КАК Клиент,
		|	ВредныеФакторы.ТипМедосмотра КАК ТипМедосмотра
		|ПОМЕСТИТЬ ВредныеФакторыИзТаблицы
		|ИЗ
		|	&ВредныеФакторы КАК ВредныеФакторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВредныеФакторыИзТаблицы.ВредныйФактор КАК ВредныйФактор,
		|	ВредныеФакторыИзТаблицы.Клиент КАК Клиент,
		|	ВредныеФакторыИзТаблицы.ТипМедосмотра КАК ТипМедосмотра
		|ПОМЕСТИТЬ ВредныеФакторы
		|ИЗ
		|	ВредныеФакторыИзТаблицы КАК ВредныеФакторыИзТаблицы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыМедосмотров.Приказы КАК ВидыМедосмотровПриказы
		|		ПО (((ВредныеФакторыИзТаблицы.ВредныйФактор.Приказ = ВидыМедосмотровПриказы.Приказ 
		|				ИЛИ ВредныеФакторыИзТаблицы.ВредныйФактор = ВидыМедосмотровПриказы.Приказ) 
		|			И (ВидыМедосмотровПриказы.Ссылка = &ВидМедосмотра)) ИЛИ &ВидМедосмотра = НЕОПРЕДЕЛЕНО) 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокКлиентов.Клиент КАК Клиент,
		|	СписокКлиентов.Пол КАК Пол,
		|	СписокКлиентов.Возраст КАК Возраст
		|ПОМЕСТИТЬ СписокКлиентов
		|ИЗ
		|	&СписокКлиентов КАК СписокКлиентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВредныеФакторы.Клиент КАК Клиент,
		|	ГруппыВредныхВеществ.ГруппаВредныхВеществ КАК ГруппаВредныхВеществ
		|ПОМЕСТИТЬ ВредныеВеществаРаботников
		|ИЗ
		|	ВредныеФакторы КАК ВредныеФакторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот.ГруппыВредныхВеществ КАК ГруппыВредныхВеществ
		|		ПО ВредныеФакторы.ВредныйФактор = ГруппыВредныхВеществ.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ВТ_ДействияМедосмотровКлиентов(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРаботВрачи.Врач КАК Действие,
		|	ПереченьВредныхФакторовИРаботВрачи.Врач.Порядок КАК ВрачПорядок,
		|	1 КАК ИсследованиеВид,
		|	ВредныеФакторы.Клиент КАК Клиент,
		|	ПереченьВредныхФакторовИРаботВрачи.Ограничение КАК ОграничениеДействия
		|ПОМЕСТИТЬ БезУдаленияЗаменямыхИОграниченияДействия
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.Врачи КАК ПереченьВредныхФакторовИРаботВрачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВредныеФакторы КАК ВредныеФакторы
		|		ПО ПереченьВредныхФакторовИРаботВрачи.Ссылка = ВредныеФакторы.ВредныйФактор
		|ГДЕ
		|	НЕ ПереченьВредныхФакторовИРаботВрачи.ПоРекомендации
		|	И (ПереченьВредныхФакторовИРаботВрачи.ТипМедосмотра = ЗНАЧЕНИЕ(Перечисление.ТипыМедосмотров.ПустаяСсылка)
		|			ИЛИ ПереченьВредныхФакторовИРаботВрачи.ТипМедосмотра = ВредныеФакторы.ТипМедосмотра)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПереченьВредныхФакторовИРаботВрачи.Врач,
		|	ПереченьВредныхФакторовИРаботВрачи.Врач.Порядок,
		|	ВредныеФакторы.Клиент,
		|	ПереченьВредныхФакторовИРаботВрачи.Ограничение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование,
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.Порядок,
		|	2,
		|	ВредныеФакторы.Клиент,
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ограничение
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.ЛабораторныеИФункциональныеИсследования КАК ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВредныеФакторы КАК ВредныеФакторы
		|		ПО ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ссылка = ВредныеФакторы.ВредныйФактор
		|ГДЕ
		|	НЕ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.ПоРекомендации
		|	И (ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.ТипМедосмотра = ЗНАЧЕНИЕ(Перечисление.ТипыМедосмотров.ПустаяСсылка)
		|			ИЛИ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.ТипМедосмотра = ВредныеФакторы.ТипМедосмотра)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование,
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.Порядок,
		|	ВредныеФакторы.Клиент,
		|	ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ограничение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДействияМедосмотровОпасныхВеществ.ДействиеМедосмотра,
		|	ДействияМедосмотровОпасныхВеществ.ДействиеМедосмотра.Порядок,
		|	ВЫБОР
		|		КОГДА ДействияМедосмотровОпасныхВеществ.ДействиеМедосмотра.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДействийМедицинскогоОсмотра.Врач)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	ВредныеВеществаРаботников.Клиент,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	РегистрСведений.ДействияМедосмотровОпасныхВеществ КАК ДействияМедосмотровОпасныхВеществ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВредныеВеществаРаботников КАК ВредныеВеществаРаботников
		|		ПО (ВредныеВеществаРаботников.ГруппаВредныхВеществ = ДействияМедосмотровОпасныхВеществ.ГруппаОпасныхВеществ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВредныеФакторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВредныеВеществаРаботников";
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ВТ_ВыполнитьУдалениеПоОграничениям(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалениеПоОграничениям.Действие КАК Действие,
		|	УдалениеПоОграничениям.ВрачПорядок КАК ВрачПорядок,
		|	УдалениеПоОграничениям.ИсследованиеВид КАК ИсследованиеВид,
		|	УдалениеПоОграничениям.Клиент КАК Клиент
		|ПОМЕСТИТЬ БезУдаленияЗаменямых
		|ИЗ
		|	БезУдаленияЗаменямыхИОграниченияДействия КАК УдалениеПоОграничениям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокКлиентов КАК СписокКлиентов
		|		ПО УдалениеПоОграничениям.Клиент = СписокКлиентов.Клиент
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УдалениеПоОграничениям.ОграничениеДействия = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|					ИЛИ УдалениеПоОграничениям.ОграничениеДействия = НЕОПРЕДЕЛЕНО
		|				ТОГДА ВЫБОР
		|						КОГДА УдалениеПоОграничениям.Действие.ОграничениеДействия = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ (УдалениеПоОграничениям.Действие.ОграничениеДействия.Пол = СписокКлиентов.Пол
		|								ИЛИ УдалениеПоОграничениям.Действие.ОграничениеДействия.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка))
		|								И ВЫБОР
		|									КОГДА УдалениеПоОграничениям.Действие.ОграничениеДействия.Возраст = 0
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ВЫБОР
		|											КОГДА НЕ УдалениеПоОграничениям.Действие.ОграничениеДействия.ВозрастОценкаДостижения
		|												ТОГДА УдалениеПоОграничениям.Действие.ОграничениеДействия.Возраст <= СписокКлиентов.Возраст
		|											ИНАЧЕ УдалениеПоОграничениям.Действие.ОграничениеДействия.Возраст > СписокКлиентов.Возраст
		|										КОНЕЦ
		|								КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ (УдалениеПоОграничениям.ОграничениеДействия.Пол = СписокКлиентов.Пол
		|					ИЛИ УдалениеПоОграничениям.ОграничениеДействия.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.ПустаяСсылка))
		|					И ВЫБОР
		|						КОГДА УдалениеПоОграничениям.ОграничениеДействия.Возраст = 0
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НЕ УдалениеПоОграничениям.ОграничениеДействия.ВозрастОценкаДостижения
		|									ТОГДА УдалениеПоОграничениям.ОграничениеДействия.Возраст <= СписокКлиентов.Возраст
		|								ИНАЧЕ УдалениеПоОграничениям.ОграничениеДействия.Возраст > СписокКлиентов.Возраст
		|							КОНЕЦ
		|					КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ БезУдаленияЗаменямыхИОграниченияДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СписокКлиентов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ВТ_ПолучитьЗаменяемыеПозиции(МенеджерВТ)
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаменяемостьДействийМедосмотра.ЗаменяемоеДействие КАК ЗаменяемоеДействие,
		|	БезУдаленияЗаменямых.Клиент КАК Клиент
		|ПОМЕСТИТЬ УдаляемыеПозиции
		|ИЗ
		|	РегистрСведений.ЗаменяемостьДействийМедосмотра КАК ЗаменяемостьДействийМедосмотра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БезУдаленияЗаменямых КАК БезУдаленияЗаменямых
		|		ПО ЗаменяемостьДействийМедосмотра.ЗаменяющееДействие = БезУдаленияЗаменямых.Действие";
	
	РезультатЗапроса = Запрос.Выполнить();
		
КонецПроцедуры

Функция ПолучитьРезультатЗапросаСпискаУслугКлиентов(МенеджерВТ, ДатаСметы, Прейскурант)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДатаСметы", ДатаСметы);
	Запрос.УстановитьПараметр("Прейскурант", Прейскурант);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БезУдаленияЗаменямых.Действие КАК Действие,
		|	БезУдаленияЗаменямых.ВрачПорядок КАК ВрачПорядок,
		|	БезУдаленияЗаменямых.ИсследованиеВид КАК ИсследованиеВид,
		|	БезУдаленияЗаменямых.Клиент КАК Клиент,
		|	БезУдаленияЗаменямых.Действие.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ИЗ
		|	БезУдаленияЗаменямых КАК БезУдаленияЗаменямых
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ДатаСметы,
		|				Прейскурант = &Прейскурант
		|					И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|					И ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО БезУдаленияЗаменямых.Действие.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	НЕ (БезУдаленияЗаменямых.Действие, БезУдаленияЗаменямых.Клиент) В
		|				(ВЫБРАТЬ
		|					УдаляемыеПозиции.ЗаменяемоеДействие,
		|					УдаляемыеПозиции.Клиент
		|				ИЗ
		|					УдаляемыеПозиции КАК УдаляемыеПозиции)
		|	И НЕ БезУдаленияЗаменямых.Действие В
		|				(ВЫБРАТЬ
		|					РегистрСведений.ИсключаемыедействияМедосмотра.ДействиеМедосмотра
		|				ИЗ
		|					РегистрСведений.ИсключаемыедействияМедосмотра)
		|
		|СГРУППИРОВАТЬ ПО
		|	БезУдаленияЗаменямых.Действие,
		|	БезУдаленияЗаменямых.ВрачПорядок,
		|	БезУдаленияЗаменямых.ИсследованиеВид,
		|	БезУдаленияЗаменямых.Клиент,
		|	БезУдаленияЗаменямых.Действие.Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Клиент,
		|	ИсследованиеВид,
		|	ВрачПорядок УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДополнитьОбязательныеДействияКлиентов(ВФКлиентов, СписокКлиентов, ВидМедосмотра, ТаблицаПриказовКлиентов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВФКлиентов.Клиент КАК Клиент,
		|	ВФКлиентов.ВредныйФактор КАК ВредныйФактор,
		|	ВФКлиентов.ТипМедосмотра КАК ТипМедосмотра,
		|	ВФКлиентов.Пол КАК Пол,
		|	ВФКлиентов.Возраст КАК Возраст
		|ПОМЕСТИТЬ ВФКлиентов
		|ИЗ
		|	&ВФКлиентов КАК ВФКлиентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокКлиентов.Клиент КАК Клиент,
		|	СписокКлиентов.ТипМедосмотра КАК ТипМедосмотра,
		|	СписокКлиентов.Пол КАК Пол,
		|	СписокКлиентов.Возраст КАК Возраст
		|ПОМЕСТИТЬ СписокКлиентов
		|ИЗ
		|	&СписокКлиентов КАК СписокКлиентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокКлиентов.Клиент КАК Клиент,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Приказы.Приказ) = ТИП(Справочник.ПереченьВредныхФакторовИРабот)
		|			ТОГДА Приказы.Приказ
		|		ИНАЧЕ Приказы.Приказ.ФакторСОбязДействиями
		|	КОНЕЦ КАК ВредныйФактор,
		|	СписокКлиентов.ТипМедосмотра КАК ТипМедосмотра,
		|	СписокКлиентов.Пол КАК Пол,
		|	СписокКлиентов.Возраст КАК Возраст,
		|	Приказы.Приказ КАК Приказ
		|ПОМЕСТИТЬ ВТ_ВредныеФакторыПоПриказам
		|ИЗ
		|	СписокКлиентов КАК СписокКлиентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВФКлиентов КАК ВФКлиентов
		|		ПО СписокКлиентов.Клиент = ВФКлиентов.Клиент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыМедосмотров.Приказы КАК Приказы
		|		ПО (Приказы.Ссылка = &ВидМедосмотра)
		|			И (Приказы.Приказ.ФакторСОбязДействиями <> ЗНАЧЕНИЕ(Справочник.ПереченьВредныхФакторовИРабот.ПустаяСсылка)
		|				ИЛИ ТИПЗНАЧЕНИЯ(Приказы.Приказ) = ТИП(Справочник.ПереченьВредныхФакторовИРабот))
		|ГДЕ
		|	(Приказы.НеИспользоватьБезВФ = ЛОЖЬ
		|			ИЛИ ВФКлиентов.ВредныйФактор.Приказ = Приказы.Приказ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ВредныеФакторыПоПриказам.Клиент КАК Клиент,
		|	ВТ_ВредныеФакторыПоПриказам.ВредныйФактор КАК ВредныйФактор,
		|	ВТ_ВредныеФакторыПоПриказам.ТипМедосмотра КАК ТипМедосмотра,
		|	ВТ_ВредныеФакторыПоПриказам.Пол КАК Пол,
		|	ВТ_ВредныеФакторыПоПриказам.Возраст КАК Возраст
		|ИЗ
		|	ВТ_ВредныеФакторыПоПриказам КАК ВТ_ВредныеФакторыПоПриказам";
	
	
	Запрос.УстановитьПараметр("ВФКлиентов", ВФКлиентов);
	Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
	Запрос.УстановитьПараметр("ВидМедосмотра", ВидМедосмотра);
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаПриказовКлиентов = МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ВредныеФакторыПоПриказам").ПолучитьДанные().Выгрузить();
	ТаблицаПриказовКлиентов.Колонки.Удалить(ТаблицаПриказовКлиентов.Колонки.Найти("ВредныйФактор"));
	ТаблицаПриказовКлиентов.Колонки.Удалить(ТаблицаПриказовКлиентов.Колонки.Найти("ТипМедосмотра"));
	ТаблицаПриказовКлиентов.Колонки.Удалить(ТаблицаПриказовКлиентов.Колонки.Найти("Пол"));
	ТаблицаПриказовКлиентов.Колонки.Удалить(ТаблицаПриказовКлиентов.Колонки.Найти("Возраст"));
	ТаблицаПриказовКлиентов.Свернуть("Клиент, Приказ");
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВФКлиентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
		
КонецФункции

#КонецОбласти