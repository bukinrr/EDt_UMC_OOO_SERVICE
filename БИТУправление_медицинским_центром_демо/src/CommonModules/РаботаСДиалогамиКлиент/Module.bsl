#Область ПрограммныйИнтерфейс

// Обработчик нажатия стандартной кнопкки филиала в документах
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения - форма 
//  Кнопка				 - Кнопка - Кнопка
//  ОповещениеОВыборе	 - ОписаниеОповещения - оповещение о выборе, если в форме есть своя постобработка.
//
Процедура ДиалогКнопкаФилиалПриНажатии(ЭтаФорма, Кнопка = Неопределено, ОповещениеОВыборе = Неопределено) Экспорт 
	
	Если Кнопка = Неопределено Тогда
		Кнопка = ЭтаФорма.Элементы.Найти("КнопкаФилиал");
	КонецЕсли;
	
	ИсходныйФилиал = ЭтаФорма.Объект.Филиал;
	Оповещение = Новый ОписаниеОповещения("ДиалогКнопкаФилиалПриНажатииПослеВыбора", ЭтотОбъект, 
				 Новый Структура("Форма, ИсходныйФилиал, Кнопка, ОповещениеОВыборе", ЭтаФорма, ИсходныйФилиал, Кнопка, ОповещениеОВыборе));
	
	
	ФормаВыбора = ОткрытьФорму("Справочник.Филиалы.ФормаВыбора", 
				  Новый Структура("ТекущаяСтрока", ЭтаФорма.Объект.Филиал),,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик оповещения выбора филиала после нажатия стандартной кнопкки филиала в документах.
//
// Параметры:
//  Результат				 - СправочникиСсылка.Филиалы - филиал. 
//  ДополнительныеПараметры	 - Структура - контекст выбора. 
//
Процедура ДиалогКнопкаФилиалПриНажатииПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Филиал = Результат;
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		
		ИсходныйФилиал = ДополнительныеПараметры.ИсходныйФилиал;
		Кнопка = ДополнительныеПараметры.Кнопка;
		ЭтаФорма = ДополнительныеПараметры.Форма;
		
		ЭтаФорма.Объект.Филиал = Филиал;
		Кнопка.Заголовок = ПроцедурыСпециализацииПоставки.СформироватьЗаголовокКнопкиФилиала(Филиал);
		ЭтаФорма.Модифицированность = Истина;
		
		Если Филиал <> ИсходныйФилиал Тогда
			РаботаСФормамиКлиент.ПриИзмененииФилиалаДокументСПодборомНоменклатуры(ЭтаФорма);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеОВыборе <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("ИсходныйФилиал", ИсходныйФилиал);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вывод движений документа
//
// Параметры:
//  ДокументСсылка			 - ДокументСсылка - документ
//  КомандаВыводаДвижений	 - Команда - команда вывода движений для определения интересуемого регистра.
//
Процедура ВывестиДвиженияДокумента(ДокументСсылка, КомандаВыводаДвижений) Экспорт
	
	Перем ТипРегистра;
	
	Если Найти(КомандаВыводаДвижений.Имя,"РегистрСведений") = 1 Тогда
		ТипРегистра = "РегистрСведений";
	ИначеЕсли Найти(КомандаВыводаДвижений.Имя,"РегистрНакопления")	= 1 Тогда
		ТипРегистра = "РегистрНакопления";
	ИначеЕсли Найти(КомандаВыводаДвижений.Имя,"РегистрБухгалтерии") = 1 Тогда
		ТипРегистра = "РегистрБухгалтерии";
	ИначеЕсли Найти(КомандаВыводаДвижений.Имя,"РегистрРасчета")		= 1 Тогда
		ТипРегистра = "РегистрРасчета";
	КонецЕсли;
	
	ИмяРегистра = Прав(КомандаВыводаДвижений.Имя, СтрДлина(КомандаВыводаДвижений.Имя) - СтрДлина(ТипРегистра) - 1);
	
	ПолноеИмяРегистра = ТипРегистра + "." + ИмяРегистра;
	
	Если ДопСерверныеФункцииПовтИсп.ЕстьПравоДоступа("Просмотр", ПолноеИмяРегистра) Тогда
		мПараметры = Новый Структура;
		мПараметры.Вставить("Отбор", Новый Структура("Регистратор", ДокументСсылка));
		ОткрытьФорму(ПолноеИмяРегистра + ".ФормаСписка",мПараметры,, ДокументСсылка).Открыть();
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Недостаточно прав для просмотра'"));
	КонецЕсли;
	
КонецПроцедуры

// Представление периода регистрации, например, месяца графика.
//
// Параметры:
//  ПериодРегистрации	 - Дата - дата, определяющая период.
// 
// Возвращаемое значение:
//  Строка - приведенный к нужному формату период.
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

// Обработка начала выбора периода из списка представлений периодов
//
// Параметры:
//  Элемент				 - ПолеФормы - элемент на форме.
//  СтандартнаяОбработка - Булево	 - стандартная обработка
//  ПериодРегистрации	 - Дата		 - дата, определяющая период регистрации
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма
//  НачальноеЗначение	 - Дата							 - начальное значение.
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для Счетчик = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Попытка
		ЭтаФорма.МесяцСтрока = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Обработчик регулирования представления периода регистрации в поле формы.
//
// Параметры:
//  Направление						 - Число - направление (1 или -1)
//  СтандартнаяОбработка			 - Булево - стандартная обработка 
//  ПериодРегистрации	 - Дата		 - дата, определяющая период регистрации
//  ПредставлениеПериодаРегистрации	 - Строка - представление периода
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Изменяет текущую страницу формы документа, если при открытии формы.
// Первая страница содержит пустую табличную часть, но на форме есть еще страницы с непустой табличной частью.
//
// Параметры:
//	Объект				- документ, форма которого открывается;
//	Панель				- панель формы документа, страницы которой следует переключить;
//	СтраницыСТабчастями	- список значений, каждый элемент которого представляет
//							собой имя страницы, а его представление - имя табличной части;
//	СтраницаПоУмолчанию	- имя страницы, которую следует сделать текущей, если ни на одной
//							из перечисленных страниц нет заполненной табличной части.
//									
&НаКлиенте
Процедура УстановкаТекущейСтраницы(ЭтоНовый, Объект, Панель, СтраницыСТабЧастями, СтраницаПоУмолчанию = Неопределено) Экспорт
	
	ТекущаяСтраницаНеУстановлена = Истина;
	
	Для Каждого ЭлементСписка Из СтраницыСТабЧастями Цикл
		ИмяСтраницы = ЭлементСписка.Значение;
		ИмяТаблЧасти = ЭлементСписка.Представление;
		Страница = Панель.ПодчиненныеЭлементы[ИмяСтраницы];
		
		Если Страница.Видимость Тогда
			Если Объект[ИмяТаблЧасти].Количество() > 0 Тогда 
				Панель.ТекущаяСтраница = Страница;
				ТекущаяСтраницаНеУстановлена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтраницаНеУстановлена Тогда
		Если СтраницаПоУмолчанию = Неопределено Тогда
			СтраницаПоУмолчанию = Панель.ПодчиненныеЭлементы[СтраницыСТабЧастями[0].Значение].Имя;
		КонецЕсли;
		
		Панель.ТекущаяСтраница = Панель.ПодчиненныеЭлементы[СтраницаПоУмолчанию];
	КонецЕсли;
	
КонецПроцедуры // УстановкаТекущейСтраницы()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый.
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет.
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта, ОбработкаОповещенияФормы = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ФормаОбъекта.Объект.Ссылка) Тогда
		Возврат ПроверитьМодифицированностьВФорме(ФормаОбъекта, , ОбработкаОповещенияФормы);
	Иначе
		Если ОбработкаОповещенияФормы <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработкаОповещенияФормы, Истина);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

// Проверяет модифицированность документа / справочника и, если необходимо, записывает его.
// 
// Параметры
//  Объект - (ДокументОбъект.*, СправочникОбъект.*) - проверяемый документ / справочник
//  Форма    - форма проверяемого документа / справочника.
//
Функция ПроверитьМодифицированностьВФорме(ФормаОбъекта, ТребуетсяПроведениеДокумента = Ложь, ОбработкаОповещенияФормы = Неопределено) Экспорт

	Если ФормаОбъекта.Модифицированность
		Или ФормаОбъекта.Объект.Ссылка.Пустая()
		Или ТребуетсяПроведениеДокумента И Не ФормаОбъекта.Объект.Проведен
	Тогда
		ЭтоДокумент = ДопСерверныеФункции.ЭтоДокумент(ФормаОбъекта.Объект.Ссылка);
		
		ТекстВопроса = НСтр("ru='Для выполнения данной операции необходимо %3 %1. %2?'");
		Если ЭтоДокумент Тогда
			ТипОбъекта = НСтр("ru='документ'");
			Если ТребуетсяПроведениеДокумента И Не ФормаОбъекта.Объект.Проведен Тогда
				ТипОперации = НСтр("ru='Выполнить проведение'");
				ТипОперацииСлово = НСтр("ru='провести'");
			Иначе
				ТипОперации = НСтр("ru='Выполнить запись'");
				ТипОперацииСлово = НСтр("ru='записать'");
			КонецЕсли;
		Иначе // Справочник.
			ТипОперацииСлово = НСтр("ru='записать'");
			ТипОбъекта = НСтр("ru='элемент'");
			ТипОперации = НСтр("ru='Выполнить запись'");
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ТипОбъекта, ТипОперации, ТипОперацииСлово);
		
		Если ОбработкаОповещенияФормы <> Неопределено Тогда
			// Отработка в асинхронном режиме.
			ДополнительныеПараметры = Новый Структура(); 
			ДополнительныеПараметры.Вставить("ФормаОбъекта", ФормаОбъекта);
			ДополнительныеПараметры.Вставить("ТребуетсяПроведениеДокумента", ТребуетсяПроведениеДокумента);
			ДополнительныеПараметры.Вставить("ЭтоДокумент", ЭтоДокумент);	
			ДополнительныеПараметры.Вставить("ОбработкаОповещенияФормы", ОбработкаОповещенияФормы);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверитьМодифицированностьВФормеВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОповещениеОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат Ложь;
			
		Иначе
			// Отработка в режиме модальности.
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			Иначе
				Попытка
					Если ЭтоДокумент И ТребуетсяПроведениеДокумента Тогда
						ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
						Возврат ФормаОбъекта.Записать(ПараметрыЗаписи);
					Иначе
						Возврат ФормаОбъекта.Записать();
					КонецЕсли;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбработкаОповещенияФормы <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработкаОповещенияФормы, Истина);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

// Обработчик ответа в диалоге записи модифицированного объекта
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога - результат вопроса 
//  ДополнительныеПараметры	 - Структура - дополнительные параметры
//
Процедура ПроверитьМодифицированностьВФормеВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ФормаОбъекта = ДополнительныеПараметры.ФормаОбъекта;
	ТребуетсяПроведениеДокумента = ДополнительныеПараметры.ТребуетсяПроведениеДокумента;
	ЭтоДокумент = ДополнительныеПараметры.ЭтоДокумент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Результат = Ложь;
		Попытка
			Если ЭтоДокумент И ТребуетсяПроведениеДокумента Тогда
				ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
				Результат = ФормаОбъекта.Записать(ПараметрыЗаписи);
			Иначе
				Результат = ФормаОбъекта.Записать();
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецПопытки;
		
		Если Результат Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещенияФормы, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Стандартные действия перед началом добавления в подчиненный список на форме объекта
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма 
//  Список	 - ТаблицаЗначений - список
//  Отказ	 - Булево - отказ операции.
//
Процедура ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(Форма, Список, Отказ) Экспорт
	
	Если глОбщиеЗначения = Неопределено Тогда
		глОбщиеЗначения = Новый Структура;
	КонецЕсли;
		
	УИДФормы = КлючУникальногоИдентификатораФормы(Форма);
	Если Не глОбщиеЗначения.Свойство(УИДФормы) Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаОбъекта", Форма);
		ДополнительныеПараметры.Вставить("Список", Список);
		ДополнительныеПараметры.Вставить("Отказ", Отказ);
		ДополнительныеПараметры.Вставить("УИДФормы", УИДФормы);
		Оповещение = Новый ОписаниеОповещения("ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъектаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		ЗаписатьНовыйОбъектВФорме(Форма, Оповещение);
	Иначе
		глОбщиеЗначения.Удалить(УИДФормы);
	КонецЕсли;
	
КонецПроцедуры

// Стандартные действия перед началом добавления в подчиненный список на форме объекта - после записи нового объекта.
//
// Параметры:
//  Результат				 - Неопределено - не использеутся
//  ДополнительныеПараметры	 - Структура - дополнительные параметры
//
Процедура ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъектаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	глОбщиеЗначения.Вставить(ДополнительныеПараметры.УИДФормы, Истина);
	ДополнительныеПараметры.Список.ДобавитьСтроку();

КонецПроцедуры

// Поместить элемент в архив или из архива, если уже в архиве.
//
// Параметры:
//  ВыбранныеСтроки	 - Массив - выбранные строки в таблице формы.
//
Процедура ПоместитьВАрхив(ВыбранныеСтроки) Экспорт 
	
	Если ВыбранныеСтроки.Количество() > 0 Тогда 
		
		Если ВыбранныеСтроки.Количество() = 1 Тогда 
			ТекстВопроса = "Поместить в архив | Извлечь из архива объект: "+ Строка(ВыбранныеСтроки[0]) + "?";
		Иначе 
			ТекстВопроса = "Поместить в архив | Извлечь из архива объекты: " + Строка(ВыбранныеСтроки.Количество()) + "?";
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			РаботаСДиалогамиСервер.ПоместитьВАрхив(ВыбранныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Меняет видимость архивных элементов в динамическом списке на форме.
//
// Параметры:
//  ЭлементФормы - ТаблицаФормы	 - элемент формы
//  Список		 - ДинамическийСписок	 - реквизит формы
//  Показать	 - Булево				 - показать.
//
Процедура СкрытьПоказатьАрхивные(ЭлементФормы, Список, Показать = Неопределено) Экспорт
	
	Если Показать = Неопределено Тогда
		ПоказыватьАрхивные = Не ЭлементФормы.Пометка;
	Иначе
		ПоказыватьАрхивные = Показать;
	КонецЕсли;
	
	ЭлементФормы.Пометка = ПоказыватьАрхивные;
		
	Если ПоказыватьАрхивные Тогда
		РаботаСФормамиКлиент.СнятьОтборСписка("Архив",Список);
	Иначе
		РаботаСФормамиКлиент.УстановитьОтборСписка("Архив", Ложь,Список);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить дополнительную команду формы
//
// Параметры:
//  ЭтаФорма	 - ФормаКлиентскогоПриложения - форма
//  ИмяКоманды	 - Строка - имя команды.
//
Процедура ВыполнитьДополнительнуюКомандуФормы(ЭтаФорма, ИмяКоманды) Экспорт
	
	ИсполняемаяКоманда = СтрЗаменить(СтрЗаменить(ИмяКоманды, "Подключаемый_", ""),"_",".");
	Выполнить(ИсполняемаяКоманда + "(ЭтаФорма, ИмяКоманды)");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючУникальногоИдентификатораФормы(Форма)
	
	Возврат "_" + СтрЗаменить(Строка(Форма.УникальныйИдентификатор),"-","_");
	
КонецФункции

#КонецОбласти


