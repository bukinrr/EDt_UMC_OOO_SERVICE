
// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ЭтоПолноправныйПользователь", Пользователи.ЭтоПолноправныйПользователь());
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с пользователями.

// Только для внутреннего использования.
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстОшибки = ТекстСообщенияТекущийПользовательНедоступенВСеансеБезРазделителей();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь),
	          ПараметрыСеанса.ТекущийПользователь,
	          ПараметрыСеанса.ТекущийВнешнийПользователь);
	
КонецФункции

Функция ТекстСообщенияТекущийПользовательНедоступенВСеансеБезРазделителей()
	
	Возврат
		НСтр("ru = 'Недопустимое получение параметра сеанса ТекущийПользователь
		           |в сеансе без указания всех разделителей.'");
	
КонецФункции

Процедура ПроверитьСоставПравРолей(НедоступныеПрава, ОписаниеРолей, ОбщийТекстОшибки, ЗаголовокОшибки, СписокОшибок, НеразделенныеДанные = Неопределено)
	
	ТекстОшибки = "";
	
	Для Каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Роль = ОписаниеРоли.Ключ;
		Для Каждого НедоступноеПраво Из НедоступныеПрава Цикл
			Если ПравоДоступа(НедоступноеПраво, Метаданные, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит недоступное право %2.'"),
					Роль, НедоступноеПраво);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Роль, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НеразделенныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СвойстваДанных Из НеразделенныеДанные Цикл
			ОбъектМетаданных = СвойстваДанных.Значение;
			Если Не ПравоДоступа("Чтение", ОбъектМетаданных, Роль) Тогда
				Продолжить;
			КонецЕсли;
			Если ПравоДоступа("Изменение", ОбъектМетаданных, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит право Изменение неразделенного объекта %2.'"),
					Роль, ОбъектМетаданных.ПолноеИмя());
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(ОбъектМетаданных, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			Если СвойстваДанных.Представление = "" Тогда
				Продолжить; // Не ссылочный объект метаданных.
			КонецЕсли;
			Если ПравоДоступа("Добавление", ОбъектМетаданных, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит право Добавление неразделенного объекта %2.'"),
					Роль, ОбъектМетаданных.ПолноеИмя());
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(ОбъектМетаданных, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			Если ПравоДоступа("Удаление", ОбъектМетаданных, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит право Удаление неразделенного объекта %2.'"),
					Роль, ОбъектМетаданных.ПолноеИмя());
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(ОбъектМетаданных, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + Символы.ПС
			+ ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция НеразделенныеДанные()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчики событий подсистемы ВариантыОтчетов.

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	//МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	//МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СведенияОПользователях);
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.Пользователи.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ВнешниеПользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
	// Загрузка в справочник Пользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.Пользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Создает пользователя <Не указан>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - ссылка на пользователя <Не указан>.
// 
Функция СоздатьНеуказанногоПользователя() Экспорт
	
	СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
	
	Если ОбщегоНазначения.СсылкаСуществует(СвойстваНеуказанногоПользователя.СтандартнаяСсылка) Тогда
		
		Возврат СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
		
	Иначе
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		// НовыйПользователь.Служебный = Истина;
		НовыйПользователь.Наименование = СвойстваНеуказанногоПользователя.ПолноеИмя;
		НовыйПользователь.УстановитьСсылкуНового(СвойстваНеуказанногоПользователя.СтандартнаяСсылка);
		НовыйПользователь.ОбменДанными.Загрузка = Истина;
		НовыйПользователь.Записать();
		
		Возврат НовыйПользователь.Ссылка;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения.

// Возвращает свойства пользователя для пользователя ИБ с пустым именем.
Функция СвойстваНеуказанногоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = Новый Структура;
	
	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю.
	Свойства.Вставить("Ссылка", Неопределено);
	
	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи.
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));
	
	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя.
	Свойства.Вставить("ПолноеИмя", Пользователи.ПолноеИмяНеуказанногоПользователя());
	
	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", НСтр("ru = '<Не указан>'"));
	
	// Поиск по уникальному идентификатору.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	
	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмя";
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Свойства;
	
КонецФункции

// Проверяет корректность заполнения назначения ролей, а также корректность прав в ролях по назначению.
//
// Параметры:
//  НазначениеРолей - Неопределено - 
//  ПроверитьВсе - Булево - 
//  СписокОшибок - Неопределено - 
//               - СписокЗначений - найденные ошибки добавляются в список без вызова исключения, где:
//                   * Значение      - Строка - имя роли.
//                                   - Неопределено - роль, указанная в процедуре, не найдена в метаданных.
//                   * Представление - Строка - текст ошибки.
//
Процедура ПроверитьНазначениеРолей(НазначениеРолей = Неопределено, ПроверитьВсе = Ложь, СписокОшибок = Неопределено) Экспорт
	
	Если НазначениеРолей = Неопределено Тогда
		НазначениеРолей = ПользователиСлужебныйПовтИсп.НазначениеРолей();
	КонецЕсли;
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ПриОпределенииНазначенияРолей общего модуля ПользователиПереопределяемый.'");
	
	ТекстОшибки = "";
	
	Назначение = Новый Структура;
	Для Каждого ОписаниеНазначенияРолей Из НазначениеРолей Цикл
		Роли = Новый Соответствие;
		Для Каждого КлючИЗначение Из ОписаниеНазначенияРолей.Значение Цикл
			Роль = Метаданные.Роли.Найти(КлючИЗначение.Ключ);
			Если Роль = Неопределено Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В метаданных не найдена роль ""%1"",
						           |указанная в назначении %2.'"),
						КлючИЗначение.Ключ, ОписаниеНазначенияРолей.Ключ);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Неопределено, ОписаниеОшибки);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
			Для Каждого ОписаниеНазначения Из Назначение Цикл
				Если ОписаниеНазначения.Значение.Получить(Роль) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" указана более чем в одном назначении:
					           |%2, %3.'"),
					Роль.Имя, ОписаниеНазначенияРолей.Ключ, ОписаниеНазначения.Ключ);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Роль, ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Назначение.Вставить(ОписаниеНазначенияРолей.Ключ, Роли);
	КонецЦикла;
	
	// Проверка ролей внешних пользователей.
	НедоступныеПрава = Новый Массив;
	НедоступныеПрава.Добавить("Администрирование");
	НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
	НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
	НедоступныеПрава.Добавить("АдминистрированиеДанных");
	
	ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.ТолькоДляВнешнихПользователей, ТекстОшибки,
		НСтр("ru = 'При проверке ролей только для внешних пользователей найдены ошибки:'"), СписокОшибок);
	
	ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.СовместноДляПользователейИВнешнихПользователей, ТекстОшибки,
		НСтр("ru = 'При проверке ролей совместно для пользователей и внешних пользователей найдены ошибки:'"), СписокОшибок);
	
	// Проверка ролей пользователей.
	Если ОбщегоНазначения.РазделениеВключено() Или ПроверитьВсе Тогда
		Роли = Новый Соответствие;
		Для Каждого Роль Из Метаданные.Роли Цикл
			Если Назначение.ТолькоДляАдминистраторовСистемы.Получить(Роль) <> Неопределено
			 Или Назначение.ТолькоДляПользователейСистемы.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
		КонецЦикла;
		НедоступныеПрава = Новый Массив;
		НедоступныеПрава.Добавить("Администрирование");
		НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
		НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
		НедоступныеПрава.Добавить("ТолстыйКлиент");
		НедоступныеПрава.Добавить("ВнешнееСоединение");
		НедоступныеПрава.Добавить("Automation");
		НедоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок");
		НедоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов");
		НедоступныеПрава.Добавить("РежимВсеФункции");
		
		НеразделенныеДанные = НеразделенныеДанные();
		ПроверитьСоставПравРолей(НедоступныеПрава, Роли, ТекстОшибки,
			НСтр("ru = 'При проверке ролей для пользователей приложения найдены ошибки:'"), СписокОшибок, НеразделенныеДанные);
	КонецЕсли;
	Если Не ОбщегоНазначения.РазделениеВключено() Или ПроверитьВсе Тогда
		Роли = Новый Соответствие;
		Для Каждого Роль Из Метаданные.Роли Цикл
			Если Назначение.ТолькоДляАдминистраторовСистемы.Получить(Роль) <> Неопределено
			 Или Назначение.ТолькоДляВнешнихПользователей.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
		КонецЦикла;
		НедоступныеПрава = Новый Массив;
		НедоступныеПрава.Добавить("Администрирование");
		НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
		НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
		
		ПроверитьСоставПравРолей(НедоступныеПрава, Роли, ТекстОшибки,
			НСтр("ru = 'При проверке ролей для пользователей найдены ошибки:'"), СписокОшибок);
		
		ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.СовместноДляПользователейИВнешнихПользователей, ТекстОшибки,
			НСтр("ru = 'При проверке ролей совместно для пользователей и внешних пользователей найдены ошибки:'"), СписокОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
