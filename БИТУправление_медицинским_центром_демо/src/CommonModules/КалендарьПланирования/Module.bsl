////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции подсистемы записи клиентов.

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выравнивает входящее время до кратности периодичности планирования
//
// Параметры:
// 	ДатаВх - Дата - исходное время.
//
Процедура ОкруглитьВремяДоПериодаПланирования(ДатаВх) Экспорт
	
	КвантПланирования = ОбщегоНазначения.ВремяВСекунды( УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПериодичностьПланирования",ТекущаяДата()));
	Если ЗначениеЗаполнено(КвантПланирования) Тогда
		
		КвантовВДате = (ДатаВх-НачалоДня(ДатаВх))/КвантПланирования;
		ДатаВх       = НачалоДня(ДатаВх) +  КвантПланирования*(Цел(КвантовВДате)+?(Цел(КвантовВДате)=КвантовВДате,0,1));
		
	КонецЕсли;
	
КонецПроцедуры

// Функция прверяет наличие других заявок данного Сотрудника, попадающих в указанный интервал времени
//
// Параметры:
//  Сотрудник		 - СправочникСсылка.Сотрудники	 - Проверяемый сотрудник.
//  ВремяНачала		 - Дата							 - Начало времени заявки.
//  ВремяОкончания	 - Дата							 - Конец времени заявки.
//  Ссылка			 - ДокументСсылка.Заявка		 - Ссылка на контролируемый документ заявки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - таблица наложений либо Неопределено, если таковых нет.
//
Функция ПроверкаНаложенияЗаявок(Сотрудник, ВремяНачала, ВремяОкончания, Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	ЗакрытыеПроцедуры.ПроверкаНаложенияЗаявок(Сотрудник, ВремяНачала, ВремяОкончания, Ссылка, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаРаботы.Ссылка КАК Ссылка,
		|	ЗаявкаРаботы.Ссылка.Состояние КАК Состояние,
		|	ЗаявкаРаботы.НомерСтроки КАК НомерСтроки,
		|	ЗаявкаРаботы.ДатаНачала КАК ДатаНачала,
		|	ЗаявкаРаботы.ДатаОкончания
		|ИЗ
		|	Документ.Заявка.Работы КАК ЗаявкаРаботы
		|ГДЕ
		|	НЕ ЗаявкаРаботы.Ссылка.ПометкаУдаления
		|	И ЗаявкаРаботы.ДатаНачала <> ЗаявкаРаботы.ДатаОкончания
		|	И ВЫБОР
		|			КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				ТОГДА ЗаявкаРаботы.Ссылка.Сотрудник
		|			ИНАЧЕ ЗаявкаРаботы.Сотрудник
		|		КОНЕЦ = &Сотрудник
		|	И (ЗаявкаРаботы.ДатаНачала < &ДатаНач
		|				И ЗаявкаРаботы.ДатаОкончания > &ДатаНач
		|			ИЛИ ЗаявкаРаботы.ДатаНачала >= &ДатаНач
		|				И ЗаявкаРаботы.ДатаНачала < &ДатаКон)
		|	И ЗаявкаРаботы.Ссылка <> &Ссылка
		|	И ЕСТЬNULL(НЕ ЗаявкаРаботы.Ссылка.Состояние В (&СостоянияОтмененных), ИСТИНА)
		|	И НЕ ЕСТЬNULL(ЗаявкаРаботы.Номенклатура.ПланируетсяБезСотрудника, ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ДатаНачала";
		
		Запрос.УстановитьПараметр("ДатаНач", ВремяНачала);
		Запрос.УстановитьПараметр("ДатаКон", ВремяОкончания);
		Запрос.УстановитьПараметр("СостоянияОтмененных", УправлениеЗаявками.СостоянияЗаявкиОтменена());
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		ТабРез = Запрос.Выполнить().Выгрузить();
		
		Если ТабРез.Количество()<>0 Тогда
			
			// Сливаем первый интервал работ первой заявки в один комплект переменных Ссылка-ДатаНачала-ДатаОкончания,
			// чтобы вернуть первое наложение.
			СсылкаНайденнойЗаявки = ТабРез[0].Ссылка;
			ТекДатаНачала         = ТабРез[0].ДатаНачала;
			ТекДатаОкончания      = ТабРез[0].ДатаОкончания;
			Для Сч = 0 по ТабРез.Количество()-2 Цикл
				СтрРез = ТабРез[Сч];
				Если СтрРез.Ссылка = ТабРез[Сч+1].Ссылка И           // Сравнили со след. строкой.
					 СтрРез.ДатаОкончания = ТабРез[Сч+1].ДатаНачала  // Сравнили со след. строкой на то, нет ли разрыва.
				Тогда
					ТекДатаОкончания = ТабРез[Сч+1].ДатаОкончания;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Новый Структура("Ссылка,ДатаНачала,ДатаОкончания",СсылкаНайденнойЗаявки,ТекДатаНачала,ТекДатаОкончания); 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция проверяет наличие других заявок, планирующих занятость оборудования, используемого в работах данной заявки
//
// Параметры:
//  табРаботы				 - ТаблицаЗначений	 - таблица работ контролируемого документа
//  ВремяНачала				 - Дата				 - начало интервала
//  ВремяОкончания			 - Дата				 - конец интервала
//  Объект					 - ДокументОбъект.Заявка - контролируемый документ заявки
//  ИспользованиеКабинетов	 - Булево				 - признак использования кабинетов в контексте заявки. Определяется учетной политикой.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - таблица наложений либо Неопределено, если таковых нет.
//
Функция ПроверкаНаложенияЗаявокОборудования(табРаботы,ВремяНачала,ВремяОкончания,Объект,ИспользованиеКабинетов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	рез = Новый ТаблицаЗначений;
	рез.Колонки.Добавить("Оборудование");
	рез.Колонки.Добавить("Заявка");
	рез.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	рез.Колонки.Добавить("ДатаНачала");
	рез.Колонки.Добавить("ВремяНачала");
	рез.Колонки.Добавить("ВремяОкончания");
	
	ТабВремяОборудования = Новый ТаблицаЗначений;
	ТабВремяОборудования.Колонки.Добавить("Оборудование",	Новый ОписаниеТипов("СправочникСсылка.Оборудование"));
	ТабВремяОборудования.Колонки.Добавить("ВремяНачала" ,	Новый ОписаниеТипов("Дата"));
	ТабВремяОборудования.Колонки.Добавить("ВремяОкончания",	Новый ОписаниеТипов("Дата"));
		
	ТекВремяНач = ВремяНачала; 
	Для Каждого СтрокаРабота Из табРаботы Цикл
		
		Если СтрокаРабота.Продолжительность <> Дата(1,1,1)
			И Не СтрокаРабота.Номенклатура.ПланируетсяБезОборудования
		Тогда
			
			// Оборудование, указанное в заявке
			Для Сч = 1 По 3 Цикл
				Если ЗначениеЗаполнено(СтрокаРабота["Оборудование" + Сч]) Тогда
					ДобавитьСтрокуПроверкиОборудования(	ТабВремяОборудования, 
														СтрокаРабота["Оборудование" + Сч], 
														СтрокаРабота.ДатаНачала, 
														СтрокаРабота.ДатаОкончания);
				КонецЕсли;
			КонецЦикла;									
			
			// Оборудование, указанное в номенклатуре
			ОборудованиеНоменклатуры = ПроцедурыСпециализацииПоставки.ПолучитьЗначенияОборудования(СтрокаРабота.Номенклатура,Объект.Филиал);
			Для Каждого кзОборудование Из ОборудованиеНоменклатуры Цикл
				Если ТипЗнч(кзОборудование.Значение) = Тип("СправочникСсылка.Оборудование") Тогда
					ДобавитьСтрокуПроверкиОборудования(	ТабВремяОборудования, 
														кзОборудование.Значение, 
														СтрокаРабота.ДатаНачала, 
														СтрокаРабота.ДатаОкончания);
				КонецЕсли;
			КонецЦикла;
			
			Если ИспользованиеКабинетов
				И Не Объект.НесколькоСотрудников
				И ЗначениеЗаполнено(Объект.Кабинет)
			Тогда
				
				стрВремяОборудования = ТабВремяОборудования.Добавить();
				стрВремяОборудования.Оборудование   = Объект.Кабинет;
				стрВремяОборудования.ВремяНачала    = СтрокаРабота.ДатаНачала;
				стрВремяОборудования.ВремяОкончания = СтрокаРабота.ДатаОкончания;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабВремяОборудования.Свернуть("Оборудование, ВремяНачала, ВремяОкончания");
	
	// Склеивание последовательных непрерывных потребностей в одном оборудовании.
	ТабВремяОборудования.Сортировать("Оборудование, ВремяНачала, ВремяОкончания");
	мсСтрокиКУдалению = Новый Массив;
	мПослОборуд	  = Неопределено;
	мПослВремяКон = Неопределено;
	
	Для Каждого СтрокаОборудования Из ТабВремяОборудования Цикл
		Если мПослОборуд <> СтрокаОборудования.Оборудование Тогда
			мПослОборуд	  = СтрокаОборудования.Оборудование;
			мПослВремяКон = СтрокаОборудования.ВремяОкончания;
		Иначе
			Если СтрокаОборудования.ВремяНачала = мПослВремяКон Тогда
				мсСтрокиКУдалению.Добавить(СтрокаОборудования);
				ПредСтрока = ТабВремяОборудования[ТабВремяОборудования.Индекс(СтрокаОборудования)-1];
				ПредСтрока.ВремяОкончания = СтрокаОборудования.ВремяОкончания;
			КонецЕсли;
			мПослВремяКон = СтрокаОборудования.ВремяОкончания;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаОборудования Из мсСтрокиКУдалению Цикл
		ТабВремяОборудования.Удалить(СтрокаОборудования);
	КонецЦикла;
	
	// Анализ, есть ли оборудование в заявке. Если нет, завершаем проверку.
	Если ТабВремяОборудования.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск накладывающихся заявок
	ТипыСостоянияНеКонтролируемые = Новый Массив;
	ТипыСостоянияНеКонтролируемые.Добавить(Перечисления.ТипыСостоянийЗаявок.Отменена);
	
	Запрос.УстановитьПараметр("ВремяОборудования", ТабВремяОборудования);
	
	Запрос.УстановитьПараметр("ТипСостояния",ТипыСостоянияНеКонтролируемые);
	Запрос.УстановитьПараметр("ДатаНачала",Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ЭтаЗаявка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользованиеКабинетов",ИспользованиеКабинетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВремяОборудования.ВремяНачала КАК ДатаНачала,
	|	ВремяОборудования.ВремяОкончания КАК ДатаОкончания,
	|	ВремяОборудования.Оборудование КАК Оборудование
	|ПОМЕСТИТЬ ВремяОборудования
	|ИЗ
	|	&ВремяОборудования КАК ВремяОборудования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ссылка,
	|	Заявка.Сотрудник КАК Сотрудник,
	|	Заявка.Кабинет КАК Кабинет,
	|	Заявка.ДатаНачала КАК ДатаНачала,
	|	Заявка.ДатаОкончания КАК ДатаОкончания,
	|	Заявка.Филиал КАК Филиал,
	|	Заявка.НесколькоСотрудников КАК НесколькоСотрудников
	|ПОМЕСТИТЬ ЗаявкиПериода
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.ДатаНачала < &ДатаОкончания
	|	И Заявка.ДатаОкончания > &ДатаНачала
	|	И НЕ Заявка.Состояние.ТипСостояния В (&ТипСостояния)
	|	И Заявка.Ссылка <> &ЭтаЗаявка
	|	И НЕ Заявка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаРаботы.Ссылка КАК Ссылка,
	|	ЗаявкаРаботы.ДатаНачала КАК ДатаНачала,
	|	ЗаявкаРаботы.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА &ИспользованиеКабинетов = ИСТИНА
	|				И ЗаявкиПериода.НесколькоСотрудников
	|				И ЗаявкаРаботы.Оборудование1 = ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	|			ТОГДА ЗаявкиПериода.Кабинет
	|		ИНАЧЕ ЗаявкаРаботы.Оборудование1
	|	КОНЕЦ КАК Оборудование1,
	|	ЗаявкаРаботы.Оборудование2 КАК Оборудование2,
	|	ЗаявкаРаботы.Оборудование3 КАК Оборудование3,
	|	ВЫБОР
	|		КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА ЗаявкиПериода.Сотрудник
	|		ИНАЧЕ ЗаявкаРаботы.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	ЗаявкаРаботы.Номенклатура КАК Номенклатура,
	|	ЗаявкиПериода.Филиал КАК Филиал
	|ПОМЕСТИТЬ ЗаявкиРаботы
	|ИЗ
	|	ЗаявкиПериода КАК ЗаявкиПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заявка.Работы КАК ЗаявкаРаботы
	|		ПО ЗаявкиПериода.Ссылка = ЗаявкаРаботы.Ссылка
	|ГДЕ
	|	(ЗаявкаРаботы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ИЛИ НЕ ЗаявкаРаботы.Номенклатура.ПланируетсяБезОборудования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаРаботы.Ссылка КАК Заявка,
	|	ЗаявкаРаботы.ДатаНачала КАК ДатаНачала,
	|	ЗаявкаРаботы.ДатаОкончания КАК ДатаОкончания,
	|	ЗаявкаРаботы.Оборудование1 КАК Оборудование,
	|	ЗаявкаРаботы.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ОборудованиеЗаявок
	|ИЗ
	|	ЗаявкиРаботы КАК ЗаявкаРаботы
	|ГДЕ
	|	ЗаявкаРаботы.Оборудование1 <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	|	И ЗаявкаРаботы.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаявкиПериода.Ссылка
	|			ИЗ
	|				ЗаявкиПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаРаботы.Ссылка,
	|	ЗаявкаРаботы.ДатаНачала,
	|	ЗаявкаРаботы.ДатаОкончания,
	|	ЗаявкаРаботы.Оборудование2,
	|	ЗаявкаРаботы.Сотрудник
	|ИЗ
	|	ЗаявкиРаботы КАК ЗаявкаРаботы
	|ГДЕ
	|	ЗаявкаРаботы.Оборудование2 <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	|	И ЗаявкаРаботы.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаявкиПериода.Ссылка
	|			ИЗ
	|				ЗаявкиПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаРаботы.Ссылка,
	|	ЗаявкаРаботы.ДатаНачала,
	|	ЗаявкаРаботы.ДатаОкончания,
	|	ЗаявкаРаботы.Оборудование3,
	|	ЗаявкаРаботы.Сотрудник
	|ИЗ
	|	ЗаявкиРаботы КАК ЗаявкаРаботы
	|ГДЕ
	|	ЗаявкаРаботы.Оборудование3 <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	|	И ЗаявкаРаботы.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаявкиПериода.Ссылка
	|			ИЗ
	|				ЗаявкиПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкиПериода.Ссылка,
	|	ЗаявкиРаботы.ДатаНачала,
	|	ЗаявкиРаботы.ДатаОкончания,
	|	ЗаявкиПериода.Кабинет,
	|	ЗаявкиРаботы.Сотрудник
	|ИЗ
	|	ЗаявкиПериода КАК ЗаявкиПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаявкиРаботы КАК ЗаявкиРаботы
	|		ПО ЗаявкиПериода.Ссылка = ЗаявкиРаботы.Ссылка
	|ГДЕ
	|	&ИспользованиеКабинетов = ИСТИНА
	|	И ЗаявкиПериода.Кабинет <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	|	И НЕ ЗаявкиПериода.Ссылка.НесколькоСотрудников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкиРаботы.Ссылка,
	|	ЗаявкиРаботы.ДатаНачала,
	|	ЗаявкиРаботы.ДатаОкончания,
	|	НоменклатураОборудования.Оборудование,
	|	ЗаявкиРаботы.Сотрудник
	|ИЗ
	|	ЗаявкиРаботы КАК ЗаявкиРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Оборудования КАК НоменклатураОборудования
	|		ПО (ТИПЗНАЧЕНИЯ(НоменклатураОборудования.Оборудование) = ТИП(Справочник.Оборудование))
	|			И ЗаявкиРаботы.Номенклатура = НоменклатураОборудования.Ссылка
	|			И (ЗаявкиРаботы.Филиал = НоменклатураОборудования.Филиал
	|				ИЛИ НоменклатураОборудования.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОборудованиеЗаявок.Заявка КАК Заявка,
	|	ОборудованиеЗаявок.Оборудование КАК Оборудование,
	|	ОборудованиеЗаявок.Сотрудник КАК Сотрудник,
	|	ОборудованиеЗаявок.ДатаНачала КАК ДатаНачала,
	|	ОборудованиеЗаявок.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВремяОборудования КАК ВремяОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборудованиеЗаявок КАК ОборудованиеЗаявок
	|		ПО ВремяОборудования.Оборудование = ОборудованиеЗаявок.Оборудование
	|			И ВремяОборудования.ДатаНачала < ОборудованиеЗаявок.ДатаОкончания
	|			И ВремяОборудования.ДатаОкончания > ОборудованиеЗаявок.ДатаНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	Оборудование,
	|	Заявка,
	|	Сотрудник,
	|	ДатаНачала,
	|	ДатаОкончания";
	
	ТабНаложениеЗаявок = Запрос.Выполнить().Выгрузить();
	
	// Уплотнение случаев пересечения
	мсСтрокиКУдалению.Очистить();
	
	ТабИзмеренияНаложения = ТабНаложениеЗаявок.Скопировать();
	ТабИзмеренияНаложения.Свернуть("Оборудование, Заявка, Сотрудник");
	Отбор = Новый Структура("Оборудование, Заявка, Сотрудник");
	Для Каждого ИзмерениеНаложения Из ТабИзмеренияНаложения Цикл
		ЗаполнитьЗначенияСвойств(Отбор, ИзмерениеНаложения);
		мсСтр = ТабНаложениеЗаявок.НайтиСтроки(Отбор);
		
		мПослВремяКон = Неопределено;
		Для Каждого СтрокаНаложения Из мсСтр Цикл
			Если СтрокаНаложения.ДатаНачала = мПослВремяКон Тогда
				мсСтрокиКУдалению.Добавить(СтрокаНаложения);
				ПредСтрока = мсСтр[мсСтр.Найти(СтрокаНаложения)-1];
				ПредСтрока.ДатаОкончания = СтрокаНаложения.ДатаОкончания;
			КонецЕсли;
			мПослВремяКон = СтрокаНаложения.ДатаОкончания;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаНаложения Из мсСтрокиКУдалению Цикл
		ТабНаложениеЗаявок.Удалить(СтрокаНаложения);
	КонецЦикла;
	Для Каждого СтрокаНаложения Из ТабНаложениеЗаявок Цикл
		// Добавить строку описания наложения
		стрРез = Рез.Добавить();
		стрРез.Заявка		  = СтрокаНаложения.Заявка;
		стрРез.Оборудование   = СтрокаНаложения.Оборудование;
		стрРез.ДатаНачала     = СтрокаНаложения.ДатаНачала;
		стрРез.ВремяНачала    = СтрокаНаложения.ДатаНачала;
		стрРез.ВремяОкончания = СтрокаНаложения.ДатаОкончания;
		стрРез.Сотрудник	  = СтрокаНаложения.Сотрудник;
	КонецЦикла;
	
	Если Рез.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Рез; 
	КонецЕсли;
	
КонецФункции

// Функция прверяет наличие других заявок данного клиента, попадающих в указанный интервал времени
//
// Параметры:
//  Клиент			 - СправочникСсылка.Клиенты	 - клиент
//  ДатаНачала		 - Дата						 - начало интервала
//  ДатаОкончания	 - Дата						 - конец интервала
//  Ссылка			 - ДокументСсылка.Заявка	 - ссылка на контролируемый документ заявки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - таблица наложений либо Неопределено, если таковых нет.
//
Функция ПроверкаНаложенияЗаявокКлиента(Клиент, ДатаНачала, ДатаОкончания, Ссылка) Экспорт 
	
	// Групповой записи можно.
	Если РаботаСКлиентамиПереопределяемый.ЭтоГрупповаяЗаявка(Клиент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Заявка.Ссылка КАК Ссылка,
	               |	Заявка.ДатаНачала КАК ДатаНачала,
	               |	Заявка.ДатаОкончания КАК ДатаОкончания
	               |ИЗ
	               |	Документ.Заявка КАК Заявка
	               |ГДЕ
	               |	НЕ Заявка.ПометкаУдаления
	               |	И Заявка.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
	               |	И Заявка.Клиент = &Клиент
	               |	И (Заявка.ДатаНачала <= &ДатаНачала
	               |				И Заявка.ДатаОкончания > &ДатаНачала
	               |			ИЛИ Заявка.ДатаНачала < &ДатаОкончания
	               |				И Заявка.ДатаОкончания >= &ДатаОкончания
	               |			ИЛИ Заявка.ДатаНачала > &ДатаНачала
	               |				И Заявка.ДатаОкончания < &ДатаОкончания)
	               |	И Заявка.Ссылка <> &Ссылка
	               |	И Заявка.ДатаНачала <> Заявка.ДатаОкончания";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Неопределено;
	Иначе
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		Возврат ТаблицаРезультата; 
	КонецЕсли;
	
КонецФункции

// Все сотурдники участвующие в расписании для списка выбора
//
// Параметры:
//  ТекстПоиска	 - Строка - Начало наименования сотрудников.
// 
// Возвращаемое значение:
//  СписокЗначений - из элементтов СправочникСсылка.Сотрудники.
//
Функция ВсеСотрудникиУчаствующиеВРасписании(ТекстПоиска = "") Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.УчаствуетВКалендарномПланировании
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.Архив
	|	И НЕ Сотрудники.ЭтоГруппа
	|	//%ДополнительныеОтборы
	|
	|УПОРЯДОЧИТЬ ПО Наименование
	|"
	;
	// Дополнительные отборы запроса.
	ДополнительныеОтборы = "";
	Если ЗначениеЗаполнено(ТекстПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ДополнительныеОтборы, "И Наименование ПОДОБНО """ + ТекстПоиска + "%""", Символы.ПС);
	КонецЕсли;
	Если Не ПустаяСтрока(ДополнительныеОтборы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//%ДополнительныеОтборы", ДополнительныеОтборы);
	КонецЕсли;
	
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Результат.Добавить(Выб.Ссылка, Выб.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуПроверкиОборудования(ТаблицаПроверкиОборудования, Оборудование, ВремяНачала, ВремяОкончания)
	
	СтрокаТаблицы = ТаблицаПроверкиОборудования.Добавить();
	СтрокаТаблицы.Оборудование	 = Оборудование;
	СтрокаТаблицы.ВремяНачала	 = ВремяНачала;
	СтрокаТаблицы.ВремяОкончания = ВремяОкончания;
	
КонецПроцедуры

// Функция прверяет попадание заданного интервала времени в рабочее время сотрудника
//
// Параметры:
// 	Сотрудник 			- сотрудник
// 	ВремяНачала		- <Дата> - начало интервала
// 	ВремяОкончания	- <Дата> - конец интервала
//	
// Возвращаемое значение:
// 	Предупреждающее сообщение либо неопределено.
//
Функция ПроверкаПопаданияЗаявкиВРабочееВремяСотрудника(Сотрудник,ВремяНачала,ВремяОкончания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Смена,
	|	ГрафикиРаботы.ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Дата = &Дата
	|	И ГрафикиРаботы.Сотрудник = &Сотрудник
	|	И (ГрафикиРаботы.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыВремениГрафика.РабочееВремя)
	|			ИЛИ ГрафикиРаботы.ВидВремени.РабочееВремя)"
	;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ВремяНачала));
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат "Дата работ по заявке приходится на выходной сотрудника "+Строка(Сотрудник)+"!";
	Иначе
		ТаблицаПериодов = ПолучитьТаблицуПериодовСотрудника(Рез.Выгрузить());
		
		флОшибка = Истина;
		чВремяНачала    = ВремяНачала   -НачалоДня(ВремяНачала);
		чВремяОкончания = ВремяОкончания-НачалоДня(ВремяОкончания);
		Для каждого Период из ТаблицаПериодов Цикл
			
			Если (Период.ВремяНачала   -НачалоДня(Период.ВремяНачала)    <= чВремяНачала) и 
				(Период.ВремяОкончания-НачалоДня(Период.ВремяОкончания) >= чВремяОкончания) 
				Тогда
				флОшибка = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		Если флОшибка Тогда 
			Возврат "Время выполнения работ по заявке выходит за границы рабочего дня сотрудника "+Строка(Сотрудник)+" в этот день!";
		Иначе
			Возврат Неопределено
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция преобразует список смен и времен работы в таблицу периодов внурти дня, описываемых эимми сменами
//
// Параметры:
// 	ТаблицаСмен - ТаблицаЗначений - смены.
//	
// Возвращаемое значение:
// 	ТаблицаЗначений - перечень периодов смен.
//
Функция ПолучитьТаблицуПериодовСотрудника(ТаблицаСмен) Экспорт
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ВремяНачала");
	ТаблицаПериодов.Колонки.Добавить("ВремяОкончания");
	
	Для каждого стр из ТаблицаСмен Цикл 
		Если ЗначениеЗаполнено(стр.Смена) Тогда
			Для каждого ПериодСмены из стр.Смена.ПериодыСмены Цикл
				
				ВремяНачала    = ПериодСмены.ВремяНачала;
				ВремяОкончания = ПериодСмены.ВремяОкончания;
				МаксИнд = ТаблицаПериодов.Количество()-1;
				флНеДобавлятьПериод = Ложь;
				// Периоды смен
				Для сч=0 по МаксИнд Цикл
					Период = ТаблицаПериодов[МаксИнд-сч];
					Если ВремяНачала <= Период.ВремяНачала Тогда
						
						Если ВремяОкончания >= Период.ВремяОкончания Тогда // Поглощение
							ТаблицаПериодов.Удалить(МаксИнд-сч);
						ИначеЕсли ВремяОкончания <= Период.ВремяОкончания и ВремяОкончания >= Период.ВремяНачала Тогда
							// Слияние слева
							ВремяОкончания = Период.ВремяОкончания;
							ТаблицаПериодов.Удалить(МаксИнд-сч);
						КонецЕсли;
						
					ИначеЕсли ВремяОкончания >= Период.ВремяОкончания Тогда
						Если ВремяНачала >	Период.ВремяНачала Тогда // Слияние Справа
							ВремяНачала           = Период.ВремяНачала;
							ТаблицаПериодов.Удалить(МаксИнд-сч);
						КонецЕсли;
					Иначе
						// Внутри.
						флНеДобавлятьПериод = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Период = ТаблицаПериодов.Добавить();
				Период.ВремяНачала = ВремяНачала;
				Период.ВремяОкончания = ВремяОкончания;
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаПериодов.Добавить(),Стр);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаПериодов;	
КонецФункции

// Функция находит и возвращает документ оказания услуг, введенный по указанной заявке.
//
// Параметры:
//  Заявка					 - ДокументСсылка.Заявка - документ Заявка.
//  КлиентГрупповойЗаявки	 - СправочникСсылка.Клиенты	 - если это групповая заявка, то клиент из её списка записанных.
//  КлиентШапкиЗаявки		 - СправочникСсылка.Клиенты	 - клиент из шапки Заявки для ускорения проверки на групповую.
// 
// Возвращаемое значение:
//  ДокументСсылка.ОказаниеУслуг - документ продажи.
//
Функция ПолучитьОказаниеУслугЗаявки(Заявка, КлиентГрупповойЗаявки = Неопределено, КлиентШапкиЗаявки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка",Заявка);
	Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту);
	
	ТекстШапка = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОказаниеУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.ДокументОснование = &Заявка // Индексируемое.
	|	И НЕ ОказаниеУслуг.ПометкаУдаления
	|	И ОказаниеУслуг.ВидОперации = &ВидОперации
	|	//%ОтборКлиент
	|";
	
	ТекстЗаявки = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОказаниеУслугЗаявки.Ссылка
	|ИЗ
	|	Документ.ОказаниеУслуг.Заявки КАК ОказаниеУслугЗаявки
	|ГДЕ
	|	ОказаниеУслугЗаявки.Заявка = &Заявка
	|	//%ОтборКлиент_Заявки
	|";
	
	Если КлиентГрупповойЗаявки <> Неопределено Тогда
		ОбъектПроверкиНаГрупповую = ?(ЗначениеЗаполнено(КлиентШапкиЗаявки), КлиентШапкиЗаявки, Заявка);
		Если РаботаСКлиентамиПереопределяемый.ЭтоГрупповаяЗаявка(Заявка) Тогда
			
			ТекстШапка	 = СтрЗаменить(Запрос.Текст, "//%ОтборКлиент", "И ОказаниеУслуг.Клиент = &Клиент");
			ТекстЗаявки	 = СтрЗаменить(Запрос.Текст, "//%ОтборКлиент_Заявки", "И ОказаниеУслугЗаявки.Ссылка.Клиент = &Клиент");
			
			Запрос.УстановитьПараметр("Клиент", КлиентГрупповойЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	// Шаг 1: поиск по документу основанию в шапки (индексируемое поле, 99% случаев)
	Запрос.Текст = ТекстШапка;
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	// Шаг 2: поиск по таб. части Заявки документа продажи
	Запрос.Текст = ТекстЗаявки;
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Возврат Документы.ОказаниеУслуг.ПустаяСсылка();
	
КонецФункции

// Функция заполняет данные о клиенте из базы данных в соответствие.
//
// Параметры:
//  мКэшДополнительнойИнформацииКлиентов - Соответствие, Неопределено - Соответствие, 
//											где ключ - ссылка на клиента, а значение - структура данных.
//  СписокКлиентов						 - Массив - массив элементов типа СправочникСсылка.Клиенты.
Процедура ОбновитьКэшДопИнформацииКлиентов(мКэшДополнительнойИнформацииКлиентов, СписокКлиентов) Экспорт
	
	ОбновитьКэшДопИнформацииКлиентовСобственнымиДанными(мКэшДополнительнойИнформацииКлиентов, СписокКлиентов);
	ДополнитьКэшДопИнформацииКлиентовДаннымиЗаконныхПредставителей(мКэшДополнительнойИнформацииКлиентов, СписокКлиентов);
	
КонецПроцедуры

Процедура ОбновитьКэшДопИнформацииКлиентовСобственнымиДанными(мКэшДополнительнойИнформацииКлиентов, СписокКлиентов)
		
	Если мКэшДополнительнойИнформацииКлиентов = Неопределено Тогда
		мКэшДополнительнойИнформацииКлиентов = Новый Соответствие;
	КонецЕсли;
	
	// Получение телефонов клиентов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКлиентов",СписокКлиентов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Клиент,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Объект В (&СписокКлиентов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеПоУмолчанию,
	|	Вид
	|ИТОГИ ПО
	|	Клиент"	
	;
	
	Выб = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выб.Следующий() Цикл
		Значение = мКэшДополнительнойИнформацииКлиентов[Выб.Клиент];
		Если Значение = Неопределено Тогда
			мКэшДополнительнойИнформацииКлиентов.Вставить(Выб.Клиент,Новый Структура);
			Значение = мКэшДополнительнойИнформацииКлиентов[Выб.Клиент];
		КонецЕсли;
		
		ВыбДанные = Выб.Выбрать();
		флПерваяСтрока = Истина;
		Пока ВыбДанные.Следующий() Цикл
			Если флПерваяСтрока Тогда
				Значение.Вставить("Телефон",ВыбДанные.Представление);
				флПерваяСтрока = Ложь;
			КонецЕсли;
			Если ВыбДанные.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый Тогда
				Значение.Вставить("СотовыйТелефон",ВыбДанные.Представление);		
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьКэшДопИнформацииКлиентовДаннымиЗаконныхПредставителей(мКэшДополнительнойИнформацииКлиентов, СписокКлиентов)
	
	// Определяем клиентов без телефона (кандидаты в получение телефона из законного представителя).
	КлиентыБезТелефона = Новый Массив;
	Для Каждого Клиент Из СписокКлиентов Цикл
		ДанныеКеша = мКэшДополнительнойИнформацииКлиентов.Получить(Клиент);
		Если ДанныеКеша = Неопределено
			Или Не ДанныеКеша.Свойство("Телефон")
		Тогда
			КлиентыБезТелефона.Добавить(Клиент);
		КонецЕсли;
	КонецЦикла;
	
	Если КлиентыБезТелефона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем законных представителей клиентов без телефона
	ЗаконныеПредставителиДляПолученияТелефона = Новый Массив;
	ЗаконныеПредставителиКлиентов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиенты", КлиентыБезТелефона);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Клиент,
	|	Клиенты.ЗаконныйПредставитель КАК ЗаконныйПредставитель,
	|	Клиенты.ЗаконныйПредставительТелефон КАК ЗаконныйПредставительТелефон,
	|	ВЫБОР
	|		КОГДА Клиенты.ЗаконныйПредставитель ССЫЛКА Справочник.Клиенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаконныйПредставительВСправочнике
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка В(&Клиенты)"
	;
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.ЗаконныйПредставительВСправочнике
			И ЗначениеЗаполнено(Выб.ЗаконныйПредставитель)
		Тогда
			// Копим представителей из справочника для единого запроса.
			ЗаконныеПредставителиДляПолученияТелефона.Добавить(Выб.ЗаконныйПредставитель);
			ЗаконныеПредставителиКлиентов.Вставить(Выб.ЗаконныйПредставитель, Выб.Клиент);
			
		ИначеЕсли ТипЗнч(Выб.ЗаконныйПредставитель) = Тип("Строка")
				И ЗначениеЗаполнено(Выб.ЗаконныйПредставительТелефон)
		Тогда
			// Добавляю телефон в итоговых кеш данных.
			Значение = мКэшДополнительнойИнформацииКлиентов.Получить(Выб.Клиент);
			Если Значение = Неопределено Тогда
				мКэшДополнительнойИнформацииКлиентов.Вставить(Выб.Клиент, Новый Структура("Телефон", Выб.ЗаконныйПредставительТелефон));
			Иначе
				Значение.Вставить("Телефон", Выб.ЗаконныйПредставительТелефон);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Отдельным запросом получаем телефоны законных представителей из справочника клиентов.
	Если ЗаконныеПредставителиДляПолученияТелефона.Количество() <> 0 Тогда
		ДанныеПредставителей = Новый Соответствие;
		ОбновитьКэшДопИнформацииКлиентовСобственнымиДанными(ДанныеПредставителей, ЗаконныеПредставителиДляПолученияТелефона);
		
		Для Каждого ДанныеПредставителя Из ДанныеПредставителей Цикл
			Клиент = ЗаконныеПредставителиКлиентов.Получить(ДанныеПредставителя.Ключ);
			
			Значение = мКэшДополнительнойИнформацииКлиентов.Получить(Клиент);
			Если Значение = Неопределено Тогда
				мКэшДополнительнойИнформацииКлиентов.Вставить(Клиент, ДанныеПредставителя.Значение);
			Иначе
				Значение.Вставить("Телефон", ДанныеПредставителя.Значение.Телефон);
				Если ДанныеПредставителя.Значение.Свойство("СотовыйТелефон") Тогда
					ДанныеПредставителя.Значение.Вставить("СотовыйТелефон", ДанныеПредставителя.Значение.СотовыйТелефон);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Не актуально для полностью детских клиник. Требуется настройка уч.пол.***?
	//// Маркировка телефонов представителей доп.символом.
	//Маркер = "(" + Нрег(Лев(НСтр("ru='Представитель'"), 1)) + ")";
	//Для Каждого Клиент Из КлиентыБезТелефона Цикл
	//	Значение = мКэшДополнительнойИнформацииКлиентов.Получить(Клиент);
	//	Если Значение <> Неопределено Тогда
	//		Если Значение.Свойство("Телефон") Тогда
	//			Значение.Телефон = Значение.Телефон + Маркер;
	//		КонецЕсли;
	//		Если Значение.Свойство("СотовыйТелефон") Тогда
	//			Значение.СотовыйТелефон = Значение.СотовыйТелефон + Маркер;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет комлпекс действий по обработке пометки удаления заявки пользователем
//
// Параметры:
// 	ЗаявкаОбъект - объект изменяемой заявки.
//
Процедура ЗаявкаПередПометкойУдаления(ЗаявкаОбъект) Экспорт
	
	Если  Не ЗаявкаОбъект.ЭтоНовый()	
		И ЗаявкаОбъект.Ссылка.ПометкаУдаления = Ложь
		И ЗаявкаОбъект.Ссылка.Состояние.ТипСостояния <> Перечисления.ТипыСостоянийЗаявок.Отменена
		Тогда
		ДобавитьВЗаявкуОтметкуНеобходимостиУказанияПричины(ЗаявкаОбъект);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет комлпекс действий по обработке изменения пользователем состояния заявки
//
// Параметры:
// 	ЗаявкаОбъект - объект изменяемой заявки.
//
Процедура ЗаявкаПриИнтерактивнойСменеСостояния (ЗаявкаОбъект) Экспорт
	Если Не ЗаявкаОбъект.ЭтоНовый() Тогда
		Состояние = ЗаявкаОбъект.Состояние;
		Если Состояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена И
			Состояние <> ЗаявкаОбъект.Ссылка.Состояние
		Тогда
			ДобавитьВЗаявкуОтметкуНеобходимостиУказанияПричины(ЗаявкаОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура выполняет установку дополнительного свойства объекта заявки о необходимости указания причины отмены
//
// Параметры:
// 	ЗаявкаОбъект - объект изменяемой заявки.
//
Процедура ДобавитьВЗаявкуОтметкуНеобходимостиУказанияПричины(ЗаявкаОбъект) Экспорт
	ЗаявкаОбъект.ДополнительныеСвойства.Вставить("НужноУказатьПричинуОтмены",Истина);
КонецПроцедуры

Процедура ОтменитьЗаявкуСервер(СтруктураПричиныОтмены, Заявка, СостояниеОтмены = Неопределено) Экспорт
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Заявка") Тогда
		ЗаявкаОбъект = Заявка.ПолучитьОбъект()
	Иначе
		ЗаявкаОбъект = Заявка;
	КонецЕсли;
	
	НачатьТранзакцию();
	ЗаявкаОбъект.ОтменитьЗаявку(Ложь, СостояниеОтмены);
	
	Если ТипЗнч(СтруктураПричиныОтмены) = Тип("Структура") Тогда
		Запись = РегистрыСведений.ПричиныОтменыЗаявок.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураПричиныОтмены);
		Запись.Записать(Истина);
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ИнтерактивнаяСменаСостоянияЗаявкиТребуетУказанияПричиныОтмены(Состояние, Заявка) Экспорт 
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Заявка")
		И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗапрашиватьПричинуЗакрытияЗаявок") // Нужно запрашивать причину при отмене.
	Тогда
		ПредыдущееСостояние = ДопСерверныеФункции.ПолучитьРеквизит(Заявка.Ссылка,"Состояние");
		
		Если Состояние <> ПредыдущееСостояние Тогда // Состояние заявки изменилось.
			
			СостоянияЗаявкиОтменена = УправлениеЗаявками.СостоянияЗаявкиОтменена();
			Если СостоянияЗаявкиОтменена.Найти(Состояние) <> Неопределено  // Новое состояние - отмена.
				И СостоянияЗаявкиОтменена.Найти(ПредыдущееСостояние) = Неопределено // Прошлое состояние - не отмена.
			Тогда
				Возврат Истина; // Надо запрашивать причину.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОказаниеУслугПриемПриПроведенииРаспроведенииСменаСостоянияЗаявки(ИсточникСобытия, СобытиеПроведения) Экспорт
	
	Если ЗначениеЗаполнено(ИсточникСобытия.ДокументОснование)
		И ТипЗнч(ИсточникСобытия.ДокументОснование) = Тип("ДокументСсылка.Заявка") 
	Тогда
		ИзменитьСостояниеЗаявкиПоПодчиненнымДокументам(ИсточникСобытия.ДокументОснование, ИсточникСобытия, СобытиеПроведения);
		
		Если ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			Для Каждого СтрокаЗаявки Из ИсточникСобытия.Заявки Цикл
				Если ЗначениеЗаполнено(СтрокаЗаявки.Заявка) Тогда
					ИзменитьСостояниеЗаявкиПоПодчиненнымДокументам(СтрокаЗаявки.Заявка, ИсточникСобытия, СобытиеПроведения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет состояние завки на приём в соответсвии с учетной политикой и наличием подчиненных продаж и приёмов
//
// Параметры:
//  Заявка - ссылка на заявку
// 	СобытиеПроведения - <Булево> - если Истина, то процедура вызывается по событию проведения документа
//  ИсточникСобытия - <ДокументСсылка.ОказаниеУслуг,ДокументСсылка.Прием> - документ, который проводят либо распроводят.
//
Процедура ИзменитьСостояниеЗаявкиПоПодчиненнымДокументам(Заявка, ИсточникСобытия = Неопределено, СобытиеПроведения = Ложь) Экспорт
	
	Если РаботаСКлиентамиПереопределяемый.ЭтоГрупповаяЗаявка(Заявка) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеОплачена	= Справочники.ВидыСостоянийЗаявок.Оплачена;
	СостояниеПринята	= Справочники.ВидыСостоянийЗаявок.Прием;
	СостояниеВыполнена	= Справочники.ВидыСостоянийЗаявок.Выполнена;
	
	ТекущееСостояние	= Заявка.Состояние;
	ТекущийТипВыполнена	= ТекущееСостояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Выполнена;
	СостояниеДляОтката	= Заявка.СостояниеДляОтката;
	
	Если Заявка.Состояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена Тогда
		Возврат;
	КонецЕсли;
	
	Если  Не ЗначениеЗаполнено(СостояниеОплачена) 
		И Не ЗначениеЗаполнено(СостояниеПринята) 
	Тогда
		Возврат;
	КонецЕсли;
	
	НовоеСостояние = Неопределено;
	
	Если СобытиеПроведения И ИсточникСобытия <> Неопределено Тогда
		
		Если ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			ЕстьОказанияУслуг = ЗначениеЗаполнено(СостояниеОплачена);
			ЕстьПриемы		  = ЗначениеЗаполнено(СостояниеПринята) И ЗаявкаИмеетПриемы(Заявка);
			
		ИначеЕсли ТипЗнч(ИсточникСобытия) = Тип("ДокументСсылка.Прием") Тогда
			ЕстьОказанияУслуг = ЗначениеЗаполнено(СостояниеОплачена) И ЗаявкаИмеетПродажи(Заявка);
			ЕстьПриемы		  = ЗначениеЗаполнено(СостояниеПринята);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ЕстьОказанияУслуг = ЗначениеЗаполнено(СостояниеОплачена)И ЗаявкаИмеетПродажи(Заявка, ИсточникСобытия);
		ЕстьПриемы		  = ЗначениеЗаполнено(СостояниеПринята) И ЗаявкаИмеетПриемы(Заявка, ИсточникСобытия);
	КонецЕсли;
	
	Если ЕстьОказанияУслуг И ЕстьПриемы Тогда
		
		НовоеСостояние = ?(ЗначениеЗаполнено(СостояниеВыполнена), СостояниеВыполнена, СостояниеПринята);
		
	ИначеЕсли ЕстьОказанияУслуг И Не ЕстьПриемы Тогда
		
		НовоеСостояние = СостояниеОплачена;
		
	ИначеЕсли Не ЕстьОказанияУслуг И ЕстьПриемы Тогда
		
		НовоеСостояние = СостояниеПринята;
		
	ИначеЕсли ЗначениеЗаполнено(СостояниеДляОтката) Тогда
		// Нет продажи, нет приёма
		Если (ЗначениеЗаполнено(СостояниеОплачена) И ТекущееСостояние = СостояниеОплачена)
			Или (ЗначениеЗаполнено(СостояниеПринята)  И ТекущееСостояние = СостояниеПринята)
		Тогда
			НовоеСостояние = СостояниеДляОтката;
		КонецЕсли;
	КонецЕсли;
	
	// Если заявка в пользовательском состоянии с типом Выполнена,
	// то не замещать его на предопределенное состояние выполнения.
	Если ТекущийТипВыполнена
		И (ЕстьОказанияУслуг Или ЕстьПриемы)
	Тогда
		НовоеСостояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеСостояние) Тогда
		
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		Если ЗаявкаОбъект <> Неопределено Тогда
			ЗаявкаОбъект.Состояние = НовоеСостояние;
			ЗаявкаОбъект.ОбменДанными.Загрузка = Истина;
			ЗаявкаОбъект.мНеДелатьПроверокПриЗаписи = Истина;
			ЗаявкаОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			ЗаявкаОбъект.ДополнительныеСвойства.Вставить("НеПроверятьГраницуЗапретаИзмененияДанных", Истина);
			ЗаявкаОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаявкаИмеетПродажи(Заявка, ПродажаИсключение = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОказаниеУслуг.Ссылка
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.ДокументОснование = &Заявка
	|	И ОказаниеУслуг.Проведен
	|	И ОказаниеУслуг.Ссылка <> &ПродажаИсключение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОказаниеУслугЗаявки.Ссылка
	|ИЗ
	|	Документ.ОказаниеУслуг.Заявки КАК ОказаниеУслугЗаявки
	|ГДЕ
	|	ОказаниеУслугЗаявки.Заявка = &Заявка
	|	И ОказаниеУслугЗаявки.Ссылка <> &ПродажаИсключение
	|	И ОказаниеУслугЗаявки.Ссылка.Проведен"
	;
	
	Запрос.УстановитьПараметр("Заявка",Заявка);
	Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту);
	Запрос.УстановитьПараметр("ПродажаИсключение",ПродажаИсключение);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЗаявкаИмеетПриемы(Заявка, ПриемИсключение = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Прием.Ссылка
	|ИЗ
	|	Документ.Прием КАК Прием
	|ГДЕ
	|	Прием.ДокументОснование = &Заявка
	|	И Прием.Проведен
	|	И Прием.Ссылка <> &ПриемИсключение"
	;
	
	Запрос.УстановитьПараметр("Заявка",Заявка);
	Запрос.УстановитьПараметр("ПриемИсключение",ПриемИсключение);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьУчастниковМоделиРасписания(МодельРасписания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МодельРасписания", МодельРасписания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Субъекты.Субъект
	|ИЗ
	|	(ВЫБРАТЬ
	|		МоделиРасписанияСотрудники.Сотрудник КАК Субъект,
	|		МоделиРасписанияСотрудники.НомерСтроки КАК НомерСтроки,
	|		1 КАК ПорядокПоТипу
	|	ИЗ
	|		Справочник.МоделиРасписания.Сотрудники КАК МоделиРасписанияСотрудники
	|	ГДЕ
	|		МоделиРасписанияСотрудники.Ссылка В(&МодельРасписания)
	|		И МоделиРасписанияСотрудники.Сотрудник.УчаствуетВКалендарномПланировании
	|		И НЕ МоделиРасписанияСотрудники.Сотрудник.Архив
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МоделиРасписанияКабинеты.Кабинет,
	|		МоделиРасписанияКабинеты.НомерСтроки,
	|		2
	|	ИЗ
	|		Справочник.МоделиРасписания.Кабинеты КАК МоделиРасписанияКабинеты
	|	ГДЕ
	|		МоделиРасписанияКабинеты.Ссылка В(&МодельРасписания)
	|		И МоделиРасписанияКабинеты.Кабинет.УчаствуетВКалендарномПланировании
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СотрудникиСпециализации.Ссылка,
	|		NULL,
	|		3
	|	ИЗ
	|		Справочник.МоделиРасписания.Специализации КАК МоделиРасписанияСпециализации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники.Специализации КАК СотрудникиСпециализации
	|			ПО МоделиРасписанияСпециализации.Специализация = СотрудникиСпециализации.Специализация
	|				И (МоделиРасписанияСпециализации.Ссылка В (&МодельРасписания))
	|	ГДЕ
	|		СотрудникиСпециализации.Ссылка.УчаствуетВКалендарномПланировании
	|		И НЕ СотрудникиСпециализации.Ссылка.Архив) КАК Субъекты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Субъекты.ПорядокПоТипу,
	|	Субъекты.НомерСтроки"
	;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Субъект"));
	
КонецФункции

Функция ПолучитьУчастниковМоделиРасписанияПоФилиалам(МодельРасписания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МодельРасписания", МодельРасписания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Субъекты.Субъект,
	|	Субъекты.Филиал
	|ИЗ
	|	(ВЫБРАТЬ
	|		МоделиРасписанияСотрудники.Сотрудник КАК Субъект,
	|		МоделиРасписанияСотрудники.НомерСтроки КАК НомерСтроки,
	|		1 КАК ПорядокПоТипу,
	|		МоделиРасписанияСотрудники.Ссылка.Филиал КАК Филиал
	|	ИЗ
	|		Справочник.МоделиРасписания.Сотрудники КАК МоделиРасписанияСотрудники
	|	ГДЕ
	|		МоделиРасписанияСотрудники.Ссылка В(&МодельРасписания)
	|		И МоделиРасписанияСотрудники.Сотрудник.УчаствуетВКалендарномПланировании
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МоделиРасписанияКабинеты.Кабинет,
	|		МоделиРасписанияКабинеты.НомерСтроки,
	|		2,
	|		МоделиРасписанияКабинеты.Ссылка.Филиал
	|	ИЗ
	|		Справочник.МоделиРасписания.Кабинеты КАК МоделиРасписанияКабинеты
	|	ГДЕ
	|		МоделиРасписанияКабинеты.Ссылка В(&МодельРасписания)
	|		И МоделиРасписанияКабинеты.Кабинет.УчаствуетВКалендарномПланировании
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СотрудникиСпециализации.Ссылка,
	|		NULL,
	|		3,
	|		МоделиРасписанияСпециализации.Ссылка.Филиал
	|	ИЗ
	|		Справочник.МоделиРасписания.Специализации КАК МоделиРасписанияСпециализации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники.Специализации КАК СотрудникиСпециализации
	|			ПО МоделиРасписанияСпециализации.Специализация = СотрудникиСпециализации.Специализация
	|				И (МоделиРасписанияСпециализации.Ссылка В (&МодельРасписания))
	|	ГДЕ
	|		СотрудникиСпециализации.Ссылка.УчаствуетВКалендарномПланировании) КАК Субъекты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Субъекты.ПорядокПоТипу,
	|	Субъекты.НомерСтроки"
	;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультат.Свернуть("Субъект, Филиал");
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьМоделиРасписанияПоСпециализации(Специализация, Филиал = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Специализация", Специализация);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МоделиРасписанияСпециализации.Ссылка
	|ИЗ
	|	Справочник.МоделиРасписания.Специализации КАК МоделиРасписанияСпециализации
	|ГДЕ
	|	МоделиРасписанияСпециализации.Специализация = &Специализация
	|	И (МоделиРасписанияСпециализации.Ссылка.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ &Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ МоделиРасписанияСпециализации.Ссылка.Филиал = &Филиал)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоделиРасписанияСпециализации.Ссылка.Наименование"
	;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Для указанных сотрудников и номенклатуры возвращает таблицу со значениями нормативной продожительности.
// Учитывается индивидуальная продолжительность номенклатуры, если она задана для сотрудника.
// Таблица содержит колонки: Сотрудник, Номенклатура, Продолжительность (Число, количество секунд).
//
// Параметры:
//  Сотрудники	 - СправочникСсылка.Сотрудники, Массив - сотрудник или массив сотрудников.
//  Номенклатура - СправочникСсылка.Номенклатура, Массив - номенклатура или массив номенклатур.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьНормативныеПродолжительностиУслуг(Знач Сотрудники, Номенклатура) Экспорт
	
	ТаблицаСотрудники = Новый ТаблицаЗначений;
	ТаблицаСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Если ТипЗнч(Сотрудники) = Тип("Массив") Тогда
		Для Каждого ЭлементСотрудник Из Сотрудники Цикл
			ТаблицаСотрудники.Добавить().Сотрудник = ЭлементСотрудник;
		КонецЦикла;
	Иначе
		ТаблицаСотрудники.Добавить().Сотрудник = Сотрудники;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", ТаблицаСотрудники);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Номенклатура.ПродолжительностьЧас,
	|	Номенклатура.ПродолжительностьМин,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ НоменклатураСотрудников
	|ИЗ
	|	Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.Ссылка В (&Номенклатура))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСотрудников.Сотрудник,
	|	НоменклатураСотрудников.Номенклатура,
	|	ВЫБОР
	|		КОГДА ОсновныеУслугиСотрудников.Часы ЕСТЬ NULL 
	|			ТОГДА НоменклатураСотрудников.ПродолжительностьЧас * 3600 + НоменклатураСотрудников.ПродолжительностьМин * 60
	|		ИНАЧЕ ОсновныеУслугиСотрудников.Часы * 3600 + ОсновныеУслугиСотрудников.Минуты * 60
	|	КОНЕЦ КАК Продолжительность
	|ИЗ
	|	НоменклатураСотрудников КАК НоменклатураСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеУслугиСотрудников КАК ОсновныеУслугиСотрудников
	|		ПО НоменклатураСотрудников.Сотрудник = ОсновныеУслугиСотрудников.Сотрудник
	|			И НоменклатураСотрудников.Номенклатура = ОсновныеУслугиСотрудников.Номенклатура
	|			И (ОсновныеУслугиСотрудников.Часы + ОсновныеУслугиСотрудников.Минуты > 0)"
	;
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ДополнительныеКомандыОперацийЖурналаЗаписи() Экспорт
	
	МассивОписанийКоманд = Новый Массив;
	
	РаботаСДокументамиСерверПереопределяемый.ДополнительныеКомандыОперацийЖурналаЗаписи(МассивОписанийКоманд);
	
	Возврат МассивОписанийКоманд;
	
КонецФункции

#КонецОбласти
