#Область ПрограммныйИнтерфейс

// Обновляет справочники лабораторий.
//
// Параметры:
//  ОбновитьБезПроверкиДаты	 - Булево 
// 
// Возвращаемое значение:
//  Булево - Истина, если были изменения в справочниках. 
//
Функция ОбновитьСправочники(ОбновитьБезПроверкиДаты = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лаборатории.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Лаборатории КАК Лаборатории
		|ГДЕ
		|	Лаборатории.ВнешняяЛаборатория = &ВнешняяЛаборатория";
	
	Запрос.УстановитьПараметр("ВнешняяЛаборатория", Перечисления.ВнешниеЛаборатории.Гемотест);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СообщениеОбОшибке = "";
		ОбновитьСправочникиЛаборатории(ВыборкаДетальныеЗаписи.Ссылка, СообщениеОбОшибке); 
	КонецЦикла;
	    
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьСправочникиЛаборатории(Лаборатория, СообщенияОбОшибках)
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если Не НастройкиВзаимодействия.Используется Тогда
		Возврат;	
	КонецЕсли;
	ПараметрыХэша = Новый Массив;
	ПараметрыХэша.Добавить(НастройкиВзаимодействия.contractor);
	ПараметрыХэша.Добавить(НастройкиВзаимодействия.Соль);
	СтруктураДляПередачи = Новый Структура;
	СтруктураДляПередачи.Вставить("ПараметрыХэша",ПараметрыХэша);
	СтруктураДляПередачи.Вставить("НастройкиВзаимодействия", НастройкиВзаимодействия); 
	СтруктураДляПередачи.Вставить("Запрос", "get_directory");	
	ОбменССерверомГемотест(СтруктураДляПередачи, Новый Структура);
	
	ОпределитьИсключенныеИсследования(Лаборатория);
	
КонецПроцедуры
	
Функция ОбменССерверомГемотест(СтруктураНастроек, ДанныеДляПередачиНаСервер = Неопределено)
	
	ХешированиеДанных = Новый ХешированиеДанных (ХешФункция.SHA1);
	Если СтруктураНастроек.Свойство("ПараметрыХэша") И СтруктураНастроек.ПараметрыХэша.Количество()<>0 Тогда
		Для Индекс = 0 По СтруктураНастроек.ПараметрыХэша.Количество()-1 Цикл
			ХешированиеДанных.Добавить(СтруктураНастроек.ПараметрыХэша[Индекс]);
		КонецЦикла;
		Хэш = НРег(ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма));
	КонецЕсли;
	МестоположениеWSDL = "https://api.gemotest.ru/odoctor.wsdl";
	WSОпределение = Новый WSОпределения(МестоположениеWSDL);
	ПространствоИмен = "urn:OdoctorControllerwsdl";
	НомерЗаказа = СтруктураНастроек.ПараметрыХэша[0];
	Если  СтруктураНастроек.Запрос = "get_directory" Тогда
		//ЗагрузитьЛокализацию (Данные); 
		ЗагрузитьБиоматериалы (СтруктураНастроек);
		ЗагрузитьТранспортныйСправочник (СтруктураНастроек);
		ИмяФайлаЗапроса = СоздатьФайлСправочник(WSОпределение, СтруктураНастроек.НастройкиВзаимодействия, Хэш, СтруктураНастроек.Запрос, ПространствоИмен);
		ИмяФайлаОтвета = ОтправитьЗапросСПараметрами(СтруктураНастроек.Запрос,ИмяФайлаЗапроса,СтруктураНастроек.НастройкиВзаимодействия);
		//ЗагрузитьГруппыАнализов(СтруктураНастроек);
		ЗагрузитьАнализы(ИмяФайлаОтвета, WSОпределение, СтруктураНастроек.НастройкиВзаимодействия);
		//ЗагрузитьМаркетинговыйКомплекс (WSОпределение,Данные.Настройки, Хэш, ПространствоИмен);
		ЗагрузитьДополнительныеИследования(WSОпределение,СтруктураНастроек.НастройкиВзаимодействия, Хэш, ПространствоИмен);
		//ЗагрузитьСервисПараметр (Данные);
		
	ИначеЕсли  СтруктураНастроек.Запрос = "create_order" Тогда
		ИмяФайлаЗапроса = СоздатьФайлОтправкиЗаказа(WSОпределение,СтруктураНастроек.НастройкиВзаимодействия, Хэш, СтруктураНастроек.Запрос, ПространствоИмен, ДанныеДляПередачиНаСервер, НомерЗаказа);
		Если ИмяФайлаЗапроса = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ИмяФайлаОтвета = ОтправитьЗапросСПараметрами(СтруктураНастроек.Запрос,ИмяФайлаЗапроса,СтруктураНастроек.НастройкиВзаимодействия);
		Если ИмяФайлаОтвета = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ПолучитьДанныеЗаявки(ИмяФайлаОтвета);			
		
	ИначеЕсли СтруктураНастроек.Запрос = "get_analysis_result" Тогда
		ИмяФайлаЗапроса = СоздатьФайлЗапросРезультата(WSОпределение,СтруктураНастроек.Настройки, Хэш, СтруктураНастроек.Запрос, ПространствоИмен, ДанныеДляПередачиНаСервер.Номер);	
		ИмяФайлаОтвета = ОтправитьЗапросСПараметрами(СтруктураНастроек.Запрос,ИмяФайлаЗапроса, СтруктураНастроек.Настройки);
		Если ИмяФайлаОтвета = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ЗаписатьДанныеРезультатов(ИмяФайлаОтвета,СтруктураНастроек.Настройки);
		
	ИначеЕсли СтруктураНастроек.Запрос = "status_request" Тогда
		ИмяФайлаЗапроса = СоздатьФайлЗапросСтатусаЗаказа(WSОпределение,СтруктураНастроек.НастройкиВзаимодействия, Хэш, СтруктураНастроек.Запрос, ПространствоИмен, СтруктураНастроек.ПараметрыХэша[0]);	
		ИмяФайлаОтвета = ОтправитьЗапросСПараметрами(СтруктураНастроек.Запрос,ИмяФайлаЗапроса, СтруктураНастроек.НастройкиВзаимодействия);
		Если ИмяФайлаОтвета = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ЗаписатьДанныеСтатусаЗаказа(ИмяФайлаОтвета,СтруктураНастроек.НастройкиВзаимодействия, НомерЗаказа);
	КонецЕсли;
	
КонецФункции

#Область ЗагрузкаСправочников

Процедура ЗагрузитьБиоматериалы (СтруктураНастроек)
	  Строка = "<soapenv:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:OdoctorControllerwsdl"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <urn:get_biomaterials soapenv:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/""/>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
	  
	 Заголовки = Новый Соответствие;
	Заголовки.Вставить("content-type","text/xml;charset=UTF-8");
	Заголовки.Вставить("Host","api.gemotest.ru");
	Заголовки.Вставить("SOAPAction","""urn:OdoctorControllerwsdl#get_localization""");  //++
	Заголовки.Вставить("Connection","Keep-Alive");
	Сервис = "/odoctor/odoctor/index/ws/1";
	
	Попытка
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTPS");
		Соединение = Новый HTTPСоединение (СтруктураНастроек.НастройкиВзаимодействия.АдресПодключения,,СтруктураНастроек.НастройкиВзаимодействия.Логин,
		СтруктураНастроек.НастройкиВзаимодействия.Пароль,ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL());

	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание);
		//Сообщить("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".XML");	
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(Сервис,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(Строка);
		Результат  = Соединение.ОтправитьДляОбработки(HTTPЗапрос,ИмяФайлаОтвета);
		Соединение = Неопределено;
		Если Результат.КодСостояния > 299 Тогда
			ОбщегоНазначения.СообщитьПользователю("Код состояния " + Результат.КодСостояния + ". Проверка не выполнена");
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		//Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
		Фабрика =  Новый ФабрикаXDTO;
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось загрузить правочник биоматерилов");
		Возврат;	
	КонецПопытки;	
	НаборЗаписей = РегистрыСведений.Гемотест_Биоматериалы.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	Для каждого Элемент Из ОбъектXDTO.Body.get_biomaterialsResponse.return.item  Цикл	
		Запись = РегистрыСведений.Гемотест_Биоматериалы.СоздатьМенеджерЗаписи();
		Запись.biomaterial_id = Элемент.id;
		Запись.Наименование = Элемент.name;
		Запись.Архив = Элемент.archive;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьТранспортныйСправочник (СтруктураНастроек)
	
	Строка = "<soapenv:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:OdoctorControllerwsdl"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <urn:get_transport soapenv:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/""/>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
	  
	 Заголовки = Новый Соответствие;
	Заголовки.Вставить("content-type","text/xml;charset=UTF-8");
	Заголовки.Вставить("Host","api.gemotest.ru");
	Заголовки.Вставить("SOAPAction","""urn:OdoctorControllerwsdl#get_localization""");  //++
	Заголовки.Вставить("Connection","Keep-Alive");
	Сервис = "/odoctor/odoctor/index/ws/1";
	 	
	Попытка
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTPS");
		Соединение = Новый HTTPСоединение (СтруктураНастроек.НастройкиВзаимодействия.АдресПодключения,,СтруктураНастроек.НастройкиВзаимодействия.Логин,
		СтруктураНастроек.НастройкиВзаимодействия.Пароль,ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL());

	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание);
		//Сообщить("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".XML");	
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(Сервис,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(Строка);
		Результат  = Соединение.ОтправитьДляОбработки(HTTPЗапрос,ИмяФайлаОтвета);
		Соединение = Неопределено;
		Если Результат.КодСостояния > 299 Тогда
			ОбщегоНазначения.СообщитьПользователю("Код состояния " + Результат.КодСостояния + ". Проверка не выполнена");
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось установить соединение");
		//Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
	Фабрика =  Новый ФабрикаXDTO;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	НаборЗаписей = РегистрыСведений.Гемотест_ВидыКонтейнеров.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	Для каждого Элемент Из ОбъектXDTO.Body.get_transportResponse.return.item  Цикл
			Запись = РегистрыСведений.Гемотест_ВидыКонтейнеров.СоздатьМенеджерЗаписи();
			Запись.transport_id = Элемент.id;
			Запись.Наименование = Элемент.name;
			Запись.Архив = Элемент.archive;
			Запись.Записать();
	КонецЦикла;
 	
КонецПроцедуры

Процедура ЗагрузитьДополнительныеИследования (WSОпределение,Настройки, Хэш, ПространствоИмен)
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
	
	get_services_supplementals =  WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "request_get_services_supplementals");
	get_services_supplementals.contractor = Настройки.contractor;
	get_services_supplementals.hash = Хэш;	
	Запрос =  "get_services_supplementals";
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".XML");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаЗапроса,ПараметрыЗаписиXML); 
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Envelope", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Body", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента(Запрос,ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("urn",ПространствоИмен);
	WSОпределение.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,get_services_supplementals, "params");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	ИмяФайлаОтвета= ОтправитьЗапросСПараметрами(Запрос, ИмяФайлаЗапроса, Настройки);
	Попытка	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
		Фабрика =  Новый ФабрикаXDTO;
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось загрузить доп. параметры исследований");	
		Возврат;	
	КонецПопытки;
	
	ЛабораторияСервер.ЗагрузитьПараметрыЗабораИзВнутреннихМакетов(Перечисления.ВнешниеЛаборатории.Гемотест, Ложь); // Только если в базе еще нет параметров (Ложь).
	
	НовыйПВХПараметр = ПланыВидовХарактеристик.ПараметрыЗабораАнализов;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.get_services_supplementalsResponse.return, "supplementals")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.get_services_supplementalsResponse.return.supplementals, "item")
	Тогда
		НаборЗаписей = РегистрыСведений.Гемотест_ДополнительныеТесты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Лаборатория.Установить(Настройки.Лаборатория);
		НаборЗаписей.Записать();
		ТаблицаПараметров = Новый ТаблицаЗначений;
		ТаблицаПараметров.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметров.Колонки.Добавить("test_id", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметров.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
		ТаблицаПараметров.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
		
		Для каждого Строка из ОбъектXDTO.Body.get_services_supplementalsResponse.return.supplementals.item Цикл
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.Наименование = Строка.name;
			НоваяСтрока.test_id = Строка.test_id;
			Массив = СтрРазделить(Строка.value, ";", true);
			Если Массив.Количество() > 1 Тогда
				НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
			Иначе
				НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("Строка");
			КонецЕсли;
			НоваяСтрока.Значение  = Строка.value;
			НоваяЗапись = РегистрыСведений.Гемотест_ДополнительныеТесты.СоздатьМенеджерЗаписи();
			НоваяЗапись.Лаборатория = Настройки.Лаборатория; 
			НоваяЗапись.ID_Анализ = Строка.parent_id;
			НоваяЗапись.ID_Теста = Строка.test_id;
			НоваяЗапись.Наименование = Строка.name;
			НоваяЗапись.Обязательный = Строка.required;
			НоваяЗапись.Записать(Истина);
		КонецЦикла;		
		
		// Добавляем отдельный параметр, отсутствующий в справочниках, для заполнения общего параметра/тэга <doctor> в заказе.
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.Наименование = "Направивший врач (общий для всех анализов Гемотест в заказе)";
		НоваяСтрока.test_id = ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию();
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("Строка");
		
		ТаблицаПараметров.Свернуть("test_id, типзначения, значение, наименование");
		
		Для Каждого Элемент Из ТаблицаПараметров Цикл
			СсылкаПВХПараметр = ЛабораторияСервер.ПолучитьСсылкуПВХЗаборАнализа(Элемент.test_id, ,Элемент.ТипЗначения, Перечисления.ВнешниеЛаборатории.Гемотест).Ссылка;
			Массив = СтрРазделить(Элемент.Значение, ";", true);
			Если СсылкаПВХПараметр = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.ПустаяСсылка() Тогда
				ПВХПараметрБезТипа = ЛабораторияСервер.ПолучитьСсылкуПВХЗаборАнализа(Элемент.test_id, , , Перечисления.ВнешниеЛаборатории.Гемотест);
				Если ПВХПараметрБезТипа.Ссылка = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.ПустаяСсылка() Тогда 
					НовыйПВХПараметр = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.СоздатьЭлемент();
					НовыйПВХПараметр.Наименование = Элемент.Наименование;
					НовыйПВХПараметр.ТипЗначения = Элемент.ТипЗначения;
					НоваяСтрокаID = НовыйПВХПараметр.IDПараметров.Добавить();
					НоваяСтрокаID.ID = Элемент.test_id;
					НоваяСтрокаID.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Гемотест;
					НовыйПВХПараметр.Записать();
					Если Элемент.ТипЗначения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыЗабораАнализов") Тогда 
						Для Каждого Элемент Из Массив Цикл
							НовоеЗначениеЗабора = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
							НовоеЗначениеЗабора.Владелец = ПВХПараметрБезТипа.Ссылка;
							НовоеЗначениеЗабора.Наименование = Элемент;
							НовоеЗначениеЗабора.Записать();
						КонецЦикла
					КонецЕсли;
					Продолжить;
				Иначе
					ПВХПараметрБезТипа = ПВХПараметрБезТипа.Ссылка.ПолучитьОбъект();
					ПВХПараметрБезТипа.ТипЗначения = Элемент.ТипЗначения;
					ПВХПараметрБезТипа.Записать();
					Если ПВХПараметрБезТипа.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
						ПВХПараметрБезТипа.ТипЗначения = ОписаниеТипаСтрока;
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ЗначенияПараметровЗабора.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ЗначенияПараметровЗабора КАК ЗначенияПараметровЗабора
						|ГДЕ
						|	ЗначенияПараметровЗабора.Владелец = &Владелец";
						
						Запрос.УстановитьПараметр("Владелец", ПВХПараметрБезТипа.Ссылка);	
						ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							Объект.ПометкаУдаления = Истина;
							Объект.Записать();
						КонецЦикла;
						Продолжить;
					Иначе
						Для Каждого Элемент Из Массив Цикл
							НовоеЗначениеЗабора = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
							НовоеЗначениеЗабора.Владелец = ПВХПараметрБезТипа.Ссылка;
							НовоеЗначениеЗабора.Наименование = Элемент;
							НовоеЗначениеЗабора.Записать();
						КонецЦикла;
					КонецЕсли
				КонецЕсли;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияПараметровЗабора.Ссылка КАК Ссылка,
				|	ЗначенияПараметровЗабора.Наименование КАК Наименование
				|ИЗ
				|	Справочник.ЗначенияПараметровЗабора КАК ЗначенияПараметровЗабора
				|ГДЕ
				|	ЗначенияПараметровЗабора.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец",  СсылкаПВХПараметр);
				
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ИндексЭлемента = Массив.Найти(ВыборкаДетальныеЗаписи.Наименование);
					Если ИндексЭлемента = Неопределено Тогда
						Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						Объект.ПометкаУдаления = Истина;
						Объект.Записать();
					Иначе
						Массив.Удалить(ИндексЭлемента);
					КонецЕсли;
				КонецЦикла;
				Если Элемент.ТипЗначения <> Строка Тогда
					Если Массив.Количество() > 0 Тогда
						Для Каждого Элемент Из Массив Цикл
							НовоеЗначениеЗабора = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
							НовоеЗначениеЗабора.Владелец = СсылкаПВХПараметр;
							НовоеЗначениеЗабора.Наименование = Элемент;
							НовоеЗначениеЗабора.Записать();
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЛабораторияСервер.ЗагрузитьСведенияОПериодеПодстановкиЗначенийПараметровЗаполнения("Гемотест");
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьГруппыАнализов(НастройкиВзаимодействия)
	Строка = "<soapenv:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:OdoctorControllerwsdl"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <urn:get_service_group soapenv:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/""/>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
	   //++

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("content-type","text/xml;charset=UTF-8");
	Заголовки.Вставить("Host","api.gemotest.ru");
	Заголовки.Вставить("SOAPAction","""urn:OdoctorControllerwsdl#get_service_group""");  //++

	Заголовки.Вставить("Connection","Keep-Alive");
	Сервис = "/odoctor/odoctor/index/ws/1";
	
	
	Попытка
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTPS");
		Соединение = Новый HTTPСоединение(НастройкиВзаимодействия.АдресПодключения,,НастройкиВзаимодействия.Логин,
		НастройкиВзаимодействия.Пароль,ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL());

	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание);
		//Сообщить("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".XML");	
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(Сервис,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(Строка);
		Результат  = Соединение.ОтправитьДляОбработки(HTTPЗапрос,ИмяФайлаОтвета);
		Соединение = Неопределено;
		Если Результат.КодСостояния > 299 Тогда
			ОбщегоНазначения.СообщитьПользователю("Код состояния " + Результат.КодСостояния + ". Проверка не выполнена");
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		//Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
	Фабрика =  Новый ФабрикаXDTO;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	ТаблицаГрупп.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаГрупп.Колонки.Добавить("ГруппаНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТаблицаГрупп.Колонки.Добавить("parent_id", Новый ОписаниеТипов("Строка"));
	Для каждого Элемент Из ОбъектXDTO.Body.get_service_groupResponse.return.item  Цикл
		Если Элемент.archive = 0 Тогда
				Строка = ТаблицаГрупп.Добавить();
				Строка.ID = Элемент.ID;
				Строка.Наименование = Элемент.name;
				Строка.parent_id = Элемент.parent_id;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаГрупп; 
КонецФункции

Процедура ЗагрузитьАнализы(ИмяФайлаОтвета, WSОпределение, Настройки)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
	Фабрика =  Новый ФабрикаXDTO;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);	
	НаборЗаписей = РегистрыСведений.Гемотест_Анализы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Настройки.Лаборатория);
	НаборЗаписей.Записать();
	
	Для Каждого Элемент Из ОбъектXDTO.Body.get_directoryResponse.return.services.item Цикл
		
		Если Элемент.service_type = 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Заблокирован = Элемент.is_blocked;
		Исключение
			Заблокирован = Ложь;
		КонецПопытки;
		
		Если Заблокирован Тогда
			Продолжить;
		КонецЕсли;
			
		Запись = РегистрыСведений.Гемотест_Анализы.СоздатьМенеджерЗаписи();
		Запись.id = Элемент.id;
		ЗАпись.Лаборатория = Настройки.Лаборатория;
		Запись.Наименование = Элемент.name;
		Запись.Group_id = Элемент.group_id;
		Запись.Price = Элемент.price;
		Запись.type = Элемент.Type;
		Запись.Код = Элемент.code; 
		Запись.service_type = Элемент.service_type;
		Запись.Записать();
		
	КонецЦикла;	

КонецПроцедуры

Функция СоздатьФайлСправочник (WSОпределение,Настройки, Хэш, Запрос, ПространствоИмен)
	
	service =  WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "service");
	service.contractor = Настройки.contractor;
	service.directory ="1";
	service.hash = Хэш;	
	
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".XML");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаЗапроса,ПараметрыЗаписиXML); 
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Envelope", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Body", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента(Запрос,ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("urn",ПространствоИмен);
	WSОпределение.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,service, "params");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайлаЗапроса;
КонецФункции

Функция ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию()
	
    Возврат "bit_order_doctor";
	
КонецФункции

#КонецОбласти

#Область ЗаборАнализа

// Вид лаборатории запрещает редактирование кода пробы контейнера во всех режимах.
// 
// Возвращаемое значение:
//  Булево.
//
Функция РедактированиеКодаПробыЗапрещено() Экспорт 
	Возврат Истина;
КонецФункции

Процедура ПроверитьЗаполнениеЗабораАнализаПередЗаписью(Знач Объект, РежимЗаписи, Отказ) Экспорт
	
	// Проверка того что список сохраненных исследований Гемотеста не изменен
	Попытка
		СохраненнаяКопияОбъекта = Объект.Ссылка.ПолучитьОбъект();
		ФлагПрерыванияЦикла = Ложь;
		Для Каждого Элемент ИЗ Объект.Контейнеры Цикл
			Если Элемент.Лаборатория.ВнешняяЛаборатория = Перечисления.ВнешниеЛаборатории.Гемотест И ЗначениеЗаполнено(Элемент.УсловияХранения) Тогда	
				Если Объект.Исследования <> СохраненнаяКопияОбъекта.Исследования Тогда
					//ЛабораторииГемотест = Гемотест_Сервер.ПолучитьВсеЛабораторииГемотест();
					ЛабораторииГемотест = ПолучитьЛабораторииСОтправленнойЗаявкой(Объект.Контейнеры); 
					Для Каждого Лаборатория Из ЛабораторииГемотест Цикл
						СохраненныеДанные = СохраненнаяКопияОбъекта.Исследования.НайтиСтроки(Новый Структура("Лаборатория", Лаборатория)); 
						ДанныеПослеИзменения = Объект.Исследования.НайтиСтроки(Новый Структура("Лаборатория", Лаборатория));
						Если СохраненныеДанные.Количество() <> ДанныеПослеИзменения.Количество() Тогда
							ОбщегоНазначения.СообщитьПользователю("Был изменен список исследований " + Лаборатория + 
							" в документе с отправленной заявкой в лабораторию");
							Отказ = Истина;
							ФлагПрерыванияЦикла = Истина;
							Прервать;
						Иначе
							Для Счетчик = 0 По СохраненныеДанные.Количество() - 1 Цикл
								Если НЕ СохраненныеДанные[Счетчик].Номенклатура = ДанныеПослеИзменения[Счетчик].Номенклатура 
									ИЛИ НЕ СохраненныеДанные[Счетчик].Клиент = ДанныеПослеИзменения[Счетчик].Клиент  
								Тогда
									ОбщегоНазначения.СообщитьПользователю("Был изменен список исследований  " + Лаборатория + 
									" или клиент в документе с отправленной заявкой в лабораторию");
									Отказ = Истина;
									ФлагПрерыванияЦикла = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ФлагПрерыванияЦикла Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если ФлагПрерыванияЦикла Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки
	
КонецПроцедуры

Функция ПолучитьЛабораторииСОтправленнойЗаявкой(Контейнеры)
	мЛабораторийСОтправленнойЗаявкой = Новый Массив;
	Для Каждого Элемента ИЗ Контейнеры Цикл
		
		Если Элемента.Лаборатория.ВнешняяЛаборатория = Перечисления.ВнешниеЛаборатории.Гемотест 
			И ЗначениеЗаполнено(Элемента.УсловияХранения)
			И мЛабораторийСОтправленнойЗаявкой.Найти(Элемента.Лаборатория) = Неопределено
		Тогда
			мЛабораторийСОтправленнойЗаявкой.Добавить(Элемента.Лаборатория);
		КонецЕсли;
		
	КонецЦикла;
	Возврат мЛабораторийСОтправленнойЗаявкой;
КонецФункции

#КонецОбласти

#Область СозданиеЗаказа

// Отправить заказ в лабораторию
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура - данные документа для отправки.
// 
// Возвращаемое значение:
//  Строка - результат.
//
Функция ОтправитьЗаказ(Знач Объект, Лаборатория) Экспорт
	
	Если Объект.Исследования.Количество() = 0 Тогда
		Возврат "В документе забора нет исследований";
	КонецЕсли;
	
	НастройкиВзаимодействия = Гемотест_Сервер.ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат "Настройки взаимодействия лаборатории не заполнены";
	ИначеЕсли Не НастройкиВзаимодействия.Используется Тогда
		Возврат "Выключено использование обмена с данной лабораторией";
	КонецЕсли;
	
	Клиент = Объект.Исследования[0].Клиент;
	
	ПараметрыХэша = Новый Массив;
	ПараметрыХэша.Добавить(Строка(Объект.Ссылка.УникальныйИдентификатор()));
	ПараметрыХэша.Добавить(НастройкиВзаимодействия.contractor);
	ПараметрыХэша.Добавить(Клиент.Фамилия);
	ПараметрыХэша.Добавить(Формат(Клиент.ДатаРождения,"ДФ=гггг-ММ-дд"));
	ПараметрыХэша.Добавить(НастройкиВзаимодействия.Соль);
	
	СтруктураДляПередачи = Новый Структура;
	СтруктураДляПередачи.Вставить("ПараметрыХэша",ПараметрыХэша);
	СтруктураДляПередачи.Вставить("НастройкиВзаимодействия",НастройкиВзаимодействия); 
	СтруктураДляПередачи.Вставить("Запрос", "create_order");
	Данные = Новый Структура;
	Данные.Вставить("Клиент", Клиент);
	Данные.Вставить("Ссылка", Объект.Ссылка);
	Данные.Вставить("Лаборатория", Лаборатория);
	Результат = ОбменССерверомГемотест(СтруктураДляПередачи, Данные);
	
	Если Результат = Неопределено Тогда 
		Возврат "Произошла ошибка при создании заказа";
	КонецЕсли;
	Если Результат.КодОшибки = 1 Тогда
		Возврат "Не удалость создать заказ. Текст ошибки: "  + Результат.ТекстОшибки;
	КонецЕсли;
	
	Если Результат.КодОшибки <> 0 Тогда
		Возврат "Не удалость создать заказ. Код ошибки: " + Результат.КодОшибки
				+ ?(Результат.Свойство("ТекстОшибки"), (": " + Результат.ТекстОшибки), "");
	КонецЕсли;
			
	Если Результат.ТаблицаШтрихКодов <> Неопределено Тогда
		
		мШтрихКодов = Новый Массив;
		Для Каждого Элемента ИЗ Результат.ТаблицаШтрихКодов Цикл
			Структура = Новый Структура();
			Для Каждого Свойства Из Элемента.Свойства() Цикл
				Структура.Вставить(Свойства.Имя, Элемента.Получить(Свойства.Имя)); 	
			КонецЦикла;
			мШтрихКодов.Добавить(Структура);
		КонецЦикла;
		
		ВозвращаемаяСтруктура = Новый Структура();
		ВозвращаемаяСтруктура.Вставить("НомерЗаказаВнешнейЛаборатории", Результат.НомерЗаказаВнешнейЛаборатории);
		ВозвращаемаяСтруктура.Вставить("мШтрихКодов", мШтрихКодов);
		Возврат ВозвращаемаяСтруктура;
		
	Иначе
		Возврат "Не удалось создать заказ, так как лабораторией не было назначено контейнеров";
	КонецЕсли;

КонецФункции

Функция СоздатьФайлОтправкиЗаказа(WSОпределение, Настройки, Хэш, ЗапросСоздатьЗаказ, ПространствоИмен, Данные, Номер)
	
	patient = WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "patient");
	patient.surname = Данные.Клиент.Фамилия;
	patient.firstname = Данные.Клиент.Имя;
	patient.middlename = Данные.Клиент.Отчество;
	
	Если Не ЗначениеЗаполнено(Данные.Клиент.ДатаРождения) Тогда
		Сообщить (НСтр("ru='У клиента не указана дата рождения'"));
	Иначе
		patient.birthdate = Данные.Клиент.ДатаРождения;
	КонецЕсли;
	
	Если Данные.Клиент.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		patient.gender = 1;
	ИначеЕсли Данные.Клиент.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		patient.gender = 2;
	Иначе
		patient.gender = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Клиент.ЗаконныйПредставитель) Тогда
		representative = WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "representative");
		Если ТипЗнч(Данные.Клиент.ЗаконныйПредставитель) = Тип("Строка") Тогда
			ФИО = СтрРазделить(Данные.Клиент.ЗаконныйПредставитель, " ");
			representative.surname = ФИО[0];
			Если ФИО.Количество() > 1 Тогда
				representative.firstname = ФИО[1];
			КонецЕсли;
			Если ФИО.Количество() > 2 Тогда
				representative.middlename = ФИО[2];
			КонецЕсли;
		Иначе	
			representative.surname = Данные.Клиент.ЗаконныйПредставитель.Фамилия;
			representative.firstname = Данные.Клиент.ЗаконныйПредставитель.Имя;
			representative.middlename = Данные.Клиент.ЗаконныйПредставитель.Отчество;
		КонецЕсли;	
	КонецЕсли;
	
	АдресEMAIL =  КонтактнаяИнформацияСервер.ПолучитьEMAILАдрес(Данные.Клиент);
	ТелефонСотовый = ПолучитьСотовыйТелефон(Данные.Клиент);
	ТелефонДомашний = ПолучитьДомашнийТелефон (Данные.Клиент); 
	
	informing = WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "informing");
	informing.email = АдресEMAIL;
	informing.mobile_phone = ТелефонСотовый;
	informing.home_phone = ТелефонДомашний; 
	
	Если ЗначениеЗаполнено(ТелефонСотовый) И Настройки.ИнформироватьКлиентовОСтатусеЗаказаПоСМС Тогда
		informing.flag_sms_notifications = Истина;
	КонецЕсли;
	
	АдресФактический = ПолучитьАдрес(Данные.Клиент);
	Паспорт = ПолучитьПаспортныеДанные (Данные.Клиент);
	ДатаВыдачиПаспорта = ПолучитьПаспортныеДанныеДата (Данные.Клиент);
	
	additional_information = WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "additional_information"); 
	additional_information.address = АдресФактический;
	additional_information.snils = Данные.Клиент.СНИЛС;
	additional_information.passport = Паспорт;
	additional_information.passport_issued = ДатаВыдачиПаспорта;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Данные.Ссылка);
	Запрос.УстановитьПараметр("Лаборатория", Данные.Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДействияНадАнализамиИсследования.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НаборНоменклатуры
	|ИЗ
	|	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
	|ГДЕ
	|	ДействияНадАнализамиИсследования.Лаборатория = &Лаборатория
	|	И ДействияНадАнализамиИсследования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАнализов.ID КАК ID,
	|	НаборНоменклатуры.Номенклатура.Наименование КАК name,
	|	"""" КАК biomaterial_id,
	|	"""" КАК localization_id,
	|	"""" КАК transport_id
	|ИЗ
	|	НаборНоменклатуры КАК НаборНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ПО (НоменклатураАнализов.Номенклатура = НаборНоменклатуры.Номенклатура)
	|			И (НоменклатураАнализов.Лаборатория = &Лаборатория
	|				ИЛИ НоменклатураАнализов.Лаборатория ЕСТЬ NULL
	|					И НоменклатураАнализов.ID ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияНадАнализамиПараметрыЗабора.Параметр КАК Параметр,
	|	ДействияНадАнализамиПараметрыЗабора.Значение КАК Значение
	|ПОМЕСТИТЬ СписокДополнительныхПараметров
	|ИЗ
	|	Документ.ДействияНадАнализами.ПараметрыЗабора КАК ДействияНадАнализамиПараметрыЗабора
	|ГДЕ
	|	ДействияНадАнализамиПараметрыЗабора.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыЗабораАнализовIDПараметров.ID КАК ID,
	|	СписокДополнительныхПараметров.Значение КАК Значение,
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	СписокДополнительныхПараметров КАК СписокДополнительныхПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
	|		ПО СписокДополнительныхПараметров.Параметр = ПараметрыЗабораАнализовIDПараметров.Ссылка
	|			И (ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Гемотест))"
	;
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаАнализы = ПакетЗапроса[1].Выгрузить();
	ТаблицаПараметрыЗабора = ПакетЗапроса[3].Выгрузить();
	
	ИдентификаторНаправившегоВрача = ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию();
	НаправившийВрач = "";
	МассивПараметрыЗабора = Новый Массив;
	
	// Выделяем из параметров забора отдельный параметр для заполнения общего тэга <doctor> в заказе (Направивший врач).
	Для Каждого СтрТаблица Из ТаблицаПараметрыЗабора Цикл
		Если Не ПустаяСтрока(СтрТаблица.ID) Тогда
			Если СтрТаблица.ID = ИдентификаторНаправившегоВрача Тогда
				НаправившийВрач = СтрТаблица.Значение;
			Иначе
				МассивПараметрыЗабора.Добавить(СтрТаблица);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".XML");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаЗапроса,ПараметрыЗаписиXML); 
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Envelope", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Body", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента(ЗапросСоздатьЗаказ, ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("urn", ПространствоИмен);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("params");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ext_num");
	ЗаписьXML.ЗаписатьТекст(номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("order_num");
	ЗаписьXML.ЗаписатьТекст("");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("doctor");
	ЗаписьXML.ЗаписатьТекст(?(Не ПустаяСтрока(НаправившийВрач), НаправившийВрач, ""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("contractor");
	ЗаписьXML.ЗаписатьТекст(Настройки.contractor);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("hash");
	ЗаписьXML.ЗаписатьТекст(Хэш);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("comment");
	ЗаписьXML.ЗаписатьТекст(Данные.Ссылка.Комментарий);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("registered");
	ЗаписьXML.ЗаписатьТекст("true");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("order_status");
	ЗаписьXML.ЗаписатьТекст("1");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	WSОпределение.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,patient, "patient");
	WSОпределение.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,informing, "informing");

	ЗаписьXML.ЗаписатьНачалоЭлемента("services");
	ТекстОшибки = "";
	Для Каждого СтрТаблицаАнализы Из ТаблицаАнализы Цикл
		services = WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "services");
		Если ЗначениеЗаполнено(СтрТаблицаАнализы.id) Тогда
			ЗаполнитьЗначенияСвойств(services, СтрТаблицаАнализы);
			WSОпределение.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, services, "item");
			Попытка
				services.id.Добавить(СтрТаблицаАнализы.id);
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + ", ", "") + СтрТаблицаАнализы.name;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСтроки = НСтр("ru='Заказ не отправлен, следующие услуги недопустны для данной лаборатории: %1. Попробуйте обновить справочник услуг Лаборатории'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ТекстОшибки));
		Возврат Неопределено;
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("services_supplementals");
	
	Для Каждого СтрПараметрыЗабора Из МассивПараметрыЗабора Цикл
		services_supplementals = WSОпределение.ФабрикаXDTO.Создать(ПространствоИмен, "services_supplementals");
		services_supplementals.id = СтрПараметрыЗабора.ID;
		services_supplementals.name = " ";
		Если ТипЗнч(СтрПараметрыЗабора.Значение) = Тип("СправочникСсылка.ЗначенияПараметровЗабора") Тогда  
			services_supplementals.value = СтрПараметрыЗабора.Значение.Наименование;
		Иначе
			services_supplementals.value = СтрПараметрыЗабора.Значение;
		КонецЕсли;
		WSОпределение.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,services_supplementals, "item");
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайлаЗапроса;
	
КонецФункции

Функция ПолучитьСотовыйТелефон(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Клиент
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотовый)";
	Запрос.УстановитьПараметр("Клиент", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерТелефона = Выборка.Представление;
		
	Иначе
		НомерТелефона = "";
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");	
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Если СтрДлина(НомерТелефона) = 10 Тогда
		НомерТелефона = "7" + НомерТелефона;
	ИначеЕсли СтрДлина(НомерТелефона) = 11 Тогда
		НомерТелефона = "7" + Прав(НомерТелефона, 10);
	Иначе
		НомерТелефона = "";
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

Функция ПолучитьДомашнийТелефон(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Клиент
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонДомашний)";
	Запрос.УстановитьПараметр("Клиент", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерТелефона = Выборка.Представление;
		
	Иначе
		НомерТелефона = "";
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");	
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Если СтрДлина(НомерТелефона) = 10 Тогда
		НомерТелефона = "7" + НомерТелефона;
	ИначеЕсли СтрДлина(НомерТелефона) = 11 Тогда
		НомерТелефона = "7" + Прав(НомерТелефона, 10);
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

Функция ПолучитьАдрес(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Клиент
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресФактический)";
	
	Запрос.УстановитьПараметр("Клиент", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Адрес = Выборка.Представление;
		
	Иначе
		Адрес = "";
	КонецЕсли;
		
	Возврат Адрес;
	
КонецФункции

Функция ПолучитьПаспортныеДанные(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПаспортныеДанные.ДокументСерия Как Серия,
	|   ПаспортныеДанные.ДокументНомер КАК Номер,
	|   ПаспортныеДанные.ДокументКемВыдан КАК КемВыдан,
	|   ПаспортныеДанные.ДокументКодПодразделения КАК КодПодразделения 
	|ИЗ
	|	РегистрСведений.ПаспортныеДанные КАК ПаспортныеДанные
	|ГДЕ
	|	ПаспортныеДанные.ФизЛицо = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Паспорт = ("Серия: " + Выборка.Серия + " Номер: " +Выборка.Номер+ " Кем выдан: " + Выборка.КемВыдан + " Код подразделения: " + Выборка.КодПодразделения);
		
		
		
		
	Иначе
		Паспорт = "";
	КонецЕсли;
		
	Возврат Паспорт;
	
	
	
КонецФункции

Функция ПолучитьПаспортныеДанныеДата(Объект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПаспортныеДанные.ДокументДатаВыдачи КАК ДатаВыдачи
	|ИЗ
	|	РегистрСведений.ПаспортныеДанные КАК ПаспортныеДанные
	|ГДЕ
	|	ПаспортныеДанные.ФизЛицо = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДатаВыдачи = Выборка.ДатаВыдачи;		
		
		
	Иначе
		ДатаВыдачи = Дата(1, 1, 1);
	КонецЕсли;
		
	Возврат ДатаВыдачи;
	
КонецФункции

Функция ПолучитьДанныеЗаявки(ИмяФайлаОтвета)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
	Фабрика =  Новый ФабрикаXDTO;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML); 
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.create_orderResponse.return, "error_description")
		И ОбъектXDTO.Body.create_orderResponse.return.error_description <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.create_orderResponse.return.error_description, "error_code")
	Тогда
		Если Число(ОбъектXDTO.Body.create_orderResponse.return.error_description.error_code) <> 0 Тогда
			ВозвращаемаяСтруктура = Новый Структура;
			ВозвращаемаяСтруктура.Вставить("КодОшибки", Число(ОбъектXDTO.Body.create_orderResponse.return.error_description.error_code));
			Если ЗначениеЗаполнено(ОбъектXDTO.Body.create_orderResponse.return.error_description.error_description) Тогда	
				ВозвращаемаяСтруктура.Вставить("ТекстОшибки", ОбъектXDTO.Body.create_orderResponse.return.error_description.error_description);
			КонецЕсли;
			Возврат ВозвращаемаяСтруктура;
		ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.Body.create_orderResponse.return.error_description.error_description) Тогда	
			ВозвращаемаяСтруктура = Новый Структура;
			ВозвращаемаяСтруктура.Вставить("КодОшибки", 1);
			ВозвращаемаяСтруктура.Вставить("ТекстОшибки", ОбъектXDTO.Body.create_orderResponse.return.error_description.error_description);	
			Возврат ВозвращаемаяСтруктура;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектXDTO.Body.create_orderResponse.return.barcodes <> Неопределено 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.create_orderResponse.return, "barcodes")  
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.create_orderResponse.return.barcodes, "item") Тогда
		НомерЗаказаВнешнейЛаборатории =  ОбъектXDTO.Body.create_orderResponse.return.order.order_num;
		//Объект.Контейнер.Очистить();
		ТаблицаШтрихКодов = КоллекцияXDTO(ОбъектXDTO.Body.create_orderResponse.return.barcodes.item);
		//Для каждого Строка из КоллекцияXDTO(ОбъектXDTO.Body.create_orderResponse.return.barcodes.item) Цикл
		//НоваяСтрКонтейнер = Объект.Контейнер.Добавить();
		//ЗаполнитьЗначенияСвойств(НоваяСтрКонтейнер,Строка);
		//КонецЦикла;
		//Объект.СтатусЗаявки = Перечисления.ГМ_СтатусЗаявки.Отправлен;
		//Элементы.РедактированиеЗаказа.Видимость = Истина;
		//ЭтотОбъект.Записать();
		//ЭтотОбъект.ТолькоПросмотр = Истина;
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить("ТаблицаШтрихКодов", ТаблицаШтрихКодов);
		ВозвращаемаяСтруктура.Вставить("НомерЗаказаВнешнейЛаборатории", НомерЗаказаВнешнейЛаборатории);
		ВозвращаемаяСтруктура.Вставить("КодОшибки", 0);
		Возврат ВозвращаемаяСтруктура;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ПолучениеРезультатов

Функция СоздатьФайлЗапросРезультата (WSОпределение,Настройки, Хэш, Запрос, ПространствоИмен, Номер)
	
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".XML");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаЗапроса,ПараметрыЗаписиXML); 
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Envelope", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Body", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента(Запрос,ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("urn",ПространствоИмен);
	ЗаписьXML.ЗаписатьНачалоЭлемента("params");
	ЗаписьXML.ЗаписатьНачалоЭлемента("order_num");
	ЗаписьXML.ЗаписатьТекст(Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("contractor");
	ЗаписьXML.ЗаписатьТекст(Настройки.contractor);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("hash");
	ЗаписьXML.ЗаписатьТекст(Хэш);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайлаЗапроса;

КонецФункции

Функция ЗаписатьДанныеРезультатов(ИмяФайлаОтвета,Настройки)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
	Фабрика =  Новый ФабрикаXDTO;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.get_analysis_resultResponse.return, "attachments")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.get_analysis_resultResponse.return.attachments, "item") Тогда
		ФайлыЗаказа = Новый Массив;
		Для каждого Строка из КоллекцияXDTO(ОбъектXDTO.Body.get_analysis_resultResponse.return.attachments.item) Цикл
			ФайлыЗаказа.Добавить(Строка.file);		
		КонецЦикла;
		Статус = ОбъектXDTO.Body.get_analysis_resultResponse.return.status;
		СтруктураПередачи  = Новый Структура;
		СтруктураПередачи.Вставить("ФайлыРезультата", ФайлыЗаказа);
		СтруктураПередачи.Вставить("Статус", Статус);
		Возврат СтруктураПередачи;	
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

Процедура ПолучитьРезультатыАнализов(ТекстОшибки) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Гемотест_ИспользуетсяИнтеграцияСГемотест Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Лаборатории.Ссылка КАК Лаборатория,
	                      |	Лаборатории.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Лаборатории КАК Лаборатории
	                      |ГДЕ
	                      |	НЕ Лаборатории.ПометкаУдаления
	                      |	И Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Гемотест)");	
	
	ВыборкаЛабораторий= Запрос.Выполнить().Выбрать();
	
	СообщенияОбОшибках = Неопределено;

	Пока ВыборкаЛабораторий.Следующий() Цикл
		НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(ВыборкаЛабораторий.Лаборатория);	
		Если НастройкиВзаимодействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛабораторныеИсследования.ИД КАК ИД,
		|	ЛабораторныеИсследования.Регистратор КАК Регистратор,
		|	ЛабораторныеИсследования.Клиент КАК Клиент
		|ПОМЕСТИТЬ ИД_анализов
		|ИЗ
		|	РегистрСведений.ЛабораторныеИсследования КАК ЛабораторныеИсследования
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ЛабораторныеИсследования.Регистратор) = ТИП(Документ.ДействияНадАнализами)
		|	И ЛабораторныеИсследования.Статус = &Статус
		|	И ЛабораторныеИсследования.Лаборатория = &Лаборатория
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка КАК Ссылка,
		|	ИД_анализов.Регистратор КАК Регистратор,
		|	ИД_анализов.Клиент КАК Клиент
		|ИЗ
		|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИД_анализов КАК ИД_анализов
		|		ПО (ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Состояние = &Состояние)
		|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Лаборатория = &Лаборатория)
		|			И ЗаказВоВнешнююЛабораториюИсследования.ИД = ИД_анализов.ИД
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка,
		|	ИД_анализов.Клиент,
		|	ИД_анализов.Регистратор";
		
		Запрос.УстановитьПараметр("Лаборатория", ВыборкаЛабораторий.Лаборатория);
		Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияЗаказовЛаборатории.Отправлен);
		Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияИсследований.Забран);
		
		ПараметрыХэша = Новый Массив;
	    ПараметрыХэша.Добавить(НастройкиВзаимодействия.Contractor);
	    ПараметрыХэша.Добавить(НастройкиВзаимодействия.Соль);
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ПараметрыХэша",ПараметрыХэша);
	    СтруктураНастроек.Вставить("Настройки", НастройкиВзаимодействия); 
	    СтруктураНастроек.Вставить("Запрос", "get_analysis_result");
		
		НЗНаАвтоотправку = РегистрыСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.СоздатьНаборЗаписей();
		ВыборкаЗаказовДляПолученияРезультатов = Запрос.Выполнить().Выбрать();
		
		// Складываем данные по полученным результатам в эту таблицу, потом передаем эту таблицу в общий модуль
		// для обработки отметок медосмотра
		ТЗДляПростановкиОтметокПМО = МедосмотрыСервер.ПолучитьПустуюТЗДляПростановкиОтметокПМО();
		
		Пока ВыборкаЗаказовДляПолученияРезультатов.Следующий() Цикл
			Данные = Новый Структура;
			Данные.Вставить("Номер", ВыборкаЗаказовДляПолученияРезультатов.Ссылка.НомерЗаказаВнешнейЛаборатории);
			Попытка
				Результат = ОбменССерверомГемотест(СтруктураНастроек,Данные);
			Исключение
				ОбщегоНазначения.СообщитьПользователю("Не удалось установить соединение с сервером, проверьте интернет соединение"); 
				Прервать;	
			КонецПопытки;
			
			Если Результат <> Неопределено Тогда
				Если Результат.Статус = 2 Тогда
					ОбъектДействияНадАнализами = ВыборкаЗаказовДляПолученияРезультатов.Регистратор.ПолучитьОбъект();
					ОбъектДействияНадАнализами.ВидОперации = Перечисления.ВидыОперацийАнализов.Утеря;
					ОбъектДействияНадАнализами.Записать(РежимЗаписиДокумента.Запись);
				ИначеЕсли Результат.Статус = 1 Тогда					
					ВременныеФайлы = Новый Массив;
					Для Каждого Файл ИЗ Результат.ФайлыРезультата Цикл
						ВременныйФайл = ПолучитьИмяВременногоФайла(".pdf");
						Попытка
							КопироватьФайл(Файл, ВременныйФайл);
							ВременныеФайлы.Добавить(ВременныйФайл);
						Исключение
							ОбщегоНазначения.СообщитьПользователю("Не удалось скопировать файлы результата, проверьте интернет соединение"); 
							Продолжить;
						КонецПопытки;	
					КонецЦикла;
					НоменклатураЗаказа =  ВыборкаЗаказовДляПолученияРезультатов.Ссылка.Исследования.Выгрузить(,"Номенклатура, ИД"); 
					НовыйДокумент = Документы.Прием.СоздатьДокумент();
					НовыйДокумент.Врач = НастройкиВзаимодействия.Лаборант;
					НовыйДокумент.Клиент = ВыборкаЗаказовДляПолученияРезультатов.Клиент; 
					НовыйДокумент.Работы.Загрузить(НоменклатураЗаказа);
					НовыйДокумент.Основание = ВыборкаЗаказовДляПолученияРезультатов.Ссылка;
					НовыйДокумент.Дата = ТекущаяДатаСеанса();
					Заказ = ВыборкаЗаказовДляПолученияРезультатов.Ссылка;
					МедКартаПрием = ОтраслевыеДополнения.НайтиМедкартуПриемПоЗаказуВоВнешнююЛабораторию(Заказ, ОтраслевыеДополнения.НоменклатурыЗаказа(Заказ));
					НовыйДокумент.МедицинскаяКарта = МедКартаПрием.МедКарта;
					НовыйДокумент.ПервичныйПрием = МедКартаПрием.Прием;
					Если ВременныеФайлы.Количество() > 0 Тогда
						Попытка
							НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
						КонецПопытки;
						Для Каждого Файл ИЗ ВременныеФайлы Цикл
							ДобавитьФайл(ВременныйФайл, НовыйДокумент.Ссылка);
						КонецЦикла;
						
						Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте") Тогда
							Стр = НЗНаАвтоотправку.Добавить();
							Стр.Документ = НовыйДокумент.Ссылка;
							Стр.Период = НовыйДокумент.Дата;
						КонецЕсли;
						
						ДокументЗаказ = ВыборкаЗаказовДляПолученияРезультатов.Ссылка.ПолучитьОбъект();
						ДокументЗаказ.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Обработан;
						Для Каждого Элемент ИЗ ДокументЗаказ.Исследования Цикл
							Элемент.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Обработан;	
							
							// Добавляем в ТЗ ТЗДляПростановкиОтметокПМО данные обработанных анализов
							НоваяСтрокаТЗПМО = ТЗДляПростановкиОтметокПМО.Добавить();
							НоваяСтрокаТЗПМО.КодПробы = Элемент.КодПробы;
							НоваяСтрокаТЗПМО.ЗаказВоВнешююЛабораторию = ДокументЗаказ.Ссылка;
							НоваяСтрокаТЗПМО.Прием = НовыйДокумент.Ссылка;
							
						КонецЦикла;
						ДокументЗаказ.Записать(РежимЗаписиДокумента.Запись);
						
					КонецЕсли;	
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Не удалось получить результат для заказа " 
				+ ВыборкаЗаказовДляПолученияРезультатов.Ссылка.НомерЗаказаВнешнейЛаборатории + ", повторите попытку позднее");
			КонецЕсли;
			
		КонецЦикла;
		
		// Передаем ТЗДляПростановкиОтметокПМО для обработки
		МедосмотрыСервер.УстановитьОтметкиДляДействийПМОПриСозданииДокументаИзВнЛаборатории(ТЗДляПростановкиОтметокПМО);
		
		НЗНаАвтоотправку.Записать(Ложь);
		
	КонецЦикла;
		        
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, Сообщение, Символы.ПС);
		КонецЦикла;
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ДобавитьФайл(ПутьКФайлу, СсылкаНаДокумент)
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ВыбФайл = Новый Файл(ПутьКФайлу);
		Если ВыбФайл.Существует() Тогда
			РаботаСФайлами.ДобавитьНовыйФайл(СсылкаНаДокумент, ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправитьЗапросСПараметрами(Запрос, ИмяФайлаЗапроса,Настройки)
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("content-type","text/xml;charset=UTF-8");
	Заголовки.Вставить("Host","api.gemotest.ru");
	Заголовки.Вставить("SOAPAction","""urn:OdoctorControllerwsdl#"+Запрос + Символ(34));
	Заголовки.Вставить("Connection","Keep-Alive");
	Сервис = "/odoctor/odoctor/index/ws/1";
	
	Попытка
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTPS");
		Соединение = Новый HTTPСоединение(Настройки.АдресПодключения,,Настройки.Логин,Настройки.Пароль,ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL());
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание);
		//Сообщить("Не удалось установить соединение с сервером:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла(".XML");	
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(Сервис,Заголовки);
		HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
		Результат  = Соединение.ОтправитьДляОбработки(HTTPЗапрос,ИмяФайлаОтвета);
		Соединение = Неопределено;
		Если Результат.КодСостояния > 299 Тогда
			ОбщегоНазначения.СообщитьПользователю("Код состояния " + Результат.КодСостояния + ". Проверка не выполнена");
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		//Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;
	
	Возврат ИмяФайлаОтвета;
КонецФункции

Функция ПолучитьНастройкиВзаимодействия(Лаборатория) Экспорт
	
	Возврат ЛабораторияСерверПовтИсп.ПолучитьНастройкиВзаимодействия_Унифицированно(Лаборатория, "Гемотест_НастройкиВзаимодействия");
	
КонецФункции

Функция ПолучитьПараметрыЗабора(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.ID КАК ID
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Номенклатура В(&Номенклатура)";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	ТаблицаНоменклатураАнализов = Запрос.Выполнить().Выгрузить();
	ТаблицаЛаборатория = ТаблицаНоменклатураАнализов.Скопировать(, "Лаборатория");
	ТаблицаЛаборатория.Свернуть("Лаборатория");
	
	Если ТаблицаЛаборатория.Количество() <> 0 Тогда 
		Лаборатория = ТаблицаЛаборатория[0].Лаборатория;
	Иначе 
		Лаборатория = Справочники.Лаборатории.ПустаяСсылка();
	КонецЕсли;
	
	// Вначале добавляем общий необязательный параметр забора, не зависящий от конкретных исследований в заборе
	// и предназначенный для заполнения общего тэга <doctor> в заказе.
	// Далее добавляем параметры забора, назначенные для конкретных исследований в справочной информации от лаборатории Гемотест.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоменклатураАнализов", ТаблицаНоменклатураАнализов.Скопировать(, "ID"));
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.УстановитьПараметр("ИдПараметра", ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.ID КАК ID
	|ПОМЕСТИТЬ втИсследования
	|ИЗ
	|	&НоменклатураАнализов КАК НоменклатураАнализов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Гемотест_ДополнительныеТесты.ID_Теста КАК ID_Теста
	|ПОМЕСТИТЬ втИдентификаторыПараметров
	|ИЗ
	|	втИсследования КАК втИсследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Гемотест_ДополнительныеТесты КАК Гемотест_ДополнительныеТесты
	|		ПО втИсследования.ID = Гемотест_ДополнительныеТесты.ID_Анализ
	|			И (Гемотест_ДополнительныеТесты.Лаборатория = &Лаборатория)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	IDПарам.Ссылка КАК Параметр,
	|	IDПарам.Ссылка.Наименование КАК Наименование,
	|	IDПарам.Ссылка.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	IDПарам.ID КАК ИдПараметра
	|ПОМЕСТИТЬ втПараметрыГемотест
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК IDПарам
	|ГДЕ
	|	IDПарам.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Гемотест)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПараметрыГемотест.Параметр КАК Параметр,
	|	втПараметрыГемотест.Наименование КАК Наименование,
	|	втПараметрыГемотест.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	втПараметрыГемотест.ИдПараметра КАК ИдПараметра,
	|	ИСТИНА КАК Обязательный,
	|	2 КАК Порядок
	|ИЗ
	|	втИдентификаторыПараметров КАК втИдентификаторыПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыГемотест КАК втПараметрыГемотест
	|		ПО втИдентификаторыПараметров.ID_Теста = втПараметрыГемотест.ИдПараметра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПараметрыГемотест.Параметр,
	|	втПараметрыГемотест.Наименование,
	|	втПараметрыГемотест.ЗначениеПоУмолчанию,
	|	втПараметрыГемотест.ИдПараметра,
	|	ЛОЖЬ,
	|	1
	|ИЗ
	|	втПараметрыГемотест КАК втПараметрыГемотест
	|ГДЕ
	|	втПараметрыГемотест.ИдПараметра = &ИдПараметра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Наименование";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	
КонецФункции

Функция РаспределениеБиоматериаловПоКонтейнерам(ДанныеЗабора) Экспорт 
	Возврат Неопределено;
КонецФункции

Функция СоздатьФайлЗапросСтатусаЗаказа(WSОпределение,Настройки, Хэш, Запрос, ПространствоИмен, Номер)
	
	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина);
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла(".XML");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаЗапроса,ПараметрыЗаписиXML); 
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Envelope", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Body", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента(Запрос,ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("urn",ПространствоИмен);
	ЗаписьXML.ЗаписатьНачалоЭлемента("params");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ext_num");
	ЗаписьXML.ЗаписатьТекст(Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("order_num");
	ЗаписьXML.ЗаписатьТекст("");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("contractor");
	ЗаписьXML.ЗаписатьТекст(Настройки.contractor);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("hash");
	ЗаписьXML.ЗаписатьТекст(Хэш);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайлаЗапроса;

КонецФункции

Функция ЗаписатьДанныеСтатусаЗаказа(ИмяФайлаОтвета, Настройки, Номер)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
	Фабрика =  Новый ФабрикаXDTO;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.response_status_request, "return") 
		 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.response_status_request.return, "order") 
	Тогда
		НомерВнешнегоЗаказа = ОбъектXDTO.Body.response_status_request.return.order.order_num; 
		СтатусЗаказа = ОбъектXDTO.Body.response_status_request.return.order.order_status;
	КонецЕсли;
	
	ВозвращаемыеДанные = Новый Структура;
	ВозвращаемыеДанные.Вставить("НомерВнутренний", Номер);
	ВозвращаемыеДанные.Вставить("НомерВнешнегоЗаказа", НомерВнешнегоЗаказа);
	ВозвращаемыеДанные.Вставить("СтатусЗаказа", СтатусЗаказа);
	Возврат ВозвращаемыеДанные;
	
КонецФункции

Функция  КоллекцияXDTO(Элемент)
	Если ТипЗнч(Элемент)=Тип("ОбъектXDTO") Тогда
		МассивXDTO=Новый Массив;
		МассивXDTO.Добавить(Элемент);
		Возврат МассивXDTO;
	КонецЕсли;
	Возврат Элемент;
КонецФункции

Функция ПроверитьКорректностьКодовПроб(КодыПроб, Знач ПроверятьПустые) Экспорт
	
	Возврат "";
		
КонецФункции

Функция ИспользуетсяПечатьЭтикеток() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьШаблонЭтикеткиЛаборатории() Экспорт
	Возврат Справочники.ШаблоныЭтикетокИЦенниковБПО.ЭтикеткаГемотест;	
КонецФункции

Функция ПолучитьСтруктуруПечатиЭтикеток(ДанныеКонтейнеров, Лаборатория, ДокументСсылка, Клиент, ОписаниеОшибки) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = РегистрыСведений.Гемотест_НастройкиВзаимодействия.ПолучитьМакет("МакетЭтикеткиГемотест");
	Область = Макет.ПолучитьОбласть("Этикетка");
	
	Для каждого  Стр Из ДанныеКонтейнеров Цикл
		Если Стр.Лаборатория.ВнешняяЛаборатория = Перечисления.ВнешниеЛаборатории.Гемотест Тогда
			Если Клиент = Справочники.Клиенты.ПустаяСсылка() Тогда
				Область.Параметры.ФамилияКлиента = Стр.Клиент.Фамилия;
				Область.Параметры.ИОКлиента = Стр.Клиент.Имя + " " + Стр.Клиент.Отчество;	
			Иначе
				Область.Параметры.ФамилияКлиента = Клиент.Фамилия;
				Область.Параметры.ИОКлиента = Клиент.Имя + " " + Клиент.Отчество;
			КонецЕсли;
			НастройкиВзаимодействия = Гемотест_Сервер.ПолучитьНастройкиВзаимодействия(Стр.Лаборатория);
			Если ТипЗнч(НастройкиВзаимодействия) <> Неопределено Тогда
				Область.Параметры.Отправитель = НастройкиВзаимодействия.Contractor;
			КонецЕсли;
			СтруктураДанныхОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации();
			Область.Параметры.Наим = Строка(РаботаСДокументамиСервер.ФилиалДокумента(ДокументСсылка));
			Область.Параметры.НомерШК = Стр.КодПробы;
			Область.Параметры.Биоматериал = Стр.Биоматериал;
			Область.Параметры.Дата = Формат(ДокументСсылка.Дата, "ДФ=dd.MM.yyyy");
			Штрихкод = ПолучитьКартинкуШтрихкода(Стр.КодПробы);
			Если Штрихкод <> Неопределено Тогда 
				Рис = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				Индекс = Область.Рисунки.Индекс(Рис);
				Область.Рисунки[Индекс].Картинка = Штрихкод;
				Область.Рисунки[Индекс].РазмерКартинки = РазмерКартинки.Пропорционально;
				Область.Рисунки[Индекс].Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				Область.Рисунки[Индекс].Расположить(Область.Область("Штрихкод"));
			КонецЕсли;
			ТабличныйДокумент.Вывести(Область);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;
	ТабличныйДокумент.ВысотаСтраницы = 25;
	ТабличныйДокумент.ШиринаСтраницы  = 44;
	ТабличныйДокумент.АвтоМасштаб = Ложь;
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ПолеСлева = 0;
	//ТабличныйДокумент.Показать("Печать этикеток");
	Возврат УниверсальныеМеханизмыСервер.НапечататьДокумент(ТабличныйДокумент, 1,, "Этикетки");
	
КонецФункции

Функция ПолучитьКартинкуШтрихкода(Штрихкод)
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина"            		, 100);
	ПараметрыШтрихкода.Вставить("Высота"            		, 30);
	ПараметрыШтрихкода.Вставить("ТипКода"           		, 8);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст"   		, Ложь);
	ПараметрыШтрихкода.Вставить("Штрихкод"					, Строка(Штрихкод));
	ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание"	, 2);
	Возврат МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецФункции

Функция ПроверитьАктуальностьСправочниковЛабораторий(МассивЛаборатории) //реализовать
	
КонецФункции

Функция КодПробыКорректенДляЗаказа(КодПробы, ТекстОшибки = "") Экспорт
	Возврат Истина;	
КонецФункции

Функция ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(ОписьЗаказов) Экспорт
	
	Для Каждого Элемент ИЗ ОписьЗаказов.СписокЗаказов Цикл
		ЗаказВЛабораторию = Элемент.ЗаказВЛабораторию.ПолучитьОбъект();
		ЗаказВЛабораторию.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отправлен;
		Для Каждого Элемент ИЗ ЗаказВЛабораторию.Исследования Цикл
			Элемент.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отправлен;	
		КонецЦикла;
		ЗаказВЛабораторию.Записать();
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Функция ПолучитьНомерЗаказаВнешнейЛаборатории(СсылкаНаДокументДействияНадАнализами, Лаборатория) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияХранения КАК УсловияХранения
		|ИЗ
		|	Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
		|ГДЕ
		|	Ссылка = &Ссылка
		|	И Лаборатория = &Лаборатория";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокументДействияНадАнализами);
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УсловияХранения;	
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьВсеЛабораторииГемотест() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лаборатории.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Лаборатории КАК Лаборатории
		|ГДЕ
		|	Лаборатории.ВнешняяЛаборатория = &ВнешняяЛаборатория";
	
	Запрос.УстановитьПараметр("ВнешняяЛаборатория", Перечисления.ВнешниеЛаборатории.Гемотест);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьМестоЗабораИсследований(Лаборатория) Экспорт 
	
	МестоЗабора = Неопределено;
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия <> Неопределено Тогда
		МестоЗабора = НастройкиВзаимодействия.МестоЗабора;
	КонецЕсли;	
		
	Возврат МестоЗабора;
	
КонецФункции

Функция ПечатьОписиЗаказовДляЛаборатории(ОписьЗаказовЛаборатории) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьЗаголовки = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	
	Лаборатория = ОписьЗаказовЛаборатории.Лаборатория;
	
	Макет = РегистрыСведений.Гемотест_НастройкиВзаимодействия.ПолучитьМакет("ОписьЗаказовДляГемотеста");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.МестоЗабора = ЛабораторияСервер.ПолучитьМестоЗабораИсследований(Лаборатория, РаботаСДокументамиСервер.ФилиалДокумента(ОписьЗаказовЛаборатории));
	ОбластьМакета.Параметры.ДатаФормирования = Формат(ТекущаяДата(), "ДЛФ=DD");
	ОбластьМакета.Параметры.Лаборатория = Лаборатория;
	ТабДокумент.Вывести(ОбластьМакета);
	
	мсОписьЗаказов = ОписьЗаказовЛаборатории.СписокЗаказов.ВыгрузитьКолонку("ЗаказВЛабораторию");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказВоВнешнююЛабораторию.НомерЗаказаВнешнейЛаборатории КАК НомерЗаказаВнешнейЛаборатории,
	                      |	ЗаказВоВнешнююЛабораторию.Клиент КАК Клиент
	                      |ПОМЕСТИТЬ Заказ
	                      |ИЗ
	                      |	Документ.ЗаказВоВнешнююЛабораторию КАК ЗаказВоВнешнююЛабораторию
	                      |ГДЕ
	                      |	ЗаказВоВнешнююЛабораторию.Ссылка В(&мсОписьЗаказов)
	                      |	И ЗаказВоВнешнююЛабораторию.Лаборатория = &Лаборатория
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДействияНадАнализамиКонтейнеры.КодПробы КАК КодПробы,
	                      |	ДействияНадАнализамиКонтейнеры.КонтейнерПредставление КАК Контейнер,
	                      |	ДействияНадАнализамиКонтейнеры.УсловияХранения КАК НомерЗаказа,
	                      |	Заказ.Клиент КАК Клиент,
	                      |	ДействияНадАнализамиКонтейнеры.БиоматериалПредставление КАК БиоматериалПредставление
	                      |ИЗ
	                      |	Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Заказ КАК Заказ
	                      |		ПО ДействияНадАнализамиКонтейнеры.УсловияХранения = Заказ.НомерЗаказаВнешнейЛаборатории
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	КодПробы");
	
	Запрос.УстановитьПараметр("мсОписьЗаказов",мсОписьЗаказов);
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Выборка = Запрос.Выполнить().Выбрать();	
	
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Область = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	МассивПроверкаВывода = Новый Массив;
	МассивПроверкаВывода.Добавить(Область);
	МассивПроверкаВывода.Добавить(ОбластьПодвал);
	
	
	НомерПункта = 1;
	Пока Выборка.Следующий() Цикл 
		
		Область.Параметры.Пункт	 		  = НомерПункта;
		Область.Параметры.ОбразецНомер 	  = Выборка.КодПробы;
		Область.Параметры.ТипБиоматериала = Выборка.НомерЗаказа + ", " + Выборка.БиоматериалПредставление + ", " + Выборка.Контейнер;
		Область.Параметры.ФИОКлиента	  = Выборка.Клиент;
		
		Если Не ТабДокумент.ПроверитьВывод(МассивПроверкаВывода) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапка);
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
		НомерПункта = НомерПункта + 1;
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.Количество = Выборка.Количество();
	ТабДокумент.Вывести(ОбластьПодвал);
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОписьЗаказовЛаборатории_ОписьЗаказов";
		
	Возврат ТабДокумент;
	
КонецФункции

Процедура ОпределитьИсключенныеИсследования(Лаборатория)
	
	Цены = ТаблицаЦенАнализов(Лаборатория);
	ЛабораторияСервер.ОпределитьИсключенныеИсследования(Лаборатория, Цены);
	
КонецПроцедуры

#Область ОбработкаЗагрузкиСправочников

Функция ОбновитьПолучитьСправочникиИнтерактивнаяЗагрузка(Лаборатория, СообщенияОбОшибках) Экспорт

	ОбновитьСправочникиЛаборатории(Лаборатория, СообщенияОбОшибках);
	ДеревоНоменклатуры = ПолучитьДанныеНоменклатурыАнализов(Лаборатория);
	ТаблицаЦен = ТаблицаЦенАнализов(Лаборатория);
	
	ДанныеСправочников = Новый Структура;
	ДанныеСправочников.Вставить("ДеревоНоменклатуры", ДеревоНоменклатуры);
	ДанныеСправочников.Вставить("Цены", ТаблицаЦен);
	
	Возврат ДанныеСправочников;
	
КонецФункции

Функция ПолучитьДанныеНоменклатурыАнализов(Лаборатория)
	
	//НаборЗаписей = РегистрыСведений.Гемотест_ГруппыАнализов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	//НаборЗаписей.Прочитать();
	#Область ПостроениеДереваГруппНоменклатуры
	
	ДеревоГруппАнализов = Новый ДеревоЗначений;
	//ДеревоГруппАнализов.Колонки.Добавить("Создать", Новый ОписаниеТипов("Булево"));
	ДеревоГруппАнализов.Колонки.Добавить("Group_ID", Новый ОписаниеТипов("Строка"));
	//ДеревоГруппАнализов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	//ДеревоГруппАнализов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	//ДеревоГруппАнализов.Колонки.Добавить("Price", Новый ОписаниеТипов("Число"));
	//ДеревоГруппАнализов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоГруппАнализов.Колонки.Добавить("Parent_ID", Новый ОписаниеТипов("Строка"));
	//ДеревоГруппАнализов.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоГруппАнализов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	ДеревоГруппАнализов.Колонки.Добавить("Создать", Новый ОписаниеТипов("Булево"));
	ДеревоГруппАнализов.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоГруппАнализов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоГруппАнализов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	
	Попытка
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	ТаблицаГруппАнализов = ЗагрузитьГруппыАнализов(НастройкиВзаимодействия);
	
	СписокID = Новый СписокЗначений;
	Счетчик = 0;
	
	КоличествоЭлементов = ТаблицаГруппАнализов.Количество(); 
	Пока ТаблицаГруппАнализов.Количество() > 0	Цикл
		Для Счетчик = 1 По КоличествоЭлементов Цикл
			Строка = ТаблицаГруппАнализов.Получить(КоличествоЭлементов - Счетчик); 
			Если НЕ СписокID.НайтиПоЗначению(Строка.parent_id) = Неопределено ИЛИ Строка.parent_id = ""  Тогда
				Если Строка.parent_id = "" Тогда
					НоваяСтрока = ДеревоГруппАнализов;
					//ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоНаименованию(Строка.Наименование, , НастройкиВзаимодействия.ГруппаЗагрузкиНоменклатуры);
				Иначе	
					НоваяСтрока = ДеревоГруппАнализов.Строки.Найти(Строка.parent_id, "Group_ID", Истина);
					//ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоНаименованию(Строка.Наименование, , НоваяСтрока.Номенклатура);
				КонецЕсли;
				НоваяСтрока = НоваяСтрока.Строки.Добавить();
				НоваяСтрока.Group_ID = Строка.ID;
				НоваяСтрока.ID = Строка.ID;
				НоваяСтрока.Создать = Истина;
				НоваяСтрока.Наименование = Строка.Наименование;
				//НоваяСтрока.Номенклатура = ГруппаНоменклатуры;
				НоваяСтрока.parent_id = Строка.parent_id;
				НоваяСтрока.ЭтоГруппа = Истина;
				СписокID.Добавить(Строка.ID);
				ТаблицаГруппАнализов.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаГруппАнализов.Количество() = КоличествоЭлементов Тогда
			Прервать;
		Иначе
			КоличествоЭлементов = ТаблицаГруппАнализов.Количество();
		КонецЕсли;
	КонецЦикла;
	ДеревоГруппАнализов.Строки.Сортировать("Наименование", Истина);
	
	Исключение
	КонецПопытки;	
	#КонецОбласти
	
	#Область ДобавлениеКДеревуНоменклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Гемотест_Анализы.id КАК id,
		|	Гемотест_Анализы.Наименование КАК Наименование,
		|	Гемотест_Анализы.Group_id КАК Group_id,
		|	Гемотест_Анализы.Price КАК Price,
		|	Гемотест_Анализы.Код КАК Код
		|ИЗ
		|	РегистрСведений.Гемотест_Анализы КАК Гемотест_Анализы
		|ГДЕ
		|	Гемотест_Анализы.Лаборатория = &Лаборатория";
	
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ДеревоГруппАнализов.Строки.Найти(ВыборкаДетальныеЗаписи.Group_id, "Group_ID", Истина);
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ДеревоГруппАнализов.Строки.Добавить();;
		Иначе
			НоваяСтрока = НоваяСтрока.Строки.Добавить();
		КонецЕсли;
		НоваяСтрока.Создать = Истина;
		НоваяСтрока.ID = ВыборкаДетальныеЗаписи.ID;
		НоваяСтрока.Код = ВыборкаДетальныеЗаписи.Код; 
		НоваяСтрока.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		//НоваяСтрока.Price = ВыборкаДетальныеЗаписи.Price;
	КонецЦикла;
	#КонецОбласти
		
	Возврат ДеревоГруппАнализов;
	
КонецФункции

Функция ТаблицаЦенАнализов(Лаборатория)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Гемотест_Анализы.id КАК ID,
	|	Гемотест_Анализы.Код КАК Код,
	|	Гемотест_Анализы.Price КАК Цена
	|ИЗ
	|	РегистрСведений.Гемотест_Анализы КАК Гемотест_Анализы
	|ГДЕ
	|	Гемотест_Анализы.Лаборатория = &Лаборатория
	|	И Гемотест_Анализы.Price > 0"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цены = ЛабораторияСервер.ПустаяТаблицаЦен();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Цены.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Цены;
	
КонецФункции

Процедура ОчиститьСправочники(Лаборатория) Экспорт
	
	НаборЗаписей = РегистрыСведений.Гемотест_ДополнительныеТесты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.Гемотест_Анализы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
КонецПроцедуры 

Процедура ЗаполнитьКэшНСИЛаборатории() Экспорт
	
	Попытка
		Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Гемотест_ИспользуетсяИнтеграцияСГемотест Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	КэшНСИЛаборатории = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Номенклатура.Представление КАК ПредставлениеНоменклатуры,
	|	НоменклатураАнализов.Номенклатура.Комментарий,
	|	НоменклатураАнализов.Номенклатура.Родитель КАК Группа,
	|	НоменклатураАнализов.ID КАК ИД,
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Гемотест)
	|УПОРЯДОЧИТЬ ПО
	|	ИД,
	|	ПредставлениеНоменклатуры";
	
	НоменклатураАнализов = Запрос.Выполнить().Выгрузить();
	КэшНСИЛаборатории.Вставить("НоменклатураАнализов", ОбщегоНазначения.ТаблицаЗначенийВМассив(НоменклатураАнализов));
		
	// Получаем существующий кэш, либо создаем пустой
	КэшНСИЛабораторий = ПараметрыСеанса.КешНСИЛабораторий.Получить();
	Если ТипЗнч(КэшНСИЛабораторий) <> Тип("Структура") Тогда
		КэшНСИЛабораторий = Новый Структура;
	КонецЕсли;
	
	// К существующему кэшу добавляем кэш 
	КэшНСИЛабораторий.Вставить("Гемотест", КэшНСИЛаборатории);
	// Сохраняем старый кэш + кэш в параметры сеанса
	ПараметрыСеанса.КешНСИЛабораторий = Новый ХранилищеЗначения(КэшНСИЛабораторий);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
