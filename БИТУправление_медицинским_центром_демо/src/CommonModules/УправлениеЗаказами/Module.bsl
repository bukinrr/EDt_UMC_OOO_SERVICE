#Область ПрограммныйИнтерфейс

// Возвращает сумму по столбцу "Сумма" в заказе.
Функция ПолучитьСуммаЗаказа(ДокументСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ДокументСсылка) И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КомплексныйРасчетКлиента") Тогда
		СуммаЗаказа = ДокументСсылка.Состав.Итог("Сумма");
		Возврат СуммаЗаказа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

Процедура ДвиженияПоЗаказамМатериалов(ДокументОбъект, Отказ, Заказ = Неопределено, УстанавливаемоеСостояние = Неопределено, ВыполнятьПроверкуКорректностиСтатуса = Истина) Экспорт
		
	// Очистка состояний по документу.
	СостоянияЗаказов = РегистрыСведений.СостоянияЗаказовНаИзготовление.СоздатьНаборЗаписей();
	СостоянияЗаказов.Отбор.Документ.Установить(ДокументОбъект.Ссылка);
	СостоянияЗаказов.Записать();
	
	Если УстанавливаемоеСостояние = Неопределено Тогда 
		УстанавливаемоеСостояние = ПолучитьУстанавливаемоеСостояниеПоДокументу(ДокументОбъект.Ссылка);
		Если УстанавливаемоеСостояние = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Заказ = Неопределено Тогда 
		
		Заказ = КомплексныеРасчетыКлиентов.ПолучитьРеквизитКомплексногоРасчетаВДокументе(ДокументОбъект.Ссылка);
		Если Не ЗначениеЗаполнено(Заказ) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоЗаказНаПроизводство(Заказ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыполнятьПроверкуКорректностиСтатуса И Не ПроверитьДатуСтатусЗаказа(ДокументОбъект, Заказ, УстанавливаемоеСостояние) Тогда
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	СостояниеЗаказа = РегистрыСведений.СостоянияЗаказовНаИзготовление.СоздатьМенеджерЗаписи();
	СостояниеЗаказа.Заказ = Заказ;
	СостояниеЗаказа.Документ = ДокументОбъект.Ссылка;
	СостояниеЗаказа.Ответственный = ДокументОбъект.Ответственный;
	СостояниеЗаказа.Период = ДокументОбъект.Дата;
	СостояниеЗаказа.Состояние = УстанавливаемоеСостояние;
	СостояниеЗаказа.Записать();
	
КонецПроцедуры

Процедура ПроверкаСменыЗаказаДокумента(ДокументОбъект, Отказ) Экспорт
	
	ПредЗаказ = КомплексныеРасчетыКлиентов.ПолучитьРеквизитКомплексногоРасчетаВДокументе(ДокументОбъект.Ссылка);
	Если Не ЗначениеЗаполнено(ПредЗаказ) Тогда 
		Возврат;
	КонецЕсли;
	Заказ = КомплексныеРасчетыКлиентов.ПолучитьРеквизитКомплексногоРасчетаВДокументе(ДокументОбъект);
	
	ЭтоСменаЗаказаНаПроизводство = (ЗначениеЗаполнено(ПредЗаказ) И 
		ЭтоЗаказНаПроизводство(ПредЗаказ) И 
		Заказ <> ПредЗаказ);
		
	Если Не ЭтоСменаЗаказаНаПроизводство Тогда 
		Возврат;
	КонецЕсли;
	
	ОтменаДвиженияПоЗаказамМатериалов(ДокументОбъект, ПредЗаказ, Отказ);
	
КонецПроцедуры

Процедура ОтменаДвиженияПоЗаказамМатериалов(ДокументОбъект, Отказ, Заказ = Неопределено) Экспорт
	
	Если Заказ = Неопределено Тогда 
		
		Заказ = КомплексныеРасчетыКлиентов.ПолучитьРеквизитКомплексногоРасчетаВДокументе(ДокументОбъект.Ссылка);
		Если Не ЗначениеЗаполнено(Заказ) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоЗаказНаПроизводство(Заказ) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЗаказовНаИзготовление.Период,
	|	СостоянияЗаказовНаИзготовление.Документ,
	|	СостоянияЗаказовНаИзготовление.Состояние,
	|	СостоянияЗаказовНаИзготовление.Ответственный,
	|	СостоянияЗаказовНаИзготовление.Состояние.Код
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовНаИзготовление КАК СостоянияЗаказовНаИзготовление
	|ГДЕ
	|	СостоянияЗаказовНаИзготовление.Заказ = &Заказ
	|	И (СостоянияЗаказовНаИзготовление.Период > &Период)
	|	И СостоянияЗаказовНаИзготовление.Документ <> &ЭтотДокумент";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Период", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("ЭтотДокумент", ДокументОбъект.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение данного документа не может быть отменено. Существует документ "
				+ ВыборкаДетальныеЗаписи.Документ + ", который был либо проведен позднее либо передвинул заказ в следующее состояние.");	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
			
	// Очистка состояний по документу.
	СостоянияЗаказов = РегистрыСведений.СостоянияЗаказовНаИзготовление.СоздатьНаборЗаписей();
	СостоянияЗаказов.Отбор.Документ.Установить(ДокументОбъект.Ссылка);
	СостоянияЗаказов.Записать();
	
КонецПроцедуры

Функция ПроверитьДатуСтатусЗаказа(ДокументОбъект, ДокументОснование, УстанавливаемоеСостояние)
	
	Результат = Истина;
	
	ДанныеТекущегоСостояния = ПолучитьСостояниеЗаказа(ДокументОснование, ДокументОбъект.Дата);
	
	Если ЗначениеЗаполнено(ДанныеТекущегоСостояния.Состояние) И 
		ДанныеТекущегоСостояния.Состояние <> УстанавливаемоеСостояние 
	Тогда
		
		ДопустимыеСледующиеСостояния = ПолучитьДопустимыеПереходыСостоянияЗаказа(ДанныеТекущегоСостояния.Состояние);
		
		Если ДопустимыеСледующиеСостояния.Найти(УстанавливаемоеСостояние) = Неопределено Тогда
			
			Результат = Ложь;
			СообщениеОбОшибке = "Заказ не может быть переведен в состояние " + УстанавливаемоеСостояние + " из состояния " + ДанныеТекущегоСостояния.Состояние;
			Если ЗначениеЗаполнено(ДанныеТекущегоСостояния.Документ) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + " установленного документом " + ДанныеТекущегоСостояния.Документ;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЗаказНаПроизводство(ВидЗаказ) Экспорт
	
	Если ЗначениеЗаполнено(ВидЗаказ) Тогда
		Если ТипЗнч(ВидЗаказ) = Тип("ДокументСсылка.КомплексныйРасчетКлиента") Тогда
			Вид = ВидЗаказ.Вид;
		ИначеЕсли ТипЗнч(ВидЗаказ) = Тип("СправочникСсылка.ВидыКомплексныхРасчетовКлиентов") Тогда
			Вид = ВидЗаказ;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Вид.Тип = Перечисления.ТипыКомплексныхРасчетовКлиентов.ПроизводственныйРасчет;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьЗаписьИзмененияСостоянияЗаказа(Заказ, Состояние, Дата = Неопределено, Документ = Неопределено) Экспорт
	
	Запись = РегистрыСведений.СостоянияЗаказовНаИзготовление.СоздатьМенеджерЗаписи();
	Запись.Заказ		= Заказ;
	Запись.Состояние	= Состояние;
	Запись.Период		= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	Запись.Документ		= Документ;
	Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Запись.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСпецификацииПоЗначениямЗаполнения(ДокументОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.ПараметрСпецификации КАК ПараметрСпецификации,
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.Ссылка КАК ВидЗаказа,
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.НомерСтроки
	|ПОМЕСТИТЬ СпецификацияПоВидуЗаказа
	|ИЗ
	|	Справочник.ВидыКомплексныхРасчетовКлиентов.Спецификация КАК ВидыКомплексныхРасчетовКлиентовСпецификация
	|ГДЕ
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.Ссылка = &ВидЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыСпецификацийАлгоритмы.Ссылка КАК Ссылка,
	|	ПараметрыСпецификацийАлгоритмы.РеквизитИсточник КАК РеквизитИсточник,
	|	ПараметрыСпецификацийАлгоритмы.ТекстАлгоритма КАК ТекстАлгоритма,
	|	ПараметрыСпецификацийАлгоритмы.Тип КАК Тип,
	|	СпецификацияПоВидуЗаказа.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	СпецификацияПоВидуЗаказа.ВидЗаказа КАК ВидЗаказа,
	|	ПараметрыСпецификацийАлгоритмы.НаименованиеВПечатнойФорме КАК СсылкаНаименованиеВПечатнойФорме, 
	|	СпецификацияПоВидуЗаказа.НомерСтроки
	|ИЗ
	|	СпецификацияПоВидуЗаказа КАК СпецификацияПоВидуЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыСпецификаций КАК ПараметрыСпецификацийАлгоритмы
	|		ПО СпецификацияПоВидуЗаказа.ПараметрСпецификации = ПараметрыСпецификацийАлгоритмы.Ссылка
	|ГДЕ
	|	ПараметрыСпецификацийАлгоритмы.Ссылка.ВидПараметра = &ВидПараметраСпецификации
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
		
	Запрос.УстановитьПараметр("Документ", ДокументОбъект.ДокументОснование);
	Запрос.УстановитьПараметр("ВидЗаказа", ДокументОбъект.Вид);
	Запрос.УстановитьПараметр("ВидПараметраСпецификации", Перечисления.ВидыПараметровСпецификаций.ЗначениеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выб = РезультатЗапроса.Выбрать();
	                      
	Пока Выб.Следующий() Цикл
		Если Выб.Тип = Перечисления.ТипыАлгоритмов.ЗначениеРеквизита Тогда
			Попытка
				РезультатРасчета = ДокументОбъект[Выб.РеквизитИсточник];
			Исключение
				РезультатРасчета = Выб.ЗначениеПоУмолчанию;
			КонецПопытки;	
		ИначеЕсли Выб.Тип = Перечисления.ТипыАлгоритмов.Алгоритм Тогда
			РезультатРасчета		= "";
			СтруктураДанных = Новый Структура("ТекстАлгоритма, Объект, ЗначениеПоУмолчанию ",
			Выб.ТекстАлгоритма, ДокументОбъект, Выб.ЗначениеПоУмолчанию);
			ВыполнитьАлгоритмВЗащищенномКонтексте(СтруктураДанных, РезультатРасчета);
			// При расширении функционала.
		Иначе
			РезультатРасчета = Выб.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		нСпец = ДокументОбъект.Спецификация.Добавить();
		нСпец.Параметр				= Выб.Ссылка;
		нСпец.Значение				= РезультатРасчета;
		нСпец.ДобавленАвтоматически = Истина;
		нСпец.НомерСтрокиСортировки = Выб.НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпецификацииПоПараметрамHTML(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПараметровHTML.Параметр,
	|	ЗначенияПараметровHTML.Значение
	|ПОМЕСТИТЬ ПараметрыПриема
	|ИЗ
	|	РегистрСведений.ЗначенияПараметровHTML КАК ЗначенияПараметровHTML
	|ГДЕ
	|	ЗначенияПараметровHTML.Документ = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.ПараметрСпецификации КАК ПараметрСпецификации,
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.Ссылка КАК ВидЗаказа,
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.НомерСтроки
	|ПОМЕСТИТЬ СпецификацияПоВидуЗаказа
	|ИЗ
	|	Справочник.ВидыКомплексныхРасчетовКлиентов.Спецификация КАК ВидыКомплексныхРасчетовКлиентовСпецификация
	|ГДЕ
	|	ВидыКомплексныхРасчетовКлиентовСпецификация.Ссылка = &ВидЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыСпецификацийАлгоритмы.Ссылка,
	|	ПараметрыСпецификацийАлгоритмы.РеквизитИсточник,
	|	ПараметрыСпецификацийАлгоритмы.ТекстАлгоритма,
	|	ПараметрыСпецификацийАлгоритмы.Тип,
	|	ПараметрыСпецификацийАлгоритмы.Источник,
	|	СпецификацияПоВидуЗаказа.ЗначениеПоУмолчанию,
	|	СпецификацияПоВидуЗаказа.ВидЗаказа,
	|	ПараметрыСпецификацийАлгоритмы.НаименованиеВПечатнойФорме,
	|	СпецификацияПоВидуЗаказа.НомерСтроки
	|ПОМЕСТИТЬ ПараметрыСпецификации
	|ИЗ
	|	СпецификацияПоВидуЗаказа КАК СпецификацияПоВидуЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыСпецификаций КАК ПараметрыСпецификацийАлгоритмы
	|		ПО СпецификацияПоВидуЗаказа.ПараметрСпецификации = ПараметрыСпецификацийАлгоритмы.Ссылка
	|ГДЕ
	|	ПараметрыСпецификацийАлгоритмы.Ссылка.ВидПараметра = &ВидПараметраСпецификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыСпецификации.Ссылка КАК Ссылка,
	|	ПараметрыСпецификации.РеквизитИсточник КАК РеквизитИсточник,
	|	ПараметрыСпецификации.ТекстАлгоритма КАК ТекстАлгоритма,
	|	ПараметрыСпецификации.Тип КАК Тип,
	|	ПараметрыСпецификации.Источник КАК Источник,
	|	ЕСТЬNULL(ПараметрыПриема.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеПараметра,
	|	ПараметрыПриема.Значение,
	|	ПараметрыСпецификации.НаименованиеВПечатнойФорме КАК СсылкаНаименованиеВПечатнойФорме,
	|	ПараметрыСпецификации.ВидЗаказа,
	|	ПараметрыСпецификации.ЗначениеПоУмолчанию,
	|	ПараметрыСпецификации.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ПараметрыСпецификации КАК ПараметрыСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПриема КАК ПараметрыПриема
	|		ПО ПараметрыСпецификации.Источник = ПараметрыПриема.Параметр
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Документ", ДокументОбъект.ДокументОснование);
	Запрос.УстановитьПараметр("ВидЗаказа", ДокументОбъект.Вид);
	Запрос.УстановитьПараметр("ВидПараметраСпецификации", Перечисления.ВидыПараметровСпецификаций.ПараметрHTML);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выб = РезультатЗапроса.Выбрать();
	
	Пока Выб.Следующий() Цикл
		Если Выб.Тип = Перечисления.ТипыАлгоритмов.ЗначениеРеквизита Тогда
			Если ЗначениеЗаполнено(Выб.ЗначениеПараметра) Тогда
				Результат = Выб.ЗначениеПараметра;
			Иначе
				Результат = Выб.ЗначениеПоУмолчанию;
			КонецЕсли;
		ИначеЕсли Выб.Тип = Перечисления.ТипыАлгоритмов.Алгоритм Тогда
			Результат		= "";
			СтруктураДанных = Новый Структура("ТекстАлгоритма, Источник, ДокументОснование, ЗначениеПараметра, ЗначениеПоУмолчанию ",
			Выб.ТекстАлгоритма, Выб.Источник, ДокументОбъект.ДокументОснование, Выб.ЗначениеПараметра, Выб.ЗначениеПоУмолчанию);
			ВыполнитьАлгоритмВЗащищенномКонтексте(СтруктураДанных, Результат)
			// При расширении функционала.
		Иначе
			РезультатРасчета = Выб.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		нСпец = ДокументОбъект.Спецификация.Добавить();
		нСпец.Параметр				= Выб.Ссылка;
		нСпец.Значение				= Результат;
		нСпец.ДобавленАвтоматически = Истина;
		нСпец.НомерСтрокиСортировки = Выб.НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УпорядочитьПараметрыСпецификации(ДокументОбъект) Экспорт
	ДокументОбъект.Спецификация.Сортировать("НомерСтрокиСортировки Возр");
КонецПроцедуры

Процедура ВыполнитьАлгоритмВЗащищенномКонтексте(СтруктураДанных, Результат)
	Попытка
		Выполнить(СтруктураДанных.ТекстАлгоритма); 
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		Результат = СтруктураДанных.ЗначениеПоУмолчанию;
	КонецПопытки;	
КонецПроцедуры

Функция ПолучитьСостояниеЗаказа(Заказ, Дата) Экспорт
	
	Результат = Новый Структура("Состояние, Период, Документ");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЗаказовНаИзготовление.Период КАК Период,
	|	СостоянияЗаказовНаИзготовление.Состояние,
	|	СостоянияЗаказовНаИзготовление.Документ
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовНаИзготовление КАК СостоянияЗаказовНаИзготовление
	|ГДЕ
	|	СостоянияЗаказовНаИзготовление.Заказ = &Заказ
	|	И СостоянияЗаказовНаИзготовление.Период <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата),Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДопустимыеПереходыСостоянияЗаказа(Состояние)
	
	Результат = Новый Массив;
	
	СправочникСостояния = Справочники.ВидыСостоянийЗаказов;
	
	Если Состояние = СправочникСостояния.ВозвращенПоГарантии Тогда
		Результат.Добавить(СправочникСостояния.ПереданВМастерскую);
		Результат.Добавить(СправочникСостояния.Принят);
		Результат.Добавить(СправочникСостояния.УКлиента);
	Иначе
		Выб = Справочники.ВидыСостоянийЗаказов.Выбрать();
		Пока Выб.Следующий() Цикл
			Если Состояние.Код < Выб.Код Тогда
				Результат.Добавить(Выб.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУстанавливаемоеСостояниеПоДокументу(ДокументСсылка) Экспорт 
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Состояния = Справочники.ВидыСостоянийЗаказов;
	
	Если ТипДокумента = Тип("ДокументСсылка.КомплексныйРасчетКлиента") Тогда 
		Возврат Состояния.Принят;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОказаниеУслуг") Или ТипДокумента = Тип("ДокументСсылка.РаботыПоРекламации") Тогда 
		Возврат Состояния.УКлиента;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаЗаказаВМастерскую") Тогда 
		Возврат Состояния.ПереданВМастерскую;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриемЗаказаИзМастерской") Тогда 
		Возврат Состояния.ПолученИзМастерской;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыполнениеЗаказа") Тогда 
		Возврат Состояния.ПолученИзМастерской;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Рекламация") Тогда 
		Возврат Состояния.ВозвращенПоГарантии;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ЭтапыРабот

// Функция - Получить таблицу этапов работ с отметками о выполнении.
//
// Параметры:
//  КомплексныйРасчет	 - ДокументСсылка.КомплексныйРасчет - Ссылка на документ расчета.
//  ЭтапыРабот			 - ДанныеФормыКоллекция - Таблица, содержащая этапы работ, если не указана - таблица работ будет
//                                         выбрана из документа расчета.
// 
// Возвращаемое значение:
// ТаблицаЗначений - Таблица со списком этапов и заполненными отметками о выполнении (дата выполнения, пользователь).
//
Функция ПолучитьТаблицуЭтаповРаботСОтметкамиОВыполнении(КомплексныйРасчет, ЭтапыРабот = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ЭтапыРабот <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыРабот.ИдентификаторЭтапа,
		|	ЭтапыРабот.Номенклатура,
		|	ЭтапыРабот.ИсполнительПлан
		|ПОМЕСТИТЬ ЭтапыРабот
		|ИЗ
		|	&ЭтапыРабот КАК ЭтапыРабот";
		Запрос.УстановитьПараметр("ЭтапыРабот", ЭтапыРабот.Выгрузить());
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплексныйРасчетКлиентаЭтапыРабот.ИдентификаторЭтапа,
		|	КомплексныйРасчетКлиентаЭтапыРабот.Номенклатура,
		|	КомплексныйРасчетКлиентаЭтапыРабот.ИсполнительПлан
		|ПОМЕСТИТЬ ЭтапыРабот
		|ИЗ
		|	Документ.КомплексныйРасчетКлиента.ЭтапыРабот КАК КомплексныйРасчетКлиентаЭтапыРабот
		|ГДЕ
		|	КомплексныйРасчетКлиентаЭтапыРабот.Ссылка = &КомплексныйРасчет";
		Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеЭтаповКомплексногоРасчета.КомплексныйРасчет,
	|	ВыполнениеЭтаповКомплексногоРасчета.ИдентификаторЭтапа,
	|	ВыполнениеЭтаповКомплексногоРасчета.Выполнен,
	|	ВыполнениеЭтаповКомплексногоРасчета.ДокументРегистратор,
	|	ВыполнениеЭтаповКомплексногоРасчета.Пользователь,
	|	ВыполнениеЭтаповКомплексногоРасчета.ИсполнительФакт
	|ПОМЕСТИТЬ ВыполненныеЭтапыПоРасчету
	|ИЗ
	|	РегистрСведений.ВыполнениеЭтаповКомплексногоРасчета КАК ВыполнениеЭтаповКомплексногоРасчета
	|ГДЕ
	|	ВыполнениеЭтаповКомплексногоРасчета.КомплексныйРасчет = &КомплексныйРасчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыРабот.ИдентификаторЭтапа,
	|	ЭтапыРабот.Номенклатура,
	|	ЭтапыРабот.ИсполнительПлан,
	|	ВыполненныеЭтапыПоРасчету.ИсполнительФакт,
	|	ВыполненныеЭтапыПоРасчету.Пользователь,
	|	ВыполненныеЭтапыПоРасчету.ДокументРегистратор,
	|	ЕСТЬNULL(ВыполненныеЭтапыПоРасчету.Выполнен, ДАТАВРЕМЯ(1, 1, 1)) КАК Выполнен,
	|	ЕСТЬNULL(ВыполненныеЭтапыПоРасчету.Выполнен, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтметкаВыполнения
	|ИЗ
	|	ЭтапыРабот КАК ЭтапыРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполненныеЭтапыПоРасчету КАК ВыполненныеЭтапыПоРасчету
	|		ПО ЭтапыРабот.ИдентификаторЭтапа = ВыполненныеЭтапыПоРасчету.ИдентификаторЭтапа";
	Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОчиститьОтметкиОВыполненииЭтаповДокумента(ДокументВыполнения) Экспорт 
	
	ВыполненныеЭтапыНЗ = РегистрыСведений.ВыполнениеЭтаповКомплексногоРасчета.СоздатьНаборЗаписей();
	ВыполненныеЭтапыНЗ.Отбор.ДокументРегистратор.Установить(ДокументВыполнения);
	ВыполненныеЭтапыНЗ.Записать();
	
КонецПроцедуры

// Процедура - Отметить выполненные этапы расчета.
//
// Параметры:
//  КомплексныйРасчет	 - 	 - 
//  ВыполненныеЭтапы	 - 	 - 
//  ДокументВыполнения	 - 	 - 
//
Процедура ОтметитьВыполненныеЭтапыРасчета(КомплексныйРасчет, ВыполненныеЭтапы, ДокументВыполнения) Экспорт
	
	ОчиститьОтметкиОВыполненииЭтаповДокумента(ДокументВыполнения);
	
	ВыполненныеЭтапыНЗ = РегистрыСведений.ВыполнениеЭтаповКомплексногоРасчета.СоздатьНаборЗаписей();
	ВыполненныеЭтапыНЗ.Отбор.КомплексныйРасчет.Установить(КомплексныйРасчет);
	ВыполненныеЭтапыНЗ.Отбор.ДокументРегистратор.Установить(ДокументВыполнения);
	ВыполненныеЭтапыНЗ.Прочитать();
		
	Для Каждого СтрокаЭтап Из ВыполненныеЭтапы Цикл
		
		ВыполненныйЭтап = ВыполненныеЭтапыНЗ.Добавить();
		ЗаполнитьЗначенияСвойств(ВыполненныйЭтап, СтрокаЭтап);
		ВыполненныйЭтап.КомплексныйРасчет = КомплексныйРасчет;
		ВыполненныйЭтап.ДокументРегистратор = ДокументВыполнения;
		
	КонецЦикла;
	
	ВыполненныеЭтапыНЗ.Записать();
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеЭтапамРабот(Форма, ИмяТаблицыЭтапов = "ЭтапыРабот") Экспорт 
	
	// Запрет изменений этапа, если он уже выполнен в другом документе.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЭтапыРабот";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭтапыРабот");
	
	ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыЭтапов + ".Выполнен");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыЭтапов + ".ВыполненВЭтомДокументе");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Оформление поля текущего документа.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЭтапыРабот";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭтапыРаботДокументРегистратор");

	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыЭтапов + ".ВыполненВЭтомДокументе");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Этот документ");
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура ЗаказыНаПроизводствоПередЗаписьюОбработчик(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ
		Или (Источник.ДополнительныеСвойства.Свойство("НеДелатьПроверокПриЗаписи")
				И Источник.ДополнительныеСвойства.НеДелатьПроверокПриЗаписи = Истина)
	Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаСменыЗаказаДокумента(Источник, Отказ);
	
КонецПроцедуры

Процедура ЗаказыНаПроизводствоПриЗаписиОбработчик(Источник, Отказ) Экспорт
	
	Если Источник.ПометкаУдаления Тогда
		ОчиститьОтметкиОВыполненииЭтаповДокумента(Источник.Ссылка);
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("ВыполненныеЭтапыРабот") Тогда
		Заказ = КомплексныеРасчетыКлиентов.ПолучитьРеквизитКомплексногоРасчетаВДокументе(Источник);
		Если Заказ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОтметитьВыполненныеЭтапыРасчета(Заказ, Источник.ДополнительныеСвойства.ВыполненныеЭтапыРабот, Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаказыНаПроизводствоОбработкаПроведенияОбработчик(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьДвиженияПоЗаказуНаПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоЗаказамМатериалов(Источник, Отказ);
	
	// Этапы выполнения
	КомплексныеРасчетыКлиентовСервер.ВыполнитьДвиженияПоВыработкеСотрудниковПоВыполненнымЭтапам(Источник, Отказ);
	
КонецПроцедуры

Процедура ЗаказыНаПроизводствоУдалениеПроведенияОбработчик(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтменаДвиженияПоЗаказамМатериалов(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
