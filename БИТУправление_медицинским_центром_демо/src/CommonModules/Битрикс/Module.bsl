#Область ОбменСБитрикс24

#Область Получение

Функция ОбработатьЗапросHTTPСервиса(Запрос) Экспорт
	
	ЗаписьЖурналаРегистрации("Битрикс.Запрос.Входящий", УровеньЖурналаРегистрации.Информация, , Запрос.ПолучитьТелоКакСтроку());
	
	УстановитьПривилегированныйРежим(Истина);
	Если БитриксПовтИсп.ИспользоватьОбмен() Тогда
		
		ТелоЗапроса = Строка(РаскодироватьСтроку(СтрЗаменить(Запрос.ПолучитьТелоКакСтроку(),"+","%20"), СпособКодированияСтроки.URLВКодировкеURL));
		ПараметрыТелаЗапроса = ПолучитьПараметрыТелаЗапроса(ТелоЗапроса);
		
		НаименованияБ24 = СтрРазделить(СтрЗаменить(НРег(БитриксПовтИсп.ЗначениеНастройкиНаименованиеБитрикс24()), " ", ""), ";", Ложь);
		
		Если НаименованияБ24.Найти(СтрЗаменить(НРег(ПараметрыТелаЗапроса.Получить("auth[domain]")), " ", "")) <> Неопределено Тогда
			Если ПараметрыТелаЗапроса.Получить("event") <> Неопределено Тогда
				ОбработатьИсходящийВебхук(ПараметрыТелаЗапроса);
			ИначеЕсли ПараметрыТелаЗапроса.Получить("document_id[0]") = "crm" Тогда
				ОбработатьБизнесПроцесс(Запрос.ПараметрыЗапроса);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый HTTPСервисОтвет(200);
	
КонецФункции

Процедура ОбработатьИсходящийВебхук(ПараметрыТелаЗапроса)
	
	РежимОбменаСБитрикс = БитриксПовтИсп.РежимОбмена();
	Если РежимОбменаСБитрикс = 2 Тогда
		Возврат;
	КонецЕсли;
	
	Событие = ПараметрыТелаЗапроса.Получить("event");
	ИдентификаторЛида = СтрокаИдентификатора(ПараметрыТелаЗапроса.Получить("data[FIELDS][ID]"));
	
	Если Не ЗначениеЗаполнено(ИдентификаторЛида)
		Или Событие = Неопределено
		Или Не КорректныйКодАвторизации(ПараметрыТелаЗапроса)
	Тогда
		Возврат;
	КонецЕсли;
	
	РежимПолученияЛида = БитриксПовтИсп.ЗначениеНастройкиРежимПолученияЛида();
	Если Не (Событие = "ONCRMLEADUPDATE" И РежимПолученияЛида = 1
		Или Событие = "ONCRMLEADADD" И РежимПолученияЛида = 0)
	Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьСтатусЛида = Событие = "ONCRMLEADUPDATE";
	ПолучениеЛида(ИдентификаторЛида, ПроверятьСтатусЛида);
	
КонецПроцедуры

Функция КорректныйКодАвторизации(ПараметрыТелаЗапроса)
	
	КодАвторизации = ПараметрыТелаЗапроса.Получить("auth[application_token]");
	
	Возврат КодАвторизации <> Неопределено И БитриксПовтИсп.ЗначениеНастройкиКодАвторизации() = КодАвторизации;
	
КонецФункции

Процедура ОбработатьБизнесПроцесс(ПараметрыЗапроса)
	
	ТипСущности = ПараметрыЗапроса.Получить("target_object_crm_type");
	
	Если ТипСущности <> Неопределено Тогда
		ОбработатьОткрытиеЭлемента(ПараметрыЗапроса);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОткрытиеЭлемента(ПараметрыЗапроса)
	
	ПользовательЗапустившийБП = Строка(ПараметрыЗапроса.Получить("user_id"));
	ИДПользователяБ24 = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СтрЗаменить(НРег(ПользовательЗапустившийБП), "user_", ""));
	Сущность = ПолучитьСущностьПоТипуСущности(ПараметрыЗапроса.Получить("target_object_crm_type"));
	ИДСущности = СтрокаИдентификатора(ПараметрыЗапроса.Получить("id"));
	
	ЗаписьКлиента = ПараметрыЗапроса.Получить("for_book_an_appointment") = "Y";
	
	Если Сущность = Перечисления.Б24_Сущности.Сделка Тогда
		
		ДанныеСделки = ВыполнитьМетод("crm.deal", "get", ИДСущности);
		Если ТипЗнч(ДанныеСделки) <> Тип("Соответствие") Тогда
			Возврат;
		КонецЕсли;	
		
		СтрокаУИДСделки = ДанныеСделки.Получить(БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД());
		
		Попытка
			УИДСделки = Новый УникальныйИдентификатор(СтрокаУИДСделки);
		Исключение
			УИДСделки = Неопределено;
		КонецПопытки;
		
		Если УИДСделки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Ссылка = Документы.ОказаниеУслуг.ПолучитьСсылку(УИДСделки);
		Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			Ссылка = Документы.Заявка.ПолучитьСсылку(УИДСделки);
		КонецЕсли;
	Иначе
		Если Не (ЗначениеЗаполнено(ИДПользователяБ24)
			И ЗначениеЗаполнено(Сущность)
			И ЗначениеЗаполнено(ИДСущности))
		Тогда
			Возврат;
		КонецЕсли;
		Ссылка = ОбъектыПоИдентификатору(ИДСущности, Сущность);
	КонецЕсли;
	
	ПользователиБазы = БитриксПовтИсп.ПользователиПоИдентификатору(ИДПользователяБ24);
	
	Если Не (ЗначениеЗаполнено(ПользователиБазы)
			И ОбщегоНазначения.СсылкаСуществует(Ссылка))
	Тогда
		Возврат;
	КонецЕсли;
	
	СлужебноеОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(БитриксКлиентСервер.КлючСлужебногоОбсуждения());
	СообщениеКлиенту = СистемаВзаимодействия.СоздатьСообщение(СлужебноеОбсуждение.Идентификатор);
	
	СообщениеКлиенту.Данные = Новый Структура("Пользователи, Ссылка, ЗаписьКлиента", ПользователиБазы, Ссылка, ЗаписьКлиента);
	СообщениеКлиенту.Записать();
	
КонецПроцедуры

Функция ПолучитьСущностьПоТипуСущности(ТипСущности)
	
	Сущности = Новый Соответствие;
	Сущности.Вставить("lead",	Перечисления.Б24_Сущности.Лид);
	Сущности.Вставить("contact",Перечисления.Б24_Сущности.Контакт);
	Сущности.Вставить("deal",	Перечисления.Б24_Сущности.Сделка);
	
	Возврат Сущности.Получить(НРег(ТипСущности));
	
КонецФункции

#КонецОбласти

#Область Отправка

// Функция - Выполнить метод
//
// Параметры:
//  Сущность			 - Строка			- Наименование сущности в Битрикс24.
//  Метод				 - Строка			- Наименование метода сущности в Битрикс24.
//  ИД					 - Строка			- id, идентификатор сущности.
//  Поля				 - Структура		- fields, структура полей, которые нужно отправить.
//  Фильтр				 - Структура		- filter, структура полей, по которым необходимо сделатть отбор при получении.
//  ВыбранныеПоля		 - Массив, Строка	- select, массив, либо строка с разделителем ",", где содержится перечень необходимых к получению полей.
//  СтруктураПараметров	 - Структура		- Предопределенная структура параметров.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Результат.
//
Функция ВыполнитьМетод(Сущность, Метод, ИД = Неопределено, Поля = Неопределено, Фильтр = Неопределено, ВыбранныеПоля = Неопределено, СтруктураПараметров = Неопределено, ВернутьДанныеОтвета = Ложь) Экспорт
	
	ТелоЗапроса = СформироватьТелоЗапроса(ИД, Поля, Фильтр, ВыбранныеПоля, СтруктураПараметров);
	Возврат ПолучитьРезультатВыполненияМетода(Сущность, ТелоЗапроса, Метод, ВернутьДанныеОтвета);
	
КонецФункции

Функция СформироватьТелоЗапроса(ИД, Поля, Фильтр, ВыбранныеПоля, СтруктураПараметров)
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если ИД <> Неопределено Тогда
		СтруктураПараметров.Вставить("id", ИД);
	КонецЕсли;
	Если Поля <> Неопределено Тогда
		СтруктураПараметров.Вставить("fields", Поля);
	КонецЕсли;
	Если Фильтр <> Неопределено Тогда
		СтруктураПараметров.Вставить("filter", Фильтр);
	КонецЕсли;
	Если ВыбранныеПоля <> Неопределено Тогда
		Если ТипЗнч(ВыбранныеПоля) = Тип("Строка") Тогда
			ВыбранныеПоля = СтрРазделить(ВыбранныеПоля, ",");
		КонецЕсли;
		СтруктураПараметров.Вставить("select", ВыбранныеПоля);
	КонецЕсли;
	
	Возврат СформироватьJSON(СтруктураПараметров);
	
КонецФункции

Функция ПолучитьРезультатВыполненияМетода(Сущность, Данные, Метод, ВернутьДанныеОтвета)
	
	Запрос = СформироватьЗапрос(СтрШаблон("%1.%2", Сущность, Метод), Данные);
	
	ДанныеОтветаЗапроса = ПолучитьДанныеОтветаЗапроса(Запрос);
	
	Если ВернутьДанныеОтвета Тогда
		Возврат ДанныеОтветаЗапроса;
	КонецЕсли;
	
	ДанныеОтвета = ДанныеОтветаЗапроса.ДанныеОтвета;
	Если ДанныеОтвета <> Неопределено Тогда
		ОписаниеРезультата = ДанныеОтвета.Получить("result");
		
		Если ОписаниеРезультата <> Неопределено Тогда
			Возврат ОписаниеРезультата;
		КонецЕсли;
		
		ОписаниеОшибки = ДанныеОтвета.Получить("error_description");
		ТекстОшибки = ПолучитьТекстОшибки(ОписаниеОшибки);
	Иначе
		ТекстОшибки = НСтр("ru='Ошибка отправки запроса'");
	КонецЕсли;
	
	СтрокиТекстаОшибки = Новый Массив;
	СтрокиТекстаОшибки.Добавить("Запрос:");
	СтрокиТекстаОшибки.Добавить(СтрШаблон("%1.%2", Сущность, Метод) + Символы.ПС);
	СтрокиТекстаОшибки.Добавить("Текст запроса:");
	СтрокиТекстаОшибки.Добавить(Запрос.ПолучитьТелоКакСтроку() + Символы.ПС);
	СтрокиТекстаОшибки.Добавить("Текст ошибки:");
	СтрокиТекстаОшибки.Добавить(ТекстОшибки);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с Битрикс24'"), УровеньЖурналаРегистрации.Ошибка, , Запрос, СтрСоединить(СтрокиТекстаОшибки, Символы.ПС));
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТекстОшибки(ОписаниеОшибки)
	
	Если ОписаниеОшибки <> Неопределено Тогда
		ТекстОшибки = ПолучитьТекстОписанияОшибки(ОписаниеОшибки);
	Иначе
		ТекстОшибки = НСтр("ru='Неизвестная ошибка'");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПолучитьТекстОписанияОшибки(ОписаниеОшибки)
	
	Если Найти(ОписаниеОшибки, "Invalid request credentials") > 0 Тогда
		ТекстОписанияОшибки = НСтр("ru='Неверные данные авторизации. Проверьте настройки подключения Битрикс24.'");
	Иначе
		ТекстОписанияОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	Возврат ТекстОписанияОшибки;
	
КонецФункции

Функция СформироватьЗапрос(МетодСущности, ТелоЗапроса = Неопределено) Экспорт
	
	ИДПользователяВебхука	= БитриксПовтИсп.ЗначениеНастройкиИДПользователяВебхука();
	КодВебхука				= БитриксПовтИсп.ЗначениеНастройкиКодВебхука();
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("rest/%1/%2/%3", ИДПользователяВебхука, КодВебхука, МетодСущности));
	
	Если ТелоЗапроса <> Неопределено Тогда
		ЗапросHTTP.Заголовки.Вставить("Content-type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
	КонецЕсли;
	
	Возврат ЗапросHTTP;
	
КонецФункции

Функция ПолучитьДанныеОтветаЗапроса(Запрос)
	
	ДанныеОтветаЗапроса = Новый Структура("ОшибкаОтправки, ДанныеОтвета, ТекстТелаОтвета", Ложь);
	
	Ответ = ОтправитьЗапрос(Запрос);
	
	Если Ответ = Неопределено Тогда
		ДанныеОтветаЗапроса.ОшибкаОтправки = Истина;
	Иначе
		ТекстТелаОтвета = Ответ.ПолучитьТелоКакСтроку();
		ДанныеОтветаЗапроса.ДанныеОтвета = ДанныеОтветаИзТелаОтвета(ТекстТелаОтвета);
		ДанныеОтветаЗапроса.ТекстТелаОтвета = ТекстТелаОтвета;
	КонецЕсли;
	
	Возврат ДанныеОтветаЗапроса;
	
КонецФункции

Функция ОтправитьЗапрос(ЗапросHTTP)
	
	Соединение = БитриксПовтИсп.ПолучитьСоединениеСБ24();
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ДанныеОтветаИзТелаОтвета(ТекстТелаОтвета)
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстТелаОтвета);
		СтруктураДанных = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		СтруктураДанных = Неопределено;
	КонецПопытки;
	
	Если СтруктураДанных <> Неопределено Тогда
		Возврат СтруктураДанных;
	КонецЕсли;
	
	Возврат Новый Соответствие;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Битрикс

#Область ОбработкаПодписокНаСобытия 

Процедура ДокументСделкаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не БитриксПовтИсп.ИспользоватьОбмен() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(Источник.Ссылка);
	ПараметрыФЗ.Добавить(Перечисления.Б24_Сущности.Сделка);
	ФоновыеЗадания.Выполнить("Битрикс.ДобавитьНеотправленныйДокумент", ПараметрыФЗ, Новый УникальныйИдентификатор);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДокументСделкаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не БитриксПовтИсп.ИспользоватьОбмен() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(Источник.Ссылка);
	ПараметрыФЗ.Добавить(Перечисления.Б24_Сущности.Сделка);
	ФоновыеЗадания.Выполнить("Битрикс.ДобавитьНеотправленныйДокумент", ПараметрыФЗ, Новый УникальныйИдентификатор);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДокументСделкаПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не БитриксПовтИсп.ИспользоватьОбмен() Тогда
		Возврат;
	КонецЕсли;
	
	УбратьКлиентаИзГруппыБ24(Источник.Ссылка);
	
	Если (ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.Заявка")
			И Не (БитриксПовтИсп.ЗначениеНастройкиРежим2() Или БитриксПовтИсп.ЗначениеНастройкиРежим3()))
		Или (ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг")
			И Не Источник.Ссылка.ПометкаУдаления)
	Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(Источник.Ссылка);
	ПараметрыФЗ.Добавить(Перечисления.Б24_Сущности.Сделка);
	ФоновыеЗадания.Выполнить("Битрикс.ДобавитьНеотправленныйДокумент", ПараметрыФЗ, Новый УникальныйИдентификатор);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура НеотправленныеДокументыПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не БитриксПовтИсп.ИспользоватьОбмен() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл
		Если Запись.Отправлен Тогда
			Продолжить;
		КонецЕсли;
		Запись.Отправлен = ОтправитьДанныеНеотправленногоДокумента(Запись.Документ, Запись.СущностьБ24);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДокументАктивностьПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не (БитриксПовтИсп.ИспользоватьОбмен()
		И БитриксПовтИсп.ЗначениеНастройкиОтправлятьЗвонки())
	Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(Источник.Ссылка);
	ПараметрыФЗ.Добавить(Перечисления.Б24_Сущности.Активность);
	ФоновыеЗадания.Выполнить("Битрикс.ДобавитьНеотправленныйДокумент", ПараметрыФЗ, Новый УникальныйИдентификатор);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОтправитьНеотправленныеДокументыВБитрикс() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	// 1. Удалить все отправленные из регистра
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Б24_НеотправленныеДокументы.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.Б24_НеотправленныеДокументы КАК Б24_НеотправленныеДокументы
	|ГДЕ
	|	Б24_НеотправленныеДокументы.Отправлен = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.Б24_НеотправленныеДокументы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	// 2. Отправка неотправленных
	НеотправленныеДокументы = РегистрыСведений.Б24_НеотправленныеДокументы.СоздатьНаборЗаписей();
	НеотправленныеДокументы.Прочитать();
	Для Каждого НеотправленныйДокумент Из НеотправленныеДокументы Цикл
		МЗ = РегистрыСведений.Б24_НеотправленныеДокументы.СоздатьМенеджерЗаписи();
		МЗ.Документ = НеотправленныйДокумент.Документ;
		МЗ.СущностьБ24 = НеотправленныйДокумент.СущностьБ24;
		МЗ.Отправлен = НеотправленныйДокумент.Отправлен;
		МЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ИмпортНедостающихЛидов(Период = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Период = Неопределено Тогда
		ДатаНачала = ТекущаяДата()-7*86400;
		ДатаОкончания = ТекущаяДата();
	Иначе
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
	КонецЕсли;
	
	ДанныеЛидов = ПолучитьДанныеНезагруженныхЛидовЗаПериод(ДатаНачала, ДатаОкончания);
	
	Для Каждого ДанныеЛида Из ДанныеЛидов Цикл
		Если БитриксПовтИсп.ЗначениеНастройкиРежимПолученияЛида() = 0 Тогда
			ПолучениеЛида(ДанныеЛида.Идентификатор, Ложь);
		Иначе
			Если ЛидБылНаСтатусеКЗагрузке(ДанныеЛида.Идентификатор, ДанныеЛида.Статус) Тогда
				ПолучениеЛида(ДанныеЛида.Идентификатор, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ДобавитьНеотправленныйДокумент(Документ, СущностьБ24) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.Б24_НеотправленныеДокументы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.СущностьБ24 = СущностьБ24;
	МенеджерЗаписи.Записать(Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОтправитьДанныеНеотправленногоДокумента(Документ, СущностьБ24) Экспорт
	
	Результат = Ложь;
	
	Если СущностьБ24 = Перечисления.Б24_Сущности.Сделка Тогда
		Результат = ОтправитьСделку(Документ);
	ИначеЕсли СущностьБ24 = Перечисления.Б24_Сущности.Лид Тогда
		Результат = ОтправитьЛид(Документ);
	ИначеЕсли СущностьБ24 = Перечисления.Б24_Сущности.Активность Тогда
		Результат = ОтправитьАктивность(Документ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЛид(Документ) Экспорт
	
	ИдентификаторЛида = ОтправитьДанныеОбращения(Документ);
	Результат = ЗначениеЗаполнено(ИдентификаторЛида);
	
	Если Результат Тогда
		ЛидДобавитьИдентификатор(Документ, ИдентификаторЛида);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучениеЛида(ИдентификаторЛида, ПроверятьСтатусЛида) Экспорт
	
	ПоляЛида = ВыполнитьМетод("crm.lead", "get", ИдентификаторЛида);
	Если ПоляЛида = Неопределено Или (ПроверятьСтатусЛида И ПоляЛида["STATUS_ID"] <> БитриксПовтИсп.ИдСтатусаЛидКЗагрузке()) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Б24_ИдентификаторыОбрабатываемыхСущностей");
	ЭлементБлокировки.УстановитьЗначение(Метаданные.РегистрыСведений.Б24_ИдентификаторыОбрабатываемыхСущностей.Измерения.ИдентификаторБ24.Имя, ИдентификаторЛида);
	ЭлементБлокировки.УстановитьЗначение(Метаданные.РегистрыСведений.Б24_ИдентификаторыОбрабатываемыхСущностей.Измерения.СущностьБ24.Имя, Перечисления.Б24_Сущности.Лид);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ЗаписьОбрабатываемогоИдентификатора = РегистрыСведений.Б24_ИдентификаторыОбрабатываемыхСущностей.СоздатьМенеджерЗаписи();
	ЗаписьОбрабатываемогоИдентификатора.ИдентификаторБ24 = ИдентификаторЛида;
	ЗаписьОбрабатываемогоИдентификатора.СущностьБ24 = Перечисления.Б24_Сущности.Лид;
	ЗаписьОбрабатываемогоИдентификатора.Прочитать();
	Если ЗаписьОбрабатываемогоИдентификатора.Выбран() Тогда
		ЗафиксироватьТранзакцию();
		Возврат;
	Иначе
		ЗаписьОбрабатываемогоИдентификатора.ИдентификаторБ24 = ИдентификаторЛида;
		ЗаписьОбрабатываемогоИдентификатора.СущностьБ24 = Перечисления.Б24_Сущности.Лид;
		ЗаписьОбрабатываемогоИдентификатора.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ОбработатьПолучаемыйЛид(ИдентификаторЛида, ПоляЛида);
	ЗаписьОбрабатываемогоИдентификатора.Удалить();
	
КонецПроцедуры

Процедура ОбработатьПолучаемыйЛид(ИдентификаторЛида, ПоляЛида)
	
	ЛидПоИдентификатору = ЛидПоИдентификатору(ИдентификаторЛида);
	
	Если ЛидПоИдентификатору <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоЛиду = ПолучитьДанныеПоЛиду(ПоляЛида);
	НастройкаОбменаССайтом = БитриксПовтИсп.ЗначениеНастройкиНастройкаОбменаССайтом();
	
	Если ДанныеПоЛиду.Свойство("ИдентификаторКлиента") Тогда
		Клиент = КлиентПоИдентификатору(ДанныеПоЛиду.ИдентификаторКлиента);
		Если Клиент = Неопределено Тогда
			Клиент = ПолучитьКлиентаПоДаннымКлиентаИзЛида(ДанныеПоЛиду, НастройкаОбменаССайтом);
			Если Клиент = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			КлиентДобавитьИдентификатор(Клиент, ДанныеПоЛиду.ИдентификаторКлиента);
		КонецЕсли;
	Иначе
		Клиент = ПолучитьКлиентаПоДаннымКлиентаИзЛида(ДанныеПоЛиду, НастройкаОбменаССайтом);
		Если Клиент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИДКлиентаВБитриксе = СоздатьКлиента(Клиент);
		Если Не ЗначениеЗаполнено(ИДКлиентаВБитриксе) Тогда
			Возврат;
		КонецЕсли;
		
		КлиентДобавитьИдентификатор(Клиент, ИДКлиентаВБитриксе);
		
		// TODO: обновлять лид, добавляя в него идентификатор клиента
	КонецЕсли;
	
	ЛистОжидания = CRMОбмен.СоздатьЛид(, ДанныеПоЛиду.Примечание, Клиент, ДанныеПоЛиду.ДанныеКлиента, , ДанныеПоЛиду.UTM, НастройкаОбменаССайтом);
	ЛидДобавитьИдентификатор(ЛистОжидания, ИдентификаторЛида);
	
КонецПроцедуры

Функция ОтправитьДанныеОбращения(Документ) Экспорт
	
	ИДКлиентаВБитриксе = КлиентИдентификатор(Документ.Клиент);
	
	Если ИДКлиентаВБитриксе = Неопределено Тогда
		
		ИДКлиентаВБитриксе = НайтиКлиентаВБитриксе(Документ.Клиент);
		Если ИДКлиентаВБитриксе = Неопределено Тогда
			// В б24 нет такого клиента
			ИДКлиентаВБитриксе = СоздатьКлиента(Документ.Клиент);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИДКлиентаВБитриксе) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		КлиентДобавитьИдентификатор(Документ.Клиент, ИДКлиентаВБитриксе);
	КонецЕсли;
	
	СтруктураЛида = Новый Структура("CONTACT_ID", ИДКлиентаВБитриксе);
	
	ИмяПользовательскогоПоляЛидДатаСоздания = БитриксПовтИсп.ИмяПользовательскогоПоляЛидДатаСоздания();
	
	Если ЗначениеЗаполнено(ИмяПользовательскогоПоляЛидДатаСоздания) Тогда
		
		мзЛид = РегистрыСведений.Лиды.СоздатьМенеджерЗаписи();
		мзЛид.Клиент = Документ.Клиент;
		мзЛид.Лид = Документ;
		мзЛид.Прочитать();
		Если мзЛид.Выбран() Тогда
			СтруктураЛида.Вставить(ИмяПользовательскогоПоляЛидДатаСоздания, мзЛид.Период);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЛида.Вставить("STATUS_ID", БитриксПовтИсп.ИдСтатусаЛидПриВыгрузке());
	
	СтруктураЛида.Вставить("UTM_CAMPAIGN", Документ.РекламнаяКомпания.ИмяUTM);
	СтруктураЛида.Вставить("UTM_CONTENT", Документ.СодержаниеОбъявления);
	СтруктураЛида.Вставить("UTM_MEDIUM", Документ.ТипРекламы.ИмяUTM);
	СтруктураЛида.Вставить("UTM_SOURCE", Документ.ИсточникИнформации.ИмяUTM);
	СтруктураЛида.Вставить("UTM_TERM", Документ.КлючевоеСловоРекламнойКомпании);
	
	ИдентификаторЛида = ВыполнитьМетод("crm.lead", "add",, СтруктураЛида);
	Возврат СтрокаИдентификатора(ИдентификаторЛида);
	
КонецФункции

Функция СоздатьКлиента(Клиент) Экспорт
	
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("LAST_NAME",	Клиент.Фамилия);
	СтруктураКлиента.Вставить("NAME",		Клиент.Имя);
	СтруктураКлиента.Вставить("SECOND_NAME",Клиент.Отчество);
	СтруктураКлиента.Вставить("BIRTHDATE",	Формат(Клиент.ДатаРождения, "ДФ=гггг-ММ-ддT00:00:00+00:00"));
	СтруктураКлиента.Вставить("PHONE",		СформироватьНомераТелефонов(Клиент));
	СтруктураКлиента.Вставить("EMAIL",		СформироватьАдресаПочты(Клиент));
	
	ИдентификаторКлиента = ВыполнитьМетод("crm.contact", "add",, СтруктураКлиента);
	Возврат СтрокаИдентификатора(ИдентификаторКлиента);
	
КонецФункции

Функция ПолучитьКИОбъекта(СсылкаНаОбъект, ТипКонтактнойИнформации) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,	
	|	КонтактнаяИнформация.Вид КАК Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект) = &ТипТаблицы
	|	И КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Тип", ТипКонтактнойИнформации);
	Запрос.УстановитьПараметр("ТипТаблицы", ТипЗнч(СсылкаНаОбъект));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат Новый ТаблицаЗначений
	
КонецФункции

Процедура ОбновитьСделкуНесконвертированногоЛида(ИдентификаторЛида, Документ) Экспорт
	
	СделкаОбновлена = Ложь;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		СделкаОбновлена = АктуализироватьОбщуюСделку(Документ, ИдентификаторЛида);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОказаниеУслуг") Или ТипЗнч(Документ) = Тип("ДокументСсылка.Заявка") Тогда
		СделкаОбновлена = ОбновитьПоляСделки(Неопределено, Документ, Строка(Документ.УникальныйИдентификатор()), ИдентификаторЛида);
	КонецЕсли;
	
	Если СделкаОбновлена Тогда
		НаборЗаписей = РегистрыСведений.Б24_НесконвертированныеЛиды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЛида.Установить(ИдентификаторЛида);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКарточкуКонтактаВБ24(Ссылка, ТекстОшибки) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЛистОжидания")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.Событие")
	Тогда
		ОткрытьКарточкуВБ24(Ссылка.Клиент, ТекстОшибки);
	Иначе
		ОткрытьКарточкуВБ24(Ссылка, ТекстОшибки)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКарточкуЛидаВБ24(Ссылка, ТекстОшибки) Экспорт
	
	ОткрытьКарточкуВБ24(Ссылка, ТекстОшибки)
	
КонецПроцедуры

Процедура ОткрытьКарточкуСделкиВБ24(Ссылка, ТекстОшибки) Экспорт
	
	ОткрытьКарточкуВБ24(Ссылка, ТекстОшибки)
	
КонецПроцедуры

Процедура ОткрытьКарточкуВБ24(Ссылка, ТекстОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторСущности = "";
	
	ИдентификаторПользователя = ПользовательИдентификатор(ОбщегоНазначения.ТекущийПользователь());
	
	МЗПользователь = РегистрыСведений.Б24_Идентификаторы.СоздатьМенеджерЗаписи();
	МЗПользователь.Объект = ОбщегоНазначения.ТекущийПользователь();
	МЗПользователь.Прочитать();
	
	Если Не ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		ТекстОшибки = НСтр("ru = 'У пользователя не задан идентификатор пользователя Битрикс24.'");
		Возврат;
	КонецЕсли;
	
	Если (БитриксПовтИсп.ЗначениеНастройкиРежим2() И ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг"))
		Или (Не БитриксПовтИсп.ЗначениеНастройкиРежим2() И ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка"))
	Тогда
		ТекстОшибки = НСтр("ru='Данный тип документа не формирует сделки в Битрикс24.'");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЛистОжидания")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.Событие")
	Тогда
		ИдентификаторСущности = ИдентификаторСущностиЛида(Ссылка, ТекстОшибки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Клиенты") Тогда
		ИдентификаторСущности = ИдентификаторСущностиКонтакта(Ссылка, ТекстОшибки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка")
	Тогда
		ИдентификаторСущности = ИдентификаторСущностиСделки(Ссылка, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(Ссылка);
	ПараметрыФЗ.Добавить(ИдентификаторПользователя);
	ПараметрыФЗ.Добавить(ИдентификаторСущности);
	ФоновыеЗадания.Выполнить("Битрикс.ОткрытьКарточкуВБ24Продолжение", ПараметрыФЗ, Новый УникальныйИдентификатор);
	
КонецПроцедуры	

// См. CRMСерверПереопределяемый.ОбращениеПриЗаписи
Процедура ОбращениеПриЗаписи(Источник, ЛидСоздан) Экспорт
	
	Если БитриксПовтИсп.ИспользоватьОбмен()
		И ЛидСоздан
		И БитриксПовтИсп.РежимОбмена() <> 1
		И Не (ТипЗнч(Источник) = Тип("ДокументОбъект.ЛистОжидания")
				И ЗначениеЗаполнено(Источник.ВнешнийИсточникЗагрузки)
				И Источник.ВнешнийИсточникЗагрузки = БитриксПовтИсп.ЗначениеНастройкиНастройкаОбменаССайтом())
	Тогда
		ПараметрыФЗ = Новый Массив;
		ПараметрыФЗ.Добавить(Источник.Ссылка);
		ПараметрыФЗ.Добавить(Перечисления.Б24_Сущности.Лид);
		ФоновыеЗадания.Выполнить("Битрикс.ДобавитьНеотправленныйДокумент", ПараметрыФЗ, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьПросроченныеЛиды() Экспорт
	
	ПериодАктуальностиЗаявки = БитриксПовтИсп.ЗначениеНастройкиПериодАктуальностиЗаявки();
	Если Не ЗначениеЗаполнено(ПериодАктуальностиЗаявки) 
		Или Не (БитриксПовтИсп.ЗначениеНастройкиРежим3() Или БитриксПовтИсп.ЗначениеНастройкиРежим1())
		Или БитриксПовтИсп.ЗначениеНастройкиРежим2()
	Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Б24_НесконвертированныеЛиды.Документ КАК Документ,
		|	Б24_НесконвертированныеЛиды.ИдентификаторЛида КАК ИдентификаторЛида
		|ИЗ
		|	РегистрСведений.Б24_НесконвертированныеЛиды КАК Б24_НесконвертированныеЛиды
		|ГДЕ
		|	Б24_НесконвертированныеЛиды.Документ.ДатаНачала < &ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - ПериодАктуальностиЗаявки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИзменитьСтатусЛида(Выборка.ИдентификаторЛида, БитриксПовтИсп.ИдСтатусаЛидПросрочен());
	КонецЦикла;
	
КонецПроцедуры

Функция КлючСозданногоСлужебногоОбсуждения() Экспорт
	
	КлючСлужебногоОбсуждения = БитриксКлиентСервер.КлючСлужебногоОбсуждения();
	
	Обсуждение = Неопределено;
	
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючСлужебногоОбсуждения);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Обсуждение <> Неопределено Тогда
		Возврат КлючСлужебногоОбсуждения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОбъектыПоИдентификатору(ИдентификаторБ24, СущностьБ24, ВернутьПервыйОбъект = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Б24_Идентификаторы.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.Б24_Идентификаторы КАК Б24_Идентификаторы
		|ГДЕ
		|	Б24_Идентификаторы.ИдентификаторБ24 = &ИдентификаторБ24
		|	И Б24_Идентификаторы.СущностьБ24 = &СущностьБ24";
	
	Запрос.УстановитьПараметр("ИдентификаторБ24", ИдентификаторБ24);
	Запрос.УстановитьПараметр("СущностьБ24", СущностьБ24);
	
	мОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Если мОбъекты.Количество() > 0 Тогда
		Если ВернутьПервыйОбъект Тогда
			Возврат мОбъекты[0];
		Иначе
			Возврат мОбъекты;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИдентификаторОбъекта(Объект, СущностьБ24) Экспорт
	
	МЗ = РегистрыСведений.Б24_Идентификаторы.СоздатьМенеджерЗаписи();
	МЗ.Объект = Объект;
	МЗ.СущностьБ24 = СущностьБ24;
	МЗ.Прочитать();
	
	Если МЗ.Выбран() Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(МЗ.ИдентификаторБ24);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОткрытьКарточкуВБ24Продолжение(Ссылка, ИдентификаторПользователя, ИдентификаторСущности) Экспорт
	
	ТекстУведомления = "";
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЛистОжидания")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.Событие")
	Тогда
		ТекстУведомления = ТекстОткрытияКарточкиЛида(Ссылка, ИдентификаторПользователя, ИдентификаторСущности);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Клиенты") Тогда
		ТекстУведомления = ТекстОткрытияКарточкиКлиента(Ссылка, ИдентификаторПользователя, ИдентификаторСущности);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка")
	Тогда
		ТекстУведомления = ТекстОткрытияКарточкиСделки(Ссылка, ИдентификаторПользователя, ИдентификаторСущности);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураУведомления = Новый Структура;
	СтруктураУведомления.Вставить("USER_ID", ИдентификаторПользователя);
	СтруктураУведомления.Вставить("MESSAGE", ТекстУведомления);
	
	ВыполнитьМетод("im.notify.system", "add",,,,,СтруктураУведомления);
	
КонецПроцедуры

#КонецОбласти

Функция ОтправитьСделку(Документ)
	
	Если БитриксПовтИсп.ЗначениеНастройкиРежим4() Тогда
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.Заявка")
			И БитриксПовтИсп.ЗначениеНастройкиРежим3()
		Тогда
			Возврат ИзменитьЛидПоЗаявке(Документ);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		Результат = ОтправитьДанныеОУ(Документ);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Заявка") Тогда
		Результат = ОтправитьДанныеЗаявки(Документ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьАктивность(Документ)
	
	Результат = Ложь;
	
	ИдентификаторКлиента = КлиентИдентификатор(Документ.Клиент);
	
	Если Не ЗначениеЗаполнено(ИдентификаторКлиента) Тогда
		Если БитриксПовтИсп.РежимОбмена() <> 1 Тогда
			// Лид с клиентом на текущий момент могли не успеть выгрузиться в Б24
			МЗ = РегистрыСведений.Лиды.СоздатьМенеджерЗаписи();
			МЗ.Лид = Документ;
			МЗ.Клиент = Документ.Клиент;
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторАктивности = АктивностьИдентификатор(Документ);
	
	Поля = Новый Соответствие();
	ЗаполнитьПоляАктивности(Документ, Поля);
	
	Если ЗначениеЗаполнено(ИдентификаторАктивности) Тогда
		Если СобытиеВыполнено(Документ) Тогда
			Если ИзменилисьНеизменяемыеПоля(ИдентификаторАктивности, Поля) Тогда
				ВыполнитьМетод("crm.activity", "delete", ИдентификаторАктивности);
				НовыйИдентификаторАктивности = ВыполнитьМетод("crm.activity", "add", , Поля);
				АктивностьДобавитьИдентификатор(Документ, НовыйИдентификаторАктивности);
			Иначе
				ВыполнитьМетод("crm.activity", "update", ИдентификаторАктивности, Поля);
			КонецЕсли;
		Иначе
			ВыполнитьМетод("crm.activity", "delete", ИдентификаторАктивности);
			АктивностьУдалитьИдентификатор(Документ);
		КонецЕсли;
	ИначеЕсли СобытиеВыполнено(Документ) Тогда
		НовыйИдентификаторАктивности = ВыполнитьМетод("crm.activity", "add", , Поля);
		АктивностьДобавитьИдентификатор(Документ, НовыйИдентификаторАктивности);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИзменилисьНеизменяемыеПоля(ИдентификаторАктивности, Поля)
	
	НеизменяемыеПоля = Новый Массив;
	ЗаполнитьНеизменяемыеПоляАктивности(НеизменяемыеПоля);
	
	АктуальныеПоля = Битрикс.ВыполнитьМетод("crm.activity", "get", ИдентификаторАктивности);
	
	Если ТипЗнч(АктуальныеПоля) <> Тип("Соответствие") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого НеизменяемоеПоле Из НеизменяемыеПоля Цикл
		Если Поля.Получить(НеизменяемоеПоле) <> АктуальныеПоля.Получить(НеизменяемоеПоле) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполнитьНеизменяемыеПоляАктивности(НеизменяемыеПоля)
	
	НеизменяемыеПоля.Добавить("TYPE_ID");
	
КонецФункции

Процедура ЗаполнитьПоляАктивности(Документ, Поля)
	
	Поля.Вставить("STATUS", "2"); // Завершено
	Поля.Вставить("OWNER_TYPE_ID", "3"); // Контакт
	Поля.Вставить("TYPE_ID", ТипАктивностиПоВидуСобытия(Документ.ВидСобытия));
	Поля.Вставить("COMPLETED", "Y"); // Выполнено
	Поля.Вставить("RESPONSIBLE_ID", Строка(ПользовательИдентификатор(Документ.Ответственный)));
	Поля.Вставить("DESCRIPTION", Документ.Комментарий);
	Поля.Вставить("DESCRIPTION_TYPE", "1"); // Plain text
	Поля.Вставить("DIRECTION", НаправлениеАктивностиПоВидуСобытия(Документ.ВидСобытия));
	Поля.Вставить("SUBJECT", ЗаголовокАктивности(Документ));
	Поля.Вставить("PRIORITY", "2"); // средняя
	
	Коммуникации = Новый Массив;
	СтруктураКоммуникации = Новый Структура();
	СтруктураКоммуникации.Вставить("VALUE",			 Документ.НомерТелефона);
	СтруктураКоммуникации.Вставить("ENTITY_ID",		 КлиентИдентификатор(Документ.Клиент));
	СтруктураКоммуникации.Вставить("ENTITY_TYPE_ID", 3);
	Коммуникации.Добавить(СтруктураКоммуникации);
	
	Поля.Вставить("COMMUNICATIONS", Коммуникации);
	
	ЧасовойПояс = СтрШаблон("+%1:%2", Строка(Формат(СмещениеСтандартногоВремени()/3600,"ЧЦ=2; ЧДЦ=0; ЧВН=")), Строка(Формат(СмещениеСтандартногоВремени()%3600/60,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=")));
	Поля.Вставить("START_TIME", Формат(Документ.ДатаФакт, "ДФ=dd.MM.yyyyTHH:mm:ss") + ЧасовойПояс);
	Поля.Вставить("END_TIME", Формат(Документ.ДатаФакт + Документ.ДлительностьЗвонка, "ДФ=dd.MM.yyyyTHH:mm:ss") + ЧасовойПояс);
	
КонецПроцедуры

Функция ЗаголовокАктивности(Документ)
	
	Возврат Строка(Документ);
	
КонецФункции

Функция СобытиеВыполнено(Документ)
	
	УсловияВыполненияСобытия = Новый Массив;
	ЗаполнитьУсловияВыполненияСобытия(Документ, УсловияВыполненияСобытия);
	
	Для Каждого УсловиеВыполнено Из УсловияВыполненияСобытия Цикл
		Если Не УсловиеВыполнено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьУсловияВыполненияСобытия(Документ, УсловияВыполненияСобытия)
	
	УсловияВыполненияСобытия.Добавить(Не Документ.ПометкаУдаления);
	УсловияВыполненияСобытия.Добавить(ЗначениеЗаполнено(Документ.ДатаФакт));
	УсловияВыполненияСобытия.Добавить(ЗначениеЗаполнено(ТипАктивностиПоВидуСобытия(Документ.ВидСобытия)));
	УсловияВыполненияСобытия.Добавить(ЗначениеЗаполнено(Документ.Клиент));
	
КонецПроцедуры

Функция ТипАктивностиПоВидуСобытия(ВидСобытия)
	
	ТипыАктивности = Новый Соответствие();
	ТипыАктивности.Вставить(Перечисления.ВидыСобытий.ВходящийЗвонок,	"2");
	ТипыАктивности.Вставить(Перечисления.ВидыСобытий.ИсходящийЗвонок,	"2");
	ТипыАктивности.Вставить(Перечисления.ВидыСобытий.ЛичнаяВстреча,		"1");
	
	Возврат Строка(ТипыАктивности.Получить(ВидСобытия));
	
КонецФункции

Функция НаправлениеАктивностиПоВидуСобытия(ВидСобытия)
	
	НаправленияАктивности = Новый Соответствие();
	НаправленияАктивности.Вставить(Перечисления.ВидыСобытий.ВходящийЗвонок,	 "1");
	НаправленияАктивности.Вставить(Перечисления.ВидыСобытий.ИсходящийЗвонок, "2");
	
	Возврат Строка(НаправленияАктивности.Получить(ВидСобытия));
	
КонецФункции

Функция ПолучитьКлиентаПоДаннымКлиентаИзЛида(ДанныеПоЛиду, НастройкаОбменаССайтом)
	
	Если Не ДанныеПоЛиду.Свойство("ДанныеКлиента") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Клиент = ВебИнтеграция.НайтиКлиента(ДанныеПоЛиду.ДанныеКлиента, Неопределено, НастройкаОбменаССайтом);
	
	Если Клиент = Неопределено Тогда
		Родитель = БитриксПовтИсп.ЗначениеНастройкиГруппаКлиентовИзБитрикс24();
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			ДанныеПоЛиду.ДанныеКлиента.Вставить("Родитель", Родитель);
		КонецЕсли;
		
		Клиент = CRMОбмен.ОбработатьДанныеКлиента(ДанныеПоЛиду.ДанныеКлиента);
	КонецЕсли;
	
	Возврат Клиент;
	
КонецФункции

Функция СформироватьНомераТелефонов(Клиент)
	
	НомераТелефонов = Новый Массив;
	КИОбъекта = ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон);
	Для Каждого СтрокаКИ Из КИОбъекта Цикл
		НомераТелефонов.Добавить(Новый Структура("VALUE, VALUE_TYPE", СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СтрокаКИ.Представление), ТипЗначенияПоВидуКИ(СтрокаКИ.Вид)));
	КонецЦикла;
	
	Возврат НомераТелефонов;
	
КонецФункции

Функция СформироватьАдресаПочты(Клиент)
	
	АдресаПочты = Новый Массив;
	КИОбъекта = ПолучитьКИОбъекта(Клиент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Для Каждого СтрокаКИ Из КИОбъекта Цикл
		АдресаПочты.Добавить(Новый Структура("VALUE, VALUE_TYPE", СтрокаКИ.Представление, ТипЗначенияПоВидуКИ(СтрокаКИ.Вид)));
	КонецЦикла;
	
	Возврат АдресаПочты;
	
КонецФункции

Функция ТипЗначенияПоВидуКИ(Вид)
	
	ТипыЗначенийПоВидуКИ = Новый Соответствие;
	ТипыЗначенийПоВидуКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДомашний,	"HOME");
	ТипыЗначенийПоВидуКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий,	"WORK");
	ТипыЗначенийПоВидуКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашний,					"HOME");
	ТипыЗначенийПоВидуКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочий,					"WORK");
	ТипыЗначенийПоВидуКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСотовый,					"MOBILE");
	ТипыЗначенийПоВидуКИ.Вставить(Справочники.ВидыКонтактнойИнформации.Факс,							"FAX");
	
	ТипЗначенияПоВидуКИ = ТипыЗначенийПоВидуКИ.Получить(Вид);
	
	Если ТипЗначенияПоВидуКИ = Неопределено Тогда
		Возврат "OTHER";
	Иначе
		Возврат ТипЗначенияПоВидуКИ;
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторСущностиЛида(Ссылка, ТекстОшибки = Неопределено)
	
	ИдентификаторЛида = ЛидИдентификатор(Ссылка);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЛида) Тогда
		ТекстОшибки = НСтр("ru='Этому документу не соответствует ни один лид в Битрикс24.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторЛида;
	
КонецФункции

Функция ИдентификаторСущностиКонтакта(Ссылка, ТекстОшибки = Неопределено)
	
	ИДКлиентаВБитриксе = КлиентИдентификатор(Ссылка);
	
	Если ИДКлиентаВБитриксе = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Клиент отсутствует в Битрикс24.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИДКлиентаВБитриксе;
	
КонецФункции

Функция ИдентификаторСущностиСделки(Ссылка, ТекстОшибки = Неопределено)
	
	ИдентификаторСделки = Неопределено;
	Если БитриксПовтИсп.ЗначениеНастройкиРежим1() Тогда
		
		УИДСделки = Неопределено;
		ПолеУИД = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД();
		
		Если ПолеУИД <> Неопределено Тогда
			Если БитриксПовтИсп.ЗначениеНастройкиРежим2()
				И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.Заявка")
			Тогда
				Заявка = Ссылка.ДокументОснование;
				Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Заявка") Тогда
					УИДСделки = Строка(Заявка.УникальныйИдентификатор());
				КонецЕсли;
			Иначе
				УИДСделки = Строка(Ссылка.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УИДСделки) Тогда
			СделкиПоУИД = ВыполнитьМетод("crm.deal", "list", , , Новый Структура(ПолеУИД, УИДСделки));
			Если СделкиПоУИД.Количество() > 0 Тогда
				ИдентификаторСделки = СделкиПоУИД[0].Получить("ID");
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Лиды = РегистрыСведений.Лиды.СрезПоследних(НачалоДня(Ссылка.Дата), Новый Структура("Клиент", Ссылка.Клиент));
		Лиды.Сортировать("Период Убыв");
		Если Лиды.Количество() <> 0 Тогда
			ИДЛидаСделки = ПолучитьИдентификаторЛидаБ24(Лиды[0]);
		КонецЕсли;
		
		Если ИДЛидаСделки <> Неопределено Тогда
			СделкиПоЛиду = ВыполнитьМетод("crm.deal", "list", , , Новый Структура("LEAD_ID", ИДЛидаСделки));
			Если СделкиПоЛиду <> Неопределено И СделкиПоЛиду.Количество() <> 0 Тогда
				ИдентификаторСделки = СделкиПоЛиду[0].Получить("ID");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторСделки) Тогда
		ТекстОшибки = НСтр("ru='Этому документу не соответствует ни одна сделка в Битрикс24.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаИдентификатора(ИдентификаторСделки);
	
КонецФункции

Функция ТекстОткрытияКарточкиЛида(Ссылка, ИдентификаторПользователя, ИдентификаторСущности)
	
	Возврат СтрШаблон(ШаблонТекстаУведомления(), НСтр("ru = 'Лид'"), "lead", ИдентификаторСущности, Строка(Ссылка));
	
КонецФункции

Функция ТекстОткрытияКарточкиКлиента(Ссылка, ИдентификаторПользователя, ИдентификаторСущности)
	
	Возврат СтрШаблон(ШаблонТекстаУведомления(), НСтр("ru = 'Клиент'"), "contact", ИдентификаторСущности, Ссылка.Наименование);
	
КонецФункции

Функция ТекстОткрытияКарточкиСделки(Ссылка, ИдентификаторПользователя, ИдентификаторСущности)
	
	Возврат СтрШаблон(ШаблонТекстаУведомления(), НСтр("ru = 'Сделка'"), "deal", ИдентификаторСущности, Строка(Ссылка));
	
КонецФункции

Функция ШаблонТекстаУведомления()
	
	Возврат "[b]%1: [/b][url=/crm/%2/details/%3/]%4[/url]";
	
КонецФункции

Функция ОтправитьДанныеОУ(Документ)
	
	Если БитриксПовтИсп.ЗначениеНастройкиРежим1() Тогда
		Возврат АктуализироватьСделкуПоОУ(Документ);
	Иначе
		Возврат АктуализироватьОбщуюСделку(Документ);
	КонецЕсли;
	
КонецФункции

Функция АктуализироватьСделкуПоОУ(Документ)
	
	УИДДокументаДляПоляСделки = Неопределено;
	ПолеУИД = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД();
	
	Если ПолеУИД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Режим2 = БитриксПовтИсп.ЗначениеНастройкиРежим2();
	Если Режим2 Тогда
		
		Заявка = Документ.ДокументОснование;
		
		Если ТипЗнч(Заявка) <> Тип("ДокументСсылка.Заявка") Тогда
			Возврат Истина;
		КонецЕсли;
		
		УИДСделки = Строка(Заявка.УникальныйИдентификатор());
	Иначе
		УИДСделки = Строка(Документ.УникальныйИдентификатор());
	КонецЕсли;
	
	СделкиПоУИД = ВыполнитьМетод("crm.deal", "list", , , Новый Структура(ПолеУИД, УИДСделки));
	
	Если СделкиПоУИД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СделкиПоУИД.Количество() > 0 И Документ.ПометкаУдаления Тогда
		Для Каждого СделкаПоУИД Из СделкиПоУИД Цикл
			ОтменитьСделку(СтрокаИдентификатора(СделкаПоУИД["ID"]));
		КонецЦикла;
	КонецЕсли;
	
	Если Не Режим2 И СделкиПоУИД.Количество() = 0 И БитриксПовтИсп.РежимЗагрузкиКачественногоЛида() Тогда
		Лиды = РегистрыСведений.Лиды.СрезПоследних(НачалоДня(Документ.Дата), Новый Структура("Клиент", Документ.Клиент));
		Лиды.Сортировать("Период Убыв");
		Если Лиды.Количество() <> 0 Тогда
			СтрокаЛида = Лиды[0];
			ИдентификаторЛида = ПолучитьИдентификаторЛидаБ24(СтрокаЛида);
			Если ЗначениеЗаполнено(ИдентификаторЛида) Тогда
				СделкаПоЛиду = ВыполнитьМетод("crm.deal", "list",,, Новый Структура(СтрШаблон("%1,LEAD_ID", ПолеУИД), Неопределено, ИдентификаторЛида));
				Если СделкаПоЛиду.Количество() > 0 Тогда
					СделкиПоУИД.Добавить(СделкаПоЛиду[0]);
					УИДДокументаДляПоляСделки = УИДСделки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СделкиПоУИД.Количество() = 0 Тогда
		Если Режим2 Тогда
			// Сделку создаёт заявка, по ОУ пока ничего не отправляем
			Возврат Ложь;
		Иначе
			Возврат СоздатьНовуюСделку(Документ, УИДСделки);
		КонецЕсли;
	Иначе
		СделкиОбновлены = Истина;
		Для Каждого СделкаПоУИД Из СделкиПоУИД Цикл
			СделкаОбновлена = ОбновитьПоляСделки(СтрокаИдентификатора(СделкаПоУИД["ID"]), Документ, УИДДокументаДляПоляСделки);
			Если Не СделкаОбновлена Тогда
				СделкиОбновлены = Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат СделкиОбновлены;
	КонецЕсли;
	
КонецФункции

Функция АктуализироватьОбщуюСделку(Документ, ИдентификаторЛида = Неопределено)
	
	Если ИдентификаторЛида = Неопределено Тогда
		
		Лиды = РегистрыСведений.Лиды.СрезПоследних(НачалоДня(Документ.Дата), Новый Структура("Клиент", Документ.Клиент));
		Лиды.Сортировать("Период Убыв");
		
		Если Лиды.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаЛида = Лиды[0];
		
		ИДЛидаСделки = ПолучитьИдентификаторЛидаБ24(СтрокаЛида);
		Если ИДЛидаСделки = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ИДЛидаСделки = ИдентификаторЛида;
		ДокументЛида = ЛидПоИдентификатору(ИДЛидаСделки);
		
		Если ДокументЛида = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Лиды = РегистрыСведений.Лиды.СоздатьНаборЗаписей();
		Лиды.Отбор.Клиент.Установить(ДокументЛида.Клиент);
		Лиды.Отбор.Лид.Установить(ДокументЛида);
		Лиды.Прочитать();
		Если Лиды.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		СтрокаЛида = Лиды[0];
		
	КонецЕсли;
	
	СделкаПоЛиду = ВыполнитьМетод("crm.deal", "list", , , Новый Структура("LEAD_ID", ИДЛидаСделки));
	
	Если СделкаПоЛиду = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СделкаПоЛиду.Количество() = 0 Тогда
		Если ИдентификаторЛида = Неопределено Тогда
			Успешно = Ложь;
			ИдентификаторСделки = СоздатьНовуюСделкуПоЛидуВБ24(ИДЛидаСделки, Успешно);
			Если Не Успешно Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ИдентификаторСделки = СделкаПоЛиду[0]["ID"];
	КонецЕсли;
	
	СуммаПродаж = 0;
	
	Продажи = РегистрыНакопления.Продажи.Обороты(СтрокаЛида.Период, СтрокаЛида.ДатаОкончания, Новый Структура("Клиент", СтрокаЛида.Клиент),"Клиент", "Сумма");
	Для Каждого Продажа Из Продажи Цикл
		СуммаПродаж = СуммаПродаж + Продажа.Сумма;
	КонецЦикла;
	
	Если ИдентификаторСделки <> Неопределено Тогда
		
		Поля = Новый Структура;
		Поля.Вставить("OPPORTUNITY", СуммаПродаж);
		
		ПолеДатыСозданияСделки = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаДатаСоздания(); 
		Если ПолеДатыСозданияСделки <> Неопределено Тогда
			Поля.Вставить(ПолеДатыСозданияСделки, СтрокаЛида.Период);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЛида.ДатаОкончания) Тогда
			Поля.Вставить("CLOSEDATE", СтрокаЛида.ДатаОкончания);
		КонецЕсли;
		ВыполнитьМетод("crm.deal", "update", ИдентификаторСделки, Поля);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьДанныеЗаявки(Заявка)
	
	УИДДокументаДляПоляСделки = Неопределено;
	ПолеУИД = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД();
	
	Если ПолеУИД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УИДСделки = Строка(Заявка.УникальныйИдентификатор());
	
	СделкиПоУИД = ВыполнитьМетод("crm.deal", "list", , , Новый Структура(ПолеУИД, УИДСделки));
	
	Если СделкиПоУИД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СделкиПоУИД.Количество() = 0 И БитриксПовтИсп.РежимЗагрузкиКачественногоЛида() Тогда
		Лиды = РегистрыСведений.Лиды.СрезПоследних(НачалоДня(Заявка.Дата), Новый Структура("Клиент", Заявка.Клиент));
		Лиды.Сортировать("Период Убыв");
		Если Лиды.Количество() <> 0 Тогда
			СтрокаЛида = Лиды[0];
			ИдентификаторЛида = ПолучитьИдентификаторЛидаБ24(СтрокаЛида);
			Если ЗначениеЗаполнено(ИдентификаторЛида) Тогда
				СделкаПоЛиду = ВыполнитьМетод("crm.deal", "list",,, Новый Структура(СтрШаблон("%1, LEAD_ID", ПолеУИД), Неопределено, ИдентификаторЛида));
				Если СделкаПоЛиду.Количество() > 0 Тогда
					СделкиПоУИД.Добавить(СделкаПоЛиду[0]);
					УИДДокументаДляПоляСделки = УИДСделки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если БитриксПовтИсп.ЗначениеНастройкиРежим2() Тогда
		Если СделкиПоУИД.Количество() = 0 Тогда
			Если Заявка.Состояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена
				Или ЗаявкаПросрочена(Заявка)
				Или Заявка.ПометкаУдаления
			Тогда
				Возврат Истина;
			Иначе
				Возврат СоздатьНовуюСделку(Заявка, УИДСделки);
			КонецЕсли;
		Иначе
			
			ПоляСделки = СделкиПоУИД[0];
			Если Заявка.Состояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена
				Или ЗаявкаПросрочена(Заявка)
				Или Заявка.ПометкаУдаления
			Тогда
				Возврат ОтменитьСделку(ПоляСделки["ID"]);
			КонецЕсли;
			
			СостоянияЗаявкиДоПродажи = УправлениеЗаявками.СостоянияЗаявкиДоПродажи();
			Если СостоянияЗаявкиДоПродажи.Найти(Заявка.Состояние) <> Неопределено
				И ВРег(ПоляСделки.Получить("STAGE_SEMANTIC_ID")) = "P" // Сделка еще не завершена
			Тогда
				Возврат ОбновитьПоляСделки(СтрокаИдентификатора(ПоляСделки.Получить("ID")), Заявка, УИДДокументаДляПоляСделки);
			ИначеЕсли ПоляСделки.Получить("ASSIGNED_BY_ID") <> БитриксПовтИсп.ИдентификаторПользователя(Заявка.Ответственный) Тогда
				ОбновитьОтветственного(СтрокаИдентификатора(ПоляСделки.Получить("ID")), Заявка);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БитриксПовтИсп.ЗначениеНастройкиРежим3() И СделкиПоУИД.Количество() = 0 Тогда
		Возврат ИзменитьЛидПоЗаявке(Заявка);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИзменитьЛидПоЗаявке(Заявка)
	
	Лиды = РегистрыСведений.Лиды.СрезПоследних(НачалоДня(Заявка.Дата), Новый Структура("Клиент", Заявка.Клиент));
	Лиды.Сортировать("Период Убыв");
	
	Если Лиды.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаЛида = Лиды[0];
	
	ИдентификаторЛида = ПолучитьИдентификаторЛидаБ24(СтрокаЛида);
	Если ИдентификаторЛида = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Заявка.Ссылка) КАК КоличествоЗаявок,
		|	Заявка.Состояние КАК Состояние
		|ИЗ
		|	Документ.Заявка КАК Заявка
		|ГДЕ
		|	Заявка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И Заявка.Клиент = &Клиент
		|	И НЕ Заявка.Состояние.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
		|	И НЕ Заявка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Заявка.Состояние";
	
	Запрос.УстановитьПараметр("ДатаНач", СтрокаЛида.Период);
	Запрос.УстановитьПараметр("ДатаКон", ?(ЗначениеЗаполнено(СтрокаЛида.ДатаОкончания), СтрокаЛида.ДатаОкончания, ТекущаяДата()));
	Запрос.УстановитьПараметр("Клиент",	 Заявка.Клиент);
	
	КоличествоЗаявокПоСостояниям = Запрос.Выполнить().Выгрузить();
	ЕстьНеотмененныеЗаявки = КоличествоЗаявокПоСостояниям.Количество() > 0;
	
	Если Заявка.Состояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена
		Или ЗаявкаПросрочена(Заявка)
	Тогда
		Если Не ЕстьНеотмененныеЗаявки Тогда
			Возврат ИзменитьСтатусЛида(ИдентификаторЛида, БитриксПовтИсп.ИдСтатусаЛидОтказ());
		КонецЕсли;
	Иначе
		СостоянияЗаявкиДоПродажи = УправлениеЗаявками.СостоянияЗаявкиДоПродажи();
		Если СостоянияЗаявкиДоПродажи.Найти(Заявка.Состояние) <> Неопределено
			Или Заявка.Состояние = Справочники.ВидыСостоянийЗаявок.Выполнена
			Или Заявка.Состояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Выполнена
		Тогда
		    Возврат УстановитьСтатусЛидаЗаписьНаПрием(ИдентификаторЛида);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьИдентификаторЛидаБ24(СтрокаЛида, ОтправлятьЛид = Истина)
	
	ИдентификаторЛида = ЛидИдентификатор(СтрокаЛида.Лид);
	
	Если ИдентификаторЛида = Неопределено Тогда
		// Такого лида нет в битриксе
		
		Если Не ОтправлятьЛид Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИдентификаторЛида = ОтправитьДанныеОбращения(СтрокаЛида.Лид);
		Если ИдентификаторЛида = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЛидДобавитьИдентификатор(СтрокаЛида.Лид, ИдентификаторЛида);
	КонецЕсли;
	
	Возврат ИдентификаторЛида;
	
КонецФункции

Функция СоздатьНовуюСделку(Документ, УИДСделки)
	
	Лиды = РегистрыСведений.Лиды.СрезПоследних(НачалоДня(Документ.Дата), Новый Структура("Клиент", Документ.Клиент));
	Лиды.Сортировать("Период Убыв");
	
	Если Лиды.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторЛида = ПолучитьИдентификаторЛидаБ24(Лиды[0]);
	
	Если ИдентификаторЛида = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Успешно = Ложь;
	ИдентификаторСделки = СоздатьНовуюСделкуПоЛидуВБ24(ИдентификаторЛида, Успешно, Документ, УИДСделки);
	Если Не Успешно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИдентификаторСделки <> Неопределено Тогда
		Возврат ОбновитьПоляСделки(ИдентификаторСделки, Документ, УИДСделки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьНовуюСделкуПоЛидуВБ24(ИдентификаторЛида, Успешно, Документ = Неопределено, УИДСделки = "")
	
	РежимСозданияСделки = БитриксПовтИсп.ЗначениеНастройкиРежимСозданияСделки();
	
	Если РежимСозданияСделки = 0 Тогда
		
		НесконвертированныйЛид = РегистрыСведений.Б24_НесконвертированныеЛиды.СоздатьНаборЗаписей();
		НесконвертированныйЛид.Отбор.ИдентификаторЛида.Установить(ИдентификаторЛида);
		НесконвертированныйЛид.Отбор.Документ.Установить(Документ);
		НесконвертированныйЛид.Прочитать();
		Если НесконвертированныйЛид.Количество() = 0 Тогда
			МЗ = РегистрыСведений.Б24_НесконвертированныеЛиды.СоздатьМенеджерЗаписи();
			МЗ.ИдентификаторЛида = ИдентификаторЛида;
			МЗ.Документ = Документ;
			МЗ.Записать();
		КонецЕсли;
		
		СделкаСуществует = Ложь;
		Сообщение = НСтр("ru = 'Требуется создать сделку по лиду с ID ""%1"" в битриксе.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(Сообщение, ИдентификаторЛида));
		
		ИдентификаторСделки = Неопределено;
	Иначе
		
		СписокСделокПоЛиду = ВыполнитьМетод("crm.deal", "list",,, Новый Структура("LEAD_ID", ИдентификаторЛида));
		СозданиеНовойСделки = СписокСделокПоЛиду.Количество() > 0;
		
		// 1. Запуск бизнес процесса
		СтруктураПараметров = Новый Структура;
		Если СозданиеНовойСделки И ЗначениеЗаполнено(УИДСделки) Тогда
			ИдентификаторКонтакта = СтрокаИдентификатора(СписокСделокПоЛиду[0]["CONTACT_ID"]);
			ЗаполнитьСтруктуруПараметровБПСделкиПоКонтакту(СтруктураПараметров, ИдентификаторКонтакта, УИДСделки, ИдентификаторЛида, Документ);
		Иначе
			ДанныеЛида = ВыполнитьМетод("crm.lead", "get", ИдентификаторЛида);
			Если ДанныеЛида = Неопределено Тогда
				// Конвертируемый лид отсутствует в Б24
				Успешно = Истина;
				Возврат Неопределено;
			КонецЕсли;
			
			Если ДанныеЛида.Получить("STATUS_ID") = "CONVERTED" Тогда
				ИдентификаторКонтакта = СтрокаИдентификатора(ДанныеЛида["CONTACT_ID"]);
				ЗаполнитьСтруктуруПараметровБПСделкиПоКонтакту(СтруктураПараметров, ИдентификаторКонтакта, УИДСделки, ИдентификаторЛида, Документ);
			Иначе
				ЗаполнитьСтруктуруПараметровБПСделкиПоЛиду(СтруктураПараметров, ИдентификаторЛида);
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьМетод("bizproc.workflow", "start",,,,, СтруктураПараметров); 
		
		// 2. Получение сделки по лиду
		Если СозданиеНовойСделки И ЗначениеЗаполнено(УИДСделки) Тогда
			ПолеУИД = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД();
			СписокСделокПоЛиду = ВыполнитьМетод("crm.deal", "list",,, Новый Структура(ПолеУИД, УИДСделки));
		Иначе
			СписокСделокПоЛиду = ВыполнитьМетод("crm.deal", "list",,, Новый Структура("LEAD_ID", ИдентификаторЛида));
		КонецЕсли;
		
		Попытка
			ИдентификаторСделки = СтрокаИдентификатора(СписокСделокПоЛиду[0]["ID"]);
		Исключение
			Успешно = Ложь;
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Успешно = ЗначениеЗаполнено(ИдентификаторСделки);
	Возврат ИдентификаторСделки;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПараметровБПСделкиПоКонтакту(СтруктураПараметров, ИдентификаторКонтакта, УИДСделки, ИдентификаторЛида, Документ)
	
	ИдентификаторШаблона = БитриксПовтИсп.ЗначениеНастройкиШаблонБПСозданияСделкиПоКлиенту();
	
	ПараметрыШаблонаБП = Новый Структура;
	
	ПараметрыШаблонаБП.Вставить("CONTACT_ID",	ИдентификаторКонтакта);
	ПараметрыШаблонаБП.Вставить("DEAL_UID",		УИДСделки);
	ПараметрыШаблонаБП.Вставить("DEAL_NAME",	НаименованиеСделки(ИдентификаторЛида, Документ));
	
	ПараметрыБП = Новый Массив;
	ПараметрыБП.Добавить("crm");
	ПараметрыБП.Добавить("CCrmDocumentContact");
	ПараметрыБП.Добавить(ИдентификаторКонтакта);
	
	СтруктураПараметров.Вставить("PARAMETERS", ПараметрыШаблонаБП);
	СтруктураПараметров.Вставить("TEMPLATE_ID", ИдентификаторШаблона);
	СтруктураПараметров.Вставить("DOCUMENT_ID", ПараметрыБП);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПараметровБПСделкиПоЛиду(СтруктураПараметров, ИдентификаторЛида)
	
	ИдентификаторШаблона = БитриксПовтИсп.ЗначениеНастройкиШаблонБПКонвертацииЛида();
	
	ПараметрыБП = Новый Массив;
	ПараметрыБП.Добавить("crm");
	ПараметрыБП.Добавить("CCrmDocumentLead");
	ПараметрыБП.Добавить(ИдентификаторЛида);
	
	СтруктураПараметров.Вставить("PARAMETERS", Неопределено);
	СтруктураПараметров.Вставить("TEMPLATE_ID", ИдентификаторШаблона);
	СтруктураПараметров.Вставить("DOCUMENT_ID", ПараметрыБП);
	
КонецПроцедуры

Функция НаименованиеСделки(ИдентификаторЛида, Документ)
	
	ДанныеПоЛиду = ВыполнитьМетод("crm.lead", "get", ИдентификаторЛида);
	Возврат ДанныеПоЛиду.Получить("TITLE");
	
КонецФункции

Функция ИдентификаторОтветственногоДокумента(Документ)
	
	ИдентификаторОтветственного = БитриксПовтИсп.ИдентификаторПользователя(Документ.Ответственный);
	Если ИдентификаторОтветственного <> Неопределено Тогда
		Возврат СтрШаблон("user_%1", ИдентификаторОтветственного);
	КонецЕсли;
	
	Возврат "";

КонецФункции

Функция ОбновитьПоляСделки(ИДСделки, Документ, УИДДокументаДляПоляСделки = Неопределено, ИДЛида = Неопределено)
	
	Если ИДЛида <> Неопределено Тогда
		ИДСделки = ПолучитьСделкуПоЛидуБезУИД(ИДЛида);
		Если ИДСделки = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Поля = Новый Структура;
	
	Если БитриксПовтИсп.ЗначениеНастройкиРежим2()
		И ТипЗнч(Документ) = Тип("ДокументСсылка.Заявка")
	Тогда
		ОбновитьОтветственного(ИДСделки, Документ);
		ДополнитьПоляПоЗаявке(Поля, Документ);
	Иначе
		ДополнитьПоляПоОУ(Поля, Документ);
		Если Не БитриксПовтИсп.ЗначениеНастройкиРежим2() Тогда
			ОбновитьОтветственного(ИДСделки, Документ);
		КонецЕсли;
	КонецЕсли;
	
	ПолеУИДСделки = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД();
	
	Если УИДДокументаДляПоляСделки <> Неопределено И ЗначениеЗаполнено(ПолеУИДСделки) Тогда
		Поля.Вставить(ПолеУИДСделки, УИДДокументаДляПоляСделки);
	КонецЕсли;
	
	Результат = ВыполнитьМетод("crm.deal", "update", ИДСделки, Поля);
	Возврат Результат <> Неопределено;
	
КонецФункции

Процедура ОбновитьОтветственного(ИДСделки, Документ)
	
	ИдентификаторШаблона = БитриксПовтИсп.ЗначениеНастройкиШаблонБПИзменениеОтветственного();
	Если Не ЗначениеЗаполнено(ИдентификаторШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыБП = Новый Массив;
	ПараметрыБП.Добавить("crm");
	ПараметрыБП.Добавить("CCrmDocumentDeal");
	ПараметрыБП.Добавить(ИДСделки);
	
	Ответственный = ИдентификаторОтветственногоДокумента(Документ); 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("PARAMETERS", Новый Структура("AUTHOR_ID", Ответственный));
	СтруктураПараметров.Вставить("TEMPLATE_ID", ИдентификаторШаблона);
	СтруктураПараметров.Вставить("DOCUMENT_ID", ПараметрыБП);
	
	ВыполнитьМетод("bizproc.workflow", "start",,,,, СтруктураПараметров); 
	
КонецПроцедуры

Функция ПолучитьСделкуПоЛидуБезУИД(ИДЛида)
	
	ПолеУИД = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД();
	
	Если Не ЗначениеЗаполнено(ПолеУИД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СделкиПоЛидуБезУИД = ВыполнитьМетод("crm.deal", "list", , , Новый Структура(СтрШаблон("LEAD_ID, %1", ПолеУИД), ИДЛида, Неопределено));
	
	Для Каждого СделкаПоЛидуБезУИД Из СделкиПоЛидуБезУИД Цикл
		Возврат СтрокаИдентификатора(СделкаПоЛидуБезУИД.Получить("ID"));
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДополнитьПоляПоЗаявке(Поля, Заявка)
	
	Поля.Вставить("OPPORTUNITY", 0);
	
	ПолеНоменклатур = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаСписокНоменклатур();
	Если ПолеНоменклатур <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СпрНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
			|	СпрНоменклатура.Наименование КАК Наименование
			|ИЗ
			|	Документ.Заявка.Работы КАК ЗаявкаРаботы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО ЗаявкаРаботы.Номенклатура = СпрНоменклатура.Ссылка
			|ГДЕ
			|	ЗаявкаРаботы.Ссылка = &Заявка";
		
		Запрос.УстановитьПараметр("Заявка", Заявка);
		
		НаименованияНоменклатур = Новый Массив;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаименованиеНоменклатуры = ?(ЗначениеЗаполнено(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.Наименование);
			НаименованияНоменклатур.Добавить(НаименованиеНоменклатуры);
		КонецЦикла;
		Поля.Вставить(ПолеНоменклатур, НаименованияНоменклатур);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоляПоОУ(Поля, Документ)
	
	мДокументы = Новый Массив;
	
	Если БитриксПовтИсп.ЗначениеНастройкиРежим2() Тогда
		СуммаПродаж = 0;
		Заявка = Документ.ДокументОснование;
		
		// 1. Сбор всех ОУ с этой заявкой в основании
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОказаниеУслуг.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ОУПоЗаявке
			|ИЗ
			|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
			|ГДЕ
			|	ОказаниеУслуг.ДокументОснование = &Заявка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОУПоЗаявке.Ссылка КАК Ссылка
			|ИЗ
			|	ОУПоЗаявке КАК ОУПоЗаявке
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОказаниеУслугЗаявки.Заявка КАК Заявка
			|ИЗ
			|	ОУПоЗаявке КАК ОУПоЗаявке
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОказаниеУслуг.Заявки КАК ОказаниеУслугЗаявки
			|		ПО (ОказаниеУслугЗаявки.Ссылка = ОУПоЗаявке.Ссылка)
			|			И (НЕ ОказаниеУслугЗаявки.Заявка = &Заявка)";
		
		Запрос.УстановитьПараметр("Заявка", Заявка);
		
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		
		ВыборкаОУ = ПакетЗапросов[1].Выбрать();
		
		Пока ВыборкаОУ.Следующий() Цикл
			мДокументы.Добавить(ВыборкаОУ.Ссылка);
		КонецЦикла;
	
		// 2. Сбор всех заявок, которые есть в ТЧ Заявки во всех собранных ОУ
		ОстальныеЗаявки = Новый Массив;
		ВыборкаОстальныхЗаявок = ПакетЗапросов[2].Выбрать();
		Пока ВыборкаОстальныхЗаявок.Следующий() Цикл
			ОстальныеЗаявки.Добавить(ВыборкаОстальныхЗаявок.Заявка);
		КонецЦикла;
		
		// 3. Этой заявке повезло, вся сумма уходит сделке по ней, все остальные сделки по заявкам из 2. закрываются с Σ=0
		ЗакрытьСуществующиеСделкиПоЗаявкам(ОстальныеЗаявки);
		
	Иначе
		мДокументы.Добавить(Документ);
		ПолеНоменклатур = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаСписокНоменклатур();
		Если ПолеНоменклатур <> Неопределено Тогда
			НаименованияНоменклатур = Новый Массив;
			Для Каждого СтрокаРаботы Из Документ.Работы Цикл
				Номенклатура = СтрокаРаботы.Номенклатура;
				НаименованияНоменклатур.Добавить(?(ЗначениеЗаполнено(Номенклатура.НаименованиеПолное), Номенклатура.НаименованиеПолное, Номенклатура.Наименование));
			КонецЦикла;
			Поля.Вставить(ПолеНоменклатур, НаименованияНоменклатур);
		КонецЕсли;
	КонецЕсли;
	
	СуммаПродаж = ПолучитьСуммуПродажПоДокументу(мДокументы);
	
	Поля.Вставить("OPPORTUNITY", СуммаПродаж);
	ИдСтатуса = ?(СуммаПродаж > 0, БитриксПовтИсп.ИдСтатусаСделкаЗавершена(), БитриксПовтИсп.ИдСтатусаСделкаОтказ());
	Поля.Вставить("STAGE_ID", ИдСтатуса);
	
КонецПроцедуры

Процедура ЗакрытьСуществующиеСделкиПоЗаявкам(Заявки)
	
	ПолеУИД = БитриксПовтИсп.ИмяПользовательскогоПоляСделкаУИД();
	Если Не ЗначениеЗаполнено(ПолеУИД) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Заявка Из Заявки Цикл
		Сделки = ВыполнитьМетод("crm.deal", "list", , , Новый Структура(СтрШаблон("STAGE_SEMANTIC_ID, %1", ПолеУИД), "P", Строка(Заявка.УникальныйИдентификатор())));
		Для Каждого Сделка Из Сделки Цикл
			Поля = Новый Структура("STAGE_ID, OPPORTUNITY", БитриксПовтИсп.ИдСтатусаСделкаЗавершена(), 0);
			ВыполнитьМетод("crm.deal", "update", СтрокаИдентификатора(Сделка["ID"]), Поля);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтменитьСделку(ИДСделки)
	
	Поля = Новый Структура("STAGE_ID", БитриксПовтИсп.ИдСтатусаСделкаОтказ());
	Результат = ВыполнитьМетод("crm.deal", "update", ИДСделки, Поля);
	Возврат Результат <> Неопределено;
	
КонецФункции

Функция УстановитьСтатусЛидаЗаписьНаПрием(ИдентификаторЛида)
	
	ТекущийСтатус = Неопределено;
	ПоляЛида = ВыполнитьМетод("crm.lead", "get", ИдентификаторЛида);
	
	Если ПоляЛида <> Неопределено Тогда
		ТекущийСтатус = ПоляЛида.Получить("STATUS_ID");
	КонецЕсли;
	
	НовыйСтатус = БитриксПовтИсп.ИдСтатусаЛидЗаписанНаПрием();
	
	Если Не (ЗначениеЗаполнено(ТекущийСтатус) И ТекущийСтатусЛидаМеньше(ТекущийСтатус, НовыйСтатус)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ИзменитьСтатусЛида(ИдентификаторЛида, НовыйСтатус);
	
КонецФункции

Функция ТекущийСтатусЛидаМеньше(ТекущийСтатус, ПроверяемыйСтатус)
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусов();
	
	ПорядокТекущегоСтатуса		= ПолучитьПорядокСтатуса(ТаблицаСтатусов, ТекущийСтатус);
	ПорядокСтатусаЗаписиНаПрием	= ПолучитьПорядокСтатуса(ТаблицаСтатусов, ПроверяемыйСтатус);
	
	Возврат ПорядокТекущегоСтатуса < ПорядокСтатусаЗаписиНаПрием;
	
КонецФункции

Функция ПолучитьТаблицуСтатусов()
	
	Фильтр = Новый Структура("ENTITY_ID", "STATUS");
	ПараметрСортировки = Новый Структура("order", Новый Структура("SORT", "ASC"));
	
	СтатусыЛидов = Битрикс.ВыполнитьМетод("crm.status", "list",,, Фильтр,, ПараметрСортировки);
	
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("SORT");
	ТаблицаСтатусов.Колонки.Добавить("STATUS_ID");
	
	Для Каждого Статус Из СтатусыЛидов Цикл
		СтрокаСтатуса = ТаблицаСтатусов.Добавить();
		СтрокаСтатуса.SORT		= Число(Статус.Получить("SORT"));
		СтрокаСтатуса.STATUS_ID	= Статус.Получить("STATUS_ID");
	КонецЦикла;
	
	ТаблицаСтатусов.Сортировать("SORT");
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПолучитьПорядокСтатуса(ТаблицаСтатусов, Статус)
	
	СтрокаСтатуса = ТаблицаСтатусов.Найти(Статус, "STATUS_ID");
	
	Если СтрокаСтатуса <> Неопределено
		И ЗначениеЗаполнено(СтрокаСтатуса.SORT)
	Тогда
		Возврат СтрокаСтатуса.SORT;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ИзменитьСтатусЛида(ИДЛида, ИдентификаторСтатуса)
	
	Если ИдентификаторСтатуса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Поля = Новый Структура("STATUS_ID", ИдентификаторСтатуса);
	Результат = ВыполнитьМетод("crm.lead", "update", ИДЛида, Поля);
	Возврат Результат <> Неопределено;
	
КонецФункции

Функция НайтиКлиентаВБитриксе(Клиент)
	
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("LAST_NAME",	Клиент.Фамилия);
	СтруктураКлиента.Вставить("NAME",		Клиент.Имя);
	СтруктураКлиента.Вставить("SECOND_NAME",Клиент.Отчество);
	
	КлиентыПоФИОВБитриксе = ВыполнитьМетод("crm.contact", "list",,,СтруктураКлиента);
	Если КлиентыПоФИОВБитриксе <> Неопределено Тогда
		Для Каждого КлиентПоФИО Из КлиентыПоФИОВБитриксе Цикл
			
			Если ЗначениеЗаполнено(КлиентПоФИО["BIRTHDATE"]) Тогда
				ДатаРождения = НачалоДня(ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(КлиентПоФИО["BIRTHDATE"]));
			Иначе
				ДатаРождения = Дата(1,1,1);
			КонецЕсли;
			
			Если ДатаРождения = Клиент.ДатаРождения Тогда
				Возврат СтрокаИдентификатора(КлиентПоФИО["ID"]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыТелаЗапроса(ТелоЗапроса)
	
	ПараметрыЗапроса = Новый Соответствие;
	Для Каждого СтрокаПараметра Из СтрРазделить(ТелоЗапроса, "&", Ложь) Цикл
		
		КлючИЗначение = СтрРазделить(СтрокаПараметра, "=");
		Ключ = КлючИЗначение[0];
		Если КлючИЗначение.Количество() > 1 Тогда
			Значение = КлючИЗначение[1];
		Иначе
			Значение = "";
		КонецЕсли;
		ПараметрыЗапроса.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПолучитьДанныеПоЛиду(Поля)
	
	ДанныеПоЛиду = Новый Структура;
	
	Примечание = Строка(Поля["COMMENTS"]);
	
	Мессенджеры = Поля.Получить("IM");
	Если Мессенджеры <> Неопределено Тогда
		ИдентификаторОткрытойЛинии = СтрЗаменить(Мессенджеры[0]["VALUE"], "imol|", "");
		ДанныеЧата = ВыполнитьМетод("im.chat", "get",,,,,Новый Структура("ENTITY_TYPE, ENTITY_ID", "LINES", ИдентификаторОткрытойЛинии));
		Если ДанныеЧата <> Неопределено Тогда
			ИдентификаторЧата = СтрокаИдентификатора(ДанныеЧата["ID"]);
			СообщенияВЧате = ВыполнитьМетод("im.dialog.messages", "get",,,,,Новый Структура("DIALOG_ID, LIMIT", СтрШаблон("chat%1", ИдентификаторЧата), "100"))["messages"];
			Если СообщенияВЧате.Количество() > 0 Тогда
				
				Сообщения = Новый ТаблицаЗначений;
				Сообщения.Колонки.Добавить("Автор");
				Сообщения.Колонки.Добавить("Дата");
				Сообщения.Колонки.Добавить("Текст");
				Для Каждого СообщениеВчате Из СообщенияВЧате Цикл
					Автор = СообщениеВчате["author_id"];
					Если ЗначениеЗаполнено(Автор) Тогда
						НовоеСообщение = Сообщения.Добавить();
						НовоеСообщение.Автор = Автор;
						НовоеСообщение.Дата = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(СообщениеВчате["date"]);
						НовоеСообщение.Текст = СообщениеВчате["text"];
					КонецЕсли;
				КонецЦикла;
				
				ИдКлиентаВЧате = Сообщения[Сообщения.Количество()-1].Автор;
				Сообщения.Сортировать("Дата");
				
				СообщенияПримечания = Новый Массив;
				Для Каждого Сообщение Из Сообщения Цикл
					ТекстСообщения = СтрШаблон("[%1] %2 %3", Строка(Формат(Сообщение.Дата, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'")), ?(Сообщение.Автор = ИдКлиентаВЧате, "Клиент:", "Оператор:"), Сообщение.Текст);
					СообщенияПримечания.Добавить(ТекстСообщения);
				КонецЦикла;
				
				Если СообщенияПримечания.Количество() > 0
					И ЗначениеЗаполнено(Примечание)
				Тогда
					Примечание = Примечание + Символы.ПС + Символы.ПС + СтрСоединить(СообщенияПримечания, Символы.ПС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПоЛиду.Вставить("Примечание", Примечание);
	СтруктураUTM = CRMОбмен.ПолучитьUTM(Поля, Поля);
	
	Если Не ЗначениеЗаполнено(СтруктураUTM.utm_source) Тогда
		НастройкаОбменаССайтом = БитриксПовтИсп.ЗначениеНастройкиНастройкаОбменаССайтом();
		СтруктураUTM.Вставить("utm_source", НастройкаОбменаССайтом.ИсточникИнформации);
	КонецЕсли;
	
	ДанныеПоЛиду.Вставить("UTM", СтруктураUTM);
	
	ИдентификаторКлиента = СтрокаИдентификатора(Поля.Получить("CONTACT_ID"));
	
	Если ЗначениеЗаполнено(ИдентификаторКлиента) Тогда
		Поля = ВыполнитьМетод("crm.contact", "get", ИдентификаторКлиента);
		ДанныеПоЛиду.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	КонецЕсли;
	
	ДанныеКлиента = Новый Структура;
	
	ДанныеКлиента.Вставить("Фамилия",	Поля.Получить("LAST_NAME"));
	ДанныеКлиента.Вставить("Имя",		Поля.Получить("NAME"));
	ДанныеКлиента.Вставить("Отчество",	Поля.Получить("SECOND_NAME"));
	Попытка
		ДанныеКлиента.Вставить("ДатаРождения",	НачалоДня(ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(Поля.Получить("BIRTHDATE"))));
	Исключение 
		ДанныеКлиента.Вставить("ДатаРождения",	Дата(1,1,1));
	КонецПопытки;
	
	ТелефоныКлиента = Новый Массив;
	Если Поля.Получить("PHONE") <> Неопределено Тогда
		Для Каждого Телефон Из Поля.Получить("PHONE") Цикл
			ЗначениеНомераТелефона = Строка(Телефон.Получить("VALUE"));
			НормализованныйНомерТелефона = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(ЗначениеНомераТелефона, Ложь);
			Если ЗначениеЗаполнено(НормализованныйНомерТелефона) Тогда
				ТелефоныКлиента.Добавить(ЗначениеНомераТелефона);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеКлиента.Вставить("Телефоны", ТелефоныКлиента);
	
	АдресаПочтыКлиента = Новый Массив;
	Если Поля.Получить("EMAIL") <> Неопределено Тогда
		Для Каждого АдресПочты Из Поля.Получить("EMAIL") Цикл
			АдресаПочтыКлиента.Добавить(АдресПочты.Получить("VALUE"));
		КонецЦикла;
	КонецЕсли;
	ДанныеКлиента.Вставить("АдресаПочты", АдресаПочтыКлиента);
	
	ИсточникИнформации = Поля.Получить("UTM_SOURCE");
	Если ЗначениеЗаполнено(ИсточникИнформации) Тогда
		ИсточникИнформацииСсылка = CRMОбмен.ПолучитьЭлементСправочника(ИсточникИнформации, Справочники.ИсточникиИнформации,,, "ИмяUTM");
		Если Не ЗначениеЗаполнено(ИсточникИнформацииСсылка) Тогда 
			ИсточникИнформацииСсылка = СоздатьЭлементСправочникаПоUTM(ИсточникИнформации, Справочники.ИсточникиИнформации);	
		КонецЕсли;			
	Иначе 
		НастройкаОбменаССайтом = БитриксПовтИсп.ЗначениеНастройкиНастройкаОбменаССайтом();
		ИсточникИнформацииСсылка = НастройкаОбменаССайтом.ИсточникИнформации;
	КонецЕсли;
	
	ДанныеКлиента.Вставить("ИсточникИнформации", ИсточникИнформацииСсылка);
	
	ДанныеПоЛиду.Вставить("ДанныеКлиента", ДанныеКлиента);
	
	Возврат ДанныеПоЛиду;
	
КонецФункции

Функция СоздатьЭлементСправочникаПоUTM(ИсточникИнформации, Справочник)
	
	НовыйЭлементСправочника = Справочник.СоздатьЭлемент();
	НовыйЭлементСправочника.Наименование = ИсточникИнформации;
	НовыйЭлементСправочника.ИмяUTM = ИсточникИнформации;
	
	Попытка
		НовыйЭлементСправочника.Записать();
		Возврат НовыйЭлементСправочника.Ссылка;
	Исключение
		Возврат Справочник.ПустаяСсылка;
	КонецПопытки;
	
КонецФункции

Функция СформироватьJSON(Структура)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	ЗаписатьJSON(ЗаписьJSON, Структура, НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗаявкаПросрочена(Заявка)
	
	ПериодАктуальностиЗаявки = БитриксПовтИсп.ЗначениеНастройкиПериодАктуальностиЗаявки();
	Если Не ЗначениеЗаполнено(ПериодАктуальностиЗаявки) 
		Или Заявка.ДатаНачала > ТекущаяДата() 
		Или Заявка.ДатаНачала > ТекущаяДата() - ПериодАктуальностиЗаявки
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СостоянияЗаявкиДоПродажи = УправлениеЗаявками.СостоянияЗаявкиДоПродажи();
	Если СостоянияЗаявкиДоПродажи.Найти(Заявка.Состояние) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСуммуПродажПоДокументу(мДокументы)
	
	СуммаПродаж = 0;
	
	ВсеДокументы = Новый Массив;
	Для Каждого Документ Из мДокументы Цикл
		Если ВсеДокументы.Найти(Документ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВсеДокументы.Добавить(Документ);
		ДокументКоррекции = РаботаСДокументамиСервер.НайтиКоррекциюПоДокументу(Документ);
		Пока ДокументКоррекции <> Неопределено Цикл
			
			Если ВсеДокументы.Найти(ДокументКоррекции) <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ВсеДокументы.Добавить(ДокументКоррекции);
			ДокументКоррекции = РаботаСДокументамиСервер.НайтиКоррекциюПоДокументу(ДокументКоррекции);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Оплаты.Сумма) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Оплаты КАК Оплаты
		|ГДЕ
		|	Оплаты.Регистратор В
		|			(ВЫБРАТЬ
		|				ОказаниеУслуг.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.ОказаниеУслуг КАК ОказаниеУслуг
		|			ГДЕ
		|				(ОказаниеУслуг.Ссылка В (&ВсеДокументы)
		|					ИЛИ ОказаниеУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту)
		|						И ОказаниеУслуг.ДокументОснование В (&ВсеДокументы)
		|						И ОказаниеУслуг.Проведен))";
				   
	Запрос.УстановитьПараметр("ВсеДокументы", ВсеДокументы);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаПродаж = СуммаПродаж + Выборка.Сумма;
	КонецЕсли;
	
	Возврат СуммаПродаж;
	
КонецФункции

Функция СтрокаИдентификатора(Идентификатор)
	
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Строка(Идентификатор));
	
КонецФункции

Процедура УбратьКлиентаИзГруппыБ24(Документ)
	
	ГруппаКлиентовБ24 = БитриксПовтИсп.ЗначениеНастройкиГруппаКлиентовИзБитрикс24();
	
	Если ЗначениеЗаполнено(Документ.Клиент)
		И ЗначениеЗаполнено(ГруппаКлиентовБ24)
		И Документ.Клиент.Родитель = БитриксПовтИсп.ЗначениеНастройкиГруппаКлиентовИзБитрикс24()
	Тогда
		КлиентОбъект = Документ.Клиент.ПолучитьОбъект();
		КлиентОбъект.Родитель = Неопределено;
		КлиентОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеНезагруженныхЛидовЗаПериод(ДатаНачала, ДатаОкончания)
	
	СтатусыНеуспешныхЛидов = Новый Массив;
	
	СтатусыЛидов = Битрикс.ВыполнитьМетод("crm.status", "list",,, Новый Структура("ENTITY_ID", "STATUS"));
	Для Каждого СтатусЛида Из СтатусыЛидов Цикл
		ТипСтатуса = СтатусЛида.Получить("EXTRA").Получить("SEMANTICS");
		Если НРег(ТипСтатуса) = "failure"
			Или НРег(ТипСтатуса) = "apology"
		Тогда
			СтатусыНеуспешныхЛидов.Добавить(СтатусЛида["STATUS_ID"]);
		КонецЕсли;
	КонецЦикла;
	
	Фильтр = Новый Соответствие;
	Фильтр.Вставить(">DATE_CREATE", ДатаНачала);
	Фильтр.Вставить("<DATE_CREATE", ДатаОкончания);
	
	ЛидыЗаПериод = Битрикс.ВыполнитьМетод("crm.lead", "list",,, Фильтр, "ID,STATUS_ID");
	
	ИдентификаторыЛидовЗаПериод = Новый ТаблицаЗначений;
	ИдентификаторыЛидовЗаПериод.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)));
	ИдентификаторыЛидовЗаПериод.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Лид Из ЛидыЗаПериод Цикл
		Если СтатусыНеуспешныхЛидов.Найти(Лид.Получить("STATUSID")) = Неопределено Тогда
			СтрокаЛида = ИдентификаторыЛидовЗаПериод.Добавить();
			СтрокаЛида.Идентификатор = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Лид.Получить("ID"));
			СтрокаЛида.Статус = Лид.Получить("STATUS_ID");
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыЛидовЗаСутки.Идентификатор КАК Идентификатор,
		|	ИдентификаторыЛидовЗаСутки.Статус КАК Статус
		|ПОМЕСТИТЬ ИдентификаторыЛидовЗаСутки
		|ИЗ
		|	&ИдентификаторыЛидовЗаСутки КАК ИдентификаторыЛидовЗаСутки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыЛидовЗаСутки.Идентификатор КАК Идентификатор,
		|	ИдентификаторыЛидовЗаСутки.Статус КАК Статус
		|ИЗ
		|	ИдентификаторыЛидовЗаСутки КАК ИдентификаторыЛидовЗаСутки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б24_Идентификаторы КАК Б24_Идентификаторы
		|		ПО (Б24_Идентификаторы.ИдентификаторБ24 = ИдентификаторыЛидовЗаСутки.Идентификатор)
		|			И (Б24_Идентификаторы.СущностьБ24 = ЗНАЧЕНИЕ(Перечисление.Б24_Сущности.Лид))
		|ГДЕ
		|	Б24_Идентификаторы.Объект ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИдентификаторыЛидовЗаСутки", ИдентификаторыЛидовЗаПериод);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЛидБылНаСтатусеКЗагрузке(ИдентификаторЛида, ТекущийСтатусЛида)
	
	Если ТекущийСтатусЛида = БитриксПовтИсп.ИдСтатусаЛидКЗагрузке() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Фильтр = Новый Структура("OWNER_ID", ИдентификаторЛида);
	ПараметрТипаСущности = Новый Структура("entityTypeId", 1);
	
	ИсторияСтатусов = Битрикс.ВыполнитьМетод("crm.stagehistory", "list",,, Фильтр,, ПараметрТипаСущности);
	Если ИсторияСтатусов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементыИстории = ИсторияСтатусов.Получить("items");
	
	Для Каждого ЭлементИстории Из ЭлементыИстории Цикл
		Если ЭлементИстории.Получить("STATUS_ID") = БитриксПовтИсп.ИдСтатусаЛидКЗагрузке() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ИдентификаторыСущностей

#Область Активности

Функция АктивностьПоИдентификатору(Идентификатор)
	
	Возврат ОбъектыПоИдентификатору(Идентификатор, Перечисления.Б24_Сущности.Активность);
	
КонецФункции

Функция АктивностьИдентификатор(Активность)
	
	Возврат ИдентификаторОбъекта(Активность, Перечисления.Б24_Сущности.Активность);
	
КонецФункции

Процедура АктивностьДобавитьИдентификатор(Активность, Идентификатор)
	
	ДобавитьИдентификатор(Активность, Идентификатор, Перечисления.Б24_Сущности.Активность);
	
КонецПроцедуры

Процедура АктивностьУдалитьИдентификатор(Активность)
	
	УдалитьИдентификатор(Активность, Перечисления.Б24_Сущности.Активность);
	
КонецПроцедуры

#КонецОбласти

#Область Клиенты

Функция КлиентПоИдентификатору(Идентификатор)
	
	Возврат ОбъектыПоИдентификатору(Идентификатор, Перечисления.Б24_Сущности.Контакт);
	
КонецФункции

Функция КлиентИдентификатор(Клиент)
	
	Возврат ИдентификаторОбъекта(Клиент, Перечисления.Б24_Сущности.Контакт);
	
КонецФункции

Процедура КлиентДобавитьИдентификатор(Клиент, Идентификатор)
	
	ДобавитьИдентификатор(Клиент, Идентификатор, Перечисления.Б24_Сущности.Контакт);
	
КонецПроцедуры

#КонецОбласти

#Область Лиды

Функция ЛидПоИдентификатору(Идентификатор)
	
	Возврат ОбъектыПоИдентификатору(Идентификатор, Перечисления.Б24_Сущности.Лид);
	
КонецФункции

Функция ЛидИдентификатор(Лид)
	
	Возврат ИдентификаторОбъекта(Лид, Перечисления.Б24_Сущности.Лид);
	
КонецФункции

Процедура ЛидДобавитьИдентификатор(Лид, Идентификатор)
	
	ДобавитьИдентификатор(Лид, Идентификатор, Перечисления.Б24_Сущности.Лид);
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

Функция ПользовательПоИдентификатору(Идентификатор)
	
	Возврат ОбъектыПоИдентификатору(Идентификатор, Перечисления.Б24_Сущности.Пользователь);
	
КонецФункции

Функция ПользовательИдентификатор(Пользователь)
	
	Возврат ИдентификаторОбъекта(Пользователь, Перечисления.Б24_Сущности.Пользователь);
	
КонецФункции

Процедура ПользовательДобавитьИдентификатор(Пользователь, Идентификатор)
	
	ДобавитьИдентификатор(Пользователь, Идентификатор, Перечисления.Б24_Сущности.Пользователь);
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьИдентификатор(Объект, ИдентификаторБ24, СущностьБ24)
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	МЗ = РегистрыСведений.Б24_Идентификаторы.СоздатьМенеджерЗаписи();
	МЗ.Объект = Объект;
	МЗ.СущностьБ24 = СущностьБ24;
	МЗ.ИдентификаторБ24 = ИдентификаторБ24;
	МЗ.Записать();
	
КонецПроцедуры

Процедура УдалитьИдентификатор(Объект, СущностьБ24)
	
	МЗ = РегистрыСведений.Б24_Идентификаторы.СоздатьМенеджерЗаписи();
	МЗ.Объект = Объект;
	МЗ.СущностьБ24 = СущностьБ24;
	МЗ.Удалить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти