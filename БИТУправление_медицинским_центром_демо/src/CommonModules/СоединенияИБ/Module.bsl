#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ БЛОКИРОВКИ И ЗАВЕРШЕНИЯ СОЕДИНЕНИЙ С ИБ

// Устанавливает блокировку соединений ИБ.
// Если вызывается из сеанса с установленными значениями разделителей,
// то устанавливает блокировку сеансов области данных.
//
// Параметры
//  ТекстСообщения  – Строка – текст, который будет частью сообщения об ошибке
//                             при попытке установки соединения с заблокированной
//                             информационной базой.
// 
//  КодРазрешения - Строка -   строка, которая должна быть добавлена к параметру
//                             командной строки "/uc" или к параметру строки
//                             соединения "uc", чтобы установить соединение с
//                             информационной базой несмотря на блокировку.
//                             Не применимо для блокировки сеансов области данных.
//
// Возвращаемое значение:
//   Булево   – Истина, если блокировка установлена успешно.
//              Ложь, если для выполнения блокировки недостаточно прав.
//
Функция УстановитьБлокировкуСоединений(Знач ТекстСообщения = "",
	Знач КодРазрешения = "КодРазрешения") Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если Не Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Блокировка = НовыеПараметрыБлокировкиСоединений();
		Блокировка.Установлена = Истина;
		Блокировка.Начало = ТекущаяДатаСеанса();
		Блокировка.Сообщение = СформироватьСообщениеБлокировки(ТекстСообщения, КодРазрешения);
		Блокировка.Эксклюзивная = Пользователи.ЭтоПолноправныйПользовательИБ(, Истина);
		УстановитьБлокировкуСеансовОбластиДанных(Блокировка);
		Возврат Истина;
	Иначе
		Если Не Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаСеансов;
		Блокировка.Установлена = Истина;
		Блокировка.Начало = ТекущаяДатаСеанса();
		Блокировка.КодРазрешения = КодРазрешения;
		Блокировка.Сообщение = СформироватьСообщениеБлокировки(ТекстСообщения, КодРазрешения);
		УстановитьБлокировкуСеансов(Блокировка);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определить, установлена ли блокировка соединений при пакетном 
// обновлении конфигурации информационной базы
//
Функция УстановленаБлокировкаСоединений() Экспорт
	
	ТекущийРежимОбластиДанных = ПолучитьБлокировкуСеансовОбластиДанных();
	ТекущийРежимИБ = ПолучитьБлокировкуСеансов();
	ТекущаяДата = ТекущаяДатаСеанса();
	Возврат УстановленаБлокировкаСоединенийНаДату(ТекущийРежимОбластиДанных, ТекущаяДата)
		Или УстановленаБлокировкаСоединенийНаДату(ТекущийРежимИБ, ТекущаяДата);
		
КонецФункции

// Получить параметры блокировки соединений ИБ для использования на стороне клиента.
//
// Параметры:
//  ПолучитьКоличествоСеансов - Булево - если Истина, то в возвращаемой структуре
//                                       заполняется поле КоличествоСеансов.
//
Функция ПараметрыБлокировкиСеансов(Знач ПолучитьКоличествоСеансов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийРежимОбластиДанных = ПолучитьБлокировкуСеансовОбластиДанных();
	ТекущийРежимИБ = ПолучитьБлокировкуСеансов();
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийРежим = НовыеПараметрыБлокировкиСоединений();
	Если УстановленаБлокировкаСоединенийНаДату(ТекущийРежимИБ, ТекущаяДата) Тогда
		ТекущийРежим = ТекущийРежимИБ;
	ИначеЕсли УстановленаБлокировкаСоединенийНаДату(ТекущийРежимОбластиДанных, ТекущаяДата) Тогда
		ТекущийРежим = ТекущийРежимОбластиДанных;
	ИначеЕсли ТекущийРежимИБ.Установлена Тогда
		ТекущийРежим = ТекущийРежимИБ;
	Иначе
		ТекущийРежим = ТекущийРежимОбластиДанных;
	КонецЕсли;
	
	Возврат Новый Структура(
		"Установлена,Начало,Конец,Сообщение,ИнтервалОжиданияЗавершенияРаботыПользователей,КоличествоСеансов,ТекущаяДатаСеанса",
		ТекущийРежим.Установлена,
		ТекущийРежим.Начало,
		ТекущийРежим.Конец,
		ТекущийРежим.Сообщение,
		5 * 60, // 5 минут; интервал ожидания завершения пользователей после установки
		        // блокировки информационной базы (в секундах).
		?(ПолучитьКоличествоСеансов, КоличествоСеансовИнформационнойБазы(), 0),
		ТекущаяДатаСеанса()
	);

КонецФункции

// Снять блокировку информационной базы.
//
// Возвращаемое значение:
//   Булево   – Истина, если операция выполнена успешно.
//              Ложь, если для выполнения операции недостаточно прав.
//
Функция РазрешитьРаботуПользователей() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если Не Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекущийРежим = ПолучитьБлокировкуСеансовОбластиДанных();
		Если ТекущийРежим.Установлена Тогда
			НовыйРежим = НовыеПараметрыБлокировкиСоединений();
			НовыйРежим.Установлена = Ложь;
			УстановитьБлокировкуСеансовОбластиДанных(НовыйРежим);
		КонецЕсли;
		Возврат Истина;
		
	Иначе
		Если НЕ Пользователи.ЭтоПолноправныйПользовательИБ(, Истина) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекущийРежим = ПолучитьБлокировкуСеансов();
		Если ТекущийРежим.Установлена Тогда
			НовыйРежим = Новый БлокировкаСеансов;
			НовыйРежим.Установлена = Ложь;
			УстановитьБлокировкуСеансов(НовыйРежим);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ БЛОКИРОВКИ РЕГЛАМЕНТНЫХ И ФОНОВЫХ ЗАДАНИЙ

// Установить блокировку регламентных и фоновых заданий.
//
// Параметры
//   Значение   – Булево
//
Процедура УстановитьБлокировкуРегламентныхЗаданий(Значение) Экспорт
	
	СоединенияИБКлиентСервер.УстановитьБлокировкуРегламентныхЗаданий(Значение);
	
КонецПроцедуры	

// Получить текущее состояние блокировки регламентных и фоновых заданий.
//
// Возвращаемое значение:
//   Булево   – Истина, если блокировка установлена.
//
Функция БлокировкаРегламентныхЗаданийУстановлена() Экспорт
	
	Возврат СоединенияИБКлиентСервер.БлокировкаРегламентныхЗаданийУстановлена();
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРИНУДИТЕЛЬНОГО ОТКЛЮЧЕНИЯ СЕАНСОВ ИБ

// Отключает сеанс по номеру сеанса
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ
//  НомерСеанса - Число - номер сеанса для отключения
// 
// Возвращаемое значение:
//  Булево – результат отключения сеанса.
//
Функция ОтключитьСеанс(НомерСеанса, Сообщение) Экспорт
	
	Возврат СоединенияИБКлиентСервер.ОтключитьСеанс(НомерСеанса, Сообщение);
	
КонецФункции

// Отключить все активные соединения ИБ (кроме текущего сеанса).
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ.  
//
// Возвращаемое значение:
//   Булево   – результат отключения соединений.
//
Функция ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ) Экспорт
	
	Возврат СоединенияИБКлиентСервер.ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ);
	
КонецФункции

// Осуществляет попытку подключиться к кластеру серверов и получить список 
// активных соединений к ИБ и использованием указанных параметров администрирования.
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ
//  ВыдаватьСообщения             – Булево    – разрешить вывод интерактивных сообщений.
//
// Возвращаемое значение:
//   Булево   – Истина, если проверка завершена успешно.
//
Процедура ПроверитьПараметрыАдминистрированияИБ(ПараметрыАдминистрированияИБ,
	Знач ПодробноеСообщениеОбОшибке = Ложь) Экспорт
	
	СоединенияИБКлиентСервер.ПроверитьПараметрыАдминистрированияИБ(ПараметрыАдминистрированияИБ,
		ПодробноеСообщениеОбОшибке);
	
КонецПроцедуры

// Удаляет сеансы и разрывает соединения через Агент сервиса.
// Сеансы задаются своими номерами во входном массиве.
//
// Параметры:
//
// Возвращаемое значение:
// Булево - Успешность отработки операции.
//
функция УдалитьСеансыИРазорватьСоединения(Знач ПараметрыАдминистрированияИБ, Знач СеансыКУдалению) Экспорт
	
	Если ТипЗнч(СеансыКУдалению) = Тип("Массив") Тогда
		СписокСеансов = СеансыКУдалению;
	ИначеЕсли ТипЗнч(СеансыКУдалению) = Тип("Число") Тогда
		СписокСеансов = Новый Массив;
		СписокСеансов.Добавить(СеансыКУдалению);
	Иначе
		ВызватьИсключение(НСтр("ru = 'Неверный тип параметра ""СеансыКУдалению"".'"));
	КонецЕсли;
	
	Если СписокСеансов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Создать структуру параметров подключения к агенту сервиса.
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL", Константы.АдресАгентаСервиса.Получить());
	ПараметрыПодключения.Вставить("UserName", Константы.ИмяПользователяАгентаСервиса.Получить());
	ПараметрыПодключения.Вставить("Password", Константы.ПарольПользователяАгентаСервиса.Получить());
	
	// Проверить с помощью версионирования, поддерживается ли нужный интерфейс.
	МассивПоддерживаемыхВерсий = ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "УправлениеАгентом");
	Если МассивПоддерживаемыхВерсий.Найти("1.0.2.1") = Неопределено Тогда
		ВызватьИсключение(НСтр("ru = 'Выборочное удаление сеансов не поддерживается в этой версии.'"));
	КонецЕсли;
	
	// Сформировать XDTO-строку входных параметров для обращения к операциям сервиса.
	
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Вставить("ИнформационнаяБаза", ПараметрыАдминистрированияИБ.ИмяВКластере);
	
	ТипПараметрыАдминистрирования = ФабрикаXDTO.Тип("http://v8.1c.ru/agent/scripts/1.0", "ClusterAdministrationInfo");
	ПараметрыАдминистрированияКластера = ФабрикаXDTO.Создать(ТипПараметрыАдминистрирования);
	
	ПараметрыАдминистрированияКластера.AgentConnectionString = 
		"tcp://" + ПараметрыАдминистрированияИБ.АдресСервера + ":" + Формат(ПараметрыАдминистрированияИБ.ПортСервера, "ЧГ=");
	ПараметрыАдминистрированияКластера.WorkServerUserName = ПараметрыАдминистрированияИБ.АдминистраторСервера;
	ПараметрыАдминистрированияКластера.WorkServerPassword = РаботаВМоделиСервиса.СтрокаВBase64(ПараметрыАдминистрированияИБ.ПарольАдмнистратораСервера);
	ПараметрыАдминистрированияКластера.ClusterPort = ПараметрыАдминистрированияИБ.ПортКластера;
	ПараметрыАдминистрированияКластера.ClusterUserName = ПараметрыАдминистрированияИБ.АдминистраторКластера;
	ПараметрыАдминистрированияКластера.ClusterPassword = РаботаВМоделиСервиса.СтрокаВBase64(ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера);
	ПараметрыАдминистрированияКластера.IBUserName = ПараметрыАдминистрированияИБ.АдминистраторИБ;
	ПараметрыАдминистрированияКластера.IBPassword = РаботаВМоделиСервиса.СтрокаВBase64(ПараметрыАдминистрированияИБ.ПарольАдминистратораИБ);
	
	ЗначенияПараметров.Вставить("ПараметрыАдминистрированияКластера", ПараметрыАдминистрированияКластера);
	
	ЗначенияПараметров.Вставить("СписокСеансов", СписокСеансов);
	
	ПараметрыXDTO = РаботаВМоделиСервиса.ЗаписатьСтруктурныйОбъектXDTOВСтроку(ЗначенияПараметров);
	
	// Есть поддержка 2-й версии, в которой реализовано выборочное удаление сеансов.
	Прокси = РаботаВМоделиСервиса.ПолучитьПроксиДляПодключенияКСервису(ПараметрыПодключения, "ManageAgent", "1.0.2.1");
	// Выполнить действие с помощью операции Web-сервиса.
	СостояниеЗавершения = Неопределено;
	Прокси.DoAction("ВыборочноУдалитьСеансы", ПараметрыXDTO, СостояниеЗавершения);
	
	Возврат СостояниеЗавершения = "ДействиеВыполнено" Или СостояниеЗавершения = "Истина";
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ БЛОКИРОВКИ СЕАНСОВ ОБЛАСТИ ДАННЫХ
//

// Получить пустую структуру с параметрами блокировки сеансов области данных.
// 
// Возвращаемое значение:
//   Структура        – с полями:
//     Начало         - Дата   - время начала действия блокировки
//     Конец          - Дата   - время завершения действия блокировки
//     Сообщение      - Строка - сообщения для пользователей, выполняющих вход в заблокированную область данных
//     Установлена    - Булево - признак того, что блокировка установлена
//     Эксклюзивная   - Булево - блокировка не может быть изменена администратором приложения
//
Функция НовыеПараметрыБлокировкиСоединений() Экспорт
	
	Возврат Новый Структура("Конец,Начало,Сообщение,Установлена,Эксклюзивная",
		Дата(1,1,1), Дата(1,1,1), "", Ложь, Ложь);
		
КонецФункции

// Установить блокировку сеансов области данных.
// 
// Параметры
//   Параметры         – Структура – см. НовыеПараметрыБлокировкиСоединений
//   ПоМестномуВремени - Булево - время начала и окончания блокировки указаны в местном (поясном) времени сеанса.
//                                Если Ложь, то в универсальном времени.
//
Процедура УстановитьБлокировкуСеансовОбластиДанных(Параметры, Знач ПоМестномуВремени = Истина) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		ВызватьИсключение НСтр("ru ='Недостаточно прав доступа'");
	КонецЕсли;
	
	Эксклюзивная = Ложь;
	Если Не Параметры.Свойство("Эксклюзивная", Эксклюзивная) Тогда
		Эксклюзивная = Ложь;
	КонецЕсли;
	Если Эксклюзивная И Не Пользователи.ЭтоПолноправныйПользовательИБ(, Истина) Тогда
		ВызватьИсключение НСтр("ru ='Недостаточно прав доступа'");
	КонецЕсли;
	
	СтруктураНастроек = Параметры;
	Если ТипЗнч(Параметры) = Тип("БлокировкаСеансов") Тогда
		СтруктураНастроек = НовыеПараметрыБлокировкиСоединений();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Параметры);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	НаборБлокировок = РегистрыСведений.БлокировкиСеансовОбластиДанных.СоздатьНаборЗаписей();
	НаборБлокировок.Отбор.ОбластьДанных.Установить(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	НаборБлокировок.Прочитать();
	НаборБлокировок.Очистить();
	Если Параметры.Установлена Тогда 
		Блокировка = НаборБлокировок.Добавить();
		Блокировка.ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		Блокировка.НачалоБлокировки = ?(ПоМестномуВремени И ЗначениеЗаполнено(СтруктураНастроек.Начало), 
			УниверсальноеВремя(СтруктураНастроек.Начало), СтруктураНастроек.Начало);
		Блокировка.КонецБлокировки = ?(ПоМестномуВремени И ЗначениеЗаполнено(СтруктураНастроек.Конец), 
			УниверсальноеВремя(СтруктураНастроек.Конец), СтруктураНастроек.Конец);
		Блокировка.СообщениеБлокировки = СтруктураНастроек.Сообщение;
		Блокировка.Эксклюзивная = СтруктураНастроек.Эксклюзивная;
	КонецЕсли;
	НаборБлокировок.Записать();
	
КонецПроцедуры

// Получить информацию о блокировке сеансов области данных.
// 
// Параметры:
//   ПоМестномуВремени - Булево - время начала и окончания блокировки необходимо вернуть 
//                                в местном (поясном) времени сеанса. Если Ложь, то 
//                                возвращается в универсальном времени.
//
// Возвращаемое значение:
//   Параметры         – Структура – см. НовыеПараметрыБлокировкиСоединений
//
Функция ПолучитьБлокировкуСеансовОбластиДанных(Знач ПоМестномуВремени = Истина) Экспорт
	
	Результат = НовыеПараметрыБлокировкиСоединений();
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Результат;
	КонецЕсли;
	
	НаборБлокировок = РегистрыСведений.БлокировкиСеансовОбластиДанных.СоздатьНаборЗаписей();
	НаборБлокировок.Отбор.ОбластьДанных.Установить(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	НаборБлокировок.Прочитать();
	Если НаборБлокировок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Блокировка = НаборБлокировок[0];
	Результат.Начало = ?(ПоМестномуВремени И ЗначениеЗаполнено(Блокировка.НачалоБлокировки), 
		МестноеВремя(Блокировка.НачалоБлокировки), Блокировка.НачалоБлокировки);
	Результат.Конец = ?(ПоМестномуВремени И ЗначениеЗаполнено(Блокировка.КонецБлокировки), 
		МестноеВремя(Блокировка.КонецБлокировки), Блокировка.КонецБлокировки);
	Результат.Сообщение = Блокировка.СообщениеБлокировки;
	Результат.Эксклюзивная = Блокировка.Эксклюзивная;
	ТекущаяДата = ТекущаяДатаСеанса();
	Результат.Установлена = Истина;
	// уточняем результат по периоду блокировки
	Результат.Установлена = Не ЗначениеЗаполнено(Блокировка.КонецБлокировки) 
		Или Блокировка.КонецБлокировки >= ТекущаяДата 
		Или УстановленаБлокировкаСоединенийНаДату(Результат, ТекущаяДата);
	Возврат Результат;
	
КонецФункции

// Заполнить структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Параметры:
//   Параметры   - Структура - структура параметров запуска.
//
Процедура ПроверитьБлокировкуСоединенийОбластиДанных(Параметры) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не УстановленаБлокировкаСоединений() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРежим = ПолучитьБлокировкуСеансовОбластиДанных();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ТекущийРежим.Конец) Тогда
		ПериодБлокировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'на период с %1 по %2'"),
			ТекущийРежим.Начало, ТекущийРежим.Конец);
	Иначе
		ПериодБлокировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'"), ТекущийРежим.Начало);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущийРежим.Сообщение) Тогда
		ПричинаБлокировки = НСтр("ru = 'по причине:'") + Символы.ПС + ТекущийРежим.Сообщение;
	Иначе
		ПричинаБлокировки = НСтр("ru = 'для проведения регламентных работ'");
	КонецЕсли;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Администратором приложения установлена блокировка работы пользователей %1 %2
			|
			|Работа системы будет завершена.'"),
		ПериодБлокировки, ПричинаБлокировки);
	Параметры.Вставить("СеансыОбластиДанныхЗаблокированы", ТекстСообщения);
	ТекстСообщения = "";
	Если (Пользователи.ЭтоПолноправныйПользовательИБ() И Не ТекущийРежим.Эксклюзивная) 
		Или Пользователи.ЭтоПолноправныйПользовательИБ(, Истина) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Администратором приложения установлена блокировка работы пользователей %1 %2
			    |
				|Войти в заблокированное приложение?
				|
				|• Да, чтобы продолжить работу;
				|• Нет, чтобы снять блокировку и продолжить работу.'"),
			ПериодБлокировки, ПричинаБлокировки);
	КонецЕсли;
	Параметры.Вставить("ПредложениеСнятьБлокировку", ТекстСообщения);
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текст сообщения блокировки сеансов.
//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьСообщениеБлокировки(Знач Сообщение, Знач КодРазрешения) Экспорт

	ПараметрыАдминистрированияИБ = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
	ПризнакФайловогоРежима = Ложь;
	ПутьКИБ = СоединенияИБКлиентСервер.ПутьКИнформационнойБазе(ПризнакФайловогоРежима, 
		?(ПараметрыАдминистрированияИБ.Свойство("ПортКластераСерверов"), ПараметрыАдминистрированияИБ.ПортКластераСерверов, 0));
	СтрокаПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима = Истина, "/F", "/S") + ПутьКИБ; 
	ТекстСообщения = "";                                 
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ТекстСообщения = Сообщение + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ТекстСообщения = ТекстСообщения +
		    НСтр("ru = '%1
		               |Для разрешения работы пользователей можно открыть приложение с параметром РазрешитьРаботуПользователей. Например:
		               |http://<веб-адрес сервера>/?C=РазрешитьРаботуПользователей'");
	Иначе
		ТекстСообщения = ТекстСообщения +
		    НСтр("ru = '%1
		               |Для того чтобы разрешить работу пользователей, воспользуйтесь консолью кластера серверов или запустите ""1С:Предприятие"" с параметрами:
		               |ENTERPRISE %2 /CРазрешитьРаботуПользователей /UC%3'");
	КонецЕсли;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		СоединенияИБКлиентСервер.ТекстДляАдминистратора(), СтрокаПутиКИнформационнойБазе, 
		НСтр("ru = '<код разрешения>'"));
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает текстовую строку со списком активных соединений ИБ.
// Названия соединений разделены символом переноса строки.
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьНазванияСоединенийИБ(Знач Сообщение) Экспорт
	
	Результат = Сообщение;
	Для каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если Сеанс.НомерСеанса <> НомерСеансаИнформационнойБазы() Тогда
			Результат = Результат + Символы.ПС + " - " + Сеанс;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Получить сохраненные параметры администрирования кластера серверов.
// 
// Возвращаемое значение:
//   Структура – с полями, возвращаемыми функцией НовыеПараметрыАдминистрированияИБ.
//
Функция ПолучитьПараметрыАдминистрированияИБ() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Результат = СоединенияИБКлиентСервер.НовыеПараметрыАдминистрированияИБ();
	СтруктураНастроек = Константы.ПараметрыАдминистрированияИБ.Получить();
	Если СтруктураНастроек <> Неопределено Тогда
		СтруктураНастроек = СтруктураНастроек.Получить();
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Результат, СтруктураНастроек);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Сохранить параметры администрирования кластера серверов в ИБ.
//
// Параметры:
//		Параметры - структура с полями, возвращаемыми функцией НовыеПараметрыАдминистрированияИБ.
//
Процедура ЗаписатьПараметрыАдминистрированияИБ(Параметры) Экспорт
	
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(Параметры));
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Получить число активных сеансов ИБ.
//
// Параметры:
//   УчитыватьКонсоль               - Булево - если Ложь, то исключить сеансы консоли кластера серверов.
//                                             сеансы консоли кластера серверов не препятствуют выполнению 
//                                             административных операций (установке монопольного режима и т.п.).
//   СообщенияДляЖурналаРегистрации - СписокЗначений - пакета сообщения для журнала регистрации
//                                                     сформированных на клиенте.
//
// Возвращаемое значение:
//   Число   – количество активных сеансов ИБ.
//
Функция КоличествоСеансовИнформационнойБазы(УчитыватьКонсоль = Истина, 
	СообщенияДляЖурналаРегистрации = Неопределено) Экспорт
	
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	
	СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	Если УчитыватьКонсоль Тогда
		Возврат СеансыИБ.Количество();
	КонецЕсли;
	
	Результат = 0;
	Для каждого СеансИБ Из СеансыИБ Цикл
		Если СеансИБ.ИмяПриложения <> "SrvrConsole" Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Записать в журнал регистрации список сеансов ИБ.
//
// Параметры:
//   ТекстСообщения - Строка - опциональный текст с пояснениями.
//
Процедура ЗаписатьНазванияСоединенийИБ(Знач ТекстСообщения) Экспорт
	Сообщение = ПолучитьНазванияСоединенийИБ(ТекстНеУдалосьЗавершитьРаботуПользователей(ТекстСообщения));
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
КонецПроцедуры

Функция ТекстНеУдалосьЗавершитьРаботуПользователей(Знач Сообщение) 
	
	Если Не ПустаяСтрока(Сообщение) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось завершить работу пользователей (%1):'"),
			Сообщение);
	Иначе		
		ТекстСообщения = НСтр("ru = 'Не удалось завершить работу пользователей:'");
	КонецЕсли;
	Возврат ТекстСообщения;
	
КонецФункции

Функция УстановленаБлокировкаСоединенийНаДату(ТекущийРежим, ТекущаяДата)
	
	Возврат (ТекущийРежим.Установлена И ТекущийРежим.Начало <= ТекущаяДата 
		И (Не ЗначениеЗаполнено(ТекущийРежим.Конец) Или ТекущаяДата <= ТекущийРежим.Конец));
		
КонецФункции

// Определяет количество сеансов информационной базы и наличие сеансов,
// которые не могут быть отключены принудительно. Формирует текст сообщения
// об ошибке.
//
// Параметры:
//  ТекстСообщения	 - Строка - сообщение для пользователей. 
// 
// Возвращаемое значение:
//	Структура 
//
Функция ИнформацияОБлокирующихСеансах(ТекстСообщения = "") Экспорт
	
	ИнформацияОБлокирующихСеансах = Новый Структура;
	
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	
	ИмеютсяБлокирующиеСеансы = Ложь;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ИменаАктивныхСеансов = "";
		Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
			Если Сеанс.НомерСеанса <> НомерТекущегоСеанса
				И Сеанс.ИмяПриложения <> "1CV8"
				И Сеанс.ИмяПриложения <> "1CV8C"
				И Сеанс.ИмяПриложения <> "WebClient" Тогда
				ИменаАктивныхСеансов = ИменаАктивныхСеансов + Символы.ПС + "• " + Сеанс;
				ИмеютсяБлокирующиеСеансы = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИнформацияОБлокирующихСеансах.Вставить("ИмеютсяБлокирующиеСеансы", ИмеютсяБлокирующиеСеансы);
	ИнформацияОБлокирующихСеансах.Вставить("КоличествоСеансов", СеансыИнформационнойБазы.Количество());
	
	Если ИмеютсяБлокирующиеСеансы Тогда
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Имеются активные сеансы работы с программой,
			|которые не могут быть завершены принудительно:
			|%1
			|%2'"),
			ИменаАктивныхСеансов, ТекстСообщения);
		ИнформацияОБлокирующихСеансах.Вставить("ТекстСообщения", Сообщение);
		
	КонецЕсли;
	
	Возврат ИнформацияОБлокирующихСеансах;
	
КонецФункции

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка - наименование события для журнала регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Завершение работы пользователей'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти
