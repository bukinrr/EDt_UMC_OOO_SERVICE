#Область ПрограммныйИнтерфейс

// Обновяет историю данных
//
Процедура ОбновитьИсториюДанных() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ИсторияДанных.ОбновитьИсторию();
КонецПроцедуры

// Устанавливает либо снимает использование истории данных для типа данных.
//
// Параметры:
//  ВидОбъекта	 - Структура - коллекция с полями "Имя" - стрка и "Выбран" - булево.
//
Процедура ПроверитьУстановитьНастройкиИсторииДанных(ВидОбъекта) Экспорт
	
	МетаданныеОбъекта = Неопределено;
	
	Если ВидОбъекта.Тип = "Справочник" Тогда
		МетаданныеОбъекта = Метаданные.Справочники.Найти(ВидОбъекта.Имя);
	ИначеЕсли ВидОбъекта.Тип = "Документ" Тогда
		МетаданныеОбъекта = Метаданные.Документы.Найти(ВидОбъекта.Имя);
	ИначеЕсли ВидОбъекта.Тип = "ПланВидовХарактеристик" Тогда
		МетаданныеОбъекта = Метаданные.ПланыВидовХарактеристик.Найти(ВидОбъекта.Имя);
	ИначеЕсли ВидОбъекта.Тип = "РегистрСведений" Тогда
		МетаданныеОбъекта = Метаданные.РегистрыСведений.Найти(ВидОбъекта.Имя);
	ИначеЕсли ВидОбъекта.Тип = "Задача" Тогда
		МетаданныеОбъекта = Метаданные.Задачи.Найти(ВидОбъекта.Имя);
	КонецЕсли;
	
	Если МетаданныеОбъекта <> Неопределено Тогда
		ПрименитьНастройкиИсторииДанныхКМетаданным(МетаданныеОбъекта, Булево(ВидОбъекта.Выбран));
	КонецЕсли;
	
КонецПроцедуры

// Получить изменявшиеся виды контактной информации по владельцу.
//
// Параметры:
//  Владелец - СправочникСсылка	 - Ссылка на значение измерения Объект регистра контактной информации.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьИзменявшиесяВидыКонтактнойИнформацииВладельца(Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсторияДанныхСервер.ОбновитьИсториюДанных();
	
	ТипыВиды = Новый Массив;
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Объект", Владелец);
		СтруктураКлюча.Вставить("Тип", Выборка.Тип);
		СтруктураКлюча.Вставить("Вид", Выборка.Ссылка);
		МассивКлюча = Новый Массив;
		МассивКлюча.Добавить(СтруктураКлюча);
		КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.КонтактнаяИнформация", МассивКлюча);
		
		ИзмененияДанных = ИсторияДанных.ВыбратьВерсии(Новый Структура("Data", КлючЗаписи));
		Если ИзмененияДанных.Количество() > 1 Тогда
			ТипыВиды.Добавить(Новый Структура("Вид, Тип", Выборка.Ссылка, Выборка.Тип));
		КонецЕсли;
	КонецЦикла;

	Возврат ТипыВиды;
	
КонецФункции

// Создает для объекта метаданных первую персию истории данных для всех его данных (ссылок, ключей записей).
//
// Параметры:
//  ПолноеИмяМетаданных	 - Строка - Полное имя метаданных объекта конфигурации.
//  ДатаНачала		 - Дата	- Для документов - начало периода, ограничивающего документы, которым будет создана версия.
//  ДатаОкончания	 - Дата	- Для документов - конец периода, ограничивающего документы, которым будет создана версия.
//
Процедура СоздатьПервыеВерсииВидаОбъекта(
			ПолноеИмяМетаданных, 
			ДатаНачала = Неопределено,
			ДатаОкончания = Неопределено) Экспорт
	
	Перем Выборка;                                                          
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат;                                                         
	КонецЕсли;       
	
	ТекущиеНастройки = ИсторияДанных.ПолучитьНастройки(МетаданныеОбъекта);
	Если ТекущиеНастройки = Неопределено Тогда 
		Возврат;                      
	КонецЕсли;       
	
	ДатаНачала = ?(ДатаНачала = Неопределено, ДатаНачала = Дата(1,1,1), ДатаНачала);
	ДатаОкончания = ?(ДатаОкончания = Неопределено, ДатаОкончания = Дата(1,1,1), ДатаОкончания);
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Выборка = Документы[МетаданныеОбъекта.Имя].Выбрать(ДатаНачала, ДатаОкончания);
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		Выборка = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();
		Выборка.Прочитать();
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Выборка = Справочники[МетаданныеОбъекта.Имя].Выбрать();
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Выборка = ПланыВидовХарактеристик[МетаданныеОбъекта.Имя].Выбрать();
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		Выборка = Задачи[МетаданныеОбъекта.Имя].Выбрать();
	КонецЕсли;       
	
	Если Выборка = Неопределено Тогда 
		Возврат;                      
	КонецЕсли;
	
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	ДатаИзменения = ТекущаяДата();
	
	УИДПользователя = Пользователь.УникальныйИдентификатор;
	ИмяПользователя = Пользователь.Имя;
	ПолноеИмяПользователя = Пользователь.ПолноеИмя;
	ДобавлениеДанных = ВидИзмененияДанных.Добавление;
	Комментарий = НСтр("ru='Создание первоначальной версии при начале использования истории данных.'");
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда 
		Попытка
			ИсторияДанных.ЗаписатьВерсию(
			Выборка,
			ДатаИзменения,
			УИДПользователя,
			ИмяПользователя,
			ПолноеИмяПользователя,
			ДобавлениеДанных,
			Комментарий);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать версию данных ""'") + МетаданныеОбъекта.Имя + НСтр("ru = '"" '") + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Пока Выборка.Следующий() Цикл
			
			Данные = Выборка.ПолучитьОбъект();
			Попытка
				ИсторияДанных.ЗаписатьВерсию(
				Данные,
				ДатаИзменения,
				УИДПользователя,
				ИмяПользователя,
				ПолноеИмяПользователя,
				ДобавлениеДанных,
				Комментарий);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать версию данных ""'") + Данные + НСтр("ru = '"" '") + ОписаниеОшибки());
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;       
	
КонецПроцедуры

// Удаляет все версии объекта метаданных из механизма истории данных.
//
// Параметры:
//  ПолноеИмяМетаданных	 - Строка - Полное имя метаданных объекта конфигурации.
//
Процедура УдалитьВерсииДанных(ПолноеИмяМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);//ПолучитьМетаданныеОбъекта(ВидОбъекта);
	Если МетаданныеОбъекта <> Неопределено Тогда
		ИсторияДанных.УдалитьВерсии(МетаданныеОбъекта);                                               
	КонецЕсли;       
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрименитьНастройкиИсторииДанныхКМетаданным(МетаданныеОбъекта, ИспользоватьИсториюДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПравоДоступа("Просмотр", МетаданныеОбъекта) Тогда
		//TODO: Когда 1С починит системное перечисление ИспользованиеИсторииДанных, переписать через него
		ПеречислениеИспользоватьИсториюДанных = Метаданные.Справочники.Банки.Реквизиты.КоррСчет.ИсторияДанных;
		ПеречислениеНеИспользоватьИсториюДанных = Метаданные.Справочники.Банки.Реквизиты.Телефоны.ИсторияДанных;
		                               
		НовыеНастройки = Новый НастройкиИсторииДанных;
		НовыеНастройки.Использование = ИспользоватьИсториюДанных;
		ТекущиеНастройки = ИсторияДанных.ПолучитьНастройки(МетаданныеОбъекта);
		// Приоритет 1: Настройки истории данных. Проверим, что они существуют или не установлены в НЕ ИспользоватьИсториюДанных
		// Приоритет 2: Свойство "История данных" в конфигураторе
		Если ИспользоватьИсториюДанных
			И ((ТекущиеНастройки = Неопределено И МетаданныеОбъекта.ИсторияДанных = ПеречислениеНеИспользоватьИсториюДанных)
			ИЛИ (ТекущиеНастройки <> Неопределено И НЕ ТекущиеНастройки.Использование))
			ИЛИ
			НЕ ИспользоватьИсториюДанных
			И ((ТекущиеНастройки = Неопределено И МетаданныеОбъекта.ИсторияДанных = ПеречислениеИспользоватьИсториюДанных)
			ИЛИ (ТекущиеНастройки <> Неопределено И ТекущиеНастройки.Использование))
		Тогда
			ИсторияДанных.УстановитьНастройки(МетаданныеОбъекта, НовыеНастройки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
