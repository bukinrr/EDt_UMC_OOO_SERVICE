#Область СлужебныйПрограммныйИнтерфейс

// Возвращает параметр по guid
//
// Параметры:
//  ИдПараметра		 - Строка, УникальныйИдентификатор	 - guid ссылки параметра.
//  ВернутьСсылку	 - Булево	 - если Ложь, возвращает структуру с дополнительной информацией помимо ссылки.
// 
// Возвращаемое значение:
//   Структура, ПланВидовХарактеристикСсылка.ПараметрыHTML.
//
Функция ПолучитьПараметрПоУИД(Знач ИдПараметра, ВернутьСсылку = Истина) Экспорт
	
	СтруктураВозвр = Новый Структура("Ссылка, ТипЗначения, ФорматнаяСтрока, НеРедактируетсяПользователем, Назначение");
	
	Если ТипЗнч(ИдПараметра) = Тип("Строка") Тогда
		Попытка
			УИД = Новый УникальныйИдентификатор(ИдПараметра);
		Исключение
			ПустаяСсылка = ПланыВидовХарактеристик.ПараметрыHTML.ПустаяСсылка();
			Если ВернутьСсылку Тогда 
				Возврат ПустаяСсылка;
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураВозвр, ПустаяСсылка);
				Возврат СтруктураВозвр;
			КонецЕсли;
		КонецПопытки;
	Иначе
		УИД = ИдПараметра;
	КонецЕсли;
	
	Попытка
		ПараметрСсылка = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьСсылку(УИД);
	Исключение
		ПараметрСсылка = ПланыВидовХарактеристик.ПараметрыHTML.ПустаяСсылка();
	КонецПопытки;
	
	Если ВернутьСсылку Тогда 
		Возврат ПараметрСсылка;
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураВозвр, ПараметрСсылка);
		Возврат СтруктураВозвр;
	КонецЕсли;
		
КонецФункции

// Возвращает параметр по guid
//
// Параметры:
//  ИдПараметра		 - Строка, УникальныйИдентификатор	 - guid ссылки параметра.
//  ВернутьСсылку	 - Булево	 - если Ложь, возвращает структуру с дополнительной информацией помимо ссылки.
// 
// Возвращаемое значение:
//   Структура, ПланВидовХарактеристикСсылка.ПараметрыHTML.
//
Функция ПолучитьПараметрыПоУИД(Знач ИдПараметров) Экспорт
	
	ПараметрыСсылки = Новый Соответствие;
	
	Для Каждого ИдПараметра Из ИдПараметров Цикл
		ПараметрыСсылки.Вставить(ИдПараметра, ПолучитьПараметрПоУИД(ИдПараметра));
	КонецЦикла;
	
	Возврат ПараметрыСсылки;
	
КонецФункции

// Функция - Получить тип параметра строкой
//
// Параметры:
//  Параметр - ПланВидовХарактеристикСсылка.ПараметрыHTML, Строка	 - параметр шаблона.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьТипПараметраСтрокой(Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		Попытка
			ПараметрСсылка = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьСсылку(Параметр);	
		Исключение
			Возврат "Строка";
		КонецПопытки;
	Иначе
		ПараметрСсылка = Параметр;
	КонецЕсли;

	Если Строка(ПараметрСсылка.ТипЗначения) = "Строка" ИЛИ Строка(ПараметрСсылка.ТипЗначения) = "Число" ИЛИ Строка(ПараметрСсылка.ТипЗначения) = "Булево" ИЛИ Строка(ПараметрСсылка.ТипЗначения) = "Дата" Тогда
		ПараметрТип	= СтрЗаменить(ПараметрСсылка.ТипЗначения, " ", "");
	Иначе
		ПараметрТип = Метаданные.НайтиПоТипу(ПараметрСсылка.ТипЗначения.типы()[0]).Имя;
	КонецЕсли;
	
	Возврат ПараметрТип;
	
КонецФункции

// Формирует кеш изображений приема
//
// Параметры:
//  ШаблоныПриема		 - ТаблицаЗначений	 - шаблоны медицинского документа.
//  ИдентификаторФормы	 - УникальныйИдентификатор	 - идентификатор формы.
//  ИспользоватьBase64	 - Булево - использовать ли кодирование данных изображений.
// 
// Возвращаемое значение:
//   Соответствие.
//
Функция ПолучитьКешИзображенийПриема(Знач ШаблоныПриема, ИдентификаторФормы, ИспользоватьBase64 = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныHTMLСписокИзображений.ИзображениеBase64,
		|	ШаблоныHTMLСписокИзображений.Расширение,
		|	ШаблоныHTMLСписокИзображений.Идентификатор,
		|	ШаблоныHTMLСписокИзображений.Ссылка КАК ШаблонПриема
		|ИЗ
		|	Справочник.ШаблоныHTML.СписокИзображений КАК ШаблоныHTMLСписокИзображений
		|ГДЕ
		|	ШаблоныHTMLСписокИзображений.Ссылка В (&МассивШаблонов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПисьмоEMAILСписокИзображений.ИзображениеBase64,
		|	ПисьмоEMAILСписокИзображений.Расширение,
		|	ПисьмоEMAILСписокИзображений.Идентификатор,
		|	ПисьмоEMAILСписокИзображений.Ссылка
		|ИЗ
		|	Справочник.ПисьмоEMAIL.СписокИзображений КАК ПисьмоEMAILСписокИзображений
		|ГДЕ
		|	ПисьмоEMAILСписокИзображений.Ссылка В (&МассивШаблонов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВерсииШаблоновHTMLСписокИзображений.ИзображениеBase64,
		|	ВерсииШаблоновHTMLСписокИзображений.Расширение,
		|	ВерсииШаблоновHTMLСписокИзображений.Идентификатор,
		|	ВерсииШаблоновHTMLСписокИзображений.Ссылка КАК ШаблонПриема
		|ИЗ
		|	Справочник.ВерсииШаблоновHTML.СписокИзображений КАК ВерсииШаблоновHTMLСписокИзображений
		|ГДЕ
		|	ВерсииШаблоновHTMLСписокИзображений.Ссылка В (&МассивШаблонов)
		|ИТОГИ ПО
		|	ШаблонПриема";
	
	мсШаблоны = Новый Массив;
	Если ТипЗнч(ШаблоныПриема) = Тип("ДанныеФормыКоллекция")
		Или ТипЗнч(ШаблоныПриема) = Тип("ТаблицаЗначений")
	Тогда
		мсШаблоны = ШаблоныПриема.Выгрузить().ВыгрузитьКолонку("ШаблонПриема");
	ИначеЕсли ТипЗнч(ШаблоныПриема) = Тип("СправочникСсылка.ШаблоныHTML")
		Или ТипЗнч(ШаблоныПриема) = Тип("СправочникСсылка.ПисьмоEMAIL")
		Или ТипЗнч(ШаблоныПриема) = Тип("СправочникСсылка.ВерсииШаблоновHTML")
	Тогда
		мсШаблоны = Новый Массив;
		мсШаблоны.Добавить(ШаблоныПриема);
	ИначеЕсли ТипЗнч(ШаблоныПриема) = Тип("Массив")
		Или ТипЗнч(ШаблоныПриема) = Тип("СписокЗначений")
	Тогда
		мсШаблоны = ШаблоныПриема;
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивШаблонов", мсШаблоны);
	
	Результат = Запрос.Выполнить();
	ВыборкаШаблоны = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	соотвКешИзображений = Новый Соответствие;
	Пока ВыборкаШаблоны.Следующий() Цикл
		
		Выборка = ВыборкаШаблоны.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураИзображения = Новый Структура("Идентификатор, Расширение");
			ЗаполнитьЗначенияСвойств(СтруктураИзображения, Выборка);
			
			// Помещаем картинку в хранилище
			ДвоичныеДанныеКартинки = Base64Значение(Выборка.ИзображениеBase64);
			Если ИспользоватьBase64 Тогда
				СтруктураИзображения.Вставить("АдресВХранилище", РаботаСHTMLКлиентСервер.ПолучитьBase64КартинкиДляHTML(ДвоичныеДанныеКартинки));
			Иначе
				СтруктураИзображения.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ИдентификаторФормы));
			КонецЕсли;
			
			соотвКешИзображений.Вставить(Выборка.Идентификатор, СтруктураИзображения);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат соотвКешИзображений;
	
КонецФункции

// Добавляет в кеш изображений изображения очередного шаблона
//
// Параметры:
//  СоотвКешИзображений	 - Соответствие			 - данные, формируемые функцией ПолучитьКешИзображенийПриема.
//  ШаблонПриема		 - СправочникСсылка.ШаблоныHTML	 - шаблон медицинского документа.
//  ИдентификаторФормы	 - УникальныйИдентификатор		 - идентификатор формы.
//  ИспользоватьBase64	 - Булево						 - использовать ли кодирование данных изображений.
//
Процедура ДополнитьСоответствиеИзображенийПоШаблону(соотвКешИзображений, ШаблонПриема, ИдентификаторФормы, ИспользоватьBase64 = Ложь) Экспорт 
	
	Для Каждого СтрокаИзобр Из ШаблонПриема.СписокИзображений Цикл
		
		СтруктураИзображения = Новый Структура("Идентификатор, Расширение");
		ЗаполнитьЗначенияСвойств(СтруктураИзображения, СтрокаИзобр);
		
		// Помещаем картинку в хранилище
		ДвоичныеДанныеКартинки = Base64Значение(СтрокаИзобр.ИзображениеBase64);
		Если ИспользоватьBase64 Тогда
			СтруктураИзображения.Вставить("АдресВХранилище", РаботаСHTMLКлиентСервер.ПолучитьBase64КартинкиДляHTML(ДвоичныеДанныеКартинки));
		Иначе
			СтруктураИзображения.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеКартинки), ИдентификаторФормы));
		КонецЕсли;
		
		соотвКешИзображений.Вставить(СтрокаИзобр.Идентификатор, СтруктураИзображения);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразовывает значение во внутреннюю строку
//
// Параметры:
//  Значение - Произвольный	 - сериализуемое значение.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПреобразоватьЗначениеВСтрокуВнутр(Значение) Экспорт
	 
	ЗначениеСтрокой = ЗначениеВСтрокуВнутр(Значение);
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Попытка
			ИндексНачалаНомераТаблицы = СтрНайти(ЗначениеСтрокой, ",", , , 2);
			ИндексОкончанияНомераТаблицы = СтрНайти(ЗначениеСтрокой, ":", , ИндексНачалаНомераТаблицы);
			Если ИндексНачалаНомераТаблицы > 0 И ИндексОкончанияНомераТаблицы > 0 Тогда
				ЗначениеСтрокой = Лев(ЗначениеСтрокой, ИндексНачалаНомераТаблицы) + "0" + 
					Сред(ЗначениеСтрокой, ИндексОкончанияНомераТаблицы, СтрДлина(ЗначениеСтрокой));
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЕсли;
	
	Возврат ЗначениеСтрокой;
	
КонецФункции

// Восстанавливает из внутренней строки
//
// Параметры:
//  Строка	 - Строка - значение в виде внетренней строки.
// 
// Возвращаемое значение:
//   Произвольный.
//
Функция ПреобразоватьЗначениеИзСтрокиВнутр(Строка) Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(Строка);
	
КонецФункции

// Восстанавливает значения из массива внутренних строк, возвращая в виде массива значений.
//
// Параметры:
//  ЗначенияВнутр	 - Массив - значение в виде внетренней строки.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПреобразоватьЗначенияИзСтрокиВнутр(ЗначенияВнутр) Экспорт
	
	Значения = Новый Массив;
	Для Каждого ЗначениеВнутр Из ЗначенияВнутр Цикл
		
		Значение = Неопределено;
		
		Попытка
			Значение = ЗначениеИзСтрокиВнутр(ЗначениеВнутр);
		Исключение
		КонецПопытки;
		
		Значения.Добавить(Значение);
		
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции

// Формирует html текст с прописанными в полях выбора значениями в виде внутренней строки.
//
// Параметры:
//  ТекстHTML		 - Строка - html текст шаблона.
//  СписокПараметров - Массив - параметры шаблона.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ОбновитьСтроковыеЗначенияПараметровШаблона(ТекстHTML, СписокПараметров) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	ТегиПараметров = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТегиПараметров();	
	Для Каждого Параметр Из СписокПараметров Цикл
		
		ИдПараметра = Строка(Параметр.УникальныйИдентификатор());
		ПараметрыHTML = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдПараметра, ТегиПараметров);
		
		Для Каждого ЭлементHTML Из ПараметрыHTML Цикл
			
			Если НРег(ЭлементHTML.ИмяЭлемента) <> "select" Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЗначениеВыбора Из ЭлементHTML.ДочерниеУзлы Цикл
				ЗначениеЭлемента = ЗначениеВыбора.Атрибуты.ПолучитьИменованныйЭлемент("value");
				
				Попытка
					Значение = ЗначениеИзСтрокиВнутр(ЗначениеЭлемента.ЗначениеУзла);
					ЗначениеЭлемента.ЗначениеУзла = ПреобразоватьЗначениеВСтрокуВнутр(Значение);
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

Функция ДобавитьРисункиКартинок(ТекстДляПечати, Документ, ИндексШаблона) Экспорт
	
	ДанныеРисунков = Новый Соответствие;
	
	НЗ = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(Документ);
	НЗ.Отбор.Тип.Установить(Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок);
	Если ИндексШаблона <> Неопределено Тогда
		НЗ.Отбор.ИндексШаблона.Установить(ИндексШаблона);
	КонецЕсли;
	НЗ.Прочитать();
	
	тзРисункиКартинок = Новый ТаблицаЗначений;
	тзРисункиКартинок.Колонки.Добавить("ИдентификаторСтрокиШаблона");
	тзРисункиКартинок.Колонки.Добавить("ИдентификаторРисунка");
	тзРисункиКартинок.Колонки.Добавить("АдресРисунка");
	
	Для Каждого СтрокаРисунка Из НЗ Цикл
		Попытка
			РисунокКартинки = тзРисункиКартинок.Добавить();
			РисунокКартинки.ИдентификаторСтрокиШаблона = СтрокаРисунка.ИндексШаблона;
			РисунокКартинки.ИдентификаторРисунка = СтрокаРисунка.ИдентификаторЭлемента;
			РисунокКартинки.АдресРисунка = Строка(Новый УникальныйИдентификатор);
			
			ДДРисунка = бит_РаботаСФайлами.ПолучитьДвоичныеДанныеФайлаРедактируемогоЭлемента(СтрокаРисунка.ПутьКФайлу, СтрокаРисунка.Файл);
			Если ДДРисунка <> Неопределено Тогда
				ДанныеРисунков.Вставить(РисунокКартинки.АдресРисунка, Base64Строка(ДДРисунка));
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	ТекстДляПечати = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьРисункиКартинокВТекстHTML(ТекстДляПечати, ИндексШаблона, тзРисункиКартинок, Ложь);
	
	Возврат ДанныеРисунков;
	
КонецФункции

Функция ВставитьДобавленныеИзображения(ТекстДляПечати, Документ, ИндексШаблона) Экспорт
	
	ДанныеИзображений = Новый Соответствие;
	
	НЗ = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(Документ);
	НЗ.Отбор.Тип.Установить(Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.ДобавленноеИзображение);
	Если ИндексШаблона <> Неопределено Тогда
		НЗ.Отбор.ИндексШаблона.Установить(ИндексШаблона);
	КонецЕсли;
	НЗ.Прочитать();
	
	тзДобавленныеИзображения = Новый ТаблицаЗначений;
	тзДобавленныеИзображения.Колонки.Добавить("ИдентификаторСтрокиШаблона");
	тзДобавленныеИзображения.Колонки.Добавить("ИдентификаторИзображения");
	тзДобавленныеИзображения.Колонки.Добавить("АдресИзображения");
	тзДобавленныеИзображения.Колонки.Добавить("Расширение");
	
	Для Каждого СтрокаДобавленногоИзображения Из НЗ Цикл
		Попытка
			ДобавленноеИзображение = тзДобавленныеИзображения.Добавить();
			ДобавленноеИзображение.ИдентификаторСтрокиШаблона = СтрокаДобавленногоИзображения.ИндексШаблона;
			ДобавленноеИзображение.ИдентификаторИзображения = СтрокаДобавленногоИзображения.ИдентификаторЭлемента;
			ДобавленноеИзображение.АдресИзображения = Строка(Новый УникальныйИдентификатор);
			ДобавленноеИзображение.Расширение = СтрокаДобавленногоИзображения.Расширение;
			
			ДДИзображения = бит_РаботаСФайлами.ПолучитьДвоичныеДанныеФайлаРедактируемогоЭлемента(СтрокаДобавленногоИзображения.ПутьКФайлу, СтрокаДобавленногоИзображения.Файл);
			Если ДДИзображения <> Неопределено Тогда
				СтруктураИзображения = Новый Структура("base64, Расширение", Base64Строка(ДДИзображения), СтрокаДобавленногоИзображения.Расширение);
				ДанныеИзображений.Вставить(ДобавленноеИзображение.АдресИзображения, СтруктураИзображения);
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	ТекстДляПечати = РаботаСШаблонамиHTMLКлиентСервер.ВставитьДобавленныеИзображенияВТекстHTML(ТекстДляПечати, ИндексШаблона, тзДобавленныеИзображения, Ложь);
	
	Возврат ДанныеИзображений;
	
КонецФункции

Функция ДекодироватьИзображенияHTMLТекста(ТекстHTML, СписокИзображений, ДанныеРисунков = Неопределено) Экспорт
	
	Возврат РаботаСШаблонамиHTMLКлиентСервер.ДекодироватьИзображенияHTMLТекста(ТекстHTML, СписокИзображений, ДанныеРисунков);
	
КонецФункции

Функция ДанныеИзображенияИзИсточника(СтрокаИсточника) Экспорт
	
	Возврат РаботаСШаблонамиHTMLКлиентСервер.ДанныеИзображенияИзИсточника(СтрокаИсточника);
	
КонецФункции

// Возвращает таблицу значений с данными о шаблонах документов Прием
// Параметры:
//  ДокументыПриемов - Массив - массив из ДокументСсылка.Прием (ссылок на приемы).
//  РежимДляКлиента - Булево - вариант отображения для клиента, для мед организации.
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//		* Прием - ДокументСсылка.Прием - ссылка на прием
//      * ШаблонПриема - СправочникСсылка.ШаблоныHTML - ссылка на шаблон 
//      * ТекстОсмотра - Строка - шаблон в html формате
//
Функция ПолучитьДанныеОШаблонахПриема(ДокументыПриемов, РежимДляКлиента = Ложь) Экспорт
	
	тзШаблоны = Новый ТаблицаЗначений;
	тзШаблоны.Колонки.Добавить("Прием",					 Новый ОписаниеТипов("ДокументСсылка.Прием"));
	тзШаблоны.Колонки.Добавить("ШаблонПриема",			 Новый ОписаниеТипов("СправочникСсылка.ШаблоныHTML"));
	тзШаблоны.Колонки.Добавить("ТекстОсмотра",			 Новый ОписаниеТипов("Строка"));
	тзШаблоны.Колонки.Добавить("РисункиКартинок",		 Новый ОписаниеТипов("Соответствие"));
	тзШаблоны.Колонки.Добавить("ДобавленныеИзображения", Новый ОписаниеТипов("Соответствие"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приемы", ДокументыПриемов);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	ПриемШаблоныПриема.Ссылка.Дата КАК Дата
		|ПОМЕСТИТЬ ШаблоныПриемов
		|ИЗ
		|	Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|ГДЕ
		|	ПриемШаблоныПриема.Ссылка В(&Приемы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|	ШаблоныПриемов.Дата КАК Дата,
		|	ВерсииШаблоновHTML.Ссылка КАК Версия,
		|	ВерсииШаблоновHTML.Дата КАК ДатаВерсии
		|ПОМЕСТИТЬ ВерсииДоДаты
		|ИЗ
		|	ШаблоныПриемов КАК ШаблоныПриемов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|		ПО (ВерсииШаблоновHTML.Владелец = ШаблоныПриемов.ШаблонПриема)
		|			И (ВерсииШаблоновHTML.Дата >= ШаблоныПриемов.Дата)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВерсииДокумента.ШаблонПриема КАК ШаблонПриема,
		|	ВерсииДокумента.Дата КАК ДатаДокумента,
		|	ВЫБОР
		|		КОГДА ВерсииДоДаты.Версия ЕСТЬ NULL
		|			ТОГДА ВерсииДокумента.ШаблонПриема.НеИспользоватьШапкуШаблона
		|		ИНАЧЕ ВерсииДоДаты.Версия.НеИспользоватьШапкуШаблона
		|	КОНЕЦ КАК НеИспользоватьШапкуШаблона
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВерсииДоДаты.ШаблонПриема КАК ШаблонПриема,
		|		ВерсииДоДаты.Дата КАК Дата,
		|		МИНИМУМ(ВерсииДоДаты.ДатаВерсии) КАК ДатаАктуальнойВерсии
		|	ИЗ
		|		ВерсииДоДаты КАК ВерсииДоДаты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВерсииДоДаты.ШаблонПриема,
		|		ВерсииДоДаты.Дата) КАК ВерсииДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВерсииДоДаты КАК ВерсииДоДаты
		|		ПО (ВерсииДоДаты.ШаблонПриема = ВерсииДокумента.ШаблонПриема)
		|			И (ВерсииДоДаты.Дата = ВерсииДокумента.Дата)
		|			И (ВерсииДоДаты.ДатаВерсии = ВерсииДокумента.ДатаАктуальнойВерсии)";
	
	ИспользованиеШапкиШаблоновПриемов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументПриема Из ДокументыПриемов Цикл
		
		Если ТипЗнч(ДокументПриема) = Тип("ДокументСсылка.Прием") Тогда
			
			ШаблоныПриема = ДокументПриема.ШаблоныПриема;
			
			Если ШаблоныПриема.Количество() > 0 Тогда
				ОднократноДобавитьШапкуПриема = Истина;
				Для Каждого Шаблон Из ШаблоныПриема Цикл
					СтрШаблоны = тзШаблоны.Добавить();
					СтрШаблоны.Прием		= ДокументПриема;
					СтрШаблоны.ШаблонПриема = Шаблон.ШаблонПриема;
					ТекстОсмотра = РаботаСШаблонамиHTMLКлиентСервер.ТекстШаблонаОсмотраПоРежиму(Шаблон.ТекстДляПечати, РежимДляКлиента);
					Если Не ПустаяСтрока(Шаблон.ТекстДляПечати) Тогда
						Если Не ИспользованиеШапкиШаблоновПриемов.НайтиСтроки(Новый Структура("ШаблонПриема, ДатаДокумента", Шаблон.ШаблонПриема, ДокументПриема.Дата))[0].НеИспользоватьШапкуШаблона Тогда
							ТекстОсмотра = РаботаСШаблонамиHTMLКлиентСервер.УстановитьШапкуШаблона(ТекстОсмотра, РежимДляКлиента, ДокументПриема);
						КонецЕсли;
						ОднократноДобавитьШапкуПриема = Ложь;
					КонецЕсли;
					СтрШаблоны.ДобавленныеИзображения = ВставитьДобавленныеИзображения(ТекстОсмотра, ДокументПриема, ШаблоныПриема.Индекс(Шаблон));
					СтрШаблоны.РисункиКартинок = ДобавитьРисункиКартинок(ТекстОсмотра, ДокументПриема, ШаблоныПриема.Индекс(Шаблон));
					СтрШаблоны.ТекстОсмотра = ТекстОсмотра;
				КонецЦикла;
				Если ОднократноДобавитьШапкуПриема Тогда
					СтрШаблоны = тзШаблоны[0];
					СтрШаблоны.ТекстОсмотра = РаботаСШаблонамиHTMLКлиентСервер.УстановитьШапкуШаблона(, РежимДляКлиента, ДокументПриема);
				КонецЕсли;
			Иначе
				// Приём с пустой табличной частью шаблонов.
				Если ЗначениеЗаполнено(ДокументПриема.Основание) Тогда
					ИмяМетаданныхОснование = ДокументПриема.Основание.Метаданные().Имя;
					Если ИмяМетаданныхОснование = "ЗаказВоВнешнююЛабораторию"
						Или ИмяМетаданныхОснование = "invЗаявкаНаИсследование"
						Или ИмяМетаданныхОснование = "ЗаказНаИсследованиеВнутренний"
					Тогда
						// Если это результат анализа без файлов, то берем Осмотр из шапки. Иначе не берем.
						ПрикрепленныеФайлы = РаботаСФайлами.ПолучитьВсеФайлы(ДокументыПриемов, Истина);
						Если ПрикрепленныеФайлы = Неопределено
							ИЛИ ПрикрепленныеФайлы.Количество() = 0
						Тогда
							СтрШаблоны = тзШаблоны.Добавить();
							СтрШаблоны.Прием		= ДокументПриема;
							СтрШаблоны.ТекстОсмотра = ДокументПриема.Осмотр;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// При добавлении в конфигурацию других отображаемых по разделам документов, здесь отрабатывается каждй из них.
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат тзШаблоны;
	
КонецФункции

#Область ВычислениеЗначенийПараметровБлоков

// Вычисляет значение блока HTML в шаблоне медицинского документа.
//
// Параметры:
//  ИдВычисляемогоЗначения	 - Строка - guid параметра шаблона.
//  Объект					 - ДокументОбъект, ДанныеФормыСтруктура	 - медицинский документ, в контексте которого идёт вычисление.
//  ПланЛеченияРеквизит		 - ТаблицаЗначений	 - план лечения для использования в расчете.
// 
// Возвращаемое значение:
//   Произвольный.
//
Функция ВычислитьЗначениеБлокаHTML(ИдВычисляемогоЗначения, Знач Объект, Знач ПланЛеченияРеквизит = Неопределено) Экспорт
	
	Перем ПланЛечения;
	
	Если ТипЗнч(ПланЛеченияРеквизит) = Тип("ТаблицаЗначений") Тогда
		ПланЛечения = ПланЛеченияРеквизит;
	ИначеЕсли ПланЛеченияРеквизит = Неопределено Тогда
		ПланЛечения = ДокументыПриемаСервер.ПолучитьНазначенияПриема(Объект.Ссылка);
	Иначе
		ПланЛечения = МедицинскаяДеятельность.ВыгрузитьПланЛечения(ПланЛеченияРеквизит, Объект.Ссылка);
	КонецЕсли;
	
	Попытка 
		УИД = Новый УникальныйИдентификатор(ИдВычисляемогоЗначения);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Ошибочный идентификатор ""%1"" вычисляемого значения в тексте шаблона!'"),ИдВычисляемогоЗначения));
		Возврат "";
	КонецПопытки;
	
	Попытка
		ВычисляемоеЗначениеБлока = Справочники.ВычисляемыеЗначенияПараметров.ПолучитьСсылку(УИД);
		Возврат ВычислитьЗначениеБлокаHTMLШаблона(ВычисляемоеЗначениеБлока, Объект, ПланЛечения);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Выполняет этап рекурсии расчета автоматических значений параметров шаблонов медицинского документа.
//
// Параметры:
//  СтрокаПараметр				 - СтрокаТаблицыЗначений - рассчитываемая строка параметров шаблонов медицинского документа.
//  ТаблицаПараметров			 - ТаблицаЗначений - таблица параметров шаблонов медицинского документа.
//  ЗависимыеПараметры			 - ТаблицаЗначений - таблица связей автоматических значений одних параметров от других.
//  РасчитанныеПараметры		 - ТаблицаЗначений - данные уже расчитанных параметров шаблона.
//  Объект						 - ДокументОбъект, ДанныеФормыСтруктура	 - медицинский документ, в контексте которого идёт вычисление.
//  ПланЛечения					 - ТаблицаЗначений	 - план лечения для использования в расчете.
//  НеРасчитыватьРодительские	 - Булево	 - если Ложь, то не расчитываются параметры, от которых рассчитывается текущий.
//
Процедура ВычислитьЗначениеПараметраРекурсивно(СтрокаПараметр, ТаблицаПараметров, ЗависимыеПараметры, РасчитанныеПараметры, Объект, ПланЛечения = Неопределено, НеРасчитыватьРодительские = Ложь)
	
	// Если параметр вычислен или его пытались вычислить уже 2 раза (подозрение на зацикливание), вычисление прерывается.
	Если СтрокаПараметр.Рассчитан Или СтрокаПараметр.БылОбработан > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПараметр.БылОбработан = СтрокаПараметр.БылОбработан + 1;
	
	ЗначениеПоУмолчанию = СтрокаПараметр.Параметр.ЗначениеПоУмолчанию;
	ПараметрОперации_Отказ = Ложь; // Отказ от заполнения значения.
	
	Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда	
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.ВычисляемыеЗначенияПараметров") Тогда
			// Расчет параметра по алгоритму
			РезультатРасчета = ВычислитьЗначениеПараметра(ПараметрОперации_Отказ, ЗначениеПоУмолчанию, СтрокаПараметр, ТаблицаПараметров, Объект, ПланЛечения);
			
			// Обработка результата алгоритма
			Если ПараметрОперации_Отказ <> Истина Тогда
			
				СтрокаПараметр.Значение = РезультатРасчета;
				СтрокаПараметр.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(СтрокаПараметр, СтрокаПараметр.Параметр.ФорматнаяСтрока);
			КонецЕсли;
			
		Иначе
			// Значение по умолчанию - это фиксированное значение
			Если СтрокаПараметр.Значение <> ЗначениеПоУмолчанию Тогда
				СтрокаПараметр.Значение = ЗначениеПоУмолчанию;
				СтрокаПараметр.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(СтрокаПараметр, СтрокаПараметр.Параметр.ФорматнаяСтрока);
			Иначе
				ПараметрОперации_Отказ = Истина;
			КонецЕсли;
		КонецЕсли;		
	Иначе
		ПараметрОперации_Отказ = Истина;
	КонецЕсли;
	СтрокаПараметр.Рассчитан = Истина;
	
	Если ПараметрОперации_Отказ Тогда
		// Параметр не меняется, дальнейший расчет связанных не нужен.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РасчитанныеПараметры.Добавить(), СтрокаПараметр);
	
	Отбор = Новый Структура("ИдентификаторСтрокиШаблона, Параметр", СтрокаПараметр.ИдентификаторСтрокиШаблона);
	
	// Расчет "родительских" параметров - от которых зависит этот.
	Если Не НеРасчитыватьРодительские Тогда
		// Расчет родительских параметров, если нужен (т.е. тех, от кого зависит этот параметр в своем шаблоне приема.
		Если ТаблицаПараметров.Колонки.Найти("НомерСтрокиТаблицы") <> Неопределено Тогда
			Отбор.Вставить("НомерСтрокиТаблицы", СтрокаПараметр.НомерСтрокиТаблицы);
			Отбор.Вставить("ИдентификаторТаблицы", СтрокаПараметр.ИдентификаторТаблицы);
		КонецЕсли;
		// Перед расчетом ищем параметры, от которых зависит вычисляемый.
		РодительскиеПараметры = ЗависимыеПараметры.НайтиСтроки(Новый Структура("ЗависимыйПараметр", СтрокаПараметр.Параметр));
		Для Каждого РодПараметр Из РодительскиеПараметры Цикл
			Отбор.Параметр = РодПараметр.Параметр;
			СтрокаРодПараметр = ОбщегоНазначенияКлиентСервер.ПерваяСтрокаОтбораТаблицы(ТаблицаПараметров, Отбор);
			Если СтрокаРодПараметр <> Неопределено Тогда
				Если НеРасчитыватьРодительские Тогда
					СтрокаРодПараметр.Рассчитан = Истина;
				Иначе
					ВычислитьЗначениеПараметраРекурсивно(СтрокаРодПараметр, ТаблицаПараметров, ЗависимыеПараметры, РасчитанныеПараметры, Объект, ПланЛечения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Вычисление зависимых параметров.
	Для Каждого СтрокаЗависимыйПараметр Из ЗависимыеПараметры.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметр.Параметр)) Цикл
		Отбор.Параметр = СтрокаЗависимыйПараметр.ЗависимыйПараметр;
		СтрокаЗависимый = ОбщегоНазначенияКлиентСервер.ПерваяСтрокаОтбораТаблицы(ТаблицаПараметров, Отбор);
		Если СтрокаЗависимый <> Неопределено Тогда
			ВычислитьЗначениеПараметраРекурсивно(СтрокаЗависимый, ТаблицаПараметров, ЗависимыеПараметры, РасчитанныеПараметры, Объект, ПланЛечения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьЗначениеПараметра(ПараметрОперации_Отказ, Знач ВычисляемоеЗначение, Знач СтрокаПараметр, Знач ТаблицаПараметров, Знач Объект, Знач ПланЛечения)
	
	// Переменные контекста выполнения алгоритма
	ДокументОбъект = Объект;
	Параметр = СтрокаПараметр.Параметр;
	ШаблонПриема = Неопределено;
	Попытка
		ШаблонПриема = Объект.ШаблоныПриема.НайтиПоИдентификатору(СтрокаПараметр.ИдентификаторСтрокиШаблона).ШаблонПриема;
	Исключение КонецПопытки;
	
	// Формируем структуру переменных алгоритма (связанные параметры шаблона).
	Параметры = Новый Структура;
	ПеременныеБезПриемника = ВычисляемоеЗначение.СписокПеременных.НайтиСтроки(Новый Структура("Приемник", ПланыВидовХарактеристик.ПараметрыHTML.ПустаяСсылка()));
	ПеременныеПоПриемнику  = ВычисляемоеЗначение.СписокПеременных.НайтиСтроки(Новый Структура("Приемник", Параметр));
	Если ПеременныеПоПриемнику.Количество() > 0 Тогда
		СписокПеременных = ПеременныеПоПриемнику;
	Иначе
		СписокПеременных = ПеременныеБезПриемника;
	КонецЕсли;
	
	Отбор = Новый Структура("ИдентификаторСтрокиШаблона, Параметр", СтрокаПараметр.ИдентификаторСтрокиШаблона);
	Для Каждого ЗависимыйПараметр Из СписокПеременных Цикл
		Отбор.Параметр = ЗависимыйПараметр.Параметр;
		ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ПерваяСтрокаОтбораТаблицы(ТаблицаПараметров, Отбор);
		Если ЗначениеПараметра <> Неопределено Тогда
			Параметры.Вставить(ЗависимыйПараметр.ИмяПеременной, ЗначениеПараметра.Значение);
		Иначе
			Параметры.Вставить(ЗависимыйПараметр.ИмяПеременной, ЗависимыйПараметр.Параметр.ТипЗначения.ПривестиЗначение(Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	// Выполнение алгоритма
	Результат = "";
	
	УстановитьБезопасныйРежим(Истина);
	Попытка
 		Выполнить(ВычисляемоеЗначение.АлгоритмВычисления);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	УстановитьБезопасныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ВычислитьЗначениеБлокаHTMLШаблона(Знач ВычисляемоеЗначение, Знач Объект, Знач ПланЛечения = Неопределено, Знач ТаблицаПараметров = Неопределено, Знач ТаблицаЗависимыхПараметров = Неопределено)
	
	ДокументОбъект = Объект;
	
	Результат = "";
	
	Попытка
		УстановитьБезопасныйРежим(Истина);
 		Выполнить(ВычисляемоеЗначение.АлгоритмВычисления);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСПараметрами

// Сохраняет значения параметров шаблонов медицинского документа при его записи.
//
// Параметры:
//  ДокументОбъект			 - ДокументОбъект	 - объект медицинского документа.
//  ТаблицаПараметров		 - ТаблицаЗначений	 - таблица  параметров шаблонов медицинского документа
//  ПараметрыТаблицШаблонов	 - ТаблицаЗначений	 - таблица многострочных параметров шаблонов медицинского документа
//  Отказ					 - Булево			 - признат отказа записи документа.
//  ШаблоныПриема			 - ТаблицаЗначений	 - шаблоны медицинского документа.
//  ПараметрыЗаписи			 - Стркутура		 - параметры записи документа.
//
Процедура ЗаписатьЗначенияПараметровДокумента(ДокументОбъект, Знач ТаблицаПараметров, ПараметрыТаблицШаблонов, Отказ = Ложь, ШаблоныПриема = Неопределено, ПараметрыЗаписи = Неопределено) Экспорт
	
	ВыгрузитьТаблицуПараметров(ДокументОбъект, ТаблицаПараметров, Отказ, ШаблоныПриема, Ложь, ПараметрыЗаписи, ПараметрыТаблицШаблонов);
	
	// Запись многострочных таблиц параметров шаблонов.
	Если Метаданные.РегистрыСведений.ДанныеТаблицШаблоновПриема.Измерения.Документ.Тип.СодержитТип(ТипЗнч(ДокументОбъект.Ссылка)) Тогда
		
		ЗаписатьЗначенияТаблицШаблонов(ДокументОбъект, ПараметрыТаблицШаблонов, ШаблоныПриема);
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет таблицу параметров медицинского документа или анамнеза клиента.
//
// Параметры:
//  ВладелецПараметровОбъект - ДокументСсылка, СправочникСсылка	 - объект, к которому привязаны значения параметров.
//  ТаблицаПараметров		 - ТаблицаЗначений					 - таблица  параметров шаблонов медицинского документа
//  Отказ					 - Булево							 - признат отказа записи документа.
//  ШаблоныПриема			 - ТаблицаЗначений					 - шаблоны медицинского документа.
//  ЭтоАнамнез				 - Булево							 - Признак того, что это сохранение параметров анамнеза клиента.
//  ПараметрыЗаписи			 - Стркутура						 - параметры записи документа.
//
Процедура ВыгрузитьТаблицуПараметров(ВладелецПараметровОбъект, Знач ТаблицаПараметров, Отказ = Ложь, ШаблоныПриема = Неопределено, ЭтоАнамнез = Ложь, ПараметрыЗаписи = Неопределено, ПараметрыТаблицШаблонов = Неопределено) Экспорт
	
	МаксДлинаСтрокиПараметра = Метаданные.ПланыВидовХарактеристик.ПараметрыHTML.Тип.КвалификаторыСтроки.Длина;
	Если ЭтоАнамнез Тогда
		НаборЗаписей = РегистрыСведений.АнамнезыЖизни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Клиент.Установить(ВладелецПараметровОбъект.Ссылка);
	Иначе
		НаборЗаписей = РегистрыСведений.ЗначенияПараметровHTML.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ВладелецПараметровОбъект.Ссылка);
	КонецЕсли;
	
	// Получаем ранее созданные строки неограниченной длины
	ТаблицаСтрокНеограниченнойДлины = МедицинскаяДеятельность.ПолучитьТаблицуСтрокЭМКНеограниченнойДлиныПоВладельцу(ВладелецПараметровОбъект.Ссылка, Ложь);
	
	РеквизитыПараметров = РеквизитыПараметровШаблонаПоТаблицеПараметров(ТаблицаПараметров);
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		
		ВидШаблона = Перечисления.ВидыШаблонов.HTMLШаблон;
		ИндексШаблона = 0;
		Если ШаблоныПриема <> Неопределено Тогда
			СтрокаШаблона = ШаблоныПриема.НайтиПоИдентификатору(СтрокаПараметра.ИдентификаторСтрокиШаблона);
			Если СтрокаШаблона = Неопределено Тогда
				Продолжить;
			Иначе
				ВидШаблона = СтрокаШаблона.ВидШаблона;
				ИндексШаблона = СтрокаШаблона.НомерСтроки - 1;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрСсылка = СтрокаПараметра.Параметр;
		
		Если ТипЗнч(СтрокаПараметра.Значение) <> Тип("Булево")
			И РеквизитПараметраШаблонаИзТаблицыРеквизитов(РеквизитыПараметров, ПараметрСсылка, "ТипЗначения") <> Тип("Булево")
			И Не ЗначениеЗаполнено(СтрокаПараметра.Значение)
		Тогда
			Если ПараметрСсылка.ОбязательноДляЗаполнения
				И ПараметрыЗаписи <> Неопределено И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения
			Тогда
				Если ПараметрыТаблицШаблонов <> Неопределено
					И ПараметрыТаблицШаблонов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, Параметр", СтрокаПараметра.ИдентификаторСтрокиШаблона, СтрокаПараметра.Параметр)).Количество() > 0
				Тогда
					Продолжить;
				КонецЕсли;
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Параметр %1 не заполнен. Данный параметр обязателен к заполнению'"), Строка(ПараметрСсылка)));
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Значение = ПодготовитьЗначениеПараметраКЗаписи(СтрокаПараметра.Значение, СтрокаПараметра, ВладелецПараметровОбъект, ВидШаблона, ИндексШаблона, РеквизитыПараметров, ТаблицаСтрокНеограниченнойДлины, МаксДлинаСтрокиПараметра);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		Если ЭтоАнамнез Тогда
			НоваяЗапись.Клиент = ВладелецПараметровОбъект.Ссылка;
			НоваяЗапись.Период = ТекущаяДата();
		Иначе
			НоваяЗапись.Документ = ВладелецПараметровОбъект.Ссылка;
			НоваяЗапись.ИндексШаблона = ИндексШаблона;
		КонецЕсли;
		НоваяЗапись.Параметр = ПараметрСсылка;
		НоваяЗапись.Значение = Значение;
	КонецЦикла;
	
	// Помечаем на удаление оставшиеся строки неограниченной длины (неиспользуемые)
	Для Каждого СтрокаЭМК Из ТаблицаСтрокНеограниченнойДлины Цикл
		Если Не СтрокаЭМК.ПометкаУдаления Тогда
			СтрокаЭМК.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗначенияТаблицШаблонов(ДокументОбъект, ТаблицаПараметров, ШаблоныПриема)
	
	МаксДлинаСтрокиПараметра = Метаданные.ПланыВидовХарактеристик.ПараметрыHTML.Тип.КвалификаторыСтроки.Длина;
	
	НаборЗаписейДанныеТаблицШаблонов = РегистрыСведений.ДанныеТаблицШаблоновПриема.СоздатьНаборЗаписей();
	НаборЗаписейДанныеТаблицШаблонов.Отбор.Документ.Установить(ДокументОбъект.Ссылка);
	
	// Получаем ранее созданные строки неограниченной длины
	ТаблицаСтрокНеограниченнойДлины = МедицинскаяДеятельность.ПолучитьТаблицуСтрокЭМКНеограниченнойДлиныПоВладельцу(ДокументОбъект.Ссылка, Истина);
	
	РеквизитыПараметров = РеквизитыПараметровШаблонаПоТаблицеПараметров(ТаблицаПараметров);
	
	ИдентификаторыСтрокПоШаблонам = Новый Соответствие;
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		
		СтрокаШаблона = ШаблоныПриема.НайтиПоИдентификатору(СтрокаПараметра.ИдентификаторСтрокиШаблона);
		Если СтрокаШаблона = Неопределено Тогда
			Продолжить;
		Иначе
			ИндексШаблона = СтрокаШаблона.НомерСтроки - 1;
			ВидШаблона = СтрокаШаблона.ВидШаблона
		КонецЕсли;
		
		ИдентификаторыСтрок = ИдентификаторыСтрокПоШаблонам.Получить(СтрокаПараметра.ИдентификаторСтрокиШаблона);
		Если ИдентификаторыСтрок = Неопределено Тогда
			ИдентификаторыСтрок = Новый Массив;
			ИдентификаторыСтрокПоШаблонам.Вставить(СтрокаПараметра.ИдентификаторСтрокиШаблона, ИдентификаторыСтрок);
		КонецЕсли;
		
		Параметр = СтрокаПараметра.Параметр;
		Значение = ПодготовитьЗначениеПараметраКЗаписи(СтрокаПараметра.Значение, СтрокаПараметра, ДокументОбъект, ВидШаблона, ИндексШаблона, РеквизитыПараметров, ТаблицаСтрокНеограниченнойДлины, МаксДлинаСтрокиПараметра);
		
		Если ТипЗнч(Значение) <> Тип("Булево")
			И РеквизитПараметраШаблонаИзТаблицыРеквизитов(РеквизитыПараметров, Параметр, "ТипЗначения") <> Тип("Булево")
			И Не ЗначениеЗаполнено(Значение)
		Тогда
			Если ИдентификаторыСтрок.Найти(СтрокаПараметра.ИдентификаторСтроки) = Неопределено Тогда
				ЕстьЗаполненныеПараметрыСтроки = Ложь;
				Для Каждого СтрокаПараметраСтрокиТаблицы Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, ИдентификаторСтроки", СтрокаПараметра.ИдентификаторСтрокиШаблона, СтрокаПараметра.ИдентификаторСтроки)) Цикл
					Если ТипЗнч(СтрокаПараметраСтрокиТаблицы.Значение) = Тип("Булево")
						Или РеквизитПараметраШаблонаИзТаблицыРеквизитов(РеквизитыПараметров, СтрокаПараметраСтрокиТаблицы.Параметр, "ТипЗначения") = Тип("Булево")
						Или ЗначениеЗаполнено(СтрокаПараметраСтрокиТаблицы.Значение)
					Тогда
						ЕстьЗаполненныеПараметрыСтроки = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЕстьЗаполненныеПараметрыСтроки Тогда
					// Имеется вложенная таблица, необходимо добавить фиктивный параметр для сохранения связи,
					// либо эталонная строка вообще не имеет параметров
					НоваяЗапись = НаборЗаписейДанныеТаблицШаблонов.Добавить();
					НоваяЗапись.Документ = ДокументОбъект.Ссылка;
					НоваяЗапись.ИндексШаблона = ИндексШаблона;
					НоваяЗапись.Параметр = ПланыВидовХарактеристик.ПараметрыHTML.ПустаяСсылка();
					НоваяЗапись.ТаблицаШаблонов = ТаблицаШаблоновПоСтрокеУИД(СтрокаПараметра.ИдентификаторТаблицы);
					НоваяЗапись.НомерСтрокиТаблицы = СтрокаПараметра.НомерСтрокиТаблицы;
					НоваяЗапись.ИдентификаторСтроки = СтрокаПараметра.ИдентификаторСтроки;
					НоваяЗапись.ИдентификаторРодительскойСтроки = СтрокаПараметра.ИдентификаторРодительскойСтроки;
				КонецЕсли;
				
				ИдентификаторыСтрок.Добавить(СтрокаПараметра.ИдентификаторСтроки);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейДанныеТаблицШаблонов.Добавить();
		НоваяЗапись.Значение = Значение;
		НоваяЗапись.Документ = ДокументОбъект.Ссылка;
		НоваяЗапись.ИндексШаблона = ИндексШаблона;
		НоваяЗапись.Параметр = Параметр;
		НоваяЗапись.ТаблицаШаблонов = ТаблицаШаблоновПоСтрокеУИД(СтрокаПараметра.ИдентификаторТаблицы);
		НоваяЗапись.НомерСтрокиТаблицы = СтрокаПараметра.НомерСтрокиТаблицы;
		НоваяЗапись.ИдентификаторСтроки = СтрокаПараметра.ИдентификаторСтроки;
		НоваяЗапись.ИдентификаторРодительскойСтроки = СтрокаПараметра.ИдентификаторРодительскойСтроки;
		//НоваяЗапись.НомерСтрокиРодительскойТаблицы = СтрокаПараметра.НомерСтрокиРодительскойТаблицы;
	КонецЦикла;
	НаборЗаписейДанныеТаблицШаблонов.Записать();
	
	// Помечаем на удаление оставшиеся строки неограниченной длины (неиспользуемые)
	Для Каждого СтрокаЭМК Из ТаблицаСтрокНеограниченнойДлины Цикл
		Если Не СтрокаЭМК.ПометкаУдаления Тогда
			СтрокаЭМК.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует кеш значений полей выбора шаблона.
//
// Параметры:
//  ШаблоныПриема	 - СправочникСсылка.ШаблоныHTML, Массив	 - шаблон медицинского документа.
// 
// Возвращаемое значение:
//   Соответствие.
//
Функция ПолучитьКешЗначенийВыбора(ШаблоныПриема) Экспорт 
	
	МассивШаблонов = ШаблоныПриема;
	Если ТипЗнч(ШаблоныПриема) <> Тип("Массив") Тогда 
		МассивШаблонов = Новый Массив;
		МассивШаблонов.Добавить(ШаблоныПриема);
	КонецЕсли;
	
	КешЗначенийВыбора = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеЗначенияХарактеристик.Ссылка КАК Значение,
	|	ШаблоныHTMLСоответствияПараметрам.Параметр КАК Параметр
	|ИЗ
	|	Справочник.ШаблоныHTML.СоответствияПараметрам КАК ШаблоныHTMLСоответствияПараметрам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеЗначенияХарактеристик КАК ДополнительныеЗначенияХарактеристик
	|		ПО ШаблоныHTMLСоответствияПараметрам.Параметр = ДополнительныеЗначенияХарактеристик.Владелец
	|ГДЕ
	|	ШаблоныHTMLСоответствияПараметрам.Ссылка В(&ШаблоныПриема)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДополнительныеЗначенияХарактеристик.Ссылка,
	|	ВерсииШаблоновHTMLСоответствияПараметрам.Параметр
	|ИЗ
	|	Справочник.ВерсииШаблоновHTML.СоответствияПараметрам КАК ВерсииШаблоновHTMLСоответствияПараметрам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеЗначенияХарактеристик КАК ДополнительныеЗначенияХарактеристик
	|		ПО ВерсииШаблоновHTMLСоответствияПараметрам.Параметр = ДополнительныеЗначенияХарактеристик.Владелец
	|ГДЕ
	|	ВерсииШаблоновHTMLСоответствияПараметрам.Ссылка В(&ШаблоныПриема)
	|ИТОГИ ПО
	|	Параметр";
	Запрос.УстановитьПараметр("ШаблоныПриема", МассивШаблонов);
	
	ВыборкаПараметры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПараметры.Следующий() Цикл
		МассивЗначений = Новый Массив;
		ВыборкаЗначения = ВыборкаПараметры.Выбрать();
		Пока ВыборкаЗначения.Следующий() Цикл
			ЗначениеСтрокой = ПреобразоватьЗначениеВСтрокуВнутр(ВыборкаЗначения.Значение);
			МассивЗначений.Добавить(ВыборкаЗначения.Значение);
		КонецЦикла;
		КешЗначенийВыбора.Вставить(ВыборкаПараметры.Параметр, МассивЗначений);
	КонецЦикла;
	
	Возврат КешЗначенийВыбора;
	
КонецФункции	

// Формирует массив структур таблицы значений со значениями по умолчанию заданных параметров шаблона.
//
// Параметры:
//  ТаблицаПараметров				 - ТаблицаЗначений		 - таблица  параметров шаблонов медицинского документа
//  ТаблицаЗависимыхПараметров		 - ТаблицаЗначений		 - таблица зависимостей параметров шаблона от других параметров шаблона.
//  Объект							 - ДокументОбъект, ДанныеФормыСтруктура	 - медицинский документ.
//  Параметр						 - ПланВидовХарактеристикСсылка.ПараметрыHTML	 - параметр. Если не задан, то для всех параметров.
//  ИдентификаторСтрокиШаблона		 - Число										 - Идентификатор строки шаблона в приеме.
//  ДополнительныйОтборПараметров	 - Структура									 - дополнительный фильтр для отсева ненужных строк параметров.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьЗначенияПараметровПоУмолчанию(Знач ТаблицаПараметров, Знач ТаблицаЗависимыхПараметров, Знач Объект, Параметр = Неопределено, ИдентификаторСтрокиШаблона = Неопределено, ДополнительныйОтборПараметров = Неопределено, РассчитатьИсходныйПараметр = Ложь) Экспорт
	
	КолонкиВыгрузки = "Параметр, Значение";
	
	ОтборПараметров = Новый Структура;
	Если ИдентификаторСтрокиШаблона <> Неопределено Тогда
		ОтборПараметров = Новый Структура("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныйОтборПараметров) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуру(ОтборПараметров, ДополнительныйОтборПараметров)
	КонецЕсли;
	
	Если ОтборПараметров.Количество() = 0 Тогда
		ОтборПараметров = Неопределено;
	КонецЕсли;

	// Определение колонок для свёртки результата.
	Если ТипЗнч(ТаблицаПараметров) = Тип("ТаблицаЗначений") Тогда
		КолонкиТаблицы = ТаблицаПараметров.Колонки;
	Иначе
		КолонкиТаблицы = ТаблицаПараметров.Выгрузить().Колонки;
	КонецЕсли;
	
	Если КолонкиТаблицы.Найти("ИдентификаторСтрокиШаблона") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(КолонкиВыгрузки, "ИдентификаторСтрокиШаблона", ", ");
	КонецЕсли;
	Если КолонкиТаблицы.Найти("ИдентификаторТаблицы") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(КолонкиВыгрузки, "ИдентификаторТаблицы", ", ");
	КонецЕсли;
	Если КолонкиТаблицы.Найти("НомерСтрокиТаблицы") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(КолонкиВыгрузки, "НомерСтрокиТаблицы", ", ");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаПараметров) = Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначенийПараметров = ТаблицаПараметров.Скопировать(ОтборПараметров, КолонкиВыгрузки);
	Иначе
		ТаблицаЗначенийПараметров = ТаблицаПараметров.Выгрузить(ОтборПараметров, КолонкиВыгрузки);
			
		Если ИдентификаторСтрокиШаблона = Неопределено Тогда
			
			// Исключаются параметры, присуствующие только в шаблонах-обработках.
			СтрокиКУдалению = Новый Массив;
			Отбор = Новый Структура("ИдентификаторСтрокиШаблона");
			Для Каждого СтрокаШаблона Из Объект.ШаблоныПриема Цикл
				Если СтрокаШаблона.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
					Отбор.ИдентификаторСтрокиШаблона = СтрокаШаблона.ПолучитьИдентификатор();
					СтрокиПараметров = ТаблицаЗначенийПараметров.НайтиСтроки(Отбор);
					Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
						СтрокиКУдалению.Добавить(СтрокаПараметра);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаПараметра Из СтрокиКУдалению Цикл
				ТаблицаЗначенийПараметров.Удалить(СтрокаПараметра);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаЗначенийПараметров.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначенийПараметров.Колонки.Добавить("Рассчитан", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийПараметров.Колонки.Добавить("БылОбработан", Новый ОписаниеТипов("Число"));
	Если ТаблицаЗначенийПараметров.Колонки.Найти("ИдентификаторСтрокиШаблона") = Неопределено Тогда
		ТаблицаЗначенийПараметров.Колонки.Добавить("ИдентификаторСтрокиШаблона", Новый ОписаниеТипов("Число")); // Колонка только для совместимости с общим функционалом расчета.
	КонецЕсли;
	
	РасчитанныеПараметры = ТаблицаЗначенийПараметров.СкопироватьКолонки();
	
	Если Параметр = Неопределено Тогда
		Для Каждого СтрокаПараметр Из ТаблицаЗначенийПараметров Цикл
			ВычислитьЗначениеПараметраРекурсивно(СтрокаПараметр, ТаблицаЗначенийПараметров, ТаблицаЗависимыхПараметров, РасчитанныеПараметры, Объект);
		КонецЦикла;
		
	ИначеЕсли РассчитатьИсходныйПараметр Тогда
		
		СтрокиЗначенийПараметров = ТаблицаЗначенийПараметров.НайтиСтроки(Новый Структура("Параметр", Параметр));
		Если СтрокиЗначенийПараметров.Количество() <> 0 Тогда
			ВычислитьЗначениеПараметраРекурсивно(СтрокиЗначенийПараметров[0], ТаблицаЗначенийПараметров, ТаблицаЗависимыхПараметров, РасчитанныеПараметры, Объект, , Истина);
		КонецЕсли;
	Иначе
		// Вычисление зависимых параметров. Например, после ввода исходного параметра.
		// Ищем сам параметр, помечаем его рассчитанным.
		ТекущийПараметр = ТаблицаЗначенийПараметров.Найти(Параметр, "Параметр");
		Если ТекущийПараметр <> Неопределено Тогда
			ТекущийПараметр.Рассчитан = Истина;
		КонецЕсли;
		Для Каждого СтрокаЗависимыйПараметр Из ТаблицаЗависимыхПараметров.НайтиСтроки(Новый Структура("Параметр", Параметр)) Цикл
			СтрокиЗависимых = ТаблицаЗначенийПараметров.НайтиСтроки(Новый структура("Параметр", СтрокаЗависимыйПараметр.ЗависимыйПараметр));
			Для Каждого СтрокаЗависимый Из СтрокиЗависимых Цикл
				ВычислитьЗначениеПараметраРекурсивно(СтрокаЗависимый, ТаблицаЗначенийПараметров, ТаблицаЗависимыхПараметров, РасчитанныеПараметры, Объект, , Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияСервер.ПреобразоватьТаблицуЗначенийВМассивСтруктур(РасчитанныеПараметры);
	
КонецФункции

// Для списка параметров приёма определяет значения по умолчанию для переданного документа контекста.
//
// Параметры:
//  ПараметрыПриема	 - Массив - массив элментов ПланВидовХарактеристикСсылка.ПараметрыHTML.
//  Документ		 - Произвольный	 - Контекст выполнения алгоритмов расчета значения параметра.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьЗначенияПоУмолчаниюМассиваПараметров(ПараметрыПриема, Знач Документ) Экспорт
	
	Если ПараметрыПриема.Количество() <> 0 Тогда
	
		ТаблицаПараметров = Новый ТаблицаЗначений;
		ТаблицаПараметров.Колонки.Добавить("Параметр");
		ТаблицаПараметров.Колонки.Добавить("Значение");
		Для Каждого ПараметрПриема Из ПараметрыПриема Цикл
			ТаблицаПараметров.Добавить().Параметр = ПараметрПриема;
		КонецЦикла;
		
		ТаблицаЗависимыхПараметров = ТаблицаПараметров.СкопироватьКолонки();
		ТаблицаЗависимыхПараметров.Колонки.Добавить("ЗависимыйПараметр");
		
		Возврат ПолучитьЗначенияПараметровПоУмолчанию(ТаблицаПараметров, ТаблицаЗависимыхПараметров, Документ);
		
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗначениеПараметраКЗаписи(ИсходноеЗначение, СтрокаПараметра, ВладелецПараметровОбъект, ВидШаблона, ИндексШаблона, РеквизитыПараметров, ТаблицаСтрокНеограниченнойДлины, МаксДлинаСтрокиПараметра)
	
	Значение = ИсходноеЗначение;
	Параметр = СтрокаПараметра.Параметр;
	
	Если Не ЗначениеЗаполнено(Значение)
		И ВидШаблона = Перечисления.ВидыШаблонов.HTMLШаблон
	Тогда
		РеквизитыПараметра = РеквизитыПараметров.Найти(Параметр, "Ссылка");
		Если РеквизитыПараметра <> Неопределено Тогда
			Значение = РеквизитыПараметра.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") И СтрДлина(Значение) > МаксДлинаСтрокиПараметра Тогда
		// Поиск подходящей уже созданной строки неограниченной длины в таблице
		СтрокаЭМКСсылка = Неопределено;
		Если ТаблицаСтрокНеограниченнойДлины.Количество() > 0 Тогда 
			СтруктураОтбора = ОтборСтрокиЭМК(Параметр, ИндексШаблона);
			СущСтрокиЭМК = ТаблицаСтрокНеограниченнойДлины.НайтиСтроки(СтруктураОтбора);
			Если СущСтрокиЭМК.Количество() > 0 Тогда 
				СтрокаЭМКСсылка = СущСтрокиЭМК[0].Ссылка;
				ТаблицаСтрокНеограниченнойДлины.Удалить(СущСтрокиЭМК[0]);
			КонецЕсли;
		КонецЕсли;
		
		// Подготовка значений полей для поиска или создания элемента строк ЭМК неограниченной длины.
		ИдентификаторТаблицы = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(СтрокаПараметра, "ИдентификаторТаблицы");
		ТаблицаШаблонов = ?(ЗначениеЗаполнено(ИдентификаторТаблицы), ТаблицаШаблоновПоСтрокеУИД(ИдентификаторТаблицы), Неопределено);
		НомерСтрокиТаблицы = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(СтрокаПараметра, "НомерСтрокиТаблицы", 0);
		АдресНеогрСтроки = АдресСтрокиЭМК(ИндексШаблона, ТаблицаШаблонов);
		ЗаполнитьЗначенияСвойств(АдресНеогрСтроки, СтрокаПараметра);
		
		Значение = МедицинскаяДеятельность.СформироватьСтрокуЭМКНеограниченнойДлины(
			ВладелецПараметровОбъект.Ссылка, Параметр, Значение, ВладелецПараметровОбъект.ПометкаУдаления, АдресНеогрСтроки, СтрокаЭМКСсылка);
			
		СтрокаКИсключению = ТаблицаСтрокНеограниченнойДлины.Найти(Значение, "Ссылка");
		Если СтрокаКИсключению <> Неопределено Тогда
			ТаблицаСтрокНеограниченнойДлины.Удалить(СтрокаКИсключению);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция РеквизитыПараметровШаблонаПоТаблицеПараметров(ТаблицаПараметров)
	
	Параметры = Новый Массив;
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		Параметры.Добавить(СтрокаПараметра.Параметр);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Параметры", Параметры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыHTML.Ссылка КАК Ссылка,
	|	ПараметрыHTML.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыHTML КАК ПараметрыHTML
	|ГДЕ
	|	ПараметрыHTML.Ссылка В(&Параметры)
	|	И НЕ ПараметрыHTML.ЭтоГруппа"
	;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РеквизитПараметраШаблонаИзТаблицыРеквизитов(ТаблицаРеквизитов, Параметр, ИмяПараметра)
	
	СтрокаТаблицы = ТаблицаРеквизитов.Найти(Параметр);
	Если СтрокаТаблицы <> Неопределено
		И ТаблицаРеквизитов.Колонки.Найти(ИмяПараметра) <> Неопределено
	Тогда
		Возврат СтрокаТаблицы[ИмяПараметра];
	Иначе
		Попытка
			Возврат ДопСерверныеФункции.ПолучитьРеквизит(Параметр, ИмяПараметра);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция АдресСтрокиЭМК(ИндексШаблона = 0, ТаблицаШаблонов = Неопределено, НомерСтрокиТаблицы = 0)
	
	Адрес = Новый Структура("ИндексШаблона, ТаблицаШаблонов, НомерСтрокиТаблицы", ИндексШаблона, ТаблицаШаблонов, НомерСтрокиТаблицы);
	
	Если ТаблицаШаблонов = Неопределено Тогда
		Адрес.ТаблицаШаблонов = Справочники.ТаблицыШаблоновПриема.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Возвращает таблицу шаблонов по строке УИД ссылки.
//
// Параметры:
//  СтрокаУИД	 - Строка	 - Строка уникального идентификатора ссылки.
// 
// Возвращаемое значение:
//   СправочникСсылка.ТаблицыШалонов.
//
Функция ТаблицаШаблоновПоСтрокеУИД(СтрокаУИД) Экспорт
	
	Попытка
		Ссылка = Справочники.ТаблицыШаблоновПриема.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУИД));
	Исключение
		Ссылка = Справочники.ТаблицыШаблоновПриема.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Ссылка;
	
КонецФункции

Функция ПараметрыЭталонныхСтрокВсехТаблицШаблона(ТекстШаблона) Экспорт
	
	ПараметрыЭталонныхСтрок = Новый Массив;
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона);
	ЭлементыТаблиц = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , , "data-bit-dyntable-id");
	ТегиПараметров = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТегиПараметров();
	
	Для Каждого ЭлементТаблицы Из ЭлементыТаблиц Цикл
		
		ТаблицаШаблона = ТаблицаШаблоновПоСтрокеУИД(ЭлементТаблицы.ПолучитьАтрибут("data-bit-dyntable-id"));
		Если Не ЗначениеЗаполнено(ТаблицаШаблона) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерЭталоннойСтроки = ТаблицаШаблона.НомерЭталоннойСтроки;
		ЭталоннаяСтрока = Неопределено;
		
		ТелоТаблицы = ЭлементТаблицы.ПолучитьТелоТаблицы();
		Если ТелоТаблицы.Количество() <> 0 Тогда
			Для Каждого СтрокаТаблицы Из ТелоТаблицы[0].ДочерниеУзлы Цикл
				Если СтрокаТаблицы.ИндексСтроки = НомерЭталоннойСтроки - 1 Тогда //
					ЭталоннаяСтрока = СтрокаТаблицы;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЭталоннаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Метод НайтиПоФильтру есть только у ДокументHTML, поэтому предварительно формируем из строки документ
		ДокументСтроки = РаботаСDOMКлиентСервер.СоздатьДокументDOM(РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ЭталоннаяСтрока));
		
		ЭлементыПараметров = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументСтроки, , ТегиПараметров);
		
		ПараметрыЭталоннойСтроки = Новый Массив;
		
		Для Каждого ЭлементПараметра Из ЭлементыПараметров Цикл
			Параметр = ПолучитьПараметрПоУИД(ЭлементПараметра.ПолучитьАтрибут("id"));
			
			Если ЗначениеЗаполнено(Параметр) Тогда
				ПараметрыЭталоннойСтроки.Добавить(Параметр);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыЭталонныхСтрок, ПараметрыЭталоннойСтроки, Истина);
	КонецЦикла;
	
	Возврат ПараметрыЭталонныхСтрок;
	
КонецФункции

// Возвращает номер эталонной строки таблицы шаблонов по строке УИД ссылки.
//
// Параметры:
//  СтрокаУИД	 - Строка	 - Строка уникального идентификатора ссылки.
// 
// Возвращаемое значение:
//  Число, Неопределено
//
Функция НомерЭталоннойСтрокиТаблицыШаблонов(СтрокаУИД) Экспорт
	
	Таблица = ТаблицаШаблоновПоСтрокеУИД(СтрокаУИД);
	
	Если ЗначениеЗаполнено(Таблица) Тогда
		Возврат Таблица.НомерЭталоннойСтроки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВызовКлиентСерверныхПроцедурССервера

Функция СформироватьВерсиюДляПечатиШаблонаОсмотра(Объект, ДанныеШаблона, ТаблицаПараметров, КешЗначенийВыбора = Неопределено,
	СписокНазначений = Неопределено, КешИзображенийПриема = Неопределено, ИдентификаторФормы = Неопределено, ДанныеТаблицШаблонов = Неопределено,
	ВерсияДляСЭМД = Ложь, РисункиКартинок = Неопределено, ДобавленныеИзображения = Неопределено) Экспорт
	
	Возврат РаботаСШаблонамиHTMLКлиентСервер.СформироватьВерсиюДляПечатиШаблонаОсмотра(Объект, ДанныеШаблона, ТаблицаПараметров, КешЗначенийВыбора,
		СписокНазначений, КешИзображенийПриема, ИдентификаторФормы, ДанныеТаблицШаблонов, ВерсияДляСЭМД, РисункиКартинок, ДобавленныеИзображения);
	
КонецФункции

// Формирует версию для редактирования шаблона осмотра
//
// Параметры:
//  ИдентификаторФормы	 - УникальныйИдентификатор	 - Уникальный идентификатор формы, из которой вызывается процедура.
//  ДанныеШаблона		 - Структура				 - Структура данных шаблона.
//  				Шаблон                     - СправочникСсылка.ШаблоныHTML - Шаблон HTML.
//  				ИдентификаторСтрокиШаблона - Число - Идентификатор строки шаблона в приеме.
//  				ТекстШаблона               - Строка - HTML текст шаблона.
//  ТаблицаПараметров	 - ТаблицаЗначений			 - Таблица параметров из приема.
//  КешЗначенийВыбора	 - Соответствие				 - Кеш значений выбора.
//  КешИзображенийПриема - Соответствие				 - Кеш изображений шаблонов.
//  Колонтитулы			 - Структура				 - Структура Колонтитулов.
//  ДанныеТаблицШаблонов - 							 - Структура
//  							ПараметрыТаблицШаблонов - ТаблицаЗначений - Таблица параметров многострочных таблиц шаблона.
// 
// Возвращаемое значение:
//  Структура - ТекстШаблонаПолный	 - Строка - Полный HTML текст шаблона.
//  			ОбновленныеЗначенияПараметров	 - Массив - Обновленные значения параметров.
//
Функция СформироватьВерсиюДляРедактированияШаблонаОсмотра(ИдентификаторФормы, ДанныеШаблона, ТаблицаПараметров, КешЗначенийВыбора = Неопределено,
	КешИзображенийПриема = Неопределено, ДанныеТаблицШаблонов = Неопределено, РисункиКартинок = Неопределено, ДобавленныеИзображения = Неопределено) Экспорт
	
	Возврат РаботаСШаблонамиHTMLКлиентСервер.СформироватьВерсиюДляРедактированияШаблонаОсмотра(ИдентификаторФормы, ДанныеШаблона, 
		ТаблицаПараметров, КешЗначенийВыбора, КешИзображенийПриема, ДанныеТаблицШаблонов, РисункиКартинок, ДобавленныеИзображения);
	
КонецФункции

// Урезает текст шаблона приема по режиму получателя.
//
// Параметры:
//  ТекстШаблона	 - Строка - HTML-текст полной печатной версии шаблона.
//  РежимДляКлиента	 - Булево - режим получателя (клиент или медкарта).
// 
// Возвращаемое значение:
//  Строка - HTML-текст.
//
Функция ТекстШаблонаОсмотраПоРежиму(ТекстШаблона, РежимДляКлиента) Экспорт
	Возврат РаботаСШаблонамиHTMLКлиентСервер.ТекстШаблонаОсмотраПоРежиму(ТекстШаблона, РежимДляКлиента);
КонецФункции

// Добавляет шапку тексту шаблона
//
// Параметры:
//  ТекстШаблона	 - Строка						- HTML-текст полной печатной версии шаблона.
//  РежимДляКлиента	 - Булево						- режим получателя (клиент или медкарта).
//  ШаблонПриема	 - СправочникСсылка.ШаблоныHTML	- шаблон медицинского документа.
//  Филиал			 - СправочникСсылка.Филиалы		- филиал медицинского документа.
//  ДатаДокумента	 - Дата							- дата медицинского документа.
// 
// Возвращаемое значение:
//  Строка - HTML-текст.
//
Функция УстановитьШапкуШаблона(ТекстШаблона, РежимДляКлиента, Знач Объект) Экспорт
	
	Возврат РаботаСШаблонамиHTMLКлиентСервер.УстановитьШапкуШаблона(ТекстШаблона, РежимДляКлиента, Объект);
		
КонецФункции

#КонецОбласти

// Формирует PDF на основании HTML. 
//	Возвращает Путь к файлу (ВернутьПуть = Истина) или Двоичные данные (ВернутьПуть = Ложь).
//  Для работы необходима компонента wkhtmltopdf
//
// Параметры:
//  Html - Строка/Двоичные данные - Текст html 
// 
// Возвращаемое значение:
//   Строка, ДвоичныеДанные.
//
Функция ПреобразоватьHTMLвPDF(HtmlНаПреобразование, ВернутьПуть = Истина, РежимPDF_A = Ложь) Экспорт
	
	ВыполнениеНаLinux = ОбщегоНазначения.ЭтоLinuxСервер();
	Возврат РаботаСШаблонамиHTMLКлиентСервер.ПреобразоватьHTMLвPDF(HtmlНаПреобразование, ВыполнениеНаLinux, ВернутьПуть,, РежимPDF_A);
	
КонецФункции

Функция ПолучитьТекстКолонтитулаПоДаннымПодписи(Ссылка, ДанныеСертификата, ДатаПодписи, РасположениеПодписи) Экспорт
	
	ДанныеПодписи = ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(ДанныеСертификата, Ссылка, ДатаПодписи, Истина);
	Возврат РаботаСШаблонамиHTMLКлиентСервер.ПолучитьHTMLТекстЭЦПМедицинскогоДокумента(РасположениеПодписи, ДанныеПодписи);
	
КонецФункции

Процедура СохранитьРисункиДокумента(ДокументОбъект, РисункиКартинок, ШаблоныПриема) Экспорт
	
	НаборЗаписей = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументОбъект.Ссылка);
	НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок);
	
	Для Каждого СтрокаРисунка Из РисункиКартинок Цикл
		
		ИндексШаблона = 0;
		Если ШаблоныПриема <> Неопределено Тогда
			СтрокаШаблона = ШаблоныПриема.НайтиПоИдентификатору(СтрокаРисунка.ИдентификаторСтрокиШаблона);
			Если СтрокаШаблона = Неопределено Тогда
				Продолжить;
			Иначе
				ИндексШаблона = СтрокаШаблона.НомерСтроки - 1;
			КонецЕсли;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ДокументОбъект.Ссылка;
		НоваяЗапись.Тип = Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок;
		НоваяЗапись.ИндексШаблона = ИндексШаблона;
		НоваяЗапись.ИдентификаторЭлемента = СтрокаРисунка.ИдентификаторРисунка;
		НоваяЗапись.Расширение = "png";
		
		СтруктураСохраненияФайла = бит_РаботаСФайлами.ПолучитьСтруктуруСохраненияФайлаРедактируемогоЭлемента(ПолучитьИзВременногоХранилища(СтрокаРисунка.АдресРисунка), НоваяЗапись);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураСохраненияФайла, "Файл, ПутьКФайлу");
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СохранитьДобавленныеИзображенияДокумента(ДокументОбъект, ДобавленныеИзображения, ШаблоныПриема) Экспорт
	
	НаборЗаписей = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументОбъект.Ссылка);
	НаборЗаписей.Отбор.Тип.Установить(Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.ДобавленноеИзображение);
	
	Для Каждого СтрокаИзображения Из ДобавленныеИзображения Цикл
		
		ИндексШаблона = 0;
		Если ШаблоныПриема <> Неопределено Тогда
			СтрокаШаблона = ШаблоныПриема.НайтиПоИдентификатору(СтрокаИзображения.ИдентификаторСтрокиШаблона);
			Если СтрокаШаблона = Неопределено Тогда
				Продолжить;
			Иначе
				ИндексШаблона = СтрокаШаблона.НомерСтроки - 1;
			КонецЕсли;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ДокументОбъект.Ссылка;
		НоваяЗапись.Тип = Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.ДобавленноеИзображение;
		НоваяЗапись.ИндексШаблона = ИндексШаблона;
		НоваяЗапись.ИдентификаторЭлемента = СтрокаИзображения.ИдентификаторИзображения;
		НоваяЗапись.Расширение = СтрокаИзображения.Расширение;
		
		СтруктураСохраненияФайла = бит_РаботаСФайлами.ПолучитьСтруктуруСохраненияФайлаРедактируемогоЭлемента(ПолучитьИзВременногоХранилища(СтрокаИзображения.АдресИзображения), НоваяЗапись);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураСохраненияФайла, "Файл, ПутьКФайлу");
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СформироватьКолонтитулыЭЦПШаблонов(ПриемСсылка, Знач ТаблицаПодписей = Неопределено, Знач ШаблоныОсмотра = Неопределено, Знач ЭМД = Неопределено, Знач РолиИПодписиЭМД = Неопределено) Экспорт
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	СоответствиеКолонтитулов = Новый Соответствие;
	
	Если ТаблицаПодписей = Неопределено Тогда
		
		ТаблицаПодписей = Новый ТаблицаЗначений;
		ТаблицаПодписей.Колонки.Добавить("УникальныйИдентификатор",	Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаПодписей.Колонки.Добавить("НомерСтроки",				Новый ОписаниеТипов("Число"));
		ТаблицаПодписей.Колонки.Добавить("УстановившийПодпись",		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		ТаблицаПодписей.Колонки.Добавить("ПодписанФайлЭМД",			Новый ОписаниеТипов("Булево"));
		ТаблицаПодписей.Колонки.Добавить("АдресСертификата",		Новый ОписаниеТипов("Строка"));
		ТаблицаПодписей.Колонки.Добавить("ДатаПодписи",				Новый ОписаниеТипов("Дата"));
		ТаблицаПодписей.Колонки.Добавить("УИД_ЭМД",					Новый ОписаниеТипов("УникальныйИдентификатор"));
		
		тзПодписей = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(ПриемСсылка,,,,, Истина);
		
		Для Каждого СтрокаПодписи Из тзПодписей Цикл
			НоваяСтрока = ТаблицаПодписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодписи);
			НоваяСтрока.НомерСтроки = ТаблицаПодписей.Количество();
			ДвоичныеДанныеСертификата = СтрокаПодписи.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		
		бит_СертификатыЭЦП.ЗаполнитьУИДыЭМД(ТаблицаПодписей, ПриемСсылка);
		
		ЭМД = ПриемСсылка.ЭМД;
		ШаблоныОсмотра = ПриемСсылка.ШаблоныПриема;
		РолиИПодписиЭМД = ПриемСсылка.РолиИПодписиЭМД;
	КонецЕсли;
	
	ТребуютсяРолиПоШаблонамПриёма = МедицинскаяДеятельность.ТребуютсяРолиПоШаблонамПриёма(ПриемСсылка);
	
	УИДыЭМД = ИдентификаторыЭМДПоШаблонам(ПриемСсылка);
	
	Для Каждого СтрокаШаблона Из ШаблоныОсмотра Цикл
		
		УИД_ЭМД = УИДыЭМД.Получить(СтрокаШаблона.ШаблонПриема);
		ВерсияШаблона = ВерсионированиеШаблонов.ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема, ПриемСсылка.Дата, мУчетнаяПолитика);
		СтрокаПодписи = ПолучитьСтрокуПодписиПоСтрокеШаблона(ВерсияШаблона.ВидДокумента, СтрокаШаблона.УИД, ТаблицаПодписей, ЭМД, РолиИПодписиЭМД, ПриемСсылка, ТребуютсяРолиПоШаблонамПриёма, УИД_ЭМД);
		
		Если СтрокаПодписи = Неопределено Тогда
			// Шаблон не подписан
			Продолжить;
		КонецЕсли;
		
		РасположениеПодписи = ВерсияШаблона.РасположениеПодписи;
		ТекстКолонтитула = ПолучитьТекстКолонтитулаПоДаннымПодписи(ПриемСсылка, СтрокаПодписи.АдресСертификата, СтрокаПодписи.ДатаПодписи, РасположениеПодписи);
		
		СтруктураКолонтитулы = Новый Структура("ВерхнийКолонтитул, НижнийКолонтитул", "", "");
		
		Если РасположениеПодписи = Перечисления.РасположениеПодписи.ПравыйВерхнийУгол
			Или РасположениеПодписи = Перечисления.РасположениеПодписи.ЛевыйВерхнийУгол
		Тогда
			СтруктураКолонтитулы.ВерхнийКолонтитул = ТекстКолонтитула;
		Иначе
			СтруктураКолонтитулы.НижнийКолонтитул = ТекстКолонтитула;
		КонецЕсли;
		СоответствиеКолонтитулов.Вставить(СтрокаШаблона.ШаблонПриема, СтруктураКолонтитулы);
	КонецЦикла;
	
	Возврат СоответствиеКолонтитулов;
	
КонецФункции

Функция ИдентификаторыЭМДПоШаблонам(ПриемСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	ШаблоныПриема.ДатаПриема КАК ДатаПриема,
		|	ШаблоныПриема.Ссылка КАК Ссылка,
		|	ШаблоныПриема.УИД КАК УИД,
		|	ШаблоныПриема.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(РолиШаблонов.КоличествоРолей, 0) КАК КоличествоРолей
		|ПОМЕСТИТЬ ШаблоныПриема
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|		Прием.Дата КАК ДатаПриема,
		|		Прием.Ссылка КАК Ссылка,
		|		ПриемШаблоныПриема.УИД КАК УИД,
		|		ПриемШаблоныПриема.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		Документ.Прием КАК Прием
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|			ПО (Прием.Ссылка = &Прием)
		|				И Прием.Ссылка = ПриемШаблоныПриема.Ссылка) КАК ШаблоныПриема
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РолиПодписей.Ссылка КАК Ссылка,
		|			КОЛИЧЕСТВО(РолиПодписей.Роль) КАК КоличествоРолей
		|		ИЗ
		|			Справочник.ШаблоныHTML.РолиПодписей КАК РолиПодписей
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РолиПодписей.Ссылка) КАК РолиШаблонов
		|		ПО (РолиШаблонов.Ссылка = ШаблоныПриема.ШаблонПриема)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|	ШаблоныПриемов.УИД КАК УИД,
		|	ЕСТЬNULL(ВерсииШаблонов.ВерсияШаблона, ШаблоныПриемов.ШаблонПриема) КАК ВерсияШаблона
		|ПОМЕСТИТЬ ВерсииШаблоновПриема
		|ИЗ
		|	ШаблоныПриема КАК ШаблоныПриемов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыВерсий.ШаблонПриема КАК ШаблонПриема,
		|			ДатыВерсий.ДатаПриема КАК ДатаПриема,
		|			ДатыВерсий.ДатаВерсии КАК ДатаВерсии,
		|			ВерсииШаблоновHTML.Ссылка КАК ВерсияШаблона,
		|			ЕСТЬNULL(РолиВерсий.КоличествоРолей, 0) КАК КоличествоРолей
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема КАК ДатаПриема,
		|				МАКСИМУМ(ВерсииШаблоновHTML.Дата) КАК ДатаВерсии
		|			ИЗ
		|				ШаблоныПриема КАК ШаблоныПриемов
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|					ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|						И (ВерсииШаблоновHTML.Дата >= ШаблоныПриемов.ДатаПриема)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ШаблоныПриемов.ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема) КАК ДатыВерсий
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|				ПО ДатыВерсий.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|					И (ВерсииШаблоновHTML.Дата = ДатыВерсий.ДатаВерсии)
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					РолиПодписей.Ссылка КАК Ссылка,
		|					КОЛИЧЕСТВО(РолиПодписей.Роль) КАК КоличествоРолей
		|				ИЗ
		|					Справочник.ВерсииШаблоновHTML.РолиПодписей КАК РолиПодписей
		|				
		|				СГРУППИРОВАТЬ ПО
		|					РолиПодписей.Ссылка) КАК РолиВерсий
		|				ПО (РолиВерсий.Ссылка = ВерсииШаблоновHTML.Ссылка)) КАК ВерсииШаблонов
		|		ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблонов.ШаблонПриема
		|			И ШаблоныПриемов.ДатаПриема = ВерсииШаблонов.ДатаПриема
		|ГДЕ
		|	(&УчитыватьШаблоныБезРолей
		|			ИЛИ ЕСТЬNULL(ВерсииШаблонов.КоличествоРолей, ШаблоныПриемов.КоличествоРолей) > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииШаблоновПриема.ШаблонПриема КАК ШаблонПриема,
		|	ВЫБОР
		|		КОГДА ВерсииШаблоновПриема.ВерсияШаблона.НеФормироватьОтдельныйЭМД
		|			ТОГДА &ПустойУИД
		|		ИНАЧЕ ВерсииШаблоновПриема.УИД
		|	КОНЕЦ КАК УИД_ЭМД
		|ИЗ
		|	ВерсииШаблоновПриема КАК ВерсииШаблоновПриема";
	
	Запрос.УстановитьПараметр("Прием", ПриемСсылка);
	Запрос.УстановитьПараметр("ПустойУИД", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.УстановитьПараметр("УчитыватьШаблоныБезРолей", Ложь);
	
	УИДыЭМД = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УИДыЭМД.Вставить(Выборка.ШаблонПриема, Выборка.УИД_ЭМД);
	КонецЦикла;
	
	Возврат УИДыЭМД;
	
КонецФункции

Функция ПолучитьСтрокуПодписиПоСтрокеШаблона(ВидДокумента, УИДШаблона, ТаблицаПодписей, ЭМД, РолиИПодписиЭМД, ПриемСсылка, ТребуютсяРолиПоШаблонамПриёма, УИД_ЭМД)
	
	СтрокаПодписиПоСтрокеШаблона = Неопределено;
	
	ШаблонРЭМД = ЗначениеЗаполнено(ВидДокумента) И ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД(ПриемСсылка.Филиал);
	
	Если ШаблонРЭМД Тогда
		СтрокиЭМД = ЭМД.НайтиСтроки(Новый Структура("УИД_Шаблона", УИДШаблона));
		Если СтрокиЭМД.Количество() > 0 Тогда
			СтрокиРоли = РолиИПодписиЭМД.НайтиСтроки(Новый Структура("УИД_ЭМД", СтрокиЭМД[0].УИД));
			Если СтрокиРоли.Количество() > 0 Тогда
				СтрокиПодписи = ТаблицаПодписей.НайтиСтроки(Новый Структура("УникальныйИдентификатор", СтрокиРоли[0].УИД_ЭЦП));
				Если СтрокиПодписи.Количество() > 0 Тогда
					СтрокаПодписиПоСтрокеШаблона = СтрокиПодписи[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТипЗнч(ТаблицаПодписей) = Тип("ТаблицаЗначений") Тогда
			ТЗ = ТаблицаПодписей;
		Иначе
			ТЗ = ТаблицаПодписей.Выгрузить();
		КонецЕсли;
		
		ТЗ.Сортировать("НомерСтроки Убыв");
		
		ПодписьВрачаДокумента = Неопределено;
		ПоследняяПодпись = Неопределено;
		
		Для Каждого СтрокаПодписи Из ТЗ Цикл
			Если СтрокаПодписи.ПодписанФайлЭМД
				Или (ТребуютсяРолиПоШаблонамПриёма
					И СтрокаПодписи.УИД_ЭМД <> УИД_ЭМД)
			Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПодписи.УстановившийПодпись.Сотрудник = ПриемСсылка.Врач Тогда
				ПодписьВрачаДокумента = СтрокаПодписи;
				Прервать;
			ИначеЕсли ПоследняяПодпись = Неопределено Тогда
				ПоследняяПодпись = СтрокаПодписи;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодписьВрачаДокумента <> Неопределено Тогда
			СтрокаПодписиПоСтрокеШаблона = ПодписьВрачаДокумента;
		ИначеЕсли ПоследняяПодпись <> Неопределено Тогда
			СтрокаПодписиПоСтрокеШаблона = ПоследняяПодпись;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаПодписиПоСтрокеШаблона;
	
КонецФункции

Функция ЭталонныеСтрокиТаблиц(ТекстШаблона) Экспорт
	
	ЭталонныеСтрокиТаблиц = Новый СписокЗначений;
	Таблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона), , "table", "data-bit-dyntable-id");
	Для Каждого Таблица Из Таблицы Цикл
		ИдентификаторТаблицы = Таблица.ПолучитьАтрибут("data-bit-dyntable-id");
		НомерЭталоннойСтроки = НомерЭталоннойСтрокиТаблицыШаблонов(ИдентификаторТаблицы);
		ЭталонныеСтрокиТаблиц.Добавить(Новый Структура("ИдентификаторТаблицы, НомерЭталоннойСтроки", ИдентификаторТаблицы, НомерЭталоннойСтроки));
	КонецЦикла;
	
	Возврат ЭталонныеСтрокиТаблиц;
	
КонецФункции

Функция ПараметрыЭталонныхСтрокТаблиц(ЭталонныеСтрокиТаблиц, ТекстШаблона) Экспорт
	
	ПараметрыЭталонныхСтрокТаблиц = Новый СписокЗначений;
	
	ТегиПараметров = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТегиПараметров();
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона);
	Для Каждого ЭталоннаяСтрока Из ЭталонныеСтрокиТаблиц.ВыгрузитьЗначения() Цикл
		
		ЭлементыТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ЭталоннаяСтрока.ИдентификаторТаблицы, "table", "data-bit-dyntable-id");
		Если ЭлементыТаблицы.Количество() > 0 Тогда
			ДокументHTMLТаблицы = РаботаСDOMКлиентСервер.СоздатьДокументDOM(РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ЭлементыТаблицы[0]));
			ТелоТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTMLТаблицы, ЭталоннаяСтрока.ИдентификаторТаблицы, "table", "data-bit-dyntable-id")[0].ПолучитьТелоТаблицы()[0];
			ВложенныеТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТелоТаблицы, , "table", "data-bit-dyntable-id");
			Для Каждого ВложеннаяТаблица Из ВложенныеТаблицы Цикл
				Попытка
					ВложеннаяТаблица.РодительскийУзел.УдалитьДочерний(ВложеннаяТаблица);
				Исключение КонецПопытки;
			КонецЦикла;
			
			ЭлементЭталоннойСтроки = ТелоТаблицы.ДочерниеУзлы[ЭталоннаяСтрока.НомерЭталоннойСтроки-1];
			
			ЭлементыПараметров = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементЭталоннойСтроки, , ТегиПараметров);
			
			ПараметрыЭталоннойСтроки = Новый Массив;
			
			Для Каждого ЭлементПараметра Из ЭлементыПараметров Цикл
				Параметр = ПолучитьПараметрПоУИД(ЭлементПараметра.ПолучитьАтрибут("id"));
				
				Если ЗначениеЗаполнено(Параметр) Тогда
					ПараметрыЭталоннойСтроки.Добавить(Параметр);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыЭталонныхСтрокТаблиц.Добавить(Новый Структура("ИдентификаторТаблицы, ПараметрыЭталоннойСтроки", ЭталоннаяСтрока.ИдентификаторТаблицы, ПараметрыЭталоннойСтроки));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыЭталонныхСтрокТаблиц;
	
КонецФункции

Функция ПараметрыЭталоннойСтрокиТаблицы(ПараметрыЭталонныхСтрокТаблиц, ИдентификаторТаблицы) Экспорт
	
	Для Каждого ПараметрыЭталоннойСтрокиТаблицы Из ПараметрыЭталонныхСтрокТаблиц.ВыгрузитьЗначения() Цикл
		Если ПараметрыЭталоннойСтрокиТаблицы.ИдентификаторТаблицы = ИдентификаторТаблицы Тогда
			Возврат ПараметрыЭталоннойСтрокиТаблицы.ПараметрыЭталоннойСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьАдресДобавленногоИзображения(ДвоичныеДанныеИзображения, УникальныйИдентификатор) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеИзображения, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтборСтрокиЭМК(Параметр, ИндексШаблона, ТаблицаШаблона = Неопределено, НомерСтрокиТаблицы = 0)
	
	Отбор = Новый Структура("Параметр, ИндексШаблона, НомерСтрокиТаблицы", Параметр, ИндексШаблона, НомерСтрокиТаблицы);
	
	Если ЗначениеЗаполнено(ТаблицаШаблона) Тогда
		Отбор.Вставить("ТаблицаШаблонов", ТаблицаШаблона);
	Иначе
		Отбор.Вставить("ТаблицаШаблонов", Справочники.ТаблицыШаблоновПриема.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти