////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСЭлектроннымиПодписями

Процедура ПроверитьПодписиОбъекта(Форма, ВыделенныеСтроки = Неопределено, ОбработчикЗавершения = Неопределено) Экспорт
	
	ДвоичныеДанные = бит_СертификатыЭЦП.ПолучитьДвоичныеДанныеОбъекта(Форма.Объект.Ссылка);
	СсылкаНаДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Форма.УникальныйИдентификатор);
	
	РаботаСФайламиСлужебныйКлиент.ПроверитьПодписи(Форма, СсылкаНаДвоичныеДанные, ВыделенныеСтроки, ОбработчикЗавершения);
	
КонецПроцедуры

Процедура ПроверитьПодписиОбъектаВФормеРаботыСЭМД(ФормаВладельца, Форма, ВыделенныеСтроки = Неопределено, ОбработчикЗавершения = Неопределено) Экспорт
	
	Если ФормаВладельца <> Неопределено Тогда
		ПроверитьПодписиОбъекта(ФормаВладельца, ВыделенныеСтроки, ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = бит_СертификатыЭЦП.ПолучитьДвоичныеДанныеОбъекта(Форма.МедицинскийДокумент);
	СсылкаНаДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Форма.УникальныйИдентификатор);
	
	РаботаСФайламиСлужебныйКлиент.ПроверитьПодписиПриЗакрытойФормеДокумента(Форма, СсылкаНаДвоичныеДанные, ВыделенныеСтроки, ОбработчикЗавершения);
	
КонецПроцедуры

// Открывает форму просмотра ЭП.
//
Процедура ОткрытьПодпись(ТекущиеДанные, УникальныйИдентификатор) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) И 
		ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаПодписи", ТекущиеДанные.ДатаПодписи);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Объект);
		ПараметрыФормы.Вставить("УстановившийПодпись", ТекущиеДанные.УстановившийПодпись);
		ПараметрыФормы.Вставить("УникальныйИдентификатор", ТекущиеДанные.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("ПодписьПроверена", ЗначениеЗаполнено(ТекущиеДанные.ДатаПроверкиПодписи));
		ПараметрыФормы.Вставить("ПодписьВерна", ТекущиеДанные.ПодписьВерна);
		ПараметрыФормы.Вставить("СертификатДействителен", ТекущиеДанные.СертификатДействителен);
		Попытка
			ОткрытьФорму("РегистрСведений.ЭлектронныеПодписи.ФормаЗаписи", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	#Область КиЗ
	// Удалена обработка файлов
	#КонецОбласти
	
КонецПроцедуры

Процедура Подписать(Данные, ИдентификаторФормы, ОбработчикЗавершения, Заголовки = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		МассивОбъектов = Данные;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Данные);
	КонецЕсли;
	
	НаборДанных = Новый Массив;
	МассивДанныхОбъектов = Новый Массив;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("МассивДанныхОбъектов", МассивДанныхОбъектов);
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		#Область КиЗ
		// Удалена обработка файлов
		#КонецОбласти
		
		МассивДанныхОбъектов.Добавить(Объект);
		
		ТекущиеПараметрыВыполнения = Новый Структура;
		ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
		ТекущиеПараметрыВыполнения.Вставить("ПодписываемыеДанные", Объект);
		
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("Представление", Объект);
		ЭлементДанных.Вставить("Данные",
			Новый ОписаниеОповещения("ПриЗапросеДвоичныхДанныхОбъекта", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		ЭлементДанных.Вставить("Объект",
			Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект, ТекущиеПараметрыВыполнения));
		НаборДанных.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Заголовки)
		Или ТипЗнч(Заголовки) <> Тип("Структура") Тогда
		
		Заголовки = Новый Структура;
	КонецЕсли;
	
	Если Заголовки.Свойство("Операция") Тогда
		Операция = Заголовки.Операция;
	Иначе
		Операция = НСтр("ru = 'Подписание'");
		#Область КиЗ
		//Если ОбщегоНазначения.ЭтоДокумент(Данные) Тогда
		//	Операция = НСтр("ru = 'Подписание документа'");
		//КонецЕсли;
		#КонецОбласти
	КонецЕсли;
	
	Если Заголовки.Свойство("ЗаголовокДанных") Тогда
		ЗаголовокДанных = Заголовки.ЗаголовокДанных;
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Объект'");
		#Область КиЗ
		//Если ОбщегоНазначения.ЭтоДокумент(Данные) Тогда
		//	ЗаголовокДанных = НСтр("ru = 'Документ'");
		//КонецЕсли;
		#КонецОбласти
	КонецЕсли;
	
	Если Заголовки.Свойство("ЗаголовокДанных") Тогда
		ПредставлениеНабора = Заголовки.ЗаголовокДанных;
	Иначе
		ПредставлениеНабора = НСтр("ru = 'Объекты (%1)'");
		// Выводим название документа, так как при подписании документа будут также подписаны его файлы.
		#Область КиЗ
		// Удалено добавление доп. информации по типу объекта
		#КонецОбласти
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("ИдентификаторФормы",  ИдентификаторФормы);
	ОписаниеДанных.Вставить("Операция",            Операция);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеНабора);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеПодписанияОбъектов", ЭтотОбъект, ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьОбъект.
// Вызывается из подсистемы ЭлектроннаяПодпись при запросе данных для подписания.
//
Процедура ПриЗапросеДвоичныхДанныхОбъекта(Параметры, Контекст) Экспорт
	
	#Область КиЗ
	// Удалена обработка файлов	
	Данные = бит_СертификатыЭЦП.ПолучитьДвоичныеДанныеОбъекта(Контекст.ПодписываемыеДанные);
	#КонецОбласти
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура("Данные", Данные));
	
КонецПроцедуры

// Продолжение процедуры ПодписатьОбъект.
// Вызывается из подсистемы ЭлектроннаяПодпись после подписания данных для нестандартного
// способа добавления подписи в объект.
//
Процедура ПриПолученииПодписи(Параметры, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение, Новый Структура);
	
КонецПроцедуры

// Завершение процедуры ПодписатьОбъект.
Процедура ПослеПодписанияОбъектов(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	#Область КиЗ
	ВернутьРезультат(ПараметрыВыполнения.ОбработчикЗавершения, ОписаниеДанных);
	#КонецОбласти
	
КонецПроцедуры

Процедура ПослеПодписанияОбъекта(ОписаниеДанных, ПараметрыВыполнения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
		
	ПодписанныеДанные = Новый Массив;
	Для Каждого Данные Из ОписаниеДанных.НаборДанных Цикл
		Если Не Данные.Свойство("СвойстваПодписи") Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Данные.СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(Данные.СвойстваПодписи) Тогда
			стрСвойстваПодписи = ПолучитьИзВременногоХранилища(Данные.СвойстваПодписи);
			ДополнитьСвойстваПодписи(стрСвойстваПодписи, Данные);
			Данные.СвойстваПодписи = ПоместитьВоВременноеХранилище(стрСвойстваПодписи);
		ИначеЕсли ТипЗнч(Данные.СвойстваПодписи) = Тип("Структура") Тогда
			ДополнитьСвойстваПодписи(Данные.СвойстваПодписи, Данные);
		КонецЕсли;
		
		Элемент = Новый Структура("СвойстваПодписи, УИД_Шаблона, РольПодписи, ТипПодписания, СообщениеРЭМД, УИД_ЭМД");
		ЗаполнитьЗначенияСвойств(Элемент, Данные);
		Элемент.Вставить("ПодписанныйОбъект",	Данные.Представление);
		Элемент.Вставить("ПараметрыВыполнения",	ПараметрыВыполнения);
		
		ПодписанныеДанные.Добавить(Элемент);
	КонецЦикла;
	
	бит_СертификатыЭЦП.ЗанестиИнформациюОПодписях(ПодписанныеДанные, ОписаниеДанных.ИдентификаторФормы);
	
	Если ПараметрыВыполнения.Свойство("Объекты") Тогда
		Объекты = ПараметрыВыполнения.Объекты;
	Иначе
		Объекты = Новый Массив;
		Если ПараметрыВыполнения.Свойство("Объект") Тогда
			Объекты.Добавить(ПараметрыВыполнения.Объект);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Объект Из Объекты Цикл
		ИнформироватьОПодписании(ОписаниеДанных.НаборДанных, Объект);
	КонецЦикла;
	
	УИДыЭЦП = Новый Массив();
	Для Каждого ПД Из ПодписанныеДанные Цикл
		Если ТипЗнч(ПД.СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(Данные.СвойстваПодписи) Тогда
			стрСвойстваПодписи = ПолучитьИзВременногоХранилища(ПД.СвойстваПодписи);
		ИначеЕсли ТипЗнч(ПД.СвойстваПодписи) = Тип("Структура") Тогда
			стрСвойстваПодписи = ПД.СвойстваПодписи;
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрУИДЭЦП = Новый Структура;
		СтрУИДЭЦП.Вставить("ПолученныйУИДЭЦП",	стрСвойстваПодписи.ПолученныйУИДЭЦП);
		СтрУИДЭЦП.Вставить("СвойстваПодписи",	стрСвойстваПодписи);
		СтрУИДЭЦП.Вставить("Пользователь",		стрСвойстваПодписи.УстановившийПодпись);
		СтрУИДЭЦП.Вставить("ДатаПодписи",		стрСвойстваПодписи.ДатаПодписи);
		СтрУИДЭЦП.Вставить("ИдентификаторРоли",	стрСвойстваПодписи.ИдентификаторРоли);
		СтрУИДЭЦП.Вставить("УИД_Шаблона",		ПД.УИД_Шаблона);
		СтрУИДЭЦП.Вставить("РольПодписи",		ПД.РольПодписи);
		СтрУИДЭЦП.Вставить("ТипПодписания",		ПД.ТипПодписания);
		СтрУИДЭЦП.Вставить("СообщениеРЭМД",		ПД.СообщениеРЭМД);
		СтрУИДЭЦП.Вставить("УИД_ЭМД",			ПД.УИД_ЭМД);
		
		УИДыЭЦП.Добавить(СтрУИДЭЦП);
	КонецЦикла;
	ПараметрыВыполнения.Вставить("УИДыЭЦП", УИДыЭЦП);
	
КонецПроцедуры

Процедура ДополнитьСвойстваПодписи(СвойстваПодписи, Данные)
	
	СвойстваПодписи.Вставить("ПолученныйУИДЭЦП",	Неопределено);
	СвойстваПодписи.Вставить("ПодписанФайлЭМД",		Данные.Свойство("ПодписанФайлЭМД") И Данные.ПодписанФайлЭМД);
	СвойстваПодписи.Вставить("ИдентификаторРоли",	Данные.ИдентификаторРоли);
	
КонецПроцедуры

// По окончании подписания нотифицирует.
//
Процедура ИнформироватьОПодписании(ПодписанныеДанные, Объект) Экспорт
	
	Для Каждого Данные Из ПодписанныеДанные Цикл
		#Область КиЗ
		ОповеститьОбИзменении(Данные.Представление);
		#КонецОбласти
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		Объект);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Преобразует 2-уровневое дерево в массив.
//
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

// Устанавливает режим только просмотр у элементов формы для подписанных документов.
//
// Параметры:
//  Форма			 - 	ФормаКлиентскогоПриложения - Форма документа
//  СписокЭлементов	 - 	Массив - Список имен элементов формы
//
Процедура УстановитьДоступностьЭлементов(Форма, СписокЭлементов, ПодписанЭП = Неопределено) Экспорт
	
	ДокументСсылка = Форма.Объект.Ссылка;
	
	Если ПодписанЭП = Неопределено Тогда
		ПодписанЭП = ЭЦП_УМЦ_Сервер.ДокументПодписан(ДокументСсылка);
	КонецЕсли;
	
	Для каждого ИмяЭлемента Из СписокЭлементов Цикл
		ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
		ЭлементФормы.ТолькоПросмотр = ПодписанЭП;
		Если ПодписанЭП Тогда
			ДеактивироватьКнопкиГруппыЭлементов(ЭлементФормы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает Доступность = Ложь кнопок для группы элементов
//
// Параметры:
//  ЭлементФормы - 	ГруппаФормы - Элемент формы
//
Процедура ДеактивироватьКнопкиГруппыЭлементов(ЭлементФормы)
	Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
		ДочерниеЭлементы = ЭлементФормы.ПодчиненныеЭлементы;
		Для каждого ДочЭлемент Из ДочерниеЭлементы Цикл
			ДеактивироватьКнопкиГруппыЭлементов(ДочЭлемент);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
		ЭлементФормы.Доступность = Ложь;
	Иначе
		Попытка
			ЭлементФормы.КоманднаяПанель.Доступность = Ложь;
		Исключение
		КонецПопытки;
		Попытка
			ЭлементФормы.КонтекстноеМеню.Доступность = Ложь;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокиТекстаОшибки = Новый Массив;
	СтрокиТекстаОшибки.Добавить(НСтр("ru='Некоторые подписи не прошли проверку:'"));
	Для Каждого СтрокаПодписи Из ДополнительныеПараметры.КоллекцияПодписей Цикл
		Если ЗначениеЗаполнено(СтрокаПодписи.ОписаниеОшибки) Тогда
			СтрокиТекстаОшибки.Добавить(СтрШаблон(НСтр("ru='""%1"" от %2 по причине ""%3""'"), СтрокаПодписи.КомуВыданСертификат, Строка(СтрокаПодписи.ДатаПодписи), СтрокаПодписи.ОписаниеОшибки));
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиТекстаОшибки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, СтрСоединить(СтрокиТекстаОшибки, Символы.ПС));
	ИначеЕсли ДополнительныеПараметры.ДокументПодписан Тогда
		ПоказатьПредупреждение(, НСтр("ru='Все подписи прошли проверку'"));
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

// Есть ли шифрованные файлы среди выделенных.
//
Функция ЕстьШифрованныеФайлы(ВыделенныеСтроки, ТаблицаПодписей) Экспорт
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			Если ДанныеСтроки.Зашифрован Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет есть ли шифрованные файлы.
//
Функция ЕстьШифрованныеФайлыСредиВсехПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = ПолучитьМассивДанныхПодписей(ТаблицаПодписей);
	Для Каждого Строка Из ДанныеСтрок Цикл
		Если Строка.Зашифрован Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Показывает текст и вызывает обработчик с заданным результатом.
//
Процедура ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Результат) Экспорт
	Если ТипЗнч(ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыОбработчика.Вставить("Результат",             Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьПредупреждение(Обработчик, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры ВернутьРезультатПослеПоказаПредупреждения.
//
Процедура ВернутьРезультатПослеЗакрытияПростогоДиалога(Структура) Экспорт
	ВыполнитьОбработкуОповещения(Структура.ОбработчикРезультата, Структура.Результат);
КонецПроцедуры

// Показывает стандартное предупреждение.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПредставлениеКоманды - Строка - Необязательный. Имя команды, для выполнения которой необходимо расширение.
//
Процедура ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
	ОбработчикРезультата = Неопределено, ПредставлениеКоманды = "") Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Для выполнения команды ""%1"" необходимо
	                                 |установить расширение работы с криптографией.'");
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПредставлениеКоманды);
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, " ""%1""", "");
	КонецЕсли;
	ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСтороннихМодулей

// Возвращает результат подключения расширения работы с файлами.
//
//  Возвращаемое значение:
//   Булево - в тонком клиенте всегда Истина, в браузере Google Chrome
//            всегда ложь.
//
Функция РасширениеРаботыСФайламиПодключено() Экспорт
	Если КлиентПоддерживаетСинхронныеВызовы() Тогда
		Возврат ПодключитьРасширениеРаботыСФайлами();
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция КлиентПоддерживаетСинхронныеВызовы() Экспорт
	
#Если ВебКлиент Или МобильныйКлиент Тогда
	// В Chrome и Firefox синхронные методы не поддерживаются.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияПрограммыМассив = СтрРазделить(СистемнаяИнформация.ИнформацияПрограммыПросмотра, " ", Ложь);
	
	Для Каждого ИнформацияПрограммы Из ИнформацияПрограммыМассив Цикл
		Если СтрНайти(ИнформацияПрограммы, "Chrome") > 0 ИЛИ СтрНайти(ИнформацияПрограммы, "Firefox") > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

// Возвращает результат прямого вызова, когда не было открыто диалогов.
Процедура ВернутьРезультат(Обработчик, Результат) Экспорт
	
	Обработчик = ПодготовитьОбработчикДляПрямогоВызова(Обработчик, Результат);
	Если ТипЗнч(Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Записывает информацию, необходимую для подготовки обработчика асинхронного диалога.
Процедура ЗарегистрироватьОписаниеОбработчика(ПараметрыВыполнения, Модуль, ИмяПроцедуры) Экспорт
	
	ПараметрыВыполнения.Вставить("АсинхронныйДиалог", Новый Структура);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("Модуль",                 Модуль);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("ИмяПроцедуры",           ИмяПроцедуры);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("Открыт",                 Ложь);
	ПараметрыВыполнения.АсинхронныйДиалог.Вставить("РезультатКогдаНеОткрыт", Неопределено);
	
КонецПроцедуры

// Подготовка обработчика асинхронного диалога.
Функция ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура) Экспорт
	
	Если ТипЗнч(ОбработчикИлиСтруктура) = Тип("Структура") Тогда
		// Рекурсивная регистрация всех обработчиков вызывающего кода.
		Если ОбработчикИлиСтруктура.Свойство("ОбработчикРезультата") Тогда
			ОбработчикИлиСтруктура.ОбработчикРезультата = ПодготовитьОбработчикДляДиалога(ОбработчикИлиСтруктура.ОбработчикРезультата);
		КонецЕсли;
		Если ОбработчикИлиСтруктура.Свойство("АсинхронныйДиалог") Тогда
			// Регистрация открытого диалога.
			ОбработчикИлиСтруктура.АсинхронныйДиалог.Открыт = Истина;
			// Формирование обработчика (при этом фиксируется вся структура параметров).
			Обработчик = Новый ОписаниеОповещения(
				ОбработчикИлиСтруктура.АсинхронныйДиалог.ИмяПроцедуры,
				ОбработчикИлиСтруктура.АсинхронныйДиалог.Модуль,
				ОбработчикИлиСтруктура);
		Иначе
			Обработчик = Неопределено;
		КонецЕсли;
	Иначе
		Обработчик = ОбработчикИлиСтруктура;
	КонецЕсли;
	
	Возврат Обработчик;
	
КонецФункции

// Подготовка обработчика прямого вызова без открытия диалога.
Функция ПодготовитьОбработчикДляПрямогоВызова(ОбработчикИлиСтруктура, Результат)
	
	Если ТипЗнч(ОбработчикИлиСтруктура) = Тип("Структура") Тогда
		Если ОбработчикИлиСтруктура.Свойство("АсинхронныйДиалог") Тогда
			ОбработчикИлиСтруктура.АсинхронныйДиалог.РезультатКогдаНеОткрыт = Результат;
		КонецЕсли;
		Возврат Неопределено; // Обработчик не был подготовлен для диалога => Вызывающий код не остановился.
	Иначе
		Возврат ОбработчикИлиСтруктура;
	КонецЕсли;
	
КонецФункции

#КонецОбласти