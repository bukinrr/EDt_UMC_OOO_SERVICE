#Область ПрограммныйИнтерфейс

#Область РегЗадания

// Обновляет справочники лабораторий.
//
// Параметры:
//  ОбновитьБезПроверкиДаты	 - Булево 
// 
// Возвращаемое значение:
//  Булево - Истина, если были изменения в справочниках. 
//
Функция ОбновитьСправочники(ОбновитьБезПроверкиДаты) Экспорт
	
	ПолучитьДопИнформациюИПродуктыНаСервере();
	ОбновитьЦеныПродуктов();
	
	Возврат Истина;
	
КонецФункции

Процедура ЗагрузитьXMLВДерево(п_ИмяФайлаЗагрузки,п_Дерево)
	п_Дерево.Строки.Очистить();
                         
	Файл = Новый Файл(п_ИмяФайлаЗагрузки);
	Если Не Файл.Существует() Тогда
		#Если Клиент Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл "+п_ИмяФайлаЗагрузки+" не найден.");
		#КонецЕсли
		Возврат; 
	КонецЕсли;
	
	л_XMLФайл = Новый ЧтениеXML;
	л_XMLФайл.ОткрытьФайл(п_ИмяФайлаЗагрузки);
	л_УровеньУзла = 0;
	л_Отступ = "";
	л_Путь = "/";
	Пока л_XMLФайл.Прочитать() Цикл
		// Обработка документа XML.
		Если л_XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			л_СтрокаДЗ = п_Дерево.Строки.Добавить();
			л_СтрокаДЗ.ТипЭлемента = "Документ";
			л_СтрокаДЗ.ИмяЭлемента = л_XMLФайл.Имя;
			л_СтрокаДЗ.Значение = "";
			ПрочитатьЭлемент(л_XMLФайл,л_УровеньУзла+1,л_Отступ+"   ",л_Путь+"/"+л_XMLФайл.Имя,л_СтрокаДЗ);
		Конецесли;
	КонецЦикла;
КонецПроцедуры

Процедура ПрочитатьЭлемент(п_XMLФайл,п_УровеньУзла,Знач п_Отступ,Знач п_Путь,п_СтрокаДЗ)
	л_ИмяУзла = п_XMLФайл.Имя;
	л_СтруктураАтрибутов = Новый Структура;
	л_КоличествоАтрибутов = п_XMLФайл.КоличествоАтрибутов();
	Для л_Ном = 0 по л_КоличествоАтрибутов-1 Цикл
		л_ИмяАтрибута = п_XMLФайл.ЛокальноеИмяАтрибута(л_Ном);
		л_ЗначениеАтрибута = п_XMLФайл.ПолучитьАтрибут(л_ИмяАтрибута);
		л_СтруктураАтрибутов.Вставить(л_ИмяАтрибута,л_ЗначениеАтрибута);
		л_СтрокаДЗ = п_СтрокаДЗ.Строки.Добавить();
		л_СтрокаДЗ.ТипЭлемента = "Атрибут";
		л_СтрокаДЗ.ИмяЭлемента = л_ИмяАтрибута;
		л_СтрокаДЗ.Значение = л_ЗначениеАтрибута;
	КонецЦикла;
	
	л_НомЗнач = 0;
	л_МассивЗначений = Новый Массив;
	Пока п_XMLФайл.Прочитать() Цикл
		Если п_XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			л_СтрокаДЗ = п_СтрокаДЗ.Строки.Добавить();
			л_СтрокаДЗ.ТипЭлемента = "Элемент";
			л_СтрокаДЗ.ИмяЭлемента = п_XMLФайл.Имя;
			л_СтрокаДЗ.Значение = "";
			ПрочитатьЭлемент(п_XMLФайл,п_УровеньУзла+1,п_Отступ+"   ",п_Путь+"/"+п_XMLФайл.Имя,л_СтрокаДЗ);
		ИначеЕсли п_XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли п_XMLФайл.ТипУзла = ТипУзлаXML.Текст Тогда
			л_НомЗнач = л_НомЗнач + 1;
			л_МассивЗначений.Добавить(п_XMLФайл.Значение);
			л_СтрокаДЗ = п_СтрокаДЗ.Строки.Добавить();
			л_СтрокаДЗ.ТипЭлемента = "Текст";
			л_СтрокаДЗ.ИмяЭлемента = "";
			л_СтрокаДЗ.Значение = СокрЛП(п_XMLФайл.Значение);
		Иначе
			Сообщить("Тип узла: "+п_XMLФайл.ТипУзла+"   НЕ ОБРАБОТАН",СтатусСообщения.Важное);
		Конецесли;
	КонецЦикла;
КонецПроцедуры

Процедура СозданиеЗаявки(пДерево = Неопределено, ФайлРезультатPDF = Неопределено, ПолноеИмяФайлаPDF = Неопределено)
	
	Посев = Ложь;
	Стр = Неопределено;
		
	Если пДерево <> Неопределено Тогда  
		Стр = пДерево.Строки;
		// Пытаемся найти значение атрибута ExternalRequisitionID.
		// Если такой атрибут отсутствует, тогда ищем значение атрибута RequisitionID.
		Попытка	
			НайденныйИНЗ = Стр.Найти("ExternalRequisitionID","ИмяЭлемента",Истина).Значение;
		Исключение
			НайденныйИНЗ = Стр.Найти("RequisitionID","ИмяЭлемента",Истина).Значение;
		КонецПопытки;
		
		ЗаявкаМикробиология = Стр.Найти("Culture","ИмяЭлемента",Истина);
		Если ЗаявкаМикробиология <> Неопределено Тогда
			Посев = Истина;
		КонецЕсли;
	ИначеЕсли ФайлРезультатPDF <> Неопределено И ПолноеИмяФайлаPDF <> Неопределено Тогда 
		НайденныйИНЗ = ПолучитьИНЗ(ФайлРезультатPDF.Имя);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НайденныйИНЗ) Тогда 
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	invЗаявкаНаИсследованиеСписокИНЗ.Ссылка,
	|	invЗаявкаНаИсследованиеСписокИНЗ.ИНЗ
	|ИЗ
	|	Документ.invЗаявкаНаИсследование.СписокИНЗ КАК invЗаявкаНаИсследованиеСписокИНЗ
	|ГДЕ
	|	invЗаявкаНаИсследованиеСписокИНЗ.Ссылка.Проведен = ИСТИНА
	|	И invЗаявкаНаИсследованиеСписокИНЗ.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И invЗаявкаНаИсследованиеСписокИНЗ.ИНЗ = &Номер";
	
	Запрос.УстановитьПараметр("Номер", СокрЛП(НайденныйИНЗ));
	Результат = Запрос.Выполнить();
	
	// Заявка найдена в Сафир.
	Если Не Результат.Пустой() Тогда
		ИзменениеНайденнойЗаявки(Результат, Стр, Посев, НайденныйИНЗ, ФайлРезультатPDF, ПолноеИмяФайлаPDF);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменениеНайденнойЗаявки(Результат, Стр, Посев, НайденныйИНЗ, ФайлРезультатPDF, ПолноеИмяФайлаPDF)
	
	ЗаписатьДокумент = Ложь;
	
	НайденнаяЗаявка = Результат.Выгрузить()[0].Ссылка;
	НайденнаяСсылка = Документы.invРезультатыИсследования.НайтиПоРеквизиту("ИНЗ",НайденныйИНЗ);
	Если НайденнаяСсылка = Документы.invРезультатыИсследования.ПустаяСсылка() Тогда  
		НовыйРезультат = Документы.invРезультатыИсследования.СоздатьДокумент();
	Иначе
		НовыйРезультат = НайденнаяСсылка.ПолучитьОбъект();	
	КонецЕсли;
	
	Если Не (НайденнаяСсылка <> Документы.invРезультатыИсследования.ПустаяСсылка() И ФайлРезультатPDF <> Неопределено) Тогда 
		НовыйРезультат.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НовыйРезультат.Пациент = НайденнаяЗаявка.Пациент;
	НовыйРезультат.Подразделение = НайденнаяЗаявка.Подразделение;
	НовыйРезультат.ИНЗ = НайденныйИНЗ;
	НовыйРезультат.ДокументОснование = НайденнаяЗаявка;
	
	Если ФайлРезультатPDF <> Неопределено Тогда 
		
		Источник = ФайлРезультатPDF.ПолноеИмя;

		// В документе invРезультатыИсследования только 4 реквизита для хранения результатов.
		Для Индекс = 0 По 3 Цикл
			ИмяРеквизита = ?(Индекс = 0, "Результат", "Результат" + Строка(Индекс));
			РеквизитРезультат = НовыйРезультат[ИмяРеквизита];
			Если Не ЗначениеЗаполнено(РеквизитРезультат) 
				Или (ЗначениеЗаполнено(РеквизитРезультат) И РеквизитРезультат = Источник И РеквизитРезультат <> ПолноеИмяФайлаPDF)
			Тогда 
				НовыйРезультат[ИмяРеквизита] = ПолноеИмяФайлаPDF;
				ЗаписатьДокумент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Стр <> Неопределено Тогда
		
		ЗаписатьДокумент = Истина;
				
		НайденнаяДатаВзятияБМ = Стр.Найти("DrawTime","ИмяЭлемента",Истина);
		Если НайденнаяДатаВзятияБМ <> Неопределено Тогда 
			ДатаВзятияБМ = Дата(НайденнаяДатаВзятияБМ.Значение);
		КонецЕсли;
		ИщемReply = Стр.Найти("Reply","ИмяЭлемента",Истина);
		ТестSample = ИщемReply.Строки;
		Для каждого сСтрока  Из ТестSample Цикл
			Если сСтрока.ИмяЭлемента = "Sample" Тогда
				тСтрока = сСтрока.Строки;
				Для каждого СтрокатСтрока  Из тСтрока Цикл
					Если СтрокатСтрока.ИмяЭлемента = "Analysis" Тогда
						ДанныеТеста = СтрокатСтрока.Строки;
						КодТест = ДанныеТеста.Найти("TestMethodCode","ИмяЭлемента",Истина).Значение;
						НайденныйТестВСправочнике = Справочники.invПроизводственныйТест.НайтиПоРеквизиту("КодТеста",КодТест);
						Если НайденныйТестВСправочнике =  Справочники.invПроизводственныйТест.ПустаяСсылка() Тогда
							 НайденныйТестВСправочникеОбъект = Справочники.invПроизводственныйТест.СоздатьЭлемент();
							 НайденныйТестВСправочникеОбъект.КодТеста = КодТест;
							 НайденныйТестВСправочникеОбъект.Наименование = ДанныеТеста.Найти("AnaName","ИмяЭлемента",Истина).Значение;
							 НайденныйТестВСправочникеОбъект.Записать();
							 НайденныйТестВСправочнике = НайденныйТестВСправочникеОбъект.Ссылка;
						// Создадим и заполним ТЗ : Тест и Результат ...Если изменились результаты, но не изменилось количество тестов.
						КонецЕсли;
						СтрокаТЗ_ТестыИзФайла = НовыйРезультат.Тесты.Добавить();
						СтрокаТЗ_ТестыИзФайла.Тест = НайденныйТестВСправочнике;
						Если ДанныеТеста.Найти("Value","ИмяЭлемента", Истина)<> Неопределено  Тогда
							СтрокаТЗ_ТестыИзФайла.Результат = ДанныеТеста.Найти("Value","ИмяЭлемента", Истина).Значение;
						КонецЕсли;
						// Добавление ReqComment.
						ИщемReqComment = Стр.Найти("ReqComment","ИмяЭлемента",Истина);
						Если ИщемReqComment <> Неопределено Тогда
							ReqCommentСтроки = ИщемReqComment.Строки;
							Для каждого Строка Из ReqCommentСтроки Цикл
								Если Строка.ИмяЭлемента = "Type"  Тогда
									ТипReqComment = Строка.Значение;
								ИначеЕсли Строка.ИмяЭлемента = "Text" тогда
									ТекстReqComment = Строка.Значение;
								КонецЕсли;
							КонецЦикла;
							СтруктураКомментарий = Новый Структура("Тип,Текст",ТипReqComment,ТекстReqComment);
							СтрКом = НовыйРезультат.Комментарии.Добавить();
							СтрКом.Текст = СтруктураКомментарий.Текст;
							Если  СтруктураКомментарий.Тип = "RP" Тогда
								СтрКом.Тип = "Информативный";
							Иначе
								СтрКом.Тип = "Замещающий";
							КонецЕсли;
						КонецЕсли;

						Если СтрокаТЗ_ТестыИзФайла.Результат = "Б/П" тогда
							ТекстКомментария = ДанныеТеста.Найти("Text","ИмяЭлемента", Истина).Значение;
							СтрокаТЗ_ТестыИзФайла.КомментарийКАнализу = ТекстКомментария;
						КонецЕсли;
						// Если Посев, пишем результат из другого поля.
						Если Посев Тогда
							Если ДанныеТеста.Найти("Finding","ИмяЭлемента", Истина)<> Неопределено  Тогда
								СтрокаТЗ_ТестыИзФайла.Результат = ДанныеТеста.Найти("Finding","ИмяЭлемента", Истина).Значение;
							КонецЕсли;
						КонецЕсли;

						Если ДанныеТеста.Найти("Unit","ИмяЭлемента", Истина)<> Неопределено  Тогда
							СтрокаТЗ_ТестыИзФайла.ЕдИзм = ДанныеТеста.Найти("Unit","ИмяЭлемента", Истина).Значение;
						КонецЕсли;
						Если ДанныеТеста.Найти("RefMin","ИмяЭлемента", Истина)<> Неопределено  Тогда
							СтрокаТЗ_ТестыИзФайла.РефМин = ДанныеТеста.Найти("RefMin","ИмяЭлемента", Истина).Значение;
						КонецЕсли;
						Если ДанныеТеста.Найти("RefMax","ИмяЭлемента", Истина)<> Неопределено  Тогда
							СтрокаТЗ_ТестыИзФайла.РефМакс = ДанныеТеста.Найти("RefMax","ИмяЭлемента", Истина).Значение;
						КонецЕсли;
						
						Если ДанныеТеста.Найти("AnaComment","ИмяЭлемента", Истина)<> Неопределено  Тогда
							Коменты = ДанныеТеста.Найти("AnaComment","ИмяЭлемента", Истина).Строки;
							Если Коменты.Найти("Type","ИмяЭлемента", Истина).Значение  = "AK" Тогда
								СтрокаТЗ_ТестыИзФайла.КомментарийКАнализу = Коменты.Найти("Text","ИмяЭлемента", Истина).Значение;
							КонецЕсли;
							
							Если Коменты.Найти("Type","ИмяЭлемента", Истина).Значение  = "AE" Тогда
								СтрокаТЗ_ТестыИзФайла.КомментарийКАнализу = Коменты.Найти("Text","ИмяЭлемента", Истина).Значение;
								СтрокаТЗ_ТестыИзФайла.ТипКомментария = "Замещающий";
							КонецЕсли;
							
						КонецЕсли;

						Если Посев Тогда
								// Найдем ReqComment.
								ИщемReqComment = Стр.Найти("ReqComment","ИмяЭлемента",Истина);
								Если ИщемReqComment <> Неопределено Тогда
									ReqCommentСтроки = ИщемReqComment.Строки;
									Для каждого Строка Из ReqCommentСтроки Цикл
										Если Строка.ИмяЭлемента = "Type"  Тогда
											ТипReqComment = Строка.Значение;
										ИначеЕсли Строка.ИмяЭлемента = "Text" тогда
											ТекстReqComment = Строка.Значение;
										КонецЕсли;
									КонецЦикла;
									СтруктураКомментарий = Новый Структура("Тип,Текст",ТипReqComment,ТекстReqComment);
								КонецЕсли;
								ЗаполнитьТЗРезультатыПосева(ДанныеТеста,НовыйРезультат.Посев);
							КонецЕсли;
						КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		НовыйРезультат.Комментарии.Свернуть("Текст, Тип",);
		
	КонецЕсли;	
	
	Если ЗаписатьДокумент Тогда 
		НовыйРезультат.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденнаяЗаявка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Прием.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Прием КАК Прием
		|ГДЕ
		|	Прием.Основание = &Основание
		|	И НЕ Прием.ПометкаУдаления"
		;
		
		Запрос.УстановитьПараметр("Основание", НайденнаяЗаявка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПриемИнвитроСсылка = ВыборкаДетальныеЗаписи.Ссылка;
				ДобавитьФайл = Истина;
				Если ФайлРезультатPDF <> Неопределено Тогда
				
					ФайлыПриема = РаботаСФайлами.ПолучитьВсеФайлы(ПриемИнвитроСсылка);
					Если ФайлыПриема <> Неопределено Тогда
						Для Каждого ФайлПриема Из ФайлыПриема Цикл
							Если СтрЧислоВхождений(ФайлПриема.Наименование, ФайлРезультатPDF.ИмяБезРасширения) <> 0 Тогда
								ДобавитьФайл = Ложь;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ДобавитьФайл Тогда
						Если ЗначениеЗаполнено(ПолноеИмяФайлаPDF) Тогда
							ВыбФайл = Новый Файл(ПолноеИмяФайлаPDF);
							Если ВыбФайл.Существует() Тогда
								РаботаСФайлами.ДобавитьНовыйФайл(ПриемИнвитроСсылка, ПолноеИмяФайлаPDF);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Стр <> Неопределено Или ДобавитьФайл Тогда
					// Запишем в регистр для автоотправки результатов.
					УстановитьПривилегированныйРежим(Истина);
					Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте") Тогда
						ЗаписьНаАвтоотправку = РегистрыСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.СоздатьМенеджерЗаписи();			
						ЗаписьНаАвтоотправку.Документ 	= ПриемИнвитроСсылка;
						ЗаписьНаАвтоотправку.Период 	= ПриемИнвитроСсылка.Дата;
						ЗаписьНаАвтоотправку.Записать(Истина);
					КонецЕсли;
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
				
			КонецЦикла;		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТЗРезультатыПосева(Строки, ТЗ)
	
	ТекстКомментарияAna = "";
	ТипКомментарияAna = "";
	
	СтрокаДЗКоменты = Строки.Найти("AnaComment", "ИмяЭлемента", Истина);
	Если СтрокаДЗКоменты <> Неопределено Тогда
		Коменты = СтрокаДЗКоменты.Строки;
		СтрокаДЗТекстКомментарияAna = Коменты.Найти("Text", "ИмяЭлемента", Истина);
		Если СтрокаДЗТекстКомментарияAna <> Неопределено Тогда
			ТекстКомментарияAna = СтрокаДЗТекстКомментарияAna.Значение;
		КонецЕсли;
		СтрокаДЗТипКомментарияAna = Коменты.Найти("Type", "ИмяЭлемента", Истина);
		Если СтрокаДЗТипКомментарияAna <> Неопределено Тогда
			ТипКомментарияAna = СтрокаДЗТипКомментарияAna.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.ИмяЭлемента = "Culture" Тогда
			Антибиотики = Строка.Строки;
			СтрокаДЗКультура = Антибиотики.Найти("Finding", "ИмяЭлемента", Истина);
			Если СтрокаДЗКультура <> Неопределено Тогда
				Культура = СтрокаДЗКультура.Значение;
			Иначе
				Культура = "";
			КонецЕсли;
			СтрокаДЗРост = Антибиотики.Найти("Growth", "ИмяЭлемента", Истина);
			Если СтрокаДЗРост <> Неопределено Тогда
				Рост = СтрокаДЗРост.Значение;
			Иначе
				Рост = "";
			КонецЕсли;
			Для Каждого Антибиотик Из Антибиотики Цикл
				Если Антибиотик.ИмяЭлемента = "Resistence" Тогда
					РасшифровкаАнтибиотика = Антибиотик.Строки;
					СтрокаДЗАнтибиотикСтр = РасшифровкаАнтибиотика.Найти("Antibiotics", "ИмяЭлемента", Истина);
					Если СтрокаДЗАнтибиотикСтр <> Неопределено Тогда
						АнтибиотикСтр = СтрокаДЗАнтибиотикСтр.Значение;
					Иначе
						АнтибиотикСтр = "";
					КонецЕсли;
					СтрокаДЗSIR = РасшифровкаАнтибиотика.Найти("SIR", "ИмяЭлемента", Истина);
					Если СтрокаДЗSIR <> Неопределено Тогда
						SIR = СтрокаДЗSIR.Значение;
					Иначе
						SIR = "";
					КонецЕсли;
					строкаТаблицы = ТЗ.Добавить();
					строкаТаблицы.ТекстКомментарияAna = ТекстКомментарияAna;
					строкаТаблицы.ТипКомментарияAna = ТипКомментарияAna;
					строкаТаблицы.Антибиотик =  АнтибиотикСтр;
					строкаТаблицы.Культура = Культура;
					строкаТаблицы.SIR = SIR;
					строкаТаблицы.Рост = Рост;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет удаление записей в справочниках лаборатории.
//
// Параметры:
//  ИсключитьПродукты				 - Булево	 - оставить ли Продукты.
//  ИсключитьРасширеннуюИнформацию	 - Булево	 - оставить ли Расширенную информацию.
//
Процедура ОчиститьСправочникиНаСервере(ИсключитьПродукты = Ложь, ИсключитьРасширеннуюИнформацию = Ложь) Экспорт
	
	Если Не ИсключитьПродукты Тогда
		ОчиститьПродукты();
	КонецЕсли;
	
	Если Не ИсключитьРасширеннуюИнформацию Тогда
		ОчиститьРасширеннуюИнформацию();
	КонецЕсли;
	
	ОчиститьБиоматериал();
	ОчиститьКонтейнеры();
	ОчиститьВыборБМ();
	ОчиститьЛабораторныеПараметры();
	ОчиститьЦеныПродуктов();
	
КонецПроцедуры

Процедура ОчиститьБиоматериал()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Биоматериал.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.invБиоматериал КАК Биоматериал
	|ГДЕ
	|	НЕ Биоматериал.ПометкаУдаления"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьКонтейнеры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контейнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.invКонтейнеры КАК Контейнеры
	|ГДЕ
	|	НЕ Контейнеры.ПометкаУдаления"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПродукты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.invПродукт КАК Продукты
	|ГДЕ
	|	НЕ Продукты.ПометкаУдаления"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВыборБМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыборБМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.invВыборБМ КАК ВыборБМ
	|ГДЕ
	|	НЕ ВыборБМ.ПометкаУдаления"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЛабораторныеПараметры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	invЛабораторныеПараметры.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.invЛабораторныеПараметры КАК invЛабораторныеПараметры
	|ГДЕ
	|	НЕ invЛабораторныеПараметры.ПометкаУдаления
	|	И НЕ invЛабораторныеПараметры.Предопределенный"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьРасширеннуюИнформацию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПараметровЗабора.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗначенияПараметровЗабора КАК ЗначенияПараметровЗабора
	|ГДЕ
	|	НЕ ЗначенияПараметровЗабора.ПометкаУдаления
	|	И ЗначенияПараметровЗабора.Владелец ССЫЛКА ПланВидовХарактеристик.invЛабораторныеПараметры
	|	И ЗначенияПараметровЗабора.Владелец.Предопределенный"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЦеныПродуктов()
	
	НаборЗаписей = РегистрыСведений.invЦеныПродуктов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Получить из invitro справочники доп. информации и продуктов.
//
// Параметры:
//  Подразделение	 - СправочникСсылка.Подразделения - подразделение
//  Индекс			 - Число - счетчик попытки обращения к серверу invitro.
//
Процедура ПолучитьДопИнформациюИПродуктыНаСервере(Подразделение = Неопределено, Индекс = 1) Экспорт
	
	Попытка
		ФайлыXMLОтвета = КаталогВременныхФайлов() + "\res_.xml";
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодразделения.Токен,
		|	НастройкиПодразделения.Сервер
		|ИЗ
		|	РегистрСведений.invНастройкиПодразделения КАК НастройкиПодразделения
		|ГДЕ
		|	НастройкиПодразделения.Токен <> """"";
		Если Подразделение <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + " И Подразделение = &Подразделение";
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		КонецЕсли;
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Host  = ВыборкаДетальныеЗаписи.Сервер;
		Токен = ВыборкаДетальныеЗаписи.Токен;
		
		hdrs = Новый Соответствие();
		hdrs.Вставить("Host", Host); 
		hdrs.Вставить("Content-Type", "text/xml; charset=utf-8");
		hdrs.Вставить("Connection", "Keep-Alive");
		hdrs.Вставить("Accept-Encoding", "gzip,deflate");
		
		conn = Новый HTTPСоединение(Host,42013);
		HTTPЗапрос = Новый HTTPЗапрос("/Innerscape/xml/GetInfo/" + Токен ,hdrs);
		
		// Цикл ожидания перед записью данных в файл.
		Файл = Новый Файл("Z:\1.txt");
		ДатаСравнения = ТекущаяДата() + 5;
		
		Пока ТекущаяДата() < ДатаСравнения Цикл
		    ФайлСуществует = Файл.Существует();
		КонецЦикла;
		
		HTTPОтвет = conn.Получить(HTTPЗапрос,ФайлыXMLОтвета);
		
		// Ответ сервера записывется в ФайлыXMLОтветаИЗапроса.Ответ.
		ЧитаемXML = Новый ЧтениеXML ;
		ЧитаемXML.ОткрытьФайл(ФайлыXMLОтвета);
		
		ФайлDOM = Новый ПостроительDOM;
		ФайлДляИзменения = ФайлDOM.Прочитать(ЧитаемXML);
		Biomaterials = ФайлДляИзменения.ПолучитьЭлементыПоИмени("Biomaterials");
		TestTubes = ФайлДляИзменения.ПолучитьЭлементыПоИмени("TestTubes");
		AuxiliaryInfos = ФайлДляИзменения.ПолучитьЭлементыПоИмени("AuxiliaryInfos");
	Исключение
		Если Индекс < 5 Тогда 
			Индекс = Индекс + 1;
			ПолучитьДопИнформациюИПродуктыНаСервере(Подразделение, Индекс);
		Иначе
			ШаблонСообщения = НСтр("ru='Не удалось получить справочную информацию с сервера по причине:%1%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
	Если Biomaterials.Количество() = 0 Тогда
		ВызватьИсключение("Не удалось получить файлы с сервера, проверьте настройки соединения");
	КонецЕсли;
		
	ОчиститьСправочникиНаСервере(Истина, Истина);
	
	Биоматериалы = Biomaterials[0].ДочерниеУзлы;
	ДобавитьБиоматериалы(Биоматериалы);
	
	Если TestTubes.Количество() <> 0 Тогда  
		Контейнеры = TestTubes[0].ДочерниеУзлы;
		ДобавитьКонтейнеры(Контейнеры);
	КонецЕсли;
	
	Если AuxiliaryInfos.Количество() <> 0 Тогда  
		ДопМедИнформация = AuxiliaryInfos[0].ДочерниеУзлы;
		ДобавитьДопМедИнформацию(ДопМедИнформация);
	КонецЕсли;
	
	ФайлОтвета = Новый Файл(ФайлыXMLОтвета);
	Если ФайлОтвета.Существует() Тогда
	
		Попытка
			УдалитьФайлы(ФайлыXMLОтвета);
		Исключение
		КонецПопытки;	
	
	КонецЕсли;
	
	ПолучитьРасширеннуюИнформациюНаСервере(hdrs,conn,Токен);
	ПолучитьПродуктыНаСервере(hdrs,conn,Токен);
	
	// +бит.
	СопоставитьДляСтарыхГруппНовыеГУИД();
	// -бит.                              
   	
КонецПроцедуры

Процедура ДобавитьБиоматериалы(Биоматериалы)
	
	Для Каждого Биоматериал Из Биоматериалы Цикл
		ДанныеБиоматериала = Биоматериал.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеБиоматериала[0].ТекстовоеСодержимое);
		СсылкаБиоматериал = Справочники.invБиоматериал.ПолучитьСсылку(УИ);
		НаименованиеБиоматериала = СокрЛП(ДанныеБиоматериала[1].ТекстовоеСодержимое);
		Если Не ЗначениеЗаполнено(СсылкаБиоматериал) Тогда
			СсылкаБиоматериал = Справочники.invБиоматериал.НайтиПоНаименованию(НаименованиеБиоматериала, Истина);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СсылкаБиоматериал.Код) Тогда
			ОбъектБиоматериал = Справочники.invБиоматериал.СоздатьЭлемент();
			ОбъектБиоматериал.УстановитьСсылкуНового(СсылкаБиоматериал);
		Иначе
			ОбъектБиоматериал = СсылкаБиоматериал.ПолучитьОбъект();
			Если ОбъектБиоматериал.ПометкаУдаления Тогда 
				ОбъектБиоматериал.ПометкаУдаления = Ложь;	
			КонецЕсли;
		КонецЕсли;
		ОбъектБиоматериал.Наименование = НаименованиеБиоматериала;
		ОбъектБиоматериал.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКонтейнеры(Контейнеры)
	
	Для Каждого Контейнер Из Контейнеры Цикл
		ДанныеКонтейнера = Контейнер.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеКонтейнера[0].ТекстовоеСодержимое);
		СсылкаКонтейнер = Справочники.invКонтейнеры.ПолучитьСсылку(УИ);
		Если Не ЗначениеЗаполнено(СсылкаКонтейнер.Код) Тогда
			ОбъектКонтейнер = Справочники.invКонтейнеры.СоздатьЭлемент();
			ОбъектКонтейнер.УстановитьСсылкуНового(СсылкаКонтейнер);
		Иначе
			ОбъектКонтейнер = СсылкаКонтейнер.ПолучитьОбъект();
			Если ОбъектКонтейнер.ПометкаУдаления Тогда 
				ОбъектКонтейнер.ПометкаУдаления = Ложь;	
			КонецЕсли;
		КонецЕсли;
			
		Для Каждого Узел Из ДанныеКонтейнера Цикл
			Если Узел.ИмяУзла = "Name" Тогда
				ОбъектКонтейнер.Наименование               =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Code" Тогда
				ОбъектКонтейнер.КодКонтейнера              =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Type" Тогда
				ОбъектКонтейнер.ТипКонтейнера              =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "ContainerDescription" Тогда
				ОбъектКонтейнер.Описание                   =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "PrimaryType" Тогда
				ОбъектКонтейнер.ОписаниеТипаКонтейнера     =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "TransportType" Тогда
				ОбъектКонтейнер.ОписаниеКонтейнераДоставки =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Preanalytic" Тогда
				ОбъектКонтейнер.Преаналитика               =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "BiomaterialName" Тогда
				ОбъектКонтейнер.Биоматериал                =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "TransportTemperature" Тогда
				ОбъектКонтейнер.Температура                =  Узел.ТекстовоеСодержимое;
			КонецЕсли;
		КонецЦикла;
		ОбъектКонтейнер.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДопМедИнформацию(ДопМедИнформация)
	
	Для Каждого ДопМедИнф Из ДопМедИнформация Цикл
		ДанныеДопМедИнф = ДопМедИнф.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеДопМедИнф[0].ТекстовоеСодержимое);
		СсылкаДМИ = ПланыВидовХарактеристик.invЛабораторныеПараметры.ПолучитьСсылку(УИ);
		Если Не ЗначениеЗаполнено(СсылкаДМИ.Код) Тогда
			ОбъектДМИ = ПланыВидовХарактеристик.invЛабораторныеПараметры.СоздатьЭлемент();
			ОбъектДМИ.УстановитьСсылкуНового(СсылкаДМИ);
		Иначе
			ОбъектДМИ = СсылкаДМИ.ПолучитьОбъект();
			Если ОбъектДМИ.ПометкаУдаления Тогда 
				ОбъектДМИ.ПометкаУдаления = Ложь;	
			КонецЕсли;
		КонецЕсли;			
		
		ОбъектДМИ.Варианты.Очистить();
		
		Для Каждого Узел Из ДанныеДопМедИнф Цикл
			Если Узел.ИмяУзла = "Name" Тогда
				ОбъектДМИ.Наименование               =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "IsRequired" И Узел.ТекстовоеСодержимое = "true" Тогда
				ОбъектДМИ.Обязательное              = Истина;
			ИначеЕсли Узел.ИмяУзла = "Min" И ЗначениеЗаполнено(Узел.ТекстовоеСодержимое) Тогда
				КЧ = Новый КвалификаторыЧисла(10,0);
				Массив = Новый Массив;
				Массив.Добавить(Тип("Число"));
				ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
				ОбъектДМИ.ТипЗначения              =  ОписаниеТиповЧ;
			ИначеЕсли Узел.ИмяУзла = "Unit" Тогда
				ОбъектДМИ.ЕдиницаИзмерения =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Variants" Тогда
				Варианты = Узел.ДочерниеУзлы;
				ЕстьВариантыВыбора = Ложь;
				Для Каждого Вариант Из Варианты Цикл
					ЕстьВариантыВыбора = Истина;
					стр = ОбъектДМИ.Варианты.Добавить();
					стр.Значение = Вариант.ТекстовоеСодержимое;
				КонецЦикла;
				// +бит.
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияПараметровЗабора.Ссылка КАК Ссылка,
				|	ЗначенияПараметровЗабора.Наименование КАК Наименование
				|ИЗ
				|	Справочник.ЗначенияПараметровЗабора КАК ЗначенияПараметровЗабора
				|ГДЕ
				|	ЗначенияПараметровЗабора.Владелец = &Владелец
				|	И НЕ ЗначенияПараметровЗабора.ПометкаУдаления";
				
				// Можем так сделать, т.к. УИД константен даже при перезаписи.
				Запрос.УстановитьПараметр("Владелец", СсылкаДМИ);
				
				ВыгрузкаЗапроса = Запрос.Выполнить().Выгрузить();
				МсОбработанные = Новый Массив;
				Для Каждого Вариант Из Варианты Цикл
					НайденнаяСтрока = ВыгрузкаЗапроса.Найти(Вариант.ТекстовоеСодержимое,"Наименование");
					Если НайденнаяСтрока = Неопределено Тогда
						НайденнаяСтрока = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
						НайденнаяСтрока.Наименование = Вариант.ТекстовоеСодержимое;
						НайденнаяСтрока.Владелец = СсылкаДМИ;
						НайденнаяСтрока.Записать();
					КонецЕсли;
					МсОбработанные.Добавить(НайденнаяСтрока.Ссылка)
				КонецЦикла;
				// Пометим на удаление неактуальные варианты.
				Для Каждого СтрокаЗначениеПараметра Из ВыгрузкаЗапроса Цикл
					Если МсОбработанные.Найти(СтрокаЗначениеПараметра.Ссылка) = Неопределено Тогда
						СтрокаЗначениеПараметра.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				КонецЦикла;
				Если ЕстьВариантыВыбора Тогда 
					ОбъектДМИ.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
				ИначеЕсли ОбъектДМИ.ТипЗначения <> Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)) Тогда
					ОбъектДМИ.ТипЗначения = Новый ОписаниеТипов("Строка");
				КонецЕсли;
				// -бит.
			КонецЕсли;
		КонецЦикла;
		ОбъектДМИ.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьРасширеннуюИнформациюНаСервере(hdrs, conn, Токен, Индекс = 1)
	
	Попытка	
		ФайлыXMLОтвета = КаталогВременныхФайлов() + "\res_ex.xml";
		HTTPЗапрос = Новый HTTPЗапрос("/Innerscape/xml/GetExtendedInfo/" + Токен ,hdrs);
		
		// Цикл ожидания перед записью данных в файл.
		Файл = Новый Файл("Z:\1.txt");
		ДатаСравнения = ТекущаяДата() + 5;
		
		Пока ТекущаяДата() < ДатаСравнения Цикл
		    ФайлСуществует = Файл.Существует();
		КонецЦикла;
		
		HTTPОтвет = conn.Получить(HTTPЗапрос,ФайлыXMLОтвета);
		
		// Ответ сервера записывется в ФайлыXMLОтветаИЗапроса.Ответ.
		ЧитаемXML = Новый ЧтениеXML ;
		ЧитаемXML.ОткрытьФайл(ФайлыXMLОтвета);
		
		ФайлDOM = Новый ПостроительDOM;
		ФайлДляИзменения = ФайлDOM.Прочитать(ЧитаемXML);
		DocumentTypes = ФайлДляИзменения.ПолучитьЭлементыПоИмени("DocumentTypes");
		AddressTypes = ФайлДляИзменения.ПолучитьЭлементыПоИмени("AddressTypes");
		Countries = ФайлДляИзменения.ПолучитьЭлементыПоИмени("Countries");
		Regions = ФайлДляИзменения.ПолучитьЭлементыПоИмени("Regions");
		Cities = ФайлДляИзменения.ПолучитьЭлементыПоИмени("Cities");
	Исключение
		Если Индекс < 5 Тогда 
			Индекс = Индекс + 1;
			ПолучитьРасширеннуюИнформациюНаСервере(hdrs, conn, Токен, Индекс);
		Иначе
			ШаблонСообщения = НСтр("ru='Не удалось получить справочную информацию с сервера по причине:%1%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
	Если DocumentTypes.Количество() = 0 Тогда
		ВызватьИсключение(НСтр("ru='Не удалось получить файл расширенной информации с сервера, проверьте настройки соединения'"));
	КонецЕсли;
	
	ОчиститьРасширеннуюИнформацию();
	
	ТабДокумент = ПланыВидовХарактеристик.invЛабораторныеПараметры.ПолучитьМакет("СоответствиеНаименованийРасширеннойИнформации");
	СоответствиеНаименований = Новый Соответствие;
	
	Для Индекс = 1 По ТабДокумент.ВысотаТаблицы Цикл
		Область1 = ТабДокумент.Область("R" + Индекс + "C1");
		Область2 = ТабДокумент.Область("R" + Индекс + "C2");
		СоответствиеНаименований.Вставить(Область1.Текст, Область2.Текст);
	КонецЦикла;
	
	ТипыДокументов = DocumentTypes[0].ДочерниеУзлы;
	ДобавитьТипыДокументов(ТипыДокументов, СоответствиеНаименований);
	
	Если AddressTypes.Количество() <> 0 Тогда 
		ТипыАдресов = AddressTypes[0].ДочерниеУзлы;
		ДобавитьТипыАдресов(ТипыАдресов, СоответствиеНаименований);
	КонецЕсли;
	
	Если Countries.Количество() <> 0 Тогда 
		Страны = Countries[0].ДочерниеУзлы;
		ДобавитьСтраны(Страны, СоответствиеНаименований);
	КонецЕсли;
	
	Если Regions.Количество() <> 0 Тогда 
		Регионы = Regions[0].ДочерниеУзлы;
		ДобавитьРегионы(Регионы);
	КонецЕсли;
	
	Если Cities.Количество() <> 0 Тогда 
		Города = Cities[0].ДочерниеУзлы;
		ДобавитьГорода(Города);
	КонецЕсли;
	
	ФайлОтвета = Новый Файл(ФайлыXMLОтвета);
	Если ФайлОтвета.Существует() Тогда
	
		Попытка
			УдалитьФайлы(ФайлыXMLОтвета);
		Исключение
		КонецПопытки;	
	
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьТипыДокументов(Варианты, СоответствиеНаименований)
	
	СсылкаПараметр = ПланыВидовХарактеристик.invЛабораторныеПараметры.ДокументКлиента_ТипДокумента;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка КАК Ссылка,
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка.Наименование КАК Наименование,
	|	ЗначенияПараметровЗабораIDЗначения.ID КАК ID
	|ИЗ
	|	Справочник.ЗначенияПараметровЗабора.IDЗначения КАК ЗначенияПараметровЗабораIDЗначения
	|ГДЕ
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка.Владелец = &Владелец"
	;
	
	Запрос.УстановитьПараметр("Владелец", СсылкаПараметр);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОбъектПараметр = СсылкаПараметр.ПолучитьОбъект();
	
	Если Не ОбъектПараметр.Обязательное Тогда
		ОбъектПараметр.Обязательное = Истина;
	КонецЕсли;
	
	Если ОбъектПараметр.ПометкаУдаления Тогда
		ОбъектПараметр.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
	Если ОбъектПараметр.ТипЗначения <> ТипЗначения Тогда
		ОбъектПараметр.ТипЗначения = ТипЗначения;
	КонецЕсли;
		
	ТабЧастьВарианты = ОбъектПараметр.Варианты;
	ТабЧастьВарианты.Очистить();
	
	Для Каждого Вариант Из Варианты Цикл
		
		ДанныеВарианта = Вариант.ДочерниеУзлы;
		
		Наименование = Неопределено;
		ID = Неопределено;
		
		Для Каждого Узел Из ДанныеВарианта Цикл
			
			Если Узел.ИмяУзла = "Name" Тогда
				Наименование = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Id" Тогда
				ID = Узел.ТекстовоеСодержимое;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Наименование <> Неопределено Тогда
			
			РусскоеНаименование = СоответствиеНаименований.Получить(Наименование);
			Если РусскоеНаименование <> Неопределено Тогда
				Наименование = РусскоеНаименование;
			КонецЕсли;
			
			Если ID <> Неопределено Тогда
				
				НоваяСтрокаВарианты = ТабЧастьВарианты.Добавить();
				НоваяСтрокаВарианты.Значение = Наименование;
					
				НайденнаяСтрока = РезультатЗапроса.Найти(ID, "ID");
				
				Если НайденнаяСтрока = Неопределено Тогда
					ОбъектЗначение = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
					ОбъектЗначение.Владелец = СсылкаПараметр;
					НоваяСтрокаIDЗначения = ОбъектЗначение.IDЗначения.Добавить();
					НоваяСтрокаIDЗначения.ID = ID;
					НоваяСтрокаIDЗначения.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Invitro;
				Иначе
					ОбъектЗначение = НайденнаяСтрока.Ссылка.ПолучитьОбъект();
					Если ОбъектЗначение.ПометкаУдаления Тогда
						ОбъектЗначение.ПометкаУдаления = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектЗначение.Наименование = Наименование;
				ОбъектЗначение.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектПараметр.Записать();
	
КонецПроцедуры

Процедура ДобавитьТипыАдресов(Варианты, СоответствиеНаименований)
	
	СсылкаПараметр = ПланыВидовХарактеристик.invЛабораторныеПараметры.АдресКлиента_ТипАдреса;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка КАК Ссылка,
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка.Наименование КАК Наименование,
	|	ЗначенияПараметровЗабораIDЗначения.ID КАК ID
	|ИЗ
	|	Справочник.ЗначенияПараметровЗабора.IDЗначения КАК ЗначенияПараметровЗабораIDЗначения
	|ГДЕ
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка.Владелец = &Владелец"
	;
	
	Запрос.УстановитьПараметр("Владелец", СсылкаПараметр);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОбъектПараметр = СсылкаПараметр.ПолучитьОбъект();
	
	Если Не ОбъектПараметр.Обязательное Тогда
		ОбъектПараметр.Обязательное = Истина;
	КонецЕсли;
	
	Если ОбъектПараметр.ПометкаУдаления Тогда
		ОбъектПараметр.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
	Если ОбъектПараметр.ТипЗначения <> ТипЗначения Тогда
		ОбъектПараметр.ТипЗначения = ТипЗначения;
	КонецЕсли;
		
	ТабЧастьВарианты = ОбъектПараметр.Варианты;
	ТабЧастьВарианты.Очистить();
	
	Для Каждого Вариант Из Варианты Цикл
		
		ДанныеВарианта = Вариант.ДочерниеУзлы;
		
		Наименование = Неопределено;
		ID = Неопределено;
		
		Для Каждого Узел Из ДанныеВарианта Цикл
			
			Если Узел.ИмяУзла = "Name" Тогда
				Наименование = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Id" Тогда
				ID = Узел.ТекстовоеСодержимое;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Наименование <> Неопределено Тогда
			
			РусскоеНаименование = СоответствиеНаименований.Получить(Наименование);
			Если РусскоеНаименование <> Неопределено Тогда
				Наименование = РусскоеНаименование;
			КонецЕсли;
			
			Если ID <> Неопределено Тогда
				
				НоваяСтрокаВарианты = ТабЧастьВарианты.Добавить();
				НоваяСтрокаВарианты.Значение = Наименование;
					
				НайденнаяСтрока = РезультатЗапроса.Найти(ID, "ID");
				
				Если НайденнаяСтрока = Неопределено Тогда
					ОбъектЗначение = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
					ОбъектЗначение.Владелец = СсылкаПараметр;
					НоваяСтрокаIDЗначения = ОбъектЗначение.IDЗначения.Добавить();
					НоваяСтрокаIDЗначения.ID = ID;
					НоваяСтрокаIDЗначения.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Invitro;
				Иначе
					ОбъектЗначение = НайденнаяСтрока.Ссылка.ПолучитьОбъект(); 
					Если ОбъектЗначение.ПометкаУдаления Тогда
						ОбъектЗначение.ПометкаУдаления = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектЗначение.Наименование = Наименование;
				ОбъектЗначение.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектПараметр.Записать();
	
КонецПроцедуры

Процедура ДобавитьСтраны(Варианты, СоответствиеНаименований)
	
	СсылкаПараметр = ПланыВидовХарактеристик.invЛабораторныеПараметры.АдресКлиента_Страна;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка КАК Ссылка,
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка.Наименование КАК Наименование,
	|	ЗначенияПараметровЗабораIDЗначения.ID КАК ID
	|ИЗ
	|	Справочник.ЗначенияПараметровЗабора.IDЗначения КАК ЗначенияПараметровЗабораIDЗначения
	|ГДЕ
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка.Владелец = &Владелец"
	;
	
	Запрос.УстановитьПараметр("Владелец", СсылкаПараметр);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОбъектПараметр = СсылкаПараметр.ПолучитьОбъект();
	
	Если Не ОбъектПараметр.Обязательное Тогда
		ОбъектПараметр.Обязательное = Истина;
	КонецЕсли;
	
	Если ОбъектПараметр.ПометкаУдаления Тогда
		ОбъектПараметр.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
	Если ОбъектПараметр.ТипЗначения <> ТипЗначения Тогда
		ОбъектПараметр.ТипЗначения = ТипЗначения;
	КонецЕсли;
		
	ТабЧастьВарианты = ОбъектПараметр.Варианты;
	ТабЧастьВарианты.Очистить();
	
	Для Каждого Вариант Из Варианты Цикл
		
		ДанныеВарианта = Вариант.ДочерниеУзлы;
		
		Наименование = Неопределено;
		ID = Неопределено;
		
		Для Каждого Узел Из ДанныеВарианта Цикл
			
			Если Узел.ИмяУзла = "Name" Тогда
				Наименование = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Id" Тогда
				ID = Узел.ТекстовоеСодержимое;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Наименование <> Неопределено Тогда
			
			РусскоеНаименование = СоответствиеНаименований.Получить(Наименование);
			Если РусскоеНаименование <> Неопределено Тогда
				Наименование = РусскоеНаименование;
			КонецЕсли;
			
			Если ID <> Неопределено Тогда
				
				НоваяСтрокаВарианты = ТабЧастьВарианты.Добавить();
				НоваяСтрокаВарианты.Значение = Наименование;
			
				НайденнаяСтрока = РезультатЗапроса.Найти(ID, "ID");
				
				Если НайденнаяСтрока = Неопределено Тогда
					ОбъектЗначение = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
					ОбъектЗначение.Владелец = СсылкаПараметр;
					НоваяСтрокаIDЗначения = ОбъектЗначение.IDЗначения.Добавить();
					НоваяСтрокаIDЗначения.ID = ID;
					НоваяСтрокаIDЗначения.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Invitro;
				Иначе
					ОбъектЗначение = НайденнаяСтрока.Ссылка.ПолучитьОбъект(); 
					Если ОбъектЗначение.ПометкаУдаления Тогда
						ОбъектЗначение.ПометкаУдаления = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектЗначение.Наименование = Наименование;
				ОбъектЗначение.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектПараметр.Записать();
	
КонецПроцедуры

Процедура ДобавитьРегионы(Варианты)
	
	ПВХЛабораторныеПараметры = ПланыВидовХарактеристик.invЛабораторныеПараметры;
	
	СсылкаПараметр = ПВХЛабораторныеПараметры.АдресКлиента_Регион;
	ОбъектПараметр = СсылкаПараметр.ПолучитьОбъект();
	
	Если Не ОбъектПараметр.Обязательное Тогда
		ОбъектПараметр.Обязательное = Истина;
	КонецЕсли;
	
	Если ОбъектПараметр.ПометкаУдаления Тогда
		ОбъектПараметр.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
	Если ОбъектПараметр.ТипЗначения <> ТипЗначения Тогда
		ОбъектПараметр.ТипЗначения = ТипЗначения;
	КонецЕсли;
		
	ТабЧастьВарианты = ОбъектПараметр.Варианты;
	ТабЧастьВарианты.Очистить();
	
	Invitro = Перечисления.ВнешниеЛаборатории.Invitro;
	СсылкаПараметрВладелец = ПВХЛабораторныеПараметры.АдресКлиента_Страна;
	
	Для Каждого Вариант Из Варианты Цикл
		
		ДанныеВарианта = Вариант.ДочерниеУзлы;
		
		Наименование = Неопределено;
		ID = Неопределено;
		СтрокаУИ = Неопределено;
		IDВладелец = Неопределено;
		
		Для Каждого Узел Из ДанныеВарианта Цикл
			
			Если Узел.ИмяУзла = "Name" Тогда
				Наименование = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Id" Тогда
				ID = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "ExtendedId" Тогда
				СтрокаУИ = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Country" Тогда
				IDВладелец = Узел.ТекстовоеСодержимое;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Наименование <> Неопределено Тогда
			
			Если ID <> Неопределено И СтрокаУИ <> Неопределено Тогда
				
				НоваяСтрокаВарианты = ТабЧастьВарианты.Добавить();
				НоваяСтрокаВарианты.Значение = Наименование;
					
				УИ = Новый УникальныйИдентификатор(СтрокаУИ);
				СсылкаЗначение = Справочники.ЗначенияПараметровЗабора.ПолучитьСсылку(УИ);
				
				Если Не ЗначениеЗаполнено(СсылкаЗначение.Код) Тогда
					ОбъектЗначение = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
					ОбъектЗначение.УстановитьСсылкуНового(СсылкаЗначение);
				Иначе
					ОбъектЗначение = СсылкаЗначение.ПолучитьОбъект();
					Если ОбъектЗначение.ПометкаУдаления Тогда
						ОбъектЗначение.ПометкаУдаления = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектЗначение.Наименование = Наименование;
				ОбъектЗначение.Владелец = СсылкаПараметр;
				ТабЧастьIDЗначения = ОбъектЗначение.IDЗначения;
				
				Если ТабЧастьIDЗначения.НайтиСтроки(Новый Структура("ВидЛаборатории, ID", Invitro, ID)).Количество() = 0 Тогда
					НоваяСтрокаIDЗначения = ТабЧастьIDЗначения.Добавить();
					НоваяСтрокаIDЗначения.ID = ID;
					НоваяСтрокаIDЗначения.ВидЛаборатории = Invitro;
				КонецЕсли;
				
				Если IDВладелец <> Неопределено Тогда
					ТабЧастьIDЗначенияВладельцы = ОбъектЗначение.IDЗначенияВладельцы;
					
					Если ТабЧастьIDЗначенияВладельцы.НайтиСтроки(Новый Структура("ВидЛаборатории, ПараметрВладелец, IDВладелец", 
						Invitro, СсылкаПараметрВладелец, IDВладелец)).Количество() = 0
					Тогда
						НоваяСтрокаIDЗначенияВладельцы = ТабЧастьIDЗначенияВладельцы.Добавить();
						НоваяСтрокаIDЗначенияВладельцы.ПараметрВладелец = СсылкаПараметрВладелец;
						НоваяСтрокаIDЗначенияВладельцы.IDВладелец = IDВладелец;
						НоваяСтрокаIDЗначенияВладельцы.ВидЛаборатории = Invitro;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектЗначение.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектПараметр.Записать();
	
КонецПроцедуры

Процедура ДобавитьГорода(Варианты)
	
	ПВХЛабораторныеПараметры = ПланыВидовХарактеристик.invЛабораторныеПараметры;
	
	СсылкаПараметр = ПВХЛабораторныеПараметры.АдресКлиента_Город;
	ОбъектПараметр = СсылкаПараметр.ПолучитьОбъект();
	
	Если Не ОбъектПараметр.Обязательное Тогда
		ОбъектПараметр.Обязательное = Истина;
	КонецЕсли;
	
	Если ОбъектПараметр.ПометкаУдаления Тогда
		ОбъектПараметр.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияПараметровЗабора");
	Если ОбъектПараметр.ТипЗначения <> ТипЗначения Тогда
		ОбъектПараметр.ТипЗначения = ТипЗначения;
	КонецЕсли;
		
	ТабЧастьВарианты = ОбъектПараметр.Варианты;
	ТабЧастьВарианты.Очистить();
	
	Invitro = Перечисления.ВнешниеЛаборатории.Invitro;
	СсылкаПараметрВладелец = ПВХЛабораторныеПараметры.АдресКлиента_Регион;
	
	Для Каждого Вариант Из Варианты Цикл
		
		ДанныеВарианта = Вариант.ДочерниеУзлы;
		
		Наименование = Неопределено;
		ID = Неопределено;
		СтрокаУИ = Неопределено;
		IDВладелец = Неопределено;
		
		Для Каждого Узел Из ДанныеВарианта Цикл
			Если Узел.ИмяУзла = "Name" Тогда
				Наименование = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Id" Тогда
				ID = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "ExtendedId" Тогда
				СтрокаУИ = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "RegionId" Тогда
				IDВладелец = Узел.ТекстовоеСодержимое;
			КонецЕсли;	
		КонецЦикла;
		
		Если Наименование <> Неопределено Тогда
			
			Если ID <> Неопределено И СтрокаУИ <> Неопределено Тогда
				
				НоваяСтрокаВарианты = ТабЧастьВарианты.Добавить();
				НоваяСтрокаВарианты.Значение = Наименование;
					
				УИ = Новый УникальныйИдентификатор(СтрокаУИ);
				СсылкаЗначение = Справочники.ЗначенияПараметровЗабора.ПолучитьСсылку(УИ);
				
				Если Не ЗначениеЗаполнено(СсылкаЗначение.Код) Тогда
					ОбъектЗначение = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
					ОбъектЗначение.УстановитьСсылкуНового(СсылкаЗначение);
				Иначе
					ОбъектЗначение = СсылкаЗначение.ПолучитьОбъект();
					Если ОбъектЗначение.ПометкаУдаления Тогда
						ОбъектЗначение.ПометкаУдаления = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектЗначение.Наименование = Наименование;
				ОбъектЗначение.Владелец = СсылкаПараметр;
				ТабЧастьIDЗначения = ОбъектЗначение.IDЗначения;
				
				Если ТабЧастьIDЗначения.НайтиСтроки(Новый Структура("ВидЛаборатории, ID", Invitro, ID)).Количество() = 0 Тогда
					НоваяСтрокаIDЗначения = ТабЧастьIDЗначения.Добавить();
					НоваяСтрокаIDЗначения.ID = ID;
					НоваяСтрокаIDЗначения.ВидЛаборатории = Invitro;
				КонецЕсли;
				
				Если IDВладелец <> Неопределено Тогда
					ТабЧастьIDЗначенияВладельцы = ОбъектЗначение.IDЗначенияВладельцы;
					
					Если ТабЧастьIDЗначенияВладельцы.НайтиСтроки(Новый Структура("ВидЛаборатории, ПараметрВладелец, IDВладелец", 
						Invitro, СсылкаПараметрВладелец, IDВладелец)).Количество() = 0
					Тогда
						НоваяСтрокаIDЗначенияВладельцы = ТабЧастьIDЗначенияВладельцы.Добавить();
						НоваяСтрокаIDЗначенияВладельцы.ПараметрВладелец = СсылкаПараметрВладелец;
						НоваяСтрокаIDЗначенияВладельцы.IDВладелец = IDВладелец;
						НоваяСтрокаIDЗначенияВладельцы.ВидЛаборатории = Invitro;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектЗначение.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектПараметр.Записать();
	
КонецПроцедуры

Процедура ПолучитьПродуктыНаСервере(hdrs, conn, Токен, Индекс = 1)
		
	Попытка	
		ФайлыXMLОтвета = КаталогВременныхФайлов() + "\res_p.xml";
		HTTPЗапрос = Новый HTTPЗапрос("/Innerscape/xml/GetProducts/" + Токен ,hdrs);
		
		// Цикл ожидания перед записью данных в файл.
		Файл = Новый Файл("Z:\1.txt");
		ДатаСравнения = ТекущаяДата() + 5;
		
		Пока ТекущаяДата() < ДатаСравнения Цикл
		    ФайлСуществует = Файл.Существует();
		КонецЦикла;
		
		HTTPОтвет = conn.Получить(HTTPЗапрос,ФайлыXMLОтвета);
		
		// Ответ сервера записывется в ФайлыXMLОтветаИЗапроса.Ответ.
		ЧитаемXML = Новый ЧтениеXML ;
		ЧитаемXML.ОткрытьФайл(ФайлыXMLОтвета);
		
		ФайлDOM = Новый ПостроительDOM;
		ФайлДляИзменения = ФайлDOM.Прочитать(ЧитаемXML);
		ArrayOfInternalProduct = ФайлДляИзменения.ПолучитьЭлементыПоИмени("InternalProduct");
	Исключение	
		Если Индекс < 5 Тогда 
			Индекс = Индекс + 1;
			ПолучитьПродуктыНаСервере(hdrs, conn, Токен, Индекс);
		Иначе
			ШаблонСообщения = НСтр("ru='Не удалось получить справочную информацию с сервера по причине:%1%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
	ОчиститьПродукты();
	ДобавитьПродукты(ArrayOfInternalProduct);
	
	ФайлОтвета = Новый Файл(ФайлыXMLОтвета);
	Если ФайлОтвета.Существует() Тогда
	
		Попытка
			УдалитьФайлы(ФайлыXMLОтвета);
		Исключение
		КонецПопытки;	
	
	КонецЕсли;
	                              
КонецПроцедуры

Процедура ДобавитьПродукты(МассивПродуктовDOM)
	
	НаборЗаписейЦен = РегистрыСведений.invЦеныПродуктов.СоздатьНаборЗаписей();
	
	Для Каждого ПродуктDOM Из МассивПродуктовDOM Цикл
		ДанныеПродукта = ПродуктDOM.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеПродукта[0].ТекстовоеСодержимое);
		СсылкаПродукт = Справочники.invПродукт.ПолучитьСсылку(УИ);
		Если Не ЗначениеЗаполнено(СсылкаПродукт.Код) Тогда
			ОбъектПродукт = Справочники.invПродукт.СоздатьЭлемент();
			ОбъектПродукт.УстановитьСсылкуНового(СсылкаПродукт);
		Иначе
			ОбъектПродукт = СсылкаПродукт.ПолучитьОбъект();
			Если ОбъектПродукт.ПометкаУдаления Тогда 
				ОбъектПродукт.ПометкаУдаления = Ложь;	
			КонецЕсли;
		КонецЕсли;
		
		ОбъектПродукт.ВыборБМ.Очистить();
		
		Для Каждого Узел Из ДанныеПродукта Цикл
			Если Узел.ИмяУзла = "ShortName" Тогда
				ОбъектПродукт.Наименование               =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Name" Тогда
				ОбъектПродукт.ПолноеНаименование              =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Code" Тогда
				ОбъектПродукт.КодПродукта     =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "Gender"  И Узел.ТекстовоеСодержимое = "1" Тогда
				ОбъектПродукт.Пол = Перечисления.ПолФизическихЛиц.Женский;
			ИначеЕсли Узел.ИмяУзла = "IsOnlyForProfile" И  Узел.ТекстовоеСодержимое = "true" Тогда
				ОбъектПродукт.ТолькоВСоставеПрофиля               =  Истина;
			ИначеЕсли Узел.ИмяУзла = "Type" Тогда
				ОбъектПродукт.ТипПродукта  =  ?(Узел.ТекстовоеСодержимое = "1",Перечисления.invТипПродукта.Тест,Перечисления.invТипПродукта.Профиль);
			ИначеЕсли Узел.ИмяУзла = "Unit" Тогда
				ОбъектПродукт.ЕдиницаИзмерения                =  Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "GroupName" Тогда
				ГруппаПродукта =  НайтиИлиСоздатьГруппуПродуктов(Узел.ТекстовоеСодержимое);
			ИначеЕсли Узел.ИмяУзла = "SubgroupName" Тогда
				ОбъектПродукт.Родитель  =  НайтиИлиСоздатьПодгруппуПродукта(Узел.ТекстовоеСодержимое,ОбъектПродукт.КодПродукта,ГруппаПродукта);
			ИначеЕсли Узел.ИмяУзла = "Preanalytic" Тогда
				ОбъектПродукт.Преаналитика  =  Узел.ТекстовоеСодержимое;	
			ИначеЕсли Узел.ИмяУзла = "TimeLimit" Тогда
				Попытка
					ОбъектПродукт.СрокВыполнения  =  Число(Узел.ТекстовоеСодержимое);
				Исключение
				КонецПопытки;
			ИначеЕсли Узел.ИмяУзла = "BiomaterialOptionSets" И Узел.ДочерниеУзлы.Количество() > 0 Тогда
				ОбъектПродукт.Записать();
				МассивВыбораБМ = СоздатьВыборБМ(Узел,ОбъектПродукт);
				Для Каждого ЭлементМассива Из МассивВыбораБМ Цикл
					стрВыборБМ = ОбъектПродукт.ВыборБМ.Добавить();
					стрВыборБМ.ВариантВыбораБМ = ЭлементМассива;
				КонецЦикла;
				ОбъектПродукт.Записать();
			КонецЕсли;
		КонецЦикла;
		ОбъектПродукт.Записать();
			
		Для Каждого Узел Из ДанныеПродукта Цикл
			Если Узел.ИмяУзла = "Price" Тогда
				ЗаписьЦены = НаборЗаписейЦен.Добавить();
				ЗаписьЦены.Продукт = СсылкаПродукт;
				ЗаписьЦены.Цена = Число(Узел.ТекстовоеСодержимое);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписейЦен.Записать();
	
КонецПроцедуры

Функция НайтиИлиСоздатьГруппуПродуктов(НазваниеГруппы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукт.Ссылка
	|ИЗ
	|	Справочник.invПродукт КАК Продукт
	|ГДЕ
	|	Продукт.ЭтоГруппа = ИСТИНА
	|	И Продукт.Наименование = &Наименование
	|	И Продукт.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", НазваниеГруппы);
	Запрос.УстановитьПараметр("Родитель", Справочники.invПродукт.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Группа = Справочники.invПродукт.СоздатьГруппу();
		Группа.Наименование = НазваниеГруппы;
		Группа.Записать();
		Возврат Группа.Ссылка;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СсылкаГруппаПродуктов = ВыборкаДетальныеЗаписи.Ссылка;
			Если СсылкаГруппаПродуктов.ПометкаУдаления Тогда 
				СсылкаГруппаПродуктов.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь, Ложь);	
			КонецЕсли;
			Возврат СсылкаГруппаПродуктов;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // НайтиИлиСоздатьГруппуПродуктов()

Функция НайтиИлиСоздатьПодгруппуПродукта(НазваниеПодгруппы,КодПродукта,ГруппаПродуктовСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукт.Ссылка
	|ИЗ
	|	Справочник.invПродукт КАК Продукт
	|ГДЕ
	|	Продукт.ЭтоГруппа = ИСТИНА
	|	И Продукт.Наименование = &Наименование
	|	И Продукт.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", НазваниеПодгруппы);
	Запрос.УстановитьПараметр("Родитель", ГруппаПродуктовСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПодгруппаПродукта = Справочники.invПродукт.СоздатьГруппу();
		ПодгруппаПродукта.Родитель = ГруппаПродуктовСсылка;
		ПодгруппаПродукта.Наименование = НазваниеПодгруппы;
		ПодгруппаПродукта.Записать();
		Возврат ПодгруппаПродукта.Ссылка;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СсылкаГруппаПродуктов = ВыборкаДетальныеЗаписи.Ссылка;
			Если СсылкаГруппаПродуктов.ПометкаУдаления Тогда 
				СсылкаГруппаПродуктов.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь, Ложь);	
			КонецЕсли;
			Возврат СсылкаГруппаПродуктов;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // НайтиПодгруппуПродукта()

Функция СоздатьВыборБМ(Узел,ПродуктОбъект)
	
	Массив = Новый Массив;
	ВыборыБМ = Узел.ПолучитьЭлементыПоИмени("BiomaterialOptionSet");
	Для Каждого ВыборБМ Из ВыборыБМ Цикл
		ДанныеВыборБМ = ВыборБМ.ДочерниеУзлы;
		Для Каждого Узел Из ДанныеВыборБМ Цикл
			Если Узел.ИмяУзла = "Id" Тогда
				ВнутреннийКод = Узел.ТекстовоеСодержимое;
				СсылкаВыборБМ = Справочники.invВыборБМ.НайтиПоРеквизиту("ВнутреннийКод", ВнутреннийКод);
				Если Не ЗначениеЗаполнено(СсылкаВыборБМ) Тогда 
					ОбъектВыборБМ               = Справочники.invВыборБМ.СоздатьЭлемент();
					ОбъектВыборБМ.ВнутреннийКод = ВнутреннийКод;
				Иначе
					ОбъектВыборБМ = СсылкаВыборБМ.ПолучитьОбъект();   
					Если ОбъектВыборБМ.ПометкаУдаления Тогда 
						ОбъектВыборБМ.ПометкаУдаления = Ложь;	
					КонецЕсли;
				КонецЕсли;
				ОбъектВыборБМ.Наименование  = ПродуктОбъект.КодПродукта + "_" + Лев(ВнутреннийКод,10);
				ОбъектВыборБМ.Владелец      = ПродуктОбъект.Ссылка;
				
				ОбъектВыборБМ.Продукты.Очистить();
				ОбъектВыборБМ.Биоматериалы.Очистить();
				
			ИначеЕсли Узел.ИмяУзла = "ProductIds"  Тогда
				ПродуктыТекущегоВыбора = Узел.ДочерниеУзлы;
				Для Каждого ПродуктТекущегоВыбора Из ПродуктыТекущегоВыбора Цикл
					Если ПродуктТекущегоВыбора.ИмяУзла = "ProductId" И ЗначениеЗаполнено(ПродуктТекущегоВыбора.ТекстовоеСодержимое) Тогда
						УИ = Новый УникальныйИдентификатор(ПродуктТекущегоВыбора.ТекстовоеСодержимое);
						НайденныйПродуктСсылка = Справочники.invПродукт.ПолучитьСсылку(УИ);
						Если ЗначениеЗаполнено(НайденныйПродуктСсылка.Код) Тогда	
							стр = ОбъектВыборБМ.Продукты.Добавить();
							стр.Продукт = НайденныйПродуктСсылка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Узел.ИмяУзла = "BiomaterialOptions" Тогда
				БиоматериалСсылка = Справочники.invБиоматериал.ПустаяСсылка();
				ВариантыТекущегоВыбора = Узел.ДочерниеУзлы;
				Для Каждого ВариантТекущегоВыбора Из ВариантыТекущегоВыбора Цикл
					ВариантыТ = ВариантТекущегоВыбора.ДочерниеУзлы;
					Для Каждого ВариантТ Из ВариантыТ Цикл
						Если ВариантТ.ИмяУзла = "BiomaterialId" И ЗначениеЗаполнено(ВариантТ.ТекстовоеСодержимое) Тогда
							УИ = Новый УникальныйИдентификатор(ВариантТ.ТекстовоеСодержимое);
							БиоматериалСсылка = Справочники.invБиоматериал.ПолучитьСсылку(УИ);
							Если ЗначениеЗаполнено(БиоматериалСсылка.Код) Тогда	
							КонецЕсли;
						ИначеЕсли ВариантТ.ИмяУзла = "AuxiliaryInfoIds" Тогда
							списокДИ = ВариантТ.ДочерниеУзлы;
							Если списокДИ.количество() = 0 Тогда
								стр = ОбъектВыборБМ.Биоматериалы.Добавить();
								стр.Биоматериал = БиоматериалСсылка;
								Продолжить;
							КонецЕсли;
							Для Каждого ДИ Из списокДИ Цикл
								Если ДИ.ИмяУзла = "AuxiliaryInfoId" И ЗначениеЗаполнено(ДИ.ТекстовоеСодержимое) Тогда
									УИ = Новый УникальныйИдентификатор(ДИ.ТекстовоеСодержимое);
									ДИСсылка = ПланыВидовХарактеристик.invЛабораторныеПараметры.ПолучитьСсылку(УИ);
									Если ЗначениеЗаполнено(ДИСсылка.Код) Тогда
										стр = ОбъектВыборБМ.Биоматериалы.Добавить();
										стр.ДопМедИнформация = ДИСсылка;
										стр.Биоматериал = БиоматериалСсылка;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ОбъектВыборБМ.Записать();
		Массив.Добавить(ОбъектВыборБМ.Ссылка);
	КонецЦикла;
	Возврат Массив;
	
КонецФункции
	
Функция ПолучитьДанныеНоменклатурыАнализов() Экспорт
	
	// Описание структур данных.
	
	Результат = Новый Структура("ДеревоНоменклатуры, Устаревшие");
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	ДеревоНоменклатуры.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоНоменклатуры.Колонки.Добавить("Продукт", Новый ОписаниеТипов("СправочникСсылка.invПродукт"));
	ДеревоНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоНоменклатуры.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ДеревоНоменклатуры.Колонки.Добавить("КодПродукта", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
	ДеревоНоменклатуры.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	invПродукт.Ссылка КАК Продукт,
	|	invПродукт.КодПродукта КАК КодПродукта,
	|	invПродукт.ЭтоГруппа КАК ЭтоГруппа,
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура КАК Номенклатура,
	|	invПродукт.Родитель КАК Родитель,
	|	ЛОЖЬ КАК Пометка,
	|	invЦеныПродуктов.Цена КАК Цена
	|ПОМЕСТИТЬ ИзРегистра
	|ИЗ
	|	Справочник.invПродукт КАК invПродукт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|		ПО (InvСопоставлениеПродуктовИНоменклатуры.Продукт = invПродукт.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.invЦеныПродуктов КАК invЦеныПродуктов
	|		ПО (invЦеныПродуктов.Продукт = invПродукт.Ссылка)
	|ГДЕ
	|	НЕ invПродукт.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзРегистра.Продукт КАК Продукт,
	|	ИзРегистра.КодПродукта КАК КодПродукта,
	|	ИзРегистра.ЭтоГруппа КАК ЭтоГруппа,
	|	ИзРегистра.Родитель КАК Родитель,
	|	ИСТИНА КАК Пометка,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ИзРегистра.Цена КАК Цена
	|ИЗ
	|	ИзРегистра КАК ИзРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ИзРегистра.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ИзРегистра.Номенклатура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзРегистра.Продукт,
	|	ИзРегистра.КодПродукта,
	|	ИзРегистра.ЭтоГруппа,
	|	ИзРегистра.Родитель,
	|	ИзРегистра.Пометка,
	|	ИзРегистра.Номенклатура,
	|	ИзРегистра.Цена
	|ИЗ
	|	ИзРегистра КАК ИзРегистра
	|ГДЕ
	|	НЕ ИзРегистра.Номенклатура ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продукт ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ УстаревшиеПродукты
	|ИЗ
	|	РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.invПродукт КАК invПродукт
	|		ПО InvСопоставлениеПродуктовИНоменклатуры.Продукт = invПродукт.Ссылка
	|ГДЕ
	|	(invПродукт.Ссылка ЕСТЬ NULL
	|			ИЛИ invПродукт.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстаревшиеПродукты.Номенклатура КАК Номенклатура,
	|	ИСТИНА КАК пометка
	|ИЗ
	|	УстаревшиеПродукты КАК УстаревшиеПродукты
	|ГДЕ
	|	НЕ УстаревшиеПродукты.Номенклатура.ЭтоГруппа
	|	И НЕ УстаревшиеПродукты.Номенклатура.ПометкаУдаления";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	КоллекцияСтрок = ПакетЗапросов[1].Выгрузить();
	
	Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Родитель) Тогда
			СтрокаГруппы = ДеревоНоменклатуры.Строки.Найти(СтрокаДанных.Родитель, "Продукт",Истина);
			Если СтрокаГруппы = Неопределено Тогда
				СтрокаГруппы = ДеревоНоменклатуры.Строки.Добавить();
				СтрокаГруппы.ЭтоГруппа = Истина;
				СтрокаГруппы.Продукт = СтрокаДанных.Родитель;
			КонецЕсли;
		Иначе
			СтрокаГруппы = ДеревоНоменклатуры.Строки;
		КонецЕсли;
		
		Попытка
			СтрокаНоменклатуры = СтрокаГруппы.Строки.Найти(СтрокаДанных.Продукт,"Продукт", Истина);
		Исключение
			СтрокаНоменклатуры = Неопределено;	
		КонецПопытки;
		Если СтрокаНоменклатуры = Неопределено Тогда
			Попытка
				СтрокаНоменклатуры = СтрокаГруппы.Строки.Добавить();
			Исключение
				СтрокаНоменклатуры = СтрокаГруппы.Добавить();
			КонецПопытки; 
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, СтрокаДанных);
	
	КонецЦикла;
	
	Результат.ДеревоНоменклатуры = ДеревоНоменклатуры;
	Результат.Устаревшие =  ПакетЗапросов[3].Выгрузить();	

	Возврат Результат;
	
КонецФункции

Функция ПометитьНаУдалениеУстаревшуюНоменклатура(МсНоменклатура, Лаборатория) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	InvСопоставлениеПродуктовИНоменклатуры.Продукт КАК Продукт,
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|ГДЕ
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура.Ссылка В(&МсНоменклатура)";
	
	Запрос.УстановитьПараметр("МсНоменклатура", МсНоменклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	РегистрСопоставлениеЗапись = РегистрыСведений.InvСопоставлениеПродуктовИНоменклатуры.СоздатьМенеджерЗаписи();
	РегистрНоменклатураАнализовЗапись = РегистрыСведений.НоменклатураАнализов.СоздатьМенеджерЗаписи();
	МсНеудаленные = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		РегистрСопоставлениеЗапись.Продукт = ВыборкаДетальныеЗаписи.Продукт;
		РегистрСопоставлениеЗапись.Прочитать();
		РегистрСопоставлениеЗапись.Удалить();
		
		РегистрНоменклатураАнализовЗапись.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		РегистрНоменклатураАнализовЗапись.Лаборатория = Лаборатория;
		РегистрНоменклатураАнализовЗапись.Прочитать();
		РегистрНоменклатураАнализовЗапись.Удалить();
		
		Попытка
			ВыборкаДетальныеЗаписи.Номенклатура.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Исключение
			МсНеудаленные.Добавить(ВыборкаДетальныеЗаписи.Номенклатура);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат МсНеудаленные;
	
КонецФункции

// Функция - Получить группу номенклатуры анализа
//
// Параметры:
//  РодительПродукт										 - СправочникСсылка.invПродукт	 - Родитель-продукт для искомого продукта  
//  РодительНоменклатура								 - СправочникСсылка.Номенклатура - Родитель-номенклатура для искомого продукта при его наличии
//  Продукт												 - СправочникСсылка.invПродукт	 - Продукт, для которого ищется родитель-номенклатура 
//  ОбновлятьРеквизитыНоменклатурыПриПовторнойЗагрузке	 - Булево	 -  Указывает, перезаписывать ли реквизиты (такие, как родитель)
// 
// Возвращаемое значение:
// СправочникСсылка.Номенклатура - Родитель-номенклатура для искомого продукта 
//
Функция ПолучитьГруппуНоменклатурыАнализа(РодительПродукт, РодительНоменклатура, Продукт, ИзменятьГруппуНоменклатурыПриПовторнойЗагрузке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РодительПродукт <> Неопределено Тогда   // Не верхняя папка
		ЗаписьСоответствия = РегистрыСведений.InvСопоставлениеПродуктовИНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаписьСоответствия.Продукт = РодительПродукт.Продукт;
		ЗаписьСоответствия.Прочитать();
		
		Если ЗаписьСоответствия.Выбран() Тогда   // Если запись есть, тогда обновим родителя 
			Если ИзменятьГруппуНоменклатурыПриПовторнойЗагрузке И ЗначениеЗаполнено(ЗаписьСоответствия.Номенклатура) И РодительНоменклатура <> ЗаписьСоответствия.Номенклатура Тогда
				Группа = ЗаписьСоответствия.Номенклатура.ПолучитьОбъект();
				Группа.Родитель = РодительНоменклатура;
				Группа.Наименование = РодительПродукт.Продукт;
				Группа.Записать();
			КонецЕсли;
			Возврат ЗаписьСоответствия.Номенклатура;
		Иначе
			ЗаписьСоответствия.Номенклатура = РодительНоменклатура;
			ЗаписьСоответствия.Продукт = РодительПродукт.Продукт;
			ЗаписьСоответствия.Записать(Истина);
			Возврат РодительНоменклатура;
		КонецЕсли;
	Иначе
		Возврат РодительНоменклатура;
	КонецЕсли;		
	УстановитьПривилегированныйРежим(Ложь);

КонецФункции

Процедура ЗаписатьСоответствиеНоменклатурыАнализа(Номенклатура, Продукт) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьСоответствия = РегистрыСведений.InvСопоставлениеПродуктовИНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаписьСоответствия.Продукт = Продукт;
	ЗаписьСоответствия.Номенклатура = Номенклатура;
	ЗаписьСоответствия.Записать(Истина);
		
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Устанавливает признак обязательности заполнения выбранных предопределенных параметров забора
// и записывает в константу коды продуктов COVID-19 по умолчанию.
//
Процедура УстановитьОбязательностьПредопределенныхПараметровЗабораИЗаписатьВКонстантуКодыПродуктовCOVID19() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПВХЛабораторныеПараметры = ПланыВидовХарактеристик.invЛабораторныеПараметры;
	
	ПараметрыCovidOrder = Новый Массив;
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_ТипДокумента);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_Номер);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_КемВыдан);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_ДатаВыдачи);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_ТипАдреса);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_СубъектФактическогоПроживания);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Индекс);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Страна);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Регион);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Город);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Улица);
	ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Дом);
	
	Для Каждого Параметр Из ПараметрыCovidOrder Цикл
		ПараметрОбъект = Параметр.ПолучитьОбъект();
		ПараметрОбъект.Обязательное = Истина;
		ПараметрОбъект.Записать();		
	КонецЦикла;
	
	МассивКодыПродуктовCOVID19 = ПолучитьКодыПродуктовCOVID19ПоУмолчанию();
	ЗаписатьКодыПродуктовCOVID19ВКонстанту(МассивКодыПродуктовCOVID19);
	
КонецПроцедуры

// Возвращает массив кодов продуктов COVID-19, полученных из константы.
// 
// Возвращаемое значение:
//   - Массив Из Строка
//
Функция ПолучитьКодыПродуктовCOVID19ИзКонстанты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКоды = Константы.invКодыПродуктовCOVID19.Получить();
	МассивКоды = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКоды, ";", Истина, Истина);
	
	Если МассивКоды.Количество() < 2 Тогда
		МассивКоды = ПолучитьКодыПродуктовCOVID19ПоУмолчанию();
	КонецЕсли;
	
	Возврат МассивКоды;
	
КонецФункции

// Записывает коды продуктов COVID-19 в константу.
//
// Параметры:
//  МассивКоды	 - Массив из Строка	 - массив кодов.
//
Процедура ЗаписатьКодыПродуктовCOVID19ВКонстанту(МассивКоды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКоды = СтрСоединить(МассивКоды, ";");
	Константы.invКодыПродуктовCOVID19.Установить(СтрокаКоды);
	
КонецПроцедуры

// Возвращает массив кодов продуктов COVID-19 по умолчанию.
// 
// Возвращаемое значение:
//   - Массив Из Строка
//
Функция ПолучитьКодыПродуктовCOVID19ПоУмолчанию() Экспорт
	
	МассивКоды = Новый Массив;
	
	// Коды из тестового аккаунта 1БИТ-ЧЛБ.
	МассивКоды.Добавить("1641");
	МассивКоды.Добавить("1637");
	МассивКоды.Добавить("1641/37");
	МассивКоды.Добавить("3329");
	МассивКоды.Добавить("3330");
	МассивКоды.Добавить("1652");
	МассивКоды.Добавить("1657");
	МассивКоды.Добавить("1639");
	МассивКоды.Добавить("1658");
	МассивКоды.Добавить("1641/58");
	МассивКоды.Добавить("1659");
	МассивКоды.Добавить("1641/59");
	
	// Коды, полученные от сотрудников Инвитро.
	МассивКоды.Добавить("3444COV");
	МассивКоды.Добавить("3444СМ");
	МассивКоды.Добавить("3337COV");
	МассивКоды.Добавить("3336COV");
	МассивКоды.Добавить("3335COV");
	МассивКоды.Добавить("3334COV");
	МассивКоды.Добавить("3334CM");
	МассивКоды.Добавить("3333COV");
	МассивКоды.Добавить("3333СМ");
	МассивКоды.Добавить("3332COV");
	МассивКоды.Добавить("3332СМ");
	МассивКоды.Добавить("3331ECOV");
	МассивКоды.Добавить("3330COV");
	МассивКоды.Добавить("3330СМЧЛБ");
	МассивКоды.Добавить("3330СМ");
	МассивКоды.Добавить("3329USC");
	МассивКоды.Добавить("3329COV");
	МассивКоды.Добавить("3329CITO");
	МассивКоды.Добавить("3328COV");
	МассивКоды.Добавить("3326COV");
	МассивКоды.Добавить("3326СМ");
	МассивКоды.Добавить("3326РНД");
	МассивКоды.Добавить("3325COV");
	МассивКоды.Добавить("3323COV");
	МассивКоды.Добавить("3322COV");
	МассивКоды.Добавить("3320D-COV");
	МассивКоды.Добавить("3320COV");
	МассивКоды.Добавить("3320CITO");
	МассивКоды.Добавить("3320СМТ");
	МассивКоды.Добавить("3320СМСМР");
	МассивКоды.Добавить("3320СМПЦР");
	МассивКоды.Добавить("3320СМ");
	МассивКоды.Добавить("3222COV");
	МассивКоды.Добавить("3003COVБА");
	МассивКоды.Добавить("1656SARS");
	МассивКоды.Добавить("1655SARSG");
	МассивКоды.Добавить("1654SARSG");
	МассивКоды.Добавить("1652COVG");
	МассивКоды.Добавить("1642COVG");
	МассивКоды.Добавить("16422COVG");
	МассивКоды.Добавить("1641COVM");
	МассивКоды.Добавить("16411COVM");
	МассивКоды.Добавить("1638COVM");
	МассивКоды.Добавить("1637COVG");
	МассивКоды.Добавить("1658SARSG");
	МассивКоды.Добавить("1659SARS");
	МассивКоды.Добавить("1639EVC-G");
	МассивКоды.Добавить("COV3320-2");
	МассивКоды.Добавить("COV3320-1");
	МассивКоды.Добавить("COV-CH");
	МассивКоды.Добавить("COV3328-1");
	МассивКоды.Добавить("COV3320-3");
	МассивКоды.Добавить("COV3322-1");

	Возврат МассивКоды;
	
КонецФункции

#КонецОбласти

#Область КешНСИ // Функции формирования кеша НСИ для лабораторий INVITRO.

// Вызывается при заполнении кеша НСИ всех подключенных лабораторий.
//
Процедура ЗаполнитьКэшНСИЛаборатории() Экспорт
	
	// Проверяем на использование интеграции с Invitro.
	Попытка
		Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Invitro_ИспользуетсяИнтеграцияСInvitro Тогда
			Возврат;	
		КонецЕсли; 
	Исключение
		Возврат;
	КонецПопытки;
	
	КэшНСИЛаборатории = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Лаборатории.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЛабораторииInvitro
	|ИЗ
	|	Справочник.Лаборатории КАК Лаборатории
	|ГДЕ
	|	НЕ Лаборатории.ПометкаУдаления
	|	И Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Invitro)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Номенклатура.Представление КАК ПредставлениеНоменклатуры,
	|	НоменклатураАнализов.Номенклатура.Комментарий КАК НоменклатураКомментарий,
	|	НоменклатураАнализов.Номенклатура.Родитель КАК Группа,
	|	НоменклатураАнализов.ID КАК ИД
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория В
	|			(ВЫБРАТЬ
	|				ЛабораторииInvitro.Ссылка
	|			ИЗ
	|				ЛабораторииInvitro)
	|	И НЕ НоменклатураАнализов.Номенклатура.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИД,
	|	ПредставлениеНоменклатуры";
	
	НоменклатураАнализов = Запрос.Выполнить().Выгрузить();
	КэшНСИЛаборатории.Вставить("НоменклатураАнализов", ОбщегоНазначения.ТаблицаЗначенийВМассив(НоменклатураАнализов));
	КэшНСИЛаборатории.Вставить("ПравилаАнализов", ЗаполнитьКешНСИ_ПравилаАнализов(НоменклатураАнализов.ВыгрузитьКолонку("ИД")));
	КэшНСИЛаборатории.Вставить("ИерархияПараметровЗабораИЗначений", ЗаполнитьКешНСИ_ИерархияПараметровЗабораИЗначений());

	// Получаем существующий кэш, либо создаем пустой.
	КэшНСИЛабораторий = ПараметрыСеанса.КешНСИЛабораторий.Получить();
	Если ТипЗнч(КэшНСИЛабораторий) <> Тип("Структура") Тогда
		КэшНСИЛабораторий = Новый Структура;
	КонецЕсли;
	
	// К существующему кэшу добавляем кэш helix.
	КэшНСИЛабораторий.Вставить("Invitro", КэшНСИЛаборатории);
	// Сохраняем старый кэш + кэш Invitro в параметры сеанса.
	ПараметрыСеанса.КешНСИЛабораторий = Новый ХранилищеЗначения(КэшНСИЛабораторий);

КонецПроцедуры

Функция ЗаполнитьКешНСИ_ПравилаАнализов(мсИдАнализов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	invПродукт.Ссылка КАК Ссылка,
	|	invПродукт.КодПродукта КАК КодПродукта
	|ПОМЕСТИТЬ ПродуктыСпр
	|ИЗ
	|	Справочник.invПродукт КАК invПродукт
	|ГДЕ
	|	invПродукт.КодПродукта В(&МсИдАнализов)
	|	И НЕ invПродукт.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	invВыборБМ.Ссылка КАК Ссылка,
	|	invВыборБМ.ВнутреннийКод КАК ВнутреннийКод,
	|	ПродуктыСпр.Ссылка КАК ПродуктСсылка,
	|	ПродуктыСпр.КодПродукта КАК КодПродукта
	|ПОМЕСТИТЬ ВыборБМ
	|ИЗ
	|	Справочник.invВыборБМ КАК invВыборБМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПродуктыСпр КАК ПродуктыСпр
	|		ПО invВыборБМ.Владелец = ПродуктыСпр.Ссылка
	|			И (НЕ invВыборБМ.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборБМ.КодПродукта КАК КодПродукта,
	|	ВыборБМ.ВнутреннийКод КАК ВнутреннийКодВыбораБМ,
	|	ВыборБМ.ПродуктСсылка КАК ПродуктСсылка,
	|	invВыборБМБиоматериалы.Биоматериал КАК Биоматериал,
	|	invВыборБМБиоматериалы.ДопМедИнформация КАК ДопМедИнформация,
	|	ВыборБМ.Ссылка КАК Ссылка
	|ИЗ
	|	ВыборБМ КАК ВыборБМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.invВыборБМ.Биоматериалы КАК invВыборБМБиоматериалы
	|		ПО ВыборБМ.Ссылка = invВыборБМБиоматериалы.Ссылка
	|			И (НЕ invВыборБМБиоматериалы.Биоматериал.ПометкаУдаления)
	|ИТОГИ ПО
	|	КодПродукта,
	|	ВнутреннийКодВыбораБМ"
	;
	
	Запрос.УстановитьПараметр("МсИдАнализов", МсИдАнализов);
	
	РезультатЗапроса = Запрос.Выполнить();
			
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МсБМ          = Новый Массив;
	МсДМИ         = Новый Массив;
	МсВозврата = Новый Массив;
	
	СоответствиеПродукт = Новый Соответствие;
	Пока ВыборкаСсылка.Следующий() Цикл             		// Обходим продукт
		ВыборкаВариантБМ = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МсВыборБМ = Новый Массив;
		Пока ВыборкаВариантБМ.Следующий() Цикл        		// Обходим вариант выбора БМ
			МсБМ.Очистить();
			МсДМИ.Очистить();
			ВыборкаДетальныеЗаписи = ВыборкаВариантБМ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    // Обходим детальные записи
				МсБМ.Добавить(ВыборкаДетальныеЗаписи.Биоматериал);
				Если ВыборкаДетальныеЗаписи.ДопМедИнформация <> ПланыВидовХарактеристик.invЛабораторныеПараметры.ПустаяСсылка() Тогда
					мсДМИ.Добавить(ВыборкаДетальныеЗаписи.ДопМедИнформация);
				КонецЕсли;
			КонецЦикла;
			МсБМ2 = Новый Массив;
			МсДМИ2 = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МсБМ2, МсБМ, Истина);             // Свернём массивы и получим уникальные значения БМ и ДМИ
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МсДМИ2, МсДМИ, Истина);
	
			// Сбросим для получения ссылки и внутреннего кода.
			ВыборкаДетальныеЗаписи.Сбросить();
			ВыборкаДетальныеЗаписи.Следующий();
			
			МсВыборБМ.Добавить(Новый Структура("БМ, ДМИ, Id", МсБМ2, МсДМИ2, ВыборкаДетальныеЗаписи.ВнутреннийКодВыбораБМ));
			
		КонецЦикла;	
		СоответствиеПродукт.Вставить(ВыборкаСсылка.КодПродукта, Новый Структура("ПродуктСсылка, ВыборБМ, УИД",ВыборкаДетальныеЗаписи.ПродуктСсылка, МсВыборБМ, ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
	КонецЦикла;	
	Возврат СоответствиеПродукт;
	  
КонецФункции

Функция ЗаполнитьКешНСИ_ИерархияПараметровЗабораИЗначений()
	
	ИерархияПараметровЗабораИЗначений = Новый Соответствие;
	ПВХЛабораторныеПараметры = ПланыВидовХарактеристик.invЛабораторныеПараметры;
	Параметр_АдресКлиента_Страна = ПВХЛабораторныеПараметры.АдресКлиента_Страна;
	Параметр_АдресКлиента_Регион = ПВХЛабораторныеПараметры.АдресКлиента_Регион;
	Параметр_АдресКлиента_Город = ПВХЛабораторныеПараметры.АдресКлиента_Город;
	
	ПодчиненныеПараметры_АдресКлиента_Страна = Новый Массив;
	ПодчиненныеПараметры_АдресКлиента_Страна.Добавить(Параметр_АдресКлиента_Регион);
	ПодчиненныеПараметры_АдресКлиента_Страна.Добавить(Параметр_АдресКлиента_Город);
	ИерархияПараметровЗабораИЗначений.Вставить(Параметр_АдресКлиента_Страна, ПодчиненныеПараметры_АдресКлиента_Страна);
	
	ПодчиненныеПараметры_АдресКлиента_Регион = Новый Массив;
	ПодчиненныеПараметры_АдресКлиента_Регион.Добавить(Параметр_АдресКлиента_Город);
	ИерархияПараметровЗабораИЗначений.Вставить(Параметр_АдресКлиента_Регион, ПодчиненныеПараметры_АдресКлиента_Регион);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПараметровЗабораIDЗначенияВладельцы.Ссылка КАК ЗначениеСсылка,
	|	ЗначенияПараметровЗабораIDЗначения.Ссылка КАК ЗначениеВладелецСсылка
	|ИЗ
	|	Справочник.ЗначенияПараметровЗабора.IDЗначения КАК ЗначенияПараметровЗабораIDЗначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗначенияПараметровЗабора.IDЗначенияВладельцы КАК ЗначенияПараметровЗабораIDЗначенияВладельцы
	|		ПО ЗначенияПараметровЗабораIDЗначения.ВидЛаборатории = ЗначенияПараметровЗабораIDЗначенияВладельцы.ВидЛаборатории
	|			И ЗначенияПараметровЗабораIDЗначения.Ссылка.Владелец = ЗначенияПараметровЗабораIDЗначенияВладельцы.ПараметрВладелец
	|			И ЗначенияПараметровЗабораIDЗначения.ID = ЗначенияПараметровЗабораIDЗначенияВладельцы.IDВладелец
	|			И (НЕ ЗначенияПараметровЗабораIDЗначенияВладельцы.Ссылка.ПометкаУдаления)
	|			И (НЕ ЗначенияПараметровЗабораIDЗначения.Ссылка.ПометкаУдаления)
	|ИТОГИ ПО
	|	ЗначениеВладелецСсылка"
	;
	
	ВыборкаЗначениеВладелец = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗначениеВладелец.Следующий() Цикл
		
		ЗначениеВладелецСсылка = ВыборкаЗначениеВладелец.ЗначениеВладелецСсылка;
		ПодчиненныеЗначения = Новый Массив;
		ВыборкаЗначение = ВыборкаЗначениеВладелец.Выбрать();
		
		Пока ВыборкаЗначение.Следующий() Цикл
			ПодчиненныеЗначения.Добавить(ВыборкаЗначение.ЗначениеСсылка);
		КонецЦикла;
		
		ИерархияПараметровЗабораИЗначений.Вставить(ЗначениеВладелецСсылка, ПодчиненныеЗначения); 
		
	КонецЦикла;
	
	Возврат ИерархияПараметровЗабораИЗначений;
	
КонецФункции

#КонецОбласти

#Область ЗаборАнализа

// Получить параметры заборов для правила/массива правил
//
// Параметры:
//  ПравилаЗабора - Строка - строка с ID правила забора или Массив таких строк.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьПараметрыЗабора(ПравилаЗабора) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Параметр", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.invЛабораторныеПараметры"));
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЗначениеПоУмолчанию");
	Результат.Колонки.Добавить("ЗначенияПоУмолчаниюУсловиеПримененияПол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	Результат.Колонки.Добавить("ТипЗначения");
	Результат.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ПравилаЗабора) = Тип("Массив") Тогда
		МассивПравил = ПравилаЗабора;
	ИначеЕсли ТипЗнч(ПравилаЗабора) = Тип("Строка") Тогда
		МассивПравил = Новый Массив;
		МассивПравил.Добавить(ПравилаЗабора);
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	КонецЕсли; 
	
	// Получаем коды продуктов-исследований на SARS-CoV-2 из константы.
	МассивКодыПродуктовCovidOrder = ПолучитьКодыПродуктовCOVID19ИзКонстанты();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", МассивПравил);
	Запрос.УстановитьПараметр("КодПродукта", МассивКодыПродуктовCovidOrder);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	InvСопоставлениеПродуктовИНоменклатуры.Продукт КАК Продукт,
	|	InvСопоставлениеПродуктовИНоменклатуры.Продукт.КодПродукта КАК КодПродукта
	|ПОМЕСТИТЬ ПродуктыНоменклатуры
	|ИЗ
	|	РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|ГДЕ
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура В(&Номенклатура)
	|	И НЕ InvСопоставлениеПродуктовИНоменклатуры.Продукт.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродуктыНоменклатуры.Продукт КАК Продукт
	|ИЗ
	|	ПродуктыНоменклатуры КАК ПродуктыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродуктыНоменклатуры.Продукт КАК Продукт
	|ИЗ
	|	ПродуктыНоменклатуры КАК ПродуктыНоменклатуры
	|ГДЕ
	|	ПродуктыНоменклатуры.КодПродукта В(&КодПродукта)"
	;
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	РезультатЗапросаCovidOrder = ПакетЗапросов[2];
	
	Если Не РезультатЗапросаCovidOrder.Пустой() Тогда
		
		// Добавим предопределенные параметры забора для исследований на SARS-CoV-2.
		ПВХЛабораторныеПараметры = ПланыВидовХарактеристик.invЛабораторныеПараметры;
		
		ПараметрыCovidOrder = Новый Массив;
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_ТипДокумента);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_Серия);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_Номер);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_КемВыдан);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.ДокументКлиента_ДатаВыдачи);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_ТипАдреса);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_СубъектФактическогоПроживания);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Индекс);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Страна);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Регион);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Район);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Город);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_НаселенныйПункт);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Улица);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Дом);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Корпус);
		ПараметрыCovidOrder.Добавить(ПВХЛабораторныеПараметры.АдресКлиента_Квартира);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПараметрыCovidOrder", ПараметрыCovidOrder);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	invЛабораторныеПараметры.Ссылка КАК Параметр,
		|	invЛабораторныеПараметры.Наименование КАК Наименование,
		|	invЛабораторныеПараметры.Обязательное КАК Обязательный,
		|	NULL КАК ЗначениеПоУмолчанию,
		|	ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.НеУказан) КАК ЗначенияПоУмолчаниюУсловиеПримененияПол,
		|	invЛабораторныеПараметры.ТипЗначения КАК ТипЗначения,
		|	invЛабораторныеПараметры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	ПланВидовХарактеристик.invЛабораторныеПараметры КАК invЛабораторныеПараметры
		|ГДЕ
		|	НЕ invЛабораторныеПараметры.ПометкаУдаления
		|	И invЛабораторныеПараметры.Ссылка В(&ПараметрыCovidOrder)"
		;
		
		ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблица Из ТаблицаРезультатЗапроса Цикл
			НоваяСтрокаРезультат = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультат, СтрокаТаблица);			
		КонецЦикла;
		
	КонецЕсли;	
	     
	// Добавим параметры забора, предназначенные для исследований на основании загруженной НСИ.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	invВыборБМ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВыборБМСсылки
	|ИЗ
	|	Справочник.invВыборБМ КАК invВыборБМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.invПродукт КАК invПродукт
	|		ПО invВыборБМ.Владелец = invПродукт.Ссылка
	|			И (НЕ invВыборБМ.ПометкаУдаления)
	|			И (invПродукт.Ссылка В (&Продукты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	invВыборБМБиоматериалы.ДопМедИнформация КАК ДопМедИнформация
	|ПОМЕСТИТЬ ДМИ
	|ИЗ
	|	Справочник.invВыборБМ.Биоматериалы КАК invВыборБМБиоматериалы
	|ГДЕ
	|	invВыборБМБиоматериалы.Ссылка В
	|			(ВЫБРАТЬ
	|				ВыборБМСсылки.Ссылка
	|			ИЗ
	|				ВыборБМСсылки)
	|	И invВыборБМБиоматериалы.ДопМедИнформация <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.invЛабораторныеПараметры.ПустаяСсылка)
	|	И НЕ invВыборБМБиоматериалы.ДопМедИнформация.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДМИ.ДопМедИнформация.Ссылка КАК Параметр,
	|	invЛабораторныеПараметры.Наименование КАК Наименование,
	|	invЛабораторныеПараметры.Обязательное КАК Обязательный,
	|	NULL КАК ЗначениеПоУмолчанию,
	|	ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.НеУказан) КАК ЗначенияПоУмолчаниюУсловиеПримененияПол,
	|	invЛабораторныеПараметры.ТипЗначения КАК ТипЗначения,
	|	invЛабораторныеПараметры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ДМИ КАК ДМИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.invЛабораторныеПараметры КАК invЛабораторныеПараметры
	|		ПО ДМИ.ДопМедИнформация = invЛабораторныеПараметры.Ссылка
	|			И (НЕ invЛабораторныеПараметры.ПометкаУдаления)"
	;
				
	Запрос.УстановитьПараметр("Продукты", ПакетЗапросов[1].Выгрузить());
	
	ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультатЗапроса.Сортировать("Наименование");
	
	Для Каждого СтрокаТаблица Из ТаблицаРезультатЗапроса Цикл
		НоваяСтрокаРезультат = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультат, СтрокаТаблица);			
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	
КонецФункции

// Распределение биоматериалов по контейнерам.
//
// Параметры:
//  ДанныеЗабора - Структура
//
// Возвращаемое значение:
//  ДеревоЗначений.
//
Функция РаспределениеБиоматериаловПоКонтейнерам(ДанныеЗабора) Экспорт 
	
КонецФункции

// Проверить заполнение забора анализа.
//
// Параметры:
//  ДокументОбъект - ДокументСсылка.ДействиеНадАнализами.
//  Лаборатория - СправочникСсылка.Лаборатории.
//  Отказ - Булево
//
Процедура ПроверитьЗаполнениеЗабораАнализа(ДокументОбъект, Лаборатория, Отказ) Экспорт
	
КонецПроцедуры

Функция РедактированиеКодаПробыЗапрещено() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами_ПрограммныйИнтерфейс // Отправка заказов и получение результатов

// Отправяет опись заказов во внешнюю лабораторию.
//
// Параметры:
//  ОписьЗаказов - ДокументСсылка.ОписьЗаказовЛаборатории	 - опись заказов этой лаборатории.
// 
// Возвращаемое значение:
//  Булево, Массив.
//
Функция ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(ОписьЗаказов) Экспорт
	Возврат Истина;
КонецФункции

// Получение результатов анализов лаборатории из внешних источников.
//
// Параметры:
//  ТекстОшибки - Строка - текст ошибки получения.
//
Процедура ПолучитьРезультатыАнализов(ТекстОшибкиЛаборатории) Экспорт
	
	Если ЛабораторияСервер.НастройкиУчетаЛабораторий().Invitro_ИспользуетсяИнтеграцияСInvitro Тогда
		ИмпортВыполненнойЗаявки();
	КонецЕсли;
	
КонецПроцедуры

// Проверка корректности кодов проб.
//
// Параметры:
//  КодыПроб - Массив - массив строк с кодами проб.
//  ПроверятьПустые - Булево - проверять ли корректность пустых кодов проб.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПроверитьКорректностьКодовПроб(КодыПроб, Знач ПроверятьПустые) Экспорт
	
	Возврат "";
		
КонецФункции

// Проверка корректности кода пробы с описанием ошибки.
//
// Параметры:
//  КодПробы	 - Строка	 - код пробы.
//  ТекстОшибки	 - Строка	 - текст ошибки.
// 
// Возвращаемое значение:
//  Булево.
//
Функция КодПробыКорректенДляЗаказа(КодПробы, ТекстОшибки = "") Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами_СлужебныеПроцедуры // Отправка заказов и получение результатов

Процедура ИмпортВыполненнойЗаявки(Подразделение = Неопределено) Экспорт
	Дерево =  Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ТипЭлемента");
	Дерево.Колонки.Добавить("ИмяЭлемента");
	Дерево.Колонки.Добавить("Значение");
	Если Подразделение = Неопределено Тогда
		Запрос = Новый Запрос;
		// Берется настройка подразделения из регистра сведений.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	invНастройкиПодразделения.ФТПВыгрузки,
		|	invНастройкиПодразделения.ЛогинВыгрузки,
		|	invНастройкиПодразделения.ПарольВыгрузки,
		|	invНастройкиПодразделения.ПапкаЗагрузкиXML,
		|	invНастройкиПодразделения.ПутьКРезультатамПДФ,
		|	invНастройкиПодразделения.Подразделение
		|ИЗ
		|	РегистрСведений.invНастройкиПодразделения КАК invНастройкиПодразделения";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();	
	Иначе
		Выборка = РегистрыСведений.invНастройкиПодразделения.Выбрать(Новый Структура("Подразделение",Подразделение));
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл	
		ФТП = Выборка.ФТПВыгрузки;
		Логин = Выборка.ЛогинВыгрузки;
		Пароль = Выборка.ПарольВыгрузки;
		ПапкаЗагрузкиXML = Выборка.ПапкаЗагрузкиXML;
		Подразделение = Выборка.Подразделение;
		ПутьКРезультатамPDF = Выборка.ПутьКРезультатамПДФ;
		ЗаписьЖурналаРегистрации("Загрузка результата из ИНВИТРО",,,,ПапкаЗагрузкиXML);
		
		ПапкаЗагрузки = Выборка.ПапкаЗагрузкиXML + "\";
		ПапкаСФайлами = Выборка.ПапкаЗагрузкиXML + "\Обработаны";
		ПапкаАрхива = ПапкаСФайлами + "\Arch\";
		
		Если НЕ ЗначениеЗаполнено(ПапкаЗагрузки) ИЛИ НЕ ЗначениеЗаполнено(ПапкаСФайлами) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены пути к папкам загрузки!");
			Возврат;
		КонецЕсли;
		
		МассивФайловВЗагрузке = НайтиФайлы(ПапкаЗагрузки, "*.xml");
		МассивВзятыхФайлов = НайтиФайлы(ПапкаСФайлами + "\", "*.xml", Истина);
		тзВзятыхФайлов = Новый ТаблицаЗначений;
		тзВзятыхФайлов.Колонки.Добавить("Файл");
		тзВзятыхФайлов.Колонки.Добавить("Имя");
		
		Для каждого ЭлМассива Из МассивВзятыхФайлов Цикл
			стрТаблицы = тзВзятыхФайлов.Добавить();
			стрТаблицы.Файл = ЭлМассива;
			стрТаблицы.Имя = стрТаблицы.Файл.Имя;
		КонецЦикла;
		
		МассивФайлов = Новый Массив;
		
		Для каждого ФайлВЗагрузке Из МассивФайловВЗагрузке Цикл
			
			Если тзВзятыхФайлов.Найти(ФайлВЗагрузке.Имя, "Имя") = Неопределено Тогда
				МассивФайлов.Добавить(ФайлВЗагрузке);
			КонецЕсли;		
			
		КонецЦикла; 
		
		Дерево =  Новый ДеревоЗначений;
		Дерево.Колонки.Добавить("ТипЭлемента");
		Дерево.Колонки.Добавить("ИмяЭлемента");
		Дерево.Колонки.Добавить("Значение");
		
		Для каждого Файл Из МассивФайлов Цикл
			ИмяФайла = Строка(Файл.ПолноеИмя);
			ЗагрузитьXMLВДерево(ИмяФайла,Дерево);
			СтрокиДерева = Дерево.Строки;
			Отказ = Ложь;
			СозданиеЗаявки(Дерево);
			
			// Если заявка не найдена, удалять файл не будем, вдруг он из другой БД.
			Если НЕ Отказ Тогда
				
				Попытка
					Источник = Файл.ПолноеИмя;
					Приемник = ПапкаАрхива + Файл.Имя;
					// Если нет каталога - создаем.
					КаталогНаДиске = Новый Файл(ПапкаАрхива);
					Если НЕ КаталогНаДиске.Существует() Тогда
						СоздатьКаталог(ПапкаАрхива);
					КонецЕсли;
					
					ПереместитьФайл(Источник, Приемник);
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			МассивФайловВЗагрузкеPDF = НайтиФайлы(ПутьКРезультатамPDF, "*.pdf");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка: "+ ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		МассивВзятыхФайловPDF = НайтиФайлы(ПапкаСФайлами + "\", "*.pdf");
		тзВзятыхФайловPDF = Новый ТаблицаЗначений;
		тзВзятыхФайловPDF.Колонки.Добавить("Файл");
		тзВзятыхФайловPDF.Колонки.Добавить("Имя");
		
		Для Каждого ЭлМассива Из МассивВзятыхФайловPDF Цикл
			стрТаблицы = тзВзятыхФайловPDF.Добавить();
			стрТаблицы.Файл = ЭлМассива;
			стрТаблицы.Имя = стрТаблицы.Файл.Имя;
		КонецЦикла;
		
		Для Каждого ФайлРезультатPDF Из МассивФайловВЗагрузкеPDF Цикл
			Если тзВзятыхФайловPDF.Найти(ФайлРезультатPDF.Имя, "Имя") = Неопределено Тогда
				Источник = ФайлРезультатPDF.ПолноеИмя;
				Приемник = ПапкаСФайлами + "\" + ФайлРезультатPDF.Имя;
				
				Попытка
					// Если нет каталога - создаем.
					КаталогНаДиске = Новый Файл(ПапкаСФайлами);
					Если Не КаталогНаДиске.Существует() Тогда
						СоздатьКаталог(ПапкаСФайлами);
					КонецЕсли;
					ПереместитьФайл(Источник, Приемник);
					ПолноеИмяФайлаPDF = Приемник; 
				Исключение
					ПолноеИмяФайлаPDF = Источник; 
				КонецПопытки;
				
				СозданиеЗаявки(, ФайлРезультатPDF, ПолноеИмяФайлаPDF);
			КонецЕсли;		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаявки

Функция СоздатьЗаявкуНаСервере(ДействиеНадАнализамиСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПодразделения.Подразделение КАК Подразделение,
	|	НастройкиПодразделения.Токен КАК Токен,
	|	НастройкиПодразделения.Сервер КАК Сервер,
	|	НастройкиПодразделения.ПортПринтера КАК ПортПринтера,
	|	НастройкиПодразделения.ОбщаяПапкаВыгрузки КАК ОбщаяПапкаВыгрузки,
	|	НастройкиПодразделения.ПапкаЗагрузкиXML КАК ПапкаЗагрузкиXML,
	|	НастройкиПодразделения.ПутьКРезультатамПДФ КАК ПутьКРезультатамПДФ,
	|	НастройкиПодразделения.ФТПВыгрузки КАК ФТПВыгрузки,
	|	НастройкиПодразделения.ЛогинВыгрузки КАК ЛогинВыгрузки,
	|	НастройкиПодразделения.ПарольВыгрузки КАК ПарольВыгрузки,
	|	НастройкиПодразделения.ПапкаВыгрузки КАК ПапкаВыгрузки,
	|	НастройкиПодразделения.AddressCode КАК AddressCode
	|ИЗ
	|	РегистрСведений.invНастройкиПодразделения КАК НастройкиПодразделения
	|ГДЕ
	|	(НастройкиПодразделения.Подразделение.Филиал = &Филиал
	|			ИЛИ НастройкиПодразделения.Подразделение.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Филиал", РаботаСДокументамиСервер.ФилиалДокумента(ДействиеНадАнализамиСсылка));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НастройкаВыгрузки = РезультатЗапроса.Выбрать();
	
	Если НастройкаВыгрузки.Следующий() Тогда
		ФайлыXMLОтветаИЗапроса = ПолучитьФайлыXMLОтветаИЗапроса("armps_request", НастройкаВыгрузки.ОбщаяПапкаВыгрузки);
	
		Host  = НастройкаВыгрузки.Сервер;
		Токен = НастройкаВыгрузки.Токен;
		
		hdrs = Новый Соответствие();
		hdrs.Вставить("Host", Host); 
		hdrs.Вставить("Content-Type", "text/xml; charset=utf-8");
		hdrs.Вставить("Connection", "Keep-Alive");
		hdrs.Вставить("Accept-Encoding", "gzip,deflate");
		
		conn = Новый HTTPСоединение(Host,42013);
		
		CovidOrder = Ложь;
		СформироватьФайлЗаявки(ФайлыXMLОтветаИЗапроса.Запрос, Токен, НастройкаВыгрузки.AddressCode, ДействиеНадАнализамиСсылка, CovidOrder);
		ОбработанныйФайлЗапроса = УдалитьЛишниеСимволы(ФайлыXMLОтветаИЗапроса.Запрос);
		
		HTTPЗапрос = Новый HTTPЗапрос("/Innerscape/xml/" + ?(CovidOrder, "RegisterCovidOrder", "RegisterOrder"), hdrs);
		HTTPЗапрос.УстановитьТелоИзСтроки(ОбработанныйФайлЗапроса,"utf-8");
		HTTPОтвет = conn.ОтправитьДляОбработки(HTTPЗапрос,ФайлыXMLОтветаИЗапроса.Ответ);
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			СтруктураОтвета = ОбработатьОтветСервиса(ФайлыXMLОтветаИЗапроса.Ответ);
			
			УИ = Новый УникальныйИдентификатор(СтруктураОтвета.OrderId);
			НоваяСсылка = Документы.invЗаявкаНаИсследование.ПолучитьСсылку(УИ);
			Если НЕ ЗначениеЗаполнено(НоваяСсылка.Номер) Тогда
				ДокументЗаявка = Документы.invЗаявкаНаИсследование.СоздатьДокумент();
				ДокументЗаявка.УстановитьСсылкуНового(НоваяСсылка);
			Иначе
				ДокументЗаявка = НоваяСсылка.ПолучитьОбъект();
			КонецЕсли;
			ДокументЗаявка.Пациент = ДействиеНадАнализамиСсылка.Исследования[0].Клиент;
			Продукты  = ДокументЗаявка.Продукты;
			СписокИНЗ = ДокументЗаявка.СписокИНЗ;
			
			СоответствиеПродуктаНоменклатуре = ВернутьСоответствиеПродуктаНоменклатуре(ДействиеНадАнализамиСсылка);
			Для Каждого СтрокаИсследования Из ДействиеНадАнализамиСсылка.Исследования Цикл
				Если СтрокаИсследования.Лаборатория.ВнешняяЛаборатория <> Перечисления.ВнешниеЛаборатории.Invitro Тогда 
					Продолжить;
				КонецЕсли;
				Лаборатория = СтрокаИсследования.Лаборатория;
				СтрокаПродукт = Продукты.Добавить();
				СтрокаПродукт.Продукт = СоответствиеПродуктаНоменклатуре[СтрокаИсследования.Номенклатура];
				СтрокаПродукт.КодПродукта = СтрокаПродукт.Продукт.КодПродукта;
				СтрокаПродукт.НаименованиеПродукта = СтрокаПродукт.Продукт.ПолноеНаименование;
			КонецЦикла;
			
			Если СтруктураОтвета.OrderTubes.Свойство("OrderTube") И СтруктураОтвета.OrderTubes.Количество() > 0 Тогда
				Контейнеры = СтруктураОтвета.OrderTubes.OrderTube;
				Если ТипЗнч(Контейнеры) = Тип("Структура") Тогда
					НайденныйКонтейнер = Справочники.invКонтейнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнеры.ContainerId));
					НайденныйБиоматериал = Справочники.invБиоматериал.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнеры.BiomaterialId));
					строкаКонтейнеры = ДокументЗаявка.Контейнеры.Добавить();
					строкаКонтейнеры.Контейнер = НайденныйКонтейнер;
					строкаКонтейнеры.Биоматериал = НайденныйБиоматериал;
					строкаКонтейнеры.ИЛН = Контейнеры.LaboratoryNumber;
					Если Контейнеры.Свойство("StickerCodeBase64") Тогда
						строкаКонтейнеры.ШтрихКод = Новый ХранилищеЗначения(Base64Значение(Контейнеры.StickerCodeBase64));
					КонецЕсли;
					ИНЗ = Лев(Контейнеры.LaboratoryNumber,9);
					СтрокаИНЗ = СписокИНЗ.Добавить();
					СтрокаИНЗ.ИНЗ = ИНЗ;
				ИначеЕсли ТипЗнч(Контейнеры) = ТИп("Массив") Тогда
					Для каждого Контейнер Из Контейнеры Цикл
						НайденныйКонтейнер = Справочники.invКонтейнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнер.ContainerId));
						НайденныйБиоматериал = Справочники.invБиоматериал.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнер.BiomaterialId));
						строкаКонтейнеры = ДокументЗаявка.Контейнеры.Добавить();
						строкаКонтейнеры.Контейнер = НайденныйКонтейнер;
						строкаКонтейнеры.Биоматериал = НайденныйБиоматериал;
						строкаКонтейнеры.ИЛН = Контейнер.LaboratoryNumber;
						Если Контейнер.Свойство("StickerCodeBase64") Тогда
							строкаКонтейнеры.ШтрихКод = Новый ХранилищеЗначения(Base64Значение(Контейнер.StickerCodeBase64));
						КонецЕсли;
						ИНЗ = Лев(Контейнер.LaboratoryNumber,9);
						СтрокаИНЗ = СписокИНЗ.Добавить();
						СтрокаИНЗ.ИНЗ = ИНЗ;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
			ФорматБланка = СтруктураОтвета.CoverLetters.CoverLetter.Format;
			БланкДвоичныеДанные = Base64Значение(СтруктураОтвета.CoverLetters.CoverLetter.ContentBase64);
			БланкДвоичныеДанные.Записать(НастройкаВыгрузки.ОбщаяПапкаВыгрузки + "\1.pdf");
			ДокументЗаявка.Бланк = Новый ХранилищеЗначения(БланкДвоичныеДанные);
			ДокументЗаявка.Дата = ТекущаяДатаСеанса();
			ДокументЗаявка.Подразделение = НастройкаВыгрузки.Подразделение;
			ДокументЗаявка.Лаборатория = Лаборатория;
			ДокументЗаявка.Записать(РежимЗаписиДокумента.Проведение);
			СоздатьЗаказОписьИОтправитьВоВнешнююЛабораторию(ДокументЗаявка.Ссылка, ДействиеНадАнализамиСсылка);
			Возврат ДокументЗаявка.Ссылка;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка!");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Код состояния - " + Строка(HTTPОтвет.КодСостояния));
			
			СтруктураОтвета = ОбработатьОтветСервиса(ФайлыXMLОтветаИЗапроса.Ответ);
			
			СообщениеПользователю = "";
			ЕстьОписание = СтруктураОтвета.Свойство("UserFriendlyMessage", СообщениеПользователю);
			Если ЕстьОписание Тогда
				Сообщить("Заявка не оформлена! " + СообщениеПользователю, СтатусСообщения.ОченьВажное);
			КонецЕсли; 
			
			Возврат "";
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указаны настройки интеграции Инвитро для данной клиники!");
	КонецЕсли;

КонецФункции

Функция ПолучитьФайлыXMLОтветаИЗапроса(ТипВыгружаемыхДанных, ПутьКПапке)	
	Если ПутьКПапке = "" Тогда
		ВызватьИсключение("Не указан каталог выгрузки в настройках!");		
	КонецЕсли;
	ИмяКаталогаСущности = ВернутьПапку(ТипВыгружаемыхДанных, ПутьКПапке); 
	Структура = Новый Структура;
	Структура.Вставить("Запрос",ИмяКаталогаСущности +"\req_"+формат(текущаядата(),"ДФ=ddMMyy")+"_"+Строка(Час(ТекущаяДата()))+Строка(Минута(ТекущаяДата()))+Строка(Секунда(ТекущаяДата()))+".xml");
	Структура.Вставить("Ответ",ИмяКаталогаСущности + "\res_"+формат(текущаядата(),"ДФ=ddMMyy")+"_"+Строка(Час(ТекущаяДата()))+Строка(Минута(ТекущаяДата()))+Строка(Секунда(ТекущаяДата()))+".xml");
	
	Возврат Структура
КонецФункции // ПолучитьФайлыXMLОтветаИЗапроса()

Процедура СформироватьФайлЗаявки(ПутьКФайлу, Токен, КодМедОфиса, ДействиеНадАнализамиСсылка, CovidOrder)
	
	Клиент = ДействиеНадАнализамиСсылка.Исследования[0].Клиент;
	
	ЭлектроннаяПочтаКлиента = "";
	ЭлектроннаяПочта = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, Истина, Истина);
		
	Если ТипЗнч(ЭлектроннаяПочта) = Тип("Строка") И Не ПустаяСтрока(ЭлектроннаяПочта) Тогда
		ЭлектроннаяПочтаКлиента = ЭлектроннаяПочта;
	КонецЕсли;
	
	НормализованныйНомерКлиента = "";
	СотовыйТелефон = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент,
		Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонСотовый, Истина, Истина);
		
	Если ЗначениеЗаполнено(СотовыйТелефон) Тогда
		НормализованныйНомер = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(СотовыйТелефон, Ложь);
		Если ТипЗнч(НормализованныйНомер) = Тип("Строка") И Не ПустаяСтрока(НормализованныйНомер) Тогда
			ДлинаНомера = СтрДлина(НормализованныйНомер);
			Если ДлинаНомера = 11 Или ДлинаНомера = 10 Тогда
				НормализованныйНомерКлиента = Прав(НормализованныйНомер, 10);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеДМИ = Новый Соответствие;
	ТаблицаДМИCovid = Новый ТаблицаЗначений;
	ТаблицаДМИCovid.Колонки.Добавить("ТипДМИCovid");
	ТаблицаДМИCovid.Колонки.Добавить("Порядок");
	ТаблицаДМИCovid.Колонки.Добавить("Параметр");
	ТаблицаДМИCovid.Колонки.Добавить("Значение");
	
	ТипДМИCovidAddress = "Address";
	ТипДМИCovidDocument = "Document";
	ПВХЛабораторныеПараметры = ПланыВидовХарактеристик.invЛабораторныеПараметры;

	Для Каждого СтрокаПараметрЗабора Из ДействиеНадАнализамиСсылка.ПараметрыЗабора Цикл
		
		// Отберём только Инвитро.
		Если ТипЗнч(СтрокаПараметрЗабора.Параметр) <> Тип("ПланВидовХарактеристикСсылка.invЛабораторныеПараметры") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаПараметрЗабора.Параметр.Предопределенный Тогда
			
			СоответствиеДМИ.Вставить(СтрокаПараметрЗабора.Параметр.УникальныйИдентификатор(),Строка(СтрокаПараметрЗабора.Значение));
			
		Иначе
			
			ПараметрДМИCovid = СтрокаПараметрЗабора.Параметр;
			ЗначениеДМИCovid = СтрокаПараметрЗабора.Значение;
			
			Если ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_ТипАдреса Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 1;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_СубъектФактическогоПроживания Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 2;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Индекс Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 3;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Страна Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 4;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Регион Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 5;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Район Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 6;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Город Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 7;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_НаселенныйПункт Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 8;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Улица Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 9;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Дом Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 10;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Корпус Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 11;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.АдресКлиента_Квартира Тогда
				ТипДМИCovid = ТипДМИCovidAddress;
				Порядок = 12;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.ДокументКлиента_ТипДокумента Тогда
				ТипДМИCovid = ТипДМИCovidDocument;
				Порядок = 1;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.ДокументКлиента_Серия Тогда
				ТипДМИCovid = ТипДМИCovidDocument;
				Порядок = 2;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.ДокументКлиента_Номер Тогда
				ТипДМИCovid = ТипДМИCovidDocument;
				Порядок = 3;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.ДокументКлиента_КемВыдан Тогда
				ТипДМИCovid = ТипДМИCovidDocument;
				Порядок = 4;
			ИначеЕсли ПараметрДМИCovid = ПВХЛабораторныеПараметры.ДокументКлиента_ДатаВыдачи Тогда
				ТипДМИCovid = ТипДМИCovidDocument;
				Порядок = 5;
			Иначе
				Продолжить;
			КонецЕсли;
		
			СтрокаТаблицаДМИCovid = ТаблицаДМИCovid.Добавить();
			СтрокаТаблицаДМИCovid.ТипДМИCovid = ТипДМИCovid;
			СтрокаТаблицаДМИCovid.Порядок = Порядок;
			СтрокаТаблицаДМИCovid.Параметр = ПараметрДМИCovid;
			СтрокаТаблицаДМИCovid.Значение = ЗначениеДМИCovid;

		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДМИCovid.Сортировать("ТипДМИCovid, Порядок");
	
	Если ТаблицаДМИCovid.Количество() <> 0 Тогда
		CovidOrder = Истина;
	КонецЕсли;

	Фамилия = Клиент.Фамилия;
	Имя = Клиент.Имя;
	Отчество = Клиент.Отчество;

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Token");
	ЗаписьXML.ЗаписатьТекст(Токен);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("BiomaterialDate");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ТекущаяДата()-СмещениеСтандартногоВремени())+"Z");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если CovidOrder Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Location");
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Patient");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ExternalId");
	ЗаписьXML.ЗаписатьТекст(Строка(Клиент.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("FirstName");
	ЗаписьXML.ЗаписатьТекст(Имя);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("LastName");
	ЗаписьXML.ЗаписатьТекст(Фамилия);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("MiddleName");
	ЗаписьXML.ЗаписатьТекст(Отчество);
	ЗаписьXML.ЗаписатьКонецЭлемента();        
	ЗаписьXML.ЗаписатьНачалоЭлемента("BirthDate");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Клиент.ДатаРождения));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Sex");
	ЗаписьXML.ЗаписатьТекст(?(Клиент.Пол = Перечисления.ПолФизическихЛиц.Женский,"F","M"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если CovidOrder Тогда
		
		МассивCovidAddress = ТаблицаДМИCovid.НайтиСтроки(Новый Структура("ТипДМИCovid", ТипДМИCovidAddress));
	
		Если МассивCovidAddress.Количество() <> 0 Тогда
			
			СтрокаАдресКлиента = "";
			
			Для Каждого СтрокаДМИCovidAddress Из МассивCovidAddress Цикл
				
				Порядок = СтрокаДМИCovidAddress.Порядок;
				ПараметрДМИCovid = СтрокаДМИCovidAddress.Параметр;
				ЗначениеДМИCovid = СтрокаДМИCovidAddress.Значение;
				
				Если Не ЗначениеЗаполнено(ЗначениеДМИCovid) Тогда
					Продолжить;	
				КонецЕсли;
				
				ТипАдресаСтрока = "";
				
				Если Порядок <= 4 Тогда
					Продолжить;
				ИначеЕсли Порядок = 10 Тогда
					ТипАдресаСтрока = "д. ";
				ИначеЕсли Порядок = 11 Тогда
					ТипАдресаСтрока = "корп. ";
				ИначеЕсли Порядок = 12 Тогда
					ТипАдресаСтрока = "кв. ";
				КонецЕсли;
				
				СтрокаАдресКлиента = СтрокаАдресКлиента + ?(Не ПустаяСтрока(СтрокаАдресКлиента), ", ", "")
					+ ТипАдресаСтрока + Строка(ЗначениеДМИCovid);
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(СтрокаАдресКлиента) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Address");
				ЗаписьXML.ЗаписатьТекст(СтрокаАдресКлиента);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.Закрыть();
				УдалитьФайлы(ПутьКФайлу);
				ВызватьИсключение(НСтр("ru='В параметрах забора не заполнен адрес клиента или его законного представителя'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(НормализованныйНомерКлиента) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("PhoneNumber");
			ЗаписьXML.ЗаписатьТекст("+7" + НормализованныйНомерКлиента);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		Иначе
			ЗаписьXML.Закрыть();
			УдалитьФайлы(ПутьКФайлу);
			ВызватьИсключение(НСтр("ru='Не заполнен номер телефона в профиле клиента или его законного представителя'"));
		КонецЕсли;
		
		МестоРаботыКлиента = Строка(Клиент.умцМестоРаботы);
		ЗаписьXML.ЗаписатьНачалоЭлемента("WorkPlace");
		
		Если Не ПустаяСтрока(МестоРаботыКлиента) Тогда
			ЗаписьXML.ЗаписатьТекст(Лев(МестоРаботыКлиента, 50));
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ДолжностьКлиента = Строка(Клиент.Профессия);
		ЗаписьXML.ЗаписатьНачалоЭлемента("Post");
		
		Если Не ПустаяСтрока(ДолжностьКлиента) Тогда
			ЗаписьXML.ЗаписатьТекст(Лев(ДолжностьКлиента, 50));
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Иначе

		// +бит. Передадим адрес пациента, согласно законодательству, если среди продуктов есть ВИЧ / Гепатит В/С.
		Найден = Ложь;
		МсПродуктыСОбязательнойПередачейАдреса = ПолучитьПродуктыСОбязательнойПередачейАдреса();
		
		Найден = Ложь;
		Для каждого ПродуктСПередачейАдреса из МсПродуктыСОбязательнойПередачейАдреса Цикл
			Если ДействиеНадАнализамиСсылка.Исследования.Найти(ПродуктСПередачейАдреса, "Номенклатура") <> Неопределено Тогда 
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Найден Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Address");
			Попытка
				ЗаписьXML.ЗаписатьТекст(КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент, Перечисления.ТипыКонтактнойИнформации.Адрес));	
			Исключение
				ЗаписьXML.Закрыть();
				УдалитьФайлы(ПутьКФайлу);
				ВызватьИсключение(НСтр("ru='Не заполнен адрес клиента или его законного представителя'"));
			КонецПопытки;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		// -бит.
			
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если CovidOrder Тогда
		
		Если МассивCovidAddress.Количество() <> 0 Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Address");
			
			Для Каждого СтрокаДМИCovidAddress Из МассивCovidAddress Цикл
				
				ПараметрДМИCovid = СтрокаДМИCovidAddress.Параметр;
				ЗначениеДМИCovid = СтрокаДМИCovidAddress.Значение;
				Порядок = СтрокаДМИCovidAddress.Порядок;
				
				// Если значение параметра забора - элемент справочника, тогда в заявку добавляем его идентификатор.
				Если ТипЗнч(ЗначениеДМИCovid) = Тип("СправочникСсылка.ЗначенияПараметровЗабора") Тогда
					IDЗначения = ЗначениеДМИCovid.IDЗначения;
					
					Если IDЗначения.Количество() = 0 Тогда
						Продолжить;	
					КонецЕсли;
					
					Значение = IDЗначения[0].ID;
				Иначе
					Значение = ЗначениеДМИCovid;
				КонецЕсли;
				
				Если Порядок = 1 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Type");
				ИначеЕсли Порядок = 2 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Subject");
				ИначеЕсли Порядок = 3 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("PostalCode");
				ИначеЕсли Порядок = 4 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Country");
				ИначеЕсли Порядок = 5 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Region");
				ИначеЕсли Порядок = 6 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Destrict");
				ИначеЕсли Порядок = 7 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("City");
				ИначеЕсли Порядок = 8 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Locality");
				ИначеЕсли Порядок = 9 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Street");
				ИначеЕсли Порядок = 10 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("House");
				ИначеЕсли Порядок = 11 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Body");
				ИначеЕсли Порядок = 12 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Flat");
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Значение) Тогда
					ЗаписьXML.ЗаписатьТекст(Значение);
				КонецЕсли;
					
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Office");
		ЗаписьXML.ЗаписатьНачалоЭлемента("ClientId");
		ЗаписьXML.ЗаписатьТекст(КодМедОфиса);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();	
			
		МассивCovidDocument = ТаблицаДМИCovid.НайтиСтроки(Новый Структура("ТипДМИCovid", ТипДМИCovidDocument));
		
		Если МассивCovidDocument.Количество() <> 0 Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
			
			Для Каждого СтрокаДМИCovidDocument Из МассивCovidDocument Цикл

				ПараметрДМИCovid = СтрокаДМИCovidDocument.Параметр;
				ЗначениеДМИCovid = СтрокаДМИCovidDocument.Значение;
				Порядок = СтрокаДМИCovidDocument.Порядок;
				
				// Если значение параметра забора - элемент справочника, тогда в заявку добавляем его идентификатор.
				Если ТипЗнч(ЗначениеДМИCovid) = Тип("СправочникСсылка.ЗначенияПараметровЗабора") Тогда
					IDЗначения = ЗначениеДМИCovid.IDЗначения;
					
					Если IDЗначения.Количество() = 0 Тогда
						Продолжить;	
					КонецЕсли;
					
					Значение = IDЗначения[0].ID;
				Иначе
					Значение = ЗначениеДМИCovid;
				КонецЕсли;
				
				Если Порядок = 1 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Type");
				ИначеЕсли Порядок = 2 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Series");
				ИначеЕсли Порядок = 3 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Number");
				ИначеЕсли Порядок = 4 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Issued");
				ИначеЕсли Порядок = 5 Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("DateOfIssue");
					Значение = Формат(НачалоДня(Значение), "ДФ=yyyy-MM-ddTHH:mm:ss");
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Значение) Тогда
					ЗаписьXML.ЗаписатьТекст(Значение);
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
	
	КонецЕсли;
		
	// Получим соответствие номенклатура - продукт.
	СоответствиеПродуктаНоменклатуре = ВернутьСоответствиеПродуктаНоменклатуре(ДействиеНадАнализамиСсылка);	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Products");
	
	Для Каждого СтрокаИсследования Из ДействиеНадАнализамиСсылка.Исследования Цикл
		Если СтрокаИсследования.Лаборатория.ВнешняяЛаборатория <> Перечисления.ВнешниеЛаборатории.Invitro Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Product");
		ЗаписьXML.ЗаписатьНачалоЭлемента("ProductId");
		УИДПродукта = Строка(СоответствиеПродуктаНоменклатуре[СтрокаИсследования.Номенклатура].УникальныйИдентификатор());
		ЗаписьXML.ЗаписатьТекст(УИДПродукта);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ProductId
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("BiomaterialOptions");	
		НайденныеСтроки = ДействиеНадАнализамиСсылка.ПравилаВнешнихЛабораторий.НайтиСтроки(Новый Структура("КлючСтрокиИсследования", СтрокаИсследования.КлючСтроки));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Option");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Id");
			ЗаписьXML.ЗаписатьТекст(НайденнаяСтрока.ИдПравила);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Option
			ЗаписьXML.ЗаписатьНачалоЭлемента("BiomaterialId");
			ЗаписьXML.ЗаписатьТекст(НайденнаяСтрока.ИДБиоматериала);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // BiomaterialId
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;  	
		ЗаписьXML.ЗаписатьКонецЭлемента();   // BiomaterialOptions
		ЗаписьXML.ЗаписатьКонецЭлемента();   // Product
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();	// Products
	
	// Вставка Deliveries.
	СпособыУведомленияОРезультате = Новый СписокЗначений;
	
	Если Не ПустаяСтрока(ЭлектроннаяПочтаКлиента) Тогда
		СпособыУведомленияОРезультате.Добавить(СокрЛП(ЭлектроннаяПочтаКлиента), "Email");
	КонецЕсли;
	
	Если Не ПустаяСтрока(НормализованныйНомерКлиента) Тогда
		СпособыУведомленияОРезультате.Добавить("7" + Прав(НормализованныйНомерКлиента, 10), "SmsNotification");
	КонецЕсли;
	
	Если СпособыУведомленияОРезультате.Количество() <> 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Deliveries");
		Для Каждого ТипДоставки Из СпособыУведомленияОРезультате Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Delivery");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Type");
			ЗаписьXML.ЗаписатьТекст(ТипДоставки.Представление);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
			ЗаписьXML.ЗаписатьТекст(ТипДоставки.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("AuxiliaryInfoValues");	
	Если (СоответствиеДМИ <> Неопределено И СоответствиеДМИ.Количество() = 0) ИЛИ (СоответствиеДМИ = Неопределено) Тогда
		Атр = "xsi:nil";
		ЗаписьXML.ЗаписатьАтрибут(Атр,"true");		
	ИначеЕсли СоответствиеДМИ <> Неопределено И СоответствиеДМИ.Количество() <> 0 Тогда
		Для Каждого элтСоответствияДМИ Из СоответствиеДМИ Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("AuxiliaryInfoValue");
			ЗаписьXML.ЗаписатьНачалоЭлемента("AuxiliaryInfoId");
			ЗаписьXML.ЗаписатьТекст(Строка(элтСоответствияДМИ.Ключ));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // AuxiliaryInfoId
			ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
			ЗаписьXML.ЗаписатьТекст(элтСоответствияДМИ.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Value
			ЗаписьXML.ЗаписатьКонецЭлемента(); // AuxiliaryInfoValue
		КонецЦикла;
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // AuxiliaryInfoValues
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Order            
	
	ЗаписьXML.Закрыть()	
	
КонецПроцедуры

Функция УдалитьЛишниеСимволы(ФайлXML)
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ФайлXML);
	Для Сч=1 по Тд.КоличествоСтрок() Цикл;
		Строка = ТД.ПолучитьСтроку(Сч);
		Строка = СтрЗаменить(Строка, Символы.НПП, "");
		Строка = СтрЗаменить(Строка, "	", "");
		ТД.ЗаменитьСтроку(Сч, Строка);
	КонецЦикла;
	ТД.Записать(ФайлXML);
	Возврат ТД.ПолучитьТекст();
КонецФункции
// +бит.
Функция ПолучитьПродуктыСОбязательнойПередачейАдреса()
	
	КодПродукта = Новый Массив;
	КодПродукта.Добавить("68"); // ВИЧ
	КодПродукта.Добавить("73"); // гепатит В 
	КодПродукта.Добавить("79"); // гепатит С 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	invПродукт.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Продукт
		|ИЗ
		|	Справочник.invПродукт КАК invПродукт
		|ГДЕ
		|	invПродукт.КодПродукта В(&КодПродукта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
		|ГДЕ
		|	InvСопоставлениеПродуктовИНоменклатуры.Продукт В
		|			(ВЫБРАТЬ
		|				Продукт.Ссылка
		|			ИЗ
		|				Продукт)";
	
	Запрос.УстановитьПараметр("КодПродукта", КодПродукта);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");

КонецФункции
// -бит.
Функция ВернутьПапку(ИмяПапки, ПутьКПапке)
	ОбщаяПапкаВыгрузки = ПутьКПапке;
	КаталогНаДиске = Новый Файл(?(Прав(ОбщаяПапкаВыгрузки,1)="\",Сред(ОбщаяПапкаВыгрузки,1,СтрДлина(ОбщаяПапкаВыгрузки)-1),ОбщаяПапкаВыгрузки) + "\" + ИмяПапки);
	Если КаталогНаДиске.Существует() Тогда
		ИмяКаталогаСущности = КаталогНаДиске.ПолноеИмя;
	Иначе
		Попытка
			СоздатьКаталог(КаталогНаДиске.ПолноеИмя);
			ИмяКаталогаСущности = КаталогНаДиске.ПолноеИмя;
		Исключение
			ИмяКаталогаСущности = "";
		КонецПопытки
	КонецЕсли;
	Возврат ИмяКаталогаСущности;
КонецФункции

Функция ВернутьСоответствиеПродуктаНоменклатуре(ДействиеНадАнализамиСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияНадАнализамиИсследования.Номенклатура КАК Номенклатура,
		|	InvСопоставлениеПродуктовИНоменклатуры.Продукт КАК Продукт
		|ИЗ
		|	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
		|		ПО ДействияНадАнализамиИсследования.Номенклатура = InvСопоставлениеПродуктовИНоменклатуры.Номенклатура
		|ГДЕ
		|	ДействияНадАнализамиИсследования.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДействиеНадАнализамиСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ВозвратРезультат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ВозвратРезультат.Вставить(Выборка.Номенклатура,Выборка.Продукт);
	КонецЦикла;
	
	Возврат ВозвратРезультат;
			
КонецФункции

Функция ОбработатьОтветСервиса(ФайлОтвета)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОтвета);
	Фабрика = ФабрикаXDTO;
	ВозвращаемыеЗначенияТип = Фабрика.Тип("http://Invitro.ESB.Schemes.OperationsResponse","Successful");
	ВозвращаемыеЗначения = Фабрика.ПрочитатьXML(ЧтениеXML,ВозвращаемыеЗначенияТип);
	СтруктураОтветаШины = ПреобразоватьОбъектXDTOвСтруктуру(ВозвращаемыеЗначения);
	Возврат СтруктураОтветаШины
КонецФункции

Функция ПреобразоватьОбъектXDTOвСтруктуру(ОбъектXDTO)
	Перем ВозвращаемоеЗнач;
	Если ОбъектXDTO = Неопределено Тогда
		ВозвращаемоеЗнач = Неопределено;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ЗначениеXDTO") Тогда
		ВозвращаемоеЗнач = ОбъектXDTO.Значение;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ВозвращаемоеЗнач = Новый Структура;
		Для каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
			ВозвращаемоеЗнач.Вставить(СвойствоXDTO.Имя); 
			Попытка // Свойство - списокXDTO
				СписокXDTO = ОбъектXDTO.ПолучитьСписок(СвойствоXDTO);
				КоличествоСписка = СписокXDTO.Количество();
				
				МассивЗначений = Новый Массив;
				Для Сч = 0 По КоличествоСписка - 1 Цикл
					МассивЗначений.Добавить(ПреобразоватьОбъектXDTOвСтруктуру(СписокXDTO.ПолучитьXDTO(Сч)));
				КонецЦикла;
				
				ВозвращаемоеЗнач[СвойствоXDTO.Имя] = МассивЗначений;
			Исключение // Свойство - объектXDTO/значениеXDTO
				ВозвращаемоеЗнач[СвойствоXDTO.Имя] = ПреобразоватьОбъектXDTOвСтруктуру(ОбъектXDTO.ПолучитьXDTO(СвойствоXDTO));
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗнач;
КонецФункции

Функция КонтейнерыЗаявки(invЗаявка) Экспорт
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(invЗаявка.Контейнеры.Выгрузить());
	
КонецФункции

Процедура СоздатьЗаказОписьИОтправитьВоВнешнююЛабораторию(invЗаявкаНаИсследованиеСсылка, ДействиеНадАнализамиСсылка)
	
	// Создание заказа.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛабораторныеИсследованияСрезПоследних.Период КАК Период,
	|	ЛабораторныеИсследованияСрезПоследних.Регистратор КАК Регистратор,
	|	ЛабораторныеИсследованияСрезПоследних.ИД КАК ИД,
	|	ЛабораторныеИсследованияСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	ЛабораторныеИсследованияСрезПоследних.КлиникаИсходная КАК КлиникаИсходная,
	|	ЛабораторныеИсследованияСрезПоследних.Местонахождение КАК Местонахождение,
	|	ЛабораторныеИсследованияСрезПоследних.Клиент КАК Клиент,
	|	ЛабораторныеИсследованияСрезПоследних.Статус КАК Статус,
	|	ЛабораторныеИсследованияСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЛабораторныеИсследованияСрезПоследних.Лаборатория КАК Лаборатория,
	|	ЛабораторныеИсследованияСрезПоследних.Анонимно КАК Анонимно,
	|	ДействияНадАнализамиКонтейнеры.КодПробы КАК КодПробы,
	|	ЛабораторныеИсследованияСрезПоследних.Лаборатория.ВнешняяЛаборатория КАК ВидЛаборатории
	|ИЗ
	|	РегистрСведений.ЛабораторныеИсследования.СрезПоследних(
	|			,
	|			Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияИсследований.Забран)
	|				И НЕ ИД В
	|						(ВЫБРАТЬ
	|							Заказ.ИД
	|						ИЗ
	|							Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК Заказ
	|						ГДЕ
	|							НЕ Заказ.Ссылка.ПометкаУдаления)) КАК ЛабораторныеИсследованияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
	|		ПО ЛабораторныеИсследованияСрезПоследних.ИД = ДействияНадАнализамиКонтейнеры.ИдИсследования
	|ГДЕ
	|	ЛабораторныеИсследованияСрезПоследних.Лаборатория.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Invitro)
	|	И ЛабораторныеИсследованияСрезПоследних.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Лаборатория,
	|	Клиент,
	|	Анонимно
	|ИТОГИ ПО
	|	Лаборатория";
	
	Запрос.УстановитьПараметр("Ссылка", ДействиеНадАнализамиСсылка);	
	ИсследованияПоЛабораториям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ИсследованияПоЛабораториям.Следующий() Цикл
		
		ДанныеДляЗаявок = Новый Массив;
		
		ТекСтруктура = Новый Структура;
		ТекИследования = Новый Массив;

		ВыборкаДЗ = ИсследованияПоЛабораториям.Выбрать();
		
		Пока ВыборкаДЗ.Следующий() Цикл
						
			Если Не ТекСтруктура.Количество() = 0 Тогда
				ТекСтруктура.Вставить("Исследования",ТекИследования);
				ДанныеДляЗаявок.Добавить(ТекСтруктура);
				ТекСтруктура = Новый Структура;
			КонецЕсли;
			
			ТекИследования 	= Новый Массив;
			ТекКлиент 		= ВыборкаДЗ.Клиент;
			ТекАнонимность 	= ВыборкаДЗ.Анонимно;
			
			ТекСтруктура.Вставить("Клиент", 	ТекКлиент);
			ТекСтруктура.Вставить("Анонимно", 	ТекАнонимность);
			ТекСтруктура.Вставить("Филиал", 	ВыборкаДЗ.КлиникаИсходная);
			ТекСтруктура.Вставить("Лаборатория",ВыборкаДЗ.Лаборатория);
			
			ТекИследования.Добавить(Новый Структура("Номенклатура, ИД, КодПробы", ВыборкаДЗ.Номенклатура, ВыборкаДЗ.ИД, ВыборкаДЗ.КодПробы));
			
		КонецЦикла;
		
		Если Не ТекСтруктура.Количество() = 0 Тогда
			ТекСтруктура.Вставить("Исследования",ТекИследования);
			ДанныеДляЗаявок.Добавить(ТекСтруктура);
		КонецЕсли;
		ИНЗ = invЗаявкаНаИсследованиеСсылка.СписокИНЗ[0].ИНЗ;
		Док = Документы.ЗаказВоВнешнююЛабораторию.СоздатьДокумент();
		Для Каждого СтрДанные Из ДанныеДляЗаявок Цикл
			Док[ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов()] = СтрДанные.Филиал;
			Док.Клиент 		= СтрДанные.Клиент;
			Док.Анонимно 	= СтрДанные.Анонимно;
			Док.Лаборатория = СтрДанные.Лаборатория;
			Док.Состояние 	= Перечисления.СостоянияЗаказовЛаборатории.Создан;
			Док.Дата 		= ТекущаяДатаСеанса();
			Для Каждого СтрИсследование Из СтрДанные.Исследования Цикл
				Стр = Док.Исследования.Добавить();
				Стр.Номенклатура	= СтрИсследование.Номенклатура;
				Стр.ИД				= СтрИсследование.ИД;
				Стр.КодПробы 		= ИНЗ;
				Стр.Состояние		= Перечисления.СостоянияЗаказовЛаборатории.Создан;
			КонецЦикла;
		КонецЦикла;	
		Док.Записать();
	КонецЦикла;
	
	// Отправка заказа.
	Если Док <> Неопределено Тогда
		Опись = ЛабораторияСервер.СоздатьОписьДляНеотправленных(Док.Ссылка);
		ЛабораторияСервер.ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(Опись[0]);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заказы отправлены успешно!");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявку не удалось отправить!");
	КонецЕсли

КонецПроцедуры

#КонецОбласти 

#Область Прочее

Функция ВернутьМсПодразделенийСНастройками() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	invНастройкиПодразделения.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.invНастройкиПодразделения КАК invНастройкиПодразделения";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
КонецФункции

Функция ВернутьЗаписьНастроекПодразделения(Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	invНастройкиПодразделения.*
	|ИЗ
	|	РегистрСведений.invНастройкиПодразделения КАК invНастройкиПодразделения
	|ГДЕ
	|	invНастройкиПодразделения.Подразделение = &Подразделение"
	;
	
	ТаблицаНастройки = Запрос.Выполнить().Выгрузить();
		
	НастройкиПодразделения = Новый Структура;
	
	Если ТаблицаНастройки.Количество() <> 0 Тогда
		СтрокаНастройки = ТаблицаНастройки[0];
	Иначе
		СтрокаНастройки = Неопределено;
	КонецЕсли;
	
	Для Каждого ПолеНастройки Из ТаблицаНастройки.Колонки Цикл
		НастройкиПодразделения.Вставить(ПолеНастройки.Имя, ?(СтрокаНастройки <> Неопределено, 
			СтрокаНастройки[ПолеНастройки.Имя], Неопределено));
	КонецЦикла;
	
	Возврат НастройкиПодразделения;  
	
КонецФункции

Процедура СопоставитьДляСтарыхГруппНовыеГУИД() 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура КАК Номенклатура,
	|	InvСопоставлениеПродуктовИНоменклатуры.Продукт КАК Продукт
	|ПОМЕСТИТЬ СуществующаяНоменклатура
	|ИЗ
	|	РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|ГДЕ
	|	InvСопоставлениеПродуктовИНоменклатуры.Продукт.Ссылка ЕСТЬ NULL
	|	И InvСопоставлениеПродуктовИНоменклатуры.Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	invПродукт.Ссылка КАК Ссылка,
	|	invПродукт.Родитель.Ссылка КАК РодительСсылка
	|ПОМЕСТИТЬ ПродуктыГруппы
	|ИЗ
	|	Справочник.invПродукт КАК invПродукт
	|ГДЕ
	|	invПродукт.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Родитель КАК Родитель
	|ПОМЕСТИТЬ НоменГруппы
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				СуществующаяНоменклатура.Номенклатура
	|			ИЗ
	|				СуществующаяНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродуктыГруппы.Ссылка КАК Продукт,
	|	ПродуктыГруппы.РодительСсылка КАК РодительПродукт,
	|	НоменГруппы.Ссылка КАК Номенклатура,
	|	НоменГруппы.Родитель КАК Родитель
	|ПОМЕСТИТЬ Подгруппы
	|ИЗ
	|	ПродуктыГруппы КАК ПродуктыГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменГруппы КАК НоменГруппы
	|		ПО ПродуктыГруппы.Ссылка.Наименование = НоменГруппы.Ссылка.Наименование
	|			И ПродуктыГруппы.Ссылка.Родитель.Наименование = НоменГруппы.Ссылка.Родитель.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродуктыГруппы.Ссылка КАК Продукт,
	|	ПродуктыГруппы.РодительСсылка КАК РодительПродукт,
	|	НоменГруппы.Ссылка КАК Номенклатура,
	|	НоменГруппы.Родитель КАК Родитель
	|ПОМЕСТИТЬ Группы
	|ИЗ
	|	ПродуктыГруппы КАК ПродуктыГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменГруппы КАК НоменГруппы
	|		ПО ПродуктыГруппы.Ссылка.Наименование = НоменГруппы.Ссылка.Наименование
	|ГДЕ
	|	НЕ НоменГруппы.Ссылка В
	|				(ВЫБРАТЬ
	|					Подгруппы.Номенклатура
	|				ИЗ
	|					Подгруппы)
	|	И ПродуктыГруппы.РодительСсылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группы.Продукт КАК Продукт,
	|	Группы.Номенклатура КАК Номенклатура
	|ИЗ
	|	Группы КАК Группы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подгруппы.Продукт,
	|	Подгруппы.Номенклатура
	|ИЗ
	|	Подгруппы КАК Подгруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуществующаяНоменклатура.Продукт КАК Продукт
	|ИЗ
	|	СуществующаяНоменклатура КАК СуществующаяНоменклатура";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗапроса = РезультатЗапроса[5].Выбрать();

	Пока ВыборкаЗапроса.Следующий() Цикл
		НЗРегистр = РегистрыСведений.InvСопоставлениеПродуктовИНоменклатуры.СоздатьМенеджерЗаписи();
		НЗРегистр.Номенклатура = ВыборкаЗапроса.Номенклатура;
		НЗРегистр.Продукт = ВыборкаЗапроса.Продукт;
		НЗРегистр.Записать(Истина);	
	КонецЦикла; 
	
	ВыборкаЗапроса = РезультатЗапроса[6].Выбрать();

	Пока ВыборкаЗапроса.Следующий() Цикл
		НЗРегистр = РегистрыСведений.InvСопоставлениеПродуктовИНоменклатуры.СоздатьМенеджерЗаписи();
		НЗРегистр.Продукт = ВыборкаЗапроса.Продукт;
		НЗРегистр.Прочитать();
		НЗРегистр.Удалить();	
	КонецЦикла; 

  
КонецПроцедуры

Функция ОбновитьЦеныПродуктов(Подразделение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Подразделение = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодразделения.Прейскурант
		|ИЗ
		|	РегистрСведений.invНастройкиПодразделения КАК НастройкиПодразделения
		|ГДЕ
		|	НастройкиПодразделения.Токен <> """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Прейскурант = Выборка.Прейскурант;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		НастройкиПодразделения = ВернутьЗаписьНастроекПодразделения(Подразделение);
		Прейскурант = НастройкиПодразделения.Прейскурант;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Прейскурант) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните прейскурант в настройках выбранного подразделения!'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Прейскурант", Прейскурант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура,
	|	ЕСТЬNULL(invЦеныПродуктов.Цена, 0) КАК ЦенаИнвитро
	|ПОМЕСТИТЬ втЦеныИнвитро
	|ИЗ
	|	РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.invЦеныПродуктов КАК invЦеныПродуктов
	|		ПО InvСопоставлениеПродуктовИНоменклатуры.Продукт = invЦеныПродуктов.Продукт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InvСопоставлениеПродуктовИНоменклатуры.Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаМИС
	|ПОМЕСТИТЬ втЦеныМИС
	|ИЗ
	|	РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Прейскурант = &Прейскурант) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО InvСопоставлениеПродуктовИНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныИнвитро.Номенклатура,
	|	втЦеныИнвитро.ЦенаИнвитро КАК Цена
	|ИЗ
	|	втЦеныИнвитро КАК втЦеныИнвитро
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныМИС КАК втЦеныМИС
	|		ПО втЦеныИнвитро.Номенклатура = втЦеныМИС.Номенклатура
	|ГДЕ
	|	втЦеныИнвитро.ЦенаИнвитро <> втЦеныМИС.ЦенаМИС";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФилиал = ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов();
	
	ДокументУстановкиЦен = Документы.УстановкаЦен.СоздатьДокумент();
	ДокументУстановкиЦен.Дата = ТекущаяДатаСеанса();
	ДокументУстановкиЦен.ВидОперации = Перечисления.ВидыОперацийУстановкиЦен.ЦеныПрейскурантов;
	ДокументУстановкиЦен.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументУстановкиЦен.Прейскурант = Прейскурант;
	ДокументУстановкиЦен[ИмяФилиал] = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Подразделение, "Филиал");
	ДокументУстановкиЦен.Номенклатура.Загрузить(Результат.Выгрузить());
	ДокументУстановкиЦен.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокументУстановкиЦен.Ссылка;
	
КонецФункции

Функция ПолучитьИНЗ(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ПоляИмениФайла = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Файл.ИмяБезРасширения, "_");
	Если ПоляИмениФайла.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе 
		Возврат ПоляИмениФайла[0];
	КонецЕсли;

КонецФункции

// Получает сроки выполнения для номенклатуры исследований из загруженной справочной информации по лаборатории.
//
// Параметры:
//  СрокиВыполненияИсследований - ТаблицаЗначений:
//  	* Лаборатория - СправочникСсылка.Лаборатории
//  	* Исследование - СправочникСсылка.Номенклатура
//  	* СрокВыполнения - Строка
//  ИсследованияЛаборатории - ТаблицаЗначений:
//  	* НомерСтроки - Число
//  	* Номенклатура - СправочникСсылка.Номенклатура
//  	* Лаборатория - СправочникСсылка.Лаборатории
//
Процедура ПолучитьСрокиВыполненияИсследований(СрокиВыполненияИсследований, ИсследованияЛаборатории) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ИсследованияЛаборатории);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ ИсследованияЛаборатории
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсследованияЛаборатории.НомерСтроки КАК НомерСтроки,
	|	ИсследованияЛаборатории.Лаборатория КАК Лаборатория,
	|	ИсследованияЛаборатории.Номенклатура КАК Исследование,
	|	InvСопоставлениеПродуктовИНоменклатуры.Продукт.СрокВыполнения КАК СрокВыполнения
	|ИЗ
	|	ИсследованияЛаборатории КАК ИсследованияЛаборатории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.InvСопоставлениеПродуктовИНоменклатуры КАК InvСопоставлениеПродуктовИНоменклатуры
	|		ПО ИсследованияЛаборатории.Номенклатура = InvСопоставлениеПродуктовИНоменклатуры.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрСрокиВыполненияИсследований = СрокиВыполненияИсследований.Добавить();
		СтрСрокиВыполненияИсследований.Лаборатория = Строка(Выборка.Лаборатория);
		СтрСрокиВыполненияИсследований.Исследование = Строка(Выборка.Исследование);
		СрокВыполнения = ?(Выборка.СрокВыполнения <> 0, Выборка.СрокВыполнения, НСтр("ru='нет данных'"));
		СтрСрокиВыполненияИсследований.СрокВыполнения = Строка(СрокВыполнения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти
