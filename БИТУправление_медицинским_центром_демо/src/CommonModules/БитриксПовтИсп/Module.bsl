#Область ПрограммныйИнтерфейс

// Использование обмена с Битрикс24.
// 
// Возвращаемое значение:
//  Булево. 
//
Функция ИспользоватьОбмен() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.Б24_ИспользоватьОбмен.Получить();
	
КонецФункции

// Возвращает код режима обмена с Битрикс24.
//	1 - прием обращений, 2 - отправка обращений и данных сделок, 3 - двусторонний обмен.
// 
// Возвращаемое значение:
//  Число. 
//
Функция РежимОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.Б24_РежимОбмена.Получить();
	
КонецФункции

#Область НастройкиИнтеграции

Функция СписокНастроек() Экспорт
	
	СписокНастроек = Новый Соответствие;
	
	НЗ = РегистрыСведений.Б24_Настройки.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	
	Для каждого Запись Из НЗ Цикл
		СписокНастроек.Вставить(Запись.Настройка, Запись.Значение);
	КонецЦикла;
	
	Возврат СписокНастроек;
	
КонецФункции

Функция ЗначениеНастройкиИДПользователяВебхука() Экспорт
	
	ИДПользователяВебхука = ПолучитьНастройку(Перечисления.Б24_Настройки.ИДПользователяВебхука);
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Строка(ИДПользователяВебхука));
	
КонецФункции

Функция ЗначениеНастройкиКодАвторизации() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.КодАвторизации);
	
КонецФункции

Функция ЗначениеНастройкиКодВебхука() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.КодВебхука);
	
КонецФункции

Функция ЗначениеНастройкиНаименованиеБитрикс24() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.НаименованиеБитрикс24);
	
КонецФункции

Функция ЗначениеНастройкиРежимСозданияСделки() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.РежимСозданияСделки);
	
КонецФункции

Функция ЗначениеНастройкиРежимПолученияЛида() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.РежимПолученияЛида);
	
КонецФункции

Функция ЗначениеНастройкиГруппаКлиентовИзБитрикс24() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.ГруппаКлиентовИзБитрикс24);
	
КонецФункции

Функция ЗначениеНастройкиНастройкаОбменаССайтом() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.НастройкаОбменаССайтом);
	
КонецФункции

// Оказание услуг создаёт сделку
Функция ЗначениеНастройкиРежим1() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.Режим1) = Истина;
	
КонецФункции

// Заявка создаёт сделку.
// Если Истина, то режим3 всегда Ложь, а режим1 всегда Истина
Функция ЗначениеНастройкиРежим2() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.Режим2) = Истина;
	
КонецФункции

// Состояние заявки меняет статус лида
Функция ЗначениеНастройкиРежим3() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.Режим3) = Истина;
	
КонецФункции

// Не отправлять сделки
Функция ЗначениеНастройкиРежим4() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.Режим4) = Истина;
	
КонецФункции

Функция ЗначениеНастройкиПериодАктуальностиЗаявки() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.ПериодАктуальностиЗаявки);
	
КонецФункции

Функция ЗначениеНастройкиШаблонБПКонвертацииЛида() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.ШаблонБПКонвертацииЛида);
	
КонецФункции

Функция ЗначениеНастройкиШаблонБПСозданияСделкиПоКлиенту() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.ШаблонБПСозданияСделкиПоКлиенту);
	
КонецФункции

Функция ЗначениеНастройкиШаблонБПИзменениеОтветственного() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.ШаблонБПИзменениеОтветственного);
	
КонецФункции

Функция ЗначениеНастройкиНезащищенноеСоединение() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.НезащищенноеСоединение);
	
КонецФункции

Функция ЗначениеНастройкиОтправлятьЗвонки() Экспорт
	
	Возврат ПолучитьНастройку(Перечисления.Б24_Настройки.ОтправлятьЗвонки);
	
КонецФункции

#КонецОбласти

#Область НастройкиСтатусов

Функция СписокСтатусов() Экспорт
	
	СписокСтатусов = Новый Соответствие;
	
	НЗ = РегистрыСведений.Б24_Статусы.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	
	Для каждого Запись Из НЗ Цикл
		СписокСтатусов.Вставить(Запись.Статус, Запись.ИдентификаторСтатуса);
	КонецЦикла;
	
	Возврат СписокСтатусов;
	
КонецФункции

#Область Лиды

Функция ИдСтатусаЛидКЗагрузке() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.ЛидКЗагрузке);
	
КонецФункции

Функция ИдСтатусаЛидЗаписанНаПрием() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.ЛидЗаписанНаПрием);
	
КонецФункции

Функция ИдСтатусаЛидУспешный() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.ЛидУспешный);
	
КонецФункции

Функция ИдСтатусаЛидОтказ() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.ЛидОтказ);
	
КонецФункции

Функция ИдСтатусаЛидПросрочен() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.ЛидПросрочен);
	
КонецФункции

Функция ИдСтатусаЛидПриВыгрузке() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.ЛидПриВыгрузке);
	
КонецФункции
	
#КонецОбласти

#Область Сделки

Функция ИдСтатусаСделкаЗавершена() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.СделкаЗавершена);
	
КонецФункции

Функция ИдСтатусаСделкаНовая() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.СделкаНовая);
	
КонецФункции

Функция ИдСтатусаСделкаОтказ() Экспорт
	
	Возврат ПолучитьИдСтатуса(Перечисления.Б24_Статусы.СделкаОтказ);
	
КонецФункции

#КонецОбласти

Функция РежимЗагрузкиКачественногоЛида() Экспорт
	
	Возврат ИдСтатусаЛидКЗагрузке() = "CONVERTED";
	
КонецФункции

#КонецОбласти

#Область НастройкиПользовательскихПолей

Функция ИмяПользовательскогоПоляСделкаУИД() Экспорт
	
	Возврат ПолучитьИмяПользовательскогоПоля(Перечисления.Б24_ПользовательскиеПоля.СделкаУИД);
	
КонецФункции

Функция ИмяПользовательскогоПоляСделкаДатаСоздания() Экспорт
	
	Возврат ПолучитьИмяПользовательскогоПоля(Перечисления.Б24_ПользовательскиеПоля.СделкаДатаСоздания);
	
КонецФункции

Функция ИмяПользовательскогоПоляЛидДатаСоздания() Экспорт
	
	Возврат ПолучитьИмяПользовательскогоПоля(Перечисления.Б24_ПользовательскиеПоля.ЛидДатаСоздания);
	
КонецФункции

Функция ИмяПользовательскогоПоляСделкаСписокНоменклатур() Экспорт
	
	Возврат ПолучитьИмяПользовательскогоПоля(Перечисления.Б24_ПользовательскиеПоля.СделкаСписокНоменклатур);
	
КонецФункции

#КонецОбласти

Функция ОбязательныеНастройкиЗаполнены() Экспорт
	
	Возврат ЗначениеЗаполнено(ЗначениеНастройкиНаименованиеБитрикс24())
		И ЗначениеЗаполнено(ЗначениеНастройкиКодВебхука())
		И ЗначениеЗаполнено(ЗначениеНастройкиИДПользователяВебхука());
	
КонецФункции

Функция ИдентификаторПользователя(Пользователь) Экспорт
	
	Возврат Битрикс.ИдентификаторОбъекта(Пользователь, Перечисления.Б24_Сущности.Пользователь);
	
КонецФункции

Функция ПользователиПоИдентификатору(ИдентификаторБ24) Экспорт
	
	Возврат Битрикс.ОбъектыПоИдентификатору(ИдентификаторБ24, Перечисления.Б24_Сущности.Пользователь, Ложь);
	
КонецФункции

Функция ПолучитьСоединениеСБ24() Экспорт
	
	НаименованияБ24 = ЗначениеНастройкиНаименованиеБитрикс24();
	НезащищенноеСоединение = ЗначениеНастройкиНезащищенноеСоединение();
	
	Если НезащищенноеСоединение = Неопределено Тогда
		НезащищенноеСоединение = Ложь;
		ЗаписатьНастройкуБ24(Перечисления.Б24_Настройки.НезащищенноеСоединение, Ложь);
	КонецЕсли;
	
	Если НезащищенноеСоединение Тогда
		Порт = 80;
		ЗащищенноеСоединение = Неопределено;
	Иначе
		Порт = 443;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Протокол = ?(НезащищенноеСоединение, "HTTP", "HTTPS"); 
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Протокол);
	
	Для Каждого НаименованиеБ24 Из СтрРазделить(НаименованияБ24, ";", Ложь) Цикл
		Попытка
			Соединение = Новый HTTPСоединение(СокрЛП(НаименованиеБ24), Порт, , , ИнтернетПрокси, 30, ЗащищенноеСоединение);
			Если Соединение.Получить(Битрикс.СформироватьЗапрос("methods")).КодСостояния = 200 Тогда
				Возврат Соединение;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНастройку(Настройка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокНастроек = СписокНастроек();
	Возврат СписокНастроек.Получить(Настройка);
	
КонецФункции

Функция ПолучитьИдСтатуса(Статус)
	
	МЗ = РегистрыСведений.Б24_Статусы.СоздатьМенеджерЗаписи();
	МЗ.Статус = Статус;
	МЗ.Прочитать();
	Если МЗ.Выбран() И ЗначениеЗаполнено(МЗ.ИдентификаторСтатуса) Тогда
		Возврат МЗ.ИдентификаторСтатуса;
	КонецЕсли;
	
	Возврат ПолучитьИдСтатусаПоУмолчанию(Статус);
	
КонецФункции

Функция ПолучитьИдСтатусаПоУмолчанию(Статус)
	
	Статусы = Новый Соответствие;
	
	Если Не Статус = Перечисления.Б24_Статусы.ЛидКЗагрузке Тогда
		Статусы.Вставить(Перечисления.Б24_Статусы.ЛидЗаписанНаПрием, ИдСтатусаЛидКЗагрузке());
	КонецЕсли;
	
	Статусы.Вставить(Перечисления.Б24_Статусы.ЛидУспешный,		"CONVERTED");
	Статусы.Вставить(Перечисления.Б24_Статусы.ЛидОтказ,			"JUNK");
	Статусы.Вставить(Перечисления.Б24_Статусы.ЛидПросрочен,		"JUNK");
	Статусы.Вставить(Перечисления.Б24_Статусы.СделкаНовая,		"NEW");
	Статусы.Вставить(Перечисления.Б24_Статусы.СделкаЗавершена,	"WON");
	Статусы.Вставить(Перечисления.Б24_Статусы.СделкаОтказ,		"LOSE");
	Статусы.Вставить(Перечисления.Б24_Статусы.ЛидПриВыгрузке,	"NEW");
	
	Возврат Статусы.Получить(Статус);
	
КонецФункции

Функция ПолучитьИмяПользовательскогоПоля(ПользовательскоеПоле)
	
	МЗ = РегистрыСведений.Б24_ПользовательскиеПоля.СоздатьМенеджерЗаписи();
	МЗ.ПользовательскоеПоле = ПользовательскоеПоле;
	МЗ.Прочитать();
	Если МЗ.Выбран() И ЗначениеЗаполнено(МЗ.ИмяПоля) Тогда
		Возврат МЗ.ИмяПоля;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаписатьНастройкуБ24(Настройка, Значение)
	
	МЗ = РегистрыСведений.Б24_Настройки.СоздатьМенеджерЗаписи();
	МЗ.Настройка = Настройка;
	МЗ.Значение = Значение;
	МЗ.Записать();
	
КонецПроцедуры

#КонецОбласти