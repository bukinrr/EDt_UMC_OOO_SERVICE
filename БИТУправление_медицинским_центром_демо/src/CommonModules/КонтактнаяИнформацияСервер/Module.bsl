#Область ПрограммныйИнтерфейс

// Получить строку КИ по виду
//
// Параметры:
//  Вид	 - СправочникСсылка.ВидыКонтактнойИнформации - вид КИ.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьСтрокуФормыПоВиду(Вид) Экспорт 
	
	Если ЗначениеЗаполнено(Вид) Тогда
		Если Вид.ПолучитьОбъект().Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Возврат "Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаЗаписиТелефонаУпр";
		ИначеЕсли Вид.ПолучитьОбъект().Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Возврат "Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаЗаписиАдресаУпр";
		ИначеЕсли Вид.ПолучитьОбъект().Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Возврат "Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаЗаписиАдресаЭПУпр";
		ИначеЕсли Вид.ПолучитьОбъект().Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Возврат "Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаЗаписиВебСтраницыУпр";
		ИначеЕсли Вид.ПолучитьОбъект().Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			Возврат "Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаЗаписиНомераICQУпр";
		ИначеЕсли Вид.ПолучитьОбъект().Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Возврат "Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаЗаписиПрочееУпр";
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

// Удалить запись КИ
//
// Параметры:
//  Вид	 - СправочникСсылка.ВидыКонтактнойИнформации - вид КИ.
//  Ссылка	 - ЛюбаяСсылка	 - владелец.
//
Процедура УдалитьЗаписьКИ(Вид, Ссылка) Экспорт 
	
	Если ЗначениеЗаполнено(Вид) И ЗначениеЗаполнено(Ссылка) Тогда
		
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Ссылка);
		НаборЗаписей.Отбор.Вид.Установить(Вид);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Получить перечисление видов КИСервер
// 
// Возвращаемое значение:
//  Соответствие.
//
Функция ПолучитьПеречислениеВидовКИСервер() Экспорт
	соот = новый Соответствие;
	соот.Вставить("АдресЭлектроннойПочты",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты); 
	соот.Вставить("ВебСтраница",Перечисления.ТипыКонтактнойИнформации.ВебСтраница); 
	соот.Вставить("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес); 
	соот.Вставить("Телефон",Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Возврат соот;
КонецФункции	

// Процедура проверяет, есть ли записи по умолчанию данного типа и если нет ни одной, тогда свойство ПоУмолчанию
//  устанавливается у первой записи данного типа.
//
// Параметры:
//  НаборЗаписейКонтактнойИнформации - РегистрСведенийНаборЗаписей.КонтактнаяИнформация	 - набор записей, который
//  	проверяется на предмет наличия записи по умолчанию;
//  ТипКонтактнойИнформации			 - ПеречислениеСсылка.ТипыКонтактнойИнформации		 - тип контактной информации, записи
//  		которого проверяются на предмет наличия записей по умолчанию. Если равен неопределено, перебираются все типы.
//  Записывать						 - Булево												 - записывать ли сразу.
//
Процедура ПроверитьНаличиеЗаписиПоУмолчанию(НаборЗаписейКонтактнойИнформации, ТипКонтактнойИнформации = Неопределено, Записывать = Ложь) Экспорт	// если тип заранее неизвестен, то переберём все возможные типы контактной информации
	Если ТипКонтактнойИнформации = Неопределено Тогда
		Для Каждого ОчереднойТипКонтактнойИнформации Из Перечисления.ТипыКонтактнойИнформации Цикл
			ПроверитьНаличиеЗаписиПоУмолчанию(НаборЗаписейКонтактнойИнформации, ОчереднойТипКонтактнойИнформации, Записывать);
		КонецЦикла;
	Иначе	
		ПерваяЗаписьИскомогоТипа = Неопределено;
		НайденаЗаписьПоУмолчанию = Ложь;
		Для Каждого ЗаписьКонтактнойИнформации Из НаборЗаписейКонтактнойИнформации Цикл
			Если ЗаписьКонтактнойИнформации.Тип = ТипКонтактнойИнформации Тогда
				Если ЗаписьКонтактнойИнформации.ЗначениеПоУмолчанию Тогда
					НайденаЗаписьПоУмолчанию = Истина;
					Прервать;
				Иначе
					Если ПерваяЗаписьИскомогоТипа = Неопределено Тогда
						ПерваяЗаписьИскомогоТипа = ЗаписьКонтактнойИнформации;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если (Не НайденаЗаписьПоУмолчанию) И (Не ПерваяЗаписьИскомогоТипа = Неопределено) Тогда
			ПерваяЗаписьИскомогоТипа.ЗначениеПоУмолчанию = Истина;
			Если Записывать Тогда
				НаборЗаписейКонтактнойИнформации.Записать(Истина);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры// киПроверитьНаличиеЗаписиПоУмолчанию()	

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Возвращаемое значение:
// Струтктура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений.
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
	
КонецФункции

// Функция ищет требуемый адресный элемент по названию и типу
//  и возвращает первый найденный. В качестве дополнения может
//  быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - Строка	 - название адресного элемента ( с сокращением)
//  ТипЭлемента		 - Строка	 - тип искомого адресного элемента
//  ЭлементРодитель	 - Строка	 - элемент "родитель"
// 
// Возвращаемое значение:
//  Структура - Найденный элемент справочника Адресный классификатор или пустая ссылка в случае неудачи.
//
Функция ПолучитьАдресныйЭлемент(знач НазваниеЭлемента, ТипЭлемента, ЭлементРодитель) Экспорт	

	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	// Смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению.
	АдресноеСокращение = "";
	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если ЭлементРодитель.Код > 0 Тогда // проверка на соответствие подчинению родителю
		
		Если ЭлементРодитель.ТипАдресногоЭлемента <= 5 Тогда
			
			Если ЭлементРодитель.КодАдресногоОбъектаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде)";
				Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", ЭлементРодитель.КодАдресногоОбъектаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодРайонаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", ЭлементРодитель.КодРайонаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодГородаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", ЭлементРодитель.КодГородаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодНаселенногоПунктаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", ЭлементРодитель.КодНаселенногоПунктаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодУлицыВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", ЭлементРодитель.КодУлицыВКоде);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.Код КАК Код,
	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
	|	АдресныйКлассификатор.Наименование КАК Наименование,
	|	АдресныйКлассификатор.Сокращение КАК Сокращение,
	|	АдресныйКлассификатор.Индекс КАК Индекс,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
	|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
	|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
	|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
	|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
	|	И АдресныйКлассификатор.Наименование = &Наименование " +
	ОграничениеПоКоду;
	
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РезультирующаяСтруктура = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			РезультирующаяСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		Возврат РезультирующаяСтруктура;
		
	КонецЕсли;
	
КонецФункции

// По полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
// 	СтрокаЭлемента - Строка - строка элемента.
// 	АдресноеСокращение - Строка - адресное сокращение.
//
// Возвращаемое значение:
// 	Строка - имя и адресное сокращение.
//
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Пока СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Сокращение КАК Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеСокращения КАК АдресныеСокращения
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
		Возврат СтрокаЭлемента;
	Иначе
		АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
		Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
	КонецЕсли;
	
КонецФункции

// Функция возвращает список видов контактной информации, относящихся к указанному типу
//
// Параметры:
//  Вид	 - СправочникСсылка.ВидыКонтактнойИнформации - вид КИ.
// 
// Возвращаемое значение:
//  СписокЗначений - перечень видов контактной информации.
//
Функция ЗаполнитьСписокВидовКонтактнойИнформации(Вид) Экспорт
	СписокВидовКонтактнойИнформации = Новый СписокЗначений;
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Тип = &Тип";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Тип", Вид.Тип);
	СписокВидовКонтактнойИнформации.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокВидовКонтактнойИнформации;
КонецФункции// ЗаполнитьСписокВидовКонтактнойИнформации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ.

// Функция возвращает количество записей контактной информации объекта с указанным видом информации
//
// Параметры:
//  РедактируемаяЗапись		 - РегистрСведенийЗапись.КонтактнаяИнформация	 - редактируемая пользователем в форме запись контактной информации
//  ВидКонтактнойИнформации	 - СправочникСсылка.ВидыКонтактнойИнформации	 - вид записи контактной информации.
// 
// Возвращаемое значение:
//  Число.
//
Функция КоличествоЗаписейКонтактнойИнформации(РедактируемаяЗапись, ВидКонтактнойИнформации)Экспорт
	// Проверим, нет уже записи регистра по текущему объекту с данным видом КИ .
	Количество = 0;
	Если ТипЗнч(РедактируемаяЗапись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация") ИЛИ
		ТипЗнч(РедактируемаяЗапись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(РедактируемаяЗапись.Объект);
		Набор.Отбор.Вид.Установить(ВидКонтактнойИнформации);
		Набор.Прочитать();
		Количество = Набор.Количество();
	ИначеЕсли ТипЗнч(РедактируемаяЗапись) = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		Для каждого Запись Из РедактируемаяЗапись Цикл
			Если Запись.Вид = ВидКонтактнойИнформации Тогда
				Количество = 1;
				Прервать;
			КонецЕсли;	
		КонецЦикла;  
	КонецЕсли; 
	
	Возврат Количество;
КонецФункции// НайтиЗаписиКонтактнойИнформации()

// Функция возвращает структуру с набором полей записи регистра сведений
//  АдресныйКлассификатор
//
// Параметры:
//  КодЭлемента	 - Строка	 - Код адресного элемента.
// 
// Возвращаемое значение:
//  Струтктура - структуру с набором полей записи регистра сведений
//  АдресныйКлассификатор .
//
Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт
	
	ТексЗапроса = "ВЫБРАТЬ
	|	АдресныйКлассификатор.Код,
	|	АдресныйКлассификатор.КодРегионаВКоде,
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Сокращение,
	|	АдресныйКлассификатор.Индекс,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.КодРайонаВКоде,
	|	АдресныйКлассификатор.КодГородаВКоде,
	|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	|	АдресныйКлассификатор.КодУлицыВКоде
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде",
		Выборка.Код,
		Выборка.Наименование,
		Выборка.Сокращение,
		Выборка.ТипАдресногоЭлемента,
		Выборка.Индекс,
		Выборка.КодРегионаВКоде,
		Выборка.КодРайонаВКоде,
		Выборка.КодГородаВКоде,
		Выборка.КодНаселенногоПунктаВКоде,
		Выборка.КодУлицыВКоде);
		
	Иначе 
		Возврат ПолучитьПустуюСтруктуруАдреса();
		
	КонецЕсли;
	
КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры:
//  Номер				 - Строка	 - номер дома с корпусом
//  Интервал			 - Строка	 - интервал чисел (домов)
//  ТочноеСоответствие	 - Булево	 - номер дома должен точно соответствовать номеру в интервале
//  	или допускается наличие дробей и произвольных букв после номера дома
// 
// Возвращаемое значение:
//  Булево - Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит.
//
Функция ВходитВИнтервал(Знач Номер, Интервал, ТочноеСоответствие)

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		// Проверяем вхождение конкретного номера дома в интервал (отбрасывая букву "К" - означающую "корпус").
		НомерБезЛишнихСимволов = СтрЗаменить(ВРЕГ(СтрЗаменить("" + Номер, " ", "")), "К", "");
		ИнтервалБезЛишнихСимволов = СтрЗаменить(ВРЕГ(СтрЗаменить("" + Интервал, " ", "")), "К", "");
		НомерВходитВИнтервал = (НомерБезЛишнихСимволов = ИнтервалБезЛишнихСимволов);
		Если НомерВходитВИнтервал Тогда
			Возврат Истина;
		// Если номер был числом, но не найден в интервале, то этот номер действительно не входит в интервал.
		ИначеЕсли ТипЗнч(Номер) = Тип("Число") Тогда
			Возврат Ложь;
		// Если же строковый номер не найден в интервале, то попробуем отбросить то что следовало 
		// за числовой частью номер и проверить вхождение числовой части номера дома в интервал.
		Иначе
			Если ТочноеСоответствие Тогда
				Возврат Ложь;
			Иначе
				// Обрезаем то, что следует за косой чертой
				Если Найти(Номер, "\") > 0 Тогда
					Номер = Лев(Номер, Найти(Номер, "\") - 1);
				ИначеЕсли Найти(Номер, "/") > 0 Тогда
					Номер = Лев(Номер, Найти(Номер, "/") - 1);
				КонецЕсли;
				Номер = ОставитьТолькоЦифрыВСтроке(Номер, "К");
				Интервал = СтрЗаменить(Интервал, "К", "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ТочноеСоответствие Тогда
			// Обрезаются возможные значения "ДВЛД"(домовладение) и "ВЛД"(владение).
			Если Найти(Интервал, "ДВЛД") <> 0 Тогда
				Интервал = СтрЗаменить(Интервал, "ДВЛД", "");
			ИначеЕсли Найти(Интервал, "ВЛД") <> 0 Тогда
				Интервал = СтрЗаменить(Интервал, "ВЛД", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// Интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		ЛеваяЧасть = Лев(Интервал, Позиция - 1);
		ПраваяЧасть = Сред(Интервал, Позиция + 1);
		МинЗначение  = Число(ОставитьТолькоЦифрыВСтроке(ЛеваяЧасть));
		МаксЗначение = Число(ОставитьТолькоЦифрыВСтроке(ПраваяЧасть));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Интервал) Тогда
		// Случай когда интервал был равен Ч или Н
		Попали = 1;
		
	Иначе
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(ОставитьТолькоЦифрыВСтроке(Интервал)) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//  где Номер дома, это строка вида:
//  <СтрокаДом> пример: 58А, 32/1, 50А/8
//  
//  2. Номера дома и номера корпуса (строения), в виде строки:
//  <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1,
//  <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1,
//  <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1,
//  
//  3. Числа (номера дома) в заданный интервал чисел
//  При этом интервал задается строкой вида:
//  <Диапазон>[,<Диапазон>]
//  где Диапазон, это строка вида:
//  [Ч/Н]<Число>[-<Число>]
//  Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//  Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры:
//  Номер				 - Строка	 - номер дома с корпусом
//  Интервал			 - Строка	 - интервал чисел (домов)
//  ТочноеСоответствие	 - Булево	 - номер дома должен точно соответствовать номеру в интервале
//  	или допускается наличие дробей и произвольных букв после номера дома
// 
// Возвращаемое значение:
//  Булево - Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит.
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал, ТочноеСоответствие = Ложь)
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал, ТочноеСоответствие);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1)), ТочноеСоответствие) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция оставляет в строке только цифры, отбрасывая все следующие за цифрами буквы и другие символы,
// причём если строка начинается с буквы - то считаем, что 
//
// Параметры:
// 	РазбираемаяСтрока - Строка - строка, из которой будут отбрасываться все не цифровые символы
// 	ПропускаемыеСимволы - Строка - символы, которые при разборе можно пропустить, на любых других разбор прекращается.
// 		Например, при разборе "К25СТР1", если пропускаемые символы:
// 			"" - то возвратится "0", 
// 			"К" - возвратится "25",
// 			"КСТР" - возвратится "251"
// 
// Возвращаемое значение:
// 	Строка - строка, состоящая только из цифр, полученных из исходной строки.
//
Функция ОставитьТолькоЦифрыВСтроке(РазбираемаяСтрока, ПропускаемыеСимволы = "")

	Цифры = "1234567890";
	ЦифроваяЧасть = "";
	Для НомерСимвола = 1 По СтрДлина(РазбираемаяСтрока) Цикл
		ТекущийСимвол = Сред(РазбираемаяСтрока, НомерСимвола, 1);
		Если Найти(Цифры, ТекущийСимвол) Тогда
			ЦифроваяЧасть = ЦифроваяЧасть + ТекущийСимвол;
		Иначе
			Если Найти(ПропускаемыеСимволы, ТекущийСимвол) = Неопределено Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если пустую строку попробовать преобразовать в число - то будет ошибка,
	// поэтому в данном случае вместо пустой строки возвращаем строку с нулем.
	Если ЦифроваяЧасть = "" Тогда
		ЦифроваяЧасть = "0";
	КонецЕсли;
	
	Возврат ЦифроваяЧасть;
	
КонецФункции

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры:
//  Улица		 - Строка	 - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома	 - Строка	 - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - Строка	 - номер корпуса
// 
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс.
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование КАК Наименование,
	|	АдресныйКлассификатор.Индекс КАК Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
	|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
	|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
	|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
	|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
	|	И АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде";
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Улица.Код);
	Запрос.УстановитьПараметр("КодРайонаВКоде", Улица.КодРайонаВКоде);
	Запрос.УстановитьПараметр("КодГородаВКоде", Улица.КодГородаВКоде);
	Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Улица.КодНаселенногоПунктаВКоде);
	Запрос.УстановитьПараметр("КодУлицыВКоде", Улица.КодУлицыВКоде);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексДома = "";
	
	// Сначала ищем по точному соответствию
	Пока Выборка.Следующий() Цикл

		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал, Истина) Тогда
				ИндексДома = Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// А если не нашлось, то ищем по неточному соответствию
	Если ПустаяСтрока(ИндексДома) Тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл

			Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
				Интервал = Врег(СокрЛП(Выборка.Наименование));
				
				Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал, Ложь) Тогда
					ИндексДома = Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ИндексДома) Тогда
			Возврат Улица.Индекс;
		Иначе
			Возврат ИндексДома;
		КонецЕсли;
	
	Иначе
		Возврат ИндексДома;
	КонецЕсли;	
	
КонецФункции

// По переданным элементам адреса указывает, загружен ли КЛАДР по соответствующим элементам.
//
// Параметры:
//  НазваниеРегиона				 - Строка	 - название региона(с сокращением)
//  НазваниеРайона				 - Строка	 - название района(с сокращением)
//  НазваниеГорода				 - Строка	 - название города(с сокращением)
//  НазваниеНаселенногоПункта	 - Строка	 - название населенного пункта(с сокращением)
//  НазваниеУлицы				 - Строка	 - название улицы(с сокращением)
// 
// Возвращаемое значение:
//  Структура - с полями:
//  Регион - Булево - регион загружен
//  Район - Булево - район загружен
//  Город - Булево - город загружен
//  НаселенныйПункт - населенный пункт загружен
//  Улица - Булево - улица загружена.
//
Функция СтруктураЗагруженныхЭлементовАдреса(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода,
	Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт

	СтруктураЗагруженных = Новый Структура("Регион,Район,Город,НаселенныйПункт,Улица,Дом"
	, АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 1)
	, АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 2)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, , , , 3)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, , , 4)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, , 5)
	, АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, 6));
	Возврат СтруктураЗагруженных;
	
КонецФункции

// Определяет, загружен ли уже Адресный элемент.
//
// Параметры:
//  НазваниеРегиона				 - Строка	 - название региона(с сокращением)
//  НазваниеРайона				 - Строка	 - название района(с сокращением)
//  НазваниеГорода				 - Строка	 - название города(с сокращением)
//  НазваниеНаселенногоПункта	 - Строка	 - название населенного пункта(с сокращением)
//  НазваниеУлицы				 - Строка	 - название улицы(с сокращением)
//  Уровень						 - Число	 - уровень.
// 
// Возвращаемое значение:
//  РезультатЗапроса - результат выполнения запроса
//
Функция АдресныйЭлементЗагружен(Знач НазваниеРегиона, Знач НазваниеРайона = "", Знач НазваниеГорода = "", 
	Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Уровень = 1) Экспорт
	
	Родитель = ПолучитьПустуюСтруктуруАдреса();
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1,  Родитель);
	
	Если Уровень > 1 Тогда
		
		Если Регион.Код > 0 Тогда
			Родитель = Регион;
		КонецЕсли;
		Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, Родитель);
		
		Если Уровень > 2 Тогда
			
			Если Район.Код > 0 Тогда
				Родитель = Район;
			КонецЕсли;
			Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, Родитель);
			
			Если Уровень > 3 Тогда
				
				Если Город.Код > 0 Тогда
					Родитель = Город;
				КонецЕсли;
				НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, Родитель);
				
				Если Уровень > 4 Тогда
					
					Если НаселенныйПункт.Код > 0 Тогда
						Родитель = НаселенныйПункт;
					КонецЕсли;
					Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, Родитель);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Если не указан уровень или указан 1й уровень, то проверяем существование всех уровней.
	Если Уровень = 1 Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента <> 1
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 2й уровень, то проверяем существование районов в регионе.
	ИначеЕсли Уровень = 2 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 2
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 3й уровень, то проверяем существование городов в районе.
	ИначеЕсли Уровень = 3 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 3
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		
	// Если указан 4й уровень, то проверяем существование населенных пунктов в городе.
	ИначеЕсли Уровень = 4 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 4
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Город.КодГородаВКоде);
		
	// Если указан 5й уровень, то проверяем существование улиц в населенном пункте.
	ИначеЕсли Уровень = 5 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		
	// Если указан 6й уровень, то проверяем существование домов на улице.
	ИначеЕсли Уровень = 6 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
		|	И АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		Запрос.УстановитьПараметр("КодУлицыВКоде", Улица.КодУлицыВКоде);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - СправочникСсылка.АдресныйКлассификатор - элемент справочника Адресный классфикатор.
//
// Возвращаемое значение:
//  Название адресного элемента.
//
Функция ПолучитьНазвание(АдресныйЭлемент) Экспорт
	
	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает в наборе регистра сведений
//  запись контактной информации определенного типа и вида основной
//  для объекта в пространстве одного типа.
//
// Параметры:
//  Владелец	 - ЛюбаяСсылка	 - объект КИ.
//  ТекДанные	 - Структура	 - текущая строка КИ.
//
Процедура СброситьОсновнуюЗапись(Владелец, ТекДанные = Неопределено) Экспорт
	
	Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Значение = Владелец;
	Набор.Отбор.Объект.Использование = Истина;
	Набор.Прочитать();
	
	Для Каждого Стр Из Набор Цикл
		Если ТекДанные = Неопределено Тогда
			Стр.ЗначениеПоУмолчанию = Ложь;
		Иначе
			Если ТекДанные.Представление = Стр.Представление
				И ТекДанные.Вид = Стр.Вид
				И ТекДанные.Тип = Стр.Тип
			Тогда
				Стр.ЗначениеПоУмолчанию = Истина;
			ИначеЕсли ТекДанные.Тип = Стр.Тип Тогда // Затираем только КИ того же типа (Адреса, Телефоны и т.д.)
				Стр.ЗначениеПоУмолчанию = Ложь;
			КонецЕсли; 	
		КонецЕсли; 
		
	КонецЦикла;	
	
	Набор.Записать();
	
КонецПроцедуры
 
// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры:
//  Запись	 - РегистрСведенийЗапись.КонтактнаяИнформация - запись регистра контакная информация
// 
// Возвращаемое значение:
//  Строка - представление адреса.
//
Функция ПолучитьПредставлениеАдреса(Запись) Экспорт
	
	ТекПредставление = "";
	КраткоеПредставление = Запись.КраткоеПредставление;
	
	Если (СокрЛП(Запись.Поле1) <> "") И (Не КраткоеПредставление) Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;
	
	Если (СокрЛП(Запись.Поле2) <> "") И (Не КраткоеПредставление) Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;
	
	Если (СокрЛП(Запись.Поле3) <> "") И (Не КраткоеПредставление) Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;
	
	Если (СокрЛП(Запись.Поле4) <> "") И (Не КраткоеПредставление) Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;
	
	Если (СокрЛП(Запись.Поле5) <> "") И (Не КраткоеПредставление) Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;
	
	Если Не Запись.ГородскойРайон.Пустая() Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.ГородскойРайон.Наименование);
	КонецЕсли;
		
	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТипДома = ?(ЗначениеЗаполнено(Запись.ТипДома), Запись.ТипДома, "дом");
		ТекПредставление = ТекПредставление + ", " + ТипДома + " №" + СокрЛП(Запись.Поле7);
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТипКорпуса = ?(ЗначениеЗаполнено(Запись.ТипКорпуса), Запись.ТипКорпуса, "корпус");
		ТекПредставление = ТекПредставление + ", " + ТипКорпуса + " " + СокрЛП(Запись.Поле8);
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТипКвартиры = ?(ЗначениеЗаполнено(Запись.ТипКвартиры), Запись.ТипКвартиры, "кв.");
		ТекПредставление = ТекПредставление + ", " + ТипКвартиры + "" + СокрЛП(Запись.Поле9);
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле10) <> "" Тогда
		ТекПредставление = ТекПредставление + ", подъезд №" + СокрЛП(Запись.Поле10);
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле11) <> "" Тогда
		ТекПредставление = ТекПредставление + ", этаж " + СокрЛП(Запись.Поле11);
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле12) <> "" Тогда
		ТекПредставление = ТекПредставление + ", код " + СокрЛП(Запись.Поле12);
	КонецЕсли;
	
	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

// Получить адрес электронной почты объекта.
//
// Параметры:
//  Объект	 - СправочникСсылка - клиент, сотрудник и т.д.
// 
// Возвращаемое значение:
//  Строка - адрес EMAIL.
//
Функция ПолучитьEMAILАдрес(Объект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий)
	|			ТОГДА 2
	|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДомашний)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Преоритет
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Клиент
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДомашний)
	|			ИЛИ КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Преоритет";
	Запрос.УстановитьПараметр("Клиент", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		EMAILАдрес = Выборка.Представление;
	Иначе
		EMAILАдрес = "";
	КонецЕсли;
		
	Возврат EMAILАдрес;
КонецФункции

// Возвращает имена метаданных справочников, к которым возможно примение контактной информации.
// 
// Возвращаемое значение:
//  Массив.
//
Функция ПолучитьНазначенияВидовКонтактнойИнфомрации() Экспорт
	
	Результат = Новый Массив;
	
	ТипыОбъекта = Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения.Объект.Тип;
	МетаданныеСправочники = Метаданные.Справочники;
	Для Каждого ТипОбъекта Из ТипыОбъекта.Типы() Цикл
		МетаданноеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
		Если МетаданныеСправочники.Найти(МетаданноеТипа.Имя) <> Неопределено Тогда
			Результат.Добавить(Новый Структура("Имя, Синоним", МетаданноеТипа.Имя, МетаданноеТипа.Синоним));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция ПолучитьКИОбъекта.
//
// Параметры:
//  Объект- ЛюбаяСсылка - владелец.
//  ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип.
//  ВидыКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид КИ.
//  ВернутьПервое - Булево - режим.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьКИОбъекта(Объект, ТипКонтактнойИнформации, ВидыКонтактнойИнформации = Неопределено, ВернутьПервое = Истина) Экспорт
	
	Возврат КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Объект, ТипКонтактнойИнформации, ВидыКонтактнойИнформации, ВернутьПервое);
	
КонецФункции

#Область ФИАС

// Записать контактную информацию
//
// Параметры:
//  Объект			 - ЛюбаяСсылка						 - владелец.
//  Тип				 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - тип.
//  Вид				 - СправочникСсылка.ВидыКонтактнойИнформации	 - вид КИ.
//  ЗначенияПолей	 - Структура									 - поля.
//	Значение		 - Структура.
// 
// Возвращаемое значение:
//  Неопределеноы.
//
Функция ЗаписатьКонтактнуюИнформацию(Объект, Тип, Вид, ЗначенияПолей, Значение) Экспорт
	
	мзКонтактнаяИнформация = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Вид);
	мзКонтактнаяИнформация.Объект 		 = Объект;
	мзКонтактнаяИнформация.Тип 			 = Тип;
	мзКонтактнаяИнформация.Вид 			 = Вид;
	мзКонтактнаяИнформация.ЗначенияПолей = ЗначенияПолей;
	мзКонтактнаяИнформация.Значение		 = Значение;
	мзКонтактнаяИнформация.Представление = ОбъектКИ.Представление;
	//+бит
	мзКонтактнаяИнформация.Комментарий = ОбъектКИ.Комментарий;
	//-бит
	мзКонтактнаяИнформация.Записать();
	
КонецФункции

// Обновить КИПод формат ФИАС
//
// Параметры:
//  Объект					 - ЛюбаяСсылка						 - владелец.
//  Вид						 - СправочникСсылка.ВидыКонтактнойИнформации	 - вид КИ.
//  ВозвращатьЗначенияПолей	 - Булево	 - значения или представление.
//  КэшАдресовФилиалов		 - Структура	 - адреса филиалов
// 
// Возвращаемое значение:
//  Структура.
//
Функция ОбновитьКИПодФорматФИАС(Объект, Вид, ВозвращатьЗначенияПолей = Ложь, КэшАдресовФилиалов = Неопределено) Экспорт
	
	нзКонтактнаяИнформация = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	нзКонтактнаяИнформация.Отбор.Объект.Установить(Объект);
	нзКонтактнаяИнформация.Отбор.Вид.Установить(Вид);
	нзКонтактнаяИнформация.Прочитать();
	
	Если нзКонтактнаяИнформация.Количество() = 1 Тогда
		
		КонтактнаяИнформацияXML = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
		|xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление""> 
		|<Комментарий>%Комментарий</Комментарий><Состав xsi:type=""Адрес"" Страна=""%Страна""><Состав xsi:type=""АдресРФ"" КраткоеПредставление=""%КраткоеПредставление""><СубъектРФ>%Регион</СубъектРФ>
		|<СвРайМО><Район>%Район</Район></СвРайМО><Город>%Город</Город><НаселПункт>%НаселПункт</НаселПункт><Улица>%Улица</Улица><ОКТМО>0</ОКТМО>
		|<ДопАдрЭл><Номер Тип=""2010"" Значение=""%Квартира""/></ДопАдрЭл><ДопАдрЭл><Номер Тип=""1050"" Значение=""%Корпус""/></ДопАдрЭл><ДопАдрЭл>
		|<Номер Тип=""1010"" Значение=""%Дом""/></ДопАдрЭл><ДопАдрЭл ТипАдрЭл=""10100000"" Значение=""%Индекс""/></Состав></Состав></КонтактнаяИнформация>";
		
		Запись = нзКонтактнаяИнформация[0];
		
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Страна",		 Запись.Поле1);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Представление", Запись.Представление);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Комментарий",	 Запись.Комментарий);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Регион",		 Запись.Поле2);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Район",		 Запись.ГородскойРайон);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Город",		 Запись.Поле4);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%НаселПункт",	 Запись.Поле5);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Улица",		 Запись.Поле6);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Дом",			 Запись.Поле7);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Индекс",		 Запись.Поле1);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Квартира",		 Запись.Поле9);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Корпус",		 Запись.Поле8);
		КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%КраткоеПредставление", ?(Запись.КраткоеПредставление,"true","false"));
		
		Запись.ЗначенияПолей = КонтактнаяИнформацияXML;
		
		Если ПустаяСтрока(Запись.Представление) Тогда
			Запись.Представление = КонтактнаяИнформацияСервер.ПолучитьПредставлениеАдреса(Запись);
		КонецЕсли;
		
		нзКонтактнаяИнформация.Записать();
		
		Если ВозвращатьЗначенияПолей Тогда
			Возврат Запись.ЗначенияПолей;
		Иначе
			Возврат Запись;
		КонецЕсли;
		
	ИначеЕсли ВозвращатьЗначенияПолей И КэшАдресовФилиалов <> Неопределено Тогда
		
		Возврат ЗначенияПолейСГородомИзКэшаФилиала(Объект, Вид, КэшАдресовФилиалов);
			
	КонецЕсли;
		
КонецФункции

// Обновить КИПод формат ФИАС
//
// Параметры:
//  Объект				 - ЛюбаяСсылка				 - владелец.
//  Вид					 - СправочникСсылка.ВидыКонтактнойИнформации - вид КИ.
//  КэшАдресовФилиалов	 - Структура								 - адреса филиалов
// 
// Возвращаемое значение:
//  Структура.
//
Функция ЗначенияПолейСГородомИзКэшаФилиала(Объект, Вид, КэшАдресовФилиалов) Экспорт
	
	КонтактнаяИнформацияXML = "";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Клиенты") Тогда

		// Найти текущий филиал в кеше адресов филиалов
		ДанныеАдресаФилиала = Неопределено;
		
		Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
		Для Каждого Адрес Из КэшАдресовФилиалов Цикл
			Если Адрес.Объект = Филиал Тогда
				
				Если Адрес.ЗначенияПолей <> "" Тогда
					ДанныеАдресаФилиала = ПолучитьПредставлениеЭлементовАдресов(Адрес.ЗначенияПолей, Истина);
				Иначе
					ЗначенияПолей = ОбновитьКИПодФорматФИАС(Адрес.Объект, Адрес.Вид, Истина);
					ДанныеАдресаФилиала = ПолучитьПредставлениеЭлементовАдресов(ЗначенияПолей, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеАдресаФилиала <> Неопределено Тогда
		
			КонтактнаяИнформацияXML = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
			|xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление""> 
			|<Комментарий>%Комментарий</Комментарий><Состав xsi:type=""Адрес"" Страна=""%Страна""><Состав xsi:type=""АдресРФ"" КраткоеПредставление=""%КраткоеПредставление""><СубъектРФ>%Регион</СубъектРФ>
			|<Округ/><СвРайМО><Район>%Район</Район></СвРайМО><Город>%Город</Город><НаселПункт>%НаселПункт</НаселПункт><Улица>%Улица</Улица><ОКТМО>0</ОКТМО>
			|<ДопАдрЭл><Номер Тип=""%ТипКвартираОфис"" Значение=""%Квартира""/></ДопАдрЭл><ДопАдрЭл><Номер Тип=""1050"" Значение=""%Корпус""/></ДопАдрЭл><ДопАдрЭл>
			|<Номер Тип=""1010"" Значение=""%Дом""/></ДопАдрЭл><ДопАдрЭл ТипАдрЭл=""10100000"" Значение=""%Индекс""/></Состав></Состав></КонтактнаяИнформация>";
			
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Представление", "");
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Комментарий", "");
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Улица", "");
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Дом", "");
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Индекс", "");
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Квартира", "");
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Корпус", "");
			
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%ТипКвартираОфис", "2010"); // Квартира
			
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Страна", ДанныеАдресаФилиала.Страна);
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Регион", ДанныеАдресаФилиала.СубъектРФ);
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Район", ДанныеАдресаФилиала.Район);
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%Город", ДанныеАдресаФилиала.Город);
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%НаселПункт", ДанныеАдресаФилиала.НаселПункт);
			
			КраткоеПредставление = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ФормаЗаписиАдресаКраткоеПредставлениеАдреса", "КраткоеПредставление" + Объект.Метаданные().Имя);
			КонтактнаяИнформацияXML = СтрЗаменить(КонтактнаяИнформацияXML, "%КраткоеПредставление", Формат(КраткоеПредставление = Истина, "БЛ=false; БИ=true"));
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтактнаяИнформацияXML;
	
КонецФункции

// Получить представление элементов адресов
//
// Параметры:
//  ЗначенияПолей	 - Структура	 - поля.
//  ВсеЭлементы		 - Булево	 - краткая форма.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьПредставлениеЭлементовАдресов(ЗначенияПолей, ВсеЭлементы = Ложь) Экспорт
	
	ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей);
	
	ЭлементыАдреса = Новый Структура;
	
	Если ДанныеАдреса <> Неопределено Тогда
		Если ТипЗнч(ДанныеАдреса.Состав.Состав) <> Тип("ОбъектXDTO") Тогда
			Возврат Новый Структура("Страна, СубъектРФ, Район, Город, НаселПункт, Улица, Дом, Корпус, Квартира",?(ЗначениеЗаполнено(ДанныеАдреса.Состав.Страна),ДанныеАдреса.Состав.Страна,""));	
		КонецЕсли;
		
	 	ЭлементыАдреса.Вставить("Страна",ДанныеАдреса.Состав.Страна);
		Для Каждого Стр Из ДанныеАдреса.Состав.Состав.Свойства() Цикл
			Если ТипЗнч(ДанныеАдреса.Состав.Состав[Стр.Имя]) <> Тип("СписокXDTO") Тогда
				ЭлементыАдреса.Вставить(Стр.Имя, ДанныеАдреса.Состав.Состав[Стр.Имя]);	
			КонецЕсли;
			Если ТипЗнч(ДанныеАдреса.Состав.Состав[Стр.Имя]) = Тип("ОбъектXDTO") Тогда
				
				Для Каждого Стр1 Из ДанныеАдреса.Состав.Состав[Стр.Имя].Свойства() Цикл
					Если ТипЗнч(ДанныеАдреса.Состав.Состав[Стр.Имя][Стр1.Имя]) <> Тип("СписокXDTO") Тогда
						ЭлементыАдреса.Вставить(Стр1, ДанныеАдреса.Состав.Состав[Стр.Имя][Стр1.Имя]);	
					КонецЕсли;
				КонецЦикла;
				
				ЭлементыАдреса.Вставить(Стр.Имя, ДанныеАдреса.Состав.Состав[Стр.Имя]);
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеЭлементы Тогда
			Для Каждого Стр Из АдресныйКлассификаторСлужебный.ДопЭлементыАдреса(ДанныеАдреса.Состав.Состав) Цикл
				ЭлементыАдреса.Вставить(Стр.Ключ, Стр.Значение);
			КонецЦикла;
			
			Для Каждого Стр Из ДанныеАдреса.Состав.Состав.ДопАдрЭл Цикл
				Если  Стр.Номер = Неопределено
					И ЗначениеЗаполнено(Стр.ТипАдрЭл)
					И Стр.ТипАдрЭл <> "10100000"
					И ЗначениеЗаполнено(Стр.Значение)
				Тогда
					ЭлементыАдреса.Вставить("Территория", Стр.Значение);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат НормализоватьСтруктуруДанныхАдреса(ЭлементыАдреса);
	
КонецФункции

Функция НормализоватьСтруктуруДанныхАдреса(ДанныеАдреса)
	
	Если ДанныеАдреса = Неопределено Тогда			
		Возврат Новый Структура("Страна, СубъектРФ, Район, Город, НаселПункт, Улица, Дом, Корпус, Квартира");
	Иначе
		Если Не ДанныеАдреса.Свойство("Страна") Тогда
			ДанныеАдреса.Вставить("Страна", РаботаСАдресамиКлиентСервер.ОсновнаяСтрана().Наименование);	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("СубъектРФ") Тогда
			ДанныеАдреса.Вставить("СубъектРФ", "");	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("Район") Тогда
			ДанныеАдреса.Вставить("Район", "");	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("Город") Тогда
			ДанныеАдреса.Вставить("Город", "");	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("НаселПункт") Тогда
			ДанныеАдреса.Вставить("НаселПункт", "");	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("Улица") Тогда
			ДанныеАдреса.Вставить("Улица", "");	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("Дом") Тогда
			ДанныеАдреса.Вставить("Дом", "");	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("Корпус") Тогда
			ДанныеАдреса.Вставить("Корпус", "");	
		КонецЕсли;
		Если Не ДанныеАдреса.Свойство("Квартира") Тогда
			ДанныеАдреса.Вставить("Квартира", "");	
		КонецЕсли;
		
		Возврат ДанныеАдреса;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#КонецОбласти