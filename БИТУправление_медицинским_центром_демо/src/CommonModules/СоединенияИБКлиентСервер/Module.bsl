#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРИНУДИТЕЛЬНОГО ОТКЛЮЧЕНИЯ СЕАНСОВ ИБ

// Отключает сеанс по номеру сеанса
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ
//  НомерСеанса - Число - номер сеанса для отключения
// 
// Возвращаемое значение:
//  Булево – результат отключения сеанса.
//
Функция ОтключитьСеанс(НомерСеанса, Сообщение) Экспорт
	
	Если СоединенияИБ.КоличествоСеансовИнформационнойБазы() <= 1 Тогда
		Возврат Истина; // Отключены все пользователи, кроме текущего сеанса
	КонецЕсли;
	
	// Невозможно принудительно отсоединить сеансы в файловом режиме работы
	Если ИнформационнаяБазаФайловая() Тогда
		Сообщение = НСтр("ru = 'Невозможно принудительно завершить сеанс в файловом режиме работы'");
		СоединенияИБ.ЗаписатьНазванияСоединенийИБ(Сообщение);
		Возврат Ложь; 
	КонецЕсли;
	
#Если НаКлиенте Тогда		
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
			// Передаем управление на сервер
			Возврат СоединенияИБ.ОтключитьСеанс(НомерСеанса, Сообщение);
		Иначе // Linux
			Возврат СоединенияИБ.УдалитьСеансыИРазорватьСоединения(СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ(), НомерСеанса);
		КонецЕсли;
		Сообщение = НСтр("ru = 'Невозможно принудительно завершить сеанс при работе с клиента через веб-сервер,
			| если на сервере не установлена ОС Microsoft Windows'");
		СоединенияИБ.ЗаписатьНазванияСоединенийИБ(Сообщение);
		Возврат Ложь; 
	КонецЕсли;
#КонецЕсли		
	
	Попытка
		Возврат ЗавершитьСеанс(СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ(), НомерСеанса);
	Исключение
		Сообщение = НСтр("ru = 'Невозможно принудительно завершить сеанс.
				|Подробности ошибки в Журнале регистрации.'");
		ЗаписатьСобытие(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка");
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Выполнить завершение активных сеансов.
//
// Возвращаемое значение:
//   Булево   - строковый код ошибки; пустая строка - в случае успешного завершения.
//
Функция ОтключитьСоединенияИБПоПараметрамЗапуска(Знач ПараметрЗапуска) Экспорт

	ПараметрыАдминистрированияИБ = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
	Результат = ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ);
	Возврат Результат;
	
КонецФункции

// Отключить все активные соединения ИБ (кроме текущего сеанса).
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ.  
//
// Возвращаемое значение:
//   Булево   – результат отключения соединений.
//
Функция ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ) Экспорт
	
	Если СоединенияИБ.КоличествоСеансовИнформационнойБазы() <= 1 Тогда
		Возврат Истина;	// Отключены все пользователи, кроме текущего сеанса
	КонецЕсли;
	
	// Невозможно принудительно отсоединить сеансы в файловом режиме работы
	Если ИнформационнаяБазаФайловая() Тогда
 		СоединенияИБ.ЗаписатьНазванияСоединенийИБ(НСтр("ru = 'Невозможно принудительно завершить сеансы в файловом режиме работы'"));
		Возврат Ложь; 
	КонецЕсли;
	
#Если НаКлиенте Тогда		
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
			// Передаем управление на сервер
			Возврат СоединенияИБ.ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ);
		КонецЕсли;
 		СоединенияИБ.ЗаписатьНазванияСоединенийИБ(НСтр("ru = 'Невозможно принудительно завершить сеансы при работе с клиента через веб-сервер,
			| если на сервере не установлена ОС Microsoft Windows'"));
		Возврат Ложь; 
	КонецЕсли;
#КонецЕсли		
	
	Попытка
		Сеансы = ПолучитьАктивныеСеансыИБ(ПараметрыАдминистрированияИБ);
		Для каждого Сеанс Из Сеансы.Сеансы Цикл
			// Разрываем сеансы с ИБ
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Разрывается сеанс: Пользователь %1, компьютер %2, установлено %3, режим %4'"),
			    Сеанс.UserName,
			    Сеанс.Host,
			    Сеанс.StartedAt,
				Сеанс.AppID);
			
			ЗаписатьСобытие(Сообщение, "Информация", Ложь);
			Сеансы.АгентСервера.TerminateSession(Сеансы.КластерСерверов, Сеанс);
		КонецЦикла;
		
#Если НаКлиенте Тогда		
		КлиентскиеСообщения = СообщенияДляЖурналаРегистрации;
#Иначе		
		КлиентскиеСообщения = Неопределено;
#КонецЕсли		
		Возврат СоединенияИБ.КоличествоСеансовИнформационнойБазы(КлиентскиеСообщения) <= 1;
	Исключение
		ЗаписатьСобытие(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка");
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Осуществить попытку подключиться к кластеру серверов и получить список 
// активных соединений к ИБ и использованием указанных параметров администрирования.
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ
//  ВыдаватьСообщения             – Булево    – разрешить вывод интерактивных сообщений.
//
// Возвращаемое значение:
//   Булево   – Истина, если проверка завершена успешно.
//
Процедура ПроверитьПараметрыАдминистрированияИБ(ПараметрыАдминистрированияИБ,
	Знач ПодробноеСообщениеОбОшибке = Ложь) Экспорт
	
	Попытка
		Если ИнформационнаяБазаФайловая() Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно получить список активных соединений в файловом режиме работы'");
		КонецЕсли;
		
#Если НаКлиенте Тогда		
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
			// Передаем управление на сервер
			СоединенияИБ.ПроверитьПараметрыАдминистрированияИБ(ПараметрыАдминистрированияИБ, ПодробноеСообщениеОбОшибке);
		КонецЕсли;
		// Невозможно выполнить операцию при работе с клиента через веб-сервер,
		// если на сервере не установлена ОС Microsoft Windows
		ВызватьИсключение НСтр("ru = 'Невозможно получить список активных соединений при работе через веб-сервер'");
	КонецЕсли;
#КонецЕсли		
		
		Сеансы = ПолучитьАктивныеСеансыИБ(ПараметрыАдминистрированияИБ);
	Исключение
		Сообщение = НСтр("ru = 'Не удалось подключиться к кластеру серверов.'");
		ЗаписатьСобытие(Сообщение + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка");
		Если ПодробноеСообщениеОбОшибке Тогда
			Сообщение = Сообщение + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ БЛОКИРОВКИ РЕГЛАМЕНТНЫХ И ФОНОВЫХ ЗАДАНИЙ

// Установить блокировку регламентных и фоновых заданий.
//
// Параметры
//   Значение   – Булево
//
Процедура УстановитьБлокировкуРегламентныхЗаданий(Значение) Экспорт
	
	Если ИнформационнаяБазаФайловая() Тогда
 		ВызватьИсключение НСтр("ru = 'Невозможно установить блокировку регламентных и фоновых заданий в файловом режиме работы'");
	КонецЕсли;

#Если НаКлиенте Тогда		
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
			// Передаем управление на сервер
			СоединенияИБ.УстановитьБлокировкуРегламентныхЗаданий(Значение);
		КонецЕсли;
 		ВызватьИсключение НСтр("ru = 'Невозможно установить блокировку регламентных и фоновых заданий при работе с клиента через веб-сервер,
			| если на сервере не установлена ОС Microsoft Windows'");
	КонецЕсли;
#КонецЕсли		

	ПараметрыАдминистрированияИБ = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
	Подключение = ПодключитьсяКТекущейИБ(ПараметрыАдминистрированияИБ);
	Подключение.ТекущаяБаза.ScheduledJobsDenied = Значение;
	Подключение.РабочийПроцесс.UpdateInfoBase(Подключение.ТекущаяБаза);
	
КонецПроцедуры	

// Получить текущее состояние блокировки регламентных и фоновых заданий.
//
// Возвращаемое значение:
//   Булево   – Истина, если блокировка установлена.
//
Функция БлокировкаРегламентныхЗаданийУстановлена() Экспорт
	
	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Ложь;	
	КонецЕсли;
	
#Если НаКлиенте Тогда		
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
			// Передаем управление на сервер
			Возврат СоединенияИБ.БлокировкаРегламентныхЗаданийУстановлена();
		КонецЕсли;
 		Возврат Ложь;
	КонецЕсли;
#КонецЕсли		

	ПараметрыАдминистрированияИБ = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
	Подключение = ПодключитьсяКТекущейИБ(ПараметрыАдминистрированияИБ);
	Возврат Подключение.ТекущаяБаза.ScheduledJobsDenied;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
//

// Получить строку соединения ИБ, если задан нестандартный порт кластера серверов.
//
// Параметры
//  ПортКластераСерверов  - Число - нестандартный порт кластера серверов
//
// Возвращаемое значение:
//   Строка   - строка соединения ИБ
//
Функция ПолучитьСтрокуСоединенияИнформационнойБазы(Знач ПортКластераСерверов = 0) Экспорт

	Результат = СтрокаСоединенияИнформационнойБазы();
	Если ИнформационнаяБазаФайловая() Или (ПортКластераСерверов = 0) Тогда
		Возврат Результат;
	КонецЕсли; 
	
#Если НаКлиенте Тогда		
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		Возврат Результат;
	КонецЕсли; 
#КонецЕсли		
	
	ПодстрокиСтрокиСоединения  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ";");
	ИмяСервера = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	Результат  = "Srvr=" + """" + ИмяСервера + 
		?(Найти(ИмяСервера, ":") > 0, "", ":" + Формат(ПортКластераСерверов, "ЧГ=0")) + """;" + 
		"Ref=" + """" + ИмяИБ + """;";
	Возврат Результат;

КонецФункции

// Возвращает полный путь к информационной базе (строку соединения).
//
// Параметры
//  ПризнакФайловогоРежима  - Булево - выходной параметр. Принимает значение 
//                                     Истина, если текущая ИБ - файловая; 
//                                     Ложь - если клиент-серверная.
//  ПортКластераСерверов    - Число  - входной параметр. Задается в случае, если
//                                     кластер серверов использует нестандартный номер порта.
//                                     Значение по умолчанию - 0, означает, что 
//                                     кластер серверов занимает номер порта по умолчанию.
//
// Возвращаемое значение:
//   Строка   - строка соединения ИБ.
//
Функция ПутьКИнформационнойБазе(ПризнакФайловогоРежима = Неопределено, Знач ПортКластераСерверов = 0) Экспорт
	
	СтрокаСоединения = ПолучитьСтрокуСоединенияИнформационнойБазы(ПортКластераСерверов);
	
	ПозицияПоиска = Найти(Врег(СтрокаСоединения), "FILE=");
	
	Если ПозицияПоиска = 1 Тогда // файловая ИБ
		
		ПутьКИБ = Сред(СтрокаСоединения, 6, СтрДлина(СтрокаСоединения) - 6);
		ПризнакФайловогоРежима = Истина;
		
	Иначе
		ПризнакФайловогоРежима = Ложь;
		
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "SRVR=");
		
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "REF=");
		
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2;
		
		ИмяИБНаСервере = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКИБ = """" + ИмяСервера + "\" + ИмяИБНаСервере + """";
	КонецЕсли;
	
	Возврат ПутьКИБ;
	
КонецФункции

// Получить пустую структуру параметров администрирования кластера серверов.
//
// Возвращаемое значение:
//   Структура – с полями:
//     ИмяАдминистратораИБ
//     ПарольАдминистратораИБ
//     ИмяАдминистратораКластера
//     ПарольАдминистратораКластера
//     ПортКластераСерверов
//     ПортАгентаСервера
//
Функция НовыеПараметрыАдминистрированияИБ(Знач ИмяАдминистратораИБ = "", Знач ПарольАдминистратораИБ = "",
	Знач ИмяАдминистратораКластера = "", Знач ПарольАдминистратораКластера = "", 
	Знач ПортКластераСерверов = 0, Знач ПортАгентаСервера = 0) Экспорт
	
	Возврат Новый Структура("ИмяАдминистратораИБ,ПарольАдминистратораИБ,ИмяАдминистратораКластера,
		|ПарольАдминистратораКластера,ПортКластераСерверов,ПортАгентаСервера",
		ИмяАдминистратораИБ,
		ПарольАдминистратораИБ,
		ИмяАдминистратораКластера,
		ПарольАдминистратораКластера,
		ПортКластераСерверов,
		ПортАгентаСервера);
	
КонецФункции

// Возвращает текстовую константу для формирования сообщений.
// Используется в целях локализации.
//
Функция ТекстДляАдминистратора() Экспорт
	
	Возврат НСтр("ru = 'Для администратора:'");
	
КонецФункции

// Возвращает пользовательский текст сообщения блокировки сеансов.
//
Функция ИзвлечьСообщениеБлокировки(Знач Сообщение) Экспорт
	
	ИндексМаркера = Найти(Сообщение, ТекстДляАдминистратора());
	Если ИндексМаркера = 0  Тогда
		Возврат Сообщение;
	ИначеЕсли ИндексМаркера >= 3 Тогда
		Возврат Сред(Сообщение, 1, ИндексМаркера - 3);
	Иначе
		Возврат "";
	КонецЕсли;
		
КонецФункции

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Завершение работы пользователей'");
	
КонецФункции

Функция ПодключитьсяКАгентуСервера(ПараметрыСоединенияССервером1СПредприятие)
	
	ПодстрокиСтрокиСоединения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрокаСоединенияИнформационнойБазы(), ";");
	
	ИмяСервера = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	COMСоединитель = Новый COMОбъект(ОбщегоНазначения.ИмяCOMСоединителя());
	
	РазделительПорта = Найти(ИмяСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяИПортСервера = ИмяСервера;
		ИмяСервера = Сред(ИмяИПортСервера, 1, РазделительПорта - 1);
		НомерПортаКластера = Число(Сред(ИмяИПортСервера, РазделительПорта + 1));
	ИначеЕсли ПараметрыСоединенияССервером1СПредприятие.ПортКластераСерверов <> 0 Тогда
		НомерПортаКластера = ПараметрыСоединенияССервером1СПредприятие.ПортКластераСерверов;
	Иначе
		НомерПортаКластера = COMСоединитель.RMngrPortDefault;
	КонецЕсли;
	
	ИдентификаторАгентаСервера = ИмяСервера;
	Если ПараметрыСоединенияССервером1СПредприятие.ПортАгентаСервера <> 0 Тогда
	      ИдентификаторАгентаСервера = ИдентификаторАгентаСервера + ":" + 
		  	Формат(ПараметрыСоединенияССервером1СПредприятие.ПортАгентаСервера, "ЧГ=0");
	КонецЕсли;
	
	// Подключение к агенту сервера
	АгентСервера = COMСоединитель.ConnectAgent(ИдентификаторАгентаСервера);
	Результат = Новый Структура("COMСоединитель,ИмяСервера,ИмяИБ,АгентСервера,НомерПортаКластера,ИдентификаторАгентаСервера");
	Результат.COMСоединитель = COMСоединитель;
	Результат.ИмяСервера = ИмяСервера;
	Результат.ИмяИБ = ИмяИБ;
	Результат.АгентСервера = АгентСервера;
	Результат.НомерПортаКластера = НомерПортаКластера;
	Результат.ИдентификаторАгентаСервера = ИдентификаторАгентаСервера;
	Возврат Результат;
	
КонецФункции

Функция ПодключитьсяКРабочемуПроцессу(ПараметрыСоединенияССервером1СПредприятие)
	
	// Подключение к агенту сервера
	Подключение = ПодключитьсяКАгентуСервера(ПараметрыСоединенияССервером1СПредприятие);
	
	// Найдем необходимый нам кластер
	Для каждого Кластер Из Подключение.АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> Подключение.НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		ПортРабочегоПроцесса = -1;
		Подключение.АгентСервера.Authenticate(Кластер, 
			ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораКластера, 
			ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораКластера);
		РабочиеПроцессы = Подключение.АгентСервера.GetWorkingProcesses(Кластер);
		Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
			Если РабочийПроцесс.Running = 1 Тогда
				ПортРабочегоПроцесса = РабочийПроцесс.MainPort;
				ИмяСервераРабочегоПроцесса = РабочийПроцесс.HostName;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПортРабочегоПроцесса = -1 Тогда
	 		ВызватьИсключение НСтр("ru = 'Нет ни одного активного рабочего процесса'");
		КонецЕсли;
		Прервать;
		
	КонецЦикла;
	
	ИдентификаторРабочегоПроцесса = ИмяСервераРабочегоПроцесса + ":" + Формат(ПортРабочегоПроцесса, "ЧГ=0");
		
	// Подключение к рабочему процессу
	РабочийПроцесс = Подключение.COMСоединитель.ConnectWorkingProcess(ИдентификаторРабочегоПроцесса);
	Подключение.Вставить("РабочийПроцесс", РабочийПроцесс);
	Возврат Подключение;
	
КонецФункции

Функция ПодключитьсяКТекущейИБ(ПараметрыСоединенияССервером1СПредприятие)
	
	Подключение = ПодключитьсяКРабочемуПроцессу(ПараметрыСоединенияССервером1СПредприятие);
	Подключение.РабочийПроцесс.AddAuthentication(ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораИБ, 
		ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораИБ);
		
	Базы = Подключение.РабочийПроцесс.GetInfoBases();
	ТекущаяБаза = Неопределено;
	Для Каждого База Из Базы Цикл
		Если База.Name = Подключение.ИмяИБ Тогда
			ТекущаяБаза = База;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТекущаяБаза = Неопределено Тогда
 		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'База ""%1"" не зарегистрирована в кластере сервером'"), Подключение.ИмяИБ);
	КонецЕсли;
	Подключение.Вставить("ТекущаяБаза", ТекущаяБаза);
	Возврат Подключение;
	
КонецФункции

Функция ПолучитьАктивныеСеансыИБ(ПараметрыСоединенияССервером1СПредприятие, знач ВсеКромеТекущего = Истина)
	
	Результат = Новый Структура("АгентСервера,КластерСерверов,Сеансы", Неопределено, Неопределено, Новый Массив);
	
	// Подключение к агенту сервера
	Подключение = ПодключитьсяКАгентуСервера(ПараметрыСоединенияССервером1СПредприятие);
	Результат.АгентСервера = Подключение.АгентСервера; 
	
	// Найдем необходимый нам кластер
	Для каждого Кластер Из Подключение.АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> Подключение.НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.КластерСерверов = Кластер; 
		Подключение.АгентСервера.Authenticate(Кластер, 
			ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораКластера, 
			ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораКластера);
		
		// Получаем список сеансов
		НомерТекущегоСеанса = СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().НомерСеансаИнформационнойБазы;
		СписокСеансов = Подключение.АгентСервера.GetSessions(Кластер);
		Для Каждого Сеанс из СписокСеансов Цикл
			Если ВРег(Сеанс.InfoBase.Name) <> ВРег(Подключение.ИмяИБ) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВсеКромеТекущего ИЛИ (НомерТекущегоСеанса <> Сеанс.SessionID) Тогда
				Результат.Сеансы.Добавить(Сеанс);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ЗавершитьСеанс(ПараметрыСоединенияССервером1СПредприятие, Знач НомерСеансаДляЗавершения)
	
	Результат = Новый Структура("СоединениеСРабочимПроцессом, Соединения", Неопределено, Новый Массив);
	
	Если ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно получить список активных соединений в файловом режиме работы'");
	КонецЕсли;
	
#Если НаКлиенте Тогда		
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно получить список активных соединений при работе через веб-сервер'");
	КонецЕсли;
#КонецЕсли		
	
	// Подключение к агенту сервера
	Подключение = ПодключитьсяКАгентуСервера(ПараметрыСоединенияССервером1СПредприятие);
	
	// Найдем необходимый нам кластер
	Для Каждого Кластер Из Подключение.АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort = Подключение.НомерПортаКластера Тогда
			
			Подключение.АгентСервера.Authenticate(Кластер,
				ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораКластера,
				ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораКластера);
			СписокСеансов = Подключение.АгентСервера.GetSessions(Кластер);
			Для Каждого Сеанс из СписокСеансов Цикл
				Если ВРег(Сеанс.InfoBase.Name) = ВРег(Подключение.ИмяИБ) Тогда
					Если Сеанс.SessionID = НомерСеансаДляЗавершения Тогда
						Подключение.АгентСервера.TerminateSession(Кластер, Сеанс);
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Разорван сеанс: Пользователь %1, компьютер %2, начат %3, режим %4'"),
								Сеанс.UserName,
								Сеанс.Host,
								Сеанс.StartedAt,
								Сеанс.AppID);
						ЗаписатьСобытие(Сообщение, "Информация");
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИнформационнаяБазаФайловая()
#Если НаКлиенте Тогда	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Результат = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Иначе
		Результат = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	КонецЕсли;
#Иначе
	Результат = ОбщегоНазначения.ИнформационнаяБазаФайловая();
#КонецЕсли		
	Возврат Результат;
КонецФункции

Процедура ЗаписатьСобытие(Знач ТекстСобытия, ПредставлениеУровня = "Информация", Записать = Истина)
#Если НаКлиенте Тогда	
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		ПредставлениеУровня, ТекстСобытия,,Записать);
#Иначе
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		ПредопределенноеЗначение("УровеньЖурналаРегистрации." + ПредставлениеУровня),,, ТекстСобытия);
#КонецЕсли		
КонецПроцедуры			

#КонецОбласти
