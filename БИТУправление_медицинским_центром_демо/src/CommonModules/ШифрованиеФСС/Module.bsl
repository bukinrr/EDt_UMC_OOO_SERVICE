#Область ПрограммныйИнтерфейс

// Подписание выполняется на сервере.
// 
// Возвращаемое значение:
//  Булево - Истина, если подписание в базе выполняется на компьютере сервера 1С; Ложь, если на компьютере клиентского приложения.
//
Функция ПодписаниеНаСервере() Экспорт
	
	Возврат Константы.СоздаватьЭлектронныеПодписиНаСервере.Получить();
	
КонецФункции

// Расшифровывает данные.
//
// Параметры:
//  ВходящийКонтекст			 - Структура - входящий контекст
//  ВходящихПараметрыДляСервера	 - Массив -  входящие параметры
//  Сертификат					 - СправочникСсылка.Сертификаты - сертификат
// 
// Возвращаемое значение:
//  Структура - менеджер криптографии.
//
Функция РасшифроватьНаСервере(ВходящийКонтекст, ВходящихПараметрыДляСервера, Сертификат) Экспорт
	
	ВходящиеПараметры = Новый Массив;
	Для Каждого Элемент ИЗ ВходящихПараметрыДляСервера Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Адрес = ПолучитьИмяВременногоФайла(".bin");
			ПолучитьИзВременногоХранилища(Элемент).Записать(Адрес);
			ВходящиеПараметры.Добавить(Адрес);
		Иначе
			ВходящиеПараметры.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	ВходящийКонтекст.ВходящиеПараметры = ВходящиеПараметры;
	Возврат СоздатьМенеджерКриптографии(Истина,,,,Сертификат, ВходящийКонтекст);
	
КонецФункции

Функция ЗашифроватьНаСервере(ВходящийКонтекст, ВходящихПараметрыДляСервера, Сертификат) Экспорт
	
	ВходящиеПараметры = Новый Массив;
	Для Каждого Элемент ИЗ ВходящихПараметрыДляСервера Цикл
		
		Если ТипЗнч(Элемент) = Тип("Структура") И Элемент.Свойство("АдресФайла") Тогда
			Адрес = ПолучитьИмяВременногоФайла(".bin");
			ПолучитьИзВременногоХранилища(Элемент.АдресФайла).Записать(Адрес);
			ВходящиеПараметры.Добавить(Адрес);
		Иначе
			ВходящиеПараметры.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	ВходящийКонтекст.ВходящиеПараметры = ВходящиеПараметры;
	Возврат СоздатьМенеджерКриптографии(Истина,,,,Сертификат, ВходящийКонтекст, Истина);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСертификатПоОтпечатку(ОтпечатокСертификата)
	Возврат Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.НайтиПоРеквизиту("Отпечаток", ПолучитьBase64СтрокуИзДвоичныхДанных(ОтпечатокСертификата));
КонецФункции

Функция СоздатьМенеджерКриптографии(ВыводитьСообщения, ПараметрыКриптографии = Неопределено, ПредлагатьУстановкуРасширения = Неопределено, ПослеУстановки = Ложь, Сертификат, ВходящийКонтекст, ЭтоШифрование = Ложь)
	
	Попытка
		МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	ПутьВК = "ОбщийМакет.Шифрование";
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("ПутьВК", ПутьВК);
	Контекст.Вставить("ПослеУстановки", ПослеУстановки);
	Контекст.Вставить("ПараметрыКриптографии", ПараметрыКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ПредлагатьУстановкуРасширения", ПредлагатьУстановкуРасширения);
	
	Если МенеджерКриптографии = Неопределено Тогда // Компонента еще не подключена.
		ПодключитьВнешнююКомпоненту(ПутьВК, "ЭДОNative",,ТипПодключенияВнешнейКомпоненты.НеИзолированно);	
		Попытка
			МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
		Исключение
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	ДоступныеКриптопровайдеры = Неопределено;
	ОписаниеОшибки = "";
	
	Контекст.Вставить("ДоступныеКриптопровайдеры", ДоступныеКриптопровайдеры);
	
	ДанныеСертификата = Новый СертификатКриптографии(Сертификат);
	ПутиКПрограммамЭлектроннойПодписиИШифрования = ЭлектроннаяПодпись.ПерсональныеНастройки().ПутиКПрограммамЭлектроннойПодписиИШифрования;
	СертфикатСсылка = ПолучитьСертификатПоОтпечатку(ДанныеСертификата.Отпечаток);
	ПутьКПрограммеШифрования = ПутиКПрограммамЭлектроннойПодписиИШифрования.Получить(СертфикатСсылка.Программа.Наименование);
	Если ПутьКПрограммеШифрования = Неопределено Тогда
		ПутьКПрограммеШифрования = "";	
	КонецЕсли;
	
	ИмяПрограммы = СертфикатСсылка.Программа.ИмяПрограммы;
	ТипПрограммы = СертфикатСсылка.Программа.ТипПрограммы;
	
	МенеджерКриптографии.СоздатьМенеджераКриптографии(ИмяПрограммы, ПутьКПрограммеШифрования, ТипПрограммы);
	
	Если ЭтоШифрование Тогда
		
		ИмяКаталога = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		КаталогРезультата = КаталогВременныхФайлов() + ИмяКаталога;
		СоздатьКаталог(КаталогРезультата);  	
		МенеджерКриптографии.Зашифровать(
				ВходящиеПараметры[1], // исходный файл
				//+ Сертификат отправителя не требуется, поэтому передадим пустые строки
				//Строка(ДанныеСертификата.СерийныйНомер), ПолучитьДанныеПоставщикаСертификата(ДанныеСертификата.Издатель), // сертификат отправителя
				"", "",
				//-
				ВходящиеПараметры[2].СерийныйНомер, ВходящиеПараметры[2].Поставщик, // сертификат получателя
				КаталогРезультата + ПолучитьРазделительПутиСервера(), // каталог с результатом
				ВходящиеПараметры[3].АлгоритмШифрования,
				ВходящиеПараметры[3].АлгоритмКлюча,
				ВходящиеПараметры[3].Режим
				);	
				
		ЗашифрованныеФайлы = НайтиФайлы(КаталогРезультата,"*");
		ОперацияВыполнена = ЗашифрованныеФайлы.Количество() > 0;
		Если ОперацияВыполнена Тогда
			АдресАрхива = ПолучитьИмяВременногоФайла(".zip");
			ЗаписьZIP = Новый ЗаписьZipФайла(АдресАрхива,,,,УровеньСжатияZIP.Максимальный);
			Для Каждого Эл Из ЗашифрованныеФайлы Цикл
				ЗаписьZIP.Добавить(Эл.ПолноеИмя); 
			КонецЦикла;
			ЗаписьZIP.Записать();
			ЗашифрованныйФайл = Новый ДвоичныеДанные(АдресАрхива);
			АдресРезультатаВоВрХранилище = ПоместитьВоВременноеХранилище(ЗашифрованныйФайл, Новый УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		
		ИмяФайлаРезультата = ПолучитьИмяВременногоФайла(".xml");
				
		МенеджерКриптографии.РасшифроватьФайл(Строка(ДанныеСертификата.СерийныйНомер), 
				ПолучитьДанныеПоставщикаСертификата(ДанныеСертификата.Издатель), // Сертификат получателя.
				ВходящиеПараметры[1], // Зашифрованный файл.
				ИмяФайлаРезультата, // Расшифрованный файл.
				ВходящиеПараметры[2], // Файл публичного ключа.
				ВходящиеПараметры[3], // Файл сессионного ключа.
				ВходящиеПараметры[4] // Файл инициализационного вектора.
				);
				
		Попытка
			РасшифрованныйФайл = Новый ДвоичныеДанные(ИмяФайлаРезультата);
			АдресРезультатаВоВрХранилище = ПоместитьВоВременноеХранилище(РасшифрованныйФайл, Новый УникальныйИдентификатор);
			ОперацияВыполнена = Истина;
		Исключение
			ОперацияВыполнена = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Выполнено", Истина);
		СтруктураВозврата.Вставить("АдресРезультатаВоВрХранилище", АдресРезультатаВоВрХранилище); 
	Иначе
		СтруктураВозврата.Вставить("Выполнено", Ложь);
		СтруктураВозврата.Вставить("ОписаниеОшибки", МенеджерКриптографии.СписокОшибок);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьДанныеПоставщикаСертификата(СтруктураДанных)
	
	Результат = "";
	
	Для Каждого Элемента Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = Результат + ",";
		КонецЕсли;
		Результат = Результат + Элемента.Ключ + "=" + Элемента.Значение;	
	КонецЦикла; 
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти
