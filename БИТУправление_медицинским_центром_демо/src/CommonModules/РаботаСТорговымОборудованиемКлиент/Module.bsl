#Область СлужебныйПрограммныйИнтерфейс

#Область Штрихкоды

// Выполняет проверки и добавление объекту в форме полученного штрихкода, например, считанного сканером
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения			 - форма объекта конфигурации
//  ПанельЭлемента	 - 										 - панель формы со страницей "Штрихкоды"
//  Владелец		 - ЛюбаяСсылка							 - владелец штрихкода
//  Штрихкод		 - Строка								 - обрабатываемый штрихкод
//  ТипКода			 - ПланВидовХарактеристикСсылка.ТипыШтрихкодов	 - тип обрабатываемого штрихкода
// 
// Возвращаемое значение:
//   Булево - признак успешной обработки ввода.
//
Функция ДобавитьШрихкодВФормеОбъекта(ЭтаФорма, ПанельЭлемента, Владелец, Штрихкод, ТипКода) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
                        
	РаботаСТорговымОборудованиемСервер.ДобавитьШтрихкодСервер(Владелец.Ссылка, Штрихкод, ТипКода);	
	Возврат Истина;
	
КонецФункции

// Обработчик нажатия в форме справочника кнопки "Новый штрихкод"
//
// Параметры:
//  ТекущаяСтрока			 - Структура						 - текущая строка списка записей штрихкодов элемента
//  Ссылка					 - СправочникСсылка					 - ссылка на элемент справочника со штрихкодами.
//  ЕдиницаХраненияОстатков	 - СправочникСсылка.ЕдиницаИзмерения - значение для заполнения измерения единицы новой записи.
//
Процедура КнопкаНовыйШрихкодНажатие(ТекущаяСтрока, Ссылка, ЕдиницаХраненияОстатков=Неопределено) Экспорт
    Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Если ТекущаяСтрока = Неопределено Тогда
			Ответ = Вопрос("Не выбрана строка таблицы штрихкодов, для которой регистрируется штрихкод." + Символы.ПС + "Добавить новую строку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
	        Сообщение = РаботаСТорговымОборудованиемСервер.ЗаписатьШтрихКодВРегистр(Ссылка,ЕдиницаХраненияОстатков);
			Если не ПустаяСтрока(Сообщение) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.ШтрихКод) Тогда
				Ответ = Вопрос("Сформировать новый штрихкод для выбранной строки?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
	       	РаботаСТорговымОборудованиемСервер.ИзменитьСтрокуШтрихкода(Ссылка,ТекущаяСтрока);
		КонецЕсли;
	Иначе
		Если ТекущаяСтрока = Неопределено Тогда
			
			Ответ = Вопрос("Не выбрана строка таблицы штрихкодов, для которой регистрируется штрихкод." + Символы.ПС + "Добавить новую строку?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;	
			
            ФормаШтрихкодов = ПолучитьФорму("РегистрСведений.Штрихкоды.ФормаЗаписи");
			ФормаШтрихкодов.Запись.Владелец = Ссылка;
			ФормаШтрихкодов.Запись.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
			ФормаШтрихкодов.Запись.Штрихкод = РаботаСТорговымОборудованием.СформироватьШтрихКод();
			ФормаШтрихкодов.Открыть();
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ШтрихКод) Тогда
				Ответ = Вопрос("Сформировать новый штрихкод для выбранной строки?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("Ключ", РаботаСТорговымОборудованиемСервер.ПолучитьКлючШтрихКода(Ссылка,ТекущаяСтрока.ШтрихКод,ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13")));
			ФормаШтрихкодов = ПолучитьФорму("РегистрСведений.Штрихкоды.ФормаЗаписи",ПараметрыФормы);
			ФормаШтрихкодов.Запись.Штрихкод = РаботаСТорговымОборудованием.СформироватьШтрихКод();
			ФормаШтрихкодов.Открыть();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Функция осуществляет обработку внешнего события от устройств для считывания
//  магнитных карт.
//
// Параметры:
//  Клиент				 - ФормаКлиентскогоПриложения	 - источник события.
//  КодКарты			 - Строка						 - код считанной карты.
//  СМК					 - СправочникСсылка.ПодключаемоеОборудование - сканер.
//  СтруктураОбщихДанных - Неопределено								 - не используется.
//  Результат			 - Неопределено								 - не используется.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ОбработатьСобытиеСМК(Клиент, КодКарты, СМК = Неопределено, СтруктураОбщихДанных = Неопределено, Результат = Неопределено) Экспорт
	
	ВладелецКарты = РаботаСТорговымОборудованиемСервер.ПолучитьвладельцаМК(КодКарты);
	Если ЗначениеЗаполнено(Владелецкарты) Тогда
		Ответ = Истина;
		Попытка
			Ответ = Клиент.СМКМагнитнаяКарта(ВладелецКарты, СМК);
		Исключение
			Ответ = Ложь;
		КонецПопытки;
		Если Не Ответ Тогда
			Попытка
				РаботаСФормамиКлиент.ОткрытьФормуСсылочногоЗначения(ВладелецКарты);
				Ответ = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			Ответ = Клиент.СМКНеизвестныйКод(КодКарты, СМК);
		Исключение
			Ответ = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Функция осуществляет обработку внешнего события от устройств для считывания
//  штриховых карт.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения	 - источник события. 
//  Параметр - Массив	 - данные от драйвера сканера.
//  ТипШК	 - ПланВидовХарактеристикСсылка.ТипыШтрихкодов - тип ШК.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК) Экспорт
	
	Если Параметр[1] = Неопределено Тогда
		Возврат ОбработатьСобытиеСШК(ЭтаФорма, Параметр[0], ТипШК, Неопределено, Неопределено, Неопределено);
	Иначе
		Возврат ОбработатьСобытиеСШК(ЭтаФорма, Параметр[1][1], ТипШК, Неопределено, Неопределено, Неопределено);
	КонецЕсли;	

КонецФункции

// Функция осуществляет обработку внешнего события от сканеров штрихкода.
//
// Параметры:
//  Клиент				 - ФормаКлиентскогоПриложения	 - источник события.
//  ШК					 - Строка						 - штрикхода
//  ТипШК				 - ПланВидовХарактеристикСсылка.ТипыШтрихкодов	 - тип кода.
//  СШК					 - СправочникСсылка.ПодключаемоеОборудование	 - сканер.
//  СтруктураОбщихДанных - Неопределено									 - не используется
//  Результат			 - Булево										 - переменная для дублирования результата.
//  СтруктураВозврата	 - Неопределено									 - не используется
//  РучнойВводШК		 - Булево										 - был ли штрикход введен вручную, а не сканером.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ОбработатьСобытиеСШК(Клиент, ШК, ТипШК, СШК, СтруктураОбщихДанных, Результат, СтруктураВозврата = Неопределено, РучнойВводШК = Ложь) Экспорт
	
	ДанныеШК = ПолучитьДанныеИзШтрихкода(ШК);
	ШК		= ДанныеШК.Штрихкод;
	ТипШК	= РаботаСТорговымОборудованиемСервер.ПолучитьТипШКПоИмени(ДанныеШК.ТипШтрихкода);
	ДанныеШК.Вставить("Количество", 1);
	
	Если ТипШК <> ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ШтрихкодМДЛП")
		И ТипШК <> ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ШтрихкодГС1")
	Тогда
		// Классическая обработка ШК
		ВыборкаЗапроса = РаботаСТорговымОборудованиемСервер.ПолучитьВладельцаШК(ШК);
		Если ВыборкаЗапроса <> Неопределено Тогда
			Если ТипЗнч(ВыборкаЗапроса.Владелец) = Тип("СправочникСсылка.Клиенты") Тогда
				
				Если РучнойВводШК И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗапретитьРучнойВводШККартыСкидокКлиенты") Тогда
					// Предупреждение о запрете ввода этих данных вручную
					ТекстСообщения = НСтр("ru = 'Запрещен ручной ввод по штрихкоду для справочника: " + """Клиенты""'");
					Предупреждение(ТекстСообщения, 30);
				Иначе
					// Нормальная обработка события
					Попытка
						Возврат Клиент.СШККлиент(ВыборкаЗапроса.Владелец, СШК);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(ВыборкаЗапроса.Владелец) = "Справочник.КартыСкидок" Тогда
				
				Если РучнойВводШК И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗапретитьРучнойВводШККартыСкидокКлиенты") Тогда
					// Предупреждение о запрете ввода этих данных вручную
					ТекстСообщения = НСтр("ru = 'Запрещен ручной ввод по штрихкоду для справочника: " + """Карты скидок""'");
					Предупреждение(ТекстСообщения, 30);
				Иначе
					// Нормальная обработка события
					Попытка
						Возврат Клиент.СШККарта(ВыборкаЗапроса.Владелец, ВыборкаЗапроса.ВладелецКарты, СШК);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(ВыборкаЗапроса.Владелец) = "Справочник.Сотрудники" Тогда
				
				Попытка
					Возврат Клиент.СШКСотрудник(ВыборкаЗапроса.Владелец, СШК);
				Исключение
				КонецПопытки;
				
			ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(ВыборкаЗапроса.Владелец) = "Справочник.Сертификаты" Тогда 
				
				Если РучнойВводШК И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗапретитьРучнойВводШКСертификатов") Тогда
					// Предупреждение о запрете ввода этих данных вручную
					ТекстСообщения = НСтр("ru = 'Запрещен ручной ввод по штрихкоду для справочника: " + """Сертификаты""'");
					Предупреждение(ТекстСообщения, 30);
				Иначе
					// Нормальная обработка события
					Попытка
						Возврат Клиент.СШКСертификат(ВыборкаЗапроса.Владелец, СШК);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(ВыборкаЗапроса.Владелец) = "Справочник.Номенклатура" Тогда 
				ДанныеНоменклатуры = ДанныеНоменклатуры();
				ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, ВыборкаЗапроса);
				ДанныеНоменклатуры.Номенклатура = ВыборкаЗапроса.Владелец;
				
				Попытка
					Возврат Клиент.СШКНоменклатура(ДанныеНоменклатуры, СШК);
				Исключение
				КонецПопытки;
			ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(ВыборкаЗапроса.Владелец) = "Справочник.МедицинскиеКарты" Тогда 
				Попытка
					Возврат Клиент.СШКМедКарта(ВыборкаЗапроса.Владелец, ВыборкаЗапроса.Клиент, СШК);
				Исключение
				КонецПопытки;
			ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(ВыборкаЗапроса.Владелец) = "Документ.ПрохождениеМедосмотра" Тогда 
				Попытка
					Возврат Клиент.СШКПрМО(ВыборкаЗапроса.Владелец, СШК);
				Исключение
				КонецПопытки;
			КонецЕсли;
			Попытка
				РаботаСФормамиКлиент.ОткрытьФормуСсылочногоЗначения(ВыборкаЗапроса.Владелец);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Попытка
				Результат = Клиент.СШКНеизвестныйКод(ШК,ТипШК,СШК);
			Исключение
				// Форма не реализует собственной отработки неизвестного шттрихкода.
				РаботаСТорговымОборудованиемКлиент.ПоказатьПредупреждениеНеизвестныйШтрихкод();
			КонецПопытки;
		КонецЕсли;
		
		Возврат Результат;
	Иначе // Обработка ШК от маркированных товаров.
		ИзменятьКоличество = Истина;
		ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШК, "", "");
		ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
		Если СтрНайти(Клиент.ИмяФормы, "Документ.") И СтрНайти(Клиент.ИмяФормы, "ОказаниеУслуг.") = 0 Тогда
			ПараметрыДействия.ПропускатьНенайденныеШтрихкоды = Истина;
		Иначе
			ПараметрыДействия.ПропускатьНенайденныеШтрихкоды = Ложь;
		КонецЕсли;
		ПараметрыДействия.ШтрихкодыВТЧ = Истина;
		ПараметрыДействия.Вставить("ТипШК", ТипШК);
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
		
		// Определение основного реквизита формы
		ОбъектФормы = Неопределено;
		ИменаОсновныхРеквизитов = СтрРазделить("Объект,Запись,Список,Отчет",",", Ложь);
		Для Каждого ИмяРеквизита Из ИменаОсновныхРеквизитов Цикл
			Попытка 
				ОбъектФормы = Клиент[ИмяРеквизита];
				Прервать;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ОбъектФормы <> Неопределено Тогда
			Возврат ОбработатьШтрихкодыМаркировки(Клиент, ОбъектФормы, СШК, ПараметрыДействия, КэшированныеЗначения);  
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Пустая структура данных номенклатуры для отработки чтения штрикхода.
// 
// Возвращаемое значение:
//   Структура. 
//
Функция ДанныеНоменклатуры() Экспорт
	
	Данные = Новый Структура("Штрихкод"); 
	
	Данные.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Данные.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	Данные.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	Данные.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
	
	Данные.Вставить("Цена", 0);
	Данные.Вставить("Количество", 1);
	
	Возврат Данные;
	
КонецФункции

// Функция осуществляет обработку полученных с ТСД штрихкодов и добавление их в табличную часть.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - источник операции.
//  Объект		 - ДанныеФормыКоллекция			 - объект источника.
//  мсШтрихкоды	 - Массив						 - считанные штрикходы.
//  ИмяТЧ		 - Строка						 - табличная часть товаров
//  ДопПараметры - Структура					 - параметры операции.
//
Процедура ОбработатьШтрихкоды(Форма, Объект, мсШтрихкоды, ИмяТЧ = Неопределено, ДопПараметры = Неопределено) Экспорт 
	ПерезаполнятьКоличество = Ложь;
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	Иначе
		Если ДопПараметры.Свойство("СпособЗаполнения") И ДопПараметры.СпособЗаполнения = "Перезаполнить" Тогда
			ПерезаполнятьКоличество = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТЧ = Неопределено Тогда 
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	ВестиУчетПоХарактеристикам = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
	
	ТаблицаШтрихкодов = РаботаСТорговымОборудованиемСервер.ПолучитьТаблицуНоменклатурыПоШтрихкодам(мсШтрихкоды, Истина);
	Для Каждого СтрокаШтрихкод Из ТаблицаШтрихкодов Цикл
		
		ВладелецНайден = ЗначениеЗаполнено(СтрокаШтрихкод.Владелец);
		Если Не ВладелецНайден И 
			ДопПараметры.Свойство("ДобавлятьБезВладельца") И Не ДопПараметры.ДобавлятьБезВладельца
		Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ВладелецНайден 
			И СтрокаШтрихкод.ВидНоменклатуры <> ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") 
		Тогда
			ТекстСообщения = "Позиция номенклатуры ""%1"" (%2) не является материалом!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтрокаШтрихкод.Владелец), СтрокаШтрихкод.Штрихкод));
			Продолжить;
		КонецЕсли;
		ДобавитьНовуюСтроку = Истина;
		
		// Поиск по документу, для предотвращения дублирования строк
		ОтборПоТЧ = Новый Структура("Номенклатура", СтрокаШтрихКод.Владелец);
		// Характеристика учитывается всегда
		ОтборПоТЧ.Вставить("ХарактеристикаНоменклатуры", 	СтрокаШтрихКод.ХарактеристикаНоменклатуры);
		ОтборПоТЧ.Вставить("СерияНоменклатуры", СтрокаШтрихКод.СерияНоменклатуры);

		// С учетом единицы измерения
		Если ЗначениеЗаполнено(СтрокаШтрихКод.ЕдиницаИзмерения) Тогда 
			// Для документа инвентаризации преобразуем все к учету в единицах хранения остатков.
			Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИнвентаризацияТоваров") Тогда
				ОтборПоТЧ.Вставить("ЕдиницаИзмерения", 	СтрокаШтрихКод.ЕдиницаХраненияОстатков);
				СтрокаШтрихКод.Количество = СтрокаШтрихКод.Количество 
										* СтрокаШтрихКод.ЕдиницаИзмеренияКоэффициент 
										/ СтрокаШтрихКод.ЕдиницаХраненияОстатковКоэффициент;				
			Иначе
				ОтборПоТЧ.Вставить("ЕдиницаИзмерения", 	СтрокаШтрихКод.ЕдиницаИзмерения);
			КонецЕсли;
		Иначе 
			// В случае если считанному штрихкоду соответствует номенклатура без единицы измерения,
			// то принимаем ее к учету в единицах хранения остатков.
			ОтборПоТЧ.Вставить("ЕдиницаИзмерения", 	СтрокаШтрихКод.ЕдиницаХраненияОстатков);
		КонецЕсли;
			
		МассивСовпадений = Объект[ИмяТЧ].НайтиСтроки(ОтборПоТЧ);
		Если МассивСовпадений.Количество() > 0 Тогда
			ДобавитьНовуюСтроку = Ложь;
		КонецЕсли;
		
		Если ДобавитьНовуюСтроку Тогда
			НоваяСтрока = Объект[ИмяТЧ].Добавить();
			НоваяСтрока.Номенклатура	= СтрокаШтрихкод.Владелец;
			НоваяСтрока.Количество		= СтрокаШтрихкод.Количество;
			Если ВестиУчетПоХарактеристикам Тогда 
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаШтрихкод.ХарактеристикаНоменклатуры;
			КонецЕсли;
			
			НоваяСтрока.СерияНоменклатуры = СтрокаШтрихкод.СерияНоменклатуры;
			
			Если ВладелецНайден И ЗначениеЗаполнено(СтрокаШтрихкод.ЕдиницаИзмерения) Тогда 
				НоваяСтрока.ЕдиницаИзмерения = СтрокаШтрихкод.ЕдиницаИзмерения;
			КонецЕсли;
			ИзмененнаяСтрока = НоваяСтрока;	
		Иначе
			// Строк может быть несколько - всегда берем последнюю
			СтараяСтрока = МассивСовпадений[МассивСовпадений.ВГраница()];
			Если НЕ ПерезаполнятьКоличество Тогда
				СтараяСтрока.Количество = СтараяСтрока.Количество + СтрокаШтрихкод.Количество;	
			Иначе
				СтараяСтрока.Количество = СтрокаШтрихкод.Количество;	
			КонецЕсли;
			ИзмененнаяСтрока = СтараяСтрока;
		КонецЕсли;
		
		// Вызовем события обработки
		Попытка
			Форма.ОбработкаРеквизитаУпр(ИмяТЧ + ".Номенклатура", ИзмененнаяСтрока);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Разбирает штрикход на компоненты данных.
//
// Параметры:
//  Штрихкод - Строка	 - штрихкод.
// 
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьДанныеИзШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	ДанныеИзШтрихкода = Новый Структура;
	ДанныеИзШтрихкода.Вставить("ТипШтрихкода", ТипШтрихкода);
	
	Если ТипШтрихкода = "ITF14" Или ТипШтрихкода = "EAN13" Или ТипШтрихкода = "EAN8" Тогда
		ДанныеИзШтрихкода.Вставить("Штрихкод", Штрихкод);
		Возврат ДанныеИзШтрихкода;
	КонецЕсли;
	
	Попытка
		ДанныеИзШтрихкода = ИнтеграцияМДЛПКлиентСервер.ДанныеШтрихкода(Штрихкод);
		ДанныеИзШтрихкода.Вставить("ТипШтрихкода", "ШтрихкодМДЛП");
	Исключение
		Попытка
			Данные = ИнтеграцияМДЛПКлиентСервер.РазобратьСтрокуШтрихкодаГС1(Штрихкод);
			Если Данные.ДанныеШтрихкода.Количество() > 0 И Данные.ДанныеШтрихкода[0].ИдентификаторПрименения = "01" Тогда
				ДанныеИзШтрихкода.Вставить("ТипШтрихкода"   , "ШтрихкодГС1");
				ДанныеИзШтрихкода.Вставить("Штрихкод"       , Данные.ПредставлениеШтрихкода);
				ДанныеИзШтрихкода.Вставить("ДанныеШтрихкода", Данные.ДанныеШтрихкода);
				ДанныеИзШтрихкода.Вставить("GTIN", Данные.ДанныеШтрихкода[0].Значение);
				Для Индекс = 1 По Данные.ДанныеШтрихкода.ВГраница() Цикл
					Если Данные.ДанныеШтрихкода[Индекс] = "10" Тогда
						ДанныеИзШтрихкода.Вставить("Серия", Данные.ДанныеШтрихкода[Индекс].Значение);
					ИначеЕсли Данные.ДанныеШтрихкода[Индекс] = "17" Тогда
						ГоденДоСтрокой = Данные.ДанныеШтрихкода[Индекс].Значение;
						Год = "20" + Сред(ГоденДоСтрокой, 1, 2);
						Месяц = Сред(ГоденДоСтрокой, 3, 2);
						День = Сред(ГоденДоСтрокой, 5, 2);
						Попытка
							Если День = "00" Тогда
								ГоденДо = КонецМесяца(Дата(Год + Месяц + "01000000"));
							Иначе
								ГоденДо = Дата(Год + Месяц + День + "000000");
							КонецЕсли;
						Исключение
							ВызватьИсключение НСтр("ru = 'Некорректный срок годности.'");
						КонецПопытки;
						ДанныеИзШтрихкода.Вставить("ГоденДо", ГоденДо);
					КонецЕсли
				КонецЦикла;
			Иначе
				ВызватьИсключение НСтр("ru = 'Не штрихкод товара ГС1'");
			КонецЕсли;
		Исключение
			ДанныеИзШтрихкода.Вставить("ТипШтрихкода", ?(ПустаяСтрока(ТипШтрихкода), "Прочее", ТипШтрихКода));
			ДанныеИзШтрихкода.Вставить("Штрихкод", ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Штрихкод));
		КонецПопытки;
	КонецПопытки;
	
	Возврат ДанныеИзШтрихкода;
	
КонецФункции

// Выполняет обработку полученных штрихкодов в форме
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - источник операции.
//  Объект				 - ДанныеФормыКоллекция			 - объект источника.
//  СШК					 - СправочникСсылка.ПодключаемоеОборудование - сканер.
//  ПараметрыДействия	 - Структура								 - параметры операции.
//  КэшированныеЗначения - Структура								 - Кеш данных.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ОбработатьШтрихкодыМаркировки(Форма, Объект, СШК, ПараметрыДействия, КэшированныеЗначения)
	
	Модифицированность = Ложь;	
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	КонецЕсли;
	
	НеизвестныеШтрихкодыТовара = Новый Массив;
	НеизвестныеШтрихкодыУпаковок = Новый Массив;
	Для каждого ДанныеШтрихкода Из ПараметрыДействия.Штрихкоды Цикл
		Если КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.Штрихкод] = Неопределено
		 Или КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.Штрихкод].НеизвестныйШтрихкод Тогда
			Если ДанныеШтрихкода.ТипШтрихкода = "ШтрихкодМДЛП" И ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
				НеизвестныеШтрихкодыУпаковок.Добавить(ДанныеШтрихкода);
			Иначе
				НеизвестныеШтрихкодыТовара.Добавить(ДанныеШтрихкода.Штрихкод);
				Если ДанныеШтрихкода.Свойство("GTIN") И ЗначениеЗаполнено(ДанныеШтрихкода.GTIN) Тогда
					Если КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.GTIN] = Неопределено
					 Или КэшированныеЗначения.Штрихкоды[ДанныеШтрихкода.GTIN].НеизвестныйШтрихкод Тогда
						НеизвестныеШтрихкодыТовара.Добавить(ДанныеШтрихкода.GTIN);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НеизвестныеШтрихкодыТовара.Количество() > 0 Тогда
		РаботаСТорговымОборудованиемСервер.ЗаполнитьДанныеПоШтрихкодамТоваров(НеизвестныеШтрихкодыТовара, КэшированныеЗначения);
	КонецЕсли;
	Если НеизвестныеШтрихкодыУпаковок.Количество() > 0 Тогда
		РаботаСТорговымОборудованиемСервер.ЗаполнитьДанныеПоШтрихкодамУпаковок(НеизвестныеШтрихкодыУпаковок, КэшированныеЗначения, ПараметрыДействия);
	КонецЕсли;  
	
	ТекущаяСтрока = Неопределено;
	
	Для Каждого ТекущийШтрихкод Из ПараметрыДействия.Штрихкоды Цикл
		
		ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекущийШтрихкод.Штрихкод];
		Если ДанныеШтрихкода.НеизвестныйШтрихкод
			И ТекущийШтрихкод.ТипШтрихкода <> "ШтрихкодМДЛП"
			И ТекущийШтрихкод.Свойство("GTIN")
			И ЗначениеЗаполнено(ТекущийШтрихкод.GTIN) Тогда
			ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекущийШтрихкод.GTIN];
		КонецЕсли;
		
		Если ДанныеШтрихкода.НеизвестныйШтрихкод И Не ЗначениеЗаполнено(ДанныеШтрихкода.Владелец) Тогда
			
			ПараметрыДействия.НеизвестныеШтрихкоды.Добавить(ТекущийШтрихкод);
			
			Если ПараметрыДействия.ПропускатьНенайденныеШтрихкоды Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеШтрихкода.ШтрихкодУпаковки Тогда
				Штрихкод = ТекущийШтрихкод.GTIN;
			Иначе
				Штрихкод = ДанныеШтрихкода.Штрихкод;
			КонецЕсли;
			Отбор = Новый Структура("Штрихкод", Штрихкод);
			
			Возврат ОбработатьНеизвестныйШКDataMatrix(Форма, ТекущийШтрихкод, ПараметрыДействия.ТипШК, СШК);
		Иначе
			
			Если ДанныеШтрихкода.НеизвестныйШтрихкод И ПараметрыДействия.ПропускатьНенайденныеШтрихкоды Тогда
				ПараметрыДействия.НеизвестныеШтрихкоды.Добавить(ТекущийШтрихкод);
				Продолжить;
			КонецЕсли;
			
			// Поиск по документу, для предотвращения дублирования строк
			Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, СерияНоменклатуры");
			
			ЗаполнитьЗначенияСвойств(Отбор, ДанныеШтрихкода);
			Отбор.Номенклатура = ДанныеШтрихкода.Владелец;
			
			ДанныеНоменклатуры = ДанныеНоменклатуры();
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, ДанныеШтрихкода);
			ДанныеНоменклатуры.Номенклатура = ДанныеШтрихкода.Владелец;
			
			Попытка
				Возврат Форма.СШКНоменклатура(ДанныеНоменклатуры, СШК);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;	
	ПараметрыДействия.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Показывает стандартное предупреждение считывания неизвестного штрихкода, если форма не предполагает его собственной обработки.
//
Процедура ПоказатьПредупреждениеНеизвестныйШтрихкод() Экспорт
	
	ПоказатьПредупреждение(, НСтр("ru='Неизвестный штрихкод! Данный штрихкод не присвоен ни одному объекту!'"));
	
КонецПроцедуры

Функция ОбработатьНеизвестныйШКDataMatrix(Форма, ТекущийШтрихкод, ТипШК, СШК)
	
	// Классическая обработка ШК
	// Будем использовать поиск по полному штрихкоду.
	// ШК = ТекущийШтрихкод.sgtin;
	ШК = ТекущийШтрихкод.Штрихкод;
	ВыборкаЗапроса = РаботаСТорговымОборудованиемСервер.ПолучитьВладельцаШК(ШК);
	Если ВыборкаЗапроса <> Неопределено Тогда
		Если ТипЗнч(ВыборкаЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ДанныеНоменклатуры = ДанныеНоменклатуры();
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, ВыборкаЗапроса);
			ДанныеНоменклатуры.Номенклатура = ВыборкаЗапроса.Владелец;
			ДанныеНоменклатуры.Штрихкод = ТекущийШтрихкод.Штрихкод;
			
			Попытка
				Возврат Форма.СШКНоменклатура(ДанныеНоменклатуры, СШК);
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				Возврат Форма.СШКНеизвестныйКод(ШК, ТипШК, СШК);
			Исключение
			КонецПопытки;	
		КонецЕсли;
	Иначе
		Попытка
			Возврат Форма.СШКНеизвестныйКод(ШК, ТипШК, СШК);
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
КонецФункции				
				
#КонецОбласти

#Область ККМ

// Вызвается перед редактирование реквизита чека ККТ для возможной нестандартной обработки.
//
// Параметры:
//  НазваниеРеквизитаККТ - Строка - Имя реквизита: "ОтраслевойРеквизит", "ОперационныйРеквизит", "ПерсональныеДанныеПокупателя" и т.д.
//  Форма				 - ФормаКлиентскогоПриложения - форма документа.
//  СтандартнаяОбработка - Булево	 - признак необходимости продожить стандартную обработку после процедуры.
//
Асинх Функция ПередРедактированиемРеквизитаЧекаККТ(НазваниеРеквизитаККТ, Форма) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	// Рецепты чеках по МДЛП
	ИмяТаблицыУчетаРецептов = "РегистрСведений.РецептыДокументовПродаж";
	Если НазваниеРеквизитаККТ = "ОтраслевойРеквизит"
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И Форма.Объект.Свойство("Ссылка")
		И ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг")
		И ДопСерверныеФункцииПовтИсп.ЕстьОбъектМетаданных(ИмяТаблицыУчетаРецептов)
	Тогда
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина,	 "Рецепт на отпускаемые ЛП");
		КнопкиВопроса.Добавить(Ложь,	 "Прочее (произвольный ввод)");
		ТекстВопроса = "Тип отраслевых сведений, которые будут редактироваться:";
		Ответ = Ждать ВопросАсинх(ТекстВопроса, КнопкиВопроса);
		
		Если Ответ Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(Форма, Ложь) Тогда
				// Открываем форму с данными рецепта для МДЛП в чеке
				ПараметрыФормы = Новый Структура("ДокументПродажи", Форма.Объект.Ссылка);
				ОткрытьФорму(ИмяТаблицыУчетаРецептов + ".ФормаЗаписи", ПараметрыФормы, Форма, Форма,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции

#КонецОбласти

#КонецОбласти
