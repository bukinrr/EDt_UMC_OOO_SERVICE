#Область СлужебныйПрограммныйИнтерфейс

// Есть ли натуральные скидки с номенклатурой, в которой ведется учет по характеристикам
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЕстьНатуральныеСкидкиСХарактеристиками() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыСкидокСоставНатуральнойСкидки.Ссылка
	|ИЗ
	|	Справочник.ВидыСкидок.СоставНатуральнойСкидки КАК ВидыСкидокСоставНатуральнойСкидки
	|ГДЕ
	|	(ВидыСкидокСоставНатуральнойСкидки.ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ ВидыСкидокСоставНатуральнойСкидки.Номенклатура.ВестиУчетПоХарактеристикам)"
	;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Есть ли действующие бонусные скидки
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЕстьДействующиеБонусныеСкидки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Дата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДействиеСкидок.ВидСкидки КАК ВидСкидки
	|ИЗ
	|	РегистрСведений.ДействиеСкидок КАК ДействиеСкидок
	|ГДЕ
	|	(ДействиеСкидок.ДатаОкончанияДействия > &Дата
	|	ИЛИ ДействиеСкидок.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))
	|	И ДействиеСкидок.ВидСкидки.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ТипыСкидок.Бонусы)"
	;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Есть ли в справочнике ВидыСкидок скидки, отбор которых использует данные ссылки документа продажи.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьСкидкиТребующиеЗаписьДокумента(Дата) Экспорт
	
	Дата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДействиеСкидок.ВидСкидки.ХранилищеОтбор КАК ХранилищеОтбор
	|ИЗ
	|	РегистрСведений.ДействиеСкидок КАК ДействиеСкидок
	|ГДЕ
	|	(ДействиеСкидок.ДатаОкончанияДействия > &Дата
	|	ИЛИ ДействиеСкидок.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))";

	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		 	
		ЭлементыКомпоновки = Выборка.ХранилищеОтбор.Получить().Отбор.Элементы;
		
		Для Каждого Элемент Из ЭлементыКомпоновки Цикл
			ЕстьОтбор = ЕстьОтборСкидкиПоПолямСсылкиДокумента(Элемент); 
			Если ЕстьОтбор Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции    

Функция ЕстьОтборСкидкиПоПолямСсылкиДокумента(ЭлементОтбора)
	
	Если ЭлементОтбора.Использование Тогда
		// Группа элементов отбора
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")Тогда
			Для Каждого ЭлементГруппы Из ЭлементОтбора.Элементы Цикл
				ЕстьОтбор = ЕстьОтборСкидкиПоПолямСсылкиДокумента(ЭлементГруппы);
				Если ЕстьОтбор Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Возврат Ложь;
			
		// Элемент
		ИначеЕсли (Лев(Строка(ЭлементОтбора.ЛевоеЗначение), 16) = "ДокументПродажи."
			И ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных"))
			Или (Лев(Строка(ЭлементОтбора.ПравоеЗначение), 16) = "ДокументПродажи."
			И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных"))
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Поддерживает ли конфигурация скидки на сертификаты/абонементы (ручные или автоматические).
// 
// Возвращаемое значение:
//  Булево - Истина, если скидки на сертификаты возможны.
//
Функция ЕстьСкидкиНаСертификаты() Экспорт
	
	// В будущем можно переделать.
	Возврат Метаданные.Документы.ОказаниеУслуг.ТабличныеЧасти.Сертификаты.Реквизиты.Найти("ПроцентСкидки") <> Неопределено;
	
КонецФункции

#КонецОбласти   