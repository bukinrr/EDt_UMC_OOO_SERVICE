#Область ПрограммныйИнтерфейс

Функция ИспользуетсяИнтеграцияРЭМД(Филиал = Неопределено) Экспорт
	
	Возврат УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ИспользоватьЕГИСЗ") И ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ИспользоватьРЭМД", Филиал);
	
КонецФункции

Функция ПолучитьИдентифакаторМИС_В_РЭМД(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ИдентификаторМИСвРЭМД", Филиал);
	
КонецФункции

Функция ПолучитьИдентификаторМИС_В_ИПС(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ИдентификаторМИСвИПС", Филиал);
	
КонецФункции

Функция ПолучитьИдентификаторМИС_В_ГИП(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ИдентификаторМИСвГИП", Филиал);
	
КонецФункции

Функция ПолучитьАдресФедеральногоСервисаГИП() Экспорт
	
	Возврат УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("АдресФедеральногоСервисаГИП",);
	
КонецФункции

// Возвращает наименование МИС для отправляемых пакетов.
Функция ПолучитьНазваниеИнформационнойСистемы(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("НазваниеМИС", Филиал);
	
КонецФункции

// Возвращает путь к конвертеру PDF/A ghostscript.
Функция ПолучитьПутьККонвертеруPDFAGhostScript() Экспорт
	
	Возврат УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ПутьККонвертеруPDFAGhostScript");
	
КонецФункции

// Сертификат для подписи сообщений SOAP
Функция ПолучитьСертификатПодписанияСообщенийSOAP(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("СертификатЭЦППодписиSOAPСообщений", Филиал);
	
КонецФункции

// Проверка использования обмена с ГИС РФ.
//
// Параметры:
//  Филиал	 - Неопределено	 - филиал пользователя.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ДоступенОбменСГИП(Филиал = Неопределено) Экспорт
	
	Результат = ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ИспользоватьГИП", Филиал)
				И ЗначениеЗаполнено(ПолучитьАдресФедеральногоСервисаГИП());
	Возврат Результат;
	
КонецФункции

// Код OID медицинской организации согласно реестру медицинских организаций РФ из НСИ Минздрава РФ.
Функция ПолучитьOIDИНаменованиеМедицинскойОрганизации() Экспорт
	
	Результат = Новый Структура("Наименование, КодOIDМедицинскойОрганизации", );
	Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	
	Если ЗначениеЗаполнено(Филиал) И ЗначениеЗаполнено(Филиал.Организация.МедицинскаяОрганизация) Тогда
		Результат.КодOIDМедицинскойОрганизации = Филиал.Организация.МедицинскаяОрганизация.OIDОрганизации;
		Результат.Наименование = Филиал.Организация.МедицинскаяОрганизация.Наименование;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПутьКАрхивуРЭМД(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ПутьКАрхивуРЭМД", Филиал);
	
КонецФункции

Функция ПолучитьПутьКАрхивуЛогов(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ПутьКАрхивуЛогов", Филиал);
	
КонецФункции

// Получение адреса сервиса РЭМД.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьАдресВебСервисаДляЗапросовВРЭМД() Экспорт
	
	Возврат УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("АдресФедеральногоСервисаРЭМД");
	
КонецФункции

Функция ПолучитьДатуНачалаОбменаИнформациейСРЭМД() Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("ДатаНачалаОбменаИнформациейСРЭМД");
	
КонецФункции

Функция ПолучитьРежимОтправкиСообщения() Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("РежимОтправкиСообщения");
	
КонецФункции

// Получает структуру параметров: тип, полноенаименование и видклассификатора справочника ЕГИСЗ
//
// Параметры:
//  OID	 - Строка - Оид справочника 
// 
// Возвращаемое значение:
//  Структура:
//		* Тип - Тип - Тип справочника
//		* ПолноеНаименование - Строка - Полное наименование справочника
//		* ВидКлассификатора - ПеречислениеСсылка.ВидыКлассификаторовМинЗдрава - Вид классификатора
//
Функция ПолучитьПараметрыСправочникаЕГИСЗ(OID) Экспорт
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты.УИДЕГИСЗ.Состав Цикл
		
		Если Строка(ЭлементСостава.Использование) <> "Использовать" Тогда // ИспользованиеОбщегоРеквизита.
			Продолжить;
		КонецЕсли;
		
		Справочник = ЭлементСостава.Метаданные;
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Справочник.ПолноеИмя());
		
		Если Справочник.Имя = "КлассификаторыМинЗдрава" Тогда
			Для Каждого ВидКлассификатора Из Перечисления.ВидыКлассификаторовМинЗдрава Цикл
				ОидСправочника = Неопределено;
				Попытка
					ОидСправочника = Менеджер.ПолучитьOIDСправочника(ВидКлассификатора);
					Если ОидСправочника = OID Тогда
						ТипСправочника					= ТипЗнч(Менеджер.ПустаяСсылка());
						ПолноеНаименованиеСправочника	= Справочник.ПолноеИмя();
						ВидКлассификатораСправочника	= ВидКлассификатора;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Попытка
					СписокАльтернативныхOID = Менеджер.ПолучитьАльтернативныеOID(ВидКлассификатора);
					Для Каждого АльтернативныйOID Из СписокАльтернативныхOID Цикл
						Если АльтернативныйOID = OID Тогда
							ТипСправочника					= ТипЗнч(Менеджер.ПустаяСсылка());
							ПолноеНаименованиеСправочника	= Справочник.ПолноеИмя();
							ВидКлассификатораСправочника	= ВидКлассификатора;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Исключение
				КонецПопытки;
				
				Если ВидКлассификатораСправочника <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Попытка
				ОидСправочника = Менеджер.ПолучитьOIDСправочника();
				Если ОидСправочника = OID Тогда
					ТипСправочника					= ТипЗнч(Менеджер.ПустаяСсылка());
					ПолноеНаименованиеСправочника	= Справочник.ПолноеИмя();
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				СписокАльтернативныхOID = Менеджер.ПолучитьАльтернативныеOID();
				Для Каждого АльтернативныйOID Из СписокАльтернативныхOID Цикл
					Если АльтернативныйOID = OID Тогда
						ТипСправочника					= ТипЗнч(Менеджер.ПустаяСсылка());
						ПолноеНаименованиеСправочника	= Справочник.ПолноеИмя();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ТипСправочника <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитПолногоНаименования = "Наименование";
	
	РеквизитыПолныхНаименований = Новый Массив;
	РеквизитыПолныхНаименований.Добавить(НРег("НаименованиеПолное"));
	РеквизитыПолныхНаименований.Добавить(НРег("ПолноеНаименование"));
	
	Для Каждого Реквизит Из Справочник.Реквизиты Цикл
		Если РеквизитыПолныхНаименований.Найти(НРег(Реквизит.Имя)) <> Неопределено Тогда
			РеквизитПолногоНаименования = Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Тип",							ТипСправочника);
	Параметры.Вставить("Наименование",					Справочник.Имя);
	Параметры.Вставить("Пояснение",						Справочник.Пояснение);
	Параметры.Вставить("Представление",					Справочник.Синоним);
	Параметры.Вставить("ПолноеНаименование",			ПолноеНаименованиеСправочника);
	Параметры.Вставить("РеквизитПолногоНаименования",	РеквизитПолногоНаименования);
	
	Если ВидКлассификатораСправочника <> Неопределено Тогда
		Параметры.Вставить("ВидКлассификатора",ВидКлассификатораСправочника);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает ммя реквизита по которому заполнять параметр DisplayName в шаблоне
//
// Параметры:
//  Справочник	 - Строка - Оид справочника ЕГИСЗ ИЛИ строка типа справочника ЕГИСЗ
//				 - Строка - Оид справочника ЕГИСЗ 
// 
// Возвращаемое значение:
//  Строка - Имя реквизита по которому заполнять параметр DisplayName в шаблоне
//
Функция ПолучитьИменаРеквизитовКлассификатора(Справочник) Экспорт
	
	Если СтрНайти(Справочник, "СправочникСсылка.") Тогда
		// Тип справочника
		ПолноеИмя	= Метаданные.НайтиПоТипу(Тип(Справочник)).ПолноеИмя();
		Менеджер	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	Иначе
		// Оид
		ПолноеИмя	= ПолучитьПараметрыСправочникаЕГИСЗ(Справочник).ПолноеНаименование;
		Менеджер	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	КонецЕсли;
	
	Попытка
		СтруктураВозвращаемогоЗначения = Менеджер.ПолучитьИмяРеквизитаDisplayNameИCode();
	Исключение
		СтруктураВозвращаемогоЗначения = Новый Структура;
	КонецПопытки;
	
	Возврат СтруктураВозвращаемогоЗначения;
	
КонецФункции

Функция ПолучитьИменаРеквизитовКлассификатораПоВидуКлассификатора(ВидКлассификатора) Экспорт
	
	ПолноеИмя	= ВидКлассификатора.Метаданные().ПолноеИмя();
	Менеджер	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	Попытка
		СтруктураВозвращаемогоЗначения = Менеджер.ПолучитьИмяРеквизитаDisplayNameИCode(ВидКлассификатора);
	Исключение
		СтруктураВозвращаемогоЗначения = Новый Структура;
	КонецПопытки;
	
	Возврат СтруктураВозвращаемогоЗначения;
	
КонецФункции

Функция ПолучитьНаименованиеИВерсиюЭлементаКлассификатора(Идентификатор, ВидКлассификатора = Неопределено, ИмяСправочника = Неопределено, РеквизитПолногоНаименования = Неопределено) Экспорт
	
	Если ВидКлассификатора <> Неопределено Тогда
		Запрос = ЗапросДляНаименованияИВерсииКлассификатораПоВидуКлассификатора(Идентификатор, ВидКлассификатора);
	ИначеЕсли ЗначениеЗаполнено(ИмяСправочника) Тогда
		Запрос = ЗапросДляНаименованияИВерсииКлассификатораПоИмениСправочника(Идентификатор, ИмяСправочника, РеквизитПолногоНаименования);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Наименование, Версия", Выборка.Наименование, Выборка.Версия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция OIDСправочникаПоВидуКлассификатора(ВидКлассификатора) Экспорт
	
	Возврат Справочники.КлассификаторыМинЗдрава.ПолучитьOIDСправочника(ВидКлассификатора);
	
КонецФункции

Функция OIDСправочникаПоТипу(Справочник) Экспорт
	
	Если СтрНайти(Справочник, "СправочникСсылка.") Тогда
		// Тип справочника
		ПолноеИмя	= Метаданные.НайтиПоТипу(Тип(Справочник)).ПолноеИмя();
		Менеджер	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	Иначе
		// Оид
		Возврат Справочник;
	КонецЕсли;
	
	Возврат Менеджер.ПолучитьOIDСправочника();
	
КонецФункции

Функция ПолучитьТаблицуСправочниковЕГИСЗ() Экспорт
	
	ТаблицаСправочников = Новый ТаблицаЗначений();
	ТаблицаСправочников.Колонки.Добавить("Имя",					Новый ОписаниеТипов("Строка"));
	ТаблицаСправочников.Колонки.Добавить("Представление",		Новый ОписаниеТипов("Строка"));
	ТаблицаСправочников.Колонки.Добавить("oid",					Новый ОписаниеТипов("Строка"));
	ТаблицаСправочников.Колонки.Добавить("ВидКлассификатора",	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКлассификаторовМинЗдрава"));
	ТаблицаСправочников.Колонки.Добавить("АльтернативныеOid",	Новый ОписаниеТипов("Массив"));
	ТаблицаСправочников.Колонки.Добавить("ПриоритетЗагрузки",	Новый ОписаниеТипов("Число"));
	ТаблицаСправочников.Колонки.Добавить("РежимыЗагрузки",		Новый ОписаниеТипов("Массив"));
	
	Для Каждого ЭлементСостава из Метаданные.ОбщиеРеквизиты.УИДЕГИСЗ.Состав Цикл
		
		Если Строка(ЭлементСостава.Использование) <> "Использовать" Тогда // ИспользованиеОбщегоРеквизита.
			Продолжить;
		КонецЕсли;
		
		Справочник = ЭлементСостава.Метаданные;
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Справочник.ПолноеИмя());
		
		Если Справочник.Имя = "КлассификаторыМинЗдрава" Тогда
			Для Каждого ВидКлассификатора Из Перечисления.ВидыКлассификаторовМинЗдрава Цикл
				ОидСправочника = Менеджер.ПолучитьOIDСправочника(ВидКлассификатора);
				
				НоваяСтрока = ТаблицаСправочников.Добавить();
				НоваяСтрока.Имя					= Справочник.Имя;
				НоваяСтрока.Представление		= Строка(ВидКлассификатора);
				НоваяСтрока.oid					= ОидСправочника;
				НоваяСтрока.ВидКлассификатора	= ВидКлассификатора;
				НоваяСтрока.ПриоритетЗагрузки	= ПолучитьПриоритетЗагрузкиСправочника(ОидСправочника);
				НоваяСтрока.РежимыЗагрузки		= РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.РежимыЗагрузкиКлассификатора(ОидСправочника);
				
				Попытка
					НоваяСтрока.АльтернативныеOid = Менеджер.ПолучитьАльтернативныеOID(ВидКлассификатора);
				Исключение
					НоваяСтрока.АльтернативныеOid = Новый Массив();
				КонецПопытки;
			КонецЦикла;
		Иначе
			Попытка
				ОидСправочника = Менеджер.ПолучитьOIDСправочника();
				НоваяСтрока						= ТаблицаСправочников.Добавить();
				НоваяСтрока.Имя					= Справочник.Имя;
				НоваяСтрока.Представление		= Строка(Справочник);
				НоваяСтрока.oid					= ОидСправочника;
				НоваяСтрока.ВидКлассификатора	= Неопределено;
				НоваяСтрока.ПриоритетЗагрузки	= ПолучитьПриоритетЗагрузкиСправочника(ОидСправочника);
				НоваяСтрока.РежимыЗагрузки		= РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.РежимыЗагрузкиКлассификатора(ОидСправочника);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Попытка
				НоваяСтрока.АльтернативныеOid = Менеджер.ПолучитьАльтернативныеOID();
			Исключение
				НоваяСтрока.АльтернативныеOid = Новый Массив();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСправочников.Сортировать("ПриоритетЗагрузки");
	
	Возврат ТаблицаСправочников;
	
КонецФункции

Функция СохранятьЛогСинхронныхСообщенийЕГИСЗ() Экспорт
	Возврат Константы.СохранятьЛогСинхронныхСообщенийЕГИСЗ.Получить();
КонецФункции

Функция ДанныеВерсииКлассификатора(OID, Версия = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПоследнейВерсии = Новый Структура("ВерсияКлассификатора, Наименование", "", "");
	
	НЗ = РегистрыСведений.НаименованияВерсийКлассификаторовЕГИСЗ.СоздатьНаборЗаписей();
	НЗ.Отбор.OIDКлассификатора.Установить(OID);
	НЗ.Прочитать();
	
	тзНаименований = НЗ.Выгрузить();
	тзНаименований.Колонки.Добавить("чВерсияКлассификатора");
	
	Для Каждого СтрокаНаименованияВерсии Из тзНаименований Цикл
		СтрокаНаименованияВерсии.чВерсияКлассификатора = ЗагрузкаКлассификаторовНСИЕГИСЗ.ЧислоВерсииКлассификатора(СтрокаНаименованияВерсии.ВерсияКлассификатора);
	КонецЦикла;
	тзНаименований.Сортировать("чВерсияКлассификатора Убыв");
	
	чВерсияКлассификатораМинздрава = ЗагрузкаКлассификаторовНСИЕГИСЗ.ЧислоВерсииКлассификатора(Версия);
	
	Для Каждого СтрокаНаименованияВерсии Из тзНаименований Цикл
		Если Версия <> Неопределено
			И (СтрокаНаименованияВерсии.OIDКлассификатора <> OID
				Или СтрокаНаименованияВерсии.чВерсияКлассификатора > чВерсияКлассификатораМинздрава)
		Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДанныеПоследнейВерсии, СтрокаНаименованияВерсии);
		Прервать;
	КонецЦикла;
	
	Возврат ДанныеПоследнейВерсии;
	
КонецФункции

Функция КэшОтветаЕГИСЗ(МедицинскаяОрганизация, Подсистема, Запрос) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.КэшОтветаЕГИСЗ(МедицинскаяОрганизация, Подсистема, Запрос);
	
КонецФункции

Функция ПолучитьМедицинскуюОрганизацию(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("МедицинскаяОрганизация", Филиал);
	
КонецФункции

Функция ОтладочныйРежимРаботыЕГИСЗ() Экспорт
	
	Возврат УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтладочныйРежимРаботыЕГИСЗ");
	
КонецФункции

Функция КэшироватьОтветыРЭМД(Филиал = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеНастройки("КэшироватьОтветыРЭМД", Филиал);
	
КонецФункции

Функция ПолучитьПриоритетЗагрузкиСправочника(OID) Экспорт
	
	Приоритеты = Новый Соответствие();
	Приоритеты.Вставить("1.2.643.5.1.13.13.99.2.1079",	1);	// ВидыСтруктурированныхЭлектронныхМедицинскихДокументов
	Приоритеты.Вставить("1.2.643.5.1.13.13.11.1522",	2);	// ВидыМедицинскихДокументов
	Приоритеты.Вставить("1.2.643.5.1.13.13.11.1070",	2);	// НоменклатураМедицинскихУслуг
	Приоритеты.Вставить("1.2.643.5.1.13.13.99.2.638",	2);	// РеестрРуководствПоРеализацииСтруктурированныхЭлектронныхМедицинскихДокументов
	Приоритеты.Вставить("1.2.643.5.1.13.13.11.1520",	3);	// РегистрируемыеЭлектронныеМедДокументы
	Приоритеты.Вставить("1.2.643.5.1.13.13.99.2.368",	3);	// РолиПриПодписиМедДокументов
	
	Если Приоритеты.Получить(OID) <> Неопределено Тогда
		Возврат Приоритеты.Получить(OID);
	Иначе
		Возврат 99;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РазыменовательПространствРЭМД() Экспорт
	
	Возврат Новый РазыменовательПространствИменDOM(ПространстваИменРЭМД());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает документ DOM из текста XML
//
// Параметры:
//  ТекстXML	 - Строка - текст XML документа.
// 
// Возвращаемое значение:
//   ДокументDOM.
//
Функция ПостроитьDOM(ТекстXML) Экспорт
	
	Возврат РаботаСDOMКлиентСервер.DOMИзСтрокиXML(ТекстXML);
	
КонецФункции

// Перечень путей к пространтсвам имен подсистемы РЭМД.
// 
// Возвращаемое значение:
//  Соответствие.
//
Функция ПространстваИменРЭМД()
	
	Пространства = Новый Соответствие;
	
	Пространства.Вставить("ns1", "http://egisz.rosminzdrav.ru");
	Пространства.Вставить("ns2", "http://egisz.rosminzdrav.ru/iehr/emdr/service/");
	Пространства.Вставить("ns3", "http://egisz.rosminzdrav.ru/iehr/emdr/callback/");
	
	Возврат Пространства;
	
КонецФункции

// Получает параметры для быстрого создания адресов.
//
// Параметры:
//
// Возвращаемое значение:
//   Структура   - данные создания медицинского страхового полиса.
//
Функция ПараметрыСозданияАдреса() Экспорт
	
	ТаблицаАдресов = Новый ТаблицаЗначений;
	
	Для Каждого РеквизитАдреса Из Метаданные.РегистрыСведений.КонтактнаяИнформация.Ресурсы Цикл
		ТаблицаАдресов.Колонки.Добавить(РеквизитАдреса.Имя, РеквизитАдреса.Тип);
	КонецЦикла;
	
	Возврат ТаблицаАдресов;
	
КонецФункции

Функция ПолучитьНаборСхемXML(ПространстваИменЧерезСимволПС) Экспорт
	
	МассивПространствИмен = СтрРазделить(ПространстваИменЧерезСимволПС, Символы.ПС, Ложь);
	НаборСхем = Новый НаборСхемXML;
	
	// Не используем цикл Для, поскольку размер массива может измениться из-за директив
	// <xs:import> в схемах.
	Индекс = 0;
	Пока Индекс < МассивПространствИмен.Количество() Цикл
		ИнтеграцияЕГИСЗСервер.ДобавитьВНаборСхем(НаборСхем, МассивПространствИмен, Индекс);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат НаборСхем;
	
КонецФункции

Функция ПолучитьТекстФайлаСоСхемой(ПространствоИмен) Экспорт
	
	ПространстваРЭМД = ПространстваИменРЭМД();
	
	Если	 ПространствоИмен = ПространстваРЭМД.Получить("ns1")
		 Или ПространствоИмен = ПространстваРЭМД.Получить("ns3")
	Тогда
		ОписаниеWSDL = ПолучитьМакетОписанияWSDL("РЭМДФедеральный", Ложь);
		
	ИначеЕсли	ПространствоИмен = ПространстваРЭМД.Получить("ns2")
			Или	ПространствоИмен = ПространстваИмен.wsu()
	Тогда
		ОписаниеWSDL = ПолучитьМакетОписанияWSDL("РЭМДService", Ложь);
		
	Иначе
		ЗаписьЖурналаРегистрации(
			"ИнтеграцияЕГИСЗ.Ошибка",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон("ПолучитьТекстФайлаСоСхемой(ПространствоИмен) получил неожиданное пространство имен: %1.", ПространствоИмен)
		);
		ВызватьИсключение("ПолучитьТекстФайлаСоСхемой(ПространствоИмен) получил неожиданное пространство имен.");
	КонецЕсли;
	
	Возврат ОписаниеWSDL;
	
КонецФункции

Функция ПолучитьМакетОписанияWSDL(ВнутреннееИмя, ПроверятьНаличиеПараметра = Истина) Экспорт
	
	// По внутреннему имени найдем общий макет описания WSDL и загрузим его.
	ИмяМакета = СтрШаблон("ИнтеграцияЕГИСЗ%1WSDL", ВнутреннееИмя);
	ОписаниеWSDL = ПолучитьОбщийМакет(ИмяМакета).ПолучитьТекст();
	
	// В описании WSDL есть один параметр, который нужно заменить на URL веб-сервиса.
	Если ПроверятьНаличиеПараметра И СтрНайти(ОписаниеWSDL, "%1") = 0 Тогда
		ЗаписьЖурналаРегистрации(
			"ИнтеграцияЕГИСЗ.Ошибка",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон("В макете %1 нет параметра.", ИмяМакета)
		);
	КонецЕсли;
	
	Возврат ОписаниеWSDL;
	
КонецФункции

// Строка допустимых пробельных символов
//
// Возвращаемое значение:
//   Строка - Строка, состоящая из пробела и символов объекта Символы.
///
Функция ПробельныеСимволы() Экспорт
	
	Возврат
		СтрШаблон(
			" %1%2%3%4%5%6",
			Символы.ВК,
			Символы.ВТаб,
			Символы.НПП,
			Символы.ПС,
			Символы.ПФ,
			Символы.Таб
		)
	;
	
КонецФункции

Функция ПолучитьНастройкиОтправкиКлиентСервер() Экспорт
	
	Настройки = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕГИСЗНастройкиИнтеграции.МедицинскаяОрганизация КАК МедицинскаяОрганизация,
		|	ЕГИСЗНастройкиИнтеграции.РежимОтправкиСообщения КАК РежимОтправкиСообщения,
		|	ЕГИСЗНастройкиИнтеграции.СертификатЭЦППодписиSOAPСообщений КАК СертификатЭЦППодписиSOAPСообщений
		|ИЗ
		|	РегистрСведений.ЕГИСЗНастройкиИнтеграции КАК ЕГИСЗНастройкиИнтеграции
		|
		|УПОРЯДОЧИТЬ ПО
		|	РежимОтправкиСообщения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Опции = Новый Структура(
							"РежимОтправкиСообщения, ЭЦПМО",
							ВыборкаДетальныеЗаписи.РежимОтправкиСообщения,
							ВыборкаДетальныеЗаписи.СертификатЭЦППодписиSOAPСообщений
						);
			Настройки.Вставить(ВыборкаДетальныеЗаписи.МедицинскаяОрганизация, Опции);
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ЗапросДляНаименованияИВерсииКлассификатораПоВидуКлассификатора(Идентификатор, ВидКлассификатора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлассификаторыМинЗдрава.НаименованиеПолное КАК Наименование,
		|	КлассификаторыМинЗдрава.ВерсияКлассификатораМинздрава КАК Версия
		|ИЗ
		|	Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторыМинЗдрава.Атрибуты КАК АтрибутыКлассификатора
		|		ПО (АтрибутыКлассификатора.Ссылка = КлассификаторыМинЗдрава.Ссылка)
		|ГДЕ
		|	КлассификаторыМинЗдрава.ВидКлассификатора = &ВидКлассификатора
		|	И &Условие";
	
	Запрос.УстановитьПараметр("ВидКлассификатора", ВидКлассификатора);
	УстановитьУсловиеПоискаЭлементаСлужебногоИдентификатора(Запрос, ВидКлассификатора, Идентификатор);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросДляНаименованияИВерсииКлассификатораПоИмениСправочника(Идентификатор, ИмяСправочника, РеквизитПолногоНаименования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	&РеквизитПолногоНаименования КАК Наименование,
		|	КлассификаторыМинЗдрава.ВерсияКлассификатораМинздрава КАК Версия
		|ИЗ
		|	&ИмяСправочника КАК КлассификаторыМинЗдрава
		|ГДЕ
		|	КлассификаторыМинЗдрава.УИДЕГИСЗ = &УИДЕГИСЗ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитПолногоНаименования", "КлассификаторыМинЗдрава." + РеквизитПолногоНаименования);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", ИмяСправочника);
	Запрос.УстановитьПараметр("УИДЕГИСЗ", Число(Идентификатор));
	
	Возврат Запрос;
	
КонецФункции

Процедура УстановитьУсловиеПоискаЭлементаСлужебногоИдентификатора(Запрос, ВидКлассификатора, Идентификатор)
	
	Условие = Неопределено;
	Если ВидКлассификатора = Перечисления.ВидыКлассификаторовМинЗдрава.СправочникСекцийДокументов Тогда
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Условие = "АтрибутыКлассификатора.КЛЮЧ = ""CODE"" И ВЫРАЗИТЬ(АтрибутыКлассификатора.Значение КАК Строка(100)) = &Идентификатор";
	Иначе
		// Все остальные
		Попытка
			Запрос.УстановитьПараметр("УИДЕГИСЗ", Число(Идентификатор));
			Условие = "КлассификаторыМинЗдрава.УИДЕГИСЗ = &УИДЕГИСЗ";
		Исключение КонецПопытки;
	КонецЕсли;
	
	Если Условие = Неопределено Тогда
		Запрос.УстановитьПараметр("Условие", Ложь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти