	
#Область ПрограммныйИнтерфейс

#Область ОтправкаСообщений

Процедура ОтправкаСообщенийГИП(УИДСообщения = Неопределено) Экспорт
	
	Если Не ИнтеграцияЕГИСЗСерверПовтИсп.ДоступенОбменСГИП() Тогда
		Возврат;
	КонецЕсли;
	
	мУдаляемыеСообщения = Новый Массив;
	// Получим сообщения ГИП к отправке.
	СообщенияГИП = РегистрыСведений.ИнтеграцияЕГИСЗСообщенияГИП.СоздатьНаборЗаписей();
	Если УИДСообщения <> Неопределено Тогда 
		СообщенияГИП.Отбор.УИДСообщения.Установить(УИДСообщения);
	КонецЕсли;
	СообщенияГИП.Прочитать();
	
	// Отправим полученные сообщения ГИП.
	Для Каждого Запись Из СообщенияГИП Цикл
		Результат = ОтправитьСообщениеВГИП(Запись.Сообщение, Запись.УИДСообщения, Запись.ТипПакета, Запись.Пациент, Запись.МедицинскаяОрганизация, Запись.ТекстПоследнейОшибки);
		// Запомним какие сообщения надо убрать из регистра.
		Если Результат Тогда
			мУдаляемыеСообщения.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	// Убираем сообщения из набора записей регистра и сохраняем его.
	Для Каждого УС Из мУдаляемыеСообщения Цикл
		СообщенияГИП.Удалить(УС);
	КонецЦикла;
	//Если мУдаляемыеСообщения.Количество() > 0 Тогда
	//	СообщенияГИП.Записать(Истина);
	//КонецЕсли;
	// Фиксируем тексты ошибок по оставшимся записям и удаление успешно отправленных
	СообщенияГИП.Записать(Истина);
	
КонецПроцедуры

Функция ОтправитьСообщениеВГИП(Сообщение, Идентификатор, ТипПакета, Пациент, МедицинскаяОрганизация, ТекстПоследнейОшибки)
	
	Филиал = ФилиалМедицинскойОрганизации(МедицинскаяОрганизация);
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресФедеральногоСервисаГИП();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: ИЭМК (ГИП)";
	КонецЕсли;
	
	ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
						Адрес,
						Сообщение,
						ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ГИП(Филиал),
						Строка(Идентификатор), // Уникальный идентификатор сообщения.
						ТипПакета);
	
	ОтветСтруктурой = ИнтеграцияЕГИСЗСлужебныйСервер.РазобратьОтветHl7(ОтветОтСервера);
	
	Если ОтветСтруктурой.ЕстьОшибка Тогда
		ТекстОшибок = "";
		Для Каждого Деталь Из ОтветСтруктурой.Детали Цикл
			ТекстОшибок = ТекстОшибок + стрШаблон("%1 %2", Деталь.Код, Деталь.Сообщение) + Символы.ПС;
		КонецЦикла;
		Если ОтветСтруктурой.Детали = 0 Тогда
			ТекстОшибок = "Неизвестная ошибка. Смотреть события обмена.";
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
								"ИнтеграцияЕГИСЗ.Ошибка",
								УровеньЖурналаРегистрации.Ошибка,
								,,
								СтрШаблон("Ошибка при отправке сообщения  ""%1"" в ГИП:", Идентификатор) + Символы.ПС + ТекстОшибок);
								
		Сообщить(СтрШаблон("Ошибка при отправке сообщения  ""%1"" в ГИП:", Идентификатор) + Символы.ПС + ТекстОшибок);
		ТекстПоследнейОшибки = ТекстОшибок;
		Возврат Ложь;
	КонецЕсли;
	
	// Сохраним факт отправки сведений в ГИП
	
	Запись = РегистрыСведений.ГИПСтатусыКлиентов.СоздатьМенеджерЗаписи();	
	Запись.МедицинскаяОрганизация	= МедицинскаяОрганизация;
	Запись.ДатаОтправкиВГИП			= ТекущаяДатаСеанса();
	Запись.ОтправленВГИП			= Истина;
	Запись.Клиент					= Пациент;
	Запись.Записать(Истина);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеИПомещениеПакетовВОчередь

Функция СозданиеИзменениеПациента(Пациент, ПервичныйВводПациента = Ложь, МедицинскаяОрганизация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Пациент) Или Не ИнтеграцияЕГИСЗСерверПовтИсп.ДоступенОбменСГИП() Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПервичныйВводПациента Тогда
		СообщениеГип = ОбновитьДанныеОПациенте(Пациент, Не ПервичныйВводПациента);
		ТипПакета = "urn:hl7-org:v3:PRPA_IN201301";
	Иначе
		СообщениеГип = ОбновитьДанныеОПациенте(Пациент, Не ПервичныйВводПациента);
		ТипПакета = "urn:hl7-org:v3:PRPA_IN201302";
	КонецЕсли;
	
	УИД = ПоставитьСообщениеГИПВОчередь(СообщениеГип, ТипПакета, Пациент, МедицинскаяОрганизация);                         
	
	Возврат Строка(УИД);
	
КонецФункции

Функция ОбъединениеПациентов(Пациент, ДедублируемыйПациент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Пациент) Или Не ИнтеграцияЕГИСЗСерверПовтИсп.ДоступенОбменСГИП() Тогда
		Возврат "";
	КонецЕсли;
	
	СообщениеГип = ДедублированиеДанныхПациента(Пациент, Строка(ДедублируемыйПациент.УникальныйИдентификатор()));
	
	УИД = ПоставитьСообщениеГИПВОчередь(СообщениеГип, "urn:hl7-org:v3:PRPA_IN201304", Пациент);
	
	Возврат Строка(УИД);
	
КонецФункции

Функция ОбновитьДанныеОПациенте(Пациент, ИзвещениеНаИзменениеДанных = Ложь, ДанныеДляРегистрацииПациента = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ДанныеДляРегистрацииПациента = Неопределено Тогда
		Данные = ПолучитьДанныеПациентаДляРегистрацииВИЭМК(Пациент);
	Иначе
		Данные = ДанныеДляРегистрацииПациента;
	КонецЕсли;

	Данные = ПолучитьДанныеПациентаДляРегистрацииВИЭМК(Пациент);
	
	// Заполняем XML полученными из ИБ данными.
	Шаблон = ТекстXMLИзвещениеНаДобавлениеНовогоПациентаИлиИзмененияДанных(Не ИзвещениеНаИзменениеДанных,
								ЗначениеЗаполнено(Данные.Получить("[ТЕГ_ТЕЛЕФОН]")),
								ЗначениеЗаполнено(Данные.Получить("[ТЕГ_EMAIL]")),
								ЗначениеЗаполнено(Данные.Получить("[РЕГ_АДРЕС]")) Или ЗначениеЗаполнено(Данные.Получить("[РЕГ_СТРАНА]")),
								ЗначениеЗаполнено(Данные.Получить("[ВРЕМРЕГ_АДРЕС]")) Или ЗначениеЗаполнено(Данные.Получить("[ВРЕМРЕГ_СТРАНА]")),
								ЗначениеЗаполнено(Данные.Получить("[ФАКТ_АДРЕС]")) Или ЗначениеЗаполнено(Данные.Получить("[ФАКТ_СТРАНА]")),
								ЗначениеЗаполнено(Данные.Получить("[КОД_СОЦСТАТУС]")),
								Данные.Получить("[КОЛИЧЕСТВО_ЛЬГОТ]"),
								ЗначениеЗаполнено(Данные.Получить("[СНИЛС_НОМЕР]")),
								ЗначениеЗаполнено(Данные.Получить("[ПОЛИС_ОМС_НОМЕР]")),
								ЗначениеЗаполнено(Данные.Получить("[ДУЛ_НОМЕР]")),
								ЗначениеЗаполнено(Данные.Получить("[МЕСТОРОЖДЕНИЯ]")));
	
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Возврат ТелоСообщения;
	
КонецФункции

// Отправляет в ИЭМК (ГИП) извещение о дедублировании данных пациента.
Функция ДедублированиеДанныхПациента(Пациент, ИдентификаторДедублируемогоПациента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Шаблон = ТекстXMLИзвещениеНаДедублированиеДанныхОПациенте();
	
	РеквизитыОрганизации = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьOIDИНаменованиеМедицинскойОрганизации();
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.КодOIDМедицинскойОрганизации) Тогда
		ВызватьИсключение "Не заполнен ""Код OID Медицинской организации"" у организации: " + РеквизитыОрганизации.Наименование;
	КонецЕсли;

	Данные = Новый Соответствие;
	
	//OID мед. организации.
	Данные["[OID_MO]"]		= РеквизитыОрганизации.КодOIDМедицинскойОрганизации;
	// уникальное в пределах МО строковое значение.
	Данные["[MSG_ID]"]		= Строка(Новый УникальныйИдентификатор);
	// creationTime
	Данные["[CRTTIME]"]		= Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss");
	// uuid МИС
	Данные["[UUID_MIS]"]	= ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ГИП();
	// Название МИС
	Данные["[MIS_NAME]"]	= ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьНазваниеИнформационнойСистемы();
	// Название мед. организации.
	Данные["[MO_NAME]"]		= РеквизитыОрганизации.Наименование;
	// Идентификатор пациента.
	Данные["[PATIENT_ID]"]	= Строка(Пациент.УникальныйИдентификатор());
	
	Данные["[PATIENT_ID2]"]	= ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ИдентификаторДедублируемогоПациента);
	// Фамилия пациента.
	Данные["[ФАМИЛИЯ]"]		= ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(Пациент.Фамилия);
	// Имя пациента.
	Данные["[ИМЯ]"]			= ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(Пациент.Имя);
	// Отчество пациента.
	Данные["[ОТЧЕСТВО]"]	= ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(Пациент.Отчество);

	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Возврат ТелоСообщения;
	
КонецФункции

Процедура СформироватьСообщенияОбИзмененныхПациентах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИзмененныеПациенты = РегистрыСведений.ГИПИзмененныеПациенты.СоздатьНаборЗаписей();
	ИзмененныеПациенты.Прочитать();
	
	ПациентыКУдалениюИзГИП = Новый Массив;
	МедицинскиеОрганизации = ПолучитьИспользуемыеМедицинскиеОрганизации();
	
	Для Каждого ИзмененныйПациент Из ИзмененныеПациенты Цикл
		Для Каждого МО Из МедицинскиеОрганизации Цикл
			УИДСообщения = СозданиеИзменениеПациента(ИзмененныйПациент.Пациент, Не ОтправленВГИП(ИзмененныйПациент.Пациент), МО);
		КонецЦикла;
		Если ЗначениеЗаполнено(УИДСообщения) Тогда
			ПациентыКУдалениюИзГИП.Добавить(ИзмененныйПациент.Пациент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПациентКУдалениюИзГИП Из ПациентыКУдалениюИзГИП Цикл
		ГИПНоваяЗапись = РегистрыСведений.ГИПИзмененныеПациенты.СоздатьМенеджерЗаписи();
		ГИПНоваяЗапись.Пациент = ПациентКУдалениюИзГИП;
		ГИПНоваяЗапись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Подготавливает данные о пациенте для заполнения шаблоны xml пакета.
Функция ПолучитьДанныеПациентаДляРегистрацииВИЭМК(Пациент) Экспорт

	// Данные используемые в xml пакете.
	ДанныеДляXML = Новый Структура(
		"Фамилия, Имя, Отчество, ИдентификаторПациента, Телефон, Email, Пол, ДатаРождения, 
		|РЕГ_СТРАНА, РЕГ_ОБЛАСТЬ, РЕГ_ГОРОД, РЕГ_АДРЕС,
		|ВРЕМРЕГ_СТРАНА, ВРЕМРЕГ_ОБЛАСТЬ, ВРЕМРЕГ_ГОРОД, ВРЕМРЕГ_АДРЕС,
		|ФАКТ_СТРАНА, ФАКТ_ОБЛАСТЬ, ФАКТ_ГОРОД, ФАКТ_АДРЕС,
		|СоцстатусКод, СоцстатусНаименование, Льготы,
		|СНИЛС, ПОЛИС_ОМС_НОМЕР, ПОЛИС_ОМС_ДАТАДО, ПОЛИС_ОМС_ДАТАОТ, СТРАХОВАЯ_РеестровыйНомер, СТРАХОВАЯ_ИМЯ,
		|ДУЛ_ВИДДОКУМЕНТА_КОД,ДУЛ_ВИДДОКУМЕНТА_ИМЯ,ДУЛ_НОМЕР,ДУЛ_КОГДАВЫДАН,ДУЛ_КЕМВЫДАН,
		|МЕСТОРОЖДЕНИЯ"
	);
	
	ДанныеДляXML.Фамилия = Пациент.Фамилия;
	ДанныеДляXML.Имя = Пациент.Имя;
	ДанныеДляXML.Отчество = Пациент.Отчество;
	ДанныеДляXML.ИдентификаторПациента = Пациент.УникальныйИдентификатор();
	
	// Телефон.   
	КонтактныеДанные = ИнтеграцияЕГИСЗСервер.ПолучитьКонтактныеДанные(Пациент);
	Найденные = КонтактныеДанные.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
	Если Найденные.Количество() > 0 Тогда
		ДанныеДляXML.Телефон = Найденные[0].Представление;
	КонецЕсли;
	
	// Email
	Найденные = КонтактныеДанные.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий));
	Если Найденные.Количество() > 0 Тогда
		ДанныеДляXML.Email = Найденные[0].Представление;
	КонецЕсли;
	
	ДанныеДляXML.Пол = ПолПациентаВКод(Пациент.Пол);
	ДанныеДляXML.ДатаРождения = Пациент.ДатаРождения;
	
	// Адрес
	ЕстьАдресРегистрации = Ложь;
	ЕстьФактАдрес = Ложь;
	
	// Адрес регистрации
	АдресРегистрации = ИнтеграцияЕГИСЗСервер.ПолучитьАдресПоВидуАдреса(Пациент, Справочники.ВидыКонтактнойИнформации.АдресПочтовый);	
	Если ЗначениеЗаполнено(АдресРегистрации.Представление) Тогда
		СтруктураАдрес = РаботаСАдресами.СведенияОбАдресе(АдресРегистрации);
		ЕстьАдресРегистрации = Истина;
		Префикс = "РЕГ";
		
		ДанныеДляXML["РЕГ_СТРАНА"]		= СтруктураАдрес.Страна;
		ДанныеДляXML["РЕГ_ОБЛАСТЬ"]		= СтруктураАдрес.Регион;
		ДанныеДляXML["РЕГ_ГОРОД"]		= СтруктураАдрес.НаселенныйПункт;
		ДанныеДляXML["РЕГ_АДРЕС"]		= СтруктураАдрес.Представление;			
	КонецЕсли;
	
	// Адрес регистрации
	АдресФактический = ИнтеграцияЕГИСЗСервер.ПолучитьАдресПоВидуАдреса(Пациент, Справочники.ВидыКонтактнойИнформации.АдресФактический);	
	Если ЗначениеЗаполнено(АдресФактический.Представление) Тогда
		СтруктураАдрес = РаботаСАдресами.СведенияОбАдресе(АдресФактический);
		ЕстьФактАдрес = Истина;
		Префикс = "ФАКТ";
		
		ДанныеДляXML["ФАКТ_СТРАНА"]		= СтруктураАдрес.Страна;
		ДанныеДляXML["ФАКТ_ОБЛАСТЬ"]	= СтруктураАдрес.Регион;
		ДанныеДляXML["ФАКТ_ГОРОД"]		= СтруктураАдрес.НаселенныйПункт;
		ДанныеДляXML["ФАКТ_АДРЕС"]		= СтруктураАдрес.Представление;			
	КонецЕсли;
	
	// соц. статус
	Если Не ЗначениеЗаполнено(Пациент.СоцСтатус) Тогда
		ВызватьИсключение "Не выбран социальный статус для пациента!";
	КонецЕсли;
	ДанныеДляXML.СоцстатусКод = Пациент.СоцСтатус.УИДЕГИСЗ;
	ДанныеДляXML.СоцстатусНаименование = Пациент.СоцСтатус.Наименование;
	
	// категория льгот.
	ДанныеДляXML.Льготы = Новый Массив;
	Номер = 1;
	Льготы = ПолучитьЛьготыПациента(Пациент);
	Для Каждого строкаТЧ Из Льготы Цикл			
		ДанныеДляXML.Льготы.Добавить(
			Новый Структура("Номер, Код, Наименование",
					Номер, 
					строкаТЧ.УИДЕГИСЗ,
					строкаТЧ.ПолноеНаименование
				)
		);
		Номер = Номер + 1;
	КонецЦикла;
	
	
	// СНИЛС
	СНИЛС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пациент, "СНИЛС");
	СНИЛС = стрЗаменить(СНИЛС, "-", "");
	СНИЛС = стрЗаменить(СНИЛС, " ", "");
	ДанныеДляXML.СНИЛС = СНИЛС;
	
	// Полис ОМС.
	ТаблицаПолисов =  ИнтеграцияЕГИСЗСервер.ПолучитьСтраховыеПолисы(Пациент);
	ЕстьДатаПолисаОМС = Ложь;
	Для Каждого Полис Из ТаблицаПолисов Цикл
		ДанныеДляXML.ПОЛИС_ОМС_НОМЕР = Полис.Серия + Полис.Номер;
		ДанныеДляXML.ПОЛИС_ОМС_ДАТАОТ = Полис.СрокДействияНачало;
		ДанныеДляXML.ПОЛИС_ОМС_ДАТАДО = Полис.СрокДействия;
		
		Если ЗначениеЗаполнено(ДанныеДляXML.ПОЛИС_ОМС_ДАТАДО) Тогда
			ЕстьДатаПолисаОМС = Истина;
		КонецЕсли;
		
		ДанныеДляXML.СТРАХОВАЯ_РеестровыйНомер = Полис.СтраховаяКомпания.РеестровыйНомер;
		ДанныеДляXML.СТРАХОВАЯ_ИМЯ = Полис.СтраховаяКомпания.Наименование;
	КонецЦикла;
	
	// Документ удостоверяющий личность.
			
	ПаспДанные = РегистрыСведений.ПаспортныеДанные.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("ФизЛицо", Пациент));
	Если ЗначениеЗаполнено(ПаспДанные) Тогда

		Если Не ЗначениеЗаполнено(ПаспДанные.ДокументВид.КлассификаторВидовДУЛ) Тогда
			ВызватьИсключение "Код по ОМС не заполнен для вида документа: " + ПаспДанные.ДокументВид;
		КонецЕсли;
		
		ДанныеДляXML.ДУЛ_ВИДДОКУМЕНТА_КОД	= ПаспДанные.ДокументВид.КлассификаторВидовДУЛ.УИДЕГИСЗ;
		ДанныеДляXML.ДУЛ_ВИДДОКУМЕНТА_ИМЯ	= ПаспДанные.ДокументВид.Наименование;
		ДанныеДляXML.ДУЛ_НОМЕР				= ПаспДанные.ДокументСерия + ПаспДанные.ДокументНомер;
		ДанныеДляXML.ДУЛ_КОГДАВЫДАН			= ПаспДанные.ДокументДатаВыдачи;
		ДанныеДляXML.ДУЛ_КЕМВЫДАН			= ПаспДанные.ДокументКемВыдан;			
	КонецЕсли;
	
	АдресМестаРождения = ИнтеграцияЕГИСЗСервер.ПолучитьАдресПоВидуАдреса(Пациент, Справочники.ВидыКонтактнойИнформации.АдресМестаРождения);	
	Если ЗначениеЗаполнено(АдресМестаРождения.Представление) Тогда		
		ДанныеДляXML.МЕСТОРОЖДЕНИЯ = АдресМестаРождения.Представление;
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьOIDИНаменованиеМедицинскойОрганизации();
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.КодOIDМедицинскойОрганизации) Тогда
		ВызватьИсключение "Не заполнен ""Код OID Медицинской организации"" у организации: " + РеквизитыОрганизации.Наименование;
	КонецЕсли;
	
	Данные = Новый Соответствие;
	//OID мед. организации.
	Данные["[OID_MO]"] = РеквизитыОрганизации.КодOIDМедицинскойОрганизации;
	// уникальное в пределах МО строковое значение.
	Данные["[MSG_ID]"] = Строка(Новый УникальныйИдентификатор);
	// creationTime
	Данные["[CRTTIME]"] = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss");
	// uuid МИС
	Данные["[UUID_MIS]"] = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ГИП();
	// Название МИС
	Данные["[MIS_NAME]"] = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьНазваниеИнформационнойСистемы();
	// Название мед. организации.
	Данные["[MO_NAME]"] = РеквизитыОрганизации.Наименование;
	// Идентификатор пациента.
	Данные["[PATIENT_ID]"] = ДанныеДляXML.ИдентификаторПациента;
	// Фамилия пациента.
	Данные["[ФАМИЛИЯ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.Фамилия);
	// Имя пациента.
	Данные["[ИМЯ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.Имя);
	// Отчество пациента.
	Данные["[ОТЧЕСТВО]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.Отчество);
	// Телефон пациента.
	Если ЗначениеЗаполнено(ДанныеДляXML.Телефон) Тогда
		Данные["[ТЕГ_ТЕЛЕФОН]"] = стрШаблон("<telecom value=""tel:%1""/>", ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.Телефон));
	КонецЕсли;
	// Email пациента.
	Если ЗначениеЗаполнено(ДанныеДляXML.Email) Тогда
		Данные["[ТЕГ_EMAIL]"] = стрШаблон("<telecom value=""mailto:%1""/>", ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.Email));
	КонецЕсли;
	// Пол пациента.
	Данные["[ПОЛ]"] = ДанныеДляXML.Пол;
	// ДР
	Данные["[ДАТАРОЖДЕНИЯ]"] = Формат(ДанныеДляXML.ДатаРождения, "ДФ=yyyyMMdd");
	// Адрес. Через запятую: улица, дом, корпус, строение, квартира
	Данные["[РЕГ_АДРЕС]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.РЕГ_АДРЕС);
	Данные["[РЕГ_СТРАНА]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.РЕГ_СТРАНА);
	Данные["[РЕГ_ОБЛАСТЬ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.РЕГ_ОБЛАСТЬ);
	Данные["[РЕГ_ГОРОД]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.РЕГ_ГОРОД);

	Данные["[ВРЕМРЕГ_АДРЕС]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ВРЕМРЕГ_АДРЕС);
	Данные["[ВРЕМРЕГ_СТРАНА]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ВРЕМРЕГ_СТРАНА);
	Данные["[ВРЕМРЕГ_ОБЛАСТЬ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ВРЕМРЕГ_ОБЛАСТЬ);
	Данные["[ВРЕМРЕГ_ГОРОД]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ВРЕМРЕГ_ГОРОД);

	Данные["[ФАКТ_АДРЕС]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ФАКТ_АДРЕС);
	Данные["[ФАКТ_СТРАНА]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ФАКТ_СТРАНА);
	Данные["[ФАКТ_ОБЛАСТЬ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ФАКТ_ОБЛАСТЬ);
	Данные["[ФАКТ_ГОРОД]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ФАКТ_ГОРОД);

	// Соц.статус.
	Данные["[КОД_СОЦСТАТУС]"] = ДанныеДляXML.СоцстатусКод;
	Данные["[НАИМЕНОВАНИЕ_СОЦСТАТУС]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.СоцстатусНаименование);
	// Признак льготной категории населения.
	Данные["[КОЛИЧЕСТВО_ЛЬГОТ]"] = ДанныеДляXML.Льготы.Количество();
	Для Каждого Льгота Из ДанныеДляXML.Льготы Цикл
		Данные["[КОД_ЛЬГОТКАТЕГОРИЯ_" + Льгота.Номер + "]"] = Льгота.Код;
		Данные["[НАИМЕНОВАНИЕ_ЛЬГОТКАТЕГОРИЯ_" + Льгота.Номер + "]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(Льгота.Наименование);
	КонецЦикла;
	// СНИЛС.
	Данные["[СНИЛС_НОМЕР]"] = ДанныеДляXML.СНИЛС;
	// Полис ОМС.
	Данные["[ПОЛИС_ОМС_НОМЕР]"] = ДанныеДляXML.ПОЛИС_ОМС_НОМЕР;
	Данные["[ПОЛИС_ОМС_ДАТАДО]"] = Формат(ДанныеДляXML.ПОЛИС_ОМС_ДАТАДО, "ДФ=yyyyMMdd");
	Данные["[ПОЛИС_ОМС_ДАТАОТ]"] = Формат(ДанныеДляXML.ПОЛИС_ОМС_ДАТАОТ, "ДФ=yyyyMMdd");
	Данные["[СТРАХОВАЯ_РеестровыйНомер]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.СТРАХОВАЯ_РеестровыйНомер);
	Данные["[СТРАХОВАЯ_ИМЯ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.СТРАХОВАЯ_ИМЯ);
	// Паспорт.
	Данные["[ДУЛ_ВИДДОКУМЕНТА_КОД]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ДУЛ_ВИДДОКУМЕНТА_КОД);
	Данные["[ДУЛ_ВИДДОКУМЕНТА_ИМЯ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ДУЛ_ВИДДОКУМЕНТА_ИМЯ);
	Данные["[ДУЛ_НОМЕР]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ДУЛ_НОМЕР);
	Данные["[ДУЛ_КЕМВЫДАН]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.ДУЛ_КЕМВЫДАН);
	Данные["[ДУЛ_КОГДАВЫДАН]"] = Формат(ДанныеДляXML.ДУЛ_КОГДАВЫДАН, "ДФ=yyyyMMdd");
	// Место рождения.
	Данные["[МЕСТОРОЖДЕНИЯ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ДанныеДляXML.МЕСТОРОЖДЕНИЯ);

	Возврат Данные;
	
КонецФункции

// Отправляет в ИЭМК (ГИП) запрос на поиск и получение данных о пациенте.
Функция ЗапросДанныхОПациенте(ИдентификаторПациента = Неопределено, Фамилия = Неопределено, Имя = Неопределено, Отчество = Неопределено, ДатаРождения = Неопределено, Пол = Неопределено, Снилс = Неопределено) Экспорт
	
	Шаблон = ТекстXMLЗапросДанныхОПациенте(
		ЗначениеЗаполнено(Пол),
		ЗначениеЗаполнено(ДатаРождения),
		ЗначениеЗаполнено(ИдентификаторПациента),
		ЗначениеЗаполнено(Снилс),
		ЗначениеЗаполнено(Фамилия) Или ЗначениеЗаполнено(Имя) Или ЗначениеЗаполнено(Отчество)
	);
	
	РеквизитыОрганизации = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьOIDИНаменованиеМедицинскойОрганизации();
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.КодOIDМедицинскойОрганизации) Тогда
		ВызватьИсключение "Не заполнен ""Код OID Медицинской организации"" у организации: " + РеквизитыОрганизации.Наименование;
	КонецЕсли;

	Данные = Новый Соответствие;
	//OID мед. организации.
	Данные["[OID_MO]"] = РеквизитыОрганизации.КодOIDМедицинскойОрганизации;
	// уникальное в пределах МО строковое значение.
	Данные["[MSG_ID]"] = Строка(Новый УникальныйИдентификатор);
	// creationTime
	Данные["[CRTTIME]"] = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss");
	// uuid МИС
	Данные["[UUID_MIS]"] = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ГИП();
	// Название МИС
	Данные["[MIS_NAME]"] = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьНазваниеИнформационнойСистемы();
	// Название мед. организации.
	Данные["[MO_NAME]"] = РеквизитыОрганизации.Наименование;
	
	Данные["[QUERY_ID]"] = Строка(Новый УникальныйИдентификатор);
	
	// Идентификатор пациента.
	Данные["[PATIENT_ID]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(ИдентификаторПациента);
	// Фамилия пациента.
	Данные["[ФАМИЛИЯ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(Фамилия);
	// Имя пациента.
	Данные["[ИМЯ]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(Имя);
	// Отчество пациента.
	Данные["[ОТЧЕСТВО]"] = ИнтеграцияЕГИСЗСлужебныйСервер.ЭкранироватьЗначение(Отчество);
	// Пол пациента.
	Данные["[ПОЛ]"] = ПолПациентаВКод(Пол);
	// ДР
	Если ТипЗнч(ДатаРождения) = Тип("Число") Тогда
		Данные["[ДАТАРОЖДЕНИЯ_НАЧАЛО]"] = ?(ЗначениеЗаполнено(ДатаРождения), Формат(ДатаРождения, "ЧГ=0; ЧФ=Ч0101"), "");
		Данные["[ДАТАРОЖДЕНИЯ_КОНЕЦ]"] = ?(ЗначениеЗаполнено(ДатаРождения), Формат(ДатаРождения, "ЧГ=0; ЧФ=Ч1231"), "");
	Иначе
		Данные["[ДАТАРОЖДЕНИЯ_НАЧАЛО]"] = ?(ЗначениеЗаполнено(ДатаРождения), Формат(ДатаРождения, "ДФ=yyyyMMdd"), "");
		Данные["[ДАТАРОЖДЕНИЯ_КОНЕЦ]"] = ?(ЗначениеЗаполнено(ДатаРождения), Формат(ДатаРождения, "ДФ=yyyyMMdd"), "");
	КонецЕсли;
	// СНИЛС
	Данные["[СНИЛС_НОМЕР]"] = ЗначениеСНИЛС(Снилс);
	
	ТелоСообщения = ИнтеграцияЕГИСЗКлиентСервер.ПодставитьДанныеВШаблон(Шаблон, Данные);
	
	Адрес = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресФедеральногоСервисаГИП();
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		ИмяВебСервиса = "ИЭМК (ГИП)";
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: " + ИмяВебСервиса;
	КонецЕсли;

	ОтветОтСервера = ИнтеграцияЕГИСЗСлужебныйСервер.СформироватьИОтправитьSOAPЗапрос(
		Адрес,
		ТелоСообщения,
		ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор МИС в ИПС.
		Строка(Новый УникальныйИдентификатор), // Уникальный идентификатор сообщения.
		"urn:hl7-org:v3:PRPA_IN201305"
	);
	
	Результат = РазобратьРезультатПоискаПациентов(ОтветОтСервера.ПолучитьТелоКакСтроку());
	
	Возврат Результат;

КонецФункции

Функция РазобратьРезультатПоискаПациентов(Знач XML) Экспорт
	
	Результат = Новый Массив;
	ПоляСтруктурыРезультата = 
		"ИдентификаторПациента,Фамилия,Имя,Отчество,Телефон,Email,Пол,ДатаРождения,Адреса,СоциальныйСтатус,"
		"Льготы,ДУЛ,СтраховойНомерПФР,Полисы,МестоРождения,МедОрганизацияПациента,Неидентифицированный,ПрикреплениеПациента"
	;
	
	ЧитаемXML = Новый ЧтениеXML;
	ЧитаемXML.УстановитьСтроку(XML);
	
	ПостроительDOM = Новый ПостроительDOM;
	DOM = ПостроительDOM.Прочитать(ЧитаемXML);
	
	ТэгиСПациентами = DOM.ПолучитьЭлементыПоИмени("patientPerson");
	
	Для Каждого ТэгПациент Из ТэгиСПациентами Цикл
		
		Пациент = Новый Структура(ПоляСтруктурыРезультата);
		
		Пациент.Адреса = Новый Массив;
		Пациент.Льготы = Новый Массив;
		Пациент.ДУЛ = Новый Массив;
		Пациент.Полисы = Новый Массив;
		Пациент.Неидентифицированный = Ложь;
		
		Пациент.ИдентификаторПациента = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(ТэгПациент.РодительскийУзел, "id"),"extension");
		
		// Мед. организация отвечающая за хранение сведений о пациенте.
		Узел = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(ТэгПациент.РодительскийУзел, "assignedEntity");
		Если Узел <> Неопределено Тогда
			Пациент.МедОрганизацияПациента = Новый Структура("Код, Наименование");
			Пациент.МедОрганизацияПациента.Код = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "id"),"root");
			Пациент.МедОрганизацияПациента.Наименование = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "assignedOrganization"),"name");
		КонецЕсли;
		
		УзелПрикрепление = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(ТэгПациент.РодительскийУзел, "providerOrganization");
		Если УзелПрикрепление <> Неопределено Тогда
			Пациент.ПрикреплениеПациента = Новый Структура("Код, Наименование,Организация,ВрачСНИЛС,Участок");
			Пациент.ПрикреплениеПациента.Наименование	 = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(УзелПрикрепление,"name");
			Пациент.ПрикреплениеПациента.Код			 = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(УзелПрикрепление, "id"),"root");
			Пациент.ПрикреплениеПациента.ВрачСНИЛС		 = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(УзелПрикрепление, "district");
			Если ЗначениеЗаполнено(Пациент.ПрикреплениеПациента.Код) Тогда
				МОИзРеестра = Справочники.РеестрМедицинскихОрганизаций.НайтиПоРеквизиту("OIDОрганизации", Пациент.ПрикреплениеПациента.Код);
				Если ЗначениеЗаполнено(МОИзРеестра) Тогда
					Пациент.ПрикреплениеПациента.Организация = Справочники.Филиалы.НайтиПоРеквизиту("МедицинскаяОрганизация", МОИзРеестра);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Узел Из ТэгПациент.ДочерниеУзлы Цикл
			Если ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "Name") Тогда // ФИО
				Пациент.Фамилия = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Узел, "family");
				Пациент.Имя = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Узел, "given");
				Пациент.Отчество = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Узел, "given", 1);
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "telecom") Тогда // Контакты
				Контакт = Узел.ПолучитьАтрибут("value");
				Если стрНайти(Контакт, "tel:") > 0 Тогда
					Пациент.Телефон = стрЗаменить(Контакт, "tel:", "");
				ИначеЕсли стрНайти(Контакт, "mailto:") > 0 Тогда
					Пациент.Email = стрЗаменить(Контакт, "mailto:", "");
				КонецЕсли;
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "administrativeGenderCode") Тогда // Пол
				Код = Узел.ПолучитьАтрибут("code");
				Пациент.Пол = КодВПолПациента(Код);
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "birthTime") Тогда // ДР
				ДатаРождения = Узел.ПолучитьАтрибут("value");
				Пациент.ДатаРождения = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьДатуИзСтроки(ДатаРождения);
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "addr") Тогда // Адрес
				Адрес = Новый Структура("ВидАдреса, Страна, Область, Город, Представление");
				Тип = Узел.ПолучитьАтрибут("use");
				Адрес.ВидАдреса		= ТипАдресаПоКоду(Тип);
				Адрес.Страна		= ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Узел, "country");
				Адрес.Область		= ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Узел, "state");
				Адрес.Город			= ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Узел, "city");
				Адрес.Представление = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(Узел, "streetAddressLine");
				
				Пациент.Адреса.Добавить(Адрес);
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "asMember") Тогда // Соц. статус, Льгота
				Code = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "code");
				Если Code <> Неопределено Тогда
					Тип = Code.ПолучитьАтрибут("codeSystem");
					Если Тип = "1.2.643.5.1.13.2.1.1.366" Тогда
						// Соц. статус
						КодСоцСтатуса = Code.ПолучитьАтрибут("code");
						Пациент.СоциальныйСтатус = ПолучитьОбъектСправочникаПоКоду("КлассификаторыМинЗдрава", КодСоцСтатуса, Перечисления.ВидыКлассификаторовМинЗдрава.КлассификаторСоциальныхСтатусов);
					ИначеЕсли Тип = "1.2.643.5.1.13.2.1.1.358" Тогда
						// Льгота
						КодЛьготы = Code.ПолучитьАтрибут("code");
						Льгота = ПолучитьОбъектСправочникаПоКоду("КлассификаторыМинЗдрава", КодЛьготы, Перечисления.ВидыКлассификаторовМинЗдрава.КлассификаторКатегорийЛьгот);
						Если Льгота <> Неопределено Тогда
							Пациент.Льготы.Добавить(Льгота);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "asOtherIDs") Тогда // Документы
				ДУЛ = Новый Структура("Вид, Номер, КогдаВыдан, КемВыдан");
				ТипДокумента = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "documentType");
				Код = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(ТипДокумента, "code");
				Если Код = "5" Тогда
					//ДУЛ
					name = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(ТипДокумента, "qualifier"), "name");
					Если name <> Неопределено Тогда
						КодДУЛ = name.ПолучитьАтрибут("code");
						ДУЛ.Вид = ПолучитьОбъектСправочникаПоКоду("КлассификаторыМинЗдрава", КодДУЛ, Перечисления.ВидыКлассификаторовМинЗдрава.КлассификаторДокументовУдостоверяющихЛичность);
						Если ДУЛ.Вид <> Неопределено Тогда
							ДУЛ.Номер = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "documentNumber"),"number");
							Если ЗначениеЗаполнено(ДУЛ.Номер) Тогда
								ДУЛ.КемВыдан = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "scopingOrganization"), "name");
								ДУЛ.КогдаВыдан = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьДатуИзСтроки(Узел.ПолучитьАтрибут("effectiveTime"));
								Пациент.ДУЛ.Добавить(ДУЛ);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Код = "3" Тогда
					// СтраховойНомерПФР
					Пациент.СтраховойНомерПФР = ФорматированныйСНИЛС(
						ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(
							ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "documentNumber"),
							"number"
						),
						Ложь
					);
				ИначеЕсли Код = "1" Или Код = "2" Тогда
					// Полис ОМС
					Полис = Новый Структура("ИсточникФинансирования,Номер,СрокДействия,ДатаВыдачи,СтраховаяОрганизация,НаименованиеСтраховой");
					
					Полис.ИсточникФинансирования = ?(Код = "1", Перечисления.ТипыСтраховыхПрограмм.ОМС, Перечисления.ТипыСтраховыхПрограмм.ДМС);
					
					Полис.Номер = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "documentNumber"),"number");
					Если ЗначениеЗаполнено(Полис.Номер) Тогда
						Полис.СрокДействия = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьДатуИзСтроки(
							ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(
								ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(
									ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "effectiveTime"), 
									"high"
								),
								"value"
							)
						);
						Полис.ДатаВыдачи = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьДатуИзСтроки(
							ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(
								ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "effectiveTime"), 
								"value"
							)
						);
						КодСтраховой = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(
							ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(
								ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "scopingOrganization"), "id"
							),
							"extension"
						);
						Полис.СтраховаяОрганизация = ПолучитьОбъектСправочникаПоКоду("РеестрСтраховыхМедОрганизаций",КодСтраховой);
						Полис.НаименованиеСтраховой = ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(
							ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "scopingOrganization"),
							"name"
						);
						
						Пациент.Полисы.Добавить(Полис);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "birthPlace") Тогда // Место рождения.
				Пациент.МестоРождения = Новый Структура("Страна, Область, Город, Адрес");
				
				Пациент.МестоРождения.Страна	= ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "addr"),"country");
				Пациент.МестоРождения.Область	= ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "addr"),"state");
				Пациент.МестоРождения.Город		= ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "addr"),"city");
				Пациент.МестоРождения.Адрес		= ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьЭлемент(Узел, "addr"),"streetAddressLine");
			ИначеЕсли ИнтеграцияЕГИСЗСлужебныйСервер.СравнитьИмяЭлемента(Узел.ИмяУзла, "asUnidentified") Тогда // Признак неидентифицированного пациента.
				Пациент.Неидентифицированный = ?(НРег(ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьАтрибут(Узел, "value")) = "true", Истина, Ложь);
			КонецЕсли;
		КонецЦикла;
		
		Результат.Добавить(Пациент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// PRPA_IN201301RU02, PRPA_IN201302RU02
Функция ТекстXMLИзвещениеНаДобавлениеНовогоПациентаИлиИзмененияДанных(ЭтоДобавлениеНового, Телефон = Истина, Email = Истина, АдресРегистрации = Истина, ВременнаяРегистрация = Истина, ФактическийАдрес = Истина, СОЦСТАТУС = Истина, КатегорияЛьготКоличество = 1, Снилс = Истина, ПолисОМС = Истина, Паспорт = Истина, МестоРождения = Истина)

	Текст =
		"<"+?(ЭтоДобавлениеНового,"PRPA_IN201301RU02","PRPA_IN201302RU02")+" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|    xsi:schemaLocation=""urn:hl7-org:v3 ../../../../../../iemk-integration/iemk-integration-ws-api/src/main/resources/integration/schema/HL7V3/NE2008/multicacheschemas/" + ?(ЭтоДобавлениеНового,"PRPA_IN201301RU01.xsd","PRPA_IN201302RU01.xsd") + """
		|    xmlns=""urn:hl7-org:v3"" ITSVersion=""XML_1.0"">
		|<id root=""[OID_MO]"" extension=""[MSG_ID]""/>
		|<creationTime value=""[CRTTIME]""/>
		|<interactionId root=""1.2.643.5.1.13.2.7.3"" extension="""+?(ЭтоДобавлениеНового,"PRPA_IN201301RU02","PRPA_IN201302RU02")+"""/>
		|<processingCode code=""P""/>
		|<processingModeCode code=""T""/>
		|<acceptAckCode code=""AL""/>

		|<receiver typeCode=""RCV"">
		|<device classCode=""DEV"" determinerCode=""INSTANCE"">
		|<id root=""d5a0f9c0-5db4-11e3-949a-0800200c9a66""/>
		|<name>ИЭМК</name>
		|<asAgent classCode=""ASSIGNED"">
		|<representedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root = ""1.2.643.5.1.13""/>
		|<name>МЗРФ</name>
		|</representedOrganization>
		|</asAgent>
		|</device>
		|</receiver>

		|<sender typeCode=""SND"">
		|<device classCode=""DEV"" determinerCode=""INSTANCE"">
		|<id root=""[UUID_MIS]""/>
		|<name>[MIS_NAME]</name>
		|<asAgent classCode=""ASSIGNED"">
		|<representedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root = ""[OID_MO]""/>
		|<name>[MO_NAME]</name>
		|</representedOrganization>
		|</asAgent>
		|</device>
		|</sender>

		|<controlActProcess classCode=""CACT"" moodCode=""EVN"">
		|<subject typeCode=""SUBJ"">
		|<registrationEvent classCode=""REG"" moodCode=""EVN"">
		|<id nullFlavor=""NA""/>
		|<statusCode code=""active""/>
		|<subject1 typeCode=""SBJ"">
		|<patient classCode=""PAT"">
		|<id root=""[OID_MO]"" extension=""[PATIENT_ID]""/>
		|<statusCode code=""active""/>
		|<patientPerson>
		|<name>
		|<family>[ФАМИЛИЯ]</family>
		|<given>[ИМЯ]</given>
		|<given>[ОТЧЕСТВО]</given>
		|</name>"
		
		+?(Телефон,"
		|[ТЕГ_ТЕЛЕФОН]","")
		
		+?(Email, "
		|[ТЕГ_EMAIL]","")+"
		
		|<administrativeGenderCode code=""[ПОЛ]"" codeSystem=""1.2.643.5.1.13.2.1.1.156""/>
		|<birthTime value=""[ДАТАРОЖДЕНИЯ]""/>"
		
		+?(АдресРегистрации,"
		|<addr use=""HP"">
		|<streetAddressLine>[РЕГ_АДРЕС]</streetAddressLine>
		|<country>[РЕГ_СТРАНА]</country>
		|<state>[РЕГ_ОБЛАСТЬ]</state>
		|<city>[РЕГ_ГОРОД]</city>
		|</addr>","")
		
		+?(ВременнаяРегистрация, "
		|<addr use=""HP"">
		|<streetAddressLine>[ВРЕМРЕГ_АДРЕС]</streetAddressLine>
		|<country>[ВРЕМРЕГ_СТРАНА]</country>
		|<state>[ВРЕМРЕГ_ОБЛАСТЬ]</state>
		|<city>[ВРЕМРЕГ_ГОРОД]</city>
		|</addr>","")
		
		+?(ФактическийАдрес, "
		|<addr use=""H"">
		|<streetAddressLine>[ФАКТ_АДРЕС]</streetAddressLine>
		|<country>[ФАКТ_СТРАНА]</country>
		|<state>[ФАКТ_ОБЛАСТЬ]</state>
		|<city>[ФАКТ_ГОРОД]</city>
		|</addr>", "")
		
		+?(СОЦСТАТУС,"
		|<!-- социальный статус -->
		|<asMember classCode=""MBR"">
		|<group classCode=""PUB"">
		|<code code=""[КОД_СОЦСТАТУС]"" codeSystem=""1.2.643.5.1.13.2.1.1.366"" displayName=""[НАИМЕНОВАНИЕ_СОЦСТАТУС]""/>
		|</group>
		|</asMember>","")
		
		+ИнтеграцияЕГИСЗСлужебныйСервер.ПовторитьФрагментТекста(КатегорияЛьготКоличество,"
		|<!-- льготная категория населения -->
		|<asMember classCode=""MBR"">
		|<group classCode=""PUB"">
		|<code code=""[КОД_ЛЬГОТКАТЕГОРИЯ_%НОМЕР%]"" codeSystem=""1.2.643.5.1.13.2.1.1.358"" displayName=""[НАИМЕНОВАНИЕ_ЛЬГОТКАТЕГОРИЯ_%НОМЕР%]""/>
		|</group>
		|</asMember>")
		
		+?(Снилс,"
		|<!--СНИЛС-->
		|<asOtherIDs classCode=""IDENT"">
		|<documentType code=""3"" codeSystem=""1.2.643.5.1.13.2.7.1.62""/>
		|<documentNumber number=""[СНИЛС_НОМЕР]""/>
		|<scopingOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id nullFlavor=""NI""/>
		|</scopingOrganization>
		|</asOtherIDs>","")

		+?(ПолисОМС,"
		|<!--ПолисОМС-->
		|<asOtherIDs classCode=""HLD"">
		|<documentType code=""1"" codeSystem=""1.2.643.5.1.13.2.7.1.62""/>
		|<documentNumber number=""[ПОЛИС_ОМС_НОМЕР]""/>
		|<effectiveTime value=""[ПОЛИС_ОМС_ДАТАОТ]"">
		|{{<high value=""[ПОЛИС_ОМС_ДАТАДО]""/>}}
		|</effectiveTime>
		|<scopingOrganization  classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root=""1.2.643.5.1.13.2.1.1.635"" extension=""[СТРАХОВАЯ_РеестровыйНомер]""/>
		|<name>[СТРАХОВАЯ_ИМЯ]</name>
		|</scopingOrganization>
		|</asOtherIDs>","")


		+?(Паспорт,"
		|<!--ПаспортгражданинаРФ-->
		|<asOtherIDs classCode=""IDENT"">
		|<documentType code=""5"" codeSystem=""1.2.643.5.1.13.2.7.1.62"">
		|<qualifier>
		|<name code=""[ДУЛ_ВИДДОКУМЕНТА_КОД]"" codeSystem=""1.2.643.5.1.13.2.1.1.498"" codeSystemName=""Классификатор документов, удостоверяющих личность гражданина Российской Федерации"" displayName=""[ДУЛ_ВИДДОКУМЕНТА_ИМЯ]""/>
		|</qualifier>
		|</documentType>
		|<documentNumber number=""[ДУЛ_НОМЕР]""/>
		|{{<effectiveTime value=""[ДУЛ_КОГДАВЫДАН]""/>}}
		|<scopingOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id nullFlavor=""NI""/>
		|<name>[ДУЛ_КЕМВЫДАН]</name>
		|</scopingOrganization>
		|</asOtherIDs>","")

		+?(МестоРождения, "
		|<!--месторождения-->
		|<birthPlace>
		|<addr>
		|<streetAddressLine>[МЕСТОРОЖДЕНИЯ]</streetAddressLine>
		|</addr>
		|</birthPlace>","")
		
		+ "
		|<!-- признак неидентифицированного -->
		|<!--<asUnidentified value=""false""/>-->
		|<!-- Особые отметки -->
		|<!--<extraMark displayName=""Отсутствуют""/>-->
		|</patientPerson>
		|<providerOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root=""[OID_MO]""/>
		|<name>[MO_NAME]</name>
		|<contactParty classCode=""CON""></contactParty>
		|</providerOrganization>
		|</patient>
		|</subject1>
		|<custodian typeCode=""CST"">
		|<assignedEntity classCode=""ASSIGNED"">
		|<id  root=""[OID_MO]""/>
		|<assignedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<name>[MO_NAME]</name>
		|</assignedOrganization>
		|</assignedEntity>
		|</custodian>
		|</registrationEvent>
		|</subject>
		|</controlActProcess>
		|</"+?(ЭтоДобавлениеНового,"PRPA_IN201301RU02","PRPA_IN201302RU02")+">";
	
	Возврат Текст;
КонецФункции

// PRPA_IN201305RU02
Функция ТекстXMLЗапросДанныхОПациенте(ПолПациента = Истина, ДатаРождения = Истина, ИдентификаторПациента = Истина, Снилс = Истина, ФИО = Истина) 
	
	Текст =
		"<PRPA_IN201305RU02 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|	xsi:schemaLocation=""urn:hl7-org:v3 ../../../../../../iemk-integration/iemk-integration-ws-api/src/main/resources/integration/schema/HL7V3/NE2008/multicacheschemas/PRPA_IN201305RU01.xsd""
		|	xmlns=""urn:hl7-org:v3""
		|	ITSVersion=""XML_1.0"">
		|<id root=""[OID_MO]"" extension=""[MSG_ID]""/>
		|<creationTime value=""[CRTTIME]""/>
		|<interactionId root=""1.2.643.5.1.13.2.7.3"" extension=""PRPA_IN201305RU02""/>
		|<processingCode code=""P""/>
		|<processingModeCode code=""T""/>
		|<acceptAckCode code=""AL""/>

		|<receiver typeCode=""RCV"">
		|<device classCode=""DEV"" determinerCode=""INSTANCE"">
		|<id root=""d5a0f9c0-5db4-11e3-949a-0800200c9a66""/>
		|<name>ИЭМК</name>
		|<asAgent classCode=""ASSIGNED"">
		|	<representedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root = ""1.2.643.5.1.13""/>
		|	<name>МЗРФ</name>
		|	</representedOrganization>
		|	</asAgent>
		|</device>
		|</receiver>

		|<sender typeCode=""SND"">
		|<device classCode=""DEV"" determinerCode=""INSTANCE"">
		|<id root=""[UUID_MIS]""/>
		|<name>[MIS_NAME]</name>
		|<asAgent classCode=""ASSIGNED"">
		|<representedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root = ""[OID_MO]""/>
		|<name>[MO_NAME]</name>
		|</representedOrganization>
		|</asAgent>
		|</device>
		|</sender>
		
		|<controlActProcess classCode=""CACT"" moodCode=""EVN"">
		|<code code=""PRPA_IN201305RU02"" codeSystem=""1.2.643.5.1.13.2.7.3""/>
		|<queryByParameter>
		|<queryId root=""[OID_MO]"" extension=""[QUERY_ID]""/>
		|<statusCode code=""new""/>
		|<parameterList>"
		
		+?(ПолПациента, "
		|<livingSubjectAdministrativeGender>
		|<value code=""[ПОЛ]""/>
		|<semanticsText>LivingSubject.administrativeGender</semanticsText>
		|</livingSubjectAdministrativeGender>","")
		
		+?(ДатаРождения, "
		|<livingSubjectBirthTime>
		|<value>
		|<low value=""[ДАТАРОЖДЕНИЯ_НАЧАЛО]""/>
		|<high value=""[ДАТАРОЖДЕНИЯ_КОНЕЦ]""/>
		|</value>
		|<semanticsText>LivingSubject.birthTime</semanticsText>
		|</livingSubjectBirthTime>","")

		+?(ИдентификаторПациента, "
		|<!--Локальныйидентификаторпациента-->
		|<livingSubjectId classCode=""ROL"">
		|<id root=""[OID_MO]"" extension=""[PATIENT_ID]""/>
		|</livingSubjectId>","")

		+?(Снилс, "
		|<!--СНИЛС-->
		|<livingSubjectId classCode=""ROL"">
		|<documentType code=""3"" codeSystem=""1.2.643.5.1.13.2.7.1.62""/>
		|<documentNumber number=""[СНИЛС_НОМЕР]""/>
		|<scopingOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|					<id nullFlavor=""NI""/>
		|			</scopingOrganization>
		|</livingSubjectId>","")

		+?(ФИО,"
		|<livingSubjectName>
		|<value>
		|<family>[ФАМИЛИЯ]</family>
		|<given>[ИМЯ]</given>
		|<given>[ОТЧЕСТВО]</given>
		|</value>
		|<semanticsText>LivingSubject.name</semanticsText>
		|</livingSubjectName>","") + "

		|</parameterList>
		|</queryByParameter>
		|</controlActProcess>
		|</PRPA_IN201305RU02>";
	
	Возврат Текст;
	
КонецФункции

// PRPA_IN201304UV02
Функция ТекстXMLИзвещениеНаДедублированиеДанныхОПациенте()
	Текст =
		"<PRPA_IN201304UV02 xmlns=""urn:hl7-org:v3""
		|	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|	xsi:schemaLocation=""urn:hl7-org:v3 ../../../../../../iemk-integration/iemk-integration-ws-api/src/main/resources/integration/schema/HL7V3/NE2008/multicacheschemas/PRPA_IN201304UV02.xsd"" ITSVersion=""XML_1.0"">
		|<id root=""[OID_MO]"" extension=""[MSG_ID]""/>
		|<creationTime value=""[CRTTIME]""/>
		|<interactionId root=""1.2.643.5.1.13.2.7.3"" extension=""PRPA_IN201304UV02""/>
		|<processingCode code=""P""/>
		|<processingModeCode code=""T""/>
		|<acceptAckCode code=""AL""/>
		
		|<receiver typeCode=""RCV"">
		|<device classCode=""DEV"" determinerCode=""INSTANCE"">
		|<id root=""d5a0f9c0-5db4-11e3-949a-0800200c9a66""/>
		|<name>ИЭМК</name>
		|<asAgent classCode=""ASSIGNED"">
		|	<representedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root = ""1.2.643.5.1.13""/>
		|	<name>МЗРФ</name>
		|	</representedOrganization>
		|	</asAgent>
		|</device>
		|</receiver>

		|<sender typeCode=""SND"">
		|<device classCode=""DEV"" determinerCode=""INSTANCE"">
		|<id root=""[UUID_MIS]""/>
		|<name>[MIS_NAME]</name>
		|<asAgent classCode=""ASSIGNED"">
		|<representedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<id root = ""[OID_MO]""/>
		|<name>[MO_NAME]</name>
		|</representedOrganization>
		|</asAgent>
		|</device>
		|</sender>
		
		|<controlActProcess classCode=""CACT"" moodCode=""EVN"">
		|<subject typeCode=""SUBJ"">
		|<registrationEvent classCode=""REG"" moodCode=""EVN"">
		|<id nullFlavor=""NA""/>
		|<statusCode code=""active""/>
		
		|<subject1 typeCode=""SBJ"">
		|<patient classCode=""PAT"">
		|<id root=""[OID_MO]"" extension=""[PATIENT_ID]""/>
		|<statusCode code=""active""/>
		|<patientPerson>
		|<name>
		|<family>[ФАМИЛИЯ]</family>
		|<given>[ИМЯ]</given>
		|<given>[ОТЧЕСТВО]</given>
		|</name>
		|</patientPerson>
		|</patient>
		|</subject1>
		
		|<custodian typeCode=""CST"">
		|<assignedEntity classCode=""ASSIGNED"">
		|<id  root=""[OID_MO]""/>
		|<assignedOrganization classCode=""ORG"" determinerCode=""INSTANCE"">
		|<name>[MO_NAME]</name>
		|</assignedOrganization>
		|</assignedEntity>
		|</custodian>
		
		|<replacementOf typeCode=""RPLC"">
		|<priorRegistration classCode=""REG"" moodCode=""EVN"">
		|<subject1 typeCode=""SBJ"">
		|<priorRegisteredRole classCode=""PAT"">
		|<id root=""[OID_MO]"" extension=""[PATIENT_ID2]""/>
		|</priorRegisteredRole>
		|</subject1>
		|</priorRegistration>
		|</replacementOf>
		
		|</registrationEvent>
		|</subject>
		|</controlActProcess>
		|</PRPA_IN201304UV02>";

	Возврат Текст;
	
КонецФункции

Функция ЗначениеСНИЛС(СНИЛС)
	
	Возврат ИнтеграцияЕГИСЗСлужебныйСервер.УдалитьСимволыКроме(СНИЛС, "0123456789");
	
КонецФункции

Функция ФорматированныйСНИЛС(Знач СтраховойНомерПФР, Знач ВыдаватьИсключение = Истина)
	
	Если НЕ ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
		Возврат "";
	КонецЕсли;
	
	СтраховойНомерПФР = ИнтеграцияЕГИСЗСлужебныйСервер.УдалитьСимволыКроме(СтраховойНомерПФР, "0123456789");
	Если СтрДлина(СтраховойНомерПФР) <> 11 Тогда 
		Если ВыдаватьИсключение Тогда 
			ВызватьИсключение("Неверный номер СНИЛС");
		КонецЕсли;
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон(
		"%1-%2-%3 %4",
		Сред(СтраховойНомерПФР, 1, 3), 
		Сред(СтраховойНомерПФР,  4, 3),
		Сред(СтраховойНомерПФР, 7, 3), 
		Сред(СтраховойНомерПФР, 10, 2)
	);
	
КонецФункции

Функция ПоставитьСообщениеГИПВОчередь(Сообщение, ТипПакета, Пациент, МедицинскаяОрганизация = Неопределено)
	
	УникальныйИдентификаторСообщения = Новый УникальныйИдентификатор();
	НаборЗаписей = РегистрыСведений.ИнтеграцияЕГИСЗСообщенияГИП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УИДСообщения.Установить(УникальныйИдентификаторСообщения);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.ДатаДобавления	= ТекущаяДатаСеанса();
	Запись.УИДСообщения		= УникальныйИдентификаторСообщения;
	Запись.Сообщение		= Сообщение;
	Запись.ТипПакета		= ТипПакета;
	Запись.Пациент			= Пациент;
	Запись.МедицинскаяОрганизация = МедицинскаяОрганизация;
	
	НаборЗаписей.Записать(Истина);
	
	Возврат УникальныйИдентификаторСообщения;
	
КонецФункции

Функция ПолучитьЛьготыПациента(Пациент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛьготыКлиентов.Льгота КАК Льгота,
		|	ЛьготыКлиентов.Льгота.УИДЕГИСЗ КАК ЛьготаУИДЕГИСЗ,
		|	ЛьготыКлиентов.Льгота.НаименованиеПолное КАК ЛьготаПолноеНаименование,
		|	ЛьготыКлиентов.Льгота.Наименование КАК ЛьготаНаименование
		|ИЗ
		|	РегистрСведений.ЛьготыКлиентов КАК ЛьготыКлиентов
		|ГДЕ
		|	ЛьготыКлиентов.Клиент = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", Пациент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции

Функция ФилиалМедицинскойОрганизации(МедицинскаяОрганизация)
	
	Если ЗначениеЗаполнено(МедицинскаяОрганизация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Филиалы
		|ГДЕ
		|	Организация.МедицинскаяОрганизация = &МедицинскаяОрганизация
		|	И НЕ ПометкаУдаления";
		
		Запрос.УстановитьПараметр("МедицинскаяОрганизация", МедицинскаяОрганизация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПолучитьИспользуемыеМедицинскиеОрганизации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МедицинскиеОрганизации = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕГИСЗНастройкиИнтеграции.МедицинскаяОрганизация КАК МедицинскаяОрганизация
		|ИЗ
		|	РегистрСведений.ЕГИСЗНастройкиИнтеграции КАК ЕГИСЗНастройкиИнтеграции";	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МедицинскиеОрганизации.Добавить(ВыборкаДетальныеЗаписи.МедицинскаяОрганизация);
	КонецЦикла;
	
	Возврат МедицинскиеОрганизации;
	
КонецФункции

Функция ОтправленВГИП(Клиент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГИПСтатусыКлиентов.ОтправленВГИП КАК ОтправленВГИП
		|ИЗ
		|	РегистрСведений.ГИПСтатусыКлиентов КАК ГИПСтатусыКлиентов
		|ГДЕ
		|	ГИПСтатусыКлиентов.Клиент = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает пол пациента по коду классификатора 1.2.643.5.1.13.2.1.1.156.
Функция КодВПолПациента(Код)
	
	Если Код = "1" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	ИначеЕсли Код = "2" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	ИначеЕсли Код = "3" Тогда
		Возврат Перечисления.ПолФизическихЛиц.НеУказан;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает код пола пациента по классификатору 1.2.643.5.1.13.2.1.1.156.
Функция ПолПациентаВКод(Пол)
	
	Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		Возврат "1";
	ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		Возврат "2";
	ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.НеУказан Тогда
		Возврат "3";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ТипАдресаПоКоду(Код)
	
	Если Код = "HP" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресЮридический;
	ИначеЕсли Код = "H" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресФактический;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбъектСправочникаПоКоду(ИмяСправочника, Код, ВидКлассификатора = Неопределено)
	
	ПолноеИмя = Метаданные.Справочники.Найти("ИмяСправочника").ПолноеИмя();
	Менеджер = Новый (СтрЗаменить(ПолноеИмя, ".", "Менеджер."));
	
	Если ВидКлассификатора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура("УИДЕГИСЗ",Код);
	Иначе
		ПараметрыОтбора = Новый Структура("ВидКлассификтора,УИДЕГИСЗ",ВидКлассификатора,Код);
	КонецЕсли;
	
	Выборка = Менеджер.Выбрать(,,ПараметрыОтбора);
	
	Если Выборка.Количество() > 1 Тогда
		Сообщить("Более 1 объекта с кодом: " + Код + " в справочнике: " + ИмяСправочника);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти