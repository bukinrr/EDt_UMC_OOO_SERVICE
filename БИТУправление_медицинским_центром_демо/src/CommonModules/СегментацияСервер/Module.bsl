#Область ПрограммныйИнтерфейс

// Пересчитывает указанные виды сегментации для указанных клиентов.
//
// Параметры:
//  ВидыСегментации	 - Массив	 - виды сегментации
//  Клиенты			 - Массив	 - клиенты.
//
Процедура ОсновнойЦиклОбсчета(ВидыСегментации = Неопределено, Клиенты = Неопределено) Экспорт
	
	КлиентыОграничены = Клиенты <> Неопределено;
	
	Если Клиенты = Неопределено Тогда
		// Формируем список клиентов
		Клиенты = ПолучитьКлиентовСегментации();
	КонецЕсли;

	Если ВидыСегментации = Неопределено Тогда
		// Обходим виды сегментации
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСегментации.Ссылка,
		|	ВидыСегментации.АлгоритмФормированияТаблицыПолейОтбора КАК Алгоритм
		|ИЗ
		|	Справочник.ВидыСегментации КАК ВидыСегментации
		|ГДЕ
		|	НЕ ВидыСегментации.ПометкаУдаления
		|	И (ВидыСегментации.ПерерассчитыватьПриИзмененииДанных
		|			ИЛИ ВидыСегментации.ПерерассчитыватьРегламентнымЗаданием
		|			ИЛИ ВидыСегментации.ПерерассчитыватьРегламентнымЗаданиемТолькоПриИзмененииДанных)";
		РезультатЗапроса = Запрос.Выполнить();
		ВидыСегментации = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Для Каждого ВидСегментации Из ВидыСегментации Цикл
		КлиентыКопия = Клиенты.Скопировать();
		РазмерПорции = 5000;
		ЕстьОстатокКлиентов = Истина;
		НомерПорции = 0;
		Пока ЕстьОстатокКлиентов Цикл
			КлиентыКопия.Очистить();
			ПолучитьПорциюКлиентов(Клиенты, КлиентыКопия, НомерПорции, РазмерПорции);
			НомерПорции = НомерПорции + 1;
			ЕстьОстатокКлиентов = КлиентыКопия.Количество() > 0;
			Если Не ЕстьОстатокКлиентов Тогда
				Прервать;
			КонецЕсли;
			// Формируем Таблицу произвольных полей
			ТПП = ПолучитьТаблицуПроизвольныхПолей(Клиенты, ВидСегментации.Алгоритм);
			Для Каждого Правило Из ВидСегментации.Ссылка.ПравилаСегментации Цикл 
				
				// Выполняем отбор
				НастройкиКомпоновки = Правило.Отбор.Получить();
				
				Если НастройкиКомпоновки <> Неопределено Тогда
					
					СхемаКомпоновкиДанных = Справочники.ВидыСегментации.ПолучитьМакет("МакетОтбора");
					
					КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
					ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
					КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
					
					ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
					КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
					
					Настройки = КомпоновщикНастроек.ПолучитьНастройки();
					
					Если КлиентыОграничены Тогда
						СписокКлиентов = Новый СписокЗначений();
						СписокКлиентов.ЗагрузитьЗначения(КлиентыКопия.ВыгрузитьКолонку("Клиент"));
						
						//Для Каждого Вариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
						ЭлементУсловия = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						
						ЭлементУсловия.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Клиент");
						ЭлементУсловия.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
						ЭлементУсловия.ПравоеЗначение	= СписокКлиентов;
						ЭлементУсловия.Использование	= Истина;
						//КонецЦикла;
					КонецЕсли;
					КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
					МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
					
					ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
					ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("ПроизвольныеПоля", ТПП), ДанныеРасшифровки);
					
					ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
					ТаблицаЗначений = Новый ТаблицаЗначений;
					ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
					ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
					ТаблицаЗначений.Свернуть("Клиент");
					
					КлиентыСегмента = ТаблицаЗначений;
				Иначе
					КлиентыСегмента = КлиентыКопия.Скопировать(,"Клиент");
				КонецЕсли;
				
				ОставитьТолькоОдинаковыхКлиентовЗапросом(КлиентыСегмента, КлиентыКопия);	
				// Исключаем клиентов, по которым сегмент удовлетворил условию отбора
				УдалитьПрошедшихКлиентовЗапросом(КлиентыКопия, КлиентыСегмента);
				// Сохраним 
				СохранитьСегментыКлиентов(КлиентыСегмента, Правило.Сегмент, ВидСегментации.Ссылка);
			КонецЦикла;
			Если КлиентыКопия.Количество() > 0 Тогда
				СохранитьСегментыКлиентов(КлиентыКопия, ВидСегментации.Ссылка.ЗначениеПоУмолчанию, ВидСегментации.Ссылка);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
	
// Процедура - При изменении сегментационного регистратора при записи
//
// Параметры:
//  Источник - СправочникОбъект,ДокументОбъект	 - объект, влияющий на сегменты клиента.
//  Отказ	 - Булево	 - отказ.
//
Процедура ПриИзмененииСегментационногоРегистратораПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Клиенты"));
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов, , );

		Клиенты = Новый ТаблицаЗначений();
		Клиенты.Колонки.Добавить("Ссылка", ДопустимыеТипы);
		Клиенты.Колонки.Добавить("Клиент", ДопустимыеТипы);
		
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.Клиенты") Тогда
			ИзмененныеДанные = Перечисления.СегментационныеРегистраторы.РеквизитыКлиента;
			Нстр = Клиенты.Добавить();
			Нстр.Ссылка = Источник.Ссылка;
			Нстр.Клиент = Нстр.Ссылка;
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Заявка") Тогда
			ИзмененныеДанные = Перечисления.СегментационныеРегистраторы.ДокументыЗаявка;
			Нстр = Клиенты.Добавить();
			Нстр.Ссылка = Источник.Клиент;
			Нстр.Клиент = Нстр.Ссылка;
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
			ИзмененныеДанные = Перечисления.СегментационныеРегистраторы.ДокументыОказаниеУслуг;
			Нстр = Клиенты.Добавить();
			Нстр.Ссылка = Источник.Клиент;
			Нстр.Клиент = Нстр.Ссылка;
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
			ИзмененныеДанные = Перечисления.СегментационныеРегистраторы.КонтактнаяИнформацияКлиента;
			
			Для Каждого Запись Из Источник Цикл
				Нстр = Клиенты.Добавить();
				Нстр.Ссылка = Запись.Объект;
				Нстр.Клиент = Нстр.Ссылка;
			КонецЦикла;
			Клиенты.Свернуть("Ссылка");
		КонецЕсли;
		
		Если Клиенты.Количество() = 0 Тогда
			Клиенты = Неопределено;
		КонецЕсли;
		
		ПараметрыФЗ = Новый Массив();
		ПараметрыФЗ.Добавить(ИзмененныеДанные);
		ПараметрыФЗ.Добавить(Клиенты);
		//ФоновыеЗадания.Выполнить("СегментацияСервер.РассчитатьСегментыПоИсточнику", ПараметрыФЗ);
	    РассчитатьСегментыПоИсточнику(ИзмененныеДанные, Клиенты);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитать сегменты по источнику
//
// Параметры:
//  ИзмененныеДанные - ПеречислениеСсылка.СегментационныеРегистраторы - что изменилось.
//  Клиенты			 - Массив	 - клиенты.
//
Процедура РассчитатьСегментыПоИсточнику(ИзмененныеДанные, Клиенты) Экспорт
	ВидыСегментации = ПолучитьВидыСегментовДляРассчета(ИзмененныеДанные);
	Если ВидыСегментации <> Неопределено И ВидыСегментации.Количество() > 0 Тогда
		СегментацияСервер.ОсновнойЦиклОбсчета(ВидыСегментации, Клиенты);
	КонецЕсли;
	
	Если ТребуетсяЗанесениеВОчередь(ИзмененныеДанные) Тогда
		СохранитьВОчередь(Клиенты);		
	КонецЕсли;
КонецПроцедуры 

// Обработать очередь изменений по сегментам.
//
Процедура ОбработатьОчередьИзменений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьИзмененийДляПересчетаСегментов.Источник КАК Клиент
		|ИЗ
		|	РегистрСведений.ОчередьИзмененийДляПересчетаСегментов КАК ОчередьИзмененийДляПересчетаСегментов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Клиенты = РезультатЗапроса.Выгрузить();
	
	// Обходим виды сегментации
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСегментации.Ссылка,
	|	ВидыСегментации.АлгоритмФормированияТаблицыПолейОтбора КАК Алгоритм
	|ИЗ
	|	Справочник.ВидыСегментации КАК ВидыСегментации
	|ГДЕ
	|	НЕ ВидыСегментации.ПометкаУдаления
	|	И ВидыСегментации.ПерерассчитыватьРегламентнымЗаданиемТолькоПриИзмененииДанных";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВидыСегментации = РезультатЗапроса.Выгрузить();
	
	Если Клиенты.Количество() > 0 И ВидыСегментации.Количество() > 0 Тогда
		ОсновнойЦиклОбсчета(ВидыСегментации, Клиенты)
	КонецЕсли;
	
	// Очистим регистр изменений
	Набор = РегистрыСведений.ОчередьИзмененийДляПересчетаСегментов.СоздатьНаборЗаписей();
	Набор.Записать();
КонецПроцедуры

// Пересчитать сегменты регламентным заданием.
//
Процедура ПересчитатьСегментыРегламентнымЗаданием() Экспорт
	
	// Обходим виды сегментации
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСегментации.Ссылка,
	|	ВидыСегментации.АлгоритмФормированияТаблицыПолейОтбора КАК Алгоритм
	|ИЗ
	|	Справочник.ВидыСегментации КАК ВидыСегментации
	|ГДЕ
	|	НЕ ВидыСегментации.ПометкаУдаления
	|	И ВидыСегментации.ПерерассчитыватьРегламентнымЗаданием";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВидыСегментации = РезультатЗапроса.Выгрузить();
	
	Если ВидыСегментации.Количество() > 0 Тогда
		ОсновнойЦиклОбсчета(ВидыСегментации)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКлиентовСегментации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Клиенты.Ссылка,
		|	Клиенты.Ссылка КАК Клиент 
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	НЕ Клиенты.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	

КонецФункции

Функция ПолучитьТаблицуПроизвольныхПолей(Клиенты, Алгоритм)
	
	Таблица = СформироватьШаблонТаблицы(Клиенты.ВыгрузитьКолонку("Клиент"));
	РассчитатьТаблицу(Таблица, Алгоритм);
	
	Возврат Таблица;
	
КонецФункции

Функция СформироватьШаблонТаблицы(Клиенты)
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Клиенты"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов, , );
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Клиент", ДопустимыеТипы);
	Таблица.Колонки.Добавить("Показатель1");
	Таблица.Колонки.Добавить("Показатель2");
	Таблица.Колонки.Добавить("Показатель3");
	Таблица.Колонки.Добавить("Показатель4");
	Таблица.Колонки.Добавить("Показатель5");
	Таблица.Колонки.Добавить("Показатель6");
	Таблица.Колонки.Добавить("Показатель7");
	Таблица.Колонки.Добавить("Показатель8");
	Таблица.Колонки.Добавить("Показатель9");
	
	Для Каждого стр из Клиенты Цикл
		нстр = Таблица.Добавить();
		нстр.Клиент = стр;
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Процедура РассчитатьТаблицу(Таблица, Алгоритм)
	
	Попытка
		Выполнить Алгоритм;	
	Исключение
		Таблица.Очистить();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьПрошедшихКлиентовЗапросом(Клиенты, КлиентыСегмента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Клиент КАК Клиент
	|ПОМЕСТИТЬ Клиенты
	|ИЗ
	|	&Клиенты КАК Клиенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Клиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлиентыСегмента.Клиент КАК Клиент
	|ПОМЕСТИТЬ КлиентыСегмента
	|ИЗ
	|	&КлиентыСегмента КАК КлиентыСегмента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Клиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.Клиент,
	|	КлиентыСегмента.Клиент КАК КлиентСегмента
	|ИЗ
	|	Клиенты КАК Клиенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлиентыСегмента КАК КлиентыСегмента
	|		ПО Клиенты.Клиент = КлиентыСегмента.Клиент
	|ГДЕ
	|	КлиентыСегмента.Клиент ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Клиенты", Клиенты);
	Запрос.УстановитьПараметр("КлиентыСегмента", КлиентыСегмента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Клиенты = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

Процедура ОставитьТолькоОдинаковыхКлиентовЗапросом(Клиенты, КлиентыСегмента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Клиент КАК Клиент
	|ПОМЕСТИТЬ Клиенты
	|ИЗ
	|	&Клиенты КАК Клиенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Клиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлиентыСегмента.Клиент КАК Клиент
	|ПОМЕСТИТЬ КлиентыСегмента
	|ИЗ
	|	&КлиентыСегмента КАК КлиентыСегмента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Клиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.Клиент,
	|	КлиентыСегмента.Клиент КАК КлиентСегмента
	|ИЗ
	|	Клиенты КАК Клиенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлиентыСегмента КАК КлиентыСегмента
	|		ПО Клиенты.Клиент = КлиентыСегмента.Клиент";
	
	Запрос.УстановитьПараметр("Клиенты", Клиенты);
	Запрос.УстановитьПараметр("КлиентыСегмента", КлиентыСегмента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Клиенты = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

Процедура СохранитьСегментыКлиентов(КлиентыСегмента, Сегмент, ВидСегментации) Экспорт
	
	Если КлиентыСегмента.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НовыеСегменты.Клиент,
		|	&Сегмент,
		|	&ВидСегментации
		|ПОМЕСТИТЬ НовыеСегменты
		|ИЗ
		|	&НовыеСегменты КАК НовыеСегменты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеСегменты.Клиент,
		|	НовыеСегменты.Сегмент,
		|	НовыеСегменты.ВидСегментации,
		|	ЕСТЬNULL(СегментыКлиентовСрезПоследних.Сегмент, ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка)) КАК СегментСтарый
		|ИЗ
		|	НовыеСегменты КАК НовыеСегменты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СегментыКлиентов.СрезПоследних(
		|				,
		|				ВидСегментации = &ВидСегментации
		|					И Клиент В (ВЫБРАТЬ НовыеСегментыКлиентов.Клиент ИЗ НовыеСегменты КАК НовыеСегментыКлиентов)) КАК СегментыКлиентовСрезПоследних
		|		ПО НовыеСегменты.Клиент = СегментыКлиентовСрезПоследних.Клиент
		|			И НовыеСегменты.ВидСегментации = СегментыКлиентовСрезПоследних.ВидСегментации";
		
		Запрос.УстановитьПараметр("ВидСегментации", ВидСегментации);
		Запрос.УстановитьПараметр("НовыеСегменты", КлиентыСегмента);
		Запрос.УстановитьПараметр("Сегмент", Сегмент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если  ВыборкаДетальныеЗаписи.Сегмент <> ВыборкаДетальныеЗаписи.СегментСтарый Тогда
				НЗСК = РегистрыСведений.СегментыКлиентов.СоздатьНаборЗаписей();
				НЗСК.Отбор.Клиент.Установить(ВыборкаДетальныеЗаписи.Клиент);
				НЗСК.Отбор.ВидСегментации.Установить(ВидСегментации);
				
				Запись = НЗСК.Добавить();
				Запись.Клиент		= ВыборкаДетальныеЗаписи.Клиент;
				Запись.ВидСегментации	= ВидСегментации;
				Запись.Период		= ТекущаяДата();
				Запись.Сегмент		= Сегмент;
				
				НЗСК.Записать(Истина);
				
				Если ВидСегментации.ХранитьИсториюСегментов Тогда
					Запись = РегистрыСведений.ИсторияСегментовКлиентов.СоздатьМенеджерЗаписи();
					Запись.Клиент		= ВыборкаДетальныеЗаписи.Клиент;
					Запись.ВидСегментации	= ВидСегментации;
					Запись.Период		= ТекущаяДата();
					Запись.Сегмент		= Сегмент;
					
					Запись.Записать(Истина);
				Иначе
					НаборЗаписей = РегистрыСведений.ИсторияСегментовКлиентов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Клиент.Установить(ВыборкаДетальныеЗаписи.Клиент);
					НаборЗаписей.Отбор.ВидСегментации.Установить(ВидСегментации);
					Запись = НаборЗаписей.Добавить();
					Запись.Клиент = ВыборкаДетальныеЗаписи.Клиент; 
					Запись.ВидСегментации	= ВидСегментации;
					Запись.Период		= ТекущаяДата();
					Запись.Сегмент		= Сегмент;
					
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВидыСегментовДляРассчета(ИзмененныеДанные)
	ВидыСегментации = Неопределено;
	Если ЗначениеЗаполнено(ИзмененныеДанные) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СегментационныеСвязиДанных.ВидСегментации КАК Ссылка,
		|	СегментационныеСвязиДанных.ВидСегментации.АлгоритмФормированияТаблицыПолейОтбора КАК Алгоритм,
		|	СегментационныеСвязиДанных.ВидСегментации.ПерерассчитыватьПриИзмененииДанных КАК ПриИзмененииДанных,
		|	СегментационныеСвязиДанных.ВидСегментации.ПерерассчитыватьРегламентнымЗаданиемТолькоПриИзмененииДанных КАК РегламентнымЗаданиемПриИзмененииДанных
		|ИЗ
		|	РегистрСведений.СегментационныеСвязиДанных КАК СегментационныеСвязиДанных
		|ГДЕ
		|	СегментационныеСвязиДанных.СегментационныйРегистратор = &СегментационныйРегистратор
		|	И СегментационныеСвязиДанных.ВидСегментации.ПерерассчитыватьПриИзмененииДанных";
		Запрос.УстановитьПараметр("СегментационныйРегистратор", ИзмененныеДанные);	
		РезультатЗапроса = Запрос.Выполнить();
		
		ВидыСегментации = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ВидыСегментации;
КонецФункции

Функция ТребуетсяЗанесениеВОчередь(ТипСегмента)
	Результат = Ложь;
	Если ЗначениеЗаполнено(ТипСегмента) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СегментационныеСвязиДанных.ВидСегментации КАК Ссылка
		|ИЗ
		|	РегистрСведений.СегментационныеСвязиДанных КАК СегментационныеСвязиДанных
		|ГДЕ
		|	СегментационныеСвязиДанных.СегментационныйРегистратор = &СегментационныйРегистратор
		|	И СегментационныеСвязиДанных.ВидСегментации.ПерерассчитыватьРегламентнымЗаданиемТолькоПриИзмененииДанных";
		Запрос.УстановитьПараметр("СегментационныйРегистратор", ТипСегмента);	
		Результат = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура СохранитьВОчередь(Клиенты)
	Для Каждого Клиент Из Клиенты Цикл
		Запись = РегистрыСведений.ОчередьИзмененийДляПересчетаСегментов.СоздатьМенеджерЗаписи();
		Запись.Источник = Клиент.Клиент;
		Запись.Прочитать();
		Если НЕ Запись.Выбран() Тогда
			Запись.Источник = Клиент.Клиент;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьПорциюКлиентов(Клиенты, КлиентыКопия, НомерПорции, РазмерПорции)
	НачальныйИндекс = НомерПорции*РазмерПорции;
	КонечныйИндекс = (НомерПорции + 1) * РазмерПорции - 1;
	КонечныйИндекс = ?(КонечныйИндекс > Клиенты.Количество() - 1, Клиенты.Количество() - 1, КонечныйИндекс);
	Если НачальныйИндекс < Клиенты.Количество() Тогда
		Для НомерСтроки = НачальныйИндекс По КонечныйИндекс Цикл
			СтрокаКопии = КлиентыКопия.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаКопии, Клиенты[НомерСтроки]);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти