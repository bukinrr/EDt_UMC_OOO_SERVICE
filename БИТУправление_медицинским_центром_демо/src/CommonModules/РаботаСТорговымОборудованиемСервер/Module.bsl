#Область ПрограммныйИнтерфейс

// Генерирует и записывает штрихкод объекта. При ошибке возвращает текст ошибки.
//
// Параметры:
//  Ссылка					 - ЛюбаяСсылка	 - объект.
//  ЕдиницаХраненияОстатков	 - СправочникСсылка.ЕдиницаИзмерения - единица штрихкода.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ЗаписатьШтрихКодВРегистр(Ссылка,ЕдиницаХраненияОстатков) Экспорт
	
	ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	
	ТекЗапись.Владелец         = Ссылка;
	ТекЗапись.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
	ТекЗапись.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	ТекЗапись.Штрихкод         = РаботаСТорговымОборудованием.СформироватьШтрихКод();
	
	Попытка
		ТекЗапись.Записать();
		СообщениеОбОшибке = "";
	Исключение
		СообщениеОбОшибке = "Ошибка при записи штрихкода: " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	Возврат СообщениеОбОшибке;	
КонецФункции

// Генерирует и записывает новый штрихкод объекта. При ошибке возвращает текст ошибки.
//
// Параметры:
//  Ссылка			 - ЛюбаяСсылка	 - объект.
//  ТекущаяСтрока	 - Структура	 - измерения текущего штрихкода.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ИзменитьСтрокуШтрихкода(Ссылка,ТекущаяСтрока) Экспорт
	
	ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ТекЗапись, ТекущаяСтрока);
	ТекЗапись.Владелец = Ссылка;
	ТекЗапись.Прочитать();
	Если Не ТекЗапись.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(ТекЗапись, ТекущаяСтрока);
		ТекЗапись.Владелец = Ссылка;
	КонецЕсли;

	ТекЗапись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	ТекЗапись.Штрихкод     = РаботаСТорговымОборудованием.СформироватьШтрихКод();

	Попытка
		ТекЗапись.Записать();
		СообщениеОбОшибке = "";
	Исключение
		СообщениеОбОшибке = "Ошибка при записи штрихкода: " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	Возврат СообщениеОбОшибке;	
	
КонецФункции

// Формирует ключ записи штрихкода
//
// Параметры:
//  Ссылка		 - ЛюбаяСсылка									 - объект.
//  Штрихкод	 - Строка										 - штрихкод
//  ТипШтрихкода - ПланВидовХарактеристикСсылка.ТипыШтрихкодов	 - тип ШК.
// 
// Возвращаемое значение:
//   РегистрСведенийКлючЗаписи.Штрихкоды.
//
Функция ПолучитьКлючШтрихКода(Ссылка,Штрихкод,ТипШтрихкода) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец",Ссылка);
	Отбор.Вставить("Штрихкод",?(Штрихкод=Неопределено,РаботаСТорговымОборудованием.СформироватьШтрихКод(),Штрихкод));
	Отбор.Вставить("ТипШтрихкода",ТипШтрихкода);
	Возврат РегистрыСведений.Штрихкоды.СоздатьКлючЗаписи(Отбор);
КонецФункции

// Ищет владельца штрикхода.
//
// Параметры:
//  ШК	 - Строка	 - штрихкод
// 
// Возвращаемое значение:
//   ЛюбаяСсылка.
//
Функция ПолучитьВладельцаШК(ШК) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегШК.Владелец КАК Владелец,
	|	РегШК.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РегШК.СерияНоменклатуры КАК СерияНоменклатуры
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК РегШК
	|ГДЕ
	|	РегШК.Штрихкод = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод", ШК);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() <> 0 Тогда
		Структура = Новый Структура("Владелец,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СерияНоменклатуры",ТЗ[0].Владелец,ТЗ[0].ЕдиницаИзмерения,ТЗ[0].ХарактеристикаНоменклатуры,ТЗ[0].СерияНоменклатуры);
		Если Метаданные.ОбщиеМодули.Найти("ОтраслевыеДополнения") <> Неопределено Тогда
			Попытка
				ДопПоля = Неопределено;
				Выполнить "ДопПоля = ОтраслевыеДополнения.ПолучитьДопПоляВладельцаШКДляОбработки(Структура.Владелец);";
				Для Каждого ДопПоле Из ДопПоля Цикл
					Структура.Вставить(ДопПоле.Ключ, ДопПоле.Значение);
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Возврат Структура;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

// Ищет владелька карты по коду магнитной карты.
//
// Параметры:
//  КодКарты - Строка	 - код карты.
// 
// Возвращаемое значение:
//   СправочникСсылка.Клиенты.
//
Функция ПолучитьвладельцаМК(КодКарты) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МагнитныеКарты.Владелец
	|ИЗ
	|	РегистрСведений.МагнитныеКарты КАК МагнитныеКарты
	|ГДЕ
	|	МагнитныеКарты.КодКарты = &КодКарты");
	
	Запрос.УстановитьПараметр("КодКарты", КодКарты);

	РезультатЗапроса = Запрос.Выполнить();
	Выб = РезультатЗапроса.Выбрать();
	Если выб.Следующий() Тогда
		Возврат Выб.Владелец;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

// Добавить штрихкод владельцу.
//
// Параметры:
//  Владелец - ЛюбаяСсылка									 - объект.
//  Штрихкод - Строка										 - штрихкод
//  ТипКода	 - ПланВидовХарактеристикСсылка.ТипыШтрихкодов	 - тип ШК.
//
Процедура ДобавитьШтрихкодСервер(Владелец, Штрихкод, ТипКода) Экспорт
	Структура = Новый Структура("Владелец,Штрихкод,ТипШтрихкода",Владелец,Штрихкод,ТипКода);
	НоваяЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();	
	ЗаполнитьЗначенияСвойств(НоваяЗапись,Структура);
	НоваяЗапись.Записать();
КонецПроцедуры

// Добавит магнитный код владельцу
//
// Параметры:
//  Владелец - ЛюбаяСсылка	 - объект.
//  Код		 - Строка		 - код.
//
Процедура ДобавитМагнитныйКодСервер(Владелец, Код) Экспорт
	НоваяЗапись = РегистрыСведений.МагнитныеКарты.СоздатьМенеджерЗаписи();	
	НоваяЗапись.Владелец = Владелец;
	НоваяЗапись.КодКарты = Код;
	НоваяЗапись.Записать();
КонецПроцедуры

// Возвращает штрихкод владельца
//
// Параметры:
//  Владелец - ЛюбаяСсылка	 - объект.
//  ТипШтрихкода - ПланВидовХарактеристикСсылка.ТипыШтрихкодов	 - тип ШК.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьШтрихкодВладельца(Владелец, ТипШтрихкода = Неопределено) Экспорт
	
	Если ТипШтрихкода = Неопределено Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	КонецЕсли;
	
	Штрихкоды = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	Штрихкоды.Отбор.Владелец.Установить(Владелец);
	Штрихкоды.Отбор.ТипШтрихкода.Установить(ТипШтрихкода);
	Штрихкоды.Прочитать();
	
	Если Штрихкоды.Количество() > 0 Тогда
		Возврат Штрихкоды[0].Штрихкод;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Формирует таблицу номенклатуры по считанным с ТСД штрихкодам.
//
// Параметры:
//  мсШтрихкоды		 - Массив	 - штрихкоды.
//  ВернутьМассив	 - Булево	 - вернуть ли в форме массив струтур.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьТаблицуНоменклатурыПоШтрихкодам(мсШтрихкоды, ВернутьМассив = Ложь) Экспорт
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ТаблицаШтрихкодов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого элШтрихкод Из мсШтрихкоды Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаШтрихкодов.Добавить(), элШтрихкод);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Штрихкод,
	|	Таб.Количество
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Штрихкоды.Владелец, НЕОПРЕДЕЛЕНО) КАК Владелец,
	|	ТаблицаШтрихкодов.Штрихкод КАК Штрихкод,
	|	СУММА(ТаблицаШтрихкодов.Количество) КАК Количество,
	|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Штрихкоды.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Штрихкоды.Владелец.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Штрихкоды.Владелец.ЕдиницаТоваров КАК ЕдиницаТоваров,
	|	Штрихкоды.Владелец.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	Штрихкоды.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	Штрихкоды.Владелец.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ТаблицаШтрихкодов.Штрихкод = Штрихкоды.Штрихкод
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(Штрихкоды.Владелец, НЕОПРЕДЕЛЕНО),
	|	ТаблицаШтрихкодов.Штрихкод,
	|	Штрихкоды.ЕдиницаИзмерения,
	|	Штрихкоды.ХарактеристикаНоменклатуры,
	|	Штрихкоды.СерияНоменклатуры,
	|	Штрихкоды.Владелец.ВидНоменклатуры,
	|	Штрихкоды.Владелец.ЕдиницаТоваров,
	|	Штрихкоды.Владелец.ЕдиницаХраненияОстатков,
	|	Штрихкоды.ЕдиницаИзмерения.Коэффициент,
	|	Штрихкоды.Владелец.ЕдиницаХраненияОстатков.Коэффициент";
	Запрос.УстановитьПараметр("Таб", ТаблицаШтрихкодов);
	Результат = Запрос.Выполнить();
	ТаблицаНоменклатуры = Результат.Выгрузить();
	
	Если ВернутьМассив Тогда 
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаНоменклатуры);
	Иначе
		Возврат ТаблицаНоменклатуры;
	КонецЕсли;
	
КонецФункции

// Тип ШК по имени
//
// Параметры:
//  ИмяТипа	 - Строка	 - имя предпределеного типа.
// 
// Возвращаемое значение:
//   ПланВидовХарактеристикСсылка.ТипыШтрихкодов.
//
Функция ПолучитьТипШКПоИмени(ИмяТипа) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыШтрихкодов.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ТипыШтрихкодов КАК ТипыШтрихкодов
		|ГДЕ
		|	ТипыШтрихкодов.Предопределенный
		|	И (ТипыШтрихкодов.Наименование = &ИмяТипа
		|			ИЛИ ТипыШтрихкодов.ИмяПредопределенныхДанных = &ИмяТипа)";
	
	Запрос.УстановитьПараметр("ИмяТипа", ИмяТипа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции

// Заполняет данные по штрихкодам упаковок
//
// Параметры:
//  Штрихкоды			 - Массив	 - строки штрихкодов
//  КэшированныеЗначения - Структура - кеш данных.
//  ПараметрыДействия	 - Структура - параметры операции.
//
Процедура ЗаполнитьДанныеПоШтрихкодамУпаковок(Штрихкоды, КэшированныеЗначения, ПараметрыДействия) Экспорт
	
	ДанныеПоШтрихкодам = Новый Соответствие;
	
	ТаблицаДанныеШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаДанныеШтрихкодов.Колонки.Добавить("Штрихкод"     , ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДанныеШтрихкодов.Колонки.Добавить("НомерУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(27));
	ТаблицаДанныеШтрихкодов.Колонки.Добавить("GTIN"         , ОбщегоНазначения.ОписаниеТипаСтрока(14));
	ТаблицаДанныеШтрихкодов.Колонки.Добавить("НомерСерии"   , ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДанныеШтрихкодов.Колонки.Добавить("ГоденДо"      , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для Каждого ТекущийШтрихкод Из Штрихкоды Цикл
		
		НоваяСтрока = ТаблицаДанныеШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод      = ТекущийШтрихкод.Штрихкод;
		НоваяСтрока.НомерУпаковки = ТекущийШтрихкод.SGTIN;
		НоваяСтрока.GTIN          = ТекущийШтрихкод.GTIN;
		НоваяСтрока.НомерСерии    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "Серия");
		НоваяСтрока.ГоденДо       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийШтрихкод, "ГоденДо");
		
		ДанныеПоШтрихкодам.Вставить(ТекущийШтрихкод.Штрихкод, ОбработкаТабличнойЧастиКлиентСервер.СтруктураКэшируемойИнформацииПоШтрихкоду(ТекущийШтрихкод.Штрихкод));
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод       КАК Штрихкод,
	|	Штрихкоды.НомерУпаковки  КАК НомерУпаковки,
	|	Штрихкоды.GTIN           КАК GTIN,
	|	Штрихкоды.НомерСерии     КАК НомерСерии,
	|	Штрихкоды.ГоденДо        КАК ГоденДо
	|ПОМЕСТИТЬ ДанныеШтрихкодов
	|ИЗ
	|	&Штрихкоды КАК Штрихкоды
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУпаковки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ                                   КАК НеизвестныйШтрихкод,
	|	ДанныеШтрихкодов.Штрихкод              КАК Штрихкод,
	|	УпаковкиТоваров.Ссылка                 КАК УпаковкаТовара,
	|	УпаковкиТоваров.Номенклатура           КАК Номенклатура,
	|	УпаковкиТоваров.СерияНоменклатуры      КАК СерияНоменклатуры,
	|	УпаковкиТоваров.Партия                 КАК Партия,
	|	УпаковкиТоваров.Номенклатура.Упаковка  КАК ЕдиницаИзмерения
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТоваров
	|	ПО
	|		УпаковкиТоваров.НомерУпаковки = ДанныеШтрихкодов.НомерУпаковки
	|		И (УпаковкиТоваров.ГоденДо = ДанныеШтрихкодов.ГоденДо
	|			ИЛИ ДанныеШтрихкодов.ГоденДо = ДАТАВРЕМЯ(1,1,1) И УпаковкиТоваров.ГоденДо > &ТекущаяДата)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА                                                КАК НеизвестныйШтрихкод,
	|	ДанныеШтрихкодов.Штрихкод                             КАК Штрихкод,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиМаркируемогоТовара.ПустаяСсылка)  КАК УпаковкаТовара,
	|	ШтрихкодыНоменклатуры.Владелец		                  КАК Номенклатура,
	|	СправочникСерии.Ссылка                                КАК СерияНоменклатуры,
	|	""""												  КАК Партия,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения                КАК ЕдиницаИзмерения
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|	ПО
	|		ШтрихкодыНоменклатуры.Штрихкод = ДанныеШтрихкодов.GTIN
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Владелец = ШтрихкодыНоменклатуры.Владелец
	|		И СправочникСерии.НомерСерии = ДанныеШтрихкодов.НомерСерии
	|		И (СправочникСерии.ГоденДо = ДанныеШтрихкодов.ГоденДо
	|			ИЛИ ДанныеШтрихкодов.ГоденДо = ДАТАВРЕМЯ(1,1,1) И СправочникСерии.ГоденДо > &ТекущаяДата)
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТоваров
	|	ПО
	|		УпаковкиТоваров.НомерУпаковки = ДанныеШтрихкодов.НомерУпаковки
	|		И (УпаковкиТоваров.ГоденДо = ДанныеШтрихкодов.ГоденДо
	|			ИЛИ ДанныеШтрихкодов.ГоденДо = ДАТАВРЕМЯ(1,1,1) И УпаковкиТоваров.ГоденДо > &ТекущаяДата)
	|ГДЕ
	|	НЕ &ПропускатьНенайденные
	|	И УпаковкиТоваров.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|
	|ВЫБРАТЬ
	|	ИСТИНА                                                КАК НеизвестныйШтрихкод,
	|	ДанныеШтрихкодов.Штрихкод                             КАК Штрихкод,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиМаркируемогоТовара.ПустаяСсылка)  КАК УпаковкаТовара,
	|	СправочникСерии.Владелец                              КАК Номенклатура,
	|	СправочникСерии.Ссылка                                КАК СерияНоменклатуры,
	|	""""												  КАК Партия,
	|	СправочникСерии.Владелец.Упаковка                     КАК ЕдиницаИзмерения
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|	ПО
	|		ШтрихкодыНоменклатуры.Штрихкод = ДанныеШтрихкодов.GTIN
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.НомерСерии = ДанныеШтрихкодов.НомерСерии
	|		И (СправочникСерии.ГоденДо = ДанныеШтрихкодов.ГоденДо
	|			ИЛИ ДанныеШтрихкодов.ГоденДо = ДАТАВРЕМЯ(1,1,1) И СправочникСерии.ГоденДо > &ТекущаяДата)
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТоваров
	|	ПО
	|		УпаковкиТоваров.НомерУпаковки = ДанныеШтрихкодов.НомерУпаковки
	|		И (УпаковкиТоваров.ГоденДо = ДанныеШтрихкодов.ГоденДо
	|			ИЛИ ДанныеШтрихкодов.ГоденДо = ДАТАВРЕМЯ(1,1,1) И УпаковкиТоваров.ГоденДо > &ТекущаяДата)
	|ГДЕ
	|	НЕ &ПропускатьНенайденные
	|	И УпаковкиТоваров.Ссылка ЕСТЬ NULL
	|	И ШтрихкодыНоменклатуры.Владелец ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("Штрихкоды", ТаблицаДанныеШтрихкодов);
	Запрос.УстановитьПараметр("ТекущаяДата", ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -6));
	Запрос.УстановитьПараметр("ПропускатьНенайденные", ПараметрыДействия.ПропускатьНенайденныеШтрихкоды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИнформацияПоШтрихкоду = ДанныеПоШтрихкодам[Выборка.Штрихкод];
		ИнформацияПоШтрихкоду.ШтрихкодУпаковки = Истина;
		ИнформацияПоШтрихкоду.НеизвестныйШтрихкод = Выборка.НеизвестныйШтрихкод;
		ИнформацияПоШтрихкоду.УпаковкаМаркированногоТовара = Выборка.УпаковкаТовара;
		ИнформацияПоШтрихкоду.Владелец = Выборка.Номенклатура;
		ИнформацияПоШтрихкоду.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		//ИнформацияПоШтрихкоду.Партия = Выборка.Партия;
		ИнформацияПоШтрихкоду.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		
		//Если ЗначениеЗаполнено(ИнформацияПоШтрихкоду.Номенклатура) И Не ЗначениеЗаполнено(ИнформацияПоШтрихкоду.ЕдиницаИзмерения) Тогда
		//	ИнформацияПоШтрихкоду.ЕдиницаИзмерения = НоменклатураСервер.ОсновнаяЕдиницаИзмерения(ИнформацияПоШтрихкоду.Номенклатура, НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
		//КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеПоШтрихкоду Из ДанныеПоШтрихкодам Цикл
		КэшированныеЗначения.Штрихкоды.Вставить(ДанныеПоШтрихкоду.Ключ, ДанныеПоШтрихкоду.Значение);
	КонецЦикла;	
		
КонецПроцедуры

// Процедура - Заполнить данные по штрихкодам товаров
//
// Параметры:
//  Штрихкоды			 - Массив	 - строки штрихкодов
//  КэшированныеЗначения - Структура - кеш данных.
//
Процедура ЗаполнитьДанныеПоШтрихкодамТоваров(Штрихкоды, КэшированныеЗначения) Экспорт
	
	ДанныеПоШтрихкодам = РегистрыСведений.Штрихкоды.ПолучитьДанныеПоШтрихкодам(Штрихкоды);
	
	Для Каждого ДанныеПоШтрихкоду Из ДанныеПоШтрихкодам Цикл
		
		Если ЗначениеЗаполнено(ДанныеПоШтрихкоду.Значение.Владелец)                                 
			И ТипЗнч(ДанныеПоШтрихкоду.Значение.Владелец) = Тип("СправочникСсылка.Номенклатура")
			И Не ЗначениеЗаполнено(ДанныеПоШтрихкоду.Значение.ЕдиницаИзмерения)
		Тогда
			ДанныеПоШтрихкоду.Значение.ЕдиницаИзмерения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПоШтрихкоду.Значение.Владелец, "ЕдиницаХраненияОстатков");
			Если Не ЗначениеЗаполнено(ДанныеПоШтрихкоду.Значение.ЕдиницаИзмерения) Тогда
				ДанныеПоШтрихкоду.Значение.ЕдиницаИзмерения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеПоШтрихкоду.Значение.Владелец, "БазоваяЕдиницаИзмерения");	
			КонецЕсли;
		КонецЕсли;
		
		КэшированныеЗначения.Штрихкоды.Вставить(ДанныеПоШтрихкоду.Ключ, ДанныеПоШтрихкоду.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Все имена реквизитов формы в виде массива.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - форма.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ИменаРеквизитовФормы(Форма) Экспорт
	
	// Возвращаемое значение функции
	Результат = Новый Массив;
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		
		Результат.Добавить(РеквизитФормы.Имя);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти