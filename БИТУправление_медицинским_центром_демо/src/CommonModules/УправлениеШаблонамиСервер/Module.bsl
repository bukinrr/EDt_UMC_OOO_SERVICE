#Область ВычисляемыеПоля

// Получить пустую таблицу для хранения полей которые требуется вычислить.
//
Функция ПолучитьПустуюТаблицуВычисляемыхПолей()

	табВычПолей = Новый ТаблицаЗначений;
	табВычПолей.Колонки.Добавить("Поле",           Новый ОписаниеТипов("Строка"));
	табВычПолей.Колонки.Добавить("Значение");
	табВычПолей.Колонки.Добавить("НужноВычислять", Новый ОписаниеТипов("Булево"));
	табВычПолей.Колонки.Добавить("НомерПоля",      Новый ОписаниеТипов("Число"));
	табВычПолей.Колонки.Добавить("ЗаголовокПоля",  Новый ОписаниеТипов("Строка"));
	
	Возврат табВычПолей;

КонецФункции // ПолучитьПустуюТаблицуВычисляемыхПолей()

// В таблице вычисляемых полей заполнить значения дополнительных полей.
//
Процедура ВТаблицеВычисляемыхПолейЗаполнитьДополнительные(табВычПолей)

	текДата = ТекущаяДата();
	Для Каждого Стр Из табВычПолей Цикл
		Если ВРЕГ(Стр.Поле) = ВРЕГ("СистемныеПоля.ТекущаяДатаИВремя") Тогда
			Стр.Значение = Формат(текДата, "ДЛФ=DT");
			
		ИначеЕсли ВРЕГ(Стр.Поле) = ВРЕГ("СистемныеПоля.ТекущаяДата") Тогда
			Стр.Значение = Формат(текДата, "ДФ=dd.MM.yyyy");
			
		ИначеЕсли ВРЕГ(Стр.Поле) = ВРЕГ("СистемныеПоля.ТекущееВремя") Тогда
			Стр.Значение = Формат(текДата, "ДФ=ЧЧ:мм:сс");
			
		ИначеЕсли ВРЕГ(Стр.Поле) = ВРЕГ("СистемныеПоля.ИмяПользователя") Тогда
			Стр.Значение = ИмяПользователя();
			
		Иначе
			Стр.НужноВычислять = Истина;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавить запись в таблицу вычисляемых полей.
//
Процедура ДобавитьПолеВТаблицуВычисляемыхПолей(табВычПолей, Поле, НужноВычислять) Экспорт 

	Если табВычПолей.Найти(Поле, "Поле") = Неопределено Тогда
		новСтр = табВычПолей.Добавить();
		новСтр.Поле = Поле;
		новСтр.НужноВычислять = НужноВычислять;
		новСтр.НомерПоля = 0;
	КонецЕсли;

КонецПроцедуры

// Из строки шаблона добавить все вычисляемые поля в таблицу.
//
Процедура ДобавитьПоляИзТекстаВТаблицуВычисляемыхПолей(табВычПолей, Текст)

	Для Сч = 1 По СтрЧислоСтрок(Текст) Цикл
		Стр = СтрПолучитьСтроку(Текст, Сч);
		
		Пока Истина Цикл
			Поз = Найти(Стр, "%%");
			Если Поз = 0 Тогда
				Прервать;
			КонецЕсли;
			Стр = Сред(Стр, Поз + 2);
			
			Поз = Найти(Стр, "%%");
			Если Поз = 0 Тогда
				Прервать;
			КонецЕсли;
			Поле = Лев(Стр, Поз-1);
			Стр = Сред(Стр, Поз+2);
			
			ДобавитьПолеВТаблицуВычисляемыхПолей(табВычПолей, Поле, Ложь);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// По табличному шаблону создать таблицу с вычисляемыми полями.
//
Функция ПолучитьВычисляемыеПоляИзТаблицы(Таб) Экспорт

	табВычПолей = ПолучитьПустуюТаблицуВычисляемыхПолей();
	
	Для СчСтр = 1 По Таб.ВысотаТаблицы Цикл
		Для СчКол = 1 По Таб.ШиринаТаблицы Цикл
			ДобавитьПоляИзТекстаВТаблицуВычисляемыхПолей(табВычПолей, Таб.Область(СчСтр, СчКол).Текст);
		КонецЦикла;
	КонецЦикла;
	
	ВТаблицеВычисляемыхПолейЗаполнитьДополнительные(табВычПолей);
	
	Возврат табВычПолей;

КонецФункции // ПолучитьВычисляемыеПоляИзТаблицы()

// В строке с вычисляемыми полями выполнить замены значений.
//
Процедура ВыполнитьЗаменыВТекстеПоВычисляемымПолям(табВычПолей, Текст, СтрокаФормата = "") Экспорт

	Для Каждого Стр Из табВычПолей Цикл
		СтрЗн = ?(ПустаяСтрока(СтрокаФормата), Стр.Значение, Формат(Стр.Значение, СтрокаФормата));
		Текст = СтрЗаменить(Текст, "%%" + Стр.Поле + "%%", СтрЗн);
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область РаботаССКД

// Для объекта получить макет СКД для подстановки в шаблоне.
//
Функция ПолучитьСхемуСКДДляПодстановкиВШаблоне(МетаданныеОбъекта, ДобСуффиксИмениМакета="",Объект = Неопределено) Экспорт

	Имя = МетаданныеОбъекта.Имя;
	ИмяМакета = "ПоляШаблона" + ДобСуффиксИмениМакета;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Возврат Справочники[Имя].ПолучитьМакет(ИмяМакета);
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Возврат Документы[Имя].ПолучитьМакет(ИмяМакета);
		
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		Возврат Отчеты[Имя].ПолучитьМакет(ИмяМакета);
		
	ИначеЕсли Метаданные.Обработки.Содержит(МетаданныеОбъекта) Тогда
		Возврат Обработки[Имя].ПолучитьМакет(ИмяМакета);
		
	Иначе
		Если Объект <> Неопределено Тогда
			Попытка
				Возврат Объект.ПолучитьМакет(ИмяМакета);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьСхемуСКДДляПодстановкиВШаблоне()

// Среди элементов полей СКД найти поле по имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)

	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // НайтиПолеСКДПоИмени()

// Найти поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции // НайтиПолеСКДПоПолномуИмени()

// Вычислить значение поля объекта по полному пути.
//
Функция ВычислитьЗначениеПоляПоПолномуПути(Объект, Путь, ТекстЗапросаПроХарактеристики) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(Путь);
	колЧастей = масЧастейИмен.Количество();
	
	ПервоеЗначение = ПолучитьЗначениеРеквизитаОбъекта(Объект, масЧастейИмен[0]);
	Если Не ЗначениеЗаполнено(ПервоеЗначение) ИЛИ колЧастей = 1 Тогда
		Возврат ПервоеЗначение;
	КонецЕсли;
	
	Если (НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение))) Тогда
		ИмяМетаданных = ПервоеЗначение.Метаданные().ПолноеИмя();
		
		Возврат "";
	КонецЕсли;
	
	ИмяМетаданных = ПервоеЗначение.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ Таблица.Ссылка ИЗ " + ИмяМетаданных + " КАК Таблица
	|" + ТекстЗапросаПроХарактеристики;
	
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	Источник = СКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных1";
	Источник.ТипИсточникаДанных = "Local";
	
	Набор = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Набор.Имя = "НаборДанных1";
	Набор.ИсточникДанных = "ИсточникДанных1";
	Набор.Запрос = ТекстЗапроса;
	
	Поле = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.ПутьКДанным = "Ссылка";
	Поле.Поле = "Ссылка";
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	
	текИмя = "Ссылка";
	Поле = НайтиПолеСКДПоИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолеСсылка = Поле;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле.Поле;
	
	ДобавитьОтборВНастройкиСКД(Компоновщик.Настройки, ПолеСсылка.Поле, ПервоеЗначение, ВидСравненияКомпоновкиДанных.Равно);
	ДобавитьАвтоГруппировкуВНастройкиСКД(Компоновщик.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Значения = ЭлементРезультатаКомпоновкиДанных.ЗначенияПараметров;
		Если Значения.Количество() > 0 Тогда
			
			Для Каждого Значение Из Значения Цикл
				Возврат Значение.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ВычислитьЗначениеПоляПоПолномуПути()

// Из текста запроса получить текст про характеристики.
//
Функция ТекстЗапросаКХарактеристикам(ТекстЗапроса) Экспорт
	
	Поз = Найти(ВРег(ТекстЗапроса), "{ХАРАКТЕРИСТИКИ");
	Возврат ?(Поз = 0, "", Сред(ТекстЗапроса, Поз));
	
КонецФункции // ТекстЗапросаКХарактеристикам()

// В настройки СКД добавить автогруппировку.
//
Процедура ДобавитьАвтоГруппировкуВНастройкиСКД(Настройки)

	Группировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Использование = Истина;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

КонецПроцедуры

// В настройки СКД добавить отбор.
//
Функция ДобавитьОтборВНастройкиСКД(Настройки, Поле, Значение, ВидСравнения)

	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Поле;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	
	Возврат ЭлементОтбора;

КонецФункции
#КонецОбласти

#Область ВспомогательныеФункции

// Полное имя поля разделить по частям.
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = Найти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = Найти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

// Получить значение реквизита объекта.
//
Функция ПолучитьЗначениеРеквизитаОбъекта(Объект, Реквизит)

	Если Реквизит = "Код" Тогда
		Возврат Объект.Код;
	ИначеЕсли Реквизит = "Ссылка" Тогда
		Возврат Объект.Ссылка;
	ИначеЕсли Реквизит = "Номер" Тогда
		Возврат Объект.Номер;
	ИначеЕсли Реквизит = "Наименование" Тогда
		Возврат Объект.Наименование;
	ИначеЕсли Реквизит = "Проведен" Тогда
		Возврат Объект.Проведен;
	ИначеЕсли Реквизит = "Родитель" Тогда
		Возврат Объект.Родитель;
	ИначеЕсли Реквизит = "Владелец" Тогда
		Возврат Объект.Владелец;
	Иначе
		Возврат Объект[Реквизит];
	КонецЕсли;

КонецФункции // ПолучитьЗначениеРеквизитаОбъекта()
#КонецОбласти

#Область ЗаполнениеВТабличныхШаблонах

// Выполнить подготовку перед заполнением табличного шаблона.
//
Функция ПодготовитьсяКЗаполнениюТабличногоШаблона(МетаданныеОбъекта, МакетТабДокумента, ОбязательныеПоляДляВычисления = Неопределено, ЗаменяемыйТекстЗапросаСКД = "", ДобСуффиксИмениМакета="", Объект = Неопределено, Настройки = Неопределено) Экспорт

	НастройкиФормирования = Новый Структура;
	
	// Получим макет СКД
	СхемаСКД = ПолучитьСхемуСКДДляПодстановкиВШаблоне(МетаданныеОбъекта,ДобСуффиксИмениМакета, Объект);
	
	// Если нужно, заменим текст запроса СКД.
	Если Не ПустаяСтрока(ЗаменяемыйТекстЗапросаСКД) Тогда
		СхемаСКД.НаборыДанных[0].Запрос = ЗаменяемыйТекстЗапросаСКД + Символы.ПС + ТекстЗапросаКХарактеристикам(СхемаСКД.НаборыДанных[0].Запрос);
	КонецЕсли;
	
	// Получим макет табличного документа.
	// Получим список полей которые нужно будет вычислить.
	табВычПолей = ПолучитьВычисляемыеПоляИзТаблицы(МакетТабДокумента);
	
	// Добавим обязательные для вычисления поля.
	Если ОбязательныеПоляДляВычисления <> Неопределено Тогда
		Для Каждого Поле Из ОбязательныеПоляДляВычисления Цикл
			ДобавитьПолеВТаблицуВычисляемыхПолей(табВычПолей, Поле, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовим компоновщик
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	
	// +
	Если Настройки <> Неопределено ТОгда
		Компоновщик.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	// -
	
	// Каждое поле, которое нужно вычислить через СКД, добавим в список выбранных полей.
	СчПолей = 0;
	Для Каждого Стр Из табВычПолей Цикл
		Если Стр.НужноВычислять Тогда

			Если ДобСуффиксИмениМакета = "К" И Найти(Стр.Поле, "Сотрудник") > 0 Тогда
				НайтиПоле = СтрЗаменить(Стр.Поле, "Сотрудник", "Клиент");
			Иначе
				НайтиПоле = Стр.Поле;
			КонецЕсли;
			
			ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, НайтиПоле);
			Если ПолеСКД = Неопределено Тогда
			Иначе
				
				СчПолей = СчПолей + 1;
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
				ВыбранноеПоле.Заголовок = "Поле" + Формат(СчПолей, "ЧРГ=");
				
				Стр.НомерПоля = Компоновщик.Настройки.Выбор.Элементы.Количество();
				Стр.ЗаголовокПоля = ВыбранноеПоле.Заголовок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьАвтоГруппировкуВНастройкиСКД(Компоновщик.Настройки);

	НастройкиФормирования.Вставить("СхемаСКД",    СхемаСКД);
	НастройкиФормирования.Вставить("табВычПолей", табВычПолей);
	НастройкиФормирования.Вставить("Компоновщик", Компоновщик);
	НастройкиФормирования.Вставить("МакетТабДокумента", МакетТабДокумента);
	
	Возврат НастройкиФормирования;

КонецФункции // ПодготовитьсяКЗаполнениюТабличногоШаблона()

// Подготовить процессор компоновки данных.
//
Процедура ПодготовитьПроцессорКомпоновкиДанных(НастройкиФормирования) Экспорт

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(НастройкиФормирования.СхемаСКД, НастройкиФормирования.Компоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	НастройкиФормирования.Вставить("ПроцессорКомпоновкиДанных", ПроцессорКомпоновкиДанных);

КонецПроцедуры

// Из процессора компоновки получить значения вычисляемых полей.
//
Функция ИзПроцессораКомпоновкиПолучитьВычисляемыеПоля(НастройкиФормирования) Экспорт

	ПроцессорКомпоновкиДанных = НастройкиФормирования.ПроцессорКомпоновкиДанных;
	
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Значения = ЭлементРезультатаКомпоновкиДанных.ЗначенияПараметров;
		Если Значения.Количество() > 0 Тогда
			
			НомерПоля = 0;
			Для Каждого Значение Из Значения Цикл
				НомерПоля = НомерПоля + 1;
				Стр = НастройкиФормирования.табВычПолей.Найти(НомерПоля, "НомерПоля");
				Если Стр <> Неопределено Тогда
					Стр.Значение = Значение.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

КонецФункции // ИзПроцессораКомпоновкиПолучитьВычисляемыеПоля()

// Добавить отбор в СКД по полному имени поля.
//
Функция ДобавитьОтборВСКДПоПолномуИмениПоля(НастройкиФормирования, ИмяПоля, ВидСравнения, ЗначениеОтбора) Экспорт

	ПолеСсылка = НайтиПолеСКДПоПолномуИмени(НастройкиФормирования.Компоновщик.Настройки.ДоступныеПоляОтбора.Элементы, ИмяПоля);
	
	Если ПолеСсылка <> Неопределено Тогда
		Возврат ДобавитьОтборВНастройкиСКД(НастройкиФормирования.Компоновщик.Настройки, ПолеСсылка.Поле, ЗначениеОтбора, ВидСравнения);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

// Получить и заполнить вычисленными значениями область для вывода табличного шаблона.
//
Функция ПолучитьОбластьДляВыводаТабличногоШаблона(НастройкиФормирования) Экспорт

	ИмяОбласти = НастройкиФормирования.МакетТабДокумента.ОбластьПечати.Имя;
	Область = НастройкиФормирования.МакетТабДокумента.ПолучитьОбласть(ИмяОбласти);
	
	Для СчК = 1 По Область.ШиринаТаблицы Цикл
		Для СчС = 1 По Область.ВысотаТаблицы Цикл
			Ячейка = Область.Область(СчС, СчК);
			
			// Сделаем замены в тексте
			ВыполнитьЗаменыВТекстеПоВычисляемымПолям(НастройкиФормирования.табВычПолей, Ячейка.Текст, Ячейка.Формат)
		КонецЦикла;
	КонецЦикла;
	
	Возврат Область;

КонецФункции // ПолучитьОбластьДляВыводаТабличногоШаблона()

// В таблице вычисляемых полей заполнить колонку Значение по результатам выборки.
//
Процедура ЗаполнитьТаблицуВычисляемыхПолейПоРезультату(СтрРезультат, КолонкиТабРезультат, ТабВычПолей, ТабРезультат) Экспорт

	Для Каждого Стр Из ТабВычПолей Цикл
		Если Стр.НужноВычислять Тогда
			
			Если КолонкиТабРезультат.Найти("ФИО") <> Неопределено Тогда
				Колонка = КолонкиТабРезультат.Найти(СтрЗаменить(Стр.Поле,"Сотрудник.",""));
				Колонка1 = ТабРезультат.Колонки.Найти(СтрЗаменить(Стр.Поле,"Сотрудник.",""));
				Если Колонка = Неопределено Тогда
					Стр.Значение = Неопределено;
				Иначе
					Стр.Значение = СтрРезультат.Получить(ТабРезультат.Колонки.Индекс(Колонка1));// КолонкиТабРезультат.Индекс(Колонка));
				КонецЕсли;
			Иначе
				Колонка = КолонкиТабРезультат.Найти(СтрЗаменить(Стр.Поле,".",""));
				Колонка1 = ТабРезультат.Колонки.Найти(СтрЗаменить(Стр.Поле,".",""));
				Если Колонка = Неопределено Тогда
					Стр.Значение = Неопределено;
				Иначе
					Стр.Значение = СтрРезультат.Получить(ТабРезультат.Колонки.Индекс(Колонка1));
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
#КонецОбласти