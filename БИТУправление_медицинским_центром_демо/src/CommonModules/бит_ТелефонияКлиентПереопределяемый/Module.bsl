///////////////////////////////////////////////////////////////////////////////
// Общий клиентский модуль телефонии БИТ
// Содержит функции, реализация которых зависит от конфигурации.
///////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Задает номер телефона контрагенту, с выбором вида телефона.
//
// Параметры:
//  Контрагент - ссылка на контрагента,
//  НомерТел - Строка - номер телефона.
//
Процедура ЗадатьНомерТелефонаКонтрагента(Контрагент, НомерТел) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	//
	массВидовКонтактнойИнформации = бит_ТелефонияСерверПереопределяемый.ПолучитьВидыКонтактнойИнформацииКонтрагента();
	видыКонтактнойИнформации = Новый СписокЗначений;
	видыКонтактнойИнформации.ЗагрузитьЗначения( массВидовКонтактнойИнформации );
	ПараметрыОповещенияКонт = Новый Структура();
	ПараметрыОповещенияКонт.Вставить("Контрагент", Контрагент);
	ПараметрыОповещенияКонт.Вставить("Номер", НомерТел);
	Если видыКонтактнойИнформации.Количество() = 1 Тогда
		ЗадатьНомерТелефонаКонтрагентаПослеВыбораВидаКонтактнойИнформации(видыКонтактнойИнформации[0], ПараметрыОповещенияКонт);
	Иначе
		оповещ = Новый ОписаниеОповещения("ЗадатьНомерТелефонаКонтрагентаПослеВыбораВидаКонтактнойИнформации", ЭтотОбъект, ПараметрыОповещенияКонт);
		видыКонтактнойИнформации.ПоказатьВыборЭлемента(оповещ, "Выберите вид телефона");
	КонецЕсли;
КонецПроцедуры

Процедура ЗадатьНомерТелефонаКонтрагентаПослеВыбораВидаКонтактнойИнформации(ВидКонтактнойИнформации, Параметр) ЭКСПОРТ
	Если ВидКонтактнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	видКонтИнф	= ВидКонтактнойИнформации.Значение;
	Контрагент	= Параметр.Контрагент;
	НомерТел	= Параметр.Номер;
	текущийНомерТелефона = бит_ТелефонияСерверПереопределяемый.НайтиНомерКонтрагента(Контрагент, видКонтИнф);
	//
	ПараметрыВопроса = Новый Структура("Контрагент,Номер");
	ЗаполнитьЗначенияСвойств(ПараметрыВопроса, Параметр);
	ПараметрыВопроса.Вставить("ВидКонтактнойИнформации", видКонтИнф);
	//
	Если ЗначениеЗаполнено(текущийНомерТелефона) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗадатьНомерТелефонаКонтрагентаЗавершение", ЭтотОбъект, ПараметрыВопроса),
			//+Переопределенное
			//"Контрагент " + Строка(Контрагент) + " уже имеет " + Строка(видКонтИнф) + " " + текущийНомерТелефона + ". Заменить?",
			"Клиент " + Строка(Контрагент) + " уже имеет " + Строка(видКонтИнф) + " " + текущийНомерТелефона + ". Заменить?",
			//-Переопределенное
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗадатьНомерТелефонаКонтрагентаЗавершение(КодВозвратаДиалога.Да, ПараметрыВопроса);
	КонецЕсли;
КонецПроцедуры

Процедура ЗадатьНомерТелефонаКонтрагентаЗавершение(Заменить, Параметр) ЭКСПОРТ
	Если Заменить <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	видКонтИнф	= Параметр.ВидКонтактнойИнформации;
	Контрагент	= Параметр.Контрагент;
	НомерТел	= Параметр.Номер;
	бит_ТелефонияСерверПереопределяемый.ЗаписатьНомерТелефонаКонтрагента(Контрагент, видКонтИнф, НомерТел);
КонецПроцедуры

Процедура ОткрытьДокументыПродаж(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("РеализацияТоваровУслуг", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьДокументыПоступления(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("ПриобретениеТоваровУслуг", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьЗаказыПокупателя(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("ЗаказКлиента", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьЗаказыПоставщику(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("ЗаказПоставщику", КонтрагентСсылка);
КонецПроцедуры

Процедура ОткрытьСчетаНаОплатуПокупателя(КонтрагентСсылка) ЭКСПОРТ
	ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту("СчетНаОплатуКлиенту", КонтрагентСсылка);
КонецПроцедуры

//
// вызовы с блокировкой интерфейса
//
Процедура ОповещениеПриЗавершенииОперации(Результат, Параметры) ЭКСПОРТ
	Если ЗначениеЗаполнено(Параметры) Тогда
		Если ЗначениеЗаполнено(Параметры.ИмяСобытияОповещения) Тогда
			ПараметрСобытия = Новый Структура;
			ПараметрСобытия.Вставить("Результат", Результат);
			ПараметрСобытия.Вставить("ПараметрОповещения", Параметры.ПараметрОповещения);
			Оповестить(Параметры.ИмяСобытияОповещения, ПараметрСобытия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОповещениеПриЗавершенииПредупреждения(Параметры) ЭКСПОРТ
	ОповещениеПриЗавершенииОперации(Неопределено, Параметры);
КонецПроцедуры

Процедура ОткрытьФормуСБлокировкойВладельца(форма, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено, БлокироватьВесьИнтерфейс=Ложь) ЭКСПОРТ
	ОткрытьМодальноФормуВнутр(форма,
		ИмяОперацииОповещенияСВозвратомЗначенияВнутр(),
		СформироватьПараметрыОповещ(ИмяСобытияОповещения, ПараметрОповещения),
		БлокироватьВесьИнтерфейс);
КонецПроцедуры

Процедура ПоказПредупреждение(ТекстПредупреждения, Таймаут=0, Заголовок=Неопределено, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	ПоказатьПредупреждение(СформироватьОписаниеОповещБезВозвратаЗначения(ИмяСобытияОповещения, ПараметрОповещения), ТекстПредупреждения, Таймаут, Заголовок);
КонецПроцедуры

Процедура ПоказВопрос(ТекстВопроса, Кнопки, Таймаут=0, КнопкаПоУмолчанию, Заголовок, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	ПоказатьВопрос(СформироватьОписаниеОповещСВозвратомЗначения(ИмяСобытияОповещения, ПараметрОповещения), ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок);
КонецПроцедуры

Процедура ПоказВводСтроки(СтрокаВвод, Подсказка, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	ПоказатьВводСтроки(СформироватьОписаниеОповещСВозвратомЗначения(ИмяСобытияОповещения, ПараметрОповещения), СтрокаВвод, Подсказка);
КонецПроцедуры

Процедура ПоказВыборФайла(диалог, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	диалог.Показать(СформироватьОписаниеОповещСВозвратомЗначения(ИмяСобытияОповещения, ПараметрОповещения));
КонецПроцедуры

Процедура ПоказЗначение(Значение, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	ПоказатьЗначение(СформироватьОписаниеОповещБезВозвратаЗначения(ИмяСобытияОповещения, ПараметрОповещения), Значение);
КонецПроцедуры

Процедура ЗапускПрограммы(Путь, ИмяСобытияОповещения="", ПараметрОповещения=Неопределено) ЭКСПОРТ
	НачатьЗапускПриложения(СформироватьОписаниеОповещСВозвратомЗначения(ИмяСобытияОповещения, ПараметрОповещения), Путь);
КонецПроцедуры

//
Процедура УдалениеИсторииЗвонковКонтрагентаЗавершение(Результат, Параметры) ЭКСПОРТ
	контрагент = Результат;
	Если ЗначениеЗаполнено(контрагент) Тогда
		записейУдалено = бит_ТелефонияСервер.УдалитьИсториюЗвонковКонтрагента(контрагент);
		бит_ТелефонияКлиент.ВывестиСообщение("Удалено записей: " + Строка(записейУдалено));
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьИсториюЗвонковКонтрагента() ЭКСПОРТ
	ОткрытьМодальноФормуВыбораКонтрагента("УдалениеИсторииЗвонковКонтрагентаЗавершение", Неопределено);
КонецПроцедуры

// Выбор номера телефона контрагента или контактного лица, если они имеют несколько номеров,
//  и оповещение формы выбранным номером.
//
// Параметры:
//  Контакт - ссылка на контрагента, контактное лицо, документ взаимодействия, или Строка,
//  ИмяФормы - Строка, имя формы для оповещения,
//  ИмяСобытияОповещения - Строка, имя события оповещения.
//
Процедура ВыбратьНомерКонтактаИОповестить(Контакт, ИмяФормы, ИмяСобытияОповещения) ЭКСПОРТ
	массивНомераТелефонов = Новый Массив;
	//
	//+Переопределенное
	ИмяТипа = ДопСерверныеФункции.ИмяСсылочногоТипа(Контакт);
	//Если ТипЗнч(Контакт) = Тип("СправочникСсылка." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов()) Тогда
	Если ИмяТипа = "Справочник." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов() Тогда
		массивНомераТелефонов = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтрагента(Контакт);
	//ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтактныхЛиц()) Тогда
	ИначеЕсли ИмяТипа = "Справочник." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтактныхЛиц() Тогда
		массивНомераТелефонов = бит_ТелефонияСерверПереопределяемый.НайтиНомераКонтактногоЛица(Контакт);
	//ИначеЕсли ТипЗнч(Контакт) = Тип("ДокументСсылка." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяДокументаСобытие()) Тогда
	ИначеЕсли ИмяТипа = "Документ." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяДокументаСобытие() Тогда
	//-Переопределенное
		стрСообщениеОбОшибке = "";
		контактСобытия = бит_ТелефонияСерверПереопределяемый.ПолучитьКонтактСобытия(Контакт, стрСообщениеОбОшибке);
		Если ЗначениеЗаполнено(стрСообщениеОбОшибке) Тогда
			бит_ТелефонияКлиент.ВывестиСообщение(стрСообщениеОбОшибке);
		Иначе
			ВыбратьНомерКонтактаИОповестить(контактСобытия, ИмяФормы, ИмяСобытияОповещения);
		КонецЕсли;
		Возврат;
	ИначеЕсли ТипЗнч(Контакт) = Тип("Строка") Тогда
		массивНомераТелефонов.Добавить(Контакт);
	КонецЕсли;
	//
	ПараметрыОповещенияНом = Новый Структура();
	ПараметрыОповещенияНом.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыОповещенияНом.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
	//
	списокНомеровТелефонов = Новый СписокЗначений;
	списокНомеровТелефонов.ЗагрузитьЗначения(массивНомераТелефонов);
	Если массивНомераТелефонов.Количество() = 1 Тогда
		ВыбратьНомерКонтактаИОповеститьЗавершение(списокНомеровТелефонов[0], ПараметрыОповещенияНом);
	ИначеЕсли массивНомераТелефонов.Количество() > 1 Тогда
		оповещ = Новый ОписаниеОповещения("ВыбратьНомерКонтактаИОповеститьЗавершение", ЭтотОбъект, ПараметрыОповещенияНом);
		списокНомеровТелефонов.ПоказатьВыборЭлемента(оповещ, "Выберите номер");
	КонецЕсли;
КонецПроцедуры

Процедура ВыбратьНомерКонтактаИОповеститьЗавершение(выбранныйЭлементСпискаНомеров, Параметры) ЭКСПОРТ
	Если выбранныйЭлементСпискаНомеров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерВызова = выбранныйЭлементСпискаНомеров.Значение;
	бит_ТелефонияКлиент.ОткрытьФормуВыполнитьДействие(Параметры.ИмяФормы, Параметры.ИмяСобытияОповещения, НомерВызова);
КонецПроцедуры

Процедура УстановкаКомпонентыТелефонииПроверкаВерсии(Параметры) ЭКСПОРТ
	стрИмяМодуля = Параметры.ОбщийМодуль;
	УстановитьВерсиюВнешнейКомпонентыТекущегоПользователяПереопр(стрИмяМодуля, Параметры.ВерсияКомпонентыОжидаемая);
	ПодключениеВнешнейКомпонентыПослеПроверкиВерсииВКПользователя(Параметры);
КонецПроцедуры

Процедура УстановкаКомпонентыТелефонииПроверкаПодключенияВК(Параметры) ЭКСПОРТ
	
	Параметры.ПовторноеПодключение = Истина;
	
	НачатьПодключениеВнешнейКомпоненты(Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтотОбъект, Параметры),
		Параметры.МакетВК, Параметры.ИмяВнешнейКомпоненты, ТипВнешнейКомпоненты.Native);
		
КонецПроцедуры

// Подключение внешней компоненты
Процедура ПодключениеВнешнейКомпоненты(стрМакетВК, стрИмяФайлаВК, стрИмяМодуля, стрИмяКлассаВК, стрЗаголовокСообщения, ИмяСобытияОповещения, ПараметрОповещения=Неопределено) ЭКСПОРТ
	
	Если стрИмяМодуля = "бит_БитфонСервер" Тогда
		стрВерсияКомпонентыОжидаемая = бит_БитфонСервер.ПолучитьВерсиюВнешнейКомпоненты();
		стрВерсияКомпонентыПользователя = бит_БитфонСервер.ПолучитьВерсиюВнешнейКомпонентыТекущегоПользователя();
	ИначеЕсли стрИмяМодуля = "бит_АТССервер" Тогда
		стрВерсияКомпонентыОжидаемая = бит_АТССервер.ПолучитьВерсиюВнешнейКомпоненты();
		стрВерсияКомпонентыПользователя = бит_АТССервер.ПолучитьВерсиюВнешнейКомпонентыТекущегоПользователя();
	КонецЕсли;
	
	допПараметры = Новый Структура();
	допПараметры.Вставить("ОбщийМодуль", стрИмяМодуля);
	допПараметры.Вставить("МакетВК", стрМакетВК);
	допПараметры.Вставить("ИмяФайлаВК", стрИмяФайлаВК);
	допПараметры.Вставить("ИмяКлассаВК", стрИмяКлассаВК);
	допПараметры.Вставить("ВерсияКомпонентыОжидаемая", стрВерсияКомпонентыОжидаемая);
	допПараметры.Вставить("ЗаголовокСообщения", стрЗаголовокСообщения);
	допПараметры.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
	допПараметры.Вставить("ПараметрОповещения", ПараметрОповещения);
	допПараметры.Вставить("ПовторноеПодключение", Ложь);
	
	стрСимволИмя = "BIT_" + стрИмяКлассаВК;
	допПараметры.Вставить("ИмяВнешнейКомпоненты", стрСимволИмя);
	
	Если стрВерсияКомпонентыОжидаемая <> стрВерсияКомпонентыПользователя Тогда
		УстановкаКомпонентыТелефонии(стрМакетВК, стрИмяФайлаВК, допПараметры, Ложь, "УстановкаКомпонентыТелефонииПроверкаВерсии");
	Иначе
		ПодключениеВнешнейКомпонентыПослеПроверкиВерсииВКПользователя(допПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключено, Параметры) ЭКСПОРТ
	
	Если НЕ Подключено Тогда
		Если Параметры.ПовторноеПодключение Тогда
			бит_ТелефонияКлиент.ВывестиСообщение(Параметры.ЗаголовокСообщения + " - Ошибка! Не удалось подключить внешнюю компоненту " + Параметры.ИмяФайлаВК + ".");
		Иначе
			УстановкаКомпонентыТелефонии(Параметры.МакетВК, Параметры.ИмяФайлаВК, Параметры, Истина, "УстановкаКомпонентыТелефонииПроверкаПодключенияВК");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	стрИмяТипаВК = "AddIn." + Параметры.ИмяВнешнейКомпоненты + "." + Параметры.ИмяКлассаВК;
	обВК = Новый (стрИмяТипаВК);
	
	Попытка
		стрВерсияКомпоненты = обВК.GetVersion();
		// Если версия отличается от ожидаемой, нужно заново установить внешнюю компоненту.
		Если стрВерсияКомпоненты <> Параметры.ВерсияКомпонентыОжидаемая Тогда
			бит_ТелефонияКлиент.ВывестиСообщение(Параметры.ЗаголовокСообщения + " - Ошибка! Неправильная версия внешней компоненты " + Параметры.ИмяФайлаВК + ". Перезапустите 1С для установки нужной версии.");
			УстановитьВерсиюВнешнейКомпонентыТекущегоПользователяПереопр(Параметры.ОбщийМодуль, стрВерсияКомпоненты);
		Иначе
			стрРазрядностьПлатформы = ? (бит_ТелефонияКлиент.Клиент64бит(), "x64", "x86");
			ПоказатьОповещениеПользователя(Параметры.ЗаголовокСообщения, , "Версия внешней компоненты " + стрВерсияКомпоненты + " " + стрРазрядностьПлатформы);
			УстановитьВерсиюВнешнейКомпонентыТекущегоПользователяПереопр(Параметры.ОбщийМодуль, Параметры.ВерсияКомпонентыОжидаемая);
			ОповещениеПриЗавершенииОперации(обВК, Параметры);
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение(Параметры.ЗаголовокСообщения + " - Ошибка! Не удалось получить версию внешней компоненты " + Параметры.ИмяФайлаВК + ". " + ОписаниеОшибки());
		УстановитьВерсиюВнешнейКомпонентыТекущегоПользователяПереопр(Параметры.ОбщийМодуль, "");
	КонецПопытки;
	
КонецПроцедуры
	
Функция ПроверкаНовыйИнтерфейсТакси() ЭКСПОРТ
	минВерсия = Новый Массив();
	минВерсия.Добавить(8);
	минВерсия.Добавить(3);
	минВерсия.Добавить(8);
	
	массВерсПлатф = бит_ТелефонияКлиент.ПолучитьВерсиюПлатформы();
	
	// проверка версии платформы
	платформаБольшеРавна838 = бит_ТелефонияКлиент.ПроверкаВерсий(массВерсПлатф, минВерсия);

	Если НЕ платформаБольшеРавна838 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверка режима совместимости
	массРежимСовм = бит_ТелефонияСервер.ПолучитьРежимСовместимостиКонфигурации();
	
	проверитьВариантИнтерфейсаКл = Ложь;
	
	Если (массРежимСовм = Неопределено) Тогда
		проверитьВариантИнтерфейсаКл = Истина;
	Иначе
		проверитьВариантИнтерфейсаКл = бит_ТелефонияКлиент.ПроверкаВерсий(массРежимСовм, минВерсия);
	КонецЕсли;
	
	вариантКлТакси = Ложь;
	
	Если проверитьВариантИнтерфейсаКл Тогда
		вариантКлТакси = (ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	КонецЕсли;
	
	Возврат вариантКлТакси;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьМодальноФормуВыбораКонтрагента(ИмяПроцедурыОповещения, ПараметрыПроцедурыОповещения)
	форма = ПолучитьФорму("Справочник." + бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов() + ".ФормаВыбора");
	ОткрытьМодальноФормуВнутр(форма, ИмяПроцедурыОповещения, ПараметрыПроцедурыОповещения, Истина);
КонецПроцедуры

Процедура ОткрытьФормуСпискаДокументаСФильтромПоКонтрагенту(стрИмяДокумента, КонтрагентСсылка)
	парамКонтрагент = Новый Структура("Партнер", КонтрагентСсылка);
	парам = Новый Структура("Отбор", парамКонтрагент);
	форма = ПолучитьФорму("Документ." + стрИмяДокумента + ".ФормаСписка", парам);
	форма.Открыть();
КонецПроцедуры

Функция СформироватьПараметрыОповещ(ИмяСобытияОповещения="", ПараметрОповещения=Неопределено)
	параметрыОповещ = Неопределено;
	Если ЗначениеЗаполнено(ИмяСобытияОповещения) Тогда
		параметрыОповещ = Новый Структура;
		параметрыОповещ.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
		параметрыОповещ.Вставить("ПараметрОповещения", ПараметрОповещения);
	КонецЕсли;
	Возврат параметрыОповещ;
КонецФункции

Функция ИмяОперацииОповещенияСВозвратомЗначенияВнутр()
	Возврат "ОповещениеПриЗавершенииОперации";
КонецФункции

Функция СформироватьОписаниеОповещСВозвратомЗначения(ИмяСобытияОповещения="", ПараметрОповещения=Неопределено)
	оповещ = Новый ОписаниеОповещения(ИмяОперацииОповещенияСВозвратомЗначенияВнутр(), ЭтотОбъект, СформироватьПараметрыОповещ(ИмяСобытияОповещения, ПараметрОповещения));
	Возврат оповещ;
КонецФункции

Функция СформироватьОписаниеОповещБезВозвратаЗначения(ИмяСобытияОповещения="", ПараметрОповещения=Неопределено)
	оповещ = Новый ОписаниеОповещения("ОповещениеПриЗавершенииПредупреждения", ЭтотОбъект, СформироватьПараметрыОповещ(ИмяСобытияОповещения, ПараметрОповещения));
	Возврат оповещ;
КонецФункции

Процедура ОткрытьМодальноФормуВнутр(форма, ИмяПроцедурыОповещения, ПараметрыПроцедурыОповещения, БлокироватьВесьИнтерфейс=Ложь)
	форма.РежимОткрытияОкна = ? (БлокироватьВесьИнтерфейс, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ЭтотОбъект, ПараметрыПроцедурыОповещения);
	форма.Открыть();
КонецПроцедуры

Процедура УстановитьВерсиюВнешнейКомпонентыТекущегоПользователяПереопр(стрИмяМодуля, стрВерсия)
	Если стрИмяМодуля = "бит_БитфонСервер" Тогда
		бит_БитфонСервер.УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя(стрВерсия);
	ИначеЕсли стрИмяМодуля = "бит_АТССервер" Тогда
		бит_АТССервер.УстановитьВерсиюВнешнейКомпонентыТекущегоПользователя(стрВерсия);
	КонецЕсли;
КонецПроцедуры

//
// Установка внешней компоненты.
//
Процедура УстановкаКомпонентыТелефонии(Знач стрВК, стрИмяФайлаСокр, Параметры, флагОбновлениеПутиВК, ИмяПроцедурыОповещения)

	стрПолноеИмяФайлаВК = бит_ТелефонияКлиент.УдалениеФайлаВнешнейКомпонентыТелефонии(стрИмяФайлаСокр);
	
	Если флагОбновлениеПутиВК Тогда
		Параметры.Вставить("МакетВК", стрПолноеИмяФайлаВК);
	КонецЕсли;
	
	оповещ = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ЭтотОбъект, Параметры);
	НачатьУстановкуВнешнейКомпоненты(оповещ, стрВК);
	
КонецПроцедуры

Процедура ПодключениеВнешнейКомпонентыПослеПроверкиВерсииВКПользователя(Параметры)
	
	НачатьПодключениеВнешнейКомпоненты(Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтотОбъект, Параметры),
		Параметры.МакетВК, Параметры.ИмяВнешнейКомпоненты, ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////
// Общий клиентский модуль телефонии БИТ
// Содержит функции, реализация которых зависит от конфигурации
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// === БИТ.Красота и здоровье ===

Процедура ОткрытьФормуДокументаСобытие(СсылкаДокумент) Экспорт 
	
	Если Не ЗначениеЗаполнено(СсылкаДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	CRMКлиент.ОбновитьДанныеСобытия(СсылкаДокумент);
	
КонецПроцедуры

Процедура СоздатьНовогоКонтрагента(стрНомер, Событие = Неопределено) Экспорт
	
	флагПомощникСоздания = Истина;
	стрИмяСправочника = бит_ТелефонияСерверПереопределяемый.ПолучитьИмяСправочникаКонтрагентов();
	парамОткр = Неопределено;
	Если флагПомощникСоздания Тогда
		парамОткр = Новый Структура();
		парамОткр.Вставить("РежимВыбора", Истина);
	КонецЕсли;
	форма = ПолучитьФорму("Справочник." + стрИмяСправочника + ".ФормаОбъекта", парамОткр);
	парам = Новый Структура();
	парам.Вставить("Номер",		стрНомер);
	парам.Вставить("Форма",		форма);	// Циклическая ссылка.
	парам.Вставить("Событие",	Событие);
	Оповестить("ОткрытаФормаНовогоКлиентаБИТФОН", Форма);
	ОткрытьМодальноФормуВнутр(форма, "СоздатьНовогоКонтрагентаЗавершение", парам, Истина);

КонецПроцедуры

Процедура СоздатьНовогоКонтрагентаЗавершение(Результат, Параметры) Экспорт
	КонтрагентСсылка = Результат;
	Если ЗначениеЗаполнено(КонтрагентСсылка)  Тогда
		ЗадатьНомерТелефонаКонтрагента(КонтрагентСсылка, Параметры.Номер);
		Если ЗначениеЗаполнено(Параметры.Событие) Тогда
			CRMКлиент.ОбновитьДанныеСобытия(Параметры.Событие, Новый Структура("Клиент", КонтрагентСсылка), Истина);
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("Форма") Тогда
			форма = Параметры.Форма;
			контрагент = форма.Объект;
			КонтрагентСсылка = контрагент.Ссылка;
			Параметры.Форма = Неопределено;	// Разрушение циклической ссылки.
			Если ЗначениеЗаполнено(КонтрагентСсылка)  Тогда
				ЗадатьНомерТелефонаКонтрагента(КонтрагентСсылка, Параметры.Номер);
				Если ЗначениеЗаполнено(Параметры.Событие) Тогда
					CRMКлиент.ОбновитьДанныеСобытия(Параметры.Событие, Новый Структура("Клиент", КонтрагентСсылка), Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выводит форму выбора контрагента и задает ему номер телефона.
//
// Параметры:
//  стрНомер - Строка - номер телефона.
//
Функция ВыбратьКонтрагентаЗадатьНомер(стрНомер, Событие = Неопределено) ЭКСПОРТ
	
	парам = Новый Структура();
	парам.Вставить("Номер",		стрНомер);
	парам.Вставить("Событие",	Событие);
	
	ОткрытьМодальноФормуВыбораКонтрагента("ВыбратьКонтрагентаЗадатьНомерЗавершение", парам);
	
КонецФункции

Процедура ВыбратьКонтрагентаЗадатьНомерЗавершение(Результат, Параметры) ЭКСПОРТ
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ЗадатьНомерТелефонаКонтрагента(Результат, Параметры.Номер);
		Если ЗначениеЗаполнено(Параметры.Событие) Тогда
			CRMКлиент.ОбновитьДанныеСобытия(Параметры.Событие, Новый Структура("Клиент", Результат), Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОткрытьКарточкуКонтрагента(Клиент, НомерТелефона = Неопределено) Экспорт
	
	Форма = Неопределено;
	ТипКонтакта = ТипЗнч(Клиент);
	ПараметрыФормы = Новый Структура("Ключ", Клиент);
	
	Форма = Неопределено;
	Если ТипКонтакта = Тип("СправочникСсылка.Клиенты") Тогда
		Форма = ПолучитьФорму("Справочник.Клиенты.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		Форма.Открыть();
	ИначеЕсли НомерТелефона <> Неопределено Тогда 	
		обработкаНеизвНомераПарам = Новый Структура("НеизвестныйНомер", НомерТелефона);
		фрмОбработкаНеизвНомера = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ОбработкаНомерНеопределен", обработкаНеизвНомераПарам);
		фрмОбработкаНеизвНомера.Открыть();
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьФормуОбработкиНеизвестногоНомера(НомерНеОпределен, НомерВходящий, Событие) Экспорт
	
	Если НомерНеОпределен Тогда
		НеизвестныйНомер = бит_ТелефонияКлиентСервер.СократитьНомерДляПоиска(НомерВходящий);
		обработкаНеизвНомераПарам = Новый Структура("НеизвестныйНомер, Событие", НеизвестныйНомер, Событие);
		фрмОбработкаНеизвНомера = ПолучитьФорму("Обработка.бит_БитфонОбщее.Форма.ОбработкаНомерНеопределен", обработкаНеизвНомераПарам);
		фрмОбработкаНеизвНомера.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура бит_ИсторияЗвонковОбработкаРасшифровки(ДанныеРасшифровки, Расшифровка, СтандартнаяОбработка) Экспорт
	
	стрЗапись = бит_ТелефонияСерверПереопределяемый.ПолучитьСсылкуНаЗаписьРазговораИзДанныхРасшифровкиВоВременномХранилище(ДанныеРасшифровки, Расшифровка);
	Если ЗначениеЗаполнено(стрЗапись) Тогда
		СтандартнаяОбработка = Ложь;
		бит_БитфонКлиент.ВоспроизвестиЗаписьРазговора(стрЗапись);
	КонецЕсли;
	
КонецПроцедуры

//
Функция ПроверкаВерсийКонф(массВерсия, массМинВерсия)
	проверкаВерсияБольшеРавна = Ложь;
	Для й=0 По 2 Цикл
		Если (массВерсия[й] > массМинВерсия[й]) Тогда
			проверкаВерсияБольшеРавна = Истина;
			Прервать;
		ИначеЕсли (массВерсия[й] < массМинВерсия[й]) Тогда
			проверкаВерсияБольшеРавна = Ложь;
			Прервать;
		Иначе
			// версии равны,нужно проверять дальше
			проверкаВерсияБольшеРавна = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат проверкаВерсияБольшеРавна;
КонецФункции

Функция Позвонить(НомерТелефона, ДокументЗвонок = Неопределено, ОснованиеСобытия = Неопределено) Экспорт
	
	
	ПараметрыОповещения = Новый Структура("НомерТелефона", НомерТелефона);
	Если ЗначениеЗаполнено(ДокументЗвонок) Тогда
		ПараметрыОповещения.Вставить("ДокументСобытие", ДокументЗвонок);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОснованиеСобытия) Тогда
		ПараметрыОповещения.Вставить("ОснованиеСобытия", ОснованиеСобытия);
	КонецЕсли;
	
	Попытка
		ФормаОповещ = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
		Если ФормаОповещ.Открыта() Тогда
			ФормаОповещ.Активизировать();		
			Оповестить("БитФон_НачалоРазговора", ПараметрыОповещения);
		Иначе
			ФормаОповещ.ПриПодключенииДействие = "БитФон_НачалоРазговора";
			ФормаОповещ.ПриПодключенииПараметр = ПараметрыОповещения;
			ФормаОповещ.Открыть();
			ФормаОповещ.Активизировать();
			Состояние("Ожидание подключения...");
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки() );
	КонецПопытки;
	
КонецФункции

Функция ПозвонитьМонитор(НомерТелефона, ДокументЗвонок = Неопределено, ОснованиеСобытия = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура("НомерТелефона", НомерТелефона);
	Если ЗначениеЗаполнено(ДокументЗвонок) Тогда
		ПараметрыОповещения.Вставить("ДокументСобытие", ДокументЗвонок);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОснованиеСобытия) Тогда
		ПараметрыОповещения.Вставить("ОснованиеСобытия", ОснованиеСобытия);
	КонецЕсли;
	
	Попытка
		ФормаОповещ = ПолучитьФорму("Обработка.бит_БитАТС.Форма.Монитор");
		Если ФормаОповещ.Открыта() Тогда
			ФормаОповещ.Активизировать();		
			Оповестить("БитФонМонитор_НачалоРазговора", ПараметрыОповещения);
		Иначе
			ФормаОповещ.ПриПодключенииДействие = "БитФонМонитор_НачалоРазговора";
			ФормаОповещ.ПриПодключенииПараметр = ПараметрыОповещения;
			ФормаОповещ.Открыть();
			ФормаОповещ.Активизировать();
			Состояние("Ожидание подключения...");
		КонецЕсли;
	Исключение
		бит_ТелефонияКлиент.ВывестиСообщение( ОписаниеОшибки() );
	КонецПопытки;
	
КонецФункции

Функция ПрекратитьЗвонок(ДокЗвонка) Экспорт
	ФормаБитФон = ПолучитьФорму("Обработка.бит_Битфон.Форма.ОсновнаяФорма");
	Если Не ФормаБитФон.Открыта() Или ДокЗвонка.Пустая() Или ДокЗвонка <> ФормаБитФон.ТекДокументЗвонка Тогда
		Возврат Ложь;
	КонецЕсли;
	ФормаБитФон.ЗавершитьРазговор();		
КонецФункции
