#Область ПрограммныйИнтерфейс

// Возвращает структуру значений учетной политики
//
// Параметры:
// 	ИспользоватьКеш - Булево - следует ли использовать кеш значения.
//
// Возвращаемое значение:
//  Структура - Структура с параметрами учетной политики.
//
Функция ПолучитьУчетнуюПолитику(ИспользоватьКеш = Истина) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокЖизниКеша = 3600;
	
	Если ИспользоватьКеш = Истина 
		И (Не ПараметрыСеанса.УчетнаяПолитика.Свойство("ДатаОбновленияДанныхПараметраСеанса")
			Или (ПараметрыСеанса.УчетнаяПолитика.ДатаОбновленияДанныхПараметраСеанса + СрокЖизниКеша) > ТекущаяДата())
	Тогда
	    мУчетнаяПолитика = Новый Структура(ПараметрыСеанса.УчетнаяПолитика);
		
		Если мУчетнаяПолитика.Количество() < 2 Тогда
			мУчетнаяПолитика = ПолучитьУчетнуюПолитику(Ложь);
		КонецЕсли;
		
		Возврат мУчетнаяПолитика;
	Иначе
		
		нзУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
		нзУчетнаяПолитика.Прочитать();
		
		мУчетнаяПолитика = Новый Структура;
		
		Если нзУчетнаяПолитика.Количество()<>0 Тогда
			
			мУчетнаяПолитика = Новый Структура;
			мМетаданныеРесурсы = Метаданные.РегистрыСведений.УчетнаяПолитика.Ресурсы;
			Для Каждого Ресурс Из мМетаданныеРесурсы Цикл
				мУчетнаяПолитика.Вставить(Ресурс.Имя, нзУчетнаяПолитика[0][Ресурс.Имя]); 
			КонецЦикла;

		Иначе
			мУчетнаяПолитика = ПолучитьУчетнуюПолитикуПоУмолчанию();                                         
		КонецЕсли;
		
		ПроцедурыСпециализацииПоставки.ДополнитьУчетнуюПолитикуНастройкамиУзла(мУчетнаяПолитика);
		ДополнитьУчетнуюПолитикуРасширеннымиНастройками(мУчетнаяПолитика);
		
		мУчетнаяПолитика.Вставить("ДатаОбновленияДанныхПараметраСеанса", ТекущаяДата());
		
		УправлениеНастройкамиПереопределяемый.ПриПолученииУчетнойПолитики(мУчетнаяПолитика);
		
		ПараметрыСеанса.УчетнаяПолитика = Новый ФиксированнаяСтруктура(мУчетнаяПолитика);
		
	КонецЕсли;
	
	Возврат мУчетнаяПолитика;
	
КонецФункции

// Добавляет в учетную политику значения расширенных настроек.
//
// Параметры:
//  мУчетнаяПолитика - Структура - Структура со значениями параметров учетной политики, 
//                                 в качестве ключа используется имя параметра.
//
Процедура ДополнитьУчетнуюПолитикуРасширеннымиНастройками(мУчетнаяПолитика) Экспорт
	
	нзУчетнаяПолитика = РегистрыСведений.УчетнаяПолитикаРасширенная.СоздатьНаборЗаписей();
	нзУчетнаяПолитика.Прочитать();
	тзУчетнаяПолитика = нзУчетнаяПолитика.Выгрузить();
	
	пчПараметры = Перечисления.ПараметрыУчетнойПолитики;
	
	ИменаПараметровХранилищеЗначения = УправлениеНастройкамиПовтИсп.ПолучитьПараметрыУчетнойПолитикиРасширеннойХранилищеЗначений();
	
	Для Каждого МетаданныеПараметра Из Метаданные.Перечисления.ПараметрыУчетнойПолитики.ЗначенияПеречисления Цикл
		
		ИмяПараметра = МетаданныеПараметра.Имя;
		Параметр = пчПараметры[ИмяПараметра];
		СтрокаУП = тзУчетнаяПолитика.Найти(Параметр, "Параметр");
		
		Если СтрокаУП = Неопределено Тогда
			Значение = ПолучитьЗначениеПараметраУчетнойПолитикиРасширеннойПоУмолчанию(ИмяПараметра);
		ИначеЕсли ИменаПараметровХранилищеЗначения.Найти(ИмяПараметра) <> Неопределено Тогда
			Значение = СтрокаУП.ХранилищеЗначения;
		ИначеЕсли СтрокаУП.Значение = Неопределено Тогда
			Значение = ПолучитьЗначениеПараметраУчетнойПолитикиРасширеннойПоУмолчанию(ИмяПараметра);
		Иначе
			Значение = СтрокаУП.Значение;
		КонецЕсли;
		
		мУчетнаяПолитика.Вставить(МетаданныеПараметра.Имя, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение параметра учетной политики.
//
// Параметры:
//  ИмяПараметра - Строка	 - имя параметра
//  Дата		 - Дата	 - не используется.
// 
// Возвращаемое значение:
//  Произвольный - определяется типом значения параметра.
//
Функция ПолучитьПараметрУчетнойПолитики(ИмяПараметра, Дата = Неопределено) Экспорт 
	
	мУчетнаяПолитика = ПолучитьУчетнуюПолитику();
	Возврат мУчетнаяПолитика[ИмяПараметра];
	
КонецФункции

// См. ПолучитьПараметрУчетнойПолитики().
Функция ПараметрУчета(ИмяПараметра) Экспорт
	Возврат ПолучитьПараметрУчетнойПолитики(ИмяПараметра);
КонецФункции

// Возвращает структуру значений учетной политики по умолчанию
//
// Возвращаемое значение:
//  Структура - Структура с параметрами учетной политики.
//
Функция ПолучитьУчетнуюПолитикуПоУмолчанию()
	
	мМетаданные	= Метаданные.РегистрыСведений.УчетнаяПолитика.Ресурсы;
	СтруктураВозврата = Новый Структура;
	Для Каждого Реквизит из мМетаданные Цикл
		
		СтруктураВозврата.Вставить(Реквизит.Имя, ПолучитьЗначениеПараметраУчетнойПолитикиПоУмолчанию(Реквизит.Имя));
		
	КонецЦикла;
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает значение параметра учетной политики по умолчанию.
//
// Параметры:
//  ИмяПараметра - Строка	 - имя параметра.
// 
// Возвращаемое значение:
//  Произвольный - определяется типом значения параметра.
//
Функция ПолучитьЗначениеПараметраУчетнойПолитикиПоУмолчанию(ИмяПараметра) Экспорт
	
	Если ИмяПараметра = "ОсновнойВидОплаты" Тогда                                                   
		Возврат Перечисления.ВидыОплаты.Наличными;                                                 
	ИначеЕсли ИмяПараметра = "ПериодичностьПланирования" Тогда                                    
		Возврат Дата(1,1,1,0,15,0);
	ИначеЕсли ИмяПараметра = "ШиринаКолонкиРаботыЖурналаЗаписи" Тогда                                    
		Возврат 20;          
	ИначеЕсли ИмяПараметра = "ВремяНачалаРаботы" Тогда
		Возврат Дата(1,1,1,9,0,0);
	ИначеЕсли ИмяПараметра = "ВремяОкончанияРаботы" Тогда
		Возврат Дата(1,1,1,21,0,0);
	ИначеЕсли ИмяПараметра = "ИспользоватьСертификаты" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяПараметра = "ИспользоватьСкидки" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ПоУмолчаниюРучноеРедактированиеСкидок" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ВестиУчетДлительностиРабот" Тогда       
		Возврат Ложь;
	ИначеЕсли ИмяПараметра = "ВестиУчетПоХарактеристикам" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяПараметра = "ВестиУчетРасходаМатериаловНаУслуги" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ИспользоватьНесколькоСотрудниковВДокументах" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ОсновноеЗначениеПереключателяНесколькихСотрудниковВЗаявке" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ИспользоватьШтрихкодированиеКлиентов" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ОсновнойЦветЗаявки" Тогда
		Возврат Новый ХранилищеЗначения(ПолучитьЦветЗаявкипоУмолчанию());
	ИначеЕсли ИмяПараметра = "СписыватьПартииВМинус" Тогда
		Возврат 3;
	ИначеЕсли ИмяПараметра = "ВключатьНормативныеМатериалыВСтоимостьУслуг" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "РедактироватьДатуНачалаДействияСертификатаПриПродаже" Тогда
		Возврат Истина;          
	ИначеЕсли ИмяПараметра = "АвтоматическиЗаполнятьНормыРасходаМатериаловОУ" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "АвтоматическиЗаполнятьНормыРасходаМатериаловПриема" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяПараметра = "ВалютаУчета" Тогда
		Возврат Справочники.Валюты.Рубль; 
	ИначеЕсли ИмяПараметра = "РазрешитьПродажуПоНулевойСтоимости" Тогда
		Возврат Истина; 
	ИначеЕсли ИмяПараметра = "ПорядокОкругленияПослеСкидки" Тогда
		Возврат Перечисления.ПорядкиОкругления.Окр0_01; 
	ИначеЕсли ИмяПараметра = "ПоказыватьАртикул" Тогда
		Возврат Истина;        
	ИначеЕсли ИмяПараметра = "ОсновнойЦветНерабочегоВремени" Тогда
		Возврат Новый ХранилищеЗначения(ПолучитьЦветНерабочегоВременипоУмолчанию());
	ИначеЕсли ИмяПараметра = "ВидПредставленияФИО" Тогда
		Возврат "Фамилия Имя Отчество";
	ИначеЕсли ИмяПараметра = "УменьшатьВыработкуПриВозврате" Тогда       
		Возврат Истина; 
	ИначеЕсли ИмяПараметра = "РежимЗаписиНаПрием" Тогда
		Возврат Перечисления.РежимыЗаписиНаПрием.КВрачу;
	ИначеЕсли ИмяПараметра = "ВестиУчетМестонахожденияМедкарт" Тогда
		Возврат Ложь;		
	ИначеЕсли ИмяПараметра = "АвтоСозданиеМедкарт" Тогда
		Возврат Истина;		
	ИначеЕсли ИмяПараметра = "ИспользоватьЛабораторныеИсследования" Тогда
		Возврат Метаданные.Подсистемы.Найти("ЛабораторныеИсследования") <> Неопределено;
	ИначеЕсли ИмяПараметра = "РаботаСЗубнымиКартами" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяПараметра = "ИспользуетсяРежимВводаПриемаПоОдномуШаблону" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ИспользоватьЛистыОжиданияЗаписи" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ВысотаСтрокиЖурналаЗаписи" Тогда
		Возврат 12;
	ИначеЕсли ИмяПараметра = "БазовыйКаталогСетевой" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "РежимОтбораЖурналаЗаписиПоМоделямРасписания" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ПоУмолчаниюПодборСубъектовВЖурналЗаписиПоСтруктуреОрганизации" Тогда
		Возврат 0;
	ИначеЕсли ИмяПараметра = "РазворачиватьДеревоСубъектовРасписанияПриПодбореВЖурналЗаписи" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "РазворачиватьДеревоМоделейРасписанияПриПодбореВЖурналЗаписи" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ФормироватьЖурналЗаписиБезОтбора" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ВключатьВЖурналЗаписиУчастниковБезМоделейРасписания" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ПредставлениеВЧекеККМОперацииПополненияБаланса" Тогда
		Возврат "Расчет по депозиту";
	ИначеЕсли ИмяПараметра = "ИспользоватьСтраховыеПолисы" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ИспользоватьПрофосмотры" Тогда
		Возврат Истина;
	ИначеЕсли ИмяПараметра = "ИспользоватьМедосмотрыСправки" Тогда
		Возврат Истина;
	Иначе
		Возврат Метаданные.РегистрыСведений.УчетнаяПолитика.Ресурсы[ИмяПараметра].Тип.ПривестиЗначение(Неопределено);
	КонецЕсли;	
	
КонецФункции

// Возвращает значение параметра расширенной(дополнительной) учетной политики по умолчанию.
//
// Параметры:
//  Параметр					 - Строка	 - параметр.
//  ПараметрыХранилищеЗначения	 - Массив	 - кеш списка параметров, хранимых как хранилище значения.
// 
// Возвращаемое значение:
//  Произвольный - определяется типом значения параметра.
//
Функция ПолучитьЗначениеПараметраУчетнойПолитикиРасширеннойПоУмолчанию(ИмяПараметра, Знач ПараметрыХранилищеЗначения = Неопределено) Экспорт
	
	Значение = Неопределено;
	
	УчетнаяПолитикаРасширенная = УправлениеНастройкамиПовтИсп.ПолучитьУчетнуюПолитикуРасширеннуюПоУмолчанию();
	
	Если УчетнаяПолитикаРасширенная.Свойство(ИмяПараметра) Тогда 
		Значение = УчетнаяПолитикаРасширенная[ИмяПараметра];
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Возвращает значение настройки пользователя
//
// Параметры:
//  Сотрудник	 - СправочникСсылка.Сотрудники	 - ссылка на элемент справочника "Сотрудники"
//  Настройка	 - Строка						 - имя предопределенного элемента настройки
//  Филиал		 - СправочникСсылка.Филиалы		 - Филиал, для которого требуется получить настройку.
// 
// Возвращаемое значение:
//  Произвольный.
//
Функция ПолучитьЗначениеСотрудникаПоУмолчанию(Сотрудник, Настройка, Знач Филиал = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Филиал = Справочники.Филиалы.ПустаяСсылка();
	КонецЕсли;
	
	ЗаписьНастройки = РегистрыСведений.НастройкиСотрудников.СоздатьМенеджерЗаписи();
	ЗаписьНастройки.Сотрудник = Сотрудник;
	ЗаписьНастройки.Настройка = ПланыВидовХарактеристик.НастройкиСотрудников[Настройка];
	ЗаписьНастройки.Филиал = Филиал;
	ЗаписьНастройки.Прочитать();
	Если ЗаписьНастройки.Выбран() Тогда
		Возврат ЗаписьНастройки.Значение;
	ИначеЕсли ЗначениеЗаполнено(Филиал) Тогда
		ЗаписьНастройки.Сотрудник = Сотрудник;
		ЗаписьНастройки.Настройка = ПланыВидовХарактеристик.НастройкиСотрудников[Настройка];
		ЗаписьНастройки.Филиал = Справочники.Филиалы.ПустаяСсылка();
		ЗаписьНастройки.Прочитать();
		Если ЗаписьНастройки.Выбран() Тогда
			Возврат ЗаписьНастройки.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПланыВидовХарактеристик.НастройкиСотрудников[Настройка].Метаданные().Тип.ПривестиЗначение(Неопределено);
	
КонецФункции

// Возвращает значение параметра учетной политики филиала
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра
//  Филиал		 - СправочникСсылка.Филиалы	 - Филиал, для которого требуется получить настройку.
// 
// Возвращаемое значение:
//  Произвольный - определяется типом значения параметра.
//
Функция ПолучитьПараметрУчетнойПолитикиФилиала(ИмяПараметра, Знач Филиал = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	КонецЕсли;
	
	мУчетнаяПолитикаФилиала = РегистрыСведений.УчетнаяПолитикаФилиалов.Выбрать(Новый Структура("Филиал",Филиал));
	
	Если мУчетнаяПолитикаФилиала.Следующий() Тогда
		Если ИмяПараметра = "ОсновнойПрейскурант" Тогда
			Если ЗначениеЗаполнено(мУчетнаяПолитикаФилиала[ИмяПараметра]) Тогда
				Возврат мУчетнаяПолитикаФилиала[ИмяПараметра];
			Иначе 
				Возврат ПолучитьЗначениеПараметраУчетнойПолитикиФилиалаПоУмолчанию(ИмяПараметра)
			КонецЕсли; 
		Иначе 
			Возврат мУчетнаяПолитикаФилиала[ИмяПараметра]; 
		КонецЕсли;	
	Иначе
		Возврат ПолучитьЗначениеПараметраУчетнойПолитикиФилиалаПоУмолчанию(ИмяПараметра)
	КонецЕсли;
	
КонецФункции

// Возвращает значение параметра учетной политики филиала по умолчанию
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра
//
// Возвращаемое значение:
//  Произвольный - определяется типом значения параметра.
//
Функция ПолучитьЗначениеПараметраУчетнойПолитикиФилиалаПоУмолчанию(ИмяПараметра) Экспорт
	
	Если ИмяПараметра = "ОсновнойПрейскурант" Тогда
		Возврат ПолучитьПараметрУчетнойПолитики("ОсновнойПрейскурант")
	ИначеЕсли 	ИмяПараметра = "ПрефиксМедицинскойКарты" Тогда                                    
		Возврат "";
	Иначе
		Возврат Метаданные.РегистрыСведений.УчетнаяПолитикаФилиалов.Ресурсы[ИмяПараметра].Тип.ПривестиЗначение(Неопределено);
	КонецЕсли;	
	
КонецФункции

// Функция возвращает значение прейскуранта для филиала, если не заполнен,
//  то значение основного прейскуранта из учетной политики.
//
// Параметры:
//  Филиал		 - СправочникСсылка.Филиалы	 - Филиал, для которого требуется получить настройку.
// 
// Возвращаемое значение:
//   СправочникСсылка.Прейскуранты.
//
Функция ПолучитьПрейскурантФилиала(Знач Филиал = Неопределено) Экспорт 
	
	Прейскурант = ПолучитьПараметрУчетнойПолитикиФилиала("ОсновнойПрейскурант", Филиал);

	Если Не ЗначениеЗаполнено(Прейскурант) Тогда
		Прейскурант = ПолучитьПараметрУчетнойПолитики("ОсновнойПрейскурант")
	КонецЕсли;
	
	Возврат Прейскурант;
	
КонецФункции

// Фукнция возвращает цвет заявок в календаре по-умлочнию
//
// Возвращаемое значение:
// 	Цвет.
//
Функция ПолучитьЦветЗаявкиПоУмолчанию() Экспорт
	Возврат Новый Цвет(185,220,165);
КонецФункции

Функция ПолучитьЦветНерабочегоВременипоУмолчанию()
	Возврат Новый Цвет(255,245,220);	
КонецФункции

// Сохраняет значение параметра учетной политики.
//
// Параметры:
//  ИмяПараметра - Строка	 - имя параметра
//  Значение	 - Произвольный	 - значение, соответствующее параметру.
//
Процедура УстановитьЗначениеПараметраУчетнойПолитики(ИмяПараметра, Значение) Экспорт
	
	РесурсУП = Метаданные.РегистрыСведений.УчетнаяПолитика.Ресурсы.Найти(ИмяПараметра);
	Если РесурсУП <> Неопределено Тогда 
		
		Запись = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
		Запись.Прочитать();
		Если Не РесурсУП.Тип.СодержитТип(Тип("ХранилищеЗначения")) Или 
			(РесурсУП.Тип.СодержитТип(Тип("ХранилищеЗначения")) И ТипЗнч(Значение) = Тип("ХранилищеЗначения")) 
		Тогда 
			Запись[ИмяПараметра] = Значение;
		Иначе
			Запись[ИмяПараметра] = Новый ХранилищеЗначения(Значение);
		КонецЕсли;
		Запись.Записать();
		
	Иначе	
		
		ИменаПараметровХранилищеЗначения = УправлениеНастройкамиПовтИсп.ПолучитьПараметрыУчетнойПолитикиРасширеннойХранилищеЗначений();	
		Если Метаданные.Перечисления.ПараметрыУчетнойПолитики.ЗначенияПеречисления.Найти(ИмяПараметра) <> Неопределено Тогда
			
			ПараметрРасширенный = Перечисления.ПараметрыУчетнойПолитики[ИмяПараметра]; 
			Запись = РегистрыСведений.УчетнаяПолитикаРасширенная.СоздатьМенеджерЗаписи();
			Запись.Параметр = ПараметрРасширенный;
			
			Если ИменаПараметровХранилищеЗначения.Найти(ИмяПараметра) <> Неопределено Тогда
				Запись.ХранилищеЗначения = ?(ТипЗнч(Значение) = Тип("ХранилищеЗначения"), Значение, Новый ХранилищеЗначения(Значение));
			Иначе
				Запись.Значение = Значение;
			КонецЕсли;
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Требуется ли учет по филиалам
// 
// Возвращаемое значение:
//   Булево. 
//
Функция ТребуетсяУчетПоФилиалам() Экспорт
	
	Возврат ПараметрыСеанса.ИспользованиеРИБ Или ПараметрыСеанса.УчетПоНесколькимФилиалам;
	
КонецФункции

// Функция возвращает основной филиал пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи	 - пользователь.
// 
// Возвращаемое значение:
//   СправочникСсылка.Филиалы.
//
Функция ПолучитьФилиалПоУмолчаниюПользователя(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Филиал = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь,"ОсновнойФилиал");
	
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Если Метаданные.ПланыОбмена.Найти("Полный") <> Неопределено Тогда
			Филиал = ПланыОбмена["Полный"].ЭтотУзел().Филиал;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Филиал;
	
КонецФункции

// Основная валюта базы
// 
// Возвращаемое значение:
//  СправочникСсылка.Валюты.
//
Функция ОсновнаяВалюта() Экспорт
	
	Валюта = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВалютаУчета");
  	Если Не ЗначениеЗаполнено(Валюта) Тогда
    	Валюта = Справочники.Валюты.Рубль;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

// Возвращает краткое наименование валюты, указанной в учетной политике как основная.
//
// Возвращаемое значение: 
//	Строка - краткое наименование валюты.
//
Функция КраткоеНаименованиеОсновнойВалюты() Экспорт
	
	ВалютаУчета = УправлениеНастройками.ОсновнаяВалюта();
	Если ЗначениеЗаполнено(ВалютаУчета) Тогда
		Возврат ВалютаУчета.Наименование;
	Иначе
		Возврат "руб.";
	КонецЕсли;
	
КонецФункции 

#КонецОбласти
