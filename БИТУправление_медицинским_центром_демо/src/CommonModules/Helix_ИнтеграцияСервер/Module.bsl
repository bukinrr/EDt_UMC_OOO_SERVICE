#Область СлужебныйПрограммныйИнтерфейс

#Область СправочнаяИнформация

// Обновляет справочники лабораторий.
//
// Параметры:
//  ОбновитьБезПроверкиДаты	 - Булево 
// 
// Возвращаемое значение:
//  Булево - Истина, если были изменения в справочниках. 
//
Функция ОбновитьСправочники(ОбновитьБезПроверкиДаты = Ложь) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Helix_ИспользуетсяИнтеграцияСHelix Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Лаборатории.Ссылка КАК Лаборатория,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ВерсииФайловСправочниковЛабораторий.ВремяИзменения, ДЕНЬ), НЕОПРЕДЕЛЕНО) КАК ДатаФайла
	|ИЗ
	|	Справочник.Лаборатории КАК Лаборатории
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииФайловСправочниковЛабораторий КАК ВерсииФайловСправочниковЛабораторий
	|		ПО Лаборатории.Ссылка = ВерсииФайловСправочниковЛабораторий.Лаборатория
	|ГДЕ
	|	Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Helix)
	|	И НЕ Лаборатории.ПометкаУдаления"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЛаборатории = Новый Массив;
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	Пока Выборка.Следующий() Цикл
		Если Не ОбновитьБезПроверкиДаты	И Выборка.ДатаФайла <> Неопределено	И Выборка.ДатаФайла >= ТекущаяДата Тогда
			Продолжить;
		КонецЕсли;
		Если МассивЛаборатории.Найти(Выборка.Лаборатория) = Неопределено Тогда
			МассивЛаборатории.Добавить(Выборка.Лаборатория);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Лаборатория Из МассивЛаборатории Цикл
		НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
		Если НастройкиВзаимодействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		ЗагрузитьНевариативныеСправочникиHelix(НастройкиВзаимодействия);
		ОпределитьИсключенныеИсследования(НастройкиВзаимодействия);
		
		Если Не ЕстьИзменения Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ЕстьИзменения;
	
КонецФункции

// Возвращает хранимые настройки взаимодействия с Хеликс-лабораториями.
//
// Параметры:
//  Лаборатория - СправочникСсылка.Лаборатории - лаборатория, для которой получаем настройки.
// 
// Возвращаемое значение:
//	Структура - Настройки для работы филиала с Хеликс-лабораториями.
//
Функция ПолучитьНастройкиВзаимодействия(Лаборатория) Экспорт
	
	Настройки = Неопределено;
	
	Запись = РегистрыСведений.Helix_НастройкиВзаимодействия.СоздатьМенеджерЗаписи();
	Запись.Лаборатория = Лаборатория;
	Запись.Прочитать();
	Если Запись.Выбран() И Запись.Используется Тогда
		Настройки = Новый Структура;
		МетаданныеРесурсы = Метаданные.РегистрыСведений.Helix_НастройкиВзаимодействия.Ресурсы;
		Для Каждого Ресурс Из МетаданныеРесурсы Цикл
			Настройки.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
		КонецЦикла;
		
		МетаданныеИзмерения = Метаданные.РегистрыСведений.Helix_НастройкиВзаимодействия.Измерения;
		Для Каждого Измерение Из МетаданныеИзмерения Цикл
			Настройки.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
		КонецЦикла;
		
		// Получение порта соединения
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Настройки.FTPСоединениеПуть);
		Настройки.FTPСоединениеПуть = СтруктураURI.Хост;
		Настройки.Вставить("Порт", ?(ЗначениеЗаполнено(СтруктураURI.Порт), СтруктураURI.Порт, 21));
		
	КонецЕсли;
		
	Возврат Настройки;
	
КонецФункции

Функция ПолучитьНаборЗаписейВерсийФайлов(Лаборатория, Прочитать = Истина) Экспорт
	
	НЗВерсииФайлов = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьНаборЗаписей();
	НЗВерсииФайлов.Отбор.Лаборатория.Установить(Лаборатория);
	
	Если Прочитать Тогда
		НЗВерсииФайлов.Прочитать();
	КонецЕсли;
	
	Возврат НЗВерсииФайлов;
	
КонецФункции

// Возвращает Истина, если операция выполнена
Функция ЗагрузитьСправочникЗадержкаИсследований(НастройкиВзаимодействия) Экспорт
	
	ОперацияВыполнена = Истина;
	
	ИмяФайла = "nomenclatureexceptions.xml";
	Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	Запись.ИмяФайла = ИмяФайла;
	Запись.Прочитать();
	Если НачалоДня(Запись.ВремяИзменения) = НачалоДня(ТекущаяДата()) И Запись.Выбран()  Тогда
		ДанныеФайла = Запись.ДанныеФайла;
	Иначе
		ТекстОшибки = "";
		ФайлыСправочников = ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки,,ПолучитьМассивИменФайловИзИмени(ИмяФайла));
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Ложь;
		Иначе
			ФайлСправочника = ФайлыСправочников.Найти(ИмяФайла,"ИмяФайла");
			Если ФайлСправочника = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке("Не удалось получить данные файла "+ИмяФайла);
				Возврат Ложь;
			Иначе
				ДанныеФайла = ФайлСправочника.ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайла);
	
	нзЗадержкиИсследований = РегистрыСведений.ПериодыНедоступностиАнализов.СоздатьНаборЗаписей();
	нзЗадержкиИсследований.Отбор.Лаборатория.Установить(НастройкиВзаимодействия.Лаборатория);
	нзЗадержкиИсследований.Записать();
	
	ПравилоDATAPACKET = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("HELIX\NomenclatureExceptions", "DATAPACKET"));
	Попытка
		КоллекцияСтрок = ПравилоDATAPACKET.ROWDATA.ROW;  
	Исключение
		КоллекцияСтрок = Новый Массив;	// На случай, если данных в таблице сейчас нет.
	КонецПопытки;
	
	Попытка
		Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
			
			Запись = нзЗадержкиИсследований.Добавить();
			Запись.Период			= СтрокаДанных.StartTime;
			Запись.ДатаОкончания	= ?(СтрокаДанных.EndTime = НачалоДня(СтрокаДанных.EndTime), КонецДня(СтрокаДанных.EndTime), СтрокаДанных.EndTime);
			Запись.Лаборатория		= НастройкиВзаимодействия.Лаборатория;
			Запись.ID				= СтрокаДанных.HXID;
		КонецЦикла; 
	Исключение
		Запись = нзЗадержкиИсследований.Добавить();  	// Одна запись
		Запись.Период   = КоллекцияСтрок.StartTime;
		Запись.ДатаОкончания = ?(КоллекцияСтрок.EndTime = НачалоДня(КоллекцияСтрок.EndTime), КонецДня(КоллекцияСтрок.EndTime), КоллекцияСтрок.EndTime);
		Запись.Лаборатория  = НастройкиВзаимодействия.Лаборатория;
		Запись.ID    = КоллекцияСтрок.HXID;
	КонецПопытки; 	
	
	Попытка
		нзЗадержкиИсследований.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОперацияВыполнена = Ложь;
	КонецПопытки;	
	
	Возврат ОперацияВыполнена;
	
КонецФункции

// Возвращает Истина, если операция выполнена
Функция ЗагрузитьСправочникПравилАнализов(НастройкиВзаимодействия) Экспорт
	
	ОперацияВыполнена = Истина;
	
	ИмяФайла = "rules.xml";
	Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	Запись.ИмяФайла = ИмяФайла;
	Запись.Прочитать();
	Если НачалоДня(Запись.ВремяИзменения) = НачалоДня(ТекущаяДата()) И Запись.Выбран()  Тогда
		ДанныеФайла = Запись.ДанныеФайла;
	Иначе
		ТекстОшибки = "";
		ФайлыСправочников = ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки,, ПолучитьМассивИменФайловИзИмени(ИмяФайла));
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Ложь;
		Иначе
			ФайлСправочника = ФайлыСправочников.Найти(ИмяФайла,"ИмяФайла");
			Если ФайлСправочника = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке("Не удалось получить данные файла "+ИмяФайла);
				Возврат Ложь;
			Иначе
				ДанныеФайла = ФайлСправочника.ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайла);
	
	нзПравилаАнализов = РегистрыСведений.Helix_ПравилаАнализов.СоздатьНаборЗаписей();
	нзПравилаАнализов.Отбор.Лаборатория.Установить(НастройкиВзаимодействия.Лаборатория);
	
	ПравилоDATAPACKET = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("HELIX\Rules", "DATAPACKET"));
	Попытка
		КоллекцияСтрок = ПравилоDATAPACKET.ROWDATA.ROW;  
	Исключение
		КоллекцияСтрок = Новый Массив;	// На случай, если данных в таблице сейчас нет.
	КонецПопытки;
	
	Попытка
		Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
			
			Запись = нзПравилаАнализов.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			Запись.REQUIRED = (ВРег(СтрокаДанных.REQUIRED) = "T");
			Запись.DESTRUCTIVE = (ВРег(СтрокаДанных.DESTRUCTIVE) = "T");
			
			Запись.Лаборатория = НастройкиВзаимодействия.Лаборатория;
		КонецЦикла; 
	Исключение
		Запись = нзПравилаАнализов.Добавить();  	// Одна запись
		ЗаполнитьЗначенияСвойств(Запись, КоллекцияСтрок);
	КонецПопытки; 	

	
	Попытка
		нзПравилаАнализов.Записать();
	Исключение
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если операция выполнена
Функция ЗагрузитьСправочникПодготовкиПациентов(НастройкиВзаимодействия) Экспорт
	
	ОперацияВыполнена = Истина;
	
	ИмяФайла = "patientpreparations.xml";
	Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	Запись.ИмяФайла = ИмяФайла;
	Запись.Прочитать();
	Если НачалоДня(Запись.ВремяИзменения) = НачалоДня(ТекущаяДата()) И Запись.Выбран()  Тогда
		ДанныеФайла = Запись.ДанныеФайла;
	Иначе
		ТекстОшибки = "";
		ФайлыСправочников = ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки,, ПолучитьМассивИменФайловИзИмени(ИмяФайла));
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Ложь;
		Иначе
			ФайлСправочника = ФайлыСправочников.Найти(ИмяФайла,"ИмяФайла");
			Если ФайлСправочника = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке("Не удалось получить данные файла "+ИмяФайла);
				Возврат Ложь;
			Иначе
				ДанныеФайла = ФайлСправочника.ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайла);
	
	нзПодготовка = РегистрыСведений.Helix_ПодготовкаКИсследованиюПациента.СоздатьНаборЗаписей();
	
	ПравилоDATAPACKET = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("HELIX\PatientPreparations", "DATAPACKET"));
	Попытка
		КоллекцияСтрок = ПравилоDATAPACKET.ROWDATA.ROW;  
	Исключение
		КоллекцияСтрок = Новый Массив;	// На случай, если данных в таблице сейчас нет.
	КонецПопытки;

	Попытка
		Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
			
			Запись = нзПодготовка.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			
		КонецЦикла;
	Исключение
		Запись = нзПодготовка.Добавить();  	// Одна запись
		ЗаполнитьЗначенияСвойств(Запись, КоллекцияСтрок);
	КонецПопытки; 	
	Попытка
		нзПодготовка.Записать();
	Исключение
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если операция выполнена
Функция ЗагрузитьСправочникВидыКонтейнеров(НастройкиВзаимодействия) Экспорт
	
	ОперацияВыполнена = Истина;
	
	ИмяФайла = "containertypes.xml";
	Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	Запись.ИмяФайла = ИмяФайла;
	Запись.Прочитать();
	Если НачалоДня(Запись.ВремяИзменения) = НачалоДня(ТекущаяДата()) И Запись.Выбран()  Тогда
		ДанныеФайла = Запись.ДанныеФайла;
	Иначе
		ТекстОшибки = "";
		ФайлыСправочников = ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки,, ПолучитьМассивИменФайловИзИмени(ИмяФайла));
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Ложь;
		Иначе
			ФайлСправочника = ФайлыСправочников.Найти(ИмяФайла,"ИмяФайла");
			Если ФайлСправочника = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке("Не удалось получить данные файла "+ИмяФайла);
				Возврат Ложь;
			Иначе
				ДанныеФайла = ФайлСправочника.ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайла);
	
	нзВидыКонтейнеров = РегистрыСведений.Helix_ВидыКонтейнеров.СоздатьНаборЗаписей();
	
	ПравилоDATAPACKET = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("HELIX\ContainerTypes", "DATAPACKET"));
	Попытка
		КоллекцияСтрок = ПравилоDATAPACKET.ROWDATA.ROW;  
	Исключение
		КоллекцияСтрок = Новый Массив;	// На случай, если данных в таблице сейчас нет.
	КонецПопытки;
	
	Попытка
		Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
			
			Запись = нзВидыКонтейнеров.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			
		КонецЦикла;
	Исключение
		Запись = нзВидыКонтейнеров.Добавить();  	// Одна запись
		ЗаполнитьЗначенияСвойств(Запись, КоллекцияСтрок);
	КонецПопытки; 	
	
	
	Попытка
		нзВидыКонтейнеров.Записать();
	Исключение
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если операция выполнена.
//
// Параметры:
//  НастройкиВзаимодействия	 - Структура - содержит настройки взаимодействия с лабораторией.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЗагрузитьСправочникПротоколовПостобработки(НастройкиВзаимодействия) Экспорт
	
	ОперацияВыполнена = Истина;
	
	ИмяФайла = "samplepreparations.xml";
	Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	Запись.ИмяФайла = ИмяФайла;
	Запись.Прочитать();
	Если НачалоДня(Запись.ВремяИзменения) = НачалоДня(ТекущаяДата()) И Запись.Выбран()  Тогда
		ДанныеФайла = Запись.ДанныеФайла;
	Иначе
		ТекстОшибки = "";
		ФайлыСправочников = ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки,, ПолучитьМассивИменФайловИзИмени(ИмяФайла));
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Ложь;
		Иначе
			ФайлСправочника = ФайлыСправочников.Найти(ИмяФайла,"ИмяФайла");
			Если ФайлСправочника = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке("Не удалось получить данные файла "+ИмяФайла);
				Возврат Ложь;
			Иначе
				ДанныеФайла = ФайлСправочника.ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайла);
	
	нзПротоколыПостобработки = РегистрыСведений.Helix_ПротоколыПостобработки.СоздатьНаборЗаписей();
	
	ПравилоDATAPACKET = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("HELIX\ContainerTypes", "DATAPACKET"));
	Попытка
		КоллекцияСтрок = ПравилоDATAPACKET.ROWDATA.ROW;  
	Исключение
		КоллекцияСтрок = Новый Массив;	// На случай, если данных в таблице сейчас нет.
	КонецПопытки;
	
	Попытка
		Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
			
			Запись = нзПротоколыПостобработки.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			
		КонецЦикла;
	Исключение
		Запись = нзПротоколыПостобработки.Добавить();  	// Одна запись
		ЗаполнитьЗначенияСвойств(Запись, КоллекцияСтрок);
	КонецПопытки; 	
	
	
	Попытка
		нзПротоколыПостобработки.Записать();
	Исключение
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьСправочникСроковВыполненияИсследований(НастройкиВзаимодействия)
	
	ОперацияВыполнена = Истина;
	
	ИмяФайла = "specialproperties.xml";
	Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	Запись.ИмяФайла = ИмяФайла;
	Запись.Прочитать();
	Если НачалоДня(Запись.ВремяИзменения) = НачалоДня(ТекущаяДата()) И Запись.Выбран() Тогда
		ДанныеФайла = Запись.ДанныеФайла;
	Иначе
		ТекстОшибки = "";
		ФайлыСправочников = ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки,, ПолучитьМассивИменФайловИзИмени(ИмяФайла));
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Ложь;
		Иначе
			ФайлСправочника = ФайлыСправочников.Найти(ИмяФайла, "ИмяФайла");
			Если ФайлСправочника = Неопределено Тогда
				ШаблонСтроки = НСтр("ru='Не удалось получить данные файла %1'");
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке();
				Возврат Ложь;
			Иначе
				ДанныеФайла = ФайлСправочника.ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайла);
	
	СрокиВыполненияИсследований = РегистрыСведений.Helix_СрокиВыполненияИсследований.СоздатьНаборЗаписей();
	СрокиВыполненияИсследований.Отбор.Лаборатория.Установить(НастройкиВзаимодействия.Лаборатория);
	
	ПравилоDATAPACKET = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("HELIX\SpecialProperties", "DATAPACKET"));
	Попытка
		КоллекцияСтрок = ПравилоDATAPACKET.ROWDATA.ROW;  
	Исключение
		КоллекцияСтрок = Новый Массив; // На случай, если данных в таблице сейчас нет.
	КонецПопытки;
	
	Попытка
		Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
			
			Запись = СрокиВыполненияИсследований.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			Запись.Лаборатория = НастройкиВзаимодействия.Лаборатория;
			
		КонецЦикла;
	Исключение
		Запись = СрокиВыполненияИсследований.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, КоллекцияСтрок);
		Запись.Лаборатория = НастройкиВзаимодействия.Лаборатория;
	КонецПопытки;
	
	
	Попытка
		СрокиВыполненияИсследований.Записать();
	Исключение
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьПодготовкуКлиентаКИсследованию(Лаборатория, МассивНоменклатуры = Неопределено, Перезаписывать = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Helix_ПодготовкаКИсследованиюПациента.Name КАК Имя,
	|	Helix_ПодготовкаКИсследованиюПациента.GROUP_WEIGHT КАК Порядок,
	|	Helix_ПодготовкаКИсследованиюПациента.DESCRIPTION КАК Описание
	|ИЗ
	|	РегистрСведений.Helix_ПодготовкаКИсследованиюПациента КАК Helix_ПодготовкаКИсследованиюПациента
	|ГДЕ
	|	Helix_ПодготовкаКИсследованиюПациента.DESCRIPTION <> """""
	;
	
	тзПодготовка = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =   
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.ID КАК ID
	|ПОМЕСТИТЬ НоменклатураАнализов
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория = &Лаборатория
	|	И (&НоменклатураНеЗаполнена
	|			ИЛИ НоменклатураАнализов.Номенклатура В (&Номенклатура))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	Helix_ПравилаАнализов.SAMPLE_PATIENT_PREP КАК СписокПодготовок,
	|	Helix_ПравилаАнализов.DESCRIPTION КАК ПравилоЗабора
	|ПОМЕСТИТЬ Подготовка
	|ИЗ
	|	НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Helix_ПравилаАнализов КАК Helix_ПравилаАнализов
	|		ПО (Helix_ПравилаАнализов.Лаборатория = &Лаборатория)
	|			И НоменклатураАнализов.ID = Helix_ПравилаАнализов.ITEM_CODE
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураАнализов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подготовка.Номенклатура КАК Номенклатура,
	|	Подготовка.СписокПодготовок КАК СписокПодготовок,
	|	Подготовка.ПравилоЗабора КАК ПравилоЗабора,
	|	Подготовка.Номенклатура.ПодготовкаКлиентаКСдачеАнализа КАК ОписаниеВНоменклатуре
	|ИЗ
	|	Подготовка КАК Подготовка
	|ГДЕ
	|	НЕ Подготовка.Номенклатура.Архив
	|	И Подготовка.Номенклатура.Анализ
	|	И НЕ Подготовка.Номенклатура.ЭтоГруппа
	|	И НЕ Подготовка.Номенклатура.ПометкаУдаления
	|	И (ПОДСТРОКА(Подготовка.Номенклатура.ПодготовкаКлиентаКСдачеАнализа, 1, 1) = """"
	|			ИЛИ &Перезаписывать)"
	;
	
	Запрос.УстановитьПараметр("НоменклатураНеЗаполнена", МассивНоменклатуры = Неопределено);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Перезаписывать", Перезаписывать);
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Выборка = Запрос.Выполнить().Выбрать();
	
	тзНоменклатураПодготовка = Новый ТаблицаЗначений;
	тзНоменклатураПодготовка.Колонки.Добавить("Номенклатура");
	тзНоменклатураПодготовка.Колонки.Добавить("ОписаниеВНоменклатуре");
	тзНоменклатураПодготовка.Колонки.Добавить("ПравилоЗабора");
	тзНоменклатураПодготовка.Колонки.Добавить("ИмяПодготовки");
	тзНоменклатураПодготовка.Колонки.Добавить("Порядок");
	тзНоменклатураПодготовка.Колонки.Добавить("Описание");
	
	Пока Выборка.Следующий() Цикл
		
		МассивИменПодготовок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Выборка.СписокПодготовок);
		
		Для Каждого СтрИмя Из МассивИменПодготовок Цикл
			
			Подготовка = тзПодготовка.Найти(СтрИмя, "Имя");
			
			Если ЗначениеЗаполнено(Подготовка) Тогда 
				
				СтрНоменклатураПодготовка = тзНоменклатураПодготовка.Добавить();
				СтрНоменклатураПодготовка.Номенклатура		 	= Выборка.Номенклатура;
				СтрНоменклатураПодготовка.ОписаниеВНоменклатуре	= Выборка.ОписаниеВНоменклатуре;
				СтрНоменклатураПодготовка.ПравилоЗабора		 	= Выборка.ПравилоЗабора;
				СтрНоменклатураПодготовка.ИмяПодготовки		 	= СтрИмя;
				СтрНоменклатураПодготовка.Порядок 			 	= Подготовка.Порядок;
				СтрНоменклатураПодготовка.Описание 			 	= Подготовка.Описание;
				
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	тзНоменклатураПодготовка.Свернуть("Номенклатура, ОписаниеВНоменклатуре, ПравилоЗабора, ИмяПодготовки, Порядок, Описание");
	тзНоменклатураПодготовка.Сортировать("Номенклатура, ОписаниеВНоменклатуре, ПравилоЗабора, Порядок");
	тзНоменклатураПодготовка.Индексы.Добавить("Номенклатура, ПравилоЗабора");
	
	тзНоменклатураПравилоЗабора = тзНоменклатураПодготовка.Скопировать(, "Номенклатура, ОписаниеВНоменклатуре, ПравилоЗабора");
	тзНоменклатураПравилоЗабора.Свернуть("Номенклатура, ОписаниеВНоменклатуре, ПравилоЗабора");
	
	тзНоменклатура = тзНоменклатураПравилоЗабора.Скопировать(, "Номенклатура, ОписаниеВНоменклатуре");
	тзНоменклатура.Свернуть("Номенклатура, ОписаниеВНоменклатуре");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаНоменклатура Из тзНоменклатура Цикл
		
		СтрокаОписание = "";
		МассивНоменклатураПравилоЗабора = тзНоменклатураПравилоЗабора.НайтиСтроки(
			Новый Структура("Номенклатура", СтрокаНоменклатура.Номенклатура));
			
		Для Каждого СтрокаПравилоЗабора Из МассивНоменклатураПравилоЗабора Цикл
			
			СтрокаОписание = СтрокаОписание + Символы.ПС +  " - " + СтрокаПравилоЗабора.ПравилоЗабора + ":" + Символы.ПС;
			МассивНоменклатураПодготовка = тзНоменклатураПодготовка.НайтиСтроки(
				Новый Структура("Номенклатура, ПравилоЗабора", СтрокаНоменклатура.Номенклатура, СтрокаПравилоЗабора.ПравилоЗабора));
				
			Для Каждого СтрокаНоменклатураПодготовка Из МассивНоменклатураПодготовка Цикл
				
				СтрокаОписание = СтрокаОписание + СтрокаНоменклатураПодготовка.Описание + Символы.ПС;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если СтрокаНоменклатура.ОписаниеВНоменклатуре <> СтрокаОписание Тогда
			НоменклатураОбъект = СтрокаНоменклатура.Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.ПодготовкаКлиентаКСдачеАнализа = СтрокаОписание;
			
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНевариативныеСправочникиHelix(НастройкиВзаимодействия)
	
	ЗагрузитьСправочникПравилАнализов(НастройкиВзаимодействия);
	ЗагрузитьСправочникЗадержкаИсследований(НастройкиВзаимодействия);
	ЗагрузитьСправочникВидыКонтейнеров(НастройкиВзаимодействия);
	ЗагрузитьСправочникПротоколовПостобработки(НастройкиВзаимодействия);	
	ЗагрузитьСправочникСроковВыполненияИсследований(НастройкиВзаимодействия);
	ЗагрузитьСправочникПодготовкиПациентов(НастройкиВзаимодействия);
	ЗаполнитьПодготовкуКлиентаКИсследованию(НастройкиВзаимодействия.Лаборатория,, Истина);
		
КонецПроцедуры

Функция ПолучитьМассивИменФайловИзИмени(ИмяФайла)
	
	Результат = Новый Массив;
	Результат.Добавить(ИмяФайла);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки, ЛимитОбработкиФайловЗаРаз = Неопределено, НужныеФайлы = Неопределено) Экспорт
	
	Перем ФайлыСправочников;
	
	// Инициализация обработки
	ОбработкаТранспорта = ИнициализироватьОбработкуТранспорта(НастройкиВзаимодействия);
	
	ОбработкаТранспорта.FTPСоединениеПуть = НастройкиВзаимодействия.FTPСоединениеПуть + "/Dictionaries";
	ОбработкаТранспорта.Инициализация();
	ОбработкаТранспорта.ВыполнитьДействияПередОбработкойСообщения();
	
	// Получение сведений о предыдущих данных файлов справочников, чтобы не скачивать повторно, если они не изменялись
	НЗВерсииФайлов = ПолучитьНаборЗаписейВерсийФайлов(НастройкиВзаимодействия.Лаборатория);
	
	СведенияПоследнихВерсийФайлов = НЗВерсииФайлов.Выгрузить();
	НЗВерсииФайлов = Неопределено; // Больше не требуется.
	
	// Получение списка файлов справочников
	ФайлыСправочников = ОбработкаТранспорта.ПолучитьТекстыФайловКаталога(СведенияПоследнихВерсийФайлов,ЛимитОбработкиФайловЗаРаз,,НужныеФайлы);
	Если ФайлыСправочников = Неопределено Тогда
		ТекстОшибки = ОбработкаТранспорта.СтрокаСообщенияОбОшибке;
	Иначе
		Для Каждого ФайлСправочника Из ФайлыСправочников Цикл
			Если Не ЗначениеЗаполнено(ФайлСправочника.ДанныеФайла) Тогда
				ПоследняяВерсия = СведенияПоследнихВерсийФайлов.Найти(ФайлСправочника.ИмяФайла,"ИмяФайла");
				Если ПоследняяВерсия <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ФайлСправочника, ПоследняяВерсия);
				КонецЕсли;
			КонецЕсли;
			
			ФайлСправочника.ИмяФайла = НРЕГ(ФайлСправочника.ИмяФайла);
		КонецЦикла;
		
		Для Каждого ФайлСправочника Из ФайлыСправочников Цикл
			Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ФайлСправочника);
			Запись.Лаборатория = НастройкиВзаимодействия.Лаборатория; 
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФайлыСправочников;
	
КонецФункции

// Добавляет в массив Helix-лаборатории, для которых необходимо обновить справочники.
//
// Параметры:
//  МассивЛаборатории - Массив из СправочникСсылка.Лаборатории - лаборатории с неактуальными справочниками.
//
Процедура ПроверитьАктуальностьСправочниковЛабораторий(МассивЛаборатории) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Helix_ИспользуетсяИнтеграцияСHelix Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Helix_НастройкиВзаимодействия.Лаборатория КАК Лаборатория
	                      |ИЗ
	                      |	РегистрСведений.Helix_НастройкиВзаимодействия КАК Helix_НастройкиВзаимодействия
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииФайловСправочниковЛабораторий КАК ВерсииФайловСправочниковЛабораторий
	                      |		ПО Helix_НастройкиВзаимодействия.Лаборатория = ВерсииФайловСправочниковЛабораторий.Лаборатория
	                      |			И (ВерсииФайловСправочниковЛабораторий.ИмяФайла = ""rules.xml"")
	                      |			И (ВерсииФайловСправочниковЛабораторий.ВремяИзменения > &ГраницаВремениИзменения)
	                      |ГДЕ
	                      |	Helix_НастройкиВзаимодействия.Используется
	                      |	И ВерсииФайловСправочниковЛабораторий.Лаборатория ЕСТЬ NULL
						  |	И Helix_НастройкиВзаимодействия.Лаборатория.ВнешняяЛаборатория = &ВнешняяЛаборатория");
	
	// Вычитаем из текущей даты сутки и полчаса дополнительно, чтобы сравнить с датой последней загрузки справочников.
	Запрос.УстановитьПараметр("ГраницаВремениИзменения", ТекущаяДата() - 86400 - 1800);
	Запрос.УстановитьПараметр("ВнешняяЛаборатория", Перечисления.ВнешниеЛаборатории.Helix);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		МассивЛаборатории.Добавить(ВыборкаРезультатаЗапроса.Лаборатория);
	КонецЦикла;
	
КонецПроцедуры

// Получает сроки выполнения для номенклатуры исследований из загруженной справочной информации по лаборатории.
//
// Параметры:
//  СрокиВыполненияИсследований - ТаблицаЗначений:
//  	* Лаборатория - СправочникСсылка.Лаборатории
//  	* Исследование - СправочникСсылка.Номенклатура
//  	* СрокВыполнения - Строка
//  ИсследованияЛаборатории - ТаблицаЗначений:
//  	* НомерСтроки - Число
//  	* Номенклатура - СправочникСсылка.Номенклатура
//  	* Лаборатория - СправочникСсылка.Лаборатории
//
Процедура ПолучитьСрокиВыполненияИсследований(СрокиВыполненияИсследований, ИсследованияЛаборатории) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ИсследованияЛаборатории);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ ИсследованияЛаборатории
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсследованияЛаборатории.НомерСтроки КАК НомерСтроки,
	|	ИсследованияЛаборатории.Лаборатория КАК Лаборатория,
	|	ИсследованияЛаборатории.Номенклатура КАК Исследование,
	|	Helix_СрокиВыполненияИсследований.PerfTime КАК СрокВыполнения
	|ИЗ
	|	ИсследованияЛаборатории КАК ИсследованияЛаборатории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Helix_СрокиВыполненияИсследований КАК Helix_СрокиВыполненияИсследований
	|			ПО НоменклатураАнализов.ID = Helix_СрокиВыполненияИсследований.HXID
	|				И НоменклатураАнализов.Лаборатория = Helix_СрокиВыполненияИсследований.Лаборатория
	|		ПО ИсследованияЛаборатории.Номенклатура = НоменклатураАнализов.Номенклатура
	|			И ИсследованияЛаборатории.Лаборатория = НоменклатураАнализов.Лаборатория
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрСрокиВыполненияИсследований = СрокиВыполненияИсследований.Добавить();
		СтрСрокиВыполненияИсследований.Лаборатория = Строка(Выборка.Лаборатория);
		СтрСрокиВыполненияИсследований.Исследование = Строка(Выборка.Исследование);
		СрокВыполнения = ?(Выборка.СрокВыполнения <> 0, Выборка.СрокВыполнения, НСтр("ru='нет данных'"));
		СтрСрокиВыполненияИсследований.СрокВыполнения = Строка(СрокВыполнения);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дополнительную информацию по контейнерам в документе забора исследований.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ДействияНадАнализами - документ забора исследований.
// 
// Возвращаемое значение:
//   Соответствие:
//   	* Ключ - Число - номер строки таб. части "Контейнеры".
//   	* Значение - Строка - содержит дополнительную информацию.
//
Функция ДополнительнаяИнформацияПоКонтейнерамДляПечатиЗаказа(ДокументСсылка) Экспорт

	Результат = Новый Соответствие;
	
	ТаблицаКонтейнеры = ДокументСсылка.Контейнеры.Выгрузить();
	// Добавление колонки для последующего отбора по виду лаборатории.
	ТаблицаКонтейнеры.Колонки.Добавить("ВидЛаборатории", Новый ОписаниеТипов("ПеречислениеСсылка.ВнешниеЛаборатории"));
	
	Для Каждого СтрТаблица Из ТаблицаКонтейнеры Цикл
		Если ЗначениеЗаполнено(СтрТаблица.Лаборатория) Тогда
			СтрТаблица.ВидЛаборатории = СтрТаблица.Лаборатория.ВнешняяЛаборатория;
		КонецЕсли;
		СтрТаблица.ИДПравила = СтрЗаменить(СтрТаблица.ИДПравила, Символы.НПП, "");
	КонецЦикла;
	
	// Отбираем контейнеры, предназначенные только для лабораторий Helix.
	Отбор = Новый Структура("ВидЛаборатории", Перечисления.ВнешниеЛаборатории.Helix);
	ТаблицаКонтейнерыИтог = ТаблицаКонтейнеры.Скопировать(Отбор,
		"НомерСтроки, Лаборатория, БиоматериалПредставление, КонтейнерПредставление, КодПробы, ИДПравила");
	
	МассивОписанияОбработкиКонтейнеров = Новый Массив;
	ПолучитьОписанияОбработкиКонтейнеров(ТаблицаКонтейнерыИтог, МассивОписанияОбработкиКонтейнеров);
	Для Каждого Элемент Из МассивОписанияОбработкиКонтейнеров Цикл
		ШаблонСтроки = НСтр("ru='Манипуляции: %1'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Элемент.Описание);
		Результат.Вставить(Элемент.НомерСтроки, Описание);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОпределитьИсключенныеИсследования(НастройкиВзаимодействия, Цены = Неопределено)
	
	Если Цены = Неопределено Тогда
		ДеревоНоменклатуры = ПолучитьДанныеНоменклатурыАнализов(НастройкиВзаимодействия).ДеревоНоменклатуры;
		
		Если ТипЗнч(ДеревоНоменклатуры) <> Тип("ДеревоЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		Цены = ТаблицаЦенАнализов(ДеревоНоменклатуры);
	КонецЕсли;
	
	ЛабораторияСервер.ОпределитьИсключенныеИсследования(НастройкиВзаимодействия.Лаборатория, Цены);
	
КонецПроцедуры

#Область ОбработкаЗагрузкиСправочников

Функция ОбновитьПолучитьСправочникиИнтерактивнаяЗагрузка(Лаборатория, СообщенияОбОшибках = "") Экспорт
	
	ДанныеСправочников = Новый Структура;
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		ШаблонСтроки = НСтр("ru='Лаборатория ""%1"": не заданы текущие настройки взаимодействия!'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Строка(Лаборатория));
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(СообщениеОбОшибке);
		Возврат ДанныеСправочников;
	КонецЕсли;
	
	// Обновление прочих классификаторов.
	ЗагрузитьНевариативныеСправочникиHelix(НастройкиВзаимодействия);
	
	// При необходимости внутри обновляет классификатор номенклатуры.
	ДеревоНоменклатуры = ПолучитьДанныеНоменклатурыАнализов(НастройкиВзаимодействия).ДеревоНоменклатуры;
	
	Если ТипЗнч(ДеревоНоменклатуры) = Тип("ДеревоЗначений") Тогда
		
		Цены = ТаблицаЦенАнализов(ДеревоНоменклатуры);
		ОпределитьИсключенныеИсследования(НастройкиВзаимодействия, Цены);

		ДанныеСправочников.Вставить("ДеревоНоменклатуры", ДеревоНоменклатуры);
		ДанныеСправочников.Вставить("Цены", Цены);
		
	КонецЕсли;
	
	Возврат ДанныеСправочников;
	
КонецФункции

// Выполняет удаление записей в справочниках лаборатории. 
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой очищаем справочники. 
//
Процедура ОчиститьСправочники(Лаборатория) Экспорт
	
	НаборЗаписей = ПолучитьНаборЗаписейВерсийФайлов(Лаборатория, Ложь);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.Helix_ПравилаАнализов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
		
	НаборЗаписей = РегистрыСведений.ПериодыНедоступностиАнализов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.Helix_СрокиВыполненияИсследований.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();

КонецПроцедуры

// Обновляемые реквизиты номенклатуры при загрузке.
// 
// Возвращаемое значение:
//  Массив - имена реквизитов элементов справочника Номенклатура.
//
Функция ОбновляемыеРеквизитыНоменклатурыПриЗагрузке() Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Комментарий");
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ПриСохраненииДанныхНоменклатуры(Лаборатория, ОбработаннаяНоменклатура) Экспорт
	
	ЗаполнитьПодготовкуКлиентаКИсследованию(Лаборатория, ОбработаннаяНоменклатура, Истина);
	
КонецПроцедуры

Функция ПолучитьДанныеНоменклатурыАнализов(НастройкиВзаимодействия)
	
	Результат = Новый Структура("ДеревоНоменклатуры");
	
	Лаборатория = НастройкиВзаимодействия.Лаборатория;
		
	// Описание структур данных.
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	ДеревоНоменклатуры.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоНоменклатуры.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("HXID", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	
	ДеревоНоменклатуры.Колонки.Добавить("Helix_MultiplePositions", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("Helix_MultipleRules", Новый ОписаниеТипов("Строка"));
	
	ДеревоНоменклатуры.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	ДеревоНоменклатуры.Колонки.Добавить("ContractCode", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("Price", Новый ОписаниеТипов("Строка"));
	
	// Получение данных XML.
	ИмяФайла = "nomenclature.xml";
	
	Запись = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	Запись.ИмяФайла = ИмяФайла;
	Запись.Прочитать();
	Если Запись.Выбран() И НачалоДня(Запись.ВремяИзменения) = НачалоДня(ТекущаяДата()) Тогда
		ДанныеФайла = Запись.ДанныеФайла;
	Иначе
		ТекстОшибки = "";
		ФайлыСправочников = ПолучитьФайлыСправочников(НастройкиВзаимодействия, ТекстОшибки,, ПолучитьМассивИменФайловИзИмени(ИмяФайла));
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Результат;
		Иначе
			ФайлСправочника = ФайлыСправочников.Найти("nomenclature.xml","ИмяФайла");
			Если ФайлСправочника = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не удалось получить данные файла Nomenclature.xml'"));
				Возврат Результат;
			Иначе
				ДанныеФайла = ФайлСправочника.ДанныеФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Разбор данных XML.
	
	//<DATAPACKET Version='2.0'>
	//<ROWDATA>
	//<ROW	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайла);
	
	НоменклатураDATAPACKET = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("HELIX\Nomenclature", "DATAPACKET"));
	Попытка
		КоллекцияСтрок = НоменклатураDATAPACKET.ROWDATA.ROW;
	Исключение
		КоллекцияСтрок = Новый Массив; // На случай, если данных в таблице сейчас нет.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл справочника номенклатуры анализов не содержит ни одной номенклатуры!'"));
	КонецПопытки;
	
	ВсеЦеныНулевые = Истина;
	Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
		
		// Фильтр по коду контракта в файле
		Если ЗначениеЗаполнено(НастройкиВзаимодействия.КонтрактИД)
			И НРег(СокрЛП(НастройкиВзаимодействия.КонтрактИД)) <> НРег(СокрЛП(СтрокаДанных.ContractCode))
		Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ВсеЦеныНулевые = ВсеЦеныНулевые И Не ЗначениеЗаполнено(Число(СтрокаДанных.Price));
		Исключение КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из КоллекцияСтрок Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Group) Тогда
			СтрокаГруппы = ДеревоНоменклатуры.Строки.Найти(СтрокаДанных.Group, "Наименование");
			Если СтрокаГруппы = Неопределено Тогда
				СтрокаГруппы = ДеревоНоменклатуры.Строки.Добавить();
				СтрокаГруппы.ЭтоГруппа = Истина;
				СтрокаГруппы.Наименование = СтрокаДанных.Group;
			КонецЕсли;
		Иначе
			СтрокаГруппы = ДеревоНоменклатуры.Строки;
		КонецЕсли;
		
		// Фильтр по коду контракта в файле
		Если ЗначениеЗаполнено(НастройкиВзаимодействия.КонтрактИД)
			И НРег(СокрЛП(НастройкиВзаимодействия.КонтрактИД)) <> НРег(СокрЛП(СтрокаДанных.ContractCode))
		Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатуры = СтрокаГруппы.Строки.Найти(СтрокаДанных.HXID);
		Если СтрокаНоменклатуры = Неопределено Тогда
			СтрокаНоменклатуры = СтрокаГруппы.Строки.Добавить();
			СтрокаНоменклатуры.Наименование	= СтрокаДанных.Caption;
			СтрокаНоменклатуры.Комментарий	= СтрокаДанных.Information;
			СтрокаНоменклатуры.Helix_MultiplePositions = СтрокаДанных.MultiplePositions;
			СтрокаНоменклатуры.Helix_MultipleRules = СтрокаДанных.MultipleRules;
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, СтрокаДанных);
			
			Если ВсеЦеныНулевые Тогда
				СтрокаНоменклатуры.Price = "0,01";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ДеревоНоменклатуры = ДеревоНоменклатуры;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЦенАнализов(ДеревоНоменклатуры)
	
	ДеревоНоменклатуры.Колонки.HXID.Имя = "Код";
	ДеревоНоменклатуры.Колонки.Price.Имя = "Цена";
	
	Цены = ЛабораторияСервер.ПустаяТаблицаЦен();
	
	Для Каждого СтрокаДанныхУровень1 Из ДеревоНоменклатуры.Строки Цикл
		Для Каждого СтрокаДанныхУровень2 Из СтрокаДанныхУровень1.Строки Цикл
			
			Попытка
				Цена = Число(СтрокаДанныхУровень2.Цена);
			Исключение
				Цена = 0;
			КонецПопытки;
			
			Если Цена <> 0 Тогда
				ЗаполнитьЗначенияСвойств(Цены.Добавить(), СтрокаДанныхУровень2);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Цены;
	
КонецФункции	
	
#КонецОбласти

#КонецОбласти

#Область СправочнаяИнформация_ПараметрыЗабора


#КонецОбласти

#Область КешНСИ // Функции формирования кеша НСИ для лабораторий HELIX.

// Вызывается при заполнении кеша НСИ всех подключенных лабораторий.
//
Процедура ЗаполнитьКэшНСИЛаборатории() Экспорт
	
	// Проверяем на использование интеграции с helix.
	Попытка
		Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Helix_ИспользуетсяИнтеграцияСHelix Тогда
			Возврат;	
		КонецЕсли; 
	Исключение
		Возврат;
	КонецПопытки;
	
	КэшНСИЛаборатории = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Номенклатура.Представление КАК ПредставлениеНоменклатуры,
	|	НоменклатураАнализов.Номенклатура.Комментарий,
	|	НоменклатураАнализов.Номенклатура.Родитель КАК Группа,
	|	НоменклатураАнализов.ID КАК ИД,
	|	НоменклатураАнализов.Helix_MultiplePositions,
	|	НоменклатураАнализов.Helix_MultipleRules
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Helix)
	|УПОРЯДОЧИТЬ ПО
	|	ИД,
	|	ПредставлениеНоменклатуры";
	
	НоменклатураАнализов = Запрос.Выполнить().Выгрузить();
	КэшНСИЛаборатории.Вставить("НоменклатураАнализов", ОбщегоНазначения.ТаблицаЗначенийВМассив(НоменклатураАнализов));
	КэшНСИЛаборатории.Вставить("Helix_ПравилаАнализов", ЗаполнитьКешНСИ_ПравилаАнализов(НоменклатураАнализов.ВыгрузитьКолонку("ИД")));
	
	// Получаем существующий кэш, либо создаем пустой
	КэшНСИЛабораторий = ПараметрыСеанса.КешНСИЛабораторий.Получить();
	Если ТипЗнч(КэшНСИЛабораторий) <> Тип("Структура") Тогда
		КэшНСИЛабораторий = Новый Структура;
	КонецЕсли;
	
	// К существующему кэшу добавляем кэш helix
	КэшНСИЛабораторий.Вставить("Helix", КэшНСИЛаборатории);
	// Сохраняем старый кэш + кэш helix в параметры сеанса
	ПараметрыСеанса.КешНСИЛабораторий = Новый ХранилищеЗначения(КэшНСИЛабораторий);

КонецПроцедуры

Функция ЗаполнитьКешНСИ_ПравилаАнализов(мсИдАнализов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяСправочника", НРег("ContainerTypes"));
	Запрос.УстановитьПараметр("ИмяПоля", "DESCRIPTION");
	Запрос.УстановитьПараметр("ИдАнализов", мсИдАнализов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Helix_ПравилаАнализов.COST_ITEM_RULE_ID КАК COST_ITEM_RULE_ID,
	|	Helix_ПравилаАнализов.ITEM_CODE КАК ITEM_CODE,
	|	Helix_ПравилаАнализов.DESCRIPTION КАК DESCRIPTION,
	|	Helix_ПравилаАнализов.SAMPLE_TYPE КАК Представление,
	|	Helix_ПравилаАнализов.CONTAINER_TYPE КАК CONTAINER_TYPE,
	|	Helix_ПравилаАнализов.DESTINATION_HUB КАК DESTINATION_HUB,
	|	Helix_ПравилаАнализов.REQUIRED КАК REQUIRED,
	|	Helix_ПравилаАнализов.REQUIRED_FIELDS КАК ОбязательныеПоля,
	|	Helix_ПравилаАнализов.RECOMMEND_FIELDS КАК РекомендуемыеПоля,
	|	ЕСТЬNULL(Helix_ВидыКонтейнеров.VOLUME, 0) КАК ОбъемКонтейнера,
	|	ЕСТЬNULL(Helix_ВидыКонтейнеров.DESCRIPTION, """") КАК Контейнер,
	|	Helix_ПравилаАнализов.Лаборатория КАК Лаборатория
	|ИЗ
	|	РегистрСведений.Helix_ПравилаАнализов КАК Helix_ПравилаАнализов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Helix_ВидыКонтейнеров КАК Helix_ВидыКонтейнеров
	|		ПО Helix_ПравилаАнализов.CONTAINER_TYPE = Helix_ВидыКонтейнеров.Name
	|ГДЕ
	|	Helix_ПравилаАнализов.ITEM_CODE В(&ИдАнализов)
	|	И Helix_ПравилаАнализов.PARENT_ID = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	REQUIRED УБЫВ,
	|	COST_ITEM_RULE_ID";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультат.Колонки.Добавить("Обязательное", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаб Из ТаблицаРезультат Цикл
		СтрокаТаб.Обязательное = ВРЕГ(СтрокаТаб.REQUIRED);
	КонецЦикла;
	ТаблицаРезультат.Колонки.Удалить("REQUIRED");
	
	// Преобразование имён полей в прикладной вид
	ПереименоватьКолонкуТаблицыЗначений(ТаблицаРезультат, "COST_ITEM_RULE_ID", "ИдПравила");
	ПереименоватьКолонкуТаблицыЗначений(ТаблицаРезультат, "DESCRIPTION", "Биоматериал");
	ПереименоватьКолонкуТаблицыЗначений(ТаблицаРезультат, "ITEM_CODE", "ИдАнализа");

	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРезультат);
	
КонецФункции

Процедура ПереименоватьКолонкуТаблицыЗначений(Таблица, ИмяКолонки, ИмяКолонкиНовое)
	
	Если Таблица.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
		Таблица.Колонки[ИмяКолонки].Имя = ИмяКолонкиНовое;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаборАнализа

// Получить параметры заборов для правила/массива правил
//
// Параметры:
//  ПравилаЗабора - Строка - строка с ID правила забора или Массив таких строк.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьПараметрыЗабора(ПравилаЗабора) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Параметр", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыЗабораАнализов"));
	Результат.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЗначениеПоУмолчанию");
	
	ИменаПараметровОбязательные = Новый Массив;
	ИменаПараметровНеобязательные = Новый Массив;

	Если ТипЗнч(ПравилаЗабора) = Тип("Массив") Тогда
		мсПравил = ПравилаЗабора;
	ИначеЕсли ТипЗнч(ПравилаЗабора) = Тип("Строка") Тогда
		мсПравил = Новый Массив;
		мсПравил.Добавить(ПравилаЗабора);
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Helix_ПравилаАнализов.RECOMMEND_FIELDS КАК РекомендуемыеПоля,
	                      |	Helix_ПравилаАнализов.REQUIRED_FIELDS КАК ОбязательныеПоля
	                      |ИЗ
	                      |	РегистрСведений.Helix_ПравилаАнализов КАК Helix_ПравилаАнализов
	                      |ГДЕ
	                      |	Helix_ПравилаАнализов.COST_ITEM_RULE_ID В(&Правила)");
	Запрос.УстановитьПараметр("Правила", мсПравил);
	ВыборкаПравил = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаПравил.Следующий() Цикл
		
		ПараметрыПоля = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ВыборкаПравил.ОбязательныеПоля, ",");
		Для Каждого ИмяПараметра Из ПараметрыПоля Цикл
			ИменаПараметровОбязательные.Добавить(ИмяПараметра);
		КонецЦикла;
		
		ПараметрыПоля = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ВыборкаПравил.РекомендуемыеПоля, ",");
		Для Каждого ИмяПараметра Из ПараметрыПоля Цикл
			ИменаПараметровНеобязательные.Добавить(ИмяПараметра);
		КонецЦикла;
		
	КонецЦикла;
	
	Если (ИменаПараметровОбязательные.Количество() + ИменаПараметровНеобязательные.Количество()) <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИменаПараметровОбязательные", ИменаПараметровОбязательные);
		Запрос.УстановитьПараметр("ИменаПараметровНеобязательные", ИменаПараметровНеобязательные);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыЗабораАнализов.Ссылка КАК Параметр,
		|	ПараметрыЗабораАнализов.Наименование КАК Наименование,
		|	ПараметрыЗабораАнализов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	IDПарам.ID КАК ИдПараметра,
		|	ВЫБОР
		|		КОГДА IDПарам.ID В (&ИменаПараметровОбязательные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Обязательный
		|ИЗ
		|	ПланВидовХарактеристик.ПараметрыЗабораАнализов КАК ПараметрыЗабораАнализов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК IDПарам
		|		ПО (IDПарам.Ссылка = ПараметрыЗабораАнализов.Ссылка)
		|			И (IDПарам.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Helix))
		|			И (IDПарам.ID В (&ИменаПараметровОбязательные)
		|				ИЛИ IDПарам.ID В (&ИменаПараметровНеобязательные))
		|			И (НЕ ПараметрыЗабораАнализов.ПометкаУдаления)"
		;
		Результат = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	
КонецФункции

// Проверить заполнение забора анализа.
//
// Параметры:
//  ДокументОбъект - ДокументСсылка.ДействиеНадАнализами.
//  Лаборатория - СправочникСсылка.Лаборатории.
//  Отказ - Булево
//
Процедура ПроверитьЗаполнениеЗабораАнализа(ДокументОбъект, Лаборатория, Отказ) Экспорт
	
	СообщениеОбОшибке	 = "";
	ОтборПравила		 = Новый Структура("КлючСтрокиИсследования");
	
	Для Каждого СтрокаИсследования Из ДокументОбъект.Исследования Цикл
		
		Если ЛабораторияСерверПовтИсп.ВидЛаборатории(СтрокаИсследования.Лаборатория) = Перечисления.ВнешниеЛаборатории.Helix Тогда
			ОтборПравила.КлючСтрокиИсследования = СтрокаИсследования.КлючСтроки;
			СтрокиПравил = ДокументОбъект.ПравилаВнешнихЛабораторий.НайтиСтроки(ОтборПравила);
			Если СтрокиПравил.Количество() = 0 Тогда
				ТекстОшибки = "В строке №" + СтрокаИсследования.НомерСтроки + " для исследования " + СтрокаИсследования.Номенклатура + " не выбрано правило выполнения анализа.";
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СообщениеОбОшибке, ТекстОшибки,Символы.ПС);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокиПравил) Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
	КонецЕсли;
		
КонецПроцедуры

#Область Преаналитика

// Распределение биоматериалов по контейнерам.
//
// Параметры:
//  ДанныеЗабора - Структура
//
// Возвращаемое значение:
//  ДеревоЗначений.
//
Функция РаспределениеБиоматериаловПоКонтейнерам(ДанныеЗабора) Экспорт 
		
	НомерКонтейнера = 0;
	
	ТЗРаспределения = Новый ТаблицаЗначений;
	ТЗРаспределения.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
	ТЗРаспределения.Колонки.Добавить("НомерКонтейнера", Новый ОписаниеТипов("Число"));
	ТЗРаспределения.Колонки.Добавить("КодПробы", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("КлючСтрокиИсследования", Новый ОписаниеТипов("Число"));
	ТЗРаспределения.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТЗРаспределения.Колонки.Добавить("ИДПравила", Новый ОписаниеТипов("Число"));
	ТЗРаспределения.Колонки.Добавить("Биоматериал", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("БиоматериалПредставление", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("Контейнер", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("КонтейнерПредставление", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("ИдАнализа", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("УсловияХранения", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("УсловияТранспортировки", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("ЦветКонтейнера", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("SAMPLE_GROUP", Новый ОписаниеТипов("Строка"));
	ТЗРаспределения.Колонки.Добавить("ПредставлениеАнализа", Новый ОписаниеТипов("Строка"));
	
	ДеревоРезультатов = Новый ДеревоЗначений;
	ДеревоРезультатов.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
	ДеревоРезультатов.Колонки.Добавить("ЭтоКонтейнер", Новый ОписаниеТипов("Булево"));
	ДеревоРезультатов.Колонки.Добавить("НомерКонтейнера", Новый ОписаниеТипов("Число"));
	ДеревоРезультатов.Колонки.Добавить("КодПробы", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("ИДПравила", Новый ОписаниеТипов("Число"));
	ДеревоРезультатов.Колонки.Добавить("КлючСтрокиИсследования", Новый ОписаниеТипов("Число"));
	ДеревоРезультатов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ДеревоРезультатов.Колонки.Добавить("Биоматериал", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("БиоматериалПредставление", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("Контейнер", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("КонтейнерПредставление", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("ИдАнализа", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("УсловияХранения", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("УсловияТранспортировки", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("ЦветКонтейнера", Новый ОписаниеТипов("Строка"));
	ДеревоРезультатов.Колонки.Добавить("ПредставлениеАнализа", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Helix_ПравилаАнализов.Лаборатория КАК Лаборатория,
	|	Helix_ПравилаАнализов.COST_ITEM_RULE_ID КАК COST_ITEM_RULE_ID,
	|	Helix_ВидыКонтейнеров.DESCRIPTION КАК DESCRIPTION_CONT,
	|	Helix_ПравилаАнализов.DESCRIPTION КАК DESCRIPTION_MAT,
	|	Helix_ПравилаАнализов.ITEM_CODE КАК ITEM_CODE,
	|	Helix_ПравилаАнализов.DESTRUCTIVE КАК DESTRUCTIVE,
	|	Helix_ПравилаАнализов.SAMPLE_TYPE КАК SAMPLE_TYPE,
	|	Helix_ПравилаАнализов.SAMPLE_PROTOCOL КАК SAMPLE_PROTOCOL,
	|	Helix_ПравилаАнализов.CONTAINER_TYPE КАК CONTAINER_TYPE,
	|	Helix_ПравилаАнализов.SAMPLE_PREP КАК SAMPLE_PREP,
	|	Helix_ПравилаАнализов.SAMPLE_GROUP КАК SAMPLE_GROUP,
	|	Helix_ПравилаАнализов.STORAGE_CONDITIONS КАК STORAGE_CONDITIONS,
	|	Helix_ВидыКонтейнеров.VOLUME КАК VOLUME,
	|	Helix_ПравилаАнализов.DEAD_VOLUME КАК DEAD_VOLUME,
	|	Helix_ПравилаАнализов.PREF_VOLUME КАК PREF_VOLUME,
	|	Helix_ВидыКонтейнеров.ЦветКонтейнера КАК ЦветКонтейнера,
	|	Helix_ПравилаАнализов.SAMPLE_TRANSPORT КАК SAMPLE_TRANSPORT,
	|	Helix_ПравилаАнализов.PARENT_ID КАК PARENT_ID
	|ПОМЕСТИТЬ тбПравила
	|ИЗ
	|	РегистрСведений.Helix_ПравилаАнализов КАК Helix_ПравилаАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Helix_ВидыКонтейнеров КАК Helix_ВидыКонтейнеров
	|		ПО Helix_ПравилаАнализов.CONTAINER_TYPE = Helix_ВидыКонтейнеров.Name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияНадАнализамиИсследования.КлючСтроки КАК КлючСтроки,
	|	ВЫРАЗИТЬ(ДействияНадАнализамиИсследования.Лаборатория КАК Справочник.Лаборатории) КАК Лаборатория,
	|	ДействияНадАнализамиИсследования.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Исследования
	|ИЗ
	|	&Исследования КАК ДействияНадАнализамиИсследования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияНадАнализамиИсследования.КлючСтроки КАК КлючСтроки,
	|	ДействияНадАнализамиИсследования.Лаборатория КАК Лаборатория,
	|	ПРЕДСТАВЛЕНИЕ(ДействияНадАнализамиИсследования.Номенклатура) КАК ПредставлениеАнализа
	|ПОМЕСТИТЬ ИсследованияДокумента
	|ИЗ
	|	Исследования КАК ДействияНадАнализамиИсследования
	|ГДЕ
	|	ДействияНадАнализамиИсследования.Лаборатория.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Helix)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияНадАнализамиПравилаВнешнихЛабораторий.ИдПравила КАК ИдПравила,
	|	ДействияНадАнализамиПравилаВнешнихЛабораторий.КлючСтрокиИсследования КАК КлючСтрокиИсследования,
	|	ДействияНадАнализамиПравилаВнешнихЛабораторий.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПравилаДокумента
	|ИЗ
	|	&ПравилаЗабора КАК ДействияНадАнализамиПравилаВнешнихЛабораторий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсследованияДокумента.Лаборатория КАК Лаборатория,
	|	ПравилаДокумента.ИдПравила КАК ИдПравила,
	|	ПравилаДокумента.НомерСтроки КАК НомерСтроки,
	|	ПравилаДокумента.КлючСтрокиИсследования КАК КлючСтрокиИсследования,
	|	ИсследованияДокумента.ПредставлениеАнализа КАК ПредставлениеАнализа
	|ПОМЕСТИТЬ ЛабПравилаДокумента
	|ИЗ
	|	ИсследованияДокумента КАК ИсследованияДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаДокумента КАК ПравилаДокумента
	|		ПО ИсследованияДокумента.КлючСтроки = ПравилаДокумента.КлючСтрокиИсследования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛабПравилаДокумента.Лаборатория КАК Лаборатория,
	|	ЛабПравилаДокумента.ИдПравила КАК ИдПравила,
	|	ЛабПравилаДокумента.НомерСтроки КАК НомерСтроки,
	|	ЛабПравилаДокумента.КлючСтрокиИсследования КАК КлючСтрокиИсследования,
	|	ЛабПравилаДокумента.ПредставлениеАнализа КАК ПредставлениеАнализа
	|ПОМЕСТИТЬ ЛабПравилаДокументаИПодчиненныеПравила
	|ИЗ
	|	ЛабПравилаДокумента КАК ЛабПравилаДокумента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛабПравилаДокумента.Лаборатория,
	|	тбПравила.COST_ITEM_RULE_ID,
	|	0,
	|	ЛабПравилаДокумента.КлючСтрокиИсследования,
	|	ЛабПравилаДокумента.ПредставлениеАнализа
	|ИЗ
	|	ЛабПравилаДокумента КАК ЛабПравилаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тбПравила КАК тбПравила
	|		ПО ЛабПравилаДокумента.ИдПравила = тбПравила.PARENT_ID
	|			И ЛабПравилаДокумента.Лаборатория = тбПравила.Лаборатория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛабПравилаДокументаИПодчиненныеПравила.Лаборатория КАК Лаборатория,
	|	ЛабПравилаДокументаИПодчиненныеПравила.ИдПравила КАК ИдПравила,
	|	ЛабПравилаДокументаИПодчиненныеПравила.КлючСтрокиИсследования КАК КлючСтрокиИсследования,
	|	ЛабПравилаДокументаИПодчиненныеПравила.НомерСтроки КАК НомерСтроки,
	|	тбПравила.DESCRIPTION_CONT КАК DESCRIPTION_CONT,
	|	тбПравила.DESCRIPTION_MAT КАК DESCRIPTION_MAT,
	|	тбПравила.ITEM_CODE КАК ITEM_CODE,
	|	тбПравила.DESTRUCTIVE КАК DESTRUCTIVE,
	|	тбПравила.SAMPLE_TYPE КАК SAMPLE_TYPE,
	|	тбПравила.SAMPLE_PROTOCOL КАК SAMPLE_PROTOCOL,
	|	тбПравила.CONTAINER_TYPE КАК CONTAINER_TYPE,
	|	тбПравила.SAMPLE_PREP КАК SAMPLE_PREP,
	|	тбПравила.STORAGE_CONDITIONS КАК STORAGE_CONDITIONS,
	|	тбПравила.VOLUME КАК VOLUME,
	|	тбПравила.DEAD_VOLUME КАК DEAD_VOLUME,
	|	тбПравила.PREF_VOLUME КАК PREF_VOLUME,
	|	тбПравила.ЦветКонтейнера КАК ЦветКонтейнера,
	|	тбПравила.SAMPLE_GROUP КАК SAMPLE_GROUP,
	|	тбПравила.SAMPLE_TRANSPORT КАК SAMPLE_TRANSPORT,
	|	ЛабПравилаДокументаИПодчиненныеПравила.ПредставлениеАнализа КАК ПредставлениеАнализа
	|ИЗ
	|	ЛабПравилаДокументаИПодчиненныеПравила КАК ЛабПравилаДокументаИПодчиненныеПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тбПравила КАК тбПравила
	|		ПО ЛабПравилаДокументаИПодчиненныеПравила.ИдПравила = тбПравила.COST_ITEM_RULE_ID
	|			И ЛабПравилаДокументаИПодчиненныеПравила.Лаборатория = тбПравила.Лаборатория"
	;
	
	Запрос.УстановитьПараметр("Исследования", ДанныеЗабора.Исследования);
	Запрос.УстановитьПараметр("ПравилаЗабора", ДанныеЗабора.ПравилаЗабора);
	  
	РезультатДетали = Запрос.Выполнить().Выгрузить();
	
	РезультатДетали.Колонки.ЦветКонтейнера.Имя = "Цвет";
	РезультатДетали.Колонки.Добавить("ЦветКонтейнера",Новый ОписаниеТипов("Строка"));
	Для Каждого стрТЗ Из РезультатДетали Цикл
		стрТЗ.ЦветКонтейнера = ?(стрТЗ.Цвет = NULL, "", ЗначениеВСтрокуВнутр(стрТЗ.Цвет.Получить()));
	КонецЦикла;
	РезультатДетали.Колонки.Удалить("Цвет");

	Отбор = Новый Структура("DESTRUCTIVE",Истина);
	
	ИсследованияОтдельныеКонтейнеры = РезультатДетали.НайтиСтроки(Отбор);
	Если ИсследованияОтдельныеКонтейнеры.Количество() > 0 Тогда
		Для Каждого стрТЗ Из ИсследованияОтдельныеКонтейнеры Цикл
			НомерКонтейнера = НомерКонтейнера + 1;
			ДобавитьСтрокуРаспределенияПоКонтейнерам(ТЗРаспределения, стрТЗ, стрТЗ, НомерКонтейнера);
		КонецЦикла;
	КонецЕсли; 
	
	Отбор = Новый Структура("DESTRUCTIVE",Ложь);
	
	ТЗПромежуточная = РезультатДетали.Скопировать(Отбор);
	// Отсортируем промежуточную таблицу значений по лаборатории, типу контейнера и мертвому объему контейнера по убыванию.
	ТЗПромежуточная.Сортировать("Лаборатория,CONTAINER_TYPE,DEAD_VOLUME Убыв");

	ТЗСвертка = ТЗПромежуточная.Скопировать();
	ТЗСвертка.Свернуть("Лаборатория,DESCRIPTION_CONT,SAMPLE_TYPE,SAMPLE_PROTOCOL,CONTAINER_TYPE,SAMPLE_PREP,STORAGE_CONDITIONS,VOLUME,ЦветКонтейнера, SAMPLE_GROUP", "PREF_VOLUME");
	        
	Для Каждого стрТЗ Из ТЗСвертка Цикл
		
		Отбор = Новый Структура("Лаборатория,SAMPLE_TYPE,SAMPLE_PROTOCOL,CONTAINER_TYPE,SAMPLE_PREP,STORAGE_CONDITIONS,VOLUME,ЦветКонтейнера,SAMPLE_GROUP",стрТЗ.Лаборатория,стрТЗ.SAMPLE_TYPE,стрТЗ.SAMPLE_PROTOCOL,стрТЗ.CONTAINER_TYPE,стрТЗ.SAMPLE_PREP,стрТЗ.STORAGE_CONDITIONS,стрТЗ.VOLUME,стрТЗ.ЦветКонтейнера,стрТЗ.SAMPLE_GROUP);
		СтрокиВРаспределение = ТЗПромежуточная.НайтиСтроки(Отбор);
		НомерКонтейнера = НомерКонтейнера + 1;
		
		Если СтрокиВРаспределение.Количество() > 0 Тогда
			// Определим максимальный мертвый объем анализа в массиве строк таблицы значений, 
			// отсортированной по убыванию мертвых объемов анализов.   
			// Максимальный мертвый объем находится в первой строке массива.
			МаксимальныйМертвыйОбъем = СтрокиВРаспределение[0].DEAD_VOLUME; 
			Если стрТЗ.VOLUME >= стрТЗ.PREF_VOLUME + МаксимальныйМертвыйОбъем Тогда
				
				Для Каждого стрРаспределения  Из СтрокиВРаспределение Цикл
					ДобавитьСтрокуРаспределенияПоКонтейнерам(ТЗРаспределения, стрРаспределения, стрТЗ, НомерКонтейнера);
				КонецЦикла; 
			Иначе 
				ОсталосьОбъемаКонтейнера = стрТЗ.VOLUME - МаксимальныйМертвыйОбъем;
				
				Для Каждого стрРаспределения Из СтрокиВРаспределение Цикл
					
					Если стрРаспределения.PREF_VOLUME > ОсталосьОбъемаКонтейнера Тогда
						НомерКонтейнера = НомерКонтейнера + 1;
						// Определим максимальный мертвый объем. 
						МаксимальныйМертвыйОбъем = стрРаспределения.DEAD_VOLUME;
						ОсталосьОбъемаКонтейнера = стрТЗ.VOLUME - МаксимальныйМертвыйОбъем;
					КонецЕсли;
					
					ДобавитьСтрокуРаспределенияПоКонтейнерам(ТЗРаспределения, стрРаспределения, стрТЗ, НомерКонтейнера);
					ОсталосьОбъемаКонтейнера = ОсталосьОбъемаКонтейнера - стрРаспределения.PREF_VOLUME;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	РаспределениеПоКонтейнерамТаблицаЗначенийВДерево(ТЗРаспределения, ДеревоРезультатов);
	
	Возврат ДеревоРезультатов;
	
КонецФункции

Процедура ДобавитьСтрокуРаспределенияПоКонтейнерам(ТЗРаспределения, СтрокаКРаспределению, СтрокаТребуемогоКонтейнера, НомерКонтейнера)
	
	НоваяСтрока = ТЗРаспределения.Добавить();
	НоваяСтрока.НомерКонтейнера			= НомерКонтейнера;
	
	НоваяСтрока.КлючСтрокиИсследования	= СтрокаКРаспределению.КлючСтрокиИсследования;
	НоваяСтрока.Лаборатория				= СтрокаТребуемогоКонтейнера.Лаборатория;
	НоваяСтрока.НомерСтроки				= СтрокаКРаспределению.НомерСтроки;
	
	НоваяСтрока.Биоматериал				= СтрокаТребуемогоКонтейнера.SAMPLE_TYPE;
	НоваяСтрока.БиоматериалПредставление= СтрокаКРаспределению.DESCRIPTION_MAT;
	НоваяСтрока.Контейнер				= СтрокаТребуемогоКонтейнера.CONTAINER_TYPE;
	НоваяСтрока.КонтейнерПредставление	= СтрокаТребуемогоКонтейнера.DESCRIPTION_CONT;
	НоваяСтрока.УсловияТранспортировки	= СтрокаКРаспределению.SAMPLE_TRANSPORT;
	НоваяСтрока.УсловияХранения			= СтрокаТребуемогоКонтейнера.STORAGE_CONDITIONS;
	НоваяСтрока.ЦветКонтейнера			= СтрокаТребуемогоКонтейнера.ЦветКонтейнера;
	НоваяСтрока.SAMPLE_GROUP			= СтрокаТребуемогоКонтейнера.SAMPLE_GROUP;
	
	НоваяСтрока.ИДПравила				= СтрокаКРаспределению.ИДПравила;
	НоваяСтрока.ИдАнализа				= СтрокаКРаспределению.ITEM_CODE;
	НоваяСтрока.ПредставлениеАнализа	= СтрокаКРаспределению.ПредставлениеАнализа;
	
КонецПроцедуры

Процедура РаспределениеПоКонтейнерамТаблицаЗначенийВДерево(ТЗ,ДеревоРезультатов) 
	
	Если ДеревоРезультатов.Колонки.Количество() = 0 Тогда
		
		ДеревоРезультатов.Колонки.Добавить("ЭтоКонтейнер", Новый ОписаниеТипов("Булево"));
		ДеревоРезультатов.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
		ДеревоРезультатов.Колонки.Добавить("НомерКонтейнера", Новый ОписаниеТипов("Число"));
		ДеревоРезультатов.Колонки.Добавить("КодПробы", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("ИДПравила", Новый ОписаниеТипов("Число"));
		ДеревоРезультатов.Колонки.Добавить("КлючСтрокиИсследования", Новый ОписаниеТипов("Число"));
		ДеревоРезультатов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ДеревоРезультатов.Колонки.Добавить("Биоматериал", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("БиоматериалПредставление", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("Контейнер", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("КонтейнерПредставление", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("ИдАнализа", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("УсловияХранения", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("ЦветКонтейнера", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("УсловияТранспортировки", Новый ОписаниеТипов("Строка"));
		ДеревоРезультатов.Колонки.Добавить("ПредставлениеАнализа", Новый ОписаниеТипов("Строка"));

	КонецЕсли; 
	
	Для Каждого стрТЗ Из ТЗ Цикл
		
		СтрокаЛаборатории = ДеревоРезультатов.Строки.Найти(стрТЗ.Лаборатория, "Лаборатория");
		Если СтрокаЛаборатории = Неопределено Тогда
			СтрокаЛаборатории = ДеревоРезультатов.Строки.Добавить();
			СтрокаЛаборатории.Лаборатория = стрТЗ.Лаборатория;
		КонецЕсли;
		
		СтрокаКонтейнера = СтрокаЛаборатории.Строки.Найти(стрТЗ.НомерКонтейнера, "НомерКонтейнера");
		Если СтрокаКонтейнера = Неопределено Тогда
			СтрокаКонтейнера = СтрокаЛаборатории.Строки.Добавить();
			СтрокаКонтейнера.ЭтоКонтейнер				= Истина;
			СтрокаКонтейнера.Контейнер					= стрТЗ.Контейнер;
			СтрокаКонтейнера.КонтейнерПредставление		= стрТЗ.КонтейнерПредставление;
			СтрокаКонтейнера.Биоматериал				= стрТЗ.Биоматериал;
			СтрокаКонтейнера.БиоматериалПредставление	= стрТЗ.БиоматериалПредставление;
			СтрокаКонтейнера.УсловияХранения			= стрТЗ.УсловияХранения;
			СтрокаКонтейнера.УсловияТранспортировки		= стрТЗ.УсловияТранспортировки;
			СтрокаКонтейнера.НомерКонтейнера			= стрТЗ.НомерКонтейнера;
			СтрокаКонтейнера.КодПробы					= стрТЗ.КодПробы;
			СтрокаКонтейнера.ЦветКонтейнера				= стрТЗ.ЦветКонтейнера;
		КонецЕсли;
		
		Отбор = Новый Структура("КлючСтрокиИсследования, ИДПравила");
		ЗаполнитьЗначенияСвойств(Отбор, стрТЗ); 
		СтрокиАнализа = СтрокаКонтейнера.Строки.НайтиСтроки(Отбор);
		Если СтрокиАнализа.Количество() = 0 Тогда
			СтрокаАнализа = СтрокаКонтейнера.Строки.Добавить();
			СтрокаАнализа.КлючСтрокиИсследования	= стрТЗ.КлючСтрокиИсследования;
			СтрокаАнализа.НомерСтроки				= стрТЗ.НомерСтроки;
			СтрокаАнализа.ИдАнализа					= стрТЗ.ИдАнализа;
			СтрокаАнализа.ИДПравила					= стрТЗ.ИДПравила;
			СтрокаАнализа.ПредставлениеАнализа		= стрТЗ.ПредставлениеАнализа;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Формирует массив с описаниями обработки контейнеров.
//
// Параметры:
//  ТаблицаКонтейнеры	 				- ТаблицаЗначений	 - таблица с колонками:
//  	* НомерСтроки					- Число
//  	* Лаборатория					- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* ВидЛаборатории				- ПеречислениеСсылка.ВнешниеЛаборатории - вид лаборатории
//  	* БиоматериалПредставление		- Строка - наименование биоматериала
//  	* КонтейнерПредставление		- Строка - наименование контейнера
//  	* КодПробы						- Строка - код пробы, используется в описании обработки контейнера
//  	* ИДПравила						- Строка - идентификатор правила, по которому можно определить описание обработки контейнера
//  	* ИдАнализа						- Строка - идентификатор анализа, по которому можно определить описание обработки контейнера.
//  МассивОписанияОбработкиКонтейнеров	- Массив из СтрокаТаблицыЗначений - содержит:
//  	* НомерСтроки					- Число
//  	* Лаборатория					- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* Биоматериал					- Строка - наименование биоматериала
//  	* Контейнер						- Строка - наименование контейнера, для которого указано описание его обработки
//  	* КодПробы						- Строка - код пробы, используется в описании обработки контейнера
//  	* КодПротокола					- Строка - код протокола описания
//  	* Описание						- Строка - описание обработки контейнера.
//
Процедура ПолучитьОписанияОбработкиКонтейнеров(ТаблицаКонтейнеры, МассивОписанияОбработкиКонтейнеров) Экспорт
	
	Если ТаблицаКонтейнеры.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТаблицаКонтейнеры.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКонтейнеры", ТаблицаКонтейнеры);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ТаблицаКонтейнеры.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКонтейнеры.Лаборатория КАК Лаборатория,
	|	ТаблицаКонтейнеры.БиоматериалПредставление КАК БиоматериалПредставление,
	|	ТаблицаКонтейнеры.КонтейнерПредставление КАК КонтейнерПредставление,
	|	ТаблицаКонтейнеры.КодПробы КАК КодПробы,
	|	ТаблицаКонтейнеры.ИДПравила КАК ИДПравила
	|ПОМЕСТИТЬ ПравилаИКонтейнерыАнализов
	|ИЗ
	|	&ТаблицаКонтейнеры КАК ТаблицаКонтейнеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаИКонтейнерыАнализов.НомерСтроки КАК НомерСтроки,
	|	ПравилаИКонтейнерыАнализов.Лаборатория КАК Лаборатория,
	|	ПравилаИКонтейнерыАнализов.БиоматериалПредставление КАК Биоматериал,
	|	ПравилаИКонтейнерыАнализов.КонтейнерПредставление КАК Контейнер,
	|	ПравилаИКонтейнерыАнализов.КодПробы КАК КодПробы,
	|	Helix_ПротоколыПостобработки.Name КАК КодПротокола,
	|	Helix_ПротоколыПостобработки.DESCRIPTION КАК Описание
	|ИЗ
	|	РегистрСведений.Helix_ПравилаАнализов КАК Helix_ПравилаАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Helix_ПротоколыПостобработки КАК Helix_ПротоколыПостобработки
	|		ПО Helix_ПравилаАнализов.SAMPLE_PREP = Helix_ПротоколыПостобработки.Name
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаИКонтейнерыАнализов КАК ПравилаИКонтейнерыАнализов
	|		ПО Helix_ПравилаАнализов.COST_ITEM_RULE_ID = ПравилаИКонтейнерыАнализов.ИДПравила
	|			И Helix_ПравилаАнализов.Лаборатория = ПравилаИКонтейнерыАнализов.Лаборатория";
	
	ТаблицаПротоколов = Запрос.Выполнить().Выгрузить();
	ТаблицаПротоколов.Сортировать("Лаборатория, КодПробы");
	Для Каждого СтрокаПротокол Из ТаблицаПротоколов Цикл
		МассивОписанияОбработкиКонтейнеров.Добавить(СтрокаПротокол);	
	КонецЦикла;
	
КонецПроцедуры	

// Возвращает представление места забора исследований для лаборатории в виде кода, выданного лабораторией.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - лаборатория, для которой получаем место забора
// 
// Возвращаемое значение:
//   Строка,
//	 Неопределено - если место забора не получено.
//
Функция ПолучитьМестоЗабораИсследований(Лаборатория) Экспорт 
	
	МестоЗабора = Неопределено;
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия <> Неопределено Тогда
		МестоЗабора = Формат(НастройкиВзаимодействия.КодМестаЗабора,"ЧЦ=5; ЧН=; ЧВН=; ЧГ=");
	КонецЕсли;	
		
	Возврат МестоЗабора;
	
КонецФункции	
	
#КонецОбласти

#Область НумерацияЗаявок

// Возвращает признак использования пулов номеров заявок в интеграции с Helix-лабораториями.
//
// Параметры:
//  Лаборатория - СправочникСсылка.Лаборатории - лаборатория, для которой получаем настройки.
// 
// Возвращаемое значение:
//  Булево - Истина, если в настройках учета лабораторий включена интеграция с Helix-лабораториями
//	и в настройках взаимодействия лаборатории включена печать этикеток с штрихкодами.
//
Функция ИспользуютсяПулыНомеровЗаявокЛабораторий(Лаборатория) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Helix_ИспользуетсяИнтеграцияСHelix Тогда
		Возврат Ложь;
	Иначе
		НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
		Возврат НастройкаВзаимодействия.ИспользоватьПечатьЭтикеток;
	КонецЕсли;
	
КонецФункции

// Получает новые номера заявок из используемых диапазонов номеров и формирует коды проб.
//
// Параметры:
//  МассивКодыПробПустые - Массив из СтрокаТаблицыЗначений	 - содержит:
//  	* Лаборатория				- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* Контейнер   				- Строка - код контейнера
//  	* Биоматериал 				- Строка - код биоматериала
//  	* КодПробы    				- Строка - код пробы, который нужно сформировать для строки таблицы
//  	* Учтен       				- Булево - если имеет значение Истина, значит код пробы сформирован
//  	* ДиапазонОтсутствует 		- Булево - если имеет значение Истина, значит не был получен диапазон номеров.
//  МассивДиапазонов	 - Массив из СтрокаТаблицыЗначений	 - содержит:
//  	* Лаборатория				- СправочникСсылка.Лаборатории - лаборатория, для которой указан диапазон номеров
//  	* НачалоДиапазона 			- Число  - начальное значение диапазона номеров
//  	* ОкончаниеДиапазона 		- Число  - конечное значение диапазона номеров
//  	* ТекущийНомер  			- Число  - последний номер, взятый из диапазона номеров 
//  	* Закрыт   					- Булево - если имеет значение Истина, значит диапазон закончился или недоступен для использования.  
//
Процедура ПолучитьНовыеНомераЗаявок(МассивКодыПробПустые, МассивДиапазонов) Экспорт 
	
	Для Каждого СтрокаКодыПробПустые Из МассивКодыПробПустые Цикл
		Для Каждого ЭлементДиапазон Из МассивДиапазонов Цикл
			Если Не ЭлементДиапазон.Закрыт Тогда
				Если ЭлементДиапазон.ТекущийНомер < ЭлементДиапазон.НачалоДиапазона
					Или ЭлементДиапазон.ТекущийНомер >= ЭлементДиапазон.ОкончаниеДиапазона Тогда  
					НовыйТекущийНомер = ЭлементДиапазон.НачалоДиапазона;
				Иначе 
					НовыйТекущийНомер = ЭлементДиапазон.ТекущийНомер + 1;
				КонецЕсли;
				ЭлементДиапазон.ТекущийНомер = НовыйТекущийНомер;
				СтрокаКодыПробПустые.КодПробы = Формат(НовыйТекущийНомер, "ЧГ=0");
				СтрокаКодыПробПустые.Учтен = Истина;
				Прервать;
			КонецЕсли; 			
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#Область ОбменЗаказами_ПрограммныйИнтерфейс // Отправка заказов и получение результатов

// Отправяет опись заказов во внешнюю лабораторию.
//
// Параметры:
//  ОписьЗаказов - ДокументСсылка.ОписьЗаказовЛаборатории	 - опись заказов этой лаборатории.
// 
// Возвращаемое значение:
//  Булево, Массив.
//
Функция ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(ОписьЗаказов) Экспорт
	
	МассивДляПечати = Новый Массив;
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(ОписьЗаказов.Лаборатория);
	
	Если НастройкиВзаимодействия = Неопределено Тогда
		ШаблонСтроки = НСтр("ru='Лаборатория ""%1"": не заданы текущие настройки взаимодействия!'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Строка(ОписьЗаказов.Лаборатория));
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(СообщениеОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
	КодМестаЗабора = Формат(НастройкиВзаимодействия.КодМестаЗабора,"ЧЦ=5; ЧН=; ЧВН=; ЧГ=");
	
	
		ДанныеДляПодключения = Новый Структура("Адрес, Порт, Логин, Пароль, ИмяКаталога",
													НастройкиВзаимодействия.FTPСоединениеПуть,
													НастройкиВзаимодействия.Порт,
													НастройкиВзаимодействия.FTPСоединениеПользователь,
													НастройкиВзаимодействия.FTPСоединениеПароль,
													"/In");
	Попытка
		АдресСайта  = ДанныеДляПодключения.Адрес;
		Порт        = ДанныеДляПодключения.Порт;
		Логин       = ДанныеДляПодключения.Логин;
		Пароль      = ДанныеДляПодключения.Пароль;
		ИмяКаталога = ДанныеДляПодключения.ИмяКаталога;
	Исключение
		СообщениеОбОшибке = "Не заполнены все данные для подключения";
	КонецПопытки;
	
	Попытка
		FTPСоединение = Новый FTPСоединение(АдресСайта,Порт,Логин,Пароль,,Ложь,60);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
		Исключение
			СообщениеОбОшибке = "Не удалось установить текущий каталог";
		КонецПопытки;
	Исключение
		СообщениеОбОшибке = "Не удалось установить соединение с FTP сервером";
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Произошла ошибка при подключении к FTP по причине: """+СообщениеОбОшибке+"""");
		Возврат Ложь;
		
	Иначе 
			
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказВоВнешнююЛабораторию.Номер,
		|	ЗаказВоВнешнююЛабораторию.Дата,
		|	ЗаказВоВнешнююЛабораторию.Клиент.Фамилия КАК КлиентФамилия,
		|	ЗаказВоВнешнююЛабораторию.Клиент.Имя КАК КлиентИмя,
		|	ЗаказВоВнешнююЛабораторию.Клиент.Отчество КАК КлиентОтчество,
		|	ЗаказВоВнешнююЛабораторию.Клиент.Пол КАК КлиентПол,
		|	ЗаказВоВнешнююЛабораторию.Клиент.ДатаРождения КАК КлиентДатаРождения,
		|	ЗаказВоВнешнююЛабораторию.Клиент,
		|	ЗаказВоВнешнююЛабораторию.Ссылка,
		|	ЗаказВоВнешнююЛабораторию.Исследования.(
		|		Ссылка,
		|		НомерСтроки,
		|		КодПробы,
		|		Номенклатура,
		|		ИД,
		|		Состояние
		|	),
		|	ЗаказВоВнешнююЛабораторию.Анонимно
		|ИЗ
		|	Документ.ЗаказВоВнешнююЛабораторию КАК ЗаказВоВнешнююЛабораторию
		|ГДЕ
		|	ЗаказВоВнешнююЛабораторию.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Создан)
		|	И НЕ ЗаказВоВнешнююЛабораторию.ПометкаУдаления
		|	И ЗаказВоВнешнююЛабораторию.Ссылка В (&Заказы)";
						 
		Запрос.УстановитьПараметр("Заказы",ОписьЗаказов.СписокЗаказов.ВыгрузитьКолонку("ЗаказВЛабораторию"));					  
		Результат = Запрос.Выполнить();

		Если Не Результат.Пустой() Тогда 
			
			Заказ = Результат.Выбрать();
			Пока Заказ.Следующий() Цикл 
			
				//Если Ложь Тогда Заказ = Документы.ЗаказВоВнешнююЛабораторию.СоздатьДокумент() КонецЕсли;
				ОбъектXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("HELIX\Order","OrderMessage"));
				ОбъектXDTO.created_on = Формат(ТекущаяУниверсальнаяДата(), "ДФ=yyyy-MM-ddTHH:mm:ssZ");
				ОбъектXDTO.message_id = КодМестаЗабора+Формат(Заказ.Номер,"ЧЦ=8; ЧВН=; ЧГ=");
				ОбъектXDTOOrder = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("HELIX\Order","OrderMessage").Свойства[2].Тип);
				
				ОбъектXDTOOrder.account_id = КодМестаЗабора;
				
				ДатаРожденияКлиента = ?(ЗначениеЗаполнено(Заказ.КлиентДатаРождения), Заказ.КлиентДатаРождения, Дата(1900,1,1)); 
				ОбъектXDTOOrder.birth_day	= Формат(День(ДатаРожденияКлиента),"ЧЦ=2; ЧВН=");
				ОбъектXDTOOrder.birth_month	= Формат(Месяц(ДатаРожденияКлиента),"ЧЦ=2; ЧВН=");
				ОбъектXDTOOrder.birth_year	= Год(ДатаРожденияКлиента);
				
				ОбъектXDTOOrder.contract_id = НастройкиВзаимодействия.КонтрактИД;  
				ОбъектXDTOOrder.created_on	= Формат(ТекущаяУниверсальнаяДата(), "ДФ=yyyy-MM-ddTHH:mm:ssZ");
				
				Если Заказ.КлиентПол = Перечисления.ПолФизическихЛиц.Мужской Тогда
					ОбъектXDTOOrder.gender = "M";
				ИначеЕсли Заказ.Клиент.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
					ОбъектXDTOOrder.gender = "F";
				Иначе
					ОбъектXDTOOrder.gender = "U";
				КонецЕсли;
				
				Если Заказ.Анонимно Тогда
					ОбъектXDTOOrder.first_name = "-";
					ОбъектXDTOOrder.last_name = "-";
					ОбъектXDTOOrder.middle_name = "-";
				Иначе
					ОбъектXDTOOrder.first_name = Заказ.КлиентИмя;
					ОбъектXDTOOrder.last_name = Заказ.КлиентФамилия;
					ОбъектXDTOOrder.middle_name = Заказ.КлиентОтчество;
					
					Телефон = ОпределитьКонтактныйТелефон(КонтактнаяИнформацияСерверПереопределяемый.ПолучитьТелефоныВладельцаСоСлужебнымиПолями(Заказ.Клиент));
					Почта	= ФорматEmail(КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Заказ.Клиент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,,Ложь));
					Если ЗначениеЗаполнено(Телефон) Тогда
						ОбъектXDTOOrder.contact_phone = Телефон;
					КонецЕсли;
					Если ЗначениеЗаполнено(Почта) Тогда
						ОбъектXDTOOrder.contact_email = Почта;
					КонецЕсли;
				КонецЕсли;
				
				ОбъектXDTOOrder.mis_order_id = ""+Заказ.Ссылка.УникальныйИдентификатор();
				ОбъектXDTOOrder.mis_patient_id = ""+Заказ.Клиент.УникальныйИдентификатор();	
				
				Исследования = Заказ.Исследования.Выбрать();
				мсИД = Новый Массив;
				ОтмененныеИсследования = Новый Массив;
				Пока Исследования.Следующий() Цикл
					Если Исследования.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отменен Тогда
						ОтмененныеИсследования.Добавить(Исследования.ИД);
					Иначе
						Если мсИД.Найти(Исследования.ИД) = Неопределено Тогда
							мсИД.Добавить(Исследования.ИД);	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				             |	ДействияНадАнализамиИсследования.Ссылка КАК Ссылка
				             |ПОМЕСТИТЬ ДокументыЗабора
				             |ИЗ
				             |	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
				             |ГДЕ
				             |	ДействияНадАнализамиИсследования.ИД В(&ИД)
				             |;
				             |
				             |////////////////////////////////////////////////////////////////////////////////
				             |ВЫБРАТЬ
				             |	ПараметрыЗабора.Параметр КАК Параметр,
				             |	МАКСИМУМ(ПараметрыЗабора.Значение) КАК Значение
				             |ИЗ
				             |	Документ.ДействияНадАнализами.ПараметрыЗабора КАК ПараметрыЗабора
				             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
				             |		ПО (ПараметрыЗабора.Ссылка В
				             |				(ВЫБРАТЬ
				             |					ДокументыЗабора.Ссылка
				             |				ИЗ
				             |					ДокументыЗабора))
				             |			И ПараметрыЗабора.Параметр = ПараметрыЗабораАнализовIDПараметров.Ссылка
				             |			И (ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Helix))
				             |			И (ПараметрыЗабора.Заполнен)
				             |
				             |СГРУППИРОВАТЬ ПО
				             |	ПараметрыЗабора.Параметр";
				
				Запрос.УстановитьПараметр("ИД",мсИД);
				ВыбПараметрыЗабора = Запрос.Выполнить().Выбрать();
				Пока ВыбПараметрыЗабора.Следующий() Цикл
					Если Не ПустаяСтрока(Строка(ВыбПараметрыЗабора.Значение)) Тогда
						ЭлементДанныхString = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string");
						Если ТипЗнч(ВыбПараметрыЗабора.Значение) = Тип("СправочникСсылка.ЗначенияПараметровЗабора") Тогда
							ЭлементДанных = ФабрикаXDTO.Создать(ЭлементДанныхString, ПолучитьХеликсИдПараметрАнализа(ВыбПараметрыЗабора.Значение));
						ИначеЕсли ТипЗнч(ВыбПараметрыЗабора.Значение) = Тип("Дата") Тогда
							ЭлементДанных = ФабрикаXDTO.Создать(ЭлементДанныхString, Формат(ВыбПараметрыЗабора.Значение, "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
						Иначе
							ЭлементДанных = ФабрикаXDTO.Создать(ЭлементДанныхString, Формат(ВыбПараметрыЗабора.Значение, "ЧН=0; ЧГ="));
						КонецЕсли;
						ОбъектXDTOOrder.Добавить(ФормаXML.Атрибут,"",ПолучитьХеликсИдПараметрАнализа(ВыбПараметрыЗабора.Параметр),ЭлементДанных);
					КонецЕсли;
				КонецЦикла;
				
				ПравилаАнализов = ПолучитьПравилаАнализа(Заказ.Ссылка, ОтмененныеИсследования);
				ОбъектXDTOSamples = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("HELIX\Order","OrderMessage").Свойства[2].Тип.Свойства[16].Тип);	
				
				Для Каждого Стр Из ПравилаАнализов Цикл
					
					ОбъектXDTOSample = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("HELIX\Order","OrderMessage").Свойства[2].Тип.Свойства[16].Тип.Свойства[0].Тип);

					КодПробы = ?(Стр.КодПробы=0 ИЛИ Стр.КодПробы="","0000000000000000",Формат(Стр.КодПробы,"ЧЦ=16; ЧВН=; ЧГ="));
					ОбъектXDTOSample.mis_sample_id = КодПробы;
					
					ОбъектXDTOSample.sample_type = Стр.Биоматериал;
					ОбъектXDTOSample.container_type = Стр.Контейнер;
					ОбъектXDTOSample.sampled_on = Формат(УниверсальноеВремя(Стр.ДатаЗабораБиоматериала), "ДФ=yyyy-MM-ddTHH:mm:ssZ");
					
					// Для печати
					МассивДляПечати.Добавить(Новый Структура("КодПробы, Тип, Контейнер", КодПробы, Стр.Биоматериал, Стр.Контейнер));
					
					ОбъектXDTOItems = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("HELIX\Order","OrderMessage").Свойства[2].Тип.Свойства[16].Тип.Свойства[0].Тип.Свойства[4].Тип);
					
					Для каждого ИдПравила Из Стр.МассивИдПравила Цикл
						ОбъектXDTOItem = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("HELIX\Order","OrderMessage").Свойства[2].Тип.Свойства[16].Тип.Свойства[0].Тип.Свойства[4].Тип.Свойства[0].Тип);
						ОбъектXDTOItem.rule_id = ИдПравила;
						ОбъектXDTOItems.Item.Добавить(ОбъектXDTOItem);
					КонецЦикла;
					
					ОбъектXDTOSample.Items.Добавить(ОбъектXDTOItems);
					ОбъектXDTOSamples.Sample.Добавить(ОбъектXDTOSample);

				КонецЦикла;
				ОбъектXDTOOrder.Samples.Добавить(ОбъектXDTOSamples);	
				ОбъектXDTO.Order.Добавить(ОбъектXDTOOrder);
				
				Запись = Новый ЗаписьXML;
				Путь = ПолучитьИмяВременногоФайла();
				//Запись.УстановитьСтроку(); // запись в строку
				
				Запись.ОткрытьФайл(Путь, "UTF-8"); 
				// 3. Записываем объявление XML-файла
				Запись.ЗаписатьОбъявлениеXML(); 
				
				ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
				ДанныеXML = Запись.Закрыть(); 
				
				СообщениеОбОшибке = ОтправитьФайлНаFTPСервер(Путь,FTPСоединение,"UMC_"+Заказ.Номер+"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd")+".xml");
				Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Произошла ошибка при отправке документа: " + Заказ.Номер + " по причине: """+СообщениеОбОшибке+"""");
					Возврат Ложь;
				Иначе	
					ЗаказОбъект = Заказ.Ссылка.ПолучитьОбъект();
					ЗаказОбъект.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отправлен;
					ЗаказОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивДляПечати;
	
КонецФункции

// Получение результатов анализов лаборатории из внешних источников.
//
// Параметры:
//  ТекстОшибки - Строка - текст ошибки получения.
//
Процедура ПолучитьРезультатыАнализов(ТекстОшибки) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().Helix_ИспользуетсяИнтеграцияСHelix Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Лаборатории.Ссылка КАК Лаборатория,
	                      |	Лаборатории.Наименование
	                      |ИЗ
	                      |	Справочник.Лаборатории КАК Лаборатории
	                      |ГДЕ
	                      |	НЕ Лаборатории.ПометкаУдаления
	                      |	И Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Helix)");	
	
	ВыборкаЛабораторииХеликс = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЛабораторииХеликс.Следующий() Цикл
		ТекстОшибкиЛаборатории = "";
		ПолучитьФайлыРезультатовАнализов(ВыборкаЛабораторииХеликс.Лаборатория, ТекстОшибкиЛаборатории);
		
		Если ЗначениеЗаполнено(ТекстОшибкиЛаборатории) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки,
				ВыборкаЛабораторииХеликс.Наименование + ": " + ТекстОшибкиЛаборатории, Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак использования анонимной отправки анализов.
// 
// Возвращаемое значение:
//  Булево 
//
Функция ИспользуетсяАнонимнаяОтправкаАнализов() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами_СлужебныеПроцедуры // Отправка заказов и получение результатов

Функция ПолучитьХеликсИдПараметрАнализа(ПараметрИлиЗначение)
	
	Если (ТипЗнч(ПараметрИлиЗначение) = Тип("СправочникСсылка.ЗначенияПараметровЗабора") 
		ИЛИ ТипЗнч(ПараметрИлиЗначение) = Тип("ПланВидовХарактеристикСсылка.ПараметрыЗабораАнализов")) 
		И ЗначениеЗаполнено(ПараметрИлиЗначение) 
	Тогда
		Если ТипЗнч(ПараметрИлиЗначение) = Тип("СправочникСсылка.ЗначенияПараметровЗабора") Тогда
		    СписокИд = ПараметрИлиЗначение.IDЗначения;
		Иначе
			СписокИд = ПараметрИлиЗначение.IDПараметров;
		КонецЕсли;
		
		Для Каждого Стр Из СписокИд Цикл
			Если Стр.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Helix Тогда
				Возврат Стр.ID;
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПравилаАнализа(Заказ, ОтмененныеИсследования)
	
	Массив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказВоВнешнююЛабораториюИсследования.КодПробы КАК КодПробы,
	               |	ЗаказВоВнешнююЛабораториюИсследования.ИД КАК ИД,
	               |	ЗаказВоВнешнююЛабораториюИсследования.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ Заказ
	               |ИЗ
	               |	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
	               |ГДЕ
	               |	ЗаказВоВнешнююЛабораториюИсследования.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДействияНадАнализамиИсследования.Ссылка КАК Ссылка,
	               |	ДействияНадАнализамиИсследования.Ссылка.Дата КАК Дата,
	               |	ДействияНадАнализамиИсследования.КлючСтроки КАК КлючСтроки,
	               |	ДействияНадАнализамиИсследования.Номенклатура КАК Номенклатура,
	               |	ДействияНадАнализамиИсследования.ИД КАК ИД,
	               |	ДействияНадАнализамиКонтейнеры.НомерКонтейнера КАК НомерКонтейнера,
	               |	ДействияНадАнализамиКонтейнеры.КодПробы КАК КодПробы,
	               |	ДействияНадАнализамиКонтейнеры.ИдПравила КАК ИдПравила,
	               |	ДействияНадАнализамиКонтейнеры.Биоматериал КАК Биоматериал,
	               |	ДействияНадАнализамиКонтейнеры.Контейнер КАК Контейнер
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
	               |		ПО (ДействияНадАнализамиИсследования.ИД В
	               |				(ВЫБРАТЬ
	               |					Заказ.ИД
	               |				ИЗ
	               |					Заказ КАК Заказ))
	               |			И (НЕ ДействияНадАнализамиИсследования.ИД В (&ОтмененныеИсследования))
	               |			И ДействияНадАнализамиИсследования.Ссылка = ДействияНадАнализамиКонтейнеры.Ссылка
	               |			И ДействияНадАнализамиИсследования.КлючСтроки = ДействияНадАнализамиКонтейнеры.КлючСтрокиИсследования
	               |			И (ДействияНадАнализамиИсследования.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАнализов.Забор))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Документы.Дата КАК ДатаЗабораБиоматериала,
	               |	Документы.Номенклатура КАК Номенклатура,
	               |	Документы.КодПробы КАК КодПробы,
	               |	Документы.КлючСтроки КАК КлючСтроки,
	               |	Документы.ИдПравила КАК ИдПравила,
	               |	Документы.Биоматериал КАК Биоматериал,
	               |	Документы.Контейнер КАК Контейнер
	               |ИЗ
	               |	Документы КАК Документы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Заказ КАК Заказ
	               |		ПО Документы.ИД = Заказ.ИД
	               |			И Документы.КодПробы = Заказ.КодПробы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодПробы,
	               |	ИдПравила";
	Запрос.УстановитьПараметр("Ссылка",Заказ);
	Запрос.УстановитьПараметр("ОтмененныеИсследования",ОтмененныеИсследования);
	
	ВыборкаДЗ = Запрос.Выполнить().Выбрать();
	
	ПрошлыйКодПробы = Неопределено;
	ТекСтруктура = Неопределено;
	Пока ВыборкаДЗ.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаДЗ.КодПробы) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДЗ.ИдПравила) Тогда
			Продолжить;
		КонецЕсли;

		Если Не ВыборкаДЗ.КодПробы = ПрошлыйКодПробы Тогда
			Если Не ТекСтруктура = Неопределено Тогда
				Массив.Добавить(ТекСтруктура);
			КонецЕсли;
			ТекСтруктура = Новый Структура("ДатаЗабораБиоматериала, КодПробы, Биоматериал, Контейнер, МассивИдПравила",
				ВыборкаДЗ.ДатаЗабораБиоматериала, ВыборкаДЗ.КодПробы, ВыборкаДЗ.Биоматериал, ВыборкаДЗ.Контейнер, Новый Массив);
			ТекСтруктура.МассивИдПравила.Добавить(СтрЗаменить(ВыборкаДЗ.ИдПравила,Символ(160),""));
			ПрошлыйКодПробы = ВыборкаДЗ.КодПробы;
		Иначе
			ТекСтруктура.МассивИдПравила.Добавить(СтрЗаменить(ВыборкаДЗ.ИдПравила,Символ(160),""));
		КонецЕсли;
	КонецЦикла;
	Если Не ПрошлыйКодПробы = Неопределено Тогда
		Массив.Добавить(ТекСтруктура);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Процедура ПолучитьФайлыРезультатовАнализов(Лаборатория, ТекстОшибки) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	АдресСайта  = СтрЗаменить(НРег(НастройкиВзаимодействия.FTPСоединениеПуть), "ftp://", "");
	Порт        = НастройкиВзаимодействия.Порт;
	Логин       = НастройкиВзаимодействия.FTPСоединениеПользователь;
	Пароль      = НастройкиВзаимодействия.FTPСоединениеПароль;
	
	Если ПустаяСтрока(АдресСайта) Или ПустаяСтрока(Логин) Или ПустаяСтрока(Пароль) Тогда
		ТекстОшибки = НСтр("ru='Не все параметры подключения заполнены.'");
		Возврат;
	КонецЕсли;
	
	// Подключаемся к FTP.
	Попытка
		FTPСоединение = Новый FTPСоединение(АдресСайта, Порт, Логин, Пароль,, Ложь, 60);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось установить соединение с FTP сервером.'");
		Возврат;
	КонецПопытки;
	
	// Инициализация обработки транспорта.
	ОбработкаТранспорта = ИнициализироватьОбработкуТранспорта(НастройкиВзаимодействия);
	ОбработкаТранспорта.FTPСоединениеПуть = НастройкиВзаимодействия.FTPСоединениеПуть + "/Out";
	ОбработкаТранспорта.Инициализация();
	ОбработкаТранспорта.ВыполнитьДействияПередОбработкойСообщения();
	
	ПриемыНаАвтоОтправку = Новый Соответствие;
	ОтправлятьРезультатыПоЭлектроннойПочте = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте");
	СостоянияЗаказовЛаборатории = Перечисления.СостоянияЗаказовЛаборатории;
	СостояниеПолученРезультат = СостоянияЗаказовЛаборатории.ПолученРезультат;
	
	ПорцияСчитыванияФайлов = 50;
	ОбработаноФайлов = 0;
	КоличествоОбрабатываемыхЗаРазФайлов = ?(НастройкиВзаимодействия.КоличествоОбрабатываемыхЗаРазФайлов = 0, ПорцияСчитыванияФайлов, НастройкиВзаимодействия.КоличествоОбрабатываемыхЗаРазФайлов);
	
	// Складываем данные по полученным результатам в эту таблицу, потом передаем эту таблицу в общий модуль
	// для обработки отметок медосмотра
	ТЗДляПростановкиОтметокПМО = МедосмотрыСервер.ПолучитьПустуюТЗДляПростановкиОтметокПМО();
	
	Пока ОбработаноФайлов < КоличествоОбрабатываемыхЗаРазФайлов Цикл
		
		ФайлыРезультатовАнализов = ОбработкаТранспорта.ПолучитьТекстыФайловКаталога(, 5, FTPСоединение,, Истина, "*.htm*");
		
		Если ФайлыРезультатовАнализов = Неопределено Тогда
			Если ОбработаноФайлов = 0 Тогда
				ТекстОшибки = ОбработкаТранспорта.СтрокаСообщенияОбОшибке;
			КонецЕсли;
			Прервать;
		Иначе
			ОбработаноФайлов = ОбработаноФайлов + ФайлыРезультатовАнализов.Количество();
			УстановитьПривилегированныйРежим(Истина);
			
			Для Каждого ФайлРезультата Из ФайлыРезультатовАнализов Цикл
				ШтрихКод = ПолучитьШтрихкод(ФайлРезультата.ИмяФайла);
				Заказ = НайтиЗаказПоШтрихкоду(ШтрихКод);
				
				Если Заказ.Пустая()
					Или Заказ.Состояние = СостояниеПолученРезультат
					Или Заказ.Состояние = СостоянияЗаказовЛаборатории.Обработан
					Или Заказ.Состояние = СостоянияЗаказовЛаборатории.Отменен
				Тогда
					ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.ИмяФайла, Ложь, FTPСоединение);
					Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ФайлРезультата.ДанныеФайла) Тогда
					ЗаказОбъект = Заказ.ПолучитьОбъект();
					ИсследованияОбработанные = ЗаказОбъект.Исследования.НайтиСтроки(Новый Структура("КодПробы", ШтрихКод));
					Если ИсследованияОбработанные.Количество() > 0 Тогда
						стрРезультат = ЗаказОбъект.Результаты.Добавить();
						стрРезультат.КодПробы = ШтрихКод;
						стрРезультат.Результат = Новый ХранилищеЗначения(ФайлРезультата.ДанныеФайла, Новый СжатиеДанных(3));
						
						Для Каждого Исследование Из ИсследованияОбработанные Цикл
							Исследование.Состояние = СостояниеПолученРезультат;
						КонецЦикла;
					КонецЕсли;
					
					ИсследованияСРезультатами = ЗаказОбъект.Исследования.НайтиСтроки(Новый Структура("Состояние", СостояниеПолученРезультат));
					КоличествоИсследованийСРезультатами = ИсследованияСРезультатами.Количество();
					Если КоличествоИсследованийСРезультатами > 0
						И КоличествоИсследованийСРезультатами = ЗаказОбъект.Исследования.Количество()
					Тогда
					    ЗаказОбъект.Состояние = СостояниеПолученРезультат;
					КонецЕсли;
					
					Попытка
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ШаблонСтроки = НСтр("ru = 'Не удалось записать документ ""%1"" по причине: %2.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Строка(Заказ), ОписаниеОшибки());
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстСообщения, Символы.ПС);
						Продолжить;
					КонецПопытки;
					
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					                      |	ЗаказВоВнешнююЛабораториюИсследования.Ссылка,
					                      |	ЗаказВоВнешнююЛабораториюИсследования.КодПробы
					                      |ИЗ
					                      |	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
					                      |ГДЕ
					                      |	ЗаказВоВнешнююЛабораториюИсследования.Ссылка = &Ссылка
					                      |	И ЗаказВоВнешнююЛабораториюИсследования.КодПробы = &ШтрихКод
					                      |	И ЗаказВоВнешнююЛабораториюИсследования.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.ПолученРезультат)");
										  
					Запрос.УстановитьПараметр("Ссылка",ЗаказОбъект.Ссылка);
					Запрос.УстановитьПараметр("ШтрихКод",ШтрихКод);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Пока Выборка.Следующий() Цикл
						// Создание приема на основании заказа.
						ПриемОбъект = Документы.Прием.СоздатьДокумент();
						
						ПриемОбъект.Заполнить(Выборка);
						ПриемОбъект.Дата = ТекущаяДата();
						ПриемОбъект.Врач = НастройкиВзаимодействия.Лаборант;
						
						Попытка
							ПриемОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ПриемОбъект.Записать(РежимЗаписиДокумента.Запись);
						КонецПопытки;
						
						НоваяСтрокаТЗПМО = ТЗДляПростановкиОтметокПМО.Добавить();
						НоваяСтрокаТЗПМО.КодПробы = Выборка.КодПробы;
						НоваяСтрокаТЗПМО.ЗаказВоВнешююЛабораторию = Выборка.Ссылка;
						НоваяСтрокаТЗПМО.Прием = ПриемОбъект.Ссылка;
						
						Если Не ЗначениеЗаполнено(ПриемОбъект.ПервичныйПрием) Тогда
							
							ПриемОбъект.ПервичныйПрием = ПриемОбъект.Ссылка;
							ПриемОбъект.ЭтоПервичный = Истина;
							
							Попытка
								ПриемОбъект.Записать(РежимЗаписиДокумента.Проведение);
							Исключение
								ПриемОбъект.Записать(РежимЗаписиДокумента.Запись);
							КонецПопытки;
							
						КонецЕсли;
						
						Если ОтправлятьРезультатыПоЭлектроннойПочте И Не ПриемОбъект.Ссылка.Пустая() Тогда
							ПриемыНаАвтоОтправку.Вставить(ПриемОбъект.Ссылка, ПриемОбъект.Дата);
						КонецЕсли;
					КонецЦикла;
					
					ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.ИмяФайла, Истина, FTPСоединение);
					Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	МедосмотрыСервер.УстановитьОтметкиДляДействийПМОПриСозданииДокументаИзВнЛаборатории(ТЗДляПростановкиОтметокПМО);
	
	// Получаем файлы заключений по результатам анализов.
	Если ОбработаноФайлов < КоличествоОбрабатываемыхЗаРазФайлов Тогда
		ПолучитьФайлыЗаключенийПоРезультатамАнализов(ТекстОшибки, НастройкиВзаимодействия, ОбработкаТранспорта, FTPСоединение, ОбработаноФайлов,
													 КоличествоОбрабатываемыхЗаРазФайлов, ПриемыНаАвтоОтправку, ОтправлятьРезультатыПоЭлектроннойПочте);
	КонецЕсли;
	
	// Запишем в регистр для автоотправки результатов.
	Для Каждого ЭлементПрием Из ПриемыНаАвтоОтправку Цикл
		ЗаписьНаАвтоотправку = РегистрыСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.СоздатьМенеджерЗаписи();
		ЗаписьНаАвтоотправку.Документ = ЭлементПрием.Ключ;
		ЗаписьНаАвтоотправку.Период = ЭлементПрием.Значение;
		
		Попытка
			ЗаписьНаАвтоотправку.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьФайлыЗаключенийПоРезультатамАнализов(ТекстОшибки, НастройкиВзаимодействия, ОбработкаТранспорта, FTPСоединение,
													   ОбработаноФайлов, КоличествоОбрабатываемыхЗаРазФайлов, ПриемыНаАвтоОтправку, ОтправлятьРезультатыПоЭлектроннойПочте)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НастройкиВзаимодействия.ЗагружатьЗаключенияВФорматеPDF Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФайлыРезультатовАнализов = FTPСоединение.НайтиФайлы("/Out", "*.pdf", Ложь);
	Исключение
	КонецПопытки;
	
	Если ФайлыРезультатовАнализов = Неопределено Тогда
		ТекстОшибкиFTP = НСтр("ru = 'Ошибка при поиске PDF-файлов заключений по результатам анализов на FTP-сервере.'");
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
		Возврат;
	КонецЕсли;
	
	Если ФайлыРезультатовАнализов.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		Для Каждого ФайлРезультата Из ФайлыРезультатовАнализов Цикл
			
			Если ОбработаноФайлов >= КоличествоОбрабатываемыхЗаРазФайлов Тогда
				Прервать;
			КонецЕсли;
			
			Штрихкод = ПолучитьШтрихкод(ФайлРезультата.Имя);
			Заказ = НайтиЗаказПоШтрихкоду(Штрихкод);
			
			Если Заказ.Пустая()
				Или Заказ.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отменен
			Тогда
				ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.Имя, Ложь, FTPСоединение);
				
				Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
				КонецЕсли;
				
				ОбработаноФайлов = ОбработаноФайлов + 1;
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка КАК Ссылка,
			|	ЗаказВоВнешнююЛабораториюИсследования.КодПробы КАК КодПробы,
			|	Прием.Ссылка КАК Прием,
			|	Прием.Дата КАК ДатаПриема
			|ПОМЕСТИТЬ ВсеПриемыПоЗаказу
			|ИЗ
			|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием КАК Прием
			|		ПО ЗаказВоВнешнююЛабораториюИсследования.Ссылка = Прием.Основание
			|			И (НЕ Прием.ПометкаУдаления)
			|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка = &Ссылка)
			|			И (ЗаказВоВнешнююЛабораториюИсследования.КодПробы = &ШтрихКод)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВсеПриемыПоЗаказу.Ссылка КАК Ссылка,
			|	ВсеПриемыПоЗаказу.КодПробы КАК КодПробы,
			|	ВсеПриемыПоЗаказу.Прием КАК Прием,
			|	ВсеПриемыПоЗаказу.ДатаПриема КАК ДатаПриема
			|ИЗ
			|	ВсеПриемыПоЗаказу КАК ВсеПриемыПоЗаказу
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.Работы КАК ПриемРаботы
			|		ПО ВсеПриемыПоЗаказу.Прием = ПриемРаботы.Ссылка
			|			И ВсеПриемыПоЗаказу.КодПробы = ПриемРаботы.НомерПробы"
			;
			
			Запрос.УстановитьПараметр("Ссылка", Заказ);
			Запрос.УстановитьПараметр("ШтрихКод", Штрихкод);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ПутьКФайлу = КаталогВременныхФайлов() + ФайлРезультата.Имя;
				
				Попытка
					FTPСоединение.Получить(ФайлРезультата.ПолноеИмя, ПутьКФайлу);
				Исключение
					ШаблонСтроки = НСтр("ru = 'Ошибка при получении файла PDF ""%1"" с FTP-сервера.'");
					ТекстОшибкиFTP = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ФайлРезультата.Имя);
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
				КонецПопытки;
				
				мсВладельцы = Новый Массив;
				мсВладельцы.Добавить(Выборка.Прием);
				ФайлыДокумента = РаботаСФайлами.ПолучитьВсеФайлы(мсВладельцы);
				
				ФайлУжеДобавлен = Ложь;
				Если ТипЗнч(ФайлыДокумента) = Тип("Массив") Тогда 
					Для Каждого ФайлДокумента Из ФайлыДокумента Цикл
						Если ФайлДокумента.Наименование = ФайлРезультата.Имя Тогда 
							ФайлУжеДобавлен = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не ФайлУжеДобавлен Тогда
					РаботаСФайлами.ДобавитьНовыйФайл(Выборка.Прием, ПутьКФайлу);
					
					Если ОтправлятьРезультатыПоЭлектроннойПочте И Не Выборка.Прием.Пустая() Тогда
						ПриемыНаАвтоОтправку.Вставить(Выборка.Прием, Выборка.ДатаПриема);
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					УдалитьФайлы(ПутьКФайлу);
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.Имя, Истина, FTPСоединение);
			
			Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
			КонецЕсли;
				
			ОбработаноФайлов = ОбработаноФайлов + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЗаказПоШтрихкоду(Штрихкод)
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат Документы.ЗаказВоВнешнююЛабораторию.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ЗаказВоВнешнююЛабораториюИсследования.Ссылка
	                      |ИЗ
	                      |	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
	                      |ГДЕ
	                      |	ЗаказВоВнешнююЛабораториюИсследования.КодПробы = &ШтрихКод
	                      |	И НЕ ЗаказВоВнешнююЛабораториюИсследования.Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("ШтрихКод",ШтрихКод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Заказ = Выборка.Ссылка;
	Иначе 
		Заказ = Документы.ЗаказВоВнешнююЛабораторию.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Заказ;
	
КонецФункции

Функция ПолучитьШтрихкод(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ПоляИмениФайла = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Файл.ИмяБезРасширения, "_");
	Если ПоляИмениФайла.Количество() < 2 Тогда 
		Возврат Неопределено;
	Иначе 
		Возврат ПоляИмениФайла[1];
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПроверкаВвода

// Проверка корректности кодов проб.
//
// Параметры:
//  КодыПроб - Массив - массив строк с кодами проб.
//  ПроверятьПустые - Булево - проверять ли корректность пустых кодов проб.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПроверитьКорректностьКодовПроб(КодыПроб, Знач ПроверятьПустые) Экспорт
	
	СообщениеОбОшибке = "";
	
	Если ПроверятьПустые = Неопределено Тогда
		ПроверятьПустые = Истина;
	КонецЕсли;
	
	ПредставлениеЛаборатории = Строка(Перечисления.ВнешниеЛаборатории.Helix);
	
	Для Сч = 1 По КодыПроб.Количество() Цикл
		
		КодПробы = КодыПроб[Сч - 1];
		
		ТекстОшибки = "";
		Если Не КодПробыКорректен(КодПробы, ПроверятьПустые, ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СообщениеОбОшибке,
				ЛабораторияСервер.СформироватьТекстОшибкиКодаПробы(Сч, ТекстОшибки, ПредставлениеЛаборатории),
				Символы.ПС);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Проверка наличия одинаковых кодов проб.
	ПроверитьДублиКодовПроб(КодыПроб, СообщениеОбОшибке, ПредставлениеЛаборатории);
		
	Возврат СообщениеОбОшибке;
		
КонецФункции

// Проверка корректности кода пробы с описанием ошибки.
//
// Параметры:
//  КодПробы	 - Строка	 - код пробы.
//  ТекстОшибки	 - Строка	 - текст ошибки.
// 
// Возвращаемое значение:
//  Булево.
//
Функция КодПробыКорректенДляЗаказа(КодПробы, ТекстОшибки = "") Экспорт
	
	Возврат КодПробыКорректен(КодПробы, Истина, ТекстОшибки);
	
КонецФункции

// Возвращает Истина, если код пробы (штрихкод образца) корректен
//
// Параметры:
//  КодПробы		 - Строка	 - код пробы.
//  ПроверятьПустые	 - Булево	 - По умолчанию Ложь.
//  ТекстОшибки		 - Строка	 - По умолчанию "".
// 
// Возвращаемое значение:
//  Булево.
//
Функция КодПробыКорректен(КодПробы, ПроверятьПустые = Ложь, ТекстОшибки = "")
	
	Результат = Истина;
	
	Если ПроверятьПустые
		И ПустаяСтрока(КодПробы)
	Тогда
		Результат = Ложь;
		ТекстОшибки = ЛабораторияСервер.ТекстОшибкиПустойКодПробы();
			
	ИначеЕсли Не ПустаяСтрока(КодПробы) Тогда
		// Код пробы должен быть 10 или 16 цифр
		Если (СтрДлина(КодПробы) <> 10
			 И СтрДлина(КодПробы) <> 16)
			Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодПробы)
		Тогда
			Результат = Ложь;
			ТекстОшибки = НСтр("ru='Код пробы должен быть 10 или 16 цифр'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДублиКодовПроб(КодыПроб, СообщениеОбОшибке, ПредставлениеЛаборатории)
	
	ПроверяемыеКодыПроб = Новый Массив;
	ДублиКодовПроб = Новый Массив;
	
	Для Каждого КодПробы Из КодыПроб Цикл 
		Если Не ПустаяСтрока(КодПробы) Тогда
			Если ПроверяемыеКодыПроб.Найти(КодПробы) = Неопределено Тогда
				ПроверяемыеКодыПроб.Добавить(КодПробы);	
			ИначеЕсли ДублиКодовПроб.Найти(КодПробы) = Неопределено Тогда 
				ДублиКодовПроб.Добавить(КодПробы);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоДублей = ДублиКодовПроб.Количество();
	Если КоличествоДублей <> 0 Тогда
		Для Каждого Дубль Из ДублиКодовПроб Цикл 
			ШаблонСтроки = НСтр("ru='%1, в документе дублируется код пробы %2.'");
			ТекстОшибки = СтрШаблон(ШаблонСтроки, ПредставлениеЛаборатории, Дубль); 
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СообщениеОбОшибке, ТекстОшибки, символы.ПС);
	    КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

Функция ОпределитьКонтактныйТелефон(Телефоны)
	
	Если Телефоны.Количество() <> 0 Тогда
		
		ПроверяемыеВариантыТелефона = Новый Массив;
		
		Для Каждого СтруктураТелефона Из Телефоны Цикл
			
			ПроверяемыеВариантыТелефона.Очистить();
			ПроверяемыеВариантыТелефона.Добавить(СтруктураТелефона.Представление);
			ПроверяемыеВариантыТелефона.Добавить(СокрЛП(СтруктураТелефона.Поле1) + СокрЛП(СтруктураТелефона.Поле2) + СокрЛП(СтруктураТелефона.Поле3));
			ПроверяемыеВариантыТелефона.Добавить(СтруктураТелефона.Поле3);
			
			Для Каждого Телефон Из ПроверяемыеВариантыТелефона Цикл
				
				ТелефонФорматированный = ФорматТелефона(Телефон);
				Если ЗначениеЗаполнено(ТелефонФорматированный) Тогда
					Возврат ТелефонФорматированный;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Формат 7ХХХХХХХХХХ
Функция ФорматТелефона(Телефон)
	
	Результат = "";
		
	ТелефонЦифры = "";
	Для Сч = 1 По СтрДлина(Телефон) Цикл
		Символ = Сред(Телефон,Сч,1);
		Если ОбщегоНазначенияКлиентСервер.ЭтоЦифра(Символ) Тогда
			ТелефонЦифры = ТелефонЦифры + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(ТелефонЦифры) = 11 Или СтрДлина(ТелефонЦифры) = 10 Тогда
		
		Результат = "7" + Прав(ТелефонЦифры,10);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматEmail(Знач АдресаПочты)
	
	Если ТипЗнч(АдресаПочты) <> Тип("Массив") Тогда
		Адрес = АдресаПочты;
		АдресаПочты = Новый Массив;
		АдресаПочты.Добавить(Адрес);
	КонецЕсли;
	
	Для Каждого Адрес Из АдресаПочты Цикл
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Адрес) Тогда
			Возврат Адрес;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ТранспортСообщений

Функция ИнициализироватьОбработкуТранспорта(НастройкиВзаимодействия)
	
	ОбработкаТранспорта = Обработки.ТранспортСообщенийОбменаFTP.Создать();
	ОбработкаТранспорта.FTPСоединениеПароль = НастройкиВзаимодействия.FTPСоединениеПароль;
	ОбработкаТранспорта.FTPСоединениеПользователь = НастройкиВзаимодействия.FTPСоединениеПользователь;
	ОбработкаТранспорта.FTPСоединениеПуть = НастройкиВзаимодействия.FTPСоединениеПуть;
	ОбработкаТранспорта.FTPСоединениеПорт = НастройкиВзаимодействия.Порт;
	ОбработкаТранспорта.FTPСжиматьФайлИсходящегоСообщения = Ложь;
	ОбработкаТранспорта.FTPСоединениеМаксимальныйДопустимыйРазмерСообщения = 0;
	ОбработкаТранспорта.FTPСоединениеПассивноеСоединение = Ложь;
	
	ОбработкаТранспорта.Инициализация();
	
	Возврат ОбработкаТранспорта;
	
КонецФункции

Функция ОтправитьФайлНаFTPСервер(ПутьКФайлу,FTPСоединение,ИмяФайлаСРасширением = Неопределено)
	
	Если ИмяФайлаСРасширением = Неопределено Тогда
		ИмяФайлаСРасширением = Строка(Новый УникальныйИдентификатор)+".xml";
	КонецЕсли;
	
	Попытка
		FTPСоединение.Записать(ПутьКФайлу, ИмяФайлаСРасширением);
	Исключение
		Возврат "Не удалось записать файл";
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ЭтикеткиКонтейнеров

// Используется ли печать этикеток в интеграции с лабораторией.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - лаборатория
// 
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПечатьЭтикеток(Лаборатория) Экспорт 
	
	НастройкиЛаборатории = ПолучитьНастройкиВзаимодействия(Лаборатория);
	
	Возврат НастройкиЛаборатории.ИспользоватьПечатьЭтикеток;
	
КонецФункции

// Шаблон этикетки биоматериала для этой лаборатории.
// 
// Возвращаемое значение:
//  Справочники.ШаблоныЭтикетокИЦенниковБПО - этикетка лаборатории.
//
Функция ПолучитьШаблонЭтикеткиЛаборатории() Экспорт
	Возврат Справочники.ШаблоныЭтикетокИЦенниковБПО.ЭтикеткаХеликс;	
КонецФункции

#КонецОбласти

#КонецОбласти