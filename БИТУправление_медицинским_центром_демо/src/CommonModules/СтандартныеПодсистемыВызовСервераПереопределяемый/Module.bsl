/////////////////////////////////////////////////////////////////////////////////
// БазоваяФункциональность
//
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Не предназначена для прямого вызова из клиентского кода.
// Вместо нее следует использовать одноименную функцию из 
// модуля СтандартныеПодсистемыКлиентПовтИсп.
//
// Реализация:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента при запуске.
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Параметры = Новый Структура();
	
	// СтандартныеПодсистемы
	Если НЕ ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Тогда
		Возврат Новый ФиксированнаяСтруктура(Параметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы
	
	ПервыйЗапросПараметров = Ложь;
	ПараметрыРаботыКлиентаПриОбновлении = Новый Структура;
	Если ПараметрыРаботыКлиентаПриОбновлении.Свойство("ПервыйЗапросПараметров") Тогда
		ПервыйЗапросПараметров = Истина;
		ПараметрыРаботыКлиентаПриОбновлении.Удалить("ПервыйЗапросПараметров");
	КонецЕсли;
	
#Если ВебКлиент Или МобильныйКлиент Тогда
	ЭтоВебКлиент = Истина;
#Иначе
	ЭтоВебКлиент = Ложь;
#КонецЕсли
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	              ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;

	Параметры = Новый Структура;
	Параметры.Вставить("ПервыйЗапросПараметров", ПервыйЗапросПараметров);
	Параметры.Вставить("СтрокаСоединенияИнформационнойБазы", СтрокаСоединенияИнформационнойБазы());
	Параметры.Вставить("ЭтоВебКлиент",    ЭтоВебКлиент);
	Параметры.Вставить("ЭтоLinuxКлиент", ЭтоLinuxКлиент);
	
	Возврат СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Не предназначена для прямого вызова из клиентского кода. 
// Вместо нее следует использовать одноименную функцию из 
// модуля СтандартныеПодсистемыКлиентПовтИсп.
//
// Реализация:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента.
//
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	ИнтеграцияСтандартныхПодсистем.ПриДобавленииПараметровРаботыКлиента(Параметры);
	
	ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры);
	Параметры.Вставить("АдресныйКлассификаторУстарел",
		Истина);
	ПараметрыИПП = Новый Структура;

	ПараметрыИПП.Вставить("ИмяКонфигурации"          , Метаданные.Имя);
	ПараметрыИПП.Вставить("ВерсияКонфигурации"       , Метаданные.Версия);

	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	ПараметрыИПП.Вставить("ДоменРасположенияСерверовИПП", НастройкиСоединения.ДоменРасположенияСерверовИПП);

	ПараметрыИПП.Вставить(
		"ДоступноПодключениеИнтернетПоддержки",
		Истина);//ДоступноПодключениеИнтернетПоддержки());

	// Обработчики бизнес-процессов
	ПараметрыИПП.Вставить("КлиентскиеОбработчикиБизнесПроцессов",
		ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().Клиент.БизнесПроцессы);
		
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	ПолучениеФайловИзИнтернетаСлужебный.ПриДобавленииПараметровРаботыКлиента(Параметры);
	
	//+бит
	Параметры.Вставить("ЭтоПолноправныйПользователь", Пользователи.ЭтоПолноправныйПользователь());
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	//-бит
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		МодульЭлектроннаяПодписьСлужебный.ПриДобавленииПараметровРаботыКлиента(Параметры);
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ДатаСеансаУниверсальная = УниверсальноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
	// Записываем серверное время для последующей замены его на разницу с клиентом.
	Параметры.Вставить("ПоправкаКВремениСеанса", ДатаСеанса);
	Параметры.Вставить("ПоправкаКУниверсальномуВремени", ДатаСеансаУниверсальная - ДатаСеанса);
	ИнтеграцияСтандартныхПодсистем.ПриДобавленииПараметровРаботыКлиента(Параметры);
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) 
	
	// БазоваяФункциональность
	Если НЕ СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Конец БазоваяФункциональность
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) 
	
	// БазоваяФункциональность
	СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец БазоваяФункциональность
	
	// ЗавершениеРаботыПользователей
	Параметры.Вставить("ПараметрыБлокировкиСеансов", Новый ФиксированнаяСтруктура(СоединенияИБ.ПараметрыБлокировкиСеансов()));
	// Конец ЗавершениеРаботыПользователей
	
	// ОбновлениеИнформационнойБазы
	Параметры.Вставить("ПервыйЗапуск", ОбновлениеИнформационнойБазы.ПервыйЗапуск());
	// Конец ОбновлениеИнформационнойБазы
	
	// ОбновлениеКонфигурации
	Параметры.Вставить("НастройкиОбновления", 
	Новый ФиксированнаяСтруктура(ОбновлениеКонфигурации.ПолучитьНастройкиОбновления()));
	#Если ТонкийКлиент Тогда 
		ИмяИсполняемогоФайлаКлиента = "1cv8c.exe";
	#Иначе
		ИмяИсполняемогоФайлаКлиента = "1cv8.exe";
	#КонецЕсли
	Параметры.Вставить("ИмяИсполняемогоФайлаКлиента", ИмяИсполняемогоФайлаКлиента);
	
	// ОбменДанными
	ОбменДаннымиСервер.ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры);
	// Конец ОбменДанными
	
	// ПроверкаЛегальностиПолученияОбновлений
	Параметры.Вставить("ЭтоГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	// Конец ПроверкаЛегальностиПолученияОбновлений
	
	// ПолучениеФайловИзИнтернета
	Параметры.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.ПолучитьНастройкуПроксиСервера());
	// Конец ПолучениеФайловИзИнтернета
	
	//// ЭлектроннаяЦифроваяПодпись
	//Параметры.Вставить("ПерсональныеНастройкиРаботыСЭЦП",
	//	Новый ФиксированнаяСтруктура(ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер()));
	//// Конец ЭлектроннаяЦифроваяПодпись
	
КонецПроцедуры

#КонецОбласти
