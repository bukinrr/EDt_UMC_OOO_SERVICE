#Область ПрограммныйИнтерфейс
// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - Число - исходное число.
//  ПараметрПорядокОкругления        - Число - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - Булево -  определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам.
//
// Возвращаемое значение:
//  Число - Округленное по заданному порядку значение.
//
Функция ОкруглитьЦену(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПараметрПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПараметрПорядокОкругления;
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));
		
	// Вычислим количество интервалов, входящих в число.
	КоличествоИнтервал	= Число / Порядок;
		
	// Вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4.
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4.
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

// Пересчитывает цену для другой единицы измерения.
//
// Параметры: 
//  Цена         - Число - значение цены, которое надо пересчитать,
//  ЕдиницаЦены  - СправочникСсылка.ЕдиницыИзмерения - единица, на которую назначена Цена.
//  НоваяЕдиница - СправочникСсылка.ЕдиницыИзмерения - единица, за которую надо пересчитать цену.
//                 Если не заполнено, то устанавливается равной ЕдиницаЦены без пересчета.
//
// Возвращаемое значение:
//  Число - Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииЕдиницы(Цена, ЕдиницаЦены, НоваяЕдиница) Экспорт

	НовоеЗначениеЦены = Цена;

	Если ЕдиницаЦены <> НоваяЕдиница Тогда
		Если НЕ ЗначениеЗаполнено(НоваяЕдиница) Тогда // Параметр единицы не задан, значить надо возвращать в единице цены.
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // Если не задана единица цены, то будем счатать цену нулевой.
				НовоеЗначениеЦены = 0;
			Иначе
				НоваяЕдиница = ЕдиницаЦены;
			КонецЕсли;
		Иначе // Если единица цены не совпадает с параметром, то надо пересчитать.
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // Если не задана единица цены, то будем счатать цену нулевой.
				НовоеЗначениеЦены = 0;
			Иначе
				КоэффициентЦены = ЕдиницаЦены.Коэффициент;
				НовоеЗначениеЦены  = ?(НЕ ЗначениеЗаполнено(КоэффициентЦены), 0, 
									 НовоеЗначениеЦены * НоваяЕдиница.Коэффициент / КоэффициентЦены)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииЕдиницы()

// Создает новый документ установки цен на основании поступления товаров и услуг.
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.ПоступлениеТоваровУслуг - документ-основание.
// 
// Возвращаемое значение:
//   ДокументСсылка.УстановкаЦен.
//
Функция ВвестиУстановкуЦенПоставщикаНаОснованииПоступления(ДокументСсылка) Экспорт 
	
	ДокументУстановкаЦен = Документы.УстановкаЦен.СоздатьДокумент();
	ДокументУстановкаЦен.ВидОперации = Перечисления.ВидыОперацийУстановкиЦен.ЦеныКонтрагентов;
	ДокументУстановкаЦен.Прейскурант = ДокументСсылка.Контрагент;
	ДокументУстановкаЦен.Заполнить(ДокументСсылка);
	
	#Если Клиент Тогда
	ОткрытьЗначение(ДокументУстановкаЦен);
	#КонецЕсли
	
КонецФункции

// Возвращает цену товара
//
// Параметры:
//  Прейскурант						 - СправочникСсылка.Прейскуранты		 - тип цен для которого получаем цену
//  Номенклатура					 - СправочникСсылка.Номенклатура		 - товар для которого цена получается
//  НаМомент						 - Дата, МоментВремени, ДокументСсылка	 - на какой момент получаем цену, если неопределен,
//  	то на конец рабочей даты
//  ХарактеристикаНоменклатуры		 - СправочникСсылка.ХарактеристикиНоменклатуры	 - По умолчанию Неопределено
//  ЕдиницаИзмерения				 - СправочникСсылка.ЕдиницыИзмерения			 - По умолчанию Неопределено
//  ПересчитыватьЦенуИзДругихЕдиниц	 - Булево										 - По умолчанию Истина
// 
// Возвращаемое значение:
//  Число - Объект со свойством "Цена", в который помещается найденная цена номенклатуры либо 0, если цена не найдена.
//
Функция ПолучитьЦену(Прейскурант, Знач Номенклатура,Знач НаМомент=Неопределено, ХарактеристикаНоменклатуры=Неопределено, ЕдиницаИзмерения=Неопределено, ПересчитыватьЦенуИзДругихЕдиниц = Истина) Экспорт
	 			
	Если Не ЗначениеЗаполнено(Номенклатура)
		 И	(ЗначениеЗаполнено(Прейскурант) Или ТипЗнч(Прейскурант) = Тип("СправочникСсылка.Контрагенты"))  
	Тогда 
		Возврат Новый Структура("Цена",0);
	КонецЕсли;
	
	// Определим на какой момент получаем цену.
	НаМомент=?(НаМомент=Неопределено,КонецДня(ТекущаяДатаСеанса()),НаМомент);
	// Проверим, а не на документ ли получаем цену.
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(НаМомент)) Тогда
		// Если документ еще не записан, то получим цену на дату документа, иначе на момент времени.
		НаМомент=?(ЗначениеЗаполнено(НаМомент),НаМомент.МоментВремени(),КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Сертификаты") Тогда
		Номенклатура = Номенклатура.ВидСертификата;
	КонецЕсли;
	
	// Цену надо получать. формируем структуру отбора.
	СтруктураОтбора=Новый Структура("Прейскурант, Номенклатура",Прейскурант, Номенклатура);
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
	Иначе
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения",ЕдиницаИзмерения);
	Иначе
		СтруктураОтбора.Вставить("ЕдиницаИзмерения",Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	// Получаем таблицу цен
	СрезЦен = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(НаМомент,СтруктураОтбора);
	Если СрезЦен.Количество()=0 и ЗначениеЗаполнено(СтруктураОтбора.ХарактеристикаНоменклатуры) Тогда
		СтруктураОтбора.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СрезЦен = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(НаМомент,СтруктураОтбора);
	КонецЕсли;
	
	Если СрезЦен.Количество() = 0 Тогда
		
		Если  ПересчитыватьЦенуИзДругихЕдиниц 
			И ЗначениеЗаполнено(ЕдиницаИзмерения) 
		Тогда
			// Пробуем получить цену по ЕХО.
			Если СтруктураОтбора.ЕдиницаИзмерения <> Номенклатура.ЕдиницаХраненияОстатков Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения",Номенклатура.ЕдиницаХраненияОстатков);
				СрезЦен = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(НаМомент,СтруктураОтбора);
			КонецЕсли;
			
			Если  СрезЦен.Количество() = 0 
				И ЗначениеЗаполнено(Номенклатура.ЕдиницаТоваров)
				И СтруктураОтбора.ЕдиницаИзмерения <> Номенклатура.ЕдиницаТоваров
			Тогда
				// Пробуем получить цену по ед. товаров.
				Если СтруктураОтбора.ЕдиницаИзмерения <> Номенклатура.ЕдиницаТоваров Тогда
					СтруктураОтбора.Вставить("ЕдиницаИзмерения",Номенклатура.ЕдиницаТоваров);
					СрезЦен = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(НаМомент,СтруктураОтбора);
				КонецЕсли;
			КонецЕсли;
			
			Если СрезЦен.Количество() <> 0 Тогда
				СрезЦен[0].Цена = СрезЦен[0].Цена / СтруктураОтбора.ЕдиницаИзмерения.Коэффициент * ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;			
		КонецЕсли;

	КонецЕсли;
	
	Если СрезЦен.Количество() = 0 Тогда
		Возврат Новый Структура("Цена",0); 
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СрезЦен[0]);
	КонецЕсли;
	
КонецФункции

// Возвращает единицу товаров номенклатуры, если она указана, в противном случае - единицу хранения остатков.
//
// Параметры:
//  Номенклатура			 - СправочникСсылка.Номенлатура		 - номенклатура, чью единицу измерения требуется получить.
//  ТекущаяЕдиницаИзмерения	 - СправочникСсылка.ЕдиницыИзмерения - текущая единица. Если подходит, то возвращается.
// 
// Возвращаемое значение:
//   СправочникСсылка.ЕдиницыИзмерения.
//
Функция ПолучитьЕдиницуПродажиНоменклатуры(Номенклатура, ТекущаяЕдиницаИзмерения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяЕдиницаИзмерения) Или ТекущаяЕдиницаИзмерения.Владелец <> Номенклатура Тогда
		
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Если ЗначениеЗаполнено(Номенклатура) 
			И Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал
		Тогда
			Если ЗначениеЗаполнено(Номенклатура.ЕдиницаТоваров) Тогда
				ЕдиницаИзмерения = Номенклатура.ЕдиницаТоваров;
			Иначе
				ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
		КонецЕсли;
		Возврат ЕдиницаИзмерения;
	Иначе
		Возврат ТекущаяЕдиницаИзмерения;
	КонецЕсли;
	
КонецФункции

// Функция - Получить цены номенклатуры
//
// Параметры:
//  ТаблицаНоменклатуры	 - ТаблицаЗначений	 - таблица номенклатуры.
//  Дата				 - Дата	 - дата цены.
//  Прейскурант			 - СправочникСсылка.Прейскуранты - тип цен.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьЦеныНоменклатуры(ТаблицаНоменклатуры, Дата = Неопределено, Прейскурант) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	КолонкаУпаковкиПереименована = Ложь;
	Если ТаблицаНоменклатуры.Колонки.Найти("Упаковка") <> Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.Упаковка.Имя = "ЕдиницаИзмерения";	
		КолонкаУпаковкиПереименована = Истина;
	КонецЕсли;
	
	КолонкаХарактеристикаПереименована = Ложь;
	Если ТаблицаНоменклатуры.Колонки.Найти("ХарактеристикаНоменклатуры") <> Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.ХарактеристикаНоменклатуры.Имя = "Характеристика";	
		КолонкаХарактеристикаПереименована = Истина;
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("Цена") = Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	
	СписокНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку(ТаблицаНоменклатуры.Колонки.Найти("Номенклатура"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Прейскурант = &Прейскурант
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура УБЫВ,
	|	Характеристика УБЫВ";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	
	Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
	Запрос.УстановитьПараметр("Прейскурант",Прейскурант);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("Номенклатура, ЕдиницаИзмерения");
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатуры.Цена) Тогда
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаНоменклатуры);

			Выборка.Сбросить();
			Пока Выборка.НайтиСледующий(Отбор) Цикл
				Если Выборка.Характеристика = СтрокаНоменклатуры.Характеристика
					Или Не ЗначениеЗаполнено(Выборка.Характеристика)
				Тогда
					СтрокаНоменклатуры.Цена = Выборка.Цена;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
	Если КолонкаУпаковкиПереименована Тогда
		ТаблицаНоменклатуры.Колонки.ЕдиницаИзмерения.Имя = "Упаковка";	
	КонецЕсли;
	
	Если КолонкаХарактеристикаПереименована Тогда
		ТаблицаНоменклатуры.Колонки.Характеристика.Имя = "ХарактеристикаНоменклатуры";	
	КонецЕсли;
		
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

Функция ПолучитьНоменклатуруИмеющуюЦены(Прейскурант, Дата = '00010101', НоменклатураОтбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Прейскурант", Прейскурант);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("НоменклатураОтбор", НоменклатураОтбор);
	Запрос.УстановитьПараметр("НетНоменклатурыОтбора", Не ЗначениеЗаполнено(НоменклатураОтбор));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Цены.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&Дата,
	               |			Прейскурант = &Прейскурант
	               |				И (&НетНоменклатурыОтбора ИЛИ Номенклатура В (&НоменклатураОтбор)))
				   |	КАК Цены
	               |ГДЕ
	               |	Цены.Цена > 0";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

#КонецОбласти