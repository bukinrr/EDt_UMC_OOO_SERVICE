#Область ПрограммныйИнтерфейс

// Процедура проверяет условие проверки и, если оно не выполняется, вызывает исключение.
//
// Параметры:
//   УсловиеПроверки - Булево - Условие, котрое должно иметь значение Истина.
//   Сообщение - Строка - Сообщение, которое будет выдаваться вместе с исключением.
Процедура ВыполнитьПроверкуССообщением(УсловиеПроверки, Сообщение) Экспорт
	
	// Проверяем условие, при необходимости вызываем исключение.
	Если Не УсловиеПроверки = Истина Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		ВызватьИсключение (Сообщение);
	КонецЕсли;
	
КонецПроцедуры

// Конвертирует строку ФИО в структуру строк с ключами Фамилия, Имя, Отчество.
//
// Параметры:
//  ФИО	 - Строка - например, "Сергеев Сергей Сергеевич".
// 
// Возвращаемое значение:
//  Структура. 
//
Функция ФИОСтруктураИзСтроки(Знач СтрокаФИО) Экспорт
	
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество");
	
	ФИО = СтрРазделить(СокрЛП(СтрокаФИО), " ", Ложь);
	Если ФИО.Количество() > 0 Тогда
		СтруктураФИО["Фамилия"] = ФИО[0];
	КонецЕсли;
	Если ФИО.Количество() > 1 Тогда
		СтруктураФИО["Имя"] = ФИО[1];
	КонецЕсли;
	Если ФИО.Количество() > 2 Тогда
		СтруктураФИО["Отчество"] = ФИО[2];
	КонецЕсли;
	
	Возврат СтруктураФИО;
	
КонецФункции

// Получает возраст пациента в поля структуры.
//
// Параметры:
//   ДатаРождения - Дата - Дата, от которой начинается счет возраста.
//   ДатаСреза - Дата - Дата, на которую нужно получить возраст. 
//
// Возвращаемое значение:
//   Структура:
//		*	Лет - Число
//		*	Месяцев - Число
//		*	Дней - Число
//		*	Часов - Число.
Функция ВозрастСтруктурой(ДатаРождения,ДатаСреза = Неопределено) Экспорт
	Перем Часов, КонечнаяДата, Лет, Месяцев, Дней;
	
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		КонечнаяДата=?(ЗначениеЗаполнено(ДатаСреза),ДатаСреза,ТекущаяДата());
		
		РазобратьРазностьДат(КонечнаяДата,ДатаРождения,Лет,Месяцев,Дней);
		
		Если Лет = 0 И Месяцев = 0 И Дней = 0 Тогда
			Часов = Окр ((КонечнаяДата - ДатаРождения)/3600,0);
		КонецЕсли;
	Иначе
		Лет		= 0;
		Месяцев = 0;
		Дней	= 0;
		Часов	= 0;
	КонецЕсли;
	
	Возврат Новый Структура("Лет,Месяцев,Дней,Часов",Лет,Месяцев,Дней,Часов);
КонецФункции

// Процедура КонкатенацияСтрок.
//
// Параметры:
//  Приемник - Неопределено
//  Источник - Неопределено
//  Разделитель - Строка - По умолчанию ", "
//  ДобавлятьТолькоЗаполненныйИсточник - Булево - По умолчанию Ложь
//
Процедура КонкатенацияСтрок(Приемник, Источник, Разделитель = ", ", ДобавлятьТолькоЗаполненныйИсточник = Ложь) Экспорт
	
	Если Не ДобавлятьТолькоЗаполненныйИсточник Или ЗначениеЗаполнено(Источник) Тогда
		Приемник = Приемник + ?(ПустаяСтрока(Приемник), "", Разделитель) + Источник;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает первое заплненное значение из переданных
//
// Параметры:
//  Значение1	 - Произвольный - значние.
//  Значение2	 - Произвольный - значние.
//  Значение3	 - Произвольный - значние.
//  Значение4	 - Произвольный - значние.
//  Значение5	 - Произвольный - значние.
// 
// Возвращаемое значение:
//  Произвольный - первое заполненное значение.
//
Функция ЗаполненноеЗначение(Значение1, Значение2, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Значение1) Тогда
		Возврат Значение1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение2) Тогда
		Возврат Значение2;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение3) Тогда
		Возврат Значение3;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение4) Тогда
		Возврат Значение4;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение5) Тогда
		Возврат Значение5;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область УниверсальныеКоллекции

// Возвращает значение реквизита или свойства объекта.
//
// Параметры:
//  Объект				 - Произвольный	 - Объект, предполагающий доступ по [] к атрибутам объекта.
//  Свойство			 - Строка		 - Имя свойства.
//  ЗначениеПоУмолчанию	 - Произвольный	 - Значение по умолчанию, если свойства нет у объекта.
// 
// Возвращаемое значение:
//  Произвольный.
//
Функция СвойствоОбъекта(Объект, Свойство, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, Свойство) Тогда
		Возврат Объект[Свойство];
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

// Инициализирует новый массив заданными значениями
//
// Параметры:
//  Значение1	 - Произвольный	 - значение инициализации.
//  Значение2	 - Произвольный	 - значение инициализации.
//  Значение3	 - Произвольный	 - значение инициализации.
//  Значение4	 - Произвольный	 - значение инициализации.
//  Значение5	 - Произвольный	 - значение инициализации.
//  Значение6	 - Произвольный	 - значение инициализации.
//  Значение7	 - Произвольный	 - значение инициализации.
//  Значение8	 - Произвольный	 - значение инициализации.
//  Значение9	 - Произвольный	 - значение инициализации.
//  Значение10	 - Произвольный	 - значение инициализации.
// 
// Возвращаемое значение:
//  Массив.
//
Функция НовыйМассив(Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено,
					Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено, Значение10 = Неопределено) Экспорт
	
	Массив = Новый Массив;
	
	Если Значение1 <> Неопределено Тогда
		Массив.Добавить(Значение1);
	КонецЕсли;
	
	Если Значение2 <> Неопределено Тогда
		Массив.Добавить(Значение2);
	КонецЕсли;
	
	Если Значение3 <> Неопределено Тогда
		Массив.Добавить(Значение3);
	КонецЕсли;
	
	Если Значение4 <> Неопределено Тогда
		Массив.Добавить(Значение4);
	КонецЕсли;
	
	Если Значение5 <> Неопределено Тогда
		Массив.Добавить(Значение5);
	КонецЕсли;
	
	Если Значение6 <> Неопределено Тогда
		Массив.Добавить(Значение6);
	КонецЕсли;
	
	Если Значение7 <> Неопределено Тогда
		Массив.Добавить(Значение7);
	КонецЕсли;
	
	Если Значение8 <> Неопределено Тогда
		Массив.Добавить(Значение8);
	КонецЕсли;
	
	Если Значение9 <> Неопределено Тогда
		Массив.Добавить(Значение9);
	КонецЕсли;
	
	Если Значение10 <> Неопределено Тогда
		Массив.Добавить(Значение10);
	КонецЕсли;
	
	Возврат Массив
	
КонецФункции

// Организация, соответствующая переданному Филиалу или документу.
//
// Параметры:
//  Ссылка	 - ДокументСсылка, СправочникСсылка.Филиалы	 - документ или филиал.
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации - организация.
//
Функция ОрганизацияОбъекта(Ссылка) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Филиалы") Тогда
			Возврат ДопСерверныеФункции.ПолучитьРеквизит(Ссылка, "Организация");
		Иначе
			Возврат РаботаСДокументамиСервер.ОрганизацияДокумента(Ссылка);
		КонецЕсли;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Комбинаторика

Функция ПолучитьСочетанияЭлементовМассива(ИсходныйМассив, КоличествоЭлементовВСочетании) Экспорт
	
	ВсегоЭлементов = ИсходныйМассив.Количество();
	Если КоличествоЭлементовВСочетании > ВсегоЭлементов Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИтоговыйМассив = Новый Массив;
	
	МассивИндексов = Новый Массив;
	Для сч = 0 По ВсегоЭлементов-1 Цикл
		МассивИндексов.Добавить(сч);
	КонецЦикла;
	
	ДобавитьВИтоговыйМассив(ИтоговыйМассив, ИсходныйМассив, МассивИндексов, КоличествоЭлементовВСочетании);
	Пока СледующийНабор(МассивИндексов, ВсегоЭлементов, КоличествоЭлементовВСочетании) Цикл
		ДобавитьВИтоговыйМассив(ИтоговыйМассив, ИсходныйМассив, МассивИндексов, КоличествоЭлементовВСочетании);
	КонецЦикла;
	
	Возврат ИтоговыйМассив;
	
КонецФункции

Процедура ДобавитьВИтоговыйМассив(ИтоговыйМассив, ИсходныйМассив, МассивИндексов, КоличествоЭлементовВСочетании)
	
	МассивСочетания = Новый Массив;
	Для сч = 0 По КоличествоЭлементовВСочетании - 1 Цикл
		МассивСочетания.Добавить(ИсходныйМассив[МассивИндексов[сч]]);
	КонецЦикла;
	ИтоговыйМассив.Добавить(МассивСочетания);
	
КонецПроцедуры

Функция СледующийНабор(МассивИндексов, ВсегоЭлементов, КоличествоЭлементовВСочетании)
	
	сч = КоличествоЭлементовВСочетании - 1;
	Пока сч >= 0 Цикл
		Если МассивИндексов[сч] < ВсегоЭлементов - КоличествоЭлементовВСочетании + сч Тогда
			МассивИндексов[сч] = МассивИндексов[сч] + 1;
			Для сч1 = сч + 1 По КоличествоЭлементовВСочетании - 1 Цикл
				МассивИндексов[сч1] = МассивИндексов[сч1 - 1] + 1;				
			КонецЦикла;
			Возврат Истина
		КонецЕсли;
		сч = сч - 1
	КонецЦикла;
	Возврат Ложь
	
КонецФункции

#КонецОбласти

Процедура ДобавитьРасшифровки(ТабличныйДокумент) Экспорт
	
	Области = Новый Соответствие;
	Для Строка = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		Для Колонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ТекОбласть = ТабличныйДокумент.Область(Строка, Колонка);
			
			Если Области.Получить(ТекОбласть.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Области.Вставить(ТекОбласть.Имя, Ложь);
			
			Если ЗначениеЗаполнено(ТекОбласть.ПараметрРасшифровки) Тогда
				ТекОбласть.Расшифровка = Новый Структура("ПараметрРасшифровки", ТекОбласть.ПараметрРасшифровки);
				Продолжить;
			КонецЕсли;
			
			СтрокаПараметров = Неопределено;
			Если ТабличныйДокумент.ПолучитьОбласть(ТекОбласть.Имя).Параметры.Количество() > 0 Тогда
				Если ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
					СтрокаПараметров = ТекОбласть.Текст;
				ИначеЕсли ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
					СтрокаПараметров = ТекОбласть.Параметр;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПараметров = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Синонимы = Неопределено;
			СпискиВыбора = Неопределено;
			ИмяФормыЗаполнения = Неопределено;
			СтандартнаяОбработка = Ложь;
			
			Если ЗначениеЗаполнено(ТекОбласть.Примечание.Текст) Тогда
				Попытка
					ДанныеПримечания = ОбщегоНазначенияПереопределяемый.ПрочитатьСтрокуJSON(ТекОбласть.Примечание.Текст, Истина);
					Синонимы = ДанныеПримечания.Получить("Синонимы");
					СпискиВыбора = ДанныеПримечания.Получить("СпискиВыбора");
					ТекОбласть.Примечание.Текст = ДанныеПримечания.Получить("Примечание");
					ИмяФормыЗаполнения = ДанныеПримечания.Получить("ИмяФормыЗаполнения");
					СтандартнаяОбработка = ДанныеПримечания.Получить("СтандартнаяОбработка") = Истина;
				Исключение КонецПопытки;
			КонецЕсли;
			
			Если СтандартнаяОбработка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Синонимы = Неопределено Тогда
				Синонимы = Новый Соответствие;
			КонецЕсли;
			
			Если СпискиВыбора = Неопределено Тогда
				СпискиВыбора = Новый Соответствие;
			КонецЕсли;
			
			ТекОбласть.Расшифровка = Новый Структура("СтрокаПараметров, Синонимы, СпискиВыбора, ИмяФормыЗаполнения", СтрокаПараметров, Синонимы, СпискиВыбора, ИмяФормыЗаполнения);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Дает массив элементов коллекции, удовлетворяющих отбору.
//
// Параметры:
//  Коллекция	 - Массив - коллекция, содержащая элементы с атрибутами, соответсвующими ключам отбора.
//  Отбор		 - Структура - отбор элементов коллекции.
// 
// Возвращаемое значение:
//  Массив из Произвольный - массив элементов коллекции.
//
Функция НайтиСтрокиКоллекции(Коллекция, Отбор) Экспорт
	
	НайденныеСтроки = Новый Массив;
	
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		СоответствуетОтборам = Истина;
		
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если СтрокаКоллекции[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение Тогда
				СоответствуетОтборам = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СоответствуетОтборам Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

// Находит первый элемент коллекции, удовлетворяющий отбору.
//
// Параметры:
//  Коллекция	 - Массив - коллекция, содержащая элементы с атрибутами, соответсвующими ключам отбора.
//  Отбор		 - Структура - отбор элементов коллекции.
// 
// Возвращаемое значение:
//  Произвольный - элемент коллекции.
//
Функция НайтиСтрокуКоллекции(Коллекция, Отбор) Экспорт
	
	СтрокиПоОтбору = НайтиСтрокиКоллекции(Коллекция, Отбор);
	
	Если СтрокиПоОтбору.Количество() <> 0 Тогда
		Возврат СтрокиПоОтбору[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДатаВремя

// Вычисляет количество лет, месяцев и дней между двумя датами.
//
// Параметры:
//   Дата1 -Дата - первая дата (более поздняя, часто текущая, стаж определяется по состоянию на эту дату).
//   Дата2 - Дата - вторая дата (ранняя дата, с нее начинается "течение" стажа).
//   Лет - Число - возвращается по ссылке кол-во лет между двумя датами (Дата1-Дата2).
//   Месяцев - Число - возвращается по ссылке кол-во месяцев между двумя датами (Дата1-Дата2).
//   Дней - Число - возвращается по ссылке кол-во дней между двумя датами (Дата1-Дата2).
Процедура РазобратьРазностьДат(Дата1, Дата2, Лет = 0, Месяцев = 0, Дней = 0)
	
	Лет		= 0;
	Месяцев	= 0;
	Дней	= 0;
	Если Дата1 > Дата2 Тогда
		
		ВременнаяДата = Дата1;
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата,-1))/86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-1);
		КонецЕсли;
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-12);
			Месяцев = 12;
		КонецЕсли;
		Лет		= Макс(			 Год(ВременнаяДата)		- Год(Дата2),	0);
		Месяцев	= Макс(Месяцев	+ Месяц(ВременнаяДата)	- Месяц(Дата2),	0);
		Дней	= Макс(Дней		+ День(ВременнаяДата)	- День(Дата2),	0);
		
		// Скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах.
		Если НачалоДня(Дата2) <> НачалоДня((ДобавитьМесяц(Дата1,-Лет*12-Месяцев)-Дней*86400)) Тогда
			Дней = Дней + (День(КонецМесяца(Дата2)) - День(НачалоМесяца(Дата2))) - (День(КонецМесяца(ДобавитьМесяц(Дата1,-1))) - День(НачалоМесяца(ДобавитьМесяц(Дата1,-1))));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТабличныйДокумент

Процедура УдалитьРисунокИзТабличногоДокумента(ТабличныйДокумент, ИмяРисунка) Экспорт
	
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		Если Рисунок.Имя = ИмяРисунка Тогда
			ТабличныйДокумент.Рисунки.Удалить(Рисунок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПримечанияИРасшифровкиИзТабличногоДокументаПередПодписанием(ТабличныйДокумент) Экспорт
	
	Области = Новый Массив;
	Для Строка = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		Для Колонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ТекОбласть = ТабличныйДокумент.Область(Строка, Колонка);
			
			Если Области.Найти(ТекОбласть.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Области.Добавить(ТекОбласть.Имя);
			
			ТекОбласть.Примечание.Текст = "";
			Если Не (ЗначениеЗаполнено(ТекОбласть.Расшифровка)
					И ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура")
					И ТекОбласть.Расшифровка.Свойство("ПараметрРасшифровки"))
			Тогда
				ТекОбласть.Расшифровка = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
