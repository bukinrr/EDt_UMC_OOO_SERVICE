///////////////////////////////////////////////////////////////////
// РАБОТА С МЕХАНИЗМОМ ЗАДАЧ И НАПОМИНАНИЙ

#Область ПрограммныйИнтерфейс

// Фукнция возвращает допустимые варианты интервалов напоминаний
//
// Возвращаемое значение:
//	СписокЗначений
//
Функция ПолучитьСписокИнтерваловНапоминания() Экспорт
	
	СписокИнтервалов = Новый СписокЗначений;
	СписокИнтервалов.Добавить(5*60,"5 мин.");
	СписокИнтервалов.Добавить(10*60,"10 мин.");
	СписокИнтервалов.Добавить(15*60,"15 мин.");
	СписокИнтервалов.Добавить(30*60,"30 мин.");
	СписокИнтервалов.Добавить(1*60*60,"1 час");
	СписокИнтервалов.Добавить(2*60*60,"2 часа");
	СписокИнтервалов.Добавить(4*60*60,"4 часа");
	СписокИнтервалов.Добавить(8*60*60,"8 часов");
	СписокИнтервалов.Добавить(1*24*60*60,"1 день");
	СписокИнтервалов.Добавить(2*24*60*60,"2 дня");
	СписокИнтервалов.Добавить(3*24*60*60,"3 дня");
	СписокИнтервалов.Добавить(4*24*60*60,"4 дня");
	СписокИнтервалов.Добавить(1*7*24*60*60,"1 неделя");
	Возврат СписокИнтервалов;
	
КонецФункции

// Процедура автоматическог оформирования задач напоминания о днях рождений клиентов
//
// Параметры:
//	Нет
//
Процедура СформироватьАвтоматическиеЗадачиПользователя()  Экспорт
	
	// Дни рождения клиентов
	Если ПравоДоступа("Просмотр",Метаданные.Справочники.Клиенты) Тогда
		ЗаполнитьДР();
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр",Метаданные.Справочники.Сертификаты) Тогда
		ЗаполнитьПоОкончаниюСроковДействияСертификатов();
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр",Метаданные.Справочники.Клиенты) И ПравоДоступа("Просмотр",Метаданные.Документы.ОказаниеУслуг) Тогда
		ЗаполнитьПоПоследнемуВизитуВФилиале();
	КонецЕсли;
	
	// Прочие автоматические события
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЗадач.ВидЗадач КАК ВидЗадач,
	|	ВидыЗадач.НапоминатьОЗадаче,
	|	ДатыСобытийОбъектов.Объект,
	|	ДатыСобытийОбъектов.Дата,
	|	ВидыЗадач.ЗапасДнейПриСозданииЗадачи,
	|	ВидыЗадач.НаименованиеПолное
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыЗадачИНапоминаний.Ссылка КАК ВидЗадач,
	|		ВидыЗадачИНапоминаний.НапоминатьОЗадаче КАК НапоминатьОЗадаче,
	|		ВидыЗадачИНапоминаний.ЗапасДнейПриСозданииЗадачи КАК ЗапасДнейПриСозданииЗадачи,
	|		ВидыЗадачИНапоминаний.НаименованиеПолное КАК НаименованиеПолное
	|	ИЗ
	|		ПланВидовХарактеристик.ВидыЗадачИНапоминаний КАК ВидыЗадачИНапоминаний
	|	ГДЕ
	|		ВидыЗадачИНапоминаний.АвтоматическиФормироватьЗадачи) КАК ВидыЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыСобытийОбъектов КАК ДатыСобытийОбъектов
	|		ПО ВидыЗадач.ВидЗадач = ДатыСобытийОбъектов.ВидСобытия
	|			И (&ТекущаяДата <= ДОБАВИТЬКДАТЕ(ДатыСобытийОбъектов.Дата, ГОД, 4 - ГОД(ДатыСобытийОбъектов.Дата)))
	|			И (ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВидыЗадач.ЗапасДнейПриСозданииЗадачи) >= ДОБАВИТЬКДАТЕ(ДатыСобытийОбъектов.Дата, ГОД, 4 - ГОД(ДатыСобытийОбъектов.Дата)))
	|			И (ВЫБОР
	|				КОГДА ДатыСобытийОбъектов.ОднократноеСобытие
	|					ТОГДА &ТекущийГод = ГОД(ДатыСобытийОбъектов.Дата)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)"
	;
	
	ТекДата = ТекущаяДата();
	Запрос.УстановитьПараметр("ТекущийГод",Год(ТекДата));
	
	ТекДата = Дата( 4, Месяц(ТекДата),День(ТекДата));
	Запрос.УстановитьПараметр("ТекущаяДата",ТекДата);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаЗадачи Из ТаблицаРезультат Цикл
		СтрокаЗадачи.Дата = ПолучитьДатуВТекущемГоду(СтрокаЗадачи.Дата);
		СоздатьЗадачу(СтрокаЗадачи)
	КонецЦикла;
	
	Если ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактамиПереопределяемый") <> Неопределено Тогда
		Попытка
			Выполнить("УправлениеКонтактамиПереопределяемый.СформироватьПереопределяемыеЗадачи()");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура автоматическог оформирования задач напоминания о днях рождений клиентов
//
// Параметры:
//	Нет
//
Процедура ЗаполнитьДР()  Экспорт
	
	Если ПланыВидовХарактеристик.ВидыЗадачИНапоминаний.ДеньРождения.АвтоматическиФормироватьЗадачи Тогда
		
		Запрос=новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	Клиенты.ДатаРождения КАК Дата,
		             |	Клиенты.Фамилия,
		             |	Клиенты.Имя,
		             |	Клиенты.Отчество,
		             |	Клиенты.Ссылка КАК Объект,
		             |	ИСТИНА КАК НапоминатьОЗадаче,
		             |	ВидыЗадач.Ссылка КАК ВидЗадач,
		             |	ВидыЗадач.ЗапасДнейПриСозданииЗадачи,
		             |	ВидыЗадач.НаименованиеПолное
		             |ИЗ
		             |	Справочник.Клиенты КАК Клиенты
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыЗадачИНапоминаний КАК ВидыЗадач
		             |		ПО (Клиенты.НапоминатьОДР) И Клиенты.ДатаРождения <> &ПустаяДата 
		             |			И (ВидыЗадач.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыЗадачИНапоминаний.ДеньРождения))
		             |			И (&ТекущаяДата <= ДОБАВИТЬКДАТЕ(Клиенты.ДатаРождения, ГОД, 4 - ГОД(Клиенты.ДатаРождения)))
		             |			И (ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВидыЗадач.ЗапасДнейПриСозданииЗадачи) >= ДОБАВИТЬКДАТЕ(Клиенты.ДатаРождения, ГОД, 4 - ГОД(Клиенты.ДатаРождения)))";
		
		ТекДатаБезГода = ТекущаяДата();
		ТекДатаБезГода = Дата( 4, Месяц(ТекДатаБезГода),День(ТекДатаБезГода)); // Первый високосный год
		
		Запрос.УстановитьПараметр("ТекущаяДата",ТекДатаБезГода);
		Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1));
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаЗадачи Из ТаблицаРезультат Цикл
			СтрокаЗадачи.Дата = ПолучитьДатуВТекущемГоду(СтрокаЗадачи.Дата);
			СоздатьЗадачу(СтрокаЗадачи)
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

// Процедура проверяет задачи текущего пользователя связанные с заданным объектом
//
// Параметры:
//	СтруктураЗадачи - структура параметров задачи
//
Процедура СоздатьЗадачу(СтруктураЗадачи) Экспорт
	
	ТекущийГод = Строка(Формат(Год(ТекущаяДата()),"ЧГ=0"));
	ДатаЗадачи = СтруктураЗадачи.Дата;
		
	Если СтруктураЗадачи.ВидЗадач = ПланыВидовХарактеристик.ВидыЗадачИНапоминаний.ДлительныйСрокОтсутствияВКлинике
		Или Не ЕстьЭквивалентнаяЗадача(СтруктураЗадачи, ДатаЗадачи)
	Тогда
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.ВидЗадачиНапоминания = СтруктураЗадачи.ВидЗадач;
		НоваяЗадача.Объект       = СтруктураЗадачи.Объект;
		Если ТипЗнч(СтруктураЗадачи.Объект) = Тип("СправочникСсылка.Клиенты") Тогда
			ПредставлениеОбъекта = ОбщегоНазначения.ФамилияИнициалыФизЛица("" + СтруктураЗадачи.Объект.Фамилия+" "+СтруктураЗадачи.Объект.Имя+" "+СтруктураЗадачи.Объект.Отчество);
		ИначеЕсли ТипЗнч(СтруктураЗадачи.Объект) = Тип("СправочникСсылка.Сертификаты") Тогда
			ПредставлениеОбъекта = СтруктураЗадачи.Объект.Наименование;
		Иначе
			ПредставлениеОбъекта = Строка(СтруктураЗадачи.Объект);
		КонецЕсли;
		НоваяЗадача.Наименование = Строка(СтруктураЗадачи.ВидЗадач) + ": " + ПредставлениеОбъекта+".";
		НоваяЗадача.Оповещение	 = СтруктураЗадачи.НапоминатьОЗадаче;
		НоваяЗадача.Описание     = СтруктураЗадачи.НаименованиеПолное;
		НоваяЗадача.Дата=ТекущаяДата();
		
		НоваяЗадача.Выполнена = Ложь;
		
		ВремяОкончания = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяОкончанияРаботы");
		Если Не ЗначениеЗаполнено(ВремяОкончания) Тогда
			ВремяОкончания = КонецДня(ВремяОкончания);
		КонецЕсли;
		НоваяЗадача.СрокИсполнения = НачалоДня(Дата(ДатаЗадачи)) + ОбщегоНазначения.ВремяВСекунды(ВремяОкончания);
		
		Если СтруктураЗадачи.НапоминатьОЗадаче Тогда
			
			СрокОповещения = Дата(ДатаЗадачи) - СтруктураЗадачи.ВидЗадач.ЗапасДнейПриСозданииЗадачи * 86400			                  
			                 + ОбщегоНазначения.ВремяВСекунды(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы"));
			
			Если СрокОповещения < ТекущаяДата() Тогда
				СрокОповещения = ТекущаяДата() + 600;
			КонецЕсли;					
			
			НоваяЗадача.СрокОповещения	= СрокОповещения;
		КонецЕсли;
		
		Если ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактамиПереопределяемый") <> Неопределено Тогда
			Попытка
				Выполнить("УправлениеКонтактамиПереопределяемый.ЗаполнитьКонтактноеЛицоЗадачи(НоваяЗадача)");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		НоваяЗадача.Записать();
	КонецЕсли;	
	
КонецПроцедуры

// Функция проверки задачи на повторяемость 
// Не применяется для предопределенного вида задачи "ДлительныйСрокОтсутствияВКлинике" 
//
// Параметры:
//	СтруктураЗадачи - структура параметров задачи
//
// Возвращаемое занчение:
//	Булево
//
Функция ЕстьЭквивалентнаяЗадача(СтруктураЗадачи, ДатаЗадачи)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.ВидЗадачиНапоминания = &ВидЗадачи
	|	И ЗадачиПользователя.Объект = &Объект
	|	И НАЧАЛОПЕРИОДА(ЗадачиПользователя.СрокИсполнения, ДЕНЬ) = &СрокИсполнения";
	
	Запрос.УстановитьПараметр("СрокИсполнения", НачалоДня(ДатаЗадачи));
	Запрос.УстановитьПараметр("Объект",СтруктураЗадачи.Объект);
	Запрос.УстановитьПараметр("ВидЗадачи",СтруктураЗадачи.ВидЗадач);
	
	Рез = Запрос.Выполнить();
	
	Возврат Не Рез.Пустой();

КонецФункции

// Заполняет по окончанию сроков действия сертификатов
//
// Параметры:
//
Процедура ЗаполнитьПоОкончаниюСроковДействияСертификатов()  Экспорт
	
	ВидЗадачОкончаниеСрокаСертификата = ПланыВидовХарактеристик.ВидыЗадачИНапоминаний.ОкончаниеСрокаСертификата;
	Если ВидЗадачОкончаниеСрокаСертификата.АвтоматическиФормироватьЗадачи Тогда
		
		мсВидыСОтносительнымСроком = Новый Массив;
		мсВидыСАбсолютнымСроком	   = Новый Массив;
		
		ВыбСпр = Справочники.ВидыСертификатов.Выбрать();
		Пока ВыбСпр.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыбСпр.СрокДействия) Тогда
				Если ТипЗнч(ВыбСпр.СрокДействия) = Тип("Число") Тогда
					мсВидыСОтносительнымСроком.Добавить(ВыбСпр.Ссылка);
				ИначеЕсли ТипЗнч(ВыбСпр.СрокДействия) = Тип("Дата") Тогда
					мсВидыСАбсолютнымСроком.Добавить(ВыбСпр.Ссылка);	
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	Сертификаты.Ссылка КАК Ссылка,
		             |	ВЫБОР
		             |		КОГДА Сертификаты.ВидСертификата В (&ВидыСОтносительнымСроком)
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК СрокОтносительный,
		             |	ВЫБОР
		             |		КОГДА Сертификаты.ВидСертификата В (&ВидыСАбсолютнымСроком)
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК СрокАбсолютный,
		             |	МИНИМУМ(НАЧАЛОПЕРИОДА(ОстаткиПоСертификатамОбороты.Период, ДЕНЬ)) КАК ДатаПродажи,
		             |	Сертификаты.ВидСертификата.СрокДействия КАК СрокДействия
		             |ПОМЕСТИТЬ Сертификаты
		             |ИЗ
		             |	РегистрНакопления.ОстаткиПоСертификатам.Обороты(, , День, ) КАК ОстаткиПоСертификатамОбороты
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сертификаты КАК Сертификаты
		             |		ПО (ОстаткиПоСертификатамОбороты.СуммаПриход > 0)
		             |			И ОстаткиПоСертификатамОбороты.Сертификат = Сертификаты.Ссылка
		             |			И (Сертификаты.ВидСертификата В (&ВидыСОтносительнымСроком)
		             |				ИЛИ Сертификаты.ВидСертификата В (&ВидыСАбсолютнымСроком))
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	Сертификаты.Ссылка,
		             |	ВЫБОР
		             |		КОГДА Сертификаты.ВидСертификата В (&ВидыСОтносительнымСроком)
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ,
		             |	ВЫБОР
		             |		КОГДА Сертификаты.ВидСертификата В (&ВидыСАбсолютнымСроком)
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ,
		             |	Сертификаты.ВидСертификата.СрокДействия
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	Сертификаты.Ссылка,
		             |	Сертификаты.СрокОтносительный,
		             |	Сертификаты.СрокАбсолютный,
		             |	Сертификаты.ДатаПродажи,
		             |	Сертификаты.СрокДействия,
		             |	ВЫБОР
		             |		КОГДА Сертификаты.СрокАбсолютный
		             |			ТОГДА Сертификаты.СрокДействия
		             |		КОГДА Сертификаты.СрокОтносительный
		             |			ТОГДА ДОБАВИТЬКДАТЕ(Сертификаты.ДатаПродажи, МЕСЯЦ, ВЫРАЗИТЬ(Сертификаты.СрокДействия КАК ЧИСЛО))
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК ДатаОкончанияДействия
		             |ПОМЕСТИТЬ СертификатыОкончания
		             |ИЗ
		             |	Сертификаты КАК Сертификаты
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	Сертификаты.Ссылка КАК Объект,
		             |	ВидыЗадач.НапоминатьОЗадаче КАК НапоминатьОЗадаче,
		             |	ВидыЗадач.Ссылка КАК ВидЗадач,
		             |	ВидыЗадач.ЗапасДнейПриСозданииЗадачи,
		             |	ВидыЗадач.НаименованиеПолное,
		             |	Сертификаты.ДатаОкончанияДействия КАК Дата
		             |ИЗ
		             |	СертификатыОкончания КАК Сертификаты
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыЗадачИНапоминаний КАК ВидыЗадач
		             |		ПО (ВидыЗадач.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыЗадачИНапоминаний.ОкончаниеСрокаСертификата))
		             |			И (ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВидыЗадач.ЗапасДнейПриСозданииЗадачи) >= Сертификаты.ДатаОкончанияДействия)
		             |			И (ДОБАВИТЬКДАТЕ(ВЫРАЗИТЬ(Сертификаты.ДатаОкончанияДействия КАК ДАТА), ДЕНЬ, ВидыЗадач.ЗапасДнейПриСозданииЗадачи) >= &ТекущаяДата)";
		
		Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
		Запрос.УстановитьПараметр("ВидыСАбсолютнымСроком"   ,мсВидыСАбсолютнымСроком);
		Запрос.УстановитьПараметр("ВидыСОтносительнымСроком",мсВидыСОтносительнымСроком);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СоздатьЗадачу(Результат)
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоследнемуВизитуВФилиале() Экспорт
	
	ВидЗадачДлительныйСрокОтсутствияВКлинике = ПланыВидовХарактеристик.ВидыЗадачИНапоминаний.ДлительныйСрокОтсутствияВКлинике;
	Если ВидЗадачДлительныйСрокОтсутствияВКлинике.АвтоматическиФормироватьЗадачи Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(НАЧАЛОПЕРИОДА(ОказаниеУслуг.Дата, ДЕНЬ)) КАК ДатаПоследнего,
		               |	ОказаниеУслуг.Клиент КАК Ссылка
		               |ПОМЕСТИТЬ Клиенты
		               |ИЗ
		               |	Документ.ОказаниеУслуг КАК ОказаниеУслуг
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОказаниеУслуг.Клиент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Клиенты.Ссылка КАК Объект,
		               |	ВидыЗадач.НапоминатьОЗадаче КАК НапоминатьОЗадаче,
		               |	ВидыЗадач.Ссылка КАК ВидЗадач,
		               |	ВидыЗадач.ЗапасДнейПриСозданииЗадачи,
		               |	ВидыЗадач.НаименованиеПолное,
		               |	Клиенты.ДатаПоследнего КАК ДатаПоследнегоКлиенты,
		               |	РАЗНОСТЬДАТ(Клиенты.ДатаПоследнего, &ТекущаяДата, ДЕНЬ) КАК ДнейСПосещения
		               |ПОМЕСТИТЬ Итого
		               |ИЗ
		               |	Клиенты КАК Клиенты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыЗадачИНапоминаний КАК ВидыЗадач
		               |		ПО (ВидыЗадач.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыЗадачИНапоминаний.ДлительныйСрокОтсутствияВКлинике))
		               |			И (ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -ВидыЗадач.ЗапасДнейПриСозданииЗадачи) >= Клиенты.ДатаПоследнего)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗадачиПользователя.Объект,
		               |	ЗадачиПользователя.Дата
		               |ПОМЕСТИТЬ ВТЗадачи
		               |ИЗ
		               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
		               |ГДЕ
		               |	ЗадачиПользователя.ПометкаУдаления = ЛОЖЬ
		               |	И ЗадачиПользователя.ВидЗадачиНапоминания = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыЗадачИНапоминаний.ДлительныйСрокОтсутствияВКлинике)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Итого.Объект,
		               |	Итого.НапоминатьОЗадаче,
		               |	Итого.ВидЗадач,
		               |	МАКСИМУМ(Итого.ЗапасДнейПриСозданииЗадачи) КАК ЗапасДнейПриСозданииЗадачи,
		               |	Итого.НаименованиеПолное,
		               |	Итого.ДатаПоследнегоКлиенты,
		               |	МАКСИМУМ(Итого.ДнейСПосещения) КАК ДнейСПосещения,
		               |	МАКСИМУМ(ЕСТЬNULL(ВТЗадачи.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Дата
		               |ПОМЕСТИТЬ ИтогоКлиенты
		               |ИЗ
		               |	Итого КАК Итого
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗадачи КАК ВТЗадачи
		               |		ПО Итого.Объект = ВТЗадачи.Объект
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Итого.НапоминатьОЗадаче,
		               |	Итого.ВидЗадач,
		               |	Итого.НаименованиеПолное,
		               |	Итого.ДатаПоследнегоКлиенты,
		               |	Итого.Объект
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Итого.Объект КАК Объект,
		               |	Итого.НапоминатьОЗадаче КАК НапоминатьОЗадаче,
		               |	Итого.ВидЗадач КАК ВидЗадач,
		               |	Итого.ЗапасДнейПриСозданииЗадачи,
		               |	Итого.НаименованиеПолное,
		               |	&ТекущаяДата КАК Дата,
		               |	ИтогоКлиенты.Дата КАК ДатаПоследнегоПосещения
		               |ИЗ
		               |	Итого КАК Итого
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогоКлиенты КАК ИтогоКлиенты
		               |		ПО (Итого.ВидЗадач = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыЗадачИНапоминаний.ДлительныйСрокОтсутствияВКлинике))
		               |			И Итого.Объект = ИтогоКлиенты.Объект
		               |			И (РАЗНОСТЬДАТ(ИтогоКлиенты.Дата, &ТекущаяДата, ДЕНЬ) >= ИтогоКлиенты.ДнейСПосещения)";

		Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());

		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СоздатьЗадачу(Результат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьВыполнениеЗадачиПослеДлительногоОтсуствияПриЗаписи(Источник, Отказ) Экспорт
		
	МетаданныеДоукмента = Источник.Метаданные();
	МетаданныеДоукмента = Метаданные.Документы.ОказаниеУслуг;
	
	// Тип "Проведение" не определен.
	Если Строка(МетаданныеДоукмента.Проведение) = "Запретить"
		Или Источник.Проведен
	Тогда
		УстановитьПривилегированныйРежим(Истина);
	
		Попытка
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачиПользователя.Ссылка
			|ИЗ
			|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
			|ГДЕ
			|	ЗадачиПользователя.ВидЗадачиНапоминания = &ВидЗадачи
			|	И ЗадачиПользователя.Объект = &Объект
			|	И НЕ ЗадачиПользователя.Выполнена";
			
			Запрос.УстановитьПараметр("Объект", Источник.Клиент);
			Запрос.УстановитьПараметр("ВидЗадачи", ПланыВидовХарактеристик.ВидыЗадачИНапоминаний.ДлительныйСрокОтсутствияВКлинике);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЗадачаОбъект.ВыполнитьЗадачу();
				
			КонецЦикла;
			
		Исключение
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуВТекущемГоду(ИсходнаяДата)
	
	// Нельзя получить 29 февраля невисокосного года.
	Если Месяц(ИсходнаяДата) = 2
		И День(ИсходнаяДата) = 29
		И День(КонецМесяца(Дата(Год(ТекущаяДата()), 2, 1))) <> 29 // Т.е. в этом году нет 29 февраля
	Тогда
		Дата = Дата(Год(ТекущаяДата()), 3, 1); // Первое марта
	Иначе
		Дата = Дата(Год(ТекущаяДата()), Месяц(ИсходнаяДата), День(ИсходнаяДата));
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

#КонецОбласти
