#Область СлужебныйПрограммныйИнтерфейс

//============================================================================================================
//============= Область Функций, вызываемых веб-сервисами ====================================================
//============================================================================================================

//Функция вызываемая веб-сервисом Integration.GetShedule и Integration.GetShedule20.
//
// Параметры:
//  ДатаНачала			 - Дата	 - дата начала
//  ДатаОкончания		 - Дата	 - дата окончания
//  ОписаниеОшибки		 - Строка - текст ошибки
//  ИнтеграцияССайтом	 - Булево - режим интеграции с сайтом
// 
// Возвращаемое значение:
//  Строка - xml-текст.
//
Функция ПолучитьГрафикиРаботыXML(ДатаНачала, ДатаОкончания, ОписаниеОшибки, ИнтеграцияССайтом = Ложь, ДопПараметры = Неопределено, ОписаниеОшибкиParams = "") Экспорт
	Попытка
		ГрафикиДляСайтаXDTO = ПолучитьГрафикиРаботыXDTO(ДатаНачала, ДатаОкончания, ОписаниеОшибки, ИнтеграцияССайтом, ДопПараметры, ОписаниеОшибкиParams);
		СтрокаСотрудникXML = ВебИнтеграция.ПолучитьXMLИзXDTO(ГрафикиДляСайтаXDTO);
		Возврат СтрокаСотрудникXML;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция. ПолучитьГрафикиРаботыXML(ДатаНачала, ДатаОкончания) возникла ошибка." + ОписаниеОшибки;
	КонецПопытки;
КонецФункции

// Функция вызываемая веб-сервисом Integration.GetEnlargementSchedule.
//
// Параметры:
//  ДатаНачала			 - Дата	 - дата начала
//  ДатаОкончания		 - Дата	 - дата окончания
//  ОписаниеОшибки		 - Строка - текст ошибки
// 
// Возвращаемое значение:
//  Строка - xml-текст.
//
Функция ПолучитьУкрупненыеГрафикиРаботыXML(ДатаНачала, ДатаОкончания, ОписаниеОшибки) Экспорт
	Попытка
		
		СтрокаСотрудникXDTO	= ПолучитьXDTOТекстУкрупненыеГрафикиРаботы(ДатаНачала, ДатаОкончания);
		СтрокаСотрудникXML	= ПолучитьXMLИзXDTO(СтрокаСотрудникXDTO);
		Возврат СтрокаСотрудникXML;
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция. ПолучитьГрафикиРаботыXML(ДатаНачала, ДатаОкончания) возникла ошибка." + ОписаниеОшибки;
		
	КонецПопытки;
КонецФункции

// Функция вызываемая веб-сервисом Integration.BookAnAppointment
//
// Параметры:
//  Сотрудник			 - СправочникСсылка.Сотрудники	 - сотрудник, к которому записываются.
//  Фамилия				 - Строка						 - фамилия
//  Имя					 - Строка						 - имя
//  Отчество			 - Строка						 - отчество
//  ДатаРождения		 - Дата							 - дата рождения клиента
//  Дата				 - Дата							 - дата записи
//  ВремяНачалаЗаписи	 - Дата							 - время записи
//  ВремяОкончанияЗаписи - Дата							 - время записи
//  Комментарий			 - Строка						 - пояснение
//  Телефон				 - Строка						 - телефон клиента
//  Email				 - Строка						 - почта клиента
//  Адрес				 - Строка						 - адрес клиента
//  Клиника				 - СправочникСсылка.Филиалы		 - филиал записи
//  ОписаниеОшибки		 - Строка						 - текст ошибки
//  УИД					 - Строка						 - идентификатор брони
//  Клиент				 - СправочникСсылка.Клиент		 - клиент
//  Услуга				 - СправочникСсылка.Номенклатура - услуга записи
// 
// Возвращаемое значение:
//  Строка - ответ сайту.
//
Функция СоздатьЗаявку(Сотрудник, Фамилия, Имя, Отчество, ДатаРождения = '00010101', Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Комментарий, Телефон, Email, Адрес, Клиника, ОписаниеОшибки, УИД = "", Клиент = Неопределено, Услуга = Неопределено) Экспорт
	
	Перем Услуги;
	
	Если ТипЗнч(Услуга) = Тип("ТаблицаЗначений") Тогда
		Услуги = Услуга;
	Иначе
		Услуги = Новый ТаблицаЗначений;
		Услуги.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Услуги.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число"));
		
		Если ТипЗнч(Услуга) = Тип("Массив") Тогда
			Для Каждого ЭлементУслуга Из Услуга Цикл
				Услуги.Добавить().Номенклатура = ЭлементУслуга;
			КонецЦикла;
		Иначе
			Услуги.Добавить();
		КонецЕсли;
		
		Услуги[0].Продолжительность = ВремяОкончанияЗаписи - ВремяНачалаЗаписи;
	КонецЕсли;
	
	Попытка 
		Результат = Ложь;
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			Если Клиент = Неопределено Тогда
				ДанныеКлиента = Новый Структура("Фамилия, Имя, Отчество, ДатаРождения, Телефон, Email, Адрес", Фамилия, Имя, Отчество, ДатаРождения, Телефон, Email, Адрес);
				Клиент = ОбработатьДанныеКлиента(ДанныеКлиента, Клиника);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(УИД) Тогда
				Попытка
					Бронь = Документы.Заявка.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
					Бронь = Бронь.ПолучитьОбъект();
					
					Если Бронь = Неопределено Тогда
						ОписаниеОшибки = "Не найден документ Заявки с GUID: УИД.";
						Возврат ОписаниеОшибки;
					КонецЕсли;					
				Исключение
					Бронь = Документы.Заявка.СоздатьДокумент();
				КонецПопытки;
			Иначе
				Бронь = Документы.Заявка.СоздатьДокумент();
			КонецЕсли;
			
			Бронь.Состояние 		= Справочники.ВидыСостоянийЗаявок.СозданаНаСайте;
			Бронь.Дата				= ТекущаяДата();
			Бронь.ДатаНачала		= НачалоДня(Дата) + (ВремяНачалаЗаписи		- Дата("00010101"));
			Бронь.ДатаОкончания 	= НачалоДня(Дата) + (ВремяОкончанияЗаписи	- Дата("00010101"));
			Бронь.ВремяНачала		= ВремяНачалаЗаписи;
			Бронь.ВремяОкончания	= ВремяОкончанияЗаписи;
			Бронь.Сотрудник			= Сотрудник;			
			Бронь.Клиент			= Клиент;
			Бронь.КомментарийКлиента= Комментарий;
			Бронь.Филиал				= Клиника;
			
			Бронь.Работы.Очистить();
			
			// Заполнение списка работ
			ТекВремяНачала = Бронь.ДатаНачала;
			Для Каждого СтрокаУслуги Из Услуги Цикл
				СтрокаДокумента = Бронь.Работы.Добавить();
				СтрокаДокумента.Номенклатура = СтрокаУслуги.Номенклатура;
				СтрокаДокумента.Продолжительность = Дата("00010101") + СтрокаУслуги.Продолжительность;
				СтрокаДокумента.ДатаНачала		= ТекВремяНачала;
				СтрокаДокумента.ДатаОкончания	= СтрокаДокумента.ДатаНачала + СтрокаУслуги.Продолжительность;
				ТекВремяНачала = СтрокаДокумента.ДатаОкончания;
			КонецЦикла;
			
			// Запись документа
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				Бронь.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				УИД = Бронь.Ссылка.УникальныйИдентификатор();
				СоздатьЛистОжиданияПоЗаявкеНовогоКлиента(Бронь.Ссылка);
				ОписаниеОшибки = " ";
				Результат = Истина;
			Исключение		
				ОписаниеОшибки = "Не удалось записать документ.";
				ОписаниеОшибки = ОписаниеОшибки + Символы.Таб + Строка(Бронь.Дата) + " - " + ОписаниеОшибки();
				Результат = Ложь;
			КонецПопытки;
			Если Результат Тогда
				МенеджерЗаписи = РегистрыСведений.НепросмотренныеДокументыССайта.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Документ = Бронь.Ссылка;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Услуга) Тогда
			Если Результат Тогда
				Возврат "Ok";	
			Иначе
				Возврат "Error"
			КонецЕсли;
		Иначе
			ЗаписьXML  = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			
			ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ОтветНаЗаписьССайта"));
			ОтветXDTO.Результат			= XMLСтрока(Результат);
			ОтветXDTO.ОписаниеОшибки	= XMLСтрока(ОписаниеОшибки);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветXDTO );
			СтрокаXML = ЗаписьXML.Закрыть();
			
			Возврат СтрокаXML;
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция.СоздатьЗаявку(Имя, УИДЗаявки, ДатаРождения, Фамилия, Комментарий, Телефон, Email, ОписаниеОшибки) возникла ошибка." + ОписаниеОшибки;	
	КонецПопытки;
	
КонецФункции

// Функция вызываемая веб-сервисом Integration.FastBookAnAppointment
//
// Параметры:
//  Специализация		 - СправочникСсылка.КатегорииВыработки	 - специализация
//  Фамилия				 - Строка						 - фамилия
//  Имя					 - Строка						 - имя
//  Отчество			 - Строка						 - отчество
//  Дата				 - Дата							 - дата записи
//  ВремяНачалаЗаписи	 - Дата							 - время записи
//  Комментарий			 - Строка						 - пояснение
//  Телефон				 - Строка						 - телефон клиента
//  Email				 - Строка						 - почта клиента
//  Адрес				 - Строка						 - адрес клиента
//  Клиника				 - СправочникСсылка.Филиалы		 - филиал записи
//  ОписаниеОшибки		 - Строка						 - текст ошибки
//  Клиент				 - СправочникСсылка.Клиент		 - клиент
// 
// Возвращаемое значение:
//  Строка - ответ сайту.
//
Функция СоздатьЛистОжидания(Специализация, Фамилия, Имя, Отчество, Дата, ВремяНачалаЗаписи, Комментарий, Телефон, Email, Адрес, Клиника, ОписаниеОшибки, Клиент = Неопределено) Экспорт
	Попытка 
		Результат = Ложь;
		УИД = "";
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Если Клиент = Неопределено Тогда
				ДанныеКлиента = Новый Структура("Фамилия, Имя, Отчество, Телефон, Email, Адрес, ДатаРождения", Фамилия, Имя, Отчество, Телефон, Email, Адрес, '00010101');
				Клиент = ОбработатьДанныеКлиента(ДанныеКлиента, Клиника);
			КонецЕсли;
			
			ЛистОжиданияОбъект = Документы.ЛистОжидания.СоздатьДокумент();
			ЛистОжиданияОбъект.Дата = ТекущаяДата();
			ЛистОжиданияОбъект.Ответственный = Пользователи.ТекущийПользователь();
			СтрокаТЧ = ЛистОжиданияОбъект.ЖелаемоеВремя.Добавить();
			СтрокаТЧ.Дата		= НачалоДня(Дата) + (ВремяНачалаЗаписи - Дата("00010101"));
			СтрокаТЧ.Начало		= ВремяНачалаЗаписи;			
			ЛистОжиданияОбъект.Клиент		= Клиент;
			ЛистОжиданияОбъект.Филиал		= Клиника;
			
			// Примечание документа.
			Если ЗначениеЗаполнено(Комментарий) Тогда
				ЛистОжиданияОбъект.Примечание = Комментарий;
			Иначе
				Если ЗначениеЗаполнено(Телефон) Тогда
					ТелефонПримечания = Телефон;
				ИначеЕсли ЗначениеЗаполнено(Клиент) Тогда
					ТелефонПримечания = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент,, Справочники.ВидыКонтактнойИнформации.ТелефонСотовый, Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТелефонПримечания) Тогда
					ЛистОжиданияОбъект.Примечание = "Заявка ""Перезвонить"" клиенту на номер: " + ТелефонПримечания;
				КонецЕсли;
				
			КонецЕсли;
			Если Специализация <> "" Тогда 
				ЛистОжиданияОбъект.Примечание = ЛистОжиданияОбъект.Примечание + Символы.ПС + "Желаемая специализация: " + Специализация;
			КонецЕсли;
			
			// Источник рекламы
			НастройкиОбмена = ПолучитьНастройкиОбменаССайтом(Клиника);
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				ЛистОжиданияОбъект.ИсточникИнформации = НастройкиОбмена.ИсточникИнформации;
				ЛистОжиданияОбъект.ТипРекламы = НастройкиОбмена.ТипРекламы;
			КонецЕсли;
			
			// Запись документа
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				ЛистОжиданияОбъект.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				УИД = ЛистОжиданияОбъект.Ссылка.УникальныйИдентификатор();
				ОписаниеОшибки = " ";
				Результат = Истина;
			Исключение		
				ОписаниеОшибки = "Не удалось записать документ ЛистОжидания.";
				Результат = Ложь;
			КонецПопытки;
			Если Результат Тогда
				МенеджерЗаписи = РегистрыСведений.НепросмотренныеДокументыССайта.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Документ = ЛистОжиданияОбъект.Ссылка;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
		ЗаписьXML  = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ОтветНаЗаписьССайта"));
		ОтветXDTO.Результат			= XMLСтрока(Результат);
		ОтветXDTO.ОписаниеОшибки	= XMLСтрока(ОписаниеОшибки);
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветXDTO);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Возврат СтрокаXML;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция.СоздатьЛистОжидания(Специализация, Фамилия, Имя, Отчество, Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Комментарий, Телефон, Email, Адрес, ОписаниеОшибки) возникла ошибка." + ОписаниеОшибки;
	КонецПопытки;
	
КонецФункции

// Функция вызываемая веб-сервисом Integration.GetReserve
//
// Параметры:
//  Сотрудник			 - СправочникСсылка.Сотрудники	 - сотрудник, к которому записываются.
//  Дата				 - Дата							 - дата записи
//  ВремяНачалаЗаписи	 - Дата							 - время записи
//  ВремяОкончанияЗаписи - Дата							 - время записи
//  Клиника				 - СправочникСсылка.Филиалы		 - филиал записи
//  ОписаниеОшибки		 - Строка						 - текст ошибки
// 
// Возвращаемое значение:
//  Строка - ответ сайту.
//
Функция СоздатьБронь(Сотрудник, Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Клиника, ОписаниеОшибки) Экспорт
	
	Попытка 
		Результат = Ложь;
		УИД = "";
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
			Бронь = Документы.Заявка.СоздатьДокумент();
			Бронь.Состояние 		= Справочники.ВидыСостоянийЗаявок.Забронирована;
			Бронь.Дата				= ТекущаяДата();
			Бронь.ДатаНачала		= НачалоДня(Дата) + (ВремяНачалаЗаписи		- Дата("00010101"));
			Бронь.ДатаОкончания 	= НачалоДня(Дата) + (ВремяОкончанияЗаписи	- Дата("00010101"));
			Бронь.ВремяНачала		= ВремяНачалаЗаписи;
			Бронь.ВремяОкончания	= ВремяОкончанияЗаписи;
			Бронь.Сотрудник			= Сотрудник;			
			Бронь.Филиал				= Клиника;
			
			НоваяРабота = Бронь.Работы.Добавить();
			НоваяРабота.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			НоваяРабота.ДатаНачала		= НачалоДня(Дата) + (ВремяНачалаЗаписи - Дата("00010101"));
			НоваяРабота.ДатаОкончания	= НачалоДня(Дата) + (ВремяОкончанияЗаписи - Дата("00010101"));
			НоваяРабота.Продолжительность = Дата("00010101") + (ВремяОкончанияЗаписи - ВремяНачалазаписи);
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				Бронь.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				УИД = Бронь.Ссылка.УникальныйИдентификатор();
				ОписаниеОшибки = " ";
				Результат = Истина;
			Исключение		
				ОписаниеОшибки = "Не удалось записать документ.";
				ОписаниеОшибки = ОписаниеОшибки + Символы.Таб + Строка(Бронь.Дата) + " - " + ОписаниеОшибки();
				Результат = Ложь;
			КонецПопытки;
		
		Иначе
			Результат = Ложь;
		КонецЕсли;
		ЗаписьXML  = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ОтветНаЗаписьССайта"));
		ОтветXDTO.Результат			= XMLСтрока(Результат);
		ОтветXDTO.ОписаниеОшибки	= XMLСтрока(ОписаниеОшибки);
		ОтветXDTO.УИД 				= XMLСтрока(УИД);
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветXDTO);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Возврат СтрокаXML;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция.СоздатьБронь(Сотрудник, Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Клиника, ОписаниеОшибки) возникла ошибка." + ОписаниеОшибки;
		
	КонецПопытки;		
КонецФункции

// Дает список сотрудников как строку XML согласно формату обмена.
// 
// Возвращаемое значение:
//  Строка - текст XML.
//
Функция ПолучитьСписокСотрудниковXML() Экспорт
	ОбъектXDTO = ПолучитьСотрудниковXDTO();
	СообщениеXML = ПолучитьXMLИзXDTO(ОбъектXDTO);
	Возврат СообщениеXML;
КонецФункции

// Дает список филиалов как строку XML согласно формату обмена.
// 
// Возвращаемое значение:
//  Строка - текст XML.
//
Функция ПолучитьСписокКлиникXML() Экспорт
	ОбъектXDTO = ПолучитьКлиникиXDTO();
	СообщениеXML = ПолучитьXMLИзXDTO(ОбъектXDTO);
	//+2016.10.31 интеграция с сайтом
	СообщениеXML = СтрЗаменить(СообщениеXML,"UID","УИД");
	//-2016.10.31 интеграция с сайтом
	Возврат СообщениеXML;
КонецФункции

// Функция вызываемая веб-сервисом Integration.GetNomenclatureAndPrices
//
// Параметры:
//  Клиника				 - СправочникСсылка.Филиалы		 - филиал записи
//  ОписаниеОшибки		 - Строка						 - текст ошибки
// 
// Возвращаемое значение:
//  Строка - ответ сайту.
//
Функция ПолучитьСписокНоменклатурыИЦен(Клиника, ОписаниеОшибки = "") Экспорт
	
	Попытка 
		Результат = Истина;
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	НастройкиОбменаССайтом.Ссылка КАК Ссылка
			                      |ИЗ
			                      |	Справочник.НастройкиОбменаССайтом КАК НастройкиОбменаССайтом
			                      |ГДЕ
			                      |	НастройкиОбменаССайтом.Клиника = &Клиника
			                      |	И НЕ НастройкиОбменаССайтом.ИнтеграцияСВнешнимСервисом
			                      |	И НЕ НастройкиОбменаССайтом.ПометкаУдаления");
			
			Запрос.УстановитьПараметр("Клиника", Клиника);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НастройкиОбмена = Выборка.Ссылка;
			Иначе
				Результат = Ложь;
				ОписаниеОшибки = НСтр("ru='Не обнаружена настройка обмена с сайтом для данной клиники!'");
			КонецЕсли;
			
			Если Результат Тогда
				ОбъектXDTO = ВебИнтеграция.ПолучитьКаталогУслугXDTO(НастройкиОбмена);
				СообщениеXML = ВебИнтеграция.ПолучитьXMLИзXDTO(ОбъектXDTO);
				Возврат СообщениеXML;
			КонецЕсли;
					
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
		Если Не Результат Тогда
			ЗаписьXML  = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			
			ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ОтветНаЗаписьССайта"));
			ОтветXDTO.Результат			= XMLСтрока(Результат);
			ОтветXDTO.ОписаниеОшибки	= XMLСтрока(ОписаниеОшибки);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветXDTO );
			СтрокаXML = ЗаписьXML.Закрыть();
			
			Возврат СтрокаXML;
			
		КонецЕсли;
							
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция.ПолучитьСписокНоменклатурыИЦен(Клиника, ОписаниеОшибки = "") возникла ошибка: " + ОписаниеОшибки;	
	КонецПопытки;
	
КонецФункции

// Функция вызываемая веб-сервисом Integration.CancelBookAnAppointment.
//
// Параметры:
//  ЗаявкаСсылка			 - ДокументСсылка.Заявка - отменяемый документ.
//  ДополнительнаяИнформация - Строка				 - дополнительный комментарий
//  ПричинаОтмены			 - Строка				 - причина
//  ОписаниеОшибки			 - Строка				 - текст ошибки.
// 
// Возвращаемое значение:
//  Строка - ответ сайту.
//
Функция ОтменитьЗаявку(ЗаявкаСсылка, ДополнительнаяИнформация, ПричинаОтмены, ОписаниеОшибки) Экспорт
	
	Попытка 
		Результат = Ложь;
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			Заявка = ЗаявкаСсылка.ПолучитьОбъект();
			Заявка.ПометкаУдаления = Истина;
			Заявка.Состояние = Справочники.ВидыСостоянийЗаявок.Отменена;
			
			Попытка
				Заявка.Записать();
				ОписаниеОшибки = " ";
				Результат = Истина;
			Исключение		
				ОписаниеОшибки = "Не удалось отменить заявку. ";
				ОписаниеОшибки = Строка(Заявка.Дата) + ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
				Результат = Ложь;
			КонецПопытки;
			
			Если Результат Тогда
				МенеджерЗаписи = РегистрыСведений.НепросмотренныеДокументыССайта.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Документ = Заявка.Ссылка;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		ЗаписьXML  = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "РезультатВыполнения"));
		ОтветXDTO.Результат			= XMLСтрока(Результат);
		ОтветXDTO.ОписаниеОшибки	= XMLСтрока(ОписаниеОшибки);
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветXDTO);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Возврат СтрокаXML;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция.ОтменитьЗаявку(Имя, Заявка, ДополнительнаяИнформация, ПричинаОтмены, ОписаниеОшибки) возникла ошибка." + ОписаниеОшибки;	
	КонецПопытки;

КонецФункции

//============================================================================================================
//============= Рег.Задания        ===========================================================================
//============================================================================================================

// Отменяет просроченные брони - заявки с видом состояния Забронирована. Для регламентного задания.
//
Процедура ОтменитьПросроченныеЗаявки() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.Заявка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Заявка.Ссылка КАК Ссылка,
	               |	Заявка.Дата КАК Дата,
	               |	Заявка.Филиал КАК Филиал
	               |ПОМЕСТИТЬ Заявки
	               |ИЗ
	               |	Документ.Заявка КАК Заявка
	               |ГДЕ
	               |	Заявка.Состояние = &Состояние
	               |	И НЕ Заявка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Заявка.Ссылка КАК Ссылка
	               |ИЗ
	               |	Заявки КАК Заявка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменаССайтом КАК НастройкиОбменаССайтом
	               |		ПО (НЕ НастройкиОбменаССайтом.ИнтеграцияСВнешнимСервисом)
	               |			И Заявка.Филиал = НастройкиОбменаССайтом.Клиника
	               |			И (ДОБАВИТЬКДАТЕ(Заявка.Дата, СЕКУНДА, СЕКУНДА(НастройкиОбменаССайтом.ВремяДействительностиБрони) + МИНУТА(НастройкиОбменаССайтом.ВремяДействительностиБрони) * 60 + ЧАС(НастройкиОбменаССайтом.ВремяДействительностиБрони) * 60 * 60) <= &Дата)";
	Запрос.УстановитьПараметр("Состояние", Справочники.ВидыСостоянийЗаявок.Забронирована);
	Дата = ТекущаяДата();
	Запрос.УстановитьПараметр("Дата",Дата);
	
	ВыборкаДЗ = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДЗ.Следующий() Цикл
		Попытка
			Бронь = ВыборкаДЗ.Ссылка.ПолучитьОбъект();
			Бронь.ПометкаУдаления = Истина;
			Бронь.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,МетаданныеДокумента,ВыборкаДЗ.Ссылка,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьУкрупненыеГрафикиРаботыFTP(Настройки) Экспорт
	
	ДатаНачала = НачалоНедели(ТекущаяДата());
	ДатаОкончания = '29990101';
	Попытка 
		ОбъектXDTO = ПолучитьXDTOТекстУкрупненыеГрафикиРаботы(ДатаНачала, ДатаОкончания);
		
		Запись = Новый ЗаписьXML;
		Путь = ПолучитьИмяВременногоФайла();
		
		Запись.ОткрытьФайл(Путь, "UTF-8"); 
		
		Запись.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
		ДанныеXML = Запись.Закрыть();
		
		ИмяКаталога = ПолучитьИмяКаталогаНаСервере(СокрЛП(Настройки.FTPСоединениеПуть));
		
		ДанныеДляПодключения = Новый Структура("Адрес, Порт, Логин, Пароль, ИмяКаталога",
		Настройки.FTPСоединениеПуть,
		Настройки.FTPСоединениеПорт,
		Настройки.FTPСоединениеПользователь,
		Настройки.FTPСоединениеПароль,
		ИмяКаталога);
		
		СообщениеОбОшибке = ОтправитьФайлНаFTPСервер(Путь,ДанныеДляПодключения,"Schedule.xml");
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Произошла ошибка при отправке расписания! По причине: """+СообщениеОбОшибке+"""");
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Выгружает список сотрудников на FTP.
//
// Параметры:
//  Настройки	 - Структура	 - настройки обмена с сайтом.
//
Процедура ОтправитьСписокСотрудниковFTP(Настройки) Экспорт
	
	Попытка
		ОбъектXDTO = ПолучитьСотрудниковXDTO(Настройки.Ссылка);
		Запись = Новый ЗаписьXML;
		Путь = ПолучитьИмяВременногоФайла();
		
		Запись.ОткрытьФайл(Путь, "UTF-8"); 
		
		Запись.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
		ДанныеXML = Запись.Закрыть();
		
		ИмяКаталога = ПолучитьИмяКаталогаНаСервере(СокрЛП(Настройки.FTPСоединениеПуть));
		
		ДанныеДляПодключения = Новый Структура("Адрес, Порт, Логин, Пароль, ИмяКаталога",
		Настройки.FTPСоединениеПуть,
		Настройки.FTPСоединениеПорт,
		Настройки.FTPСоединениеПользователь,
		Настройки.FTPСоединениеПароль,
		ИмяКаталога);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
	
	СообщениеОбОшибке = ОтправитьФайлНаFTPСервер(Путь,ДанныеДляПодключения,"Employees.xml");
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Произошла ошибка при отправке списка сотрудников! По причине: """+СообщениеОбОшибке+"""");
	КонецЕсли;
	
КонецПроцедуры

// Выгружает расписание сотрудников на FTP.
//
Процедура ОтправитьРасписаниеИСотрудниковНаFTP() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиОбменаССайтом.FTPСоединениеПароль КАК FTPСоединениеПароль,
	               |	НастройкиОбменаССайтом.FTPСоединениеПользователь КАК FTPСоединениеПользователь,
	               |	НастройкиОбменаССайтом.FTPСоединениеПорт КАК FTPСоединениеПорт,
	               |	ВЫРАЗИТЬ(НастройкиОбменаССайтом.FTPСоединениеПуть КАК СТРОКА(1000)) КАК FTPСоединениеПуть,
	               |	НастройкиОбменаССайтом.ОтправлятьРасписаниеНаFTP КАК ОтправлятьРасписаниеНаFTP,
	               |	НастройкиОбменаССайтом.ОтправлятьСписокСотрудниковНаFTP КАК ОтправлятьСписокСотрудниковНаFTP,
	               |	НастройкиОбменаССайтом.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменаССайтом КАК НастройкиОбменаССайтом
	               |ГДЕ
	               |	НастройкиОбменаССайтом.FTPСоединениеПароль <> """"
	               |	И НастройкиОбменаССайтом.FTPСоединениеПользователь <> """"
	               |	И НастройкиОбменаССайтом.FTPСоединениеПорт <> """"
	               |	И (ВЫРАЗИТЬ(НастройкиОбменаССайтом.FTPСоединениеПуть КАК СТРОКА(1000))) <> """"
	               |	И (НастройкиОбменаССайтом.ОтправлятьРасписаниеНаFTP = ИСТИНА
	               |			ИЛИ НастройкиОбменаССайтом.ОтправлятьСписокСотрудниковНаFTP = ИСТИНА)
	               |	И НЕ НастройкиОбменаССайтом.ПометкаУдаления";
	ВыборкаДЗ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДЗ.Следующий() Цикл
		Попытка
			Настройки = Новый Структура("FTPСоединениеПароль, FTPСоединениеПользователь, FTPСоединениеПорт, FTPСоединениеПуть, Ссылка",
			ВыборкаДЗ.FTPСоединениеПароль, ВыборкаДЗ.FTPСоединениеПользователь, 
			ВыборкаДЗ.FTPСоединениеПорт, ВыборкаДЗ.FTPСоединениеПуть, ВыборкаДЗ.Ссылка);
			
			Если ВыборкаДЗ.ОтправлятьРасписаниеНаFTP Тогда
				ОтправитьГрафикиРаботыFTP(Настройки);
			КонецЕсли;
			Если ВыборкаДЗ.ОтправлятьСписокСотрудниковНаFTP Тогда
				ОтправитьСписокСотрудниковFTP(Настройки);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Загружает листы ожидания с сайта в базу через FTP.
//
Процедура ИмпортЛистовОжиданияСFTP() Экспорт
	
	Выборка = Справочники.НастройкиОбменаССайтом.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления
			И Не Выборка.FTPСоединениеПуть = "" 
			И Выборка.СчитыватьЛистыОжиданияСFTP 
		Тогда
			Попытка
				НастройкаОбмена = Новый Структура("КаталогОбмена", Выборка.FTPСоединениеПуть);
				
				FTPКлиент = Новый FTPСоединение(Выборка.FTPСоединениеПуть,Выборка.FTPСоединениеПорт, Выборка.FTPСоединениеПользователь, Выборка.FTPСоединениеПароль, ,Выборка.FTPСоединениеПассивноеСоединение , 30);
				
				Результат = FTPКлиент.НайтиФайлы(УдалениеДобавлениеСлешейВПути(Выборка.ПутьКЛистамОжидания), "*.xml");
				
				ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
				
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				
				Для Каждого Стр Из Результат Цикл
					Попытка
						FTPКлиент.Получить(Стр.ПолноеИмя, ВременныйФайл);
						FTPКлиент.Удалить(УдалениеДобавлениеСлешейВПути(Выборка.ПутьКЛистамОжидания),Стр.Имя);
						ТекстовыйДокумент.Прочитать(ВременныйФайл, "UTF-8");
						
						ТекстХМЛ = ТекстовыйДокумент.ПолучитьТекст();
						
						ТаблицаИмпорта = ВебИнтеграция.СформироватьТаблицуЗагрузкиЗаписей(ТекстХМЛ);
						ТаблицаИмпорта.ЗаполнитьЗначения(Выборка.ИсточникИнформации, "ИсточникИнформации");
						ВебИнтеграция.ИмпортироватьЗаписиВРасписаниеССайта(ТаблицаИмпорта, Выборка.Ссылка);      
					Исключение
						ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;
			Исключение
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выгружает прайс на сайт через FTP.
//
Процедура ОтправитьНоменклатуруИЦеныНаFTP() Экспорт
	
	Выборка = Справочники.НастройкиОбменаССайтом.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Если Не Выборка.ПометкаУдаления 
				И Выборка.ОтправлятьНоменклатуруИЦеныНаFTP
			Тогда
				ВыгрузитьПрайс(Выборка);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


//============================================================================================================
//============= Область служебных процедур и функций                              ============================
//============================================================================================================

Функция УбратьПромежуткиВРасписаниеНаКаждыйДень(График)
	
	Сч = 1; 	
	КолСтрок = График.Количество() - 1;
	Пока Сч <= КолСтрок Цикл
		Если График[Сч].Дата = График[Сч-1].Дата И
			График[Сч].Филиал = График[Сч-1].Филиал И
			График[Сч].Сотрудник = График[Сч-1].Сотрудник Тогда
			
			График[Сч-1].ВремяОкончания = График[Сч].ВремяОкончания;
			График.Удалить(График[Сч]);
			КолСтрок = КолСтрок - 1;
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат График;
	
КонецФункции

Функция ПолучитьXDTOТекстУкрупненыеГрафикиРаботы(ДатаНачала, ДатаОкончания)
	
	СтруктураТаблиц 	= УправлениеЗаявками.СформироватьТаблицыДляОбщегоГрафика(ДатаНачала, КонецДня(ДатаОкончания), , , , , , Истина);
	ТаблицаГрафиков		= СтруктураТаблиц.ТаблицаГрафиков;
	ТаблицаГрафиков  	= УбратьПромежуткиВРасписаниеНаКаждыйДень(ТаблицаГрафиков);
	ТаблицаСотрудников 	= СтруктураТаблиц.ТаблицаСотрудников;
	
	ГрафикиДляСайтаXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ГрафикиДляСайта")); 
	Для каждого СтрокаСотрудника из ТаблицаСотрудников Цикл
		ГрафикДляСайтаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ГрафикДляСайта"));
		
		ГрафикДляСайтаXDTO.СотрудникФИО 		= СтрокаСотрудника.СотрудникФИО;
		ГрафикДляСайтаXDTO.СотрудникID			= СтрокаСотрудника.СотрудникID;
		ГрафикДляСайтаXDTO.Специализация		= СтрокаСотрудника.Специализация;
		ГрафикДляСайтаXDTO.Клиника			  	= XMLСтрока(СтрокаСотрудника.ФилиалУИД);
		ГрафикДляСайтаXDTO.ДлительностьПриема 	= СтрокаСотрудника.СрДлительностьПриема;
		
		ПериодыГрафикаXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ПериодыГрафика"));
		СвободноеВремяXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "СвободноеВремя"));
		ЗанятоеВремяXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ЗанятоеВремя"));
		// Добавим периоды рабочего времени свободные от заявок на прием
		Отбор = Новый Структура("Сотрудник, Филиал", СтрокаСотрудника.Сотрудник, СтрокаСотрудника.Филиал);
		ТаблицаГрафиковПоСотруднику = ТаблицаГрафиков.НайтиСтроки(Отбор);
		Для каждого СтрокаГрафиков Из ТаблицаГрафиковПоСотруднику Цикл
			
			СвободныйИнтервалXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ПериодГрафикаУкрупненного"));			
			СвободныйИнтервалXDTO.ВремяНачала		= XMLСтрока(СтрокаГрафиков.ВремяНачала);
			СвободныйИнтервалXDTO.ВремяОкончания	= XMLСтрока(СтрокаГрафиков.ВремяОкончания);
			СвободныйИнтервалXDTO.Дата				= XMLСтрока(СтрокаГрафиков.Дата);
			СвободноеВремяXDTO.ПериодГрафика.Добавить(СвободныйИнтервалXDTO);
			
		КонецЦикла;
		ПериодыГрафикаXDTO.СвободноеВремя	=	СвободноеВремяXDTO;
		ПериодыГрафикаXDTO.ЗанятоеВремя		=	ЗанятоеВремяXDTO;
		ГрафикДляСайтаXDTO.ПериодыГрафика	=	ПериодыГрафикаXDTO;
		ГрафикиДляСайтаXDTO.ГрафикДляСайта.Добавить(ГрафикДляСайтаXDTO);
	КонецЦикла;
	
	Возврат ГрафикиДляСайтаXDTO;
	
КонецФункции

Функция ПолучитьXMLИзXDTO(ОбъектXDTO) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

// Процедура для обновления Контактной Информации Клиента, если таковая отсутсвует в базе
Процедура ОбработатьКИКлиента(СтруктураКИ,КлиентСсылка) Экспорт
	
	Клиент	= КлиентСсылка;
	ВидКИТелефона = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый;
	
	Телефон	= СформироватьНомерТелефонаСУчетомМаски(СтруктураКИ.Телефон, ВидКИТелефона);
	Email	= СтруктураКИ.Email;
	Адрес	= СтруктураКИ.Адрес;
	ОписаниеДобавленнойКИ = "";
	
	НаборКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборКИ.Отбор.Объект.Установить(Клиент);
	НаборКИ.Прочитать();
	// Проверим что из переданного уже имеется в базе, а что требуется добавить
	фДобавлятьТелефон	= ЗначениеЗаполнено(Телефон);
	фДобавлятьEmail		= ЗначениеЗаполнено(Email);
	фДобавлятьАдрес		= ЗначениеЗаполнено(Адрес);
	
	Для Каждого Запись из НаборКИ Цикл
		Если	фДобавлятьТелефон И СокрЛП(Запись.Представление) = СокрЛП(Телефон) И Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			фДобавлятьТелефон	= Ложь;
		ИначеЕсли фДобавлятьEmail И СокрЛП(Запись.Представление) = СокрЛП(Email) И Запись.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			фДобавлятьEmail		= Ложь;
		ИначеЕсли фДобавлятьАдрес И СокрЛП(Запись.Представление) = СокрЛП(Адрес) И Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			фДобавлятьАдрес		= Ложь;
		КонецЕсли;
	КонецЦикла;
	// Поскольку РС не даст записать КИ с совпадающими измерениями,
	// А программное создание видов КИ может привести к заспамливанию справочника видов контактной информации
	// Реализуем запись через попытку - в случае неудачи клиент будет помечен и в комментарии сохранится новая КИ в виде строки.
	Если фДобавлятьТелефон Тогда
		НоваяКИ = НаборКИ.Добавить();
		НоваяКИ.Объект = Клиент;
		НоваяКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяКИ.Вид = ВидКИТелефона;
		НоваяКИ.Поле3 = Телефон;
		НоваяКИ.Представление = Телефон;
		ОписаниеДобавленнойКИ = ОписаниеДобавленнойКИ + " телефон: " + Телефон + ";" + Символы.ПС;
		Попытка
			НаборКИ.Записать();
		Исключение КонецПопытки;
	КонецЕсли;
	
	Если фДобавлятьEmail Тогда
		НаборКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборКИ.Отбор.Объект.Установить(Клиент);
		НаборКИ.Прочитать();
		НоваяКИ = НаборКИ.Добавить();
		НоваяКИ.Объект = Клиент;
		НоваяКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий;
		НоваяКИ.Представление = Email;
		ОписаниеДобавленнойКИ = ОписаниеДобавленнойКИ + " e-mail: " + Email + ";" + Символы.ПС;
		Попытка
			НаборКИ.Записать();
		Исключение КонецПопытки;
	КонецЕсли;
	
	Если фДобавлятьАдрес Тогда
		НаборКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборКИ.Отбор.Объект.Установить(Клиент);
		НаборКИ.Прочитать();
		НоваяКИ = НаборКИ.Добавить();
		НоваяКИ.Объект = Клиент;
		НоваяКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресФактический;
		НоваяКИ.Представление = Адрес;
		ОписаниеДобавленнойКИ = ОписаниеДобавленнойКИ + " адрес: " + Адрес + ";" + Символы.ПС;
		Попытка
			НаборКИ.Записать();
		Исключение КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДобавленнойКИ) Тогда
		// Сохраним информацию о добавленных контактных данных клиента и пометим о том, что КИ клиента изменялась
		КлиентОбъект = Клиент.ПолучитьОбъект();
		КлиентОбъект.Комментарий = КлиентОбъект.Комментарий + Символы.ПС + "Добавлено с сайта от " + Формат(ТекущаяДата(),"ДФ=dd.MM.yy") + ОписаниеДобавленнойКИ;
		КлиентОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьНомерТелефонаСУчетомМаски(НомерТелефона, ВидКонтактнойИнформации)
	
	Если Не (ВидКонтактнойИнформации.ИспользоватьМаскуВвода
			И ЗначениеЗаполнено(ВидКонтактнойИнформации.МаскаВводаТелефонногоНомера))
	Тогда
		Возврат НомерТелефона;
	КонецЕсли;
	
	НормализованныйНомерТелефона = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(НомерТелефона, Ложь);
	Возврат ОбщегоНазначенияКлиентСервер.ПривестиЧисловуюСтрокуКМаске(НормализованныйНомерТелефона, ВидКонтактнойИнформации.МаскаВводаТелефонногоНомера);
	
КонецФункции

// Функция осуществляет поиск или создание клиента по переданным данным
//
// Параметры:
//  ДанныеКлиента	- Структура - Данные клиента. Поля:
//	  * Фамилия		 - Строка - Фамилия клиента.
//	  * Имя			 - Строка - Имя клиента.
//	  * Отчество	 - Строка - Отчество клиента.
//	  * ДатаРождения - Дата   - Дата рождения клиента.
//	  * Телефон		 - Строка - Номер телефона клиента.
//	  * Email		 - Строка - Адрес электронной почты клиента.
//  Клиника			- СправочникСсылка.Филиалы - филиал, в котором производится поиск клиента
// 
// Возвращаемое значение:
//  СправочникСсылка.Клиенты - Найденный, либо созданный клиент.
//
Функция ОбработатьДанныеКлиента(ДанныеКлиента, Филиал = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура("Фамилия, Имя, Отчество, ДатаРождения, Телефон, Email", 
	ДанныеКлиента.Фамилия, ДанныеКлиента.Имя, ДанныеКлиента.Отчество, ДанныеКлиента.ДатаРождения, ДанныеКлиента.Телефон, ДанныеКлиента.Email);	
	Если Не Филиал = Неопределено Тогда
		КлиентВБазе = НайтиКлиента(СтруктураПоиска, Филиал);
	Иначе
		КлиентВБазе = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КлиентВБазе) Тогда
		
		ДанныеКлиента.Вставить("Пол", УниверсальныеМеханизмыСервер.ОпределитьПол(ДанныеКлиента.Имя, ДанныеКлиента.Фамилия, ДанныеКлиента.Отчество));
		
		Если Не Филиал = Неопределено Тогда
			Настройки = Справочники.НастройкиОбменаССайтом.НайтиПоРеквизиту("Клиника",Филиал);
			Если Не Настройки.Пустая() Тогда
				ДанныеКлиента.Вставить("ИсточникИнформации",Настройки.ИсточникИнформации);
			Иначе
				ДанныеКлиента.Вставить("ИсточникИнформации",Справочники.ИсточникиИнформации.ПустаяСсылка());
			КонецЕсли;
		Иначе                                                                                                                                     
			ДанныеКлиента.Вставить("ИсточникИнформации",Справочники.ИсточникиИнформации.ПустаяСсылка());
		КонецЕсли;
		
		КлиентВБазе = СоздатьКлиента(ДанныеКлиента);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлиентВБазе) Тогда
		СтруктураКИ = Новый Структура ("Телефон, Email, Адрес ",ДанныеКлиента.Телефон, ДанныеКлиента.Email, ДанныеКлиента.Адрес);
		ОбработатьКИКлиента(СтруктураКИ,КлиентВБазе);
	КонецЕсли;
	
	Возврат КлиентВБазе;
	
КонецФункции

// Функция ищет клиента в базе по его данным переданным в структуре
Функция НайтиКлиента(Знач СтруктураПоиска, Филиал, Настройки = Неопределено) Экспорт
	
	НастройкиПолучены = Истина;
	Если Настройки = Неопределено Тогда
		Настройки = ПолучитьНастройкиОбменаССайтом(Филиал);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		НастройкиПолучены = Ложь;
		ВидыПоискаКлиента = Новый Массив();
		ВидыПоискаКлиента.Добавить(Новый Структура("ВидПоискаКлиента","Телефон"));
		ВидыПоискаКлиента.Добавить(Новый Структура("ВидПоискаКлиента","ФИО"));
	Иначе
		ВидыПоискаКлиента = Настройки.ПриоритетПоискаКлиента;
	КонецЕсли;
	
	НомераТелефонов = Новый ТаблицаЗначений;
	НомераТелефонов.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ЦифрыНомеровТелефонов = Новый Массив;
	
	Если Не СтруктураПоиска.Свойство("Телефоны") Тогда
		МассивТелефонов = Новый Массив;
		Если ЗначениеЗаполнено(СтруктураПоиска.Телефон) Тогда
			МассивТелефонов.Добавить(СтруктураПоиска.Телефон);
		КонецЕсли;
		СтруктураПоиска.Вставить("Телефоны", МассивТелефонов);
	КонецЕсли;
	
	Для Каждого НомерТелефона Из СтруктураПоиска.Телефоны Цикл
		ЦифрыНомера = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(НомерТелефона);
		
		// В запрос попадают 3 варианта записи номера: с префиксами 8, 7, и без префикса
		Если СтрДлина(ЦифрыНомера) = 11 Тогда
			Если Лев(ЦифрыНомера, 1) = "7" Тогда
				ЦифрыНомеровТелефонов.Добавить("8" + Прав(ЦифрыНомера, 10));
			ИначеЕсли Лев(ЦифрыНомера, 1) = "8" Тогда
				ЦифрыНомеровТелефонов.Добавить("7" + Прав(ЦифрыНомера, 10));
			КонецЕсли;
			ЦифрыНомеровТелефонов.Добавить(Прав(ЦифрыНомера, 10));
		ИначеЕсли СтрДлина(ЦифрыНомера) = 10 Тогда
			ЦифрыНомеровТелефонов.Добавить("8" + ЦифрыНомера);
			ЦифрыНомеровТелефонов.Добавить("7" + ЦифрыНомера);
		КонецЕсли;
		
		ЦифрыНомеровТелефонов.Добавить(ЦифрыНомера);
		НоваяСтрока = НомераТелефонов.Добавить();
		НоваяСтрока.Телефон = НомерТелефона;
	КонецЦикла;
	
	СтруктураПоиска.Вставить("ТелефонЦифры", ЦифрыНомеровТелефонов);
	СтруктураПоиска.Вставить("Телефон", НомераТелефонов);
	
	АдресаПочты = Новый ТаблицаЗначений;
	АдресаПочты.Колонки.Добавить("АдресПочты", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	
	Если Не СтруктураПоиска.Свойство("АдресаПочты") Тогда
		МассивАдресовПочты = Новый Массив;
		Если ЗначениеЗаполнено(СтруктураПоиска.Email) Тогда
			МассивАдресовПочты.Добавить(СтруктураПоиска.Email);
		КонецЕсли;
		СтруктураПоиска.Вставить("АдресаПочты", МассивАдресовПочты);
	КонецЕсли;
	
	Для Каждого АдресПочты Из СтруктураПоиска.АдресаПочты Цикл
		НоваяСтрока = АдресаПочты.Добавить();
		НоваяСтрока.АдресПочты = АдресПочты;
	КонецЦикла;
	
	СтруктураПоиска.Вставить("Email", АдресаПочты);
	
	МассивРеквизитовДляПоискаПоКлиенту = ПолучитьМассивРеквизитовДляПоискаПоКлиенту();
	
	Для Каждого СтрокаСпособПоиска Из ВидыПоискаКлиента Цикл
		
		ВидПоискаКлиента = СтрокаСпособПоиска.ВидПоискаКлиента;
		
		ИспользоватьПоискПоКлиенту 	= Ложь;
		ИспользоватьПоискПоКИ 		= Ложь; 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТипТелефон",		Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("ТипEmail",		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Телефон",		СтруктураПоиска.Телефон);
		Запрос.УстановитьПараметр("ТелефонЦифры",	СтруктураПоиска.ТелефонЦифры);
		Запрос.УстановитьПараметр("Email",			СтруктураПоиска.Email);
		
		Если НастройкиПолучены Тогда
			Для Каждого РеквизитДляПоиска Из МассивРеквизитовДляПоискаПоКлиенту Цикл
				Если Не СтрокаСпособПоиска.ВидПоискаКлиента.СписокРеквизитовДляПоиска.Найти(РеквизитДляПоиска.Справочник, "РеквизитКлиента") = Неопределено Тогда
					ИспользоватьПоискПоКлиенту = Истина;
					ЗначениеРеквизита = СтруктураПоиска[РеквизитДляПоиска.Имя];
				Иначе
					ЗначениеРеквизита = "НеУчитывать";
				КонецЕсли;
				Запрос.УстановитьПараметр(РеквизитДляПоиска.Имя, ЗначениеРеквизита);
			КонецЦикла;
			
			УчитыватьТелефоны = ВидПоискаКлиента.СписокРеквизитовДляПоиска.Найти(Справочники.РеквизитыКлиентаДляПоиска.Телефон, "РеквизитКлиента") <> Неопределено;
			Запрос.УстановитьПараметр("УчитыватьТелефоны", УчитыватьТелефоны);
			УчитыватьАдресаПочты = ВидПоискаКлиента.СписокРеквизитовДляПоиска.Найти(Справочники.РеквизитыКлиентаДляПоиска.Email, "РеквизитКлиента") <> Неопределено;
			Запрос.УстановитьПараметр("УчитыватьАдресаПочты", УчитыватьАдресаПочты);
			ИспользоватьПоискПоКИ = УчитыватьТелефоны Или УчитыватьАдресаПочты;

		Иначе
			Если ВидПоискаКлиента = "Телефон" Тогда
				ИспользоватьПоискПоКИ = Истина;
				Запрос.УстановитьПараметр("УчитыватьТелефоны", Истина);
				Запрос.УстановитьПараметр("УчитыватьАдресаПочты", Ложь);
			Иначе
				ИспользоватьПоискПоКлиенту = Истина;
				Для Каждого РеквизитДляПоиска Из МассивРеквизитовДляПоискаПоКлиенту Цикл
					Если ЗначениеЗаполнено(РеквизитДляПоиска) Тогда
						ЗначениеРеквизита = СтруктураПоиска[РеквизитДляПоиска.Имя];
					Иначе
						ЗначениеРеквизита = "НеУчитывать";
					КонецЕсли;
					Запрос.УстановитьПараметр(РеквизитДляПоиска.Имя, ЗначениеРеквизита);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
			
		ТекстЗапроса = "";
		Если ИспользоватьПоискПоКлиенту Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Клиенты.Ссылка
			|ПОМЕСТИТЬ КлиентыПоФИ
			|ИЗ
			|	Справочник.Клиенты КАК Клиенты
			|ГДЕ
			|	(Клиенты.Фамилия = &Фамилия
			|			ИЛИ &Фамилия = ""НеУчитывать"")
			|	И (Клиенты.Имя = &Имя
			|			ИЛИ &Имя = ""НеУчитывать"")
			|	И (Клиенты.Отчество = &Отчество
			|			ИЛИ &Отчество = ""НеУчитывать"")
			|	И (Клиенты.ДатаРождения = &ДатаРождения
			|			ИЛИ &ДатаРождения = ""НеУчитывать"")
			|;";
		КонецЕсли;
		Если ИспользоватьПоискПоКИ Тогда
			ТекстЗапроса = ТекстЗапроса+
			"ВЫБРАТЬ
			|	АдресаПочты.АдресПочты КАК АдресПочты
			|ПОМЕСТИТЬ АдресаПочты
			|ИЗ
			|	&Email КАК АдресаПочты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Телефоны.Телефон КАК Телефон
			|ПОМЕСТИТЬ Телефоны
			|ИЗ
			|	&Телефон КАК Телефоны
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АдресаПочты.АдресПочты КАК ЗначениеКИ,
			|	""АдресПочты"" КАК ТипКИ
			|ПОМЕСТИТЬ АдресаПочтыТелефоны
			|ИЗ
			|	АдресаПочты КАК АдресаПочты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Телефоны.Телефон,
			|	""Телефон""
			|ИЗ
			|	Телефоны КАК Телефоны
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Объект КАК Объект
			|ПОМЕСТИТЬ КлиентыПоКИ
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АдресаПочтыТелефоны КАК АдресаПочтыТелефоны
			|		ПО (КонтактнаяИнформация.Объект ССЫЛКА Справочник.Клиенты)
			|			И (&УчитыватьАдресаПочты = ЛОЖЬ
			|				ИЛИ КонтактнаяИнформация.Тип = &ТипEmail
			|					И АдресаПочтыТелефоны.ТипКИ = ""АдресПочты""
			|					И КонтактнаяИнформация.Представление ПОДОБНО ""%"" + АдресаПочтыТелефоны.ЗначениеКИ + ""%"")
			|			И (&УчитыватьТелефоны = ЛОЖЬ
			|				ИЛИ КонтактнаяИнформация.Тип = &ТипТелефон
			|					И (КонтактнаяИнформация.Поле12 В (&ТелефонЦифры)
			|						ИЛИ АдресаПочтыТелефоны.ТипКИ = ""Телефон""
			|							И КонтактнаяИнформация.Представление ПОДОБНО ""%"" + АдресаПочтыТелефоны.ЗначениеКИ + ""%""))
			|; ";
		КонецЕсли;
		Если ИспользоватьПоискПоКлиенту И ИспользоватьПоискПоКИ Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|////////////////////////////////////////////////////////////////////////////////
			|"+
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КлиентыПоФИ.Ссылка
			|ИЗ
			|	КлиентыПоФИ КАК КлиентыПоФИ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлиентыПоКИ КАК КлиентыПоКИ
			|		ПО КлиентыПоФИ.Ссылка = КлиентыПоКИ.Объект";
		ИначеЕсли ИспользоватьПоискПоКИ Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|////////////////////////////////////////////////////////////////////////////////
			|"+
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КлиентыПоКИ.Объект КАК Ссылка
			|ИЗ
			|	КлиентыПоКИ КАК КлиентыПоКИ";
		ИначеЕсли ИспользоватьПоискПоКлиенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|////////////////////////////////////////////////////////////////////////////////
			|"+
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КлиентыПоФИ.Ссылка
			|ИЗ
			|	КлиентыПоФИ КАК КлиентыПоФИ";
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Рез = Запрос.Выполнить();
		Если Не Рез.Пустой() Тогда
			Возврат Рез.Выгрузить()[0].Ссылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьМассивРеквизитовДляПоискаПоКлиенту()
	
	МассивРеквизитовДляПоиска = Новый Массив;
	МассивРеквизитовДляПоиска.Добавить(Новый Структура("Имя, Справочник", "Фамилия",		Справочники.РеквизитыКлиентаДляПоиска.Фамилия));
	МассивРеквизитовДляПоиска.Добавить(Новый Структура("Имя, Справочник", "Имя",			Справочники.РеквизитыКлиентаДляПоиска.Имя));
	МассивРеквизитовДляПоиска.Добавить(Новый Структура("Имя, Справочник", "Отчество",		Справочники.РеквизитыКлиентаДляПоиска.Отчество));
	МассивРеквизитовДляПоиска.Добавить(Новый Структура("Имя, Справочник", "ДатаРождения",	Справочники.РеквизитыКлиентаДляПоиска.ДатаРождения));
	
	Возврат МассивРеквизитовДляПоиска;
	
КонецФункции

// Функция Создает клиента в базе по его данным 
Функция СоздатьКлиента(ДанныеКлиента)
	
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество", ДанныеКлиента.Фамилия, ДанныеКлиента.Имя, ДанныеКлиента.Отчество);
	
	Если ЗначениеЗаполнено(ДанныеКлиента.Фамилия) И ЗначениеЗаполнено(ДанныеКлиента.Имя) Тогда
		Клиент = Справочники.Клиенты.СоздатьЭлемент();
		Клиент.Фамилия 		= ДанныеКлиента.Фамилия;
		Клиент.Имя			= ДанныеКлиента.Имя;
		Клиент.Отчество		= ДанныеКлиента.Отчество;
		Клиент.Наименование = РаботаСКлиентамиПереопределяемый.ПредставлениеПоФИО(Клиент.Фамилия, Клиент.Имя, Клиент.Отчество);
		
		Клиент.ИсточникИнформации = ДанныеКлиента.ИсточникИнформации;
		
		Если ТипЗнч(ДанныеКлиента.Пол) = Тип("ПеречислениеСсылка.ПолФизическихЛиц")
			И ЗначениеЗаполнено(ДанныеКлиента.Пол)
		Тогда
		    Клиент.Пол = ДанныеКлиента.Пол;
		ИначеЕсли Лев(НРег(ДанныеКлиента.Пол),1) = "ж" Тогда
			Клиент.Пол		= Перечисления.ПолФизическихЛиц.Женский;
		ИначеЕсли Лев(НРег(ДанныеКлиента.Пол),1) = "м" Тогда
			Клиент.Пол		= Перечисления.ПолФизическихЛиц.Мужской;
		Иначе
			Клиент.Пол		= Перечисления.ПолФизическихЛиц.НеУказан;
		КонецЕсли;
		
		Клиент.ДатаРождения = ДанныеКлиента.ДатаРождения;
		УстановитьПривилегированныйРежим(Истина);
		Клиент.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Клиент.Ссылка;
	Иначе
		Возврат Справочники.Клиенты.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

Функция СформироватьТаблицыДляОбщегоГрафикаСУчетомНаложенияПериодов(ДатаНачала, ДатаОкончания, ИнтеграцияССайтом = Ложь, ДопПараметры = Неопределено) Экспорт
	
	Перем НастройкиОбмена;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("НастройкиОбмена")
		И ТипЗнч(ДопПараметры.НастройкиОбмена) = Тип("Структура")
	Тогда
		ДопПараметры.НастройкиОбмена.Свойство("Ссылка", НастройкиОбмена);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		НастройкиОбмена = ПолучитьНастройкиОбменаССайтом();
	КонецЕсли;
	
	Если ИнтеграцияССайтом Тогда
		ОтключитьДетализациюСвободногоВремениДоВидаВремени = Ложь;
		ВыгружаемыеВидыВремени = ПолучитьВыгружаемыеВидыВремени(ОтключитьДетализациюСвободногоВремениДоВидаВремени, НастройкиОбмена);
	КонецЕсли;
	
	ДоступныеСотрудники = ПолучитьДоступныхСотрудников(НастройкиОбмена);
	Филиалы = Неопределено;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		// Учет отбора по сотрудникам
		Если ДопПараметры.Свойство("Сотрудники") Тогда
			мОбрИнд = ДоступныеСотрудники.Количество()-1;
			Для Сч = 0 По мОбрИнд Цикл
				Если ДопПараметры.Сотрудники.Найти(ДоступныеСотрудники[мОбрИнд-Сч]) = Неопределено Тогда
					ДоступныеСотрудники.Удалить(мОбрИнд-Сч);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДопПараметры.Свойство("Филиал", Филиалы);
	КонецЕсли;
	
	Если ТипЗнч(Филиалы) = Тип("Массив") Тогда
		ФилиалыДляОтбора = Филиалы;
	ИначеЕсли Филиалы <> Неопределено Тогда
		ФилиалыДляОтбора = Новый Массив;
		ФилиалыДляОтбора.Добавить(Филиалы);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Заявки.Сотрудник КАК Сотрудник,
	               |	Заявки.Дата КАК Дата,
	               |	Заявки.ВремяНачала КАК ВремяНачала,
	               |	Заявки.ВремяОкончания КАК ВремяОкончания,
	               |	Заявки.ВидВремени КАК ВидВремени,
	               |	Заявки.Филиал КАК Филиал,
	               |	Заявки.ЭтоРабочееВремя КАК ЭтоРабочееВремя,
	               |	Заявки.ЗаявкаСсылка КАК ЗаявкаСсылка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ГрафикиРаботы.Сотрудник КАК Сотрудник,
	               |		ГрафикиРаботы.Дата КАК Дата,
	               |		ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	               |		ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	               |		ГрафикиРаботы.ВидВремени КАК ВидВремени,
	               |		ГрафикиРаботы.Филиал КАК Филиал,
	               |		ВЫБОР
	               |			КОГДА ГрафикиРаботы.ВидВремени В (&ВыгружаемыВидыВремени)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ КАК ЭтоРабочееВремя,
	               |		NULL КАК ЗаявкаСсылка
	               |	ИЗ
	               |		РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	               |	ГДЕ
	               |		ГрафикиРаботы.Дата >= &ДатаНачала
	               |		И ГрафикиРаботы.Дата <= &ДатаОкончания
	               |		И ГрафикиРаботы.Сотрудник В(&ДоступныеСотрудники)
	               |		И &ГрафикиРаботыУсловиеОтбораПоФилиалу
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |				ТОГДА Заявка.Сотрудник
	               |			ИНАЧЕ ЗаявкаРаботы.Сотрудник
	               |		КОНЕЦ,
	               |		НАЧАЛОПЕРИОДА(Заявка.ДатаНачала, ДЕНЬ),
	               |		ЗаявкаРаботы.ДатаНачала,
	               |		ЗаявкаРаботы.ДатаОкончания,
	               |		НЕОПРЕДЕЛЕНО,
	               |		Заявка.Филиал,
	               |		ЛОЖЬ,
	               |		Заявка.Ссылка
	               |	ИЗ
	               |		Документ.Заявка КАК Заявка
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				ЗаявкаРаботы.Ссылка КАК Ссылка,
	               |				ЗаявкаРаботы.Сотрудник КАК Сотрудник,
	               |				ЗаявкаРаботы.ДатаНачала КАК ДатаНачала,
	               |				ЗаявкаРаботы.ДатаОкончания КАК ДатаОкончания
	               |			ИЗ
	               |				Документ.Заявка.Работы КАК ЗаявкаРаботы
	               |			ГДЕ
	               |				ЗаявкаРаботы.ДатаНачала <> ЗаявкаРаботы.ДатаОкончания
	               |				И (ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |						ИЛИ ЗаявкаРаботы.Сотрудник В (&ДоступныеСотрудники))) КАК ЗаявкаРаботы
	               |			ПО Заявка.Ссылка = ЗаявкаРаботы.Ссылка
				   |				И Заявка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |				И (НЕ Заявка.ПометкаУдаления)
	               |				И (Заявка.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаявок.Отменена))
	               |				И (ЗаявкаРаботы.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |					ИЛИ Заявка.Сотрудник В (&ДоступныеСотрудники))
	               |				И (&ЗаявкаРаботыУсловиеОтбораПоФилиалу)) КАК Заявки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	Дата,
	               |	ЭтоРабочееВремя УБЫВ,
	               |	ВремяНачала,
	               |	ВремяОкончания";
	
	Запрос.УстановитьПараметр("ДоступныеСотрудники", ДоступныеСотрудники);
	Запрос.УстановитьПараметр("ВыгружаемыВидыВремени", ВыгружаемыеВидыВремени);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	
	Если Филиалы = Неопределено Тогда
		Запрос.УстановитьПараметр("ГрафикиРаботыУсловиеОтбораПоФилиалу", Истина);
		Запрос.УстановитьПараметр("ЗаявкаРаботыУсловиеОтбораПоФилиалу", Истина);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГрафикиРаботыУсловиеОтбораПоФилиалу", "ГрафикиРаботы.Филиал В (&Филиалы)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаявкаРаботыУсловиеОтбораПоФилиалу", "ЗаявкаРаботы.Ссылка.Филиал В (&Филиалы)");
		Запрос.УстановитьПараметр("Филиалы", ФилиалыДляОтбора);
	КонецЕсли;
	
	ТаблицаИнтервалов = Запрос.Выполнить().Выгрузить();
	Для Каждого Интервал Из ТаблицаИнтервалов Цикл
		Интервал.ВремяНачала = Интервал.ВремяНачала - (НачалоДня(Интервал.ВремяНачала) - Дата(1,1,1));
		// Если полночь, то время окончания переносится на следующий день
		Если Интервал.ВремяОкончания = НачалоДня(Интервал.ВремяОкончания) Тогда
			Интервал.ВремяОкончания = КонецДня(Интервал.ВремяОкончания) + 1;
		Иначе
			Интервал.ВремяОкончания = Интервал.ВремяОкончания - (НачалоДня(Интервал.ВремяОкончания) - Дата(1,1,1));	
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаГрафиков = ТаблицаИнтервалов.СкопироватьКолонки();
	СтрокиКУдалению = Новый Массив;
	Для Каждого Строка Из ТаблицаИнтервалов Цикл
		Если Строка.ВидВремени <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаГрафиков.Добавить(), Строка);
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаГрафика Из СтрокиКУдалению Цикл
		ТаблицаИнтервалов.Удалить(СтрокаГрафика);
	КонецЦикла;
	
	ИзмеренияГрафика = "Дата, Сотрудник, Филиал";
	ТаблицаИзмеренийГрафика = ТаблицаГрафиков.Скопировать();
	ТаблицаИзмеренийГрафика.Свернуть(ИзмеренияГрафика,"");
	Отбор = Новый Структура(ИзмеренияГрафика);
	ТаблицаГрафиков.Индексы.Добавить(ИзмеренияГрафика);
	
	ТаблицаГрафиковОбъединенная = ТаблицаГрафиков.СкопироватьКолонки();
	
	ОстаткиСтрокиГрафика = ТаблицаГрафиков.СкопироватьКолонки();
	
	Для Каждого СтрокаИзмерения Из ТаблицаИзмеренийГрафика Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИзмерения);
		
		СтрокиГрафика = ТаблицаГрафиков.НайтиСтроки(Отбор);
		СтрокиОбъединенной = ТаблицаГрафиковОбъединенная.НайтиСтроки(Отбор);
		
		// Последняя строка всегда приоритетнее более ранней
		мОбрИнд = СтрокиГрафика.Количество()-1;
		СтрокиНаУдаление = Новый Массив;
		Для Сч = 0 По мОбрИнд Цикл
			
			ОстаткиСтрокиГрафика.Очистить();
			ЗаполнитьЗначенияСвойств(ОстаткиСтрокиГрафика.Добавить(), СтрокиГрафика[мОбрИнд-Сч]);
			
			Для Каждого СтрокаОбъединенной Из СтрокиОбъединенной Цикл
				
				Для Каждого СтрокаОстатка Из ОстаткиСтрокиГрафика Цикл
					
					ГрафикиСотрудников.ВычестьИнтервалИзПериода(СтрокаОстатка, СтрокаОбъединенной, ОстаткиСтрокиГрафика, СтрокиНаУдаление);
					
				КонецЦикла;
				
				Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
					ОстаткиСтрокиГрафика.Удалить(СтрокаНаУдаление);
				КонецЦикла;
				СтрокиНаУдаление.Очистить();
				
			КонецЦикла;
			
			Для Каждого СтрокаОстатка Из ОстаткиСтрокиГрафика Цикл
				СтрокаОбъединенной = ТаблицаГрафиковОбъединенная.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбъединенной, СтрокаОстатка);
				СтрокиОбъединенной.Добавить(СтрокаОбъединенной);
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаГрафика Из ТаблицаГрафиковОбъединенная Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИнтервалов.Добавить(), СтрокаГрафика);
	КонецЦикла;
	
	// Сортировка таблицы
	ТаблицаИнтервалов.Колонки.Добавить("СортировкаСотрудник", Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаТаблицы Из ТаблицаИнтервалов Цикл
		СтрокаТаблицы.СортировкаСотрудник = Строка(СтрокаТаблицы.Сотрудник.УникальныйИдентификатор());
	КонецЦикла;
	ТаблицаИнтервалов.Сортировать("СортировкаСотрудник, Дата, ВремяНачала, ВремяОкончания");
	ТаблицаИнтервалов.Колонки.Удалить("СортировкаСотрудник");
	
	ОбработаннаяТаблица = ТаблицаИнтервалов.СкопироватьКолонки();
	
	КолонкиГруппировки = "Филиал, Сотрудник, Дата, ЭтоРабочееВремя";
	Если ИнтеграцияССайтом Тогда
		Если Не ОтключитьДетализациюСвободногоВремениДоВидаВремени Тогда
			КолонкиГруппировки = КолонкиГруппировки + ", ВидВремени";
		КонецЕсли;
	Иначе
		КолонкиГруппировки = КолонкиГруппировки + ", ЗаявкаСсылка";
	КонецЕсли;
	
	ГруппировкиИнтервалов = ОбработаннаяТаблица.СкопироватьКолонки(КолонкиГруппировки);
	Отбор = Новый Структура(КолонкиГруппировки);
	ТаблицаИнтервалов.Индексы.Добавить(КолонкиГруппировки);
	ГруппировкиИнтервалов.Индексы.Добавить(КолонкиГруппировки);
	
	// Вычисляю уникальные сочетания группировок интервалов
	Для Каждого Интервал Из ТаблицаИнтервалов Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Интервал);
		Если ГруппировкиИнтервалов.НайтиСтроки(Отбор).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ГруппировкиИнтервалов.Добавить(), Отбор);
		КонецЕсли;
	КонецЦикла;
	
	// Шаг 1. Просто слияние всех соседних однородных интервалов
	Для Каждого СочетаниеГруппировок Из ГруппировкиИнтервалов Цикл
		
		ТекущаяСтрока = ОбработаннаяТаблица.Добавить();
		ПервыйПроход = Истина;
		
		ЗаполнитьЗначенияСвойств(Отбор, СочетаниеГруппировок);
		СтрокиИнтервалов = ТаблицаИнтервалов.НайтиСтроки(Отбор);
		Для Каждого СтрокаИнтервала Из СтрокиИнтервалов Цикл
			// Заполняю свежедобавленную строку интервала из выборки детальных записей.
			Если ПервыйПроход Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИнтервала);
				ПервыйПроход = Ложь;
			Иначе
				// Либо увеличиваю интевал текущей строки, либо оставляю её и создаю новую.
				Если ТекущаяСтрока.ВремяОкончания >= СтрокаИнтервала.ВремяНачала Тогда
					ТекущаяСтрока.ВремяОкончания = Макс(СтрокаИнтервала.ВремяОкончания, ТекущаяСтрока.ВремяОкончания);
				Иначе
					// Нынещний интервал уже закончился, а новый еще не начался - разрыв.
					ТекущаяСтрока = ОбработаннаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИнтервала);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Шаг 2. Удаление свободного времени, пересекающегося с занятым
	Отбор = Новый Структура("Сотрудник, Дата, ЭтоРабочееВремя");
	ОбработаннаяТаблица.Индексы.Добавить("Сотрудник, Дата, ЭтоРабочееВремя");
	
	СтрокиНерабочегоВремени = ОбработаннаяТаблица.НайтиСтроки(Новый Структура("ЭтоРабочееВремя", Ложь));
	Для Каждого СтрокаЗанятая Из СтрокиНерабочегоВремени Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаЗанятая);
		Отбор.ЭтоРабочееВремя = Истина;
		
		СтрокиСвободногоВремени = ОбработаннаяТаблица.НайтиСтроки(Отбор);
		Для Каждого СтрокаСвободногоВремени Из СтрокиСвободногоВремени Цикл
			// Если свободная строка пересекается с занятой строкой, то сокращаю/удаляю/расчленяю её.
			Если СтрокаСвободногоВремени.ВремяНачала >= СтрокаЗанятая.ВремяНачала
				И СтрокаСвободногоВремени.ВремяОкончания <= СтрокаЗанятая.ВремяОкончания
			Тогда
				// Вся свободная строка внутри занятой - удалить
				ОбработаннаяТаблица.Удалить(СтрокаСвободногоВремени);
				
			ИначеЕсли СтрокаСвободногоВремени.ВремяНачала >= СтрокаЗанятая.ВремяНачала
				И СтрокаСвободногоВремени.ВремяНачала < СтрокаЗанятая.ВремяОкончания
				И СтрокаСвободногоВремени.ВремяОкончания > СтрокаЗанятая.ВремяОкончания
			Тогда
				// Срезать начало
				СтрокаСвободногоВремени.ВремяНачала = СтрокаЗанятая.ВремяОкончания;
				
			ИначеЕсли СтрокаСвободногоВремени.ВремяНачала < СтрокаЗанятая.ВремяНачала
				И СтрокаСвободногоВремени.ВремяОкончания > СтрокаЗанятая.ВремяНачала
				И СтрокаСвободногоВремени.ВремяОкончания <= СтрокаЗанятая.ВремяОкончания
			Тогда
				// Срезать конец
				СтрокаСвободногоВремени.ВремяОкончания = СтрокаЗанятая.ВремяНачала;
				
			ИначеЕсли СтрокаСвободногоВремени.ВремяНачала < СтрокаЗанятая.ВремяНачала
				И СтрокаСвободногоВремени.ВремяОкончания > СтрокаЗанятая.ВремяОкончания
			Тогда
				// Расчленить на 2 части
				НоваяСтрока = ОбработаннаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвободногоВремени);
				НоваяСтрока.ВремяНачала = СтрокаЗанятая.ВремяОкончания;
				НоваяСтрока.ВремяОкончания = СтрокаСвободногоВремени.ВремяОкончания;
				
				СтрокаСвободногоВремени.ВремяОкончания = СтрокаЗанятая.ВремяНачала;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Сортировка таблицы.
	ОбработаннаяТаблица.Колонки.Добавить("СортировкаСотрудникФилиал", Новый ОписаниеТипов("Строка"));
	НаименованияСотрудников = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ОбработаннаяТаблица Цикл
		Если НаименованияСотрудников.Получить(СтрокаТаблицы.Сотрудник) = Неопределено Тогда
			НаименованияСотрудников.Вставить(Строка(СтрокаТаблицы.Сотрудник));
		КонецЕсли;
		СтрокаТаблицы.СортировкаСотрудникФилиал = Строка(НаименованияСотрудников.Получить(СтрокаТаблицы.Сотрудник)) + Строка(СтрокаТаблицы.Филиал.УникальныйИдентификатор());
	КонецЦикла;
	ОбработаннаяТаблица.Сортировать("СортировкаСотрудникФилиал, Дата Возр, ВремяНачала Возр, ВремяОкончания Возр");
	ОбработаннаяТаблица.Колонки.Удалить("СортировкаСотрудникФилиал");
	
	// Финальная подготовка таблицы
	ОбработаннаяТаблица.Колонки.ЭтоРабочееВремя.Имя = "Выгружать";
	
	Если ИнтеграцияССайтом Тогда
		ОбработаннаяТаблица.Колонки.Удалить("ЗаявкаСсылка");
	КонецЕсли;
	
	Возврат ОбработаннаяТаблица;
	
КонецФункции

Функция ОтправитьФайлНаFTPСервер(ПутьКФайлу,ДанныеДляПодключения,ИмяФайлаСРасширением = Неопределено)
	
	Если ИмяФайлаСРасширением = Неопределено Тогда
		ИмяФайлаСРасширением = Строка(Новый УникальныйИдентификатор)+".xml";
	КонецЕсли;
	
	Попытка
		АдресСайта  = СтрЗаменить(НРег(ДанныеДляПодключения.Адрес), "ftp://", "");
		Порт        = ДанныеДляПодключения.Порт;
		Логин       = ДанныеДляПодключения.Логин;
		Пароль      = ДанныеДляПодключения.Пароль;
		ИмяКаталога = ДанныеДляПодключения.ИмяКаталога;
	Исключение
		Возврат "Не заполнены все данные для подключения";
	КонецПопытки;
	
	Попытка
		FTPСоединение = Новый FTPСоединение(АдресСайта,Порт,Логин,Пароль,,,60);
	Исключение
		Возврат "Не удалось установить соединение с FTP сервером";
	КонецПопытки;
	
	Попытка
		FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	Исключение
		Возврат "Не удалось установить текущий каталог";
	КонецПопытки;
	
	Попытка
		FTPСоединение.Записать(ПутьКФайлу, ИмяФайлаСРасширением);
	Исключение
		Возврат "Не удалось записать файл";
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСотрудниковXDTO(НастройкиОбменаССайтом = Неопределено) Экспорт
	
	ТаблицаСотрудников = ПолучитьТаблицуСотрудников(НастройкиОбменаССайтом); 
	
	СотрудникиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S2", "Сотрудники"));
	Если Не ТаблицаСотрудников.Количество() = 0 Тогда
		Для Каждого СтрокаСотрудник Из ТаблицаСотрудников Цикл
			
			СотрудникXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S2", "Сотрудник"));
			СотрудникXDTO.UID = XMLСтрока(СтрокаСотрудник.UID);
			СотрудникXDTO.Наименование = XMLСтрока(СтрокаСотрудник.Наименование);
			СотрудникXDTO.Фамилия = XMLСтрока(СтрокаСотрудник.Фамилия);
			СотрудникXDTO.Имя = XMLСтрока(СтрокаСотрудник.Имя);
			СотрудникXDTO.Отчество = XMLСтрока(СтрокаСотрудник.Отчество);
			СотрудникXDTO.Специализация = XMLСтрока(СтрокаСотрудник.Специализация);
			СотрудникXDTO.Организация = XMLСтрока(СтрокаСотрудник.Ссылка.Подразделение.Филиал.УникальныйИдентификатор());
			Попытка
				СотрудникXDTO.КраткоеОписание = XMLСтрока(СтрЗаменить(СтрокаСотрудник.КраткоеОписание,Символы.ПС,"\r\n"));
			Исключение
			КонецПопытки;
			
			Попытка
				Если ЗначениеЗаполнено(СтрокаСотрудник.ДлительностьПриема) Тогда
					СотрудникXDTO.ДлительностьПриема = XMLСтрока(СтрокаСотрудник.ДлительностьПриема);
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ФотографииСотрудников.Хранилище
			|ИЗ
			|	РегистрСведений.ФотографииСотрудников КАК ФотографииСотрудников
			|ГДЕ
			|	ФотографииСотрудников.Сотрудник = &Сотрудник";
			Запрос.УстановитьПараметр("Сотрудник",СтрокаСотрудник.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СотрудникXDTO.Фото = Base64Строка(Выборка.Хранилище.Получить());
			КонецЕсли;
			
			ОсновныеУслугиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S2", "ОсновныеУслуги"));
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеУслугиСотрудников.Номенклатура,
			|	ОсновныеУслугиСотрудников.Часы,
			|	ОсновныеУслугиСотрудников.Минуты
			|ИЗ
			|	РегистрСведений.ОсновныеУслугиСотрудников КАК ОсновныеУслугиСотрудников
			|ГДЕ
			|	ОсновныеУслугиСотрудников.Сотрудник = &Сотрудник";
			
			Запрос.УстановитьПараметр("Сотрудник", СтрокаСотрудник.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОсновнаяУслугаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S2", "ОсновнаяУслуга"));
				ОсновнаяУслугаXDTO.UID = XMLСтрока(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
				Часы = ВыборкаДетальныеЗаписи.Часы + Цел(ВыборкаДетальныеЗаписи.Минуты/60);
				Минуты = ВыборкаДетальныеЗаписи.Минуты%60;
				Попытка
					ОсновнаяУслугаXDTO.Продолжительность = XMLСтрока(Дата(1, 1, 1, Часы, Минуты,0));
				Исключение 
				    ОсновнаяУслугаXDTO.Продолжительность = XMLСтрока(Дата(1, 1, 1, 0, 0,0));
				КонецПопытки;
				ОсновныеУслугиXDTO.ОсновнаяУслуга.Добавить(ОсновнаяУслугаXDTO);
			КонецЦикла;
			
			СотрудникXDTO.ОсновныеУслуги = ОсновныеУслугиXDTO;
			
			СотрудникиXDTO.Сотрудник.Добавить(СотрудникXDTO);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СотрудникиXDTO;
	
КонецФункции 

Функция ПолучитьТаблицуСотрудников (НастройкиОбменаССайтом) Экспорт
	
	Если Не НастройкиОбменаССайтом = Неопределено Тогда	
		СхемаКомпоновкиДанных = НастройкиОбменаССайтом.ПолучитьОбъект().ПолучитьМакет("ПоляШаблона");
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных)));
		
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		НастройкиОтбора = НастройкиОбменаССайтом.ХранилищеОтбор.Получить();
		Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора);
		КонецЕсли;
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		КомпоновщикНастроек.Настройки, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТаблицаЗначений = Новый ТаблицаЗначений;
		
		ТаблицаСотрудников = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		ТаблицаСотрудников.Колонки.Добавить("UID");
		Для каждого СтрокаСотрудников Из ТаблицаСотрудников Цикл
			СтрокаСотрудников.UID = СтрокаСотрудников.Ссылка.УникальныйИдентификатор();
		КонецЦикла;
		
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.Фамилия,
		|	Сотрудники.Имя,
		|	Сотрудники.Отчество,
		|   Сотрудники.КраткоеОписание";
		
		Если Справочники.Сотрудники.ПустаяСсылка().Метаданные().Реквизиты.Найти("Специализация") <> Неопределено Тогда	
			Запрос.Текст = Запрос.Текст +",
			|	Сотрудники.Специализация.Представление КАК Специализация";
		Иначе
			Запрос.Текст = Запрос.Текст +",
			|	"" "" КАК Специализация";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст +
		"
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.УчаствуетВКалендарномПланировании
		|	И НЕ Сотрудники.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
		ТаблицаСотрудников.Колонки.Добавить("UID");
		ТаблицаСотрудников.Колонки.Добавить("ДлительностьПриема");
		
		Для каждого СтрокаСотрудников Из ТаблицаСотрудников Цикл
			СтрокаСотрудников.UID = СтрокаСотрудников.Ссылка.УникальныйИдентификатор();
			СтрокаСотрудников.ДлительностьПриема = СтрокаСотрудников.ДлительностьПриема;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

Функция УдалениеДобавлениеСлешейВПути(Знач Путь)
	Если Не Лев(Путь,1) = "/" Тогда
		Путь = "/"+Путь;
	КонецЕсли;
	Если Прав(Путь,1) = "/" Тогда 
		Путь = Лев(Путь,СтрДлина(Путь)-1);	
	КонецЕсли;
	Возврат Путь;
КонецФункции

Функция ПолучитьКлиникиXDTO()
	
	Клиники = Справочники.Филиалы.Выбрать(); 
	
	КлиникиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "СписокКлиник"));
	Пока Клиники.Следующий() Цикл
		КлиникаXDTO					= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "Клиника"));
		//+2016.10.31 интеграция с сайтом
		КлиникаXDTO.UID 			= XMLСтрока(Клиники.Ссылка.УникальныйИдентификатор());
		//-2016.10.31 интеграция с сайтом
		КлиникаXDTO.Наименование	= XMLСтрока(Клиники.Наименование);
		
		КлиникиXDTO.Клиника.Добавить(КлиникаXDTO);
	КонецЦикла;
	
	Возврат КлиникиXDTO;
	
КонецФункции 

// Формирует каталог услуг по настройками обмена
//
// Параметры:
//  НастройкаИнтеграции	 - СправочникВыборка.НастройкиОбменаССайтом, Структура - настройки интеграции 
//  ДатаЦен				 - Дата - дата на которую выгружаются цены услуг
//  Прейскурант			 - СправочникСсылка.Прейскуранты - прейскурант по которому выгружаются цены.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица услуг с сопоставленными ценами.
//
Функция ПолучитьКаталогУслуг(НастройкаИнтеграции, ДатаЦен, Знач Прейскурант = Неопределено) Экспорт
	
	СтандартнаяПродолжительность = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПериодичностьПланирования");
	Если Прейскурант = Неопределено Тогда
		Прейскурант = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойПрейскурант");
	КонецЕсли;
	Если Не НастройкаИнтеграции = Неопределено Тогда	
		Если ТипЗнч(НастройкаИнтеграции) <> Тип("Структура")Тогда
			// Получение настроек установленных в настройках обмена с сайтом
			СхемаКомпоновкиДанных = НастройкаИнтеграции.ПолучитьОбъект().ПолучитьМакет("ПоляШаблонаНоменклатуры");
		КонецЕсли;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных)));
		
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		// Получение настроек отбора установленных в настройках обмена с сайтом
		НастройкиОтбора = НастройкаИнтеграции.ХранилищеОтборНоменклатуры.Получить();
		Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора);
		КонецЕсли;
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		КомпоновщикНастроек.Настройки, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТаблицаЗначений = Новый ТаблицаЗначений;
		
		// Получение результата запроса в виде таблицы значений 
		ТаблицаКаталога = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		МассивКаталога = Новый Массив;
		
		// Номенклатура выгружается в массив для дальнейшей передачи в запрос
		Для каждого Стр Из ТаблицаКаталога Цикл
			МассивКаталога.Добавить(Стр.Номенклатура);		
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ДатаЦен);
		Запрос.УстановитьПараметр("Прейскурант", Прейскурант);
		Запрос.УстановитьПараметр("Каталог", МассивКаталога);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Код,
		|	СпрНоменклатура.Наименование,
		|	ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(500)) КАК НаименованиеПолное,
		|	СпрНоменклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмерения,
		|	СпрНоменклатура.Артикул,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	СпрНоменклатура.Родитель,
		|	СпрНоменклатура.ЭтоГруппа,
		|	СпрНоменклатура.ВидНоменклатуры,
		|	ЕСТЬNULL(СпрНоменклатура.ПродолжительностьЧас, 0) КАК ПродолжительностьЧас,
		|	ЕСТЬNULL(СпрНоменклатура.ПродолжительностьМин, 0) КАК ПродолжительностьМин
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				Прейскурант = &Прейскурант
		|					И Номенклатура В (&Каталог)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&Каталог)
		|	И СпрНоменклатура.Ссылка <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
		
		ТаблицаКаталога = Запрос.Выполнить().Выгрузить();
		
		ТаблицаКаталога.Колонки.Добавить("UID");
		ТаблицаКаталога.Колонки.Добавить("Продолжительность");
		ТаблицаКаталога.Колонки.Добавить("Вид");
		ТаблицаКаталога.Колонки.Добавить("РодительНом");
		
		Для каждого СтрокаКаталога Из ТаблицаКаталога Цикл
			СтрокаКаталога.UID = СтрокаКаталога.Ссылка.УникальныйИдентификатор();
			Часы = СтрокаКаталога.ПродолжительностьЧас + Цел(СтрокаКаталога.ПродолжительностьМин/60);
			Минуты = СтрокаКаталога.ПродолжительностьМин%60;
			// Продолжительность берется из длительности услуги
			// У продолжителности услуги будет приоритет даже если в функции ПолучитьКаталогУслугXDTO у 
			// услуги заполнена длительность в основных услугах сотрудников
			Попытка
				СтрокаКаталога.Продолжительность = XMLСтрока(Дата(1, 1, 1, Часы, Минуты,0));
			Исключение 
				СтрокаКаталога.Продолжительность = XMLСтрока(СтандартнаяПродолжительность);
			КонецПопытки;
			
			Если СтрокаКаталога.Продолжительность = XMLСтрока(Дата(1,1,1,0,0,0)) Тогда
				СтрокаКаталога.Продолжительность = XMLСтрока(СтандартнаяПродолжительность);
			КонецЕсли;
			СтрокаКаталога.Вид = XMLСтрока(СтрокаКаталога.ВидНоменклатуры);
			СтрокаКаталога.РодительНом = XMLСтрока(СтрокаКаталога.Родитель.УникальныйИдентификатор());
		КонецЦикла;
		
	Иначе
		// Если не выбрана настройка интеграции выгружается вся номенклатура
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ДатаЦен);
		Запрос.УстановитьПараметр("Прейскурант", Прейскурант);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Код,
		|	СпрНоменклатура.Наименование,
		|	ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(500)) КАК НаименованиеПолное,
		|	СпрНоменклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмерения,
		|	СпрНоменклатура.Артикул,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	СпрНоменклатура.ЭтоГруппа,
		|	СпрНоменклатура.ВидНоменклатуры,
		|	ЕСТЬNULL(СпрНоменклатура.ПродолжительностьЧас, 0) КАК ПродолжительностьЧас,
		|	ЕСТЬNULL(СпрНоменклатура.ПродолжительностьМин, 0) КАК ПродолжительностьМин,
		|	СпрНоменклатура.Родитель
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Прейскурант = &Прейскурант) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СпрНоменклатура.Ссылка)"
		;
		
		ТаблицаКаталога = Запрос.Выполнить().Выгрузить();
		ТаблицаКаталога.Колонки.Добавить("UID");
		ТаблицаКаталога.Колонки.Добавить("Продолжительность");
		ТаблицаКаталога.Колонки.Добавить("Вид");
		ТаблицаКаталога.Колонки.Добавить("РодительНом");
		
		Для Каждого СтрокаКаталога Из ТаблицаКаталога Цикл
			СтрокаКаталога.UID = СтрокаКаталога.Ссылка.УникальныйИдентификатор();
			Часы = СтрокаКаталога.ПродолжительностьЧас + Цел(СтрокаКаталога.ПродолжительностьМин/60);
			Минуты = СтрокаКаталога.ПродолжительностьМин%60;
			// Продолжительность берется из длительности услуги
			// У продолжителности услуги будет приоритет даже если в функции ПолучитьКаталогУслугXDTO у 
			// услуги заполнена длительность в основных услугах сотрудников
			Попытка
				СтрокаКаталога.Продолжительность = XMLСтрока(Дата(1, 1, 1, Часы, Минуты,0));
			Исключение 
				СтрокаКаталога.Продолжительность = XMLСтрока(СтандартнаяПродолжительность);
			КонецПопытки;

			Если СтрокаКаталога.Продолжительность = XMLСтрока(Дата(1,1,1,0,0,0)) Тогда
				СтрокаКаталога.Продолжительность = XMLСтрока(СтандартнаяПродолжительность);
			КонецЕсли;
			СтрокаКаталога.Вид = XMLСтрока(СтрокаКаталога.ВидНоменклатуры);
			СтрокаКаталога.РодительНом = XMLСтрока(СтрокаКаталога.Родитель.УникальныйИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКаталога;
	
КонецФункции

Функция ПолучитьЛистыОжидания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистОжидания.Ссылка,
	|	ЛистОжидания.Клиент.Наименование КАК Наименование,
	|	ЛистОжидания.Клиент.Фамилия КАК Фамилия,
	|	ЛистОжидания.Клиент.Имя КАК Имя,
	|	ЛистОжидания.Клиент.Отчество КАК Отчество,
	|	ЛистОжидания.Клиент.Пол КАК Пол,
	|	ЛистОжидания.Клиент.ДатаРождения КАК ДатаРождения,
	|	ЛистОжидания.Филиал,
	|	ДОБАВИТЬКДАТЕ(ЛистОжиданияЖелаемоеВремя.Дата, МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЛистОжиданияЖелаемоеВремя.Начало, МИНУТА)) КАК ВремяЗаписи,
	|	ЛистОжидания.Примечание
	|ИЗ
	|	Документ.ЛистОжидания КАК ЛистОжидания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистОжидания.ЖелаемоеВремя КАК ЛистОжиданияЖелаемоеВремя
	|		ПО (ЛистОжиданияЖелаемоеВремя.Ссылка = ЛистОжидания.Ссылка)
	|			И (ЛистОжиданияЖелаемоеВремя.НомерСтроки = 1)";
	
	ТаблицаЛистов =  Запрос.Выполнить().Выгрузить();
	
	ТаблицаЛистов.Колонки.Добавить("ID");
	
	Для Каждого СтрокаЛистов Из ТаблицаЛистов Цикл
		СтрокаЛистов.ID = СтрокаЛистов.Ссылка.УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат ТаблицаЛистов;
	
КонецФункции 

Функция ПолучитьКаталогУслугXDTO(НастройкаОбмена) Экспорт
	
	Если ТипЗнч(НастройкаОбмена) = Тип("СправочникВыборка.НастройкиОбменаССайтом") Тогда
		ОбменССайтом = Истина;	
	Иначе
		ОбменССайтом = Ложь;
	КонецЕсли;
	
	Если Не ОбменССайтом Тогда
		ОсновныеУслуги = ПолучитьОсновныеУслуги(НастройкаОбмена);
	КонецЕсли;
	
	ТаблицаКаталога = ПолучитьКаталогУслуг(НастройкаОбмена,ТекущаяДата(),НастройкаОбмена.Прейскурант);
	
	КаталогиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S2", "Каталоги"));
	
	Для Каждого СтрокаКаталог Из ТаблицаКаталога Цикл
		
		КаталогXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S2", "Каталог"));
		КаталогXDTO.UID = XMLСтрока(СтрокаКаталог.UID);
		КаталогXDTO.Наименование = XMLСтрока(СтрокаКаталог.Наименование);
		КаталогXDTO.Артикул = XMLСтрока(СтрокаКаталог.Артикул);
		КаталогXDTO.БазоваяЕдиницаИзмерения = XMLСтрока(СтрокаКаталог.БазоваяЕдиницаИзмерения);
		КаталогXDTO.Цена = XMLСтрока(СтрокаКаталог.Цена);
		КаталогXDTO.Продолжительность = XMLСтрока(СтрокаКаталог.Продолжительность);
		КаталогXDTO.Вид = XMLСтрока(СтрокаКаталог.ВидНоменклатуры);
		КаталогXDTO.Родитель = XMLСтрока(СтрокаКаталог.РодительНом);
		КаталогXDTO.ЭтоПапка = XMLСтрока(СтрокаКаталог.ЭтоГруппа);
		
		КаталогиXDTO.Каталог.Добавить(КаталогXDTO);

		Если Не ОбменССайтом
			И ОсновныеУслуги.Количество() <> 0 
		Тогда
			Рез = ОсновныеУслуги.Найти(СтрокаКаталог.Ссылка,"Ссылка");
			Если Рез <> Неопределено Тогда
				ОсновныеУслуги.Удалить(Рез);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбменССайтом Тогда
		Для Каждого СтрокаКаталог Из ОсновныеУслуги Цикл
			
			КаталогXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S2", "Каталог"));
			КаталогXDTO.UID = XMLСтрока(СтрокаКаталог.UID);
			КаталогXDTO.Наименование = XMLСтрока(СтрокаКаталог.Наименование);
			КаталогXDTO.Артикул = XMLСтрока(СтрокаКаталог.Артикул);
			КаталогXDTO.БазоваяЕдиницаИзмерения = XMLСтрока(СтрокаКаталог.БазоваяЕдиницаИзмерения);
			КаталогXDTO.Цена = XMLСтрока(СтрокаКаталог.Цена);
			КаталогXDTO.Продолжительность = XMLСтрока(СтрокаКаталог.Продолжительность);
			КаталогXDTO.Вид = XMLСтрока(СтрокаКаталог.ВидНоменклатуры);
			КаталогXDTO.Родитель = XMLСтрока(СтрокаКаталог.РодительНом);
			КаталогXDTO.ЭтоПапка = XMLСтрока(СтрокаКаталог.ЭтоГруппа);
			
			КаталогиXDTO.Каталог.Добавить(КаталогXDTO);
			
		КонецЦикла; 
	КонецЕсли;
	
	Возврат КаталогиXDTO;
	
КонецФункции 

Функция ПолучитьОсновныеУслуги(НастройкиОбменаССайтом)
	
	СтандартнаяПродолжительность = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПериодичностьПланирования");
	
	// Сотрудники, проходящие отбор настройки обмена. Т.е. участвующие в этом обмене.
	ТаблицаСотрудниковДляОбмена = ПолучитьТаблицуСотрудников(НастройкиОбменаССайтом);
	
	Если ТаблицаСотрудниковДляОбмена.Количество() = 0 Тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Возврат Результат;
	КонецЕсли;
	
	// Если есть сотрудники, проходящие отбор этой настройки обена, то двигаемся далее.
	СотрудникиДляОбмена = ТаблицаСотрудниковДляОбмена.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Прейскурант", НастройкиОбменаССайтом.Прейскурант);
	Запрос.УстановитьПараметр("СотрудникиДляОбмена", СотрудникиДляОбмена);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеУслугиСотрудников.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОсновныеУслуги
	|ИЗ
	|	РегистрСведений.ОсновныеУслугиСотрудников КАК ОсновныеУслугиСотрудников
	|ГДЕ
	|	(ОсновныеУслугиСотрудников.Сотрудник В (&СотрудникиДляОбмена))
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Номенклатура.Ссылка КАК Ссылка,
	|	СпрНоменклатура.Номенклатура.Код КАК Код,
	|	СпрНоменклатура.Номенклатура.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(СпрНоменклатура.Номенклатура.НаименованиеПолное КАК СТРОКА(500)) КАК НаименованиеПолное,
	|	СпрНоменклатура.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмерения,
	|	СпрНоменклатура.Номенклатура.Артикул КАК Артикул,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	СпрНоменклатура.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СпрНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(СпрНоменклатура.Номенклатура.ПродолжительностьЧас, 0) КАК ПродолжительностьЧас,
	|	ЕСТЬNULL(СпрНоменклатура.Номенклатура.ПродолжительностьМин, 0) КАК ПродолжительностьМин,
	|	СпрНоменклатура.Номенклатура.Родитель КАК Родитель
	|ИЗ
	|	ОсновныеУслуги КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Прейскурант = &Прейскурант) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СпрНоменклатура.Номенклатура.Ссылка)";
	
	ТаблицаКаталога = Запрос.Выполнить().Выгрузить();
	ТаблицаКаталога.Колонки.Добавить("UID");
	ТаблицаКаталога.Колонки.Добавить("Продолжительность");
	ТаблицаКаталога.Колонки.Добавить("Вид");
	ТаблицаКаталога.Колонки.Добавить("РодительНом");
	
	Для Каждого СтрокаКаталога Из ТаблицаКаталога Цикл
		СтрокаКаталога.UID = СтрокаКаталога.Ссылка.УникальныйИдентификатор();
		Часы = СтрокаКаталога.ПродолжительностьЧас + Цел(СтрокаКаталога.ПродолжительностьМин/60);
		Минуты = СтрокаКаталога.ПродолжительностьМин%60;
		Попытка
			СтрокаКаталога.Продолжительность = XMLСтрока(Дата(1, 1, 1, Часы, Минуты,0));
		Исключение 
			СтрокаКаталога.Продолжительность = XMLСтрока(СтандартнаяПродолжительность);
		КонецПопытки;
		
		Если СтрокаКаталога.Продолжительность = XMLСтрока(Дата(1,1,1,0,0,0)) Тогда
			СтрокаКаталога.Продолжительность = XMLСтрока(СтандартнаяПродолжительность);
		КонецЕсли;
		СтрокаКаталога.Вид = XMLСтрока(СтрокаКаталога.ВидНоменклатуры);
		СтрокаКаталога.РодительНом = XMLСтрока(СтрокаКаталога.Родитель.УникальныйИдентификатор());
	КонецЦикла;
	
	Возврат ТаблицаКаталога;
	
КонецФункции

Функция СформироватьПустуюТаблицуИмпортаЗаписейВРасписаниеССайта()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипДата	  = Новый ОписаниеТипов("Дата");
	ТаблицаИмпорта = Новый ТаблицаЗначений;
	ТаблицаИмпорта.Колонки.Добавить("ДатаВремяЗаписи", ТипДата);
	ТаблицаИмпорта.Колонки.Добавить("Фамилия", ТипСтрока);
	ТаблицаИмпорта.Колонки.Добавить("Имя", ТипСтрока);
	ТаблицаИмпорта.Колонки.Добавить("Отчество", ТипСтрока);
	ТаблицаИмпорта.Колонки.Добавить("ДатаРождения", ТипДата);
	ТаблицаИмпорта.Колонки.Добавить("Пол", ТипСтрока); // "М" или "Ж"
	ТаблицаИмпорта.Колонки.Добавить("Описание", ТипСтрока);
	ТаблицаИмпорта.Колонки.Добавить("Телефон", ТипСтрока);
	ТаблицаИмпорта.Колонки.Добавить("Email", ТипСтрока);
	ТаблицаИмпорта.Колонки.Добавить("Филиал", Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	ТаблицаИмпорта.Колонки.Добавить("ИсточникИнформации", Новый ОписаниеТипов("СправочникСсылка.ИсточникиИнформации"));
	Возврат ТаблицаИмпорта;
	
КонецФункции

Функция ИмпортироватьЗаписиВРасписаниеССайта(ТаблицаИмпорта, НастройкиОбмена) Экспорт
	
	Для Каждого СтрокаИмпорта Из ОбщегоНазначенияСервер.ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблицаИмпорта) Цикл
		
		ДокОбъект = Документы.ЛистОжидания.СоздатьДокумент();
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		ДокОбъект.Примечание = СтрокаИмпорта.Описание;	
		
		Клиент = НайтиКлиента(СтрокаИмпорта, СтрокаИмпорта.Филиал, НастройкиОбмена);
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Клиент = СоздатьКлиента(СтрокаИмпорта);
		КонецЕсли;
		
		ДокОбъект.Клиент = Клиент;
		
		// Если в таблице импорта не заполнено, то брать из настройки интеграции. наверно, может быть пустым (заполняется в заявке) 
		ДокОбъект.Филиал = СтрокаИмпорта.Филиал;
		
		Если ЗначениеЗаполнено(СтрокаИмпорта.ДатаВремяЗаписи) Тогда
			СтрЖелаемоеВремя = ДокОбъект.ЖелаемоеВремя.Добавить();
			СтрЖелаемоеВремя.Дата = НачалоДня(СтрокаИмпорта.ДатаВремяЗаписи);
			Попытка
				СтрЖелаемоеВремя.Начало = '00010101'+(СтрокаИмпорта.ДатаВремяЗаписи - НачалоДня(СтрокаИмпорта.ДатаВремяЗаписи));
				Если СтрЖелаемоеВремя.Начало <> '00010101' Тогда 
					Если ЗначениеЗаполнено(ДокОбъект.Примечание) Тогда 
						ДокОбъект.Примечание = ДокОбъект.Примечание + Символы.ПС;
					КонецЕсли;
					ДокОбъект.Примечание = ДокОбъект.Примечание + "Желаемые дата и время записи: " + Строка(СтрокаИмпорта.ДатаВремяЗаписи);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		ДокОбъект.Записать();	
		
	КонецЦикла;
	
КонецФункции

Функция СформироватьТаблицуЗагрузкиЗаписей(ТекстХМЛ) Экспорт
	
	ТаблицаЗагрузки = СформироватьПустуюТаблицуИмпортаЗаписейВРасписаниеССайта();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстХМЛ);
	
	ЛистыОжиданияXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("S2", "ЛистыОжидания"));
	
	Для Индекс = 0 По ЛистыОжиданияXDTO.ЛистОжидания.Количество()-1 Цикл
		
		ЛистОжиданияXDTO = ЛистыОжиданияXDTO.ЛистОжидания.Получить(Индекс);
		СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
		СтрокаТаблицы.Фамилия = ЛистОжиданияXDTO.КлиентФамилия;
		СтрокаТаблицы.Имя = ЛистОжиданияXDTO.КлиентИмя;
		СтрокаТаблицы.Отчество = ЛистОжиданияXDTO.КлиентОтчество;
		СтрокаТаблицы.Пол = ЛистОжиданияXDTO.КлиентПол;
		СтрокаТаблицы.Телефон = "";
		СтрокаТаблицы.Email = "";
		
		Попытка
			СтрокаТаблицы.ДатаВремяЗаписи = ЛистОжиданияXDTO.ДатаВремяЗаписи;
		Исключение
			// Запись об ошибке считывания даты
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при преобразовании Date в дату.");
		КонецПопытки;
		
		Попытка
			СтрокаТаблицы.ДатаРождения = ЛистОжиданияXDTO.КлиентДатаРождения;
		Исключение
			// Запись об ошибке считывания даты
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при преобразовании TimeBegin в Дату.");
		КонецПопытки;
		
		СтрокаТаблицы.Описание = ЛистОжиданияXDTO.Описание;
		Попытка
			Филиал = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛистОжиданияXDTO.Филиал));
			Если ЗначениеЗаполнено(Филиал.Код) Тогда
				СтрокаТаблицы.Филиал = Филиал;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Филиал) Тогда 
			СтрокаТаблицы.Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗагрузки;	
	
КонецФункции // СформироватьТаблицуЗагрузкиЗаписей()

Функция ВыгрузитьПрайс(НастройкаОбмена)
	
	ОбъектXDTO = ВебИнтеграция.ПолучитьКаталогУслугXDTO(НастройкаОбмена);
	
	Запись = Новый ЗаписьXML;
	Путь = ПолучитьИмяВременногоФайла();
	
	Запись.ОткрытьФайл(Путь, "UTF-8"); 
	
	Запись.ЗаписатьОбъявлениеXML(); 
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	ДанныеXML = Запись.Закрыть(); 
	
	ИмяКаталога = ПолучитьИмяКаталогаНаСервере(СокрЛП(НастройкаОбмена.FTPСоединениеПуть));
	
	ДанныеДляПодключения = Новый Структура("Адрес, Порт, Логин, Пароль, ИмяКаталога",
	НастройкаОбмена.FTPСоединениеПуть,
	НастройкаОбмена.FTPСоединениеПорт,
	НастройкаОбмена.FTPСоединениеПользователь,
	НастройкаОбмена.FTPСоединениеПароль,
	ИмяКаталога); 
	
	ОтправитьФайлНаFTPСервер(Путь,ДанныеДляПодключения,"Price.xml")	
	
КонецФункции

Процедура ПометитьКакПрочитанныйДокумент(Документ, ПривилегированныйРежим = Ложь) Экспорт
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НепросмотренныеДокументыССайта) Тогда
		
		Запись = РегистрыСведений.НепросмотренныеДокументыССайта.СоздатьМенеджерЗаписи();
		Запись.Документ = Документ;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьНастройкиОбменаССайтом() Экспорт
	
	Возврат ЗначениеЗаполнено(ПолучитьНастройкиОбменаССайтом());
	
КонецФункции

Функция ПолучитьГрафикиРаботыXDTO(ДатаНачала, ДатаОкончания, ОписаниеОшибки, ИнтеграцияССайтом = Ложь, ДопПараметры = Неопределено, ОписаниеОшибкиParams = "") Экспорт
	
	ТаблицаГрафиков =  СформироватьТаблицыДляОбщегоГрафикаСУчетомНаложенияПериодов(ДатаНачала,ДатаОкончания, ИнтеграцияССайтом, ДопПараметры);
	
	ГрафикиДляСайтаXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ГрафикиДляСайта")); 
	
	ТекСотрудник = Неопределено;
	ТекФилиал = Неопределено;
	ПериодыГрафикаXDTO	= "";
	СвободноеВремяXDTO	= "";
	ЗанятоеВремяXDTO	= "";
	ГрафикДляСайтаXDTO = "";
	
	СтандартнаяДлительностьПриема = УправлениеНастройками.ПолучитьУчетнуюПолитику(ТекущаяДата()).ПериодичностьПланирования;	
	
	ЕстьРеквизитСпециализацияУСотрудника = Метаданные.Справочники.Сотрудники.Реквизиты.Найти("Специализация") <> Неопределено;
	
	Для Каждого СтрокаГрафиков Из ТаблицаГрафиков Цикл
		Если СтрокаГрафиков.Сотрудник <> ТекСотрудник Или СтрокаГрафиков.Филиал <> ТекФилиал Тогда
			Если ЗначениеЗаполнено(ТекСотрудник) Тогда 
				ПериодыГрафикаXDTO.СвободноеВремя	=	СвободноеВремяXDTO;
				ПериодыГрафикаXDTO.ЗанятоеВремя		=	ЗанятоеВремяXDTO;
				ГрафикДляСайтаXDTO.ПериодыГрафика	=	ПериодыГрафикаXDTO;
				ГрафикиДляСайтаXDTO.ГрафикДляСайта.Добавить(ГрафикДляСайтаXDTO);
			КонецЕсли;
			
			ГрафикДляСайтаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ГрафикДляСайта"));
			
			ГрафикДляСайтаXDTO.СотрудникФИО 		= СтрокаГрафиков.Сотрудник.Наименование;
			ГрафикДляСайтаXDTO.СотрудникID			= XMLСтрока(СтрокаГрафиков.Сотрудник.УникальныйИдентификатор());
			ГрафикДляСайтаXDTO.Специализация		= СтрокаГрафиков.Сотрудник.Специализация.Наименование;
			ГрафикДляСайтаXDTO.Клиника			  	= XMLСтрока(СтрокаГрафиков.Филиал.УникальныйИдентификатор());
			
			Если СтрокаГрафиков.Сотрудник.ДлительностьПриема <> '00010101000000' Тогда
				ГрафикДляСайтаXDTO.ДлительностьПриема = СтрокаГрафиков.Сотрудник.ДлительностьПриема;
			ИначеЕсли ЕстьРеквизитСпециализацияУСотрудника И СтрокаГрафиков.Сотрудник.Специализация.ДлительностьПриема <> '00010101000000' Тогда
				ГрафикДляСайтаXDTO.ДлительностьПриема = СтрокаГрафиков.Сотрудник.Специализация.ДлительностьПриема;	
			Иначе
				ГрафикДляСайтаXDTO.ДлительностьПриема = Дата(1,1,1); // СтандартнаяДлительностьПриема;.
			КонецЕсли;		
			
			ПериодыГрафикаXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ПериодыГрафика"));
			СвободноеВремяXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "СвободноеВремя"));
			ЗанятоеВремяXDTO	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ЗанятоеВремя"));
			ТекСотрудник = СтрокаГрафиков.Сотрудник;
			ТекФилиал = СтрокаГрафиков.Филиал;
		КонецЕсли;
		
		Если СтрокаГрафиков.Выгружать Тогда
			СвободныйИнтервалXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ПериодГрафикаУкрупненного"));
			СвободныйИнтервалXDTO.Клиника			= XMLСтрока(СтрокаГрафиков.Филиал.УникальныйИдентификатор());
			СвободныйИнтервалXDTO.ВремяНачала		= XMLСтрока(НачалоДня(СтрокаГрафиков.Дата) + 
			(СтрокаГрафиков.ВремяНачала - НачалоДня(СтрокаГрафиков.ВремяНачала)));
			
			//	Если время окончания выпадает на полночь, день изменяется на следующий
			Если СтрокаГрафиков.ВремяОкончания = НачалоДня(СтрокаГрафиков.ВремяОкончания) Тогда
				СвободныйИнтервалXDTO.ВремяОкончания = XMLСтрока(КонецДня(СтрокаГрафиков.Дата) + 1);
			Иначе
				СвободныйИнтервалXDTO.ВремяОкончания	= XMLСтрока(НачалоДня(СтрокаГрафиков.Дата) +
				(СтрокаГрафиков.ВремяОкончания - НачалоДня(СтрокаГрафиков.ВремяОкончания)));
			КонецЕсли;
			
			СвободныйИнтервалXDTO.Дата				= XMLСтрока(СтрокаГрафиков.Дата);
			СвободныйИнтервалXDTO.ВидВремени		= XMLСтрока(СтрокаГрафиков.ВидВремени);
			СвободноеВремяXDTO.ПериодГрафика.Добавить(СвободныйИнтервалXDTO);	
		Иначе
			ЗанятыйИнтервалXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ПериодГрафикаУкрупненного"));
			ЗанятыйИнтервалXDTO.Клиника			= XMLСтрока(СтрокаГрафиков.Филиал.УникальныйИдентификатор());
			ЗанятыйИнтервалXDTO.ВремяНачала		= XMLСтрока(НачалоДня(СтрокаГрафиков.Дата) + 
			(СтрокаГрафиков.ВремяНачала - НачалоДня(СтрокаГрафиков.ВремяНачала)));
			ЗанятыйИнтервалXDTO.ВремяОкончания	= XMLСтрока(НачалоДня(СтрокаГрафиков.Дата) + 
			(СтрокаГрафиков.ВремяОкончания - НачалоДня(СтрокаГрафиков.ВремяОкончания)));
			ЗанятыйИнтервалXDTO.Дата			= XMLСтрока(СтрокаГрафиков.Дата);
			ЗанятыйИнтервалXDTO.ВидВремени		= XMLСтрока(СтрокаГрафиков.ВидВремени);
			
			ЗанятоеВремяXDTO.ПериодГрафика.Добавить(ЗанятыйИнтервалXDTO);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекСотрудник) Тогда 
		ПериодыГрафикаXDTO.СвободноеВремя	=	СвободноеВремяXDTO;
		ПериодыГрафикаXDTO.ЗанятоеВремя		=	ЗанятоеВремяXDTO;
		ГрафикДляСайтаXDTO.ПериодыГрафика	=	ПериодыГрафикаXDTO;
		ГрафикиДляСайтаXDTO.ГрафикДляСайта.Добавить(ГрафикДляСайтаXDTO);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеОшибкиParams) Тогда
        ГрафикиДляСайтаXDTO.ОшибкаПараметров = ОписаниеОшибкиParams;
	КонецЕсли;	
    	
	Возврат ГрафикиДляСайтаXDTO;
	
КонецФункции

Процедура ОтправитьГрафикиРаботыFTP(Настройки) Экспорт
	
	ДатаНачала = НачалоНедели(ТекущаяДата());
	ДатаОкончания = '29990101';
	Попытка 
		ОбъектXDTO = ПолучитьГрафикиРаботыXDTO(ДатаНачала, ДатаОкончания, "", Истина, Новый Структура("НастройкиОбмена", Настройки));
		
		Запись = Новый ЗаписьXML;
		Путь = ПолучитьИмяВременногоФайла();
		
		Запись.ОткрытьФайл(Путь, "UTF-8"); 
		
		Запись.ЗаписатьОбъявлениеXML(); 
		
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
		ДанныеXML = Запись.Закрыть(); 
		
		ИмяКаталога = ПолучитьИмяКаталогаНаСервере(СокрЛП(Настройки.FTPСоединениеПуть));
		
		ДанныеДляПодключения = Новый Структура("Адрес, Порт, Логин, Пароль, ИмяКаталога",
		Настройки.FTPСоединениеПуть,
		Настройки.FTPСоединениеПорт,
		Настройки.FTPСоединениеПользователь,
		Настройки.FTPСоединениеПароль,
		ИмяКаталога);
		
		СообщениеОбОшибке = ОтправитьФайлНаFTPСервер(Путь,ДанныеДляПодключения,"Schedule.xml");
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Произошла ошибка при отправке расписания! По причине: """+СообщениеОбОшибке+"""");
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьВыгружаемыеВидыВремени(ОтключитьДетализациюСвободногоВремениДоВидаВремени = Ложь, НастройкаОбменаССайтом = Неопределено) Экспорт
	
	ВыгружаемыеВидыВремени = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НастройкаОбменаССайтом) Тогда
		НастройкаОбменаССайтом = ПолучитьНастройкиОбменаССайтом();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОбменаССайтом) Тогда
		
		Для Каждого СтрокаВид Из НастройкаОбменаССайтом.ВыгружаемыеВидыВремени Цикл
			Если ВыгружаемыеВидыВремени.Найти(СтрокаВид.ВидВремени) = Неопределено Тогда
				ВыгружаемыеВидыВремени.Добавить(СтрокаВид.ВидВремени);
			КонецЕсли;
		КонецЦикла;
		Если НастройкаОбменаССайтом.ОтключитьДетализациюСвободногоВремениДоВидаВремени Тогда
			ОтключитьДетализациюСвободногоВремениДоВидаВремени = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыгружаемыеВидыВремени.Количество() = 0 Тогда
		ВыгружаемыеВидыВремени = ГрафикиСотрудников.ПолучитьВидыВремени(Истина); // Все виды рабочего времени.
	КонецЕсли;
	
	Возврат ВыгружаемыеВидыВремени;
	
КонецФункции
 
Функция ПолучитьИмяКаталогаНаСервере(АдресСайта)
	
	Попытка
		ОбработкаТранспортСообщенийОбменаFTP = Обработки.ТранспортСообщенийОбменаFTP.Создать();
		СерверИКаталогНаСервере = ОбработкаТранспортСообщенийОбменаFTP.РазделитьFTPРесурсНаСерверИКаталог(АдресСайта); 
		ИмяКаталога = СерверИКаталогНаСервере.ИмяКаталога;
	Исключение
		ИмяКаталога = "/";
	КонецПопытки;
	
	Возврат ИмяКаталога;
	
КонецФункции

// Функция - Получить статус заявки для сайта
//
// Параметры:
//  Заявка			 - ДокументСсылка.Заявка - Заявка.
//  ОписаниеОшибки	 - Строка - Если не заполнено, но в процессе выполнения процедуры получить состояние не получилось, в неё помещается описание ошибки.
// 
// Возвращаемое значение:
//   Строка - текст XML пакета, собдержащего ответ с кодом веб-состояния заявки.
//
Функция ПолучитьСтатусЗаявкиДляСайта(Заявка, ОписаниеОшибки) Экспорт
	
	Попытка
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			КодСтатуса = ПолучитьВебСтатусЗаявки(Заявка, ОписаниеОшибки);
			ОписанияРезультатов = ПолучитьСоответствиеРезультатовИОписаний();

		КонецЕсли;
		
		ОписаниеРезультата = ОписанияРезультатов.Получить(КодСтатуса);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеРезультата, ОписаниеОшибки, ". ");
		КонецЕсли; 
		
		ЗаписьXML  = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ОтветXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("S1", "ОтветНаЗапросСтатусаЗаявки"));
		ОтветXDTO.Результат				= XMLСтрока(КодСтатуса);
		ОтветXDTO.ОписаниеРезультата	= XMLСтрока(ОписаниеРезультата);
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтветXDTO);
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Возврат СтрокаXML;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();
		Возврат "В процедуре ВебИнтеграция.ПолучитьСтатусЗаявкиДляСайта(Заявка, ОписаниеОшибки) возникла ошибка. " + ОписаниеОшибки;	
	КонецПопытки;
	
КонецФункции

// Функция - Получить статус заявки для сайта
//
// Параметры:
//  Заявка			 - ДокументСсылка.Заявка - Заявка.
//  ОписаниеОшибки	 - Строка - Если не заполнено, но в процессе выполнения процедуры получить состояние не получилось, в неё помещается описание ошибки.
// 
// Возвращаемое значение:
//   - Число - код веб-состояния заявки.
//
Функция ПолучитьВебСтатусЗаявки(Заявка, ОписаниеОшибки) Экспорт
	
	Результат = 0;
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		СостояниеЗаявки = Заявка.Состояние;
		СобытиеУжеНаступило = ТекущаяДатаСеанса() >= Заявка.ДатаНачала;
		ТипСостояния = ?(ЗначениеЗаполнено(СостояниеЗаявки), СостояниеЗаявки.ТипСостояния, Перечисления.ТипыСостоянийЗаявок.ПустаяСсылка());
		
		мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
		
		// Сверимся с предопределенными состояниями
		Если Не ЗначениеЗаполнено(Заявка) Тогда
			Результат = 0;
			ОписаниеОшибки = "Не задан документ заявки.";
		ИначеЕсли СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Забронирована Тогда
			Результат = 9;
		ИначеЕсли СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.СозданаНаСайте Тогда
			Результат = ?(СобытиеУжеНаступило, 4, 1);
		ИначеЕсли СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Отменена Тогда
			Результат = 5;
		ИначеЕсли СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Запланирована Тогда
			Результат = ?(СобытиеУжеНаступило, 4, 2);
		ИначеЕсли	СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Выполнена
				Или СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Оплачена
				Или СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Прием
		Тогда
			Результат = 3;
		// Сверимся с типом пользовательского состояния	
		ИначеЕсли ТипСостояния = Перечисления.ТипыСостоянийЗаявок.ПустаяСсылка() Тогда
			Результат = ?(СобытиеУжеНаступило, 4, 2);	
		ИначеЕсли ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена Тогда
			Результат = 5;
		ИначеЕсли	ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Пришел
				Или ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Выполнена
				Или ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Выполняется
		Тогда
			Результат = 3;
		// Сверимся с пользовательскими состояниями, указанными в учетной политике
		ИначеЕсли СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Запланирована Тогда
			Результат = ?(СобытиеУжеНаступило, 4, 2);		
		ИначеЕсли 	СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Оплачена
				Или СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Прием
				Или СостояниеЗаявки = Справочники.ВидыСостоянийЗаявок.Выполнена
		Тогда
			Результат = 3;
		Иначе 
		// Сюда не должны попасть ни при каком теоретическом раскладе, но если попали, то надо зафиксировать как неожиданный результат обработки.
			Результат = 0;
			ОписаниеОшибки = "Не удалось вычислить статус для текущего состояния заявки.";
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоответствиеРезультатовИОписаний()
	
	ОписанияРезультатов = Новый Соответствие();
	ОписанияРезультатов.Вставить(0, "Ошибка при обработке");
	ОписанияРезультатов.Вставить(1, "Новая");
	ОписанияРезультатов.Вставить(2, "Обработана");
	ОписанияРезультатов.Вставить(3, "Пришел");
	ОписанияРезультатов.Вставить(4, "Не пришел");
	ОписанияРезультатов.Вставить(5, "Отмена");
	ОписанияРезультатов.Вставить(6, "Резерв времени"); 
	
	Возврат ОписанияРезультатов;
	
КонецФункции

// Получить сотрудников по отбору настройки обмена с сайтом. Если настройка не указана, берется произвольная настройка не с внешним сервисом.
//
// Параметры:
//  НастройкаОбменаССайтом	 - СправочникСсылка.НастройкиОбменаССайтом	 - настройка обмена.
// 
// Возвращаемое значение:
//  Массив - с СправочникСсылка.Сотрудники.
//
Функция ПолучитьДоступныхСотрудников(НастройкаОбменаССайтом = Неопределено) Экспорт
	
	ДоступныеСотрудники = Новый Массив;
	
	// Получаем схему из макета
	СхемаКомпоновкиДанных = Справочники.НастройкиОбменаССайтом.ПолучитьМакет("ПоляШаблона");
	
	Если Не ЗначениеЗаполнено(НастройкаОбменаССайтом) Тогда
		НастройкиОбменаССайтом = ПолучитьНастройкиОбменаССайтом();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОбменаССайтом) Тогда
		
		Настройки = НастройкаОбменаССайтом.ХранилищеОтбор.Получить();
		// Помещаем в переменную данные о расшифровке данных
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		// Формируем макет, с помощью компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		// Передаем в макет компоновки схему, настройки и данные расшифровки
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		//Выполним компоновку с помощью процессора компоновки
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		// Очищаем поле табличного документа
		Результат = Новый ТаблицаЗначений();
		
		// Выводим результат в табличный документ
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеСотрудники, Результат.ВыгрузитьКолонку("Ссылка"), Истина);
	КонецЕсли;
	
	// Случай, когда не задали настройки обмена с сайтом
	Если Не ЗначениеЗаполнено(НастройкаОбменаССайтом) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.УчаствуетВКалендарномПланировании
		|	И НЕ Сотрудники.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудники.Наименование";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выгрузка = РезультатЗапроса.Выгрузить();
		ДоступныеСотрудники = Выгрузка.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат ДоступныеСотрудники;
	
КонецФункции

Функция ПолучитьНастройкиОбменаССайтом(Филиал = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.НастройкиОбменаССайтом.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если  Не Выборка.ПометкаУдаления
			И Не Выборка.ИнтеграцияСВнешнимСервисом
			И (Филиал = Неопределено Или Выборка.Клиника = Филиал)
		Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СоздатьЛистОжиданияПоЗаявкеНовогоКлиента(Заявка)
	
	НастройкаОбменаССайтом = ПолучитьНастройкиОбменаССайтом();
	
	Если НастройкаОбменаССайтом.СоздаватьЛистОжиданияПоЗаявкеНовогоКлиента
		И ЗначениеЗаполнено(НастройкаОбменаССайтом.ИсточникИнформации)
	Тогда
		CRMСервер.СоздатьЛистОжиданияПоЗаявкеНовогоКлиента(НастройкаОбменаССайтом.ИсточникИнформации, НастройкаОбменаССайтом.ТипРекламы, Заявка.Клиент, Заявка.Дата);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Конвертер из XML в JSON
//
// Параметры:
//  ТекстXML - Строка, содержащая текст XML файла.
// 
// Возвращаемое значение:
//   Строка - преобразованный текст в формате JSON.
//
Функция XML2JSON (ТекстXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	Отступ = "    ";
	СтрокаРезультат = "";
	СтрокаШапка = "";
	ИмяПредыдущегоУзла = Неопределено;
	Шаблон1 = "%1"+Символы.ПС+"%2"+"""%3"": ";
	Шаблон2 = "%1" + """%2""";
	Шаблон3 = "%1["+Символы.ПС+"%2";
	Шаблон4 = "%1"+Символы.ПС+"%2}";
	
	МассивНайденныхИмен = Новый Массив();
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяПредыдущегоУзла = ЧтениеXML.Имя Тогда
			Если МассивНайденныхИмен.Найти(ЧтениеXML.Имя) = Неопределено Тогда
				МассивНайденныхИмен.Добавить(ЧтениеXML.Имя);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента  Тогда
			ИмяПредыдущегоУзла = ЧтениеXML.Имя;
		Иначе
			ИмяПредыдущегоУзла = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	ИмяПредыдущегоУзла = Неопределено;
	ТипПредыдущегоУзлаНачалоЭлемента = Ложь;
	ТипПредыдущегоУзлаКонецЭлемента = Ложь;
	ЧтениеXML.Прочитать();
	СтрокаШапка  = СтрокаШапка + "{" + Символы.ПС + Отступ + """" + Строка(ЧтениеXML.Имя)+ """: {";
	Отступ = Отступ + "    ";
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя <> ИмяПредыдущегоУзла И МассивНайденныхИмен.Найти(ИмяПредыдущегоУзла) <> Неопределено И ТипПредыдущегоУзлаКонецЭлемента Тогда
			СтрокаРезультат = СтрокаРезультат + Символы.ПС + Отступ + "]";
			Отступ = Лев(Отступ, СтрДлина(Отступ) - 4);
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ТипПредыдущегоУзлаНачалоЭлемента = Истина Тогда
				СтрокаРезультат = СтрокаРезультат + "{";
				Отступ = Отступ + "    ";
			ИначеЕсли  ТипПредыдущегоУзлаНачалоЭлемента = Ложь Тогда
				СтрокаРезультат = СтрокаРезультат + ",";
			КонецЕсли;
			Отступ = Отступ + "    ";
			Если МассивНайденныхИмен.Найти(ЧтениеXML.Имя) <> Неопределено И ИмяПредыдущегоУзла = ЧтениеXML.Имя Тогда 
				СтрокаРезультат = СтрокаРезультат + Символы.ПС + Отступ;
			Иначе
				СтрокаРезультат  = СтрШаблон(Шаблон1, СтрокаРезультат, Отступ, Строка(ЧтениеXML.Имя));
			КонецЕсли;
			Если МассивНайденныхИмен.Найти(ЧтениеXML.Имя) <> Неопределено И ИмяПредыдущегоУзла <> ЧтениеXML.Имя Тогда
				Отступ = Отступ + "    ";
				СтрокаРезультат  = СтрШаблон(Шаблон3, СтрокаРезультат, Отступ);
			КонецЕсли;
			ТипПредыдущегоУзлаНачалоЭлемента = Истина;
			ТипПредыдущегоУзлаКонецЭлемента = Ложь;
			ИмяПредыдущегоУзла = ЧтениеXML.Имя;

		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Отступ = Лев(Отступ, СтрДлина(Отступ) - 4);
			Если ТипПредыдущегоУзлаКонецЭлемента = Истина Тогда
				
				Если Прав(СтрокаРезультат, 1) = "," Тогда
					СтрокаРезультат = Лев(СтрокаРезультат, СтрДлина(СтрокаРезультат) - 1);
				КонецЕсли;
				СтрокаРезультат  = СтрШаблон(Шаблон4, СтрокаРезультат, Отступ);
				Отступ = Лев(Отступ, СтрДлина(Отступ) - 4);				
			КонецЕсли;
			Если ТипПредыдущегоУзлаНачалоЭлемента = Истина Тогда
				СтрокаРезультат  = СтрокаРезультат +  """""";
			КонецЕсли;
			ТипПредыдущегоУзлаНачалоЭлемента = Ложь;
			ТипПредыдущегоУзлаКонецЭлемента = Истина;
			ИмяПредыдущегоУзла = ЧтениеXML.Имя;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаРезультат  = СтрШаблон(Шаблон2, СтрокаРезультат, Строка(ЧтениеXML.Значение));
			ТипПредыдущегоУзлаНачалоЭлемента = Ложь;
			ТипПредыдущегоУзлаКонецЭлемента = Ложь;
			ИмяПредыдущегоУзла = ЧтениеXML.Имя;
		КонецЕсли;
	КонецЦикла;
	СтрокаРезультат = Прав(СтрокаРезультат, СтрДлина(СтрокаРезультат) - 1);
	СтрокаРезультат = Лев(СтрокаРезультат, СтрДлина(СтрокаРезультат) - 1);
	СтрокаРезультат  = СтрокаШапка + СтрокаРезультат +  "}" + Символы.ПС + "}";
	Возврат СтрокаРезультат;
	
КонецФункции

// Функция - Архивировать файл
//
// Параметры:
//  Файл -	файл, который необходимо поместить в архив.		
// 
// Возвращаемое значение:
//   Строка в формате BASE64 содержащая файл .zip, который содержит переданный файл.
//
Функция АрхивироватьФайл(Файл) Экспорт
	
	НовыйАрхив = Новый ЗаписьZipФайла();
	НовыйАрхив.Добавить(Файл);
	СтрокаBASE64 = Base64Строка(НовыйАрхив.ПолучитьДвоичныеДанные());
	Возврат СтрокаBASE64;
	
КонецФункции

// Функция - Нормативная длительность услуг
//
// Параметры:
//  Услуги - массив, содержащий услуги.	
//  Сотрудник - СправочникСсылка.Сотрудники, необязательный параметр, содержащий сотрудника для поиска в регистре "ОсновныеУслугиСотрудников".	
// 
// Возвращаемое значение:
//   Число - длительность услуг в секундах.
//
Функция НормативнаяДлительностьУслуг(Услуги, Сотрудник = Неопределено) Экспорт
	
	ДлительностьУслуги = Дата('00010101');
	ИспользоватьРегистрОсновныеУслугиСотрудников = Ложь;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеУслугиСотрудников.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ОсновныеУслугиСотрудников.Часы, 0) КАК Часы,
		|	ЕСТЬNULL(ОсновныеУслугиСотрудников.Минуты, 0) КАК Минуты
		|ИЗ
		|	РегистрСведений.ОсновныеУслугиСотрудников КАК ОсновныеУслугиСотрудников
		|ГДЕ
		|	ОсновныеУслугиСотрудников.Сотрудник = &Сотрудник
		|	И ОсновныеУслугиСотрудников.Номенклатура В(&Номенклатура)";
		
		Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
		Запрос.УстановитьПараметр("Номенклатура",Услуги);
		
		НайденнаяДлительность = Запрос.Выполнить().Выгрузить();
		Если НайденнаяДлительность.Количество() > 0 Тогда
			ИспользоватьРегистрОсновныеУслугиСотрудников = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УслугиСДлительностью = Новый Соответствие;
	
	Для Каждого Услуга Из Услуги Цикл
		
		ПродолжительностьНайдена = Ложь;
		ДлительностьУслуги = 0;
		
		Если ИспользоватьРегистрОсновныеУслугиСотрудников Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Услуга);
			РезультатОтбора = НайденнаяДлительность.НайтиСтроки(ПараметрыОтбора);
			Если РезультатОтбора.Количество() <> 0 Тогда
				ДлительностьУслуги = РезультатОтбора[0].Часы * 3600 + РезультатОтбора[0].Минуты * 60;
				Если ЗначениеЗаполнено(ДлительностьУслуги) Тогда
					ПродолжительностьНайдена = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПродолжительностьНайдена Тогда 
			Если ЗначениеЗаполнено(Услуга.ПродолжительностьЧас) Тогда
				ДлительностьУслуги = Услуга.ПродолжительностьЧас * 3600;
				ПродолжительностьНайдена = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Услуга.ПродолжительностьМин) Тогда
				ДлительностьУслуги = ДлительностьУслуги + Услуга.ПродолжительностьМин * 60;
				ПродолжительностьНайдена = Истина;
			КонецЕсли;
		КонецЕсли;
		УслугиСДлительностью.Вставить(Услуга, ДлительностьУслуги); 
	КонецЦикла;
	Возврат УслугиСДлительностью;
	
КонецФункции

#КонецОбласти