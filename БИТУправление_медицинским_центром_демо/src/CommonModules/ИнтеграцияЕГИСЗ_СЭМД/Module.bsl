
#Область ПрограммныйИнтерфейс

// Получить текст макета справочника
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыМедицинскихДокументов - вид медицинского документа
// 
// Возвращаемое значение:
//  Строка - Текст макета
//
Функция ПолучитьМакетСправочникаПоВидуДокумента(ВидДокумента) Экспорт
	
	МакетСправочникаПоOid = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ПолучитьМакетСправочникаПоOid(ВидДокумента.OIDКлассификатораМинздрава);
	
	Если ЗначениеЗаполнено(МакетСправочникаПоOid) Тогда
		ВырезатьЛишниеЭлементы(МакетСправочникаПоOid);
	КонецЕсли;
	
	Возврат МакетСправочникаПоOid;
	
КонецФункции

Процедура ВырезатьЛишниеЭлементы(МакетСправочникаПоOid)
	
	Документ = ПолучитьXML(МакетСправочникаПоOid);
	ЛишниеЭлементы = РаботаСDOMКлиентСервер.ПолучитьЭлементыПоИмени(Документ, "bitOther", Истина);
	Для Каждого ЛишнийЭлемент Из ЛишниеЭлементы Цикл
		ЛишнийЭлемент.РодительскийУзел.УдалитьДочерний(ЛишнийЭлемент);
	КонецЦикла;
	
	МакетСправочникаПоOid = РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(Документ);
	
КонецПроцедуры

Функция СписокLocalidМакета(МакетXML, ТаблицаПараметров = Неопределено) Экспорт
	
	Документ = ПолучитьXML(МакетXML);
	СписокLocalid = Новый Соответствие();
	РекурсивныйОбходXMLДляLocalid(Документ, СписокLocalid, ТаблицаПараметров);
	
	СписокРезультат = Новый Соответствие;
	
	Для Каждого СтрокаLocalid Из СписокLocalid Цикл
		СтрокаLocalid = СтрокаLocalid.Значение;
		Если СтрокаLocalid.Свойство("ТипДанных") Или СтрокаLocalid.Свойство("Классификатор") Тогда
			СтрокаLocalid.Вставить("Обязательное", Не СтрокаLocalid.Свойство("Обязательное") Или СтрокаLocalid.Обязательное);
			СтрокаLocalid.Вставить("Множественное", СтрокаLocalid.Свойство("Множественное") И СтрокаLocalid.Множественное);
			СписокРезультат.Вставить(СтрокаLocalid.localid, СтрокаLocalid);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

// Возвращает список localid с параметрами по виду документа
//
// Параметры:
//  ВидДокумента - СправочникСсылка.РегистрируемыеЭлектронныеМедДокументы - Вид РЭМДа
// 
// Возвращаемое значение:
//  Массив - массив структур localid
//
Функция МассивLocalidДокумента(ВидДокумента, ВернутьСоответствие = Ложь, ТаблицаПараметров = Неопределено) Экспорт
	
	СписокLocalid = Новый Массив();
	
	МакетXML = ПолучитьМакетСправочникаПоВидуДокумента(ВидДокумента);
	Если ЗначениеЗаполнено(МакетXML) Тогда
		СписокLocalid = СписокLocalidМакета(МакетXML, ТаблицаПараметров);
	КонецЕсли;
	
	Если Не ВернутьСоответствие Тогда
		СписокРезультат = Новый Массив;
		Для Каждого СоответствиеLocalid Из СписокLocalid Цикл
			СписокРезультат.Добавить(СоответствиеLocalid.Значение);
		КонецЦикла;
		СписокLocalid = СписокРезультат;
	КонецЕсли;
	
	Возврат СписокLocalid;
	
КонецФункции

// Возвращает список сотрудников с результатами проверки выполнения условия для подписания сэмд документов.
// 
// Возвращаемое значение:
//  Массив Из Структура - Список из сотрудников и результат выполнения условия для подписания сэмд.
//
Функция СписокСотрудниковИКорректностиЗаполненияДляПодписанияСЭМД() Экспорт
	
	Результат = Новый Массив;
	ВыборкаСотрудников = Справочники.Сотрудники.Выбрать();
	КэшПользователиПоФизЛицу = Новый Соответствие;
	Пока ВыборкаСотрудников.Следующий() Цикл
		Если ВыборкаСотрудников.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		// Проверка должности
		
		ДолжностьУчаствуетВПодписании = Ложь;
		
		ДолжностиМЗ = ИнтеграцияЕГИСЗВызовСервера.ДолжностиМЗ(ВыборкаСотрудников.Ссылка);
		
		Для Каждого ДолжностьМЗ Из ДолжностиМЗ Цикл
			Если ДолжностьУчаствуетВПодписании(ДолжностьМЗ) Тогда
				ДолжностьУчаствуетВПодписании = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ДолжностьУчаствуетВПодписании Тогда
			Продолжить;
		КонецЕсли;
		
		// Общая проверка
		ЗаполненСНИЛС = ЗначениеЗаполнено(ВыборкаСотрудников.СНИЛС);
		ЗаполненоФИО = ЗначениеЗаполнено(ВыборкаСотрудников.Фамилия)
						И ЗначениеЗаполнено(ВыборкаСотрудников.Имя)
						И ЗначениеЗаполнено(ВыборкаСотрудников.Отчество);
		
		// Проверка сертификата
		ВыборкаСертификатов = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.Выбрать();
		ЕстьСертификат = Ложь;
		СертификатДействителен = Ложь;
		
		Пока ВыборкаСертификатов.Следующий() Цикл
			Если Не ВыборкаСертификатов.ПометкаУдаления Тогда
				СотрудникиПользователя = КэшПользователиПоФизЛицу.Получить(ВыборкаСертификатов.Пользователь);
				Если СотрудникиПользователя = Неопределено Тогда
					СотрудникиПользователя = ОтраслевыеДополнения.СотрудникиПользователя(ВыборкаСертификатов.Пользователь);
					КэшПользователиПоФизЛицу.Вставить(ВыборкаСертификатов.Пользователь, СотрудникиПользователя);
				КонецЕсли;
				
				Если СотрудникиПользователя.Найти(ВыборкаСотрудников.Ссылка) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьСертификат = Истина;
				СертификатДействителен = ЕстьСертификат И ЭлектроннаяПодпись.ПроверитьСертификат(Неопределено, ВыборкаСертификатов.ДанныеСертификата.Получить(), Неопределено);
				Если СертификатДействителен Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Заполнение структуры
		СтруктураКорректностиСотрудника = Новый Структура;
		СтруктураКорректностиСотрудника.Вставить("ЗаполненСНИЛС",			ЗаполненСНИЛС);
		СтруктураКорректностиСотрудника.Вставить("ЗаполненоФИО",			ЗаполненоФИО);
		СтруктураКорректностиСотрудника.Вставить("ЕстьСертификат",			ЕстьСертификат);
		СтруктураКорректностиСотрудника.Вставить("СертификатДействителен",	СертификатДействителен);
		
		ВсеКорректно = Истина;
		Для Каждого УсловиеКорректностиВыполнено Из СтруктураКорректностиСотрудника Цикл
			Если Не УсловиеКорректностиВыполнено.Значение Тогда
				ВсеКорректно = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтруктураКорректностиСотрудника.Вставить("Сотрудник",	 ВыборкаСотрудников.Ссылка);
		СтруктураКорректностиСотрудника.Вставить("ВсеКорректно", ВсеКорректно);
		Результат.Добавить(СтруктураКорректностиСотрудника);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьXMLПоСсылкеМД(Ссылка, СвойстваЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, НаименованиеШаблона, ТекстОшибки, ДополнительныеПараметры) Экспорт
	
	МакетXML = ПолучитьМакетСправочникаПоВидуДокумента(СвойстваЭМД.ВидРЭМД);
	
	Если Не ЗначениеЗаполнено(МакетXML) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Для шаблона ""%1"" выбран вид регистрируемого электронного документа ""%2"", не поддерживаемый программой!'"), НаименованиеШаблона, СвойстваЭМД.ВидРЭМД.Наименование);
		Возврат Неопределено;
	КонецЕсли;
	
	НезагруженныеКлассификаторы = Новый Массив;
	
	ДанныеПоШаблону = ПолучитьДанныеПоШаблону(Ссылка, СвойстваЭМД, ДополнительныеПараметры);
	ДанныеМакета = ДанныеМакетаПоВидуДокумента(СвойстваЭМД.ИдентификаторРЭМД);
	
	Если ДанныеМакета = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Документ вида ""%1"" не поддерживается'"), СвойстваЭМД.ИдентификаторРЭМД);
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнитьТаблицуПараметров(ДанныеПоШаблону.ТаблицаПараметров, СотрудникУстановившийПодпись, "СотрудникУстановившийПодпись");
	ДополнитьТаблицуПараметров(ДанныеПоШаблону.ТаблицаПараметров, ДолжностьМЗ, "ДолжностьМЗСотрудникаУстановившегоПодпись");
	ДополнитьТаблицуПараметровДляОбщихСекций(Ссылка, ДанныеПоШаблону.ТаблицаПараметров, СвойстваЭМД, ДанныеМакета.Формат);
	
	ДополнительныеДанные = ДополнительныеДанныеДляФормированияСЭМД(СвойстваЭМД.ИдентификаторРЭМД);
	ИндивидуальныеСекции = СформироватьИндивидуальныеСекции(ДанныеПоШаблону.ТаблицаПараметров, МакетXML, ДанныеПоШаблону.ДокументHTML, НезагруженныеКлассификаторы, ДополнительныеДанные);
	
	ОбщиеСекции = СформироватьОбщиеСекции(СвойстваЭМД, Ссылка, ДанныеПоШаблону.ТаблицаПараметров, ДанныеМакета.Макет, НезагруженныеКлассификаторы, ДополнительныеДанные);
	
	Если НезагруженныеКлассификаторы.Количество() > 0 Тогда
		ТекстОшибки = НСтр("ru='Требуется загрузить недостающие классификаторы'");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъединитьСекции(ОбщиеСекции, ИндивидуальныеСекции);
	
КонецФункции

Функция ПолучитьТаблицуПараметров(Ссылка, ИмяТипаДокумента, ДополнительныеПараметры) Экспорт
	
	// Параметры приема по шаблону
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Параметр");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("localid");
	ТаблицаПараметров.Колонки.Добавить("КлассификацияПоля");
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторСтрокиШаблона");
	ТаблицаПараметров.Колонки.Добавить("ТаблицаШаблонов");
	ТаблицаПараметров.Колонки.Добавить("НомерСтрокиТаблицы");
	ТаблицаПараметров.Колонки.Добавить("ГруппирующееПоле");
	ТаблицаПараметров.Колонки.Добавить("ОбъединяющееПоле");
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторСтроки");
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторРодительскойСтроки");
	ТаблицаПараметров.Колонки.Добавить("АвтозаполнениеИзДанныхДокумента", Новый ОписаниеТипов("Булево"));
	
	КонстантыCDAДокумента	= Новый ТаблицаЗначений;
	СоответствияПараметрам	= Новый ТаблицаЗначений;
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		ЗаполнитьТаблицуПараметровПоПриему(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам, ДополнительныеПараметры);
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		ЗаполнитьТаблицуПараметровПоПМО(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам, ДополнительныеПараметры);
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		ЗаполнитьТаблицуПараметровПоВК(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам);
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		ЗаполнитьТаблицуПараметровПоРецепту(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам);
	КонецЕсли;
	
	ПараметрыКлассификации = ТаблицаПараметров.СкопироватьКолонки();
	СтрокиКУдалению = Новый Массив;
	
	Если СоответствияПараметрам.Количество() > 0 Тогда
		// Добавление localid
		Для Каждого ПараметрШаблона Из СоответствияПараметрам Цикл
			Для Каждого Строка Из ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", ПараметрШаблона.Параметр)) Цикл
				Строка.localid			 = ПараметрШаблона.localid;
				Строка.КлассификацияПоля = ПараметрШаблона.КлассификацияПоля;
				Строка.ГруппирующееПоле	 = ПараметрШаблона.ГруппирующееПоле;
				Строка.ОбъединяющееПоле	 = ПараметрШаблона.ОбъединяющееПоле;
				
				ЧастиLocalid = СтрРазделить(ПараметрШаблона.localid, ".");
				Если ЧастиLocalid.Количество() > 1
					И ЧастиLocalid[1] = "КлассификацияПоля"
				Тогда
					ЗаполнитьЗначенияСвойств(ПараметрыКлассификации.Добавить(), Строка);
					СтрокиКУдалению.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиКУдалению.Количество() > 0 Тогда
		
		СтрокиСИндексамиГруппировки = Новый Соответствие;
		Для Каждого СтрокаТаблицыПараметров Из ТаблицаПараметров Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицыПараметров.ГруппирующееПоле)
				И ТипЗнч(СтрокаТаблицыПараметров.ГруппирующееПоле) = Тип("Число")
			Тогда
				СтрокиСИндексамиГруппировки.Вставить(СтрокаТаблицыПараметров, ТаблицаПараметров[СтрокаТаблицыПараметров.ГруппирующееПоле]);
			КонецЕсли;
		КонецЦикла;
			
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаПараметров.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Для Каждого КлючЗначение Из СтрокиСИндексамиГруппировки Цикл
			
			Если ТаблицаПараметров.Индекс(КлючЗначение.Ключ) = -1 Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйИндекс = ТаблицаПараметров.Индекс(КлючЗначение.Значение);
			Если НовыйИндекс = -1 Тогда
				КлючЗначение.Ключ.ГруппирующееПоле = Неопределено;
			Иначе
				КлючЗначение.Ключ.ГруппирующееПоле = НовыйИндекс;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КонстантыCDAДокумента.Количество() > 0 Тогда
		// Константы
		ИндексыКонстант = Новый Соответствие;
		Для Каждого КонстантаШаблона Из КонстантыCDAДокумента Цикл
			НовыйПараметр = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, КонстантаШаблона);
			ИндексыКонстант.Вставить(КонстантыCDAДокумента.Индекс(КонстантаШаблона), ТаблицаПараметров.Индекс(НовыйПараметр));
		КонецЦикла;
		
		// Группирующие поля констант
		Для Каждого СтрокаПараметраКлассификации Из ТаблицаПараметров Цикл
			Если ТипЗнч(СтрокаПараметраКлассификации.ГруппирующееПоле) = Тип("Число")
				И Не СтрокаПараметраКлассификации.АвтозаполнениеИзДанныхДокумента
			Тогда
				СтрокаПараметраКлассификации.ГруппирующееПоле = ИндексыКонстант.Получить(СтрокаПараметраКлассификации.ГруппирующееПоле);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаПараметраКлассификации.ОбъединяющееПоле) = Тип("Число")
				И Не СтрокаПараметраКлассификации.АвтозаполнениеИзДанныхДокумента
			Тогда
				СтрокаПараметраКлассификации.ОбъединяющееПоле = ИндексыКонстант.Получить(СтрокаПараметраКлассификации.ОбъединяющееПоле);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПараметраКлассификации Из ПараметрыКлассификации Цикл
			Если ТипЗнч(СтрокаПараметраКлассификации.ГруппирующееПоле) = Тип("Число")
				И Не СтрокаПараметраКлассификации.АвтозаполнениеИзДанныхДокумента
			Тогда
				СтрокаПараметраКлассификации.ГруппирующееПоле = ИндексыКонстант.Получить(СтрокаПараметраКлассификации.ГруппирующееПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПараметраКлассификации Из ПараметрыКлассификации Цикл
		Если ТипЗнч(СтрокаПараметраКлассификации.ГруппирующееПоле) = Тип("Число") Тогда
			СтрокаПараметра = ТаблицаПараметров[СтрокаПараметраКлассификации.ГруппирующееПоле];
			СтрокаПараметра.КлассификацияПоля = СтрокаПараметраКлассификации.Значение;
		Иначе
			
			СтруктураСтрокиПараметра = Новый Структура("Параметр, ИдентификаторСтрокиШаблона, ТаблицаШаблонов, НомерСтрокиТаблицы");
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиПараметра, СтрокаПараметраКлассификации, "ИдентификаторСтрокиШаблона, ТаблицаШаблонов, НомерСтрокиТаблицы");
			СтруктураСтрокиПараметра.Параметр = СтрокаПараметраКлассификации.ГруппирующееПоле;
			СтрокиПараметра = ТаблицаПараметров.НайтиСтроки(СтруктураСтрокиПараметра);
			Если СтрокиПараметра.Количество() > 0 Тогда
				СтрокиПараметра[0].КлассификацияПоля = СтрокаПараметраКлассификации.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеДатыДокумента = ИнтеграцияЕГИСЗСервер.ПредставлениеЛокальнойДатыСоСмещением(Ссылка.Дата, "ДФ=ггггММддЧЧмм");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Дата, "ДатаДокументаБезСмещения");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ПредставлениеДатыДокумента, "ДатаДокумента");
	
	Возврат ТаблицаПараметров;
	
КонецФункции

Функция ПолучитьНезаполненныеОбязательныеПараметры(Ссылка, СотрудникУстановившийПодпись, НезагруженныеКлассификаторы, НекритичныеПроблемы, ДолжностьМЗ, ДополнительныеПараметры) Экспорт
	
	ОшибкиВалидации = Новый ТаблицаЗначений;
	ОшибкиВалидации.Колонки.Добавить("Текст");
	ОшибкиВалидации.Колонки.Добавить("Правило");
	ОшибкиВалидации.Колонки.Добавить("Расположение");
	
	СтруктураНезаполненныхОбязательныхПараметров = Новый Структура("ПараметрыОбщихСекций, ПараметрыСекцийТела, ОшибкиСхематрона", Новый Массив, Новый Массив, ОшибкиВалидации);
	
	СвойстваЭМД = ИнтеграцияЕГИСЗ_РЭМД.СформироватьСвойстваЭМД(Ссылка, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(СвойстваЭМД.ВидРЭМД) // Не РЭМДовский шаблон
		Или ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеАтрибутаЭлементаКлассификатора(СвойстваЭМД.ВидРЭМД, "FORMAT") = "1" // pdf
	Тогда
		Возврат СтруктураНезаполненныхОбязательныхПараметров;
	КонецЕсли;
	
	ДополнительныеДанные = ДополнительныеДанныеДляФормированияСЭМД(СвойстваЭМД.ИдентификаторРЭМД);
	
	ДанныеПоШаблону = ПолучитьДанныеПоШаблону(Ссылка, СвойстваЭМД, ДополнительныеПараметры);
	ДополнитьТаблицуПараметров(ДанныеПоШаблону.ТаблицаПараметров, СотрудникУстановившийПодпись, "СотрудникУстановившийПодпись");
	ДополнитьТаблицуПараметров(ДанныеПоШаблону.ТаблицаПараметров, ДолжностьМЗ, "ДолжностьМЗСотрудникаУстановившегоПодпись");
	
	// Общие секции
	ДанныеМакета = ДанныеМакетаПоВидуДокумента(СвойстваЭМД.ИдентификаторРЭМД);
	
	Если ДанныеМакета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Документ вида ""%1"" не поддерживается'"), СвойстваЭМД.ИдентификаторРЭМД));
		Возврат СтруктураНезаполненныхОбязательныхПараметров;
	КонецЕсли;
	
	Документ = ПолучитьXML(ДанныеМакета.Макет);
	
	ДополнитьТаблицуПараметровДляОбщихСекций(Ссылка, ДанныеПоШаблону.ТаблицаПараметров, СвойстваЭМД, ДанныеМакета.Формат);
	РекурсивныйОбходXMLОбщихСекций(Документ.ЭлементДокумента, ДанныеПоШаблону.ТаблицаПараметров, Новый Массив, Новый Соответствие,
									НезагруженныеКлассификаторы, ДополнительныеДанные, СтруктураНезаполненныхОбязательныхПараметров.ПараметрыОбщихСекций);
	
	// Секции тела
	МакетСправочника = ПолучитьМакетСправочникаПоВидуДокумента(СвойстваЭМД.ВидРЭМД);
	Документ = ПолучитьXML(МакетСправочника);
	НезаполненныеТекстовыеСекции = Новый Массив;
	
	СписокLocalid = СписокLocalidМакета(МакетСправочника);
	СписокLocalid.Вставить("Сотрудник", Новый Структура("localid", "Сотрудник"));
	
	УзлыДляУдаления = Новый Массив;
	РекурсивныйОбходXML(Документ.ЭлементДокумента, ДанныеПоШаблону.ТаблицаПараметров, УзлыДляУдаления, Новый Соответствие, ДанныеПоШаблону.ДокументHTML, СписокLocalid, Новый Массив,
						НезагруженныеКлассификаторы, ДополнительныеДанные, СтруктураНезаполненныхОбязательныхПараметров.ПараметрыСекцийТела, , НезаполненныеТекстовыеСекции);
	
	Для Индекс = -НезаполненныеТекстовыеСекции.ВГраница() По 0 Цикл
		УзлыСекции = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Документ, НезаполненныеТекстовыеСекции[-Индекс], "code", "code");
		ЕстьУзел = Ложь;
		Для Каждого УзелСекции Из УзлыСекции Цикл
			УзелУдалён = Ложь;
			ПроверяемыйУзел = УзелСекции;
			Пока ПроверяемыйУзел <> ПроверяемыйУзел.ДокументВладелец Цикл
				Если УзлыДляУдаления.Найти(ПроверяемыйУзел) <> Неопределено Тогда
					УзелУдалён = Истина;
					Прервать;
				КонецЕсли;
				ПроверяемыйУзел = ПроверяемыйУзел.РодительскийУзел;
			КонецЦикла;
			Если Не УзелУдалён Тогда
				ЕстьУзел = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьУзел Тогда
			НезаполненныеТекстовыеСекции.Удалить(-Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Для проверки в отладке
	//СформироватьИндивидуальныеСекции(ДанныеПоШаблону.ТаблицаПараметров, МакетСправочника, Неопределено, НезагруженныеКлассификаторы, ДополнительныеДанные);
	//ПолучитьXMLПоСсылкеМД(Ссылка, СвойстваЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, СвойстваЭМД.ЗаголовокЭМД, "", ДополнительныеПараметры);
	
	ТребуетсяПроверкаСхематроном = Истина;
	Для Каждого НезаполненныеОбязательныеПараметры Из СтруктураНезаполненныхОбязательныхПараметров Цикл
		Если НезаполненныеОбязательныеПараметры.Значение.Количество() > 0 Тогда
			ТребуетсяПроверкаСхематроном = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПроверкаСхематроном И ЗначениеЗаполнено(СвойстваЭМД.ВидРЭМД.Схематрон) Тогда
		ЗаполнитьОшибкиВалидацииПоСхематрону(СвойстваЭМД.ВидРЭМД.Схематрон, СтруктураНезаполненныхОбязательныхПараметров.ОшибкиСхематрона,
											 Ссылка, СотрудникУстановившийПодпись, ДолжностьМЗ, СвойстваЭМД.ВидРЭМД, ДополнительныеПараметры);
	КонецЕсли;
	
	Если НезаполненныеТекстовыеСекции.Количество() > 0 Тогда
		НекритичныеПроблемы.Вставить(НСтр("ru='Отсутствуют текстовые наполнения секций'"), НезаполненныеТекстовыеСекции);
	КонецЕсли;
	
	Возврат СтруктураНезаполненныхОбязательныхПараметров;
	
КонецФункции

Процедура ЗаполнитьОшибкиВалидацииПоСхематрону(ТекстСхематрона, ОшибкиВалидации, Документ, СотрудникУстановившийПодпись, ДолжностьМЗ, ВидДокумента, ДополнительныеПараметры) Экспорт
	
	Если Не ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ДопустимоРедактированиеЭлементовЕГИСЗ() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстXML = СформироватьТекстXMLЭМДПоШаблонуДляСхематрона(Документ, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры);
	Если Не ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлУтилиты		= ПолучитьИмяВременногоФайла("jar");
	ФайлXML			= ПолучитьИмяВременногоФайла("xml");
	ФайлСхематрона	= ПолучитьИмяВременногоФайла("sch");
	ФайлРезультата	= ПолучитьИмяВременногоФайла("xml");
	
	Компонента = ПолучитьОбщийМакет("СхематронПроцессор");
	Компонента.Записать(ФайлУтилиты);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлXML, "UTF-8");
	ЗаписьXML.ЗаписатьБезОбработки(ТекстXML);
	ЗаписьXML.Закрыть();
	
	ЗаписьXMLСхематрона = Новый ЗаписьXML;
	ЗаписьXMLСхематрона.ОткрытьФайл(ФайлСхематрона, "UTF-8");
	ЗаписьXMLСхематрона.ЗаписатьБезОбработки(ТекстСхематрона);
	ЗаписьXMLСхематрона.Закрыть();
	
	СтрокаКоманды = СтрШаблон("java -jar %1 -d %2 -s %3 -o %4", ФайлУтилиты, ФайлXML, ФайлСхематрона, ФайлРезультата);
	
	ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	
	Результат = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
	
	ПостроительDOM = Новый ПостроительDOM;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлРезультата);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыОшибок = РаботаСDOMКлиентСервер.ПолучитьЭлементыПоИмени(ДокументDOM, "svrl:failed-assert", Истина);
	Для Каждого УзелОшибки Из УзлыОшибок Цикл
		ТекстПравила = УзелОшибки.ПолучитьАтрибут("test");
		Попытка
			Расположение = УзелОшибки.ПолучитьАтрибут("location");
		Исключение
			Расположение = "";
		КонецПопытки;
		
		УзлыТекстовОшибки = РаботаСDOMКлиентСервер.ПолучитьЭлементыПоИмени(УзелОшибки, "svrl:text", Истина);
		Для Каждого УзелТекстаОшибки Из УзлыТекстовОшибки Цикл
			Для Каждого ТекстОшибки Из УзелТекстаОшибки.ДочерниеУзлы Цикл
				НоваяСтрокаОшибки = ОшибкиВалидации.Добавить();
				НоваяСтрокаОшибки.Текст = ТекстОшибки.ЗначениеУзла;
				НоваяСтрокаОшибки.Правило = ТекстПравила;
				НоваяСтрокаОшибки.Расположение = Расположение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТекстXMLЭМДПоШаблонуДляСхематрона(Документ, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры) Экспорт
	
	СвойстваЭМД = ИнтеграцияЕГИСЗ_РЭМД.СформироватьСвойстваЭМД(Документ, ДополнительныеПараметры);
	ВидДокумента = СвойстваЭМД.ВидРЭМД;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		ШаблонОсмотра = ДополнительныеПараметры.ШаблонОсмотра;
		НаименованиеШаблона = "";
		Если ЗначениеЗаполнено(ШаблонОсмотра) Тогда
			НаименованиеШаблона = ?(ТипЗнч(ШаблонОсмотра) = Тип("СправочникСсылка.ШаблоныHTML"), ШаблонОсмотра.Наименование, ШаблонОсмотра.Владелец.Наименование);
		КонецЕсли;
		
		МассивСтрок = ВидДокумента.Атрибуты.НайтиСтроки(Новый Структура("Ключ", "FORMAT"));
		Если МассивСтрок.Количество() > 0 И МассивСтрок[0].Значение = "2" Тогда
			Попытка
				ТекстXML = ИнтеграцияЕГИСЗВызовСервера.ПолучитьXMLПоСсылкеМД(Документ, СвойстваЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, НаименованиеШаблона, "", ДополнительныеПараметры);
				УбратьПространствоИменДляВалидации(ТекстXML);
				Возврат ТекстXML;
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПересчитатьОбязательныеПоляLocalid(мСтрокиLocalid, мСтрокиКонстант) Экспорт
	
	тзКонстанты = Новый ТаблицаЗначений;
	тзКонстанты.Колонки.Добавить("localid");
	тзКонстанты.Колонки.Добавить("Значение");
	
	Для Каждого СтрокаКонстанты Из мСтрокиКонстант Цикл
		ЗаполнитьЗначенияСвойств(тзКонстанты.Добавить(), СтрокаКонстанты);
	КонецЦикла;
	
	Для Каждого СтрокаLocalid Из мСтрокиLocalid Цикл
		Если Не ЗначениеЗаполнено(СтрокаLocalid.УсловиеОбязательное) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаLocalid.Обязательное = Истина;
		Попытка
			СтрокаLocalid.Обязательное = ВычислитьФункцию(СтрокаLocalid.УсловиеОбязательное, тзКонстанты);
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТекстПредупрежденияПоПроблемнымПараметрам(Документ) Экспорт
	
	ПроблемныеПараметры = ПолучитьПроблемныеLocalid(Документ);
	Если ПроблемныеПараметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Имеются проблемы с параметрами:'");
	
	Для Каждого ПараметрыПоШаблону Из ПроблемныеПараметры Цикл
		
		ИндексШаблона = ПараметрыПоШаблону.Ключ;
		ИмяШаблона = ПараметрыПоШаблону.Значение.НаименованиеШаблона;
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + СтрШаблон(НСтр("ru = 'Шаблон ""%1"":'"), ИмяШаблона);
		
		Если ПараметрыПоШаблону.Значение.Свойство("НезаполненныеПараметры") Тогда
			Для Каждого ИмяНезаполненногоПараметра Из ПараметрыПоШаблону.Значение.НезаполненныеПараметры Цикл
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + СтрШаблон(НСтр("ru = 'Не заполнен параметр ""%1"".'"), ИмяНезаполненногоПараметра);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПоШаблону.Значение.Свойство("НесопоставленныеLocalid") Тогда
			Для Каждого НесопоставленныйLocalid Из ПараметрыПоШаблону.Значение.НесопоставленныеLocalid Цикл
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + СтрШаблон(НСтр("ru = 'Поле ЭМД ""%1"" не сопоставлен с параметром.'"), НесопоставленныйLocalid);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПоШаблону.Значение.Свойство("НезаполненныеКонстанты") Тогда
			Для Каждого НесопоставленныйLocalid Из ПараметрыПоШаблону.Значение.НезаполненныеКонстанты Цикл
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + СтрШаблон(НСтр("ru = 'Не заполнена константа ""%1"".'"), НесопоставленныйLocalid);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

Функция ПолучитьПроблемныеLocalid(Документ)
	
	ПроблемныеLocalid = Новый Соответствие;
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Документ);
	ДополнительныеПараметры = ДополнительныеПараметрыДляРаботыССЭМД();
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		
		ВерсииШаблонов = Новый ТаблицаЗначений;
		ВерсииШаблонов.Колонки.Добавить("ВерсияШаблона");
		ВерсииШаблонов.Колонки.Добавить("ШаблонПриема");
		ДокументыПриемаКлиентСервер.ЗаполнитьТаблицуВерсийШаблонов(ВерсииШаблонов, Документ);
		
		Для Каждого СтрокаШаблона Из Документ.ШаблоныПриема Цикл
			
			СтрокаВерсии = ВерсииШаблонов.Найти(СтрокаШаблона.ШаблонПриема, "ШаблонПриема");
			Если СтрокаВерсии <> Неопределено Тогда
				ДополнительныеПараметры.ШаблонОсмотра = СтрокаВерсии.ВерсияШаблона;
			Иначе
				ДополнительныеПараметры.ШаблонОсмотра = СтрокаШаблона.ШаблонПриема;
			КонецЕсли;
			
			ДополнительныеПараметры.ИндексШаблона = Документ.ШаблоныПриема.Индекс(СтрокаШаблона);
			ДополнительныеПараметры.СтрокаШаблона = СтрокаШаблона;
			
			ТаблицаПараметров = ПолучитьТаблицуПараметров(Документ, ИмяТипаДокумента, ДополнительныеПараметры);
			ПроверитьПараметрыШаблонов(ДополнительныеПараметры.ИндексШаблона, ПроблемныеLocalid, ТаблицаПараметров, СтрокаШаблона.ШаблонПриема);
		КонецЦикла;
		
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		
		Если ЗначениеЗаполнено(Документ.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
			
			ДополнительныеПараметры.ШаблонОсмотра = Документ.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
			ТаблицаПараметров = ПолучитьТаблицуПараметров(Документ, ИмяТипаДокумента, ДополнительныеПараметры);
			ПроверитьПараметрыШаблонов(0, ПроблемныеLocalid, ТаблицаПараметров, ДополнительныеПараметры.ШаблонОсмотра);
			
		Иначе
			МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
			ОбработанныеПриказы = Новый Массив;
			Для Каждого СтрокаФактора Из Документ.ФакторыИУсловияРаботы Цикл
				Если МодульМедосмотрыСервер.ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДополнительныеПараметры.ШаблонОсмотра = СтрокаФактора.Фактор.ШаблонОсмотраСправки;
					ДополнительныеПараметры.ПриказМО = Неопределено;
					ДополнительныеПараметры.ВредныйФакторСправки = СтрокаФактора.Фактор;
					ДополнительныеПараметры.СообщениеРЭМД = Неопределено;
					
					ТаблицаПараметров = ПолучитьТаблицуПараметров(Документ, ИмяТипаДокумента, ДополнительныеПараметры);
					ПроверитьПараметрыШаблонов(СтрокаФактора.Фактор, ПроблемныеLocalid, ТаблицаПараметров, ДополнительныеПараметры.ШаблонОсмотра);
					
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор);
				Иначе
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор.Приказ) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СообщениеРЭМД = Неопределено;
					СтрокаЭМД = Документ.ЭМД.Найти(ИнтеграцияЕГИСЗВызовСервера.ПолучитьУИДПоПриказуВредномуФактору(Документ, СтрокаФактора.Фактор.Приказ), "УИД_Шаблона");
					Если СтрокаЭМД <> Неопределено Тогда
						СообщениеРЭМД = СтрокаЭМД.СообщениеРЭМД;
					КонецЕсли;
					
					ДополнительныеПараметры.ШаблонОсмотра = Неопределено;
					ДополнительныеПараметры.ПриказМО = СтрокаФактора.Фактор.Приказ;
					ДополнительныеПараметры.ВредныйФакторСправки = Неопределено;
					ДополнительныеПараметры.СообщениеРЭМД = СообщениеРЭМД;
					
					ТаблицаПараметров = ПолучитьТаблицуПараметров(Документ, ИмяТипаДокумента, ДополнительныеПараметры);
					ВидДокумента = МодульМедосмотрыСервер.ВидДокументаПоПриказу(СтрокаФактора.Фактор.Приказ, Документ);
					ПроверитьПараметрыШаблонов(СтрокаФактора.Фактор, ПроблемныеLocalid, ТаблицаПараметров, , ВидДокумента);
					
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор.Приказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		ТаблицаПараметров = ПолучитьТаблицуПараметров(Документ, ИмяТипаДокумента, ДополнительныеПараметры);
		ФиксированныйВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидРЭМДВрачебнойКомиссии();
		ПроверитьПараметрыШаблонов(0, ПроблемныеLocalid, ТаблицаПараметров, , ФиксированныйВидДокумента);
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		ТаблицаПараметров = ПолучитьТаблицуПараметров(Документ, ИмяТипаДокумента, ДополнительныеПараметры);
		ФиксированныйВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидРЭМДРецепта(Документ.ФормаРецепта);
		ПроверитьПараметрыШаблонов(0, ПроблемныеLocalid, ТаблицаПараметров, , ФиксированныйВидДокумента);
	КонецЕсли;
	
	Возврат ПроблемныеLocalid;
	
КонецФункции

Процедура ПроверитьПараметрыШаблонов(ИндексШаблона, ПроблемныеLocalid, ТаблицаПараметров, Шаблон = Неопределено, ФиксированныйВидДокумента = Неопределено)
	
	ВидДокумента = ?(Шаблон = Неопределено, ФиксированныйВидДокумента, Шаблон.ВидДокумента);
	
	Если Не ЗначениеЗаполнено(ВидДокумента)
		Или ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеАтрибутаЭлементаКлассификатора(ВидДокумента, "FORMAT") <> "2"
	Тогда
		Возврат;
	КонецЕсли;
	
	СписокLocalid = МассивLocalidДокумента(ВидДокумента, , ТаблицаПараметров);
	
	МассивНезаполненныхПараметровПоШаблонам	= Новый Массив;
	МассивНесопоставленныхLocalidПоШаблонам	= Новый Массив;
	МассивНезаполненныхКонстант				= Новый Массив;
	МассивНезаполненныхДанных				= Новый Массив;
	
	Если Шаблон <> Неопределено
		И Шаблон.КонстантыCDAДокумента.Количество() > 0
	Тогда
		ПересчитатьОбязательныеПоляLocalid(СписокLocalid, Шаблон.КонстантыCDAДокумента);
	КонецЕсли;
	
	Для Каждого СтрокаLocalid Из СписокLocalid Цикл
		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", СтрокаLocalid.localid));
		
		Если Не СтрокаLocalid.Обязательное Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокиПараметров.Количество() = 0 Тогда
			Если ФиксированныйВидДокумента <> Неопределено Тогда
				ПредставлениеLocalid = ?(ЗначениеЗаполнено(СтрокаLocalid.Представление), СтрокаLocalid.Представление, СтрокаLocalid.localid);
				МассивНезаполненныхДанных.Добавить(ПредставлениеLocalid);
				Продолжить;
			ИначеЕсли Шаблон = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не (СтрокаLocalid.Свойство("Родитель")
					И СуществуетНезаполненныйНеобязательныйРодительСтрокиLocalid(СтрокаLocalid, СписокLocalid, ТаблицаПараметров)
					Или ЗаполняетсяПоДаннымДокумента(СтрокаLocalid, Шаблон))
			Тогда
				ПараметрПоLocalid = Шаблон.СоответствияПараметрам.НайтиСтроки(Новый Структура("localid", СтрокаLocalid.localid));
				Если ПараметрПоLocalid.Количество() = 0 Тогда
					ПредставлениеLocalid = ?(ЗначениеЗаполнено(СтрокаLocalid.Представление), СтрокаLocalid.Представление, СтрокаLocalid.localid);
					МассивНесопоставленныхLocalidПоШаблонам.Добавить(ПредставлениеLocalid);
				Иначе
					МассивНезаполненныхПараметровПоШаблонам.Добавить(ПараметрПоLocalid[0].Параметр.Наименование);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИмеютсяНезаполненныеДанные = Ложь;
			ИмеетсяНезаполненныйПараметр = Ложь;
			ИмеетсяНезаполненнаяКонстанта = Ложь;
			
			Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
				Если Не (ТипЗнч(СтрокаПараметра.Значение) = Тип("Число")
					Или ЗначениеЗаполнено(СтрокаПараметра.Значение))
				Тогда
					Если ФиксированныйВидДокумента <> Неопределено Тогда
						ИмеютсяНезаполненныеДанные = Истина;
					ИначеЕсли СтрокаПараметра.Параметр = Неопределено Тогда
						ИмеетсяНезаполненнаяКонстанта = Истина;
					Иначе
						ИмеетсяНезаполненныйПараметр = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ПредставлениеLocalid = ?(ЗначениеЗаполнено(СтрокаLocalid.Представление), СтрокаLocalid.Представление, СтрокаLocalid.localid);
			
			Если Шаблон <> Неопределено
				И ИмеетсяНезаполненныйПараметр
			Тогда
				ПараметрПоLocalid = Шаблон.СоответствияПараметрам.НайтиСтроки(Новый Структура("localid", СтрокаLocalid.localid));
				Если ПараметрПоLocalid.Количество() = 0 Тогда
					МассивНесопоставленныхLocalidПоШаблонам.Добавить(ПредставлениеLocalid);
				Иначе
					МассивНезаполненныхПараметровПоШаблонам.Добавить(ПараметрПоLocalid[0].Параметр.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			Если ИмеетсяНезаполненнаяКонстанта Тогда
				МассивНезаполненныхКонстант.Добавить(ПредставлениеLocalid);
			КонецЕсли;
			
			Если ИмеютсяНезаполненныеДанные Тогда
				Если ЗначениеЗаполнено(СтрокиПараметров[0].ТекстНезаполненногоПараметра) Тогда
					МассивНезаполненныхДанных.Добавить(СтрокиПараметров[0].ТекстНезаполненногоПараметра);
				Иначе
					МассивНезаполненныхДанных.Добавить(ПредставлениеLocalid);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИмеютсяПроблемыПоШаблону = Ложь;
	
	СтруктураПроблемныхПараметровПоШаблону = Новый Структура;
	Если ФиксированныйВидДокумента = Неопределено Тогда
		СтруктураПроблемныхПараметровПоШаблону.Вставить("НаименованиеШаблона", Шаблон.Наименование);
	КонецЕсли;
	
	Если МассивНезаполненныхПараметровПоШаблонам.Количество() > 0 Тогда
		СтруктураПроблемныхПараметровПоШаблону.Вставить("НезаполненныеПараметры", МассивНезаполненныхПараметровПоШаблонам);
		ИмеютсяПроблемыПоШаблону = Истина;
	КонецЕсли;
	
	Если МассивНесопоставленныхLocalidПоШаблонам.Количество() > 0 Тогда
		СтруктураПроблемныхПараметровПоШаблону.Вставить("НесопоставленныеLocalid", МассивНесопоставленныхLocalidПоШаблонам);
		ИмеютсяПроблемыПоШаблону = Истина;
	КонецЕсли;
	
	Если МассивНезаполненныхКонстант.Количество() > 0 Тогда
		СтруктураПроблемныхПараметровПоШаблону.Вставить("НезаполненныеКонстанты", МассивНезаполненныхКонстант);
		ИмеютсяПроблемыПоШаблону = Истина;
	КонецЕсли;
	
	Если МассивНезаполненныхДанных.Количество() > 0 Тогда
		СтруктураПроблемныхПараметровПоШаблону.Вставить("НезаполненныеДанные", МассивНезаполненныхДанных);
		ИмеютсяПроблемыПоШаблону = Истина;
	КонецЕсли;
	
	Если ИмеютсяПроблемыПоШаблону Тогда
		ПроблемныеLocalid.Вставить(ИндексШаблона, СтруктураПроблемныхПараметровПоШаблону);
	КонецЕсли;
	
КонецПроцедуры

Функция СуществуетНезаполненныйНеобязательныйРодительСтрокиLocalid(ТекущаяСтрокаLocalid, СписокLocalid, ТаблицаПараметров)
	
	Если Не ТекущаяСтрокаLocalid.Свойство("Родитель")
		Или ТекущаяСтрокаLocalid.Родитель[0].localid = ТекущаяСтрокаLocalid.localid
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РодительТекущейСтроки = ТекущаяСтрокаLocalid.Родитель[0];
	
	Если РодительТекущейСтроки.Обязательное = Ложь
		И ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", РодительТекущейСтроки.localid)).Количество() = 0
	Тогда
		Возврат Истина;
	Иначе
		Для Каждого СтрокаLocalid Из СписокLocalid Цикл
			Если СтрокаLocalid.localid = РодительТекущейСтроки.localid Тогда
				Возврат СуществуетНезаполненныйНеобязательныйРодительСтрокиLocalid(СтрокаLocalid, СписокLocalid, ТаблицаПараметров);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНаличиеПроблемныхПараметров(Документ, Проблемы) Экспорт
	
	ПроблемныеПараметрыПоШаблонам = ПолучитьПроблемныеLocalid(Документ);
	ЗаполнитьПроблемыПараметровПоШаблонам(Проблемы, ПроблемныеПараметрыПоШаблонам);
	
КонецПроцедуры

Процедура ЗаполнитьПроблемыПараметровПоШаблонам(Проблемы, ПроблемныеПараметрыПоШаблонам)
	
	Если ПроблемныеПараметрыПоШаблонам.Количество() > 0 Тогда
		
		ТипыПроблем = Новый Соответствие;
		ТипыПроблем.Вставить("НезаполненныеПараметры",	НСтр("ru='Не заполнены параметры приёма'"));
		ТипыПроблем.Вставить("НесопоставленныеLocalid",	НСтр("ru='Не сопоставлены поля ЭМД в шаблоне'"));
		ТипыПроблем.Вставить("НезаполненныеКонстанты",	НСтр("ru='Не заполнены константы шаблона'"));
		
		мПроблемныеПараметры = Новый Массив;
		Для Каждого ПроблемныеПараметрыПоШаблону Из ПроблемныеПараметрыПоШаблонам Цикл
			Попытка
				НаименованиеШаблона = ПроблемныеПараметрыПоШаблону.Значение.НаименованиеШаблона;
			
				ПроблемыШаблона = Новый Массив;
			
				ПроблемныеПараметрыПоТипуПроблемы = Новый Соответствие;
				Для Каждого ПроблемаШаблона Из ПроблемныеПараметрыПоШаблону.Значение Цикл
					ТипПроблемы = ТипыПроблем.Получить(ПроблемаШаблона.Ключ);
					Если ТипПроблемы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПроблемныеПараметрыПоТипуПроблемы.Вставить(ТипПроблемы, ПроблемаШаблона.Значение);
				КонецЦикла;
				ПроблемыШаблона.Добавить(ПроблемныеПараметрыПоТипуПроблемы);
				
				соотПроблемыШаблона = Новый Соответствие();
				соотПроблемыШаблона.Вставить(НаименованиеШаблона, ПроблемыШаблона);
				мПроблемныеПараметры.Добавить(соотПроблемыШаблона);
			Исключение
				мПроблемныеПараметры = Новый Массив;
				Проблемы.Вставить(НСтр("ru='Имеются проблемы с данными '"), ПроблемныеПараметрыПоШаблону.Значение.НезаполненныеДанные);
			КонецПопытки;
		КонецЦикла;
		Если мПроблемныеПараметры.Количество() > 0 Тогда
			Проблемы.Вставить(НСтр("ru='Имеются проблемы с параметрами шаблонов приёма'"), мПроблемныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПроблемыСЭМДПередПодписанием(Документ) Экспорт
	
	Проблемы = Новый Соответствие;
	
	ЗаполненыНастройкиРЭМД(Документ.Филиал.Организация.МедицинскаяОрганизация, Проблемы);
	ПользовательИмеетЭЦП(Проблемы);
	ПроверитьНаличиеПроблемныхПараметров(Документ, Проблемы);
	ПроверитьДоступностьКаталоговИзНастроекИнтеграцииСЕГИСЗНаСервере(Документ.Филиал,, Проблемы);
	
	Возврат Проблемы;
	
КонецФункции

Процедура ЗаполненыНастройкиРЭМД(МедицинскаяОрганизация, Проблемы)
	
	МЗ = РегистрыСведений.ЕГИСЗНастройкиИнтеграции.СоздатьМенеджерЗаписи();
	МЗ.МедицинскаяОрганизация = МедицинскаяОрганизация;
	МЗ.Прочитать();
	Если Не МЗ.Выбран() Тогда
		Проблемы.Вставить(НСтр("ru = 'Не заполнены настройки РЭМД'"));
		Возврат;
	КонецЕсли;
	
	Ресурсы = Метаданные.РегистрыСведений.ЕГИСЗНастройкиИнтеграции.Ресурсы;
	МассивПараметровРЭМД = Новый Массив;
	МассивПараметровРЭМД.Добавить("ИдентификаторМИСвРЭМД");
	МассивПараметровРЭМД.Добавить("ПутьКАрхивуРЭМД");
	МассивПараметровРЭМД.Добавить("АдресЛокальногоСервисаРЭМД");
	МассивПараметровРЭМД.Добавить("ДатаНачалаОбменаИнформациейСРЭМД");
	
	НезаполненныеНастройкиРЭМД = Новый Массив;
	
	Для Каждого ПараметрРЭМД Из МассивПараметровРЭМД Цикл
		ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(МЗ, ПараметрРЭМД);
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			НезаполненныеНастройкиРЭМД.Добавить(Ресурсы.Найти(ПараметрРЭМД).Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьАдресВебСервисаДляЗапросовВРЭМД()) Тогда
		ИмяНастройки = Метаданные.РегистрыСведений.НастройкиМедицинскогоУчета.Ресурсы.АдресФедеральногоСервисаРЭМД.Синоним;
		НезаполненныеНастройкиРЭМД.Добавить(ИмяНастройки);
	КонецЕсли;
	
	Если НезаполненныеНастройкиРЭМД.Количество() > 0 Тогда
		Проблемы.Вставить(НСтр("ru='Не все настройки РЭМД заполнены'"), НезаполненныеНастройкиРЭМД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПользовательИмеетЭЦП(Проблемы)
	
	ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
		|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Если Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
		Проблемы.Вставить(НСтр("ru='У пользователя отсутствует настроенная ЭЦП в базе'"));
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСоответствиеТиповКлассификацийВитальныхПараметров(ВитальныеПараметры) Экспорт
	
	НекорректныеТипы = Новый Массив;
	Для Каждого ВитальныйПараметр Из ВитальныеПараметры Цикл
		СтрокаАтрибутаТипа = ВитальныйПараметр.КлассификацияПоля.Атрибуты.Найти("DATA_TYPE", "Ключ");
		Если СтрокаАтрибутаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТипКлассификации = ТипДанныхИзXML(СтрокаАтрибутаТипа.Значение);
		
		Если ВитальныйПараметр.Свойство("Параметр") Тогда
			
			Если ВитальныйПараметр.Параметр.ТипЗначения.Типы().Найти(ТипКлассификации) = Неопределено Тогда
				ТекстОшибки = СтрШаблон("Параметр ""%1"". Для классификации ""%2"" требуется параметр типа ""%3""", ВитальныйПараметр.Параметр, ВитальныйПараметр.КлассификацияПоля, ТипКлассификации);
				НекорректныеТипы.Добавить(Новый Структура("Представление", ТекстОшибки));
			ИначеЕсли ТипКлассификации = Тип("СправочникСсылка.КлассификаторыМинЗдрава") Тогда
				СтрокаАтрибутаКлассификатора = ВитальныйПараметр.КлассификацияПоля.Атрибуты.Найти("OID", "Ключ");
				Если СтрокаАтрибутаКлассификатора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(СтрокаАтрибутаКлассификатора.Значение);
				Если ПараметрыСправочника <> Неопределено
					И ПараметрыСправочника.ВидКлассификатора <> ВитальныйПараметр.Параметр.ВидКлассификатора
				Тогда
					ТекстОшибки = СтрШаблон("Параметр ""%1"". Для классификации ""%2"" требуется вид классификатора параметра ""%3""", ВитальныйПараметр.Параметр, ВитальныйПараметр.КлассификацияПоля, ПараметрыСправочника.ВидКлассификатора);
					НекорректныеТипы.Добавить(Новый Структура("Представление", ТекстОшибки));
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ТипЗнч(ВитальныйПараметр.Значение) <> ТипКлассификации Тогда
				ТекстОшибки = СтрШаблон("Константа №%1. Для классификации ""%2"" требуется значение типа ""%3""", ВитальныйПараметр.НомерСтроки, ВитальныйПараметр.КлассификацияПоля, ТипКлассификации);
				НекорректныеТипы.Добавить(Новый Структура("Представление", ТекстОшибки));
			ИначеЕсли ТипКлассификации = Тип("СправочникСсылка.КлассификаторыМинЗдрава") Тогда
				СтрокаАтрибутаКлассификатора = ВитальныйПараметр.КлассификацияПоля.Атрибуты.Найти("OID", "Ключ");
				Если СтрокаАтрибутаКлассификатора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(СтрокаАтрибутаКлассификатора.Значение);
				Если ПараметрыСправочника <> Неопределено
					И ПараметрыСправочника.ВидКлассификатора <> ВитальныйПараметр.Значение.ВидКлассификатора
				Тогда
					ТекстОшибки = СтрШаблон("Константа №%1. Для классификации ""%2"" требуется вид классификатора значения ""%3""", ВитальныйПараметр.НомерСтроки, ВитальныйПараметр.КлассификацияПоля, ПараметрыСправочника.ВидКлассификатора);
					НекорректныеТипы.Добавить(Новый Структура("Представление", ТекстОшибки));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НекорректныеТипы;
	
КонецФункции

Функция ТипыЗначенийВитальныхПараметров() Экспорт
	
	ТипыЗначенийВитальныхПараметров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлассификаторыМинЗдраваАтрибуты.Ключ КАК Ключ,
		|	ВЫРАЗИТЬ(КлассификаторыМинЗдраваАтрибуты.Значение КАК СТРОКА(100)) КАК Значение
		|ИЗ
		|	Справочник.КлассификаторыМинЗдрава.Атрибуты КАК КлассификаторыМинЗдраваАтрибуты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
		|		ПО КлассификаторыМинЗдраваАтрибуты.Ссылка = КлассификаторыМинЗдрава.Ссылка
		|			И (КлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры))
		|			И (КлассификаторыМинЗдраваАтрибуты.Ключ = ""DATA_TYPE""
		|				ИЛИ КлассификаторыМинЗдраваАтрибуты.Ключ = ""OID"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТипДанных = Неопределено;
		Если Выборка.Ключ = "DATA_TYPE" Тогда
			ТипДанных = ТипДанныхИзXML(Выборка.Значение);
		Иначе
			ТипДанных = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(Выборка.Значение).Тип;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипДанных)
			И ТипыЗначенийВитальныхПараметров.Найти(ТипДанных) = Неопределено
		Тогда
			ТипыЗначенийВитальныхПараметров.Добавить(ТипДанных);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипыЗначенийВитальныхПараметров.Количество() = 0 Тогда
		// Для случая, если в базу не загружен классификатор витальных параметров
		ТипыЗначенийВитальныхПараметров.Добавить(Тип("Строка"));
		ТипыЗначенийВитальныхПараметров.Добавить(Тип("Число"));
		ТипыЗначенийВитальныхПараметров.Добавить(Тип("Булево"));
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(ТипыЗначенийВитальныхПараметров);
	
КонецФункции

Функция ДополнительныеПараметрыДляРаботыССЭМД() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаШаблона");
	ДополнительныеПараметры.Вставить("УИДШаблона");
	ДополнительныеПараметры.Вставить("ШаблонОсмотра");
	ДополнительныеПараметры.Вставить("ИндексШаблона");
	ДополнительныеПараметры.Вставить("ПриказМО");
	ДополнительныеПараметры.Вставить("ВредныйФакторСправки");
	ДополнительныеПараметры.Вставить("ПараметрыШаблона");
	ДополнительныеПараметры.Вставить("СообщениеРЭМД");
	ДополнительныеПараметры.Вставить("СтрокаШаблона");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ОпределитьВидДокументаПоПриказуМО(ПриказМО, СообщениеРЭМД, ПрохождениеМедосмотра) Экспорт
	
	Если ЗначениеЗаполнено(СообщениеРЭМД) Тогда
		Возврат СообщениеРЭМД.ВидДокумента;
	КонецЕсли;
	
	МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
	Возврат МодульМедосмотрыСервер.ВидДокументаПоПриказу(ПриказМО, ПрохождениеМедосмотра);
	
КонецФункции

Процедура ПроверитьДоступностьКаталоговИзНастроекИнтеграцииСЕГИСЗНаСервере(Филиал = Неопределено, МедицинскаяОрганизация = Неопределено, Проблемы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МедицинскаяОрганизация = Неопределено Тогда
		Если Филиал = Неопределено Тогда
			Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Филиал) Тогда
			МедицинскаяОрганизация = Филиал.Организация.МедицинскаяОрганизация;
		Иначе
			МедицинскаяОрганизация = Справочники.РеестрМедицинскихОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	нзНастройки = РегистрыСведений.ЕГИСЗНастройкиИнтеграции.СоздатьНаборЗаписей();
	нзНастройки.Отбор.МедицинскаяОрганизация.Установить(МедицинскаяОрганизация);
	нзНастройки.Прочитать();
	
	МассивПроблем = Новый Массив;
	Если ЗначениеЗаполнено(нзНастройки[0].ПутьКАрхивуЛогов) И Не бит_РаботаСФайлами.ФайлСуществует(нзНастройки[0].ПутьКАрхивуЛогов) Тогда
		МассивПроблем.Добавить("Не удалось получить доступ к каталогу с архивом логов, указанному в настройках интеграции с ЕГИСЗ.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(нзНастройки[0].ПутьКАрхивуРЭМД) И Не бит_РаботаСФайлами.ФайлСуществует(нзНастройки[0].ПутьКАрхивуРЭМД) Тогда
		МассивПроблем.Добавить("Не удалось получить доступ к каталогу с архивом РЭМД, указанному в настройках интеграции с ЕГИСЗ.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(нзНастройки[0].ПутьКАрхивуРезервныхКопий) И Не бит_РаботаСФайлами.ФайлСуществует(нзНастройки[0].ПутьКАрхивуРезервныхКопий) Тогда
		МассивПроблем.Добавить("Не удалось получить доступ к каталогу с архивом резервных копий, указанному в настройках интеграции с ЕГИСЗ.");
	КонецЕсли;
	
	Для Каждого Проблема Из МассивПроблем Цикл 
		Если Типзнч(Проблемы) = Тип("Соответствие") Тогда
			Проблемы.Вставить(Проблема);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Проблема);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИсточникЗаполненияПоДиагнозам() Экспорт
	
	Возврат Метаданные.Документы.Прием.ТабличныеЧасти.Диагнозы.ПолноеИмя();
	
КонецФункции

Функция LocalidЗаполняемыеПоДаннымДокумента(Шаблон) Экспорт
	
	ЗаполняемыеLocalid = Новый Массив;
	
	Попытка
		ДокументXML = ПолучитьXML(ПолучитьМакетСправочникаПоВидуДокумента(Шаблон.ВидДокумента));
		УзлыОписанияДиагнозов = ДокументXML.ПолучитьЭлементыПоИмени("bitDiagnosis");
	Исключение
		Возврат ЗаполняемыеLocalid;
	КонецПопытки;
	
	Если УзлыОписанияДиагнозов.Количество() > 0
		И Шаблон.ЗаполнятьДиагнозыИзТабличнойЧасти
	Тогда
		Для Каждого УзелСтруктурыДиагноза Из УзлыОписанияДиагнозов[0].ДочерниеУзлы Цикл
			Для Каждого ДочернийУзел Из УзелСтруктурыДиагноза.ДочерниеУзлы Цикл
				localid = ДочернийУзел.ПолучитьАтрибут("localid");
				Если ЗначениеЗаполнено(localid)
					И ЗаполняемыеLocalid.Найти(localid) = Неопределено
				Тогда
					ЗаполняемыеLocalid.Добавить(localid);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗаполняемыеLocalid;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РекурсивныйОбходXMLДляLocalid(XML, СписокLocalid, ТаблицаПараметров, Индекс = 0, РодительскийУзел = Неопределено)
	
	СписокУзлов = XML.ДочерниеУзлы;
	Для Каждого Узел Из СписокУзлов Цикл
		
		Если ТипЗнч(Узел) <> Тип("ЭлементDOM")
			Или Узел.РодительскийУзел.ИмяУзла = "bitDiagnosis"
		Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийLocalId = Узел.ПолучитьАтрибут("localid");
		СвойстваУзла = ПолучитьСвойстваУзлаТела(Узел, ТекущийLocalId, ТаблицаПараметров);
		СтруктураТекущегоУзла = ПолучитьСтруктуруТекущегоУзла(Узел, РодительскийУзел, СвойстваУзла);
		
		ДобавитьLocalid(СписокLocalid, ТекущийLocalId, СтруктураТекущегоУзла, Индекс);
		РекурсивныйОбходXMLДляLocalid(Узел, СписокLocalid, ТаблицаПараметров, Индекс, СтруктураТекущегоУзла);
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьLocalid(СписокLocalid, ТекущийLocalId, СтруктураТекущегоУзла, Индекс)
	
	ТекущийУзел = СтруктураТекущегоУзла.Узел;
	
	// Классификация
	Если ЗначениеЗаполнено(ТекущийLocalId) И СтрНайти(ТекущийLocalId, ".КлассификацияПоля") <> 0 Тогда
		ОбработатьКлассификациюПоля(СписокLocalid, СтруктураТекущегоУзла, ТекущийLocalId);
		Возврат;
	КонецЕсли;
	
	LocalidУзла = ПолучитьLocalidУзла(ТекущийLocalId, ТекущийУзел, СписокLocalid);
	Если LocalidУзла = Неопределено Или ЗарезервированныйLocalid(LocalidУзла) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеLocalid = СписокLocalid.Получить(LocalidУзла);
	Если ДанныеLocalid = Неопределено Тогда
		// Новый Localid
		ОбработатьДанныеНовогоLocalid(ДанныеLocalid, СписокLocalid, LocalidУзла, СтруктураТекущегоУзла);
	Иначе
		Попытка
			СинонимИзАтрибута = СтруктураТекущегоУзла.Узел.ПолучитьАтрибут("localidСиноним");
			Если ЗначениеЗаполнено(СинонимИзАтрибута) Тогда
				ДанныеLocalid.Представление = СинонимИзАтрибута;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЕсли;
	
	// Группирующее поле. Если localid является дочерним у множественного - надо запомнить родителя.
	ОбновитьРодителейУзла(ДанныеLocalid, СписокLocalid, LocalidУзла, СтруктураТекущегоУзла);
	
	// Секция
	Секция = ПолучитьСекциюУзла(СтруктураТекущегоУзла);
	Если ЗначениеЗаполнено(Секция) Тогда
		ДобавитьМассивВСтруктуруLocalid(ДанныеLocalid, "Секция", Секция);
	КонецЕсли;
	
	// Классификатор и тип
	ЗначениеКлассификатора = ПолучитьЗначениеАтрибутаУзла(ТекущийУзел, "codesystem");
	Если Не ЗначениеЗаполнено(ЗначениеКлассификатора)
		Или ЗначениеКлассификатора = "#codesystem"
	Тогда
		ЗначениеКлассификатора = ПолучитьЗначениеАтрибутаУзла(ТекущийУзел, "классификация");
		Если Лев(ЗначениеКлассификатора, 1) = "*" Тогда
			ЗначениеКлассификатора = ВычислитьФункцию(ЗначениеКлассификатора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеКлассификатора) Тогда
		Если НРег(ЗначениеКлассификатора) = "#codesystem" Тогда
			// Если атрибут Классификация="#codesystem"
			ДобавитьМассивВСтруктуруLocalid(ДанныеLocalid, "ТипДанных", ТипДанныхИзXML("CD"));
			ДобавитьИндексВСтруктуруLocalid(ДанныеLocalid, Индекс);
		ИначеЕсли ТекущийУзел.ИмяУзла <> "translation" Или ПолучитьЗначениеАтрибутаУзла(ТекущийУзел, "ТипДанных") = Неопределено Тогда // TODO: сделать понадёжней
			// Это узел поля ссылки на классификатор минздрава - фиксируем его тип.
			ДанныеLocalid.Вставить("Классификатор", ЗначениеКлассификатора);
			ДобавитьИндексВСтруктуруLocalid(ДанныеLocalid, Индекс);
		КонецЕсли;
	КонецЕсли;
	
	// Множественное
	Если СтруктураТекущегоУзла.СвойстваУзла.Множественное Тогда
		ДанныеLocalid.Вставить("Множественное", Истина);
	КонецЕсли;
	
	// TODO: Пока такого не встречалось, номожет вознкнуть такая ситуация:
	//	localid имеет 2 родителей в разных секциях (напр. Штрихкод в лаб. иссл)
	//		В первом он обязательный, во втором - нет. Нужно, чтобы в ДанныеLocalid попало Истина
	//	При этом как и сейчас нужно в случае, когда, например, в ДанныеLocalid уже есть обязательный localid
	//		(узел описывает наличие внутри localid, но не указывает, обязательный ли он), а внутри
	//		оказывается, что он не обязателен - нужно, чтобы в ДанныеLocalid Истина заменился на Ложь
	
	// Обязательное
	Если СтруктураТекущегоУзла.СвойстваУзла.Обязательное
		И (Не ЗначениеЗаполнено(СтруктураТекущегоУзла.СвойстваУзла.ЗначениеПустогоЗначения)
			Или ТекущийУзел.ПолучитьАтрибут("СохранятьДочерниеУзлы") <> Неопределено)
		И Не УзелИмеетНеобязательногоПредка(СтруктураТекущегоУзла)
	Тогда
		ДанныеLocalid.Вставить("Обязательное", Истина);
	Иначе
		ДанныеLocalid.Вставить("Обязательное", Ложь);
	КонецЕсли;
	
	// Тип
	ЗначенияТипов = ПолучитьЗначениеАтрибутаУзла(ТекущийУзел, "xsi:type");
	Если Не ЗначениеЗаполнено(ЗначенияТипов) Тогда
		ЗначенияТипов = ПолучитьЗначениеАтрибутаУзла(ТекущийУзел, "типданных");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияТипов) И ЗначенияТипов <> "CD" Тогда
		Для Каждого ЗначениеТипа Из СтрРазделить(ЗначенияТипов, ",", Ложь) Цикл
			ДобавитьМассивВСтруктуруLocalid(ДанныеLocalid, "ТипДанных", ТипДанныхИзXML(СокрЛП(ЗначениеТипа)));
		КонецЦикла;
		ДобавитьИндексВСтруктуруLocalid(ДанныеLocalid, Индекс);
	КонецЕсли;
	
	// ДопустимыеЗначения
	Если ЗначениеЗаполнено(СтруктураТекущегоУзла.СвойстваУзла.ДопустимыеЗначения) Тогда
		ДопустимыеЗначения = Новый Массив;
		Для Каждого стрДопустимоеЗначение Из СтрРазделить(СтруктураТекущегоУзла.СвойстваУзла.ДопустимыеЗначения, ";") Цикл
			ДопустимыеЗначения.Добавить(Число(стрДопустимоеЗначение));
		КонецЦикла;
	Иначе
		ДопустимыеЗначения = Неопределено;
	КонецЕсли;
	
	ДанныеLocalid.Вставить("ДопустимыеЗначения", ДопустимыеЗначения);
	
	Если ДанныеLocalid.Обязательное Тогда
		ДанныеLocalid.Вставить("УсловиеОбязательное", ПолучитьУсловиеОбязательного(ТекущийУзел));
	Иначе
		ДанныеLocalid.Вставить("УсловиеОбязательное", Неопределено);
	КонецЕсли;
	
	АтрибутыИсточниковЗаполнений = Новый Соответствие;
	АтрибутыИсточниковЗаполнений.Вставить("ВозможноЗаполнениеИзТаблицыДиагнозов", ИсточникЗаполненияПоДиагнозам());
	
	ИсточникЗаполнения = Неопределено;
	Узел = ТекущийУзел;
	Пока Узел <> Узел.ДокументВладелец Цикл
		Для Каждого КлючЗначение Из АтрибутыИсточниковЗаполнений Цикл
			Если Узел.ПолучитьАтрибут(КлючЗначение.Ключ) <> Неопределено Тогда
				ИсточникЗаполнения = КлючЗначение.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИсточникЗаполнения) Тогда
			Прервать;
		КонецЕсли;
		Узел = Узел.РодительскийУзел;
	КонецЦикла;
	
	ДанныеLocalid.Вставить("ИсточникЗаполнения", ИсточникЗаполнения);
	
КонецПроцедуры

Функция ПолучитьУсловиеОбязательного(Узел)
	
	Если ТипЗнч(Узел) = Тип("ЭлементDOM")
		И Узел.ЕстьАтрибут("УсловиеОбязательное")
	Тогда
		Возврат Узел.ПолучитьАтрибут("УсловиеОбязательное");
	КонецЕсли;
	
	Если Узел.РодительскийУзел <> Неопределено Тогда
		Возврат ПолучитьУсловиеОбязательного(Узел.РодительскийУзел);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОбновитьРодителейУзла(ДанныеLocalid, СписокLocalid, LocalidУзла, СтруктураТекущегоУзла)
	
	РодительУзла = СтруктураТекущегоУзла.РодительскийУзел;
	Пока РодительУзла <> Неопределено Цикл
		Если РодительУзла.СвойстваУзла.Множественное Тогда
			
			LocalidРодителя = СписокLocalid.Получить(РодительУзла.СвойстваУзла.localid);
			Если LocalidРодителя <> Неопределено И LocalidУзла <> LocalidРодителя.localid Тогда
				ДобавитьМассивВСтруктуруLocalid(ДанныеLocalid, "Родитель", LocalidРодителя);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		РодительУзла = РодительУзла.РодительскийУзел;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСекциюУзла(СтруктураТекущегоУзла)
	
	УзелСекции = Неопределено;
	РодительУзла = СтруктураТекущегоУзла.РодительскийУзел;
	Пока РодительУзла <> Неопределено Цикл
		Если НРег(РодительУзла.Узел.ИмяУзла) = "section" Тогда
			УзелСекции = РодительУзла.Узел;
			Прервать;
		КонецЕсли;
		
		РодительУзла = РодительУзла.РодительскийУзел;
	КонецЦикла;
	
	Если УзелСекции <> Неопределено Тогда
		Для Каждого ДочернийУзелСекции Из УзелСекции.ДочерниеУзлы Цикл
			Если Нрег(ДочернийУзелСекции.ИмяУзла) = "code"
				И ЭтоOIDСправочникаСекций(ПолучитьЗначениеАтрибутаУзла(ДочернийУзелСекции, "codeSystem"))
			Тогда
				Возврат ПолучитьЗначениеАтрибутаУзла(ДочернийУзелСекции, "code");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОбработатьДанныеНовогоLocalid(ДанныеLocalid, СписокLocalid, LocalidУзла, СтруктураТекущегоУзла)
	
	Синоним = ПолучитьЗначениеАтрибутаУзла(СтруктураТекущегоУзла.Узел, "localidСиноним");
	Если Не ЗначениеЗаполнено(Синоним) Тогда
		Синоним = РазбитьСоставноеСлово(LocalidУзла);
	КонецЕсли;
	
	ДанныеLocalid = Новый Структура("localid, Представление", LocalidУзла, Синоним);
	СписокLocalid.Вставить(LocalidУзла, ДанныеLocalid);
	
КонецПроцедуры

Процедура ОбработатьКлассификациюПоля(СписокLocalid, СтруктураТекущегоУзла, ТекущийLocalId)
	
	LocalidУзла = СтрРазделить(ТекущийLocalId, ".")[0];
	ДанныеLocalid = СписокLocalid.Получить(LocalidУзла);
	Если ДанныеLocalid = Неопределено Тогда
		СвойстваУзла = ПолучитьСвойстваУзлаТела(СтруктураТекущегоУзла.Узел, LocalidУзла);
		СтруктураТекущегоУзла = ПолучитьСтруктуруТекущегоУзла(СтруктураТекущегоУзла.Узел, СтруктураТекущегоУзла, СвойстваУзла);
		ОбработатьДанныеНовогоLocalid(ДанныеLocalid, СписокLocalid, LocalidУзла, СтруктураТекущегоУзла);
	КонецЕсли;
	Если ДанныеLocalid = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеLocalid.Вставить("КлассификацияПоля", ПолучитьЗначениеАтрибутаУзла(СтруктураТекущегоУзла.Узел, "codesystem"));
	
	ДопустимыеКлассификации = Новый Массив;
	ДопустимыеЗначения = ПолучитьЗначениеАтрибутаУзла(СтруктураТекущегоУзла.Узел, "ДопустимыеЗначения");
	
	Если ДопустимыеЗначения <> Неопределено Тогда
		Для Каждого стрДопустимоеЗначение Из СтрРазделить(СтруктураТекущегоУзла.СвойстваУзла.ДопустимыеЗначения, ";") Цикл
			ДопустимыеКлассификации.Добавить(Число(стрДопустимоеЗначение));
		КонецЦикла;
		ДанныеLocalid.Вставить("ДопустимыеКлассификации", ДопустимыеКлассификации);
	КонецЕсли;
	
КонецПроцедуры

Функция УзелИмеетНеобязательногоПредка(СтруктураТекущегоУзла)
	
	РодительУзла = СтруктураТекущегоУзла.РодительскийУзел;
	Пока РодительУзла <> Неопределено Цикл
		Если Не РодительУзла.СвойстваУзла.Обязательное Тогда
			Возврат Истина;
		КонецЕсли;
		РодительУзла = РодительУзла.РодительскийУзел;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьLocalidУзла(ТекущийLocalId, ТекущийУзел, СписокLocalid)
	
	LocalidУзла = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущийLocalId) Тогда
		LocalidУзла = СтрРазделить(ТекущийLocalId, ".")[0];
	Иначе
		ЗначениеValue = ПолучитьЗначениеАтрибутаУзла(ТекущийУзел, "value");
		Если ЗначениеЗаполнено(ЗначениеValue)
			И СтрРазделить(ЗначениеValue, ".").Количество() = 1
		Тогда
			Если Лев(ЗначениеValue, 1) = "%" Тогда
				LocalidУзла = СтрРазделить(ЗначениеValue, "%")[1];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат LocalidУзла;
	
КонецФункции

Функция ПолучитьЗначениеАтрибутаУзла(Узел, ИмяАтрибута)
	
	Для Каждого Атрибут Из Узел.Атрибуты Цикл
		Если НРег(Атрибут.ИмяУзла) = НРег(ИмяАтрибута) Тогда
			Возврат Атрибут.ЗначениеУзла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьКорректныеCodeSystem(ВидРЭМД)
	
	ТабДокумент = Справочники.РегистрируемыеЭлектронныеМедДокументы.ПолучитьМакет("КорректныеCodeSystem");
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДокумент.Область(1, 1, ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы));
	ПостроительОтчета.Выполнить();
	
	ВсеКорректныеCodeSystem = ПостроительОтчета.Результат.Выгрузить();
	КорректныеCodeSystem = ВсеКорректныеCodeSystem.СкопироватьКолонки();
	
	Для Каждого СтрокаКорректногоCodeSystem Из ВсеКорректныеCodeSystem.НайтиСтроки(Новый Структура("ВидРЭМД", ВидРЭМД)) Цикл
		ЗаполнитьЗначенияСвойств(КорректныеCodeSystem.Добавить(), СтрокаКорректногоCodeSystem);
	КонецЦикла;
	
	Возврат КорректныеCodeSystem;
	
КонецФункции

Процедура УбратьПространствоИменДляВалидации(ТекстXML)
	
	// TODO: заменить на что-то более надёжное
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""urn:hl7-org:v3""", "");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПараметровПоПриему(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам, ДополнительныеПараметры)
	
	КонстантыCDAДокумента = ДополнительныеПараметры.ШаблонОсмотра.КонстантыCDAДокумента.Выгрузить();
	СоответствияПараметрам = ДополнительныеПараметры.ШаблонОсмотра.СоответствияПараметрам.Выгрузить();
	
	Если ДополнительныеПараметры.ПараметрыШаблона = Неопределено Тогда
		ДополнительныеПараметры.ПараметрыШаблона = ПолучитьСтруктуруТаблицПараметровШаблона();
	КонецЕсли;
	
	ПараметрыЭталонныхСтрок = РаботаСШаблонамиHTML.ПараметрыЭталонныхСтрокВсехТаблицШаблона(ДополнительныеПараметры.ШаблонОсмотра.ТекстHTML);
	
	НаборЗаписей = РегистрыСведений.ЗначенияПараметровHTML.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.ИндексШаблона.Установить(ДополнительныеПараметры.ИндексШаблона);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если ПараметрыЭталонныхСтрок.Найти(Запись.Параметр) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//ВидШаблона = Ссылка.ШаблоныПриема[Запись.ИндексШаблона].ШаблонПриема;
		ФорматнаяСтрока = Запись.Параметр.ФорматнаяСтрока;
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.Параметр					= Запись.Параметр;
		НоваяСтрока.ИдентификаторСтрокиШаблона	= Запись.ИндексШаблона;
		
		Если ТипЗнч(Запись.Значение) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
			НоваяСтрока.Значение = Запись.Значение.Значение;
		Иначе
			НоваяСтрока.Значение = Запись.Значение;
		КонецЕсли;
		
		СтрокаПараметра = ДополнительныеПараметры.ПараметрыШаблона.ЗначенияПараметровHTML.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметра, Запись);
		
		СтрокаПараметра.ИдентификаторСтрокиШаблона	= Запись.ИндексШаблона;
		СтрокаПараметра.Значение					= НоваяСтрока.Значение;
		СтрокаПараметра.Представление				= РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(СтрокаПараметра, ФорматнаяСтрока);
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ДанныеТаблицШаблоновПриема.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.ИндексШаблона.Установить(ДополнительныеПараметры.ИндексШаблона);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		ФорматнаяСтрока = Запись.Параметр.ФорматнаяСтрока;
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись, "Параметр,ТаблицаШаблонов,НомерСтрокиТаблицы,ИдентификаторСтроки,ИдентификаторРодительскойСтроки");
		НоваяСтрока.ИдентификаторСтрокиШаблона = Запись.ИндексШаблона;
		
		Если ТипЗнч(Запись.Значение) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
			НоваяСтрока.Значение = Запись.Значение.Значение;
		Иначе
			НоваяСтрока.Значение = Запись.Значение;
		КонецЕсли;
		
		СтрокаПараметраТаблицШаблонов = ДополнительныеПараметры.ПараметрыШаблона.ДанныеТаблицШаблоновПриема.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметраТаблицШаблонов, Запись);
		
		СтрокаПараметраТаблицШаблонов.ИдентификаторСтрокиШаблона	= Запись.ИндексШаблона;
		СтрокаПараметраТаблицШаблонов.ИдентификаторТаблицы			= Строка(Запись.ТаблицаШаблонов.УникальныйИдентификатор());
		СтрокаПараметраТаблицШаблонов.Значение						= НоваяСтрока.Значение;
		СтрокаПараметраТаблицШаблонов.Представление					= РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(СтрокаПараметраТаблицШаблонов, ФорматнаяСтрока);
		
	КонецЦикла;
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Врач, "Сотрудник");
	
	Если ДополнительныеПараметры.ШаблонОсмотра.ЗаполнятьДиагнозыИзТабличнойЧасти Тогда
		ЗаполнитьПараметрыДиагнозовПоТабличнойЧастиПриема(Ссылка, ТаблицаПараметров, ДополнительныеПараметры.ШаблонОсмотра.ВидДокумента, СоответствияПараметрам, КонстантыCDAДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДиагнозовПоТабличнойЧастиПриема(Ссылка, ТаблицаПараметров, ВидДокумента, СоответствияПараметрам, КонстантыCDAДокумента)
	
	Попытка
		ДокументXML = ПолучитьXML(ПолучитьМакетСправочникаПоВидуДокумента(ВидДокумента));
		УзлыОписанияДиагнозов = ДокументXML.ПолучитьЭлементыПоИмени("bitDiagnosis");
	Исключение
		Возврат;
	КонецПопытки;
	
	Если УзлыОписанияДиагнозов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДиагнозовПриема = ПолучитьТаблицуДиагнозовПоТабличнойЧасти(Ссылка);
	СгруппированныеСтроки = Новый Соответствие;
	
	Для Каждого УзелСтруктурыДиагноза Из УзлыОписанияДиагнозов[0].ДочерниеУзлы Цикл
		ЗаполнитьПараметрыДиагнозовПоУзлуСтруктурыДиагноза(УзелСтруктурыДиагноза, ТаблицаДиагнозовПриема, СгруппированныеСтроки, ТаблицаПараметров, СоответствияПараметрам, КонстантыCDAДокумента);
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СгруппированныеСтроки Цикл
		ГруппирующаяСтрока = КлючЗначение.Ключ;
		Для Каждого СгруппированнаяСтрока Из КлючЗначение.Значение Цикл
			СгруппированнаяСтрока.ГруппирующееПоле = ТаблицаПараметров.Индекс(ГруппирующаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуДиагнозовПоТабличнойЧасти(Ссылка)
	
	тзДиагнозы = Новый ТаблицаЗначений;
	тзДиагнозы.Колонки.Добавить("СтепеньОбоснованности",	Новый ОписаниеТипов("СправочникСсылка.КлассификаторыМинЗдрава"));
	тзДиагнозы.Колонки.Добавить("УточнениеХарактера",		Новый ОписаниеТипов("СправочникСсылка.КлассификаторыМинЗдрава"));
	тзДиагнозы.Колонки.Добавить("ВидНозологическойЕдиницы",	Новый ОписаниеТипов("СправочникСсылка.КлассификаторыМинЗдрава"));
	тзДиагнозы.Колонки.Добавить("Описание",					Новый ОписаниеТипов("Строка"));
	тзДиагнозы.Колонки.Добавить("Диагноз",					Новый ОписаниеТипов("СправочникСсылка.Диагнозы"));
	
	ОсновнойДиагноз = МедицинскаяДеятельность.ОсновнойДиагнозПриема(Ссылка,, Новый Структура("Классификация3", ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(Перечисления.КлассификацииДиагнозов.ОсновноеЗаболевание)));
	Если Не ЗначениеЗаполнено(ОсновнойДиагноз) Тогда
		Возврат тзДиагнозы;
	КонецЕсли;
	
	ДиагнозыМКБС = Новый Массив;
	Если ОсновнойДиагноз.OIDСправочникаИсточника = Справочники.Диагнозы.OIDСправочникаМКБС() Тогда
		ДиагнозыМКБС.Добавить(ОсновнойДиагноз);
	КонецЕсли;
	
	ОстальныеДиагнозы = Новый Массив;
	Для Каждого СтрокаДиагнозаПриема Из Ссылка.Диагнозы Цикл
		Если ЗначениеЗаполнено(СтрокаДиагнозаПриема.Диагноз)
			И СтрокаДиагнозаПриема.Диагноз <> ОсновнойДиагноз
			И СтрокаДиагнозаПриема.Классификация3 <> Перечисления.КлассификацииДиагнозов.ОсновноеЗаболевание
		Тогда
			ОстальныеДиагнозы.Добавить(СтрокаДиагнозаПриема.Диагноз);
			Если СтрокаДиагнозаПриема.Диагноз.OIDСправочникаИсточника = Справочники.Диагнозы.OIDСправочникаМКБС() Тогда
				ДиагнозыМКБС.Добавить(СтрокаДиагнозаПриема.Диагноз);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДиагнозыМКБ10 = Новый Соответствие;
	Если ДиагнозыМКБС.Количество() > 0 Тогда
		РодителиДиагнозовМКБС = Новый Массив;
		Для Каждого ДиагнозМКБС Из ДиагнозыМКБС Цикл
			РодительДиагноза = ДиагнозМКБС.Родитель;
			Пока ЗначениеЗаполнено(РодительДиагноза) Цикл
				Если РодителиДиагнозовМКБС.Найти(РодительДиагноза) = Неопределено Тогда
					РодителиДиагнозовМКБС.Добавить(РодительДиагноза);
				КонецЕсли;
				РодительДиагноза = РодительДиагноза.Родитель;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Диагнозы.Ссылка КАК Ссылка,
			|	СОКРЛП(Диагнозы.КодДиагноза) КАК КодДиагноза
			|ИЗ
			|	Справочник.Диагнозы КАК Диагнозы
			|ГДЕ
			|	Диагнозы.Родитель В(&РодителиДиагнозовМКБС)
			|	И Диагнозы.OIDСправочникаИсточника = &OIDСправочникаМКБ10";
		
		Запрос.УстановитьПараметр("РодителиДиагнозовМКБС", РодителиДиагнозовМКБС);
		Запрос.УстановитьПараметр("OIDСправочникаМКБ10", Справочники.Диагнозы.ПолучитьOIDСправочника());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДиагнозыМКБ10.Вставить(Выборка.КодДиагноза, Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если ОсновнойДиагноз.OIDСправочникаИсточника = Справочники.Диагнозы.OIDСправочникаМКБС() Тогда
		ОсновнойДиагнозМКБ10 = ПолучитьДиагнозМКБ10(ОсновнойДиагноз, ДиагнозыМКБ10);
	Иначе
		ОсновнойДиагнозМКБ10 = ОсновнойДиагноз;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОсновнойДиагнозМКБ10) Тогда
		// Вероятно некорректно загружены диагнозы из МКБ-10
		Возврат тзДиагнозы;
	КонецЕсли;
	
	СтепениОбоснованности					 = СтепениОбоснованностиДиагнозаПоКлассификатору();
	УточненияХарактера						 = УточненияХарактераДиагнозаПоКлассификатору();
	ВидыНозологическихЕдиницПоКлассификатору = ВидыНозологическихЕдиницПоКлассификатору();
	
	Для Каждого СтрокаДиагнозаПриема Из Ссылка.Диагнозы Цикл
		
		Если СтрокаДиагнозаПриема.Диагноз.OIDСправочникаИсточника = Справочники.Диагнозы.OIDСправочникаМКБС() Тогда
			Диагноз = ПолучитьДиагнозМКБ10(СтрокаДиагнозаПриема.Диагноз, ДиагнозыМКБ10);
		Иначе
			Диагноз = СтрокаДиагнозаПриема.Диагноз;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Диагноз) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДиагнозаПриема.Классификация3 = Перечисления.КлассификацииДиагнозов.ОсновноеЗаболевание
			И СтрокаДиагнозаПриема.Диагноз <> ОсновнойДиагноз
		Тогда
			Продолжить;
		КонецЕсли;
		
		СтепеньОбоснованности = ?(ЗначениеЗаполнено(СтрокаДиагнозаПриема.Классификация1), СтрокаДиагнозаПриема.Классификация1, Перечисления.КлассификацииДиагнозов.Предварительный);
		
		СтрокаДиагноза = тзДиагнозы.Добавить();
		СтрокаДиагноза.Диагноз					= Диагноз;
		СтрокаДиагноза.СтепеньОбоснованности	= СтепениОбоснованности.Получить(СтепеньОбоснованности);
		СтрокаДиагноза.УточнениеХарактера		= УточненияХарактера.Получить(СтрокаДиагнозаПриема.Классификация2);
		СтрокаДиагноза.ВидНозологическойЕдиницы	= ВидыНозологическихЕдиницПоКлассификатору.Получить(СтрокаДиагнозаПриема.Классификация3);
		СтрокаДиагноза.Описание					= СтрокаДиагнозаПриема.Детализация;
	КонецЦикла;
	
	Возврат тзДиагнозы;
	
КонецФункции

Процедура ЗаполнитьПараметрыДиагнозовПоУзлуСтруктурыДиагноза(УзелСтруктурыДиагноза, ТаблицаДиагнозовПриема, СгруппированныеСтроки, ТаблицаПараметров, СоответствияПараметрам, КонстантыCDAДокумента)
	
	АтрибутОбщейСтепениОбоснованности	= УзелСтруктурыДиагноза.ПолучитьАтрибут("ОбщаяСтепеньОбоснованности");
	АтрибутМножественностиДиагнозов		= УзелСтруктурыДиагноза.ПолучитьАтрибут("Множественное");
	АтрибутОтбора						= УзелСтруктурыДиагноза.ПолучитьАтрибут("Отбор");
	
	ОбщаяСтепеньОбоснованности	= АтрибутОбщейСтепениОбоснованности <> Неопределено И ВычислитьФункцию(АтрибутОбщейСтепениОбоснованности) = Истина;
	МножественныеДиагнозы		= АтрибутМножественностиДиагнозов <> Неопределено И ВычислитьФункцию(АтрибутМножественностиДиагнозов) = Истина;
	ГруппирующееПоле			= УзелСтруктурыДиагноза.ПолучитьАтрибут("ГруппирующееПоле");
	
	СтруктурыУзловДиагноза = СформироватьСтруктурыУзловДиагноза(УзелСтруктурыДиагноза);
	УдалитьСуществующиеСтрокиПараметровДиагнозов(СтруктурыУзловДиагноза, ТаблицаПараметров, СоответствияПараметрам, КонстантыCDAДокумента);
	ТаблицаНеобходимыхДиагнозов = ПолучитьТаблицуНеобходимыхДиагнозовПоОтбору(ТаблицаДиагнозовПриема.Скопировать(), АтрибутОтбора);
	
	// Отбираем те, у которых заполнены все обязательные реквизиты
	ТаблицаДиагнозов = ТаблицаНеобходимыхДиагнозов.СкопироватьКолонки();
	Для Каждого СтрокаДиагноза Из ТаблицаНеобходимыхДиагнозов Цикл
		ЗаполненыВсеОбязательные = Истина;
		Для Каждого СтруктураУзлаДиагноза Из СтруктурыУзловДиагноза Цикл
			Если СтруктураУзлаДиагноза.Значение.Обязательное
				И Не ЗначениеЗаполнено(СтрокаДиагноза[СтруктураУзлаДиагноза.Ключ])
			Тогда
				ЗаполненыВсеОбязательные = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненыВсеОбязательные Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДиагнозов.Добавить(), СтрокаДиагноза);
		КонецЕсли;
	КонецЦикла;
	
	// Если подходящих диагнозов несколько, но для СЭМДа требуется только один
	Если Не МножественныеДиагнозы
		И ТаблицаДиагнозов.Количество() > 1
	Тогда
		
		ОтобраннаяСтрокаДиагноза = Неопределено;
		// Основной в приоритете, если его нет среди отобранных - используется любой
		Для Каждого СтрокаДиагноза Из ТаблицаДиагнозов Цикл
			Если СтрокаДиагноза.ВидНозологическойЕдиницы = НозологическаяЕдиницаОсновногоДиагноза() Тогда
				ОтобраннаяСтрокаДиагноза = СтрокаДиагноза;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОтобраннаяСтрокаДиагноза = Неопределено Тогда
			ОтобраннаяСтрокаДиагноза = ТаблицаДиагнозов[0];
		КонецЕсли;
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаДиагнозов Цикл
			Если СтрокаТаблицы <> ОтобраннаяСтрокаДиагноза Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДиагнозов.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщаяСтепеньОбоснованности
		И СтруктурыУзловДиагноза.Получить("СтепеньОбоснованности") <> Неопределено
	Тогда
		// Оставляем строки только по одной степени
		СтепеньПредварительногоДиагноза = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(1, Перечисления.ВидыКлассификаторовМинЗдрава.СтепеньОбоснованностиДиагноза);
		СтрокиПредварительныхДиагнозов = ТаблицаДиагнозов.НайтиСтроки(Новый Структура("СтепеньОбоснованности", СтепеньПредварительногоДиагноза));
		Если ТаблицаДиагнозов.Количество() > СтрокиПредварительныхДиагнозов.Количество() Тогда
			// В приоритете заключительные
			Для Каждого СтрокаПредварительного Из СтрокиПредварительныхДиагнозов Цикл
				ТаблицаДиагнозов.Удалить(СтрокаПредварительного);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УказанаОбщаяСтепеньОбоснованности = Ложь;
	
	// Добавление строк диагноза в таблицу параметров
	Для Каждого СтрокаДиагноза Из ТаблицаДиагнозов Цикл
		
		СтрокаГруппирующегоПоля = Неопределено;
		СтрокиПараметровДиагнозаДляГруппирующегоПоля = Новый Массив;
		Для Каждого СтруктураУзлаДиагноза Из СтруктурыУзловДиагноза Цикл
			
			Если СтруктураУзлаДиагноза.Ключ = "СтепеньОбоснованности"
				И ОбщаяСтепеньОбоснованности
			Тогда
				Если Не УказанаОбщаяСтепеньОбоснованности Тогда
					СтрокаПараметраДиагноза = ТаблицаПараметров.Добавить();
					СтрокаПараметраДиагноза.Значение = СтрокаДиагноза[СтруктураУзлаДиагноза.Ключ];
					СтрокаПараметраДиагноза.localid = СтруктураУзлаДиагноза.Значение.localid;
					СтрокаПараметраДиагноза.АвтозаполнениеИзДанныхДокумента = Истина;
					УказанаОбщаяСтепеньОбоснованности = Истина;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			СтрокаПараметраДиагноза = ТаблицаПараметров.Добавить();
			СтрокаПараметраДиагноза.Значение = СтрокаДиагноза[СтруктураУзлаДиагноза.Ключ];
			СтрокаПараметраДиагноза.localid = СтруктураУзлаДиагноза.Значение.localid;
			СтрокаПараметраДиагноза.АвтозаполнениеИзДанныхДокумента = Истина;
			Если СтруктураУзлаДиагноза.Ключ = ГруппирующееПоле Тогда
				СтрокаГруппирующегоПоля = СтрокаПараметраДиагноза;
			Иначе
				СтрокиПараметровДиагнозаДляГруппирующегоПоля.Добавить(СтрокаПараметраДиагноза);
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаГруппирующегоПоля <> Неопределено Тогда
			СгруппированныеСтроки.Вставить(СтрокаГруппирующегоПоля, СтрокиПараметровДиагнозаДляГруппирующегоПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктурыУзловДиагноза(УзелСтруктурыДиагноза)
	
	СтруктурыУзловДиагноза = Новый Соответствие;
	Для Каждого ДочернийУзел Из УзелСтруктурыДиагноза.ДочерниеУзлы Цикл
		АтрибутОбязательности = ДочернийУзел.ПолучитьАтрибут("Обязательное");
		Обязательное = АтрибутОбязательности = Неопределено Или ВычислитьФункцию(АтрибутОбязательности);
		
		СтруктураУзлаДиагноза = Новый Структура;
		СтруктураУзлаДиагноза.Вставить("localid", ДочернийУзел.ПолучитьАтрибут("localid"));
		СтруктураУзлаДиагноза.Вставить("Обязательное", Обязательное);
		СтруктурыУзловДиагноза.Вставить(ДочернийУзел.ПолучитьАтрибут("type"), СтруктураУзлаДиагноза);
	КонецЦикла;
	
	Возврат СтруктурыУзловДиагноза;
	
КонецФункции

Процедура УдалитьСуществующиеСтрокиПараметровДиагнозов(СтруктурыУзловДиагноза, ТаблицаПараметров, СоответствияПараметрам, КонстантыCDAДокумента)
	
	СтрокиПараметровКУдалению = Новый Массив;
	Для Каждого СтруктураУзлаДиагноза Из СтруктурыУзловДиагноза Цикл
		Для Каждого СтрокаПараметраПоСоответствию Из СоответствияПараметрам.НайтиСтроки(Новый Структура("localid", СтруктураУзлаДиагноза.Значение.localid)) Цикл
			Для Каждого СтрокаТаблицы Из ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметраПоСоответствию.Параметр)) Цикл
				СтрокиПараметровКУдалению.Добавить(СтрокаТаблицы);
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаКонстанты Из КонстантыCDAДокумента.НайтиСтроки(Новый Структура("localid", СтруктураУзлаДиагноза.Значение.localid)) Цикл
			КонстантыCDAДокумента.Удалить(СтрокаКонстанты);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаПараметраКУдалению Из СтрокиПараметровКУдалению Цикл
		ТаблицаПараметров.Удалить(СтрокаПараметраКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуНеобходимыхДиагнозовПоОтбору(ТаблицаДиагнозовПриема, АтрибутОтбора);
	
	Если Не ЗначениеЗаполнено(АтрибутОтбора) Тогда
		Возврат ТаблицаДиагнозовПриема;
	КонецЕсли;
	
	Если СтрНачинаетсяС(АтрибутОтбора, "*") Тогда
		Попытка
			ТаблицаНеобходимыхДиагнозов = Вычислить(Прав(АтрибутОтбора, СтрДлина(АтрибутОтбора)-1));
		Исключение
			ТаблицаНеобходимыхДиагнозов = ТаблицаДиагнозовПриема.Очистить();
		КонецПопытки;
		
		Возврат ТаблицаНеобходимыхДиагнозов;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Для Каждого ПараметрОтбора Из СтрРазделить(АтрибутОтбора, ";", Ложь) Цикл
		КлючЗначение = СтрРазделить(ПараметрОтбора, ":", Ложь);
		Если КлючЗначение.Количество() = 2 Тогда
			
			КлючОтбора = КлючЗначение[0];
			ЗначениеОтбора = КлючЗначение[1];
			Если СтрНачинаетсяС(ЗначениеОтбора, "*") Тогда
				СтрокаВычисления = Прав(ЗначениеОтбора, СтрДлина(ЗначениеОтбора)-1);
				ЗначениеОтбора = Вычислить(СтрокаВычисления);
			КонецЕсли;
			Отбор.Вставить(КлючОтбора, ЗначениеОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат ТаблицаДиагнозовПриема;
	КонецЕсли;
	
	ТаблицаНеобходимыхДиагнозов = ТаблицаДиагнозовПриема.СкопироватьКолонки();
	Для Каждого СтрокаДиагнозаПоОтбору Из ТаблицаДиагнозовПриема.НайтиСтроки(Отбор) Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНеобходимыхДиагнозов.Добавить(), СтрокаДиагнозаПоОтбору);
	КонецЦикла;
	
	Возврат ТаблицаНеобходимыхДиагнозов;
	
КонецФункции

Функция ПолучитьДиагнозМКБ10(Диагноз, ДиагнозыМКБ10)
	
	ДиагнозМКБ10 = ДиагнозыМКБ10.Получить(СокрЛП(Диагноз.КодДиагноза));
	
	Если ДиагнозМКБ10 <> Неопределено Тогда
		Возврат ДиагнозМКБ10;
	ИначеЕсли ЗначениеЗаполнено(Диагноз.Родитель) Тогда
		Возврат ПолучитьДиагнозМКБ10(Диагноз.Родитель, ДиагнозыМКБ10);
	Иначе
		Возврат Справочники.Диагнозы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьТаблицуПараметровПоПМО(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам, ДополнительныеПараметры)
	
	ШаблонМО = ДополнительныеПараметры.ШаблонОсмотра;
	ВредныйФакторСправки = ДополнительныеПараметры.ВредныйФакторСправки;
	ПриказМО = ДополнительныеПараметры.ПриказМО;
	СообщениеРЭМД = ДополнительныеПараметры.СообщениеРЭМД;
	
	Если ПриказМО <> Неопределено Тогда
		ЗаполнитьТаблицуПараметровПоПриказу(Ссылка, ТаблицаПараметров, ПриказМО, СообщениеРЭМД);
	Иначе
		КонстантыCDAДокумента	= ШаблонМО.КонстантыCDAДокумента;
		СоответствияПараметрам	= ШаблонМО.СоответствияПараметрам;
		
		Если ЗначениеЗаполнено(ВредныйФакторСправки)
			И Не ЗначениеЗаполнено(Ссылка.Номенклатура)
		Тогда
			ПараметрыПриема = Ссылка.ПараметрыПриема.НайтиСтроки(Новый Структура("ВредныйФактор", ВредныйФакторСправки));
		Иначе
			ПараметрыПриема = Ссылка.ПараметрыПриема;
		КонецЕсли;
		
		Для Каждого ПараметрПриема Из ПараметрыПриема Цикл
			Если ТипЗнч(ПараметрПриема.Значение) = Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
				Значение = ПараметрПриема.Значение.Значение;
			Иначе
				Значение = ПараметрПриема.Значение;
			КонецЕсли;
			Если ЗначениеЗаполнено(Значение) Тогда
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.Параметр = ПараметрПриема.Параметр;
				НоваяСтрока.Значение = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПредседательМедКомиссии, "Сотрудник");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПараметровПоПриказу(ПМО, ТаблицаПараметров, ПриказМО, СообщениеРЭМД)
	
	Если ПриказМО = Справочники.ПриказыМедосмотров.Приказ29н Тогда
		
		ВидДокумента = ОпределитьВидДокументаПоПриказуМО(ПриказМО, СообщениеРЭМД, ПМО);
		Если ВидДокумента.УИДЕГИСЗ = 103 Тогда
			ЗаполнитьТаблицуПараметровЗаключенияМедосмотра_103(ПМО, ТаблицаПараметров);
		ИначеЕсли ВидДокумента.УИДЕГИСЗ = 194 Тогда
			ЗаполнитьТаблицуПараметровЗаключенияМедосмотра_194(ПМО, ТаблицаПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПараметровЗаключенияМедосмотра_103(ПМО, ТаблицаПараметров)
	
	ТаблицаПараметров.Колонки.Добавить("ТекстНезаполненногоПараметра");
	
	Если ЗначениеЗаполнено(ПМО.СписокНаПрохождениеМедосмотра) Тогда
		ИсточникДанныхКлиента = ПолучитьДанныеКлиентаИзСписка(ПМО);
		Договор = МедицинскоеСтрахование.ДоговорСоСтраховойПолиса(ПМО.СписокНаПрохождениеМедосмотра.ВидПолиса, ПМО.СписокНаПрохождениеМедосмотра.Филиал, ПМО.ДатаЗавершения);
		Контрагент = ПМО.СписокНаПрохождениеМедосмотра.Контрагент;
		НаименованиеРаботодателя = ПМО.СписокНаПрохождениеМедосмотра.МестоРаботы;
	Иначе
		ИсточникДанныхКлиента = ПМО;
		Договор = МедицинскоеСтрахование.ДоговорСоСтраховойПолиса(ПМО.ВидПолиса, ПМО.Филиал, ПМО.ДатаЗавершения);
		Контрагент = ПМО.ВидПолиса.Контрагент;
		НаименованиеРаботодателя = ПМО.МестоРаботы;
	КонецЕсли;
	
	СтруктурноеПодразделение = ИсточникДанныхКлиента.ЦехУчасток;
	Должность = ДолжностьИзСтрокиПоКлассификатору(ИсточникДанныхКлиента.Профессия);
	Если Не ЗначениеЗаполнено(Должность) Тогда
		Если ЗначениеЗаполнено(ИсточникДанныхКлиента.Профессия) Тогда
			ТекстНезаполненнойДолжности = СтрШаблон(НСтр("ru='Должность (в классификаторе профессий не найден элемент с наименованием ""%1"")'"), ИсточникДанныхКлиента.Профессия);
		Иначе
			ТекстНезаполненнойДолжности = НСтр("ru='Должность не заполнена'");
		КонецЕсли;
	Иначе
		ТекстНезаполненнойДолжности = "";
	КонецЕсли;
	
	ГруппаЗдоровья = ГруппаЗдоровьяПоДиспансернойГруппеМедосмотра(ПМО);
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, НаименованиеРаботодателя,	"НаименованиеРаботодателя");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Договор,					"ДоговорСКонтрагентом");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Контрагент,				"Контрагент");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, СтруктурноеПодразделение,	"СтруктурноеПодразделение");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Должность,				"Должность", Новый Структура("ТекстНезаполненногоПараметра", ТекстНезаполненнойДолжности));
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ГруппаЗдоровья,			"ГруппаЗдоровья");
	
	Для Каждого ВредныйФактор Из ВредныеФакторыДокумента(ПМО) Цикл
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ВредныйФактор, "ПрофессиональнаяВредность");
	КонецЦикла;
	
	Если ПМО.КритичныеПротивопоказания.Количество() > 0 Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ЗаключениеМедосмотра(31), "Заключение");
	Иначе
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ЗаключениеМедосмотра(32), "Заключение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПараметровЗаключенияМедосмотра_194(ПМО, ТаблицаПараметров)
	
	ТаблицаПараметров.Колонки.Добавить("ТекстНезаполненногоПараметра");
	
	Если ЗначениеЗаполнено(ПМО.СписокНаПрохождениеМедосмотра) Тогда
		ИсточникДанныхКлиента = ПолучитьДанныеКлиентаИзСписка(ПМО);
		НаименованиеРаботодателя = ПМО.СписокНаПрохождениеМедосмотра.МестоРаботы;
		ИННРаботодателя = ПМО.СписокНаПрохождениеМедосмотра.Контрагент.ИНН;
	Иначе
		ИсточникДанныхКлиента = ПМО;
		НаименованиеРаботодателя = ПМО.МестоРаботы;
		ИННРаботодателя = ПМО.ИННРаботодателя;
	КонецЕсли;
	
	СтруктурноеПодразделение = ИсточникДанныхКлиента.ЦехУчасток;
	//Должность = ДолжностьИзСтрокиПоКлассификатору(ИсточникДанныхКлиента.Профессия);
	//Если ЗначениеЗаполнено(Должность) Тогда
	//	ДополнитьТаблицуПараметров(ТаблицаПараметров, Должность, "Должность");
	//Иначе
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ИсточникДанныхКлиента.Профессия, "ДолжностьСтрокой");
	//КонецЕсли;
	
	ГруппаЗдоровья = ГруппаЗдоровьяПоДиспансернойГруппеМедосмотра(ПМО);
	ДатаОчередногоПМО = ДобавитьМесяц(ПМО.ДатаЗавершения, 12);
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, НаименованиеРаботодателя,	"НаименованиеРаботодателя");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, СтруктурноеПодразделение,	"СтруктурноеПодразделение");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ГруппаЗдоровья,			"ГруппаЗдоровья");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ДатаОчередногоПМО,		"ДатаПроведенияОчередногоПериодическогоМедицинскогоОсмотра");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ИННРаботодателя,			"ИННРаботодателя");
	
	Для Каждого ВредныйФактор Из ВредныеФакторыДокумента(ПМО) Цикл
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ВредныйФактор, "ВредныйПроизводственныйФактор");
	КонецЦикла;
	
	Если ПМО.КритичныеПротивопоказания.Количество() > 0 Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ЗаключениеМедосмотра(31), "Заключение");
	Иначе
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ЗаключениеМедосмотра(32), "Заключение");
	КонецЕсли;
	
	ЧастиКомментария = Новый Массив;
	Если ЗначениеЗаполнено(ПМО.Осмотр) Тогда
		ЧастиКомментария.Добавить(СтрШаблон("Осмотр:%1%2", Символы.ПС, ПМО.Осмотр));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПМО.Жалобы) Тогда
		ЧастиКомментария.Добавить(СтрШаблон("Жалобы:%1%2", Символы.ПС, ПМО.Жалобы));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПМО.Исследования) Тогда
		ЧастиКомментария.Добавить(СтрШаблон("Исследования:%1%2", Символы.ПС, ПМО.Исследования));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПМО.Рекомендации) Тогда
		ЧастиКомментария.Добавить(СтрШаблон("Рекомендации:%1%2", Символы.ПС, ПМО.Рекомендации));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПМО.Заключение) Тогда
		ЧастиКомментария.Добавить(СтрШаблон("Заключение:%1%2", Символы.ПС, ПМО.Заключение));
	КонецЕсли;
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, СокрЛП(СтрСоединить(ЧастиКомментария, Символы.ПС)), "Комментарий");
	
	ПриемыЛабораторноеИсследование = ПолучитьПриемыСВидомЛабораторноеИсследование(ПМО);
	Для Каждого ЛабораторноеИсследование Из ПриемыЛабораторноеИсследование Цикл
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ЛабораторноеИсследование, "СвязанныйДокументЛабИсследования");
	КонецЦикла;
	
	ПриемыИнструментальноеИсследование = ПолучитьПриемыСВидомИнструментальноеИсследование(ПМО);
	Для Каждого ИнструментальноеИсследование Из ПриемыИнструментальноеИсследование Цикл
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ИнструментальноеИсследование, "СвязанныйДокументИнстрИсследования");
	КонецЦикла;
	
	ПриемыКонсультации = ПолучитьПриемыСВидомКонсультация(ПМО);
	Для Каждого Консультация Из ПриемыКонсультации Цикл
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Консультация, "СвязанныйДокументКонсультации");
	КонецЦикла;
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ПолучитьДанныеОПрофилактическихПрививках(ПМО), "ПрофилактическиеПрививки");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ПолучитьДанныеОПеренесенныхИнфекциях(ПМО),	 "ПеренесенныеИнфекционныеЗаболевания");
	
КонецПроцедуры

Функция ПолучитьДанныеОПрофилактическихПрививках(ПМО)
	
	Если ЗначениеЗаполнено(ПМО.СведенияОПрививках) Тогда
		Возврат ПМО.СведенияОПрививках;
	ИначеЕсли ЗначениеЗаполнено(ПланыВидовХарактеристик.ПараметрыHTML.ПрофпатологСведенияОПрививках.ЗначениеПоУмолчанию) Тогда
		Возврат ПланыВидовХарактеристик.ПараметрыHTML.ПрофпатологСведенияОПрививках.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат "-";
	
КонецФункции

Функция ПолучитьДанныеОПеренесенныхИнфекциях(ПМО)
	
	Если ЗначениеЗаполнено(ПМО.ИнфекционныйАнамнез) Тогда
		Возврат ПМО.ИнфекционныйАнамнез;
	ИначеЕсли ЗначениеЗаполнено(ПланыВидовХарактеристик.ПараметрыHTML.ПрофпатологИнфекционныйАнамнез.ЗначениеПоУмолчанию) Тогда
		Возврат ПланыВидовХарактеристик.ПараметрыHTML.ПрофпатологИнфекционныйАнамнез.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат "-";
	
КонецФункции

Функция ПолучитьПриемыСВидомЛабораторноеИсследование(ПМО) Экспорт
	
	МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
	
	ТаблицаЛабораторныхИсследований = Новый ТаблицаЗначений;
	ТаблицаЛабораторныхИсследований.Колонки.Добавить("ДействиеМедосмотра");
	ТаблицаЛабораторныхИсследований.Колонки.Добавить("ПриемСсылка");
	ТаблицаЛабораторныхИсследований.Колонки.Добавить("ДатаВыполненияДействияМедосмотра");
	ТаблицаЛабораторныхИсследований.Колонки.Добавить("Заключение");
	
	// Из отметок для выписки
	
	// Сначала получаем для тех, которые были сопоставлены с приемами
	СписокДействий = Новый Массив;
	Для Каждого СтрокаДействия Из ПМО.ДействияМедосмотра Цикл
		Если СтрокаДействия.Действие.Вид = Перечисления.ВидыДействийМедицинскогоОсмотра.Исследование Тогда 
			// Либо проверяем по виду исследования, либо по галочке "Анализ" в номенклатуре
			Если ЗначениеЗаполнено(СтрокаДействия.Действие.ВидИсследования) 
					И СтрокаДействия.Действие.ВидИсследования = Перечисления.ВидыИсследованийДействийМедосмотра.ЛабораторноеИсследование
				Или ЗначениеЗаполнено(СтрокаДействия.Действие.Номенклатура)
					И СтрокаДействия.Действие.Номенклатура.Анализ
			Тогда
				СписокДействий.Добавить(СтрокаДействия.Действие);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПриемСоответствие Из МодульМедосмотрыСервер.ПриемыПоДействиямМедосмотров(ПМО, СписокДействий) Цикл
		СтрокаИсследования = ТаблицаЛабораторныхИсследований.Добавить();
		СтрокаИсследования.ДействиеМедосмотра = ПриемСоответствие.Ключ;
		СтрокаИсследования.ПриемСсылка = ПриемСоответствие.Значение;
		СтрокаИсследования.ДатаВыполненияДействияМедосмотра = ПриемСоответствие.Значение.Дата;
	КонецЦикла;
	
	// Затем добавляем отметки введенные вручную
	ДополнитьСведениямиИзОтметокДляВыписки(ПМО, ТаблицаЛабораторныхИсследований, Перечисления.ВидыДействийМедицинскогоОсмотра.Исследование, Перечисления.ВидыИсследованийДействийМедосмотра.ЛабораторноеИсследование);
	
	// Приёмы любые где типзнч Основание - заказ во внешнюю лабу, а первичный приём ПМО
	ДополнитьПриемамиСОснованиемЗаказВоВнешнююЛабораторию(ПМО, ТаблицаЛабораторныхИсследований);
	// Приёмы содержащие шаблон с видом документа - лабораторное исследование
	ДополнитьПриемамиСШаблономПоУИДЕГИСЗ(ПМО, ТаблицаЛабораторныхИсследований, 7);
	
	// Убираем дубли. Формируем массив структур. Если таблица пустая, добавляем значение по ПМО
	ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(7, ,"Справочник.ВидыМедицинскихДокументов");
	
	Возврат СформироватьМассивСтруктурРезультатов(ТаблицаЛабораторныхИсследований, ПМО, ВидДокумента);
	
КонецФункции

Функция ПолучитьПриемыСВидомИнструментальноеИсследование(ПМО) Экспорт
	
	ТаблицаИнструментальныхИсследований = Новый ТаблицаЗначений;
	ТаблицаИнструментальныхИсследований.Колонки.Добавить("ДействиеМедосмотра");
	ТаблицаИнструментальныхИсследований.Колонки.Добавить("ПриемСсылка");
	ТаблицаИнструментальныхИсследований.Колонки.Добавить("ДатаВыполненияДействияМедосмотра");
	ТаблицаИнструментальныхИсследований.Колонки.Добавить("Заключение");
	
	// Из отметок для выписки
	
	// Сначала получаем для тех, которые были сопоставлены с приемами
	СписокДействий = Новый Массив;
	Для Каждого СтрокаДействия Из ПМО.ДействияМедосмотра Цикл
		Если СтрокаДействия.Действие.Вид = Перечисления.ВидыДействийМедицинскогоОсмотра.Исследование Тогда  
			// Либо проверяем по виду исследования, либо по галочке "Анализ" в номенклатуре
			Если ЗначениеЗаполнено(СтрокаДействия.Действие.ВидИсследования) 
					И СтрокаДействия.Действие.ВидИсследования = Перечисления.ВидыИсследованийДействийМедосмотра.ИнструментальноеИсследование
				Или ЗначениеЗаполнено(СтрокаДействия.Действие.Номенклатура)
					И Не СтрокаДействия.Действие.Номенклатура.Анализ
			Тогда
				СписокДействий.Добавить(СтрокаДействия.Действие);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПриемСоответствие Из МедосмотрыСервер.ПриемыПоДействиямМедосмотров(ПМО, СписокДействий) Цикл
		СтрокаИсследования = ТаблицаИнструментальныхИсследований.Добавить();
		СтрокаИсследования.ДействиеМедосмотра = ПриемСоответствие.Ключ;
		СтрокаИсследования.ПриемСсылка = ПриемСоответствие.Значение;
		СтрокаИсследования.ДатаВыполненияДействияМедосмотра = ПриемСоответствие.Значение.Дата;
	КонецЦикла;
	
	// Затем добавляем отметки введенные вручную
	ДополнитьСведениямиИзОтметокДляВыписки(ПМО, ТаблицаИнструментальныхИсследований, Перечисления.ВидыДействийМедицинскогоОсмотра.Исследование, Перечисления.ВидыИсследованийДействийМедосмотра.ИнструментальноеИсследование);
	
	// Приёмы содержащие шаблон с видом документа - лабораторное исследование
	ДополнитьПриемамиСШаблономПоУИДЕГИСЗ(ПМО, ТаблицаИнструментальныхИсследований, 6);
	
	// Убираем дубли. Формируем массив структур. Если таблица пустая, оставляем пустой
	ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(6, ,"Справочник.ВидыМедицинскихДокументов");
	
	Возврат СформироватьМассивСтруктурРезультатов(ТаблицаИнструментальныхИсследований, ПМО, ВидДокумента, Ложь);
	
КонецФункции

Процедура ДополнитьПриемамиСОснованиемЗаказВоВнешнююЛабораторию(ПМО, ТаблицаЛабораторныхИсследований)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Прием.Ссылка КАК Ссылка,
		|	Прием.Основание КАК Основание,
		|	Прием.Дата КАК Дата
		|ИЗ
		|	Документ.Прием КАК Прием
		|ГДЕ
		|	Прием.ПервичныйПрием = &ПервичныйПрием";
	
	Запрос.УстановитьПараметр("ПервичныйПрием", ПМО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТипОснования = ДопСерверныеФункции.ИмяСсылочногоТипа(Выборка.Основание);
		Если ТипОснования = "Документ.ЗаказНаИсследованиеВнутренний"
			Или ТипОснования = "Документ.ЗаказВоВнешнююЛабораторию"
			Или ТипОснования = "Документ.invЗаявкаНаИсследование"
		Тогда
			СтрокаИсследования = ТаблицаЛабораторныхИсследований.Добавить();
			СтрокаИсследования.ПриемСсылка = Выборка.Ссылка;
			СтрокаИсследования.ДатаВыполненияДействияМедосмотра = Выборка.Дата;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПриемыСВидомКонсультация(ПМО) Экспорт
	
	МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
	
	ТаблицаКонсультаций = Новый ТаблицаЗначений;
	ТаблицаКонсультаций.Колонки.Добавить("ДействиеМедосмотра");
	ТаблицаКонсультаций.Колонки.Добавить("ПриемСсылка");
	ТаблицаКонсультаций.Колонки.Добавить("ДатаВыполненияДействияМедосмотра");
	ТаблицаКонсультаций.Колонки.Добавить("Заключение");
	
	// Приёмы с отметкой действия Врача
	СписокДействий = Новый Массив;
	Для Каждого СтрокаДействия Из ПМО.ДействияМедосмотра Цикл
		Если СтрокаДействия.Действие.Вид = Перечисления.ВидыДействийМедицинскогоОсмотра.Врач Тогда
			СписокДействий.Добавить(СтрокаДействия.Действие);
		КонецЕсли;
	КонецЦикла;
	
	ПриемыПоДействиямМедосмотров = МодульМедосмотрыСервер.ПриемыПоДействиямМедосмотров(ПМО, СписокДействий);
	Для Каждого ПриемСоответствие Из ПриемыПоДействиямМедосмотров Цикл
		СтрокаКонсультации = ТаблицаКонсультаций.Добавить();
		СтрокаКонсультации.ДействиеМедосмотра = ПриемСоответствие.Ключ;
		СтрокаКонсультации.ПриемСсылка = ПриемСоответствие.Значение;
		СтрокаКонсультации.ДатаВыполненияДействияМедосмотра = ПриемСоответствие.Значение.Дата;
	КонецЦикла;
	
	// Из отметок для выписки
	ДополнитьСведениямиИзОтметокДляВыписки(ПМО, ТаблицаКонсультаций, Перечисления.ВидыДействийМедицинскогоОсмотра.Врач);
	
	// Приёмы с Видом документа - Консультация
	ДополнитьПриемамиСШаблономПоУИДЕГИСЗ(ПМО, ТаблицаКонсультаций, 5);
	
	ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(5, ,"Справочник.ВидыМедицинскихДокументов");
	
	Возврат СформироватьМассивСтруктурРезультатов(ТаблицаКонсультаций, ПМО, ВидДокумента);
	
КонецФункции

Процедура ДополнитьПриемамиСШаблономПоУИДЕГИСЗ(ПМО, ТаблицаПоВидуДействийМедосмотров, УИДЕГИСЗ)
	
	// Для приемов по прохождению медосмотра в первичном приеме стоит прохождение медосмотра
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Прием.Ссылка КАК Ссылка,
		|	Прием.Дата КАК Дата
		|ИЗ
		|	Документ.Прием КАК Прием
		|ГДЕ
		|	Прием.ПервичныйПрием = &ПервичныйПрием";
	
	Запрос.УстановитьПараметр("ПервичныйПрием", ПМО);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для Каждого ШаблонПриема Из Выборка.Ссылка.ШаблоныПриема Цикл
			Если ЗначениеЗаполнено(ШаблонПриема.ШаблонПриема.ВидДокумента)
				И ЗначениеЗаполнено(ШаблонПриема.ШаблонПриема.ВидДокумента.ВидДокумента)
				И ШаблонПриема.ШаблонПриема.ВидДокумента.ВидДокумента.УИДЕГИСЗ = УИДЕГИСЗ
			Тогда
				СтрокаТаблицы = ТаблицаПоВидуДействийМедосмотров.Добавить();
				СтрокаТаблицы.ПриемСсылка = Выборка.Ссылка;
				СтрокаТаблицы.ДатаВыполненияДействияМедосмотра = Выборка.Дата;
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШаблонПриема.ШаблонПриема.ВидМедицинскойДокументации)
				И ШаблонПриема.ШаблонПриема.ВидМедицинскойДокументации.УИДЕГИСЗ = УИДЕГИСЗ
			Тогда
				СтрокаТаблицы = ТаблицаПоВидуДействийМедосмотров.Добавить();
				СтрокаТаблицы.ПриемСсылка = Выборка.Ссылка;
				СтрокаТаблицы.ДатаВыполненияДействияМедосмотра = Выборка.Дата;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСведениямиИзОтметокДляВыписки(ПМО, ТаблицаПоВидуДействийМедосмотров, ВидДействияМедосмотра, ВидИсследования = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаключенияПоДействиямМедосмотра.Действие КАК Действие,
		|	ЗаключенияПоДействиямМедосмотра.ДатаВыполнения КАК ДатаВыполнения,
		|	ЗаключенияПоДействиямМедосмотра.Заключение КАК Заключение
		|ИЗ
		|	РегистрСведений.ЗаключенияПоДействиямМедосмотра КАК ЗаключенияПоДействиямМедосмотра
		|ГДЕ
		|	ЗаключенияПоДействиямМедосмотра.ПрохождениеМедОсмотра = &ПрохождениеМедОсмотра
		|	И ЗаключенияПоДействиямМедосмотра.Действие.Вид = &ВидДействияМедосмотра
		|	И &УсловиеВидаИсследования
		|	И ЗаключенияПоДействиямМедосмотра.ДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", ПМО);
	Запрос.УстановитьПараметр("ВидДействияМедосмотра", ВидДействияМедосмотра);
	
	Если ЗначениеЗаполнено(ВидИсследования) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидаИсследования", "ЗаключенияПоДействиямМедосмотра.Действие.ВидИсследования = &ВидИсследования");
		Запрос.УстановитьПараметр("ВидИсследования", ВидИсследования);
	Иначе
		Запрос.УстановитьПараметр("УсловиеВидаИсследования", Истина);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаПоВидуДействийМедосмотров.Добавить();
		СтрокаТаблицы.ДействиеМедосмотра = Выборка.Действие;
		СтрокаТаблицы.ДатаВыполненияДействияМедосмотра = Выборка.ДатаВыполнения;
		СтрокаТаблицы.Заключение = Выборка.Заключение;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьМассивСтруктурРезультатов(ТаблицаПоВидуДействийМедосмотров, ПМО, ВидДокумента, ДополнитьПМО = Истина)
	
	ОписаниеСвязанногоДокументаПоУмолчанию = ОписаниеСвязанногоДокументаПоУмолчанию_194(ВидДокумента);
	ТекстЗаключенияПоУмолчанию = МедосмотрыКлиентСервер.ТекстЗаключенияПоУмолчанию();
	МассивСтруктурПоВидуДействийМедосмотра = Новый Массив;
	
	Если ТаблицаПоВидуДействийМедосмотров.Количество() = 0
		И ДополнитьПМО 
	Тогда
		СтруктураПоВидуДействийМедосмотра = Новый Структура;
		СтруктураПоВидуДействийМедосмотра.Вставить("Дата",				ПМО.Дата);
		СтруктураПоВидуДействийМедосмотра.Вставить("Документ",			ПМО);
		СтруктураПоВидуДействийМедосмотра.Вставить("Описание",			ОписаниеСвязанногоДокументаПоУмолчанию);
		СтруктураПоВидуДействийМедосмотра.Вставить("ВидДокумента",		ВидДокумента);
		СтруктураПоВидуДействийМедосмотра.Вставить("ИдентификаторМИС",	Строка(ПМО.УникальныйИдентификатор()));
		СтруктураПоВидуДействийМедосмотра.Вставить("ИдентификаторРЭМД",	Неопределено);
		МассивСтруктурПоВидуДействийМедосмотра.Добавить(СтруктураПоВидуДействийМедосмотра);
		Возврат МассивСтруктурПоВидуДействийМедосмотра;
	КонецЕсли;
	
	ТаблицаУникальныеДействия = ТаблицаПоВидуДействийМедосмотров.Скопировать(, "ДействиеМедосмотра");
	ТаблицаУникальныеДействия.Свернуть("ДействиеМедосмотра");
	МассивДействий = ТаблицаУникальныеДействия.ВыгрузитьКолонку("ДействиеМедосмотра");
	
	ЗаключенияДействий = ПолучитьЗаключенияПриемов(МассивДействий, ПМО);
	
	// Объединяем строки оставляя максимальное количество данных
	ТаблицаПоВидуДействийМедосмотровОбъединенная = ТаблицаПоВидуДействийМедосмотров.СкопироватьКолонки();
	Для Каждого ДействиеПМО Из МассивДействий Цикл
		ДействиеМедосмотра = ДействиеПМО;
		ПриемСсылка = Неопределено;
		ДатаВыполненияДействияМедосмотра = Неопределено;
		Заключение = Неопределено;
		
		СтрокиДляОбъединения = ТаблицаПоВидуДействийМедосмотров.НайтиСтроки(Новый Структура("ДействиеМедосмотра", ДействиеПМО));
		
		Для Каждого СтрокаДляОбъединения Из СтрокиДляОбъединения Цикл
			Если Не ЗначениеЗаполнено(ПриемСсылка) Тогда
				ПриемСсылка = СтрокаДляОбъединения.ПриемСсылка;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаВыполненияДействияМедосмотра) Тогда
				ДатаВыполненияДействияМедосмотра = СтрокаДляОбъединения.ДатаВыполненияДействияМедосмотра;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Заключение) Тогда
				Если ЗначениеЗаполнено(СтрокаДляОбъединения.Заключение) Тогда
					Заключение = СтрокаДляОбъединения.Заключение;
				Иначе
					Заключения = ЗаключенияДействий.НайтиСтроки(Новый Структура("Действие", ДействиеПМО));
					Если Заключения.Количество() <> 0 Тогда
						Заключение = Заключения[0].Заключение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаОбъединеннойТаблицы = ТаблицаПоВидуДействийМедосмотровОбъединенная.Добавить();
		
		СтрокаОбъединеннойТаблицы.ДействиеМедосмотра				 = ДействиеМедосмотра;
		СтрокаОбъединеннойТаблицы.ПриемСсылка						 = ПриемСсылка;
		СтрокаОбъединеннойТаблицы.ДатаВыполненияДействияМедосмотра	 = ДатаВыполненияДействияМедосмотра;
		СтрокаОбъединеннойТаблицы.Заключение						 = Заключение;
	КонецЦикла;
	
	ТаблицаУникальныеПриемы = ТаблицаПоВидуДействийМедосмотров.Скопировать(, "ПриемСсылка");
	ТаблицаУникальныеПриемы.Свернуть("ПриемСсылка");
	МассивПриемов = ТаблицаУникальныеПриемы.ВыгрузитьКолонку("ПриемСсылка");
	
	Для Каждого Прием Из МассивПриемов Цикл
		
		Если Не ЗначениеЗаполнено(Прием) Тогда
			Продолжить;
		КонецЕсли;
		
		мЧастиОписания = Новый Массив;
		СтрокиПоПриему = ТаблицаПоВидуДействийМедосмотровОбъединенная.НайтиСтроки(Новый Структура("ПриемСсылка", Прием));
		Для Каждого СтрокаПоПриему Из СтрокиПоПриему Цикл
			мЧастиОписания.Добавить(ФормированиеОписанияДокумента(СтрокаПоПриему, ТекстЗаключенияПоУмолчанию, ОписаниеСвязанногоДокументаПоУмолчанию));
		КонецЦикла;
		
		Если мЧастиОписания.Количество() > 0 Тогда
			Описание = СтрСоединить(мЧастиОписания, "; ");
		Иначе
			Описание = ОписаниеСвязанногоДокументаПоУмолчанию;
		КонецЕсли;
		
		СтруктураПоВидуДействийМедосмотра = Новый Структура;
		СтруктураПоВидуДействийМедосмотра.Вставить("Дата",				Прием.Дата);
		СтруктураПоВидуДействийМедосмотра.Вставить("Документ",			Прием);
		СтруктураПоВидуДействийМедосмотра.Вставить("Описание",			Описание);
		СтруктураПоВидуДействийМедосмотра.Вставить("ВидДокумента",		ВидДокумента);
		СтруктураПоВидуДействийМедосмотра.Вставить("ИдентификаторМИС",	Строка(Прием.УникальныйИдентификатор()));
		СтруктураПоВидуДействийМедосмотра.Вставить("ИдентификаторРЭМД",	Неопределено);
		МассивСтруктурПоВидуДействийМедосмотра.Добавить(СтруктураПоВидуДействийМедосмотра);
	КонецЦикла;
	
	СтрокиБезПриема = ТаблицаПоВидуДействийМедосмотровОбъединенная.НайтиСтроки(Новый Структура("ПриемСсылка", Неопределено));
	
	Для Каждого СтрокаБезПриема Из СтрокиБезПриема Цикл
		
		Описание = ФормированиеОписанияДокумента(СтрокаБезПриема, ТекстЗаключенияПоУмолчанию, ОписаниеСвязанногоДокументаПоУмолчанию);
		
		СтруктураПоВидуДействийМедосмотра = Новый Структура;
		СтруктураПоВидуДействийМедосмотра.Вставить("Дата",				СтрокаБезПриема.ДатаВыполненияДействияМедосмотра);
		СтруктураПоВидуДействийМедосмотра.Вставить("Документ",			Неопределено);
		СтруктураПоВидуДействийМедосмотра.Вставить("Описание",			Описание);
		СтруктураПоВидуДействийМедосмотра.Вставить("ВидДокумента",		ВидДокумента);
		СтруктураПоВидуДействийМедосмотра.Вставить("ИдентификаторМИС",	Неопределено);
		СтруктураПоВидуДействийМедосмотра.Вставить("ИдентификаторРЭМД",	Неопределено);
		МассивСтруктурПоВидуДействийМедосмотра.Добавить(Новый Структура("Описание, ВидДокумента, Дата, ИдентификаторМИС, ИдентификаторРЭМД, Документ", Описание, ВидДокумента, СтрокаБезПриема.ДатаВыполненияДействияМедосмотра));
	КонецЦикла;
	
	Возврат МассивСтруктурПоВидуДействийМедосмотра;
	
КонецФункции

Функция ФормированиеОписанияДокумента(СтрокаТаблицыПоВиду, ТекстЗаключенияПоУмолчанию, ОписаниеСвязанногоДокументаПоУмолчанию)
	
	Описание = "";
	Если ЗначениеЗаполнено(СтрокаТаблицыПоВиду.ДействиеМедосмотра) Тогда
		НаименованиеВидаДокумента = "Протокол осмотра";
		Если ЗначениеЗаполнено(СтрокаТаблицыПоВиду.ДействиеМедосмотра.ВидИсследования) 
			И СтрокаТаблицыПоВиду.ДействиеМедосмотра.ВидИсследования = Перечисления.ВидыИсследованийДействийМедосмотра.ЛабораторноеИсследование 
		Тогда
			НаименованиеВидаДокумента = "Протокол лабораторного исследования";
		КонецЕсли;
		
		ДатаДействия = "";
		Если ЗначениеЗаполнено(СтрокаТаблицыПоВиду.ДатаВыполненияДействияМедосмотра) Тогда
			ДатаДействия = "от " + Формат(СтрокаТаблицыПоВиду.ДатаВыполненияДействияМедосмотра, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		ТекстЗаключенияПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыПоВиду.ДействиеМедосмотра.ТекстЗаключенияПоУмолчанию),СтрокаТаблицыПоВиду.ДействиеМедосмотра.ТекстЗаключенияПоУмолчанию,ТекстЗаключенияПоУмолчанию);
		Если ЗначениеЗаполнено(СтрокаТаблицыПоВиду.Заключение) Тогда 
			Заключение = СтрокаТаблицыПоВиду.Заключение;
		Иначе
			Заключение = ТекстЗаключенияПоУмолчанию;
		КонецЕсли;
		Описание = СтрШаблон("%1 %2 %3: %4", НаименованиеВидаДокумента, ДатаДействия, СтрокаТаблицыПоВиду.ДействиеМедосмотра.Наименование, Заключение);
	Иначе
		Описание = ОписаниеСвязанногоДокументаПоУмолчанию;
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьЗаключенияПриемов(МассивДействий, ПМО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаключенияПоДействиямМедосмотра.Заключение КАК Заключение,
	               |	ЗаключенияПоДействиямМедосмотра.Действие КАК Действие
	               |ИЗ
	               |	РегистрСведений.ЗаключенияПоДействиямМедосмотра КАК ЗаключенияПоДействиямМедосмотра
	               |ГДЕ
	               |	ЗаключенияПоДействиямМедосмотра.ПрохождениеМедОсмотра = &ПрохождениеМедОсмотра
	               |	И ЗаключенияПоДействиямМедосмотра.Действие В(&Действия)";
	
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", ПМО);
	Запрос.УстановитьПараметр("Действия", МассивДействий);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеСвязанногоДокументаПоУмолчанию_194(ВидДокумента)
	
	Если ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(5, ,"Справочник.ВидыМедицинскихДокументов") Тогда
		Возврат "Консультация";
	ИначеЕсли ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(7, ,"Справочник.ВидыМедицинскихДокументов") Тогда
		Возврат "Лабораторное исследование";
	КонецЕсли;
	
	Возврат "—";
	
КонецФункции

Процедура ЗаполнитьТаблицуПараметровПоВК(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам)
	
	ВрачебнаяКомиссияЛН = ЗначениеЗаполнено(Ссылка.Основание) И ДопСерверныеФункции.ИмяСсылочногоТипа(Ссылка.Основание) = "Документ.ЛистокНетрудоспособности";
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Заключение,		"РешениеВрачебнойКомиссии");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номер,				"НомерВрачебнойКомиссии");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ВрачебнаяКомиссияЛН,		"ВрачебнаяКомиссияЛН");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Не ВрачебнаяКомиссияЛН,	"ВрачебнаяКомиссияСМП");
	
	ВидыНозологическихЕдиниц = ВидыНозологическихЕдиницПоКлассификатору();
	
	Для Каждого Диагноз Из Ссылка.Диагнозы Цикл
		ВидНозологическойЕдиницы = ВидыНозологическихЕдиниц.Получить(Ссылка.Диагнозы[0].ВидНозологическойЕдиницы);
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Диагнозы[0].Диагноз, "Диагноз");
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ВидНозологическойЕдиницы, "ВидНозологическойЕдиницы", Новый Структура("ГруппирующееПоле", ТаблицаПараметров.Количество() - 1));
	КонецЦикла;
	
	ДополнитьТаблицуДаннымиДоговора(Ссылка.ДоговорСКлиентом, ТаблицаПараметров);
	
	Если ВрачебнаяКомиссияЛН Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, ВрачебнаяКомиссияВыявленоПриЭкспертизе(Ссылка), "РешениеВрачебнойКомиссии");
	Иначе
		
		НомераЭтаповТалона = НомераЭтаповТалонаСМППоКлассификатору();
		
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.КодСМП,							"КодСМП");
		ДополнитьТаблицуПараметров(ТаблицаПараметров, НомераЭтаповТалона.Получить(Ссылка.Этап),	"НомерЭтапаТалона");
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.РешениеОГоспитализации,			"РешениеОГоспитализации");
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПричинаОтказаОтГоспитализации,		"ПричинаОтказаОтГоспитализации");
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ДатаУведомления,					"ДатаУведомления");
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.СпособУведомления,					"СпособУведомления");
	КонецЕсли;
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПредседательКомиссии, "Сотрудник");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПараметровПоРецепту(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам)
	
	Если Ссылка.ФормаРецепта = Перечисления.ФормыРецептов.Форма107_1_у Тогда
		ЗаполнитьТаблицуПараметровПоРецепту107_1_у(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПараметровПоРецепту107_1_у(ТаблицаПараметров, Ссылка, КонстантыCDAДокумента, СоответствияПараметрам)
	
	ЕдиницаИзмеренияСуткиПоКлассификатору = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(24, Перечисления.ВидыКлассификаторовМинЗдрава.ЕдиницыИзмерения);
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ЕдиницаИзмеренияСуткиПоКлассификатору, "ЕдиницаИзмеренияСуткиПоКлассификатору");
	
	Срочность = Неопределено;
	Если Ссылка.Срочность = "cito" Тогда
		Срочность = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(1, Перечисления.ВидыКлассификаторовМинЗдрава.ПриоритетИсполненияРецепта);
	ИначеЕсли Ссылка.Срочность = "statim" Тогда
		Срочность = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(2, Перечисления.ВидыКлассификаторовМинЗдрава.ПриоритетИсполненияРецепта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Срочность) Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Срочность, "ПриоритетИсполненияРецепта");
	КонецЕсли;
	
	Если Ссылка.ПоСпециальномуНазначению Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Истина, "СпециальноеНазначение");
	Иначе
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ложь, "СпециальноеНазначение");
	КонецЕсли;
	
	// Вычислим срок действия рецепта в днях по кодам
	СрокДействияРецептаВДнях = 0;
	СрокДействияРецепта = Неопределено;
	СрокДействияРецептаВДнях = Ссылка.Срок * 30;
	Если СрокДействияРецептаВДнях = 60 Тогда
		СрокДействияРецепта = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(3, Перечисления.ВидыКлассификаторовМинЗдрава.СрокДействияРецепта);
	ИначеЕсли СрокДействияРецептаВДнях = 90 Тогда
		СрокДействияРецепта = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(4, Перечисления.ВидыКлассификаторовМинЗдрава.СрокДействияРецепта);
	Иначе
		// До 1 года
		СрокДействияРецепта = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(5, Перечисления.ВидыКлассификаторовМинЗдрава.СрокДействияРецепта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокДействияРецептаВДнях) Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Дата + СрокДействияРецептаВДнях * 86400, "ДатаОкончанияДействияРецепта");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокДействияРецепта) Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, СрокДействияРецепта, "СрокДействияРецепта");
	КонецЕсли;
	
	// Заполнение данных по первой номенклатуре
	Если ЗначениеЗаполнено(Ссылка.Номенклатура1) Тогда
		
		Если ТипЗнч(Ссылка.Номенклатура1) = Тип("СправочникСсылка.СправочникМеждународныхНепатентованныхНаименований") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура1, "ЛекарственныйПрепарат1");
		ИначеЕсли ТипЗнч(Ссылка.Номенклатура1) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура1.Наименование, "ЛекарственныйПрепаратСтрокой1");
		ИначеЕсли ТипЗнч(Ссылка.Номенклатура1) = Тип("Строка") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура1, "ЛекарственныйПрепаратСтрокой1");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.СколькоДней1) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.СколькоДней1, "ДлительностьПриемаПрепарата1");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.СколькоДней1) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.СколькоДней1, "ДлительностьПриемаПрепарата1");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.ПутьВведенияПрепарата1) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПутьВведенияПрепарата1, "ПутьВведенияПрепарата1");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.ПутьВведенияПрепарата1) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПутьВведенияПрепарата1, "ПутьВведенияПрепарата1");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.РазВДень1) Тогда 
			ЧастотаПриемаПрепарата1 = Окр(1 / Ссылка.РазВДень1, 4, РежимОкругления.Окр15как10);
			ДополнитьТаблицуПараметров(ТаблицаПараметров, ЧастотаПриемаПрепарата1, "ЧастотаПриемаПрепарата1");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.Количество1)
			И ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения1)
		Тогда
			ЕдиницаИзмеренияКоличества1 = Неопределено;
			Если ТипЗнч(Ссылка.ЕдиницаИзмерения1) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				ЕдиницаИзмеренияКоличества1 = Ссылка.ЕдиницаИзмерения1;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.ЕдиницаИзмерения1, "ЕдиницаПоКлассификатору")
				И ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения1.ЕдиницаПоКлассификатору)
			Тогда
				ЕдиницаИзмеренияКоличества1 = Ссылка.ЕдиницаИзмерения1.ЕдиницаПоКлассификатору;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияКоличества1) Тогда
				ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ1 = ЕдиницаИзмененияНСИПоОКЕИ(ЕдиницаИзмеренияКоличества1);
				Если ЗначениеЗаполнено(ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ1) Тогда
					ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Количество1, "РазоваяДозаПрепарата1");
					ДополнитьТаблицуПараметров(ТаблицаПараметров, ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ1, "ЕдиницаИзмеренияДозыПрепарата1");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.РазВДень1)
			И ЗначениеЗаполнено(Ссылка.СколькоДней1)
		Тогда
			КоличествоНазначенныхДоз1 = Ссылка.РазВДень1 * Ссылка.СколькоДней1;
			ДополнитьТаблицуПараметров(ТаблицаПараметров, КоличествоНазначенныхДоз1, "КоличествоНазначенныхДоз1");
		КонецЕсли;
		
		ОсобыеУказания1 = "";
		
		Если ЗначениеЗаполнено(Ссылка.СпособПрименения1) Тогда
			ОсобыеУказания1 = ОсобыеУказания1 + "Способ применения:" + Символы.ПС + Ссылка.СпособПрименения1 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.Дозировка1) Тогда
			ОсобыеУказания1 = ОсобыеУказания1 + "Дозировка:" + Символы.ПС + Ссылка.Дозировка1 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.ВремяПриемаОтносительноЕды1) Тогда
			ОсобыеУказания1 = ОсобыеУказания1 + "Время приема относительно еды:" + Символы.ПС + Ссылка.ВремяПриемаОтносительноЕды1 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.ВремяПриемаОтносительноСна1) Тогда
			ОсобыеУказания1 = ОсобыеУказания1 + "Время приема относительно сна:" + Символы.ПС + Ссылка.ВремяПриемаОтносительноСна1 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.Дополнение1) Тогда
			ОсобыеУказания1 = ОсобыеУказания1 + "Дополнительно:" + Символы.ПС + Ссылка.Дополнение1 + Символы.ПС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОсобыеУказания1) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, ОсобыеУказания1, "ОсобыеУказания1");
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение данных по второй номенклатуре
	Если ЗначениеЗаполнено(Ссылка.Номенклатура2) Тогда
		
		Если ТипЗнч(Ссылка.Номенклатура2) = Тип("СправочникСсылка.СправочникМеждународныхНепатентованныхНаименований") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура2, "ЛекарственныйПрепарат2");
		ИначеЕсли ТипЗнч(Ссылка.Номенклатура2) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура2.Наименование, "ЛекарственныйПрепаратСтрокой2");
		ИначеЕсли ТипЗнч(Ссылка.Номенклатура2) = Тип("Строка") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура2, "ЛекарственныйПрепаратСтрокой2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.СколькоДней2) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.СколькоДней2, "ДлительностьПриемаПрепарата2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.СколькоДней2) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.СколькоДней2, "ДлительностьПриемаПрепарата2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.ПутьВведенияПрепарата2) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПутьВведенияПрепарата2, "ПутьВведенияПрепарата2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.ПутьВведенияПрепарата2) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПутьВведенияПрепарата2, "ПутьВведенияПрепарата2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.РазВДень2) Тогда
			ЧастотаПриемаПрепарата2 = Окр(1 / Ссылка.РазВДень2, 4, РежимОкругления.Окр15как10);
			ДополнитьТаблицуПараметров(ТаблицаПараметров, ЧастотаПриемаПрепарата2, "ЧастотаПриемаПрепарата2");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.Количество2)
			И ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения2)
		Тогда
			ЕдиницаИзмеренияКоличества2 = Неопределено;
			Если ТипЗнч(Ссылка.ЕдиницаИзмерения2) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				ЕдиницаИзмеренияКоличества2 = Ссылка.ЕдиницаИзмерения2;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.ЕдиницаИзмерения2, "ЕдиницаПоКлассификатору")
				И ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения2.ЕдиницаПоКлассификатору)
			Тогда
				ЕдиницаИзмеренияКоличества2 = Ссылка.ЕдиницаИзмерения2.ЕдиницаПоКлассификатору;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияКоличества2) Тогда
				ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ2 = ЕдиницаИзмененияНСИПоОКЕИ(ЕдиницаИзмеренияКоличества2);
				Если ЗначениеЗаполнено(ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ2) Тогда
					ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Количество2, "РазоваяДозаПрепарата2");
					ДополнитьТаблицуПараметров(ТаблицаПараметров, ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ2, "ЕдиницаИзмеренияДозыПрепарата2");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.РазВДень2)
			И ЗначениеЗаполнено(Ссылка.СколькоДней2)
		Тогда
			КоличествоНазначенныхДоз2 = Ссылка.РазВДень2 * Ссылка.СколькоДней2;
			ДополнитьТаблицуПараметров(ТаблицаПараметров, КоличествоНазначенныхДоз2, "КоличествоНазначенныхДоз2");
		КонецЕсли;
		
		ОсобыеУказания2 = "";
		
		Если ЗначениеЗаполнено(Ссылка.СпособПрименения2) Тогда
			ОсобыеУказания2 = ОсобыеУказания2 + "Способ применения:" + Символы.ПС + Ссылка.СпособПрименения2 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.Дозировка2) Тогда
			ОсобыеУказания2 = ОсобыеУказания2 + "Дозировка:" + Символы.ПС + Ссылка.Дозировка2 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.ВремяПриемаОтносительноЕды2) Тогда
			ОсобыеУказания2 = ОсобыеУказания2 + "Время приема относительно еды:" + Символы.ПС + Ссылка.ВремяПриемаОтносительноЕды2 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.ВремяПриемаОтносительноСна2) Тогда
			ОсобыеУказания2 = ОсобыеУказания2 + "Время приема относительно сна:" + Символы.ПС + Ссылка.ВремяПриемаОтносительноСна2 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.Дополнение2) Тогда
			ОсобыеУказания2 = ОсобыеУказания2 + "Дополнительно:" + Символы.ПС + Ссылка.Дополнение2 + Символы.ПС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОсобыеУказания2) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, ОсобыеУказания2, "ОсобыеУказания2");
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение данных по третьей номенклатуре
	Если ЗначениеЗаполнено(Ссылка.Номенклатура3) Тогда
		
		Если ТипЗнч(Ссылка.Номенклатура3) = Тип("СправочникСсылка.СправочникМеждународныхНепатентованныхНаименований") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура3, "ЛекарственныйПрепарат3");
		ИначеЕсли ТипЗнч(Ссылка.Номенклатура3) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура3.Наименование, "ЛекарственныйПрепаратСтрокой3");
		ИначеЕсли ТипЗнч(Ссылка.Номенклатура3) = Тип("Строка") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Номенклатура3, "ЛекарственныйПрепаратСтрокой3");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.СколькоДней3) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.СколькоДней3, "ДлительностьПриемаПрепарата3");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.СколькоДней3) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.СколькоДней3, "ДлительностьПриемаПрепарата3");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.ПутьВведенияПрепарата3) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПутьВведенияПрепарата3, "ПутьВведенияПрепарата3");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.ПутьВведенияПрепарата3) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.ПутьВведенияПрепарата3, "ПутьВведенияПрепарата3");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.РазВДень3) Тогда
			ЧастотаПриемаПрепарата3 = Окр(1 / Ссылка.РазВДень3, 4, РежимОкругления.Окр15как10);
			ДополнитьТаблицуПараметров(ТаблицаПараметров, ЧастотаПриемаПрепарата3, "ЧастотаПриемаПрепарата3");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.Количество3)
			И ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения3)
		Тогда
			ЕдиницаИзмеренияКоличества3 = Неопределено;
			Если ТипЗнч(Ссылка.ЕдиницаИзмерения3) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				ЕдиницаИзмеренияКоличества3 = Ссылка.ЕдиницаИзмерения3;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка.ЕдиницаИзмерения3, "ЕдиницаПоКлассификатору")
				И ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения3.ЕдиницаПоКлассификатору)
			Тогда 
				ЕдиницаИзмеренияКоличества3 = Ссылка.ЕдиницаИзмерения3.ЕдиницаПоКлассификатору;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияКоличества3) Тогда
				ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ3 = ЕдиницаИзмененияНСИПоОКЕИ(ЕдиницаИзмеренияКоличества3);
				Если ЗначениеЗаполнено(ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ3) Тогда
					ДополнитьТаблицуПараметров(ТаблицаПараметров, Ссылка.Количество3, "РазоваяДозаПрепарата3");
					ДополнитьТаблицуПараметров(ТаблицаПараметров, ЕдиницаИзмеренияКоличестваПоКлассификаторуНСИ3, "ЕдиницаИзмеренияДозыПрепарата3");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.РазВДень3)
			И ЗначениеЗаполнено(Ссылка.СколькоДней3)
		Тогда
			КоличествоНазначенныхДоз3 = Ссылка.РазВДень3 * Ссылка.СколькоДней3;
			ДополнитьТаблицуПараметров(ТаблицаПараметров, КоличествоНазначенныхДоз3, "КоличествоНазначенныхДоз3");
		КонецЕсли;
		
		ОсобыеУказания3 = "";
		
		Если ЗначениеЗаполнено(Ссылка.СпособПрименения3) Тогда
			ОсобыеУказания3 = ОсобыеУказания3 + "Способ применения:" + Символы.ПС + Ссылка.СпособПрименения3 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.Дозировка3) Тогда
			ОсобыеУказания3 = ОсобыеУказания3 + "Дозировка:" + Символы.ПС + Ссылка.Дозировка3 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.ВремяПриемаОтносительноЕды3) Тогда
			ОсобыеУказания3 = ОсобыеУказания3 + "Время приема относительно еды:" + Символы.ПС + Ссылка.ВремяПриемаОтносительноЕды3 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.ВремяПриемаОтносительноСна3) Тогда
			ОсобыеУказания3 = ОсобыеУказания3 + "Время приема относительно сна:" + Символы.ПС + Ссылка.ВремяПриемаОтносительноСна3 + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка.Дополнение3) Тогда
			ОсобыеУказания3 = ОсобыеУказания3 + "Дополнительно:" + Символы.ПС + Ссылка.Дополнение3 + Символы.ПС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОсобыеУказания3) Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, ОсобыеУказания3, "ОсобыеУказания3");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыНозологическихЕдиницПоКлассификатору() Экспорт
	
	ВидыНозологическихЕдиниц = Новый Соответствие;
	ВидыНозологическихЕдиниц.Вставить(Перечисления.КлассификацииДиагнозов.ОсновноеЗаболевание,					НозологическаяЕдиницаОсновногоДиагноза());
	ВидыНозологическихЕдиниц.Вставить(Перечисления.КлассификацииДиагнозов.ОсложнениеОсновногоЗаболевания,		ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидыНозологическихЕдиниц(2));
	ВидыНозологическихЕдиниц.Вставить(Перечисления.КлассификацииДиагнозов.СопутствующееЗаболевание,				ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидыНозологическихЕдиниц(3));
	ВидыНозологическихЕдиниц.Вставить(Перечисления.КлассификацииДиагнозов.КонкурирующееЗаболевание,				ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидыНозологическихЕдиниц(4));
	ВидыНозологическихЕдиниц.Вставить(Перечисления.КлассификацииДиагнозов.ВнешняяПричина,						ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидыНозологическихЕдиниц(5));
	ВидыНозологическихЕдиниц.Вставить(Перечисления.КлассификацииДиагнозов.ФоновоеЗаболевание,					ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидыНозологическихЕдиниц(6));
	ВидыНозологическихЕдиниц.Вставить(Перечисления.КлассификацииДиагнозов.ОсложнениеСопутствующегоЗаболевания,	ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидыНозологическихЕдиниц(7));
	
	Возврат ВидыНозологическихЕдиниц;
	
КонецФункции

Функция СтепениОбоснованностиДиагнозаПоКлассификатору() Экспорт
	
	СтепениОбоснованности = Новый Соответствие;
	СтепениОбоснованности.Вставить(Перечисления.КлассификацииДиагнозов.Предварительный,	ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(1, Перечисления.ВидыКлассификаторовМинЗдрава.СтепеньОбоснованностиДиагноза));
	СтепениОбоснованности.Вставить(Перечисления.КлассификацииДиагнозов.Окончательный,	ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(3, Перечисления.ВидыКлассификаторовМинЗдрава.СтепеньОбоснованностиДиагноза));
	
	Возврат СтепениОбоснованности;
	
КонецФункции

Функция УточненияХарактераДиагнозаПоКлассификатору() Экспорт
	
	УточненияХарактера = Новый Соответствие;
	УточненияХарактера.Вставить(Перечисления.КлассификацииДиагнозов.ХроническоеВпервыеВыявленное,	ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(1, Перечисления.ВидыКлассификаторовМинЗдрава.ХарактерЗаболевания));
	УточненияХарактера.Вставить(Перечисления.КлассификацииДиагнозов.ХроническоеРанееВыявленное,		ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(2, Перечисления.ВидыКлассификаторовМинЗдрава.ХарактерЗаболевания));
	УточненияХарактера.Вставить(Перечисления.КлассификацииДиагнозов.Острое,							ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(3, Перечисления.ВидыКлассификаторовМинЗдрава.ХарактерЗаболевания));
	
	Возврат УточненияХарактера;
	
КонецФункции

Функция НомераЭтаповТалонаСМППоКлассификатору()
	
	НомераЭтаповТалона = Новый Соответствие;
	НомераЭтаповТалона.Вставить(Перечисления[ИмяПеречисленияЭтаповТалона()].ОказаниеМедицинсойПомощи,	ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭтапыТалонаНаОказаниеВысокотехнологичнойМедицинскойПомощи(5));
	НомераЭтаповТалона.Вставить(Перечисления[ИмяПеречисленияЭтаповТалона()].Заключение,					ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭтапыТалонаНаОказаниеВысокотехнологичнойМедицинскойПомощи(6));
	
	Возврат НомераЭтаповТалона;
	
КонецФункции

Функция ИмяПеречисленияЭтаповТалона()
	
	Возврат "ЭтапыТалонаСМП";
	
КонецФункции

Функция ВрачебнаяКомиссияВыявленоПриЭкспертизе(Ссылка)
	
	Возврат СтрШаблон("Жалобы и динамика состояния: %1Проведенное обследование и лечение:%3", Ссылка.Жалобы + Символы.ПС, Ссылка.Лечение);
	
КонецФункции

Функция ПолучитьДанныеКлиентаИзСписка(ПМО)
	
	ДанныеКлиента = Новый Структура("ЦехУчасток, Профессия");
	СПМО = ПМО.СписокНаПрохождениеМедосмотра;
	СтрокиКлиента = СПМО.Клиенты.НайтиСтроки(Новый Структура("Клиент", ПМО.Клиент));
	
	Для Каждого СтрокаКлиента Из СтрокиКлиента Цикл
		ЗаполнитьЗначенияСвойств(ДанныеКлиента, СтрокаКлиента);
		Прервать;
	КонецЦикла;
	
	Возврат ДанныеКлиента;
	
КонецФункции

Функция ДолжностьИзСтрокиПоКлассификатору(ДолжностьСтрокой)
	
	Должность = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.Должность(, ДолжностьСтрокой);
	
	//Если Должность = Неопределено Тогда
	//	Должность = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.Должность(7462);
	//КонецЕсли;
	
	Возврат Должность;
	
КонецФункции

Функция ЗаключениеМедосмотра(УИДЕГИСЗ)
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.Заключение(УИДЕГИСЗ);
	
КонецФункции

Функция ВредныеФакторыДокумента(ПрохождениеМедосмотра)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыКлассификаторовСНомерами.Ссылка КАК ВредныйФактор
		|ИЗ
		|	Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПереченьВредныхФакторовИРабот КАК ВредныеФакторы
		|		ПО (ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка = &ПрохождениеМедосмотра)
		|			И (ВредныеФакторы.Ссылка = ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КлассификаторыМинЗдрава.Ссылка КАК Ссылка,
		|			ВЫРАЗИТЬ(КлассификаторыМинЗдраваАтрибуты.Значение КАК СТРОКА(10)) КАК НомерПП
		|		ИЗ
		|			Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторыМинЗдрава.Атрибуты КАК КлассификаторыМинЗдраваАтрибуты
		|				ПО (КлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессиональныеВредностиПациента))
		|					И КлассификаторыМинЗдрава.Ссылка = КлассификаторыМинЗдраваАтрибуты.Ссылка
		|					И (КлассификаторыМинЗдраваАтрибуты.Ключ = ""NUMBER"")) КАК ЭлементыКлассификаторовСНомерами
		|		ПО (ЭлементыКлассификаторовСНомерами.НомерПП = ВредныеФакторы.НомерПП)";
	
	Запрос.УстановитьПараметр("ПрохождениеМедосмотра", ПрохождениеМедосмотра);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВредныйФактор");
	
КонецФункции

Функция ГруппаЗдоровьяПоДиспансернойГруппеМедосмотра(ПрохождениеМедосмотра)
	
	УИДыГруппЗдоровья = Новый Соответствие;
	УИДыГруппЗдоровья.Вставить(Перечисления.ГруппыЗдоровья.I,	 1);
	УИДыГруппЗдоровья.Вставить(Перечисления.ГруппыЗдоровья.II,	 2);
	УИДыГруппЗдоровья.Вставить(Перечисления.ГруппыЗдоровья.IIIа, 3);
	УИДыГруппЗдоровья.Вставить(Перечисления.ГруппыЗдоровья.IIIб, 4);
	УИДыГруппЗдоровья.Вставить(Перечисления.ГруппыЗдоровья.III,	 5);
	УИДыГруппЗдоровья.Вставить(Перечисления.ГруппыЗдоровья.IV,	 6);
	УИДыГруппЗдоровья.Вставить(Перечисления.ГруппыЗдоровья.V,	 7);
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ГруппаЗдоровья(УИДыГруппЗдоровья.Получить(ПрохождениеМедосмотра.ДиспансернаяГруппа));
	
КонецФункции

Функция ПолучитьСтруктуруТаблицПараметровШаблона()
	
	ЗначенияПараметровHTML = Новый ТаблицаЗначений;
	ЗначенияПараметровHTML.Колонки.Добавить("Параметр");
	ЗначенияПараметровHTML.Колонки.Добавить("Документ");
	ЗначенияПараметровHTML.Колонки.Добавить("ИдентификаторСтрокиШаблона");
	ЗначенияПараметровHTML.Колонки.Добавить("Значение");
	ЗначенияПараметровHTML.Колонки.Добавить("Представление");
	
	ДанныеТаблицШаблоновПриема = Новый ТаблицаЗначений;
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("ИдентификаторТаблицы");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("НомерСтрокиТаблицы");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("Параметр");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("Документ");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("ИдентификаторСтрокиШаблона");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("Значение");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("Представление");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("ИдентификаторСтроки");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("ИдентификаторРодительскойСтроки");
	ДанныеТаблицШаблоновПриема.Колонки.Добавить("АвтозаполнениеИзДанныхДокумента", Новый ОписаниеТипов("Булево"));
	
	Возврат Новый Структура("ЗначенияПараметровHTML, ДанныеТаблицШаблоновПриема", ЗначенияПараметровHTML, ДанныеТаблицШаблоновПриема);
	
КонецФункции

Функция ОбъединитьСекции(ОбщиеСекции, ИндивидуальныеСекции)
	
	XMLОбщиеСекции = ПолучитьXML(ОбщиеСекции);
	XMLИндивидуальныеСекции = ПолучитьXML(ИндивидуальныеСекции);
	
	component = XMLОбщиеСекции.СоздатьЭлемент("component");
	structuredBody = XMLОбщиеСекции.СоздатьЭлемент("structuredBody");
	component.ДобавитьДочерний(structuredBody);
	
	Для Каждого Узел Из XMLИндивидуальныеСекции.ПервыйДочерний.ДочерниеУзлы Цикл
		structuredBody.ДобавитьДочерний(Узел.КлонироватьУзел(Истина));
	КонецЦикла;
	
	Для Каждого ДочернийУзел Из XMLОбщиеСекции.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла = "ClinicalDocument" Тогда
			ДочернийУзел.ДобавитьДочерний(component);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(XMLОбщиеСекции);
	
КонецФункции

Функция СформироватьИндивидуальныеСекции(ТаблицаПараметров, МакетXML, ДокументHTML, НезагруженныеКлассификаторы, ДополнительныеДанные)
	
	Документ = ПолучитьXML(МакетXML);
	
	УзлыДляУдаления = Новый Массив;
	КлонированныеУзлы = Новый Массив;
	СписокLocalid = СписокLocalidМакета(МакетXML);
	СписокLocalid.Вставить("Сотрудник", Новый Структура("localid", "Сотрудник"));
	РекурсивныйОбходXML(Документ.ЭлементДокумента, ТаблицаПараметров, УзлыДляУдаления, Новый Соответствие, ДокументHTML, СписокLocalid, КлонированныеУзлы, НезагруженныеКлассификаторы, ДополнительныеДанные);
	
	Для Каждого УзелДляУдаления Из УзлыДляУдаления Цикл
		РодительУзла = УзелДляУдаления.РодительскийУзел;
		РодительУзла.УдалитьДочерний(УзелДляУдаления);
	КонецЦикла;
	
	Для Каждого КлонированныйУзел Из КлонированныеУзлы Цикл
		КлонированныйУзел.УдалитьАтрибут("КлонированныйУзел");
	КонецЦикла;
	
	Возврат РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(Документ);
	
КонецФункции

Функция ПолучитьXML(ТекстXML)
	
	Возврат РаботаСDOMКлиентСервер.DOMИзСтрокиXML(ТекстXML);
	
КонецФункции

Процедура ДополнитьТаблицуПараметров(ТаблицаПараметров, Значение = Неопределено, localid = Неопределено, ДругиеЗначения = Неопределено)
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Значение	= Значение;
	НоваяСтрока.localid		= localid;
	
	Если ДругиеЗначения <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДругиеЗначения Цикл
			Попытка
				НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			Исключение КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДолжностьУчаствуетВПодписании(Должность)
	
	УИДДолжности = Должность.УИДЕГИСЗ;
	ВыборкаПравил = Справочники.РЭМДПравилаПодписи.Выбрать();
	Пока ВыборкаПравил.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПравил.Роль) Тогда
			Продолжить;
		КонецЕсли;
		СписокДолжностей = СтрРазделить(ВыборкаПравил.Должности, ", ", Ложь);
		Если СписокДолжностей.Найти(Строка(УИДДолжности)) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область МакетыCDAДокументов

Функция ЭтоOIDСправочникаСекций(OID)
	
	Возврат OID = "1.2.643.5.1.13.13.99.2.197"
		Или OID = "1.2.643.5.1.13.13.11.1379"
		Или OID = "1.2.643.5.1.13.2.1.1.1504.23";
	
КонецФункции

Процедура ДобавитьИндексВСтруктуруLocalid(СтруктураLocalid, Индекс)
	
	Если Не СтруктураLocalid.Свойство("Индекс")
		И СтруктураLocalid.Свойство("localid")
	Тогда
		СтруктураLocalid.Вставить("Индекс", Индекс);
		Индекс = Индекс + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМассивВСтруктуруLocalid(СтруктураLocalid, ИмяСвойства, Значение)
	
	Если СтруктураLocalid.Свойство(ИмяСвойства) Тогда
		Если СтруктураLocalid[ИмяСвойства].Найти(Значение) = Неопределено Тогда
			СтруктураLocalid[ИмяСвойства].Добавить(Значение);
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Значение);
		СтруктураLocalid.Вставить(ИмяСвойства, МассивТипов);
	КонецЕсли;
	
КонецПроцедуры

Функция ТипДанныхИзXML(ТекстовоеПредставлениеТипа) Экспорт
	
	Если ТекстовоеПредставлениеТипа = "PQ"
		Или ТекстовоеПредставлениеТипа = "INT"
		Или ТекстовоеПредставлениеТипа = "REAL"
	Тогда
		Возврат Тип("Число");
	ИначеЕсли ТекстовоеПредставлениеТипа = "ST" Тогда
		Возврат Тип("Строка");
	ИначеЕсли ТекстовоеПредставлениеТипа = "BL" Тогда
		Возврат Тип("Булево");
	ИначеЕсли ТекстовоеПредставлениеТипа = "CD" Тогда
		Возврат Тип("СправочникСсылка.КлассификаторыМинЗдрава");
	ИначеЕсли ТекстовоеПредставлениеТипа = "DT"
		Или ТекстовоеПредставлениеТипа = "TS"
	Тогда
		Возврат Тип("Дата");
	КонецЕсли;
	
	Попытка
		ТипРез = Тип(ТекстовоеПредставлениеТипа);
		Возврат ТипРез;
	Исключение
		Возврат Тип("Строка");
	КонецПопытки;
	
КонецФункции

Функция РазбитьСоставноеСлово(Слово)
	
	Рез = Лев(Слово,1);
	Для Индекс = 2 по СтрДлина(Слово) Цикл
		Символ = Сред(Слово, Индекс, 1);
		Символ1 = ?(Индекс + 1 <= СтрДлина(Слово), Сред(Слово, Индекс + 1, 1), Символ);
		Символ2 = ?(Индекс + 2 <= СтрДлина(Слово), Сред(Слово, Индекс + 2, 1), Символ);
		Рез = Рез + ?(ВРег(Символ) = Символ, ?(ВРег(Символ1) = Символ1, Символ, " " + НРег(Символ)), ?(ВРег(Символ1) = Символ1 И ВРег(Символ2) = Символ2, НРег(Символ) + " ", Символ));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция ЗарезервированныйLocalid(localid) Экспорт
	
	ЗарезервированныеLocalid = Новый Массив;
	ЗарезервированныеLocalid.Добавить("ДатаДокумента");
	ЗарезервированныеLocalid.Добавить("Организация");
	ЗарезервированныеLocalid.Добавить("ОрганизацияАвтора");
	ЗарезервированныеLocalid.Добавить("ОрганизацияЛицаПридавшегоЮрСилу");
	ЗарезервированныеLocalid.Добавить("НаправившаяОрганизация");
	ЗарезервированныеLocalid.Добавить("Сотрудник");
	ЗарезервированныеLocalid.Добавить("ПервичныйПрием");
	
	Возврат ЗарезервированныеLocalid.Найти(localid) <> Неопределено;
	
КонецФункции

// Возвращает код nullFlavor для узла макета
//
// Параметры:
//  ИмяУзла	 - Строка - имя узла макета 
// 
// Возвращаемое значение:
//  Строка, Неопределено - код nullFlavor или Неопределено если для узла нет кода.
//
Функция NullFlavorДляУзла(ИмяУзла)
	
	// Узлы которые всегда имеют NullFlavor не зависимо от Localid
	УзлыСNullFlavor = СоответствиеУзловСNullFlavor();
	
	NullFlavor = УзлыСNullFlavor.Получить(ИмяУзла);
	Если NullFlavor <> Неопределено Тогда
		Возврат NullFlavor;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоответствиеУзловСNullFlavor()
	
	УзлыСNullFlavor = Новый Соответствие;
	УзлыСNullFlavor.Вставить("streetAddressLine",	"UNK");
	УзлыСNullFlavor.Вставить("state",				"UNK");
	УзлыСNullFlavor.Вставить("telecom",				"UNK");
	УзлыСNullFlavor.Вставить("addr",				"UNK");
	
	Возврат УзлыСNullFlavor;
	
КонецФункции

Функция РЭМДыСоСпециализациейФРМР()
	
	РЭМДыСоСпециализацией = Новый Массив;
	РЭМДыСоСпециализацией.Добавить(16);
	
	Возврат РЭМДыСоСпециализацией;
	
КонецФункции

#КонецОбласти

#Область ШапкаДокумента

Функция СформироватьОбщиеСекции(СвойстваЭМД, Ссылка, ТаблицаПараметров, МакетСЭМД, НезагруженныеКлассификаторы, ДополнительныеДанные)
	
	XMLМакетаСЭМД = ПолучитьXML(МакетСЭМД);
	
	УзлыДляУдаления = Новый Массив;
	РекурсивныйОбходXMLОбщихСекций(XMLМакетаСЭМД.ЭлементДокумента, ТаблицаПараметров, УзлыДляУдаления, Новый Соответствие, НезагруженныеКлассификаторы, ДополнительныеДанные);
	
	Для Каждого УзелДляУдаления Из УзлыДляУдаления Цикл
		РодительУзла = УзелДляУдаления.РодительскийУзел;
		РодительУзла.УдалитьДочерний(УзелДляУдаления);
	КонецЦикла;
	
	СлужебныеАтрибуты = ПолучитьСлужебныеАтрибуты();
	ОчиститьУзлыОтСлужебныхАтрибутов(XMLМакетаСЭМД.ЭлементДокумента, СлужебныеАтрибуты);
	
	УдалитьЛишниеПространстваИмен(XMLМакетаСЭМД.ЭлементДокумента, Строка(СвойстваЭМД.ИдентификаторРЭМД));
	
	Возврат РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(XMLМакетаСЭМД);
	
КонецФункции

Процедура ОчиститьУзлыОтСлужебныхАтрибутов(XML, СлужебныеАтрибуты)
	
	Для Каждого Узел Из XML.ДочерниеУзлы Цикл
		Для Каждого СлужебныйАтрибут Из СлужебныеАтрибуты Цикл
			Попытка
				Узел.УдалитьАтрибут(СлужебныйАтрибут);
			Исключение КонецПопытки;
		КонецЦикла;
		ОчиститьУзлыОтСлужебныхАтрибутов(Узел, СлужебныеАтрибуты);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЛишниеПространстваИмен(Узел, ВидРЭМД)
	
	ЛокальныеИмена = Новый Массив;
	
	Если ВидРЭМД = "194" Тогда
		ЛокальныеИмена.Добавить("xmlns");
		ЛокальныеИмена.Добавить("address");
		ЛокальныеИмена.Добавить("fias");
		ЛокальныеИмена.Добавить("identity");
		ЛокальныеИмена.Добавить("medService");
		ЛокальныеИмена.Добавить("xsi");
	Иначе
		Возврат;
	КонецЕсли;
	
	АтрибутыКУдалению = Новый Массив;
	Для Каждого Атрибут Из Узел.Атрибуты Цикл
		Если ЗначениеЗаполнено(Атрибут.ЛокальноеИмя)
			И ЛокальныеИмена.Найти(Атрибут.ЛокальноеИмя) = Неопределено
		Тогда
			АтрибутыКУдалению.Добавить(Атрибут);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого АтрибутКУдалению Из АтрибутыКУдалению Цикл
		Узел.УдалитьАтрибут(АтрибутКУдалению.URIПространстваИмен, АтрибутКУдалению.ЛокальноеИмя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПараметровДляОбщихСекций(МедицинскийДокумент, ТаблицаПараметров, СвойстваЭМД, Формат)
	
	ДанныеЭМД = Новый Соответствие;
	
	Пациент = МедицинскийДокумент.Клиент;
	
	СотрудникУстановившийПодпись = Неопределено;
	СтрокаСотрудникУстановившийПодпись = ТаблицаПараметров.Найти("СотрудникУстановившийПодпись", "localid");
	Если СтрокаСотрудникУстановившийПодпись <> Неопределено Тогда
		СотрудникУстановившийПодпись = СтрокаСотрудникУстановившийПодпись.Значение;
	КонецЕсли;
	
	ДолжностьМЗСотрудникаУстановившегоПодпись = Неопределено;
	СтрокаДолжностиМЗ = ТаблицаПараметров.Найти("ДолжностьМЗСотрудникаУстановившегоПодпись", "localid");
	Если СтрокаДолжностиМЗ <> Неопределено Тогда
		ДолжностьМЗСотрудникаУстановившегоПодпись = СтрокаДолжностиМЗ.Значение;
	КонецЕсли;
	
	ДанныеЭМД.Вставить("Организация", МедицинскийДокумент.Филиал.Организация);
	
	ДополнитьДаннымиДокумента(ДанныеЭМД, МедицинскийДокумент, СвойстваЭМД);
	ДополнитьДаннымиОрганизацииДокумента(ДанныеЭМД, МедицинскийДокумент);
	ДополнитьДаннымиПациента(ДанныеЭМД, МедицинскийДокумент, Пациент);
	
	Если СотрудникУстановившийПодпись <> Неопределено Тогда
		ДополнитьДаннымиАвтора(ДанныеЭМД, СотрудникУстановившийПодпись, ДолжностьМЗСотрудникаУстановившегоПодпись);
	КонецЕсли;
	
	ДополнитьДаннымиОрганизацииВладельца(ДанныеЭМД);
	ДополнитьДаннымиЛицаПридавшегоЮрСилу(ДанныеЭМД);
	
	ДополнитьТаблицуЗначениями(ДанныеЭМД, ТаблицаПараметров);
	
	// <participant typeCode="HLD">
	Если Формат = 1 И ЭМДСодержитУзел(ДанныеЭМД.Получить("ВидРЭМД"), "СведенияОСтраховомПолисеОМС") Тогда
		ДополнитьДаннымиСтраховогоПолисаОМС(ДанныеЭМД, ТаблицаПараметров, Пациент);
	КонецЕсли;
	
	// <participant typeCode="REF">
	Если ЭМДСодержитУзел(ДанныеЭМД.Получить("ВидРЭМД"), "СведенияОНаправившемЛице") Тогда
		ДополнитьДаннымиНаправившегоЛица(ДанныеЭМД, ТаблицаПараметров, СотрудникУстановившийПодпись, ДолжностьМЗСотрудникаУстановившегоПодпись);
	КонецЕсли;
	
	// <inFulfillmentOf>
	Если ЭМДСодержитУзел(ДанныеЭМД.Получить("ВидРЭМД"), "СведенияОНаправлении") Тогда
		ДополнитьДаннымиНаправления(ТаблицаПараметров, МедицинскийДокумент);
	КонецЕсли;
	
	// <documentationOf>
	Если ЭМДСодержитУзел(ДанныеЭМД.Получить("ВидРЭМД"), "СведенияОДокументируемомСобытии") Тогда
		ДополнитьДаннымиСобытий(ДанныеЭМД, ТаблицаПараметров, МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗСотрудникаУстановившегоПодпись, Формат);
	КонецЕсли;
	
	// <componentOf>
	Если ЭМДСодержитУзел(ДанныеЭМД.Получить("ВидРЭМД"), "СведенияОСлучаеОказанияМедПомощи") Тогда
		ДополнитьДаннымиСлучаяОказанияМедПомощи(ДанныеЭМД, ТаблицаПараметров, МедицинскийДокумент);
	КонецЕсли;
	
	// <recordTarget>/<guardian>
	Если ЭМДСодержитУзел(ДанныеЭМД.Получить("ВидРЭМД"), "Опекун") Тогда
		ДополнитьДаннымиОпекуна(ДанныеЭМД, ТаблицаПараметров, МедицинскийДокумент);
	КонецЕсли;
	
	Если Формат = 2 Тогда
		ДополнитьДаннымиСтраховогоПолисаОМС(ДанныеЭМД, ТаблицаПараметров, Пациент);
		// <participant typeCode="IND">
		ДополнитьДаннымиИсточниковОплаты(ДанныеЭМД, ТаблицаПараметров, Пациент, МедицинскийДокумент);
	КонецЕсли;
	
	// <authenticator>
	Если ЭМДСодержитУзел(ДанныеЭМД.Получить("ВидРЭМД"), "ПриглашенныйКонсультант") Тогда
		ДополнитьДаннымиПриглашенногоКонсультанта(ДанныеЭМД, ТаблицаПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуЗначениями(Данные, ТаблицаПараметров, ГруппирующееПоле = Неопределено)
	
	Для Каждого ЭлементСоответствия Из Данные Цикл
		Если ЗначениеЗаполнено(ЭлементСоответствия.Значение) Тогда
			ДобавитьЗначенияLocalId(ТаблицаПараметров, ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение, ГруппирующееПоле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗначенияLocalId(ТаблицаПараметров, localid, ЗначениеLocalId, ГруппирующееПоле = Неопределено)
	
	Если ТипЗнч(ЗначениеLocalId) = Тип("Массив") Тогда
		Для Каждого ЗначениеПоlocalid Из ЗначениеLocalId Цикл
			ДобавитьЗначенияLocalId(ТаблицаПараметров, localid, ЗначениеПоlocalid.Значение, ЗначениеПоlocalid.ГруппирующееПоле);
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(ЗначениеLocalId) Тогда
			СтрокаПараметра = ТаблицаПараметров.Добавить();
			СтрокаПараметра.localid = localid;
			СтрокаПараметра.Значение = ЗначениеLocalId;
			Если ГруппирующееПоле <> Неопределено Тогда
				СтрокаПараметра.ГруппирующееПоле = ГруппирующееПоле;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДаннымиДокумента(ДанныеЭМД, МедицинскийДокумент, СвойстваЭМД)
	
	ДанныеДокумента = Справочники.СообщенияРЭМД.ПолучитьДанныеДокументаПоУИД(СвойстваЭМД.УИДДокумента);
	
	ДанныеЭМД.Вставить("ДатаДокумента",				ИнтеграцияЕГИСЗСервер.ПредставлениеЛокальнойДатыСоСмещением(МедицинскийДокумент.Дата, "ДФ=ггггММддЧЧмм"));
	ДанныеЭМД.Вставить("ВидДокумента",				ИдентификаторыВидовДокументов(СвойстваЭМД.ИдентификаторРЭМД));
	ДанныеЭМД.Вставить("УИДДокумента",				СвойстваЭМД.УИДДокумента);
	ДанныеЭМД.Вставить("УИДНабораВерсий",			СвойстваЭМД.УИДДокумента);
	ДанныеЭМД.Вставить("ВерсияДокумента",			?(ДанныеДокумента = Неопределено, "1", Строка(ДанныеДокумента.НомерВерсии+1)));
	ДанныеЭМД.Вставить("ВидСЭМД",					СвойстваЭМД.ВидСЭМД);
	ДанныеЭМД.Вставить("ЗаголовокЭМД",				СвойстваЭМД.ЗаголовокЭМД);
	ДанныеЭМД.Вставить("ВидРЭМД",					СвойстваЭМД.ИдентификаторРЭМД);
	ДанныеЭМД.Вставить("УровеньКонфиденциальности",	ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.УровеньКонфиденциальностиМедицинскогоДокумента(1));
	ДанныеЭМД.Вставить("ПервичныйПрием",			ПервичныйПриемДокумента(МедицинскийДокумент));
	
КонецПроцедуры

// Для разных видов регистрируемых документов поле templateId имеет разный постфикс
Функция ИдентификаторыВидовДокументов(ВидРЭМД)
	
	ИдентификаторыВидовДокументов = Новый Соответствие;
	ИдентификаторыВидовДокументов.Вставить(4,	"1.2.643.5.1.13.2.7.5.1.8.3");		// Медицинская справка о допуске к управлению транспортными средствами (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(15,	"1.2.643.5.1.13.2.7.5.1.6.3");		// Протокол инструментального исследования (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(16,	"1.2.643.5.1.13.2.7.5.1.5.3");		// Протокол консультации (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(17,	"1.2.643.5.1.13.2.7.5.1.7.3");		// Протокол лабораторного исследования (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(40,	"1.2.643.5.1.13.2.7.5.1.36.3");		// Протокол телемедицинской консультации (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(42,	"1.2.643.5.1.13.2.7.5.1.2.3");		// Эпикриз по законченному случаю амбулаторный (CDA) Редакция 3
	ИдентификаторыВидовДокументов.Вставить(43,	"1.2.643.5.1.13.2.7.5.1.3.3");		// Направление на госпитализацию, восстановительное лечение, обследование, консультацию (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(50,	"1.2.643.5.1.13.13.14.39.3");		// Медицинская справка (врачебное профессионально-консультативное заключение) (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(63,	"1.2.643.5.1.13.13.14.45.9.1");		// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(64,	"1.2.643.5.1.13.13.14.46.9.1");		// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(80,	"1.2.643.5.1.13.13.14.88.9.2");		// Справка об отсутствии контактов с инфекционными больными (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(81,	"1.2.643.5.1.13.13.14.88.9.2");		// Справка о временной нетрудоспособности студента, учащегося техникума, профессионально-технического училища, о болезни, карантине и прочих причинах отсутствия ребенка, посещающего школу, детское дошкольное учреждение (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(82,	"1.2.643.5.1.13.13.14.69.9.2");		// Медицинское заключение о принадлежности несовершеннолетнего к медицинской группе для занятий физической культурой (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(83,	"1.2.643.5.1.13.13.14.69.9.2");		// Медицинское заключение об отсутствии противопоказаний к занятию определенными видами спорта (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(84,	"1.2.643.5.1.13.13.14.69.9.2");		// Медицинская справка в бассейн (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(85,	"1.2.643.5.1.13.13.14.57.9.1");		// Направление на консультацию и во вспомогательные кабинеты (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(86,	"1.2.643.5.1.13.13.14.81.9.1");		// Направление к месту лечения для получения медицинской помощи (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(87,	"1.2.643.5.1.13.13.14.49.9.1");		// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(88,	"1.2.643.5.1.13.13.14.56.9.1");		// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(92,	"1.2.643.5.1.13.2.7.5.1.2.9.4");	// Эпикриз по законченному случаю амбулаторный редакция 4
	ИдентификаторыВидовДокументов.Вставить(99,	"1.2.643.5.1.13.13.14.347.9.1");	// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(100,	"1.2.643.5.1.13.13.14.52.9.1");		// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ИдентификаторыВидовДокументов.Вставить(102,	"1.2.643.5.1.13.13.14.344.9.1");	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(103,	"1.2.643.5.1.13.13.14.51.9.1");		// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(116,	"1.2.643.5.1.13.13.14.362.9.1");	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(119,	"1.2.643.5.1.13.2.7.5.1.5.9.4");	// Протокол консультации (CDA) Редакция 4
	ИдентификаторыВидовДокументов.Вставить(121,	"1.2.643.5.1.13.13.14.34.9.6");		// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ИдентификаторыВидовДокументов.Вставить(122,	"1.2.643.5.1.13.13.14.141.9.2");	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(129,	"1.2.643.5.1.13.13.14.340.9.1");	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ИдентификаторыВидовДокументов.Вставить(147,	"1.2.643.5.1.13.13.14.1.9.5");		// Эпикриз в стационаре выписной (CDA) Редакция 5
	ИдентификаторыВидовДокументов.Вставить(148,	"1.2.643.5.1.13.13.14.86.9.2");		// Рецепт на лекарственный препарат (CDA) Редакция 2
	ИдентификаторыВидовДокументов.Вставить(174, "1.2.643.5.1.13.13.14.6.9.4");		// Протокол инструментального исследования (СDA) Редакция 4
	ИдентификаторыВидовДокументов.Вставить(186, "1.2.643.5.1.13.13.14.7.9.5");		// Протокол лабораторного исследования (CDA) Редакция 5
	ИдентификаторыВидовДокументов.Вставить(194,	"1.2.643.5.1.13.13.15.47.2");		// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	
	Возврат ИдентификаторыВидовДокументов.Получить(ВидРЭМД);
	
КонецФункции

Функция ПервичныйПриемДокумента(МедицинскийДокумент)
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	Если ИмяТипаДокумента = "Документ.Прием"
		И ЗначениеЗаполнено(МедицинскийДокумент.ПервичныйПрием)
	Тогда
		Возврат МедицинскийДокумент.ПервичныйПрием;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Прием.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Прием КАК Прием
		|ГДЕ
		|	Прием.МедицинскаяКарта = &МедицинскаяКарта
		|	И Прием.ЭтоПервичный
		|	И Прием.Проведен
		|	И НЕ Прием.Закрыт
		|
		|УПОРЯДОЧИТЬ ПО
		|	Прием.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("МедицинскаяКарта", МедицинскийДокумент.МедицинскаяКарта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДополнитьДаннымиОрганизацииДокумента(ДанныеЭМД, МедицинскийДокумент)
	
	Филиал = МедицинскийДокумент.Филиал;
	
	МедицинскаяОрганизация = ?(ТипЗнч(Филиал) = Тип("СправочникСсылка.Филиалы"), Филиал.Организация.МедицинскаяОрганизация, Филиал.МедицинскаяОрганизация); // Вероятно, в итоге какой-то один тип останется.
	РеквизитыЮрЛица = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Филиал);
	
	АдресОрганизации = АдресОрганизации(Филиал.Организация);
	Если АдресОрганизации = Неопределено Тогда
		АдресОрганизации = АдресОрганизации(Филиал);
	КонецЕсли;
	
	КонтактыОрганизации = КонтактыОбъекта(Филиал.Организация);
	Если КонтактыОрганизации = Неопределено Тогда
		КонтактыОрганизации = КонтактыОбъекта(Филиал);
	КонецЕсли;
	
	ДанныеЭМД.Вставить("ОГРН",						?(ЗначениеЗаполнено(МедицинскаяОрганизация.ОГРН), МедицинскаяОрганизация.ОГРН, РеквизитыЮрЛица.ОГРН));
	ДанныеЭМД.Вставить("ОКПО",						РеквизитыЮрЛица.ОКПО);
	ДанныеЭМД.Вставить("ИННОрганизации",			?(ЗначениеЗаполнено(МедицинскаяОрганизация.ИНН), МедицинскаяОрганизация.ИНН, РеквизитыЮрЛица.ИНН));
	ДанныеЭМД.Вставить("ЛицензияМедДеятельности",	ДанныеЛицензииМедДеятельности(Филиал, МедицинскийДокумент));
	ДанныеЭМД.Вставить("OIDМедицинскойОрганизации",	СокрЛП(МедицинскаяОрганизация.OIDОрганизации));
	ДанныеЭМД.Вставить("НаименованиеОрганизации",	РеквизитыЮрЛица.НазваниеОрганизации);
	ДанныеЭМД.Вставить("КонтактыОрганизации",		КонтактыОрганизации);
	ДанныеЭМД.Вставить("АдресОрганизации",			АдресОрганизации);
	
КонецПроцедуры

Процедура ДополнитьДаннымиПациента(ДанныеЭМД, МедицинскийДокумент, Пациент)
	
	ДанныеЭМД.Вставить("УИДПациента",			Строка(Пациент.УникальныйИдентификатор()));
	ДанныеЭМД.Вставить("СНИЛСПациента",			СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Пациент.СНИЛС));
	ДанныеЭМД.Вставить("ДУЛ",					СтруктураДУЛФизЛица(Пациент, МедицинскийДокумент.Дата));
	ДанныеЭМД.Вставить("КонтактыПациента",		КонтактыОбъекта(Пациент));
	ДанныеЭМД.Вставить("ФамилияПациента",		Пациент.Фамилия);
	ДанныеЭМД.Вставить("ИмяПациента",			Пациент.Имя);
	ДанныеЭМД.Вставить("ОтчествоПациента",		Пациент.Отчество);
	ДанныеЭМД.Вставить("ДатаРожденияПациента",	Формат(Пациент.ДатаРождения, "ДФ=ггггММдд"));
	ДанныеЭМД.Вставить("ПолПациента",			ЭлементКлассификатораПолаФизЛица(Пациент.Пол));
	
	ДополнитьДаннымиАдресовПациента(ДанныеЭМД, Пациент);
	
КонецПроцедуры

Процедура ДополнитьДаннымиАдресовПациента(ДанныеЭМД, Пациент)
	
	ФактАдресПациента	= СтруктураАдресаОбъекта(Пациент, Справочники.ВидыКонтактнойИнформации.АдресФактический);
	ЮрАдресПациента		= СтруктураАдресаОбъекта(Пациент, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
	
	Если ФактАдресПациента = Неопределено
		И ЮрАдресПациента <> Неопределено
	Тогда
		ФактАдресПациента = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ЮрАдресПациента);
		ФактАдресПациента.ТипАдреса = ТипАдресаПациентаПоВидуАдреса(Справочники.ВидыКонтактнойИнформации.АдресФактический);
	ИначеЕсли ЮрАдресПациента = Неопределено
		И ФактАдресПациента <> Неопределено
	Тогда
		ЮрАдресПациента = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФактАдресПациента);
		ЮрАдресПациента.ТипАдреса = ТипАдресаПациентаПоВидуАдреса(Справочники.ВидыКонтактнойИнформации.АдресЮридический);
	КонецЕсли;
	
	ДанныеЭМД.Вставить("ФактАдресПациента", ФактАдресПациента);
	
	Если ДанныеЭМД.Получить("ВидРЭМД") <> 80
		И ДанныеЭМД.Получить("ВидРЭМД") <> 81
		И ДанныеЭМД.Получить("ВидРЭМД") <> 119
		И ДанныеЭМД.Получить("ВидРЭМД") <> 122
	Тогда
		ДанныеЭМД.Вставить("ЮрАдресПациента", ЮрАдресПациента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДаннымиАвтора(ДанныеЭМД, Автор, ДолжностьМЗ)
	
	ВидыДокументаБезДатыПодписиАвтора = ВидыДокументаБезДатыПодписиАвтора();
	Если ВидыДокументаБезДатыПодписиАвтора.Найти(ДанныеЭМД.Получить("ВидРЭМД")) = Неопределено Тогда
		ДанныеЭМД.Вставить("ДатаПодписиДокументаАвтором", ИнтеграцияЕГИСЗСервер.ПредставлениеЛокальнойДатыСоСмещением(ТекущаяДата(), "ДФ=ггггММддЧЧмм"));
	КонецЕсли;
	
	ДанныеЭМД.Вставить("ОрганизацияАвтора",		ДанныеЭМД.Получить("Организация"));
	ДанныеЭМД.Вставить("УИДАвтора",				Строка(Автор.УникальныйИдентификатор()));
	ДанныеЭМД.Вставить("СНИЛСАвтора",			СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Автор.СНИЛС));
	
	// TODO: Т.к. во всех СЭМДах узел необязательный — пока он не указывается (до тех пор, пока нет интеграции с ФРМР)
	//ДанныеЭМД.Вставить("УИДАвтораПоФРМР",		);
	ДанныеЭМД.Вставить("АдресАвтора",			СтруктураАдресаОбъекта(Автор, Справочники.ВидыКонтактнойИнформации.АдресЮридический));
	ДанныеЭМД.Вставить("КонтактыАвтора",		КонтактыОбъекта(Автор));
	ДанныеЭМД.Вставить("ДолжностьАвтора",		ДолжностьМЗ);
	ДанныеЭМД.Вставить("ФамилияАвтора",			Автор.Фамилия);
	ДанныеЭМД.Вставить("ИмяАвтора",				Автор.Имя);
	ДанныеЭМД.Вставить("ОтчествоАвтора",		Автор.Отчество);
	ДанныеЭМД.Вставить("СпециальностьАвтора",	ПолучитьСпециализациюФРМР(Автор));
	
	ДанныеЭМД.Вставить("OIDМедицинскойОрганизацииАвтора",	ДанныеЭМД.Получить("OIDМедицинскойОрганизации"));
	ДанныеЭМД.Вставить("НаименованиеОрганизацииАвтора",		ДанныеЭМД.Получить("НаименованиеОрганизации"));
	ДанныеЭМД.Вставить("КонтактыОрганизацииАвтора",			ДанныеЭМД.Получить("КонтактыОрганизации"));
	ДанныеЭМД.Вставить("АдресОрганизацииАвтора",			ДанныеЭМД.Получить("АдресОрганизации"));
	ДанныеЭМД.Вставить("ОГРНОрганизацииАвтора",				ДанныеЭМД.Получить("ОГРН"));
	
КонецПроцедуры

Процедура ДополнитьДаннымиОрганизацииВладельца(ДанныеЭМД)
	
	ДанныеЭМД.Вставить("OIDМедицинскойОрганизацииВладельца", ДанныеЭМД.Получить("OIDМедицинскойОрганизации"));
	ДанныеЭМД.Вставить("ОГРНОрганизацииВладельца",			 ДанныеЭМД.Получить("ОГРН"));
	ДанныеЭМД.Вставить("ИННОрганизацииВладельца",			 ДанныеЭМД.Получить("ИННОрганизации"));
	ДанныеЭМД.Вставить("НаименованиеОрганизацииВладельца",	 ДанныеЭМД.Получить("НаименованиеОрганизации"));
	ДанныеЭМД.Вставить("КонтактыОрганизацииВладельца",		 ДанныеЭМД.Получить("КонтактыОрганизации"));
	ДанныеЭМД.Вставить("АдресОрганизацииВладельца",			 ДанныеЭМД.Получить("АдресОрганизации"));
	
КонецПроцедуры

Процедура ДополнитьДаннымиЛицаПридавшегоЮрСилу(ДанныеЭМД)
	
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу = ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу();
	Если ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Найти(ДанныеЭМД.Получить("ВидРЭМД")) = Неопределено Тогда
		ДанныеЭМД.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу", ДанныеЭМД.Получить("ДатаДокумента"));
		ДанныеЭМД.Вставить("ФактНаличияПодписи", "S");
	КонецЕсли;
	
	ДанныеЭМД.Вставить("ОрганизацияЛицаПридавшегоЮрСилу",	ДанныеЭМД.Получить("Организация"));
	ДанныеЭМД.Вставить("УИДЛицаПридавшегоЮрСилу",			ДанныеЭМД.Получить("УИДАвтора"));
	ДанныеЭМД.Вставить("СНИЛСЛицаПридавшегоЮрСилу",			ДанныеЭМД.Получить("СНИЛСАвтора"));
	ДанныеЭМД.Вставить("АдресЛицаПридавшегоЮрСилу",			ДанныеЭМД.Получить("АдресАвтора"));
	ДанныеЭМД.Вставить("КонтактыЛицаПридавшегоЮрСилу",		ДанныеЭМД.Получить("КонтактыАвтора"));
	ДанныеЭМД.Вставить("ФамилияЛицаПридавшегоЮрСилу",		ДанныеЭМД.Получить("ФамилияАвтора"));
	ДанныеЭМД.Вставить("ИмяЛицаПридавшегоЮрСилу",			ДанныеЭМД.Получить("ИмяАвтора"));
	ДанныеЭМД.Вставить("ОтчествоЛицаПридавшегоЮрСилу",		ДанныеЭМД.Получить("ОтчествоАвтора"));
	ДанныеЭМД.Вставить("ДолжностьЛицаПридавшегоЮрСилу",		ДанныеЭМД.Получить("ДолжностьАвтора"));
	
	ДанныеЭМД.Вставить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу",	ДанныеЭМД.Получить("OIDМедицинскойОрганизации"));
	ДанныеЭМД.Вставить("НаименованиеОрганизацииЛицаПридавшегоЮрСилу",	ДанныеЭМД.Получить("НаименованиеОрганизации"));
	ДанныеЭМД.Вставить("КонтактыОрганизацииЛицаПридавшегоЮрСилу",		ДанныеЭМД.Получить("КонтактыОрганизации"));
	ДанныеЭМД.Вставить("АдресОрганизацииЛицаПридавшегоЮрСилу",			ДанныеЭМД.Получить("АдресОрганизации"));
	ДанныеЭМД.Вставить("ОГРНОрганизацииЛицаПридавшегоЮрСилу",			ДанныеЭМД.Получить("ОГРН"));
	
КонецПроцедуры

Процедура ДополнитьДаннымиСтраховогоПолисаОМС(ДанныеЭМД, ТаблицаПараметров, Пациент)
	
	ДанныеПолиса = ПолучитьДанныеПолисаОМСКлиента(Пациент);
	
	Если ДанныеПолиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтраховогоПолисаОМС = Новый Соответствие;
	ДанныеСтраховогоПолисаОМС.Вставить("ПолисОМС",						ДанныеПолиса);
	ДанныеСтраховогоПолисаОМС.Вставить("КонтактыСтраховойОрганизации",	КонтактыОбъекта(ДанныеПолиса.СтраховаяОрганизация));
	ДанныеСтраховогоПолисаОМС.Вставить("АдресСтраховойОрганизации",		АдресОрганизации(ДанныеПолиса.СтраховаяОрганизация));
	
	ДополнитьТаблицуЗначениями(ДанныеСтраховогоПолисаОМС, ТаблицаПараметров);
	
КонецПроцедуры

Функция ПолучитьДанныеПолисаОМСКлиента(Клиент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраховыеПолисы.Серия КАК Серия,
		|	СтраховыеПолисы.Номер КАК Номер,
		|	СтраховыеПолисы.ВидПолиса.Контрагент КАК СтраховаяОрганизация,
		|	СтраховыеПолисы.ВидПолиса.Контрагент.Наименование КАК НаименованиеСтраховойОрганизации,
		|	СтраховыеПолисы.ВидПолиса.Контрагент.СтраховаяОрганизация КАК СтраховаяОрганизацияКлассификатор,
		|	СтраховыеПолисы.КлассификаторВидовПолисовРЭМД КАК ТипПолисаОМС
		|ИЗ
		|	Справочник.СтраховыеПолисы КАК СтраховыеПолисы
		|ГДЕ
		|	СтраховыеПолисы.ВидПолиса.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыСтраховыхПрограмм.ОМС)
		|	И НЕ СтраховыеПолисы.ПометкаУдаления
		|	И НЕ СтраховыеПолисы.НеДействителен
		|	И СтраховыеПолисы.Владелец = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеПолиса = Новый Структура("Серия, Номер, ТипПолисаОМС, СтраховаяОрганизация, НаименованиеСтраховойОрганизации, OIDСтраховойОрганизации");
		ЗаполнитьЗначенияСвойств(ДанныеПолиса, Выборка);
		
		АтрибутыКодаСМО = Выборка.СтраховаяОрганизацияКлассификатор.Атрибуты.НайтиСтроки(Новый Структура("Ключ", "SMOCOD"));
		Если АтрибутыКодаСМО.Количество() > 0 Тогда
			ДанныеПолиса.OIDСтраховойОрганизации = АтрибутыКодаСМО[0].Значение;
		КонецЕсли;
		
		Возврат ДанныеПолиса;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДополнитьДаннымиНаправившегоЛица(ДанныеЭМД, ТаблицаПараметров, Врач, ДолжностьМЗ)
	
	ДанныеНаправившегоЛица = Новый Соответствие;
	
	ДанныеНаправившегоЛица.Вставить("НаправившаяОрганизация",					ДанныеЭМД.Получить("Организация"));
	ДанныеНаправившегоЛица.Вставить("УИДНаправившегоЛица",						Строка(Врач.УникальныйИдентификатор()));
	ДанныеНаправившегоЛица.Вставить("СНИЛСНаправившегоЛица",					СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Врач.СНИЛС));
	ДанныеНаправившегоЛица.Вставить("ДолжностьНаправившегоЛица",				ДолжностьМЗ);
	ДанныеНаправившегоЛица.Вставить("АдресНаправившегоЛица",					СтруктураАдресаОбъекта(Врач, Справочники.ВидыКонтактнойИнформации.АдресЮридический));
	ДанныеНаправившегоЛица.Вставить("КонтактыНаправившегоЛица",					КонтактыОбъекта(Врач));
	ДанныеНаправившегоЛица.Вставить("ФамилияНаправившегоЛица",					Врач.Фамилия);
	ДанныеНаправившегоЛица.Вставить("ИмяНаправившегоЛица",						Врач.Имя);
	ДанныеНаправившегоЛица.Вставить("ОтчествоНаправившегоЛица",					Врач.Отчество);
	ДанныеНаправившегоЛица.Вставить("OIDОрганизацииНаправившегоЛица",			ДанныеЭМД.Получить("OIDМедицинскойОрганизации"));
	ДанныеНаправившегоЛица.Вставить("НаименованиеОрганизацииНаправившегоЛица",	ДанныеЭМД.Получить("НаименованиеОрганизации"));
	ДанныеНаправившегоЛица.Вставить("КонтактыОрганизацииНаправившегоЛица",		ДанныеЭМД.Получить("КонтактыОрганизации"));
	ДанныеНаправившегоЛица.Вставить("АдресОрганизацииНаправившегоЛица",			ДанныеЭМД.Получить("АдресОрганизации"));
	
	ДополнитьТаблицуЗначениями(ДанныеНаправившегоЛица, ТаблицаПараметров);
	
КонецПроцедуры

Процедура ДополнитьДаннымиНаправления(ТаблицаПараметров, МедицинскийДокумент)
	
	ДанныеНаправления = Новый Соответствие;
	ДанныеНаправления.Вставить("УИДНаправления", ПолучитьУИДНаправления(МедицинскийДокумент));
	
	ДополнитьТаблицуЗначениями(ДанныеНаправления, ТаблицаПараметров);
	
КонецПроцедуры

Процедура ДополнитьДаннымиСобытий(ДанныеЭМД, ТаблицаПараметров, МедицинскийДокумент, ОсновнойИсполнитель, ДолжностьМЗ, Формат)
	
	События = Новый Массив;
	
	Если Формат = 1 Тогда
		
		ВспомогательныеИсполнители = Новый Массив;
		LocalIdТипаСобытия = LocalIdТипаСобытияПоВидуРЭМД(ДанныеЭМД.Получить("ВидРЭМД"));
		
		Если ЗначениеЗаполнено(LocalIdТипаСобытия) Тогда
			СтрокиСобытий = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", LocalIdТипаСобытия));
			Для Каждого СтрокаСобытия Из СтрокиСобытий Цикл
				СтруктураСобытия = Новый Структура;
				СтруктураСобытия.Вставить("ТипСобытия", СтрокаСобытия.Значение);
				СтруктураСобытия.Вставить("ОсновнойИсполнитель", ОсновнойИсполнитель);
				СтруктураСобытия.Вставить("ВспомогательныеИсполнители", ВспомогательныеИсполнители);
				События.Добавить(СтруктураСобытия);
			КонецЦикла;
		Иначе
			СтруктураСобытия = Новый Структура;
			СтруктураСобытия.Вставить("ТипСобытия", "ДокументируемоеСобытие");
			СтруктураСобытия.Вставить("ОсновнойИсполнитель", ОсновнойИсполнитель);
			СтруктураСобытия.Вставить("ВспомогательныеИсполнители", ВспомогательныеИсполнители);
			События.Добавить(СтруктураСобытия);
		КонецЕсли;
	ИначеЕсли Формат = 2 Тогда
		
		//ТипСобытия = ТипСобытияПоВидуРЭМД(ДанныеЭМД.Получить("ВидРЭМД"));
		ТипСобытия = Неопределено;
		
		СтрокаСобытиеИзШаблонаПриема = ТаблицаПараметров.Найти("ТипДокументируемогоСобытия", "localid");
		Если ЗначениеЗаполнено(СтрокаСобытиеИзШаблонаПриема) Тогда
			СобытиеИзШаблонаПриема = СтрокаСобытиеИзШаблонаПриема.Значение;
			
			// Попытка на случай если в данный localid попадёт значение другого типа
			Попытка
				Если СобытиеИзШаблонаПриема.ВидКлассификатора = Перечисления.ВидыКлассификаторовМинЗдрава.ТипыДокументированныхСобытий Тогда
					ТипСобытия = СобытиеИзШаблонаПриема;
				КонецЕсли;
			Исключение КонецПопытки;
		КонецЕсли;
		
		// Если параметре ТипДокументируемогоСобытия не нашли, то ищем в коде
		Если Не ЗначениеЗаполнено(ТипСобытия) Тогда
			ТипСобытия = ТипСобытияПоВидуРЭМД(ДанныеЭМД.Получить("ВидРЭМД"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипСобытия) Тогда
			СтруктураСобытия = Новый Структура;
			СтруктураСобытия.Вставить("ТипСобытия", ТипСобытия);
			СтруктураСобытия.Вставить("ОсновнойИсполнитель", ОсновнойИсполнитель);
			СтруктураСобытия.Вставить("ВспомогательныеИсполнители", ВспомогательныеИсполнители);
			События.Добавить(СтруктураСобытия);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Событие Из События Цикл
		
		ДанныеСобытия = Новый Соответствие;
		
		СтрокаСобытия = ТаблицаПараметров.Добавить();
		СтрокаСобытия.localid = "ДокументируемоеСобытие";
		СтрокаСобытия.Значение = Событие.ТипСобытия;
		ИндексСтрокИСобытия = ТаблицаПараметров.Индекс(СтрокаСобытия);
		
		// Данные события
		ДанныеСобытия.Вставить("ДатаНачалаСобытия",		ДанныеЭМД.Получить("ДатаДокумента"));
		ДанныеСобытия.Вставить("ДатаОкончанияСобытия",	ДанныеЭМД.Получить("ДатаДокумента"));
		
		// Основной исполнитель
		ДанныеСобытия.Вставить("ОрганизацияОсновногоИсполнителя",	ДанныеЭМД.Получить("Организация"));
		ДанныеСобытия.Вставить("УИДОсновногоИсполнителя",			Строка(Событие.ОсновнойИсполнитель.УникальныйИдентификатор()));
		ДанныеСобытия.Вставить("СНИЛСОсновногоИсполнителя",			СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Событие.ОсновнойИсполнитель.СНИЛС));
		ДанныеСобытия.Вставить("ДолжностьОсновногоИсполнителя",		ДолжностьМЗ);
		ДанныеСобытия.Вставить("АдресОсновногоИсполнителя",			СтруктураАдресаОбъекта(Событие.ОсновнойИсполнитель, Справочники.ВидыКонтактнойИнформации.АдресЮридический));
		ДанныеСобытия.Вставить("КонтактыОсновногоИсполнителя",		КонтактыОбъекта(Событие.ОсновнойИсполнитель, ИндексСтрокИСобытия));
		ДанныеСобытия.Вставить("ФамилияОсновногоИсполнителя",		Событие.ОсновнойИсполнитель.Фамилия);
		ДанныеСобытия.Вставить("ИмяОсновногоИсполнителя",			Событие.ОсновнойИсполнитель.Имя);
		ДанныеСобытия.Вставить("ОтчествоОсновногоИсполнителя",		Событие.ОсновнойИсполнитель.Отчество);
		
		// Организация основного исполнителя
		ДанныеСобытия.Вставить("OIDМедицинскойОрганизацииОсновногоИсполнителя",	ДанныеЭМД.Получить("OIDМедицинскойОрганизации"));
		ДанныеСобытия.Вставить("НаименованиеОрганизацииОсновногоИсполнителя",	ДанныеЭМД.Получить("НаименованиеОрганизации"));
		ДанныеСобытия.Вставить("КонтактыОрганизацииОсновногоИсполнителя",		КонтактыОбъекта(ДанныеЭМД.Получить("Организация"), ИндексСтрокИСобытия));
		ДанныеСобытия.Вставить("АдресОрганизацииОсновногоИсполнителя",			ДанныеЭМД.Получить("АдресОрганизации"));
		
		// Формат 2
		ДанныеСобытия.Вставить("ФормаОказанияМедПомощи",			ФормаОказанияМедПомощи(ДанныеЭМД));
		ДанныеСобытия.Вставить("ВидМедицинскойПомощи",				ВидМедицинскойПомощи(ДанныеЭМД));
		ДанныеСобытия.Вставить("УсловияОказанияМедицинскойПомощи",	УсловияОказанияМедицинскойПомощи(ДанныеЭМД));
		
		ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
		
		Если ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
			ДополнитьДаннымиИсполнителей(ДанныеСобытия, МедицинскийДокумент.ПредседательМедкомиссии, ДолжностьМЗ, ДанныеЭМД);
		ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
			ДополнитьДаннымиИсполнителей(ДанныеСобытия, МедицинскийДокумент.ПредседательКомиссии, ДолжностьМЗ, ДанныеЭМД);
		ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
			ДополнитьДаннымиИсполнителей(ДанныеСобытия, МедицинскийДокумент.Врач, ДолжностьМЗ, ДанныеЭМД);
		ИначеЕсли ИмяТипаДокумента = "Документ.Прием" Тогда
			ВидыДокументовССекциейИсполнителя = ВидыДокументовССекциейИсполнителя();
			Если ВидыДокументовССекциейИсполнителя.Найти(ДанныеЭМД.Получить("ВидРЭМД")) <> Неопределено Тогда
				ДополнитьДаннымиИсполнителей(ДанныеСобытия, МедицинскийДокумент.Врач, ДолжностьМЗ, ДанныеЭМД);
			КонецЕсли;
		КонецЕсли;
		
		ДополнитьТаблицуЗначениями(ДанныеСобытия, ТаблицаПараметров, ИндексСтрокИСобытия);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДаннымиОпекуна(ДанныеЭМД, ТаблицаПараметров, МедицинскийДокумент)
	
	ДанныеОпекуна = Новый Соответствие;
	Если ЗначениеЗаполнено(МедицинскийДокумент.Клиент.ЗаконныйПредставитель)
		И ТипЗнч(МедицинскийДокумент.Клиент.ЗаконныйПредставитель) <> Тип("Строка")
	Тогда
		АдресОпекуна = СтруктураАдресаОбъекта(МедицинскийДокумент.Клиент.ЗаконныйПредставитель, Справочники.ВидыКонтактнойИнформации.АдресФактический);
		Если АдресОпекуна = Неопределено Тогда
			АдресОпекуна = СтруктураАдресаОбъекта(МедицинскийДокумент.Клиент.ЗаконныйПредставитель, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
		КонецЕсли;
		ДанныеОпекуна.Вставить("АдресОпекуна",					АдресОпекуна);
		ДанныеОпекуна.Вставить("ОпекунДатаРождения",			Формат(МедицинскийДокумент.Клиент.ЗаконныйПредставитель.ДатаРождения, "ДФ=yyyyMMdd"));
		ДанныеОпекуна.Вставить("ОпекунКонтактыПредставителя",	КонтактыОбъекта(МедицинскийДокумент.Клиент.ЗаконныйПредставитель));
		ДанныеОпекуна.Вставить("ФамилияОпекуна",				МедицинскийДокумент.Клиент.ЗаконныйПредставитель.Фамилия);
		ДанныеОпекуна.Вставить("ИмяОпекуна",					МедицинскийДокумент.Клиент.ЗаконныйПредставитель.Имя);
		ДанныеОпекуна.Вставить("ОтчествоОпекуна",				МедицинскийДокумент.Клиент.ЗаконныйПредставитель.Отчество);
	КонецЕсли;
	
	ДополнитьТаблицуЗначениями(ДанныеОпекуна, ТаблицаПараметров);
	
КонецПроцедуры

Процедура ДополнитьДаннымиСлучаяОказанияМедПомощи(ДанныеЭМД, ТаблицаПараметров, МедицинскийДокумент)
	
	ДанныеСлучаяОказанияМедПомощи = Новый Соответствие;
	ДанныеСлучаяОказанияМедПомощи.Вставить("ОрганизацияСлучая",					ДанныеЭМД.Получить("Организация"));
	ДанныеСлучаяОказанияМедПомощи.Вставить("СлучайОказанияМедицинскойПомощи",	ПредставлениеСлучаяОказанияПомощи(МедицинскийДокумент));
	ДанныеСлучаяОказанияМедПомощи.Вставить("НомерМедицинскойКарты",				МедицинскийДокумент.МедицинскаяКарта.Наименование);
	ДанныеСлучаяОказанияМедПомощи.Вставить("ДатаНачалаСлучая",					ДанныеЭМД.Получить("ДатаДокумента"));
	ДанныеСлучаяОказанияМедПомощи.Вставить("ДатаОкончанияСлучая",				ДанныеЭМД.Получить("ДатаДокумента"));
	
	// Формат 2
	ДанныеСлучаяОказанияМедПомощи.Вставить("ТипМедицинскойКарты",				ТипМедицинскойКарты(ДанныеЭМД, МедицинскийДокумент.МедицинскаяКарта));
	ДанныеСлучаяОказанияМедПомощи.Вставить("ВидМедицинскойКарты",				ВидМедицинскойКартыПоКлассификатору(ДанныеЭМД, МедицинскийДокумент.МедицинскаяКарта));
	
	ДополнитьТаблицуЗначениями(ДанныеСлучаяОказанияМедПомощи, ТаблицаПараметров);
	
КонецПроцедуры

Функция ПредставлениеСлучаяОказанияПомощи(МедицинскийДокумент)
	
	ДокументСлучая = МедицинскийДокумент;
	
	Если ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент) = "Документ.Прием"
		И ЗначениеЗаполнено(МедицинскийДокумент.ПервичныйПрием)
	Тогда
		ДокументСлучая = МедицинскийДокумент.ПервичныйПрием;
	КонецЕсли;
	
	ИмяТипаДокументаСлучая = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	Префикс = "";
	
	Если ИмяТипаДокументаСлучая = "Документ.ПрохождениеМедосмотра" Тогда
		Префикс = НСтр("ru='ПМО'");
	ИначеЕсли ИмяТипаДокументаСлучая = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		Префикс = НСтр("ru='ВК'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru='%1%2 от %3'"), Префикс, ДокументСлучая.Номер, ДокументСлучая.Дата);
	
КонецФункции

Функция ВрачДокумента(МедицинскийДокумент) Экспорт
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		Возврат МедицинскийДокумент.Врач;
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		Возврат МедицинскийДокумент.ПредседательМедКомиссии;
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		Возврат МедицинскийДокумент.ПредседательКомиссии;
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		Возврат МедицинскийДокумент.Врач;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьУИДНаправления(МедицинскийДокумент)
	
	Если ТипЗнч(МедицинскийДокумент) = Тип("ДокументСсылка.Прием")
		И ЗначениеЗаполнено(МедицинскийДокумент.ПервичныйПрием)
	Тогда
		Возврат Строка(МедицинскийДокумент.ПервичныйПрием.УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СтруктураДУЛФизЛица(ФизЛицо, Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПаспортныеДанныеСрезПоследних.ДокументСерия КАК Серия,
			|	ПаспортныеДанныеСрезПоследних.ДокументНомер КАК Номер,
			|	ПаспортныеДанныеСрезПоследних.ДокументДатаВыдачи КАК ДатаВыдачи,
			|	ПаспортныеДанныеСрезПоследних.ДокументКемВыдан КАК КемВыдан,
			|	ПаспортныеДанныеСрезПоследних.ДокументКодПодразделения КАК КодПодразделения,
			|	ДокументыУдостоверяющиеЛичность.КлассификаторВидовДУЛРЭМД КАК КлассификаторВидовДУЛРЭМД,
			|	ДокументыУдостоверяющиеЛичность.НеИмеетСерию КАК НеИмеетСерию
			|ИЗ
			|	РегистрСведений.ПаспортныеДанные.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
			|		ПО ПаспортныеДанныеСрезПоследних.ДокументВид = ДокументыУдостоверяющиеЛичность.Ссылка";
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.КлассификаторВидовДУЛРЭМД)
				И (ЗначениеЗаполнено(Выборка.Серия) Или Выборка.НеИмеетСерию)
				И ЗначениеЗаполнено(Выборка.Номер)
			Тогда
				ДУЛ = Новый Структура("КлассификаторВидовДУЛРЭМД, Серия, Номер, КемВыдан, КодПодразделения, ДатаВыдачи, СерияНомер, КемВыданПолностью");
				
				ДУЛ.КлассификаторВидовДУЛРЭМД = Выборка.КлассификаторВидовДУЛРЭМД;
				ДУЛ.Серия = Выборка.Серия;
				ДУЛ.Номер = Выборка.Номер;
				ДУЛ.КемВыдан = Выборка.КемВыдан;
				ДУЛ.КодПодразделения = Выборка.КодПодразделения;
				ДУЛ.ДатаВыдачи = Выборка.ДатаВыдачи;
				ДУЛ.СерияНомер = Выборка.Серия + " " + Выборка.Номер;
				
				Если ЗначениеЗаполнено(Выборка.КемВыдан)
					И ЗначениеЗаполнено(Выборка.КодПодразделения)
					И ЗначениеЗаполнено(Выборка.ДатаВыдачи)
				Тогда
					ДУЛ.КемВыданПолностью = СтрШаблон("%1. Код подразделения: %2. Дата выдачи: %3", Выборка.КемВыдан, Выборка.КодПодразделения, Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гггг"));
				КонецЕсли;
				
				Возврат ДУЛ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СтруктураАдресаОбъекта(Объект, ВидАдреса)
	
	АдресПоВидуАдреса = ИнтеграцияЕГИСЗСервер.ПолучитьАдресПоВидуАдреса(Объект, ВидАдреса);
	
	Если ЗначениеЗаполнено(АдресПоВидуАдреса.ЗначенияПолей) Тогда
		СтруктураАдресОбъекта = Новый Структура("Текст, Регион, AOGUID, HOUSEGUID, Субъект, ТипАдреса, ПочтовыйИндекс, ВидМестаЖительства");
		
		СтруктураАдрес = РаботаСАдресами.СведенияОбАдресе(АдресПоВидуАдреса.ЗначенияПолей);
		СтруктураАдресОбъекта.Текст = СтруктураАдрес.Представление;
		СтруктураАдресОбъекта.Регион = Строка(АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдрес.Регион));
		СтруктураАдресОбъекта.ПочтовыйИндекс = СтруктураАдрес.Индекс;
		
		КодыАдреса = АдресныйКлассификаторСлужебный.КодыАдреса(АдресПоВидуАдреса.ЗначенияПолей).КодыАдреса;
		СтруктураАдресОбъекта.AOGUID = КодыАдреса.Идентификатор;
		СтруктураАдресОбъекта.HOUSEGUID = КодыАдреса.ИдентификаторДома;
		
		СтруктураАдресОбъекта.Субъект = РегионПоКлассификаторуСубъектов(АдресПоВидуАдреса.ЗначенияПолей);
		
		Если Не ЗначениеЗаполнено(СтруктураАдрес.Город) Тогда 
			СтруктураАдресОбъекта.ВидМестаЖительства = ВидМестаЖительстваПоУИДЕГИСЗ(1); // Город
		Иначе
			СтруктураАдресОбъекта.ВидМестаЖительства = ВидМестаЖительстваПоУИДЕГИСЗ(2); // Село
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Клиенты") Тогда
			СтруктураАдресОбъекта.ТипАдреса = ТипАдресаПациентаПоВидуАдреса(ВидАдреса);
		КонецЕсли;
		
		Возврат СтруктураАдресОбъекта;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция КонтактыОбъекта(Объект, ГруппирующееПоле = Неопределено)
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	ВЫБОР
			|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|				И КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Факс)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Приоритет,
			|	КонтактнаяИнформация.Вид КАК Вид
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &ОбъектСсылка
			|	И КонтактнаяИнформация.Тип В(&ТипыКИ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";
		
		ТипыКИ = Новый Массив;
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
		Запрос.УстановитьПараметр("ОбъектСсылка", Объект);
		Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
		
		КонтактыОбъекта = Запрос.Выполнить().Выгрузить();
		Если КонтактыОбъекта.Количество() = 0
			Или КонтактыОбъекта[0].Приоритет <> 0	// Требование по руководству: "Хотя бы один элемент telecom СЛЕДУЕТ указать со схемой «tel:»"
		Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Контакты = Новый Массив;
		
		Для Каждого СтрокаКонтакта Из КонтактыОбъекта Цикл
			Если СтрокаКонтакта.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				НормализованныйНомерТелефона = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(СтрокаКонтакта.Представление, Ложь);
				Если ЗначениеЗаполнено(НормализованныйНомерТелефона) Тогда
					Если СтрокаКонтакта.Вид = Справочники.ВидыКонтактнойИнформации.Факс Тогда
						Контакты.Добавить(Новый Структура("Значение, ГруппирующееПоле", СтрШаблон("fax:+7%1", НормализованныйНомерТелефона), ГруппирующееПоле));
					Иначе
						Контакты.Добавить(Новый Структура("Значение, ГруппирующееПоле", СтрШаблон("tel:+7%1", НормализованныйНомерТелефона), ГруппирующееПоле));
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаКонтакта.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Контакты.Добавить(Новый Структура("Значение, ГруппирующееПоле", СтрШаблон("mailto:%1", СтрокаКонтакта.Представление), ГруппирующееПоле));
			КонецЕсли;
		КонецЦикла;
		
		Если Контакты.Количество() > 0 Тогда
			Возврат Контакты;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция АдресОрганизации(Организация)
	
	мВидыАдреса = Новый Массив;
	мВидыАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.АдресФактический);
	мВидыАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЮридический);
	мВидыАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПочтовый);
	
	Для Каждого ВидАдреса Из мВидыАдреса Цикл
		СтруктураАдреса = СтруктураАдресаОбъекта(Организация, ВидАдреса);
		Если СтруктураАдреса <> Неопределено Тогда
			Возврат СтруктураАдреса;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеЛицензииМедДеятельности(Филиал, МедицинскийДокумент)
	
	ОбладательЛицензии = ?(ТипЗнч(Филиал) = Тип("СправочникСсылка.Филиалы"), Филиал.Организация, Филиал); // Вероятно, в итоге какой-то один тип останется.
	
	СтруктураЛицензииФилиала = РегистрыСведений.ЛицензииМедицинскойДеятельности.ПолучитьСтруктуруДанныхЛицензии(ОбладательЛицензии, МедицинскийДокумент.Дата);
	
	Если СтруктураЛицензииФилиала = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЛицензииМедДеятельности = Новый Структура;
	ДанныеЛицензииМедДеятельности.Вставить("СерияНомер", СтруктураЛицензииФилиала.НомерЛицензии);
	ДанныеЛицензииМедДеятельности.Вставить("КемВыдана", СтрШаблон("%1. Дата регистрации: %2", СтруктураЛицензииФилиала.ВыдавшийЛицензиюОрган, Формат(СтруктураЛицензииФилиала.Период, "ДФ=dd.MM.yyyy.")));
	
	Возврат ДанныеЛицензииМедДеятельности;
	
КонецФункции

Функция ПолучитьСпециализациюФРМР(Сотрудник) Экспорт
	
	Для Каждого СпециализацияФРМР Из Сотрудник.СпециализацииФРМР Цикл
		Возврат СпециализацияФРМР.Специализация;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РекурсивныйОбходXMLОбщихСекций(XML, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры = Неопределено, РодительскийУзел = Неопределено)
	
	СписокУзлов = XML.ДочерниеУзлы;
	Для Каждого Узел Из СписокУзлов Цикл
		
		Если ТипЗнч(Узел) = Тип("КомментарийDOM") Тогда
			ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Узел) <> Тип("ЭлементDOM") Тогда
			Если ТипЗнч(Узел) = Тип("ТекстDOM") Тогда
				ЗаполнитьТекстовоеСодержаниеУзла(Узел, ТаблицаПараметров, СоответствиеВышестоящихLocalId, НезаполненныеПараметры, РодительскийУзел, УзлыДляУдаления);
			КонецЕсли;
			Продолжить;
		ИначеЕсли Узел.ПолучитьАтрибут("УзелДляКлонирования") <> Неопределено Или Узел.ПолучитьАтрибут("КлонированныйУзел") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АтрибутЭМДСодержитУзел = Узел.ПолучитьУзелАтрибута("ЭМДСодержитУзел");
		Если АтрибутЭМДСодержитУзел <> Неопределено
			И Не ВычислитьФункцию(АтрибутЭМДСодержитУзел.ЗначениеУзла, ТаблицаПараметров, СоответствиеВышестоящихLocalId)
		Тогда
			ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел);
			Продолжить;
		КонецЕсли;
		
		Попытка
			УдалитьАтрибутТипа(Узел, ДополнительныеДанные.ВидРЭМД);
		Исключение КонецПопытки;
		
		Попытка
			УдалитьАтрибутВерсииКлассификатора(Узел, ДополнительныеДанные.ВидРЭМД);
		Исключение КонецПопытки;
		
		ТекущийLocalId = Узел.ПолучитьАтрибут("localid");
		СвойстваУзла = ПолучитьСвойстваУзлаОбщихСекций(Узел, ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
		СтруктураТекущегоУзла = ПолучитьСтруктуруТекущегоУзла(Узел, РодительскийУзел, СвойстваУзла);
		
		Если ТекущийLocalId = Неопределено Тогда
			СтрокаГруппирующегоПоля = ПолучитьСтрокуГруппирующегоПоля(РодительскийУзел, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
			УстановитьЗначениеАтрибутовУзлаОбщихСекций(Узел, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтруктураТекущегоУзла, УзлыДляУдаления, НезаполненныеПараметры, НезагруженныеКлассификаторы, , СтрокаГруппирующегоПоля);
			РекурсивныйОбходXMLОбщихСекций(Узел, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры, СтруктураТекущегоУзла);
			Продолжить;
		КонецЕсли;
		
		Если СвойстваУзла.Множественное Тогда
			// [0..*] Или [1..*]
			ПараметрыСТекущимLocalId = ПолучитьПараметрыСТекущимLocalId(Узел, ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
			
			КоличествоСформированныхУзлов = 0;
			
			Для Каждого ПараметрСТекущимLocalId Из ПараметрыСТекущимLocalId Цикл
				
				КлонированныйУзел = Узел.КлонироватьУзел(Истина);
				СтруктураКлонированногоУзла = ПолучитьСтруктуруТекущегоУзла(КлонированныйУзел, РодительскийУзел, СвойстваУзла);
				КлонированныйУзел.УстановитьАтрибут("КлонированныйУзел", "Истина");
				Узел.РодительскийУзел.ВставитьПеред(КлонированныйУзел, Узел);
				
				СоответствиеВышестоящихLocalId.Вставить(ТекущийLocalId, ПараметрСТекущимLocalId);
				ДанныеДляУзлаКлассификатора = Новый Структура("localid, ДополнительныеДанные", ТекущийLocalId, ДополнительныеДанные);
				УстановитьЗначениеАтрибутовУзлаОбщихСекций(КлонированныйУзел, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтруктураКлонированногоУзла, УзлыДляУдаления, НезаполненныеПараметры, НезагруженныеКлассификаторы, ПараметрСТекущимLocalId.Значение, , ДанныеДляУзлаКлассификатора);
				РекурсивныйОбходXMLОбщихСекций(КлонированныйУзел, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры, СтруктураКлонированногоУзла);
				СоответствиеВышестоящихLocalId.Удалить(ТекущийLocalId);
				
				// TODO: возможно потребуется добавить в макет общих секций в множественные узлы новый атрибут МинКоличествоУзлов
				Если УзлыДляУдаления.Найти(КлонированныйУзел) = Неопределено Тогда
					КоличествоСформированныхУзлов = КоличествоСформированныхУзлов + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоСформированныхУзлов = 0 Тогда
				КлонированныйУзел = Узел.КлонироватьУзел(Истина);
				СтруктураКлонированногоУзла = ПолучитьСтруктуруТекущегоУзла(КлонированныйУзел, РодительскийУзел, СвойстваУзла);
				КлонированныйУзел.УстановитьАтрибут("КлонированныйУзел", "Истина");
				Узел.РодительскийУзел.ВставитьПеред(КлонированныйУзел, Узел);
				ОбработатьУзелБезЗаполненногоПараметра(КлонированныйУзел, СтруктураКлонированногоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
			КонецЕсли;
			
			Узел.УстановитьАтрибут("УзелДляКлонирования", "Истина");
			ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел);
			
			Продолжить;
		КонецЕсли;
		
		СтрокаГруппирующегоПоля = ПолучитьСтрокуГруппирующегоПоля(РодительскийУзел, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
		ЗначениеLocalIdИзСтроки = ПолучитьЗначениеLocalIdИзСтроки(ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
		
		Если ЗначениеЗаполнено(ЗначениеLocalIdИзСтроки) Тогда
			ДанныеДляУзлаКлассификатора = Новый Структура("localid, ДополнительныеДанные", ТекущийLocalId, ДополнительныеДанные);
			УстановитьЗначениеАтрибутовУзлаОбщихСекций(Узел, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтруктураТекущегоУзла, УзлыДляУдаления, НезаполненныеПараметры, НезагруженныеКлассификаторы, ЗначениеLocalIdИзСтроки, ,ДанныеДляУзлаКлассификатора);
			РекурсивныйОбходXMLОбщихСекций(Узел, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры, СтруктураТекущегоУзла);
		Иначе
			Если НезаполненныйУзелКлассификатора(Узел) Тогда
				ДобавитьНезагруженныйКлассификатор(НезагруженныеКлассификаторы, Узел.ПолучитьАтрибут("codeSystem"));
			Иначе
				ОбработатьУзелБезЗаполненногоПараметра(Узел, СтруктураТекущегоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура УдалитьАтрибутТипа(Узел, ВидРЭМД)
	
	ВидыРЭМДБезТипов = Новый Массив;
	ВидыРЭМДБезТипов.Добавить("100");
	ВидыРЭМДБезТипов.Добавить("116");
	ВидыРЭМДБезТипов.Добавить("148");
	ВидыРЭМДБезТипов.Добавить("194");
	
	Если ВидыРЭМДБезТипов.Найти(ВидРЭМД) <> Неопределено
		И Узел.ЕстьАтрибут("http://www.w3.org/2001/XMLSchema-instance", "type")
	Тогда
		Узел.УдалитьАтрибут("http://www.w3.org/2001/XMLSchema-instance", "type");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьАтрибутВерсииКлассификатора(Узел, ВидРЭМД)
	
	ВидыРЭМДБезТипов = Новый Массив;
	ВидыРЭМДБезТипов.Добавить("4");
	
	Если ВидыРЭМДБезТипов.Найти(ВидРЭМД) <> Неопределено
		И Узел.ЕстьАтрибут("codeSystemVersion")
	Тогда
		Узел.УдалитьАтрибут("codeSystemVersion");
	КонецЕсли;
	
КонецПроцедуры

Функция НезаполненныйУзелКлассификатора(Узел)
	
	Если Узел.ПолучитьАтрибут("codeSystem") = Неопределено
		Или Лев(Узел.ПолучитьАтрибут("codeSystem"), 1) = "#"
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого АтрибутУзла Из Узел.Атрибуты Цикл
		Если Лев(АтрибутУзла.ЗначениеУзла, 1) = "#" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСвойстваУзлаОбщихСекций(Узел, ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId)
	
	СвойстваУзла = Новый Структура("Обязательное, Множественное, ЗначениеПустогоЗначения, Синоним, СохранятьТипПриПустомЗначении, localid");
	
	// Если узел множественный - узел клонируется столько раз, сколько строк по такому localid есть в таблице параметров ([0..*] или [1..*])
	// Иначе - узел должен быть максимум в одном экземпляре ([0..1] или [1..1])
	АтрибутМножественное = Узел.ПолучитьАтрибут("Множественное");
	Если АтрибутМножественное <> Неопределено Тогда
		СвойстваУзла.Множественное = ВычислитьФункцию(АтрибутМножественное, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
	Иначе
		СвойстваУзла.Множественное = Ложь;
	КонецЕсли;
	
	// Если ПустоеЗначение заполнено, это значит, что: ([1..])
	//	1) При отсутствии значения по localid узла, или одного из дочерних обязательных узлов:
	//		а) Все дочерние узлы удаляются
	//		б) Все атрибуты узла удаляются
	//		в) В узел добавляется атрибут nullFlavor с соответствующим значением
	//	2) При наличии заполненного значения - заполнить узел
	// Иначе: (R[1..1] или [0..])
	//	Зависит от обязательности
	АтрибутПустоеЗначение = Узел.ПолучитьАтрибут("ПустоеЗначение");
	Если АтрибутПустоеЗначение <> Неопределено Тогда
		Если Лев(АтрибутПустоеЗначение,1) = "*" Тогда
			СвойстваУзла.ЗначениеПустогоЗначения = ВычислитьФункцию(АтрибутПустоеЗначение, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
		Иначе
			СвойстваУзла.ЗначениеПустогоЗначения = АтрибутПустоеЗначение;
		КонецЕсли;
	Иначе
		СвойстваУзла.ЗначениеПустогоЗначения = Неопределено;
	КонецЕсли;
	
	// Если узел обязательный: (R[1..])
	//	1) При отсутствии заполненного значения - один из родительских узлов обязан быть необязательным. Найти его, обработать его (либо удалить узел, либо установить nullFlavor). 
	//	2) При наличии заполненного значения - заполнить узел (R[1..])
	// Иначе: ([0..*])
	//	1) При отсутствии заполненного значения - узел следует удалить ([0..0])
	//	2) При наличии заполненного значения - заполнить узел ([..*])
	Если ЗначениеЗаполнено(СвойстваУзла.ЗначениеПустогоЗначения) Тогда
		СвойстваУзла.Обязательное = Ложь;
	Иначе
		АтрибутОбязательное = Узел.ПолучитьАтрибут("Обязательное");
		Если АтрибутОбязательное <> Неопределено Тогда
			СвойстваУзла.Обязательное = ВычислитьФункцию(АтрибутОбязательное, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
		Иначе
			СвойстваУзла.Обязательное = Истина;
		КонецЕсли;
	КонецЕсли;
	
	АтрибутСиноним = Узел.ПолучитьАтрибут("Синоним");
	Если АтрибутСиноним <> Неопределено Тогда
		Если Лев(АтрибутСиноним,1) = "*" Тогда
			СвойстваУзла.Синоним = ВычислитьФункцию(АтрибутСиноним, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
		Иначе
			СвойстваУзла.Синоним = АтрибутСиноним;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущийLocalId) Тогда
		СвойстваУзла.Синоним = СтрШаблон(НСтр("ru='Поле ЭМД ""%1""'"), ТекущийLocalId);
	КонецЕсли;
	
	Попытка
		СвойстваУзла.СохранятьТипПриПустомЗначении = ВычислитьФункцию(Узел.ПолучитьАтрибут("СохранятьТипПриПустомЗначении"), ТаблицаПараметров, СоответствиеВышестоящихLocalId);
	Исключение
		СвойстваУзла.СохранятьТипПриПустомЗначении = Ложь;
	КонецПопытки;
	
	СвойстваУзла.localid = ТекущийLocalId;
	
	Возврат СвойстваУзла
	
КонецФункции

Функция ПолучитьСтрокуГруппирующегоПоля(РодительскийУзел, ТаблицаПараметров, СоответствиеВышестоящихLocalId)
	
	СтруктураМножественногоРодителя = Неопределено;
	Если РодительскийУзел <> Неопределено Тогда
		стрРодительскийУзел = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РодительскийУзел);
		
		Пока СтруктураМножественногоРодителя = Неопределено
			И стрРодительскийУзел <> Неопределено
		Цикл
			Если (стрРодительскийУзел.СвойстваУзла.Свойство("Множественное")
				И стрРодительскийУзел.СвойстваУзла.Множественное)
			Тогда
				СтруктураМножественногоРодителя = стрРодительскийУзел;
			КонецЕсли;
			стрРодительскийУзел = стрРодительскийУзел.РодительскийУзел;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураМножественногоРодителя <> Неопределено Тогда
		localidМножественногоРодителя = СтруктураМножественногоРодителя.СвойстваУзла.localid;
		ЗначениеВышестоящегоLocalId = СоответствиеВышестоящихLocalId.Получить(localidМножественногоРодителя);
		Если ЗначениеВышестоящегоLocalId <> Неопределено Тогда
			Возврат ЗначениеВышестоящегоLocalId;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПараметрыСТекущимLocalId(Узел, ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId)
	
	РодительУзла = Узел.РодительскийУзел;
	РодительскийУзелСLocalId = Неопределено;
	Пока РодительУзла <> Неопределено Цикл
		Если ТипЗнч(РодительУзла) = Тип("ЭлементDOM") И РодительУзла.ПолучитьАтрибут("localid") <> Неопределено Тогда
			РодительскийУзелСLocalId = РодительУзла;
			Прервать;
		КонецЕсли;
		РодительУзла = РодительУзла.РодительскийУзел;
	КонецЦикла;
	
	Если РодительскийУзелСLocalId <> Неопределено Тогда
		// Группирующее поле
		ГруппирующееПоле = Неопределено;
		НомерСтрокиТаблицы = Неопределено;
		
		РодительУзла = Узел.РодительскийУзел;
		Пока РодительУзла <> Неопределено Цикл
			Если ТипЗнч(РодительУзла) = Тип("ЭлементDOM") Тогда
				АтрибутLocalid = РодительУзла.ПолучитьАтрибут("localid");
				Если АтрибутLocalid <> Неопределено Тогда
					ВышестоящийLocalId = СоответствиеВышестоящихLocalId.Получить(АтрибутLocalid);
					Если ВышестоящийLocalId <> Неопределено Тогда
						Если ВышестоящийLocalId.Параметр <> Неопределено Тогда
							ГруппирующееПоле = ВышестоящийLocalId.Параметр;
							НомерСтрокиТаблицы = ВышестоящийLocalId.НомерСтрокиТаблицы;
						Иначе
							// Константа
							ГруппирующееПоле = ТаблицаПараметров.Индекс(ВышестоящийLocalId);
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			РодительУзла = РодительУзла.РодительскийУзел;
		КонецЦикла;
		
		Если ГруппирующееПоле <> Неопределено Тогда
			ПараметрыСТекущимLocalId = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле, НомерСтрокиТаблицы", ТекущийLocalId, ГруппирующееПоле, НомерСтрокиТаблицы));
		Иначе
			ПараметрыСТекущимLocalId = Новый Массив;
		КонецЕсли;
	Иначе
		ПараметрыСТекущимLocalId = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", ТекущийLocalId));
	КонецЕсли;
	
	Возврат ПараметрыСТекущимLocalId;
	
КонецФункции

Процедура ОбработатьУзелБезЗаполненногоПараметра(Узел, СвойстваРодительскогоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры)
	
	СвойстваУзла = СвойстваРодительскогоУзла.СвойстваУзла;
	РодительскийУзел = СвойстваРодительскогоУзла.РодительскийУзел;
	СохранятьДочерниеУзлы = СвойстваУзла.Свойство("СохранятьДочерниеУзлы") И СвойстваУзла.СохранятьДочерниеУзлы;
	СохранятьТипПриПустомЗначении = СвойстваУзла.Свойство("СохранятьТипПриПустомЗначении") И СвойстваУзла.СохранятьТипПриПустомЗначении;
	
	Если ЗначениеЗаполнено(СвойстваУзла.ЗначениеПустогоЗначения) Тогда
		УстановитьПустоеЗначениеУзла(Узел, УзлыДляУдаления, СвойстваУзла.ЗначениеПустогоЗначения, СохранятьДочерниеУзлы, СохранятьТипПриПустомЗначении);
	Иначе
		Если СвойстваУзла.Обязательное Тогда
			// Обязательный узел, не подразумевающий nullFlavor с пустым значением существовать не может, поэтому ищем необязательного родителя и удаляем его
			НеобязательныйРодитель = Неопределено;
			
			Если РодительскийУзел <> Неопределено Тогда
				стрРодительскийУзел = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РодительскийУзел);
				
				Пока НеобязательныйРодитель = Неопределено
					И стрРодительскийУзел <> Неопределено
				Цикл
					Если (Не стрРодительскийУзел.СвойстваУзла.Обязательное
							Или стрРодительскийУзел.СвойстваУзла.Множественное)
						И стрРодительскийУзел.Узел <> Неопределено
					Тогда
						НеобязательныйРодитель = стрРодительскийУзел.Узел;
					Иначе
						стрРодительскийУзел = стрРодительскийУзел.РодительскийУзел;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НеобязательныйРодитель = Неопределено Тогда
				Если НезаполненныеПараметры <> Неопределено Тогда
					НезаполненныеПараметры.Добавить(Новый Структура("Узел, СвойстваРодительскогоУзла", Узел, СвойстваРодительскогоУзла));
					Возврат;
				Иначе
					// TODO: Убедиться, что такая ситуация невозможна
					ВызватьИсключение(НСтр("ru='Не заполнен обязательный параметр'"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(стрРодительскийУзел.СвойстваУзла.ЗначениеПустогоЗначения) Тогда
				УстановитьПустоеЗначениеУзла(НеобязательныйРодитель, УзлыДляУдаления, стрРодительскийУзел.СвойстваУзла.ЗначениеПустогоЗначения, СохранятьДочерниеУзлы, СохранятьТипПриПустомЗначении);
			Иначе
				ДобавитьУзелДляУдаления(УзлыДляУдаления, НеобязательныйРодитель);
			КонецЕсли;
		Иначе
			ДобавитьУзелДляУдаления(УзлыДляУдаления, СвойстваРодительскогоУзла.Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение атрибутов, значения которы начинаются с #, $, *, %
//
Процедура УстановитьЗначениеАтрибутовУзлаОбщихСекций(Узел, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СвойстваРодительскогоУзла,
	УзлыДляУдаления, НезаполненныеПараметры, НезагруженныеКлассификаторы, ЗначениеLocalIdИзСтроки = Неопределено, СтрокаГруппирующегоПоля = Неопределено, ДанныеДляУзлаКлассификатора = Неопределено)
	
	// Заполнение атрибутов по данным элемента классификатора (#)
	Если ЗначениеLocalIdИзСтроки <> Неопределено
		И ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеLocalIdИзСтроки)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗначениеLocalIdИзСтроки, "УИДЕГИСЗ")
	Тогда
		ЗаполнитьАтрибутыУзлаКлассификатора(Узел, ЗначениеLocalIdИзСтроки, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора);
	КонецЕсли;
	
	// Заполнение значений остальных атрибутов по localid ($, *, %)
	СлужебныеАтрибуты = ПолучитьСлужебныеАтрибуты();
	
	Для Каждого АтрибутУзла Из Узел.Атрибуты Цикл
		Если СлужебныеАтрибуты.Найти(АтрибутУзла.ИмяУзла) <> Неопределено
			Или (СтрНайти(АтрибутУзла.ЗначениеУзла, "$") = 0
					И Лев(АтрибутУзла.ЗначениеУзла,1) <> "*"
					И Лев(АтрибутУзла.ЗначениеУзла,1) <> "%")
		Тогда
			Продолжить;
		КонецЕсли;
		Результат = ПолучитьРезультат(АтрибутУзла.ЗначениеУзла, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля, Узел.ПолучитьАтрибут("Формат"));
		Если ЗначениеЗаполнено(Результат) Тогда
			Узел.УстановитьАтрибут(АтрибутУзла.ИмяУзла, Результат);
		Иначе
			ОбработатьУзелБезЗаполненногоПараметра(Узел, СвойстваРодительскогоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСлужебныеАтрибуты()
	
	СлужебныеАтрибуты = Новый Массив;
	СлужебныеАтрибуты.Добавить("ЭМДСодержитУзел");
	СлужебныеАтрибуты.Добавить("ПустоеЗначение");
	СлужебныеАтрибуты.Добавить("Обязательное");
	СлужебныеАтрибуты.Добавить("Множественное");
	СлужебныеАтрибуты.Добавить("localid");
	СлужебныеАтрибуты.Добавить("КлонированныйУзел");
	СлужебныеАтрибуты.Добавить("УзелДляКлонирования");
	СлужебныеАтрибуты.Добавить("Синоним");
	СлужебныеАтрибуты.Добавить("Формат");
	СлужебныеАтрибуты.Добавить("СохранятьТипПриПустомЗначении");
	СлужебныеАтрибуты.Добавить("ВозможноЗаполнениеИзТаблицыДиагнозов");
	
	Возврат СлужебныеАтрибуты;
	
КонецФункции

#Область ФункцииМакетаОбщихСекций

// Значение по умолчанию = Ложь
Функция ЭМДСодержитУзел(ВидРЭМД, ТипУзла)
	
	ТипыУзлов = Новый Массив;
	
	// ФОРМАТ 1
	// Медицинская справка о допуске к управлению транспортными средствами (CDA) Редакция 1
	Если ВидРЭМД = 4 Тогда
		ТипыУзлов.Добавить("ДУЛ");
		ТипыУзлов.Добавить("ОГРНОрганизации");
		ТипыУзлов.Добавить("ЛицензияМедДеятельности");
		ТипыУзлов.Добавить("УИДАвтораПоФРМР");
		ТипыУзлов.Добавить("УИДПациента");
		ТипыУзлов.Добавить("МедицинскаяОрганизация");
		ТипыУзлов.Добавить("ДатаСлучаяДваЗначения");
		ТипыУзлов.Добавить("АдресЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("Отчество");
		ТипыУзлов.Добавить("АдресАвтора");
		ТипыУзлов.Добавить("КонтактыОрганизацииВладельца");
		
	// Протокол инструментального исследования (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 15 Тогда
		ТипыУзлов.Добавить("ДУЛ");
		ТипыУзлов.Добавить("СпециальностьАвтора");
		ТипыУзлов.Добавить("СведенияОСтраховомПолисеОМС");
		ТипыУзлов.Добавить("УИДПациента");
		ТипыУзлов.Добавить("МедицинскаяОрганизация");
		ТипыУзлов.Добавить("СведенияОНаправившемЛице");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("ДокументируемоеСобытие");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("ДатаСлучаяДваЗначения");
		ТипыУзлов.Добавить("АдресЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("Отчество");
		ТипыУзлов.Добавить("КонтактыОрганизацииВладельца");
		
	// Протокол консультации (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 16 Тогда
		ТипыУзлов.Добавить("ДУЛ");
		ТипыУзлов.Добавить("СпециальностьАвтора");
		ТипыУзлов.Добавить("СведенияОСтраховомПолисеОМС");
		ТипыУзлов.Добавить("УИДАвтораПоФРМР");
		ТипыУзлов.Добавить("АдресАвтора");
		ТипыУзлов.Добавить("УИДПациента");
		ТипыУзлов.Добавить("МедицинскаяОрганизация");
		ТипыУзлов.Добавить("СведенияОНаправившемЛице");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("ДокументируемоеСобытие");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("ДатаСлучаяДваЗначения");
		ТипыУзлов.Добавить("АдресЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("Отчество");
		ТипыУзлов.Добавить("КонтактыОрганизацииВладельца");
		
	// Протокол лабораторного исследования (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 17 Тогда
		ТипыУзлов.Добавить("ДУЛ");
		ТипыУзлов.Добавить("СведенияОСтраховомПолисеОМС");
		ТипыУзлов.Добавить("УИДПациента");
		ТипыУзлов.Добавить("АдресАвтора");
		ТипыУзлов.Добавить("МедицинскаяОрганизация");
		ТипыУзлов.Добавить("СведенияОНаправившемЛице");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("ДатаОкончанияСлучая");
		ТипыУзлов.Добавить("ДатаСлучаяДваЗначения");
		ТипыУзлов.Добавить("АдресЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("Отчество");
		ТипыУзлов.Добавить("КонтактыОрганизацииВладельца");
		
	// Протокол телемедицинской консультации (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 40 Тогда
		ТипыУзлов.Добавить("ДУЛ");
		ТипыУзлов.Добавить("ОГРНОрганизацииВладельца");
		ТипыУзлов.Добавить("ИННОрганизацииВладельца");
		ТипыУзлов.Добавить("СведенияОСтраховомПолисеОМС");
		ТипыУзлов.Добавить("СведенияОНаправившемЛице");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("ДокументируемоеСобытие");
		ТипыУзлов.Добавить("ДатаСлучаяДваЗначения");
		ТипыУзлов.Добавить("АдресЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("Отчество");
		ТипыУзлов.Добавить("КонтактыОрганизацииВладельца");
		ТипыУзлов.Добавить("ПриглашенныйКонсультант");
		
	// Направление на госпитализацию, восстановительное лечение, обследование, консультацию (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 43 Тогда
		ТипыУзлов.Добавить("ДУЛ");
		ТипыУзлов.Добавить("СведенияОСтраховомПолисеОМС");
		ТипыУзлов.Добавить("УИДПациента");
		ТипыУзлов.Добавить("МедицинскаяОрганизация");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("НомерМедицинскойКарты");
		ТипыУзлов.Добавить("ДатаОкончанияСлучая");
		ТипыУзлов.Добавить("ДатаСлучаяДваЗначения");
		ТипыУзлов.Добавить("АдресЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("Отчество");
		ТипыУзлов.Добавить("КонтактыОрганизацииВладельца");
		
	// Медицинская справка (врачебное профессионально-консультативное заключение) (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 50 Тогда
		ТипыУзлов.Добавить("ЮрАдресПациентаФИАС");
		ТипыУзлов.Добавить("УИДПациента");
		ТипыУзлов.Добавить("ФактАдресПациентаФИАС");
		ТипыУзлов.Добавить("МедицинскаяОрганизация");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("identityОГРНОрганизации");
		ТипыУзлов.Добавить("identityОГРНОрганизацииАвтора");
		ТипыУзлов.Добавить("identityОГРНОрганизацииЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("ДатаСлучаяОдноЗначения");
		ТипыУзлов.Добавить("АдресПоФИАС");
		ТипыУзлов.Добавить("Отчество");
		
	// ФОРМАТ 2
	// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 63 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		
	// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 64 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		
	// Справка об отсутствии контактов с инфекционными больными (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 80 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		//ТипыУзлов.Добавить("Исполнитель");
		
	// Справка об отсутствии контактов с инфекционными больными. Справка о временной нетрудоспособности студента, учащегося техникума, профессионально-технического училища, о болезни, карантине и прочих причинах отсутствия ребенка, посещающего школу, детское дошкольное учреждение (Редакция 2)
	ИначеЕсли ВидРЭМД = 81 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		//ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		
	// Медицинское заключение о принадлежности несовершеннолетнего к медицинской группе для занятий физической культурой (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 82
		// Медицинское заключение об отсутствии противопоказаний к занятию определенными видами спорта (CDA) Редакция 2
		Или ВидРЭМД = 83
		// Медицинская справка в бассейн (CDA) Редакция 2
		Или ВидРЭМД = 84
	Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		//ТипыУзлов.Добавить("Исполнитель");
		
	// Протокол консультации в рамках диспансерного наблюдения (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 85 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		//ТипыУзлов.Добавить("Исполнитель");
		
	// Направление к месту лечения для получения медицинской помощи (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 86 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		//ТипыУзлов.Добавить("Исполнитель");
		
	// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 87 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		//ТипыУзлов.Добавить("Исполнитель");
		
	// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 88 Тогда
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Эпикриз по законченному случаю амбулаторный (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 92 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		
	// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 99 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ИначеЕсли ВидРЭМД = 100 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		//ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("ИННОрганизации");
		
	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 102 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) (Редакция 1) 
	ИначеЕсли ВидРЭМД = 103 Тогда
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 116 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		
	// Протокол консультации (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 119 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ИначеЕсли ВидРЭМД = 121 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("Опекун");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 122 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("ВидМестаЖительстваФактАдресПациента");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 129 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("ВидМестаЖительстваЮрАдресПациента");
		ТипыУзлов.Добавить("ВидМестаЖительстваФактАдресПациента");
		ТипыУзлов.Добавить("Опекун");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОНаправлении"); 
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	//// Эпикриз в стационаре выписной (CDA) Редакция 5
	//ИначеЕсли ВидРЭМД = 147 Тогда
	//	ТипыУзлов.Добавить("ПочтовыйИндекс");
	//	ТипыУзлов.Добавить("Опекун");
	//	ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
	//	ТипыУзлов.Добавить("Контрагент");
	//	ТипыУзлов.Добавить("СведенияОНаправлении");
	//	ТипыУзлов.Добавить("ИдентификаторНаправленияРЭМД");
	//	ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
	//	ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		
	// Рецепт на лекарственный препарат (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 148 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("ОГРНИП");
		ТипыУзлов.Добавить("ОднаДатаСобытия");
		
	// Протокол инструментального исследования (СDA) Редакция 4
	ИначеЕсли ВидРЭМД = 174 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("ИдентификаторНаправленияРЭМД");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СНИЛСИсполнителя");
		ТипыУзлов.Добавить("СНИЛСЧленаМедкомиссии");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		ТипыУзлов.Добавить("ОрганизацияИсполнителя");
		ТипыУзлов.Добавить("ОрганизацияЧленаМедкомиссии");
		ТипыУзлов.Добавить("АдресИсполнителя");
		ТипыУзлов.Добавить("АдресЧленаМедкомиссии");
		
	// Протокол лабораторного исследования (CDA) Редакция 5
	ИначеЕсли ВидРЭМД = 186 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("Опекун");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("ИдентификаторНаправленияРЭМД");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("СведенияОСлучаеОказанияМедПомощи");
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 194 Тогда
		ТипыУзлов.Добавить("ПочтовыйИндекс");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("Контрагент");
		ТипыУзлов.Добавить("СведенияОНаправлении");
		ТипыУзлов.Добавить("ИдентификаторНаправленияРЭМД");
		ТипыУзлов.Добавить("СведенияОДокументируемомСобытии");
		ТипыУзлов.Добавить("Исполнитель");
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		
	КонецЕсли;
	
	Возврат ТипыУзлов.Найти(ТипУзла) <> Неопределено;
	
КонецФункции

// Значение по умолчанию = Ложь
Функция Обязательное(ВидРЭМД, ТипУзла)
	
	ТипыУзлов = Новый Массив;
	
	// ФОРМАТ 1
	// Медицинская справка о допуске к управлению транспортными средствами (CDA) Редакция 1
	Если ВидРЭМД = 4 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		ТипыУзлов.Добавить("ЛицензияМедДеятельности");
		
	// Протокол инструментального исследования (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 15 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		
	// Протокол консультации (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 16 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		
	// Протокол лабораторного исследования (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 17 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		
	// Протокол телемедицинской консультации (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 40 Тогда
		ТипыУзлов.Добавить("АдресЛицаПридавшегоЮрСилу");
		
	// Направление на госпитализацию, восстановительное лечение, обследование, консультацию (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 43 Тогда
		ТипыУзлов.Добавить("СведенияОСтраховомПолисеОМС");
		
	// Медицинская справка (врачебное профессионально-консультативное заключение) (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 50 Тогда
		ТипыУзлов.Добавить("АдресОрганизацииЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("МедицинскаяОрганизацияАвтора");
		
	// ФОРМАТ 2
	// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 63 Тогда
		ТипыУзлов.Добавить("АдресОрганизации");
		ТипыУзлов.Добавить("ЛицензияМедДеятельности");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("ЮрАдресПациента");
		
	// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 64 Тогда
		ТипыУзлов.Добавить("ЛицензияМедДеятельности");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("ЮрАдресПациента");
		
	// Справка об отсутствии контактов с инфекционными больными. (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 80 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		ТипыУзлов.Добавить("АдресОрганизации");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Справка о временной нетрудоспособности студента, учащегося техникума, профессионально-технического училища, о болезни, карантине и прочих причинах отсутствия ребенка, посещающего школу, детское дошкольное учреждение (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 81 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		ТипыУзлов.Добавить("АдресОрганизации");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("НомерМедицинскойКарты");
		ТипыУзлов.Добавить("ТипМедицинскойКарты");
		ТипыУзлов.Добавить("ВидМедицинскойКарты");
		
	// Медицинское заключение о принадлежности несовершеннолетнего к медицинской группе для занятий физической культурой (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 82 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Медицинское заключение об отсутствии противопоказаний к занятию определенными видами спорта (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 83 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Медицинская справка в бассейн (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 84 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Направление на консультацию и во вспомогательные кабинеты (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 85 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Направление к месту лечения для получения медицинской помощи (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 86 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 87 Тогда
		ТипыУзлов.Добавить("ЮрАдресПациента");
		ТипыУзлов.Добавить("АдресОрганизации");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 88 Тогда
		ТипыУзлов.Добавить("АдресОрганизации");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		
	//Эпикриз по законченному случаю амбулаторный (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 92 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 99 Тогда
		ТипыУзлов.Добавить("ЮрАдресПациента");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		
	// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ИначеЕсли ВидРЭМД = 100 Тогда
		ТипыУзлов.Добавить("ЛицензияМедДеятельности");
		ТипыУзлов.Добавить("АдресОрганизации");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		ТипыУзлов.Добавить("КонтактыЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("КонтактыОрганизацииЛицаПридавшегоЮрСилу");
		ТипыУзлов.Добавить("НомерМедицинскойКарты");
		ТипыУзлов.Добавить("ТипМедицинскойКарты");
		
	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 102 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) (Редакция 1)
	ИначеЕсли ВидРЭМД = 103 Тогда
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 116 Тогда
		ТипыУзлов.Добавить("ЮрАдресПациента");
		ТипыУзлов.Добавить("ЛицензияМедДеятельности");
		ТипыУзлов.Добавить("АдресОрганизации");
		ТипыУзлов.Добавить("АдресОрганизацииАвтора");
		
	// Протокол консультации (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 119 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ИначеЕсли ВидРЭМД = 121 Тогда
		ТипыУзлов.Добавить("АдресОрганизации");
		
	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 122 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		
	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 129 Тогда
		ТипыУзлов.Добавить("ФактАдресПациента");
		ТипыУзлов.Добавить("АдресОрганизации");
		
	//// Эпикриз в стационаре выписной (CDA) Редакция 5
	//ИначеЕсли ВидРЭМД = 147 Тогда
	//	ТипыУзлов.Добавить("ЮрАдресПациента");
	//	ТипыУзлов.Добавить("СведенияОбИсточникеОплаты");
		
	// Рецепт на лекарственный препарат (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 148 Тогда
		ТипыУзлов.Добавить("АдресОрганизации");
		
	// Протокол инструментального исследования (СDA) Редакция 4
	ИначеЕсли ВидРЭМД = 174 Тогда
		
	// Протокол лабораторного исследования (CDA) Редакция 5
	ИначеЕсли ВидРЭМД = 186 Тогда
		ТипыУзлов.Добавить("АдресОрганизации");
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 194 Тогда
		ТипыУзлов.Добавить("РольСотрудникаПриПодписанииМД");
		ТипыУзлов.Добавить("РольСотрудникаЧленаМедкомиссииПриПодписанииМД");
		
	КонецЕсли;
	
	Возврат ТипыУзлов.Найти(ТипУзла) <> Неопределено;
	
КонецФункции

// Значение по умолчанию = Неопределено
Функция ПустоеЗначение(ВидРЭМД, ТипУзла)
	
	ТипыУзлов = Новый Соответствие;
	
	// ФОРМАТ 1
	// Медицинская справка о допуске к управлению транспортными средствами (CDA) Редакция 1
	Если ВидРЭМД = 4 Тогда
		ТипыУзлов.Вставить("СНИЛСПациента",									"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизации",						"OTH");
		ТипыУзлов.Вставить("ОГРНОрганизации",								"NA");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииАвтора",				"OTH");
		ТипыУзлов.Вставить("АдресОрганизацииВладельца",						"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииВладельца",			"OTH");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу",	"OTH");
		ТипыУзлов.Вставить("АдресОрганизацииАвтора",						"NI");
		
	// Протокол инструментального исследования (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 15 Тогда
		ТипыУзлов.Вставить("ДУЛ",											"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",								"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",							"NI");
		ТипыУзлов.Вставить("КонтактыОрганизации",							"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизации",						"OTH");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииАвтора",				"OTH");
		ТипыУзлов.Вставить("КонтактыОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("ДолжностьЛицаПридавшегоЮрСилу",					"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу",	"OTH");
		ТипыУзлов.Вставить("АдресОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("ДолжностьОсновногоИсполнителя",					"NI");
		ТипыУзлов.Вставить("ДолжностьВспомогательногоИсполнителя",			"NI");
		ТипыУзлов.Вставить("АдресОрганизацииВладельца",						"NI");
		
	// Протокол консультации (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 16 Тогда
		ТипыУзлов.Вставить("ДУЛ",											"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",							"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизации",						"OTH");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииАвтора",				"OTH");
		ТипыУзлов.Вставить("КонтактыОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу",	"OTH");
		ТипыУзлов.Вставить("АдресОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("АдресОрганизацииВладельца",						"NI");
		ТипыУзлов.Вставить("ДолжностьЛицаПридавшегоЮрСилу",					"NI");
		ТипыУзлов.Вставить("ДолжностьОсновногоИсполнителя",					"NI");
		ТипыУзлов.Вставить("ДолжностьВспомогательногоИсполнителя",			"NI");
		
	// Протокол лабораторного исследования (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 17 Тогда
		ТипыУзлов.Вставить("ДУЛ",											"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",								"NI");
		ТипыУзлов.Вставить("ФактАдресПациента",								"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",							"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизации",						"OTH");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииАвтора",				"OTH");
		ТипыУзлов.Вставить("КонтактыОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу",	"OTH");
		ТипыУзлов.Вставить("АдресОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("АдресОрганизацииВладельца",						"NI");
		ТипыУзлов.Вставить("ДолжностьЛицаПридавшегоЮрСилу",					"NI");
		ТипыУзлов.Вставить("ДолжностьОсновногоИсполнителя",					"NI");
		ТипыУзлов.Вставить("ДолжностьВспомогательногоИсполнителя",			"NI");
		
	// Протокол телемедицинской консультации (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 40 Тогда
		ТипыУзлов.Вставить("ДУЛ",											"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",								"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",							"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииАвтора",				"OTH");
		ТипыУзлов.Вставить("КонтактыОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииВладельца",			"OTH");
		ТипыУзлов.Вставить("АдресЛицаПридавшегоЮрСилу",						"NI");
		ТипыУзлов.Вставить("КонтактыЛицаПридавшегоЮрСилу",					"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу",	"OTH");
		ТипыУзлов.Вставить("АдресОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("АдресОрганизацииВладельца",						"NI");
		ТипыУзлов.Вставить("ДолжностьЛицаПридавшегоЮрСилу",					"NI");
		ТипыУзлов.Вставить("ДолжностьОсновногоИсполнителя",					"NI");
		ТипыУзлов.Вставить("ДолжностьВспомогательногоИсполнителя",			"NI");
		
	// Направление на госпитализацию, восстановительное лечение, обследование, консультацию (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 43 Тогда
		ТипыУзлов.Вставить("ДУЛ",											"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",								"NI");
		ТипыУзлов.Вставить("КонтактыОрганизации",							"NI");
		ТипыУзлов.Вставить("КонтактыОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("КонтактыОрганизацииЛицаПридавшегоЮрСилу",		"NI");
		ТипыУзлов.Вставить("АдресОрганизацииАвтора",						"NI");
		ТипыУзлов.Вставить("АдресОрганизацииВладельца",						"NI");
		
	// Медицинская справка (врачебное профессионально-консультативное заключение) (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 50 Тогда
		ТипыУзлов.Вставить("ПолПациента",									"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизации",						"OTH");
		ТипыУзлов.Вставить("СНИЛСАвтора",									"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииАвтора",				"OTH");
		ТипыУзлов.Вставить("СНИЛСЛицаПридавшегоЮрСилу",						"NI");
		ТипыУзлов.Вставить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу",	"OTH");
		
	// ФОРМАТ 2
	// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 63 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("АдресОрганизацииЛицаПридавшегоЮрСилу",		"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		ТипыУзлов.Вставить("АдресОрганизацииВладельца",					"NI");
		
	// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 64 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("АдресОрганизации",							"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Справка об отсутствии контактов с инфекционными больными. (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 80
		// Справка о временной нетрудоспособности студента, учащегося техникума, профессионально-технического училища, о болезни, карантине и прочих причинах отсутствия ребенка, посещающего школу, детское дошкольное учреждение (CDA) Редакция 2
		Или ВидРЭМД = 81
	Тогда
		ТипыУзлов.Вставить("ДУЛ",					"NI");
		ТипыУзлов.Вставить("ПолисОМС",				"NI");
		ТипыУзлов.Вставить("ПолПациента",			"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",	"NI");
		
	// Медицинское заключение о принадлежности несовершеннолетнего к медицинской группе для занятий физической культурой (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 82
		// Медицинское заключение об отсутствии противопоказаний к занятию определенными видами спорта (CDA) Редакция 2
		Или ВидРЭМД = 83
		// Медицинская справка в бассейн (CDA) Редакция 2
		Или ВидРЭМД = 84
	Тогда
		ТипыУзлов.Вставить("ДУЛ",					"NI");
		ТипыУзлов.Вставить("ПолисОМС",				"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",		"NI");
		ТипыУзлов.Вставить("ПолПациента",			"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",	"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",	"NI");
		
	// Направление на консультацию и во вспомогательные кабинеты (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 85 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Направление к месту лечения для получения медицинской помощи (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 86 Тогда
		ТипыУзлов.Вставить("ЮрАдресПациента",		"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",	"NI");
		
	// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 87 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("КонтактыПациента",							"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 88 Тогда
		ТипыУзлов.Вставить("ДУЛ",					"NI");
		ТипыУзлов.Вставить("ПолисОМС",				"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",		"NI");
		ТипыУзлов.Вставить("ПолПациента",			"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",	"NI");
		ТипыУзлов.Вставить("СерияПолисаОМС",		"NI"); // Вынужденная мера, ошибка в схематроне на стороне ЕГИСЗ
		
	// Эпикриз по законченному случаю амбулаторный (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 92 Тогда
		ТипыУзлов.Вставить("ДУЛ",					"NI");
		ТипыУзлов.Вставить("ПолисОМС",				"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",		"NI");
		ТипыУзлов.Вставить("КонтактыПациента",		"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",	"NI");
		ТипыУзлов.Вставить("АдресОрганизации",		"NI");
		
	// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 99 Тогда
		ТипыУзлов.Вставить("ПолисОМС",					"NI");
		ТипыУзлов.Вставить("ПолПациента",				"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",		"NI");
		ТипыУзлов.Вставить("МедицинскаяОрганизация",	"NI");
		
	// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ИначеЕсли ВидРЭМД = 100 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		ТипыУзлов.Вставить("УИДЛицаПридавшегоЮрСилу",					"NI");
		ТипыУзлов.Вставить("СНИЛСЛицаПридавшегоЮрСилу",					"NI");
		ТипыУзлов.Вставить("ДолжностьЛицаПридавшегоЮрСилу",				"NI");
		ТипыУзлов.Вставить("УИДАвтора",									"NI");
		ТипыУзлов.Вставить("СНИЛСАвтора",								"NI");
		ТипыУзлов.Вставить("ДолжностьАвтора",							"NI");
		ТипыУзлов.Вставить("КонтактыАвтора",							"NI");
		ТипыУзлов.Вставить("КонтактыЛицаПридавшегоЮрСилу",				"NI");
		
	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 102 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		//ТипыУзлов.Вставить("АдресОрганизации",							"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) (Редакция 1)
	ИначеЕсли ВидРЭМД = 103 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 116 Тогда
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Протокол консультации (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 119 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		ТипыУзлов.Вставить("НомерМедицинскойКарты",						"NI");
		ТипыУзлов.Вставить("ТипМедицинскойКарты",						"NI");
		ТипыУзлов.Вставить("ВидМедицинскойКарты",						"NI");
		
	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ИначеЕсли ВидРЭМД = 121 Тогда
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("КонтактыПациента",							"NI");
		//ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("КонтактыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("КонтактыОрганизацииАвтора",					"NI");
		ТипыУзлов.Вставить("АдресОрганизацииАвтора",					"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		ТипыУзлов.Вставить("АдресОрганизацииЛицаПридавшегоЮрСилу",		"NI");
		ТипыУзлов.Вставить("КонтактыОрганизацииИсполнителя",			"NI");
		ТипыУзлов.Вставить("АдресОрганизацииИсполнителя",				"NI");
		ТипыУзлов.Вставить("КонтактыОрганизацииЧленаМедкомиссии",		"NI");
		ТипыУзлов.Вставить("АдресОрганизацииЧленаМедкомиссии",			"NI");
		
	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 122 Тогда

		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ТипМедицинскойКарты",						"NI");
		ТипыУзлов.Вставить("ВидМедицинскойКарты",						"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 129 Тогда
		ТипыУзлов.Вставить("СНИЛСПациента",								"NI");
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		ТипыУзлов.Вставить("ФормаОказанияМедПомощи",					"NI");
		ТипыУзлов.Вставить("ВидМедицинскойПомощи",						"NI");
		ТипыУзлов.Вставить("УсловияОказанияМедицинскойПомощи",			"NI");
		ТипыУзлов.Вставить("НомерМедицинскойКарты",						"NI");
		ТипыУзлов.Вставить("ТипМедицинскойКарты",						"NI");
		ТипыУзлов.Вставить("ВидМедицинскойКарты",						"NI");
		
	//// Эпикриз в стационаре выписной (CDA) Редакция 5
	//ИначеЕсли ВидРЭМД = 147 Тогда
	//	ТипыУзлов.Вставить("ДУЛ",										"NI");
	//	ТипыУзлов.Вставить("ПолисОМС",									"NI");
	//	ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
	//	ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
	//	ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
	//	ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
	//	ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
	//	ТипыУзлов.Вставить("ИдентификаторНаправления",					"NI");
	//	ТипыУзлов.Вставить("ИдентификаторНаправленияРЭМД",				"NI");
	//	ТипыУзлов.Вставить("ВидНаправления",							"NI");
		
	// Рецепт на лекарственный препарат (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 148 Тогда
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("КонтактыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	// Протокол инструментального исследования (СDA) Редакция 4
	ИначеЕсли ВидРЭМД = 174 Тогда
		ТипыУзлов.Вставить("СНИЛСПациента",								"NI");
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",						"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		ТипыУзлов.Вставить("ФормаОказанияМедПомощи",					"NI");
		ТипыУзлов.Вставить("УсловияОказанияМедицинскойПомощи",			"NI");
		
	// Протокол лабораторного исследования (CDA) Редакция 5
	ИначеЕсли ВидРЭМД = 186 Тогда
		ТипыУзлов.Вставить("СНИЛСПациента",								"NI");
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("ПолПациента",								"NI");
		ТипыУзлов.Вставить("ДатаРожденияПациента",						"NI");
		ТипыУзлов.Вставить("ОпекунДатаРождения",						"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		ТипыУзлов.Вставить("ФормаОказанияМедПомощи",					"NI");
		ТипыУзлов.Вставить("ВидМедицинскойПомощи",						"NI");
		ТипыУзлов.Вставить("УсловияОказанияМедицинскойПомощи",			"NI");
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 194 Тогда
		ТипыУзлов.Вставить("СНИЛСПациента",								"NI");
		ТипыУзлов.Вставить("ДУЛ",										"NI");
		ТипыУзлов.Вставить("ПолисОМС",									"NI");
		ТипыУзлов.Вставить("ЮрАдресПациента",							"NI");
		ТипыУзлов.Вставить("РеквизитыОрганизации",						"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаАвтором",				"NI");
		ТипыУзлов.Вставить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу",	"NI");
		ТипыУзлов.Вставить("ФактНаличияПодписи",						"NI");
		
	КонецЕсли;
	
	Возврат ТипыУзлов.Получить(ТипУзла);
	
КонецФункции

// Значение по умолчанию = Ложь
Функция Множественное(ВидРЭМД, ТипУзла)
	
	ТипыУзлов = Новый Массив;
	
	// ФОРМАТ 2
	// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	Если ВидРЭМД = 63 Тогда
		
	// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 64 Тогда
		
	// Справка об отсутствии контактов с инфекционными больными (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 80 Тогда
		
	// Справка об отсутствии контактов с инфекционными больными. Справка о временной нетрудоспособности студента, учащегося техникума, профессионально-технического училища, о болезни, карантине и прочих причинах отсутствия ребенка, посещающего школу, детское дошкольное учреждение (Редакция 2)
	ИначеЕсли ВидРЭМД = 81 Тогда
		
	// Медицинское заключение о принадлежности несовершеннолетнего к медицинской группе для занятий физической культурой (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 82
		// Медицинское заключение об отсутствии противопоказаний к занятию определенными видами спорта (CDA) Редакция 2
		Или ВидРЭМД = 83
		// Медицинская справка в бассейн (CDA) Редакция 2
		Или ВидРЭМД = 84
	Тогда
		
	// Протокол консультации в рамках диспансерного наблюдения (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 85 Тогда
		
	// Направление к месту лечения для получения медицинской помощи (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 86 Тогда
		
	// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 87 Тогда
		
	// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 88 Тогда
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	// Эпикриз по законченному случаю амбулаторный (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 92 Тогда
		
	// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 99 Тогда
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ИначеЕсли ВидРЭМД = 100 Тогда
		
	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 102 Тогда
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) (Редакция 1) 
	ИначеЕсли ВидРЭМД = 103 Тогда
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 116 Тогда
		
	// Протокол консультации (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 119 Тогда
		ТипыУзлов.Добавить("КонтактыОрганизацииВладельца");
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ИначеЕсли ВидРЭМД = 121 Тогда
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 129 Тогда
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	//// Эпикриз в стационаре выписной (CDA) Редакция 5
	//ИначеЕсли ВидРЭМД = 147 Тогда
		
	// Протокол инструментального исследования (СDA) Редакция 4
	ИначеЕсли ВидРЭМД = 174 Тогда
		ТипыУзлов.Добавить("КонтактыИсполнителя");
		ТипыУзлов.Добавить("КонтактыЧленаМедкомиссии");
		
	// Протокол лабораторного исследования (CDA) Редакция 5
	ИначеЕсли ВидРЭМД = 186 Тогда
		
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 194 Тогда
		
	КонецЕсли;
	
	Возврат ТипыУзлов.Найти(ТипУзла) <> Неопределено;
	
КонецФункции

Функция НаименованиеПолучающейОрганизации()
	
	Возврат "Министерство здравоохранения Российской Федерации (ИЭМК)";
	
КонецФункции

Функция СинонимИННПоВидуОплаты(ТаблицаПараметров)
	
	СинонимИНН = "ИНН";
	
	ИсточникОплаты = ТаблицаПараметров.Найти("ИсточникОплаты");
	Если ИсточникОплаты <> Неопределено
		И ЗначениеЗаполнено(ИсточникОплаты.Значение)
	Тогда
		Если ИсточникОплаты.Значение.УИДЕГИСЗ = 6 Тогда
			СинонимИНН = "ИНН контрагента";
		ИначеЕсли ИсточникОплаты.Значение.УИДЕГИСЗ = 4 Тогда
			СинонимИНН = "ИНН пациента"
		КонецЕсли;
	КонецЕсли;
	
	Возврат СинонимИНН;
	
КонецФункции

Функция СинонимНомераДоговораПоВидуОплаты(ТаблицаПараметров)
	
	СинонимНомераДоговора = "Номер договора";
	
	ИсточникОплаты = ТаблицаПараметров.Найти("ИсточникОплаты");
	Если ИсточникОплаты <> Неопределено
		И ЗначениеЗаполнено(ИсточникОплаты.Значение)
	Тогда
		Если ИсточникОплаты.Значение.УИДЕГИСЗ = 6 Тогда
			СинонимНомераДоговора = "Номер соглашения страхования программы обслуживания";
		ИначеЕсли ИсточникОплаты.Значение.УИДЕГИСЗ = 4 Тогда
			СинонимНомераДоговора = "Номер договора с пациентом";
		ИначеЕсли ИсточникОплаты.Значение.УИДЕГИСЗ = 1 Тогда
			СинонимНомераДоговора = "Номер полиса ОМС";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СинонимНомераДоговора;
	
КонецФункции

Функция СинонимДатыНачалаДоговораПоВидуОплаты(ТаблицаПараметров)
	
	СинонимДатыНачала = "Дата начала действия договора";
	
	ИсточникОплаты = ТаблицаПараметров.Найти("ИсточникОплаты");
	Если ИсточникОплаты <> Неопределено
		И ЗначениеЗаполнено(ИсточникОплаты.Значение)
	Тогда
		Если ИсточникОплаты.Значение.УИДЕГИСЗ = 6 Тогда
			СинонимДатыНачала = "Дата начала действия соглашения страхования программы обслуживания";
		ИначеЕсли ИсточникОплаты.Значение.УИДЕГИСЗ = 4 Тогда
			СинонимДатыНачала = "Дата начала действия договора с пациентом"
		КонецЕсли;
	КонецЕсли;
	
	Возврат СинонимДатыНачала;
	
КонецФункции

Функция СинонимИсполнителя(ВидРЭМД, Узел)
	
	Синонимы = Новый Соответствие;
	
	Если ВидРЭМД = 174
		Или ВидРЭМД = 186
	Тогда
		Синонимы.Вставить("УИДИсполнителя",			"Исполнитель");
		Синонимы.Вставить("СНИЛСИсполнителя",		"СНИЛС исполнителя");
		Синонимы.Вставить("ДолжностьИсполнителя",	"Должность минздрава в должности исполнителя");
		Синонимы.Вставить("ФамилияИсполнителя",		"Фамилия исполнителя");
		Синонимы.Вставить("ИмяИсполнителя",			"Имя исполнителя");
	Иначе
		Синонимы.Вставить("УИДИсполнителя",			"Председатель медкомиссии");
		Синонимы.Вставить("СНИЛСИсполнителя",		"СНИЛС председателя медкомиссии");
		Синонимы.Вставить("ДолжностьИсполнителя",	"Должность минздрава в должности председателя медкомиссии");
		Синонимы.Вставить("ФамилияИсполнителя",		"Фамилия председателя медкомиссии");
		Синонимы.Вставить("ИмяИсполнителя",			"Имя председателя медкомиссии");
	КонецЕсли;
	
	Возврат Синонимы.Получить(Узел);
	
КонецФункции

Функция СтационарнаяКарта(ТипМедицинскойКарты)
	
	Возврат ТипМедицинскойКарты.УИДЕГИСЗ = 2;
	
КонецФункции

Функция ФактНаличияКонтактаСИнфекционнымиБольными(ИнфекционныйБольной, НаличиеКонтактаСИнфекционнымиБольными)
	
	Возврат ЗначениеЗаполнено(ИнфекционныйБольной) Или НаличиеКонтактаСИнфекционнымиБольными;
	
КонецФункции

#КонецОбласти

Функция ДанныеМакетаПоВидуДокумента(ВидРЭМД)
	
	ДанныеМакетаФормат1 = Новый Структура("Формат, Макет", 1, ПолучитьОбщийМакет("ОбщиеСекцииСЭМД_Формат1").ПолучитьТекст());
	ДанныеМакетаФормат2 = Новый Структура("Формат, Макет", 2, ПолучитьОбщийМакет("ОбщиеСекцииСЭМД_Формат2").ПолучитьТекст());
	
	ДанныеМакетов = Новый Соответствие;
	ДанныеМакетов.Вставить(4,	ДанныеМакетаФормат1);	// Медицинская справка о допуске к управлению транспортными средствами (CDA) Редакция 1
	ДанныеМакетов.Вставить(15,	ДанныеМакетаФормат1);	// Протокол инструментального исследования (CDA) Редакция 1
	ДанныеМакетов.Вставить(16,	ДанныеМакетаФормат1);	// Протокол консультации (CDA) Редакция 2
	ДанныеМакетов.Вставить(17,	ДанныеМакетаФормат1);	// Протокол лабораторного исследования (CDA) Редакция 2
	ДанныеМакетов.Вставить(40,	ДанныеМакетаФормат1);	// Направление на госпитализацию, восстановительное лечение, обследование, консультацию (CDA) Редакция 2
	ДанныеМакетов.Вставить(43,	ДанныеМакетаФормат1);	// Направление на госпитализацию, восстановительное лечение, обследование, консультацию (CDA) Редакция 2
	ДанныеМакетов.Вставить(50,	ДанныеМакетаФормат1);	// Медицинская справка (врачебное профессионально-консультативное заключение) (CDA) Редакция 1
	ДанныеМакетов.Вставить(63,	ДанныеМакетаФормат2);	// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	ДанныеМакетов.Вставить(64,	ДанныеМакетаФормат2);	// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ДанныеМакетов.Вставить(80,	ДанныеМакетаФормат2);	// Справка об отсутствии контактов с инфекционными больными. Справка о временной нетрудоспособности студента, учащегося техникума, профессионально-технического училища, о болезни, карантине и прочих причинах отсутствия ребенка, посещающего школу, детское дошкольное учреждение (Редакция 2)
	ДанныеМакетов.Вставить(81,	ДанныеМакетаФормат2);	// Справка об отсутствии контактов с инфекционными больными. Справка о временной нетрудоспособности студента, учащегося техникума, профессионально-технического училища, о болезни, карантине и прочих причинах отсутствия ребенка, посещающего школу, детское дошкольное учреждение (Редакция 2)
	ДанныеМакетов.Вставить(82,	ДанныеМакетаФормат2);	// Медицинское заключение о принадлежности несовершеннолетнего к медицинской группе для занятий физической культурой (CDA) Редакция 2
	ДанныеМакетов.Вставить(83,	ДанныеМакетаФормат2);	// Медицинское заключение об отсутствии противопоказаний к занятию определенными видами спорта (CDA) Редакция 2
	ДанныеМакетов.Вставить(84,	ДанныеМакетаФормат2);	// Медицинская справка в бассейн (CDA) Редакция 2
	ДанныеМакетов.Вставить(85,	ДанныеМакетаФормат2);	// Направление на консультацию и во вспомогательные кабинеты (CDA) Редакция 1
	ДанныеМакетов.Вставить(86,	ДанныеМакетаФормат2);	// Направление к месту лечения для получения медицинской помощи (CDA) Редакция 1
	ДанныеМакетов.Вставить(87,	ДанныеМакетаФормат2);	// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ДанныеМакетов.Вставить(88,	ДанныеМакетаФормат2);	// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	ДанныеМакетов.Вставить(92,	ДанныеМакетаФормат2);	// Эпикриз по законченному случаю амбулаторный (CDA) Редакция 4
	ДанныеМакетов.Вставить(99,	ДанныеМакетаФормат2);	// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ДанныеМакетов.Вставить(100,	ДанныеМакетаФормат2);	// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ДанныеМакетов.Вставить(102,	ДанныеМакетаФормат2);	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ДанныеМакетов.Вставить(103,	ДанныеМакетаФормат2);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) (Редакция 1)
	ДанныеМакетов.Вставить(116,	ДанныеМакетаФормат2);	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ДанныеМакетов.Вставить(119,	ДанныеМакетаФормат2);	// Протокол консультации (CDA) Редакция 4
	ДанныеМакетов.Вставить(121,	ДанныеМакетаФормат2);	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ДанныеМакетов.Вставить(122,	ДанныеМакетаФормат2);	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ДанныеМакетов.Вставить(129,	ДанныеМакетаФормат2);	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ДанныеМакетов.Вставить(148,	ДанныеМакетаФормат2);	// Рецепт на лекарственный препарат (CDA) Редакция 2
	ДанныеМакетов.Вставить(174,	ДанныеМакетаФормат2);	// Протокол инструментального исследования (СDA) Редакция 4
	ДанныеМакетов.Вставить(186,	ДанныеМакетаФормат2);	// Протокол лабораторного исследования (CDA) Редакция 5
	ДанныеМакетов.Вставить(194,	ДанныеМакетаФормат2);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	
	Возврат ДанныеМакетов.Получить(ВидРЭМД);
	
КонецФункции

Функция ЭлементКлассификатораПолаФизЛица(ПолПациента)
	
	КодПола = КодПола(ПолПациента);
	Если КодПола <> Неопределено Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПолаФизЛица(КодПола);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция КодПола(ПолПациента)
	
	КодыПолов = Новый Соответствие;
	КодыПолов.Вставить(Перечисления.ПолФизическихЛиц.Мужской,	1);
	КодыПолов.Вставить(Перечисления.ПолФизическихЛиц.Женский,	2);
	КодыПолов.Вставить(Перечисления.ПолФизическихЛиц.НеУказан,	3);
	
	Возврат КодыПолов.Получить(ПолПациента)
	
КонецФункции

Процедура ДополнитьДаннымиИсточниковОплаты(ДанныеЭМД, ТаблицаПараметров, Пациент, МедицинскийДокумент)
	
	Если ДанныеЭМД.Получить("ВидРЭМД") = 121 Тогда
		// Не обязательная секция.
		Возврат;
	КонецЕсли;
	
	ДанныеИсточниковОплаты = Новый Соответствие;
	
	ДанныеДоговора = Новый Структура("ТипПолиса, Номер, Серия, ДатаНачала, ДатаОкончания");
	ДоговорСКонтрагентом = ТаблицаПараметров.Найти("ДоговорСКонтрагентом", "localid");
	ДокументОплаты = ТаблицаПараметров.Найти("ДокументОплаты", "localid");
	Если ЗначениеЗаполнено(ДокументОплаты) Тогда
		Если ТипЗнч(ДокументОплаты.Значение) = Тип("СправочникСсылка.СтраховыеПолисы") Тогда
			Договор = ДокументОплаты.Значение;
			ДанныеДоговора.ТипПолиса	 = Договор.КлассификаторВидовПолисовРЭМД;
			ДанныеДоговора.Серия		 = Договор.Серия;
			ДанныеДоговора.Номер		 = Договор.Номер;
			ДанныеДоговора.ДатаНачала	 = Договор.СрокДействияНачало;
			ДанныеДоговора.ДатаОкончания = Договор.СрокДействия;
			ИНН = Пациент.ИНН;
			
			// Средства обязательного медицинского страхования
			ИдентификаторИсточникаОплаты = 1;
			
		ИначеЕсли ТипЗнч(ДокументОплаты.Значение) = Тип("ДокументСсылка.ДоговорСКлиентом") Тогда
			Договор = ДокументОплаты.Значение;
			ДанныеДоговора.Номер		 = Договор.Номер;
			ДанныеДоговора.ДатаНачала	 = Договор.Дата;
			ДанныеДоговора.ДатаОкончания = Договор.ДатаОкончания;
			ИНН = Пациент.ИНН;
			
			// Средства пациента
			ИдентификаторИсточникаОплаты = 4;
			
		ИначеЕсли ТипЗнч(ДокументОплаты.Значение) = Тип("СправочникСсылка.СоглашенияСтрахования") Тогда
			Договор = ДокументОплаты.Значение;
			ДанныеДоговора.Номер		 = Договор.НомерДоговора;
			ДанныеДоговора.ДатаНачала	 = Договор.ДатаНачала;
			ДанныеДоговора.ДатаОкончания = Договор.ДатаОкончания;
			
			Контрагент = Договор.Владелец;
			ИНН = ?(ЗначениеЗаполнено(Контрагент), Контрагент.ИНН, Неопределено);
			
			// Средства третьих юридических лиц
			ИдентификаторИсточникаОплаты = 6;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(ДоговорСКонтрагентом) Тогда
		ДоговорСКлиентом = ТаблицаПараметров.Найти("ДоговорСКлиентом", "localid");
		Если ДоговорСКлиентом = Неопределено Тогда
			Возврат;
		Иначе
			Договор = ДоговорСКлиентом.Значение;
			ДанныеДоговора.Номер		 = Договор.Номер;
			ДанныеДоговора.ДатаНачала	 = Договор.Дата;
			ДанныеДоговора.ДатаОкончания = Договор.ДатаОкончания;
			ИНН = Пациент.ИНН;
			
			// Средства пациента
			ИдентификаторИсточникаОплаты = 4;
		КонецЕсли;
	Иначе
		
		Договор = ДоговорСКонтрагентом.Значение;
		ДанныеДоговора.Номер		 = Договор.НомерДоговора;
		ДанныеДоговора.ДатаНачала	 = Договор.ДатаНачала;
		ДанныеДоговора.ДатаОкончания = Договор.ДатаОкончания;
		
		Контрагент = ТаблицаПараметров.Найти("Контрагент", "localid").Значение;
		ИНН = ?(ЗначениеЗаполнено(Контрагент), Контрагент.ИНН, Неопределено);
		
		// Средства третьих юридических лиц
		ИдентификаторИсточникаОплаты = 6;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДоговора.ДатаОкончания) Тогда
		ДатаОкончанияДоговора = ДанныеДоговора.ДатаОкончания;
	ИначеЕсли ИдентификаторИсточникаОплаты = 1 Тогда
		ДатаОкончанияДоговора = Неопределено;
	Иначе
		ДатаОкончанияДоговора = ДобавитьМесяц(ДанныеДоговора.ДатаНачала, 12);
	КонецЕсли;
	
	Если ИдентификаторИсточникаОплаты = 1 Тогда
		ДанныеИсточниковОплаты.Вставить("ТипПолиса",	ВидПолисаОМС(ДанныеДоговора.ТипПолиса.УИДЕГИСЗ));
		ДанныеИсточниковОплаты.Вставить("СерияПолиса",	ДанныеДоговора.Серия);
	КонецЕсли;
	
	ДанныеИсточниковОплаты.Вставить("ТипДокументаОснования",		 ТипДокументаОснованияДляИсточникаОплаты());
	ДанныеИсточниковОплаты.Вставить("НомерДоговора",				 ДанныеДоговора.Номер);
	ДанныеИсточниковОплаты.Вставить("ИНН",							 ИНН);
	ДанныеИсточниковОплаты.Вставить("ДатаНачалаДействияДоговора",	 Формат(ДанныеДоговора.ДатаНачала, "ДФ=yyyyMMdd"));
	ДанныеИсточниковОплаты.Вставить("ДатаОкончанияДействияДоговора", Формат(ДатаОкончанияДоговора, "ДФ=yyyyMMdd"));
	ДанныеИсточниковОплаты.Вставить("ИсточникОплаты",				 ИсточникОплатыПоКлассификатору(ИдентификаторИсточникаОплаты));
	
	Если Контрагент <> Неопределено Тогда
		ДанныеИсточниковОплаты.Вставить("Контрагент",			Новый Структура("Наименование, Идентификатор", Контрагент.НаименованиеПолное));
		ДанныеИсточниковОплаты.Вставить("КонтактыКонтрагента",	КонтактыОбъекта(Контрагент));
		ДанныеИсточниковОплаты.Вставить("АдресКонтрагента",		АдресОрганизации(Контрагент));
	КонецЕсли;
	
	ДополнитьТаблицуЗначениями(ДанныеИсточниковОплаты, ТаблицаПараметров);
	
КонецПроцедуры

Процедура ДополнитьДаннымиПриглашенногоКонсультанта(ДанныеЭМД, ТаблицаПараметров)
	
	ДанныеПриглашенногоКонсультанта = Новый Соответствие;
	
	ДанныеПриглашенногоКонсультанта.Вставить("ДатаПодписиДокументаПриглашеннымКонсультантом",		 ДанныеЭМД.Получить("ДатаПодписиДокументаЛицаПридавшегоЮрСилу"));
	ДанныеПриглашенногоКонсультанта.Вставить("ОрганизацияПриглашенногоКонсультанта",				 ДанныеЭМД.Получить("ОрганизацияЛицаПридавшегоЮрСилу"));
	ДанныеПриглашенногоКонсультанта.Вставить("OIDМедицинскойОрганизацииПриглашенногоКонсультанта", ДанныеЭМД.Получить("OIDМедицинскойОрганизацииЛицаПридавшегоЮрСилу"));
	ДанныеПриглашенногоКонсультанта.Вставить("НаименованиеОрганизацииПриглашенногоКонсультанта",	 ДанныеЭМД.Получить("НаименованиеОрганизацииЛицаПридавшегоЮрСилу"));
	ДанныеПриглашенногоКонсультанта.Вставить("КонтактыОрганизацииПриглашенногоКонсультанта",		 ДанныеЭМД.Получить("КонтактыОрганизацииЛицаПридавшегоЮрСилу"));
	ДанныеПриглашенногоКонсультанта.Вставить("АдресОрганизацииПриглашенногоКонсультанта",			 ДанныеЭМД.Получить("АдресОрганизацииЛицаПридавшегоЮрСилу"));
	
	СтрокиПриглашенногоКонсультанта = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", "ПриглашенныйКонсультант"));
	СтрокиДолжностиПриглашенногоКонсультанта = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", "ДолжностьПриглашенногоКонсультанта"));
	
	Если СтрокиПриглашенногоКонсультанта.Количество() = 0
		Или СтрокиДолжностиПриглашенногоКонсультанта.Количество() = 0
	Тогда
		ДанныеПриглашенногоКонсультанта.Вставить("УИДПриглашенногоКонсультанта",		 ДанныеЭМД.Получить("УИДЛицаПридавшегоЮрСилу"));
		ДанныеПриглашенногоКонсультанта.Вставить("СНИЛСПриглашенногоКонсультанта",	 ДанныеЭМД.Получить("СНИЛСЛицаПридавшегоЮрСилу"));
		ДанныеПриглашенногоКонсультанта.Вставить("ДолжностьПриглашенногоКонсультанта", ДанныеЭМД.Получить("ДолжностьЛицаПридавшегоЮрСилу"));
		ДанныеПриглашенногоКонсультанта.Вставить("АдресПриглашенногоКонсультанта",	 ДанныеЭМД.Получить("АдресЛицаПридавшегоЮрСилу"));
		ДанныеПриглашенногоКонсультанта.Вставить("КонтактыПриглашенногоКонсультанта",	 ДанныеЭМД.Получить("КонтактыЛицаПридавшегоЮрСилу"));
		ДанныеПриглашенногоКонсультанта.Вставить("ФамилияПриглашенногоКонсультанта",	 ДанныеЭМД.Получить("ФамилияЛицаПридавшегоЮрСилу"));
		ДанныеПриглашенногоКонсультанта.Вставить("ИмяПриглашенногоКонсультанта",		 ДанныеЭМД.Получить("ИмяЛицаПридавшегоЮрСилу"));
		ДанныеПриглашенногоКонсультанта.Вставить("ОтчествоПриглашенногоКонсультанта",	 ДанныеЭМД.Получить("ОтчествоЛицаПридавшегоЮрСилу"));
	Иначе
		
		ПриглашенныйКонсультант				= СтрокиПриглашенногоКонсультанта[0].Значение;
		УИДПриглашенногоКонсультанта		= Строка(ПриглашенныйКонсультант.УникальныйИдентификатор());
		СНИЛСПриглашенногоКонсультанта		= СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(ПриглашенныйКонсультант.СНИЛС);
		ДолжностьПриглашенногоКонсультанта	= СтрокиДолжностиПриглашенногоКонсультанта[0].Значение;
		АдресПриглашенногоКонсультанта		= СтруктураАдресаОбъекта(ПриглашенныйКонсультант, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
		КонтактыПриглашенногоКонсультанта	= КонтактыОбъекта(ПриглашенныйКонсультант);
		
		ДанныеПриглашенногоКонсультанта.Вставить("УИДПриглашенногоКонсультанта",		 УИДПриглашенногоКонсультанта);
		ДанныеПриглашенногоКонсультанта.Вставить("СНИЛСПриглашенногоКонсультанта",	 СНИЛСПриглашенногоКонсультанта);
		ДанныеПриглашенногоКонсультанта.Вставить("ДолжностьПриглашенногоКонсультанта", ДолжностьПриглашенногоКонсультанта);
		ДанныеПриглашенногоКонсультанта.Вставить("АдресПриглашенногоКонсультанта",	 АдресПриглашенногоКонсультанта);
		ДанныеПриглашенногоКонсультанта.Вставить("КонтактыПриглашенногоКонсультанта",	 КонтактыПриглашенногоКонсультанта);
		ДанныеПриглашенногоКонсультанта.Вставить("ФамилияПриглашенногоКонсультанта",	 ПриглашенныйКонсультант.Фамилия);
		ДанныеПриглашенногоКонсультанта.Вставить("ИмяПриглашенногоКонсультанта",		 ПриглашенныйКонсультант.Имя);
		ДанныеПриглашенногоКонсультанта.Вставить("ОтчествоПриглашенногоКонсультанта",	 ПриглашенныйКонсультант.Отчество);
	КонецЕсли;
	
	ДополнитьТаблицуЗначениями(ДанныеПриглашенногоКонсультанта, ТаблицаПараметров);
	
КонецПроцедуры

Функция ИсточникОплатыПоКлассификатору(УИДЕГИСЗ = 4)
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ИсточникОплатыПоКлассификатору(УИДЕГИСЗ);
	
КонецФункции

Функция ТипДокументаОснованияДляИсточникаОплаты()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипДокументаОснованияДляИсточникаОплаты(3);
	
КонецФункции

Функция ПолучитьРольПредседателяМедкомиссии()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.РольСотрудникаПриПодписанииМД(14);
	
КонецФункции

Функция LocalIdТипаСобытияПоВидуРЭМД(ВидРЭМД)
	
	// Протокол инструментального исследования (CDA) Редакция 1
	Если ВидРЭМД = 15 Тогда
		Возврат "МетодИнструментальногоИсследования";
		
	// Протокол консультации (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 16 Тогда
		Возврат "ВидКонсультации";
		
	// Протокол телемедицинской консультации (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 40 Тогда
		Возврат "ВидКонсультации";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипСобытияПоВидуРЭМД(ВидРЭМД)
	
	// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	Если ВидРЭМД = 88 Тогда
		Возврат ТипСобытияПоРЭМД_88();
	// Эпикриз по законченному случаю амбулаторный редакция 4
	ИначеЕсли ВидРЭМД = 92 Тогда
		Возврат ТипСобытияПоРЭМД_92();
	// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 99 Тогда
		Возврат ТипСобытияПоРЭМД_99();
	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 102 Тогда
		Возврат ТипСобытияПоРЭМД_102();
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) (Редакция 1)
	ИначеЕсли ВидРЭМД = 103 Тогда
		Возврат ТипСобытияПоРЭМД_103();
	// Протокол консультации (CDA) Редакция 4
	ИначеЕсли ВидРЭМД = 119 Тогда
		Возврат ТипСобытияПоРЭМД_119();
	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ИначеЕсли ВидРЭМД = 121 Тогда
		Возврат ТипСобытияПоРЭМД_121();
	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 122 Тогда
		Возврат ТипСобытияПоРЭМД_122();
	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ИначеЕсли ВидРЭМД = 129 Тогда
		Возврат ТипСобытияПоРЭМД_129();
	// Рецепт на лекарственный препарат (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 148 Тогда
		Возврат ТипСобытияПоРЭМД_148();
	// Протокол инструментального исследования (СDA) Редакция 4
	ИначеЕсли ВидРЭМД = 174 Тогда
		Возврат ТипСобытияПоРЭМД_174();
	// Протокол лабораторного исследования (CDA) Редакция 5
	ИначеЕсли ВидРЭМД = 186 Тогда
		Возврат ТипСобытияПоРЭМД_186();
	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	ИначеЕсли ВидРЭМД = 194 Тогда
		Возврат ТипСобытияПоРЭМД_194();
	КонецЕсли;
	
КонецФункции

Функция ТипСобытияПоРЭМД_88()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(5);
	
КонецФункции

Функция ТипСобытияПоРЭМД_92()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(5);
	
КонецФункции

Функция ТипСобытияПоРЭМД_99()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(5);
	
КонецФункции

Функция ТипСобытияПоРЭМД_102()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(5);
	
КонецФункции

Функция ТипСобытияПоРЭМД_103()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(5);
	
КонецФункции

Функция ТипСобытияПоРЭМД_119()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(1);
	
КонецФункции

Функция ТипСобытияПоРЭМД_121()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(1);
	
КонецФункции

Функция ТипСобытияПоРЭМД_122()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(14);
	
КонецФункции

Функция ТипСобытияПоРЭМД_129()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(14);
	
КонецФункции

Функция ТипСобытияПоРЭМД_148()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(58);
	
КонецФункции

Функция ТипСобытияПоРЭМД_174()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(3);
	
КонецФункции

Функция ТипСобытияПоРЭМД_186()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(4);
	
КонецФункции

Функция ТипСобытияПоРЭМД_194()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипСобытияПоРЭМД(5);
	
КонецФункции

Функция ФормаОказанияМедПомощи(ДанныеЭМД)
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ФормаОказанияМедПомощи(1);
	
КонецФункции

Функция ВидМедицинскойПомощи(ДанныеЭМД)
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидМедицинскойПомощи(3);
	
КонецФункции

Функция УсловияОказанияМедицинскойПомощи(ДанныеЭМД)
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.УсловияОказанияМедицинскойПомощи(3);
	
КонецФункции

Функция ТипМедицинскойКарты(ДанныеЭМД, МедицинскаяКарта)
	
	Если МедицинскаяКарта.ВидКарты.ТипКарты = Перечисления.ТипыМедицинскихКарт.Амбулаторная Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипМедицинскойКарты(1); // Амбулаторная медицинская карта
	ИначеЕсли МедицинскаяКарта.ВидКарты.ТипКарты = Перечисления.ТипыМедицинскихКарт.Стационар Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипМедицинскойКарты(2); // Стационарная медицинская карта
	Иначе
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипМедицинскойКарты(3); // Иная медицинская карта
	КонецЕсли;
	
КонецФункции

Функция ВидМестаЖительстваПоУИДЕГИСЗ(УИДЕГИСЗ)
	
	Если ЗначениеЗаполнено(УИДЕГИСЗ) Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидМестаЖительстваПоУИДЕГИСЗ(УИДЕГИСЗ);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипАдресаПациентаПоВидуАдреса(ВидАдреса)
	
	КодТипаАдреса = КодТипаАдреса(ВидАдреса);
	Если КодТипаАдреса <> Неопределено Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ТипАдресаПациентаПоВидуАдреса(КодТипаАдреса);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция КодТипаАдреса(ВидАдреса)
	
	КодыТиповАдресов = Новый Соответствие;
	КодыТиповАдресов.Вставить(Справочники.ВидыКонтактнойИнформации.АдресЮридический, 1);
	КодыТиповАдресов.Вставить(Справочники.ВидыКонтактнойИнформации.АдресФактический, 3);
	
	Возврат КодыТиповАдресов.Получить(ВидАдреса)
	
КонецФункции

Функция РегионПоКлассификаторуСубъектов(ЗначенияПолей)
	
	Попытка
		Регион = РаботаСАдресами.РегионАдресаКонтактнойИнформации(ЗначенияПолей);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторыМинЗдрава.Ссылка КАК Ссылка,
		|	КлассификаторыМинЗдраваАтрибуты.Значение КАК Значение
		|ИЗ
		|	Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторыМинЗдрава.Атрибуты КАК КлассификаторыМинЗдраваАтрибуты
		|		ПО (КлассификаторыМинЗдрава.ВидКлассификатора = &ВидКлассификатора)
		|			И (НЕ КлассификаторыМинЗдрава.Архив)
		|			И (КлассификаторыМинЗдраваАтрибуты.Ссылка = КлассификаторыМинЗдрава.Ссылка)
		|			И (КлассификаторыМинЗдраваАтрибуты.Ключ = ""CODE_FNS"")
		|			И ((ВЫРАЗИТЬ(КлассификаторыМинЗдраваАтрибуты.Значение КАК СТРОКА(10))) = &КодФНС)";
	
	Запрос.УстановитьПараметр("ВидКлассификатора", Перечисления.ВидыКлассификаторовМинЗдрава.СубъектыРФ);
	Запрос.УстановитьПараметр("КодФНС", РаботаСАдресами.КодРегиона(Регион));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьПустоеЗначениеУзла(Узел, УзлыДляУдаления, ЗначениеПустогоЗначения, СохранятьДочерниеУзлы, СохранятьТипПриПустомЗначении)
	
	Если ТипЗнч(Узел) = Тип("ТекстDOM") Тогда
		ОбрабатываемыйУзел = Узел.РодительскийУзел;
	Иначе
		ОбрабатываемыйУзел = Узел;
	КонецЕсли;
	
	Если Не СохранятьДочерниеУзлы Тогда
		Для Каждого ДочернийУзел Из ОбрабатываемыйУзел.ДочерниеУзлы Цикл
			ДобавитьУзелДляУдаления(УзлыДляУдаления, ДочернийУзел);
		КонецЦикла;
	КонецЕсли;
	
	мУзлыАтрибутыУзла = Новый Массив;
	Для Каждого УзелАтрибута Из ОбрабатываемыйУзел.Атрибуты Цикл
		Если Не СохранятьТипПриПустомЗначении
			Или УзелАтрибута.ИмяУзла <> "xsi:type"
		Тогда
			мУзлыАтрибутыУзла.Добавить(УзелАтрибута);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УзелАтрибутаУзла Из мУзлыАтрибутыУзла Цикл
		ОбрабатываемыйУзел.УдалитьУзелАтрибута(УзелАтрибутаУзла);
	КонецЦикла;
	
	ОбрабатываемыйУзел.УстановитьАтрибут("nullFlavor", ЗначениеПустогоЗначения);
	
КонецПроцедуры

Функция ВидПолисаОМС(УИДЕГИСЗ)
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ВидыПолисаОМС);
	
КонецФункции

Функция ВидыДокументаБезДатыПодписиАвтора()
	
	ВидыДокументаБезДатыПодписиАвтора = Новый Массив;
	ВидыДокументаБезДатыПодписиАвтора.Добавить(63);		// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(64);		// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(85);		// Направление на консультацию и во вспомогательные кабинеты (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(87);		// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(100);	// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ВидыДокументаБезДатыПодписиАвтора.Добавить(102);	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(103);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(116);	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(119);	// Протокол консультации (CDA) Редакция 4
	ВидыДокументаБезДатыПодписиАвтора.Добавить(121);	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ВидыДокументаБезДатыПодписиАвтора.Добавить(122);	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ВидыДокументаБезДатыПодписиАвтора.Добавить(129);	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиАвтора.Добавить(147);	// Эпикриз в стационаре выписной (CDA) Редакция 5
	ВидыДокументаБезДатыПодписиАвтора.Добавить(148);	// Рецепт на лекарственный препарат (CDA) Редакция 2
	ВидыДокументаБезДатыПодписиАвтора.Добавить(174);	// Протокол инструментального исследования (СDA) Редакция 4
	ВидыДокументаБезДатыПодписиАвтора.Добавить(186);	// Протокол лабораторного исследования (CDA) Редакция 5
	ВидыДокументаБезДатыПодписиАвтора.Добавить(194);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	
	Возврат ВидыДокументаБезДатыПодписиАвтора;
	
КонецФункции

Функция ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу()
	
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу = Новый Массив;
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(63);	// Медицинское заключение об отсутствии медицинских противопоказаний к владению оружием (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(64);	// Медицинское заключение об отсутствии в организме человека наркотических средств, психотропных веществ и их метаболитов (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(85);	// Направление на консультацию и во вспомогательные кабинеты (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(87);	// Медицинская справка о состоянии здоровья ребенка, отъезжающего в организацию отдыха детей и их оздоровления (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(100);	// Справка об оплате медицинских услуг для предоставления в налоговые органы Российской Федерации (Редакция 1)
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(102);	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(103);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(116);	// Уведомление о выявлении противопоказаний или аннулировании медицинских заключений к владению оружием (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(119);	// Протокол консультации (CDA) Редакция 4
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(121);	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(122);	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(129);	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(147);	// Эпикриз в стационаре выписной (CDA) Редакция 5
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(148);	// Рецепт на лекарственный препарат (CDA) Редакция 2
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(174);	// Протокол инструментального исследования (СDA) Редакция 4
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(186);	// Протокол лабораторного исследования (CDA) Редакция 5
	ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу.Добавить(194);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	
	Возврат ВидыДокументаБезДатыПодписиЛицаПридавшегоЮрСилу;
	
КонецФункции

Функция ВидыДокументовССекциейИсполнителя()
	
	ВидыДокументовССекциейИсполнителя = Новый Массив;
	ВидыДокументовССекциейИсполнителя.Добавить(85);		// Направление на консультацию и во вспомогательные кабинеты (CDA) Редакция 1
	ВидыДокументовССекциейИсполнителя.Добавить(88);		// Медицинская справка (для выезжающего за границу) (CDA) Редакция 1
	ВидыДокументовССекциейИсполнителя.Добавить(99);		// Выписка из протокола врачебной комиссии (CDA) Редакция 1
	ВидыДокументовССекциейИсполнителя.Добавить(102);	// Справка об отказе в направлении на медико-социальную экспертизу (CDA) Редакция 1
	ВидыДокументовССекциейИсполнителя.Добавить(103);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 1
	ВидыДокументовССекциейИсполнителя.Добавить(119);	// Протокол консультации (CDA) Редакция 4
	ВидыДокументовССекциейИсполнителя.Добавить(121);	// Направление на медико-социальную экспертизу (CDA) Редакция 6
	ВидыДокументовССекциейИсполнителя.Добавить(122);	// Сведения о результатах диспансеризации или профилактического медицинского осмотра (CDA) Редакция 2
	ВидыДокументовССекциейИсполнителя.Добавить(129);	// Эпикриз по результатам диспансеризации / профилактического медицинского осмотра (CDA) Редакция 1
	ВидыДокументовССекциейИсполнителя.Добавить(174);	// Протокол инструментального исследования (СDA) Редакция 4
	ВидыДокументовССекциейИсполнителя.Добавить(186);	// Протокол лабораторного исследования (CDA) Редакция 5
	ВидыДокументовССекциейИсполнителя.Добавить(194);	// Медицинское заключение по результатам предварительного (периодического) медицинского осмотра (обследования) (CDA) Редакция 2
	
	Возврат ВидыДокументовССекциейИсполнителя;
	
КонецФункции

Процедура ДополнитьДаннымиИсполнителей(ДанныеСобытия, Исполнитель, ДолжностьМЗ, ДанныеЭМД)
	
	// Исполнитель
	ДанныеСобытия.Вставить("РольСотрудникаПриПодписанииМД", ПолучитьРольПредседателяМедкомиссии());
	
	ДанныеСобытия.Вставить("УИДИсполнителя",		Строка(Исполнитель.УникальныйИдентификатор()));
	ДанныеСобытия.Вставить("СНИЛСИсполнителя",		СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Исполнитель.СНИЛС));
	ДанныеСобытия.Вставить("ДолжностьИсполнителя",	ДолжностьМЗ);
	ДанныеСобытия.Вставить("АдресИсполнителя",		СтруктураАдресаОбъекта(Исполнитель, Справочники.ВидыКонтактнойИнформации.АдресЮридический));
	ДанныеСобытия.Вставить("КонтактыИсполнителя",	КонтактыОбъекта(Исполнитель));
	ДанныеСобытия.Вставить("ФамилияИсполнителя",	Исполнитель.Фамилия);
	ДанныеСобытия.Вставить("ИмяИсполнителя",		Исполнитель.Имя);
	ДанныеСобытия.Вставить("ОтчествоИсполнителя",	Исполнитель.Отчество);
	
	ДанныеСобытия.Вставить("OIDМедицинскойОрганизацииИсполнителя",	ДанныеЭМД.Получить("OIDМедицинскойОрганизации"));
	ДанныеСобытия.Вставить("НаименованиеОрганизацииИсполнителя",	ДанныеЭМД.Получить("НаименованиеОрганизации"));
	ДанныеСобытия.Вставить("КонтактыОрганизацииИсполнителя",		ДанныеЭМД.Получить("КонтактыОрганизации"));
	ДанныеСобытия.Вставить("АдресОрганизацииИсполнителя",			ДанныеЭМД.Получить("АдресОрганизации"));
	
	// Другие члены медкомиссии
	
КонецПроцедуры

Функция ВидМедицинскойКартыПоКлассификатору(ДанныеЭМД, МедицинскаяКарта)
	
	Если МедицинскаяКарта.ВидКарты.ТипКарты = Перечисления.ТипыМедицинскихКарт.Стационар Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидМедицинскойДокументации(94); // Медицинская карта пациента, получающего медицинскую помощь в стационарных условиях, в условиях дневного стационара
	ИначеЕсли МедицинскаяКарта.ВидКарты.ТипКарты = Перечисления.ТипыМедицинскихКарт.Стоматологическая Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидМедицинскойДокументации(61); // Медицинская карта стоматологического больного
	ИначеЕсли МедицинскаяКарта.ВидКарты.ТипКарты = Перечисления.ТипыМедицинскихКарт.ГинекологическаяБеременной Тогда
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидМедицинскойДокументации(62); // Индивидуальная карта беременной и родильницы
	Иначе
		Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидМедицинскойДокументации(41); // Медицинская карта пациента, получающего медицинскую помощь в амбулаторных условиях
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел)
	
	Если УзлыДляУдаления.Найти(Узел) = Неопределено Тогда
		УзлыДляУдаления.Добавить(Узел);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТекстовоеСодержаниеУзла(Узел, ТаблицаПараметров, СоответствиеВышестоящихLocalId, НезаполненныеПараметры = Неопределено, РодительскийУзел = Неопределено, УзлыДляУдаления = Неопределено, СтрокаГруппирующегоПоля = Неопределено)
	
	Результат = ПолучитьРезультат(Узел.ЗначениеУзла, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
	Если ЗначениеЗаполнено(Результат) Тогда
		Узел.ЗначениеУзла = Результат;
	ИначеЕсли РодительскийУзел <> Неопределено
		И (СтрНайти(Узел.ЗначениеУзла, "$") > 0
			Или Лев(Узел.ЗначениеУзла,1) = "*"
			Или Лев(Узел.ЗначениеУзла,1) = "%")
	Тогда
		ОбработатьУзелБезЗаполненногоПараметра(Узел, РодительскийУзел, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ОчиститьУзелОтАтрибутов(Узел)
	
	Узел.УдалитьАтрибут("Множественное");
	Узел.УдалитьАтрибут("Обязательное");
	Узел.УдалитьАтрибут("localid");
	Узел.УдалитьАтрибут("ТипДанных");
	Узел.УдалитьАтрибут("localidСиноним");
	Узел.УдалитьАтрибут("УсловиеИспользования");
	Узел.УдалитьАтрибут("ПустоеЗначение");
	Узел.УдалитьАтрибут("Классификация");
	Узел.УдалитьАтрибут("Формат");
	Узел.УдалитьАтрибут("Синоним");
	Узел.УдалитьАтрибут("ДопустимыеЗначения");
	Узел.УдалитьАтрибут("УсловиеОбязательное");
	Узел.УдалитьАтрибут("СохранятьДочерниеУзлы");
	Узел.УдалитьАтрибут("СохранятьТипПриПустомЗначении");
	Узел.УдалитьАтрибут("ВозможноЗаполнениеИзТаблицыДиагнозов");
	
КонецФункции

Функция ПолучитьРезультат(Сущность, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля = Неопределено, ФорматнаяСтрока = Неопределено)
	
	Результат = Неопределено;
	Если СтрНайти(Сущность, "$") > 0 Тогда
		
		// Зарезервированный
		ЗарезервированноеСлово = СтрРазделить(Сущность, "$", Ложь)[0];
		ЗарезервированноеСлово = Прав(ЗарезервированноеСлово, СтрДлина(ЗарезервированноеСлово)-1);
		
		ПараметрЗарезервированноегоСлова = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", ЗарезервированноеСлово));
		Если ПараметрЗарезервированноегоСлова.Количество() = 0 Тогда
			Результат = Неопределено;
		Иначе
			ЗначениеПараметра = ПараметрЗарезервированноегоСлова[0].Значение;
			Результат = ОпределитьЧислоПоЗарезервированномуСловуОрганизация(Сущность, ЗначениеПараметра);
		КонецЕсли;
		
	ИначеЕсли Лев(Сущность,1) = "*" Тогда
		
		// Функция
		Результат = ВычислитьФункцию(Сущность, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
		
	ИначеЕсли Лев(Сущность,1) = "%" Тогда
		
		// Значение
		ЗначениеПоLocalIdИзСтроки = ПолучитьЗначениеLocalIdИзСтроки(Сущность, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
		
		Попытка
			Результат = Формат(ЗначениеПоLocalIdИзСтроки, ФорматнаяСтрока);
		Исключение
			Результат = Строка(ЗначениеПоLocalIdИзСтроки);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВычислитьФункцию(Сущность, ТаблицаПараметров = Неопределено, СоответствиеВышестоящихLocalId = Неопределено, СтрокаГруппирующегоПоля = Неопределено)
	
	Результат = Неопределено;
	
	ИсходноеИмяФункции = Прав(Сущность, СтрДлина(Сущность)-1);
	СтрокаАргументов = "";
	ИмяФункции = "";
	
	Если СтрНайти(Сущность, "(") > 0 Тогда
		ПозицияОткрывающейСкобки = СтрНайти(Сущность, "(");
		ПозицияЗакрывающейСкобки = СтрНайти(Сущность, ")", НаправлениеПоиска.СКонца);
		СтрокаАргументов = Сред(Сущность, ПозицияОткрывающейСкобки + 1, ПозицияЗакрывающейСкобки - ПозицияОткрывающейСкобки - 1);
		Если ПозицияОткрывающейСкобки > 1 Тогда
			ОстальнаяЧастьФункции = "";
			Если СтрДлина(ИсходноеИмяФункции) > ПозицияЗакрывающейСкобки Тогда
				ОстальнаяЧастьФункции = Прав(ИсходноеИмяФункции, СтрДлина(ИсходноеИмяФункции) - ПозицияЗакрывающейСкобки + 1);
			КонецЕсли;
			ИмяФункции = СтрШаблон("%1(%2)%3", СокрЛП(Лев(ИсходноеИмяФункции, ПозицияОткрывающейСкобки-2)), "%1", ОстальнаяЧастьФункции);
		КонецЕсли;
	КонецЕсли;
	
	мСтрокАргументы = ПолучитьАргументыИзСтроки(СтрокаАргументов);
	мРезАргументы = Новый Массив;
	ЗначенияДляАргумента = Новый Соответствие;
	
	Для Каждого Аргумент Из мСтрокАргументы Цикл
		Если Лев(СокрЛП(Аргумент),1) = "%" Тогда
			ЗначениеИзСтроки = ПолучитьЗначениеLocalIdИзСтроки(СокрЛП(Аргумент), ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
		ИначеЕсли Лев(СокрЛП(Аргумент),1) = "*" Тогда
			ЗначениеИзСтроки = ВычислитьФункцию(СокрЛП(Аргумент), ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
		Иначе
			ЗначениеИзСтроки = Аргумент;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеИзСтроки) = Тип("Строка") Тогда
			ЗначениеИзСтроки = СтрЗаменить(СокрЛП(ЗначениеИзСтроки), """""", """");
			Если Лев(ЗначениеИзСтроки,1) = """" Тогда
				ЗначениеИзСтроки = Сред(ЗначениеИзСтроки, 2, СтрДлина(ЗначениеИзСтроки) - 2);
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияДляАргумента.Вставить(мСтрокАргументы.Найти(Аргумент), ЗначениеИзСтроки);
		мРезАргументы.Добавить(СтрШаблон("ЗначенияДляАргумента[%1]", мСтрокАргументы.Найти(Аргумент)));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяФункции) Тогда
		СтрокаФункции = СтрШаблон(ИмяФункции, СтрСоединить(мРезАргументы, ","));
	Иначе
		СтрокаФункции = ИсходноеИмяФункции;
	КонецЕсли;
	
	Выполнить(СтрШаблон("Результат = %1", СтрокаФункции));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАргументыИзСтроки(Знач СтрокаАргументов)
	
	Аргументы = Новый Массив;
	СтрокаАргументов = СокрЛП(СтрокаАргументов);
	
	Если ЗначениеЗаполнено(СтрокаАргументов) Тогда
		ЭлементыСтрокиАргументов = СтрРазделить(СтрокаАргументов, ",", Истина);
		Индекс = 0;
		Для Каждого ЭлементСтрокиАргументов Из ЭлементыСтрокиАргументов Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементСтрокиАргументов) Тогда
				Аргументы.Добавить(Неопределено);
			Иначе
				КоличествоОткрывающихСкобок = СтрЧислоВхождений(ЭлементСтрокиАргументов, "(");
				КоличествоЗакрывающихСкобок = СтрЧислоВхождений(ЭлементСтрокиАргументов, ")");
				
				ЧастиАргумента = Новый Массив;
				ЧастиАргумента.Добавить(ЭлементСтрокиАргументов);
				Пока КоличествоОткрывающихСкобок > КоличествоЗакрывающихСкобок
					И ЭлементыСтрокиАргументов.Количество() >= Индекс + 1
				Цикл
					ЧастьАргумента = ЭлементыСтрокиАргументов.Получить(Индекс + 1);
					ЭлементыСтрокиАргументов.Удалить(Индекс + 1);
					КоличествоЗакрывающихСкобок = КоличествоЗакрывающихСкобок + СтрЧислоВхождений(ЧастьАргумента, ")");
					ЧастиАргумента.Добавить(ЧастьАргумента);
				КонецЦикла;
				Аргументы.Добавить(СтрСоединить(ЧастиАргумента, ","));
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Аргументы;
	
КонецФункции

Функция ОпределитьЧислоПоЗарезервированномуСловуОрганизация(ПараметрОрганизация, Организация)
	
	OIDОрганизации = СокрЛП(Организация.МедицинскаяОрганизация.OIDОрганизации);
	ИдентификацияОбъекта = ПолучитьИдентификациюОбъекта(СтрРазделить(ПараметрОрганизация, "$", Ложь)[1]);
	
	Возврат СтрШаблон("%1.100.1.1.%2", OIDОрганизации, ИдентификацияОбъекта);
	
КонецФункции

Функция ПолучитьИдентификациюОбъекта(Наименование)
	
	Назначения = Новый Соответствие;
	Назначения.Вставить("МедСправка",				3);
	Назначения.Вставить("Пациент",					10);
	Назначения.Вставить("Медпомощь",				15);
	Назначения.Вставить("ИсторияБолезни",			16);
	Назначения.Вставить("СтационарнаяПомощь",		16);
	Назначения.Вставить("АмбулаторнаяПомощь",		17);
	Назначения.Вставить("АмбулаторнаяКарта",		17);
	Назначения.Вставить("НаборВерсий",				50);
	Назначения.Вставить("ЛабораторноеИсследование",	51);
	Назначения.Вставить("ВнешнийДокумент",			51);
	Назначения.Вставить("СвязанныйДокумент",		51);
	Назначения.Вставить("ЭМД",						51);
	Назначения.Вставить("ВитальныйПараметр",		52);
	Назначения.Вставить("ВыполненнаяУслуга",		52);
	Назначения.Вставить("Осложнение",				52);
	Назначения.Вставить("Направление",				59);
	Назначения.Вставить("Штрихкод",					66);
	Назначения.Вставить("Оборудование",				67);
	Назначения.Вставить("Сотрудник",				70);
	Назначения.Вставить("Терапевт",					70);
	Назначения.Вставить("Хирург",					71);
	Назначения.Вставить("Невролог",					72);
	Назначения.Вставить("Оториноларинголог",		73);
	Назначения.Вставить("Офтальмолог",				74);
	Назначения.Вставить("Гинеколог",				75);
	
	Возврат Назначения.Получить(Наименование);
	
КонецФункции

Процедура ЗаполнитьАтрибутыУзлаКлассификатора(Узел, Ссылка, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора, ЗначенияПараметров = Неопределено)
	
	Если ЗначенияПараметров = Неопределено Тогда
		ЗначенияПараметров = ИнтеграцияЕГИСЗСервер.ПолучитьЗначенияПараметровЭлементаКлассификатора(Ссылка);
		
		КорректныйCodeSystem = ПолучитьКорректныйCodeSystemПоВидуДокумента(ДанныеДляУзлаКлассификатора);
		Если ЗначениеЗаполнено(КорректныйCodeSystem) Тогда
			ЗначенияПараметров.codesystem = КорректныйCodeSystem;
		КонецЕсли;
		
		// В некоторых СЭМДах фиксированные версии классификаторов, подменяем значения атрибутов
		АтрибутыФиксированнойВерсииКлассификатора = ПолучитьАтрибутыФиксированнойВерсииКлассификатора(Ссылка, ДанныеДляУзлаКлассификатора);
		Если АтрибутыФиксированнойВерсииКлассификатора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияПараметров, АтрибутыФиксированнойВерсииКлассификатора);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого АтрибутУзла Из Узел.Атрибуты Цикл
		Если Лев(АтрибутУзла.ЗначениеУзла, 1) = "#" Тогда
			ЗначениеАтрибута = ЗначенияПараметров[НРег(СтрЗаменить(АтрибутУзла.ЗначениеУзла, "#", ""))];
			Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
				Узел.УстановитьАтрибут(АтрибутУзла.ИмяУзла, Строка(ЗначениеАтрибута));
			Иначе
				ДобавитьНезагруженныйКлассификатор(НезагруженныеКлассификаторы, ЗначенияПараметров.codesystem);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКорректныйCodeSystemПоВидуДокумента(ДанныеДляУзлаКлассификатора)
	
	Попытка
		СтруктураПоиска = Новый Структура("localid", ДанныеДляУзлаКлассификатора.localid);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	СтрокиCodeSystem = ДанныеДляУзлаКлассификатора.ДополнительныеДанные.КорректныеCodeSystem.НайтиСтроки(СтруктураПоиска);
	Если СтрокиCodeSystem.Количество() > 0 Тогда
		Возврат СтрокиCodeSystem[0].codesystem;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьАтрибутыУзлаСлужебногоКлассификатораПоИдентфикатору(Узел, НезагруженныеКлассификаторы)
	
	OID = Строка(Узел.ПолучитьАтрибут("codeSystem"));
	Идентификатор = Строка(Узел.ПолучитьАтрибут("code"));
	
	Если Не (НевычисляемоеЗначениеАтрибута(OID)
		И НевычисляемоеЗначениеАтрибута(Идентификатор))
	Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПараметров = ИнтеграцияЕГИСЗСервер.ПолучитьЗначенияПараметровЭлементаКлассификатораПоИдентификатору(OID, Идентификатор);
	Если ЗначенияПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого АтрибутУзла Из Узел.Атрибуты Цикл
		Если Лев(АтрибутУзла.ЗначениеУзла, 1) = "#" Тогда
			ЗначениеАтрибута = ЗначенияПараметров[НРег(СтрЗаменить(АтрибутУзла.ЗначениеУзла, "#", ""))];
			Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
				Узел.УстановитьАтрибут(АтрибутУзла.ИмяУзла, Строка(ЗначениеАтрибута));
			Иначе
				ДобавитьНезагруженныйКлассификатор(НезагруженныеКлассификаторы, OID);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// TODO: Если в итоге остались пустые значения атрибутов или значения #version/#codesystemname/#name — вызывать исключение, или добавлять в массив ошибок
	
КонецПроцедуры

Процедура ДобавитьНезагруженныйКлассификатор(НезагруженныеКлассификаторы, OIDКлассификатора)
	
	ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(OIDКлассификатора);
	
	Если ПараметрыСправочника.Свойство("ВидКлассификатора") Тогда
		Наименование = Строка(ПараметрыСправочника.ВидКлассификатора);
	Иначе
		Наименование = ПараметрыСправочника.Представление;
	КонецЕсли;
	
	Если НезагруженныеКлассификаторы.Найти(Наименование) = Неопределено Тогда
		НезагруженныеКлассификаторы.Добавить(Наименование);
	КонецЕсли;
	
КонецПроцедуры

Функция НевычисляемоеЗначениеАтрибута(ЗначениеАтрибута)
	
	Возврат ЗначениеЗаполнено(ЗначениеАтрибута)
			И Лев(ЗначениеАтрибута, 1) <> "*"
			И Лев(ЗначениеАтрибута, 1) <> "%"
			И Лев(ЗначениеАтрибута, 1) <> "$"
			И Лев(ЗначениеАтрибута, 1) <> "#";
	
КонецФункции

Функция ПолучитьЗначениеLocalIdИзСтроки(ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля = Неопределено)
	
	ТекущийLocalId = СокрЛП(ТекущийLocalId);
	LocalId = Неопределено;
	Реквизит = Неопределено;
	
	ЗначениеУзла = СтрЗаменить(ТекущийLocalId, "%", "");
	ПоКлассификацииПоля = СтрНайти(ТекущийLocalId, ".") <> 0 И СтрНайти(Врег(ТекущийLocalId), "КЛАССИФИКАЦИЯПОЛЯ") <> 0;
	
	Если ПоКлассификацииПоля Тогда
		ЗначенияСтроки = СтрРазделить(ЗначениеУзла, ".", Ложь);
		НовоеЗначениеСтроки = Новый Массив;
		Для Каждого ЗначениеСтроки Из ЗначенияСтроки Цикл
			Если СтрНайти(ВРег(ЗначениеСтроки), "КЛАССИФИКАЦИЯПОЛЯ") = 0 Тогда
				НовоеЗначениеСтроки.Добавить(ЗначениеСтроки);
			КонецЕсли;
		КонецЦикла;
		ЗначениеУзла = СтрСоединить(НовоеЗначениеСтроки, ".");
	КонецЕсли;
	
	Если СтрНайти(ЗначениеУзла, ".") > 0 Тогда
		LocalId = Лев(ЗначениеУзла, СтрНайти(ЗначениеУзла, ".") - 1);
		Реквизит = Прав(ЗначениеУзла, СтрДлина(ЗначениеУзла) - СтрДлина(LocalId) - 1);
	Иначе
		LocalId = ЗначениеУзла;
	КонецЕсли;
	
	СтрокаТаблицыСПараметром = Неопределено;
	
	Если СоответствиеВышестоящихLocalId <> Неопределено Тогда
		СтрокаТаблицыСПараметром = СоответствиеВышестоящихLocalId.Получить(LocalId);
	КонецЕсли;
	
	Если СтрокаТаблицыСПараметром = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("localid", LocalId);
		
		Если СтрокаГруппирующегоПоля <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаГруппирующегоПоля.Параметр) Тогда
				СтруктураПоиска.Вставить("ГруппирующееПоле", СтрокаГруппирующегоПоля.Параметр);
			Иначе
				СтруктураПоиска.Вставить("ГруппирующееПоле", ТаблицаПараметров.Индекс(СтрокаГруппирующегоПоля));
			КонецЕсли;
			СтруктураПоиска.Вставить("НомерСтрокиТаблицы", СтрокаГруппирующегоПоля.НомерСтрокиТаблицы);
		КонецЕсли;
		
		СтрокиТаблицыСПараметром = ТаблицаПараметров.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицыСПараметром.Количество() > 0 Тогда
			СтрокаТаблицыСПараметром = СтрокиТаблицыСПараметром[0];
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицыСПараметром = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПоКлассификацииПоля Тогда
		Если Реквизит <> Неопределено Тогда
			Попытка
				// Реквизит классификации поля
				ЗначениеАтрибута = Вычислить("СтрокаТаблицыСПараметром.КлассификацияПоля." + Реквизит);
			Исключение
				// Атрибут из тч
				КлассификацияПоля = СтрокаТаблицыСПараметром.КлассификацияПоля;
				Если Не ЗначениеЗаполнено(КлассификацияПоля) Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				СтрокиАтрибута = КлассификацияПоля.Атрибуты.НайтиСтроки(Новый Структура("Ключ", Реквизит));
				Если СтрокиАтрибута.Количество() > 0 Тогда
					ЗначениеАтрибута = СтрокиАтрибута[0].Значение;
				Иначе
					ЗначениеАтрибута = "";
				КонецЕсли;
			КонецПопытки;
		Иначе
			//Ссылка
			ЗначениеАтрибута = СтрокаТаблицыСПараметром.КлассификацияПоля;
		КонецЕсли;
	Иначе
		Если Реквизит <> Неопределено Тогда
			// Реквизит
			ЗначениеАтрибута = Неопределено;
			Попытка
				ЗначениеПараметра = СтрокаТаблицыСПараметром.Значение;
			Исключение КонецПопытки;
			
			Если ЗначениеПараметра <> Неопределено Тогда
				Попытка
					ЗначениеАтрибута = Вычислить("ЗначениеПараметра." + Реквизит);
				Исключение
					Попытка
						ЗначениеАтрибута = ЗначениеПараметра.Атрибуты.НайтиСтроки(Новый Структура("Ключ", Реквизит))[0].Значение;
					Исключение КонецПопытки;
				КонецПопытки;
			КонецЕсли;
		Иначе
			// Ссылка
			Если ТипЗнч(СтрокаТаблицыСПараметром.Значение) = Тип("Строка")
				И Не ЗарезервированныйLocalid(localid)
			Тогда
				ЗначениеАтрибута = ПолучитьЗначениеАтрибутаПоОбъединяющемуПолю(СтрокаТаблицыСПараметром, ТаблицаПараметров);
			Иначе
				ЗначениеАтрибута = СтрокаТаблицыСПараметром.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеАтрибута;
	
КонецФункции

Функция ПолучитьЗначениеАтрибутаПоОбъединяющемуПолю(СтрокаПараметра, ТаблицаПараметров)
	
	ЗначениеАтрибута = Новый Массив;
	ЗначениеАтрибута.Добавить(СтрокаПараметра.Значение);
	
	Если ЗначениеЗаполнено(СтрокаПараметра.Параметр) Тогда
		ЗначениеОбъединяющегоПоля = СтрокаПараметра.Параметр;
	Иначе
		ЗначениеОбъединяющегоПоля = ТаблицаПараметров.Индекс(СтрокаПараметра);
	КонецЕсли;
	
	СтрокиПоОбъединяющемуПолю = ТаблицаПараметров.НайтиСтроки(Новый Структура("ОбъединяющееПоле", ЗначениеОбъединяющегоПоля));
	
	Для Каждого Строка Из СтрокиПоОбъединяющемуПолю Цикл
		ЗначениеАтрибута.Добавить(Строка.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(ЗначениеАтрибута, ", ");
	
КонецФункции

#Область ТелоДокумента

Функция РекурсивныйОбходXML(XML, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, ДокументHTML, СписокLocalid, КлонированныеУзлы,
	НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры = Неопределено, РодительскийУзел = Неопределено, НезаполненныеТекстовыеСекции = Неопределено)
	
	СписокУзлов = XML.ДочерниеУзлы;
	Для Каждого Узел Из СписокУзлов Цикл
		
		Если ТипЗнч(Узел) = Тип("КомментарийDOM") Тогда
			ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Узел) <> Тип("ЭлементDOM") Тогда
			Если ТипЗнч(Узел) = Тип("ТекстDOM") Тогда
				
				LocalIdРодителя = РодительскийУзел.СвойстваУзла.localid;
				СтрокаГруппирующегоПоля = Неопределено;
				
				Если ЗначениеЗаполнено(LocalIdРодителя) Тогда
					СтруктураLocalid = СписокLocalid.Получить(LocalIdРодителя);
					Если СтруктураLocalid.Свойство("Родитель") Тогда
						Для Каждого РодительПоLocalId Из СтруктураLocalid.Родитель Цикл
							ВышестоящийLocalId = СоответствиеВышестоящихLocalId.Получить(РодительПоLocalId.localid);
							Если ВышестоящийLocalId <> Неопределено Тогда
								СтрокаГруппирующегоПоля = ВышестоящийLocalId;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьТекстовоеСодержаниеУзла(Узел, ТаблицаПараметров, СоответствиеВышестоящихLocalId, НезаполненныеПараметры, РодительскийУзел, УзлыДляУдаления, СтрокаГруппирующегоПоля);
			КонецЕсли;
			Продолжить;
		ИначеЕсли Узел.ПолучитьАтрибут("УзелДляКлонирования") <> Неопределено Или Узел.ПолучитьАтрибут("КлонированныйУзел") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГруппирующегоПоля = ПолучитьСтрокуГруппирующегоПоля(РодительскийУзел, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
		ТекущийLocalId = Узел.ПолучитьАтрибут("localid");
		СвойстваУзла = ПолучитьСвойстваУзлаТела(Узел, ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
		СтруктураТекущегоУзла = ПолучитьСтруктуруТекущегоУзла(Узел, РодительскийУзел, СвойстваУзла);
		
		Если НРег(Узел.ИмяУзла) = "text"
			И НРег(Узел.РодительскийУзел.ИмяУзла) = "section"
			И ДокументHTML <> Неопределено
		Тогда
			Для Каждого ДочернийУзелСекции Из Узел.РодительскийУзел.ДочерниеУзлы Цикл
				Если НРег(ДочернийУзелСекции.ИмяУзла) = "code"
					И ДочернийУзелСекции.ЕстьАтрибут("code")
				Тогда
					ЗаполнитьНаполнениеСекции(Узел, ДочернийУзелСекции.ПолучитьАтрибут("code"), ДокументHTML, ТаблицаПараметров, НезаполненныеТекстовыеСекции);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// При отсутствии текста секции подставляется "—"
			Если Не ЗначениеЗаполнено(Узел.ТекстовоеСодержимое) Тогда
				Узел.ТекстовоеСодержимое = "—";
			КонецЕсли;
		КонецЕсли;
		
		Если Узел.ЕстьАтрибут("codeSystem") Тогда
			ЗаполнитьАтрибутыУзлаСлужебногоКлассификатораПоИдентфикатору(Узел, НезагруженныеКлассификаторы);
		КонецЕсли;
		
		Если НРег(Узел.ИмяУзла) = "reference" Тогда
			ИмеетДочерниеУзлы = Ложь;
			ЗаполнитьУзелСсылки(Узел, СоответствиеВышестоящихLocalId, ТаблицаПараметров, УзлыДляУдаления, ИмеетДочерниеУзлы);
			
			Если ИмеетДочерниеУзлы Тогда
				РекурсивныйОбходXML(Узел, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, ДокументHTML, СписокLocalid, КлонированныеУзлы, НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры, СтруктураТекущегоУзла, НезаполненныеТекстовыеСекции);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если СвойстваУзла.Множественное Тогда
			// [0..*] Или [1..*]
			СтруктураТекущегоLocalId = СписокLocalid.Получить(ТекущийLocalId);
			Если СтруктураТекущегоLocalId <> Неопределено И СтруктураТекущегоLocalId.Свойство("Родитель") Тогда
				// Группирующее поле
				ГруппирующееПоле = Неопределено;
				НомерСтрокиТаблицы = Неопределено;
				Для Каждого РодительПоLocalId Из СтруктураТекущегоLocalId.Родитель Цикл
					ВышестоящийLocalId = СоответствиеВышестоящихLocalId.Получить(РодительПоLocalId.localid);
					Если ВышестоящийLocalId <> Неопределено Тогда
						Если ВышестоящийLocalId.Параметр <> Неопределено Тогда
							ГруппирующееПоле = ВышестоящийLocalId.Параметр;
							НомерСтрокиТаблицы = ВышестоящийLocalId.НомерСтрокиТаблицы;
							ИдентификаторСтроки = ВышестоящийLocalId.ИдентификаторСтроки;
						Иначе
							// Константа
							ГруппирующееПоле = ТаблицаПараметров.Индекс(ВышестоящийLocalId);
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ГруппирующееПоле <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
						// Приём создан до добавления вложенных многострочных таблиц
						ПараметрыСТекущимLocalId = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле, НомерСтрокиТаблицы", ТекущийLocalId, ГруппирующееПоле, НомерСтрокиТаблицы));
					Иначе
						ПараметрыСТекущимLocalId = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле, ИдентификаторСтроки", ТекущийLocalId, ГруппирующееПоле, ИдентификаторСтроки));
						Если ПараметрыСТекущимLocalId.Количество() = 0 Тогда
							// Вложенная таблица
							ПараметрыСТекущимLocalId = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле, ИдентификаторРодительскойСтроки", ТекущийLocalId, ГруппирующееПоле, ИдентификаторСтроки));
						КонецЕсли;
					КонецЕсли;
				Иначе
					ПараметрыСТекущимLocalId = Новый Массив;
				КонецЕсли;
			Иначе
				ПараметрыСТекущимLocalId = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", ТекущийLocalId));
			КонецЕсли;
			
			ОчиститьУзелОтАтрибутов(Узел);
			КоличествоСформированныхУзлов = 0;
			
			Если ПараметрыСТекущимLocalId.Количество() = 0 Тогда
				// Существуют узлы [1..*], в которых все дочерние узлы [1..*]/[0..*], т.е. узел обязательный, при этом все дочерние могут быть с nullFlavor
				ПараметрыСТекущимLocalId.Добавить(Неопределено);
			КонецЕсли;
			
			Для Каждого ПараметрСТекущимLocalId Из ПараметрыСТекущимLocalId Цикл
				КлонированныйУзел = Неопределено;
				Попытка
					СоответствиеВышестоящихLocalId.Вставить(ТекущийLocalId, ПараметрСТекущимLocalId);
					КлонированныйУзел = Узел.КлонироватьУзел(Истина);
					СтруктураКлонированногоУзла = ПолучитьСтруктуруТекущегоУзла(КлонированныйУзел, РодительскийУзел, СвойстваУзла);
					Узел.РодительскийУзел.ВставитьПеред(КлонированныйУзел, Узел);
					
					ДанныеДляУзлаКлассификатора = Новый Структура("localid, ДополнительныеДанные", ТекущийLocalId, ДополнительныеДанные);
					ЗначениеLocalid = ?(ПараметрСТекущимLocalId = Неопределено, Неопределено, ПараметрСТекущимLocalId.Значение);
					УстановитьЗначениеАтрибутовУзлаТела(КлонированныйУзел, СоответствиеВышестоящихLocalId, ТаблицаПараметров, СтруктураКлонированногоУзла, УзлыДляУдаления, НезаполненныеПараметры, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора, ЗначениеLocalid);
					
					РекурсивныйОбходXML(КлонированныйУзел, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, ДокументHTML, СписокLocalid, КлонированныеУзлы, НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры, СтруктураКлонированногоУзла, НезаполненныеТекстовыеСекции);
					КлонированныйУзел.УстановитьАтрибут("КлонированныйУзел", "Истина");
					КлонированныеУзлы.Добавить(КлонированныйУзел);
					
					СоответствиеВышестоящихLocalId.Удалить(ТекущийLocalId);
					
					Если УзлыДляУдаления.Найти(КлонированныйУзел) = Неопределено Тогда
						КоличествоСформированныхУзлов = КоличествоСформированныхУзлов + 1;
					КонецЕсли;
				Исключение
					Если КлонированныйУзел <> Неопределено
						И УзлыДляУдаления.Найти(КлонированныйУзел) = Неопределено
					Тогда
						// Узел успел клонироваться, но не смог обработаться
						УзлыДляУдаления.Добавить(КлонированныйУзел);
					КонецЕсли;
				КонецПопытки;
			КонецЦикла;
			
			// TODO: возможно потребуется добавить в макет секций тела в множественные узлы новый атрибут МинКоличествоУзлов
			Если КоличествоСформированныхУзлов = 0 Тогда
				ОбработатьУзелБезЗаполненногоПараметра(Узел, СтруктураТекущегоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
			КонецЕсли;
			
			Узел.УстановитьАтрибут("УзелДляКлонирования", "Истина");
			ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел);
		Иначе
			Если Узел.ЕстьАтрибут("УсловиеИспользования") Тогда
				Если ВычислитьФункцию(Узел.ПолучитьАтрибут("УсловиеИспользования"), ТаблицаПараметров, СоответствиеВышестоящихLocalId) Тогда
					ДанныеДляУзлаКлассификатора = Новый Структура("localid, ДополнительныеДанные", ТекущийLocalId, ДополнительныеДанные);
					УстановитьЗначениеАтрибутовУзлаТела(Узел, СоответствиеВышестоящихLocalId, ТаблицаПараметров, СтруктураТекущегоУзла, УзлыДляУдаления, НезаполненныеПараметры, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора);
				Иначе
					ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел);
					Продолжить;
				КонецЕсли;
			Иначе
				// [0..1]/[1..1]/R[1..1]
				СтрокаГруппирующегоПоля = Неопределено;
				ЗначениеLocalIdИзСтроки = Неопределено;
				Если ТекущийLocalId <> Неопределено Тогда
					СтрокаГруппирующегоПоля = ПолучитьСтрокуГруппирующегоПоля(РодительскийУзел, ТаблицаПараметров, СоответствиеВышестоящихLocalId);
					ЗначениеLocalIdИзСтроки = ПолучитьЗначениеLocalIdИзСтроки(ТекущийLocalId, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
				КонецЕсли;
				ДанныеДляУзлаКлассификатора = Новый Структура("localid, ДополнительныеДанные", ТекущийLocalId, ДополнительныеДанные);
				УстановитьЗначениеАтрибутовУзлаТела(Узел, СоответствиеВышестоящихLocalId, ТаблицаПараметров, СтруктураТекущегоУзла, УзлыДляУдаления, НезаполненныеПараметры, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора, ЗначениеLocalIdИзСтроки, СтрокаГруппирующегоПоля);
			КонецЕсли;
			
			РекурсивныйОбходXML(Узел, ТаблицаПараметров, УзлыДляУдаления, СоответствиеВышестоящихLocalId, ДокументHTML, СписокLocalid, КлонированныеУзлы, НезагруженныеКлассификаторы, ДополнительныеДанные, НезаполненныеПараметры, СтруктураТекущегоУзла, НезаполненныеТекстовыеСекции);
			ОчиститьУзелОтАтрибутов(Узел);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСтруктуруТекущегоУзла(Узел, РодительскийУзел, СвойстваУзла)
	
	СтруктураТекущегоУзла = Новый Структура("Узел, СвойстваУзла, РодительскийУзел");
	СтруктураТекущегоУзла.Узел = Узел;
	СтруктураТекущегоУзла.СвойстваУзла = СвойстваУзла;
	СтруктураТекущегоУзла.РодительскийУзел = РодительскийУзел;
	
	Возврат СтруктураТекущегоУзла;
	
КонецФункции

Функция ПолучитьСвойстваУзлаТела(Узел, ТекущийLocalId, ТаблицаПараметров = Неопределено, СоответствиеВышестоящихLocalId = Неопределено, СтрокаГруппирующегоПоля = Неопределено)
	
	СвойстваУзла = Новый Структура("Обязательное, Множественное, ЗначениеПустогоЗначения, Синоним, localid, ДопустимыеЗначения, УсловиеОбязательное, СохранятьДочерниеУзлы, СохранятьТипПриПустомЗначении");
	
	СвойстваУзла.ЗначениеПустогоЗначения = Узел.ПолучитьАтрибут("ПустоеЗначение");
	
	Если ЗначениеЗаполнено(СвойстваУзла.ЗначениеПустогоЗначения) Тогда
		СвойстваУзла.Обязательное = Ложь;
	Иначе
		СвойстваУзла.Обязательное = Истина;
		АтрибутОбязательное = Узел.ПолучитьАтрибут("Обязательное");
		Если АтрибутОбязательное <> Неопределено Тогда
			СвойстваУзла.УсловиеОбязательное = АтрибутОбязательное;
			Попытка
				СвойстваУзла.Обязательное = ВычислитьФункцию(АтрибутОбязательное, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля);
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	АтрибутСиноним = Узел.ПолучитьАтрибут("Синоним");
	
	Если СтрЗаканчиваетсяНа(НРег(ТекущийLocalId), ".классификацияполя") Тогда
		Если АтрибутСиноним <> Неопределено Тогда
			ИмяПоляКлассификации = АтрибутСиноним;
		Иначе
			ИмяПоляКлассификации = РазбитьСоставноеСлово(СтрРазделить(ТекущийLocalId, ".")[0]);
		КонецЕсли;
		
		СвойстваУзла.Синоним = СтрШаблон(НСтр("ru='Классификация поля ""%1""'"), ИмяПоляКлассификации);
	Иначе
		Если АтрибутСиноним <> Неопределено Тогда
			СвойстваУзла.Синоним = АтрибутСиноним;
		ИначеЕсли ЗначениеЗаполнено(ТекущийLocalId) Тогда
			СвойстваУзла.Синоним = СтрШаблон(НСтр("ru='Поле ЭМД ""%1""'"), ТекущийLocalId);
		КонецЕсли;
	КонецЕсли;
	СвойстваУзла.localid = ТекущийLocalId;
	
	Попытка
		СвойстваУзла.Множественное = ВычислитьФункцию(Узел.ПолучитьАтрибут("Множественное"));
	Исключение
		СвойстваУзла.Множественное = Ложь;
	КонецПопытки;
	
	Попытка
		СвойстваУзла.СохранятьДочерниеУзлы = ВычислитьФункцию(Узел.ПолучитьАтрибут("СохранятьДочерниеУзлы"));
	Исключение
		СвойстваУзла.СохранятьДочерниеУзлы = Ложь;
	КонецПопытки;
	
	Попытка
		СвойстваУзла.СохранятьТипПриПустомЗначении = ВычислитьФункцию(Узел.ПолучитьАтрибут("СохранятьТипПриПустомЗначении"));
	Исключение
		СвойстваУзла.СохранятьТипПриПустомЗначении = Ложь;
	КонецПопытки;
	
	АтрибутДопустимыеЗначения = Узел.ПолучитьАтрибут("ДопустимыеЗначения");
	Если АтрибутДопустимыеЗначения <> Неопределено Тогда
		СвойстваУзла.ДопустимыеЗначения = АтрибутДопустимыеЗначения;
	КонецЕсли;
	
	Возврат СвойстваУзла;
	
КонецФункции

Процедура УстановитьЗначениеАтрибутовУзлаТела(Узел, СоответствиеВышестоящихLocalId, ТаблицаПараметров, СвойстваРодительскогоУзла, УзлыДляУдаления,
	НезаполненныеПараметры, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора, ЗначениеLocalIdИзСтроки = Неопределено, СтрокаГруппирующегоПоля = Неопределено)
	
	// Заполнение атрибутов по данным элемента классификатора (#)
	Если НРег(Узел.ПолучитьАтрибут("code")) = "#code" Тогда
		Если ЗначениеЗаполнено(ЗначениеLocalIdИзСтроки) Тогда
			ЗаполнитьАтрибутыУзлаКлассификатора(Узел, ЗначениеLocalIdИзСтроки, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора);
		ИначеЕсли УзелКлассификатора(Узел) Тогда
			ОбработатьУзелБезЗаполненногоПараметра(Узел, СвойстваРодительскогоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
			Возврат;
		КонецЕсли;
	ИначеЕсли Лев(Узел.ПолучитьАтрибут("code"), 1) = "%" Тогда
		CodeSystem = "";
		ЕстьАтрибутКлассификатораКЗаполнению = Ложь;
		Для Каждого Атрибут Из Узел.Атрибуты Цикл
			Если НРег(Атрибут.ИмяУзла) = "codesystem"
				И Лев(Атрибут.ЗначениеУзла, 1) <> "#"
			Тогда
				CodeSystem = Атрибут.ЗначениеУзла;
			КонецЕсли;
			Если Лев(Атрибут.ЗначениеУзла, 1) = "#" Тогда
				ЕстьАтрибутКлассификатораКЗаполнению = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(CodeSystem) И ЕстьАтрибутКлассификатораКЗаполнению Тогда
			
			ПараметрыКлассификатора = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(CodeSystem);
			Если ЗначениеЗаполнено(ЗначениеLocalIdИзСтроки)
				И ПараметрыКлассификатора.ВидКлассификатора = ЗначениеLocalIdИзСтроки.ВидКлассификатора
			Тогда
				// Узел классификатора по текущему localid, но с переопределённым значением атрибута "code"
				ЗаполнитьАтрибутыУзлаКлассификатора(Узел, ЗначениеLocalIdИзСтроки, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора);
			Иначе
				// Узел классификатора не по текущему localid, идентификатор элемента классификатора определяется значением атрибута "code"
				УИДЕГИСЗ = ПолучитьЗначениеLocalIdИзСтроки(Узел.ПолучитьАтрибут("code"), ТаблицаПараметров, СоответствиеВышестоящихLocalId);
				ЗначенияПараметров = ИнтеграцияЕГИСЗСервер.ПолучитьЗначенияПараметровЭлементаКлассификатораПоИдентификатору(CodeSystem, УИДЕГИСЗ);
				Если ЗначенияПараметров = Неопределено Тогда
					ОбработатьУзелБезЗаполненногоПараметра(Узел, СвойстваРодительскогоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
					Возврат;
				Иначе
					ЗаполнитьАтрибутыУзлаКлассификатора(Узел, Неопределено, НезагруженныеКлассификаторы, ДанныеДляУзлаКлассификатора, ЗначенияПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПустоеЗначение = Ложь;
	
	Для Каждого АтрибутУзла Из Узел.Атрибуты Цикл
		Если АтрибутУзла.ИмяУзла = "УсловиеИспользования"
			Или АтрибутУзла.ИмяУзла = "ПустоеЗначение"
			Или АтрибутУзла.ИмяУзла = "Формат"
			Или АтрибутУзла.ИмяУзла = "localid"
			Или АтрибутУзла.ИмяУзла = "Обязательное"
			Или АтрибутУзла.ИмяУзла = "Множественное"
			Или АтрибутУзла.ИмяУзла = "СохранятьДочерниеУзлы"
			Или АтрибутУзла.ИмяУзла = "СохранятьТипПриПустомЗначении"
			Или АтрибутУзла.ИмяУзла = "УсловиеОбязательное"
			Или (СтрНайти(АтрибутУзла.ЗначениеУзла, "$") = 0
					И Лев(АтрибутУзла.ЗначениеУзла,1) <> "*"
					И Лев(АтрибутУзла.ЗначениеУзла,1) <> "%")
		Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ПолучитьРезультат(АтрибутУзла.ЗначениеУзла, ТаблицаПараметров, СоответствиеВышестоящихLocalId, СтрокаГруппирующегоПоля, Узел.ПолучитьАтрибут("Формат"));
		// TODO Возможно при Результат = Неопределено - производить проверку
		Если Результат <> Неопределено Тогда
			Узел.УстановитьАтрибут(АтрибутУзла.ИмяУзла, Результат);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Если НРег(АтрибутУзла.ИмяУзла) = "value" Тогда
				ПустоеЗначение = Истина;
			Иначе
				ОбработатьУзелБезЗаполненногоПараметра(Узел, СвойстваРодительскогоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение Тогда
		ЗначениеПустогоЗначения = Узел.ПолучитьАтрибут("ПустоеЗначение");
		Если ЗначениеПустогоЗначения <> Неопределено Тогда
			Узел.УдалитьАтрибут("ПустоеЗначение");
		Иначе
			ЗначениеПустогоЗначения = NullFlavorДляУзла(Узел.ИмяУзла)
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеПустогоЗначения) Тогда
			Узел.УстановитьАтрибут("nullFlavor", ЗначениеПустогоЗначения);
		Иначе
			ОбработатьУзелБезЗаполненногоПараметра(Узел, СвойстваРодительскогоУзла, УзлыДляУдаления, ТаблицаПараметров, НезаполненныеПараметры);
			Возврат;
		КонецЕсли;
		Узел.УдалитьАтрибут("value");
	КонецЕсли;
	
КонецПроцедуры

Функция УзелКлассификатора(Узел)
	
	Для Каждого АтрибутУзла Из Узел.Атрибуты Цикл
		Если Лев(АтрибутУзла.ЗначениеУзла, 1) = "#" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьНаполнениеСекции(Узел, НаименованиеСекции, ДокументHTML, ТаблицаПараметров, НезаполненныеТекстовыеСекции)
	
	Если Не ЗначениеЗаполнено(НаименованиеСекции) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСекции = Новый Массив;
	УзлыСекций = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,,"data-bit-sectionname");
	
	Для Каждого УзелСекции Из УзлыСекций Цикл
		Если СтрНайти(УзелСекции.ПолучитьАтрибут("data-bit-sectionname"), НаименованиеСекции) > 0 Тогда
			ЭлементыСекции.Добавить(УзелСекции);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСекции Из ЭлементыСекции Цикл
		ДобавитьНормализованныеУзлыДокументаHTMLВУзелНаполнения(ЭлементСекции, Узел, ДокументHTML, НаименованиеСекции, ТаблицаПараметров);
	КонецЦикла;
	
	Если НезаполненныеТекстовыеСекции <> Неопределено
		И Узел.ДочерниеУзлы.Количество() = 0
	Тогда
		НезаполненныеТекстовыеСекции.Добавить(НаименованиеСекции);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУзелСсылки(Узел, СоответствиеВышестоящихLocalId, ТаблицаПараметров, УзлыДляУдаления, ИмеетДочерниеУзлы)
	
	НовоеЗначениеRef = Новый УникальныйИдентификатор;
	ЗначениеRef = Узел.ПолучитьАтрибут("value");
	
	Если ЗначениеRef <> Неопределено Тогда
		Если Лев(ЗначениеRef, 1) = "*" Тогда
			Если ЗначениеЗаполнено(ЗначениеRef) Тогда
				
				LocalIdСсылки = Прав(ЗначениеRef, СтрДлина(ЗначениеRef)-1);
				СтрокаТаблицыСПараметром = СоответствиеВышестоящихLocalId.Получить(LocalIdСсылки);
				
				Если СтрокаТаблицыСПараметром = Неопределено Тогда
					СтрокиLocalid = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", LocalIdСсылки));
					Если СтрокиLocalid.Количество() > 0 Тогда
						СтрокаТаблицыСПараметром = СтрокиLocalid[0];
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТаблицыСПараметром <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицыСПараметром.Параметр) Тогда
					НовоеЗначениеRef = СтрокаТаблицыСПараметром.Параметр.УникальныйИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			Узел.УстановитьАтрибут("value", Строка(НовоеЗначениеRef));
		КонецЕсли;
	Иначе
		LocalIdСсылки = Узел.ПолучитьАтрибут("localid");
		Если LocalIdСсылки <> Неопределено Тогда
			Если ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", LocalIdСсылки)).Количество() > 0 Тогда
				ОчиститьУзелОтАтрибутов(Узел);
				ИмеетДочерниеУзлы = Истина;
			Иначе
				ДобавитьУзелДляУдаления(УзлыДляУдаления, Узел);
			КонецЕсли;
		Иначе
			ИмеетДочерниеУзлы = Узел.ДочерниеУзлы.Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ФункцииМакетовТелаДокумента

Функция УникальныйИдентификаторПоСсылке(Ссылка)
	
	Попытка
		Возврат Строка(ИнтеграцияЕГИСЗСервер.УИДВЧисло(Ссылка.УникальныйИдентификатор()));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьНомерМедкарты(Медкарта)
	
	Возврат СтрЗаменить(Медкарта.Наименование, ", " + CRMСервер.ПолучитьФИООбъекта(Медкарта.Клиент), "");
	
КонецФункции

Функция ПолучитьТелефон(Ссылка)
	
	НомерТелефона = Строка(КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон));
	Возврат НомерТелефона;
	
КонецФункции

Функция ПолучитьРегион(Ссылка)
	
	ВалидныйАдрес = ПолучитьВалидныйАдрес(Ссылка);
	
	Если ВалидныйАдрес <> Неопределено Тогда
		СтруктураАдрес = РаботаСАдресами.СведенияОбАдресе(ВалидныйАдрес.ЗначенияПолей);
		Возврат Строка(АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдрес.Регион));
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьАдрес(Ссылка)
	
	ВалидныйАдрес = ПолучитьВалидныйАдрес(Ссылка);
	
	Если ВалидныйАдрес <> Неопределено Тогда
		Возврат ВалидныйАдрес.Представление;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТипШкалыИзмерений(Параметр)
	
	Если ЗначениеЗаполнено(Параметр) Тогда
		Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеАтрибутаЭлементаКлассификатора(Параметр, "SCALETYPE");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВычисляемоеЗначениеДляТС(Аргумент1, Аргумент2, Аргумент3, Аргумент4 = Неопределено, Аргумент5 = Неопределено)
	
	Результат = Неопределено;
	Выполнить("Результат = Аргумент1 Или Аргумент2 Или Аргумент3" + ?(Аргумент4 <> Неопределено И Аргумент5 <> Неопределено, " Или Аргумент4 Или Аргумент5", ""));
	Возврат Результат;
	
КонецФункции

Функция ДатаСоСмещением(Дата, Формат)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат ИнтеграцияЕГИСЗСервер.ПредставлениеЛокальнойДатыСоСмещением(Дата, Формат);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ЗначениеЭлементаКлассификатора(Знач ЭлементКлассификатора = Неопределено, Знач OIDКлассификатора = Неопределено, Знач ИдентификаторЭлемента = Неопределено, Знач ТипЗначения = "name")
	
	Значение = "";
	
	Если ЭлементКлассификатора = Неопределено
		И OIDКлассификатора <> Неопределено
		И ИдентификаторЭлемента <> Неопределено
	Тогда
		ЭлементКлассификатора = ЭлементКлассификатора(ИдентификаторЭлемента, OIDКлассификатора);
	КонецЕсли;
	
	Если ЭлементКлассификатора <> Неопределено Тогда
		ЗначенияПараметров = ИнтеграцияЕГИСЗСервер.ПолучитьЗначенияПараметровЭлементаКлассификатора(ЭлементКлассификатора);
		Если ЗначенияПараметров <> Неопределено И ЗначенияПараметров.Свойство(ТипЗначения) Тогда
			Значение = ЗначенияПараметров[ТипЗначения];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЭлементКлассификатора(ИдентификаторЭлемента, OIDКлассификатора)
	
	Попытка
		УИДЕГИСЗ = Число(ИдентификаторЭлемента);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(OIDКлассификатора);
	
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	КлассификаторыМинЗдрава.Ссылка КАК Ссылка
		|ИЗ
		|	%1 КАК КлассификаторыМинЗдрава
		|ГДЕ
		|	КлассификаторыМинЗдрава.УИДЕГИСЗ = &УИДЕГИСЗ %2";
	
	Запрос = Новый Запрос;
	
	УсловиеВидаКлассификатора = "";
	Если ПараметрыСправочника.Свойство("ВидКлассификатора") Тогда
		УсловиеВидаКлассификатора = "И КлассификаторыМинЗдрава.ВидКлассификатора = &ВидКлассификатора";
		Запрос.УстановитьПараметр("ВидКлассификатора", ПараметрыСправочника.ВидКлассификатора);
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(ШаблонЗапроса, ПараметрыСправочника.ПолноеНаименование, УсловиеВидаКлассификатора);
	Запрос.УстановитьПараметр("УИДЕГИСЗ", УИДЕГИСЗ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПредставлениеЕдиницыИзмеренияВитальногоПараметра(ВитальныйПараметр, АтрибутПредставления = "PRINTNAME")
	
	Если Не ЗначениеЗаполнено(ВитальныйПараметр)
		Или ДопСерверныеФункции.ИмяСсылочногоТипа(ВитальныйПараметр) <> "Справочник.КлассификаторыМинЗдрава"
	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Старый формат классификатора (версия <= 3.4)
	ЕдиницаИзмерения = ВитальныйПараметр.Атрибуты.Найти("Unit", "Ключ");
	
	Если ЕдиницаИзмерения <> Неопределено Тогда
		Возврат ЕдиницаИзмерения.Значение;
	КонецЕсли;
	
	// Новый формат классификатора (версия >= 4.1)
	ЕдиницаИзмерения = ВитальныйПараметр.Атрибуты.Найти("UnitCode", "Ключ");
	Если ЕдиницаИзмерения <> Неопределено
		И ЗначениеЗаполнено(ЕдиницаИзмерения.Значение)
	Тогда
		Возврат ПредставлениеЕдиницыИзмерения(ЕдиницаИзмерения.Значение, АтрибутПредставления);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПредставлениеЕдиницыИзмерения(Знач УИДЕГИСЗ, АтрибутПредставления = "UCUM")
	
	Если ТипЗнч(УИДЕГИСЗ) = Тип("Строка") Тогда
		ЦифрыСтрокиУИДЕГИСЗ = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(УИДЕГИСЗ);
		Если ЗначениеЗаполнено(ЦифрыСтрокиУИДЕГИСЗ) Тогда
			УИДЕГИСЗ = Число(ЦифрыСтрокиУИДЕГИСЗ);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(УИДЕГИСЗ) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕдиницаИзмерения = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЕдиницыИзмерения(УИДЕГИСЗ);
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		СтрокаАтрибута = ЕдиницаИзмерения.Атрибуты.Найти(АтрибутПредставления, "Ключ");
		Возврат СтрокаАтрибута.Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПредставлениеДиагнозаСКодом(Диагноз)
	
	Попытка
		Возврат Справочники.Диагнозы.ПредставлениеДиагнозаСКодом(Диагноз);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПараметрЯвляетсяЭлементомКлассификатора(Параметр)
	
	Если ЗначениеЗаполнено(Параметр) Тогда
		Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеАтрибутаЭлементаКлассификатора(Параметр, "УИДЕГИСЗ") <> Неопределено;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция КлассификаторыЗначенийВитальныхПараметров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(КлассификаторыМинЗдраваАтрибуты.Значение КАК СТРОКА(100)) КАК Значение
		|ИЗ
		|	Справочник.КлассификаторыМинЗдрава.Атрибуты КАК КлассификаторыМинЗдраваАтрибуты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
		|		ПО КлассификаторыМинЗдраваАтрибуты.Ссылка = КлассификаторыМинЗдрава.Ссылка
		|			И (КлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры))
		|			И (КлассификаторыМинЗдраваАтрибуты.Ключ = ""OID"")";
	
	Классификации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	
	Возврат СтрСоединить(Классификации, ",");
	
КонецФункции

Функция ПараметрУказанногоТипа(Параметр, ПредставлениеТипа)
	
	Возврат ТипЗнч(Параметр) = Тип(ПредставлениеТипа);
	
КонецФункции

Функция ПолучитьРабочуюПочту(Ссылка)
	
	Возврат КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий, Истина, Ложь);
	
КонецФункции

Функция ПараметрУказанногоКлассификатора(Параметр, OIDКлассификатора)
	
	Попытка
		Возврат Параметр.OIDКлассификатораМинздрава = OIDКлассификатора;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция НаименованиеОрганизации(Ссылка)
	
	ИмяТипаСправочника = ДопСерверныеФункции.ИмяСсылочногоТипа(Ссылка);
	
	Если ИмяТипаСправочника = "Справочник.РеестрМедицинскихОрганизаций" Тогда
		Возврат Ссылка.ПолноеНаименование;
	КонецЕсли;
	
	Если ИмяТипаСправочника = "Справочник.Филиалы" Тогда
		Организация = Ссылка.Организация;
	ИначеЕсли ИмяТипаСправочника = "Справочник.Организации" Тогда
		Организация = Ссылка;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация.МедицинскаяОрганизация) Тогда
		Возврат Организация.МедицинскаяОрганизация.ПолноеНаименование;
	Иначе
		Возврат Организация.НаименованиеПолное;
	КонецЕсли;
	
КонецФункции

Функция ТаблицаНеОсновныхДиагнозов(ТаблицаДиагнозовПриема)
	
	НозологическаяЕдиницаОсновногоДиагноза = НозологическаяЕдиницаОсновногоДиагноза();
	
	ТаблицаНеОсновныхДиагнозов = ТаблицаДиагнозовПриема.СкопироватьКолонки();
	Для Каждого СтрокаДиагноза Из ТаблицаДиагнозовПриема Цикл
		Если СтрокаДиагноза.ВидНозологическойЕдиницы <> НозологическаяЕдиницаОсновногоДиагноза Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаНеОсновныхДиагнозов.Добавить(), СтрокаДиагноза);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаНеОсновныхДиагнозов;
	
КонецФункции

Функция НозологическаяЕдиницаОсновногоДиагноза()
	
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидыНозологическихЕдиниц(1);
	
КонецФункции

Функция ЭтоПМОНесовершеннолетнего(КлиентДатаРождения, ДатаДокумента = Неопределено, ТипСобытия)
	
	Если Не РаботаСКлиентами.КлиентЯвляетсяСовершеннолетним(КлиентДатаРождения, ДатаДокумента) И ТипСобытия.УИДЕГИСЗ = 10 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоНеПМОНесовершеннолетнего(КлиентДатаРождения, ДатаДокумента = Неопределено, ТипСобытия)
	
	Если Не РаботаСКлиентами.КлиентЯвляетсяСовершеннолетним(КлиентДатаРождения, ДатаДокумента) И ТипСобытия.УИДЕГИСЗ = 10 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоВторойЭтапДиспансеризацииСовершеннолетнего(КлиентДатаРождения, ДатаДокумента = Неопределено, ТипСобытия)
	
	Если РаботаСКлиентами.КлиентЯвляетсяСовершеннолетним(КлиентДатаРождения, ДатаДокумента) И (ТипСобытия.УИДЕГИСЗ = 25 Или ТипСобытия.УИДЕГИСЗ = 53) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоНеВторойЭтапДиспансеризацииСовершеннолетнего(КлиентДатаРождения, ДатаДокумента = Неопределено, ТипСобытия)
	
	Если РаботаСКлиентами.КлиентЯвляетсяСовершеннолетним(КлиентДатаРождения, ДатаДокумента) И (ТипСобытия.УИДЕГИСЗ = 25 Или ТипСобытия.УИДЕГИСЗ = 53) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ПолучитьВалидныйАдрес(Ссылка)
	
	АдресФактический = ИнтеграцияЕГИСЗСервер.ПолучитьАдресПоВидуАдреса(Ссылка, Справочники.ВидыКонтактнойИнформации.АдресФактический);
	Если ЗначениеЗаполнено(АдресФактический.Представление) Тогда
		Возврат АдресФактический;
	КонецЕсли;
	
	АдресЮридический = ИнтеграцияЕГИСЗСервер.ПолучитьАдресПоВидуАдреса(Ссылка, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
	Если ЗначениеЗаполнено(АдресЮридический.Представление) Тогда
		Возврат АдресЮридический;
	КонецЕсли;
	
	АдресПочтовый	 = ИнтеграцияЕГИСЗСервер.ПолучитьАдресПоВидуАдреса(Ссылка, Справочники.ВидыКонтактнойИнформации.АдресПочтовый);
	Если ЗначениеЗаполнено(АдресПочтовый.Представление) Тогда
		Возврат АдресПочтовый;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьНормализованныеУзлыДокументаHTMLВУзелНаполнения(ЭлементСекции, Узел, ДокументHTML, НаименованиеСекции, ТаблицаПараметров)
	
	ДопустимыеТипыУзлов = Новый Массив;
	ДопустимыеТипыУзлов.Добавить("COLGROUP");
	ДопустимыеТипыУзлов.Добавить("THEAD");
	ДопустимыеТипыУзлов.Добавить("TBODY");
	ДопустимыеТипыУзлов.Добавить("TABLE");
	ДопустимыеТипыУзлов.Добавить("CAPTION");
	ДопустимыеТипыУзлов.Добавить("COL");
	ДопустимыеТипыУзлов.Добавить("TFOOT");
	ДопустимыеТипыУзлов.Добавить("TH");
	ДопустимыеТипыУзлов.Добавить("TD");
	ДопустимыеТипыУзлов.Добавить("TR");
	ДопустимыеТипыУзлов.Добавить("CONTENT");
	ДопустимыеТипыУзлов.Добавить("#TEXT");
	ДопустимыеТипыУзлов.Добавить("BR");
	
	Для Каждого ДочернийУзел Из ЭлементСекции.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.Атрибуты <> Неопределено
			И ДочернийУзел.ПолучитьАтрибут("hidden") = "true"
		Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДочернийУзел) = Тип("ЭлементDOM") Тогда
			НаименованиеСекцииТекущегоУзла = ДочернийУзел.ПолучитьАтрибут("data-bit-sectionname");
			Если НаименованиеСекцииТекущегоУзла <> Неопределено И СтрНайти(НаименованиеСекцииТекущегоУзла, НаименованиеСекции) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДопустимыеТипыУзлов.Найти(ВРег(ДочернийУзел.ИмяУзла)) <> Неопределено Тогда
			НовыйУзелУзла = ДочернийУзел.КлонироватьУзел(Ложь);
			//Если Не ТипЗнч(ДочернийУзел) = Тип("ТекстDOM") Тогда
			//	Для Каждого Атрибут Из ДочернийУзел.Атрибуты Цикл
			//		НовыйУзелНовогоУзла.УстановитьАтрибут(Атрибут.Имя, Атрибут.Значение);
			//	КонецЦикла;
			//КонецЕсли;
			Узел.ДобавитьДочерний(НовыйУзелУзла);
			ДобавитьНормализованныеУзлыДокументаHTMLВУзелНаполнения(ДочернийУзел, НовыйУзелУзла, ДокументHTML, НаименованиеСекции, ТаблицаПараметров);
		Иначе
			Если ВРег(ДочернийУзел.ИмяУзла) = "DIV"
				Или ВРег(ДочернийУзел.ИмяУзла) = "P"
			Тогда
				Узел.ДобавитьДочерний(ДокументHTML.СоздатьЭлемент("br").КлонироватьУзел(Ложь));
			КонецЕсли;
			ДобавитьНормализованныеУзлыДокументаHTMLВУзелНаполнения(ДочернийУзел, Узел, ДокументHTML, НаименованиеСекции, ТаблицаПараметров);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьДанныеПоШаблону(Ссылка, СвойстваЭМД, ДополнительныеПараметры)
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Ссылка);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		ПараметрыШаблона	= ПолучитьСтруктуруТаблицПараметровШаблона();
		ДополнительныеПараметры.ПараметрыШаблона = ПараметрыШаблона;
		
		ТаблицаПараметров	= ПолучитьТаблицуПараметров(Ссылка, ИмяТипаДокумента, ДополнительныеПараметры);
		СтрокаШаблона		= Ссылка.ШаблоныПриема[ДополнительныеПараметры.ИндексШаблона];
		
		Если ДополнительныеПараметры.ШаблонОсмотра.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
			ТекстHTMLТела	= РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзКодаДокумента(СтрокаШаблона.ТекстДляПечати);
		Иначе
			ДанныеШаблона		 = Новый Структура("Шаблон, ТекстШаблона, ИдентификаторСтрокиШаблона", ДополнительныеПараметры.ШаблонОсмотра, ДополнительныеПараметры.ШаблонОсмотра.ТекстHTML, ДополнительныеПараметры.ИндексШаблона);
			ВерсияШаблона		 = ВерсионированиеШаблонов.ПолучитьВерсиюШаблона(СтрокаШаблона.ШаблонПриема, Ссылка.Дата);
			ДанныеТаблицШаблонов = Новый Структура("ПараметрыТаблицШаблонов, ЭталонныеСтрокиТаблиц", ПараметрыШаблона.ДанныеТаблицШаблоновПриема, РаботаСШаблонамиHTML.ЭталонныеСтрокиТаблиц(ВерсияШаблона.ТекстHTML));
			СтрТекстHTML		 = РаботаСШаблонамиHTMLКлиентСервер.СформироватьВерсиюДляПечатиШаблонаОсмотра(Ссылка, ДанныеШаблона, ПараметрыШаблона.ЗначенияПараметровHTML,,,,, ДанныеТаблицШаблонов, Истина);
			ТекстHTMLТела		 = СтрТекстHTML.ТекстШаблонаТело;
			
			ДополнитьТекстHTML(ТекстHTMLТела, ВерсияШаблона, Ссылка);
		КонецЕсли;
		
		ДокументHTML		= РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTMLТела);
		
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра"
		Или ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" // Версия КОРП
		Или ИмяТипаДокумента = "Документ.Рецепт"
	Тогда
		ТаблицаПараметров	= ПолучитьТаблицуПараметров(Ссылка, ИмяТипаДокумента, ДополнительныеПараметры);
		ДокументHTML		= Неопределено;
	КонецЕсли;
	
	// Дополнение параметрами по РЭМД
	ДополнитьПараметрамиПоРЭМД(СвойстваЭМД.ИдентификаторРЭМД, ТаблицаПараметров, Ссылка);
	
	Возврат Новый Структура("ТаблицаПараметров, ДокументHTML", ТаблицаПараметров, ДокументHTML)
	
КонецФункции

Процедура ДополнитьТекстHTML(ТекстHTMLТела, ВерсияШаблона, Ссылка)
	
	Если ВерсияШаблона.ЗаполнятьДиагнозыИзТабличнойЧасти Тогда
		ДополнитьТекстHTMLПоТЧДиагнозов(ТекстHTMLТела, ВерсияШаблона, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстHTMLПоТЧДиагнозов(ТекстHTMLТела, ВерсияШаблона, Ссылка)
	
	ТаблицаДиагнозовПриема = ПолучитьТаблицуДиагнозовПоТабличнойЧасти(Ссылка);
	
	Если ТаблицаДиагнозовПриема.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументXML = ПолучитьXML(ПолучитьМакетСправочникаПоВидуДокумента(ВерсияШаблона.ВидДокумента));
		УзлыОписанияДиагнозов = ДокументXML.ПолучитьЭлементыПоИмени("bitDiagnosis");
	Исключение
		Возврат;
	КонецПопытки;
	
	Если УзлыОписанияДиагнозов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовкиКолонок = Новый Массив;
	ДополнитьЗаголовкиКолонокТаблицыДиагнозов(ЗаголовкиКолонок, ТаблицаДиагнозовПриема, "Диагноз",					"Диагноз");
	ДополнитьЗаголовкиКолонокТаблицыДиагнозов(ЗаголовкиКолонок, ТаблицаДиагнозовПриема, "ВидНозологическойЕдиницы",	"Вид нозологической единицы");
	ДополнитьЗаголовкиКолонокТаблицыДиагнозов(ЗаголовкиКолонок, ТаблицаДиагнозовПриема, "Описание",					"Описание");
	ДополнитьЗаголовкиКолонокТаблицыДиагнозов(ЗаголовкиКолонок, ТаблицаДиагнозовПриема, "СтепеньОбоснованности",	"Степень обоснованности");
	ДополнитьЗаголовкиКолонокТаблицыДиагнозов(ЗаголовкиКолонок, ТаблицаДиагнозовПриема, "УточнениеХарактера",		"Уточнение характера");
	
	ТаблицыДиагнозовHTML = Новый Массив;
	
	Для Каждого УзелСтруктурыДиагноза Из УзлыОписанияДиагнозов[0].ДочерниеУзлы Цикл
		АтрибутСекции = УзелСтруктурыДиагноза.ПолучитьАтрибут("Секция");
		Если Не ЗначениеЗаполнено(АтрибутСекции) Тогда
			Продолжить;
		КонецЕсли;
		
		АтрибутОтбора = УзелСтруктурыДиагноза.ПолучитьАтрибут("Отбор");
		ТаблицаНеобходимыхДиагнозов = ПолучитьТаблицуНеобходимыхДиагнозовПоОтбору(ТаблицаДиагнозовПриема.Скопировать(), АтрибутОтбора);
		Если ТаблицаНеобходимыхДиагнозов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТаблицыHTML = Новый Массив;
		
		ЯчейкиСтрокиЗаголовка = Новый Массив;
		Для Каждого СтруктураЗаголовка Из ЗаголовкиКолонок Цикл
			ЯчейкиСтрокиЗаголовка.Добавить(СтрШаблон("<th>%1</th>", СтруктураЗаголовка.Заголовок));
		КонецЦикла;
		СтрокиТаблицыHTML.Добавить(СтрШаблон("<tr>%1</tr>", СтрСоединить(ЯчейкиСтрокиЗаголовка, "")));
		
		Для Каждого СтрокаДиагноза Из ТаблицаНеобходимыхДиагнозов Цикл
			ЯчейкиСтрокиДиагноза = Новый Массив;
			Для Каждого СтруктураЗаголовка Из ЗаголовкиКолонок Цикл
				ЯчейкиСтрокиДиагноза.Добавить(СтрШаблон("<td>%1</td>", СтрокаДиагноза[СтруктураЗаголовка.ИмяКолонки]));
			КонецЦикла;
			СтрокиТаблицыHTML.Добавить(СтрШаблон("<tr>%1</tr>", СтрСоединить(ЯчейкиСтрокиДиагноза, "")));
		КонецЦикла;
		
		ТаблицыДиагнозовHTML.Добавить(СтрШаблон("<div data-bit-sectionname='%1'><table><tbody>%2</tbody></table></div>", АтрибутСекции, СтрСоединить(СтрокиТаблицыHTML, "")));
	КонецЦикла;
	
	Если ТаблицыДиагнозовHTML.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTMLТела);
	Для Каждого ТаблицаДиагнозовHTML Из ТаблицыДиагнозовHTML Цикл
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело, ТаблицаДиагнозовHTML);
	КонецЦикла;
	
	ТекстHTMLТела = РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML);
	
КонецПроцедуры

Процедура ДополнитьЗаголовкиКолонокТаблицыДиагнозов(ЗаголовкиКолонок, ТаблицаДиагнозов, ИмяКолонки, Заголовок)
	
	Если ТаблицаДиагнозов.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
		ЗаголовкиКолонок.Добавить(Новый Структура("ИмяКолонки, Заголовок", ИмяКолонки, Заголовок));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрамиПоРЭМД(ИдентификаторРЭМД, ТаблицаПараметров, Ссылка)
	
	Если ИдентификаторРЭМД = 50 Тогда
		ДополнитьПараметрамиПоРЭМД_50(ИдентификаторРЭМД, ТаблицаПараметров, Ссылка);
	ИначеЕсли ИдентификаторРЭМД = 63 Тогда
		ДополнитьПараметрамиПоРЭМД_63(ИдентификаторРЭМД, ТаблицаПараметров);
	ИначеЕсли ИдентификаторРЭМД = 121 Тогда
		ДополнитьПараметрамиПоРЭМД_121(ИдентификаторРЭМД, ТаблицаПараметров, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрамиПоРЭМД_63(ИдентификаторРЭМД, ТаблицаПараметров)
	
	// Связанные документы
	Для Каждого СтрокаСвязанногоДокумента Из ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", "СвязанныйДокумент")) Цикл
		МедицинскийДокумент = СтрокаСвязанногоДокумента.Значение;
		Если МедицинскийДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент) = "Документ.Прием" Тогда
			Для Каждого СтрокаШаблона Из МедицинскийДокумент.ШаблоныПриема Цикл
				Шаблон = СтрокаШаблона.ШаблонПриема;
				ДополнитьТаблицуДаннымиСвязанногоДокументаПоШаблону(Шаблон, ТаблицаПараметров, МедицинскийДокумент);
			КонецЦикла;
		Иначе
			Шаблон = МедицинскийДокумент.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
			ДополнитьТаблицуДаннымиСвязанногоДокументаПоШаблону(Шаблон, ТаблицаПараметров, МедицинскийДокумент);
		КонецЕсли;
	КонецЦикла;
	
	// Договор
	СтрокаДоговора = ТаблицаПараметров.Найти("Договор", "localid");
	Если СтрокаДоговора <> Неопределено И ЗначениеЗаполнено(СтрокаДоговора.Значение) Тогда
		ДополнитьТаблицуДаннымиДоговора(СтрокаДоговора.Значение, ТаблицаПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПараметрамиПоРЭМД_121(ИдентификаторРЭМД, ТаблицаПараметров, Ссылка)
	
	ДанныеЭМД = Новый Соответствие;
	ДополнитьДаннымиОрганизацииДокумента(ДанныеЭМД, Ссылка);
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ДанныеЭМД.Получить("АдресОрганизации"), "АдресФилиала");
	
	КонтактыФилиала = ДанныеЭМД.Получить("КонтактыОрганизации");
	Если КонтактыФилиала = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Контакт Из КонтактыФилиала Цикл
		Если СтрНачинаетсяС(Контакт.Значение, "tel:") Тогда
			ДополнитьТаблицуПараметров(ТаблицаПараметров, Контакт.Значение, "ТелефонФилиала");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Ссылка.Клиент.умцМестоРаботы) <> Тип("Строка") Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, АдресОрганизации(Ссылка.Клиент.умцМестоРаботы), "АдресРаботы");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуДаннымиСвязанногоДокументаПоШаблону(Шаблон, ТаблицаПараметров, МедицинскийДокумент)
	
	Если Не ЗначениеЗаполнено(Шаблон.ВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСвязанногоДокумента = Новый Структура("ВидСЭМД, ВидРЭМД, ДатаДокумента, Серия, Номер, Ссылка");
	ДанныеСвязанногоДокумента.ВидРЭМД = Шаблон.ВидДокумента;
	ДанныеСвязанногоДокумента.ВидСЭМД = Шаблон.ВидДокумента.ВидДокумента;
	ДанныеСвязанногоДокумента.ДатаДокумента = ИнтеграцияЕГИСЗСервер.ПредставлениеЛокальнойДатыСоСмещением(МедицинскийДокумент.Дата, "ДФ=ггггММддЧЧмм");
	ДанныеСвязанногоДокумента.Номер = МедицинскийДокумент.Номер;
	ДанныеСвязанногоДокумента.Ссылка = МедицинскийДокумент;
	
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ДанныеСвязанногоДокумента, "ДанныеСвязанногоДокумента");
	
КонецПроцедуры

Процедура ДополнитьТаблицуДаннымиДоговора(Договор, ТаблицаПараметров)
	
	Если ДопСерверныеФункции.ИмяСсылочногоТипа(Договор) = "Документ.ДоговорСКлиентом" Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Договор, "ДоговорСКлиентом");
	ИначеЕсли ДопСерверныеФункции.ИмяСсылочногоТипа(Договор) = "Справочник.СоглашенияСтрахования" Тогда
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Договор, "ДоговорСКонтрагентом");
		ДополнитьТаблицуПараметров(ТаблицаПараметров, Договор.Владелец, "Контрагент");
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеДанныеДляФормированияСЭМД(ИдентификаторРЭМД)
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ВидРЭМД", Строка(ИдентификаторРЭМД));
	ДополнительныеДанные.Вставить("КорректныеCodeSystem", ПолучитьКорректныеCodeSystem(Строка(ИдентификаторРЭМД)));
	ДополнительныеДанные.Вставить("ФиксированныеВерсииКлассификаторов", ПолучитьФиксированныеВерсииКлассификаторов(Строка(ИдентификаторРЭМД)));
	
	Возврат ДополнительныеДанные;
	
КонецФункции

Функция ПолучитьФиксированныеВерсииКлассификаторов(ВидРЭМД)
	
	ТабДокумент = Справочники.РегистрируемыеЭлектронныеМедДокументы.ПолучитьМакет("ФиксированныеВерсииКлассификаторов");
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДокумент.Область(1, 1, ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы));
	ПостроительОтчета.Выполнить();
	
	ВсеФиксированныеВерсииКлассификаторов = ПостроительОтчета.Результат.Выгрузить();
	ФиксированныеВерсииКлассификаторов = ВсеФиксированныеВерсииКлассификаторов.СкопироватьКолонки();
	
	Для Каждого СтрокаКорректногоCodeSystem Из ВсеФиксированныеВерсииКлассификаторов.НайтиСтроки(Новый Структура("ВидРЭМД", ВидРЭМД)) Цикл
		ЗаполнитьЗначенияСвойств(ФиксированныеВерсииКлассификаторов.Добавить(), СтрокаКорректногоCodeSystem);
	КонецЦикла;
	
	Возврат ФиксированныеВерсииКлассификаторов;
	
КонецФункции

Функция ПолучитьАтрибутыФиксированнойВерсииКлассификатора(Ссылка, ДанныеДляУзлаКлассификатора)
	
	Попытка
		СтруктураПоиска = Новый Структура("code, codesystem", Строка(Ссылка.УИДЕГИСЗ), Ссылка.OIDСправочникаИсточника);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	СтрокиАтрибутов = ДанныеДляУзлаКлассификатора.ДополнительныеДанные.ФиксированныеВерсииКлассификаторов.НайтиСтроки(СтруктураПоиска);
	Если СтрокиАтрибутов.Количество() > 0 Тогда
		АтрибутыФиксированнойВерсииКлассификатора = Новый Структура("version,codesystemname,name", СтрокиАтрибутов[0].codesystemversion, СтрокиАтрибутов[0].codesystemname, СтрокиАтрибутов[0].displayname);
		ЗаполнитьЗначенияСвойств(АтрибутыФиксированнойВерсииКлассификатора, СтрокиАтрибутов[0]);
		Возврат АтрибутыФиксированнойВерсииКлассификатора;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДополнитьПараметрамиПоРЭМД_50(ИдентификаторРЭМД, ТаблицаПараметров, Ссылка)
	
	ДанныеЭМД = Новый Соответствие;
	ДополнитьДаннымиОрганизацииДокумента(ДанныеЭМД, Ссылка);
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ДанныеЭМД.Получить("OIDМедицинскойОрганизации"),	"OIDМедицинскойОрганизации_50");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ДанныеЭМД.Получить("ОГРН"),						"ОГРН_50");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ДанныеЭМД.Получить("НаименованиеОрганизации"),	"НаименованиеОрганизации_50");
	ДополнитьТаблицуПараметров(ТаблицаПараметров, ДанныеЭМД.Получить("АдресОрганизации"),			"АдресОрганизации_50");
	
КонецПроцедуры

Функция ЗаполняетсяПоДаннымДокумента(СтрокаLocalid, Шаблон)
	
	Если Шаблон.ЗаполнятьДиагнозыИзТабличнойЧасти Тогда
		Возврат СтрокаLocalid.Свойство("ИсточникЗаполнения") И СтрокаLocalid.ИсточникЗаполнения = ИсточникЗаполненияПоДиагнозам();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕдиницаИзмененияНСИПоОКЕИ(ЕдиницаОКЕИ)
	
	Если ЗначениеЗаполнено(ЕдиницаОКЕИ.Код) Тогда
		Возврат ИнтеграцияЕГИСЗСервер.ПолучитьЭлементКлассификатораПоЗначениюАтрибута("OKEI_CODE", СокрЛП(ЕдиницаОКЕИ.Код), Перечисления.ВидыКлассификаторовМинЗдрава.ЕдиницыИзмерения);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти