#Область ПрограммныйИнтерфейс

#Область ПроцедурыФункцииСозданияЗаписиДокументаDOM

// Создает документ DOM из текста HTML
//
// Параметры:
//  ТекстHTML	 - Строка - текст документа.
// 
// Возвращаемое значение:
//   ДокументDOM.
//
Функция СоздатьДокументDOM(Знач ТекстHTML = Неопределено) Экспорт 
	
	Если ТекстHTML = Неопределено Тогда 
		ТекстHTML = РаботаСHTMLКлиентСервер.ПолучитьТекстHTMLПустогоДокумента();
	КонецЕсли;
	
	ИсточникДанныхXML = Новый ЧтениеHTML;
	ИсточникДанныхXML.УстановитьСтроку(ТекстHTML);
	
	ПостроительDOM = Новый ПостроительDOM;
	Возврат ПостроительDOM.Прочитать(ИсточникДанныхXML);
	
КонецФункции

// Построение документа DOM из стоки XML
//
// Параметры:
//  СтрокаXML	 - Строка	 - Строка XML, по которой нужно построить DOM.
// 
// Возвращаемое значение:
//  ДокументDOM - Построенный по строке XML документ DOM.
//
Функция DOMИзСтрокиXML(Знач ТекстXML) Экспорт
	
	ИсточникДанныхXML = Новый ЧтениеXML;
	ИсточникДанныхXML.УстановитьСтроку(ТекстXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	Возврат ПостроительDOM.Прочитать(ИсточникДанныхXML);
	
КонецФункции

// Преобразует DOM документ или его элемент в строку XML.
//
// Параметры:
//  УзелDOM					 - ДокументDOM	 - документ или узел DOM.
//  ЗаписыватьДекларациюXML	 - Булево -  признак необходимости записывать объявление XML. 
// 
// Возвращаемое значение:
//  Строка - xml текст, полученный из документа DOM.
//
Функция СтрокаXMLИзDOM(УзелDOM, ЗаписыватьДекларациюXML = Ложь) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.КонфигурацияDOM.УстановитьПараметр("xml-declaration",			ЗаписыватьДекларациюXML);
	ЗаписьDOM.КонфигурацияDOM.УстановитьПараметр("discard-default-content",	Истина);
	ЗаписьDOM.Записать(УзелDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить текст HTML документа из значения типа ДокументDOM.
//
// Параметры:
//  ДокументHTML - ДокументDOM	 - исходный документ.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьТекстHTMLДокументаDOM(ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Сформировать полный текст документа HTML из текста тела.
//
// Параметры:
//  ТекстHTML	 - Строка - тело документа.
// 
// Возвращаемое значение:
//   Строка.
//
Функция СформироватьПолныйТекстДокументаHTML(ТекстHTML) Экспорт
	
	#Если ВебКлиент Или МобильныйКлиент Тогда
		Возврат РаботаСDOMСервер.СформироватьПолныйТекстДокументаHTML(ТекстHTML);
	#Иначе
		Возврат ПолучитьТекстHTMLДокументаDOM(СоздатьДокументDOM(ТекстHTML));
	#КонецЕсли
	
КонецФункции

// Извлекает внутренний текст элемента HTML документа.
//
// Параметры:
//  ЭлементHTML	 - ВнешнийОбъект - элемент документа
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьВнутреннийHTMLЭлемента(ЭлементHTML) Экспорт
	
	Если ЭтоТекстовоеСодержимое(ЭлементHTML) Тогда 
		Возврат ПолучитьВнутреннийHTMLТекстовогоСодержимого(ЭлементHTML.ТекстовоеСодержимое);
	КонецЕсли;
	
	ВнутреннийТекстHTML = "";
	Для Каждого ДочернийУзел Из ЭлементHTML.ДочерниеУзлы Цикл
		ВнутреннийТекстHTML = ВнутреннийТекстHTML + ПолучитьВнешнийHTMLЭлемента(ДочернийУзел); 
	КонецЦикла;
	
	Возврат ВнутреннийТекстHTML;
	
КонецФункции

// Извлекает внешний текст элемента HTML документа.
//
// Параметры:
//  ЭлементHTML	 - ВнешнийОбъект - элемент документа
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьВнешнийHTMLЭлемента(ЭлементHTML) Экспорт
	
	Если ЭтоТекстовоеСодержимое(ЭлементHTML) Тогда 
		Возврат ПолучитьВнутреннийHTMLТекстовогоСодержимого(ЭлементHTML.ТекстовоеСодержимое);
	КонецЕсли;
	
	ЭлементHTML.Нормализовать();
	ЗаписьDOM = Новый ЗаписьDOM; 
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку(); 
	ЗаписьDOM.Записать(ЭлементHTML, ЗаписьHTML);
	
	Возврат ЗаписьHTML.Закрыть();	
	
КонецФункции

// Формирует код тела HTML из документа DOM.
//
// Параметры:
//  ДокументHTML - ДокументDOM	 - текст HTML.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML) Экспорт
	
	Если ДокументHTML.Тело = Неопределено Тогда 
		Возврат "";
	КонецЕсли;
	
	Возврат ПолучитьВнутреннийHTMLЭлемента(ДокументHTML.Тело);
	
КонецФункции

// Извлекает код тела HTML из полного текста документа.
//
// Параметры:
//  ТекстHTML	 - Строка	 - текст документа.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьКодТелаHTMLИзКодаДокумента(Знач ТекстHTML) Экспорт
	
	#Если ВебКлиент Или МобильныйКлиент Тогда
		Возврат РаботаСDOMСервер.ПолучитьКодТелаHTMLИзКодаДокумента(ТекстHTML);
	#Иначе
		Возврат ПолучитьКодТелаHTMLИзДокументаDOM(СоздатьДокументDOM(ТекстHTML));
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область ПроцедурыФункцииСозданияУзловИАтрибутов

// Атрибуты и значения по умолчанию для тега HTML для работы с HTML шаблонами приема.
//
// Параметры:
//  ИмяЭлемента	 - Строка 	 - имя тега.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьАтрибутыПоУмолчаниюDOM(Знач ИмяЭлемента) Экспорт 
	
	ИмяЭлемента = ВРег(ИмяЭлемента);
	
	Атрибуты = Новый Структура;
	
	Если ИмяЭлемента = "TABLE" Тогда
		Атрибуты.Вставить("style", "TABLE-LAYOUT: fixed; border-collapse: collapse;");
		Атрибуты.Вставить("width", "100%");
	    Атрибуты.Вставить("border", "1"); 
	КонецЕсли;
	
	Возврат Атрибуты;
	
КонецФункции

// Установить атрибут элементу DOM
//
// Параметры:
//  ЭлементHTML		 - ЭлементDOM, ВнешнийОбъект - элемент документа.
//  ИмяАтрибута		 - Строка	 - имя.
//  ЗначениеАтрибута - Строка - значение.
// 
// Возвращаемое значение:
//   АтрибутDOM.
//
Функция УстановитьАтрибутЭлементуDOM(ЭлементHTML, ИмяАтрибута, Знач ЗначениеАтрибута = Неопределено) Экспорт
	
	Если ЭлементHTML.Атрибуты = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументHTML = ЭлементHTML.ДокументВладелец;
	НовыйАтрибут = ДокументHTML.СоздатьАтрибут(ИмяАтрибута);
	НовыйАтрибут.Значение = Строка(ЗначениеАтрибута);
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибут);
	
	Возврат НовыйАтрибут;
	
КонецФункции

// Установить атрибуты элементу DOM
//
// Параметры:
//  ЭлементHTML			 - ЭлементDOM, ВнешнийОбъект	 - элемент документа.
//  СтруктураАтрибутов	 - Структура					 - имена и значения атрибутов.
//
Процедура УстановитьАтрибутыЭлементуDOM(ЭлементHTML, СтруктураАтрибутов) Экспорт
	
	Для Каждого кзАтрибут Из СтруктураАтрибутов Цикл
		УстановитьАтрибутЭлементуDOM(ЭлементHTML, кзАтрибут.Ключ, кзАтрибут.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Удалить атрибут элементу DOM
//
// Параметры:
//  ЭлементHTML	 - ЭлементDOM, ВнешнийОбъект	 - элемент документа.
//  ИмяАтрибута	 - Строка						 - имя атрибута.
//
Процедура УдалитьАтрибутЭлементуDOM(ЭлементHTML, ИмяАтрибута) Экспорт
	
	Если ЭлементHTML.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута) <> Неопределено Тогда 
		ЭлементHTML.Атрибуты.УдалитьИменованныйЭлемент(ИмяАтрибута);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет элемент в документ DOM
//
// Параметры:
//  ДокументHTML	 - ДокументDOM	 - документ.
//  ИмяЭлемента		 - Строка		 - имя тега.
//  Родитель		 - ЭлементDOM	 - место вставки (родитель).
//  ВставитьПеред	 - Булево		 - место вставки в документ.
//  Атрибуты		 - Структура	 - значения атрибутов нового элемента.
// 
// Возвращаемое значение:
//   ЭлементDOM.
//
Функция СоздатьЭлементDOM(ДокументHTML, ИмяЭлемента, Родитель = Неопределено, ВставитьПеред = Неопределено, Атрибуты = Неопределено) Экспорт 
	
	ЭлементHTML = ДокументHTML.СоздатьЭлемент(ИмяЭлемента);
	Если Родитель <> Неопределено Тогда
		Если ВставитьПеред = Неопределено Тогда 
			Родитель.ДобавитьДочерний(ЭлементHTML);
		Иначе
			Родитель.ВставитьПеред(ЭлементHTML, ВставитьПеред);
		КонецЕсли;
	КонецЕсли;
	
	Если Атрибуты = Неопределено Тогда 
		Атрибуты = ПолучитьАтрибутыПоУмолчаниюDOM(ИмяЭлемента);
	КонецЕсли;
	
	УстановитьАтрибутыЭлементуDOM(ЭлементHTML, Атрибуты);
	
	Возврат ЭлементHTML;
	
КонецФункции

// Добавляет элемент, заданный текстом, в документ DOM
//
// Параметры:
//  ДокументHTML	 - ДокументDOM	 - документ.
//  Текст			 - Строка		 - внешнее содержимое элемента.
//  Родитель		 - ЭлементDOM	 - место вставки (родитель).
//  ВставитьПеред	 - Булево		 - место вставки в документ.
//  Атрибуты		 - Структура	 - значения атрибутов нового элемента.
// 
// Возвращаемое значение:
//   ЭлементDOM, Строка.
//
Функция СоздатьТекстовыйЭлементDOM(ДокументHTML, Текст, Знач Родитель = Неопределено, ВставитьПеред = Неопределено, Атрибуты = Неопределено) Экспорт
	
	// У текста не может быть атрибутов, нужно обрамлять в отдельный тег
	БлокТекста = Неопределено;
	Если Атрибуты <> Неопределено Тогда
		БлокТекста = СоздатьЭлементDOM(ДокументHTML, "DIV", Родитель, ВставитьПеред, Атрибуты);
	КонецЕсли;
	
	ТекстСтрока = Строка(Текст);
	ЭлементТекстHTML = ДокументHTML.СоздатьТекстовыйУзел(ТекстСтрока);
	
	Если БлокТекста <> Неопределено Тогда 
		Родитель = БлокТекста;
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		Если ВставитьПеред = Неопределено Тогда 
			Родитель.ДобавитьДочерний(ЭлементТекстHTML);
		Иначе
			Родитель.ВставитьПеред(ЭлементТекстHTML, ВставитьПеред);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(БлокТекста = Неопределено, ЭлементТекстHTML, БлокТекста);
	
КонецФункции

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедурыФункции

// Истина, если это элемент текстового содержимого.
//
// Параметры:
//  ЭлементHTML	 - ЭлементDOM, ТекстDOM - проверяемый элемент.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЭтоТекстовоеСодержимое(ЭлементHTML) Экспорт 
	
	Возврат (ТипЗнч(ЭлементHTML) = Тип("ТекстDOM"));
	
КонецФункции

// Ищет элементы в документе DOM по имени тега.
//
// Параметры:
//  ДокументHTML	 - ДокументDOM	 - документ.
//  ИмяЭлемента		 - Строка		 - имя тега.
//  ВернутьМассив1С	 - Булево		 - вернуть ли результат как Массив.
// 
// Возвращаемое значение:
//   Массив, ВнешнийОбъект.
//
Функция ПолучитьЭлементыПоИмени(ДокументHTML, Знач ИмяЭлемента, ВернутьМассив1С = Ложь) Экспорт 
	
	Коллекция = ДокументHTML.getElementByTagName(ИмяЭлемента);
		
	Если Не ВернутьМассив1С Тогда
		Возврат Коллекция;
	Иначе
		мЭлементов = Новый Массив();
		Для каждого элементКоллекции из Коллекция Цикл
			мЭлементов.Добавить(элементКоллекции);
		КонецЦикла;
		Возврат мЭлементов;
	КонецЕсли;
	
КонецФункции

// Позволяет заменить элемент на новый, заданный как HTML текст.
//
// Параметры:
//  ЭлементHTML				 - ВнешнийОбъект - исходный тег.
//  Значение				 - Строка		 - значение.
//  ВставлятьПереносыСтрок	 - Булево		 - добавлять ли переносы строк перед новым элементом в документе.
// 
// Возвращаемое значение:
//   ВнешнийОбъект.
//
Функция ЗаменитьЭлементНаТекстовоеСодержимое(ЭлементHTML, Знач Значение, Знач ВставлятьПереносыСтрок = Истина) Экспорт
	
	РодительЭлемента = ЭлементHTML.parentNode;
	Если ВставлятьПереносыСтрок Тогда 
		мсСтроки = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(Значение, Символы.ПС);
		ЧислоСтрок = мсСтроки.Количество() - 1;
		Для Сч = 0 По ЧислоСтрок Цикл 
			НовыйУзел = ЭлементHTML.ownerDocument.createTextNode(мсСтроки[Сч]); // Строка.
			РодительЭлемента.insertBefore(НовыйУзел, ЭлементHTML);
			Если Сч <> ЧислоСтрок Тогда 
				НовыйУзел = ЭлементHTML.ownerDocument.createElement("br"); // Перенос.
				РодительЭлемента.insertBefore(НовыйУзел, ЭлементHTML);
			КонецЕсли;
		КонецЦикла;
	Иначе
		НовыйУзел = ЭлементHTML.ownerDocument.createTextNode(Значение);
		РодительЭлемента.insertBefore(НовыйУзел, ЭлементHTML);
	КонецЕсли;
	РодительЭлемента.removeChild(ЭлементHTML);
	Возврат НовыйУзел;
	
КонецФункции

// Получить выбранное значение в теге select документа на форме.
//
// Параметры:
//  ЭлементHTML					 - ВнешнийОбъект - исходный тег.
//  ВозвращатьПервыйЕслиНеВыбран - Булево		 - вернуть ли первое значение списка, если нет выбранного.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьВыбранноеЗначениеSelect(ЭлементHTML, ВозвращатьПервыйЕслиНеВыбран = Истина) Экспорт 
	
	// Проверяем атрибут selected у элементов списка
	Для Каждого ЗначениеВыбора Из ЭлементHTML.ДочерниеУзлы Цикл
		Если ЗначениеВыбора.Атрибуты.ПолучитьИменованныйЭлемент("selected") <> Неопределено И
			ЗначениеВыбора.Атрибуты.ПолучитьИменованныйЭлемент("value") <> Неопределено Тогда
			Возврат ЗначениеВыбора.Атрибуты.ПолучитьИменованныйЭлемент("value").ЗначениеУзла;
		КонецЕсли;
	КонецЦикла;
	
	// Проверяем атрибут value у самого элемента
	ВыбранноеЗначение = ЭлементHTML.Атрибуты.ПолучитьИменованныйЭлемент("value");
	Если ВыбранноеЗначение <> Неопределено Тогда 
		Возврат ВыбранноеЗначение.ЗначениеУзла;
	КонецЕсли;
	
	Если ВозвращатьПервыйЕслиНеВыбран Тогда
		Если ЭлементHTML.ДочерниеУзлы.Количество() > 0 Тогда
			ВыбранноеЗначение = ЭлементHTML.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("value");
			Если ВыбранноеЗначение <> Неопределено Тогда 
				Возврат ВыбранноеЗначение.ЗначениеУзла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает выбранное значение в теге select документа на форме.
//
// Параметры:
//  ЭлементHTML	 - ВнешнийОбъект - исходный тег.
//  Значение	 - Строка		 - новое текущее значение выбора.
//
Процедура УстановитьВыбранноеЗначениеSelect(ЭлементHTML, Знач Значение) Экспорт
	
	ЕстьВыбранноеЗначение = Ложь;
	Значение = Строка(Значение);
	Для Каждого ЗначениеВыбора Из ЭлементHTML.ДочерниеУзлы Цикл
		ЗначениеЭлемента = ЗначениеВыбора.Атрибуты.ПолучитьИменованныйЭлемент("value");
		
		Если ЗначениеЭлемента <> Неопределено И ЗначениеЭлемента.ЗначениеУзла = Значение Тогда
			ЕстьВыбранноеЗначение = Истина;
			РаботаСDOMКлиентСервер.УстановитьАтрибутЭлементуDOM(ЗначениеВыбора, "selected", "true");
		Иначе
			Если ЗначениеВыбора.Атрибуты.ПолучитьИменованныйЭлемент("selected") <> Неопределено Тогда 
				ЗначениеВыбора.Атрибуты.УдалитьИменованныйЭлемент("selected");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВыбранноеЗначение Тогда 
		РаботаСDOMКлиентСервер.УстановитьАтрибутЭлементуDOM(ЭлементHTML, "value", Значение);
	Иначе
		РаботаСDOMКлиентСервер.УдалитьАтрибутЭлементуDOM(ЭлементHTML, "value");
	КонецЕсли;
		
КонецПроцедуры

// Добавить произвольный текс HTML в элемент HTML документа.
//
// Параметры:
//  ЭлементHTML					 - ВнешнийОбъект - исходный тег.
//  ТекстHTML					 - Строка		 - текст вставки.
//  ЗамещатьВложенныеЭлементы	 - Булево		 - вставить ли текст не рядом, а в указанный элемент,
//  УзелПередКоторымВставить	 - ВнешнийОбъект - место вставки.
//
Процедура ДобавитьПроизвольныйHTMLВЭлемент(ЭлементHTML, Знач ТекстHTML, ЗамещатьВложенныеЭлементы = Ложь, УзелПередКоторымВставить = Неопределено) Экспорт 
	
	Если ЗамещатьВложенныеЭлементы Тогда
		Пока ЭлементHTML.ЕстьДочерниеУзлы() Цикл
			ЭлементHTML.УдалитьДочерний(ЭлементHTML.ПоследнийДочерний);
		КонецЦикла;
	КонецЕсли;
	
	// Создаем документ из одного элемента
	Если ЗначениеЗаполнено(ТекстHTML) Тогда
		
		ДокументHTML = СоздатьДокументDOM("<t id = ""container"">" + ТекстHTML + "</t>");
		Если ДокументHTML.Тело <> Неопределено Тогда
			НовыеЭлементыHTML = ДокументHTML.ПолучитьЭлементПоИдентификатору("container").ДочерниеУзлы;
			
			Для Каждого НовыйЭлемент Из НовыеЭлементыHTML Цикл 
				ИмпортированныйЭлемент = ЭлементHTML.ДокументВладелец.ИмпортироватьУзел(НовыйЭлемент, Истина);
				Если Не ЗамещатьВложенныеЭлементы И УзелПередКоторымВставить <> Неопределено Тогда
					ЭлементHTML.ВставитьПеред(ИмпортированныйЭлемент, УзелПередКоторымВставить);
				Иначе
					ЭлементHTML.ДобавитьДочерний(ИмпортированныйЭлемент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Замещает элемент HTML новый, зажанный как текст HTML.
//
// Параметры:
//  ЭлементHTML	 - ВнешнийОбъект - исходный тег.
//  ТекстHTML	 - Строка		 - текст замены.
//
Процедура ЗаменитьЭлементНаПроизвольныйHTML(ЭлементHTML, Знач ТекстHTML) Экспорт
	
	ДобавитьПроизвольныйHTMLВЭлемент(ЭлементHTML.РодительскийУзел, ТекстHTML, Ложь, ЭлементHTML);
	ЭлементHTML.РодительскийУзел.УдалитьДочерний(ЭлементHTML);
	
КонецПроцедуры

// Преобразовует произвольную коллекцию в массив
//
// Параметры:
//  Коллекция	 - Произвольный	 - произвольная коллекция.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПреобразоватьОбходимуюКоллекциюВМассив(Коллекция) Экспорт
	
	мсКоллекция = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл 
		мсКоллекция.Добавить(Элемент);
	КонецЦикла;
	
	Возврат мсКоллекция;
	
КонецФункции

// Формирует внутренний текст без тегов из HTML текста.
//
// Параметры:
//  Текст	 - Строка - текст HTML.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьВнутреннийHTMLТекстовогоСодержимого(Знач Текст) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM("<t></t>");
	УзелВставки = ДокументHTML.ПолучитьЭлементыПоИмени("T")[0];
	ТекстовыйУзел = РаботаСDOMКлиентСервер.СоздатьТекстовыйЭлементDOM(ДокументHTML, Текст, УзелВставки);
	ВнешнийHTML = ПолучитьВнешнийHTMLЭлемента(УзелВставки);
	
	Возврат РаботаСHTMLКлиентСервер.УдалитьВсеТегиИзТекста(ВнешнийHTML);
	
КонецФункции

#КонецОбласти

#КонецОбласти
