#Область ПрограммныйИнтерфейс

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в мезанизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета.
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(НЕ ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;
	
КонецФункции

// Возвращает имя макета по-умолчанию для документа или иного метаданного для печати.
//
// Параметры
//  ИмяМетаданных	- имя метаданных объекта
//  ДеревоКнопок	- дерево кнопок печати
//
// Возвращаемое значение:
//   ПостроительОтчета.
//
Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоКнопок) Экспорт
	
	ИмяМакетаПоУмолчанию = ХранилищеПользовательскихНастроекОтчетов.Загрузить(ИмяМетаданных, "ПечатнаяФорма");
	
	Если ИмяМакетаПоУмолчанию = Неопределено Или ДеревоКнопок.Строки.Количество() = 0 Тогда
		
		СтрокаПоУмолчанию = Неопределено;
		
		Если ИмяМакетаПоУмолчанию <> Неопределено 
			И ДеревоКнопок.Строки.Количество() = 0
		Тогда
			ХранилищеПользовательскихНастроекОтчетов.Удалить(ИмяМетаданных, "ПечатнаяФорма", ИмяПользователя())
		КонецЕсли;
		
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ()

// Функция формирует дерево макетов печати объекта метаданных.
//
// Параметры:
//  СсылкаОбъекта - Ссылка объекта метаданных
//  ВнутренниеПечатныеФормы - ТаблицаЗначений, Структура
//  Действие - Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//  ДействиеУстановитьПечатьПоУмолчанию - Действие кнопки по умолчанию (процедура
//  должна быть описана в форме объекта, на который навешивается подменю).
//  ДобавлятьВДеревоРазделительИПечатьПоУмолчанию - булево,
//  ПредставлениеПечатнойФормы - Строка, Наименование элемента справочника ВнешниеОбработки
//
// Возвращаемое значение
//  ДеревоКнопок - ДеревоЗначений.
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, ДействиеУстановитьПечатьПоУмолчанию = Неопределено, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено) Экспорт
	
	// Сформировать структуру дерева
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	// Добавить в дерево встроенные печатные формы
	ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию, ПредставлениеПечатнойФормы);
	
	// Добавить в дерево дополнительные печатные формы из Справочник.ДополнительныеПечатныеФормы.
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию, ПредставлениеПечатнойФормы);
	
	// Добавить в дерево дополнительные печатные формы из Справочник.ШаблоныПечати - шаблоны печати в Word-формате.
	ДобавитьВДеревоМакетовШаблоныПечати(ДеревоКнопок, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию, ПредставлениеПечатнойФормы);
	
	// Добавить в дерево пакеты документов из Справочник.ПакетыПечати.
	ДобавитьВДеревоМакетовПакетыПечати(ДеревоКнопок, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию, ПредставлениеПечатнойФормы);
	
	// Получить имя макета печати по умолчанию
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	// Для подменю Печать объекта: установить пометку кнопки печати по умолчанию.
	Если НЕ СтрокаПоУмолчанию = Неопределено Тогда
		СтрокаПоУмолчанию.Пометка = Истина;
	КонецЕсли;
	
	// Добавит печать по умолчанию
	Если ДобавлятьВДеревоРазделительИПечатьПоУмолчанию И ДеревоКнопок.Строки.Количество() > 0 Тогда
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", Тип("КнопкаФормы"), "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
		
	КонецЕсли;
	
	Возврат ДеревоКнопок;
	
КонецФункции // ПолучитьДеревоМакетовПечати()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, ДействиеПечатьПоУмолчанию) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			
			ИмяКнопки = Строка (Новый УникальныйИдентификатор);
			
			ПечатьПоУмолчанию = КоманднаяПанель.ПодчиненныеЭлементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"),"",ДействиеПечатьПоУмолчанию);
			
			ПечатьПоУмолчанию.Подсказка = "Печать по умолчанию";
			
		КонецЕсли; 
		
		ПечатьПоУмолчанию.Текст       = СтрокаПоУмолчанию.Текст;
		ПечатьПоУмолчанию.Доступность = Истина; 
		
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		
		ПечатьПоУмолчанию.Текст       = "Печать по умолчанию не назначена"; 
		ПечатьПоУмолчанию.Доступность = Ложь; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок.


// Формирует подменю "Печать"
//
// Параметры:
//  ПодменюПечати				 - ГруппаФормы	 - группа кнопок печати.
//  КоманднаяПанель				 - ГруппаФормы	 - командная панель, куда будет помещено подменю.
//  СоздаватьПриНеобходимости	 - Булево - добавлять ли само подменю, если его нет.
//
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	
	Если Не ПодменюПечати = Неопределено или  Не СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПодменю = Строка (Новый УникальныйИдентификатор);
	ПодменюПечати = КоманднаяПанель.ПодчиненныеЭлементы.Добавить(ИмяПодменю,Тип("ГруппаФормы"),"Печать");
	ПодменюПечати.Вид = ВидГруппыФормы.Подменю;
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
	
КонецПроцедуры

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент.
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт
	
	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ДополнительныеПараметры = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ДополнительныеПараметрыОбработки.Получить();
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла, ИсточникМакета.СсылкаНаВнешнююОбработку.БезопасныйРежим);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение.
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
//
// Параметры:
//  ДеревоМакетов - Дерево значений
//  СсылкаОбъекта - Ссылка объекта метаданных
//  Действие - Действие. Действие кнопки (процедура должна быть описана в форме объекта,
//  на который навешивается подменю)
//  ВнутренниеПечатныеФормы - ТаблицаЗначений, Структура
//  ДобавлятьВДеревоРазделительИПечатьПоУмолчанию - булево
//  ПредставлениеПечатнойФормы - Строка, Наименование элемента справочника ВнешниеОбработки.
//
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено)
	
	СтрокиДерева = ДеревоМакетов.Строки;
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Если ПредставлениеПечатнойФормы = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
		|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
		|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
		|	ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки КАК ВидОбработки,
		|	ВнешниеОбработкиПринадлежность.ПредставлениеКнопки,
		|	ВнешниеОбработкиПринадлежность.НомерСтроки
		|ИЗ
		|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
		|ГДЕ
		|	ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
		|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма
		|	И НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления
		|ИТОГИ ПО
		|	ЗаменяемаяПечатнаяФорма,
		|	Ссылка";
		
	Иначе
		Если СтрокиДерева.Количество() Тогда
			ВставкаВЗапрос = "ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма = &ЗаменяемаяПечатнаяФорма";
			Запрос.УстановитьПараметр("ЗаменяемаяПечатнаяФорма", СтрокиДерева[0].Имя);
		Иначе
			ВставкаВЗапрос = "ВнешниеОбработкиПринадлежность.Ссылка.Наименование = &ПредставлениеПечатнойФормы";
		КонецЕсли; 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
		|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
		|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
		|	ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки КАК ВидОбработки,
		|	ВнешниеОбработкиПринадлежность.ПредставлениеКнопки,
		|	ВнешниеОбработкиПринадлежность.НомерСтроки
		|ИЗ
		|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
		|ГДЕ
		|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
		|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
		|	И (ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма)
		|	И " + ВставкаВЗапрос + "
		|ИТОГИ ПО
		|	ЗаменяемаяПечатнаяФорма,
		|	Ссылка";
		
		Запрос.УстановитьПараметр("ПредставлениеПечатнойФормы", ПредставлениеПечатнойФормы);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОбработкиПечатнаяФорма", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель = Не СтрокиДерева.Количество() ;
	
	ВыборкаЗаменяемыхФорм = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаменяемыхФорм.Следующий() Цикл
		
		ЭтоЗаменяемаяФорма = ЗначениеЗаполнено(ВыборкаЗаменяемыхФорм.ЗаменяемаяПечатнаяФорма);
		НаименованиеПечатнойФормы = "";
		Если ЭтоЗаменяемаяФорма Тогда
			
			Если ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("ТаблицаЗначений") Тогда
				СтрокаВнутреннейПечатнойФормы = ВнутренниеПечатныеФормы.Найти(ВыборкаЗаменяемыхФорм.ЗаменяемаяПечатнаяФорма, "Имя");
				Если СтрокаВнутреннейПечатнойФормы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НаименованиеПечатнойФормы = СтрокаВнутреннейПечатнойФормы.Заголовок;
				
			ИначеЕсли ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("Структура") Тогда
				Если Не ВнутренниеПечатныеФормы.Свойство(ВыборкаЗаменяемыхФорм.ЗаменяемаяПечатнаяФорма, НаименованиеПечатнойФормы) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли; 
			
		КонецЕсли;
		ПодменятьВстроеннуюФорму = Истина;
		ВыборкаСсылок = ВыборкаЗаменяемыхФорм.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСсылок.Следующий() Цикл
			
			Если Не ЭтоЗаменяемаяФорма Тогда
				НаименованиеПечатнойФормы = ВыборкаСсылок.Наименование;
			КонецЕсли;
			
			Выборка = ВыборкаСсылок.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.ПредставлениеКнопки) Тогда
					НаименованиеПечатнойФормы = Выборка.ПредставлениеКнопки;
				КонецЕсли;
				
				СтруктураРасшифровки = Новый Структура("ВидПечатнойФормы, СсылкаНаВнешнююОбработку, ЗаменяемаяПечатнаяФорма, НомерСтроки, ПредставлениеКнопки", Выборка.ВидОбработки,ВыборкаСсылок.Ссылка, Выборка.ЗаменяемаяПечатнаяФорма, Выборка.НомерСтроки, Выборка.ПредставлениеКнопки);
				
				Если ЭтоЗаменяемаяФорма Тогда
					
					Подсказка = "Печатная форма заменена подключаемой";
					
					Если ПодменятьВстроеннуюФорму Тогда
						СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
						Если СтрокаДерева = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ПодменятьВстроеннуюФорму = Ложь;
						СтрокаДерева.Расшифровка = "Структура";
						СтрокаДерева.ЗаменяемаяПечатнаяФорма = СтруктураРасшифровки.ЗаменяемаяПечатнаяФорма;
						СтрокаДерева.ВидПечатнойФормы = СтруктураРасшифровки.ВидПечатнойФормы;
						СтрокаДерева.НомерСтроки = СтруктураРасшифровки.НомерСтроки;
						СтрокаДерева.СсылкаНаВнешнююОбработку = СтруктураРасшифровки.СсылкаНаВнешнююОбработку;
						СтрокаДерева.Подсказка = Подсказка;
						Если ЗначениеЗаполнено(СтруктураРасшифровки.ПредставлениеКнопки) Тогда
							СтрокаДерева.Текст = СтруктураРасшифровки.ПредставлениеКнопки; 
						КонецЕсли;
						
						Если ПредставлениеПечатнойФормы = Неопределено Тогда
							Продолжить;
						Иначе
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Подсказка = "Подключаемая печатная форма";
					
				КонецЕсли;
				
				ПолноеНаименованиеПечатнойФормы = НаименованиеПечатнойФормы;
				СуществующаяСтрока = СтрокиДерева.Найти(ПолноеНаименованиеПечатнойФормы, "Текст");
				Счетчик = 1;
				Пока Не СуществующаяСтрока = Неопределено Цикл
					Счетчик = Счетчик + 1;
					ПолноеНаименованиеПечатнойФормы = НаименованиеПечатнойФормы + "(" + Счетчик + ")";
					ИндексСтрокиДереваЗаменяемойПечатнойФормы = ?(ЭтоЗаменяемаяФорма, СтрокиДерева.Индекс(СуществующаяСтрока) + 1,Неопределено);
					СуществующаяСтрока = СтрокиДерева.Найти(ПолноеНаименованиеПечатнойФормы, "Текст");
				КонецЦикла; 
				
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), Тип("КнопкаФормы"), ПолноеНаименованиеПечатнойФормы, Действие, СтруктураРасшифровки, , Подсказка, , );
				
				Если Не ПредставлениеПечатнойФормы = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВДеревоМакетовДополнительныеФормы()

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы.
//
// Параметры:
//  ДеревоМакетов - Дерево значений
//  ВнутренниеПечатныеФормы - ТаблицаЗначений, Структура
//  Действие - Действие. Действие кнопки (процедура должна быть описана в форме объекта,
//  на который навешивается подменю)
//  ДобавлятьВДеревоРазделительИПечатьПоУмолчанию - булево
//  ПредставлениеПечатнойФормы - Строка, Наименование элемента справочника ВнешниеОбработки.
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено)
	
	Если ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка Из ВнутренниеПечатныеФормы Цикл
			Если ПустаяСтрока(Строка.Имя) Тогда
				
			ИначеЕсли ПредставлениеПечатнойФормы = Неопределено или ПредставлениеПечатнойФормы = Строка.Заголовок Тогда
				
				СтруктураРасшифровки = Новый Структура("ВидПечатнойФормы, ЗаменяемаяПечатнаяФорма, ИмяМакета, МакетОбщий", Неопределено, Строка.Имя, Строка.ИмяМакета, Строка.МакетОбщий);
				ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка.Имя, Тип("КнопкаФормы"), Строка.Заголовок, Действие, СтруктураРасшифровки,,"Встроенная печатная форма");
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("Структура") Тогда
		
		// Это заглушка для совместимости со старыми документами
		Для Каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				
			ИначеЕсли ПредставлениеПечатнойФормы = Неопределено или ПредставлениеПечатнойФормы = КлючИЗначение.Значение Тогда
				
				ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, Тип("КнопкаФормы"), КлючИЗначение.Значение, Действие, КлючИЗначение.Ключ,,"Встроенная печатная форма");
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВДеревоМакетовВстроенныеФормы()

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
//
// Параметры:
//  ДеревоМакетов - Дерево значений
//  СсылкаОбъекта - Ссылка объекта метаданных
//  Действие - Действие. Действие кнопки (процедура должна быть описана в форме объекта,
//  на который навешивается подменю)
//  ВнутренниеПечатныеФормы - ТаблицаЗначений, Структура
//  ДобавлятьВДеревоРазделительИПечатьПоУмолчанию - булево
//  ПредставлениеПечатнойФормы - Строка, Наименование элемента справочника ВнешниеОбработки.
//
Процедура ДобавитьВДеревоМакетовШаблоныПечати(ДеревоМакетов, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено)
	
	ПустаяСсылкаОбъекта = Новый (ТипЗнч(СсылкаОбъекта));
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СсылкаОбъекта",ПустаяСсылкаОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныПечатиПринадлежность.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ШаблоныПечатиПринадлежность.Ссылка) КАК Наименование
	|ИЗ
	|	Справочник.ШаблоныПечати.Принадлежность КАК ШаблоныПечатиПринадлежность
	|ГДЕ
	|	ШаблоныПечатиПринадлежность.СсылкаОбъекта = &СсылкаОбъекта
	|	И НЕ ШаблоныПечатиПринадлежность.Ссылка.ПометкаУдаления"
	;
	ВыбШаблоны = Запрос.Выполнить().Выбрать();
	
	Пока ВыбШаблоны.Следующий() Цикл
		
		ПолноеНаименованиеПечатнойФормы = ВыбШаблоны.Наименование;
		Подсказка = "Дополнительная форма по шаблону печати";
		
		СтруктураРасшифровки = Новый Структура("ВидПечатнойФормы, СсылкаНаВнешнююОбработку, ЗаменяемаяПечатнаяФорма, НомерСтроки", Неопределено,ВыбШаблоны.Ссылка,Неопределено, Неопределено);
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), Тип("КнопкаФормы"), ПолноеНаименованиеПечатнойФормы, Действие, СтруктураРасшифровки, , Подсказка, , );	
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьВДеревоМакетовДополнительныеФормы()

// Добавить в дерево пакеты печати из Справочник.ПакетыПечати.
Процедура ДобавитьВДеревоМакетовПакетыПечати(ДеревоМакетов, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено)
	
	ПустаяСсылкаОбъекта = Новый (ТипЗнч(СсылкаОбъекта));
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СсылкаОбъекта",ПустаяСсылкаОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетыПечати.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПакетыПечати.Ссылка) КАК Наименование
	|ИЗ
	|	Справочник.ПакетыПечати КАК ПакетыПечати
	|ГДЕ
	|	НЕ ПакетыПечати.Ссылка.ПометкаУдаления
	|	И ПакетыПечати.МестоВызоваСсылка = &СсылкаОбъекта"
	;
	ВыбПакет = Запрос.Выполнить().Выбрать();
	
	Пока ВыбПакет.Следующий() Цикл
		
		ПолноеНаименованиеПечатнойФормы = ВыбПакет.Наименование;
		Подсказка = "Пакет документов";
		
		СтруктураРасшифровки = Новый Структура("ВидПечатнойФормы, СсылкаНаВнешнююОбработку, ЗаменяемаяПечатнаяФорма, НомерСтроки", Неопределено,ВыбПакет.Ссылка,Неопределено, Неопределено);
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), Тип("КнопкаФормы"), ПолноеНаименованиеПечатнойФормы, Действие, СтруктураРасшифровки, , Подсказка, , );	
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьВДеревоМакетовДополнительныеФормы()

// Печатает документ печатной формой по-умолчанию
Функция НапечататьДокументПоУмолчанию(Ссылка, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		// Это документ
		Попытка
			СтруктураВнутреннихПечатныхФорм = Документы[МетаданныеОбъекта.Имя].ПолучитьСтруктуруПечатныхФорм();
		Исключение
			СтруктураВнутреннихПечатныхФорм = Новый Структура;
		КонецПопытки;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		// Это справочник
		Попытка
			СтруктураВнутреннихПечатныхФорм = Справочники[МетаданныеОбъекта.Имя].ПолучитьСтруктуруПечатныхФорм();
		Исключение
			СтруктураВнутреннихПечатныхФорм = Новый Структура;
		КонецПопытки;
	Иначе
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецЕсли;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(МетаданныеОбъекта.Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Если ДеревоМакетов.Строки.Количество() <> 0 Тогда
			СтрокаПоУмолчанию = ДеревоМакетов.Строки[0];
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Расшифровка = СтрокаПоУмолчанию.Расшифровка;
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И Расшифровка <> "Структура" Тогда
			
		СтруктураНаПечать = ПечатьДокументовСервер.ПечатьСервер(Ссылка, Расшифровка, 1, НаПринтер);
		Если ТипЗнч(СтруктураНаПечать) = Тип("Структура") Тогда
			СтруктураНаПечать.Вставить("ЭтоВнутренняя", Истина);
			Возврат СтруктураНаПечать;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И Расшифровка = "Структура" Тогда
		
		Если ТипЗнч(СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда

			// Если по умолчанию внешняя печатная форма
			стрРасшифровка = Новый Структура;
			стрРасшифровка.Вставить("ВидПечатнойФормы", СтрокаПоУмолчанию.ВидПечатнойФормы);
			стрРасшифровка.Вставить("СсылкаНаВнешнююОбработку", СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку);
			стрРасшифровка.Вставить("ЗаменяемаяПечатнаяФорма", СтрокаПоУмолчанию.ЗаменяемаяПечатнаяФорма);
			стрРасшифровка.Вставить("ОбъектПечати", Ссылка);
			стрРасшифровка.Вставить("ЭтоВнутренняя", Ложь);
			Возврат стрРасшифровка;
		
		ИначеЕсли ТипЗнч(СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ШаблоныПечати") Тогда
		
			Возврат СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку;
			
		ИначеЕсли ТипЗнч(СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ПакетыПечати") Тогда
			ДанныеПакетаПечати = Новый Структура;
			ДанныеПакетаПечати.Вставить("ПечатныеФормы", ПечатьДокументовСервер.ПередатьСоставВКлиент(СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку, Ссылка));
			ДанныеПакетаПечати.Вставить("НаПринтер", СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку.НаПринтер);
			ДанныеПакетаПечати.Вставить("Пакет", СтрокаПоУмолчанию.СсылкаНаВнешнююОбработку);
			
			Возврат ДанныеПакетаПечати;
		КонецЕсли;
	Иначе 
		Возврат Ложь
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Объект - документ,который нужно отпечатать.
//
Процедура НапечататьДокументИзФормыСписка(Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	Если Не НапечататьДокументПоУмолчанию(Объект, 0, НаПринтер) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Операция не выполнена");
	КонецЕсли; 
	
КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Процедура выводит на печать табличный документ.
//  Открывает форму Печати документов, заполняет печатный документ формы.
//
// Параметры:
//  ПечДокумент				 - ТабличныйДокумент - печатная форма.
//  КоличествоЭкземпляров	 - Число	 - экземпляров.
//  НаПринтер				 - Булево	 - печатать сразу на принтер
//  Заголовок				 - строка	 - заголовок формы печати
//  Ссылка					 - ЛюбаяСсылка	 - Ссылка объекта печати
//  ИсточникМакета			 - Неопределено	 - не используется.
//  ИмяМакета				 - Строка - имя макета  для просмотра печатной формы.
//  ПолныйПутьКМакету		 - Строка - путь к макету для просмотра печатной формы.
//  СинонимМакета			 - Строка - синоним для просмотра печатной формы.
// 
// Возвращаемое значение:
//  ТабличныйДокумент, Булево - печатная форма или подтверждение, что форма отправлена на принтер.
//
Функция НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Ссылка = Неопределено,
						   ИсточникМакета = Неопределено, ИмяМакета = "", ПолныйПутьКМакету = "", СинонимМакета = "") Экспорт
	
	Если ПечДокумент = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПечДокумент) = Тип("ТабличныйДокумент") Тогда
	
		// Получить необходимое количество копий
		Если КоличествоЭкземпляров > 0 Тогда
			ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
		КонецЕсли;
		
		Если НЕ ПечДокумент.АвтоМасштаб
			И НЕ ЗначениеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
			ПечДокумент.АвтоМасштаб = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(НаПринтер) = Тип("Булево") Тогда
		Если НаПринтер Тогда
			Возврат ПечДокумент;
		Иначе
			НовСтр = Новый Структура;
			НовСтр.Вставить("ФормаИмя", "ОбщаяФорма.ПечатьДокументов");
			НовСтр.Вставить("ОбъектПечати", Ссылка);
			НовСтр.Вставить("ПечДокумент", ПечДокумент);
			НовСтр.Вставить("Заголовок", Заголовок);
			НовСтр.Вставить("Защита", Ложь);
			НовСтр.Вставить("ИмяМакета", ИмяМакета);
			НовСтр.Вставить("ПолныйПутьКМакету", "");
			НовСтр.Вставить("СинонимМакета", СинонимМакета);
			
			Возврат НовСтр;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(НаПринтер) = Тип("Массив") Тогда
		ПечДокумент.Вывод = ИспользованиеВывода.Разрешить;
		ПечДокумент.Напечатать();
		НаПринтер.Добавить(ПечДокумент);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // НапечататьДокумент()

// Добавить документ в коллекцию печатных форм для вывод в ОбщиеФормы.ПечатьДокументов.
//
// Параметры:
//  КоллекцияПечатныхФорм - Структура - коллекция печатных форм.
//  Документ		 - ТабличныйДокумент - сформированный документ печатной формы.
//  ИмяМакета		 - Строка	 - Уникальное имя документа в пакете печати.
//  СинонимМакета	 - Строка	 - Представление печатной формы
//  Экземпляров		 - Число	 - Количество экземпляров.
//
Процедура ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, Документ, ИмяМакета, СинонимМакета, Экземпляров = 1) Экспорт
	
	ОписаниеПечатнойФормы = Новый Структура;
	ОписаниеПечатнойФормы.Вставить("СинонимМакета", СинонимМакета);
	ОписаниеПечатнойФормы.Вставить("Экземпляров",	Экземпляров);
	ОписаниеПечатнойФормы.Вставить("ИмяМакета", ИмяМакета);
	ОписаниеПечатнойФормы.Вставить("ПолныйПутьКМакету", "");
	ОписаниеПечатнойФормы.Вставить("ИмяФайлаПечатнойФормы", "");
	ОписаниеПечатнойФормы.Вставить("ТабличныйДокумент", Документ);
	
	КоллекцияПечатныхФорм.Добавить(ОписаниеПечатнойФормы);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ.

// Функция инициализирует дерево дополнительных кнопок
// 
// Возвращаемое значение:
//  ДереваЗначений.
//
Функция ИнициализироватьДеревоДополнительныхКнопок()
	
	ДеревоКнопок = Новый ДеревоЗначений;
		
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	ДеревоКнопок.Колонки.Добавить("СсылкаНаВнешнююОбработку");
	ДеревоКнопок.Колонки.Добавить("НомерСтроки");
	ДеревоКнопок.Колонки.Добавить("ВидПечатнойФормы");
	ДеревоКнопок.Колонки.Добавить("ЗаменяемаяПечатнаяФорма");
	
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	
	// Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции 

// Функция добавляет новую строку в дерево кнопок
// Параметры:
// 	< СтрокаПодменю > (обязательный)
// 		Тип: Дерево или элемент дерева значений, в который необходимо добавить новое описание кнопки
// 	< Имя > (обязательный)
// 		Тип: Строка. Имя создаваемой кнопки;
// 	< ТипКнопки > (по умолчанию «Действие»)
// 		Тип: ТипКнопкиКоманднойПанели. Тип создаваемой кнопки (Кнопка, разделитель, подменю);
// 	< Текст > (по умолчанию пустая строка)
// 		Тип: Строка. Текст кнопки.
// 	< Текст > (по умолчанию пустая строка)
// 		Тип: Строка. Текст кнопки.
// 	< Действие > (по умолчанию «Не Определено»)
// 		Тип: Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
// 	< Расшифровка > (по умолчанию не определено)
// 		Тип: Произвольный.
// 	< Пометка > (по умолчанию «Ложь»)
// 		Тип: Булево.
// 	< Подсказка > (по умолчанию пустая строка)
// 		Тип: Строка. Подсказка создаваемой кнопки.
// 	< Картинка > (по умолчанию «Не Определено»)
// 		Тип: Картинка. Картинка создаваемой кнопки.
// Возвращаемое значение:
// 		Тип: СтрокаДереваЗначений.
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, Позиция = Неопределено, ИзменяетДанные = Ложь)
	
	Если ТипКнопки = Неопределено Тогда
		
		ТипКнопки = Тип("КнопкаФормы");
		
	КонецЕсли;
	Если Позиция = Неопределено Тогда
		СтрокаКнопки = СтрокаПодменю.Строки.Добавить();
	Иначе
		СтрокаКнопки = СтрокаПодменю.Строки.Вставить(Позиция);
	КонецЕсли;
	
	СтрокаКнопки.Имя                = Имя;
	СтрокаКнопки.ТипКнопки          = ТипКнопки;
	СтрокаКнопки.Текст              = Текст;
	СтрокаКнопки.Действие           = Действие;
	СтрокаКнопки.Картинка           = Картинка;
	СтрокаКнопки.Подсказка          = Подсказка;
	СтрокаКнопки.Пометка            = Пометка;
	СтрокаКнопки.ИзменяетДанные     = ИзменяетДанные;
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтрокаКнопки.Расшифровка = "Структура";
		СтрокаКнопки.СсылкаНаВнешнююОбработку = Расшифровка.СсылкаНаВнешнююОбработку;
		СтрокаКнопки.НомерСтроки = Расшифровка.НомерСтроки;
		СтрокаКнопки.ВидПечатнойФормы = Расшифровка.ВидПечатнойФормы;
		СтрокаКнопки.ЗаменяемаяПечатнаяФорма = Расшифровка.ЗаменяемаяПечатнаяФорма;
	КонецЕсли;
	
	Возврат СтрокаКнопки;
	
КонецФункции

// Процедура формирует подменю по дереву значений
// Параметры:
// 	< СтрокаПодменю > (обязательный)
// 		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
// 	< Подменю> (обязательный)
// 		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
// 	< Очищать> (по умолчанию «Ложь»)
// 		Тип: булево. Определяет: следует ли очищать переданное подменю.
// 	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
// 		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
		
	КонецЕсли;  
	
	Для Каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
			
		КонецЕсли; 
		
		Кнопка.Подсказка      = СтрокаКнопки.Подсказка;
		Кнопка.Пояснение      = СтрокаКнопки.Подсказка;
		Кнопка.Пометка        = СтрокаКнопки.Пометка;
		Кнопка.ИзменяетДанные = СтрокаКнопки.ИзменяетДанные;
		
		// Остальные свойства кнопки
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент.
//
Функция НапечататьВнешнююФормуСервер(Ссылка, ИсточникМакета) Экспорт
	
	Перем ДополнительныеПараметры;
	Перем ДвоичныеДанные;

	// Получить дополнительные параметры внешней обработки
	// или для динамического формирования печатных форм в МедОсмотрах и т.д.
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникМакета, "ОбъектПечати")
		Или Не ЗначениеЗаполнено(ИсточникМакета.ОбъектПечати)
	Тогда
		ДополнительныеПараметры = Неопределено;
	Иначе
		ДополнительныеПараметры = Справочники.ВнешниеОбработки.ПолучитьДополнительныеПараметрыВнешнейОбработки(ИсточникМакета.СсылкаНаВнешнююОбработку,ИсточникМакета.ОбъектПечати);
		ДополнительныеПараметры = ?(ДополнительныеПараметры = Неопределено, ДополнительныеПараметры, ДополнительныеПараметры.Получить());
	КонецЕсли;
	
	ИсточникМакета.Вставить("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла, ИсточникМакета.СсылкаНаВнешнююОбработку.БезопасныйРежим);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение.
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция РежимЗапускаОбработкиСервер(Ссылка, ИсточникМакета) Экспорт 
	
	Перем ДополнительныеПараметры;
	Перем ДвоичныеДанные;
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла, ИсточникМакета.СсылкаНаВнешнююОбработку.БезопасныйРежим);
		
		Попытка 
			ЗапускаетсяНаКлиенте = Обработка.РежимЗапускаКлиент();
			
			УдалитьФайлы(ИмяФайла);
			
			Если ЗапускаетсяНаКлиенте Тогда 
				Попытка
					Возврат ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(ИсточникМакета.СсылкаНаВнешнююОбработку.ПолучитьОбъект(), "ХранилищеВнешнейОбработки"));
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					Возврат Неопределено;
				КонецПопытки;
			Иначе
				Возврат Неопределено;
			КонецЕсли;	
			
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции	

Функция ПолучитьИнформациюОПрограммеСервер() Экспорт
	
	ВерсияКонфигурации = Строка(Метаданные.Версия);
	ИмяКонфигурации = Строка(Метаданные.Синоним);
	
	РежимЗапуска = ТекущийРежимЗапуска();
	
	СистемнаяИнформация = ОбщегоНазначенияСервер.СистемнаяИнформацияСервера();
	
	СИВерсияПлатформы = Строка(СистемнаяИнформация.ВерсияПриложения);
	СИВерсияОС = Строка(СистемнаяИнформация.ВерсияОС);
	СИИдентификаторКлиента = Строка(СистемнаяИнформация.ИдентификаторКлиента);
	СИИнформацияПрограммыПросмотра = Строка(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	СИОперативнаяПамять = Строка(СистемнаяИнформация.ОперативнаяПамять);
	СИПроцессор = Строка(СистемнаяИнформация.Процессор);
	СИТипПлатформы = Строка(СистемнаяИнформация.ТипПлатформы);
	
	УстановитьПривилегированныйРежим(Истина);
	Расширения = "";
	Для Каждого Расширение Из РасширенияКонфигурации.Получить() Цикл
		Если Расширение.Активно Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Расширения, Символы.Таб + Расширение.Синоним, Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Расширение Из РасширенияКонфигурации.Получить() Цикл
		Если Не Расширение.Активно Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Расширения, Символы.Таб + "(не активно) " + Расширение.Синоним, Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяКонфигурации", ИмяКонфигурации);
	Структура.Вставить("ВерсияКонфигурации", ВерсияКонфигурации);
	Структура.Вставить("ВерсияПлатформы", СИВерсияПлатформы);
	Структура.Вставить("РасширенияКонфигурации", Расширения);
	Структура.Вставить("РежимЗапуска", РежимЗапуска);
	Структура.Вставить("ВерсияОС", СИВерсияОС);
	Структура.Вставить("ОЗУ", Окр(СистемнаяИнформация.ОперативнаяПамять/1024 + 0.2));
	Структура.Вставить("ИдентификаторКлиента", СИИдентификаторКлиента);
	Структура.Вставить("ИнформацияПрограммыПросмотра", СИИнформацияПрограммыПросмотра);
	Структура.Вставить("ОперативнаяПамять", СИОперативнаяПамять);
	Структура.Вставить("Процессор", СИПроцессор);
	Структура.Вставить("ТипПлатформы", СИТипПлатформы);
	Структура.Вставить("ТипКлиента", ПолучитьТипКлиента());
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьТипКлиента()
	
	ИмяПриложения = ПолучитьТекущийСеансИнформационнойБазы().ИмяПриложения;
	
	ПредставлениеПриложения = Новый Соответствие;
	ПредставлениеПриложения.Вставить("1CV8C",	  НСтр("ru='Тонкий клиент'"));
	ПредставлениеПриложения.Вставить("1CV8",	  НСтр("ru='Толстый клиент'"));
	ПредставлениеПриложения.Вставить("WebClient", НСтр("ru='Веб-клиент'"));
	
	Приложение = ПредставлениеПриложения.Получить(ИмяПриложения);
	Если Приложение = Неопределено Тогда
		Приложение = ИмяПриложения;
	КонецЕсли;
	
	Возврат Приложение;

КонецФункции


#Область Отчеты

// Процедура применяет вариант оформления отчета, указанный в учетной политике.
//
// Параметры:
//  ОтчетОбъект			 - ОтчетОбъект - Оформляемый отчет на системе компоновки данных.
//  ДокументРезультат	 - ТабличныйДокумент - результат формирования отчета.
//  ДанныеРасшифровки	 - ДанныеРасшифровки	 - данные расшифровки.
//  СтандартнаяОбработка - Булево - флаг стандартной обработки в событии объекта отчета.
//
Процедура ОтчетПриКомпоновкеРезультата(ОтчетОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	ВывестиДатуФормированияОтчета(ДокументРезультат);	
	
	// Установить схему оформления отчета на СКД, если в варианте отчета она не указана в явном виде.
	ПараметрМакет = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления"); 
	Если ПараметрМакет <> Неопределено И Не ПараметрМакет.Использование Тогда
		
		ОсновнойМакетОформления = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойМакетОформленияСКД");
		Если Не ЗначениеЗаполнено(ОсновнойМакетОформления) Тогда
			ОсновнойМакетОформления = ОсновнойМакетОформленияОтчетовНаСКД();
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
		ПараметрМакет = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
		ПараметрМакет.Значение = ОсновнойМакетОформления;
		ПараметрМакет.Использование = Истина;
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных,
		КомпоновщикНастроек.ПолучитьНастройки(),ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанных"),Истина);
		
		// Инициализация процессора компоновки
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,ДанныеРасшифровки,Истина);
		
		// Получение результата
		ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		
		ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьДокумент(ДокументРезультат);
		ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);		
	КонецЕсли;
	
КонецПроцедуры

Функция ОсновнойМакетОформленияОтчетовНаСКД()
	
	Возврат "ОформлениеОтчетовКлассический";
	
КонецФункции

// Процедура выводит в верхнем колонтитуле табличного документа текущую дату сеанса.
// Параметры:
//  <ДокументРезультат>  - <ТабличныйДокумент> - документ, в который добавляется колонтитул.
//
Процедура ВывестиДатуФормированияОтчета(ДокументРезультат)
	
	ТекстКолонтитула = НСтр("ru = 'Дата формирования отчета: %ДатаФормирования%'");
	ТекстКолонтитула = СтрЗаменить(ТекстКолонтитула, "%ДатаФормирования%", ТекущаяДатаСеанса());
	
	ДокументРезультат.ВерхнийКолонтитул.Выводить = Истина;
	ДокументРезультат.ВерхнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоПрикладногоНазначения

// Функция определяет пол человека по его ФИО.
//
// Параметры:
//  Имя		 - Строка	 - Имя, по последней букве которого пытаемся определить пол
//  Фамилия	 - Строка	 - Фамилия, по окончанию которой уточняется пол
//  Отчество - Строка	 - Отчество, по окончанию которого пытаемся определить пол
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПолФизическихЛиц - пол человека, определенный по его ФИО.
//
Функция ОпределитьПол(Знач Имя = "", Знач Фамилия = "", Знач Отчество = "") Экспорт
	
	Имя		 = СокрЛП(Имя);
	Фамилия	 = СокрЛП(Фамилия);
	Отчество = СокрЛП(Отчество);
	
	СписокМужскихИсключений = Новый СписокЗначений;
	СписокМужскихИсключений.Добавить("ИЛЬЯ");
	СписокМужскихИсключений.Добавить("НИКОЛА");
	СписокМужскихИсключений.Добавить("НИКИТА");
	СписокМужскихИсключений.Добавить("САВВА");
	СписокМужскихИсключений.Добавить("КУЗЬМА");

	СписокЖенскихИсключений = Новый СписокЗначений;
	СписокЖенскихИсключений.Добавить("ЛЮБОВЬ");
	
	Окончание = ВРег(Прав(Имя,1));               
	
	Если СписокМужскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	ИначеЕсли СписокЖенскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда 	
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	КонецЕсли; 
	
	ИтогоПол = 0; 
	Если Отчество <> "" Тогда
		окончание1 = Сред(Отчество, СтрДлина(Отчество));
		Если окончание1 = "ч" ИЛИ окончание1 = "в" Тогда
			ИтогоПол = ИтогоПол + 1;
		ИначеЕсли окончание1 = "а" Тогда
			ИтогоПол = ИтогоПол - 1;
		КонецЕсли;
	КонецЕсли; 
	
	окончание1 = Сред(Фамилия, СтрДлина(Фамилия));
	окончание2 = Сред(Фамилия, СтрДлина(Фамилия) - 1);
	окончание3 = Сред(Фамилия, СтрДлина(Фамилия) - 2);
	окончанияМужскихФамилий=",ов,ев,ий,ин,";
	окончанияЖенскихФамилий=",ова,ева,ина,ая,";
	Если Найти(окончанияМужскихФамилий, "," + окончание2 + ",") > 0 Тогда
		ИтогоПол = ИтогоПол + 0.4;
	ИначеЕсли Найти(окончанияЖенскихФамилий, "," + окончание2 + ",") > 0 
		ИЛИ Найти(окончанияЖенскихФамилий, "," + окончание3 + ",") > 0 
	Тогда
		ИтогоПол = ИтогоПол - 0.4;
	КонецЕсли;
	
	Если Имя <> "" Тогда
		окончание1 = Прав(Имя, 1);
		Если окончание1 = "а" ИЛИ окончание1 = "я"  ИЛИ окончание1 = "е" Тогда
			ИтогоПол = ИтогоПол - 0.5;
		Иначе
			ИтогоПол = ИтогоПол + 0.5;
		КонецЕсли;
	КонецЕсли;
	
	Если ИтогоПол > 0 Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	ИначеЕсли ИтогоПол < 0 Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

#КонецОбласти

#Область СвойстваИЗначения

// Функция возвращает ТаблицуЗначений после отбора СКД.
Функция ПолучитьТаблицуЗначенийИзСКД(СхемаКомпоновкиДанных, НастройкиОтбора, ДопонительныеОтборы = Неопределено) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных; 
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора);

	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки; 
	
	Если ТипЗнч(ДопонительныеОтборы) = Тип("Структура") Тогда
		Для Каждого КлючЗначениеОтбора Из ДопонительныеОтборы Цикл
			ЭлементОтбора = НастройкиКомпоновщика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных(КлючЗначениеОтбора.Ключ);
			ЭлементОтбора.ПравоеЗначение = КлючЗначениеОтбора.Значение;
			ЭлементОтбора.Использование	 = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Получим макет компоновки    
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 

	// Через процессор компоновки получим результат
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных); 

	ТаблицаРезультат = Новый ТаблицаЗначений; 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 

	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	Возврат ТаблицаРезультат;
	
КонецФункции
 
Функция ВычислитьЗначениеПоТаблицеОтборовСКД(СКД, Отборы, ЗначениеПоУмолчанию, ОтборыОбъекта, ИмяКолонкиЗначения) Экспорт
		
	Значение = ЗначениеПоУмолчанию;
	Для Каждого СтрокаОтбора Из Отборы Цикл
		НастройкиОтбора = СтрокаОтбора.Отбор.Получить();
		Если ТипЗнч(НастройкиОтбора) = Тип("НастройкиКомпоновкиДанных") Тогда
			ТаблицаРезультат = ПолучитьТаблицуЗначенийИзСКД(СКД, НастройкиОтбора, ОтборыОбъекта);
			Если ТаблицаРезультат.Количество() <> 0 Тогда
				Значение = СтрокаОтбора[ИмяКолонкиЗначения];
				Прервать;	
			КонецЕсли;
		Иначе
			Значение = СтрокаОтбора[ИмяКолонкиЗначения];
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	 
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ПечатьHTMLЧерезTXTМакеты // Служебные функции для создания HTML-текстов через макеты текстового документа.

Функция ПрефиксКлючаПараметраTXTМакетаHTML()
	
	Возврат "☼";
	
КонецФункции

Процедура УстановитьПараметрТХТМакета(Область, ИмяПараметра, Значение, КодыЗначений) Экспорт
	
	Префикс = ПрефиксКлючаПараметраTXTМакетаHTML();
	
	Ключ = Префикс + Формат(КодыЗначений.Количество(), "ЧГ=") + Символ(58 + КодыЗначений.Количество()%40);
	КодыЗначений.Вставить(Ключ, Значение);
	
	Область.Параметры[ИмяПараметра] = Ключ;
	
КонецПроцедуры

// Заменяет ключи значений параметров в тексте документа на значения, соответствующие этим ключам.
//
// Параметры:
//  ТекстовыйДокумент	 - ТекстовыйДокумент - текстовый документ результат формирования по макету.
//  КодыЗначений		 - Соответствие - текущее значение параметра в документе и его реальное значение под замену.
//
Процедура РаскодироватьПараметрыТХТМакетаHTML(ТекстовыйДокумент, КодыЗначений) Экспорт
	
	Текст = ТекстовыйДокумент.ПолучитьТекст();
	Для Каждого КлючЗначение Из КодыЗначений Цикл
		
		Значение = СтрЗаменить(КлючЗначение.Значение, Символы.ПС, "<BR>");
		
		Текст = СтрЗаменить(Текст, КлючЗначение.Ключ, Значение);
		
	КонецЦикла;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзEXCEL

Процедура ЗаполнитьШаблонСДаннымиПоФорматуФайла(ФорматФайла, ИнформацияПоКолонкам, ШаблонСДанными) Экспорт 
		
	ИнформацияПоКолонкам.Очистить();
	Табдок = Новый ТабличныйДокумент;
	Для Каждого СтрокаКолонка Из ФорматФайла.СписокКолонок Цикл
		НоваяСтрока = ИнформацияПоКолонкам.Добавить();
		НоваяСтрока.ИмяКолонки = Строка(ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаКолонка.Колонка));
		НоваяСтрока.Колонка = СтрокаКолонка.Колонка;
		НоваяСтрока.ПредставлениеКолонки = СтрокаКолонка.ИмяКолонкиВФайле;
		НоваяСтрока.Позиция = СтрокаКолонка.НомерСтроки;
		Если СтрокаКолонка.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаРождения Тогда
			НоваяСтрока.ТипКолонки = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты());	
		Иначе
			НоваяСтрока.ТипКолонки = Новый ОписаниеТипов("Строка",,,,,Новый КвалификаторыСтроки());		
		КонецЕсли;
		НоваяСтрока.Синоним = НоваяСтрока.ИмяКолонки;
		НоваяСтрока.Видимость = Истина;
		
		ОбластьКолонки = Табдок.Область(1,СтрокаКолонка.НомерСтроки);
		ОбластьКолонки.Текст = НоваяСтрока.ПредставлениеКолонки;
		ОбластьКолонки.Шрифт = Новый Шрифт(ОбластьКолонки.Шрифт, , , Истина);
		ОбластьКолонки.ШиринаКолонки = Макс(10, СтрДлина(НоваяСтрока.ПредставлениеКолонки)); 
		ОбластьКолонки.Расшифровка = ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаКолонка.Колонка); 
		
	КонецЦикла;
	ШаблонСДанными = Табдок;
	
КонецПроцедуры  

Процедура ОбновитьИнформациюПоКолонкам(ИнформацияПоКолонкам, ШаблонСДанными) Экспорт
	
	Сч = 1;
	Для Каждого СтрокаИнформацииПоКолонке Из ИнформацияПоКолонкам Цикл
		
		Если СтрокаИнформацииПоКолонке.ПредставлениеКолонки <> ШаблонСДанными.Область(1,Сч,1,Сч).Расшифровка Тогда
			НоваяПозицияОбласти = ШаблонСДанными.НайтиТекст(СтрокаИнформацииПоКолонке.ПредставлениеКолонки,,ШаблонСДанными.Область(1,1,1,ШаблонСДанными.ШиринаТаблицы));
			Если ЗначениеЗаполнено(НоваяПозицияОбласти) Тогда
				СтрокаИнформацииПоКолонке.Позиция = НоваяПозицияОбласти.Лево;
			Иначе
				ИнформацияПоКолонкам.Удалить(СтрокаИнформацииПоКолонке);
			КонецЕсли;
		КонецЕсли;
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиПаспортныеДанные(НаборПаспортныхДанных, Клиент) Экспорт

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПаспортныеДанные.ДокументВид КАК ВидДУЛ,
	                |	ПаспортныеДанные.ДокументКемВыдан КАК КемВыданДУЛ,
	                |	ПаспортныеДанные.ДокументСерия КАК СерияДУЛ,
	                |	ПаспортныеДанные.ДокументНомер КАК НомерДУЛ
	                |ИЗ
	                |	РегистрСведений.ПаспортныеДанные КАК ПаспортныеДанные
	                |ГДЕ
	                |	ПаспортныеДанные.ФизЛицо = &Клиент"; 
	 
	 Запрос.УстановитьПараметр("Клиент", Клиент);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 Если Выборка.ВидДУЛ = НаборПаспортныхДанных.ВидДУЛ И Выборка.КемВыданДУЛ = НаборПаспортныхДанных.КемВыданДУЛ И 
				 Выборка.СерияДУЛ = НаборПаспортныхДанных.СерияДУЛ И Выборка.НомерДУЛ = НаборПаспортныхДанных.НомерДУЛ Тогда
			 Возврат Истина;
		 КонецЕсли;
	 КонецЦикла;
	 
	 Возврат Ложь;
	 
КонецФункции

#КонецОбласти

#КонецОбласти