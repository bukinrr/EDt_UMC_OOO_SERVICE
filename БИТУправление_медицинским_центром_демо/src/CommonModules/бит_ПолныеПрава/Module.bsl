#Область ПрограммныйИнтерфейс

// Записывает переданный объект.
//
// Параметры:
//  Объект		 - ДокументОбъект, СправочникОбъект	 - любой объект.
//  РежимЗаписи	 - РежимЗаписиДокумента				 - режим записи.
// 
// Возвращаемое значение:
//  Строка - описание ошибки, если была.
//
Функция ЗаписатьОбъект(Объект, РежимЗаписи = Неопределено) Экспорт
	
	Попытка
		Если РежимЗаписи = Неопределено Тогда
			Объект.Записать();
		Иначе
			Объект.Записать(РежимЗаписи);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат ОписаниеОшибки;	
	КонецПопытки;
	
	Возврат "";	
КонецФункции

// Объединияет двух клиентов с учетом отраслевых специфик.
//
// Параметры:
//  КлиентПриемник	 - СправочникСсылка.Клиенты - Правильный клиент
//  КлиентИсточник	 - СправочникСсылка.Клиенты - Дублирующий клиент.
//
Процедура ОбъединитьДвухПациентов(КлиентПриемник, КлиентИсточник, ДанныеДубляБолееАктуальны = Ложь) Экспорт
	
	Заменяемые = Новый Соответствие;
	Заменяемые.Вставить(КлиентИсточник, КлиентПриемник);
	
	МассивЗаменяемых = Новый Массив;
	МассивЗаменяемых.Добавить(КлиентИсточник);
	
	Если Метаданные.Справочники.Найти("МедицинскиеКарты") <> Неопределено Тогда
		Запрос = Новый Запрос( // Выбираем все медкарты по обоим.
		"ВЫБРАТЬ
		|	МедицинскиеКарты.Клиент,
		|	МедицинскиеКарты.Ссылка,
		|	МедицинскиеКарты.ВидКарты
		|ИЗ
		|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
		|ГДЕ
		|	(МедицинскиеКарты.Клиент = &Заменяемый
		|			ИЛИ МедицинскиеКарты.Клиент = &Заменяющий)");
		
		Запрос.УстановитьПараметр("Заменяемый",КлиентИсточник);
		Запрос.УстановитьПараметр("Заменяющий",КлиентПриемник);
		ВыборкаМедкарт = Запрос.Выполнить().Выбрать();
		
		МедкартыЗаменяющие = Новый Соответствие; // Создаем список заменяющих медкарт.
		
		Пока ВыборкаМедкарт.Следующий() Цикл
			Если (ВыборкаМедкарт.Клиент = КлиентПриемник) И (МедкартыЗаменяющие.Получить(ВыборкаМедкарт.ВидКарты) = Неопределено) Тогда 
				МедкартыЗаменяющие.Вставить(ВыборкаМедкарт.ВидКарты, ВыборкаМедкарт.Ссылка);
			КонецЕсли;
		КонецЦикла;
		ВыборкаМедкарт.Сбросить();
		Пока ВыборкаМедкарт.Следующий() Цикл
			Если ВыборкаМедкарт.Клиент = КлиентИсточник Тогда 
				Если МедкартыЗаменяющие.Получить(ВыборкаМедкарт.ВидКарты) = Неопределено Тогда  
					// Если не нашли карты такого вида то вставляем данную в список заменяющих и меняем ей клиента.
					МедкартыЗаменяющие.Вставить(ВыборкаМедкарт.ВидКарты, ВыборкаМедкарт.Ссылка);
				// Если карта с таким видом уже есть в списке заменяющих, то создаем соответсвие замены и добавляем карту в массив
				// ссылок.
				Иначе
					УдаляемаяМедКарта = ВыборкаМедкарт.Ссылка.ПолучитьОбъект();
					УдаляемаяМедКарта.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НайденныеСсылки = НайтиПоСсылкам(МассивЗаменяемых);
	НайденныеСсылки.Колонки[0].Имя = "Ссылка";
	НайденныеСсылки.Колонки[1].Имя = "Данные";
	НайденныеСсылки.Колонки[2].Имя = "Метаданные";
	НайденныеСсылки.Колонки.Добавить("Включено", Новый ОписаниеТипов("Булево"));
	
	ОбработкаСсылокРегистров(НайденныеСсылки, КлиентПриемник, ДанныеДубляБолееАктуальны);
	
	ВыполнитьЗаменуЭлементов(Заменяемые, НайденныеСсылки, , , КлиентИсточник, ДанныеДубляБолееАктуальны);
	
	// Очистка отобранной основной медкарты клиента-источника
	Если Метаданные.Справочники.Найти("МедицинскиеКарты") <> Неопределено Тогда
		Если ЗначениеЗаполнено(КлиентИсточник.ОсновнаяМедицинскаяКарта)
			И КлиентИсточник.ОсновнаяМедицинскаяКарта.Клиент <> КлиентИсточник
		Тогда
			УстановитьПривилегированныйРежим(Истина);
			КлиентИсточникОбъект = КлиентИсточник.ПолучитьОбъект();
			КлиентИсточникОбъект.ОсновнаяМедицинскаяКарта = Неопределено;
			КлиентИсточникОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьСтандартныеДейтсвияПередЗаписью", Истина);
			КлиентИсточникОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	УдалитьСсылкиИсключенияПриОбъединенииКлиентов(НайденныеСсылки);
	
	ВыполнитьЗаменуЭлементов(Заменяемые, НайденныеСсылки, , , КлиентИсточник, ДанныеДубляБолееАктуальны);
	
	// Файлы клиента
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Если УчетнаяПолитика.ХранитьФотоКлиентовКакФайлы Тогда
		ПереместитьФайлыОбъекта(КлиентПриемник, КлиентИсточник, УчетнаяПолитика.БазовыйКаталогФайлов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Перемещает файлы объекта метаданных из каталога источника в каталог приемника
//
// Параметры:
//  Приемник			 - ЛюбаяСсылка	 - получатель
//  Источник			 - ЛюбаяСсылка	 - источник
//  БазовыйКаталогФайлов - Строка		 - Путь к каталогу, внутки которого происходит перемещение.
//
Процедура ПереместитьФайлыОбъекта(Приемник, Источник, БазовыйКаталогФайлов) Экспорт

	ФайлыКлиента = НайтиФайлы(БазовыйКаталогФайлов + Источник.УникальныйИдентификатор(), "*");
	
	Если ФайлыКлиента.Количество() > 0 Тогда 
		КаталогПриемника = НайтиФайлы(БазовыйКаталогФайлов, Приемник.УникальныйИдентификатор());
		Если КаталогПриемника.Количество() > 0 Тогда
			ИмяКаталогаПриемника = КаталогПриемника[0].ПолноеИмя;
		Иначе
			ИмяКаталогаПриемника = БазовыйКаталогФайлов + Приемник.УникальныйИдентификатор();
			СоздатьКаталог(ИмяКаталогаПриемника);	
		КонецЕсли;
		
		Для Каждого Файл Из ФайлыКлиента Цикл
			Если Файл.ЭтоФайл() Тогда
				ПереместитьФайл(Файл.ПолноеИмя, ИмяКаталогаПриемника + "\" + Файл.Имя); 
			КонецЕсли;
		КонецЦикла;
		
		УдалитьФайлы(БазовыйКаталогФайлов + Источник.УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСсылкиИсключенияПриОбъединенииКлиентов(НайденныеСсылки)
	
	// Удаление соответствий РИБ с пустым узлом.
	РегистрСоответствиеОбъектов = Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз;
	мОбрИнд = НайденныеСсылки.Количество()-1;
	Для Сч = 0 По мОбрИнд Цикл
		
		СтрокаТЗ = НайденныеСсылки[мОбрИнд-Сч];
		Если СтрокаТЗ.Метаданные = РегистрСоответствиеОбъектов
			И Не ЗначениеЗаполнено(СтрокаТЗ.Данные.УзелИнформационнойБазы)
		Тогда
			НайденныеСсылки.Удалить(мОбрИнд-Сч);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаСсылокРегистров(НайденныеСсылки, КлиентПриемник, ДанныеДубляБолееАктуальны)
	
	МетаданныеРегистрКонтактнаяИнформация = Метаданные.РегистрыСведений.КонтактнаяИнформация;

		
	КоличествоСсылок = НайденныеСсылки.Количество() - 1;
	Для Индекс = 0 По КоличествоСсылок Цикл
		Если Не ДанныеДубляБолееАктуальны 
			И (НайденныеСсылки[КоличествоСсылок - Индекс].Метаданные = МетаданныеРегистрКонтактнаяИнформация)
		Тогда

			НайденныеСсылки.Удалить(КоличествоСсылок - Индекс);			
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Функция ВыполнитьЗаменуЭлементов(Заменяемые, ТаблицаСсылок, ВыполнятьВТранзакции = Истина, ОтключатьКонтрольЗаписи = Ложь, КлиентИсточник, ДанныеДубляБолееАктуальны = Ложь)
	Откат = Ложь;
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	ПараметрыОбъекта = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		ПараметрыОбъекта.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		ПараметрыОбъекта.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	ПараметрыОбъекта.Вставить("Объект", Неопределено);	
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		ПравильныйЭлемент = Заменяемые[СтрокаТаблицы.Ссылка];
		
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и ПараметрыОбъекта.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					ПараметрыОбъекта.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыОбъекта.Объект, "мНеДелатьПроверокПриЗаписи") Тогда
						ПараметрыОбъекта.Объект.мНеДелатьПроверокПриЗаписи = Истина;
					КонецЕсли;
					ПараметрыОбъекта.Объект.Записать();
				Исключение
					СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Откат = Истина;
						Прервать;
					КонецЕсли;
				КонецПопытки;
				ПараметрыОбъекта.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыОбъекта.Объект = Неопределено Тогда
				ПараметрыОбъекта.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыОбъекта.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыОбъекта.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыОбъекта.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыОбъекта.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и ПараметрыОбъекта[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = ПараметрыОбъекта.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				Если ТаблицаНабора.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				масИменКолонок = Новый Массив;
				
				// Получим имена измерений, которые могут содержать ссылку.
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						Если (Измерение.Имя = "Валюта") И ЕстьКорреспонденция Тогда
							масИменКолонок.Добавить("ВалютаДт");
							масИменКолонок.Добавить("ВалютаКт");
						ИначеЕсли (Измерение.Имя = "Подразделение")
							И ЕстьКорреспонденция Тогда
							масИменКолонок.Добавить("ПодразделениеДт");
							масИменКолонок.Добавить("ПодразделениеКт");
						Иначе
							масИменКолонок.Добавить(Измерение.Имя);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
						
				// Получим имена ресурсов, которые могут содержать ссылку.
				Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							масИменКолонок.Добавить(Ресурс.Имя);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
						
				// Получим имена ресурсов, которые могут содержать ссылку.
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						масИменКолонок.Добавить(Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
				
				// Произведем замены в таблице.
				Для Каждого ИмяКолонки Из масИменКолонок Цикл
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти[ИмяКолонки] = ПравильныйЭлемент;
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
					КонецЦикла;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 по ПараметрыОбъекта[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;
					
					Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
						Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
							Если ЕстьКорреспонденция Тогда
								Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
									СтрокаТабЧасти.СчетДт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
								Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
									СтрокаТабЧасти.СчетКт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							Иначе
								Если СтрокаТабЧасти.Счет = Ссылка Тогда
									СтрокаТабЧасти.Счет = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти["ВидРасчета"] = ПравильныйЭлемент;
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					КонецЦикла;
				КонецЕсли;
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							Откат = Истина;
							Прервать;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если Откат Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Если НаборЗаписи.Количество() > 0 Тогда
						Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
							Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
							КонецЕсли;
						КонецЦикла;					
						Если НадоЗаписывать Тогда
							Если ОтключатьКонтрольЗаписи Тогда
								НаборЗаписи.ОбменДанными.Загрузка = Истина;
							КонецЕсли;
							Попытка
								НаборЗаписи.Записать();
							Исключение
								СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
								БылиИсключения = Истина;
								Если ВыполнятьВТранзакции Тогда
									Откат = Истина;
									Прервать;
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Откат Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыОбъекта.Объект = Неопределено Тогда
				ПараметрыОбъекта.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если ДопСерверныеФункции.ИмяСсылочногоТипа(ПараметрыОбъекта.Объект.Ссылка) = "Справочник.МедицинскиеКарты" Тогда
				ПараметрыОбъекта.Объект.Наименование = СтрЗаменить(ПараметрыОбъекта.Объект.Наименование, ПараметрыОбъекта.Объект.Клиент.Наименование, ПравильныйЭлемент.Наименование);
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И ПараметрыОбъекта.Объект.Владелец = Ссылка Тогда
				ПараметрыОбъекта.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И ПараметрыОбъекта.Объект.Родитель = Ссылка Тогда
				ПараметрыОбъекта.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыОбъекта.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыОбъекта.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыОбъекта.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыОбъекта.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыОбъекта.Объект = Неопределено Тогда
				ПараметрыОбъекта.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыОбъекта.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыОбъекта.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыОбъекта.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыОбъекта.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Если ДанныеДубляБолееАктуальны Тогда 
					
					МетаданныеРегистрКонтактнаяИнформация = Метаданные.РегистрыСведений.КонтактнаяИнформация;





						
					Если СтрокаТаблицы.Метаданные = МетаданныеРегистрКонтактнаяИнформация Тогда














						
						НаборЗаписейРегистра = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
						НаборЗаписейРегистра.Отбор.Объект.Установить(ПравильныйЭлемент);
						НаборЗаписейРегистра.Прочитать();
						Для Каждого Запись Из НаборЗаписейРегистра Цикл
							НайденнаяЗаписьРегистра = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
							НайденнаяЗаписьРегистра.Объект = Запись.Объект;
							НайденнаяЗаписьРегистра.Тип = Запись.Тип;
							НайденнаяЗаписьРегистра.Вид = Запись.Вид;
							НайденнаяЗаписьРегистра.Прочитать();
							Если НайденнаяЗаписьРегистра.Выбран() Тогда
								НайденнаяЗаписьРегистра.Объект = СтрокаТаблицы.Ссылка;
								НайденнаяЗаписьРегистра.Записать();
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;

				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла; 
								
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Откат = Истина;
					Прервать;
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбъекта.Объект <> Неопределено И Не Откат Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			ПараметрыОбъекта.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			ПараметрыОбъекта.Объект.Записать();
		Исключение
			СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
			БылиИсключения = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если ДанныеДубляБолееАктуальны Тогда
		
		МетаданныеКлиенты = Метаданные.Справочники.Клиенты;
		ЗаписьСправочникаПравильныйЭлемент = ПравильныйЭлемент.ПолучитьОбъект();
		Если МетаданныеКлиенты.Реквизиты.Найти("Комментарий") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.Комментарий = КлиентИсточник.Комментарий;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("КраткийКомментарий") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.КраткийКомментарий = КлиентИсточник.КраткийКомментарий;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("ДатаОтсчетаСтажа") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.ДатаОтсчетаСтажа = КлиентИсточник.ДатаОтсчетаСтажа;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("ЗаконныйПредставитель") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.ЗаконныйПредставитель = КлиентИсточник.ЗаконныйПредставитель;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("ЗаконныйПредставительПримечание") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.ЗаконныйПредставительПримечание = КлиентИсточник.ЗаконныйПредставительПримечание;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("ЗаконныйПредставительТелефон") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.ЗаконныйПредставительТелефон = КлиентИсточник.ЗаконныйПредставительТелефон;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("умцМестоРаботы") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.умцМестоРаботы = КлиентИсточник.умцМестоРаботы;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("умцМестоРаботыДополнительное") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.умцМестоРаботыДополнительное = КлиентИсточник.умцМестоРаботыДополнительное;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("Профессия") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.Профессия = КлиентИсточник.Профессия;	
		КонецЕсли;
		Если МетаданныеКлиенты.Реквизиты.Найти("ЦехУчасток") <> Неопределено Тогда
			ЗаписьСправочникаПравильныйЭлемент.ЦехУчасток = КлиентИсточник.ЦехУчасток;	
		КонецЕсли;
		
		ЗаписьСправочникаПравильныйЭлемент.Записать(); 
		
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
			// Помечаем на удаление замененный элемент справочника.
			ЗаписьСправочникаДляУдаления = КлиентИсточник.ПолучитьОбъект();
			ЗаписьСправочникаДляУдаления.Архив = Истина;
			ЗаписьСправочникаДляУдаления.ПометкаУдаления = Истина;
			ЗаписьСправочникаДляУдаления.ДополнительныеСвойства.Вставить("НеВыполнятьСтандартныеДейтсвияПередЗаписью", Истина);
			ЗаписьСправочникаДляУдаления.Записать();
		КонецЕсли;	
	КонецЕсли;

	Возврат Не БылиИсключения;
	
КонецФункции

Процедура СообщитьОбОшибкеПриЗаписи(Информация)
	
	Причина = ?(Информация.Причина = Неопределено, Информация, Информация.Причина);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Причина.Описание);
	
КонецПроцедуры

#КонецОбласти