#Область СлужебныеПроцедурыИФункции

// Открывает вложенный файл электронного письма.
//
// Параметры:
//  Ссылка  - СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы,
//            СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы - ссылка на файл, который необходимо
//                                                                            открыть.
//
Процедура ОткрытьВложение(Ссылка, Форма) Экспорт

	РаботаСФайламиКлиент.ОткрытьФайл(Ссылка);
		
КонецПроцедуры

// Возвращает массив, содержащий структуры с информацией о контактах взаимодействия
// или участниках предмета взаимодействия.
// Параметры:
//  ТаблицаКонтактов - Документ.ТабличнаяЧасть - содержащая описания и ссылки на контакты взаимодействия
//                                               или участников предмета взаимодействия.
//
Функция ТаблицуКонтактовВМассив(ТаблицаКонтактов) Экспорт
	
	Результат = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактов Цикл
		Контакт = ?(ТипЗнч(СтрокаТаблицы.Контакт) = Тип("Строка"), Неопределено, СтрокаТаблицы.Контакт);
		Запись = Новый Структура(
		"Адрес, Представление, Контакт", СтрокаТаблицы.Адрес, СтрокаТаблицы.Представление, Контакт);
		Результат.Добавить(Запись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыДляОтправкиPDFПриемаПоЭлектроннойПочте(Знач ПриемыКОтправке, Тема, Текст, Клиент, АдресWkhtmltopdf) Экспорт
	
	Если ТипЗнч(ПриемыКОтправке) <> Тип("Массив") Тогда
		Прием = ПриемыКОтправке;
		ПриемыКОтправке = Новый Массив;
		ПриемыКОтправке.Добавить(Прием);
	КонецЕсли;
	
	ВложениеHTML = Новый СписокЗначений();
	
	Если ПриемыКОтправке.Количество() > 0 Тогда
		
		ИмяВременногоКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + "medical_examination");
		
		ФайлКаталог = Новый Файл(ИмяВременногоКаталога);
		Если ФайлКаталог.Существует() Тогда
			УдалитьФайлы(ИмяВременногоКаталога);
		КонецЕсли;
		СоздатьКаталог(ИмяВременногоКаталога);
		
		Поток = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Поток);
		ЗаписьДанных.КодировкаТекста = КодировкаТекста.UTF8;
		ЕстьЗапись = Ложь;
		РазрывСтраницы = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстHTMLРазрывСтраницы(Ложь);
		
		ДанныеШаблонов = УправлениеЭлектроннойПочтой.ПолучитьДанныеШаблоновДляОтправкиПоЭлектроннойПочте(ПриемыКОтправке, Истина);
		
		Для Каждого ДанныеОсмотра Из ДанныеШаблонов.ТекстыОсмотров Цикл
			ПечатнаяВерсия = ?(ЕстьЗапись, РазрывСтраницы, "") + ДанныеОсмотра.ТекстОсмотра;
			
			Если ЗначениеЗаполнено(ПечатнаяВерсия) Тогда
				
				ПечатнаяВерсияDOM = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПечатнаяВерсия);
				СписокКартинок = РаботаСDOMКлиентСервер.ПолучитьЭлементыПоИмени(ПечатнаяВерсияDOM, "IMG", Истина);
				
				мсКартинкиКУдалению = Новый Массив;
				Для Каждого ЭлементКартинка Из СписокКартинок Цикл
					
					ДобавленноеИзображение = ДанныеОсмотра.ДобавленныеИзображения.Получить(ЭлементКартинка.Источник);
					Если ДобавленноеИзображение <> Неопределено Тогда
						ЭлементКартинка.src = СтрШаблон("data:image/%1;base64,%2", ДобавленноеИзображение.Расширение, ДобавленноеИзображение.base64);
						Продолжить;
					КонецЕсли;
					
					Рисунок = ДанныеОсмотра.Рисунки.Получить(ЭлементКартинка.Источник);
					Если Рисунок <> Неопределено Тогда
						ЭлементКартинка.src = "data:image/png;base64," + Рисунок;
						Продолжить;
					КонецЕсли;
					
					Изображение = ДанныеШаблонов.КешИзображений.Получить(ЭлементКартинка.Идентификатор);
					Если Изображение = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ФайлКартинки = Новый Файл(ИмяВременногоКаталога + Изображение.Идентификатор + Изображение.Расширение);
					Изображение.Картинка.Записать(ФайлКартинки.ПолноеИмя);
					Если ФайлКартинки.Размер() <= 5*1024*1024 Тогда
						ЭлементКартинка.src = "file:///" + СтрЗаменить(ФайлКартинки.ПолноеИмя, "\", "/");
					Иначе
						мсКартинкиКУдалению.Добавить(ЭлементКартинка);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого элКартинка Из мсКартинкиКУдалению Цикл
					Если Не РаботаСHTMLКлиентСервер.ЭлементПустой(элКартинка.ДокументВладелец)
						И Не РаботаСHTMLКлиентСервер.ЭлементПустой(элКартинка.РодительскийУзел)
					Тогда
						элКартинка.РодительскийУзел.УдалитьДочерний(элКартинка);
					КонецЕсли;
				КонецЦикла;
				
				ЗаписьДанных.ЗаписатьСтроку(РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ПечатнаяВерсияDOM));
				
				ЕстьЗапись = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьДанных.Закрыть();
		Если ЕстьЗапись Тогда // Избегаем пустых приемов
			РазмерПисьма = Поток.Размер()/1024;
			ДвоичныеДанныеHTML = Поток.ЗакрытьИПолучитьДвоичныеДанные();
			ФайлPDF = РаботаСШаблонамиHTMLКлиент.ПреобразоватьHTMLвPDF(ДвоичныеДанныеHTML, АдресWkhtmltopdf, Ложь);
			Если ФайлPDF <> Неопределено Тогда
				ВложениеHTML.Добавить(ФайлPDF, "Медицинская запись.pdf"); // Добавляем двоичные данные файла
			КонецЕсли;
		КонецЕсли;
		УдалитьФайлы(ИмяВременногоКаталога);
		
	КонецЕсли;
	
	Если ВложениеHTML.Количество() = 0 Тогда
		ВложениеHTML = Неопределено;
	КонецЕсли;
	
	Возврат УправлениеЭлектроннойПочтой.ПолучитьПараметрыОтправкиПриемаПоЭлектроннойПочте(ПриемыКОтправке, Тема, Текст, Клиент, ВложениеHTML);
	
КонецФункции

Процедура ОтправитьДокументПоЭлектроннойПочте(Форма) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(, НСтр("ru='Невозможно отправить помеченный на удаление документ!'"), 15, НСтр("ru='Не удалось отправить'"));
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	НастройкиПараметров = Новый Структура("Тема, Текст, ДокументыОтправки, ФормироватьPDFНаКлиенте, АдресWkhtmltopdfНаКлиенте", "", "", Новый Массив, Ложь, Ложь);
	УправлениеЭлектроннойПочтой.ЗаполнитьНастройкиПараметровПисьма(Форма.Объект, НастройкиПараметров, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки, 15, НСтр("ru='Не удалось отправить'"));
		Возврат;
	КонецЕсли;
	
	Если НастройкиПараметров.ФормироватьPDFНаКлиенте Тогда
		ПараметрыОтправления = ПолучитьПараметрыДляОтправкиPDFПриемаПоЭлектроннойПочте(НастройкиПараметров.ДокументыОтправки, НастройкиПараметров.Тема, НастройкиПараметров.Текст, Форма.Объект.Клиент, НастройкиПараметров.АдресWkhtmltopdfНаКлиенте);
	Иначе
		ПараметрыОтправления = УправлениеЭлектроннойПочтой.ПолучитьПараметрыОтправкиПриемаПоЭлектроннойПочте(НастройкиПараметров.ДокументыОтправки, НастройкиПараметров.Тема, НастройкиПараметров.Текст, Форма.Объект.Клиент);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОтправления);
	// Если при формировании параметров отправления произошла ошибка, то выводим сообщение.
	Если ПараметрыОтправления.Свойство("СообщениеОбОшибке") Тогда
		Если Не ПустаяСтрока(ПараметрыОтправления.СообщениеОбОшибке) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ПараметрыОтправления.СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
