#Область ПрограммныйИнтерфейс

#Область ШаблоныHTMLПрограммныйИнтерфейс

Процедура ОчиститьНекорректныеСопоставления(ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона) Экспорт
	
	Ошибки = ПолучитьОшибкиСЭМД(ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона);
	
	НесуществующиеПоляЭМД = Ошибки.Получить("НесуществующиеПоляЭМД");
	Если НесуществующиеПоляЭМД <> Неопределено Тогда
		Для Каждого СтруктураОшибки Из НесуществующиеПоляЭМД.Ошибки Цикл
			СтрокаСОшибкой = СтруктураОшибки.СтрокаТаблицы;
			Если СтрокаСОшибкой.Свойство("Параметр") Тогда
				СтрокаСОшибкой.localid = "";
				СтрокаСОшибкой.localidПредставление = "";
			Иначе
				ТаблицаКонстант.Удалить(СтрокаСОшибкой);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НезаполненныеКонстанты = Ошибки.Получить("НезаполненныеКонстанты");
	Если НезаполненныеКонстанты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураОшибки Из НезаполненныеКонстанты.Ошибки Цикл
		ТаблицаКонстант.Удалить(СтруктураОшибки.СтрокаТаблицы);
		УстановитьФлагИспользованДляLocalid(СтруктураОшибки.СтрокаТаблицы.localid, Ложь, ТаблицаLocalidМакета);
	КонецЦикла;
	
КонецПроцедуры

Функция МожноИспользоватьLocalid(СтрокаLocalid, ТаблицаLocalidМакета) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаLocalid.ГруппирующееПоле) Тогда
		Возврат (СтрокаLocalid.Использован = 0 Или СтрокаLocalid.Множественное);
	КонецЕсли;
	
	Для Каждого ГруппирующееПоле Из СтрокаLocalid.ГруппирующееПоле Цикл
		СтрокаГруппы = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid",Строка(ГруппирующееПоле)))[0];
		Если СтрокаГруппы.Использован > 0 И
			(СтрокаLocalid.Множественное
				Или СтрокаГруппы.Использован > СтрокаLocalid.Использован)
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьФлагИспользованДляLocalid(Localid, ЗначениеИстина, ТаблицаLocalidМакета) Экспорт
	
	СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", Localid));
	Если СтрокиLocalid.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеИстина Тогда
		СтрокиLocalid[0].Использован = СтрокиLocalid[0].Использован + 1;
	Иначе
		СтрокиLocalid[0].Использован = СтрокиLocalid[0].Использован - 1;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстОшибок(ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона) Экспорт
	
	Ошибки = ПолучитьОшибкиСЭМД(ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона);
	
	ЧастиТекстаОшибки = Новый Массив;
	
	Для Каждого ТипОшибки Из Ошибки Цикл
		СтруктураТипаОшибки = ТипОшибки.Значение;
		СтрокиОшибокПоТипу = Новый Массив;
		СтрокиОшибокПоТипу.Добавить(СтруктураТипаОшибки.ЗаголовокОшибки);
		
		НомерОшибки = 1;
		Для Каждого СтрокаСОшибкой Из СтруктураТипаОшибки.Ошибки Цикл
			СтрокиОшибокПоТипу.Добавить(СтрШаблон("%1. %2", НомерОшибки, СтрокаСОшибкой.Представление));
			НомерОшибки = НомерОшибки + 1;
		КонецЦикла;
		ЧастиТекстаОшибки.Добавить(СтрСоединить(СтрокиОшибокПоТипу, Символы.ПС));
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиТекстаОшибки, Символы.ПС + Символы.ПС);
	
КонецФункции

Процедура ПроверитьОшибкиСЭМД(ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона) Экспорт
	
	ТекстОшибки = СформироватьТекстОшибок(ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстПредупреждения = НСтр("ru='Ошибок не обнаружено'");
	Иначе
		ТекстПредупреждения = НСтр("ru='Обнаружены следующие ошибки:'") + Символы.ПС + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

Процедура ДобавитьВКонстанты(ТаблицаLocalidМакета, ТаблицаКонстант, Элементы) Экспорт
	
	ТекущаяСтрокаLocalid = Элементы.ТаблицаLocalidМакета.ТекущиеДанные;
	
	Если ТекущаяСтрокаLocalid = Неопределено Тогда
		ТекущаяСтрокаLocalid = Элементы.ТаблицаLocalidМакетаОбработки.ТекущиеДанные;
	КонецЕсли;
	
	Если Не МожноИспользоватьLocalid(ТекущаяСтрокаLocalid, ТаблицаLocalidМакета) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементТаблица = Элементы.ТаблицаКонстант;
	Если ТекущаяСтрокаLocalid = Неопределено Тогда
		ТекущаяСтрокаLocalid = Элементы.ТаблицаLocalidМакетаОбработки.ТекущиеДанные;
		ЭлементТаблица = Элементы.ТаблицаКонстантОбработки;
		Если ТекущаяСтрокаLocalid = Неопределено Тогда
			ПоказатьПредупреждение(,НСтр("ru='Не выбрано поле СЭМД'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.localid = ТекущаяСтрокаLocalid.localid;
	НоваяСтрока.localidПредставление = ТекущаяСтрокаLocalid.localidПредставление;
	ЭлементТаблица.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ТекущаяСтрокаLocalid.Использован = ТекущаяСтрокаLocalid.Использован + 1;
	
	ОбновитьВидимостьКолонокКонстант(ТаблицаКонстант, ТаблицаLocalidМакета, Элементы);
	
КонецПроцедуры

Процедура ТаблицаПараметровПриИзменении(Форма) Экспорт
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ТаблицаLocalidКонстантыПриИзменении(Форма, ТаблицаКонстант, ТаблицаLocalidМакета, Элементы) Экспорт
	
	ОбновитьВидимостьКолонокКонстант(ТаблицаКонстант, ТаблицаLocalidМакета, Элементы);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеТаблицыПриИзмененииПредставления(Элемент, ТаблицаLocalidМакета) Экспорт
	
	ТекДанные = Элемент.Родитель.ТекущиеДанные;
	
	Поля = ПоляПредставленийИДанныхЭлементов();
	
	ПоляЭлемента = Поля.Получить(Элемент.Имя);
	Если ПоляЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные[ПоляЭлемента.ПолеПредставления]) Тогда
		Элемент.ПодсказкаВвода = "";
		Если ПоляЭлемента.ПолеДанных = "localid" Тогда
			УстановитьФлагИспользованДляLocalid(ТекДанные.localid, Ложь, ТаблицаLocalidМакета);
		КонецЕсли;
		ТекДанные[ПоляЭлемента.ПолеДанных] = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуLocalid(ТаблицаLocalidМакета, ВидДокумента, ТаблицаКонстант, Элементы) Экспорт
	
	ТаблицаLocalidМакета.Очистить();
	ЕстьКлассификацииПоля = Ложь;
	ЕстьLocalidРодителя = Ложь;
	
	СоответсвияLocalid = ИнтеграцияЕГИСЗВызовСервера.ПолучитьСписокLocalidПоВидуДокумента(ВидДокумента);
	Для Сч = 0 По СоответсвияLocalid.Количество() - 1 Цикл
		ТаблицаLocalidМакета.Добавить();
	КонецЦикла;
	
	Для Каждого LocalidДокумента Из СоответсвияLocalid Цикл
		
		LocalidДокумента = LocalidДокумента.Значение;
		НоваяСтрока = ТаблицаLocalidМакета.Получить(LocalidДокумента.Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, LocalidДокумента);
		НоваяСтрока.localidПредставление = LocalidДокумента.Представление;
		МассивТипов = Новый Массив;
		
		Если LocalidДокумента.Свойство("Классификатор")
			И СтрНайти(НРег(LocalidДокумента.Классификатор), "#codesystem") = 0
		Тогда
			Для Каждого ЭлементКлассификатора Из СтрРазделить(LocalidДокумента.Классификатор, ",") Цикл
				ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(ЭлементКлассификатора);
				МассивТипов.Добавить(ПараметрыСправочника.Тип);
				Если ПараметрыСправочника.Свойство("ВидКлассификатора") Тогда
					//НоваяСтрока.ВидКлассификатора = ПараметрыСправочника.ВидКлассификатора;
					НоваяСтрока.ВидыКлассификатора.Добавить(ПараметрыСправочника.ВидКлассификатора);
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока.ПредставлениеВидовКлассификатора = СтрСоединить(НоваяСтрока.ВидыКлассификатора.ВыгрузитьЗначения(), ", ");
			
			Если LocalidДокумента.ДопустимыеЗначения <> Неопределено Тогда
				НоваяСтрока.ОтборДопустимыхЗначений.ЗагрузитьЗначения(LocalidДокумента.ДопустимыеЗначения);
			КонецЕсли;
			
			Если LocalidДокумента.Свойство("ДопустимыеКлассификации") Тогда
				НоваяСтрока.ОтборДопустимыхКлассификаций.ЗагрузитьЗначения(LocalidДокумента.ДопустимыеКлассификации);
			КонецЕсли;
			//ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(LocalidДокумента.Классификатор);
			//МассивТипов.Добавить(ПараметрыСправочника.Тип);
			//Если ПараметрыСправочника.Свойство("ВидКлассификатора") Тогда
			//	НоваяСтрока.ВидКлассификатора = ПараметрыСправочника.ВидКлассификатора;
			//	
			//	Если LocalidДокумента.ДопустимыеЗначения <> Неопределено Тогда
			//		НоваяСтрока.ОтборДопустимыхЗначений.ЗагрузитьЗначения(LocalidДокумента.ДопустимыеЗначения);
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
		Если LocalidДокумента.Свойство("ТипДанных") Тогда
			Для Каждого ТипДанных Из LocalidДокумента.ТипДанных Цикл
				МассивТипов.Добавить(ТипДанных);
			КонецЦикла;
		КонецЕсли;
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		
		Если LocalidДокумента.Свойство("КлассификацияПоля") Тогда
			ЕстьКлассификацииПоля = Истина;
			ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(LocalidДокумента.КлассификацияПоля);
			МассивТипов.Очистить();
			МассивТипов.Добавить(ПараметрыСправочника.Тип);
			НоваяСтрока.КлассификацияПоляТип = Новый ОписаниеТипов(МассивТипов);
			Если ПараметрыСправочника.Свойство("ВидКлассификатора") Тогда
				НоваяСтрока.КлассификацияПоляКлассификаторМЗ = ПараметрыСправочника.ВидКлассификатора;
			КонецЕсли;
		КонецЕсли;
		
		Если LocalidДокумента.Свойство("Родитель") Тогда// И ПараметрДокумента.Родитель.Свойство("ЕстьМножественное") Тогда
			ЕстьLocalidРодителя = Истина;
			Для Каждого СтруктураРодителя Из LocalidДокумента.Родитель Цикл
				НоваяСтрока.ГруппирующееПоле.Добавить(СтруктураРодителя.localid);
				НоваяСтрока.ГруппирующееПолеПредставление.Добавить(СтруктураРодителя.Представление);
			КонецЦикла;
		КонецЕсли;
		
		Если LocalidДокумента.Свойство("Секция") Тогда
			Для Каждого ИмяСекции Из LocalidДокумента.Секция Цикл
				НоваяСтрока.Секция.Добавить(ИмяСекции);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ГруппирующееПоле) Тогда
			НоваяСтрока.Множественное = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьОбязательныеПоляLocalid(ТаблицаLocalidМакета, ТаблицаКонстант);
	
	Элементы.ТаблицаLocalidМакетаГруппирующееПолеПредставление.Видимость = ЕстьLocalidРодителя;
	Элементы.ТаблицаПараметровГруппирующееПолеПредставление.Видимость	 = ЕстьLocalidРодителя Или ЕстьКлассификацииПоля;
	Элементы.ТаблицаLocalidМакетаГруппаКлассификацияПоля.Видимость		 = ЕстьКлассификацииПоля;
	Элементы.ТаблицаПараметровКлассификацияПоля.Видимость				 = ЕстьКлассификацииПоля;
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТаблицаLocalidМакетаОбработкиГруппирующееПолеПредставление",	ЕстьLocalidРодителя);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТаблицаLocalidМакетаОбработкиГруппаКлассификацияПоля",		ЕстьКлассификацииПоля);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияТаблицамШаблоновГруппирующееПолеПредставление",	ЕстьLocalidРодителя Или ЕстьКлассификацииПоля);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияТаблицамШаблоновКлассификацияПоля",				ЕстьКлассификацииПоля);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияПараметрамГруппирующееПолеПредставление",		ЕстьLocalidРодителя Или ЕстьКлассификацииПоля);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияПараметрамКлассификацияПоля",					ЕстьКлассификацииПоля);
	
	ОбновитьВидимостьКолонокКонстант(ТаблицаКонстант, ТаблицаLocalidМакета, Элементы);
	
КонецПроцедуры

Процедура ГруппирующееПолеПредставлениеНачалоВыбора(Элемент, ТаблицаПараметров, ТаблицаLocalidМакета, ТаблицаКонстант) Экспорт
	
	ТекСтрока = Элемент.Родитель.ТекущиеДанные;
	Элемент.ПодсказкаВвода = ТекСтрока.ГруппирующееПолеПредставление;
	Элемент.СписокВыбора.Очистить();
	ТекLocalid = ТекСтрока.localid;
	Если Не ЗначениеЗаполнено(ТекLocalid) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКлассификация = Ложь;
	ЧастиLocalid = СтрРазделить(ТекLocalid, ".");
	
	Если ЧастиLocalid.Количество() > 1 Тогда
		Если ЧастиLocalid[1] = "КлассификацияПоля" Тогда
			ЭтоКлассификация = Истина;
			ТекLocalid = ЧастиLocalid[0];
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Находим параметры текущего localid
	ПараметрыLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ТекLocalid));
	Если ПараметрыLocalid.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоКлассификация Тогда
		Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", ТекLocalid)) Цикл
			Если Не ЗначениеЗаполнено(СтрокаПараметра.КлассификацияПоля)
				И ТаблицаПараметров.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле", ТекСтрока.localid, СтрокаПараметра.Параметр)).Количество() = 0
			Тогда
				ПредставлениеЗначения = СтрШаблон("Параметр: %1", Строка(СтрокаПараметра.Параметр));
				Элемент.СписокВыбора.Добавить(СтрокаПараметра.Параметр, ПредставлениеЗначения);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКонстанты Из ТаблицаКонстант.НайтиСтроки(Новый Структура("localid", ТекLocalid)) Цикл
			Если Не ЗначениеЗаполнено(СтрокаКонстанты.КлассификацияПоля)
				И ТаблицаКонстант.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле", ТекСтрока.localid, ТаблицаКонстант.Индекс(СтрокаКонстанты))).Количество() = 0
			Тогда
				ПредставлениеЗначения = СтрШаблон("Константа №%1", Строка(СтрокаКонстанты.НомерСтроки));
				Элемент.СписокВыбора.Добавить(ТаблицаКонстант.Индекс(СтрокаКонстанты), ПредставлениеЗначения);
			КонецЕсли;
		КонецЦикла;
	Иначе
		localidРодитель = ПараметрыLocalid[0].ГруппирующееПоле;
		Если Не ЗначениеЗаполнено(localidРодитель) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ЗначениеСписка Из localidРодитель Цикл
			ЗначениеСписка = Строка(ЗначениеСписка);
			ВозможныеПараметры = ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", ЗначениеСписка));
			Для Каждого СтрокаПараметра Из ВозможныеПараметры Цикл
				ПредставлениеЗначения = СтрШаблон("Параметр: %1", Строка(СтрокаПараметра.Параметр));
				Элемент.СписокВыбора.Добавить(СтрокаПараметра.Параметр, ПредставлениеЗначения);
			КонецЦикла;
			ВозможныеКонстанты = ТаблицаКонстант.НайтиСтроки(Новый Структура("localid", ЗначениеСписка));
			Для Каждого СтрокаКонстанты Из ВозможныеКонстанты Цикл
				ПредставлениеЗначения = СтрШаблон("Константа №%1", Строка(СтрокаКонстанты.НомерСтроки));
				Элемент.СписокВыбора.Добавить(ТаблицаКонстант.Индекс(СтрокаКонстанты), ПредставлениеЗначения);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединяющееПолеПредставлениеНачалоВыбора(Элемент, ТаблицаПараметров, ТаблицаКонстант) Экспорт
	
	ТекСтрока = Элемент.Родитель.ТекущиеДанные;
	Элемент.ПодсказкаВвода = ТекСтрока.ОбъединяющееПолеПредставление;
	Элемент.СписокВыбора.Очистить();
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Если ЗначениеЗаполнено(ТекСтрока.localid)
		Или Не ТипыДанныхСовпадают(ТекСтрока.ТипЗначения.Типы(), ТипСтрока.Типы())
	Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметра.localid) И ТипыДанныхСовпадают(СтрокаПараметра.ТипЗначения.Типы(), ТипСтрока.Типы()) Тогда
			ПредставлениеЗначения = "Параметр: " + Строка(СтрокаПараметра.Параметр);
			Элемент.СписокВыбора.Добавить(СтрокаПараметра.Параметр, ПредставлениеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКонстанты Из ТаблицаКонстант Цикл
		Если ТипЗнч(СтрокаКонстанты.Значение) = Тип("Строка") Тогда
			ПредставлениеЗначения = СтрШаблон("Константа №%1", Строка(СтрокаКонстанты.НомерСтроки));
			Элемент.СписокВыбора.Добавить(ТаблицаКонстант.Индекс(СтрокаКонстанты), ПредставлениеЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КлассификацияПоляНачалоВыбора(Элемент, СтандартнаяОбработка, ТаблицаLocalidМакета, ТаблицаПараметров) Экспорт
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.localId) Тогда
		СтрокиПолейМакета = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ТекущиеДанные.localId));
		Если СтрокиПолейМакета.Количество() > 0 Тогда
			СтрокаПолейМакета = СтрокиПолейМакета[0];
			Если ЗначениеЗаполнено(СтрокаПолейМакета.КлассификацияПоляТип) Тогда
				ТипДанных		  = СтрокаПолейМакета.КлассификацияПоляТип;
				ВидКлассификатора = СтрокаПолейМакета.КлассификацияПоляКлассификаторМЗ;
				Элемент.ОграничениеТипа = ТипДанных;
				Если ЗначениеЗаполнено(ВидКлассификатора) Тогда
					
					ЕстьСтрокиКлассификации = Ложь;
					Если ТекущиеДанные.Свойство("Параметр") Тогда
						LocalidКлассификации = СтрШаблон("%1.КлассификацияПоля", ТекущиеДанные.localid);
						СтруктураПоискаСтрокКлассификаций = Новый Структура("ГруппирующееПоле, localid", ТекущиеДанные.Параметр, LocalidКлассификации);
						ЕстьСтрокиКлассификации = ТаблицаПараметров.НайтиСтроки(СтруктураПоискаСтрокКлассификаций).Количество() > 0;
					КонецЕсли;
					
					Если Не ЕстьСтрокиКлассификации Тогда
						ПараметрыВыбораПоля = Новый Массив;
						ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.ВидКлассификатора", ВидКлассификатора));
						
						Если СтрокаПолейМакета.ОтборДопустимыхКлассификаций.Количество() > 0 Тогда
							ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.УИДЕГИСЗ", СтрокаПолейМакета.ОтборДопустимыхКлассификаций.ВыгрузитьЗначения()));
						КонецЕсли;
						
						Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
						Возврат;
					КонецЕсли;
				Иначе
					Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Отмена выбора - вариант по умолчанию.
	СтандартнаяОбработка = Ложь;
	Элемент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	ТекущиеДанные.КлассификацияПоля = Неопределено;
	
КонецПроцедуры

Процедура ПолеТаблицыПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ТаблицаПараметров, ТаблицаLocalidМакета) Экспорт
	
	ТекДанные = Элемент.Родитель.ТекущиеДанные;
	
	Поля = ПоляПредставленийИДанныхЭлементов();
	
	ПоляЭлемента = Поля.Получить(Элемент.Имя);
	Если ПоляЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоляЭлемента.ПолеДанных = "localid" Тогда
		Если ЗначениеЗаполнено(ТекДанные.ОбъединяющееПоле) Тогда
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru='Выбранный параметр объединён с параметром ""%1"" и является состовной частью поля ЭМД ""%2"".%3Отменить объединение?'");
			ПредставлениеLocalidОбъединяющегоПоля = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", ТекДанные.ОбъединяющееПоле))[0].localidПредставление;
			СтрокаLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ВыбранноеЗначение))[0];
			ПараметрыСвязиСLocalid = Новый Структура("СтрокаПриемник, СтрокаИсточник", ТекДанные, СтрокаLocalid);
			ОповещениеОбОтменеОбъединения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОтменеОбъединения", ИнтеграцияЕГИСЗ_СЭМДКлиент, ПараметрыСвязиСLocalid);
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекДанные.ОбъединяющееПоле, ПредставлениеLocalidОбъединяющегоПоля, Символы.ПС);
			ПоказатьВопрос(ОповещениеОбОтменеОбъединения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
		Иначе
			// Ставим Использован = Ложь для предыдущего Localid
			УстановитьФлагИспользованДляLocalid(ТекДанные.localid, Ложь, ТаблицаLocalidМакета);
			// Ставим Использован = Истина для выбранного Localid
			УстановитьФлагИспользованДляLocalid(ВыбранноеЗначение, Истина, ТаблицаLocalidМакета);
		КонецЕсли;
	КонецЕсли;
	
	ТекДанные[ПоляЭлемента.ПолеДанных] = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	ТекДанные[ПоляЭлемента.ПолеПредставления] = ЭлементСписка.Представление;
	ЭлементСписка.Значение = ТекДанные[ПоляЭлемента.ПолеПредставления];
	ВыбранноеЗначение = ТекДанные[ПоляЭлемента.ПолеПредставления];
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораLocalid(Элемент, ТаблицаLocalidМакета) Экспорт
	
	Элемент.СписокВыбора.Очистить();
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ТипЗначенияПараметра = ТекущаяСтрока.ТипЗначения;
	ВидКлассификатораПараметра = ТекущаяСтрока.ВидКлассификатора;
	Элемент.ПодсказкаВвода = ТекущаяСтрока.localidПредставление;
	Для Каждого СтрокаLocalid Из ТаблицаLocalidМакета Цикл
		Если ТекущаяСтрока.localid <> СтрокаLocalid.localid
			И Не МожноИспользоватьLocalid(СтрокаLocalid, ТаблицаLocalidМакета)
		Тогда
			Если ЗначениеЗаполнено(ВидКлассификатораПараметра)
				И СтрокаLocalid.КлассификацияПоляКлассификаторМЗ = ВидКлассификатораПараметра
			Тогда
				Элемент.СписокВыбора.Добавить(СтрШаблон("%1.КлассификацияПоля", СтрокаLocalid.localid), СтрШаблон("Классификация поля ""%1""", СтрокаLocalid.localidПредставление));
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидКлассификатораПараметра) Тогда
			Если СтрокаLocalid.ВидыКлассификатора.НайтиПоЗначению(ВидКлассификатораПараметра) <> Неопределено Тогда
				Элемент.СписокВыбора.Добавить(СтрокаLocalid.localid, СтрокаLocalid.localidПредставление);
			ИначеЕсли СтрокаLocalid.КлассификацияПоляКлассификаторМЗ = ВидКлассификатораПараметра Тогда
				Элемент.СписокВыбора.Добавить(СтрШаблон("%1.КлассификацияПоля", СтрокаLocalid.localid), СтрШаблон("Классификация поля ""%1""", СтрокаLocalid.localidПредставление));
			КонецЕсли;
		Иначе
			Если ТипыДанныхСовпадают(ТипЗначенияПараметра.Типы(), СтрокаLocalid.ТипЗначения.Типы()) Тогда
				Элемент.СписокВыбора.Добавить(СтрокаLocalid.localid, СтрокаLocalid.localidПредставление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаLocalidМакетаВыбор(Элементы, ТаблицаLocalidМакета, ТаблицаПараметров) Экспорт
	
	ТекущаяСтрокаLocalid = Элементы.ТаблицаLocalidМакета.ТекущиеДанные;
	
	Если ТекущаяСтрокаLocalid = Неопределено Тогда
		ТекущаяСтрокаLocalid = Элементы.ТаблицаLocalidМакетаОбработки.ТекущиеДанные;
		Если ТекущаяСтрокаLocalid = Неопределено Тогда
			ПоказатьПредупреждение(,НСтр("ru='Не выбрано поле ЭМД!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПараметр = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	Если ТекущийПараметр = Неопределено Тогда
		ТекущийПараметр = Элементы.СоответствияПараметрам.ТекущиеДанные;
		Если ТекущийПараметр = Неопределено Тогда
			ПоказатьПредупреждение(,НСтр("ru='Не выбран параметр!'"));
			Возврат;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущийПараметр.ОбъединяющееПоле) И ТекущаяСтрокаLocalid <> Неопределено Тогда
		ПоказатьВопросОбОтменеОбъединения(ТекущийПараметр, ТекущаяСтрокаLocalid, ТаблицаПараметров);
		Возврат;
	КонецЕсли;
	
	Если ТекущийПараметр.localid = ТекущаяСтрокаLocalid.localid
		Или Не МожноИспользоватьLocalid(ТекущаяСтрокаLocalid, ТаблицаLocalidМакета)
	Тогда
		Возврат;
	КонецЕсли;
	
	ТипДанныхСовпадает = Ложь;
	Если ЗначениеЗаполнено(ТекущийПараметр.ВидКлассификатора) Тогда
		ТипДанныхСовпадает = ТекущаяСтрокаLocalid.ВидыКлассификатора.НайтиПоЗначению(ТекущийПараметр.ВидКлассификатора) <> Неопределено;
	Иначе
		ТипДанныхСовпадает = ТипыДанныхСовпадают(ТекущийПараметр.ТипЗначения.Типы(), ТекущаяСтрокаLocalid.ТипЗначения.Типы());
	КонецЕсли;
	
	Если ТипДанныхСовпадает Тогда
		Если ЗначениеЗаполнено(ТекущийПараметр.localid) Тогда
			ПараметрыЗамены = Новый Структура("СтрокаПриемник, СтрокаИсточник, ТаблицаLocalidМакета", ТекущийПараметр, ТекущаяСтрокаLocalid, ТаблицаLocalidМакета);
			ОповещениеОЗамене = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаменеLocalid", ИнтеграцияЕГИСЗ_СЭМДКлиент, ПараметрыЗамены);
			ТекстВопроса = НСтр(СтрШаблон("ru='Заменить у параметра %1 поле ЭМД %2 на %3?'", ТекущийПараметр.Параметр, ТекущийПараметр.localid, ТекущаяСтрокаLocalid.localid));
			ПоказатьВопрос(ОповещениеОЗамене, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ТекущийПараметр.localid = ТекущаяСтрокаLocalid.localid;
			ТекущийПараметр.localidПредставление = ТекущаяСтрокаLocalid.localidПредставление;
			ТекущаяСтрокаLocalid.Использован = ТекущаяСтрокаLocalid.Использован + 1;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Типы данных у параметра и поля ЭМД не совпадают!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКлассификациюВПолеЭМД(Элементы, ТаблицаLocalidМакета, ТаблицаПараметров, ТаблицаКонстант) Экспорт
	
	ТекущаяСтрокаLocalid = Элементы.ТаблицаLocalidМакета.ТекущиеДанные;
	
	Если ТекущаяСтрокаLocalid = Неопределено Тогда
		ТекущаяСтрокаLocalid = Элементы.ТаблицаLocalidМакетаОбработки.ТекущиеДанные;
		Если ТекущаяСтрокаLocalid = Неопределено Тогда
			ПоказатьПредупреждение(,НСтр("ru='Не выбрано поле ЭМД!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПараметр = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	Если ТекущийПараметр = Неопределено Тогда
		ТекущийПараметр = Элементы.СоответствияПараметрам.ТекущиеДанные;
		Если ТекущийПараметр = Неопределено Тогда
			ПоказатьПредупреждение(,НСтр("ru='Не выбран параметр!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийПараметр.localid = СтрШаблон("%1.КлассификацияПоля", ТекущаяСтрокаLocalid.localid) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПараметр.ВидКлассификатора)
		И ТекущийПараметр.ВидКлассификатора = ТекущаяСтрокаLocalid.КлассификацияПоляКлассификаторМЗ
	Тогда
		
		ТекущийПараметр.localid = СтрШаблон("%1.КлассификацияПоля", ТекущаяСтрокаLocalid.localid);
		ТекущийПараметр.localidПредставление = СтрШаблон("Классификация поля ""%1""", ТекущаяСтрокаLocalid.localid);
		ТекущийПараметр.КлассификацияПоля = Неопределено;
		ТекущийПараметр.ОбъединяющееПоле = Неопределено;
		ТекущийПараметр.ОбъединяющееПолеПредставление = Неопределено;
		
		Если ТекущийПараметр.ГруппирующееПоле <> Неопределено Тогда
			ОчиститьГруппирующееПоле = Истина;
			Если ТипЗнч(ТекущийПараметр.ГруппирующееПоле) = Тип("Число") Тогда
				Если ТекущийПараметр.ГруппирующееПоле <= ТаблицаКонстант.Количество()
					И ТаблицаКонстант[ТекущийПараметр.ГруппирующееПоле].localid = ТекущаяСтрокаLocalid.localid
				Тогда
					ОчиститьГруппирующееПоле = Ложь;
				КонецЕсли;
			Иначе
				СтрокиПараметра = ТаблицаПараметров.НайтиСтроки("Параметр", ТекущийПараметр.ГруппирующееПоле);
				Если СтрокиПараметра.Количество() > 0
					И СтрокиПараметра[0].localid = ТекущаяСтрокаLocalid.localid
				Тогда
					ОчиститьГруппирующееПоле = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ОчиститьГруппирующееПоле Тогда
				ТекущийПараметр.ГруппирующееПоле = Неопределено;
				ТекущийПараметр.ГруппирующееПолеПредставление = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Типы данных у параметра и классификации поля ЭМД не совпадают!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаКонстантЗначениеНачалоВыбора(Элемент, ТаблицаLocalidМакета, ТаблицаКонстант, ТекущаяСтрокаКонстанты) Экспорт
	
	УстановитьДоступныеТипыСтрокиКонстанты(Элемент, ТаблицаLocalidМакета, ТаблицаКонстант, ТекущаяСтрокаКонстанты);
	
КонецПроцедуры

Процедура ТаблицаКонстантЗначениеАвтоПодбор(Элемент, ТаблицаLocalidМакета, ТаблицаКонстант, ТекущаяСтрокаКонстанты) Экспорт
	
	УстановитьДоступныеТипыСтрокиКонстанты(Элемент, ТаблицаLocalidМакета, ТаблицаКонстант, ТекущаяСтрокаКонстанты);
	
КонецПроцедуры

Функция ПолучитьПредставлениеLocalid(СтрокаТаблицы, ТаблицаLocalidМакета) Экспорт
	
	Представление = "";
	
	ТекущийLocalid = СтрокаТаблицы.localid;
	ЭтоКлассификация = Ложь;
	ЧастиLocalid = СтрРазделить(СтрокаТаблицы.localid, ".");
	Если ЧастиLocalid.Количество() > 1 Тогда
		ЭтоКлассификация = Истина;
		ТекущийLocalid = ЧастиLocalid[0];
	КонецЕсли;
	
	НайденныеLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ТекущийLocalid));
	Если НайденныеLocalid.Количество() > 0 Тогда
		Если ЭтоКлассификация Тогда
			Представление = СтрШаблон("Классификация поля ""%1""", НайденныеLocalid[0].localidПредставление);
		Иначе
			Представление = НайденныеLocalid[0].localidПредставление;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.localid) И ЗначениеЗаполнено(СтрокаТаблицы.localidПредставление) Тогда
		Представление = СтрокаТаблицы.localidПредставление;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ТаблицаКонстантПередУдалением(Элемент, ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров) Экспорт
	
	Для Каждого УдаляемаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		СтрокаКонстанты = ТаблицаКонстант.НайтиПоИдентификатору(УдаляемаяСтрока);
		localid = СтрокаКонстанты.localid;
		УстановитьФлагИспользованДляLocalid(localid, Ложь, ТаблицаLocalidМакета);
		
		Для Каждого СтрокаТаблицы Из ТаблицаКонстант Цикл
			Если СтрокаТаблицы.ГруппирующееПоле = ТаблицаКонстант.Индекс(СтрокаКонстанты) Тогда
				СтрокаТаблицы.ГруппирующееПоле = Неопределено;
				СтрокаТаблицы.ГруппирующееПолеПредставление = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПараметров Цикл
			Если СтрокаТаблицы.ГруппирующееПоле = ТаблицаКонстант.Индекс(СтрокаКонстанты) Тогда
				СтрокаТаблицы.ГруппирующееПоле = Неопределено;
				СтрокаТаблицы.ГруппирующееПолеПредставление = Неопределено;
			КонецЕсли;
			Если СтрокаТаблицы.ОбъединяющееПоле = ТаблицаКонстант.Индекс(СтрокаКонстанты) Тогда
				СтрокаТаблицы.ОбъединяющееПоле = Неопределено;
				СтрокаТаблицы.ОбъединяющееПолеПредставление = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаКонстантЗначениеПриИзменении(ТаблицаКонстант, ТаблицаLocalidМакета) Экспорт
	
	ПересчитатьОбязательныеПоляLocalid(ТаблицаLocalidМакета, ТаблицаКонстант);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШаблоныHTML

Процедура ПослеЗакрытияВопросаОбОтменеОбъединения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Параметры.СтрокаПриемник.localid = Параметры.СтрокаИсточник.localid;
		Параметры.СтрокаПриемник.localidПредставление = Параметры.СтрокаИсточник.localidПредставление;
		Параметры.СтрокаПриемник.ОбъединяющееПоле = Неопределено;
		Параметры.СтрокаПриемник.ОбъединяющееПолеПредставление = "";
		Параметры.СтрокаИсточник.Использован = Параметры.СтрокаИсточник.Использован + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияВопросаОУдаленииLocalid(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Параметры.ТаблицаКонстант.Удалить(Параметры.ТекущаяСтрокаКонстанты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияВопросаОЗаменеLocalid(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтарыйLocalid = Параметры.СтрокаПриемник.localid;
		Параметры.СтрокаПриемник.localid = Параметры.СтрокаИсточник.localid;
		Параметры.СтрокаПриемник.localidПредставление = Параметры.СтрокаИсточник.localidПредставление;
		Параметры.СтрокаИсточник.Использован = Параметры.СтрокаИсточник.Использован + 1;
		УстановитьФлагИспользованДляLocalid(СтарыйLocalid, Ложь, Параметры.ТаблицаLocalidМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьНесопоставленнымиПолямиЭМД(Ошибки, ТаблицаLocalidМакета)
	
	НесопоставленныеПоляЭМД = Новый Массив;
	
	// Проверка сопоставления обязательных localid
	Для Каждого СтрокаLocalid Из ТаблицаLocalidМакета Цикл
		Если Не (СтрокаLocalid.Свойство("ИспользованиеИсточникаЗаполнения")
				И СтрокаLocalid.ИспользованиеИсточникаЗаполнения)
			И СтрокаLocalid.Обязательное
			И МожноИспользоватьLocalid(СтрокаLocalid, ТаблицаLocalidМакета)
			И (Не СтрокаLocalid.Множественное
				Или (СтрокаLocalid.Множественное
					И СтрокаLocalid.Использован = 0))
		Тогда
			НесопоставленныеПоляЭМД.Добавить(Новый Структура("СтрокаТаблицы, Представление", СтрокаLocalid, СтрокаLocalid.localidПредставление));
		КонецЕсли;
	КонецЦикла;
	
	Если НесопоставленныеПоляЭМД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ЗаголовокОшибки", НСтр("ru='Не сопоставлены обязательные поля ЭМД:'"));
	СтруктураОшибки.Вставить("Ошибки", НесопоставленныеПоляЭМД);
	
	Ошибки.Вставить("НесопоставленныеПоляЭМД", СтруктураОшибки);
	
КонецПроцедуры

Процедура ДополнитьНесуществующимиПолямиЭМД(Ошибки, ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона)
	
	НесуществующиеПоляЭМД = Новый Соответствие;
	
	Для Каждого СтрокаКонстанты Из ТаблицаКонстант Цикл
		Если Не ЗначениеЗаполнено(СтрокаКонстанты.localid) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", СтрокаКонстанты.localid));
		Если СтрокиLocalid.Количество() = 0 Тогда
			НесуществующиеПоляЭМД.Вставить(СтрокаКонстанты, СтрокаКонстанты.localid);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидШаблона <> ПредопределенноеЗначение("Перечисление.ВидыШаблонов.Обработка") Тогда
		// Проверка на тип данных таблицы ТаблицаПараметров
		ПроверитьПараметрыТаблицы(ТаблицаПараметров, НесуществующиеПоляЭМД, ТаблицаLocalidМакета);
	Иначе
		// Проверка на несуществующий localid и тип данных таблицы СоответствияПараметрам
		ПроверитьПараметрыТаблицы(ТаблицаПараметров, НесуществующиеПоляЭМД, ТаблицаLocalidМакета);
		// Проверка на несуществующий localid и тип данных таблицы СоответствияПараметрамТаблиц
		ПроверитьПараметрыТаблицы(СоответствияТаблицамШаблонов, НесуществующиеПоляЭМД, ТаблицаLocalidМакета);
	КонецЕсли;
	
	Если НесуществующиеПоляЭМД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мНесуществующиеПоляЭМД = Новый Массив;
	
	Для Каждого НесуществующееПоле Из НесуществующиеПоляЭМД Цикл
		мНесуществующиеПоляЭМД.Добавить(Новый Структура("СтрокаТаблицы, Представление", НесуществующееПоле.Ключ, НесуществующееПоле.Значение));
	КонецЦикла;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ЗаголовокОшибки", НСтр("ru='Обнаружены поля ЭМД, которых нет в указанном виде медицинских документов:'"));
	СтруктураОшибки.Вставить("Ошибки", мНесуществующиеПоляЭМД);
	
	Ошибки.Вставить("НесуществующиеПоляЭМД", СтруктураОшибки);
	
КонецПроцедуры

Процедура ПроверитьПараметрыТаблицы(ПроверяемаяТаблица, НесуществующиеПоляЭМД, ТаблицаLocalidМакета)
	
	Для Каждого СтрокаПараметра Из ПроверяемаяТаблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаПараметра.localid) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекLocalid = СтрокаПараметра.localid;
		ЭтоКлассификация = Ложь;
		ЧастиLocalid = СтрРазделить(СтрокаПараметра.localid, ".");
		Если ЧастиLocalid.Количество() > 1
			И ЧастиLocalid[1] = "КлассификацияПоля"
		Тогда
			ЭтоКлассификация = Истина;
			ТекLocalid = ЧастиLocalid[0];
		КонецЕсли;
		
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ТекLocalid));
		Если НесуществующиеПоляЭМД.Получить(СтрокаПараметра) = Неопределено
			И (СтрокиLocalid.Количество() = 0
				Или ЭтоКлассификация
					И Не ЗначениеЗаполнено(СтрокиLocalid[0].КлассификацияПоляКлассификаторМЗ))
		Тогда
			НесуществующиеПоляЭМД.Вставить(СтрокаПараметра, СтрокаПараметра.localid);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьНезаполненнымиКонстантами(Ошибки, ТаблицаКонстант, ТаблицаLocalidМакета)
	
	НезаполненныеКонстанты = Новый Массив;
	
	Для Каждого СтрокаКонстанты Из ТаблицаКонстант Цикл
		Если Не ЗначениеЗаполнено(СтрокаКонстанты.localid) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", СтрокаКонстанты.localid));
		Если СтрокиLocalid.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаКонстанты.Значение)
			И ТипЗнч(СтрокаКонстанты.Значение) <> Тип("Число")
			И СтрокиLocalid[0].Обязательное
		Тогда
			НезаполненныеКонстанты.Добавить(Новый Структура("СтрокаТаблицы, Представление", СтрокаКонстанты, СтрокиLocalid[0].localidПредставление));
		КонецЕсли;
	КонецЦикла;
	
	Если НезаполненныеКонстанты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ЗаголовокОшибки", НСтр("ru='Обнаружены незаполненные константы обязательных полей ЭМД:'"));
	СтруктураОшибки.Вставить("Ошибки", НезаполненныеКонстанты);
	
	Ошибки.Вставить("НезаполненныеКонстанты", СтруктураОшибки);
	
КонецПроцедуры

Процедура ДополнитьНезаполненнымиКлассификациями(Ошибки, ТаблицаLocalidМакета, ТаблицаПараметров, ТаблицаКонстант)
	
	НезаполненныеКлассификации = Новый Соответствие;
	
	// Проверка классификаций
	Для Каждого СтрокаLocalid Из ТаблицаLocalidМакета Цикл
		Если Не ЗначениеЗаполнено(СтрокаLocalid.КлассификацияПоляТип)
			Или СтрокаLocalid.Использован = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", СтрокаLocalid.localid)) Цикл
			Если ЗначениеЗаполнено(СтрокаПараметра.КлассификацияПоля)
				Или НезаполненныеКлассификации.Получить(СтрокаПараметра) <> Неопределено
			Тогда
				Продолжить;
			КонецЕсли;
			
			ПолеЭМДКлассификации = СтрШаблон("%1.КлассификацияПоля", СтрокаПараметра.localid);
			Если ТаблицаПараметров.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле", ПолеЭМДКлассификации, СтрокаПараметра.Параметр)).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НезаполненныеКлассификации.Вставить(СтрокаПараметра, СтрокаПараметра.Параметр);
		КонецЦикла;
		
		// Константы
		Для Каждого СтрокаКонстанты Из ТаблицаКонстант.НайтиСтроки(Новый Структура("localid", СтрокаLocalid.localid)) Цикл
			Если ЗначениеЗаполнено(СтрокаКонстанты.КлассификацияПоля)
				Или НезаполненныеКлассификации.Получить(СтрокаКонстанты) <> Неопределено
			Тогда
				Продолжить;
			КонецЕсли;
			
			ПолеЭМДКлассификации = СтрШаблон("%1.КлассификацияПоля", СтрокаКонстанты.localid);
			Если ТаблицаПараметров.НайтиСтроки(Новый Структура("localid, ГруппирующееПоле", ПолеЭМДКлассификации, ТаблицаКонстант.Индекс(СтрокаКонстанты))).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НезаполненныеКлассификации.Вставить(СтрокаКонстанты, ?(ЗначениеЗаполнено(СтрокаКонстанты.localidПредставление), СтрокаКонстанты.localidПредставление, СтрокаКонстанты.localid));
		КонецЦикла;
	КонецЦикла;
	
	Если НезаполненныеКлассификации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мНезаполненныеКлассификации = Новый Массив;
	
	Для Каждого элНезаполненнойКлассификации Из НезаполненныеКлассификации Цикл
		мНезаполненныеКлассификации.Добавить(Новый Структура("СтрокаТаблицы, Представление", элНезаполненнойКлассификации.Ключ, элНезаполненнойКлассификации.Значение));
	КонецЦикла;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ЗаголовокОшибки", НСтр("ru='Обнаружены параметры с незаполненнымми классификациями:'"));
	СтруктураОшибки.Вставить("Ошибки", мНезаполненныеКлассификации);
	
	Ошибки.Вставить("НезаполненныеКлассификации", СтруктураОшибки);
	
КонецПроцедуры

Процедура ДополнитьНезаполненнымиГруппирующимиПолями(Ошибки, ТаблицаLocalidМакета, ТаблицаПараметров, ТаблицаКонстант)
	
	НезаполненныеГрупПоля = Новый Соответствие;
	
	// Проверка груп. полей
	Для Каждого СтрокаLocalid Из ТаблицаLocalidМакета Цикл
		
		Если ЗначениеЗаполнено(СтрокаLocalid.КлассификацияПоляКлассификаторМЗ) Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", СтрШаблон("%1.КлассификацияПоля", СтрокаLocalid.localid))) Цикл
				Если СтрокаТаблицы.ГруппирующееПоле = Неопределено
						И НезаполненныеГрупПоля.Получить(СтрокаТаблицы) = Неопределено
				Тогда
					НезаполненныеГрупПоля.Вставить(СтрокаТаблицы, СтрокаТаблицы.Параметр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаLocalid.ГруппирующееПоле)
			Или СтрокаLocalid.Использован = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПараметров.НайтиСтроки(Новый Структура("localid", СтрокаLocalid.localid)) Цикл
			Если СтрокаТаблицы.ГруппирующееПоле = Неопределено
				И НезаполненныеГрупПоля.Получить(СтрокаТаблицы) = Неопределено
			Тогда
				НезаполненныеГрупПоля.Вставить(СтрокаТаблицы, СтрокаТаблицы.Параметр);
			КонецЕсли;
		КонецЦикла;
		
		// Константы
		Для Каждого СтрокаТаблицы Из ТаблицаКонстант.НайтиСтроки(Новый Структура("localid", СтрокаLocalid.localid)) Цикл
			Если СтрокаТаблицы.ГруппирующееПоле = Неопределено
				И НезаполненныеГрупПоля.Получить(СтрокаТаблицы) = Неопределено
			Тогда
				НезаполненныеГрупПоля.Вставить(СтрокаТаблицы, ?(ЗначениеЗаполнено(СтрокаТаблицы.localidПредставление), СтрокаТаблицы.localidПредставление, СтрокаТаблицы.localid));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НезаполненныеГрупПоля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мНезаполненныеГрупПоля = Новый Массив;
	
	Для Каждого элНезаполненногоГрупПоля Из НезаполненныеГрупПоля Цикл
		мНезаполненныеГрупПоля.Добавить(Новый Структура("СтрокаТаблицы, Представление", элНезаполненногоГрупПоля.Ключ, элНезаполненногоГрупПоля.Значение));
	КонецЦикла;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ЗаголовокОшибки", НСтр("ru='Обнаружены параметры с незаполненнымми группирующими полями:'"));
	СтруктураОшибки.Вставить("Ошибки", мНезаполненныеГрупПоля);
	
	Ошибки.Вставить("НезаполненныеГрупПоля", СтруктураОшибки);
	
КонецПроцедуры

Процедура ДополнитьОшибкамиВитальныхПараметров(Ошибки, ТаблицаLocalidМакета, ТаблицаПараметров, ТаблицаКонстант)
	
	ВитальныеПараметры = Новый Массив;
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		Если СтрНайти(СтрокаПараметра.localid, ".КлассификацияПоля") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", СтрокаПараметра.localid));
		Если СтрокиLocalid.Количество() = 0
			Или СтрокиLocalid[0].КлассификацияПоляКлассификаторМЗ <> ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры")
			Или Не ЗначениеЗаполнено(СтрокаПараметра.КлассификацияПоля)
		Тогда
			Продолжить;
		КонецЕсли;
		
		ВитальныеПараметры.Добавить(Новый Структура("Параметр, КлассификацияПоля", СтрокаПараметра.Параметр, СтрокаПараметра.КлассификацияПоля));
	КонецЦикла;
	
	Для Каждого СтрокаКонстанты Из ТаблицаКонстант Цикл
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", СтрокаКонстанты.localid));
		Если СтрокиLocalid.Количество() = 0
			Или СтрокиLocalid[0].КлассификацияПоляКлассификаторМЗ <> ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры")
			Или Не ЗначениеЗаполнено(СтрокаКонстанты.КлассификацияПоля)
		Тогда
			Продолжить;
		КонецЕсли;
		
		ВитальныеПараметры.Добавить(Новый Структура("Значение, КлассификацияПоля, НомерСтроки", СтрокаКонстанты.Значение, СтрокаКонстанты.КлассификацияПоля, СтрокаКонстанты.НомерСтроки));
	КонецЦикла;
	
	НекорректныеТипы = ИнтеграцияЕГИСЗВызовСервера.ПроверитьСоответствиеТиповКлассификацийВитальныхПараметров(ВитальныеПараметры);
	
	Если НекорректныеТипы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ЗаголовокОшибки", НСтр("ru='Обнаружены некорректное заполнение витальных параметров:'"));
	СтруктураОшибки.Вставить("Ошибки", НекорректныеТипы);
	
	Ошибки.Вставить("НекорректныеТипыВитальныхПараметров", СтруктураОшибки);
	
КонецПроцедуры

Функция ТипыДанныхСовпадают(Знач СписокТипов1, Знач СписокТипов2)
	
	Если ТипЗнч(СписокТипов1) <> Тип("Массив") Тогда
		Если ТипЗнч(СписокТипов1) <> Тип("Тип") Тогда
			СписокТипов1 = ТипЗнч(СписокТипов1);
		КонецЕсли;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(СписокТипов1);
		СписокТипов1 = МассивТипов;
	КонецЕсли;
	
	Если ТипЗнч(СписокТипов2) <> Тип("Массив") Тогда
		Если ТипЗнч(СписокТипов2) <> Тип("Тип") Тогда
			СписокТипов2 = ТипЗнч(СписокТипов2);
		КонецЕсли;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(СписокТипов2);
		СписокТипов2 = МассивТипов;
	КонецЕсли;
	
	Для Каждого Тип1 Из СписокТипов1 Цикл
		Для Каждого Тип2 Из СписокТипов2 Цикл
			Если Тип1 = Тип2 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПоказатьВопросОбОтменеОбъединения(СтрокаПараметра, СтрокаLocalid, ТаблицаПараметров)
	
	ШаблонТекстаВопроса = НСтр("ru='Выбранный параметр объединён с параметром ""%1"" и является состовной частью поля ЭМД ""%2"".%3Отменить объединение?'");
	ПредставлениеLocalidОбъединяющегоПоля = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметра.ОбъединяющееПоле))[0].localidПредставление;
	ПараметрыСвязиСLocalid = Новый Структура("СтрокаПриемник, СтрокаИсточник", СтрокаПараметра, СтрокаLocalid);
	ОповещениеОбОтменеОбъединения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОтменеОбъединения", ИнтеграцияЕГИСЗ_СЭМДКлиент, ПараметрыСвязиСLocalid);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса, СтрокаПараметра.ОбъединяющееПоле, ПредставлениеLocalidОбъединяющегоПоля, Символы.ПС);
	ПоказатьВопрос(ОповещениеОбОтменеОбъединения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Функция ПолучитьОшибкиСЭМД(ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона)
	
	Ошибки = Новый Соответствие;
	
	ДополнитьНесопоставленнымиПолямиЭМД(Ошибки, ТаблицаLocalidМакета);
	ДополнитьНесуществующимиПолямиЭМД(Ошибки, ТаблицаLocalidМакета, ТаблицаКонстант, ТаблицаПараметров, СоответствияТаблицамШаблонов, ВидШаблона);
	ДополнитьНезаполненнымиКонстантами(Ошибки, ТаблицаКонстант, ТаблицаLocalidМакета);
	ДополнитьНезаполненнымиКлассификациями(Ошибки, ТаблицаLocalidМакета, ТаблицаПараметров, ТаблицаКонстант);
	ДополнитьНезаполненнымиГруппирующимиПолями(Ошибки, ТаблицаLocalidМакета, ТаблицаПараметров, ТаблицаКонстант);
	ДополнитьОшибкамиВитальныхПараметров(Ошибки, ТаблицаLocalidМакета, ТаблицаПараметров, ТаблицаКонстант);
	
	Возврат Ошибки;
	
КонецФункции

Процедура ПересчитатьОбязательныеПоляLocalid(ТаблицаLocalidМакета, ТаблицаКонстант)
	
	//Если ТаблицаКонстант.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	мСтрокиLocalid = Новый Массив;
	Для Каждого СтрокаLocalid Из ТаблицаLocalidМакета Цикл
		Если ЗначениеЗаполнено(СтрокаLocalid.УсловиеОбязательное) Тогда
			СтруктураLocalid = Новый Структура("localid, УсловиеОбязательное, Обязательное");
			ЗаполнитьЗначенияСвойств(СтруктураLocalid, СтрокаLocalid);
			мСтрокиLocalid.Добавить(СтруктураLocalid);
		КонецЕсли;
	КонецЦикла;
	
	Если мСтрокиLocalid.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мСтрокиКонстант = Новый Массив;
	Для Каждого СтрокаКонстанты Из ТаблицаКонстант Цикл
		мСтрокиКонстант.Добавить(Новый Структура("localid, Значение", СтрокаКонстанты.localid, СтрокаКонстанты.Значение));
	КонецЦикла;
	
	ИнтеграцияЕГИСЗВызовСервера.ПересчитатьОбязательныеПоляLocalid(мСтрокиLocalid, мСтрокиКонстант);
	
	Для Каждого СтрокаРезультатLocalid Из мСтрокиLocalid Цикл
		СтрокаLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", СтрокаРезультатLocalid.localid))[0];
		СтрокаLocalid.Обязательное = СтрокаРезультатLocalid.Обязательное;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВидимостьКолонокКонстант(ТаблицаКонстант, ТаблицаLocalidМакета, Элементы)
	
	ЕстьКонстантаСГруппировкой	 = Ложь;
	ЕстьКонстантаСКлассификацией = Ложь;
	
	Для Каждого СтрокаКонстанты Из ТаблицаКонстант Цикл
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", СтрокаКонстанты.localid));
		Если Не ЕстьКонстантаСГруппировкой Тогда
			Для Каждого СтрокаLocalid Из СтрокиLocalid Цикл
				Если ЗначениеЗаполнено(СтрокаLocalid.ГруппирующееПоле) Тогда
					ЕстьКонстантаСГруппировкой = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не ЕстьКонстантаСКлассификацией Тогда
			Для Каждого СтрокаLocalid Из СтрокиLocalid Цикл
				Если ЗначениеЗаполнено(СтрокаLocalid.КлассификацияПоляКлассификаторМЗ)
					Или ЗначениеЗаполнено(СтрокаLocalid.КлассификацияПоляТип)
				Тогда
					ЕстьКонстантаСКлассификацией = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЕстьКонстантаСГруппировкой И ЕстьКонстантаСКлассификацией Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ТаблицаКонстантГруппирующееПолеПредставление.Видимость	= ЕстьКонстантаСГруппировкой;
	Элементы.ТаблицаКонстантКлассификацияПоля.Видимость				= ЕстьКонстантаСКлассификацией;
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТаблицаКонстантОбработкиГруппирующееПолеПредставление",	ЕстьКонстантаСГруппировкой);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТаблицаКонстантОбработкиКлассификацияПоля",				ЕстьКонстантаСКлассификацией);
	
КонецПроцедуры

Процедура УстановитьДоступныеТипыСтрокиКонстанты(Элемент, ТаблицаLocalidМакета, ТаблицаКонстант, ТекущаяСтрокаКонстанты)
	
	ТекущийLocalid = Элемент.Родитель.ТекущиеДанные.localid;
	СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("Localid", ТекущийLocalid));
	
	Если СтрокиLocalid.Количество() = 0 Тогда
		ОповещениеОУдалении = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОУдаленииLocalid", ИнтеграцияЕГИСЗ_СЭМДКлиент, Новый Структура("ТаблицаКонстант, ТекущаяСтрокаКонстанты", ТаблицаКонстант, ТекущаяСтрокаКонстанты));
		ТекстВопроса = НСтр(СтрШаблон("ru='Поле ЭМД %1 не обнаружено! Удалить строку?'", ТекущийLocalid));
		ПоказатьВопрос(ОповещениеОУдалении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	СтрокаLocalid = СтрокиLocalid[0];
	
	Если СтрокаLocalid.ОтборДопустимыхЗначений.Количество() > 0 Тогда
		Если СтрокаLocalid.ВидыКлассификатора.Количество() > 0 Тогда
			ПараметрыВыбораПоля = Новый Массив;
			ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.ВидКлассификатора", СтрокаLocalid.ВидыКлассификатора.ВыгрузитьЗначения()));
			ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.УИДЕГИСЗ", СтрокаLocalid.ОтборДопустимыхЗначений.ВыгрузитьЗначения()));
			Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
			Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторыМинЗдрава");
			Возврат;
		ИначеЕсли СтрокаLocalid.ТипЗначения.Типы().Количество() = 1 Тогда
			ПараметрыВыбораПоля = Новый Массив;
			ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.УИДЕГИСЗ", СтрокаLocalid.ОтборДопустимыхЗначений.ВыгрузитьЗначения()));
			Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
		КонецЕсли;
	КонецЕсли;
	
	МассивТипов = Новый Массив();
	Для Каждого ТипДанных Из СтрокаLocalid.ТипЗначения.Типы() Цикл
		МассивТипов.Добавить(ТипДанных);
	КонецЦикла;
	
	Если СтрокаLocalid.ВидыКлассификатора.Количество() > 0 Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КлассификаторыМинЗдрава"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидКлассификатора", СтрокаLocalid.ВидыКлассификатора.ВыгрузитьЗначения());
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	
	Если Элемент.ОграничениеТипа <> ОписаниеТипа Тогда
		ТекущееЗначение = ТекущаяСтрокаКонстанты.Значение;
		Элемент.ОграничениеТипа = ОписаниеТипа;
		ТекущаяСтрокаКонстанты.Значение = ОписаниеТипа.ПривестиЗначение(ТекущееЗначение);
	КонецЕсли;
	
	//ТекущаяСтрокаКонстанты.Значение = ОписаниеТипа.ПривестиЗначение(ТекущаяСтрокаКонстанты.Значение);
	
КонецПроцедуры

Функция ПоляПредставленийИДанныхЭлементов()
	
	Поля = Новый Соответствие;
	Поля.Вставить("ТаблицаПараметровГруппирующееПолеПредставление",				Новый Структура("ПолеПредставления, ПолеДанных", "ГруппирующееПолеПредставление",	"ГруппирующееПоле"));
	Поля.Вставить("ТаблицаКонстантГруппирующееПолеПредставление",				Новый Структура("ПолеПредставления, ПолеДанных", "ГруппирующееПолеПредставление",	"ГруппирующееПоле"));
	Поля.Вставить("ТаблицаКонстантОбработкиГруппирующееПолеПредставление",		Новый Структура("ПолеПредставления, ПолеДанных", "ГруппирующееПолеПредставление",	"ГруппирующееПоле"));
	Поля.Вставить("СоответствияПараметрамГруппирующееПолеПредставление",		Новый Структура("ПолеПредставления, ПолеДанных", "ГруппирующееПолеПредставление",	"ГруппирующееПоле"));
	Поля.Вставить("СоответствияТаблицамШаблоновГруппирующееПолеПредставление",	Новый Структура("ПолеПредставления, ПолеДанных", "ГруппирующееПолеПредставление",	"ГруппирующееПоле"));
	Поля.Вставить("ТаблицаПараметровLocalidПредставление",						Новый Структура("ПолеПредставления, ПолеДанных", "localidПредставление",			"localid"));
	Поля.Вставить("СоответствияПараметрамLocalidПредставление",					Новый Структура("ПолеПредставления, ПолеДанных", "localidПредставление",			"localid"));
	Поля.Вставить("ТаблицаПараметровОбъединяющееПолеПредставление",				Новый Структура("ПолеПредставления, ПолеДанных", "ОбъединяющееПолеПредставление",	"ОбъединяющееПоле"));
	Поля.Вставить("СоответствияПараметрамОбъединяющееПолеПредставление",		Новый Структура("ПолеПредставления, ПолеДанных", "ОбъединяющееПолеПредставление",	"ОбъединяющееПоле"));
	
	Возврат Поля;
	
КонецФункции

#КонецОбласти

#КонецОбласти