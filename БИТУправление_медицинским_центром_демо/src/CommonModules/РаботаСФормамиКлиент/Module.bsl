#Область ПрограммныйИнтерфейс

// Документы

// Обработка регулирования в поле ввода времени
//
// Параметры:
//
//  Значение     			  - <Дата:время> - регулируемое значение
//  Направление  			  - <Число> - направление регулирования
//  ПериодичностьПланирования - периодичность планирования документа. Если не задана, то берется из настроек учета.
//
Функция ОбработчикРегулированияКвантуемогоВремени(Значение, Направление, ПериодичностьПланирования = Неопределено) Экспорт
	
	Если ПериодичностьПланирования = Неопределено Тогда
		ПериодичностьПланирования = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПериодичностьПланирования");
	КонецЕсли;
	
	КвантПланирования = ОбщегоНазначенияКлиент.ВремяВСекунды(ПериодичностьПланирования);
	
	Если (Направление=-1 и Значение < ПериодичностьПланирования) Тогда
		Значение = Дата(1,1,1);
	Иначе
		мДата = Значение;
		
		КалендарьПланирования.ОкруглитьВремяДоПериодаПланирования(мДата);
		
		Если Значение = мДата Тогда
			Значение = Значение + КвантПланирования * Направление;
		Иначе
			Значение = мДата - ?(Направление=-1,КвантПланирования,0);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТАНДАРТНЫХ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ФОРМ ДОКУМЕНТОВ.

// Перед удалением строки табличного поля Товары.  ТабличноеПоле - редактируемое табличное поле.
Процедура ТоварыПослеУдаления(ЭтаФорма, ТабличноеПоле) Экспорт
	
	ВывестиЗаголовкиСкидокДокумента(ЭтаФорма);
	
КонецПроцедуры

// После редактирования строки табличного поля Товары. ТабличноеПоле - редактируемое табличное поле.
Процедура ТоварыПриОкончанииРедактирования(ЭтаФорма,ТабличноеПоле, НоваяСтрока, ОтменаРедактирования, ИмяДок = "") Экспорт
	
	Если ИмяДок = "ОказаниеУслуг" Тогда
		ВывестиЗаголовкиСкидокДокумента(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// После редактирования строки табличного поля Оплата. ТабличноеПоле - редактируемое табличное поле.
Процедура ОплатаПриОкончанииРедактирования(ЭтаФорма,ТабличноеПоле, НоваяСтрока, ОтменаРедактирования) Экспорт
	РаботаСДокументамиКлиентСервер.ВывестиЗаголовокСуммаОплатыДокумента(ЭтаФорма);
КонецПроцедуры

// Процедура заполняет заголовки надписей панели инормации о скидках документа
//
// Параметры:
//  ЭтаФорма - форма открытого документа.
//
Процедура ВывестиЗаголовкиСкидокДокумента(ЭтаФорма) Экспорт
	
	Если ЭтаФорма<>Неопределено и       
		ЭтаФорма.Элементы.Найти("тСуммаБезСкидок")		 <> Неопределено и
		ЭтаФорма.Элементы.Найти("тСуммаСкидки")			 <> Неопределено 
	Тогда
		Попытка
			СуммаБезСкидок = ЭтаФорма.Объект.Сертификаты.Итог("Сумма") + ЭтаФорма.Объект.ПополнениеСертификатов.Итог("Сумма");
			СуммаСкидки    = 0;
			
			мсТЧ = Новый Массив();
			мсТЧ.Добавить("Работы");
			мсТЧ.Добавить("Товары");
			мсТЧ.Добавить("Материалы");
			Для Каждого ИмяТЧ из мсТЧ Цикл
				Для Каждого СтрокаСтоимости из ЭтаФорма.Объект[ИмяТЧ] Цикл
					СуммаБезСкидок	= СуммаБезСкидок + СтрокаСтоимости.Количество * СтрокаСтоимости.Цена;
					СуммаСкидки		= СуммаСкидки	 + СтрокаСтоимости.СуммаСкидки;
				КонецЦикла;
			КонецЦикла;
			
			ЭтаФорма.СуммаБезСкидок = СуммаБезСкидок;
			ЭтаФорма.СуммаСкидки = СуммаСкидки;
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

// Обработка обработка начала выбора номенклатуры из справочника с установкой отбора по виду номенклатуры
//
// Параметры:
//
//  Услуга        - <Булево> - если Истина, то в списке отображаются только услуги, иначе только товары
//  ТекЗначение   - текущее значение выбора из списка
//  ФормаВладелец - Форма-источник выбора .
//
Функция ВыбратьЭлементНоменклатурыПоВиду(Услуга,ТекЗначение,ФормаВладелец, МожноВыбиратьНаборы = Истина, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Отбор = Новый Структура("ВидНоменклатуры");
	Если Услуга И МожноВыбиратьНаборы Тогда
		
		Список = Новый Массив;
		Список.Добавить( ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Набор") );
		Список.Добавить( ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") );
		Отбор.ВидНоменклатуры = Список;
	Иначе
		Отбор.ВидНоменклатуры = ?(Услуга,ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга"), ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал"));
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	Если ЗначениеЗаполнено(ТекЗначение) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока",ТекЗначение); 
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	Если ОповещениеОЗакрытии = Неопределено Тогда
		Возврат ОткрытьФормуМодально("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, ФормаВладелец, ФормаВладелец,,,ОповещениеОЗакрытии);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВыборПодборОбработка(ВыбраннаяНоменклатура, ЗапрашиватьКоличество, ЗапрашиватьЦену, ЗапрашиватьХарактеристику, ЗапрашиватьСерию = Ложь, Действие="", ФормаВладелец = Неопределено, Количество = 1) Экспорт 

	СтандартнаяОбработка = Ложь;
	
	ИспользоватьЕдиницуТоваров = (Действие = "ПодборТовара");
	ДанныеНоменклатуры = РаботаСДокументамиСервер.ДанныеНоменклатурыПодборВДокумент(ВыбраннаяНоменклатура, ИспользоватьЕдиницуТоваров);
	
	// Заполним параметры для оповещения о выборе
	СтруктураПараметров = Новый Структура("Структура");
	СтруктураПараметров.Вставить("Номенклатура", ВыбраннаяНоменклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", Неопределено);

	СтруктураПараметров.Вставить("СерияНоменклатуры", Неопределено);

	СтруктураПараметров.Вставить("ЕдиницаИзмерения", ДанныеНоменклатуры.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("Количество", Количество);
	СтруктураПараметров.Вставить("Цена", Неопределено);
	
	СтруктураПараметров.Вставить("Действие", Действие);
	СтруктураПараметров.Вставить("ЗапрашиватьКоличество"	, ЗапрашиватьКоличество);
	СтруктураПараметров.Вставить("ЗапрашиватьЦену"			, ЗапрашиватьЦену);
	СтруктураПараметров.Вставить("ЗапрашиватьХарактеристику", ЗапрашиватьХарактеристику);
	СтруктураПараметров.Вставить("ЭтоПодбор", Истина);
	
	
	Если ФормаВладелец <> Неопределено 
		 И ФормаВладелец.Объект.Свойство("Склад")
	Тогда
		СтруктураПараметров.Вставить("Склад", ФормаВладелец.Объект.Склад);
	Иначе
		СтруктураПараметров.Вставить("Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	КонецЕсли; 
		
	ВестиУчетПоХарактеристикам = ДанныеНоменклатуры.ВестиУчетПоХарактеристикам;

	ВестиУчетПоСериям = ДанныеНоменклатуры.ВестиУчетПоСериям;

	
	Если (ЗапрашиватьКоличество) Или 
		(ЗапрашиватьЦену			И НЕ ДанныеНоменклатуры.ЭтоНабор) Или
		(ЗапрашиватьХарактеристику	И ВестиУчетПоХарактеристикам)
		Или (ЗапрашиватьСерию И ВестиУчетПоСериям) 
	Тогда
		Если ЗапрашиватьХарактеристику И ВестиУчетПоХарактеристикам 
			И (Не ЗапрашиватьСерию Или ЗапрашиватьСерию И Не ВестиУчетПоСериям) 	
		Тогда
			
			Если (ОбщегоНазначенияСервер.ЕстьХарактеристики(ВыбраннаяНоменклатура) = Истина) Тогда
				
				Если Действие = "ПодборРаботы" Тогда  
					ФормаДопПараметров = ПолучитьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметровСХарактеристикойУпр", , ФормаВладелец);
				Иначе
					ФормаДопПараметров = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаПодбораХарактеристикНоменклатуры", СтруктураПараметров, ФормаВладелец);
				КонецЕсли;
				
			ИначеЕсли ЗапрашиватьЦену ИЛИ ЗапрашиватьКоличество Тогда 
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной характеристики");
				
				//ФормаДопПараметров = ПолучитьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметровБезХарактеристикиУпр", , ФормаВладелец);
				ФормаДопПараметров = ПолучитьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметровБезХарактеристикиУпр", СтруктураПараметров, ФормаВладелец);
				
			Иначе
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной характеристики");
				
				Возврат СтруктураПараметров;
				
			КонецЕсли;
			
		ИначеЕсли ЗапрашиватьСерию И ВестиУчетПоСериям
			И (Не ЗапрашиватьХарактеристику Или ЗапрашиватьХарактеристику И Не ВестиУчетПоХарактеристикам) 
		Тогда
		
			Если (ОбщегоНазначенияСервер.ЕстьСерии(ВыбраннаяНоменклатура) = Истина) Тогда
				
				Если Не Действие = "ПодборРаботы" Тогда
					
					ФормаДопПараметров = ПолучитьФорму("Справочник.СерииНоменклатуры.Форма.ФормаПодбораСерийНоменклатуры", СтруктураПараметров, ФормаВладелец);
					
				КонецЕсли;
				
			ИначеЕсли ЗапрашиватьЦену ИЛИ ЗапрашиватьКоличество Тогда 
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной серии");
				
				ФормаДопПараметров = ПолучитьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметровБезХарактеристикиУпр", СтруктураПараметров, ФормаВладелец);
				
			Иначе
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной серии");
				
				Возврат СтруктураПараметров;
				
			КонецЕсли;
			
		ИначеЕсли ЗапрашиватьХарактеристику И ВестиУчетПоХарактеристикам И ЗапрашиватьСерию И ВестиУчетПоСериям Тогда
			
			ЕстьСерии = ОбщегоНазначенияСервер.ЕстьСерии(ВыбраннаяНоменклатура); 
			ЕстьХарактеристики = ОбщегоНазначенияСервер.ЕстьХарактеристики(ВыбраннаяНоменклатура);
			
			Если ЕстьСерии И ЕстьХарактеристики Тогда  
				
				Если Не Действие = "ПодборРаботы" Тогда
					
					ФормаДопПараметров = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаПодбораХарактеристикиНоменклатурыПростая", СтруктураПараметров, ФормаВладелец);
							
				КонецЕсли;
				
			ИначеЕсли Не ЕстьСерии И ЕстьХарактеристики Тогда 
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной серии");
				
				Если Действие = "ПодборРаботы" Тогда  
					ФормаДопПараметров = ПолучитьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметровСХарактеристикойУпр", , ФормаВладелец);
				Иначе
					ФормаДопПараметров = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаПодбораХарактеристикНоменклатуры", СтруктураПараметров, ФормаВладелец);
				КонецЕсли;
				
			ИначеЕсли ЕстьСерии И Не ЕстьХарактеристики Тогда 
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной характеристики");
					
				Если Не Действие = "ПодборРаботы" Тогда
					ФормаДопПараметров = ПолучитьФорму("Справочник.СерииНоменклатуры.Форма.ФормаПодбораСерийНоменклатуры", СтруктураПараметров, ФормаВладелец);
				КонецЕсли;
				
			ИначеЕсли ЗапрашиватьЦену ИЛИ ЗапрашиватьКоличество Тогда 
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной серии и ни одной характеристики");
				
				ФормаДопПараметров = ПолучитьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметровБезХарактеристикиУпр", СтруктураПараметров, ФормаВладелец);
				
			Иначе
				
				Предупреждение("Для выбранной номенклатуры не указано ни одной серии и ни одной характеристики");
				
				Возврат СтруктураПараметров;
				
			КонецЕсли;	
			
		Иначе                                                    
			ФормаДопПараметров = ПолучитьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметровБезХарактеристикиУпр", СтруктураПараметров, ФормаВладелец);
		КонецЕсли;
		Если ФормаДопПараметров.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ВводПараметровСХарактеристикойУпр" Тогда  
			ФормаДопПараметров.СтруктураПараметров	 = СтруктураПараметров;
		КонецЕсли;
		Рез = ФормаДопПараметров.ОткрытьМодально();
		
		Если ТипЗнч(Рез) = Тип("Структура") Тогда
			Если Рез.Свойство("ЗапрашиватьСериюПослеВыбораХарактеристики") Тогда
				СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", Рез.ХарактеристикаНоменклатуры);
				ФормаДопПараметров = ПолучитьФорму("Справочник.СерииНоменклатуры.Форма.ФормаПодбораСерийНоменклатуры", СтруктураПараметров, ФормаВладелец);
				Рез = ФормаДопПараметров.ОткрытьМодально();
			Иначе
				Возврат Рез;
			КонецЕсли;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
				
		Возврат Рез;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ОбновитьОтборПодбора(ЭтаФорма, ИмяТЧ, ИмяВидаНом, ИмяВидаНом2 = Неопределено) Экспорт
	
	Если ИмяВидаНом2 <> Неопределено Тогда
		СписокНом = Новый СписокЗначений;
		СписокНом.Добавить(ИмяВидаНом);
		СписокНом.Добавить(ИмяВидаНом2);
		УстановитьОтборПодбора(СписокНом, ЭтаФорма.РеквизитСписокПодбор);
	Иначе
		УстановитьОтборПодбора(ИмяВидаНом, ЭтаФорма.РеквизитСписокПодбор);
	КонецЕсли;
	
	Если ИмяТЧ <> Неопределено Тогда
		ПараметрыПодбора = ЭтаФорма.РеквизитСписокПодбор.Параметры;
		Если ПараметрыПодбора.Элементы.Найти("ТабЧастьОтбораПоЕИ") <> Неопределено Тогда
			ПараметрыПодбора.УстановитьЗначениеПараметра("ТабЧастьОтбораПоЕИ",ИмяТЧ);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов(ЭтаФорма, ИмяТЧ); 

КонецПроцедуры	

Процедура УстановитьОтборПодбора(ИмяТипаНоменклатуры, ДинамическийСписок) Экспорт
	
	Если ИмяТипаНоменклатуры = "" Тогда
		РаботаСФормамиКлиент.СнятьОтборСписка("ВидНоменклатуры", ДинамическийСписок);		
	Иначе
		ВидыНом = ДопСерверныеФункцииПовтИсп.ПолучитьСоответствиеДляПеречисления("ВидыНоменклатуры");
		Если ТипЗнч(ИмяТипаНоменклатуры) = Тип("Строка") Тогда
			ОтборВидНоменклатуры = ВидыНом.Получить(ИмяТипаНоменклатуры);
		ИначеЕсли ТипЗнч(ИмяТипаНоменклатуры) = Тип("СписокЗначений") Тогда
			ОтборВидНоменклатуры = Новый СписокЗначений;
			Для Каждого ЭлементСписка Из ИмяТипаНоменклатуры Цикл
				ОтборВидНоменклатуры.Добавить(ВидыНом.Получить(ЭлементСписка.Значение));
			КонецЦикла;		
		КонецЕсли;	
		
		РаботаСФормамиКлиент.УстановитьОтборСписка("ВидНоменклатуры", ОтборВидНоменклатуры, ДинамическийСписок);
		
	КонецЕсли;	
	
КонецПроцедуры

// Стандартная обработка нажатия на кнопку "Подбор" в форме документа. 
// Возвращает новое значение пометки кнопки подбора.
//
// Параметры:
//  ЭтаФорма	 - УправляемаяФорма	- Форма
//  ИмяТЧ		 - Строка			- Имя табличной части документа
//  ИмяВидаНом	 - Строка			- Параметр отбора по виду номенклатуры (услуга, материал) 
//  ИмяВидаНом2	 - Строка			- Параметр отбора по виду номенклатуры (услуга, материал).
// 
// Возвращаемое значение:
//   - Булево.
//
Функция КнопкаПодборПриНажатии(ЭтаФорма, ИмяТЧ = "", ИмяВидаНом = Неопределено, ИмяВидаНом2 = Неопределено) Экспорт
	
	Пометка = Ложь;
	
	КнопкаПодбор = ЭтаФорма.Элементы.Найти(ИмяТЧ +"Подбор");
	Если КнопкаПодбор <> Неопределено Тогда
		
		Если КнопкаПодбор.Пометка Тогда
			КнопкаПодбор.Пометка = Ложь;
		Иначе
			КнопкаПодбор.Пометка = Истина;
			Если ЗначениеЗаполнено(ИмяВидаНом) Тогда
				ОбновитьОтборПодбора(ЭтаФорма, ИмяТЧ, ИмяВидаНом, ИмяВидаНом2); 
			КонецЕсли;
		КонецЕсли;
		
		Пометка = КнопкаПодбор.Пометка;
		ЭтаФорма.Элементы.ГруппаПодбор.Видимость = Пометка;
		
		Если Пометка Тогда
			УстановитьВидимостьЭлементов(ЭтаФорма, ИмяТЧ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пометка;
	
КонецФункции

Процедура УстановитьВидимостьЭлементов(ЭтаФорма, ИмяТЧ) Экспорт
	
	Если ЭтаФорма.Элементы.Найти("ПолеЗапрашиватьЦену") <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			РезультатПроверки = РаботаСФормамиСервер.ФлагиНаличияРеквизитовТЧ_Номенклатуры(ЭтаФорма.Объект.Ссылка,ИмяТЧ);
			Если ЗначениеЗаполнено(результатПроверки) Тогда
				ЭтаФорма.Элементы.ПолеЗапрашиватьКоличество.Видимость = РезультатПроверки.Количество;
				ЭтаФорма.Элементы.ПолеЗапрашиватьЦену.Видимость 	  = РезультатПроверки.Цена; 
				ЭтаФорма.Элементы.ПолеЗапрашиватьХарактеристику.Видимость = РезультатПроверки.ХарактеристикаНоменклатуры И
					УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
				ЭтаФорма.Элементы.ПолеЗапрашиватьСерию.Видимость = РезультатПроверки.СерияНоменклатуры;
			КонецЕсли;	
			
			Если ЭтаФорма.Элементы.ГруппаПодбор.Видимость Тогда 
				СтруктураНастроекПодбораСохр = РаботаСФормамиСервер.ЗагрузитьНастройкиПодбора(ТипЗнч(ЭтаФорма.Объект.Ссылка));
				Если СтруктураНастроекПодбораСохр <> Неопределено Тогда 
					СтруктураНастроекПодбораСохр.Свойство("ЗапрашиватьКоличество",ЭтаФорма.ЗапрашиватьКоличество);	
					СтруктураНастроекПодбораСохр.Свойство("ЗапрашиватьЦену",ЭтаФорма.ЗапрашиватьЦену);	
					СтруктураНастроекПодбораСохр.Свойство("ЗапрашиватьХарактеристику",ЭтаФорма.ЗапрашиватьХарактеристику);
					СтруктураНастроекПодбораСохр.Свойство("ЗапрашиватьСерию",ЭтаФорма.ЗапрашиватьСерию);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтаФорма.Элементы.ПолеЗапрашиватьКоличество.Видимость		= Ложь;
			ЭтаФорма.Элементы.ПолеЗапрашиватьЦену.Видимость				= Ложь;
			ЭтаФорма.Элементы.ПолеЗапрашиватьХарактеристику.Видимость	= Ложь;
			ЭтаФорма.Элементы.ПолеЗапрашиватьСерию.Видимость			= Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЛишниеКомандыПобор(ЭтаФорма, ПовторныйВызовСПроверкойПлатформы = Ложь) Экспорт
	
	// Обход проблемы возврата не той основной команды формы для 8.3.23, 8.3.24 и т.д. - вызов после открытия формы.
	// Не работает для быстрого программного открытия нескольких форм с подбором, не критично.
	Если ПовторныйВызовСПроверкойПлатформы Тогда
		Если РаботаСФормамиКлиентСервер.ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Тогда // 8.3.23 и выше.
			УниверсальныеМеханизмыКлиент.УстановитьЗначениеКлиентскогоКеша("ТекущаяОткрываемаяФорма", ЭтаФорма);
			ПодключитьОбработчикОжидания("Подбор_ПослеОткрытияФормыГлобальный", 0.1, Истина);
		КонецЕсли;
	Иначе
		УниверсальныеМеханизмыКлиент.УдалитьЗначениеКлиентскогоКеша("ТекущаяОткрываемаяФорма");
	КонецЕсли;
	
	// Основной функционал процедуры
	ГруппаПодбор = ЭтаФорма.Элементы.ГруппаПодбор;
	
	ПроизошлаСменаКомандыПоУмолчанию = Ложь;
	Для Каждого КнопкаФормы Из ГруппаПодбор.ПодчиненныеЭлементы.СписокПодбор.КоманднаяПанель.ПодчиненныеЭлементы Цикл 
		Если Найти(КнопкаФормы.Имя, "Выбрать") = 0	И 
			 Найти(КнопкаФормы.Имя, "Найти") = 0	И 
			 Найти(КнопкаФормы.Имя, "ОтменитьПоиск") = 0 
		Тогда
			КнопкаФормы.Видимость = Ложь;
		ИначеЕсли ТипЗнч(КнопкаФормы) = Тип("КнопкаФормы") Тогда
			ПроизошлаСменаКомандыПоУмолчанию = ПроизошлаСменаКомандыПоУмолчанию Или КнопкаФормы.КнопкаПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КнопкаФормы Из ГруппаПодбор.ПодчиненныеЭлементы.СписокПодбор.КонтекстноеМеню.ПодчиненныеЭлементы Цикл 
		Если Найти(КнопкаФормы.Имя, "Выбрать") = 0	И 
			 Найти(КнопкаФормы.Имя, "Найти") = 0	И 
			 Найти(КнопкаФормы.Имя, "ОтменитьПоиск") = 0 
		Тогда
			КнопкаФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Восстановление команды по-умолчанию для платформы 8.3.
	Если ЭтаФорма <> Неопределено И ПроизошлаСменаКомандыПоУмолчанию Тогда
		Попытка
			Для Каждого КнопкаФормы Из ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(КнопкаФормы) = Тип("КнопкаФормы")
					И КнопкаФормы.Имя = "ФормаПровестиИЗакрыть"
						Или КнопкаФормы.Имя = "ФормаЗаписатьИЗакрыть"
				Тогда
					КнопкаФормы.КнопкаПоУмолчанию = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры	

Процедура УстановитьПараметрПрейскурантПодбора(ЭтаФорма, Знач Прейскурант = Неопределено) Экспорт
	
	ПараметрыРеквизитаСПискаПодбора = ЭтаФорма.РеквизитСписокПодбор.Параметры;
	Если ПараметрыРеквизитаСПискаПодбора.Элементы.Найти("Прейскурант") <> Неопределено Тогда
	
		Если Прейскурант = Неопределено Тогда
			
			Попытка
				Если ЭтаФорма.Объект.Свойство("Прейскурант") Тогда
					Прейскурант = ЭтаФорма.Объект.Прейскурант;
				КонецЕсли;
			Исключение КонецПопытки;
			
			Если Не ЗначениеЗаполнено(Прейскурант) Тогда
				
				Попытка
					Прейскурант = ЭтаФорма["РеквизитПрейскурант"];
				Исключение КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыРеквизитаСПискаПодбора.УстановитьЗначениеПараметра("Прейскурант",Прейскурант);
		ОбновитьДинамическийСписокПринудительно(ЭтаФорма.РеквизитСписокПодбор);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура мПолучитьЦенуВФормуКлиент(ЭтаФорма, СтруктураПараметров, НоваяЕдиница = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ТекСтрока = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма");
		
		Если СтруктураПараметров.ЗапрашиватьХарактеристику Тогда
			ТекСтрока.Вставить("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекСтрока,СтруктураПараметров);
		ТекСтрока.Цена = 0;
		Если НоваяЕдиница <> Неопределено Тогда
			ТекСтрока.ЕдиницаИзмерения = НоваяЕдиница;
		КонецЕсли;
		
		ТекСтрока.Коэффициент = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.ЕдиницаИзмерения, "Коэффициент");
		СтруктураШапкиДокумента = РаботаСДокументамиКлиент.СформироватьСтруктуруШапкиДокумента(ЭтаФорма.ВладелецФормы.Объект);
		
		СтрЦенаСумма = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(СтруктураШапкиДокумента, 
																					 Неопределено, 
																					 ТекСтрока, 
																					 ?(СтруктураШапкиДокумента.Свойство("Прейскурант"),СтруктураШапкиДокумента.Прейскурант,Неопределено),
																					 ТекСтрока);
		ЭтаФорма.Цена = СтрЦенаСумма.Цена;
		
	Иначе
		Коэффициент = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.Номенклатура, "Коэффициент");
		ЭтаФорма.Цена = ЭтаФорма.Цена * Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора картинки.
//
Функция ПолучитьФильтрИзображений() Экспорт 

	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	      + "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	      + "Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	      + "Формат tiff (*.tif)|*.tif|"
	      + "Формат gif (*.gif)|*.gif|"
	      + "Формат png (*.png)|*.png|"
	      + "Формат icon (*.ico)|*.ico|"
	      + "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";

КонецФункции // ПолучитьФильтрИзображений()

// Открывает форму переданного ссылочного значения, если оно еще не открыто.
Процедура ОткрытьФормуСсылочногоЗначения(Ссылка) Экспорт
	
	// Поиск уже открытого окна
	ОкнаПриложения = ПолучитьОкна();
	Для Каждого Окно Из ОкнаПриложения Цикл
		Форма = Окно.ПолучитьСодержимое();
		Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения")
			И Форма.Параметры.Свойство("Ключ")
			И Форма.Параметры.Ключ = Ссылка
		Тогда
			Форма.Активизировать();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьЗначение(Ссылка);
	
КонецПроцедуры

Процедура УстановитьОтборСписка(ЛЗ, ПЗ, ДинамическийСписок, ВидСравненияОтбора = Неопределено) Экспорт

	Перем ЭО, ГруппаОтбор;
	
	// Если этот же отбор есть в настройках компоновски списка, то надо этот отбор убрать
	Попытка
		ОтборКомпоновкиСписка  = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ЭлементОтбора Из ОтборКомпоновкиСписка  Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
			Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	Исключение КонецПопытки;		
	
	// Если возможно, использую отбор в пользовательских настройках списка
	Попытка
		ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого ЭлементНастройки Из ПользовательскиеНастройки Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
				ГруппаОтбор = ЭлементНастройки;
				Для Каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
						И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
					Тогда
						ЭО = ЭлементОтбора;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ГруппаОтбор <> Неопределено Тогда
			Если ЭО = Неопределено Тогда
				ЭО = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
				ЭО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	Если ЭО = Неопределено Тогда
		ОтборЭлементы = ДинамическийСписок.Отбор.Элементы;

		Для Каждого ЭлементОтбора Из ОтборЭлементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
			Тогда
				ЭО = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	     
		Если ЭО = Неопределено Тогда
			ЭО = ОтборЭлементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ);
		КонецЕсли;
	КонецЕсли;
     
	Если ТипЗнч(ВидСравненияОтбора) = Тип("ВидСравненияКомпоновкиДанных") Тогда
		ЭО.ВидСравнения = ВидСравненияОтбора;
	Иначе
		Если ТипЗнч(ПЗ) = Тип("СписокЗначений") Тогда
			ЭО.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ЭО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	КонецЕсли;
	
	ЭО.ПравоеЗначение = ПЗ;
	ЭО.Использование = Истина;

КонецПроцедуры

Процедура СнятьОтборСписка(ЛЗ, ДинамическийСписок) Экспорт

	// Если этот же отбор есть в настройках компоновски списка, то надо этот отбор убрать
	Попытка
		ОтборКомпоновскиСписка  = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ЭлементОтбора Из ОтборКомпоновскиСписка Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
			Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	Исключение КонецПопытки;		
	
	// Если этот же отбор есть в пользовательских настройках списка, то надо этот отбор убрать
	Попытка
		ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого ЭлементНастройки Из ПользовательскиеНастройки Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
				ГруппаОтбор = ЭлементНастройки;
				Для Каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
						И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
					Тогда
						ЭлементОтбора.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;	
	
	Для Каждого ЭлементОтбора Из ДинамическийСписок.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
		Тогда
			ЭО = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭО <> Неопределено Тогда
		ЭО.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДинамическийСписокПринудительно(ДинамическийСписок) Экспорт
	
	ЭлементыПорядка = ДинамическийСписок.Порядок.Элементы;
	ЭлементПорядка = ЭлементыПорядка.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ЭлементыПорядка.Удалить(ЭлементПорядка);
	
КонецПроцедуры

Процедура ДокументПриИзмененииДаты(ЭтаФорма, СтараяДата) Экспорт
	
	Если РаботаСФормамиСервер.ТребуетсяОбновитьНомерДокумента(ЭтаФорма.Объект.Дата, СтараяДата, ТипЗнч(ЭтаФорма.Объект.Ссылка)) Тогда
		ЭтаФорма.Объект.Номер = "";
	КонецЕсли;
	
	СтараяДата = ЭтаФорма.Объект.Дата;
	
КонецПроцедуры

// Отработка изменения филиала документа в части автоизменения прейскуранта подбора. 
// Только для документов, не имеющих собственного реквизита Прейскурант, 
// т.к. таким предполагается собственная обработка в форме.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма документа, в которой интерактивно изменили филиал.
//
Процедура ПриИзмененииФилиалаДокументСПодборомНоменклатуры(ЭтаФорма) Экспорт
	
	// Отсекаем документы с собственным реквизитом прейскуранта.
	Попытка
		ОбъектФормы = ЭтаФорма.Объект;
		Если ОбъектФормы.Свойство("Прейскурант")
			Или Не ОбъектФормы.Свойство("Филиал")
		Тогда
			Возврат;
		КонецЕсли;
	Исключение
		// Объект формы должен быть для обработки.
		Возврат;
	КонецПопытки;
	
	// Отсекаем документы без показа цены в подборе.
	Попытка
		ТекущийПрейскурант = ЭтаФорма.РеквизитПрейскурант;
	Исключение
		Возврат;
	КонецПопытки;
	
	ПрейскурантНовогоФилиала = УправлениеНастройками.ПолучитьПрейскурантФилиала(ОбъектФормы.Филиал);
	Если ЗначениеЗаполнено(ПрейскурантНовогоФилиала)
		И ПрейскурантНовогоФилиала <> ТекущийПрейскурант
	Тогда
		ЭтаФорма.РеквизитПрейскурант = ПрейскурантНовогоФилиала;
		РаботаСФормамиКлиент.УстановитьПараметрПрейскурантПодбора(ЭтаФорма, ПрейскурантНовогоФилиала);
	КонецЕсли;
	
КонецПроцедуры

// Открывает стандартную форму ВводЗначенийСпискомСФлажками с выбором и заданного списка значений.
//
// Параметры:
//  Список			 - СписокЗначений - список вариантов выбора.
//  Оповещение		 - ОписаниеОповещение - обработчик выбора.
//  ВладелецФормы	 - ФормаКлиентскогоПриложения - форма или элемент формы - владельцы открываемой формы выбора.
//
Процедура ВводЗначенийСпискомСФлажкамиИзСпискаЗначений(Список, Оповещение = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	ПараметрыВыбора = Новый Структура;
	МассивТипов = Новый Массив;
	Отмеченные = Новый СписокЗначений;
	
	Для Каждого Элемент Из Список Цикл 
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если МассивТипов.Найти(ТипЭлемента) = Неопределено Тогда  
			МассивТипов.Добавить(ТипЭлемента);	
		КонецЕсли;
		
		Если Элемент.Пометка Тогда 
			Отмеченные.Добавить(Элемент.Значение);	
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	ПараметрыВыбора.Вставить("ОписаниеТипов", ОписаниеТипов);
	ПараметрыВыбора.Вставить("ЗначенияДляВыбора", Список);
	ПараметрыВыбора.Вставить("Отмеченные", Отмеченные);
	ПараметрыВыбора.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыВыбора.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
	ПараметрыВыбора.Вставить("КлючУникальности", Строка(Список.Количество())); // КлючСохраненияПоложенияОкна. 
		
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыВыбора, ВладелецФормы,Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Группу кнопок, работающую как переключатель, в котором только одна кнопка имеет пометку,
// обрабатывает, ставя пометку на нажатуй кнопку, а у остальных снимая пометку.
//
// Параметры:
//  ГруппаКнопок	 - ГруппаФормы - группа кнопок-переключателей. В группе должны быть только кнопки без подгрупп.
//  НажатаяКнопка	 - КнопкаФормы - кнопка, которой надо установить пометку.
//
Процедура УстановитьПометкуКнопкиГруппы(ГруппаКнопок, НажатаяКнопка = Неопределено, РазрешитьОтжатие = Ложь) Экспорт
	
	Для Каждого КнопкаГруппы Из ГруппаКнопок.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(КнопкаГруппы) = Тип("КнопкаФормы") Тогда
			КнопкаГруппы.Пометка = (КнопкаГруппы = НажатаяКнопка И Не (РазрешитьОтжатие И КнопкаГруппы.Пометка));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Показывает предупреждение, что форма не предназначены для самостоятельного открытия.
// Если передана исходная форма, то закрывает её после предупреждения.
Процедура ПоказатьПредупреждениеФормаНеПредназначеныДляСамостоятельногоОткрытия(ЗакрываемаяФорма = Неопределено) Экспорт
	
	Если ЗакрываемаяФорма = Неопределено Тогда
		Оповещение = Неопределено;
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПоказатьПредупреждениеФормаНеПредназначеныДляСамостоятельногоОткрытия_Завершение", ЭтотОбъект, ЗакрываемаяФорма);
	КонецЕсли;
	
	ПоказатьПредупреждение(Оповещение, РаботаСФормамиКлиентСервер.ТекстСообщенияФормаНеПредназначеныДляСамостоятельногоОткрытия());
	
КонецПроцедуры

#Область РаботаСКлиентами

// Обработчик события АвтоПодбор в поле ввода клиента.
//
// Параметры:
//  Текст - Строка - строка поиска.
//  СтандартнаяОбработка - Булево - признакт стандартной обработки события поля формы.
//  ДанныеВыбора - СписокЗначений - данные выбора обработчика.
//  ИспользоватьАвтоПодборКлиентовПоКоду - Булево - следует ли искать клиентов под коду справочника.
//
Процедура ПолеВводаКлиентаАвтоПодбор(Текст, СтандартнаяОбработка, ДанныеВыбора, Знач ИспользоватьАвтоПодборКлиентовПоКоду = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ПараметрыСтрокиПоиска = РаботаСФормамиСервер.ПараметрыСтрокиПоискаКлиента(Текст);
		ИспользоватьАвтоПодборКлиентовПоКоду = ?(ТипЗнч(ИспользоватьАвтоПодборКлиентовПоКоду) = Тип("Булево"), ИспользоватьАвтоПодборКлиентовПоКоду, Ложь);
		
		Если ПараметрыСтрокиПоиска.ЕстьЦифры
			Или ПараметрыСтрокиПоиска.ИспользоватьАвтоПодборКлиентовПоИмениИФамилии
			Или ИспользоватьАвтоПодборКлиентовПоКоду
		Тогда
			СтандартнаяОбработка = Ложь;
			мсНайденныеКлиенты = РаботаСФормамиСервер.ПолучитьМассивКлиентовПоАвтоподбору(Текст, ИспользоватьАвтоПодборКлиентовПоКоду, ПараметрыСтрокиПоиска);
			Если мсНайденныеКлиенты.Количество() >= 1 Тогда
				ДанныеВыбора = мсНайденныеКлиенты;
			ИначеЕсли ДанныеВыбора <> Неопределено Тогда 
				ДанныеВыбора.Очистить();
			ИначеЕсли ДанныеВыбора = Неопределено Тогда 
				СтандартнаяОбработка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открывает и формирует отчет с отбором по клиенту и вариантом "ПоКлиенту".
//
// Параметры:
//  ИмяОтчета - Строка
//  Клиент - СправочникСсылка.Клиенты - клиент
//  Период - СтандартныйПериод - период отчета
//  ДополнительныйОтбор - Структура - отбор.
//
Процедура ОткрытьОтчетКлиента(ИмяОтчета, Клиент, Период = Неопределено, ДополнительныйОтбор = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура("КлючНазначенияИспользования", "ОткрытьОтчетКлиента");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", Клиент));
	
	ФормаОтчета = ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма", ПараметрыФормы);
	Если ФормаОтчета.Открыта() Тогда
		ФормаОтчета.Закрыть();
		ФормаОтчета = ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма", ПараметрыФормы);
	КонецЕсли;
	
	ФормаОтчета.УстановитьТекущийВариант("ПоКлиенту");
	
	Для Каждого ЭлементНастроек Из ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ТипЗнч(ЭлементНастроек.ПравоеЗначение) = Тип("СправочникСсылка.Клиенты") 
			И Не ЗначениеЗаполнено(ЭлементНастроек.ПравоеЗначение) 
		Тогда
			Для Каждого ЭлементПользовательскихНастроек Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементПользовательскихНастроек.ИдентификаторПользовательскойНастройки = ЭлементНастроек.ИдентификаторПользовательскойНастройки Тогда
					ЭлементПользовательскихНастроек.ПравоеЗначение	= Клиент;
					ЭлементПользовательскихНастроек.Использование	= Истина;
					ЭлементНастроек.Использование = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;  
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Отбор = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ДанныеОтбора Из ДополнительныйОтбор Цикл
			ЭлементОтбора = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДанныеОтбора.Путь);
			ЭлементОтбора.ПравоеЗначение = ДанныеОтбора.Значение;
		КонецЦикла;
	КонецЕсли;		
		
	Для Каждого ЭлементНастроек Из ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если Строка(ЭлементНастроек.Параметр) = "Клиент" Тогда
				ЭлементПользовательскихНастроекНайден = Ложь;
				Для Каждого ЭлементПользовательскихНастроек Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
					Если ЭлементПользовательскихНастроек.ИдентификаторПользовательскойНастройки = ЭлементНастроек.ИдентификаторПользовательскойНастройки Тогда
						ЭлементПользовательскихНастроек.Значение = Клиент;
						ЭлементПользовательскихНастроек.Использование = Истина;
						ЭлементНастроек.Использование = Истина;
						ЭлементПользовательскихНастроекНайден = Истина;
					КонецЕсли;
				КонецЦикла;
				Если Не ЭлементПользовательскихНастроекНайден Тогда
					ЭлементНастроек.Значение = Клиент;
					ЭлементНастроек.Использование = Истина;
				КонецЕсли;
			ИначеЕсли Строка(ЭлементНастроек.Параметр) = "Период" Тогда
				НастройкаНайдена = Ложь;
				Для Каждого ЭлементПользовательскихНастроек Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
					Если ЭлементПользовательскихНастроек.ИдентификаторПользовательскойНастройки = ЭлементНастроек.ИдентификаторПользовательскойНастройки Тогда
						ЭлементПользовательскихНастроек.Значение = ?(Период <> Неопределено, Период, Новый СтандартныйПериод);
						ЭлементПользовательскихНастроек.Использование = Истина;
						ЭлементНастроек.Использование = Истина;
						НастройкаНайдена = Истина;
					КонецЕсли;
				КонецЦикла;
				Если Не НастройкаНайдена И ЗначениеЗаполнено(Период) Тогда
					ЭлементНастроек.Значение = ?(Период <> Неопределено, Период, Новый СтандартныйПериод);
				КонецЕсли;
			ИначеЕсли Строка(ЭлементНастроек.Параметр) = "НачалоПериода" Или Строка(ЭлементНастроек.Параметр) = "КонецПериода" Тогда
				Для Каждого ЭлементПользовательскихНастроек Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
					Если ЭлементПользовательскихНастроек.ИдентификаторПользовательскойНастройки = ЭлементНастроек.ИдентификаторПользовательскойНастройки Тогда
						ЭлементПользовательскихНастроек.Использование = Ложь;
						ЭлементНастроек.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НастройкаВыводитьПараметры = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьПараметрыДанных");
	НастройкаВыводитьПараметры.Использование = Истина;
	НастройкаВыводитьПараметры.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Ложь;
	
	ФормаОтчета.СкомпоноватьРезультат();
	ФормаОтчета.Открыть();
	ФормаОтчета.ПользовательскиеНастройкиМодифицированы = Ложь;
	ФормаОтчета.ВариантМодифицирован = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОказаниеУслуг

Процедура ОказаниеУслугРаботыПередУдалением(ЭтаФорма, Элемент) Экспорт
	РаботаСФормамиКлиентПереопределяемый.ОказаниеУслугРаботыПередУдалением(ЭтаФорма, Элемент);
КонецПроцедуры

Процедура ОказаниеУслугРаботыРаботаПриИзмененииТекСтрока(ЭтаФорма, ТекущаяСтрока) Экспорт
	РаботаСФормамиКлиентПереопределяемый.ОказаниеУслугРаботыРаботаПриИзмененииТекСтрока(ЭтаФорма, ТекущаяСтрока);
КонецПроцедуры

Процедура ОказаниеУслугКлиентПриИзменении(ЭтаФорма) Экспорт
	РаботаСФормамиКлиентПереопределяемый.ОказаниеУслугКлиентПриИзменении(ЭтаФорма);
КонецПроцедуры

Процедура ОказаниеУслугОбновитьЦеныДиалог(ЭтаФорма) Экспорт
	РаботаСФормамиКлиентПереопределяемый.ОказаниеУслугОбновитьЦеныДиалог(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ПоказатьПредупреждениеФормаНеПредназначеныДляСамостоятельногоОткрытия().
Процедура ПоказатьПредупреждениеФормаНеПредназначеныДляСамостоятельногоОткрытия_Завершение(ЗакрываемаяФорма) Экспорт
	
	Если ТипЗнч(ЗакрываемаяФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ЗакрываемаяФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
