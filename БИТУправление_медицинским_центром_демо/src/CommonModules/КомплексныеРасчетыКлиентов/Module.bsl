#Область ПрограммныйИнтерфейс

// Оценивает возможность списания позиций комплексного расчета по его остаткам.
//
// Параметры:
//  Объект						 - ДокументСсылка.Прием, ДокументСсылка.ОказаниеУслуг - документ объект
//  МоментВремени				 - МоментВремени - момент времени объекта 
//  КомплексныйРасчет			 - ОпределяемыйТип.КомплексныйРасчетКлиента - комплексный расчет
//  ПолучитьТолькоНедостающие	 - Булево - получить только недостающие
//  ПозицииДокумента			 - ТаблицаЗначений - позиции документа
//  Отказ						 - Булево - отказ
//  ЭтоСписание					 - Булево - это списание
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица недостающих.
//
Функция ПроверитьВозможностьСписанияПозицийКомплексногоРасчета(Объект, МоментВремени, КомплексныйРасчет, ПолучитьТолькоНедостающие = Истина, ПозицииДокумента = Неопределено, Отказ = Ложь, ЭтоСписание = Истина) Экспорт
	
	Если ПозицииДокумента = Неопределено Тогда
		ПозицииДокумента = ПолучитьПозицииДокументаИзКомплексногоРасчета(Объект);
	КонецЕсли;

	ТаблицаНедостающих = ПозицииДокумента.СкопироватьКолонки();
	ТаблицаНедостающих.Колонки.Добавить("ЕстьВРасчете",	Новый ОписаниеТипов("Булево"));
	ТаблицаНедостающих.Колонки.Добавить("Нехватка",		Новый ОписаниеТипов("Число"));
	ТаблицаНедостающих.Колонки.Добавить("КлючСтроки",	Новый ОписаниеТипов("СправочникСсылка.КлючиСтрокКомплексныхРасчетов"));
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПозицииДокумента", ПозицииДокумента);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
	Запрос.УстановитьПараметр("ЭтоСписание", ЭтоСписание);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры,
	|	Таб.ЕдиницаИзмерения,
	|	Таб.Цена,
	|	Таб.Количество
	|ПОМЕСТИТЬ ПозицииДокумента
	|ИЗ
	|	&ПозицииДокумента КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПозицииДокумента.Номенклатура,
	|	ПозицииДокумента.ХарактеристикаНоменклатуры,
	|	ПозицииДокумента.ЕдиницаИзмерения,
	|	ПозицииДокумента.Цена,
	|	ПозицииДокумента.Количество,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА &ЭтоСписание = ИСТИНА И ПозицииДокумента.Количество > ЕСТЬNULL(Остатки.КоличествоОстаток, 0)
	|
	|			ТОГДА ПозицииДокумента.Количество - ЕСТЬNULL(Остатки.КоличествоОстаток, 0)
	|
	|		КОГДА &ЭтоСписание = ЛОЖЬ И (ЕСТЬNULL(Остатки.КоличествоОстаток, 0) + ПозицииДокумента.Количество) > ЕСТЬNULL(Обороты.КоличествоПриход, 0)
	|
	|			ТОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) + ПозицииДокумента.Количество - ЕСТЬNULL(Обороты.КоличествоПриход, 0)
	|
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК Нехватка,
	|	ВЫБОР
	|		КОГДА Обороты.КоличествоПриход > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьВРасчете,
	|	Обороты.КлючСтроки
	|ИЗ
	|	ПозицииДокумента КАК ПозицииДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НоменклатураКомплексныхРасчетовКлиентов.Остатки(
	|				&МоментВремени,
	|				КомплексныйРасчет = &КомплексныйРасчет
	|					И (КлючСтроки.Номенклатура, КлючСтроки.ХарактеристикаНоменклатуры, КлючСтроки.ЕдиницаИзмерения, КлючСтроки.Цена) В
	|						(ВЫБРАТЬ
	|							ПозицииДокумента.Номенклатура,
	|							ПозицииДокумента.ХарактеристикаНоменклатуры,
	|							ПозицииДокумента.ЕдиницаИзмерения,
	|							ПозицииДокумента.Цена
	|						ИЗ
	|							ПозицииДокумента)) КАК Остатки
	|		ПО ПозицииДокумента.Номенклатура = Остатки.КлючСтроки.Номенклатура
	|			И ПозицииДокумента.ХарактеристикаНоменклатуры = Остатки.КлючСтроки.ХарактеристикаНоменклатуры
	|			И ПозицииДокумента.ЕдиницаИзмерения = Остатки.КлючСтроки.ЕдиницаИзмерения
	|			И ПозицииДокумента.Цена = Остатки.КлючСтроки.Цена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НоменклатураКомплексныхРасчетовКлиентов.Обороты(
	|				,
	|				,
	|				,
	|				КомплексныйРасчет = &КомплексныйРасчет
	|					И (КлючСтроки.Номенклатура, КлючСтроки.ХарактеристикаНоменклатуры, КлючСтроки.ЕдиницаИзмерения, КлючСтроки.Цена) В
	|						(ВЫБРАТЬ
	|							ПозицииДокумента.Номенклатура,
	|							ПозицииДокумента.ХарактеристикаНоменклатуры,
	|							ПозицииДокумента.ЕдиницаИзмерения,
	|							ПозицииДокумента.Цена
	|						ИЗ
	|							ПозицииДокумента)) КАК Обороты
	|		ПО ПозицииДокумента.Номенклатура = Обороты.КлючСтроки.Номенклатура
	|			И ПозицииДокумента.ХарактеристикаНоменклатуры = Обороты.КлючСтроки.ХарактеристикаНоменклатуры
	|			И ПозицииДокумента.ЕдиницаИзмерения = Обороты.КлючСтроки.ЕдиницаИзмерения
	|			И ПозицииДокумента.Цена = Обороты.КлючСтроки.Цена
	|";
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Если Не ПолучитьТолькоНедостающие
			Или Выб.Нехватка = 0
		Тогда
			СтрокаНедостающее = ТаблицаНедостающих.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНедостающее, Выб);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = ТаблицаНедостающих.Итог("Нехватка") > 0;
	
	Возврат ТаблицаНедостающих;
	
КонецФункции
			 
// Позиции документа из его комплексного расчета
//
// Параметры:
//  Объект	 - ДокументСсылка.Прием, ДокументСсылка.ОказаниеУслуг - документ объект.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - позиции документа
//
Функция ПолучитьПозицииДокументаИзКомплексногоРасчета(Объект)
	
	Перем Результат;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		
		Результат = Объект.Товары.ВыгрузитьКолонки("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена, Количество");
		
		мсТЧ = Новый Структура("Работы, Товары");
		
		Для Каждого кзТЧ Из мсТЧ Цикл
			Для Каждого СтрокаТЧ Из Объект[кзТЧ.Ключ] Цикл
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует сообщение ошибки нехватки остатка по комплексному расчету при списании.
//
// Параметры:
//  ТаблицаНехватки	 - ТаблицаЗначений - Таблица с недостающими строками документа списания. 
//	ЭтоСписание - Булево - является ли списанием.
// 
// Возвращаемое значение:
//   Строка.
//
Функция СформироватьСообщениеОшибкиОстаткаПоКомплексномуРасчету(ТаблицаНехватки, ЭтоСписание = Истина) Экспорт
	
	ТекстСообщения = "";
	
	СтрокиНетВДоговоре = Новый Массив;
	СтрокиНеХватаетОстатка = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНехватки Цикл
		Если СтрокаТаблицы.Нехватка <> 0 Тогда
			Если СтрокаТаблицы.ЕстьВРасчете Тогда
				СтрокиНеХватаетОстатка.Добавить(СтрокаТаблицы);
			Иначе
				СтрокиНетВДоговоре.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиНетВДоговоре.Количество() <> 0 Тогда
		ТекстСообщения = ТекстСообщения + Символы.Таб + "В документе расчета клиента нет позиций, указанных в документе:";
		
		Для Каждого СтрокаТаблицы Из СтрокиНетВДоговоре Цикл
			ТекстСообщения	= ТекстСообщения + Символы.ПС + КомплексныеРасчетыКлиентовКлиентСервер.СформироватьПредставлениеСтрокиКомплексногоРасчета(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	// Построчно информация о нехватке
	Если СтрокиНеХватаетОстатка.Количество() <> 0 Тогда
		
		ТекстНачало = ?(ЭтоСписание,
						НСтр("ru='Не хватает остатка по документу расчета клиента в количестве:'"),
						НСтр("ru='Возвращаемое количество превысит количество в расчете:'"));
						
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстСообщения, Символы.Таб + ТекстНачало, Символы.ПС);
		
		Для Каждого СтрокаТаблицы Из СтрокиНеХватаетОстатка Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + КомплексныеРасчетыКлиентовКлиентСервер.СформироватьПредставлениеСтрокиКомплексногоРасчета(СтрокаТаблицы) + " ";
			
			Если ЭтоСписание Тогда
				ТекстСообщения = ТекстСообщения + "не хватает " + СтрокаТаблицы.Нехватка + " из " + СтрокаТаблицы.Количество;
			Иначе
				ТекстСообщения = ТекстСообщения + "превышает на " + СтрокаТаблицы.Нехватка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстСообщения;
		
КонецФункции

// Проверяет правильность заполнения документа реализации расчета
//
// Параметры:
//  ДокументОбъект	 - ДокументСсылка.Прием, ДокументСсылка.ОказаниеУслуг	 - документ объект
//  Отказ			 - Булево - отказ.
//
Процедура ПроверитьЗаполнениеДокументаРеализацииРасчета(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.Сертификаты.Итог("Сумма") <> 0 
		Или ДокументОбъект.ПополнениеСертификатов.Итог("Сумма") <> 0 
	Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для документа по комплексному расчету не допускается продажа или пополнение сертификатов!", Отказ);
	КонецЕсли;
	
	Если ДокументОбъект.Материалы.Итог("Сумма") <> 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для документа по комплексному расчету не допускается продажа расходных материалов, не входящих в стоимость услуг. Добпускается только продажа услуг и товаров.", Отказ);
	КонецЕсли;
	
	Если Не Отказ
		И ДокументОбъект.КомплексныйРасчет.Вид.Тип = Перечисления.ТипыКомплексныхРасчетовКлиентов.ПредварительныйРасчет
	Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не допускается ввод документов продажи для расчетов, имеющих вид с типом ""Предварительный информирующий расчет""", Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПроверитьПревышениеДолгаПередРеализацией(ДокументОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПревышениеДолгаПередРеализацией(Документ, Отказ)
	
	// Проверим, есть ли в документе строки, не допускающие игнорирование долга
	ПозицииДокумента = ПолучитьПозицииДокументаИзКомплексногоРасчета(Документ);
	
	Если Не ЕстьПозицииНеДопускающиеИгнорированиеДолга(Документ.КомплексныйРасчет, ПозицииДокумента) Тогда
		Возврат;
	КонецЕсли;

	// Если есть строки, не допускающие игнорирование долга, проверяем достаточность депозита и оплаты.
	УвеличениеДолгаДокументом	= Документ.СуммаДокумента
								- Документ.Оплата.Итог("Сумма")
								- ?(Документ.СдачуВДепозит, Документ.Сдача, 0);
								
	Если УвеличениеДолгаДокументом > 0 Тогда
		
		Валюта = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
		
		Долг = РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(Документ.Клиент, Документ.МоментВремени(), Документ.КомплексныйРасчет);
		ДопустимыйДолг = Документ.КомплексныйРасчет.ДопустимыйДолг;
		
		Если (Долг + УвеличениеДолгаДокументом) > ДопустимыйДолг Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Превышен допустимый долг клиента:
											  |Допустимый долг: " + ОбщегоНазначенияКлиентСервер.ФорматСумм(ДопустимыйДолг,Валюта,"0") + "
											  |Прирост долга документом: " + ОбщегоНазначенияКлиентСервер.ФорматСумм(УвеличениеДолгаДокументом,Валюта,"0") + "
											  |Накопленный ранее долг: " + ОбщегоНазначенияКлиентСервер.ФорматСумм(Долг,Валюта,"0")
											  , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПозицииНеДопускающиеИгнорированиеДолга(КомплексныйРасчет, ПозицииДокумента)
	
	Если КомплексныйРасчет.ИгнорироватьДолг Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПозицииДокумента", ПозицииДокумента);
	Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры,
	|	Таб.ЕдиницаИзмерения,
	|	Таб.Цена,
	|	Таб.Количество
	|ПОМЕСТИТЬ ПозицииДокумента
	|ИЗ
	|	&ПозицииДокумента КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПозицииДокумента.Номенклатура,
	|	ПозицииДокумента.ХарактеристикаНоменклатуры,
	|	ПозицииДокумента.ЕдиницаИзмерения,
	|	ПозицииДокумента.Цена,
	|	ПозицииДокумента.Количество
	|ИЗ
	|	ПозицииДокумента КАК ПозицииДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НоменклатураКомплексныхРасчетовКлиентов.Обороты(
	|				,
	|				,
	|				,
	|				КомплексныйРасчет = &КомплексныйРасчет
	|					И (КлючСтроки.Номенклатура, КлючСтроки.ХарактеристикаНоменклатуры, КлючСтроки.ЕдиницаИзмерения, КлючСтроки.Цена) В
	|						(ВЫБРАТЬ
	|							ПозицииДокумента.Номенклатура,
	|							ПозицииДокумента.ХарактеристикаНоменклатуры,
	|							ПозицииДокумента.ЕдиницаИзмерения,
	|							ПозицииДокумента.Цена
	|						ИЗ
	|							ПозицииДокумента)
	|					И НЕ КлючСтроки.ИгнорироватьДолг) КАК Обороты
	|		ПО ПозицииДокумента.Номенклатура = Обороты.КлючСтроки.Номенклатура
	|			И ПозицииДокумента.ХарактеристикаНоменклатуры = Обороты.КлючСтроки.ХарактеристикаНоменклатуры
	|			И ПозицииДокумента.ЕдиницаИзмерения = Обороты.КлючСтроки.ЕдиницаИзмерения
	|			И ПозицииДокумента.Цена = Обороты.КлючСтроки.Цена
	|ГДЕ
	|	Обороты.КоличествоПриход > 0";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает Истина, если расчет разрешает скидки.
//
// Параметры:
//  Расчет	 - ДокументСсылка.КомплексныйРасчетКлиента - Расчет клиента.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция РасчетРазрешаетСкидки(Расчет) Экспорт 
	Возврат Расчет.Вид.РазрешитьПрименениеСкидокПриПродаже;
КонецФункции

// Определяет, это расчет с обособленным учетом взаиморасчетов или нет.
//
// Параметры:
//  Расчет	 - ОпределяемыйТип.КомплексныйРасчетКлиента - расчет
// 
// Возвращаемое значение:
//  Булево.
//
Функция РасчетСОбособленнымУчетомВзаиморасчетов(Расчет) Экспорт
	Возврат Расчет.Вид.ОбособленныйУчетВзаиморасчетов;
КонецФункции
 
// Возвращает данные табличной части услуг и товаров заказа в виде массива.
//
// Параметры:
//  КомплексныйРасчет		 - ДокументСсылка.КомплексныйРасчетКлиента	 - комплексный расчет
//  Дата					 - Дата										 - дата
//  ВозвратНаСторонуКлиента	 - Булево									 - является ли возвратом клиенту
// 
// Возвращаемое значение:
//  Массив - табличная часть номенклатуры
//
Функция ПолучитьОстаткиКомплексногоРасчета(КомплексныйРасчет, Дата = '00010101', ВозвратНаСторонуКлиента = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплексныйРасчетКлиентаСостав.КлючСтроки,
	|	КомплексныйРасчетКлиентаСостав.КлючСтроки.Номенклатура КАК Номенклатура,
	|	КомплексныйРасчетКлиентаСостав.КлючСтроки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КомплексныйРасчетКлиентаСостав.КлючСтроки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КомплексныйРасчетКлиентаСостав.КоличествоОстаток КАК Количество,
	|	КомплексныйРасчетКлиентаСостав.КлючСтроки.Цена КАК Цена,
	|	КомплексныйРасчетКлиентаСостав.КоличествоОстаток * КомплексныйРасчетКлиентаСостав.КлючСтроки.Цена КАК Сумма,
	|	ВЫБОР
	|		КОГДА КомплексныйРасчетКлиентаСостав.КлючСтроки.Номенклатура.ВидНоменклатуры = &ВидНоменклатурыУслуга
	|			ТОГДА ""Услуга""
	|		КОГДА КомплексныйРасчетКлиентаСостав.КлючСтроки.Номенклатура.ВидНоменклатуры = &ВидНоменклатурыТовар
	|			ТОГДА ""Товар""
	|		КОГДА КомплексныйРасчетКлиентаСостав.КлючСтроки.Номенклатура.ВидНоменклатуры = &ВидНоменклатурыНабор
	|			ТОГДА ""Набор""
	|		ИНАЧЕ ""Другое""
	|	КОНЕЦ КАК ВидНоменклатурыСтрока
	|ИЗ
	|	РегистрНакопления.НоменклатураКомплексныхРасчетовКлиентов.Остатки(&Дата, КомплексныйРасчет = &КомплексныйРасчет) КАК КомплексныйРасчетКлиентаСостав";
	
	Запрос.УстановитьПараметр("Дата",			 		Дата);
	Запрос.УстановитьПараметр("КомплексныйРасчет", 		КомплексныйРасчет);
	Запрос.УстановитьПараметр("ВидНоменклатурыНабор",	Перечисления.ВидыНоменклатуры.Набор);
	Запрос.УстановитьПараметр("ВидНоменклатурыТовар",	Перечисления.ВидыНоменклатуры.Материал);
	Запрос.УстановитьПараметр("ВидНоменклатурыУслуга",	Перечисления.ВидыНоменклатуры.Услуга);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЧНоменклатуры = РезультатЗапроса.Выгрузить();
	
	Если ВозвратНаСторонуКлиента Тогда
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЧНоменклатуры);
	Иначе
		Возврат ТЧНоменклатуры;
	КонецЕсли;
	
КонецФункции

// Возвращает комплексный расчет документа
//
// Параметры:
//  ДокументОбъектИлиСсылка	 - ДокументОбъект, ДокументСсылка - документ, возможно, имеющий реквизит расчета клиента.
// 
// Возвращаемое значение:
//   - ДокументСсылка.КомплексныйРасчетКлиента, Неопределено.
//
Функция ПолучитьРеквизитКомплексногоРасчетаВДокументе(ДокументОбъектИлиСсылка) Экспорт 
	
	Если ДокументОбъектИлиСсылка = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(ДокументОбъектИлиСсылка.Ссылка); 
	Если ТипСсылки = Тип("ДокументСсылка.КомплексныйРасчетКлиента") Тогда 
		Возврат ДокументОбъектИлиСсылка.Ссылка;
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОказаниеУслуг") Или
			  ТипСсылки = Тип("ДокументСсылка.Прием") 
	Тогда 
		Возврат ДокументОбъектИлиСсылка.КомплексныйРасчет;
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства") Или
			  ТипСсылки = Тип("ДокументСсылка.ВыполнениеЗаказа") Или
			  ТипСсылки = Тип("ДокументСсылка.ПередачаЗаказаВМастерскую") Или
			  ТипСсылки = Тип("ДокументСсылка.ПриемЗаказаИзМастерской") 
	Тогда 
		Возврат ДокументОбъектИлиСсылка.Заказ;
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Рекламация") Тогда 
		Возврат ПолучитьРеквизитКомплексногоРасчетаВДокументе(ДокументОбъектИлиСсылка.ПредметРекламации);
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РаботыПоРекламации") Тогда 
		Возврат ПолучитьРеквизитКомплексногоРасчетаВДокументе(ДокументОбъектИлиСсылка.Рекламация);
	Иначе
		ИмяРеквизита = ОбщегоНазначенияРасширенный.НайтиВМетаданныхИмяРеквизитаПоТипу(
			ДокументОбъектИлиСсылка.Ссылка, Тип("ДокументСсылка.КомплексныйРасчетКлиента"));
		Если ИмяРеквизита <> Неопределено Тогда 
			Возврат ДокументОбъектИлиСсылка[ИмяРеквизита];
		КонецЕсли;
	КонецЕсли;	

	Возврат Неопределено;
	
КонецФункции

// Данные об оплате расчета.
//
// Параметры:
//  КомплексныйРасчет	 - ДокументСсылка.КомплексныйРасчетКлиента - Ссылка на документ расчета
//  ВидРасчета			 - СправочникСсылка.ВидыКомплексныхРасчетовКлиентов - Вид расчета, если не указан - берется из ссылки
//  Клиент				 - СправочникСсылка.Клиенты - Клиент расчета, если не указан - берется из ссылки
//  СуммаДокумента		 - Число - Сумма документа расчета, если не указана - берется из ссылки
//  ПроцентАванса		 - Число - Процент аванса, указанный в расчете, если не указан - берется из ссылки.
// 
// Возвращаемое значение:
//  Структура - Структура с данными по оплате - СуммаОплаты, СуммаАванса, ОплатаАктуальна.
//
Функция ПолучитьДанныеПоОплатеРасчета(КомплексныйРасчет, ВидРасчета = Неопределено, Клиент = Неопределено, Знач СуммаДокумента = Неопределено, Знач ПроцентАванса = Неопределено) Экспорт 

	Если Клиент = Неопределено Тогда 
		Клиент = КомплексныйРасчет.Клиент;
	КонецЕсли;
	
	Если ВидРасчета = Неопределено Тогда 
		ВидРасчета = КомплексныйРасчет.Вид;
	КонецЕсли;
	
	Если СуммаДокумента = Неопределено Тогда 
		СуммаДокумента = КомплексныйРасчет.Состав.Итог("Сумма");
	КонецЕсли;
	
	Если ПроцентАванса = Неопределено Тогда 
		ПроцентАванса = КомплексныйРасчет.ПроцентАванса;
	КонецЕсли;
	
	Результат = Новый Структура("СуммаОплаты, ОплатаАктуальна, АвансАктуален", 0, Ложь, Ложь);
	Результат.Вставить("СуммаДокумента", СуммаДокумента);
	Результат.Вставить("ПроцентАванса", ПроцентАванса);
	Результат.Вставить("СуммаАвансаПолная", Результат.СуммаДокумента * Результат.ПроцентАванса / 100);
	Результат.Вставить("СуммаАванса", Результат.СуммаАвансаПолная);
	
	Если ВидРасчета.ОбособленныйУчетВзаиморасчетов Тогда
	
		Результат.ОплатаАктуальна = Истина;
		Результат.АвансАктуален = (ПроцентАванса <> 0 И ВидРасчета.Тип = Перечисления.ТипыКомплексныхРасчетовКлиентов.ПроизводственныйРасчет);
		
		Если ЗначениеЗаполнено(КомплексныйРасчет) Тогда
				
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВзаиморасчетыСКлиентамиОбороты.СуммаРасход
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКлиентами.Обороты(
			|			,
			|			,
			|			Период,
			|			Клиент = &Клиент
			|				И Сделка = &Сделка) КАК ВзаиморасчетыСКлиентамиОбороты";
			
			Запрос.УстановитьПараметр("Клиент", Клиент);
			Запрос.УстановитьПараметр("Сделка", КомплексныйРасчет);
			
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Результат.СуммаОплаты = ВыборкаДетальныеЗаписи.СуммаРасход;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.СуммаАванса = Результат.СуммаАвансаПолная - Результат.СуммаОплаты;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Можно ли оказывать услуги по расчету.
//
// Параметры:
//  КомплексныйРасчет	 - ДокументСсылка.КомплексныйРасчетКлиента - Ссылка на документ расчета
//  ТекстОшибки			 - Строка - Если расчет нельзя брать в работу, в этом параметре вернется сообщение пользователю
// 
// Возвращаемое значение:
//  Булево - Истина, если комплексный расчет прошел проверки (например, оплачен аванс).
//
Функция РасчетМожноБратьВРаботу(КомплексныйРасчет, ТекстОшибки) Экспорт 
	
	Отказ = Ложь;
	ДанныеПоОплате = ПолучитьДанныеПоОплатеРасчета(КомплексныйРасчет);
	
	Если ДанныеПоОплате.АвансАктуален И ДанныеПоОплате.СуммаАванса > 0 Тогда 
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'По комплексному расчету не оплачен аванс: " + Формат(ДанныеПоОплате.СуммаАванса) + " " + 
			ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты() + "'");
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Получить приемы связанные с расчетом
//
// Параметры:
//  КомплексныйРасчет - ДокументСсылка.КомплексныйРасчетКлиента - Ссылка на документ расчета
// 
// Возвращаемое значение:
//  Массив - Список ссылок на связанные с расчетом приемы. Связь определяется по документу,
//				 на основании которого был создан расчет, по документам приема, в которых явно указан расчет,
//				 а также по всем остальным документам приема, связанными с найденным по первичному приему.
//
Функция ПолучитьПриемыСвязанныеСРасчетом(КомплексныйРасчет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Прием.ПервичныйПрием
	|ПОМЕСТИТЬ ПервичныеПриемыПоРасчету
	|ИЗ
	|	Документ.Прием КАК Прием
	|ГДЕ
	|	Прием.КомплексныйРасчет = &КомплексныйРасчет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Прием.ПервичныйПрием
	|ИЗ
	|	Документ.Прием КАК Прием
	|ГДЕ
	|	Прием.Ссылка = &ОснованиеКомплексногоРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Прием.Ссылка
	|ИЗ
	|	ПервичныеПриемыПоРасчету КАК ПервичныеПриемыПоРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием КАК Прием
	|		ПО ПервичныеПриемыПоРасчету.ПервичныйПрием = Прием.ПервичныйПрием";
	Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
	Запрос.УстановитьПараметр("ОснованиеКомплексногоРасчета", КомплексныйРасчет.ДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает комплексные расчеты документа приема.
//
// Параметры:
//  Прием			 - ДокументСсылка.Прием	 - Прием.
//  ПервичныйПрием	 - ДокументСсылка.Прием	 - Случай обращения пациента.
//  ВернутьПервый	 - Булево - завершить поиск после нахождения первого и вернуть ссылку на расчет, а не массив.
// 
// Возвращаемое значение:
//   Массив, ДокументСсылка.КомплексныйРасчетКлиента, Неопределено.
//
Функция ПолучитьКомплексныеРасчетыПоПриему(Прием, ПервичныйПрием = Неопределено, ВернутьПервый = Истина) Экспорт
	
	Если ПервичныйПрием = Неопределено Тогда 
		ПервичныйПрием = Прием.ПервичныйПрием;
		
	ИначеЕсли Не ЗначениеЗаполнено(ПервичныйПрием) Тогда
		// Возврат пустого значения для определенно пустого первичного приема.
		Если ВернутьПервый Тогда
			Возврат Документы.КомплексныйРасчетКлиента.ПустаяСсылка();
		Иначе
			Возврат Новый Массив; 
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Прием.ПервичныйПрием,
	|	Прием.ЭтоПервичный,
	|	Прием.Ссылка КАК ДокПрием,
	|	Прием.Ссылка = &Прием КАК ЭтоТекущий,
	|	Прием.КомплексныйРасчет
	|ПОМЕСТИТЬ ПриемыПоПервичному
	|ИЗ
	|	Документ.Прием КАК Прием
	|ГДЕ
	|	Прием.ПервичныйПрием = &ПервичныйПрием
	|	И НЕ Прием.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КомплексныйРасчетКлиента.Ссылка, ПриемыПоПервичному.КомплексныйРасчет) КАК КомплексныйРасчет,
	|	ВЫБОР
	|		КОГДА ПриемыПоПервичному.ЭтоТекущий
	|			ТОГДА 0
	|		КОГДА ПриемыПоПервичному.ЭтоПервичный
	|			ТОГДА 1
	|		КОГДА НЕ ПриемыПоПервичному.ЭтоТекущий
	|				И ПриемыПоПервичному.КомплексныйРасчет <> ЗНАЧЕНИЕ(Документ.КомплексныйРасчетКлиента.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ПриемыПоПервичному КАК ПриемыПоПервичному
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомплексныйРасчетКлиента КАК КомплексныйРасчетКлиента
	|		ПО ПриемыПоПервичному.ДокПрием = КомплексныйРасчетКлиента.ДокументОснование
	|ГДЕ
	|	ЕСТЬNULL(КомплексныйРасчетКлиента.Ссылка, ПриемыПоПервичному.КомплексныйРасчет) <> ЗНАЧЕНИЕ(Документ.КомплексныйРасчетКлиента.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.УстановитьПараметр("ПервичныйПрием", ПервичныйПрием);
	Запрос.УстановитьПараметр("Прием", Прием);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если ВернутьПервый Тогда 
		Если Выборка.Следующий() Тогда 
			Возврат Выборка.КомплексныйРасчет;
		Иначе
			Возврат Документы.КомплексныйРасчетКлиента.ПустаяСсылка();
		КонецЕсли;
	Иначе
		СписокРасчетов = Новый Массив;
		Пока Выборка.Следующий() Цикл 
			Если СписокРасчетов.Найти(Выборка.КомплексныйРасчет) = Неопределено Тогда 
				СписокРасчетов.Добавить(Выборка.КомплексныйРасчет);
			КонецЕсли;
		КонецЦикла;
		Возврат СписокРасчетов;
	КонецЕсли;
	
КонецФункции

// Верятная сумма для оплаты расчета - для подстановки в новый интерактивный документ оплаты.
//
// Параметры:
//  ДокументРасчета	 - ДокументСсылка.КомплексныйРасчетКлиента - документ.
// 
// Возвращаемое значение:
//  Число - сумма для оплаты.
//
Функция ВерятнаяСуммаДляОплатыРасчета(ДокументРасчета) Экспорт
	
	Остатки = ПолучитьОстаткиКомплексногоРасчета(ДокументРасчета);
	ОстаткиПоКР = 0;
	Для Каждого Остаток Из Остатки Цикл
		ОстаткиПоКР = ОстаткиПоКР + Остаток.Сумма;			
	КонецЦикла;
	БалансПоКР = -РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(ДокументРасчета.Клиент,,ДокументРасчета,);
	
	Если РасчетСОбособленнымУчетомВзаиморасчетов(ДокументРасчета) Тогда
		ДанныеОплаты = ПолучитьДанныеПоОплатеРасчета(ДокументРасчета,,,,);
		СуммаАванса = ДанныеОплаты.СуммаАванса;
		Если СуммаАванса <> 0 И ОстаткиПоКР = ДокументРасчета.Состав.Итог("Сумма") Тогда
			Возврат СуммаАванса;
		Иначе
			Возврат ОстаткиПоКР - БалансПоКР;
		КонецЕсли;
	Иначе 
		Если БалансПоКР > 0 Тогда
			Возврат ОстаткиПоКР - БалансПоКР;
		Иначе
			Возврат ОстаткиПоКР;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#Область ЭтапыРабот

// Получить таблицу этапов работ с отметками о выполнении
//
// Параметры:
//  КомплексныйРасчет	 - ДокументСсылка.КомплексныйРасчет	 - Ссылка на документ расчета
//  ЭтапыРабот			 - ДанныеФормыКоллекция				 - Таблица, содержащая этапы работ, если не указана - таблица работ будет выбрана из документа расчета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица со списком этапов и заполненными отметками о выполнении (дата выполнения, пользователь)
//
Функция ПолучитьТаблицуЭтаповРаботСОтметкамиОВыполнении(КомплексныйРасчет, ЭтапыРабот = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ЭтапыРабот <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыРабот.ИдентификаторЭтапа,
		|	ЭтапыРабот.Номенклатура,
		|	ЭтапыРабот.ИсполнительПлан
		|ПОМЕСТИТЬ ЭтапыРабот
		|ИЗ
		|	&ЭтапыРабот КАК ЭтапыРабот";
		Запрос.УстановитьПараметр("ЭтапыРабот", ЭтапыРабот.Выгрузить());
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплексныйРасчетКлиентаЭтапыРабот.ИдентификаторЭтапа,
		|	КомплексныйРасчетКлиентаЭтапыРабот.Номенклатура,
		|	КомплексныйРасчетКлиентаЭтапыРабот.ИсполнительПлан
		|ПОМЕСТИТЬ ЭтапыРабот
		|ИЗ
		|	Документ.КомплексныйРасчетКлиента.ЭтапыРабот КАК КомплексныйРасчетКлиентаЭтапыРабот
		|ГДЕ
		|	КомплексныйРасчетКлиентаЭтапыРабот.Ссылка = &КомплексныйРасчет";
		Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеЭтаповКомплексногоРасчета.КомплексныйРасчет,
	|	ВыполнениеЭтаповКомплексногоРасчета.ИдентификаторЭтапа,
	|	ВыполнениеЭтаповКомплексногоРасчета.Выполнен,
	|	ВыполнениеЭтаповКомплексногоРасчета.ДокументРегистратор,
	|	ВыполнениеЭтаповКомплексногоРасчета.Пользователь,
	|	ВыполнениеЭтаповКомплексногоРасчета.ИсполнительФакт
	|ПОМЕСТИТЬ ВыполненныеЭтапыПоРасчету
	|ИЗ
	|	РегистрСведений.ВыполнениеЭтаповКомплексногоРасчета КАК ВыполнениеЭтаповКомплексногоРасчета
	|ГДЕ
	|	ВыполнениеЭтаповКомплексногоРасчета.КомплексныйРасчет = &КомплексныйРасчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыРабот.ИдентификаторЭтапа,
	|	ЭтапыРабот.Номенклатура,
	|	ЭтапыРабот.ИсполнительПлан,
	|	ВыполненныеЭтапыПоРасчету.ИсполнительФакт,
	|	ВыполненныеЭтапыПоРасчету.Пользователь,
	|	ВыполненныеЭтапыПоРасчету.ДокументРегистратор,
	|	ЕСТЬNULL(ВыполненныеЭтапыПоРасчету.Выполнен, ДАТАВРЕМЯ(1, 1, 1)) КАК Выполнен,
	|	ЕСТЬNULL(ВыполненныеЭтапыПоРасчету.Выполнен, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтметкаВыполнения
	|ИЗ
	|	ЭтапыРабот КАК ЭтапыРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполненныеЭтапыПоРасчету КАК ВыполненныеЭтапыПоРасчету
	|		ПО ЭтапыРабот.ИдентификаторЭтапа = ВыполненныеЭтапыПоРасчету.ИдентификаторЭтапа";
	Запрос.УстановитьПараметр("КомплексныйРасчет", КомплексныйРасчет);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// чистить отметки о выполнении этапов документа
//
// Параметры:
//  ДокументВыполнения	 - ДокументСсылка.Прием -документ выполнения этапа расчета.
//
Процедура ОчиститьОтметкиОВыполненииЭтаповДокумента(ДокументВыполнения) Экспорт 
	
	ВыполненныеЭтапыНЗ = РегистрыСведений.ВыполнениеЭтаповКомплексногоРасчета.СоздатьНаборЗаписей();
	ВыполненныеЭтапыНЗ.Отбор.ДокументРегистратор.Установить(ДокументВыполнения);
	ВыполненныеЭтапыНЗ.Записать();
	
КонецПроцедуры

// Отметить выполненные этапы расчета
//
// Параметры:
//  КомплексныйРасчет	 - ДокументСсылка.КомплексныйРасчетКлиента - документ расчета. 
//  ВыполненныеЭтапы	 - Массив	 - этапы.
//  ДокументВыполнения	 - ДокументСсылка.Прием -документ выполнения этапа расчета.
//
Процедура ОтметитьВыполненныеЭтапыРасчета(КомплексныйРасчет, ВыполненныеЭтапы, ДокументВыполнения) Экспорт
	
	ОчиститьОтметкиОВыполненииЭтаповДокумента(ДокументВыполнения);
	
	ВыполненныеЭтапыНЗ = РегистрыСведений.ВыполнениеЭтаповКомплексногоРасчета.СоздатьНаборЗаписей();
	ВыполненныеЭтапыНЗ.Отбор.КомплексныйРасчет.Установить(КомплексныйРасчет);
	ВыполненныеЭтапыНЗ.Отбор.ДокументРегистратор.Установить(ДокументВыполнения);
	ВыполненныеЭтапыНЗ.Прочитать();
		
	Для Каждого СтрокаЭтап Из ВыполненныеЭтапы Цикл
		
		ВыполненныйЭтап = ВыполненныеЭтапыНЗ.Добавить();
		ЗаполнитьЗначенияСвойств(ВыполненныйЭтап, СтрокаЭтап);
		ВыполненныйЭтап.КомплексныйРасчет = КомплексныйРасчет;
		ВыполненныйЭтап.ДокументРегистратор = ДокументВыполнения;
		
	КонецЦикла;
	
	ВыполненныеЭтапыНЗ.Записать();
	
КонецПроцедуры

// Обработчик проведения документа, влияющего на статус заказа на производство.
//
// Параметры:
//  Источник - ОпределяемыйТип.ДокументыСменыСтатусовЗаказовНаПроизводствоОбъект - комплексный расчет клиента.
//  Отказ	 - Булево - отказ записи.
//
Процедура ЗаказыНаПроизводствоУдалениеПроведенияОбработчик(Источник, Отказ) Экспорт
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	УправлениеЗаказами.ОтменаДвиженияПоЗаказамМатериалов(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
