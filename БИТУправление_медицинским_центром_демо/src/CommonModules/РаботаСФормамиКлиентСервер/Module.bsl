#Область ПрограммныйИнтерфейс

// Устанавливает видимость элемента, если он присуствует на форме
//
// Параметры:
//  Элементы	 - ВсеЭлементыФормы	 - Элементы формы
//  ИмяЭлемента	 - Строка - Имя элемента, для которого утсанавливается видимость
//  Видимость	 - Булево - Устанавливаемое значение видимости
//
Процедура УстановитьВидимостьЭлементаФормы(Элементы, ИмяЭлемента, Видимость) Экспорт
	
	УстановитьПолеЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", Видимость);
	
КонецПроцедуры

// Устанавливает свойство ТолькоПросмотр элемента, если он присуствует на форме
//
// Параметры:
//  Элементы	 - ВсеЭлементыФормы	 - Элементы формы
//  ИмяЭлемента	 - Строка - Имя элемента, для которого утсанавливается видимость
//  Доступность	 - Булево - Устанавливаемое значение доступности
//
Процедура УстановитьДоступностьЭлементаФормы(Элементы, ИмяЭлемента, Доступность) Экспорт
	
	УстановитьПолеЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", Не Доступность);
	
КонецПроцедуры

// Устанавливает атрибут элемента, если он присуствует на форме
//
// Параметры:
//  Элементы	 - ВсеЭлементыФормы	 - Элементы формы
//  ИмяЭлемента	 - Строка - Имя элемента формы
//  ИмяПоля		 - Строка - Имя атрибута элемента формы
//  Значение	 - Произвольный - Устанавливаемое значение.
//
Процедура УстановитьПолеЭлементаФормы(Элементы, ИмяЭлемента, ИмяПоля, Значение) Экспорт
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы[ИмяПоля] = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Формирует строку описания долга клиента по переданной сумме взаиморасчетов,
// а также офорвляет элементы формы, отображающие долг, если они переданы.
//
// Параметры:
//  Параметр					 - <Число>, <СправочникСсылка.Клиенты>	 - Сумма остатка расчетов или клиент.
//  Дата						 - Дата	 - Дата остатка расчетов.
//  Форма						 - ФормаКлиентскогоПриложения - форма, в которой располагается надпись состояния расчетов.
//  ИмяРеквизитаДолг			 - Строка - Имя числового реквизита формы, отвечающего за сумму долга.
//  ИмяНадписиДолг				 - Строка - Имя элемента формы - надписи с долгом
//  ИмяКнопкиОткрыть			 - Строка  - Имя элемента формы - кнопки для открытия детализации долга.
//  ИмяЭлементаПодсказкиДолга	 - Строка  - Имя элемента формы, отвечающего за подсказку пользователю пояснения по состоянию расчетов.
// 
// Возвращаемое значение:
//	Структура - имеющая ключ "Представление", "Цвет".
//
Функция ПолучитьОписаниеВзаиморасчетов(Параметр, Дата = Неопределено, Форма = Неопределено,
									   ИмяРеквизитаДолг = "Долг", ИмяНадписиДолг = "Долг",
									   ИмяКнопкиОткрыть = "ОткрытьВзаиморасчетыСКлиентом", ИмяЭлементаПодсказкиДолга = "ПодсказкаСуммаДолга") Экспорт
									   
	Перем ОстатокВзаиморасчетов;
	
	Результат = Новый Структура("Представление, Цвет, ЦветКнопкиОткрытия, ПодсказкаКомандыОткрытия", "",Новый Цвет,Новый Цвет,"");
	
	ИспользуютсяРасчетыВРазрезеСделок = ДопСерверныеФункцииПовтИсп.ЕстьОбъектМетаданных("Документ.КомплексныйРасчетКлиента");
	
	Если ТипЗнч(Параметр) = Тип("Число") Тогда
		ОстатокВзаиморасчетов = Параметр;
	ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.Клиенты")
		И ЗначениеЗаполнено(Параметр)
	Тогда
		ОстатокВзаиморасчетов = РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(Параметр, Дата);
	КонецЕсли;
	
	Если ОстатокВзаиморасчетов <> Неопределено Тогда
		#Если Клиент Тогда
		ВалютаСтрока = глКраткоеНаименованиеОсновнойВалюты;
		#Иначе
		ВалютаСтрока = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
		#КонецЕсли

		Если ОстатокВзаиморасчетов > 0 Тогда
			Результат.Цвет = ДопСерверныеФункцииПовтИсп.ЦветСтиля("ЦветОтрицательногоЧисла");
			Результат.Представление = "Долг: " + Строка(ОстатокВзаиморасчетов) + " " + ВалютаСтрока;
		Иначе
			Результат.Цвет = ДопСерверныеФункцииПовтИсп.ЦветСтиля("ПоясняющийТекст");
			
			Если ОстатокВзаиморасчетов < 0 Тогда
				Результат.Представление = "На счете: " + Строка(-ОстатокВзаиморасчетов) + " " + ВалютаСтрока;
			Иначе
				Результат.Представление = "Задолженности нет";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуютсяРасчетыВРазрезеСделок
		И ТипЗнч(Параметр) = Тип("СправочникСсылка.Клиенты")
	Тогда
		СведенияРасчетовПоСделкам = РаботаСКлиентамиПереопределяемый.ПолучитьНаличиеДолговДепозитовПоСделкамКлиента(Параметр, Дата);
		Результат.ПодсказкаКомандыОткрытия = СведенияРасчетовПоСделкам.ОписаниеРасчетов;
		
		Если СведенияРасчетовПоСделкам.ЕстьДолги Тогда
			Результат.ЦветКнопкиОткрытия = ДопСерверныеФункцииПовтИсп.ЦветСтиля("ЦветОтрицательногоЧисла");
		Иначе
			Результат.ЦветКнопкиОткрытия = Новый Цвет;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		Форма[ИмяРеквизитаДолг] = Результат.Представление;
		Форма.Элементы[ИмяНадписиДолг].ЦветТекста = Результат.Цвет;
		Форма.Элементы[ИмяКнопкиОткрыть].ЦветРамки = Результат.ЦветКнопкиОткрытия;
		Форма.Элементы[ИмяЭлементаПодсказкиДолга].Подсказка = Результат.ПодсказкаКомандыОткрытия;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Текст сообщения, что форма не предназначены для самостоятельного открытия
// 
// Возвращаемое значение:
//  Строка - текст сообщения.
//
Функция ТекстСообщенияФормаНеПредназначеныДляСамостоятельногоОткрытия() Экспорт
	
	Возврат НСтр("ru='Форма не предназначена для самостоятельного открытия!'");
	
КонецФункции

#Область ПодборНоменклатуры

// Для платформ 8.3.23 и выше возвращает Истина из-за влияния на командную панель формы документа
// изменений элемента табличной части .ИзменятьСоставСтрок = ...
// 
// Возвращаемое значение:
//  Булево.
//
Функция ИзменениеСоставаКомандТабличныхЧастейТолькоНаСервере() Экспорт 
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнфо.ВерсияПриложения;
	
	Возврат ВерсияПриложения > "8.3.23";
	
КонецФункции

#КонецОбласти

#КонецОбласти
