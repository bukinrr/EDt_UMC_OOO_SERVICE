#Область ПрограммныйИнтерфейс

// Функция возвращает сведения об организации.
//
// Параметры:
//   Организация       - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   ДатаЗначения      - Дата - дата, на которую нужно получить сведения.
//   СписокПоказателей - СписокЗначений - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//   Структура - структура с ключами из списка показателей и возвращаемыми значениями.
//
Функция ПолучитьСведенияОбОрганизации(Знач Филиал, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;
	
	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	ОтветственныеЛица = Новый Структура;	
	РеквизитыОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Филиал, ДатаЗначения);
	
	Для Каждого Показатель Из СписокПоказателей Цикл

		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "ИННЮЛ" Тогда
			
			Значение = РеквизитыОрганизации.ИНН;
			
		ИначеЕсли ИмяПоказателя = "КППЮЛ" Тогда
			
			Значение = РеквизитыОрганизации.КПП;
			
		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			Значение = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Филиал.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
			
		ИначеЕсли ИмяПоказателя = "ТелОрганизации" Тогда
			
			Значение = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Филиал.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			
		ИначеЕсли ИмяПоказателя = "ФИОРук" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ФИОБух" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "НаимЮЛПол" Тогда
			
			Значение = РеквизитыОрганизации.НазваниеОрганизации;
			
		КонецЕсли;	
	
		ОргСведения.Вставить(ИмяПоказателя, Значение);
		
	КонецЦикла;
	
	Возврат ОргСведения;
	
КонецФункции

#Область Автозаполнение // Процедуры и функции механизма автоматического заполнения.

// Функция возвращает структуру показателей.
// Ключ структуры - идентификатор показателя.
// Значение структуры – массив из трех элементов:
// 	- признак автозаполнения показателя;
//  - признак расшифровки показателя;
//  - признак запрета редактирования показателя.
//
// Параметры:
// 	 ИДОтчета         - Строка - идентификатор отчета.
//	 ИДРедакцииОтчета - Строка - идентификатор редакции формы отчета.
//   ПараметрыОтчета  - Структура - структура параметров отчета.
//
// Возвращаемое значение:
//   Структура - показатели отчета.
//
Функция ПолучитьСведенияОПоказателяхОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Параметры:
//   ИДОтчета - Строка - имя регл. отчета.
//   ИДРедакцииОтчета - Строка - имя формы регл. отчета.
//   ПараметрыОтчета - Структура - параметры регл. отчета.
//   Контейнер - Структура - данные регл. отчета.
//
Процедура ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Попытка
		Отчеты[ИДОтчета].ЗаполнитьОтчет(ПараметрыОтчета, Контейнер);
	Исключение КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Возвращает условный идентификатор конфигурации.
//
// Возвращаемое значение:
//   Строка - идентификатор конфигурации.
//
Функция ИДКонфигурации() Экспорт
	
	Возврат "BITMEDIC";
	
КонецФункции

#Область НоваяФормаМедицинскойОтчетности

// Процедура переопределяет параметры отчета
//
// Параметры:
//  Отчет                      - Структура("Наименование,ПолноеИмя,Ссылка").
//  ОрганизацияОтчета          - Ссылка или Неопределено, организация отчета.
//  ДатаНачалаПериодаОтчета    - Дата или Неопределено, дата начала периода отчета.
//  ДатаОкончанияПериодаОтчета - Дата или Неопределено, дата окончания периода отчета.
//  ПараметрыОткрытия          - Структура, переопределяемые параметры открытия формы отчета.
//
Процедура ПереопределитьПараметрыОтчета(Отчет, ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПараметрыОткрытия) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Дополняет функционал обработчика "ПриСозданииНаСервере" общей формы "Медицинская отчетность",
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, общая форма "Медицинская отчетность".
//
// Пример:
//  ГруппаКоманды = Форма.Элементы["ОтчетыГруппа3"];
//  
//  ИмяКоманды = "ОтчетыПоказатьДополнительнуюИнформацию";
//  Команда = Форма.Команды.Добавить(ИмяКоманды);
//  Команда.Подсказка = НСтр("ru = 'Показать дополнительную информацию'");
//  Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
//  Команда.Картинка = БиблиотекаКартинок.Лупа;
//  Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
//  
//  Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКоманды);
//  Кнопка.Заголовок = НСтр("ru = 'Инфо'");
//  Команда.ИзменяетСохраняемыеДанные = Ложь;
//  Кнопка.ИмяКоманды = ИмяКоманды;
//
Процедура ФормаМедицинскойОтчетности_ПриСозданииНаСервере(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Дополняет функционал обработчика "ПриСозданииНаСервере" формы списка справочника "Медицинские отчеты",
// здесь можно инициализировать переменные, расширять возможности интерфейса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка справочника "Медицинские отчеты".
//
// Пример реализации:
//
//  ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  
//  Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
//  	Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") Тогда
//  		
//  		Форма.Ограничения.Добавить(ЭлементСписка.Представление);
//  		
//  	КонецЕсли;
//  КонецЦикла;
//
Процедура СправочникМедицинскиеОтчеты_ПриСозданииНаСервере(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти
