///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует и выводит на экран печатные формы.
// 
// Параметры:
//  ИмяМенеджераПечати - Строка - менеджер печати для печатаемых объектов;
//  ИменаМакетов       - Строка - идентификаторы печатных форм;
//  МассивОбъектов     - Ссылка, Массив - объекты печати;
//  ВладелецФормы      - УправляемаяФорма - форма, из которой выполняется печать;
//  ПараметрыПечати    - Структура - произвольные параметры для передачи в менеджер печати.
//
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, ПараметрыПечати = Неопределено) Экспорт
	
	Если НЕ ПроверитьКоличествоПереданныхОбъектов(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати, ИсточникДанных");
	ПараметрыОткрытия.ИмяМенеджераПечати = ИмяМенеджераПечати;
	//+БИТ
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ПараметрыОткрытия.ИменаМакетов		= ИменаМакетов;
	Иначе
		ПараметрыОткрытия.ИменаМакетов	 	= Строка(ПараметрыПечати.Идентификатор);
		ПараметрыОткрытия.ИсточникДанных	= ИменаМакетов;
	КонецЕсли;
	//-БИТ
	ПараметрыОткрытия.ПараметрКоманды	 = МассивОбъектов;
	ПараметрыОткрытия.ПараметрыПечати	 = ПараметрыПечати;
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

// Формирует и выводит на принтер печатные формы.
//
// Параметры:
//  ИмяМенеджераПечати - Строка - менеджер печати для печатаемых объектов;
//  ИменаМакетов       - Строка - идентификаторы печатных форм;
//  МассивОбъектов     - ЛюбаяСсылка
//                     - Массив из ЛюбаяСсылка - объекты печати;
//  ПараметрыПечати    - Структура - произвольные параметры для передачи в менеджер печати.
//
// Пример:
//   УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Обработка.ПечатнаяФорма", "СписаниеТоваров", ДокументыНаПечать);
//
Процедура ВыполнитьКомандуПечатиНаПринтер(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт

	// Проверим количество объектов.
	Если НЕ ПроверитьКоличествоПереданныхОбъектов(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем табличные документы.
#Если ТолстыйКлиентОбычноеПриложение Тогда
	ПечатныеФормы = УправлениеПечатьюВызовСервера.СформироватьПечатныеФормыДляБыстройПечатиОбычноеПриложение(
			ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);
	Если НЕ ПечатныеФормы.Отказ Тогда
		ОбъектыПечати = Новый СписокЗначений;
		Для Каждого ОбъектПечати Из ПечатныеФормы.ОбъектыПечати Цикл
			ОбъектыПечати.Добавить(ОбъектПечати.Значение, ОбъектПечати.Ключ);
		КонецЦикла;
		ПечатныеФормы.ОбъектыПечати = ОбъектыПечати;
	КонецЕсли;
#Иначе
	ПечатныеФормы = УправлениеПечатьюВызовСервера.СформироватьПечатныеФормыДляБыстройПечати(
			ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);
#КонецЕсли
	
	Если ПечатныеФормы.Отказ Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет прав для вывода печатной формы на принтер, обратитесь к администратору.'"));
		Возврат;
	КонецЕсли;
	
	// Распечатаем
	РаспечататьТабличныеДокументы(ПечатныеФормы.ТабличныеДокументы, ПечатныеФормы.ОбъектыПечати);
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов") Тогда
		СписокПечати = Новый СписокЗначений;
		Для Каждого Макет Из ПечатныеФормы.ТабличныеДокументы Цикл 
			СписокПечати.Добавить(ИменаМакетов, Макет.Представление);
		КонецЦикла;
	  	МодульУчетОригиналовПервичныхДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетОригиналовПервичныхДокументовКлиент");
		МодульУчетОригиналовПервичныхДокументовКлиент.ЗаписатьСостоянияОригиналовПослеПечати(ПечатныеФормы.ОбъектыПечати, СписокПечати);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

// Вывести табличные документы на принтер.
//
// Параметры:
//  ТабличныеДокументы           - СписокЗначений - печатные формы.
//  ОбъектыПечати                - СписокЗначений - соответствие объектов именам областей табличного документа.
//  ПечататьКомплектами          - Булево, Неопределено - (не используется, вычисляется автоматически).
//  КоличествоКопийКомплектов    - Число - количество экземпляров каждого из комплектов документов.
Процедура РаспечататьТабличныеДокументы(ТабличныеДокументы, ОбъектыПечати, Знач ПечататьКомплектами = Неопределено, Знач КоличествоКопийКомплектов = 1) Экспорт
	
	ПечататьКомплектами = ТабличныеДокументы.Количество() > 1;
	
	ПакетОтображаемыхДокументов = УправлениеПечатьюВызовСервера.ПакетДокументов(ТабличныеДокументы,
		ОбъектыПечати, ПечататьКомплектами, КоличествоКопийКомплектов);
		
	//+БИТ в сочетании с изменением в функции УправлениеПечатью.ПакетСОднимТабличнымДокументом() дает более простой выбор неоснвного принтера для печати.
	// ПакетОтображаемыхДокументов.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	ИспользоватьДиалог = РежимИспользованияДиалогаПечати.Использовать;
	Для Каждого ПечатнаяФорма Из ТабличныеДокументы.ВыгрузитьЗначения() Цикл
		Если ЗначениеЗаполнено(ПечатнаяФорма.ИмяПринтера) Тогда
			ПакетОтображаемыхДокументов.ИмяПринтера = ПечатнаяФорма.ИмяПринтера;
			ИспользоватьДиалог = РежимИспользованияДиалогаПечати.НеИспользовать;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ПакетОтображаемыхДокументов.Напечатать(ИспользоватьДиалог);
	//-БИТ
КонецПроцедуры

// Выполняет интерактивное проведение документов перед печатью.
// Если есть непроведенные документы, предлагает выполнить проведение. Спрашивает
// пользователя о продолжении, если какие-то из документов не провелись и имеются проведенные.
//
// Параметры:
//  ОписаниеПроцедурыЗавершения - ОписаниеОповещения - процедура, в которую необходимо передать управление после
//                                                     выполнения.
//                                Параметры вызываемой процедуры:
//                                  СписокДокументов - Массив - проведенные документы;
//                                  ДополнительныеПараметры - значение, которое было указано при создании объекта
//                                                            оповещения.
//  СписокДокументов            - Массив            - ссылки на документы, которые требуется провести.
//  Форма                       - УправляемаяФорма  - форма, из которой было вызвана команда. Параметр требуется, когда
//                                                    процедура
//                                                    вызвана из формы объекта, для того, чтобы перечитать форму.
Процедура ПроверитьПроведенностьДокументов(ОписаниеПроцедурыЗавершения, СписокДокументов, Форма = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеПроцедурыЗавершения", ОписаниеПроцедурыЗавершения);
	ДополнительныеПараметры.Вставить("СписокДокументов", СписокДокументов);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	НепроведенныеДокументы = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(СписокДокументов);
	ЕстьНепроведенныеДокументы = НепроведенныеДокументы.Количество() > 0;
	Если ЕстьНепроведенныеДокументы Тогда
		ДополнительныеПараметры.Вставить("НепроведенныеДокументы", НепроведенныеДокументы);
		УправлениеПечатьюСлужебныйКлиент.ПроверитьПроведенностьДокументовДиалогПроведения(ДополнительныеПараметры);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеПроцедурыЗавершения, СписокДокументов);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму ПечатьДокументов для коллекции табличных документов.
//
// Параметры:
//  КоллекцияПечатныхФорм - Массив из см. НоваяКоллекцияПечатныхФорм
//  ОбъектыПечати - СписокЗначений - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ДополнительныеПараметры - см. ПараметрыПечати
//                          - ФормаКлиентскогоПриложения - форма, из которой выполняется печать;
//
Процедура ПечатьДокументов(КоллекцияПечатныхФорм, Знач ОбъектыПечати = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПечати = ПараметрыПечати();
	
	ВладелецФормы = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПечати, ДополнительныеПараметры);
		ВладелецФормы = ПараметрыПечати.ВладелецФормы;
		ПараметрыПечати.Удалить("ВладелецФормы");
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("ФормаКлиентскогоПриложения") Тогда 
		ВладелецФормы = ДополнительныеПараметры; // Поддержка обратной совместимости с 3.0.2.
	КонецЕсли;
	
	Если ОбъектыПечати = Неопределено Тогда
		ОбъектыПечати = Новый СписокЗначений;
	КонецЕсли;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", ОбъектыПечати);
	ПараметрыОткрытия.Вставить("ПараметрыПечати", ПараметрыПечати);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	
КонецПроцедуры

// Конструктор параметра ДополнительныеПараметры процедуры ПечатьДокументов.
//
//  Возвращаемое значение:
//   Структура - дополнительные параметры открытия формы печати:
//    * ВладелецФормы - ФормаКлиентскогоПриложения - форма, из которой выполняется печать.
//    * Заголовок     - Строка - заголовок формы ПечатьДокументов.
//
Функция ПараметрыПечати() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВладелецФормы");
	Результат.Вставить("ЗаголовокФормы");
	
	Возврат Результат;
	
КонецФункции

// Возвращает подготовленный список печатных форм.
//
// Параметры:
//  Идентификаторы - Строка - идентификаторы печатных форм.
//
// Возвращаемое значение:
//  Массив - коллекция описаний печатных форм. Коллекция предназначена для использования в качестве
//           параметра КоллекцияПечатныхФорм в других процедурах клиентского программного интерфейса подсистемы.
Функция НоваяКоллекцияПечатныхФорм(Идентификаторы) Экспорт
	Возврат УправлениеПечатьюВызовСервера.НоваяКоллекцияПечатныхФорм(Идентификаторы);
КонецФункции

// Возвращает описание найденной в коллекции печатной формы.
// Если описание не найдено, возвращает Неопределено.
//
// Параметры:
//  КоллекцияПечатныхФорм - Массив - см. НоваяКоллекцияПечатныхФорм();
//  Идентификатор         - Строка - идентификатор печатной формы.
//
// Возвращаемое значение:
//  Структура - найденное описание печатной формы.
Функция ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, Идентификатор) Экспорт
	Для Каждого ОписаниеПечатнойФормы Из КоллекцияПечатныхФорм Цикл
		Если ОписаниеПечатнойФормы.ИмяВРЕГ = ВРег(Идентификатор) Тогда
			Возврат ОписаниеПечатнойФормы;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ПодключаемыеКомандыКлиент.ВыполнитьКоманду.
//
// Обработчик динамически подключаемой команды печати.
//
// Параметры:
//  Команда  - КомандаФормы - подключаемая команда формы, выполняющая обработчик Подключаемый_ВыполнитьКомандуПечати.
//           - Структура    - строка таблицы КомандыПечати, преобразованная в структуру.
//  Форма                   - УправляемаяФорма  - форма, из которой была вызвана команда.
//  Источник - ТаблицаФормы, ДанныеФормыСтруктура - источник объектов печати (Форма.Объект, Форма.Элементы.Список).
//           - Массив - список объектов печати.
Процедура ВыполнитьПодключаемуюКомандуПечати(Знач Команда, Знач Форма, Знач Источник) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(Форма, Команда, Источник);
КонецПроцедуры

// Устарела. Следует использовать ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд.
//
// Запускает отложенный процесс обновления команд печати на форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которой необходимо обновить команды печати.
//
Процедура НачатьОбновлениеКоманд(Форма) Экспорт
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(Форма);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму диалога загрузки файла макета для редактирования во внешней программе.
Процедура РедактироватьМакетВоВнешнейПрограмме(ОписаниеОповещения, ПараметрыМакета, Форма) Экспорт
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета", ПараметрыМакета, Форма, , , , ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Перед выполнением команды печати проверить, был ли передан хотя бы один объект, так как
// для команд с множественным режимом использования может быть передан пустой массив.
Функция ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
