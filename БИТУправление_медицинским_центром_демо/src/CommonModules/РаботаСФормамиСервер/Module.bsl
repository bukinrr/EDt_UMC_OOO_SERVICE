#Область ПрограммныйИнтерфейс

// Запрещает интерактивное открытие объекта
//
// Параметры:
//  Отказ	 - Булево	 - параметр Отказ из вызвавшей процедуры.
//
Процедура ЗапретИнтерактивногоОткрытия(Отказ) Экспорт
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данная обработка используется другими объектами конфигурации" + Символы.ПС +
		"Запрещен самостоятельный вызов!")
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СТАНДАРТНЫХ СОБЫТИЙ ФОРМ СПИСКОВ ДОКУМЕНТОВ

// Стандартный обработчик создания формы списка или выбора документа.
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма списка документа.
//  ИмяЭлементаСписка	 - Строка						 - имя основного реквизита формы со списком документа.
//
Процедура ДокументСписокПриСозданииНаСервере(ЭтаФорма, ИмяЭлементаСписка = Неопределено) Экспорт
	
	Если УправлениеНастройками.ТребуетсяУчетПоФилиалам() Тогда
		Если ИмяЭлементаСписка = Неопределено Тогда
			ЭлементСписок = ЭтаФорма.Элементы.Список;
		Иначе
			ЭлементСписок = ЭтаФорма.Элементы[ИмяЭлементаСписка];
		КонецЕсли;
		
		Попытка
			НоваяКолонкаТаблицы = ЭтаФорма.Элементы.Добавить("Филиал", Тип("ПолеФормы"), ЭлементСписок);
            НоваяКолонкаТаблицы.ПутьКДанным = "Список.Филиал";
			Если ЭлементСписок.ПодчиненныеЭлементы.Количество() > 4 Тогда
				ЭтаФорма.Элементы.Переместить(НоваяКолонкаТаблицы,ЭлементСписок,ЭлементСписок.ПодчиненныеЭлементы[3])						
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик создания формы документа.
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма документа.
//  ПовторноеОткрытие	 - Булево						 - признак повторного открытия формы.
// 
// Возвращаемое значение:
//	Структура.
//
Функция ФормаДокументаПриОткрытииСервер(ЭтаФорма, ПовторноеОткрытие=Ложь) Экспорт 
	
	МетаданныеДокумента = ЭтаФорма.Объект.Ссылка.Метаданные();

	Если ЭтаФорма.Объект.Ссылка.Пустая() Тогда
		дкЗаполнитьШапкуДокумента(ЭтаФорма.Объект,МетаданныеДокумента);
	КонецЕсли;

	ВывестиЗаголовокФормыДокумента(ЭтаФорма.Объект,Истина,ЭтаФорма);
    ВывестиЗаголовокСуммаДокумента(ЭтаФорма,ЭтаФорма.Объект);
	
	Структура = ИнициироватьПеременныеМодуляФормы(ЭтаФорма,МетаданныеДокумента,ПовторноеОткрытие);
	
	СоздатьПодменюДвиженияДокумента(ЭтаФорма, МетаданныеДокумента);
	НастроитьВидФормыПоУчетнойПолитике(ЭтаФорма,МетаданныеДокумента);
	
	ДополнитьСтурктуруПараметровПоТипуДокумента(ЭтаФорма, Структура, МетаданныеДокумента);
	
	Возврат Структура;
	
КонецФункции

// В формах списков справочников, которые можно использовать в разрезе филиалов, устанавливает
//  текущее значение отбора по филиалу
//
// Параметры:
//  ЭтаФорма				 - ФормаКлиентскогоПриложения	 - форма списка справочника.
//  МетаданныеСправочника	 - Метаданные					 - ОбъектМетаданных: Справочник - метаданные справочника.
//
Процедура УстановитьОтборФилиалВФормеСписка(ЭтаФорма,МетаданныеСправочника) Экспорт
	
	Если МетаданныеСправочника.Реквизиты.Найти("Филиал") <> Неопределено
		И ЭтаФорма.Элементы.Найти("ОтборФилиал") <> Неопределено
		И ПараметрыСеанса.УчетПоНесколькимФилиалам
	Тогда
	    КлючОбъекта = "ФормаСпискаСправочника" + МетаданныеСправочника.Имя;
		УстановитьОтборФилиалСправочника = 
			ХранилищеПользовательскихНастроекОтчетов.Загрузить(КлючОбъекта, "УстановитьОтборФилиал");
			
		Если УстановитьОтборФилиалСправочника <> Ложь Тогда
			ЭтаФорма.ОтборФилиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Сохранить использование отбора филиал в форме
//
// Параметры:
//  МетаданныеСправочника	 - Метаданные - ОбъектМетаданных: Справочник - метаданные справочника.
//  Использование			 - Булево	 - сохраняемое занчение.
//
Процедура СохранитьИспользованиеОтбораФилиалВФорме(МетаданныеСправочника, Использование) Экспорт
	
	КлючОбъекта = "ФормаСпискаСправочника" + МетаданныеСправочника.Имя;
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(КлючОбъекта, "УстановитьОтборФилиал", Использование);
	
КонецПроцедуры

Процедура ДополнитьСтурктуруПараметровПоТипуДокумента(ЭтаФорма, СтруктураПараметров, МетаданныеДокумента)
		
	Объект = ЭтаФорма.Объект;
	
	Если Объект.Ссылка.Пустая() Тогда
		// Дополнительная информация для нового документа
	
		// Добавляем информацию о попытке повторной коррекции
		Если МетаданныеДокумента.Реквизиты.Найти("Коррекция") <> Неопределено
			И Объект.Коррекция
			И ЗначениеЗаполнено(Объект.ДокументОснование)
			И Не (ЭтаФорма.Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования))
		Тогда
			СтарыйДокументКоррекции = РаботаСДокументамиСервер.НайтиКоррекциюПоДокументу(Объект.ДокументОснование);
			Если ЗначениеЗаполнено(СтарыйДокументКоррекции) Тогда
				СтруктураПараметров.Вставить("СтарыйДокументКоррекции", СтарыйДокументКоррекции);
			КонецЕсли;
		КонецЕсли;
		
		// Добавляем информацию о попытке повторного возврата
		Если (МетаданныеДокумента.Имя = "ОказаниеУслуг"
				Или МетаданныеДокумента.Имя = "ВозвратПоПлатежнойКарте")
			И Не (ЭтаФорма.Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования))
		Тогда
			ЭтоВозврат = МетаданныеДокумента.Имя = "ВозвратПоПлатежнойКарте" 
				Или (МетаданныеДокумента.Имя = "ОказаниеУслуг" И Объект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту);
				
			Если ЭтоВозврат И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				СтарыйДокументВозврата = РаботаСДокументамиСервер.НайтиВозвратПоДокументу(Объект.ДокументОснование);
				Если ЗначениеЗаполнено(СтарыйДокументВозврата) Тогда
					СтруктураПараметров.Вставить("СтарыйДокументВозврата", СтарыйДокументВозврата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ФОРМ ДОКУМЕНТОВ

// Устанавливает отбор динамического списка
//
// Параметры:
//  ЛЗ					 - Строка				 - поле отбора.
//  ПЗ					 - Произвольный			 - значение отбора
//  ДинамическийСписок	 - ДинамическийСписок	 - список на форме.
//  ВидСравнения		 - ВидСравненияКомпоновкиДанных	 - вид сравнения.
//
Процедура УстановитьОтборСписка(ЛЗ, ПЗ, ДинамическийСписок, ВидСравнения = Неопределено) Экспорт

	Перем ЭО, ГруппаОтбор;
	
	// Если этот же отбор есть в настройках компоновски списка, то надо этот отбор убрать
	Попытка
		ОтборКомпоновкиСписка  = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ЭлементОтбора Из ОтборКомпоновкиСписка  Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
			Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	Исключение КонецПопытки;		
	
	// Если возможно, использую отбор в пользовательских настройках списка
	Попытка
		ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого ЭлементНастройки Из ПользовательскиеНастройки Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
				ГруппаОтбор = ЭлементНастройки;
				Для Каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
						И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
					Тогда
						ЭО = ЭлементОтбора;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ГруппаОтбор <> Неопределено Тогда
			Если ЭО = Неопределено Тогда
				ЭО = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
				ЭО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	Если ЭО = Неопределено Тогда
		ОтборЭлементы = ДинамическийСписок.Отбор.Элементы;

		Для Каждого ЭлементОтбора Из ОтборЭлементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
			Тогда
				ЭО = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	     
		Если ЭО = Неопределено Тогда
			ЭО = ОтборЭлементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ);
		КонецЕсли;
	КонецЕсли;
     
	Если ВидСравнения = Неопределено Тогда
		Если ТипЗнч(ПЗ) = Тип("СписокЗначений") Тогда
			ЭО.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ЭО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	Иначе
		ЭО.ВидСравнения = ВидСравнения;
	КонецЕсли;
	
	ЭО.ПравоеЗначение = ПЗ;
	ЭО.Использование = Истина;

КонецПроцедуры

// Снимает отбор динамического списка
//
// Параметры:
//  ЛЗ					 - Строка			 - поле отбора.
//  ДинамическийСписок	 - ДинамическийСписок	 - список на форме.
//
Процедура СнятьОтборСписка(ЛЗ, ДинамическийСписок) Экспорт

	// Если этот же отбор есть в настройках компоновски списка, то надо этот отбор убрать
	Попытка
		ОтборКомпоновскиСписка  = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ЭлементОтбора Из ОтборКомпоновскиСписка Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
			Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	Исключение КонецПопытки;		
	
	// Если этот же отбор есть в пользовательских настройках списка, то надо этот отбор убрать
	Попытка
		ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого ЭлементНастройки Из ПользовательскиеНастройки Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
				ГруппаОтбор = ЭлементНастройки;
				Для Каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
						И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
					Тогда
						ЭлементОтбора.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;	
	
	Для Каждого ЭлементОтбора Из ДинамическийСписок.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛЗ) 
		Тогда
			ЭО = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭО <> Неопределено Тогда
		ЭО.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Снимает все отборы динамического списка
//
// Параметры:
//  ДинамическийСписок	 - ДинамическийСписок	 - список на форме.
//
Процедура ОтключитьВсеОтборыСписка(ДинамическийСписок) Экспорт

	Перем ЭО, ГруппаОтбор;
	
	// Если этот же отбор есть в настройках компоновски списка, то надо этот отбор убрать
	Попытка
		ОтборКомпоновкиСписка  = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Для Каждого ЭлементОтбора Из ОтборКомпоновкиСписка  Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;		
	
	// Если возможно, использую отбор в пользовательских настройках списка
	Попытка
		ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого ЭлементНастройки Из ПользовательскиеНастройки Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
				ГруппаОтбор = ЭлементНастройки;
				Для Каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")Тогда
						ЭлементОтбора.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;	

КонецПроцедуры

// Установливает видимость реквизита ВнешнийКод в спраочниках.
//
// Параметры:
//  Элемент			 - ПолеФормы - элемент рекизита на форме.
//  ПризнакГрупп	 - Булево	 - когда истина, используются настройки для группы справочника.
//  ИмяСправочника	 - Строка	 - имя справочника.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция УстановитьВидимостьВнешнегоКода(Элемент,ПризнакГрупп,ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкаОбмена.ПолеСопоставления     
	|ИЗ
	|	РегистрСведений.НастройкаОбмена КАК НастройкаОбмена
	|ГДЕ
	|	НастройкаОбмена.НазваниеОбъекта = &НазваниеОбъекта";
	
	Запрос.УстановитьПараметр("НазваниеОбъекта",?(ПризнакГрупп,ИмяСправочника+"Группы",ИмяСправочника));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = (Выборка.ПолеСопоставления = "ВнешнийКод") Или (Выборка.ПолеСопоставления = "Внешний код");
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Элемент <> Неопределено Тогда
		Элемент.Видимость = Результат;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Формирует заголовок документа на форме.
//
// Параметры:
//  ДокументОбъект		 - ДанныеФормыСтруктура	 - объект документа на форме.
//  ВыводитьВидОперации	 - Булево				 - требуется ли включить в заголовок вид операции документа.
//  Форма				 - ФормаКлиентскогоПриложения	 - форма списка справочника.
//
Процедура ВывестиЗаголовокФормыДокумента(ДокументОбъект, ВыводитьВидОперации = Истина, Форма) Экспорт
	
	// Формирование заголовка формы
	МетаданныеДокумента	= ДокументОбъект.Ссылка.Метаданные();
	
	Если ВыводитьВидОперации И 
		 ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ВидОперации",МетаданныеДокумента) И
		 ЗначениеЗаполнено(ДокументОбъект.ВидОперации)
	Тогда
		СтрокаВидаОперации = ": " + Строка(ДокументОбъект.ВидОперации) + ". ";
	Иначе
		СтрокаВидаОперации = "";
	КонецЕсли;
	
	Номер = " № "  + СокрЛП(ДокументОбъект.Номер); 
	Дата  = " от " + Формат(ДокументОбъект.Дата,"ДФ=dd.MM.yyyy");
	Если ДокументОбъект.Проведен Тогда
		СостояниеДокумента = " Проведен";
	ИначеЕсли ДокументОбъект.ПометкаУдаления Тогда
		СостояниеДокумента = " Удален";
	ИначеЕсли НЕ Форма.Параметры.Ключ.Пустая() Тогда
		СостояниеДокумента = " Записан";
	Иначе
		СостояниеДокумента = " Новый";
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	
	СтандартнаяОбработка = Истина;
	Форма.Заголовок = РаботаСФормамиПереопределяемый.ПолучитьПредставлениеДокумента(ДокументОбъект, МетаданныеДокумента, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Форма.Заголовок = МетаданныеДокумента.Представление()+Номер+Дата;
	КонецЕсли;
	Форма.Заголовок = Форма.Заголовок + СтрокаВидаОперации + СостояниеДокумента;
	
КонецПроцедуры

// Формирует заголовок надписи суммы документа в форме документа
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения	 - форма открытого документа.
//  Объект	 - ДанныеФормыСтруктура	 - документ на форме.
//
Процедура ВывестиЗаголовокСуммаДокумента(ЭтаФорма,Объект) Экспорт
	Если ЭтаФорма<>Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СуммаДокумента")
	Тогда
		Попытка
			Если ЭтаФорма.Элементы.Найти("тНадписьСуммаДокумента")<>Неопределено Тогда
				ТекстИтого = " ";
			Иначе
				ТекстИтого = "Итого: ";
			КонецЕсли;
			ТекстСумма=ТекстИтого+Формат(Объект.СуммаДокумента,"ЧДЦ=2; ЧН=0,00");
			Если ЭтаФорма.Элементы.Найти("тСуммаДокумента") <> Неопределено Тогда
				ЭтаФорма.Элементы.тСуммаДокумента.Заголовок=ТекстСумма;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры

// Настраивает видимость и доступность элементов формы по данным учетной политики.
//
// Параметры:
//  ЭтаФорма	 - ФормаКлиентскогоПриложения	 - форма документа
//  фМетаданные	 - Метаданные					 - метаданные документа.
//
Процедура НастроитьВидФормыПоУчетнойПолитике(ЭтаФорма,фМетаданные) Экспорт
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();	
	ВестиУчетСкидок	 = мУчетнаяПолитика.ИспользоватьСкидки;                   
	
	// Настройка видимости колонок табличных полей.
	ВестиУчетПоХарактеристикам = мУчетнаяПолитика.ВестиУчетПоХарактеристикам;
	Если ВестиУчетПоХарактеристикам=Неопределено Тогда ВестиУчетПоХарактеристикам=Истина; КонецЕсли;
	
	ИспользоватьНесколькоСотрудниковВДокументах = мУчетнаяПолитика.ИспользоватьНесколькоСотрудниковВДокументах;
	
	мсТЧ = Новый Массив;
	мсТЧ.Добавить("Работы");
	мсТЧ.Добавить("Материалы");
	мсТЧ.Добавить("Товары");                       
	мсТЧ.Добавить("Сертификаты");
	
	Для Каждого ИмяТЧ из мсТЧ Цикл
		ЭУТЧ = ЭтаФорма.Элементы.Найти(ИмяТЧ);
		Если  ЭУТЧ <> Неопределено Тогда
			Если ЭУТЧ.ПодчиненныеЭлементы.Найти("ХарактеристикаНоменклатуры")<>Неопределено Тогда
				ЭУТЧ.ПодчиненныеЭлементы.ХарактеристикаНоменклатуры.Видимость = ВестиУчетПоХарактеристикам;
			КонецЕсли;
			Если ЭУТЧ.ПодчиненныеЭлементы.Найти("ПроцентСкидки")<>Неопределено Тогда
				ЭУТЧ.ПодчиненныеЭлементы.ПроцентСкидки.Видимость = ВестиУчетСкидок;
			КонецЕсли;
			Если ЭУТЧ.ПодчиненныеЭлементы.Найти("СуммаСкидки")<>Неопределено Тогда
				ЭУТЧ.ПодчиненныеЭлементы.СуммаСкидки.Видимость = ВестиУчетСкидок;
			КонецЕсли;
			Если ЭУТЧ.ПодчиненныеЭлементы.Найти("Сотрудник")<>Неопределено Тогда
				ЭУТЧ.ПодчиненныеЭлементы.Сотрудник.Видимость = ИспользоватьНесколькоСотрудниковВДокументах;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Настройка видимости и доступности кнопки выбора филиала документа.
	НастроитьВидимостьДоступностьКнопкиВыбораФилиалаДокумента(ЭтаФорма,фМетаданные);
	
	РаботаСФормамиПереопределяемый.НастроитьВидФормыПоУчетнойПолитике(ЭтаФорма, фМетаданные.Имя);
	РаботаСФормамиПереопределяемый.НастроитьВидФормыОбъекта(ЭтаФорма, фМетаданные);
	
КонецПроцедуры

// Настройка видимости и доступности кнопки выбора филиала документа.
Процедура НастроитьВидимостьДоступностьКнопкиВыбораФилиалаДокумента(ЭтаФорма,фМетаданные)
	
	ИмяФилиал = ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов();	
	Если ОбщегоНазначенияСервер.ЕстьРеквизитДокумента(ИмяФилиал, фМетаданные) Тогда
		
		Если ПараметрыСеанса.УчетПоНесколькимФилиалам Тогда
			
			КоманднаяПанель = ЭтаФорма.КоманднаяПанель;
			
			Если КоманднаяПанель <> Неопределено
				 И ЭтаФорма.Команды.Найти("ФилиалПриНажатии") = Неопределено 
			Тогда
				
				КнопкаФилиал = ЭтаФорма.Команды.Добавить("ФилиалПриНажатии");
				КнопкаФилиал.Действие = "Подключаемый_КнопкаФилиалПриНажатии";
				
				КнопкаФилиал = ЭтаФорма.Элементы.Добавить("КнопкаФилиал", Тип("КнопкаФормы"), КоманднаяПанель);
			    
				Попытка
					КнопкаФилиал.ИмяКоманды = "ФилиалПриНажатии";
				Исключение
 					
				КонецПопытки;
				
				КнопкаФилиал.Заголовок = ПроцедурыСпециализацииПоставки.СформироватьЗаголовокКнопкиФилиала(ЭтаФорма.Объект[ИмяФилиал]);
				
				КнопкаФилиал.Доступность = РольДоступна("ПолныеПрава")
					Или УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"РазрешитьМенятьФилиалВДокументах");
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициирует экспортные переменные формы документа, не привязанные к специфике документа.
//
// Параметры:
//  ЭтаФорма    - форма документа
//  фМетаданные - метаданные документа
//  ПовторноеОткрытие - признак повторного открытия формы (не используется).
//
Функция ИнициироватьПеременныеМодуляФормы(ЭтаФорма,фМетаданные,ПовторноеОткрытие = Ложь)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ПараметрыВозврата = Новый Структура("мВидОплатыСертификатом, мОсновнойВидОплаты, мТекущаяДатаДокумента");
	
	Если фМетаданные.ТабличныеЧасти.Найти("Оплата") <> Неопределено Тогда
		
		ПараметрыВозврата.мВидОплатыСертификатом = Перечисления.ВидыОплаты.Сертификатом;
		
		ПараметрыВозврата.мОсновнойВидОплаты = мУчетнаяПолитика.ОсновнойВидОплаты;
		
	КонецЕсли;
	
	// Инициализация переменных и действий для обработки изменения даты документа.
	ПараметрыВозврата.мТекущаяДатаДокумента = ЭтаФорма.Объект.Дата;
	
	РаботаСФормамиПереопределяемый.ИнициироватьПеременныеМодуляФормы(ЭтаФорма, фМетаданные.Имя, ПараметрыВозврата);
	
	Возврат ПараметрыВозврата;
	
КонецФункции

// Полное имя основной формы объекта по ссылке.
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка	 - любая ссылка.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьПолноеИмяОсновнойФормыПоСсылке(Ссылка) Экспорт
	
	ПолноеИмяФормы = РаботаСФормамиПереопределяемый.ПолучитьПолноеИмяОсновнойФормыПоСсылке(Ссылка);
	
	Если Не ЗначениеЗаполнено(ПолноеИмяФормы) Тогда
		
		ОсновнаяФормаОбъекта = Ссылка.Метаданные().ОсновнаяФормаОбъекта;
		
		Если ОсновнаяФормаОбъекта <> Неопределено Тогда
			Возврат ОсновнаяФормаОбъекта.ПолноеИмя();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция возвращает перечень клиентов, удовлетворяющими переданному тексту подбора
//
// Параметры:
//  Текст								 - Строка	 - текст автоподбора клиента
//  ИспользоватьАвтоПодборКлиентовПоКоду - Булево	 - признак использования поиска по коду
//  ПараметрыСтрокиПоиска				 - Структура - параметры по результату анализа строки поиска.
// 
// Возвращаемое значение:
//  СписокЗначений.
//
Функция ПолучитьМассивКлиентовПоАвтоподбору(Текст, ИспользоватьАвтоПодборКлиентовПоКоду = Неопределено, ПараметрыСтрокиПоиска = Неопределено) Экспорт
	
	сКлиенты = Новый СписокЗначений;
	Если СтрДлина(Текст) >= Макс(1, УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("МинДлинаСтрокиПоискаКлиента")) Тогда
		ТаблицаРезультат = ПолучитьТаблицуКлиентовПоПолямПоиска(Текст, ИспользоватьАвтоПодборКлиентовПоКоду, ПараметрыСтрокиПоиска);
		ТаблицаРезультат.Свернуть("Ссылка,Представление,ДатаРождения");
		Для Каждого СтрокаКлиент Из ТаблицаРезультат Цикл
			Представление = СтрокаКлиент.Представление;
			Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоискКлиентаПоПодстрокеПоказыватьСДатойРождения") Тогда
				Представление = Представление + ?(ЗначениеЗаполнено(СтрокаКлиент.ДатаРождения),  " (" + Формат(СтрокаКлиент.ДатаРождения,"ДЛФ=D") + ")","");
			КонецЕсли;			
			
			сКлиенты.Добавить(СтрокаКлиент.Ссылка, Представление);
		КонецЦикла;
	КонецЕсли;

	Возврат сКлиенты;

КонецФункции

// Функция возвращает перечень клиентов, удовлетворяющими переданному тексту подбора
//
// Параметры:
//  Текст								 - Строка	 - текст автоподбора клиента
//  ИспользоватьАвтоПодборКлиентовПоКоду - Булево	 - признак использования поиска по коду
//  ПараметрыСтрокиПоиска				 - Структура - параметры по результату анализа строки поиска, полученная из РаботаСФормамиСервер.ПараметрыСтрокиПоискаКлиента().
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуКлиентовПоПолямПоиска(Текст, Знач ИспользоватьАвтоПодборКлиентовПоКоду = Неопределено, Знач ПараметрыСтрокиПоиска = Неопределено)
	
	Если ПараметрыСтрокиПоиска = Неопределено Тогда
		ПараметрыСтрокиПоиска = РаботаСФормамиСервер.ПараметрыСтрокиПоискаКлиента(Текст);
	КонецЕсли;
	Если ИспользоватьАвтоПодборКлиентовПоКоду = Неопределено Тогда
		ИспользоватьАвтоПодборКлиентовПоКоду = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьАвтоПодборКлиентовПоКоду")
	КонецЕсли;
	
	ТекстЦифры = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Текст);
	
	// Приоритет подбора: наименование, фамилия, имя, код, медкарта, телефон.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст" 		,	Текст);
	Запрос.УстановитьПараметр("ТекстНачало" ,	Текст+"%");
	Запрос.УстановитьПараметр("ТекстСредний",	"%"+Текст+"%");
	
	Запрос.УстановитьПараметр("_ТекстЦифрыНачало",	 "_" + ТекстЦифры +"%");
	Запрос.УстановитьПараметр("ТекстЦифрыНачало",	 ТекстЦифры+"%");
	Запрос.УстановитьПараметр("ТекстПоследниеЦифры", "%" + ТекстЦифры);
	Запрос.УстановитьПараметр("ТекстЦифрыТочноеРавенство", ТекстЦифры);
	
	Запрос.УстановитьПараметр("ДелатьПоискПоИмениИлиФамилии", ПараметрыСтрокиПоиска.ИспользоватьАвтоПодборКлиентовПоИмениИФамилии);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	Клиенты.Ссылка,
	|	Клиенты.Представление,
	|	Клиенты.ДатаРождения,
	|	ВЫБОР
	|		КОГДА Клиенты.Наименование ПОДОБНО &ТекстНачало
	|			ТОГДА 1
	|		//%ПоискПоИмениИлиФамилии_Приоритет%
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ 
	| //%УсловиеПоискаКлиентов%
	|	И НЕ Клиенты.ПометкаУдаления
	|	И НЕ Клиенты.Архив
	|
	|
	| //%ПоискПоТелефону%
	|
	| //%ДелатьПоискПоМедкарте%
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	Данные.Ссылка,
	|	Данные.ДатаРождения,
	|	Данные.Представление
	|ИЗ
	|	Данные КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.Приоритет";
	
	УсловияПоискаКлиентов = Новый Массив;
	УсловияПоискаКлиентов.Добавить("Клиенты.Наименование ПОДОБНО &ТекстНачало");
	Если ПараметрыСтрокиПоиска.ИспользоватьАвтоПодборКлиентовПоИмениИФамилии Тогда
		УсловияПоискаКлиентов.Добавить("Клиенты.Фамилия ПОДОБНО &ТекстНачало");
		УсловияПоискаКлиентов.Добавить("Клиенты.Имя ПОДОБНО &ТекстНачало");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ПоискПоИмениИлиФамилии_Приоритет%",
			"		КОГДА Клиенты.Фамилия ПОДОБНО &ТекстНачало
			|			ТОГДА 2
			|		КОГДА Клиенты.Имя ПОДОБНО &ТекстНачало
			|			ТОГДА 3
			|");
		
	КонецЕсли;
	
	Если ПараметрыСтрокиПоиска.ЕстьЦифры Тогда
		
		Если ИспользоватьАвтоПодборКлиентовПоКоду Тогда
			УсловияПоискаКлиентов.Добавить("Клиенты.Код ПОДОБНО &ТекстСредний");
		КонецЕсли;
		
		Если Метаданные.НайтиПоПолномуИмени("Справочник.МедицинскиеКарты") <> Неопределено Тогда

			// Поиск по № медкарты всегда, когда есть цифры в строке поиска.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДелатьПоискПоМедкарте%", "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 50
				|	МедицинскиеКарты.Клиент,
				|	МедицинскиеКарты.Клиент.Представление,
				|	МедицинскиеКарты.Клиент.ДатаРождения,
				|	5
				|ИЗ
				|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
				|ГДЕ
				|	МедицинскиеКарты.Наименование ПОДОБНО &ТекстСредний
				|	И НЕ МедицинскиеКарты.ПометкаУдаления
				|	И НЕ МедицинскиеКарты.Клиент.Архив
				|	И НЕ МедицинскиеКарты.Клиент.ПометкаУдаления
				|");
		КонецЕсли;
		
		// Способы поиска если есть цифры и нет букв.
		Если Не ПараметрыСтрокиПоиска.ЕстьБуквы Тогда
			
			// Поиск по ИНН, коду клиента - если есть цифры, разрешен поиск по коду клиента.
			Если СтрДлина(ТекстЦифры) >= 8 И СтрДлина(ТекстЦифры) <= 13 Тогда // Интернациональный запас.
				УсловияПоискаКлиентов.Добавить("Клиенты.ИНН = &ТекстЦифрыТочноеРавенство");
			КонецЕсли;
			
			Если ПараметрыСтрокиПоиска.ЭтоСНИЛС Тогда
				// Хранится форматированная строка, поэтому преобразуем строку цифр в формат СНИЛС.
				Запрос.УстановитьПараметр("ТекстСНИЛС", ОбщегоНазначенияКлиентСервер.ПривестиЧисловуюСтрокуКМаске(ТекстЦифры, МедицинскоеСтрахованиеКлиентСервер.МаскаСНИЛС()));
				УсловияПоискаКлиентов.Добавить("Клиенты.СНИЛС = &ТекстСНИЛС");
			КонецЕсли;

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ПоискПоТелефону%", "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 50
				|	КонтактнаяИнформация.Объект,
				|	КонтактнаяИнформация.Объект.Представление,
				|	КонтактнаяИнформация.Объект.ДатаРождения,
				|	6
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
				|	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Клиенты
				|	И НЕ ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.Клиенты).ПометкаУдаления
				|	И НЕ ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.Клиенты).Архив
				|	И КонтактнаяИнформация.Поле3 ПОДОБНО &ТекстНачало
				|		ИЛИ КонтактнаяИнформация.Поле12 ПОДОБНО &ТекстЦифрыНачало
				|		ИЛИ КонтактнаяИнформация.Поле12 ПОДОБНО &_ТекстЦифрыНачало
				|		ИЛИ КонтактнаяИнформация.Поле12 ПОДОБНО &ТекстПоследниеЦифры
				|");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеПоискаКлиентов%", "(" + СтрСоединить(УсловияПоискаКлиентов, " ИЛИ ") + ")");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует список информационных сообщений на текущий момент времени для вывода на рабочем месте пользователя.
// 
// Возвращаемое значение:
//  СписокЗначений.
//
Функция ПолучитьСписокИнформационныхСообщений() Экспорт
	
	СписокСообщений = Новый СписокЗначений;
	
	// Инфосообщение 1. Проверка на превышение минимальных остатков.
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладах.Склад КАК Склад,
		|	ТоварыНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ОстаткиОбщаяТаблица
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаКон, ) КАК ТоварыНаСкладах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладах.Склад КАК Склад,
		|	ТоварыНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	ОстаткиОбщаяТаблица КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ТоварыНаСкладах.ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладах.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
		|	ТоварыНаСкладах.ХарактеристикаНоменклатуры,
		|	СУММА(ТоварыНаСкладах.КоличествоОстаток)
		|ИЗ
		|	ОстаткиОбщаяТаблица КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладах.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладах.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладах.Номенклатура,
		|	ТоварыНаСкладах.Склад,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	СУММА(ТоварыНаСкладах.КоличествоОстаток)
		|ИЗ
		|	ОстаткиОбщаяТаблица КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладах.Номенклатура,
		|	ТоварыНаСкладах.Склад
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладах.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	СУММА(ТоварыНаСкладах.КоличествоОстаток)
		|ИЗ
		|	ОстаткиОбщаяТаблица КАК ТоварыНаСкладах
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладах.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МинимальныеОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
		|	МинимальныеОстаткиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МинимальныеОстаткиНоменклатуры.Склад КАК Склад,
		|	МинимальныеОстаткиНоменклатуры.Количество КАК МинимальныйОстаток,
		|	Остатки.КоличествоОстаток КАК Остаток
		|ИЗ
		|	РегистрСведений.МинимальныеОстаткиНоменклатуры КАК МинимальныеОстаткиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО МинимальныеОстаткиНоменклатуры.Номенклатура = Остатки.Номенклатура
		|			И МинимальныеОстаткиНоменклатуры.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|			И МинимальныеОстаткиНоменклатуры.Склад = Остатки.Склад
		|ГДЕ
		|	МинимальныеОстаткиНоменклатуры.Количество > 0
		|	И МинимальныеОстаткиНоменклатуры.Количество > Остатки.КоличествоОстаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МинимальныеОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
		|	МинимальныеОстаткиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МинимальныеОстаткиНоменклатуры.Склад КАК Склад,
		|	Остатки.КоличествоОстаток КАК Остаток,
		|	МинимальныеОстаткиНоменклатуры.ТочкаПредупреждения
		|ИЗ
		|	РегистрСведений.МинимальныеОстаткиНоменклатуры КАК МинимальныеОстаткиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО МинимальныеОстаткиНоменклатуры.Номенклатура = Остатки.Номенклатура
		|			И МинимальныеОстаткиНоменклатуры.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|			И МинимальныеОстаткиНоменклатуры.Склад = Остатки.Склад
		|ГДЕ
		|	МинимальныеОстаткиНоменклатуры.ТочкаПредупреждения > 0
		|	И МинимальныеОстаткиНоменклатуры.ТочкаПредупреждения > Остатки.КоличествоОстаток
		|	И Остатки.КоличествоОстаток >= МинимальныеОстаткиНоменклатуры.Количество";
		
		Запрос.УстановитьПараметр("ДатаКон",ТекущаяДата());
		Результат = Запрос.ВыполнитьПакет();
		ВыгрузкаМинОстатки = Результат[2].Выгрузить();
		ВыгрузкаТочкаПредуп = Результат[3].Выгрузить();
		Если ВыгрузкаМинОстатки.Количество()<> 0 Тогда
			
			ВыгрузкаМинОстатки.Свернуть("Номенклатура");
			
			ИнфПревышенияОстатков = Новый Структура;
			ИнфПревышенияОстатков.Вставить("ВидСообщения","Остаток меньше страхового запаса");
			ИнфПревышенияОстатков.Вставить("Описание","В наличии меньше нормы страхового запаса (всего позиций:"+ Строка(ВыгрузкаМинОстатки.Количество())+").");
			ИнфПревышенияОстатков.Вставить("ВнутреннийИдСообщения","ПревышениеМинимальныхОстатков");
			
			СписокСообщений.Добавить(ИнфПревышенияОстатков);
			
		КонецЕсли;
		
		Если ВыгрузкаТочкаПредуп.Количество()<> 0 Тогда
			
			ВыгрузкаТочкаПредуп.Свернуть("Номенклатура");
			
			ИнфПревышенияОстатков = Новый Структура;
			ИнфПревышенияОстатков.Вставить("ВидСообщения","Достигнута точка заказа");
			ИнфПревышенияОстатков.Вставить("Описание","Требуется заказ товаров (всего позиций:"+ Строка(ВыгрузкаТочкаПредуп.Количество())+").");
			ИнфПревышенияОстатков.Вставить("ВнутреннийИдСообщения","ПревышениеТочкиЗаказа");
			
			СписокСообщений.Добавить(ИнфПревышенияОстатков);
			
		КонецЕсли;
		
		// Инфосообщение 2. Проверка на превышение срока годности
		
		Если ПравоДоступа("Чтение", Метаданные.Справочники.СерииНоменклатуры) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
			|	ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
			|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.ГоденДо КАК Значение,
			|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
			|			&СрокГодности,
			|			СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|				И СерияНоменклатуры.ГоденДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПартииТоваровНаСкладахОстатки
			|ГДЕ
			|	0 < &СрокГодности
			|	И ПартииТоваровНаСкладахОстатки.КоличествоОстаток > 0"
			;
			
			Запрос.УстановитьПараметр("СрокГодности",ТекущаяДата());
			Выгрузка = Запрос.Выполнить().Выгрузить();
			Если Выгрузка.Количество() <> 0 Тогда
				
				ИнфПревышенияСрокаГодности = Новый Структура;
				ИнфПревышенияСрокаГодности.Вставить("ВидСообщения","Превышен срок годности");
				ИнфПревышенияСрокаГодности.Вставить("Описание","Превышен срок годности товаров (всего позиций:"+ Строка(Выгрузка.Количество())+").");
				ИнфПревышенияСрокаГодности.Вставить("ВнутреннийИдСообщения","ПревышениеСрокаГодности");
				
				СписокСообщений.Добавить(ИнфПревышенияСрокаГодности);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокСообщений;
	
КонецФункции

// Создает подменю для перехода к движениям документа
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - Форма.
//  МетаданныеДокумента	 - Метаданные					 - метаданные документа.
//
Процедура СоздатьПодменюДвиженияДокумента(ЭтаФорма, МетаданныеДокумента = Неопределено) Экспорт

	Если Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ПоказыватьПодменюПерейти") Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ЭтаФорма.Объект.Ссылка.Метаданные();
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Количество() <> 0 Тогда
		
		ПодменюПерейти = ЭтаФорма.Элементы.Добавить("ДвиженияДок", Тип("ГруппаФормы"), ЭтаФорма.Элементы.ФормаКоманднаяПанель);
		ПодменюПерейти.Заголовок = "Перейти";
		ПодменюПерейти.Вид = ВидГруппыФормы.Подменю;
		
		ТаблицаИменРегистров = Новый ТаблицаЗначений;
		ТаблицаИменРегистров.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
		ТаблицаИменРегистров.Колонки.Добавить("ПолноеИмяРегистра", Новый ОписаниеТипов("Строка"));
		
		Для Каждого ОбъектМетаданныхРегистра Из МетаданныеДокумента.Движения Цикл
			
			Если СтрНачинаетсяС(ОбъектМетаданныхРегистра.Имя, "удалить") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИменРегистров = ТаблицаИменРегистров.Добавить();
			СтрокаИменРегистров.Синоним				= ОбъектМетаданныхРегистра.Синоним;
			СтрокаИменРегистров.ПолноеИмяРегистра	= ОбъектМетаданныхРегистра.ПолноеИмя();
			
		КонецЦикла;
		ТаблицаИменРегистров.Сортировать("Синоним");
		
		Для Каждого СтрокаИменРегистров Из ТаблицаИменРегистров Цикл
			
			ИмяКоманды = СтрЗаменить(СтрокаИменРегистров.ПолноеИмяРегистра,".","_");
			Команда	= ЭтаФорма.Команды.Добавить(ИмяКоманды);
			Команда.Действие = "Подключаемый_ВывестиДвиженияДокумента";
			
			НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПодменюПерейти);
			НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			НовыйЭлемент.ИмяКоманды = ИмяКоманды;
			НовыйЭлемент.Заголовок	= СтрокаИменРегистров.Синоним;
			НовыйЭлемент.ТолькоВоВсехДействиях = Истина;
			
		КонецЦикла;
				
	КонецЕсли;
		
КонецПроцедуры

// Оформляет список контактной информации на форме.
//
// Параметры:
//  КонтактнаяИнформация - ДинамическийСписок	 - список контактной информации на форме.
//
Процедура УстановитьУсловноеОформлениеПоляКонтактнойИнфомрации(КонтактнаяИнформация) Экспорт
	
	УО = КонтактнаяИнформация.УсловноеОформление.Элементы;
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Черный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, , , ));
	
	// Условие форматирования
	ЭлементУсловия  = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначениеПоУмолчанию");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	
	// Оформляемое поле
	ОформлПоле1 = ЭлементУО.Поля.Элементы.Добавить();
	ОформлПоле1.Поле = Новый ПолеКомпоновкиДанных("Представление");
	
	ОформлПоле2 = ЭлементУО.Поля.Элементы.Добавить();
	ОформлПоле2.Поле = Новый ПолеКомпоновкиДанных("Вид");
	
	ОформлПоле3 = ЭлементУО.Поля.Элементы.Добавить();
	ОформлПоле3.Поле = Новый ПолеКомпоновкиДанных("Тип");
	
	ОформлПоле4 = ЭлементУО.Поля.Элементы.Добавить();
	ОформлПоле4.Поле = Новый ПолеКомпоновкиДанных("Комментарий");
	
	
	ЭлементУООтмены = УО.Добавить();
	ЭлементУООтмены.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Черный);
	ЭлементУООтмены.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Ложь, , , ) );
	
	// Условие форматирования
	ЭлементУсловияОтмены  = ЭлементУООтмены.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловияОтмены.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначениеПоУмолчанию");
	ЭлементУсловияОтмены.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловияОтмены.ПравоеЗначение = Ложь;  
	
	// Оформляемое поле
	ОформлПолеОтмены1 = ЭлементУООтмены.Поля.Элементы.Добавить();
	ОформлПолеОтмены1.Поле = Новый ПолеКомпоновкиДанных("Представление");
	
	ОформлПолеОтмены2 = ЭлементУООтмены.Поля.Элементы.Добавить();
	ОформлПолеОтмены2.Поле = Новый ПолеКомпоновкиДанных("Вид");
	
	ОформлПолеОтмены3 = ЭлементУООтмены.Поля.Элементы.Добавить();
	ОформлПолеОтмены3.Поле = Новый ПолеКомпоновкиДанных("Тип");
	
	ОформлПолеОтмены4 = ЭлементУООтмены.Поля.Элементы.Добавить();
	ОформлПолеОтмены4.Поле = Новый ПолеКомпоновкиДанных("Комментарий");
	
КонецПроцедуры

// Определяет, нужно ли обновить номер документа после изменения даты.
//
// Параметры:
//  НоваяДата	 - Дата	 - новая дата.
//  СтараяДата	 - Дата	 - старая дата.
//  ТипДокумента - Тип	 - тип документа.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ТребуетсяОбновитьНомерДокумента(НоваяДата, СтараяДата, ТипДокумента) Экспорт
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	
	// Определяем назначенную для данного вида документов периодичность смены номера.
	ПериодСменыНомера = МетаданныеДокумента.ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// Определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НоваяДата) - НачалоГода(СтараяДата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НоваяДата) - НачалоКвартала(СтараяДата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НоваяДата) - НачалоМесяца(СтараяДата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(НоваяДата) - НачалоДня(СтараяДата);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РазностьДат <> 0;
	
КонецФункции

////////////////////////////////////////////////////////////////
// 	 РАБОТА С ПАНЕЛЬЮ ПОДБОРА

// Инициирует панель подбор в форме.
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - Форма.
//  ПоказыватьЦены	 - Булево						 - Показывать ли цены  в подборе. По умолчанию Ложь.
//  ИмяТЧ			 - Строка						 - Имя табличной части, в которую работает подбор.
//  ИмяВидаНом		 - Строка						 - Имя вида номенклатуры.
//  ИмяВидаНом2		 - Строка						 - Имя вида номенклатуры.
//
Процедура НастройкаПодбораПриСоздании(ЭтаФорма, ПоказыватьЦены = Ложь, ИмяТЧ = Неопределено, ИмяВидаНом = Неопределено, ИмяВидаНом2 = Неопределено) Экспорт 
	
	Если ЭтаФорма.Элементы.ГруппаПодбор.ПодчиненныеЭлементы.Количество() = 0 Тогда
		
		ЭтаФорма.Элементы.ГруппаПодбор.Видимость = Ложь;
		
		// Добавление реквизитов.
		МассивТипаБулево = Новый Массив;
		МассивТипаБулево.Добавить(Тип("Булево"));
		ОписаниеТипаБулево = Новый ОписаниеТипов(МассивТипаБулево);
		
		МассивРеквизитов = Новый Массив;
		
		МассивТипаДС = Новый Массив;
		МассивТипаДС.Добавить(Тип("ДинамическийСписок"));
		ОписаниеТипаДС = Новый ОписаниеТипов(МассивТипаДС);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("РеквизитСписокПодбор", ОписаниеТипаДС, , "Список"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗапрашиватьКоличество", ОписаниеТипаБулево, "", "Количество"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗапрашиватьЦену", ОписаниеТипаБулево, "", "Цена"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗапрашиватьХарактеристику", ОписаниеТипаБулево, "", "Характеристика"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗапрашиватьСерию", ОписаниеТипаБулево, "", "Серия"));
		
		Если ПоказыватьЦены Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("РеквизитПрейскурант", Новый ОписаниеТипов("СправочникСсылка.Прейскуранты"), "", "Прейскурант"));
		КонецЕсли;
		
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		
		Если ПоказыватьЦены Тогда
			ОтображатьПрейскурант = Истина;
			Попытка
				ОбъектФормы = ЭтаФорма.Объект;
			Исключение
				ДатаЗначение = НачалоДня(ТекущаяДата());
				РеквизитПрейскурант = УправлениеНастройками.ПолучитьПараметрУчетнойПолитикиФилиала("ОсновнойПрейскурант");
			КонецПопытки;
			
			Если ОбъектФормы <> Неопределено Тогда
				
				Если ОбъектФормы.Свойство("Прейскурант") И ЗначениеЗаполнено(ОбъектФормы.Прейскурант) Тогда
				    РеквизитПрейскурант = ОбъектФормы.Прейскурант;
				Иначе
					ИмяФилиал = ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов();
					Если ОбъектФормы.Свойство(ИмяФилиал) И ЗначениеЗаполнено(ОбъектФормы[ИмяФилиал]) Тогда
						ФилиалОтбор = ОбъектФормы[ИмяФилиал];
					Иначе 
						ФилиалОтбор = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();			
					КонецЕсли; 
					РеквизитПрейскурант = УправлениеНастройками.ПолучитьПараметрУчетнойПолитикиФилиала("ОсновнойПрейскурант", ФилиалОтбор); 
				КонецЕсли; 
				
				Если ОбъектФормы.Свойство("Дата") И ЗначениеЗаполнено(ОбъектФормы.Дата) Тогда
				    ДатаЗначение = ОбъектФормы.Дата;
				Иначе 
					ДатаЗначение = НачалоДня(ТекущаяДата());
				КонецЕсли; 
				
				Если ОбъектФормы.Свойство("Прейскурант") Тогда 
					ОтображатьПрейскурант = Ложь;
				КонецЕсли;
				
				ЭтаФорма.РеквизитПрейскурант = РеквизитПрейскурант;
			КонецЕсли;
		КонецЕсли;
		
		реквСписок = ЭтаФорма["РеквизитСписокПодбор"];
		реквСписок.ОсновнаяТаблица = "Справочник.Номенклатура";
		
		Если ПоказыватьЦены Тогда
			реквСписок.ПроизвольныйЗапрос = Истина;
			реквСписок.ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СправочникНоменклатура.Ссылка,
			|	СправочникНоменклатура.Наименование,
			|	СправочникНоменклатура.Артикул,
			|	СправочникНоменклатура.ВидНоменклатуры,
			|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|			ВЫБОР
			|				КОГДА &ТабЧастьОтбораПоЕИ = ""Работы""
			|					ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
			|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
			|			КОНЕЦ КАК ЕдиницаИзмерения,
			|			МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
			|		ИЗ
			|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДок, Прейскурант = &Прейскурант) КАК ЦеныНоменклатурыСрезПоследних
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЦеныНоменклатурыСрезПоследних.Номенклатура,
			|			ВЫБОР
			|				КОГДА &ТабЧастьОтбораПоЕИ = ""Работы""
			|					ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
			|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
			|			КОНЕЦ) КАК ЦеныНоменклатуры
			|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатуры.Номенклатура
			|			И (ВЫБОР
			|				КОГДА &ТабЧастьОтбораПоЕИ = ""Работы""
			|					ТОГДА ИСТИНА
			|				КОГДА &ТабЧастьОтбораПоЕИ = ""Материалы""
			|					ТОГДА СправочникНоменклатура.ЕдиницаХраненияОстатков = ЦеныНоменклатуры.ЕдиницаИзмерения
			|				КОГДА &ТабЧастьОтбораПоЕИ = ""Товары""
			|					ТОГДА ВЫБОР
			|							КОГДА СправочникНоменклатура.ЕдиницаТоваров <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
			|								ТОГДА СправочникНоменклатура.ЕдиницаТоваров
			|							ИНАЧЕ СправочникНоменклатура.ЕдиницаХраненияОстатков
			|						КОНЕЦ = ЦеныНоменклатуры.ЕдиницаИзмерения
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)";
			реквСписок.Параметры.УстановитьЗначениеПараметра("ДатаДок",ДатаЗначение);
			реквСписок.Параметры.УстановитьЗначениеПараметра("Прейскурант",РеквизитПрейскурант);
		
			реквСписок.Параметры.УстановитьЗначениеПараметра("ТабЧастьОтбораПоЕИ","");
		КонецЕсли;
		
		ОтборПометкаУдаления = реквСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПометкаУдаления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
		ОтборПометкаУдаления.ПравоеЗначение = Ложь;
		ОтборПометкаУдаления.Использование = Истина;
		
		ОтборПометкаУдаления = реквСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПометкаУдаления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Архив");
		ОтборПометкаУдаления.ПравоеЗначение = Ложь;
		ОтборПометкаУдаления.Использование = Истина;
		
		// Добавление элементов.
		
		Попытка
			ТипОбъектаФормы = ТипЗнч(ЭтаФорма.Объект.Ссылка);
		Исключение
			ТипОбъектаФормы = Неопределено;
		КонецПопытки;
		
		списокНоменклатуры = ЭтаФорма.Элементы.Добавить("СписокПодбор", Тип("ТаблицаФормы"));
		списокНоменклатуры.ПутьКДанным = "РеквизитСписокПодбор";
		списокНоменклатуры.РежимВыбора = Истина;
		списокНоменклатуры.УстановитьДействие("ВыборЗначения", "Подключаемый_ВыборПодбор");
		
		списокНоменклатуры.ИзменятьПорядокСтрок = Ложь;
		списокНоменклатуры.ИзменятьСоставСтрок	= Ложь;
		списокНоменклатуры.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		
		ЭтаФорма.Элементы.Переместить(списокНоменклатуры, ЭтаФорма.Элементы.ГруппаПодбор);
		
		новКолонка = ЭтаФорма.Элементы.Добавить("КолонкаНаименование", тип("ПолеФормы"), списокНоменклатуры);
		новКолонка.ПутьКДанным = "РеквизитСписокПодбор.Наименование";
		новКолонка.Ширина = 10;
		
		новКолонка = ЭтаФорма.Элементы.Добавить("КолонкаАртикул", тип("ПолеФормы"), списокНоменклатуры);
		новКолонка.ПутьКДанным = "РеквизитСписокПодбор.Артикул";
		новКолонка.Ширина = 6;
		ПоказыватьАртикул = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоказыватьАртикул" , ТекущаяДата());
		новКолонка.Видимость = ПоказыватьАртикул;
		
		Если ПоказыватьЦены Тогда
			новКолонка = ЭтаФорма.Элементы.Добавить("КолонкаЦена", тип("ПолеФормы"), списокНоменклатуры);
			новКолонка.ПутьКДанным = "РеквизитСписокПодбор.Цена";
			новКолонка.Ширина = 7;
		КонецЕсли;
		
		// Добавление флажков.
		рамкаНастроек = ЭтаФорма.Элементы.Добавить("РамкаЗапрашивать", Тип("ГруппаФормы"), ЭтаФорма.Элементы.ГруппаПодбор);
		рамкаНастроек.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		рамкаНастроек.Заголовок = "Запрашивать";
		рамкаНастроек.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
		рамкаНастроек.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		рамкаНастроек.РастягиватьПоГоризонтали = Истина;
		
		рамкаНастроекГор = ЭтаФорма.Элементы.Добавить("РамкаЗапрашиватьГор", Тип("ГруппаФормы"), ЭтаФорма.Элементы.ГруппаПодбор);
		рамкаНастроекГор.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		рамкаНастроекГор.Заголовок = "";
		рамкаНастроекГор.Отображение = ОтображениеОбычнойГруппы.Нет;
		рамкаНастроекГор.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		рамкаНастроекГор.РастягиватьПоГоризонтали = Истина;
		рамкаНастроекГор.ОтображатьЗаголовок = Ложь;
		ЭтаФорма.Элементы.Переместить(рамкаНастроекГор, рамкаНастроек);

		рамкаНастроекВерт = ЭтаФорма.Элементы.Добавить("РамкаЗапрашиватьВерт", Тип("ГруппаФормы"), ЭтаФорма.Элементы.ГруппаПодбор);
		рамкаНастроекВерт.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		рамкаНастроекВерт.Заголовок = "";
		рамкаНастроекВерт.Отображение = ОтображениеОбычнойГруппы.Нет;
		рамкаНастроекВерт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		рамкаНастроекВерт.РастягиватьПоГоризонтали = Истина;
		рамкаНастроекВерт.ОтображатьЗаголовок = Ложь;
		ЭтаФорма.Элементы.Переместить(рамкаНастроекВерт, рамкаНастроек);
		
		Если  ТипОбъектаФормы <> Тип("ДокументСсылка.Заявка")
			И ТипОбъектаФормы <> Тип("ДокументСсылка.ЛистОжидания")
			И ТипОбъектаФормы <> Тип("СправочникСсылка.ВидыПолисов")
		Тогда
			флКоличество = ЭтаФорма.Элементы.Добавить("ПолеЗапрашиватьКоличество", Тип("ПолеФормы"));
			флКоличество.Вид = ВидПоляФормы.ПолеФлажка;
			флКоличество.ПутьКДанным = "ЗапрашиватьКоличество";
			флКоличество.Заголовок	 = "Количество";
			флКоличество.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеПодбораПриИзменении");
			флКоличество.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭтаФорма.Элементы.Переместить(флКоличество, рамкаНастроекГор);
			
			флЦена = ЭтаФорма.Элементы.Добавить("ПолеЗапрашиватьЦену", Тип("ПолеФормы"));
			флЦена.Вид = ВидПоляФормы.ПолеФлажка;
			флЦена.ПутьКДанным	= "ЗапрашиватьЦену";
			флЦена.Заголовок	= "Цена";
			флЦена.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеПодбораПриИзменении");
			флЦена.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭтаФорма.Элементы.Переместить(флЦена, рамкаНастроекГор);
			
			флХарактеристика = ЭтаФорма.Элементы.Добавить("ПолеЗапрашиватьХарактеристику", Тип("ПолеФормы"));
			флХарактеристика.Вид = ВидПоляФормы.ПолеФлажка;
			флХарактеристика.ПутьКДанным = "ЗапрашиватьХарактеристику";
			флХарактеристика.Заголовок	 = "Характеристика";
			флХарактеристика.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеПодбораПриИзменении");
			флХарактеристика.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭтаФорма.Элементы.Переместить(флХарактеристика, рамкаНастроекВерт);

			флСерия = ЭтаФорма.Элементы.Добавить("ПолеЗапрашиватьСерию", Тип("ПолеФормы"));
			флСерия.Вид = ВидПоляФормы.ПолеФлажка;
			флСерия.ПутьКДанным = "ЗапрашиватьСерию";
			флСерия.Заголовок	 = "Серия";
			флСерия.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеПодбораПриИзменении");
			флСерия.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭтаФорма.Элементы.Переместить(флСерия, рамкаНастроекВерт);
			
		КонецЕсли;
		
		// Добавление элемента формы для прейскуранта подбора
		Если ПоказыватьЦены Тогда
			Если ОтображатьПрейскурант Тогда 
				Прейскурант = ЭтаФорма.Элементы.Добавить("ПолеПрейскурант", Тип("ПолеФормы"));
				Прейскурант.Вид = ВидПоляФормы.ПолеВвода;
				Прейскурант.ПутьКДанным = "РеквизитПрейскурант";
				Прейскурант.УстановитьДействие("ПриИзменении", "Подключаемый_ПрейскурантПодборПриИзменении");
				ЭтаФорма.Элементы.Переместить(Прейскурант, ЭтаФорма.Элементы.ГруппаПодбор);
			КонецЕсли; 
		КонецЕсли;
		
		// Применение отбора по виду номенклатуры для случаев инициализации отбора при создании формы
		Если ИмяТЧ <> Неопределено И ИмяВидаНом <> Неопределено Тогда
			ОбновитьОтборПодбора(ЭтаФорма.РеквизитСписокПодбор, ИмяТЧ, ИмяВидаНом, ИмяВидаНом2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Обновляет отбор в подборе при смене активной табличной части.
//
// Параметры:
//  РеквизитСписокПодбор - РеквизитФормы	 - реквизит динамического списка подбора.
//  ИмяТЧ				 - Строка	 - имя табличной части.
//  ИмяВидаНом			 - Строка	 - вид номенклатуры.
//  ИмяВидаНом2			 - Строка	 - вид номенклатуры.
//
Процедура ОбновитьОтборПодбора(РеквизитСписокПодбор, ИмяТЧ, ИмяВидаНом, ИмяВидаНом2 = Неопределено) Экспорт
	
	// Удаляем переменные отборы списка, устанавливаемые программно
	РаботаСФормамиСервер.СнятьОтборСписка("ВидНоменклатуры", РеквизитСписокПодбор);		
	
	Если ИмяВидаНом2 <> Неопределено Тогда
		СписокНом = Новый СписокЗначений;
		СписокНом.Добавить(ИмяВидаНом);
		СписокНом.Добавить(ИмяВидаНом2);
		РаботаСФормамиСервер.УстановитьОтборПодбора(СписокНом, РеквизитСписокПодбор);
	Иначе
		РаботаСФормамиСервер.УстановитьОтборПодбора(ИмяВидаНом, РеквизитСписокПодбор);
	КонецЕсли;
	
	Если ИмяТЧ <> Неопределено Тогда
		ПараметрыПодбора = РеквизитСписокПодбор.Параметры;
		Если ПараметрыПодбора.Элементы.Найти("ТабЧастьОтбораПоЕИ") <> Неопределено Тогда
			ПараметрыПодбора.УстановитьЗначениеПараметра("ТабЧастьОтбораПоЕИ",ИмяТЧ);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры	

// Устанавливает отбор вида номенклатуры в панели побора на форме.
//
// Параметры:
//  ИмяТипаНоменклатуры	 - Строка			 - вид номенклатуры строкой или списком со строками имен значений перечисления .
//  ДинамическийСписок	 - ДинамическийСписок	 - динамический список подбора.
//
Процедура УстановитьОтборПодбора(ИмяТипаНоменклатуры, ДинамическийСписок) Экспорт
	
	Если ИмяТипаНоменклатуры = "" Тогда
		РаботаСФормамиСервер.СнятьОтборСписка("ВидНоменклатуры", ДинамическийСписок);		
	Иначе
		ВидыНом = ДопСерверныеФункцииПовтИсп.ПолучитьСоответствиеДляПеречисления("ВидыНоменклатуры");
		Если ТипЗнч(ИмяТипаНоменклатуры) = Тип("Строка") Тогда
			ОтборВидНоменклатуры = ВидыНом.Получить(ИмяТипаНоменклатуры);
		ИначеЕсли ТипЗнч(ИмяТипаНоменклатуры) = Тип("СписокЗначений") Тогда
			ОтборВидНоменклатуры = Новый СписокЗначений;
			Для Каждого ЭлементСписка Из ИмяТипаНоменклатуры Цикл
				ОтборВидНоменклатуры.Добавить(ВидыНом.Получить(ЭлементСписка.Значение));
			КонецЦикла;		
		КонецЕсли;	
		
		РаботаСФормамиСервер.УстановитьОтборСписка("ВидНоменклатуры", ОтборВидНоменклатуры, ДинамическийСписок);
		
	КонецЕсли;	
	
КонецПроцедуры

// Сохраняет настройки флагов подбора номенклатуры
//
// Параметры:
//  ЗапрашиватьКоличество		 - Булево	 - значение флага "Запрашивать количество" в подборе.
//  ЗапрашиватьЦену				 - Булево	 - значение флага "Запрашивать цену" в подборе.
//  ЗапрашиватьХарактеристику	 - Булево	 - значение флага "Запрашивать характеристику" в подборе.
//  ЗапрашиватьСерию			 - Булево	 - значение флага "Запрашивать серию" в подборе.
//  Объект						 - Метаданные	 - метаданные объекта, для которого актуальна панель подбора.
//
Процедура СохранитьНастройкиПодбора(ЗапрашиватьКоличество, ЗапрашиватьЦену, ЗапрашиватьХарактеристику, ЗапрашиватьСерию, Объект) Экспорт
	
	СтруктураНастроекПодбора = Новый Структура;
		
	СтруктураНастроекПодбора.Вставить("ЗапрашиватьКоличество", ЗапрашиватьКоличество);
	СтруктураНастроекПодбора.Вставить("ЗапрашиватьЦену", ЗапрашиватьЦену);
	СтруктураНастроекПодбора.Вставить("ЗапрашиватьХарактеристику", ЗапрашиватьХарактеристику);
	СтруктураНастроекПодбора.Вставить("ЗапрашиватьСерию", ЗапрашиватьСерию);
	
	ХранилищеВариантовОтчетов.Сохранить(Объект, "СтруктураНастроекПодбора", СтруктураНастроекПодбора);
	
КонецПроцедуры

// Возвращает настройки флагов подбора номенклатуры
//
// Параметры:
//  Объект	 - Метаданные	 - метаданные объекта, для которого актуальна панель подбора.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ЗагрузитьНастройкиПодбора(Объект) Экспорт
	
	Возврат ХранилищеВариантовОтчетов.Загрузить(Объект,  "СтруктураНастроекПодбора");

КонецФункции

////////////////////////////////////////////////////////////////
// 	 ПРОЧЕЕ

// Проверяет наличие в реквизитах тч полей количества, цены и характеристики.
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка	 - Проверяемый документ.
//  ИмяТЧ			 - Строка			 - Имя табличной части.
// 
// Возвращаемое значение:
//   - Стурктура.
//
Функция ФлагиНаличияРеквизитовТЧ_Номенклатуры(СсылкаНаОбъект, ИмяТЧ) Экспорт 
	
	Флаги = Новый Структура("Количество, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", Ложь, Ложь, Ложь, Ложь);
	
	МетаданныеТЧВызвавшейПодбор = СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТЧ);
	
	Если МетаданныеТЧВызвавшейПодбор <> Неопределено Тогда
		МетаданныеРеквизитовТЧВызвавшейПодбор = МетаданныеТЧВызвавшейПодбор.Реквизиты;
		Флаги.Вставить("Количество", МетаданныеРеквизитовТЧВызвавшейПодбор.Найти("Количество")<>Неопределено);
		Флаги.Вставить("Цена", МетаданныеРеквизитовТЧВызвавшейПодбор.Найти("Цена")<>Неопределено);
		Флаги.Вставить("ХарактеристикаНоменклатуры", МетаданныеРеквизитовТЧВызвавшейПодбор.Найти("ХарактеристикаНоменклатуры")<>Неопределено);

		Флаги.Вставить("СерияНоменклатуры", МетаданныеРеквизитовТЧВызвавшейПодбор.Найти("СерияНоменклатуры")<>Неопределено);
	КонецЕсли;
	
	Возврат Флаги;
	
КонецФункции

// Возвращает Истина, если передана номенклатура набора.
//
// Параметры:
//  Ном	 - СправочникСсылка.Номенклатура - Номенклатура.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоНабор(Ном) Экспорт
	Возврат Ном.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор;
КонецФункции	

// Возвращает Истина, если передана номенклатура услуги.
//
// Параметры:
//  Ном	 - СправочникСсылка.Номенклатура - Номенклатура.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоУслуга(Ном) Экспорт
	Возврат Ном.ВидНоменклатуры	= Перечисления.ВидыНоменклатуры.Услуга;
КонецФункции

// Возвращает Истина, если передана номенклатура материала.
//
// Параметры:
//  Ном	 - СправочникСсылка.Номенклатура - Номенклатура.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоМатериал(Ном) Экспорт
	Возврат Ном.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал;
КонецФункции	

// Вычисляет аналитические параметры строки поиска клиента в базе.
//
// Параметры:
//  Текст	 - Строка	 - строка поиска клиента.
// 
// Возвращаемое значение:
//  Структура - содержит:
//  * ЕстьБуквы - Булево
//  * ЕстьЦифры - Булево
//  * ИспользоватьАвтоПодборКлиентовПоИмениИФамилии - Булево.
//
Функция ПараметрыСтрокиПоискаКлиента(Знач Текст) Экспорт
	
	ПараметрыСтрокиПоиска = Новый Структура;
	
	ЕстьБуквы = Ложь;
	ЕстьЦифры = Ложь;
	ТекстПроверкиБуквыЦифры = СтрЗаменить(Текст, " ","");
	
	Для Сч = 1 По СтрДлина(ТекстПроверкиБуквыЦифры) Цикл
		Символ = Сред(ТекстПроверкиБуквыЦифры, Сч, 1);
		
		ЕстьБуквы = ЕстьБуквы Или СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Символ) Или СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Символ);
		ЕстьЦифры = ЕстьЦифры Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ);
	КонецЦикла;
	
	ПараметрыСтрокиПоиска.Вставить("ЕстьБуквы", ЕстьБуквы);
	ПараметрыСтрокиПоиска.Вставить("ЕстьЦифры", ЕстьЦифры);
	ПараметрыСтрокиПоиска.Вставить("ЭтоСНИЛС",	Не ЕстьБуквы И ЕстьЦифры И МедицинскоеСтрахованиеКлиентСервер.ЭтоСНИЛС(ТекстПроверкиБуквыЦифры));
	ПараметрыСтрокиПоиска.Вставить("ИспользоватьАвтоПодборКлиентовПоИмениИФамилии", УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьАвтоПодборКлиентовПоИмениИФамилии"));
	
	Возврат ПараметрыСтрокиПоиска;
	
КонецФункции

// Устанавливает видимость кнопок загрузки данных из ТСД в зависимости от наличия подключенного терминала.
//
// Параметры:
//  Кнопка1	 - КнопкаФормы	 - кнопка команды работы с ТСД на форме.
//  Кнопка2	 - КнопкаФормы	 - кнопка команды работы с ТСД на форме.
//  Кнопка3	 - КнопкаФормы	 - кнопка команды работы с ТСД на форме.
//
Процедура УстановитьВидимостьКнопокЗагрузитьИзТСД(Кнопка1, Кнопка2 = Неопределено, Кнопка3 = Неопределено) Экспорт
	
	ТипПО = "ТерминалСбораДанных";
	СписокТСД = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипПО);
	
	Кнопка1.Видимость = СписокТСД.Количество() <> 0;
	Если Кнопка2 <> Неопределено Тогда
		Кнопка2.Видимость = Кнопка1.Видимость;
	КонецЕсли;
	Если Кнопка3 <> Неопределено Тогда
		Кнопка3.Видимость = Кнопка1.Видимость;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет настройки формы в хранилище настроек..
//
// Параметры:
//  НастройкиФормы		 - Структура - имена и значения настроек.
//  КлючОбъектаНастроек	 - Строка	 - ключ объекта.
//
Процедура СохранитьНастройкиФормы(НастройкиФормы, КлючОбъектаНастроек) Экспорт
	
	Для Каждого Настройка Из НастройкиФормы Цикл
		ХранилищеПользовательскихНастроекОтчетов.Сохранить(КлючОбъектаНастроек, Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет одну настройку формы в хранилище настроек.
//
// Параметры:
//  КлючОбъектаНастроек	 - Строка	 - ключ объекта.
//  КлючНастройки		 - Строка	 - имя настройки.
//  Значение			 - Произвольный	 - значение настройки сериализуемого типа.
//
Процедура СохранитьНастройкуФормы(КлючОбъектаНастроек, КлючНастройки, Значение) Экспорт
	
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(КлючОбъектаНастроек, КлючНастройки, Значение);
	
КонецПроцедуры

// Удаляет одну настройку формы в хранилище настроек.
//
// Параметры:
//  КлючОбъектаНастроек	 - Строка	 - ключ объекта.
//  КлючНастройки		 - Строка	 - имя настройки.
//
Процедура УдалитьНастройкуФормы(КлючОбъектаНастроек, КлючНастройки) Экспорт
	
	ХранилищеПользовательскихНастроекОтчетов.Удалить(КлючОбъектаНастроек, КлючНастройки, ИмяПользователя());
	
КонецПроцедуры

// Получает одну настройку формы в хранилище настроек. Если не сохранена,то возвращает значение по умолчанию.
//
// Параметры:
//  КлючОбъектаНастроек	 - Строка		 - ключ объекта.
//  КлючНастройки		 - Строка		 - имя настройки.
//  ЗначениеПоУмолчанию	 - Произвольный	 - значение настройки сериализуемого типа.
// 
// Возвращаемое значение:
//  Произвольный.
//
Функция ПолучитьНастройкуФормы(КлючОбъектаНастроек, КлючНастройки, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Значение = ХранилищеПользовательскихНастроекОтчетов.Загрузить(КлючОбъектаНастроек, КлючНастройки);
	Если Значение = Неопределено Тогда
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Создает на форме программно размещаемые команды.
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - форма.
//  ОписанияКоманд	 - Строкутура					 - описание создаваемых команд
//  ГруппаФормы		 - ГруппаФормы					 - группа на форме для добавления кнопок.
//
Процедура ДобавитьДополнительныеКомандыНаФорму(ЭтаФорма, ОписанияКоманд, ГруппаФормы) Экспорт
	
	Команды = ЭтаФорма.Команды;
	Элементы = ЭтаФорма.Элементы;
	
	Для Каждого СтруктурыОписания Из ОписанияКоманд Цикл
		
		НоваяКоманда = Команды.Добавить(СтруктурыОписания.Команда.Имя);
		ЗаполнитьЗначенияСвойств(НоваяКоманда, СтруктурыОписания.Команда);
		
		НовыйЭлемент = Элементы.Добавить(
					СтруктурыОписания.ЭлементФормы.Имя,
					СтруктурыОписания.ЭлементФормы.ТипЭлемента,
					Элементы[ГруппаФормы]);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктурыОписания.ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирирует описание универсальной подключаемой команды формы для дальнейшего добавления в форму.
//
// Параметры:
//  Обработчик	 - Строка		  - полный путь к экспортной процедуре-обработчику действия
//  Заголовок	 - Строка		  - заголовок кнопки
//  Подсказка	 - Строка		  - подсказка кнопки
//  Картинка	 - Картинка		  - картинка кнопки
//  ВидКнопки	 - ВидКнопкиФормы - вид кнопки формы.
//  Действие	 - Строка		  - Обработчик подключаемой команды на форме
// 
// Возвращаемое значение:
//	Структура.
//
Функция ОписаниеУниверсальнойПодключаемойКомандыФормы(Обработчик, Заголовок, Подсказка = Неопределено, Картинка = Неопределено, Знач ВидКнопки = Неопределено, Знач Действие = Неопределено, СочетаниеКлавиш = Неопределено) Экспорт
	
	// Шифруем обработчик в идентификатор будущей команды
	Имя = "Подключаемый_" + СтрЗаменить(Обработчик, ".", "_");
	
	Если Действие = Неопределено Тогда
		Действие = "Подключаемый_ДополнительнаяКомандаФормы";
	КонецЕсли;
	
	Если ВидКнопки = Неопределено Тогда
		ВидКнопки = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура("Имя, Заголовок, Действие, Подсказка, Картинка, СочетаниеКлавиш",
										Имя, Заголовок, Действие, Подсказка, Картинка, СочетаниеКлавиш);
		
	СтруктураЭлементаФормы = Новый Структура("Имя, ТипЭлемента, Вид, ИмяКоманды, Отображение",
											  Имя, Тип("КнопкаФормы"), ВидКнопки, Имя, ОтображениеКнопки.КартинкаИТекст);
	
	Если ВидКнопки = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.15.0") >= 0 Тогда
			Выполнить("СтруктураЭлементаФормы.Вставить(""ПоложениеВКоманднойПанели"", ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю)");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Команда, ЭлементФормы", СтруктураКоманды, СтруктураЭлементаФормы);
	
КонецФункции

// Обработчик события ОбработкаПолученияДанныхВыбора для подключения через подписку на события для установки отбора
//  по реквизиту Архив.
//
// Параметры:
//  Источник			 - Строка	 - СправочникМенеджер.
//  ДанныеВыбора		 - СписокЗначений	 - Данные выбора.
//  Параметры			 - Структура		 - параметры формирования.
//  СтандартнаяОбработка - Булево			 - признак продолжения стандартного формирования.
//
Процедура СправочникиОбработкаПолученияДанныхВыбора_АрхивОбработкаПолученияДанныхВыбора(Источник, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ВыборГруппИЭлементов")
		И Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Архив") Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.ПустаяСсылка(), "Архив") Тогда
			Параметры.Отбор.Вставить("Архив",Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОказаниеУслуг

Процедура ФормаДокументаПередЗаписьюНаСервере(ЭтаФорма, ДокументОбъект) Экспорт
	РаботаСФормамиПереопределяемый.ФормаДокументаПередЗаписьюНаСервере(ЭтаФорма, ДокументОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти