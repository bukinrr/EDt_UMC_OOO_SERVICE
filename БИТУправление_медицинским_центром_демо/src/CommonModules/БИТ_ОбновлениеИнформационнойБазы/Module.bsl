#Область ПрограммныйИнтерфейс

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ВыполнитьОбновление() Экспорт
	
	// Подготовка к выводу формы описания обновлений.
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат Ложь;
	#КонецЕсли
	МакетОписаниеОбновлений    = Обработки.ОбновлениеИнформационнойБазы.ПолучитьМакет("ОписаниеОбновлений");
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент;
	
	// Обновление информационной базы.
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить() = "");
	ТекущаяВерсияИБ    = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	
	ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь;
	
	// Вызов функций заполнения данных для пустой информационной базы
	Если ПервыйЗапуск Тогда
		
		Если РольДоступна("ПолныеПрава") Или ИмяПользователя()="" Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен первый запуск информационной базы. Выполняется начальное заполнение'"));
			ВыполнитьДействияПриПервомЗапуске();
			
			Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // После заполнения пустой ИБ установим последний номер версии
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Первый запуск программы должен производиться пользователем с ролью ""Полные права""'"));
			#Если ТолстыйКлиентУправляемоеПриложение Или ТолстыйКлиентОбычноеПриложение Тогда
			ЗавершитьРаботуСистемы(Ложь);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	ВыполненныеОбновления = Новый Структура("РИБПравила, ВариантыОтчетов, БиблиотекаТО, ИдентификаторыМетаданных", Ложь, Ложь, Ложь, Ложь);
	
	СтандартноеОбновление("1.0.14.1",	"1014"	 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("1.0.15.1",	"1015"	 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("1.0.16.1",	"1016"	 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.0.55";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда  
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		ЗаполнитьПредопределенныеВидыСобытияАвтоСообщений();
		
		ОборудованиеРегистрВСправочник();
				
		Если Не РелизБолееРанний(Метаданные.Версия, "2.0.9.1") Тогда  
			ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеПредустановленныхЭлементов"));
		КонецЕсли;
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
				
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.0.66";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда  
		
		Перенос_Скидок();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		ОборудованиеРегистрВСправочник();
		
		ЗаполнитьКонфигурированиеЯчеекКалендаря();
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидПредставленияФИО");
		СтруктураПараметров.Вставить("ОсновнойЦветНерабочегоВремени");
		СтруктураПараметров.Вставить("ВысотаСтрокиЖурналаЗаписи");
		СтруктураПараметров.Вставить("ПоУмолчаниюРучноеРедактированиеСкидок");
		СтруктураПараметров.Вставить("УменьшатьВыработкуПриВозврате");
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		// Выполняется вне основной транзакции. Преобразование не критично, если не нужен перерасчет скидок старых документов
		ЗаполнитьКлючСтрокиОУТоварыМатериалы();
				
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.0.68";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда  
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется " + СтрСообщения + Символы.ПС);
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РежимЗаписиНаПрием");
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
				
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.1.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда  
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПоУмолчаниюРучноеРедактированиеСкидок");
		СтруктураПараметров.Вставить("УменьшатьВыработкуПриВозврате");
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
		ЗаполнитьВидОперацииОказанияУслуг();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("201", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	СтандартноеОбновление("2.0.2.1",	"202", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.3.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);

		ПеренестиШаблоныСпециализацийВРегистрСпециализацииШаблоновОсмотра();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("203", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.4.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВестиУчетМестонахожденияМедкарт");
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("204", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.4.2";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);

		ПеренастроитьОтображениеКалендаряТолькоУслуги();
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВестиУчетМестонахожденияМедкарт");
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	                                               
	НоваяВерсияИБ ="2.0.5.1";                      
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);

		ВыполнитьОбновлениеДо2_0_5_1();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		ВывестиОписаниеИзменений("205", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	СтандартноеОбновление("2.0.6.1",	"206", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.7.1",	"207", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.8.1";                      
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);

		СпрКИ = Справочники.ВидыКонтактнойИнформации;
		УстановитьПараметрыВидаКонтаткнойИнформации(СпрКИ.ТелефонКонтрагента, Перечисления.ТипыКонтактнойИнформации.Телефон);
		УстановитьПараметрыВидаКонтаткнойИнформации(СпрКИ.ТелефонОрганизации, Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		ВывестиОписаниеИзменений("208", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.8.8";                      

	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		УстановитьПризнакРучнойКорректировкиБонусов();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.9.1";                      
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПоУмолчаниюПодборСубъектовВЖурналЗаписиПоСтруктуреОрганизации");
		СтруктураПараметров.Вставить("РазворачиватьДеревоСубъектовРасписанияПриПодбореВЖурналЗаписи");
		СтруктураПараметров.Вставить("РазворачиватьДеревоМоделейРасписанияПриПодбореВЖурналЗаписи");
		СтруктураПараметров.Вставить("ФормироватьЖурналЗаписиБезОтбора");
		
		УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
		                                                          
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
	
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеПредустановленныхЭлементовВычисляемыйБлокДиагноз"));
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеПредустановленныхЭлементовВычисляемыйБлокПланЛечения"));
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		ВывестиОписаниеИзменений("209", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.10.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		// Внетранзакционные действия
		ПерезаполнитьУстановкиГрафиковПодРегистрГрафикиРаботы();
		
		ВывестиОписаниеИзменений("2010", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.11.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИспользуетсяРежимВводаПриемаПоОдномуШаблону");
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		// Выолняется в отдельных порционных транзакциях
		ЗаполнитьТЧШаблоныПриемов();
		ЗаполнитьСответсвиеПараметровHTMLШаблоновПриема();
		
		ВывестиОписаниеИзменений("2011", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.11.4";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется " + СтрСообщения + Символы.ПС);
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеПредустановленныхЭлементовВычисляемыйБлокПланЛечения"));
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;

	СтандартноеОбновление("2.0.12.4",	"2012", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.13.4";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);

		ПерезаполнитьДвиженияИсследований();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	СтандартноеОбновление("2.0.13.7",  "2013",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.14.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		ПроставитьКлючСтрокиДиагнозамПриемов();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		ПерезагрузитьСправочникВредныхФакторов();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2014", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	СтандартноеОбновление("2.0.15.3",	"2015", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.16.1",	"2016", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.17.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		УстановитьПривилегированныйРежим(Истина);
		СоздатьЭталонныеШаблоныЭтикетокЦенников();

		УстановитьФлагБезопасныйРежимВнешнимОбработкам();
		
		ОбновитьСправочникСмен();
		ОбновитьСтарыеГрафики();
		ОбновитьНастройкиВыводаВКалендарь();
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2017", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.17.8";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		ПерезагрузитьСправочникВредныхФакторов();
		
		ЗаполнитьНомерЧекаРКОИнкассации();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2017", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.18.3";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		УстановитьНастройкуПользователей("СоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи", Истина);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2018", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.19.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		ДобавитьМедкарту025уПриказ834н();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2019", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.19.13";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		СохранитьНастройкуНеПоказыватьПомощникПервоначальногоЗаполнения();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
		
	НоваяВерсияИБ ="2.0.20.1";
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления);
		
		ЗаполнитьВидыСобытийВидыСообщений();		
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2020", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
		
	СтандартноеОбновление("2.0.21.1",	"2021", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
	НоваяВерсияИБ ="2.0.21.5";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		// Действия обновления, выполняемые вне транзакции.
		ПереносКлиникиМестонахожденияМедКартВРесурсРегистра();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.

		// Действия обновления, выполняемые в транзакции.
		ОбновитьНасройкиБитФон2_0_21_5();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
		
	СтандартноеОбновление("2.0.22.1",	"2022", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.23.1",	"2023", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.24.1",	"2024", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
	НоваяВерсияИБ ="2.0.25.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		// Действия обновления, выполняемые в транзакции.
		СтруктураПараметров = Новый Структура("ИспользоватьШтрихкодированиеСотрудников", Истина);
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		ВывестиОписаниеИзменений("2025", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
		
	НоваяВерсияИБ ="2.0.25.8";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		// Действия обновления, выполняемые в транзакции.
		
		ПреобразоватьТипУПСписыватьВМинусБулевоВЧисло();
		
		СтруктураПараметров = Новый Структура("ОсновнойВидОплаты", Перечисления.ВидыОплаты.Наличными);
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	СтандартноеОбновление("2.0.26.1",	"2026", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина);
	
	НоваяВерсияИБ ="2.0.26.16";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеПредустановленныхЭлементовВычисляемыйБлокПланЛечения"));
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.26.30";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		ЗаполнитьФилиалМедкарт(); // Выполняется со своими транзакциями вне основной
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
		
	НоваяВерсияИБ ="2.0.27.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		ОграничениеДоступаНаУровнеЗаписейВыполнитьПервоначальноеЗаполнение();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ПерезаписатьШаблоныПриема();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.27.6";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		Справочники.ВидыМедицинскихКарт.ВыполнитьПервоначальноеЗаполнениеПараметровВидовМедкарт();
		ПланыВидовХарактеристик.ПараметрыМедицинскойКарты.ПривестиИменаПараметровКДопустимомуВиду();
		Справочники.СтруктураПрайслистов.ЗаполнитьПустыеПолныеНаименования();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;

	НоваяВерсияИБ ="2.0.27.17";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		ЗаполнитьСостояниеЧековККМОказанийУслуг();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.28.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьОграничениеДоступаНаУровнеЗаписей") Тогда
			ОграничениеДоступаНаУровнеЗаписейВыполнитьПервоначальноеЗаполнение("ВыработкаСотрудников");
		КонецЕсли;
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.29.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		УстановитьПривилегированныйРежим(Истина);
		НастройкиРассылок = РегистрыСведений.НастройкиРассылок.СоздатьНаборЗаписей();
		НастройкиРассылок.Прочитать();
		Если НастройкиРассылок.Количество() = 0 Тогда
			мЗапись = РегистрыСведений.НастройкиРассылок.СоздатьМенеджерЗаписи();
			мЗапись.МаксимальноеУпреждениеОтправкиСМСОператору = 12;
			мЗапись.Записать();
		Иначе
			НастройкиРассылок[0].МаксимальноеУпреждениеОтправкиСМСОператору = 12;
			НастройкиРассылок.Записать();
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	СтандартноеОбновление("2.0.29.2",	"2029", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.30.1",	"2030", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.31.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		Справочники.ШаблоныHTML.ПерезаписатьШаблоны(Новый Структура("ОбновитьСтроковыеЗначенияПараметровШаблона"));
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2031", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	СтандартноеОбновление("2.0.31.3",	      , 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина);
	
	НоваяВерсияИБ ="2.0.32.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ЗаполнитьРеквизитРазмещениеЯчеекКалендаряПланирования();	
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	СтандартноеОбновление("2.0.32.4",	"2032", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	
	НоваяВерсияИБ ="2.0.32.13";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ОбновитьБулевыРеквизитыВидовСообщенийРассылок();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.32.17";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ПланыВидовХарактеристик.ПараметрыHTML.ЗаполнитьФорматныеСтрокиПоУмолчанию();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.32.19";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		Справочники.НоменклатураМедицинскихУслуг.ПроверкаИЗаполнениеДо804н();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.32.23";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		ЗаполнитьФактическогоИсполнителяСобытий();
		
	КонецЕсли;

	НоваяВерсияИБ ="2.0.32.25";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ЗаменитьНеиспользуемыеМакетыМедкарт025и043();
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(
			Справочники.ВидыМедицинскихКарт.ПолучитьМакет("стомПараметрыМедкарты043У"), Истина);
	    ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(
			Справочники.ВидыМедицинскихКарт.ПолучитьМакет("ПараметрыМедкарты025Приказ834н"), Истина);
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;

	НоваяВерсияИБ ="2.0.32.31";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		КонвертироватьАдресаФилиаловКладрДоФиас();
	КонецЕсли;

	НоваяВерсияИБ ="2.0.32.34";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		КомплексныеРасчетыЗаполнитьЦенуСоСкидкой();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;

	НоваяВерсияИБ ="2.0.32.35"; // РИБ.
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ОбновитьКИ_УМЦ2_0_32_35();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.32.42";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.32.43";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ОбновитьКИ_УМЦ2_0_32_43();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.32.45";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;	
	
	НоваяВерсияИБ ="2.0.33.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		ОбновитьПравилаОбменаПланаОбменаСФилиалами(ВыполненныеОбновления.РИБПравила); // Нельзя переносить.
		
		ОбновитьСправочникиИНастройкиРасширеннойЛаборатории();
		ЗаполнитьПолеЗаполненоПараметровЗабора();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.33.2";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		ПерезаполнитьИсториюЗвонков();
		
		// Загрузка шаблона анамнеза жизни с составными фразами реакций на аллергены для лекарственной непереносимости
		Файл = ПолучитьИмяВременногоФайла("xml");
		Справочники.ШаблоныHTML.ПолучитьМакет("ШаблонАнамнезЖизни").Записать(Файл);
		Справочники.ШаблоныHTML.Импортировать(Файл);
		ЗаполнитьПараметрПакетаФразРеакцийНаАллергены();
		
		ОчисткаСделокНеобособленныхКомплексныхРасчетов();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.33.11";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		ЗаполнитьПоле12КИ();
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2033", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.34.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
		Если УчетнаяПолитика.ИспользоватьЭЦП И Не УчетнаяПолитика.ИспользоватьЭлектронныеПодписиЭМК Тогда 
			УправлениеНастройками.УстановитьЗначениеПараметраУчетнойПолитики("ИспользоватьЭлектронныеПодписиЭМК", Истина);
		КонецЕсли;
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.34.2";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ОсновнойМакетОформленияСКД = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойМакетОформленияСКД");
		Если ОсновнойМакетОформленияСКД = "Классический" Тогда
			СтруктураПараметров = Новый Структура("ОсновнойМакетОформленияСКД", "ОформлениеОтчетовКлассический");
			ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
		КонецЕсли;
		
		// Перенос встроенных и пользовательских вариантов отчетов в справочник вариантов.
		Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(Истина, Ложь);
		ОбновитьДанныеВариантовОтчетов();
		ВариантыОтчетов.ПеренестиПользовательскиеИзСтандартногоХранилища();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.34.3";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ЗаполнитьФлагИспользуетсяПрофилейПользователей();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	СтандартноеОбновление("2.0.34.10",	, ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина);
	
	НоваяВерсияИБ ="2.0.34.15";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ЗаполнитьТабличнуюЧастьВредностейПрохожденийМедосмотра();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.

	КонецЕсли;
	
	СтандартноеОбновление("2.0.34.17",	"2034", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина);
	
	НоваяВерсияИБ ="2.0.35.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ОбновитьДанныеВариантовОтчетов();
		
		ПервоначальноеЗаполнениеВопросаАнкетированияNPS();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2035", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.36.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ПереходНаВидыСтавокНДС();
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
	КонецЕсли;
	
	СтандартноеОбновление("2.0.36.5",	"2036", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина);
	
	НоваяВерсияИБ ="2.0.37.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		ОбновитьНаименованиеПредопределенногоРегламентногоЗадания("АктуализацияДополнительныхПризнаковРасписания");
		ОбновитьНаименованиеПредопределенногоРегламентногоЗадания("ОбновитьСправочникиВнешнихЛабораторий");
		ОбновитьНаименованиеПредопределенногоРегламентногоЗадания("ПолучениеРезультатовИзВнешнихЛабораторий");
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2037", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.37.10";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		//// Багфикс. (убран в 2.0.47.9 / 2.0.46.71)
		//Попытка
		//	ГруппаКлиент = Справочники.ЯчейкиКалендаря.Клиент;
		//	ТребуетсяАктуализация = Не ГруппаКлиент.ЭтоГруппа;
		//Исключение
		//	ТребуетсяАктуализация = Истина;
		//КонецПопытки;

		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		//Если ТребуетсяАктуализация Тогда
		//	АктуализироватьПредопределенныеЭлементыЯчеекКалендаряПланирования();
		//КонецЕсли;
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	НоваяВерсияИБ ="2.0.38.1";
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника();
		
		Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьПрофосмотры") Тогда
			УправлениеНастройками.УстановитьЗначениеПараметраУчетнойПолитики("ИспользоватьМедосмотрыСправки", Истина);
		КонецЕсли;
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		ВывестиОписаниеИзменений("2038", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЕсли;
	
	СтандартноеОбновление("2.0.38.2", ,				ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	СтандартноеОбновление("2.0.38.3", ,		 		ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина);
	
	СтандартноеОбновление("2.0.39.7",	"2039", 	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина);
	СтандартноеОбновление("2.0.39.10",	"2039_10",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.39.12",	,			ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина);
	СтандартноеОбновление("2.0.39.14",	"2039_14",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.39.15",	"2039_15",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.39.17",	"2039_17",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	СтандартноеОбновление("2.0.39.19",	"2039_19",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	
	// Дополнительно к 2.0.39.23
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.39.23") Тогда
		ДвоичныеДанныеВыгрузки = Справочники.РазделыМедицинскихКарт.ПолучитьМакет("РазделыМедкарты025у");
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки);
	КонецЕсли;
	СтандартноеОбновление("2.0.39.23",	"2039_23",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	// Дополнительно к 2.0.39.25
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.39.25") Тогда
		ДвоичныеДанныеВыгрузки = Справочники.РазделыМедицинскихКарт.ПолучитьМакет("РазделыМедкарты025у");
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки);
	КонецЕсли;
	СтандартноеОбновление("2.0.39.25",	"2039_25",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.39.27",			 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.39.28") Тогда
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		ПерезагрузитьСправочникВредныхФакторов();
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
	КонецЕсли;
	
	// Дополнительно к 2.0.40.1
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.40.1") Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов.Установить(Истина);
		ВыполнитьПереходНаСерииНоменклатуры();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	СтандартноеОбновление("2.0.40.1",	"2040_1"	 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	СтандартноеОбновление("2.0.40.2",	"2040_2"	 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.41.1") Тогда
		ПервоначальноеЗаполнениеПравилРаспределенияЗатрат();
		ЗаполнитьНоменклатуруВидовСертификатов();
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОсновнаяОбработкаSMSРассылки", ПолучитьОсновнуюОбработкуSMSРассылки());
		СтруктураПараметров.Вставить("ИспользоватьКартыСкидок", ПолучитьИспользованиеКартыСкидок());
		СтруктураПараметров.Вставить("ВестиУчетТорговойДеятельности", Истина);
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
	КонецЕсли;
	СтандартноеОбновление("2.0.41.1",	"2041_1"	 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.41.3") Тогда
		
		ОбновитьПравилаОбменаПланаОбменаСФилиалами(ВыполненныеОбновления.РИБПравила);
		
		УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
		Если УчетнаяПолитика.ОсновнаяСтрана = Справочники.СтраныМира.Россия
			Или Не ЗначениеЗаполнено(УчетнаяПолитика.ОсновнаяСтрана)
		Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ОсновнойВидДУЛ", Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21);
			ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
			УстановитьМаскиНаПредопределенныеДУЛ();
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ОсновнойВидДУЛ", ПолучитьОсновнойДУЛПоСтране(Лев(УчетнаяПолитика.ОсновнаяСтрана.Наименование,5)));
			ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
		КонецЕсли;
	КонецЕсли;
	СтандартноеОбновление("2.0.41.3", "2041_3",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.41.6", "2041_6",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.41.7", "2041_7",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.41.9") Тогда
		СтруктураПараметров = Новый Структура("АвтоподстановкаИмениОтчества", Истина);
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
	КонецЕсли;
	СтандартноеОбновление("2.0.41.9", "2041_9",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, Истина, Истина);
	СтандартноеОбновление("2.0.42.1", "2042",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.42.2", "20422",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.42.3", "20423",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.42.4", "2042_4",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.42.12", "2042_12",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.42.14", "2042_14",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.42.15") Тогда
		ОбновитьНаименованияРегЗаданийПоСинонимам();
		ПерезагрузитьСправочникВредныхФакторов();
	КонецЕсли;
	СтандартноеОбновление("2.0.42.15", "2042_15",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.42.18", "2042_18",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.43.1",  "2043_1",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.43.3",  "2043_3",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.43.4",  "2043_4",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.43.5",  "2043_5",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.44.1",  "2044_1",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.44.4",  "2044_4",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.44.5",  "2044_5",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.44.6",  		   ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, Истина , Истина); // БПО 2.1.2.6 -> 2.1.4.4.
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.45.1") Тогда
		ЭЦП_ЗаполнитьПодписанныйОбъектИПорядок();
	КонецЕсли;
	СтандартноеОбновление("2.0.45.1",	"2045_1",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина); // Обновление ЭП до БСП 3.1.2.
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.45.5") Тогда
		Helix_ПроставитьИспользованиеНастроекОбмена();
	КонецЕсли;
	СтандартноеОбновление("2.0.45.5",	"2045_5",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.1") Тогда
		ПеренестиНастройкиПечатиЭтикеток2_0_46_1();
		ПервоначальноеЗаполнениеUTMПредопределенныхТиповРекламы();
		УправлениеНастройками.УстановитьЗначениеПараметраУчетнойПолитики("СрокЖизниЛида", 9999);
		ПроставитьОбщениеСостоялосьИсходамЗвонка();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.1",	"2046_1",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	СтандартноеОбновление("2.0.46.4",	"2046_4",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	СтандартноеОбновление("2.0.46.5",	"2046_5",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.6") Тогда
		УстановитьПараметрОтображенияСопутствующихТоваров();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.6",	"2046_6",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	СтандартноеОбновление("2.0.46.10",	"2046_10",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	СтандартноеОбновление("2.0.46.14",	"2046_14",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.20") Тогда
		РегламентныеЗаданияСлужебныйВызовСервера.УдалитьУИДИзПараметровРегЗаданий();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.22",	"2046_22",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	СтандартноеОбновление("2.0.46.23",	"2046_23",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.25") Тогда
		// Helix_ОбновитьПараметрыЗабора();
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеПредустановленныхЭлементовВычисляемыйБлокАнамнез_Рецепты"));
	КонецЕсли;
	СтандартноеОбновление("2.0.46.25",	"2046_25",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, Истина, Истина);
	СтандартноеОбновление("2.0.46.26",			 ,	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина, );
	СтандартноеОбновление("2.0.46.28",	"2046_28",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.30") Тогда
		МедосмотрыОбновитьНа29н();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.30",	"2046_30",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.31",	,			ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.33",	"2046_33",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.37",	"2046_37",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.46.38",	"2046_38",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , );
	СтандартноеОбновление("2.0.46.39",	"2046_39",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.40",	"2046_40",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	СтандартноеОбновление("2.0.46.41",	"2046_41",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.43",	"2046_43",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.46",	"2046_46",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	// Сегментация в 2.0.46.49
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.48") Тогда
		ПереносВОтдельныйРегистрИсторииСегментации_Этап1();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.48",, ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.49") Тогда
		ПереносВОтдельныйРегистрИсторииСегментации_Этап2();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.49", "2046_49", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.52", "2046_52", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.53") Тогда
		// Helix_ОбновитьПараметрыЗабора();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.53", "2046_53", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.54", "2046_54", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.46.55", "2046_55", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.57") Тогда
		Справочники.МедицинскиеОтчеты.ЗаполнитьСписокМедицинскихОтчетов();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.57", "2046_57", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.46.58") Тогда
		ОбновитьДанныеОРодственникахВЛисткахНетрудоспособности();
	КонецЕсли;
	СтандартноеОбновление("2.0.46.58", "2046_58", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	СтандартноеОбновление("2.0.46.59", "2046_59", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	СтандартноеОбновление("2.0.46.60", "2046_60", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.1") Тогда
		ПервоначальноеОбновлениеЕГИСЗ();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.1",	"2047_1",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.2") Тогда // 2.0.46.62,63.
		Helix_ОбновитьПараметрыЗабора();
		ОбменФСС.ОбновитьСертификатыКриптографииФСС();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.2",	"2047_2",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина);
	СтандартноеОбновление("2.0.47.3",	"2047_3",	ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, 		, Истина); // 2.0.46.64
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.4") Тогда // 2.0.46.65
		
		ЗаполнитьРеквизитМераКоличестваВКлассификатореЕдиницИзмерения();
		ПривестиКодыЕдиницИзмеренияКОКЕИ();
		
		// Новые параметры учетной политики (для ФФД 1.2)
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИспользоватьПродажуМаркированныхТоваров", Константы.ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов.Получить());
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
		
	КонецЕсли;
	СтандартноеОбновление("2.0.47.4",	"2047_4", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина, Истина); // 2.0.46.65
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.5") Тогда // 2.0.46.66
		ПереименоватьВидКИНомерICQ();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.5", "2047_5", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина, Истина);
	СтандартноеОбновление("2.0.47.6", , ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина, Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.7") Тогда // 2.0.46.68
	КонецЕсли;
	СтандартноеОбновление("2.0.47.7", "2047_7", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.69
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.8") Тогда // 2.0.46.70
		ОчиститьВерсииКлассификаторовМинздрава();
		СитиЛаб_ИнтеграцияСервер.ПервоначальнаяЗагрузкаПараметровЗабора();	
	КонецЕсли;
	СтандартноеОбновление("2.0.47.8", "2047_8", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.70
	СтандартноеОбновление("2.0.47.9", "2047_9", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.71
	СтандартноеОбновление("2.0.47.10", "2047_10", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.72
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.11") Тогда
		ОчиститьВерсииКлассификаторовМинздрава();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.11", "2047_11", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , );
	СтандартноеОбновление("2.0.47.12", "2047_12", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.15") Тогда // 2.0.46.77
		УправлениеНастройками.УстановитьЗначениеПараметраУчетнойПолитики("МедосмотрыПравилоОпределенияНезавершивших", Перечисления.МедосмотрыПравилаОпределенияНеЗавершивших.ЕстьДокументПрохождения);
	КонецЕсли;
	СтандартноеОбновление("2.0.47.15", "2047_15", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.77
	СтандартноеОбновление("2.0.47.16", "2047_16", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.78
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.17") Тогда // 2.0.46.79
		УстановитьТипыРегламентированныхСтандартов();
		ОбновитьСтарыеСобственныеЭЛННаВерхнийРегистр();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.17", "2047_17", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.79
	СтандартноеОбновление("2.0.47.18", "2047_18", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); // 2.0.46.79
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.21") Тогда
		УстановитьПараметрыВидаКонтаткнойИнформации(Справочники.ВидыКонтактнойИнформации.АдресМестаРождения, Перечисления.ТипыКонтактнойИнформации.Адрес);
	КонецЕсли;
	СтандартноеОбновление("2.0.47.21", "2047_21", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , ); 
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.22") Тогда
		ОбменФСС.ОбновитьСертификатыКриптографииФСС();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.22", "2047_22", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , ); 
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.23") Тогда
		ОчиститьВерсиюКлассификатораРолиПриПодписиМедДокументов();
		УправлениеНастройкамиМедицинскогоУчета.УстановитьЗначениеПараметра("ИспользоватьЛистыНетрудоспособности", Истина);
		РегистрДвижениеДенежныхСредств_ОчиститьКассуПлатежныхПоручений();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.23", "2047_23", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина); 
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.47.25") Тогда
		ОчиститьВерсиюКлассификатораРолиПриПодписиВитальныеПараметры();
	КонецЕсли;
	СтандартноеОбновление("2.0.47.25", "2047_25", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , ); 
	СтандартноеОбновление("2.0.47.26", "2047_26", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , ); 
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.1") Тогда
		ПредупреждениеСовместимостиШаблоновWORD_2048();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.1", "2048_1", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина); 
	СтандартноеОбновление("2.0.48.4", "2048_4", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.5") Тогда
		РазархивироватьГруппыНМУ();
		ОчиститьВерсиюКлассификатораНМУ();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.6", "2048_6", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.8") Тогда
		ПроставитьАвтономныеЭТЗапрашиватьПодтверждение();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.8", "2048_8", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.10") Тогда
		// Переход 1С:БПО с редакции 2.1 на 3.1
		ОбновлениеИнформационнойБазыБПО.ОбновитьСправочникДрайвера();
		ОбновлениеИнформационнойБазыБПО.ОбновитьПодключаемоеОборудование();
		ДобавитьВнешниеКомпонентыИзДрайверов();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.10", "2048_10", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина, Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.12") Тогда
		СообщенияРЭМДЗаменитьПутиЭМДНаОтносительные();
		ЗаполнитьРасположениеПодписиУВерсийШаблонов();
		Константы.Сканирование_СтандартныеИменаСканов.ПервоначальнаяИнициализация();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.12", "2048_12", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, Истина, Истина);
	СтандартноеОбновление("2.0.48.13", "2048_13", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.14") Тогда
		ОчиститьВерсиюКлассификатораИнструментальныхИсследований();
		ОчиститьВерсиюКлассификатораРегистрируемыхЭлектроннхеМедДокументов();
		ЕГИСЗ_ОбновитьКэшиОтветов();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.14", "2048_14", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, Истина, Истина);
	СтандартноеОбновление("2.0.48.15", "2048_15", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	// Релиз 2.0.48.16. Проведена унификация имён метаданных в рамках линейки решений "БИТ.Медицина и Красота".
	// 1. Во всей конфигурации в метаданных слово "Салон" заменен на "Филиал". При наличии доработок, на которые это влияет, можно
	// глобальной заменой заменить это слово (без учета регистра) в: свойствах, модулях, элементах форм, ролях, макетах и т.д.
	//
	// 2. В реквизитах документов ОказаниеУслуг, Заявка, ЛистОжидания, в ресурсах регистра УчетнаяПолитика заменены идентификаторы "Мастер" на "Сотрудник".
	// По причине частого (около 800) использования слова "Мастер" в используемых частях стандатрных библиотек 1С, при влиянии этого изменения на доработки нужно,
	// выполнить замену в доработках без использования глобальной замены, т.е. вручную.
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.16") Тогда
		АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816();
		ПеренестиПодключаемоеОборудованиеВЭквайринговыхТерминалахИзРеквизитаВТЧ();
		ОбновитьРасположенияПодписейHTMLШаблонов();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.16", "2048_16", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.17") Тогда
		ЗаполнениеЛицензииМедицинскойДеятельности();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.17", "2048_17", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.18") Тогда
		Справочники.СтепениРодства.СопоставитьСКодамиЕГИСЗ(); // Проставить код типа родственной связи в ФР НСИ ЕГИСЗ.
		УнификацияОтраслевыхИмен_ПользовательскиеВариантыОтчетов();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.18", "2048_18", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.20") Тогда
		ОчиститьВерсиюКлассификатораЛабораторныхТестов();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.20", "2048_20", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.21") Тогда
		УнификацияОтраслевыхИмен_НазначениеКИ();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.21", "2048_21", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.48.22", "2048_22", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.24") Тогда
		Справочники.ПричиныНетрудоспособности.ПерезаполнитьКлассификатор();
		Справочники.ДополнительныеКодыПричинНетрудоспособности.ПерезаполнитьКлассификатор();
		ЗаполнитьПараметрИспользованияЭлектронныхПодписейЭМК();
		ОчиститьВерсиюКлассификатораНМУ();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.24", "2048_24", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.48.25", "2048_25", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.26") Тогда
		// ОбновитьСтандартыЛечения(); // Теперь обновляется на 2.0.49.20.
		Обновить1СДрайверСШК_COM_на_Native();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.27", "2048_27", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, Истина, Истина);
	СтандартноеОбновление("2.0.48.28", "2048_28", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.48.29", "2048_29", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.48.30", "2048_30", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.31") Тогда
		НоваяНастройкаЗаСчетФирмыВидОплатыИспользуется();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.31", "2048_31", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	СтандартноеОбновление("2.0.48.32", "2048_32", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.33") Тогда
		РегистрыСведений.АдресныеОбъекты.ОбновитьСоставСубъектовРФПоКлассификатору();
		ПечатьЭтикетокИЦенниковБПО.ЗаполнитьПредопределенныеЭлементы();
		ЗаполнитьТипСпособовБезналичнойОплаты();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.33", "2048_33", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.48.36", "2048_36", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.48.37", "2048_37", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.48.38", "2048_38", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
    Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.39") Тогда
       Файлы_ЗаполнитьРеквизитКонечныйВладелецХранилищеДопИнформации();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.39", "2048_39", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , Истина, );
	
    Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.40") Тогда
       ЗаполнитьРоссиюПоКлассификатору();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.40", "2048_40", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.48.41", "2048_41", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
    Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.42") Тогда
      	ЭЛН_ЗаполнитьРеквизитДатаОкончания();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.42", "2048_42", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.43") Тогда
		ОбменФСС.ОбновитьСертификатыКриптографииФСС();
		ЗаполнитьЗначениеКоличествоПлатежныхДокументов();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.43", "2048_43", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.48.44", "2048_44", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.48.45", "2048_45", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , );
	СтандартноеОбновление("2.0.48.46", "2048_46", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.47") Тогда
		ОбновлениеИнформационнойБазыБПО.УстановитьСрокХраненияОпераций(); // БПО 3.1.8.1.
	КонецЕсли;
	СтандартноеОбновление("2.0.48.47", "2048_47", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , );
	СтандартноеОбновление("2.0.48.48", "2048_48", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина , , Истина);
	СтандартноеОбновление("2.0.48.49", "2048_49", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.50") Тогда
		ПараметрыЗабораАнализовОбновитьАлгоритмамиСрокамиПовторности();
	КонецЕсли;
	СтандартноеОбновление("2.0.48.50", "2048_50", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.48.52") Тогда
		ПерезаписатьВидыРабочегоВремениГрафика(); // Появление флаша "РабочееВремяТабеля".
	КонецЕсли;
	СтандартноеОбновление("2.0.48.52", "2048_52", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.1") Тогда
		ОбновитьРолиПодписейЭМД();
		ОчиститьВерсииКлассификаторов20491();
		
		ОбновитьЗапасыДнейУВидовРассылки();
		ОбновитьТекстВычисляемыхБлоковШаблоновПриема();
		
		ПервоначальноеСозданиеОрганизацийПоФилиалам();
		ЗаполнениеНовогоРеквизитаОрганизацииВДоговорах();
		
		ОбновитьБлокМедосмотров_2_0_49_1();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.1", "2049_1", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.2") Тогда
		ОчиститьВерсиюКлассификатораЛабораторныхТестов();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.2", "2049_2", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.49.3", "2049_3", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.6") Тогда
		ОчиститьВерсииКлассификаторов20496();
		УстановитьВидДокументаДляПриказа29н();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.6", "2049_6", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.49.8", "2049_8", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.49.9", "2049_9", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	СтандартноеОбновление("2.0.49.10", "2049_10", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.11") Тогда
		ЗаполнитьВредныеФакторыВПМОНеЗавершенныхСПМО();
		ЗагрузитьПараметрыHTMLПрофпатолога();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.11", "2049_11", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.13") Тогда
		ЗаполнитьИспользуемуюВерсиюСервераЛицензированияПриОбновлении();
		ОбновитьРекизитОрганизацияПодключаемоеОборудование();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.13", "2049_13", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, Истина, Истина);

	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.14") Тогда
		УстановитьДатуНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.14", "2049_14", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.15") Тогда
		УстановитьВидДокументаДляПриказа29н();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.15", "2049_15", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.16") Тогда
		УстановитьТипФайловРедактируемыхЭлементовШаблонаПриема();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.16", "2049_16", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.17") Тогда
		ОчиститьВерсиюКлассификатораЛьготныхКатегорийНаселения();
		ЗагрузитьПараметрыHTMLПрофпатолога();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.17", "2049_17", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.49.18", "2049_18", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , Истина);
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.19") Тогда
		ЗаполнитьВидИсследованийУДействийМедосмотра();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.19", "2049_19", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.20") Тогда
		ОбновитьСтандартыЛечения();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.20", "2049_20", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.49.21", "2049_21", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.49.22", "2049_22", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , );
	СтандартноеОбновление("2.0.49.23", "2049_23", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	СтандартноеОбновление("2.0.49.24", "2049_24", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.25") Тогда
		ЗагрузитьКлассификаторДолжностейФРМР();
		УдалитьВидДокументаДляПриказа29н();
		ЛабораторияСервер.ЗагрузитьПараметрыЗабораИзВнутреннихМакетов(Перечисления.ВнешниеЛаборатории.Helix);
	КонецЕсли;
	СтандартноеОбновление("2.0.49.25", "2049_25", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.26") Тогда
		УстановитьВШаблонахЗаполнениеДиагнозовИзТабличнойЧасти();
		УстановитьРежимЗагрузкиКлассификаторМО_2049_26();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.26", "2049_26", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	СтандартноеОбновление("2.0.49.27", "2049_27", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, , , );
	
	Если РелизБолееРанний(ТекущаяВерсияИБ, "2.0.49.28") Тогда
		УстановитьРежимЗагрузкиКлассификаторДолжностейФРМР_2049_28();
		Справочники.МедицинскиеОтчеты.ЗаполнитьСписокМедицинскихОтчетов();
	КонецЕсли;
	СтандартноеОбновление("2.0.49.28", "2049_28", ТекущаяВерсияИБ, ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина, , Истина);
	
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации", ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("ДокументОписаниеОбновленийВысотаТаблицы", ДокументОписаниеОбновлений.ВысотаТаблицы);
	Результат.Вставить("ДокументОписаниеОбновлений", ДокументОписаниеОбновлений);
	Возврат Результат;
	
КонецФункции

// Выполняет актуализацию справочника "Варианты отчетов" по заложенным в конфигурацию вариантам отчетов.
Процедура ОбновитьДанныеВариантовОтчетов() Экспорт
	Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(Истина,Истина);
	Настройки = Новый Структура;
	Настройки.Вставить("ОбщиеДанные",       Истина);
	Настройки.Вставить("РазделенныеДанные", Истина);
	Настройки.Вставить("Конфигурация",      Истина);
	Настройки.Вставить("Расширения",        Истина);
	Настройки.Вставить("Оперативное",  		Истина);
	ВариантыОтчетов.Обновить(Настройки);
	ВариантыОтчетов.ОперативноеОбновлениеРазделенныхДанныхКонфигурации();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки.
//
Функция ПолучитьНомерРелиза(НомерВерсии)
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для счетчик = 1 По СтрДлина(НомерВерсии) Цикл
		
		Если Сред(НомерВерсии, счетчик, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = счетчик - 1;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()

Функция РелизБолееРанний(РелизПроверяемый,РелизПроверяющий)
	
	мсРелизПроверяемый = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(РелизПроверяемый,".");
	мсРелизПроверяющий = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(РелизПроверяющий,".");
	
	чПроверяемый = 0;
	чПроверяющий = 0;
	
	Попытка
		
		Для Каждого Элемент Из мсРелизПроверяемый Цикл
			чПроверяемый = чПроверяемый * 100 + Число(Элемент)
		КонецЦикла;
		Для Каждого Элемент Из мсРелизПроверяющий Цикл
			чПроверяющий = чПроверяющий * 100 + Число(Элемент)
		КонецЦикла;
		
		Возврат чПроверяемый < чПроверяющий;
		
	Исключение 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура СтандартноеОбновление(НоваяВерсияИБ, ОписаниеОбновлений = "", ТекущаяВерсияИБ, 
								ВыполненныеОбновления, ДокументОписаниеОбновлений, МакетОписаниеОбновлений,
								ОбновитьВариантыОтчетов = Ложь, ОбновитьБиблиотекиТО = Ложь, ОбновитьИдентификаторыМетаданных = Ложь)
	
	Если РелизБолееРанний(ТекущаяВерсияИБ,НоваяВерсияИБ) Тогда
		
		НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления); // Начало транзакции обновления.
		
		Если ОбновитьВариантыОтчетов И Не ВыполненныеОбновления.ВариантыОтчетов Тогда
			ОбновитьДанныеВариантовОтчетов();
			ВыполненныеОбновления.ВариантыОтчетов = Истина;
		КонецЕсли;
		
		Если ОбновитьБиблиотекиТО И Не ВыполненныеОбновления.БиблиотекаТО Тогда
			ОбновлениеИУстановкаДрайверовОборудования();
			ВыполненныеОбновления.БиблиотекаТО = Истина;
		КонецЕсли;
		
		Если ОбновитьИдентификаторыМетаданных
			И Не ВыполненныеОбновления.ИдентификаторыМетаданных
			И Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
		Тогда
			Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника();
			ВыполненныеОбновления.ИдентификаторыМетаданных = Истина;
		КонецЕсли;
		
		ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ); // Завершение транзакции.
		
		Если ЗначениеЗаполнено(ОписаниеОбновлений) Тогда
			ВывестиОписаниеИзменений(ОписаниеОбновлений, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеИУстановкаДрайверовОборудования()
	
	ОбновлениеИнформационнойБазыБПО.ОбновитьПоставляемыеДрайвера();
	
КонецПроцедуры

// Создание элемента справочника филиалов и прописывание его в собственном узле плана обмена.
Процедура ПервоначальноеЗаполнениеПланаОбмена()
	
	ИмяНовогоФилиала = "Наша клиника";
	
	// Проверка, сетевая ли это версия
	МенеджерСпрФилиалы = Справочники.Филиалы;
	// Если филиал не заполнен
	ЭтотУзел = ПланыОбмена.Полный.ЭтотУзел();
	Если ЭтотУзел.Филиал.Пустая() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполнение параметров узла обмена.");
		
		// Поиск "свободного" от других узлов элемента справочника
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Филиалы.Ссылка,
		|	Филиалы.Наименование
		|ИЗ
		|	Справочник.Филиалы КАК Филиалы
		|ГДЕ
		|	(НЕ Филиалы.Ссылка В
		|				(ВЫБРАТЬ
		|					Полный.Филиал КАК Филиал
		|				ИЗ
		|					ПланОбмена.Полный КАК Полный
		|				СГРУППИРОВАТЬ ПО
		|								Полный.Филиал))"
		;
		Выб = Запрос.Выполнить().Выбрать();
		
		ОбъектЭтотУзел = ЭтотУзел.ПолучитьОбъект();
		Если Выб.Следующий() Тогда
			ОбъектЭтотУзел.Филиал = Выб.Ссылка;
			ОбъектЭтотУзел.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данному узлу обмена присвоен филиал "+Выб.Наименование+".");
		Иначе
			ФилиалСсылка = МенеджерСпрФилиалы.НайтиПоНаименованию(ИмяНовогоФилиала,Истина);
			Если ЗначениеЗаполнено(ФилиалСсылка) Тогда
				
				Запрос.УстановитьПараметр("ШаблонИмени",ИмяНовогоФилиала + "%");
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Филиалы.Ссылка,
				|	Филиалы.Наименование
				|ИЗ
				|	Справочник.Филиалы КАК Филиалы
				|ГДЕ
				|	Филиалы.Наименование ПОДОБНО &ШаблонИмени"
				;
				Выб = Запрос.Выполнить().Выбрать();
				ИмяНовогоФилиала = ИмяНовогоФилиала + " #";
				СчАвтоименованных = 1;
				Пока Выб.Следующий() Цикл
					Инд = Найти(Выб.Наименование,ИмяНовогоФилиала);
					Если Инд <> 0 Тогда
						Попытка
							НомерАвтонаименования = Число( СокрЛП( Прав( Выб.Наименование, СтрДлина(Выб.Наименование)-Инд-СтрДлина(ИмяНовогоФилиала) ) ) );
							СчАвтоименованных = Макс(СчАвтоименованных,НомерАвтонаименования);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Филиал = МенеджерСпрФилиалы.СоздатьЭлемент();
			Филиал.Наименование = ИмяНовогоФилиала;
			Филиал.Записать();
			ОбъектЭтотУзел.Филиал = Филиал.Ссылка;
			Если ПустаяСтрока(ОбъектЭтотУзел.Наименование) Тогда
				ОбъектЭтотУзел.Наименование = ИмяНовогоФилиала;
			КонецЕсли;
			ОбъектЭтотУзел.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данному узлу обмена присвоен филиал "+Выб.Наименование+".");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПервоначальныеНастройкиЛокализации()
	
	ЗаполнитьСправочникВалют();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОсновнойВидДУЛ", Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21);
	ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
	
	УстановитьМаскиНаПредопределенныеДУЛ();
	
КонецПроцедуры

Процедура ЗаполнитьСправочникВалют()
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполнение справочника ""Валюты""");
	
	Попытка
		// Российский рубль
		Валюта = Справочники.Валюты.Рубль.ПолучитьОбъект();
		Валюта.НаименованиеПолное = "Российский рубль";
		Валюта.ПараметрыПрописиНаРусском = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
		Валюта.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Валюта " +  Валюта.НаименованиеПолное + " уже была добавлена ранее");
	КонецПопытки;
	
	
	Попытка
		// Украинская гривна
		Валюта = Справочники.Валюты.СоздатьЭлемент();
		Валюта.Код = "980";
		Валюта.Наименование	= "гривна";
		Валюта.НаименованиеПолное = "Гривна";
		Валюта.ПараметрыПрописиНаРусском = "гривна, гривны, гривен, м, копейка, копейки, копеек, ж, 2";
		Валюта.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Валюта " +  Валюта.НаименованиеПолное + " уже была добавлена ранее");
	КонецПопытки;
	
	Попытка
		// Казахский тенге
		Валюта = Справочники.Валюты.СоздатьЭлемент();
		Валюта.Код = "398";
		Валюта.Наименование	= "тенге";
		Валюта.НаименованиеПолное = "Тенге";
		Валюта.ПараметрыПрописиНаРусском = "тенге, тенге, тенге, м, тиын, тиын, тиын, м, 2";
		Валюта.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Валюта " +  Валюта.НаименованиеПолное + " уже была добавлена ранее");
	КонецПопытки;
	
	Попытка
		// Евросоюзное евро
		Валюта = Справочники.Валюты.СоздатьЭлемент();
		Валюта.Код = "978";
		Валюта.Наименование	= "евро";
		Валюта.НаименованиеПолное = "Евро";
		Валюта.ПараметрыПрописиНаРусском = "евро, евро, евро, м, цент, цента, центов, м, 2";
		Валюта.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Валюта " +  Валюта.НаименованиеПолное + " уже была добавлена ранее");
	КонецПопытки;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено первоначальное заполнение справочника ""Валюты""");
	
КонецПроцедуры

Процедура ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, ПараметрыРасширеннойУП = Ложь, ПараметыПереопределяемойУП = Ложь)
	
	Если ПараметрыРасширеннойУП Тогда
		Для Каждого КлючЗначение Из СтруктураПараметров Цикл
			Параметр = Перечисления.ПараметрыУчетнойПолитики[КлючЗначение.Ключ];
			Запись = РегистрыСведений.УчетнаяПолитикаРасширенная.СоздатьМенеджерЗаписи();
			Запись.Параметр = Параметр;
			Запись.Значение = КлючЗначение.Значение;
			Запись.Записать(Истина);
		КонецЦикла;
	ИначеЕсли ПараметыПереопределяемойУП Тогда
		Для Каждого КлючЗначение Из СтруктураПараметров Цикл
			УправлениеНастройкамиПереопределяемый.УстановитьПараметрУчета(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	Иначе
		нзУП = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
		нзУП.Прочитать();
		Если нзУП.Количество() = 0 Тогда
			СоздатьЗаписьНастроекУчета();
		Иначе
			Для Каждого Параметр Из СтруктураПараметров Цикл
				Если Параметр.Значение = Неопределено Тогда
					СтруктураПараметров[Параметр.Ключ] = УправлениеНастройками.ПолучитьЗначениеПараметраУчетнойПолитикиПоУмолчанию(Параметр.Ключ);
				КонецЕсли;
				
				нзУП[0][Параметр.Ключ] = СтруктураПараметров[Параметр.Ключ];
			КонецЦикла;
			нзУП.Записать();
		КонецЕсли;
	КонецЕсли;
	ПараметрыСеанса.УчетнаяПолитика = Новый ФиксированнаяСтруктура(УправлениеНастройками.ПолучитьУчетнуюПолитику(Ложь));
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ВыполнитьПервоначальноеЗаполнениеСостоянийЗаявокИУчетнойПолитикиПоСостояниям()
	
	// Заполнение учетной политики
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОсновнойЦветЗаявки");                      
	
	ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
	
	ОсновнойЦвет = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойЦветЗаявки");
	СписокСостояний = Новый Соответствие;
	
	СписокСостояний.Вставить(Справочники.ВидыСостоянийЗаявок.Запланирована, WebЦвета.БледноЗеленый);
	СписокСостояний.Вставить(Справочники.ВидыСостоянийЗаявок.Оплачена,		Новый Цвет(255,200,0));
	СписокСостояний.Вставить(Справочники.ВидыСостоянийЗаявок.Прием,			WebЦвета.СветлоЖелтый);
	СписокСостояний.Вставить(Справочники.ВидыСостоянийЗаявок.Выполнена,		WebЦвета.БледноЛиловый);
	СписокСостояний.Вставить(Справочники.ВидыСостоянийЗаявок.Отменена,		ОсновнойЦвет);
	
	Для Каждого элСостояние Из СписокСостояний Цикл
		ОбъектСостояние = элСостояние.Ключ.ПолучитьОбъект();
		ОбъектСостояние.Цвет = Новый ХранилищеЗначения(элСостояние.Значение);
		Если ОбъектСостояние.Ссылка = Справочники.ВидыСостоянийЗаявок.Отменена Тогда
			ОбъектСостояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена;
		КонецЕсли;
		ОбъектСостояние.Записать();
	КонецЦикла;
	
	ЗаполнитьКонфигурированиеЯчеекКалендаря();
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнена первоначальная настройка видов состояний заявок");
	
КонецПроцедуры

Процедура СоздатьЗаписьНастроекУчета()
	
	нзУП = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	нзУП.Прочитать();
	Если нзУП.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Инициализация настроек учета");
		УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
		запУП = нзУП.Добавить();
		ЗаполнитьЗначенияСвойств(запУП,УчетнаяПолитика);
		нзУП.Записать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено первоначальное заполнение настроек учета");
	КонецЕсли;
	
	УправлениеНастройкамиПереопределяемый.СоздатьЗаписьНастроекУчета();
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеВидыСобытияАвтоСообщений()
	
	ДвоичныеДанныеВыгрузки = Справочники.ВидыСобытий.ПолучитьМакет("ДанныеПредопределенныхЭлементов");
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки);
	
КонецПроцедуры

Процедура ДобавитьОбязательныйРеквизитДатаРожденияКлиента()
	
	МенеджерЗаписи = РегистрыСведений.ОбязательныеРеквизитыОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяСправочника = "Клиенты";
	МенеджерЗаписи.ИмяРеквизита = "ДатаРождения";	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	Попытка
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
		ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
		ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ВывестиОписаниеИзменений()

// Заполнение реквизитов справочника "Виды контактной информации".
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполнение справочника ""Виды контаткной информации""");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = ИСТИНА
	|	И ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|";
	
	Запрос.УстановитьПараметр("ПустойТип", Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	
	ВидыКИ = Справочники.ВидыКонтактнойИнформации;
	ТипыКИ = Перечисления.ТипыКонтактнойИнформации;
	
	СоответствиеТиповКИ = Новый Соответствие;
	СоответствиеТиповКИ.Вставить(ВидыКИ.АдресИностранный, ТипыКИ.Адрес);
	СоответствиеТиповКИ.Вставить(ВидыКИ.АдресПочтовый, ТипыКИ.Адрес);
	СоответствиеТиповКИ.Вставить(ВидыКИ.АдресФактический, ТипыКИ.Адрес);
	СоответствиеТиповКИ.Вставить(ВидыКИ.АдресЮридический, ТипыКИ.Адрес);
	СоответствиеТиповКИ.Вставить(ВидыКИ.АдресМестаРождения, ТипыКИ.Адрес);
	
	СоответствиеТиповКИ.Вставить(ВидыКИ.АдресЭлектроннойПочтыДомашний, ТипыКИ.АдресЭлектроннойПочты);
	СоответствиеТиповКИ.Вставить(ВидыКИ.АдресЭлектроннойПочтыРабочий, ТипыКИ.АдресЭлектроннойПочты);
	
	СоответствиеТиповКИ.Вставить(ВидыКИ.ВебСтраницаОрганизации, ТипыКИ.ВебСтраница);
	СоответствиеТиповКИ.Вставить(ВидыКИ.ВебСтраницаФизЛица, ТипыКИ.ВебСтраница);
	
	СоответствиеТиповКИ.Вставить(ВидыКИ.НомерПрочий, ТипыКИ.Другое);
	СоответствиеТиповКИ.Вставить(ВидыКИ.ПрочаяИнформация, ТипыКИ.Другое);
	
	СоответствиеТиповКИ.Вставить(ВидыКИ.ТелефонДомашний, ТипыКИ.Телефон);
	СоответствиеТиповКИ.Вставить(ВидыКИ.ТелефонРабочий, ТипыКИ.Телефон);
	СоответствиеТиповКИ.Вставить(ВидыКИ.ТелефонСотовый, ТипыКИ.Телефон);
	СоответствиеТиповКИ.Вставить(ВидыКИ.Факс, ТипыКИ.Телефон);
	СоответствиеТиповКИ.Вставить(ВидыКИ.ТелефонКонтрагента, ТипыКИ.Телефон);
	СоответствиеТиповКИ.Вставить(ВидыКИ.ТелефонОрганизации, ТипыКИ.Телефон);
	
	СоответствиеТиповКИ.Вставить(ВидыКИ.Skype, ТипыКИ.Skype);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипВида = СоответствиеТиповКИ.Получить(Выборка.Ссылка);
		Если ЗначениеЗаполнено(ТипВида) Тогда
			УстановитьПараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, ТипВида);
		КонецЕсли;
		
	КонецЦикла; 

	ЗаполнитьНазначенияКонтактнойИнформации();
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено первоначальное заполнение видов контактной информации");
	
КонецПроцедуры

// Процедура производит обновление элемента справочника виды контактной информации.
Процедура УстановитьПараметрыВидаКонтаткнойИнформации(СсылкаВидыКонтактнойИнформации, Знач Тип)
	
	Если Не ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Тип;
		
		ОбъектВидКонтактнойИнформации.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьНазначенияКонтактнойИнформации()
	
	НазначенияКИ = РегистрыСведений.НазначениеКонтактнойИнформации.СоздатьНаборЗаписей();
	
	// Клиенты
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресЮридический;
	НоваяЗапись.ИмяМетаданных = "Клиенты";	
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый;
	НоваяЗапись.ИмяМетаданных = "Клиенты";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДомашний;
	НоваяЗапись.ИмяМетаданных = "Клиенты";

	// Контрагенты
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.Факс;
	НоваяЗапись.ИмяМетаданных = "Контрагенты";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресПочтовый;
	НоваяЗапись.ИмяМетаданных = "Контрагенты";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	НоваяЗапись.ИмяМетаданных = "Контрагенты";
	
	// Филиалы
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресФактический;
	НоваяЗапись.ИмяМетаданных = "Филиалы";
	
	// Организации
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресЮридический;
	НоваяЗапись.ИмяМетаданных = "Организации";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	НоваяЗапись.ИмяМетаданных = "Организации";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресФактический;
	НоваяЗапись.ИмяМетаданных = "Организации";
	
	// Пользователи
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый;
	НоваяЗапись.ИмяМетаданных = "Пользователи";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочий;
	НоваяЗапись.ИмяМетаданных = "Пользователи";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий;
	НоваяЗапись.ИмяМетаданных = "Пользователи";
	
	// Сотрудники
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый;
	НоваяЗапись.ИмяМетаданных = "Сотрудники";
	НоваяЗапись = НазначенияКИ.Добавить();
	НоваяЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочий;
	НоваяЗапись.ИмяМетаданных = "Сотрудники";
	
	НазначенияКИ.Записать();
	
КонецПроцедуры

Процедура ПроверитьГарантированныйПрейскурант()
	
	Выб = Справочники.Прейскуранты.Выбрать();
	Если Выб.Следующий() Тогда
		Прейскурант = Выб.Ссылка;
	Иначе
		ЭлементПрейскурант = Справочники.Прейскуранты.СоздатьЭлемент();
		ЭлементПрейскурант.Наименование = "Основной прейскурант";
		ЭлементПрейскурант.Записать();
		Прейскурант	= ЭлементПрейскурант.Ссылка;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В базу добален прейскурант ""Основной прейскурант""");
	КонецЕсли;
	
	НЗУп = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НЗУп.Прочитать();
	Если НЗУп.Количество()=0 Тогда
		
		СоздатьЗаписьНастроекУчета();	
		НЗУп.Прочитать();
		
	КонецЕсли;
	
	флЗаписать = Ложь;
	Если не ЗначениеЗаполнено(НЗУп[0].ОсновнойПрейскурант) Тогда
		НЗУп[0].ОсновнойПрейскурант = Прейскурант;
		флЗаписать = Истина;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(НЗУп[0].ПрейскурантРасчетаСтоимостиМатериалов) Тогда
		НЗУп[0].ПрейскурантРасчетаСтоимостиМатериалов = Прейскурант;
		флЗаписать = Истина;
	КонецЕсли;
	
	Если флЗаписать Тогда 
		НЗУп.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит обновление элемента плана видов характеристик "Виды задач и напоминаний".
Процедура УстановитьПараметрыВидаЗадачНапоминаний(СсылкаВидЗадач, НаименованиеПолное, АвтоФормирование, Напоминать, ЗапасДней)
	
	Если Не ЗначениеЗаполнено(СсылкаВидЗадач) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидЗадач = СсылкаВидЗадач.ПолучитьОбъект();
		ОбъектВидЗадач.НаименованиеПолное				= НаименованиеПолное;
		ОбъектВидЗадач.АвтоматическиФормироватьЗадачи	= АвтоФормирование;
		ОбъектВидЗадач.НапоминатьОЗадаче				= Напоминать;
		ОбъектВидЗадач.ЗапасДнейПриСозданииЗадачи		= ЗапасДней;
		ОбъектВидЗадач.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи реквизитов элемента " + ОбъектВидЗадач.Наименование + " плана видов характеристик ""Виды задач и напоминаний""");
	КонецПопытки;
	
КонецПроцедуры

// Настройка параметров синхронизации справочников при выгрузке в 1С.Бухглатерию.
Процедура ЗаполнитьНастройкиОбменаСДругимиКонфигурациями()
	
	Макет = РегистрыСведений.НастройкаОбмена.ПолучитьМакет("ПредопределенныеЭлементы");	
	Область = Макет.Области["Объекты"];
	
	ОтборРегистра = Новый Структура("НазваниеОбъекта");
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("НазваниеОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("ПолеСопоставления", Новый ОписаниеТипов("Строка"));
	
	Для счетчик = Область.Верх По Область.Низ Цикл
		
		НазваниеОбъекта = СокрЛП(Макет.Область("R"+счетчик+"C1").Текст);	
		ЗначениеПоУмолчанию = СокрЛП(Макет.Область("R"+счетчик+"C3").Текст);
		
		Строка = ТаблицаНастроек.Добавить();
		Строка.НазваниеОбъекта = НазваниеОбъекта;
		Строка.ПолеСопоставления = ЗначениеПоУмолчанию;
		
	КонецЦикла;
		
	НаборЗаписей = РегистрыСведений.НастройкаОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ТаблицаНастроек);
	НаборЗаписей.Записать(Истина);  	
	
КонецПроцедуры

Процедура НачатьТранзакциюОбновленияИБ(ВыполненныеОбновления)
	
	ОбновитьПравилаОбменаПланаОбменаСФилиалами(ВыполненныеОбновления.РИБПравила);
	
	НачатьТранзакцию();
	
КонецПроцедуры

Процедура ЗавершитьТранзакциюОбновлиенияИБ(НоваяВерсияИБ)
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
		
		// Если удалось зафиксировать транзакцию, то
		// сообщение об успешном обновлении информационной базы.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриПервомЗапуске()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Версия сервера лицензий по умолчанию.
	Константы.ИспользуемаяВерсияСистемыЛицензирования.Установить("2.0");
	
	// Заполнение настроек учета значениями по умолчанию
	СоздатьЗаписьНастроекУчета();
	
	ВыполнитьПервоначальноеЗаполнениеСостоянийЗаявокИУчетнойПолитикиПоСостояниям();
	
	// Заполнение типов контактной информации
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	// Заполниение видов задач и напоминаний
	ЗаполнитьВидыЗадачНапоминаний();
	
	// Создание прейскуранта для первоначального заполнения настроек учета
	ПроверитьГарантированныйПрейскурант();
	
	СоздатьКассуПоУмолчанию();
	
	СоздатьСкладПоУмолчанию();
	Константы.СтратегияСписанияПартийТоваровПоДатам.Установить(Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя);
	
	ПервоначальноеЗаполнениеПланаОбмена();
	ПервоначальноеСозданиеОрганизацийПоФилиалам();
	
	ЗаполнитьНастройкиОбменаСДругимиКонфигурациями();
	
	ЗаполнитьДанныеСвойстваСрокаГодности();
	
	ПервоначальныеНастройкиЛокализации();
	
	Справочники.ОбработкиSMSрассылки.СоздатьОбработкуОтправкиСМС("StreamSMS", "");
	ЗаполнитьПредопределенныеВидыСобытияАвтоСообщений();
	
	ПервоначальноеЗаполнениеUTMПредопределенныхТиповРекламы();
	
	ДобавитьОбязательныйРеквизитДатаРожденияКлиента();

	// Первоначальное заполнение системной учетной записи почты
	ПервоначальноеЗаполнениеСистемнойУчетнойЗаписиПочты();
	
	СоздатьЭталонныеШаблоныЭтикетокЦенников();
	
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВидыДоговоров.ПолучитьМакет("ДанныеПредустановленныхЭлементов"));
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("ЕдиницыИзмеренияДляПервоначальнойЗагрузки"));
	
	ОбновлениеИУстановкаДрайверовОборудования();
	
	// Перенос встроенных и пользовательских вариантов отчетов в справочник вариантов.
	ОбновитьДанныеВариантовОтчетов();
	
	ПервоначальноеЗаполнениеВопросаАнкетированияNPS();
	
	ОбменДаннымиСервер.ЗагрузитьПравилаДляОбменаДанными(Ложь, "ОбменСФилиалами", Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов, "ПравилаОбмена");
	Константы.Сканирование_СтандартныеИменаСканов.ПервоначальнаяИнициализация();
	
	ЗаполнитьРоссиюПоКлассификатору();
	
	// Отраслевые процедуры заполнения
	ВыполнитьДействияПриПервомЗапускеМедицина();	
	
КонецПроцедуры

Процедура ВыполнитьДействияПриПервомЗапускеМедицина()
	
	УправлениеНастройкамиМедицинскогоУчета.УстановитьЗначениеПараметра("ИспользоватьЛистыНетрудоспособности", Истина); // Включить использвание Листов нетрудоспособности.
	УправлениеНастройкамиМедицинскогоУчета.УстановитьЗначениеПараметра("ПостоплатаПоПриемамИспользуется", Истина);	   // Включить учет приемов в автоопределении услуг на постоплату.
	
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеПредустановленныхЭлементов"));
	
	СоздатьВидМедкарты025у();
	
	Справочники.ПричиныНетрудоспособности.ПерезаполнитьКлассификатор();
	Справочники.СтатусыНетрудоспособного.ПерезаполнитьКлассификатор();
	Справочники.ДополнительныеКодыПричинНетрудоспособности.ПерезаполнитьКлассификатор();
	Справочники.ТипыНарушенийРежима.ПерезаполнитьКлассификатор();
	Справочники.МедицинскиеОтчеты.ЗаполнитьСписокМедицинскихОтчетов();
	
	СоздатьМаршрутЛабораторныхИсследований();
	
	// Медосмотры
	ЗаполнитьПредопределенныеВредныеФакторы();
	ЗаполнитьПредопределенныеПриказыМО();
	ЗаполнитьПредопределенныеВидыМедосмотров();
	ЗагрузитьПараметрыHTMLПрофпатолога();
	
	ЗагрузитьАнамнезЖизни();
	
	Если Метаданные.Константы.Найти("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") <> Неопределено Тогда
		Константы.ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов.Установить(Истина);
	КонецЕсли;
	
	ПервоначальноеОбновлениеЕГИСЗ();
	
	ОбменФСС.ОбновитьСертификатыКриптографииФСС();
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.ВидыДоговоров.ПолучитьМакет("ДанныеПредустановленныхЭлементов_ИС_ЭЛН"));
	
	ПечатьЭтикетокИЦенниковБПО.ЗаполнитьПредопределенныеЭлементы(); // Этикетки лабораторий.
	
КонецПроцедуры

// Заполнение реквизитов плана видов характеристик "Виды задач и напоминаний"
Процедура ЗаполнитьВидыЗадачНапоминаний()
	
	ПХВВидыЗадач = ПланыВидовХарактеристик.ВидыЗадачИНапоминаний;
	
	УстановитьПараметрыВидаЗадачНапоминаний(ПХВВидыЗадач.ДеньРождения, "Поздравить с днем рождения", Ложь, Истина, 2);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено первоначальное заполнение предопределенных видов задач и напоминаний");
	
КонецПроцедуры

Процедура СоздатьКассуПоУмолчанию()
	
	Выб = Справочники.Кассы.Выбрать();
	Если Выб.Следующий() Тогда
		Касса = Выб.Ссылка;
	Иначе
		ЭлементКасса = Справочники.Кассы.СоздатьЭлемент();
		ЭлементКасса.Наименование = "Основная касса";
		ЭлементКасса.УстановитьНовыйКод();
		ЭлементКасса.Записать();
		Касса = ЭлементКасса.Ссылка;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В базу добалена касса ""Основная касса""");
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСкладПоУмолчанию()
	
	Выб = Справочники.Склады.Выбрать();
	Если Выб.Следующий() Тогда
		Склад = Выб.Ссылка;
	Иначе
		ЭлементСправочника = Справочники.Склады.СоздатьЭлемент();
		ЭлементСправочника.Наименование = "Основной склад";
		ЭлементСправочника.УстановитьНовыйКод();
		ЭлементСправочника.Записать();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В базу добалена склад """ + ЭлементСправочника.Наименование + """");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонфигурированиеЯчеекКалендаря()
	
	ЭлементКонф = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка.ПолучитьОбъект();
	ЭлементКонф.ВидОтображения = Перечисления.ВидыОтображенияЯчеек.КлиентУслугиВместе;
	ТЧКон = ЭлементКонф.ПоследовательностьОтображения;
	ЯчейкаКалендаряКлиент = ТЧКон.Добавить();
	ЯчейкаКалендаряКлиент.Ячейка = Справочники.ЯчейкиКалендаря.НаименованиеКлиента;
	ЯчейкаКалендаряУслуга = ТЧКон.Добавить();
	ЯчейкаКалендаряУслуга.Ячейка = Справочники.ЯчейкиКалендаря.НаименованиеУслуги;
	
	пчПоляОтображения = Перечисления.ПоляОтображенияГрафикаВРасписании;
	
	Строка = ЭлементКонф.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
	Строка.Поле = пчПоляОтображения.ВидВремениГрафика;
	Строка.ТолькоВПервойСтроке = Истина;
	
	Строка = ЭлементКонф.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
	Строка.Поле = пчПоляОтображения.Время;
	
	Строка = ЭлементКонф.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
	Строка.Поле = пчПоляОтображения.КабинетСотрудник;
	Строка.ТолькоВПервойСтроке = Истина;
		
	ЭлементКонф.Записать();
	
КонецПроцедуры

Процедура ОборудованиеРегистрВСправочник()
	
	ИмяТаблицы = "";
	Если Метаданные.РегистрыСведений.Найти("ОборудованиеУслуг") <> Неопределено Тогда
		ИмяТаблицы = "ОборудованиеУслуг";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("удалитьОборудованиеУслуг") <> Неопределено Тогда
		ИмяТаблицы = "удалитьОборудованиеУслуг";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборудованиеУслуг.Номенклатура,
		|	ОборудованиеУслуг.Оборудование
		|ИЗ                                                                       
		|	РегистрСведений." + ИмяТаблицы + " КАК ОборудованиеУслуг";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Стр Из Результат Цикл
			
			пар = новый Структура("Номенклатура", Стр.Номенклатура);
			НайдОборуд = Результат.НайтиСтроки(пар);
			
			Если НайдОборуд.Количество() > 0 Тогда
				об = Стр.Номенклатура.ПолучитьОбъект();
				Для Инд = 0 По НайдОборуд.Количество() - 1 Цикл
					СтрокаТЧ = об.Оборудования.Добавить();
					СтрокаТЧ.Оборудование = НайдОборуд[Инд].Оборудование;
				КонецЦикла;
				об.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура Перенос_Скидок() 
	
	пчВидыПолучателей	= Перечисления.ВидПолучателя;
	пчТипыСкидок		= Перечисления.ТипыСкидок;
	
	НомСк = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * 
					| ИЗ
					| Документ.удалитьУстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры
					| ГДЕ
					| УстановкаСкидокНоменклатуры.ДатаОкончанияСкидки > &ТекДата ИЛИ 
					| УстановкаСкидокНоменклатуры.ДатаОкончанияСкидки = ДатаВремя(1,1,1,0,0,0)";
	
	Запрос.УстановитьПараметр("ТекДата", КонецДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	УстановкаПороговНакопительныхСкидок.ШкалаДиапазонов.(
		               |		НижняяГраница,
		               |		ЗначениеПорога
		               |	)
		               |ИЗ
		               |	Документ.удалитьУстановкаПороговНакопительныхСкидок КАК УстановкаПороговНакопительныхСкидок
		               |ГДЕ
		               |	УстановкаПороговНакопительныхСкидок.Проведен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	УстановкаПороговНакопительныхСкидок.Дата УБЫВ";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ТабПорогиНакопительныхСкидок = Результат.Выгрузить()[0].ШкалаДиапазонов;
		Иначе
			ТабПорогиНакопительныхСкидок = Новый ТаблицаЗначений;
		КонецЕсли;
		
		ТабДокВводОстатковНакоплений = Новый ТаблицаЗначений;
		ТабДокВводОстатковНакоплений.Колонки.Добавить("ВидСкидки");
		ТабДокВводОстатковНакоплений.Колонки.Добавить("ДокументОбъект");
				
		// Текст запроса для поиска существующих скидок.			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВидыСкидок.Ссылка,
		               |	ВидыСкидок.РазмерыСкидки.(
		               |		Номенклатура
		               |	),
		               |	ВидыСкидок.ВремяПоДнямНедели.(
		               |		Выбран,
		               |		ДеньНедели,
		               |		ВремяНачала,
		               |		ВремяОкончания
		               |	),
		               |	ВидыСкидок.ОграничиватьПоДнямНедели
		               |ИЗ
		               |	Справочник.ВидыСкидок КАК ВидыСкидок
		               |ГДЕ
		               |	ВидыСкидок.ВидПолучателя = &ВидПолучателя
		               |	И ВидыСкидок.ТипСкидки = &ТипСкидки
		               |	И НЕ ВидыСкидок.ПометкаУдаления";
			
		Для Каждого Стр Из Выборка Цикл
			
			ВидПолучателя = ?(ЗначениеЗаполнено(Стр.ЗначенияФильтра), пчВидыПолучателей.Клиенты, пчВидыПолучателей.ВсеКлиенты);
			ТипСкидки = ?(Стр.Накопительная, пчТипыСкидок.НакопительнаяСкидка, пчТипыСкидок.Скидка);
			                                             
			ТабФильтрСтаройСкидки = Стр.Фильтр.Скопировать(,"Номенклатура");
			Если ТабФильтрСтаройСкидки.Количество() = 0 Тогда
				ТабФильтрСтаройСкидки.Добавить();
			КонецЕсли;
			
			ОграничениеПовремениСтаройСкидки = Стр.ВремяПоДнямНедели.Скопировать(,"Выбран,ДеньНедели,ВремяНачала,ВремяОкончания");
				
			// Поиск уже существующего подходящего вида скидки нужно делать по 4 параметрам: Вид получателя, Тип скидки, 
			// фильтр по номенклатуре, ограничение по времени. Сначала запросом находим подходящие по значению реквизитов шапки.
			// Далее в цикле проверяется совпадение ограничений по номенклатуре и дням недели.
			Запрос.УстановитьПараметр("ВидПолучателя", ВидПолучателя);
			Запрос.УстановитьПараметр("ТипСкидки"	 , ТипСкидки);
			
			ТабВидыСкидок = Запрос.Выполнить().Выгрузить();
			
			ВидСкидки = Неопределено;
			Для Каждого СтрВидСкидки Из ТабВидыСкидок Цикл
				
				Если ОбщегоНазначения.СравнитьТаблицыНаборовЗаписей(ТабФильтрСтаройСкидки, СтрВидСкидки.РазмерыСкидки)
					И Стр.ПоДнямНедели = СтрВидСкидки.ОграничиватьПоДнямНедели
					И (	Не Стр.ПоДнямНедели
						Или ОбщегоНазначения.СравнитьТаблицыНаборовЗаписей(ОграничениеПовремениСтаройСкидки, СтрВидСкидки.ВремяПоДнямНедели))
				Тогда
					ВидСкидки = СтрВидСкидки.Ссылка;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ВидСкидки) Тогда

				НаименованиеСкидки	= Строка(ВидПолучателя) + " "
									+ ?(ТипСкидки = пчТипыСкидок.НакопительнаяСкидка, "Накопительная скидка","Процент");
				
				НовЭл = Справочники.ВидыСкидок.СоздатьЭлемент();
				НовЭл.Наименование	= НаименованиеСкидки;
				НовЭл.ВидПолучателя	= ВидПолучателя;
				НовЭл.ТипСкидки		= ТипСкидки;
				НовЭл.ФормаСкидки	= ?(ТипСкидки = пчТипыСкидок.НакопительнаяСкидка,
										Перечисления.ФормыСкидки.Сумма,
										Перечисления.ФормыСкидки.Процент);
				НовЭл.ОграничиватьПоДнямНедели = Стр.ПоДнямНедели;
				
				СхемаКомпоновкиДанных = Справочники.ВидыСкидок.ПолучитьМакет("ПоляШаблона");
				
				Если Стр.Накопительная Тогда
					// Заполним пороги скидок
					Для Каждого СтрПор Из ТабПорогиНакопительныхСкидок Цикл
						НстрПор = НовЭл.ШкалаДиапазонов.Добавить();
						НстрПор.ЗначениеПорога = СтрПор.ЗначениеПорога;
						НстрПор.НижняяГраница = СтрПор.НижняяГраница;						
					КонецЦикла;
					// Отбор по номенклатуре
					СписокНоменклатуры = Новый СписокЗначений;
					СписокНоменклатуры.ЗагрузитьЗначения(ТабФильтрСтаройСкидки.ВыгрузитьКолонку("Номенклатура"));
					
					ОтборПоНоменклатуре = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборПоНоменклатуре.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ДанныеСтроки.Номенклатура");
					ОтборПоНоменклатуре.ВидСравнения	= ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					ОтборПоНоменклатуре.ПравоеЗначение	= СписокНоменклатуры;
					ОтборПоНоменклатуре.Использование	= Истина;
				Иначе
					Если ТабФильтрСтаройСкидки.Количество() = 0 Тогда
						Нстр = НовЭл.РазмерыСкидки.Добавить();
						Нстр.Размер = Стр.Скидка;				
					Иначе
						Для Каждого СтрокаФильтра Из ТабФильтрСтаройСкидки Цикл
							Нстр = НовЭл.РазмерыСкидки.Добавить();
							Нстр.Размер = Стр.Скидка;				
							Нстр.Номенклатура = СтрокаФильтра.Номенклатура;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Хранилище = Новый ХранилищеЗначения(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
				НовЭл.ХранилищеОтбор = Хранилище;
				НовЭл.ХранилищеОтборНакопления = Хранилище;
				
				Если Стр.ПоДнямНедели Тогда
					Для Каждого СтрДень Из ОграничениеПовремениСтаройСкидки Цикл
						ЗаполнитьЗначенияСвойств(НовЭл.ВремяПоДнямНедели.Добавить(),СтрДень);
					КонецЦикла;				
				КонецЕсли;
				НовЭл.Записать();
				ВидСкидки = НовЭл.Ссылка;
			КонецЕсли; 
			
			// Поиск/создание документ "УстановкаСкидок"
			ЗапросДок = Новый Запрос;
			ЗапросДок.УстановитьПараметр("ВидСкидки", ВидСкидки);
			ЗапросДок.УстановитьПараметр("Получатель", Стр.ЗначенияФильтра);
			ЗапросДок.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УстановкаСкидок.Ссылка
			|ИЗ
			|	Документ.УстановкаСкидок КАК УстановкаСкидок
			|ГДЕ
			|	УстановкаСкидок.ВидСкидки = &ВидСкидки
			|	И (УстановкаСкидок.Получатель = &Получатель
			|			ИЛИ УстановкаСкидок.ВидСкидки.ВидПолучателя = ЗНАЧЕНИЕ(Перечисление.Видполучателя.ВсеКлиенты))
			|	И УстановкаСкидок.Проведен"
			;
			Если ЗапросДок.Выполнить().Пустой() Тогда
				НовДок = Документы.УстановкаСкидок.СоздатьДокумент();
				НовДок.Дата = ТекущаяДата();
				НовДок.ВидСкидки = ВидСкидки;
				НовДок.ДатаНачалаСкидки = Стр.ДатаНачалаСкидки;
				НовДок.ДатаОкончанияСкидки = Стр.ДатаОкончанияСкидки;
				НовДок.Комментарий = Стр.Комментарий;
				НовДок.Ответственный = Стр.Ответственный;
				НовДок.Получатель = Стр.ЗначенияФильтра;
				НовДок.ПоВсемФилиалам = Истина;
				НовДок.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли; 
			
			// Перенос накоплений по скидкам
			Если Стр.Накопительная Тогда
				
				// Тут просто, когда это документ скидки для одного клиента и сложно, если для всех - все накопления надо перенести
				мсКлиенты = Новый Массив;
				Если ЗначениеЗаполнено(Стр.ЗначенияФильтра) Тогда
					мсКлиенты.Добавить(Стр.ЗначенияФильтра);
					ОборотыПродажКлиенту = РегистрыНакопления.Продажи.Обороты(, ТекущаяДата(), Новый Структура("Клиент", Стр.ЗначенияФильтра), "Клиент", "Сумма");
				Иначе
					ЗапросКлиенты = Новый Запрос;
					ЗапросКлиенты.УстановитьПараметр("ДатаКон", ТекущаяДата());
					ЗапросКлиенты.Текст = 
					"ВЫБРАТЬ
					|	ПродажиОбороты.Клиент,
					|	ПродажиОбороты.СуммаОборот КАК Сумма
					|ИЗ
					|	РегистрНакопления.Продажи.Обороты(, &ДатаКон, , ) КАК ПродажиОбороты"
					;
					ОборотыПродажКлиенту = ЗапросКлиенты.Выполнить().Выгрузить();
					мсКлиенты = ОборотыПродажКлиенту.ВыгрузитьКолонку("Клиент");
				КонецЕсли;
				
				Для Каждого Клиент Из мсКлиенты Цикл
					
					ЗапросДок.УстановитьПараметр("Получатель", Клиент);
					ЗапросДок.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ВводНачальныхОстатковПоНакоплениямСкидокНакопления.Ссылка
					|ИЗ
					|	Документ.ВводНачальныхОстатковПоНакоплениямСкидок.Накопления КАК ВводНачальныхОстатковПоНакоплениямСкидокНакопления
					|ГДЕ
					|	ВводНачальныхОстатковПоНакоплениямСкидокНакопления.Получатель = &Получатель
					|	И ВводНачальныхОстатковПоНакоплениямСкидокНакопления.Ссылка.Проведен"
					;
					Если ЗапросДок.Выполнить().Пустой() Тогда
						
						СтрДокВводаОстатков = ТабДокВводОстатковНакоплений.Найти(ВидСкидки);
						Если СтрДокВводаОстатков = Неопределено Тогда
							ДокВводОстатКовНакоплений = Документы.ВводНачальныхОстатковПоНакоплениямСкидок.СоздатьДокумент();
							ДокВводОстатКовНакоплений.Дата	= ТекущаяДата();
							ДокВводОстатКовНакоплений.Филиал	= УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
							ДокВводОстатКовНакоплений.ВидСкидки = ВидСкидки;
							
							СтрДокВводаОстатков = ТабДокВводОстатковНакоплений.Добавить();
							СтрДокВводаОстатков.ДокументОбъект = ДокВводОстатКовНакоплений;
							СтрДокВводаОстатков.ВидСкидки = ВидСкидки;
						КонецЕсли;
						
						// Получение объёма продаж клиенту - для указания в качестве накопленной суммы
						мсСтрОборотыПродажКлиенту = ОборотыПродажКлиенту.НайтиСтроки(Новый Структура("Клиент", Клиент));
						Если мсСтрОборотыПродажКлиенту.Количество() > 0 Тогда
							Накопление = мсСтрОборотыПродажКлиенту[0].Сумма;
						Иначе
							Накопление = 0;
						КонецЕсли;					
						
						// Добавление строки накоплений
						СтрНакопление = ДокВводОстатКовНакоплений.Накопления.Добавить();
						СтрНакопление.Получатель = Клиент;
						СтрНакопление.Накопление = Накопление;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЦикла; // Перебор старых документов установки скидок
		
		Если ТабДокВводОстатковНакоплений.Количество() <> 0 Тогда
			
			Для Каждого СтрДокВводаОстатков Из ТабДокВводОстатковНакоплений Цикл
				Попытка
					СтрДокВводаОстатков.ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					СтрДокВводаОстатков.ДокументОбъект.Записать();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ!!! Проведите документ ввода начальных остатков по накопительным скидкам!");
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнена конвертация скидок с редакции 1.0 на редакцию 2.0");
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКлючСтрокиОУТоварыМатериалы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОказаниеУслугМатериалы.Ссылка
	|ИЗ
	|	Документ.ОказаниеУслуг.Материалы КАК ОказаниеУслугМатериалы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугТовары.Ссылка
	|ИЗ
	|	Документ.ОказаниеУслуг.Товары КАК ОказаниеУслугТовары"
	;
	// Все документы "Оказание услуг", имеющие строки материалов или товаров
	Выб = Запрос.Выполнить().Выбрать();
	
	сч = 0;
	ОперацийВТранзакции = 500;
	
	НачатьТранзакцию();
	Пока Выб.Следующий() Цикл
		
		Объект = Выб.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
			СтрокаТЧ.КлючСтроки = СтрокаТЧ.НомерСтроки;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.КлючСтроки = СтрокаТЧ.НомерСтроки;
		КонецЦикла;
		
		Попытка 
			Объект.Записать();
		Исключение
		КонецПопытки;
		
		Если сч = ОперацийВТранзакции Тогда
			сч = 0;
			Попытка 
				ЗафиксироватьТранзакцию();
			Исключение
			КонецПопытки;
			НачатьТранзакцию();
		Иначе
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Попытка 
		ЗафиксироватьТранзакцию();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиШаблоныСпециализацийВРегистрСпециализацииШаблоновОсмотра()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииВыработки.Ссылка КАК Специализация,
	|	КатегорииВыработки.удалитьОсновнойШаблонОсмотра КАК ШаблонОсмотра
	|ИЗ
	|	Справочник.КатегорииВыработки КАК КатегорииВыработки
	|ГДЕ
	|	НЕ КатегорииВыработки.удалитьОсновнойШаблонОсмотра.Ссылка ЕСТЬ NULL "
	;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		НаборЗаписей = РегистрыСведений.СпециализацииШаблоновОсмотра.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Основной = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренастроитьОтображениеКалендаряТолькоУслуги()
	
	Если Не ЗначениеЗаполнено(Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка.ВидОтображения) Тогда
			
		ЭлементКонф = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка.ПолучитьОбъект();
		ЭлементКонф.ВидОтображения = Перечисления.ВидыОтображенияЯчеек.КлиентУслугиВместе;
		ЭлементКонф.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеДо2_0_5_1()
	
	// Новые параметры учетной политики
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РаботаСЗубнымиКартами");
	ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИспользоватьЛабораторныеИсследования");
	ЗаполнениеНовыхПараметровУчета(СтруктураПараметров,,Истина);
	
	// Сроки годности
	ЗаполнитьДанныеСвойстваСрокаГодности();
	
	// Перенос реквизита документа плана левчения в измерение
	нзПланыЛечения = РегистрыСведений.ПланыЛечения.СоздатьНаборЗаписей();
	нзПланыЛечения.Прочитать();
	тзПланыЛечения = нзПланыЛечения.Выгрузить();
	
	тзПланыЛечения.ЗагрузитьКолонку(тзПланыЛечения.ВыгрузитьКолонку("удалитьДокументРегистратор"),"ДокументРегистратор");
	тзПланыЛечения.ЗаполнитьЗначения(Документы.Прием.ПустаяСсылка(), "удалитьДокументРегистратор");
	
	нзПланыЛечения.Загрузить(тзПланыЛечения);
	нзПланыЛечения.Записать();
	                                                 
КонецПроцедуры

Процедура ЗаполнитьДанныеСвойстваСрокаГодности()
	
	СвойствоСрокГодности = ПланыВидовХарактеристик.СвойстваОбъектов.УдалитьСрокГодности.ПолучитьОбъект();
	СвойствоСрокГодности.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
	СвойствоСрокГодности.Записать();
	
	Запись = РегистрыСведений.НазначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Свойство = СвойствоСрокГодности.Ссылка;
	Запись.Объект	= Справочники.Номенклатура.ПустаяСсылка();
	Запись.Записать(Истина);
	
КонецПроцедуры

Процедура УстановитьПризнакРучнойКорректировкиБонусов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипСкидкиБонусы", Перечисления.ТипыСкидок.Бонусы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСкидок.Ссылка
	|ПОМЕСТИТЬ СкидкиБонусы
	|ИЗ
	|	Справочник.ВидыСкидок КАК ВидыСкидок
	|ГДЕ
	|	ВидыСкидок.ТипСкидки = &ТипСкидкиБонусы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОказаниеУслугСкидки.Ссылка КАК Ссылка,
	|	ОказаниеУслугСкидки.НомерСтроки
	|ИЗ
	|	Документ.ОказаниеУслуг.Скидки КАК ОказаниеУслугСкидки
	|ГДЕ
	|	ОказаниеУслугСкидки.КоличествоБонусов <> 0
	|	И ОказаниеУслугСкидки.КоличествоБонусов <> ОказаниеУслугСкидки.БонусМакс
	|	И ОказаниеУслугСкидки.Скидка В
	|			(ВЫБРАТЬ
	|				СкидкиБонусы.Ссылка
	|			ИЗ
	|				СкидкиБонусы)
	|ИТОГИ ПО
	|	Ссылка"
	;
	ВыбДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РазмерТранзакции = 250;
	счОпераций		 = 0;
	
	НачатьТранзакцию();
	Пока ВыбДокументы.Следующий() Цикл

		ДокументОбъект = ВыбДокументы.Ссылка.ПолучитьОбъект();
		ВыбСтроки = ВыбДокументы.Выбрать();
		Пока ВыбСтроки.Следующий() Цикл
			
			ДокументОбъект.Скидки[ВыбСтроки.НомерСтроки-1].РучноеРедактирование = Истина;
			
		КонецЦикла;
		
		ДокументОбъект.Записать();
		счОпераций = счОпераций + 1;
		Если счОпераций = РазмерТранзакции Тогда
			ЗафиксироватьТранзакцию();
			счОпераций = 0;
			НачатьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииОказанияУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОказаниеУслуг.Ссылка
		|ИЗ
		|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
		|ГДЕ
		|	ОказаниеУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОказанияУслуг.ПустаяСсылка)";

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ДокОбъект.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;
			ДокОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПерезаполнитьУстановкиГрафиковПодРегистрГрафикиРаботы()
	
	Выб = Документы.УстановкаГрафиковРаботы.Выбрать();
	Пока Выб.Следующий() Цикл
		
		// Удаление строк с пустыми данными графика
		Объект = Выб.ПолучитьОбъект();
		УдаляемыеСтроки = Новый Массив;
		
		УчастникиДокумента = Новый Массив;
		
		Для Каждого СтрокаГрафика Из Объект.ГрафикиРаботы Цикл
			
			Если ЗначениеЗаполнено(СтрокаГрафика.удалитьСотрудникОборудование)
				И Объект.Участники.Найти(СтрокаГрафика.удалитьСотрудникОборудование) = Неопределено
			Тогда
				Объект.Участники.Добавить().Участник = СтрокаГрафика.удалитьСотрудникОборудование;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаГрафика.удалитьСотрудникОборудование) = Тип("СправочникСсылка.Сотрудники") Тогда
				СтрокаГрафика.Сотрудник = СтрокаГрафика.удалитьСотрудникОборудование;
			Иначе
				СтрокаГрафика.Кабинет = СтрокаГрафика.удалитьСотрудникОборудование;
			КонецЕсли;
			
			Если  Не ЗначениеЗаполнено(СтрокаГрафика.Смена)
				И Не ЗначениеЗаполнено(СтрокаГрафика.ВремяНачала) 
				И Не ЗначениеЗаполнено(СтрокаГрафика.ВремяОкончания)
			Тогда
				УдаляемыеСтроки.Добавить(СтрокаГрафика);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаГрафика Из УдаляемыеСтроки Цикл
			Объект.ГрафикиРаботы.Удалить(СтрокаГрафика);
		КонецЦикла;
		
		Попытка
			Объект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось автоматически обновить данные документа " + Выб.Ссылка);
			Продолжить;
		КонецПопытки;
		
		// Переформирование движений
		Если Выб.Проведен Тогда
			Объект.СфомироватьДвиженияПоРегистрам(Ложь);
			Попытка
				Объект.Движения.ГрафикиРаботы.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось автоматически обновить данные документа " + Выб.Ссылка);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТЧШаблоныПриемов()
	
	РазмерТранзакции = 250;
	счОпераций		 = 0;
	
	НачатьТранзакцию();
	
	Выб = Документы.Прием.Выбрать();
	Пока Выб.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выб.ШаблонОсмотра) 
			И Выб.ШаблоныПриема.Количество() = 0
		Тогда
			ДокументОбъект = Выб.ПолучитьОбъект();
			ДокументОбъект.ШаблоныПриема.Добавить().ШаблонПриема = Выб.ШаблонОсмотра;
			ДокументОбъект.Записать();
			
			счОпераций = счОпераций + 1;
			Если счОпераций = РазмерТранзакции Тогда
				ЗафиксироватьТранзакцию();
				счОпераций = 0;
				НачатьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьСответсвиеПараметровHTMLШаблоновПриема()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидШаблона", Перечисления.ВидыШаблонов.HTMLШаблон);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныHTML.Ссылка,
	|	КОЛИЧЕСТВО(ШаблоныHTMLСоответствияПараметрам.Параметр) КАК Параметр
	|ИЗ
	|	Справочник.ШаблоныHTML КАК ШаблоныHTML
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML.СоответствияПараметрам КАК ШаблоныHTMLСоответствияПараметрам
	|		ПО ШаблоныHTMLСоответствияПараметрам.Ссылка = ШаблоныHTML.Ссылка
	|ГДЕ
	|	ШаблоныHTML.ВидШаблона = &ВидШаблона
	|
	|СГРУППИРОВАТЬ ПО
	|	ШаблоныHTML.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ШаблоныHTMLСоответствияПараметрам.Параметр) = 0
	|"
	;
	Выб = Запрос.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		
		Объект = Выб.Ссылка.ПолучитьОбъект();
		
		HTMLДокумент = Новый COMОбъект("HtmlFile");
		HTMLДокумент.open("text/html");
		HTMLДокумент.write(Объект.ТекстHTML);
		HTMLДокумент.close();
		
		Параметры = Новый Массив;
		
		СписокЭлементов = HTMLДокумент.GetElementsByTagName("A");
		Для Каждого Элемент Из СписокЭлементов Цикл
			
			Параметры.Добавить(Элемент.id);
			
		КонецЦикла;
		
		СписокФлажков = HTMLДокумент.GetElementsByTagName("INPUT");
		Для Каждого Элемент Из СписокФлажков Цикл
			
			Если  Элемент.type = "checkbox" 
				И ЗначениеЗаполнено(Элемент.id) 
			Тогда 
				Параметры.Добавить(Элемент.id);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокПолейВыбора = HTMLДокумент.GetElementsByTagName("SELECT");
		Для Каждого Элемент Из СписокПолейВыбора Цикл
			
			Параметры.Добавить(Элемент.id);
			
		КонецЦикла;
		
		СписокПолейВыбора = HTMLДокумент.GetElementsByTagName("TEXTAREA");
		Для Каждого Элемент Из СписокПолейВыбора Цикл
			Параметры.Добавить(Элемент.id);
		КонецЦикла;
		
		Объект.СоответствияПараметрам.Очистить();
		Для Каждого СтрокаИД Из Параметры Цикл 
			Параметр = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИД));
			Если Объект.СоответствияПараметрам.НайтиСтроки(Новый Структура("Параметр", Параметр)).Количество() = 0 Тогда
				НоваяСтрока = Объект.СоответствияПараметрам.Добавить();
				НоваяСтрока.Параметр = Параметр;	
			КонецЕсли;
		КонецЦикла;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьДвиженияИсследований()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьИсследования.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрСведений.УдалитьИсследования КАК УдалитьИсследования
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УдалитьИсследования.Регистратор";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.Прием") Тогда
			
			ДокОб = Выборка.Регистратор.ПолучитьОбъект();
			
			СтарыеИсследования = ДокОб.Движения.УдалитьИсследования;
			СтарыеИсследования.Прочитать();
			
			ТабСтарыеИсследования = СтарыеИсследования.Выгрузить();
			ТабСтарыеИсследования.Сортировать("Статус Убыв");
			
			ТабНовыеИсследования = ДокОб.Движения.ЛабораторныеИсследования.Выгрузить();
			
			Для Каждого СтрокаСтарогоИсследования Из ТабСтарыеИсследования Цикл
				Если ТабНовыеИсследования.Найти(СтрокаСтарогоИсследования.ИД, "ИД") = Неопределено Тогда
					СтрокаНовогоИсследования = ТабНовыеИсследования.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНовогоИсследования, СтрокаСтарогоИсследования);
				КонецЕсли;
			КонецЦикла;			
			
			ДокОб.Движения.ЛабораторныеИсследования.Загрузить(ТабНовыеИсследования);
			ДокОб.Движения.ЛабораторныеИсследования.Записать();
			
		ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ДействияНадАнализами") Тогда
			ДокОб = Выборка.Регистратор.ПолучитьОбъект();
			ДокОб.ДвиженияПоРегистрамИсследований();
			ДокОб.Движения.ЛабораторныеИсследования.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезагрузитьСправочникВредныхФакторов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПереченьВредныхФакторовИРабот.Ссылка
	|ИЗ
	|	Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		ДвоичныеДанныеВыгрузки = Справочники.ПереченьВредныхФакторовИРабот.ПолучитьМакет("ПервоначальноеНаполнение");
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено заполенние вредных и опасных факторов и условий работ");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);		
		
КонецПроцедуры

Процедура ПроставитьКлючСтрокиДиагнозамПриемов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемДиагнозы.Ссылка КАК Ссылка,
	|	ПриемДиагнозы.НомерСтроки
	|ИЗ
	|	Документ.Прием.Диагнозы КАК ПриемДиагнозы
	|ГДЕ
	|	ПриемДиагнозы.КлючСтроки = 0
	|ИТОГИ ПО
	|	Ссылка"
	;
	ВыбДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыбДокументы.Следующий() Цикл
		
		Документ = ВыбДокументы.Ссылка.ПолучитьОбъект();
		
		ВыбСтрокиТЧ = ВыбДокументы.Выбрать();
		Пока ВыбСтрокиТЧ.Следующий() Цикл
			
			Документ.Диагнозы[ВыбСтрокиТЧ.НомерСтроки - 1].КлючСтроки = 
				ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Документ.Диагнозы);
			
		КонецЦикла;
		
		Попытка
			Документ.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СоздатьВидМедкарты025у()
	
	Выборка = Справочники.ВидыМедицинскихКарт.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Медкарта = Справочники.ВидыМедицинскихКарт.СоздатьЭлемент();
		Медкарта.Наименование = "Медицинская карта амбулаторного больного (Форма №025/у-приказ 834н) для А5";
		Медкарта.НачальныйНомер = 1;
		Медкарта.Макет = "МедицинскаяКарта025у_А5_приказ834н";
		
		Медкарта.ТипКарты = Перечисления.ТипыМедицинскихКарт.Амбулаторная;
		
		Медкарта.Записать();
		
		нзУП = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
		нзУП.Прочитать();
		Если нзУП.Количество() <> 0 Тогда
			нзУП[0].ОсновнойВидМедКарт = Медкарта.Ссылка;
			нзУП.Записать();
		КонецЕсли;
		
		// Загрузка значений параметров медкарт
		ДвоичныеДанныеВыгрузки = Справочники.ВидыМедицинскихКарт.ПолучитьМакет("ПараметрыМедкарты025Приказ834н");
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
		
	КонецЕсли;
	
	// Загрузка разделов медкарты 025у.
	ДвоичныеДанныеВыгрузки = Справочники.РазделыМедицинскихКарт.ПолучитьМакет("РазделыМедкарты025у");
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки);
	
КонецФункции

Процедура ЗагрузитьАнамнезЖизни()
	
	Файл = ПолучитьИмяВременногоФайла("xml");
	Справочники.ШаблоныHTML.ПолучитьМакет("ШаблонАнамнезЖизни").Записать(Файл);
	
	Попытка
	Справочники.ШаблоныHTML.Импортировать(Файл);
	
	ШаблонАнамнезаЖизни = Справочники.ШаблоныHTML.НайтиПоНаименованию("Анамнез жизни");
	Если ЗначениеЗаполнено(ШаблонАнамнезаЖизни) Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ШаблонАнамнезаЖизни", ШаблонАнамнезаЖизни);
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров);
		
	КонецЕсли;
	Исключение КонецПопытки;
	
	ЗаполнитьПараметрПакетаФразРеакцийНаАллергены();
	
КонецПроцедуры

Процедура ЗаполнитьПараметрПакетаФразРеакцийНаАллергены()
	
	ПакетСоставныхФразРеакцииНаАллергены = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ПакетСоставныхФразРеакцииНаАллергены");
	
	Если Не ЗначениеЗаполнено(ПакетСоставныхФразРеакцииНаАллергены) Тогда
		
		ПакетСоставныхФразРеакцииНаАллергены = Справочники.ПакетыСоставныхФраз.НайтиПоНаименованию("Реакции на аллергены", Истина);
		Если ЗначениеЗаполнено(ПакетСоставныхФразРеакцииНаАллергены) Тогда
			УправлениеНастройкамиПереопределяемый.УстановитьПараметрУчета("ПакетСоставныхФразРеакцииНаАллергены", ПакетСоставныхФразРеакцииНаАллергены);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭталонныеШаблоныЭтикетокЦенников()
	
	СоздатьШаблонЭтикетки(Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ЭталонныйМакетЭтикетка"),"Этикетка со штрихкодом");
	СоздатьШаблонЭтикетки(Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ЭталонныйМакетЦенник"),"Ценник без штрихкода");
	
КонецПроцедуры

Процедура СоздатьШаблонЭтикетки(ШаблонТабДок, Наименование)
	
	Если Не ЗначениеЗаполнено(Справочники.ШаблоныЭтикетокИЦенников.НайтиПоНаименованию(Наименование)) Тогда
	
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ОтображатьТекст", Истина);
		ДанныеШаблона.Вставить("РазмерШрифта", 8);
		ДанныеШаблона.Вставить("УголПоворота", 0);
		
		ДанныеШаблона.Вставить("ПолеТабличногоДокумента", ШаблонТабДок);
		ШаблонТабДок.ПолеСверху  = 0;
		ШаблонТабДок.ПолеСлева   = 0;
		ШаблонТабДок.ПолеСнизу   = 0;
		ШаблонТабДок.ПолеСправа  = 0;
		ШаблонТабДок.АвтоМасштаб = Истина;
		
		ЭлементШаблон = Справочники.ШаблоныЭтикетокИЦенников.СоздатьЭлемент();
		ЭлементШаблон.Наименование = Наименование;
		ЭлементШаблон.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенник;
		ЭлементШаблон.Шаблон = Новый ХранилищеЗначения(Справочники.ШаблоныЭтикетокИЦенников.СтруктураМакетаШаблона(ДанныеШаблона));
		ЭлементШаблон.Записать();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСправочникСмен()
	
	ЧерныйЦвет = Новый Цвет (0, 0, 0);
	мУчетнаяПолитика =  УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Если Не мУчетнаяПолитика.ОтдельнаяКолонкаРабочегоВремени Тогда
		ЦветРабочегоВремени = Новый Цвет(255, 255, 255);
	Иначе
		ЦветРабочегоВремени = мУчетнаяПолитика.ОсновнойЦветНерабочегоВремени.Получить();
	КонецЕсли;
	РабочееВремяОбъект = Справочники.ВидыВремениГрафика.РабочееВремя.ПолучитьОбъект();
	Если РабочееВремяОбъект.Цвет.Получить() = ЧерныйЦвет 
		Или РабочееВремяОбъект.Цвет.Получить() = Неопределено
	Тогда
		РабочееВремяОбъект.Цвет = Новый ХранилищеЗначения(ЦветРабочегоВремени);
		РабочееВремяОбъект.Записать();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СменыПериодыСмены.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
		|ГДЕ
		|	СменыПериодыСмены.ВидВремени = &ПустаяСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СменыПериодыСмены.Ссылка";
    Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ВидыВремениГрафика.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СменаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		флагНужнаЗапись = Ложь;
		
		// Склеивание накладывающихся периодов смены
		ПериодыСмены = СменаОбъект.ПериодыСмены.Выгрузить();
		ПериодыСмены.Сортировать("ВремяНачала, ВремяОкончания Убыв");
		НовыеПериодыСмены = ПериодыСмены.СкопироватьКолонки();
		
		Для Каждого Период Из СменаОбъект.ПериодыСмены Цикл
			
			флСклеен = Ложь;
			Для Каждого НовыйПериод Из НовыеПериодыСмены Цикл
				Если Период.ВремяНачала >= НовыйПериод.ВремяНачала
					И Период.ВремяНачала <= НовыйПериод.ВремяОкончания
				Тогда
					НовыйПериод.ВремяОкончания = Макс(Период.ВремяОкончания, НовыйПериод.ВремяОкончания);
					флСклеен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не флСклеен Тогда
				// Не продолжили в цикле - не с чем склеить
				ЗаполнитьЗначенияСвойств(НовыеПериодыСмены.Добавить(), Период);
			КонецЕсли;
		КонецЦикла;
		
		СменаОбъект.ПериодыСмены.Загрузить(НовыеПериодыСмены);
		
		// Простановка вида времени в периоды смены
		Для Каждого Период Из СменаОбъект.ПериодыСмены Цикл
			Если Не ЗначениеЗаполнено(Период.ВидВремени) Тогда
				Период.ВидВремени = Справочники.ВидыВремениГрафика.РабочееВремя;
				Период.Название = "";
				флагНужнаЗапись = Истина;
			КонецЕсли;
		КонецЦикла;
		Если флагНужнаЗапись Тогда
			СменаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтарыеГрафики()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УстановкаГрафиковРаботыГрафикиРаботы.Ссылка КАК Ссылка,
		|	УстановкаГрафиковРаботыГрафикиРаботы.Ссылка.Проведен,
		|	УстановкаГрафиковРаботыГрафикиРаботы.Ссылка.Ответственный
		|ИЗ
		|	Документ.УстановкаГрафиковРаботы.ГрафикиРаботы КАК УстановкаГрафиковРаботыГрафикиРаботы
		|ГДЕ
		|	УстановкаГрафиковРаботыГрафикиРаботы.ВидВремени = &ПустаяСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УстановкаГрафиковРаботыГрафикиРаботы.Ссылка,
		|	УстановкаГрафиковРаботыГрафикиРаботы.Ссылка.Проведен";
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ВидыВремениГрафика.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
    РабочееВремя = Справочники.ВидыВремениГрафика.РабочееВремя;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Графики = ДокументОбъект.ГрафикиРаботы;
		инд = 0;
		ПоследнийЭлемент = Графики.Количество() = 0;
		Пока НЕ ПоследнийЭлемент Цикл
			СтрокаГрафика = Графики[инд];
			Если НЕ ЗначениеЗаполнено(СтрокаГрафика.ВидВремени) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаГрафика.Смена) Тогда
					СтрокаГрафика.ВидВремени = РабочееВремя;
					СтрокаГрафика.ДатаСоздания = ТекущаяДата();
					строкаГрафика.Автор = ПараметрыСеанса.ТекущийПользователь;
					инд = инд + 1;  // Исправили строку, шагаем дальше
				Иначе 
					// Вместо 1 строки со сменой получим ее содержимое и преобразуем в строки
					ПериодыСмены = СтрокаГрафика.Смена.ПериодыСмены;
					Для каждого Период из ПериодыСмены Цикл
						новСтрокаГрафика							= Графики.Добавить();	
						ЗаполнитьЗначенияСвойств(новСтрокаГрафика,Период);
						новСтрокаГрафика.Дата						= СтрокаГрафика.Дата;
						новСтрокаГрафика.Автор						= ДокументОбъект.Ответственный;
						новСтрокаГрафика.ДатаСоздания				= ТекущаяДата();
						новСтрокаГрафика.Сотрудник					= СтрокаГрафика.Сотрудник;
						новСтрокаГрафика.Кабинет					= СтрокаГрафика.Кабинет;
					КонецЦикла;
					// Удалили  строку, следующая стала текущей - стоим.
					Графики.Удалить(СтрокаГрафика);
				КонецЕсли;
			Иначе
				инд = инд + 1;  // В строке все впорядке - шагаем дальше
			КонецЕсли;
		ПоследнийЭлемент = ?(инд > (Графики.Количество() - 1),Истина, Ложь)	
		КонецЦикла;
		Если ВыборкаДетальныеЗаписи.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНастройкиВыводаВКалендарь()
	
	пчПоляОтображения = Перечисления.ПоляОтображенияГрафикаВРасписании;
	
	НастройкаОбъект = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка.ПолучитьОбъект();			   
	
	Строка = НастройкаОбъект.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
	Строка.Поле = пчПоляОтображения.ВидВремениГрафика;
	Строка.ТолькоВПервойСтроке = Истина;
	
	Если НастройкаОбъект.удалитьВыводитьВремяВСвободныеЯчейкиЖЗ Тогда 
		Строка = НастройкаОбъект.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
		Строка.Поле = пчПоляОтображения.Время;
	КонецЕсли;
	
	Если НастройкаОбъект.удалитьВыводитьКонтручастникаГрафикаВЖурналеЗаписи тогда
		Строка = НастройкаОбъект.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
		Строка.Поле = пчПоляОтображения.КабинетСотрудник;
		Строка.ТолькоВПервойСтроке = НастройкаОбъект.удалитьВыводитьКонтручастникаГрафикаВПервойСтроке;
	КонецЕсли;
	
	НастройкаОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьФлагБезопасныйРежимВнешнимОбработкам()
	
	Выборка = Справочники.ВнешниеОбработки.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ЭтоГруппа Тогда
			Объект = Выборка.ПолучитьОбъект();
			Объект.БезопасныйРежим = Истина;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьМаршрутЛабораторныхИсследований()
	
	МаршрутАнализа  = ПолучитьОбщийМакет("МаршрутАнализов");
	Филиал = ПланыОбмена.Полный.ЭтотУзел().Филиал;
	
	Если ЗначениеЗаполнено(Филиал) Тогда 
		НЗ = РегистрыСведений.МаршрутыАнализов.СоздатьНаборЗаписей();
		НЗ.Отбор.Филиал.Установить(Филиал);
		Для Каждого графЭлемент Из МаршрутАнализа.ЭлементыГрафическойСхемы Цикл
			Если ТипЗнч(графЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
				НоваяЗапись = НЗ.Добавить();
				НоваяЗапись.Филиал = Филиал;
				НоваяЗапись.Активирован = Не графЭлемент.ПрозрачныйФон;
				НоваяЗапись.Шаг = ОпределитьШагВПеречислении(графЭлемент.Наименование);
				НоваяЗапись.ИмяЭлемента = графЭлемент.Имя;
			КонецЕсли;
		КонецЦикла;
		НЗ.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьШагВПеречислении(НаименованиеЭлемента)
	Если НаименованиеЭлемента = "Назначение" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.Назначение;
	ИначеЕсли НаименованиеЭлемента = "Забор" Тогда 
		Возврат Перечисления.ШагиМаршрутаАнализов.Забор;
	ИначеЕсли НаименованиеЭлемента = "Получение из другой  клиники" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.ПолучениеИзДругойКлиники;
	ИначеЕсли НаименованиеЭлемента = "Анализ чужих материалов" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.АнализЧужихМатериалов;
	ИначеЕсли НаименованиеЭлемента = "Передача результатов исследования источнику" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.ПередачаРезультатовИсследованияИсточнику;
	ИначеЕсли НаименованиеЭлемента = "Анализ своих материалов" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.АнализСвоихМатериалов;
	ИначеЕсли НаименованиеЭлемента = "Обработка" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.Обработка;
	ИначеЕсли НаименованиеЭлемента = "Передача в свою либо стороннюю лабораторию" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.ПередачаВСвоюЛибоСтороннююЛабораторию;
	ИначеЕсли НаименованиеЭлемента = "Получение результатов из лаборатории" Тогда
		Возврат Перечисления.ШагиМаршрутаАнализов.ПолучениеРезультатовИзЛаборатории;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьНомерЧекаРКОИнкассации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.ВидОперации = &ВидОперации
	|	И РасходныйКассовыйОрдер.НомерЧекаККМ = 0"
	;
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ДокументОбъект = Выб.Ссылка.ПолучитьОбъект();
		ДокументОбъект.НомерЧекаККМ = -1;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьНастройкуПользователей(ИмяНастройки, ЗначениеНастройки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройка = ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	
	НаборЗаписей.Прочитать();
	ТаблицаНастройки = НаборЗаписей.Выгрузить();
	
	Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ЭтоГруппа Тогда
			СтрокаТаблицы = ТаблицаНастройки.Найти(Выборка.Ссылка, "Пользователь");
			Если СтрокаТаблицы = Неопределено Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Настройка	= Настройка;
				Запись.Пользователь	= Выборка.Ссылка;
				Запись.Значение		= ЗначениеНастройки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьМедкарту025уПриказ834н()
	
	УстановитьПривилегированныйРежим(Истина);
	
	мсВидыМедкартДляОбновленияПараметровМедкарт = Новый Массив;
	Выб = Справочники.ВидыМедицинскихКарт.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Не Выб.ИспользуетсяВнешняяПФ Тогда
			Если Выб.Макет = "МедицинскаяКарта025у04" Тогда
				Объект = Выб.ПолучитьОбъект();
				Объект.Макет = "МедицинскаяКарта025у_А5_приказ834н";
				Объект.Записать();
				мсВидыМедкартДляОбновленияПараметровМедкарт.Добавить(Выб.Ссылка);
			ИначеЕсли Выб.Макет = "МедицинскаяКарта025у04_А4" Тогда
				Объект = Выб.ПолучитьОбъект();
				Объект.Макет = "МедицинскаяКарта025у_А4_приказ834н";
				Объект.Записать();
				мсВидыМедкартДляОбновленияПараметровМедкарт.Добавить(Выб.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Загрузка значений параметров медкарт
	ДвоичныеДанныеВыгрузки = Справочники.ВидыМедицинскихКарт.ПолучитьМакет("ПараметрыМедкарты025Приказ834н");
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обновлены форматы видов медицинских карт базы данных согласно приказу 834н от 12.12.2014");
		
КонецПроцедуры

Процедура СохранитьНастройкуНеПоказыватьПомощникПервоначальногоЗаполнения()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПомощникПервоначальногоЗаполнения", "Показывать", Ложь);

КонецПроцедуры

Процедура ЗаполнитьВидыСобытийВидыСообщений()
	
	СоотвВидыСобытий = Новый Соответствие;
	СоотвВидыСобытий.Вставить(Перечисления.фонВидыЗвонков.Входящий, Перечисления.ВидыСобытий.ВходящийЗвонок);
	СоотвВидыСобытий.Вставить(Перечисления.фонВидыЗвонков.Исходящий, Перечисления.ВидыСобытий.ИсходящийЗвонок);
	СоотвВидыСобытий.Вставить(Перечисления.фонВидыЗвонков.Внутренний, Перечисления.ВидыСобытий.ВходящийЗвонок);
	СоотвВидыСобытий.Вставить(Перечисления.фонВидыЗвонков.ПустаяСсылка(), Перечисления.ВидыСобытий.ВходящийЗвонок);
	
	ВыборкаЗвонки = Документы.Событие.Выбрать();
	Пока ВыборкаЗвонки.Следующий() Цикл
		ЗвонокОбъект = ВыборкаЗвонки.ПолучитьОбъект();
		Если ВыборкаЗвонки.ВидСобытия.Пустая() Тогда
			ЗвонокОбъект.ВидСобытия = СоотвВидыСобытий[ЗвонокОбъект.удалитьВидЗвонка];
		КонецЕсли;
		ЗвонокОбъект.ЗвонокЗавершен = Истина;
		ЗвонокОбъект.ЗвонокНачат = Истина;
		ЗвонокОбъект.Записать();
		
	КонецЦикла;
	
	ВыборкаВидыСообщений = Справочники.ВидыСообщенийРассылки.Выбрать();
	Пока ВыборкаВидыСообщений.Следующий() Цикл
		Если ВыборкаВидыСообщений.СпособОтправки.Пустая() Тогда
			ВидСообщенияОбъект = ВыборкаВидыСообщений.ПолучитьОбъект();
			ВидСообщенияОбъект.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS;
			ВидСообщенияОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносКлиникиМестонахожденияМедКартВРесурсРегистра()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестонахожденияМедкарт.Период,
	|	МестонахожденияМедкарт.МедицинскаяКарта,
	|	МестонахожденияМедкарт.УдалитьКлиника
	|ИЗ
	|	РегистрСведений.МестонахожденияМедкарт КАК МестонахожденияМедкарт
	|ГДЕ
	|	МестонахожденияМедкарт.УдалитьКлиника <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СчТр = 500;
	Сч = 0;
	
	Запись = РегистрыСведений.МестонахожденияМедкарт.СоздатьМенеджерЗаписи();
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Клиника = Запись.УдалитьКлиника;
			Запись.УдалитьКлиника = Неопределено;
			Запись.Записать();
		КонецЕсли;
		
		Сч = Сч + 1;
		
		Если Сч = СчТр Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			Сч = 0;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьНасройкиБитФон2_0_21_5()
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.бит_БитфонНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Таблица = НаборЗаписей.Выгрузить();
	Таблица.ЗаполнитьЗначения(Истина, "СоздаватьСобытиеПриВходящемЗвонке, СоздаватьСобытиеПриИсходящемЗвонке");
	НаборЗаписей.Загрузить(Таблица);
	НаборЗаписей.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьПравилаОбменаПланаОбменаСФилиалами(РИБПравилаОбновлены = Ложь)
	
	Если Не РИБПравилаОбновлены Тогда
		ОбменДаннымиСервер.ЗагрузитьПравилаДляОбменаДанными(Ложь, "ОбменСФилиалами", Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов, "ПравилаОбмена");
		РИБПравилаОбновлены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьТипУПСписыватьВМинусБулевоВЧисло()
	
	нзУП = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	нзУП.Прочитать();
	Если нзУП.Количество() <> 0 Тогда
		ТекущееЗначение = нзУП[0]["СписыватьПартииВМинус"];
		Если ТекущееЗначение = Ложь Тогда
			НовоеЗначение = 0;
		Иначе
			НовоеЗначение = 1;
		КонецЕсли;
		
		нзУП[0]["СписыватьПартииВМинус"] = НовоеЗначение;
		нзУП.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФилиалМедкарт()
	
	РазмерТранзакции = 300;
	РазмерВыборкиЗапроса = 20000;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Филиал", Справочники.Филиалы.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерВыборкиЗапроса,"ЧГ=") + " 
	|	МедицинскиеКарты.Ссылка
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|ГДЕ
	|	МедицинскиеКарты.Филиал = &Филиал"
	;
	Филиал = ПланыОбмена.Полный.ЭтотУзел().Филиал;
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Сч = 0;
		НачатьТранзакцию();
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.Филиал = Филиал;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
			Сч = Сч + 1;
			Если Сч >= РазмерТранзакции Тогда
				НачатьТранзакцию();
				ЗафиксироватьТранзакцию();
				Сч = 0;
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Если Выборка.Количество() < РазмерВыборкиЗапроса Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОграничениеДоступаНаУровнеЗаписейВыполнитьПервоначальноеЗаполнение(ИмяРегистра = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустойФилиал = Справочники.Филиалы.ПустаяСсылка();
	
	Если ИмяРегистра = Неопределено Тогда
		// Заполнение филиала из узла полного плана обмена у пользователей, у которых не заполнен.
		ФилиалУзла = ПланыОбмена.Полный.ЭтотУзел().Филиал;
		Если ЗначениеЗаполнено(ФилиалУзла) Тогда
			
			НастройкаОсновнойФилиал = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойФилиал;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Настройка", НастройкаОсновнойФилиал);
			Запрос.УстановитьПараметр("ПустойФилиал", ПустойФилиал);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|		ПО (НастройкиПользователей.Настройка = &Настройка)
			|			И НастройкиПользователей.Пользователь = Пользователи.Ссылка
			|ГДЕ
			|	НЕ Пользователи.ПометкаУдаления
			|	И (НастройкиПользователей.Значение ЕСТЬ NULL
			|			ИЛИ НастройкиПользователей.Значение = &ПустойФилиал)"
			;
			Выб = Запрос.Выполнить().Выбрать();
			
			НачатьТранзакцию();
			Пока Выб.Следующий() Цикл
				Запись = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Выб.Ссылка;
				Запись.Настройка = НастройкаОсновнойФилиал;
				Запись.Значение = ФилиалУзла;
				Запись.Записать(Истина);
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Заполнение филиала в регистрах накопления
	РегистрыНакопленияСФилиалом = Новый Массив;
	Если ИмяРегистра = Неопределено Тогда
		Для Каждого МетаданныеРегистра Из Метаданные.РегистрыНакопления Цикл
			Если МетаданныеРегистра.Измерения.Найти("Филиал") <> Неопределено Тогда
				РегистрыНакопленияСФилиалом.Добавить(МетаданныеРегистра.Имя);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РегистрыНакопленияСФилиалом.Добавить(ИмяРегистра);	
	КонецЕсли;	
	
	РазмерТранзакции = 300;
	РазмерВыборкиЗапроса = 20000;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерВыборкиЗапроса, "ЧГ=") + "
	|	Регистр.Регистратор,
	|	Регистр.Регистратор.Филиал КАК Филиал
	|ИЗ
	|	РегистрНакопления.%ИмяРегистра% КАК Регистр
	|ГДЕ
	|	Регистр.НомерСтроки = 1
	|	И Регистр.Филиал = &ПустойФилиал"
	;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойФилиал", ПустойФилиал);
	
	Для Каждого ИмяРегистра Из РегистрыНакопленияСФилиалом Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяРегистра%", ИмяРегистра);
		Сч = 0;
		
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		
		Пока Истина Цикл
			Выборка = Запрос.Выполнить().Выбрать();
			НачатьТранзакцию();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Филиал) Тогда
					
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					НаборЗаписей.Прочитать();
					Для Каждого Запись Из НаборЗаписей Цикл
						Запись.Филиал = Выборка.Филиал;
					КонецЦикла;
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
					
					Сч = Сч + 1;
					Если Сч >= РазмерТранзакции Тогда
						ЗафиксироватьТранзакцию();
						НачатьТранзакцию();
						Сч = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			Если Выборка.Количество() < РазмерВыборкиЗапроса Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаписатьШаблоныПриема()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выб = Справочники.ШаблоныHTML.Выбрать();
	Пока Выб.Следующий() Цикл
		Объект = Выб.ПолучитьОбъект();
		Объект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеЧековККМОказанийУслуг()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазмерТранзакции = 200;
	РазмерВыборкиЗапроса = 10000;
	ПредельноДопустимоеВремяВыполнения = 600; // Секунд.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерВыборкиЗапроса, "ЧГ=") + "
	|	ДокументПродажи.Ссылка
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ДокументПродажи
	|ГДЕ
	|	СостояниеЧековККМ = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековККМ.ПустаяСсылка)
	|	И Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументПродажи.Дата УБЫВ"
	;
	
	ДатаНачалаВыполнения = ТекущаяДата();
	Пока Истина Цикл
		
		Сч = 0;
	
		Выборка = Запрос.Выполнить().Выбрать();
		НачатьТранзакцию();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
			Сч = Сч + 1;
			Если Сч >= РазмерТранзакции Тогда
				ЗафиксироватьТранзакцию();
				
				Если ТекущаяДата() > (ДатаНачалаВыполнения + ПредельноДопустимоеВремяВыполнения) Тогда
					// Реквизит второстепенный, допускается обновить не полностью, если сервер слабый.
					Возврат;
				КонецЕсли;
				
				НачатьТранзакцию();
				Сч = 0;
			КонецЕсли;
			
		КонецЦикла;
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если Выборка.Количество() < РазмерВыборкиЗапроса Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитРазмещениеЯчеекКалендаряПланирования()
	
	ОсновнаяНастройка = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка.ПолучитьОбъект();
	Для Каждого Настройка Из ОсновнаяНастройка.ПоследовательностьОтображения Цикл
		Если Не ЗначениеЗаполнено(Настройка.РазмещениеВЯчейках) Тогда
			Настройка.РазмещениеВЯчейках = Перечисления.СпособыОтображенияДополнительныхПолейРасписания.ОсновнаяЯчейка;
		КонецЕсли;
	КонецЦикла;
	ОсновнаяНастройка.Записать();
	
КонецПроцедуры

Процедура ОбновитьБулевыРеквизитыВидовСообщенийРассылок()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСообщенийРассылки.Ссылка
		|ИЗ
		|	Справочник.ВидыСообщенийРассылки КАК ВидыСообщенийРассылки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидСообщенияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		// Для непредопределенных видов события с непонятным типом отключим автоформирование
		Если НЕ ВидСообщенияОбъект.ВидСобытия.Предопределенный И НЕ ЗначениеЗаполнено(ВидСообщенияОбъект.ВидСобытия.ТипСобытия) Тогда
			ВидСообщенияОбъект.АвтоматическиФормироватьСообщения = Ложь;
		КонецЕсли;
		
		// Для всех видов событий кроме ЗаписьНовойЗаявки переключатель ОтправлятьБезПодтверждения будет невидим,
		// поэтому установим его в значение по-умолчанию (Ложь).
		Если ВидСообщенияОбъект.ВидСобытия <> Справочники.ВидыСобытий.ЗаписьНовойЗаявки Тогда
			ВидСообщенияОбъект.ОтправлятьБезПодтверждения = Ложь;
		КонецЕсли;
		
		// Установим в значение по-умолчанию (Истина).
		ВидСообщенияОбъект.РазрешитьАвтоотправкуСообщений = истина;
		
		// Сохраним результаты.
		ВидСообщенияОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьФактическогоИсполнителяСобытий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредельноДопустимоеВремяВыполнения = 240; // Секунд.
	ДатаНачалаВыполнения = ТекущаяДата();
	
	СчТр = 100;
	Сч = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Событие.Ссылка,
	|	Событие.Ответственный
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ДатаФакт <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Событие.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Событие.ФактическийИсполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Событие.ДатаФакт УБЫВ"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ФактическийИсполнитель = Выборка.Ответственный;
		ДокументОбъект.Записать();
		
		Сч = Сч + 1;
		
		Если Сч = СчТр Тогда
			ЗафиксироватьТранзакцию();
				
			Если ТекущаяДата() > (ДатаНачалаВыполнения + ПредельноДопустимоеВремяВыполнения) Тогда
				// Реквизит второстепенный, допускается обновить не полностью, если сервер слабый.
				Возврат;
			КонецЕсли;
			
			НачатьТранзакцию();
			Сч = 0;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаменитьНеиспользуемыеМакетыМедкарт025и043()
	
	СоответствиеНазваний = Новый Соответствие;
	СоответствиеНазваний.Вставить("АмбулаторнаяКарта043у_А5_приказ834н",	"стомАмбулаторнаяКарта043У");
	СоответствиеНазваний.Вставить("АмбулаторнаяКарта043У",					"стомАмбулаторнаяКарта043У");
	СоответствиеНазваний.Вставить("АмбулаторнаяКартаОртопедия043У_А4_приказ834н",	"стомМедицинскаяКартаОртодонтия043_1У");
	СоответствиеНазваний.Вставить("МедицинскаяКартаОртодонтия043_1У", 				"стомМедицинскаяКартаОртодонтия043_1У");
	СоответствиеНазваний.Вставить("МедицинскаяКарта025у04",					"МедицинскаяКарта025у_А5_приказ834н");
	СоответствиеНазваний.Вставить("МедицинскаяКарта025у04_А4",				"МедицинскаяКарта025у_А4_приказ834н");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыМедицинскихКарт.Ссылка КАК ВидМедкарты,
	|	ВидыМедицинскихКарт.Макет
	|ИЗ
	|	Справочник.ВидыМедицинскихКарт КАК ВидыМедицинскихКарт
	|ГДЕ
	|	НЕ ВидыМедицинскихКарт.ИспользуетсяВнешняяПФ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Макет) = Тип("Строка") И ЗначениеЗаполнено(Выборка.Макет) Тогда 
			НовыйМакет = СоответствиеНазваний.Получить(Выборка.Макет);
			Если НовыйМакет <> Неопределено Тогда
				ВидМедкартыОбъект = Выборка.ВидМедкарты.ПолучитьОбъект();
				ВидМедкартыОбъект.Макет = НовыйМакет;
				ВидМедкартыОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьАдресаФилиаловКладрДоФиас()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипАдрес = Перечисления.ТипыКонтактнойИнформации.Адрес;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип", ТипАдрес);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И ПОДСТРОКА(КонтактнаяИнформация.ЗначенияПолей, 1, 1) = """"
	|	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Филиалы"
	;
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Попытка
			КонтактнаяИнформацияСервер.ОбновитьКИПодФорматФИАС(Выб.Объект, Выб.Вид);	
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура КомплексныеРасчетыЗаполнитьЦенуСоСкидкой()
	
	УстановитьПривилегированныйРежим(Истина);
	
	сч = 0;
	счТр = 20;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КомплексныйРасчетКлиентаСостав.Ссылка
	|ИЗ
	|	Документ.КомплексныйРасчетКлиента.Состав КАК КомплексныйРасчетКлиентаСостав
	|"
	;
	Выб = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Пока Выб.Следующий() Цикл
		
		Объект = Выб.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаСостава Из Объект.Состав Цикл
			
			// Расчет цены со скидкой
			Если СтрокаСостава.Количество = 0 Тогда
				СтрокаСостава.ЦенаСоСкидкой = СтрокаСостава.Сумма;
			Иначе
				СтрокаСостава.ЦенаСоСкидкой = СтрокаСостава.Сумма / СтрокаСостава.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
		Объект.Записать();
		
		сч = сч + 1;
		Если сч = счТр Тогда
			
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			
			сч = 0;
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьКИ_УМЦ2_0_32_35()
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.НомерПрочий;
	Если ВидКИ.Тип.Пустая() Тогда
		Объект = ВидКИ.ПолучитьОбъект();
		Объект.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
		Объект.Записать();
	КонецЕсли;
	
	УстановитьПараметрыВидаКонтаткнойИнформации(Справочники.ВидыКонтактнойИнформации.Skype, Перечисления.ТипыКонтактнойИнформации.Skype);
	
КонецПроцедуры

Процедура ОбновитьКИ_УМЦ2_0_32_43()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Вид.Тип КАК ВидТип
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СчТр = 500;
	Сч = 0;
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		Сч = Сч + 1;
		
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Запись.Тип = ?(ЗначениеЗаполнено(Выборка.ВидТип), Выборка.ВидТип, Перечисления.ТипыКонтактнойИнформации.Другое);
		Запись.Записать();
		
		Если Сч = СчТр Тогда
			
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			
			Сч = 0;
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьСправочникиИНастройкиРасширеннойЛаборатории()

	// Перенос настройки использования лаборатории в НастройкиМедицинскогоУчета
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДействияНадАнализами.Ссылка
	                      |ИЗ
	                      |	Документ.ДействияНадАнализами КАК ДействияНадАнализами
	                      |ГДЕ
	                      |	ДействияНадАнализами.Проведен");
	УправлениеНастройкамиПереопределяемый.УстановитьПараметрУчета("ИспользоватьЛабораторныеИсследования" , Не Запрос.Выполнить().Пустой());
	
	// Обновляем параметры и значения параметров забора под новую структуру хранения.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПараметрыЗабораАнализов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыЗабораАнализов КАК ПараметрыЗабораАнализов");
	
	ПВХПараметрыЗабора = Запрос.Выполнить().Выбрать();	
	Пока ПВХПараметрыЗабора.Следующий() Цикл
		Если ПВХПараметрыЗабора.Ссылка.IDПараметров.Количество() = 0 Тогда
			ПВХПараметрыЗабораОбъект = ПВХПараметрыЗабора.Ссылка.ПолучитьОбъект();
			ИдХеликс = ПВХПараметрыЗабораОбъект.IDПараметров.Добавить();
			ИдХеликс.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Helix;
			ИдХеликс.ID = ПВХПараметрыЗабораОбъект.Наименование;
			ПВХПараметрыЗабораОбъект.Наименование = ПВХПараметрыЗабораОбъект.Комментарий;
			ПВХПараметрыЗабораОбъект.Комментарий = "";
			ПВХПараметрыЗабораОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияПараметровЗабора.Ссылка
	|ИЗ
	|	Справочник.ЗначенияПараметровЗабора КАК ЗначенияПараметровЗабора");
	
	ЗначенияПараметровЗабора = Запрос.Выполнить().Выбрать();
	Пока ЗначенияПараметровЗабора.Следующий() Цикл
		Если ЗначенияПараметровЗабора.Ссылка.IDЗначения.Количество() = 0 Тогда
			ЗначенияПараметровЗабораОбъект = ЗначенияПараметровЗабора.Ссылка.ПолучитьОбъект();
			ИдХеликс = ЗначенияПараметровЗабораОбъект.IDЗначения.Добавить();
			ИдХеликс.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Helix;
			ИдХеликс.ID = ЗначенияПараметровЗабораОбъект.Наименование;
			ЗначенияПараметровЗабораОбъект.Наименование = ЗначенияПараметровЗабораОбъект.Расшифровка;
			ЗначенияПараметровЗабораОбъект.Расшифровка = "";
			ЗначенияПараметровЗабораОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	нзНастройкиВзаимодействия = РегистрыСведений.Helix_НастройкиВзаимодействия.СоздатьНаборЗаписей();
	нзНастройкиВзаимодействия.Прочитать();
	Если нзНастройкиВзаимодействия.Количество() <> 0 Тогда
		
		// Создание гарантированной helix-лаборатории
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	Лаборатории.Ссылка
		|ИЗ
		|	Справочник.Лаборатории КАК Лаборатории
		|ГДЕ
		|	Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.Helix)
		|	И НЕ Лаборатории.ПометкаУдаления");
		ВыбЛаборатории = Запрос.Выполнить().Выбрать();
		Если ВыбЛаборатории.Следующий() Тогда
			Лаборатория = ВыбЛаборатории.Ссылка;
		Иначе
			ЛабораторияОбъект = Справочники.Лаборатории.СоздатьЭлемент();
			ЛабораторияОбъект.ВнешняяЛаборатория = Перечисления.ВнешниеЛаборатории.Helix;
			ЛабораторияОбъект.Наименование = Строка(ЛабораторияОбъект.ВнешняяЛаборатория);
			ЛабораторияОбъект.Записать();
			Лаборатория = ЛабораторияОбъект.Ссылка;
		КонецЕсли;
		
		// Простановка лаборатории в настройки взаимодействия
		Для Каждого ЗаписьНастроек Из нзНастройкиВзаимодействия Цикл
			Если Не ЗначениеЗаполнено(ЗаписьНастроек.Лаборатория) Тогда
				ЗаписьНастроек.Лаборатория = Лаборатория;
			КонецЕсли;
		КонецЦикла;
		нзНастройкиВзаимодействия.Записать();
		
		// Простановка лаборатории в версии файлов
		нзВерсииФайловСправочников = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьНаборЗаписей();
		нзВерсииФайловСправочников.Прочитать();
		Для Каждого Запись Из нзВерсииФайловСправочников Цикл
			Если Не ЗначениеЗаполнено(Запись.Лаборатория) Тогда 
				Запись.Лаборатория = Лаборатория;
			КонецЕсли;
		КонецЦикла;
		нзВерсииФайловСправочников.Записать();
		
		// Простановка лаборатории в правила анализов
		нзДанные = РегистрыСведений.Helix_ПравилаАнализов.СоздатьНаборЗаписей();
		нзДанные.Прочитать();
		Для Каждого Запись Из нзДанные Цикл
			Если Не ЗначениеЗаполнено(Запись.Лаборатория) Тогда
				Запись.Лаборатория = Лаборатория;
			КонецЕсли;
		КонецЦикла;
		нзДанные.Записать();
		
		// Простановка лаборатории в регистр номенклатуры анализов
		нзДанные = РегистрыСведений.НоменклатураАнализов.СоздатьНаборЗаписей();
		нзДанные.Прочитать();
		Для Каждого Запись Из нзДанные Цикл
			Если Не ЗначениеЗаполнено(Запись.Лаборатория) Тогда
				Запись.Лаборатория = Лаборатория;
			КонецЕсли;
		КонецЦикла;
		нзДанные.Записать();
		
		// Заполнение новых настроек учета
		нзНастройкиМедУчета = РегистрыСведений.НастройкиМедицинскогоУчета.СоздатьНаборЗаписей();
		нзНастройкиМедУчета.Прочитать();
		Если нзНастройкиМедУчета.Количество() <> 0 Тогда
			НастройкиМедУчета = нзНастройкиМедУчета[0];
		Иначе
			НастройкиМедУчета = нзНастройкиМедУчета.Добавить();
		КонецЕсли;
		
		НастройкиМедУчета.ИспользуетсяИнтеграцияСВнешнимиЛабораториями = Истина;
		НастройкиМедУчета.Helix_ИспользуетсяИнтеграцияСHelix = Истина;
		нзНастройкиМедУчета.Записать();

		
		// Если это единственная лаборатория в базе, то проставляем её во все филиалы как основную
		КоличествоЛабораторий = 0;
		Выб = Справочники.Лаборатории.Выбрать();
		Пока Выб.Следующий() Цикл 
			КоличествоЛабораторий = КоличествоЛабораторий + 1;
		КонецЦикла;
		Если КоличествоЛабораторий = 1 Тогда
			нзНастройкиФилиалов = РегистрыСведений.УчетнаяПолитикаФилиалов.СоздатьНаборЗаписей();
			нзНастройкиФилиалов.Прочитать();
			Если нзНастройкиФилиалов.Количество() = 0 Тогда
				ЗаписьРегистра = нзНастройкиФилиалов.Добавить();
				ЗаписьРегистра.Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
				ЗаписьРегистра.ОсновнаяЛаборатория = Лаборатория;
				ЗаписьРегистра.Период = ТекущаяДата();
			Иначе	
				Для Каждого Запись Из нзНастройкиФилиалов Цикл
					Запись.ОсновнаяЛаборатория = Лаборатория;
				КонецЦикла;
			КонецЕсли;
			нзНастройкиФилиалов.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПолеЗаполненоПараметровЗабора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 250
	|	ДействияНадАнализамиПараметрыЗабора.Ссылка
	|ИЗ
	|	Документ.ДействияНадАнализами.ПараметрыЗабора КАК ДействияНадАнализамиПараметрыЗабора
	|ГДЕ
	|	НЕ ДействияНадАнализамиПараметрыЗабора.Заполнен
	|	И ДействияНадАнализамиПараметрыЗабора.Ссылка.Проведен"
	;
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		Док = Выб.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаПараметр Из Док.ПараметрыЗабора Цикл
			СтрокаПараметр.Заполнен = Истина;
		КонецЦикла;
		Док.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьИсториюЗвонков()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ИсторияЗвонков.Пользователь,
		|	бит_ИсторияЗвонков.СвойНомер,
		|	бит_ИсторияЗвонков.Дата,
		|	бит_ИсторияЗвонков.Абонент,
		|	бит_ИсторияЗвонков.КонтактноеЛицо,
		|	бит_ИсторияЗвонков.Номер,
		|	бит_ИсторияЗвонков.ТипЗвонка,
		|	бит_ИсторияЗвонков.Успешность,
		|	бит_ИсторияЗвонков.УдалитьЛогин,
		|	бит_ИсторияЗвонков.ДлительностьЗвонка,
		|	бит_ИсторияЗвонков.НабранныйНомер,
		|	бит_ИсторияЗвонков.ЗаписьРазговора,
		|	бит_ИсторияЗвонков.Логин
		|ИЗ
		|	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|ГДЕ
		|	бит_ИсторияЗвонков.УдалитьЛогин <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	СчТр = 100;
	
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРС = РегистрыСведений.бит_ИсторияЗвонков.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРС, ВыборкаДетальныеЗаписи);
		ЗаписьРС.Прочитать();
		Если ЗаписьРС.Выбран() Тогда
			ЗаписьРС.Логин = ЗаписьРС.УдалитьЛогин;
			ЗаписьРС.УдалитьЛогин = "";
			ЗаписьРС.Записать(Истина);
			
			Сч = Сч + 1;
			Если Сч = СчТр Тогда
				Сч = 0;
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОчисткаСделокНеобособленныхКомплексныхРасчетов()
	
	Сч = 0;
	СчТр = 40;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ВзаиморасчетыСКлиентами.Регистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКлиентами КАК ВзаиморасчетыСКлиентами
	|ГДЕ
	|	ВзаиморасчетыСКлиентами.Сделка ССЫЛКА Документ.КомплексныйРасчетКлиента
	|	И ВзаиморасчетыСКлиентами.Сделка <> ЗНАЧЕНИЕ(Документ.КомплексныйРасчетКлиента.ПустаяСсылка)
	|	И НЕ ВзаиморасчетыСКлиентами.Сделка.Вид.ОбособленныйУчетВзаиморасчетов"
	;
	Выб = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСКлиентами.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	Пока Выб.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выб.Регистратор);
		НаборЗаписей.Прочитать();
		ТЗ = НаборЗаписей.Выгрузить();
		ТЗ.ЗаполнитьЗначения(Неопределено,"Сделка");
		НаборЗаписей.Загрузить(ТЗ);
		НаборЗаписей.Записать();
		
		Сч = Сч + 1;
		Если Сч = СчТр Тогда
			ЗафиксироватьТранзакцию();
			Сч = 0;
			НачатьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьПоле12КИ()
	
	Сч = 0;
	СчТр = 100;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Вид.Тип КАК ВидТип,
	|	КонтактнаяИнформация.Поле12 КАК Поле12,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Поле12 = """""
	;
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл		
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Запись.Записать();
			
		Сч = Сч + 1;
		Если Сч = СчТр Тогда
			Сч = 0;
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьФлагИспользуетсяПрофилейПользователей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.ПрофилиПользователей.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЭтоГруппа Тогда
			
			Объект = Выборка.ПолучитьОбъект();
			Для Каждого СтрокаНастройки Из Объект.Настройки Цикл
				Если ЗначениеЗаполнено(СтрокаНастройки.Значение) Тогда
					СтрокаНастройки.Используется = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьВредностейПрохожденийМедосмотра()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредельноДопустимоеВремяВыполнения = 300; // Секунд.
	ДатаНачалаВыполнения = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьВредныеФакторыУсловияРаботКлиентов.ПереченьВредныхФакторовИРабот КАК Фактор,
	               |	УдалитьВредныеФакторыУсловияРаботКлиентов.Клиент КАК Клиент
	               |ИЗ
	               |	РегистрСведений.УдалитьВредныеФакторыУсловияРаботКлиентов КАК УдалитьВредныеФакторыУсловияРаботКлиентов";
	;
	ВыбВредности = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура("Клиент");
	
	СчТр = 50;
	Сч = 0;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрохождениеМедосмотра.Ссылка КАК Ссылка,
	|	ПрохождениеМедосмотра.Клиент КАК Клиент
	|ИЗ
	|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПрохождениеМедосмотраФакторыИУсловияРаботы
	|		ПО (ПрохождениеМедосмотраФакторыИУсловияРаботы.Ссылка = ПрохождениеМедосмотра.Ссылка)
	|ГДЕ
	|	ПрохождениеМедосмотраФакторыИУсловияРаботы.Фактор ЕСТЬ NULL"
	;
	ВыбДокументы = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Пока ВыбДокументы.Следующий() Цикл
		
		ДокументОбъект = ВыбДокументы.Ссылка.ПолучитьОбъект();
		
		ВыбВредности.Сбросить();
		Отбор.Клиент = ВыбДокументы.Клиент;
		Пока ВыбВредности.НайтиСледующий(Отбор) Цикл
			ДокументОбъект.ФакторыИУсловияРаботы.Добавить().Фактор = ВыбВредности.Фактор;
		КонецЦикла;
		
		Если ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Сч = Сч + 1;
		
		Если Сч = СчТр Тогда
			ЗафиксироватьТранзакцию();
				
			Если ТекущаяДата() > (ДатаНачалаВыполнения + ПредельноДопустимоеВремяВыполнения) Тогда
				// Реквизит второстепенный, допускается обновить не полностью, если сервер слабый.
				Возврат;
			КонецЕсли;
			
			НачатьТранзакцию();
			Сч = 0;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

Процедура ПервоначальноеЗаполнениеВопросаАнкетированияNPS()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.NPS.ПолучитьОбъект();
	
	Объект.Формулировка = "Оцените готовность рекомендовать нашу клинику своим знакомым по шкале от 0 до 10";
	
	Объект.ТипЗначения = Новый ОписаниеТипов("Число");
	Объект.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число;
	
	Объект.Длина = 2;
	Объект.МаксимальноеЗначение = 10;
	Объект.МинимальноеЗначение	= 0;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьРоссиюПоКлассификатору()
	
	Россия = Справочники.СтраныМира.Россия;
	Если Не ЗначениеЗаполнено(Россия.НаименованиеПолное) Тогда
		РоссияОбъект = Россия.ПолучитьОбъект();
		РоссияОбъект.НаименованиеПолное = "Российская Федерация";
		РоссияОбъект.КодАльфа2 = "RU";
		РоссияОбъект.КодАльфа3 = "RUS";
		РоссияОбъект.УчастникЕАЭС = Истина;
		РоссияОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереходНаВидыСтавокНДС()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.удалитьСтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.удалитьСтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(ВыборкаДетальныеЗаписи.СтавкаНДС);
		Об.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНаименованиеПредопределенногоРегламентногоЗадания(ИмяРегЗадания)
	
	МетаданныеЗадания = Метаданные.РегламентныеЗадания.Найти(ИмяРегЗадания);
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеЗадания);
	РегламентноеЗадание.Наименование = МетаданныеЗадания.Представление();
	РегламентноеЗадание.Записать();
	
КонецПроцедуры

#Область ПереходНаУчетСроковГодностиЧерезСерииНоменклатуры

// Создает серии номенклатуры вместо характеристик номенклатуры со сроками годности
// и проставляет серии номенклатуры в табличные части документов с последующим перепроведением этих документов. 
//
Процедура ВыполнитьПереходНаСерииНоменклатуры() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗначенияСвойствОбъектов.Объект.Владелец КАК Номенклатура,
	               |	ЗначенияСвойствОбъектов.Объект КАК ХарактеристикаНоменклатуры,
	               |	ЗначенияСвойствОбъектов.Объект.Наименование КАК ХарактеристикаНоменклатурыНаименование,
	               |	ЗначенияСвойствОбъектов.Значение КАК СрокГодности
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	               |	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	               |	И ЗначенияСвойствОбъектов.Значение <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.УдалитьСрокГодности);
	тзДанныеНоменклатурыСНаличиемСГ = Запрос.Выполнить().Выгрузить();
	
	НоменклатураСоСрокамиГодности = тзДанныеНоменклатурыСНаличиемСГ.ВыгрузитьКолонку("Номенклатура");
	
	тзСерииНоменклатуры = ПолучитьСерииНоменклатуры(НоменклатураСоСрокамиГодности);
	
	Для Каждого СтрокаДанныхНоменклатуры Из тзДанныеНоменклатурыСНаличиемСГ Цикл
		Отбор = Новый Структура("Номенклатура, СерияНоменклатурыНаименование, ГоденДо", 
			СтрокаДанныхНоменклатуры.Номенклатура, СтрокаДанныхНоменклатуры.ХарактеристикаНоменклатурыНаименование, СтрокаДанныхНоменклатуры.СрокГодности);
			
		Если тзСерииНоменклатуры.НайтиСтроки(Отбор).Количество() = 0 Тогда 
				
			НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			НоваяСерия.Владелец		 = СтрокаДанныхНоменклатуры.Номенклатура; 
			НоваяСерия.Наименование	 = СтрокаДанныхНоменклатуры.ХарактеристикаНоменклатурыНаименование; 
			НоваяСерия.ГоденДо		 = СтрокаДанныхНоменклатуры.СрокГодности;
			
			Попытка
				НоваяСерия.Записать();
			Исключение
			КонецПопытки;
			
			НоменклатураОбъект = СтрокаДанныхНоменклатуры.Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.ВестиУчетПоСериям = Истина;
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
	тзСерииНоменклатуры = ПолучитьСерииНоменклатуры(НоменклатураСоСрокамиГодности);
	
	ХарактеристикиНоменклатурыБезСроковГодности = ПолучитьХарактеристикиБезСроковГодности();
	
	ДобавитьСерииНоменклатурыВДокументы(тзДанныеНоменклатурыСНаличиемСГ, ХарактеристикиНоменклатурыБезСроковГодности, тзСерииНоменклатуры);
	
	СнятьУчетНоменклатурыПоХарактеристикам(НоменклатураСоСрокамиГодности, ХарактеристикиНоменклатурыБезСроковГодности);

 	ПометитьНаУдалениеХарактеристикиНоменклатурыТолькоСНаличиемСроковГодности();
 
	УдалитьЗначенияСроковГодностиИзРегистраСведений();
	
КонецПроцедуры

Процедура ДобавитьСерииНоменклатурыВДокументы(ХарактеристикиНоменклатурыСНаличиемСГ, ХарактеристикиНоменклатурыБезСГ, СерииНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	Таблица.СрокГодности КАК СрокГодности
	               |ПОМЕСТИТЬ ХарактеристикиНоменклатуры
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	АвансовыйОтчетТовары.Ссылка КАК Документ,
	               |	АвансовыйОтчетТовары.Ссылка.Дата КАК Дата,
	               |	АвансовыйОтчетТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	""Товары"" КАК ИмяТЧ,
	               |	ХарактеристикиНоменклатуры.СрокГодности КАК СрокГодности
	               |ПОМЕСТИТЬ ХарактеристикиВДокументах
	               |ИЗ
	               |	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО АвансовыйОтчетТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (АвансовыйОтчетТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Дата,
	               |	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры,
	               |	""Товары"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ВозвратТоваровПоставщикуТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИнвентаризацияТоваровТовары.Ссылка,
	               |	ИнвентаризацияТоваровТовары.Ссылка.Дата,
	               |	ИнвентаризацияТоваровТовары.ХарактеристикаНоменклатуры,
	               |	""Товары"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ИнвентаризацияТоваров.Товары КАК ИнвентаризацияТоваровТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ИнвентаризацияТоваровТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ИнвентаризацияТоваровТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОказаниеУслугМатериалы.Ссылка,
	               |	ОказаниеУслугМатериалы.Ссылка.Дата,
	               |	ОказаниеУслугМатериалы.ХарактеристикаНоменклатуры,
	               |	""Материалы"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ОказаниеУслуг.Материалы КАК ОказаниеУслугМатериалы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ОказаниеУслугМатериалы.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ОказаниеУслугМатериалы.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОказаниеУслугТовары.Ссылка,
	               |	ОказаниеУслугТовары.Ссылка.Дата,
	               |	ОказаниеУслугТовары.ХарактеристикаНоменклатуры,
	               |	""Товары"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ОказаниеУслуг.Товары КАК ОказаниеУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ОказаниеУслугТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ОказаниеУслугТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОказаниеУслугНатуральныеСкидки.Ссылка,
	               |	ОказаниеУслугНатуральныеСкидки.Ссылка.Дата,
	               |	ОказаниеУслугНатуральныеСкидки.ХарактеристикаНоменклатуры,
	               |	""НатуральныеСкидки"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ОказаниеУслуг.НатуральныеСкидки КАК ОказаниеУслугНатуральныеСкидки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ОказаниеУслугНатуральныеСкидки.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ОказаниеУслугНатуральныеСкидки.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОприходованиеТоваровТовары.Ссылка,
	               |	ОприходованиеТоваровТовары.Ссылка.Дата,
	               |	ОприходованиеТоваровТовары.ХарактеристикаНоменклатуры,
	               |	""Товары"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ОприходованиеТоваровТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ОприходованиеТоваровТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПеремещениеМатериаловТовары.Ссылка,
	               |	ПеремещениеМатериаловТовары.Ссылка.Дата,
	               |	ПеремещениеМатериаловТовары.ХарактеристикаНоменклатуры,
	               |	""Товары"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ПеремещениеМатериалов.Товары КАК ПеремещениеМатериаловТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ПеремещениеМатериаловТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ПеремещениеМатериаловТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка,
	               |	ПоступлениеТоваровУслугТовары.Ссылка.Дата,
	               |	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
	               |	""Товары"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ПоступлениеТоваровУслугТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПриемМатериалы.Ссылка,
	               |	ПриемМатериалы.Ссылка.Дата,
	               |	ПриемМатериалы.ХарактеристикаНоменклатуры,
	               |	""Материалы"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.Прием.Материалы КАК ПриемМатериалы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО ПриемМатериалы.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (ПриемМатериалы.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботыПоРекламацииМатериалы.Ссылка,
	               |	РаботыПоРекламацииМатериалы.Ссылка.Дата,
	               |	РаботыПоРекламацииМатериалы.ХарактеристикаНоменклатуры,
	               |	""Материалы"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.РаботыПоРекламации.Материалы КАК РаботыПоРекламацииМатериалы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО РаботыПоРекламацииМатериалы.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (РаботыПоРекламацииМатериалы.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СписаниеТоваровТовары.Ссылка,
	               |	СписаниеТоваровТовары.Ссылка.Дата,
	               |	СписаниеТоваровТовары.ХарактеристикаНоменклатуры,
	               |	""Товары"",
	               |	ХарактеристикиНоменклатуры.СрокГодности
	               |ИЗ
	               |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО СписаниеТоваровТовары.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	               |			И (СписаниеТоваровТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиВДокументах.Документ КАК Документ,
	               |	ХарактеристикиВДокументах.Дата КАК Дата,
	               |	ХарактеристикиВДокументах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ХарактеристикиВДокументах.ИмяТЧ КАК ИмяТЧ,
	               |	ХарактеристикиВДокументах.СрокГодности КАК СрокГодности
	               |ИЗ
	               |	ХарактеристикиВДокументах КАК ХарактеристикиВДокументах
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	
	Запрос.УстановитьПараметр("Таблица", ХарактеристикиНоменклатурыСНаличиемСГ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;	
	КонецЕсли;
	
	ТаблицаДокументыХарактеристикиСрокиГодности = РезультатЗапроса.Выгрузить();
	ТаблицаДокументы = ТаблицаДокументыХарактеристикиСрокиГодности.Скопировать(, "Документ");
	ТаблицаДокументы.Свернуть("Документ");
	
	ТаблицаХарактеристикиСерии = Новый ТаблицаЗначений;
	ТаблицаХарактеристикиСерии.Колонки.Добавить("Номенклатура");
	ТаблицаХарактеристикиСерии.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаХарактеристикиСерии.Колонки.Добавить("ХарактеристикаНоменклатурыОчищена", Новый ОписаниеТипов("Булево"));
	ТаблицаХарактеристикиСерии.Колонки.Добавить("СерияНоменклатуры");
	
	сч = 0;
	счТр = 20;
	
	НачатьТранзакцию();
	Для Каждого СтрокаДокумент Из ТаблицаДокументы Цикл
				
		ТаблицаХарактеристикиСерии.Очистить();
		
		ДокументСсылка = СтрокаДокумент.Документ;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		МассивСтрокиДокумента = ТаблицаДокументыХарактеристикиСрокиГодности.НайтиСтроки(Новый Структура("Документ", ДокументСсылка));
		
		Для Каждого ЭлементДокумент Из МассивСтрокиДокумента Цикл
			МассивСтрокиТабЧасти = ДокументОбъект[ЭлементДокумент.ИмяТЧ].НайтиСтроки(Новый Структура("ХарактеристикаНоменклатуры", 
				ЭлементДокумент.ХарактеристикаНоменклатуры));	
			Для Каждого СтрокаТабЧасти Из МассивСтрокиТабЧасти Цикл
				Номенклатура = СтрокаТабЧасти.ХарактеристикаНоменклатуры.Владелец;
				НаименованиеХарактеристикиНоменклатуры = СтрокаТабЧасти.ХарактеристикаНоменклатуры.Наименование; 
				Отбор = Новый Структура("Номенклатура, СерияНоменклатурыНаименование, ГоденДо",
					Номенклатура, НаименованиеХарактеристикиНоменклатуры, ЭлементДокумент.СрокГодности);
				мсСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(Отбор);
				Если мсСерииНоменклатуры.Количество() <> 0 Тогда 
					СтрокаТабЧасти.СерияНоменклатуры = мсСерииНоменклатуры[0].СерияНоменклатуры;
					СтрокаХарактеристикиСерии = ТаблицаХарактеристикиСерии.Добавить();
					СтрокаХарактеристикиСерии.Номенклатура = Номенклатура;
					СтрокаХарактеристикиСерии.ХарактеристикаНоменклатуры = СтрокаТабЧасти.ХарактеристикаНоменклатуры;
					СтрокаХарактеристикиСерии.СерияНоменклатуры = СтрокаТабЧасти.СерияНоменклатуры;
					Если ХарактеристикиНоменклатурыБезСГ.Найти(СтрокаТабЧасти.ХарактеристикаНоменклатуры) = Неопределено Тогда 
						СтрокаТабЧасти.ХарактеристикаНоменклатуры = Неопределено;		
						СтрокаХарактеристикиСерии.ХарактеристикаНоменклатурыОчищена = Истина;
					КонецЕсли;		
				КонецЕсли;		
			КонецЦикла;
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ТаблицаХарактеристикиСерии.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ХарактеристикаНоменклатурыОчищена, СерияНоменклатуры");
					
		Если ДокументОбъект.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах) Тогда 
			ЗаписатьИзмененияДвиженийРегистраДляСерийНоменклатуры(ДокументОбъект.Движения.ПартииТоваровНаСкладах, ТаблицаХарактеристикиСерии);
		КонецЕсли;			
		
		Если ДокументОбъект.Метаданные().Движения.Содержит(Метаданные.РегистрыСведений.СписанныеТовары) Тогда 
			ЗаписатьИзмененияДвиженийРегистраДляСерийНоменклатуры(ДокументОбъект.Движения.СписанныеТовары, ТаблицаХарактеристикиСерии);
		КонецЕсли;
		
		Сч = Сч + 1;
		Если Сч = СчТр Тогда
			
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			
			Сч = 0;
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ЗаписатьИзмененияДвиженийРегистраДляСерийНоменклатуры(Движения, ТаблицаХарактеристикиСерии)
	
	Движения.Прочитать(); 				
	ТаблицаДвижений = Движения.Выгрузить();
	Если ТаблицаДвижений.Количество() <> 0 И ТаблицаХарактеристикиСерии <> 0 Тогда  
		Для Каждого СтрокаТаблицаХарактеристикиСерии Из ТаблицаХарактеристикиСерии Цикл 
			МассивСтрокТаблицыДвижений = ТаблицаДвижений.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			СтрокаТаблицаХарактеристикиСерии.Номенклатура, СтрокаТаблицаХарактеристикиСерии.ХарактеристикаНоменклатуры));
			Если МассивСтрокТаблицыДвижений.Количество() <> 0 Тогда 
				Для Каждого СтрокаТаблицаДвижений Из МассивСтрокТаблицыДвижений Цикл 
					СтрокаТаблицаДвижений.СерияНоменклатуры = СтрокаТаблицаХарактеристикиСерии.СерияНоменклатуры;	
					СтрокаТаблицаДвижений.ХарактеристикаНоменклатуры = ?(Не СтрокаТаблицаХарактеристикиСерии.ХарактеристикаНоменклатурыОчищена,
					СтрокаТаблицаХарактеристикиСерии.ХарактеристикаНоменклатуры, Неопределено);	
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
		Движения.Загрузить(ТаблицаДвижений);
		Движения.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура СнятьУчетНоменклатурыПоХарактеристикам(НоменклатураСоСрокамиГодности, ХарактеристикиНоменклатурыБезСроковГодности)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатурыБезСроковГодности", ХарактеристикиНоменклатурыБезСроковГодности);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ЭтоГруппа
	               |	И Номенклатура.ВестиУчетПоХарактеристикам
	               |	И НЕ Номенклатура.Ссылка В
	               |				(ВЫБРАТЬ
	               |					Характеристики.Владелец
	               |				ИЗ
	               |					Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	               |				ГДЕ
	               |					Характеристики.Ссылка В (&ХарактеристикиНоменклатурыБезСроковГодности))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Номенклатура.ПолучитьОбъект();
		Объект.ВестиУчетПоХарактеристикам = Ложь; 
		Попытка
			Объект.Записать();	
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеХарактеристикиНоменклатурыТолькоСНаличиемСроковГодности()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |ГДЕ
	               |	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	               |	И НЕ ХарактеристикиНоменклатуры.Предопределенный
	               |	И НЕ ХарактеристикиНоменклатуры.Владелец.ВестиУчетПоХарактеристикам";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ХарактеристикаНоменклатуры.ПолучитьОбъект();
		Объект.ПометкаУдаления = Истина; 
		Попытка
			Объект.Записать();	
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗначенияСроковГодностиИзРегистраСведений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.УдалитьСрокГодности);
	НаборЗаписей.Записать();
	
КонецПроцедуры	
	
Функция ПолучитьСерииНоменклатуры(СписокНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СерииНоменклатуры.Владелец КАК Номенклатура,
	               |	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
	               |	СерииНоменклатуры.Наименование КАК СерияНоменклатурыНаименование,
	               |	СерииНоменклатуры.ГоденДо КАК ГоденДо
	               |ИЗ
	               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	               |ГДЕ
	               |	СерииНоменклатуры.Владелец В(&СписокНоменклатуры)";
				   
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	тзСерииНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Возврат тзСерииНоменклатуры; 
	
КонецФункции

Функция ПолучитьХарактеристикиБезСроковГодности()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Характеристики = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Объект КАК ХарактеристикаНоменклатуры,
	               |	ЗначенияСвойствОбъектов.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	НЕ ЗначенияСвойствОбъектов.Свойство = &Свойство
	               |	И ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ХарактеристикиНоменклатуры
	               |";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.УдалитьСрокГодности);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Значение)
			И Характеристики.Найти(Выборка.ХарактеристикаНоменклатуры) = Неопределено
		Тогда
			Характеристики.Добавить(Выборка.ХарактеристикаНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Характеристики; 
	
КонецФункции

#КонецОбласти

Процедура ПервоначальноеЗаполнениеПравилРаспределенияЗатрат()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение параметра учетной политики основной статьи затрат зарплаты.
	Если Не ЗначениеЗаполнено(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнаяСтатьяЗатратЗарплаты")) Тогда
		СтатьяЗарплаты = Справочники.СтатьиЗатрат.НайтиПоНаименованию("зар", Ложь);
		Если Не ЗначениеЗаполнено(СтатьяЗарплаты) Тогда
			СтатьяЗарплаты = Справочники.СтатьиЗатрат.НайтиПоНаименованию("зп", Ложь);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтатьяЗарплаты) Тогда
			СтатьяОбъект = Справочники.СтатьиЗатрат.СоздатьЭлемент();
			СтатьяОбъект.Наименование = "Заработная плата";
			СтатьяОбъект.Записать();
			СтатьяЗарплаты = СтатьяОбъект.Ссылка;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОсновнаяСтатьяЗатратЗарплаты", СтатьяЗарплаты);
		ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина);
	КонецЕсли;
	
	// Если есть хотя бы 1 проведенный документ, то инициализация не делается.
	Выборка = Документы.ПравилаРаспределенияЗатрат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Проведен Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Создать правило распределения пропроционально сумме и документ распределения всего по сумме.
	
	// Создание правила распределения.
	Правило = Неопределено;
	
	Выборка = Справочники.ПравилаРаспределенияЗатрат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления Тогда
			Правило = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(Правило) Тогда
		ПравилоОбъект = Справочники.ПравилаРаспределенияЗатрат.СоздатьЭлемент();
		ПравилоОбъект.Наименование = НСтр("ru='По сумме продаж'");
		ПравилоОбъект.СпособРаспределения = Перечисления.СпособРаспределенияЗатрат.ПоСуммеПродаж;
		ПравилоОбъект.Записать();
		Правило = ПравилоОбъект.Ссылка;
	КонецЕсли;
	
	// Создание документа.
	Документ = Документы.ПравилаРаспределенияЗатрат.СоздатьДокумент();
	Документ.Дата = Дата(2000,1,1);
	Документы.ПравилаРаспределенияЗатрат.ЗаполнитьНовыйДокументПоУмолчанию(Документ);
	Документ.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруВидовСертификатов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаСертификатов = Справочники.ВидыСертификатов.Выбрать();
	Пока ВыборкаСертификатов.Следующий() Цикл
		Если Не ВыборкаСертификатов.ЭтоГруппа
			И Не ВыборкаСертификатов.ПометкаУдаления
			И Не ЗначениеЗаполнено(ВыборкаСертификатов.Номенклатура)
			И ВыборкаСертификатов.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги
		Тогда
			НоменклатураСсылка = Справочники.Номенклатура.НайтиПоНаименованию(ВыборкаСертификатов.Наименование);
			Если Не ЗначениеЗаполнено(НоменклатураСсылка) Тогда
				Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
				Номенклатура.Наименование = ВыборкаСертификатов.Наименование;
				Если ЗначениеЗаполнено(ВыборкаСертификатов.КатегорияВыработки) Тогда
					Номенклатура.КатегорияВыработки = ВыборкаСертификатов.КатегорияВыработки;
				Иначе
					ВыборкаКатегорий = Справочники.КатегорииВыработки.Выбрать();
					Пока ВыборкаКатегорий.Следующий() Цикл
						Если Не ВыборкаКатегорий.ЭтоГруппа
							И Не ВыборкаКатегорий.ПометкаУдаления
						Тогда
							Номенклатура.КатегорияВыработки = ВыборкаКатегорий.Ссылка;
							Прервать;
						КонецЕсли; 		
					КонецЦикла; 			 
				КонецЕсли; 
				Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
				Номенклатура.Записать();
				НоменклатураСсылка = Номенклатура.Ссылка;
			КонецЕсли;
			
			ВидСертификатаОбъект = ВыборкаСертификатов.ПолучитьОбъект();
			ВидСертификатаОбъект.Номенклатура = НоменклатураСсылка;
			Попытка
				ВидСертификатаОбъект.Записать();
			Исключение
				Продолжить;
			КонецПопытки;

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вида сертификата: " + ВидСертификатаОбъект.Наименование + " создана номенклатура: " + НоменклатураСсылка);		
		КонецЕсли; 			
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьОсновнуюОбработкуSMSРассылки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	Рассылка.ОбработкаSMSРассылки КАК ОбработкаSMSРассылки,
		|	КОЛИЧЕСТВО(Рассылка.ОбработкаSMSРассылки) КАК КоличествоРассылок
		|ПОМЕСТИТЬ ПоследниеРассылки
		|ИЗ
		|	Документ.Рассылка КАК Рассылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Рассылка.ОбработкаSMSРассылки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Рассылка.ОбработкаSMSРассылки УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоследниеРассылки.ОбработкаSMSРассылки КАК ОбработкаSMSРассылки
		|ИЗ
		|	ПоследниеРассылки КАК ПоследниеРассылки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.ОбработкаSMSРассылки;

КонецФункции

Функция ПолучитьИспользованиеКартыСкидок()
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КартыСкидок.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КартыСкидок КАК КартыСкидок
		|ГДЕ
		|	КартыСкидок.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
		
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьМаскиНаПредопределенныеДУЛ()
	
	ДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21.ПолучитьОбъект();
	ДУЛ.МаскаСерииДокумента = "99 99";
	ДУЛ.МаскаНомераДокумента = "999999";
	ДУЛ.Записать();
	
	ДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС22.ПолучитьОбъект();
	ДУЛ.МаскаСерииДокумента = "99";
	ДУЛ.МаскаНомераДокумента = "9999999";
	ДУЛ.Записать();
	
	ДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03.ПолучитьОбъект();
	ДУЛ.МаскаНомераДокумента = "999999";
	ДУЛ.Записать();
	
КонецПроцедуры

Функция ПолучитьОсновнойДУЛПоСтране(СокращенноеНаименованиеСтраны)
	
	ДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.Выбрать();
	
	Пока ДУЛ.Следующий() Цикл
		Если СтрНайти(ВРег(ДУЛ.Наименование), СокращенноеНаименованиеСтраны) > 0 Тогда
			Возврат ДУЛ.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка();
	
КонецФункции

Процедура ОбновитьНаименованияРегЗаданийПоСинонимам()
	
	УстановитьПривилегированныйРежим(Истина);
	СписокРегЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для Каждого РегЗадание Из СписокРегЗаданий Цикл
		
		МетаданныеРегЗадания = РегЗадание.Метаданные;
		Если ПустаяСтрока(МетаданныеРегЗадания.Наименование)
			И СтрНайти(МетаданныеРегЗадания.Синоним, ":") <> 0
		Тогда
			ПоложениеДвоеточия = СтрНайти(МетаданныеРегЗадания.Синоним,":");
			ВстроенноеНаименование = СокрЛП(Прав(РегЗадание.Наименование,СтрДлина(МетаданныеРегЗадания.Синоним)-ПоложениеДвоеточия));
			Если ВстроенноеНаименование = РегЗадание.Наименование Тогда
				РегЗадание.Наименование = МетаданныеРегЗадания.Синоним;
				РегЗадание.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭЦП_ЗаполнитьПодписанныйОбъектИПорядок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронныеПодписи.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.ПорядковыйНомер = 0"
	;
	Выб = Запрос.Выполнить().Выбрать();
	
	ПодписиОбъекта = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	
	Сч = 0;
	ОперацийВТранзакции = 500;
	
	НачатьТранзакцию();
	Пока Выб.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выб.Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодписиОбъекта.Отбор.Объект.Установить(Выб.Объект);
		ПодписиОбъекта.Прочитать();
		
		Для Каждого Подпись Из ПодписиОбъекта Цикл
			Если Не ЗначениеЗаполнено(Подпись.ПодписанныйОбъект) Тогда
				Подпись.ПодписанныйОбъект = Подпись.Объект;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Подпись.ПорядковыйНомер) Тогда
				Подпись.ПорядковыйНомер = ПодписиОбъекта.Индекс(Подпись) + 1;
			КонецЕсли;
		КонецЦикла;
		
		Попытка 
			ПодписиОбъекта.Записать();
		Исключение
		КонецПопытки;
		
		Если Сч = ОперацийВТранзакции Тогда
			Сч = 0;
			Попытка 
				ЗафиксироватьТранзакцию();
			Исключение
			КонецПопытки;
			НачатьТранзакцию();
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Попытка 
		ЗафиксироватьТранзакцию();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура Helix_ОбновитьПараметрыЗабора()
	
	ВидЛаборатории = Перечисления.ВнешниеЛаборатории.Helix;
	// Обновляем, но только если в базе уже есть параметры забора для вида лаборатории (Истина).
	ЛабораторияСервер.ЗагрузитьПараметрыЗабораИзВнутреннихМакетов(ВидЛаборатории, Истина);
	
КонецПроцедуры

Процедура Helix_ПроставитьИспользованиеНастроекОбмена()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = РегистрыСведений.Helix_НастройкиВзаимодействия.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		Запись.Прочитать();
		Запись.Используется = Истина;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиНастройкиПечатиЭтикеток2_0_46_1()
	
	ЗначениеНастроек = ХранилищеВариантовОтчетов.Загрузить("ПечатьЭтикетокИЦенников",  "СтруктураНастроек");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		СтруктураНастроек = Новый Структура;

		КлючиНастроек = Новый Массив;
		КлючиНастроек.Добавить("Шаблон");
		КлючиНастроек.Добавить("Прейскурант");
		КлючиНастроек.Добавить("ФорматЭтикетки");
		КлючиНастроек.Добавить("ШиринаЭтикетки");
		КлючиНастроек.Добавить("ВысотаЭтикетки");
		КлючиНастроек.Добавить("ПечататьВОригинальномРазмере");
		
		Для Каждого КлючНастройки Из КлючиНастроек Цикл
			Если ЗначениеНастроек.Свойство(КлючНастройки) Тогда
				СтруктураНастроек.Вставить(КлючНастройки, ЗначениеНастроек[КлючНастройки]);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураНастроек.Количество() <> 0 Тогда
			РаботаСФормамиСервер.СохранитьНастройкиФормы(СтруктураНастроек, "ПечатьЭтикетокИЦенников");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПервоначальноеЗаполнениеUTMПредопределенныхТиповРекламы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.ТипыРекламы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Объект = Выборка.ПолучитьОбъект();
			Объект.ИмяUTM = Объект.ИмяПредопределенныхДанных;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПервоначальноеЗаполнениеСистемнойУчетнойЗаписиПочты()
	
	УчетнаяЗаписьПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	УчетнаяЗаписьПочты.ВремяОжидания = 5;
	УчетнаяЗаписьПочты.Записать();
	
КонецПроцедуры

Процедура ПроставитьОбщениеСостоялосьИсходамЗвонка()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.ИсходыЗвонка.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИсходЗвонка = Выборка.Ссылка.ПолучитьОбъект();
		ИсходЗвонка.ОбщениеСостоялось = Истина;
		ИсходЗвонка.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрОтображенияСопутствующихТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НоменклатураСопутствующиеТовары.Ссылка) КАК КоличествоСтрок
		|ИЗ
		|	Справочник.Номенклатура.СопутствующиеТовары КАК НоменклатураСопутствующиеТовары
		|ГДЕ
		|	НоменклатураСопутствующиеТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СтруктураПараметров = Новый Структура("ПоказыватьСопутствующиеТовары", Результат[0].КоличествоСтрок > 1);
	ЗаполнениеНовыхПараметровУчета(СтруктураПараметров, Истина)
	
КонецПроцедуры

Процедура МедосмотрыОбновитьНа29н()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// 1. Простановка флага "Есть в 302н" добавленным вручную обязательным действиям.
	НЗ = РегистрыСведений.УдалитьОбязательныеДействияМедОсмотров.СоздатьНаборЗаписей();
	НЗ.Записать();
	
	// Смотрим, загружен ли справочник вредностей.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПереченьВредныхФакторовИРабот.Ссылка) КАК Количество
	               |ИЗ
	               |	Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
	               |ГДЕ
	               |	НЕ ПереченьВредныхФакторовИРабот.ПометкаУдаления";
	
	// Если более 3 позиций, то считаем, что медосмотры используются.
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество > 3 Тогда
	
		// 2. Перенос реквизитов пунктов в старых вредностях
		Выборка = Справочники.ПереченьВредныхФакторовИРабот.Выбрать();
		УжеЕстьПунктыС302н = Ложь;
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.ЭтоГруппа
				И ЗначениеЗаполнено(Выборка.УдалитьНомерПП_302н)
			Тогда
				УжеЕстьПунктыС302н = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не УжеЕстьПунктыС302н Тогда
			Выборка = Справочники.ПереченьВредныхФакторовИРабот.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.ЭтоГруппа
					И ЗначениеЗаполнено(Выборка.НомерПП)
				Тогда
					Объект = Выборка.ПолучитьОбъект();
					Объект.УдалитьНомерПП_302н = Выборка.НомерПП;
					Объект.НомерПП = "";
					
					Объект.УдалитьНомерППДляСортировки_302н = Выборка.НомерППДляСортировки;
					Объект.НомерППДляСортировки = "";
					Объект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// 3. Отметка старых противопоказаний как архивных
		Выборка = Справочники.МедицинскиеПротивопоказания.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.Архив = Истина;
			Объект.Записать();
		КонецЦикла;
		
		// 4. Загрузка объединенного набора справочников 29н и 302н.
	
		ДвоичныеДанныеВыгрузки = Справочники.ПереченьВредныхФакторовИРабот.ПолучитьМакет("ПервоначальноеНаполнение");
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Выполнено обновление вредных и опасных факторов и условий работ'"));
	
	КонецЕсли;
 	
КонецПроцедуры

Процедура КодДиагноза_Заменить1НаI(КодИнтервалДиагнозов, Разделитель)
	
	ЧастиКода = СтрРазделить(КодИнтервалДиагнозов, Разделитель, Ложь);
	НовыеЧастиКода = Новый Массив;
	Для Каждого ЧастьКода Из ЧастиКода Цикл
		НоваяЧастьКода = СокрЛП(ЧастьКода);
		Если Лев(НоваяЧастьКода,1) = "1" Тогда
			ЧастиКода[ЧастиКода.Найти(ЧастьКода)] = "I" + Прав(НоваяЧастьКода, СтрДлина(НоваяЧастьКода) - 1);
		КонецЕсли;
	КонецЦикла;
	КодИнтервалДиагнозов = СтрСоединить(ЧастиКода, Разделитель);
	
КонецПроцедуры

Процедура ПереносВОтдельныйРегистрИсторииСегментации_Этап1()
	
	// Копирование всех данных из СегментыКлиентов в ИсторияСегментовКлиентов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СегментыКлиентов.Период КАК Период,
		|	СегментыКлиентов.Клиент КАК Клиент,
		|	СегментыКлиентов.ВидСегментации КАК ВидСегментации,
		|	СегментыКлиентов.Сегмент КАК Сегмент
		|ИЗ
		|	РегистрСведений.СегментыКлиентов КАК СегментыКлиентов";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ИсторияСегментовКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	
	ОперацийВТранзакции = 500;
	Сч = 0;
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ИсторияСегментовКлиентов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Клиент = Выборка.Клиент;
		МенеджерЗаписи.ВидСегментации = Выборка.ВидСегментации;
		МенеджерЗаписи.Сегмент = Выборка.Сегмент;
		МенеджерЗаписи.Записать();
		
		Если сч = ОперацийВТранзакции Тогда
			сч = 0;
			Попытка 
				ЗафиксироватьТранзакцию();
			Исключение
			КонецПопытки;
			НачатьТранзакцию();
		Иначе
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Попытка 
		ЗафиксироватьТранзакцию();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПереносВОтдельныйРегистрИсторииСегментации_Этап2()
	
	// Перенос в СегментыКлиентов среза последних сегментов (из ИсторияСегментовКлиентов).
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СегментыКлиентовСрезПоследних.Период КАК Период,
		|	СегментыКлиентовСрезПоследних.Клиент КАК Клиент,
		|	СегментыКлиентовСрезПоследних.ВидСегментации КАК ВидСегментации,
		|	СегментыКлиентовСрезПоследних.Сегмент КАК Сегмент
		|ИЗ
		|	РегистрСведений.ИсторияСегментовКлиентов.СрезПоследних КАК СегментыКлиентовСрезПоследних
		|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.СегментыКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	
	ОперацийВТранзакции = 500;
	Сч = 0;
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.СегментыКлиентов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Клиент = Выборка.Клиент;
		МенеджерЗаписи.ВидСегментации = Выборка.ВидСегментации;
		МенеджерЗаписи.Сегмент = Выборка.Сегмент;
		МенеджерЗаписи.Записать();
		
		Если сч = ОперацийВТранзакции Тогда
			сч = 0;
			Попытка 
				ЗафиксироватьТранзакцию();
			Исключение
			КонецПопытки;
			НачатьТранзакцию();
		Иначе
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Попытка 
		ЗафиксироватьТранзакцию();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДанныеОРодственникахВЛисткахНетрудоспособности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛистокНетрудоспособности.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
		|ГДЕ
		|	(ЛистокНетрудоспособности.удалить_Родственник1ФИО <> """"
		|			ИЛИ ЛистокНетрудоспособности.удалить_Родственник2ФИО <> """")";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Объект.удалить_Родственник1ФИО) Тогда
			НоваяСтрока = Объект.ДанныеПоУходуЗаРодственниками.Добавить();
			ЗаполнитьФИОВСтрокеРодственников(Объект.удалить_Родственник1ФИО, НоваяСтрока);
            НоваяСтрока.ДатаРождения = Объект.удалить_Родственник1ДатаРождения;
			НоваяСтрока.СтепеньРодства = Объект.удалить_Родственник1СтепеньРодства;
			НоваяСтрока.СтрокаЗарегистрирована = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.удалить_Родственник2ФИО) Тогда
			НоваяСтрока = Объект.ДанныеПоУходуЗаРодственниками.Добавить();
			ЗаполнитьФИОВСтрокеРодственников(Объект.удалить_Родственник2ФИО, НоваяСтрока);
			НоваяСтрока.ДатаРождения = Объект.удалить_Родственник2ДатаРождения;
			НоваяСтрока.СтепеньРодства = Объект.удалить_Родственник2СтепеньРодства;
			НоваяСтрока.СтрокаЗарегистрирована = Истина;
		КонецЕсли;
		Объект.Записать();
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьФИОВСтрокеРодственников(ФИО, Строка)
	мФИО = СтрРазделить(ФИО, " ");
	Если мФИО.Количество() >= 1 Тогда
		Строка.Фамилия = мФИО[0];
		Если мФИО.Количество() >= 2 Тогда
			Строка.Имя = мФИО[1];
			Если мФИО.Количество() >= 3 Тогда
				Строка.Отчество = мФИО[2];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПервоначальноеОбновлениеЕГИСЗ()
	
	// Первоначальная настройка режима обновления справочников.
	РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.ПервоначальноеЗаполнение();
	
	// Роли подписантов электронных медицинских документов.
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.РолиПриПодписиМедДокументов.ПолучитьМакет("РолиДляПодписанияШаблоновПоУмолчанию"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитМераКоличестваВКлассификатореЕдиницИзмерения()

	МераПоУмолчанию = Перечисления.МераКоличестваПредметаРасчетаККТ.Штука;	// Возможно, что лучше использовать Перечисления.МераКоличестваПредметаРасчетаККТ.ИныеЕдиницыИзмерения.
	
	// Получим таблицу имен всех мер количества предмета расчета ККТ.	
	МерыКоличества = РаботаСТорговымОборудованием.МерыКоличестваНаименованияСсылок();
	
	// Получим все базовые единицы измерения с незаполненным реквизитом.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
		|	КлассификаторЕдиницИзмерения.Код КАК Код,
		|	КлассификаторЕдиницИзмерения.Наименование КАК Наименование,
		|	КлассификаторЕдиницИзмерения.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.МераКоличества = ЗНАЧЕНИЕ(Перечисление.МераКоличестваПредметаРасчетаККТ.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПодходящаяМераНайдена = Ложь;	
		
		Для Каждого Мера Из МерыКоличества Цикл 
			// Будем сравнивать полное название базовой единицы измерения и название меры, если совпадут - заполняем реквизит.
			Если НРег(СокрЛП(ВыборкаДетальныеЗаписи.НаименованиеПолное)) = Нрег(Мера.Имя) Тогда 
				ПодходящаяМераНайдена = Истина;
				// Совпадение найдено - сохраним в реквизите.	
				ЕИОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				ЕИОбъект.МераКоличества = Мера.Ссылка;
				ЕИОбъект.Записать();
				
				Прервать;
			КонецЕсли
		КонецЦикла;
		// Заполним значением по умолчанию.	  
		Если Не ПодходящаяМераНайдена Тогда
			ЕИОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЕИОбъект.МераКоличества = МераПоУмолчанию;
			ЕИОбъект.Записать();	
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПривестиКодыЕдиницИзмеренияКОКЕИ()
	
	Выборка = Справочники.КлассификаторЕдиницИзмерения.Выбрать();
	
	ОКЕИ = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	КолОКЕИ = ОКЕИ.ВысотаТаблицы;
	
	Пока Выборка.Следующий() Цикл
		
		Код = СокрЛП(Выборка.Код);
		Имя = НРег(Выборка.Наименование);
		ИмяПолное = НРег(Выборка.НаименованиеПолное);
		
		КодОКЕИ = Неопределено;
		
		Для Сч = 1 По КолОКЕИ Цикл
			
			Если НРег(ОКЕИ.Область(Сч, 4).Текст) = Имя
				Или НРег(ОКЕИ.Область(Сч, 3).Текст) = ИмяПолное
			Тогда
				КодОКЕИ = ОКЕИ.Область(Сч, 2).Текст;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КодОКЕИ) И Код <> КодОКЕИ Тогда
			Попытка
				СправочникОбъект = Выборка.ПолучитьОбъект();
				СправочникОбъект.Код = КодОКЕИ;
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереименоватьВидКИНомерICQ()
	
	Вид = Справочники.ВидыКонтактнойИнформации.НомерПрочий;
	Если Вид.Наименование = "Номер ICQ" Тогда
		Объект = Вид.ПолучитьОбъект();
		Объект.Наименование = "Номер прочий";
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьВерсииКлассификаторовМинздрава()
	
	УстановитьПривилегированныйРежим(Истина);
	НЗ = РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	
	Для Каждого СтрокаНЗ Из НЗ Цикл
		СтрокаНЗ.Версия = "";
		СтрокаНЗ.ДатаВерсии = Дата(1,1,1);
	КонецЦикла;
	
	НЗ.Записать();
	
КонецПроцедуры

Процедура УстановитьТипыРегламентированныхСтандартов()
	
	Выборка = Справочники.СтандартыЛечения.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа
			Или Не Выборка.ВидСтандарта
			Или Выборка.РучноеРедактирование
		Тогда
			Продолжить;
		КонецЕсли;
		СтандартЛечения = Выборка.ПолучитьОбъект();
		СтандартЛечения.ТипРегламентированногоСтандарта = 2;
		СтандартЛечения.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтарыеСобственныеЭЛННаВерхнийРегистр()
	
	// Старые ЭЛН передавались в верхнем регистре полей, хранимых в нём без преобразования в верхний регистр.
	//	Новые ЭЛН будут передаваться без преобразования ВРег().
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистокНетрудоспособности.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
	|ГДЕ
	|	ЛистокНетрудоспособности.ОбновленИзФСС = ЛОЖЬ
	|	И ЛистокНетрудоспособности.ЭлектронныйБольничный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Фамилия = ВРег(Объект.Фамилия);
		Объект.Имя = ВРег(Объект.Имя);
		Объект.Отчество = ВРег(Объект.Отчество);
		Объект.ЛПУИмя = ВРег(Объект.ЛПУИмя);
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить("Запись%1Врач");
		Реквизиты.Добавить("Запись%1ВрачДолжность");
		Реквизиты.Добавить("Запись%1ПредседательВК");
		
		Для Каждого ШаблонРеквизита Из Реквизиты Цикл
			Для Сч = 1 По 3 Цикл
				ИмяРеквизита = СтрШаблон(ШаблонРеквизита, Строка(Сч));
				
				Если ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
					
					Если ТипЗнч(Объект.Запись1Врач) = Тип("СправочникСсылка.Сотрудники") Тогда
						Объект[ИмяРеквизита] = ВРег(Объект[ИмяРеквизита].Наименование); // Нельзя ОбщегоНазначения.ФИОФизЛица().
					Иначе
						Объект[ИмяРеквизита] = ВРег(Объект[ИмяРеквизита]);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Элемент Из Объект.ДанныеПоУходуЗаРодственниками Цикл
			Элемент.Фамилия = ВРег(Элемент.Фамилия);
			Элемент.Имя = ВРег(Элемент.Имя);
			Элемент.Отчество = ВРег(Элемент.Отчество);
		КонецЦикла;
		
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатораРолиПриПодписиМедДокументов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.2.1.1.734");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.368");
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатораРолиПриПодписиВитальныеПараметры()
	
	УстановитьПривилегированныйРежим(Истина);
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.262");
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатора(Классификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МЗ = РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.СоздатьМенеджерЗаписи();
	МЗ.Классификатор = Классификатор;
	МЗ.Прочитать();
	
	Если МЗ.Выбран() Тогда
		МЗ.Версия = "";
		МЗ.ДатаВерсии = Дата(1,1,1);
		МЗ.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрДвижениеДенежныхСредств_ОчиститьКассуПлатежныхПоручений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияДенежныхСредств.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДвиженияДенежныхСредств
	|ГДЕ
	|	(ДвиженияДенежныхСредств.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|			ИЛИ ДвиженияДенежныхСредств.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	|			ИЛИ ДвиженияДенежныхСредств.Регистратор ССЫЛКА Документ.ВедомостьОВыплаченнойЗарплатеЧерезБанк)
	|	И ДвиженияДенежныхСредств.Касса <> НЕОПРЕДЕЛЕНО"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	
	НЗ = РегистрыНакопления.ДвиженияДенежныхСредств.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		НЗ.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НЗ.Прочитать();
		Для Каждого Запись Из НЗ Цикл
			Запись.Касса = Неопределено; // В старом релизе там СправочникСсылка.Кассы.ПустаяСсылка().
		КонецЦикла;
		НЗ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПредупреждениеСовместимостиШаблоновWORD_2048()
	
	РежимПечатиПоШаблонуWORD = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимПечатиПоШаблонуWORD");
	
	Если РежимПечатиПоШаблонуWORD <> Перечисления.РежимыПечатиПоШаблонуWORD.ФормироватьНаКлиентеВOpenOffice Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныПечати.ИмяФайлаМакета КАК ИмяФайлаМакета,
		|	ШаблоныПечати.Представление КАК Представление
		|ИЗ
		|	Справочник.ШаблоныПечати КАК ШаблоныПечати
		|ГДЕ
		|	НЕ ШаблоныПечати.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПроблемныеШаблоны = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ИмяФайлаМакета) 
				И СтрНайти(Выборка.ИмяФайлаМакета, ".docx") = 0 
			Тогда
				ПроблемныеШаблоны.Добавить(Выборка.Представление);
			КонецЕсли;
		КонецЦикла;
		
		Если ПроблемныеШаблоны.Количество() <> 0 Тогда
			
			ТекстСообщения = "Есть шаблоны печати WORD с макетами не в формате "".docx"", для сохранения работоспособности шаблонов необходимо пересохранить их в формат "".docx"":";
			Для Каждого ИмяШаблона Из ПроблемныеШаблоны Цикл
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстСообщения, ИмяШаблона, Символы.ПС + " - ");
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщенияРЭМДЗаменитьПутиЭМДНаОтносительные()
	
	Выборка = Справочники.СообщенияРЭМД.Выбрать();
	ИндексЭлемента = 0;
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Документ.Тестовый Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексЭлемента = 500 Тогда
			ЗафиксироватьТранзакцию();
			ИндексЭлемента = 0;
			НачатьТранзакцию();
		КонецЕсли;
		
		ПутьДоЭМД = Выборка.ПутьКФайлуЭМД;
		Файл = Новый Файл(ПутьДоЭМД);
		
		Если ПутьДоЭМД <> Файл.Имя Тогда
			Попытка
				СообщениеРЭМД = Выборка.Ссылка.ПолучитьОбъект();
				СообщениеРЭМД.ПутьКФайлуЭМД = Файл.Имя;
				СообщениеРЭМД.Записать();
				ИндексЭлемента = ИндексЭлемента + 1;
			Исключение
				ЗафиксироватьТранзакцию();
				ИндексЭлемента = 0;
				НачатьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура РазархивироватьГруппыНМУ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураМедицинскихУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
		|ГДЕ
		|	НоменклатураМедицинскихУслуг.ЭтоГруппа
		|	И НоменклатураМедицинскихУслуг.Архив";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НМУ = Выборка.Ссылка.ПолучитьОбъект();
		НМУ.Архив = Ложь;
		НМУ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатораНМУ()
	
	УстановитьПривилегированныйРежим(Истина);
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1070");
	
КонецПроцедуры

Процедура ПроставитьАвтономныеЭТЗапрашиватьПодтверждение()
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Справочники.ЭквайринговыеТерминалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИспользоватьЭТАвтономно Тогда
			Попытка
				Объект = Выборка.ПолучитьОбъект();
				Объект.ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ = Истина;
				Объект.Записать();
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВнешниеКомпонентыИзДрайверов()
	// Переход 1С:БПО с редакции 2.1 на 3.1
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДрайверыОборудования.Ссылка КАК Ссылка,
		|	ДрайверыОборудования.ВерсияДрайвера КАК ВерсияДрайвера,
		|	ДрайверыОборудования.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ДрайверыОборудования.УдалитьЗагруженныйДрайвер КАК УдалитьЗагруженныйДрайвер
		|ИЗ
		|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
		|ГДЕ
		|	ДрайверыОборудования.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ДвоичныеДанныеДрайвера = ВыборкаДетальныеЗаписи.УдалитьЗагруженныйДрайвер.Получить();
			ДанныеОКомпоненте = ВнешниеКомпонентыСлужебный.ИнформацияОКомпонентеИзФайла(ДвоичныеДанныеДрайвера);
			Если ДанныеОКомпоненте.Разобрано Тогда
				РеквизитыКомпоненты = ДанныеОКомпоненте.Реквизиты;
				РезультатПоиска = Справочники.ВнешниеКомпоненты.НайтиПоРеквизиту("Идентификатор", РеквизитыКомпоненты.Идентификатор);
				Если ЗначениеЗаполнено(РезультатПоиска) Тогда
					Продолжить;
				КонецЕсли;
				НоваяВнешняяКомпонента = Справочники.ВнешниеКомпоненты.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НоваяВнешняяКомпонента, РеквизитыКомпоненты);
				Если НЕ ЗначениеЗаполнено(НоваяВнешняяКомпонента.Версия) Тогда
					НоваяВнешняяКомпонента.Версия = "0";				
				КонецЕсли;
				НоваяВнешняяКомпонента.ХранилищеКомпоненты = Новый ХранилищеЗначения(ДвоичныеДанныеДрайвера);
				НоваяВнешняяКомпонента.Использование = Перечисления.ВариантыИспользованияВнешнихКомпонент.Используется;
				НоваяВнешняяКомпонента.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки
	КонецЦикла;	

КонецПроцедуры

Процедура ЗаполнитьРасположениеПодписиУВерсийШаблонов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииШаблоновHTML.Ссылка КАК Ссылка,
		|	ШаблоныHTML.РасположениеПодписи КАК РасположениеПодписи
		|ИЗ
		|	Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
		|		ПО (ШаблоныHTML.Ссылка = ВерсииШаблоновHTML.Владелец)
		|			И (ШаблоныHTML.РасположениеПодписи <> ВерсииШаблоновHTML.РасположениеПодписи)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВерсияШаблона = Выборка.Ссылка.ПолучитьОбъект();
		ВерсияШаблона.РасположениеПодписи = Выборка.РасположениеПодписи;
		Попытка
			ВерсияШаблона.Записать();
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатораИнструментальныхИсследований()
	
	УстановитьПривилегированныйРежим(Истина);
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1471");
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатораРегистрируемыхЭлектроннхеМедДокументов()
	
	УстановитьПривилегированныйРежим(Истина);
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1520");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.41");
	
КонецПроцедуры

Процедура ЕГИСЗ_ОбновитьКэшиОтветов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕГИСЗНастройкиИнтеграции.МедицинскаяОрганизация КАК МедицинскаяОрганизация
		|ИЗ
		|	РегистрСведений.ЕГИСЗНастройкиИнтеграции КАК ЕГИСЗНастройкиИнтеграции
		|ГДЕ
		|	ЕГИСЗНастройкиИнтеграции.СертификатЭЦППодписиSOAPСообщений <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстУспешноПодписан = Истина;
		ИнтеграцияЕГИСЗСервер.ОбновитьКэшОтветов(Выборка.МедицинскаяОрганизация, ТекстУспешноПодписан);
		
		Если Не ТекстУспешноПодписан Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось установить подпись. Проверьте настройки ЭЦП, указанной в настройках ЕГИСЗ для медицинской организации ""%1"".'"), Выборка.МедицинскаяОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816()
	
	// SMS
	Выб = Справочники.ВидыСообщенийРассылки.Выбрать();
	Пока Выб.Следующий() Цикл
		Попытка
			Объект = Выб.ПолучитьОбъект();
			Для Каждого СтрокаАлгоритма Из Объект.ПоляШаблонаТекста Цикл
				АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816_ОбновитьТекст(СтрокаАлгоритма.Выражение);
			КонецЦикла;
			Для Каждого СтрокаАлгоритма Из Объект.Получатели Цикл
				АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816_ОбновитьТекст(СтрокаАлгоритма.ИмяРеквизита);
			КонецЦикла;
			Если СтрНайти(НРег(Объект.ШаблонТекста), "<мастер>") <> 0 Тогда
				АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816_ОбновитьТекст(Объект.ШаблонТекста);
				Для Каждого СтрокаАлгоритма Из Объект.Получатели Цикл
					АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816_ОбновитьТекст(СтрокаАлгоритма.ИмяПоля);
				КонецЦикла;
			КонецЕсли;
			
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Шаблоны Word
	Выб = Справочники.ШаблоныПечати.Выбрать();
	Пока Выб.Следующий() Цикл
		Попытка
			Объект = Выб.ПолучитьОбъект();
			Для Каждого СтрокаАлгоритма Из Объект.ПараметрыПечати Цикл
				АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816_ОбновитьТекст(СтрокаАлгоритма.Значение);
			КонецЦикла;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Вычисляемые значаения параметров шаблонов приема
	Выб = Справочники.ВычисляемыеЗначенияПараметров.Выбрать();
	Пока Выб.Следующий() Цикл
		Попытка
			Объект = Выб.ПолучитьОбъект();
			АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816_ОбновитьТекст(Объект.АлгоритмВычисления);
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция АктуализироватьВнешниеАлгоритмыПодУнификациюРеквизитов204816_ОбновитьТекст(ТекстОбъекта)
	
	Перем ТекстНовый;
	
	// Разбивка строк для возможности автозамены "без разбора" (в случае филиала) или исключения из поиска под замену (в случае сотрудника).
	Текст = ТекстОбъекта;
	Текст = СтрЗаменить(Текст, "С"+"алон", "Филиал");
	Текст = СтрЗаменить(Текст, "с"+"алон", "филиал");
	Текст = СтрЗаменить(Текст, "М"+"астер", "Сотрудник");
	Текст = СтрЗаменить(Текст, "м"+"астер", "сотрудник");
	
	Если СтрНайти(НРег(Текст), "с"+"алон") <> 0
		Или СтрНайти(НРег(Текст), "м"+"астер") <> 0
	Тогда
		// Сами виноваты.
		Текст = НРег(Текст);
		Текст = СтрЗаменить(Текст, "с"+"алон", "филиал");
		Текст = СтрЗаменить(Текст, "м"+"астер", "сотрудник");
	КонецЕсли;
	
	Если Текст <> ТекстОбъекта Тогда
		ТекстОбъекта = Текст;
	КонецЕсли;
	
КонецФункции

Процедура ПеренестиПодключаемоеОборудованиеВЭквайринговыхТерминалахИзРеквизитаВТЧ()
	
	Выборка = Справочники.ЭквайринговыеТерминалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.УдалитьПодключаемоеОборудование) Тогда
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			Оборудование = Элемент.Оборудование.Добавить();
			Оборудование.ПодключаемоеОборудование = Элемент.УдалитьПодключаемоеОборудование;
			Элемент.УдалитьПодключаемоеОборудование = Неопределено;
			Элемент.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРасположенияПодписейHTMLШаблонов()
	
	ЧисловыеРасположенияПодписи = Справочники.ШаблоныHTML.ЧисловыеРасположенияПодписи();
	ИзменитьРасположениеПодписи(Справочники.ШаблоныHTML,		ЧисловыеРасположенияПодписи);
	ИзменитьРасположениеПодписи(Справочники.ВерсииШаблоновHTML,	ЧисловыеРасположенияПодписи);
	
КонецПроцедуры

Процедура ИзменитьРасположениеПодписи(Справочник, ЧисловыеРасположенияПодписи)
	
	Выборка = Справочник.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		ЭлементСправочника = Выборка.ПолучитьОбъект();
		
		Если ЭлементСправочника.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент Тогда
			ЭлементСправочника.РасположениеПодписи = Перечисления.РасположениеПодписи.НеВыводить;
		ИначеЕсли ЗначениеЗаполнено(ЭлементСправочника.РасположениеПодписи) Тогда
			ЭлементСправочника.РасположениеПодписи = ЧисловыеРасположенияПодписи.Получить(ЭлементСправочника.РасположениеПодписи);
		Иначе
			ЭлементСправочника.РасположениеПодписи = Перечисления.РасположениеПодписи.ПослеДокумента;
		КонецЕсли;
		
		Попытка
			ЭлементСправочника.Записать();
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеЛицензииМедицинскойДеятельности()
	
	Выборка = Справочники.Филиалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		ФилиалОбъект = Выборка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ФилиалОбъект.Лицензия) Тогда
			Лицензии = РегистрыСведений.ЛицензииМедицинскойДеятельности;
			НоваяЛицензия = Лицензии.СоздатьМенеджерЗаписи();
			НоваяЛицензия.Филиал = ФилиалОбъект.Ссылка;
			НоваяЛицензия.НомерЛицензии = ФилиалОбъект.Лицензия; 
			
			Если ЗначениеЗаполнено(ФилиалОбъект.ДатаРегистрацииЛицензии) Тогда
				НоваяЛицензия.Период = ФилиалОбъект.ДатаРегистрацииЛицензии;
			Иначе
				НоваяЛицензия.Период = Дата(1900,1,1);
			КонецЕсли;
			НоваяЛицензия.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УнификацияОтраслевыхИмен_ПользовательскиеВариантыОтчетов()
	
	Выборка = Справочники.ВариантыОтчетов.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Пользовательский Тогда	
			
			Попытка
				Вариант = Выборка.ПолучитьОбъект();
				Настройки = Вариант.Настройки.Получить();
				Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
					
					// Отбор, Выбор и Условное оформление
					УнификацияОтраслевыхИмен_ЗаменитьОтборВыборУсловноеОформление(Настройки);
					
					// Группировки
					УнификацияОтраслевыхИмен_ГруппировкиСКД(Настройки, Настройки.Структура);
					
					Вариант.Настройки = Новый ХранилищеЗначения(Настройки);
					Вариант.Записать();
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура УнификацияОтраслевыхИмен_ЗаменитьВПолеКомпоновкиЭлементов(Настройки, ИмяЭлемента, ИмяПоля)
	
	ЗаменяемыеИмена = Новый Соответствие;
	ЗаменяемыеИмена.Вставить("Салон", "Филиал");
	ЗаменяемыеИмена.Вставить(".Мастер", ".Сотрудник");
	
	Если ИмяЭлемента = "Элементы" Тогда
		КоллекцияЭлементов = Настройки.Элементы;	
	Иначе
		КоллекцияЭлементов = Настройки[ИмяЭлемента].Элементы;	
	КонецЕсли;
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если Не ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
				ИЛИ ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")	
			Тогда
				УнификацияОтраслевыхИмен_ЗаменитьВПолеКомпоновкиЭлементов(Элемент, "Элементы", ИмяПоля); 		
			Иначе
				Для Каждого ЗаменяемоеИмя Из ЗаменяемыеИмена Цикл
					Если СтрНайти(Строка(Элемент[ИмяПоля]), ЗаменяемоеИмя.Ключ) <> 0 Тогда
						Элемент[ИмяПоля] = Новый ПолеКомпоновкиДанных(СтрЗаменить(Строка(Элемент[ИмяПоля]), ЗаменяемоеИмя.Ключ, ЗаменяемоеИмя.Значение));						
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры 

Процедура УнификацияОтраслевыхИмен_ГруппировкиСКД(Настройки, Группа)
	
	Для Каждого Элемент Из Группа Цикл

		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
		Тогда
			УнификацияОтраслевыхИмен_ГруппировкиСКД(Элемент, Элемент.Структура);
			УнификацияОтраслевыхИмен_ЗаменитьВПолеКомпоновкиЭлементов(Элемент, "ПоляГруппировки", "Поле");
			УнификацияОтраслевыхИмен_ЗаменитьОтборВыборУсловноеОформление(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			УнификацияОтраслевыхИмен_ГруппировкиСКД(Элемент, Элемент.Колонки);
			УнификацияОтраслевыхИмен_ГруппировкиСКД(Элемент, Элемент.Строки);
			УнификацияОтраслевыхИмен_ЗаменитьОтборВыборУсловноеОформление(Элемент, Истина);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			УнификацияОтраслевыхИмен_ГруппировкиСКД(Элемент, Элемент.Точки);
			УнификацияОтраслевыхИмен_ГруппировкиСКД(Элемент, Элемент.Серии);
			УнификацияОтраслевыхИмен_ЗаменитьОтборВыборУсловноеОформление(Элемент, Истина);
		КонецЕсли;
		
	КонецЦикла;			
	
КонецПроцедуры

Процедура УнификацияОтраслевыхИмен_ЗаменитьОтборВыборУсловноеОформление(Настройки, Таблица = Ложь)
	
	Если Не Таблица Тогда
		// Отбор
		УнификацияОтраслевыхИмен_ЗаменитьВПолеКомпоновкиЭлементов(Настройки, "Отбор", "ЛевоеЗначение");
	КонецЕсли;

	// Выбор
	УнификацияОтраслевыхИмен_ЗаменитьВПолеКомпоновкиЭлементов(Настройки, "Выбор", "Поле");	
	
	// Условное оформление
	Для Каждого ЭлементОформления Из Настройки.УсловноеОформление.Элементы Цикл
		// Отбор
		УнификацияОтраслевыхИмен_ЗаменитьВПолеКомпоновкиЭлементов(ЭлементОформления, "Отбор", "ЛевоеЗначение");
		
		// Поля
		УнификацияОтраслевыхИмен_ЗаменитьВПолеКомпоновкиЭлементов(ЭлементОформления, "Поля", "Поле"); 
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатораЛабораторныхТестов()
	
	УстановитьПривилегированныйРежим(Истина);
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1080");
	
КонецПроцедуры

Процедура ЗаполнитьОбластиПримененияФорматовФайловДляЗагрузкиДанных()
	
	УстановитьПривилегированныйРежим(Истина);
	Выб = Справочники.ФорматыФайловДляЗагрузкиДанных.Выбрать();
	Пока Выб.Следующий() Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выб, "ОбластьПрименения") // На случай добавления иерархичности.
			И Не ЗначениеЗаполнено(Выб.ОбластьПрименения)
		Тогда
			СправочникОбъект = Выб.ПолучитьОбъект();
			СправочникОбъект.ОбластьПрименения = Перечисления.ОбластиПримененияФорматовФайловДляЗагрузкиДанных.Медосмотры;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УнификацияОтраслевыхИмен_НазначениеКИ()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяМетаданных", "Салоны");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НазначениеКонтактнойИнформации.Вид КАК Вид,
	|	НазначениеКонтактнойИнформации.ИмяМетаданных КАК ИмяМетаданных
	|ИЗ
	|	РегистрСведений.НазначениеКонтактнойИнформации КАК НазначениеКонтактнойИнформации
	|ГДЕ
	|	НазначениеКонтактнойИнформации.ИмяМетаданных = &ИмяМетаданных"
	;
	ЗаписьПроверки = РегистрыСведений.НазначениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
	Запись = РегистрыСведений.НазначениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьПроверки.Вид = Выборка.Вид;
		ЗаписьПроверки.ИмяМетаданных = "Филиалы";
		ЗаписьПроверки.Прочитать();
		НадоУдалять = ЗаписьПроверки.Выбран();
		
		Запись.Вид = Выборка.Вид;
		Запись.ИмяМетаданных = Выборка.ИмяМетаданных;
		Запись.Прочитать();
		
		Если НадоУдалять Тогда
			Запись.Удалить();
		Иначе
			Запись.ИмяМетаданных = "Филиалы";
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрИспользованияЭлектронныхПодписейЭМК()
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	УправлениеНастройкамиПереопределяемый.УстановитьПараметрУчета("ИспользоватьЭлектронныеПодписиЭМК", мУчетнаяПолитика.ИспользоватьЭлектронныеПодписиЭМК);
	
КонецПроцедуры

Процедура ОбновитьСтандартыЛечения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтандартыЛечения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтандартыЛечения КАК СтандартыЛечения
		|ГДЕ
		|	СтандартыЛечения.ДатаОбновления <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И СтандартыЛечения.РучноеРедактирование = ЛОЖЬ
		|	И СтандартыЛечения.ТипРегламентированногоСтандарта <> 999
		|	И СтандартыЛечения.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ТипыРегламентированныхСтандартов = Новый Массив;
	ТипыРегламентированныхСтандартов.Добавить(1);
	ТипыРегламентированныхСтандартов.Добавить(2);
	
	Справочники.СтандартыЛечения.ЗагрузкаРегламентированныхСтандартов(ТипыРегламентированныхСтандартов);
	
КонецПроцедуры

Процедура Обновить1СДрайверСШК_COM_на_Native()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаОборудования = Справочники.ПодключаемоеОборудование.Выбрать();
	Пока ВыборкаОборудования.Следующий() Цикл
		Если ВыборкаОборудования.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода 
			И ВыборкаОборудования.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1ССканерыШтрихкода
		Тогда
			Оборудование = ВыборкаОборудования.ПолучитьОбъект();
			Оборудование.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1ССканерыШтрихкодаNative;
			Оборудование.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НоваяНастройкаЗаСчетФирмыВидОплатыИспользуется()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -3)));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ТекущаяДата()));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОплатыОбороты.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	РегистрНакопления.Оплаты.Обороты(&ДатаНач, &ДатаКон, , ) КАК ОплатыОбороты
	|ГДЕ
	|	ОплатыОбороты.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплаты.ЗаСчетФирмы)"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УправлениеНастройками.УстановитьЗначениеПараметраУчетнойПолитики("ЗаСчетФирмыВидОплатыИспользуется", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипСпособовБезналичнойОплаты()
	
	НачатьТранзакцию();
	Выборка = Справочники.ЭквайринговыеТерминалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(Выборка, "Тип")) Тогда
			Объект = Выборка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(Объект.ТорговаяТочкаСБП) Тогда
				Объект.Тип = Перечисления.ТипыСпособовОплат.СБП;
			Иначе
				Объект.Тип = Перечисления.ТипыСпособовОплат.Эквайринг;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура Файлы_ЗаполнитьРеквизитКонечныйВладелецХранилищеДопИнформации()
	
	сч = 0;
	ОперацийВТранзакции = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХранилищеДополнительнойИнформации.Ссылка КАК Ссылка,
	               |	ХранилищеДополнительнойИнформации.Объект КАК Объект,
	               |	ХранилищеДополнительнойИнформации.КонечныйВладелец КАК КонечныйВладелец
	               |ИЗ
	               |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МетаданныеТипов = Новый Соответствие;
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.КонечныйВладелец) Тогда  
			Продолжить;	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Выборка.Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеТипа = МетаданныеТипов.Получить(ТипЗнч(Выборка.Объект));
		Если МетаданныеТипа = Неопределено Тогда
			МетаданныеТипа = Выборка.Объект.Метаданные();
			МетаданныеТипов.Вставить(ТипЗнч(Выборка.Объект), МетаданныеТипа);
		КонецЕсли;
		
		Попытка
			Если ТипЗнч(Выборка.Объект) <> Тип("СправочникСсылка.Клиенты") Тогда
				
				Клиент = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(Выборка.Объект, "Клиент");
				Если ЗначениеЗаполнено(Клиент) Тогда
					ОбъектФайл = Выборка.Ссылка.ПолучитьОбъект();
					ОбъектФайл.КонечныйВладелец = Клиент;
					ОбъектФайл.Записать();
			
					Если сч = ОперацийВТранзакции Тогда
						сч = 0;
						Попытка 
							ЗафиксироватьТранзакцию();
						Исключение
						КонецПопытки;
						НачатьТранзакцию();
					Иначе
						сч = сч + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Исключение КонецПопытки; 
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЭЛН_ЗаполнитьРеквизитДатаОкончания()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛистокНетрудоспособности.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбменаФСС КАК СтатусыОбменаФСС
		|		ПО ЛистокНетрудоспособности.Ссылка = СтатусыОбменаФСС.Объект
		|			И (СтатусыОбменаФСС.СтатусФСС = ЗНАЧЕНИЕ(Перечисление.СтатусыФСС.ЭЛНЗакрыт))
		|ГДЕ
		|	ЛистокНетрудоспособности.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ ЛистокНетрудоспособности.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛистокНетрудоспособности.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	РазмерТранзакции = 50;
	Сч = 0;
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать();
		Исключение
		КонецПопытки;
		
		Сч = Сч + 1;
		Если Сч >= РазмерТранзакции Тогда
			
			Попытка
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			Исключение
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеКоличествоПлатежныхДокументов()

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предоплаты.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОплатаПлатежнойКартойКредитныеДанные.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ОплатаПлатежнойКартой.КредитныеДанные КАК ОплатаПлатежнойКартойКредитныеДанные
		|	ГДЕ
		|		ОплатаПлатежнойКартойКредитныеДанные.Количество = 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПриходныйКассовыйОрдерКредитныеДанные.Ссылка
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер.КредитныеДанные КАК ПриходныйКассовыйОрдерКредитныеДанные
		|	ГДЕ
		|		ПриходныйКассовыйОрдерКредитныеДанные.Количество = 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВозвратПоПлатежнойКартеКредитныеДанные.Ссылка
		|	ИЗ
		|		Документ.ВозвратПоПлатежнойКарте.КредитныеДанные КАК ВозвратПоПлатежнойКартеКредитныеДанные
		|	ГДЕ
		|		ВозвратПоПлатежнойКартеКредитныеДанные.Количество = 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РасходныйКассовыйОрдерКредитныеДанные.Ссылка
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер.КредитныеДанные КАК РасходныйКассовыйОрдерКредитныеДанные
		|	ГДЕ
		|		РасходныйКассовыйОрдерКредитныеДанные.Количество = 0) КАК Предоплаты
		|ГДЕ
		|	Предоплаты.Ссылка.НомерЧекаККМ = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТабЧасти Из ОбъектДокумента.КредитныеДанные Цикл
			СтрокаТабЧасти.Количество = 1;
		КонецЦикла;
		Попытка
			ОбъектДокумента.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ПараметрыЗабораАнализовОбновитьАлгоритмамиСрокамиПовторности()
	
	ВидыЛабораторий = ДопСерверныеФункцииПовтИсп.ПолучитьСтруктуруДляПеречисления("ВнешниеЛаборатории");
	Для Каждого ВидЛабораторииКлючЗначение Из ВидыЛабораторий Цикл
		// Обновляем, но только если в базе уже есть параметры забора для вида лаборатории (Истина).
		ЛабораторияСервер.ЗагрузитьПараметрыЗабораИзВнутреннихМакетов(ВидЛабораторииКлючЗначение.Значение, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаписатьВидыРабочегоВремениГрафика()
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Справочники.ВидыВремениГрафика.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Выборка.ПолучитьОбъект().Записать();
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРолиПодписейЭМД()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(Справочники.РолиПриПодписиМедДокументов.ПолучитьМакет("РолиДляПодписанияШаблоновПоУмолчанию"));
	ЗаполнитьТЧРолейПодписиШаблоновHTML();
	ЗаменитьРолиПодписейНаЭлементыКлассификатора();
	
КонецПроцедуры

Процедура ЗаполнитьТЧРолейПодписиШаблоновHTML()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныHTML.Шаблон КАК Шаблон,
		|	ВерсииШаблоновHTML.ВерсияШаблона КАК ВерсияШаблона
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ШаблоныHTML.Ссылка КАК Шаблон
		|	ИЗ
		|		Справочник.ШаблоныHTML КАК ШаблоныHTML
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML.РолиПодписей КАК ШаблоныHTMLРолиПодписей
		|			ПО (ШаблоныHTMLРолиПодписей.Ссылка = ШаблоныHTML.Ссылка)
		|	ГДЕ
		|		ШаблоныHTMLРолиПодписей.Ссылка ЕСТЬ NULL
		|		И НЕ ШаблоныHTML.ЭтоГруппа) КАК ШаблоныHTML
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВерсииШаблоновHTML.Ссылка КАК ВерсияШаблона,
		|			ВерсииШаблоновHTML.Владелец КАК Владелец
		|		ИЗ
		|			Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML.РолиПодписей КАК ВерсииШаблоновHTMLРолиПодписей
		|				ПО (ВерсииШаблоновHTMLРолиПодписей.Ссылка = ВерсииШаблоновHTML.Ссылка)
		|		ГДЕ
		|			ВерсииШаблоновHTMLРолиПодписей.Ссылка ЕСТЬ NULL) КАК ВерсииШаблоновHTML
		|		ПО (ВерсииШаблоновHTML.Владелец = ШаблоныHTML.Шаблон)
		|ИТОГИ ПО
		|	Шаблон";
	
	ВыборкаШаблонов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаШаблонов.Следующий() Цикл
		ШаблонОбъект = ВыборкаШаблонов.Шаблон.ПолучитьОбъект();
		
		Если ШаблонОбъект.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент Тогда
			РольПредседателя = ШаблонОбъект.РолиПодписей.Добавить();
			РольПредседателя.Роль = Перечисления.РолиПодписей.РольПредседательМедкомиссии(); // Председатель
			РольПредседателя.Обязательная = Истина;
			РольПредседателя.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.АвторДокумента;
			РольПредседателя.ИдентификаторРоли = Новый УникальныйИдентификатор;
			
			РольМедицинскойОрганизации = ШаблонОбъект.РолиПодписей.Добавить();
			РольМедицинскойОрганизации.Роль = Перечисления.РолиПодписей.МедицинскаяОрганизация;
			РольМедицинскойОрганизации.Обязательная = Истина;
			РольМедицинскойОрганизации.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.МедицинскаяОрганизация;
			РольМедицинскойОрганизации.ИдентификаторРоли = Новый УникальныйИдентификатор;
		Иначе
			РольАвтора = ШаблонОбъект.РолиПодписей.Добавить();
			РольАвтора.Роль = ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(19, "РолиПриПодписиМедДокументов"); // Автор документа
			РольАвтора.Обязательная = Истина;
			РольАвтора.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.АвторДокумента;
			РольАвтора.ИдентификаторРоли = Новый УникальныйИдентификатор;
			
			РольУчастника = ШаблонОбъект.РолиПодписей.Добавить();
			РольУчастника.Роль = ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(1, "РолиПриПодписиМедДокументов"); // Врач
			РольУчастника.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ДоступнаВсемКромеАвтора;
			РольУчастника.ИдентификаторРоли = Новый УникальныйИдентификатор;
		КонецЕсли;
		ШаблонОбъект.Записать();
		
		ВыборкаВерсий = ВыборкаШаблонов.Выбрать();
		
		Пока ВыборкаВерсий.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаВерсий.ВерсияШаблона) Тогда
				ВерсияОбъект = ВыборкаВерсий.ВерсияШаблона.ПолучитьОбъект();
				Для Каждого СтрокаРолиШаблона Из ШаблонОбъект.РолиПодписей Цикл
					ЗаполнитьЗначенияСвойств(ВерсияОбъект.РолиПодписей.Добавить(), СтрокаРолиШаблона);
				КонецЦикла;
				ВерсияОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Константы.ДатаПереходаНаРежимРаздельногоПодписанияЭМДПриёмов.Установить(ТекущаяДата());
	
КонецПроцедуры

Процедура ЗаменитьРолиПодписейНаЭлементыКлассификатора()
	
	НеВсеСтрокиИзменены = Истина;
	
	Пока НеВсеСтрокиИзменены Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 10000
			|	РолиИПодписиЭМД.Документ КАК Документ,
			|	РолиИПодписиЭМД.РольПодписи КАК РольПодписи,
			|	РолиИПодписиЭМД.УИД_ЭМД КАК УИД_ЭМД,
			|	РолиИПодписиЭМД.Пользователь КАК Пользователь,
			|	РолиИПодписиЭМД.ИдентификаторРоли КАК ИдентификаторРоли,
			|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП,
			|	РолиИПодписиЭМД.ДополнительныеДанные КАК ДополнительныеДанные
			|ИЗ
			|	РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
			|ГДЕ
			|	РолиИПодписиЭМД.РольПодписи В(&ЗаменяемыеРоли)";
		
		ЭлементыКлассификаторов = Новый Соответствие;
		ЭлементыКлассификаторов.Вставить(Перечисления.РолиПодписей.АвторДокумента,			ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(19,	"РолиПриПодписиМедДокументов"));
		ЭлементыКлассификаторов.Вставить(Перечисления.РолиПодписей.ПредседательМедКомиссии,	ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(14,	"РолиПриПодписиМедДокументов"));
		ЭлементыКлассификаторов.Вставить(Перечисления.РолиПодписей.Участник,				ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(1,	"РолиПриПодписиМедДокументов"));
		ЭлементыКлассификаторов.Вставить(Перечисления.РолиПодписей.ЗаведующийОтделением,	ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(5,	"РолиПриПодписиМедДокументов"));
		ЭлементыКлассификаторов.Вставить(Перечисления.РолиПодписей.ЛечащийВрач,				ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(18,	"РолиПриПодписиМедДокументов"));
		
		ЗаменяемыеРоли = Новый Массив;
		Для Каждого ЭлементКлассификатора Из ЭлементыКлассификаторов Цикл
			ЗаменяемыеРоли.Добавить(ЭлементКлассификатора.Ключ);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ЗаменяемыеРоли", ЗаменяемыеРоли);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НеВсеСтрокиИзменены = Выборка.Количество() > 0;
		
		Если НеВсеСтрокиИзменены Тогда
			КоличествоПереписанныхЗаписей = 0;
			МЗ = РегистрыСведений.РолиИПодписиЭМД.СоздатьМенеджерЗаписи();
			
			НачатьТранзакцию();
			Пока Выборка.Следующий() Цикл
				
				Если КоличествоПереписанныхЗаписей = 500 Тогда
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию();
					КоличествоПереписанныхЗаписей = 0;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(МЗ, Выборка);
				МЗ.Прочитать();
				МЗ.РольПодписи = ЭлементыКлассификаторов.Получить(МЗ.РольПодписи);
				МЗ.Записать(Истина);
				
				КоличествоПереписанныхЗаписей = КоличествоПереписанныхЗаписей + 1;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗапасыДнейУВидовРассылки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСообщенийРассылки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыСообщенийРассылки КАК ВидыСообщенийРассылки
		|ГДЕ
		|	ВидыСообщенийРассылки.ВидСобытия = ЗНАЧЕНИЕ(Справочник.ВидыСобытий.ДеньРожденияКлиента)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидСообщенийРассылки = Выборка.Ссылка.ПолучитьОбъект();
		ВидСообщенийРассылки.ЗапасДней = ВидСообщенийРассылки.ЗапасДней * -1;
		ВидСообщенийРассылки.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Универсальная процедура, не привязанная к конкретному релизу.
Процедура ОбновитьТекстВычисляемыхБлоковШаблоновПриема()
	
	ТабДокумент = Справочники.ВычисляемыеЗначенияПараметров.ПолучитьМакет("ДанныеДляОбновленияАлгоритмовВычисления");
	
	ОбластьЯчеек = ТабДокумент.Область(1, 1, ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы);
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	
	ДанныеДляОбновленияАлгоритмовВычисления = ПостроительОтчета.Результат.Выгрузить();
	
	Для Каждого ВычисляемоеЗначениеЗагружаемое Из ДанныеДляОбновленияАлгоритмовВычисления Цикл
		
		ВычисляемоеЗначениеСсылка = Справочники.ВычисляемыеЗначенияПараметров.ПолучитьСсылку(Новый УникальныйИдентификатор(ВычисляемоеЗначениеЗагружаемое.UID));
		
		ТекущийАлгоритмМассивСтрок = СтрРазделить(СокрЛП(ВычисляемоеЗначениеСсылка.АлгоритмВычисления), Символы.ПС);
		ТекстКЗаменеМассивСтрок = СтрРазделить(СокрЛП(ВычисляемоеЗначениеЗагружаемое.ТекстКЗамене), Символы.ПС);
		
		Если ТекущийАлгоритмМассивСтрок.Количество() <> ТекстКЗаменеМассивСтрок.Количество() Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстАлгоритмовСовпадает = Истина;
		Для Индекс = 0 По ТекущийАлгоритмМассивСтрок.Количество() - 1 Цикл
			Если СтрЗаменить(СокрЛП(ТекущийАлгоритмМассивСтрок[Индекс]), Символ(32), Символ(9)) <> СтрЗаменить(СокрЛП(ТекстКЗаменеМассивСтрок[Индекс]), Символ(32), Символ(9)) Тогда
				ТекстАлгоритмовСовпадает = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстАлгоритмовСовпадает Тогда 
			ВычисляемоеЗначениеОбъект = ВычисляемоеЗначениеСсылка.ПолучитьОбъект();
			ВычисляемоеЗначениеОбъект.АлгоритмВычисления = ВычисляемоеЗначениеЗагружаемое.ТекстДляЗамены;
			ВычисляемоеЗначениеОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПервоначальноеСозданиеОрганизацийПоФилиалам()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка,
	|	Филиалы.ИНН КАК ИНН,
	|	Филиалы.КПП КАК КПП,
	|	Филиалы.Наименование КАК Наименование,
	|	Филиалы.НазваниеОрганизации КАК НаименованиеПолное,
	|	Филиалы.ОГРН КАК ОГРН,
	|	Филиалы.ОКПО КАК ОКПО,
	|	Филиалы.МедицинскаяОрганизация КАК МедицинскаяОрганизация,
	|	Филиалы.Организация КАК Организация
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Филиалы.ПометкаУдаления"
	;
	Филиалы = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("ИНН");
	
	ПереноситсяИзФилиала = ОбщегоНазначенияБИТКлиентСервер.НовыйМассив("КПП", "ОГРН", "ОКПО", "МедицинскаяОрганизация");
	
	Пока Филиалы.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Филиалы.ИНН) Тогда
			ИНН = СокрЛП(Филиалы.ИНН);
			Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ИНН);
			Если ЗначениеЗаполнено(Организация) Тогда
				// Нашли органиацию для филиала
				УстановитьОрганизациюФилиалу(Филиалы.Ссылка, Организация);
				
				// В организацию переносим данные филиала
				ДополнитьОрганизациюИзФилиала(Организация, Филиалы, ПереноситсяИзФилиала);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Создаем организацию, если дошли сюда.
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		ОрганизацияОбъект.Наименование = ?(ПустаяСтрока(Филиалы.НаименованиеПолное), Филиалы.Наименование, Филиалы.НаименованиеПолное);
		ОрганизацияОбъект.НаименованиеПолное = Филиалы.НаименованиеПолное;
		ОрганизацияОбъект.ИНН = ИНН;
		ОрганизацияОбъект.Записать();
		
		УстановитьОрганизациюФилиалу(Филиалы.Ссылка, ОрганизацияОбъект.Ссылка);
		ДополнитьОрганизациюИзФилиала(ОрганизацияОбъект.Ссылка, Филиалы, ПереноситсяИзФилиала);
		
	КонецЦикла;
	
	// Контактная информация из филиала в организацию
	Филиалы.Сбросить();
	Пока Филиалы.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Филиалы.Ссылка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		НЗ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НЗ.Отбор.Объект.Установить(Филиалы.Ссылка);
		Для Каждого Запись Из НЗ Цикл
			Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			 Или Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			Тогда
				ЗаписьОрг = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				ЗаписьОрг.Объект = Филиалы.Ссылка.Организация;
				ЗаписьОрг.Тип = Запись.Тип;
				ЗаписьОрг.Вид = Запись.Вид;
				ЗаписьОрг.Прочитать();
				Если Не ЗаписьОрг.Выбран() Тогда
					ЗаполнитьЗначенияСвойств(ЗаписьОрг, Запись);
					ЗаписьОрг.Объект = Филиалы.Ссылка.Организация;
					ЗаписьОрг.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	// Лицензии на мед. деятельность из Филиалы в Организации
	НЗ = РегистрыСведений.ЛицензииМедицинскойДеятельности.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	ЗаписиНаУдаление = Новый Массив;
	Для Каждого Запись Из НЗ Цикл
		Если ТипЗнч(Запись.Филиал) = Тип("СправочникСсылка.Филиалы")
			И ЗначениеЗаполнено(Запись.Филиал.Организация)
			И Не Запись.Филиал.ПометкаУдаления
		Тогда
			Отбор = Новый Структура("Период, Филиал", Запись.Период, Запись.Филиал.Организация);
			ТЗ = НЗ.Выгрузить();
			Если ТЗ.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Запись.Филиал = Запись.Филиал.Организация;
			Иначе
				ЗаписиНаУдаление.Добавить(Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Запись Из ЗаписиНаУдаление Цикл
		НЗ.Удалить(Запись);
	КонецЦикла;
	
	НЗ.Записать();
	
	// Сертификаты организаций
	ПростановкаОрганизацийВСертификатыОрганизацийСправочник();
	
	// Медицинская отчетность
	ПростановкаОрганизацийВМедицинскуюОтчетность();
	
КонецПроцедуры

Процедура УстановитьОрганизациюФилиалу(Филиал, Организация)
	
	ФилиалОбъект = Филиал.ПолучитьОбъект();
	ФилиалОбъект.Организация = Организация;
	ФилиалОбъект.МедицинскаяОрганизация = Неопределено;
	ФилиалОбъект.Записать();
	
КонецПроцедуры

Процедура ДополнитьОрганизациюИзФилиала(Организация, Филиал, ПереноситсяИзФилиала)
	
	// Организация, Филиал - выборки и запроса.
	ДополнениеИзФилиала = Новый Структура;
	Для Каждого ПолеПереноса Из ПереноситсяИзФилиала Цикл
		Если ЗначениеЗаполнено(Филиал[ПолеПереноса])
			И Не ЗначениеЗаполнено(Организация[ПолеПереноса])
		Тогда
			ДополнениеИзФилиала.Вставить(ПолеПереноса, Филиал[ПолеПереноса]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнениеИзФилиала.Количество() <> 0 Тогда
		ОрганизацияОбъект = Организация.Ссылка.ПолучитьОбъект();
		Для Каждого Дополнение Из ДополнениеИзФилиала Цикл
			ОрганизацияОбъект[Дополнение.Ключ] = Дополнение.Значение;
		КонецЦикла;
		ОрганизацияОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПростановкаОрганизацийВСертификатыОрганизацийСправочник()
	
	// Простановка организации в сертификаты ЭЦП, упомянутые в РегистрыСведений.ПодписиМО.
	
	НЗ = РегистрыСведений.ПодписиМО.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	Для Каждого Запись Из НЗ Цикл
		
		Если Не Запись.Сертификат.Пустая()
			И Не Запись.Филиал.Пустая()
			И Запись.Сертификат.Организация.Пустая()
			И Не Запись.Сертификат.ПометкаУдаления
			И ТипЗнч(Запись.Филиал) = Тип("СправочникСсылка.Филиалы")
			И Не Запись.Филиал.Организация.Пустая()
		Тогда
			Попытка
				СертификатОбъект = Запись.Сертификат.ПолучитьОбъект();
				СертификатОбъект.Организация = Запись.Филиал.Организация;
				СертификатОбъект.Записать();
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПростановкаОрганизацийВМедицинскуюОтчетность()
	
	// Простановка организации в документы медицинской отчетности (ранее не было реквизита со справочником.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МедицинскийОтчет.Ссылка КАК Ссылка,
	|	МедицинскийОтчет.Филиал.Организация КАК ФилиалОрганизация
	|ИЗ
	|	Документ.МедицинскийОтчет КАК МедицинскийОтчет
	|ГДЕ
	|	МедицинскийОтчет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И МедицинскийОтчет.Филиал.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Организация = Выборка.ФилиалОрганизация;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеНовогоРеквизитаОрганизацииВДоговорах()
	
	Запрос = Новый Запрос;
	
	// 3. Единственная организация
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Организация = Выборка.Ссылка;
		ВыбДоговоры = Справочники.СоглашенияСтрахования.Выбрать();
		
		ЕстьГруппыДоговоров = Метаданные.Справочники.СоглашенияСтрахования.Иерархический И Метаданные.Справочники.СоглашенияСтрахования.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
		Пока ВыбДоговоры.Следующий() Цикл
			
			Если ЕстьГруппыДоговоров И ВыбДоговоры.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыбДоговоры.Организация.Пустая() Тогда
				ДоговорОбъект = ВыбДоговоры.ПолучитьОбъект();
				ДоговорОбъект.Организация = Организация;
				ДоговорОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	// 1. ЭТ
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(ТекущаяДатаСеанса(),-4));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК СпособОплаты,
	|	ЭквайринговыеТерминалы.Договор КАК Договор
	|ПОМЕСТИТЬ ЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Договор.Ссылка <> ЗНАЧЕНИЕ(Справочник.СоглашенияСтрахования.ПустаяСсылка)
	|	И ЭквайринговыеТерминалы.Договор.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОказаниеУслуг.Филиал) КАК Филиал,
	|	ЭТ.Договор КАК Договор
	|ИЗ
	|	Документ.ОказаниеУслуг.Оплата КАК ОказаниеУслугОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОказаниеУслуг КАК ОказаниеУслуг
	|		ПО (ОказаниеУслуг.Дата > &Дата
	|				И ОказаниеУслугОплата.Ссылка = ОказаниеУслуг.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭТ КАК ЭТ
	|		ПО ОказаниеУслугОплата.ЭквайринговыйТерминал = ЭТ.СпособОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭТ.Договор"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДоговорОбъект = Выборка.Договор.ПолучитьОбъект();
		ДоговорОбъект.Организация = Выборка.Филиал.Организация;
		ДоговорОбъект.Записать();
		
	КонецЦикла;
	
	// 2. Страхование
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеестрОказанныхУслугПоСоглашениям.Филиал.Организация КАК ФилиалОрганизация,
	|	РеестрОказанныхУслугПоСоглашениям.Соглашение КАК Соглашение
	|ИЗ
	|	Документ.РеестрОказанныхУслугПоСоглашениям КАК РеестрОказанныхУслугПоСоглашениям
	|ГДЕ
	|	РеестрОказанныхУслугПоСоглашениям.Проведен
	|	И РеестрОказанныхУслугПоСоглашениям.Соглашение.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДоговорОбъект = Выборка.Соглашение.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ДоговорОбъект.Организация) Тогда
			ДоговорОбъект.Организация = Выборка.ФилиалОрганизация;
			ДоговорОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеМедосмотров_2_0_49_1_ВидыМедосмотров

Процедура ОбновитьБлокМедосмотров_2_0_49_1()
	
	ОбновитьБлокМедосмотров_2_0_49_1_ЗаполнитьПриказыМО();
	ОбновитьБлокМедосмотров_2_0_49_1_ПерезаполнитьОбязательныеДействияМОВОбязВФ();
	ОбновитьБлокМедосмотров_2_0_49_1_УстановитьВреднымФакторамПриказ();
	ЗаполнитьПредопределенныеВредныеФакторы();
	ЗаполнитьПредопределенныеПриказыМО();
	ЗаполнитьПредопределенныеВидыМедосмотров();
	ОбновитьБлокМедосмотров_2_0_49_1_УдалитьВредФакторы302нУКлиентов();
	ОбновитьБлокМедосмотров_2_0_49_1_ОбновитьПереченьВредныхФаторов();
	ОбновитьБлокМедосмотров_2_0_49_1_ОбновитьСправки();
	ОбновитьБлокМедосмотров_2_0_49_1_УстановитьВидМедосмотраИПеренстиЭЦПДляПрохожденийМедОсмотра();
	ОбновитьБлокМедосмотров_2_0_49_1_УстановитьВидМедосмотраДляСПМО();
	
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_ПерезаполнитьОбязательныеДействияМОВОбязВФ()
	
	ОбязВФ29н = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия29н.ПолучитьОбъект();
	ОбязВФ302н = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия302н.ПолучитьОбъект();
	
	Если ОбязВФ29н.Врачи.Количество() > 0 Или ОбязВФ302н.ЛабораторныеИФункциональныеИсследования.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьОбязательныеДействияМедОсмотров.ДействиеМедосмотра КАК ДействиеМедосмотра,
		|	УдалитьОбязательныеДействияМедОсмотров.Ограничение КАК Ограничение,
		|	УдалитьОбязательныеДействияМедОсмотров.ТипМедосмотра КАК ТипМедосмотра,
		|	УдалитьОбязательныеДействияМедОсмотров.ЕстьВ302н КАК ЕстьВ302н
		|ИЗ
		|	РегистрСведений.УдалитьОбязательныеДействияМедОсмотров КАК УдалитьОбязательныеДействияМедОсмотров";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл     
		
		Если Выборка.ЕстьВ302н Тогда
			ОбновитьБлокМедосмотров_2_0_49_1_ДобавитьДействиеМОВоВредныйФактор(Выборка.ДействиеМедосмотра, Выборка.Ограничение, Выборка.ТипМедосмотра, ОбязВФ302н);
		КонецЕсли;
		
		ОбновитьБлокМедосмотров_2_0_49_1_ДобавитьДействиеМОВоВредныйФактор(Выборка.ДействиеМедосмотра, Выборка.Ограничение, Выборка.ТипМедосмотра, ОбязВФ29н);
		
	КонецЦикла;
	
	ОбязВФ29н.Записать();
	ОбязВФ302н.Записать();
		
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_ДобавитьДействиеМОВоВредныйФактор(ДействиеМедосмотра, Ограничение, ТипМедосмотра, ОбъектДляРаботы)
	
	Если ДействиеМедосмотра.Вид = Перечисления.ВидыДействийМедицинскогоОсмотра.Врач Тогда
		НовоеДействиеМедосмотра = ОбъектДляРаботы.Врачи.Добавить();
		НовоеДействиеМедосмотра.Врач = ДействиеМедосмотра;
	Иначе
		НовоеДействиеМедосмотра = ОбъектДляРаботы.ЛабораторныеИФункциональныеИсследования.Добавить();
		НовоеДействиеМедосмотра.Исследование = ДействиеМедосмотра;
	КонецЕсли;
	
	НовоеДействиеМедосмотра.Ограничение = Ограничение;
	НовоеДействиеМедосмотра.ТипМедосмотра = ТипМедосмотра;
	
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_УстановитьВреднымФакторамПриказ()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРабот.Ссылка КАК Ссылка,
		|	ПереченьВредныхФакторовИРабот.НомерПП КАК НомерПП,
		|	ПереченьВредныхФакторовИРабот.УдалитьНомерПП_302н КАК УдалитьНомерПП_302н
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
		|ГДЕ
		|	ПереченьВредныхФакторовИРабот.Предопределенный = ЛОЖЬ
		|	И ПереченьВредныхФакторовИРабот.ЭтоГруппа = ЛОЖЬ
		|	И ПереченьВредныхФакторовИРабот.Приказ = ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//ГруппаУстаревшиеДляПП302н = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		ОбъектВФ = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ОбъектВФ.УдалитьНомерПП_302н) Тогда
			//Если ГруппаУстаревшиеДляПП302н = Неопределено Тогда
			//	ГруппаУстаревшиеДляПП302н = Справочники.ПереченьВредныхФакторовИРабот.СоздатьГруппу();
			//	ГруппаУстаревшиеДляПП302н.Наименование = "Устаревшие";
			//	ГруппаУстаревшиеДляПП302н.Записать();
			//КонецЕсли;
			ОбъектВФ.НомерПП = ОбъектВФ.УдалитьНомерПП_302н;
			ОбъектВФ.НомерППДляСортировки = ОбъектВФ.УдалитьНомерППДляСортировки_302н;
			ОбъектВФ.Приказ = Справочники.ПриказыМедосмотров.Приказ302н;
			//ОбъектВФ.Родитель = ГруппаУстаревшиеДляПП302н;
		Иначе
			ОбъектВФ.Приказ = Справочники.ПриказыМедосмотров.Приказ29н;
		КонецЕсли;                                                        
		ОбъектВФ.ВрачиСтрока = СтрЗаменить(ОбъектВФ.ВрачиСтрока, Символы.ВК, "");
		ОбъектВФ.ЛабораторныеИФункциональныеИсследованияСтрока = СтрЗаменить(ОбъектВФ.ЛабораторныеИФункциональныеИсследованияСтрока, Символы.ВК, "");
		ОбъектВФ.МедицинскиеПротивопоказанияСтрока = СтрЗаменить(ОбъектВФ.МедицинскиеПротивопоказанияСтрока, Символы.ВК, "");
		ОбъектВФ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеВредныеФакторы()
	
	ОбязательныеДействия29н = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия29н.ПолучитьОбъект();
	ОбязательныеДействия29н.Приказ = Справочники.ПриказыМедосмотров.Приказ29н;
	ОбязательныеДействия29н.НомерПП = "ОбязательныеДействия";
	ОбязательныеДействия29н.Записать();
	
	ОбязательныеДействия302н = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия302н.ПолучитьОбъект();
	ОбязательныеДействия302н.Приказ = Справочники.ПриказыМедосмотров.Приказ302н;
	ОбязательныеДействия302н.НомерПП = "ОбязательныеДействия";
	ОбязательныеДействия302н.Записать();
	
	ОбязательныеДействия342н = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия342н.ПолучитьОбъект();
	ОбязательныеДействия342н.Приказ = Справочники.ПриказыМедосмотров.Приказ342н;
	ОбязательныеДействия342н.НомерПП = "ОбязательныеДействия";
	ОбязательныеДействия342н.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеПриказыМО()
	
	Приказ29н = Справочники.ПриказыМедосмотров.Приказ29н.ПолучитьОбъект();
	Приказ29н.ФакторСОбязДействиями = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия29н;
	Приказ29н.Записать();
	
	Приказ302н = Справочники.ПриказыМедосмотров.Приказ302н.ПолучитьОбъект();
	Приказ302н.ФакторСОбязДействиями = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия302н;
	Приказ302н.Записать();
	
	Приказ342н = Справочники.ПриказыМедосмотров.Приказ342н.ПолучитьОбъект();
	Приказ342н.ФакторСОбязДействиями = Справочники.ПереченьВредныхФакторовИРабот.ОбязательныеДействия342н;
	Приказ342н.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеВидыМедосмотров()
	
	ПоПриказу29н = Справочники.ВидыМедосмотров.ПоПриказу29н.ПолучитьОбъект();
	
	// На всякий случай при обновлении чтобы двойного заполнения не было
	Если ПоПриказу29н.Приказы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовыйПриказ = ПоПриказу29н.Приказы.Добавить();
	НовыйПриказ.Приказ = Справочники.ПриказыМедосмотров.Приказ29н;
	НовыйПриказ.НеИспользоватьБезВФ = Истина;
	ПоПриказу29н.Записать();
	
	ПоПриказу302н = Справочники.ВидыМедосмотров.ПоПриказу302н.ПолучитьОбъект();
	НовыйПриказ = ПоПриказу302н.Приказы.Добавить();
	НовыйПриказ.Приказ = Справочники.ПриказыМедосмотров.Приказ302н;
	НовыйПриказ.НеИспользоватьБезВФ = Истина;
	ПоПриказу302н.Записать();
	
	ПоПриказу342н = Справочники.ВидыМедосмотров.ПоПриказу342н.ПолучитьОбъект();
	НовыйПриказ = ПоПриказу342н.Приказы.Добавить();
	НовыйПриказ.Приказ = Справочники.ПриказыМедосмотров.Приказ342н;
	НовыйПриказ.НеИспользоватьБезВФ = Истина;
	ПоПриказу342н.Записать();
	
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_УстановитьВидМедосмотраИПеренстиЭЦПДляПрохожденийМедОсмотра()
	
	ДатаПриказа29н = МедосмотрыКлиентСервер.ДатаПриказа29н();
	
	ОбъектПриказ29н = Справочники.ПриказыМедосмотров.Приказ29н.ПолучитьОбъект();
	ОбъектПриказ29н.ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.АктуальныйВидРЭМДЗаключенияМО();
	ОбъектПриказ29н.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрохождениеМедосмотра.Ссылка КАК Ссылка,
		|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра КАК СписокНаПрохождениеМедосмотра,
		|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра.ПометкаУдаления КАК СписокНаПрохождениеМедосмотраПометкаУдаления,
		|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра.Дата КАК СписокНаПрохождениеМедосмотраДата
		|ИЗ
		|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
		|ГДЕ
		|	ПрохождениеМедосмотра.ПометкаУдаления = ЛОЖЬ
		|	И ПрохождениеМедосмотра.ВидМО = ЗНАЧЕНИЕ(Справочник.ВидыМедосмотров.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СчетчикТранзакции = 0;
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТребуетсяЗапись = Ложь;
		
		Если ДокОбъект.ВидПрохожденияМО <> Перечисления.ВидыМедосмотров.СправкаПрочий Тогда  
			
			Если ЗначениеЗаполнено(Выборка.СписокНаПрохождениеМедосмотра) 
				И Не Выборка.СписокНаПрохождениеМедосмотраПометкаУдаления
			Тогда
				ДатаДокументаОпредПриказа = Выборка.СписокНаПрохождениеМедосмотраДата;
			Иначе
				ДатаДокументаОпредПриказа = ДокОбъект.Дата;
			КонецЕсли;
			
			Если ДатаДокументаОпредПриказа >= ДатаПриказа29н Тогда
				ВидМедОсмотра = Справочники.ВидыМедосмотров.ПоПриказу29н;
			Иначе
				ВидМедОсмотра = Справочники.ВидыМедосмотров.ПоПриказу302н;
			КонецЕсли;
			ДокОбъект.ВидМО = ВидМедОсмотра;
			ТребуетсяЗапись = Истина;
			
		КонецЕсли;
		
		
		Если ДокОбъект.ПодписанЭП И ДокОбъект.ЭМД.Количество() = 0 Тогда
			ЭтоЗаключение29н = Ложь;
			
			Если ЗначениеЗаполнено(ДокОбъект.Номенклатура) Тогда
				ВидДокумента = ДокОбъект.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки.ВидДокумента;
			Иначе
				ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.АктуальныйВидРЭМДЗаключенияМО();
				ЭтоЗаключение29н = Истина;
			КонецЕсли;
			
			Для Каждого Эл Из ДокОбъект.РолиИПодписиЭМД Цикл
				
				НоваяСтрока = ДокОбъект.ЭМД.Добавить();
				НоваяСтрока.УИД = Эл.УИД_ЭМД;
				Если ЭтоЗаключение29н Тогда  
					НоваяСтрока.УИД_Шаблона = Справочники.ПриказыМедосмотров.Приказ29н.УникальныйИдентификатор();
					НоваяСтрока.ПриказВредныйФактор = Справочники.ПриказыМедосмотров.Приказ29н;
				Иначе
					НоваяСтрока.УИД_Шаблона = ДокОбъект.Номенклатура.ВредныйФакторСправки.УникальныйИдентификатор();
					НоваяСтрока.ШаблонЭМД = ДокОбъект.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
					НоваяСтрока.ПриказВредныйФактор = ДокОбъект.Номенклатура.ВредныйФакторСправки;
				КонецЕсли;
				НоваяСтрока.ВидДокументаЭМД = ВидДокумента; 
				НоваяСтрока.СообщениеРЭМД = ДокОбъект.СообщениеРЭМД;
				НоваяСтрока.ПутьКФайлуВАрхиве = ДокОбъект.ПутьКФайлуВАрхиве; 
				
				ТребуетсяЗапись = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ТребуетсяЗапись Тогда
			ДокОбъект.Записать();
		КонецЕсли;
		
		СчетчикТранзакции = СчетчикТранзакции + 1;
		Если СчетчикТранзакции > 50 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			СчетчикТранзакции = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_УстановитьВидМедосмотраДляСПМО()
	
	ДатаПриказа29н = МедосмотрыКлиентСервер.ДатаПриказа29н();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНаПрохождениеМедосмотра.Ссылка КАК Ссылка,
		|	СписокНаПрохождениеМедосмотра.ВидМО КАК ВидМО
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра КАК СписокНаПрохождениеМедосмотра
		|ГДЕ
		|	СписокНаПрохождениеМедосмотра.ПометкаУдаления = ЛОЖЬ
		|	И СписокНаПрохождениеМедосмотра.ВидМО = ЗНАЧЕНИЕ(Справочник.ВидыМедосмотров.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СчетчикТранзакции = 0;
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокОбъект.Дата >= ДатаПриказа29н Тогда
			ВидМО = Справочники.ВидыМедосмотров.ПоПриказу29н;
		Иначе
			ВидМО = Справочники.ВидыМедосмотров.ПоПриказу302н;
		КонецЕсли;
		ДокОбъект.ВидМО = ВидМО;
		ДокОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьСозданиеПМО", Истина);
		ДокОбъект.Записать();
		
		СчетчикТранзакции = СчетчикТранзакции + 1;
		Если СчетчикТранзакции > 50 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			СчетчикТранзакции = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_УдалитьВредФакторы302нУКлиентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьВредныеФакторыУсловияРаботКлиентов.Клиент КАК Клиент,
		|	УдалитьВредныеФакторыУсловияРаботКлиентов.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
		|ИЗ
		|	РегистрСведений.УдалитьВредныеФакторыУсловияРаботКлиентов КАК УдалитьВредныеФакторыУсловияРаботКлиентов
		|ГДЕ
		|	УдалитьВредныеФакторыУсловияРаботКлиентов.ПереченьВредныхФакторовИРабот.Приказ = ЗНАЧЕНИЕ(Справочник.ПриказыМедосмотров.Приказ302н)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НЗ = РегистрыСведений.УдалитьВредныеФакторыУсловияРаботКлиентов.СоздатьНаборЗаписей();
		НЗ.Отбор.Клиент.Установить(ВыборкаДетальныеЗаписи.Клиент);
		НЗ.Отбор.ПереченьВредныхФакторовИРабот.Установить(ВыборкаДетальныеЗаписи.ПереченьВредныхФакторовИРабот);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.Записать(Истина);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_ОбновитьПереченьВредныхФаторов()
	
	ДвоичныеДанныеВыгрузки = Справочники.ПереченьВредныхФакторовИРабот.ПолучитьМакет("Обновление20_49_1");
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
	
	// Временное решение 
	
	СсылкаНаИдентификатор = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ЗначениеПустойСсылки", Справочники.Сотрудники.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(СсылкаНаИдентификатор) Тогда
		
		ДокОбъект = Справочники.ПриказыМедосмотров.Приказ342н.ПолучитьОбъект();
		
		Для Каждого Эл Из ДокОбъект.ДополнительныеПоля Цикл
			Если ЗначениеЗаполнено(Эл.ТипЗначения) И ТипЗнч(Эл.ТипЗначения) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
				Эл.ТипЗначения = СсылкаНаИдентификатор; 
			КонецЕсли;
		КонецЦикла;
		
		ДокОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьБлокМедосмотров_2_0_49_1_ОбновитьСправки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.МедосмотрСправка = ИСТИНА
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	НоменклатураСправок = Запрос.Выполнить().Выгрузить();
	
	мНоменклатурСправок = НоменклатураСправок.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияНоменклатурыМедосмотров.Номенклатура КАК Номенклатура,
		|	ДействияНоменклатурыМедосмотров.Действие КАК Действие,
		|	ДействияНоменклатурыМедосмотров.Пол КАК Пол,
		|	ДействияНоменклатурыМедосмотров.НеТребуетОтметкиВыполнения КАК НеТребуетОтметкиВыполнения,
		|	ДействияНоменклатурыМедосмотров.НеУчитываетсяПриРасчетеЦены КАК НеУчитываетсяПриРасчетеЦены
		|ИЗ
		|	РегистрСведений.удалитьДействияНоменклатурыМедосмотров КАК ДействияНоменклатурыМедосмотров
		|ГДЕ
		|	ДействияНоменклатурыМедосмотров.Номенклатура В(&Номенклатура)
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Действие),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пол),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеТребуетОтметкиВыполнения),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеУчитываетсяПриРасчетеЦены)
		|ПО
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", мНоменклатурСправок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГруппировки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОграничениеМужскойПол = Неопределено; 
	ОграничениеЖенскийПол = Неопределено;
	
	НовыйПриказСправки = Справочники.ПриказыМедосмотров.НайтиПоКоду("Справки");
	
	Если Не ЗначениеЗаполнено(НовыйПриказСправки) Тогда
		
		НовыйПриказСправки = Справочники.ПриказыМедосмотров.СоздатьЭлемент();
		НовыйПриказСправки.Родитель = МедосмотрыСервер.ПолучитьГруппуПриказовСправок();
		НовыйПриказСправки.Наименование = "Справки";
		НовыйПриказСправки.Код = "Справки";
		НовыйПриказСправки.Записать();
		
	КонецЕсли;
	
	СоответвствиеИмяСправкиНомеровПП = ОбновитьБлокМедосмотров_2_0_49_1_ПолучитьСоотвествиеИмениСправиИНомераПП();
	
	ОбработаннаяНоменклатура = Новый Массив;
	
	Пока ВыборкаГруппировки.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаГруппировки.Выбрать();
		НовыйВредныйФактор = Справочники.ПереченьВредныхФакторовИРабот.СоздатьЭлемент();
		НовыйВредныйФактор.Приказ = НовыйПриказСправки.Ссылка;
		НовыйВредныйФактор.Наименование = ВыборкаГруппировки.Номенклатура.Наименование;
		НовыйВредныйФактор.ШаблонОсмотраСправки = ВыборкаГруппировки.Номенклатура.ИндивидуальныйШаблонОсмотра;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Действие.Вид = Перечисления.ВидыДействийМедицинскогоОсмотра.Врач Тогда
				НоваяСтрока = НовыйВредныйФактор.Врачи.Добавить();
				НоваяСтрока.Врач = ВыборкаДетальныеЗаписи.Действие;
			Иначе
				НоваяСтрока = НовыйВредныйФактор.ЛабораторныеИФункциональныеИсследования.Добавить();
				НоваяСтрока.Исследование = ВыборкаДетальныеЗаписи.Действие; 
			КонецЕсли;
			
			НоваяСтрока.НеТребуетОтметкиВыполнения = ВыборкаДетальныеЗаписи.НеТребуетОтметкиВыполнения;
			НоваяСтрока.НеУчитыватьПриРасчетеЦены = ВыборкаДетальныеЗаписи.НеУчитываетсяПриРасчетеЦены;
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Пол) Тогда
				НоваяСтрока.Ограничение = ОбновитьБлокМедосмотров_2_0_49_1_НайтиИлиСоздатьОграничениеПоПолу(ВыборкаДетальныеЗаписи.Пол, ОграничениеМужскойПол, ОграничениеЖенскийПол);
			КонецЕсли;
		КонецЦикла;
		
		НомерПП = СоответвствиеИмяСправкиНомеровПП.Получить(ВыборкаГруппировки.Номенклатура.Наименование);
		
		Если НомерПП <> Неопределено Тогда
			НовыйВредныйФактор.НомерПП = НомерПП;
		КонецЕсли;
		
		ОбновитьБлокМедосмотров_2_0_49_1_ОбработатьСправку989н(НовыйВредныйФактор);
		НовыйВредныйФактор.Записать();
		НоменклатураОбъект = ВыборкаГруппировки.Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.ВредныйФакторСправки = НовыйВредныйФактор.Ссылка;
		Если НоменклатураОбъект.УдалитьЦенаМедосмотраИзДействийМедосмотра Тогда
			НоменклатураОбъект.СпособФомированияЦеныМедосмотра = Перечисления.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямБезРедактирования;
		Иначе
			НоменклатураОбъект.СпособФомированияЦеныМедосмотра = Перечисления.СпособФормированияЦеныМедосмотра.ЦенаНоменклатурыПоПрайсу;
		КонецЕсли;
		НоменклатураОбъект.Записать();
		ОбработаннаяНоменклатура.Добавить(НоменклатураОбъект.Ссылка);
	КонецЦикла;
	
	Для Каждого Эл Из мНоменклатурСправок Цикл
		Если ОбработаннаяНоменклатура.Найти(Эл) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйВредныйФактор = Справочники.ПереченьВредныхФакторовИРабот.СоздатьЭлемент();
		НовыйВредныйФактор.Приказ = НовыйПриказСправки.Ссылка;
		НовыйВредныйФактор.Наименование = Эл.Наименование;
		НовыйВредныйФактор.ШаблонОсмотраСправки = Эл.ИндивидуальныйШаблонОсмотра;
		
		НомерПП = СоответвствиеИмяСправкиНомеровПП.Получить(Эл.Наименование);
		
		Если НомерПП <> Неопределено Тогда
			НовыйВредныйФактор.НомерПП = НомерПП;
		КонецЕсли;
		
		ОбновитьБлокМедосмотров_2_0_49_1_ОбработатьСправку989н(НовыйВредныйФактор);
		НовыйВредныйФактор.Записать();
		
		НоменклатураОбъект = Эл.ПолучитьОбъект();
		НоменклатураОбъект.ВредныйФакторСправки = НовыйВредныйФактор.Ссылка;
		Если НоменклатураОбъект.УдалитьЦенаМедосмотраИзДействийМедосмотра Тогда
			НоменклатураОбъект.СпособФомированияЦеныМедосмотра = Перечисления.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямБезРедактирования;
		Иначе
			НоменклатураОбъект.СпособФомированияЦеныМедосмотра = Перечисления.СпособФормированияЦеныМедосмотра.ЦенаНоменклатурыПоПрайсу;
		КонецЕсли;
		НоменклатураОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьБлокМедосмотров_2_0_49_1_ПолучитьСоотвествиеИмениСправиИНомераПП()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Медицинское заключение на оружие (форма N 002-О/у)", "002-О/у");
	Соответствие.Вставить("Медкомиссия водителей (форма №003-В/у) категории ""М"", ""А"", ""А1"", ""В"", В1"", ""ВЕ""", "AB/003-В/у");
	Соответствие.Вставить("Медкомиссия водителей (форма №003-В/у) категории ""С"", ""D"", ""СЕ"", ""DE"", ""Tm"", ""Тb""", "CDE/003-В/у");
	Соответствие.Вставить("Справка 001-ГС/у Медосмотр при поступлении на госслужбу", "001-ГС/у");
	Соответствие.Вставить("Справка 072/у-04 Санаторно-курортная карта", "072/у-04");
	Соответствие.Вставить("Справка 082/у Медкомиссия для выезжающих за границу", "082/у");
	Соответствие.Вставить("Справка 086/у для поступающих в учебные заведения", "086/у");
	Соответствие.Вставить("Справка в бассейн (Взрослые)", "БассейнВзрослые");
	Соответствие.Вставить("Справка в бассейн (Дети)", "БассейнДети");
	Соответствие.Вставить("Справка в бассейн по форме 083_4_89 (Взрослые)", "083/4/89");
	Соответствие.Вставить("Справка 989н на работу с использованием сведений составляющих государственную тайну", "989н");
	Возврат Соответствие;
	
КонецФункции

Процедура ОбновитьБлокМедосмотров_2_0_49_1_ОбработатьСправку989н(НовыйВредныйФактор)
	
	Если НовыйВредныйФактор.Наименование = "Справка 989н на работу с использованием сведений составляющих государственную тайну" Тогда
		
		ПриказСправки989н = Справочники.ПриказыМедосмотров.НайтиПоКоду("Спр 989н");
		Если ЗначениеЗаполнено(ПриказСправки989н) Тогда
			НовыйВредныйФактор.Приказ = ПриказСправки989н;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьБлокМедосмотров_2_0_49_1_НайтиИлиСоздатьОграничениеПоПолу(Пол, ОграничениеМужскойПол, ОграничениеЖенскийПол)
	
	Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		Если ЗначениеЗаполнено(ОграничениеМужскойПол) Тогда
			Возврат ОграничениеМужскойПол;
		КонецЕсли;
	Иначе //Если Пол = Перечисления.ПолФизическихЛиц.Женский Тогда.
		Если ЗначениеЗаполнено(ОграничениеЖенскийПол) Тогда
			Возврат ОграничениеЖенскийПол;
		КонецЕсли;
	КонецЕсли;
	
	НовоеОграничение = Справочники.ОграниченияДействийМедосмотра.СоздатьЭлемент();
	НовоеОграничение.Пол = Пол;
	
	Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		НовоеОграничение.Наименование = "Ограничение мужчины для справок";
		НовоеОграничение.Записать();
		ОграничениеМужскойПол = НовоеОграничение.Ссылка;
	Иначе
		НовоеОграничение.Наименование = "Ограничение женщины для справок";
		НовоеОграничение.Записать();
		ОграничениеЖенскийПол = НовоеОграничение.Ссылка;
	КонецЕсли;
	
	Возврат НовоеОграничение.Ссылка;
	
КонецФункции

Функция ОбновитьБлокМедосмотров_2_0_49_1_ЗаполнитьПриказыМО()
	
	ДвоичныеДанныеВыгрузки = Справочники.ПриказыМедосмотров.ПолучитьМакет("ПервоначальноеНаполнение");
	
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Выполнено заполенние приказов медицинских осмотров'"));
	
КонецФункции

#КонецОбласти
Процедура ОчиститьВерсииКлассификаторов20491()
	
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1059");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1060");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1064");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1033");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.27");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.706");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.770");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1358");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1473");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1008");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.262");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1006");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1081");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1038");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1079");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1078");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.43");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.122");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1002");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.320");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.48");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1034");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.197");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.766");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.285");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.795");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.541");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1069");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1470");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1046");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1049");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1009");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1077");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.725");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.166");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.148");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1042");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.726");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.322");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1497");
	
КонецПроцедуры

Процедура ОчиститьВерсииКлассификаторов20496()
	
	УстановитьПривилегированныйРежим(Истина);
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1522");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1367");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1471");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.11.1461");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.183");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.368");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.611");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.114");
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.541");
	
КонецПроцедуры

// Переход с регистра ВредныеФакторыУсловияРаботКлиентов на ПМО в строках СПМО. 3 Процедуры.
Процедура ЗаполнитьВредныеФакторыВПМОНеЗавершенныхСПМО()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНаПрохождениеМедосмотра.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СписокНаПрохождениеМедосмотра КАК СписокНаПрохождениеМедосмотра
		|ГДЕ
		|	СписокНаПрохождениеМедосмотра.ДатаЗаключительногоАкта = ДАТАВРЕМЯ(1, 1, 1)
		|	И СписокНаПрохождениеМедосмотра.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СПМОДляОбновленияВредныхФакторов = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектСПМО = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектСПМО.ДополнительныеСвойства.Вставить("НеВыполнятьЗаполнениеВФ", Истина);
		ОбъектСПМО.Записать();
		СПМОДляОбновленияВредныхФакторов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПМО.Ссылка КАК Ссылка,
		|	ПМО.Клиент КАК Клиент,
		|	ПМО.ВидМО КАК ВидМО
		|ИЗ
		|	Документ.ПрохождениеМедосмотра КАК ПМО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ФакторыИУсловияРаботы КАК ПМО_ФакторыИУсловияРаботы
		|		ПО ПМО.Ссылка = ПМО_ФакторыИУсловияРаботы.Ссылка
		|			И (ПМО.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	ПМО_ФакторыИУсловияРаботы.Фактор ЕСТЬ NULL
		|	И ПМО.Дата > &ДатаМинимальная
		|	И ПМО.СписокНаПрохождениеМедосмотра В(&СписокПМО)";
	
	Запрос.УстановитьПараметр("СписокПМО", СПМОДляОбновленияВредныхФакторов);
	Запрос.УстановитьПараметр("ДатаМинимальная", ДобавитьМесяц(ТекущаяДатаСеанса(),-12));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоллекцияПриказовВидаМО = Новый Соответствие;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьВредностиВсехКлиентовВоВременнуюТаблицу(МенеджерВременныхТаблиц);
	
	Пока Выборка.Следующий() Цикл 
		НачатьТранзакцию();
		ВидМО = Выборка.ВидМО;		
		ПриказыВидаМО = КоллекцияПриказовВидаМО.Получить(ВидМО);
		
		Если ПриказыВидаМО = Неопределено Тогда
			ПриказыВидаМО = МедосмотрыСервер.ПолучитьМассивПриказовПоВидуМО(ВидМО);
			КоллекцияПриказовВидаМО.Вставить(ВидМО, ПриказыВидаМО);
		КонецЕсли; 
		
		Вредности = ПолучитьВредностиКлиента(Выборка.Клиент, ПриказыВидаМО, МенеджерВременныхТаблиц);
		
		Если Вредности.Количество() > 0 Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого Вредность Из Вредности Цикл
				НоваяСтрокаФактор = Объект.ФакторыИУсловияРаботы.Добавить();
				НоваяСтрокаФактор.Фактор = Вредность;
			КонецЦикла;
			Объект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив вредных факторов и работ клиента из регистра сведений.
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - Клиент.
//  Режим29н - Булево					 - установлен ли режим 29н
// 
// Возвращаемое значение:
//  Массив - массив элементов типа СправочникСсылка.ПереченьВредныхФакторовИРабот.
//
Функция ПолучитьВредностиКлиента(Клиент, ПриказыВидаМО, МенеджерВременныхТаблиц)
		
	// Считывает вредности из регистра ВредныеФакторыУсловияРаботКлиентов.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВредныеФакторыКлиентов.Вредность КАК Вредность
		|ИЗ
		|	ВредныеФакторыКлиентов КАК ВредныеФакторыКлиентов
		|ГДЕ
		|	ВредныеФакторыКлиентов.Клиент = &Клиент
		|	И (ВредныеФакторыКлиентов.Приказ В (&ПриказыПМО)
		|			ИЛИ ВредныеФакторыКлиентов.Вредность В (&ПриказыПМО))";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("ПриказыПМО", ПриказыВидаМО);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВредностиКлиента = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ВредностиКлиента.Добавить(Выборка.Вредность);	
	КонецЦикла;
	
	Возврат ВредностиКлиента;
	
КонецФункции

Функция ПолучитьВредностиВсехКлиентовВоВременнуюТаблицу(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВредныеФакторыУсловияРаботКлиентов.ПереченьВредныхФакторовИРабот КАК Вредность,
		|	ВредныеФакторыУсловияРаботКлиентов.Клиент КАК Клиент,
		|	ВредныеФакторыУсловияРаботКлиентов.ПереченьВредныхФакторовИРабот.Приказ КАК Приказ
		|ПОМЕСТИТЬ ВредныеФакторыКлиентов
		|ИЗ
		|	РегистрСведений.УдалитьВредныеФакторыУсловияРаботКлиентов КАК ВредныеФакторыУсловияРаботКлиентов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецФункции

Процедура ЗагрузитьПараметрыHTMLПрофпатолога()
	
	ДвоичныеДанныеВыгрузки = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьМакет("ПредопределеныеЭлементыПрофпатолог");
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьИспользуемуюВерсиюСервераЛицензированияПриОбновлении()
	
	Если ПустаяСтрока(Константы.ИспользуемаяВерсияСистемыЛицензирования.Получить()) Тогда
		// Дата добавления первого клиента в базу
		ДатаСЛ_20 = Дата(2023,8,15);
		НоваяВерсия = "1.6";
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Клиенты.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	НЕ Клиенты.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания"
		;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий()
			Или Выборка.ДатаСоздания > ДатаСЛ_20
		Тогда
			НоваяВерсия = "2.0";
		КонецЕсли;
		
		Константы.ИспользуемаяВерсияСистемыЛицензирования.Установить(НоваяВерсия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРекизитОрганизацияПодключаемоеОборудование()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
		|	ПодключаемоеОборудование.Организация КАК Организация
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПодключаемоеОборудование.Организация) = ТИП(Справочник.Филиалы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектЗаписываемый = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ОбъектЗаписываемый.Организация) Тогда
			ОбъектЗаписываемый.Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектЗаписываемый.Организация, "Организация");
		Иначе
			ОбъектЗаписываемый.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		ОбъектЗаписываемый.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДатуНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041()
	
	Если Не ЗначениеЗаполнено(Константы.ДатаНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041.Получить()) Тогда
		Константы.ДатаНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041.Установить(КонецДня(ТекущаяДата())); // Применяем схему только с завтрашего дня после обновления.
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипФайловРедактируемыхЭлементовШаблонаПриема()
	
	ПродолжатьПерезаписьСтрок = Истина;
	КоличествоОбработанныхСтрокВТранзакции = 250;
	
	Пока ПродолжатьПерезаписьСтрок Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 10000
			|	ФайлыРедактируемыхЭлементовШаблонаПриема.Документ КАК Документ,
			|	ФайлыРедактируемыхЭлементовШаблонаПриема.ИндексШаблона КАК ИндексШаблона,
			|	ФайлыРедактируемыхЭлементовШаблонаПриема.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
			|	ФайлыРедактируемыхЭлементовШаблонаПриема.Тип КАК Тип
			|ИЗ
			|	РегистрСведений.ФайлыРедактируемыхЭлементовШаблонаПриема КАК ФайлыРедактируемыхЭлементовШаблонаПриема
			|ГДЕ
			|	ФайлыРедактируемыхЭлементовШаблонаПриема.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыФайловРедактируемыхЭлементовШаблона.ПустаяССылка)";
		
		Результат = Запрос.Выполнить();
		ПродолжатьПерезаписьСтрок = Не Результат.Пустой();
		Выборка = Результат.Выбрать();
		
		КоличествоОбработанныхСтрок = 0;
		НачатьТранзакцию();
		Пока Выборка.Следующий() Цикл
			
			МЗ = РегистрыСведений.ФайлыРедактируемыхЭлементовШаблонаПриема.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			МЗ.Прочитать();
			МЗ.Тип = Перечисления.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок;
			МЗ.Расширение = "png";
			МЗ.Записать();
			
			КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
			Если КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрокВТранзакции Тогда
				КоличествоОбработанныхСтрок = 0;
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидДокументаДляПриказа29н()
	
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ПолучитьОбщийМакет("МедицинскиеЗаключенияИзКлассификатораМЗ"));
	
	ОбъектПриказ29н = Справочники.ПриказыМедосмотров.Приказ29н.ПолучитьОбъект();
	ОбъектПриказ29н.ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.АктуальныйВидРЭМДЗаключенияМО();
	ОбъектПриказ29н.Записать();
	
КонецПроцедуры

Процедура ОчиститьВерсиюКлассификатораЛьготныхКатегорийНаселения()
	
	УстановитьПривилегированныйРежим(Истина);
	ОчиститьВерсиюКлассификатора("1.2.643.5.1.13.13.99.2.43");
	
КонецПроцедуры

Процедура ЗаполнитьВидИсследованийУДействийМедосмотра()
	
	УстановитьПривилегированныйРежим(Истина);
	ДвоичныеДанныеВыгрузки = Справочники.ДействияМедосмотра.ПолучитьМакет("ОбновлениеВидИсследования");
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторДолжностейФРМР()
	
	УстановитьПривилегированныйРежим(Истина);
	ДвоичныеДанныеВыгрузки = Справочники.КлассификаторыМинЗдрава.ПолучитьМакет("ФРМРДолжностиМедицинскогоПерсонала");
	ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки, Истина);
	
КонецПроцедуры

Процедура УдалитьВидДокументаДляПриказа29н()
	
	ОбъектПриказ29н = Справочники.ПриказыМедосмотров.Приказ29н.ПолучитьОбъект();
	ОбъектПриказ29н.ВидДокумента = Неопределено;
	ОбъектПриказ29н.Записать();
	
КонецПроцедуры

Процедура УстановитьВШаблонахЗаполнениеДиагнозовИзТабличнойЧасти()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныHTML.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныHTML КАК ШаблоныHTML
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрируемыеЭлектронныеМедДокументы КАК РегистрируемыеЭлектронныеМедДокументы
		|		ПО (РегистрируемыеЭлектронныеМедДокументы.Ссылка = ШаблоныHTML.ВидДокумента)
		|			И (РегистрируемыеЭлектронныеМедДокументы.УИДЕГИСЗ В (&ВидыДокументов))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВерсииШаблоновHTML.Ссылка
		|ИЗ
		|	Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрируемыеЭлектронныеМедДокументы КАК РегистрируемыеЭлектронныеМедДокументы
		|		ПО (РегистрируемыеЭлектронныеМедДокументы.Ссылка = ВерсииШаблоновHTML.ВидДокумента)
		|			И (РегистрируемыеЭлектронныеМедДокументы.УИДЕГИСЗ В (&ВидыДокументов))";
	
	Запрос.УстановитьПараметр("ВидыДокументов", ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(15, 16, 40, 43, 119));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Шаблон = Выборка.Ссылка.ПолучитьОбъект();
			Шаблон.ЗаполнятьДиагнозыИзТабличнойЧасти = Истина;
			Шаблон.Записать();
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРежимЗагрузкиКлассификаторМО_2049_26()
	
	УстановитьРежимЗагрузкиКлассификатора("1.2.643.5.1.13.13.11.1461", Перечисления.РежимыАвтоОбновленияСправочниковЕГИСЗ.Выключено);
	УстановитьРежимЗагрузкиКлассификатора("1.2.643.5.1.13.13.99.2.114", Перечисления.РежимыАвтоОбновленияСправочниковЕГИСЗ.Выключено);
	
КонецПроцедуры

Процедура УстановитьРежимЗагрузкиКлассификатора(Классификатор, РежимОбновления)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НЗ = РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.СоздатьНаборЗаписей();
	НЗ.Отбор.Классификатор.Установить(Классификатор);
	НЗ.Прочитать();
	
	Для Каждого СтрокаНЗ Из НЗ Цикл
		СтрокаНЗ.РежимОбновления = РежимОбновления;
	КонецЦикла;
	
	НЗ.Записать();
	
КонецПроцедуры

Процедура УстановитьРежимЗагрузкиКлассификаторДолжностейФРМР_2049_28()
	
	УстановитьРежимЗагрузкиКлассификатора("1.2.643.5.1.13.13.99.2.181", Перечисления.РежимыАвтоОбновленияСправочниковЕГИСЗ.Полное);
	
КонецПроцедуры

#КонецОбласти
