#Область ПрограммныйИнтерфейс

// Создает новый документ Событие.
//
// Параметры:
//  ВидСобытия		 - ПеречислениеСсылка.ВидыСобытий	 - вид события.
//  Дата			 - Дата								 - дата документа.
//  Филиал			 - СправочникСсылка.Филиалы			 - филиал.
//  СтруктураСобытия - Структура						 - значения реквизитов.
// 
// Возвращаемое значение:
//   ДокументСсылка.Событие.
//
Функция ДобавитьСобытие(Знач ВидСобытия, Знач Дата = Неопределено, Знач Филиал = Неопределено, Знач СтруктураСобытия = Неопределено) Экспорт

	Если Дата = Неопределено Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Филиал = Неопределено Тогда 
		Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	КонецЕсли;
	
 	НовоеСобытие = Документы.Событие.СоздатьДокумент();
	НовоеСобытие.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовоеСобытие.ВидСобытия = ВидСобытия;
	НовоеСобытие.Дата = Дата;
	НовоеСобытие.Филиал = Филиал;
	
	Если СтруктураСобытия <> Неопределено Тогда 
		ЗаполнитьЗначенияСвойств(НовоеСобытие, СтруктураСобытия);
	КонецЕсли;
	
	НовоеСобытие.Записать();
	
	Возврат НовоеСобытие.Ссылка;

КонецФункции

// Заполняет реквизиты документа Событие заданными значениями.
//
// Параметры:
//  СобытиеСсылка	 - ДокументСсылка.Событие	 - документ события.
//  СтруктураСобытия - Структура						 - значения реквизитов.
// 
// Возвращаемое значение:
//   ДокументСсылка.Событие.
//
Функция ДополнитьСобытие(Знач СобытиеСсылка, Знач СтруктураСобытия) Экспорт
	
	СобытиеОбъект = СобытиеСсылка.ПолучитьОбъект();
	
	ИсключаемыеСвойства = "";
	Если СтруктураСобытия.Свойство("Клиент") И ЗначениеЗаполнено(СобытиеОбъект.Клиент) Тогда
		ИсключаемыеСвойства = "Клиент";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СобытиеОбъект, СтруктураСобытия, , ИсключаемыеСвойства);
	СобытиеОбъект.Записать();
	
	Возврат СобытиеОбъект.Ссылка;
	
КонецФункции

// Документы работ по рекламации
//
// Параметры:
//  Рекламация	 - ДокументСсылка.Рекламация	 - рекламация.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьДокументыРаботПоРекламации(Рекламация) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботыПоРекламации.Ссылка
	|ИЗ
	|	Документ.РаботыПоРекламации КАК РаботыПоРекламации
	|ГДЕ
	|	НЕ РаботыПоРекламации.ПометкаУдаления
	|	И РаботыПоРекламации.Рекламация = &Рекламация";
	Запрос.УстановитьПараметр("Рекламация", Рекламация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Позволяет получить актуальные рекламации по клиенту
//
// Параметры:
//  Клиент			 - СправочникСсылка.Клиенты	 - клиент.
//  ВозвращатьПервое - Булево - вернуть ли первую найденную ссылку.
// 
// Возвращаемое значение:
//   Массив, ДокументСсылка.Рекламация, Неопределено - рекламация или массив рекламаций.
//
Функция ПолучитьАктуальныеРекламацииПоКлиенту(Клиент, ВозвращатьПервое = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыРекламации.Ссылка
	|ИЗ
	|	Документ.Рекламация КАК ДокументыРекламации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаботыПоРекламации КАК РаботыПоРекламации
	|		ПО ДокументыРекламации.Ссылка = РаботыПоРекламации.Рекламация
	|			И (НЕ РаботыПоРекламации.ПометкаУдаления)
	|ГДЕ
	|	НЕ ДокументыРекламации.ПометкаУдаления
	|	И НЕ ДокументыРекламации.Отклонена
	|	И ДокументыРекламации.Клиент = &Клиент
	|	И РаботыПоРекламации.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыРекламации.Проведен УБЫВ";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	ТаблицаРекламаций = Запрос.Выполнить().Выгрузить();
	
	Если ВозвращатьПервое Тогда 
		Если ТаблицаРекламаций.Количество() > 0 Тогда 
			Возврат ТаблицаРекламаций[0].Ссылка;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

// Данные для создания документа работ по рекламации
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Рекламация	 - рекламация.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьДанныеДляРаботПоРекламации(ДокументСсылка) Экспорт
	
	Результат = Новый Структура("Основание, Клиент, Исполнитель");
	
	Результат.Основание = ДокументСсылка;
	Результат.Клиент = ДокументСсылка.Клиент;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Прием") Тогда 
		Результат.Исполнитель = ДокументСсылка.Врач;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Заявка") Тогда 
		Результат.Исполнитель = ДокументСсылка.Сотрудник;
	КонецЕсли;
	
	Рекламация = ПолучитьАктуальныеРекламацииПоКлиенту(ДокументСсылка.Клиент, Истина);
	Если Рекламация <> Неопределено Тогда 
		Результат.Вставить("Рекламация", Рекламация);
	КонецЕсли;
		
	Если ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Работы") <> Неопределено
		И ДокументСсылка.Работы.Количество() > 0
		И ЗначениеЗаполнено(ДокументСсылка.Работы[0].Номенклатура)
	Тогда
		Работы = Новый Массив;
		Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала();
		Для Каждого СтрокаТЧ Из ДокументСсылка.Работы Цикл
			ДанныеРаботы = Новый Структура;
			ДанныеРаботы.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			ДанныеРаботы.Вставить("Количество", 1);
			СтруктураЦены = Ценообразование.ПолучитьЦену(Прейскурант, СтрокаТЧ.Номенклатура);
			ДанныеРаботы.Вставить("Цена", СтруктураЦены.Цена);
			ДанныеРаботы.Вставить("Сумма", ДанныеРаботы.Цена * ДанныеРаботы.Количество);
			ДанныеРаботы.Вставить("СуммаБезСкидок", ДанныеРаботы.Сумма);
			Работы.Добавить(ДанныеРаботы);
		КонецЦикла;
		Результат.Вставить("Работы", Работы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Значения заполнения для листа ожидания по объекту
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.Клиенты, ДокументСсылка.Событие, ДокументСсылка.Заявка, ДокументСсылка.ОказаниеУслуг - основание.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьЗначенияЗаполненияДляЛистаОжиданияПоОбъекту(ОбъектСсылка) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Основание", ОбъектСсылка);
	ЗначенияЗаполнения.Вставить("ПричинаЗаписи", Справочники.ПричиныЗаписиНаПрием.ПрофилактическоеЛечение);
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Клиенты") Тогда 
		ЗначенияЗаполнения.Вставить("Клиент", ОбъектСсылка);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Событие") Тогда
		ЗначенияЗаполнения.Вставить("Клиент", ОбъектСсылка.Клиент);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Заявка") Тогда
		ЗначенияЗаполнения.Вставить("Клиент", ОбъектСсылка.Клиент);
		ЗначенияЗаполнения.Вставить("Сотрудник", ОбъектСсылка.Сотрудник);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		ЗначенияЗаполнения.Вставить("Клиент", ОбъектСсылка.Клиент);
		ЗначенияЗаполнения.Вставить("Сотрудник", ОбъектСсылка.Сотрудник);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Прием") Тогда
		ЗначенияЗаполнения.Вставить("Клиент", ОбъектСсылка.Клиент);
		ЗначенияЗаполнения.Вставить("Сотрудник", ОбъектСсылка.Врач);
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

// Актуальные документы очереди клиента
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - клиент.
//  ОтДаты	 - Дата						 - дата среза.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьАктуальныеДокументыОчередиКлиента(Клиент, ОтДаты = Неопределено) Экспорт
	
	Если ОтДаты = Неопределено Тогда 
		ОтДаты = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистОжидания.Ссылка
	|ИЗ
	|	Документ.ЛистОжидания КАК ЛистОжидания
	|ГДЕ
	|	НЕ ЛистОжидания.ПометкаУдаления
	|	И НЕ ЛистОжидания.Выполнен
	|	И (&ОтДаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ЛистОжидания.ДатаОкончанияПлан >= &ОтДаты)
	|	И ЛистОжидания.Клиент = &Клиент";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("ОтДаты", ОтДаты);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Функция - Получить документы очереди по заявке
//
// Параметры:
//  Заявка				 - ДокументСсылка.Заявка - Заявка
//  ТолькоВыполненные	 - Булево				 - включать ли невыполненные.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьДокументыОчередиПоЗаявке(Заявка, ТолькоВыполненные = Истина) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистОжидания.Ссылка
	|ИЗ
	|	Документ.ЛистОжидания КАК ЛистОжидания
	|ГДЕ
	|	НЕ ЛистОжидания.ПометкаУдаления
	|	И ЛистОжидания.ДокументВыполнения = &Заявка
	|	И (НЕ &ТолькоВыполненные
	|			ИЛИ ЛистОжидания.Выполнен)";
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ТолькоВыполненные", ТолькоВыполненные);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Заполнить форматированный документ переписки по документу в форме.
//
// Параметры:
//  ФорматированныйДокумент	 - ФорматированныйДокумент	 - текст переписки на форме.
//  ЛистОжидания			 - ДокументСсылка.ЛистОжидания	 - контекст переписки.
//  ТекущийПользователь		 - СправочникСсылка.Пользователи - текущий пользователь.
//
Процедура ЗаполнитьПерепискуПоДокументу(ФорматированныйДокумент, ЛистОжидания, ТекущийПользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийПользователь = Неопределено Тогда 
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ФорматированныйДокумент.Удалить();
	
	СписокСообщений = РегистрыСведений.СообщенияПоДокументам.СоздатьНаборЗаписей();
	СписокСообщений.Отбор.Документ.Установить(ЛистОжидания);
	СписокСообщений.Прочитать();
	
	Для Каждого СтрокаСообщение Из СписокСообщений Цикл
		CRMКлиентСервер.ДобавитьСообщениеВДокумент(ФорматированныйДокумент, СтрокаСообщение.Сообщение, СтрокаСообщение.Период, СтрокаСообщение.Пользователь, ТекущийПользователь);
	КонецЦикла;
	
КонецПроцедуры

// Добавить сообщение листу ожидания и вернуть структуру с описанием для оповещения форм документов.
//
// Параметры:
//  ЛистОжидания			 - ДокументСсылка.ЛистОжидания	 - контекст переписки.
//  Сообщение	 - Строка 	 - сообщение.
//  Пользователь - СправочникСсылка.Пользователи	 - пользователь.
//  Дата		 - Дата	 - дата сообщения.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ДобавитьСообщениеПоЛистуОжидания(ЛистОжидания, Сообщение, Пользователь = Неопределено, Дата = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	Если Дата = Неопределено Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда 
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	СтруктураДляОповещения = Новый Структура("Период, Документ, Пользователь, Сообщение", Дата, ЛистОжидания, Пользователь, Сообщение);
	
	СообщениеМЗ = РегистрыСведений.СообщенияПоДокументам.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(СообщениеМЗ, СтруктураДляОповещения);
	СообщениеМЗ.Записать();
	
	Возврат СтруктураДляОповещения;
		
КонецФункции

// Отметить выполнение листа ожидания при записи заявки.
//
// Параметры:
//  ЛистОжидания	 - ДокументСсылка.ЛистОжидания	 - контекст переписки.
//  Заявка			 - ДокументСсылка.Заявка		 - Заявка
//  ПараметрыЗаписи	 - Структура					 - параметры записи заявки.
//
Процедура ОтметитьВыполнениеЛистаОжидания(ЛистОжидания, Заявка = Неопределено, ПараметрыЗаписи = Неопределено) Экспорт
	
	ЛистОбъект = ЛистОжидания.ПолучитьОбъект();
	Если Не ЛистОбъект.Выполнен Тогда
		ЛистОбъект.Выполнен = Истина;
		Если Заявка <> Неопределено Тогда 
			ЛистОбъект.ДокументВыполнения = Заявка;
		КонецЕсли;
		ЛистОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует исход "Записан" для события, если текущий исходн не указан.
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - документ событие.
//
Процедура УстановитьИсходЗаписанСобытию(Событие) Экспорт
	
	СобытиеОбъект = Событие.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(СобытиеОбъект.ИсходЗвонка) Тогда
		СобытиеОбъект.ИсходЗвонка = Справочники.ИсходыЗвонка.ЗаписанНаПрием;
		СобытиеОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Ищет пересекающиеся листы ожидания с текщим для формирования предупреждения пользователю.
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - клиент.
//  Сотрудник		 - СправочникСсылка.Сотрудники	 - 
//  ПричинаЗаписи	 - СправочникСсылка.ПричиныЗаписиНаПрием	 - повод записи.
//  ДатаНачала		 - Дата	 - интервал поиска.
//  ДатаОкончания	 - Дата	 - интервал поиска.
//  ЛистОжидания	 - ДокументСсылка.ЛистОжидания	 - исходный лист ожидания.
// 
// Возвращаемое значение:
//   СписокЗначений.
//
Функция ПолучитьПересекающиесяЛистыОжидания(Клиент, Сотрудник, ПричинаЗаписи, ДатаНачала, ДатаОкончания, ЛистОжидания = Неопределено) Экспорт 
	
	Если ЛистОжидания = Неопределено Тогда 
		ЛистОжидания = Документы.ЛистОжидания.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистОжидания.Ссылка,
	|	ЛистОжидания.ДатаНачалаПлан,
	|	ЛистОжидания.ДатаОкончанияПлан
	|ИЗ
	|	Документ.ЛистОжидания КАК ЛистОжидания
	|ГДЕ
	|	НЕ ЛистОжидания.Выполнен
	|	И НЕ ЛистОжидания.ПометкаУдаления
	|	И ЛистОжидания.Ссылка <> &ЛистОжидания
	|	И ЛистОжидания.Клиент = &Клиент
	|	И ЛистОжидания.Сотрудник = &Сотрудник
	|	И ЛистОжидания.ПричинаЗаписи = &ПричинаЗаписи
	|	И (ЛистОжидания.ДатаНачалаПлан МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ ЛистОжидания.ДатаОкончанияПлан МЕЖДУ &ДатаНачала И &ДатаОкончания)";
	Запрос.УстановитьПараметр("ЛистОжидания", ЛистОжидания);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ПричинаЗаписи", ПричинаЗаписи);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	СписокЛистов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Период = Новый СтандартныйПериод;
		Период.ДатаНачала = Выборка.ДатаНачалаПлан;
		Период.ДатаОкончания = Выборка.ДатаОкончанияПлан;
		СписокЛистов.Добавить(Выборка.Ссылка, Строка(Выборка.Ссылка) + " (" + Строка(Период) + ")");
	КонецЦикла;
	
	Возврат СписокЛистов;
	
КонецФункции

// Ищет лист ожидания, связанный с документом
//
// Параметры:
//  Документ - ДокументСсылка	 - связанные с листом документы.
// 
// Возвращаемое значение:
//   ДокументСсылка.ЛистОжидания.
//
Функция НайтиЛистОжиданияСвязанныйСДокументом(Документ) Экспорт
	
	СвязанныеДокументы = ОбщегоНазначенияРасширенный.ПолучитьСвязанныеДокументы(Документ);
	ЛистОжидания = Неопределено;
	Для Каждого элДокумент Из СвязанныеДокументы Цикл
		Если ТипЗнч(элДокумент) = Тип("ДокументСсылка.ЛистОжидания") Тогда
			ЛистОжидания = элДокумент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЛистОжидания;
	
КонецФункции

// ФИО объекта для подсистем взаимодействия с клиентами.
//
// Параметры:
//  Объект			 - СправочникСсылка	 - элемент справочника с реквизитами Фамилия, Имя, Отчество.
//  ТолькоИнициалы	 - Булево			 - сокращать ли до инициалов Имя и Отчество.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьФИООбъекта(Объект, ТолькоИнициалы = Ложь) Экспорт 
	
	Если ТолькоИнициалы Тогда
		Фамилия = Объект.Фамилия;
		Возврат Фамилия + " " + Лев(Объект.Имя, 1) + "." + Лев(Объект.Отчество, 1) + ".";
	Иначе
		ФИО = Объект.Фамилия + " " + Объект.Имя + " " + Объект.Отчество;
		Возврат ФИО;
	КонецЕсли;
	
КонецФункции

// Ищет вероятные листы ожидания по заявке, дате записи.
//
// Параметры:
//  Заявка					 - ДокументСсылка.Заявка - Заявка
//  ВернутьТолькоФактНаличия - Булево				 - вернуть документ или признак его наличия.
// 
// Возвращаемое значение:
//  Булево, ДокументСсылка.ЛистОжидания - лист ожидания либо факт его наличия.
//
Функция НайтиВероятныеЛистыОжиданияПоЗаявке(Заявка, ВернутьТолькоФактНаличия = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛистОжидания.Ссылка,
		|	ЛистОжидания.Сотрудник,
		|	ЛистОжидания.Работы.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Продолжительность
		|	),
		|	ЛистОжидания.Примечание КАК Описание,
		|	ЛистОжидания.Специализация,
		|	ЛистОжидания.ДатаНачалаПлан КАК ДатаНачала,
		|	ЛистОжидания.ДатаОкончанияПлан КАК ДатаОкончания
		|ИЗ
		|	Документ.ЛистОжидания КАК ЛистОжидания
		|ГДЕ
		|	ЛистОжидания.Клиент = &Клиент
		|	И ЛистОжидания.ДатаНачалаПлан <= &ДатаЗаявки
		|	И ЛистОжидания.ДатаОкончанияПлан >= &ДатаЗаявки
		|	И НЕ ЛистОжидания.ПометкаУдаления
		|	И НЕ ЛистОжидания.Выполнен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛистОжидания.ДатаНачалаПлан,
		|	ЛистОжидания.ДатаОкончанияПлан";
	
	Запрос.УстановитьПараметр("ДатаЗаявки", НачалоДня(Заявка.ДатаНачала));
	Запрос.УстановитьПараметр("Клиент",		Заявка.Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если ВернутьТолькоФактНаличия Тогда
		Возврат Не РезультатЗапроса.Пустой();
	Иначе
		Возврат РезультатЗапроса.Выбрать();
	КонецЕсли;
	
КонецФункции

// Формирует текст запроса для динамического списка взаимодействий с клиентом с учетом прав пользователя.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьТекстЗапросаСпискаВзаимодействийСКлиентом() Экспорт
	
	ТекстЗапроса = "";
	
	Разделитель = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
					
	ЗапросыТаблицСписка = Новый Массив;
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("Документ.Событие")));
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("Документ.Заявка")));
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("Документ.ЛистОжидания")));
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("Документ.ОбратнаяСвязь")));
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("Документ.Анкета")));
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("Задача.ЗадачиПользователя")));
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("РегистрСведений.СообщенияSMS")));
	ЗапросыТаблицСписка.Добавить(ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(Метаданные.НайтиПоПолномуИмени("РегистрСведений.СообщенияЭлектроннойПочты")));
	
	Для Каждого ТекстЗапросаТаблицы Из ЗапросыТаблицСписка Цикл
		
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстЗапроса, ТекстЗапросаТаблицы, Разделитель, Истина);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Длина = СтрДлина("ВЫБРАТЬ");
		ТекстЗапроса = Лев(ТекстЗапроса, Длина) + " РАЗРЕШЕННЫЕ " + Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - Длина);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаТаблицыДляСпискаВзаимодействийСКлиентом(ОбъектМетаданных)
	
	Если Не ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ОбъектМетаданных.ПолноеИмя() = "Документ.Событие" Тогда
		Текст = "ВЫБРАТЬ
				|	Событие.Клиент КАК Клиент,
				|	Событие.Ссылка КАК Документ,
				|	ВЫБОР
				|		КОГДА Событие.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыСобытий.ВходящееПисьмо)
				|			ТОГДА 0
				|		КОГДА Событие.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыСобытий.ИсходящееПисьмо)
				|			ТОГДА 1
				|		КОГДА Событие.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыСобытий.ВходящийЗвонок)
				|			ТОГДА 2
				|		КОГДА Событие.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыСобытий.ИсходящийЗвонок)
				|			ТОГДА 3
				|		КОГДА Событие.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыСобытий.ЛичнаяВстреча)
				|			ТОГДА 4
				|	КОНЕЦ КАК Картинка,
				|	ВЫБОР
				|		КОГДА Событие.ДатаФакт <> ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА Событие.ДатаФакт
				|		ИНАЧЕ Событие.Дата
				|	КОНЕЦ КАК ДатаСобытия,
				|	ВЫРАЗИТЬ(Событие.Комментарий КАК СТРОКА(300)) КАК ДопИнформация1,
				|	ВЫРАЗИТЬ(Событие.Цель КАК СТРОКА(300)) КАК ДопИнформация2,
				|	ВЫБОР
				|		КОГДА Событие.ДатаФакт = ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ИСТИНА
				|	КОНЕЦ КАК ДатаФактНеизвестна
				|ИЗ
				|	Документ.Событие КАК Событие
				|ГДЕ
				|	Событие.Клиент = &Клиент
				|	И НЕ Событие.ПометкаУдаления";

	ИначеЕсли ОбъектМетаданных.ПолноеИмя() = "Документ.ЛистОжидания" Тогда
		Текст = "ВЫБРАТЬ
				|	ЛистОжидания.Клиент,
				|	ЛистОжидания.Ссылка,
				|	7,
				|	ЛистОжидания.Дата,
				|	ЛистОжидания.Сотрудник,
				|	ЛистОжидания.Примечание,
				|	NULL
				|ИЗ
				|	Документ.ЛистОжидания КАК ЛистОжидания
				|ГДЕ
				|	ЛистОжидания.Клиент = &Клиент
				|	И НЕ ЛистОжидания.ПометкаУдаления";
		
	ИначеЕсли ОбъектМетаданных.ПолноеИмя() = "Документ.Заявка" Тогда
		Текст = "ВЫБРАТЬ
		        |	Заявка.Клиент КАК Клиент,
		        |	Заявка.Ссылка КАК Ссылка,
		        |	5 КАК Поле1,
		        |	Заявка.Дата КАК Дата,
		        |	Заявка.Сотрудник КАК Сотрудник,
		        |	ВЫБОР
		        |		КОГДА Заявка.Состояние.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
		        |			ТОГДА ""%ТекстОтменена%""
		        |		КОГДА Заявка.ПометкаУдаления
		        |			ТОГДА ""%Удалена%""
		        |		ИНАЧЕ """"
		        |	КОНЕЦ,
		        |	NULL
		        |ИЗ
		        |	Документ.Заявка КАК Заявка
		        |ГДЕ
		        |	Заявка.Клиент = &Клиент
		        |	И НЕ Заявка.ПометкаУдаления";
		Текст = СтрЗаменить(Текст, "%ТекстОтменена%", НСтр("ru='Отменена'"));
		Текст = СтрЗаменить(Текст, "%Удалена%", НСтр("ru='Удалена'"));
	ИначеЕсли ОбъектМетаданных.ПолноеИмя() = "Документ.Анкета" Тогда
		Текст = "ВЫБРАТЬ
				|	Анкета.Респондент,
				|	Анкета.Ссылка,
				|	12,
				|	Анкета.ДатаРедактирования,
				|	Анкета.ШаблонАнкеты,
				|	ПОДСТРОКА(Анкета.Комментарий, 1, 100),
				|	NULL
				|ИЗ
				|	Документ.Анкета КАК Анкета
				|ГДЕ
				|	Анкета.Респондент = &Клиент
				|	И НЕ Анкета.ПометкаУдаления";
		
	ИначеЕсли ОбъектМетаданных.ПолноеИмя() = "Документ.ОбратнаяСвязь" Тогда
		Текст = "ВЫБРАТЬ
				|	ОбратнаяСвязь.Клиент,
				|	ОбратнаяСвязь.Ссылка,
				|	6,
				|	ОбратнаяСвязь.Дата,
				|	ОбратнаяСвязь.ТипОбращения,
				|	ОбратнаяСвязь.ОбъектОбращения,
				|	NULL
				|ИЗ
				|	Документ.ОбратнаяСвязь КАК ОбратнаяСвязь
				|ГДЕ
				|	ОбратнаяСвязь.Клиент = &Клиент
				|	И НЕ ОбратнаяСвязь.ПометкаУдаления";
		
	ИначеЕсли ОбъектМетаданных.ПолноеИмя() = "Задача.ЗадачиПользователя" Тогда
		Текст = "ВЫБРАТЬ
				|	ЗадачиПользователя.Объект,
				|	ЗадачиПользователя.Ссылка,
				|	ВЫБОР
				|		КОГДА ЗадачиПользователя.Выполнена = ИСТИНА
				|			ТОГДА 9
				|		ИНАЧЕ 8
				|	КОНЕЦ,
				|	ЗадачиПользователя.СрокИсполнения,
				|	ВЫРАЗИТЬ(ЗадачиПользователя.Описание КАК СТРОКА(300)),
				|	NULL,
				|	NULL
				|ИЗ
				|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
				|ГДЕ
				|	ЗадачиПользователя.Объект = &Клиент
				|	И НЕ ЗадачиПользователя.ПометкаУдаления";
		
	ИначеЕсли ОбъектМетаданных.ПолноеИмя() = "РегистрСведений.СообщенияSMS" Тогда
		Текст = "ВЫБРАТЬ
				|	СообщенияSMS.Получатель,
				|	СообщенияSMS.Рассылка,
				|	10,
				|	СообщенияSMS.ДатаФактическойОтправки,
				|	СообщенияSMS.Текст,
				|	NULL,
				|	NULL
				|ИЗ
				|	РегистрСведений.СообщенияSMS КАК СообщенияSMS
				|ГДЕ
				|	СообщенияSMS.Получатель = &Клиент
				|	И СообщенияSMS.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиСообщений.Отправлена)";
		
	ИначеЕсли ОбъектМетаданных.ПолноеИмя() = "Задача.ЗадачиПользователя" Тогда
		Текст = "ВЫБРАТЬ
				|	СообщенияЭлектроннойПочты.Получатель,
				|	СообщенияЭлектроннойПочты.Рассылка,
				|	11,
				|	СообщенияЭлектроннойПочты.ДатаФактическойОтправки,
				|	NULL,
				|	NULL,
				|	NULL
				|ИЗ
				|	РегистрСведений.СообщенияЭлектроннойПочты КАК СообщенияЭлектроннойПочты
				|ГДЕ
				|	СообщенияЭлектроннойПочты.Получатель = &Клиент
				|	И СообщенияЭлектроннойПочты.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиСообщений.Отправлена)";
	Иначе
		Текст = "";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Создать лист ожидания по заявке нового клиента
//
// Параметры:
//  ИсточникИнформации	 - СправочникСсылка.ИсточникиИнформации - Источник информации.
//  ТипРекламы			 - СправочникСсылка.ТипыРекламы - Тип рекламы.
//  Клиент				 - СправочникСсылка.Клиенты - Клиент.
//  Дата				 - Дата - Дата листа ожидания.
//
Процедура СоздатьЛистОжиданияПоЗаявкеНовогоКлиента(ИсточникИнформации, ТипРекламы, Клиент, Дата) Экспорт
	
	СрокЖизниЛида = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("СрокЖизниЛида");
	
	Лиды = РегистрыСведений.Лиды.СрезПоследних(Дата, Новый Структура("Клиент", Клиент));
	Лиды.Сортировать("Период Убыв");
	
	СоздаватьЛистОжидания = Ложь;
	
	Если Лиды.Количество() = 0 Или Не ЗначениеЗаполнено(Лиды[0].Лид) Тогда
		СоздаватьЛистОжидания = Истина;
	КонецЕсли;
	
	Если Не СоздаватьЛистОжидания Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Продажи.Период) КАК Дата
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Клиент = &Клиент
		|	И Продажи.Период < &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(Заявка.Дата)
		|ИЗ
		|	Документ.Заявка КАК Заявка
		|ГДЕ
		|	Заявка.Клиент = &Клиент
		|	И Заявка.ПометкаУдаления = ЛОЖЬ
		|	И Заявка.Дата < &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Дата", Дата);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Пока РезультатЗапроса.Следующий() Цикл
			Если ЗначениеЗаполнено(РезультатЗапроса.Дата)
				И РезультатЗапроса.Дата + 3600*24*СрокЖизниЛида < Дата
			Тогда
				СоздаватьЛистОжидания = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СоздаватьЛистОжидания Тогда
		
		ЛистОжиданияОбъект = Документы.ЛистОжидания.СоздатьДокумент();
		
		ЛистОжиданияОбъект.Дата = Дата;
		ЛистОжиданияОбъект.Ответственный = Пользователи.ТекущийПользователь(); // Это не интерактивное создание, но информация об источнике документа фиксируется.
		ЛистОжиданияОбъект.Клиент = Клиент;
		
		ЛистОжиданияОбъект.ТипРекламы = ТипРекламы;
		ЛистОжиданияОбъект.ИсточникИнформации = ИсточникИнформации;
		
		Попытка
			ЛистОжиданияОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополнительный обработчик события ПередЗаписью для документов, которые могут выступать как обращение клиента.
//
// Параметры:
//  Источник		 - ДокументОбъект.Событие - событие
//  Отказ			 - Булево - отказ
//  РежимЗаписи		 - РежимЗаписиДокумента - текущий режим записи документа 
//  РежимПроведения	 - РежимПроведенияДокумента - текущий режим проведения документа .
//
Процедура ОбращениеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	
	ИсходЗвонкаНеПозволяетСоздатьЛид = Ложь;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Событие") Тогда
		РеквизитДата = "ДатаФакт";
		ИсходЗвонкаНеПозволяетСоздатьЛид = Источник.ИсходЗвонка.НеСоздаватьЛид;
	Иначе
		РеквизитДата = "Дата";
	КонецЕсли;
	
	ЗаписьВПервичныйЛид = Ложь;
	
	ИзменилосьНаличиеИсточника	 = ЗначениеЗаполнено(Источник.Ссылка.ИсточникИнформации) <> ЗначениеЗаполнено(Источник.ИсточникИнформации);
	ИзмениласьПометкаУдаления	 = Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления;
	ИзмениласьДата				 = НачалоДня(Источник[РеквизитДата]) <> НачалоДня(Источник.Ссылка[РеквизитДата]);
	
	Если Не ИсходЗвонкаНеПозволяетСоздатьЛид
		И ЗначениеЗаполнено(Источник.Клиент)
		И (Не Источник.ПометкаУдаления
			И (ИзменилосьНаличиеИсточника
				Или (ЗначениеЗаполнено(Источник.ИсточникИнформации)
					И (ИзмениласьДата Или ИзмениласьПометкаУдаления))
				Или Не ЗначениеЗаполнено(Источник.Ссылка.Клиент)))
	Тогда
		ЗаписьВПервичныйЛид = Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЗаписьВПервичныйЛид", ЗаписьВПервичныйЛид);
	ДополнительныеСвойства.Вставить("ПометкаНаУдаление", Источник.ПометкаУдаления Или Не ЗначениеЗаполнено(Источник.ИсточникИнформации));
	
КонецПроцедуры

// Дополнительный обработчик события ПриЗаписи для документов, которые могут выступать как обращение клиента.
//
// Параметры:
//  Источник		 - ДокументОбъект.Событие - событие
//  Отказ			 - Булево - отказ.
//
Процедура ОбращениеПриЗаписи(Источник, Отказ) Экспорт
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Событие") Тогда
		РеквизитДата = "ДатаФакт";
		БитфонСобытиеПриЗаписи(Источник);
	Иначе
		РеквизитДата = "Дата";
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЗаписьВПервичныйЛид Тогда
		ДанныеЛида = Новый Структура("Клиент, Лид, Период", Источник.Клиент, Источник.Ссылка, Источник[РеквизитДата]);
		ЛидСоздан = РегистрыСведений.Лиды.ДобавитьПервичныйЛид(ДанныеЛида, ДополнительныеСвойства);
		
		CRMСерверПереопределяемый.ОбращениеПриЗаписи(Источник, ЛидСоздан);
	КонецЕсли;
	
КонецПроцедуры

Процедура БитфонСобытиеПриЗаписи(Источник)
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбновитьСотовыйКлиента")
		И ЗначениеЗаполнено(Источник.Клиент)
		И ЗначениеЗаполнено(Источник.НомерТелефона)
	Тогда
		// Автозапись сотового присходит только если:
		//	- Заполнен строкой законный представитель, не заполнен его телефон в карточке клиента
		//	- Клиент без законного представителя и без сотового (любого)
		//	- Законный представитель - клиент из базы и без сотового (любого)
		//	+ во всех случаях - только если этого номера нет в любом виде КИ.
		// а также только если документ-источник счёл ситуацию требующую отработки автосохранения телефона.
	
		Источник.ДополнительныеСвойства.Удалить("ОбновитьСотовыйКлиента");
		
		ПчТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидСотовый = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый;
		
		ТелефонДокумента = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(Источник.НомерТелефона).Номер;
		
		Если ЗначениеЗаполнено(Источник.Клиент.ЗаконныйПредставитель) Тогда
			ЗаконныйПредставитель = Источник.Клиент.ЗаконныйПредставитель;
		КонецЕсли;
		
		СотовыйКлиента = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(
							КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Источник.Клиент, ПчТелефон, ВидСотовый,,Ложь)).Номер;
		
		ТелефоныКлиента = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Источник.Клиент, ПчТелефон,, Ложь, Ложь);
		Для Сч = 1 По ТелефоныКлиента.Количество() Цикл
			ТелефоныКлиента[Сч - 1] = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(ТелефоныКлиента[Сч - 1]).Номер;
		КонецЦикла;
		
		ЗаписатьТелефон = "";
		
		Если ТелефоныКлиента.Найти(ТелефонДокумента) = Неопределено Тогда
			
			Если ТипЗнч(ЗаконныйПредставитель) = Тип("Строка")
				И ПустаяСтрока(Источник.Клиент.ЗаконныйПредставительТелефон)
				И ТелефоныКлиента.Количество() = 0
			Тогда
				ЗаписатьТелефон = "ЗаконныйПредставительТелефон";
				
			ИначеЕсли (Не ЗначениеЗаполнено(ЗаконныйПредставитель) Или ТипЗнч(ЗаконныйПредставитель) = Тип("Строка"))
					И Не ЗначениеЗаполнено(СотовыйКлиента)
			Тогда 
				// Клиент без законного представителя в базе клиентов. И без сотового.
				ЗаписатьТелефон = "СотовыйКлиента";
				
			ИначеЕсли ЗначениеЗаполнено(ЗаконныйПредставитель) Тогда
				// Клиент с законным представителем в справочнике
				ТелефоныЗКП = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(ЗаконныйПредставитель, ПчТелефон,, Ложь, Ложь);
				Для Сч = 1 По ТелефоныЗКП.Количество() Цикл
					ТелефоныЗКП[Сч - 1] = КонтактнаяИнформацияКлиентСерверПереопределяемый.НормализоватьСотовыйТелефон(ТелефоныЗКП[Сч - 1]).Номер;
				КонецЦикла;
				
				Если ТелефоныЗКП.Найти(ТелефонДокумента) = Неопределено Тогда
					СотовыйЗКП = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(ЗаконныйПредставитель, ПчТелефон, ВидСотовый,,Ложь);
					Если Не ЗначениеЗаполнено(СотовыйЗКП) Тогда
						ЗаписатьТелефон = "СотовыйЗКП";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
				
		КонецЕсли;	
		
		Если ЗаписатьТелефон = "ЗаконныйПредставительТелефон" Тогда
			КлиентОбъект = Источник.Клиент.ПолучитьОбъект();
			КлиентОбъект.ЗаконныйПредставительТелефон = Источник.НомерТелефона;
			Попытка
				КлиентОбъект.Записать();
			Исключение КонецПопытки;
			
		ИначеЕсли Не ПустаяСтрока(ЗаписатьТелефон) Тогда
			Если ЗаписатьТелефон = "СотовыйКлиента" Тогда
				ПолучательТелефона = Источник.Клиент;
			Иначе
				ПолучательТелефона = ЗаконныйПредставитель;
			КонецЕсли;
			КонтактнаяИнформацияСерверПереопределяемый.ЗаписатьНомерТелефона(ПолучательТелефона, Источник.НомерТелефона, ВидСотовый);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
