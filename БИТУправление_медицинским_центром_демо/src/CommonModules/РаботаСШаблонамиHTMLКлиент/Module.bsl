#Область ПрограммныйИнтерфейс

#Область ИнтерактивнаяРаботаСШаблонамиHTML

Процедура ВыбратьЗначениеПараметраHTMLИнтерактивно(Форма, ИмяПоляШаблона, ЭлементHTML, СтрокаПараметра,
	КешЗначенийВыбора = Неопределено, Объект = Неопределено, СлужебныйВызов = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	ТипПараметра = СтрокаПараметра.ТипЗначения;
	ПодсказкаВвода = Строка(СтрокаПараметра.Параметр);
	
	ДанныеОповещения = Новый Структура("Параметр,				  СтрокаПараметра, ТипПараметра, Форма, ИмяПоляШаблона, КешЗначенийВыбора, СлужебныйВызов",
										СтрокаПараметра.Параметр, СтрокаПараметра, ТипПараметра, Форма, ИмяПоляШаблона, КешЗначенийВыбора, СлужебныйВызов);
	
	Если Объект <> Неопределено Тогда
		ОбъектДокумента = Объект;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ОбъектДокумента = Форма.Объект;
	Иначе
		ОбъектДокумента = Неопределено;
	КонецЕсли;
	ДанныеОповещения.Вставить("Объект", ОбъектДокумента);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуру(ДанныеОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВыбораЗначенияПараметраHTMLЗавершение", ЭтотОбъект, ДанныеОповещения);
	
	Если ТегЭлемента = "A" Тогда
		
		НачальноеЗначение = СтрокаПараметра.Значение;
		ТипЗначенияПараметра = СтрокаПараметра.ТипЗначения;
		ДеревоЗначенийВыбора = Неопределено;
		ВидКлассификатора = Неопределено;
		
		Если СтрокаПараметра.Свойство("ДеревоЗначенийВыбора") Тогда
			ДеревоЗначенийВыбора = СтрокаПараметра.ДеревоЗначенийВыбора;
		КонецЕсли;
		
		// Определяем ВидКлассификатора, если это тип КлассификаторыМинЗдрава.
		Если ТипЗначенияПараметра.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава")) Тогда
			ВидКлассификатора = глКешВидыКлассификаторовПараметровПриемаФРНСИ.Получить(СтрокаПараметра.Параметр);
			Если ВидКлассификатора = Неопределено Тогда
				ВидКлассификатора = ДопСерверныеФункции.ПолучитьРеквизит(СтрокаПараметра.Параметр, "ВидКлассификатора");
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка = Истина;
		СкорректироватьДанныеПараметраПоНазначению(Форма, СтрокаПараметра, СтандартнаяОбработка, НачальноеЗначение, ТипЗначенияПараметра, ДеревоЗначенийВыбора, ВидКлассификатора);
		
		Если СтандартнаяОбработка <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		Если ДеревоЗначенийВыбора <> Неопределено
			И ТипЗнч(ДеревоЗначенийВыбора) = Тип("СписокЗначений")
			И ЕстьЗначащиеВариантыДереваЗначенийВыбора(ДеревоЗначенийВыбора)
		Тогда
			
			МедицинскаяДеятельностьКлиент.ВыбратьИзДереваЗначенийВыбора(ОповещениеОВыборе, Форма, ЭлементHTML, ДеревоЗначенийВыбора, НачальноеЗначение);
			
		// Ввод из отдельной формы Обработки.ИнтерфейсВводаПолейЭМД по Назначению параметра шаблона
		// (свойство ДеревоЗначенийВыбора тут с неинформативным названием). 
		ИначеЕсли СтрокаПараметра.Свойство("ДеревоЗначенийВыбора")
			И (ТипЗнч(ДеревоЗначенийВыбора) = Тип("ПеречислениеСсылка.КодировкаПолейЭМД")
				Или ТипЗнч(ДеревоЗначенийВыбора) = Тип("СправочникСсылка.КлассификаторыМинЗдрава")) // Классификатор "Кодировка полей CDA документов".
		Тогда
			// Здесь ДеревоЗначенийВыбора - назначение параметра (CDA кодировка и т.д.)
			ДополнительныеПараметрыВвода = ДополнительныеПараметрыВводаКодируемогоПоля(СтрокаПараметра, ДеревоЗначенийВыбора, Форма);
			МедицинскаяДеятельностьКлиент.ВвестиЗначениеКодируемогоПоля(ОповещениеОВыборе, Форма, ЭлементHTML, ДеревоЗначенийВыбора, НачальноеЗначение, ДополнительныеПараметрыВвода);
			
		ИначеЕсли ТипЗначенияПараметра.СодержитТип(Тип("Строка")) Тогда
		
			// Если вызов в контексте формы приёма, то в качестве параметра формы ввода также предоставляю перивичный приём.
			Если ОбъектДокумента <> Неопределено
				И (ТипЗнч(ОбъектДокумента) = Тип("ДанныеФормыСтруктура") Или ТипЗнч(ОбъектДокумента) = Тип("Структура"))
				И ОбъектДокумента.Свойство("ПервичныйПрием")
			Тогда
				ПервичныйПрием = ОбъектДокумента.ПервичныйПрием;
			Иначе
				ПервичныйПрием = Неопределено;
			КонецЕсли;
			
			МедицинскаяДеятельностьКлиент.ПоказатьФормуВводаТекста(Строка(НачальноеЗначение), СтрокаПараметра.Параметр, ОповещениеОВыборе, ЭтотОбъект, ПервичныйПрием);
			
		ИначеЕсли ТипЗначенияПараметра.СодержитТип(Тип("Число")) Тогда
			
			Если ТипЗнч(НачальноеЗначение) <> Тип("Число") Тогда
				Попытка
					НачальноеЗначение = Число(НачальноеЗначение);
				Исключение
					НачальноеЗначение = 0;
				КонецПопытки;
			КонецЕсли;
			ПоказатьВводЧисла(ОповещениеОВыборе, НачальноеЗначение, ПодсказкаВвода + НСтр("ru=': введите число'"), ТипПараметра.КвалификаторыЧисла.Разрядность, ТипПараметра.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			
		ИначеЕсли ТипЗначенияПараметра.СодержитТип(Тип("Дата")) Тогда
			
			Если ТипЗнч(НачальноеЗначение) <> Тип("Дата") Тогда
				НачальноеЗначение = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(Строка(НачальноеЗначение));
				Если Не ЗначениеЗаполнено(НачальноеЗначение) Тогда
					НачальноеЗначение = ТекущаяДата();
				КонецЕсли;
			КонецЕсли;
			ПоказатьВводДаты(ОповещениеОВыборе, НачальноеЗначение, ПодсказкаВвода + ": введите дату", ТипПараметра.КвалификаторыДаты.ЧастиДаты);
			
		ИначеЕсли ТипЗначенияПараметра.СодержитТип(Тип("Булево")) Тогда
			
			Если ТипЗнч(НачальноеЗначение) <> Тип("Булево") Тогда
				Попытка
					НачальноеЗначение = Булево(СтрокаПараметра.Значение);
				Исключение
					НачальноеЗначение = Ложь;
				КонецПопытки;
			КонецЕсли;
			МедицинскаяДеятельностьКлиент.ПоказатьФормуВводаБулево(НачальноеЗначение, СтрокаПараметра.Параметр, ОповещениеОВыборе, СтрокаПараметра.ФорматнаяСтрока);
			
		ИначеЕсли ТипЗначенияПараметра.СодержитТип(Тип("СправочникСсылка.ДополнительныеЗначенияХарактеристик")) Тогда
			
			Если КешЗначенийВыбора = Неопределено Тогда 
				ПараметрыФормыВыбора = Новый Структура("ВладелецПараметра", СтрокаПараметра.Параметр);
				ОткрытьФорму("Справочник.ДополнительныеЗначенияХарактеристик.ФормаВыбора", ПараметрыФормыВыбора, Форма, , , , ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ЗначениеСписка = Неопределено;
				СписокЗначенийПараметра = Новый СписокЗначений;
				МассивЗначений = КешЗначенийВыбора.Получить(СтрокаПараметра.Параметр);
				Если ТипЗнч(МассивЗначений) = Тип("Массив") Тогда
					Для Каждого ЗначениеВыбора Из МассивЗначений Цикл
						ЭлементСЗ = СписокЗначенийПараметра.Добавить(ЗначениеВыбора);
						Если ЗначениеВыбора = СтрокаПараметра.Значение Тогда
							ЗначениеСписка = ЭлементСЗ;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеСписка = Неопределено Тогда
					Форма.ПоказатьВыборИзСписка(ОповещениеОВыборе, СписокЗначенийПараметра);
				Иначе 
					Форма.ПоказатьВыборИзСписка(ОповещениеОВыборе, СписокЗначенийПараметра, , ЗначениеСписка);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияПараметра.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава")) Тогда
			
			ЗначениеОтбора = Новый Структура("ВидКлассификатора", ВидКлассификатора);
			
			Если СтрокаПараметра.ДопустимыеЗначения.Количество() > 0 Тогда
				ЗначениеОтбора.Вставить("УИДЕГИСЗ", СтрокаПараметра.ДопустимыеЗначения.ВыгрузитьЗначения());
			КонецЕсли;
			
			ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФорму("Справочник.КлассификаторыМинЗдрава.ФормаВыбора", ПараметрыФормыВыбора, Форма, , , , ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ТипЗначенияПараметра.Типы().Количество() > 1 Тогда
			
			СписокТипов = Новый СписокЗначений;
			СписокТипов.ЗагрузитьЗначения(ТипЗначенияПараметра.Типы());
			ДопПараметры = Новый Структура("Клиент, Форма, ОповещениеОВыборе", ОбъектДокумента.Клиент, Форма, ОповещениеОВыборе);
			СписокТипов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОбработкаВыбораТипаДоговора", РаботаСШаблонамиHTMLКлиент, ДопПараметры), НСтр("ru='Выбор типа данных'"));
			
		ИначеЕсли ОбъектДокумента <> Неопределено
			И ТипЗначенияПараметра.СодержитТип(Тип("ДокументСсылка.ДоговорСКлиентом"))
		Тогда
			
			ЗначениеОтбора = Новый Структура("Клиент", ОбъектДокумента.Клиент);
			ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФорму("Документ.ДоговорСКлиентом.ФормаВыбора", ПараметрыФормыВыбора, Форма, , , , ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли СтрокаПараметра.ДопустимыеЗначения.Количество() > 0 Тогда
			
			// Вынужденный серверный вызов
			
			ИмяФормыВыбора = ИнтеграцияЕГИСЗВызовСервера.ПолучитьИмяФормыВыбораКлассификатораПоТипу(ТипЗначенияПараметра.Типы()[0]);
			
			Если ИмяФормыВыбора = Неопределено Тогда
				ПоказатьВводЗначения(ОповещениеОВыборе, НачальноеЗначение, ПодсказкаВвода + ": выберите значение", ТипЗначенияПараметра);
			Иначе
				ПараметрыФормыВыбора = Новый Структура("Отбор", Новый Структура("УИДЕГИСЗ", СтрокаПараметра.ДопустимыеЗначения.ВыгрузитьЗначения()));
				ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормыВыбора, Форма, , , , ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ТипЗначенияПараметра) Тогда
			
			ПоказатьВводЗначения(ОповещениеОВыборе, НачальноеЗначение, Строка(ТипЗначенияПараметра), ТипЗначенияПараметра);
			
		КонецЕсли;
		
	ИначеЕсли ТегЭлемента = "INPUT"
		И (ТипПараметра.СодержитТип(Тип("Булево"))
		Или (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементHTML, "type") И ВРЕГ(ЭлементHTML.type) = "CHECKBOX"))
		Тогда
		
		ЗначениеПараметра = ЭлементHTML.checked;
		ВыполнитьОбработкуОповещения(ОповещениеОВыборе, ЗначениеПараметра);
		
	ИначеЕсли ТегЭлемента = "TEXTAREA" Или ТегЭлемента = "INPUT" Или ТегЭлемента = "SELECT" Тогда
		
		ЗначениеПараметра = Неопределено;
		Если ПолеВводаИзменено(ЭлементHTML) Тогда 
			Если ТегЭлемента = "TEXTAREA" Или ТегЭлемента = "INPUT" Тогда
				ЗначениеПараметра = ЭлементHTML.value;
				Попытка
					Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПараметра.Параметр, "ТипЗначения").СодержитТип(Тип("Число")) Тогда
						ЗначениеПараметра = Число(ЗначениеПараметра);
					КонецЕсли;
				Исключение КонецПопытки;
			ИначеЕсли ЭлементHTML.TagName = "SELECT" Тогда
				Если ТипЗнч(ЭлементHTML.selectedIndex) = Тип("Число") Тогда
					КешированноеЗначениеПоСтроке = КешЗначенийВыбора.Получить(ЭлементHTML.value);
					Если КешированноеЗначениеПоСтроке = Неопределено Тогда
						ЗначениеПараметра = РаботаСШаблонамиHTML.ПреобразоватьЗначениеИзСтрокиВнутр(ЭлементHTML.value);
					Иначе
						ЗначениеПараметра = КешированноеЗначениеПоСтроке;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			УстановитьПризнакИзмененияПоляВвода(ЭлементHTML, Ложь);
			ВыполнитьОбработкуОповещения(ОповещениеОВыборе, ЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЗначениеПараметраHTMLИнтерактивно(Форма, ИмяПоляШаблона, ЭлементHTML, СтрокаПараметра,
	КешЗначенийВыбора = Неопределено, Объект = Неопределено, СлужебныйВызов = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	ТипПараметра = СтрокаПараметра.ТипЗначения;
	
	ДанныеОповещения = Новый Структура("Параметр,				  СтрокаПараметра, ТипПараметра, Форма, ИмяПоляШаблона, КешЗначенийВыбора, СлужебныйВызов", 
										СтрокаПараметра.Параметр, СтрокаПараметра, ТипПараметра, Форма, ИмяПоляШаблона, КешЗначенийВыбора, СлужебныйВызов);
	
	Если Объект <> Неопределено Тогда
		ОбъектДокумента = Объект;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ОбъектДокумента = Форма.Объект;
	Иначе
		ОбъектДокумента = Неопределено;
	КонецЕсли;
	ДанныеОповещения.Вставить("Объект", ОбъектДокумента);
	ДанныеОповещения.Вставить("ОчисткаПараметра", Истина);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуру(ДанныеОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВыбораЗначенияПараметраHTMLЗавершение", ЭтотОбъект, ДанныеОповещения);
	
	ПустоеЗначение = Неопределено;
	
	Если ТегЭлемента = "SELECT" Тогда
		Если ТипЗнч(ЭлементHTML.selectedIndex) = Тип("Число") Тогда
			ЭлементHTML.selectedIndex = 0;
			ПустоеЗначение = РаботаСШаблонамиHTML.ПреобразоватьЗначениеИзСтрокиВнутр(ЭлементHTML.options[0].value);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОВыборе, ПустоеЗначение);
	
КонецПроцедуры

// Отработа завершения интерактивного ввода значения параметра шаблона.
//
// Параметры:
//  Значение				 - Произвольный	 - значение.
//  ДополнительныеПараметры	 - Структура	 - допонительные данные выбора, данные места вызова выбора.
//
Процедура ВыбораЗначенияПараметраHTMLЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено
		И Не (ДополнительныеПараметры.Свойство("ОчисткаПараметра")
			И ДополнительныеПараметры.ОчисткаПараметра)
	Тогда // Выбора не было.
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	// Обновляем значение
	СтрокаПараметра = ДополнительныеПараметры.СтрокаПараметра;
	
	ВыбранноеЗначение = Значение;
	Если ТипЗнч(Значение) = Тип("ЭлементСпискаЗначений") Тогда
		ВыбранноеЗначение = Значение.Значение;
	КонецЕсли;
	
	СтрокаПараметра.Значение = ВыбранноеЗначение;
	СтрокаПараметра.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(СтрокаПараметра);
	
	Если Не ДополнительныеПараметры.Свойство("СлужебныйВызов") Или Не ДополнительныеПараметры.СлужебныйВызов Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДокументHTML") Тогда
		ДокументHTML = ДополнительныеПараметры.ДокументHTML;
	Иначе
		ПолеШаблона = Форма.Элементы.Найти(ДополнительныеПараметры.ИмяПоляШаблона);
		Если ПолеШаблона = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДокументHTML = ПолеШаблона.Документ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ИндексСтрокиМногострочнойТаблицы") Тогда
		Таблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "table", Истина);
		Если Таблицы.Количество() = 0
			Или Таблицы[0].rows.length < ДополнительныеПараметры.ИндексСтрокиМногострочнойТаблицы + 1
		Тогда
			Возврат;
		КонецЕсли;
		
		ДокументHTML = Таблицы[0].rows[ДополнительныеПараметры.ИндексСтрокиМногострочнойТаблицы];
	КонецЕсли;
	
	КешЗначенийВыбора = Неопределено;
	ДополнительныеПараметры.Свойство("КешЗначенийВыбора", КешЗначенийВыбора);
	
	// Обновляем все элементы шаблона, связанные с параметром
	УстановитьЗначениеПредставлениеПараметраHTMLИнтерактивно(СтрокаПараметра, ДокументHTML, КешЗначенийВыбора);
	
	// Вычисляем зависимые параметры
	Попытка
		ЗависимыеПараметры = Форма.КешЗависимыхПараметров.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметра.Параметр));
	Исключение // У формы нет таблицы зависимых параметров
		ЗависимыеПараметры = Неопределено;
	КонецПопытки;
	
	Если ЗависимыеПараметры <> Неопределено И ЗависимыеПараметры.Количество() > 0 Тогда
		
		ИдентификаторСтрокиШаблона = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(СтрокаПараметра, "ИдентификаторСтрокиШаблона");
		
		ДополнительныйОтборПараметров = Новый Структура;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПараметра, "НомерСтроки") Тогда
			ДополнительныйОтборПараметров.Вставить("НомерСтроки", СтрокаПараметра.НомерСтроки);
		КонецЕсли;
		
		ЗначенияЗависимыхПараметров = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(
			Форма.ТаблицаПараметров, Форма.КешЗависимыхПараметров, ДополнительныеПараметры.Объект, СтрокаПараметра.Параметр, ИдентификаторСтрокиШаблона, ДополнительныйОтборПараметров);
			
		РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(Форма.ТаблицаПараметров, ЗначенияЗависимыхПараметров, ИдентификаторСтрокиШаблона, ДополнительныйОтборПараметров);
		
		Для Каждого СтрокаПараметра Из ЗначенияЗависимыхПараметров Цикл
			УстановитьЗначениеПредставлениеПараметраHTMLИнтерактивно(СтрокаПараметра, ДокументHTML, КешЗначенийВыбора);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьЗависимыеПараметрыПоНазначению(Форма, СтрокаПараметра, ДополнительныеПараметры);
	
КонецПроцедуры

// Возвращает Истина, если помимо стандартных вариантов в списке выбора есть другие.
//
// Параметры:
//  УровеньДереваЗначенийВыбора - СписокЗначений - Уровень дерева значений выбора парметра шаблона.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЕстьЗначащиеВариантыДереваЗначенийВыбора(УровеньДереваЗначенийВыбора) Экспорт
	
	ЕстьВарианты = Ложь;
	
	Для Каждого ЭлементСписка Из УровеньДереваЗначенийВыбора Цикл
		
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("ОписаниеТипов") // Встроенный вариант выбора для ручного ввода значения.
			Или Не ЗначениеЗаполнено(ЭлементСписка.Значение)
				И ЭлементСписка.Картинка = БиблиотекаКартинок.Очистить // Встроенный вариант выбора для очистки значения.
		Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьВарианты = Истина;
		Прервать;
	КонецЦикла;
	
	Возврат ЕстьВарианты;
	
КонецФункции

Функция ДополнительныеПараметрыВводаКодируемогоПоля(СтрокаПараметра, НазначениеПараметра, Форма)
	
	ДополнительныеПараметрыВвода = Новый Структура;
	
	// Передача значений параметров, от которых записит вводимый параметр.
	СтрокиЗависмыхПараметров = Форма.КешЗависимыхПараметров.НайтиСтроки(Новый Структура("ЗависимыйПараметр", СтрокаПараметра.Параметр));
	Если СтрокиЗависмыхПараметров.Количество() > 0 Тогда
		
		СвязанныеПараметрыШаблона = Новый Соответствие;
		
		Отбор = Новый Структура("Параметр, ИдентификаторСтрокиШаблона");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПараметра, "ИдентификаторТаблицы") Тогда
			Отбор.Вставить("ИдентификаторТаблицы");
			Отбор.Вставить("НомерСтрокиТаблицы");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПараметра,,"Параметр");
		
		Для Каждого СтрокаЗависмыхПараметров Из СтрокиЗависмыхПараметров Цикл
			Отбор.Параметр = СтрокаЗависмыхПараметров.Параметр;
			СтрокиПараметров = Форма.ТаблицаПараметров.НайтиСтроки(Отбор);
			Если СтрокиПараметров.Количество() > 0 Тогда
				Для Каждого СтрокаПарамертаРодителя Из СтрокиПараметров Цикл
					СвязанныеПараметрыШаблона.Вставить(СтрокаПарамертаРодителя.Параметр, СтрокаПарамертаРодителя.Значение); 		
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если СвязанныеПараметрыШаблона.Количество() <> 0 Тогда
			ДополнительныеПараметрыВвода.Вставить("СвязанныеПараметрыШаблона", СвязанныеПараметрыШаблона);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнительныеПараметрыВвода;
	
КонецФункции

// Делает пересчет параметров, зависимых от измененного значения.
//
// Параметры:
//  ИзмененныйРеквизит	 - ПеречислениеСсылка.ПараметрыHTML	 - параметр, значение которого изменилось.
//  Форма				 - ФормаКлиентскогоПриложения		 - форма документа.
//  Объект				 - ДанныеФормыСтруктура				 - документ в форме.
//
Процедура ПересчетПараметровОтЗависимыхРеквизитов(ИзмененныйРеквизит, Форма, Объект)Экспорт

	// Вычисляем зависимые параметры
	Попытка
		ЗависимыеПараметры = Форма.КешЗависимыхПараметров.НайтиСтроки(Новый Структура("Параметр", ИзмененныйРеквизит));
	Исключение // У формы нет таблицы зависимых параметров.
		ЗависимыеПараметры = Неопределено;
	КонецПопытки;
	
	Если ЗависимыеПараметры <> Неопределено И ЗависимыеПараметры.Количество() > 0 Тогда
		
		Если Форма.ТаблицаПараметров.Количество() <> 0 Тогда
			ЗначенияЗависимыхПараметров = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(
				Форма.ТаблицаПараметров, Форма.КешЗависимыхПараметров, Объект, ИзмененныйРеквизит,);
			РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(Форма.ТаблицаПараметров, ЗначенияЗависимыхПараметров);
		Иначе
			ЗначенияЗависимыхПараметров = Неопределено;
		КонецЕсли;
		
		Если Форма.ПараметрыТаблицШаблонов.Количество() <> 0 Тогда
			ЗначенияЗависимыхПараметровТаблицШаблонов = РаботаСШаблонамиHTML.ПолучитьЗначенияПараметровПоУмолчанию(
				Форма.ПараметрыТаблицШаблонов, Форма.КешЗависимыхПараметров, Объект, ИзмененныйРеквизит);
			РаботаСШаблонамиHTMLКлиентСервер.ОбновитьЗначенияТаблицыПараметров(Форма.ПараметрыТаблицШаблонов, ЗначенияЗависимыхПараметровТаблицШаблонов);
		Иначе
			ЗначенияЗависимыхПараметровТаблицШаблонов = Неопределено;
		КонецЕсли;
		
		Для Каждого ПолеДокуменнта Из Форма.СтраницыШаблоновПриема Цикл
			
			// Находим поле шаблона
			Если ЗначенияЗависимыхПараметров <> Неопределено Тогда
			
				ПолеШаблона = Форма.Элементы.Найти(ПолеДокуменнта.ИмяПоляДокумента);
				Если ПолеШаблона = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				ДокументHTML = ПолеШаблона.Документ;
				Для Каждого СтрокаПараметра Из ЗначенияЗависимыхПараметров Цикл
					УстановитьЗначениеПредставлениеПараметраHTMLИнтерактивно(СтрокаПараметра, ДокументHTML, Форма.КешЗначенийВыбора);
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначенияЗависимыхПараметровТаблицШаблонов <> Неопределено Тогда
				ОбновитьЗначенияЗависимыхПараметровТаблицШаблонов(ЗначенияЗависимыхПараметровТаблицШаблонов, Форма, ПолеДокуменнта.ИдентификаторСтрокиШаблона, ДокументHTML);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗначенияЗависимыхПараметровТаблицШаблонов(ЗначенияЗависимыхПараметровТаблицШаблонов, Форма, ИдентификаторСтрокиШаблона, ДокументHTML)
	
	МассивОбновленныхТаблиц = Новый Массив;
	Для Каждого СтрокаПараметра Из ЗначенияЗависимыхПараметровТаблицШаблонов Цикл
		
		Если СтрокаПараметра.ИдентификаторСтрокиШаблона <> ИдентификаторСтрокиШаблона Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивОбновленныхТаблиц.Найти(СтрокаПараметра.ИдентификаторТаблицы) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Таблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, СтрокаПараметра.ИдентификаторТаблицы, , "data-bit-dyntable-id");
		Если Таблицы <> Неопределено И РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Таблицы[0], СтрокаПараметра.Параметр.УникальныйИдентификатор()).length > 0 Тогда
			ПараметрыТаблицы = Новый Массив;
			ДополнитьПараметрамиТаблицы(ПараметрыТаблицы, Таблицы[0], Форма.ТаблицаПараметров, ИдентификаторСтрокиШаблона);
			МассивОбновленныхТаблиц.Добавить(СтрокаПараметра.ИдентификаторТаблицы);
			РаботаСШаблонамиHTMLКлиентСервер.ОбновитьТекстHTMLТаблицШаблонов(Форма, СтрокаПараметра.ИдентификаторСтрокиШаблона, СтрокаПараметра.ИдентификаторТаблицы, ПараметрыТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в HTML документе представление значения параметра шаблона.
//
// Параметры:
//  СтрокаПараметра		 - СтрокаТаблицыЗначений - строка параметра медицинского документа
//  ДокументHTML		 - ВнушнийОбъект - html документ.
//  КешЗначенийВыбора	 - Соответствие	 - значения выбора параметров шаблонов медицинского документа.
//
Процедура УстановитьЗначениеПредставлениеПараметраHTMLИнтерактивно(СтрокаПараметра, ДокументHTML, КешЗначенийВыбора = Неопределено) Экспорт
	
	ИдПараметра = Строка(СтрокаПараметра.Параметр.УникальныйИдентификатор());
	ЭлементыHTML = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдПараметра);
	
	Для Каждого ЭлементHTML Из ЭлементыHTML Цикл
		
		ТегЭлемента = ВРег(ЭлементHTML.TagName);
		Если ТегЭлемента = "A" Тогда 
			Если ЗначениеЗаполнено(СтрокаПараметра.Представление) Тогда
				ЭлементHTML.innerText = СтрокаПараметра.Представление;
			Иначе
				ЭлементHTML.innerText = "[...]";
			КонецЕсли;
		ИначеЕсли ТегЭлемента = "INPUT"
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементHTML, "type")
			И ВРЕГ(ЭлементHTML.type) = "CHECKBOX"
		Тогда
			// INPUT-флажок
			ЭлементHTML.checked = СтрокаПараметра.Значение;
			
		ИначеЕсли ТегЭлемента = "TEXTAREA" Или ТегЭлемента = "INPUT" Тогда
			// Поле ввода
			РаботаСHTMLКлиентСервер.УстановитьЗначениеЭлементуПоляВводаHTML(ЭлементHTML, СтрокаПараметра.Представление, ТегЭлемента);
		ИначеЕсли ТегЭлемента = "SELECT" Тогда
			ЗначениеВыборка = Неопределено;
			Если КешЗначенийВыбора <> Неопределено Тогда
				ЗначениеВыбора = КешЗначенийВыбора.Получить(СтрокаПараметра.Значение);
			КонецЕсли;
			Если ЗначениеВыбора = Неопределено Тогда
				ЗначениеВыбора = РаботаСШаблонамиHTML.ПреобразоватьЗначениеВСтрокуВнутр(СтрокаПараметра.Значение);
			КонецЕсли;
			РаботаСHTMLКлиентСервер.УстановитьВыбранноеЗначениеSelect(ЭлементHTML, ЗначениеВыбора);
		ИначеЕсли ТегЭлемента = "TT" Тогда
			ЭлементHTML.innerText = СтрокаПараметра.Представление;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Делает перенос значение активного текстового поля HTML документа в таблицу параметров медицинского документа.
//
// Параметры:
//  ЭтаФорма					 - ФормаКлиентскогоПриложения - форма документа.
//  ПолеШаблона					 - ВнешнийОбъект	 - поле ввода html документа.
//  ИдентификаторСтрокиШаблона	 - Число						 - идентификатор строки шаблона в документе.
//  ДополнительныеПараметры		 - Структура	 - дополнительные параметры отбор для определения целеной строки параметра.
//
Процедура ПеренестиЗначениеАктивногоТекстовогоПоляОсмотраВТаблицуПараметров(ЭтаФорма, ПолеШаблона, ИдентификаторСтрокиШаблона = 0, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДокументHTML = ПолеШаблона.Документ;
	Если ДокументHTML = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Помечаем текущее поле ввода измененным
	Если ДокументHTML.activeElement <> Неопределено
		И (ВРег(ДокументHTML.activeElement.TagName) = "TEXTAREA" ИЛИ ВРег(ДокументHTML.activeElement.TagName) = "INPUT")
		И ЗначениеЗаполнено(ДокументHTML.activeElement.id) 
	Тогда
		УстановитьПризнакИзмененияПоляВвода(ДокументHTML.activeElement);
	КонецЕсли;
	
	ЭлементыПоляВвода = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "TEXTAREA", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлементыПоляВвода, РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "INPUT", Истина));
	
	Для Каждого ЭлементHTML Из ЭлементыПоляВвода Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементHTML.id) Или Не ПолеВводаИзменено(ЭлементHTML) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ОтборСтрокиПараметра")
		Тогда
			Отбор = ДополнительныеПараметры.ОтборСтрокиПараметра;
		Иначе
			Отбор = Новый Структура("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона);
		КонецЕсли;
		Отбор.Вставить("СтрокаУидПараметра", ЭлементHTML.id);
		СтрокиПараметра = ЭтаФорма.ТаблицаПараметров.НайтиСтроки(Отбор);
		
		Если СтрокиПараметра.Количество() > 0 Тогда
			СтрокаПараметра = СтрокиПараметра[0];
			ВыбратьЗначениеПараметраHTMLИнтерактивно(ЭтаФорма, ПолеШаблона.Имя, ЭлементHTML, СтрокаПараметра,,, Истина, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, зарегитрировано ли в поле ввода HTML-документа изменение значения.
//
// Параметры:
//  ЭлементHTML	 - 	 - Проверяемый элемент HTML поля ввода (input, textarea).
// 
// Возвращаемое значение:
//   Булево.
//
Функция ПолеВводаИзменено(ЭлементHTML) Экспорт
	
	ЗначениеКонтрольногоАтрибута = ЭлементHTML.getAttribute("isOnChange");
	Возврат (ЗначениеКонтрольногоАтрибута = 1 Или ЗначениеКонтрольногоАтрибута = "1");
	
КонецФункции

Процедура УстановитьПризнакИзмененияПоляВвода(ЭлементHTML, Изменено = Истина) Экспорт
	
	ЭлементHTML.setAttribute("isOnChange", ?(Изменено, 1, null));
	
КонецПроцедуры

// Стандартный обработчик нажатия кнопки HTML документа в форме медицинского документа.
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения	 - форма медицинского документа.
//  ЭлементHTMLКнопка			 - ВнешнийОбъект				 - кнопка html документа.
//  ИдентификаторСтрокиШаблона	 - Число						 - идентификатор строки шаблона в документе.
//
Процедура КнопкаШаблонаНажатие(Форма, ЭлементHTMLКнопка, ИдентификаторСтрокиШаблона, соотвКешИзображенийШаблонов) Экспорт
	
	ИдентификаторТаблицы = ЭлементHTMLКнопка.getAttribute("data-bit-dyntable-id-button");
	
	Если ЗначениеЗаполнено(ИдентификаторТаблицы) Тогда
		ОбработатьНажатиеКнопкиРедактированияТаблицы(Форма, ИдентификаторСтрокиШаблона, ИдентификаторТаблицы);
		Возврат;
	КонецЕсли;
	
	ИдентификаторКнопкиРедактированияКартинки = ПолучитьЗначениеАтрибутаБлижайшегоРодительскогоУзла(ЭлементHTMLКнопка, "data-bit-container-draw-id");
	
	Если ЗначениеЗаполнено(ИдентификаторКнопкиРедактированияКартинки)
		И ИдентификаторКнопкиРедактированияКартинки = ЭлементHTMLКнопка.parentNode.id
	Тогда
		ОбработатьНажатиеКнопкиРедактированияКартинки(Форма, ИдентификаторСтрокиШаблона, ЭлементHTMLКнопка.parentNode.parentNode, соотвКешИзображенийШаблонов);
		Возврат;
	КонецЕсли;
	
	ИдентификаторКнопкиВыбораКартинки = ПолучитьЗначениеАтрибутаБлижайшегоРодительскогоУзла(ЭлементHTMLКнопка, "data-bit-selected-img-container-id");
	
	Если ЗначениеЗаполнено(ИдентификаторКнопкиВыбораКартинки)
		И ИдентификаторКнопкиВыбораКартинки = ЭлементHTMLКнопка.parentNode.id
	Тогда
		ДанныеФормыПриема = Новый Структура("ИдентификаторСтрокиШаблона, Форма", ИдентификаторСтрокиШаблона, Форма);
		ОбработатьНажатиеКнопкиИзмененияИзображения(Форма.УникальныйИдентификатор, ЭлементHTMLКнопка, ДанныеФормыПриема);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеАтрибутаБлижайшегоРодительскогоУзла(ЭлементHTML, Атрибут) Экспорт
	
	РодительСАтрибутом = ПолучитьБлижайшийРодительскийУзелСУказаннымАтрибутом(ЭлементHTML, Атрибут);
	Если РодительСАтрибутом <> Неопределено Тогда
		Возврат РодительСАтрибутом.getAttribute(Атрибут);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьБлижайшийРодительскийУзелСУказаннымАтрибутом(ЭлементHTML, Атрибут) Экспорт
	
	Родитель = ЭлементHTML.parentNode;
	Пока Не (Родитель = Неопределено Или ВРег(Родитель.tagName) = "BODY") Цикл
		Если Родитель.hasAttribute(Атрибут) Тогда
			Возврат Родитель;
		КонецЕсли;
		Родитель = Родитель.parentNode;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОбработатьНажатиеКнопкиРедактированияТаблицы(Форма, ИдентификаторСтрокиШаблона, ИдентификаторТаблицы)
	
	МассивДанныхТаблицы = Новый Массив;
	ОтборПараметрыТаблицыШаблонов = Новый Структура("ИдентификаторТаблицы, ИдентификаторСтрокиШаблона", ИдентификаторТаблицы, ИдентификаторСтрокиШаблона);
	Для Каждого СтрокаТаблицы Из Форма.ПараметрыТаблицШаблонов.НайтиСтроки(ОтборПараметрыТаблицыШаблонов) Цикл
		
		СтруктураПараметра = Новый Структура("НомерСтрокиТаблицы, Параметр, Значение, ИдентификаторТаблицы, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, СтрокаТаблицы);
		
		МассивДанныхТаблицы.Добавить(СтруктураПараметра);
		
	КонецЦикла;
	
	СтрокаШаблона = Форма.Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
	Если СтрокаШаблона = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТаблицы = Новый Массив;
	ИдентификаторыВложенныхТаблиц = Новый Массив;
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(СтрокаШаблона.ТекстШаблона);
	ЭлементыРедактируемойТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдентификаторТаблицы, , "data-bit-dyntable-id");
	
	Если ЭлементыРедактируемойТаблицы.Количество() > 0 Тогда
		ДополнитьПараметрамиТаблицы(ПараметрыТаблицы, ЭлементыРедактируемойТаблицы[0], Форма.ТаблицаПараметров, ИдентификаторСтрокиШаблона);
		
		ВложенныеТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементыРедактируемойТаблицы[0],,"table","data-bit-dyntable-id");
		Для Каждого ВложеннаяТаблица Из ВложенныеТаблицы Цикл
			ИдентификаторыВложенныхТаблиц.Добавить(ВложеннаяТаблица.ПолучитьАтрибут("data-bit-dyntable-id"));
			ОтборПараметрыТаблицыШаблонов = Новый Структура("ИдентификаторТаблицы, ИдентификаторСтрокиШаблона", ВложеннаяТаблица.ПолучитьАтрибут("data-bit-dyntable-id"), ИдентификаторСтрокиШаблона);
			Для Каждого СтрокаТаблицы Из Форма.ПараметрыТаблицШаблонов.НайтиСтроки(ОтборПараметрыТаблицыШаблонов) Цикл
				СтруктураПараметра = Новый Структура("НомерСтрокиТаблицы, Параметр, Значение, ИдентификаторТаблицы, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
				ЗаполнитьЗначенияСвойств(СтруктураПараметра, СтрокаТаблицы);
				МассивДанныхТаблицы.Добавить(СтруктураПараметра);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПараметрыТаблицы",				ПараметрыТаблицы);
	Параметры.Вставить("МассивДанныхТаблицы",			МассивДанныхТаблицы);
	Параметры.Вставить("ИдентификаторТаблицыШаблонов",	ИдентификаторТаблицы);
	Параметры.Вставить("ТекстШаблона",					СтрокаШаблона.ТекстШаблона);
	Параметры.Вставить("КешЗначенийВыбора",				Форма.КешЗначенийВыбора);
	Параметры.Вставить("ИдентификаторСтрокиШаблона",	ИдентификаторСтрокиШаблона);
	Параметры.Вставить("КешЗависимыхПараметров",		Форма.КешЗависимыхПараметров);
	Параметры.Вставить("Документ",						Форма.Объект);
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ПараметрыТаблицы",				ПараметрыТаблицы);
	ПараметрыЗакрытия.Вставить("ИдентификаторСтрокиШаблона",	ИдентификаторСтрокиШаблона);
	ПараметрыЗакрытия.Вставить("ИдентификаторТаблицы",			ИдентификаторТаблицы);
	ПараметрыЗакрытия.Вставить("ИдентификаторыВложенныхТаблиц",	ИдентификаторыВложенныхТаблиц);
	ПараметрыЗакрытия.Вставить("Форма",							Форма);
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеТаблицыШаблоновДокументаЗавершение", РаботаСШаблонамиHTMLКлиент, ПараметрыЗакрытия);
	
	ОткрытьФорму("Документ.Прием.Форма.РедактированиеТаблицыШаблона", Параметры, Форма,,,,Оповещение);
	
КонецПроцедуры

// Обработчик завершения редактирования таблицы шаблонов для медицинского документа.
//
// Параметры:
//  Результат	 - Структура - Структура с полями "ИдентификаторСтрокиШаблона", "ИдентификаторТаблицы" и "МассивДанныхТаблицы".
//  Параметры	 - Структура - Структура с данными о форме, открывшей редактирование таблицы приёма.
//
Процедура РедактированиеТаблицыШаблоновДокументаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТаблицы		= Параметры.ИдентификаторТаблицы;
	ИдентификаторСтрокиШаблона	= Параметры.ИдентификаторСтрокиШаблона;
	ПараметрыТаблицШаблонов		= Параметры.Форма.ПараметрыТаблицШаблонов;
	ПараметрыТаблицы			= Параметры.ПараметрыТаблицы;
	
	ОбновляемыеТаблицы = Параметры.ИдентификаторыВложенныхТаблиц;
	ОбновляемыеТаблицы.Добавить(ИдентификаторТаблицы);
	
	Для Каждого ОбновляемаяТаблица Из ОбновляемыеТаблицы Цикл
		ОтборПараметрыТаблицыШаблонов = Новый Структура("ИдентификаторТаблицы, ИдентификаторСтрокиШаблона", ОбновляемаяТаблица, ИдентификаторСтрокиШаблона);
		Для Каждого СтрокаТаблицы Из ПараметрыТаблицШаблонов.НайтиСтроки(ОтборПараметрыТаблицыШаблонов) Цикл
			ПараметрыТаблицШаблонов.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтруктураПараметра Из Результат.МассивДанныхТаблицы Цикл
		НоваяСтрока = ПараметрыТаблицШаблонов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметра);
		НоваяСтрока.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона;
	КонецЦикла;
	
	РаботаСШаблонамиHTMLКлиентСервер.ОбновитьТекстHTMLТаблицШаблонов(Параметры.Форма, ИдентификаторСтрокиШаблона, ИдентификаторТаблицы, ПараметрыТаблицы);
	Параметры.Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОбработатьНажатиеКнопкиРедактированияВложеннойТаблицы(Форма, ИдентификаторСтрокиШаблона, ИдентификаторТаблицы, ИдентификаторСтроки) Экспорт
	
	МассивДанныхТаблицы = Новый Массив;
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Форма.Параметры.ТекстШаблона);
	ЭлементРедактируемойТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдентификаторТаблицы, , "data-bit-dyntable-id")[0];
	
	СтрокиПараметров = Новый Массив;
	ЗаполнитьПараметрыТаблицыСтроки(СтрокиПараметров, Форма.ТаблицаПараметров, ИдентификаторСтроки, ИдентификаторТаблицы, ЭлементРедактируемойТаблицы);
	
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		СтруктураПараметра = Новый Структура("НомерСтрокиТаблицы, Параметр, Значение, ИдентификаторТаблицы, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, СтрокаПараметра);
		МассивДанныхТаблицы.Добавить(СтруктураПараметра);
	КонецЦикла;
	
	ПараметрыТаблицы = Новый Массив;
	
	ДополнитьПараметрамиТаблицы(ПараметрыТаблицы, ЭлементРедактируемойТаблицы, Форма.ТаблицаПараметров, ИдентификаторСтрокиШаблона);
	
	ОсновнойВладелец = Форма.ВладелецФормы;
	Пока ОсновнойВладелец.ИмяФормы = Форма.ИмяФормы Цикл
		ОсновнойВладелец = ОсновнойВладелец.ВладелецФормы;
	КонецЦикла;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПараметрыТаблицы",					ПараметрыТаблицы);
	Параметры.Вставить("МассивДанныхТаблицы",				МассивДанныхТаблицы);
	Параметры.Вставить("ИдентификаторТаблицыШаблонов",		ИдентификаторТаблицы);
	Параметры.Вставить("ТекстШаблона",						Форма.Параметры.ТекстШаблона);
	Параметры.Вставить("КешЗначенийВыбора",					Форма.Параметры.КешЗначенийВыбора);
	Параметры.Вставить("ИдентификаторСтрокиШаблона",		ИдентификаторСтрокиШаблона);
	Параметры.Вставить("КешЗависимыхПараметров",			Форма.КешЗависимыхПараметров);
	Параметры.Вставить("Документ",							ОсновнойВладелец.Объект);
	Параметры.Вставить("ИдентификаторРодительскойСтроки",	ИдентификаторСтроки);
	Параметры.Вставить("ЭталонныеСтрокиТаблиц",				Форма.Параметры.ЭталонныеСтрокиТаблиц);
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ПараметрыТаблицы",					ПараметрыТаблицы);
	ПараметрыЗакрытия.Вставить("ИдентификаторСтрокиШаблона",		ИдентификаторСтрокиШаблона);
	ПараметрыЗакрытия.Вставить("ИдентификаторТаблицы",				ИдентификаторТаблицы);
	ПараметрыЗакрытия.Вставить("ИдентификаторСтроки",				ИдентификаторСтроки);
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеВложеннойТаблицыШаблоновДокументаЗавершение", Форма, ПараметрыЗакрытия);
	
	ОткрытьФорму("Документ.Прием.Форма.РедактированиеТаблицыШаблона", Параметры, Форма,,,,Оповещение);
	
КонецПроцедуры

Процедура РедактированиеВложеннойТаблицыШаблоновДокументаЗавершение(Результат, Параметры, ПолеHTMLОсмотр, ПараметрыТаблицШаблонов, ИдентификаторРодительскойСтроки, ТекстШаблона, ЭталонныеСтрокиТаблиц) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТаблицы			= Параметры.ИдентификаторТаблицы;
	ИдентификаторСтрокиШаблона		= Параметры.ИдентификаторСтрокиШаблона;
	ПараметрыТаблицы				= Параметры.ПараметрыТаблицы;
	ИдентификаторСтроки				= Параметры.ИдентификаторСтроки;
	
	ДокументHTMLШаблона = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона);
	ТаблицаРезультат = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTMLШаблона, ИдентификаторТаблицы, , "data-bit-dyntable-id")[0];
	ТаблицаИзШаблона = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона), ИдентификаторТаблицы, , "data-bit-dyntable-id")[0];
	
	СтрокиПараметров = Новый Массив;
	ЗаполнитьПараметрыТаблицыСтроки(СтрокиПараметров, ПараметрыТаблицШаблонов, ИдентификаторСтроки, ИдентификаторТаблицы, ТаблицаРезультат);
	
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		ПараметрыТаблицШаблонов.Удалить(СтрокаПараметра);
	КонецЦикла;
	
	Для Каждого СтруктураПараметра Из Результат.МассивДанныхТаблицы Цикл
		НоваяСтрока = ПараметрыТаблицШаблонов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметра);
		НоваяСтрока.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодительскойСтроки) Тогда
			НоваяСтрока.ИдентификаторРодительскойСтроки = ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСШаблонамиHTMLКлиентСервер.ЗаполнитьТаблицыШаблоновДокументаHTML(ПараметрыТаблицШаблонов, ТаблицаРезультат, ЭталонныеСтрокиТаблиц, Истина, ИдентификаторСтрокиШаблона, , ПараметрыТаблицы, ИдентификаторСтроки);
	РаботаСШаблонамиHTMLКлиентСервер.РекурсивноЗаполнитьВложенныеТаблицы(ПараметрыТаблицШаблонов, ТаблицаРезультат, ТаблицаИзШаблона, ИдентификаторСтрокиШаблона, ПараметрыТаблицы, ИдентификаторСтроки, ИдентификаторТаблицы, ЭталонныеСтрокиТаблиц, Истина);
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПолеHTMLОсмотр);
	ЭлементСтроки = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдентификаторСтроки, "tr", "data-bit-dyntable-tr-id")[0];
	ЭлементТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементСтроки, ИдентификаторТаблицы, "table", "data-bit-dyntable-id")[0];
	ЭлементТаблицы.РодительскийУзел.ЗаменитьДочерний(ДокументHTML.ИмпортироватьУзел(ТаблицаРезультат, Истина), ЭлементТаблицы);
	ПолеHTMLОсмотр = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецПроцедуры

Процедура РекурсивноЗаполнитьПараметрыТаблицыСтроки(ТаблицаПараметров, МассивДанныхТаблицы, ИдентификаторыВложенныхТаблиц, ИдентификаторСтроки, ИдентификаторТаблицы)
	
	ИдентификаторыРодительскихСтрок = Новый Массив;
	
	ОтборПараметрыТаблицыШаблонов = Новый Структура("ИдентификаторРодительскойСтроки, ИдентификаторТаблицы", ИдентификаторСтроки, ИдентификаторТаблицы);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПараметров.НайтиСтроки(ОтборПараметрыТаблицыШаблонов) Цикл
		СтруктураПараметра = Новый Структура("НомерСтрокиТаблицы, Параметр, Значение, ИдентификаторТаблицы, ИдентификаторСтроки, ИдентификаторРодительскойСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, СтрокаТаблицы);
		МассивДанныхТаблицы.Добавить(СтруктураПараметра);
		
		Если ЗначениеЗаполнено(СтруктураПараметра.ИдентификаторСтроки)
			И ИдентификаторыРодительскихСтрок.Найти(СтруктураПараметра.ИдентификаторСтроки) = Неопределено
		Тогда
			ИдентификаторыРодительскихСтрок.Добавить(СтруктураПараметра.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ВложенныеТаблицы = Новый Массив;
	Для Каждого ИдентификаторРодительскойСтроки Из ИдентификаторыРодительскихСтрок Цикл
		Для Каждого СтрокаТаблицы Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторРодительскойСтроки", ИдентификаторРодительскойСтроки)) Цикл
			Если ИдентификаторыВложенныхТаблиц.Найти(СтрокаТаблицы.ИдентификаторТаблицы) = Неопределено Тогда
				ИдентификаторыВложенныхТаблиц.Добавить(СтрокаТаблицы.ИдентификаторТаблицы);
				ВложенныеТаблицы.Добавить(Новый Структура("ИдентификаторТаблицы, ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторТаблицы, ИдентификаторРодительскойСтроки));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ВложеннаяТаблица Из ВложенныеТаблицы Цикл
		РекурсивноЗаполнитьПараметрыТаблицыСтроки(ТаблицаПараметров, МассивДанныхТаблицы, ИдентификаторыВложенныхТаблиц, ВложеннаяТаблица.ИдентификаторСтроки, ВложеннаяТаблица.ИдентификаторТаблицы)
	КонецЦикла;
	
КонецПроцедуры

Процедура РекурсивноУдалитьПараметрыТаблицыСтроки(ТаблицаПараметров, ОбновляемыеТаблицы, ИдентификаторРодительскойСтроки)
	
	ИдентификаторыСтрок = Новый Массив;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторРодительскойСтроки", ИдентификаторРодительскойСтроки)) Цикл
		Если ОбновляемыеТаблицы.Найти(СтрокаПараметра.ИдентификаторТаблицы) <> Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаПараметра);
			Если ИдентификаторыСтрок.Найти(СтрокаПараметра.ИдентификаторСтроки) = Неопределено Тогда
				ИдентификаторыСтрок.Добавить(СтрокаПараметра.ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПараметров.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		РекурсивноУдалитьПараметрыТаблицыСтроки(ТаблицаПараметров, ОбновляемыеТаблицы, ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыТаблицыСтроки(СтрокиПараметров, ТаблицаПараметров, ИдентификаторРодительскойСтроки, ИдентификаторТаблицы = Неопределено, ЭлементТаблицы = Неопределено)
	
	ИдентификаторыСтрок = Новый Массив;
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторРодительскойСтроки", ИдентификаторРодительскойСтроки)) Цикл
		Если ИдентификаторТаблицы = Неопределено
			Или ИдентификаторТаблицы = СтрокаПараметра.ИдентификаторТаблицы
			Или ЭлементТаблицы <> Неопределено
				И ПараметрНеэталоннойСтрокиМногострочнойТаблицыВерхнегоУровня(ЭлементТаблицы, ИдентификаторТаблицы, СтрокаПараметра.ИдентификаторТаблицы)
		Тогда
			СтрокиПараметров.Добавить(СтрокаПараметра);
			Если ИдентификаторыСтрок.Найти(СтрокаПараметра.ИдентификаторСтроки) = Неопределено Тогда
				ИдентификаторыСтрок.Добавить(СтрокаПараметра.ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ЗаполнитьПараметрыТаблицыСтроки(СтрокиПараметров, ТаблицаПараметров, ИдентификаторСтроки, , ЭлементТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрНеэталоннойСтрокиМногострочнойТаблицыВерхнегоУровня(ЭлементТаблицы, ИдентификаторТаблицы, ИдентификаторТаблицыПараметра) Экспорт
	
	ЭлементыТаблицыПараметра = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементТаблицы, ИдентификаторТаблицыПараметра, "table", "data-bit-dyntable-id");
	
	Если ЭлементыТаблицыПараметра.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементТаблицыПараметра = ЭлементыТаблицыПараметра[0];
	СтрокаТаблицы = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ЭлементТаблицыПараметра, "tr");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РодительскаяТаблицаТаблицыПараметра = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(СтрокаТаблицы, "table");
	Если РодительскаяТаблицаТаблицыПараметра = Неопределено
		Или РодительскаяТаблицаТаблицыПараметра.ПолучитьАтрибут("data-bit-dyntable-id") <> ИдентификаторТаблицы
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НомерЭталоннойСтроки = РаботаСШаблонамиHTML.НомерЭталоннойСтрокиТаблицыШаблонов(ИдентификаторТаблицы);
	
	Если НомерЭталоннойСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат СтрокаТаблицы.ИндексСтроки <> НомерЭталоннойСтроки - 1;
	
КонецФункции

// Скопировать составные фразы от другого владельца.
//
// Параметры:
//  Объект	 - ПланВидовХарактеристикСсылка.ПараметрыHTML, СправочникСсылка.ПакетыСоставныхФраз - получатель
//  Список	 - ТаблицаФормы	 - список фраз.
//
Процедура СкопироватьСоставныеФразы(Объект, Список) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Список", Список);
	СтруктураПараметров.Вставить("Объект", Объект);
	ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьСоставныеФразы_ВыборДонораЗавершение",РаботаСШаблонамиHTMLКлиент,СтруктураПараметров);
	
	// Выбор донора
	ОткрытьФорму("ПланВидовХарактеристик.ПараметрыHTML.ФормаВыбора",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура СкопироватьСоставныеФразы_ВыборДонораЗавершение(Донор, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Донор) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьСоставныеФразы_Завершение",РаботаСШаблонамиHTMLКлиент,Параметры);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Донор", Донор);
		СтруктураПараметров.Вставить("Объект", Параметры.Объект);
		ОткрытьФорму("ПланВидовХарактеристик.ПараметрыHTML.Форма.КопированиеФразИзДругогоПараметра",СтруктураПараметров,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьСоставныеФразы_Завершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		Параметры.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьНажатиеКнопкиРедактированияКартинки(Форма, ИдентификаторСтрокиШаблона, Контейнер, соотвКешИзображенийШаблонов)
	
	АдресРисунка = Неопределено;
	УзелКартинки = Контейнер.lastChild;
	
	Попытка
		УИДРисунка = Новый УникальныйИдентификатор(УзелКартинки.dataset.bitDrawId);
	Исключение
		Возврат;
	КонецПопытки;
	
	СтрокаШаблона = Форма.Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
	
	СтрокиРисунка = Форма.РисункиКартинок.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, ИдентификаторРисунка", ИдентификаторСтрокиШаблона, УИДРисунка));
	Если СтрокиРисунка.Количество() > 0 Тогда
		АдресРисунка = СтрокиРисунка[0].АдресРисунка;
	КонецЕсли;
	
	ДанныеКартинки = соотвКешИзображенийШаблонов.Получить(УзелКартинки.id);
	Если ДанныеКартинки = Неопределено Тогда
		Попытка
			УИДИзображения = Новый УникальныйИдентификатор(УзелКартинки.id);
		Исключение
			Возврат;
		КонецПопытки;
		
		СтрокиДобавленногоИзображения = Форма.ДобавленныеИзображения.НайтиСтроки(Новый Структура("ИдентификаторИзображения, ИдентификаторСтрокиШаблона", УИДИзображения, ИдентификаторСтрокиШаблона));
		Если СтрокиДобавленногоИзображения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ДанныеКартинки = Новый Структура("АдресВХранилище, Расширение", СтрокиДобавленногоИзображения[0].АдресИзображения, СтрокиДобавленногоИзображения[0].Расширение);
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДанныеКартинки",		ДанныеКартинки);
	Параметры.Вставить("АдресРисунка",			АдресРисунка);
	Параметры.Вставить("УИДФормы",				Форма.УникальныйИдентификатор);
	Параметры.Вставить("ИдентификаторРисунка",	УИДРисунка);
	Параметры.Вставить("ШаблонПриема",			СтрокаШаблона.ШаблонПриема);
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона);
	ПараметрыЗакрытия.Вставить("ИдентификаторРисунка",		 УИДРисунка);
	ПараметрыЗакрытия.Вставить("ИдентификаторКонтейнера",	 Контейнер.getAttribute("data-bit-container-draw-id"));
	ПараметрыЗакрытия.Вставить("Форма",						 Форма);
	Оповещение = Новый ОписаниеОповещения("РедактированиеКартинкиЗавершение", РаботаСШаблонамиHTMLКлиент, ПараметрыЗакрытия);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеКартинки", Параметры, Форма,,,, Оповещение);
	
КонецПроцедуры

// Обработчик завершения редактирования картинки.
//
// Параметры:
//  Результат	 - Структура - Данные рисунка.
//  Параметры	 - Структура - Структура с данными о форме, открывшей редактирование картинки.
//
Процедура РедактированиеКартинкиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРисунков = Параметры.Форма.РисункиКартинок;
	
	СтрокаРисунка = Неопределено;
	СтрокиРисунка = ТаблицаРисунков.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, ИдентификаторРисунка", Параметры.ИдентификаторСтрокиШаблона, Параметры.ИдентификаторРисунка));
	
	Если СтрокиРисунка.Количество() > 0 Тогда
		СтрокаРисунка = СтрокиРисунка[0];
	ИначеЕсли Результат <> "" Тогда
		СтрокаРисунка = ТаблицаРисунков.Добавить();
		СтрокаРисунка.ИдентификаторСтрокиШаблона = Параметры.ИдентификаторСтрокиШаблона;
		СтрокаРисунка.ИдентификаторРисунка = Параметры.ИдентификаторРисунка;
	КонецЕсли;
	
	Если СтрокаРисунка <> Неопределено Тогда
		Если Результат = "" Тогда
			ТаблицаРисунков.Удалить(СтрокаРисунка);
		Иначе
			СтрокаРисунка.АдресРисунка = Результат;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСШаблонамиHTMLКлиентСервер.ОбновитьТекстHTMLКонтейнераРисунка(Параметры.Форма, Параметры.ИдентификаторСтрокиШаблона, Параметры.ИдентификаторКонтейнера, Параметры.ИдентификаторРисунка, Результат);
	
	Параметры.Форма.Модифицированность = Истина;
	
КонецПроцедуры

Асинх Функция ОбработатьНажатиеКнопкиИзмененияИзображения(УникальныйИдентификатор, Кнопка, ДанныеФормыПриема = Неопределено) Экспорт
	
	Контейнер = Кнопка.parentNode.parentNode;
	УдалениеИзображения = Кнопка.hasAttribute("data-bit-selected-img-action-delete");
	
	Если УдалениеИзображения Тогда
		РаботаСШаблонамиHTMLКлиентСервер.ИзменитьОтображениеЭлементовКонтейнераДобавленияИзображения(Контейнер);
		Если ДанныеФормыПриема = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если ДанныеФормыПриема = Неопределено Тогда
			Возврат ВыборФайлаНаДиске(Контейнер, УникальныйИдентификатор);
		КонецЕсли;
		
		ДанныеВыбранногоФайла = Неопределено;
		
		сзКнопки = Новый СписокЗначений();
		сзКнопки.Добавить("ФайлНаДиске", "Файл на диске");
		сзКнопки.Добавить("ПрикрепленныйФайл", "Прикрепленный файл");
		сзКнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Ждать ВопросАсинх("Выберите источник загрузки изображения", сзКнопки);
		Если Ответ = "ФайлНаДиске" Тогда
			ДобавитьВыбранноеИзображение(Ждать ВыборФайлаНаДиске(Контейнер, УникальныйИдентификатор), ДанныеФормыПриема, УдалениеИзображения, Контейнер);
		ИначеЕсли Ответ = "ПрикрепленныйФайл" Тогда
			ВыборПрикрепленногоФайла(УникальныйИдентификатор, ДанныеФормыПриема, УдалениеИзображения, Контейнер);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ДополнитьПараметрамиТаблицы(ПараметрыТаблицы, Таблица, ТаблицаПараметров, ИдентификаторСтрокиШаблона)
	
	ТегиПараметров = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТегиПараметров();
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона)) Цикл
		УидПараметра = СтрокаПараметра.СтрокаУидПараметра;
		Если РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Таблица, УидПараметра, ТегиПараметров).Количество() > 0 Тогда
			СтруктураПараметра = Новый Структура("Значение, Параметр, Представление, ФорматнаяСтрока, СтрокаУидПараметра, НеРедактируетсяПользователем, ДопустимыеЗначения, Назначение, ДопПараметрыПоНазначению");
			ЗаполнитьЗначенияСвойств(СтруктураПараметра, СтрокаПараметра);
			ПараметрыТаблицы.Добавить(СтруктураПараметра);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаВыбораТипаДоговора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.ДоговорСКлиентом") Тогда
		ЗначениеОтбора = Новый Структура("Клиент", ДополнительныеПараметры.Клиент);
		ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Документ.ДоговорСКлиентом.ФормаВыбора", ПараметрыФормыВыбора, ДополнительныеПараметры.Форма, , , , ДополнительныеПараметры.ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.СоглашенияСтрахования") Тогда
		ОткрытьФорму("Справочник.СоглашенияСтрахования.ФормаВыбора", ПараметрыФормыВыбора, ДополнительныеПараметры.Форма, , , , ДополнительныеПараметры.ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.СтраховыеПолисы") Тогда
		ЗначениеОтбора = Новый Структура("Владелец", ДополнительныеПараметры.Клиент);
		ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.СтраховыеПолисы.ФормаВыбора", ПараметрыФормыВыбора, ДополнительныеПараметры.Форма, , , , ДополнительныеПараметры.ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьHTMLвPDF(HtmlНаПреобразование, Адресwkhtmltopdf, ВернутьПуть = Истина, РежимPDF_A = Ложь) Экспорт
	
	ВыполнениеНаLinux = ОбщегоНазначенияКлиент.ЭтоLinuxКлиент();
	Возврат РаботаСШаблонамиHTMLКлиентСервер.ПреобразоватьHTMLвPDF(HtmlНаПреобразование, ВыполнениеНаLinux, ВернутьПуть, Адресwkhtmltopdf, РежимPDF_A);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкорректироватьДанныеПараметраПоНазначению(Форма, СтрокаПараметра, СтандартнаяОбработка, НачальноеЗначение, ТипЗначенияПараметра, ДеревоЗначенийВыбора, ВидКлассификатора)
	
	Если Не СтрокаПараметра.Свойство("Назначение")
		Или Не ЗначениеЗаполнено(СтрокаПараметра.Назначение)
	Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаПараметра.Назначение = ПредопределенноеЗначение("Перечисление.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра") Тогда
		СкорректироватьДанныеЗначенияВитальногоПараметра(Форма, СтрокаПараметра, СтандартнаяОбработка, НачальноеЗначение, ТипЗначенияПараметра, ДеревоЗначенийВыбора, ВидКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьДанныеЗначенияВитальногоПараметра(Форма, СтрокаПараметра, СтандартнаяОбработка, НачальноеЗначение, ТипЗначенияПараметра, ДеревоЗначенийВыбора, ВидКлассификатора)
	
	Если ТипЗнч(СтрокаПараметра.ДопПараметрыПоНазначению) <> Тип("Структура")
		Или Не СтрокаПараметра.ДопПараметрыПоНазначению.Свойство("ПараметрКлассификации")
	Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКлассификации = СтрокаПараметра.ДопПараметрыПоНазначению.ПараметрКлассификации;
	
	ОтборПараметра = Новый Структура;
	ОтборПараметра.Вставить("Параметр", ПараметрКлассификации);
	ОтборПараметра.Вставить("ИдентификаторСтрокиШаблона", СтрокаПараметра.ИдентификаторСтрокиШаблона);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПараметра, "НомерСтроки") Тогда
		ОтборПараметра.Вставить("НомерСтроки", СтрокаПараметра.НомерСтроки);
	КонецЕсли;
	
	СтрокиПараметраОпределяющегоТипЗначения = Форма.ТаблицаПараметров.НайтиСтроки(ОтборПараметра);
	
	Если СтрокиПараметраОпределяющегоТипЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраОпределяющегоТипЗначения = СтрокиПараметраОпределяющегоТипЗначения[0].Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеПараметраОпределяющегоТипЗначения) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Параметр ""%1"" не заполнен'"), СтрокиПараметраОпределяющегоТипЗначения[0].Параметр));
		Возврат;
	КонецЕсли;
	
	СтруктураТипа = ИнтеграцияЕГИСЗВызовСервера.ПолучитьСтруктуруТипаЗначенияВитальногоПараметра(ЗначениеПараметраОпределяющегоТипЗначения);
	
	Если ТипЗнч(СтруктураТипа.Тип) = Тип("Тип") Тогда
		ТипЗначенияПараметра = Новый ОписаниеТипов(ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(СтруктураТипа.Тип));
		ВидКлассификатора = СтруктураТипа.ВидКлассификатора;
		ДеревоЗначенийВыбора = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗависимыеПараметрыПоНазначению(Форма, СтрокаТекущегоПараметра, Знач ДополнительныеПараметры)
	
	ОтборПараметра = Новый Структура;
	ОтборПараметра.Вставить("ИдентификаторСтрокиШаблона", СтрокаТекущегоПараметра.ИдентификаторСтрокиШаблона);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТекущегоПараметра, "НомерСтроки") Тогда
		ОтборПараметра.Вставить("НомерСтроки", СтрокаТекущегоПараметра.НомерСтроки);
	КонецЕсли;
	
	Для Каждого СтрокаПараметра Из Форма.ТаблицаПараметров.НайтиСтроки(ОтборПараметра) Цикл
		Если  СтрокаПараметра.Свойство("Назначение")
			И СтрокаПараметра.Назначение = ПредопределенноеЗначение("Перечисление.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра") 
		Тогда
			ОбновитьЗависимыеПараметрыПоКлассификацииВитальногоПараметра(СтрокаПараметра, СтрокаТекущегоПараметра, ДополнительныеПараметры);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗависимыеПараметрыПоКлассификацииВитальногоПараметра(СтрокаВитальногоПараметра, СтрокаПараметраКлассификации, ДополнительныеПараметры)
	
	Если ТипЗнч(СтрокаВитальногоПараметра.ДопПараметрыПоНазначению) <> Тип("Структура")
		Или Не СтрокаВитальногоПараметра.ДопПараметрыПоНазначению.Свойство("ПараметрКлассификации")
		Или СтрокаВитальногоПараметра.ДопПараметрыПоНазначению.ПараметрКлассификации <> СтрокаПараметраКлассификации.Параметр
	Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТипа = ИнтеграцияЕГИСЗВызовСервера.ПолучитьСтруктуруТипаЗначенияВитальногоПараметра(СтрокаПараметраКлассификации.Значение);
	
	Если ТипЗнч(СтрокаВитальногоПараметра.Значение) <> СтруктураТипа.Тип
		Или ЗначениеЗаполнено(СтруктураТипа.ВидКлассификатора)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВитальногоПараметра.Значение, "ВидКлассификатора") <> СтруктураТипа.ВидКлассификатора
	Тогда
		ДополнительныеПараметры.Параметр = СтрокаВитальногоПараметра.Параметр;
		ДополнительныеПараметры.СтрокаПараметра = СтрокаВитальногоПараметра;
		ДополнительныеПараметры.Вставить("ОчисткаПараметра", Истина);
		
		ВыбораЗначенияПараметраHTMLЗавершение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Асинх Функция ВыборФайлаНаДиске(Контейнер, УникальныйИдентификатор)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = ПолучитьФильтрИзображений();
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Если Ждать ДиалогОткрытияФайла.ВыбратьАсинх() = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеВыбранногоИзображения(ДиалогОткрытияФайла.ПолноеИмяФайла, УникальныйИдентификатор, Контейнер);
	
КонецФункции

Процедура ВыборПрикрепленногоФайла(УникальныйИдентификатор, ДанныеФормыПриема, УдалениеИзображения, Контейнер)
	
	ДопустимыеРасширения = Новый Массив;
	Для Каждого ГруппаИРасширения Из РасширенияФайловИзображений() Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеРасширения, ГруппаИРасширения.Расширения, Истина);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("ДанныеФормыПриема, УдалениеИзображения, Контейнер, УникальныйИдентификатор", ДанныеФормыПриема, УдалениеИзображения, Контейнер, УникальныйИдентификатор);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораПрикрепленногоФайла", РаботаСШаблонамиHTMLКлиент, ДополнительныеПараметры);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("Объект, Расширение", ДанныеФормыПриема.Форма.Объект.Ссылка, ДопустимыеРасширения));
	ПараметрыФормыВыбора.Вставить("Предпросмотр", Истина);
	
	ОткрытьФорму("Справочник.ХранилищеДополнительнойИнформации.ФормаВыбора", ПараметрыФормыВыбора, ДанныеФормыПриема.Форма, УникальныйИдентификатор, , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПослеВыбораПрикрепленногоФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПутьКФайлу = РаботаСФайламиКлиент.ОткрытьФайл(Результат, , , Истина);
		ДанныеВыбранногоИзображения = ДанныеВыбранногоИзображения(ПутьКФайлу, ДополнительныеПараметры.УникальныйИдентификатор, ДополнительныеПараметры.Контейнер);
		ДобавитьВыбранноеИзображение(ДанныеВыбранногоИзображения, ДополнительныеПараметры.ДанныеФормыПриема, ДополнительныеПараметры.УдалениеИзображения, ДополнительныеПараметры.Контейнер);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьФильтрИзображений()
	
	ГруппыФильтров = Новый Массив;
	ШаблонГруппыФильтра = "%1 (%2)|%2|";
	
	ВсеРасширения = Новый Массив;
	Для Каждого ГруппаИРасширения Из РасширенияФайловИзображений() Цикл
		
		ФильтрыРасширений = Новый Массив;
		Для Каждого Расширение Из ГруппаИРасширения.Расширения Цикл
			ФильтрРасширения = СтрШаблон("*%1", Расширение);
			ФильтрыРасширений.Добавить(ФильтрРасширения);
			ВсеРасширения.Добавить(ФильтрРасширения);
		КонецЦикла;
		
		ГруппыФильтров.Добавить(СтрШаблон(ШаблонГруппыФильтра, ГруппаИРасширения.Группа, СтрСоединить(ФильтрыРасширений, ";")));
	КонецЦикла;
	
	ГруппыФильтров.Вставить(0, СтрШаблон(ШаблонГруппыФильтра, "Все картинки", СтрСоединить(ВсеРасширения, ";")));
	
	Возврат СтрСоединить(ГруппыФильтров, "");
	
КонецФункции

Функция РасширенияФайловИзображений()
	
	Изображения = Новый Массив;
	
	Изображения.Добавить(Новый Структура("Группа, Расширения", "BMP",	ОбщегоНазначенияКлиентСервер.НовыйМассив(".bmp", ".dib", ".rle")));
	Изображения.Добавить(Новый Структура("Группа, Расширения", "JPEG",	ОбщегоНазначенияКлиентСервер.НовыйМассив(".jpg", ".jpeg")));
	Изображения.Добавить(Новый Структура("Группа, Расширения", "GIF",	ОбщегоНазначенияКлиентСервер.НовыйМассив(".gif")));
	Изображения.Добавить(Новый Структура("Группа, Расширения", "PNG",	ОбщегоНазначенияКлиентСервер.НовыйМассив(".png")));
	Изображения.Добавить(Новый Структура("Группа, Расширения", "ICON",	ОбщегоНазначенияКлиентСервер.НовыйМассив(".ico")));
	
	Возврат Изображения;
	
КонецФункции

Функция ДанныеВыбранногоИзображения(ПолноеИмяФайла, УникальныйИдентификатор, Контейнер)
	
	// Изображение должно находиться во временном хранилище на сервере
	Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(ПолноеИмяФайла);
	ДобавленноеИзображение = РаботаСШаблонамиHTML.ПолучитьАдресДобавленногоИзображения(Новый ДвоичныеДанные(ПолноеИмяФайла), УникальныйИдентификатор);
	РаботаСШаблонамиHTMLКлиентСервер.ИзменитьОтображениеЭлементовКонтейнераДобавленияИзображения(Контейнер, ДобавленноеИзображение);
	
	Возврат Новый Структура("АдресВХранилище, Расширение", ДобавленноеИзображение, Расширение);
	
КонецФункции

Функция ДобавитьВыбранноеИзображение(ДанныеВыбранногоИзображения, ДанныеФормыПриема, УдалениеИзображения, Контейнер)
	
	Если ДанныеВыбранногоИзображения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДобавленныеИзображения = ДанныеФормыПриема.Форма.ДобавленныеИзображения;
	РисункиКартинок = ДанныеФормыПриема.Форма.РисункиКартинок;
	
	Изображение = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьЭлементДобавляемогоИзображения(Контейнер);
	ИдентификаторИзображения = Новый УникальныйИдентификатор(Изображение.id);
	СтрокиДобавленногоИзображения = ДобавленныеИзображения.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, ИдентификаторИзображения", ДанныеФормыПриема.ИдентификаторСтрокиШаблона, ИдентификаторИзображения));
	
	Если УдалениеИзображения Тогда
		Если СтрокиДобавленногоИзображения.Количество() > 0 Тогда
			ДобавленныеИзображения.Удалить(СтрокиДобавленногоИзображения[0]);
		КонецЕсли;
	Иначе
		Если СтрокиДобавленногоИзображения.Количество() > 0 Тогда
			СтрокаДобавленногоИзображения = СтрокиДобавленногоИзображения[0];
		Иначе
			СтрокаДобавленногоИзображения = ДобавленныеИзображения.Добавить();
			СтрокаДобавленногоИзображения.ИдентификаторСтрокиШаблона = ДанныеФормыПриема.ИдентификаторСтрокиШаблона;
			СтрокаДобавленногоИзображения.ИдентификаторИзображения = ИдентификаторИзображения;
		КонецЕсли;
		
		СтрокаДобавленногоИзображения.АдресИзображения = ДанныеВыбранногоИзображения.АдресВХранилище;
		СтрокаДобавленногоИзображения.Расширение = ДанныеВыбранногоИзображения.Расширение;
	КонецЕсли;
	
	ИдентификаторРисунка = Изображение.getAttribute("data-bit-draw-id");
	Если ИдентификаторРисунка <> Неопределено Тогда
		// При любом изменении добавляемого изображения (удаление/замена) следует удалить рисунок
		Для Каждого СтрокаРисунка Из РисункиКартинок.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, ИдентификаторРисунка", ДанныеФормыПриема.ИдентификаторСтрокиШаблона, Новый УникальныйИдентификатор(ИдентификаторРисунка))) Цикл
			РисункиКартинок.Удалить(СтрокаРисунка);
		КонецЦикла;
		ИдентификаторКонтейнера = Изображение.parentElement.getAttribute("data-bit-container-draw-id");
		РаботаСШаблонамиHTMLКлиентСервер.ОбновитьТекстHTMLКонтейнераРисунка(ДанныеФормыПриема.Форма, ДанныеФормыПриема.ИдентификаторСтрокиШаблона, ИдентификаторКонтейнера, ИдентификаторРисунка, "");
	КонецЕсли;
	
	ДанныеФормыПриема.Форма.Модифицированность = Истина;
	
КонецФункции

#КонецОбласти