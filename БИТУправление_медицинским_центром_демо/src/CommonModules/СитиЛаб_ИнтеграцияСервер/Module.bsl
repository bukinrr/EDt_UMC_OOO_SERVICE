 
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьДляЛабораторийСитилабНастройкиИнформированияКлиентов() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СитиЛаб_НастройкиВзаимодействия = РегистрыСведений.СитиЛаб_НастройкиВзаимодействия.СоздатьНаборЗаписей();
	СитиЛаб_НастройкиВзаимодействия.Прочитать();
	
	Если СитиЛаб_НастройкиВзаимодействия.Выбран() Тогда
		Для Каждого Запись Из СитиЛаб_НастройкиВзаимодействия Цикл
			Запись.ИнформироватьКлиентовОСтатусеЗаказаПоEmail = Истина;
			Запись.ИнформироватьКлиентовОСтатусеЗаказаПоСМС = Истина;
		КонецЦикла;
		СитиЛаб_НастройкиВзаимодействия.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область СправочнаяИнформация

// Возвращает хранимые настройки взаимодействия с Ситилаб-лабораториями.
//
// Параметры:
//  Лаборатория 		- СправочникСсылка.Лаборатории - лаборатория, для которой получаем настройки.
//  СообщенияОбОшибках 	- Массив из Строка - содержит тексты ошибок, возникших при получении настроек.
//						- Неопределено
// 
// Возвращаемое значение:
//   - Неопределено, если настройки не записаны или не используются. 
//   - Структура - Настройки для работы филиала с Ситилаб-лабораториями.
//
Функция ПолучитьНастройкиВзаимодействия(Лаборатория, СообщенияОбОшибках = Неопределено) Экспорт
	
	НастройкиВзаимодействия = ЛабораторияСерверПовтИсп.ПолучитьНастройкиВзаимодействия_Унифицированно(Лаборатория, "СитиЛаб_НастройкиВзаимодействия");
	
	// Общая ошибка о том, что нет настройки или выключено её использование.
	Если НастройкиВзаимодействия = Неопределено Тогда
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщенияОбОшибках("ОтсутствуетНастройка", Лаборатория));
	КонецЕсли;
	
	Возврат НастройкиВзаимодействия;
	
КонецФункции

// Обновляет справочники Ситилаб-лабораторий.
//
// Параметры:
//  ОбновитьБезПроверкиДаты	 - Булево 
// 
// Возвращаемое значение:
//   - Булево - Истина, если были изменения в справочниках. 
//
Функция ОбновитьСправочники(ОбновитьБезПроверкиДаты = Ложь) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	АктуальныеЛаборатории = ПолучитьАктуальныеЛаборатории();
	
	Для Каждого Лаборатория Из АктуальныеЛаборатории Цикл
		ОбновитьСправочникиЛаборатории(Лаборатория, Истина, ЕстьИзменения);
	КонецЦикла;

	Возврат ЕстьИзменения;
	
КонецФункции

// Проверяет актуальность версий справочников и обновляет их при необходимости.
//
// Параметры:
//  Лаборатория			- СправочникСсылка.Лаборатории - лаборатория, для которой необходимо обновить справочники.
//  ТолькоУстаревшие	- Булево - Истина, если необходимо обновить только справочники с устаревшими версиями.
//  ЕстьИзменения	 	- Булево - Истина, если были изменения в справочниках.
//  СообщенияОбОшибках	- Массив из Строка - сюда помещаются ошибки, полученные в процедурах и функциях при обновлении.
//						- Неопределено
//
Процедура ОбновитьСправочникиЛаборатории(Лаборатория, ТолькоУстаревшие = Истина, ЕстьИзменения = Ложь,
	СообщенияОбОшибках = Неопределено)
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория, СообщенияОбОшибках);
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбновлениеСправочников(Лаборатория, НастройкиВзаимодействия, ТолькоУстаревшие, ЕстьИзменения, СообщенияОбОшибках);
	
	Если ЕстьИзменения Тогда
		ЗагрузкаПараметровЗабора(Лаборатория, СообщенияОбОшибках);
		ОпределитьИсключенныеИсследования(Лаборатория);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеСправочников(Лаборатория, НастройкиВзаимодействия, ТолькоУстаревшие = Истина,
	ЕстьИзменения = Ложь, СообщенияОбОшибках = Неопределено)
	
	МассивСправочники = ПолучитьНаименованияСправочников();
	
	ВерсииСправочниковЛИС = ПолучитьВерсииСправочниковЛИС(НастройкиВзаимодействия, СообщенияОбОшибках);
	
	Если ВерсииСправочниковЛИС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяСправочника Из МассивСправочники Цикл
		
		ВерсияМИС = ПолучитьВерсиюСправочникаМИС(Лаборатория, ИмяСправочника);
		ВерсияЛИС = ВерсииСправочниковЛИС.Получить(ИмяСправочника);
		
		Если ВерсияЛИС <> Неопределено И (Не ТолькоУстаревшие Или ВерсияМИС <> ВерсияЛИС) Тогда
			Если ОбновитьСправочник(Лаборатория, НастройкиВзаимодействия, ИмяСправочника, СообщенияОбОшибках) <> Неопределено Тогда
				СохранитьВерсиюСправочникаМИС(Лаборатория, ИмяСправочника, ВерсияЛИС);
				Если Не ЕстьИзменения Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаименованияСправочников()
	
	МассивСправочники = Новый Массив;
	
	// Клиники.
	МассивСправочники.Добавить("hospital");
	
	// Группы исследований.
	МассивСправочники.Добавить("department");
	
	// Исследования.
	МассивСправочники.Добавить("target");
	
	// Биоматериалы, они же контейнеры.
	МассивСправочники.Добавить("bioMaterial");
	
	// Тесты исследований.
	МассивСправочники.Добавить("test");
	
	// Услуги исследований.
	МассивСправочники.Добавить("service");
	
	// Прайслисты.
	МассивСправочники.Добавить("pricelist");
	
	// Пользовательские поля.
	МассивСправочники.Добавить("userField");
	МассивСправочники.Добавить("userDirectory");
	МассивСправочники.Добавить("userFieldGroups");
	
	// Стандартные поля.
	МассивСправочники.Добавить("stdField");
	
	// Номенклатура медицинских услуг.
	МассивСправочники.Добавить("medicalService");
	
	Возврат МассивСправочники;
	
КонецФункции

Функция ОбновитьСправочник(Лаборатория, НастройкиВзаимодействия, ИмяСправочника, СообщенияОбОшибках = Неопределено)
			
	ФайлСправочника = ПолучитьФайлСправочника(НастройкиВзаимодействия, ИмяСправочника, СообщенияОбОшибках);
	
	Если ФайлСправочника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлСправочника);
	
	КорневойОбъект = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Попытка
		КоличествоОбъектов = КорневойОбъект.Item.Количество();
		МассивОбъектов = КорневойОбъект.Item; 
	Исключение
		Попытка
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(КорневойОбъект.Item);
		Исключение
			Возврат Истина;
		КонецПопытки;
	КонецПопытки;
	
	Если ИмяСправочника = "hospital" Тогда
		
		// Заполняем HospitalId для загрузки прайслистов и цен.
		МассивHospitalId = Новый Массив;
		ИдентификаторЗаказчика = НастройкиВзаимодействия.ИдентификаторЗаказчика;	
		
		Для Каждого Элемент Из МассивОбъектов Цикл
			Если Элемент.Id = ИдентификаторЗаказчика Тогда
				Для Индекс_1 = 1 По Элемент.Hospitals.Количество() - 2 Цикл
					Для Индекс_2 = 1 По Элемент.Hospitals[Индекс_1].Hospital.Количество() - 2 Цикл
						StartDate = Элемент.Hospitals[Индекс_1].Hospital[Индекс_2].StartDate;
						EndDate = Элемент.Hospitals[Индекс_1].Hospital[Индекс_2].EndDate;
				
						Если Не ПериодДействияПрейскурантаАктуален(StartDate, EndDate) Тогда
							Продолжить;
						КонецЕсли;
						
						HospitalId = Элемент.Hospitals[Индекс_1].Hospital[Индекс_2].Id;
						Если МассивHospitalId.Найти(HospitalId) = Неопределено Тогда
							МассивHospitalId.Добавить(HospitalId);	
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписейСправочники = РегистрыСведений.СитиЛаб_Справочники.СоздатьНаборЗаписей();
		НаборЗаписейСправочники.Отбор.Лаборатория.Установить(Лаборатория);
		НаборЗаписейСправочники.Отбор.ИмяСправочника.Установить(ИмяСправочника);
		
		Для Каждого HospitalId Из МассивHospitalId Цикл
			НоваяЗаписьСправочники = НаборЗаписейСправочники.Добавить();
			НоваяЗаписьСправочники.Лаборатория = Лаборатория;
			НоваяЗаписьСправочники.ИмяСправочника = ИмяСправочника;
			НоваяЗаписьСправочники.Идентификатор = HospitalId;
		КонецЦикла;
		
		НаборЗаписейСправочники.Записать(Истина);
	
		Возврат Истина;
	ИначеЕсли ИмяСправочника = "service" Тогда
		
		// Заполняем услуги исследований и сроки выполнения.
		НаборЗаписейУслугиИсследований = РегистрыСведений.СитиЛаб_УслугиИсследований.СоздатьНаборЗаписей();
		НаборЗаписейУслугиИсследований.Отбор.Лаборатория.Установить(Лаборатория);
		
		Для Каждого Элемент Из МассивОбъектов Цикл
			
			СрокВыполненияОбычный = Элемент.Duration;
			СрокВыполненияСрочный = Элемент.UrgentDuration;
			
			Для Индекс = 1 По Элемент.Targets.Количество() - 2 Цикл
				НоваяЗаписьУслугиИсследований = НаборЗаписейУслугиИсследований.Добавить();
				НоваяЗаписьУслугиИсследований.Лаборатория = Лаборатория;
				НоваяЗаписьУслугиИсследований.Service = Элемент.Id;
				НоваяЗаписьУслугиИсследований.Target = Элемент.Targets[Индекс];
				
				Если Не ПустаяСтрока(СрокВыполненияОбычный) Тогда
					НоваяЗаписьУслугиИсследований.СрокВыполненияОбычный = СрокВыполненияОбычный;
				КонецЕсли;
				
				Если Не ПустаяСтрока(СрокВыполненияСрочный) Тогда
					НоваяЗаписьУслугиИсследований.СрокВыполненияСрочный = СрокВыполненияСрочный;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		НаборЗаписейУслугиИсследований.Записать(Истина);
		
		Возврат Истина;
	ИначеЕсли ИмяСправочника = "userField" Или ИмяСправочника = "stdField" Тогда
		
		// Заполняем параметры забора.
		НаборЗаписейПараметры = РегистрыСведений.СитиЛаб_ПараметрыЗабора.СоздатьНаборЗаписей();
		НаборЗаписейПараметры.Отбор.Лаборатория.Установить(Лаборатория);
		СтандартноеПоле = ИмяСправочника = "stdField";
		НаборЗаписейПараметры.Отбор.СтандартноеПоле.Установить(СтандартноеПоле);
		
		Для Каждого Элемент Из МассивОбъектов Цикл
			
			НоваяЗаписьПараметры = НаборЗаписейПараметры.Добавить();
			
			НоваяЗаписьПараметры.Лаборатория = Лаборатория;
			НоваяЗаписьПараметры.Идентификатор = Элемент.Id;
			
			НоваяЗаписьПараметры.Name = Элемент.Name;
			НоваяЗаписьПараметры.Code = Элемент.Code;
			
			Если ИмяСправочника = "userField" Тогда
				НоваяЗаписьПараметры.FieldType = Число(Элемент.FieldType);
				НоваяЗаписьПараметры.userDirectory = Элемент.userDirectory;
				НоваяЗаписьПараметры.maxLength = Число(Элемент.maxLength);
				НоваяЗаписьПараметры.regex = Элемент.regex;
				НоваяЗаписьПараметры.needTime = Булево(Элемент.needTime);
				НоваяЗаписьПараметры.strict = Булево(Элемент.strict);
				НоваяЗаписьПараметры.maxValue = Число(Элемент.maxValue);
				НоваяЗаписьПараметры.minValue = Число(Элемент.minValue);
				НоваяЗаписьПараметры.prec = Число(Элемент.prec);
			ИначеЕсли ИмяСправочника = "stdField" Тогда
				НоваяЗаписьПараметры.СтандартноеПоле = Истина;
				Если Элемент.Code = "PregnancyDuration" Или Элемент.Code = "CyclePeriod" Тогда
					НоваяЗаписьПараметры.FieldType = 2;
					Если Элемент.Code = "CyclePeriod" Тогда
						НоваяЗаписьПараметры.Name = НСтр("ru='Период цикла: 1-36 день цикла + 97 пременопауза, 98 постменопауза, 99 менопауза'");
					ИначеЕсли Элемент.Code = "PregnancyDuration" Тогда
						НоваяЗаписьПараметры.Name = НСтр("ru='Срок беременности в неделях'");
					КонецЕсли;
				Иначе
					НоваяЗаписьПараметры.FieldType = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписейПараметры.Записать(Истина);
		
		Возврат Истина;
	ИначеЕсли ИмяСправочника = "userDirectory" Тогда
		
		// Заполняем значения параметров забора.
		Для Каждого Элемент Из МассивОбъектов Цикл
			
			// Первый и последний элементы списка пустые, чтобы в XDTO всегда был список.
			Для Индекс = 1 По Элемент.Values.Количество() - 2 Цикл
				
				МенеджерЗаписиЗначенияПараметров = РегистрыСведений.СитиЛаб_ЗначенияПараметровЗабора.СоздатьМенеджерЗаписи();
				МенеджерЗаписиЗначенияПараметров.Лаборатория = Лаборатория;
				МенеджерЗаписиЗначенияПараметров.Идентификатор = Элемент.Id;
				МенеджерЗаписиЗначенияПараметров.Name = Элемент.Name;
				МенеджерЗаписиЗначенияПараметров.Code = Элемент.Code;
				МенеджерЗаписиЗначенияПараметров.propertyToSend = Элемент.PropertyToSend;
				МенеджерЗаписиЗначенияПараметров.vId = Элемент.Values[Индекс].Id;
				МенеджерЗаписиЗначенияПараметров.vName = Элемент.Values[Индекс].Name;
				МенеджерЗаписиЗначенияПараметров.vCode = Элемент.Values[Индекс].Code;
				МенеджерЗаписиЗначенияПараметров.vUserFieldGroups = Элемент.Values[Индекс].UserFieldGroups;
				
				МенеджерЗаписиЗначенияПараметров.Записать(Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат Истина;		
	ИначеЕсли ИмяСправочника = "userFieldGroups" Тогда
		
		// Заполняем группы параметров забора.
		Для Каждого Элемент Из МассивОбъектов Цикл
			userFieldGroups = Элемент.Id; 
			Для Индекс = 1 По Элемент.Values.Количество() - 2 Цикл
				Если userFieldGroups = Элемент.Values[Индекс].userFieldGroup Тогда
					МенеджерЗаписиЗначенияПараметров = РегистрыСведений.СитиЛаб_ГруппыПараметровЗабора.СоздатьМенеджерЗаписи();
					МенеджерЗаписиЗначенияПараметров.Лаборатория = Лаборатория;
					МенеджерЗаписиЗначенияПараметров.userFieldGroups = Элемент.Id;
					МенеджерЗаписиЗначенияПараметров.userField = Элемент.Values[Индекс].userField;
					МенеджерЗаписиЗначенияПараметров.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Истина;		
	ИначеЕсли ИмяСправочника = "pricelist" Тогда
		
		// Заполняем прайслисты и цены.
		НаборЗаписейСправочники = РегистрыСведений.СитиЛаб_Справочники.СоздатьНаборЗаписей();
		НаборЗаписейСправочники.Отбор.Лаборатория.Установить(Лаборатория);
		НаборЗаписейСправочники.Отбор.ИмяСправочника.Установить("hospital");
		НаборЗаписейСправочники.Прочитать();
		
		Если НаборЗаписейСправочники.Выбран() Тогда
			
			МассивHospitalId = НаборЗаписейСправочники.ВыгрузитьКолонку("Идентификатор");
			
			Если МассивHospitalId.Количество() <> 0 Тогда
				
				Для Каждого Элемент Из МассивОбъектов Цикл
					МассивСкидки = Новый Массив;
					
					Для Индекс_1 = 1 По Элемент.Hospitals.Количество() - 2 Цикл
						Для Индекс_2 = 1 По Элемент.Hospitals[Индекс_1].Hospital.Количество() - 2 Цикл
							// Если HospitalId из прейскуранта отсутствует в справочнике "hospital", тогда не загружать этот прейскурант.
							HospitalId = Элемент.Hospitals[Индекс_1].Hospital[Индекс_2].Id;
							Если МассивHospitalId.Найти(HospitalId) = Неопределено Тогда
								Продолжить;	
							КонецЕсли;
							
							StartDate = Элемент.Hospitals[Индекс_1].Hospital[Индекс_2].StartDate;
							EndDate = Элемент.Hospitals[Индекс_1].Hospital[Индекс_2].EndDate;
							
							Если Не ПериодДействияПрейскурантаАктуален(StartDate, EndDate) Тогда
								Продолжить;
							КонецЕсли;
							
							Попытка
								Скидка = Число(Элемент.Hospitals[Индекс_1].Hospital[Индекс_2].discount);
							Исключение
								Скидка = 0;
							КонецПопытки;
								
							МассивСкидки.Добавить(Скидка);
						КонецЦикла;
					КонецЦикла;
								
					Если МассивСкидки.Количество() <> 0 Тогда
						
						// Выберем по-умолчанию минимальную скидку, если вдруг их несколько (маловероятно).
						Скидка = 100;
						Для Каждого ЭлементСкидка Из МассивСкидки Цикл
							Скидка = Мин(Скидка, ЭлементСкидка);
						КонецЦикла; 
						
						НоваяЗаписьСправочники = РегистрыСведений.СитиЛаб_Справочники.СоздатьМенеджерЗаписи();
						НоваяЗаписьСправочники.Лаборатория = Лаборатория;
						НоваяЗаписьСправочники.ИмяСправочника = ИмяСправочника;
						НоваяЗаписьСправочники.Идентификатор = Элемент.Id;
						ЗаполнитьЗначенияСвойств(НоваяЗаписьСправочники, Элемент);
						НоваяЗаписьСправочники.Записать(Истина);
						
						ТаблицаЦеныУслуг = Новый ТаблицаЗначений;
						ТаблицаЦеныУслуг.Колонки.Добавить("Service");
						ТаблицаЦеныУслуг.Колонки.Добавить("Value");
						
						Для Индекс_1 = 1 По Элемент.Prices.Количество() - 2 Цикл
							Для Индекс_2 = 1 По Элемент.Prices[Индекс_1].Price.Количество() - 2 Цикл
								СтрокаЦеныУслуг = ТаблицаЦеныУслуг.Добавить();
								СтрокаЦеныУслуг.Service = Элемент.Prices[Индекс_1].Price[Индекс_2].Service;
								Цена = Элемент.Prices[Индекс_1].Price[Индекс_2].Value;
								СтрокаЦеныУслуг.Value = Цена - Окр(Цена*Скидка/100, 2);
							КонецЦикла;
						КонецЦикла;
						
						ТаблицаУслуги = ТаблицаЦеныУслуг.Скопировать(, "Service");
						ТаблицаУслуги.Свернуть("Service");
						
						НаборЗаписейЦеныУслуг = РегистрыСведений.СитиЛаб_ЦеныУслуг.СоздатьНаборЗаписей();
						НаборЗаписейЦеныУслуг.Отбор.Лаборатория.Установить(Лаборатория);
						НаборЗаписейЦеныУслуг.Отбор.Pricelist.Установить(Элемент.Id);
						
						Для Каждого СтрокаУслуги Из ТаблицаУслуги Цикл
							СтрокаЦеныУслуг = ТаблицаЦеныУслуг.Найти(СтрокаУслуги.Service, "Service");
							Если СтрокаЦеныУслуг <> Неопределено Тогда 
								НоваяЗаписьЦеныУслуг = НаборЗаписейЦеныУслуг.Добавить();
								НоваяЗаписьЦеныУслуг.Лаборатория = Лаборатория;
								НоваяЗаписьЦеныУслуг.Pricelist = Элемент.Id;
								НоваяЗаписьЦеныУслуг.Service = СтрокаУслуги.Service;
								НоваяЗаписьЦеныУслуг.Value = СтрокаЦеныУслуг.Value;
							КонецЕсли;							
						КонецЦикла;

						НаборЗаписейЦеныУслуг.Записать(Истина); 
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;	
		КонецЕсли;	
			
		Возврат Истина;
	КонецЕсли;
	
	НаборЗаписейСправочники = РегистрыСведений.СитиЛаб_Справочники.СоздатьНаборЗаписей();
	НаборЗаписейСправочники.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписейСправочники.Отбор.ИмяСправочника.Установить(ИмяСправочника);
		
	Для Каждого Элемент Из МассивОбъектов Цикл
		
		Если ПустаяСтрока(Элемент.Name) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяЗаписьСправочники = НаборЗаписейСправочники.Добавить();
		НоваяЗаписьСправочники.Лаборатория = Лаборатория;
		НоваяЗаписьСправочники.ИмяСправочника = ИмяСправочника;
		НоваяЗаписьСправочники.Идентификатор = Элемент.Id;
		
		ЗаполнитьЗначенияСвойств(НоваяЗаписьСправочники, Элемент);
		
		Если ИмяСправочника = "target" Тогда
			
			НоваяЗаписьСправочники.ПримечаниеИсследования = СокрЛП(Элемент.InfoNote);
			
			НоваяЗаписьСправочники.ИдентификаторМедицинскойУслуги = СокрЛП(Элемент.MedicalService);
			
			Если Не ПустаяСтрока(Элемент.targetType) Тогда 
				НоваяЗаписьСправочники.TargetType = Число(Элемент.targetType);
			КонецЕсли;
			
			НоваяЗаписьГруппыИсследований = РегистрыСведений.СитиЛаб_ГруппыИсследований.СоздатьМенеджерЗаписи();
			НоваяЗаписьГруппыИсследований.Лаборатория = Лаборатория;
			НоваяЗаписьГруппыИсследований.Target = Элемент.Id;
			НоваяЗаписьГруппыИсследований.Department = Элемент.Department;
			НоваяЗаписьГруппыИсследований.Записать(Истина);
			
			НаборЗаписейПараметры = РегистрыСведений.СитиЛаб_ПараметрыЗабораИсследований.СоздатьНаборЗаписей();
			НаборЗаписейПараметры.Отбор.Лаборатория.Установить(Лаборатория);
			НаборЗаписейПараметры.Отбор.Target.Установить(Элемент.Id);
			
			Для Индекс = 1 По Элемент.UserFields.Количество() - 2 Цикл
				НоваяЗаписьПараметры = НаборЗаписейПараметры.Добавить();
				НоваяЗаписьПараметры.Лаборатория = Лаборатория;
				НоваяЗаписьПараметры.Target = Элемент.Id;
				НоваяЗаписьПараметры.ИдентификаторПараметра = Элемент.UserFields[Индекс];
			КонецЦикла;
			
			Для Индекс = 1 По Элемент.StdFields.Количество() - 2 Цикл
				НоваяЗаписьПараметры = НаборЗаписейПараметры.Добавить();
				НоваяЗаписьПараметры.Лаборатория = Лаборатория;
				НоваяЗаписьПараметры.Target = Элемент.Id;
				НоваяЗаписьПараметры.ИдентификаторПараметра = Элемент.StdFields[Индекс];
				НоваяЗаписьПараметры.СтандартноеПоле = Истина;
			КонецЦикла;

			НаборЗаписейПараметры.Записать(Истина);
			
			НаборЗаписейБио = РегистрыСведений.СитиЛаб_БиоматериалыИсследований.СоздатьНаборЗаписей();
			НаборЗаписейБио.Отбор.Лаборатория.Установить(Лаборатория);
			НаборЗаписейБио.Отбор.Target.Установить(Элемент.Id);
			
			Для Индекс = 1 По Элемент.Biomaterials.Количество() - 2 Цикл
				НоваяЗаписьБио = НаборЗаписейБио.Добавить();
				НоваяЗаписьБио.Лаборатория = Лаборатория;
				НоваяЗаписьБио.Target = Элемент.Id;
				НоваяЗаписьБио.bioMaterial = Элемент.Biomaterials[Индекс];
			КонецЦикла;
			
			НаборЗаписейБио.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписейСправочники.Записать(Истина);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьФайлСправочника(НастройкиВзаимодействия, ИмяСправочника, СообщенияОбОшибках = Неопределено) Экспорт
	
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ПолучитьСоединение(НастройкиВзаимодействия);
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетодВебСервиса = "RC_GetDirectory";
	
	Запрос = СоздатьЗапрос(МетодВебСервиса);
	
	ТелоЗапроса = СтрШаблон(ПолучитьШаблонЗапроса(МетодВебСервиса),
							НастройкиВзаимодействия.Логин,
							НастройкиВзаимодействия.Пароль,
							ИмяСправочника);
	
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	ФайлОтвета = РасшифроватьИИзвлечьИзОтвета(Ответ, СообщенияОбОшибках);
	
	Если ФайлОтвета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПроцессорПреобразования = Новый ПреобразованиеXSL;
	ПроцессорПреобразования.ЗагрузитьИзСтроки(ПолучитьСтрокуПреобразования(ИмяСправочника));
	
	НормализованныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(НормализованныйФайл);
	
	ПроцессорПреобразования.ПреобразоватьИзФайла(ФайлОтвета, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
	
	УдалитьФайлы(ФайлОтвета);
	
	Возврат НормализованныйФайл;
	
КонецФункции

Функция ПолучитьВерсиюСправочникаМИС(Лаборатория, ИмяСправочника)
	
	МенеджерЗаписи = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Лаборатория = Лаборатория;
	МенеджерЗаписи.ИмяФайла = ИмяСправочника;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат МенеджерЗаписи.ВерсияСправочника;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура СохранитьВерсиюСправочникаМИС(Лаборатория, ИмяСправочника, Версия)
	
	МенеджерЗаписи = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Лаборатория = Лаборатория;
	МенеджерЗаписи.ИмяФайла = ИмяСправочника;
	МенеджерЗаписи.ВерсияСправочника = Версия;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьВерсииСправочниковЛИС(НастройкиВзаимодействия, СообщенияОбОшибках = Неопределено)
	
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ПолучитьСоединение(НастройкиВзаимодействия, СообщенияОбОшибках);
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетодВебСервиса = "RC_DirectoryVersions";
	
	Запрос = СоздатьЗапрос(МетодВебСервиса);
	
	ТелоЗапроса = СтрШаблон(ПолучитьШаблонЗапроса(МетодВебСервиса),
							НастройкиВзаимодействия.Логин,
							НастройкиВзаимодействия.Пароль);
	
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если СтрНайти(НРег(ТекстОтвета), "target") = 0 Тогда
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщенияОбОшибках("ОшибкаПолученияВерсииСправочников", НастройкиВзаимодействия.Лаборатория));
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстОтвета);
	
	ВерсииСтрокой = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсииСтрокой, ";", Истина);
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Для Каждого Подстрока Из МассивПодстрок Цикл
		ПозицияРазделителя = СтрНайти(Подстрока, ":");
		
		ВозвращаемоеЗначение.Вставить(Лев(Подстрока, ПозицияРазделителя - 1), Сред(Подстрока, ПозицияРазделителя + 1));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавляет в массив Ситилаб-лаборатории, для которых необходимо обновить справочники.
//
// Параметры:
//  МассивЛаборатории - Массив из СправочникСсылка.Лаборатории - лаборатории с неактуальными справочниками.
//
Процедура ПроверитьАктуальностьСправочниковЛабораторий(МассивЛаборатории) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСправочники = ПолучитьНаименованияСправочников();
	
	АктуальныеЛаборатории = ПолучитьАктуальныеЛаборатории();
	Для Каждого Лаборатория Из АктуальныеЛаборатории Цикл
		ТребуетсяОбновитьСправочники = Ложь;
		НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
		
		Если НастройкиВзаимодействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ВерсииСправочниковЛИС = ПолучитьВерсииСправочниковЛИС(НастройкиВзаимодействия);
		
		Если ВерсииСправочниковЛИС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяСправочника Из МассивСправочники Цикл 
			ВерсияМИС = ПолучитьВерсиюСправочникаМИС(Лаборатория, ИмяСправочника);
			ВерсияЛИС = ВерсииСправочниковЛИС.Получить(ИмяСправочника);
			Если ВерсияЛИС <> Неопределено И ВерсияМИС <> ВерсияЛИС Тогда
				ТребуетсяОбновитьСправочники = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяОбновитьСправочники Тогда
			МассивЛаборатории.Добавить(Лаборатория);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодДействияПрейскурантаАктуален(StartDate, EndDate)
	
	ДатаНачала = Неопределено;
	Если Не ПустаяСтрока(StartDate) Тогда 
		Попытка
			ДатаНачала = Дата(StartDate);
		Исключение
		КонецПопытки;
	КонецЕсли;					
	
	ДатаОкончания = Неопределено;
	Если Не ПустаяСтрока(EndDate) Тогда 
		Попытка
			ДатаОкончания = Дата(EndDate);
		Исключение
		КонецПопытки;
	КонецЕсли;					
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Если период действия прейскуранта не попадает на текущую дату, тогда не загружать этот прейскурант.
	Если (ДатаНачала <> Неопределено И ТекущаяДата < ДатаНачала)
		Или (ДатаОкончания <> Неопределено И ТекущаяДата > ДатаОкончания) 
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗагрузкаПараметровЗабора(Лаборатория, СообщенияОбОшибках = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЛабораторияСервер.ЗагрузитьПараметрыЗабораИзВнутреннихМакетов(Перечисления.ВнешниеЛаборатории.СитиЛаб, Ложь); // Только если в базе еще нет параметров (Ложь).
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыЗабораАнализовIDПараметров.ID КАК ID
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
	|ГДЕ
	|	ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.СитиЛаб)"
	;
	ПараметрыСитиЛабВБазе = Запрос.Выполнить().Выгрузить();
	
	АтрибутыПараметров = АтрибутыПараметровЗабораИзСитилаб(Лаборатория);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СитиЛаб_ПараметрыЗабора.СтандартноеПоле = ИСТИНА
	|			ТОГДА СитиЛаб_ПараметрыЗабора.Code
	|		ИНАЧЕ СитиЛаб_ПараметрыЗабора.Идентификатор
	|	КОНЕЦ КАК ИдентификаторПараметра,
	|	СитиЛаб_ПараметрыЗабораИсследований.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ втИдентификаторыПараметров
	|ИЗ
	|	РегистрСведений.СитиЛаб_ПараметрыЗабораИсследований КАК СитиЛаб_ПараметрыЗабораИсследований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ПараметрыЗабора КАК СитиЛаб_ПараметрыЗабора
	|		ПО СитиЛаб_ПараметрыЗабораИсследований.ИдентификаторПараметра = СитиЛаб_ПараметрыЗабора.Идентификатор
	|			И СитиЛаб_ПараметрыЗабораИсследований.СтандартноеПоле = СитиЛаб_ПараметрыЗабора.СтандартноеПоле
	|			И СитиЛаб_ПараметрыЗабораИсследований.Лаборатория = СитиЛаб_ПараметрыЗабора.Лаборатория
	|			И (СитиЛаб_ПараметрыЗабораИсследований.Лаборатория = &Лаборатория)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИдентификаторыПараметров.ИдентификаторПараметра КАК ИдентификаторПараметра
	|ИЗ
	|	втИдентификаторыПараметров КАК втИдентификаторыПараметров
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СитиЛаб_ГруппыПараметровЗабора.userField
	|ИЗ
	|	втИдентификаторыПараметров КАК втИдентификаторыПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ПараметрыЗабораИсследований КАК СитиЛаб_ПараметрыЗабораИсследований
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ПараметрыЗабора КАК СитиЛаб_ПараметрыЗабора
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ЗначенияПараметровЗабора КАК СитиЛаб_ЗначенияПараметровЗабора
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ГруппыПараметровЗабора КАК СитиЛаб_ГруппыПараметровЗабора
	|					ПО СитиЛаб_ЗначенияПараметровЗабора.vUserFieldGroups = СитиЛаб_ГруппыПараметровЗабора.userFieldGroups
	|						И СитиЛаб_ЗначенияПараметровЗабора.Лаборатория = СитиЛаб_ГруппыПараметровЗабора.Лаборатория
	|				ПО СитиЛаб_ПараметрыЗабора.userDirectory = СитиЛаб_ЗначенияПараметровЗабора.Идентификатор
	|					И СитиЛаб_ПараметрыЗабора.Лаборатория = СитиЛаб_ЗначенияПараметровЗабора.Лаборатория
	|			ПО СитиЛаб_ПараметрыЗабораИсследований.ИдентификаторПараметра = СитиЛаб_ПараметрыЗабора.Идентификатор
	|				И СитиЛаб_ПараметрыЗабораИсследований.Лаборатория = СитиЛаб_ПараметрыЗабора.Лаборатория
	|		ПО втИдентификаторыПараметров.ИдентификаторПараметра = СитиЛаб_ПараметрыЗабораИсследований.ИдентификаторПараметра
	|			И втИдентификаторыПараметров.Лаборатория = СитиЛаб_ПараметрыЗабораИсследований.Лаборатория"
	;
	ПараметрыСитиЛабИспользуемые = Запрос.Выполнить().Выгрузить();
	
	// Добавление в список загрузки параметров забора используемых по-умолчанию в заявке в лабораторию стандартных полей (stdField)
	// независимо от наличия сопоставлений этих стандартных полей исследованиям в справочной информации.
	ИспользуемыеСтандартныеПоля = СтандартныеПоляИспользуемыеПоУмолчанию();
	Для Каждого Элемент Из ИспользуемыеСтандартныеПоля Цикл
		Если ПараметрыСитиЛабИспользуемые.Найти(Элемент) = Неопределено Тогда
			СтрТаблица = ПараметрыСитиЛабИспользуемые.Добавить();
			СтрТаблица.ИдентификаторПараметра = Элемент;
		КонецЕсли;
	КонецЦикла;
	
	// Создаем параметры забора.
	Для Каждого Параметр Из ПараметрыСитиЛабИспользуемые Цикл
		
		Если ЗначениеЗаполнено(ПараметрыСитиЛабВБазе.Найти(Параметр.ИдентификаторПараметра, "ID")) Тогда
			Продолжить;	
		КонецЕсли;
		
		// Создаем параметр.
		
		// Атрибуты параметра забора из данных Ситилаб.
		АтрибутыПараметра = АтрибутыПараметров.Найти(Параметр.ИдентификаторПараметра, "Идентификатор");
		Если АтрибутыПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПВХПараметр = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.СоздатьЭлемент();
		НовыйПВХПараметр.Наименование = АтрибутыПараметра.Name;
		НоваяСтрокаID = НовыйПВХПараметр.IDПараметров.Добавить();
		НоваяСтрокаID.ID = Параметр.ИдентификаторПараметра;
		НоваяСтрокаID.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.СитиЛаб;
		
		ЗначенияПараметра = РегистрыСведений.СитиЛаб_ЗначенияПараметровЗабора.СоздатьНаборЗаписей();
		ЗначенияПараметра.Отбор.Идентификатор.Установить(АтрибутыПараметра.userDirectory);
		ЗначенияПараметра.Отбор.Лаборатория.Установить(Лаборатория);
		ЗначенияПараметра.Прочитать();
		
		// Определяем тип значения.
		СписокТипов = Новый Массив;
		Если ЗначенияПараметра.Количество() > 0 Тогда
			СписокТипов.Добавить(Тип("СправочникСсылка.ЗначенияПараметровЗабора"));	
		КонецЕсли;
		Если АтрибутыПараметра.FieldType = 1 Тогда
			СписокТипов.Добавить(Тип("Строка"));
			КвалификаторСтрока = Новый  КвалификаторыСтроки(АтрибутыПараметра.maxLength);
		ИначеЕсли АтрибутыПараметра.FieldType = 2 Тогда 
			СписокТипов.Добавить(Тип("Число"));
			КвалификаторЧисло = Новый КвалификаторыЧисла(0,АтрибутыПараметра.prec)
		ИначеЕсли АтрибутыПараметра.FieldType = 3 Тогда 
			СписокТипов.Добавить(Тип("Булево"));
		ИначеЕсли АтрибутыПараметра.FieldType = 4 Тогда 
			СписокТипов.Добавить(Тип("Дата"));
		КонецЕсли; 
		Если СписокТипов.Количество() > 0 Тогда
			ОписаниеСоставногоТипа = Новый ОписаниеТипов(СписокТипов,,,КвалификаторЧисло,КвалификаторСтрока);
			НовыйПВХПараметр.ТипЗначения = ОписаниеСоставногоТипа;	
		КонецЕсли; 
		
		НовыйПВХПараметр.Записать();
		
		// Создаем значения параметра.
		Для Каждого Значение Из ЗначенияПараметра Цикл
			НовоеЗначениеПараметра = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
			НовоеЗначениеПараметра.Наименование = Значение.vName;
			НоваяСтрокаID = НовоеЗначениеПараметра.IDЗначения.Добавить();
			НоваяСтрокаID.ID = Значение.vCode;
			НоваяСтрокаID.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.СитиЛаб;	
			НовоеЗначениеПараметра.Владелец = НовыйПВХПараметр.Ссылка;
			НовоеЗначениеПараметра.Записать();
		КонецЦикла; 
		
		НоваяСтрокаТабл = ПараметрыСитиЛабВБазе.Добавить();
		НоваяСтрокаТабл.ID = Параметр.ИдентификаторПараметра;
	КонецЦикла; 

	ЛабораторияСервер.ЗагрузитьСведенияОПериодеПодстановкиЗначенийПараметровЗаполнения("Ситилаб");
	
КонецПроцедуры	

Функция АтрибутыПараметровЗабораИзСитилаб(Лаборатория)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СитиЛаб_ПараметрыЗабора.СтандартноеПоле = ИСТИНА
	|			ТОГДА СитиЛаб_ПараметрыЗабора.Code
	|		ИНАЧЕ СитиЛаб_ПараметрыЗабора.Идентификатор
	|	КОНЕЦ КАК Идентификатор,
	|	СитиЛаб_ПараметрыЗабора.Name КАК Name,
	|	СитиЛаб_ПараметрыЗабора.Code КАК Code,
	|	СитиЛаб_ПараметрыЗабора.FieldType КАК FieldType,
	|	СитиЛаб_ПараметрыЗабора.userDirectory КАК userDirectory,
	|	СитиЛаб_ПараметрыЗабора.maxLength КАК maxLength,
	|	СитиЛаб_ПараметрыЗабора.regex КАК regex,
	|	СитиЛаб_ПараметрыЗабора.needTime КАК needTime,
	|	СитиЛаб_ПараметрыЗабора.strict КАК strict,
	|	СитиЛаб_ПараметрыЗабора.maxValue КАК maxValue,
	|	СитиЛаб_ПараметрыЗабора.minValue КАК minValue,
	|	СитиЛаб_ПараметрыЗабора.prec КАК prec
	|ИЗ
	|	РегистрСведений.СитиЛаб_ПараметрыЗабора КАК СитиЛаб_ПараметрыЗабора
	|ГДЕ
	|	СитиЛаб_ПараметрыЗабора.Лаборатория = &Лаборатория"
	;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтандартныеПоляИспользуемыеПоУмолчанию()
	
	IDСтандартныеПоля = Новый Массив;
	// "Период цикла".
	IDСтандартныеПоля.Добавить("CyclePeriod");
	// "Срок беременности".
	IDСтандартныеПоля.Добавить("PregnancyDuration");
	
	Возврат IDСтандартныеПоля;
	
КонецФункции
	
Процедура ПолучитьДополнительныеПараметрыЗабора(ТаблицаРезультат, ТаблицаИДПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаИДПараметров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ИДПараметра КАК ИДПараметра,
	|	Таблица.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ втТаблицаИДПараметров
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СитиЛаб_ГруппыПараметровЗабора.userField КАК ИДПараметра,
	|	СитиЛаб_ГруппыПараметровЗабора.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ втИдентификаторыПараметров
	|ИЗ
	|	втТаблицаИДПараметров КАК втТаблицаИДПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ПараметрыЗабора КАК СитиЛаб_ПараметрыЗабора
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ЗначенияПараметровЗабора КАК СитиЛаб_ЗначенияПараметровЗабора
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ГруппыПараметровЗабора КАК СитиЛаб_ГруппыПараметровЗабора
	|				ПО СитиЛаб_ЗначенияПараметровЗабора.vUserFieldGroups = СитиЛаб_ГруппыПараметровЗабора.userFieldGroups
	|					И СитиЛаб_ЗначенияПараметровЗабора.Лаборатория = СитиЛаб_ГруппыПараметровЗабора.Лаборатория
	|			ПО СитиЛаб_ПараметрыЗабора.userDirectory = СитиЛаб_ЗначенияПараметровЗабора.Идентификатор
	|				И СитиЛаб_ПараметрыЗабора.Лаборатория = СитиЛаб_ЗначенияПараметровЗабора.Лаборатория
	|		ПО втТаблицаИДПараметров.ИДПараметра = СитиЛаб_ПараметрыЗабора.Идентификатор
	|			И втТаблицаИДПараметров.Лаборатория = СитиЛаб_ПараметрыЗабора.Лаборатория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	IDПарам.Ссылка КАК Параметр,
	|	IDПарам.Ссылка.Наименование КАК Наименование,
	|	IDПарам.Ссылка.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ЛОЖЬ КАК Обязательный,
	|	IDПарам.ID КАК ИДПараметра,
	|	втИдентификаторыПараметров.Лаборатория КАК Лаборатория,
	|	ЛОЖЬ КАК Предопределенный
	|ИЗ
	|	втИдентификаторыПараметров КАК втИдентификаторыПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК IDПарам
	|		ПО втИдентификаторыПараметров.ИДПараметра = IDПарам.ID
	|			И втИдентификаторыПараметров.Лаборатория.ВнешняяЛаборатория = IDПарам.ВидЛаборатории"
	;
	РезультатДопПараметры = Запрос.Выполнить();
	
	Если Не РезультатДопПараметры.Пустой() Тогда
		ТаблицаДопПараметры = РезультатДопПараметры.Выгрузить();
		Для Каждого СтрДопПараметры Из ТаблицаДопПараметры Цикл
			СтрокиТаблицаРезультат = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИДПараметра, Лаборатория", 
				СтрДопПараметры.ИДПараметра, СтрДопПараметры.Лаборатория));
			Если СтрокиТаблицаРезультат.Количество() = 0 Тогда
				НоваяСтрокаТаблицаРезультат = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаРезультат, СтрДопПараметры);
			КонецЕсли;
		КонецЦикла;
		ТаблицаДопПараметры.Свернуть("ИДПараметра, Лаборатория");
		ПолучитьДополнительныеПараметрыЗабора(ТаблицаРезультат, ТаблицаДопПараметры);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПолучитьДополнительныеПараметрыЗабораДляОтправкиЗаказа(Лаборатория, ТаблицаРезультат, ТаблицаИДПараметров = Неопределено)
	
	Если ТаблицаИДПараметров = Неопределено Тогда
		ТаблицаИДПараметров = ТаблицаРезультат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаИДПараметров);
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ИДИсследования КАК ИДИсследования,
	|	Таблица.ИДПараметра КАК ИДПараметра
	|ПОМЕСТИТЬ втТаблицаПараметрыЗабора
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаПараметрыЗабора.ИДИсследования КАК ИДИсследования,
	|	СитиЛаб_ГруппыПараметровЗабора.userField КАК ИДПараметра
	|ИЗ
	|	втТаблицаПараметрыЗабора КАК втТаблицаПараметрыЗабора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ПараметрыЗабора КАК СитиЛаб_ПараметрыЗабора
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ЗначенияПараметровЗабора КАК СитиЛаб_ЗначенияПараметровЗабора
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ГруппыПараметровЗабора КАК СитиЛаб_ГруппыПараметровЗабора
	|				ПО СитиЛаб_ЗначенияПараметровЗабора.vUserFieldGroups = СитиЛаб_ГруппыПараметровЗабора.userFieldGroups
	|					И СитиЛаб_ЗначенияПараметровЗабора.Лаборатория = СитиЛаб_ГруппыПараметровЗабора.Лаборатория
	|			ПО СитиЛаб_ПараметрыЗабора.userDirectory = СитиЛаб_ЗначенияПараметровЗабора.Идентификатор
	|				И СитиЛаб_ПараметрыЗабора.Лаборатория = СитиЛаб_ЗначенияПараметровЗабора.Лаборатория
	|		ПО втТаблицаПараметрыЗабора.ИДПараметра = СитиЛаб_ПараметрыЗабора.Идентификатор
	|			И (СитиЛаб_ПараметрыЗабора.Лаборатория = &Лаборатория)"
	;
	ТаблицаДопПараметрыЗабора = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДопПараметрыЗабора.Количество() <> 0 Тогда 
		Для Каждого СтрТаблицаДопПараметрыЗабора Из ТаблицаДопПараметрыЗабора Цикл
			НоваяСтрокаТаблицаПараметрыЗабора = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаПараметрыЗабора, СтрТаблицаДопПараметрыЗабора); 
		КонецЦикла;
		ПолучитьДополнительныеПараметрыЗабораДляОтправкиЗаказа(Лаборатория, ТаблицаРезультат, ТаблицаДопПараметрыЗабора); 
	КонецЕсли;
	
КонецПроцедуры

// Заполняет предопределенные параметры забора и их значения.
//
Процедура ПервоначальнаяЗагрузкаПараметровЗабора() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПВХСрочностьЗаявки = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.СрочностьЗаявки;
	ВнешниеЛабораторииСитиЛаб = Перечисления.ВнешниеЛаборатории.СитиЛаб;
	
	ЗначениеОбычнаяЗаявка = Неопределено;
	ЗначениеСрочнаяЗаявка = Неопределено;
	IDЗначениеОбычнаяЗаявка = "10";
	IDЗначениеСрочнаяЗаявка = "20";
	НаименованиеЗначениеОбычнаяЗаявка = "Обычная";
	НаименованиеЗначениеСрочнаяЗаявка = "Срочная";
	ОтборОбычнаяЗаявка = Новый Структура("ВидЛаборатории, ID", ВнешниеЛабораторииСитиЛаб, IDЗначениеОбычнаяЗаявка);
	ОтборСрочнаяЗаявка = Новый Структура("ВидЛаборатории, ID", ВнешниеЛабораторииСитиЛаб, IDЗначениеСрочнаяЗаявка);
	МассивНовыеЗначения = Новый Массив;
	
	ЗначенияВыборка = Справочники.ЗначенияПараметровЗабора.Выбрать(, ПВХСрочностьЗаявки);
		
	Пока ЗначенияВыборка.Следующий() Цикл
		
		Если ЗначенияВыборка.IDЗначения.НайтиСтроки(ОтборОбычнаяЗаявка).Количество() > 0 Тогда
			ЗначениеОбычнаяЗаявка = ЗначенияВыборка.Ссылка;
		ИначеЕсли ЗначенияВыборка.IDЗначения.НайтиСтроки(ОтборСрочнаяЗаявка).Количество() > 0 Тогда
			ЗначениеСрочнаяЗаявка = ЗначенияВыборка.Ссылка;
		ИначеЕсли ЗначенияВыборка.IDЗначения.НайтиСтроки(Новый Структура("ВидЛаборатории",
			ВнешниеЛабораторииСитиЛаб)).Количество() = 0 Тогда
			
			Если ЗначенияВыборка.Наименование = НаименованиеЗначениеОбычнаяЗаявка Тогда
				ЗначениеОбычнаяЗаявка = ЗначенияВыборка.Ссылка;
			ИначеЕсли ЗначенияВыборка.Наименование = НаименованиеЗначениеСрочнаяЗаявка Тогда
				ЗначениеСрочнаяЗаявка = ЗначенияВыборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивНовыеЗначения.Добавить(Новый Структура("Значение, НаименованиеЗначения, IDЗначения",
		ЗначениеОбычнаяЗаявка, НаименованиеЗначениеОбычнаяЗаявка, IDЗначениеОбычнаяЗаявка));
	
	МассивНовыеЗначения.Добавить(Новый Структура("Значение, НаименованиеЗначения, IDЗначения",
		ЗначениеСрочнаяЗаявка, НаименованиеЗначениеСрочнаяЗаявка, IDЗначениеСрочнаяЗаявка));
	
	Для Каждого СтруктураЗначения Из МассивНовыеЗначения Цикл
		
		Если СтруктураЗначения.Значение = Неопределено Тогда			
			ОбъектЗначение = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
			ОбъектЗначение.Владелец = ПВХСрочностьЗаявки;
			ОбъектЗначение.Наименование = СтруктураЗначения.НаименованиеЗначения;			
		Иначе			
			ОбъектЗначение = СтруктураЗначения.Значение.ПолучитьОбъект();			
		КонецЕсли;
		
		Если ОбъектЗначение.IDЗначения.НайтиСтроки(Новый Структура("ВидЛаборатории, ID",
			ВнешниеЛабораторииСитиЛаб, СтруктураЗначения.IDЗначения)).Количество() = 0
		Тогда			
			СтрокаIDЗначения = ОбъектЗначение.IDЗначения.Добавить();
			СтрокаIDЗначения.ВидЛаборатории = ВнешниеЛабораторииСитиЛаб;
			СтрокаIDЗначения.ID = СтруктураЗначения.IDЗначения;
			
			Попытка
				ОбъектЗначение.Записать();
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗначениеОбычнаяЗаявка = Неопределено
			И ЗначениеЗаполнено(ОбъектЗначение.Ссылка)
			И СтруктураЗначения.IDЗначения = IDЗначениеОбычнаяЗаявка
		Тогда
			ЗначениеОбычнаяЗаявка = ОбъектЗначение.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	IDСрочностьЗаявки = "OrderPriority";
	ОтборСрочностьЗаявки = Новый Структура("ВидЛаборатории, ID", ВнешниеЛабораторииСитиЛаб, IDСрочностьЗаявки);
	
	ЗаписатьОбъектПВХСрочностьЗаявки = Ложь;
	ОбъектПВХСрочностьЗаявки = ПВХСрочностьЗаявки.ПолучитьОбъект();
	
	Если ПВХСрочностьЗаявки.IDПараметров.НайтиСтроки(ОтборСрочностьЗаявки).Количество() = 0 Тогда
		СтрокаIDПараметров = ОбъектПВХСрочностьЗаявки.IDПараметров.Добавить();
		СтрокаIDПараметров.ВидЛаборатории = ВнешниеЛабораторииСитиЛаб;
		СтрокаIDПараметров.ID = IDСрочностьЗаявки;
		ЗаписатьОбъектПВХСрочностьЗаявки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектПВХСрочностьЗаявки.ЗначениеПоУмолчанию) Тогда
		ОбъектПВХСрочностьЗаявки.ЗначениеПоУмолчанию = ЗначениеОбычнаяЗаявка;
		ЗаписатьОбъектПВХСрочностьЗаявки = Истина;
	КонецЕсли;
	
	Если ЗаписатьОбъектПВХСрочностьЗаявки Тогда
		Попытка
			ОбъектПВХСрочностьЗаявки.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Получает сроки выполнения для номенклатуры исследований из загруженной справочной информации по лаборатории.
//
// Параметры:
//  СрокиВыполненияИсследований - ТаблицаЗначений:
//  	* Лаборатория - СправочникСсылка.Лаборатории
//  	* Исследование - СправочникСсылка.Номенклатура
//  	* СрокВыполнения - Строка
//  ИсследованияЛаборатории - ТаблицаЗначений:
//  	* НомерСтроки - Число
//  	* Номенклатура - СправочникСсылка.Номенклатура
//  	* Лаборатория - СправочникСсылка.Лаборатории
//
Процедура ПолучитьСрокиВыполненияИсследований(СрокиВыполненияИсследований, ИсследованияЛаборатории) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ИсследованияЛаборатории);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ ИсследованияЛаборатории
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсследованияЛаборатории.НомерСтроки КАК НомерСтроки,
	|	ИсследованияЛаборатории.Лаборатория КАК Лаборатория,
	|	ИсследованияЛаборатории.Номенклатура КАК Исследование,
	|	МАКСИМУМ(СитиЛаб_УслугиИсследований.СрокВыполненияОбычный) КАК СрокВыполненияОбычный,
	|	МАКСИМУМ(СитиЛаб_УслугиИсследований.СрокВыполненияСрочный) КАК СрокВыполненияСрочный
	|ИЗ
	|	ИсследованияЛаборатории КАК ИсследованияЛаборатории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_УслугиИсследований КАК СитиЛаб_УслугиИсследований
	|			ПО НоменклатураАнализов.ID = СитиЛаб_УслугиИсследований.Target
	|				И НоменклатураАнализов.Лаборатория = СитиЛаб_УслугиИсследований.Лаборатория
	|		ПО ИсследованияЛаборатории.Номенклатура = НоменклатураАнализов.Номенклатура
	|			И ИсследованияЛаборатории.Лаборатория = НоменклатураАнализов.Лаборатория
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсследованияЛаборатории.Номенклатура,
	|	ИсследованияЛаборатории.Лаборатория,
	|	ИсследованияЛаборатории.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрСрокиВыполненияИсследований = СрокиВыполненияИсследований.Добавить();
		СтрСрокиВыполненияИсследований.Лаборатория = Строка(Выборка.Лаборатория);
		СтрСрокиВыполненияИсследований.Исследование = Строка(Выборка.Исследование);
		СрокВыполненияОбычный = ?(Выборка.СрокВыполненияОбычный <> 0, Выборка.СрокВыполненияОбычный, НСтр("ru='нет данных'"));
		СрокВыполненияСрочный = ?(Выборка.СрокВыполненияСрочный <> 0, Выборка.СрокВыполненияСрочный, НСтр("ru='нет данных'"));
		Если СрокВыполненияОбычный = СрокВыполненияСрочный Тогда
			СтрСрокиВыполненияИсследований.СрокВыполнения = Строка(СрокВыполненияОбычный);
		Иначе
			ШаблонСтроки = НСтр("ru='Обычная заявка: %1;%2Срочная заявка: %3'");
			СтрСрокиВыполненияИсследований.СрокВыполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки, СрокВыполненияОбычный, Символы.ПС, СрокВыполненияСрочный);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дополнительную информацию по контейнерам в документе забора исследований.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ДействияНадАнализами - документ забора исследований.
// 
// Возвращаемое значение:
//   Соответствие:
//   	* Ключ - Число - номер строки таб. части "Контейнеры".
//   	* Значение - Строка - содержит дополнительную информацию.
//
Функция ДополнительнаяИнформацияПоКонтейнерамДляПечатиЗаказа(ДокументСсылка) Экспорт

	Результат = Новый Соответствие;
	
	ТаблицаКонтейнеры = ДокументСсылка.Контейнеры.Выгрузить();
	// Добавление колонки для последующего отбора по виду лаборатории.
	ТаблицаКонтейнеры.Колонки.Добавить("ВидЛаборатории", Новый ОписаниеТипов("ПеречислениеСсылка.ВнешниеЛаборатории"));
	
	Для Каждого СтрТаблица Из ТаблицаКонтейнеры Цикл
		Если ЗначениеЗаполнено(СтрТаблица.Лаборатория) Тогда
			СтрТаблица.ВидЛаборатории = СтрТаблица.Лаборатория.ВнешняяЛаборатория;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("ВидЛаборатории", Перечисления.ВнешниеЛаборатории.СитиЛаб);
	ТаблицаЛаборатории = ТаблицаКонтейнеры.Скопировать(Отбор, "Лаборатория");
	ТаблицаЛаборатории.Свернуть("Лаборатория");
	ТаблицаЛаборатории.Колонки.Добавить("ДлинаНомераЗаявки", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрТаблица Из ТаблицаЛаборатории Цикл
		ДлинаНомераЗаявки = 0;
		НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(СтрТаблица.Лаборатория);
		Если НастройкиВзаимодействия <> Неопределено Тогда
			ДлинаНомераЗаявки = ДлинаНомераЗаявки(НастройкиВзаимодействия);
		КонецЕсли;
		СтрТаблица.ДлинаНомераЗаявки = ДлинаНомераЗаявки;
	КонецЦикла;
	
	// Отбираем контейнеры, предназначенные только для лабораторий Ситилаб.
	ТаблицаКонтейнерыИтог = ТаблицаКонтейнеры.Скопировать(Отбор, "НомерСтроки, Лаборатория, ВидЛаборатории, КодПробы");
	
	Для Каждого СтрТаблица Из ТаблицаКонтейнерыИтог Цикл
		СтрТаблицаЛаборатории = ТаблицаЛаборатории.Найти(СтрТаблица.Лаборатория, "Лаборатория");
		Если СтрТаблицаЛаборатории <> Неопределено
			И СтрТаблицаЛаборатории.ДлинаНомераЗаявки > 0
		Тогда
			ШаблонСтроки = НСтр("ru='Лаборатория %1, номер заявки: %2'");
			НомерЗаявки = Лев(СтрТаблица.КодПробы, СтрТаблицаЛаборатории.ДлинаНомераЗаявки);
			Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, СтрТаблица.ВидЛаборатории, НомерЗаявки);
			Результат.Вставить(СтрТаблица.НомерСтроки, Описание);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОпределитьИсключенныеИсследования(Лаборатория)
	
	Цены = ТаблицаЦенАнализов(Лаборатория);
	ЛабораторияСервер.ОпределитьИсключенныеИсследования(Лаборатория, Цены);
	
КонецПроцедуры

#Область ОбработкаЗагрузкиСправочников

Функция ОбновитьПолучитьСправочникиИнтерактивнаяЗагрузка(Лаборатория, СообщенияОбОшибках = Неопределено) Экспорт
	
	ДанныеСправочников = Новый Структура;
	
	// Обновление классификаторов.
	ОбновитьСправочникиЛаборатории(Лаборатория, Ложь,, СообщенияОбОшибках);
	
	// Иерархия анализов лаборатории.
	ДеревоНоменклатуры = ПолучитьДанныеНоменклатурыАнализов(Лаборатория).ДеревоНоменклатуры;
	
	ДанныеСправочников.Вставить("ДеревоНоменклатуры", ДеревоНоменклатуры);
	ДанныеСправочников.Вставить("Цены", ТаблицаЦенАнализов(Лаборатория));
	
	Возврат ДанныеСправочников;
	
КонецФункции

// Выполняет удаление записей в справочниках Ситилаб-лаборатории. 
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой очищаем справочники. 
//
Процедура ОчиститьСправочники(Лаборатория) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ВерсииФайловСправочниковЛабораторий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();

	НаборЗаписей = РегистрыСведений.СитиЛаб_Справочники.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СитиЛаб_БиоматериалыИсследований.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СитиЛаб_ГруппыИсследований.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СитиЛаб_ЗначенияПараметровЗабора.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СитиЛаб_ПараметрыЗабора.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();

	НаборЗаписей = РегистрыСведений.СитиЛаб_ПараметрыЗабораИсследований.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СитиЛаб_ГруппыПараметровЗабора.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СитиЛаб_УслугиИсследований.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СитиЛаб_ЦеныУслуг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Обновляемые реквизиты номенклатуры при загрузке.
// 
// Возвращаемое значение:
//  Массив - имена реквизитов элементов справочника Номенклатура.
//
Функция ОбновляемыеРеквизитыНоменклатурыПриЗагрузке() Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Комментарий");
	Реквизиты.Добавить("НоменклатураМедицинскихУслуг");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает структуру с данными номенклатуры анализов для Ситилаб-лабораторий.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой получаем данные номенклатуры анализов.   
// 
// Возвращаемое значение:
//   - Структура:
//   	* ДеревоНоменклатуры - ДеревоЗначений
//
Функция ПолучитьДанныеНоменклатурыАнализов(Лаборатория)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("ДеревоНоменклатуры");
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	ДеревоНоменклатуры.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоНоменклатуры.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("НоменклатураМедицинскихУслуг", Новый ОписаниеТипов("СправочникСсылка.НоменклатураМедицинскихУслуг"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СитиЛаб_Справочники_Исследования.Code КАК Код,
	|	ВЫРАЗИТЬ(СитиЛаб_Справочники_Исследования.Name КАК СТРОКА(1000)) КАК Наименование,
	|	СитиЛаб_Справочники_Группы.Code КАК КодГруппы,
	|	ВЫРАЗИТЬ(СитиЛаб_Справочники_Группы.Name КАК СТРОКА(500)) КАК НаименованиеГруппы,
	|	СитиЛаб_Справочники_Исследования.Идентификатор КАК Идентификатор,
	|	ВЫРАЗИТЬ(СитиЛаб_Справочники_Исследования.ПримечаниеИсследования КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ
	|	РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники_Группы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ГруппыИсследований КАК СитиЛаб_ГруппыИсследований
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники_Исследования
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_БиоматериалыИсследований КАК СитиЛаб_БиоматериалыИсследований
	|				ПО (СитиЛаб_БиоматериалыИсследований.Лаборатория = &Лаборатория)
	|					И (СитиЛаб_Справочники_Исследования.ИмяСправочника = ""target"")
	|					И СитиЛаб_Справочники_Исследования.Идентификатор = СитиЛаб_БиоматериалыИсследований.Target
	|			ПО (СитиЛаб_ГруппыИсследований.Лаборатория = &Лаборатория)
	|				И (СитиЛаб_Справочники_Исследования.Лаборатория = &Лаборатория)
	|				И СитиЛаб_ГруппыИсследований.Target = СитиЛаб_Справочники_Исследования.Идентификатор
	|				И (СитиЛаб_Справочники_Исследования.ИмяСправочника = ""target"")
	|		ПО (СитиЛаб_ГруппыИсследований.Лаборатория = &Лаборатория)
	|			И (СитиЛаб_Справочники_Группы.Лаборатория = &Лаборатория)
	|			И СитиЛаб_Справочники_Группы.Идентификатор = СитиЛаб_ГруппыИсследований.Department
	|			И (СитиЛаб_Справочники_Группы.ИмяСправочника = ""department"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодГруппы,
	|	Код
	|ИТОГИ
	|	МАКСИМУМ(Код),
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(Идентификатор),
	|	МАКСИМУМ(Комментарий)
	|ПО
	|	КодГруппы,
	|	НаименованиеГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СитиЛаб_Справочники_Исследования.Идентификатор КАК ИдентификаторИсследования,
	|	СитиЛаб_Справочники_МедУслуги.Code КАК КодМедУслуги
	|ИЗ
	|	РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники_МедУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники_Исследования
	|		ПО (СитиЛаб_Справочники_МедУслуги.Лаборатория = &Лаборатория)
	|			И (СитиЛаб_Справочники_МедУслуги.ИмяСправочника = ""medicalService"")
	|			И (СитиЛаб_Справочники_Исследования.ИмяСправочника = ""target"")
	|			И (ПОДСТРОКА(СитиЛаб_Справочники_Исследования.ИдентификаторМедицинскойУслуги, 1, 1) <> """")
	|			И (ПОДСТРОКА(СитиЛаб_Справочники_МедУслуги.Code, 1, 1) <> """")
	|			И СитиЛаб_Справочники_МедУслуги.Лаборатория = СитиЛаб_Справочники_Исследования.Лаборатория
	|			И СитиЛаб_Справочники_МедУслуги.Идентификатор = СитиЛаб_Справочники_Исследования.ИдентификаторМедицинскойУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураМедицинскихУслуг.Код КАК КодНМУ,
	|	НоменклатураМедицинскихУслуг.Ссылка КАК НМУ
	|ИЗ
	|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
	|ГДЕ
	|	НЕ НоменклатураМедицинскихУслуг.ЭтоГруппа
	|	И НЕ НоменклатураМедицинскихУслуг.ПометкаУдаления
	|	И НЕ НоменклатураМедицинскихУслуг.Архив
	|	И ПОДСТРОКА(НоменклатураМедицинскихУслуг.Код, 1, 1) <> """""
	;
	
	МассивРезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРезультатаЗапроса = МассивРезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаМедУслугиСитилаб = МассивРезультатыЗапроса[1].Выгрузить();
	ТаблицаСправочникНМУ = МассивРезультатыЗапроса[2].Выгрузить();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		ВыборкаГруппы = ВыборкаРезультатаЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппы.Следующий() Цикл
			КодГруппы = ВыборкаГруппы.КодГруппы;
			НаименованиеГруппы = ВыборкаГруппы.НаименованиеГруппы;
			СтрокаГруппы = ДеревоНоменклатуры.Строки.Добавить();
			СтрокаГруппы.ЭтоГруппа = Истина;
			СтрокаГруппы.Наименование = КодГруппы + ". " + НаименованиеГруппы;
			ВыборкаИсследования = ВыборкаГруппы.Выбрать();
			Пока ВыборкаИсследования.Следующий() Цикл
				СтрокаНоменклатуры = СтрокаГруппы.Строки.Добавить();
				СтрокаНоменклатуры.Наименование = ВыборкаИсследования.Наименование;
				СтрокаНоменклатуры.Код = ВыборкаИсследования.Код;
				СтрокаНоменклатуры.ID = ВыборкаИсследования.Идентификатор;
				СтрокаНоменклатуры.Комментарий = ВыборкаИсследования.Комментарий;
				
				СтрокаМедУслугиСитилаб = ТаблицаМедУслугиСитилаб.Найти(ВыборкаИсследования.Идентификатор, "ИдентификаторИсследования");
				Если СтрокаМедУслугиСитилаб <> Неопределено Тогда
					СтрокаСправочникНМУ = ТаблицаСправочникНМУ.Найти(СтрокаМедУслугиСитилаб.КодМедУслуги, "КодНМУ");
					Если СтрокаСправочникНМУ <> Неопределено Тогда
						СтрокаНоменклатуры.НоменклатураМедицинскихУслуг = СтрокаСправочникНМУ.НМУ;
					Иначе
						Разделитель = ".";
						ЭлементыКодаМедУслуги = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаМедУслугиСитилаб.КодМедУслуги, Разделитель);
						КоличествоЭлементов = ЭлементыКодаМедУслуги.Количество();
						Пока КоличествоЭлементов > 3 Цикл
							ЭлементыКодаМедУслуги.Удалить(КоличествоЭлементов - 1);
							КоличествоЭлементов = ЭлементыКодаМедУслуги.Количество();
							КодМедУслуги = СтрСоединить(ЭлементыКодаМедУслуги, Разделитель);
							СтрокаСправочникНМУ = ТаблицаСправочникНМУ.Найти(КодМедУслуги, "КодНМУ");
							
							Если СтрокаСправочникНМУ <> Неопределено Тогда
								СтрокаНоменклатуры.НоменклатураМедицинскихУслуг = СтрокаСправочникНМУ.НМУ;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Результат.ДеревоНоменклатуры = ДеревоНоменклатуры;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЦенАнализов(Лаборатория)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СитиЛаб_Справочники.Code КАК Код,
	|	СитиЛаб_УслугиИсследований.Target КАК ID,
	|	СитиЛаб_ЦеныУслуг.Pricelist КАК Прайслист,
	|	СитиЛаб_ЦеныУслуг.Service КАК ИдУслуги,
	|	СитиЛаб_ЦеныУслуг.Value КАК Цена
	|ИЗ
	|	РегистрСведений.СитиЛаб_БиоматериалыИсследований КАК СитиЛаб_БиоматериалыИсследований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_УслугиИсследований КАК СитиЛаб_УслугиИсследований
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ЦеныУслуг КАК СитиЛаб_ЦеныУслуг
	|				ПО СитиЛаб_УслугиИсследований.Service = СитиЛаб_ЦеныУслуг.Service
	|					И СитиЛаб_УслугиИсследований.Лаборатория = СитиЛаб_ЦеныУслуг.Лаборатория
	|					И (СитиЛаб_ЦеныУслуг.Value > 0)
	|			ПО СитиЛаб_Справочники.Идентификатор = СитиЛаб_УслугиИсследований.Target
	|				И СитиЛаб_Справочники.Лаборатория = СитиЛаб_УслугиИсследований.Лаборатория
	|		ПО СитиЛаб_БиоматериалыИсследований.Target = СитиЛаб_Справочники.Идентификатор
	|			И СитиЛаб_БиоматериалыИсследований.Лаборатория = СитиЛаб_Справочники.Лаборатория
	|			И (СитиЛаб_БиоматериалыИсследований.Лаборатория = &Лаборатория)
	|			И (СитиЛаб_Справочники.ИмяСправочника = ""target"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Цены = ЛабораторияСервер.ПустаяТаблицаЦен();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатЗапроса = РезультатЗапроса.Выгрузить();
		
		// Суммируем цены услуг, относящихся к одному исследованию.
		ТаблицаРезультатЗапроса.Свернуть("Код, ID, Прайслист", "Цена");
		Для Каждого СтрокаТаблицаРезультатЗапроса Из ТаблицаРезультатЗапроса Цикл
			ЗаполнитьЗначенияСвойств(Цены.Добавить(), СтрокаТаблицаРезультатЗапроса);
		КонецЦикла;
	КонецЕсли;
		
	Возврат Цены;
	
КонецФункции

// Возвращает признак использования сопоставления номенклатуры и идентификаторов исследований
// у других лабораторий с таким же видом внешних лабораторий.
// 
// Возвращаемое значение:
//  Булево 
//
Функция ЗапрещеноИспользованиеСопоставленияДругойЛабораторииЭтогоВида() Экспорт

	Возврат Истина;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КешНСИ

// Вызывается при заполнении кэша НСИ всех подключенных лабораторий.
//
Процедура ЗаполнитьКэшНСИЛаборатории() Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КэшНСИЛаборатории = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Номенклатура.Представление КАК ПредставлениеНоменклатуры,
	|	НоменклатураАнализов.Номенклатура.Комментарий КАК НоменклатураКомментарий,
	|	НоменклатураАнализов.Номенклатура.Родитель КАК Группа,
	|	НоменклатураАнализов.ID КАК ИД
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.СитиЛаб)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИД,
	|	ПредставлениеНоменклатуры";
	
	НоменклатураАнализов = Запрос.Выполнить().Выгрузить();
	КэшНСИЛаборатории.Вставить("НоменклатураАнализов", ОбщегоНазначения.ТаблицаЗначенийВМассив(НоменклатураАнализов));
	КэшНСИЛаборатории.Вставить("ПравилаАнализов", ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗаполнитьКешНСИ_ПравилаАнализов(НоменклатураАнализов.Скопировать(, "Лаборатория, ИД"))));
	
	// Получаем существующий кэш, либо создаем пустой.
	КэшНСИЛабораторий = ПараметрыСеанса.КешНСИЛабораторий.Получить();
	Если ТипЗнч(КэшНСИЛабораторий) <> Тип("Структура") Тогда
		КэшНСИЛабораторий = Новый Структура;
	КонецЕсли;
	
	// К существующему кэшу добавляем кэш СитиЛаб.
	КэшНСИЛабораторий.Вставить("СитиЛаб", КэшНСИЛаборатории);
	
	// При использовании интеграции с лабораторией Ситилаб, в кэш "НоменклатураГрупп" помещаем не ID, а код (Code) исследований Ситилаб, 
	// т.к. код (не ID) записывается в артикул номенклатуры.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СитиЛаб_Справочники.Лаборатория КАК Лаборатория,
	|	СитиЛаб_Справочники.Идентификатор КАК ИД,
	|	СитиЛаб_Справочники.Code КАК Code
	|ИЗ
	|	РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	|ГДЕ
	|	СитиЛаб_Справочники.ИмяСправочника = ""target"""
	;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Отбор = Новый Структура("Лаборатория, ИД");
	
	ТаблицаНоменклатураГрупп = Новый ТаблицаЗначений;
	ТаблицаНоменклатураГрупп.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатураГрупп.Колонки.Добавить("ПредставлениеНоменклатуры");
	ТаблицаНоменклатураГрупп.Колонки.Добавить("Группа");
	ТаблицаНоменклатураГрупп.Колонки.Добавить("ИД");
	ТаблицаНоменклатураГрупп.Колонки.Добавить("Лаборатория");
	ТаблицаНоменклатураГрупп.Колонки.Добавить("Комментарий");
	
	Для Каждого СтрокаНоменклатураГрупп Из КэшНСИЛабораторий.НоменклатураГрупп Цикл
		
		Если ЗначениеЗаполнено(СтрокаНоменклатураГрупп.Лаборатория)
			И ЗначениеЗаполнено(СтрокаНоменклатураГрупп.ИД)
		Тогда 
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаНоменклатураГрупп);
			СтрокиРезультат = ТаблицаРезультат.НайтиСтроки(Отбор);
			Если СтрокиРезультат.Количество() <> 0 Тогда 
				СтрокаНоменклатураГрупп.ИД = СтрокиРезультат[0].Code;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаНоменклатураГрупп = ТаблицаНоменклатураГрупп.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатураГрупп, СтрокаНоменклатураГрупп); 
		
	КонецЦикла; 
	
	// Отсортируем номенклатуру по идентификаторам для удобного представления в документе "Действия над анализами".
	ТаблицаНоменклатураГрупп.Сортировать("Лаборатория, ИД, ПредставлениеНоменклатуры");
	КэшНСИЛабораторий.НоменклатураГрупп = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаНоменклатураГрупп);
		
	// Сохраняем старый кэш + кэш СитиЛаб в параметры сеанса.
	ПараметрыСеанса.КешНСИЛабораторий = Новый ХранилищеЗначения(КэшНСИЛабораторий);
	
КонецПроцедуры

Функция ЗаполнитьКешНСИ_ПравилаАнализов(ИдентификаторыИсследований)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыИсследований", ИдентификаторыИсследований);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыИсследований.Лаборатория КАК Лаборатория,
	|	ИдентификаторыИсследований.ИД КАК ИдентификаторИсследования
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ИдентификаторыИсследований КАК ИдентификаторыИсследований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БиоматериалыИсследований.Лаборатория КАК Лаборатория,
	|	БиоматериалыИсследований.Target КАК ИдентификаторИсследования,
	|	БиоматериалыИсследований.bioMaterial КАК ИдентификаторБиоматериала,
	|	СитиЛаб_Справочники.Name КАК НаименованиеБиоматериала,
	|	СитиЛаб_Справочники.Code КАК КодБиоматериала
	|ПОМЕСТИТЬ втБиоматериалы
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_БиоматериалыИсследований КАК БиоматериалыИсследований
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	|			ПО БиоматериалыИсследований.Лаборатория = СитиЛаб_Справочники.Лаборатория
	|				И БиоматериалыИсследований.bioMaterial = СитиЛаб_Справочники.Идентификатор
	|				И (СитиЛаб_Справочники.ИмяСправочника = ""bioMaterial"")
	|		ПО Идентификаторы.Лаборатория = БиоматериалыИсследований.Лаборатория
	|			И Идентификаторы.ИдентификаторИсследования = БиоматериалыИсследований.Target
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБиоматериалы.Лаборатория КАК Лаборатория,
	|	втБиоматериалы.ИдентификаторИсследования КАК ИдентификаторИсследования,
	|	втБиоматериалы.ИдентификаторБиоматериала КАК ИдентификаторБиоматериала,
	|	втБиоматериалы.НаименованиеБиоматериала КАК НаименованиеБиоматериала,
	|	втБиоматериалы.КодБиоматериала КАК КодБиоматериала,
	|	СитиЛаб_Справочники.TargetType КАК ТипИсследования
	|ИЗ
	|	втБиоматериалы КАК втБиоматериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	|		ПО втБиоматериалы.Лаборатория = СитиЛаб_Справочники.Лаборатория
	|			И втБиоматериалы.ИдентификаторИсследования = СитиЛаб_Справочники.Идентификатор
	|			И (СитиЛаб_Справочники.ИмяСправочника = ""target"")"
	;
		
	ТаблицаПравилаАнализов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПравилаАнализов; 
	
КонецФункции

#КонецОбласти

#Область ЗаборАнализа

// Получает массив с параметрами забора для номенклатуры анализов.
//
// Параметры:
//  Номенклатура - Массив из СправочникСсылка.Номенклатура, Строка. 
//  Клиент	 	 - СправочникСсылка.Клиенты - клиент, для которого выполняется забор анализов.
// 
// Возвращаемое значение:
//   Массив - Массив из Структура:
//      * ЗначениеПоУмолчанию 	- Произвольный 
//   	* Наименование 			- Строка
//   	* Обязательный 			- Булево
//   	* Параметр 				- ПланВидовХарактеристикСсылка.ПараметрыЗабораАнализов
//
Функция ПолучитьПараметрыЗабора(Номенклатура, Клиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураАнализов.ID КАК ID,
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ втИсследования
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Номенклатура В(&Номенклатура)
	|	И НоменклатураАнализов.Лаборатория.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.СитиЛаб)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СитиЛаб_ПараметрыЗабора.СтандартноеПоле = ИСТИНА
	|			ТОГДА СитиЛаб_ПараметрыЗабора.Code
	|		ИНАЧЕ СитиЛаб_ПараметрыЗабора.Идентификатор
	|	КОНЕЦ КАК ИдентификаторПараметра,
	|	СитиЛаб_ПараметрыЗабора.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ втИдентификаторыПараметров
	|ИЗ
	|	втИсследования КАК втИсследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ПараметрыЗабораИсследований КАК СитиЛаб_ПараметрыЗабораИсследований
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ПараметрыЗабора КАК СитиЛаб_ПараметрыЗабора
	|			ПО СитиЛаб_ПараметрыЗабораИсследований.ИдентификаторПараметра = СитиЛаб_ПараметрыЗабора.Идентификатор
	|				И СитиЛаб_ПараметрыЗабораИсследований.СтандартноеПоле = СитиЛаб_ПараметрыЗабора.СтандартноеПоле
	|				И СитиЛаб_ПараметрыЗабораИсследований.Лаборатория = СитиЛаб_ПараметрыЗабора.Лаборатория
	|		ПО втИсследования.ID = СитиЛаб_ПараметрыЗабораИсследований.Target
	|			И втИсследования.Лаборатория = СитиЛаб_ПараметрыЗабораИсследований.Лаборатория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	IDПарам.Ссылка КАК Параметр,
	|	IDПарам.Ссылка.Наименование КАК Наименование,
	|	IDПарам.Ссылка.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ИСТИНА КАК Обязательный,
	|	IDПарам.ID КАК ИДПараметра,
	|	втИдентификаторыПараметров.Лаборатория КАК Лаборатория,
	|	ЛОЖЬ КАК Предопределенный
	|ИЗ
	|	втИдентификаторыПараметров КАК втИдентификаторыПараметров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК IDПарам
	|		ПО втИдентификаторыПараметров.ИдентификаторПараметра = IDПарам.ID
	|			И втИдентификаторыПараметров.Лаборатория.ВнешняяЛаборатория = IDПарам.ВидЛаборатории
	|			И (НЕ IDПарам.Ссылка.ПометкаУдаления)"
	;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	// Добавление дополнительных подчиненных параметров забора на основании загруженной справочной информации.
	Если ТаблицаРезультат.Количество() <> 0 Тогда 
		ТаблицаИДПараметров = ТаблицаРезультат.Скопировать(, "ИДПараметра, Лаборатория");
		ПолучитьДополнительныеПараметрыЗабора(ТаблицаРезультат, ТаблицаИДПараметров);
	КонецЕсли;
	
	// Добавление дополнительных параметров забора независимо от выбранных исследований
	// в целях заполнения используемых по-умолчанию в заявке в лабораторию стандартных полей (stdField)
	// для пациентов женского пола.
	Если ЗначениеЗаполнено(Клиент) Тогда
		Если Клиент.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("IDСтандартныеПоля", СтандартныеПоляИспользуемыеПоУмолчанию());
			Запрос.Текст =
			"ВЫБРАТЬ
			|	IDПарам.Ссылка КАК Параметр,
			|	IDПарам.Ссылка.Наименование КАК Наименование,
			|	IDПарам.Ссылка.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
			|	IDПарам.ID КАК ИДПараметра
			|ИЗ
			|	ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК IDПарам
			|ГДЕ
			|	НЕ IDПарам.Ссылка.ПометкаУдаления
			|	И IDПарам.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.СитиЛаб)
			|	И IDПарам.ID В (&IDСтандартныеПоля)"
			;
			ТаблицаРезультатСтандартныеПоля = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрТаблица Из ТаблицаРезультатСтандартныеПоля Цикл
				Если ТаблицаРезультат.Найти(СтрТаблица.ИДПараметра, "ИДПараметра") = Неопределено Тогда
					СтрокаТаблицаРезультат = ТаблицаРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаРезультат, СтрТаблица);
					СтрокаТаблицаРезультат.Обязательный = Ложь;
					СтрокаТаблицаРезультат.Предопределенный = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Добавление предопределенного обязательного параметра забора для указания срочности заявки.
	СрочностьЗаявки = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.СрочностьЗаявки;
	IDПараметров = СрочностьЗаявки.IDПараметров.НайтиСтроки(Новый Структура("ВидЛаборатории",
		Перечисления.ВнешниеЛаборатории.СитиЛаб));
		
	Если IDПараметров.Количество() > 0 Тогда
		СтрокаТаблицаРезультат = ТаблицаРезультат.Добавить();
		СтрокаТаблицаРезультат.Параметр = СрочностьЗаявки;
		СтрокаТаблицаРезультат.Наименование = СрочностьЗаявки.Наименование;
		СтрокаТаблицаРезультат.ЗначениеПоУмолчанию = СрочностьЗаявки.ЗначениеПоУмолчанию;
		СтрокаТаблицаРезультат.Обязательный = Истина;
		СтрокаТаблицаРезультат.ИДПараметра = IDПараметров[0].ID;
		СтрокаТаблицаРезультат.Предопределенный = Истина;
	КонецЕсли;
	
	ТаблицаРезультат.Сортировать("Предопределенный Убыв, Наименование");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРезультат);
	
КонецФункции

#Область Преаналитика

// Распределяет биоматериалы по контейнерам и возвращает данные контейнеров.
//
// Параметры:
//  ДанныеЗабора - Структура:
//  	* Исследования - ТаблицаЗначений:
//  		** ИД - УникальныйИдентификатор
//  		** ИзменениеЛаборатории 		- Булево
//  		** ИсходныйНомерСтроки 			- Число
//  		** Клиент 						- СправочникСсылка.Клиенты
//  		** КлючСтроки 					- Число
//  		** КодПробы 					- Строка
//  		** Лаборатория 					- СправочникСсылка.Лаборатории
//  		** Номенклатура 				- СправочникСсылка.Номенклатура
//  		** НомерСтроки 					- Число
//  	* ПравилаЗабора - ТаблицаЗначений:
//  		** Биоматериал 					- Строка
//  		** ВыборНесколькихПравилЗабора 	- Булево
//  		** ИДБиоматериала 				- Строка
//  		** ИДКонтейнера 				- Строка
//  		** ИдПравила 					- Строка
//  		** ИсходныйНомерСтроки 			- Число
//  		** КлючСтрокиИсследования 		- Число
//  		** Контейнер 					- Строка
//  		** НомерСтроки 					- Число
//  		** Обязательное 				- Булево
//  		** Пометка 						- Булево
//  		** Представление 				- Строка
// 
// Возвращаемое значение:
//   - ДеревоЗначений
//
Функция РаспределениеБиоматериаловПоКонтейнерам(ДанныеЗабора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
	Результат.Колонки.Добавить("ЭтоКонтейнер", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("НомерКонтейнера", ТипЧисло);
	Результат.Колонки.Добавить("КодПробы", ТипСтрока);
	Результат.Колонки.Добавить("ИДПравила", ТипСтрока);
	Результат.Колонки.Добавить("КлючСтрокиИсследования", ТипЧисло);
	Результат.Колонки.Добавить("НомерСтроки", ТипЧисло);
	Результат.Колонки.Добавить("Биоматериал", ТипСтрока);
	Результат.Колонки.Добавить("БиоматериалПредставление", ТипСтрока);
	Результат.Колонки.Добавить("Контейнер", ТипСтрока);
	Результат.Колонки.Добавить("КонтейнерПредставление", ТипСтрока);
	Результат.Колонки.Добавить("ИдАнализа", ТипСтрока);
	Результат.Колонки.Добавить("УсловияХранения", ТипСтрока);
	Результат.Колонки.Добавить("УсловияТранспортировки", ТипСтрока);
	Результат.Колонки.Добавить("ЦветКонтейнера", ТипСтрока);
	Результат.Колонки.Добавить("ПредставлениеАнализа", ТипСтрока);
	
	ПараметрыОтбораПустаяЛаборатория = Новый Структура;
	ПараметрыОтбораПустаяЛаборатория.Вставить("Лаборатория", Справочники.Лаборатории.ПустаяСсылка());
	ИсследованияБезЛаборатории = ДанныеЗабора.Исследования.НайтиСтроки(ПараметрыОтбораПустаяЛаборатория);
	
	Для Каждого СтрокаИсследования Из ИсследованияБезЛаборатории Цикл
		ДанныеЗабора.Исследования.Удалить(СтрокаИсследования);
	КонецЦикла;
	
	Исследования = ДанныеЗабора.Исследования.Скопировать(, "Лаборатория, Номенклатура, КлючСтроки");
	ПравилаЗабора = ДанныеЗабора.ПравилаЗабора.Скопировать(, "КлючСтрокиИсследования, ИДБиоматериала");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исследования", Исследования);
	Запрос.УстановитьПараметр("ПравилаЗабора", ПравилаЗабора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Исследования.Лаборатория КАК Справочник.Лаборатории) КАК Лаборатория,
	|	ВЫРАЗИТЬ(Исследования.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Исследования.КлючСтроки КАК ЧИСЛО(10, 0)) КАК КлючСтроки
	|ПОМЕСТИТЬ ИсследованияДокумента
	|ИЗ
	|	&Исследования КАК Исследования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЗабора.КлючСтрокиИсследования КАК КлючСтрокиИсследования,
	|	ПравилаЗабора.ИДБиоматериала КАК ИДБиоматериала
	|ПОМЕСТИТЬ ПравилаДокумента
	|ИЗ
	|	&ПравилаЗабора КАК ПравилаЗабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	ИсследованияДокумента.КлючСтроки КАК КлючСтроки,
	|	НоменклатураАнализов.ID КАК ИдентификаторИсследования,
	|	СитиЛаб_Справочники.Code КАК КодИсследования,
	|	ВЫРАЗИТЬ(СитиЛаб_Справочники.Name КАК СТРОКА(150)) КАК НаименованиеИсследования
	|ПОМЕСТИТЬ втИсследования
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсследованияДокумента КАК ИсследованияДокумента
	|		ПО НоменклатураАнализов.Лаборатория = ИсследованияДокумента.Лаборатория
	|			И НоменклатураАнализов.Номенклатура = ИсследованияДокумента.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	|		ПО НоменклатураАнализов.Лаборатория = СитиЛаб_Справочники.Лаборатория
	|			И НоменклатураАнализов.ID = СитиЛаб_Справочники.Идентификатор
	|			И (СитиЛаб_Справочники.ИмяСправочника = ""target"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИсследования.Лаборатория КАК Лаборатория,
	|	втИсследования.КлючСтроки КАК КлючСтроки,
	|	втИсследования.ИдентификаторИсследования КАК ИдентификаторИсследования,
	|	втИсследования.КодИсследования КАК КодИсследования,
	|	втИсследования.НаименованиеИсследования КАК НаименованиеИсследования,
	|	ПравилаДокумента.ИДБиоматериала КАК ИдентификаторБиоматериала
	|ПОМЕСТИТЬ втБиоматериалы
	|ИЗ
	|	втИсследования КАК втИсследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаДокумента КАК ПравилаДокумента
	|		ПО втИсследования.КлючСтроки = ПравилаДокумента.КлючСтрокиИсследования,
	|	РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втБиоматериалы.Лаборатория КАК Лаборатория,
	|	втБиоматериалы.КлючСтроки КАК КлючСтроки,
	|	втБиоматериалы.ИдентификаторИсследования КАК ИдентификаторИсследования,
	|	втБиоматериалы.КодИсследования КАК КодИсследования,
	|	втБиоматериалы.НаименованиеИсследования КАК НаименованиеИсследования,
	|	втБиоматериалы.ИдентификаторБиоматериала КАК ИдентификаторБиоматериала,
	|	СитиЛаб_Справочники.Code КАК КодБиоматериала,
	|	ВЫРАЗИТЬ(СитиЛаб_Справочники.Name КАК СТРОКА(150)) КАК НаименованиеБиоматериала
	|ИЗ
	|	втБиоматериалы КАК втБиоматериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	|		ПО втБиоматериалы.Лаборатория = СитиЛаб_Справочники.Лаборатория
	|			И втБиоматериалы.ИдентификаторБиоматериала = СитиЛаб_Справочники.Идентификатор
	|			И (СитиЛаб_Справочники.ИмяСправочника = ""bioMaterial"")
	|ИТОГИ
	|	МАКСИМУМ(ИдентификаторБиоматериала),
	|	МАКСИМУМ(НаименованиеБиоматериала)
	|ПО
	|	Лаборатория,
	|	КодБиоматериала";
	
	ВыборкаЛаборатории = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерКонтейнера = 0;
	
	Пока ВыборкаЛаборатории.Следующий() Цикл
		
		СтрокаЛаборатория = Результат.Строки.Добавить();
		СтрокаЛаборатория.Лаборатория = ВыборкаЛаборатории.Лаборатория;
		
		ВыборкаБиоматериалы = ВыборкаЛаборатории.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаБиоматериалы.Следующий() Цикл
		
			СтрокаБиоматериал = СтрокаЛаборатория.Строки.Добавить();
			НомерКонтейнера = НомерКонтейнера + 1;
			СтрокаБиоматериал.НомерКонтейнера = НомерКонтейнера;
			СтрокаБиоматериал.ЭтоКонтейнер = Истина;
			СтрокаБиоматериал.Контейнер = ВыборкаБиоматериалы.ИдентификаторБиоматериала;
			СтрокаБиоматериал.КонтейнерПредставление = ВыборкаБиоматериалы.НаименованиеБиоматериала;
			СтрокаБиоматериал.БиоМатериал = ВыборкаБиоматериалы.ИдентификаторБиоматериала;
			СтрокаБиоматериал.БиоматериалПредставление = ВыборкаБиоматериалы.НаименованиеБиоматериала;
			
			ВыборкаИсследования = ВыборкаБиоматериалы.Выбрать();
			
			Пока ВыборкаИсследования.Следующий() Цикл
				
				СтрокаИсследование = СтрокаБиоматериал.Строки.Добавить();
				СтрокаИсследование.КлючСтрокиИсследования = ВыборкаИсследования.КлючСтроки;
				СтрокаИсследование.ИдАнализа = ВыборкаИсследования.ИдентификаторИсследования;
				СтрокаИсследование.ПредставлениеАнализа = ВыборкаИсследования.НаименованиеИсследования;
				
			КонецЦикла;

		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НумерацияЗаявок

// Возвращает признак использования пулов номеров заявок в интеграции с Ситилаб-лабораториями.
// 
// Возвращаемое значение:
//   - Булево - Истина, если в настройках учета лабораторий включена интеграция с Ситилаб-лабораториями.  
//
Функция ИспользуютсяПулыНомеровЗаявокЛабораторий() Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

// Получает новый пул номеров заявок от веб-сервиса и сохраняет в РС "Пулы номеров заявок лабораторий".
//
// Параметры:
//  Лаборатория			- СправочникСсылка.Лаборатории - лаборатория, для которой необходимо запросить пул номеров заявок.
//  СообщенияОбОшибках	- Массив из Строка - сюда помещаются ошибки, полученные в процедурах и функциях при запросе пула номеров.
//						- Неопределено
// 
// Возвращаемое значение:
// 	- Структура:
//		* НачалоДиапазона 		- Число 
//		* ОкончаниеДиапазона 	- Число 
//	- Неопределено, если возникла ошибка при получении пула номеров.
//
Функция ЗапроситьДиапазонНомеровЗаявок(Лаборатория, СообщенияОбОшибках = Неопределено) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория, СообщенияОбОшибках);
	
	Если НастройкаВзаимодействия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ПолучитьСоединение(НастройкаВзаимодействия);
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетодВебСервиса = "RC_GetOrderCodeRange";
	
	Запрос = СоздатьЗапрос(МетодВебСервиса);
	
	ТелоЗапроса = СтрШаблон(ПолучитьШаблонЗапроса(МетодВебСервиса),
							НастройкаВзаимодействия.Логин,
							НастройкаВзаимодействия.Пароль,
							НастройкаВзаимодействия.РазмерДиапазонаНомеровЗаявок);
	
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщенияОбОшибках("ОшибкаПолученияДиапазонаНомеровЗаявок", Лаборатория));
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	СтрокаОтвета = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.УстановитьСтроку(СтрокаОтвета);
	
	ДиапазонНомеровЗаявок = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Возврат Новый Структура("НачалоДиапазона, ОкончаниеДиапазона", 
		Число(ДиапазонНомеровЗаявок.o.start), Число(ДиапазонНомеровЗаявок.o.end));
	
КонецФункции

// Получает новые номера из РС "Пулы номеров заявок лабораторий" и формирует коды проб.
//
// Параметры:
//  МассивКодыПробПустые - Массив из СтрокаТаблицыЗначений: 
//  	* Биоматериал 			- Строка
//  	* ДиапазонОтсутствует 	- Булево
//  	* КодПробы 				- Строка
//  	* Контейнер 			- Строка
//  	* Лаборатория 			- СправочникСсылка.Лаборатории
//  	* НомерКонтейнера 		- Число
//  	* Учтен 				- Булево
//  МассивДиапазонов	 - Массив из СтрокаТаблицыЗначений: 
//  	* Закрыт 				- Булево
//  	* Лаборатория 			- СправочникСсылка.Лаборатории
//  	* НачалоДиапазона 		- Число
//  	* ОкончаниеДиапазона 	- Число
//  	* ТекущийНомер 			- Число
//
Процедура ПолучитьНовыеНомераЗаявок(МассивСтрокиКодыПроб, МассивДиапазонов) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИдентификаторы		  = Новый Массив;
	МассивСтрокиКодыПробПустые	  = Новый Массив;
	МассивСтрокиКодыПробЗаполнены = Новый Массив;
	
	Лаборатория = Справочники.Лаборатории.ПустаяСсылка();
	
	Для Каждого СтрокаКодыПроб Из МассивСтрокиКодыПроб Цикл
		МассивИдентификаторы.Добавить(СтрокаКодыПроб.БиоМатериал);
		
		Если Не ЗначениеЗаполнено(Лаборатория) Тогда
			Лаборатория = СтрокаКодыПроб.Лаборатория;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаКодыПроб.КодПробы) Тогда
			СтрокаКодыПроб.Учтен = Истина;
			МассивСтрокиКодыПробЗаполнены.Добавить(СтрокаКодыПроб);
		Иначе
			МассивСтрокиКодыПробПустые.Добавить(СтрокаКодыПроб);
		КонецЕсли;
	КонецЦикла;			
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Получаем схему формирования штрихкода из настроек взаимодействия.
	// Указываем схему по-умолчанию, если она не заполнена в настройках.
	СхемаФормированияШтрихкода = НастройкиВзаимодействия.СхемаФормированияШтрихкода;
	Если СхемаФормированияШтрихкода = 0 Тогда
		СхемаФормированияШтрихкода = 1;
	КонецЕсли;
	
	Если СхемаФормированияШтрихкода = 1 Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторы);
		Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СитиЛаб_Справочники.Идентификатор КАК ИдентификаторБиоМатериала,
		|	СитиЛаб_Справочники.Code КАК КодБиоМатериала
		|ИЗ
		|	РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
		|ГДЕ
		|	СитиЛаб_Справочники.ИмяСправочника = ""bioMaterial""
		|	И СитиЛаб_Справочники.Идентификатор В(&Идентификаторы)
		|	И СитиЛаб_Справочники.Лаборатория = &Лаборатория";
		
		ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультатЗапроса.Количество() = 0 Тогда 
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	НомерЗаявки = 0;
	
	Для Каждого СтрокаКодыПробЗаполнены Из МассивСтрокиКодыПробЗаполнены Цикл
		НомерЗаявки = ПолучитьНомерЗаявкиИзКодаПробы(СтрокаКодыПробЗаполнены.КодПробы, СхемаФормированияШтрихкода);
		Если НомерЗаявки > 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НомерЗаявки = 0 Тогда
		НомерЗаявки = ПолучитьНомерЗаявкиИзДиапазоновНомеров(МассивДиапазонов, СхемаФормированияШтрихкода);
	КонецЕсли;
	
	Если НомерЗаявки > 0 Тогда
		СтрокаНомерЗаявки = Формат(НомерЗаявки, "ЧГ=0");
		
		Для Каждого СтрокаКодыПробПустые Из МассивСтрокиКодыПробПустые Цикл
			Если СхемаФормированияШтрихкода = 1 И ТаблицаРезультатЗапроса <> Неопределено Тогда
				СтрокаБиоМатериал = ТаблицаРезультатЗапроса.Найти(СтрокаКодыПробПустые.БиоМатериал, "ИдентификаторБиоМатериала");
				Если СтрокаБиоМатериал <> Неопределено Тогда
					СтрокаКодыПробПустые.КодПробы = СтрокаНомерЗаявки + СтрокаБиоМатериал.КодБиоМатериала;
				КонецЕсли;
			ИначеЕсли СхемаФормированияШтрихкода = 2 Тогда
				СтрокаКодыПробПустые.КодПробы = СтрокаНомерЗаявки;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаКодыПробПустые.КодПробы) Тогда
				СтрокаКодыПробПустые.Учтен = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак использования существующих в контейнерах кодов проб при получении номеров заявок и формировании
// кодов проб новых контейнеров в документе забора анализов в интеграции с Ситилаб-лабораториями.
// 
// Возвращаемое значение:
//  Булево
//
Функция ИспользуютсяСуществующиеКодыПробПриПолученииНомеровЗаявок() Экспорт
	
	Если ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Лимит количества пулов номеров заявок.
// 
// Возвращаемое значение:
//   - Число - лимит диапазонов номеров.
//
Функция ЛимитПуловНомеровЗаявок() Экспорт
	Возврат 2;
КонецФункции

Функция ДлинаНомераЗаявки(НастройкаВзаимодействия = Неопределено, СхемаФормированияШтрихкода = Неопределено)
	
	ДлинаНомераЗаявки = 9;
	
	Если СхемаФормированияШтрихкода = Неопределено Тогда
		Если НастройкаВзаимодействия = Неопределено Тогда
			Возврат ДлинаНомераЗаявки;
		Иначе
			СхемаФормированияШтрихкода = НастройкаВзаимодействия.СхемаФормированияШтрихкода;
		КонецЕсли;
	КонецЕсли;
	
	Если СхемаФормированияШтрихкода = 2 Тогда
		 ДлинаНомераЗаявки = 10;
	КонецЕсли;
	
	Возврат ДлинаНомераЗаявки;

КонецФункции

Функция ПолучитьНомерЗаявкиИзКодаПробы(Знач КодПробы, СхемаФормированияШтрихкода)
	
	НомерЗаявки = 0;
	
	Если КодПробыКорректен(КодПробы) Тогда
		
		ДлинаНомераЗаявки = ДлинаНомераЗаявки(, СхемаФормированияШтрихкода);
		СтрокаНомерЗаявки = Лев(КодПробы, ДлинаНомераЗаявки);
		
		Если СтрДлина(СтрокаНомерЗаявки) = ДлинаНомераЗаявки Тогда
			
			Попытка
				НомерЗаявки = Число(СтрокаНомерЗаявки);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерЗаявки;

КонецФункции

Функция ПолучитьНомерЗаявкиИзДиапазоновНомеров(Диапазоны, СхемаФормированияШтрихкода)
	
	НомерЗаявки = 0;
	СообщенияПользователю = Новый Массив;
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если Не (Диапазон.Закрыт Или ПулНомеровЗаявокСОшибками(Диапазон, СхемаФормированияШтрихкода, СообщенияПользователю)) Тогда
			Если Диапазон.ТекущийНомер < Диапазон.НачалоДиапазона Тогда
				НомерЗаявки = Диапазон.НачалоДиапазона;
			Иначе
				НомерЗаявки = Диапазон.ТекущийНомер + 1;
			КонецЕсли;
			
			Если НомерЗаявки >= Диапазон.ОкончаниеДиапазона Тогда
				Диапазон.Закрыт = Истина;
				Если НомерЗаявки > Диапазон.ОкончаниеДиапазона Тогда
					НомерЗаявки = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если НомерЗаявки > 0 Тогда
				Диапазон.ТекущийНомер = НомерЗаявки;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НомерЗаявки = 0 И СообщенияПользователю.Количество() > 0 Тогда
		Для Каждого Сообщение Из СообщенияПользователю Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НомерЗаявки;

КонецФункции

Функция ПулНомеровЗаявокСОшибками(Диапазон, СхемаФормированияШтрихкода, СообщенияПользователю)
	
	НайденыОшибки = Ложь;
	
	ДлинаНомераЗаявки = ДлинаНомераЗаявки(, СхемаФормированияШтрихкода);
	
	Если СтрДлина(Формат(Диапазон.НачалоДиапазона, "ЧГ=0")) <> ДлинаНомераЗаявки
		Или СтрДлина(Формат(Диапазон.ОкончаниеДиапазона, "ЧГ=0")) <> ДлинаНомераЗаявки
	Тогда
		НайденыОшибки = Истина;
		ШаблонСтроки = НСтр("ru = 'Ошибка при получении номеров заявок лаборатории %1:
								  |значения в пуле номеров заявок %2 - %3 должны состоять из %4 цифр.'");
		Сообщение = СтрШаблон(ШаблонСтроки, Строка(Диапазон.Лаборатория), Строка(Диапазон.НачалоДиапазона),
			Строка(Диапазон.ОкончаниеДиапазона), Строка(ДлинаНомераЗаявки));
		СообщенияПользователю.Добавить(Сообщение);
	КонецЕсли;
	
	Если Диапазон.ОкончаниеДиапазона < Диапазон.НачалоДиапазона Тогда
		НайденыОшибки = Истина;
		ШаблонСтроки = НСтр("ru = 'Ошибка при получении номеров заявок лаборатории %1:
								  |окончание диапазона %2 не должно быть меньше начала диапазона %3.'");
		Сообщение = СтрШаблон(ШаблонСтроки, Строка(Диапазон.Лаборатория), Строка(Диапазон.НачалоДиапазона),
			Строка(Диапазон.ОкончаниеДиапазона));
		СообщенияПользователю.Добавить(Сообщение);
	КонецЕсли;
	
	Возврат НайденыОшибки;
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами_ПрограммныйИнтерфейс // Отправка заказов и получение результатов

// Отправяет опись заказов во внешнюю лабораторию.
//
// Параметры:
//  ОписьЗаказов - ДокументСсылка.ОписьЗаказовЛаборатории - опись заказов, отправляемая во внешнюю лабораторию.   
// 
// Возвращаемое значение:
//   - Булево - Ложь, если возникла ошибка при отправке описи заказов. 
//	 - Массив из Структура:
//   	* КодПробы 	- Строка
//   	* Тип 		- Строка
//   	* Контейнер - Строка
//
Функция ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(ОписьЗаказов) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='В настройках медицинского учета отключена интеграция с Ситилаб-лабораториями!'"));
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивРезультат = Новый Массив;
	
	Лаборатория = ОписьЗаказов.Лаборатория;
	НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	
	Если НастройкаВзаимодействия = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СообщенияОбОшибках("ОтсутствуетНастройка", Лаборатория));
		Возврат Ложь;
	КонецЕсли;
	
	Соединение = ПолучитьСоединение(НастройкаВзаимодействия);
	
	Если Соединение = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СообщенияОбОшибках("ОшибкаПодключения", Лаборатория));
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаНомераЗаявки = ДлинаНомераЗаявки(НастройкаВзаимодействия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Клиент.Фамилия КАК КлиентФамилия,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Клиент.Имя КАК КлиентИмя,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Клиент.Отчество КАК КлиентОтчество,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Клиент.Пол КАК КлиентПол,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Клиент.ДатаРождения КАК КлиентДатаРождения,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Клиент КАК Клиент,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Анонимно КАК Анонимно,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка КАК Ссылка,
	|	ЗаказВоВнешнююЛабораториюИсследования.КодПробы КАК КодПробы,
	|	ЗаказВоВнешнююЛабораториюИсследования.Номенклатура КАК Номенклатура,
	|	ЗаказВоВнешнююЛабораториюИсследования.ИД КАК ИД,
	|	ДействияНадАнализами.Ссылка КАК ДокументАнализов,
	|	НоменклатураАнализов.ID КАК ID
	|ИЗ
	|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами КАК ДействияНадАнализами
	|		ПО ЗаказВоВнешнююЛабораториюИсследования.ИД = ДействияНадАнализами.Исследования.ИД
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка В (&Заказы))
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Создан))
	|			И (НЕ ЗаказВоВнешнююЛабораториюИсследования.Ссылка.ПометкаУдаления)
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Создан))
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Лаборатория = &Лаборатория)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ПО ЗаказВоВнешнююЛабораториюИсследования.Номенклатура = НоменклатураАнализов.Номенклатура
	|			И ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Лаборатория = НоменклатураАнализов.Лаборатория
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Лаборатория = &Лаборатория)"
	; 	
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);					  
	Запрос.УстановитьПараметр("Заказы", ОписьЗаказов.СписокЗаказов.ВыгрузитьКолонку("ЗаказВЛабораторию"));					  
	Результат = Запрос.Выполнить();
		
	Если Не Результат.Пустой() Тогда
		
		ТаблицаРезультат =  Запрос.Выполнить().Выгрузить();
		ТаблицаРезультат.Колонки.Добавить("НомерЗаявки");
		
		// Определяем номер заявки из кода пробы в соответствии с настройками взаимодействия.
		Для Каждого СтрТаблица Из ТаблицаРезультат Цикл
			СтрТаблица.НомерЗаявки = Лев(СтрТаблица.КодПробы, ДлинаНомераЗаявки);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументыАнализов", ТаблицаРезультат.ВыгрузитьКолонку("ДокументАнализов"));
		Запрос.УстановитьПараметр("Лаборатория", Лаборатория);					  
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СитиЛаб_ПараметрыЗабора.Лаборатория КАК Лаборатория,
		|	ВЫБОР
		|		КОГДА СитиЛаб_ПараметрыЗабора.СтандартноеПоле = ИСТИНА
		|			ТОГДА СитиЛаб_ПараметрыЗабора.Code
		|		ИНАЧЕ СитиЛаб_ПараметрыЗабора.Идентификатор
		|	КОНЕЦ КАК Идентификатор,
		|	СитиЛаб_ПараметрыЗабора.СтандартноеПоле КАК СтандартноеПоле,
		|	СитиЛаб_ПараметрыЗабора.userDirectory КАК userDirectory
		|ПОМЕСТИТЬ ПараметрыЗабораЛаборатории
		|ИЗ
		|	РегистрСведений.СитиЛаб_ПараметрыЗабора КАК СитиЛаб_ПараметрыЗабора
		|ГДЕ
		|	СитиЛаб_ПараметрыЗабора.Лаборатория = &Лаборатория
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияНадАнализамиПараметрыЗабора.Ссылка КАК ДействияНадАнализами,
		|	ДействияНадАнализамиПараметрыЗабора.Параметр КАК Параметр,
		|	ДействияНадАнализамиПараметрыЗабора.Значение КАК Значение,
		|	ДействияНадАнализамиПараметрыЗабора.Обязательный КАК Обязательный,
		|	ДействияНадАнализамиПараметрыЗабора.Заполнен КАК Заполнен,
		|	ПараметрыЗабораАнализовIDПараметров.ID КАК ИДПараметра,
		|	ПараметрыЗабораЛаборатории.userDirectory КАК userDirectory,
		|	ПараметрыЗабораЛаборатории.Лаборатория КАК Лаборатория,
		|	ПараметрыЗабораЛаборатории.СтандартноеПоле КАК СтандартноеПоле
		|ПОМЕСТИТЬ ПараметрыДокументовЗабора
		|ИЗ
		|	Документ.ДействияНадАнализами.ПараметрыЗабора КАК ДействияНадАнализамиПараметрыЗабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗабораЛаборатории КАК ПараметрыЗабораЛаборатории
		|			ПО ПараметрыЗабораАнализовIDПараметров.ID = ПараметрыЗабораЛаборатории.Идентификатор
		|		ПО ДействияНадАнализамиПараметрыЗабора.Параметр = ПараметрыЗабораАнализовIDПараметров.Ссылка
		|			И (ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.СитиЛаб))
		|			И (ДействияНадАнализамиПараметрыЗабора.Ссылка В (&ДокументыАнализов))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПараметрыЗабораЛаборатории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыДокументовЗабора.ДействияНадАнализами КАК ДействияНадАнализами,
		|	ПараметрыДокументовЗабора.Параметр КАК Параметр,
		|	ПараметрыДокументовЗабора.Значение КАК Значение,
		|	ПараметрыДокументовЗабора.ИДПараметра КАК ИДПараметра,
		|	ПараметрыДокументовЗабора.userDirectory КАК userDirectory,
		|	ПараметрыДокументовЗабора.Лаборатория КАК Лаборатория,
		|	ЗначенияПараметровЗабораIDЗначения.ID КАК ИДЗначения
		|ПОМЕСТИТЬ ЗначенияПараметровПредварительно
		|ИЗ
		|	ПараметрыДокументовЗабора КАК ПараметрыДокументовЗабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗначенияПараметровЗабора.IDЗначения КАК ЗначенияПараметровЗабораIDЗначения
		|		ПО ПараметрыДокументовЗабора.Параметр = ЗначенияПараметровЗабораIDЗначения.Ссылка.Владелец
		|			И ПараметрыДокументовЗабора.Значение = ЗначенияПараметровЗабораIDЗначения.Ссылка
		|			И (ЗначенияПараметровЗабораIDЗначения.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.СитиЛаб))
		|			И (НЕ ПараметрыДокументовЗабора.СтандартноеПоле)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПараметровПредварительно.ДействияНадАнализами КАК ДействияНадАнализами,
		|	ЗначенияПараметровПредварительно.Параметр КАК Параметр,
		|	ЗначенияПараметровПредварительно.Значение КАК Значение,
		|	ЗначенияПараметровПредварительно.ИДПараметра КАК ИДПараметра,
		|	ЗначенияПараметровПредварительно.ИДЗначения КАК ИДЗначения,
		|	СитиЛаб_ЗначенияПараметровЗабора.vId КАК ИДЗначенияПараметраДляОтправки,
		|	ВЫБОР
		|		КОГДА СитиЛаб_ЗначенияПараметровЗабора.propertyToSend = ""Id""
		|			ТОГДА СитиЛаб_ЗначенияПараметровЗабора.vId
		|		КОГДА СитиЛаб_ЗначенияПараметровЗабора.propertyToSend = ""Code""
		|			ТОГДА СитиЛаб_ЗначенияПараметровЗабора.vCode
		|		ИНАЧЕ СитиЛаб_ЗначенияПараметровЗабора.vName
		|	КОНЕЦ КАК ЗначениеПараметраДляОтправки,
		|	ЗначенияПараметровПредварительно.Лаборатория КАК Лаборатория,
		|	СитиЛаб_ЗначенияПараметровЗабора.vUserFieldGroups КАК vUserFieldGroups
		|ПОМЕСТИТЬ ЗначенияПараметровДокументовЗабора
		|ИЗ
		|	РегистрСведений.СитиЛаб_ЗначенияПараметровЗабора КАК СитиЛаб_ЗначенияПараметровЗабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПараметровПредварительно КАК ЗначенияПараметровПредварительно
		|		ПО (ЗначенияПараметровПредварительно.ИДЗначения = СитиЛаб_ЗначенияПараметровЗабора.vCode)
		|			И (ЗначенияПараметровПредварительно.userDirectory = СитиЛаб_ЗначенияПараметровЗабора.Идентификатор)
		|			И (ЗначенияПараметровПредварительно.Лаборатория = СитиЛаб_ЗначенияПараметровЗабора.Лаборатория)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗначенияПараметровПредварительно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыДокументовЗабора.ДействияНадАнализами КАК ДействияНадАнализами,
		|	ПараметрыДокументовЗабора.Параметр КАК Параметр,
		|	ПараметрыДокументовЗабора.Значение КАК Значение,
		|	ПараметрыДокументовЗабора.Обязательный КАК Обязательный,
		|	ПараметрыДокументовЗабора.Заполнен КАК Заполнен,
		|	ПараметрыДокументовЗабора.ИДПараметра КАК ИДПараметра,
		|	ПараметрыДокументовЗабора.СтандартноеПоле КАК СтандартноеПоле
		|ИЗ
		|	ПараметрыДокументовЗабора КАК ПараметрыДокументовЗабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПараметровДокументовЗабора.ДействияНадАнализами КАК ДействияНадАнализами,
		|	ЗначенияПараметровДокументовЗабора.Параметр КАК Параметр,
		|	ЗначенияПараметровДокументовЗабора.Значение КАК Значение,
		|	ЗначенияПараметровДокументовЗабора.ИДПараметра КАК ИДПараметра,
		|	ЗначенияПараметровДокументовЗабора.ИДЗначения КАК ИДЗначения,
		|	ЗначенияПараметровДокументовЗабора.ИДЗначенияПараметраДляОтправки КАК ИДЗначенияПараметраДляОтправки,
		|	ЗначенияПараметровДокументовЗабора.ЗначениеПараметраДляОтправки КАК ЗначениеПараметраДляОтправки
		|ИЗ
		|	ЗначенияПараметровДокументовЗабора КАК ЗначенияПараметровДокументовЗабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПараметровДокументовЗабора.ДействияНадАнализами КАК ДействияНадАнализами,
		|	СитиЛаб_ГруппыПараметровЗабора.userField КАК ИДДопПараметра,
		|	ПараметрыЗабораАнализовIDПараметров.Ссылка КАК ДопПараметр
		|ИЗ
		|	ЗначенияПараметровДокументовЗабора КАК ЗначенияПараметровДокументовЗабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СитиЛаб_ГруппыПараметровЗабора КАК СитиЛаб_ГруппыПараметровЗабора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
		|			ПО СитиЛаб_ГруппыПараметровЗабора.userField = ПараметрыЗабораАнализовIDПараметров.ID
		|				И СитиЛаб_ГруппыПараметровЗабора.Лаборатория.ВнешняяЛаборатория = ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории
		|		ПО ЗначенияПараметровДокументовЗабора.vUserFieldGroups = СитиЛаб_ГруппыПараметровЗабора.userFieldGroups
		|			И ЗначенияПараметровДокументовЗабора.Лаборатория = СитиЛаб_ГруппыПараметровЗабора.Лаборатория"
		;
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаАнализПараметрыЗабора = ПакетЗапроса[6].Выгрузить();
		ТаблицаАнализЗначенияПараметровЗабора = ПакетЗапроса[7].Выгрузить();
		ТаблицаАнализДопПараметрыЗабора = ПакетЗапроса[8].Выгрузить();
		
		ПредупреждениеДопПараметры = "";
		
		Для Каждого СтрТаблица Из ТаблицаАнализДопПараметрыЗабора Цикл
			СтрокиТаблицаАнализПараметрыЗабора = ТаблицаАнализПараметрыЗабора.НайтиСтроки(
				Новый Структура("ДействияНадАнализами, Параметр, ИДПараметра",
				СтрТаблица.ДействияНадАнализами, СтрТаблица.ДопПараметр, СтрТаблица.ИДДопПараметра));	
				
			Для Каждого СтрТаблицаАнализПараметрыЗабора Из СтрокиТаблицаАнализПараметрыЗабора Цикл
				Если Не СтрТаблицаАнализПараметрыЗабора.Заполнен Тогда
					СтрокаСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='- ""%1"" в документе ""%2""'"),
						Строка(СтрТаблицаАнализПараметрыЗабора.Параметр), Строка(СтрТаблицаАнализПараметрыЗабора.ДействияНадАнализами));
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ПредупреждениеДопПараметры, СтрокаСообщение, Символы.ПС);	
				КонецЕсли;					
			КонецЦикла;	
		КонецЦикла;
		
		Если Не ПустаяСтрока(ПредупреждениеДопПараметры) Тогда
			ПредупреждениеДопПараметрыИтог = НСтр("ru='Заполните параметры забора в документах:'"); 
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ПредупреждениеДопПараметрыИтог, ПредупреждениеДопПараметры, Символы.ПС);
			ОбщегоНазначения.СообщитьОбОшибке(ПредупреждениеДопПараметрыИтог);
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаВсеИДИсследований = ТаблицаРезультат.Скопировать(, "ID");
		ТаблицаВсеИДИсследований.Свернуть("ID");
		МассивВсеИДИсследований = ТаблицаВсеИДИсследований.ВыгрузитьКолонку("ID");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
		Запрос.УстановитьПараметр("Target", МассивВсеИДИсследований);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СитиЛаб_ПараметрыЗабораИсследований.Target КАК ИДИсследования,
		|	СитиЛаб_ПараметрыЗабораИсследований.ИдентификаторПараметра КАК ИДПараметра
		|ИЗ
		|	РегистрСведений.СитиЛаб_ПараметрыЗабораИсследований КАК СитиЛаб_ПараметрыЗабораИсследований
		|ГДЕ
		|	СитиЛаб_ПараметрыЗабораИсследований.Лаборатория = &Лаборатория
		|	И СитиЛаб_ПараметрыЗабораИсследований.Target В(&Target)
		|	И НЕ СитиЛаб_ПараметрыЗабораИсследований.СтандартноеПоле"
		;
		ТаблицаПараметрыЗабора = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаПараметрыЗабора.Количество() <> 0 Тогда
			ПолучитьДополнительныеПараметрыЗабораДляОтправкиЗаказа(Лаборатория, ТаблицаПараметрыЗабора); 
		КонецЕсли;
		ТаблицаПараметрыЗабора.Свернуть("ИДИсследования, ИДПараметра");
			
		МетодВебСервиса = "RC_InsertInquiries";
		
		ТаблицаНомераЗаявок = ТаблицаРезультат.Скопировать(, "НомерЗаявки");
		ТаблицаНомераЗаявок.Свернуть("НомерЗаявки");
				
		Заявки = "";
		СписокЗаказыСсылка = Новый Массив;
		ОшибкиЗаполненияЗаявок = Новый Массив;
		
		Для Каждого СтрокаТаблицаНомераЗаявок Из ТаблицаНомераЗаявок Цикл
			НомерЗаявки = СтрокаТаблицаНомераЗаявок.НомерЗаявки;
			
			ТаблицаЗаказов = ТаблицаРезультат.Скопировать(Новый Структура("НомерЗаявки", НомерЗаявки));
			ТаблицаИсследования = ТаблицаЗаказов.Скопировать(, "Номенклатура, ID"); 
			ТаблицаИсследования.Свернуть("Номенклатура, ID");
			ТаблицаЗаказов.Свернуть("Ссылка, ДокументАнализов, Анонимно, Клиент, КлиентФамилия, КлиентИмя, КлиентОтчество, КлиентПол, КлиентДатаРождения");
			
			Для Каждого Заказ Из ТаблицаЗаказов Цикл
				ЗапросВебСервиса = СоздатьЗапрос(МетодВебСервиса);
				Если СписокЗаказыСсылка.Найти(Заказ.Ссылка) = Неопределено Тогда  
					СписокЗаказыСсылка.Добавить(Заказ.Ссылка);
				КонецЕсли;
					
				ЗаполнениеЗаявки = "<content><o><o>";
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""internalNr"" v=""%1"" />", НомерЗаявки);
				
				Срочность = "10";
				СтрокиСрочностьЗаявки = Заказ.ДокументАнализов.ПараметрыЗабора.НайтиСтроки(
					Новый Структура("Параметр", ПланыВидовХарактеристик.ПараметрыЗабораАнализов.СрочностьЗаявки));
					
				Если СтрокиСрочностьЗаявки.Количество() > 0 Тогда
					ЗначениеСрочностьЗаявки = СтрокиСрочностьЗаявки[0].Значение;
					
					Если ЗначениеЗаполнено(ЗначениеСрочностьЗаявки) Тогда
						СтрокиIDЗначения = ЗначениеСрочностьЗаявки.IDЗначения.НайтиСтроки(
							Новый Структура("ВидЛаборатории", Перечисления.ВнешниеЛаборатории.СитиЛаб));
							
						Если СтрокиIDЗначения.Количество() > 0 Тогда
							Срочность = СтрокиIDЗначения[0].ID;
						КонецЕсли;
						
					КонецЕсли;
						
				КонецЕсли;
				
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""priority"" v=""%1"" />", Срочность);
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""delivered"" v=""%1"" />", "False");
				
				// Указываем идентификатор регистрационной формы, если он заполнен в настройках взаимодействия.
				ИдентификаторРегистрационнойФормы = НастройкаВзаимодействия.ИдентификаторРегистрационнойФормы;
				Если Не ПустаяСтрока(ИдентификаторРегистрационнойФормы) Тогда
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<r n=""requestForm"" i=""%1"" />", ИдентификаторРегистрационнойФормы);
				КонецЕсли;
				
				// Данные клиента.        
				Если Не Заказ.Анонимно Тогда
					КлиентИмя 		= Заказ.КлиентИмя; 
					КлиентОтчество 	= Заказ.КлиентОтчество; 
					КлиентФамилия 	= Заказ.КлиентФамилия;
					КлиентТелефон   = ОпределитьКонтактныйТелефон(КонтактнаяИнформацияСерверПереопределяемый.ПолучитьТелефоныВладельцаСоСлужебнымиПолями(Заказ.Клиент,
						Справочники.ВидыКонтактнойИнформации.ТелефонСотовый));
					КлиентПочта = ФорматEmail(КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Заказ.Клиент,
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, Ложь));
				Иначе
					КлиентИмя 		= "Аноним"; 
					КлиентОтчество 	= "Аноним"; 
					КлиентФамилия 	= "Аноним";
					КлиентТелефон   = "";
					КлиентПочта     = "";
				КонецЕсли;    			
				
				Если Заказ.КлиентПол = Перечисления.ПолФизическихЛиц.Мужской Тогда
					Пол = "1";
				ИначеЕсли Заказ.КлиентПол = Перечисления.ПолФизическихЛиц.Женский Тогда
					Пол = "2";
				Иначе
					Пол = "0";
				КонецЕсли;
				
				ДатаРожденияКлиента = ?(ЗначениеЗаполнено(Заказ.КлиентДатаРождения), Заказ.КлиентДатаРождения, Дата(1900,1,1));
				КлиентДеньРождения = День(ДатаРожденияКлиента);
				КлиентМесяцРождения = Месяц(ДатаРожденияКлиента);
				КлиентГодРождения = Формат(Год(ДатаРожденияКлиента), "ЧГ=0");
				
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""firstName"" v=""%1"" />",	КлиентИмя);
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""middleName"" v=""%1"" />",	КлиентОтчество);
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""lastName"" v=""%1"" />",	КлиентФамилия);
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""birthDay"" v=""%1"" />",	КлиентДеньРождения);
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""birthMonth"" v=""%1"" />",	КлиентМесяцРождения);
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""birthYear"" v=""%1"" />",	КлиентГодРождения);	
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""sex"" v=""%1"" />",			Пол);
				
				ДатаВзятияБиоматериалаСтрокой = Формат(Заказ.ДокументАнализов.Дата, "ДФ='dd.MM.yyyy HH:mm:ss'");
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""samplingDate"" v=""%1"" />", 		ДатаВзятияБиоматериалаСтрокой);
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""sampleDeliveryDate"" v=""%1"" />", 	ДатаВзятияБиоматериалаСтрокой);
				
				// Стандартные поля.
				СтандартныеПоля = СтандартныеПоляИспользуемыеПоУмолчанию();				
				Для Каждого Элемент Из СтандартныеПоля Цикл
					ЗначениеПараметра = 0;
					Отбор = Новый Структура("ДействияНадАнализами, Заполнен, СтандартноеПоле, ИДПараметра",
						Заказ.ДокументАнализов, Истина, Истина, Элемент);
					СтрокиТаблица = ТаблицаАнализПараметрыЗабора.НайтиСтроки(Отбор);
					
					Для Каждого СтрТаблица Из СтрокиТаблица Цикл
						ЗначениеПараметра = СтрТаблица.Значение;
					КонецЦикла;
					
					ИДПараметра = НРег(Лев(Элемент, 1)) + Прав(Элемент, СтрДлина(Элемент) - 1);
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""%1"" v=""%2"" />", ИДПараметра, Строка(ЗначениеПараметра));
				КонецЦикла;
				
				// Идентификатор заказчика.
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<r n=""custHospital"" i=""%1"" />",НастройкаВзаимодействия.ИдентификаторЗаказчика);
				
				мсИД = ТаблицаИсследования.ВыгрузитьКолонку("ID");
				
				МассивПараметрыЗабора = Новый Массив;
				
				// Исследования.
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + "<s n=""targets"">";
				Для Каждого Исследование Из мсИД Цикл
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<r i=""%1"" />",Исследование);
					
					МассивПараметрыЗабораИсследования = ТаблицаПараметрыЗабора.НайтиСтроки(Новый Структура("ИДИсследования", Исследование));
					Для Каждого СтрокаПараметрыЗабораИсследования Из МассивПараметрыЗабораИсследования Цикл 
						МассивПараметрыЗабора.Добавить(СтрокаПараметрыЗабораИсследования.ИДПараметра);	
					КонецЦикла;				
				КонецЦикла;
				
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + "</s>";
				
				// Биоматериалы.
				СтрокиБиоМатериалы = Заказ.ДокументАнализов.Контейнеры.НайтиСтроки(Новый Структура("Лаборатория", Лаборатория));
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + "<s n=""biomaterials"">";
				МассивБиоматериалы = Новый Массив;
				Для Каждого СтрокаБиоМатериала Из СтрокиБиоМатериалы Цикл
					Если Не мсИД.Найти(СтрокаБиоМатериала.ИдАнализа) = Неопределено
						И МассивБиоматериалы.Найти(СтрокаБиоМатериала.БиоМатериал) = Неопределено  	
					Тогда
						
						ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<r i=""%1"" />", СтрокаБиоМатериала.БиоМатериал);	
						МассивБиоматериалы.Добавить(СтрокаБиоМатериала.БиоМатериал);
						
					КонецЕсли;	
				КонецЦикла; 
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + "</s>";
				
				// Пользовательские поля.
				ТаблицаПользовательскиеПоля = Новый ТаблицаЗначений;
				ТаблицаПользовательскиеПоля.Колонки.Добавить("ИДПоля");
				ТаблицаПользовательскиеПоля.Колонки.Добавить("ЗначениеПоля");
				ТаблицаПользовательскиеПоля.Колонки.Добавить("ИДЗначенияПоля");
				
				// Добавление контактной информации из профиля клиента в пользовательские поля
				// для отправки лабораторией уведомлений клиенту по СМС и E-mail.
				ИнформироватьПоСМС = НастройкаВзаимодействия.ИнформироватьКлиентовОСтатусеЗаказаПоСМС;
				ИнформироватьПоEmail = НастройкаВзаимодействия.ИнформироватьКлиентовОСтатусеЗаказаПоEmail;
				
				// Общие идентификаторы полей контактной информации.
				ИДПоля_Email = "17";
				ИДПоля_НомерТелефона = "18";
				ИДПоля_ИнформироватьПоСМС = "40";
				ИДПоля_ИнформироватьПоEmail = "41";
				
				Если ЗначениеЗаполнено(КлиентТелефон) Тогда
					СтрокаПоле = ТаблицаПользовательскиеПоля.Добавить();
					СтрокаПоле.ИДПоля = ИДПоля_НомерТелефона;
					СтрокаПоле.ЗначениеПоля = Строка(КлиентТелефон);
					
					СтрокаПоле = ТаблицаПользовательскиеПоля.Добавить();
					СтрокаПоле.ИДПоля = ИДПоля_ИнформироватьПоСМС;
					СтрокаПоле.ЗначениеПоля = Строка(?(ИнформироватьПоСМС, 1, 0));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КлиентПочта) Тогда
					СтрокаПоле = ТаблицаПользовательскиеПоля.Добавить();
					СтрокаПоле.ИДПоля = ИДПоля_Email;
					СтрокаПоле.ЗначениеПоля = Строка(КлиентПочта);
					
					СтрокаПоле = ТаблицаПользовательскиеПоля.Добавить();
					СтрокаПоле.ИДПоля = ИДПоля_ИнформироватьПоEmail;
					СтрокаПоле.ЗначениеПоля = Строка(?(ИнформироватьПоEmail, 1, 0));
				КонецЕсли;
				
				// Добавление параметров забора из документа забора анализов.
				Отбор = Новый Структура("ДействияНадАнализами, Заполнен, СтандартноеПоле", Заказ.ДокументАнализов, Истина, Ложь);
                ПараметрыЗабора = ТаблицаАнализПараметрыЗабора.НайтиСтроки(Отбор);
				Для Каждого СтрокаПараметра Из ПараметрыЗабора Цикл
					ЗначениеПараметра = СтрокаПараметра.Значение;
					Если Не ПустаяСтрока(Строка(ЗначениеПараметра)) Тогда
						IDПараметра = СтрокаПараметра.ИДПараметра;
						Если Не МассивПараметрыЗабора.Найти(IDПараметра) = Неопределено Тогда
							СтрокиТаблицаАнализПараметрыЗабора = ТаблицаАнализПараметрыЗабора.НайтиСтроки(
								Новый Структура("ДействияНадАнализами, Параметр, Значение, ИДПараметра, Обязательный",
								Заказ.ДокументАнализов, СтрокаПараметра.Параметр, ЗначениеПараметра, IDПараметра, Ложь));
							
							СтрокиТаблицаАнализДопПараметрыЗабора = ТаблицаАнализДопПараметрыЗабора.НайтиСтроки(
								Новый Структура("ДействияНадАнализами, ДопПараметр, ИДДопПараметра",
								Заказ.ДокументАнализов, СтрокаПараметра.Параметр, IDПараметра));
							
							Если СтрокиТаблицаАнализПараметрыЗабора.Количество() <> 0 И СтрокиТаблицаАнализДопПараметрыЗабора.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ИДПоля = Строка(IDПараметра);
							ЗначениеПоля = "";
							ИДЗначенияПоля = "";
							
							Если ТипЗнч(ЗначениеПараметра) = Тип("СправочникСсылка.ЗначенияПараметровЗабора") Тогда
								IDЗначения = ЗначениеПараметра.IDЗначения.Найти(Перечисления.ВнешниеЛаборатории.СитиЛаб, "ВидЛаборатории").ID;
								СтрокиТаблицаАнализЗначенияПараметровЗабора = ТаблицаАнализЗначенияПараметровЗабора.НайтиСтроки(
									Новый Структура("ДействияНадАнализами, Параметр, Значение, ИДПараметра, ИДЗначения",
									Заказ.ДокументАнализов, СтрокаПараметра.Параметр, ЗначениеПараметра, IDПараметра, IDЗначения));
									
								Если СтрокиТаблицаАнализЗначенияПараметровЗабора.Количество() <> 0 Тогда
									СтрТаблица = СтрокиТаблицаАнализЗначенияПараметровЗабора[0];
									ЗначениеПоля = Строка(СтрТаблица.ЗначениеПараметраДляОтправки);
									ИДЗначенияПоля = Строка(СтрТаблица.ИДЗначенияПараметраДляОтправки);
								КонецЕсли;
							ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
								ЗначениеПоля = Формат(ЗначениеПараметра, "ДЛФ=D");
							ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Булево") Тогда
								ЗначениеПоля = ?(ЗначениеПараметра, "true", "false");
							ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
								ЗначениеПоля = Формат(ЗначениеПараметра, "ЧГ=0");
							Иначе
								ЗначениеПоля = Строка(ЗначениеПараметра);
							КонецЕсли;
							
							Если Не ПустаяСтрока(ИДПоля) И Не ПустаяСтрока(ЗначениеПоля) Тогда
								// Если в параметрах забора указан номер телефона, проверяем его
								// на соответствие формату и заменяем номер телефона из профиля клиента.
								Если ИДПоля = ИДПоля_НомерТелефона Тогда
									ЗначениеПоля = ФорматТелефона(ЗначениеПоля);
									Если Не ПустаяСтрока(ЗначениеПоля) Тогда
										СтрокаПоле = ТаблицаПользовательскиеПоля.Найти(ИДПоля_ИнформироватьПоСМС);
										Если СтрокаПоле = Неопределено Тогда
											СтрокаПоле = ТаблицаПользовательскиеПоля.Добавить();
											СтрокаПоле.ИДПоля = ИДПоля_ИнформироватьПоСМС;
											СтрокаПоле.ЗначениеПоля = Строка(?(ИнформироватьПоСМС, 1, 0));
										КонецЕсли;
									Иначе
										ШаблонСтроки = НСтр("ru='В документе ""%1"" некорректно указан параметр забора ""%2"".'");
										СообщениеОбОшибке = СтрШаблон(ШаблонСтроки, Строка(Заказ.ДокументАнализов), Строка(СтрокаПараметра.Параметр));
										ОшибкиЗаполненияЗаявок.Добавить(СообщениеОбОшибке);
									КонецЕсли;
								КонецЕсли;
								
								// Если в параметрах забора указан адрес электронной почты,
								// заменяем адрес электронной почты из профиля клиента.
								Если ИДПоля = ИДПоля_Email Тогда
									СтрокаПоле = ТаблицаПользовательскиеПоля.Найти(ИДПоля_ИнформироватьПоEmail);
									Если СтрокаПоле = Неопределено Тогда
										СтрокаПоле = ТаблицаПользовательскиеПоля.Добавить();
										СтрокаПоле.ИДПоля = ИДПоля_ИнформироватьПоEmail;
										СтрокаПоле.ЗначениеПоля = Строка(?(ИнформироватьПоEmail, 1, 0));
									КонецЕсли;
								КонецЕсли;
								
								// Проверяем наличие поля по идентификатору и добавляем, если отсутствует.
								// Если присутствует, заменяем значения.
								СтрокаПоле = ТаблицаПользовательскиеПоля.Найти(ИДПоля);
								Если СтрокаПоле = Неопределено Тогда
									СтрокаПоле = ТаблицаПользовательскиеПоля.Добавить();
								КонецЕсли;
								
								СтрокаПоле.ИДПоля = ИДПоля;
								СтрокаПоле.ЗначениеПоля = ЗначениеПоля;
								Если Не ПустаяСтрока(ИДЗначенияПоля) Тогда
									СтрокаПоле.ИДЗначенияПоля = ИДЗначенияПоля;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + "<s n=""userValues"">";
				
				Для Каждого СтрокаПоле Из ТаблицаПользовательскиеПоля Цикл
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + "<o>";
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<f n=""value"" v=""%1"" />", СтрокаПоле.ЗначениеПоля);
					
					Если ЗначениеЗаполнено(СтрокаПоле.ИДЗначенияПоля) Тогда
						ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<r n=""reference"" i=""%1"" />", СтрокаПоле.ИДЗначенияПоля);
					КонецЕсли;
					
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + СтрШаблон("<r n=""userField"" i=""%1"" />", СтрокаПоле.ИДПоля);
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + "<s n=""values"" />";
					ЗаполнениеЗаявки = ЗаполнениеЗаявки + "</o>";
				КонецЦикла;
			
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + "</s>";
				ЗаполнениеЗаявки = ЗаполнениеЗаявки + "</o><s /></o></content>";
				
				// Перед отправкой заявки ее содержание должно быть закодировано.
				ЗакодированныеДанные = УпаковатьBZIP2ИЗакодироватьВBase64(ЗаполнениеЗаявки);
				Заявки = Заявки + СтрШаблон("<f n=""inquiry"" id=""%1"" v=""%2"" />",НомерЗаявки, ЗакодированныеДанные);
				
			КонецЦикла;
		КонецЦикла;
		
		// При наличии ошибок заполнения заявок выводим сообщения пользователю.
		Если ОшибкиЗаполненияЗаявок.Количество() > 0 Тогда
			Для Каждого СообщениеОбОшибке Из ОшибкиЗаполненияЗаявок Цикл
				ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
			КонецЦикла;
			
			Возврат Ложь;
		КонецЕсли;
		
		ТелоЗапроса = СтрШаблон(ПолучитьШаблонЗапроса(МетодВебСервиса),
								НастройкаВзаимодействия.Логин,
								НастройкаВзаимодействия.Пароль,
								Заявки);
								
		МассивРезультат.Добавить(ТелоЗапроса);
													
		ЗапросВебСервиса.УстановитьТелоИзСтроки(ТелоЗапроса);
		Ответ = Соединение.ОтправитьДляОбработки(ЗапросВебСервиса);
		
		ТекстОтвета = РазобратьОтветЗапроса(Ответ);
		МассивРезультат.Добавить(ТекстОтвета);
		
		Результат = ПолучитьРезультатОтправкиЗаказов(ТекстОтвета);
		
		Если Результат = Неопределено Тогда 
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Произошла ошибка при отправке заказов по причине: Ошибка декодирования!'"));
			Возврат Ложь;
		ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
			ШаблонСтроки = НСтр("ru='Произошла ошибка при отправке заказов по причине: ""%1""'");
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Результат));
			Возврат Ложь;
		Иначе
			СписокЗаказыОбработаны = Новый Массив;
			Для Каждого ЗаказСсылка Из СписокЗаказыСсылка Цикл
				
				Если СписокЗаказыОбработаны.Найти(ЗаказСсылка) <> Неопределено Тогда  
					Продолжить;	
				КонецЕсли;
				
				СписокЗаказыОбработаны.Добавить(ЗаказСсылка);
				ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект(); 	
				ЗаказОбъект.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отправлен;
				
				Для Каждого Исследование Из ЗаказОбъект.Исследования Цикл
					Отбор = Новый Структура("КодПробы, ИД", Исследование.КодПробы, Исследование.ИД);
					Если ТаблицаРезультат.НайтиСтроки(Отбор).Количество() <> 0 Тогда  
						Исследование.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отправлен;
					КонецЕсли;
				КонецЦикла;
				
				Попытка
					ЗаказОбъект.Записать();	
				Исключение
					ШаблонСтроки = НСтр("ru='Произошла ошибка при записи документа ""%1"".%2%3'");
					СообщениеОбОшибке = СтрШаблон(ШаблонСтроки, Строка(ЗаказСсылка), Символы.ПС, ОписаниеОшибки()); 
					ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
				КонецПопытки;	
					
			КонецЦикла;
		КонецЕсли; 	 
		
	КонецЕсли;
		
	Возврат МассивРезультат;
	
КонецФункции 

// Получает результаты по заказу из внешней лаборатории.
//
// Параметры:
//  ТекстОшибки	 - Строка - содержит текст ошибки при получении результатов. 
//
Процедура ПолучитьРезультатыАнализов(ТекстОшибки) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Лаборатории.Ссылка КАК Лаборатория,
	                      |	Лаборатории.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Лаборатории КАК Лаборатории
	                      |ГДЕ
	                      |	НЕ Лаборатории.ПометкаУдаления
	                      |	И Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.СитиЛаб)");	
	
	ВыборкаЛабораторииСитиЛаб = Запрос.Выполнить().Выбрать();
	
	СообщенияОбОшибках = Неопределено;

	Пока ВыборкаЛабораторииСитиЛаб.Следующий() Цикл
		ПолучитьФайлыРезультатовАнализов(ВыборкаЛабораторииСитиЛаб.Лаборатория, СообщенияОбОшибках);
	КонецЦикла;
	        
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, Сообщение, Символы.ПС);
		КонецЦикла;
	КонецЕсли; 	
	
КонецПроцедуры

// Возвращает признак использования анонимной отправки анализов.
// 
// Возвращаемое значение:
//  Булево 
//
Функция ИспользуетсяАнонимнаяОтправкаАнализов() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами_СлужебныеПроцедуры // Отправка заказов и получение результатов

Процедура ПолучитьФайлыРезультатовАнализов(Лаборатория, СообщенияОбОшибках) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкаВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = ПолучитьСоединение(НастройкаВзаимодействия, СообщенияОбОшибках);
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НЗНаАвтоотправку = РегистрыСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.СоздатьНаборЗаписей();
		
	ДлинаНомераЗаявки = ДлинаНомераЗаявки(НастройкаВзаимодействия);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка КАК Ссылка,
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Клиент КАК Клиент,
	|	ВЫРАЗИТЬ(ЗаказВоВнешнююЛабораториюИсследования.КодПробы КАК СТРОКА(" + ДлинаНомераЗаявки + ")) КАК НомерЗаявки,
	|	ЗаказВоВнешнююЛабораториюИсследования.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.ID КАК ИдНоменклатуры
	|ИЗ
	|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ПО ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Лаборатория = НоменклатураАнализов.Лаборатория
	|			И ЗаказВоВнешнююЛабораториюИсследования.Номенклатура = НоменклатураАнализов.Номенклатура
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Отправлен))
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Лаборатория = &Лаборатория)
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Отправлен))
	|			И (НЕ ЗаказВоВнешнююЛабораториюИсследования.Ссылка.ПометкаУдаления)"
	;
	
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	ТаблицаНоменклатураИсследований = ТаблицаЗаказы.Скопировать(, "Ссылка, НомерЗаявки, Номенклатура, ИдНоменклатуры");
	ТаблицаНоменклатураИсследований.Свернуть("Ссылка, НомерЗаявки, Номенклатура, ИдНоменклатуры");
	ТаблицаЗаказы.Свернуть("Ссылка, Клиент, НомерЗаявки");
	
	// Складываем данные по полученным результатам в эту таблицу, потом передаем эту таблицу в общий модуль
	// для обработки отметок медосмотра
	ТЗДляПростановкиОтметокПМО = МедосмотрыСервер.ПолучитьПустуюТЗДляПростановкиОтметокПМО();
	
	Для Каждого Заказ Из ТаблицаЗаказы Цикл
		
		НомерЗаявки = Заказ.НомерЗаявки;
		ЗаказСсылка = Заказ.Ссылка;
		
		// Отправка запроса на получение результата.
		СписокФайлов = ПолучитьРезультатыЗаявки(НомерЗаявки, Соединение, НастройкаВзаимодействия);
		
		// Преобразование результата в HTML и определение идентификаторов исследований, по которым получен результат.
		ИсследованияСРезультатами = Новый Массив;
		РезультатПолностьюГотов = Истина;
		ШаблонОсмотра = ПолучитьРезультатыВHTML(Лаборатория, Заказ.Клиент, СписокФайлов, ИсследованияСРезультатами, РезультатПолностьюГотов);
		Если ШаблонОсмотра = Неопределено Тогда
			// Не готов результат по заказу.
			Продолжить;
		КонецЕсли;
		
		// Определение номенклатуры исследований, по которым получен результат.
		НоменклатураСРезультатами = Новый Массив;
		МассивНоменклатураИсследований = ТаблицаНоменклатураИсследований.НайтиСтроки(Новый Структура("Ссылка, НомерЗаявки", ЗаказСсылка, НомерЗаявки));
		Для Каждого НоменклатураИсследований Из МассивНоменклатураИсследований Цикл
			Если Не ИсследованияСРезультатами.Найти(НоменклатураИсследований.ИдНоменклатуры) = Неопределено Тогда 
				НоменклатураСРезультатами.Добавить(НоменклатураИсследований.Номенклатура);
		    КонецЕсли;
		КонецЦикла;	
		
		Если НоменклатураСРезультатами.Количество() = 0 И Не РезультатПолностьюГотов Тогда
			// Не готов результат по определенной номенклатуре исследований.
			Продолжить;
		КонецЕсли;
			
		// Отправка запроса на получение PDF.
		СписокФайловPDF = ПолучитьPDFФайлыРезультата(НомерЗаявки, Соединение, НастройкаВзаимодействия);
		
		Если СписокФайловPDF = Неопределено Тогда
			ШаблонСтроки = НСтр("ru='Номер заявки: %1. Ошибка декодирования результата в PDF.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НомерЗаявки);
			ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщениеОбОшибке);
			
			Продолжить;
		Иначе
			Если СписокФайловPDF.Количество() = 0 Тогда
				ШаблонСтроки = НСтр("ru='Номер заявки: %1. На сервере лаборатории %2 отсутствуют результаты PDF.'");
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НомерЗаявки, Строка(Лаборатория));
				ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщениеОбОшибке);
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		// Создание приема на основании результатов заказа.
		ДокументПриема = СоздатьПриемПоРезультатам(ШаблонОсмотра, НастройкаВзаимодействия.Лаборант, ЗаказСсылка, НомерЗаявки,
			НоменклатураСРезультатами, РезультатПолностьюГотов);
			
		Если ДокументПриема.Ссылка.Пустая() Тогда
			ШаблонСтроки = НСтр("ru='Номер заявки: %1. Произошла ошибка при загрузке результатов в документ Прием.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НомерЗаявки, Строка(Лаборатория));
			ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщениеОбОшибке);
				
			Продолжить;		
		КонецЕсли;
			
		Для Каждого Файл Из СписокФайловPDF Цикл
			РаботаСФайлами.ДобавитьНовыйФайл(ДокументПриема.Ссылка, Файл);	
		КонецЦикла;

		// Запишем в регистр для автоотправки результатов.
		Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте") Тогда
			Стр = НЗНаАвтоотправку.Добавить();
			Стр.Документ = ДокументПриема.Ссылка;
			Стр.Период = ДокументПриема.Дата;
		КонецЕсли;
		
		// Обновление статуса заказа.
		ОбновитьСтатусЗаказа(ЗаказСсылка, НомерЗаявки, НоменклатураСРезультатами, РезультатПолностьюГотов);		
		
		// Добавляем в ТЗ ТЗДляПростановкиОтметокПМО данные обработанных анализов
		НоваяСтрокаТЗПМО = ТЗДляПростановкиОтметокПМО.Добавить();
		НоваяСтрокаТЗПМО.КодПробы = НомерЗаявки;
		НоваяСтрокаТЗПМО.ЗаказВоВнешююЛабораторию = ЗаказСсылка;
		НоваяСтрокаТЗПМО.Прием = ДокументПриема.Ссылка;
		
	КонецЦикла;
	
	// Передаем ТЗДляПростановкиОтметокПМО для обработки
	МедосмотрыСервер.УстановитьОтметкиДляДействийПМОПриСозданииДокументаИзВнЛаборатории(ТЗДляПростановкиОтметокПМО);
	
	НЗНаАвтоотправку.Записать(Ложь); 
	
КонецПроцедуры

Функция ПолучитьРезультатыЗаявки(НомерЗаказа, Соединение, НастройкаВзаимодействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетодПолучитьРезультат = "RC_GetInquiryAuth";
	ШаблонПолучитьРезультат = ПолучитьШаблонЗапроса(МетодПолучитьРезультат);
	ЗапросПолученияРезультата = СоздатьЗапрос(МетодПолучитьРезультат);
	
	ТелоЗапроса = СтрШаблон(ШаблонПолучитьРезультат,
					НастройкаВзаимодействия.Логин,
					НастройкаВзаимодействия.Пароль,
					НомерЗаказа);
	ЗапросПолученияРезультата.УстановитьТелоИзСтроки(ТелоЗапроса);	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросПолученияРезультата);
	
	// Обработка ответа получения результата. 
	ФайлОтвета = РасшифроватьИИзвлечьИзОтвета(Ответ); 
	
	Если ФайлОтвета = Неопределено Тогда 
		Возврат Неопределено;	
	КонецЕсли;
	
	СписокФайлов = НайтиИРаскодироватьЗначения(ФайлОтвета, "xml"); 	 
	
	Возврат СписокФайлов;
	
КонецФункции

Функция ПолучитьPDFФайлыРезультата(НомерЗаказа, Соединение, НастройкаВзаимодействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетодПолучитьPDF = "RC_GetPDFResult";
	ШаблонПолучитьPDF = ПолучитьШаблонЗапроса(МетодПолучитьPDF);
	ЗапросПолученияPDF= СоздатьЗапрос(МетодПолучитьPDF);
	
	ТелоЗапроса = СтрШаблон(ШаблонПолучитьPDF,
					НастройкаВзаимодействия.Логин,
					НастройкаВзаимодействия.Пароль,
					НомерЗаказа);
	ЗапросПолученияPDF.УстановитьТелоИзСтроки(ТелоЗапроса);	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросПолученияPDF);
	                         
	// Обработка ответа получения PDF.
	ФайлОтвета = РасшифроватьИИзвлечьИзОтвета(Ответ,, Ложь);
	
	Если ФайлОтвета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокФайловPDF = НайтиИРаскодироватьЗначения(ФайлОтвета, "pdf", Ложь);	
	
	Возврат СписокФайловPDF;
	
КонецФункции 
 
Процедура ОбновитьСтатусЗаказа(ЗаказСсылка, НомерЗаявки, НоменклатураСРезультатами, РезультатПолностьюГотов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеПолученРезультат = Перечисления.СостоянияЗаказовЛаборатории.ПолученРезультат; 
	
	ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
	
	Для Каждого СтрокаИсследование Из ЗаказОбъект.Исследования Цикл
		Если Не СтрНайти(СтрокаИсследование.КодПробы, НомерЗаявки) = 0
			И Не СтрокаИсследование.Состояние = СостояниеПолученРезультат	
		Тогда
			Если РезультатПолностьюГотов 
				Или Не НоменклатураСРезультатами.Найти(СтрокаИсследование.Номенклатура) = Неопределено
			Тогда  
				СтрокаИсследование.Состояние = СостояниеПолученРезультат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИсследования = ЗаказОбъект.Исследования.Выгрузить(, "Состояние");
	ТаблицаИсследования.Свернуть("Состояние");
	
	Если ТаблицаИсследования.Количество() = 1 
		И ТаблицаИсследования.Найти(СостояниеПолученРезультат) <> Неопределено
	Тогда 
		ЗаказОбъект.Состояние = СостояниеПолученРезультат;
	КонецЕсли;	
	
	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Функция СоздатьПриемПоРезультатам(ШаблонОсмотра, Врач, Основание, НомерЗаявки, НоменклатураСРезультатами, РезультатПолностьюГотов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Заказ = Основание;
	
	ПриемОбъект = Документы.Прием.СоздатьДокумент();
	
	ПриемОбъект.Дата = ТекущаяДатаСеанса();
	ПриемОбъект.Врач = Врач;
	ПриемОбъект.Осмотр = ШаблонОсмотра;
	
	ЗаполнитьЗначенияСвойств(ПриемОбъект,Заказ,, "Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	
	ПриемОбъект.Основание = Заказ;
	МедКартаПрием = ОтраслевыеДополнения.НайтиМедкартуПриемПоЗаказуВоВнешнююЛабораторию(Заказ, ОтраслевыеДополнения.НоменклатурыЗаказа(Заказ));
	ПриемОбъект.МедицинскаяКарта = МедКартаПрием.МедКарта;
	ПриемОбъект.ПервичныйПрием = МедКартаПрием.Прием;
	
	Если Не ЗначениеЗаполнено(ПриемОбъект.ПервичныйПрием) Тогда
		ПриемОбъект.ЭтоПервичный = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаИсследование Из Заказ.Исследования Цикл
		Если Не СтрНайти(СтрокаИсследование.КодПробы, НомерЗаявки) = 0
			И Не СтрокаИсследование.Состояние = Перечисления.СостоянияЗаказовЛаборатории.ПолученРезультат
		Тогда
			Если РезультатПолностьюГотов 
				Или Не НоменклатураСРезультатами.Найти(СтрокаИсследование.Номенклатура) = Неопределено
			Тогда  
				НоваяСтрока = ПриемОбъект.Работы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсследование);
				НоваяСтрока.Количество = 1;
				НоваяСтрока.НомерПробы = СтрокаИсследование.КодПробы;
				НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Попытка
		ПриемОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ПриемОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Возврат ПриемОбъект;
	
КонецФункции

Функция РазобратьОтветЗапроса(Ответ)

	Результат = Неопределено;
	Значение = ПрочитатьОтвет(Ответ);
	
	Если Значение <> Неопределено Тогда 
		Результат = Decode(Значение);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРезультатОтправкиЗаказов(ТекстОтвета)
	
	Результат = Неопределено;
	
	Если ТекстОтвета = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстОтвета);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Название = ЧтениеXML.ЗначениеАтрибута("n");
				Значение = ЧтениеXML.ЗначениеАтрибута("v");
				Если Название <> Неопределено И Значение <> Неопределено Тогда
					Если Название = "inqury" Тогда
						Если СтрНайти(НРег(Значение), "inserted") <> 0 Тогда
							Результат = Истина;
						Иначе 
							Результат = Значение;
						КонецЕсли;
					ИначеЕсли Название = "error" Тогда
						Результат = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВвода

// Вызывается для проверки корректности кодов проб и возвращает текст ошибки, если коды некорректны.
//
// Параметры:
//  КодыПроб		 - Массив из Строка - содержит коды проб.
//  ПроверятьПустые	 - Булево - Истина, если необходимо проверять корректность пустых кодов проб. 
//                   - Неопределено
// 
// Возвращаемое значение:
//   - Строка 
//
Функция ПроверитьКорректностьКодовПроб(КодыПроб, Знач ПроверятьПустые) Экспорт
	
	СообщениеОбОшибке = "";
	
	Если ПроверятьПустые = Неопределено Тогда
		ПроверятьПустые = Истина;
	КонецЕсли;
	
	ПредставлениеЛаборатории = Строка(Перечисления.ВнешниеЛаборатории.СитиЛаб);
	
	Для Сч = 1 По КодыПроб.Количество() Цикл
		
		КодПробы = КодыПроб[Сч - 1];
		
		ТекстОшибки = "";
		Если Не КодПробыКорректен(КодПробы, ПроверятьПустые, ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СообщениеОбОшибке,
				ЛабораторияСервер.СформироватьТекстОшибкиКодаПробы(Сч, ТекстОшибки, ПредставлениеЛаборатории),
				Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СообщениеОбОшибке;
		
КонецФункции

// Вызывается для проверки корректности кода пробы.
//
// Параметры:
//  КодПробы	 - Строка
//  ТекстОшибки	 - Строка - содержит текст ошибки, если код некорректен.
// 
// Возвращаемое значение:
//   - Булево - Истина, если код корректен.
//
Функция КодПробыКорректенДляЗаказа(КодПробы, ТекстОшибки = "") Экспорт
	
	Возврат КодПробыКорректен(КодПробы, Истина, ТекстОшибки);
	
КонецФункции

Функция КодПробыКорректен(КодПробы, ПроверятьПустые = Ложь, ТекстОшибки = "")
	
	Результат = Истина;
	
	Если ПроверятьПустые
		И ПустаяСтрока(КодПробы)
	Тогда
		Результат = Ложь;
		ТекстОшибки = ЛабораторияСервер.ТекстОшибкиПустойКодПробы();
			
	ИначеЕсли Не ПустаяСтрока(КодПробы) Тогда
		// Код пробы должен быть 10 или 12 цифр.
		Если (СтрДлина(КодПробы) <> 10 И СтрДлина(КодПробы) <> 12)
			Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодПробы)
		Тогда
			Результат = Ложь;
			ТекстОшибки = НСтр("ru='Код пробы должен быть 10 или 12 цифр'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

Функция ОпределитьКонтактныйТелефон(Телефоны)
	
	Если Телефоны.Количество() <> 0 Тогда
		
		ПроверяемыеВариантыТелефона = Новый Массив;
		
		Для Каждого СтруктураТелефона Из Телефоны Цикл
			
			ПроверяемыеВариантыТелефона.Очистить();
			ПроверяемыеВариантыТелефона.Добавить(СтруктураТелефона.Представление);
			ПроверяемыеВариантыТелефона.Добавить(СокрЛП(СтруктураТелефона.Поле1) + СокрЛП(СтруктураТелефона.Поле2) + СокрЛП(СтруктураТелефона.Поле3));
			ПроверяемыеВариантыТелефона.Добавить(СтруктураТелефона.Поле3);
			
			Для Каждого Телефон Из ПроверяемыеВариантыТелефона Цикл
				
				ТелефонФорматированный = ФорматТелефона(Телефон);
				Если ЗначениеЗаполнено(ТелефонФорматированный) Тогда
					Возврат ТелефонФорматированный;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ФорматТелефона(Телефон)
	
	Результат = "";
		
	ТелефонЦифры = "";
	Для Сч = 1 По СтрДлина(Телефон) Цикл
		Символ = Сред(Телефон, Сч, 1);
		Если ОбщегоНазначенияКлиентСервер.ЭтоЦифра(Символ) Тогда
			ТелефонЦифры = ТелефонЦифры + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(ТелефонЦифры) = 11 Или СтрДлина(ТелефонЦифры) = 10 Тогда
		
		Результат = "8" + Прав(ТелефонЦифры, 10);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматEmail(Знач АдресаПочты)
	
	Если ТипЗнч(АдресаПочты) <> Тип("Массив") Тогда
		Адрес = АдресаПочты;
		АдресаПочты = Новый Массив;
		АдресаПочты.Добавить(Адрес);
	КонецЕсли;
	
	Для Каждого Адрес Из АдресаПочты Цикл
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Адрес) Тогда
			Возврат Адрес;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ТранспортСообщений

Функция ПолучитьСоединение(НастройкиСоединения, СообщенияОбОшибках = Неопределено)
	
	ПротоколПередачиДанных = НастройкиСоединения.ПротоколПередачиДанных;
	
	Если Не ЗначениеЗаполнено(ПротоколПередачиДанных) Тогда
		ПротоколПередачиДанных = 2;
	КонецЕсли;
	
	Если ПротоколПередачиДанных = 2 Тогда
		ЗащищенноеСоединениеOpenSSL = Неопределено;
	Иначе
		ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Попытка
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTPS");
		HTTPСоединение = Новый HTTPСоединение(НастройкиСоединения.АдресСервера, НастройкиСоединения.Порт,,,ИнтернетПрокси, 300, ЗащищенноеСоединениеOpenSSL);
	Исключение
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщенияОбОшибках("ОшибкаПодключения", НастройкиСоединения.Лаборатория));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат HTTPСоединение;
	
КонецФункции

Функция ПолучитьШаблонЗапроса(Метод)
	
	Если Метод = "RC_DirectoryVersions" Тогда
		// Запрос версий справочников.
		ШаблонЗапроса =
		"<?xml version=""1.0"" encoding=""windows-1251"" ?>
		|<content>
		|	<e n=""login"" v=""%1"" t=""string"" />
		|	<e n=""password"" v=""%2"" t=""string"" />
		|</content>";
	ИначеЕсли Метод = "RC_GetDirectory" Тогда
		// Запрос на получение данных справочника.
		ШаблонЗапроса =
		"<?xml version=""1.0"" encoding=""windows-1251"" ?>
		|<content>
		|	<e n=""login"" v=""%1"" t=""string"" />
		|	<e n=""password"" v=""%2"" t=""string"" />
		|	<e n=""directory"" v=""%3"" t=""string"" />
		|</content>";
	ИначеЕсли Метод = "RC_GetOrderCodeRange" Тогда
		// Запрос на получение диапазона номеров заявок.
		ШаблонЗапроса =
		"<?xml version=""1.0"" encoding=""utf-8"" ?>
		|<content>
		|	<e n=""login"" v=""%1"" t=""string"" />
		|	<e n=""password"" v=""%2"" t=""string"" />
		|	<e n=""range"" v=""%3"" t=""int"" />
		|</content>";
	ИначеЕсли Метод = "RC_GetPDFResult" Тогда
		// Запрос на получение результата заявки в PDF.
		ШаблонЗапроса =
		"<?xml version=""1.0"" encoding=""windows-1251""?>
		|<content>
		| <e n=""login"" t=""string"" v=""%1""/>
		| <e n=""password"" t=""string"" v=""%2""/>
		| <e n=""requestId"" v=""%3""/>
		|</content>";
	ИначеЕсли Метод = "RC_GetInquiryAuth" Тогда
		// Запрос на получение результата заявки.
		ШаблонЗапроса =
		"<?xml version=""1.0"" encoding=""windows-1251""?>
		|<content>
		| <e n=""login"" t=""string"" v=""%1""/>
		| <e n=""password"" t=""string"" v=""%2""/>
		| <e n=""requestId"" v=""%3"" t=""string"" />
		|</content>";
	ИначеЕсли Метод = "RC_InsertInquiries" Тогда
		// Запрос на создание новой заявки.
		ШаблонЗапроса =
		"<?xml version=""1.0"" encoding=""windows-1251"" ?>
		|<content>
		| <e n=""login"" v=""%1"" t=""string"" />
		| <e n=""password"" v=""%2"" t=""string"" />
		| %3
		|</content>";
	КонецЕсли;
	
	Возврат ШаблонЗапроса;
	
КонецФункции

Функция СоздатьЗапрос(Метод)
	
	ВозвращаемоеЗначение = Новый HTTPЗапрос;
	ВозвращаемоеЗначение.Заголовки.Очистить();
	ВозвращаемоеЗначение.Заголовки.Вставить("Content-Type", "text/xml");
	ВозвращаемоеЗначение.Заголовки.Вставить("charset", "utf-8");
	
	ВозвращаемоеЗначение.АдресРесурса = "websync.asmx/" + Метод;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьСтрокуПреобразования(ИмяСправочника)
	
	Если ИмяСправочника = "test"
		Или ИмяСправочника = "bioMaterial"
		Или ИмяСправочника = "department" 
		Или ИмяСправочника = "medicalService"
	Тогда
		СтрокаПреобразования = 
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Removed"">
		|							<xsl:value-of select=""f[@n='removed']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Mnemonics"">
		|							<xsl:value-of select=""f[@n='mnemonics']/@v""/>
		|						</xsl:attribute>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "target" Тогда
		СтрокаПреобразования =
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Removed"">
		|							<xsl:value-of select=""f[@n='removed']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Mnemonics"">
		|							<xsl:value-of select=""f[@n='mnemonics']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""targetType"">
		|							<xsl:value-of select=""f[@n='targetType']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Department"">
		|							<xsl:value-of select=""r[@n='department']/@i""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""MedicalService"">
		|							<xsl:value-of select=""r[@n='medicalService']/@i""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""InfoNote"">
		|							<xsl:value-of select=""o[@n='targetInfoNote']/f[@n='infoNote']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""InfoNoteRequired"">
		|							<xsl:value-of select=""o[@n='targetInfoNote']/f[@n='isRequired']/@v""/>
		|						</xsl:attribute>
		|						<!--Здесь и далее добавлены пустые узлы для парсинга в 1С фабрикой XDTO как список-->
		|						<Biomaterials><xsl:text> </xsl:text></Biomaterials>
		|						<xsl:for-each select=""s[@n='biomaterials']/r"">
		|							<Biomaterials>
		|								<xsl:value-of select=""@i""/>
		|							</Biomaterials>
		|						</xsl:for-each>
		|						<Biomaterials><xsl:text> </xsl:text></Biomaterials>
		|						<Services><xsl:text> </xsl:text></Services>
		|						<xsl:for-each select=""s[@n='services']/r"">
		|							<Services>
		|								<xsl:value-of select=""@i""/>
		|							</Services>
		|						</xsl:for-each>
		|						<Services><xsl:text> </xsl:text></Services>
		|						<Tests><xsl:text> </xsl:text></Tests>
		|						<xsl:for-each select=""s[@n='tests']/r"">
		|							<Tests>
		|								<xsl:value-of select=""@i""/>
		|							</Tests>
		|						</xsl:for-each>
		|						<Tests><xsl:text> </xsl:text></Tests>
		|						<UserFields><xsl:text> </xsl:text></UserFields>
		|						<xsl:for-each select=""s[@n='userFields']/r"">
		|							<UserFields>
		|								<xsl:value-of select=""@i""/>
		|							</UserFields>
		|						</xsl:for-each>
		|						<UserFields><xsl:text> </xsl:text></UserFields>
		|						<StdFields><xsl:text> </xsl:text></StdFields>
		|						<xsl:for-each select=""s[@n='stdFields']/r"">
		|							<StdFields>
		|								<xsl:value-of select=""@i""/>
		|							</StdFields>
		|						</xsl:for-each>
		|						<StdFields><xsl:text> </xsl:text></StdFields>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "service" Тогда
		СтрокаПреобразования =
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Removed"">
		|							<xsl:value-of select=""f[@n='removed']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Duration"">
		|							<xsl:value-of select=""f[@n='duration']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""UrgentDuration"">
		|							<xsl:value-of select=""f[@n='urgentDuration']/@v""/>
		|						</xsl:attribute>
		|						<!--Здесь и далее добавлены пустые узлы для парсинга в 1С фабрикой XDTO как список-->
		|						<Targets><xsl:text> </xsl:text></Targets>
		|						<xsl:for-each select=""s[@n='targets']/r"">
		|							<Targets>
		|								<xsl:value-of select=""@i""/>
		|							</Targets>
		|						</xsl:for-each>
		|						<Targets><xsl:text> </xsl:text></Targets>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "userField" Тогда
		СтрокаПреобразования =
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""fieldType"">
		|							<xsl:value-of select=""f[@n='fieldType']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""userDirectory"">
		|							<xsl:value-of select=""r[@n='userDirectory']/@i""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""maxLength"">
		|							<xsl:choose>
		|								<xsl:when
		|									test=""o/@n='userFieldString' and o[@n='userFieldString']/f[@n='maxLength']/@v!=''"">
		|									<xsl:value-of
		|										select=""o[@n='userFieldString']/f[@n='maxLength']/@v""/>
		|								</xsl:when>
		|								<xsl:otherwise>0</xsl:otherwise>
		|							</xsl:choose>
		|						</xsl:attribute>
		|						<xsl:attribute name=""regex"">
		|							<xsl:value-of select=""o[@n='userFieldString']/f[@n='regex']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""needTime"">
		|							<xsl:choose>
		|								<xsl:when test=""o/@n='userFieldDatetime'"">
		|									<xsl:value-of
		|										select=""o[@n='userFieldDatetime']/f[@n='needTime']/@v""/>
		|								</xsl:when>
		|								<xsl:otherwise>false</xsl:otherwise>
		|							</xsl:choose>
		|						</xsl:attribute>
		|						<xsl:attribute name=""strict"">
		|							<xsl:choose>
		|								<xsl:when test=""o/@n='userFieldDatetime'"">
		|									<xsl:value-of
		|										select=""o[@n='userFieldDatetime']/f[@n='strict']/@v""/>
		|								</xsl:when>
		|								<xsl:otherwise>false</xsl:otherwise>
		|							</xsl:choose>
		|						</xsl:attribute>
		|						<xsl:attribute name=""maxValue"">
		|							<xsl:choose>
		|								<xsl:when
		|									test=""o/@n='userFieldNumeric' and o[@n='userFieldNumeric']/f[@n='maxValue']/@v!=''"">
		|									<xsl:value-of
		|										select=""o[@n='userFieldNumeric']/f[@n='maxValue']/@v""/>
		|								</xsl:when>
		|								<xsl:otherwise>0</xsl:otherwise>
		|							</xsl:choose>
		|						</xsl:attribute>
		|						<xsl:attribute name=""minValue"">
		|							<xsl:choose>
		|								<xsl:when
		|									test=""o/@n='userFieldNumeric' and o[@n='userFieldNumeric']/f[@n='minValue']/@v!=''"">
		|									<xsl:value-of
		|										select=""o[@n='userFieldNumeric']/f[@n='minValue']/@v""/>
		|								</xsl:when>
		|								<xsl:otherwise>0</xsl:otherwise>
		|							</xsl:choose>
		|						</xsl:attribute>
		|						<xsl:attribute name=""prec"">
		|							<xsl:choose>
		|								<xsl:when
		|									test=""o/@n='userFieldNumeric' and o[@n='userFieldNumeric']/f[@n='prec']/@v!=''"">
		|									<xsl:value-of select=""o[@n='userFieldNumeric']/f[@n='prec']/@v""
		|									/>
		|								</xsl:when>
		|								<xsl:otherwise>0</xsl:otherwise>
		|							</xsl:choose>
		|						</xsl:attribute>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "userDirectory" Тогда
		СтрокаПреобразования =
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s[@n='userDirectory']/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""PropertyToSend"">
		|							<xsl:value-of select=""f[@n='propertyToSend']/@v""/>
		|						</xsl:attribute>
		|						<Values><xsl:text></xsl:text></Values>
		|						<xsl:for-each select=""s[@n='values']/o"">
		|							<xsl:if test=""f[@n='removed']/@v!='true'"">
		|								<Values>
		|									<xsl:attribute name=""id"">
		|										<xsl:value-of select=""f[@n='id']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""name"">
		|										<xsl:value-of select=""f[@n='name']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""code"">
		|										<xsl:value-of select=""f[@n='code']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""userFieldGroups"">
		|										<xsl:value-of select=""r[@n='userFieldGroups']/@i""/>
		|									</xsl:attribute>
		|								</Values>
		|							</xsl:if>
		|						</xsl:for-each>
		|						<Values><xsl:text></xsl:text></Values>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "userFieldGroups" Тогда
		СтрокаПреобразования =
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s[@n='userFieldGroups']/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<Values><xsl:text></xsl:text></Values>
		|						<xsl:for-each select=""s[@n='values']/o"">
		|							<xsl:if test=""f[@n='removed']/@v!='true'"">
		|								<Values>
		|									<xsl:attribute name=""id"">
		|										<xsl:value-of select=""f[@n='id']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""userFieldGroup"">
		|										<xsl:value-of select=""r[@n='userFieldGroup']/@i""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""userField"">
		|										<xsl:value-of select=""r[@n='userField']/@i""/>
		|									</xsl:attribute>
		|								</Values>
		|							</xsl:if>
		|						</xsl:for-each>
		|						<Values><xsl:text></xsl:text></Values>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "pricelist" Тогда
		СтрокаПреобразования = 
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Removed"">
		|							<xsl:value-of select=""f[@n='removed']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Mnemonics"">
		|							<xsl:value-of select=""f[@n='mnemonics']/@v""/>
		|						</xsl:attribute>
		|						<Hospitals><xsl:text> </xsl:text></Hospitals>
		|						<xsl:for-each select=""s[@n='hospitals']"">
		|							<Hospitals>
		|								<Hospital><xsl:text> </xsl:text></Hospital>
		|								<xsl:for-each select=""o[@n='hospitals']"">
		|								<Hospital>
		|									<xsl:attribute name=""Id"">
		|										<xsl:value-of select=""f[@n='id']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""StartDate"">
		|										<xsl:value-of select=""f[@n='startDate']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""EndDate"">
		|										<xsl:value-of select=""f[@n='endDate']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""discount"">
		|										<xsl:value-of select=""f[@n='discount']/@v""/>
		|									</xsl:attribute>
		|								</Hospital>
		|								</xsl:for-each>
		|								<Hospital><xsl:text> </xsl:text></Hospital>
		|							</Hospitals>
		|						</xsl:for-each>
		|						<Hospitals><xsl:text> </xsl:text></Hospitals>
		|						<Prices><xsl:text> </xsl:text></Prices>
		|						<xsl:for-each select=""s[@n='prices']"">
		|							<Prices>
		|								<Price><xsl:text> </xsl:text></Price>
		|								<xsl:for-each select=""o[@n='prices']"">
		|								<Price>
		|									<xsl:attribute name=""Service"">
		|										<xsl:value-of select=""r[@n='service']/@i""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""Value"">
		|										<xsl:value-of select=""f[@n='price']/@v""/>
		|									</xsl:attribute>
		|								</Price>
		|								</xsl:for-each>
		|								<Price><xsl:text> </xsl:text></Price>
		|							</Prices>
		|						</xsl:for-each>
		|						<Prices><xsl:text> </xsl:text></Prices>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "hospital" Тогда
		СтрокаПреобразования =
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s/o[@n='values']"">
		|				<xsl:if test=""f[@n='removed']/@v!='true'"">
		|					<Item>
		|						<xsl:attribute name=""Id"">
		|							<xsl:value-of select=""f[@n='id']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Name"">
		|							<xsl:value-of select=""f[@n='name']/@v""/>
		|						</xsl:attribute>
		|						<xsl:attribute name=""Code"">
		|							<xsl:value-of select=""f[@n='code']/@v""/>
		|						</xsl:attribute>
		|						<Hospitals><xsl:text> </xsl:text></Hospitals>
		|						<xsl:for-each select=""s[@n='pricelists']"">
		|							<Hospitals>
		|								<Hospital><xsl:text> </xsl:text></Hospital>
		|								<xsl:for-each select=""o[@n='pricelists']"">
		|								<Hospital>
		|									<xsl:attribute name=""Id"">
		|										<xsl:value-of select=""f[@n='id']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""StartDate"">
		|										<xsl:value-of select=""f[@n='startDate']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""EndDate"">
		|										<xsl:value-of select=""f[@n='endDate']/@v""/>
		|									</xsl:attribute>
		|									<xsl:attribute name=""discount"">
		|										<xsl:value-of select=""f[@n='discount']/@v""/>
		|									</xsl:attribute>
		|								</Hospital>
		|								</xsl:for-each>
		|								<Hospital><xsl:text> </xsl:text></Hospital>
		|							</Hospitals>
		|						</xsl:for-each>
		|						<Hospitals><xsl:text> </xsl:text></Hospitals>
		|					</Item>
		|				</xsl:if>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";
	ИначеЕсли ИмяСправочника = "stdField" Тогда
		СтрокаПреобразования =
		"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
		|	<xsl:output method=""xml"" encoding=""windows-1251"" omit-xml-declaration=""yes"" indent=""yes""/>
		|	<xsl:template match=""/"">
		|		<Directory>
		|			<xsl:for-each select=""//s/o[@n='values']"">
		|				<Item>
		|					<xsl:attribute name=""Id"">
		|						<xsl:value-of select=""f[@n='id']/@v""/>
		|					</xsl:attribute>
		|					<xsl:attribute name=""Name"">
		|						<xsl:value-of select=""f[@n='name']/@v""/>
		|					</xsl:attribute>
		|					<xsl:attribute name=""Code"">
		|						<xsl:value-of select=""f[@n='code']/@v""/>
		|					</xsl:attribute>
		|				</Item>
		|			</xsl:for-each>
		|		</Directory>
		|	</xsl:template>
		|</xsl:stylesheet>";

	КонецЕсли;
	
	Возврат СтрокаПреобразования;
	
КонецФункции

Функция ИнициализироватьПриложениеРаспаковки()
	
	// Библиотека для распаковки получаемых данных.
	ИмяФайлаBzip2DLL = КаталогВременныхФайлов() + "bzip2.dll";
	
	ФайлBzip2DLL = Новый Файл(ИмяФайлаBzip2DLL);
	
	Если Не ФайлBzip2DLL.Существует() Тогда
		ДанныеBzip2DLL = ПолучитьОбщийМакет("СитиЛаб_bzip2Dll");
		ДанныеBzip2DLL.Записать(ИмяФайлаBzip2DLL);
	КонецЕсли;
	
	// Консольное приложение для распаковки получаемых данных.
	ИмяФайлаBunzip2EXE = КаталогВременныхФайлов() + "bunzip2.exe";
	
	ФайлBunzip2EXE = Новый Файл(ИмяФайлаBunzip2EXE);
	
	Если Не ФайлBunzip2EXE.Существует() Тогда
		ДанныеBunzip2EXE = ПолучитьОбщийМакет("СитиЛаб_bunzip2Exe");
		ДанныеBunzip2EXE.Записать(ИмяФайлаBunzip2EXE);
	КонецЕсли;
	
	Возврат ИмяФайлаBunzip2EXE;
	
КонецФункции

Функция Decode(Encoded)
    
    ДвДанные = Base64Значение(Encoded);
    Если ДвДанные = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;
    ВременныйФайл = ПолучитьИмяВременногоФайла();
    ДвДанные.Записать(ВременныйФайл);
    
    Чтение = Новый ЧтениеТекста(ВременныйФайл);
    Decoded = Чтение.Прочитать();
    Чтение.Закрыть();
    УдалитьФайлы(ВременныйФайл);
	
	Возврат Decoded;
    
КонецФункции

Функция РасшифроватьИИзвлечьИзОтвета(HTTPОтвет, СообщенияОбОшибках = Неопределено, Извлечь = Истина)
	
	Строка = ПрочитатьОтвет(HTTPОтвет, СообщенияОбОшибках);
	
	Если Строка = Неопределено Тогда  	
		Возврат Неопределено;	
	КонецЕсли; 
	
	Если Извлечь Тогда
		Результат = РасшифроватьСтрокуИИзвлечьXMLИзBZIP(Строка);
	Иначе
		ДвоичныеДанныеАрхива = Base64Значение(Строка);
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеАрхива.Записать(ИмяФайла);
		Результат = ИмяФайла;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция РасшифроватьСтрокуИИзвлечьXMLИзBZIP(Строка, Формат = ".xml")
	
	ИмяРаспакованногоФайла = Неопределено;
	
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда 
	
		ДвоичныеДанныеАрхива = Base64Значение(Строка);
		
		ИмяРаспакованногоФайла = ПолучитьИмяВременногоФайла(Формат);
		
		ИмяФайлаАрхива = ИмяРаспакованногоФайла + ".bz2";
		ДвоичныеДанныеАрхива.Записать(ИмяФайлаАрхива);
		
		ЗапуститьПриложение("""" + ИнициализироватьПриложениеРаспаковки() + """ """ + ИмяФайлаАрхива + """",, Истина, -1);
		
		УдалитьФайлы(ИмяФайлаАрхива);
		
	ИначеЕсли ОбщегоНазначения.ЭтоLinuxСервер() Тогда 
		
		ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("bz2");
		Файл = Новый Файл(ИмяФайлаАрхива);
		ПутьФайлаАрхива = Файл.Путь;
		ИмяФайлаАрхиваБезРасширения = Файл.ИмяБезРасширения;
		
		ДвоичныеДанныеАрхива = Base64Значение(Строка);
		ДвоичныеДанныеАрхива.Записать(ИмяФайлаАрхива);
		
		Попытка
			ЗапуститьПриложение("bunzip2 " + ИмяФайлаАрхива,, Истина);
		Исключение
			Возврат ИмяРаспакованногоФайла;
		КонецПопытки;
		
		Файл = Новый Файл(ПутьФайлаАрхива + ИмяФайлаАрхиваБезРасширения);
		Если Файл.Существует() Тогда 
			ИмяРаспакованногоФайла = Файл.ПолноеИмя; 
		КонецЕсли;			
	
	КонецЕсли;	
	
	Возврат ИмяРаспакованногоФайла;
	
КонецФункции

Функция УпаковатьBZIP2ИЗакодироватьВBase64(Данные)
	
	Результат = "";
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Данные);
	ТекстДок.Записать(ВременныйФайл,КодировкаТекста.UTF8);
	
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда 

		ВременныйФайлАрхив = ПолучитьИмяВременногоФайла("bzip2");
		
		ЗапуститьПриложение("""" + ИнициализироватьПриложениеРаспаковки() + """ -z """ + ВременныйФайл + """",, Истина, -1);
			
		ВременныйФайл = ВременныйФайл + ".bz2";
		ДД = Новый ДвоичныеДанные(ВременныйФайл);
		Результат = Base64Строка(ДД);
		
		УдалитьФайлы(ВременныйФайл);
		УдалитьФайлы(ВременныйФайлАрхив);
	
	ИначеЕсли ОбщегоНазначения.ЭтоLinuxСервер() Тогда 
		
		Попытка
			ЗапуститьПриложение("bzip2 " + ВременныйФайл,, Истина);
		Исключение
			Возврат Результат;
		КонецПопытки;
		
		ВременныйФайл = ВременныйФайл + ".bz2";
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда 
			ДД = Новый ДвоичныеДанные(ВременныйФайл);
			Результат = Base64Строка(ДД);
		КонецЕсли;
		
		УдалитьФайлы(ВременныйФайл);
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ПрочитатьОтвет(Ответ, СообщенияОбОшибках = Неопределено)
	
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстОтвета);
	
	Значение = "";
	ПолучитьТекст = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "string" Тогда
				ПолучитьТекст = Истина;
			Иначе
				ПолучитьТекст = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ПолучитьТекст И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И ЧтениеXML.ИмеетЗначение Тогда
			Значение = ЧтениеXML.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если Не ПустаяСтрока(Значение) Тогда
		Возврат Значение;
	Иначе
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщенияОбОшибках("ОшибкаЧтенияОтвета"));
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиИРаскодироватьЗначения(ФайлXML, ФорматЗначения = "xml", Извлекать = Истина)
	
	Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ФайлXML);	
	Построитель = Новый ПостроительDOM;
    Файл = Построитель.Прочитать(Парсер);
	Значения = ОбойтиУзлыXML(Файл);
	СписокФайлов = Новый Массив();
	Для Каждого ЭлементЗначение Из Значения Цикл
		Если Извлекать Тогда
			Результат = РасшифроватьСтрокуИИзвлечьXMLИзBZIP(ЭлементЗначение, ФорматЗначения);	
			СписокФайлов.Добавить(Результат);
		Иначе	
			ДвоичныеДанныеАрхива = Base64Значение(ЭлементЗначение);
			ИмяФайла = ПолучитьИмяВременногоФайла(ФорматЗначения);
			ДвоичныеДанныеАрхива.Записать(ИмяФайла);
			Результат = ИмяФайла;
			СписокФайлов.Добавить(Результат);	
		КонецЕсли; 		
	КонецЦикла; 
	
	Возврат СписокФайлов;
	
КонецФункции

Функция ОбойтиУзлыXML(Узел)
	
	Значение = Неопределено;
	Если ЗначениеЗаполнено(Узел.ДочерниеУзлы) Тогда
		МассивЗначений = Новый Массив();
		Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
			Значение = ОбойтиУзлыXML(ДочернийУзел);
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				МассивЗначений.Добавить(Значение);	
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				Для Каждого Элемент Из Значение Цикл
					МассивЗначений.Добавить(Элемент);		
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
		Возврат МассивЗначений;
	Иначе
		УзелПараметр = Узел.Атрибуты.ПолучитьИменованныйЭлемент("n");
		Если УзелПараметр <> Неопределено Тогда
			Если УзелПараметр.Значение = "sample_info" Тогда
				УзелЗначение = Узел.Атрибуты.ПолучитьИменованныйЭлемент("v");
				Значение = УзелЗначение.Значение;
			ИначеЕсли УзелПараметр.Значение = "pdfResults" Тогда 
				УзелЗначение = Узел.Атрибуты.ПолучитьИменованныйЭлемент("v");
				Значение = УзелЗначение.Значение;
			ИначеЕсли УзелПараметр.Значение = "error" Тогда 
				УзелЗначение = Узел.Атрибуты.ПолучитьИменованныйЭлемент("v");
				Сообщить(УзелЗначение.Значение);
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Значение;
		
КонецФункции

#КонецОбласти

#Область ЭтикеткиКонтейнеров

// Используется ли печать этикеток в интеграции с лабораторией.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПечатьЭтикеток() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру данных для печати этикеток лаборатории Ситилаб.
//
// Параметры:
//  ДанныеКонтейнеров	 - ДанныеФормыКоллекция	 		- данные табличной части "Контейнеры" формы документа "Действия над анализами".
//  Лаборатория			 - СправочникСсылка.Лаборатории - лаборатория, для которой печатаются этикетки.
//  Клиент				 - СправочникСсылка.Клиенты	 	- клиент, данные которого выводятся на этикетки.
//  ОписаниеОшибки		 - Строка - текст ошибок, полученных при печати этикеток. 
// 
// Возвращаемое значение:
//   - Структура:
//   	* Заголовок 		- Строка
//   	* Защита 			- Булево
//   	* ИмяМакета 		- Строка
//   	* ОбъектПечати 		- Неопределено
//   	* ПечДокумент 		- ТабличныйДокумент
//   	* ПолныйПутьКМакету - Строка
//   	* СинонимМакета 	- Строка
//   	* ФормаИмя 			- Строка
//
Функция ПолучитьСтруктуруПечатиЭтикеток(Знач ДанныеКонтейнеров, Лаборатория, ДокументСсылка, Клиент, ОписаниеОшибки = "") Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяКомпонента = ГенерацияШтрихкодаСерверПовтИсп.ПодключитьКомпонентуГенерацииИзображенияШтрихкода("");
	
	Если ВнешняяКомпонента = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибки,
			НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'"), Символы.ПС);
		Возврат Неопределено;
	КонецЕсли;	
	
	Таб = Новый ТабличныйДокумент;	
	
	// Выведем таблицу на экран.
	Таб.АвтоМасштаб = Истина;
	Таб.КлючПараметровПечати = "ЭтикеткаОбразца_KDL";
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Таб.ПолеСверху = 0;
	Таб.ПолеСнизу  = 0;
	Таб.ПолеСправа = 0;
	Таб.ПолеСлева  = 0;	
	
	МассивНомераКонтейнеров = Новый Массив;
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПараметрыОтбора = Новый Структура("Лаборатория", Лаборатория);
	КонтейнерыЛаборатории = ДанныеКонтейнеров.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Контейнер Из КонтейнерыЛаборатории Цикл 				
		
		КодШтрихкода = Контейнер.КодПробы;
		
		Если ПустаяСтрока(КодШтрихкода) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если МассивНомераКонтейнеров.Найти(Контейнер.НомерКонтейнера) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Контейнер.Лаборатория);
		Если НастройкаВзаимодействия = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибки,
				СообщенияОбОшибках("ОтсутствуетНастройка", Контейнер.Лаборатория), Символы.ПС);
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьОбластьПечатиЭтикеток(НастройкаВзаимодействия, КодШтрихкода, Клиент, Контейнер.БиоматериалПредставление);		
		ТипКода = Штрихкодирование.ПолучитьЗначениеТипаШтрихкодаДляЭУ(ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128);
				
		Для Каждого Рисунок Из Область.Рисунки Цикл
			Если Лев(Рисунок.Имя, 8) = Штрихкодирование.ПолучитьИмяПараметраШтрихкод() Тогда
				
				Если ВнешняяКомпонента = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыШтрихкода = Новый Структура;

				ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Штрихкод",        КодШтрихкода);
				ПараметрыШтрихкода.Вставить("ТипКода",         ?(ТипКода >= 0, ТипКода, 1));
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
				ПараметрыШтрихкода.Вставить("РазмерШрифта",    8);			
				Рисунок.Картинка = Штрихкодирование.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);			
			КонецЕсли;
		КонецЦикла;		
		Таб.ВывестиГоризонтальныйРазделительСтраниц();
		Таб.Вывести(Область);
		
		МассивНомераКонтейнеров.Добавить(Контейнер.НомерКонтейнера);
		
	КонецЦикла;
	
	Возврат УниверсальныеМеханизмыСервер.НапечататьДокумент(Таб, 1,, "Этикетки");
	
КонецФункции

Функция ПолучитьОбластьПечатиЭтикеток(НастройкаВзаимодействия, КодШтрихкода, Клиент, Биоматериал)
	
	МакетТабДокумента = РегистрыСведений.СитиЛаб_НастройкиВзаимодействия.ПолучитьМакет("СитиЛаб_МакетЭтикетки");
	Область = МакетТабДокумента.ПолучитьОбласть("Этикетка");
	
	ФИОКлиента = ВРег(Клиент.Фамилия + " " + Клиент.Имя);
	ЛПУ = НастройкаВзаимодействия.КодЛПУ + ?(Не ПустаяСтрока(НастройкаВзаимодействия.КодЛПУ), ". ", "") + НастройкаВзаимодействия.НазваниеОрганизацииВЭтикетке;
	
	Область.Параметры.Установить(0, ЛПУ);
	Область.Параметры.Установить(1, Биоматериал);
	Область.Параметры.Установить(2, КодШтрихкода);
	Область.Параметры.Установить(3, ФИОКлиента);
		
	// Форматируем документ согласно устройству печати.	
	РазмерЭтикетки = НастройкаВзаимодействия.РазмерЭтикетки;
	ШиринаЭтикетки = Число(Лев(РазмерЭтикетки, 3));
	ВысотаЭтикетки = Число(Прав(РазмерЭтикетки,3));
	
	Если ШиринаЭтикетки = Неопределено Тогда ШиринаЭтикетки = 20 КонецЕсли;
	
	// Настройка размера.
	// 1. Высота.
	Если ВысотаЭтикетки <> 0 Тогда
		
		ОбщаяВысота = 0;
		КоэфВысоты  = 1.3;
		
		Для сч = 1 По Область.Высотатаблицы Цикл
			ТекОбласть = Область.Область(сч,, сч);
			ОбщаяВысота = ОбщаяВысота + ТекОбласть.ВысотаСтроки;
		КонецЦикла;
		
		Если ОбщаяВысота = 0 Тогда
			ОбщаяВысота = 1;
		КонецЕсли;
		
		Для сч = 1 По Область.Высотатаблицы Цикл
			ТекОбласть = Область.Область(сч,, сч);
			ТекОбласть.ВысотаСтроки = ТекОбласть.ВысотаСтроки/ОбщаяВысота * ВысотаЭтикетки * КоэфВысоты;	
		КонецЦикла;
		
	КонецЕсли;	
	
	// 2. Ширина.
	Если ШиринаЭтикетки <> 0 Тогда
		
		ОбщаяШирина = 0;
		Коэф		= 0.55;
		
		Для сч = 1 По Область.ШиринаТаблицы Цикл
			ТекОбласть = Область.Область(, сч,, сч);
			ОбщаяШирина = ОбщаяШирина + ?(ТекОбласть.ШиринаКолонки = 0, 1, ТекОбласть.ШиринаКолонки);
		КонецЦикла;
		
		Для сч = 1 По Область.ШиринаТаблицы Цикл
			ТекОбласть = Область.Область(, сч,, сч);
			ТекОбласть.ШиринаКолонки = ТекОбласть.ШиринаКолонки/ОбщаяШирина * ШиринаЭтикетки * Коэф;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Область;
	
КонецФункции

Функция ПолучитьШаблонЭтикеткиЛаборатории() Экспорт
	Возврат Справочники.ШаблоныЭтикетокИЦенниковБПО.ЭтикеткаСитилаб;	
КонецФункции

#КонецОбласти

#Область ФормированиеHTML

Функция ПолучитьРезультатыВHTML(Лаборатория, Клиент, СписокФайлов, ИсследованияСРезультатами, РезультатПолностьюГотов)
	
	Если СписокФайлов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
		
	ШапкаHTML = "<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
				|<html><body><div style=""WIDTH: 19cm"">";
	ФИОКлиента = "<div><strong>Пациент: </strong>" + Клиент + "</div>";
	ТелоHTML = "";
	Для Каждого файлXML Из СписокФайлов Цикл
		Парсер = Новый ЧтениеXML;
	    Парсер.ОткрытьФайл(файлXML);	
		Построитель = Новый ПостроительDOM;
	    Файл = Построитель.Прочитать(Парсер);
		
		РезультатГотов = Истина;
		ТекстHTML = СформироватьТелоHTML(Лаборатория, Файл, ИсследованияСРезультатами, РезультатГотов);
		Если РезультатГотов Тогда
			Если СтрНайти(ТекстHTML,"<th scope=""col"">Анализ</th>") <> 0 Тогда
				ТелоHTML = ТелоHTML + ТекстHTML;	
			КонецЕсли;
		Иначе
			РезультатПолностьюГотов = Ложь;	
		КонецЕсли;
		
	КонецЦикла; 
	ПодвалHTML = "</div></body></html>";
	
	Если ПустаяСтрока(ТелоHTML) Тогда
		Возврат Неопределено;
	Иначе
		ТелоHTML = ФИОКлиента + ТелоHTML;
		Возврат ШапкаHTML + ТелоHTML + ПодвалHTML;	
	КонецЕсли; 

КонецФункции

Функция СформироватьТелоHTML(Лаборатория, Узел, ИсследованияСРезультатами, РезультатГотов)
	
	ТелоHTML = "";
	Если ЗначениеЗаполнено(Узел.ДочерниеУзлы) Тогда
		Если Узел.Атрибуты <> Неопределено Тогда
			УзелПараметр = Узел.Атрибуты.ПолучитьИменованныйЭлемент("n");
			ИмяПараметра = Узел.ИмяУзла;
			Если УзелПараметр <> Неопределено Тогда
				Если ПустаяСтрока(УзелПараметр.Значение) И ИмяПараметра = "o" Тогда
					Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
						НаименованиеПоля = ДочернийУзел.Атрибуты.ПолучитьИменованныйЭлемент("n").Значение;
						Если НаименованиеПоля = "state" Тогда
							СостояниеЗаказа = ДочернийУзел.Атрибуты.ПолучитьИменованныйЭлемент("v").Значение;
							Если Не СостояниеЗаказа = "2" Тогда
								РезультатГотов = Ложь;
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
				ИначеЕсли УзелПараметр.Значение = "works" И ИмяПараметра = "s" Тогда
					ТаблицаАнализов = ПолучитьТаблицуАнализов(Лаборатория, Узел);
					Возврат СформироватьТаблицуHTML(ТаблицаАнализов);
				ИначеЕсли УзелПараметр.Значение = "targets" И ИмяПараметра = "s" Тогда 
					ТелоHTML = "<div><strong>Исследования лаборатории Ситилаб: </strong> <ol>";
					Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
						Идентификатор = ДочернийУзел.Атрибуты.ПолучитьИменованныйЭлемент("i").Значение;
						Значение = НайтиНазваниеЭлементаСитиЛабПоИдентификатору(Лаборатория, Идентификатор, "target");
						Если ПустаяСтрока(Значение) Тогда
							Значение = Идентификатор;	
						КонецЕсли; 
						ТелоHTML = ТелоHTML + "<li>" + Значение + "</li>";
						ИсследованияСРезультатами.Добавить(Идентификатор);
					КонецЦикла;
					Возврат ТелоHTML + "</ol></div>";
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		Если РезультатГотов Тогда 
			Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
				ТелоHTML = ТелоHTML + СформироватьТелоHTML(Лаборатория, ДочернийУзел, ИсследованияСРезультатами, РезультатГотов);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТелоHTML;
	
КонецФункции

Функция ПолучитьТаблицуАнализов(Лаборатория, Узел)
	
	ТаблицаАнализов = Новый ТаблицаЗначений();
	ТаблицаАнализов.Колонки.Добавить("Анализ",			Новый ОписаниеТипов("Строка"),"Анализ");
	ТаблицаАнализов.Колонки.Добавить("Значение",		Новый ОписаниеТипов("Строка"),"Значение");
	ТаблицаАнализов.Колонки.Добавить("ЕдИзм",			Новый ОписаниеТипов("Строка"),"ЕдИзм");
	ТаблицаАнализов.Колонки.Добавить("Норма",			Новый ОписаниеТипов("Строка"),"Норма");
	ТаблицаАнализов.Колонки.Добавить("Комментарий",		Новый ОписаниеТипов("Строка"),"Комментарий");
	ТаблицаАнализов.Колонки.Добавить("КомментарийНормы",Новый ОписаниеТипов("Строка"),"КомментарийНормы");
	
	Для Каждого СтрокаАнализа Из Узел.ДочерниеУзлы Цикл
		НоваяСтрока = ТаблицаАнализов.Добавить();
		Для Каждого ПараметрыАнализа Из СтрокаАнализа.ДочерниеУзлы Цикл 
			Если ПараметрыАнализа.Атрибуты <> Неопределено Тогда
				УзелПараметр = ПараметрыАнализа.Атрибуты.ПолучитьИменованныйЭлемент("n");
				УзелЗначение = ПараметрыАнализа.Атрибуты.ПолучитьИменованныйЭлемент("v");			
				Если УзелПараметр <> Неопределено Тогда
					Если УзелПараметр.Значение = "value" Тогда
						НоваяСтрока.Значение = УзелЗначение.Значение;	
					ИначеЕсли УзелПараметр.Значение = "test" Тогда 
						УзелИД = ПараметрыАнализа.Атрибуты.ПолучитьИменованныйЭлемент("i");
						НазваниеАнализа = НайтиНазваниеЭлементаСитиЛабПоИдентификатору(Лаборатория, УзелИД.Значение, "test");
						Если ПустаяСтрока(НазваниеАнализа) Тогда
							НазваниеАнализа = УзелИД.Значение;	
						КонецЕсли; 
						НоваяСтрока.Анализ = НазваниеАнализа;	
					ИначеЕсли УзелПараметр.Значение = "storedUnit" Тогда 
						НоваяСтрока.ЕдИзм = УзелЗначение.Значение;	
					ИначеЕсли УзелПараметр.Значение = "storedNorms" Тогда 
						НоваяСтрока.Норма = УзелЗначение.Значение;	
					ИначеЕсли УзелПараметр.Значение = "normComment" Тогда
						НоваяСтрока.КомментарийНормы = УзелЗначение.Значение;
					ИначеЕсли УзелПараметр.Значение = "comment" Тогда
						НоваяСтрока.Комментарий = УзелЗначение.Значение;
					КонецЕсли; 	
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 	
	КонецЦикла; 
	
	Возврат ТаблицаАнализов;
		
КонецФункции

Функция СформироватьТаблицуHTML(ТаблицаАнализов)
	
	Шапка = ПолучитьШаблонШапкиТаблицы();
	Тело = "<tbody>";
	Номер = 1;
	Для Каждого СтрокаАнализа Из ТаблицаАнализов Цикл
		Строка = ПолучитьШаблонСтрокиТаблицы();
		Строка = СтрЗаменить(Строка,"[НомерСтроки]",Номер);
		Строка = СтрЗаменить(Строка,"[Анализ]",СтрокаАнализа.Анализ);
		Строка = СтрЗаменить(Строка,"[Значение]",СтрокаАнализа.Значение);
		Строка = СтрЗаменить(Строка,"[ЕдИзм]",СтрокаАнализа.ЕдИзм);
		Строка = СтрЗаменить(Строка,"[Норма]",СтрокаАнализа.Норма);
		Строка = СтрЗаменить(Строка,"[Комментарий]",СтрокаАнализа.Комментарий);
		Строка = СтрЗаменить(Строка,"[КомментарийНормы]",СтрокаАнализа.КомментарийНормы);
		Тело = Тело + Строка;
		Номер = Номер + 1;
	КонецЦикла; 
	Тело = Тело + "</tbody>";
	
	Возврат Шапка + Тело + "</table></div>";
		
КонецФункции
 
Функция ПолучитьШаблонШапкиТаблицы()
	Текст = "<div><table align=""left"" border=""1"" cellpadding=""5"" cellspacing=""1"" style=""width: 1000px; word-break:break-all"">
			|<thead>
			|	<tr>
			|		<th scope=""row"">№</th>
			|		<th scope=""col"">Анализ</th>
			|		<th scope=""col"">Значение</th>
			|		<th scope=""col"">Ед.</th>
			|		<th scope=""col"">Норма</th>
			|		<th scope=""col"">Комментарий</th>
			|		<th scope=""col"">Комментарий нормы</th>
			|	</tr>
			|</thead>";
	Возврат Текст;
КонецФункции

Функция ПолучитьШаблонСтрокиТаблицы()
	Текст = "<tr align=""center""><th scope=""row"">[НомерСтроки]</th>
			|<td align=""left"" style=""width: 26%;"">[Анализ]</td>
			|<td align=""center"" style=""width: 12%;"">[Значение]</td>
			|<td align=""center"" style=""width: 12%;"">[ЕдИзм]</td>
			|<td align=""center"" style=""width: 12%;"">[Норма]</td>
			|<td align=""left"" style=""width: 25%;"">[Комментарий]</td>
			|<td align=""left"" style=""width: 25%;"">[КомментарийНормы]</td></tr>";
	Возврат Текст;
КонецФункции
 
Функция НайтиНазваниеЭлементаСитиЛабПоИдентификатору(Лаборатория, Идентификатор, ИмяСправочника)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СитиЛаб_Справочники.Name КАК Name
	               |ИЗ
	               |	РегистрСведений.СитиЛаб_Справочники КАК СитиЛаб_Справочники
	               |ГДЕ
	               |	СитиЛаб_Справочники.Идентификатор = &Идентификатор
	               |	И СитиЛаб_Справочники.ИмяСправочника = &ИмяСправочника
	               |	И СитиЛаб_Справочники.Лаборатория = &Лаборатория";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ИмяСправочника", ИмяСправочника);
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Name;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьАктуальныеЛаборатории()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиВзаимодействия.Лаборатория КАК Лаборатория
	|ИЗ
	|	РегистрСведений.СитиЛаб_НастройкиВзаимодействия КАК НастройкиВзаимодействия
	|ГДЕ
	|	НЕ НастройкиВзаимодействия.Лаборатория.ПометкаУдаления
	|	И НастройкиВзаимодействия.Используется";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ВозвращаемоеЗначение.Добавить(Выборка.Лаборатория);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СообщенияОбОшибках(ВариантОшибки, Лаборатория = Неопределено)
	
	Если ВариантОшибки = "ОтсутствуетНастройка" Тогда 
		ВозвращаемоеЗначение = НСтр("ru='%1: Для лаборатории не заполнена или отключена (не используется) настройка взаимодействия!'");
	ИначеЕсли ВариантОшибки = "ОшибкаПодключения" Тогда 
		ВозвращаемоеЗначение = НСтр("ru='%1: Не удалось установить подключение с текущими параметрами!'");
	ИначеЕсли ВариантОшибки = "ОшибкаЗагрузкиСправочников" Тогда 
		ВозвращаемоеЗначение = НСтр("ru='%1: Ошибка при загрузке справочников!'");
	ИначеЕсли ВариантОшибки = "ОшибкаПолученияВерсииСправочников" Тогда 
		ВозвращаемоеЗначение = НСтр("ru='%1: Ошибка при получении версии справочников!'");
	ИначеЕсли ВариантОшибки = "ОшибкаПолученияДиапазонаНомеровЗаявок" Тогда 
		ВозвращаемоеЗначение = НСтр("ru='%1: Ошибка при получении диапазона номеров заявок!'");
	ИначеЕсли ВариантОшибки = "ОшибкаЧтенияОтвета" Тогда 
		Возврат НСтр("ru='Не удалось прочитать ответ веб-сервиса!'");
	Иначе 	
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон(ВозвращаемоеЗначение, Строка(Лаборатория)); 
	
КонецФункции

Процедура ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, ТекстСообщения)
	
	Если ТипЗнч(СообщенияОбОшибках) <> Тип("Массив") Тогда
		СообщенияОбОшибках = Новый Массив;
	КонецЕсли;
	
	СообщенияОбОшибках.Добавить(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти
