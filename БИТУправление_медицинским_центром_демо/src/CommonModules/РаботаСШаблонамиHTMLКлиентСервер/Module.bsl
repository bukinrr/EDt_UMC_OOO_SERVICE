#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Возвращает список допустимых видов шаблона по типу параметра
//
// Параметры:
//  ТипПараметра - ОписаниеТипов - Тип параметра.
// 
// Возвращаемое значение:
//  СписокЗначений - Список допустимых видов шаблона.
//
Функция ПолучитьДопустимыеЭлементыШаблонаПоТипуПараметра(ТипПараметра) Экспорт
	
	сзДопустимыеВиды = Новый СписокЗначений;
	
	Если ТипПараметра.Типы().Количество() = 0 Тогда
		сзДопустимыеВиды.Добавить("", "");
		Возврат сзДопустимыеВиды;
	КонецЕсли;
	
	Если ТипПараметра.СодержитТип(Тип("Булево")) Тогда
		сзДопустимыеВиды.Добавить("Флажок", "Флажок");
	ИначеЕсли ТипПараметра.СодержитТип(Тип("СправочникСсылка.ДополнительныеЗначенияХарактеристик")) Тогда
		сзДопустимыеВиды.Добавить("ПолеВыбора", "Поле выбора");
		сзДопустимыеВиды.Добавить("Ссылка", "Ссылка");
	Иначе
		сзДопустимыеВиды.Добавить("Ссылка", "Ссылка");
		Если ТипПараметра.СодержитТип(Тип("Строка")) Или ТипПараметра.СодержитТип(Тип("Число")) Тогда
			сзДопустимыеВиды.Добавить("ПолеВвода", "Поле ввода");
		КонецЕсли;
		Если ТипПараметра.СодержитТип(Тип("Строка")) Тогда
			сзДопустимыеВиды.Добавить("ПолеМногострочногоВвода", "Поле многострочного текста");
		КонецЕсли;
		сзДопустимыеВиды.Добавить("ПолеВыбора", "Поле выбора");
	КонецЕсли;
	
	Возврат сзДопустимыеВиды;
	
КонецФункции

// Возвращает текст шаблона HTML по умолчанию
// 
// Возвращаемое значение:
//  Строка - текст шаблона HTML по умолчанию
//
Функция ПолучитьТекстШаблонаHTMLПоУмолчанию() Экспорт
	
	Возврат
		"<DIV class=FORMAT style = ""WIDTH: 19cm;"">
		| </DIV>";
	
КонецФункции

// Возвращает HTML текст разрыва страницы
//
// Параметры:
//  ВставитьВидимыйТекстТега - Булево - Признак добавления видимого текста для разрыва страницы.
// 
// Возвращаемое значение:
//  Строка - Текст разрыва страницы.
//
Функция ПолучитьТекстHTMLРазрывСтраницы(ВставитьВидимыйТекстТега = Истина) Экспорт
	
	Если ВставитьВидимыйТекстТега Тогда
		Возврат "<div class=FORMAT align=left>&nbsp;</div>
				|<style media='print'>
				|	.dontshow {
				|		visibility: hidden;
				|		color: blue;
				|		mso-special-character: line-break;
				|		page-break-after: always;
				|	}
				|</style>
				|<div class='dontshow' align=left>
				|	<em>
				|		<font size=2 color=#888888>
				|			<---Переход на следующую страницу--->
				|		</font>
				|	</em>
				|</div>
				|<div class=FORMAT align=left>&nbsp;</div>";
	Иначе
		Возврат "<div display=none style='page-break-after: always'><br></div>";
	КонецЕсли;
	
КонецФункции

// Возвращает массив тегов параметров
//
// Параметры:
//  ВключатьВычисляемыеБлоки - Булево - Признак включения в массив вычисляемых блоков.
// 
// Возвращаемое значение:
//  Массив - Теги параметров.
//
Функция ПолучитьТегиПараметров(ВключатьВычисляемыеБлоки = Ложь) Экспорт
	
	СписокТегов = Новый Массив;
	СписокТегов.Добавить("a");
	СписокТегов.Добавить("textarea");
	СписокТегов.Добавить("select");
	СписокТегов.Добавить("input");
	Если ВключатьВычисляемыеБлоки Тогда
		СписокТегов.Добавить("tt");
	КонецЕсли;
	
	Возврат СписокТегов;
	
КонецФункции

// Удаляет HTML элемент, сохраняя всех его потомков
//
// Параметры:
//  ЭлементHTLM	 - ЭлементHTLM - Удаляемый элемент
//
Процедура ВырезатьБлокЭлементаССохранениемСодержимого(ЭлементHTLM) Экспорт
	
	ЭлементПеред = ЭлементHTLM;
	
	Если РаботаСHTMLКлиентСервер.ЭтоДокументDOM(ЭлементHTLM) Тогда
		КоличествоДочерних = ЭлементHTLM.childNodes.Количество();
	Иначе
		КоличествоДочерних = ЭлементHTLM.childNodes.length;
	КонецЕсли;
	
	Для Сч = -КоличествоДочерних По -1 Цикл
		ДочернийЭлемент = ЭлементHTLM.childNodes[-Сч-1];
		ЭлементHTLM.parentNode.insertBefore(ДочернийЭлемент, ЭлементПеред);
		ЭлементПеред = ДочернийЭлемент;
	КонецЦикла;
	
	ЭлементHTLM.parentNode.removeChild(ЭлементHTLM);
	
КонецПроцедуры

#КонецОбласти

#Область НормализацияШаблонов 

// Возвращает нормализованный текст шаблона HTML
//
// Параметры:
//  ТекстHTML	 - Строка - Исходный текст шаблона HTML.
// 
// Возвращаемое значение:
//  Строка - Нормализованный текст шаблона HTML.
//
Функция НормализоватьТекстHTMLШаблона(ТекстHTML) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	
	НормализоватьВычисляемыеБлокиHTML(ДокументHTML);
	НормализоватьСсылочныеПараметрыHTML(ДокументHTML);
	НормализоватьИзображенияHTML(ДокументHTML);
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

// Нормализует вычисляемые блоки HTML документа
//
// Параметры:
//  ДокументHTML - ДокументHTML - HTML документ.
//
Процедура НормализоватьВычисляемыеБлокиHTML(ДокументHTML) Экспорт
	
	// Удаляем вычисляемые блоки без id
	СписокВычисляемыхБлоков = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "tt", Истина);
	Для Каждого ЭлементБлока Из СписокВычисляемыхБлоков Цикл
		Если Не ЗначениеЗаполнено(ЭлементБлока.id) Тогда 
			РаботаСHTMLКлиентСервер.ВынестиСодержимоеЭлементаНаружу(ЭлементБлока, Истина);
		КонецЕсли;
	КонецЦикла;
	
	СписокВычисляемыхБлоков = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "tt", Истина);
	Для Каждого ЭлементБлока Из СписокВычисляемыхБлоков Цикл
		РаботаСHTMLКлиентСервер.ОчиститьНезначащиеОхватывающиеТегиВычисляемыхБлоков(ЭлементБлока);
	КонецЦикла;
	
КонецПроцедуры

// Нормализует ссылочные параметры HTML документа
//
// Параметры:
//  ДокументHTML - ДокументHTML - HTML документ.
//
Процедура НормализоватьСсылочныеПараметрыHTML(ДокументHTML) Экспорт
	
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "A", Истина);
	
	ИдПараметров = Новый Массив;
	Для Каждого Параметр Из СписокЭлементов Цикл
		ИдПараметра = Параметр.id;
		Если ЗначениеЗаполнено(ИдПараметра) Тогда
			ИдПараметров.Добавить(ИдПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдПараметров.Количество() <> 0 Тогда
		СоответствиеУИДСсылки = РаботаСШаблонамиHTML.ПолучитьПараметрыПоУИД(ИдПараметров);
	Иначе
		СоответствиеУИДСсылки = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		ИдПараметра = Параметр.id;
		Если Не ЗначениеЗаполнено(ИдПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрСсылка = СоответствиеУИДСсылки.Получить(ИдПараметра);
		Если Не ЗначениеЗаполнено(ПараметрСсылка) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Нормализуем ссылки - внутри них не должно быть тегов
		РаботаСHTMLКлиентСервер.ПоместитьЭлементВглубьДерева(Параметр, Истина);
		Параметр.textContent = "[...]";
		
	КонецЦикла;
	
КонецПроцедуры

// Нормализует изображения HTML документа
//
// Параметры:
//  ДокументHTML - ДокументHTML - HTML документ.
//
Процедура НормализоватьИзображенияHTML(ДокументHTML) Экспорт
	
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "IMG", Истина);
	Для Каждого ЭлементКартинка Из СписокЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКартинка.id) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКартинка.src = "";
		
	КонецЦикла;
	
КонецПроцедуры

// Функция провеяет возможность объединения текстов HTML документов
//
// Параметры:
//  ТекстHTML1		 - Строка - Текст первого HTML документа.
//  ТекстHTML2		 - Строка - Текст второго HTML документа.
//  ОписаниеОшибки	 - Строка - Описание ошибки.
// 
// Возвращаемое значение:
//  Булево - Истина, если объединение текстов HTML документов возможно.
//
Функция ПроверкаВозможностиОбъединенияHTML(Знач ТекстHTML1, Знач ТекстHTML2, ОписаниеОшибки = "") Экспорт
	
	СтрокаПеренос = ПолучитьТекстHTMLРазрывСтраницы(Ложь);
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM();
		
	ОбщийТекстHTML = ТекстHTML1 + СтрокаПеренос + ТекстHTML2;
	
	Попытка
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело, ОбщийТекстHTML);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Удаляет из узлов документа атрибут data-bit-clientpart,
//  отвечающий за разметку неклиентских и немедицинских участков шаблона приема.
//
// Параметры:
//  ДокументHTML - ДокументHTML, ДокументDOM - Документ, в котором производится поиск элементов
// 
// Возвращаемое значение:
//  ДокументHTML, ДокументDOM.
//
Функция УдалитьСтильКлиентскойОбластиДокумента(ДокументHTML) Экспорт
	
	КлиентскиеОбласти = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , , "data-bit-clientpart");
	
	Для Каждого КлиентскаяОбласть Из КлиентскиеОбласти Цикл
		КлиентскаяОбласть.УдалитьАтрибут("style");
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Добавляет стиль для разметки области печати (исключаемая у клиентской версии, исключаемая у версии в медкарту),
//	согласно отметке узлов атрибутом data-bit-clientpart.
//
// Параметры:
//  ДокументHTML - ДокументHTML, ДокументDOM - Документ, в котором производится удаление стилей разметки печати.
// 
// Возвращаемое значение:
//  ДокументHTML, ДокументDOM.
//
Функция ДобавитьСтильКлиентскойОбластиДокумента(ДокументHTML) Экспорт
	
	КлиентскиеОбласти = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , , "data-bit-clientpart");
	
	Для Каждого КлиентскаяОбласть Из КлиентскиеОбласти Цикл
		КлиентскаяЧасть = КлиентскаяОбласть.ПолучитьАтрибут("data-bit-clientpart") = "true";
		ЭтоСтрока = ВРег(КлиентскаяОбласть.ИмяУзла) = "TR";
		КлиентскаяОбласть.УстановитьАтрибут("style", ПолучитьОписаниеСтиля(КлиентскаяЧасть, ЭтоСтрока));
	КонецЦикла;
	
	Возврат ДокументHTML
	
КонецФункции

// Нормализует отступы в теле документа
//
// Параметры:
//  ТекстHTML - Строка - Текст HTML документа
// 
// Возвращаемое значение:
//  Строка - Текст HTML документа с нормализованными отступами
//
Функция НормализоватьОтступы(ТекстHTML) Экспорт
	
	ТекстТелаДокумента = СтрЗаменить(СтрЗаменить(РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзКодаДокумента(ТекстHTML), Символы.ПС, ""), Символы.Таб, "");
	Возврат РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстТелаДокумента));
	
КонецФункции

Функция УбратьДвойныеКавычкиИзАтрибутов(ТекстHTML) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	УбратьДвойныеКавычкиИзАтрибутовЭлемента(ДокументHTML.Тело);
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

Процедура УбратьДвойныеКавычкиИзАтрибутовЭлемента(ЭлементHTML)
	
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементHTML.Атрибуты <> Неопределено Тогда
		Для Каждого Атрибут Из ЭлементHTML.Атрибуты Цикл
			Если НРег(ЭлементHTML.ИмяУзла) = "option" И НРег(Атрибут.ИмяУзла) = "value" Тогда
				Атрибут.Значение = СтрЗаменить(Атрибут.Значение, "'", """");
			Иначе
				Атрибут.Значение = СтрЗаменить(Атрибут.Значение, """", "'");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ДочернийЭлемент Из ЭлементHTML.ДочерниеУзлы Цикл
		УбратьДвойныеКавычкиИзАтрибутовЭлемента(ДочернийЭлемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура УбратьПробельныеСимволы(ЭлементHTML, ЭлементыСПробельнымиСимволами)
	
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если у узла есть стиль white-space - внутри него необходимо оставить пробельные символы в исходном состоянии
	УдалитьПробельныеСимволы = Истина;
	Если ЭлементHTML.Атрибуты <> Неопределено Тогда
		ЗначениеСтиля = ЭлементHTML.ПолучитьАтрибут("style");
		Если ЗначениеСтиля <> Неопределено Тогда
			Для Каждого ЭлементСтиля Из СтрРазделить(ЗначениеСтиля, ";", Ложь) Цикл
				Если ВРег(СокрЛП(СтрРазделить(ЭлементСтиля, ":")[0])) = "WHITE-SPACE" Тогда
					УдалитьПробельныеСимволы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если УдалитьПробельныеСимволы Тогда
		Для Каждого ДочернийЭлемент Из ЭлементHTML.ДочерниеУзлы Цикл
			Если ВРег(ДочернийЭлемент.ИмяУзла) = "#TEXT" Тогда
				ДочернийЭлемент.ЗначениеУзла = СтрЗаменить(СтрЗаменить(ДочернийЭлемент.ЗначениеУзла, Символы.Таб, ""), Символы.ПС, "");
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементHTML.УстановитьАтрибут("data-bit-nodewhitespace", Строка(Новый УникальныйИдентификатор));
		ЭлементыСПробельнымиСимволами.Добавить(ЭлементHTML);
		Возврат;
	КонецЕсли;
	
	Для Каждого ДочернийЭлемент Из ЭлементHTML.ДочерниеУзлы Цикл
		УбратьПробельныеСимволы(ДочернийЭлемент, ЭлементыСПробельнымиСимволами);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзображенияШаблонов

// Инициализирует настройки изображений приема
//
// Параметры:
//  соотвКешИзображений	 - Соответствие - Кэш изображений.
//  ШаблоныПриема		 - Массив - Шаблоны осмотров, для которых инициализируются настройки изображений.
//  ИдентификаторФормы	 - УникальныйИдентификатор - Уникальный идентификатор формы, из которой вызывается процедура.
//
Процедура ИнициализироватьНастройкиИзображенийПриема(соотвКешИзображений, ШаблоныПриема, ИдентификаторФормы) Экспорт
	
	// Кеш изображений.
	соотвКешИзображений = Новый Соответствие;
	Если ШаблоныПриема.Количество() > 0 Тогда
		соотвКешИзображений = РаботаСШаблонамиHTML.ПолучитьКешИзображенийПриема(ШаблоныПриема, ИдентификаторФормы, ЭтоWindowsXP());
	КонецЕсли;
	
КонецПроцедуры

// Функция добавить изображение в кеш и возвращает строку уникального идентификатора изображения
//
// Параметры:
//  соотвКешИзображений		 - Соответствие - Кэш изображений.
//  ПутьКФайлу				 - Строка - Полное имя файла.
//  ИдентификаторФормы		 - УникальныйИдентификатор - Уникальный идентификатор формы из которой вызывается функция.
//  ИдентификаторИзображения - Строка - Строка уникального идентиФикатора изображения.
// 
// Возвращаемое значение:
//  Строка - Строка уникального идентиФикатора изображения.
//
Функция ДобавитьИзображениеВКеш(соотвКешИзображений, ПутьКФайлу, ИдентификаторФормы, Знач ИдентификаторИзображения = Неопределено) Экспорт
	
	Если ИдентификаторИзображения = Неопределено Тогда
		ИдентификаторИзображения = Строка(Новый УникальныйИдентификатор);
	ИначеЕсли ТипЗнч(ИдентификаторИзображения) <> Тип("Строка") Тогда
		ИдентификаторИзображения = Строка(ИдентификаторИзображения);
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ПутьКФайлу);
	Если Не ФайлНаДиске.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураИзображения = Новый Структура("Идентификатор, Расширение", ИдентификаторИзображения, ФайлНаДиске.Расширение);
	ДвоичныеДанныеКартинки = Новый ДвоичныеДанные(ПутьКФайлу);
	Если ЭтоWindowsXP() Тогда
		СтруктураИзображения.Вставить("АдресВХранилище", РаботаСHTMLКлиентСервер.ПолучитьBase64КартинкиДляHTML(ДвоичныеДанныеКартинки));
	Иначе
		СтруктураИзображения.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ИдентификаторФормы));
	КонецЕсли;
	соотвКешИзображений.Вставить(ИдентификаторИзображения, СтруктураИзображения);
	
	Возврат ИдентификаторИзображения;
	
КонецФункции

// Загрузка изображения приема
//
// Параметры:
//  ДокументHTML		 - ДокументHTML - 
//  соотвКешИзображений	 - Соответствие - Кэш изображений.
//  ИдентификаторФормы	 - УникальныйИдентификатор - Уникальный идентификатор формы, из которой вызывается процедура. 
//  ШаблонПриема		 - СправочникСсылка.ШаблоныHTML - Шаблон приема.
//
Процедура ЗагрузитьИзображенияПриема(ДокументHTML, соотвКешИзображений, ИдентификаторФормы, ШаблонПриема = Неопределено) Экспорт
	
	Если соотвКешИзображений = Неопределено Тогда
		Если ШаблонПриема <> Неопределено Тогда 
			РаботаСШаблонамиHTML.ПолучитьКешИзображенийПриема(ШаблонПриема, ИдентификаторФормы, ЭтоWindowsXP());
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИзображенияШаблонаНеОбновлялись = (ШаблонПриема <> Неопределено);
	
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "IMG", Истина);
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если Не ЗначениеЗаполнено(Элемент.id) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураИзображения = соотвКешИзображений[Элемент.id];
		Если СтруктураИзображения = Неопределено Тогда
			// Возможно, изображения по шаблону еще не загружались
			Если ИзображенияШаблонаНеОбновлялись Тогда 
				РаботаСШаблонамиHTML.ДополнитьСоответствиеИзображенийПоШаблону(соотвКешИзображений, ШаблонПриема, ИдентификаторФормы, ЭтоWindowsXP());
				ИзображенияШаблонаНеОбновлялись = Ложь;
				СтруктураИзображения = соотвКешИзображений[Элемент.id];
				Если СтруктураИзображения = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Элемент.src = СтруктураИзображения.АдресВХранилище;
		
	КонецЦикла;
	
КонецПроцедуры

// Убрать источник изображений из текста HTML
//
// Параметры:
//  ДокументHTML - ДокументHTML - HTML документ.
//
Процедура ОчиститьПутиКФайламИзображенийШаблона(ДокументHTML) Экспорт
	
	ИзображенияШаблона = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "IMG", Истина);
	Для Каждого Изображение Из ИзображенияШаблона Цикл
		Если ЗначениеЗаполнено(Изображение.id) Тогда
			Изображение.src = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет, запущена ли программа в ОС Windows XP
// 
// Возвращаемое значение:
//  Булево - Истина, если программа запущенна в Windows XP.
//
Функция ЭтоWindowsXP() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64)
			И СтрНайти(СистемнаяИнформация.ВерсияОС, "5.1") > 0;
			
КонецФункции

Функция КодироватьВДвоичныйКодИзображенияHTMLТекста(ТекстHTML, СписокИзображений, ДанныеРисунков = Неопределено) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	Изображения = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "img", Истина);
	
	Для Каждого Изображение Из Изображения Цикл
		
		Если СтрНайти(Изображение.Источник, "data:image/") = 0
			Или СтрНайти(Изображение.Источник, ";base64,") = 0
		Тогда
			Если ЗначениеЗаполнено(Изображение.Идентификатор) Тогда
				СтрокаИзображения = СписокИзображений.Найти(Изображение.Идентификатор, "Идентификатор");
				Если СтрокаИзображения <> Неопределено Тогда
					Изображение.Источник = РаботаСHTMLКлиентСервер.ПолучитьBase64КартинкиДляHTML(Base64Значение(СтрокаИзображения.ИзображениеBase64));
				КонецЕсли;
				
			ИначеЕсли ДанныеРисунков <> Неопределено
				И ЗначениеЗаполнено(Изображение.Источник)
			Тогда
				ДанныеРисунка = ДанныеРисунков.Получить(Изображение.Источник);
				Если ДанныеРисунка <> Неопределено Тогда
					Изображение.Источник = СтрШаблон("data:image/png;base64,%1", ДанныеРисунка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

Функция ДекодироватьИзображенияHTMLТекста(ТекстHTML, СписокИзображений, ДанныеРисунков = Неопределено) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	Изображения = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "img", Истина);
	
	Для Каждого Изображение Из Изображения Цикл
		
		Если СтрНайти(Изображение.Источник, "data:image/") > 0
			И СтрНайти(Изображение.Источник, ";base64,") > 0
		Тогда
			ДанныеИзображения = ДанныеИзображенияИзИсточника(СокрЛП(Изображение.Источник));
			Если ДанныеИзображения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Изображение.Источник = ДекодироватьBase64(ДанныеИзображения.ИзображениеBase64, ДанныеИзображения.Расширение);
			
		ИначеЕсли ЗначениеЗаполнено(Изображение.Идентификатор) Тогда
			СтрокаИзображения = СписокИзображений.Найти(Изображение.Идентификатор, "Идентификатор");
			Если СтрокаИзображения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Изображение.Источник = ДекодироватьBase64(СтрокаИзображения.ИзображениеBase64, СтрЗаменить(СтрокаИзображения.Расширение,".",""));
		ИначеЕсли ДанныеРисунков <> Неопределено
			И ЗначениеЗаполнено(Изображение.Источник)
		Тогда
			ДанныеРисунка = ДанныеРисунков.Получить(Изображение.Источник);
			Если ДанныеРисунка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Изображение.Источник = ДекодироватьBase64(ДанныеРисунка, "png");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

Функция ДанныеИзображенияИзИсточника(СтрокаИсточника) Экспорт
	
	ЧастиИсточника = СтрРазделить(СтрокаИсточника, ";", Ложь);
	
	Если ЧастиИсточника.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Расширение = Неопределено;
	ИзображениеBase64 = Неопределено;
	
	Для Каждого ЧастьИсточника Из ЧастиИсточника Цикл
		Попытка
			Если СтрНачинаетсяС(НРег(СокрЛП(ЧастьИсточника)), "data:image/") Тогда
				Расширение = СокрЛП(СтрРазделить(ЧастьИсточника, "/", Ложь)[1]);
			ИначеЕсли СтрНачинаетсяС(НРег(СокрЛП(ЧастьИсточника)), "base64") Тогда
				ИзображениеBase64 = СокрЛП(СтрРазделить(ЧастьИсточника, ",", Ложь)[1]);
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Если Расширение = Неопределено
		Или ИзображениеBase64 = Неопределено
	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Расширение, ИзображениеBase64", Расширение, ИзображениеBase64)
	
КонецФункции

Функция ДекодироватьBase64(Знач Текст64, Расширение = "jpg")
	
	ДвДанные = Base64Значение(Текст64);
	Если ДвДанные = Неопределено Или ДвДанные.Размер() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВременныйФайл = ПолучитьИмяВременногоФайла(Расширение);
	ДвДанные.Записать(ВременныйФайл);
	
	Возврат ВременныйФайл;
	
КонецФункции

#КонецОбласти

#Область ФормированиеВерсииДляПечатиРедактирования

Функция ПолучитьТекстСкриптаОбработчикаИзмененияЭлементовHTML(ПолеВыбора)
	
	Скрипт =
	"this.setAttribute(""isOnChange"", 1);
	|if (document.createEventObject) 
	|{  // IE before version 9
	|  var clickEvent = document.createEventObject(window.event);
	|    this.fireEvent(""onclick"", clickEvent);
	|}
	|else 
	|{  // all browsers except IE before version 9";
	Если ПолеВыбора Тогда
		Скрипт = Скрипт +
		"	var clickEvent = new Event('click');
		|	this.click();
		|}";
	Иначе
		Скрипт = Скрипт +
		"  var clickEvent = document.createEvent(""Mouse Event"");
		|      clickEvent.initMouseEvent(""click"", false, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		|  this.dispatchevent(clickevent);
		|}";  
	КонецЕсли;
	Возврат Скрипт;
	
КонецФункции

// Удаляет стиль высоты из узлов корня HTML документа.
//
// Параметры:
//  ДокументHTML - ДокументHTML - Исходный HTML документ.
// 
// Возвращаемое значение:
//  ДокументHTML - HTML документ с удаленным стилем высоты.
//
Функция УдалитьСтильВысотыИзУзловКорняДокумента(ДокументHTML) Экспорт
	
	// Удаление стиля Height из узлов корня документа. Необходимо для корректного взаимного отображения тега
	// с фиксированной высотой и ниже идущего на версиях платформы с WebKit.
	Попытка
	 	Для Каждого ДочернийУзел Из ДокументHTML.Тело.ДочерниеУзлы Цикл
			Для Каждого Атрибут Из ДочернийУзел.Атрибуты Цикл
				Если Нрег(Атрибут.Имя) = "style" Тогда
					СвойстваСтиля = Новый Массив;
					Для Каждого СвойствоСтиля Из СтрРазделить(Атрибут.Значение,";", Ложь) Цикл
						Если Не СокрЛП(Нрег(СтрРазделить(СвойствоСтиля,":", Ложь)[0])) = "height" Тогда
							СвойстваСтиля.Добавить(СвойствоСтиля);
						КонецЕсли;
					КонецЦикла;
					Атрибут.Значение = СтрСоединить(СвойстваСтиля,";");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение КонецПопытки;
	
	Возврат ДокументHTML;
	
КонецФункции

// Формирует версию для печати шаблона осмотра
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура - данные формы приема.
//  ДанныеШаблона		 - Структура - Структура данных шаблона.
//     Шаблон                     - СправочникСсылка.ШаблоныHTML - Шаблон HTML.
//     ИдентификаторСтрокиШаблона - Число - Идентификатор строки шаблона в приеме.
//     ТекстШаблона               - Строка - HTML текст шаблона.
//  ТаблицаПараметров	 - ТаблицаЗначений - Таблица параметров из приема.
//  КешЗначенийВыбора	 - Соответствие - Кеш значений выбора.
//  СписокНазначений	 - ДеревоЗначений - План лечения.
//  КешИзображенийПриема - Соответствие - Кеш изображений шаблонов.
//  ИдентификаторФормы	 - УникальныйИдентификатор - Уникальный идентификатор формы, из которой вызывается функция. 
//  ДанныеТаблицШаблонов - Структура
//     ПараметрыТаблицШаблонов - ТаблицаЗначений - Таблица параметров многострочных таблиц шаблона.
// 
// Возвращаемое значение:
//  Структура
//     ТекстШаблонаПолный - Строка - Полный HTML текст шаблона.
//     ТекстШаблонаТело   - Строка - Текст тела HTML шаблона.
//
Функция СформироватьВерсиюДляПечатиШаблонаОсмотра(Объект, ДанныеШаблона, ТаблицаПараметров,  КешЗначенийВыбора = Неопределено,
	СписокНазначений = Неопределено, КешИзображенийПриема = Неопределено, ИдентификаторФормы = Неопределено,
	ДанныеТаблицШаблонов = Неопределено, ВерсияДляСЭМД = Ложь, РисункиКартинок = Неопределено, ДобавленныеИзображения = Неопределено) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ДанныеШаблона.ТекстШаблона);
	ДокументHTMLШаблона = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ДанныеШаблона.ТекстШаблона);
	
	ДокументHTML = УдалитьСтильВысотыИзУзловКорняДокумента(ДокументHTML);
	
	Если ДанныеТаблицШаблонов <> Неопределено Тогда
		Для Каждого ЭлементТаблицы Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , "table", "data-bit-dyntable-id") Цикл
			
			Если РодительскаяДинамическаяТаблица(ЭлементТаблицы) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторТаблицы = ЭлементТаблицы.ПолучитьАтрибут("data-bit-dyntable-id");
			ТаблицаИзШаблона = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTMLШаблона, ИдентификаторТаблицы, , "data-bit-dyntable-id")[0];
			
			ЗаполнитьТаблицыШаблоновДокументаHTML(ДанныеТаблицШаблонов.ПараметрыТаблицШаблонов, ЭлементТаблицы, ДанныеТаблицШаблонов.ЭталонныеСтрокиТаблиц, , ДанныеШаблона.ИдентификаторСтрокиШаблона);
			РекурсивноЗаполнитьВложенныеТаблицы(ДанныеТаблицШаблонов.ПараметрыТаблицШаблонов, ЭлементТаблицы, ТаблицаИзШаблона, ДанныеШаблона.ИдентификаторСтрокиШаблона, , "", ИдентификаторТаблицы, ДанныеТаблицШаблонов.ЭталонныеСтрокиТаблиц);
		КонецЦикла;
		ЗаполнитьЗначенияПараметровHTMLДокумента(ДокументHTML, ТаблицаПараметров, ДанныеШаблона.ИдентификаторСтрокиШаблона, КешЗначенийВыбора, Истина, ВерсияДляСЭМД, ДанныеТаблицШаблонов.ПараметрыТаблицШаблонов);
	Иначе
		ЗаполнитьЗначенияПараметровHTMLДокумента(ДокументHTML, ТаблицаПараметров, ДанныеШаблона.ИдентификаторСтрокиШаблона, КешЗначенийВыбора, Истина, ВерсияДляСЭМД);
	КонецЕсли;
	
	ПреобразоватьВычисляемыеБлокиВВерсиюДляПечати(ДокументHTML, Объект, СписокНазначений);
	
	Если ИдентификаторФормы <> Неопределено Тогда
		ЗагрузитьИзображенияПриема(ДокументHTML, КешИзображенийПриема, ИдентификаторФормы, ДанныеШаблона.Шаблон);
	КонецЕсли;
	
	Если ВерсияДляСЭМД Тогда
		УзлыКУдалению = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "a", Истина);
		Для Каждого Узел Из УзлыКУдалению Цикл
			Узел.РодительскийУзел.УдалитьДочерний(Узел);
		КонецЦикла;
	КонецЕсли;
	
	ТекстШаблонаТелоБезРисунков = РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML);
	
	Если ДобавленныеИзображения <> Неопределено Тогда
		ДобавитьКнопкиДобавленияИзображений(ДокументHTML, ДанныеШаблона.ИдентификаторСтрокиШаблона, ДобавленныеИзображения, Ложь);
	КонецЕсли;
	
	Если РисункиКартинок <> Неопределено Тогда
		ДобавитьРисункиКартинок(ДокументHTML, ДанныеШаблона.ИдентификаторСтрокиШаблона, РисункиКартинок, Ложь);
	КонецЕсли;
	
	ДанныеЗаполненногоШаблона = Новый Структура("ТекстШаблонаПолный, ТекстШаблонаТело, ТекстШаблонаТелоБезРисунков",
		РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML),
		РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML),
		ТекстШаблонаТелоБезРисунков);
	
	Возврат ДанныеЗаполненногоШаблона;
	
КонецФункции

// Урезает текст шаблона приема по режиму получателя.
//
// Параметры:
//  ТекстШаблона	 - Строка - HTML-текст полной печатной версии шаблона.
//  РежимДляКлиента	 - Булево - режим получателя (клиент - Истина или медкарта - Ложь).
// 
// Возвращаемое значение:
//  Строка - HTML-текст.
//
Функция ТекстШаблонаОсмотраПоРежиму(ТекстШаблона, РежимДляКлиента) Экспорт
	
	Если ТипЗнч(РежимДляКлиента) = Тип("Булево") Тогда
		
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона);
		
		Для Каждого Область Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ?(РежимДляКлиента, "false", "true"), , "data-bit-clientpart") Цикл
			РаботаСHTMLКлиентСервер.ЗаменитьЭлементНаПроизвольныйHTML(Область, "");
		КонецЦикла;
		Для Каждого Область Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ?(РежимДляКлиента, "true", "false"), , "data-bit-clientpart") Цикл
			ВырезатьОбластьПечати(Область);
		КонецЦикла;
		
		Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	Иначе
		Возврат ТекстШаблона;
	КонецЕсли;
	
КонецФункции

Процедура СкрытьСкрываемыеТеги(ДокументHTML, ТаблицаПараметров, ИдентификаторСтрокиШаблона, ПараметрыТаблицШаблонов, ТолькоНезаполненные = Истина)
	
	АтрибутСкрываемости = ?(ТолькоНезаполненные, "data-bit-hidden", "data-bit-always-hidden");
	
	БлокиКУдалению = Новый Массив;
	СкрываемыеБлокиДокумента = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, "true",, АтрибутСкрываемости);
	
	Если ТолькоНезаполненные Тогда
		Для Каждого СкрываемыйБлок Из СкрываемыеБлокиДокумента Цикл
			Если НРег(СкрываемыйБлок.ИмяУзла) = "table"
				И ЗначениеЗаполнено(СкрываемыйБлок.ПолучитьАтрибут("data-bit-dyntable-id"))
			Тогда
				МногострочнаяТаблицаЗаполнена = Ложь;
				Для Каждого СтрокаПараметраТаблицы Из ПараметрыТаблицШаблонов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона)) Цикл
					Если ТипЗнч(СтрокаПараметраТаблицы.Значение) = Тип("Булево")
						Или ЗначениеЗаполнено(СтрокаПараметраТаблицы.Значение)
					Тогда
						МногострочнаяТаблицаЗаполнена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если МногострочнаяТаблицаЗаполнена Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			УдалитьБлок = Истина;
			
			ДокументHTMLПоСкрываемомуБлоку = РаботаСDOMКлиентСервер.СоздатьДокументDOM(РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(СкрываемыйБлок));
			ЭлементыПараметровВБлоке = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTMLПоСкрываемомуБлоку);
			Для Каждого ЭлементПараметра Из ЭлементыПараметровВБлоке Цикл
				
				СтруктураПоиска = Новый Структура("СтрокаУидПараметра", ЭлементПараметра.Идентификатор);
				Если ИдентификаторСтрокиШаблона <> Неопределено Тогда
					СтруктураПоиска.Вставить("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона);
				КонецЕсли;
				
				ПараметрыПоИдентификатору = ТаблицаПараметров.НайтиСтроки(СтруктураПоиска);
				Если ПараметрыПоИдентификатору.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ПараметрыПоИдентификатору[0].Значение) = Тип("Булево")
					Или ЗначениеЗаполнено(ПараметрыПоИдентификатору[0].Значение)
				Тогда
					УдалитьБлок = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УдалитьБлок Тогда
				БлокиКУдалению.Добавить(СкрываемыйБлок);
			КонецЕсли;
		КонецЦикла;
	Иначе
		БлокиКУдалению = СкрываемыеБлокиДокумента;
	КонецЕсли;
	
	Для Каждого БлокКУдалению Из БлокиКУдалению Цикл
		БлокКУдалению.РодительскийУзел.УдалитьДочерний(БлокКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения параметров HTML документа
//
// Параметры:
//  HTMLДокумент				 - ДокументHTML - HTML документ.
//  ТаблицаПараметров			 - ТаблицаЗначений - Таблица параметров из приема.
//  ИдентификаторСтрокиШаблона	 - Число - Идентификатор строки шаблона в приеме. 
//  КешЗначенийВыбора			 - Соответствие - Кеш значений выбора.
//  ВерсияДляПечати				 - Булево - Признак необходимой версии.
// 
// Возвращаемое значение:
//  Массив - Обновленные значения параметров.
//
Функция ЗаполнитьЗначенияПараметровHTMLДокумента(HTMLДокумент, Знач ТаблицаПараметров, ИдентификаторСтрокиШаблона = Неопределено,
	КешЗначенийВыбора = Неопределено, ВерсияДляПечати = Ложь, ВерсияДляСЭМД = Ложь, Знач ПараметрыТаблицШаблонов = Неопределено) Экспорт
	
	ОбновленныеЗначенияПараметров = Новый Массив;
	ЭтоДокументDOM = РаботаСHTMLКлиентСервер.ЭтоДокументDOM(HTMLДокумент);
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		Если СтрНачинаетсяС(СтрокаПараметра.Представление, "<Объект не найден> (") Тогда
			СтрокаПараметра.Представление = "";
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСтраницы = ТаблицаПараметров;
	Если ИдентификаторСтрокиШаблона <> Неопределено Тогда 
		ПараметрыСтраницы = ТаблицаПараметров.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", ИдентификаторСтрокиШаблона));
	КонецЕсли;
	
	Если ВерсияДляПечати И Не ВерсияДляСЭМД Тогда
		СкрытьСкрываемыеТеги(HTMLДокумент, ТаблицаПараметров, ИдентификаторСтрокиШаблона, ПараметрыТаблицШаблонов);
		СкрытьСкрываемыеТеги(HTMLДокумент, ТаблицаПараметров, ИдентификаторСтрокиШаблона, ПараметрыТаблицШаблонов, Ложь);
	КонецЕсли;
	
	ЗначенияДляПолученияИзСтрокиВнутр = Новый Соответствие; // Список значений в виде строки внутр для однократного получения с сервера.
	
	УстановитьЗначенияПараметров(ПараметрыСтраницы, HTMLДокумент, ИдентификаторСтрокиШаблона, ЭтоДокументDOM, ВерсияДляПечати, КешЗначенийВыбора, ВерсияДляСЭМД, ОбновленныеЗначенияПараметров, ЗначенияДляПолученияИзСтрокиВнутр);
	
	Если ЗначенияДляПолученияИзСтрокиВнутр.Количество() <> 0 Тогда
		ЗаполнитьЗначенияПараметровИзСтрокиВнутр(ОбновленныеЗначенияПараметров, ЗначенияДляПолученияИзСтрокиВнутр);
	КонецЕсли;
	
	Возврат ОбновленныеЗначенияПараметров;
	
КонецФункции

Процедура УстановитьСкриптСобытияИзмененияЭлементаHTML(ЭлементHTML, ЭтоДокументDOM = Истина, ВерсияДляПечати = Ложь, ПолеВыбора = Ложь)
	
	Если Не ВерсияДляПечати Тогда
		Если Не ЭтоДокументDOM Тогда
			ЭлементHTML.setAttribute("onChange", ПолучитьТекстСкриптаОбработчикаИзмененияЭлементовHTML(ПолеВыбора));
			ЭлементHTML.ownerDocument.body.setAttribute("onload", "document.querySelectorAll('input').forEach(elInput => {elInput.addEventListener('input', ()=>{elInput.setAttribute('isOnChange', 1)});});");
		Иначе
			РаботаСDOMКлиентСервер.УстановитьАтрибутЭлементуDOM(ЭлементHTML, "onChange", ПолучитьТекстСкриптаОбработчикаИзмененияЭлементовHTML(ПолеВыбора));
			ЭлементHTML.ДокументВладелец.Тело.УстановитьАтрибут("onload", "document.querySelectorAll('input').forEach(elInput => {elInput.addEventListener('input', ()=>{elInput.setAttribute('isOnChange', 1)});});");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Преобразует вычисляемые блоки в версию для печати
//
// Параметры:
//  HTMLДокумент		 - ДокументHTML - HTML документ.
//  Объект				 - ДанныеФормыСтруктура - данные формы приема.
//  ПланЛеченияРеквизит	 - ДеревоЗначений - План лечения.
//
Процедура ПреобразоватьВычисляемыеБлокиВВерсиюДляПечати(HTMLДокумент, Знач Объект, Знач ПланЛеченияРеквизит) Экспорт
	
	НормализоватьВычисляемыеБлокиHTML(HTMLДокумент);
	
	СписокВычисляемыхБлоков = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(HTMLДокумент, "tt", Истина);
	Для Каждого ЭлементБлока Из СписокВычисляемыхБлоков Цикл
		ИдентификаторБлока = РаботаСHTMLКлиентСервер.ПолучитьИдентификаторЭлемента(ЭлементБлока);
		Если Не ЗначениеЗаполнено(ИдентификаторБлока) Тогда 
			Продолжить;
		КонецЕсли;
		Значение = РаботаСШаблонамиHTML.ВычислитьЗначениеБлокаHTML(ИдентификаторБлока, Объект, ПланЛеченияРеквизит);
		РаботаСHTMLКлиентСервер.ЗаменитьЭлементНаПроизвольныйHTML(ЭлементБлока, Значение);
	КонецЦикла;
	
КонецПроцедуры

// Формирует версию для редактирования шаблона осмотра
//
// Параметры:
//  ИдентификаторФормы	 - УникальныйИдентификатор	 - Уникальный идентификатор формы, из которой вызывается процедура.
//  ДанныеШаблона		 - Структура				 - Структура данных шаблона.
//  				Шаблон                     - СправочникСсылка.ШаблоныHTML - Шаблон HTML.
//  				ИдентификаторСтрокиШаблона - Число - Идентификатор строки шаблона в приеме.
//  				ТекстШаблона               - Строка - HTML текст шаблона.
//  ТаблицаПараметров	 - ТаблицаЗначений			 - Таблица параметров из приема.
//  КешЗначенийВыбора	 - Соответствие				 - Кеш значений выбора.
//  КешИзображенийПриема - Соответствие				 - Кеш изображений шаблонов.
//  ДанныеТаблицШаблонов - 							 - Структура
//  							ПараметрыТаблицШаблонов - ТаблицаЗначений - Таблица параметров многострочных таблиц шаблона.
// 
// Возвращаемое значение:
//  Структура - ТекстШаблонаПолный	 - Строка - Полный HTML текст шаблона.
//  			ОбновленныеЗначенияПараметров	 - Массив - Обновленные значения параметров.
//
Функция СформироватьВерсиюДляРедактированияШаблонаОсмотра(ИдентификаторФормы, ДанныеШаблона, ТаблицаПараметров, КешЗначенийВыбора = Неопределено, КешИзображенийПриема = Неопределено, ДанныеТаблицШаблонов = Неопределено, РисункиКартинок = Неопределено, ДобавленныеИзображения = Неопределено) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ДанныеШаблона.ТекстШаблона);
	ДокументHTMLШаблона = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ДанныеШаблона.ТекстШаблона);
	
	ОбновленныеЗначенияПараметров = ЗаполнитьЗначенияПараметровHTMLДокумента(ДокументHTML, ТаблицаПараметров, ДанныеШаблона.ИдентификаторСтрокиШаблона, КешЗначенийВыбора);
	
	ДобавитьКнопкиСворачиваемости(ДокументHTML, ТаблицаПараметров);
	УстановитьСкриптКонтекстногоМеню(ДокументHTML);
	
	Если ДобавленныеИзображения <> Неопределено Тогда
		ДобавитьКнопкиДобавленияИзображений(ДокументHTML, ДанныеШаблона.ИдентификаторСтрокиШаблона, ДобавленныеИзображения);
	КонецЕсли;
	
	Если РисункиКартинок <> Неопределено Тогда
		ДобавитьРисункиКартинок(ДокументHTML, ДанныеШаблона.ИдентификаторСтрокиШаблона, РисункиКартинок);
	КонецЕсли;
	
	Если ДанныеТаблицШаблонов <> Неопределено Тогда
		
		Для Каждого ЭлементТаблицы Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , "table", "data-bit-dyntable-id") Цикл
			
			Если РодительскаяДинамическаяТаблица(ЭлементТаблицы) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторТаблицы = ЭлементТаблицы.ПолучитьАтрибут("data-bit-dyntable-id");
			ТаблицаИзШаблона = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTMLШаблона, ИдентификаторТаблицы, , "data-bit-dyntable-id")[0];
			
			ЗаполнитьТаблицыШаблоновДокументаHTML(ДанныеТаблицШаблонов.ПараметрыТаблицШаблонов, ЭлементТаблицы, ДанныеТаблицШаблонов.ЭталонныеСтрокиТаблиц, Истина, ДанныеШаблона.ИдентификаторСтрокиШаблона);
			РекурсивноЗаполнитьВложенныеТаблицы(ДанныеТаблицШаблонов.ПараметрыТаблицШаблонов, ЭлементТаблицы, ТаблицаИзШаблона, ДанныеШаблона.ИдентификаторСтрокиШаблона, , "", ИдентификаторТаблицы, ДанныеТаблицШаблонов.ЭталонныеСтрокиТаблиц, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ЗагрузитьИзображенияПриема(ДокументHTML, КешИзображенийПриема, ИдентификаторФормы, ДанныеШаблона.Шаблон);
	
	ДанныеЗаполненногоШаблона = Новый Структура("ТекстШаблонаПолный, ОбновленныеЗначенияПараметров",
		РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML),
		ОбновленныеЗначенияПараметров);
	
	Возврат ДанныеЗаполненногоШаблона;
	
КонецФункции

// Обновляет текст таблиц шаблонов
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения - Форма приема.
//  ИдентификаторСтрокиШаблона	 - Число - Идентификатор строки шаблона в приеме.
//  ИдентификаторТаблицы		 - Число - Идентификатор таблицы.
//
Процедура ОбновитьТекстHTMLТаблицШаблонов(Форма, ИдентификаторСтрокиШаблона, ИдентификаторТаблицы, ПараметрыТаблицы) Экспорт
	
	СтрокаШаблона = Форма.Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
	СтрокаСтраницыШаблона = Форма.СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", СтрокаШаблона.ПолучитьИдентификатор()))[0];
	
	ДокументHTMLШаблона = РаботаСDOMКлиентСервер.СоздатьДокументDOM(СтрокаШаблона.ТекстШаблона);
	ТаблицаРезультат = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTMLШаблона, ИдентификаторТаблицы, , "data-bit-dyntable-id")[0];
	ТаблицаИзШаблона = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(РаботаСDOMКлиентСервер.СоздатьДокументDOM(СтрокаШаблона.ТекстШаблона), ИдентификаторТаблицы, , "data-bit-dyntable-id")[0];
	
	ЗаполнитьТаблицыШаблоновДокументаHTML(Форма.ПараметрыТаблицШаблонов, ТаблицаРезультат, СтрокаШаблона.ЭталонныеСтрокиТаблиц, Истина, ИдентификаторСтрокиШаблона, , ПараметрыТаблицы);
	РекурсивноЗаполнитьВложенныеТаблицы(Форма.ПараметрыТаблицШаблонов, ТаблицаРезультат, ТаблицаИзШаблона, ИдентификаторСтрокиШаблона, ПараметрыТаблицы, "", ИдентификаторТаблицы, СтрокаШаблона.ЭталонныеСтрокиТаблиц, Истина);
	
	Документ = Форма.Элементы[СтрокаСтраницыШаблона.ИмяПоляДокумента].Документ;
	ЭлементТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Документ, ИдентификаторТаблицы, ,"data-bit-dyntable-id")[0];
	ЭлементТаблицы.outerHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ТаблицаРезультат);
	
КонецПроцедуры

Процедура ПолучитьКоличествоЗаполненныхПараметров(Документ, ТаблицаПараметров, КоличествоЗаполненныхПараметров)
	
	Если Документ.ТипУзла = ТипУзлаDOM.Элемент
		И ЗначениеЗаполнено(Документ.Идентификатор)
	Тогда
		МассивПараметров = ТаблицаПараметров.НайтиСтроки( Новый Структура("СтрокаУидПараметра", Документ.Идентификатор));
		Если МассивПараметров.Количество() > 0 Тогда
			СтрокаПараметра = МассивПараметров[0];
			Если ТипЗнч(СтрокаПараметра.Значение) = Тип("Булево") Тогда
				Если СтрокаПараметра.Значение Тогда
					КоличествоЗаполненныхПараметров = КоличествоЗаполненныхПараметров + 1;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда	
				КоличествоЗаполненныхПараметров = КоличествоЗаполненныхПараметров + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДочернийУзел Из Документ.ДочерниеУзлы Цикл
		ПолучитьКоличествоЗаполненныхПараметров(ДочернийУзел, ТаблицаПараметров, КоличествоЗаполненныхПараметров)
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопкиСворачиваемости(ДокументHTML, ТаблицаПараметров)
	
	СворачиваемыеЭлементы = Новый Массив;
	ПолучитьСворачиваемыеЭлементы(ДокументHTML.Тело, СворачиваемыеЭлементы);
	
	Для Каждого ИдентификаторЭлемента Из СворачиваемыеЭлементы Цикл
		
		Элемент = ДокументHTML.ПолучитьЭлементПоИдентификатору(ИдентификаторЭлемента);
		
		Если Элемент.Атрибуты.ПолучитьИменованныйЭлемент("data-bit-collapse").Значение = "collapse" Тогда
			
			КоличествоЗаполненныхПараметров = 0;
			ПолучитьКоличествоЗаполненныхПараметров(Элемент, ТаблицаПараметров, КоличествоЗаполненныхПараметров);
			
			Если КоличествоЗаполненныхПараметров > 0 Тогда
				Элемент.УстановитьАтрибут("data-bit-collapse", "expand");
			КонецЕсли;
		КонецЕсли;
		
		ЭлементСвернут = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("data-bit-collapse").Значение = "collapse";
		ТекстКнопки = ?(ЭлементСвернут, "+", "-");
		
		Если ЭлементСвернут Тогда
			Элемент.УстановитьАтрибут("hidden", "true");
		КонецЕсли;
		
		КодКнопки = "<button id=""" + ИдентификаторЭлемента + "Button"" onclick=""elementHidden('" + ИдентификаторЭлемента + "')"">" + ТекстКнопки + "</button><br>";
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(Элемент.РодительскийУзел, КодКнопки,,Элемент);
		
	КонецЦикла;
	
	Если СворачиваемыеЭлементы.Количество() > 0 Тогда
		ТекстСкрипта = 
		"<script>function elementHidden(idName) {
		|	var elem = document.getElementById(idName);
		|   var button = document.getElementById(idName+'Button');
		|   if (elem.getAttribute('data-bit-collapse') === ""collapse"") {
		|       elem.removeAttribute('hidden');
		|		elem.setAttribute('data-bit-collapse','expand');
		|       button.innerHTML = ""-"";
		|   } else {
		|       elem.setAttribute('hidden','true');
		|       elem.setAttribute('data-bit-collapse','collapse');
		|       button.innerHTML = ""+"";
		|   }
		|}</script>";
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело, ТекстСкрипта);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСкриптКонтекстногоМеню(ДокументHTML) Экспорт
	
	ДокументHTML.Тело.УстановитьАтрибут("oncontextmenu","contextMenuFunc(event)");
	ТекстСкрипта =
		"<script type='text/javascript'>
		|	function contextMenuFunc(event){
		|		if (event.target !== document.body){
		|			event.target.setAttribute('bit-contextmenu-selectElement', 'true')};
		|		event.target.click();
		|	}
		|</script>";
	РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело.РодительскийУзел, ТекстСкрипта, , ДокументHTML.Тело);
	
КонецПроцедуры

Функция ПолучитьСворачиваемыеЭлементы(ДокументHTML, СворачиваемыеЭлементы)
	
	Если ДокументHTML.Атрибуты <> Неопределено И ДокументHTML.Атрибуты.ПолучитьИменованныйЭлемент("data-bit-collapse") <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ДокументHTML.Идентификатор) Тогда
			ДокументHTML.УстановитьАтрибут("id", Строка(Новый УникальныйИдентификатор()));
			ДокументHTML.УстановитьАтрибутИдентификатор("id", Истина);
		КонецЕсли;
		СворачиваемыеЭлементы.Добавить(ДокументHTML.Идентификатор);
	КонецЕсли;
		
	Для Каждого ДочернийЭлемент Из ДокументHTML.ДочерниеУзлы Цикл
		ПолучитьСворачиваемыеЭлементы(ДочернийЭлемент, СворачиваемыеЭлементы)
	КонецЦикла;
	
КонецФункции

Функция ДобавитьРисункиКартинокВТекстHTML(ТекстHTML, ИдентификаторСтрокиШаблона = Неопределено, РисункиКартинок = Неопределено, ВерсияДляРедактирования = Истина) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	ДобавитьРисункиКартинок(ДокументHTML, ИдентификаторСтрокиШаблона, РисункиКартинок, ВерсияДляРедактирования);
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

Процедура ДобавитьРисункиКартинок(ДокументHTML, ИдентификаторСтрокиШаблона = Неопределено, РисункиКартинок = Неопределено, ВерсияДляРедактирования = Истина) Экспорт
	
	РедактируемыеКартинки = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , , "data-bit-draw-id");
	
	Если РедактируемыеКартинки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РедактируемаяКартинка Из РедактируемыеКартинки Цикл
		ЗавернутьРедактируемуюКартинкуВКонтейнер(РедактируемаяКартинка, ИдентификаторСтрокиШаблона, РисункиКартинок, ВерсияДляРедактирования);
	КонецЦикла;
	
	Если ВерсияДляРедактирования Тогда
		ТекстСкрипта = 
			"<script>
			|	function overOutStyle(object, over){
			|		let buttonUid = object.parentNode.dataset.bitContainerDrawId;
			|		document.getElementById(buttonUid).style.opacity= over ? 1 : 0;
			|	}
			|</script>";
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело, ТекстСкрипта);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавернутьРедактируемуюКартинкуВКонтейнер(РедактируемаяКартинка, ИдентификаторСтрокиШаблона, РисункиКартинок, ВерсияДляРедактирования)
	
	УИДРисунка = Новый УникальныйИдентификатор(РедактируемаяКартинка.ПолучитьАтрибут("data-bit-draw-id"));
	
	Если РисункиКартинок <> Неопределено Тогда
		РисункиКартинки = РисункиКартинок.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, ИдентификаторРисунка", ИдентификаторСтрокиШаблона, УИДРисунка));
		Если Не ВерсияДляРедактирования И РисункиКартинки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// <img data-bit-draw-id="uid">
	//  ↓
	// <div data-bit-container-draw-id="container_uid">
	//	 <div id="container_uid" style="top:3;right:3;transition: opacity .3s;position: absolute;z-index:2; opacity:0">
	//		 <button id="random_uid" style="background-color:white"></button>
	//	 </div>
	//	 <img data-bit-picture-id="container_uid" style="position: absolute;z-index:1"></img>
	//	 <img data-bit-draw-id="uid"></img>
	// </div>
	
	ДокументHTML = РедактируемаяКартинка.ДокументВладелец;
	РодительскийЭлемент = РедактируемаяКартинка.РодительскийУзел;
	
	ИдентификаторКонтейнера = Строка(Новый УникальныйИдентификатор);
	
	Если ВерсияДляРедактирования Тогда
		РедактируемаяКартинка.УстановитьАтрибут("onmouseover",	"overOutStyle(this, true)");
		РедактируемаяКартинка.УстановитьАтрибут("onmouseout",	"overOutStyle(this, false)");
	КонецЕсли;
	
	// Контейнер
	Контейнер = ДокументHTML.СоздатьЭлемент("div");
	Если ВерсияДляРедактирования Тогда
		Контейнер.УстановитьАтрибут("data-bit-container-draw-id", ИдентификаторКонтейнера);
	КонецЕсли;
	Контейнер.УстановитьАтрибут("style", "position:relative;display: inline-block;");
	
	РодительскийЭлемент.ВставитьПеред(Контейнер, РедактируемаяКартинка);
	
	Контейнер.ДобавитьДочерний(РедактируемаяКартинка);
	
	Если ВерсияДляРедактирования Тогда
		// Кнопка
		КонтейнерКнопки = ДокументHTML.СоздатьЭлемент("div");
		КонтейнерКнопки.УстановитьАтрибут("onmouseover",	"overOutStyle(this, true)");
		КонтейнерКнопки.УстановитьАтрибут("onmouseout",	"overOutStyle(this, false)");
		КонтейнерКнопки.УстановитьАтрибут("id",			ИдентификаторКонтейнера);
		ИзменитьЭлементСтиля(КонтейнерКнопки, "top", "3");
		ИзменитьЭлементСтиля(КонтейнерКнопки, "right", "3");
		ИзменитьЭлементСтиля(КонтейнерКнопки, "transition", "opacity .3s");
		ИзменитьЭлементСтиля(КонтейнерКнопки, "position", "absolute");
		ИзменитьЭлементСтиля(КонтейнерКнопки, "z-index", "2");
		ИзменитьЭлементСтиля(КонтейнерКнопки, "opacity", "0");
		
		Кнопка = ДокументHTML.СоздатьЭлемент("button");
		Кнопка.УстановитьАтрибут("id", Строка(Новый УникальныйИдентификатор));
		Кнопка.ТекстовоеСодержимое = НСтр("ru='Редактировать'");
		ИзменитьЭлементСтиля(Кнопка, "background-color", "white");
		
		КонтейнерКнопки.ДобавитьДочерний(Кнопка);
		Контейнер.ВставитьПеред(КонтейнерКнопки, РедактируемаяКартинка);
	КонецЕсли;
	
	// Рисунок
	Рисунок = ДокументHTML.СоздатьЭлемент("img");
	Если ВерсияДляРедактирования Тогда
		Рисунок.УстановитьАтрибут("data-bit-picture-id", ИдентификаторКонтейнера);
		Рисунок.УстановитьАтрибут("onmouseover",		 "overOutStyle(this, true)");
		Рисунок.УстановитьАтрибут("onmouseout",			 "overOutStyle(this, false)");
	КонецЕсли;

	ИзменитьЭлементСтиля(Рисунок, "z-index", "1");
	ИзменитьЭлементСтиля(Рисунок, "position", "absolute");
	
	СтильКартинки = РедактируемаяКартинка.ПолучитьАтрибут("style");
	Если СтильКартинки <> Неопределено Тогда
		Для Каждого ПравилоСтиля Из СтрРазделить(СтильКартинки, ";", Ложь) Цикл
			
			КлючИЗначение = СтрРазделить(СокрЛП(ПравилоСтиля), ":");
			Если КлючИЗначение.Количество() <> 2 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НРег(КлючИЗначение[0]) = "height"
				Или НРег(КлючИЗначение[0]) = "width"
			Тогда
				ИзменитьЭлементСтиля(Рисунок, КлючИЗначение[0], КлючИЗначение[1]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РисункиКартинок = Неопределено
		Или РисункиКартинки.Количество() = 0
	Тогда
		ИзменитьЭлементСтиля(Рисунок, "visibility", "hidden");
	Иначе
		Рисунок.УстановитьАтрибут("src", РисункиКартинки[0].АдресРисунка);
		ИзменитьЭлементСтиля(Рисунок, "visibility",, Истина);
	КонецЕсли;
	
	ПеренестиСтилиВЭлементКартинки(РедактируемаяКартинка, Рисунок);
	
	Контейнер.ВставитьПеред(Рисунок, РедактируемаяКартинка);
	
КонецПроцедуры

Процедура ОбновитьТекстHTMLКонтейнераРисунка(Форма, ИдентификаторСтрокиШаблона, ИдентификаторКонтейнера, ИдентификаторРисунка, АдресРисунка) Экспорт
	
	СтрокаШаблона = Форма.Объект.ШаблоныПриема.НайтиПоИдентификатору(ИдентификаторСтрокиШаблона);
	СтрокаСтраницыШаблона = Форма.СтраницыШаблоновПриема.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона", СтрокаШаблона.ПолучитьИдентификатор()))[0];
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Форма[СтрокаСтраницыШаблона.ИмяРеквизита]);
	Рисунок = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдентификаторКонтейнера, ,"data-bit-picture-id")[0];
	
	ИзменитьЭлементСтиля(Рисунок, "z-index", "1");
	ИзменитьЭлементСтиля(Рисунок, "position", "absolute");
	
	Картинка = Неопределено;
	Для Каждого ДочернийУзел Из Рисунок.РодительскийУзел.ДочерниеУзлы Цикл
		Попытка
			Если ДочернийУзел.ПолучитьАтрибут("data-bit-draw-id") = Строка(ИдентификаторРисунка) Тогда
				Картинка = ДочернийУзел;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Если Картинка <> Неопределено Тогда
		СтильКартинки = Картинка.ПолучитьАтрибут("style");
		Если СтильКартинки <> Неопределено Тогда
			Для Каждого ПравилоСтиля Из СтрРазделить(СтильКартинки, ";", Ложь) Цикл
				
				КлючИЗначение = СтрРазделить(СокрЛП(ПравилоСтиля), ":");
				Если КлючИЗначение.Количество() <> 2 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НРег(КлючИЗначение[0]) = "height"
					Или НРег(КлючИЗначение[0]) = "width"
				Тогда
					ИзменитьЭлементСтиля(Рисунок, КлючИЗначение[0], КлючИЗначение[1]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресРисунка) Тогда
		ИзменитьЭлементСтиля(Рисунок, "visibility", "hidden");
	Иначе
		ИзменитьЭлементСтиля(Рисунок, "visibility",, Истина);
	КонецЕсли;
	
	Рисунок.УстановитьАтрибут("src", АдресРисунка);
	
	Документ = Форма.Элементы[СтрокаСтраницыШаблона.ИмяПоляДокумента].Документ;
	ЭлементТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Документ, ИдентификаторКонтейнера, ,"data-bit-picture-id")[0];
	ЭлементТаблицы.outerHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(Рисунок);
	
КонецПроцедуры

// Скрывает эталонную строку и добавляет кнопку для редактирования таблицы шаблонов при необходимости
//
// Параметры:
//  Элемент				 - ЭлементHTML - HTML элемент таблицы шаблонов.
//  НомерЭталоннойСтроки - Число - Номер эталонной строки шаблона.
//  ДляРедактирования	 - Булево - Истина, если требуется версия для редактирования.
//
Процедура ПодготовитьТаблицуШаблоновКДобавлениюВДокументHTML(Элемент, УидТаблицыШаблонов, ЭталонныеСтрокиТаблиц, НомерЭталоннойСтроки = 1, ДляРедактирования = Ложь) Экспорт
	
	НомерЭталоннойСтрокиТаблицы = ПолучитьНомерЭталоннойСтроки(ЭталонныеСтрокиТаблиц, УидТаблицыШаблонов);//РаботаСШаблонамиHTML.НомерЭталоннойСтрокиТаблицыШаблонов(УидТаблицыШаблонов);
	Если НомерЭталоннойСтрокиТаблицы <> Неопределено Тогда
		НомерЭталоннойСтроки = НомерЭталоннойСтрокиТаблицы;
	КонецЕсли;
	
	ИндексУзлаТелаТаблицы = Неопределено;
	Инд = 0;
	Для Каждого Узел Из Элемент.ПолучитьТелоТаблицы() Цикл
		Если НРег(Узел.ИмяУзла) = "tbody" Тогда
			ИндексУзлаТелаТаблицы = Инд;
		Иначе
			Инд = Инд+1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексУзлаТелаТаблицы = Неопределено Тогда
		ИндексУзлаТелаТаблицы = 0;
	КонецЕсли;
			
	Для Каждого СтрокаТаблицы Из Элемент.ПолучитьТелоТаблицы()[ИндексУзлаТелаТаблицы].ДочерниеУзлы Цикл
		Если СтрокаТаблицы.ИндексСтроки = НомерЭталоннойСтроки - 1 Тогда //
			СтрокаТаблицы.УстановитьАтрибут("hidden", "true");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДляРедактирования Тогда
		ТекстКнопки = "<button data-bit-dyntable-button=""true"" data-bit-dyntable-id-button=""" + Элемент.ПолучитьАтрибут("data-bit-dyntable-id") + """>Изменить строки</button><br>";
		РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(Элемент.РодительскийУзел, ТекстКнопки,,Элемент);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНомерЭталоннойСтроки(ЭталонныеСтрокиТаблиц, УидТаблицыШаблонов) Экспорт
	
	Если ТипЗнч(ЭталонныеСтрокиТаблиц) <> Тип("СписокЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ДанныеЭталоннойСтроки Из ЭталонныеСтрокиТаблиц.ВыгрузитьЗначения() Цикл
		Если ДанныеЭталоннойСтроки.ИдентификаторТаблицы = УидТаблицыШаблонов Тогда
			Возврат ДанныеЭталоннойСтроки.НомерЭталоннойСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьТаблицыШаблоновДокументаHTML(ДанныеТаблицШаблонов, Элемент, ЭталонныеСтрокиТаблиц, ДляРедактирования = Ложь, ИдентификаторСтрокиШаблона, ВерсияДляСЭМД = Ложь, ПараметрыТаблицы = Неопределено, ИдентификаторРодительскойСтроки = Неопределено) Экспорт
	
	УидТаблицыШаблонов = Элемент.ПолучитьАтрибут("data-bit-dyntable-id");
	
	Если Не ЗначениеЗаполнено(УидТаблицыШаблонов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.Идентификатор) Тогда
		Элемент.УстановитьАтрибут("id", Строка(Новый УникальныйИдентификатор()));
		Элемент.УстановитьАтрибутИдентификатор("id", Истина);
	КонецЕсли;
	
	НомерЭталоннойСтроки = 1;
	ПодготовитьТаблицуШаблоновКДобавлениюВДокументHTML(Элемент, УидТаблицыШаблонов, ЭталонныеСтрокиТаблиц, НомерЭталоннойСтроки, ДляРедактирования);
	
	ИндексУзлаТелаТаблицы = Неопределено;
	Инд = 0;
	Для Каждого Узел Из Элемент.ДочерниеУзлы Цикл
		Если НРег(Узел.ИмяУзла) = "tbody" Тогда
			ИндексУзлаТелаТаблицы = Инд;
		Иначе
			Инд = Инд+1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексУзлаТелаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ИдентификаторТаблицы, ИдентификаторСтрокиШаблона", УидТаблицыШаблонов, ИдентификаторСтрокиШаблона);
	
	Если ИдентификаторРодительскойСтроки <> Неопределено Тогда
		СтруктураПоиска.Вставить("ИдентификаторРодительскойСтроки", ИдентификаторРодительскойСтроки);
	КонецЕсли;
	
	ДанныеТекущейТаблицы = ДанныеТаблицШаблонов.НайтиСтроки(СтруктураПоиска);
	
	Если ДанныеТекущейТаблицы.Количество() > 0 Тогда
		
		НомераСтрокТаблицыПараметров = Новый Массив;
		Для Каждого СтрокаДанныхТаблиц Из ДанныеТекущейТаблицы Цикл
			Если СтрокаДанныхТаблиц.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона
				И НомераСтрокТаблицыПараметров.Найти(СтрокаДанныхТаблиц.НомерСтрокиТаблицы) = Неопределено
			Тогда
				НомераСтрокТаблицыПараметров.Добавить(СтрокаДанныхТаблиц.НомерСтрокиТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		СтрокиТаблицы = Элемент.ДочерниеУзлы[ИндексУзлаТелаТаблицы].ДочерниеУзлы;
		ИндексЭталоннойСтроки = НомерЭталоннойСтроки - 1;
		
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Если СтрокаТаблицы.ИндексСтроки = ИндексЭталоннойСтроки Тогда
				ТекстНовойСтроки = ПолучитьТекстНовойСтрокиТаблицыШаблона(СтрокаТаблицы);
				Если СтрокиТаблицы.Количество() > ИндексЭталоннойСтроки + 1 Тогда
					// Эталонная строка не последняя
					Для Каждого Строка Из СтрокиТаблицы Цикл
						Если Строка.ИндексСтроки = ИндексЭталоннойСтроки + 1 Тогда
							СтрокаПодвала = Строка;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					СтрокаПодвала = Неопределено;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(НомераСтрокТаблицыПараметров);
		Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		НомераСтрокТаблицыПараметров = Список.ВыгрузитьЗначения();
		
		Для Каждого НомерСтроки Из НомераСтрокТаблицыПараметров Цикл
			
			СтруктураПоиска = Новый Структура("ИдентификаторТаблицы, ИдентификаторСтрокиШаблона, НомерСтрокиТаблицы", УидТаблицыШаблонов, ИдентификаторСтрокиШаблона, НомерСтроки);
			
			Если ИдентификаторРодительскойСтроки <> Неопределено Тогда
				СтруктураПоиска.Вставить("ИдентификаторРодительскойСтроки", ИдентификаторРодительскойСтроки);
			КонецЕсли;
			
			ДанныеТекущейСтроки = ДанныеТаблицШаблонов.НайтиСтроки(СтруктураПоиска);
			РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(Элемент.ПолучитьТелоТаблицы()[0], ТекстНовойСтроки,,СтрокаПодвала);
			НовыеСтрокиТаблицы = Элемент.ДочерниеУзлы[ИндексУзлаТелаТаблицы].ДочерниеУзлы;
			
			ТекущаяСтрока = Неопределено;
			Для Каждого Строка Из НовыеСтрокиТаблицы Цикл
				Если Строка.ИндексСтроки = ИндексЭталоннойСтроки + НомерСтроки Тогда
					ТекущаяСтрока = Строка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяСтрока <> Неопределено Тогда
				Для Каждого СтрокаПараметр Из ДанныеТекущейСтроки Цикл
					ПараметрНаЗамену = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТекущаяСтрока, СтрокаПараметр.Параметр.УникальныйИдентификатор(), ПолучитьТегиПараметров());
					Если ПараметрНаЗамену.Количество() <> 0 Тогда
						ТекстВставки = РаботаСHTMLКлиентСервер.СформироватьТекстHTMLСПереносами(СтрокаПараметр.Представление);
						РаботаСHTMLКлиентСервер.ЗаменитьЭлементНаПроизвольныйHTML(ПараметрНаЗамену[0], ТекстВставки);
					КонецЕсли;
					
					Попытка
						ТекущаяСтрока.УстановитьАтрибут("data-bit-dyntable-tr-id", СтрокаПараметр.ИдентификаторСтроки);
					Исключение КонецПопытки;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицы = Элемент.ДочерниеУзлы[ИндексУзлаТелаТаблицы].ДочерниеУзлы;
	ИндексЭталоннойСтроки = НомерЭталоннойСтроки - 1;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если СтрокаТаблицы.ИндексСтроки <> ИндексЭталоннойСтроки Тогда
			УстановитьЗначенияПараметров(ПараметрыТаблицы, СтрокаТаблицы, ИдентификаторСтрокиШаблона);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстНовойСтрокиТаблицыШаблона(СтрокаТаблицы)
	
	СтрокаТаблицы.УдалитьАтрибут("hidden");
	ТекстНовойСтроки = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(СтрокаТаблицы);
	СтрокаТаблицы.УстановитьАтрибут("hidden", "true");
	Возврат ТекстНовойСтроки;
	
КонецФункции

// Возвращает текст HTML шапки шаблона приема
//
// Параметры:
//  ДатаПриема	 - Дата - Дата приема.
//  Сотрудник	 - СправочникСсылка.Сотрудники - Сотрудник в приеме.
//  ШаблонПриема - СправочникСсылка.ШаблоныHTML - Шаблон приема.
// 
// Возвращаемое значение:
//  Строка - Шапка шаблона приема.
//
Функция ПолучитьТекстHTMLШапкаШаблонаПриема(ДатаПриема, Сотрудник, ШаблонПриема) Экспорт
	
	ТекстЛевойЧастиШапки = Формат(ДатаПриема, "ДФ='дд.ММ.гггг ЧЧ:мм'") + " " + Строка(ШаблонПриема);
	ТекстПравойЧастиШапки = Строка(Сотрудник);
	
	Возврат "<style media=""print""> .bit-medicalHeader {display:none;}</style>
			|<DIV class=""bit-medicalHeader"" align=left><EM><FONT size=2 color=#888888><div style=""overflow:hidden""><div style=""float:left"">" +
			ТекстЛевойЧастиШапки + "</div><div style=""float:right"">" + ТекстПравойЧастиШапки + "</div></div></EM></FONT></DIV>";

КонецФункции

// Добавляет шапку тексту шаблона
//
// Параметры:
//  ТекстШаблона	 - Строка						- HTML-текст полной печатной версии шаблона.
//  РежимДляКлиента	 - Булево						- режим получателя (клиент или медкарта).
//  ШаблонПриема	 - СправочникСсылка.ШаблоныHTML	- шаблон медицинского документа.
//  Филиал			 - СправочникСсылка.Филиалы		- филиал медицинского документа.
//  ДатаДокумента	 - Дата							- дата медицинского документа.
// 
// Возвращаемое значение:
//  Строка - HTML-текст.
//
Функция УстановитьШапкуШаблона(ТекстШаблона, РежимДляКлиента, Документ) Экспорт
	
	НастройкиШаблонов = РаботаСШаблонамиHTMLПовтИсп.ПолучитьНастройкиШаблоновHTML(Документ.Дата, Документ.Филиал);
	
	Если НастройкиШаблонов.ШаблонМедицинскогоЗаголовка <> Неопределено Тогда
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона);
		
		ПервыйДочернийУзел = ?(ДокументHTML.Тело.ДочерниеУзлы.Количество() > 0, ДокументHTML.Тело.ДочерниеУзлы[0], Неопределено);
		Если РежимДляКлиента = Истина Тогда
			РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело, НастройкиШаблонов.ТекстКлиентскогоЗаголовка,, ПервыйДочернийУзел);
		Иначе
			РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело, НастройкиШаблонов.ТекстМедицинскогоЗаголовка,, ПервыйДочернийУзел);
		КонецЕсли;
		
		Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	Иначе
		Возврат ТекстШаблона;
	КонецЕсли;
	
КонецФункции

Процедура РекурсивноЗаполнитьВложенныеТаблицы(ПараметрыТаблицШаблонов, ТаблицаРезультат, ТаблицаИзШаблона, ИдентификаторСтрокиШаблона, ПараметрыТаблицы,
	ИдентификаторРодительскойСтроки, ИдентификаторТаблицы, ЭталонныеСтрокиТаблиц, РежимРедактированияТаблицыНеэталоннойСтроки = Ложь) Экспорт
	
	ИдентификаторыСтрокТаблицы = Новый Массив;
	ВложенныеТаблицыНеэталоннойСтроки = Новый Массив;
	НомераИдентификаторовСтрок = Новый СписокЗначений;
	
	СтрокиПараметровТаблицы = ПараметрыТаблицШаблонов.НайтиСтроки(Новый Структура("ИдентификаторРодительскойСтроки", ИдентификаторРодительскойСтроки));
	Для Каждого СтрокаПараметровТаблицы Из СтрокиПараметровТаблицы Цикл
		Если ИдентификаторыСтрокТаблицы.Найти(СтрокаПараметровТаблицы.ИдентификаторСтроки) <> Неопределено
			Или ВложенныеТаблицыНеэталоннойСтроки.Найти(СтрокаПараметровТаблицы.ИдентификаторТаблицы) <> Неопределено
		Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицыПараметра = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТаблицаИзШаблона, СтрокаПараметровТаблицы.ИдентификаторТаблицы, "table", "data-bit-dyntable-id");
		Если ТаблицыПараметра.Количество() <> 0 Тогда
			Если ЭтоВложеннаяТаблицаНеэталоннойСтроки(ИдентификаторТаблицы, СтрокаПараметровТаблицы.ИдентификаторТаблицы, ТаблицаИзШаблона, ЭталонныеСтрокиТаблиц) Тогда
				ВложенныеТаблицыНеэталоннойСтроки.Добавить(СтрокаПараметровТаблицы.ИдентификаторТаблицы);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторыСтрокТаблицы.Добавить(СтрокаПараметровТаблицы.ИдентификаторСтроки);
		НомераИдентификаторовСтрок.Добавить(СтрокаПараметровТаблицы.НомерСтрокиТаблицы, СтрокаПараметровТаблицы.ИдентификаторСтроки);
	КонецЦикла;
	
	ВсеВложенныеТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТаблицаРезультат, , "table", "data-bit-dyntable-id");
	Для Каждого ВложеннаяТаблицаТаблицы Из ВсеВложенныеТаблицы Цикл
		
		ИдентификаторВложеннойТаблицы = ВложеннаяТаблицаТаблицы.ПолучитьАтрибут("data-bit-dyntable-id");
		Если ВложенныеТаблицыНеэталоннойСтроки.Найти(ИдентификаторВложеннойТаблицы) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ЭтоВложеннаяТаблицаНеэталоннойСтроки(ИдентификаторТаблицы, ИдентификаторВложеннойТаблицы, ТаблицаИзШаблона, ЭталонныеСтрокиТаблиц) Тогда
			ВложенныеТаблицыНеэталоннойСтроки.Добавить(ИдентификаторВложеннойТаблицы);
			Продолжить;
		КонецЕсли;
		
		ПодготовитьТаблицуШаблоновКДобавлениюВДокументHTML(ВложеннаяТаблицаТаблицы, ИдентификаторВложеннойТаблицы, ЭталонныеСтрокиТаблиц);
	КонецЦикла;
	
	НомераИдентификаторовСтрок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Для Каждого НомерИдентификатораСтроки Из НомераИдентификаторовСтрок Цикл
		СтрокиПараметровСтрокиТаблицы = ПараметрыТаблицШаблонов.НайтиСтроки(Новый Структура("ИдентификаторРодительскойСтроки", НомерИдентификатораСтроки.Представление));
		ИдентификаторыТаблиц = Новый Массив;
		ЭлементыСтрокиВложеннойТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТаблицаРезультат, НомерИдентификатораСтроки.Представление, "tr", "data-bit-dyntable-tr-id");
		
		Если ЭлементыСтрокиВложеннойТаблицы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПараметровСтрокиТаблицы Из СтрокиПараметровСтрокиТаблицы Цикл
			Если ИдентификаторыТаблиц.Найти(СтрокаПараметровСтрокиТаблицы.ИдентификаторТаблицы) = Неопределено Тогда
				ИдентификаторыТаблиц.Добавить(СтрокаПараметровСтрокиТаблицы.ИдентификаторТаблицы);
				ЭлементТаблицыВложеннойТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементыСтрокиВложеннойТаблицы[0], СтрокаПараметровСтрокиТаблицы.ИдентификаторТаблицы, "table", "data-bit-dyntable-id")[0];
				ЗаполнитьТаблицыШаблоновДокументаHTML(ПараметрыТаблицШаблонов, ЭлементТаблицыВложеннойТаблицы, ЭталонныеСтрокиТаблиц, , ИдентификаторСтрокиШаблона, , , НомерИдентификатораСтроки.Представление);
			КонецЕсли;
		КонецЦикла;
		
		РекурсивноЗаполнитьВложенныеТаблицы(ПараметрыТаблицШаблонов, ТаблицаРезультат, ТаблицаИзШаблона, ИдентификаторСтрокиШаблона, ПараметрыТаблицы, НомерИдентификатораСтроки.Представление, ИдентификаторТаблицы, ЭталонныеСтрокиТаблиц);
	КонецЦикла;
	
	Для Каждого ИдентификаторТаблицыНеэталоннойСтроки Из ВложенныеТаблицыНеэталоннойСтроки Цикл
		ТаблицаНеэталоннойСтроки = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТаблицаРезультат, ИдентификаторТаблицыНеэталоннойСтроки, "table", "data-bit-dyntable-id")[0];
		ДляРедактирования = РежимРедактированияТаблицыНеэталоннойСтроки И ТаблицаРезультат.ПолучитьАтрибут("data-bit-dyntable-id") = РодительскаяДинамическаяТаблица(РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТаблицаРезультат, ИдентификаторТаблицыНеэталоннойСтроки, "table", "data-bit-dyntable-id")[0]).ПолучитьАтрибут("data-bit-dyntable-id");
		ЗаполнитьТаблицыШаблоновДокументаHTML(ПараметрыТаблицШаблонов, ТаблицаНеэталоннойСтроки, ЭталонныеСтрокиТаблиц, ДляРедактирования, ИдентификаторСтрокиШаблона, , ПараметрыТаблицы, ИдентификаторРодительскойСтроки);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоВложеннаяТаблицаНеэталоннойСтроки(ИдентификаторТаблицы, ИдентификаторТаблицыПараметра, ТаблицаИзШаблона, ЭталонныеСтрокиТаблиц)
	
	ТаблицыПараметра = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТаблицаИзШаблона, ИдентификаторТаблицыПараметра, "table", "data-bit-dyntable-id");
	РодительскаяДинамическаяТаблица = РодительскаяДинамическаяТаблица(ТаблицыПараметра[0]);
	
	Если РодительскаяДинамическаяТаблица <> Неопределено
		И РодительскаяДинамическаяТаблица.ПолучитьАтрибут("data-bit-dyntable-id") = ИдентификаторТаблицы
	Тогда
		
		НомерЭталоннойСтроки = Неопределено;
		ИндексСтроки = 0;
		Для Каждого СтрокаРодительскойТаблицы Из РодительскаяДинамическаяТаблица.ПолучитьТелоТаблицы()[0].ДочерниеУзлы Цикл
			Если РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(СтрокаРодительскойТаблицы, ИдентификаторТаблицыПараметра, "table", "data-bit-dyntable-id").Количество() <> 0 Тогда
				ИндексСтроки = СтрокаРодительскойТаблицы.ИндексСтроки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НомерЭталоннойСтроки = ПолучитьНомерЭталоннойСтроки(ЭталонныеСтрокиТаблиц, ИдентификаторТаблицы);
		
		Если НомерЭталоннойСтроки <> Неопределено
			И НомерЭталоннойСтроки - 1 <> ИндексСтроки
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВставитьДобавленныеИзображенияВТекстHTML(ТекстHTML, ИдентификаторСтрокиШаблона = Неопределено, ДобавленныеИзображения = Неопределено, ВерсияДляРедактирования = Истина) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	ДобавитьКнопкиДобавленияИзображений(ДокументHTML, ИдентификаторСтрокиШаблона, ДобавленныеИзображения, ВерсияДляРедактирования);
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

Процедура ДобавитьКнопкиДобавленияИзображений(ДокументHTML, ИдентификаторСтрокиШаблона = Неопределено, ДобавленныеИзображения = Неопределено, ВерсияДляРедактирования = Истина) Экспорт
	
	ЭлементыДобавленияИзображений = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , , "data-bit-selected-img-id");
	
	Если ЭлементыДобавленияИзображений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДобавленияИзображения Из ЭлементыДобавленияИзображений Цикл
		ЗавернутьЭлементыДобавленияИзображенияВКонтейнер(ЭлементДобавленияИзображения, ИдентификаторСтрокиШаблона, ДобавленныеИзображения, ВерсияДляРедактирования);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавернутьЭлементыДобавленияИзображенияВКонтейнер(ЭлементДобавленияИзображения, ИдентификаторСтрокиШаблона, ДобавленныеИзображения, ВерсияДляРедактирования)
	
	ИдентификаторИзображения = ЭлементДобавленияИзображения.ПолучитьАтрибут("data-bit-selected-img-id");
	
	ДобавленноеИзображение = Неопределено;
	Если ДобавленныеИзображения <> Неопределено Тогда
		СтрокиДобавленногоИзображения = ДобавленныеИзображения.НайтиСтроки(Новый Структура("ИдентификаторСтрокиШаблона, ИдентификаторИзображения", ИдентификаторСтрокиШаблона, Новый УникальныйИдентификатор(ИдентификаторИзображения)));
		Если СтрокиДобавленногоИзображения.Количество() > 0 Тогда
			ДобавленноеИзображение = СтрокиДобавленногоИзображения[0].АдресИзображения;
		КонецЕсли;
	КонецЕсли;
	
	ДокументHTML = ЭлементДобавленияИзображения.ДокументВладелец;
	РодительскийЭлемент = ЭлементДобавленияИзображения.РодительскийУзел;
	
	// Изображение
	Изображение = ДокументHTML.СоздатьЭлемент("img");
	Изображение.УстановитьАтрибут("id", ИдентификаторИзображения);
	
	ПеренестиСтилиВЭлементКартинки(ЭлементДобавленияИзображения, Изображение);
	
	Если ЭлементДобавленияИзображения.ЕстьАтрибут("data-bit-draw-id") Тогда
		Изображение.УстановитьАтрибут("data-bit-draw-id", ЭлементДобавленияИзображения.ПолучитьАтрибут("data-bit-draw-id"));
	КонецЕсли;
	
	// Контейнер
	Если ВерсияДляРедактирования Тогда
		
		// <img data-bit-selected-img-id="uid"></img>
		//  ↓
		// <div data-bit-selected-img-container-id="container_uid">
		//	 <div id="container_uid">
		//		 <button id="random_uid">Добавить изображение</button>
		//		 <button id="random_uid" data-bit-selected-img-action-delete="true">Удалить изображение</button>
		//	 </div>
		//	 <img id="uid"></img>
		// </div>
		
		ИдентификаторКонтейнера = Строка(Новый УникальныйИдентификатор);
		
		ЭлементДобавленияИзображения.Идентификатор = Строка(Новый УникальныйИдентификатор);
		
		КнопкаДобавленияИзображения = ДокументHTML.СоздатьЭлемент("button");
		ИзменитьЭлементСтиля(КнопкаДобавленияИзображения, "background-color", "white");
		КнопкаУдаленияИзображения = КнопкаДобавленияИзображения.КлонироватьУзел(Истина);
		КнопкаДобавленияИзображения.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КнопкаУдаленияИзображения.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КнопкаУдаленияИзображения.УстановитьАтрибут("data-bit-selected-img-action-delete", "true");
		
		Контейнер = ДокументHTML.СоздатьЭлемент("div");
		Контейнер.УстановитьАтрибут("data-bit-selected-img-container-id", ИдентификаторКонтейнера);
		
		КонтейнерКнопок = ДокументHTML.СоздатьЭлемент("div");
		КонтейнерКнопок.Идентификатор = ИдентификаторКонтейнера;
		
		РодительскийЭлемент.ВставитьПеред(Контейнер, ЭлементДобавленияИзображения);
		Контейнер.ДобавитьДочерний(КонтейнерКнопок);
		Контейнер.ДобавитьДочерний(Изображение);
		КонтейнерКнопок.ДобавитьДочерний(КнопкаДобавленияИзображения);
		КонтейнерКнопок.ДобавитьДочерний(КнопкаУдаленияИзображения);
		
		ИзменитьОтображениеЭлементовКонтейнераДобавленияИзображения(Контейнер, ДобавленноеИзображение);
	Иначе
		
		// <img data-bit-selected-img-id="uid"></img>
		//  ↓
		// <img id="uid"></img>
		
		РодительскийЭлемент.ВставитьПеред(Изображение, ЭлементДобавленияИзображения);
		
		Если ДобавленноеИзображение = Неопределено Тогда
			РодительскийЭлемент.УдалитьДочерний(Изображение);
		Иначе
			Изображение.src = ДобавленноеИзображение;
		КонецЕсли;
	КонецЕсли;
	
	РодительскийЭлемент.УдалитьДочерний(ЭлементДобавленияИзображения);
	
КонецПроцедуры

Процедура ИзменитьОтображениеЭлементовКонтейнераДобавленияИзображения(Контейнер, ДобавленноеИзображение = Неопределено) Экспорт
	
	КнопкаДобавленияИзображения = Контейнер.firstChild.firstChild;
	КнопкаУдаленияИзображения = Контейнер.firstChild.lastChild;
	Изображение = ПолучитьЭлементДобавляемогоИзображения(Контейнер);
	
	Контейнер.firstChild.lastChild.textContent = НСтр("ru='Удалить изображение'");
	
	Если ДобавленноеИзображение <> Неопределено Тогда
		Контейнер.firstChild.firstChild.textContent = НСтр("ru='Изменить изображение'");
		ИзменитьЭлементСтиля(КнопкаУдаленияИзображения,	"visibility",	, Истина);
		ИзменитьЭлементСтиля(Изображение,				"display",		, Истина);
		Изображение.src = ДобавленноеИзображение;
	Иначе
		Контейнер.firstChild.firstChild.textContent = НСтр("ru='Добавить изображение'");
		ИзменитьЭлементСтиля(КнопкаУдаленияИзображения,	"visibility",	"hidden");
		ИзменитьЭлементСтиля(Изображение,				"display",		"none");
		Изображение.src = "//:0";
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьЭлементСтиля(ЭлементHTML, ИмяЭлементаСтиля, ЗначениеЭлементаСтиля = Неопределено, УдалитьЭлементСтиля = Ложь) Экспорт
	
	ИзменитьЭлементАтрибута(ЭлементHTML, "style", ИмяЭлементаСтиля, ЗначениеЭлементаСтиля, УдалитьЭлементСтиля);
	
КонецПроцедуры

Процедура ИзменитьЭлементАтрибута(ЭлементHTML, Атрибут, ИмяЭлементаАтрибута, ЗначениеЭлементаАтрибута = Неопределено, УдалитьЭлементАтрибута = Ложь) Экспорт
	
	ЗначениеАтрибута = ЭлементHTML.getAttribute(Атрибут);
	Если ЗначениеЭлементаАтрибута = Неопределено Тогда
		НовыйЭлементАтрибута = СтрШаблон("%1", ИмяЭлементаАтрибута);
	Иначе
		НовыйЭлементАтрибута = СтрШаблон("%1:%2", ИмяЭлементаАтрибута, ЗначениеЭлементаАтрибута);
	КонецЕсли;
	
	Если ЗначениеАтрибута = Неопределено Тогда
		Если Не УдалитьЭлементАтрибута Тогда
			ЭлементHTML.setAttribute(Атрибут, НовыйЭлементАтрибута);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИндексНайденногоЭлементаАтрибута = Неопределено;
	ЭлементыАтрибута = СтрРазделить(ЗначениеАтрибута, ";", Ложь);
	Для Каждого ЭлементАтрибута Из ЭлементыАтрибута Цикл
		Если НРег(СокрЛП(СтрРазделить(СокрЛП(ЭлементАтрибута), ":", Ложь)[0])) = НРег(СокрЛП(ИмяЭлементаАтрибута)) Тогда
			
			ИндексНайденногоЭлементаАтрибута = ЭлементыАтрибута.Найти(ЭлементАтрибута);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УдалитьЭлементАтрибута Тогда
		Если ИндексНайденногоЭлементаАтрибута <> Неопределено Тогда
			Если ЭлементыАтрибута.Количество() = 1 Тогда
				// В атрибуте только один элемент - удалить весь атрибут
				ЭлементHTML.removeAttribute(Атрибут);
			Иначе
				ЭлементыАтрибута.Удалить(ИндексНайденногоЭлементаАтрибута);
				ЭлементHTML.setAttribute(Атрибут, СтрСоединить(ЭлементыАтрибута, ";"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ИндексНайденногоЭлементаАтрибута = Неопределено Тогда
			ЭлементыАтрибута.Добавить(НовыйЭлементАтрибута);
		Иначе
			ЭлементыАтрибута[ИндексНайденногоЭлементаАтрибута] = НовыйЭлементАтрибута;
		КонецЕсли;
		ЭлементHTML.setAttribute(Атрибут, СтрСоединить(ЭлементыАтрибута, ";"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиСтилиВЭлементКартинки(ЭлементИсточникСтиля, ЭлементКартинки)
	
	ПереносимыеСтилиСтрокой = ЭлементИсточникСтиля.ПолучитьАтрибут("data-bit-custom-style");
	Если Не ЗначениеЗаполнено(ПереносимыеСтилиСтрокой) Тогда
		Возврат;
	КонецЕсли;
	
	СтилиЭлемента = ЭлементИсточникСтиля.ПолучитьАтрибут("style");
	Если Не ЗначениеЗаполнено(СтилиЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЭлементовСтиля = Новый Соответствие;
	Для Каждого ЭлементСтиля Из СтрРазделить(СтилиЭлемента, ";", Ложь) Цикл
		ИмяЗначениеЭлементаСтиля = СтрРазделить(ЭлементСтиля, ":");
		ЗначениеЭлементаСтиля = Неопределено;
		Если ИмяЗначениеЭлементаСтиля.Количество() > 1 Тогда
			ЗначениеЭлементаСтиля = СокрЛП(ИмяЗначениеЭлементаСтиля[1]);
		КонецЕсли;
		ЗначенияЭлементовСтиля.Вставить(СокрЛП(НРег(ИмяЗначениеЭлементаСтиля[0])), ЗначениеЭлементаСтиля);
	КонецЦикла;
	
	ПеренесенныеСтили = Новый Массив;
	Для Каждого ИмяПереносимогоСтиля Из СтрРазделить(ПереносимыеСтилиСтрокой, ";", Ложь) Цикл
		ЗначениеСтиля = ЗначенияЭлементовСтиля.Получить(СокрЛП(НРег(ИмяПереносимогоСтиля)));
		Если ЗначениеСтиля <> Неопределено Тогда
			ПеренесенныеСтили.Добавить(Новый Структура("ИмяСтиля, Значение", СокрЛП(ИмяПереносимогоСтиля), СокрЛП(ЗначениеСтиля)));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПеренесенныйСтиль Из ПеренесенныеСтили Цикл
		ИзменитьЭлементСтиля(ЭлементКартинки, ПеренесенныйСтиль.ИмяСтиля, ПеренесенныйСтиль.Значение);
	КонецЦикла;
	
	ЭлементКартинки.УстановитьАтрибут("data-bit-custom-style", ПереносимыеСтилиСтрокой);
	
КонецПроцедуры

Функция ПолучитьЭлементДобавляемогоИзображения(Контейнер) Экспорт
	
	Если НРег(Контейнер.lastChild.tagName) = "div" Тогда
		// Добавляемое изображение может редактироваться => элемент завернут в div
		Возврат Контейнер.lastChild.lastChild;
	Иначе
		Возврат Контейнер.lastChild;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСПараметрами

// Находит элемент с заполненным IDВыше по иерархии
//
// Параметры:
//  Элемент	 - ВнешнийОбъект - элекмент документа html.
// 
// Возвращаемое значение:
//   ВнешнийОбъект.
//
Функция НайтиЭлементСЗаполненнымIDВышеПоИерархии(Элемент) Экспорт 
	
	Если Элемент = NULL Тогда
		Возврат Неопределено ;
	ИначеЕсли ЗначениеЗаполнено(Элемент.id) Тогда
		Возврат Элемент;
	ИначеЕсли Элемент.parentElement = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайтиЭлементСЗаполненнымIDВышеПоИерархии(Элемент.parentElement);
	КонецЕсли;
	
КонецФункции

// Обновляет значения таблицы параметров
//
// Параметры:
//  ТаблицаПараметров				 - ТаблицаЗначений - таблица параметров приема.
//  ЗначенияЗаполения				 - ТаблицаЗначений - значения для заполнения в таблице параметров.
//  ИдентификаторСтрокиШаблона		 - Число - идентификатор строки шаблона в документе.
//  ДополнительныйОтборПараметров	 - Структура - отбор для исключения строк таблицы параметров из заполнения.
//
Процедура ОбновитьЗначенияТаблицыПараметров(ТаблицаПараметров, ЗначенияЗаполения, ИдентификаторСтрокиШаблона = Неопределено, ДополнительныйОтборПараметров = Неопределено) Экспорт
	
	Перем СтурктураОтбора;
	
	Если ЗначенияЗаполения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МодифицированныеСтрокиШаблонов = Новый Массив;
	Если ИдентификаторСтрокиШаблона <> Неопределено Тогда
		МодифицированныеСтрокиШаблонов.Добавить(ИдентификаторСтрокиШаблона);
	КонецЕсли;
	
	// Дополнительно убираем неактуальные строки для заполнения.
	Если ТипЗнч(ДополнительныйОтборПараметров) = Тип("Структура") Тогда
		СтурктураОтбора = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныйОтборПараметров);
	КонецЕсли;
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		
		Если ИдентификаторСтрокиШаблона = Неопределено
			Или ИдентификаторСтрокиШаблона = СтрокаПараметра.ИдентификаторСтрокиШаблона
		Тогда
			// Дополнительный отбор к строкам параметров.
			Если СтурктураОтбора <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтурктураОтбора, ДополнительныйОтборПараметров);
				ЗаполнитьЗначенияСвойств(СтурктураОтбора, СтрокаПараметра);
				ОтборПровален = Ложь;
				Для Каждого КлючЗначение Из ДополнительныйОтборПараметров Цикл
					Если СтурктураОтбора[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
						ОтборПровален = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОтборПровален Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			// Поиск значения для текущего параметра.
			Для Каждого СтрокаЗначенияПоУмолчанию Из ЗначенияЗаполения Цикл
				Если СтрокаЗначенияПоУмолчанию.Параметр = СтрокаПараметра.Параметр
					И (Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗначенияПоУмолчанию, "ИдентификаторСтрокиШаблона")
						Или СтрокаЗначенияПоУмолчанию.ИдентификаторСтрокиШаблона = СтрокаПараметра.ИдентификаторСтрокиШаблона)
				Тогда
					Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗначенияПоУмолчанию, "НомерСтрокиТаблицы")
						Или СтрокаЗначенияПоУмолчанию.НомерСтрокиТаблицы = СтрокаПараметра.НомерСтрокиТаблицы
					Тогда
						// Присвоение значения параметра.
						СтрокаПараметра.Значение = СтрокаЗначенияПоУмолчанию.Значение;
						СтрокаПараметра.Представление = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(СтрокаЗначенияПоУмолчанию, "Представление");
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗначенияДанныхТаблиц(ПараметрыТаблицШаблонов, ШаблоныПриема, ЗначенияТаблиц) Экспорт
	
	Для Каждого СтрокаШаблона Из ШаблоныПриема Цикл
		
		ИдентификаторСтрокиШаблона = СтрокаШаблона.ПолучитьИдентификатор();
		ТаблицыШаблона = ЗначенияТаблиц.Получить(СтрокаШаблона.ШаблонПриема);
		
		Если ТаблицыШаблона = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЗначенийПараметровТаблицШаблона = Новый Массив;
		
		Для Каждого ПараметрыТаблицы Из ТаблицыШаблона Цикл
			
			ИдентификаторТаблицы = ПараметрыТаблицы.Ключ;
			
			Если ПараметрыТаблицШаблонов.НайтиСтроки(Новый Структура("ИдентификаторТаблицы, ИдентификаторСтрокиШаблона", ИдентификаторТаблицы, ИдентификаторСтрокиШаблона)).Количество() > 0 Тогда
				УдалитьЗначенияПараметровТаблицы(ПараметрыТаблицШаблонов, ИдентификаторТаблицы, ИдентификаторСтрокиШаблона, СтрокаШаблона.ТекстШаблона);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиЗначенийПараметровТаблицШаблона, ПараметрыТаблицы.Значение, Истина);
		КонецЦикла;
		
		Для Каждого СтрокиЗначенияПараметровТаблицШаблона Из СтрокиЗначенийПараметровТаблицШаблона Цикл
			НоваяСтрока = ПараметрыТаблицШаблонов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиЗначенияПараметровТаблицШаблона);
			НоваяСтрока.ИдентификаторСтрокиШаблона = ИдентификаторСтрокиШаблона;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗначенияПараметровТаблицы(ПараметрыТаблицШаблонов, ИдентификаторТаблицы, ИдентификаторСтрокиШаблона, ТекстШаблона)
	
	ИдентификаторыТаблицКУдалению = Новый Массив;
	ИдентификаторыТаблицКУдалению.Добавить(ИдентификаторТаблицы);
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблона);
	ЭлементыТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ИдентификаторТаблицы, , "data-bit-dyntable-id");
	
	Если ЭлементыТаблицы.Количество() > 0 Тогда
		ВложенныеТаблицы = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ЭлементыТаблицы[0],,"table","data-bit-dyntable-id");
		Для Каждого ВложеннаяТаблица Из ВложенныеТаблицы Цикл
			ИдентификаторыТаблицКУдалению.Добавить(ВложеннаяТаблица.ПолучитьАтрибут("data-bit-dyntable-id"));
		КонецЦикла;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого ИдентификаторТаблицыКУдалению Из ИдентификаторыТаблицКУдалению Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторТаблицы, ИдентификаторСтрокиШаблона", ИдентификаторТаблицыКУдалению, ИдентификаторСтрокиШаблона);
		Для Каждого СтрокаПараметраТаблицы Из ПараметрыТаблицШаблонов.НайтиСтроки(СтруктураПоиска) Цикл
			ПараметрыТаблицШаблонов.Удалить(СтрокаПараметраТаблицы);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает форматную строку по умолчанию для типа параметра медицинского документа.
//
// Параметры:
//  ТипПараметра - Тип - Тип значения параметра.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьФорматнуюСтрокуПоТипу(ТипПараметра) Экспорт
	
	ФорматнаяСтрока = "";
	Если ТипПараметра.СодержитТип(Тип("Дата")) Тогда
		Если ТипПараметра.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
			ФорматнаяСтрока = "ДЛФ=D";
		ИначеЕсли ТипПараметра.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			ФорматнаяСтрока = "ДЛФ=T";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
	
КонецФункции

// Функция - Получить представление параметра
//
// Параметры:
//  СтрокаПараметра	 - СтрокаТаблицыЗначений - строка с данными параметра.
//  ФорматнаяСтрока	 - Строка - форматная строка.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьПредставлениеПараметра(СтрокаПараметра, Знач ФорматнаяСтрока = Неопределено) Экспорт
	
	Если ФорматнаяСтрока = Неопределено Тогда
		Попытка
			ФорматнаяСтрока = СтрокаПараметра.ФорматнаяСтрока;
		Исключение
			ФорматнаяСтрока = "";
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаПараметра.Значение) = Тип("СправочникСсылка.Диагнозы") Тогда
		Возврат ПолучитьПредставлениеДиагноза(СтрокаПараметра.Значение, ФорматнаяСтрока);
	ИначеЕсли ТипЗнч(СтрокаПараметра.Значение) = Тип("СправочникСсылка.КлассификаторыМинЗдрава")
		Или ТипЗнч(СтрокаПараметра.Значение) = Тип("СправочникСсылка.МедицинскоеОборудование")
	Тогда
		НаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПараметра.Значение, "НаименованиеПолное");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Возврат НаименованиеПолное;
		Иначе
			Возврат СтрокаПараметра.Значение;
		КонецЕсли;
	Иначе
		Возврат Формат(СтрокаПараметра.Значение, ФорматнаяСтрока);
	КонецЕсли;
	
КонецФункции

// Преобразует значение во внутреннюю строку
//
// Параметры:
//  Значение			 - Произвольный	 - значение.
//  кешЗначенийВыбора	 - Соответствие	 - сохраненные ранее преобразованные значения.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПреобразоватьЗначениеВСтрокуВнутр(Значение, кешЗначенийВыбора = Неопределено) Экспорт
	
	#Если Клиент Тогда
		ЗначениеСтрокой = Неопределено;
		Если КешЗначенийВыбора <> Неопределено Тогда
			ЗначениеСтрокой = КешЗначенийВыбора.Получить(Значение);
		КонецЕсли;
		Если ЗначениеСтрокой = Неопределено Тогда
			Возврат РаботаСШаблонамиHTML.ПреобразоватьЗначениеВСтрокуВнутр(Значение);
		Иначе
			Возврат ЗначениеСтрокой;
		КонецЕсли;
	#Иначе 
		Возврат РаботаСШаблонамиHTML.ПреобразоватьЗначениеВСтрокуВнутр(Значение);
	#КонецЕсли
	
КонецФункции

// Восстанавливает значение из внутренней строки.
//
// Параметры:
//  ЗначениеСтрокой		 - Строка - внутренняя строка с значением параметра.
//  кешЗначенийВыбора	 - Соответствие	 - сохраненные ранее преобразованные значения.
// 
// Возвращаемое значение:
//   Произвольный
//
Функция ПреобразоватьЗначениеИзСтрокиВнутр(ЗначениеСтрокой, кешЗначенийВыбора = Неопределено) Экспорт
	
	#Если Клиент Тогда
		Значение = Неопределено;
		Если КешЗначенийВыбора <> Неопределено Тогда
			Значение = КешЗначенийВыбора.Получить(ЗначениеСтрокой);
		КонецЕсли;
		Если Значение = Неопределено Тогда
			Возврат РаботаСШаблонамиHTML.ПреобразоватьЗначениеИзСтрокиВнутр(ЗначениеСтрокой);
		Иначе
			Возврат Значение;
		КонецЕсли;
	#Иначе 
		Возврат РаботаСШаблонамиHTML.ПреобразоватьЗначениеИзСтрокиВнутр(ЗначениеСтрокой);
	#КонецЕсли
	
КонецФункции

Процедура ЗаполнитьЗначенияПараметровИзСтрокиВнутр(ОбновленныеЗначенияПараметров, ЗначенияДляПолученияИзСтрокиВнутр)
	
	ЗначенияВнутр = Новый Массив;
	Для Каждого КлючЗначения Из ЗначенияДляПолученияИзСтрокиВнутр Цикл
		ЗначенияВнутр.Добавить(КлючЗначения.Значение.ЗначениеПараметраСтрокойВнутр);
	КонецЦикла;
	
	ЗначенияПараметров = РаботаСШаблонамиHTML.ПреобразоватьЗначенияИзСтрокиВнутр(ЗначенияВнутр);
	
	Для Каждого КлючЗначения Из ЗначенияДляПолученияИзСтрокиВнутр Цикл
		Для Каждого СтруктураПараметра Из ОбновленныеЗначенияПараметров Цикл
			Если СтруктураПараметра.Значение = КлючЗначения.Ключ Тогда
				СтруктураПараметра.Значение = ЗначенияПараметров[ЗначенияВнутр.Найти(КлючЗначения.Значение.ЗначениеПараметраСтрокойВнутр)];
				СтруктураПараметра.Представление = ПолучитьПредставлениеПараметра(СтруктураПараметра, КлючЗначения.Значение.ФорматнаяСтрока);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредставлениеДиагноза(Диагноз, ФорматнаяСтрока)
	
	Представление = "";
	
	Если ЗначениеЗаполнено(Диагноз) Тогда
		РеквизитыДиагноза = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Диагноз, "КодДиагноза, НаименованиеПолное, Наименование");
		Наименование = ?(ЗначениеЗаполнено(РеквизитыДиагноза.НаименованиеПолное), РеквизитыДиагноза.НаименованиеПолное, РеквизитыДиагноза.Наименование);
		
		Если ПустаяСтрока(ФорматнаяСтрока) Тогда
			Представление = Наименование;
		Иначе
			Представление = ФорматнаяСтрока;
			Представление = СтрЗаменить(Представление, "Код", РеквизитыДиагноза.КодДиагноза);
			Представление = СтрЗаменить(Представление, "Наименование", Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ЗаполнитьПолеСЭМД(Таблица, Строка) Экспорт
	СтрокиПараметра = Таблица.НайтиСтроки(Новый Структура("Параметр", Строка.Параметр));
	Для Каждого СтрокаПараметра Из СтрокиПараметра Цикл
		ЗаполнитьЗначенияСвойств(СтрокаПараметра, Строка, "ПолеСЭМД,Заполнять");
	КонецЦикла;
КонецПроцедуры

Функция ЭтоУзелПараметра(Узел) Экспорт
	
	Если РаботаСHTMLКлиентСервер.ЭтоДокументDOM(Узел) Тогда
		ИдентификаторУзла = Узел.Идентификатор;
		ИмяУзла = Узел.ИмяУзла;
	Иначе
		ИдентификаторУзла = Узел.id;
		ИмяУзла = Узел.nodeName;
	КонецЕсли;
	
	// Теги элементов, которые могут содержать атрибут 'id', не являющихся параметрами
	ИсключаемыеТеги = Новый Массив;
	ИсключаемыеТеги.Добавить("IMG");
	ИсключаемыеТеги.Добавить("TT");
	
	Возврат ЗначениеЗаполнено(ИдентификаторУзла) И ИсключаемыеТеги.Найти(ВРег(ИмяУзла)) = Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСОбластямиПечати

Процедура ДобавитьОбластьПечати(ДокументHTML, Выделение, КлиентскаяЧасть) Экспорт
	
	Диапазон = ПолучитьГраницыДиапазона(Выделение);
	
	Если Диапазон = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверить наличие data-bit-clientpart внутри sel
	Для Каждого Элемент Из ДокументHTML.querySelectorAll("[data-bit-clientpart]") Цикл
		ЭлементКлиентскаяЧасть = Элемент.getAttribute("data-bit-clientpart") = "true";
		ЭлементыHTML = Новый Массив;
		ЭлементыHTML.Добавить(Элемент);
		
		Если Элемент.contains(Диапазон.Начало) И Элемент.contains(Диапазон.Конец) Тогда
			// Выделение внутри элемента
			Если ЭлементКлиентскаяЧасть = КлиентскаяЧасть Тогда
				УстановитьТекущийЭлементРедактораHTML(ДокументHTML, Элемент);
				Возврат;
			Иначе
				УдалитьОбластьПечати(ДокументHTML, Выделение, Диапазон, ЭлементыHTML);
				ОформитьОбластьПечатиПриема(ДокументHTML, Диапазон.range, Диапазон.Начало, Диапазон.Конец, Ложь, Истина, КлиентскаяЧасть, Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЭлементКлиентскаяЧасть = КлиентскаяЧасть И Выделение.containsNode(Элемент, Истина) Тогда
			УдалитьОбластьПечати(ДокументHTML, Выделение, Диапазон, ЭлементыHTML);
		Иначе
			Если Выделение.containsNode(Элемент, Ложь)
				Или (Элемент.firstChild = Элемент.lastChild И Выделение.containsNode(РаботаСHTMLКлиентСервер.ПолучитьСамыйГлубокийЭлемент(Элемент), Ложь)) // У элемента единственный потомок, входящий в выделение
			Тогда
				// Элемент целиком находится в выделении
				Если Элемент.firstChild = Диапазон.range.startContainer Тогда
					Диапазон.Начало = ?(Элемент.firstChild.tagName = "TD", Элемент.firstChild.parentNode, Элемент.firstChild);
				ИначеЕсли Элемент.firstChild = Диапазон.range.endContainer Тогда
					Диапазон.Конец = ?(Элемент.firstChild.tagName = "TD", Элемент.firstChild.parentNode, Элемент.firstChild);
				КонецЕсли;
				ВырезатьОбластьПечати(Элемент);
			ИначеЕсли Выделение.containsNode(Элемент, Истина) Тогда
				// Элемент частично находится в выделении
				Если Выделение.containsNode(Элемент.firstChild, Ложь) Тогда
					// Первая часть элемента находится в выделении
					Диапазон.Конец = ?(Элемент.lastChild.tagName = "TD", Элемент.lastChild.parentNode, Элемент.lastChild);
				ИначеЕсли Выделение.containsNode(Элемент.lastChild, Ложь) Тогда
					// Вторая часть элемента находится в выделении
					Диапазон.Начало = ?(Элемент.firstChild.tagName = "TD", Элемент.firstChild.parentNode, Элемент.firstChild);
				КонецЕсли;
				ВырезатьОбластьПечати(Элемент);
			КонецЕсли;
		КонецЕсли;
		Диапазон.range.setStartBefore(Диапазон.Начало);
		Диапазон.range.setEndAfter(Диапазон.Конец);
		
	КонецЦикла;
	
	ОформитьОбластьПечатиПриема(ДокументHTML, Диапазон.range, Диапазон.Начало, Диапазон.Конец, Ложь, Истина, КлиентскаяЧасть, Истина);
	
КонецПроцедуры

Процедура ВырезатьОбластьПечати(ЭлементHTLM) Экспорт
	
	Если ЭлементHTLM.tagName = "TR" Тогда
		ЭлементHTLM.removeAttribute("style");
		ЭлементHTLM.removeAttribute("data-bit-clientpart");
	Иначе
		ВырезатьБлокЭлементаССохранениемСодержимого(ЭлементHTLM);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОбластьПечати(ДокументHTML, Выделение, Диапазон = Неопределено, ЭлементыHTML = Неопределено) Экспорт
	
	Если Диапазон = Неопределено Тогда
		Диапазон = ПолучитьГраницыДиапазона(Выделение);
		Если Диапазон = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыHTML = Неопределено Тогда
		ЭлементыHTML = ДокументHTML.querySelectorAll("[data-bit-clientpart]");
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыHTML Цикл
		
		// Элемент целиком находится в выделении
		Если Выделение.containsNode(Элемент, Ложь)
			Или (Элемент.firstChild = Элемент.lastChild
				И (Выделение.containsNode(РаботаСHTMLКлиентСервер.ПолучитьСамыйГлубокийЭлемент(Элемент), Истина)	// У элемента единственный потомок, входящий в выделение
				Или Элемент.firstChild.nodeName = "TABLE" И Элемент.firstChild = Выделение.baseNode.firstChild))	// Элемент соответствует выделенной таблице
		Тогда
			Если Элемент.tagName = "TR" Тогда
				Элемент.removeAttribute("style");
				Элемент.removeAttribute("data-bit-clientpart");
			Иначе
				ВырезатьОбластьПечати(Элемент);
			КонецЕсли;
		ИначеЕсли Выделение.containsNode(Элемент, Истина) Тогда
			
			Если Элемент.tagName = "TR" Тогда
				Элемент.removeAttribute("style");
				Элемент.removeAttribute("data-bit-clientpart");
			Иначе
					
				НачалоДиапазонаЭлемента = Элемент.firstChild;
				КонецДиапазонаЭлемента = РаботаСHTMLКлиентСервер.ПолучитьСамыйГлубокийЭлемент(Элемент.lastChild,,Истина);
				
				Пока ВРег(КонецДиапазонаЭлемента.nodeName) <> "DIV" Цикл
					КонецДиапазонаЭлемента = КонецДиапазонаЭлемента.parentNode;
				КонецЦикла;
				
				ДобавитьДоВыделения		= Не Выделение.containsNode(НачалоДиапазонаЭлемента, Ложь);
				ДобавитьПослеВыделения	= Не Выделение.containsNode(КонецДиапазонаЭлемента, Ложь);
				
				ВырезатьОбластьПечати(Элемент);
				
				Если ДобавитьДоВыделения Тогда
					ОформитьОбластьПечатиПриема(ДокументHTML, Диапазон.range, НачалоДиапазонаЭлемента, Диапазон.Начало, Ложь, Ложь, Элемент.getAttribute("data-bit-clientpart") = "true");
				КонецЕсли;
				
				Если ДобавитьПослеВыделения Тогда
					ОформитьОбластьПечатиПриема(ДокументHTML, Диапазон.range, Диапазон.Конец, КонецДиапазонаЭлемента, , , Элемент.getAttribute("data-bit-clientpart") = "true");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьТекущийЭлементРедактораHTML(ДокументHTML, , Диапазон.ГраницыПервоначальногоВыделения);
	
КонецПроцедуры

Процедура ОформитьОбластьПечатиПриема(Документ, range, Начало, Конец, НачалоПосле = Истина, КонецПосле = Истина, КлиентскаяЧасть = Истина, УстановитьТекущийЭлемент = Ложь)
	
	ЗначениеАтрибута = ?(КлиентскаяЧасть, "true", "false");
	ОписаниеСтиля = ПолучитьОписаниеСтиля(КлиентскаяЧасть, ВРег(Начало.nodeName) = "TR");
	
	Если НачалоПосле Тогда
		range.setStartAfter(Начало);
	Иначе
		range.setStartBefore(Начало);
	КонецЕсли;
	
	Если КонецПосле Тогда
		range.setEndAfter(Конец);
	Иначе
		range.setEndBefore(Конец);
	КонецЕсли;
	
	Если ВРег(Начало.nodeName) = "TR" Тогда
		// Строки таблицы
		Для Каждого СтрокаТаблицы Из range.commonAncestorContainer.childNodes Цикл
			Если СтрокаТаблицы.rowindex >= Начало.rowindex
				И СтрокаТаблицы.rowindex <= Конец.rowindex
			Тогда
				СтрокаТаблицы.setAttribute("style",ОписаниеСтиля);
				СтрокаТаблицы.setAttribute("data-bit-clientpart",ЗначениеАтрибута);
			КонецЕсли;
		КонецЦикла;
	Иначе
		fragm = range.extractContents();
		Если fragm.childNodes.length > 0 Тогда
			Перенести = Ложь;
			Для Каждого Потомок Из fragm.childNodes Цикл
				Если ЗначениеЗаполнено(Потомок.innerText) Или ВРег(Потомок.nodeName) = "TABLE" Тогда
					Перенести = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Перенести Тогда
				newNode = Документ.createElement("div");
				newNode.setAttribute("style",ОписаниеСтиля);
				newNode.setAttribute("data-bit-clientpart",ЗначениеАтрибута);
				newNode.appendChild(fragm);
				range.insertNode(newNode);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если УстановитьТекущийЭлемент И newNode <> Неопределено Тогда
		УстановитьТекущийЭлементРедактораHTML(Документ, newNode);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущийЭлементРедактораHTML(ДокументHTML, ЭлементHTML = Неопределено, ГраницыПервоначальногоВыделения = Неопределено) Экспорт
	
	sel = ДокументHTML.getSelection();
	sel.removeAllRanges();
	range = ДокументHTML.createRange();
	Если ГраницыПервоначальногоВыделения = Неопределено Тогда
		range.selectNode(ЭлементHTML);
	Иначе
		range.setStartBefore(ГраницыПервоначальногоВыделения.Начало);
		range.setEndAfter(ГраницыПервоначальногоВыделения.Конец);
	КонецЕсли;	
	sel.addRange(range);
	
КонецПроцедуры

Функция ПолучитьГраницыДиапазона(Выделение)
	
	range = Выделение.getRangeAt(0);
	Если range <> Неопределено Тогда
		НачалоДиапазона = ПолучитьЭлементВыделения(range.startContainer);
		КонецДиапазона = ПолучитьЭлементВыделения(range.endContainer);
		
		Если НачалоДиапазона.tagName = "TR" И КонецДиапазона.tagName <> "TR" Тогда
			НачалоДиапазона = ПолучитьЭлементВыделения(НачалоДиапазона.parentElement);
		ИначеЕсли НачалоДиапазона.tagName <> "TR" И КонецДиапазона.tagName = "TR" Тогда
			КонецДиапазона = ПолучитьЭлементВыделения(КонецДиапазона.parentElement);
		ИначеЕсли НачалоДиапазона.tagName = "TR" И КонецДиапазона.tagName = "TR" И НачалоДиапазона.parentElement <> КонецДиапазона.parentElement Тогда
			// Строки разных таблиц
			НачалоДиапазона = ПолучитьЭлементВыделения(НачалоДиапазона.parentElement);
			КонецДиапазона = ПолучитьЭлементВыделения(КонецДиапазона.parentElement);
		КонецЕсли;
		
		Выделение.removeAllRanges();
		
		range.setStartBefore(НачалоДиапазона);
		range.setEndAfter(КонецДиапазона);
		Выделение.addRange(range);
		Выделение.setBaseAndExtent(НачалоДиапазона, 0, КонецДиапазона, 0);
		
		Возврат Новый Структура("Начало, Конец, range, ГраницыПервоначальногоВыделения", НачалоДиапазона, КонецДиапазона, range, Новый Структура("Начало, Конец", НачалоДиапазона, КонецДиапазона));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе ничего не выделено'"));
	
КонецФункции

Функция ПолучитьЭлементВыделения(ИсходныйЭлемент)
	
	Элемент = ИсходныйЭлемент;
	ЭлементБлок = Неопределено;
	
	Теги = ПолучитьТегиЭлементовВыделения();
	
	ИмяТега = ВРег(Элемент.TagName);
	Пока ИмяТега <> "BODY" Цикл
		// Либо таблицу, либо первый тег из массива
		Если ИмяТега = "TR" Тогда
			ЭлементСтрока = Элемент;
			Прервать;
		ИначеЕсли ИмяТега = "TABLE" Тогда
			ЭлементТаблица = Элемент;
			Прервать;
		Иначе
			Если Теги.Найти(ИмяТега) <> Неопределено И ЭлементБлок = Неопределено Тогда
				ЭлементБлок = Элемент;
			КонецЕсли;
			Элемент = Элемент.parentElement;
			ИмяТега = ВРег(Элемент.TagName);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементСтрока <> Неопределено Тогда
		Возврат ЭлементСтрока;
	ИначеЕсли ЭлементТаблица <> Неопределено Тогда
		Возврат ЭлементТаблица;
	ИначеЕсли ЭлементБлок <> Неопределено Тогда
		Возврат ЭлементБлок;
	Иначе
		Возврат ИсходныйЭлемент;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТегиЭлементовВыделения()
	
	Теги = Новый Массив;
	Теги.Добавить("DIV");
	Теги.Добавить("P");
	Теги.Добавить("UL");
	Теги.Добавить("OL");
	Возврат Теги;
	
КонецФункции

Функция ПолучитьОписаниеСтиля(КлиентскаяЧасть, ЭтоСтрока)	
	
	Красный = ?(ЭтоСтрока, "RGB(255, 225, 240)", "RGB(255, 0, 0)");
	Синий = ?(ЭтоСтрока, "RGB(200, 255, 255)", "RGB(0, 100, 110)");
	ЭлементСтиля = ?(ЭтоСтрока, "background: ", "border: 2px dashed ");
	Возврат ?(КлиентскаяЧасть, ЭлементСтиля+Красный, ЭлементСтиля+Синий);
	
КонецФункции

#КонецОбласти

#Область ЭЦП

Функция ДобавитьКолонтитулЭЦПВТекстТела(ТекстШаблонаОсмотра, КолонтитулыШаблона, ВернутьТекстТела = Ложь) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстШаблонаОсмотра);
	
	УдалитьЭлементЭЦПИзДокументаHTML(ДокументHTML);
	
	ДобавитьКолонтитулЭЦП(ДокументHTML, КолонтитулыШаблона);
	
	Если ВернутьТекстТела Тогда
		Возврат РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML);
	Иначе
		Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	КонецЕсли;
		
КонецФункции

Процедура ДобавитьКолонтитулЭЦП(HTMLДокумент, Колонтитулы) Экспорт
	
	ЭтоДокументDOM = РаботаСHTMLКлиентСервер.ЭтоДокументDOM(HTMLДокумент);
	
	Если Не ЭтоДокументDOM Тогда 
		ДокBody = HTMLДокумент.body;
		Если HTMLДокумент = Неопределено Или ДокBody = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДокBody = HTMLДокумент.Тело;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Колонтитулы.ВерхнийКолонтитул) Тогда
		ДокЗаголовок = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(HTMLДокумент, "HEADER");
		КоличествоЭлементов = ?(ЭтоДокументDOM, ДокЗаголовок.Количество(), ДокЗаголовок.length);
		Если КоличествоЭлементов > 0 Тогда
			Если ЭтоДокументDOM Тогда
				ДокЗаголовок = ДокЗаголовок[0];
			Иначе
				ДокЗаголовок = ДокЗаголовок.item(0);
			КонецЕсли;
		Иначе
			НовЗаголовок = HTMLДокумент.createElement("HEADER");
			Если ДокBody.firstChild = Неопределено Тогда
				ДокЗаголовок = ДокBody.appendChild(НовЗаголовок);
			Иначе
				ДокЗаголовок = ДокBody.insertBefore(НовЗаголовок, ДокBody.firstChild);
			КонецЕсли;
		КонецЕсли;
		РаботаСHTMLКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокЗаголовок, Колонтитулы.ВерхнийКолонтитул, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Колонтитулы.НижнийКолонтитул) Тогда
		ДокПодпись = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(HTMLДокумент, "FOOTER");
		КоличествоЭлементов = ?(ЭтоДокументDOM, ДокПодпись.Количество(), ДокПодпись.length);
		Если КоличествоЭлементов > 0 Тогда
			Если ЭтоДокументDOM Тогда
				ДокПодпись = ДокПодпись[0];
			Иначе
				ДокПодпись = ДокПодпись.item(0);
			КонецЕсли;
		Иначе
			НовПодпись = HTMLДокумент.createElement("FOOTER");
			ДокПодпись = ДокBody.appendChild(НовПодпись);
		КонецЕсли;
		
		РаботаСHTMLКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокПодпись, Колонтитулы.НижнийКолонтитул, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьТекстHTMLЭЦП(ТекстHTML, ВернутьТекстТела = Ложь) Экспорт
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	УдалитьЭлементЭЦПИзДокументаHTML(ДокументHTML);
	
	Если ВернутьТекстТела Тогда
		Возврат РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML);
	Иначе
		Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьHTMLТекстЭЦПМедицинскогоДокумента(РасположениеПодписи, ДанныеПодписи) Экспорт
	
	ТекстКолонтитула = "";
	ВысотаПодписи = "50";
	
	Если РасположениеПодписи = ПредопределенноеЗначение("Перечисление.РасположениеПодписи.ПравыйВерхнийУгол") Тогда
		ТекстHTMLРасположения = "position:absolute;right:0";
	ИначеЕсли РасположениеПодписи = ПредопределенноеЗначение("Перечисление.РасположениеПодписи.ПравыйНижнийУгол") Тогда
		ТекстHTMLРасположения = "position:relative;bottom:" + ВысотаПодписи + ";float:right";
	ИначеЕсли РасположениеПодписи = ПредопределенноеЗначение("Перечисление.РасположениеПодписи.ЛевыйВерхнийУгол") Тогда
		ТекстHTMLРасположения = "position:absolute;left:0";
	ИначеЕсли РасположениеПодписи = ПредопределенноеЗначение("Перечисление.РасположениеПодписи.ЛевыйНижнийУгол") Тогда
		ТекстHTMLРасположения = "position:relative;bottom:" + ВысотаПодписи + ";float:left";
	Иначе
		ТекстHTMLРасположения = "";
	КонецЕсли;
	
	СтилиТаблицы = Новый Массив;
	СтилиТаблицы.Добавить(ТекстHTMLРасположения);
	СтилиТаблицы.Добавить("font-size:4pt");
	СтилиТаблицы.Добавить("border-collapse: collapse");
	СтилиТаблицы.Добавить("border: 1px solid #000090");
	СтилиТаблицы.Добавить("color:#000000");
	//СтилиТаблицы.Добавить("transform: rotate(-2deg)");
	
	ШаблонТекстаКолонтитула = 
		"<TABLE data-bit-table-eds='true' style='%1'>
		|	<tbody>
		|		<tr>
		|			<td colspan='2' style='border: 1px solid #000090; text-align:center;'>ДОКУМЕНТ ПОДПИСАН ЭЛЕКТРОННОЙ ПОДПИСЬЮ</td>
		|		</tr>
		|		<tr>
		|			<td style='border: 1px solid #000090'>Сертификат</td>
		|			<td style='border: 1px solid #000090'>%2</td>
		|		</tr>
		|		<tr>
		|			<td style='border: 1px solid #000090'>Владелец</td>
		|			<td style='border: 1px solid #000090'>%3</td>
		|		</tr>
		|		<tr>
		|			<td colspan='2' style='border: 1px solid #000090'>Действителен с %4 по %5. 
		|		Дата подписи: %6</td>
		|		</tr>
		|		<tr>
		|			<td colspan='2' style='border: 1px solid #000090'>%7</td>
		|		</tr>
		|	</tbody>
		|</table>";
	
	ПараметрыТаблицы = ПолучитьПараметрыТаблицыЭЦП();
	
	ТекстСерийногоНомера	= ПолучитьТекстHTMLСтрокЭЦП(ДанныеПодписи.Сертификат,				ПараметрыТаблицы.ДлинаУзкойСтроки);
	ТекстВладельца			= ПолучитьТекстHTMLСтрокЭЦП(ДанныеПодписи.ВладелецСертификата,		ПараметрыТаблицы.ДлинаШирокойСтроки, ПараметрыТаблицы.Разделители);
	ТекстНаименования		= ПолучитьТекстHTMLСтрокЭЦП(ДанныеПодписи.НаименованиеОрганизации,	ПараметрыТаблицы.ДлинаШирокойСтроки, ПараметрыТаблицы.Разделители);
	
	ТекстКолонтитула = СтрШаблон(ШаблонТекстаКолонтитула, СтрСоединить(СтилиТаблицы, ";"), ТекстСерийногоНомера, ТекстВладельца,
		ДанныеПодписи.ДействительностьСертификатаНачало, ДанныеПодписи.ДействительностьСертификатаОкончание, ДанныеПодписи.ДатаПодписи, ТекстНаименования);
		
	Возврат ТекстКолонтитула;
	
КонецФункции

Функция ПолучитьТекстHTMLСтрокЭЦП(Текст, ДлинаСтроки, Разделители = Неопределено)
	
	Строки = ЭЦП_УМЦ_Сервер.ПолучитьМассивСтрокДляТаблицыЭЦП(Текст, ДлинаСтроки, Разделители);
	Возврат СтрСоединить(Строки, "<br>");
	
КонецФункции

Функция ПолучитьПараметрыТаблицыЭЦП()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДлинаУзкойСтроки",	 53);
	Параметры.Вставить("ДлинаШирокойСтроки", 65);
	Параметры.Вставить("Разделители", " " + Символы.НПП + Символы.Таб);
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьЭлементЭЦПИзДокументаHTML(ДокументHTML) Экспорт
	
	ЭлементЭЦП = Неопределено;
	
	ЭлементыЭЦП = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,,"data-bit-table-eds");
	Если ЭлементыЭЦП.Количество() = 0 Тогда
		// По старому
		ЭлементыТаблиц = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "table", Истина);
		Для Каждого ЭлементТаблицы Из ЭлементыТаблиц Цикл
			Если СтрНачинаетсяС(ЭлементТаблицы.ТекстовоеСодержимое, "ДОКУМЕНТ ПОДПИСАН ЭЛЕКТРОННОЙ ПОДПИСЬЮ") Тогда
				ЭлементЭЦП = ЭлементТаблицы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементЭЦП = Неопределено Тогда
			ЭлементыШрифта = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "font", Истина);
			Для Каждого ЭлементШрифта Из ЭлементыШрифта Цикл
				Если СтрНачинаетсяС(ЭлементШрифта.ТекстовоеСодержимое, "Данный документ не подписан ЭЦП") Тогда
					ЭлементЭЦП = ЭлементШрифта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЭлементЭЦП = ЭлементыЭЦП[0];
	КонецЕсли;
	
	Возврат ЭлементЭЦП;
	
КонецФункции

Процедура УдалитьЭлементЭЦПИзДокументаHTML(ДокументHTML) Экспорт
	
	ЭлементЭЦП = ПолучитьЭлементЭЦПИзДокументаHTML(ДокументHTML);
	
	Если ЭлементЭЦП <> Неопределено Тогда
		ЭлементЭЦП.РодительскийУзел.УдалитьДочерний(ЭлементЭЦП);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПреобразоватьHTMLвPDF(Знач HtmlНаПреобразование, ВыполнениеНаLinux, ВернутьПуть, АдресWkhtmltopdfНаКлиенте = Неопределено, РежимPDF_A = Ложь, ОбязателенPDF_A = Ложь) Экспорт
	
	Попытка
		ПутьКФайлуHTML = ПолучитьИмяВременногоФайла("html");
		Если ТипЗнч(HtmlНаПреобразование) = Тип("Строка") Тогда
			Поток = Новый ПотокВПамяти();
			ЗаписьДанных = Новый ЗаписьДанных(Поток);
			ЗаписьДанных.КодировкаТекста = КодировкаТекста.UTF8;
			ЕстьЗапись = Ложь;
			Если ТипЗнч(HtmlНаПреобразование) = Тип("Строка") И ЗначениеЗаполнено(HtmlНаПреобразование) Тогда
				ЗаписьДанных.ЗаписатьСтроку(HtmlНаПреобразование);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			ЗаписьДанных.Закрыть();
			HtmlНаПреобразование = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		КонецЕсли;
		
		HtmlНаПреобразование.Записать(ПутьКФайлуHTML); // Запишем файл для преобразования.
		
		ПутьКФайлуPDF = ПолучитьИмяВременногоФайла("pdf");
		
		ШаблонКоманды = "%1 --encoding utf-8 --disable-smart-shrinking --margin-right 5mm --dpi 600 --enable-local-file-access ""%2"" ""%3""";
		СтрокаКоманды = СтрШаблон(ШаблонКоманды, "wkhtmltopdf", ПутьКФайлуHTML, ПутьКФайлуPDF);
		
		Если Не ВыполнениеНаLinux Тогда
			СтрокаКоманды = СтрШаблон("cmd /c ""%1""", СтрокаКоманды);
		КонецЕсли;
		ЗапуститьПриложение(СтрокаКоманды, , Истина);
		
		ФайлPDF = Новый Файл(ПутьКФайлуPDF);
		Если Не ФайлPDF.Существует() Тогда
			// Переменная wkhtmltopdf не определена в системе или недостаточно прав
			Если АдресWkhtmltopdfНаКлиенте <> Неопределено Тогда
				Адресwkhtmltopdf = АдресWkhtmltopdfНаКлиенте;
			Иначе
				Адресwkhtmltopdf = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("Адресwkhtmltopdf");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Адресwkhtmltopdf) Тогда
				СтрокаКоманды = СтрШаблон(ШаблонКоманды, СтрШаблон("""%1""", Адресwkhtmltopdf), ПутьКФайлуHTML, ПутьКФайлуPDF);
				Если Не ВыполнениеНаLinux Тогда
					СтрокаКоманды = СтрШаблон("cmd /c ""%1""", СтрокаКоманды);
				КонецЕсли;
				ЗапуститьПриложение(СтрокаКоманды, , Истина);
			КонецЕсли;
		КонецЕсли;
		
		ФайлPDF = Новый Файл(ПутьКФайлуPDF);
		Если ФайлPDF.Существует() Тогда // Проверим, что файл создан.
			
			Если РежимPDF_A Тогда
				ПутьКФайлуPDF_A = ПолучитьИмяВременногоФайла("pdf");
				
				ШаблонСтрокиВыполнения = """%1"" -dPDFA -dBATCH -dNOPAUSE -dNOOUTERSAVE -sProcessColorModel=DeviceRGB -sColorConversionStrategy=UseDeviceIndependentColor -sDEVICE=pdfwrite -sOutputFile=""%2"" -dPDFACompatibilityPolicy=1 ""PDFA_def.ps"" ""%3""";
				СтрокаВыполнения_PDF_A = СтрШаблон(ШаблонСтрокиВыполнения, УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ПутьККонвертеруPDFAGhostScript"), ПутьКФайлуPDF_A, ПутьКФайлуPDF);
				Если Не ВыполнениеНаLinux Тогда
					СтрокаВыполнения_PDF_A = СтрШаблон("cmd /c ""%1""", СтрокаВыполнения_PDF_A);
				КонецЕсли;
				ЗапуститьПриложение(СтрокаВыполнения_PDF_A, , Истина);
				
				ФайлPDF_A = Новый Файл(ПутьКФайлуPDF_A);
				Если ФайлPDF_A.Существует() Тогда
					Если ВернутьПуть Тогда
						Возврат ПутьКФайлуPDF_A;
					Иначе
						Возврат Новый ДвоичныеДанные(ПутьКФайлуPDF_A);
					КонецЕсли;
				ИначеЕсли ОбязателенPDF_A Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка работы утилиты GhostScript!'"));
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ВернутьПуть Тогда
				Возврат ПутьКФайлуPDF;
			Иначе
				Возврат Новый ДвоичныеДанные(ПутьКФайлуPDF);
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция УтилитаWkhtmltopdfУстановленаВСистеме(Адресwkhtmltopdf = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Адресwkhtmltopdf)
		И бит_РаботаСФайлами.ФайлСуществует(Адресwkhtmltopdf)
	Тогда
		Возврат Истина;
	Иначе
		ПараметрыЗапуска = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
		ПараметрыЗапуска.ПолучитьПотокВывода = Истина;
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму("wkhtmltopdf --version", ПараметрыЗапуска);
			Возврат СтрНайти(Результат.ПотокВывода, "wkhtmltopdf") > 0;
		Исключение КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначенияПараметров(МассивПараметров, HTMLДокумент, ИдентификаторСтрокиШаблона, ЭтоДокументDOM = Истина, ВерсияДляПечати = Ложь,
	КешЗначенийВыбора = Неопределено, ВерсияДляСЭМД = Ложь, ОбновленныеЗначенияПараметров = Неопределено, ЗначенияДляПолученияИзСтрокиВнутр = Неопределено)
	
	ТегиПараметров = ПолучитьТегиПараметров();
	Для Каждого СтрокаПараметра Из МассивПараметров Цикл
		
		УидПараметра = Строка(СтрокаПараметра.Параметр.УникальныйИдентификатор());
		
		Параметры = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(HTMLДокумент, УидПараметра, ТегиПараметров);
		Для Каждого Параметр Из Параметры Цикл
			Если Параметр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВерсияДляПечати Или СтрокаПараметра.НеРедактируетсяПользователем Тогда
				ТекстВставки = РаботаСHTMLКлиентСервер.СформироватьТекстHTMLСПереносами(СтрокаПараметра.Представление);
				Если Не ВерсияДляПечати Тогда
					ТекстВставки = СтрШаблон("<tt id=""%1"">%2</tt>", УидПараметра, ТекстВставки);
				ИначеЕсли ВерсияДляСЭМД Тогда
					ТекстВставки = СтрШаблон("<content id=""%1"">%2</content>", УидПараметра, ТекстВставки);
				Иначе
					Стиль = Строка(Параметр.ПолучитьАтрибут("style"));
					Если ЗначениеЗаполнено(Стиль) Тогда
						ТекстВставки = СтрШаблон("<span style=""%1"">%2</span>", СтрЗаменить(Стиль, """", "'"), ТекстВставки);
					КонецЕсли;
				КонецЕсли;
				РаботаСHTMLКлиентСервер.ЗаменитьЭлементНаПроизвольныйHTML(Параметр, ТекстВставки);
				Продолжить;
			КонецЕсли;
			
			ТегЭлемента = ВРег(РаботаСHTMLКлиентСервер.ПолучитьСвойствоЭлемента(Параметр, "tagName"));
			Если ТегЭлемента = "INPUT"
				И ВРег(Параметр.Тип) = "CHECKBOX"
			Тогда
				
				Если ТипЗнч(СтрокаПараметра.Значение) = Тип("Булево") Тогда
					Параметр.checked = СтрокаПараметра.Значение;
				КонецЕсли;
				
			ИначеЕсли ТегЭлемента = "SELECT" Тогда
				
				Если ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
					ЗначениеПараметраСтрокойВнутр = ПреобразоватьЗначениеВСтрокуВнутр(СтрокаПараметра.Значение, КешЗначенийВыбора);
				Иначе // Если значение не заполнено, то нужно его заполнить выбранным элементом списка 
					ЗначениеПараметраСтрокойВнутр = РаботаСHTMLКлиентСервер.ПолучитьВыбранноеЗначениеSelect(Параметр);
					
					Если ЗначенияДляПолученияИзСтрокиВнутр <> Неопределено
						И ОбновленныеЗначенияПараметров <> Неопределено
					Тогда
						#Если Клиент Тогда
							ЗначениеПараметра = Новый УникальныйИдентификатор;
							// Запоминаем, чтобы потом преобразовать всё за 1 вызов сервера.
							СтруктураЗначения = Новый Структура;
							СтруктураЗначения.Вставить("ЗначениеПараметраСтрокойВнутр", ЗначениеПараметраСтрокойВнутр);
							СтруктураЗначения.Вставить("ФорматнаяСтрока", СтрокаПараметра.ФорматнаяСтрока);
							ЗначенияДляПолученияИзСтрокиВнутр.Вставить(ЗначениеПараметра, СтруктураЗначения);
						#Иначе
							ЗначениеПараметра = ПреобразоватьЗначениеИзСтрокиВнутр(ЗначениеПараметраСтрокойВнутр, КешЗначенийВыбора);
						#КонецЕсли
						
						СтрокаОбновленногоПараметра = Новый Структура("ИдентификаторСтрокиШаблона, Параметр, Значение", ИдентификаторСтрокиШаблона, СтрокаПараметра.Параметр, ЗначениеПараметра);
						СтрокаОбновленногоПараметра.Вставить("Представление", ПолучитьПредставлениеПараметра(СтрокаОбновленногоПараметра, СтрокаПараметра.ФорматнаяСтрока));
						ОбновленныеЗначенияПараметров.Добавить(СтрокаОбновленногоПараметра);
					КонецЕсли;
				КонецЕсли;
				
				РаботаСHTMLКлиентСервер.УстановитьВыбранноеЗначениеSelect(Параметр, ЗначениеПараметраСтрокойВнутр);
				УстановитьСкриптСобытияИзмененияЭлементаHTML(Параметр, ЭтоДокументDOM, ВерсияДляПечати, Истина);
				
			ИначеЕсли ТегЭлемента = "TEXTAREA" Или ТегЭлемента = "INPUT" Тогда
				
				РаботаСHTMLКлиентСервер.УстановитьЗначениеЭлементуПоляВводаHTML(Параметр, СтрокаПараметра.Представление, ТегЭлемента);
				УстановитьСкриптСобытияИзмененияЭлементаHTML(Параметр, ЭтоДокументDOM, ВерсияДляПечати);
				
			ИначеЕсли ТегЭлемента = "A" Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаПараметра.Представление) Тогда
					РаботаСHTMLКлиентСервер.УстановитьСвойствоЭлемента(Параметр, "innerText", "[...]");
				Иначе
					ТекстВставки = РаботаСHTMLКлиентСервер.СформироватьТекстHTMLСПереносами(СтрокаПараметра.Представление);
					РаботаСHTMLКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(Параметр, ТекстВставки, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция РодительскаяДинамическаяТаблица(ТекущийЭлемент)
	
	Если ТекущийЭлемент = Неопределено
		Или ТекущийЭлемент.РодительскийУзел = Неопределено
		Или ВРег(ТекущийЭлемент.ИмяУзла) = "BODY"
	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РодительскаяТаблица = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ТекущийЭлемент.РодительскийУзел, "table");
	Если РодительскаяТаблица <> Неопределено
		И РодительскаяТаблица.ЕстьАтрибут("data-bit-dyntable-id")
	Тогда
		Возврат РодительскаяТаблица;
	ИначеЕсли РодительскаяТаблица <> Неопределено Тогда
		Возврат РодительскаяДинамическаяТаблица(РодительскаяТаблица.РодительскийУзел);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
