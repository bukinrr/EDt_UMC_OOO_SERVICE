#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение и отправка писем

Функция РезультатАнализаОшибочныхПолучателей(ПисьмоОбъект, ОшибочныеПолучатели) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов",Ложь);
	Результат.Вставить("ВсеАдресатыПисьмаОтвергнутыСервером",Ложь);
	Результат.Вставить("ПредставлениеОшибочныхАдресатов","");
	
	ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов = Ложь;
	ВсеАдресатыПисьмаОтвергнутыСервером           = Ложь;
	
	КоличествоОшибочныхПолучателей = ОшибочныеПолучатели.Количество();
	
	Если КоличествоОшибочныхПолучателей > 0 Тогда
		
		Результат.ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов = Истина;
		
		МассивПолучателейПисьма = Новый Массив;
		Для Каждого СтрокаПолучателя Из ПисьмоОбъект.ПолучателиПисьма Цикл
			Если МассивПолучателейПисьма.Найти(СтрокаПолучателя.Адрес) = Неопределено Тогда
				МассивПолучателейПисьма.Добавить(СтрокаПолучателя.Адрес);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаПолучателя Из ПисьмоОбъект.ПолучателиКопий Цикл
			Если МассивПолучателейПисьма.Найти(СтрокаПолучателя.Адрес) = Неопределено Тогда
				МассивПолучателейПисьма.Добавить(СтрокаПолучателя.Адрес);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаПолучателя Из ПисьмоОбъект.ПолучателиСкрытыхКопий Цикл
			Если МассивПолучателейПисьма.Найти(СтрокаПолучателя.Адрес) = Неопределено Тогда
				МассивПолучателейПисьма.Добавить(СтрокаПолучателя.Адрес);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоПолучателейПисьма = МассивПолучателейПисьма.Количество();
		
		Если КоличествоПолучателейПисьма = КоличествоОшибочныхПолучателей Тогда
			Результат.ВсеАдресатыПисьмаОтвергнутыСервером = Истина;
		КонецЕсли;
		
		ПредставлениеОшибочныхАдресатов = "";
		Для Каждого ОшибочныйАдресат Из ОшибочныеПолучатели Цикл
			Если Не ПустаяСтрока(ПредставлениеОшибочныхАдресатов) Тогда
				ПредставлениеОшибочныхАдресатов = ПредставлениеОшибочныхАдресатов + ", ";
			КонецЕсли;
			ПредставлениеОшибочныхАдресатов = ПредставлениеОшибочныхАдресатов + ОшибочныйАдресат.Ключ;
		КонецЦикла;
		
		Результат.ПредставлениеОшибочныхАдресатов = ПредставлениеОшибочныхАдресатов;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с вложения электронных писем.

// Получает вложения электронного письма.
//
// Параметры:
//  Письмо                         - ДокументСсылка - документ электронное письмо для которого необходимо получить вложения.
//  ФормироватьРазмерПредставление - Булево - признак того, что в результате запроса будет пустая строковая колонка РазмерПредставление.
//  ТолькоСПустымИД                - Булево - если Истина, то будут получены только вложения без ИДФайлаЭлектронногоПисьма.
//
// Возвращаемое значение:
//  ТаблицаЗначений   - таблица значений, содержащая информацию о вложениях.
//
Функция ПолучитьВложенияЭлектронногоПисьма(Письмо,ФормироватьРазмерПредставление = Ложь, ТолькоСПустымИД = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
		ВладелецФайлов       = Письмо;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	//+БИТ
	"ВЫБРАТЬ
	|	Файлы.Ссылка                    КАК Ссылка,
	|	Файлы.Идентификатор				КАК ИмяФайла,
	|	Файлы.Расширение				КАК Расширение
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.Объект = &Письмо
	|	И НЕ Файлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Письмо", ВладелецФайлов);
	
	ТаблицаКВозврату =  Запрос.Выполнить().Выгрузить();
	//-БИТ
	
	Возврат ТаблицаКВозврату;
	
КонецФункции

// Записывает вложение электронного письма, расположенное во временном хранилище в файл.
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
	Письмо,
	АдресВоВременномХранилище,
	ИмяФайла,
	Размер,
	КоличествоПустыхИменВоВложениях = 0) Экспорт
	
	ИмяФайлаДляРазбора = ИмяФайла;
	РасширениеБезТочки = ВзаимодействияКлиентСервер.РасширениеФайла(ИмяФайлаДляРазбора);
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяФайлаБезРасширения =
			НСтр("ru = 'Вложение без имени'") + ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
		КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
		
	Иначе
		ИмяБезРасширения =
			?(РасширениеБезТочки = "",
			ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;
		
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Письмо);
	ПараметрыФайла.Вставить("Автор",                       Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		АдресВоВременномХранилище,
		"");
	
КонецФункции

// Устанавливает или снимает пометку удаления у вложений электронного письма.
//
// Параметры:
//  Письмо          - ДокументСсылка - письмо, для вложений которого будут выполнены действия.
//  ПометкаУдаления - Булево - признак необходимости установить или снять пометку.
//
Процедура УстановитьПометкуУдаленияУВложенийПисьма(Письмо, ПометкаУдаления) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ПометкаУдаления <> &ПометкаУдаления
	|	И Файлы.Объект = &ВладелецФайла
	|");
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ВладелецФайла", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	КонецЦикла;

КонецПроцедуры

// Удаляет вложения электронного письма.
//
// Параметры:
//  Письмо - ДокументСсылка - письмо, вложения которого будут удалены.
//
Процедура УдалитьВложенияУПисьма(Письмо) Экспорт

	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.Объект = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Уведомления о прочтении

// Получает учетную запись электронной почты используемую для отправки по умолчанию.
//
// Возвращаемое значение:
//  Справочник.УчетныеЗаписиЭлектроннойПочты  - учетная запись для отправки по умолчанию.
//
Функция ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Получает и добавляет в список значений доступные пользователю учетные записи электронной почты.
//
// Параметры:
//  СписокВыбора  - СписокЗначений - в него будут добавлены доступные пользователю записи электронной почты.
//
Процедура ПолучитьДоступныеУчетныеЗаписиДляОтправки(СписокВыбора,ТаблицаДанныхУчетнойЗаписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.УчетнаяЗапись,Выборка.АдресЭлектроннойПочты);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	
КонецПроцедуры

// Получает имя объекта метаданных присоединенных файлов электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - письмо для которого определяется имя.
//
// Возвращаемое значение:
//  Строка,Неопределено  - имя объекта метаданных присоединенных файлов электронного письма.
Функция ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо) Экспорт

	Возврат "ХранилищеДополнительнойИнформации";
	
КонецФункции

// Функция - Подготовить прием к отправке по электронной почте
//
// Параметры:
//  ПриемыКОтправке - 	Массив, ДокументСсылка - прием(ы), который преобразуется в HTML 
//  Тема	 - 	Строка - Заголовок письма
//  Текст	 - 	Строка - Тело письма 
//  Клиент	 - 	СправочникСсылка - клиент, которому отправится письмо 
// 
// Возвращаемое значение:
//  Структура - Структура, необходимая для заполнения документа ЭлектронноеПисьмоИсходящее
//
Функция ПолучитьПараметрыОтправкиПриемаПоЭлектроннойПочте(Знач ПриемыКОтправке, Тема, Текст, Клиент, ВложениеHTML = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемыКОтправке) <> Тип("Массив") Тогда
		Прием = ПриемыКОтправке;
		ПриемыКОтправке = Новый Массив;
		ПриемыКОтправке.Добавить(Прием);
	КонецЕсли;
	
	НастройкиПисьма = ПолучитьНастройкиПисьма(Тема, Текст, Клиент);
	
	РазмерПисьма = 0;
	Если ПриемыКОтправке.Количество() > 0 Тогда
		
		ИмяВременногоКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + "medical_examination");
		
		ФайлКаталог = Новый Файл(ИмяВременногоКаталога);
		Если ФайлКаталог.Существует() Тогда
			УдалитьФайлы(ИмяВременногоКаталога);
		КонецЕсли;
		СоздатьКаталог(ИмяВременногоКаталога);
		
		Если ВложениеHTML = Неопределено Тогда
			
			ВложениеHTML = Новый СписокЗначений();
			
			Поток = Новый ПотокВПамяти();
			ЗаписьДанных = Новый ЗаписьДанных(Поток);
			ОтправкаВPDF = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("Использоватьwkhtmltopdf");
			ЗаписьДанных.КодировкаТекста = ?(ОтправкаВPDF, КодировкаТекста.UTF8, КодировкаТекста.Системная);
			ЕстьЗапись = Ложь;
			РазрывСтраницы = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстHTMLРазрывСтраницы(Ложь);
			
			ДанныеШаблонов = ПолучитьДанныеШаблоновДляОтправкиПоЭлектроннойПочте(ПриемыКОтправке, ОтправкаВPDF);
			
			Для Каждого ДанныеОсмотра Из ДанныеШаблонов.ТекстыОсмотров Цикл
				ПечатнаяВерсия = ?(ЕстьЗапись, РазрывСтраницы, "") + ДанныеОсмотра.ТекстОсмотра;
				
				Если ЗначениеЗаполнено(ПечатнаяВерсия) Тогда
					
					ПечатнаяВерсияDOM = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ПечатнаяВерсия);
					СписокКартинок = РаботаСDOMКлиентСервер.ПолучитьЭлементыПоИмени(ПечатнаяВерсияDOM, "IMG", Истина);
					
					мсКартинкиКУдалению = Новый Массив;
					Для Каждого ЭлементКартинка Из СписокКартинок Цикл
						
						ДобавленноеИзображение = ДанныеОсмотра.ДобавленныеИзображения.Получить(ЭлементКартинка.Источник);
						Если ДобавленноеИзображение <> Неопределено Тогда
							ЭлементКартинка.src = СтрШаблон("data:image/%1;base64,%2", ДобавленноеИзображение.Расширение, ДобавленноеИзображение.base64);
							Продолжить;
						КонецЕсли;
						
						Рисунок = ДанныеОсмотра.Рисунки.Получить(ЭлементКартинка.Источник);
						Если Рисунок <> Неопределено Тогда
							ЭлементКартинка.src = "data:image/png;base64," + Рисунок;
							Продолжить;
						КонецЕсли;
						
						Изображение = ДанныеШаблонов.КешИзображений.Получить(ЭлементКартинка.Идентификатор);
						Если Изображение = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ОтправкаВPDF Тогда
							ФайлКартинки = Новый Файл(ИмяВременногоКаталога + Изображение.Идентификатор + Изображение.Расширение);
							Изображение.Картинка.Записать(ФайлКартинки.ПолноеИмя);
							Если ФайлКартинки.Размер() <= 5*1024*1024 Тогда
								ЭлементКартинка.src = "file:///" + СтрЗаменить(ФайлКартинки.ПолноеИмя, "\", "/");
							Иначе
								мсКартинкиКУдалению.Добавить(ЭлементКартинка);
							КонецЕсли;
						Иначе
							Если СтрДлина(Изображение.АдресВХранилище) <= 5*1024*1024 Тогда
								ЭлементКартинка.src = Изображение.АдресВХранилище;
							Иначе
								мсКартинкиКУдалению.Добавить(ЭлементКартинка);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого элКартинка Из мсКартинкиКУдалению Цикл
						Если Не РаботаСHTMLКлиентСервер.ЭлементПустой(элКартинка.ДокументВладелец)
							И Не РаботаСHTMLКлиентСервер.ЭлементПустой(элКартинка.РодительскийУзел)
						Тогда
							элКартинка.РодительскийУзел.УдалитьДочерний(элКартинка);
						КонецЕсли;
					КонецЦикла;
					
					ЗаписьДанных.ЗаписатьСтроку(РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ПечатнаяВерсияDOM));
					
					ЕстьЗапись = Истина;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьДанных.Закрыть();
			Если ЕстьЗапись Тогда // Избегаем пустых приемов
				РазмерПисьма = Поток.Размер()/1024;
				ДвоичныеДанныеHTML = Поток.ЗакрытьИПолучитьДвоичныеДанные();
				Если ОтправкаВPDF Тогда
					ФайлPDF = РаботаСШаблонамиHTML.ПреобразоватьHTMLвPDF(ДвоичныеДанныеHTML, Ложь);
					Если ФайлPDF <> Неопределено Тогда
						ВложениеHTML.Добавить(ФайлPDF, "Медицинская запись.pdf"); // Добавляем двоичные данные файла
					Иначе // вложим html в случае неудачи
						ВложениеHTML.Добавить(ДвоичныеДанныеHTML, "Медицинская запись.html");
						// Сообщим о неудаче формирования файла pdf.
						НастройкиПисьма.СообщениеОбОшибке = НСтр("ru = 'Не удалось применить компоненту ""wkhtmltopdf"". Повторите процесс установки компоненты.'");
					КонецЕсли;
				Иначе
					ВложениеHTML.Добавить(ДвоичныеДанныеHTML, "Медицинская запись.html");
				КонецЕсли;
			КонецЕсли;
			УдалитьФайлы(ИмяВременногоКаталога);
			
		КонецЕсли;
		
		МсФайлы = РаботаСФайлами.ПолучитьВсеФайлы(ПриемыКОтправке, Истина);
		
		Если МсФайлы = Неопределено Тогда
			МсФайлы = Новый Массив;
		КонецЕсли;
		
		// Прикрепим файлы из приёмов, если общий вес письма не будет превышать Лимита
		
		СчФайлов = 0;
		ФайлНеПрикреплен = Ложь;
		
		МахРазмерПисьма = МаксимальныйРазмерПисьмаМедДокумента();
		
		Пока РазмерПисьма <= МахРазмерПисьма И СчФайлов < МсФайлы.Количество() Цикл
			СтруктураДанныхФайла = РаботаСФайлами.ПолучитьФайлНаСервере(МсФайлы[СчФайлов],,Истина);
			РазмерФайла = СтруктураДанныхФайла.ДвоичныеДанные.Размер()/1024;
			Если (РазмерФайла + РазмерПисьма) <= МахРазмерПисьма Тогда
				ВложениеHTML.Добавить(СтруктураДанныхФайла.ДвоичныеДанные, СтруктураДанныхФайла.ИмяФайла);
				РазмерПисьма = РазмерПисьма + РазмерФайла;
			Иначе
				ФайлНеПрикреплен = Истина;
			КонецЕсли;
			СчФайлов = СчФайлов + 1;
		КонецЦикла;
		ФайлНеПрикреплен = ?(СчФайлов = МсФайлы.Количество(), ФайлНеПрикреплен, Истина);
		НастройкиПисьма.Вставить("ФайлНеПрикреплен",ФайлНеПрикреплен);
		
		// Упакуем в архив с паролем = кодом клиента в базе
		Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьПриемыВАрхивеСПаролем") Тогда
			АрхивацияВложений(ВложениеHTML, СокрЛП(Клиент.Код));
		КонецЕсли;
		
		// Добавим вложения
		Если ВложениеHTML.Количество() > 0 Тогда
			НастройкиПисьма.Вставить("Вложения", ВложениеHTML);
		КонецЕсли;
		
		ЭлектроннаяПочтаДляРассылки = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ЭлектроннаяПочтаДляРассылки");
		Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляРассылки) Тогда
			НастройкиПисьма.ЗначенияЗаполнения.Вставить("УчетнаяЗапись", ЭлектроннаяПочтаДляРассылки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиПисьма;
	
КонецФункции

Функция ПолучитьДанныеШаблоновДляОтправкиПоЭлектроннойПочте(ПриемыКОтправке, ОтправкаВPDF) Экспорт
	
	НуженПереводВКВерсиюКлиента = ЗначениеЗаполнено(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимРазметкиКлиентскойОбластиШаблоновПриема"));
	тзШаблоныПечати = РаботаСШаблонамиHTML.ПолучитьДанныеОШаблонахПриема(ПриемыКОтправке, НуженПереводВКВерсиюКлиента);
	
	// Формируем список шаблонов осмотра в приемах
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	Прием.Дата КАК ДатаПриема
		|ПОМЕСТИТЬ ШаблоныПриемов
		|ИЗ
		|	Документ.Прием КАК Прием
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|		ПО (Прием.Ссылка В (&СписокПриемов))
		|			И Прием.Ссылка = ПриемШаблоныПриема.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ВерсииШаблонов.ВерсияШаблона, ШаблоныПриемов.ШаблонПриема) КАК ШаблонПриема
		|ИЗ
		|	ШаблоныПриемов КАК ШаблоныПриемов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыВерсий.ШаблонПриема КАК ШаблонПриема,
		|			ДатыВерсий.ДатаПриема КАК ДатаПриема,
		|			ДатыВерсий.ДатаВерсии КАК ДатаВерсии,
		|			ВерсииШаблоновHTML.Ссылка КАК ВерсияШаблона
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема КАК ДатаПриема,
		|				МАКСИМУМ(ВерсииШаблоновHTML.Дата) КАК ДатаВерсии
		|			ИЗ
		|				ШаблоныПриемов КАК ШаблоныПриемов
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|					ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|						И (ВерсииШаблоновHTML.Дата >= ШаблоныПриемов.ДатаПриема)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ШаблоныПриемов.ШаблонПриема,
		|				ШаблоныПриемов.ДатаПриема) КАК ДатыВерсий
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|				ПО ДатыВерсий.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|					И (ВерсииШаблоновHTML.Дата = ДатыВерсий.ДатаВерсии)) КАК ВерсииШаблонов
		|		ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблонов.ШаблонПриема
		|			И ШаблоныПриемов.ДатаПриема = ВерсииШаблонов.ДатаПриема";
	
	мДанныеШаблонов = Новый Массив;
	мПриемы = Новый Массив;
	КолонтитулыПриемов = Новый Соответствие;
	
	Для Каждого ШаблонПечати Из тзШаблоныПечати Цикл
		КолонтитулыПриема = КолонтитулыПриемов.Получить(ШаблонПечати.Прием);
		Если КолонтитулыПриема = Неопределено Тогда
			КолонтитулыПриема = РаботаСШаблонамиHTML.СформироватьКолонтитулыЭЦПШаблонов(ШаблонПечати.Прием);
			КолонтитулыПриемов.Вставить(ШаблонПечати.Прием, КолонтитулыПриема);
		КонецЕсли;
		
		мПриемы.Добавить(ШаблонПечати.Прием);
		ТекстОсмотраПолный = ШаблонПечати.ТекстОсмотра;
		
		КолонтитулыШаблона = КолонтитулыПриема.Получить(ШаблонПечати.ШаблонПриема);
		Если КолонтитулыШаблона <> Неопределено Тогда
			ТекстОсмотраПолный = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьКолонтитулЭЦПВТекстТела(ШаблонПечати.ТекстОсмотра, КолонтитулыШаблона);
		КонецЕсли;
		мДанныеШаблонов.Добавить(Новый Структура("ТекстОсмотра, Рисунки, ДобавленныеИзображения", ТекстОсмотраПолный, ШаблонПечати.РисункиКартинок, ШаблонПечати.ДобавленныеИзображения));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СписокПриемов", мПриемы);
	МассивШаблонов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШаблонПриема");
	
	Для Каждого Прием Из ПриемыКОтправке Цикл
		НастройкиШаблонов = РаботаСШаблонамиHTMLПовтИсп.ПолучитьНастройкиШаблоновHTML(Прием.Дата, Прием.Филиал);
		
		Если НуженПереводВКВерсиюКлиента Тогда
			Если ЗначениеЗаполнено(НастройкиШаблонов.ШаблонКлиентскогоЗаголовка)
				И МассивШаблонов.Найти(НастройкиШаблонов.ШаблонКлиентскогоЗаголовка) = Неопределено
			Тогда
				МассивШаблонов.Добавить(НастройкиШаблонов.ШаблонКлиентскогоЗаголовка);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НастройкиШаблонов.ШаблонМедицинскогоЗаголовка)
				И МассивШаблонов.Найти(НастройкиШаблонов.ШаблонМедицинскогоЗаголовка) = Неопределено
			Тогда
				МассивШаблонов.Добавить(НастройкиШаблонов.ШаблонМедицинскогоЗаголовка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	соотвКешИзображенийШаблонов = РаботаСШаблонамиHTML.ПолучитьКешИзображенийПриема(МассивШаблонов, Неопределено, Не ОтправкаВPDF);
	
	Если ОтправкаВPDF Тогда
		Для Каждого КлючЗначение Из соотвКешИзображенийШаблонов Цикл
			КлючЗначение.Значение.Вставить("Картинка", Новый Картинка(ПолучитьИзВременногоХранилища(КлючЗначение.Значение.АдресВХранилище)));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ТекстыОсмотров, КешИзображений", мДанныеШаблонов, соотвКешИзображенийШаблонов);
	
КонецФункции

Функция ПолучитьНастройкиПисьма(Тема, Текст, Клиент)
	
	НастройкиПисьма = Новый Структура();
	НастройкиПисьма.Вставить("Тема", Тема);
	НастройкиПисьма.Вставить("Текст", Текст);
	НастройкиПисьма.Вставить("Тело", Текст);
	НастройкиПисьма.Вставить("СообщениеОбОшибке", "");
	НастройкиПисьма.Вставить("ЗначенияЗаполнения", Новый Структура);
	
	ЭлектроннаяПочтаКлиента = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	НастройкиПисьма.Вставить("Получатель", ЭлектроннаяПочтаКлиента);
	НастройкиПисьма.Вставить("Кому", ЭлектроннаяПочтаКлиента);
	
	Возврат НастройкиПисьма;
	
КонецФункции

Функция ПолучитьПараметрыОтправкиФайловПоЭлектроннойПочте(Файлы, Объект, Клиент) Экспорт
	
	Тема = "";
	Текст = "";
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.Прием") Тогда
		Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Приём %1 от %2'"), Объект.Врач, Объект.Дата);
		Текст = СтрШаблон(НСтр("ru='Во вложении файлы Вашего приёма у врача %1'"), ОбщегоНазначения.ФамилияИнициалыФизЛица(Объект.Врач));
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Клиенты") Тогда
		Тема = НСтр("ru='Файлы пациента'");
		Текст = НСтр("ru='Во вложении Ваши файлы'");
	КонецЕсли;
	
	НастройкиПисьма = ПолучитьНастройкиПисьма(Тема, Текст, Клиент);
	
	ЭлектроннаяПочтаДляРассылки = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ЭлектроннаяПочтаДляРассылки");
	Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляРассылки) Тогда
		НастройкиПисьма.ЗначенияЗаполнения.Вставить("УчетнаяЗапись", ЭлектроннаяПочтаДляРассылки);
	КонецЕсли;
	
	Вложения = Новый СписокЗначений();
	Для Каждого Файл Из Файлы Цикл
		СтруктураДанныхФайла = РаботаСФайлами.ПолучитьФайлНаСервере(Файл,,Истина);
		Вложения.Добавить(СтруктураДанныхФайла.ДвоичныеДанные, СтруктураДанныхФайла.ИмяФайла);
	КонецЦикла;
	
	Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьПриемыВАрхивеСПаролем") Тогда
		АрхивацияВложений(Вложения, СокрЛП(Клиент.Код));
	КонецЕсли;
	
	НастройкиПисьма.Вставить("Вложения", Вложения);
	
	Возврат НастройкиПисьма;
	
КонецФункции

// В килобайтах. Предполагаемый лимит на размер письма с медицинским документом.
Функция МаксимальныйРазмерПисьмаМедДокумента()
	
	Возврат 1024; // Лимит 1 мегабайт.
	
КонецФункции

// Выполняет архивацию вложений в соответствии с параметрами доставки.
Процедура АрхивацияВложений(Вложения, ПарольАрхива)
	
	// Каталог вместе с файлом архивируются, а имя файла меняется на имя архива.
	КаталогВременныхФайлов = СтандартныеПодсистемыСервер.СоздатьКаталогВременныхФайлов("Email");
		
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьZipФайла = Новый ЗаписьZipФайла();
	
	Для Каждого Вложение Из Вложения Цикл
		Вложение.Значение.Записать(КаталогВременныхФайлов + Вложение.Представление);
		ПутьКФайлу = КаталогВременныхФайлов + Вложение.Представление;
		ЗаписьZipФайла.Добавить(ПутьКФайлу);
	КонецЦикла;	
		
	Вложения = Новый СписокЗначений();
	Вложения.Добавить(ЗаписьZipФайла.ПолучитьДвоичныеДанные(ПарольАрхива),"Данные_приемов.zip");
	СтандартныеПодсистемыСервер.ОчиститьКаталогВременныхФайлов(КаталогВременныхФайлов);
	
КонецПроцедуры

// Служит для регламентного задания по отправке результатов внешних лабораторий клиентам.
// 
Процедура ОтправитьРезультатыАнализовКлиентам() Экспорт
	
	Если Не УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НзПриемовНаОтправку = РегистрыСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.СоздатьНаборЗаписей();
	
	Текст = "Во вложении находятся результаты Ваших анализов.";
	Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьПриемыВАрхивеСПаролем") Тогда
		Текст = Текст + " Пароль Вы можете уточнить у администратора";
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.Документ КАК Ссылка,
		|	ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.Документ.Клиент КАК Клиент
		|ИЗ
		|	РегистрСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте КАК ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте
		|ГДЕ
		|	РАЗНОСТЬДАТ(ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.Период, &ТекущаяДата, ДЕНЬ) <= 7
		|ИТОГИ ПО
		|	Клиент";
	
	Запрос.Параметры.Вставить("ТекущаяДата",НачалоДня(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлиент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭлектроннаяПочтаДляРассылки = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ЭлектроннаяПочтаДляРассылки");
	Если Не ЗначениеЗаполнено(ЭлектроннаяПочтаДляРассылки) Тогда
		ЭлектроннаяПочтаДляРассылки = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;	
	КонецЕсли;
	
	ТекстИсключения = "";
	
	Пока ВыборкаКлиент.Следующий() Цикл
		Тема = "Результаты Ваших анализов от ";
		ПриемыКОтправке = Новый Массив;
		Филиал = "";
		ВыборкаДетальныеЗаписи = ВыборкаКлиент.Выбрать();   	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПриемыКОтправке.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			Если Филиал = "" Тогда
				 Филиал = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(ВыборкаДетальныеЗаписи.Ссылка).НазваниеОрганизации;
			КонецЕсли;
		КонецЦикла;
		
		Тема = Тема + Филиал;		
		СтруктураОтправки = ПолучитьПараметрыОтправкиПриемаПоЭлектроннойПочте(ПриемыКОтправке, Тема, Текст, ВыборкаКлиент.Клиент);
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтруктураОтправки.Получатель, Ложь) Тогда
			Попытка
				РаботаСПочтовымиСообщениямиСлужебный.ОтправитьПочтовоеСообщение(ЭлектроннаяПочтаДляРассылки, СтруктураОтправки);
			Исключение
				ОбработатьСобытиеПриНедоставкеПриемов(НзПриемовНаОтправку, ПриемыКОтправке, ВыборкаКлиент.Клиент, Истина, ОписаниеОшибки());
				
				// Текст описания места проблемы для ошибки регзадания.
				Если ПустаяСтрока(ТекстИсключения) Тогда
					
					СтрокаДокументы = "";
					Для Каждого ДокументСсылка Из ПриемыКОтправке Цикл
						СтрокаДокументы = СтрокаДокументы + Символы.ПС + Символы.Таб + Строка(ДокументСсылка);
					КонецЦикла;
					ТекстИсключения = "Ошибка при попытке отправки из очереди документов: " + СтрокаДокументы
									+ Символы.ПС + "Проверьте учетную запись почты: " + Строка(ЭлектроннаяПочтаДляРассылки)
									+ Символы.ПС + Символы.ПС + ОписаниеОшибки();				КонецЕсли;
			КонецПопытки;
		Иначе
			ОбработатьСобытиеПриНедоставкеПриемов(НзПриемовНаОтправку, ПриемыКОтправке, ВыборкаКлиент.Клиент, Ложь);
		КонецЕсли;	
	КонецЦикла;
	
	НзПриемовНаОтправку.Записать(Истина); // Старые приёмы (свыше недели) удалятся, т.к. изначально не попадут в запрос.
	
	Если Не ПустаяСтрока(ТекстИсключения) Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Обработать событие при недоставке приемов
//
// Параметры:
//  НзПриемовНаОтправку	 - 	НаборЗаписей ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте - Набор, куда добавить необработанные приёмы 
//  МсПриемы			 - 	Массив - Массив с необработанными приёмами
//  Клиент				 - 	СправочникСсылка.Клиенты - Ссылка на клиента приёмов 
//  ЭтоИсключение		 - 	Булево - Истина - Исключение, Ложь - Неверный формат e-mail  
//
Процедура ОбработатьСобытиеПриНедоставкеПриемов(НзПриемовНаОтправку, ПриемыКОтправке, Клиент, ЭтоИсключение, ОписаниеОшибки = "");
	
	Если ЭтоИсключение Тогда
		Текст = "Не удалость отправить клиенту по неизвестной причине" + Символы.ПС + ОписаниеОшибки;
		Данные = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.АвтоматическаяОтправкаРезультатовАнализов); 
		МетаданныеОбъекта = Метаданные.РегламентныеЗадания.АвтоматическаяОтправкаРезультатовАнализов;
	Иначе
		Текст = "У Клиента некорректно заполнен e-mail";
		Данные = Клиент; 
		МетаданныеОбъекта = Клиент.Метаданные();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Предупреждение,
											МетаданныеОбъекта, Данные, Текст);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Прием Из ПриемыКОтправке Цикл
		Запись = НзПриемовНаОтправку.Добавить();
		Запись.Документ = Прием;
		Запись.Период = Прием.Дата;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПараметровПисьма(Знач Объект, НастройкиПараметров, ТекстОшибки) Экспорт
	
	Если Объект.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить
		И Не Объект.Проведен
	Тогда
		ТекстОшибки = НСтр("ru='Необходимо провести перед отправкой!'");
		Возврат;
	КонецЕсли;
	
	НастройкиПараметров.ФормироватьPDFНаКлиенте = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ФормироватьPDFНаКлиенте");
	НастройкиПараметров.АдресWkhtmltopdfНаКлиенте = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РасположениеПрограммыWkhtmltopdfНаКлиенте");
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Попытка
		МенеджерОбъекта.ЗаполнитьНастройкиПараметровПисьма(Объект.Ссылка, НастройкиПараметров.Тема, НастройкиПараметров.Текст, НастройкиПараметров.ДокументыОтправки);
	Исключение КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
