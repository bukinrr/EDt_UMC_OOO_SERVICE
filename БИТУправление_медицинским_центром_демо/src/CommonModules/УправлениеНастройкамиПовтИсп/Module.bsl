#Область ПрограммныйИнтерфейс

// Функция возвращает значение прейскуранта для филиала, если не заполнен, 
// то значение основного прейскуранта из учетной политики.
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы - Филиал.
// 
// Возвращаемое значение:
//   СправочникСсыка.Прейскуранты.
//
Функция ПолучитьПрейскурантФилиала(Знач Филиал = Неопределено) Экспорт 
	
	Возврат УправлениеНастройками.ПолучитьПрейскурантФилиала(Филиал);
	
КонецФункции

#Область ЖурналЗаписи

// Возвращает визуальные настройки для формирования журнала записи.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьВизуальныеНастройкиЖурналаЗаписи() Экспорт
	
	Результат = Новый Структура;
	ОсновнаяНастройкаЯчеек = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка;
	
	Для Каждого Реквизит Из ОсновнаяНастройкаЯчеек.Метаданные().Реквизиты Цикл
		Результат.Вставить(Реквизит.Имя, ОсновнаяНастройкаЯчеек[Реквизит.Имя]);
	КонецЦикла;
	
	Результат.Вставить("ОсновнаяНастройкаЯчеек", ОсновнаяНастройкаЯчеек);
	Результат.Вставить("ШиринаКолонкиКлиента",?(ОсновнаяНастройкаЯчеек.ВидОтображения = Перечисления.ВидыОтображенияЯчеек.КлиентУслугиРаздельно,4,0.25));
	Результат.Вставить("ПоследовательностьОтображения",ОсновнаяНастройкаЯчеек.ПоследовательностьОтображения);
	Результат.Вставить("ЕстьВыводФилиала", ОсновнаяНастройкаЯчеек.ОтображениеВидовВремениКабинетовСотрудников.Найти(Перечисления.ПоляОтображенияГрафикаВРасписании.Филиал) <> Неопределено);
	
	Результат.Вставить("СортировкаСубъектовРасписания", ОсновнаяНастройкаЯчеек.СортировкаСубъектовРасписания.Выгрузить());
	
	ЦветаСубъектовТЧ = ОсновнаяНастройкаЯчеек.ЦветаСубъектовРасписания.Выгрузить();
	ЦветаСубъектовТЧ.Колонки.Добавить("ЦветФона");
	ЦветаСубъектовТЧ.Колонки.Добавить("КодПодразделение");
	Для Каждого ЦветСубъектаСтрока Из ЦветаСубъектовТЧ Цикл	
		ЦветСубъектаСтрока.ЦветФона = ЦветСубъектаСтрока.Цвет.Получить();
		ЦветСубъектаСтрока.КодПодразделение = ЦветСубъектаСтрока.Подразделение.Код;
	КонецЦикла;
	
	Результат.Вставить("ЦветаСубъектовРасписания", ЦветаСубъектовТЧ);
	//Результат.Вставить("ЦветаСубъектовРежимОтображения", ОсновнаяНастройкаЯчеек.ЦветаСубъектовРежимОтображения);
	
	СортировкаСубъектовРасписанияРучнойПорядокТЧ = ОсновнаяНастройкаЯчеек.СортировкаСубъектовРасписанияРучнойПорядок.Выгрузить();
	СортировкаРучнойПорядокПустаяТЧ = СортировкаСубъектовРасписанияРучнойПорядокТЧ.Скопировать(,"Значение");
	СортировкаРучнойПорядокПустаяТЧ.Колонки.Добавить("ЭтоГруппа");
	СортировкаРучнойПорядокПустаяТЧ.Очистить();
	СортировкаСубъектовРасписанияРучнойПорядокПодразделения	= СортировкаРучнойПорядокПустаяТЧ.Скопировать(); 
	СортировкаСубъектовРасписанияРучнойПорядокДолжности		= СортировкаРучнойПорядокПустаяТЧ.Скопировать();
	СортировкаСубъектовРасписанияРучнойПорядокСотрудник	= СортировкаРучнойПорядокПустаяТЧ.Скопировать();
	СортировкаСубъектовРасписанияРучнойПорядокСпециализации	= СортировкаРучнойПорядокПустаяТЧ.Скопировать();
	
	Для Каждого СтрокаРучнойСортировкиСубъектовРасписания Из СортировкаСубъектовРасписанияРучнойПорядокТЧ Цикл
		
		ИмяПоляСортировки = Строка(ТипЗнч(СтрокаРучнойСортировкиСубъектовРасписания.Значение));
		НоваяСтрока = Вычислить("СортировкаСубъектовРасписанияРучнойПорядок" + ИмяПоляСортировки + ".Добавить()");		
		Если ИмяПоляСортировки <> "Подразделения" Тогда
			НоваяСтрока.Значение = СтрокаРучнойСортировкиСубъектовРасписания.Значение;
			НоваяСтрока.ЭтоГруппа = НоваяСтрока.Значение.ЭтоГруппа;
		Иначе
			Если ЗначениеЗаполнено(СтрокаРучнойСортировкиСубъектовРасписания.Значение) Тогда
				НоваяСтрока.Значение = СтрокаРучнойСортировкиСубъектовРасписания.Значение.Код;
			Иначе
				НоваяСтрока.Значение = СтрокаРучнойСортировкиСубъектовРасписания.Значение;
			КонецЕсли;
			НоваяСтрока.ЭтоГруппа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("СортировкаСубъектовРасписанияРучнойПорядокПодразделения", СортировкаСубъектовРасписанияРучнойПорядокПодразделения);
	Результат.Вставить("СортировкаСубъектовРасписанияРучнойПорядокДолжности", СортировкаСубъектовРасписанияРучнойПорядокДолжности);
	Результат.Вставить("СортировкаСубъектовРасписанияРучнойПорядокСотрудник", СортировкаСубъектовРасписанияРучнойПорядокСотрудник);
	Результат.Вставить("СортировкаСубъектовРасписанияРучнойПорядокСпециализации", СортировкаСубъектовРасписанияРучнойПорядокСпециализации);
	
	ПустаяТЧ = ОсновнаяНастройкаЯчеек.ПоследовательностьОтображения.Выгрузить(,"Ячейка, ВТойЖеСтроке");
	ПустаяТЧ.Очистить();
	ПустаяТЧ.Колонки.Добавить("Предопределенный", Новый ОписаниеТипов("Булево"));
	ПустаяТЧ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СвойстваОбъектов"));
	ПустаяТЧ.Колонки.Добавить("ЯчейкаИмяПредопределенного", Новый ОписаниеТипов("Строка"));
	ПустаяТЧ.Колонки.Добавить("ЯчейкаРодитель", Новый ОписаниеТипов("СправочникСсылка.ЯчейкиКалендаря"));
	ПустаяТЧ.Колонки.Добавить("ЯчейкаРодительИмяПредопределенного", Новый ОписаниеТипов("Строка"));
	
	ПоследовательностьОтображенияОсновнойЯчейки				= ПустаяТЧ.Скопировать();
	ПоследовательностьОтображенияОсновнойЯчейкиКлиент		= ПустаяТЧ.Скопировать();
	ПоследовательностьОтображенияОсновнойЯчейкиУслуга		= ПустаяТЧ.Скопировать();
	ПоследовательностьОтображенияПримечанияОсновнойЯчейки	= ПустаяТЧ.Скопировать();
	ПоследовательностьОтображенияДопЯчейки					= ПустаяТЧ.Скопировать();
	ПоследовательностьОтображенияПримечанияДопЯчейки		= ПустаяТЧ.Скопировать();
	ПоследовательностьОтображенияКартинокОсновнойЯчейки		= ПустаяТЧ.Скопировать();
	ПоследовательностьОтображенияКартинокДопЯчейки			= ПустаяТЧ.Скопировать();
	
	пчСпособыОтображения = Перечисления.СпособыОтображенияДополнительныхПолейРасписания;
	НастройкиЯчеек = Новый Соответствие;
	НастройкиЯчеек.Вставить(пчСпособыОтображения.ОсновнаяЯчейка,					ПоследовательностьОтображенияОсновнойЯчейки);
	НастройкиЯчеек.Вставить(пчСпособыОтображения.ПримечаниеКЗаявке,					ПоследовательностьОтображенияПримечанияОсновнойЯчейки);
	НастройкиЯчеек.Вставить(пчСпособыОтображения.ДополнительнаяЯчейка,				ПоследовательностьОтображенияДопЯчейки);
	НастройкиЯчеек.Вставить(пчСпособыОтображения.ПримечаниеКДополнительнойЯчейке,	ПоследовательностьОтображенияПримечанияДопЯчейки);
	НастройкиЯчеек.Вставить(пчСпособыОтображения.КартинкиОсновнойЯчейки,			ПоследовательностьОтображенияКартинокОсновнойЯчейки);
	НастройкиЯчеек.Вставить(пчСпособыОтображения.КартинкиДополнительнойЯчейки,		ПоследовательностьОтображенияКартинокДопЯчейки);
	НастройкиЯчеек.Вставить(пчСпособыОтображения.ПустаяСсылка(),					ПоследовательностьОтображенияОсновнойЯчейки);
	
	ХранимыеПризнаки = Новый Массив;
	РассчитываемыеПризнаки = Новый Массив;
	ЕстьРассчитываемыеПризнакиЗаявок = Ложь;
	ПризнакиДопСвойств = Новый Массив;
	Для Каждого СтрокаНастроек Из ОсновнаяНастройкаЯчеек.ПоследовательностьОтображения Цикл
		СтрокаКэшируемыхНастроек = НастройкиЯчеек.Получить(СтрокаНастроек.РазмещениеВЯчейках).Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаКэшируемыхНастроек, СтрокаНастроек);
		СтрокаКэшируемыхНастроек.Предопределенный = СтрокаНастроек.Ячейка.Предопределенный;
		СтрокаКэшируемыхНастроек.ЯчейкаИмяПредопределенного = СтрокаНастроек.Ячейка.ИмяПредопределенныхДанных;
		СтрокаКэшируемыхНастроек.ЯчейкаРодитель = СтрокаНастроек.Ячейка.Родитель;
		СтрокаКэшируемыхНастроек.ЯчейкаРодительИмяПредопределенного = СтрокаКэшируемыхНастроек.ЯчейкаРодитель.ИмяПредопределенныхДанных;
		
		Если Не СтрокаКэшируемыхНастроек.Предопределенный Тогда
			Если СтрокаНастроек.Ячейка.ФорматУсловия = 2 Тогда
				СтрокаКэшируемыхНастроек.Свойство = СтрокаНастроек.Ячейка.ДополнительноеСвойство;
				ПризнакиДопСвойств.Добавить(СтрокаКэшируемыхНастроек.Свойство);
			ИначеЕсли СтрокаНастроек.Ячейка.РассчитыватьОнлайн Тогда
				РассчитываемыеПризнаки.Добавить(СтрокаНастроек.Ячейка);
				ЕстьРассчитываемыеПризнакиЗаявок = ЕстьРассчитываемыеПризнакиЗаявок Или СтрокаНастроек.Ячейка.ВидПризнака = 1;
			Иначе
				ХранимыеПризнаки.Добавить(СтрокаНастроек.Ячейка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим, есть ли РассчитываемыеПризнакиЗаявок хотя бы в цвете доп. ячейки
	Если Не ЕстьРассчитываемыеПризнакиЗаявок
		И ЗначениеЗаполнено(ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки)
		И ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки.ВидПризнака = 1
	Тогда
		ЕстьРассчитываемыеПризнакиЗаявок = Истина;
	КонецЕсли;
	
	// Фиксируем источник картинок (клиент или заявка)
	ПоследовательностьОтображенияКартинокОсновнойЯчейки.Колонки.Добавить("ЭтоКлиент", Новый ОписаниеТипов("Булево"));
	ПоследовательностьОтображенияКартинокДопЯчейки.Колонки.Добавить("ЭтоКлиент", Новый ОписаниеТипов("Булево"));
	Для Каждого ОписаниеКартинки Из ПоследовательностьОтображенияКартинокОсновнойЯчейки Цикл
		ОписаниеКартинки.ЭтоКлиент = ОписаниеКартинки.Ячейка.ВидПризнака = 0;
	КонецЦикла;
	Для Каждого ОписаниеКартинки Из ПоследовательностьОтображенияКартинокДопЯчейки Цикл
		ОписаниеКартинки.ЭтоКлиент = ОписаниеКартинки.Ячейка.ВидПризнака = 0;
	КонецЦикла;
	
	// Фиксируем данные по кол-ву ячеек картинок для ускорения проверки в коде
	Результат.Вставить("ЕстьКартинкиВОсновнойЯчейке", ПоследовательностьОтображенияКартинокОсновнойЯчейки.Количество() > 0);
	Результат.Вставить("ЕстьКартинкиВДопЯчейке",	  ПоследовательностьОтображенияКартинокДопЯчейки.Количество() > 0);
	Результат.Вставить("ЕстьПоляСортировки",		  Результат.СортировкаСубъектовРасписания.Количество() > 0);

	// Отдельно сформируем кэш для случая раздельного вывода клиента и услуг.
	Для Каждого СтрокаНастроек Из ПоследовательностьОтображенияОсновнойЯчейки Цикл
		Если СтрокаНастроек.ЯчейкаРодитель <> Справочники.ЯчейкиКалендаря.Клиент Тогда
			СтрокаКэшируемыхНастроек = ПоследовательностьОтображенияОсновнойЯчейкиУслуга.Добавить();
		ИначеЕсли СтрокаНастроек.ЯчейкаРодитель = Справочники.ЯчейкиКалендаря.Клиент Тогда 
			СтрокаКэшируемыхНастроек = ПоследовательностьОтображенияОсновнойЯчейкиКлиент.Добавить();	
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКэшируемыхНастроек, СтрокаНастроек);
	КонецЦикла;
	
	// Добавим признак фона.
	Если ЗначениеЗаполнено(ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки) Тогда
		Если ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки.РассчитыватьОнлайн Тогда
			РассчитываемыеПризнаки.Добавить(ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки);
		Иначе
			ХранимыеПризнаки.Добавить(ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки);
		КонецЕсли;
	КонецЕсли;
		
	Результат.Вставить("ХранимыеПризнаки", ХранимыеПризнаки);
	Результат.Вставить("РассчитываемыеПризнаки", РассчитываемыеПризнаки);
	Результат.Вставить("ЕстьРассчитываемыеПризнакиЗаявок", ЕстьРассчитываемыеПризнакиЗаявок);
	Результат.Вставить("ПризнакиДопСвойств", ПризнакиДопСвойств);
	Результат.Вставить("ПоследовательностьОтображенияОсновнойЯчейки",			 ПоследовательностьОтображенияОсновнойЯчейки);
	Результат.Вставить("ПоследовательностьОтображенияПримечанияОсновнойЯчейки",	 ПоследовательностьОтображенияПримечанияОсновнойЯчейки);
	Результат.Вставить("ПоследовательностьОтображенияДопЯчейки",				 ПоследовательностьОтображенияДопЯчейки);
	Результат.Вставить("ПоследовательностьОтображенияПримечанияДопЯчейки",		 ПоследовательностьОтображенияПримечанияДопЯчейки);
	Результат.Вставить("ПоследовательностьОтображенияКартинокОсновнойЯчейки",	 ПоследовательностьОтображенияКартинокОсновнойЯчейки);
	Результат.Вставить("ПоследовательностьОтображенияКартинокДопЯчейки",		 ПоследовательностьОтображенияКартинокДопЯчейки);
	
	Результат.Вставить("ПоследовательностьОтображенияОсновнойЯчейкиКлиент", ПоследовательностьОтображенияОсновнойЯчейкиКлиент);
	Результат.Вставить("ПоследовательностьОтображенияОсновнойЯчейкиУслуга", ПоследовательностьОтображенияОсновнойЯчейкиУслуга);
	
	Результат.Вставить("ЦветФонаДопЯчейки", ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки);

	ПоляОтображенияГрафикаВЯчейке = Новый Массив;
	ПоляОтображенияГрафикаВПримечанииЯчейки = Новый Массив;
	
	пчПоляОтображенияГрафика = Перечисления.ПоляОтображенияГрафикаВРасписании;
	ОтображениеГрафика = ОсновнаяНастройкаЯчеек.ОтображениеВидовВремениКабинетовСотрудников;
	
	Результат.Вставить("ВыводитьВремяВСвободныеЯчейкиЖЗ",
						ОтображениеГрафика.Найти(пчПоляОтображенияГрафика.Время) <> Неопределено);
	
	Результат.Вставить("ОтображатьВидВремениГрафикаВЯчейке",
						ОтображениеГрафика.Найти(пчПоляОтображенияГрафика.ВидВремениГрафика) <> Неопределено);
	
	Результат.Вставить("ОтображатьКабинетСотрудникаВЯчейке",
						ОтображениеГрафика.Найти(пчПоляОтображенияГрафика.КабинетСотрудник) <> Неопределено);
	
	Результат.Вставить("ОтображатьФилиалВЯчейке",
						ОтображениеГрафика.Найти(пчПоляОтображенияГрафика.Филиал) <> Неопределено);
						
	РаботаСКлиентамиПереопределяемый.ЖурналЗаписиПолучитьВизуальныеНастройки(ОсновнаяНастройкаЯчеек, Результат);
					
	Возврат Результат;
		
КонецФункции

// Изменение состояния заявки требует ли перерисовки журнала записи. Если Ложь, то предполагается,
//  что достаточно обновить цвет заявки в журнале.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ИзменениеСостоянияЗаявкиТребуетПерерисовкиЖурналаЗаписи() Экспорт
	
	ОсновнаяНастройкаЯчеек = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка;
	Возврат ОсновнаяНастройкаЯчеек.ИзменениеСостоянияЗаявкиТребуетПерерисовкиЖурналаЗаписи;
		
КонецФункции

// Истина, если в настройках ячеек календаря задан расчет цвета доп. ячейки.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЗаданЦветФонаДопЯчейкиЗаявкиЖурналаЗаписи() Экспорт
	
	ОсновнаяНастройкаЯчеек = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка;
	Возврат ЗначениеЗаполнено(ОсновнаяНастройкаЯчеек.ЦветФонаДополнительнойКолонки);
		
КонецФункции

#КонецОбласти

// Возвращает структуру значений расширенной(дополнительной) учетной политики по умолчанию.
//
// Возвращаемое значение:
//  Структура - Структура со значениями параметров расширенной(дополнительной) учетной политики, 
//              в качестве ключа используется имя параметра. 
//
Функция ПолучитьУчетнуюПолитикуРасширеннуюПоУмолчанию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура;
	
	ПараметрыХранилищеЗначения = ПолучитьПараметрыУчетнойПолитикиРасширеннойХранилищеЗначений();
	
	СтруктураВозврата.Вставить("ИспользоватьХочуРаньшеВЗаявках", Ложь);
	СтруктураВозврата.Вставить("ЗапретитьЗаписьНаНерабочееВремяСотрудника", Ложь);
	СтруктураВозврата.Вставить("ИспользоватьШтрихкодированиеСотрудников", Истина);
	СтруктураВозврата.Вставить("ЗапретитьРучнойВводШККартыСкидокКлиенты", Ложь);
	СтруктураВозврата.Вставить("ЗапретитьРучнойВводШКСертификатов", Ложь);
	СтруктураВозврата.Вставить("ЗапретитьАдминистраторуЗаписьКлиентаНеВСвойФилиал", Ложь);
	СтруктураВозврата.Вставить("ИспользоватьОграничениеДоступаНаУровнеЗаписей", Ложь);
	СтруктураВозврата.Вставить("ОграничиватьЧтениеФилиаломПользователя", Ложь);
	СтруктураВозврата.Вставить("ОсновнойВидОплаты", Перечисления.ВидыОплаты.Безналичные);
	СтруктураВозврата.Вставить("ПересчитыватьСкидкиПриВыбореКартыКлиента", Истина);
	СтруктураВозврата.Вставить("НеЗаполнятьОплатуПоСуммеДокументаАвтоматически", Ложь);
	СтруктураВозврата.Вставить("КалендарьЖурналаЗаписиРастягивать", Ложь);
	
	СтруктураВозврата.Вставить("ДатыЗаписейЛистовОжидания",
		CRMКлиентСервер.ПолучитьСтандартныеДатыЗаписиЛистовОжидания());
		
	СтруктураВозврата.Вставить("ПериодыЗаписиЛистовОжидания",
		CRMКлиентСервер.ПолучитьСтандартныеПериодыДатыЗаписиЛистовОжидания());
		
	СтруктураВозврата.Вставить("СпособОбработкиСчитыванияШкКлиентаВЖЗ", 0);
		
	Попытка
		ОсновнаяСтрана = Справочники.СтраныМира.Россия;
	Исключение
		ОсновнаяСтрана = Справочники.СтраныМира.ПустаяСсылка();
	КонецПопытки;
	СтруктураВозврата.Вставить("ОсновнаяСтрана", ОсновнаяСтрана);
	
	СтруктураВозврата.Вставить("ИспользоватьЭлектронныеПодписиЭМК", Ложь);
	
	СтруктураВозврата.Вставить("ОсновнойМакетОформленияСКД",
		БиблиотекаМакетовОформленияКомпоновкиДанных.ОформлениеОтчетовКлассический.Имя);
		
	СтруктураВозврата.Вставить("ОсновнойВидМедКартДляПрофОсмотров", Справочники.МедицинскиеКарты.ПустаяСсылка());		
	СтруктураВозврата.Вставить("МедкартуДляПрофосмотраСоздаватьАвтоматически", Ложь);
	СтруктураВозврата.Вставить("МедкартуДляПрофосмотраИскатьДругие025у", Ложь);
	СтруктураВозврата.Вставить("ПоискКлиентаПоПодстрокеПоказыватьСДатойРождения", Истина);
	СтруктураВозврата.Вставить("АвтозаполнениеПолучателяИИНН", Ложь);
	СтруктураВозврата.Вставить("ЗапретитьЗаписьКлиентаНаДваПосещенияОдновременно", Истина);
	СтруктураВозврата.Вставить("НоменклатураОжиданияКлиента", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураВозврата.Вставить("ПодборВремениЗаписиМаксВремяОжидания", Дата(1,1,1,0,10,0));
	СтруктураВозврата.Вставить("ПредлагатьСобиратьЗаявкиЗаДеньВДокументПродажи", Ложь);
	СтруктураВозврата.Вставить("ИспользоватьКартыСкидок", Истина);
	СтруктураВозврата.Вставить("БонусыЗапретОтрицательныхОстатков", Ложь);
	
	СтруктураВозврата.Вставить("ИспользоватьПродажуМаркированныхТоваров", Константы.ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов.Получить());
	СтруктураВозврата.Вставить("ВестиУчетТорговойДеятельности", Истина);
	СтруктураВозврата.Вставить("ЧекиЭлектронноПоУмолчанию", Ложь);
	СтруктураВозврата.Вставить("ЧекККМВариантПечатиДополнительнойРасшифровкиПлатежа", 0);
	СтруктураВозврата.Вставить("ЧекКММВыводитьQRКодНаДисплейПокупателя", Истина);
	СтруктураВозврата.Вставить("КонтролироватьЗаполнениеШКМаркированногоТовараПриПродаже", Ложь);
	СтруктураВозврата.Вставить("ЗаСчетФирмыВидОплатыИспользуется", Ложь);
	
	СтруктураВозврата.Вставить("ОсновнаяОбработкаSMSРассылки", Справочники.ОбработкиSMSрассылки.ПустаяСсылка());
	СтруктураВозврата.Вставить("МедосмотрыПравилоОпределенияНезавершивших", Перечисления.МедосмотрыПравилаОпределенияНеЗавершивших.ЕстьДокументПрохождения);
		
	Попытка
		ОсновнойВидДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21;
	Исключение
		ОсновнойВидДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка();
	КонецПопытки;
	СтруктураВозврата.Вставить("ОсновнойВидДУЛ", ОсновнойВидДУЛ);
	
	СтруктураВозврата.Вставить("АвтоподстановкаИмениОтчества", Истина);
	СтруктураВозврата.Вставить("АвтозаполнениеНаправившегоВрача", Ложь);
	СтруктураВозврата.Вставить("ФормаУчастияДляНаправившегоВрача", Справочники.ТрудовыеРоли.ПустаяСсылка());
	СтруктураВозврата.Вставить("ИспользоватьАвтоПодборКлиентовПоИмениИФамилии", Ложь);
	СтруктураВозврата.Вставить("СрокЖизниЛида", 0);
	СтруктураВозврата.Вставить("ПериодОбновленияНепросмотренныхДокументовССайта", 0);
	СтруктураВозврата.Вставить("ИспользоватьАвтоподборКлиентовПоКоду", Ложь);
	СтруктураВозврата.Вставить("ПоказыватьСопутствующиеТовары", Ложь);
	СтруктураВозврата.Вставить("РежимРазметкиКлиентскойОбластиШаблоновПриема", 0);
	СтруктураВозврата.Вставить("СписыватьМатериалыСтационараСразу", Ложь);
	СтруктураВозврата.Вставить("АдресСервисаНСПК", "https://api1.fes.nspk.ru");
	
	ПараметрыПеречисления = Перечисления.ПараметрыУчетнойПолитики;
	
	ЗначенияПеречисленияХранилищеЗначения = Новый Структура;
	
	Для Каждого ИмяПараметраХранилище Из ПараметрыХранилищеЗначения Цикл 
		ЗначениеХранилища = Неопределено;
		Если СтруктураВозврата.Свойство(ИмяПараметраХранилище) Тогда
			ЗначениеХранилища = СтруктураВозврата[ИмяПараметраХранилище];	
		КонецЕсли; 
		СтруктураВозврата.Вставить(ИмяПараметраХранилище, Новый ХранилищеЗначения(ЗначениеХранилища));
	КонецЦикла;

	Возврат СтруктураВозврата;	
	
КонецФункции

// Функция возвращает параметры учетной политики расширенной, хранящиеся как хранилище значений
//
// Параметры:
//  ВернутьИменаПараметров	 - Булево - если Истина, то в массиве будут имена параметров, а не ссылки.
// 
// Возвращаемое значение:
//  Массив - Массив, содержащий ссылки типа Перечисления.ПараметрыУчетнойПолитики или Строка - имена значений.
//
Функция ПолучитьПараметрыУчетнойПолитикиРасширеннойХранилищеЗначений(ВернутьИменаПараметров = Истина) Экспорт
	
	пчПараметры = Перечисления.ПараметрыУчетнойПолитики;
	МетаданныеЗначений = пчПараметры.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
	
	ИменаПараметров = Новый Массив;
	ИменаПараметров.Добавить("ШрифтКлиент");
	ИменаПараметров.Добавить("ШрифтРабот");
	ИменаПараметров.Добавить("ДатыЗаписейЛистовОжидания");
	ИменаПараметров.Добавить("ПериодыЗаписиЛистовОжидания");
	
	Результат = Новый Массив;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		
		Если МетаданныеЗначений.Найти(ИмяПараметра) <> Неопределено Тогда
			
			Если ВернутьИменаПараметров Тогда
				Результат.Добавить(ИмяПараметра);
			Иначе
				Результат.Добавить(пчПараметры[ИмяПараметра]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
