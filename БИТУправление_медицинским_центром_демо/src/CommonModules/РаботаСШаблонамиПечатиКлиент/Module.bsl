#Область ПрограммныйИнтерфейс

// Создает временный файл из двоичных данных файла-шаблона,
//
// Параметры:
//  ДвоичныеДанные	 - ДвоичныеДанные	- Данные файла шаблона .doc
//  ИмяФайлаМакета	 - Строка			- Имя временного файла для записи двоичных данных
//  СодержаниеОшибки - Строка			- Строка, куда помещается описание ошибки, если она была
// 
// Возвращаемое значение:
//   Строка - Имя файла, куда были записаны двоичные данные шаблона.
//
Функция СоздатьВременныйФайлШаблона(ДвоичныеДанные, ИмяФайлаМакета = Неопределено, СодержаниеОшибки = "") Экспорт
	
	#Если ВебКлиент Или МобильныйКлиент Тогда
		Возврат "";
	#Иначе
	
	Если ЗначениеЗаполнено(ИмяФайлаМакета) Тогда
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьКаталогВременныхФайлов() + ИмяФайлаМакета;
	Иначе
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла(".doc");
	КонецЕсли;	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
	Исключение
		СодержаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	Возврат ПолноеИмяФайла;
	
	#КонецЕсли
	
КонецФункции

// Выполняет заполнение и отображение печатной формы документа по шаблону печати в DOC-формате,
//
// Параметры:
//  СсылкаНаОбъект				 - ДокументСсылка - Печатаемый документ
//  ШаблонПечати				 - СправочникСсылка.ШаблоныПечати - Шаблон, по котрому нужно распечатать документ
//  СодержаниеОшибки			 - Строка - Строка, куда помещается описание ошибки, если она была
//  РежимПечатиПоШаблонуWORD	 - ПеречислениеСсылка.РежимыПечатиПоШаблонуWORD - Требуемый режим печати
//  СтруктураПараметровПечати	 - Структура - Дополнительные параметры печати
// 
// Возвращаемое значение:
//   Булево - Истина, если выполнение прошло успешно.
//
Функция ВыполнитьПечатьДокументаПоШаблонуПечати(СсылкаНаОбъект, ШаблонПечати, СодержаниеОшибки, РежимПечатиПоШаблонуWORD = Неопределено, СтруктураПараметровПечати = Неопределено) Экспорт
	
	#Если ВебКлиент Или МобильныйКлиент Тогда
	СодержаниеОшибки = НСтр("ru='В режиме Веб-клиента данная операция не доступна.'");
	Возврат Ложь;
	#КонецЕсли
	
	// Если к этому моменту каким-то образом не получили ошибку или шаблон.
	Если Не ЗначениеЗаполнено(ШаблонПечати) Тогда 
		Если ПустаяСтрока(СодержаниеОшибки) Тогда 
			СодержаниеОшибки = НСтр("ru='Не указан шаблон печати'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// Есть ли шаблоны печати для ручного ввода?
	Если РаботаСШаблонамиПечатиСервер.ЕстьРучныеПараметрыШаблонаПечати(ШаблонПечати) Тогда
		// Открытие формы для ввода ручных параметров
		Контекст = Новый Структура;
		Контекст.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		Контекст.Вставить("ШаблонПечати", ШаблонПечати);
		Контекст.Вставить("СодержаниеОшибки", СодержаниеОшибки);
		Контекст.Вставить("РежимПечатиПоШаблонуWORD", РежимПечатиПоШаблонуWORD);
		Контекст.Вставить("СтруктураПараметровПечати", СтруктураПараметровПечати);
		
		ОповещениеРучноеРедактирование = Новый ОписаниеОповещения("ВыполнитьПечатьДокументаПоШаблонуПечати_ПослеВводаРучныхПараметров", РаботаСШаблонамиПечатиКлиент, Контекст);
		
		ПараметрыФормы = Новый Структура("Объект, ШаблонПечати, ДляПечати", СсылкаНаОбъект, ШаблонПечати, Истина);
		ОткрытьФорму("РегистрСведений.ЗначенияПараметровШаблоновПечати.Форма.ЗначенияПараметровОбъекта", ПараметрыФормы,,,,,ОповещениеРучноеРедактирование,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		// Нет параметров, вводимых вручную
		Возврат ВыполнитьПечатьДокументаПоШаблонуПечати_Формирование(СсылкаНаОбъект, ШаблонПечати, СодержаниеОшибки, РежимПечатиПоШаблонуWORD, СтруктураПараметровПечати);
		// ВыполнитьОбработкуОповещения(, Истина);
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

// Выполняет заполнение и отображение печатной формы документа по шаблону печати в DOC-формате,
//
// Параметры:
//  СсылкаНаОбъект				 - ДокументСсылка - Печатаемый документ
//  ШаблонПечати				 - СправочникСсылка.ШаблоныПечати - Шаблон, по котрому нужно распечатать документ
//  СодержаниеОшибки			 - Строка - Строка, куда помещается описание ошибки, если она была
//  РежимПечатиПоШаблонуWORD	 - ПеречислениеСсылка.РежимыПечатиПоШаблонуWORD - Требуемый режим печати
//  СтруктураПараметровПечати	 - Структура - Дополнительные параметры печати
// 
// Возвращаемое значение:
//   Булево - Истина, если выполнение прошло успешно.
//
Функция ВыполнитьПечатьДокументаПоШаблонуПечати_ПослеВводаРучныхПараметров(Результат, Контекст) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьПечатьДокументаПоШаблонуПечати_Формирование(Контекст.СсылкаНаОбъект, Контекст.ШаблонПечати, Контекст.СодержаниеОшибки, Контекст.РежимПечатиПоШаблонуWORD, Контекст.СтруктураПараметровПечати);
	КонецЕсли;
			
КонецФункции

// См. ВыполнитьПечатьДокументаПоШаблонуПечати()
Функция ВыполнитьПечатьДокументаПоШаблонуПечати_Формирование(СсылкаНаОбъект, ШаблонПечати, СодержаниеОшибки, РежимПечатиПоШаблонуWORD = Неопределено, СтруктураПараметровПечати = Неопределено) Экспорт
	
	// Вычисляем алгоритмы параметров и получаем массив значений параметров.
	мсПараметрыШаблона = РаботаСШаблонамиПечатиСервер.ЗначенияПараметровШаблонаПечати(СсылкаНаОбъект, ШаблонПечати, СодержаниеОшибки);
	Если мсПараметрыШаблона = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если РежимПечатиПоШаблонуWORD = Неопределено Тогда
		РежимПечатиПоШаблонуWORD = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимПечатиПоШаблонуWORD");
	КонецЕсли;
	
	// Получаем параметры печати: печать без препросмотра и количество экземпляров.
	Если СтруктураПараметровПечати = Неопределено Или СтруктураПараметровПечати.НаПринтер = Неопределено Тогда 
		СтруктураПараметровПечати = РаботаСШаблонамиПечатиСервер.ПолучитьПараметрыДляПечати(ШаблонПечати);
	КонецЕсли;
	
	Попытка
		Если РежимПечатиПоШаблонуWORD = ПредопределенноеЗначение("Перечисление.РежимыПечатиПоШаблонуWORD.ФормироватьНаКлиентеВOpenOffice") Тогда
			Возврат СформироватьДокументПоШаблонуОО(ШаблонПечати, мсПараметрыШаблона, СодержаниеОшибки, СтруктураПараметровПечати);				
		ИначеЕсли РежимПечатиПоШаблонуWORD = ПредопределенноеЗначение("Перечисление.РежимыПечатиПоШаблонуWORD.ФормироватьНаКлиентеCOMmsWORD") Тогда
			Возврат РаботаСШаблонамиПечатиКлиентСервер.СформироватьДокументWORDПоШаблону(ШаблонПечати, мсПараметрыШаблона, , СодержаниеОшибки,СтруктураПараметровПечати);	
		Иначе
			ДанныеШаблона = Неопределено;
			ТекстОшибки = "";
			Если РежимПечатиПоШаблонуWORD = ПредопределенноеЗначение("Перечисление.РежимыПечатиПоШаблонуWORD.ФормироватьНаСервереCOMmsWORD_PDF") Тогда
				Результат = РаботаСШаблонамиПечатиСервер.СформироватьДокументWORDПоШаблонуCOMОбъект(ШаблонПечати, мсПараметрыШаблона, ДанныеШаблона, СодержаниеОшибки, СтруктураПараметровПечати);	
				Если Результат Тогда
					ИмяФайла = ПолучитьИмяВременногоФайла(".pdf");
				Иначе
					ТекстОшибки = СодержаниеОшибки;
				КонецЕсли;
			Иначе
				РаботаСШаблонамиПечатиСервер.СформироватьДокументШаблонаWORD(ШаблонПечати, мсПараметрыШаблона, ДанныеШаблона, ТекстОшибки);
				Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
					Если РежимПечатиПоШаблонуWORD = ПредопределенноеЗначение("Перечисление.РежимыПечатиПоШаблонуWORD.ФормироватьНаСервереRTF") Тогда
						ИмяФайла = ПолучитьИмяВременногоФайла(".rtf");
					ИначеЕсли РежимПечатиПоШаблонуWORD = ПредопределенноеЗначение("Перечисление.РежимыПечатиПоШаблонуWORD.ФормироватьНаСервереPDF") Тогда
						ИмяФайла = ПолучитьИмяВременногоФайла(".pdf");
					Иначе
						ИмяФайла = ПолучитьИмяВременногоФайла(".docx");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				ДанныеШаблона.Записать(ИмяФайла);
				
				Если СтруктураПараметровПечати.НаПринтер Тогда // Печатать сразу на принтер.
					Попытка
						ПечатьWordЧерезCOMОбъект(ИмяФайла, СтруктураПараметровПечати.КоличествоЭкземпляров);
						Возврат Истина;
					Исключение
						// Если не удалось выполнить через COM-объект, тогда просто открываем документ.
					КонецПопытки;
				КонецЕсли;
				ЗапуститьПриложение(ИмяФайла);
			Иначе
				ПоказатьПредупреждение(,"Операция не выполнена. " + ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	Исключение
		СодержаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизиты документа и открывает его средствами COM-объектов OpenOffice.
//
// Параметры:
//  ШаблонПечати				 - СправочникСсылка.ШаблоныПечати	 - Шаблон, по котрому нужно распечатать документ
//  РеквизитыШаблона			 - Массив							 - массив структур параметров шаблона с полями Параметр и Значение.
//  СодержаниеОшибки			 - Строка							 - переменная для передачи текста ошибки.
//  СтруктураПараметровПечати	 - Стурктура						 - значения параметров печати.
// 
// Возвращаемое значение:
//  Булево - успешность операции.
//
Функция СформироватьДокументПоШаблонуОО(ШаблонПечати, РеквизитыШаблона, СодержаниеОшибки = "", СтруктураПараметровПечати = Неопределено)
	
	ДвоичныеДанныеМакета = РаботаСШаблонамиПечатиСервер.ПолучитьФайлМакетаШаблонаПечати(ШаблонПечати);

	ПолноеИмяФайла = СоздатьВременныйФайлШаблона(ДвоичныеДанныеМакета,,СодержаниеОшибки);
	Если ЗначениеЗаполнено(СодержаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
	Исключение
		СодержаниеОшибки =	НСтр("ru='Приложение Open/Libre Office не установлено или работа с ним в режиме COM-соединения невозможна в данной среде.
							|Не удалось создать COM-объект ""com.sun.star.ServiceManager""
							|'") + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
	НастройкиОткрытия = Новый COMSafeArray("VT_VARIANT", 1);
	Попытка
		
		FileNameSh = СокрЛП(ПолноеИмяФайла);
		URL = СтрЗаменить(FileNameSh," ","%20");
		URL = СтрЗаменить(URL,"\","/");
		URL ="file://localhost/" + URL;

		OpenOffice = Desktop.LoadComponentFromURL(URL, "_blank", 0, НастройкиОткрытия);

	Исключение
		СодержаниеОшибки = НСтр("ru='Ошибка при попытке создать объект '") + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки; 
	
	Replace = OpenOffice.CreateReplaceDescriptor();
	
	// Отличие от WORD - ОО вставляет новую таблицу
	// добраться до .parent в ОО не вышло.
	Text = OpenOffice.gettext();
	Controller=OpenOffice.CurrentController;
	Cursor=Controller.getViewCursor();
	
	Для Каждого РеквизитШаблона Из РеквизитыШаблона Цикл
	
		Если ТипЗнч(РеквизитШаблона.Значение) = Тип("Строка") Тогда	
			Replace.SearchString = РеквизитШаблона.ИмяПараметра;
			Replace.ReplaceString = Строка(РеквизитШаблона.Значение);		
		ИначеЕсли ТипЗнч(РеквизитШаблона.Значение) = Тип("ТабличныйДокумент")
		// Или ТипЗнч(РеквизитШаблона.Значение) = Тип("ТаблицаЗначений")
		Тогда
			// Создание таблицы ОО
			ТЗ=РеквизитШаблона.Значение;
			ИмяТаблицы = СтрЗаменить(РеквизитШаблона.ИмяПараметра,"<","");
			ИмяТаблицы = СтрЗаменить(ИмяТаблицы,">","");
			СоздатьТаблицу(OpenOffice, ТЗ, ИмяТаблицы);
		КонецЕсли;
	    OpenOffice.ReplaceAll(Replace);
	КонецЦикла;
	
	Если СтруктураПараметровПечати <> Неопределено Тогда 
		Если СтруктураПараметровПечати.НаПринтер Тогда  
			ПараметрыПечати = Новый COMSafeArray("VT_VARIANT", 2);
																																																																					 
			ПараметрЧислоКопий = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
			ПараметрЧислоКопий.Name = "CopyCount";
			ПараметрЧислоКопий.Value = СтруктураПараметровПечати.КоличествоЭкземпляров;
			ПараметрОжидание = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue"); 
			ПараметрОжидание.Name = "Wait";
			ПараметрОжидание.Value = Истина;
			ПараметрыПечати.SetValue(0, ПараметрЧислоКопий);
			ПараметрыПечати.SetValue(1, ПараметрОжидание);
			
			OpenOffice.print(ПараметрыПечати);
			OpenOffice.close(-1);
		Иначе 
 			OpenOffice.getCurrentController().getFrame().getContainerWindow().setFocus();
		КонецЕсли;
	Иначе
		OpenOffice.getCurrentController().getFrame().getContainerWindow().setFocus();
	КонецЕсли;
 	
	Возврат Истина;
	
КонецФункции

Процедура СоздатьТаблицу(OpenOffice, Таблица, ИмяТаблицы)
	
	ЧислоСтрок = Таблица.ВысотаТаблицы;
	ЧислоКолонок = Таблица.ШиринаТаблицы;
	oTables = OpenOffice.TextTables;
	Если oTables.hasByName(ИмяТаблицы) Тогда
		oTable = oTables.getByName(ИмяТаблицы);
	Иначе    
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не найдена таблица с именем: '") + ИмяТаблицы);
		Возврат;
	КонецЕсли;
	
	Rows = oTable.getRows();
	RowNumber = Rows.getCount();
	Если oTable.getCellByPosition(0,0).string <> ""
		И RowNumber = 1 Тогда
		Rows.insertByIndex(1,1);
	КонецЕсли;

	Для СчС = 1 По ЧислоСтрок Цикл
		
		oRows = oTable.getRows();
		iCount = oRows.getCount();
		Если СчС > 1 Тогда
			// Добавить строку таблицы документа
			oRows.insertByIndex(iCount, 1);
		КонецЕсли;
		CurrentRowsNumber = oRows.getCount();
		
		Для СчК = 1 По ЧислоКолонок Цикл
			ЗначениеЯчейкиПараметра = Таблица.Область(СчС, СчК).Текст;
			oCell = oTable.getCellByPosition(СчК-1, CurrentRowsNumber-1);	
			oCell.setString(Строка(ЗначениеЯчейкиПараметра));
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПечатьWordЧерезCOMОбъект(ИмяФайла, КоличествоЭкземпляров)
	
	Word = Новый COMОбъект("Word.Application");
	Документ = Word.Documents.Add(ИмяФайла);
	
	Для Сч = 1 По Макс(КоличествоЭкземпляров, 1) Цикл
		Word.PrintOut(0, 0, 0, "", "", "", 0, 1); // Не менять.
	КонецЦикла;
	
	// Закрытие документа в СОМ-объекте.
	Попытка
		Документ.Close(0);
	Исключение КонецПопытки;
	Word.Application.Quit(Ложь);
	
КонецПроцедуры

#КонецОбласти