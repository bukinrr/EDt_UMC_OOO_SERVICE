#Область ПрограммныйИнтерфейс

// Процедура формирует по переданной структуре полей запрос по табличной части документа.
//
// Параметры:
//  ДокументОбъект			 - ДокументОбъект	 - объект проводимого документа,
//  ИмяТабличнойЧасти		 - Строка			 - имя табличной части,
//  СтруктураПолей			 - Структура		 - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//  СтруктураСложныхПолей	 - Структура		 - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//  		необязательный параметр, служит для передачи конструкций типа "ВЫБОР" и т.д.
// 
// Возвращаемое значение:
//  РезультатЗапроса.
//
Функция СформироватьЗапросПоТабличнойЧасти (ДокументОбъект, ИмяТабличнойЧасти, 
											СтруктураПолей, СтруктураСложныхПолей = Неопределено) Экспорт
	ТекстЗапроса = "";
	Для Каждого Реквизит Из СтруктураПолей Цикл
		ТекстЗапроса  = ТекстЗапроса + ",
		|Док." + Реквизит.Значение + " КАК " + СокрЛП(Реквизит.Ключ);
	КонецЦикла;
	
	Если ТипЗнч(СтруктураСложныхПолей) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураСложныхПолей Цикл
			ТекстЗапроса  = ТекстЗапроса + ",
			| " + Элемент.Значение + " КАК " + СокрЛП(Элемент.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	| Док.НомерСтроки " + ТекстЗапроса + "
	| ИЗ 
	|      Документ." + МетаданныеДокумента.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + 
	" КАК Док 
	|     ГДЕ Док.Ссылка = &ДокументСсылка";
	
	// Установка параметров запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоТабличнойЧасти()

// Процедура проверяет правильность заполнения шапки документа.
//  Если какой-то из реквизтов шапки, указанный как обязательный, не заполнен,
//  то выставляется признак отказа в проведении.
//
// Параметры:
//  ДокументОбъект				 - ДокументОбъект	 - объект проводимого документа,
//  СтруктураОбязательныхПолей	 - Структура		 - структура, содержащая имена обязательных полей,
//  Отказ						 - Булево			 - признак отказа в проведении.
//  Заголовок					 - Строка			 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если Не ЗначениеЗаполнено(Значение) Тогда // найдена ошибка
			Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда 
				СтрокаСообщения = КлючЗначение.Значение;
			Иначе
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части документа.
//  Если какой-то из реквизтов, влияющий на проведение не заполнен,
//  то выставляется признак отказа в проведении.
//
// Параметры:
//  ДокументОбъект				 - ДокументОбъект	 - объект проводимого документа,
//  ИмяТабличнойЧасти			 - Строка, Массив	 - табличная часть документа: Строка или Массив из СтрокаТабличнойЧасти,
//  СтруктураОбязательныхПолей	 - Структура		 - структура, содержащая имена обязательных полей,
//  Отказ						 - Булево			 - признак отказа в проведении.
//  Заголовок					 - Строка			 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок, СтрокиТабличнойЧасти = Неопределено) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	Если СтрокиТабличнойЧасти = Неопределено Тогда
		ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = СтрокиТабличнойЧасти;
	КонецЕсли;

	// Цикл по строкам табличной части.
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		// Цикл по проверяемым полям
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Если ПроверкаТребуется(КлючЗначение.Ключ, СтрокаТаблицы, МетаданныеРеквизиты) Тогда
				Значение = СтрокаТаблицы[КлючЗначение.Ключ];
				Если Не ЗначениеЗаполнено(Значение) Тогда // найдена ошибка
					Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда 
						СтрокаСообщения = КлючЗначение.Значение;
					Иначе
						ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
						СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					КонецЕсли;
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура подготавливает таблицу по товарам и материалам документов для проведения
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект	 - объект документа.
//  ТаблицаПоТоварам	 - Неопределено		 - переменная, в которую следует поместить полученную таблицу.
//  ИмяТЧ				 - Строка			 - имя табличной части документа, по которой строится таблица.
//  СтруктураДопПолей	 - Массив			 - массив структур, набор дополнительных полей формируемой таблицы.
//
Процедура ПодготовитьТаблицуТоварыДокумента(ДокументОбъект, ТаблицаПоТоварам, ИмяТЧ="Товары", СтруктураДопПолей=неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Подготовим таблицу товаров для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		 , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВидНоменклатуры"                    , "Номенклатура.ВидНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Коэффициент"                        , "Коэффициент");
	СтруктураПолей.Вставить("Количество"                         , "Количество * Коэффициент/Выбор Когда Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда 1 Иначе Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Конец");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Сумма"                              , "Сумма");
	
	МетаданныеРеквизитовТабЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты;
	Если МетаданныеРеквизитовТабЧасти.Найти("НеОплачиваетсяПолисом") <> Неопределено Тогда
		СтруктураПолей.Вставить("НеОплачиваетсяПолисом", "НеОплачиваетсяПолисом");
	КонецЕсли;
	Если МетаданныеРеквизитовТабЧасти.Найти("СуммаНеПоПолису") <> Неопределено Тогда
		СтруктураПолей.Вставить("СуммаНеПоПолису", "СуммаНеПоПолису");
	КонецЕсли;
	Если МетаданныеРеквизитовТабЧасти.Найти("ПроцентСкидки")<>Неопределено Тогда
		СтруктураПолей.Вставить("СуммаБезСкидок"      , "Количество * Цена");
	КонецЕсли;
	Если МетаданныеРеквизитовТабЧасти.Найти("Сотрудник")<>Неопределено Тогда
		СтруктураПолей.Вставить("Сотрудник" , "Сотрудник");
	КонецЕсли;
	Если МетаданныеРеквизитовТабЧасти.Найти("БезСкладскогоУчета") <> Неопределено Тогда
		СтруктураПолей.Вставить("БезСкладскогоУчета", "БезСкладскогоУчета");
	КонецЕсли;
	Если МетаданныеРеквизитовТабЧасти.Найти("Склад") <> Неопределено Тогда
		СтруктураПолей.Вставить("Склад" ,"Склад");
	КонецЕсли;
	
	СтруктураПолей.Вставить("НомерСтроки"                        , "НомерСтроки");
	СтруктураПолей.Вставить("КатегорияВыработки"         , "Номенклатура.КатегорияВыработки");
	
	Если СтруктураДопПолей<>Неопределено Тогда
		Для Каждого ДопПоле Из СтруктураДопПолей Цикл
			СтруктураПолей.Вставить(ДопПоле.Ключ , ДопПоле.Значение);
		КонецЦикла;
	КонецЕсли;  
	
	ТаблицаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТЧ, СтруктураПолей).Выгрузить();
	
	Если ТаблицаПоТоварам.Колонки.Найти("Склад") = Неопределено Тогда
		ТаблицаПоТоварам.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	Если ИмяТЧ="Товары" И МетаданныеДокумента.Реквизиты.Найти("Склад") <> Неопределено Тогда
		Для Каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.Склад) Тогда
				СтрокаТовары.Склад = ДокументОбъект.Склад;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к записи движений.
//
// Параметры:
//  Объект	 - ДокументОбъект	 - наборы записей которого нудно подготовить
//  ЭтоНовый - Булево			 - признак нового документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	
	ЗаписываемыеРегистры = Новый Массив;
	ЗаписываемыеРегистры.Добавить("РегистрНакопления.ПартииТоваровНаСкладах");
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл
		НаборЗаписей.Очистить();
		Если ЗаписываемыеРегистры.Найти(НаборЗаписей.Метаданные().ПолноеИмя()) <> Неопределено Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает ЛОЖЬ, если для данной строки проверка данного реквизита не требуется.
//  Если проверка должна пройти в обычном режиме, возвращается значение ИСТИНА
//
// Параметры:
//  ИмяРеквизита		 - Строка			 - имя проверяемого реквизита
//  СтрокаТаблицы		 - СтрокаТаблицыЗначений - строка таблицы номенклатуры
//  МетаданныеРеквизиты	 - Метаданные			 - метаданные реквизитов.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ПроверкаТребуется(ИмяРеквизита, СтрокаТаблицы, МетаданныеРеквизиты)
	
	ТребуетсяПроверка = Истина;
	
	Если ИмяРеквизита = "ХарактеристикаНоменклатуры" Тогда
		
		Если Не УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗапретНезаполненияХарактеристик") Или
			(МетаданныеРеквизиты.Найти("Номенклатура")<>Неопределено И
			 Не СтрокаТаблицы.Номенклатура.ВестиУчетПоХарактеристикам)
		Тогда
			ТребуетсяПроверка = Ложь;	
		КонецЕсли;
		
	//ИначеЕсли ИмяРеквизита = "Сертификат" Тогда
	//	
	//	Если МетаданныеРеквизиты.Найти("ВидОплаты") <> Неопределено Тогда
	//	КонецЕсли;
	//			
	КонецЕсли;                         
	
	Возврат ТребуетсяПроверка;
	                                             
КонецФункции

#КонецОбласти

