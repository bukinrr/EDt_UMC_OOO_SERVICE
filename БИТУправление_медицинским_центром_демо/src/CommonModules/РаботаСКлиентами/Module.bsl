#Область ПрограммныйИнтерфейс

#Область РодственныеСвязиКлиентов

// Если для родственника есть соответствующее ответное родство, возвращает его.
//
// Параметры:
//  ТипСвязи		 - СправочникСсылка.СтепениРодства		 - Исходный тип родственной связи.
//  ПолРодственника	 - ПеречислениеСсылка.ПолФизическихЛиц	 - пол.
// 
// Возвращаемое значение:
//   СправочникСсылка.СтепениРодства.
//
Функция ПолучитьОтветнуюРодственнуюСвязь(ТипСвязи, ПолРодственника) Экспорт
	
	Возврат Справочники.СтепениРодства.ПолучитьОтветнуюРодственнуюСвязь(ТипСвязи, ПолРодственника);
	
КонецФункции

// Процедура - Удалить обратную родственную связь
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - Клиент, у которого удаляем связь.
//  Клиент2	 - СправочникСсылка.Клиенты	 - Клиент, связь с которым удаляем.
//
Процедура УдалитьРодственнуюСвязь(Клиент, Клиент2) Экспорт
	
	Справочники.СтепениРодства.УдалитьРодственнуюСвязь(Клиент, Клиент2);
	
КонецПроцедуры

// Процедура - Поиск клиентов по ФИО и дополнительным данным
Функция НайтиПоФИОИДатеРождения(ФИО, ДатаРождения, СНИЛС = Неопределено) Экспорт
	
	Если ДатаРождения <> Неопределено И ТипЗнч(ДатаРождения) = Тип("Строка") Тогда
		
		ДатаРождения = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(ДатаРождения);
		
	КонецЕсли;
	
	МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ФИО," ");
	
	Если МассивФИО.Количество() = 3 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Клиенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	Клиенты.Фамилия = &Фамилия
		               |	И Клиенты.Имя = &Имя
		               |	И Клиенты.Отчество = &Отчество
		               |	И (Клиенты.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ Клиенты.ДатаРождения = &ДатаРождения
					   |			ИЛИ &ДатаРождения = ДАТАВРЕМЯ(1, 1, 1))
		               |	И (Клиенты.СНИЛС = &СНИЛС
		               |			ИЛИ &СНИЛС = НЕОПРЕДЕЛЕНО)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Клиенты.ДатаРождения УБЫВ";
		
		Запрос.УстановитьПараметр("Фамилия", МассивФИО[0]);
		Запрос.УстановитьПараметр("Имя", МассивФИО[1]);
		Запрос.УстановитьПараметр("Отчество", МассивФИО[2]);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
		Запрос.УстановитьПараметр("СНИЛС", СНИЛС);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Клиенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	Клиенты.Наименование = &Наименование
		               |	И (Клиенты.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ Клиенты.ДатаРождения = &ДатаРождения
					   |			ИЛИ &ДатаРождения = ДАТАВРЕМЯ(1, 1, 1))
		               |	И (Клиенты.СНИЛС = &СНИЛС
		               |			ИЛИ &СНИЛС = НЕОПРЕДЕЛЕНО)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Клиенты.ДатаРождения УБЫВ";
		
		Запрос.УстановитьПараметр("Наименование", ФИО);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
		Запрос.УстановитьПараметр("СНИЛС", СНИЛС);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() < 2 И Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;		
		
	КонецЕсли;
		
	Возврат Справочники.Клиенты.ПустаяСсылка();
	
КонецФункции

// Возвращает клиента или его законного представителя, если указан.
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиент - клиент
// 
// Возвращаемое значение:
//  СправочникСсылка.Клиент, Строка - клиент или его законный представитель (если есть).
//
Функция КлиентИлиЕгоЗаконныйПредставитель(Клиент) Экспорт
	
	Результат = Клиент;
	
	Если ЗначениеЗаполнено(Клиент.ЗаконныйПредставитель) Тогда
		Возврат Клиент.ЗаконныйПредставитель;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Поиск клиента по структуре реквизитов
//
// Параметры:
//  СтруктураПоиска - Структура - Обязательный. Содержит поля:
//   СНИЛС			- Строка - Необязательный.
//   Фамилия		- Строка - Необязательный.
//   Имя			- Строка - Необязательный.
//   Отчество		- Строка - Необязательный.
//   ДатаРождения	- Дата	 - Необязательный. 
// 
// Возвращаемое значение:
//  СправочникСсылка.Клиенты, Неопределено - найденный клиент.
//
Функция НайтиКлиента(СтруктураПоиска) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Клиенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты";
	
	// 1) По СНИЛС
	Если СтруктураПоиска.Свойство("СНИЛС") И ЗначениеЗаполнено(СтруктураПоиска.СНИЛС) Тогда
		
		Запрос = Новый Запрос;
		СНИЛС = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СтруктураПоиска.СНИЛС);
		МассивЦифрСНИЛС = Новый Массив;
		Для Счетчик = 1 По СтрДлина(СНИЛС) Цикл
			МассивЦифрСНИЛС.Добавить("[" + Сред(СНИЛС, Счетчик, 1) + "]");
		КонецЦикла;
		Запрос.Текст = ТекстЗапроса + " ГДЕ Клиенты.СНИЛС ПОДОБНО """ + СтрСоединить(МассивЦифрСНИЛС, "%") + """";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	// 2) По ФИО+дата
	Запрос = Новый Запрос;
	
	МассивРеквизитовПоиска = Новый Массив;
	МассивРеквизитовПоиска.Добавить("Фамилия");
	МассивРеквизитовПоиска.Добавить("Имя");
	МассивРеквизитовПоиска.Добавить("Отчество");
	МассивРеквизитовПоиска.Добавить("ДатаРождения");
	
	МассивНезаполненныхРеквизитов = Новый Массив;
	
	ПоискПоФИОИДатеВозможен = Истина;
	
	Для Каждого РеквизитПоиска Из МассивРеквизитовПоиска Цикл
		Если Не (СтруктураПоиска.Свойство(РеквизитПоиска) И ЗначениеЗаполнено(СтруктураПоиска[РеквизитПоиска])) Тогда
			ПоискПоФИОИДатеВозможен = Ложь;
			МассивНезаполненныхРеквизитов.Добавить(РеквизитПоиска);
		Иначе
			Запрос.УстановитьПараметр(РеквизитПоиска, СтруктураПоиска[РеквизитПоиска]);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоискПоФИОИДатеВозможен Тогда
		Запрос.Текст = ТекстЗапроса +
		"
		|ГДЕ
		|	Клиенты.Фамилия = &Фамилия
		|	И Клиенты.Имя = &Имя
		|	И Клиенты.Отчество = &Отчество
		|	И Клиенты.ДатаРождения = &ДатаРождения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	// 3) По любым 3-м заполненным реквизитам
	Для Каждого НезаполненныйРеквизит Из МассивНезаполненныхРеквизитов Цикл
		МассивРеквизитовПоиска.Удалить(МассивРеквизитовПоиска.Найти(НезаполненныйРеквизит));
	КонецЦикла;
	
	Если МассивРеквизитовПоиска.Количество() < 3 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого НаборРеквизитов Из ОбщегоНазначенияБИТКлиентСервер.ПолучитьСочетанияЭлементовМассива(МассивРеквизитовПоиска, 3) Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		МассивУсловий = Новый Массив;
		Для Каждого РеквизитПоиска Из МассивРеквизитовПоиска Цикл
			Запрос.УстановитьПараметр(РеквизитПоиска, СтруктураПоиска[РеквизитПоиска]);
			МассивУсловий.Добавить("Клиенты." + РеквизитПоиска + " = &" + РеквизитПоиска);
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ " + СтрСоединить(МассивУсловий, " И ");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Юридический или, при отсутствии, Фактический адрес клиента.
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиент - клиент
// 
// Возвращаемое значение:
//  Строка - представление адреса
//
Функция АдресКлиентаДляДокументов(Клиент) Экспорт
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЮридический);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресФактический);
	
	// Метод уже реализует приоритет адреса прописки над фактическим.
	Адрес = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент, Перечисления.ТипыКонтактнойИнформации.Адрес, ВидыКИ);
	Возврат Строка(Адрес);
	
КонецФункции

// Филиал, который был в последний раз посещен клиентом.
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиент - клиент
// 
// Возвращаемое значение:
//  СправочникСсылка.Филиал - филиал.
//
Функция ФилиалПоследнегоПосещения(Клиент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Филиал КАК Филиал
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Клиент = &Клиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продажи.Период УБЫВ"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Филиал;
	Иначе
		Возврат Справочники.Филиалы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Ближайший день рождения клиента (прошедший или будущий).
//
// Параметры:
//  КлиентДатаРождения	 - Дата, СправочникСсылка.Клиенты - клиент или его дата рождения, если уже получена из БД.
//  ДатаОтчета			 - Дата - дата отсчета до дня рождения
// 
// Возвращаемое значение:
//  Дата - ближайший день рождения клиента (прошедший или будущий).
//
Функция БлижайшийДеньРожденияКлиента(КлиентДатаРождения = Неопределено, ДатаОтчета = Неопределено, ТолькоБудущий = Ложь) Экспорт 
	
	ДатаРождения = ?(ТипЗнч(КлиентДатаРождения) = Тип("Дата"), КлиентДатаРождения, КлиентДатаРождения.ДатаРождения);
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	ГодРождения = Год(ДатаРождения);
	ГодТекущий	= Год(ТекущаяДата());
	
	ДатаРожденияВЭтомГоду = ДобавитьМесяц(ДатаРождения, 12 * (ГодТекущий - ГодРождения));
	
	ВЭтомГодуЕщеНеБыло = ДатаРожденияВЭтомГоду > ТекущаяДата();
	
	Если ТолькоБудущий Тогда
		Если ВЭтомГодуЕщеНеБыло Тогда
			Возврат ДатаРожденияВЭтомГоду;
		Иначе
			ДатаРожденияВСледующемГоду = ДобавитьМесяц(ДатаРождения, 12 * (ГодТекущий + 1 - ГодРождения));
			Возврат ДатаРожденияВСледующемГоду;
		КонецЕсли;
	Иначе
		// Смотрим, что ближе, прошедший ДР или будущий.
		
		Если ВЭтомГодуЕщеНеБыло Тогда
			Попытка
				ДатаРожденияВПрошломГоду = ДобавитьМесяц(ДатаРождения, 12 * (ГодТекущий - 1 - ГодРождения));
			Исключение
				Возврат Дата(1,1,1);
			КонецПопытки;
			
			Если ДатаРожденияВПрошломГоду < ДатаРождения Тогда
				// Младенец
				Возврат ДатаРожденияВЭтомГоду;
			Иначе
				ПрошлоПослеДР = НачалоДня(ТекущаяДата()) - ДатаРожденияВПрошломГоду;
				ОсталосьДоДР = ДатаРожденияВЭтомГоду - НачалоДня(ТекущаяДата());
				
				Возврат ?(ПрошлоПослеДР < ОсталосьДоДР, ДатаРожденияВПрошломГоду, ДатаРожденияВЭтомГоду);
			КонецЕсли;
		Иначе
			ДатаРожденияВСледующемГоду = ДобавитьМесяц(ДатаРождения, 12 * (ГодТекущий + 1 - ГодРождения));
			
			ПрошлоПослеДР = НачалоДня(ТекущаяДата()) - ДатаРожденияВЭтомГоду;
			ОсталосьДоДР = ДатаРожденияВСледующемГоду - НачалоДня(ТекущаяДата());
			
			Возврат ?(ПрошлоПослеДР < ОсталосьДоДР, ДатаРожденияВЭтомГоду, ДатаРожденияВСледующемГоду);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Клиент является совершеннолетним
//
// Параметры:
//  КлиентДатаРождения	 - Дата, Строка	 - дата рождения клиента датой или строкой
//  ДатаДокумента		 - Дата			 - дата документа для определения факта совершеннолетия на дату документа. Если не заполнено, то подставляется текущая
// 
// Возвращаемое значение:
//  Булево - Истина если пациент совершеннолетний, Ложь если нет.
//
Функция КлиентЯвляетсяСовершеннолетним(КлиентДатаРождения, ДатаДокумента = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(Дата(КлиентДатаРождения), Дата(ДатаДокумента)) > 18;
	
КонецФункции

#КонецОбласти