#Область ПрограммныйИнтерфейс

Функция ПолучитьОГРНМедОрганизацииДляОбменаСФСС(Филиал = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		ФилиалДокумента = Филиал;
	Иначе
		ФилиалДокумента = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	КонецЕсли;
	
	Реквизиты = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(ФилиалДокумента);
	
	Возврат Реквизиты.ОГРН;
	
КонецФункции

Функция СформироватьДанныеДляПодписания(ПараметрыЗапроса, ТекстОшибки = "") Экспорт
	
	Попытка
		ПараметрыДляПодписания = Новый Структура;
		
		ПараметрыЗапроса.Вставить("УИДМЧД", РегистрыСведений.МашиночитаемыеДоверенности.ПолучитьУИДМЧД(ПараметрыЗапроса.ogrn)); 
	
		SoapСообщение = СформироватьSOAPСообщение(ПараметрыЗапроса);
				
		SoapСообщение = ПодписатьSoapСообщение(SoapСообщение, ПараметрыЗапроса);
		
		ПараметрыДляПодписания.Вставить("КонвертSOAP",SoapСообщение);
			
		ПараметрыXMLDSig = ПолучитьИЗаполнитьПараметрыXMLDSig(ПараметрыЗапроса.БлокДляПодписи.wsu_id);

		ПараметрыДляПодписания.Вставить("ПараметрыXMLDSig",ПараметрыXMLDSig);	
	Исключение
		Информация = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка запроса в ФСС'"),
	   		УровеньЖурналаРегистрации.Ошибка,,,
	   		ПодробноеПредставлениеОшибки(Информация));   
	   
	   ТекстОшибки = КраткоеПредставлениеОшибки(Информация);
	   
	   Возврат Неопределено;
	КонецПопытки; 
		
	Возврат ПараметрыДляПодписания;	
	
КонецФункции
 
Функция ПараметрыДляПодписанияДокумента(Документ, ИмяБлока, ДоступыеСертификаты = Неопределено) Экспорт
	
	ДоступыеСертификаты = ПолучитьДоступныеСертификатыПользователя(ПараметрыСеанса.ТекущийПользователь);
	
	ПараметрыДляПодписания = Новый Структура;
	
	ОГРН = ПолучитьОГРНМедОрганизацииДляОбменаСФСС(РаботаСДокументамиСервер.ФилиалДокумента(Документ)); 
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ogrn", ОГРН);
	ПараметрыЗапроса.Вставить("Документ", Документ);	
	ПодписываемыеБлоки = Новый Массив();
	ПараметрыЗапроса.Вставить("ПодписываемыеБлоки",ПодписываемыеБлоки);
	ПараметрыЗапроса.Вставить("Метод","PrParseFilelnlpuRequest");
	
	SoapСообщение = СформироватьSOAPСообщение(ПараметрыЗапроса);
	
	ДанныеПодписи = СформироватьДанныеПодписи(ИмяБлока, Документ);	
	ДокументDOM = РаботаСDOMКлиентСервер.DOMИзСтрокиXML(SoapСообщение);
	ДобавитьСтруктуруПодписи(ДокументDOM,ДанныеПодписи.soap_actor, ДанныеПодписи.wsu_id);
	ДобавитьТеги(ДокументDOM, ИмяБлока, ДанныеПодписи.wsu_id);
	Если СтрНайти(ИмяБлока, "Председатель") <> 0  Тогда
		wsu_id_врача = СтрЗаменить(ДанныеПодписи.wsu_id,"vk","doc");
		ИмяБлокаВрача = Лев(ИмяБлока, 7) + "Врач";
		СтрокаПодписиВрача = Документ.ЭлектронныеПодписиОбменаФСС.Найти(ИмяБлокаВрача,"ИмяСтроки");
		Если СтрокаПодписиВрача<>Неопределено И ЗначениеЗаполнено(СтрокаПодписиВрача.ИдентификаторПодписи) Тогда
			ДобавитьТеги(ДокументDOM, ИмяБлокаВрача, wsu_id_врача);	
		КонецЕсли; 		
	КонецЕсли; 
	SoapСообщение = РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(ДокументDOM);
	
	ПараметрыДляПодписания.Вставить("КонвертSOAP",SoapСообщение);
	
	ПараметрыXMLDSig = ПолучитьИЗаполнитьПараметрыXMLDSig(ДанныеПодписи.wsu_id);

	ПараметрыДляПодписания.Вставить("ПараметрыXMLDSig",ПараметрыXMLDSig);

	Возврат ПараметрыДляПодписания;
	
КонецФункции

Функция ОтправитьИОбработатьЗапрос(SoapСообщение, Параметры, РезервныйАдрес = Ложь, Адрес = Неопределено) Экспорт
	
	Попытка
		
		АдресСервера = ?(Адрес = Неопределено, ПолучитьАдресСервераФСС(Неопределено, РезервныйАдрес), Адрес);
		Ответ = ОтправитьПоHTTP(АдресСервера, SoapСообщение);
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния = 200 Тогда		
			Результат = ОбработатьОтвет(ТекстОтвета);
		ИначеЕсли Ответ.КодСостояния = 404 Тогда
			ТекстОшибки = 	"Сервис ФСС недоступен (ошибка 404 при попытке связаться с сервисом больничных листов).
							|Попробуйте повторить позже.
							|По статистике наблюдений, устранение сбоев на стороне ФСС занимает около 1 часа.";
			Результат = Новый Структура("ТекстОшибки", ТекстОшибки);
		Иначе 
			Результат = ОбработатьОшибкуОбмена(ТекстОтвета);
		КонецЕсли;
		Результат.Вставить("КодСостояния", Ответ.КодСостояния);
	Исключение
		Информация = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка запроса в ФСС'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Информация));   

		Результат = Новый Структура("ТекстОшибки, КодСостояния", КраткоеПредставлениеОшибки(Информация), -1);
		
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСертификатыКриптографииФСС() Экспорт
	
	СертификатРабочий = Документы.ЛистокНетрудоспособности.ПолучитьМакет("СертификатФССРабочий");
	СертификатТестовый = Документы.ЛистокНетрудоспособности.ПолучитьМакет("СертификатФССТестовый");
	
	УправлениеНастройкамиМедицинскогоУчета.УстановитьЗначениеПараметра("СертификатФССРабочий", Новый ХранилищеЗначения(СертификатРабочий));
	УправлениеНастройкамиМедицинскогоУчета.УстановитьЗначениеПараметра("СертификатФССТестовый", Новый ХранилищеЗначения(СертификатТестовый));
		
КонецПроцедуры

Функция ПолучитьДоступныеСертификатыПользователя(Пользователь)
	
	мДоступныхСертификатов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
		|	ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		мДоступныхСертификатов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат мДоступныхСертификатов;
	
КонецФункции

Функция ПолучитьСертификатыМО(Филиал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодписиМО.Сертификат КАК СертификатМО
		|ИЗ
		|	РегистрСведений.ПодписиМО КАК ПодписиМО
		|ГДЕ
		|	(ПодписиМО.Филиал = &Филиал ИЛИ ПодписиМО.Филиал.Организация = &Филиал)
		|	И НЕ ПодписиМО.Сертификат.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СертификатМО");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПостоянныеВеличины

Функция URIПространстваИменСервиса()
		
	Возврат "http://www.fss.ru/integration/types/eln/mo/v01";
	
КонецФункции

Функция НазваниеТипаПоЛокальномуИмени(ЛокальноеИмя)
	
	НазваниеТипа = Новый Структура;
	НазваниеТипа.Вставить("prParseFilelnlpuResponse", "prParseFilelnlpuResponse");
	НазваниеТипа.Вставить("getLNDataResponse", "getLNDataResponse");
	НазваниеТипа.Вставить("disableLnResponse", "disableLnResponse");
	НазваниеТипа.Вставить("getNewLNNumResponse", "getNewLNNumResponse");
	НазваниеТипа.Вставить("getNewLNNumRangeResponse", "getNewLNNumRangeResponse");
	НазваниеТипа.Вставить("getExistingLNNumRangeResponse", "getExistingLNNumRangeResponse");
	НазваниеТипа.Вставить("getLNListBySnilsResponse", "getLNListBySnilsResponse");
	НазваниеТипа.Вставить("getStatementResponse", "QuarantineStatementLpuType");
	НазваниеТипа.Вставить("getInfoStatementsResponse", "getInfoStatementsResponse");
	
	Если НазваниеТипа.Свойство(ЛокальноеИмя) Тогда
		Возврат НазваниеТипа[ЛокальноеИмя];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает выбранный адрес ФСС
//
// Параметры:
//  РабочийАдрес	 - Булево	 - Истина - Рабочий адрес, Ложь - резервный, Неопределено - Тестовый
// 
// Возвращаемое значение:
//  Строка - Адрес сервера фсс
//
Функция ПолучитьАдресСервераФСС(РабочийКонтур = Неопределено, РезервныйАдрес = Ложь) Экспорт
	
	Если РабочийКонтур = Неопределено Тогда
		РабочийКонтур = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("РабочийРежимОбменаСФСС");
	КонецЕсли;
	
	Если РабочийКонтур Тогда
		Если РезервныйАдрес Тогда
			// Рабочий контур. Резервный адрес.
			Возврат "https://eln-rez.fss.ru/WSLnCryptoV20/FileOperationsLnService?WSDL";
		Иначе
			// Рабочий контур. Основной адрес.
			Возврат "https://eln.fss.ru/WSLnCryptoV20/FileOperationsLnService?WSDL";	
		КонецЕсли;
	Иначе
		// Тестовый контур
		Возврат 	"https://eln-test.fss.ru/WSLnCryptoV20/FileOperationsLnService?WSDL";	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ОбработатьОтвет(ТекстОтвета)
	
	WSОпределение = ОбменФССПовтИсп.ВнутренняяWSОпределения(ПолучитьАдресСервераФСС());

	ФабрикаXDTOTemp = WSОпределение.ФабрикаXDTO;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстОтвета);
		
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	СертификатШифрования = ДокументDOM.ПолучитьЭлементыПоИмени(ПространстваИмен.soap(), "X509Certificate")[0].ТекстовоеСодержимое;	
	ChiperData = ДокументDOM.ПолучитьЭлементыПоИмени(ПространстваИмен.soap(), "CipherData");
	СимметричныйКлюч = ChiperData[0].ТекстовоеСодержимое;
	ЗашифрованныеДанные = ChiperData[1].ТекстовоеСодержимое;

	СертификатШифрованияВBase64 = СтрЗаменить(СертификатШифрования, Символы.ВК, "");
	СертификатШифрованияВBase64 = СтрЗаменить(СертификатШифрованияВBase64, Символы.ПС, "");
	
	СимметричныйКлючВBase64 = СтрЗаменить(СимметричныйКлюч, Символы.ВК, "");
	СимметричныйКлючВBase64 = СтрЗаменить(СимметричныйКлючВBase64, Символы.ПС, "");
	
	ЗашифрованныеДанныеBase64 = СтрЗаменить(ЗашифрованныеДанные, Символы.ВК, "");
	ЗашифрованныеДанныеBase64 = СтрЗаменить(ЗашифрованныеДанныеBase64, Символы.ПС, "");
	
	Результат = Новый Структура();
	
	Результат.Вставить("СертификатШифрованияВBase64", СертификатШифрованияВBase64);
	Результат.Вставить("СимметричныйКлючВBase64", СимметричныйКлючВBase64);
	Результат.Вставить("ЗашифрованныеДанныеBase64", ЗашифрованныеДанныеBase64);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкуОбмена(ТекстОтвета)
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстОтвета);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
		ЧтениеXML.Закрыть();
		faultcodeDOM = ДокументDOM.ПолучитьЭлементыПоИмени(ПространстваИмен.soap(), "faultstring");
		Если faultcodeDOM.Количество() > 0 Тогда
			ТекстОшибки = faultcodeDOM[0].ТекстовоеСодержимое;	
		Иначе
			ТекстОшибки = "Произошла ошибка обмена данными с сервером ФСС";
		КонецЕсли; 
		
	Исключение
		ТекстОшибки = ТекстОтвета;		
	КонецПопытки;
	
	Результат = Новый Структура();
	
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьРасшифрованныйXML(ТекстОтвета, Параметры, ТекстОшибки) Экспорт
	
	WSОпределение = ОбменФССПовтИсп.ВнутренняяWSОпределения(ПолучитьАдресСервераФСС());

	ФабрикаXDTOTemp = WSОпределение.ФабрикаXDTO;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстОтвета);

	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Сертификат = ДокументDOM.ПолучитьЭлементыПоИмени(ПространстваИмен.soap(), "X509Certificate")[0].ТекстовоеСодержимое;
	
	
	ЭлементыBody = ДокументDOM.ПолучитьЭлементыПоИмени(ПространстваИмен.soap(), "Body");
	Если ЭлементыBody.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйДочернийУBody = ЭлементыBody[0].ПервыйДочерний;
	Если Неопределено = ПервыйДочернийУBody Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПространствоИмен = ПервыйДочернийУBody.URIПространстваИмен;
	ЛокальноеИмя = ПервыйДочернийУBody.ЛокальноеИмя;
	
	URIПространстваИмен = URIПространстваИменСервиса();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ПервыйДочернийУBody, ЗаписьXML);
	
	ПервыйДочернийУBodyСтрокой = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПервыйДочернийУBodyСтрокой);
	
	ИмяТипа = НазваниеТипаПоЛокальномуИмени(ЛокальноеИмя);
	Если ИмяТипа = Неопределено Тогда
		ИмяТипа = ЛокальноеИмя;
	КонецЕсли;
	
	// Получаем собственно результат ответа сервера.
	ОбъектXDTO = ФабрикаXDTOTemp.ПрочитатьXML(
		ЧтениеXML, ФабрикаXDTOTemp.Тип(URIПространстваИмен, ИмяТипа)
	);
	
	ЧтениеXML.Закрыть();
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПослеОтправки(ОбъектXDTO, Параметры, ТекстОшибки)	
	
КонецФункции
 
Процедура СоздатьЗаписьПулаНомеров(Номера, ОГРН)
	
	МенеджерЗаписи = РегистрыСведений.ПулыНомеровЭЛН.СоздатьМенеджерЗаписи();
	
	Если ТипЗнч(Номера) = Тип("Строка") Тогда
		МенеджерЗаписи.НачалоДиапазона = Номера;
		МенеджерЗаписи.ОкончаниеДиапазона = Номера;
		МенеджерЗаписи.ТекущийНомер = Номера;
	Иначе
		МенеджерЗаписи.НачалоДиапазона = Номера[0];
		МенеджерЗаписи.ОкончаниеДиапазона = Номера[Номера.Количество()-1];
		МенеджерЗаписи.ТекущийНомер = Номера[0];
	КонецЕсли;
	
	МенеджерЗаписи.ДатаПолученияТекущегоНомера = ТекущаяДата();
	МенеджерЗаписи.ОГРН = Формат(ОГРН, "ЧГ=0");
	МенеджерЗаписи.РабочийКонтур = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("РабочийРежимОбменаСФСС");
	
	МенеджерЗаписи.Записать();
 		
КонецПроцедуры
 
Функция ПолучитьXMLИзXDTO(ОбъектXDTO, WSОпределение)
			
	ИмяЭлемента = ОбъектXDTO.Тип().Имя;
	ИмяЭлемента = НРег(Лев(ИмяЭлемента,1)) + Прав(ИмяЭлемента,СтрДлина(ИмяЭлемента) - 1);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ПространствоИмен = ОбъектXDTO.Тип().URIПространстваИмен;;
	WSОпределение.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяЭлемента, ПространствоИмен);
	СтрокаXML = ЗаписьXML.Закрыть();
		
	Возврат СтрокаXML;
	
КонецФункции

// Для переопределения расширениями конфигурации.
Функция СохранятьЛогиHTTPЗапросовВЖурналРегистрации()
	
	Возврат Ложь;
	// Возврат СтрНайти(ПараметрыСеанса.ПараметрыКлиентаНаСервере, "/debug_fss") <> 0;
	
КонецФункции

Функция ОтправитьПоHTTP(Адрес, ТекстЗапроса)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	Хост				= СтруктураURI.Хост;
	АдресРесурса		= СтруктураURI.ПутьНаСервере;
	ИспользоватьHttps	= ?(СтруктураURI.Схема = "https", Истина, Ложь);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/soap+xml;charset=UTF-8");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, "UTF-8");
	
	Протокол = ?(ИспользоватьHttps, "HTTPS", "HTTP"); 
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Протокол);
	
	Если ИспользоватьHttps Тогда
		HTTPСоединение = Новый HTTPСоединение(Хост,,,,ИнтернетПрокси,, Новый ЗащищенноеСоединениеOpenSSL);
	Иначе
		HTTPСоединение = Новый HTTPСоединение(Хост,,,,ИнтернетПрокси);
	КонецЕсли;
	
	Если СохранятьЛогиHTTPЗапросовВЖурналРегистрации() Тогда
		ЗаписьЖурналаРегистрации("ФСС: ответ сервиса ЭЛН",УровеньЖурналаРегистрации.Информация,,,ТекстЗапроса);
	КонецЕсли;

	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если СохранятьЛогиHTTPЗапросовВЖурналРегистрации() Тогда
		ЗаписьЖурналаРегистрации("ФСС: ответ сервиса ЭЛН",УровеньЖурналаРегистрации.Информация,,,HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция ПослеОтправки(Результат, ПараметрыЗапроса, ТекстОшибки)
	
	ИмяЗапроса = ПараметрыЗапроса.Метод;
	Статус = Неопределено;
	СтатусФСС = Неопределено;
	
	// Запрос для отправки сведений ЭЛН (новых данных) в Фонд 
	Если ИмяЗапроса = "PrParseFilelnlpuRequest" Тогда
		
		НомерОтвет = Новый Соответствие;
		Если Результат <> Неопределено Тогда
			Если Результат.Свойства().Получить("info") <> Неопределено Тогда
				СписокОтветов = Результат.info.infoRowset.infoRow;
				Если ТипЗнч(СписокОтветов) = Тип("ОбъектXDTO") Тогда
					НомерОтвет.Вставить(СписокОтветов.lnCode,СписокОтветов);
				Иначе
					Для Каждого ОбъектОтвет Из СписокОтветов Цикл
						НомерОтвет.Вставить(ОбъектОтвет.lnCode,ОбъектОтвет);	
					КонецЦикла; 
				КонецЕсли;	
			КонецЕсли; 	 	
		КонецЕсли; 
		
		Документ = ПараметрыЗапроса.Документ;
		
		// Заносим результат в регистр сведений СтатусыОбменаФСС
		Если Результат = Неопределено Тогда
			Операция = 1; 
		Иначе 
			НомерЛиста = Формат(Документ.Номер, "ЧГ=");
			ДанныеЛиста = НомерОтвет.Получить(НомерЛиста);
			Если ДанныеЛиста = Неопределено Тогда
				ТекстОшибки = нСтр("ru='Ошибка формирования данных для отправки. Проверьте документ на заполнение нужных полей.'", "ru");
			ИначеЕсли ДанныеЛиста.status = "0" Тогда 
				Операция = 1;
				ТекстОшибки = СформироватьТекстОшибкиОтрпавкиЭЛН(Результат, НомерЛиста, Ложь);
				Статус = Перечисления.СтатусыФСС.НеПринятФСС;	
			Иначе	
				ТекстОшибки = "";
				Операция = 0;	
				// Хэш
				ДокументОбъект = Документ.ПолучитьОбъект();
				ДокументОбъект.ХэшЭЛН = ДанныеЛиста.lnHash;
				Для Каждого СтрокаПодписи Из ДокументОбъект.ЭлектронныеПодписиОбменаФСС Цикл
					СтрокаПодписи.ПодписьЗарегистрирована = Истина;	
				КонецЦикла; 
				Для Каждого СтрокаУхода Из ДокументОбъект.ДанныеПоУходуЗаРодственниками Цикл
					СтрокаУхода.СтрокаЗарегистрирована = Истина;	
				КонецЦикла;
				ДокументОбъект.Записать();
				// Статус
				Индекс = Число(ДанныеЛиста.lnState)/10-1;
				СтатусФСС = Перечисления.СтатусыФСС.Получить(Индекс);				
				Статус = Перечисления.СтатусыФСС.ОтправленУспешно;	
			КонецЕсли; 				
		КонецЕсли;
		
		ЗанестиИнформациюОбОбмене(Документ,Операция,Статус,СтатусФСС,ТекстОшибки);
		
	// Запрос для прекращения действия ЭЛН. 	
	ИначеЕсли ИмяЗапроса = "DisableLnRequest" Тогда
		
		Документ = ПараметрыЗапроса.Документ; 
		
		Если Результат <> Неопределено И Результат.mess = "OK" Тогда
			Операция = 0;
			СтатусФСС = Перечисления.СтатусыФСС.ДействияПрекращены;
			Статус = Перечисления.СтатусыФСС.Аннулирован;
		Иначе
			Операция = 3;
			Если Результат <> Неопределено Тогда
				Номер = Формат(Документ.Номер, "ЧГ=");
				ТекстОшибки = СформироватьТекстОшибкиОтрпавкиЭЛН(Результат, Номер);
				Статус = Перечисления.СтатусыФСС.НеПринятФСС;
			КонецЕсли;
		КонецЕсли;
		
		ЗанестиИнформациюОбОбмене(Документ,Операция,Статус,СтатусФСС,ТекстОшибки);
		
	// Запрос для получения данных актуального ЭЛН по номеру и СНИЛС застрахованного.
	ИначеЕсли ИмяЗапроса = "GetLNDataRequest" Тогда 
		
		Документ = ПараметрыЗапроса.Документ;
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Если Результат = Неопределено Тогда
				Возврат Ложь;	
			ИначеЕсли Результат.status = "0" Тогда 
				ТекстОшибки = Результат.mess;
				Возврат Ложь;
			Иначе
				НомерЛиста = Число(ПараметрыЗапроса.lnCode);
				Документ = Документы.ЛистокНетрудоспособности.НайтиПоНомеру(НомерЛиста);
				Если Не ЗначениеЗаполнено(Документ) Тогда
					Документ = Документы.ЛистокНетрудоспособности.СоздатьДокумент();
					Документ.Дата = ТекущаяДата();
					Документ.ЭлектронныйБольничный = Истина;
					Документ.Номер = НомерЛиста;
					Документ.Записать();
					Документ = Документ.Ссылка;
				КонецЕсли; 	
			КонецЕсли;
		КонецЕсли;
			
		Если Результат <> Неопределено И Результат.status = "1" Тогда
			ПерезаполнитьДокумент(Документ, Результат);
			СтатусФСС = КонвертироватьЗначение(Результат.data.outRowset.responseRow.lnState, "lnState"); 	
			Операция = 0;
			Статус = Перечисления.СтатусыФСС.Обновлен;
		Иначе 
			Операция = 2;		
			Если Результат <> Неопределено Тогда
				ТекстОшибки = Результат.mess;	
			КонецЕсли; 	
		КонецЕсли; 
		ЗанестиИнформациюОбОбмене(Документ,Операция,Статус,СтатусФСС,ТекстОшибки);
		
	// Запрос для запроса пула новых номеров ЭЛН.
	ИначеЕсли ИмяЗапроса = "GetNewLNNumRangeRequest" Тогда
		
		Если Результат <> Неопределено И Результат.status = "1" Тогда
			СписокНомеров = Результат.Data.lnCode;
			СоздатьЗаписьПулаНомеров(СписокНомеров, ПараметрыЗапроса.ogrn);	
		Иначе
			ТекстОшибки = Результат.mess;
		КонецЕсли;
		
	// Запрос для получения списка ЭЛН по СНИЛС пациента за последний незакрытый страховой случай.
	ИначеЕсли ИмяЗапроса = "GetLNListBySnilsRequest" Тогда
		
		Если Результат <> Неопределено И Результат.Свойства().Получить("Data") <> Неопределено Тогда
			Результат = Результат.Data.outRowsetLNListbySnils.rowLNbySnils;
			МассивСтрок = Новый Массив;
			Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда
				ДобавитьСтрокуРезультатаПоискаЭЛНвФСС(МассивСтрок, Результат, ПараметрыЗапроса.snils);
			Иначе
				Для Каждого СтрокаЭЛН Из Результат Цикл
					ДобавитьСтрокуРезультатаПоискаЭЛНвФСС(МассивСтрок, СтрокаЭЛН, ПараметрыЗапроса.snils); 
				КонецЦикла; 
			КонецЕсли; 
			Возврат МассивСтрок;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли; 	
	
	Возврат Результат <> Неопределено;
	
КонецФункции

Процедура ДобавитьСтрокуРезультатаПоискаЭЛНвФСС(Массив, Данные, СНИЛС)
	
	НоваяСтрока = Новый Структура("Номер,ОГРН,Дата,Статус,СНИЛС");
	
	НоваяСтрока.Номер = Данные.lnCode; 
	НоваяСтрока.ОГРН = Данные.lpuOgrn;		
	СтроковаяДата = СтрЗаменить(Данные.lnDate , "-","");
	СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
	НоваяСтрока.Дата = Дата(СтроковаяДата);	
	Индекс = Число(Данные.lnState)/10-1;
	НоваяСтрока.Статус = Перечисления.СтатусыФСС.Получить(Индекс);
	НоваяСтрока.СНИЛС = СНИЛС;
	
	Массив.Добавить(НоваяСтрока);
	
КонецПроцедуры

Процедура ЗанестиИнформациюОбОбмене(Документ, Операция, Статус, СтатусФСС, ТекстОшибки)
	Запись = РегистрыСведений.СтатусыОбменаФСС.СоздатьМенеджерЗаписи();
	Запись.Объект = Документ;
	Запись.Прочитать();
	Запись.Объект = Документ;	
	Запись.Операция = Операция;
	Если Статус <> Неопределено Тогда
		Запись.Статус = Статус;	
	КонецЕсли; 
	Если СтатусФСС <> Неопределено Тогда
		Запись.СтатусФСС = СтатусФСС;	
	КонецЕсли;					
	Запись.Дата = ТекущаяДата();
	Запись.ТекстОшибки = ТекстОшибки; 
	Запись.Записать();
	
	Запись.Записать();
КонецПроцедуры

#Область СообщениеSOAP

Функция СформироватьSOAPСообщение(Параметры) Экспорт
	
	SoapСообщение = ПолучитьШаблонSOAPСообщения();
	SoapТело = ПолучитьSoapТело(Параметры.Метод, Параметры);
	
	SoapСообщение = СтрШаблон(SoapСообщение, SoapТело);
	
	Возврат SoapСообщение; 
		
КонецФункции

// Получение ЭЛН

Процедура ПерезаполнитьДокумент(ДокументСсылка, Знач ДанныеЭЛН)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	ПустойДокумент = Документы.ЛистокНетрудоспособности.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Объект,ПустойДокумент,,"Клиент, МедицинскаяКарта");
	
	ДанныеЭЛН = ДанныеЭЛН.data.outRowset.responseRow;
	СоответствиеУзловПолейДокумента = СоответствиеУзловПолейДокумента();
	
	// Удаляем не отправленные подписи
	ПодписиНаУдаление = Новый Массив();
	Для Каждого СтрокаПодписи Из Объект.ЭлектронныеПодписиОбменаФСС Цикл
		Если Не СтрокаПодписи.ПодписьЗарегистрирована Тогда
			ПодписиНаУдаление.Добавить(СтрокаПодписи);	
		КонецЕсли; 		
	КонецЦикла;
	Для Каждого ПодписьНаУдаление Из ПодписиНаУдаление Цикл
		Объект.ЭлектронныеПодписиОбменаФСС.Удалить(ПодписьНаУдаление);	
	КонецЦикла; 
	
	Объект.ДанныеПоУходуЗаРодственниками.Очистить();
	Объект.ЭлектронныйБольничный = Истина;
	Отчество = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЭЛН, "patronymic"), ДанныеЭЛН.patronymic, ""); 
	ФИО = ДанныеЭЛН.surname + " " + ДанныеЭЛН.name + " " + Отчество;
	ДатаРождения = XMLЗначение(Тип("Дата"), ДанныеЭЛН.birthday);
	
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		Объект.Клиент = РаботаСКлиентами.НайтиПоФИОИДатеРождения(ФИО, ДатаРождения, ДанныеЭЛН.snils);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		Объект.Клиент = РаботаСКлиентами.НайтиПоФИОИДатеРождения(ФИО, ДатаРождения);
	КонецЕсли;
	
	Для Каждого СвойствоЭЛН Из ДанныеЭЛН.Свойства() Цикл
		Значение = ДанныеЭЛН.Получить(СвойствоЭЛН);	
		
		Если Значение = Неопределено Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если СвойствоЭЛН.ЛокальноеИмя = "hospitalBreach" Тогда
			Объект.ДатаНарушенияРежима = КонвертироватьЗначение(Значение.hospitalBreachDt);
			Объект.НарушениеРежима = Справочники.ТипыНарушенийРежима.НайтиПоКоду(Значение.hospitalBreachCode);
			ЕстьСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Найти("Нарушение", "ИмяСтроки") <> Неопределено;
			Если Не ЕстьСтрока Тогда
				НоваяСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Добавить();
				НоваяСтрока.ИмяСтроки = "Нарушение";
				НоваяСтрока.ПодписьЗарегистрирована = Истина;
			КонецЕсли;
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "lnResult" Тогда
			Если Значение.Свойства().Получить("returnDateLpu") <> Неопределено Тогда
				Объект.ДатаНачалаРаботы = КонвертироватьЗначение(Значение.returnDateLpu);	
			КонецЕсли; 
			Если Значение.Свойства().Получить("otherStateDt") <> Неопределено Тогда
				Объект.ДатаУстановленияСтатуса = КонвертироватьЗначение(Значение.otherStateDt);	
			КонецЕсли;
			Если Значение.Свойства().Получить("mseResult") <> Неопределено Тогда
				Объект.СтатусНетрудоспособного = Справочники.СтатусыНетрудоспособного.НайтиПоКоду(Значение.mseResult);	
			КонецЕсли;
			ЕстьСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Найти("Закрытие", "ИмяСтроки") <> Неопределено;
			Если Не ЕстьСтрока Тогда
				НоваяСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Добавить();
				НоваяСтрока.ИмяСтроки = "Закрытие";
				НоваяСтрока.ПодписьЗарегистрирована = Истина;
			КонецЕсли;	
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "treatPeriods" Тогда 
			treatFullPeriod = Значение.treatFullPeriod;
			Если ТипЗнч(treatFullPeriod) = Тип("ОбъектXDTO") Тогда
				ЗаполнитьЗаписьПериода(Объект, 1, treatFullPeriod);
			Иначе
				Сч = 1;
				Для Каждого ДанныеПериода Из treatFullPeriod Цикл
					Если Сч = 4 Тогда
						Прервать;
					КонецЕсли;
					ЗаполнитьЗаписьПериода(Объект, Сч, ДанныеПериода);
					Сч = Сч + 1;
				КонецЦикла; 
			КонецЕсли; 	
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "servData" Тогда 
			Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
				ЗаполнитьУход(Объект, Значение.servFullData);
			Иначе
				Для Каждого servFullData Из Значение Цикл
					ЗаполнитьУход(Объект, servFullData);
				КонецЦикла; 
			КонецЕсли;
			Объект.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.НайтиПоКоду("09");
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "primaryFlag" Тогда 
			Если Значение = "true" Тогда
				Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Первичный;
				Объект.Первичный = Истина;
			Иначе
				Объект.ВидЛистка = Перечисления.ВидыЛистковНетрудоспособности.Продолжение;
			КонецЕсли; 
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "reason1" Тогда 
			Объект.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.НайтиПоКоду(Значение);	
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "diagnos" Тогда  
			ДиагнозСсылка = Справочники.Диагнозы.НайтиПоРеквизиту("КодДиагноза", Значение);
			Если ДиагнозСсылка <> Справочники.Диагнозы.ПустаяСсылка() Тогда
				Объект.ДиагнозПоМКБ10 = ДиагнозСсылка;
			Иначе
				Объект.ДиагнозПоМКБ10 = Значение;
			КонецЕсли;
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "voucherOgrn" Тогда 
			Санаторий = Справочники.Санатории.НайтиПоРеквизиту("ОГРН", Значение);
			Объект.Санаторий = ?(ЗначениеЗаполнено(Санаторий), Санаторий, Значение);
		ИначеЕсли СвойствоЭЛН.ЛокальноеИмя = "lnState" Тогда 
			Продолжить;
		Иначе
			ИмяПоля = СвойствоЭЛН.ЛокальноеИмя;
			ПолеДокумента = СоответствиеУзловПолейДокумента.Получить(ИмяПоля);	
			Если ПолеДокумента <> Неопределено 
				И СтрРазделить(ПолеДокумента, ",", Ложь).Количество() = 1
			Тогда
				Значение = КонвертироватьЗначение(Значение, ИмяПоля);
				Объект[ПолеДокумента] = Значение;
			КонецЕсли; 	
		КонецЕсли; 		
	КонецЦикла;
	Объект.РабочийКонтур = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("РабочийРежимОбменаСФСС");	
	Объект.ОбновленИзФСС = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьЗаписьПериода(Объект, Номер, Данные)
	НомерЗаписи = "Запись" + Строка(Номер);
	
	// ПредседательВК
	Если Данные.Свойства().Получить("treatChairman") <> Неопределено Тогда
		ПредседательВК = Данные.treatChairman;
		Если ЗначениеЗаполнено(ПредседательВК) Тогда
			//Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ПредседательВК);
			Объект[НомерЗаписи + "ПредседательВК"] = ПредседательВК; 
			ЕстьСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Найти(НомерЗаписи + "Председатель", "ИмяСтроки") <> Неопределено;
			Если Не ЕстьСтрока Тогда
				НоваяСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Добавить();
				НоваяСтрока.ИмяСтроки = НомерЗаписи + "Председатель";
				НоваяСтрока.ПодписьЗарегистрирована = Истина;
			КонецЕсли; 
		КонецЕсли;	
	КонецЕсли; 
	 
	Данные = Данные.treatPeriod;
	
	// Врач
	Врач = Данные.treatDoctor;
	Если ЗначениеЗаполнено(Врач) Тогда
		//Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(Врач);
		Объект[НомерЗаписи + "Врач"] = Врач;
		Объект[НомерЗаписи + "ВрачДолжность"] = Данные.treatdoctorrole;
		ЕстьСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Найти(НомерЗаписи + "Врач", "ИмяСтроки") <> Неопределено;
		Если Не ЕстьСтрока Тогда
			НоваяСтрока = Объект.ЭлектронныеПодписиОбменаФСС.Добавить();
			НоваяСтрока.ИмяСтроки = НомерЗаписи + "Врач";
			НоваяСтрока.ПодписьЗарегистрирована = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Объект[НомерЗаписи + "ДатаНачала"] = КонвертироватьЗначение(Данные.treatDt1);
	Объект[НомерЗаписи + "ДатаОкончания"] = КонвертироватьЗначение(Данные.treatDt2);
	
КонецПроцедуры

Процедура ЗаполнитьУход(Объект, Данные)
	
	Если ТипЗнч(Данные) = Тип("ОбъектXDTO") Тогда	
		ЗаполнениеСтрокиДанныхУхода(Объект, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СписокXDTO") Тогда
		Для Каждого Эл Из Данные Цикл
			ЗаполнениеСтрокиДанныхУхода(Объект, Эл)	
		КонецЦикла;
	Иначе
		ВызватьИсключение "Неизвестная ошибка";
	КонецЕсли;
			 	
КонецПроцедуры

Процедура ЗаполнениеСтрокиДанныхУхода(Объект, Данные)

	СвойстваДанных = Данные.Свойства(); 
	НоваяСтрока = Объект.ДанныеПоУходуЗаРодственниками.Добавить();
	НоваяСтрока.СтепеньРодства = Справочники.СтепениРодства.НайтиПоРеквизиту("КодФСС", Данные.servRelationCode); 
	НоваяСтрока.ДатаНачалаУхода = КонвертироватьЗначение(Данные.servDt1);
	НоваяСтрока.ДатаОкончанияУхода = КонвертироватьЗначение(Данные.servDt2);
	НоваяСтрока.Фамилия = Данные.surname;
	НоваяСтрока.Имя = Данные.name;
	НоваяСтрока.ДатаРождения = КонвертироватьЗначение(Данные.birthday); 
	НоваяСтрока.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.НайтиПоКоду(Данные.reason1);
	
	Если СвойстваДанных.Получить("patronymic") <> Неопределено Тогда
		НоваяСтрока.Отчество = Данные.patronymic;	
	КонецЕсли; 
	
	Если СвойстваДанных.Получить("snils") <> Неопределено Тогда
		НоваяСтрока.СНИЛС = Данные.snils;	
	КонецЕсли; 
	
	Если СвойстваДанных.Получить("diagnosis") <> Неопределено Тогда
		ДиагнозСсылка = Справочники.Диагнозы.НайтиПоРеквизиту("КодДиагноза", Данные.diagnosis);
		Если ДиагнозСсылка <> Справочники.Диагнозы.ПустаяСсылка() Тогда
			НоваяСтрока.ДиагнозПоМКБ10 = ДиагнозСсылка;
		Иначе
			НоваяСтрока.ДиагнозПоМКБ10 = Данные.diagnosis;
		КонецЕсли;	
	КонецЕсли;
	
	Если СвойстваДанных.Получить("treatmentType") <> Неопределено Тогда
		НоваяСтрока.УсловияМедицинскойПомощи = Данные.treatmentType;	
	КонецЕсли;
	
	НоваяСтрока.СтрокаЗарегистрирована = Истина;
	
КонецПроцедуры

Функция КонвертироватьЗначение(Знач Значение, ИмяПоля = "")
	
	Если ИмяПоля = "gender" Тогда 
		Значение = ?(Значение = "0", Перечисления.ПолФизическихЛиц.Мужской, Перечисления.ПолФизическихЛиц.Женский);
	ИначеЕсли ИмяПоля = "reason1" Тогда 
		Значение = Справочники.ПричиныНетрудоспособности.НайтиПоКоду(Значение);	
	ИначеЕсли ИмяПоля = "diagnos" Тогда 
		Значение = Справочники.Диагнозы.НайтиПоРеквизиту("КодДиагноза", Значение);
	ИначеЕсли ИмяПоля = "lnState" Тогда 
		Индекс = Число(Значение)/10-1;
		Значение = Перечисления.СтатусыФСС.Получить(Индекс);
	ИначеЕсли Значение = "true" Или Значение = "false" Тогда
		Значение = (Значение = "true");  
	ИначеЕсли СтрРазделить(Значение, "-", Ложь).Количество() = 3 Тогда 
		Попытка
			СтрокаДата = СтрЗаменить(Значение,"-", "");
			СтрокаДата = СтрЗаменить(СтрокаДата,":", "");
			Значение = Дата(СтрокаДата);	
		Исключение
		КонецПопытки; 
	КонецЕсли;	
	
	Возврат Значение;
КонецФункции

// Отправка ЭЛН

Процедура ЗаполнитьWSПараметрДокумента(ПараметрЗапроса, Параметры)
	
	WSОпределение = ОбменФССПовтИсп.ВнутренняяWSОпределения(ПолучитьАдресСервераФСС());
	
	ТипPXmlFile = ПараметрЗапроса.Свойства().Получить("pXmlFile").Тип;
	pXmlFile = WSОпределение.ФабрикаXDTO.Создать(ТипPXmlFile);
	
	WSТипПараметра 	= pXmlFile.Свойства().Получить("rowset").Тип;
	WSПараметр 		= WSОпределение.ФабрикаXDTO.Создать(WSТипПараметра);
	
	Документ = Параметры.Документ;
	ОбновленИзФСС = Документ.ОбновленИзФСС;
	
	// Данные автора
	WSПараметр.software = Метаданные.КраткаяИнформация;
	WSПараметр.version = "2.0";
	WSПараметр.version_software = Метаданные.Версия;
	WSПараметр.author = ВРег(Строка(УправлениеНастройками.ПолучитьПараметрУчетнойПолитикиФилиала("АвторРеестраФСС_ЭЛН", Документ.Филиал)));
	WSПараметр.email = "";
	WSПараметр.phone = "";
		
	// Параметр rowset.row - данные элн
	ТипRow = WSПараметр.row.ВладеющееСвойство.Тип;
		
	БлокиПодписиЭЛН = Новый Массив;
	
	WSПараметрRow = WSОпределение.ФабрикаXDTO.Создать(ТипRow);
	ЗаполнитьWSПараметр(WSПараметрRow, Документ);
	
	// Параметр rowset.row.servData - данные по уходу
	ТипServData = ТипRow.Свойства.Получить("servData").Тип;
	WSПараметрServData = WSОпределение.ФабрикаXDTO.Создать(ТипServData);
	WSПараметрServFullData = WSПараметрServData.servFullData;
	ТипServFullData = WSПараметрServFullData.ВладеющееСвойство.Тип;
	Для Каждого СтрокаУхода Из Документ.ДанныеПоУходуЗаРодственниками Цикл
		WSУход = WSОпределение.ФабрикаXDTO.Создать(ТипServFullData);
		ЗаполнитьWSПараметр(WSУход, СтрокаУхода);
		
		//Если Не ОбновленИзФСС Тогда
		//	WSУход.name = ВРег(WSУход.name);
		//	WSУход.surname = ВРег(WSУход.surname);
		//	WSУход.patronymic = ВРег(WSУход.patronymic);
		//КонецЕсли;
		
		WSУход.reason1 = СтрокаУхода.ПричинаНетрудоспособности.Код; 
		WSПараметрServFullData.Добавить(WSУход);
	КонецЦикла; 
	WSПараметрRow.ServData = WSПараметрServData; 
	//WSУход.servdt1 = Формат(WSУход.servdt1, "ДФ=yyyy-MM-dd");
	//WSУход.servdt2 = Формат(WSУход.servdt2, "ДФ=yyyy-MM-dd");

	// Параметр rowset.row.hospitalBreach - данные по нарушению
	Если ЗначениеЗаполнено(Документ.ДатаНарушенияРежима) Тогда
		ТипHospitalBreach = ТипRow.Свойства.Получить("hospitalBreach").Тип;
		WSПараметрHospitalBreach = WSОпределение.ФабрикаXDTO.Создать(ТипHospitalBreach);
		ЗаполнитьWSПараметр(WSПараметрHospitalBreach, Документ);
		WSПараметрRow.hospitalBreach = WSПараметрHospitalBreach;
	КонецЕсли; 
	
	// Параметр rowset.row.lnResult - данные закрытия
	Если ЗначениеЗаполнено(Документ.ДатаНачалаРаботы)
		Или ЗначениеЗаполнено(Документ.СтатусНетрудоспособного)
	Тогда
		ТипLnResult = ТипRow.Свойства.Получить("lnResult").Тип;
		WSПараметрLnResult = WSОпределение.ФабрикаXDTO.Создать(ТипLnResult);
		ЗаполнитьWSПараметр(WSПараметрLnResult, Документ);
		WSПараметрRow.lnResult = WSПараметрLnResult;
	КонецЕсли; 
			
	// Параметр rowset.row.treatPeriods - данные по периодам
	ТипTreatPeriods = ТипRow.Свойства.Получить("treatPeriods").Тип;
	WSПараметрTreatPeriods = WSОпределение.ФабрикаXDTO.Создать(ТипTreatPeriods);
	WSПараметрTreatFullPeriod = WSПараметрTreatPeriods.treatFullPeriod;
	РабочийКонтур = УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("РабочийРежимОбменаСФСС");
	// Запись 1
	ДобавитьДанныеПериода(WSОпределение,WSПараметрTreatFullPeriod,Документ,1, РабочийКонтур);
	// Запись 2
	ДобавитьДанныеПериода(WSОпределение,WSПараметрTreatFullPeriod,Документ,2, РабочийКонтур);
	// Запись 3
	ДобавитьДанныеПериода(WSОпределение,WSПараметрTreatFullPeriod,Документ,3, РабочийКонтур);
	WSПараметрRow.treatPeriods = WSПараметрTreatPeriods;
		
	// Статус
	ДанныеСтатуса = РегистрыСведений.СтатусыОбменаФСС.Получить(Новый Структура("Объект",Документ));
	Если ЗначениеЗаполнено(ДанныеСтатуса.СтатусФСС) Тогда
		ИндексЗначения = Перечисления.СтатусыФСС.Индекс(ДанныеСтатуса.СтатусФСС);
		WSПараметрRow.lnState = Метаданные.Перечисления.СтатусыФСС.ЗначенияПеречисления[ИндексЗначения].Комментарий; 	
	Иначе
		WSПараметрRow.lnState = "010";	
	КонецЕсли; 
	
	//// Поля в верхний регистр
	//Если Не ОбновленИзФСС Тогда
	//	WSПараметрRow.name		 = ВРег(WSПараметрRow.name);
	//	WSПараметрRow.surname	 = ВРег(WSПараметрRow.surname);
	//	WSПараметрRow.patronymic = ВРег(WSПараметрRow.patronymic);
	//	WSПараметрRow.lpuAddress = ВРег(WSПараметрRow.lpuAddress);
	//	WSПараметрRow.lpuName	 = ВРег(WSПараметрRow.lpuName);  	
	//КонецЕсли;
	
	WSПараметрRow.writtenAgreementFlag = Истина;
	
	WSПараметрRow.Проверить();
	WSПараметр.row.Добавить(WSПараметрRow);
	ДобавитьДанныеПодписей(Параметры, Документ);
		 					
	pXmlFile.rowset = WSПараметр;
	
	ПараметрЗапроса.pXmlFile = pXmlFile;
	
КонецПроцедуры

Процедура ДобавитьДанныеПодписей(Параметры, Документ)
	
	ПодписываемыеБлокиДокумента = Новый Массив();
	Для Каждого СтрокаПодписи Из Документ.ЭлектронныеПодписиОбменаФСС Цикл
		Если Не ЗначениеЗаполнено(СтрокаПодписи.ИдентификаторПодписи) Тогда
			Продолжить;	
		КонецЕсли; 
		
		ПодписываемыеБлокиДокумента.Добавить(СформироватьДанныеПодписи(СтрокаПодписи.ИмяСтроки, Документ,СтрокаПодписи.ИдентификаторПодписи));
	КонецЦикла;
	
	// Данные подписи организации
	НовыйБлокПодписи = Новый Структура;
	НовыйБлокПодписи.Вставить("Блок", "Документ");
	Номер = Формат(Документ.Номер,"ЧГ=");
	НовыйБлокПодписи.Вставить("wsu_id","ELN_" + Номер);
	НовыйБлокПодписи.Вставить("soap_actor","http://eln.fss.ru/actor/mo/" + Параметры.ogrn + "/ELN_" + Номер);
	НовыйБлокПодписи.Вставить("ПодписываемыеБлоки",ПодписываемыеБлокиДокумента);
	
	Параметры.Вставить("БлокДляПодписи",НовыйБлокПодписи);
КонецПроцедуры

Функция СформироватьДанныеПодписи(ИмяБлока, Документ, Идентификатор = Неопределено) Экспорт
	НовыйБлокПодписи = Новый Структура;
		
	НомерБлока = ПолучитьНомерБлокаВподписи(ИмяБлока); 

	НовыйБлокПодписи.Вставить("Блок", ИмяБлока);
	//Сертификат = ПолучитьСертификатДляПодписиБлокаXML(СтрокаПодписи.Идентификатор);
	НовыйБлокПодписи.Вставить("Подпись", ПодписьПоУИД(Документ,Идентификатор));
	Номер = Формат(Документ.Номер,"ЧГ=");
	НовыйБлокПодписи.Вставить("НомерБлока", НомерБлока);
	
	ОкончаниеID = ?(СтрНайти(ИмяБлока,"Председатель")<>0,"_vk","_doc");
		
	НовыйБлокПодписи.Вставить("wsu_id","ELN_" + Номер + "_" + Строка(НомерБлока) + ОкончаниеID);
	НовыйБлокПодписи.Вставить("soap_actor","http://eln.fss.ru/actor/doc/" + Номер + "_" + Строка(НомерБлока) + ОкончаниеID);
	
	Возврат НовыйБлокПодписи;
КонецФункции
 
Функция ПолучитьНомерБлокаВподписи(ИмяБлока)
	Если ИмяБлока = "Нарушение" Тогда
		Возврат 1;
	ИначеЕсли ИмяБлока = "Закрытие" Тогда
		Возврат 2;
	Иначе
		Если СтрНайти(ИмяБлока,"Запись1") <> 0 Тогда
			Возврат 3;
		ИначеЕсли СтрНайти(ИмяБлока,"Запись2") <> 0 Тогда
			Возврат 4;
		Иначе
			Возврат 5;
		КонецЕсли; 
	КонецЕсли; 		
КонецФункции

Функция ПодписьПоУИД(Объект, УникальныйИдентификатор)
	
	Если УникальныйИдентификатор = Неопределено Тогда
		Возврат "";	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",Объект);
	Запрос.УстановитьПараметр("УникальныйИдентификатор",УникальныйИдентификатор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронныеПодписи.Подпись КАК Подпись
	               |ИЗ
	               |	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	               |ГДЕ
	               |	ЭлектронныеПодписи.Объект = &Объект
	               |	И ЭлектронныеПодписи.УникальныйИдентификатор = &УникальныйИдентификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Подпись;	
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции

Функция СоответствиеПодписейИБлоков()
	СоответствиеПодписейИБлоков = Новый Соответствие;
	
	СоответствиеПодписейИБлоков.Вставить("Тело", "body");
	СоответствиеПодписейИБлоков.Вставить("Документ", "row");
	СоответствиеПодписейИБлоков.Вставить("Запись1Врач", "TreatPeriod");
	СоответствиеПодписейИБлоков.Вставить("Запись2Врач", "TreatPeriod");
	СоответствиеПодписейИБлоков.Вставить("Запись3Врач", "TreatPeriod");
	СоответствиеПодписейИБлоков.Вставить("Запись1Председатель", "TreatFullPeriod");
	СоответствиеПодписейИБлоков.Вставить("Запись2Председатель", "TreatFullPeriod");
	СоответствиеПодписейИБлоков.Вставить("Запись3Председатель", "TreatFullPeriod");
	СоответствиеПодписейИБлоков.Вставить("Нарушение", "HospitalBreach");
	СоответствиеПодписейИБлоков.Вставить("Закрытие", "lnResult");
	
	Возврат СоответствиеПодписейИБлоков;		
КонецФункции
 
Процедура ДобавитьДанныеПериода(WSОпределение, TreatFullPeriod, Документ, Номер, РабочийКонтур)
	
	ЗаписьНомер = "Запись" + Строка(Номер);
	Если Не ЗначениеЗаполнено(Документ[ЗаписьНомер + "ДатаНачала"]) Тогда
		Возврат;	
	КонецЕсли; 
	ТипTreatFullPeriod = TreatFullPeriod.ВладеющееСвойство.Тип;
	WSПериод = WSОпределение.ФабрикаXDTO.Создать(ТипTreatFullPeriod);
	ПредседательВК = Документ[ЗаписьНомер + "ПредседательВК"];
	
	Если ТипЗнч(ПредседательВК) = Тип("СправочникСсылка.Сотрудники") Тогда
		ПредседательВК = ПредседательВК.Наименование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредседательВК) Тогда
		WSПериод.treatChairman = ?(РабочийКонтур, ПредседательВК, ВРег(ПредседательВК));
		WSПериод.treatChairmanRole = "ПРЕД ВК";
	КонецЕсли; 
		
	// Период
	ТипTreatPeriod = WSПериод.Свойства().Получить("treatPeriod").Тип;
	treatPeriod = WSОпределение.ФабрикаXDTO.Создать(ТипTreatPeriod);
	Врач = Документ[ЗаписьНомер + "Врач"];
	Если ТипЗнч(Врач) = Тип("СправочникСсылка.Сотрудники") Тогда
		treatPeriod.treatDoctor = ?(РабочийКонтур, Документ[ЗаписьНомер + "Врач"].Наименование, ВРег(Документ[ЗаписьНомер + "Врач"].Наименование));
	Иначе
		treatPeriod.treatDoctor = ?(РабочийКонтур, Документ[ЗаписьНомер + "Врач"], ВРег(Документ[ЗаписьНомер + "Врач"]));
	КонецЕсли; 
	treatPeriod.treatDoctorRole = ?(РабочийКонтур, Документ[ЗаписьНомер + "ВрачДолжность"], ВРег(Документ[ЗаписьНомер + "ВрачДолжность"]));
	treatPeriod.treatDt1 = Документ[ЗаписьНомер + "ДатаНачала"];
	treatPeriod.treatDt2 = Документ[ЗаписьНомер + "ДатаОкончания"];
	
	WSПериод.treatPeriod = treatPeriod;
	
	TreatFullPeriod.Добавить(WSПериод);	
	
КонецПроцедуры 

Процедура ЗаполнитьWSПараметр(WSПараметр, Объект)
	Для Каждого Свойство Из WSПараметр.Свойства() Цикл
		Значение = ПолучитьЗначениеОбъекта(Объект, Свойство.Имя);
		Если Значение <> Неопределено Тогда
			WSПараметр[Свойство.Имя] = Значение;
		Иначе
			Попытка
				WSПараметр[Свойство.Имя] = Неопределено;	
			Исключение
			КонецПопытки; 				
		КонецЕсли; 
	КонецЦикла; 		
КонецПроцедуры
 
Функция СоответствиеУзловПолейДокумента()
	КлючевыеПоля = Новый Соответствие;
	
	// Данные листа
	КлючевыеПоля.Вставить("lnCode","Номер");	 
	КлючевыеПоля.Вставить("lnDate", "Дата");
	
	// Пациент
	КлючевыеПоля.Вставить("snils", "СНИЛС");
	КлючевыеПоля.Вставить("surname", "Фамилия");
	КлючевыеПоля.Вставить("gender", "Пол");
	КлючевыеПоля.Вставить("name", "Имя");
	КлючевыеПоля.Вставить("birthday", "ДатаРождения");
	КлючевыеПоля.Вставить("patronymic", "Отчество");
	КлючевыеПоля.Вставить("unconditional", "ДанныеОПациентеВерны");
	
	// Причины
	КлючевыеПоля.Вставить("diagnos", "ДиагнозПоМКБ10,КодДиагноза");
	КлючевыеПоля.Вставить("reason1", "ПричинаНетрудоспособности,Код");
	КлючевыеПоля.Вставить("reason2", "ДополнительнаяПричинаНетрудоспособности,Код");
	//КлючевыеПоля.Вставить("reason3", "ИзмененнаяПричинаНетрудоспособности,Код");
	
	КлючевыеПоля.Вставить("primaryFlag", "Первичный");
	КлючевыеПоля.Вставить("prevLnCode", "ДокументОснование");
	КлючевыеПоля.Вставить("duplicateFlag", "Дубликат");
	КлючевыеПоля.Вставить("previouslyIssuedCode", "ВзаменРанееВыданного"); // Взамен ранее выданому
	
	// Организация
	КлючевыеПоля.Вставить("lpuOgrn", "ЛПУОГРН");
	КлючевыеПоля.Вставить("lpuName", "ЛПУИмя");
	КлючевыеПоля.Вставить("lpuAddress", "ЛПУАдрес");
	
	// Нарушение режима
	КлючевыеПоля.Вставить("hospitalBreachCode", "НарушениеРежима,Код");
	КлючевыеПоля.Вставить("hospitalBreachDt", "ДатаНарушенияРежима");
	
	// Санаторий
	КлючевыеПоля.Вставить("date1", "Дата1");
	КлючевыеПоля.Вставить("date2", "Дата2");
	КлючевыеПоля.Вставить("voucherNo", "НомерПутевки");
	КлючевыеПоля.Вставить("voucherOgrn", "Санаторий");
	
	// Иное
	КлючевыеПоля.Вставить("mseResult", "СтатусНетрудоспособного,Код");
	КлючевыеПоля.Вставить("otherStateDt", "ДатаУстановленияСтатуса");
	КлючевыеПоля.Вставить("nextLnCode", "СледующийЛН");
	
	КлючевыеПоля.Вставить("returnDateLpu", "ДатаНачалаРаботы");
	
	// Стационар
	КлючевыеПоля.Вставить("hospitalDt1", "СтационарДатаНачала");
	КлючевыеПоля.Вставить("hospitalDt2", "СтационарДатаОкончания");
	
	// МСЭ
	КлючевыеПоля.Вставить("mseDt1", "ДатаНаправленияВБюроМСЭ");
	КлючевыеПоля.Вставить("mseDt2", "ДатаРегистрацииВБюроМСЭ");
	КлючевыеПоля.Вставить("mseDt3", "ДатаОсвидетельствованияВБюроМСЭ");
	КлючевыеПоля.Вставить("mseInvalidGroup", "ГруппаИнвалидности");
	КлючевыеПоля.Вставить("mseInvalidLoss", "УтратаПрофессиональнойТрудоспособности");
	
	// Дополнительно
	//КлючевыеПоля.Вставить("aud_state", "Статус");	
	//КлючевыеПоля.Вставить("aud_dt1", "ДатаИзменения1");
	//КлючевыеПоля.Вставить("aud_dt2", "ДатаИзменения2");
	
	// По уходу
	КлючевыеПоля.Вставить("servRelationCode", "СтепеньРодства,КодФСС");
	КлючевыеПоля.Вставить("servDt1", "ДатаНачалаУхода");
	КлючевыеПоля.Вставить("servDt2", "ДатаОкончанияУхода");
	КлючевыеПоля.Вставить("treatmentType", "УсловияМедицинскойПомощи");
	КлючевыеПоля.Вставить("surname", "Фамилия");
	КлючевыеПоля.Вставить("name", "Имя");
	КлючевыеПоля.Вставить("patronymic", "Отчество");
	КлючевыеПоля.Вставить("birthday", "ДатаРождения");
	КлючевыеПоля.Вставить("reason1", "ПричинаНетрудоспособности,Код");
	КлючевыеПоля.Вставить("snils", "СНИЛС");
	КлючевыеПоля.Вставить("diagnosis", "ДиагнозПоМКБ10,КодДиагноза");
	
	КлючевыеПоля.Вставить("lnHash", "ХэшЭЛН");
	
	Возврат КлючевыеПоля; 
КонецФункции

Функция ПолучитьЗначениеОбъекта(Объект, СвойствоПараметра)
	
	СписокСоответствий = СоответствиеУзловПолейДокумента();
	СвойствоОбъекта = СписокСоответствий.Получить(СвойствоПараметра);
	Если СвойствоОбъекта = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	МассивПолей = СтрРазделить(СвойствоОбъекта,",",Ложь);
	Значение = Неопределено;
	Если МассивПолей.Количество() = 2 Тогда
		ИмяПоля1 = МассивПолей[0];
		ИмяПоля2 = МассивПолей[1];
		Если ИмяПоля2 = "СНИЛС" Тогда
			Значение = Объект.Клиент.СНИЛС;
			Значение = СтрЗаменить(Значение,"-","");
			Значение = СтрЗаменить(Значение," ","");
		ИначеЕсли ИмяПоля2 = "ОГРН" Тогда 
			Значение = Объект[МассивПолей[0]].ОГРН;	
			Значение = ?(ЗначениеЗаполнено(Значение),Значение,Неопределено); 
		ИначеЕсли ИмяПоля1 = "ПричинаНетрудоспособности" 
			И Объект.ПричинаНетрудоспособности.Код = "09"	
		Тогда
			Значение = Неопределено;
		ИначеЕсли ИмяПоля1 = "ДиагнозПоМКБ10"
			И ТипЗнч(Объект[ИмяПоля1]) <> Тип("СправочникСсылка.Диагнозы")
		Тогда
			Значение = Строка(Объект[ИмяПоля1]);	
		Иначе
			Значение = Объект[МассивПолей[0]][МассивПолей[1]];	
		КонецЕсли; 		
	Иначе
		ИмяПоля = МассивПолей[0];
		Если ИмяПоля = "ДокументОснование" Тогда
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Если ТипЗнч(Объект.ДокументОснование) = Тип("Строка") Тогда
					Значение = Формат(Объект.ДокументОснование, "ЧЦ=12; ЧВН=; ЧГ=");		
				Иначе
					Значение = Формат(Объект.ДокументОснование.Номер, "ЧЦ=12; ЧВН=; ЧГ=");	
				КонецЕсли; 	
			Иначе
				Значение = "            ";	
			КонецЕсли;
		ИначеЕсли ИмяПоля = "СНИЛС" Тогда 
			Значение = Объект.СНИЛС;
			Значение = СтрЗаменить(Значение,"-","");
			Значение = СтрЗаменить(Значение," ","");		
		ИначеЕсли ИмяПоля = "Номер" Тогда
			Значение = Формат(Объект[ИмяПоля], "ЧГ=");
		ИначеЕсли ИмяПоля = "Пол" Тогда
			Значение = ?(Объект.Пол = Перечисления.ПолФизическихЛиц.Мужской, 0, 1);
		ИначеЕсли ИмяПоля = "ДатаИзменения1" Или ИмяПоля = "ДатаИзменения2" Тогда
			Значение = ТекущаяДата();	
		ИначеЕсли ИмяПоля = "АдресМедОрганизации" Тогда	
			Реквизиты = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Объект.Филиал);	
			Значение = Реквизиты.Адрес;	
		ИначеЕсли ИмяПоля = "ГруппаИнвалидности" Тогда	
			Значение = Объект.ГруппаИнвалидности.Метаданные().Комментарий;
		ИначеЕсли ИмяПоля = "Санаторий" Тогда 
			Если ЗначениеЗаполнено(Объект.Санаторий) Тогда
				Значение = ?(ТипЗнч(Объект.Санаторий) = Тип("Строка"), СокрЛП(Объект.Санаторий), Объект.Санаторий.ОГРН);
			Иначе
				Значение = Неопределено;
			КонецЕсли; 			
		ИначеЕсли ИмяПоля = "ДанныеОПациентеВерны" Тогда
			Значение = Объект.ДанныеОПациентеВерны;
		ИначеЕсли ИмяПоля = "УтратаПрофессиональнойТрудоспособности"
			И Не ЗначениеЗаполнено(Объект.УтратаПрофессиональнойТрудоспособности) // А когда заполнено - в общей ветке "Иначе" берется значение.
		Тогда
			Значение = Неопределено;
		Иначе
			Значение = Объект[ИмяПоля];	
		КонецЕсли;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Значение) 
		И ТипЗнч(Значение) <> Тип("Число")  
	Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Возврат Значение;  

КонецФункции

Функция ПолучитьSoapТело(ИмяМетода, Параметры)
	
	WSОпределение	= ОбменФССПовтИсп.ВнутренняяWSОпределения(ПолучитьАдресСервераФСС());
	WSТипПараметра 	= WSОпределение.ФабрикаXDTO.Тип(URIПространстваИменСервиса(), ИмяМетода);
	WSПараметр 		= WSОпределение.ФабрикаXDTO.Создать(WSТипПараметра);

	ЗаполнитьЗначенияСвойств(WSПараметр,Параметры);
	
	Если Параметры.Метод = "PrParseFilelnlpuRequest" Тогда
		ЗаполнитьWSПараметрДокумента(WSПараметр, Параметры);	
	КонецЕсли; 
	
	Текст = ПолучитьXMLИзXDTO(WSПараметр, WSОпределение);
				
	Возврат Текст;
	
КонецФункции 

Функция ПолучитьШаблонSOAPСообщения()
	
	Текст = "<soapenv:Envelope
			|		xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/""
			|		xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
			|		xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
			|		xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
			|	<soapenv:Body>
			|		%1
			|   </soapenv:Body>
			|</soapenv:Envelope>";

	Возврат Текст;
	
КонецФункции

Функция ШаблонТэгаSecurity(soap_actor, wsuId, УИДМЧД)
	 
	Шаблон =
		"<wsse:Security xmlns:wsse=""%1"" xmlns:wsu=""%2"" xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" soapenv:actor=""%4"">
		|	<wsse:BinarySecurityToken
		|			EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary""
		|			ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""
		|			wsu:Id=""%4"">%6</wsse:BinarySecurityToken>
		|	<ds:Signature xmlns:ds=""%3"" xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#"">
		|		<ds:SignedInfo>
		|			<ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
		|			<ds:SignatureMethod Algorithm=""%9""/>
		|			<ds:Reference URI=""#%5"">
		|				<ds:Transforms>
		|					<ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
		|				</ds:Transforms>
		|				<ds:DigestMethod Algorithm=""%10""/>
		|				<ds:DigestValue>%7</ds:DigestValue>
		|			</ds:Reference>
		|		</ds:SignedInfo>
		|		<ds:SignatureValue>%8</ds:SignatureValue>
		|		<ds:KeyInfo>
		|			<wsse:SecurityTokenReference>
		|				<wsse:Reference URI=""#%4"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" />
		|			</wsse:SecurityTokenReference>
		|		</ds:KeyInfo>
		|		<mchd></mchd>
		|	</ds:Signature>
		|</wsse:Security>";                                                                                                                                                       	
	
	Результат = СтрШаблон(
		Шаблон,
		ПространстваИмен.wsse(),
		ПространстваИмен.wsu(),
		ПространстваИмен.xmldsig(),
		soap_actor,
		wsuId, // [WSU_ID]
		"%BinarySecurityToken%",
		"%DigestValue%",
		"%SignatureValue%",
		"%SignatureMethod%",
		"%DigestMethod%"
	);
	
	ТекстМЧД = ПолучитьТекстМЧД(УИДМЧД); 
	
	Результат = СтрЗаменить(Результат, "
		|		<mchd></mchd>
		|", ТекстМЧД);
	
	Возврат Результат;
					
КонецФункции

// Возвращает текст блока Object для обмена с ФСС, описывающего МЧД
//
// Параметры:
//  УИДМЧД - Строка, Неопределено - Пользоваель 
// 
// Возвращаемое значение:
//  Строка - Текст блока
//
Функция ПолучитьТекстМЧД(УИДМЧД) Экспорт
		
	Если УИДМЧД <> Неопределено Тогда
		
		ТекстШаблон = "
			|		<Object> 
			|			<urn:authorities xmlns:urn=""urn:ru:fss:integration:types:signature:v01"" 
            |		     	xmlns:urn1=""urn:ru:fss:integration:types:mchd:v01"">
            |		  		<urn:authority>
		    |		 			<urn1:powerOfAttorneyLink>
			|						<urn1:uuid>%1</urn1:uuid>
			|					</urn1:powerOfAttorneyLink>
			|				</urn:authority>
    		|			</urn:authorities>
			|		</Object>
			|";
		
		Возврат СтрШаблон(ТекстШаблон, УИДМЧД); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ШаблонТегаX509Certificate()
	Возврат "<X509Certificate>%X509Certificate%</X509Certificate>";	
КонецФункции

Функция ПодписатьБлок(БлокДляПодписания, ПодписываемыйXml) Экспорт
	
	ПараметрыXMLDSig = ПолучитьИЗаполнитьПараметрыXMLDSig(БлокДляПодписания.wsu_id);
			
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БлокДляПодписания.Подпись, "Программа,ДанныеСертификата");
	ПСМК = ЭлектроннаяПодписьСлужебный.ПараметрыСозданияМенеджераКриптографии();
	ПСМК.Программа		= РеквизитыСертификата.Программа;
	ПСМК.ПоказатьОшибку = Истина;
	
	МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("Подписание", ПСМК);
	
	ДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
	СертификатДД = Новый СертификатКриптографии(ДанныеСертификата);
	
	ПодписываемыйXml = ЭлектроннаяПодписьСлужебный.Подписать(ПодписываемыйXml, ПараметрыXMLDSig, СертификатДД, МенеджерКриптографии);
	
	Возврат ПодписываемыйXml;
	
КонецФункции
 			
Функция ПодписатьSoapСообщение(СообщениеSOAP, Параметры) Экспорт
			
	ДокументDOM = РаботаСDOMКлиентСервер.DOMИзСтрокиXML(СообщениеSOAP);
	КорневойЭлемент = ДокументDOM.ЭлементДокумента; 
	
	// Добавим в конверт тег soap:Header, если его не было.
	Если Не "Header" = КорневойЭлемент.ПервыйДочерний.ЛокальноеИмя Тогда
		Header = ДокументDOM.СоздатьЭлемент(КорневойЭлемент.URIПространстваИмен, "Header");
		КорневойЭлемент.ВставитьПеред(Header, КорневойЭлемент.ПервыйДочерний);
	КонецЕсли;
	
	БлокДляПодписи = Параметры.БлокДляПодписи;
	Если БлокДляПодписи.Свойство("ПодписываемыеБлоки") Тогда
		Для Каждого ПодБлокПодписи Из БлокДляПодписи.ПодписываемыеБлоки Цикл
			ТекстПодписи = ПодБлокПодписи.Подпись.Получить();
			ТекстПодписи = СтрЗаменить(ТекстПодписи, "SignedInfo", "SignedTempInfo");
			ДокументDOMПодписи = РаботаСDOMКлиентСервер.DOMИзСтрокиXML(ТекстПодписи);
			HeaderПодписи = ДокументDOMПодписи.ПолучитьЭлементыПоИмени("header")[0];
			wsseSecurity = ДокументDOM.ИмпортироватьУзел(HeaderПодписи.ПервыйДочерний, Истина);
			КорневойЭлемент = ДокументDOM.ЭлементДокумента;
			КорневойЭлемент.ПервыйДочерний.ДобавитьДочерний(wsseSecurity);
			
			ДобавитьТеги(ДокументDOM, ПодБлокПодписи.Блок, ПодБлокПодписи.wsu_id);	
		КонецЦикла; 	
	КонецЕсли; 	
	ДобавитьТеги(ДокументDOM, БлокДляПодписи.Блок, БлокДляПодписи.wsu_id);
	ДобавитьСтруктуруПодписи(ДокументDOM,БлокДляПодписи.soap_actor,БлокДляПодписи.wsu_id, Параметры.УИДМЧД);
	
	СообщениеSOAP = РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(ДокументDOM);
		
	Возврат СообщениеSOAP;
	
КонецФункции

Процедура ДобавитьСтруктуруПодписи(ДокументDOM, soap_actor, wsuId, УИДМЧД = Неопределено)
		
	КорневойЭлемент = ДокументDOM.ЭлементДокумента; 
	
	// Добавим в конверт тег soap:Header, если его не было.
	Если Не "Header" = КорневойЭлемент.ПервыйДочерний.ЛокальноеИмя Тогда
		Header = ДокументDOM.СоздатьЭлемент(КорневойЭлемент.URIПространстваИмен, "Header");
		КорневойЭлемент.ВставитьПеред(Header, КорневойЭлемент.ПервыйДочерний);
	КонецЕсли;
	Security = ШаблонТэгаSecurity(soap_actor, wsuId, УИДМЧД);
	SecurityDOM = РаботаСDOMКлиентСервер.DOMИзСтрокиXML(Security);
	wsseSecurity = ДокументDOM.ИмпортироватьУзел(SecurityDOM.ПервыйДочерний, Истина);
	КорневойЭлемент = ДокументDOM.ЭлементДокумента;
	КорневойЭлемент.ПервыйДочерний.ДобавитьДочерний(wsseSecurity);
	X509Certificat = ШаблонТегаX509Certificate();
	X509CertificatDOM = РаботаСDOMКлиентСервер.DOMИзСтрокиXML(X509Certificat);
	wsseX509 = ДокументDOM.ИмпортироватьУзел(X509CertificatDOM.ПервыйДочерний, Истина);
	КорневойЭлемент.ПервыйДочерний.ДобавитьДочерний(wsseX509);
КонецПроцедуры
 
Процедура ДобавитьТеги(ДокументDOM, ИмяБлока, wsu_id)
	
	Блок = СоответствиеПодписейИБлоков().Получить(ИмяБлока);
	СписокЭлементов = ДокументDOM.ПолучитьЭлементыПоИмени(Блок);
	Если Блок = "row" Или Блок = "body" Тогда
		ИндексБлока = 0;
	Иначе
		НомерБлока = ПолучитьНомерБлокаВподписи(ИмяБлока);	
		ИндексБлока = ?(НомерБлока < 3, 0, НомерБлока - 3);	
	КонецЕсли; 
	УзелДляПодписи = СписокЭлементов[ИндексБлока];
	
	Атрибут_wsuId = ДокументDOM.СоздатьАтрибут(ПространстваИмен.wsu(), "wsu:Id");
	Атрибут_wsuId.Значение = wsu_id;
	УзелДляПодписи.Атрибуты.УстановитьИменованныйЭлемент(Атрибут_wsuId);
	
КонецПроцедуры

Функция СформироватьТекстОшибкиОтрпавкиЭЛН(Результат, НомерЭлн, ДобавлятьMess = Истина)
	Если ДобавлятьMess Тогда
		Текст = Результат.mess + ":" + Символы.ПС;
	Иначе
		Текст = "";
	КонецЕсли; 
		
	Если Результат.Свойства().Получить("info") = Неопределено Тогда
		Возврат Текст;	
	КонецЕсли; 
	
	СписокЭлн = Результат.info.infoRowset.infoRow;
	infoRow = Неопределено;
	Если ТипЗнч(СписокЭлн) = Тип("ОбъектXDTO") Тогда
		infoRow = СписокЭлн;
	Иначе
		Для Каждого ТекЭлн Из СписокЭлн Цикл
			Если ТекЭлн.lnCode = НомерЭлн Тогда
				infoRow = ТекЭлн;
				Прервать;
			КонецЕсли; 	
		КонецЦикла; 
	КонецЕсли; 
	Если infoRow = Неопределено Тогда
		Возврат Текст;	
	КонецЕсли; 
	
	Ошибки = infoRow.errors.error;
	Если ТипЗнч(Ошибки) = Тип("ОбъектXDTO") Тогда
		Текст = Текст + Ошибки.errMess + Символы.ПС;
		Текст = Текст + "-------------------------------------------------------------------------------" + Символы.ПС;
	Иначе
		Для Каждого Ошибка Из Ошибки Цикл
			Текст = Текст + Ошибка.errMess + Символы.ПС; 
			Текст = Текст + "-------------------------------------------------------------------------------" + Символы.ПС;
		КонецЦикла; 
	КонецЕсли; 
		
	Возврат Текст;
		
КонецФункции

Функция ПолучитьИЗаполнитьПараметрыXMLDSig(wsu_id)
	
	ПараметрыXMLDSig = ЭлектроннаяПодписьКлиентСервер.ПараметрыXMLDSig();
	ПараметрыXMLDSig.XPathSignedInfo		= "(//. | //@* | //namespace::*)[ancestor-or-self::*[local-name()='SignedInfo']]";
	ПараметрыXMLDSig.XPathПодписываемыйТег	= СтрШаблон("(//. | //@* | //namespace::*)[
														|	ancestor-or-self::*[
														|		attribute::*[
														|			local-name()='Id'
														|			and string()='%1'
														|			and namespace-uri()='%2'
														|		]
														|	]
														|]",
														wsu_id,
														ПространстваИмен.wsu());
														
	ПараметрыXMLDSig.ИмяАлгоритмаПодписи		= "GOST R 34.10-2012-256" + Символы.ПС + "GOST R 34.10-2012-512";
	ПараметрыXMLDSig.OIDАлгоритмаПодписи 		= "1.2.643.7.1.1.3.2" + Символы.ПС + "1.2.643.7.1.1.3.3";
	ПараметрыXMLDSig.АлгоритмПодписи 			= "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256" + Символы.ПС
												+ "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512";
	
	ПараметрыXMLDSig.ИмяАлгоритмаХеширования 	= "GOST R 34.11-94" + Символы.ПС + "GOST R 34.11-94";
	ПараметрыXMLDSig.OIDАлгоритмаХеширования	= "1.2.643.2.2.9" + Символы.ПС + "1.2.643.2.2.9";
	ПараметрыXMLDSig.АлгоритмХеширования		= "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411" + Символы.ПС
												+ "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411";

	Возврат ПараметрыXMLDSig;
	
КонецФункции

#КонецОбласти 

Функция ПолучитьЗначениеХранилищаЗначений(Адрес) Экспорт

	 Возврат Адрес.Получить();
	
КонецФункции

#КонецОбласти