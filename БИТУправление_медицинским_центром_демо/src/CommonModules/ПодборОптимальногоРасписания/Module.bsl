////////////////////////////////////////////////////////////////////////////////
// Подбор оптимального расписания: применяется для формирования оптимального расписания для n врачей.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует варианты времени записи с детализацией по каждому врачу.
//
// Параметры:
//  ВрачВремя			 - Массив	 - массив структур с полями Сотрудник, Время.
//  ДатаНачалаПоиска	 - Дата	 - дата без времени.
//  ДатаОкончанияПоиска	 - Дата	 - дата без времени.
//  УдобноеВремяНачало	 - Дата	 - время начала поиска в течении дня.
//  УдобноеВремяКонец	 - Дата	 - время окончания поиска в течении дня.
//  Филиал				 - СправочникСсылка.Филиалы	 - филиал.
//  ВремяОжидания		 - Число	 - предельное количество времени ожидания между услугами.
//  ИсключаемыеЗаявки	 - Массив	 - ссылки на заявки, которые не следует считать как занятое время.
// 
// Возвращаемое значение:
//	Структура.
//
Функция ПодборРасписания(ВрачВремя, ДатаНачалаПоиска, ДатаОкончанияПоиска, УдобноеВремяНачало, УдобноеВремяКонец, Филиал, ВремяОжидания, ИсключаемыеЗаявки) Экспорт
	
	РасписаниеВрачей = УправлениеЗаявками.СформироватьТаблицыДляОбщегоГрафика(ДатаНачалаПоиска, ДатаОкончанияПоиска, Филиал,,ИсключаемыеЗаявки, Ложь, , , Истина).ТаблицаГрафиков;	
	// Получили список дней для поиска
	КоличествоДней = ((ДатаОкончанияПоиска - ДатаНачалаПоиска)+60*60*24)/60/60/24;
	ДатыПоиска = Новый Массив;
	ДатыПоиска.Добавить(ДатаНачалаПоиска);
	ДатаНачалаИнтервала = ДатаНачалаПоиска;
	Пока КоличествоДней > 1 Цикл
		ДатаНачалаИнтервала = ДатаНачалаИнтервала+60*60*24; 
		ДатыПоиска.Добавить(ДатаНачалаИнтервала);
		КоличествоДней = КоличествоДней - 1;
	КонецЦикла;
	
	// Создание описания типов для ТЗ
	КДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	КВремя = Новый КвалификаторыДаты(ЧастиДаты.Время);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата")); 
	ОписаниеТиповКД = Новый ОписаниеТипов(МассивТипов,,,КДата);
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповКВ = Новый ОписаниеТипов(МассивТипов,,,КВремя);
	
	МсВрачи = Новый Массив;
	ТЗПотенциальныхВариантовЗаписи = Новый ТаблицаЗначений;
	ТЗПотенциальныхВариантовЗаписи.Колонки.Добавить("День", ОписаниеТиповКД, "Дата");
	ТЗПотенциальныхВариантовЗаписи.Колонки.Добавить("Врач_1",ОписаниеТиповКВ,ВрачВремя[0].Сотрудник);
	МсВрачи.Добавить(ВрачВремя[0].Сотрудник);
	
	Для Каждого День Из ДатыПоиска Цикл
		Если ВрачВремя.Количество() = 1 Тогда		
			ПервыйВрач = ВрачВремя[0];
			СвободноеВремяПервогоВрача = ПолучитьРасписаниеОдногоВрача(РасписаниеВрачей, ПервыйВрач.Сотрудник, День, Филиал);
			Если СвободноеВремяПервогоВрача.Количество() <> 0 Тогда 
				Для Каждого Строка Из СвободноеВремяПервогоВрача Цикл
					ВремяНачалаИнтервала = Строка.ВремяНачала;
					Пока ВремяНачалаИнтервала + (ПервыйВрач.Время - Дата(1,1,1)) <= Строка.ВремяОкончания Цикл
						ВремяДляЗаписиКПервому = ВремяНачалаИнтервала;
						НоваяСтрока = ТЗПотенциальныхВариантовЗаписи.Добавить();
						НоваяСтрока.День = День;
						НоваяСтрока.Врач_1 = ВремяДляЗаписиКПервому;
						// Разбиваем временной интервал на промежутки по 5 минут
						ВремяНачалаИнтервала = ВремяНачалаИнтервала + 60*5;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Попытка
				ТЗПотенциальныхВариантовЗаписи.Колонки.Добавить("Врач_2",ОписаниеТиповКВ,ВрачВремя[1].Сотрудник);
				МсВрачи.Добавить(ВрачВремя[1].Сотрудник);
			Исключение
		//		Продолжить;
			КонецПопытки;

			ПервыйВрач = ВрачВремя[0];
			СвободноеВремяПервогоВрача = ПолучитьРасписаниеОдногоВрача(РасписаниеВрачей, ПервыйВрач.Сотрудник, День, Филиал);
			ВторойВрач = ВрачВремя[1];
			СвободноеВремяВторогоВрача = ПолучитьРасписаниеОдногоВрача(РасписаниеВрачей, ВторойВрач.Сотрудник, День, Филиал);
			
			Если СвободноеВремяВторогоВрача.Количество() <> 0
				И СвободноеВремяПервогоВрача.Количество() <> 0
				Тогда		
				Для Каждого Строка Из СвободноеВремяВторогоВрача Цикл	
					ВремяНачалаИнтервала = Строка.ВремяНачала;
					Пока ВремяНачалаИнтервала + (ВторойВрач.Время - Дата(1,1,1)) <= Строка.ВремяОкончания Цикл
						ВремяДляЗаписиКПервому = ВхождениеВИнтервалПервого(СвободноеВремяПервогоВрача, ПервыйВрач.Время, ВремяНачалаИнтервала);
						Если ВремяДляЗаписиКПервому <> Неопределено Тогда
							НоваяСтрока = ТЗПотенциальныхВариантовЗаписи.Добавить();
							НоваяСтрока.День = День;
							НоваяСтрока.Врач_1 = ВремяДляЗаписиКПервому;
							НоваяСтрока.Врач_2 = ВремяНачалаИнтервала;
						КонецЕсли;
						// Разбиваем временной интервал на промежутки по 5 минут
						ВремяНачалаИнтервала = ВремяНачалаИнтервала + 60*5;
					КонецЦикла;
				КонецЦикла;
				
				ВыгруженнаяТаблицаВрачВремя = ВрачВремя;
				Для Счетчик = 2 По ВыгруженнаяТаблицаВрачВремя.Количество() - 1 Цикл
					ИмяКолонки = "Врач_"+Число(Счетчик+1);
					
					Попытка
						ТЗПотенциальныхВариантовЗаписи.Колонки.Добавить(ИмяКолонки,ОписаниеТиповКВ,ВрачВремя[Счетчик].Сотрудник);
						МсВрачи.Добавить(ВрачВремя[Счетчик].Сотрудник);
					Исключение
					КонецПопытки;
					
					Сотрудник = ВыгруженнаяТаблицаВрачВремя[Счетчик].Сотрудник;
					Время = ВыгруженнаяТаблицаВрачВремя[Счетчик].Время;
					СвободноеВремяТекущегоВрача = ПолучитьРасписаниеОдногоВрача(РасписаниеВрачей, Сотрудник, День, Филиал);
					Если СвободноеВремяТекущегоВрача.Количество() <> 0 Тогда
						ВремяПредыдущегоПриема = ВрачВремя[Счетчик-1].Время;
						ТЗПотенциальныхВариантовЗаписи = ПодборСамогоРаннегоВремени(ТЗПотенциальныхВариантовЗаписи, ИмяКолонки, Сотрудник, Время, СвободноеВремяТекущегоВрача, ВремяПредыдущегоПриема);			
					Иначе
						ТЗПотенциальныхВариантовЗаписи = УдалениеНезаполненныхСтрок(ИмяКолонки, ТЗПотенциальныхВариантовЗаписи);
						// Для Этого дня не смотрим, потому что у какого-то врача нерабочий день
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТЗПотенциальныхВариантовЗаписи.Количество() > 0 Тогда
		
		// Суммарное время приемов
		ВремяПриемов = СуммарноеВремя(ВрачВремя);
		
		// Накладываем критерии поиска на расписание
		Если УдобноеВремяНачало <> Дата(1,1,1,0,0,0)
			Или УдобноеВремяКонец <> Дата(1,1,1,0,0,0)
			Или ЗначениеЗаполнено(ВремяОжидания) 
		Тогда
			Если ЗначениеЗаполнено(ВремяОжидания) Тогда
				ТЗПотенциальныхВариантовЗаписи = РасчетЗатраченногоВремени(ТЗПотенциальныхВариантовЗаписи, ВрачВремя.Количество(), ВрачВремя[ВрачВремя.Количество()-1].Время, ОписаниеТиповКВ, ВремяПриемов);
				ТЗПотенциальныхВариантовЗаписи = НаложениеКритериев(ТЗПотенциальныхВариантовЗаписи, УдобноеВремяНачало, УдобноеВремяКонец, ВрачВремя.Количество(), ВремяОжидания);
			Иначе
				ТЗПотенциальныхВариантовЗаписи = НаложениеКритериев(ТЗПотенциальныхВариантовЗаписи, УдобноеВремяНачало, УдобноеВремяКонец, ВрачВремя.Количество(), ВремяОжидания);
			КонецЕсли;
		КонецЕсли;
	    // *** БЛОК ФИЛЬТРАЦИИ *** //
		Если ТЗПотенциальныхВариантовЗаписи.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(ВремяОжидания) Тогда 
				// Добавление колонки затраченного времени
				ТЗПотенциальныхВариантовЗаписи = РасчетЗатраченногоВремени(ТЗПотенциальныхВариантовЗаписи, ВрачВремя.Количество(), ВрачВремя[ВрачВремя.Количество()-1].Время, ОписаниеТиповКВ, ВремяПриемов);
			КонецЕсли;
		
			// Находим самый ранний и самый поздний оптимальный вариант
			ТЗПоследнийВариант = ПоискСамогоПозднегоВарианта(ТЗПотенциальныхВариантовЗаписи.Скопировать()); 
			ТЗПотенциальныхВариантовЗаписи = ПоискСамогоРаннегоВарианта(ТЗПотенциальныхВариантовЗаписи);
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТЗПоследнийВариант, ТЗПотенциальныхВариантовЗаписи);
			ТЗПотенциальныхВариантовЗаписи.Сортировать("День, Врач_1");
			// Убираем варианты, если последний вариант и первый вариант одинаковы
			ТЗПотенциальныхВариантовЗаписи = УдалениеПовторений(ТЗПотенциальныхВариантовЗаписи);
	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("МсВрачи, ТЗПотенциальныхВариантовЗаписи", МсВрачи, ТЗПотенциальныхВариантовЗаписи);
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьРасписаниеОдногоВрача(ТЗ, Сотрудник, День, Филиал)
	
	ПолноеРасписание = ТЗ.НайтиСтроки(Новый Структура("Сотрудник, Дата, Филиал", Сотрудник, День, Филиал));
	Возврат ПолноеРасписание;

КонецФункции

Функция ВхождениеВИнтервалПервого(ГрафикПервогоВрача, ПродолжительностьПриемаПервого, НачалоПриемаВторогоВрача)
	
	ВремяПриемаПервогоВрача = Неопределено;
	ОбрИнд = ГрафикПервогоВрача.Количество()-1;
	Для Счетчик = 0 по ОбрИнд Цикл
		Строка = ГрафикПервогоВрача[ОбрИнд-Счетчик];
		МаксимальноеВремяПервого = НачалоПриемаВторогоВрача - (ПродолжительностьПриемаПервого - Дата(1,1,1));
		Если Строка.ВремяНачала <= МаксимальноеВремяПервого Тогда
			// Смотрим, можем ли максимальное время предложить
			Если Строка.ВремяОкончания  >= НачалоПриемаВторогоВрача Тогда
				ВремяПриемаПервогоВрача = МаксимальноеВремяПервого;
				Прервать;
				// Если нет, берем конец интервала
			ИначеЕсли Строка.ВремяОкончания - (ПродолжительностьПриемаПервого - Дата(1,1,1)) >= Строка.ВремяНачала Тогда
				ВремяПриемаПервогоВрача = Строка.ВремяОкончания - (ПродолжительностьПриемаПервого- Дата(1,1,1));
				Прервать;
			КонецЕсли;
		КонецЕсли;                                 	
	КонецЦикла;
	
	Возврат ВремяПриемаПервогоВрача;

КонецФункции

Функция ПодборСамогоРаннегоВремени(ТЗ, ИмяКолонки, Сотрудник, Время, СвободноеВремяВрача, ВремяПредыдущего)
	
	ИмяПоследнегоЗаполненногоСтолбца = ИмяПоследнего(ИмяКолонки);
	Для Каждого Строка Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда
			МинимальноеВремя = Строка[ИмяПоследнегоЗаполненногоСтолбца] + (ВремяПредыдущего - Дата(1,1,1));
			СамоеРаннееВремяДляЗаписи = РаннееВремя(СвободноеВремяВрача, Время, МинимальноеВремя);
			Строка[ИмяКолонки] = СамоеРаннееВремяДляЗаписи;
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем строки, для которых не получилось найти время
	ТЗ = УдалениеНезаполненныхСтрок(ИмяКолонки, ТЗ);
	
	Возврат ТЗ;
	
КонецФункции

Функция ИмяПоследнего(ИмяКолонки)
	
	РазделенноеИмя = СтрРазделить(ИмяКолонки, "_");
	Номер = РазделенноеИмя[1];
	Имя = "Врач_" +Число(Номер - 1);
	
	Возврат Имя;
	
КонецФункции

Функция РаннееВремя(ГрафикВрача, ПродолжительностьПриема, МинимальноеВремяДляЗаписи)
	
	Время = Неопределено;
	Для Счетчик = 0 по ГрафикВрача.Количество()-1 Цикл
		Строка = ГрафикВрача[Счетчик];
		Если Строка.ВремяОкончания >= МинимальноеВремяДляЗаписи  + (ПродолжительностьПриема - Дата(1,1,1)) Тогда
			Если Строка.ВремяНачала  + (ПродолжительностьПриема - Дата(1,1,1)) <=  Строка.ВремяОкончания Тогда			
				Если Строка.ВремяНачала <= МинимальноеВремяДляЗаписи Тогда
					Время = МинимальноеВремяДляЗаписи; 
					Прервать;
				Иначе 				
					Время = Строка.ВремяНачала; 
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Время;
	
КонецФункции

Функция УдалениеНезаполненныхСтрок(ИмяКолонки, ТЗ)
	
	ОбрИнд = ТЗ.Количество()-1;
	Для Счетчик = 0 по ОбрИнд Цикл
		СтрокаТЗ = ТЗ[ОбрИнд-Счетчик];
		Если Не ЗначениеЗаполнено(СтрокаТЗ[ИмяКолонки]) Тогда
			ТЗ.Удалить(ОбрИнд-Счетчик);
		КонецЕсли;	
	КонецЦикла;

	Возврат ТЗ;
	
КонецФункции

Функция НаложениеКритериев(ТЗ, УдобноеВремяНачало, УдобноеВремяКонец, НомерПоследнегоВрача, ВремяОжидания)
	
	ИмяКолонки = "Врач_" + НомерПоследнегоВрача;
	ОбрИнд = ТЗ.Количество()-1;
	Для Счетчик = 0 по ОбрИнд Цикл
		СтрокаТЗ = ТЗ[ОбрИнд-Счетчик];
		Если (УдобноеВремяНачало <> Дата(1,1,1,0,0,0) И СтрокаТЗ["Врач_1"] < УдобноеВремяНачало)
			Или (УдобноеВремяКонец <> Дата(1,1,1,0,0,0) И СтрокаТЗ[ИмяКолонки] > УдобноеВремяКонец)
			Или (ЗначениеЗаполнено(ВремяОжидания) И ВремяОжидания < СтрокаТЗ["ЗатраченноеВремя"]) 
		Тогда
			ТЗ.Удалить(ОбрИнд-Счетчик);
		КонецЕсли;	
	КонецЦикла;

	Возврат ТЗ;
	
КонецФункции

Функция РасчетЗатраченногоВремени(ТЗ, НомерПоследнегоВрача, ВремяПоследнего, ОписаниеТиповКВ, ВремяПриемов)
	
	ИмяПоследнейКолонки = "Врач_" + НомерПоследнегоВрача;
	ТЗ.Колонки.Добавить("ЗатраченноеВремя",ОписаниеТиповКВ,"Время ожидания");
	Для Каждого Строка Из Тз Цикл
		Строка.ЗатраченноеВремя = (Строка[ИмяПоследнейКолонки]) - (Строка.Врач_1 - Дата(1,1,1)) + (ВремяПоследнего - Дата(1,1,1)) - (ВремяПриемов- Дата(1,1,1)); 
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПоискСамогоПозднегоВарианта(ТЗ)
	
	НомерПоследнейСтроки = ТЗ.Количество()-1;
	ПоследняяСтрокаДата = ТЗ[НомерПоследнейСтроки].День;
	ПоследняяСтрокаПродолжительность = ТЗ[НомерПоследнейСтроки].ЗатраченноеВремя;
	
	ОбрИнд = ТЗ.Количество()-1;
	Для Счетчик = 1 по ОбрИнд Цикл
		СтрокаТЗ = ТЗ[ОбрИнд-Счетчик];
		Если СтрокаТЗ.День = ПоследняяСтрокаДата Тогда
			Если ПоследняяСтрокаПродолжительность <=  СтрокаТЗ.ЗатраченноеВремя Тогда
				СтрокаТЗ.Врач_1 = Неопределено;
			Иначе
				ПоследняяСтрокаДата = СтрокаТЗ.День;
				ПоследняяСтрокаПродолжительность = СтрокаТЗ.ЗатраченноеВремя;
				ТЗ[НомерПоследнейСтроки].Врач_1 = Неопределено;
				НомерПоследнейСтроки = ОбрИнд-Счетчик; 
			КонецЕсли;
		Иначе
			ПоследняяСтрокаДата = СтрокаТЗ.День;
			ПоследняяСтрокаПродолжительность = СтрокаТЗ.ЗатраченноеВремя;
			НомерПоследнейСтроки = ОбрИнд-Счетчик; 
		КонецЕсли;
	КонецЦикла;
	
	ТЗ = УдалениеНезаполненныхСтрок("Врач_1", ТЗ);
	
	Возврат ТЗ;

КонецФункции

Функция ПоискСамогоРаннегоВарианта(ТЗ)
	
	НомерПоследнейСтроки = ТЗ.Количество()-1;
	ПоследняяСтрокаДата = ТЗ[НомерПоследнейСтроки].День;
	ПоследняяСтрокаПродолжительность = ТЗ[НомерПоследнейСтроки].ЗатраченноеВремя;
	
	ОбрИнд = ТЗ.Количество()-1;
	Для Счетчик = 1 по ОбрИнд Цикл
		СтрокаТЗ = ТЗ[ОбрИнд-Счетчик];
		Если СтрокаТЗ.День = ПоследняяСтрокаДата Тогда
			Если ПоследняяСтрокаПродолжительность <  СтрокаТЗ.ЗатраченноеВремя Тогда
				СтрокаТЗ.Врач_1 = Неопределено;
			ИначеЕсли ПоследняяСтрокаПродолжительность >  СтрокаТЗ.ЗатраченноеВремя Тогда
				ПоследняяСтрокаДата = СтрокаТЗ.День;
				ПоследняяСтрокаПродолжительность = СтрокаТЗ.ЗатраченноеВремя;
				ТЗ[НомерПоследнейСтроки].Врач_1 = Неопределено;
				НомерПоследнейСтроки = ОбрИнд-Счетчик; 
			ИначеЕсли ПоследняяСтрокаПродолжительность =  СтрокаТЗ.ЗатраченноеВремя Тогда
				Если (СтрокаТЗ.Врач_1 - Дата(1,1,1)) < (ТЗ[НомерПоследнейСтроки].Врач_1 - Дата(1,1,1)) Тогда
					ПоследняяСтрокаДата = СтрокаТЗ.День;
					ПоследняяСтрокаПродолжительность = СтрокаТЗ.ЗатраченноеВремя;
					ТЗ[НомерПоследнейСтроки].Врач_1 = Неопределено;
					НомерПоследнейСтроки = ОбрИнд-Счетчик; 
				Иначе
					СтрокаТЗ.Врач_1 = Неопределено;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПоследняяСтрокаДата = СтрокаТЗ.День;
			ПоследняяСтрокаПродолжительность = СтрокаТЗ.ЗатраченноеВремя;
			НомерПоследнейСтроки = ОбрИнд-Счетчик; 
		КонецЕсли;
	КонецЦикла;
	
	ТЗ = УдалениеНезаполненныхСтрок("Врач_1", ТЗ);
	
	Возврат ТЗ;

КонецФункции

Функция УдалениеПовторений(ТЗ)
	
	ОбрИнд = ТЗ.Количество()-1;
	Для Счетчик = 1 по ОбрИнд Цикл
		СтрокаТЗ = ТЗ[ОбрИнд-Счетчик];
		Если СтрокаТЗ.День = ТЗ[ОбрИнд-Счетчик+1].День
			И (СтрокаТЗ.Врач_1 - Дата(1,1,1)) = (ТЗ[ОбрИнд-Счетчик+1].Врач_1 - Дата(1,1,1))
		Тогда
			ТЗ.Удалить(ОбрИнд-Счетчик+1);
		КонецЕсли;	
	КонецЦикла;

	Возврат ТЗ;
	
КонецФункции

Функция СуммарноеВремя(ВрачВремя)
	
	ВремяПриемов = Дата(1,1,1,0,0,0);
	Для Каждого Строка Из ВрачВремя Цикл
		ВремяПриемов = ВремяПриемов + (Строка.Время - Дата(1,1,1)); 
	КонецЦикла;
	
	Возврат ВремяПриемов;
	
КонецФункции

#КонецОбласти




