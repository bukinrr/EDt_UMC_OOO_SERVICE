#Область ПрограммныйИнтерфейс

// Настраивает вид формы по учетной политике
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - форма.
//  ИмяМетаданных	 - Строка						 - имя метаданных объекта формы.
//
Процедура НастроитьВидФормыПоУчетнойПолитике(ЭтаФорма, ИмяМетаданных) Экспорт
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();	
	ВестиУчетСкидок	 = мУчетнаяПолитика.ИспользоватьСкидки;                   
	
	Если ИмяМетаданных = "ОказаниеУслуг" Тогда
				
		#Область НастройкаВидимостиЭлементов
		
		Если Не мУчетнаяПолитика.ИспользоватьСертификаты 
			И ЭтаФорма.Элементы.Найти("Сертификат") <> Неопределено 
		Тогда
			ЭтаФорма.Элементы.Сертификат.Видимость = Ложь;
			ЭтаФорма.Элементы.НадписьОстатокСертификата.Видимость = Ложь;
		КонецЕсли;
		
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "Документ", мУчетнаяПолитика.ИспользоватьСтраховыеПолисы);
		
		// Установить видимость закладок документа "Оказание услуг".
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "ГруппаМатериалы",	мУчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги);
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "ГруппаТовары",		мУчетнаяПолитика.ВестиУчетТорговойДеятельности);
		
		// Закладка "Сертификаты".
		ВсеРавноЕстьСертификаты = Не ЭтаФорма.Объект.Ссылка.Пустая()
								И Не мУчетнаяПолитика.ИспользоватьСертификаты
								И (ЭтаФорма.Объект.Сертификаты.Количество() + ЭтаФорма.Объект.ПополнениеСертификатов.Количество() <> 0);
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "ГруппаСертификаты", мУчетнаяПолитика.ИспользоватьСертификаты Или ВсеРавноЕстьСертификаты);
		
		// Настроить табличное поле Работы документа "Оказание услуг".
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "РаботыСертификат",	мУчетнаяПолитика.ИспользоватьСертификаты);
		
		ТабличноеПолеСертификаты = ЭтаФорма.Элементы.Найти("Сертификаты");
		Если ТабличноеПолеСертификаты<>Неопределено Тогда
			РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "СертификатыДатаНачалаДействия",	мУчетнаяПолитика.РедактироватьДатуНачалаДействияСертификатаПриПродаже);
		КонецЕсли;
		
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "ГруппаСуммыПоДокументу", ВестиУчетСкидок);
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "РучнаяКорректировкаМатериалов", мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловОУ);
		#КонецОбласти
		
		// Настройка табличного поля Оплата
		Если ЭтаФорма.Элементы.Найти("ТабличноеПолеОплата")<>Неопределено Тогда
			
			РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "ОплатаСертификат", мУчетнаяПолитика.ИспользоватьСертификаты);

			Если ЭтаФорма.Элементы.Найти("ОплатаВидОплаты")<>Неопределено Тогда
				ВидыОплаты = Перечисления.ВидыОплаты;
				ЭУВидОплаты = ЭтаФорма.Элементы.ОплатаВидОплаты;
				ЭУВидОплаты.СписокВыбора.Очистить();
				ЭУВидОплаты.СписокВыбора.Добавить(ВидыОплаты.Наличными);
				ЭУВидОплаты.СписокВыбора.Добавить(ВидыОплаты.Безналичные);
				
				Если мУчетнаяПолитика.ЗаСчетФирмыВидОплатыИспользуется Тогда // Оплата за счет фирмы (в чеке как зачет аванса).
					ЭУВидОплаты.СписокВыбора.Добавить(ВидыОплаты.ЗаСчетФирмы);	
				КонецЕсли;
				Если мУчетнаяПолитика.ИспользоватьСертификаты Тогда // Абонементы, сертификаты.
					ЭУВидОплаты.СписокВыбора.Добавить(ВидыОплаты.Сертификатом);
				КонецЕсли;
			КонецЕсли;                                             
		КонецЕсли;
		
		#Область НастройкаДоступностиЭлементов
		ЕстьПравоИзмененияЦены			= Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ЗапретитьИзменениеЦен");
		ЕстьПравоИзмененияРучныхСкидок	= Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ЗапретитьИзменениеРучныхСкидок");
		
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "РаботыЦена",		ЕстьПравоИзмененияЦены);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "МатериалыЦена",	ЕстьПравоИзмененияЦены);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "ТоварыЦена",		ЕстьПравоИзмененияЦены);
		
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "РаботыГруппаСкидки",		ЕстьПравоИзмененияРучныхСкидок);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "МатериалыГруппаСкидки",	ЕстьПравоИзмененияРучныхСкидок);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "ТоварыГруппаСкидки",		ЕстьПравоИзмененияРучныхСкидок);
		
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "РаботыСумма",		ЕстьПравоИзмененияРучныхСкидок);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "МатериалыСумма",	ЕстьПравоИзмененияРучныхСкидок);
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "ТоварыСумма",		ЕстьПравоИзмененияРучныхСкидок);
		
		РаботаСФормамиКлиентСервер.УстановитьДоступностьЭлементаФормы(ЭтаФорма.Элементы, "СертификатыСумма",ЕстьПравоИзмененияЦены);
		#КонецОбласти

	ИначеЕсли ИмяМетаданных = "Прием" Тогда
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "ГруппаМатериалы", мУчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги);
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(ЭтаФорма.Элементы, "РучнаяКорректировкаМатериалов", мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловПриема);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ПечататьБумажныйЧек") Тогда
		ЭтаФорма["ПечататьБумажныйЧек"] = Не УправлениеНастройками.ПараметрУчета("ЧекиЭлектронноПоУмолчанию");
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициирует экспортные переменные формы документа, не привязанные к специфике документа.
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма документа
//  ИмяМетаданных		 - Строка						 - метаданные документа
//  ПараметрыВозврата	 - Структура					 - по типу документа возвращает признаки и значения переменных формы.
// 
// Возвращаемое значение:
//	Структура.
//
Функция ИнициироватьПеременныеМодуляФормы(ЭтаФорма, ИмяМетаданных, ПараметрыВозврата) Экспорт
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	Если ИмяМетаданных = "ОказаниеУслуг" Тогда
		
		ПараметрыВозврата.Вставить("мВестиУчетДлительностиРабот", мУчетнаяПолитика.ВестиУчетДлительностиРабот);
		ПараметрыВозврата.Вставить("мПериодичностьПланирования", мУчетнаяПолитика.ПериодичностьПланирования);
		
		ПараметрыВозврата.Вставить("мЕстьПравоИзмененияЦены", Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ЗапретитьИзменениеЦен"));
		ПараметрыВозврата.Вставить("мЕстьПравоИзмененияРучныхСкидок", Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ЗапретитьИзменениеРучныхСкидок"));
		
	КонецЕсли;
	
	Возврат ПараметрыВозврата;
	
КонецФункции

// Настраивает вид формы по метаданным документа. Общая процедура для однотипных настроек в документах.
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма.
//  МетаданныеОбъекта	 - Метаданные					 - метаданные объекта формы.
//
Процедура НастроитьВидФормыОбъекта(ЭтаФорма, МетаданныеОбъекта) Экспорт
	
	Если МетаданныеОбъекта.Имя = "ОказаниеУслуг" Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("БезСкладскогоУчета", МетаданныеОбъекта, "Товары")
			И ЭтаФорма.Объект.Товары.НайтиСтроки(Новый Структура("БезСкладскогоУчета", Истина)).Количество() <> 0
		Тогда
			ГруппаТовары = ЭтаФорма.Элементы.Товары;
			
			ЭлементФормы = ЭтаФорма.Элементы.Добавить("ТоварыБезСкладскогоУчета", Тип("ПолеФормы"), ГруппаТовары);
			ЭлементФормы.ПутьКДанным = "Объект.Товары.БезСкладскогоУчета";
			ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
		// Медосмотры
		МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
		Если МодульМедосмотрыСервер <> Неопределено Тогда
			МодульМедосмотрыСервер.СоздатьРеквизитыКомандыИЭлементыДляРаботыСоСправками(ЭтаФорма);
			МодульМедосмотрыСервер.УстановитьДанныеСправокИзРегистра(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление документа.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект	 - объект документа.
//  МетаданныеДокумента	 - Метаданные		 - метаданные документа
//  СтандартнаяОбработка - Булево			 - флаг стандартной обработки.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьПредставлениеДокумента(ДокументОбъект, МетаданныеДокумента, СтандартнаяОбработка) Экспорт
	
	Попытка
		Возврат Документы[МетаданныеДокумента.Имя].СформироватьПредставление(ДокументОбъект, СтандартнаяОбработка);
	Исключение
	КонецПопытки; 
	
	Возврат "";
	
КонецФункции

// Полное имя основной формы объекта по ссылке.
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка	 - любая ссылка.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьПолноеИмяОсновнойФормыПоСсылке(Ссылка) Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ФормаДокументаПередЗаписьюНаСервере(ЭтаФорма, ДокументОбъект) Экспорт
	
	МетаданныеОбъекта = ДокументОбъект.Метаданные();
	Если МетаданныеОбъекта.Имя = "ОказаниеУслуг" Тогда
		
		// Медосмотры
		МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
		Если МодульМедосмотрыСервер <> Неопределено Тогда
			МодульМедосмотрыСервер.ФормаОказаниеУслугПередЗаписьюНаСервере(ЭтаФорма, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти