#Область ПрограммныйИнтерфейс

// Добавляет в soap конверт электронную подпись тела сообщения.
Функция ПодписатьSoapСообщение(СообщениеSOAP, Знач Сертификат = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Сертификат) Тогда
		Сертификат = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьСертификатПодписанияСообщенийSOAP();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сертификат) Тогда
		ЗаписьЖурналаРегистрации("ИнтеграцияСЕГИСЗ.Информация", УровеньЖурналаРегистрации.Информация, , , "Ошибка подписания ответа веб-сервиса: не указан сертификат для подписи сообщений.");
		Возврат СообщениеSOAP;
	КонецЕсли;
	
	Попытка
		
		ДокументСТэгамиДляПодписи = ДобавитьВПодписываемыйXmlТэгиДляХраненияПодписи(СообщениеSOAP);
		ПодписываемыйXml = ДокументСТэгамиДляПодписи.ПодписываемыйXml;
		
		ПараметрыXMLDSig = ИнтеграцияЕГИСЗКлиентСервер.ПолучитьИЗаполнитьПараметрыXMLDSig(ДокументСТэгамиДляПодписи);
		
		РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, "Программа,ДанныеСертификата");
		ПСМК = ЭлектроннаяПодписьСлужебный.ПараметрыСозданияМенеджераКриптографии();
		ПСМК.Программа		= РеквизитыСертификата.Программа;
		ПСМК.ПоказатьОшибку = Истина;
		
		МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("Подписание", ПСМК);
		
		ПарольСертификата = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Сертификат);
		
		Если ЗначениеЗаполнено(ПарольСертификата) Тогда
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольСертификата;
		КонецЕсли;
		
		ДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
		СертификатДД = Новый СертификатКриптографии(ДанныеСертификата);
		
		ПодписываемыйXml = ЭлектроннаяПодписьСлужебный.Подписать(ПодписываемыйXml, ПараметрыXMLDSig, СертификатДД, МенеджерКриптографии);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ИнтеграцияЕГИСЗ.Ошибка", УровеньЖурналаРегистрации.Ошибка, , "Ошибка подписания сообщения SOAP",
			СтрШаблон("%1
						|
						|%2
						|",
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						?(ТипЗнч(ДанныеСертификата) = Тип("ДвоичныеДанные"), Base64Строка(ДанныеСертификата), "")));
		Возврат СообщениеSOAP;
		
	КонецПопытки;
	
	Возврат "<?xml version=""1.0"" encoding=""UTF-8""?>
			|" + ПодписываемыйXml;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РазыменовательПИSOAP(URIПространстваИменSOAP) Экспорт
	
	СоответствиеПИ = Новый Соответствие;
	Если ЗначениеЗаполнено(URIПространстваИменSOAP) Тогда
		СоответствиеПИ.Вставить("soap", URIПространстваИменSOAP);
	Иначе 
		СоответствиеПИ.Вставить("soap", ПространстваИмен.soap());
	КонецЕсли;
	СоответствиеПИ.Вставить("wsa",	ПространстваИмен.wsa());
	СоответствиеПИ.Вставить("wsse",	ПространстваИмен.wsse());
	СоответствиеПИ.Вставить("wsu",	ПространстваИмен.wsu());
	
	Возврат Новый РазыменовательПространствИменDOM(СоответствиеПИ);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в soap конверт тэги необходимые для хранения ЭП.
Функция ДобавитьВПодписываемыйXmlТэгиДляХраненияПодписи(ПодписываемыйXml) Экспорт
	
	ДокументDOM = ИнтеграцияЕГИСЗСерверПовтИсп.ПостроитьDOM(ПодписываемыйXml);
	КорневойЭлемент = ДокументDOM.ЭлементДокумента;
	
	// Добавим в конверт тег soap:Header, если его не было.
	Если Не "Header" = КорневойЭлемент.ПервыйДочерний.ЛокальноеИмя Тогда
		Header = ДокументDOM.СоздатьЭлемент(КорневойЭлемент.URIПространстваИмен, "Header");
		КорневойЭлемент.ВставитьПеред(Header, КорневойЭлемент.ПервыйДочерний);
	КонецЕсли;
	
	// Извлечем или добавим в тело сообщения атрибут wsu:Id.
	ПИ = РазыменовательПИSOAP(КорневойЭлемент.URIПространстваИмен);
	XPath = "/soap:Envelope/soap:Body/@wsu:Id";
	wsuId = ИнтеграцияЕГИСЗСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, XPath);
	Если Не ЗначениеЗаполнено(wsuId) Тогда
		// Добавляем атрибут wsu:Id.
		wsuId = "uuid:" + Строка(Новый УникальныйИдентификатор);
		Атрибут_wsuId = ДокументDOM.СоздатьАтрибут(ПространстваИмен.wsu(), "wsu:Id");
		Атрибут_wsuId.Значение = wsuId;
		КорневойЭлемент.ПоследнийДочерний.Атрибуты.УстановитьИменованныйЭлемент(Атрибут_wsuId);
	КонецЕсли;
	
	// Добавим в заголовок сообщения тэг Security.
	Security = ШаблонТэгаSecurity(wsuId);
	SecurityDOM = ИнтеграцияЕГИСЗСерверПовтИсп.ПостроитьDOM(Security);
	wsseSecurity = ДокументDOM.ИмпортироватьУзел(SecurityDOM.ПервыйДочерний, Истина);
	КорневойЭлемент.ПервыйДочерний.ДобавитьДочерний(wsseSecurity);
	ПодписываемыйXml = РаботаСDOMКлиентСервер.СтрокаXMLИзDOM(ДокументDOM);
	
	ДокументСТэгамиДляПодписи = Новый Структура;
	ДокументСТэгамиДляПодписи.Вставить("ПодписываемыйXml",	ПодписываемыйXml);
	ДокументСТэгамиДляПодписи.Вставить("wsuId",				wsuId);
	
	Возврат ДокументСТэгамиДляПодписи;
	
КонецФункции

Функция ШаблонТэгаSecurity(wsuId)
	
	Шаблон =
		"<wsse:Security xmlns:wsse=""%1"" xmlns:wsu=""%2"">
		|	<wsse:BinarySecurityToken
		|			EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary""
		|			ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""
		|			wsu:Id=""%4"">%6</wsse:BinarySecurityToken>
		|	<ds:Signature xmlns:ds=""%3"">
		|		<ds:SignedInfo>
		|			<ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
		|			<ds:SignatureMethod Algorithm=""%9""/>
		|			<ds:Reference URI=""#%5"">
		|				<ds:Transforms>
		|					<ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
		|				</ds:Transforms>
		|				<ds:DigestMethod Algorithm=""%10""/>
		|				<ds:DigestValue>%7</ds:DigestValue>
		|			</ds:Reference>
		|		</ds:SignedInfo>
		|		<ds:SignatureValue>%8</ds:SignatureValue>
		|		<ds:KeyInfo>
		|			<wsse:SecurityTokenReference>
		|				<wsse:Reference URI=""#%4"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/>
		|			</wsse:SecurityTokenReference>
		|		</ds:KeyInfo>
		|	</ds:Signature>
		|</wsse:Security>";
	
	Результат = СтрШаблон(
		Шаблон,
		ПространстваИмен.wsse(),
		ПространстваИмен.wsu(),
		ПространстваИмен.xmldsig(),
		"uuid:" + Строка(Новый УникальныйИдентификатор), // [SOAP_ACTOR]
		wsuId, // [WSU_ID]
		"%BinarySecurityToken%",
		"%DigestValue%",
		"%SignatureValue%",
		"%SignatureMethod%",
		"%DigestMethod%"
		
	);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти