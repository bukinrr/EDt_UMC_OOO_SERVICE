#Область ПрограммныйИнтерфейс

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНИЦИАЛИЗАЦИИ ФОРМ ДОКУМЕНТОВ

// Процедура настраивает видимость и доступность элементов формы по данным учетной политики
//
// Параметры:
//  ДокументОбъект	 - ДанныеФормыКоллекция	 - документ на форме.
//  фМетаданные		 - Метаданные			 - метаданные документа.
//
Процедура дкЗаполнитьШапкуДокумента(ДокументОбъект,фМетаданные) Экспорт
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();	
	
	ДокументОбъект.Номер = "";
	ДокументОбъект.Дата	 = ТекущаяДатаСеанса();
	
	Если фМетаданные.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
		ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Филиал",фМетаданные)
		И Не ЗначениеЗаполнено(ДокументОбъект.Филиал)
	Тогда
		ДокументОбъект.Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	КонецЕсли;
	
	Если фМетаданные.Реквизиты.Найти("Касса") <> Неопределено Тогда
		ДокументОбъект.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновнаяКасса");
		
		// Подстановка кассы, если в справочнике она всего одна
		Если Не ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			
			Запрос = Новый Запрос;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Филиал",фМетаданные) Тогда
				Запрос.УстановитьПараметр("Филиал", ДокументОбъект.Филиал);
			Иначе
				Запрос.УстановитьПараметр("Филиал", УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя());
			КонецЕсли;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Кассы.Ссылка,
			|	Кассы.Филиал
			|ПОМЕСТИТЬ Кассы
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	Кассы.Филиал = &Филиал
			|	ИЛИ Кассы.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	Кассы.Ссылка
			|ИЗ
			|	Кассы КАК Кассы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	Кассы.Ссылка
			|ИЗ
			|	Кассы КАК Кассы
			|ГДЕ
			|	Кассы.Филиал = &Филиал";
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			Выборка = РезультатЗапроса[1].Выбрать();
			Если Выборка.Количество() = 1 Тогда
				// Присвоение единственной кассы в базе данных
				Выборка.Следующий();
				ДокументОбъект.Касса = Выборка.Ссылка;
				
			ИначеЕсли Выборка.Количество() > 1 Тогда
				// Присвоение единственной кассы в филиале
				Выборка = РезультатЗапроса[2].Выбрать();
				Если Выборка.Количество() = 1 Тогда
					Выборка.Следующий();
					ДокументОбъект.Касса = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если фМетаданные.Реквизиты.Найти("Прейскурант") <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.Прейскурант) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Филиал",фМетаданные) Тогда
				ДокументОбъект.Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(ДокументОбъект.Филиал);
			Иначе 
				ДокументОбъект.Прейскурант = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойПрейскурант");
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;          
	
	Если фМетаданные.Имя = "ОказаниеУслуг" Тогда
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнаяСтатьяДДСОказанияУслуг");
		Если Не ЗначениеЗаполнено(ДокументОбъект.Сотрудник) Тогда
			ДокументОбъект.Сотрудник = ОтраслевыеДополнения.СотрудникПользователяПоФилиалу(ПараметрыСеанса.ТекущийПользователь, ДокументОбъект.Филиал);
		КонецЕсли;
	ИначеЕсли фМетаданные.Имя = "СписаниеТоваров" Тогда
		Если Не	ЗначениеЗаполнено(ДокументОбъект.Основание)
				Или (ТипЗнч(ДокументОбъект.Основание) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				 		И ТипЗнч(ДокументОбъект.Основание) <> Тип("ДокументСсылка.ПеремещениеМатериалов"))
		Тогда
			ДокументОбъект.ОтнесеноНаЗатраты = мУчетнаяПолитика.ОтноситьСписаниеНаЗатратыПоУмолчанию;
		КонецЕсли;
	ИначеЕсли фМетаданные.Имя = "Прием" Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.Врач) Тогда
			ДокументОбъект.Врач = ОтраслевыеДополнения.СотрудникПользователяПоФилиалу(ПараметрыСеанса.ТекущийПользователь, ДокументОбъект.Филиал);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Врач)
			 И Не ЗначениеЗаполнено(ДокументОбъект.СкладМатериалов)
		Тогда
			ДокументОбъект.СкладМатериалов = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(ДокументОбъект.Врач,"ОсновнойСкладМатериалов", ДокументОбъект.Филиал);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры                                                                                           

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ МОДУЛЕЙ ДОКУМЕНТОВ

// Стандартный обработчик заполнения при вводе нового на основании
//  Совмещен с заполнением реквизитов по умолчанию для новых документов
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект заполняемого документа
//  Основание	 - ДокументСсылка	 - ссылка на объект-основание заполнения
//  Копирование	 - Булево			 - признак копирования при вводе нового объекта.
//
Процедура дкОбработкаЗаполненияПоУмолчанию(ЭтотОбъект,Основание=Неопределено,Копирование=Ложь) Экспорт
	// Для новых объектов заполним реквизиты по умолчанию
	Если (ЭтотОбъект.ЭтоНовый()) И (Не Копирование) Тогда
		Попытка
			Если Не ЗначениеЗаполнено(ЭтотОбъект.Дата) Тогда
				ЭтотОбъект.Дата = ТекущаяДатаСеанса();
			КонецЕсли; 
		Исключение
		КонецПопытки;
    ИначеЕсли Копирование Тогда
		Попытка
			ЭтотОбъект.ДокументОснование=Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	Если Основание=Неопределено ИЛИ Копирование Тогда 
	Иначе
        // Попытаемся скопировать одноименные реквизиты шапки.
		Если ТипЗнч(Основание) <> Тип("Структура") // Самый частый исключающий вариант. Отсекаем сразу для уменьшения числа дальнейших проверок.
			И ОбщегоНазначения.ЗначениеСсылочногоТипа(Основание)
		Тогда
			МетОснование = Основание.Метаданные();
			
			РеквизитыИсключения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРЕГ("Дата,Номер,ДокументОснование,СуммаДокумента,ВидОперации"),",");
			Для Каждого РеквизитШапки Из МетОснование.Реквизиты Цикл
				Попытка
					// Исключим реквизиты которые не копируются
					РеквизитыИсключения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(,",");
					Если РеквизитыИсключения.Найти(ВРЕГ(РеквизитШапки.Имя)) <> Неопределено Тогда Продолжить; КонецЕсли;
					Если Не ЗначениеЗаполнено(ЭтотОбъект[РеквизитШапки.Имя])
						И ТипЗнч(ЭтотОбъект[РеквизитШапки.Имя]) <> Тип("Булево")
					Тогда
						ЭтотОбъект[РеквизитШапки.Имя]=Основание[РеквизитШапки.Имя];
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			// Пройдемся по табличным частям документов
			ТЧДокумента=ЭтотОбъект.Метаданные().ТабличныеЧасти;
			Для Каждого ТЧ Из ТЧДокумента Цикл
				// Очистим все ТЧ документа
				ЭтотОбъект[ТЧ.Имя].Очистить();
			КонецЦикла;
			Для Каждого ТЧОснования Из МетОснование.ТабличныеЧасти Цикл
				Если ТЧДокумента.Найти(ТЧОснования.Имя) = Неопределено Тогда Продолжить; КонецЕсли;
				// Идем по строкам и реквизитам табличной части и заполняем соответствующие.
				Для Каждого СтрокаТЧОснования Из Основание[ТЧОснования.Имя] Цикл
					НоваяСтрока=ЭтотОбъект[ТЧОснования.Имя].Добавить();
					Для Каждого РеквизитТЧ Из ТЧОснования.Реквизиты Цикл
						Попытка НоваяСтрока[РеквизитТЧ.Имя]=СтрокаТЧОснования[РеквизитТЧ.Имя]; Исключение КонецПопытки;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Посчитаем общую сумму по таблице товаров
		Попытка
			ЭтотОбъект.СуммаДокумента=ЭтотОбъект.РассчитатьСуммуВсего();
		Исключение	
			Попытка ЭтотОбъект.СуммаДокумента=ЭтотОбъект.Товары.Итог("Сумма"); Исключение КонецПопытки;
		КонецПопытки;
		// Заполним документ-основание
		Попытка
			ЭтотОбъект.ДокументОснование=Основание;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

// Общий обработчик заполнения при вводе нового на основании
//  Совмещен с заполнением реквизитов по умолчанию для новых документов
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект заполняемого документа
//  Основание	 - ДокументСсылка	 - ссылка на объект-основание заполнения
//  Копирование	 - Булево			 - признак копирования при вводе нового объекта.
//
Процедура дкОбработкаЗаполнения(ЭтотОбъект,Основание=Неопределено,Копирование=Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) <> Тип("Структура")
	Тогда
		ДокументОснование = Основание;
	ИначеЕсли ТипЗнч(Основание) = Тип("Структура")
			И Основание.Свойство("ДокументОснование")
	Тогда
		ДокументОснование = Основание.ДокументОснование;
	КонецЕсли; 
	
	Если дкОбработчикЗаполнения(ЭтотОбъект,?(ЗначениеЗаполнено(ДокументОснование),ДокументОснование,Основание),Копирование) = Неопределено Тогда
		// В иных случаях вызывается обработчик заполнения по умолчанию.
		дкОбработкаЗаполненияПоУмолчанию(ЭтотОбъект,ДокументОснование,Копирование);
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик заполнения при вводе нового на основании.
Функция дкОбработчикЗаполнения(ЭтотОбъект,Основание,Копирование) Экспорт
	
	СтандартнаяОбработка = Истина;
	РаботаСДокументамиСерверПереопределяемый.ОбработчикЗаполнения(СтандартнаяОбработка, ЭтотОбъект, Основание, Копирование);
	Если СтандартнаяОбработка <> Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Основание)=Тип("ДокументСсылка.Заявка") Тогда
		Если ТипЗнч(ЭтотОбъект)=Тип("ДокументОбъект.ОказаниеУслуг") Тогда
			ЗаполнятьОказаниеУслугСПриоритетомИсходныхДанныхЗаявки = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЗаполнятьОказаниеУслугСПриоритетомИсходныхДанныхЗаявки",ТекущаяДата());
			
			Если ЭтотОбъект.ДополнительныеСвойства.Свойство("Заявки") Тогда
				Если ЗаполнятьОказаниеУслугСПриоритетомИсходныхДанныхЗаявки Тогда 
					Рез = дкОбработкаЗаполнения_Заявка_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование, ЭтотОбъект.ДополнительныеСвойства.Заявки);
				Иначе 
					Рез = дкОбработкаЗаполнения_Приемы_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование, ЭтотОбъект.ДополнительныеСвойства.Заявки);
				КонецЕсли;
			Иначе
				// Заполнение по заявке
				Если ЗаполнятьОказаниеУслугСПриоритетомИсходныхДанныхЗаявки Тогда 
					Рез=дкОбработкаЗаполнения_Заявка_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование);
				Иначе 
					Рез = дкОбработкаЗаполнения_Приемы_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование);
				КонецЕсли;
			КонецЕсли;
			
			Возврат Рез;	
		ИначеЕсли ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.Прием") Тогда
			Рез = дкОбработкаЗаполнения_ЗаявкаСтруктура_Прием(ЭтотОбъект,Основание,Копирование);
			Возврат Рез;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Прием") Тогда
		Если ТипЗнч(ЭтотОбъект)=Тип("ДокументОбъект.ОказаниеУслуг") Тогда
			Рез=дкОбработкаЗаполнения_Прием_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование);
			Возврат Рез;		
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПрохождениеМедосмотра") Тогда
		Если ТипЗнч(ЭтотОбъект)=Тип("ДокументОбъект.ОказаниеУслуг") Тогда
			Рез=дкОбработкаЗаполнения_ПрохождениеМедосмотра_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование);
			Возврат Рез;		
		ИначеЕсли ТипЗнч(ЭтотОбъект)=Тип("ДокументОбъект.Прием") Тогда
			Рез=дкОбработкаЗаполнения_ПрохождениеМедосмотра_Прием(ЭтотОбъект,Основание,Копирование);
			Возврат Рез;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) =  Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		Попытка
			Ссылка = Основание.Ссылка;
			ПолеЕсть = Истина;
		Исключение
			ПолеЕсть = Ложь;
		КонецПопытки;
		Если ПолеЕсть и ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказВоВнешнююЛабораторию") Тогда
			Если ТипЗнч(ЭтотОбъект)=Тип("ДокументОбъект.Прием") Тогда 
				Рез = дкОбработкаЗаполнения_ЗаказВоВнешнююЛабораторию_Прием(ЭтотОбъект,Основание,Копирование);
				Возврат Рез;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("Структура") Тогда
		Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.Прием") Тогда
			Рез=дкОбработкаЗаполнения_ЗаявкаСтруктура_Прием(ЭтотОбъект,Основание,Копирование);
			Возврат Рез;
		Иначе
			дкОбработкаЗаполненияПоУмолчанию(ЭтотОбъект, Основание, Копирование);
			Возврат Истина;
		КонецЕсли; 
	ИначеЕсли Основание=Неопределено Тогда
		дкОбработкаЗаполненияПоУмолчанию(ЭтотОбъект, Основание, Копирование);
		Возврат Истина;
	КонецЕсли; 

	Возврат Неопределено;                                       
КонецФункции

// Обработчик заполнения документа ОказаниеУслуг на основании документа Заявка
//
// Возвращаемое значение:
//   Булево   – Результат выполнения функции.
//
Функция дкОбработкаЗаполнения_Заявка_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование, Знач Заявки = Неопределено)
	
	Если Заявки = Неопределено Тогда
		Заявки = Новый Массив;
		Заявки.Добавить(Основание);
	КонецЕсли;
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	ЭтотОбъект.ДокументОснование = Основание.Ссылка;
	ЭтотОбъект.Клиент = Основание.Клиент;
	ЭтотОбъект.Сотрудник = Основание.Сотрудник;
	ЭтотОбъект.ДатаНачала = Основание.ДатаНачала;
	ЭтотОбъект.ДатаОкончания = Основание.ДатаОкончания;
	ЭтотОбъект.Дата   = ТекущаяДатаСеанса();
	ЭтотОбъект.Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(ЭтотОбъект.Филиал);
	
	Для Каждого Заявка Из Заявки Цикл
		Для Каждого ТекСтрока Из Заявка.Работы Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
				И Не ТекСтрока.Номенклатура.ТолькоДляПланирования
			Тогда
				НоваяСтрока = ЭтотОбъект.Работы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				Если ТекСтрока.Номенклатура.ПродолжительностьЕдиницыУслуги <> 0 Тогда
					ПродолжительностьВМин = (ТекСтрока.ДатаОкончания - ТекСтрока.ДатаНачала)/60;
					НоваяСтрока.Количество = Окр((ПродолжительностьВМин/ТекСтрока.Номенклатура.ПродолжительностьЕдиницыУслуги)+0.5,0,0);
				Иначе	
					НоваяСтрока.Количество = 1;
				КонецЕсли; 
				
				НоваяСтрока.Цена	= Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, НоваяСтрока.Номенклатура).Цена;	
				НоваяСтрока.Сумма	= НоваяСтрока.Цена*НоваяСтрока.Количество;
				Если Заявка <> ЭтотОбъект.ДокументОснование Тогда 
					НоваяСтрока.Сотрудник	= ?(ЗначениеЗаполнено(ТекСтрока.Сотрудник), ТекСтрока.Сотрудник, Заявка.Сотрудник);
				Иначе
					НоваяСтрока.Сотрудник	= ТекСтрока.Сотрудник;
				КонецЕсли;
				Если НоваяСтрока.Сотрудник = ЭтотОбъект.Сотрудник Тогда
					НоваяСтрока.Сотрудник = Неопределено;
				КонецЕсли;
				
				НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтоматическиЗаполнятьНормыРасходаМатериаловОУ") Тогда
		ЗаполнитьМатериалыОказанияУслугПоНормам(ЭтотОбъект);
	КонецЕсли;
	                                                          
	Возврат Истина;
	
КонецФункции

// Обработчик заполнения документа Прием на основании структуры или документа Заявка
//
// Возвращаемое значение:
//   Булево   – Результат выполнения функции.
//
Функция дкОбработкаЗаполнения_ЗаявкаСтруктура_Прием(ЭтотОбъект,Основание,Копирование)
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание);
	Иначе	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	КонецЕсли;
	
	СписокСвойств = Новый СписокЗначений;
	СписокСвойств.Добавить("ДокументОснование", "Ссылка");
	СписокСвойств.Добавить("Клиент", "Клиент");
	СписокСвойств.Добавить("Врач", "Сотрудник");
	СписокСвойств.Добавить("Сотрудник", "Сотрудник");
	СписокСвойств.Добавить("МедицинскаяКарта", "Клиент");
	СписокСвойств.Добавить("Работы", "Работы");
	
	мОбрИнд = СписокСвойств.Количество()-1;
	Для Сч = 0 По мОбрИнд Цикл
		Свойство = СписокСвойств[мОбрИнд-Сч];
		Если Не (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, Свойство.Значение)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Основание, Свойство.Представление))
		Тогда
			СписокСвойств.Удалить(мОбрИнд-Сч);
		КонецЕсли;	
	КонецЦикла;
	 
	Для Каждого Свойство Из СписокСвойств Цикл
		
		Если Свойство.Значение = "МедицинскаяКарта" Тогда
			ЭтотОбъект.МедицинскаяКарта = ЭтотОбъект.Клиент.ОсновнаяМедицинскаяКарта;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПервичныйПрием") Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Основание, "ПервичныйПрием") Тогда
					ЭтотОбъект.ПервичныйПрием = Основание.ПервичныйПрием;
				Иначе
					Если Не ЗначениеЗаполнено(ЭтотОбъект.ПервичныйПрием) Тогда
						ЭтотОбъект.ПервичныйПрием = МедицинскаяДеятельность.ПолучитьТекущийПервичныйПриемМедкарты(ЭтотОбъект.МедицинскаяКарта);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Свойство.Значение = "Работы" Тогда
			
			ПроверятьУслугиСовпадениеВрача = Ложь;
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.Заявка") Тогда
				ВрачНовогоПриема = ?(ЗначениеЗаполнено(ЭтотОбъект.Врач), ЭтотОбъект.Врач, ПараметрыСеанса.ТекущийПользователь.Сотрудник);
				ПроверятьУслугиСовпадениеВрача = Ложь;
				ИмяРеквизитаСотрудник = "Сотрудник";
				ВрачШапкиЗаявки = Основание[ИмяРеквизитаСотрудник];
				Для Каждого ТекСтрока Из Основание.Работы Цикл
					ПроверятьУслугиСовпадениеВрача = ПроверятьУслугиСовпадениеВрача
						Или ВрачНовогоПриема = ?(ЗначениеЗаполнено(ТекСтрока[ИмяРеквизитаСотрудник]),
													ТекСтрока[ИмяРеквизитаСотрудник], 
													ВрачШапкиЗаявки);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из Основание.Работы Цикл 
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
					И Не ТекСтрока.Номенклатура.ТолькоДляПланирования
					И (Не ПроверятьУслугиСовпадениеВрача
						Или (ВрачНовогоПриема = ?(ЗначениеЗаполнено(ТекСтрока[ИмяРеквизитаСотрудник]), ТекСтрока[ИмяРеквизитаСотрудник], ВрачШапкиЗаявки)))
				Тогда
					НоваяСтрока = ЭтотОбъект.Работы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
					НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
					НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
					Если ТекСтрока.Номенклатура.ПродолжительностьЕдиницыУслуги <> 0 Тогда
						ПродолжительностьВМин = (ТекСтрока.Продолжительность - НачалоДня(ТекСтрока.Продолжительность))/60;
						НоваяСтрока.Количество = Окр((ПродолжительностьВМин/ТекСтрока.Номенклатура.ПродолжительностьЕдиницыУслуги)+0.5,0,0);
					Иначе	
						НоваяСтрока.Количество = 1;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "Материалы") Тогда
				Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтоматическиЗаполнятьНормыРасходаМатериаловПриема") Тогда
					ЭтотОбъект.ЗаполнитьМатериалыПоНормамРабот();
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ШаблоныПриема") Тогда
				Если Основание.Работы.Количество() <> 0 Тогда
					Для Каждого СтрокаРаботы Из Основание.Работы Цикл
						Если ЗначениеЗаполнено(СтрокаРаботы.Номенклатура.ИндивидуальныйШаблонОсмотра) Тогда
							ЭтотОбъект.ШаблоныПриема.Добавить().ШаблонПриема = СтрокаРаботы.Номенклатура.ИндивидуальныйШаблонОсмотра;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Свойство.Значение = "Врач" Тогда
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Свойство.Значение]) Тогда
				ЭтотОбъект[Свойство.Значение] = Основание[Свойство.Представление];
			КонецЕсли;
			
		Иначе
			ЭтотОбъект[Свойство.Значение] = Основание[Свойство.Представление];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция дкОбработкаЗаполнения_Прием_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование)
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	ЭтотОбъект.Клиент = Основание.Клиент;
	ЭтотОбъект.Сотрудник = Основание.Врач;
	ЭтотОбъект.Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(ЭтотОбъект.Филиал);
	ЭтотОбъект.СкладМатериалов = Основание.СкладМатериалов;
	ЭтотОбъект.РучнаяКорректировкаМатериалов = Основание.РучнаяКорректировкаМатериалов;
	
	Если ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.Заявка") Тогда
		ЭтотОбъект.ДокументОснование = Основание.ДокументОснование;
	КонецЕсли;
	
	НормативныеПродолжительностиУслуг = КалендарьПланирования.ПолучитьНормативныеПродолжительностиУслуг(ЭтотОбъект.Сотрудник, Основание.Работы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Отбор = Новый Структура("Сотрудник, Номенклатура");
	
	ОснованиеРаботы = Основание.Работы.Выгрузить();
	ОснованиеРаботы.Колонки.Добавить("КлючСтрокиНовыйДокумент", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекСтрока Из ОснованиеРаботы Цикл 
		НоваяСтрока = ЭтотОбъект.Работы.Добавить();                       
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		НоваяСтрока.Цена	= Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, НоваяСтрока.Номенклатура,,НоваяСтрока.ХарактеристикаНоменклатуры).Цена;	
		НоваяСтрока.Сумма	= НоваяСтрока.Цена*НоваяСтрока.Количество;
		НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
		
		// Для заполнения материалов
		ТекСтрока.КлючСтрокиНовыйДокумент = НоваяСтрока.КлючСтроки;
		
		// Заполнение фактической продолжительности
		Если Не ЗначениеЗаполнено(НоваяСтрока.Продолжительность) Тогда
			Отбор.Сотрудник = ЭтотОбъект.Сотрудник;
			Отбор.Номенклатура = НоваяСтрока.Номенклатура;
			мсСтр = НормативныеПродолжительностиУслуг.НайтиСтроки(Отбор);
			Если мсСтр.Количество() <> 0 Тогда
				НоваяСтрока.Продолжительность = Дата(1,1,1) + мсСтр[0].Продолжительность;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Основание.СкладМатериалов) Тогда
		ЭтотОбъект.СкладМатериалов = Основание.СкладМатериалов;
	КонецЕсли;
	
	Если Основание.Материалы.Количество() = 0 Тогда
		Если Не УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтоматическиЗаполнятьНормыРасходаМатериаловПриема") 
			И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтоматическиЗаполнятьНормыРасходаМатериаловОУ")
			И Не ЭтотОбъект.РучнаяКорректировкаМатериалов 
		Тогда
			ЗаполнитьМатериалыОказанияУслугПоНормам(ЭтотОбъект);
		КонецЕсли;
	Иначе
		Для Каждого ТекСтрока Из Основание.Материалы Цикл 
			НоваяСтрока = ЭтотОбъект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);        
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			НоваяСтрока.Количество	= ТекСтрока.Количество;
			Если Не ТекСтрока.ВходитВСтоимость Тогда
				НоваяСтрока.Цена	= Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, 
																	НоваяСтрока.Номенклатура,,
																	НоваяСтрока.ХарактеристикаНоменклатуры,
																	НоваяСтрока.ЕдиницаИзмерения).Цена;
				НоваяСтрока.Сумма	= НоваяСтрока.Цена * НоваяСтрока.Количество;
			КонецЕсли;
			
			НоваяСтрока.Склад		= ТекСтрока.Склад;
			НоваяСтрока.КлючСтроки	= НоваяСтрока.НомерСтроки;
			
			ОснованиеСтрокаРаботы = ОснованиеРаботы.Найти(ТекСтрока.КлючСтроки, "КлючСтроки");
			Если ОснованиеСтрокаРаботы <> Неопределено Тогда
				НоваяСтрока.КлючСтрокиРаботы = ОснованиеСтрокаРаботы.КлючСтрокиНовыйДокумент;
				
				// Проставляем в строку работы создаваемого Оказания услуг признак ручного редактирования материалов в строке.
				СтрокаРаботы = ЭтотОбъект.Работы.Найти(ОснованиеСтрокаРаботы.КлючСтрокиНовыйДокумент, "КлючСтроки");
				Если СтрокаРаботы <> Неопределено Тогда
					СтрокаРаботы.РучнаяКорректировкаМатериалов = Истина;
				КонецЕсли;
			Иначе
				НоваяСтрока.КлючСтрокиРаботы = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;                                                          
	                                                          
	Возврат Истина;
	
КонецФункции

Функция дкОбработкаЗаполнения_Приемы_ОказаниеУслуг(ЭтотОбъект, Основание, Копирование, Знач Заявки = Неопределено)
	
	Если Заявки = Неопределено Тогда
		Заявки = Новый Массив;
		Заявки.Добавить(Основание);
	КонецЕсли;
	
	// Получение списка приемов по документу-основанию
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Прием.Ссылка,
	                      |	Прием.Работы.(
	                      |		Ссылка,
	                      |		НомерСтроки,
	                      |		Номенклатура,
	                      |		ХарактеристикаНоменклатуры,
	                      |		Продолжительность,
	                      |		КлючСтроки,
	                      |		Количество,
	                      |		НомерПробы,
	                      |		ИД
	                      |	),
	                      |	Прием.Материалы.(
	                      |		Ссылка,
	                      |		НомерСтроки,
	                      |		Склад,
	                      |		Работа,
	                      |		Номенклатура,
						  |		СерияНоменклатуры,
	                      |		ХарактеристикаНоменклатуры,
	                      |		Количество,
	                      |		ЕдиницаИзмерения,
	                      |		Коэффициент,
	                      |		КлючСтроки,
	                      |		ВходитВСтоимость
	                      |	),
	                      |	Прием.Врач,
	                      |	Прием.СкладМатериалов,
						  | Прием.ДокументОснование
	                      |ИЗ
	                      |	Документ.Прием КАК Прием
	                      |ГДЕ
						  |	//%ОтборКлиент Прием.Клиент = &Клиент И
						  |	Прием.ДокументОснование В (&Заявки)
	                      |	И НЕ Прием.ПометкаУдаления
	                      |");
	Запрос.УстановитьПараметр("Заявки", Заявки);
	Если ЗначениеЗаполнено(ЭтотОбъект.Клиент) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборКлиент", "");
		Запрос.УстановитьПараметр("Клиент",ЭтотОбъект.Клиент);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать(); // Приёмы этих заявок.
	
	Если Выборка.Количество() = 0 Тогда 
		дкОбработкаЗаполнения_Заявка_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование, Заявки);
	Иначе
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
		ЭтотОбъект.ДокументОснование = Основание.Ссылка;
		ЭтотОбъект.Клиент = Основание.Клиент;
		ЭтотОбъект.Сотрудник = Основание.Сотрудник;
		ЭтотОбъект.ДатаНачала = Основание.ДатаНачала;
		ЭтотОбъект.Дата   = ТекущаяДатаСеанса();
		ЭтотОбъект.Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(ЭтотОбъект.Филиал);
		
		// Определение списка заявок, по которым нет приёмов и, следовательно, заполнение продажи будет по заявке, а не по приёму.
		Сотрудники = Новый Массив;
		НоменклатураРабот = Новый Массив;
		ЗаявкиБезПриемов = Новый Массив;
		
		Для Каждого Заявка Из Заявки Цикл
			// Определим по каким Заявкам не нашлось Приемов
			Если НЕ Выборка.НайтиСледующий(Новый Структура("ДокументОснование", Заявка)) Тогда
				Сотрудники.Добавить(Заявка.Сотрудник);
				Для Каждого СтрокаРаботы Из Заявка.Работы.Выгрузить() Цикл
					НоменклатураРабот.Добавить(СтрокаРаботы.Номенклатура);
				КонецЦикла;
				
				ЗаявкиБезПриемов.Добавить(Заявка);
			КонецЕсли;
			
			Выборка.Сбросить();
		КонецЦикла;
		
		// Подготовка данных о нормативной продолжительности услуг
		НормативныеПродолжительностиУслуг = КалендарьПланирования.ПолучитьНормативныеПродолжительностиУслуг(Сотрудники, НоменклатураРабот);
		Отбор = Новый Структура("Сотрудник, Номенклатура");
		Выборка.Сбросить();
		
		// Заполнение табличных частей документа Оказание услуг
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ЭтотОбъект.СкладМатериалов) Тогда 
				ЭтотОбъект.СкладМатериалов = Выборка.СкладМатериалов;
			КонецЕсли;
			
		    Работы = Выборка.Работы.Выгрузить();
			Работы.Колонки.Добавить("КлючСтрокиНовыйДокумент", Новый ОписаниеТипов("Число"));
			
			Для Каждого СтрокаРаботы Из Работы Цикл 
				НоваяСтрока = ЭтотОбъект.Работы.Добавить();                       
				ЗаполнитьЗначенияСвойств(НоваяСтрока,строкаРаботы);
				НоваяСтрока.Номенклатура = строкаРаботы.Номенклатура;                                   
				НоваяСтрока.Количество	 = строкаРаботы.Количество;
				НоваяСтрока.Цена	= Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, НоваяСтрока.Номенклатура).Цена;	
				НоваяСтрока.Сумма	= НоваяСтрока.Цена*НоваяСтрока.Количество;
				НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
				НоваяСтрока.Сотрудник	 = Выборка.Врач;
				
				// Заполнение фактической продолжительности
				Если Не ЗначениеЗаполнено(НоваяСтрока.Продолжительность) Тогда
					Отбор.Сотрудник = ЭтотОбъект.Сотрудник;
					Отбор.Номенклатура = НоваяСтрока.Номенклатура;
					мсСтр = НормативныеПродолжительностиУслуг.НайтиСтроки(Отбор);
					Если мсСтр.Количество() <> 0 Тогда
						НоваяСтрока.Продолжительность = Дата(1,1,1) + мсСтр[0].Продолжительность;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаРаботы.КлючСтрокиНовыйДокумент = НоваяСтрока.КлючСтроки;
				
			КонецЦикла;
			
			Материалы  = Выборка.Материалы.Выгрузить();
			Если Материалы.Количество() = 0 Тогда
				Если Не УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтоматическиЗаполнятьНормыРасходаМатериаловПриема") 
					И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтоматическиЗаполнятьНормыРасходаМатериаловОУ")
					И Не ЭтотОбъект.РучнаяКорректировкаМатериалов 
				Тогда
					ЗаполнитьМатериалыОказанияУслугПоНормам(ЭтотОбъект);
				КонецЕсли;
			Иначе
				Для Каждого СтрокаМатериалы Из Материалы Цикл 
					НоваяСтрока = ЭтотОбъект.Материалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМатериалы);        
					НоваяСтрока.Номенклатура = строкаМатериалы.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = строкаМатериалы.СерияНоменклатуры;
					НоваяСтрока.Склад = ?(ЗначениеЗаполнено(СтрокаМатериалы.Склад),СтрокаМатериалы.Склад, Выборка.СкладМатериалов);                 
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаМатериалы.ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения = СтрокаМатериалы.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
					
					НоваяСтрока.Количество	= СтрокаМатериалы.Количество;
					Если Не строкаМатериалы.ВходитВСтоимость Тогда
						НоваяСтрока.Цена	= Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, 
																			   НоваяСтрока.Номенклатура,
																			   ,, 
																			   НоваяСтрока.ЕдиницаИзмерения).Цена;	
						НоваяСтрока.Сумма	= НоваяСтрока.Цена * НоваяСтрока.Количество;
					КонецЕсли;
					
					НоваяСтрока.КлючСтроки	= НоваяСтрока.НомерСтроки;
					
					ОснованиеСтрокаРаботы = Работы.Найти(СтрокаМатериалы.КлючСтроки, "КлючСтроки");
					Если ОснованиеСтрокаРаботы <> Неопределено Тогда
						НоваяСтрока.КлючСтрокиРаботы = ОснованиеСтрокаРаботы.КлючСтрокиНовыйДокумент;
						
						// Проставляем в строку работы создаваемого Оказания услуг признак ручного редактирования материалов в строке.
						СтрокаРаботы = ЭтотОбъект.Работы.Найти(ОснованиеСтрокаРаботы.КлючСтрокиНовыйДокумент, "КлючСтроки");
						Если СтрокаРаботы <> Неопределено Тогда
							СтрокаРаботы.РучнаяКорректировкаМатериалов = Истина;
						КонецЕсли;
					Иначе
						НоваяСтрока.КлючСтрокиРаботы = 1;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;           			
		КонецЦикла;
		
		Для Каждого Заявка Из ЗаявкиБезПриемов Цикл
			Для Каждого ТекСтрока Из Заявка.Работы Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
					И Не ТекСтрока.Номенклатура.ТолькоДляПланирования
				Тогда
					НоваяСтрока = ЭтотОбъект.Работы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
					НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
					Если ТекСтрока.Номенклатура.ПродолжительностьЕдиницыУслуги <> 0 Тогда
						ПродолжительностьВМин = (ТекСтрока.ДатаОкончания - ТекСтрока.ДатаНачала)/60;
						НоваяСтрока.Количество = Окр((ПродолжительностьВМин/ТекСтрока.Номенклатура.ПродолжительностьЕдиницыУслуги)+0.5,0,0);
					Иначе	
						НоваяСтрока.Количество = 1;
					КонецЕсли; 
					
					НоваяСтрока.Цена	= Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, НоваяСтрока.Номенклатура).Цена;	
					НоваяСтрока.Сумма	= НоваяСтрока.Цена*НоваяСтрока.Количество;
					Если Заявка <> ЭтотОбъект.ДокументОснование Тогда 
						НоваяСтрока.Сотрудник	= ?(ЗначениеЗаполнено(ТекСтрока.Сотрудник), ТекСтрока.Сотрудник, Заявка.Сотрудник);
					Иначе
						НоваяСтрока.Сотрудник	= ТекСтрока.Сотрудник;
					КонецЕсли;
					НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект.СкладМатериалов) И ЗначениеЗаполнено(ЭтотОбъект.Сотрудник) Тогда 
			ЭтотОбъект.СкладМатериалов = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(ЭтотОбъект.Сотрудник,"ОсновнойСкладМатериалов");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция дкОбработкаЗаполнения_ПрохождениеМедосмотра_ОказаниеУслуг(ЭтотОбъект,Основание,Копирование)
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	ЭтотОбъект.Клиент = Основание.Клиент;
	ЭтотОбъект.Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала(ЭтотОбъект.Филиал);
	
	ЭтотОбъект.ДокументОснование = Основание.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсключаемаяНоменклатураПриВыставленииСчета.Номенклатура
	               |ПОМЕСТИТЬ ИсключаемаяНоменклатура
	               |ИЗ
	               |	РегистрСведений.ИсключаемаяНоменклатураПриВыставленииСчета КАК ИсключаемаяНоменклатураПриВыставленииСчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб.Действие КАК Действие
	               |ПОМЕСТИТЬ ДействияМедосмотраПолн
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействияМедосмотраПолн.Действие КАК Действие,
	               |	ВЫРАЗИТЬ(ДействияМедосмотраПолн.Действие КАК Справочник.ДействияМедосмотра).Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор ССЫЛКА Документ.ОтметкаВыполненияМедосмотра
	               |			ТОГДА ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор.Сотрудник
	               |		КОГДА ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор ССЫЛКА Документ.Прием
	               |			ТОГДА ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор.Врач
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	КОНЕЦ КАК Сотрудник,
	               |	ЕСТЬNULL(ОтметкиВыполненияДействийСрезПоследних.Выполнено, ЛОЖЬ) КАК Выполнено
	               |ПОМЕСТИТЬ ДействияМедосмотра
	               |ИЗ
	               |	ДействияМедосмотраПолн КАК ДействияМедосмотраПолн
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних КАК ОтметкиВыполненияДействийСрезПоследних
	               |		ПО (ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра = &ПрохождениеМедОсмотра)
	               |			И ДействияМедосмотраПолн.Действие = ОтметкиВыполненияДействийСрезПоследних.Действие
	               |ГДЕ
	               |	НЕ ДействияМедосмотраПолн.Действие В
	               |				(ВЫБРАТЬ
	               |					ИсклНоменклатура.Номенклатура
	               |				ИЗ
	               |					ИсключаемаяНоменклатура КАК ИсклНоменклатура)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействияМедосмотра.Действие КАК Действие,
	               |	ВЫРАЗИТЬ (ДействияМедосмотра.Действие КАК Справочник.ДействияМедосмотра).Представление КАК ДействиеПредставление,
	               |	ДействияМедосмотра.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	ДействияМедосмотра.Сотрудник КАК Сотрудник
	               |ИЗ
	               |	ДействияМедосмотра КАК ДействияМедосмотра
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДок, Прейскурант = &Прейскурант) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ДействияМедосмотра.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	Запрос.УстановитьПараметр("ДатаДок", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Прейскурант", ЭтотОбъект.Прейскурант);
	Запрос.УстановитьПараметр("Таб", Основание.ДействияМедосмотра.Выгрузить());
	Запрос.УстановитьПараметр("ПрохождениеМедОсмотра", Основание);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			ВрачИсполнитель = Выборка.Сотрудник;
			Если Не ЗначениеЗаполнено(ВрачИсполнитель) Тогда
				Специализация = Выборка.Действие.Специализация;
				Если Не ЗначениеЗаполнено(Специализация) Тогда
					Специализация = Выборка.Номенклатура.КатегорияВыработки;
				КонецЕсли;
				ВрачИсполнитель = МедосмотрыСерверПовтИсп.ПолучитьСотрудникаМедкомиссии(Основание.ДатаЗавершения, Основание.Филиал, Специализация);
				Если Не ЗначениеЗаполнено(ВрачИсполнитель) Тогда
					ВрачИсполнитель = Основание.ПредседательМедКомиссии;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ЭтотОбъект.Работы.Добавить();                       
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;                                   
			НоваяСтрока.Количество	 = 1;
			НоваяСтрока.Цена	= Выборка.Цена;	
			НоваяСтрока.Сумма	= Выборка.Цена;
			НоваяСтрока.Сотрудник	= ВрачИсполнитель;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Действие медосмотра """ + Выборка.ДействиеПредставление + """ не имеет привязки с номенклатурой для переноса в документ продажи!");
		КонецЕсли;
		
	КонецЦикла;                                        
	
	// На случай если к одному действию несколько одинаковых услуг.
	ЭтотОбъект.Работы.Свернуть("Номенклатура,Цена, Сотрудник","Количество,Сумма");
	Для Каждого НоваяСтрока Из ЭтотОбъект.Работы Цикл
		НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
	КонецЦикла;
	
	// Подстановка полиса.
	Если ЗначениеЗаполнено(Основание.СписокНаПрохождениеМедосмотра) Тогда
		ВидПолиса = Основание.СписокНаПрохождениеМедосмотра.ВидПолиса;
		ЭтотОбъект.Документ = МедицинскоеСтрахование.ПолисПоВиду(ЭтотОбъект.Клиент, ВидПолиса, Истина);
	КонецЕсли;
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтоматическиЗаполнятьНормыРасходаМатериаловОУ")
		И Не ЭтотОбъект.РучнаяКорректировкаМатериалов 
	Тогда
		ЗаполнитьМатериалыОказанияУслугПоНормам(ЭтотОбъект, Ложь);
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция дкОбработкаЗаполнения_ПрохождениеМедосмотра_Прием(ЭтотОбъект,Основание,Копирование)
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,,"Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	
	ЭтотОбъект.ПервичныйПрием = Основание;
	
	ЭтотОбъект.Врач = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Врач.Специализация) Тогда
		ЭтотОбъект.Специализация = ЭтотОбъект.Врач.Специализация;
	ИначеЕсли ЭтотОбъект.Врач.Специализации.Количество() <> 0 Тогда
		ЭтотОбъект.Специализация = ЭтотОбъект.Врач.Специализации[0].Специализация;
	КонецЕсли;
			
	Возврат Истина;
	
КонецФункции

Функция дкОбработкаЗаполнения_ЗаказВоВнешнююЛабораторию_Прием(ЭтотОбъект,Основание,Копирование)
                               
	Заказ = Основание.Ссылка;
	Попытка
		КодПробы = Основание.КодПробы;
	Исключение 
		КодПробы = 0;
	КонецПопытки;
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Заказ,,"Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	
	ЭтотОбъект.Основание = Заказ;
	МедКартаПрием = ОтраслевыеДополнения.НайтиМедкартуПриемПоЗаказуВоВнешнююЛабораторию(Заказ, ОтраслевыеДополнения.НоменклатурыЗаказа(Заказ));
	ЭтотОбъект.МедицинскаяКарта = МедКартаПрием.МедКарта;
	ЭтотОбъект.ПервичныйПрием = МедКартаПрием.Прием;
	
	РезультатПолученный = Заказ.Результаты.Найти(КодПробы, "КодПробы");
	ИсследованияПОлученные = Заказ.Исследования.НайтиСтроки(Новый Структура("КодПробы",КодПробы)); 
	
	Если ЗначениеЗаполнено(РезультатПолученный) Тогда 
		ТекстОсмотра = РезультатПолученный.Результат.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОсмотра) Тогда 
		ЭтотОбъект.Осмотр = ТекстОсмотра;
	КонецЕсли;
	
	Для Каждого СтрокаИсследование Из ИсследованияПОлученные Цикл
		НоваяСтрока = ЭтотОбъект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсследование);
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерПробы = СтрокаИсследование.КодПробы;
		НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
	КонецЦикла;
	
	Возврат Истина;
                
КонецФункции

Процедура ЗаполнитьМатериалыОказанияУслугПоНормам(ДокументОбъект, КорректировкаПоНормеНаДокумент = Неопределено)
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОбъект);
	ДокументОбъект.Материалы.Загрузить(Документы.ОказаниеУслуг.ЗаполнитьМатериалыПоНормамРабот( СтруктураШапкиДокумента,
																								ДокументОбъект.Работы.Выгрузить(),
																								КорректировкаПоНормеНаДокумент));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ РЕКВИЗИТОВ ФОРМ ДОКУМЕНТОВ

// Обработка изменения реквизитов документов
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект			 - Документ, реквизит которого обрабатывается.
//  Имя			 - Строка					 - Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ТекСтрока	 - Структура				 - Ссылка на строку табличной части документа, реквизит которой обрабатывается.
//  ЭтаФорма	 - ФормаКлиентскогоПриложения	 - Форма документа. Если значение неопределено, то
//  	производится программная обработка реквизитов.
//  ДопПараметры - Стурктура					 - Структура, содержащая дополнительные параметры обработки реквизита.
// 
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
//
Функция дкОбработкаРеквизита(ЭтотОбъект,Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено) Экспорт
	
	РезультатОбработки = Истина;
	
	// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ"
	Если Имя="Товары.Номенклатура" или Имя="Материалы.Номенклатура" Тогда
		Рез=Истина;
		// Установим количество
		Попытка
			Если ТекСтрока.Количество=0 Тогда ТекСтрока.Количество=1 КонецЕсли;
		Исключение КонецПопытки;
		Если (ТекСтрока.ЕдиницаИзмерения.Владелец<>ТекСтрока.Номенклатура)  тогда
			ТекСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ТекСтрока.ЕдиницаИзмерения.Наименование,Истина,,ТекСтрока.Номенклатура);
			Если не ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				Если Имя = "Товары.Номенклатура" И ЗначениеЗаполнено(ТекСтрока.Номенклатура.ЕдиницаТоваров) И
					 (ТипЗнч(ЭтотОбъект)=Тип("ДокументОбъект.ОказаниеУслуг") Или ТипЗнч(ЭтотОбъект)=Тип("ДокументОбъект.ПоступлениеТоваровУслуг"))
				Тогда
					ТекСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаТоваров;					
				Иначе
					ТекСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков;
				КонецЕсли;
			КонецЕсли;
			ТекСтрока.Коэффициент = ТекСтрока.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		дкУстановитьЦенуСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		
		Возврат Рез;
	ИначеЕсли Имя = "Работы.Номенклатура" Тогда	
		
		Рез=Истина;
		ИмяТЧ = "Работы";
		дкУстановитьЦенуСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		Если ЗначениеЗаполнено(ТекСтрока.Сертификат) и не СертификатыКлиентов.НоменклатураВходитВОграничениеСертификата(ТекСтрока.Номенклатура,ТекСтрока.Сертификат) Тогда
			ТекСтрока.Сертификат = Неопределено;
		КонецЕсли;
		
		Возврат Рез;
		
	ИначеЕсли Имя = "Товары.ХарактеристикаНоменклатуры"	или
		      Имя = "Работы.ХарактеристикаНоменклатуры" или
			  Имя = "Материалы.ХарактеристикаНоменклатуры"
	Тогда
		
		Рез=Истина;
		Если ТекСтрока.Количество=0 Тогда ТекСтрока.Количество=1; КонецЕсли; 
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		дкУстановитьЦенуСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		дкРассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		
	ИначеЕсли Имя="Товары.Количество"	 или 
			  Имя="Работы.Количество"    Или
		      Имя="Материалы.Количество" 
	Тогда 
	
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);

		Попытка
			ТекСтрока.Сумма=ТекСтрока.Цена*ТекСтрока.Количество;
			дкРассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		Исключение
		КонецПопытки;
		
	ИначеЕсли Имя="Товары.ЕдиницаИзмерения" или  Имя="Материалы.ЕдиницаИзмерения" тогда
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		СтарыйКоэффициент = ?(ЗначениеЗаполнено(ТекСтрока.Коэффициент),ТекСтрока.Коэффициент,1);
		ТекСтрока.Коэффициент = ТекСтрока.ЕдиницаИзмерения.Коэффициент;
		
		дкУстановитьЦенуСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока);
		
	ИначеЕсли Имя="Товары.Цена" или  Имя="Материалы.Цена" или Имя="Работы.Цена" Тогда
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		Попытка
			ТекСтрока.Сумма=ТекСтрока.Цена*ТекСтрока.Количество;
			дкРассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		Исключение
		КонецПопытки; 
		
	ИначеЕсли Имя="Товары.Сумма" или  Имя="Материалы.Сумма" или Имя="Работы.Сумма" Тогда
		Попытка
			ТекКоличество=ТекСтрока.Количество;
		Исключение
		КонецПопытки; 
		Если ТекКоличество<>0 Тогда
			Попытка 
				ТекСтрока.Цена=ТекСтрока.Сумма/ТекКоличество; 
			Исключение 
			КонецПопытки;
		КонецЕсли; 
		
		Попытка
			дкРассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		Исключение
		КонецПопытки;
		
	ИначеЕсли Имя = "Товары.ПроцентСкидки" или
		      Имя = "Работы.ПроцентСкидки" или
			  Имя = "Материалы.ПроцентСкидки"
	Тогда
		дкРассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
	
	ИначеЕсли Имя = "Товары.СуммаСкидки" или
		      Имя = "Работы.СуммаСкидки" или
			  Имя = "Материалы.СуммаСкидки"
	Тогда
	
		ТекСтрока.СуммаСкидки = Мин(ТекСтрока.СуммаСкидки,ТекСтрока.Цена * ТекСтрока.Количество);
		Если ТекСтрока.Цена <> 0 И ТекСтрока.Количество <> 0 Тогда
			дкПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		КонецЕсли;
		
	// ОБРАБОТКА РЕКВИЗИТОВ ШАПКИ ДОКУМЕНТА
	ИначеЕсли Имя="ИнвентаризацияТоваров" Тогда
		
		ЕстьИнвентаризация = ЗначениеЗаполнено(ЭтотОбъект.Инвентаризация);
		Если ЕстьИнвентаризация Тогда
			ЭтотОбъект.Склад = ЭтотОбъект.Инвентаризация.Склад;
		КонецЕсли;
		
		Если ЭтаФорма<>Неопределено Тогда 
			ЭтаФорма.ЭлементыФормы.Склад.Доступность = не ЕстьИнвентаризация;
		КонецЕсли;
		
	Иначе	
		// Обработка реквизита с заданым именем не предусмотрена
		Возврат Ложь;
	КонецЕсли; 

	// Если при обработке ошибок нет - все нормально
	Возврат РезультатОбработки;
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОДНОТИПНОГО ПОВЕДЕНИЯ ДОКУМЕНТОВ .

// Процедура заполняет цену строки табличной части документа
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект документа-владельца строки табличной части
//  ИмяТЧ		 - Строка			 - Имя табличной части строки
//  ТекСтрока	 - Структура		 - Строка табличной части документа.
//
Процедура дкУстановитьЦенуСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока) Экспорт
	
	фМетаданные            = ЭтотОбъект.Метаданные();
	фМетаданныеРеквизитыТЧ = фМетаданные.ТабличныеЧасти[ИмяТЧ].Реквизиты;
	                                                 
	Если фМетаданные.Реквизиты.Найти("Прейскурант")<>Неопределено и фМетаданныеРеквизитыТЧ.Найти("Цена")<>Неопределено Тогда
		Если фМетаданныеРеквизитыТЧ.Найти("ХарактеристикаНоменклатуры") <> Неопределено Тогда
			Если фМетаданныеРеквизитыТЧ.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
				СтруктураЦен = Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, ТекСтрока.Номенклатура,ЭтотОбъект.Дата,ТекСтрока.ХарактеристикаНоменклатуры,ТекСтрока.ЕдиницаИзмерения);	
			Иначе
				СтруктураЦен = Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, ТекСтрока.Номенклатура,ЭтотОбъект.Дата,ТекСтрока.ХарактеристикаНоменклатуры);	
			КонецЕсли;
		Иначе                                                     
			СтруктураЦен = Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, ТекСтрока.Номенклатура,ЭтотОбъект.Дата,,ТекСтрока.ЕдиницаИзмерения);	
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураЦен) и ЗначениеЗаполнено(СтруктураЦен.Цена) Тогда
			ТекСтрока.Цена = СтруктураЦен.Цена;
		Иначе
			Если фМетаданныеРеквизитыТЧ.Найти("ХарактеристикаНоменклатуры") <> Неопределено Тогда
				СтруктураЦен = Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, ТекСтрока.Номенклатура,ЭтотОбъект.Дата,ТекСтрока.ХарактеристикаНоменклатуры,ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);	
			Иначе                                                     
				СтруктураЦен = Ценообразование.ПолучитьЦену(ЭтотОбъект.Прейскурант, ТекСтрока.Номенклатура,ЭтотОбъект.Дата,,ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);	
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураЦен) и ЗначениеЗаполнено(СтруктураЦен.Цена) Тогда
				ТекСтрока.Цена = СтруктураЦен.Цена * ТекСтрока.Коэффициент / 
								 ?(ЗначениеЗаполнено(СтруктураЦен.ЕдиницаИзмерения.Коэффициент),СтруктураЦен.ЕдиницаИзмерения.Коэффициент,0);
			Иначе
				ТекСтрока.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если фМетаданныеРеквизитыТЧ.Найти("Количество")<>Неопределено и 
			фМетаданныеРеквизитыТЧ.Найти("Сумма")<>Неопределено
		Тогда
			ТекСтрока.Сумма=ТекСтрока.Цена*ТекСтрока.Количество;                            
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму строки по скидке
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект документа-владельца строки табличной части
//  ИмяТЧ		 - Строка			 - Имя табличной части строки
//  ТекСтрока	 - Структура		 - Строка табличной части документа.
//
Процедура дкРассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока) Экспорт
	
	мСумма = ТекСтрока.Цена * ТекСтрока.Количество;
	ТекСтрока.СуммаСкидки = мСумма * ТекСтрока.ПроцентСкидки/100;
	ТекСтрока.Сумма		  = мСумма - ТекСтрока.СуммаСкидки;
	
	Если ТекСтрока.СуммаСкидки <> 0 Тогда
		ПорядокОкругления = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПорядокОкругленияПослеСкидки");
		Если ЗначениеЗаполнено(ПорядокОкругления) Тогда
			ТекСтрока.Сумма	= Ценообразование.ОкруглитьЦену(ТекСтрока.Сумма, ПорядокОкругления, Ложь);
			ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму строки по скидке
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект документа-владельца строки табличной части
//  ИмяТЧ		 - Строка			 - Имя табличной части строки
//  ТекСтрока	 - Структура		 - Строка табличной части документа.
//
Процедура дкПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока) Экспорт

	мСумма = ТекСтрока.Цена * ТекСтрока.Количество;
	ТекСтрока.Сумма			= мСумма - ТекСтрока.СуммаСкидки;
	ТекСтрока.ПроцентСкидки = ?(мСумма<>0,100*ТекСтрока.СуммаСкидки / мСумма,0);
		
КонецПроцедуры
	
// Процедура расчета суммы документа
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения	 - форма открытого документа.
//
Процедура дкРасчитатьСуммуДокумента(ЭтаФорма) Экспорт
	
	Если ЭтаФорма<>Неопределено Тогда
		// Попытаемся пересчитать сумму документа
		Попытка
			Если ТипЗнч(ЭтаФорма) = Тип("Форма") Тогда
				ВремСумма=ЭтаФорма.ЭтотОбъект.РассчитатьСуммуВсего();
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
		Исключение
			Если ЭтаФорма.ЭтотОбъект.Метаданные() = Метаданные.Документы.ОказаниеУслуг Тогда
				ВремСуммаРаботы = 0;
				мсСтр = ЭтаФорма.ЭтотОбъект.Работы.НайтиСтроки(Новый Структура("Сертификат", Справочники.Сертификаты.ПустаяСсылка()));
				Для каждого стр из мсСтр Цикл
					ВремСуммаРаботы = ВремСуммаРаботы + стр["Сумма"];          
				КонецЦикла;
			Иначе
				Попытка ВремСуммаРаботы =ЭтаФорма.Работы.Итог("Сумма"); Исключение КонецПопытки;
			КонецЕсли;
			Попытка ВремСуммаТовары				= ЭтаФорма.Товары.Итог("Сумма");			Исключение КонецПопытки;
			Попытка ВремСуммаМатериалы			= ЭтаФорма.Материалы.Итог("Сумма");			Исключение КонецПопытки;
			Попытка ВремСуммаСертификаты		= ЭтаФорма.Сертификаты.Итог("Сумма");		Исключение КонецПопытки;
			Попытка ВремСуммаУслуги				= ЭтаФорма.Услуги.Итог("Сумма");			Исключение КонецПопытки;
			Попытка ВремСуммаПрочее				= ЭтаФорма.Прочее.Итог("Сумма");			Исключение КонецПопытки;
			Попытка ВремСуммаОплатаПоставщикам	= ЭтаФорма.ОплатаПоставщикам.Итог("Сумма");	Исключение КонецПопытки;
			
			ВремСумма = ?(ЗначениеЗаполнено(ВремСуммаТовары)			,ВремСуммаТовары,0) +
						?(ЗначениеЗаполнено(ВремСуммаРаботы)			,ВремСуммаРаботы,0) +
						?(ЗначениеЗаполнено(ВремСуммаМатериалы)			,ВремСуммаМатериалы,0) +
						?(ЗначениеЗаполнено(ВремСуммаСертификаты)		,ВремСуммаСертификаты,0)+
						?(ЗначениеЗаполнено(ВремСуммаПрочее)			,ВремСуммаПрочее,0) +
						?(ЗначениеЗаполнено(ВремСуммаОплатаПоставщикам)	,ВремСуммаОплатаПоставщикам,0)+
						?(ЗначениеЗаполнено(ВремСуммаУслуги)	 		,ВремСуммаУслуги,0);
		КонецПопытки;
		
		// Меняем сумму документа, если она изменилась
		Попытка
			Если ВремСумма<>ЭтаФорма.СуммаДокумента Тогда ЭтаФорма.СуммаДокумента=ВремСумма; КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект	 - объект проводимого документа,
//  ИмяТабличнойЧасти	 - Строка			 - табличная часть документа,
//  ТаблицаЗначений		 - ТаблицаЗначений	 - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ				 - Булево			 - флаг отказа в проведении.
//  Заголовок			 - Строка			 - строка, заголовок сообщения об ошибке проведения.
//
Процедура дкПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено,
                                 Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		ТаблицаТоваров = ТаблицаЗначений;
	Иначе
		// Цикл по строкам табличной части документа.
		ТаблицаТоваров =  ДокументОбъект[ИмяТабличнойЧасти];
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
    	Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  СтрокаТаблицы.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
			                   "Услуги недопустимы в табличной части """+ИмяТабличнойЧасти+"""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверяет, что в табличной части нет товаров
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект	 - объект проводимого документа,
//  ИмяТабличнойЧасти	 - Строка			 - табличная часть документа,
//  ТаблицаЗначений		 - ТаблицаЗначений	 - таблица значений, содержащая данные табличной части
//  Отказ				 - Булево			 - флаг отказа в проведении.
//  Заголовок			 - Строка			 - строка, заголовок сообщения об ошибке проведения.
//
Процедура дкПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
