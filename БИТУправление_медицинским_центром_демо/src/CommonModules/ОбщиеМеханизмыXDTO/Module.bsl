
#Область ПрограммныйИнтерфейс

////
 // Процедура: ПолучитьТипXDTO
 //   Получает тип XDTO по имени типа и пространству имен
 // 
 // Параметры:
 ///
Функция ПолучитьТипXDTO(ИмяТипа, ПространствоИмен, Фабрика_XDTO = Неопределено) Экспорт
	
	Пакет = Неопределено;
	Если Фабрика_XDTO = Неопределено Тогда
		Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
	Иначе
		Пакет = Фабрика_XDTO.Пакеты.Получить(ПространствоИмен);
	КонецЕсли;
	
	Если Пакет = Неопределено Тогда
		Комментарий = СтрШаблон("Попытка получения типа ""%1"" пространства имен ""%2""", ИмяТипа, ПространствоИмен);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение типа XDTO'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		Возврат Неопределено;
	КонецЕсли;
	Возврат Пакет.Получить(ИмяТипа);
КонецФункции

// Получает тип XDTO по имени типа из пространства имен urn:hl7-org:v3
Функция ТипHL7(ИмяТипа, Фабрика_XDTO = Неопределено) Экспорт
	
	ПространствоИмен = "urn:hl7-org:v3";
	
	Возврат ОбщиеМеханизмыXDTO.ПолучитьТипXDTO(ИмяТипа, ПространствоИмен, Фабрика_XDTO);

КонецФункции

////
 // Процедура: ПолучитьТипXDTO
 //   Создает объект XDTO по типу
 // 
 // Параметры:
 ///
Функция СоздатьОбъектXDTO(ТипОбъекта, Фабрика_XDTO = Неопределено) Экспорт
	
	Если Фабрика_XDTO = Неопределено Тогда
		Возврат ФабрикаXDTO.Создать(ТипОбъекта);
	Иначе
		Возврат Фабрика_XDTO.Создать(ТипОбъекта);
	КонецЕсли;
	
КонецФункции


////
 // Процедура: ПреобразоватьПространствоИмен
 //   Заменяет в пространстве имен сиволы, которые могут
 //   помешать парсить путь из тэгов xml
 // 
 // Параметры:
 ///
Функция ПреобразоватьПространствоИмен(ПИ) Экспорт
	Возврат СтрЗаменить(ПИ,".","#<dot>#");
КонецФункции

////
 // Процедура: ВосстановитьПространствоИмен
 //   Восстанавливает ПИ после преобразования функцией ПреобразоватьПространствоИмен
 // 
 // Параметры:
 ///
Функция ВосстановитьПространствоИмен(ПИ) Экспорт
	Возврат СтрЗаменить(ПИ,"#<dot>#",".");
КонецФункции

////
 // Процедура: ЗаполнитьОбъектXDTO
 //   Заполняет объект xdto по его описанию
 // 
 // Параметры:
 //   Объект
 //     ОбхектXDTO
 //   ДанныеЗаполнения
 //     Массив стркутур Структура("Ключ,Значение"),
 //     где ключ  - строковый путь "tag1.tag2.tag3[0].@attr1",
 //     Значение - произвольное значение.
 //   Фабрика_XDTO
 //   Разделитель
 //		Разделитель в строковом пути
 ///
Процедура ЗаполнитьОбъектXDTO(Объект, ДанныеЗаполнения, Фабрика_XDTO = Неопределено, Разделитель=".") Экспорт
	Для Каждого КлючЗначение Из ДанныеЗаполнения Цикл
		Ключи = СтрРазделить(КлючЗначение.Ключ, Разделитель);
		ТекОбъект = Объект;
		ПредыдущийОбъект = Неопределено;
		Для Каждого Ключ Из Ключи Цикл
			ПредыдущийОбъект = ТекОбъект;
			Если Не ЭтоАтрибут(Ключ) Тогда
				Если ОбъектСуществует(ТекОбъект,Ключ) Тогда
					ТекОбъект = ПолучитьОбъектПоля(ТекОбъект,Ключ);
				Иначе
					ТекОбъект = СоздатьОбъектПоля(ТекОбъект, Ключ, Фабрика_XDTO);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекОбъект <> Неопределено Тогда
			Если КлючЗначение.Значение <> Неопределено И КлючЗначение.Значение <> "" Тогда
				Если ЭтоАтрибут(Ключ) Тогда
					ТекОбъект[ИмяКлюча(Ключ)] = КлючЗначение.Значение;
				ИначеЕсли ТипЗнч(ТекОбъект) = Тип("Строка") И ПредыдущийОбъект <> Неопределено Тогда
					ПредыдущийОбъект[ИмяКлюча(Ключ)] = КлючЗначение.Значение;
				Иначе
					Последовательность = ТекОбъект.Последовательность();
					Последовательность.Очистить();
					Последовательность.Добавить(КлючЗначение.Значение, Неопределено);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТипЗнч(ПредыдущийОбъект[ИмяКлюча(Ключ)]) = Тип("СписокXDTO") Тогда
				ПредыдущийОбъект[ИмяКлюча(Ключ)].Добавить(КлючЗначение.Значение);
			Иначе
				ПредыдущийОбъект[ИмяКлюча(Ключ)] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

////
 // Функция СоздатьОбъектПоля
 ///
Функция СоздатьОбъектПоля(Объект, Ключ, Фабрика_XDTO = Неопределено)
	
	Результат = Неопределено;
	Если КлючСодержитТип(Ключ) Тогда
		ИмяТипа = ПолучитьИмяТипа(Ключ);
		Тип = ОбщиеМеханизмыXDTO.ПолучитьТипXDTO(ИмяТипа.ИмяТипа, ИмяТипа.ПространствоИмен, Фабрика_XDTO);
		Если Не Тип = Неопределено Тогда
			Результат = СоздатьОбъектXDTO(
										Тип,
										Фабрика_XDTO
									);
		КонецЕсли;
	Иначе
		Результат = СоздатьОбъектXDTO(
									Объект.Тип().Свойства.Получить(ИмяКлюча(Ключ)).Тип,
									Фабрика_XDTO
								);
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Объект[ИмяКлюча(Ключ)]) = Тип("СписокXDTO") Тогда
			Объект[ИмяКлюча(Ключ)].Добавить(Результат);
		Иначе
			Объект[ИмяКлюча(Ключ)] = Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////
 // Функция ПолучитьОбъектПоля
 ///
Функция ПолучитьОбъектПоля(Объект, Ключ)
	Если ТипЗнч(Объект[ИмяКлюча(Ключ)]) = Тип("СписокXDTO") Тогда
		Если ЭтоСписок(Ключ) Тогда
			Индекс = ПолучитьИндекс(Ключ);
			Возврат Объект[ИмяКлюча(Ключ)].Получить(Индекс);
		Иначе
			Возврат Объект[ИмяКлюча(Ключ)].Получить(0);
		КонецЕсли;
	Иначе
		Возврат Объект[ИмяКлюча(Ключ)];
	КонецЕсли;

КонецФункции

////
 // Функция КлючСодержитТип
 ///
Функция КлючСодержитТип(Ключ)
	Возврат Найти(Ключ,"{") <> 0;
КонецФункции

////
 // Функция ЭтоАтрибут
 ///
Функция ЭтоАтрибут(Ключ)
	Если Лев(Ключ,1) = "@" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

////
 // Функция ЭтоСписок
 ///
Функция ЭтоСписок(Ключ)
	Если Прав(Ключ,1) = "]" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

////
 // Функция ИмяКлюча
 ///
Функция ИмяКлюча(Ключ)
	Если ЭтоАтрибут(Ключ) Тогда
		Возврат ИмяКлюча(Прав(Ключ,СтрДлина(Ключ) - 1));
	ИначеЕсли ЭтоСписок(Ключ) Тогда
		Массив = СтрРазделить(Ключ, "[");
		Возврат ИмяКлюча(Массив[0]);
	ИначеЕсли КлючСодержитТип(Ключ) Тогда
		Массив = СтрРазделить(Ключ, "{");
		Возврат ИмяКлюча(Массив[0]);
	Иначе
		Возврат Ключ;
	КонецЕсли;
КонецФункции

////
 // Функция ОбъектСуществует
 ///
Функция ОбъектСуществует(Объект, Ключ)
	Если ТипЗнч(Объект[ИмяКлюча(Ключ)]) = Тип("СписокXDTO") Тогда
		Список = Объект[ИмяКлюча(Ключ)];
		
		Если ЭтоСписок(Ключ) Тогда
			Индекс = ПолучитьИндекс(Ключ);
			Возврат Список.Количество() > Индекс;
		Иначе
			Возврат Список.Количество() <> 0;
		КонецЕсли;
	Иначе
		Возврат Объект[ИмяКлюча(Ключ)] <> Неопределено;
	КонецЕсли;
КонецФункции

////
 // Функция ПолучитьИндекс
 ///
Функция ПолучитьИндекс(Ключ)
	Массив = СтрРазделить(Ключ, "[");
	Возврат Число(Лев(Массив[1],СтрДлина(Массив[1])-1));
КонецФункции

////
 // Функция ПолучитьИмяТипа
 ///
Функция ПолучитьИмяТипа(Ключ)
	Лев = Найти(Ключ,"{");
	Прав = Найти(Ключ,"}");
	Зпт = Найти(Ключ,",");
	Содержимое = Сред(Ключ,Лев + 1,Прав - Лев - 1);
	ПространствоИмен = ВосстановитьПространствоИмен(Лев(Содержимое,Зпт - Лев - 1));
	Тип = Прав(Содержимое,Прав - Зпт - 1);
	Возврат Новый Структура("ПространствоИмен,ИмяТипа",ПространствоИмен,Тип);
КонецФункции

////
 // Процедура: СериализоватьОбъектXDTO
 //   Преобразует объект XDTO  в xml строку
 // 
 // Параметры:
 ///
Функция СериализоватьОбъектXDTO(ОбъектXDTO, Кодировка = "", Фабрика_XDTO = Неопределено, ЗаписатьОбъявлениеXML = Истина, ЛокальноеИмя = "") Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(?(ПустаяСтрока(Кодировка), "UTF-8", Кодировка));
	Если ЗаписатьОбъявлениеXML Тогда
		ЗаписьXML.ЗаписатьОбъявлениеXML();
	КонецЕсли;
	Если Фабрика_XDTO = Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	Иначе
		Если ПустаяСтрока(ЛокальноеИмя) Тогда
			Фабрика_XDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		Иначе
			Фабрика_XDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ЛокальноеИмя);
		КонецЕсли;
	КонецЕсли;
	Возврат ЗаписьXML.Закрыть();
КонецФункции

////
 // Процедура: ПрочитатьОбъектXDTO
 //   Преобразует строку XML в объект XDTO
 // 
 // Параметры:
 ///
Функция ПрочитатьОбъектXDTO(СтрокаXML, Тип = Неопределено, Фабрика_XDTO = Неопределено) Экспорт

	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Если Фабрика_XDTO = Неопределено Тогда
		Возврат ФабрикаXDTO.ПрочитатьXML(
				ЧтениеXML,
				Тип
			);
	Иначе
		Возврат Фабрика_XDTO.ПрочитатьXML(
				ЧтениеXML,
				Тип
			);
	КонецЕсли;
КонецФункции

Функция СериализоватьПроизвольныйОбъект(Объект) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("");
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект);
	
	Результат = ЗаписьXML.Закрыть();

	Возврат Результат;
КонецФункции

Функция СериализоватьКоллекциюПроизвольныхОбъектов(МассивОбъектов) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Объект Из МассивОбъектов Цикл
		XML = СериализоватьПроизвольныйОбъект(Объект);
		Результат.Добавить(XML);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти