#Область ПрограммныйИнтерфейс

// Открывает форму ввода медицинского текста.
//
// Параметры:
//  Значение			 - Строка - значение
//  Параметр			 - ПланВидовХарактеристикСсылка.ПараметрыHTML - параметр, чье значение редактируется.
//  ОписаниеОповещения	 - ОписаниеОповещения - Описание оповещения
//  Владелец			 - ДокументСсылка.ПрохождениеМедосмотра, ДокументСсылка.Прием - медицинский документ.
//  ПервичныйПрием		 - Булево - это первичный прием.
//
Процедура ПоказатьФормуВводаТекста(Значение, Параметр, ОписаниеОповещения, Владелец = Неопределено, ПервичныйПрием = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("Текст, Параметр, ПервичныйПрием", Значение, Параметр, ПервичныйПрием);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаТекста", СтруктураПараметров, Владелец, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Открывает форму ввода булевого значения.
//
// Параметры:
//  Значение			 - Булево - текущее.
//  Параметр			 - ПланВидовХарактеристикСсылка.ПараметрыHTML - параметр, чье значение редактируется.
//  ОписаниеОповещения	 - ОписаниеОповещения - Описание оповещения
//  ФорматнаяСтрока		 - Строка - строка формата.
//
Процедура ПоказатьФормуВводаБулево(Значение, Параметр, ОписаниеОповещения, ФорматнаяСтрока = "") Экспорт 
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(Истина, Формат(Истина, ФорматнаяСтрока));
	Кнопки.Добавить(Ложь, Формат(Ложь, ФорматнаяСтрока));
	Кнопки.Добавить(Неопределено, "Отмена"); 
	ПоказатьВопрос(ОписаниеОповещения, Строка(Параметр) + ": " + НСтр("ru='выберите значение'"), Кнопки, , Значение);   
	
КонецПроцедуры

// Начать выбор значения параметра из дерева значений выбора.
//
// Параметры:
//  ОповещениеОВыборе	 - ОписаниеОповещения - оповещение о выборе
//  Форма				 - ФормаКлиентскогоПриложения - форма
//  ЭлементФормы		 - ПолеФормы - элемент формы
//  ДеревоЗначенийВыбора - ДеревоЗначений - дерево значений выбора 
//  НачальноеЗначение	 - Строка - начальное значение.
//
Процедура ВыбратьИзДереваЗначенийВыбора(ОповещениеОВыборе, Форма, ЭлементФормы, ДеревоЗначенийВыбора, НачальноеЗначение) Экспорт
	
	ПараметрыОповещенияВыбора = Новый Структура("ОповещениеОВыборе, Форма, ЭлементФормы, НачальноеЗначение", ОповещениеОВыборе, Форма, ЭлементФормы, НачальноеЗначение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзДереваЗначенийВыбораОбработкаВыбора", МедицинскаяДеятельностьКлиент, ПараметрыОповещенияВыбора);
	
	Форма.ПоказатьВыборИзМеню(ОписаниеОповещения, ДеревоЗначенийВыбора, ЭлементФормы);
	
КонецПроцедуры

// Обработка выбора значения параметра из дерева значений выбора.
//
// Параметры:
//  Результат	 - ЭлементСпискаЗначений - результат
//  Параметры	 - Структура - параметры.
//
Процедура ВыбратьИзДереваЗначенийВыбораОбработкаВыбора(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		ЗначениеВыбора = Результат.Значение;
		Если ТипЗнч(ЗначениеВыбора) = Тип("СписокЗначений") Тогда
			// Выбрали группу
			ВыбратьИзДереваЗначенийВыбора(Параметры.ОповещениеОВыборе, Параметры.Форма, Параметры.ЭлементФормы, ЗначениеВыбора, Параметры.НачальноеЗначение);
		Иначе
			// Выбрали значение
			Если ТипЗнч(ЗначениеВыбора) = Тип("ОписаниеТипов") Тогда
				ПараметрШаблона = Параметры.ОповещениеОВыборе.ДополнительныеПараметры.Параметр;
				Если ЗначениеВыбора.СодержитТип(Тип("Число")) Тогда
					ПоказатьВводЧисла(Параметры.ОповещениеОВыборе, 0, Строка(ПараметрШаблона) + НСтр("ru=': введите число'"), ЗначениеВыбора.КвалификаторыЧисла.Разрядность, ЗначениеВыбора.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				ИначеЕсли ЗначениеВыбора.СодержитТип(Тип("Строка")) Тогда
					ПоказатьФормуВводаТекста(Параметры.НачальноеЗначение, ПараметрШаблона,Параметры.ОповещениеОВыборе);
				КонецЕсли;
			Иначе
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеОВыборе, ЗначениеВыбора);	
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начать ввод значения параметра специальным образом исходя из его кодировки поля (назначения).
//
// Параметры:
//  ОповещениеОВыборе			 - ОписаниеОповещения	 - оповещение о выборе
//  Форма						 - ФормаКлиентскогоПриложения	 - форма
//  ЭлементФормы				 - ПолеФормы					 - элемент формы
//  КодировкаПоля				 - ДеревоЗначений				 - дерево значений выбора
//  НачальноеЗначение			 - Строка						 - начальное значение.
//  ДополнительныеПараметрыВвода - Структура					 - Дополнительные параметры для передачи в форму ввода.
//
Процедура ВвестиЗначениеКодируемогоПоля(ОповещениеОВыборе, Форма, ЭлементФормы, КодировкаПоля, НачальноеЗначение, ДополнительныеПараметрыВвода = Неопределено) Экспорт
	
	// Получение имени формы исходя из назначения параметра (кодировки поля).
	ИмяФормыВвода = ОбщегоНазначенияСервер.ФункцияМенеджера("Обработки.ИнтерфейсВводаПолейЭМД", "ИмяФормыВвода", КодировкаПоля);
	ПараметрыФормы = Новый Структура("НачальноеЗначение, КодировкаПоля", НачальноеЗначение, КодировкаПоля);     
	
	// Добавление дополнительных параметров ввода значения в ПараметрыФормы.
	Если ТипЗнч(ДополнительныеПараметрыВвода) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из ДополнительныеПараметрыВвода Цикл
			ПараметрыФормы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыВвода, ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,,ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открыть анамнез жизни клиента
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты - клиент.
//
Процедура ОткрытьАнамнезЖизниКлиента(Клиент) Экспорт
	
	СтруктураПараметров = Новый Структура("Клиент", Клиент); 
	ОткрытьФорму("РегистрСведений.АнамнезыЖизни.Форма.ФормаЗаполненияАнамнеза", СтруктураПараметров);
	
КонецПроцедуры

// Напечатать медкарту.
//
// Параметры:
//  Медкарта		 - СправочникСсылка.МедицинскиеКарты - медицинская карта 
//  ДатаНачала		 - Дата - дата начала
//  ДатаОкончания	 - Дата - дата окончания.
//
Процедура НапечататьМедкарту(Медкарта, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ОписаниеОшибки = "";
	ТабДок = МедицинскаяДеятельность.ПолучитьТекстТитульного(Медкарта,,, ДатаНачала, ДатаОкончания, Истина);
	Если ТабДок <> Неопределено Тогда
		ОбщегоНазначенияБИТКлиентСервер.УдалитьПримечанияИРасшифровкиИзТабличногоДокументаПередПодписанием(ТабДок);
		СтруктураНаПечать = УниверсальныеМеханизмыСервер.НапечататьДокумент(ТабДок);
		ПечатьДокументовКлиент.ВывестиНапечататьДокумент(СтруктураНаПечать, Медкарта);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Проверить на форме, корректен ли введённый СНИЛС.
//
// Параметры:
//  СНИЛС		 - Строка - СНИЛС
//  Отказ		 - Булево - признак отказа продолжения операции.
//  ПолеФормы	 - Строка - путь к данным элемента на форме.
//
Функция СНИЛС_КорректенПроверитьНаФорме(СНИЛС, Отказ = Ложь, ПолеФормы = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СНИЛС) Тогда
		Если Не МедицинскоеСтрахованиеКлиентСервер.СНИЛС_Корректен(СНИЛС) Тогда
			
			СообщениеОбОшибке = "Некорректный номер СНИЛС";
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,, ПолеФормы,,Отказ);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти