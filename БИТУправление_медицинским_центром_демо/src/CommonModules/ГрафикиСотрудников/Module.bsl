#Область ПрограммныйИнтерфейс

// Проверка, следует ли считать переданный вид времени обычным рабочим временем.
//
// Параметры:
//  ВидВремениГрафика	 - СправочникСсылка.ВидыВремениГрафика - Проверяемый вид времени
// 
// Возвращаемое значение:
//   Булево - Истина, если передано предопределенное рабочее время или пустая ссылка.
//
Функция ЭтоОбычноеРабочееВремя(ВидВремениГрафика) Экспорт
	
	Возврат Не ЗначениеЗаполнено(ВидВремениГрафика)
		Или ВидВремениГрафика = Справочники.ВидыВремениГрафика.РабочееВремя;
	
КонецФункции

// Получить виды времени графика.
//
// Параметры:
//  Рабочие	 - Булево, Неопределено - если Ложь, вернет нерабочие виды времени, Истина - рабочие, Неопределено - все.
//  ВключаяУдаленные - Булео - включать ли в результат помеченные на удаление элементы.
// 
// Возвращаемое значение:
//   Массив - массив элементов типа СправочникСсылка.ВидыВремениГрафика.
//
Функция ПолучитьВидыВремени(Рабочие = Истина, ВключаяУдаленные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рабочие", Рабочие);
	Запрос.УстановитьПараметр("ВключаяУдаленные", ВключаяУдаленные);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыВремениГрафика.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыВремениГрафика КАК ВидыВремениГрафика
	               |ГДЕ
	               |	(&Рабочие = НЕОПРЕДЕЛЕНО
	               |			ИЛИ &Рабочие = (ВидыВремениГрафика.РабочееВремя = ИСТИНА
	               |							ИЛИ ВидыВремениГрафика.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыВремениГрафика.РабочееВремя)))
				   |	И (&ВключаяУдаленные = ИСТИНА ИЛИ ПометкаУдаления = ЛОЖЬ)
				   |";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


// Получить виды времени графика, с точки зрения табеля трактуемые как рабочее время.
//
// Параметры:
//  ВключаяУдаленные - Булео - включать ли в результат помеченные на удаление элементы.
// 
// Возвращаемое значение:
//   Массив - массив элементов типа СправочникСсылка.ВидыВремениГрафика.
//
Функция ПолучитьВидыРабочегоВремениТабеля(ВключаяУдаленные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВключаяУдаленные", ВключаяУдаленные);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыВремениГрафика.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыВремениГрафика КАК ВидыВремениГрафика
	               |ГДЕ
	               |	(ВидыВремениГрафика.РабочееВремя ИЛИ ВидыВремениГрафика.РабочееВремяТабеля)
				   |	И (&ВключаяУдаленные = ИСТИНА ИЛИ ПометкаУдаления = ЛОЖЬ)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Вычитает из исходной таблицы периодов строки таблицы исключаемых периодов.
//
// Параметры:
//  ТаблицаГрафиков						 - ТаблицаЗначений	 - Периоды графика сотрудников.
//  ИсключаемыеПериоды					 - ТаблицаЗначений	 - Исключаемые периоды графика сотрудников.
//  ТребуетсяПроверкаЭталонуДлительности - Булево			 - Когда ИСТИНА, из измененной таблицы графика будут удалены интервалы меньше эталонного (стандартного интервала времени сотрудника).
//  ДатаВычитанияПериода				 - Дата				 - День для которого происходит вычитание периода
//
Процедура ВычестьПериодыИзТаблицыГрафика(ТаблицаГрафиков, ИсключаемыеПериоды, ТребуетсяПроверкаЭталонуДлительности = Ложь, ДатаВычитанияПериода = Неопределено) Экспорт
	
	ПериодичностьПланирования = УправлениеНастройками.ПолучитьУчетнуюПолитику().ПериодичностьПланирования;
	
	Если ДатаВычитанияПериода = Неопределено Тогда
		ДатаВычитанияПериода = Дата(1,1,1);
		ОкончаниеДатыВычитанияПериода = Дата(3999,1,1);
	Иначе
		ДатаВычитанияПериода = НачалоДня(ДатаВычитанияПериода);
		ОкончаниеДатыВычитанияПериода = КонецДня(ДатаВычитанияПериода);
	КонецЕсли;
	
	СтрокиНаУдаление = Новый Массив;
	Для Каждого ИсключаемыйПериод Из ИсключаемыеПериоды Цикл
		
		Если ИсключаемыйПериод.Дата < ДатаВычитанияПериода Или ИсключаемыйПериод.Дата > ОкончаниеДатыВычитанияПериода Тогда
			Продолжить;
		КонецЕсли;
		
		СотрудникЗаявки = ИсключаемыйПериод.Сотрудник;
		СтрокиНаУдаление.Очистить();
		Если ТребуетсяПроверкаЭталонуДлительности Тогда
			Если ЗначениеЗаполнено(СотрудникЗаявки.ДлительностьПриема) Тогда
				ЭталонДлительности = СотрудникЗаявки.ДлительностьПриема;
			ИначеЕсли СотрудникЗаявки.Метаданные().Реквизиты.Найти("Специализация") <> Неопределено И
				ЗначениеЗаполнено(СотрудникЗаявки.Специализация.ДлительностьПриема) Тогда
				ЭталонДлительности = СотрудникЗаявки.Специализация.ДлительностьПриема;
			Иначе
				ЭталонДлительности = ПериодичностьПланирования;
			КонецЕсли;
		Иначе
			ЭталонДлительности = Дата('00010101000030'); // 30 секунд.
		КонецЕсли;
		ЭталонныйИнтервал = ЭталонДлительности -  Дата("00010101");
		
		КолСтрок = ТаблицаГрафиков.Количество();
		
		Если ЗначениеЗаполнено(ДатаВычитанияПериода) Тогда
			СтрокиГрафика = ТаблицаГрафиков.НайтиСтроки(Новый Структура("Дата", ДатаВычитанияПериода));
		Иначе
			СтрокиГрафика = ТаблицаГрафиков;
		КонецЕсли;
		
		КолСтрок = ТаблицаГрафиков.Количество();
		Для Сч = 1 По КолСтрок Цикл
			
			СтрокаГрафика = ТаблицаГрафиков[Сч-1];
			
			Если СтрокаГрафика.Дата = НачалоДня(ИсключаемыйПериод.Дата) И СтрокаГрафика.Сотрудник = СотрудникЗаявки Тогда
				
				ВычестьИнтервалИзПериода(СтрокаГрафика, ИсключаемыйПериод, ТаблицаГрафиков, СтрокиНаУдаление);
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаГрафиков Из СтрокиНаУдаление Цикл
			ТаблицаГрафиков.Удалить(СтрокаГрафиков);
		КонецЦикла; 
		
	КонецЦикла; 
		
	СтрокиНаУдаление.Очистить();
	Для Каждого СтрокаГрафика Из ТаблицаГрафиков Цикл
		
		Если СтрокаГрафика.Дата < ДатаВычитанияПериода Или СтрокаГрафика.Дата > ОкончаниеДатыВычитанияПериода Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтервалМеньшеЭталонного(СтрокаГрафика, ЭталонныйИнтервал)
			И СтрокиНаУдаление.Найти(СтрокаГрафика) = Неопределено
		Тогда
			СтрокиНаУдаление.Добавить(СтрокаГрафика);
		КонецЕсли;
		
	КонецЦикла;		
	
	Для Каждого СтрокаГрафиков Из СтрокиНаУдаление Цикл
		ТаблицаГрафиков.Удалить(СтрокаГрафиков);
	КонецЦикла; 

КонецПроцедуры

// СтрокаПериода - одна из строк ТаблицаПериодов.
// При необходимости разделить её на два периода, добавляется строка в таблицу периодов.
// При необходимости удалить строку (когда вся в вычитаемом периоде), помещаем в массив строк для удаления.
// Удаление предполагается после цикла по всем строкам.
//
// Параметры:
//  СтрокаПериода			 - СтрокаТабличнойЧасти.
//  ИсключаемыйПериод		 - СтрокаТабличнойЧасти, Структура.
//  ТаблицаПериодов			 - ТаблицаЗначений.
//  СтрокиНаУдаление 		 - Массив - строки, которые после цикла вычитания по всей таблице будут из неё удалены.
//
Процедура ВычестьИнтервалИзПериода(СтрокаПериода, ИсключаемыйПериод, ТаблицаПериодов, СтрокиНаУдаление) Экспорт
	
	Если ИсключаемыйПериод.ВремяНачала = ИсключаемыйПериод.ВремяОкончания Тогда
		Возврат;	
	КонецЕсли;
	ИсключаемыйПериодВремяНачала = Дата(1,1,1) + (ИсключаемыйПериод.ВремяНачала - НачалоДня(ИсключаемыйПериод.ВремяНачала));
	// Если полночь, то время окончания переносится на следующий день
	Если ИсключаемыйПериод.ВремяОкончания = НачалоДня(ИсключаемыйПериод.ВремяОкончания) Тогда
		ИсключаемыйПериодВремяОкончания = Дата(1,1,2);	
	Иначе
		ИсключаемыйПериодВремяОкончания = Дата(1,1,1) + (ИсключаемыйПериод.ВремяОкончания - НачалоДня(ИсключаемыйПериод.ВремяОкончания));
	КонецЕсли;
	// Если исходный период пересекается с исключаемым периодом, то сокращаем/удаляем/расчленяем его.
	
	Если  СтрокаПериода.ВремяНачала		>= ИсключаемыйПериодВремяНачала
		И СтрокаПериода.ВремяОкончания	<= ИсключаемыйПериодВремяОкончания
	Тогда
		// Вся свободная строка внутри занятой - удалить
		СтрокиНаУдаление.Добавить(СтрокаПериода);
		
	ИначеЕсли СтрокаПериода.ВремяНачала		>= ИсключаемыйПериодВремяНачала
			И СтрокаПериода.ВремяОкончания	>  ИсключаемыйПериодВремяОкончания
			И СтрокаПериода.ВремяНачала		<  ИсключаемыйПериодВремяОкончания
	Тогда
		// Срезать начало
		СтрокаПериода.ВремяНачала = ИсключаемыйПериодВремяОкончания;
			
	ИначеЕсли СтрокаПериода.ВремяНачала		<= ИсключаемыйПериодВремяНачала
			И СтрокаПериода.ВремяОкончания	<= ИсключаемыйПериодВремяОкончания
			И СтрокаПериода.ВремяОкончания	>  ИсключаемыйПериодВремяНачала
	Тогда
		// Срезать конец
		СтрокаПериода.ВремяОкончания = ИсключаемыйПериодВремяНачала;
		
	ИначеЕсли СтрокаПериода.ВремяНачала		< ИсключаемыйПериодВремяНачала
			И СтрокаПериода.ВремяОкончания	> ИсключаемыйПериодВремяОкончания
	Тогда
		// Рассекает свободное время на 2 интервала, добавим правый в таблицу как новый интервал и сдвинем границу у левого.
		НовыйСвободныйИнтервал = ТаблицаПериодов.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйСвободныйИнтервал, СтрокаПериода);
		НовыйСвободныйИнтервал.ВремяНачала = ИсключаемыйПериодВремяОкончания;
		
		СтрокаПериода.ВремяОкончания = ИсключаемыйПериодВремяНачала;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ИнтерактивноеРедактированиеГрафика

// Добавляет позицию в графики работы указанных объектов.
//
// Параметры:
//  ОбъектыКОбработке	 - Массив	- Массив структур, описывающих, кому добавить сведения в график
//  ВремяНач			 - Дата		- Время, с которого начинается добавляемая позиция
//  ВремяКон			 - Дата		- Время, до которого продолжается добавляемая позиция
//  ВидВремени			 - СправочникСсылка.ВидыВремениГрафика - Вид времени добавляемой позиции графика.
//  Название			 - Строка	- Название позиции
//  Комментарий			 - Строка	- Примечание к позикии.
// 
// Возвращаемое значение:
//   Строка - Сообщение об ошибке, если она произошла.
//
Функция ДобавитьСобытие(Знач ОбъектыКОбработке, ВремяНач, ВремяКон, Знач ВидВремени, Знач Название = "", Комментарий = "") Экспорт
	
	Если ВидВремени = Справочники.ВидыВремениГрафика.РабочееВремя Тогда
		Название = "";
	КонецЕсли;
	
	Результат = "";
	
	ТабДокументыКЗаписи = Новый ТаблицаЗначений;
	ТабДокументыКЗаписи.Колонки.Добавить("ДокументОбъект");
	ТабДокументыКЗаписи.Колонки.Добавить("ПериодМесяц");
	ТабДокументыКЗаписи.Колонки.Добавить("Филиал");
	ТабДокументыКЗаписи.Колонки.Добавить("Подразделение");
	ТабДокументыКЗаписи.Колонки.Добавить("Сотрудник");
	
	Отбор = Новый Структура("Филиал, Подразделение, Сотрудник, ПериодМесяц, ДокументОбъект");
	
	Для Каждого СтруктураПолучателя Из ОбъектыКОбработке Цикл
		ФилиалПриоритетный			= ОпределитьПриоритетныйФилиал(СтруктураПолучателя);
		ПодразделениеПриоритетное	= ОпределитьПриоритетноеПодразделение(СтруктураПолучателя);
		
		Филиал				= СтруктураПолучателя.Филиал;
		Отбор.Филиал		= Филиал;
		Отбор.Сотрудник		= СтруктураПолучателя.Сотрудник;
		Отбор.ПериодМесяц   = НачалоМесяца(СтруктураПолучателя.Дата);
		Отбор.ДокументОбъект= СтруктураПолучателя.ДокументУГ;
		мсСтрТаб = ТабДокументыКЗаписи.НайтиСтроки(Отбор);
		Если мсСтрТаб.Количество() <> 0 Тогда
			ДокГрафик = мсСтрТаб[0].ДокументОбъект;
		Иначе
			Если УправлениеНастройками.ПараметрУчета("РежимОтбораЖурналаЗаписиПоМоделямРасписания") = Истина Тогда
				// Отбор по моделям расписания
				Подразделение = Неопределено;
			Иначе
				// Отбор по структуре подразделений
				Подразделение = СтруктураПолучателя.Подразделение;
			КонецЕсли;
			
			ДокГрафикСсылка = ПолучитьГрафикСотрудника(Филиал, Подразделение, СтруктураПолучателя.Сотрудник, СтруктураПолучателя.Дата, СтруктураПолучателя.ДокументУГ, ФилиалПриоритетный, ПодразделениеПриоритетное);
			Если Не ЗначениеЗаполнено(ДокГрафикСсылка) Тогда
				ДокГрафикСсылка = СоздатьГрафикСотрудника(СтруктураПолучателя);
			КонецЕсли;
			
			ДокГрафик = ДокГрафикСсылка.ПолучитьОбъект();
			Если ДокГрафик.Участники.НайтиСтроки(Новый Структура("Участник",СтруктураПолучателя.Сотрудник)).Количество() = 0 Тогда
				НовСтрока = ДокГрафик.Участники.Добавить();
				НовСтрока.Участник = СтруктураПолучателя.Сотрудник;
			КонецЕсли;
			СтрТаб = ТабДокументыКЗаписи.Добавить();
			СтрТаб.ДокументОбъект = ДокГрафик;
			СтрТаб.ПериодМесяц	  = НачалоМесяца(СтруктураПолучателя.Дата);
			СтрТаб.Филиал		  = Филиал;
			СтрТаб.Сотрудник	  = СтруктураПолучателя.Сотрудник;
		
		КонецЕсли;
		
		ДобавитьСобытиеВГрафик(ДокГрафик, СтруктураПолучателя.Дата, ВремяНач, ВремяКон, ВидВремени, Название, Комментарий, СтруктураПолучателя.Сотрудник);
		СообщениеОбОшибке = бит_ПолныеПрава.ЗаписатьОбъект(ДокГрафик, РежимЗаписиДокумента.Проведение);
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Результат,
				Строка(СтруктураПолучателя.Сотрудник) + " - Документ " + Строка(ДокГрафик), Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(Результат) Тогда
		Результат = "Не всем участникам расписания удалось дополнить график:" + Символы.ПС + Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Удаляет график работы выбранного объекта.
//
// Параметры:
//  Сотрудник	         - СправочникСсылка.Сотрудники - Сотрудник.
//  Подразделение		 - СправочникСсылка.Подразделения - Подразделение.
//  Дата				 - Дата - Дата события.
//  Филиал				 - СправочникСсылка.Филиалы - Текущий филиал.
//  ИдентификаторСобытия - УникальныйИдентификатор - Уникальный идентификатор события выбранной ячейки.
//  ДокументУГ			 - ДокументСсылка.УстановкаГрафиковРаботы - Документ установки графика сотрудника.
// 
// Возвращаемое значение:
//  Булево - Истина при наличии проведенного документа установки графика сотрудника.
//
Функция УдалитьСобытие(ИдентификаторСобытия) Экспорт
	
	СтруктураДанныхГрафика = ПолучитьДанныеГрафикаПоИдентификаторуСобытия(ИдентификаторСобытия);
	Если ЗначениеЗаполнено(СтруктураДанныхГрафика.ДанныеГрафика) И СтруктураДанныхГрафика.ДокументУГ.Проведен Тогда
		
		ДокГрафик = СтруктураДанныхГрафика.ДокументУГ.ПолучитьОбъект();	
		УдалитьСобытиеИзГрафика(ДокГрафик, СтруктураДанныхГрафика.ДанныеГрафика);
		бит_ПолныеПрава.ЗаписатьОбъект(ДокГрафик, РежимЗаписиДокумента.Проведение);
		
		Возврат Истина; 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОчиститьВремя(ВремяНач, ВремяКон, ИдентификаторСобытия) Экспорт
	
	СтруктураДанныхГрафика = ПолучитьДанныеГрафикаПоИдентификаторуСобытия(ИдентификаторСобытия);
	Если ЗначениеЗаполнено(СтруктураДанныхГрафика.ДанныеГрафика) И СтруктураДанныхГрафика.ДокументУГ.Проведен Тогда
		
		ДокГрафик = СтруктураДанныхГрафика.ДокументУГ.ПолучитьОбъект();	
		ОчиститьВремяГрафика(ДокГрафик, СтруктураДанныхГрафика.ДанныеГрафика, ВремяНач, ВремяКон);
		бит_ПолныеПрава.ЗаписатьОбъект(ДокГрафик, РежимЗаписиДокумента.Проведение);
		
		Возврат Истина; 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

Функция ПолучитьРабочееВремяЗаПериод(ДатаНачала, ДатаОкончания, ВернутьВремяБезДаты, РазличатьВидыВремени = Ложь,
												Филиал = Неопределено, СотрудникиКабинеты = Неопределено,
												ВидыРабочегоВремени = Неопределено, ВидыНерабочегоВремени = Неопределено, УсловиеУчастияВКалендарномПланировании = Истина) Экспорт
	
	ТаблицаГрафиков = ПолнаяТаблицаГрафиковЗаПериод(ДатаНачала, ДатаОкончания, ВернутьВремяБезДаты, Филиал, СотрудникиКабинеты,
													ВидыРабочегоВремени, ВидыНерабочегоВремени, УсловиеУчастияВКалендарномПланировании);
												
	Если Не РазличатьВидыВремени Тогда
		ТаблицаГрафиков.ЗаполнитьЗначения(Неопределено, "ВидВремени");
	КонецЕсли;
	
	#Область Формирование // Формирование таблицы с учётом Видов времени и взаимных наложений
	ИзмеренияГрафика = "Дата, Сотрудник, Филиал";
	ТаблицаГрафиков.Индексы.Добавить(ИзмеренияГрафика);
	
	ТаблицаИзмеренийГрафика = ТаблицаГрафиков.Скопировать();
	ТаблицаИзмеренийГрафика.Свернуть(ИзмеренияГрафика,"");
	Отбор = Новый Структура(ИзмеренияГрафика);
	
	ТаблицаГрафиковОбъединенная = ТаблицаГрафиков.СкопироватьКолонки();
	ТаблицаГрафиковОбъединенная.Индексы.Добавить(ИзмеренияГрафика);
	ОстаткиСтрокиГрафика = ТаблицаГрафиков.СкопироватьКолонки();
	
	Для Каждого СтрокаГрафика Из ТаблицаГрафиков Цикл
		Если СтрокаГрафика.ВремяОкончания = Дата(1,1,1) Тогда
			СтрокаГрафика.ВремяОкончания = КонецДня(СтрокаГрафика.ВремяОкончания);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаИзмерения Из ТаблицаИзмеренийГрафика Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИзмерения);
		
		СтрокиГрафика = ТаблицаГрафиков.НайтиСтроки(Отбор);
		СтрокиОбъединенной = ТаблицаГрафиковОбъединенная.НайтиСтроки(Отбор);
		
		// Последняя строка всегда приоритетнее более ранней
		мОбрИнд = СтрокиГрафика.Количество()-1;
		СтрокиНаУдаление = Новый Массив;
		Для Сч = 0 По мОбрИнд Цикл
			
			ОстаткиСтрокиГрафика.Очистить();
			ЗаполнитьЗначенияСвойств(ОстаткиСтрокиГрафика.Добавить(), СтрокиГрафика[мОбрИнд-Сч]);
			
			Для Каждого СтрокаОбъединенной Из СтрокиОбъединенной Цикл
				
				Для Каждого СтрокаОстатка Из ОстаткиСтрокиГрафика Цикл
					Если Не СтрокаОстатка.ЭтоРабочееВремя И СтрокаОбъединенной.ЭтоРабочееВремя Тогда
						ГрафикиСотрудников.ВычестьИнтервалИзПериода(СтрокаОбъединенной, СтрокаОстатка, ОстаткиСтрокиГрафика, СтрокиНаУдаление);
					Иначе
						ГрафикиСотрудников.ВычестьИнтервалИзПериода(СтрокаОстатка, СтрокаОбъединенной, ОстаткиСтрокиГрафика, СтрокиНаУдаление);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
					Если СтрокаНаУдаление.Владелец() = ОстаткиСтрокиГрафика Тогда
						ОстаткиСтрокиГрафика.Удалить(СтрокаНаУдаление);
					Иначе
						ТаблицаГрафиковОбъединенная.Удалить(СтрокаНаУдаление);
						ИндексОбъединеннойСтроки = СтрокиОбъединенной.Найти(СтрокаНаУдаление);
						Если ИндексОбъединеннойСтроки <> Неопределено Тогда
							СтрокиОбъединенной.Удалить(ИндексОбъединеннойСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				СтрокиНаУдаление.Очистить();
				
			КонецЦикла;
			
			Для Каждого СтрокаОстатка Из ОстаткиСтрокиГрафика Цикл
				СтрокаОбъединенной = ТаблицаГрафиковОбъединенная.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбъединенной, СтрокаОстатка);
				СтрокиОбъединенной.Добавить(СтрокаОбъединенной);
			КонецЦикла;
			
			ТаблицаГрафиков.Удалить(СтрокиГрафика[мОбрИнд-Сч]); // Удаление уже не нужных строк исходной таблицы.

		КонецЦикла;
		
	КонецЦикла; // Цикл по уникальным сочетаниям на день сотрудника.
	
	ТаблицаГрафиков.Очистить();
	ТаблицаГрафиковОбъединенная.Индексы.Удалить(ТаблицаГрафиковОбъединенная.Индексы[0]);
	
	// Оставляем только рабочее время
	Отбор = Новый Структура("ЭтоРабочееВремя", Ложь);
	СтрокиНаУдаление = ТаблицаГрафиковОбъединенная.НайтиСтроки(Отбор);
	Для Каждого СтрокаГрафика Из СтрокиНаУдаление Цикл
		ТаблицаГрафиковОбъединенная.Удалить(СтрокаГрафика);
	КонецЦикла;
	ТаблицаГрафиков = ТаблицаГрафиковОбъединенная;
	
	ТаблицаГрафиковОбъединенная = Неопределено;
	#КонецОбласти
	
	ТаблицаГрафиковОбъединенная = Неопределено;
	
	// Склейка соседних интервалов времени с одинаковым днём, сотрудников, филиалом
	ИзмеренияСклейкиСтрока = "Сотрудник,Дата,Филиал,ВидВремени";
	ИзмеренияСклейкиМассивКолонок = СтрРазделить(ИзмеренияСклейкиСтрока, ",");
	
	// Сортировка для целей склейки. Поля сортировки таблицы значений примитивного типа вместо ссылочного.
	ТаблицаГрафиков.Колонки.Добавить("Сорт1", Новый ОписаниеТипов("Строка"));
	ТаблицаГрафиков.Колонки.Добавить("Сорт2", Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаГрафика Из ТаблицаГрафиков Цикл
		СтрокаГрафика.Сорт1 = Строка(СтрокаГрафика.Сотрудник.УникальныйИдентификатор());
		СтрокаГрафика.Сорт2 = Строка(СтрокаГрафика.Филиал.УникальныйИдентификатор())
							+ ?(ЗначениеЗаполнено(СтрокаГрафика.ВидВремени), Строка(СтрокаГрафика.ВидВремени.УникальныйИдентификатор()), "");
	КонецЦикла;
	ТаблицаГрафиков.Сортировать("Сорт1, Дата, Сорт2"); // Сортировка по "Сотрудник,Дата,Филиал,ВидВремени". 
	
	// Обход строк для склейки
	ИзмеренияСклейки = ТаблицаГрафиков.Скопировать(,ИзмеренияСклейкиСтрока);
	ИзмеренияСклейки.Свернуть(ИзмеренияСклейкиСтрока);
	ТаблицаГрафиковРезультат = ТаблицаГрафиков.СкопироватьКолонки();
	
	ТаблицаГрафиков.Индексы.Добавить(ИзмеренияСклейкиСтрока);
	Отбор = Новый Структура(ИзмеренияСклейкиСтрока);
	Для Каждого НаборИзмерений Из ИзмеренияСклейки Цикл
		ТекущаяСтрока = Неопределено;
		
		ЗаполнитьЗначенияСвойств(Отбор, НаборИзмерений);
		СтрокиГрафика = ТаблицаГрафиков.НайтиСтроки(Отбор);
		ТаблицаГрафиковПромежуточная = ТаблицаГрафиков.СкопироватьКолонки();
		
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаГрафиковПромежуточная.Добавить(), СтрокаГрафика);
		КонецЦикла;
		
		ТаблицаГрафиковПромежуточная.Сортировать("ВремяНачала Убыв");
		
		Для Каждого СтрокаГрафика Из ТаблицаГрафиковПромежуточная Цикл
			
			Если ТекущаяСтрока <> Неопределено
				И СтрокиТаблицыСовпадаютПоКолонкам(ТекущаяСтрока, СтрокаГрафика, ИзмеренияСклейкиМассивКолонок)
				И ТекущаяСтрока.ВремяНачала >= СтрокаГрафика.ВремяНачала
				И ТекущаяСтрока.ВремяНачала <= СтрокаГрафика.ВремяОкончания
			Тогда
				ТекущаяСтрока.ВремяНачала = СтрокаГрафика.ВремяНачала;
			Иначе
				ТекущаяСтрока = ТаблицаГрафиковРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаГрафика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаГрафиков.Индексы.Удалить(ТаблицаГрафиков.Индексы[0]);
	
	// Наличие даты в колонках ВремяНачала и ВремяОкончания 
	Если ВернутьВремяБезДаты Тогда
		Для Каждого СтрокаГрафика Из ТаблицаГрафиковРезультат Цикл
			СтрокаГрафика.ВремяНачала	 = Дата(1,1,1) + (СтрокаГрафика.ВремяНачала - НачалоДня(СтрокаГрафика.ВремяНачала));
			СтрокаГрафика.ВремяОкончания = Дата(1,1,1) + (СтрокаГрафика.ВремяОкончания - НачалоДня(СтрокаГрафика.ВремяОкончания));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаГрафиковРезультат;
	
КонецФункции

Функция ПолнаяТаблицаГрафиковЗаПериод(ДатаНачала, ДатаОкончания, ВернутьВремяБезДаты, 
												 Филиал = Неопределено, СотрудникиКабинеты = Неопределено,
												 ВидыРабочегоВремени = Неопределено, ВидыНерабочегоВремени = Неопределено, УсловиеУчастияВКалендарномПланировании = Истина)
	// Подготовка запроса											 
	Если ВидыРабочегоВремени = Неопределено Тогда
		ВидыРабочегоВремени = ГрафикиСотрудников.ПолучитьВидыВремени(Истина);
	КонецЕсли;
	Если ВидыНерабочегоВремени = Неопределено Тогда
		ВидыНерабочегоВремени = ГрафикиСотрудников.ПолучитьВидыВремени(Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыРабочегоВремени", ВидыРабочегоВремени);
	Запрос.УстановитьПараметр("ВидыНерабочегоВремени", ВидыНерабочегоВремени);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("ФилиалНеВыбран", Филиал = Неопределено);
	
	Запрос.Текст = ТекстЗапросаПолнаяТаблицаГрафиковЗаПериод();	
	
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ДатаОкончания));
	
	// Отбор в запросе по сотрудникам/кабинетам
	Если ТипЗнч(СотрудникиКабинеты) = Тип("Тип") Тогда
		НужныСотрудники	 = СотрудникиКабинеты = Тип("СправочникСсылка.Сотрудники");
		НужныКабинеты	 = СотрудникиКабинеты = Тип("СправочникСсылка.Оборудование");
	Иначе
		НужныСотрудники	 = Истина;
		НужныКабинеты	 = Истина;
	КонецЕсли;
	
	Если ТипЗнч(СотрудникиКабинеты) = Тип("Массив") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудники",	"ГрафикиРаботы.Сотрудник В (&СотрудникиКабинеты)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКабинеты",	"ГрафикиРаботы.Кабинет В (&СотрудникиКабинеты)");
		Запрос.УстановитьПараметр("СотрудникиКабинеты", СотрудникиКабинеты);
	Иначе
		Запрос.УстановитьПараметр("УсловиеСотрудники", НужныСотрудники);
		Запрос.УстановитьПараметр("УсловиеКабинеты", НужныКабинеты);
	КонецЕсли;
	Запрос.УстановитьПараметр("НужныСотрудники", НужныСотрудники);
	Запрос.УстановитьПараметр("НужныКабинеты", НужныКабинеты);
	
	// Отбор в запросе по УчаствуетВКалендарномПланировании
	Если УсловиеУчастияВКалендарномПланировании = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУчастияВКалендарномПланировании", "ГрафикиРаботы.Сотрудник.УчаствуетВКалендарномПланировании");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУчастияКабинетаВКалендарномПланировании", "ГрафикиРаботы.Кабинет.УчаствуетВКалендарномПланировании");
	Иначе
		Запрос.УстановитьПараметр("УсловиеУчастияВКалендарномПланировании", Истина);
		Запрос.УстановитьПараметр("УсловиеУчастияКабинетаВКалендарномПланировании", Истина);
	КонецЕсли;
	
	// Таблица результата
	ТаблицаГрафиков = Новый ТаблицаЗначений;
	ТипСотрудник = ОбщегоНазначенияКлиентСервер.НовыйМассив(?(НужныСотрудники, Тип("СправочникСсылка.Сотрудники"), Неопределено),
															 ?(НужныКабинеты,	Тип("СправочникСсылка.Оборудование"), Неопределено));
	ТаблицаГрафиков.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(ТипСотрудник));
	ТаблицаГрафиков.Колонки.Добавить("ВремяНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаГрафиков.Колонки.Добавить("ВремяОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаГрафиков.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаГрафиков.Колонки.Добавить("Филиал", Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	ТаблицаГрафиков.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыВремениГрафика"));
	ТаблицаГрафиков.Колонки.Добавить("ЭтоРабочееВремя", Новый ОписаниеТипов("Булево"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запрос = Неопределено;
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаГрафиков.Добавить(), Выборка);
	КонецЦикла;
												
	Возврат ТаблицаГрафиков;
												
КонецФункции

Функция СтрокиТаблицыСовпадаютПоКолонкам(Строка1, Строка2, ИменаКолонок)
	
	Результат = Истина;
	
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		Если Строка1[ИмяКолонки] <> Строка2[ИмяКолонки] Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПолнаяТаблицаГрафиковЗаПериод()
	
	Возврат "ВЫБРАТЬ
	        |	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	        |	ГрафикиРаботы.Кабинет КАК Кабинет,
	        |	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	        |	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	        |	ГрафикиРаботы.Дата КАК Дата,
	        |	ГрафикиРаботы.Филиал КАК Филиал,
	        |	ГрафикиРаботы.ВидВремени КАК ВидВремени,
	        |	ВЫБОР
	        |		КОГДА ГрафикиРаботы.ВидВремени В (&ВидыРабочегоВремени)
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК ЭтоРабочееВремя,
	        |	ГрафикиРаботы.ДатаСоздания КАК ДатаСоздания
	        |ПОМЕСТИТЬ ГрафикиРаботы
	        |ИЗ
	        |	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	        |ГДЕ
	        |	ГрафикиРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	        |	И (&УсловиеСотрудники ИЛИ &УсловиеКабинеты)
	        |	И (&ФилиалНеВыбран = ИСТИНА ИЛИ ГрафикиРаботы.Филиал В (&Филиал))
	        |	И (ГрафикиРаботы.ВидВремени В (&ВидыРабочегоВремени)
	        |			ИЛИ ГрафикиРаботы.ВидВремени В (&ВидыНерабочегоВремени))
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	        |	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	        |	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	        |	ГрафикиРаботы.Дата КАК Дата,
	        |	ГрафикиРаботы.Филиал КАК Филиал,
	        |	ГрафикиРаботы.ВидВремени КАК ВидВремени,
	        |	ГрафикиРаботы.ЭтоРабочееВремя КАК ЭтоРабочееВремя,
	        |	ГрафикиРаботы.ДатаСоздания КАК ДатаСоздания
	        |ИЗ
	        |	ГрафикиРаботы КАК ГрафикиРаботы
	        |ГДЕ
	        |	&НужныСотрудники
	        |	И &УсловиеСотрудники
	        |	И НЕ ГрафикиРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	        |	И &УсловиеУчастияВКалендарномПланировании
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ГрафикиРаботы.Кабинет,
	        |	ГрафикиРаботы.ВремяНачала,
	        |	ГрафикиРаботы.ВремяОкончания,
	        |	ГрафикиРаботы.Дата,
	        |	ГрафикиРаботы.Филиал,
	        |	ГрафикиРаботы.ВидВремени,
	        |	ГрафикиРаботы.ЭтоРабочееВремя,
	        |	ГрафикиРаботы.ДатаСоздания
	        |ИЗ
	        |	ГрафикиРаботы КАК ГрафикиРаботы
	        |ГДЕ
	        |	&НужныКабинеты
	        |	И &УсловиеКабинеты
	        |	И НЕ ГрафикиРаботы.Кабинет = ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	        |	И &УсловиеУчастияКабинетаВКалендарномПланировании
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Сотрудник,
	        |	Дата,
	        |	ВремяНачала,
	        |	ВремяОкончания УБЫВ,
	        |	ГрафикиРаботы.ДатаСоздания";	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнтервалМеньшеЭталонного(СтруктураВремени, ЭталонныйИнтервал)
	
	Если Не ЗначениеЗаполнено(ЭталонныйИнтервал) Тогда
		Возврат Ложь; // В случае если у сотрудника не заполнен реквизит ДлительностьПриема, будем считать что у него не требуется огрублять.
	КонецЕсли;
	ТестируемыйИнтервал = СтруктураВремени.ВремяОкончания - СтруктураВремени.ВремяНачала;
	
	Возврат ТестируемыйИнтервал < ЭталонныйИнтервал;
	
КонецФункции

#Область ИнтерактивноеРедактированиеГрафика

Функция ПолучитьГрафикСотрудника(Филиал, Подразделение, Сотрудник, Дата, ДокументУГ, ФилиалПоПриоритету, ПодразделениеПоПриоритету)
	Если ЗначениеЗаполнено(ДокументУГ) Тогда
		Возврат ДокументУГ;
	КонецЕсли;
	
	ПериодМесяц = НачалоМесяца(Дата);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("ПериодМесяц", ПериодМесяц);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Если НЕ ЗначениеЗаполнено(Филиал) Тогда
		Запрос.УстановитьПараметр("НетОтбораПоФилиалу", Истина);
	Иначе
		Запрос.УстановитьПараметр("НетОтбораПоФилиалу", Ложь);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.УстановитьПараметр("НетОтбораПоПодразделению", Истина);
	Иначе
		Запрос.УстановитьПараметр("НетОтбораПоПодразделению", Ложь);
	КонецЕсли;
	
	РежимыГрафиков = Новый Массив;
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		РежимыГрафиков.Добавить(Перечисления.ВидыУстановкиГрафиков.Сотрудники);
		РежимыГрафиков.Добавить(Перечисления.ВидыУстановкиГрафиков.СотрудникиКабинеты);
	ИначеЕсли ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Оборудование") Тогда
		РежимыГрафиков.Добавить(Перечисления.ВидыУстановкиГрафиков.Кабинеты);
		РежимыГрафиков.Добавить(Перечисления.ВидыУстановкиГрафиков.КабинетыСотрудники);
	КонецЕсли;
	Запрос.УстановитьПараметр("Режим", РежимыГрафиков);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстановкаГрафиковРаботы.Ссылка КАК Ссылка,
	|	УстановкаГрафиковРаботы.Филиал КАК Филиал,
	|	УстановкаГрафиковРаботы.Подразделение КАК Подразделение,
	|	УстановкаГрафиковРаботы.Дата КАК Дата
	|ПОМЕСТИТЬ ДокументыГрафика
	|ИЗ
	|	Документ.УстановкаГрафиковРаботы КАК УстановкаГрафиковРаботы
	|ГДЕ
	|	УстановкаГрафиковРаботы.ПлДата = &ПериодМесяц
	|	И (УстановкаГрафиковРаботы.Филиал = &Филиал
	|			ИЛИ &НетОтбораПоФилиалу)
	|	И НЕ УстановкаГрафиковРаботы.ПометкаУдаления
	|	И (УстановкаГрафиковРаботы.Подразделение = &Подразделение
	|			ИЛИ &НетОтбораПоПодразделению)
	|	И УстановкаГрафиковРаботы.Проведен
	|	И УстановкаГрафиковРаботы.Режим В(&Режим)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыГрафика.Ссылка КАК Ссылка,
	|	ДокументыГрафика.Филиал КАК Филиал,
	|	ДокументыГрафика.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА УстановкаГрафиковРаботыГрафикиРаботы.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСотрудникВДокументе
	|ИЗ
	|	ДокументыГрафика КАК ДокументыГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаГрафиковРаботы.ГрафикиРаботы КАК УстановкаГрафиковРаботыГрафикиРаботы
	|		ПО ДокументыГрафика.Ссылка = УстановкаГрафиковРаботыГрафикиРаботы.Ссылка
	|			И (УстановкаГрафиковРаботыГрафикиРаботы.Сотрудник = &Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьСотрудникВДокументе УБЫВ,
	|	ДокументыГрафика.Дата УБЫВ";
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ТЗ = Рез.Выгрузить();
		Если ТЗ.Количество() > 1 Тогда
			
			// Есть несколько документов графика после строгих отборов.
			// Далее разнообразный поиск самого подходящего из них
			Отбор = Новый Структура("ЕстьСотрудникВДокументе", Истина);
			мДокументов = ТЗ.НайтиСтроки(Отбор);
			Если мДокументов.Количество() = 1 Тогда
				// Строго в одном нынешнем уже есть этот сотрудник
				Возврат мДокументов[0].Ссылка;
			Иначе
				Если мДокументов.Количество() = 0 Тогда
					Отбор.Удалить("Подразделение");
				КонецЕсли;
				Отбор.Вставить("Филиал", ФилиалПоПриоритету);
				Отбор.Вставить("Подразделение", ПодразделениеПоПриоритету);
				
				мДокументов = ТЗ.НайтиСтроки(Отбор);
				Если мДокументов.Количество() > 0 Тогда
					Возврат мДокументов[0].Ссылка;
				Иначе
					Отбор.Удалить("Подразделение");
					Если мДокументов.Количество() > 0 Тогда
						Возврат мДокументов[0].Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ТЗ[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьГрафикСотрудника(СтруктураПолучателя) 
	
	Подразделение	= ОпределитьПриоритетноеПодразделение(СтруктураПолучателя);
	Филиал			= ОпределитьПриоритетныйФилиал(СтруктураПолучателя);
	Дата			= СтруктураПолучателя.Дата;
	
	// Заполним реквизиты документа.
	Док					= Документы.УстановкаГрафиковРаботы.СоздатьДокумент();
	Док.Дата			= ТекущаяДатаСеанса();
	
	Если ТипЗнч(СтруктураПолучателя.Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
		Док.Режим		= Перечисления.ВидыУстановкиГрафиков.Сотрудники;
	Иначе
		Док.Режим		= Перечисления.ВидыУстановкиГрафиков.Кабинеты;
	КонецЕсли;
	
	Док.Филиал			= Филиал;
	Док.Подразделение	= Подразделение;
	Док.ПлДата			= НачалоМесяца(Дата);
	Док.Записать();
	
	Возврат Док.Ссылка;
	
КонецФункции

Процедура ДобавитьСобытиеВГрафик(ДокГрафик, Дата, ВремяНач, ВремяКон, ВидВремени, Название, Комментарий, Сотрудник)
	
	СтрГрафик = ДокГрафик.ГрафикиРаботы.Добавить();
	СтрГрафик.Дата			 = Дата;
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
    	СтрГрафик.Сотрудник	 = Сотрудник;
	Иначе
    	СтрГрафик.Кабинет	 = Сотрудник;
	КонецЕсли;
	
	СтрГрафик.ВремяНачала 	 = ВремяНач;
	СтрГрафик.ВремяОкончания = ВремяКон;
	СтрГрафик.ВидВремени 	 = ВидВремени;                     
	СтрГрафик.Название	 	 = Название;
	СтрГрафик.Комментарий	 = Комментарий;
	СтрГрафик.Автор = ПараметрыСеанса.ТекущийПользователь;
	СтрГрафик.ДатаСоздания = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура УдалитьСобытиеИзГрафика(ДокГрафик, ДанныеГрафика)
	
	СтрокиГрафика = ДокГрафик.ГрафикиРаботы.НайтиСтроки(ДанныеГрафика);
	Для Каждого СтрГрафик Из СтрокиГрафика Цикл
		ДокГрафик.ГрафикиРаботы.Удалить(СтрГрафик);
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьПриоритетныйФилиал(СтруктураПолучателя)
	
	// Посмотрим в отчете.
	Если Значениезаполнено(СтруктураПолучателя.Филиал) Тогда
		Возврат СтруктураПолучателя.Филиал;
	КонецЕсли;
	// Посмотрим в подразделении отчета.
	Если ЗначениеЗаполнено(СтруктураПолучателя.Подразделение) И ЗначениеЗаполнено(СтруктураПолучателя.Подразделение.Филиал) Тогда
		Возврат СтруктураПолучателя.Подразделение.Филиал;		
	КонецЕсли;
	// Посмотрим в подразделении сотрудника.
	Если ЗначениеЗаполнено(СтруктураПолучателя.Сотрудник)
		И ТипЗнч(СтруктураПолучателя.сотрудник)= Тип("СправочникСсылка.Сотрудники")
		И ЗначениеЗаполнено(СтруктураПолучателя.Сотрудник.Подразделение) 
		И ЗначениеЗаполнено(СтруктураПолучателя.Сотрудник.Подразделение.Филиал)  Тогда
		Возврат СтруктураПолучателя.сотрудник.Подразделение.Филиал;	
	КонецЕсли;
	// Посмотрим в филиале пользователя, которому сопоставлен сотрудник.
	Если ЗначениеЗаполнено(СтруктураПолучателя.сотрудник) И ТипЗнч(СтруктураПолучателя.сотрудник)= Тип("СправочникСсылка.Сотрудники") Тогда
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("Сотрудник", СтруктураПолучателя.сотрудник);	
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПользователей.Значение
			|ИЗ
			|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|ГДЕ
			|	НастройкиПользователей.Пользователь = &Пользователь
			|	И НастройкиПользователей.Настройка = &Настройка";
			
			Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойФилиал);
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Возврат Результат.Выгрузить()[0].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// Посмотрим в текущем пользователе.
	Возврат УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	
КонецФункции

Функция ОпределитьПриоритетноеПодразделение(СтруктураПолучателя)
	
	// Посмотрим в подразделении отчета.
	Если ЗначениеЗаполнено(СтруктураПолучателя.Подразделение) Тогда
		Возврат СтруктураПолучателя.Подразделение;		
	КонецЕсли;
	// Посмотрим в подразделении сотрудника.
	Если ЗначениеЗаполнено(СтруктураПолучателя.Сотрудник)
		И ТипЗнч(СтруктураПолучателя.сотрудник)= Тип("СправочникСсылка.Сотрудники")
		И ЗначениеЗаполнено(СтруктураПолучателя.сотрудник.Подразделение) Тогда
		Возврат СтруктураПолучателя.сотрудник.Подразделение;	
	КонецЕсли;
	
    // Ничего не вышло вернем пустую ссылку.
	Возврат Справочники.Подразделения.ПустаяСсылка();
	
КонецФункции

Процедура ОчиститьВремяГрафика(ДокГрафик, ДанныеГрафика, ВремяНач, ВремяКон)
	
	Интервалы = ДокГрафик.ГрафикиРаботы.НайтиСтроки(Новый Структура("Сотрудник, Дата", ДанныеГрафика.Сотрудник, ДанныеГрафика.Дата));
	
	ИсключаемыйПериод = Новый Структура("ВремяНачала, ВремяОкончания", ВремяНач, ВремяКон);
	СтрокиГрафикаКУдалению = Новый Массив;
	Для Каждого Интервал Из Интервалы Цикл
		ВычестьИнтервалИзПериода(Интервал, ИсключаемыйПериод, ДокГрафик.ГрафикиРаботы, СтрокиГрафикаКУдалению);
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиГрафикаКУдалению Цикл
		ДокГрафик.ГрафикиРаботы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеГрафикаПоИдентификаторуСобытия(ИдентификаторСобытия)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСобытия", ИдентификаторСобытия);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботы.Регистратор КАК ДокументУГ,
	|	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	|	ГрафикиРаботы.Кабинет КАК Кабинет,
	|	ГрафикиРаботы.ВидВремени КАК ВидВремени,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботы.Комментарий КАК Комментарий,
	|	ГрафикиРаботы.Название КАК Название,
	|	ГрафикиРаботы.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ИдентификаторСобытия = &ИдентификаторСобытия"
	;
	
	СтрокиГрафика = ОбщегоНазначенияКлиентСервер.ТаблицуЗначенийВМассивСтруктур(Запрос.Выполнить().Выгрузить());
	Для Каждого ДанныеГрафика Из СтрокиГрафика Цикл
		ДокументУГ = ДанныеГрафика.ДокументУГ;
		ДанныеГрафика.Удалить("ДокументУГ");
		Возврат Новый Структура("ДокументУГ, ДанныеГрафика", ДокументУГ, ДанныеГрафика);
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
