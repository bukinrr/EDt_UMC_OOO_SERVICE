#Область ПрограммныйИнтерфейс

// Возвращает остататок по сертификату
//
// Параметры:
//  Сертификат		 - СправочникСсылка.Сертификаты - ссылка на сертификат.
//  МоментВремени	 - МоментВремени - момент определения остатков.
// 
// Возвращаемое значение:
//  Число - Остаток по сертификату.
//
Функция ПолучитьОстатокПоСертификату(Сертификат, МоментВремени) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоСертификатамОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам.Остатки(&Период, Сертификат = &Сертификат) КАК ОстаткиПоСертификатамОстатки"
	;
	
	Запрос.УстановитьПараметр("Период", МоментВремени);
	Запрос.УстановитьПараметр("Сертификат", Сертификат);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Рез.Выгрузить()[0].СуммаОстаток;
	КонецЕсли;
	
КонецФункции

// Возвращает остататки по комплексному сертификату - с детализацией до номенклатуры.
//
// Параметры:
//  Сертификат		 - СправочникСсылка.Сертификаты - ссылка на сертификат.
//  МоментВремени	 - МоментВремени - момент определения остатков.
// 
// Возвращаемое значение:
//  Массив из Структура - массив структур с ключами "Номенклатура", "Остаток" и "СуммаПокупки".
//
Функция ОстаткиКомплексногоСертификата(Сертификат, МоментВремени) Экспорт
	
	Остатки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоСертификатамОстатки.СуммаОстаток КАК Остаток,
	|	ОстаткиПоСертификатамОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиПоСертификатамОстатки.СуммаПокупкиОстаток КАК СуммаПокупки
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам.Остатки(&Период, Сертификат = &Сертификат) КАК ОстаткиПоСертификатамОстатки"
	;
	
	Запрос.УстановитьПараметр("Период", МоментВремени);
	Запрос.УстановитьПараметр("Сертификат", Сертификат);
	
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Остатки = Новый Массив;
		Выб = Рез.Выбрать();
		Пока Выб.Следующий() Цикл
			Остаток = Новый Структура("Номенклатура, Остаток, СуммаПокупки");
			ЗаполнитьЗначенияСвойств(Остаток, Выб);
			Остатки.Добавить(Остаток);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Остатки;
	
КонецФункции

// Определяет, был ли расход по сертификату.
//
// Параметры:
//  Сертификат		 - СправочникСсылка.Сертификаты - ссылка на сертификат.
// 
// Возвращаемое значение:
//  Булево.
//
функция ЕстьРасходПоСертификату(Сертификат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сертификат", Сертификат);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОстаткиПоСертификатам.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	|ГДЕ
	|	ОстаткиПоСертификатам.Сертификат = &Сертификат
	|	И ОстаткиПоСертификатам.ВидДвижения = &ВидДвижения
	|	И ОстаткиПоСертификатам.Сертификат.ДатаНачалаДействия <= ОстаткиПоСертификатам.Период"
	;
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция проверяет входимость номенклатуры таблицы работ в ограничения сертификатов, указанных для этих работ
//
// Параметры:
//  ТаблицаПоРаботам - ТаблицаЗначений	 - Таблица работ документа.
// 
// Возвращаемое значение:
//  Таблица - ТаблицаЗначений - Таблица невходящих в ограничения услуг.
//  Неопределено - Если у документа нет ни одной работы не входящей в ограничения сертификатов.
//
Функция ПроверитьНаПопаданиеНоменклатурыВОграниченияСертификата(ТаблицаПоРаботам) Экспорт
	
	ТабРабот = ТаблицаПоРаботам.Скопировать();
	махОбрИнд = ТабРабот.Количество() - 1;
	Для сч = 0 по махОбрИнд Цикл
		СтрокаРаботПоСертификату = ТабРабот[махОбрИнд-сч];
		Если не ЗначениеЗаполнено(СтрокаРаботПоСертификату.Сертификат) Тогда
			ТабРабот.Удалить(махОбрИнд-сч);
		КонецЕсли;
	КонецЦикла;
	
	Если ТабРабот.Количество()<>0 Тогда
		
		ТабРабот.Свернуть("НомерСтроки, Номенклатура, Сертификат");
		ТабНепопаданияУслугВОграничение = ТабРабот.СкопироватьКолонки();
		
		Для Каждого СтрокаРаботПоСертификату из ТабРабот Цикл
			
			Если Не НоменклатураВходитВОграничениеСертификата(СтрокаРаботПоСертификату.Номенклатура,СтрокаРаботПоСертификату.Сертификат) Тогда
				ЗаполнитьЗначенияСвойств(ТабНепопаданияУслугВОграничение.Добавить(),СтрокаРаботПоСертификату);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТабНепопаданияУслугВОграничение.Количество()<>0 Тогда
			Возврат ТабНепопаданияУслугВОграничение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция проверяет входимость номенклатуры таблицы работ в ограничения сертификатов, указанных для этих работ
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Проверяемая номенклатура.
//  Сертификат	 - СправочникСсылка.Сертификаты  - Сертификат.
// 
// Возвращаемое значение:
//  Булево - Истина, если номенклатура поподает в перечень услуг которые можно оказать по сертификату,
//      Ложь, если услугу нельзя оказывать по данному сертификату.
//
Функция НоменклатураВходитВОграничениеСертификата(Номенклатура, Сертификат) Экспорт
	
	ВидСертификата = Сертификат.ВидСертификата;
	Если ВидСертификата.Услуги.Количество() = 0
 		Или (ВидСертификата.ПополняемыйСертификат И ВидСертификата.КомплексныйСертификат И Не ВидСертификата.ПополнятьТолькоНоменклатуройСертификата)
 	Тогда
		Возврат Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст  =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Номенклатура В ИЕРАРХИИ
		|				(ВЫБРАТЬ
		|					ВидыСертификатовУслуги.Фильтр
		|				ИЗ
		|					Справочник.ВидыСертификатов.Услуги КАК ВидыСертификатовУслуги
		|				ГДЕ
		|					ВидыСертификатовУслуги.Ссылка = &ВидСертификата)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Результат"
		;
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		Запрос.УстановитьПараметр("ВидСертификата",ВидСертификата);
		Возврат Запрос.Выполнить().Выгрузить()[0].Результат;
	КонецЕсли;
		
КонецФункции

// Возвращает услуги сертификата
//
// Параметры:
//  Сертификат	 - СправочникСсылка.Сертификаты  - Сертификат, услуги которого необходимо получить.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Услуги сертификата.
//
Функция ПолучитьУслугиСертификата(Сертификат) Экспорт
	
	Перем ВидСертификата;
	
	Результат = Новый Массив;
	Если ТипЗнч(Сертификат) = Тип("СправочникСсылка.Сертификаты") Тогда
		ВидСертификата = Сертификат.ВидСертификата
	ИначеЕсли ТипЗнч(Сертификат) = Тип("СправочникСсылка.ВидыСертификатов") Тогда
		ВидСертификата = Сертификат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидСертификата) Тогда                         
		Услуги = ВидСертификата.Услуги.ВыгрузитьКолонку("Фильтр");
		Группы = Новый Массив;
		Для Каждого Услуга Из Услуги Цикл
			Если Услуга.ЭтоГруппа Тогда 
				Группы.Добавить(Услуга);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
		
		Запрос.УстановитьПараметр("Родитель", Группы);
		
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Услуга Из Услуги Цикл
			Если Не Услуга.ЭтоГруппа Тогда
				Результат.Добавить(Услуга);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет, стоит ли ограничение на пополнение только списком услуг из ТЧ Услуги
//
// Параметры:
//  Сертификат	 - СправочникСсылка.Сертификаты - Сертификат.
// 
// Возвращаемое значение:
//  Булево - Пополнение только списком услуг.
//
Функция СертификатПополняемСписком(Сертификат) Экспорт
	Возврат Сертификат.ВидСертификата.ПополнятьТолькоНоменклатуройСертификата;	
КонецФункции

// Функция проверяет, превышает ли сумма оплаты по сертификатам остатки по ним
//
// Параметры:
//  Оплата					 - ТаблицаЗначений	 - таблица оплат документа
//  Работы					 - ТаблицаЗначений	 - таблица работ документа
//  СтруктураШапкиДокумента	 - Структура		 - Структура шапки документа, откуда вызвана процедура
//  МоментВремени			 - МоментВремени	 - Момент времени документа - точка проверки остатков
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица описания превышений.
//
Функция ПроверитьПревышениеОстатковПоСертификатам(Оплата, Работы, СтруктураШапкиДокумента,МоментВремени) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоСертификатамОстатки.Сертификат,
	|	ОстаткиПоСертификатамОстатки.СуммаОстаток КАК Остаток,
	|	ОстаткиПоСертификатамОстатки.Номенклатура
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам.Остатки(&ДатаКон, Сертификат В (&Сертификаты)) КАК ОстаткиПоСертификатамОстатки"
	;
	
	мСтр = Оплата.НайтиСтроки(Новый Структура("ВидОплаты",Перечисления.ВидыОплаты.Сертификатом));
	
	мСертификаты = Новый СписокЗначений;
	Для Каждого СтрокаОплаты из мСтр Цикл
		Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыОплаты.Сертификатом Тогда
			мСертификаты.Добавить(СтрокаОплаты.Сертификат);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРабот Из Работы Цикл
		Если ЗначениеЗаполнено(СтрокаРабот.Сертификат) Тогда
			мСертификаты.Добавить(СтрокаРабот.Сертификат);
			мСтр.Добавить(Новый Структура("Сертификат, Номенклатура, Сумма",СтрокаРабот.Сертификат,СтрокаРабот.Номенклатура,СтрокаРабот.Количество));
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаКон",МоментВремени);
	Запрос.УстановитьПараметр("Сертификаты",мСертификаты);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	ТаблицаВозврат = Новый ТаблицаЗначений;
	ТаблицаВозврат.Колонки.Добавить("Сертификат");
	ТаблицаВозврат.Колонки.Добавить("Номенклатура");
	ТаблицаВозврат.Колонки.Добавить("Сумма");
	ТаблицаВозврат.Колонки.Добавить("СуммаСертификата");
	ТаблицаВозврат.Колонки.Добавить("НаОплату");
	
	ТаблицаСертификатыДок = Новый ТаблицаЗначений;
 	ТаблицаСертификатыДок.Колонки.Добавить("Сертификат");
	ТаблицаСертификатыДок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСертификатыДок.Колонки.Добавить("Сумма");
	
	Для Каждого стр Из мСтр Цикл
		НоваяСтрока = ТаблицаСертификатыДок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		Если Не стр.Сертификат.ВидСертификата.КомплексныйСертификат Тогда
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();	
		КонецЕсли;
	КонецЦикла;
	мСтр = Неопределено;
	ТаблицаСертификатыДок.Свернуть("Сертификат,Номенклатура","Сумма");
	
	Для Каждого стр Из ТаблицаСертификатыДок Цикл
		
		Отбор = Новый  Структура("Сертификат,Номенклатура");
		
		Отбор.Сертификат = стр.Сертификат;
		Если стр.Сертификат.ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаУслуги
			И стр.Сертификат.ВидСертификата.КомплексныйСертификат Тогда
			
			Отбор.Номенклатура = стр.Номенклатура;
			Выб.Сбросить();
			
			Если Выб.НайтиСледующий(Отбор) Тогда
				СуммаСертификата = Выб.Остаток; 
			Иначе
				Выб.Сбросить();
				СуммаСертификата = 0;
				Пока Выб.Следующий() Цикл
					Если стр.Номенклатура.ПринадлежитЭлементу(Выб.Номенклатура) Тогда
						СуммаСертификата = Выб.Остаток;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				 
			КонецЕсли;
			
			Если стр.Сумма > СуммаСертификата Тогда
				стрВозврат = ТаблицаВозврат.Добавить();
				ЗаполнитьЗначенияСвойств(стрВозврат,стр);
				стрВозврат.СуммаСертификата = СуммаСертификата;
				стрВозврат.НаОплату = (стрВозврат.Сертификат.ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаОплату);
			КонецЕсли;
			
		Иначе
			
			Выб.Сбросить();
			Отбор.Удалить("Номенклатура");
			Если Выб.НайтиСледующий(Отбор) Тогда
				СуммаСертификата = Выб.Остаток; 
			Иначе
				СуммаСертификата = 0; 
			КонецЕсли;
			
			Если стр.Сумма > СуммаСертификата Тогда
				стрВозврат = ТаблицаВозврат.Добавить();
				ЗаполнитьЗначенияСвойств(стрВозврат,стр);
				стрВозврат.СуммаСертификата = СуммаСертификата;
				стрВозврат.НаОплату = (стрВозврат.Сертификат.ВидСертификата.ТипСертификата = Перечисления.ТипыСертификатов.НаОплату);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаВозврат;
	
КонецФункции

// Функция оперативно проверяет сертификаты из списка на прохождение порога предупреждения о скорой выработке
//  сертификата и формирует по таким сертификатам общую строку предупреждения
//
// Параметры:
//  СписокСертификатов	 - Массив - Массив ссылок на проверяемые сертификаты.
//  Дата				 - Дата   - Дата на которую необходимо получить остатки по сертификатам.
// 
// Возвращаемое значение:
//  Строка - Строка предупреждения.
//
Функция СформироватьПредупреждениеОбОкончанииСертификатов(СписокСертификатов, Дата = Неопределено) Экспорт
	
	ТекстПредупреждения = "";
	
	Если Дата = Неопределено Тогда
		Дата = Дата(1,1,1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоСертификатамОстатки.Сертификат,
	|	ОстаткиПоСертификатамОстатки.Сертификат.Наименование КАК Наименование,
	|	ОстаткиПоСертификатамОстатки.Сертификат.Код КАК Код,
	|	ОстаткиПоСертификатамОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам.Остатки(&Период, Сертификат В (&СписокСертификатов)) КАК ОстаткиПоСертификатамОстатки
	|ГДЕ
	|	ОстаткиПоСертификатамОстатки.Сертификат.ВидСертификата.ПорогПредупрежденияОкончания > 0
	|	И ОстаткиПоСертификатамОстатки.Сертификат.ВидСертификата.ПорогПредупрежденияОкончания >= ОстаткиПоСертификатамОстатки.СуммаОстаток"
	;
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("СписокСертификатов", СписокСертификатов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстПредупреждения = ТекстПредупреждения + ?(ПустаяСтрока(ТекстПредупреждения),"",Символы.ПС) + 
							  "По сертификату " + Выборка.Наименование + " №"+СокрЛП(Выборка.Код) + " текущий остаток равен "+ Выборка.СуммаОстаток;
		
	КонецЦикла;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

// Возвращает истину, если срок сертификата истёк
//
// Параметры:
//  Сертификат	 - СправочникСсылка.Сертификаты - Проверяемый сертификат.
//  Дата		 - Дата - Дата, на которую совершается проверка.
// 
// Возвращаемое значение:
//  Булево - Сертификат истек.
//
Функция СрокСертификатаИстек(Сертификат, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Результат = Ложь;
	
	ВидСертификата = Сертификат.ВидСертификата;
	Если ЗначениеЗаполнено(ВидСертификата.СрокДействия) Тогда
		Если ТипЗнч(ВидСертификата.СрокДействия) = Тип("Число") Тогда
			
			Результат = Дата > КонецДня(ДобавитьМесяц(Сертификат.ДатаНачалаДействия,ВидСертификата.СрокДействия));
			
		Иначе
			
			Результат = Дата > КонецДня(ВидСертификата.СрокДействия);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список сертификатов клиента
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - Клиент, чьи сертификаты необходимо получить.
//  Дата	 - Дата						 - Дата, на которую необходио получить сертификаты.
// 
// Возвращаемое значение:
//  Таблица - Таблица сертификатов клиента.
//
Функция ПолучитьСертификатыКлиента(Клиент,Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",Клиент);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиПоСертификатамОстатки.Сертификат,
	|	ОстаткиПоСертификатамОстатки.Сертификат.Наименование КАК Наименование,
	|	ОстаткиПоСертификатамОстатки.СуммаОстаток КАК Остаток,
	|	ОстаткиПоСертификатамОстатки.Сертификат.ВидСертификата КАК ВидСертификата,
	|	ОстаткиПоСертификатамОстатки.Сертификат.Примечание КАК Примечание
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам.Остатки(&Дата, Сертификат.ВладелецКарты = &Клиент) КАК ОстаткиПоСертификатамОстатки"
	;
	
	ТаблицаСертификатов = Запрос.Выполнить().Выгрузить();
	
	мОбрИнд = ТаблицаСертификатов.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаТЗ = ТаблицаСертификатов[мОбрИнд-сч];
		Если СрокСертификатаИстек(ТаблицаСертификатов[мОбрИнд-сч].Сертификат) Тогда
			ТаблицаСертификатов.Удалить(мОбрИнд-сч);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСертификатов;
	
КонецФункции

// Возвращает список сертификатов клиента в виде массива
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - Клиент, чьи сертификаты необходимо получить.
//  Дата	 - Дата						 - Дата, на которую необходио получить сертификаты.
// 
// Возвращаемое значение:
//  Массив - Массив сертификатов клиента.
//
Функция ПолучитьМассивСертификатовКлиента(Клиент,Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",Клиент);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиПоСертификатамОстатки.Сертификат,
	|	ОстаткиПоСертификатамОстатки.Сертификат.Наименование КАК Наименование,
	|	ОстаткиПоСертификатамОстатки.СуммаОстаток КАК Остаток,
	|	ОстаткиПоСертификатамОстатки.Сертификат.ВидСертификата КАК ВидСертификата,
	|	ОстаткиПоСертификатамОстатки.Сертификат.Примечание КАК Примечание
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам.Остатки(&Дата, Сертификат.ВладелецКарты = &Клиент) КАК ОстаткиПоСертификатамОстатки"
	;
	
	ТаблицаСертификатов = Запрос.Выполнить().Выгрузить();
	
	мОбрИнд = ТаблицаСертификатов.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаТЗ = ТаблицаСертификатов[мОбрИнд-сч];
		Если СрокСертификатаИстек(ТаблицаСертификатов[мОбрИнд-сч].Сертификат) Тогда
			ТаблицаСертификатов.Удалить(мОбрИнд-сч);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСертификатов.ВыгрузитьКолонку("Сертификат");
	
КонецФункции

// Функция проверяет, входит ли сертификат в ограничение по дням недели
//
// Параметры:
//  Сертификат	 - СправочникСсылка.Сертификаты - Проверяемый сертификат.
//  Дата		 - Дата - Дата, на которую совершается проверка.
// 
// Возвращаемое значение:
//  Булево - Истина - Сертификат входит в ограничение по дням недели. Ложь - Не входит. 
//
Функция ПроверитьНаВхождениеСертификатаВОграничениеПоДнямНедели(Сертификат, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Результат = РаботаСоСкидками.СкидкаВходитВОграничениеПоВремени(Сертификат.ВидСертификата,Дата);	
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу остатков сертификатов
//
// Параметры:
//  Сертификат	 - Массив, СправочникСсылка.Сертификаты - Сертификаты, чьи остатки необходимо получить.
//  Дата		 - Дата - Дата, на которую необходимо получить остатки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица остатков по сертификатам.
//
Функция ПолучитьТаблицуОстатковСертификатов(Сертификат = Неопределено, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) = Тип("Массив") Тогда
		мсСертификаты = Сертификат;
	ИначеЕсли ТипЗнч(Сертификат) = Тип("СправочникСсылка.Сертификаты") Тогда
		мсСертификаты = Новый Массив;
		мсСертификаты.Добавить(Сертификат);
	Иначе
		мсСертификаты = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоСертификатамОстатки.Сертификат,
	|	ОстаткиПоСертификатамОстатки.Номенклатура,
	|	СУММА(ОстаткиПоСертификатамОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ОстаткиПоСертификатамОстатки.СуммаПокупкиОстаток) КАК СуммаПокупки
	|ИЗ
	|	РегистрНакопления.ОстаткиПоСертификатам.Остатки(
	|			&Дата,
	|			НЕ &ОтбиратьСертификаты
	|				ИЛИ Сертификат В (&СписокСертификатов)) КАК ОстаткиПоСертификатамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоСертификатамОстатки.Сертификат,
	|	ОстаткиПоСертификатамОстатки.Номенклатура";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОтбиратьСертификаты", мсСертификаты.Количество() > 0);
	Запрос.УстановитьПараметр("СписокСертификатов", мсСертификаты);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает последнего владельца сертификата
Функция ПолучитьПоследнегоВладельцаСертификата(Сертификат, Дата = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сертификат", Сертификат);
	Запрос.УстановитьПараметр("Дата", ?(Дата = Неопределено, ТекущаяДата(), Дата));
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОстаткиПоСертификатам.Период КАК Период,
				   |	ОстаткиПоСертификатам.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |ГДЕ
				   |	ОстаткиПоСертификатам.Сертификат = &Сертификат
	               |	И ОстаткиПоСертификатам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ОстаткиПоСертификатам.Сумма > 0
	               |	И ТИПЗНАЧЕНИЯ(ОстаткиПоСертификатам.Регистратор) = ТИП(Документ.ОказаниеУслуг)
	               |	И ОстаткиПоСертификатам.Период < &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор.Клиент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти