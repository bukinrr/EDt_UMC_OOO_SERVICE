#Область ПрограммныйИнтерфейс

// Функция возвращает результат проверки строки на предмет соответствия
//  штрихкоду формата EAN8.
//
// Параметры:
//  Штрихкод - Строка	 - Проверяемый штрихкод.
// 
// Возвращаемое значение:
//   Булево - Результат проверки.
//
Функция ТипШтрихкодаEAN8ТО(Штрихкод) Экспорт

	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 3;

	Если СтрДлина(Штрихкод) = 8 Тогда
		Индекс = Неопределено;
		Для Индекс = 1 По 7 Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 8) = Сумма + 48);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ТипШтрихкодаEAN8ТО()

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN13.
//
// Параметры:
//  Штрихкод - Строка	 - Проверяемый штрихкод.
// 
// Возвращаемое значение:
//   Булево - Результат проверки.
//
Функция ТипШтрихкодаEAN13ТО(Штрихкод) Экспорт

	Результат = (СтрДлина(Штрихкод) = 13
	             И КонтрольныйСимволEAN13ТО(Штрихкод) = Прав(Штрихкод, 1));

	Возврат Результат;

КонецФункции // ТипШтрихкодаEAN13ТО()

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата ITF14.
//
// Параметры:
//  Штрихкод - Строка	 - Проверяемый штрихкод.
// 
// Возвращаемое значение:
//   Булево - Результат проверки.
//
Функция ТипШтрихкодаITF14ТО(Штрихкод) Экспорт

	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 1;

	Если СтрДлина(Штрихкод) = 14 Тогда
		Индекс = Неопределено;
		Для Индекс = 1 По 13 Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 14) = Сумма + 48);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ТипШтрихкодаITF14ТО()

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата CODE39.
//
// Параметры:
//  Штрихкод - Строка	 - Проверяемый штрихкод.
// 
// Возвращаемое значение:
//   Булево - Результат проверки.
//
Функция ТипШтрихкодаCODE39ТО(Штрихкод) Экспорт

	Результат = Ложь;
	Длина     = СтрДлина(Штрихкод);
	Индекс    = Неопределено;

	Если Длина > 0 Тогда
		Результат = Истина;
		Для Индекс = 1 По Длина Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если (КодСимв <> 32)
			     И (КодСимв < 36 Или КодСимв > 37)
			     И (КодСимв <> 43)
			     И (КодСимв < 45 Или КодСимв > 57)
			     И (КодСимв < 65 Или КодСимв > 90) Тогда

				Результат = Ложь;
				Прервать;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ТипШтрихкодаCODE39ТО()

// Функция возвращает контрольный символ штрихкода EAN13.
//
// Параметры:
//  Штрихкод - Строка - штрихкод.
// 
// Возвращаемое значение:
//   Строка.
//
Функция КонтрольныйСимволEAN13ТО(Штрихкод) Экспорт

	Результат   = "";
	Сумма       = 0;
	Коэффициент = 1;

	Индекс = Неопределено;
	Для Индекс = 1 По 12 Цикл
		КодСимв     = КодСимвола(Штрихкод, Индекс);
		Сумма       = Сумма + Коэффициент * (КодСимв - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма     = (10 - Сумма % 10) % 10;
	Результат = Символ(Сумма + 48);

	Возврат Результат;

КонецФункции

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод - Строка	 - штрихкод (без контрольной цифры)
//  Тип		 - Строка	 - тип штрихкода: 13 - EAN13, 8 - EAN8
// 
// Возвращаемое значение:
//   Строка.
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			СимволКонтроля = Сред(ШтрихКод, 2 * Индекс, 1);
			СимволКонтроля = ?(ПустаяСтрока(СимволКонтроля),0,СимволКонтроля);
			Четн   = Четн   + СимволКонтроля;
		КонецЕсли;
		
		СимволКонтроля = Сред(ШтрихКод, 2 * Индекс - 1, 1);
		СимволКонтроля = ?(ПустаяСтрока(СимволКонтроля),0,СимволКонтроля);
		Нечетн = Нечетн + СимволКонтроля;
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()

// Проверка штрихкода на корректность. Истина если штрих код корректен, иначе Ложь.
//
// Параметры:
//  ШтрихКод	 - Строка	 - проверяемый штрихкод;
//  ТипШтрихкода - Строка	 - элемент плана видов характеристик "ТипыШтрихкодов", содержит тип
//  	проверяемого штрихкода.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПроверитьШтрихКод(ШтрихКод, ТипШтрихкода) Экспорт

	ДлинаКода = СтрДлина(Штрихкод);

	Если ДлинаКода = 0 Тогда
		Возврат Ложь;
	Иначе
		Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			Если (ДлинаКода <> 13)
			 Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			 Или КонтрольныйСимволEAN(Лев(Штрихкод,12), 13) <> Прав(Штрихкод, 1) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8 Тогда
			Если (ДлинаКода <> 8)
			 Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			 Или КонтрольныйСимволEAN(Лев(Штрихкод, 7), 8 ) <> Прав(Штрихкод, 1) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39 Тогда
			Условие = СтрДлина(ШтрихКод) - 1;
			Для Индекс = 0 По Условие Цикл
				Символ = Лев(Прав(Штрихкод, Условие - Индекс + 1), 1);
				Если НЕ (((Символ >= "0") И (Символ <= "9"))
					ИЛИ	((Символ >= "A") И (Символ <= "Z"))
					ИЛИ (Символ = "-")
					ИЛИ (Символ = ".")
					ИЛИ (Символ = " ")
					ИЛИ (Символ = "$")
					ИЛИ (Символ = "/")
					ИЛИ (Символ = "+")
					ИЛИ (Символ = "%")
					ИЛИ (Символ = "*")) Тогда
					Возврат Ложь;
				КонецЕсли
			КонецЦикла;
		ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code128 
				ИЛИ ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
			Условие = СтрДлина(ШтрихКод) - 1;
			Для Индекс = 0 По Условие Цикл
				Если КодСимвола(ШтрихКод, Индекс) > 127 Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьШтрихКод()

// Функция осуществляет формирование нового внутреннего штрихкода для
//  штучного товара
//
// Параметры:
//  ПрефиксШтучногоТовара		 - Строка	 - префикс весового
//  ПрефиксВнутреннегоШтрихкода	 - Строка	 - префикс невесового.
// 
// Возвращаемое значение:
//   Строка.
//
Функция СформироватьШтрихКод(Знач ПрефиксШтучногоТовара = Неопределено, Знач ПрефиксВнутреннегоШтрихкода = Неопределено) Экспорт

	ПрефиксШтучногоТовара = "0";
	ПрефиксВнутреннегоШтрихкода = "00";

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(РегШтрихКоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК РегШтрихКоды
	|ГДЕ
	|	РегШтрихКоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
	|	И РегШтрихКоды.Штрихкод ПОДОБНО ""2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + "_________""
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ТекКод = ?(Выборка.Код = NULL, 1, Мин(Число(Выборка.Код) + 1, 99999999));

	Штрихкод = "2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + Формат(ТекКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);
	
	// Проверяет принадлежность штрихкода другому владельцу
	ПроверитьПринадлежностьШтрихкодаДругомуВладельцу(Штрихкод, ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода);	
	
	Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()

// Формирует новый внутренний штрихкод EAN13 в случае принадлежности передаваемого штрихкода другому владельцу
//
// Параметры:
//  Штрихкод					 - Строка	 - штрихкод;
//  ПрефиксШтучногоТовара		 - Строка	 - префикс весового
//  ПрефиксВнутреннегоШтрихкода	 - Строка	 - префикс невесового.
//
Процедура ПроверитьПринадлежностьШтрихкодаДругомуВладельцу(Штрихкод, ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода)

	ВыборкаШтрихкодов = РегистрыСведений.Штрихкоды.Выбрать(Новый Структура("Штрихкод", Штрихкод));
	Если ВыборкаШтрихкодов.Следующий() Тогда 
		ТекКод = Мин(Число(Сред(Штрихкод, 5, 8)) + 1, 99999999);
		Штрихкод = "2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + Формат(ТекКод, "ЧЦ=8; ЧВН=; ЧГ=");
		Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);
		ПроверитьПринадлежностьШтрихкодаДругомуВладельцу(Штрихкод, ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода);		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПринадлежностьШтрихкодаДругомуВладельцу()

// Проверка наличия в передаваемот штрихкоде только цифр. Истина если штрих код только из цифр, иначе Ложь.
//
// Параметры:
//  Штрихкод					 - Строка	 - штрихкод;
//
// Возвращаемое значение:
//  Булево.
//
Функция ТолькоЦифры(Штрихкод)

	Для Сч = 1 По СтрДлина(Штрихкод) Цикл
		Символ = Сред(Штрихкод, Сч, 1);
		Если НЕ(Найти("0123456789", Символ)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

// Возвращает дату первой продажи сертификата
//
// Параметры:
//  Сертификат		- СправочникСсылка.Сертификаты	 -  Сертификат
//	ДокументСсылка	- ДокументСсылка.ОказаниеУслуг	 - Оказание услуг для проверки продажи сертификата в нем
// 
// Возвращаемое значение:
//  Дата - дата первой продажи
//
Функция ПолучитьДатуПервойПродажиСертификата(Сертификат, Документ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОстаткиПоСертификатам.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |ГДЕ
	               |	ОстаткиПоСертификатам.Сертификат = &Сертификат
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	
	Запрос.УстановитьПараметр("Сертификат", Сертификат);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Период;
	Иначе
		
		Если Документ <> Неопределено Тогда
			Для Каждого СтрокаСертификат Из Документ.Сертификаты Цикл
				Если СтрокаСертификат.Сертификат = Сертификат Тогда
					Если ЗначениеЗаполнено(СтрокаСертификат.ДатаНачалаДействия) Тогда
						Возврат СтрокаСертификат.ДатаНачалаДействия;		
					Иначе
						Возврат Документ.Дата;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение "Сертификат/абонемент не активен!";
		
	КонецЕсли;
	
КонецФункции

#Область РаботаСФискальнымиРегистраторами // ФУНКЦИИ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ.

// Функция формирует таблицу товаров для чека
//
// Параметры:
//  ДокументСсылка						 - ДокументСсылка.ОказаниеУслуг				 - ссылка на документ
//  КлючСтроки							 - Число									 - ключ строки табличной части чеков.
//  СтавкаНДСПоУмолчанию				 - ПеречислениеСсылка.СтавкиНДС				 - ставка.
//  СписаниеСДепозитаУказыватьВОплатах	 - Булево									 - отражать ли в строках товаров расход депозита.
//  СуммаВзносаНаДепозит				 - Число									 - сумма внесения депозита
//  ВидДепозитнойОперации				 - ПеречислениеСсылка.СпособыРасчетаЧекаККМ	 - вид операции с депозитом.
//  ПравилоПечатиАртикулаНМУВЧеке		 - ПеречислениеСсылка.ПравилаПечатиКодаУслугиВЧеке	 - отражение НМУ в чеке.
//  ЧекБезОплаты						 - Булево											 - есть ли реальная оплата в чеке.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция СформироватьТаблицуТоваровДокументаДляЧека(ДокументСсылка, КлючСтроки = Неопределено, СтавкаНДСПоУмолчанию = Неопределено, СписаниеСДепозитаУказыватьВОплатах = Истина, СуммаВзносаНаДепозит = 0, ВидДепозитнойОперации = Неопределено, ПравилоПечатиАртикулаНМУВЧеке = Неопределено, ЧекБезОплаты = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОказаниеУслугРаботы.Номенклатура.Представление КАК Наименование,
	|	ОказаниеУслугРаботы.Номенклатура КАК Номенклатура,
	|	ОказаниеУслугРаботы.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК Единица,
	|	ОказаниеУслугРаботы.Номенклатура.БазоваяЕдиницаИзмерения.МераКоличества КАК МераКоличества,
	|	ОказаниеУслугРаботы.Количество КАК Количество,
	|	ОказаниеУслугРаботы.Количество КАК КоличествоЧислитель,
	|	1 КАК КоличествоЗнаменатель,
	|	ОказаниеУслугРаботы.Цена КАК Цена,
	|	ОказаниеУслугРаботы.Сумма КАК Сумма,
	|	ОказаниеУслугРаботы.ПроцентСкидки КАК Скидка,
	|	ОказаниеУслугРаботы.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ОказаниеУслугРаботы.Сертификат КАК Сертификат,
	|	ОказаниеУслугРаботы.СуммаСкидки КАК СуммаСкидки,
	|	ОказаниеУслугРаботы.Номенклатура.КатегорияВыработки.НомерСекции КАК НомерСекции,
	|	"""" КАК Штрихкод,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНоменклатуры,
	|	"""" КАК ВидМаркировки,
	|	ИСТИНА КАК ЭтоУслуга,
	|	//%ДополнительныеРеквизитыПоПолисуРаботы
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга) КАК ПризнакПредметаРасчета,
	|	ЛОЖЬ КАК ЭтоСертификатНаОплату,
	|	""Работы"" КАК ИмяТЧ,
	|	ОказаниеУслугРаботы.КлючСтроки КАК КлючСтроки
	|ИЗ
	|	Документ.ОказаниеУслуг.Работы КАК ОказаниеУслугРаботы
	|ГДЕ
	|	ОказаниеУслугРаботы.Ссылка = &Ссылка
	|	//%УсловиеРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугМатериалы.Номенклатура.Представление,
	|	ОказаниеУслугМатериалы.Номенклатура,
	|	ОказаниеУслугМатериалы.ЕдиницаИзмерения.Представление,
	|	ОказаниеУслугМатериалы.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.МераКоличества,
	|	ОказаниеУслугМатериалы.Количество,
	|	ОказаниеУслугМатериалы.Количество,
	|	1,
	|	ОказаниеУслугМатериалы.Цена,
	|	ОказаниеУслугМатериалы.Сумма,
	|	ОказаниеУслугМатериалы.ПроцентСкидки,
	|	ОказаниеУслугМатериалы.Номенклатура.НаименованиеПолное,
	|	NULL,
	|	ОказаниеУслугМатериалы.СуммаСкидки,
	|	ОказаниеУслугМатериалы.Номенклатура.КатегорияВыработки.НомерСекции,
	|	"""",
	|	ОказаниеУслугМатериалы.СерияНоменклатуры,
	|	"""",
	|	0,
	|	//%ДополнительныеРеквизитыПоПолисуМатериалы
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар),
	|	ЛОЖЬ,
	|	""Материалы"" КАК ИмяТЧ,
	|	ОказаниеУслугМатериалы.КлючСтрокиРаботы
	|ИЗ
	|	Документ.ОказаниеУслуг.Материалы КАК ОказаниеУслугМатериалы
	|ГДЕ
	|	ОказаниеУслугМатериалы.Ссылка = &Ссылка
	|	И ОказаниеУслугМатериалы.Сумма > 0
	|	//%УсловиеМатериалы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугТовары.Номенклатура.Представление,
	|	ОказаниеУслугТовары.Номенклатура,
	|	ОказаниеУслугТовары.ЕдиницаИзмерения.Представление,
	|	ЕСТЬNULL(ОказаниеУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.МераКоличества,
	|				ЗНАЧЕНИЕ(Перечисление.МераКоличестваПредметаРасчетаККТ.Штука)),
	|	ОказаниеУслугТовары.Количество,
	|	ОказаниеУслугТовары.КоличествоЧислитель,
	|	ОказаниеУслугТовары.КоличествоЗнаменатель,
	|	ОказаниеУслугТовары.Цена,
	|	ОказаниеУслугТовары.Сумма,
	|	ОказаниеУслугТовары.ПроцентСкидки,
	|	ОказаниеУслугТовары.Номенклатура.НаименованиеПолное,
	|	NULL,
	|	ОказаниеУслугТовары.СуммаСкидки,
	|	ОказаниеУслугТовары.Номенклатура.КатегорияВыработки.НомерСекции,
	|	ОказаниеУслугТовары.Штрихкод,
	|	ОказаниеУслугТовары.СерияНоменклатуры,
	|	Выбор
	|	 Когда ОказаниеУслугТовары.Номенклатура.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)  Тогда
	|	 	""МаркированноеЛекарство""
	|	 Иначе
	|	 	""Прочее""
	|	 Конец,
	|	0,
	|	//%ДополнительныеРеквизитыПоПолисуТовары
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар),
	|	ЛОЖЬ,
	|	""Товары"",
	|	0
	|ИЗ
	|	Документ.ОказаниеУслуг.Товары КАК ОказаниеУслугТовары
	|ГДЕ
	|	ОказаниеУслугТовары.Ссылка = &Ссылка
	|	//%УсловиеТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугСертификаты.Сертификат.ВидСертификата.Представление,
	|	ОказаниеУслугСертификаты.Сертификат.ВидСертификата.Номенклатура,
	|	"""",
	|	"""",	
	|	1,
	|	1,
	|	1,
	|	ОказаниеУслугСертификаты.Сумма,
	|	ОказаниеУслугСертификаты.Сумма,
	|	0,
	|	"""",
	|	ОказаниеУслугСертификаты.Сертификат,
	|	0,
	|	ОказаниеУслугСертификаты.Сертификат.ВидСертификата.КатегорияВыработки.НомерСекции,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	"""",
	|	0,
	|	//%ДополнительныеРеквизитыПоПолисуСертификаты
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата),
	|	ВЫБОР
	|		КОГДА ОказаниеУслугСертификаты.Сертификат.ВидСертификата.ТипСертификата = ЗНАЧЕНИЕ(Перечисление.ТипыСертификатов.НаОплату)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	""Сертификаты"",
	|	0
	|ИЗ
	|	Документ.ОказаниеУслуг.Сертификаты КАК ОказаниеУслугСертификаты
	|ГДЕ
	|	ОказаниеУслугСертификаты.Ссылка = &Ссылка
	|	//%УсловиеСертификаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.Представление,
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.Номенклатура,
	|	"""",
	|	"""",
	|	1,
	|	1,
	|	1,
	|	СУММА(ОказаниеУслугПополнениеСертификатов.Сумма),
	|	СУММА(ОказаниеУслугПополнениеСертификатов.Сумма),
	|	0,
	|	"""",
	|	ОказаниеУслугПополнениеСертификатов.Сертификат,
	|	0,
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.КатегорияВыработки.НомерСекции,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	"""",
	|	0,
	|	//%ДополнительныеРеквизитыПоПолисуПополнениеСертификатов
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата),
	|	ВЫБОР
	|		КОГДА ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.ТипСертификата = ЗНАЧЕНИЕ(Перечисление.ТипыСертификатов.НаОплату)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	""ПополнениеСертификатов"",
	|	0
	|ИЗ
	|	Документ.ОказаниеУслуг.ПополнениеСертификатов КАК ОказаниеУслугПополнениеСертификатов
	|ГДЕ
	|	ОказаниеУслугПополнениеСертификатов.Ссылка = &Ссылка
	|	//%УсловиеПополнениеСертификатов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.Представление,
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.Номенклатура,
	|	ОказаниеУслугПополнениеСертификатов.Сертификат,
	|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.КатегорияВыработки.НомерСекции,
	|	//%ГруппировкаПоПолисуПополнениеСертификатов
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата),
	|	ВЫБОР
	|		КОГДА ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.ТипСертификата = ЗНАЧЕНИЕ(Перечисление.ТипыСертификатов.НаОплату)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ");
	
	Если КлючСтроки <> Неопределено Тогда
		Запрос.УстановитьПараметр("КлючСтроки", КлючСтроки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеРаботы", 					"И ОказаниеУслугРаботы.КлючСтрокиЧеки = &КлючСтроки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеТовары", 					"И ОказаниеУслугТовары.КлючСтрокиЧеки = &КлючСтроки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеМатериалы", 				"И ОказаниеУслугМатериалы.КлючСтрокиЧеки = &КлючСтроки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеСертификаты", 				"И ОказаниеУслугСертификаты.КлючСтрокиЧеки = &КлючСтроки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеПополнениеСертификатов",	"И ОказаниеУслугПополнениеСертификатов.КлючСтрокиЧеки = &КлючСтроки");
		
		ОбщийМодульМедицинскаяДеятельностьПовтИсп = ДопСерверныеФункции.ОбщийМодуль("МедицинскаяДеятельностьПовтИсп");
		Если ОбщийМодульМедицинскаяДеятельностьПовтИсп <> Неопределено
			И ОбщийМодульМедицинскаяДеятельностьПовтИсп.ИспользуютсяПолисы()
		Тогда
			Запрос.УстановитьПараметр("КлючСтроки", КлючСтроки);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеРеквизитыПоПолисуРаботы", 					"ОказаниеУслугРаботы.СуммаНеПоПолису,
			|	ОказаниеУслугРаботы.НеОплачиваетсяПолисом,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеРеквизитыПоПолисуТовары", 					"ОказаниеУслугТовары.СуммаНеПоПолису,
			|	ОказаниеУслугТовары.НеОплачиваетсяПолисом,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеРеквизитыПоПолисуМатериалы", 				"ОказаниеУслугМатериалы.СуммаНеПоПолису,
			|	ОказаниеУслугМатериалы.НеОплачиваетсяПолисом,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеРеквизитыПоПолисуСертификаты", 				"ОказаниеУслугСертификаты.СуммаНеПоПолису,
			|	ОказаниеУслугСертификаты.НеОплачиваетсяПолисом,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДополнительныеРеквизитыПоПолисуПополнениеСертификатов",	"СУММА(ОказаниеУслугПополнениеСертификатов.СуммаНеПоПолису),
			|	ОказаниеУслугПополнениеСертификатов.НеОплачиваетсяПолисом,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ГруппировкаПоПолисуПополнениеСертификатов",		"ОказаниеУслугПополнениеСертификатов.НеОплачиваетсяПолисом,");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ОбработатьВыводМатериаловВЧеке(ТаблицаТоваров, ДокументСсылка);

	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСЧислом");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("ЦенаСоСкидкой");	
	ТаблицаТоваров.Колонки.Добавить("ПризнакСпособаРасчета");
	
	// Удаление строк, полностью оплачиваемых полисом
	ОбщийМодульМедицинскаяДеятельностьПовтИсп = ДопСерверныеФункции.ОбщийМодуль("МедицинскаяДеятельностьПовтИсп");
	Если ОбщийМодульМедицинскаяДеятельностьПовтИсп <> Неопределено
		И ОбщийМодульМедицинскаяДеятельностьПовтИсп.ИспользуютсяПолисы()
		И ЗначениеЗаполнено(ДокументСсылка.Документ)
	Тогда
		КолонкаНеОплачиваетсяПолисом = ТаблицаТоваров.Колонки.Найти("НеОплачиваетсяПолисом");
		КолонкаСуммаНеПоПолису = ТаблицаТоваров.Колонки.Найти("СуммаНеПоПолису");
		Если КолонкаНеОплачиваетсяПолисом <> Неопределено И КолонкаСуммаНеПоПолису <> Неопределено Тогда  
			ПозицииПоПолису = ТаблицаТоваров.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом, СуммаНеПоПолису", Ложь, 0));
			Для Каждого ПозицияПолностьПоПолису Из ПозицииПоПолису Цикл
				ТаблицаТоваров.Удалить(ПозицияПолностьПоПолису);
			КонецЦикла;
		Иначе
			ТаблицаТоваров.Очистить();	
		КонецЕсли; 
	КонецЕсли; 
	
	СуммаОплат = ДокументСсылка.Оплата.Итог("Сумма");
	
	ОстатокДепозитаКлиентаДоПроведения = -1 * РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(ДокументСсылка.Клиент, ДокументСсылка.Дата);
	
	Если ДокументСсылка.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит Тогда
		СуммаОплат = СуммаОплат + ДокументСсылка.СуммаЗачетаАвансаПродажиВДолг;
	Иначе
		СуммаОплат = ?(ОстатокДепозитаКлиентаДоПроведения > 0, СуммаОплат + ОстатокДепозитаКлиентаДоПроведения, СуммаОплат);	
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		СтрокаТоваров.СтавкаНДС = УчетНДСВызовСервера.СтавкаНДС(СтрокаТоваров.Номенклатура, ТекущаяДатаСеанса());
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.НомерСекции) Тогда
			СтрокаТоваров.НомерСекции = 1;
		КонецЕсли;
		
		СтрокаТоваров.СуммаСкидки = СтрокаТоваров.Количество * СтрокаТоваров.Цена - СтрокаТоваров.Сумма;
		Если СтрокаТоваров.Количество * СтрокаТоваров.Цена = 0 Тогда
			СтрокаТоваров.Скидка = 0;
		Иначе
			СтрокаТоваров.Скидка = Окр(СтрокаТоваров.СуммаСкидки / (СтрокаТоваров.Количество * СтрокаТоваров.Цена) * 100,2,РежимОкругления.Окр15как10);
		КонецЕсли;
		// Заполним ставку НДС
		Если ЗначениеЗаполнено(СтрокаТоваров.СтавкаНДС) Тогда
			СтрокаТоваров.СтавкаНДСЧислом = РаботаСНДССервер.ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС);
		ИначеЕсли ЗначениеЗаполнено(СтавкаНДСПоУмолчанию) Тогда
			СтрокаТоваров.СтавкаНДСЧислом = РаботаСНДССервер.ПолучитьСтавкуНДС(СтавкаНДСПоУмолчанию);
		Иначе 
			СтрокаТоваров.СтавкаНДСЧислом = 0;
		КонецЕсли;
		// СуммаНДС
		РассчитатьСуммаНДСПозицииЧека(СтрокаТоваров);
		
		// Услуги, не полностью покрываемые полисом изменяют свою стоимость таким образом, чтобы соответствовать суммам реально полученных оплат.
		Если ОбщийМодульМедицинскаяДеятельностьПовтИсп <> Неопределено
			И ЗначениеЗаполнено(КлючСтроки)
			И ОбщийМодульМедицинскаяДеятельностьПовтИсп.ИспользуютсяПолисы() И ЗначениеЗаполнено(ДокументСсылка.Документ)
		Тогда
			Если Не СтрокаТоваров.НеОплачиваетсяПолисом Тогда
				СтрокаТоваров.Количество	= 1;
				СтрокаТоваров.Цена			= СтрокаТоваров.СуммаНеПоПолису;
				СтрокаТоваров.Сумма			= СтрокаТоваров.СуммаНеПоПолису;
				СтрокаТоваров.Скидка		= 0;	
			КонецЕсли;
		КонецЕсли;

		Если СтрокаТоваров.Количество <> 0 Тогда
			СтрокаТоваров.ЦенаСоСкидкой = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество, 2, РежимОкругления.Окр15как10);	// ФФД 1.0.5
		Иначе
			СтрокаТоваров.ЦенаСоСкидкой			= СтрокаТоваров.Сумма;
		КонецЕсли;
		
		// Установка признаков способа расчета
		СуммаОплат = СуммаОплат - СтрокаТоваров.Сумма;
		Если СтрокаТоваров.Сумма = 0 Тогда
			СтрокаТоваров.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		ИначеЕсли СтрокаТоваров.ЭтоСертификатНаОплату Тогда
			СтрокаТоваров.ПризнакСпособаРасчета	= Перечисления.ПризнакиСпособаРасчета.Аванс;	
		ИначеЕсли (СтрокаТоваров.ИмяТЧ = "Сертификаты" Или СтрокаТоваров.ИмяТЧ = "ПополнениеСертификатов")
				И ПолучитьДатуПервойПродажиСертификата(СтрокаТоваров.Сертификат, ДокументСсылка) > Константы.ДатаНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041.Получить() 
		Тогда 
			СтрокаТоваров.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		ИначеЕсли ЗначениеЗаполнено(ВидДепозитнойОперации) И ВидДепозитнойОперации = Перечисления.СпособыРасчетаЧекаККМ.Кредит Тогда
			Если СуммаОплат < 0 И -СуммаОплат < СтрокаТоваров.Сумма Тогда
				СтрокаТоваров.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
			ИначеЕсли СуммаОплат >= 0 Тогда
				СтрокаТоваров.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
			Иначе 
				СтрокаТоваров.ПризнакСпособаРасчета	= Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;	
			КонецЕсли;
		Иначе
			СтрокаТоваров.ПризнакСпособаРасчета	= Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;	
		КонецЕсли;	
		
		СтрокаТоваров.ПризнакПредметаРасчета = ?(ЗначениеЗаполнено(СтрокаТоваров.ПризнакПредметаРасчета), СтрокаТоваров.ПризнакПредметаРасчета, Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета); //ФФД 1.1
		
		Если СтрокаТоваров.ЭтоУслуга
			И ЗначениеЗаполнено(ПравилоПечатиАртикулаНМУВЧеке)
			И ТипЗнч(ПравилоПечатиАртикулаНМУВЧеке) <> Тип("Строка")
		Тогда
			Артикул = "";
			Если ПравилоПечатиАртикулаНМУВЧеке = ОбщегоНазначения.ЗначениеПеречисленияПоИмени("ТолькоАртикулНоменклатуры", "ПравилаПечатиКодаУслугиВЧеке") Тогда
				Попытка
					Артикул = СтрокаТоваров.Номенклатура.Артикул;
				Исключение
				КонецПопытки;
			ИначеЕсли ПравилоПечатиАртикулаНМУВЧеке = ОбщегоНазначения.ЗначениеПеречисленияПоИмени("ТолькоКодНМУ", "ПравилаПечатиКодаУслугиВЧеке") Тогда
				Попытка
					Артикул = СтрокаТоваров.Номенклатура.НоменклатураМедицинскихУслуг.Код;
				Исключение
				КонецПопытки;
			ИначеЕсли ПравилоПечатиАртикулаНМУВЧеке = ОбщегоНазначения.ЗначениеПеречисленияПоИмени("АртикулНоменклатурыЕслиНеУказанаНМУ", "ПравилаПечатиКодаУслугиВЧеке") Тогда
				Попытка
					Артикул = СтрокаТоваров.Номенклатура.НоменклатураМедицинскихУслуг.Код;
				Исключение
				КонецПопытки;
				Если Артикул = "" Тогда 
					Попытка
						Артикул = СтрокаТоваров.Номенклатура.Артикул;
					Исключение
					КонецПопытки;
				КонецЕсли;				
			КонецЕсли;
			Артикул = СокрЛП(Артикул);
			
			Если ЗначениеЗаполнено(Артикул) Тогда
				Если ЗначениеЗаполнено(СтрокаТоваров.Наименование) Тогда 
					СтрокаТоваров.Наименование = СтрокаТоваров.Наименование + " " + Артикул;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТоваров.НаименованиеПолное) Тогда 
					СтрокаТоваров.НаименованиеПолное = СтрокаТоваров.НаименованиеПолное + " " + Артикул;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	// В случае печати услуг в чеке одной строкой выполняется свёртка строк услуг по номеру секции и величине скидки.
	Если УчетнаяПолитика.ЧекККМПродажаПечататьУслугиОднойСтрокой Тогда
		// Копирование строк услуг в отдельную таблицу
    	МассивУслуги = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЭтоУслуга", Истина));
		Услуги = ТаблицаТоваров.Скопировать(МассивУслуги);
		// Исключение строк услуг из результирующей таблицы: ТаблицаТоваров.
		Для Каждого МассивУслуга Из МассивУслуги Цикл
		    ТаблицаТоваров.Удалить(МассивУслуга);
		КонецЦикла;
		
		// Свёртка строк услуг
		НаименованиеГруппУслуг = ?(ЗначениеЗаполнено(УчетнаяПолитика.ЧекККМПродажаОбщееНаименованиеУслуг),
								   УчетнаяПолитика.ЧекККМПродажаОбщееНаименованиеУслуг, "*");
		Услуги.ЗаполнитьЗначения(НаименованиеГруппУслуг, "Наименование, НаименованиеПолное");
		Услуги.Свернуть("Наименование,НаименованиеПолное, Скидка,НомерСекции, ЭтоУслуга, СтавкаНДСЧислом, ПризнакСпособаРасчета, ПризнакПредметаРасчета", "Количество, Цена, Сумма, СуммаСкидки, ЦенаСоСкидкой");
		
		Для Каждого Услуга Из Услуги Цикл
		    Услуга.Цена =  Услуга.Сумма;
			Услуга.Количество =  1;
			// Реализация учета скидок не планируется. Не реализовывать.
			Услуга.СуммаСкидки = 0;
			Услуга.ЦенаСоСкидкой = Услуга.Цена;
		КонецЦикла; 

		// Помещение в результирующую таблицу свёрнутых услуг
		СтаршийИндекс = Услуги.Количество() - 1;
		Для Сч = 0 По СтаршийИндекс Цикл
		    ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Вставить(Сч), Услуги[Сч]);
		КонецЦикла;		
	
	КонецЕсли;
	
	// Сумма пополнения баланса не наличными
	СуммаПополненияБаланса = Макс(0, ДокументСсылка.Оплата.Итог("Сумма") - ДокументСсылка.СуммаДокумента);
	
	// Если переплата наличными направляется в депозит, то прибавляем эту сумму к строке чека.
	Если ДокументСсылка.СдачуВДепозит Тогда
		СуммаПополненияБаланса = СуммаПополненияБаланса + ДокументСсылка.Сдача;
	КонецЕсли;	
	
	СуммаПополненияБаланса = ?(СуммаВзносаНаДепозит	= 0, СуммаПополненияБаланса, СуммаВзносаНаДепозит);
	
	Если СуммаПополненияБаланса <> 0 И СписаниеСДепозитаУказыватьВОплатах Тогда		
		ДобавитьСтрокуПополненияБалансаВТаблицуТоваровЧекаККМ(ДокументСсылка, ТаблицаТоваров, СуммаПополненияБаланса, СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	// Мера количества по умолчанию для строк, где не заполнена (для тега 1208 MeasureOfQuantity).
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		Если Не ЗначениеЗаполнено(СтрокаТоваров.МераКоличества)
			И СтрокаТоваров.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга
		Тогда
			СтрокаТоваров.МераКоличества = Перечисления.МераКоличестваПредметаРасчетаККТ.Штука;
		КонецЕсли;
	КонецЦикла;
	
	ЧекРеализацииАбонемента = ДокументСсылка.Чеки.Найти(Истина,"РеализацияСертификата");
	Если ЧекРеализацииАбонемента <> Неопределено 
		И ЧекРеализацииАбонемента.КлючСтроки = КлючСтроки		
	Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Движения = ДокументОбъект.Движения.ОстаткиПоСертификатам;
		Движения.Прочитать();
		Для Каждого СтрокаДвижение Из Движения Цикл
			Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
				Если СтрокаТоваров.Сертификат = СтрокаДвижение.Сертификат
					И СтрокаТоваров.Сумма = 0
					И СтрокаТоваров.Количество = СтрокаДвижение.Сумма
					И (Не СтрокаТоваров.Сертификат.ВидСертификата.КомплексныйСертификат 
					Или СтрокаТоваров.Номенклатура = СтрокаДвижение.Номенклатура)  
				Тогда
					СтрокаТоваров.Сумма = СтрокаДвижение.СуммаПокупки;
					СтрокаТоваров.Цена = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество, 2);
					СтрокаТоваров.ЦенаСоСкидкой = СтрокаТоваров.Цена;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
	Возврат ТаблицаТоваров;
	
КонецФункции

Процедура ОбработатьВыводМатериаловВЧеке(ТаблицаТоваров, Документ, ПриЗаполнитьРасчетыПоДолгу = Ложь) Экспорт
	
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Документ.Филиал, Истина);	
	Если НастройкаПечатиЧеков.СпособФискализацииМатериалов = Перечисления.СпособФискализацииРасходныхМатериалов.ВключатьВСуммуУслуги Тогда
		
		Материалы = ТаблицаТоваров.НайтиСтроки(Новый Структура("ИмяТЧ", "Материалы"));
		Для Каждого Материал Из Материалы Цикл
			
			НомерСтрокиРаботы = Материал.КлючСтроки;
			Работы = ТаблицаТоваров.НайтиСтроки(Новый Структура("ИмяТЧ, КлючСтроки", "Работы", НомерСтрокиРаботы));
			Если Работы.Количество() <> 0 Тогда
				Работа = Работы[0];
				Если ПриЗаполнитьРасчетыПоДолгу Тогда
					Работа.СуммаПриПокупке = Работа.СуммаПриПокупке + Материал.СуммаПриПокупке;
				Иначе
					Работа.Сумма = Работа.Сумма + Материал.Сумма;
					Работа.Цена = Работа.Цена + (Материал.Сумма / Работа.Количество);
				КонецЕсли;
				ТаблицаТоваров.Удалить(Материал);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли НастройкаПечатиЧеков.СпособФискализацииМатериалов = Перечисления.СпособФискализацииРасходныхМатериалов.ПечататьОтдельнойУслугой Тогда
		
		Материалы = ТаблицаТоваров.НайтиСтроки(Новый Структура("ИмяТЧ", "Материалы"));
		
		Если Материалы.Количество() <> 0 Тогда
			СтрокаУслугиДляМатериалов = ПолучитьИСоздатьСтрокуУслугДляМатериалов(ТаблицаТоваров,
																				 НастройкаПечатиЧеков.НоменклатураФискализацииМатериалов,
																				 ПриЗаполнитьРасчетыПоДолгу);
			
			Для Каждого Материал Из Материалы Цикл
				Если ПриЗаполнитьРасчетыПоДолгу Тогда
					СтрокаУслугиДляМатериалов.СуммаПриПокупке = СтрокаУслугиДляМатериалов.СуммаПриПокупке + Материал.СуммаПриПокупке;	
				Иначе
					СтрокаУслугиДляМатериалов.Сумма = СтрокаУслугиДляМатериалов.Сумма + Материал.Сумма;
					СтрокаУслугиДляМатериалов.Цена = СтрокаУслугиДляМатериалов.Цена + Материал.Сумма;
				КонецЕсли;
				ТаблицаТоваров.Удалить(Материал);
			КонецЦикла;
			
			Если СтрокаУслугиДляМатериалов.Сумма = 0 Тогда
				ТаблицаТоваров.Удалить(СтрокаУслугиДляМатериалов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИСоздатьСтрокуУслугДляМатериалов(ТаблицаТоваров, Услуга, ПриЗаполнитьРасчетыПоДолгу = Ложь)
	
	СтрокаДляУслуги = ТаблицаТоваров.Добавить();
	СтрокаДляУслуги.Номенклатура = Услуга;
	
	Если ПриЗаполнитьРасчетыПоДолгу Тогда
		// Предоплата или постоплата услуги/товара
		СтрокаДляУслуги.СуммаПриПокупке = 0;
		СтрокаДляУслуги.НаименованиеДляДокумента = НСтр("ru='Оплата за '") + Услуга.Наименование;
		СтрокаДляУслуги.СтавкаНДС = Услуга.удалитьСтавкаНДС;
	Иначе
		// Обычная строка продажи
		СтрокаДляУслуги.Наименование = Услуга.Наименование;
		СтрокаДляУслуги.Количество = 1;
		СтрокаДляУслуги.КоличествоЧислитель = 1;
		СтрокаДляУслуги.КоличествоЗнаменатель = 1;
		СтрокаДляУслуги.НаименованиеПолное = Услуга.НаименованиеПолное;
		СтрокаДляУслуги.ЭтоУслуга = Истина;
		СтрокаДляУслуги.ЭтоСертификатНаОплату = Ложь;
		СтрокаДляУслуги.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
		СтрокаДляУслуги.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СтрокаДляУслуги.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
		СтрокаДляУслуги.НомерСекции = Услуга.КатегорияВыработки.НомерСекции;
		СтрокаДляУслуги.Сумма = 0;
		СтрокаДляУслуги.Цена = 0;
		СтрокаДляУслуги.Скидка = 0;
		СтрокаДляУслуги.СуммаСкидки = 0;
	КонецЕсли;
	
	Возврат СтрокаДляУслуги;
	
КонецФункции

Процедура РассчитатьСуммаНДСПозицииЧека(СтрокаПозицииЧека) Экспорт
	
	Если ТипЗнч(СтрокаПозицииЧека.СтавкаНДСЧислом) = Тип("Число") Тогда
		СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаПозицииЧека.Сумма, Истина, СтрокаПозицииЧека.СтавкаНДСЧислом);
		
		СтрокаПозицииЧека.СуммаНДС = Окр(СуммаНДС, 2);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуПополненияБалансаВТаблицуТоваровЧекаККМ(ДокументСсылка, ТаблицаТоваров, СуммаПополнения, СтавкаНДСПоУмолчанию = 0)
	
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(РаботаСДокументамиСервер.ФилиалДокумента(ДокументСсылка), Истина);
	ПредставлениеПополненияБаланса = РаботаСДокументамиКлиентСервер.НазваниеПозицииЧекаВносАванса(НастройкаПечатиЧеков);
	
	Если СтавкаНДСПоУмолчанию = 0 Тогда
		СтавкаНДСЧислом = СтавкаНДСПоУмолчанию;
	Иначе
		СтавкаНДСЧислом = РаботаСНДССервер.ПолучитьСтавкуНДС(СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	СтрокаТоваров = ТаблицаТоваров.Добавить();
	СтрокаТоваров.Сумма = СуммаПополнения;
	СтрокаТоваров.НаименованиеПолное = ПредставлениеПополненияБаланса;
	СтрокаТоваров.Наименование = "";
	СтрокаТоваров.НомерСекции = 1;
	СтрокаТоваров.Количество  = 1;
	СтрокаТоваров.Цена		  = СтрокаТоваров.Сумма;
	СтрокаТоваров.Скидка	  = 0;
	СтрокаТоваров.СуммаСкидки = 0;
	СтрокаТоваров.СтавкаНДСЧислом  = СтавкаНДСЧислом;

	СтрокаТоваров.ЦенаСоСкидкой	= СтрокаТоваров.Цена; //ФФД 1.0.5
	
	СтрокаТоваров.ПризнакСпособаРасчета		= Перечисления.ПризнакиСпособаРасчета.Аванс;  //ФФД 1.0.5
	СтрокаТоваров.ПризнакПредметаРасчета	= Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата; //ФФД 1.1	
	
КонецПроцедуры

// Присваивает номер чека документа в форме
//
// Параметры:
//  ОбъектФорма	 - ДанныеФормыКоолекция	 - документ.
//  НомерЧека	 - Число				 - номер чека
//  ИмяРеквизита - Строка				 - имя реквизита номера чека в документе.
//
Процедура УстановитьНомерЧекаДокументаВФорме(ОбъектФорма, НомерЧека, ИмяРеквизита = "НомерЧекаККМ") Экспорт
	
	Если ТипЗнч(ОбъектФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ДокументОбъект = ОбъектФорма.РеквизитФормыВЗначение("Объект");
	Иначе
		ДокументОбъект = ДанныеФормыВЗначение(ОбъектФорма, ТипЗнч(ОбъектФорма.Ссылка.Скопировать()));
	КонецЕсли;
	
	ДокументОбъект[ИмяРеквизита] = НомерЧека;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	
	Если ТипЗнч(ОбъектФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбъектФорма.ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	КонецЕсли;
	                                                         
КонецПроцедуры

// Пробит ли чек по документу.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект	 - документ чека.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ДокументККМНеФискализирован(ДокументОбъект) Экспорт

	Если ТипЗНЧ(ДокументОбъект) = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
		Возврат ДокументОбъект.СостояниеЧековККМ = Перечисления.СостоянияЧековККМ.ЧекиНеПробиты
			ИЛИ (ДокументОбъект.СостояниеЧековККМ.Пустая() И ДокументОбъект.НомерЧекаККМ = 0);
	Иначе
		Возврат ДокументОбъект.НомерЧекаККМ = 0;
	КонецЕсли;
	
КонецФункции

Процедура ФЛК_СведенияОПокупателе_ФД12(Покупатель, ПокупательИНН, СведенияОПокупателе, ПерсональныеДанные) Экспорт
	
	ОчиститьВсе = Истина;
	
	Если ЗначениеЗаполнено(Покупатель) Тогда
		
		Если ЗначениеЗаполнено(ПокупательИНН)
			И ЗначениеЗаполнено(СведенияОПокупателе.ПокупательАдрес)
		Тогда
			// ИП или Юр.лицо. Все ок.
			ОчиститьВсе = Ложь;
			
		ИначеЕсли ПерсональныеДанные <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ПерсональныеДанные.ДатаРождения) Тогда
				ОчиститьВсе = Ложь;
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
	Если ОчиститьВсе Тогда
		Покупатель = "";
		ПокупательИНН = "";
		СведенияОПокупателе.ПокупательАдрес = "";
		ПерсональныеДанные = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Количество фискализированных чеков коррекции для документа.
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка - документ, из которого печатаются чеки.
// 
// Возвращаемое значение:
//  Число - количество чеков
//
Функция КоличествоФискализированныхЧековКоррекции(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияПечатиОнлайнЧеков.УИД КАК УИД
		|ИЗ
		|	РегистрСведений.ИсторияПечатиОнлайнЧеков КАК ИсторияПечатиОнлайнЧеков
		|ГДЕ
		|	ИсторияПечатиОнлайнЧеков.Документ = &Документ
		|	И ИсторияПечатиОнлайнЧеков.Документ <> ЗНАЧЕНИЕ(Документ.ОказаниеУслуг.ПустаяСсылка)
		|	И ИсторияПечатиОнлайнЧеков.Результат = ИСТИНА
		|	И ИсторияПечатиОнлайнЧеков.СторноОперация = ИСТИНА";
	
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выбрать().Количество(); 
			
КонецФункции

Функция ПолучитьУдаляемыеЧекиБезПродаж(ДокументОбъект, ТаблицаПродаж) Экспорт
	
	СоответсвиеКлючЧекаИНаличиеТоварныхПозиций = Новый Соответствие;
	
	Для Каждого СтрокаПродаж Из ТаблицаПродаж Цикл 
		стрТЧ = ДокументОбъект[СтрокаПродаж.ИмяТЧ][СтрокаПродаж.НомерСтроки - 1];
		СоответсвиеКлючЧекаИНаличиеТоварныхПозиций.Вставить(стрТЧ.КлючСтрокиЧеки, Истина);
	КонецЦикла;
	
	СтрокиЧековНаУдаление = Новый Массив;
	Для Каждого СтрокаЧеки Из ДокументОбъект.Чеки Цикл
		Если СоответсвиеКлючЧекаИНаличиеТоварныхПозиций.Получить(СтрокаЧеки.КлючСтроки) = Неопределено И СтрокаЧеки.СуммаВзнос = 0 Тогда
			СтрокиЧековНаУдаление.Добавить(СтрокаЧеки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокиЧековНаУдаление;
	
КонецФункции

Функция ПечататьЧек(СтрокаТЧЧеки) Экспорт
	
	// Старая проверка для не печати 0 чеков
	// Проверка нулевых чеков по одной из СНО, их печатать не требуется.	
	// Для чека-реализации сертификата/абонемента перезаполним суммы
	//Если Не СтрокаТЧЧеки.РеализацияСертификата Тогда
	//	Если СтрокаТЧЧеки.Сумма + СтрокаТЧЧеки.СуммаДепозит + СтрокаТЧЧеки.СуммаНал
	//		+ СтрокаТЧЧеки.СуммаБезнал +  СтрокаТЧЧеки.СуммаСертификат + СтрокаТЧЧеки.СуммаВзнос = 0
	//	Тогда
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаСЭквайринговымиТерминалами // ФУНКЦИИ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ.
// Возвращает эквайринговый терминал, доступный в текущем сеансе
//
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - привязка подключаемого оборудования.
//  Филиал		 - СправочникСсылка.Филиалы	 - отбор по филиалу.
//  Касса		 - СправочникСсылка.Кассы	 - отбор по кассе.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭквайринговыеТерминалы.
//
Функция ПолучитьЭквайринговыйТерминал(РабочееМесто = Неопределено, Филиал = Неопределено, Касса = Неопределено) Экспорт
	
	Если РабочееМесто = Неопределено Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		Организация = Филиал.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Терминал = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ спрПодключаемоеОборудование
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
		|	И ПодключаемоеОборудование.УстройствоИспользуется
		|	И ПодключаемоеОборудование.ТипОборудования = &ТипОборудования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка,
		|	&Касса КАК Касса
		|ПОМЕСТИТЬ Терминалы
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И ЭквайринговыеТерминалы.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыСпособовОплат.СертификатНСПК)
		|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ИЛИ ЭквайринговыеТерминалы.Договор = ЗНАЧЕНИЕ(Справочник.СоглашенияСтрахования.ПустаяСсылка)
		|			ИЛИ ЭквайринговыеТерминалы.Договор.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ИЛИ ЭквайринговыеТерминалы.Договор.Организация = &Организация)
		|	И (НЕ ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.Филиалы
		|			ИЛИ ЭквайринговыеТерминалы.Касса = &Филиал)
		|	И (НЕ ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.Кассы
		|			ИЛИ ЭквайринговыеТерминалы.Касса = &Касса)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Терминал,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаТерминалов
		|ИЗ
		|	Терминалы КАК ЭквайринговыеТерминалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.Оборудование КАК ЭТ_ПодключаемоеОборудование
		|		ПО ЭквайринговыеТерминалы.Ссылка = ЭТ_ПодключаемоеОборудование.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ спрПодключаемоеОборудование КАК спрПодключаемоеОборудование
		|		ПО (ЭТ_ПодключаемоеОборудование.ПодключаемоеОборудование = спрПодключаемоеОборудование.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка,
		|	2
		|ИЗ
		|	Терминалы КАК ЭквайринговыеТерминалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.Оборудование КАК ЭТ_ПодключаемоеОборудование
		|		ПО ЭквайринговыеТерминалы.Ссылка = ЭТ_ПодключаемоеОборудование.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ спрПодключаемоеОборудование КАК спрПодключаемоеОборудование
		|		ПО (ЭТ_ПодключаемоеОборудование.ПодключаемоеОборудование = спрПодключаемоеОборудование.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка,
		|	ВЫБОР
		|		КОГДА ЭквайринговыеТерминалы.Касса <> НЕОПРЕДЕЛЕНО
		|				И ЭквайринговыеТерминалы.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|				И &Касса <> НЕОПРЕДЕЛЕНО
		|				И &Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|				И ЭквайринговыеТерминалы.Касса = &Касса
		|			ТОГДА 3
		|		КОГДА ЭквайринговыеТерминалы.Касса <> НЕОПРЕДЕЛЕНО
		|				И &Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ
		|ИЗ
		|	Терминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	(&Касса = НЕОПРЕДЕЛЕНО
		|			ИЛИ &Касса = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|			ИЛИ &Касса = ЭквайринговыеТерминалы.Касса)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТерминалов.Терминал КАК Терминал,
		|	МИНИМУМ(ТаблицаТерминалов.Приоритет) КАК Приоритет
		|ИЗ
		|	ТаблицаТерминалов КАК ТаблицаТерминалов
		|ГДЕ
		|	НЕ ТаблицаТерминалов.Терминал.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТерминалов.Терминал
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет"; 
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	Запрос.УстановитьПараметр("Касса", Касса);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("Организация", Организация);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Терминал = Выборка.Терминал;
	КонецЕсли;
	
	Возврат Терминал;
	
КонецФункции

#КонецОбласти

#Область МераКоличество // Работа с перечислением МераКоличе (формирование чека).

// Подбираем Меру по наименованию единицы измерения.
//
// Параметры:
//  НаименованиеПолноеЕдиницы	 - Строка	 - искомое наименование.
//  ЗаполнятьПоУмолчанию		 - Булево	 - когда Истина и мера не найтена, будет возвращено ИныеЕдиницыИзмерения. В ином случае пустая ссылка.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.МераКоличестваПредметаРасчетаККТ.
//
Функция МераКоличестваПоНаименованиюЕдиницы(НаименованиеПолноеЕдиницы, ЗаполнятьПоУмолчанию = Истина) Экспорт
	
	// Значение по умолчанию.
	Если ЗаполнятьПоУмолчанию Тогда
		Результат = Перечисления.МераКоличестваПредметаРасчетаККТ.Штука; // Более актуально, чем ИныеЕдиницыИзмерения.
	Иначе
		Результат = Перечисления.МераКоличестваПредметаРасчетаККТ.ПустаяСсылка();
	КонецЕсли;

	МерыКоличества = МерыКоличестваНаименованияСсылок();
	
	Для Каждого Мера Из МерыКоличества Цикл 
		// Будем сравнивать полное название базовой единицы измерения и название меры, если совпадут - заполняем реквизит.
		Если НРег(СокрЛП(НаименованиеПолноеЕдиницы)) = Нрег(Мера.Имя) Тогда
			
			Результат = Мера.Ссылка;
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Таблица соответствия наименования Меры и ссылки в перечислении.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками Ссылка - ПеречислениеСсылка.МераКоличестваПредметаРасчетаККТ и Имя - Строка. 
//
Функция МерыКоличестваНаименованияСсылок() Экспорт
	
	// Получим таблицу имен всех мер количества предмета расчета ККТ.	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МераКоличестваПредметаРасчетаККТ.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК Имя
		|ИЗ
		|	Перечисление.МераКоличестваПредметаРасчетаККТ КАК МераКоличестваПредметаРасчетаККТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	МерыКоличества = РезультатЗапроса.Выгрузить();
	Для Каждого Мера Из МерыКоличества Цикл
		ИндексЗначенияПеречисления = Перечисления["МераКоличестваПредметаРасчетаККТ"].Индекс(Мера.Ссылка);
		Мера.Имя = Метаданные.Перечисления["МераКоличестваПредметаРасчетаККТ"].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
	КонецЦикла;
	
	Возврат МерыКоличества;
	
КонецФункции

// Противоположна по смыслу функции 1С:БПО ОборудованиеЧекопечатающиеУстройстваКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения().
// Получить код ОКЕИ по мере количества предмета расчета.
// 
// Параметры:
//  МераКоличества - ПеречислениеСсылка.МераКоличестваПредметаРасчетаККТ - мера количества из перечисления.
// 
// Возвращаемое значение:
//  Строка, Неопределено - код ОКЕИ.
Функция КодЕдиницыИзмеренияПоМереКоличестваПредметаРасчета(МераКоличества) Экспорт
	
	// Начало скопировано из ОборудованиеЧекопечатающиеУстройстваКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(). 
	МерыКоличества = Новый Соответствие();
	
	МерыКоличества.Вставить("796", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука"));
	
	МерыКоличества.Вставить("163", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Грамм"));
	МерыКоличества.Вставить("166", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килограмм"));
	МерыКоличества.Вставить("168", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Тонна"));
	
	МерыКоличества.Вставить("004", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Сантиметр"));
	МерыКоличества.Вставить("005", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Дециметр"));
	МерыКоличества.Вставить("006", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Метр"));
	
	МерыКоличества.Вставить("051", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйСантиметр"));
	МерыКоличества.Вставить("053", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйДециметр"));
	МерыКоличества.Вставить("055", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйМетр"));
	
	МерыКоличества.Вставить("111", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Миллилитр"));
	МерыКоличества.Вставить("112", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр"));
	МерыКоличества.Вставить("113", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КубическийМетр"));
	
	МерыКоличества.Вставить("245", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КиловаттЧас"));
	МерыКоличества.Вставить("233", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигакалория"));
	
	МерыКоличества.Вставить("359", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.СуткиДень"));
	МерыКоличества.Вставить("356", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Час"));
	МерыКоличества.Вставить("355", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Минута"));
	МерыКоличества.Вставить("354", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Секунда"));
	
	МерыКоличества.Вставить("256", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килобайт"));
	МерыКоличества.Вставить("257", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Мегабайт"));
	МерыКоличества.Вставить("2553", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигабайт"));
	МерыКоличества.Вставить("2554", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Терабайт"));
	
	// Далее инвертируем соответсвие мер.
	КодыМер = Новый Соответствие;
	Для Каждого КлючЗначение Из МерыКоличества Цикл
		КодыМер.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
	КонецЦикла;
	
	// Вычисляем код ОКЕИ
	Возврат КодыМер.Получить(МераКоличества);
	
КонецФункции

#КонецОбласти

#КонецОбласти