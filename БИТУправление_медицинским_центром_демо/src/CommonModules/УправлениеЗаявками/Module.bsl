#Область СлужебныйПрограммныйИнтерфейс

// Сформировние пакета данных по графику сотрудников
//
// Параметры:
//  ДатаНачала							 - ДатаВремя				 - Время, с которой запрашиваются таблицы
//  ДатаОкончания						 - ДатаВремя				 - Время, по которое запрашиваются таблицы
//  Филиал								 - СправочникСсылка.Филиалы	 - Клиника, для которой запрашивается расписание
//	Сотрудники							 - Сотрудники				 - Сотрудники
//	ИсключаемыеЗаявки					 - ТаблицаЗначений			 - Исключаемые заявки
//  ТребуетсяПроверкаЭталонуДлительности - Булево					 - Отсеивать ли промежутки, меньше длительности приёма
//  ВидыВыгружаемогоВремени				 - Массив					 - Массив, содержащий СправочникСсылка.ВидыВремениГрафика
//  Укрупненный							 - Булево					 - Выдать укрупнённый график для веб интеграции без учёта заявок 
//	ВернутьНулевуюДату					 - Булево					 - Вернуть нулевую дату
//	РазличатьВидыВремени				 - Булево					 - Различать виды времени
// 
// Возвращаемое значение:
//  Структура - "ТаблицаГрафиков, ТаблицаЗаявок, ТаблицаСотрудников"
//
Функция СформироватьТаблицыДляОбщегоГрафика(ДатаНачала, ДатаОкончания, Филиал = Неопределено, Сотрудники = Неопределено, 
											ИсключаемыеЗаявки = Неопределено, ТребуетсяПроверкаЭталонуДлительности = Истина, ВидыВыгружаемогоВремени = Неопределено, 
											Укрупненный = Ложь, ВернутьНулевуюДату = Ложь, РазличатьВидыВремени = Ложь) Экспорт
	
	Перем ТаблицаГрафиков, ТаблицаЗаявок;
	
	Если Укрупненный Тогда
		ТаблицаЗаявок	 = Новый ТаблицаЗначений;
		ТаблицаНерабочее = Новый ТаблицаЗначений;
	Иначе
		ТаблицаЗаявок = ПолучитьЗаявкиСотрудниковЗаПериод(ДатаНачала, ДатаОкончания, Филиал, ИсключаемыеЗаявки, ВернутьНулевуюДату, Сотрудники);
	КонецЕсли;
	
	ТаблицаГрафиков = ГрафикиСотрудников.ПолучитьРабочееВремяЗаПериод(ДатаНачала, ДатаОкончания, ВернутьНулевуюДату, РазличатьВидыВремени, Филиал, Сотрудники, ВидыВыгружаемогоВремени);
	
	Если Не Укрупненный Тогда	
		ГрафикиСотрудников.ВычестьПериодыИзТаблицыГрафика(ТаблицаГрафиков, ТаблицаЗаявок, ТребуетсяПроверкаЭталонуДлительности);
	КонецЕсли;
	
	ТаблицаГрафиков.Сортировать("Сотрудник, Дата, ВремяНачала");
	
	Если Не Укрупненный Тогда
		ТаблицаЗаявок.Сортировать("Сотрудник, Дата, ВремяНачала");
		
		// Склеим временные интервалы заявок
		Если ТаблицаЗаявок.Количество() >=2 Тогда 
			Сч = 1;
			фИндексВПределахМассива = Истина;
			Пока фИндексВПределахМассива Цикл
				ТекущийЭлементМассива		= ТаблицаЗаявок[Сч];
				ПредыдущийЭлементМассива	= ТаблицаЗаявок[Сч-1]; 			
				Если ТекущийЭлементМассива.Сотрудник		= ПредыдущийЭлементМассива.Сотрудник
					И ТекущийЭлементМассива.ВремяНачала		= ПредыдущийЭлементМассива.Времяокончания
					И ТекущийЭлементМассива.Дата			= ПредыдущийЭлементМассива.Дата
				Тогда
					ПредыдущийЭлементМассива.ВремяОкончания = ТекущийЭлементМассива.ВремяОкончания;
					ТаблицаЗаявок.Удалить(Сч);
				Иначе
					Сч = Сч+1;
				КонецЕсли;
				
				фИндексВПределахМассива = ? (Сч <= (ТаблицаЗаявок.Количество()- 1), Истина, Ложь );
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовим таблицу с данными по каждому сотруднику из графика
	ТаблицаСотрудников = ТаблицаГрафиков.Скопировать();
	ТаблицаСотрудников.Свернуть	("Сотрудник, Филиал");
	ТаблицаСотрудников.Колонки.Добавить("СотрудникID");
	ТаблицаСотрудников.Колонки.Добавить("СотрудникФИО");
	ТаблицаСотрудников.Колонки.Добавить("Специализация");
	ТаблицаСотрудников.Колонки.Добавить("ФилиалУИД");
	ТаблицаСотрудников.Колонки.Добавить("СрДлительностьПриема");
	Для Каждого стр Из ТаблицаСотрудников Цикл
		стр.СотрудникID	 = Строка(стр.Сотрудник.УникальныйИдентификатор());
		стр.СотрудникФИО = стр.Сотрудник.Наименование;
		стр.ФилиалУИД	 = стр.Филиал.УникальныйИдентификатор();
		
		Если стр.Сотрудник.Метаданные().Реквизиты.Найти("Специализация") <> Неопределено Тогда
			стр.Специализация	= стр.Сотрудник.Специализация.Наименование;
		Иначе
			стр.Специализация	= "";
		КонецЕсли;
		
		Если ТипЗнч(стр.Сотрудник) = Тип("СправочникСсылка.Сотрудники")
			И стр.Сотрудник.ДлительностьПриема <> '00010101000000' 
		Тогда
			стр.СрДлительностьПриема = стр.Сотрудник.ДлительностьПриема;
		ИначеЕсли стр.Сотрудник.Метаданные().Реквизиты.Найти("Специализация") <> Неопределено И стр.Сотрудник.Специализация.ДлительностьПриема <> '00010101000000' Тогда
			стр.СрДлительностьПриема = стр.Сотрудник.Специализация.ДлительностьПриема;	
		Иначе
			БазоваяПериодичность = УправлениеНастройками.ПолучитьУчетнуюПолитику(ТекущаяДата()).ПериодичностьПланирования;
			стр.СрДлительностьПриема = БазоваяПериодичность;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура ("ТаблицаГрафиков, ТаблицаСотрудников, ТаблицаЗаявок", ТаблицаГрафиков, ТаблицаСотрудников, ТаблицаЗаявок);
	
КонецФункции

Функция ПолучитьЗаявкиСотрудниковЗаПериод(ДатаНачала, ДатаОкончания, Филиал, ИсключаемыеЗаявки = Неопределено, ВернутьНулевуюДату = Ложь, Сотрудники = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ВремяНачала КАК ВремяНачала,
	               |	ВложенныйЗапрос.ВремяОкончания КАК ВремяОкончания,
	               |	ВложенныйЗапрос.Дата КАК Дата,
	               |	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	               |	ВложенныйЗапрос.Клиника
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |					И (НЕ ЗаявкаРаботы.Номенклатура.ПланируетсяБезСотрудника
	               |						ИЛИ ЗаявкаРаботы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |				ТОГДА ЗаявкаРаботы.Ссылка.Сотрудник
	               |			ИНАЧЕ ЗаявкаРаботы.Сотрудник
	               |		КОНЕЦ КАК Сотрудник,
	               |		%ВремяНачалаОкончания%
	               |		НАЧАЛОПЕРИОДА(ЗаявкаРаботы.ДатаНачала, ДЕНЬ) КАК Дата,
				   |		ЗаявкаРаботы.Ссылка.Филиал.Наименование КАК Клиника
	               |	ИЗ
	               |		Документ.Заявка.Работы КАК ЗаявкаРаботы
	               |	ГДЕ
	               |		ЗаявкаРаботы.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |		И НЕ ЗаявкаРаботы.Ссылка.ПометкаУдаления
	               |		И НЕ ЗаявкаРаботы.Ссылка В (&ИсключаемыеЗаявки)
	               |		И (ЗаявкаРаботы.Ссылка.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
	               |				ИЛИ ЗаявкаРаботы.Ссылка.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена))
	               |		%УсловиеФилиал% %УсловиеСотрудники% И ЗаявкаРаботы.Ссылка.ДатаОкончания > ЗаявкаРаботы.Ссылка.ДатаНачала) КАК ВложенныйЗапрос
	               |";
	
	// К заявкам добавлены нерабочие периоды графика для исключения из свободного рабочего времени	.
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ИсключаемыеЗаявки", ИсключаемыеЗаявки);
	
	Если Филиал <> Неопределено И Не Филиал.Пустая() Тогда                                                                                             	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеФилиал%", "И ЗаявкаРаботы.Ссылка.Филиал  = &Филиал");
		Запрос.УстановитьПараметр("Филиал", Филиал);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеФилиал%", "");
	КонецЕсли;	

	Если Сотрудники <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеСотрудники%", "И ЗаявкаРаботы.Ссылка.Сотрудник В (&Сотрудники)");
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеСотрудники%", "");
	КонецЕсли;
	
	Если Не ВернутьНулевуюДату Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВремяНачалаОкончания%",
		"	ДатаНачала КАК ВремяНачала,
	  	|	ДатаОкончания КАК ВремяОкончания,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВремяНачалаОкончания%",
		"ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДатаНачала, ДЕНЬ), ДатаНачала, СЕКУНДА)) КАК ВремяНачала,
		|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДатаОкончания, ДЕНЬ), ДатаОкончания, СЕКУНДА)) КАК ВремяОкончания,");
	КонецЕсли;

	ТаблицаЗаявок = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаЗаявок;
	
КонецФункции

// Пересчет статуса наличия заявок хочу раньше
//
Процедура ОбновитьСтатусЗаявокХочуРаньше() Экспорт
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьХочуРаньшеВЗаявках") Тогда
		Данные = ПолучитьДанныеПоЗаявкамДляПереносаВПрошлое();
		Заявки = Данные[8].Выгрузить();
		Заявки.Итог("КоличествоВариантовЭтотЖеФилиал");
		Если Заявки.Количество() = 0 ИЛИ Заявки[0].КоличествоВариантовЭтотЖеФилиал = 0 Тогда
			Константы.ЕстьЗаявкиХочуРаньше.Установить(Ложь);
		Иначе
			Константы.ЕстьЗаявкиХочуРаньше.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНерабочиеСостоянияЗаявок()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСостоянийЗаявок.Ссылка
		|ИЗ
		|	Справочник.ВидыСостоянийЗаявок КАК ВидыСостоянийЗаявок
		|ГДЕ
		|	ВидыСостоянийЗаявок.ТипСостояния = &ТипСостояния";
	Запрос.УстановитьПараметр("ТипСостояния", Перечисления.ТипыСостоянийЗаявок.Отменена);
	РезультатЗапроса	= Запрос.Выполнить();
	ТЗСостояния			= РезультатЗапроса.Выгрузить();
	РабочиеСостояния	= ТЗСостояния.ВыгрузитьКолонку("Ссылка");
	
	Возврат РабочиеСостояния;
КонецФункции

// Проверяет, что состояние заявки рабочее (не отмена)
//
// Параметры:
//  ПроверяемоеСостояние - Строка - проверяемое состояние
// 
// Возвращаемое значение:
//  Булево - является ли состояние рабочим 
//
Функция СостояниеЗаявкиРабочее(ПроверяемоеСостояние) Экспорт
	
	Возврат ПолучитьНерабочиеСостоянияЗаявок().Найти(ПроверяемоеСостояние) = Неопределено;
	
КонецФункции

// Данные по заявкам для переноса в прошлое
// 
// Возвращаемое значение:
//  Массив.
//
Функция ПолучитьДанныеПоЗаявкамДляПереносаВПрошлое() Экспорт
	
	ДатаНачала = ТекущаяДата();
	ДатаОкончания = ПолучитьДатуОкончанияПоЗаявкамХочуРаньше(ДатаНачала);
	
	// Получение таблицы будущего свободного времени 
	ТаблицаЗаявок = ПолучитьЗаявкиСотрудниковЗаПериод(ДатаНачала, ДатаОкончания, Неопределено, , Ложь);
	ТаблицаГрафиков = ГрафикиСотрудников.ПолучитьРабочееВремяЗаПериод(ДатаНачала, ДатаОкончания, Ложь, Ложь,,Тип("СправочникСсылка.Сотрудники"));
	ТаблицаГрафиков.Индексы.Добавить("Дата");
	
	ДатаВычитанияПериода = НачалоДня(ДатаНачала);
	Пока ДатаВычитанияПериода < ДатаОкончания Цикл
		
		ГрафикиСотрудников.ВычестьПериодыИзТаблицыГрафика(ТаблицаГрафиков, ТаблицаЗаявок, Истина, ДатаВычитанияПериода);
		
		ДатаВычитанияПериода = ДатаВычитанияПериода + 86400;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвободныеЯчейки.ВремяНачала КАК ВремяНачала,
	|	СвободныеЯчейки.ВремяОкончания КАК ВремяОкончания,
	|	СвободныеЯчейки.Дата КАК Дата,
	|	СвободныеЯчейки.Сотрудник КАК Сотрудник,
	|	СвободныеЯчейки.Филиал КАК Филиал
	|ПОМЕСТИТЬ СвободныеЯчейки
	|ИЗ
	|	&СвободныеЯчейки КАК СвободныеЯчейки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ссылка,
	|	Заявка.Сотрудник КАК Сотрудник,
	|	Заявка.ВремяНачала КАК ВремяНачала,
	|	Заявка.ВремяОкончания КАК ВремяОкончания,
	|	Заявка.ДатаНачала КАК ДатаНачала,
	|	Заявка.Филиал КАК Филиал,
	|	РАЗНОСТЬДАТ(Заявка.ВремяНачала, Заявка.ВремяОкончания, СЕКУНДА) КАК ДлительностьСекунды,
	|	Заявка.ПримечаниеХочуРаньше КАК ПримечаниеХочуРаньше,
	|	Заявка.Клиент КАК Клиент
	|ПОМЕСТИТЬ ЗаявкиХочуРаньше
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.ХочуРаньше
	|	И Заявка.ДатаНачала >= &ТекущаяДата
	|	И НЕ Заявка.ПометкаУдаления
	|	И НЕ Заявка.Состояние В (&Состояния)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаявкаОтборыХочуРаньше.Фильтр) = ТИП(Справочник.Сотрудники)
	|			ТОГДА ЗаявкаОтборыХочуРаньше.Фильтр
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	КОНЕЦ КАК ОтборСотрудник,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаявкаОтборыХочуРаньше.Фильтр) = ТИП(Справочник.КатегорииВыработки)
	|			ТОГДА ЗаявкаОтборыХочуРаньше.Фильтр
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КатегорииВыработки.ПустаяСсылка)
	|	КОНЕЦ КАК ОтборСпециализация,
	|	ЗаявкаОтборыХочуРаньше.Ссылка КАК Заявка
	|ПОМЕСТИТЬ ОтборыЗаявок
	|ИЗ
	|	Документ.Заявка.ОтборыХочуРаньше КАК ЗаявкаОтборыХочуРаньше
	|ГДЕ
	|	ЗаявкаОтборыХочуРаньше.Ссылка В (ВЫБРАТЬ ЗаявкиХочуРаньше.Ссылка ИЗ ЗаявкиХочуРаньше КАК ЗаявкиХочуРаньше)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборыЗаявок.Заявка КАК Заявка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтборыЗаявок.ОтборСпециализация) КАК КоличествоСпециализаций
	|ПОМЕСТИТЬ ЗаявкаКоличествоСпец
	|ИЗ
	|	ОтборыЗаявок КАК ОтборыЗаявок
	|ГДЕ
	|	ОтборыЗаявок.ОтборСпециализация <> ЗНАЧЕНИЕ(Справочник.КатегорииВыработки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборыЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СотрудникиСпециализации.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ОтборыЗаявок.ОтборСотрудник КАК ОтборСотрудник,
	|	ОтборыЗаявок.Заявка КАК Заявка,
	|	СУММА(ВЫБОР
	|			КОГДА ОтборыЗаявок.ОтборСпециализация = ЗНАЧЕНИЕ(Справочник.КатегорииВыработки.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СотрудникиСпециализации.Ссылка ЕСТЬ NULL
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК СовпаденияСотрудника,
	|	ЕСТЬNULL(ЗаявкаКоличествоСпец.КоличествоСпециализаций, 0) КАК ЭталонноеКоличество
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ОтборыЗаявок КАК ОтборыЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники.Специализации КАК СотрудникиСпециализации
	|		ПО ОтборыЗаявок.ОтборСпециализация = СотрудникиСпециализации.Специализация
	|			И (ОтборыЗаявок.ОтборСпециализация <> ЗНАЧЕНИЕ(Справочник.КатегорииВыработки.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкаКоличествоСпец КАК ЗаявкаКоличествоСпец
	|		ПО ОтборыЗаявок.Заявка = ЗаявкаКоличествоСпец.Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборыЗаявок.Заявка,
	|	ЕСТЬNULL(ЗаявкаКоличествоСпец.КоличествоСпециализаций, 0),
	|	ОтборыЗаявок.ОтборСотрудник,
	|	ЕСТЬNULL(СотрудникиСпециализации.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Таблица.ОтборСотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА Таблица.ОтборСотрудник
	|		ИНАЧЕ Таблица.Сотрудник
	|	КОНЕЦ КАК СотрудникОтбор,
	|	Таблица.Заявка КАК Заявка
	|ПОМЕСТИТЬ ФинальныеОтборы
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	(Таблица.СовпаденияСотрудника = Таблица.ЭталонноеКоличество
	|			ИЛИ Таблица.ЭталонноеКоличество = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиХочуРаньше.Ссылка КАК Заявка,
	|	ЗаявкиХочуРаньше.Сотрудник КАК ЗаявкаСотрудник,
	|	ЗаявкиХочуРаньше.ВремяНачала КАК ЗаявкаВремяНачала,
	|	ЗаявкиХочуРаньше.ВремяОкончания КАК ЗаявкаВремяОкончания,
	|	ЗаявкиХочуРаньше.ДатаНачала КАК ЗаявкаДата,
	|	ЗаявкиХочуРаньше.Филиал КАК ЗаявкаФилиал,
	|	ЗаявкиХочуРаньше.ДлительностьСекунды КАК ДлительностьСекунды,
	|	ЗаявкиХочуРаньше.ПримечаниеХочуРаньше КАК ПримечаниеХочуРаньше,
	|	ЗаявкиХочуРаньше.Клиент КАК Клиент,
	|	ЗаявкиХочуРаньше.Филиал КАК Филиал
	|ИЗ
	|	ЗаявкиХочуРаньше КАК ЗаявкиХочуРаньше
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиХочуРаньше.Ссылка КАК Заявка,
	|	ЗаявкиХочуРаньше.Сотрудник КАК ЗаявкаСотрудник,
	|	ЗаявкиХочуРаньше.ВремяНачала КАК ЗаявкаВремяНачала,
	|	ЗаявкиХочуРаньше.ВремяОкончания КАК ЗаявкаВремяОкончания,
	|	ЗаявкиХочуРаньше.Филиал КАК ЗаявкаФилиал,
	|	СвободныеЯчейки.ВремяНачала КАК ВремяНачала,
	|	ВЫБОР
	|		КОГДА СвободныеЯчейки.ВремяОкончания <= ЗаявкиХочуРаньше.ДатаНачала
	|			ТОГДА СвободныеЯчейки.ВремяОкончания
	|		ИНАЧЕ ЗаявкиХочуРаньше.ДатаНачала
	|	КОНЕЦ КАК ВремяОкончания,
	|	СвободныеЯчейки.Дата КАК Дата,
	|	СвободныеЯчейки.Сотрудник КАК Сотрудник,
	|	СвободныеЯчейки.Филиал КАК Филиал,
	|	ПРЕДСТАВЛЕНИЕ(СвободныеЯчейки.Филиал) КАК ФилиалНаименование,
	|	НАЧАЛОПЕРИОДА(ЗаявкиХочуРаньше.ДатаНачала, ДЕНЬ) КАК ЗаявкаДата,
	|	ЗаявкиХочуРаньше.ДлительностьСекунды КАК ЗаявкаДлительностьСекунды,
	|	ЗаявкиХочуРаньше.ПримечаниеХочуРаньше КАК Примечание
	|ПОМЕСТИТЬ ФинальнаяТаблица
	|ИЗ
	|	ЗаявкиХочуРаньше КАК ЗаявкиХочуРаньше
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободныеЯчейки КАК СвободныеЯчейки
	|		ПО (ДОБАВИТЬКДАТЕ(СвободныеЯчейки.ВремяНачала, СЕКУНДА, ЗаявкиХочуРаньше.ДлительностьСекунды) <= СвободныеЯчейки.ВремяОкончания)
	|			И (НАЧАЛОПЕРИОДА(СвободныеЯчейки.Дата, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ЗаявкиХочуРаньше.ДатаНачала, ДЕНЬ))
	|			И (ЗаявкиХочуРаньше.ДатаНачала > ДОБАВИТЬКДАТЕ(СвободныеЯчейки.Дата, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СвободныеЯчейки.ВремяНачала, СЕКУНДА)))
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(СвободныеЯчейки.Дата, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), СвободныеЯчейки.ВремяНачала, СЕКУНДА)) >= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинальнаяТаблица.Заявка КАК Заявка,
	|	ФинальнаяТаблица.ЗаявкаСотрудник КАК ЗаявкаСотрудник,
	|	ФинальнаяТаблица.ЗаявкаВремяНачала КАК ЗаявкаВремяНачала,
	|	ФинальнаяТаблица.ЗаявкаВремяОкончания КАК ЗаявкаВремяОкончания,
	|	ФинальнаяТаблица.ЗаявкаФилиал КАК ЗаявкаФилиал,
	|	ФинальнаяТаблица.ВремяНачала КАК ВремяНачала,
	|	ФинальнаяТаблица.ВремяОкончания КАК ВремяОкончания,
	|	ФинальнаяТаблица.Дата КАК Дата,
	|	ФинальнаяТаблица.Сотрудник КАК Сотрудник,
	|	ФинальнаяТаблица.Филиал КАК Филиал,
	|	ФинальнаяТаблица.ФилиалНаименование КАК ФилиалНаименование,
	|	ФинальнаяТаблица.ЗаявкаДата КАК ЗаявкаДата,
	|	ФинальнаяТаблица.ЗаявкаДлительностьСекунды КАК ЗаявкаДлительностьСекунды,
	|	ФинальнаяТаблица.Примечание КАК Примечание,
	|	ВЫБОР
	|		КОГДА ФинальныеОтборы.СотрудникОтбор ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоВариантов,
	|	ВЫБОР
	|		КОГДА ФинальныеОтборы.СотрудникОтбор ЕСТЬ NULL
	|				ИЛИ ФинальнаяТаблица.Филиал <> ФинальнаяТаблица.ЗаявкаФилиал
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоВариантовЭтотЖеФилиал
	|ИЗ
	|	ФинальнаяТаблица КАК ФинальнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФинальныеОтборы КАК ФинальныеОтборы
	|		ПО (ФинальныеОтборы.Заявка = ФинальнаяТаблица.Заявка)
	|			И (ФинальныеОтборы.СотрудникОтбор = ФинальнаяТаблица.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ВремяНачала,
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаНачала);
	Запрос.УстановитьПараметр("ТекущееВремя", Дата(1,1,1) + (ДатаНачала - НачалоДня(ДатаНачала)));
	Запрос.УстановитьПараметр("ХочуРаньше", Истина);
	Запрос.УстановитьПараметр("СвободныеЯчейки", ТаблицаГрафиков);
	
	Запрос.УстановитьПараметр("Состояния", ПолучитьНерабочиеСостоянияЗаявок());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Возврат РезультатЗапроса;
	
КонецФункции

// Горизонт анализа заявок "хочу раньше".
//
// Параметры:
//  ДатаНачала	 - Дата	 - условная текущая дата.
// 
// Возвращаемое значение:
//  Дата. 
//
Функция ПолучитьДатуОкончанияПоЗаявкамХочуРаньше(ДатаНачала) Экспорт
	Эталон = Константы.ДатаПоследнейЗаявкиХочуРаньше.Получить();
	Возврат ?(ЗначениеЗаполнено(Эталон), Эталон, ДатаНачала + 2*7*24*60*60);
КонецФункции

// Плановая длительность услуги - общая для всех сотрудников.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - услуга 
//  Количество	 - Число - количество единиц услуги.
// 
// Возвращаемое значение:
//  Дата - длительность.
//
Функция ПлановаяДлительностьУслуги(Номенклатура, Количество = 1) Экспорт
	
	ПродолжительностьУслугиЧас = Номенклатура.ПродолжительностьЧас;	
	ПродолжительностьУслугиМин = Номенклатура.ПродолжительностьМин;
		
	Продолжительность = Дата(1,1,1) + (ПродолжительностьУслугиЧас*60*60 + ПродолжительностьУслугиМин*60) * Количество;
	
	Возврат Продолжительность;
	
КонецФункции

// Вычислить общий кеш основных услуг сотрундиков
// 
// Возвращаемое значение:
//  Соответствие - услуги сотрудников.
//
Функция ИнициироватьКешОсновныхУслугСотрундиков() Экспорт
	
	УслугиСотрудников = Новый Соответствие;
	
	ЛимитПолногоКеша = 500; // Если в регистре больше записей, то полный кеш не инициируется.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать Количество(*) КАК Количество ИЗ РегистрСведений.ОсновныеУслугиСотрудников";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.Количество <= ЛимитПолногоКеша Тогда
			
		НаборЗаписей = РегистрыСведений.ОсновныеУслугиСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если УслугиСотрудников.Получить(Запись.Сотрудник) = Неопределено Тогда
				МассивУслуг = Новый Массив;
			Иначе
				МассивУслуг = УслугиСотрудников.Получить(Запись.Сотрудник);
			КонецЕсли;
			
			СтруктураУслуги = Новый Структура;
			СтруктураУслуги.Вставить("Номенклатура", Запись.Номенклатура);
			СтруктураУслуги.Вставить("Часы",		 Запись.Часы);
			СтруктураУслуги.Вставить("Минуты",		 Запись.Минуты);
			
			МассивУслуг.Добавить(СтруктураУслуги);
			УслугиСотрудников.Вставить(Запись.Сотрудник, МассивУслуг);
		КонецЦикла;
	КонецЕсли;
	
	Возврат УслугиСотрудников;
	
КонецФункции

// Возвращает основные услуги сотрудника из базы данных.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьОсновныеУслугиСотрудника(Сотрудник = Неопределено) Экспорт
	
	МассивУслуг = Новый Массив;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
	
		НаборЗаписей = РегистрыСведений.ОсновныеУслугиСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			СтруктураУслуги = Новый Структура;
			СтруктураУслуги.Вставить("Номенклатура", Запись.Номенклатура);
			СтруктураУслуги.Вставить("Часы",		 Запись.Часы);
			СтруктураУслуги.Вставить("Минуты",		 Запись.Минуты);
			МассивУслуг.Добавить(СтруктураУслуги);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивУслуг;
	
КонецФункции

// Получает параметры записи по листу ожидания для ввода через форму журнала записи.
//
// Параметры:
//  ПараметрКоманды		 - ДокументСсылка - Документ, на основании которого осуществляется запись.
//  СообщениеОбОшибке	 - Строка - Сообщение об ошибке исходных данных.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьПараметрыЗаписиПоЛистуОжидания(ПараметрКоманды, СообщениеОбОшибке = "") Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	
	Если ПараметрКоманды.Метаданные().Реквизиты.Найти("Клиент") <> Неопределено И ЗначениеЗаполнено(ПараметрКоманды.Клиент) Тогда
		ПараметрыЗаписи.Вставить("Клиент", ПараметрКоманды.Клиент);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Документ записи не содержит клиента, запись невозможна'");
		Возврат Неопределено;
	КонецЕсли;
	
	ЛистОжидания = ПараметрКоманды;
	
	// Попытка поиска листа ожидания, как приоритетного документа для записи
	Если ТипЗнч(ПараметрКоманды) <> Тип("ДокументСсылка.ЛистОжидания") Тогда 
		ЛистОжидания = CRMСервер.НайтиЛистОжиданияСвязанныйСДокументом(ПараметрКоманды);
	КонецЕсли;
	
	Если ЛистОжидания = Неопределено Тогда 
		ПараметрыЗаписи.Вставить("ДокументЗаписи", ПараметрКоманды);
	Иначе
		
		Если ЛистОжидания.Выполнен Тогда
			СообщениеОбОшибке = НСтр("ru='Лист ожидания уже выполнен'");
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ДокументЗаписи", ЛистОжидания);
		ПараметрыЗаписи.Вставить("ЛистОжидания", ЛистОжидания);
		ПараметрыЗаписи.Вставить("ДанныеЛистаОжидания", Новый Структура("ДатаНачала, ДатаОкончания, Сотрудник, Специализация", 
			ЛистОжидания.ДатаНачалаПлан, ЛистОжидания.ДатаОкончанияПлан, ЛистОжидания.Сотрудник, ЛистОжидания.Специализация));
	КонецЕсли;
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

#Область УправленияПереносомЗаявок_ДлительныеОперции

// Исходные данные для формы управления переносом заявок "хочу раньше".
//
// Параметры:
//  Параметры		 - Структура - параметры инициации.
//  АдресРезультата	 - Строка - адрес в хранилище для результата.
//
Процедура СформироватьДанныеДляФормыУправленияПереносомЗаявок(Параметры, АдресРезультата) Экспорт
	
	РезультатЗапроса = ПолучитьДанныеПоЗаявкамДляПереносаВПрошлое();
	ВыгрузкаТаблица = РезультатЗапроса[8].Выгрузить(); 
	ВыгрузкаТаблицаДляФормы = ВыгрузкаТаблица.Скопировать();	
	ВыгрузкаТаблица.Свернуть("Заявка", "КоличествоВариантов, КоличествоВариантовЭтотЖеФилиал");
	ВыгрузкаЗаявкиДляПереноса = РезультатЗапроса[6].Выгрузить();
	ВыгрузкаЗаявкиДляПереноса.Колонки.Добавить("ОсновноеОписание");
	ВыгрузкаЗаявкиДляПереноса.Колонки.Добавить("ОписаниеРаботы");
	ВыгрузкаЗаявкиДляПереноса.Колонки.Добавить("Примечание");
	ЗаявкиДляПереноса = Параметры.ЗаявкиДляПереноса;
	Для Каждого стр Из ВыгрузкаЗаявкиДляПереноса Цикл	
		стр.Примечание			= СформироватьПримечаниеПоЗаявке(стр.Заявка);
		стр.ОсновноеОписание	= СформироватьОсновноеОписаниеПоЗаявке(стр.Заявка);
		стр.ОписаниеРаботы		= СформироватьОписаниеРаботыПоЗаявке(стр.Заявка);
		нЗаявка = ЗаявкиДляПереноса.Добавить();
		ЗаполнитьЗначенияСвойств(нЗаявка, стр);
		нЗаявка.КонтактнаяИнформация = ПолучитьКИКлиента(стр.Клиент);

		ОтборКоличество = Новый Структура("Заявка", стр.Заявка);
		НайденныеСтроки = ВыгрузкаТаблица.НайтиСтроки(ОтборКоличество);
		Если НайденныеСтроки.Количество() = 1 Тогда
			нЗаявка.КоличествоВариантов = НайденныеСтроки[0].КоличествоВариантов;
			нЗаявка.КоличествоВариантовЭтотЖеФилиал = НайденныеСтроки[0].КоличествоВариантовЭтотЖеФилиал;
		КонецЕсли;
		
		нЗаявка.МожноПеренестиВТуЖеКлинику = нЗаявка.КоличествоВариантовЭтотЖеФилиал > 0
		
	КонецЦикла;
	
	Результат = Новый Структура("ЗаявкиДляПереноса, ВыгрузкаТаблица",ЗаявкиДляПереноса, ВыгрузкаТаблицаДляФормы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция СформироватьПримечаниеПоЗаявке(ЗаявкаСсылка)
	Примечание = "";
	Примечание = Примечание + ЗаявкаСсылка.ПримечаниеХочуРаньше;
	Возврат Примечание;
КонецФункции

Функция СформироватьОсновноеОписаниеПоЗаявке(ЗаявкаСсылка)
	Примечание = "";
	Примечание = Примечание
				+ УправлениеЗаявкамиПереопределяемый.ПолучитьСпециализированноеИмяРеквизита(ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов())
					+ ": " +  РаботаСДокументамиСервер.ФилиалДокумента(ЗаявкаСсылка).Наименование + Символы.ПС
				+ ?(ЗначениеЗаполнено(ЗаявкаСсылка.Кабинет), "Кабинет: " + ЗаявкаСсылка.Кабинет.Наименование + Символы.ПС,"")
				+ "Ответственный: " +  ЗаявкаСсылка.Ответственный.Наименование
				+ ?(ЗначениеЗаполнено(ЗаявкаСсылка.Примечание), "Комментарий: " + ЗаявкаСсылка.Примечание, "");
					
	Возврат Примечание;
	
КонецФункции

Функция СформироватьОписаниеРаботыПоЗаявке(ЗаявкаСсылка)
	Примечание = "";
	Для Каждого Работа Из ЗаявкаСсылка.Работы Цикл
		Примечание = Примечание
					+ ?(ЗначениеЗаполнено(Работа.Номенклатура), Строка(Работа.Номенклатура), "Резерв времени") 
					+ " - " + Формат(Работа.Продолжительность, "ДФ=HH:mm") 
					+?( ЗначениеЗаполнено(Работа.Сотрудник)," - " + Работа.Сотрудник.Наименование,"") + Символы.ПС;
	КонецЦикла;
	Возврат Примечание;
	
КонецФункции

Функция ПолучитьКИКлиента(КлиентСсылка)
	КИ = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", КлиентСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Объект = &Клиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид"	
	;
	
	Выб = Запрос.Выполнить().Выбрать();	
	Пока Выб.Следующий() Цикл
		Если Выб.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотовый Тогда
			КИ = КИ + "Сотовый: " + Выб.Представление + Символы.ПС;		
		ИначеЕсли Выб.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочий Тогда
			КИ = КИ + "Рабочий: " + Выб.Представление + Символы.ПС;
		ИначеЕсли Выб.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонДомашний Тогда
			КИ = КИ + "Домашний: " + Выб.Представление + Символы.ПС;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат КИ;
КонецФункции

#КонецОбласти

#Область ОповещениеКлиентПришел

// Возвращает Истина, если для пользователя актуально отслеживание и оповещение о приходе клиента к нему по записи.
// Не учитывает роль Польные права.
// 
// Возвращаемое значение:
//  Булево
//
Функция ОповещатьПользователяОПриходеКлиента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОсновныеРолиКонфигурации = Метаданные.ОсновныеРоли;
		
	ЕстьПравоДоступаКРегистру = Ложь;
	
	Если Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"СкрыватьОповещенияОПриходеКлиентов") Тогда
		РолиПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Роли;
		Для Каждого РольПользователя Из РолиПользователя Цикл
			
			Если Не ОсновныеРолиКонфигурации.Содержит(РольПользователя)
				И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ОповещенияСотрудниковОПриходеКлиентов, РольПользователя)
			Тогда
				ЕстьПравоДоступаКРегистру = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьПравоДоступаКРегистру;
	
КонецФункции

// В зависимости от состояния заявки создает либо удаляет оповещения сотрудникам о том, что к ним пришел клиент.
// Создание оповещения в регистре делается, если заявка перешла в состояние с типом Пришел.
//
// Параметры:
//  Заявка	 - ДокументСсылка.Заявка - Заявка, для которой создаются/удаляются оповещения.
//  ДополнительныеСвойства	 - Структура - дополнительные свойства при записи объекта.
//
Процедура ЗаписатьОповещенияОПриходеКлиентов(Заявка, ДополнительныеСвойства) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("СостояниеПредыдущее") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СотрудникШапки = Заявка.Сотрудник;
	РежимНесколькоСотрудников = Заявка.НесколькоСотрудников;
	ЗаявкаТипСостояния	= Заявка.Состояние.ТипСостояния;
	пчТипыСостояний		= Перечисления.ТипыСостоянийЗаявок;
	
	Если ЗаявкаТипСостояния = пчТипыСостояний.Отменена Или Заявка.ПометкаУдаления Тогда
		
		НаборЗаписей = РегистрыСведений.ОповещенияСотрудниковОПриходеКлиентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() <> 0 Тогда 
			// Произошло удаление заявки. Поэтому очищаем оповещения.
			НаборЗаписей.Очистить();
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Работы = Заявка.Работы.Выгрузить();
		Работы.Колонки.Сотрудник.Имя = "Сотрудник";
		Работы.Свернуть("Сотрудник, Номенклатура", "");
		
		тзСотрудникиЗаявки = Новый ТаблицаЗначений;
		тзСотрудникиЗаявки.Колонки.Добавить("Сотрудник");
		
		Для Каждого СтрокаРаботы Из Работы Цикл
			Если ЗначениеЗаполнено(СтрокаРаботы.Номенклатура) Тогда
				Если СтрокаРаботы.Номенклатура.ПланируетсяБезСотрудника Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;				
			НоваяСтрокаСотрудники = тзСотрудникиЗаявки.Добавить();
			Если РежимНесколькоСотрудников
				И ЗначениеЗаполнено(СтрокаРаботы.Сотрудник) 
			Тогда
				НоваяСтрокаСотрудники.Сотрудник = СтрокаРаботы.Сотрудник;
			Иначе
				НоваяСтрокаСотрудники.Сотрудник = СотрудникШапки;
			КонецЕсли;
		КонецЦикла;
		тзСотрудникиЗаявки.Свернуть("Сотрудник");			
		
		НаборЗаписей = РегистрыСведений.ОповещенияСотрудниковОПриходеКлиентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		
		Если ЗаявкаТипСостояния = пчТипыСостояний.Пришел
			И ДополнительныеСвойства.СостояниеПредыдущее.ТипСостояния <> пчТипыСостояний.Пришел
		Тогда
			// Произошла установка состояния Пришел, до того было другой тип состояния. Поэтому создаем оповещения.
			Для Каждого СтрокаСотрудник Из тзСотрудникиЗаявки Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Заявка = Заявка;
				НоваяЗапись.Сотрудник = СтрокаСотрудник.Сотрудник;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		Иначе
			// Была перезапись заявки, предполагающая актуализацию оповещений (удаление неактуальных).
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				мсЗаписиДляУдаления = Новый Массив;
				Для Каждого Запись Из НаборЗаписей Цикл
					Если тзСотрудникиЗаявки.Найти(Запись.Сотрудник) = Неопределено Тогда
						мсЗаписиДляУдаления.Добавить(Запись);					
					КонецЕсли;
				КонецЦикла;
				Если мсЗаписиДляУдаления.Количество() <> 0 Тогда  
					Для Каждого ЭлементЗапись Из мсЗаписиДляУдаления Цикл
						НаборЗаписей.Удалить(ЭлементЗапись);	
					КонецЦикла;
					Попытка
						НаборЗаписей.Записать();
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает перечень записей оповещений сотрудников о приходе клиентов. 
//
// Параметры:
//  Сотрудник					 - СправочникСсылка.Сотрудники - Сотрудник, для которого нужно выбрать записи.
//  ВыбратьНеактуальныеЗаписи	 - Булево - признак актуальности выбранных записей. 
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьЗаписиОповещенийОПриходеКлиентов(Сотрудник = Неопределено, ВыбратьНеактуальныеЗаписи = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Если Сотрудник = Неопределено Тогда
		Пользователь = ОбщегоНазначения.ТекущийПользователь();
		Сотрудник = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "Сотрудник");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("СостояниеОтменена", Перечисления.ТипыСостоянийЗаявок.Отменена);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОповещенияСотрудниковОПриходеКлиентов.Сотрудник КАК Сотрудник,
	               |	ОповещенияСотрудниковОПриходеКлиентов.Заявка КАК Заявка
	               |ИЗ
	               |	РегистрСведений.ОповещенияСотрудниковОПриходеКлиентов КАК ОповещенияСотрудниковОПриходеКлиентов
				   |	{Условие}
				   |	{Сотрудник}"; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{Условие}", ?(ВыбратьНеактуальныеЗаписи = Ложь, 
	               "ГДЕ
				   	|	НЕ ОповещенияСотрудниковОПриходеКлиентов.Заявка.ПометкаУдаления
	                |	И ОповещенияСотрудниковОПриходеКлиентов.Заявка.Состояние.ТипСостояния <> &СостояниеОтменена
	                |	И НАЧАЛОПЕРИОДА(ОповещенияСотрудниковОПриходеКлиентов.Заявка.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)"
				   ,
	               "ГДЕ
	               	|	ОповещенияСотрудниковОПриходеКлиентов.Заявка.ДатаНачала < НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, ЧАС, -14), ДЕНЬ)"
					));
					
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{Сотрудник}", ?(Сотрудник <> Неопределено, "И ОповещенияСотрудниковОПриходеКлиентов.Сотрудник = &Сотрудник", "")); 
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Новый Структура("Сотрудник, Заявка", Выборка.Сотрудник, Выборка.Заявка));
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти

#Область ЗаявкиДокументовПродаж // Функции обеспечения связи заявок и документов продаж.

// Возвращает перечень заявок клиента за указанный день, состояние которых предполагает ожидание оформления продажи.
//
// Параметры:
//  Клиент			 - СправочникСсылка.Клиенты	 - Клиент, для которого определяются заявки
//  Дата			 - Дата	 - День поиска заявок
//  Филиал			 - СправочникСсылка.Филиалы	 - Филиал поиска
//  УчетнаяПолитика	 - Структура	 - Кеш учетной политики.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьЗаявкиКлиентаЗаДеньСостояниеДоПродажи(Клиент, Дата, Филиал = Неопределено, УчетнаяПолитика = Неопределено) Экспорт
	
	Если УчетнаяПолитика = Неопределено Тогда
		УП = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Иначе
		УП = УчетнаяПолитика;
	КонецЕсли;
	
	Если Филиал = Неопределено Тогда
		ФилиалДляЗапроса = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	Иначе
		ФилиалДляЗапроса = Филиал;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументЗаявка.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Заявка КАК ДокументЗаявка
		|ГДЕ
		|	ДокументЗаявка.Клиент = &Клиент
		|	И (ДокументЗаявка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ДокументЗаявка.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|	И ДокументЗаявка.Филиал В ИЕРАРХИИ(&Филиал)
		|	И ДокументЗаявка.Состояние В(&СостоянияДоПродажи)
		|	И НЕ ДокументЗаявка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументЗаявка.ДатаНачала";
	
	Запрос.УстановитьПараметр("СостоянияДоПродажи", УправлениеЗаявками.СостоянияЗаявкиДопродажи());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

// Возвращает состояния заявки, относящиеся к моменту, когда заявка уже оформлена, но по ней нет еще продажи.
// 
// Возвращаемое значение:
//   Массив.
//
Функция СостоянияЗаявкиДоПродажи() Экспорт
	
	ИсключаемыеТипыСостояний = Новый Массив;
	ИсключаемыеТипыСостояний.Добавить(Перечисления.ТипыСостоянийЗаявок.Выполнена);
	ИсключаемыеТипыСостояний.Добавить(Перечисления.ТипыСостоянийЗаявок.Отменена);
	
	ИсключаемыеСостояния = Новый Массив;
	ИсключаемыеСостояния.Добавить(Справочники.ВидыСостоянийЗаявок.Забронирована);
	ИсключаемыеСостояния.Добавить(Справочники.ВидыСостоянийЗаявок.Выполнена);
	ИсключаемыеСостояния.Добавить(Справочники.ВидыСостоянийЗаявок.Оплачена);
	ИсключаемыеСостояния.Добавить(Справочники.ВидыСостоянийЗаявок.Отменена);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключаемыеТипыСостояний", ИсключаемыеТипыСостояний);
	Запрос.УстановитьПараметр("ИсключаемыеСостояния", ИсключаемыеСостояния);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.ВидыСостоянийЗаявок КАК ВидыСостоянийЗаявок
	|ГДЕ
	|	ТипСостояния НЕ В (&ИсключаемыеТипыСостояний) И Ссылка НЕ В (&ИсключаемыеСостояния)"
	;
	Состояния = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Состояния.Добавить(Справочники.ВидыСостоянийЗаявок.Прием);
	Состояния.Добавить(Справочники.ВидыСостоянийЗаявок.Запланирована);
	Состояния.Добавить(Справочники.ВидыСостоянийЗаявок.СозданаНаСайте);
	
	Возврат Состояния;
	
КонецФункции

// Возвращает состояния заявки, относящиеся к моменту, когда заявка уже оформлена, но по ней нет еще продажи.
// 
// Возвращаемое значение:
//   Массив.
//
Функция СостоянияЗаявкиДоПродажиИлиВыполнения() Экспорт
	
	Попытка
		СостояниеПрием = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыСостоянийЗаявок.Прием");
	Исключение
		СостояниеПрием = Неопределено;
	КонецПопытки;
	СостоянияПрием = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СостояниеПрием);
	
	Состояния = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СостоянияЗаявкиДоПродажи(), СостоянияПрием);
	
	Возврат Состояния;
	
КонецФункции

// Возвращает состояния заявки, относящиеся к моменту, когда заявка уже оформлена, но по ней нет еще продажи.
// 
// Возвращаемое значение:
//   Массив.
//
Функция СостоянияЗаявкиДоПриходаКлиента() Экспорт
	
	Состояния = СостоянияЗаявкиДоПродажиИлиВыполнения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состояния", Состояния);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСостоянийЗаявок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыСостоянийЗаявок КАК ВидыСостоянийЗаявок
	|ГДЕ
	|	ВидыСостоянийЗаявок.Ссылка В(&Состояния)
	|	И ВидыСостоянийЗаявок.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Пришел)"
	;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает состояния заявки, относящиеся к моменту, когда заявка уже в состоянии продажи, приема или выполнения.
// 
// Возвращаемое значение:
//   Массив.
//
Функция СостоянияЗаявкиПослеНачалаВыполнения(ВключатьСостоянияПришел = Истина) Экспорт
	
	// Все состояния заявок
	СостоянияПослеВыполнения = Новый Массив;
	Выборка = Справочники.ВидыСостоянийЗаявок.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВключатьСостоянияПришел
			Или Выборка.ТипСостояния <> Перечисления.ТипыСостоянийЗаявок.Пришел
		Тогда
			СостоянияПослеВыполнения.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Вычитаем состояния отмены и состояния до прихода.
	СостоянияПослеВыполнения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СостоянияПослеВыполнения, СостоянияЗаявкиДоПриходаКлиента());
	СостоянияПослеВыполнения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СостоянияПослеВыполнения, СостоянияЗаявкиОтменена());
	
	Возврат СостоянияПослеВыполнения;
	
КонецФункции

// Возвращает состояния отмененной заявки.
// 
// Возвращаемое значение:
//   Массив.
//
Функция СостоянияЗаявкиОтменена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСостоянийЗаявок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыСостоянийЗаявок КАК ВидыСостоянийЗаявок
	|ГДЕ
	|	ВидыСостоянийЗаявок.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)"
	;
	
	Состояния = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если Состояния.Найти(Справочники.ВидыСостоянийЗаявок.Отменена) = Неопределено Тогда
		Состояния.Добавить(Справочники.ВидыСостоянийЗаявок.Отменена);
	КонецЕсли;
	
	Возврат Состояния;
	
КонецФункции

// Определяет форму слова "заявки" в зависимости от количества, с которым оно будет выведено в текст.
//
// Параметры:
//  Количество	 - Число - Количество для определения написания слова.
// 
// Возвращаемое значение:
//   Строка.
//
Функция СклонениеСловаЗаявка(Количество) Экспорт
	
	Если Количество >= 5 Тогда
		Возврат НСтр("ru='заявок'")
		
	ИначеЕсли Количество = 1 Тогда
		Возврат НСтр("ru='заявка'")
		
	Иначе
		Возврат НСтр("ru='заявки'")
	КонецЕсли;
	
КонецФункции

// Используется в формах ОказаниеУслуг.ЗаявкиДокумента и Заявки.ЗаявкаЗаДень для заполнения информации в колонках работ и сотрудников.
//
// Параметры:
//  Заявки	- ТаблицаЗначений - Таблица с колонками "Заявка", "Номенклатура" и "Сотрудники".
// 
Процедура ЗаполнитьСотрудниковНоменклатуруТаблицыЗаявок(Заявки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", Заявки.Выгрузить().ВыгрузитьКолонку("Заявка"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаРаботы.Ссылка КАК Заявка,
	|	ЗаявкаРаботы.Ссылка.Сотрудник.Представление КАК СотрудникШапки,
	|	ЗаявкаРаботы.Сотрудник.Представление КАК Сотрудник,
	|	ЗаявкаРаботы.Номенклатура.Представление КАК Номенклатура
	|ИЗ
	|	Документ.Заявка.Работы КАК ЗаявкаРаботы
	|ГДЕ
	|	ЗаявкаРаботы.Ссылка В(&Заявки)
	|ИТОГИ ПО
	|	Заявка"
	;
	ВыборкаЗаявки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявки.Следующий() Цикл
		
		СтрокаЗаявки = Заявки.НайтиСтроки(Новый Структура("Заявка", ВыборкаЗаявки.Заявка))[0];
		Выборка = ВыборкаЗаявки.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаЗаявки.Номенклатура, Выборка.Номенклатура);
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаЗаявки.Сотрудники, ?(ЗначениеЗаполнено(Выборка.Сотрудник), Выборка.Сотрудник, Выборка.СотрудникШапки));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
