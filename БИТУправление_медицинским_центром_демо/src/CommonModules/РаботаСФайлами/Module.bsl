///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПрикрепленныеФайлыВладелецПриЗаписиОбработчик(Источник) Экспорт
	
	Если (Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
			И Источник.ДополнительныеСвойства.ЭтоНовый = Истина)
	Или (Источник.ДополнительныеСвойства.Свойство("НеДелатьПроверокПриЗаписи")
			И Источник.ДополнительныеСвойства.НеДелатьПроверокПриЗаписи = Истина)
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ВладелецФайлов.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
		Справочники.ХранилищеДополнительнойИнформации.АктуализироватьКонечногоВладельцаФайловОбъекта(Источник.Ссылка, Источник);
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру параметров для добавления файла.
// Для использования в РаботаСФайлами.ДобавитьВФайл.
// 
// Параметры:
//   ДополнительныеРеквизиты - Строка
//                           - Массив - имена реквизитов присоединенного файла, перечисленные через
//                           запятую, или массив имен реквизитов.
//                           - Структура - коллекция дополнительных реквизитов. Стандартные свойства будут
//                           вставлены в коллекцию в случае отсутствия.
//
// Возвращаемое значение:
//   Структура:
//      * Автор                       - СправочникСсылка.Пользователи
//                                    - СправочникСсылка.ВнешниеПользователи
//                                    - СправочникСсылка.УчетныеЗаписиСинхронизацииФайлов - пользователь или
//                                    учетная запись синхронизации файлов, от имени которого создается файл.
//                                    Значение по умолчанию - Неопределено.
//      * ВладелецФайлов              - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект, к которому
//                                    требуется прикрепить добавляемый файл.
//                                    Значение по умолчанию - Неопределено.
//      * ИмяБезРасширения            - Строка - имя файла без расширения.
//                                    Значение по умолчанию - "".
//      * РасширениеБезТочки          - Строка - расширение файла (без точки вначале).
//                                    Значение по умолчанию - "".
//      * ВремяИзмененияУниверсальное - Дата - дата и время изменения файла (UTC+0:00). Если параметр принимает значение
//                                    Неопределено, при добавлении файла время изменения будет установлено равным
//                                    результату выполнения функции ТекущаяУниверсальнаяДата().
//                                    Значение по умолчанию - Неопределено.
//      * ГруппаФайлов                - ОпределяемыйТип.ПрисоединенныйФайл - группа справочника с файлами, в которую
//                                    будет добавлен новый файл.
//                                    Значение по умолчанию - Неопределено.
//      * Служебный                   - Булево - если Истина, тогда файл будет скрыт от пользователей.
//                                    Значение по умолчанию - Ложь.
//
Функция ПараметрыДобавленияФайла(ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Возврат РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
	
КонецФункции

Функция ПолучитьСтруктуруДанныхФайла() Экспорт
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("Объект");
	СтруктураФайла.Вставить("Расширение", "");
	СтруктураФайла.Вставить("ИмяФайла", "");
	СтруктураФайла.Вставить("ВФайле");
	СтруктураФайла.Вставить("ФайлНайден", Ложь);
	
	Возврат СтруктураФайла;
	
КонецФункции

Функция ПолучитьБазовыйКаталогФайлов(Владелец = Неопределено) Экспорт
	
	БазовыйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("БазовыйКаталогФайлов"));
	Если Владелец = Неопределено Тогда
		Возврат БазовыйКаталог;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(БазовыйКаталог + Строка(Владелец.УникальныйИдентификатор()));
	КонецЕсли;	
		
КонецФункции

Процедура ПросканироватьСписокФайловВКаталоге(БазовыйКаталог, СписокВладельцев) Экспорт
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	Каталог = Новый Файл(БазовыйКаталог);
	Если Не Каталог.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из СписокВладельцев Цикл
		
		// Найдем существующие файлы объекта
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.Идентификатор,
		|	ХранилищеДополнительнойИнформации.Расширение
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ВФайле
		|	И ХранилищеДополнительнойИнформации.Объект = &Объект
		|	И НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления";
		Запрос.УстановитьПараметр("Объект", ЭлементСписка);
		ФайлыВБазе = Запрос.Выполнить().Выгрузить();
		
		// Поиск каталога объекта
		СписокКаталогов = НайтиФайлы(БазовыйКаталог, "*" + ЭлементСписка.УникальныйИдентификатор() + "*", Ложь);
		Для Каждого КаталогОбъекта Из СписокКаталогов Цикл
			МассивФайлов = НайтиФайлы(КаталогОбъекта.ПолноеИмя, "*", Ложь); // Ищем файлы в каталоге владельца
			Для Каждого Файл Из МассивФайлов Цикл 
				// Проверяем, есть ли данные файлы в базе
				НайденныеФайлыВБазе = ФайлыВБазе.НайтиСтроки(Новый Структура("Идентификатор", Файл.Имя));
				Если НайденныеФайлыВБазе.Количество() = 0 Тогда // Добавляем, если нет
					НовыйФайл = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
					НовыйФайл.ВФайле = Истина;
					НовыйФайл.Объект = ЭлементСписка;
					НовыйФайл.Идентификатор = "";
					НовыйФайл.Наименование = Файл.Имя;
					НовыйФайл.Расширение = Файл.Расширение;
					НовыйФайл.Дата = ТекущаяДата();
					НовыйФайл.Записать();
				Иначе	// Если есть, то удаляем их из списка
					Для Каждого ФайлВБазе Из НайденныеФайлыВБазе Цикл
						ФайлыВБазе.Удалить(ФайлВБазе);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// В списке файлов у нас остались файлы, не найденные в каталоге - удаляем их.
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого УдаляемыйФайл Из ФайлыВБазе Цикл
			мсСсылки = Новый Массив;
			мсСсылки.Добавить(УдаляемыйФайл.Ссылка);
			СсылкиНаОбъект = НайтиПоСсылкам(мсСсылки);
			Если СсылкиНаОбъект.Количество() = 0 Тогда
				УдаляемыйФайл.Ссылка.ПолучитьОбъект().Удалить();
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПоместитьФайлВКаталогНаСервере(СтруктураДанныхФайла, КаталогХранения) Экспорт
	
	// Добавляем файл в папку
	КаталогНаДиске = Новый Файл(КаталогХранения); // Если нет каталога - создаем.
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(КаталогХранения);
	КонецЕсли;
	
	СтруктураДанныхФайла.ИмяФайла = СформироватьИмяДобавляемогоФайла(СтруктураДанныхФайла.Объект, 
		СтруктураДанныхФайла.ИмяФайла, СтруктураДанныхФайла.ИмяБезРасширения, СтруктураДанныхФайла.Расширение);
	СтруктураДанныхФайла.ДвоичныеДанные.Записать(КаталогХранения + СтруктураДанныхФайла.ИмяФайла);
		
	// Теперь добавляем в хранилище
	Если СтруктураДанныхФайла.Свойство("СсылкаНаФайл") И ЗначениеЗаполнено(СтруктураДанныхФайла.СсылкаНаФайл) Тогда 
		НовыйОбъект = СтруктураДанныхФайла.СсылкаНаФайл.ПолучитьОбъект();
	Иначе
		НовыйОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		Если СтруктураДанныхФайла.Свойство("Классификация") И ЗначениеЗаполнено(СтруктураДанныхФайла.Классификация) Тогда
			НовыйОбъект.Классификация = СтруктураДанныхФайла.Классификация;
		КонецЕсли;
	КонецЕсли;
	НовыйОбъект.Наименование = СтруктураДанныхФайла.ИмяФайла;
	НовыйОбъект.Объект = СтруктураДанныхФайла.Объект;
	Если СтруктураДанныхФайла.Свойство("Идентификатор") И ЗначениеЗаполнено(СтруктураДанныхФайла.Идентификатор) Тогда
		НовыйОбъект.Идентификатор = СтруктураДанныхФайла.Идентификатор;
	Иначе
		НовыйОбъект.Идентификатор = СтруктураДанныхФайла.ИмяФайла;
	КонецЕсли;
	НовыйОбъект.Расширение = СтруктураДанныхФайла.Расширение;
	НовыйОбъект.ВФайле = Истина;
	НовыйОбъект.Хранилище = Неопределено;
	НовыйОбъект.Дата = ТекущаяДата();
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция ПоместитьФайлВХранилищеНаСервере(СтруктураДанныхФайла) Экспорт
	
	СтруктураДанныхФайла.ИмяФайла = СформироватьИмяДобавляемогоФайла(СтруктураДанныхФайла.Объект, 
		СтруктураДанныхФайла.ИмяФайла, СтруктураДанныхФайла.ИмяБезРасширения, СтруктураДанныхФайла.Расширение);	
		
	Если СтруктураДанныхФайла.Свойство("СсылкаНаФайл") И ЗначениеЗаполнено(СтруктураДанныхФайла.СсылкаНаФайл) Тогда 
		НовыйОбъект = СтруктураДанныхФайла.СсылкаНаФайл.ПолучитьОбъект();
	Иначе
		НовыйОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		Если СтруктураДанныхФайла.Свойство("Классификация") И ЗначениеЗаполнено(СтруктураДанныхФайла.Классификация) Тогда
			НовыйОбъект.Классификация = СтруктураДанныхФайла.Классификация;
		КонецЕсли;
	КонецЕсли;
	НовыйОбъект.Наименование = СтруктураДанныхФайла.ИмяФайла;
	НовыйОбъект.Объект = СтруктураДанныхФайла.Объект;
	Если СтруктураДанныхФайла.Свойство("Идентификатор") И ЗначениеЗаполнено(СтруктураДанныхФайла.Идентификатор) Тогда
		НовыйОбъект.Идентификатор = СтруктураДанныхФайла.Идентификатор;
	Иначе
		НовыйОбъект.Идентификатор = СтруктураДанныхФайла.ИмяФайла;
	КонецЕсли;
	НовыйОбъект.Расширение = СтруктураДанныхФайла.Расширение;
	НовыйОбъект.Хранилище = Новый ХранилищеЗначения(СтруктураДанныхФайла.ДвоичныеДанные, Новый СжатиеДанных(9));
	НовыйОбъект.ВФайле = Ложь;
	НовыйОбъект.Дата = ТекущаяДата();
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьФайлНаСервере(СсылкаНаФайл, КаталогХранения = Неопределено, ВернутьДвоичныеДанныеЕслиФайлВКаталоге = Ложь, ПоместитьВХранилищеДвоичныеДанные = Ложь) Экспорт
	
	СтруктураДанныхФайла = ПолучитьСтруктуруДанныхФайла();
	СтруктураДанныхФайла.ВФайле = СсылкаНаФайл.ВФайле;
	СтруктураДанныхФайла.Объект	= СсылкаНаФайл.Объект;
	Если СсылкаНаФайл.ВФайле Тогда 
		Если КаталогХранения = Неопределено Тогда
			БазовыйКаталог = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("БазовыйКаталогФайлов");
			КаталогХранения = ПолучитьКаталогХраненияФайлов(БазовыйКаталог, СсылкаНаФайл);
		КонецЕсли;
		
		ФайлНаДиске = Новый Файл(КаталогХранения + СсылкаНаФайл.Наименование);
		Если ФайлНаДиске.Существует() Тогда
			СтруктураДанныхФайла.ФайлНайден = Истина;
		Иначе 
			Возврат СтруктураДанныхФайла;
		КонецЕсли;
		
		СтруктураДанныхФайла.Расширение	= ФайлНаДиске.Расширение;	
		СтруктураДанныхФайла.ИмяФайла = ФайлНаДиске.Имя;
		Если ВернутьДвоичныеДанныеЕслиФайлВКаталоге Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя);
			СтруктураДанныхФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			Если ПоместитьВХранилищеДвоичныеДанные Тогда
				СтруктураДанныхФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", ПоместитьВоВременноеХранилище(ДвоичныеДанные));
			КонецЕсли;
		Иначе
			СтруктураДанныхФайла.Вставить("ПутьКФайлу", ФайлНаДиске.ПолноеИмя);
		КонецЕсли;
	Иначе
		ДвоичныеДанные = СсылкаНаФайл.Хранилище.Получить();
		СтруктураДанныхФайла.Расширение	= СсылкаНаФайл.Расширение;	
		СтруктураДанныхФайла.ИмяФайла = СсылкаНаФайл.Наименование;
		СтруктураДанныхФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		СтруктураДанныхФайла.ФайлНайден = Истина;
		Если ПоместитьВХранилищеДвоичныеДанные Тогда
			СтруктураДанныхФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", ПоместитьВоВременноеХранилище(ДвоичныеДанные));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанныхФайла;
	
КонецФункции

Функция ПолучитьФайлИзХранилищаНаСервере(СсылкаНаФайл) Экспорт
	
	Возврат СсылкаНаФайл.Хранилище.Получить();
	
КонецФункции

Функция ПолучитьФайлИзКаталогаНаСервере(СсылкаНаФайл, КаталогХранения = Неопределено) Экспорт
	
	Если КаталогХранения = Неопределено Тогда
		БазовыйКаталог = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("БазовыйКаталогФайлов");
		КаталогХранения = ПолучитьКаталогХраненияФайлов(БазовыйКаталог, СсылкаНаФайл);
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(КаталогХранения + СсылкаНаФайл.Наименование);
	Если Не ФайлНаДиске.Существует() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя);
	КонецЕсли;
	
КонецФункции

// Проверяет наличие дублей имени файла и формирует новое имя с порядковым номером в скобках
// Не работает, если таких файлов больше 9.
Функция СформироватьИмяДобавляемогоФайла(Объект, ИмяФайла, ИмяБезРасширения, Расширение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ХранилищеДополнительнойИнформации.Наименование = &Наименование
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И (ХранилищеДополнительнойИнформации.Наименование = &Наименование
	|			ИЛИ ХранилищеДополнительнойИнформации.Наименование ПОДОБНО &НаименованиеПодобное)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Наименование УБЫВ";
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Наименование", ИмяФайла);
	Запрос.УстановитьПараметр("НаименованиеПодобное", ИмяБезРасширения + " ([0-9])" + Расширение); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ИмяБезРасширения + 
			" (" + Строка(ПолучитьПорядковыйНомерФайла(Лев(Выборка.Наименование, СтрДлина(Выборка.Наименование) - СтрДлина(Расширение))) + 1) + ")"
			+ Расширение;
	Иначе
		Возврат ИмяФайла;	
	КонецЕсли;
	
КонецФункции

// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ПараметрыФайла - Структура - Параметры с данными файла.
//       * Автор                        - Ссылка - пользователь, создавший файл.
//       * ВладелецФайлов               - Ссылка - объект, к которому добавляется файл.
//       * ИмяБезРасширения             - Строка - имя файла без расширения.
//       * РасширениеБезТочки           - Строка - расширение файла (без точки вначале).
//       * ВремяИзмененияУниверсальное  - Дата   - дата и время изменения файла (UTC+0:00),
//                                            если не указана, тогда используется ТекущаяУниверсальнаяДата().
//         ГруппаФайлов                 - Ссылка - группа справочника с файлами, в которую будет добавлен новый файл.
//  АдресФайлаВоВременномХранилище      - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста      - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//  Описание                            - Строка - текстовое описание файла.
//
//  НоваяСсылкаНаФайл                   - Неопределено - создать новую ссылку на файл в стандартном справочнике
//                                        или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
//                                        справочников, требуется обязательно передать ссылку, иначе будет вызвано
//                                        исключение.
//                                        - Ссылка - ссылка на элемент справочника хранения файлов,
//                                        которую следует использовать для добавляемого файла.
//                                        Должна соответствовать одному из типов справочников хранения файлов владельца
//                                        файлов.
// Возвращаемое значение:
//  СправочникСсылка - ссылка на созданный присоединенный файл.
//
Функция ДобавитьФайл(ПараметрыФайла,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт

	Автор =              ПараметрыФайла.Автор;
	ВладелецФайлов =     ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения  =  ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;
	
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ПараметрыПрисоединенногоФайла = Новый Структура;
		
	ПараметрыПрисоединенногоФайла.Вставить("Объект", ВладелецФайлов);
	ПараметрыПрисоединенногоФайла.Вставить("Наименование", ИмяБезРасширения);
	ПараметрыПрисоединенногоФайла.Вставить("Расширение", РасширениеБезТочки);
	
	//+бит
	Если ТипЗнч(НоваяСсылкаНаФайл) <> Тип("СправочникСсылка.МДЛППрисоединенныеФайлы") Тогда
		НачатьТранзакцию();
		Попытка
			СсылкаНаФайл = ДобавитьНовыйФайлПочты(ПараметрыПрисоединенногоФайла, ДвоичныеДанные);
			ЗафиксироватьТранзакцию();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
			|%2'");
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	Иначе
		ГруппаФайлов = Неопределено;
		Если ПараметрыФайла.Свойство("ГруппаФайлов") 
			И ЗначениеЗаполнено(ПараметрыФайла.ГруппаФайлов)
			И Не РаботаСФайламиСлужебный.ЭтоПапкаФайлов(ВладелецФайлов) Тогда
			ГруппаФайлов = ПараметрыФайла.ГруппаФайлов;
		КонецЕсли;
		ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;
		
		Если РасширениеБезТочки = Неопределено Тогда
			ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
			Если ЧастиИмениФайла.Количество() > 1 Тогда
				РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
				ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
			Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
			ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		
		ПрисоединенныйФайл = Справочники.МДЛППрисоединенныеФайлы.СоздатьЭлемент();
		ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
		
		ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
		ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
		ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
		ПрисоединенныйФайл.Описание                     = Описание;
		ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
		ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
		// ПрисоединенныйФайл.ТипХраненияФайла             = РаботаСФайламиСлужебный.ТипХраненияФайлов();
		ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
		ПрисоединенныйФайл.Автор                        = Автор;
		ПрисоединенныйФайл.Изменил                      = Автор;
		Если ГруппаФайлов <> Неопределено Тогда
			ПрисоединенныйФайл.Родитель = ГруппаФайлов;
		КонецЕсли;
		
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			Попытка
				РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
				ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ПрисоединенныйФайл.ПутьКФайлу = "";
				
				// Если ИзвлекатьТекст Тогда
				//	РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(АдресВременногоХранилищаТекста, 
				//	ДвоичныеДанные, ПрисоединенныйФайл.Расширение);
				//	ПрисоединенныйФайл.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
				//	ПрисоединенныйФайл.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
				// Иначе
					ПрисоединенныйФайл.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
					ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения("");
				// КонецЕсли;
				
				ПрисоединенныйФайл.Заполнить(Неопределено);
				Если Не ЗначениеЗаполнено(ПрисоединенныйФайл.Изменил) Тогда
					ПрисоединенныйФайл.Изменил = Пользователи.АвторизованныйПользователь();
				КонецЕсли;
				
				ПрисоединенныйФайл.Записать();
				
				ЗафиксироватьТранзакцию();
				
				СсылкаНаФайл = ПрисоединенныйФайл.Ссылка;
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
				|%2'");
				КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Добавление присоединенного файла'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат СсылкаНаФайл;
	
КонецФункции

// Возвращает максимальный размер файла.
//
// Возвращаемое значение:
//  Число - целое число байтов.
//
Функция МаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазделениеВключеноИДоступноИспользование = (ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
		
	ИмяКонстанты = ?(РазделениеВключеноИДоступноИспользование, "МаксимальныйРазмерФайлаОбластиДанных", "МаксимальныйРазмерФайла");
	
	МаксимальныйРазмерФайла = Константы[ИмяКонстанты].Получить();
	
	Если НЕ ЗначениеЗаполнено(МаксимальныйРазмерФайла) Тогда
		МаксимальныйРазмерФайла = 52428800; // 50*1024*1024 = 50 Мб
	КонецЕсли;
	
	Если РазделениеВключеноИДоступноИспользование Тогда
		ГлобальныйМаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
		ГлобальныйМаксимальныйРазмерФайла = ?(ЗначениеЗаполнено(ГлобальныйМаксимальныйРазмерФайла),
			ГлобальныйМаксимальныйРазмерФайла, 52428800);
		МаксимальныйРазмерФайла           = Мин(МаксимальныйРазмерФайла, ГлобальныйМаксимальныйРазмерФайла);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

Функция ПолучитьПорядковыйНомерФайла(ИмяФайла)
	
	Если ПустаяСтрока(ИмяФайла) Тогда 
		Возврат 0;
	КонецЕсли;
	ШаблонЦифры = "0123456789";
	
	ПоследСимв = Прав(ИмяФайла, 1);
	НомерФайла = "";
	Если ПоследСимв = ")" Тогда
		Сч = СтрДлина(ИмяФайла) - 1;
		Пока Сч > 0 Цикл
			ТекСимвол = Сред(ИмяФайла, Сч, 1);
			Если ТекСимвол = "(" Тогда 
				Прервать;
			КонецЕсли;
			Если Найти(ШаблонЦифры, ТекСимвол) > 0 Тогда 
				НомерФайла = ТекСимвол + НомерФайла;
			Иначе
				Возврат 0;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(НомерФайла) Тогда 
		Возврат 0;
	Иначе
		Возврат Число(НомерФайла);
	КонецЕсли;
	
КонецФункции

Процедура УдалитьФайлИзКаталогаНаСервере(СсылкаНаФайл, КаталогХранения = Неопределено, УдалятьИзХранилища = Истина) Экспорт
	
	Если КаталогХранения = Неопределено Тогда
		БазовыйКаталог = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("БазовыйКаталогФайлов");
		КаталогХранения = ПолучитьКаталогХраненияФайлов(БазовыйКаталог, СсылкаНаФайл);
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(КаталогХранения + СсылкаНаФайл);
	Если ФайлНаДиске.Существует() Тогда
		УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
	КонецЕсли;
	
	Если УдалятьИзХранилища Тогда 
		УдалитьВосстановитьФайлВХранилищеНаСервере(СсылкаНаФайл);
	КонецЕсли;
		
КонецПроцедуры

Процедура УдалитьВосстановитьФайлВХранилищеНаСервере(СсылкаНаФайл, ПометкаУдаления = Истина) Экспорт 
	
	Если ПометкаУдаления Тогда
		УстановитьПривилегированныйРежим(Истина);
		мсСсылки = Новый Массив;
		мсСсылки.Добавить(СсылкаНаФайл);
		СсылкиНаОбъект = НайтиПоСсылкам(мсСсылки);
		Если СсылкиНаОбъект.Количество() = 0 И СсылкаНаФайл.ВФайле Тогда 
			СсылкаНаФайл.ПолучитьОбъект().Удалить();
		Иначе
			СсылкаНаФайл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	Иначе
		СсылкаНаФайл.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВсеФайлы(Знач мсВладельцы, БезПомеченныхНаУдаление = Ложь) Экспорт 
	
	Если ТипЗнч(мсВладельцы) <> Тип("Массив") Тогда 
		Владелец = мсВладельцы;
		мсВладельцы = Новый Массив;
		мсВладельцы.Добавить(Владелец);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владельцы", мсВладельцы);
	Запрос.УстановитьПараметр("БезПомеченныхНаУдаление", БезПомеченныхНаУдаление);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Наименование,
	|	ХранилищеДополнительнойИнформации.Объект,
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.Идентификатор,
	|	ХранилищеДополнительнойИнформации.Расширение,
	|	ХранилищеДополнительнойИнформации.Дата,
	|	ХранилищеДополнительнойИнформации.Комментарий,
	|	ХранилищеДополнительнойИнформации.ВФайле
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект В(&Владельцы)
	|	И (НЕ &БезПомеченныхНаУдаление
	|			ИЛИ НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления)";
		
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаФайлов.Количество() > 0 Тогда
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаФайлов);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция ПроверитьНаличиеФайлов(мсВладельцы) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект В(&Владельцы)";
	Запрос.УстановитьПараметр("Владельцы", мсВладельцы);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьКоличествоФайловОбъекта(Знач Объект) Экспорт
	
	СписокФайлов = ПолучитьВсеФайлы(Объект, Истина);
	Если СписокФайлов = Неопределено Тогда 
		Возврат 0;
	Иначе
		Возврат СписокФайлов.Количество();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКаталогХраненияФайлов(БазовыйКаталог, СсылкаНаФайл) Экспорт
	
	КаталогХранения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(БазовыйКаталог) + 
		Строка(СсылкаНаФайл.Объект.УникальныйИдентификатор());
		
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогХранения);
		
КонецФункции

// Добавить новый файл к документу исходящая почта
//
// Параметры:
//	ПараметрыПрисоединенногоФайла - Структура - Описывает основные параметры записываемого файл 
//  ДвоичныеДанные	- Двоичные данные - Данные файла на сохранение
// Возвращаемое значение:
// СсылкаНаФайл  - СправочникСсылка.ХранилищеДополнительнойИнформации
//
Функция ДобавитьНовыйФайлПочты(ПараметрыПрисоединенногоФайла, ДвоичныеДанные) Экспорт
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();

	СтруктураДанныхФайла = Новый Структура("Объект, ДвоичныеДанные, ИмяБезРасширения, Расширение, ИмяФайла");	
	СтруктураДанныхФайла.Объект					= ПараметрыПрисоединенногоФайла.Объект;
	СтруктураДанныхФайла.ДвоичныеДанные			= ДвоичныеДанные;
	СтруктураДанныхФайла.ИмяБезРасширения		= ПараметрыПрисоединенногоФайла.Наименование;
	СтруктураДанныхФайла.Расширение				= ?(ПараметрыПрисоединенногоФайла.Расширение = "", "" ,"." + ПараметрыПрисоединенногоФайла.Расширение);;	
	СтруктураДанныхФайла.ИмяФайла				= СтруктураДанныхФайла.ИмяБезРасширения+СтруктураДанныхФайла.Расширение;
	
	Если УчетнаяПолитика.ХранитьФотоКлиентовКакФайлы Тогда //Храним файлами
		КаталогХраненияФайла = ПолучитьКаталогХраненияФайлов(УчетнаяПолитика.БазовыйКаталогФайлов, СтруктураДанныхФайла);
		СсылкаНаФайл = ПоместитьФайлВКаталогНаСервере(СтруктураДанныхФайла, КаталогХраненияФайла);
	Иначе    
		// Храним в хранилище
		СсылкаНаФайл = ПоместитьФайлВХранилищеНаСервере(СтруктураДанныхФайла);	
	КонецЕсли;

	Возврат СсылкаНаФайл;
	
КонецФункции

// Добавить новый файл к объекту
//
// Параметры:
//  Объект			 - СправочникСсылка	 - владелец файла
//  ПутьКФайлу		 - Строка	 - путь к файлу.
//  УчетнаяПолитика	 - Структура, неопределено	 - кеш учетной политики.
// 
// Возвращаемое значение:
//   - ссылка на файл.
//
Функция ДобавитьНовыйФайл(Объект, ПутьКФайлу, УчетнаяПолитика = Неопределено, СсылкаНаФайл = Неопределено, СопоставлятьПоИмениИОбъекту = Ложь) Экспорт
	
	Если УчетнаяПолитика = Неопределено Тогда 
		УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаФайл) И СопоставлятьПоИмениИОбъекту Тогда
		СсылкаНаФайл = НайтиСуществующийФайл(Объект, ПутьКФайлу);
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ПутьКФайлу);
	ИмяФайлаЗаписиБезРасш = ФайлНаДиске.ИмяБезРасширения;
	
	СтруктураДанныхФайла = Новый Структура("Объект, ДвоичныеДанные, ИмяБезРасширения, Расширение, ИмяФайла"); 
	СтруктураДанныхФайла.Объект     = Объект;
	СтруктураДанныхФайла.ДвоичныеДанные   = Новый ДвоичныеДанные(ПутьКФайлу);
	СтруктураДанныхФайла.ИмяБезРасширения  = ФайлНаДиске.ИмяБезРасширения;;
	СтруктураДанныхФайла.Расширение    = ФайлНаДиске.Расширение; 
	СтруктураДанныхФайла.ИмяФайла    = ФайлНаДиске.Имя;
	Если ЗначениеЗаполнено(СсылкаНаФайл) Тогда 
		СтруктураДанныхФайла.Вставить("СсылкаНаФайл", СсылкаНаФайл);
	КонецЕсли;
	
	Если УчетнаяПолитика.ХранитьФотоКлиентовКакФайлы Тогда //Храним файлами
		КаталогХраненияФайла = ПолучитьКаталогХраненияФайлов(УчетнаяПолитика.БазовыйКаталогФайлов, СтруктураДанныхФайла);
		СсылкаНаФайл = РаботаСФайлами.ПоместитьФайлВКаталогНаСервере(СтруктураДанныхФайла, КаталогХраненияФайла);
	Иначе    
		// Храним в хранилище
		СсылкаНаФайл = РаботаСФайлами.ПоместитьФайлВХранилищеНаСервере(СтруктураДанныхФайла); 
	КонецЕсли;
	
	Возврат СсылкаНаФайл;
	
КонецФункции

Функция НайтиСуществующийФайл(Объект, ПутьКФайлу)
	
	Выборка = Справочники.ХранилищеДополнительнойИнформации.Выбрать(Новый Структура("Объект, Наименование",Объект, ПутьКФайлу));
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив Из Строка -
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Описание");
	РедактируемыеРеквизиты.Добавить("Редактирует");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик подписки на событие ПередЗаписью для заполнения авто реквизитов присоединенного файла.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПередЗаписьюПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КонвертацияФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		// Проверка права "Добавление".
		Если НЕ РаботаСФайламиСлужебный.ЕстьПраво("ДобавлениеФайлов", Источник.ВладелецФайла) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав для добавления файлов в папку ""%1"".'"),
				Строка(Источник.ВладелецФайла));
		КонецЕсли;
	Иначе
		
		ИзмененаПометкаУдаления = 
			Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
			
		Если ИзмененаПометкаУдаления Тогда
			// Проверка права "Пометка на удаление".
			Если НЕ РаботаСФайламиСлужебный.ЕстьПраво("ПометкаУдаленияФайлов", Источник.ВладелецФайла) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недостаточно прав для пометки файлов на удаление в папке ""%1"".'"),
					Строка(Источник.ВладелецФайла));
			КонецЕсли;
		КонецЕсли;
		
		Если ИзмененаПометкаУдаления И ЗначениеЗаполнено(Источник.Редактирует) Тогда
				
			Если Источник.Редактирует = Пользователи.АвторизованныйПользователь() Тогда
				
				ТекстОшибки = НСтр("ru = 'Действие недоступно, так как файл ""%1"" занят для редактирования.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Источник.Наименование);
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Действие недоступно, так как файл ""%1"" занят для редактирования
					|пользователем %2.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Источник.Наименование,
				Строка(Источник.Редактирует));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписьПодписанногоОбъекта = Ложь;
		Если Источник.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
			ЗаписьПодписанногоОбъекта = Источник.ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
		КонецЕсли;
		
		Если ЗаписьПодписанногоОбъекта <> Истина Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка,
				"ПодписанЭП, Зашифрован, Редактирует");
			
			СсылкаПодписан    = СтруктураРеквизитов.ПодписанЭП;
			СсылкаЗашифрован  = СтруктураРеквизитов.Зашифрован;
			СсылкаЗанят       = ЗначениеЗаполнено(СтруктураРеквизитов.Редактирует);
			Занят = ЗначениеЗаполнено(Источник.Редактирует);
			
			Если Не Источник.ЭтоГруппа И Источник.ПодписанЭП И СсылкаПодписан И Занят И Не СсылкаЗанят Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный файл нельзя редактировать.'");
			КонецЕсли;
			
			Если Не Источник.ЭтоГруппа И Источник.Зашифрован И СсылкаЗашифрован И Источник.ПодписанЭП И НЕ СсылкаПодписан Тогда
				ВызватьИсключение НСтр("ru = 'Зашифрованный файл нельзя подписывать.'");
			КонецЕсли;
			
		КонецЕсли;
		
		СправочникПоддерживаетВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъектаОбратныйПорядок("ТекущаяВерсия", Метаданные.НайтиПоТипу(ТипЗнч(Источник)));
		
		Если Не Источник.ЭтоГруппа И СправочникПоддерживаетВозможностьХранитьВерсии И ЗначениеЗаполнено(Источник.ТекущаяВерсия) Тогда
			
			РеквизитыТекущейВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.ТекущаяВерсия, "Наименование");
			
			// Проверим равенство имени файла и его текущей версии.
			// Если имена отличаются - имя у версии должно стать как у карточки с файлом.
			Если РеквизитыТекущейВерсии.Наименование <> Источник.Наименование
			   И ЗначениеЗаполнено(Источник.ТекущаяВерсия) Тогда
				
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(
					Метаданные.НайтиПоТипу(ТипЗнч(Источник.ТекущаяВерсия)).ПолноеИмя());
				
				ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Источник.ТекущаяВерсия);
				БлокировкаДанных.Заблокировать();
				
				Объект = Источник.ТекущаяВерсия.ПолучитьОбъект();
				
				Если Объект <> Неопределено Тогда
					УстановитьПривилегированныйРежим(Истина);
					Объект.Наименование = Источник.Наименование;
					// Чтобы не сработала подписка СкопироватьРеквизитыВерсииФайловВФайл.
					Объект.ДополнительныеСвойства.Вставить("ПереименованиеФайла", Истина);
					Объект.Записать();
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен владелец в файле
			           |""%1"".'"),
			Источник.Наименование);
		
		Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Ошибка записи файла при обновлении ИБ'",
				     ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Источник.Ссылка,
				ОписаниеОшибки);
		Иначе
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Источник.ИндексКартинки = 2;
	Иначе
		Источник.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Источник.Расширение);
	КонецЕсли;
	
	Если Источник.ЭтоНовый() И Не ЗначениеЗаполнено(Источник.Автор) Тогда
		Источник.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалением для удаления данных, связанных с присоединенным файлом.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПередУдалениемПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебный.ПередУдалениемПрисоединенногоФайлаСервер(
		Источник.Ссылка,
		Источник.ВладелецФайла,
		Источник.Том,
		Источник.ТипХраненияФайла,
		Источник.ПутьКФайлу);
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи для обновления данных, связанных с присоединенным файлом.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПриЗаписиПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебный.ПриЗаписиПрисоединенногоФайлаСервер(
		Источник.ВладелецФайла, Источник.Ссылка);
		
	РаботаСФайламиСлужебный.ОбновитьСостояниеОчередиИзвлеченияТекста(
		Источник.Ссылка, Источник.СтатусИзвлеченияТекста);
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Знач Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Файл.Использование = Истина;
		НаборЗаписей.Отбор.Файл.Значение = Источник.Ссылка;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Файл = Источник.Ссылка;
		Запись.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла, кроме ДокументОбъект.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайлов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);

КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	//+бит
	//ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	//-бит
КонецПроцедуры


// Помечает/снимает пометку удаления у приложенных файлов.
Процедура ПометитьНаУдалениеПрисоединенныеФайлы(Знач Источник, ИмяСправочника = Неопределено)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(
			ТипЗнч(Источник.Ссылка));
	Исключение
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение НСтр("ru = 'Ошибка при пометке на удаление присоединенных файлов.'")
			+ Символы.ПС
			+ ПредставлениеОшибки;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Редактирует КАК Редактирует
		|ИЗ
		|	&ИмяСправочника КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Для каждого ОписаниеИмениСправочника Из ИменаСправочников Цикл
		
		ПолноеИмяСправочника = "Справочник." + ОписаниеИмениСправочника.Ключ;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Источник.ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '""%1"" не может быть удален,
					           |т.к. содержит присоединенный файл ""%2"",
					           |занятый для редактирования.'"),
					Строка(Источник.Ссылка),
					Строка(Выборка.Ссылка));
			КонецЕсли;
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает двоичные данные файла.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//
//  ВызыватьИсключение - Булево - если указать Ложь, то функция будет возвращать Неопределено
//                     вместо вызова исключений. Значение по умолчанию - Истина.
//
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - двоичные данные присоединенного файла. Если двоичные данные файла не найдены
//                               в информационной базе или в томах, вызывает исключение. Если двоичные данные не
//                               найдены и параметр ВызыватьИсключение принимает значение Ложь, тогда
//                               возвращаемое значение - Неопределено.
//
Функция ДвоичныеДанныеФайла(Знач ПрисоединенныйФайл, Знач ВызыватьИсключение = Истина) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДвоичныеДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
	
	ФайлОбъект = РаботаСФайламиСлужебный.ФайлОбъект(ПрисоединенныйФайл);
	Если ФайлОбъект = Неопределено
		И Не ВызыватьИсключение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		Результат = ХранилищеФайлаИзИнформационнойБазы(ФайлОбъект.Ссылка);
		Если Результат <> Неопределено Тогда
			Возврат Результат.Получить();
		ИначеЕсли Не ВызыватьИсключение Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Запись в журнал регистрации.
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Двоичные данные файла отсутствуют в регистре ДвоичныеДанныеФайла
			           |
			           |Ссылка на файл: ""%1"".'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Открытие файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
			ПрисоединенныйФайл,
			СообщениеОбОшибке);
		
		ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Присоединен к %1 : %2'"),
				Строка(ТипЗнч(ФайлОбъект.ВладелецФайла)),
				ФайлОбъект.ВладелецФайла);
		
		ВызватьИсключение РаботаСФайламиСлужебный.ОшибкаФайлНеНайденВХранилищеФайлов(
			ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение,
			Ложь,
			ПредставлениеВладельцаФайла);
	Иначе
		ПолныйПуть = РаботаСФайламиСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			Возврат Новый ДвоичныеДанные(ПолныйПуть);
		Исключение
			
			Если Не ВызыватьИсключение Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			// Запись в журнал регистрации.
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Получение файла из тома'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			
			ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Присоединен к %1 : %2'"),
					Строка(ТипЗнч(ФайлОбъект.ВладелецФайла)),
					ФайлОбъект.ВладелецФайла);
				
			ВызватьИсключение РаботаСФайламиСлужебный.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение,
				,
				ПредставлениеВладельцаФайла);
				
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Возвращает двоичные данные файла из информационной базы.
//
// Параметры:
//   ФайлСсылка - ссылка на файл или его версию.
//
// Возвращаемое значение:
//   ХранилищеЗначения - двоичные данные файла.
//
Функция ХранилищеФайлаИзИнформационнойБазы(ФайлСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвоичныеДанныеФайлов.Файл,
	|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
	|ИЗ
	|	РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|ГДЕ
	|	ДвоичныеДанныеФайлов.Файл = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ДвоичныеДанныеФайла, Неопределено);
	
КонецФункции

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ссылка на файл: ""%2"".'"),
			СообщениеОбОшибке,
			ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Определяет наличие активных томов хранения файлов.
// Если есть хоть один том хранения файлов, то будет возвращена Истина.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда существует хотя бы один работающий том.
//
Функция ЕстьТомаХраненияФайлов() Экспорт
	
	Возврат РаботаСФайламиВТомахСлужебный.ЕстьТомаХраненияФайлов();
	
КонецФункции

// Получает настройки сканирования пользователя.
// 
// Параметры:
//  ИдентификаторКлиента - УникальныйИдентификатор - идентификатор клиента
// 
// Возвращаемое значение:
//   см. РаботаСФайламиКлиентСервер.НастройкиСканированияПользователя
//
Функция ПолучитьНастройкиСканированияПользователя(ИдентификаторКлиента) Экспорт
	
	//+бит
	// Переопределено ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить на 
	// ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования
	// т.к. привязываем к рабочему месту а не к пользователю
	
	НастройкиСканированияПользователя = РаботаСФайламиКлиентСервер.НастройкиСканированияПользователя();
	
	НастройкиСканированияПользователя.ПоказыватьДиалогСканера = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/ПоказыватьДиалогСканера", 
		ИдентификаторКлиента, Истина);
	
	НастройкиСканированияПользователя.ИмяУстройства = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/ИмяУстройства", 
		ИдентификаторКлиента, "");
	
	НастройкиСканированияПользователя.ФорматСканированногоИзображения = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/ФорматСканированногоИзображения", 
		ИдентификаторКлиента, Перечисления.ФорматыСканированногоИзображения.PNG);
	
	НастройкиСканированияПользователя.СохранятьВPDF = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/СохранятьВPDF", 
		ИдентификаторКлиента, Ложь);
	
	НастройкиСканированияПользователя.ФорматХраненияМногостраничный = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/ФорматХраненияМногостраничный", 
		ИдентификаторКлиента, Перечисления.ФорматыХраненияМногостраничныхФайлов.TIF);
	
	НастройкиСканированияПользователя.Разрешение = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/Разрешение", 
		ИдентификаторКлиента);
	
	НастройкиСканированияПользователя.Цветность = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/Цветность", 
		ИдентификаторКлиента);
	
	НастройкиСканированияПользователя.Поворот = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/Поворот", 
		ИдентификаторКлиента);
	
	НастройкиСканированияПользователя.РазмерБумаги = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/РазмерБумаги", 
		ИдентификаторКлиента);
	
	НастройкиСканированияПользователя.ДвустороннееСканирование = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/ДвустороннееСканирование", 
		ИдентификаторКлиента);
	
	НастройкиСканированияПользователя.ИспользоватьImageMagickДляПреобразованияВPDF = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/ИспользоватьImageMagickДляПреобразованияВPDF", 
		ИдентификаторКлиента, Ложь);
		
	НастройкиСканированияПользователя.КачествоJPG = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/КачествоJPG", 
		ИдентификаторКлиента, 100);
	
	НастройкиСканированияПользователя.СжатиеTIFF = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/СжатиеTIFF", 
		ИдентификаторКлиента, Перечисления.ВариантыСжатияTIFF.БезСжатия);
	
	НастройкиСканированияПользователя.ПутьКПрограммеКонвертации = ОбщегоНазначенияСервер.ХранилищеОбщихНастроекЗагрузитьДляСканирования(
		"НастройкиСканирования/ПутьКПрограммеКонвертации", 
		ИдентификаторКлиента, ""); // ImageMagick
		
	//-бит
		
	Возврат НастройкиСканированияПользователя;
КонецФункции

// Сохраняет настройки сканирования пользователя.
// Параметры:
//  НастройкиСканированияПользователя - см. РаботаСФайламиКлиентСервер.НастройкиСканированияПользователя
//  ИдентификаторКлиента - УникальныйИдентификатор - идентификатор клиента
//
Процедура СохранитьНастройкиСканированияПользователя(НастройкиСканированияПользователя, ИдентификаторКлиента) Экспорт

	МассивСтруктур = Новый Массив;
	
	МассивСтруктур.Добавить(СформироватьНастройку("ПоказыватьДиалогСканера",
		НастройкиСканированияПользователя.ПоказыватьДиалогСканера, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("ИмяУстройства",
		НастройкиСканированияПользователя.ИмяУстройства, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("ФорматСканированногоИзображения",
		НастройкиСканированияПользователя.ФорматСканированногоИзображения, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("СохранятьВPDF",
		НастройкиСканированияПользователя.СохранятьВPDF, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("ФорматХраненияМногостраничный",
		НастройкиСканированияПользователя.ФорматХраненияМногостраничный, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("Разрешение",
		НастройкиСканированияПользователя.Разрешение, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("Цветность",
		НастройкиСканированияПользователя.Цветность, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("Поворот",
		НастройкиСканированияПользователя.Поворот, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("РазмерБумаги",
		НастройкиСканированияПользователя.РазмерБумаги, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("ДвустороннееСканирование",
		НастройкиСканированияПользователя.ДвустороннееСканирование, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("ИспользоватьImageMagickДляПреобразованияВPDF",
		НастройкиСканированияПользователя.ИспользоватьImageMagickДляПреобразованияВPDF, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("КачествоJPG",
		НастройкиСканированияПользователя.КачествоJPG, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("СжатиеTIFF",
		НастройкиСканированияПользователя.СжатиеTIFF, ИдентификаторКлиента));
	МассивСтруктур.Добавить(СформироватьНастройку("ПутьКПрограммеКонвертации",
		НастройкиСканированияПользователя.ПутьКПрограммеКонвертации, ИдентификаторКлиента));
	
	Если ЗначениеЗаполнено(НастройкиСканированияПользователя.ФорматХраненияОдностраничный) Тогда
		ФорматХраненияОдностраничный = НастройкиСканированияПользователя.ФорматХраненияОдностраничный;
	Иначе
		ФорматХраненияОдностраничный = РаботаСФайламиСлужебный.ПреобразоватьФорматСканированияВФорматХранения(НастройкиСканированияПользователя.ФорматСканированногоИзображения,
			НастройкиСканированияПользователя.СохранятьВPDF);
	КонецЕсли;
	
	МассивСтруктур.Добавить(СформироватьНастройку("ФорматХраненияОдностраничный", ФорматХраненияОдностраничный, ИдентификаторКлиента));
	//+бит
	// т.к. привязываем к рабочему месту а не к пользователю
	// Было:
	//ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, Истина);
	// Стало:
	ОбщегоНазначенияСервер.ХранилищеОбщихНастроекСохранитьМассивДляСканирования(МассивСтруктур, Истина);
	//-бит
КонецПроцедуры

Функция СформироватьНастройку(Имя, Значение, ИдентификаторКлиента) Экспорт //+бит
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСканирования/" + Имя);
	Элемент.Вставить("Настройка", ИдентификаторКлиента);
	Элемент.Вставить("Значение", Значение);
	Возврат Элемент;
	
КонецФункции

#КонецОбласти

