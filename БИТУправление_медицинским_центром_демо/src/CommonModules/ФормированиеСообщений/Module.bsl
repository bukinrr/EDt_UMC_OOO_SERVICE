Процедура ВыполнитьОбработкуИФормированиеАвтоматическихСообщений() Экспорт
	
	Если Не БИТ_Защита_Конфигурации.ЛицензияДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	Состояние("Фомрирование автоматических сообщений");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСообщенийРассылки.Ссылка КАК ВидСообщения,
	|	ВидыСообщенийРассылки.ВидСобытия,
	|	ВидыСообщенийРассылки.Дата,
	|	ВидыСообщенийРассылки.Время,
	|	ВидыСообщенийРассылки.ЗапасДней,
	|	ВидыСообщенийРассылки.ШаблонТекста,
	|	ВидыСообщенийРассылки.ОтправлятьБезПодтверждения,
	|	ВидыСообщенийРассылки.ВидСобытия.ТипСобытия КАК ТипСобытия
	|ИЗ
	|	Справочник.ВидыСообщенийРассылки КАК ВидыСообщенийРассылки
	|ГДЕ
	|	ВидыСообщенийРассылки.АвтоматическиФормироватьСообщения
	|	И НЕ ВидыСообщенийРассылки.ПометкаУдаления";
	
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ОбработатьСобытия(Выб.ВидСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСобытия(ВидСообщения)
	
	Перем ДатаСобытия;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = ОтобратьКлиентовПоВидуСообщения(ВидСообщения);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВидСообщения.Дата) = Тип("Дата") Тогда
		ДатаСобытия = НачалоДня(ВидСообщения.Дата);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда 
		ДатаСобытия = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	тзКлиенты = ПолучитьДанныеСоответствующиеОтбору(ВидСообщения.ХранилищеОтбор.Получить(), РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Клиент"));
	
	// Формирование сообщений
	ТаблицаДляФормирования = Новый ТаблицаЗначений;
	
	ВыбКлиенты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыбКлиенты.Количество() <> 0 Тогда
		
		ПараметрыСообщения = ПолучитьСтруктуруПараметровСообщения();
		ПараметрыСообщения.ВидСообщения	= ВидСообщения;
		ПараметрыСообщения.ДатаОтправки = ДатаСобытия + ОбщегоНазначения.ВремяВСекунды(ВидСообщения.Время);
		ПараметрыСообщения.ДоставитьСообщениеВУказанноеВремя = Истина;
		Рассылка = СоздатьДокументРассылка(ПараметрыСообщения);
		Если Рассылка = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Пока ВыбКлиенты.Следующий() Цикл
			Если тзКлиенты.Найти(ВыбКлиенты.Клиент) <> Неопределено Тогда 
				
				ВыбКИ = ВыбКлиенты.Выбрать();
				ВыбКИ.Следующий();
				
				Если Не ЗначениеЗаполнено(ВыбКИ.КонтактПолучателя) Тогда 
					Продолжить;
				КонецЕсли;
				
				ПараметрыСообщения  = ПолучитьПараметрыСообщения(ВидСообщения, ВыбКИ.Клиент, ВыбКИ.Клиент, 
					ДатаСобытия + ОбщегоНазначения.ВремяВСекунды(ВидСообщения.Время), ВыбКИ.КонтактПолучателя);
				
				Если ПараметрыСообщения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СоздатьАвтоСообщение(ПараметрыСообщения, Рассылка);
					
			КонецЕсли;
		КонецЦикла;
		Если КоличествоСообщенийДокумента(Рассылка) = 0 Тогда
			Рассылка.ПолучитьОбъект().Удалить();
		Иначе
			Рассылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтобратьКлиентовПоВидуСообщения(ВидСообщения)
	
	мсВидыКИ = Новый Массив;
	Если ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мсВидыКИ, ВидыАдресовПочтыДляРассылок());
	ИначеЕсли ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS Тогда 
		мсВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСотовый);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыКИ", мсВидыКИ);
	Запрос.УстановитьПараметр("СпособОтправки", ВидСообщения.СпособОтправки);
		
	Если ВидСообщения.ВидСобытия.ТипСобытия = Перечисления.ТипыСобытий.ДеньРождения Тогда
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата()+ВидСообщения.ЗапасДней*86400);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект КАК Клиент,
		|	КонтактнаяИнформация.Представление КАК КонтактПолучателя,
		|	КонтактнаяИнформация.Вид
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	(&СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.SMS)
		|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьСМС, ЛОЖЬ)
		|			ИЛИ &СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.EMAIL)
		|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьEMAIL, ЛОЖЬ))
		|	И КонтактнаяИнформация.Вид В(&ВидыКИ)
		|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
		|	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Клиенты
		|	И НЕ КонтактнаяИнформация.Объект.ЭтоГруппа
		|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
		|	И КонтактнаяИнформация.Объект.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И МЕСЯЦ(КонтактнаяИнформация.Объект.ДатаРождения) = МЕСЯЦ(&ТекущаяДата)
		|	И ДЕНЬ(КонтактнаяИнформация.Объект.ДатаРождения) = ДЕНЬ(&ТекущаяДата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.Объект.Представление
		|ИТОГИ ПО
		|	Клиент";
	ИначеЕсли ВидСообщения.ВидСобытия.ТипСобытия = Перечисления.ТипыСобытий.НаступлениеКалендарнойДаты Тогда
		
		ДатаСобытия = НачалоДня(ВидСообщения.Дата);
		Если ДатаСобытия < ТекущаяДата() Или НачалоДня(ТекущаяДата()) < (НачалоДня(ДатаСобытия - 2 * 86400)) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект КАК Клиент,
		|	КонтактнаяИнформация.Представление КАК КонтактПолучателя,
		|	КонтактнаяИнформация.Вид
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	(&СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.SMS)
		|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьСМС, ЛОЖЬ)
		|			ИЛИ &СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.EMAIL)
		|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьEMAIL, ЛОЖЬ))
		|	И КонтактнаяИнформация.Вид В(&ВидыКИ)
		|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
		|	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Клиенты
		|	И НЕ КонтактнаяИнформация.Объект.ЭтоГруппа
		|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
		|ИТОГИ ПО
		|	Клиент";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
		
КонецФункции

Функция СоздатьАвтоСообщение(ПараметрыСообщения, Рассылка = Неопределено)

	Если ТипЗнч(ПараметрыСообщения.Источник.Ссылка) = Тип("ДокументСсылка.Заявка")
		И ПараметрыСообщения.Источник.ДатаНачала < ТекущаяДата() 
	Тогда
		Возврат Неопределено; 	
	КонецЕсли;
	
	ВидСообщения = ПараметрыСообщения.ВидСообщения;
	ИмяРегистра = "";
	Если ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL Тогда
		ИмяРегистра = "СообщенияЭлектроннойПочты";
	ИначеЕсли ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS Тогда
		ИмяРегистра = "СообщенияSMS";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сообщения.Рассылка
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК Сообщения
	|ГДЕ
	|	Сообщения.ВидСообщения = &ВидСообщения
	|	И Сообщения.Получатель = &Получатель
	|	И НЕ Сообщения.Рассылка.ПометкаУдаления
	|	{Условие} 
	|";
	
	ТекстЗапроса = 	СтрЗаменить(ТекстЗапроса, "{Условие}", ?(ВидСообщения.ОтправлятьОдноСообщениеВДень, 
					"И НАЧАЛОПЕРИОДА(Сообщения.ДатаОтправки, ДЕНЬ) = &ДатаОтправки",
					"И Сообщения.Источник = &Источник И Сообщения.ДатаОтправки = &ДатаОтправки"));
	
	Запрос.Текст = ТекстЗапроса;
		
	Запрос.УстановитьПараметр("ВидСообщения",	ВидСообщения);
	Запрос.УстановитьПараметр("Получатель"	,	ПараметрыСообщения.Получатель);
	Запрос.УстановитьПараметр("Источник"	,	ПараметрыСообщения.Источник);
	Запрос.УстановитьПараметр("ДатаОтправки",	?(ВидСообщения.ОтправлятьОдноСообщениеВДень,
												НачалоДня(ПараметрыСообщения.ДатаОтправки),
												ПараметрыСообщения.ДатаОтправки));
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		
		Запись = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыСообщения);
		Если Рассылка = Неопределено Тогда
			Запись.Рассылка = СоздатьДокументРассылка(ПараметрыСообщения);
			Если Не ЗначениеЗаполнено(Запись.Рассылка) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Запись.Рассылка = Рассылка;
		КонецЕсли;
		
		Запись.СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.НеОтправлено;
		Запись.ВнутреннийИдентификаторСообщения = Новый УникальныйИдентификатор;
		Запись.Записать();                                            
		
		Возврат Запись;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДобавитьСообщениеВНаборЗаписей(НаборЗаписей, ПараметрыСообщения, Рассылка)
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыСообщения);
	Если Рассылка = Неопределено Тогда
		Запись.Рассылка = СоздатьДокументРассылка(ПараметрыСообщения);
		Рассылка = Запись.Рассылка;
	Иначе
		Запись.Рассылка = Рассылка;
	КонецЕсли;
	
	Запись.СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.НеОтправлено;
	Запись.ВнутреннийИдентификаторСообщения = Новый УникальныйИдентификатор;
	
	Возврат Запись;	
КонецФункции

Функция СоздатьДокументРассылка(ПараметрыСообщения)
	
	Если ПараметрыСообщения.ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL Тогда
		Возврат РассылкаСообщенийEMAIL.СоздатьДокументРассылка(ПараметрыСообщения);
	ИначеЕсли ПараметрыСообщения.ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS Тогда
		Возврат СМС_ФормированиеСообщений.СоздатьДокументРассылка(ПараметрыСообщения);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////
// События документа

// Обработка события документа
//
// Параметры:
//  ВидСообщения	 - 	СправочникСсылка.ВидыСообщенийРассылки - вид сообщения рассылки 
//  ДокументСсылка	 - 	ДокументСсылка - документ.
//
Процедура ОбработатьСобытиеДокумента(ВидСообщения, ДокументСсылка) Экспорт
	
	мсЗаписиКНемедленнойОтправке = Новый Массив;
	
	Отказ = Ложь;
	ДатаОтправки = ВычислитьДатуОтправкиСообщения(ВидСообщения, ДокументСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мсПолучатели = Новый Массив;
	Источник = ДокументСсылка;
	Для Каждого СтрокаПолучатель Из ВидСообщения.Получатели Цикл
		Если СтрокаПолучатель.ИмяПоля = "Клиент" и РаботаСКлиентамиПереопределяемый.ЭтоГрупповаяЗаявка(ДокументСсылка) Тогда
			Для Каждого СтрокаГрупповойКлиент Из Источник.Клиенты Цикл
				Результат = СтрокаГрупповойКлиент.Клиент;
				Если мсПолучатели.Найти(Результат) = Неопределено Тогда 
					мсПолучатели.Добавить(Результат);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = "";
			Попытка
				Выполнить("Результат = Источник."+СтрокаПолучатель.ИмяРеквизита);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			Если мсПолучатели.Найти(Результат) = Неопределено Тогда 
				мсПолучатели.Добавить(Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	мсВидыКИ = Новый Массив;
	Если ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мсВидыКИ, ВидыАдресовПочтыДляРассылок());
	ИначеЕсли ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS Тогда 
		мсВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСотовый);
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидыКИ", мсВидыКИ);
	Запрос.УстановитьПараметр("Клиент", мсПолучатели);
	Запрос.УстановитьПараметр("СпособОтправки", ВидСообщения.СпособОтправки); 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Клиент,
	|	КонтактнаяИнформация.Представление КАК КонтактПолучателя,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект В(&Клиент)
	|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
	|	И КонтактнаяИнформация.Вид В(&ВидыКИ)
	|	И НЕ КонтактнаяИнформация.Объект.ЭтоГруппа
	|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
	|	И (&СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.SMS)
	|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьСМС, ЛОЖЬ)
	|			ИЛИ &СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.EMAIL)
	|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьEMAIL, ЛОЖЬ))
	|ИТОГИ ПО
	|	Клиент";
	РезультатЗапроса = Запрос.Выполнить();
	
	тзКлиенты = ПолучитьДанныеСоответствующиеОтбору(ВидСообщения.ХранилищеОтбор.Получить(), РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Клиент"));
	
	// Формирование сообщений
	ТаблицаДляФормирования = Новый ТаблицаЗначений;
	
	ВыбКлиенты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыбКлиенты.Количество() <> 0 Тогда
		
		ПараметрыСообщения = ПолучитьСтруктуруПараметровСообщения();
		ПараметрыСообщения.ВидСообщения	= ВидСообщения;
		ПараметрыСообщения.ДатаОтправки = ДатаОтправки;
		ПараметрыСообщения.ДоставитьСообщениеВУказанноеВремя = Истина;
		Рассылка = СоздатьДокументРассылка(ПараметрыСообщения);
		Если Рассылка = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Пока ВыбКлиенты.Следующий() Цикл

			Если тзКлиенты.Найти(ВыбКлиенты.Клиент) <> Неопределено Тогда  
				
				ВыбКИ = ВыбКлиенты.Выбрать();
				ВыбКИ.Следующий();
				
				Если Не ЗначениеЗаполнено(ВыбКИ.КонтактПолучателя) Тогда 
					Продолжить;
				КонецЕсли;
				
				ПараметрыСообщения = ПолучитьПараметрыСообщения(ВидСообщения, ВыбКИ.Клиент, ДокументСсылка, ДатаОтправки, ВыбКИ.КонтактПолучателя);
				Если ПараметрыСообщения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = СоздатьАвтоСообщение(ПараметрыСообщения, Рассылка);
				
				Если Запись <> Неопределено
					И ВидСообщения.ОтправлятьБезПодтверждения 
				Тогда
					мсЗаписиКНемедленнойОтправке.Добавить(Запись);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		Если КоличествоСообщенийДокумента(Рассылка) = 0 Тогда
			Рассылка.ПолучитьОбъект().Удалить();
		Иначе
			Рассылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
			Если ВидСообщения.ОтправлятьБезПодтверждения Тогда
				Рассылка.ПолучитьОбъект().ОтправитьНеотправленныеСообщения();		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСообщенияРассылкиОтмененногоДокумента(ДокументСсылка)
	
	РегистрыСообщений = Новый Массив;
	РегистрыСообщений.Добавить("СообщенияЭлектроннойПочты");
	РегистрыСообщений.Добавить("СообщенияSMS");
	
	Для Каждого ИмяРегистра Из РегистрыСообщений Цикл
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Источник.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		
		ДокументыРассылок = Новый Массив;
		
		мОбрИнд = НаборЗаписей.Количество()-1;
		Для сч = 0 по мОбрИнд Цикл
			
			Если НаборЗаписей[мОбрИнд-сч].СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.НеОтправлено Тогда
				ДокументыРассылок.Добавить(НаборЗаписей[мОбрИнд-сч].Рассылка);
				НаборЗаписей.Удалить(мОбрИнд-сч);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Если ДокументыРассылок.Количество() <> 0 Тогда
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			УстановитьПривилегированныйРежим(Истина);
			Для Каждого ДокументРассылки Из ДокументыРассылок Цикл
				НаборЗаписей.Отбор.Рассылка.Установить(ДокументРассылки);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					ДокументРассылки.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСообщенияРассылкиЗаявкиСоСменойДатыЗаписи(Заявка)
	
	НаборЗаписей = РегистрыСведений.СообщенияSMS.СоздатьНаборЗаписей(); // Актуально только для SMS.
	НаборЗаписей.Отбор.Источник.Установить(Заявка);
	НаборЗаписей.Отбор.СтатусОтправки.Установить(Перечисления.СтатусыОтправкиСообщений.НеОтправлено);
	НаборЗаписей.Прочитать();
	
	ОбновленныеРассылки = Новый Массив;
	КоличествоИзменненыхЗаписей = 0;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.Рассылка.ДоставитьСообщениеВУказанноеВремя 
			И Запись.ВидСообщения.Дата <> Неопределено 
		Тогда
			
			Отказ = Ложь;
			ДатаОтправки = ВычислитьДатуОтправкиСообщения(Запись.ВидСообщения, Заявка, Отказ);
			
			Если Отказ Тогда
				Продолжить;	
			КонецЕсли;
			
			Если Запись.ДатаОтправки <> ДатаОтправки Тогда
				Запись.ДатаОтправки = ДатаОтправки;
				КоличествоИзменненыхЗаписей = КоличествоИзменненыхЗаписей + 1;
			КонецЕсли;
			
			Если ОбновленныеРассылки.Найти(Запись.Рассылка) = Неопределено Тогда
				Если Запись.Рассылка.ДатаОтправки <> ДатаОтправки Тогда
					РассылкаОбъект = Запись.Рассылка.ПолучитьОбъект();
					РассылкаОбъект.ДатаОтправки = ДатаОтправки;
					РассылкаОбъект.ДополнительныеСвойства.Вставить("ЗаписьБезОбработки");
					РассылкаОбъект.Записать();
				КонецЕсли;
				
				ОбновленныеРассылки.Добавить(Запись.Рассылка);
			КонецЕсли;
			
		КонецЕсли	
	КонецЦикла;
	
	Если КоличествоИзменненыхЗаписей > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
		
	Возврат;
	
КонецПроцедуры

// Создать автосообщения, актуальные для документа.
//
// Параметры:
//  ДокументСсылка	 - 	ДокументСсылка - документ.
//
Процедура СформироватьСообщенияПоДокументу(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выб = ПолучитьРезультатВыборкиВидовСообщенийПоДокументу(ДокументСсылка);	
	Пока Выб.Следующий() Цикл
		
		тзДокументы = ПолучитьДанныеСоответствующиеОтбору(Выб.ВидСобытия.ХранилищеОтбор.Получить(), ДокументСсылка);
		Если тзДокументы.Количество() = 0 Тогда 
			Продолжить;	
		КонецЕсли;
		
		ОбработатьСобытиеДокумента(Выб.ВидСообщения, ДокументСсылка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьДатуОтправкиСообщения(ВидСообщения, ДокументСсылка, Отказ)
	
	Если ВидСообщения.Дата = Неопределено 
		Или ВидСообщения.Дата = ""
		//Или ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL 
	Тогда
		ДатаСобытия = ТекущаяДата();
		ДатаОтправки = НачалоДня(ТекущаяДата());
	ИначеЕсли ВидСообщения.Дата = "Дата" Тогда
		ДатаСобытия = ДокументСсылка.Дата;
		ДатаОтправки = ОбработатьДатаОтправки(ДокументСсылка.Дата, ВидСообщения.ЗапасДней * 86400 + ОбщегоНазначения.ВремяВСекунды(ВидСообщения.Время));
	Иначе
		СтрокаДаты = ВидСообщения.ВидСобытия.ДополнительныеДаты.Найти(ВидСообщения.Дата,"Синоним");
		Если СтрокаДаты = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(	"Сообщение SMS не сформировано 
												|Для вида событий SMS """ + ВидСообщения.ВидСобытия 
											+   """ не найдена строка даты с синонимом " + ВидСообщения.Дата, Отказ);
			Возврат Неопределено;
		Иначе
			Результат = "";
			Источник = ДокументСсылка;
			Попытка
				Выполнить("Результат=" + СтрокаДаты.Выражение);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
				Возврат Неопределено;
			КонецПопытки;
			ДатаСобытия	= Результат;
			ДатаОтправки = ОбработатьДатаОтправки(ДатаСобытия, ВидСообщения.ЗапасДней * 86400 + ОбщегоНазначения.ВремяВСекунды(ВидСообщения.Время));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаОтправки;
	
КонецФункции

// Вычисляет дату плановой передачи оператору рассылки сообщения рассылки
//
// Параметры:
//  ДатаСобытия			 - Дата	 - дата события
//  СмещениеВСекундах	 - Число - упреждение отправки.
// 
// Возвращаемое значение:
//  Дата.
//
Функция ОбработатьДатаОтправки(ДатаСобытия, СмещениеВСекундах) Экспорт
	
	// Получаем период тишины
	НастройкиРассылок =  РегистрыСведений.НастройкиРассылок.Получить();
	
	ДатаОтправки = ДатаСобытия - СмещениеВСекундах;
	
	Если НастройкиРассылок.НачалоНочногоПериода = НастройкиРассылок.КонецНочногоПериода Тогда
		Возврат ДатаОтправки;
	ИначеЕсли НастройкиРассылок.НачалоНочногоПериода > НастройкиРассылок.КонецНочногоПериода Тогда	
		
		// Определили правильный интервал режима тишины
		ВремяДатаОтправки = '00010101' + (ДатаОтправки - НачалоДня(ДатаОтправки));
		Если ВремяДатаОтправки >= НастройкиРассылок.НачалоНочногоПериода  Тогда
			ДатаС = НачалоДня(ДатаОтправки) + ОбщегоНазначения.ВремяВСекунды(НастройкиРассылок.НачалоНочногоПериода);
			ДатаПО = НачалоДня(ДатаОтправки) + 86400 + ОбщегоНазначения.ВремяВСекунды(НастройкиРассылок.КонецНочногоПериода);
		ИначеЕсли ВремяДатаОтправки <= НастройкиРассылок.КонецНочногоПериода Тогда	
		    ДатаС = НачалоДня(ДатаОтправки) - 86400 + ОбщегоНазначения.ВремяВСекунды(НастройкиРассылок.НачалоНочногоПериода);
			ДатаПО = НачалоДня(ДатаОтправки) + ОбщегоНазначения.ВремяВСекунды(НастройкиРассылок.КонецНочногоПериода);
		Иначе
			Возврат ДатаОтправки;
		КонецЕсли; 
	Иначе	
		ДатаС = НачалоДня(ДатаОтправки) + ОбщегоНазначения.ВремяВСекунды(НастройкиРассылок.НачалоНочногоПериода);
		ДатаПО = НачалоДня(ДатаОтправки) + ОбщегоНазначения.ВремяВСекунды(НастройкиРассылок.КонецНочногоПериода);
	КонецЕсли; 
	
	Если ДатаОтправки > ДатаС И ДатаОтправки < ДатаПО Тогда
	    // Попали в интервал тишины
		РеальнаяДатаОтправки = ДатаС;
		Возврат РеальнаяДатаОтправки;
	Иначе
	    Возврат ДатаОтправки;
	КонецЕсли; 
	
КонецФункции

////////////////////////////////////////////////////////////////////////
// Подписки на события

// Обработчик события ПередЗаписью наборов записей регистров рассылки.
//
// Параметры:
//  Источник	 - РегистрСведенийНаборЗаписей.СообщенияSMS	 - сообщения.
//  Отказ		 - Булево	 - отмена записи.
//  Замещение	 - Булево	 - параметр события записи замещение в регистре.
//
Процедура СообщенияРассылкиПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Для Каждого Запись Из Источник Цикл
		
		Если Не ЗначениеЗаполнено(Запись.ВнутреннийИдентификаторСообщения) Тогда
			
			Запись.ВнутреннийИдентификаторСообщения = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Запись.СтатусОтправки) Тогда
			Запись.СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.НеОтправлено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события ПередЗаписью документов-оснований рассылки.
//
// Параметры:
//  Источник		 - ДокументОбъект			 - документ.
//  Отказ			 - Булево					 - отмена записи.
//  РежимЗаписи		 - РежимЗаписиДокумента		 - параметр события
//  РежимПроведения	 - РежимПроведенияДокумента	 - параметр события.
//
Процедура СобытияДокументов_ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Ложь Тогда Источник = Документы.Заявка.СоздатьДокумент() КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Заявка") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый",Источник.ЭтоНовый());
	
		Если Не Источник.ЭтоНовый() Тогда
			// Для документов "Заявка" отслеживаем пометку на удаление или Отмену как повод удалить СМС и изменение даты записи
			ТипСостоянияОтменена = Перечисления.ТипыСостоянийЗаявок.Отменена;
			Если Источник.ПометкаУдаления И Не Источник.Ссылка.ПометкаУдаления
				Или Источник.Состояние.ТипСостояния = ТипСостоянияОтменена И Не Источник.Ссылка.Состояние.ТипСостояния = ТипСостоянияОтменена
			Тогда
				Источник.ДополнительныеСвойства.Вставить("ОтменаДокумента", Истина);
				
			ИначеЕсли Источник.ДатаНачала <> Источник.Ссылка.ДатаНачала Тогда
				Источник.ДополнительныеСвойства.Вставить("СменаДняЗаявки", Истина);
			КонецЕсли;
			
			Если Не Источник.ПометкаУдаления И Источник.Ссылка.ПометкаУдаления Тогда
				Источник.ДополнительныеСвойства.Вставить("УдалениеПометки", Истина);
			КонецЕсли;
			
			Источник.ДополнительныеСвойства.Вставить("КлиентыЗаявкиПрошлойВерсии", ПолучитьАдресатовЗаявки(Источник.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи документов-оснований рассылки.
//
// Параметры:
//  Источник		 - ДокументОбъект			 - документ.
//  Отказ			 - Булево					 - отмена записи.
//
Процедура СобытияДокументов_ПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И Источник.ДополнительныеСвойства.ЭтоНовый = Истина
	Тогда
		СформироватьСообщенияПоДокументу(Источник.Ссылка);
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("ОтменаДокумента") Тогда
		ОбработатьСообщенияРассылкиОтмененногоДокумента(Источник.Ссылка);
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("СменаДняЗаявки") Тогда
		ОбработатьСообщенияРассылкиЗаявкиСоСменойДатыЗаписи(Источник.Ссылка);
	КонецЕсли;
	
	Если Не (Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый = Истина) 
		И Не Источник.ДополнительныеСвойства.Свойство("ОтменаДокумента") И Не Источник.ДополнительныеСвойства.Свойство("УдалениеПометки")
		И ТипЗнч(Источник) = Тип("ДокументОбъект.Заявка")
		И Источник.ДополнительныеСвойства.Свойство("КлиентыЗаявкиПрошлойВерсии")
	Тогда
		АктуализироватьПолучателейИТекст(Источник.Ссылка, Источник.ДополнительныеСвойства.КлиентыЗаявкиПрошлойВерсии);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Прочие процедуры работы с сообщениями

Функция КоличествоСообщенийДокумента(ДокументСсылка = Неопределено, НаборЗаписей = Неопределено, ТолькоНеотправленные = Ложь)
	
	Результат = 0;
	
	Если НаборЗаписей = Неопределено Тогда
		
		ИмяРегистра = ПолучитьИмяРегистраПоРассылке(ДокументСсылка);
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Рассылка.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		
	КонецЕсли;
	
	Если ТолькоНеотправленные Тогда
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.НеОтправлено Тогда			
				Результат = Результат + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат = НаборЗаписей.Количество();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровСообщения()
	
	Возврат Новый Структура(
		"ВидСообщения,
		|ДоставитьСообщениеВУказанноеВремя,
		|ДатаОтправки,
		|ДатаСоздания,
		|Получатель,
		|Источник,
		|КонтактПолучателя,
		|Текст,
		|ШаблонСообщения");
	
КонецФункции
	
// Дает имя регистра по рассылке
//
// Параметры:
//  ДокументРассылки - ДокументСсылка.Рассылка - документ рассылки.
// 
// Возвращаемое значение:
//  Строка - имя региста хранения сообщений рассылки.
//
Функция ПолучитьИмяРегистраПоРассылке(ДокументРассылки) Экспорт 
	
	Если ТипЗнч(ДокументРассылки) = Тип("ДокументСсылка.РассылкаПисемEmail") Тогда
		Возврат "СообщенияЭлектроннойПочты";
	ИначеЕсли ТипЗнч(ДокументРассылки) = Тип("ДокументСсылка.Рассылка") Тогда
		Возврат "СообщенияSMS";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Автоматическая отправка сообщений
//
Процедура АвтоматическаяОтправкаСообщений() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СМС_ФормированиеСообщений.ОтправитьНеОтправленныеСМС();
	РассылкаСообщенийEMAIL.ОтправитьНеОтправленныеПисьма();

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Формирование автоматических сообщений
//
Процедура ФормированиеАвтоСообщений() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		ВыполнитьОбработкуИФормированиеАвтоматическихСообщений();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьПараметрыСообщения(ВидСообщения, Клиент, Источник, ДатаОтправки = Неопределено, КонтактПолучателя = Неопределено)
	
	Если ДатаОтправки = Неопределено Тогда
		Отказ = Ложь;
		ДатаОтправки = ВычислитьДатуОтправкиСообщения(ВидСообщения, Источник, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Если КонтактПолучателя = Неопределено Тогда	
		КонтактПолучателя = ПолучитьКонтактПолучателяРассылки(Клиент, ВидСообщения);
		
		Если КонтактПолучателя = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрыСообщения = ПолучитьСтруктуруПараметровСообщения();
	ПараметрыСообщения.ВидСообщения	= ВидСообщения;
	ПараметрыСообщения.ДатаОтправки = ДатаОтправки;
	ПараметрыСообщения.ДатаСоздания = ТекущаяДата();
	ПараметрыСообщения.Получатель	= Клиент;
	ПараметрыСообщения.Источник		= Источник;
	ПараметрыСообщения.КонтактПолучателя = КонтактПолучателя;
	
	Если ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL Тогда
		ПараметрыСообщения.ШаблонСообщения = ВидСообщения.ШаблонEMAIL;
	ИначеЕсли ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS Тогда
		ПараметрыСообщения.КонтактПолучателя = СМС_ФормированиеСообщений.НормализоватьСотовыйТелефон(КонтактПолучателя);
		ПараметрыСообщения.ШаблонСообщения = ВидСообщения.ШаблонТекста;
		ПараметрыСообщения.Текст = СМС_ФормированиеСообщений.ВычислитьТекстСообщения(ВидСообщения, ПараметрыСообщения);
	КонецЕсли;
	
	Возврат ПараметрыСообщения;
	
КонецФункции

Функция ПолучитьКонтактПолучателяРассылки(Клиент, ВидСообщения)
	
	КонтактПолучателя = Неопределено;
	
	мсВидыКИ = Новый Массив;
	Если ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мсВидыКИ, ВидыАдресовПочтыДляРассылок());
	ИначеЕсли ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS Тогда 
		мсВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСотовый);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидыКИ", мсВидыКИ);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("СпособОтправки", ВидСообщения.СпособОтправки); 
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Объект КАК Клиент,
	|	КонтактнаяИнформация.Представление КАК КонтактПолучателя,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Клиент
	|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
	|	И КонтактнаяИнформация.Вид В(&ВидыКИ)
	|	И НЕ КонтактнаяИнформация.Объект.ЭтоГруппа
	|	И НЕ КонтактнаяИнформация.Объект.ПометкаУдаления
	|	И (&СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.SMS)
	|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьСМС, ЛОЖЬ)
	|			ИЛИ &СпособОтправки = ЗНАЧЕНИЕ(Перечисление.СпособыОтправкиСообщений.EMAIL)
	|				И НЕ ЕСТЬNULL(КонтактнаяИнформация.Объект.НеОтправлятьEMAIL, ЛОЖЬ))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.КонтактПолучателя) Тогда
			КонтактПолучателя = Выборка.КонтактПолучателя;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтактПолучателя;
	
КонецФункции

Процедура АктуализироватьПолучателейИТекст(Заявка, КлиентыЗаявкиПрошлойВерсии)
	
	Выб = ПолучитьРезультатВыборкиВидовСообщенийПоДокументу(Заявка);
	Пока Выб.Следующий() Цикл
		
		тзДокументы = ПолучитьДанныеСоответствующиеОтбору(Выб.ВидСобытия.ХранилищеОтбор.Получить(), Заявка);
		
		ЭтоSMS = Выб.ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS;
	
		НаборЗаписей = ПолучитьНаборЗаписейСообщенийВидаСообщения(Выб.ВидСообщения);
		НаборЗаписей.Отбор.Источник.Установить(Заявка);
		
		
		НаборЗаписей.Отбор.ВидСообщения.Установить(Выб.ВидСообщения);
		
		Рассылка = Неопределено;

		Если Заявка.Состояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена 
			Или тзДокументы.Количество() = 0 
		Тогда
			НаборЗаписей.Отбор.СтатусОтправки.Установить(Перечисления.СтатусыОтправкиСообщений.НеОтправлено);
			
			НаборЗаписей.Прочитать();
			ИсходныйНаборЗаписей = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если тзДокументы.Количество() = 0 Тогда  
				// Определение документа рассылки
				Для Каждого СообщениеКлиента Из ИсходныйНаборЗаписей Цикл
					Если ЗначениеЗаполнено(СообщениеКлиента.Рассылка)
						И Не СообщениеКлиента.Рассылка.ПометкаУдаления
					Тогда
						Рассылка = СообщениеКлиента.Рассылка;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;			
		Иначе	
			НаборЗаписей.Прочитать();
			ИсходныйНаборЗаписей = НаборЗаписей.Выгрузить();
			НаборЗаписейТаблица = ИсходныйНаборЗаписей.Скопировать();
			
			АдресатыЗаявки = ПолучитьАдресатовЗаявки(Заявка);
			
			// Определение документа рассылки
			Для Каждого СообщениеКлиента Из НаборЗаписейТаблица Цикл
				Если ЗначениеЗаполнено(СообщениеКлиента.Рассылка)
					И Не СообщениеКлиента.Рассылка.ПометкаУдаления
				Тогда
					Рассылка = СообщениеКлиента.Рассылка;
				КонецЕсли;
			КонецЦикла;
			
			// Проверка получателей на соответствие отбору в Виде сообщения рассылки.
			тзКлиенты = ПолучитьДанныеСоответствующиеОтбору(Выб.ВидСообщения.ХранилищеОтбор.Получить(), АдресатыЗаявки);
			
			// Обход текущих клиентов заявки.
			Для Каждого Адресат Из АдресатыЗаявки Цикл
				
				СообщенияКлиента = НаборЗаписейТаблица.НайтиСтроки(Новый Структура("Получатель", Адресат)); // Ищем ранее созданное сообщение по клиенту.
				
				Если СообщенияКлиента.Количество() <> 0 Тогда
					Сч = 0;
					Для Каждого СообщениеКлиента Из СообщенияКлиента Цикл
						Сч = Сч + 1;
						Если Сч = 1 Тогда
							Если СообщениеКлиента.СтатусОтправки = Перечисления.СтатусыОтправкиСообщений.Отправлена Тогда
								// Уже отправили сообщение клиенту. Ничего с ним не делаем, остается как есть.
								Продолжить;
							ИначеЕсли ЭтоSMS Тогда
								// Актуализируем текст, если это SMS.
								// Если получатель соответствует отбору в Виде сообщения рассылки, тогда для него актуализируем текст.
								// В ином случае сообщение удаляется.
								Если тзКлиенты.Найти(Адресат) <> Неопределено Тогда									 
									ПараметрыСообщения = ПолучитьСтруктуруПараметровСообщения();
									ЗаполнитьЗначенияСвойств(ПараметрыСообщения, СообщениеКлиента);
									СообщениеКлиента.Текст = СМС_ФормированиеСообщений.ВычислитьТекстСообщения(Выб.ВидСообщения, ПараметрыСообщения);
								Иначе
									НаборЗаписейТаблица.Удалить(СообщениеКлиента);
								КонецЕсли;
							КонецЕсли;
						Иначе
							// Если как-либо (например, вручную) сделали 2 сообщения по клиенту в рассылке, удаляем все, кроме первого.
							НаборЗаписейТаблица.Удалить(СообщениеКлиента);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// По получателю из заявки нет старого сообщения. Создаем сообщение только если получатель соответствует отбору в Виде сообщения рассылки.
					// И клиент еще не пришел по записи.
					мсСостоянияЗаявкиДоПродажи = УправлениеЗаявками.СостоянияЗаявкиДоПриходаКлиента();
					Если тзКлиенты.Найти(Адресат) <> Неопределено
						И мсСостоянияЗаявкиДоПродажи.Найти(Заявка.Состояние) <> Неопределено
					Тогда
						// Не создаем сообщение, если клиент в заявке не новый, и отключена настройка формирования сообщений по старым клиентам при перезаписи заявки.
						Если Не Выб.ВидСообщения.ФормироватьСообщениеПриПерезаписиДокумента
							И КлиентыЗаявкиПрошлойВерсии.Найти(Адресат) <> Неопределено
						Тогда 
							Продолжить;
						КонецЕсли;
						
						ДобавитьСообщениеПоЗаявкеВНаборЗаписей(НаборЗаписейТаблица, Адресат, Выб.ВидСообщения, Заявка.Ссылка, Рассылка, Новый Массив);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Обход клиентов предыдущей версии заявки на предмет необходимости удаления неактуальных сообщений.
			НеактуальныеАдресатыНабораЗаписей = Новый Массив;
			Для Каждого СообщениеКлиента Из НаборЗаписей Цикл
				Если АдресатыЗаявки.Найти(СообщениеКлиента.Получатель) = Неопределено
					И НеактуальныеАдресатыНабораЗаписей.Найти(СообщениеКлиента.Получатель) = Неопределено
				Тогда
					НеактуальныеАдресатыНабораЗаписей.Добавить(СообщениеКлиента.Получатель);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Адресат Из НеактуальныеАдресатыНабораЗаписей Цикл
				Если АдресатыЗаявки.Найти(Адресат) = Неопределено Тогда
					// Удалили клиента. Удаляем его неотправленные сообщения.
					СообщенияКлиента = НаборЗаписейТаблица.НайтиСтроки(Новый Структура("Получатель", Адресат)); // Ищем ранее созданное сообщение по клиенту.
					Для Каждого СообщениеКлиента Из СообщенияКлиента Цикл
						НаборЗаписейТаблица.Удалить(СообщениеКлиента);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Загрузить(НаборЗаписейТаблица);
		КонецЕсли;
		
		// Проверяем, что получили разный список SMS, только в этом случае записываем набор записей.
		ПолученныйНаборЗаписей = НаборЗаписей.Выгрузить();
		ИсходныйНаборЗаписей.Колонки.Удалить(	"ВнутреннийИдентификаторСообщения");
		ПолученныйНаборЗаписей.Колонки.Удалить(	"ВнутреннийИдентификаторСообщения");
		ИсходныйНаборЗаписей.Колонки.Удалить(	"ДатаСоздания");
		ПолученныйНаборЗаписей.Колонки.Удалить(	"ДатаСоздания");
		Если Не ОбщегоНазначения.СравнитьТаблицыНаборовЗаписей(ИсходныйНаборЗаписей, ПолученныйНаборЗаписей) Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		// Отправка неотправленных. 
		НаборЗаписей.Отбор.СтатусОтправки.Установить(Перечисления.СтатусыОтправкиСообщений.НеОтправлено);
		НаборЗаписей.Прочитать();
		Если Рассылка <> Неопределено Тогда
			Если НаборЗаписей.Количество() <> 0
				И Выб.ВидСообщения.ОтправлятьБезПодтверждения
			Тогда
				Рассылка.ПолучитьОбъект().ОтправитьНеотправленныеСообщения();
				
			ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
				// Проверим, остались ли в рассылке сообщения. Если нет - идёт пометка на удаление. Не обязательное действие.
				НаборЗаписей = ПолучитьНаборЗаписейСообщенийВидаСообщения(Выб.ВидСообщения);
				НаборЗаписей.Отбор.Рассылка.Установить(Рассылка);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					Рассылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаборЗаписейСообщенийВидаСообщения(ВидСообщения)
	
	Если ВидСообщения.СпособОтправки = Перечисления.СпособыОтправкиСообщений.EMAIL Тогда
		Возврат РегистрыСведений.СообщенияЭлектроннойПочты.СоздатьНаборЗаписей();
	Иначе
		Возврат РегистрыСведений.СообщенияSMS.СоздатьНаборЗаписей();
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСообщениеПоЗаявкеВНаборЗаписей(НаборЗаписей, Клиент, ВидСообщения, Заявка, Рассылка, мсОбработанные)
	
	Если мсОбработанные.Найти(Клиент) = Неопределено Тогда
		ПараметрыСообщения = ПолучитьПараметрыСообщения(ВидСообщения, Клиент, Заявка);				
		Если ПараметрыСообщения <> Неопределено Тогда
			Запись = ДобавитьСообщениеВНаборЗаписей(НаборЗаписей, ПараметрыСообщения, Рассылка);
		КонецЕсли;
		мсОбработанные.Добавить(Клиент);
	КонецЕсли;
	
КонецПроцедуры

// Определяет, что это рассылка на основе Заявки.
//
// Параметры:
//  Рассылка - ДокументСсылка.Рассылка - документ рассылки. 
// 
// Возвращаемое значение:
//  Булево. 
//
Функция ЭтоРассылкаНаОсновеЗаявки(Рассылка) Экспорт

	НаборЗаписей = РегистрыСведений.СообщенияSMS.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рассылка.Установить(Рассылка);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если ТипЗнч(Запись.Источник) = Тип("ДокументСсылка.Заявка") Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определяет максимальное упреждение отправки СМСОператору
// 
// Возвращаемое значение:
//  Число - количество часов.
//
Функция ПолучитьМаксимальноеУпреждениеОтправкиСМСОператору() Экспорт 
	НастройкиРассылок = РегистрыСведений.НастройкиРассылок.СоздатьНаборЗаписей();
	НастройкиРассылок.Прочитать();
	
	Если НастройкиРассылок.Количество() = 0 Тогда
		Если ПравоДоступа("Изменение",Метаданные.РегистрыСведений.НастройкиРассылок,ПараметрыСеанса.ТекущийПользователь) Тогда
			мЗапись = РегистрыСведений.НастройкиРассылок.СоздатьМенеджерЗаписи();
			мЗапись.МаксимальноеУпреждениеОтправкиСМСОператору = 12;
			мЗапись.Записать();
		КонецЕсли;
		МаксимальноеУпреждениеОтправкиСМСОператору = 12;
	Иначе
		Если НЕ ЗначениеЗаполнено(НастройкиРассылок[0].МаксимальноеУпреждениеОтправкиСМСОператору) Тогда
			Если ПравоДоступа("Изменение",Метаданные.РегистрыСведений.НастройкиРассылок,ПараметрыСеанса.ТекущийПользователь) Тогда 
				НастройкиРассылок[0].МаксимальноеУпреждениеОтправкиСМСОператору = 12;
				НастройкиРассылок.Записать();
			КонецЕсли;
		Иначе
			МаксимальноеУпреждениеОтправкиСМСОператору = НастройкиРассылок[0].МаксимальноеУпреждениеОтправкиСМСОператору;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат МаксимальноеУпреждениеОтправкиСМСОператору;	
КонецФункции

Функция ПолучитьРезультатВыборкиВидовСообщенийПоДокументу(ДокументСсылка)
	
	мсСпособыОтправки = Новый Массив;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Заявка") Тогда
		Если Не ДокументСсылка.Клиент.НеОтправлятьСМС Тогда
			мсСпособыОтправки.Добавить(Перечисления.СпособыОтправкиСообщений.SMS);
		КонецЕсли;
		Если Не ДокументСсылка.Клиент.НеОтправлятьEMAIL Тогда
			мсСпособыОтправки.Добавить(Перечисления.СпособыОтправкиСообщений.EMAIL);
		КонецЕсли;
	Иначе
		мсСпособыОтправки.Добавить(Перечисления.СпособыОтправкиСообщений.EMAIL);
		мсСпособыОтправки.Добавить(Перечисления.СпособыОтправкиСообщений.SMS);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СобытиеДокумента", Перечисления.СобытияДокументов.ЗаписьНового);
	Запрос.УстановитьПараметр("ТипСобытия"		, Перечисления.ТипыСобытий.Документ);
	Запрос.УстановитьПараметр("ТипИсточника"	, Документы[ДокументСсылка.Метаданные().Имя].ПустаяСсылка());
	Запрос.УстановитьПараметр("СпособыОтправки"	, мсСпособыОтправки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСообщенийРассылки.Ссылка КАК ВидСообщения,
	|	ВидыСообщенийРассылки.ВидСобытия
	|ИЗ
	|	Справочник.ВидыСообщенийРассылки КАК ВидыСообщенийРассылки
	|ГДЕ
	|	ВидыСообщенийРассылки.АвтоматическиФормироватьСообщения
	|	И НЕ ВидыСообщенийРассылки.ПометкаУдаления
	|	И НЕ ВидыСообщенийРассылки.ВидСобытия.ПометкаУдаления
	|	И ВидыСообщенийРассылки.ВидСобытия.СобытиеДокумента = &СобытиеДокумента
	|	И ВидыСообщенийРассылки.ВидСобытия.ТипСобытия = &ТипСобытия
	|	И ВидыСообщенийРассылки.ВидСобытия.ТипИсточника = &ТипИсточника
	|	И ВидыСообщенийРассылки.СпособОтправки В(&СпособыОтправки)";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ПолучитьДанныеСоответствующиеОтбору(НастройкиОтбор, Значение)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	// Подготовка компоновщика макета компоновки данных.
	Если ТипЗнч(Значение) = Тип("Массив") Тогда 
		СхемаКомпоновкиДанных = Справочники.ВидыСообщенийРассылки.ПолучитьМакет("ПоляШаблона");
		ИмяПоляКомпоновкиДанных = "Получатель";
		ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.Заявка") Тогда
		СхемаКомпоновкиДанных = Справочники.ВидыСобытий.ПолучитьМакет("ПоляШаблонаДокументаЗаявка");
		ИмяПоляКомпоновкиДанных = "Документ"; 
		ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Отбор компоновщика настроек.
	Если НастройкиОтбор <> Неопределено Тогда
		ОбщегоНазначенияСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, НастройкиОтбор.Отбор);
	КонецЕсли;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
	Отбор.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Отбор.ЛевоеЗначение		= ПолеОтбора;
	Отбор.ПравоеЗначение	= Значение;
	Отбор.ВидСравнения		= ВидСравненияВОтборе;
	Отбор.Использование		= Истина;
		
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Выполнение запроса
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПолучитьАдресатовЗаявки(Заявка)
	
	Результат = РаботаСКлиентамиПереопределяемый.ПолучитьКлиентовЗаявки(Заявка);
	
	Возврат Результат;
	
КонецФункции

Функция ВидыАдресовПочтыДляРассылок()
	
	мсВидыКИ = Новый Массив;
	
	Выб = Справочники.ВидыКонтактнойИнформации.Выбрать(,, Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
	Пока Выб.Следующий() Цикл
		Если Выб.Предопределенный Или Не Выб.ПометкаУдаления Тогда
			мсВидыКИ.Добавить(Выб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсВидыКИ;
	
КонецФункции
