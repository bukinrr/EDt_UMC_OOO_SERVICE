#Область ПрограммныйИнтерфейс

/////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОСЛЕДОВАТЕЛЬНОСТЯМИ ДОКУМЕНТОВ

// Определяет необходимость сдвига границы последовательности партонного учета
//
// Параметры:
//  ДокументМоментВремени	 - МоментВремени - момент времени.
//  БылиОшибкиСписания		 - Булево		 - были ошибки списания
//  НовоеЗначениеГраницы	 - МоментВремени - новое значение границы
// 
// Возвращаемое значение:
//  Булево
//
Функция ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, БылиОшибкиСписания, НовоеЗначениеГраницы)
	
	ГраницаМоментВремени = Последовательности.ПартионныйУчет.ПолучитьГраницу();
	Если ЗначениеЗаполнено(ГраницаМоментВремени.Ссылка)
		И ЗначениеЗаполнено(ГраницаМоментВремени.Ссылка.Дата)
	Тогда 
		// При неопределенных обстоятельствах дата границы может сдвигаться 
		// на 1 секунду меньше даты момента времени документа с коллапсом логики.
		ГраницаМоментВремени = ГраницаМоментВремени.Ссылка.МоментВремени();
	КонецЕсли;
	
	Если Не БылиОшибкиСписания Тогда
		// Границу последовательности можно сдвигать вперед только если между границей
		// и документом нет других документов в последовательности.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Последовательность.Регистратор
		|ИЗ
		|	Последовательность.ПартионныйУчет КАК Последовательность
		|ГДЕ
		|	Последовательность.МоментВремени > &Граница
		|	И Последовательность.МоментВремени < &Документ ";
		
		Запрос.УстановитьПараметр("Граница", ГраницаМоментВремени);
		Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);
		
		Возврат Запрос.Выполнить().Пустой();
		
	ИначеЕсли БылиОшибкиСписания И ДокументМоментВремени.Сравнить(ГраницаМоментВремени) <= 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Последовательность.МоментВремени
		               |ИЗ
		               |	Последовательность.ПартионныйУчет КАК Последовательность
		               |ГДЕ
		               |	Последовательность.МоментВремени < &Документ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Последовательность.МоментВремени УБЫВ";
		
		Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			НовоеЗначениеГраницы = Новый МоментВремени(Дата(1,1,1));
		Иначе
			НовоеЗначениеГраницы = Результат.Выгрузить()[0].МоментВремени;
		КонецЕсли;
			
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУКНЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Удаляет повторяющиеся значения из массива
//
// Параметры:
//  Массив	 - Массив	 - Массив.
//
Процедура пуУдалитьПовторяющиесяЭлементы(Массив)
	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		// Удалим повторы
		Инд=0;
		КолВо = Массив.Количество();
		Пока Инд<КолВо Цикл
			Инд2 = Инд+1;
			Пока Инд2<КолВо Цикл
				Если Массив[Инд2] = Массив[Инд] Тогда
					Массив.Удалить(Инд2);
					КолВо = КолВо-1;
				Иначе
					Инд2 = Инд2+1;
				КонецЕсли;
			КонецЦикла; 
			Инд = Инд+1;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

// Возвращает текущий максимальный номер строки в наборе записей регистра.
//
Функция пуМаксНомерСтрокиВНабореЗаписей(ИмяРегистра, Регистратор, ВидРегистра = "РегистрНакопления")
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(Рег.НомерСтроки) КАК МаксНомерСтроки
	                      |ИЗ
	                      |"+ВидРегистра+"." +ИмяРегистра+ " КАК Рег
	                      |
	                      |ГДЕ
	                      |	Рег.Регистратор = &Регистратор");
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МаксНомерСтроки = Выборка.МаксНомерСтроки;
	Иначе
		МаксНомерСтроки = 0;
	КонецЕсли;
	Возврат МаксНомерСтроки;
КонецФункции

// Подготавливает параметры, необходимые для работы с наборами записей для заданных учетов.
//
Процедура пуПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина)
	СтруктураПараметров.Вставить("Период",         Период);
	СтруктураПараметров.Вставить("Регистратор",    Регистратор);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладах", Истина);
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладах.Очистить();
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладах.Отбор.Регистратор.Установить(Регистратор);
	
	// Таблицы движений Для партий на складах
	СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладах", СтруктураПараметров.ДвиженияПартииТоваровНаСкладах.Выгрузить());
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
	// Служебные колонки
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("ДокументОприходованияДата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	// Номер строки таблицы списания
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("НомерСтрокиТаблицыСписания", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладах", пуМаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладах", Регистратор));
	
	// Установим флаг модифицированности для наборов записей всех регистров, 
	// для которых документ является регистратором и по которым у документа есть движения
	// для того, чтобы набор записей был перезаписан. 
	Для каждого Элемент Из СтруктураПараметров цикл
		Если Найти(Элемент.Ключ,"ИзмененыДвижения") >0 тогда
			ИмяРегистра = СтрЗаменить(Элемент.Ключ,"ИзмененыДвижения","");
			ОбъектМетаданных = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
			Если ОбъектМетаданных<>Неопределено тогда
				Если СтруктураПараметров.Регистратор.Метаданные().Движения.Содержит(ОбъектМетаданных) тогда
					Если пуМаксНомерСтрокиВНабореЗаписей(ИмяРегистра, Регистратор)>0 тогда
						СтруктураПараметров.Вставить(Элемент.Ключ,Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Записывет набор записей в базу данных.
//
Процедура пуЗаписатьДвижения(ДвиженияРегистра, ТаблицаДвиженийРегистра, Замещать)
	// При замещении нужно удалять записи, сформированные прошлым списанием партий (СписаниеПартий=Истина),
	// если у регистра есть реквизит СписаниеПартий, то нужно удалить строки с Истина.
	ДМ = ДвиженияРегистра.Метаданные();
	ЕстьРеквизитСписаниеПартий = (ДМ.Реквизиты.Найти("СписаниеПартий") <> Неопределено);
	Если Замещать И ЕстьРеквизитСписаниеПартий Тогда
		Если ТаблицаДвиженийРегистра=Неопределено Тогда
			ТаблицаДвиженийРегистра = ДвиженияРегистра.Выгрузить();
		КонецЕсли;
		ДвиженияРегистра.Прочитать();
		Инд=0;
		Пока Инд < ДвиженияРегистра.Количество() Цикл
			Если ДвиженияРегистра[Инд].СписаниеПартий Тогда
				ДвиженияРегистра.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним параметр "Списание партий"
		Если ЕстьРеквизитСписаниеПартий Тогда
			Для Каждого Запись Из ТаблицаДвиженийРегистра Цикл
				Запись.СписаниеПартий = Истина;
			КонецЦикла;
		КонецЕсли;
		пуДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		ДвиженияРегистра.Записать(Истина);
	Иначе
		Если ТаблицаДвиженийРегистра<>Неопределено Тогда
			// Заполним параметр "Списание партий"
			Если ЕстьРеквизитСписаниеПартий Тогда
				Для Каждого Запись Из ТаблицаДвиженийРегистра Цикл
					Запись.СписаниеПартий = Истина;
				КонецЦикла;
			КонецЕсли;
			пуДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		КонецЕсли;
		Попытка
			ДвиженияРегистра.Записать(Замещать);
		Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Запись движений по упр. учету
//
Процедура пуЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Замещать)
	Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладах Тогда
		пуЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладах, 
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах, Замещать);
	КонецЕсли;
КонецПроцедуры // пуЗаписатьДвиженияДокумента()

// Добавляет записи из таблицы движений в набор записей
//
Процедура пуДобавитьСтрокиВНаборЗаписей(НаборЗаписей, Таблица)
	Для Каждого Строка Из Таблица Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,Строка);
		Запись.Активность = Истина;
	КонецЦикла;
КонецПроцедуры

// Сортировка партий по стратегии
//
Процедура пуОтсортироватьПартииПоСтратегии(ТаблицаОстатки, СтрокаДокумента, СтруктураПараметров)
	
	ТаблицаОстатки.Колонки.Добавить("ЧислоДокументОприходования", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
	
	Для Каждого Строка Из ТаблицаОстатки Цикл
		Если Строка.ДокументОприходования = СтрокаДокумента.ДокументПартии Тогда
			Строка.ЧислоДокументОприходования = 0;
		Иначе
			Строка.ЧислоДокументОприходования = 1;
		КонецЕсли;
	КонецЦикла; 
	
	ПоляСортировкиСтатус = "ЧислоДокументОприходования Возр";
	
	// Полученную таблицу отсортируем в соответствии со стратегией .
	СпособОценкиМПЗ = Константы.СтратегияСписанияПартийТоваровПоДатам.Получить();
	Если СпособОценкиМПЗ = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО Тогда
		НапрДата = "Убыв";
		СортировкаДокументЗаполнен = "";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ФИФО Тогда
		НапрДата = "Возр";
		СортировкаДокументЗаполнен = "";
	Иначе
		// По средней
		НапрДата = "Возр";
		СортировкаДокументЗаполнен = ", ДокументОприходованияПустой Возр"
	КонецЕсли;
	
	// Отсортируем таблицу для получения порядка по датам
	ТаблицаОстатки.Сортировать(ПоляСортировкиСтатус + СортировкаДокументЗаполнен + ", ДокументОприходованияДата " + НапрДата + ", ДокументОприходования " + НапрДата);
	ТаблицаОстатки.Колонки.Удалить("ЧислоДокументОприходования");
	
КонецПроцедуры // ОтсортироватьПартииПоСтратегии()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЯ (КРЕДИТ)

// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
// 	СтрокаДокумента.
//
Процедура пуСообщитьОНехваткеПартииИСписанииВМинус(СтрокаДокумента, СтруктураПараметров, КоличествоОсталосьПогасить)
	СтрокаСообщения = "Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
	+ "Не хватает " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков
	+ " товара " + СтрокаДокумента.Номенклатура
	+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
	+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
	+ ", на складе: " + СтрокаДокумента.Склад;
	
	ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица списанных партий.
//
Процедура пуСписаниеПартий(СтрокаДокумента, СтруктураПараметров)
	
	ЭтоПродажа = Истина;
	ЭтоДокументОУ = ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ОказаниеУслуг");
	Если ЭтоДокументОУ Тогда
		Если СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту Тогда
			ЭтоПродажа = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Партии для данного учета
	ИмяРегистра = "ПартииТоваровНаСкладах";
	ТаблицаПартий = СтруктураПараметров["Таблица"+ИмяРегистра] ;
	
	// Структура отбор строк партий
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	СтруктураОтбора.Вставить("СерияНоменклатуры", 		   СтрокаДокумента.СерияНоменклатуры);

	МассивСтрок = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);

	НайденныеСтроки = МассивСтрок;
	// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания.
	ТаблицаОстатки = Новый ТаблицаЗначений;
	// Добавим колонку с индексом
	ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
		ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	
	Сч = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		НоваяСтрока = ТаблицаОстатки.Добавить();
		НоваяСтрока.ИндексНайденнойСтроки = Сч;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка,,"QuieryId");
		Сч = Сч + 1;
	КонецЦикла;
	
	// Сортировка партий по стратегии списания (fifo, lifo, по-средней + дополнительные правила).
	пуОтсортироватьПартииПоСтратегии(ТаблицаОстатки, СтрокаДокумента, СтруктураПараметров);
	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	Для Каждого СтрокаПартии Из ТаблицаОстатки Цикл
		Если КоличествоОсталосьПогасить <= 0 Тогда
			Прервать;
		КонецЕсли; 
		// Количество по строке больше 0
		
		Если СтрокаПартии.Склад <> СтрокаДокумента.Склад Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаПартии.Количество > 0 Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		// Добавим новую строку
		ИмяРегистра = "ПартииТоваровНаСкладах";
		Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
		// Увеличим счетчик движений на 1.
		СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра] = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра]+1;
		// Устанавливаем флаг модификации
		СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;

		// Свойства
		Движение.Период 				= СтрокаДокумента.Период;
		Движение.Регистратор 			= СтрокаДокумента.Регистратор;
		Движение.Активность 			= Истина;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.Номенклатура 			= СтрокаПартии.Номенклатура;
		// Ресурсы 
		Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
		Движение.Сумма = Окр(СтрокаПартии.Сумма  * КоэффСписания,2,1);
		
		Если Движение.Количество < КоличествоОсталосьПогасить Тогда
			КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
		Иначе
			КоэффПоступления = 1;
		КонецЕсли;
		
		Движение.НомерСтрокиТаблицыСписания = СтрокаДокумента.НомерСтрокиДокумента;
		
		// Реквизиты
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
		СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
		СтрокаПартии.Сумма = СтрокаПартии.Сумма - Движение.Сумма;
		
		// Заполнение полей, специфических для учета
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		Движение.СерияНоменклатуры = СтрокаПартии.СерияНоменклатуры;
		Движение.Склад 			        = СтрокаПартии.Склад;
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		Если СтруктураПараметров.ЭтоПеремещение Тогда
			Движение.СкладПолучатель = СтрокаДокумента.СкладПолучатель;
		КонецЕсли;
	КонецЦикла; 
	
	// Количество и стоимость из таблицы значений перенесем в найденные строки
	// Никакие другие колонки измениться не могли.
	Для Каждого Строка Из ТаблицаОстатки Цикл
		ЗаполнитьЗначенияСвойств(НайденныеСтроки[Строка.ИндексНайденнойСтроки],Строка, "Количество, Сумма");
	КонецЦикла;
	
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда

		пуСообщитьОНехваткеПартииИСписанииВМинус(СтрокаДокумента, СтруктураПараметров, КоличествоОсталосьПогасить);
		СтруктураПараметров.БылиОшибкиСписания = Истина;
		
		Если СтруктураПараметров.СписыватьПартииВМинус = 1
				Или (СтруктураПараметров.СписыватьПартииВМинус = 3 И ЭтоДокументОУ) Тогда
			// Списание в минус
			
			Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период 				= СтрокаДокумента.Период;
			Движение.Регистратор 			= СтрокаДокумента.Регистратор;
			Движение.Активность 			= Истина;
			Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Номенклатура 			= СтрокаДокумента.Номенклатура;
			// Ресурсы 
			Движение.Количество	= КоличествоОсталосьПогасить;
			Движение.Сумма = 0;
			
			Движение.НомерСтрокиТаблицыСписания = СтрокаДокумента.НомерСтрокиДокумента;
			
			// Заполнение полей, специфических для учета
			Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
			Движение.СерияНоменклатуры = СтрокаДокумента.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаДокумента.Склад;
			Если СтруктураПараметров.ЭтоПеремещение Тогда
				Движение.СкладПолучатель = СтрокаДокумента.СкладПолучатель;
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.СписыватьПартииВМинус = 2
					Или (СтруктураПараметров.СписыватьПартииВМинус = 3 И Не ЭтоДокументОУ) Тогда
			// Запрещено проведение при нехватке
			СтруктураПараметров.Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоДокументОУ Тогда
		Если СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту Тогда
			Для каждого строкаТаблицы из СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра] Цикл
				Если СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Колонки.Найти("Количество") <> Неопределено Тогда строкаТаблицы.Количество = 0 - строкаТаблицы.Количество КонецЕсли;
				Если СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Колонки.Найти("Сумма") <> Неопределено Тогда строкаТаблицы.Сумма = 0 - строкаТаблицы.Сумма КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // пуСписаниеПартий()
  
////////////////////////////////////////////////////////////////////////////////
// ЗАПРОСЫ, ВОЗВРАЩАЮЩИЕ ТАБЛИЦЫ ОСТАТКОВ


// Формирует запрос по остаткам партий товаров на конец рабочего периода
//
// Параметры:
//  МоментКон      - МоментВремени - момент времени, на которой возвращаются остатки.
//  МассивНоменклатуры - Массив - массив номенклатуры, по которой возвращаются остатки.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийНаСкладах(МоментКон, Отбор = Неопределено)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментКон", МоментКон);
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""ПолучитьТаблицуПартийНаСкладах"" КАК QuieryId,
	|	ДокументОприходования,
	|	ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ВЫБОР КОГДА ДокументОприходования = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ДокументОприходованияПустой,
	|	Номенклатура,
	|	Склад,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	КоличествоОстаток КАК Количество,
	|	СуммаОстаток КАК Сумма";
	
	Текст = Текст + "
	|ИЗ РегистрНакопления.";
	Текст = Текст + "ПартииТоваровНаСкладах";
	Текст = Текст + ".Остатки(&МоментКон, ";
	
	ТекстОтбор = "";
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для Каждого Элемент Из Отбор Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " В (&Отбор"+Элемент.Ключ+")";
			Иначе
				ТекстОтбор = ТекстОтбор + " И " + Элемент.Ключ + " = &Отбор"+Элемент.Ключ;
			КонецЕсли;
			Запрос.УстановитьПараметр("Отбор"+Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли; 
	Запрос.Текст = 	Текст + Сред(ТекстОтбор, 3) + ")";
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ЗакрытыеПроцедуры.ПриПолученииТаблицыПартийНаСкладах(ТаблицаОстатков);
	
	Возврат ТаблицаОстатков;
	
КонецФункции

// Получение остатков по упр. учету
Процедура ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры)

	ЕстьНаСкладах=Ложь;
	Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
		Источник = "НаСкладах";
		ЕстьНаСкладах = Истина;
	КонецЦикла;
	Если ЕстьНаСкладах Тогда
		// Таблицы остатков партий
		СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладах", Новый ТаблицаЗначений);
		СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладах", ПолучитьТаблицуПартийНаСкладах(МоментКон, Новый Структура("Номенклатура", МассивНоменклатуры)));
	КонецЕсли;
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ.

// Возвращает таблицу документов
//
Функция ПолучитьТаблицуСтрокДокументов(ДокументСписания=Неопределено) 
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";
	
	Ресурсы		= Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	Реквизиты	= Метаданные.РегистрыСведений.СписанныеТовары.Реквизиты;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Для каждого Реквизит Из Реквизиты Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Реквизит.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	НомерСтрокиДокумента
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки";
	
	Если ДокументСписания <> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст+ "
		|ГДЕ
		|	Строки.Регистратор = &ДокументСписания";
	
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции

// Выполнить списание партий по таблице списания
//
// Параметры:
//  ТаблицаСписания			 - ТаблицаЗначений	 - Таблица, содержащая информацию о списываемых в документе товарах.
//  МоментКон				 - МоментВремени	 - Момент определения остатков.
//  Отказ					 - Булево			 - Признак отмены проведения операции.
//  Останавливаться			 - Булево			 - Флаг остановки списания при обнаружении недостаточности остатков.
//  ПроведениеОстановлено	 - Булево			 - Устанавливается в значение Истина, если списание было прервано.
//  ЭтоПеремещение			 - Булево			 - Если равен Истина, то будет выполнено оприходование на склад получателя списанных партий.
// 
// Возвращаемое значение:
//  Структура - общие параметры, используемые в большинстве процедур
//   БылиОшибкиСписания             - Булево - Были ошибки списания.
//   ТекстСообщений                 - Строка - Текст сообщений.
//   Отказ                          - Булево - Признак отмены проведения операции.
//   СписыватьПартииВМинус          - Число  - Параметр учетной политики.
//   ДвиженияПартииТоваровНаСкладах - РегистрНакопленияНаборЗаписей.ПартииТоваровНаСкладах - Наборы записей по регистрам.
//   ЭтоПеремещение                 - Булево - Признак перемещения.
//
Функция пуВыполнитьСписание(ТаблицаСписания, МоментКон, Отказ, Останавливаться = Ложь,ПроведениеОстановлено = Ложь, ЭтоПеремещение) Экспорт
	
	// Структура общих параметров, используемых в большинстве процедур.
	СтруктураПараметров = Новый Структура("БылиОшибкиСписания", Ложь);
	
	Если ТаблицаСписания.Количество()>0 Тогда
		// Таблица строк документов списания
		МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
		пуУдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	
		// Структура общих параметров, используемых в большинстве процедур.
		СтруктураПараметров.Вставить("ТекстСообщений", "");
		СтруктураПараметров.Вставить("Отказ", Отказ);
		СтруктураПараметров.Вставить("СписыватьПартииВМинус",УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("СписыватьПартииВМинус"));
		
		// Движения - наборы записей по регистрам
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладах", РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());
		
		пуПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина);
		
		Если ЭтоПеремещение Тогда
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладах.Колонки.Добавить("СкладПолучатель");
		КонецЕсли;
		СтруктураПараметров.Вставить("ЭтоПеремещение",ЭтоПеремещение);
		
		// Добавление в структуру остатков по видам учета, связанным с партионным.
		ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, МассивНоменклатуры);
		
		ОбрабатываемыйДокумент = Неопределено;
		Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл
			ОбрабатываемыйДокумент = СтрокаДокумента.Регистратор;
			// Сначала обрабатывается списание
			пуСписаниеПартий(СтрокаДокумента, СтруктураПараметров);
		КонецЦикла;
		
		СтруктураПараметров.Свойство("Отказ", Отказ);
				
		Если Не ОбрабатываемыйДокумент = Неопределено Тогда
			// Если задан параметр останавливаться при нехватке партий и партий не хватило - прекратим проведение.
			Если Останавливаться И СтруктураПараметров.Отказ тогда
				ОбщегоНазначения.СообщитьОбОшибке("Проведение по партиям остановлено ",СтруктураПараметров.Отказ);
				ПроведениеОстановлено = Истина;
				Возврат СтруктураПараметров;
			КонецЕсли;
			
			Если ОбрабатываемыйДокумент.Метаданные().Реквизиты.Найти("Коррекция") <> Неопределено И ОбрабатываемыйДокумент.Коррекция Тогда
				ЗамещатьДвижения = Ложь;
			Иначе
				ЗамещатьДвижения = Истина;
			КонецЕсли;
			
			пуЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, ЗамещатьДвижения);
			
			#Если Клиент Тогда
				Состояние("Проведен документ " + ОбрабатываемыйДокумент);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	НовоеЗначениеГраницы = МоментКон;
	СдвигатьГраницу = ОпределитьНеобходимостьСдвигаГраницы(МоментКон,СтруктураПараметров.БылиОшибкиСписания,НовоеЗначениеГраницы);
			
	Если СдвигатьГраницу Тогда
		Последовательности.ПартионныйУчет.УстановитьГраницу(НовоеЗначениеГраницы);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции
                   
// Процедура проводит переданный документ по учету партий товаров
//
// Параметры:
//  ОбрабатываемыйДокумент		 - ДокументСсылка	 - проводимый документ.
//  ТаблицаДокумента			 - ТаблицаЗначений	 - Таблица движений документа из регистра СписанныеТовары.
//  Отказ						 - Булево			 - Признак отмены проведения операции.
//  КоличествоСтрокВДокументе	 - Число			 - Количество строк в документе.
//  Останавливаться				 - Булево			 - флаг остановки проведения по партиям на первом документе,
//      который по партиям не провелся.
//  ПроведениеОстановлено		 - Булево			 - флаг, который усанавливается в значение Истина,
//      если проведение по партиям было прервано программой.
//  ЭтоПеремещение				 - Булево			 - если равен Истина, то в при списании также будет
//      выполнено оприходование на склад получателя списанных партий.
// 
// Возвращаемое значение:
//  Структура - стуктура с параметрами результата формирования движений.
//
Функция пуДвижениеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаДокумента = Неопределено, Отказ = Ложь,
	КоличествоСтрокВДокументе=0, Останавливаться = Ложь,ПроведениеОстановлено = Ложь, ЭтоПеремещение = Ложь) Экспорт
	
	Перем СтруктураРезультата;
	
	Если ТаблицаДокумента=Неопределено Тогда
		ТаблицаСписания = ПолучитьТаблицуСтрокДокументов(ОбрабатываемыйДокумент);
		
		// Если таблица списания не была задана, значит, это вызов не из документа. Определяем, перемещение ли это,
		// игнорируя параметр.
		Если ТаблицаСписания.Количество()>0 Тогда
			ЭтоПеремещение = ЗначениеЗаполнено(ТаблицаСписания[0].СкладПолучатель);
		КонецЕсли;
	Иначе
		ТаблицаСписания = ТаблицаДокумента;
	КонецЕсли;
	
	КоличествоСтрокВДокументе = ТаблицаСписания.Количество();   
	
	Если ТаблицаСписания.Количество()>0 Тогда
		
		СкладСписания = ТаблицаСписания[0].Склад;
		СкладПолучатель = ТаблицаСписания[0].СкладПолучатель;
		
		флЭтоГлавныйУзел = Не ОбщегоНазначения.ЭтоПодчиненныйУзел();
		
		Если флЭтоГлавныйУзел Или 
		 	 СкладСписания.Филиал = ПланыОбмена["Полный"].ЭтотУзел().Филиал
		Тогда		
			
			Строка0 = ТаблицаСписания[0];
			Если Не ЗначениеЗаполнено(Строка0.Регистратор) Тогда
				ТаблицаДокумента.ЗаполнитьЗначения(ОбрабатываемыйДокумент, "Регистратор");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка0.Период) Тогда
				ТаблицаСписания.ЗаполнитьЗначения(ОбрабатываемыйДокумент.Дата, "Период");
			КонецЕсли;
			ДокументМоментВремени = Новый МоментВремени(Строка0.Период, Строка0.Регистратор);
			
			СтруктураПараметров = пуВыполнитьСписание(ТаблицаСписания, ДокументМоментВремени,Отказ,Останавливаться,ПроведениеОстановлено,ЭтоПеремещение);
			
			// Оприходование списанных товаров в случае перемещения
			ТаблицаДвижений = Неопределено;
			Если ЭтоПеремещение и 
				 СтруктураПараметров.Свойство("ТаблицаДвиженийПартииТоваровНаСкладах",ТаблицаДвижений) и
				 (не ПараметрыСеанса.ИспользованиеРИБ Или
				  СкладПолучатель.Филиал = ПланыОбмена["Полный"].ЭтотУзел().Филиал или
				  флЭтоГлавныйУзел)
			Тогда
				Если ТаблицаДвижений<>Неопределено Тогда
					ТаблицаДвижений.Колонки.Удалить("ВидДвижения");
					Для Каждого СтрокаДвиж Из ТаблицаДвижений Цикл
						СтрокаДвиж.Склад = СтрокаДвиж.СкладПолучатель;
					КонецЦикла;
					ПартионныйУчет.пуОприходованиеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаДвижений, СтруктураПараметров.ДвиженияПартииТоваровНаСкладах);
					СтруктураПараметров.ДвиженияПартииТоваровНаСкладах.Записать();
				КонецЕсли;
			КонецЕсли;
			                                     
		Иначе
			
			Если ЗначениеЗаполнено(СкладПолучатель) И 
				 СкладПолучатель.Филиал = ПланыОбмена["Полный"].ЭтотУзел().Филиал 
			Тогда
				
				ДвиженияПартииТоваровНаСкладах = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
				ДвиженияПартииТоваровНаСкладах.Отбор.Регистратор.Установить(ОбрабатываемыйДокумент);
				
				ТаблицаОприходования = ТаблицаСписания.Скопировать();
				Для Каждого СтрокаДвиж Из ТаблицаОприходования Цикл
					СтрокаДвиж.Склад = СтрокаДвиж.СкладПолучатель;
				КонецЦикла;
				
				ПартионныйУчет.пуОприходованиеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаОприходования, ДвиженияПартииТоваровНаСкладах);
				ДвиженияПартииТоваровНаСкладах.Записать();
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;  
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// ОПРИХОДОВАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ 

// Процедура выполнияет формирование движений по приходу партий
//
// Параметры:
//  СтруктураШапкиДокумента	 - Структура – структура шапки документа, откуда вызвана процедура
//  ТаблицаОприходования	 - ТаблицаЗначений - таблица, содержащая поступающие партии
//  НаборДвижений			 - РегистрНакопленияНаборЗаписей.ПартииТоваровНаСкладах - набор движений регистра ПартииТоваровНаСкладах документа прихода.
//
Процедура пуОприходованиеПартийТоваров(СтруктураШапкиДокумента, ТаблицаОприходования, НаборДвижений) Экспорт
	
	Для Каждого ТекСтрока Из ТаблицаОприходования Цикл
		
		Движение = НаборДвижений.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = СтруктураШапкиДокумента.Дата;
			
		ЗаполнитьЗначенияСвойств(Движение,ТекСтрока);
		Если Не ЗначениеЗаполнено(Движение.Склад) Тогда
			Движение.Склад = СтруктураШапкиДокумента.Склад;
		КонецЕсли;
		
		СтратегияСписания = Константы.СтратегияСписанияПартийТоваровПоДатам.Получить();
		Если  СтратегияСписания <> Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя
			И СтратегияСписания <> Перечисления.СтратегияСписанияПартийТоваровПоДатам.ПустаяСсылка()
		Тогда
			Если ТаблицаОприходования.Колонки.Найти("ДокументОприходования") = Неопределено Тогда
				Движение.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
