#Область ПрограммныйИнтерфейс

// Действует ли в данный момент скидка
//
// Параметры:
//  ВидСкидки									 - СправочникСсылка.ВидыСкидок	 - вид скидки
//  Дата										 - Дата							 - дата среза
//  НеПроверятьПризнакОграничиватьПоДнямНедели	 - Булево						 - учитывать ли день недели
// 
// Возвращаемое значение:
//   Булево
//
Функция СкидкаВходитВОграничениеПоВремени(ВидСкидки, Дата = Неопределено, НеПроверятьПризнакОграничиватьПоДнямНедели = Ложь) Экспорт

	Если НеПроверятьПризнакОграничиватьПоДнямНедели 
		Или ВидСкидки.ОграничиватьПоДнямНедели 
	Тогда
		
		Если Дата = Неопределено Тогда
			Дата = ТекущаяДата();
		КонецЕсли;
		ДеньСкидки	= ОбщегоНазначенияСервер.ПолучитьДатуВремя(Дата, "День");
		ВремяСкидки = Дата(1,1,1) + (Дата - НачалоДня(Дата));

		Для Каждого СтрОгр Из ВидСкидки.ВремяПоДнямНедели Цикл
			Если (ДеньСкидки = СтрОгр.ДеньНедели И СтрОгр.Выбран = Истина) Тогда
				ВремяОкончания = ?(СтрОгр.ВремяОкончания = Дата(1,1,1), Дата(1,1,1,23,59,59), СтрОгр.ВремяОкончания);
				Если (ВремяСкидки >= СтрОгр.ВремяНачала И ВремяСкидки <= ВремяОкончания) Тогда
					Возврат Истина;
				КонецЕсли;			
			КонецЕсли;		
		КонецЦикла;
		
		Возврат Ложь;	
	
	КонецЕсли; 
		
	Возврат Истина;

КонецФункции // Скидка_Доступна()

// Получаетель скидки документа: клиент или карта.
//
// Параметры:
//  ВидСкидки	 - СправочникСсылка.ВидыСкидок	 - вид скидки
//  Клиент		 - СправочникСсылка.Клиенты		 - клиент
//  КартаКлиента - СправочникСсылка.КартыСкидок	 - карта
// 
// Возвращаемое значение:
//   СправочникСсылка.Клиенты, СправочникСсылка.КартыСкидок.
//
Функция ОпределитьПолучаетеляСкидкиДокумента(ВидСкидки, Клиент, КартаКлиента) Экспорт
	
	Если ВидСкидки.ВидПолучателя = Перечисления.ВидПолучателя.Клиенты 
		ИЛИ ВидСкидки.ВидПолучателя = Перечисления.ВидПолучателя.ВсеКлиенты 
	Тогда
		Получатель = Клиент;
		
	ИначеЕсли ВидСкидки.ВидПолучателя = Перечисления.ВидПолучателя.ВидКартыСкидок 
		Или ВидСкидки.ВидПолучателя = Перечисления.ВидПолучателя.КартаСкидок 
	Тогда
		Получатель = КартаКлиента;
	КонецЕсли;

	Возврат Получатель;
	
КонецФункции

// Действующие скидки и их данные по клиент, карте.
//
// Параметры:
//  Дата		 - Дата													 - Дата среза.
//  Получатель	 - СправочникСсылка.Клиенты, СправочникСсылка.КартыСкидок	 - Клиент, карта.
//  ТипыСкидки	 - ПеречислениеСсылка.ТипыСкидок							 - тип скидок
//  Филиал		 - СправочникСсылка.Филиалы									 - филиал
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьДействующиеСкидки(Дата = Неопределено, Получатель = Неопределено, ТипыСкидки = Неопределено, Филиал = Неопределено) Экспорт
	
	ДатаСкидки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаСкидки);
	Запрос.УстановитьПараметр("ТипыСкидки", ТипыСкидки);
	Запрос.УстановитьПараметр("Филиал"	  , Филиал);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	               |	ДействиеСкидок.ВидСкидки,
	               |	ДействиеСкидок.Получатель,
	               |	ДействиеСкидок.ВидСкидки.ВидПолучателя КАК ВидПолучателя,
	               |	ДействиеСкидок.ВидСкидки.ТипСкидки КАК ТипСкидки,
	               |	ДействиеСкидок.ВидСкидки.ФормаСкидки КАК ФормаСкидки,
	               |	ДействиеСкидок.ВидСкидки.ОграничиватьПоДнямНедели КАК ОграничиватьПоДнямНедели
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидок КАК ДействиеСкидок
	               |ГДЕ 
				   |(&Дата >= ДействиеСкидок.ДатаНачалаДействия ИЛИ ДействиеСкидок.ДатаНачалаДействия = ДАТАВРЕМЯ(1,1,1,0,0,0) )
				   |И
				   |(&Дата <= КонецПериода(ДействиеСкидок.ДатаОкончанияДействия, ДЕНЬ) ИЛИ ДействиеСкидок.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1,0,0,0) )
				   |
				   |
				   |	//%ОтборПолучатель
				   |	//%ОтборФилиал
				   |	//%ОтборТипыСкидки
	               |	";
				   
	Если ЗначениеЗаполнено(Филиал) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборФилиал"," И (ДействиеСкидок.Филиал В (&Филиал) ИЛИ ДействиеСкидок.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))");
	КонецЕсли;				   
	Если ЗначениеЗаполнено(ТипыСкидки) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборТипыСкидки"," И ДействиеСкидок.ВидСкидки.ТипСкидки В(&ТипыСкидки)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборТипыСкидки","");
	КонецЕсли;
	Если Получатель <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборПолучатель"," И (ДействиеСкидок.Получатель = Значение(Справочник.Клиенты.ПустаяСсылка) ИЛИ ДействиеСкидок.Получатель В(&Получатели))");
		
		ПолучателиСкидки = Новый Массив;                                    
		Если ТипЗнч(Получатель) = Тип("Массив") Тогда
			ПолучательМассив = Получатель;
		Иначе 
			ПолучательМассив = Новый Массив;
			ПолучательМассив.Добавить(Получатель);
		КонецЕсли;
		ПолучателиСкидки = ОбщегоНазначенияКлиентСервер.СкопироватьУниверсальнуюКоллекцию(ПолучательМассив);
		
		счКон = ПолучательМассив.Количество()-1;
		Для сч = 0 По счКон Цикл
			
			ПолучательСкидки = ПолучательМассив[счКон - сч];
			Если ТипЗнч(ПолучательСкидки) = Тип("СправочникСсылка.КартыСкидок") Тогда
				Если ЗначениеЗаполнено(ПолучательСкидки.СрокДействия)
					И КонецДня(ПолучательСкидки.СрокДействия) < ДатаСкидки
				Тогда
					ПолучателиСкидки.Удалить(счКон - сч);
					
				ИначеЕсли ЗначениеЗаполнено(ПолучательСкидки.ВидКарты) Тогда
					ПолучателиСкидки.Добавить(ПолучательСкидки.ВидКарты);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Получатели", ПолучателиСкидки);

	КонецЕсли;
	
	ТаблицаСкидок = Запрос.Выполнить().Выгрузить();

	// Отсев скидок по времени применения
	мОбрИнд = ТаблицаСкидок.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаСкидки = ТаблицаСкидок[мОбрИнд-сч];
		Если СтрокаСкидки.ОграничиватьПоДнямНедели Тогда
			Если Не СкидкаВходитВОграничениеПоВремени(СтрокаСкидки.ВидСкидки, ДатаСкидки, Истина) Тогда
				ТаблицаСкидок.Удалить(мОбрИнд-сч);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСкидок;
	
КонецФункции

// Дает таблицу продаж соответствующие отбору
//
// Параметры:
//  ТаблицаПродажДокумента	 - ТаблицаЗначений	 - таблица продаж.
//  ВидСкидки				 - СправочникСсылка.ВидыСкидок	 - вид скидки
//  ДляПрименения			 - Булево						 - для расчета или для проведения.
//  Дата					 - Дата							 - 
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьПродажиСоответствующиеОтбору(ТаблицаПродажДокумента, ВидСкидки, ДляПрименения = Истина, Дата = Неопределено) Экспорт
	
	Если ТаблицаПродажДокумента.Колонки.Найти("Депозит") = Неопределено Тогда
		ТаблицаПродажДокумента.Колонки.Добавить("Депозит", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если ТаблицаПродажДокумента.Количество() <> 0 Тогда
		Клиент	= ТаблицаПродажДокумента[0].Клиент;
		Депозит	= -РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентом(Клиент, Дата);
		Если Депозит > ТаблицаПродажДокумента.Итог("Сумма") Тогда
			ТаблицаПродажДокумента.ЗаполнитьЗначения(Депозит, "Депозит");
		Иначе
			ТаблицаПродажДокумента.ЗаполнитьЗначения(0, "Депозит");
		КонецЕсли;
	КонецЕсли;
	
	Если ДляПрименения Или Не ВидСкидки.ОтдельныйОтборНакопления Тогда
		Отбор = ВидСкидки.ХранилищеОтбор.Получить();
	Иначе
		Отбор = ВидСкидки.ХранилищеОтборНакопления.Получить();
	КонецЕсли;
	
	// Загрузка настроек
	СхемаКомпоновкиДанных = Справочники.ВидыСкидок.ПолучитьМакетВыполненияОтбора();
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	ПолучитьПродажиСоответствующиеОтбору_ПодготовитьЭлементыОтбора(Отбор.Отбор.Элементы, ТаблицаПродажДокумента);
	
	Если Отбор <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Отбор);
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата", НачалоДня(Дата));
	
	СтруктураНастроек = ОбщегоНазначенияСервер.ПолучитьПустуюСтруктуруНастроек();
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	СтруктураНастроек.ИсходныеДанные	  = ТаблицаПродажДокумента;
	
	ВнешниеНаборыДанныхДоп = Новый Структура("ДанныеВсехСтрок", ТаблицаПродажДокумента.Скопировать(, "Номенклатура, Ссылка"));
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "МакетВыполненияОтбора";
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = ОбщегоНазначенияСервер.ПодготовитьСтруктуруДанных(СтруктураНастроек, СхемаКомпоновкиДанных, ВнешниеНаборыДанныхДоп);
	
	РезультатОтбора = СтруктураРезультата.ТаблицаРезультат;
	
	// Отсев строк, которые не попадают в отбор табличной части РазмерыСкидки у вида скидки (для ТипСкидки = Скидка или Купон).
	Если (ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.Скидка
			Или ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.Купоны)
		И (ВидСкидки.РазмерыСкидки.Количество() > 1
			Или ВидСкидки.РазмерыСкидки.Количество() = 1 И ЗначениеЗаполнено(ВидСкидки.РазмерыСкидки[0].Номенклатура))
	Тогда
		ПараметрыРасчета = Новый Структура("ВидСкидки, Номенклатура", ВидСкидки);
		мОбрИнд = РезультатОтбора.Количество()-1;
		Для Сч = 0 По мОбрИнд Цикл
			
			СтрокаТЗ = РезультатОтбора[мОбрИнд-Сч];
			ПараметрыРасчета.Номенклатура = СтрокаТЗ.Номенклатура;
			
			Если ВычислитьРазмерСкидки(ПараметрыРасчета) = 0 Тогда
				РезультатОтбора.Удалить(мОбрИнд-Сч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатОтбора;
	
КонецФункции

// Вычислить размер скидки для строки документа.
//
// Параметры:
//  ПараметрыРасчета	 - Структура - данные расчета.
//  РасчитыватьБонусы	 - Булево	 - учитывать ил бонусы.
// 
// Возвращаемое значение:
//   Число.
//
Функция ВычислитьРазмерСкидки(ПараметрыРасчета, РасчитыватьБонусы = Ложь) Экспорт
	
	РазмерСкидки = 0;
	
	ВидСкидки = ПараметрыРасчета.ВидСкидки;
	Если (ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.Скидка 
		  Или ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.Купоны
		  Или (ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.Бонусы И РасчитыватьБонусы))
		И ВидСкидки.ФормаСкидки <> Перечисления.ФормыСкидки.НатуральнаяСкидка
	Тогда
		Для Каждого СтрокаРазмерСкидки Из ВидСкидки.РазмерыСкидки Цикл
			Если Не ЗначениеЗаполнено(СтрокаРазмерСкидки.Номенклатура) 
				Или ПараметрыРасчета.Номенклатура = СтрокаРазмерСкидки.Номенклатура
				Или (ЗначениеЗаполнено(ПараметрыРасчета.Номенклатура) 
						И ТипЗнч(СтрокаРазмерСкидки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
						И ПараметрыРасчета.Номенклатура.ПринадлежитЭлементу(СтрокаРазмерСкидки.Номенклатура))
				Или (ТипЗнч(СтрокаРазмерСкидки.Номенклатура) = Тип("СправочникСсылка.КатегорииВыработки") 
						И ПараметрыРасчета.Номенклатура.КатегорияВыработки = СтрокаРазмерСкидки.Номенклатура)
			Тогда
				РазмерСкидки = СтрокаРазмерСкидки.Размер;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.НакопительнаяСкидка Тогда
		Накопление = ПолучитьНакоплениеПоСкидке(ВидСкидки,ПараметрыРасчета.Получатель, ПараметрыРасчета.ДатаМомент);
		РазмерСкидки = ПолучитьЗначениеПоШкалеНакопительнойСкидки(ВидСкидки, Накопление);
	КонецЕсли;

	Если ВидСкидки.ФормаСкидки = Перечисления.ФормыСкидки.Процент Тогда
		РазмерСкидки = Мин(100, РазмерСкидки);
	КонецЕсли;
	
	Возврат РазмерСкидки;
	
КонецФункции

Функция СформироватьПараметрыРасчетаСкидки(ВидСкидки, СтрокаДокумента = Неопределено, СтруктураШапкиДокумента)
	
	ПараметрыРасчета = Новый Структура;	
	ПараметрыРасчета.Вставить("ВидСкидки",ВидСкидки);
	ПараметрыРасчета.Вставить("Номенклатура",?(СтрокаДокумента<>Неопределено, СтрокаДокумента.Номенклатура, Справочники.Номенклатура.ПустаяСсылка()));
	ПараметрыРасчета.Вставить("Получатель", ОпределитьПолучаетеляСкидкиДокумента(ВидСкидки, СтруктураШапкиДокумента.Клиент, СтруктураШапкиДокумента.КартаКлиента));
	ПараметрыРасчета.Вставить("РассчитываемыйДокумент",СтруктураШапкиДокумента.Ссылка);
	
	Если СтруктураШапкиДокумента.Свойство("МоментВремени") Тогда
		ПараметрыРасчета.Вставить("ДатаМомент",СтруктураШапкиДокумента.МоментВремени);	
	ИначеЕсли ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка) Тогда
		ПараметрыРасчета.Вставить("ДатаМомент",СтруктураШапкиДокумента.Ссылка.МоментВремени());	
	Иначе
		ПараметрыРасчета.Вставить("ДатаМомент",СтруктураШапкиДокумента.Дата);	
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Дает сумму процент скидки строки
//
// Параметры:
//  ВидСкидки				 - СправочникСсылка.ВидыСкидок	 - вид скидки
//  СтрокаДокумента			 - СтрокаТабличнойЧасти			 - строка продажи.
//  СтруктураШапкиДокумента	 - Структура					 - реквизиты документа.
//
Процедура РассчитатьСуммуПроцентСкидкиСтроки(ВидСкидки,СтрокаДокумента, СтруктураШапкиДокумента) Экспорт 
	
	РазмерСкидки = ВычислитьРазмерСкидки(СформироватьПараметрыРасчетаСкидки(ВидСкидки,СтрокаДокумента, СтруктураШапкиДокумента));
	
	Если ВидСкидки.ФормаСкидки = Перечисления.ФормыСкидки.Процент 
		Или ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.НакопительнаяСкидка
	Тогда
		
		СтрокаДокумента.ПроцентСкидки = РазмерСкидки;
		дкРассчитатьСуммуСкидкиСтрокиТабЧасти(Неопределено, Неопределено, СтрокаДокумента)
		
	ИначеЕсли ВидСкидки.ФормаСкидки = Перечисления.ФормыСкидки.Сумма Тогда
		
		СтрокаДокумента.СуммаСкидки = Мин(РазмерСкидки, СтрокаДокумента.Сумма);
		
		ЭтоУслуга = (СтрокаДокумента.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга);				
		Если ВидСкидки.СуммоваяСкидкаНаКаждуюЕдиницу И ЭтоУслуга Тогда
			СтрокаДокумента.СуммаСкидки = СтрокаДокумента.СуммаСкидки * СтрокаДокумента.Количество;		
		КонецЕсли; 
		
		дкПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(Неопределено, Неопределено, СтрокаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

// Дает строку продаж для строки скидки
//
// Параметры:
//  СтрокаСкидкаДокумента	 - СтрокаТабличнойЧасти	 - строка таблицы скидок.
//  ТаблицаПродаж			 - ТаблицаЗначений	 - таблица продаж.
// 
// Возвращаемое значение:
//   СтрокаТабличнойЧасти.
//
Функция НайтиСтрокуПродажСтрокиСкидки(СтрокаСкидкаДокумента, ТаблицаПродаж) Экспорт
	
	Отбор = Новый Структура("ИмяТЧ, КлючСтроки", СтрокаСкидкаДокумента.ТабЧасть, СтрокаСкидкаДокумента.КлючСтроки);
	мсСтр = ТаблицаПродаж.НайтиСтроки(Отбор);
	Если мсСтр.Количество() <> 0 Тогда
		Возврат мсСтр[0];
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

// Получить сумму накопления по скидке
//
// Параметры:
//  ВидСкидки				 - СправочникСсылка.ВидыСкидок	 - вид скидки
//  Получатель				 - СправочникСсылка.Клиент		 - Клиент, карта
//  Дата					 - Дата							 - дата анализа
//  РассчитываемыйДокумент	 - ДокументСсылка.ОказаниеУслуг	 - документ продажи.
// 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьНакоплениеПоСкидке(ВидСкидки, Получатель, Дата = Неопределено, РассчитываемыйДокумент = Неопределено) Экспорт
	
	Если  ТипЗнч(Дата) = Тип("МоментВремени") Тогда
		Граница = Новый Граница(Дата, ВидГраницы.Исключая);
	ИначеЕсли ЗначениеЗаполнено(Дата) Тогда
		Граница = Новый Граница(Дата, ВидГраницы.Включая);
	Иначе
		Граница = Дата(1,1,1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НакопленияПоСкидкамОбороты.НакоплениеОборот) КАК Накопление
	               |ИЗ
	               |	РегистрНакопления.НакопленияПоСкидкам.Обороты(
	               |			,
	               |			&Граница,
	               |			Регистратор,
	               |			ВидСкидки = &ВидСкидки
	               |				И Получатель = &Получатель) КАК НакопленияПоСкидкамОбороты
	               |ГДЕ
	               |	НакопленияПоСкидкамОбороты.Регистратор <> &Регистратор";
				   
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("ВидСкидки", ВидСкидки);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Регистратор", РассчитываемыйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить().Итог("Накопление");
	
КонецФункции

// Получить значение скидки по шкале накопительной скидки
//
// Параметры:
//  ВидСкидки			 - СправочникСсылка.ВидыСкидок	 - вид скидки
//  ОцениваемоеЗначение	 - Число	 - значение для шкалы.
// 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьЗначениеПоШкалеНакопительнойСкидки(ВидСкидки, ОцениваемоеЗначение)
	                                                
	Результат = 0;                                      
	
	Для Каждого СтрокаШкалы Из ВидСкидки.ШкалаДиапазонов Цикл
		Если ОцениваемоеЗначение >= СтрокаШкалы.НижняяГраница Тогда
			Результат = СтрокаШкалы.ЗначениеПорога;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Есть ли натуральные скидки
// 
// Возвращаемое значение:
//   Булево.
//
Функция ИспользуютсяНатуральныеСкидки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыСкидок.Ссылка
	|ИЗ
	|	Справочник.ВидыСкидок КАК ВидыСкидок
	|ГДЕ
	|	ВидыСкидок.ФормаСкидки = ЗНАЧЕНИЕ(Перечисление.ФормыСкидки.НатуральнаяСкидка)
	|	И НЕ ВидыСкидок.ПометкаУдаления"
	;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Есть ли натуральные скидки с номенклатурой, в которой ведется учет по характеристикам
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЕстьНатуральныеСкидкиСХарактеристиками() Экспорт
	
	Возврат РаботаСоСкидкамиПовтИсп.ЕстьНатуральныеСкидкиСХарактеристиками();
	
КонецФункции

// Вычисляет количество дней до дня рождения клиента
//
// Параметры:
//  Клиент		 - СправочникСсылка.Клиент	 - Клиент
//  ДатаАнализа	 - Дата						 - дата среза.
// 
// Возвращаемое значение:
//  Число.
//
Функция ВычислитьКоличествоДнейДоДняРождения(Клиент, ДатаАнализа = Неопределено) Экспорт

	Дата = Клиент.ДатаРождения;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат 400;
	КонецЕсли;
	
	Если ДатаАнализа = Неопределено Тогда 
		ТекущийДень = НачалоДня(ТекущаяДата());
	Иначе
		ТекущийДень = ДатаАнализа;
	КонецЕсли;
	
	ДеньРожденияКлиента				= ДобавитьМесяц(Дата, 12 * (Год(ТекущийДень) - Год(Дата)));
	ДеньРожденияКлиентаСледующийГод	= ДобавитьМесяц(Дата, 12 * (Год(ТекущийДень) - Год(Дата) + 1));
	
	Если ТекущийДень > ДеньРожденияКлиента Тогда
		Возврат Окр((ДеньРожденияКлиентаСледующийГод - ТекущийДень)/84600);
	ИначеЕсли ТекущийДень <= ДеньРожденияКлиента Тогда
	    Возврат Окр((ДеньРожденияКлиента - ТекущийДень)/84600);             
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Вычисляет количество дней после последнего дня рождения клиента
//
// Параметры:
//  Клиент		 - СправочникСсылка.Клиент	 - Клиент
//  ДатаАнализа	 - Дата						 - дата среза.
// 
// Возвращаемое значение:
//  Число.
//
Функция ВычислитьКоличествоДнейПослеДняРождения(Клиент, ДатаАнализа = Неопределено) Экспорт
	
	Дата = Клиент.ДатаРождения;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат 400;
	КонецЕсли;
	
	Если ДатаАнализа = Неопределено Тогда 
		ТекущийДень = НачалоДня(ТекущаяДата());
	Иначе
		ТекущийДень = ДатаАнализа;
	КонецЕсли;
	
	ДеньРожденияКлиента				= ДобавитьМесяц(Дата, 12 * (Год(ТекущийДень) - Год(Дата)));
	ДеньРожденияКлиентаПрошлогодняя	= ДобавитьМесяц(Дата, 12 * (Год(ТекущийДень) - Год(Дата) - 1));
	
	Если ТекущийДень >= ДеньРожденияКлиента Тогда
		Возврат Окр((ТекущийДень - ДеньРожденияКлиента)/84600);
	ИначеЕсли ТекущийДень < ДеньРожденияКлиента Тогда
	    Возврат Окр((ТекущийДень - ДеньРожденияКлиентаПрошлогодняя)/84600);             
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#Область БонусныеСкидки

// Есть ли действующие бонусные скидки
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЕстьДействующиеБонусныеСкидки() Экспорт
	
	Возврат РаботаСоСкидкамиПовтИсп.ЕстьДействующиеБонусныеСкидки();
	
КонецФункции

// Автоматическое сгорание просроченных бонусов по сроку действия.
//
Процедура СгораниеБонусов() Экспорт
	
	Если Не РаботаСоСкидками.ЕстьДействующиеБонусныеСкидки() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеСкидок.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ДействиеСкидок.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ДействиеСкидок.ВидСкидки.СрокСгоранияБонуса КАК ВидСкидкиСрокСгоранияБонуса,
		|	ДействиеСкидок.ВидСкидки КАК ВидСкидки
		|ИЗ
		|	РегистрСведений.ДействиеСкидок КАК ДействиеСкидок
		|ГДЕ
		|	ДействиеСкидок.ВидСкидки.ТипСкидки = &ТипСкидки
		|	И (ДействиеСкидок.ДатаОкончанияДействия > &ТекущаяДата
		|			ИЛИ ДействиеСкидок.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("ТипСкидки", Перечисления.ТипыСкидок.Бонусы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ВыборкаДействующиеСкидки = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДействующиеСкидки.Следующий() Цикл
		ДатаСписанияБонусов = КонецДня(ТекущаяДата() - 60 * 60 * 24 * (ВыборкаДействующиеСкидки.ВидСкидкиСрокСгоранияБонуса + 1));
		Если ВыборкаДействующиеСкидки.ДатаНачалаДействия < ДатаСписанияБонусов
			И ВыборкаДействующиеСкидки.ВидСкидкиСрокСгоранияБонуса > 0 Тогда
			 ПодЗапрос = Новый Запрос;
			 ПодЗапрос.Текст = 	
			 "ВЫБРАТЬ
			 |	НакопленияПоСкидкамОстаткиИОбороты.Получатель КАК Получатель,
			 |	НакопленияПоСкидкамОстаткиИОбороты.НакоплениеНачальныйОстаток КАК НакоплениеНачальныйОстаток,
			 |	НакопленияПоСкидкамОстаткиИОбороты.НакоплениеКонечныйОстаток КАК НакоплениеКонечныйОстаток,
			 |	НакопленияПоСкидкамОстаткиИОбороты.НакоплениеРасход КАК НакоплениеРасход
			 |ИЗ
			 |	РегистрНакопления.НакопленияПоСкидкам.ОстаткиИОбороты(&ДатаСписания, , Период, , ВидСкидки = &ВидСкидки) КАК НакопленияПоСкидкамОстаткиИОбороты
			 |";
			 ПодЗапрос.УстановитьПараметр("ВидСкидки", ВыборкаДействующиеСкидки.ВидСкидки);
			 ПодЗапрос.УстановитьПараметр("ДатаСписания", Новый Граница(ДатаСписанияБонусов, ВидГраницы.Включая));
			 ВыборкаРезультат = ПодЗапрос.Выполнить().Выбрать();
			 Пока ВыборкаРезультат.Следующий() Цикл
				 РазностьНаколенияРасхода = ВыборкаРезультат.НакоплениеНачальныйОстаток - ВыборкаРезультат.НакоплениеРасход;
				 Если РазностьНаколенияРасхода > 0 Тогда
					 НовыйДокументСписанияБонусов = Документы.СписаниеБонусов.СоздатьДокумент();
					 НовыйДокументСписанияБонусов.Дата = ТекущаяДата();
					 НовыйДокументСписанияБонусов.ВидСкидки = ВыборкаДействующиеСкидки.ВидСкидки;
					 НовыйДокументСписанияБонусов.Получатель = ВыборкаРезультат.Получатель;
					 НовыйДокументСписанияБонусов.СуммаСписания = РазностьНаколенияРасхода;
					 НовыйДокументСписанияБонусов.ДатаСгорания = ДатаСписанияБонусов;
					 НовыйДокументСписанияБонусов.СозданАвтоматически = Истина;
					 НовыйДокументСписанияБонусов.ВидОперации = Перечисления.ВидыОперацийРаботыСБонусами.Списание;
					 НовыйДокументСписанияБонусов.Записать(РежимЗаписиДокумента.Проведение);
				 КонецЕсли;
			 КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Контроль отрицательных остатков бонусов.
//
// Параметры:
//  Отказ						 - Булево - отказ 
//  Получатель					 - СправочникСсылка.Клиенты - получатель
//  ВидСкидки					 - СправочникСсылка.ВидыСкидок - вид скидки 
//  ВариантСообщенияПользователю - Строка - вариант сообщения.
//
Процедура КонтрольОтрицательныхОстатков(Отказ, Получатель, ВидСкидки, ВариантСообщенияПользователю = Неопределено) Экспорт
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("БонусыЗапретОтрицательныхОстатков") 
		И ВидСкидки.ТипСкидки = Перечисления.ТипыСкидок.Бонусы
	Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НакопленияПоСкидкамОстатки.НакоплениеОстаток КАК НакоплениеОстаток
		|ИЗ
		|	РегистрНакопления.НакопленияПоСкидкам.Остатки(
		|			,
		|			Получатель = &Получатель
		|				И ВидСкидки = &ВидСкидки) КАК НакопленияПоСкидкамОстатки";
		
		Запрос.УстановитьПараметр("ВидСкидки", ВидСкидки);
		Запрос.УстановитьПараметр("Получатель", Получатель);
		
		Остатки = Запрос.Выполнить().Выгрузить();
		Если Остатки.Количество() <> 0
			И Остатки[0].НакоплениеОстаток < 0
		Тогда
			Отказ = Истина;

			Если ЗначениеЗаполнено(ВариантСообщенияПользователю) Тогда
		
				ШаблонНедостаточно	 = НСтр("ru='Недостаточно: %1 бонусов.'");
				ШаблонНевозможно	 = НСтр("ru='Невозможно %1, так как количество бонусных баллов у Клиента станет отрицательным'");
				
				Если ВариантСообщенияПользователю = "ПроверкаНачисления" Тогда
					
					ТекстОшибки = СтрШаблон(ШаблонНевозможно, НСтр("ru='провести документ'"));
					
				ИначеЕсли ВариантСообщенияПользователю = "ПроверкаОтменыПроведения" Тогда
					
					ТекстОшибки = СтрШаблон(ШаблонНевозможно, НСтр("ru='отменить проведение документа'"));
					
				ИначеЕсли ВариантСообщенияПользователю = "ПроверкаCписания" Тогда
					
					ТекстОшибки = НСтр("ru='Недостаточно бонусов для списания!'");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = ТекстОшибки + " " + СтрШаблон(ШаблонНедостаточно, -Остатки[0].НакоплениеОстаток);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьПродажиСоответствующиеОтбору_ПодготовитьЭлементыОтбора(ЭлементыОтбора, ТаблицаПродажДокумента)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПолучитьПродажиСоответствующиеОтбору_ПодготовитьЭлементыОтбора(ЭлементОтбора.Элементы, ТаблицаПродажДокумента);
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолучитьПродажиСоответствующиеОтбору_ПодготовитьЭлементОтбора(ЭлементОтбора, ТаблицаПродажДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПродажиСоответствующиеОтбору_ПодготовитьЭлементОтбора(ЭлементОтбора, ТаблицаПродажДокумента)
	
	Если ЭлементОтбора.ЛевоеЗначение = Справочники.ВидыСкидок.ПолеКомпановкиСпискаНоменклатур() Тогда
		ПолучитьПродажиСоответствующиеОтбору_ПодготовитьЭлементОтбора_ПозицииКомплекта(ЭлементОтбора, ТаблицаПродажДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПродажиСоответствующиеОтбору_ПодготовитьЭлементОтбора_ПозицииКомплекта(ЭлементОтбора, ТаблицаПродажДокумента)
	
	Попытка
		мВсеНоменклатурыОтбора = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
		мНоменклатурыОтбора = Новый Массив;
		Для Каждого Номенклатура Из мВсеНоменклатурыОтбора Цикл
			Если Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
				Для Каждого НоменклатураНабора Из Номенклатура.КомплектующиеНоменклатуры Цикл
					мНоменклатурыОтбора.Добавить(НоменклатураНабора.Комплектующая);
				КонецЦикла;
			Иначе
				мНоменклатурыОтбора.Добавить(Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
		мНоменклатурыДокумента = ТаблицаПродажДокумента.ВыгрузитьКолонку("Номенклатура");
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ПравоеЗначение = Строка(Новый УникальныйИдентификатор);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		
		Для Каждого НоменклатураОтбора Из мНоменклатурыОтбора Цикл
			Если мНоменклатурыДокумента.Найти(НоменклатураОтбора) = Неопределено Тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		// Неожиданная ситуация, которую надо индицировать, но не обрывать текущую работу кассира.
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // Отбор = Ложь.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти