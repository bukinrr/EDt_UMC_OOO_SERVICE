#Область ПрограммныйИнтерфейс

// Проверить заполение документа перед проведением.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект	 - документ
//  Отказ			 - Булево			 - признак отказа записи
//  Заголовок		 - Строка			 - заголовок для сообщений об ошибках.
//
Процедура ПроверитьЗаполнениеДокумента(ДокументОбъект, Отказ, Заголовок) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.Документ) Тогда
			
			ТекстСообщенияОбОшибке = МедицинскоеСтрахование.ПроверитьПолисДействителен(ДокументОбъект.Документ, ДокументОбъект.Дата);
			
			Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.КомплексныйРасчет)
			И ДокументОбъект.ВидОперации <> Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту
		Тогда
			КомплексныеРасчетыКлиентов.ПроверитьЗаполнениеДокументаРеализацииРасчета(ДокументОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет номенклатуру, которой нет в договорах клиента, но, требует договора.
//
// Параметры:
//  ПроверяемаяНоменклатура	 - Массив	 - номенклатура.
//  Клиент					 - СправочникСсылка.Кленты	 - клиент.
//  Дата					 - Дата	 - дата проверки.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьНоменклатуруНаКоторуюНетДоговора(ПроверяемаяНоменклатура, Клиент, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",Клиент);
	Запрос.УстановитьПараметр("Номенклатура",ПроверяемаяНоменклатура);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДоговоровНоменклатуры.Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		НоменклатураВидовДоговоров.Номенклатура КАК Номенклатура,
	|		НоменклатураВидовДоговоров.ВидДоговора КАК ВидДоговора
	|	ИЗ
	|		РегистрСведений.НоменклатураВидовДоговоров КАК НоменклатураВидовДоговоров
	|	ГДЕ
	|		НоменклатураВидовДоговоров.Номенклатура В(&Номенклатура)) КАК ВидыДоговоровНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДоговорСКлиентом.ВидДоговора КАК ВидДоговора
	|		ИЗ
	|			Документ.ДоговорСКлиентом КАК ДоговорСКлиентом
	|		ГДЕ
	|			ДоговорСКлиентом.Клиент = &Клиент
	|			И ДоговорСКлиентом.Дата <= &Дата
	|			И (ДоговорСКлиентом.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИЛИ ДоговорСКлиентом.ДатаОкончания >= &Дата)
	|			И (НЕ ДоговорСКлиентом.Завершен)) КАК ВидыДоговоровКлиента
	|		ПО ВидыДоговоровНоменклатуры.ВидДоговора = ВидыДоговоровКлиента.ВидДоговора
	|ГДЕ
	|	ВидыДоговоровКлиента.ВидДоговора ЕСТЬ NULL "
	;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

// Позволяет сформировать текст сообщения номенклатуры без договора
//
// Параметры:
//  СписокНоменклатуры	 - Массив	 - номенклатура.
// 
// Возвращаемое значение:
//   Строка.
//
Функция СформироватьТекстСообщенияНоменклатурыБезДоговора(СписокНоменклатуры) Экспорт
	
	ТекстСообщения = "";
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)
		               + "На услугу """+Номенклатура+""" с клиентом нет действующего договора! Для оказания этой услуги с клиентом должен быть заключен договор!";
	КонецЦикла;

	Возврат ТекстСообщения;
	
КонецФункции

// Учитывается при формировании движений в регистре сведений Диагнозы и при проверки неизменности документа приёма, подписанного ЭЦП.
//
// Параметры:
//  ТаблицаДиагнозов - ТаблицаЗначений	 - табличная часть Диагнозы приема.
//
Процедура СвернутьТаблицуДиагнозов(ТаблицаДиагнозов) Экспорт
	
	Колонки = "Диагноз,ВыявленВпервые,Детализация,Исход,Классификация1,Классификация2,Классификация3,Сопутствующий,Травма";
	
	Если ТаблицаДиагнозов.Колонки.Найти("Профессиональное") <> Неопределено Тогда
		Колонки = Колонки + ", Профессиональное, ПримечаниеПоПротивопоказанию";
	КонецЕсли;
	
	Если ТаблицаДиагнозов.Колонки.Найти("ЗубВКарте") <> Неопределено Тогда
		Колонки = Колонки + ", ЗубВКарте, СегментВЗубе";
	КонецЕсли;
	
	ТаблицаДиагнозов.Свернуть(Колонки);
	
КонецПроцедуры

#Область НумерацияМедкарт // Процедуры и функции нумерации медицинских карт.

// Формирует и присваивает номер медкарты с учетом префиксов и суффиксов вида медкарты.
//
// Параметры:
//  Объект					 - СправочникОбъект.МедицинскиеКарты - медкарта.
//  ГенерироватьНомерКарты	 - Булево							 - если Истина, генерирует числовой номер медкарте.
//
Процедура ФормированиеНомера(Объект, ГенерироватьНомерКарты = Истина) Экспорт
	
	Если ГенерироватьНомерКарты Тогда
		Объект.НомерКарты = НайтиСвободныйНомер(Объект.ВидКарты);
	КонецЕсли;
	
	Объект.Наименование = СформироватьНомер(Объект.НомерКарты, Объект.ВидКарты, Объект.Филиал);
	
КонецПроцедуры

Функция НайтиСвободныйНомер(ВидКарты)
	НомерКарты = ВидКарты.НачальныйНомер;
	Запрос = Новый Запрос(	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МедицинскиеКарты.Ссылка,
	|	МедицинскиеКарты.НомерКарты
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|ГДЕ
	|	МедицинскиеКарты.ВидКарты = &Вид
	|
	|УПОРЯДОЧИТЬ ПО
	|	МедицинскиеКарты.НомерКарты УБЫВ");
	
	Запрос.УстановитьПараметр("Вид", ВидКарты); 	
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() <> 0 Тогда
		НомерКарты = Выборка[0].НомерКарты + 1;	
	КонецЕсли;
	
	Возврат НомерКарты; 
КонецФункции

Функция СформироватьНомер(Номер, ВидКарты, Филиал = Неопределено)
	
	ПрефиксФилиала = УправлениеНастройками.ПолучитьПараметрУчетнойПолитикиФилиала("ПрефиксМедицинскойКарты", Филиал);

	Если ВидКарты.ПрефиксФилиалаДоПрефиксаВида Тогда
		Результат = СокрЛ(ПрефиксФилиала) + СокрЛ(ВидКарты.Префикс);
	Иначе 	
		Результат = СокрЛ(ВидКарты.Префикс) + ПрефиксФилиала;
	КонецЕсли; 
	
	ДлинаНомера = Строка(ВидКарты.ДлинаНомера);
	
	ЧисловаяЧасть = Формат(Номер, "ЧЦ=" + ДлинаНомера + "; ЧВН=; ЧГ=0");
	
	Результат = Результат + ЧисловаяЧасть;
	
	Результат = ?(ЗначениеЗаполнено(ВидКарты.Суффикс), Результат + "-" + ВидКарты.Суффикс, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Получить прейскурант для строки табличной части
//
// Параметры:
//  ЭтотОбъект		 - ДокументОбъект	 - документ.
//  СтруктураСтроки	 - Структура		 - данные строки табличной части номенклатуры.
// 
// Возвращаемое значение:
//   СправочникСсылка.Прейскуранты.
//
Функция ПолучитьПрейскурантДляСтрокиТабличнойЧасти(ЭтотОбъект, СтруктураСтроки) Экспорт
	
	Прейскурант = Неопределено;
	
	Если СтруктураСтроки.Свойство("НеОплачиваетсяПолисом") 
			И Не СтруктураСтроки.НеОплачиваетсяПолисом  
			И ЗначениеЗаполнено(ЭтотОбъект.Документ.ВидПолиса.Прейскурант) 
	Тогда
		Прейскурант = ЭтотОбъект.Документ.ВидПолиса.Прейскурант;
	КонецЕсли;
	
	Возврат Прейскурант;
	
КонецФункции

// Функция позволяет найти медкарту прием по заявке из журнала записи
//
// Параметры:
//  Заказ	 - ДокументСсылка.Заявка - заявка в расписании.
// 
// Возвращаемое значение:
//   СправочникСсылка.МедицинскиеКарты.
//
Функция НайтиМедКартуПоЗаявке(Заявка) Экспорт
	МедКарта = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Прием.Ссылка
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.ДокументОснование = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Заявка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Если Выборка.Количество() <> 0 Тогда
		Если ЗначениеЗаполнено(Выборка[0].МедицинскаяКарта) Тогда
			МедКарта = Выборка[0].МедицинскаяКарта;	
		КонецЕсли;		 
	КонецЕсли;
	
	Если МедКарта = Неопределено Тогда
		Если ЗначениеЗаполнено(Заявка.Клиент.ОсновнаяМедицинскаяКарта) Тогда
			МедКарта = Заявка.Клиент.ОсновнаяМедицинскаяКарта;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	МедицинскиеКарты.Ссылка
			|ИЗ
			|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
			|ГДЕ
			|	МедицинскиеКарты.Клиент = &Клиент";
			
			Запрос.УстановитьПараметр("Клиент", Заявка.Клиент);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выгрузить();
			
			Если Выборка.Количество() <> 0 Тогда
				МедКарта = Выборка[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МедКарта;
КонецФункции

// Функция позволяет найти медкарту прием по заказу во внешнюю лабораторию
//
// Параметры:
//  Заказ		 - ДокументСсылка.ЗаказВоВнешнююЛабораторию	 - заказ.
//  Номенклатура - Массив, СправочникСсылка.Номенклатура	 - Номенклатуры заказа.
// 
// Возвращаемое значение:
//  Структура - медкарта, прием.
//    * МедКарта - Число - код субъекта РФ
//    * Прием - Строка - представление субъекта РФ.
//
Функция НайтиМедкартуПриемПоЗаказуВоВнешнююЛабораторию(Заказ, Номенклатура = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозвр = Новый Структура("МедКарта, Прием");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МедицинскиеКарты.Ссылка КАК МедКарта
		|ИЗ
		|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
		|ГДЕ
		|	МедицинскиеКарты.Клиент = &Клиент
		|	И (МедицинскиеКарты.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ МедицинскиеКарты.ДатаЗакрытия >= &ТекДата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МедицинскиеКарты.ДатаРегистрации УБЫВ";
	Запрос.УстановитьПараметр("Клиент", Заказ.Клиент);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	СписокМедкарт = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МедКарта");
	
	Если СписокМедкарт.Количество() = 0 Тогда 
		Возврат СтруктураВозвр;
	ИначеЕсли СписокМедкарт.Количество() = 1 Тогда 
		СтруктураВозвр.МедКарта = СписокМедкарт[0];
	КонецЕсли;
	
	Если Номенклатура <> Неопределено Тогда
		НайтиМедкартуПриемПоЗаказуВоВнешнююЛабораториюПоНоменклатуре(Заказ.Клиент, Номенклатура, СписокМедкарт, СтруктураВозвр);
		Если ЗначениеЗаполнено(СтруктураВозвр.МедКарта) Тогда
			Возврат СтруктураВозвр;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КартыИПриемы.ПервичныйПрием КАК ПервичныйПрием,
		|	КартыИПриемы.МедКарта КАК МедКарта
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Прием.ПервичныйПрием КАК ПервичныйПрием,
		|		Прием.МедицинскаяКарта КАК МедКарта
		|	ИЗ
		|		Документ.Прием КАК Прием
		|	ГДЕ
		|		Прием.МедицинскаяКарта В(&СписокМедкарт)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Прием.ПервичныйПрием,
		|		Прием.МедицинскаяКарта
		|	
		|	ИМЕЮЩИЕ
		|		МАКСИМУМ(Прием.Закрыт) = ЛОЖЬ) КАК КартыИПриемы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МедицинскиеКарты КАК МедКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Клиенты КАК Клиенты
		|			ПО (Клиенты.Ссылка = МедКарты.Клиент)
		|		ПО (МедКарты.Ссылка = КартыИПриемы.МедКарта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Клиенты.ОсновнаяМедицинскаяКарта = КартыИПриемы.МедКарта УБЫВ";
	Запрос.УстановитьПараметр("СписокМедкарт", СписокМедкарт);
	СписокМедкартПоНеЗакрытымПриемам = Запрос.Выполнить().Выгрузить();
	
	Если СписокМедкартПоНеЗакрытымПриемам.Количество() = 1 Тогда 
		
		СтруктураВозвр.МедКарта = СписокМедкартПоНеЗакрытымПриемам[0].МедКарта;
		СтруктураВозвр.Прием = СписокМедкартПоНеЗакрытымПриемам[0].ПервичныйПрием;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриемРаботы.Номенклатура КАК Номенклатура,
			|	ПриемРаботы.НомерПробы КАК НомерПробы,
			|	ПриемРаботы.Ссылка.ПервичныйПрием КАК ПервичныйПрием
			|ПОМЕСТИТЬ РаботыПриемов
			|ИЗ
			|	Документ.Прием.Работы КАК ПриемРаботы
			|ГДЕ
			|	ПриемРаботы.Ссылка.МедицинскаяКарта В(&СписокМедкарт)
			|	И ПриемРаботы.НомерПробы <> """"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РаботыПриемов.ПервичныйПрием.МедицинскаяКарта КАК МедКарта,
			|	РаботыПриемов.ПервичныйПрием КАК ПервичныйПрием
			|ИЗ
			|	РаботыПриемов КАК РаботыПриемов
			|ГДЕ
			|	РаботыПриемов.НомерПробы В
			|			(ВЫБРАТЬ
			|				ЗаказВоВнешнююЛабораториюИсследования.КодПробы
			|			ИЗ
			|				Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
			|			ГДЕ
			|				ЗаказВоВнешнююЛабораториюИсследования.Ссылка = &Заказ)";
		Запрос.УстановитьПараметр("СписокМедкарт", СписокМедкарт);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		СписокМедкартПоКодуПробы = Запрос.Выполнить().Выгрузить();
		
		Если СписокМедкартПоКодуПробы.Количество() > 0 Тогда 
			СтруктураВозвр.МедКарта = СписокМедкартПоКодуПробы[0].МедКарта;
			СтруктураВозвр.Прием = СписокМедкартПоКодуПробы[0].ПервичныйПрием;
		ИначеЕсли СписокМедкартПоНеЗакрытымПриемам.Количество() > 0 Тогда 
			СтруктураВозвр.МедКарта = СписокМедкартПоНеЗакрытымПриемам[0].МедКарта;
			СтруктураВозвр.Прием = СписокМедкартПоНеЗакрытымПриемам[0].ПервичныйПрием;
		ИначеЕсли СписокМедкарт.Количество() <> 0 Тогда
			СтруктураВозвр.МедКарта = СписокМедкарт[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозвр;
	
КонецФункции

// Функция позволяет получить доп поля владельца ШКДля обработки
//
// Параметры:
//  ВладелецШК	 - ЛюбаяСсылка	 - ссылка на владельца штрихкода.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьДопПоляВладельцаШКДляОбработки(ВладелецШК) Экспорт
	
	Результат = Новый Структура;
	
	Если ТипЗнч(ВладелецШК) = Тип("СправочникСсылка.КартыСкидок") Тогда
		Результат.Вставить("ВладелецКарты", ВладелецШК.ВладелецКарты);
	КонецЕсли;
	
	Если ТипЗнч(ВладелецШК) = Тип("СправочникСсылка.МедицинскиеКарты") Тогда
		Результат.Вставить("Клиент",ВладелецШК.Клиент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает наиболее основную медкарту клиента.
//
// Параметры:
//  Клиент			 - СправочникСсылка.Клиенты	 - Клиент.
//  КартыИсключения	 - Массив, СправочникСсылка.МедицинскиеКарты - Карта или массив элементов СправочникСсылка.МедицинскиеКарты.
// 
// Возвращаемое значение:
//   СправочникСсылка.МедицинскиеКарты.
//
Функция ПолучитьОсновнуюМедКартуКлиента(Клиент, КартыИсключения = Неопределено) Экспорт
	
	МедицинскаяКарта = Справочники.МедицинскиеКарты.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		
		МедицинскаяКарта = Клиент.ОсновнаяМедицинскаяКарта;
		Если Не ЗначениеЗаполнено(МедицинскаяКарта) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Клиент", Клиент);
			Запрос.УстановитьПараметр("КартыИсключения", КартыИсключения);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	МедицинскиеКарты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
			|ГДЕ
			|	МедицинскиеКарты.Клиент = &Клиент
			|	И (&КартыИсключения = НЕОПРЕДЕЛЕНО
			|			ИЛИ НЕ МедицинскиеКарты.Ссылка В (&КартыИсключения))"
			;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				МедицинскаяКарта = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МедицинскаяКарта;
	
КонецФункции

// Определяет реально оплачиваемую клиентом сумму в зависимости от использования полиса в документе оплаты.
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти	 - строка табличной части номенклатуры.
//  ДокументОУ			 - ДокументОбъект.ОказаниеУслуг	 - документ
// 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьОплачиваемуюСуммуСтрокиТЧ(СтрокаТабличнойЧасти, ДокументОУ) Экспорт
	// Оплаты по полису не включаются в суммы чеков
	Если Не МедицинскаяДеятельностьПовтИсп.ИспользуютсяПолисы() Тогда
		Возврат СтрокаТабличнойЧасти.Сумма;
	Иначе
		Если ЗначениеЗаполнено(ДокументОУ.Документ) Тогда
			Если СтрокаТабличнойЧасти.НеОплачиваетсяПолисом Тогда
				Возврат СтрокаТабличнойЧасти.Сумма;
			Иначе
				Возврат СтрокаТабличнойЧасти.СуммаНеПоПолису;	
			КонецЕсли;
		Иначе
			Возврат СтрокаТабличнойЧасти.Сумма;	
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Определяет полностью ли номенклатура в строке ТЧ оплачивается полисом.
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти	 - строка табличной части номенклатуры.
//  ДокументОУ			 - ДокументОбъект.ОказаниеУслуг	 - документ
// 
// Возвращаемое значение:
//   Булево.
//
Функция НоменклатураПолностьОплачиваетсяПолисом(СтрокаТабличнойЧасти, ДокументОУ) Экспорт
	Если Не МедицинскаяДеятельностьПовтИсп.ИспользуютсяПолисы() Тогда
		Возврат Ложь;
	Иначе
		Если ЗначениеЗаполнено(ДокументОУ.Документ) Тогда
			Если СтрокаТабличнойЧасти.НеОплачиваетсяПолисом Тогда
				Возврат Ложь;
			Иначе
				Если СтрокаТабличнойЧасти.СуммаНеПоПолису > 0 Тогда
					Возврат Ложь;
				Иначе
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;	
КонецФункции

// Формирует ФИО и его части из текущих значений.
//
// Параметры:
//  Наименование - Строка	 - Наименование физического лица.
//  Фамилия		 - Строка	 - Фамилия физического лица.
//  Имя			 - Строка	 - Имя физического лица.
//  Отчество	 - Строка	 - Отчество физического лица.
// 
// Возвращаемое значение:
//   Соответствие.
//
Функция КонтрольКорректностиФИО(Наименование, Фамилия = Неопределено, Имя = Неопределено, Отчество = Неопределено) Экспорт
	
	ФИО = Новый Соответствие;
	
	// Части ФИО
	Если Фамилия <> Неопределено Тогда
		ФИО.Вставить("Фамилия", ЗаменаБуквыС(Фамилия));
		ФИО.Вставить("Имя", ЗаменаБуквыС(Имя));
		ФИО.Вставить("Отчество", ЗаменаБуквыС(Отчество));
	КонецЕсли;
	
	// Наименование
	ИсправленноеНаименование = Новый Массив;
	Для Каждого ЧастьФИО Из СтрРазделить(Наименование," ", Ложь) Цикл
		ИсправленноеНаименование.Добавить(ЗаменаБуквыС(ЧастьФИО));
	КонецЦикла;
	ФИО.Вставить("Наименование", СтрСоединить(ИсправленноеНаименование," "));
	
	Возврат ФИО;
	
КонецФункции

// Функция - Номенклатуры заказа
//
// Параметры:
//  Заказ	 - ДокументСсылка.ЗаказВоВнешнююЛабораторию	 - заказ.
// 
// Возвращаемое значение:
//  Массив, Неопределено - Номенклатуры исследований заказа, если есть.
//
Функция НоменклатурыЗаказа(Заказ) Экспорт
	
	Если Не (ЗначениеЗаполнено(Заказ) И ДопСерверныеФункции.ИмяСсылочногоТипа(Заказ) = "Документ.ЗаказВоВнешнююЛабораторию") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоменклатурыЗаказа = Заказ.Исследования.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Если НоменклатурыЗаказа.Количество() > 0 Тогда
		Возврат НоменклатурыЗаказа;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область Сотрудники_Пользователи_ФизЛица

Функция СотрудникПользователяПоФилиалу(Пользователь, Филиал) Экспорт
	
	Если ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	Если Константы.ФизическиеЛицаИспользуются.Значение()
		И ЗначениеЗаполнено(Пользователь.ФизическоеЛицо)
		И ЗначениеЗаполнено(Филиал)
	Тогда
		СотрудникиПоФизЛицу = СотрудникиПользователяТаблица(Пользователь);
		
		ПравилаПоиска = Новый Массив;
		ПравилаПоиска.Добавить(Новый Структура("Филиал", Филиал)); // По совпадению филиала
		ПравилаПоиска.Добавить(Новый Структура("Организация", Филиал.Организация)); // По совпадению организации
		ПравилаПоиска.Добавить(Новый Структура("Филиал", Справочники.Филиалы.ПустаяСсылка())); // По пустому филиалу, низжий приоритет.
		
		Для Каждого ПравилоПоиска Из ПравилаПоиска Цикл
			Найденные = СотрудникиПоФизЛицу.НайтиСтроки(ПравилоПоиска);
			Если Найденные.Количество() > 0 Тогда
				Возврат Найденные[0].Сотрудник;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Справочники.Сотрудники.ПустаяСсылка(); // Нет подходящих.
	Иначе
		Возврат Пользователь.Сотрудник;
	КонецЕсли;
	
КонецФункции

Функция СотрудникиПользователя(Пользователь, ВключаяПомеченныхНаУдаление = Истина) Экспорт
	
	Если Константы.ФизическиеЛицаИспользуются.Значение()
		И ЗначениеЗаполнено(Пользователь.ФизическоеЛицо)
	Тогда
		СотрудникиПоФизЛицу = СотрудникиПользователяТаблица(Пользователь, ВключаяПомеченныхНаУдаление);
		Если СотрудникиПоФизЛицу.Количество() > 0 Тогда
			Возврат СотрудникиПоФизЛицу.ВыгрузитьКолонку("Сотрудник");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.НовыйМассив(Пользователь.Сотрудник);
	
КонецФункции

Функция СотрудникиПользователяТаблица(Пользователь, ВключаяПомеченныхНаУдаление = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Подразделения.Филиал КАК Филиал,
		|	Подразделения.Филиал.Организация КАК Организация
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения КАК Подразделения
		|		ПО Сотрудники.Подразделение = Подразделения.Ссылка
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
		|	И (&ВключаяПомеченныхНаУдаление = ИСТИНА ИЛИ Сотрудники.ПометкаУдаления = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", Пользователь.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ВключаяПомеченныхНаУдаление", ВключаяПомеченныхНаУдаление);
	
	СотрудникиПользователя = Запрос.Выполнить().Выгрузить(); // Сотрудники пользователя по физ.лицу.
	
	// Учитываем основного сотрудника
	ОсновнойСотрудник = Пользователь.Сотрудник;
	Если ЗначениеЗаполнено(ОсновнойСотрудник)
		И СотрудникиПользователя.Найти(ОсновнойСотрудник, "Сотрудник") = Неопределено
		// И Не ОсновнойСотрудник.ПометкаУдаления
	Тогда
		СтрокаСотрудник = СотрудникиПользователя.Вставить(0);
		СтрокаСотрудник.Сотрудник = ОсновнойСотрудник;
		СтрокаСотрудник.Филиал = ОсновнойСотрудник.Подразделение.Филиал;
		СтрокаСотрудник.Организация = СтрокаСотрудник.Филиал.Организация;
	КонецЕсли;
	
	Возврат СотрудникиПользователя;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаменаБуквыС(ЧастьФИО)
	
	Если Лев(ЧастьФИО, 1) = "C" // Английская "C". 
		И СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Сред(ЧастьФИО, 2, 1))
	Тогда
		Возврат Символ(1057) + Сред(ЧастьФИО, 2); // Русская "С".
	Иначе
		Возврат ЧастьФИО;
	КонецЕсли;
	
КонецФункции

Процедура НайтиМедкартуПриемПоЗаказуВоВнешнююЛабораториюПоНоменклатуре(Клиент, Номенклатура, СписокМедкарт, СтруктураВозвр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Данные.МедицинскаяКарта КАК МедКарта,
		|	Данные.ПервичныйПрием КАК Прием
		|ИЗ
		|	(ВЫБРАТЬ
		|		Приемы.Дата КАК Дата,
		|		Приемы.МедицинскаяКарта КАК МедицинскаяКарта,
		|		ПланыЛечения.ПервичныйПрием КАК ПервичныйПрием,
		|		ПланыЛечения.Количество КАК Количество,
		|		СУММА(ЕСТЬNULL(ВыполнениеПланаЛечения.Количество, 0)) КАК Выполнено
		|	ИЗ
		|		РегистрСведений.ПланыЛечения КАК ПланыЛечения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Прием.Ссылка КАК Ссылка,
		|				Прием.Дата КАК Дата,
		|				Прием.МедицинскаяКарта КАК МедицинскаяКарта
		|			ИЗ
		|				Документ.Прием КАК Прием
		|			ГДЕ
		|				Прием.Проведен = ИСТИНА
		|				И Прием.Клиент = &Клиент
		|				И Прием.Дата >= &Дата
		|				И Прием.МедицинскаяКарта <> ЗНАЧЕНИЕ(Справочник.МедицинскиеКарты.ПустаяСсылка)) КАК Приемы
		|			ПО ПланыЛечения.ДокументРегистратор = Приемы.Ссылка
		|				И (ПланыЛечения.Номенклатура В (&Номенклатура))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
		|			ПО (ВыполнениеПланаЛечения.ИдентификаторЭлемента = ПланыЛечения.ИдентификаторЭлемента)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Приемы.Дата,
		|		Приемы.МедицинскаяКарта,
		|		ПланыЛечения.ПервичныйПрием,
		|		ПланыЛечения.Количество) КАК Данные
		|ГДЕ
		|	Данные.Выполнено < Данные.Количество
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()-90*86400);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозвр, Выборка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти