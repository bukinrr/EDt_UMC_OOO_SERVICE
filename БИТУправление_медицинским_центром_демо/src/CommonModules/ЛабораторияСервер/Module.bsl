#Область ПрограммныйИнтерфейс

// Вызывается при установке параметров сеанса в начале работы приложения.
//
Процедура УстановкаПараметровСеанса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.АктуальностьСправочниковЛабораторийПроверена = Ложь;
	УстановитьПривилегированныйРежим(Ложь);
	
	#Область ВнешниеЛаборатории
	ЗаполнитьКэшНСИЛабораторий(Истина);
	#КонецОбласти
	
КонецПроцедуры

// Переадресует обработчикам видов лабораторий задачу обновления справочников.
//
// Параметры:
//  ОбновитьБезПроверкиДаты	 - Булево	 - следует ли учитывать актуальность ранее загруженной НСИ по текущей дате.
//
Процедура ОбновитьСправочники(ОбновитьБезПроверкиДаты = Ложь) Экспорт
	
	ЕстьИзмененияНСИ = Ложь;
	
	ВидыЛаборатории = ПолучитьВидыЛабораторий();
	
	Для Каждого ВидЛаборатории Из ВидыЛаборатории Цикл
		МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВидЛаборатории);
		Если МодульОбработчик <> Неопределено Тогда
			Попытка
				ЕстьИзменения = МодульОбработчик.ОбновитьСправочники(ОбновитьБезПроверкиДаты);
				ЕстьИзмененияНСИ = ЕстьИзмененияНСИ Или ЕстьИзменения;
			Исключение
				ЗаписьЖурналаРегистрации("ЛабораторияСервер.ОбновитьСправочники", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		Иначе
			Продолжить;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает настройки учета работы с лабораториями
// 
// Возвращаемое значение:
//  Структура - значения настроек учета.
//
Функция НастройкиУчетаЛабораторий() Экспорт
	
	НастройкиУчета = Новый Структура("ИспользуетсяРасширеннаяВнутренняяЛаборатория,
									 |УпрощеннаяЛабораторияИспользуется,
									 |ИспользуетсяИнтеграцияСВнешнимиЛабораториями,
									 |", Ложь, Ложь, Ложь);
	
	НастройкиУчета.Вставить("Helix_ИспользуетсяИнтеграцияСHelix", Ложь);
	НастройкиУчета.Вставить("Invitro_ИспользуетсяИнтеграцияСInvitro", Ложь);
	НастройкиУчета.Вставить("СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб", Ложь);
	НастройкиУчета.Вставить("КДЛ_ИспользуетсяИнтеграцияСКДЛ", Ложь);
	НастройкиУчета.Вставить("Гемотест_ИспользуетсяИнтеграцияСГемотест", Ложь);
	
	нзНастройкиМедицинскогоУчета = РегистрыСведений.НастройкиМедицинскогоУчета.СоздатьНаборЗаписей();
	нзНастройкиМедицинскогоУчета.Прочитать();
	
	Если нзНастройкиМедицинскогоУчета.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(НастройкиУчета, нзНастройкиМедицинскогоУчета[0]);
	КонецЕсли;
	
	Возврат НастройкиУчета;
	
КонецФункции

// Возвращает настройки учета работы с лабораториями с учетом контекста конкретного документа, в том числе, возможно, старого, введенного в прошлых вариантах функционала лабораторий.
//
// Параметры:
//  Документ - ДокументСсылка.ДействияНадАнализами	 - документ лабораторной операции.
// 
// Возвращаемое значение:
//  Структура.
//
Функция НастройкиУчетаДляДействияНадАнализами(Документ) Экспорт
	
	Настройки = НастройкиУчетаЛабораторий();
	
	// Если это старый документ с несколькими клиентами, открываем его в упрощенном режиме
	ЭтоСтарыйДокументНесколькоКлиентов = Документ.Исследования.Количество() <> 0 И Документ.Исследования.НайтиСтроки(Новый Структура("Клиент", Документ.Исследования[0].Клиент)).Количество() <> Документ.Исследования.Количество();
	
	Настройки.ИспользуетсяИнтеграцияСВнешнимиЛабораториями = Настройки.ИспользуетсяИнтеграцияСВнешнимиЛабораториями И Не ЭтоСтарыйДокументНесколькоКлиентов;
	Настройки.ИспользуетсяРасширеннаяВнутренняяЛаборатория = Настройки.ИспользуетсяРасширеннаяВнутренняяЛаборатория И Не ЭтоСтарыйДокументНесколькоКлиентов;
	
	Настройки.Вставить("ИспользуетсяРасширеннаяЛаборатория", Настройки.ИспользуетсяИнтеграцияСВнешнимиЛабораториями Или Настройки.ИспользуетсяРасширеннаяВнутренняяЛаборатория);
	
	Возврат Настройки;
	
КонецФункции

// Создает и возвращает кеш справочной информации лабораторий.
//
// Параметры:
//  ПриНачалеРаботы	 - Булево	 - если Истина - при открытии программы, если Ложь - в момент, когда уже надо применить.
// 
// Возвращаемое значение:
//  Структура.
//
Функция ЗаполнитьКэшНСИЛабораторий(ПриНачалеРаботы = Ложь, ВернутьДанныеКеша = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.КешНСИЛабораторий = Новый ХранилищеЗначения(Неопределено);
	
	// Если нет роли ЛабораторныеИсследования и это не начало работы, то не заполняем кеш.
	Попытка
		Если Не ИнициироватьКешНСИПриНачалеРаботы() И ПриНачалеРаботы Тогда
			Возврат Неопределено;	
		КонецЕсли; 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// Общий кэш НСИ лабораторий
	КешНСИЛабораторий = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
#Область ГруппыАнализов
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыНоменклатурыАнализов.Пользователь КАК Пользователь,
	|	ГруппыНоменклатурыАнализов.Номенклатура КАК Номенклатура,
	|	ГруппыНоменклатурыАнализов.Номенклатура.Представление КАК Представление,
	|	ГруппыНоменклатурыАнализов.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ ГруппыАнализовПредв
	|ИЗ
	|	РегистрСведений.ГруппыНоменклатурыАнализов КАК ГруппыНоменклатурыАнализов
	|ГДЕ
	|	(ГруппыНоменклатурыАнализов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИЛИ ГруппыНоменклатурыАнализов.Пользователь = &Пользователь)
	|	И НЕ ГруппыНоменклатурыАнализов.Номенклатура.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыНоменклатурыАнализов.Номенклатура,
	|	ГруппыНоменклатурыАнализов.Пользователь,
	|	ГруппыНоменклатурыАнализов.Номенклатура.Представление,
	|	ГруппыНоменклатурыАнализов.Лаборатория
	|
	|ИМЕЮЩИЕ
	|	ГруппыНоменклатурыАнализов.Пользователь = МАКСИМУМ(ГруппыНоменклатурыАнализов.Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыАнализовПредв.Пользователь КАК Пользователь,
	|	ГруппыАнализовПредв.Номенклатура КАК Номенклатура,
	|	ГруппыАнализовПредв.Лаборатория КАК Лаборатория,
	|	NULL КАК Родитель,
	|	ГруппыАнализовПредв.Представление КАК Представление
	|ПОМЕСТИТЬ ГруппыАнализов
	|ИЗ
	|	ГруппыАнализовПредв КАК ГруппыАнализовПредв
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодгруппыАнализовПредв.Пользователь,
	|	НоменклатураСправочник.Ссылка,
	|	ПодгруппыАнализовПредв.Лаборатория,
	|	НоменклатураСправочник.Родитель,
	|	НоменклатураСправочник.Представление
	|ИЗ
	|	ГруппыАнализовПредв КАК ПодгруппыАнализовПредв
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО ПодгруппыАнализовПредв.Номенклатура = НоменклатураСправочник.Родитель
	|ГДЕ
	|	НоменклатураСправочник.ЭтоГруппа
	|	И НЕ НоменклатураСправочник.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыАнализов.Пользователь КАК Пользователь,
	|	ГруппыАнализов.Номенклатура КАК Значение,
	|	ГруппыАнализов.Лаборатория КАК Лаборатория,
	|	ГруппыАнализов.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА ГруппыАнализов.Родитель ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок,
	|	ГруппыАнализов.Представление КАК Представление
	|ИЗ
	|	ГруппыАнализов КАК ГруппыАнализов
	|";
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Сортировать("Порядок, Представление");
	
	КешНСИЛабораторий.Вставить("ГруппыАнализов", ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица));
#КонецОбласти
	
	#Область НоменклатураГрупп
	// Упорядочивание по ID лабораторий.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Анализы.Ссылка КАК Номенклатура,
	|	Анализы.Представление КАК ПредставлениеНоменклатуры,
	|	Анализы.Родитель КАК Группа,
	|	НоменклатураАнализов.ID КАК ИД,
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ Анализы
	|ИЗ
	|	Справочник.Номенклатура КАК Анализы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НомоменклатураID.Лаборатория КАК Лаборатория,
	|			НомоменклатураID.Номенклатура КАК Номенклатура,
	|			НомоменклатураID.ID КАК ID
	|		ИЗ
	|			РегистрСведений.НоменклатураАнализов КАК НомоменклатураID
	|		ГДЕ
	|			НомоменклатураID.Номенклатура.Родитель В
	|					(ВЫБРАТЬ
	|						ГруппыАнализов.Номенклатура
	|					ИЗ
	|						ГруппыАнализов)) КАК НоменклатураАнализов
	|		ПО Анализы.Ссылка = НоменклатураАнализов.Номенклатура
	|ГДЕ
	|	НЕ Анализы.ПометкаУдаления
	|	И НЕ Анализы.Архив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Анализы.Номенклатура КАК Номенклатура,
	|	Анализы.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры,
	|	Анализы.Группа КАК Группа,
	|	Анализы.ИД КАК ИД,
	|	Анализы.Лаборатория КАК Лаборатория,
	|	Анализы.Номенклатура.Комментарий КАК Комментарий
	|ИЗ
	|	Анализы КАК Анализы
	|ГДЕ
	|	НЕ Анализы.Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Анализы.Лаборатория,
	|	ИД,
	|	ПредставлениеНоменклатуры";
	
	КешНСИЛабораторий.Вставить("НоменклатураГрупп", ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить()));
	#КонецОбласти
	
	#Область ПриоритетыАнализов
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Филиал КАК Филиал,
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Приоритет КАК Приоритет,
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Номенклатура КАК Номенклатура,
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Лаборатория КАК Лаборатория
	|ИЗ
	|	РегистрСведений.ПриоритетыРаспределенияАнализовПоЛабораториям КАК ПриоритетыРаспределенияАнализовПоЛабораториям
	|ГДЕ
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Приоритет > 0
	|	И НЕ ПриоритетыРаспределенияАнализовПоЛабораториям.Номенклатура.ПометкаУдаления
	|	И НЕ ПриоритетыРаспределенияАнализовПоЛабораториям.Номенклатура.Архив
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Приоритет";
	ПриоритетыИсследований = Запрос.Выполнить().Выгрузить();
	КешНСИЛабораторий.Вставить("ПриоритетыИсследований", ПоместитьВоВременноеХранилище(ПриоритетыИсследований, Новый УникальныйИдентификатор));
	
	#КонецОбласти
	
	ПараметрыСеанса.КешНСИЛабораторий = Новый ХранилищеЗначения(КешНСИЛабораторий);
	
	ВидыЛаборатории = ПолучитьВидыЛабораторий();
	Для Каждого ВидЛаборатории Из ВидыЛаборатории Цикл
		Попытка
			ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВидЛаборатории).ЗаполнитьКэшНСИЛаборатории();
		Исключение
		КонецПопытки
	КонецЦикла;
	
	ЗаполнитьКешАнализовЛабораторий();
	
	Если ВернутьДанныеКеша Тогда
		Возврат КешНСИЛабораторий;
	КонецЕсли;
	
КонецФункции

// Возвращает кеш справочной информации лабораторий, сохраненный на стороне сервера.
// 
// Возвращаемое значение:
//  Структура. 
//
Функция ПолучитьКешНСИЛабораторий() Экспорт
	Возврат ПараметрыСеанса.КешНСИЛабораторий.Получить();	
КонецФункции

Процедура ЗаполнитьКешАнализовЛабораторий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КешАнализовЛабораторий = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НЕ НоменклатураАнализов.Исключен
	|ИТОГИ ПО
	|	Лаборатория"
	;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаЛаборатория = Выборка.Выбрать();
		МассивНоменклатура = Новый Массив;
		Пока ВыборкаЛаборатория.Следующий() Цикл
			МассивНоменклатура.Добавить(ВыборкаЛаборатория.Номенклатура);
		КонецЦикла;
		КешАнализовЛабораторий.Вставить(Выборка.Лаборатория, МассивНоменклатура);
	КонецЦикла;
		
	ПараметрыСеанса.КешАнализовЛабораторий = Новый ХранилищеЗначения(КешАнализовЛабораторий);
	
КонецПроцедуры

// Возвращает сохраненный на стороне сервера кеш информации о доступных анализах/исследованиях внешних лабораторий.
// 
// Возвращаемое значение:
//  Соответствие
//
Функция ПолучитьКешАнализовЛабораторий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		КешАнализовЛабораторий = ПараметрыСеанса.КешАнализовЛабораторий.Получить();
	Исключение
		КешАнализовЛабораторий = Новый Соответствие;
	КонецПопытки;
	
	Возврат КешАнализовЛабораторий;
	
КонецФункции

// Вызывает проверку актуальности справочников лабораторий по каждому виду лаборатории
//  и возвращает массив лабораторий, у которых справочники неактуальны и их необходимо обновить.
// 
// Возвращаемое значение:
//  МассивЛаборатории - Массив из СправочникСсылка.Лаборатории - лаборатории с неактуальными справочниками.
//
Функция ПроверитьАктуальностьСправочниковЛабораторий() Экспорт
	
	МассивЛаборатории = Новый Массив;
	
	ВнешниеЛаборатории = Перечисления.ВнешниеЛаборатории;
	Для Каждого ВнешняяЛаборатория Из ВнешниеЛаборатории Цикл
		Попытка
			ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВнешняяЛаборатория).ПроверитьАктуальностьСправочниковЛабораторий(МассивЛаборатории);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивЛаборатории;
	
КонецФункции

Функция ФормаНастройкиИнтеграцииСЛабораторией(Лаборатория) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	ВидЛаборатории = Лаборатория.ВнешняяЛаборатория;
	ПеречисленияВнешниеЛаборатории = Перечисления.ВнешниеЛаборатории;
	
	ИмяФункциональнойОпции = СтрШаблон("%1_ИспользуетсяИнтеграцияС%1", Метаданные.Перечисления.ВнешниеЛаборатории.ЗначенияПеречисления.Получить(Перечисления.ВнешниеЛаборатории.Индекс(Лаборатория.ВнешняяЛаборатория)).Имя);
	
	Попытка
		ИнтеграцияИспользуется = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	Исключение
		ИнтеграцияИспользуется = Истина;
	КонецПопытки;
	
	СтруктураВозврата.Вставить("ИнтеграцияИспользуется", ИнтеграцияИспользуется);
	
	Если ИнтеграцияИспользуется Тогда
		
		ЗначенияКлюча = Новый Структура("Лаборатория", Лаборатория);
		ИмяРегистраНастроек = "";
		Если ВидЛаборатории = ПеречисленияВнешниеЛаборатории.Helix Тогда
			ИмяРегистраНастроек = "Helix_НастройкиВзаимодействия";
	   	ИначеЕсли ВидЛаборатории = ПеречисленияВнешниеЛаборатории.СитиЛаб Тогда  
			ИмяРегистраНастроек = "СитиЛаб_НастройкиВзаимодействия";
		ИначеЕсли ВидЛаборатории = ПеречисленияВнешниеЛаборатории.КДЛ Тогда
			ИмяРегистраНастроек = "КДЛ_НастройкиВзаимодействия";
		ИначеЕсли ВидЛаборатории = ПеречисленияВнешниеЛаборатории.Гемотест Тогда
			ИмяРегистраНастроек = "Гемотест_НастройкиВзаимодействия";
		ИначеЕсли ВидЛаборатории = ПеречисленияВнешниеЛаборатории.Invitro Тогда
			ИмяРегистраНастроек = "invНастройкиПодразделения";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяРегистраНастроек) Тогда
			Если ВидЛаборатории = ПеречисленияВнешниеЛаборатории.Invitro Тогда // Инвитро
				СтруктураВозврата.Вставить("ИмяФормы", СтрШаблон("РегистрСведений.%1.ФормаСписка", ИмяРегистраНастроек));
			Иначе // Все остальные встроенные внешние лаборатории
				СтруктураВозврата.Вставить("ИмяФормы", СтрШаблон("РегистрСведений.%1.ФормаЗаписи", ИмяРегистраНастроек));
				
				Запись = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ЗначенияКлюча);
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					СтруктураВозврата.Вставить("Ключ", РегистрыСведений[ИмяРегистраНастроек].СоздатьКлючЗаписи(ЗначенияКлюча));
				Иначе
					СтруктураВозврата.Вставить("ЗначенияЗаполнения", ЗначенияКлюча);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#Область ЗагрузкаПараметровЗабора

// Определяет, есть ли уже в базе параметры забора указанного вида лаборатории.
//
// Параметры:
//  ВидЛаборатории	 - ПеречислениеСсылка.ВнешниеЛаборатории - лаборатория.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПараметрыЗабораАнализовЗаполненыЛаборатории(ВидЛаборатории) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЛаборатории", ВидЛаборатории);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
	|ГДЕ
	|	ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = &ВидЛаборатории
	|	И НЕ ПараметрыЗабораАнализовIDПараметров.Ссылка.Предопределенный"
	;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗагрузитьПараметрыЗабораИзВнутреннихМакетов(ВидЛаборатории, ТребованиеКЗаполненностиВБазе = Неопределено) Экспорт
	
	// Проверка требования к заполнености в базе (наличию в базе параметров этого вида лаборатории).
	Если ТребованиеКЗаполненностиВБазе = Неопределено Тогда
		ЗаполненостьВБазе = Неопределено;
	Иначе
		ЗаполненостьВБазе = ПараметрыЗабораАнализовЗаполненыЛаборатории(ВидЛаборатории);
	КонецЕсли;
	
	Если ЗаполненостьВБазе <> ТребованиеКЗаполненностиВБазе Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка
	ИмяВидаЛаборатории = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидЛаборатории);
	
	ИмяМакета = ИмяВидаЛаборатории + "_ПараметрыЗабораАнализов";
	Если Метаданные.ПланыВидовХарактеристик.ПараметрыЗабораАнализов.Макеты.Найти(ИмяМакета) <> Неопределено Тогда
		МакетПараметровЗабораВидаЛаборатории = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеВыгрузки = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.ПолучитьМакет(ИмяМакета);
		ОбщегоНазначенияСервер.ВыполнитьЗагрузкуУниверсальнымОбменомXML(ДвоичныеДанныеВыгрузки);
	Исключение
	КонецПопытки;
	
	ЛабораторияСервер.ЗагрузитьСведенияОПериодеПодстановкиЗначенийПараметровЗаполнения(ИмяВидаЛаборатории);
	
КонецПроцедуры

// Обновляет реквизит срока действительности прошлого значения параметра
//
// Параметры:
//  ВидЛаборатории	 - Строка - строковое представление ПеречислениеСсылка.ВнешниеЛаборатории загружаемой лаборатории.
//
Процедура ЗагрузитьСведенияОПериодеПодстановкиЗначенийПараметровЗаполнения(ВидЛаборатории) Экспорт
	
	ТабДокумент = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.ПолучитьМакет("СрокиАктуальностиПрошлыхЗначенийПараметровЗабора");
	
	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;

    ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	
	// Таблица значений из табличного документа
    ОбластьЯчеек = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
    ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
    ПостроительОтчета = Новый ПостроительОтчета;
    ПостроительОтчета.ИсточникДанных = ИсточникДанных;
    ПостроительОтчета.Выполнить();
    ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                |	ТаблицаИзМакета.Наименование КАК Наименование,
	                |	ТаблицаИзМакета.СрокАктуальностиПрошлогоЗначения КАК СрокАктуальностиПрошлогоЗначения,
	                |	ТаблицаИзМакета.ID КАК ID
	                |ПОМЕСТИТЬ ВТ
	                |ИЗ
	                |	&ТабЗначений КАК ТаблицаИзМакета
	                |ГДЕ
	                |	ТаблицаИзМакета.ВидЛаборатории = &ВидЛаборатории
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПараметрыЗабораАнализовIDПараметров.Ссылка КАК Ссылка,
	                |	ВТ.СрокАктуальностиПрошлогоЗначения КАК СрокАктуальностиПрошлогоЗначения
	                |ИЗ
	                |	ВТ КАК ВТ
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
	                |		ПО ВТ.Наименование = ПараметрыЗабораАнализовIDПараметров.Ссылка.Наименование
	                |			И ВТ.ID = ПараметрыЗабораАнализовIDПараметров.ID";
	
	Запрос.УстановитьПараметр("ВидЛаборатории", ВидЛаборатории);
	Запрос.УстановитьПараметр("ТабЗначений",ТабЗначений);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ПараметрЗабора Из Результат Цикл
		
		ОбъектПараметрЗабора = ПараметрЗабора.Ссылка.ПолучитьОбъект();
		ОбъектПараметрЗабора.СрокАктуальностиПрошлогоЗначения = ПараметрЗабора.СрокАктуальностиПрошлогоЗначения;
		ОбъектПараметрЗабора.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныЭтикеток

Функция ПолучитьШаблонЭтикеткиЛаборатории(Лаборатория)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
	Если МодульОбработчик <> Неопределено Тогда
		Попытка
			Возврат МодульОбработчик.ПолучитьШаблонЭтикеткиЛаборатории();
		Исключение
			Возврат Справочники.ШаблоныЭтикетокИЦенниковБПО.ПустаяСсылка();
		КонецПопытки
	КонецЕсли;
	
	Возврат Справочники.ШаблоныЭтикетокИЦенниковБПО.ПустаяСсылка();
	
КонецФункции

Функция СформироватьЭтикеткиКонтейнеров(ДокументЗабора, Лаборатории, Клиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблоныЭтикеток = Новый Соответствие;
	Для Каждого Лаборатория Из Лаборатории Цикл
		Шаблон = ПолучитьШаблонЭтикеткиЛаборатории(Лаборатория);
		
		Если Не ЗначениеЗаполнено(Шаблон) Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Новый Структура("Шаблон, XMLОписаниеМакета, МассивЭтикеток", Шаблон, Шаблон.XMLОписаниеМакета, Новый Массив());
		ШаблоныЭтикеток.Вставить(Лаборатория, Данные);			
	КонецЦикла;
	
	АдресХранилищаСКД_Этикетки = ПоместитьВоВременноеХранилище(Справочники.ШаблоныЭтикетокИЦенниковБПО.ПолучитьМакет("ПоляЭтикеткиЛаборатория"));
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаСКД_Этикетки);
	РезультатВыполненияЗапроса = ВычислитьПоляЭтикетокЗабораПоСКД(СхемаКомпоновкиДанных, ДокументЗабора);
	ТаблицаКонтейнеров = ДокументЗабора.Контейнеры;
	
	Если РезультатВыполненияЗапроса.Количество() > 0 Тогда
		
		Источник = РезультатВыполненияЗапроса[0];
		
		Для Каждого Контейнеры Из ТаблицаКонтейнеров Цикл
			
			ТекущийШаблонПечати = ШаблоныЭтикеток.Получить(Контейнеры.Лаборатория);   
			Если Не ЗначениеЗаполнено(ТекущийШаблонПечати) Тогда
				Продолжить;
			КонецЕсли;
			
			мПоля = Новый Массив;
			
			Для Каждого ТекПоле Из ТекущийШаблонПечати.Шаблон.Поля Цикл	
			
				Если ТекПоле.ТипЗаполнения = "Parameter" Тогда
										
					НовоеПоле = Новый Структура;
					НовоеПоле.Вставить("ИмяПоля", ТекПоле.Наименование);
										
					Если СтрНайти(ТекПоле.Значение, "Контейнеры") Тогда	
						ИмяПоля = ТекПоле.Значение;
					Иначе
						ИмяПоля = "Источник." + ТекПоле.Значение; 
					КонецЕсли;
					
					Попытка
						ТребуетсяВычислять = Ложь;
						Значение = ВычислитьСоставныеПоляЭтикетки(Клиент, Источник, Контейнеры, ТекПоле.Значение, ТребуетсяВычислять);
						Если ТребуетсяВычислять Тогда
							Значение = Вычислить(ИмяПоля);
						КонецЕсли;
					Исключение
						Значение = "";
					КонецПопытки;
					
					Если ЗначениеЗаполнено(Значение) Тогда
						НовоеПоле.Вставить("Значение", ?(ЗначениеЗаполнено(ТекПоле.Формат), Формат(Значение, ТекПоле.Формат), Значение));
					Иначе
						
						Если ЗначениеЗаполнено(ТекПоле.ЗначениеПоУмолчанию) Тогда
							НовоеПоле.Вставить("Значение", ?(ЗначениеЗаполнено(ТекПоле.Формат), Формат(ТекПоле.ЗначениеПоУмолчанию, ТекПоле.Формат), ТекПоле.ЗначениеПоУмолчанию));
						Иначе
							НовоеПоле.Вставить("Значение", ?(ЗначениеЗаполнено(ТекПоле.Формат), Формат("", ТекПоле.Формат), ""));
						КонецЕсли;
						
					КонецЕсли;
					
					мПоля.Добавить(НовоеПоле);
					
				КонецЕсли;
			КонецЦикла;
			
			НоваяЭтикетка = Новый Структура;
			НоваяЭтикетка.Вставить("Количество", 1);
			НоваяЭтикетка.Вставить("Поля", мПоля);
			ТекущийШаблонПечати.МассивЭтикеток.Добавить(НоваяЭтикетка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблоныЭтикеток;
	
КонецФункции

Функция ВычислитьПоляЭтикетокЗабораПоСКД(СКД, ДокументЗабора)
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Настройки = Компоновщик.Настройки;
	
	// Параметр документ забора.
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДокументыЗабора"));
	Параметр.Значение = ОбщегоНазначенияКлиентСервер.НовыйМассив(ДокументЗабора);
	
	// Компоновка в таблицу значений
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПКД = Новый ПроцессорКомпоновкиДанных;
    ПКД.Инициализировать(КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")));
	
	ТЗ = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ);
    ПроцессорВывода.Вывести(ПКД);

    Возврат ТЗ;
	
КонецФункции

Функция ВычислитьСоставныеПоляЭтикетки(Клиент, Источник, Контейнер, ИмяПоля, ТребуетсяВычислять)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		Если ИмяПоля = "КлиентФамилия" Тогда
			Возврат Клиент.Фамилия;
		ИначеЕсли ИмяПоля = "КлиентИмяОтчество" Тогда
			Возврат Клиент.Имя + " " + Клиент.Отчество
		ИначеЕсли ИмяПоля = "КлиентФИО" Тогда
			Возврат CRMСервер.ПолучитьФИООбъекта(Клиент);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоля = "ГемотестОтправитель" Тогда
		НастройкиВзаимодействия = Гемотест_Сервер.ПолучитьНастройкиВзаимодействия(Контейнер.Лаборатория);
		НаименованиеОрганизации = Строка(РаботаСДокументамиСервер.ФилиалДокумента(Источник.ДействияНадАнализами));
		Возврат НастройкиВзаимодействия.Contractor + " " + НаименованиеОрганизации;
		
	ИначеЕсли ИмяПоля = "КодПробыHelix" Тогда
		Возврат Прав(Контейнер.КодПробы, СтрДлина(Контейнер.КодПробы) - 5)
		
	ИначеЕсли ИмяПоля = "КонтейнерHelix" Тогда
		Возврат Контейнер.Контейнер + " (" + Контейнер.БиоматериалПредставление + ")";
		
	ИначеЕсли ИмяПоля = "КДЛОтправитель" Тогда
		НастройкиВзаимодействия = КДЛ_ИнтеграцияСервер.ПолучитьНастройкиВзаимодействия(Контейнер.Лаборатория);
		Возврат НастройкиВзаимодействия.НаименованиеОтправителя;
		
	ИначеЕсли ИмяПоля = "СитиЛабОтправитель" Тогда
		НастройкаВзаимодействия = СитиЛаб_ИнтеграцияСервер.ПолучитьНастройкиВзаимодействия(Контейнер.Лаборатория);
		Возврат НастройкаВзаимодействия.КодЛПУ + ?(Не ПустаяСтрока(НастройкаВзаимодействия.КодЛПУ), ". ", "") + НастройкаВзаимодействия.НазваниеОрганизацииВЭтикетке;
	КонецЕсли;
	
	ТребуетсяВычислять = Истина;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами // Отправка заказов и получение результатов

Процедура СоздатьЗаказыВоВнешниеЛабораторииДляЗабранныхАнализов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛабораторныеИсследованияСрезПоследних.Период,
	|	ЛабораторныеИсследованияСрезПоследних.Регистратор,
	|	ЛабораторныеИсследованияСрезПоследних.Регистратор.Представление КАК РегистраторПредставление,
	|	ЛабораторныеИсследованияСрезПоследних.ИД,
	|	ЛабораторныеИсследованияСрезПоследних.ДатаНачала,
	|	ЛабораторныеИсследованияСрезПоследних.КлиникаИсходная,
	|	ЛабораторныеИсследованияСрезПоследних.Местонахождение,
	|	ЛабораторныеИсследованияСрезПоследних.Клиент КАК Клиент,
	|	ЛабораторныеИсследованияСрезПоследних.Клиент.Представление КАК КлиентПредставление,
	|	ЛабораторныеИсследованияСрезПоследних.Статус,
	|	ЛабораторныеИсследованияСрезПоследних.Номенклатура,
	|	ЛабораторныеИсследованияСрезПоследних.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ЛабораторныеИсследованияСрезПоследних.Лаборатория КАК Лаборатория,
	|	ЛабораторныеИсследованияСрезПоследних.Анонимно КАК Анонимно,
	|	ДействияНадАнализамиКонтейнеры.КодПробы КАК КодПробы,
	|	ЛабораторныеИсследованияСрезПоследних.Лаборатория.ВнешняяЛаборатория КАК ВидЛаборатории
	|ИЗ
	|	РегистрСведений.ЛабораторныеИсследования.СрезПоследних(
	|			,
	|			Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияИсследований.Забран)
	|				И НЕ ИД В
	|						(ВЫБРАТЬ
	|							Заказ.ИД
	|						ИЗ
	|							Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК Заказ
	|						ГДЕ
	|							НЕ Заказ.Ссылка.ПометкаУдаления)) КАК ЛабораторныеИсследованияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
	|		ПО ЛабораторныеИсследованияСрезПоследних.ИД = ДействияНадАнализамиКонтейнеры.ИДИсследования
	|ГДЕ
	|	ЛабораторныеИсследованияСрезПоследних.КлиникаИсходная = &Филиал
	|	И ЛабораторныеИсследованияСрезПоследних.Лаборатория.ВнешняяЛаборатория <> ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.ПустаяСсылка)
	|   И ТИПЗНАЧЕНИЯ(ЛабораторныеИсследованияСрезПоследних.Регистратор) = ТИП(Документ.ДействияНадАнализами) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Лаборатория,
	|	Клиент,
	|	Регистратор,
	|	Анонимно
	|ИТОГИ ПО
	|	Лаборатория";
	
	Запрос.УстановитьПараметр("Филиал", УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя());
	ИсследованияПоЛабораториям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ИсследованияПоЛабораториям.Следующий() Цикл
		
		ДанныеДляЗаявок = Новый Массив;
		
		ТекКлиент = "";
		ТекАнонимность = "";
		ТекРегистратор = "";
		ТекСтруктура = Новый Структура;
		ТекИследования = Новый Массив;

		ВыборкаДЗ = ИсследованияПоЛабораториям.Выбрать();
		
		Пока ВыборкаДЗ.Следующий() Цикл
			
			// Проверка корректности кода пробы.
			ТекстОшибкиКодПробы = "";
			Если Не ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(ВыборкаДЗ.Лаборатория, ВыборкаДЗ.Номенклатура)
				И Не КодПробыКорректенДляЗаказа(ВыборкаДЗ.КодПробы, ВыборкаДЗ.ВидЛаборатории, ТекстОшибкиКодПробы)
			Тогда
			
				ТекстОшибки = НСтр("ru='Некорректный код пробы'") + ":" + Символы.ПС
							+ ВыборкаДЗ.КодПробы + " " + ВыборкаДЗ.НоменклатураПредставление + Символы.ПС
							+ ТекстОшибкиКодПробы + Символы.ПС
							+ ВыборкаДЗ.РегистраторПредставление
							+ ", " + ВыборкаДЗ.КлиентПредставление;
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			// Подготовка списка исследований заказа.
			Если 	ТекКлиент		<> ВыборкаДЗ.Клиент
				ИЛИ ТекАнонимность 	<> ВыборкаДЗ.Анонимно
				ИЛИ ТекРегистратор 	<> ВыборкаДЗ.Регистратор
			Тогда
				Если Не ТекСтруктура.Количество() = 0 Тогда
					ТекСтруктура.Вставить("Исследования",ТекИследования);
					ДанныеДляЗаявок.Добавить(ТекСтруктура);
					ТекСтруктура = Новый Структура;
				КонецЕсли;
				
				ТекИследования 	= Новый Массив;
				ТекКлиент 		= ВыборкаДЗ.Клиент;
				ТекАнонимность 	= ВыборкаДЗ.Анонимно;
				ТекРегистратор 	= ВыборкаДЗ.Регистратор;
				
				ТекСтруктура.Вставить("Клиент", 	ТекКлиент);
				ТекСтруктура.Вставить("Анонимно", 	ТекАнонимность);
				ТекСтруктура.Вставить("Филиал",		ВыборкаДЗ.КлиникаИсходная);
				ТекСтруктура.Вставить("Лаборатория",ВыборкаДЗ.Лаборатория);
				
			КонецЕсли;
			
			ТекИследования.Добавить(Новый Структура("Номенклатура, ИД, КодПробы, Регистратор", ВыборкаДЗ.Номенклатура, ВыборкаДЗ.ИД, ВыборкаДЗ.КодПробы, ВыборкаДЗ.Регистратор));
			
		КонецЦикла;
		
		Если Не ТекСтруктура.Количество() = 0 Тогда
			ТекСтруктура.Вставить("Исследования",ТекИследования);
			ДанныеДляЗаявок.Добавить(ТекСтруктура);
		КонецЕсли;
		
		// Создание документа заказа во внешнюю лабораторию.
		Для Каждого СтрДанные Из ДанныеДляЗаявок Цикл
			Док = Документы.ЗаказВоВнешнююЛабораторию.СоздатьДокумент();
			Док[ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов()] = СтрДанные.Филиал;
			Док.Клиент 		= СтрДанные.Клиент;
			Док.Анонимно 	= СтрДанные.Анонимно;
			Док.Лаборатория = СтрДанные.Лаборатория;
			Док.Состояние 	= Перечисления.СостоянияЗаказовЛаборатории.Создан;
			Док.Дата 		= ТекущаяДатаСеанса();
			
			Если СтрДанные.Исследования <> 0 Тогда
				Док.НомерЗаказаВнешнейЛаборатории = ПолучитьНомерЗаказаВнешнейЛаборатории(СтрДанные.Исследования[0].Регистратор, СтрДанные.Лаборатория);
			КонецЕсли;
			
			Для Каждого СтрИсследование Из СтрДанные.Исследования Цикл
				Стр = Док.Исследования.Добавить();
				Стр.Номенклатура	= СтрИсследование.Номенклатура;
				Стр.ИД				= СтрИсследование.ИД;
				Стр.КодПробы 		= СтрИсследование.КодПробы;
				Стр.Состояние		= Перечисления.СостоянияЗаказовЛаборатории.Создан;
			КонецЦикла;
			Док.Записать();
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРезультатыАнализовИзВнешнихЛабораторий(ИнтерактивныйЗапуск = Истина) Экспорт
	
	ТекстОшибки = "";
	
	ШаблонНачалаТекстаОшибки = НСтр("ru='Ошибка при получении результатов лаборатории ""%1""'");
	
	ВидыЛаборатории = ПолучитьВидыЛабораторий();
	Для Каждого ВидЛаборатории Из ВидыЛаборатории Цикл
		
		ТекстОшибкиЛаборатории = "";
		Попытка 
			ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВидЛаборатории).ПолучитьРезультатыАнализов(ТекстОшибкиЛаборатории);
		Исключение
			ТекстОшибкиЛаборатории = ОписаниеОшибки();
		КонецПопытки;
		// В случае ошибки получения результатов добавляем к общему тексту текст по текущей лаборатории.
		Если ЗначениеЗаполнено(ТекстОшибкиЛаборатории) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНачалаТекстаОшибки, ВидЛаборатории)
				+ ": " + ТекстОшибкиЛаборатории,
				Символы.ПС);
		КонецЕсли;
	КонецЦикла;	
	
	Если Не ИнтерактивныйЗапуск Тогда
		ЗаписьЖурналаРегистрации("Получение результатов из внешних лабораторий",
			УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегламентныеЗадания.ПолучениеРезультатовИзВнешнихЛабораторий,, ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ИспользуетсяАнонимнаяОтправкаАнализов(Лаборатория) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Лаборатория) Тогда
		Попытка
			Результат = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория).ИспользуетсяАнонимнаяОтправкаАнализов();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(ОписьЗаказов) Экспорт
	Если Не ЗначениеЗаполнено(ОписьЗаказов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ОписьЗаказов.Лаборатория).ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(ОписьЗаказов);	
КонецФункции

Функция СоздатьОписьДляНеотправленных(ЗаказВоВнешнююЛабораториюСсылка = Неопределено, Лаборатория = Неопределено) Экспорт
	
	СозданныеОписи = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОписьЗаказовЛабораторииСписокЗаказов.ЗаказВЛабораторию
	                      |ПОМЕСТИТЬ ОписьЗаказовЛабораторииСписокЗаказов
	                      |ИЗ
	                      |	Документ.ОписьЗаказовЛаборатории.СписокЗаказов КАК ОписьЗаказовЛабораторииСписокЗаказов
	                      |ГДЕ
	                      |	НЕ ОписьЗаказовЛабораторииСписокЗаказов.Ссылка.ПометкаУдаления
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказВоВнешнююЛабораторию.Ссылка,
	                      |	ЗаказВоВнешнююЛабораторию.Лаборатория КАК Лаборатория,
	                      |	ЗаказВоВнешнююЛабораторию.Филиал КАК Филиал
	                      |ПОМЕСТИТЬ Заказы
	                      |ИЗ
	                      |	Документ.ЗаказВоВнешнююЛабораторию КАК ЗаказВоВнешнююЛабораторию
	                      |ГДЕ
	                      |	НЕ ЗаказВоВнешнююЛабораторию.ПометкаУдаления
	                      |	И ЗаказВоВнешнююЛабораторию.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Создан)
						  |" + ?(Лаборатория = Неопределено,""," И ЗаказВоВнешнююЛабораторию.Лаборатория = &Лаборатория ") + "  
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказВоВнешнююЛабораторию.Ссылка,
	                      |	ЗаказВоВнешнююЛабораторию.Лаборатория КАК Лаборатория,
	                      |	ЗаказВоВнешнююЛабораторию.Филиал КАК Филиал
	                      |ИЗ
	                      |	Заказы КАК ЗаказВоВнешнююЛабораторию
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОписьЗаказовЛабораторииСписокЗаказов КАК ОписьЗаказовЛабораторииСписокЗаказов
	                      |		ПО ЗаказВоВнешнююЛабораторию.Ссылка = ОписьЗаказовЛабораторииСписокЗаказов.ЗаказВЛабораторию
	                      |ГДЕ
	                      |	ЕСТЬNULL(ОписьЗаказовЛабораторииСписокЗаказов.ЗаказВЛабораторию, ЗНАЧЕНИЕ(Документ.ЗаказВоВнешнююЛабораторию.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаказВоВнешнююЛабораторию.ПустаяСсылка)
						  |" + ?(ЗаказВоВнешнююЛабораториюСсылка = Неопределено,""," И ЗаказВоВнешнююЛабораторию.Ссылка = &Ссылка ") + "  
	                      |ИТОГИ ПО
	                      |	Лаборатория,
	                      |	Филиал");
	Запрос.УстановитьПараметр("Ссылка", ЗаказВоВнешнююЛабораториюСсылка);					  
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);					  
	ВыборкаЛаб = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Лаборатория");					  
	Пока ВыборкаЛаб.Следующий() Цикл 
		
		Лаборатория = ВыборкаЛаб.Лаборатория;
		Если ЗначениеЗаполнено(Лаборатория) Тогда 
		
			ВыборкаФилиал = ВыборкаЛаб.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Филиал");
			Пока ВыборкаФилиал.Следующий() Цикл 
				
				НачатьТранзакцию();
				
				НоваяОпись = Документы.ОписьЗаказовЛаборатории.СоздатьДокумент();
				НоваяОпись.Дата = ТекущаяДатаСеанса();
				НоваяОпись.Лаборатория = ВыборкаЛаб.Лаборатория;
				НоваяОпись[ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов()] = ВыборкаФилиал.Филиал;
				НоваяОпись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				
				ВыборкаДетали = ВыборкаФилиал.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл 
					стр = НоваяОпись.СписокЗаказов.Добавить();
					стр.ЗаказВЛабораторию = ВыборкаДетали.Ссылка;
				КонецЦикла;
				
				НоваяОпись.Записать(РежимЗаписиДокумента.Запись);
				СозданныеОписи.Добавить(НоваяОпись.Ссылка);

				ЗафиксироватьТранзакцию();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	Возврат СозданныеОписи;
	
КонецФункции

Функция НайтиЗаборАнализа(ИдАнализа, Клиент, Лаборатория, КодПробы, Номенклатура) Экспорт
	
	ДокументЗабора = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИД", ИдАнализа);
	Запрос.УстановитьПараметр("СтатусЗабран", Перечисления.СостоянияИсследований.Забран);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛабораторныеИсследования.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.ЛабораторныеИсследования КАК ЛабораторныеИсследования
	|ГДЕ
	|	ЛабораторныеИсследования.ИД = &ИД
	|	И ЛабораторныеИсследования.Статус = &СтатусЗабран"
	;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		// Основной случай: нашли забор анализа по ИД.
		Выб = РезультатЗапроса.Выбрать();
		Выб.Следующий();
		ДокументЗабора = Выб.Документ;
	Иначе
		// В редких случаях ручного корректирования можно поискать по косвенным полям.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛабораторныеИсследования.Регистратор КАК Документ,
		|	ЛабораторныеИсследования.КодПробы
		|ИЗ
		|	РегистрСведений.ЛабораторныеИсследования КАК ЛабораторныеИсследования
		|ГДЕ
		|	ЛабораторныеИсследования.Статус = &СтатусЗабран
		|	И ЛабораторныеИсследования.Клиент = &Клиент
		|	И ЛабораторныеИсследования.Номенклатура = &Номенклатура
		|	И ЛабораторныеИсследования.Лаборатория = &Лаборатория
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛабораторныеИсследования.Период УБЫВ"
		;
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
		//Запрос.УстановитьПараметр("КодПробы", КодПробы);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выб = РезультатЗапроса.Выбрать();
			
			Если Выб.НайтиСледующий(Новый Структура("КодПробы", КодПробы)) Тогда
				ДокументЗабора = Выб.Документ;
			Иначе
				Выб.Сбросить();
				Выб.Следующий();
				ДокументЗабора = Выб.Документ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ДокументЗабора;	
	
КонецФункции

Функция ПолучитьНомерЗаказаВнешнейЛаборатории(Регистратор, Лаборатория)
	Попытка 
		Возврат ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория).ПолучитьНомерЗаказаВнешнейЛаборатории(Регистратор, Лаборатория);
	Исключение
	КонецПопытки;	
КонецФункции

#КонецОбласти

#Область ЗаборАнализа

// Получить параметры забора для списка анализов.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории, ПеречислениеСсылка.ВнешниеЛаборатории - лаборатория или вид.
//  Анализы		 - Массив	- массив номенклатуры или строк ИД правил забора.
//  Клиент	 	 - СправочникСсылка.Клиенты - клиент, для которого выполняется забор анализов.
// 
// Возвращаемое значение:
//  Массив - Массив структур.
//
Функция ПолучитьПараметрыЗабора(Лаборатория, Анализы, Клиент) Экспорт
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
	ПараметрыЗабора = Новый Массив;
	Если МодульОбработчик <> Неопределено Тогда
		Попытка
			ПараметрыЗабора = МодульОбработчик.ПолучитьПараметрыЗабора(Анализы);
		Исключение
			ПараметрыЗабора = МодульОбработчик.ПолучитьПараметрыЗабора(Анализы, Клиент); // В частности, Ситилаб.
		КонецПопытки;
	КонецЕсли;
	Возврат ПараметрыЗабора;
КонецФункции

Функция ПараметрыЗабораПолучитьПараметрыПримененияЗначенияПоУмолчанию(Клиент) Экспорт
	Возврат Новый Структура("Пол", ДопСерверныеФункции.ПолучитьРеквизит(Клиент, "Пол"));
КонецФункции

Функция РаспределениеБиоматериаловПоКонтейнерам(ВидЛаборатории, ДанныеЗабора) Экспорт
	
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВидЛаборатории);
	Если МодульОбработчик <> Неопределено Тогда
		Возврат МодульОбработчик.РаспределениеБиоматериаловПоКонтейнерам(ДанныеЗабора);	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

// Возвращает массив с лабораториями, для которых используется и включена интеграция.
//
// Параметры:
//  ТолькоВнешние					 - Булево - Истина, если необходимо получить только внешние лаборатории.
//  ДляОбработкиЗагрузкиСправочников - Булево - Истина, если необходимо получить лаборатории для обработки загрузки справочников внешних лабораторий.
//  ЛабораторииИсключение			 - Массив Из СправочникСсылка.Лаборатории - лаборатории, которые необходимо исключить из проверки актуальности использования.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Лаборатории
//
Функция ПолучитьАктуальныеЛаборатории(ТолькоВнешние = Ложь, ДляОбработкиЗагрузкиСправочников = Ложь,
	ЛабораторииИсключение = Неопределено) Экспорт
	
	Лаборатории = Новый Массив;
	
	НастройкиУчетаЛабораторий = НастройкиУчетаЛабораторий();
	Если Не НастройкиУчетаЛабораторий.УпрощеннаяЛабораторияИспользуется
		Или НастройкиУчетаЛабораторий.ИспользуетсяРасширеннаяВнутренняяЛаборатория 
		Или НастройкиУчетаЛабораторий.ИспользуетсяИнтеграцияСВнешнимиЛабораториями 
	Тогда
	
		Если ЛабораторииИсключение = Неопределено Тогда
			ЛабораторииИсключение = Новый Массив;
		КонецЕсли;
		
		Если ДляОбработкиЗагрузкиСправочников Тогда
			ТолькоВнешние = Истина;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лаборатории.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Лаборатории КАК Лаборатории
		|ГДЕ
		|	НЕ Лаборатории.ПометкаУдаления";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			// Если лаборатория входит в список исключений, тогда не проверяем ее использование.
			Если ЛабораторииИсключение.Найти(ВыборкаДетальныеЗаписи.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВнешняяЛаборатория = ВыборкаДетальныеЗаписи.Ссылка.ВнешняяЛаборатория; 
			Если ЗначениеЗаполнено(ВнешняяЛаборатория) Тогда
				Если НастройкиУчетаЛабораторий.ИспользуетсяИнтеграцияСВнешнимиЛабораториями Тогда
					
					// Проверяем использование интеграции с внешней лабораторией.
					Попытка
						ИспользованиеВидаЛаборатории = Неопределено;
						НастройкиУчетаЛабораторий.Свойство(Строка(ВнешняяЛаборатория) + "_ИспользуетсяИнтеграцияС" + Строка(ВнешняяЛаборатория), ИспользованиеВидаЛаборатории);
						Если Не ИспользованиеВидаЛаборатории Тогда
							Продолжить;
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					// Если отсутствует модуль внешней лаборатории, тогда использование интеграции с ней считается невозможным.
					МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВнешняяЛаборатория);
					Если МодульОбработчик = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ИспользованиеЛаборатории = Ложь;
					
					// Если в интеграции с внешней лабораторией не предусмотрено получение настроек взаимодействия непосредственно
					// по ссылке на лабораторию, тогда лаборатория по-умолчанию считается используемой.
					Попытка
						НастройкиВзаимодействия = МодульОбработчик.ПолучитьНастройкиВзаимодействия(ВыборкаДетальныеЗаписи.Ссылка);
					Исключение
						Если Не ДляОбработкиЗагрузкиСправочников Тогда
							ИспользованиеЛаборатории = Истина;
						Иначе
							// Но единая обработка загрузки справочников не применима для такой внешней лаборатории.
							Продолжить;
						КонецЕсли;
					КонецПопытки;
					
					// Если получены настройки взаимодействия с внешней лабораторией, тогда проверяем значение признака "Используется".
					// При его отсутствии в настройках взаимодействия лаборатория по-умолчанию считается используемой.
					Если Не ИспользованиеЛаборатории И НастройкиВзаимодействия <> Неопределено Тогда
						Попытка
							ИспользованиеЛаборатории = НастройкиВзаимодействия.Используется;
						Исключение
							ИспользованиеЛаборатории = Истина;
						КонецПопытки;
					КонецЕсли;
					
					Если ИспользованиеЛаборатории Тогда
						Лаборатории.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Не ТолькоВнешние
				И (НастройкиУчетаЛабораторий.ИспользуетсяРасширеннаяВнутренняяЛаборатория
				Или НастройкиУчетаЛабораторий.УпрощеннаяЛабораторияИспользуется)
			Тогда
				Лаборатории.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Лаборатории;
	
КонецФункции

// Возвращает одну из лабораторий, для которых используется и включена интеграция.
//
// Параметры:
//  ТолькоВнешние					 - Булево - Истина, если необходимо получить только внешнюю лабораторию.
//  ДляОбработкиЗагрузкиСправочников - Булево - Истина, если необходимо получить лабораторию для обработки загрузки справочников внешних лабораторий.
//  ЛабораторииИсключение			 - Массив Из СправочникСсылка.Лаборатории - лаборатории, которые необходимо исключить из проверки актуальности использования.
// 
// Возвращаемое значение:
//  СправочникСсылка.Лаборатории
//
Функция ПолучитьАктуальнуюЛабораторию(ТолькоВнешние = Ложь, ДляОбработкиЗагрузкиСправочников = Ложь,
	ЛабораторииИсключение = Неопределено) Экспорт

    Лаборатории = ПолучитьАктуальныеЛаборатории(ТолькоВнешние, ДляОбработкиЗагрузкиСправочников, ЛабораторииИсключение);
	
	Если Не ДляОбработкиЗагрузкиСправочников Тогда
		Если Лаборатории.Количество() = 1 Тогда
			Возврат Лаборатории[0];
		КонецЕсли;
	Иначе
		Для Каждого Лаборатория Из Лаборатории Цикл
			Возврат Лаборатория;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Справочники.Лаборатории.ПустаяСсылка();
	
КонецФункции

// Определяет для лабораторий использование печати этикеток на принтере этикеток.
//
// Параметры:
//  Лаборатории	 - Массив - массив из СправочникСсылка.Лаборатории или ПеречислениеСсылка.ВнешниеЛаборатории.
//  			 - СправочникСсылка.Лаборатории
//  			 - ПеречислениеСсылка.ВнешниеЛаборатории
// 
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПечатьЭтикеток(Лаборатории) Экспорт
	
	Результат = Ложь;
	
	ВидыЛабораторий = Новый Массив;
	ЛабораторииМассив = Новый Массив;
	Если ТипЗнч(Лаборатории) = Тип("Массив") Тогда
		Для Каждого Лаборатория Из Лаборатории Цикл
			ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(ВидыЛабораторий, ЛабораторияСерверПовтИсп.ВидЛаборатории(Лаборатория));
		КонецЦикла;
		ЛабораторииМассив = Лаборатории;
	Иначе
		ВидыЛабораторий.Добавить(ЛабораторияСерверПовтИсп.ВидЛаборатории(Лаборатории));
		ЛабораторииМассив = ОбщегоНазначенияКлиентСервер.НовыйМассив(Лаборатории);
	КонецЕсли;
	
	Для Каждого ВидЛаборатории Из ВидыЛабораторий Цикл
		МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВидЛаборатории);
		
		Попытка
			Результат = Результат Или МодульОбработчик.ИспользуетсяПечатьЭтикеток();
		Исключение
			// Вызов этой же функции, но для параметром Лаборатория
			Для Каждого Лаборатория Из ЛабораторииМассив Цикл
				Попытка
					Результат = Результат Или МодульОбработчик.ИспользуетсяПечатьЭтикеток(Лаборатория);
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру данных для печати этикеток с обращением к отдельному общему модулю лаборатории.
//
// Параметры:
//  ДанныеКонтейнеров	 - ДанныеФормыКоллекция	 				- данные табличной части "Контейнеры" формы документа "Действия над анализами".
//  Лаборатория			 - СправочникСсылка.Лаборатории 		- лаборатория, для которой печатаются этикетки.
//  ДокументСсылка		 - ДокументСсылка.ДействияНадАнализами	- документ забора анализов.
//  Клиент				 - СправочникСсылка.Клиенты	 			- клиент, данные которого выводятся на этикетки.
// 
// Возвращаемое значение:
//   - Структура:
//   	* Заголовок 		- Строка
//   	* Защита 			- Булево
//   	* ИмяМакета 		- Строка
//   	* ОбъектПечати 		- Неопределено
//   	* ПечДокумент 		- ТабличныйДокумент
//   	* ПолныйПутьКМакету - Строка
//   	* СинонимМакета 	- Строка
//   	* ФормаИмя 			- Строка
//   - Строка - если получен текст описания ошибки при получении структуры данных.
//   - Неопределено - если отсутствует отдельный общий модуль лаборатории или невозможно получить структуру данных по другой причине.
//	
Функция ПолучитьСтруктуруПечатиЭтикеток(Знач ДанныеКонтейнеров, Лаборатория, ДокументСсылка, Клиент) Экспорт
	
	Результат = Неопределено;
	
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
	Если МодульОбработчик <> Неопределено Тогда
		Попытка
			ОписаниеОшибки = "";
			СтруктураПечати = МодульОбработчик.ПолучитьСтруктуруПечатиЭтикеток(ДанныеКонтейнеров, Лаборатория, ДокументСсылка, Клиент, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				Результат = ОписаниеОшибки;
			Иначе
				Результат = СтруктураПечати;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
Процедура ПроверитьЗаполнениеЗабораАнализаПередЗаписью(Знач Объект, Знач РежимЗаписи, Отказ) Экспорт
	
	НастройкиУчетаЛабораторий = ЛабораторияСервер.НастройкиУчетаДляДействияНадАнализами(Объект);
	
	// Перечень лабораторий забора.
	ЛабораторииЗабора = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Объект.Исследования.ВыгрузитьКолонку("Лаборатория"));
	
	// Сообщение о необходимости распределения по контейнерам, если требуется.
	НеРаспределенныеПоКонтейнерам = Новый Массив;
	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
		Если ЛабораторияСерверПовтИсп.ЛабораторияИспользуетКонтейнеры(СтрокаИсследования.Лаборатория, НастройкиУчетаЛабораторий)
			И Объект.Контейнеры.НайтиСтроки(Новый Структура("КлючСтрокиИсследования", СтрокаИсследования.КлючСтроки)).Количество() = 0
		Тогда
			Если ЛабораторияСерверПовтИсп.ЛабораторияИспользуетНоменклатуруАнализовБезПравилЗабора(СтрокаИсследования.Лаборатория)
				И ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(СтрокаИсследования.Лаборатория, СтрокаИсследования.Номенклатура)
			Тогда
				Продолжить;
			КонецЕсли;
			
			НеРаспределенныеПоКонтейнерам.Добавить(СтрокаИсследования.Номенклатура);
			
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ЗначениеЗаполнено(ЛабораторияСерверПовтИсп.ВидЛаборатории(СтрокаИсследования.Лаборатория))
			Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;					
	КонецЦикла;
	Если НеРаспределенныеПоКонтейнерам.Количество() <> 0 Тогда
		мИзмененыИсследования = Истина;
		ТекстСообщения = НСтр("ru='Не распределены по контейнерам исследования:'");
		Для Каждого Номенклатура Из НеРаспределенныеПоКонтейнерам Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстСообщения, Строка(Номенклатура), Символы.ПС);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Проверка, для всех ли анализов, требующих правила забора, они выбраны.
	НеВыбраныПравилаЗабора = Новый Массив;
	Отбор = Новый Структура("Пометка, КлючСтрокиИсследования", Истина);
	Для Каждого СтрокаИсследования Из Объект.Исследования Цикл
		Если ЛабораторияКлиентСерверПовтИсп.ИспользуютсяПравилаЗабора(СтрокаИсследования.Лаборатория) Тогда
			
			Отбор.КлючСтрокиИсследования = СтрокаИсследования.КлючСтроки;
			ПравилаИсследования = Объект.ПравилаВнешнихЛабораторий.НайтиСтроки(Отбор);
			
			Если ПравилаИсследования.Количество() = 0 Тогда
				Если ЛабораторияСерверПовтИсп.ЛабораторияИспользуетНоменклатуруАнализовБезПравилЗабора(СтрокаИсследования.Лаборатория)
					И ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(СтрокаИсследования.Лаборатория, СтрокаИсследования.Номенклатура)
				Тогда
					Продолжить;
				КонецЕсли;
					
				НеВыбраныПравилаЗабора.Добавить(СтрокаИсследования.Номенклатура);
				
				Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НеВыбраныПравилаЗабора.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru='Не выбрано правило забора у исследований:'");
		Для Каждого Номенклатура Из НеВыбраныПравилаЗабора Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстСообщения, Строка(Номенклатура), Символы.ПС);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтказЛаборатории = Ложь;
	Для Каждого Лаборатория Из ЛабораторииЗабора Цикл
		Если ЗначениеЗаполнено(Лаборатория) Тогда
			МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
			Попытка
				МодульОбработчик.ПроверитьЗаполнениеЗабораАнализаПередЗаписью(Объект, РежимЗаписи, ОтказЛаборатории);
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Отказ = Отказ Или ОтказЛаборатории;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеЗабораАнализа(ДокументОбъект, Отказ) Экспорт
	
	ПроверитьКорректностьКодовПробЗабора(ДокументОбъект, Отказ);
	
	// Проверка заполнения обязательных параметров забора
	СообщениеОбОшибке = "";
	Для Каждого СтрокаПараметр Из ДокументОбъект.ПараметрыЗабора Цикл
		
		Если СтрокаПараметр.Обязательный
			И (СтрокаПараметр.Значение = Неопределено
				Или Не СтрокаПараметр.Заполнен)
		Тогда
			ТекстОшибки = "Не заполнено значение параметра '"+СтрокаПараметр.Параметр+"'.";
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СообщениеОбОшибке, ТекстОшибки,Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,ДокументОбъект,,,Отказ);
	КонецЕсли;
	
	// Прочие проверки лабораторий.
	ЛабораторииЗабора = ЛабораторииИсследований(ДокументОбъект.Исследования);
	
	Для Каждого Лаборатория Из ЛабораторииЗабора Цикл
		Попытка
			ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория).ПроверитьЗаполнениеЗабораАнализа(ДокументОбъект, Лаборатория, Отказ);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСсылкуПВХЗаборАнализа(ID, Наименование = Неопределено, ТипЗначения = Неопределено, ВидЛаборатории) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыЗабораАнализов.Ссылка КАК Ссылка,
		|	ПараметрыЗабораАнализов.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ПараметрыЗабораАнализов КАК ПараметрыЗабораАнализов
		|ГДЕ
		|	ПараметрыЗабораАнализов.IDПараметров.ID = &ID
		|	И ПараметрыЗабораАнализов.IDПараметров.ВидЛаборатории = &ВидЛаборатории";
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ВидЛаборатории", ВидЛаборатории);
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос.Текст = Запрос.Текст + " И ПараметрыЗабораАнализов.Наименование = &Наименование";
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ТипЗначения = Неопределено Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураДанных = Новый Структура;
			СтруктураДанных .Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			СтруктураДанных .Вставить("ТипЗначение", ВыборкаДетальныеЗаписи.ТипЗначения); 
			Возврат СтруктураДанных;
		КонецЦикла;	
	Иначе
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ТипЗначения = ТипЗначения Тогда
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
				Возврат СтруктураДанных;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДанных  = Новый Структура;
	СтруктураДанных.Вставить("Ссылка", ПланыВидовХарактеристик.ПараметрыЗабораАнализов.ПустаяСсылка());
	
	Возврат СтруктураДанных;
	
КонецФункции

// Лаборатории исследований без повторов, без пустых. 
//	Или виды лабораторий (включая пустой), если ВернутьВидыЛабораторий = Истина.
//
// Параметры:
//  Исследования			 - ТаблицаЗначений - коллекция с колонкой "Лаборатория" - СправочникСсылка.Лаборатории.
//  ВернутьВидыЛабораторий	 - Булево - если Истина, но нужно вернуть массив видов лабораторий, а не массив лабораторий
// 
// Возвращаемое значение:
//  Массив - уникальные элементы СправочникСсылка.Лаборатории или ПеречислениеСсылка.ВнешниеЛаборатории.
//
Функция ЛабораторииИсследований(Знач Исследования, ВернутьВидыЛабораторий = Ложь) Экспорт
	
	Лаборатории = Новый Массив;
	
	Для Каждого СтрокаИсследования Из Исследования Цикл
		Если ЗначениеЗаполнено(СтрокаИсследования.Лаборатория)
			И Лаборатории.Найти(СтрокаИсследования.Лаборатория) = Неопределено
		Тогда
			Лаборатории.Добавить(СтрокаИсследования.Лаборатория);
		КонецЕсли;
	КонецЦикла;
	
	Если ВернутьВидыЛабораторий Тогда
		ВидыЛабораторий = Новый Массив;
		Для Каждого Лаборатория Из Лаборатории Цикл
			ВидЛаборатории = ЛабораторияСерверПовтИсп.ВидЛаборатории(Лаборатория);
			Если ВидыЛабораторий.Найти(ВидЛаборатории) = Неопределено Тогда
				ВидыЛабораторий.Добавить(ВидЛаборатории);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ВидыЛабораторий;
	Иначе
		Возврат Лаборатории;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНоменклатуруАнализовБезПравилЗабораДляНесколькихЗаявокВОднуЛабораторию(Знач Исследования,
	Знач ДеревоРаспределенияБиоматериалов) Экспорт
	
	МассивСообщения = Новый Массив;

	МассивЛаборатории = Новый Массив;
	
	Для Каждого СтрИсследования Из Исследования Цикл
		Если ЗначениеЗаполнено(СтрИсследования.Лаборатория)
			И МассивЛаборатории.Найти(СтрИсследования.Лаборатория) = Неопределено
		Тогда
			МассивЛаборатории.Добавить(СтрИсследования.Лаборатория);
		КонецЕсли;
	КонецЦикла;
	
	КодыПроб = Новый Соответствие;
	СтрокиЛаборатории = ДеревоРаспределенияБиоматериалов.ПолучитьЭлементы();
	
	Для Каждого СтрокаЛаборатории Из СтрокиЛаборатории Цикл
		МассивКонтейнеры = Новый Массив;
		СтрокиКонтейнеры = СтрокаЛаборатории.ПолучитьЭлементы();
		Для Каждого СтрокаКонтейнеры Из СтрокиКонтейнеры Цикл
			МассивКонтейнеры.Добавить(СтрокаКонтейнеры.КодПробы);
		КонецЦикла;
		КодыПроб.Вставить(СтрокаЛаборатории.Лаборатория, МассивКонтейнеры);
	КонецЦикла;

	Для Каждого Лаборатория Из МассивЛаборатории Цикл
		Если ЛабораторияСерверПовтИсп.ЛабораторияИспользуетНоменклатуруАнализовБезПравилЗабора(Лаборатория) Тогда
			МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
			
			Если МодульОбработчик <> Неопределено Тогда
				НоменклатураАнализов = Исследования.Выгрузить(Новый Структура("Лаборатория", Лаборатория)).ВыгрузитьКолонку("Номенклатура");
				Параметры = Новый Структура("Лаборатория, НоменклатураАнализов, КодыПроб",
					Лаборатория, НоменклатураАнализов, КодыПроб.Получить(Лаборатория));
					
				// Вызываем у модуля конкретной лаборатории ПроверитьНоменклатуруАнализовБезПравилЗабораДляНесколькихЗаявокВОднуЛабораторию().
				Попытка
					Результат = МодульОбработчик.ПроверитьНоменклатуруАнализовБезПравилЗабораДляНесколькихЗаявокВОднуЛабораторию(Параметры);
					Если ТипЗнч(Результат) = Тип("Массив") Тогда
						Для Каждого ЭлементРезультат Из Результат Цикл
							МассивСообщения.Добавить(ЭлементРезультат);
						КонецЦикла;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСообщения;
	
КонецФункции

// Проверяет наличие исследований из документа забора в сформированных документах Заказ во внешнюю лабораторию.
//
// Параметры:
//  ТЧИсследования				 - ДанныеФормыКоллекция	 - табличная часть Исследования документа Действия над анализами.
//  ИсследованияПоЛабораториям	 - Соответствие:
//									* Ключ	   - СправочникСсылка.Лаборатории
//									* Значение - Массив из Структура:
//												  * КлючСтрокиИсследования - Число
//												  * КодПробы				- Строка
// 
// Возвращаемое значение:
//  Структура:
//	 * ЕстьИсследованияВЗаказах - Булево
//	 * ЕстьОтправленныеИсследования - Булево
//   * Заказы - Массив из Структура:
//				 * Заказ		- ДокументСсылка.ЗаказВоВнешнююЛабораторию
//				 * Исследования	- Массив из Структура:
// 								   * НоменклатураИсследования - СправочникСсылка.Номенклатура
// 								   * КодПробы				  - Строка
//
Функция ПроверитьНаличиеИсследованийИзДокументаЗабораВЗаказахВоВнешнююЛабораторию(Знач ТЧИсследования, ИсследованияПоЛабораториям) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	ЕстьИсследованияВЗаказах = Ложь;
	ЕстьОтправленныеИсследования = Ложь;
	
	СостоянияЗаказаОтправлен = Новый Массив;
	СостоянияЗаказаОтправлен.Добавить(Перечисления.СостоянияЗаказовЛаборатории.Отправлен);
	СостоянияЗаказаОтправлен.Добавить(Перечисления.СостоянияЗаказовЛаборатории.ПолученРезультат);
	
	ТаблицаИсследованияЛабораторий = Новый ТаблицаЗначений;
	ТаблицаИсследованияЛабораторий.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
	ТаблицаИсследованияЛабораторий.Колонки.Добавить("НоменклатураИсследования", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИсследованияЛабораторий.Колонки.Добавить("ИДИсследования", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаИсследованияЛабораторий.Колонки.Добавить("КодПробы", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	
	Для Каждого ИсследованияЛаборатории Из ИсследованияПоЛабораториям Цикл
		Лаборатория = ИсследованияЛаборатории.Ключ;
		
		Для Каждого Исследование Из ИсследованияЛаборатории.Значение Цикл
			Отбор = Новый Структура("Лаборатория, КлючСтроки", Лаборатория, Исследование.КлючСтрокиИсследования);
			СтрокиИсследования = ТЧИсследования.НайтиСтроки(Отбор);
			Если СтрокиИсследования.Количество() > 0 Тогда
				НоменклатураИсследования = СтрокиИсследования[0].Номенклатура;
				ИДИсследования = СтрокиИсследования[0].ИД;
				Если ЗначениеЗаполнено(НоменклатураИсследования) И ЗначениеЗаполнено(ИДИсследования) Тогда
					СтрокаИсследования = ТаблицаИсследованияЛабораторий.Добавить();
					СтрокаИсследования.Лаборатория = Лаборатория;
					СтрокаИсследования.НоменклатураИсследования = НоменклатураИсследования;
					СтрокаИсследования.ИДИсследования = ИДИсследования;
					СтрокаИсследования.КодПробы = Исследование.КодПробы;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаИсследованияЛабораторий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Лаборатория КАК Лаборатория,
	|	Таблица.НоменклатураИсследования КАК НоменклатураИсследования,
	|	Таблица.ИДИсследования КАК ИДИсследования,
	|	Таблица.КодПробы КАК КодПробы
	|ПОМЕСТИТЬ Исследования
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсследованияЗаказа.Ссылка КАК Заказ,
	|	ИсследованияЗаказа.Ссылка.Состояние КАК СостояниеЗаказа,
	|	ИсследованияЗаказа.Номенклатура КАК НоменклатураИсследования,
	|	ИсследованияЗаказа.КодПробы КАК КодПробы,
	|	ИсследованияЗаказа.Состояние КАК СостояниеИсследования
	|ИЗ
	|	Исследования КАК Исследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ИсследованияЗаказа
	|		ПО Исследования.Лаборатория = ИсследованияЗаказа.Ссылка.Лаборатория
	|			И Исследования.НоменклатураИсследования = ИсследованияЗаказа.Номенклатура
	|			И Исследования.ИДИсследования = ИсследованияЗаказа.ИД
	|			И Исследования.КодПробы = ИсследованияЗаказа.КодПробы
	|			И (НЕ ИсследованияЗаказа.Ссылка.ПометкаУдаления)"
	;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Вставить("ЕстьИсследованияВЗаказах", Ложь);
		Возврат Результат;
	Иначе
		ЕстьИсследованияВЗаказах = Истина;
		ТаблицаЗаказы = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	МассивЗаказыСозданы = Новый Массив;
	МассивИсследованияОтправлены = Новый Массив;
	
	Для Каждого СтрокаТаблица Из ТаблицаЗаказы Цикл
		Если СостоянияЗаказаОтправлен.Найти(СтрокаТаблица.СостояниеЗаказа) <> Неопределено
			Или СостоянияЗаказаОтправлен.Найти(СтрокаТаблица.СостояниеИсследования) <> Неопределено
		Тогда
			ЕстьОтправленныеИсследования = Истина;
			НоменклатураИсследования = СтрокаТаблица.НоменклатураИсследования;
			Если МассивИсследованияОтправлены.Найти(НоменклатураИсследования) = Неопределено Тогда
				МассивИсследованияОтправлены.Добавить(НоменклатураИсследования);
			КонецЕсли;
		Иначе
			Заказ = СтрокаТаблица.Заказ;
			Если МассивЗаказыСозданы.Найти(Заказ) = Неопределено Тогда
				МассивЗаказыСозданы.Добавить(Заказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтправленныеИсследования И МассивИсследованияОтправлены.Количество() > 0 Тогда
		СообщениеПользователю = НСтр("ru='Перераспределение анализов по контейнерам запрещено,
										 |так как уже отправлены во внешнюю лабораторию анализы:'");
		
		Для Каждого ИсследованиеОтправлено Из МассивИсследованияОтправлены Цикл
			ШаблонСтроки = НСтр("ru='- %1'");
			СообщениеПользователю = СообщениеПользователю + Символы.ПС + СтрШаблон(ШаблонСтроки, Строка(ИсследованиеОтправлено));
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		
		Результат.Вставить("ЕстьИсследованияВЗаказах", ЕстьИсследованияВЗаказах);
		Результат.Вставить("ЕстьОтправленныеИсследования", ЕстьОтправленныеИсследования);
		Возврат Результат;
	КонецЕсли;
	
	Если МассивЗаказыСозданы.Количество() > 0 Тогда
		МассивЗаказыСИсследованиями	= Новый Массив;
		МассивИсследования			= Новый Массив;
		СообщениеПользователю = НСтр("ru =	'Для анализов в текущем документе уже созданы заказы во внешнюю лабораторию.
											|При перераспределении по контейнерам данные анализы будут удалены из созданных заказов во избежание их дублирования.
											|Поэтому перед отправкой в лабораторию потребуется создать новые заказы для данных анализов:'");
		
		Для Каждого Заказ Из МассивЗаказыСозданы Цикл
			ИсследованияИКодыПробВЗаказе = Новый Массив;
			СтрокиЗаказы = ТаблицаЗаказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
			
			Для Каждого СтрокаЗаказы Из СтрокиЗаказы Цикл
				НоменклатураИсследования = СтрокаЗаказы.НоменклатураИсследования;
				ИсследованияИКодыПробВЗаказе.Добавить(Новый Структура("НоменклатураИсследования, КодПробы",
																	   НоменклатураИсследования, СтрокаЗаказы.КодПробы));
																	   
				Если МассивИсследования.Найти(НоменклатураИсследования) = Неопределено Тогда
					МассивИсследования.Добавить(НоменклатураИсследования);
				КонецЕсли;
			КонецЦикла;
			МассивЗаказыСИсследованиями.Добавить(Новый Структура("Заказ, Исследования", Заказ, ИсследованияИКодыПробВЗаказе));
		КонецЦикла;
		
		Для Каждого НоменклатураИсследования Из МассивИсследования Цикл
			ШаблонСтроки = НСтр("ru='- %1'");
			СообщениеПользователю = СообщениеПользователю + Символы.ПС + СтрШаблон(ШаблонСтроки, Строка(НоменклатураИсследования));
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		
		Результат.Вставить("ЕстьИсследованияВЗаказах", ЕстьИсследованияВЗаказах);
		Результат.Вставить("ЕстьОтправленныеИсследования", ЕстьОтправленныеИсследования);
		Результат.Вставить("Заказы", МассивЗаказыСИсследованиями);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет удаление определенных исследований из документов Заказ во внешнюю лабораторию.
//
// Параметры:
//  Заказы	 - Массив из Структура:
//              * Заказ			- ДокументСсылка.ЗаказВоВнешнююЛабораторию
//              * Исследования	- Массив из Структура:
// 								   * НоменклатураИсследования - СправочникСсылка.Номенклатура
// 								   * КодПробы				  - Строка
// 
// Возвращаемое значение:
//  Булево - Истина, если удаление исследований из заказов выполнено успешно.
//
Функция УдалитьИсследованияИзЗаказовВоВнешнююЛабораторию(Заказы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаказыУдалены = Новый Массив;
		
		Для Каждого ЗаказСИсследованиями Из Заказы Цикл
			ЗаказОбъект = ЗаказСИсследованиями.Заказ.ПолучитьОбъект();
			
			Для Каждого Исследование Из ЗаказСИсследованиями.Исследования Цикл
				СтрокиИсследования = ЗаказОбъект.Исследования.НайтиСтроки(
					Новый Структура("Номенклатура, КодПробы", Исследование.НоменклатураИсследования, Исследование.КодПробы));
					
				Для Каждого СтрокаИсследования Из СтрокиИсследования Цикл
					ЗаказОбъект.Исследования.Удалить(СтрокаИсследования);
				КонецЦикла;
			КонецЦикла;
			
			Если ЗаказОбъект.Исследования.Количество() = 0 И Не ЗаказОбъект.ПометкаУдаления Тогда
				ЗаказОбъект.ПометкаУдаления = Истина;
				ЗаказыУдалены.Добавить(ЗаказСИсследованиями.Заказ);
			КонецЕсли;
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
		
		Если ЗаказыУдалены.Количество() > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Заказы", ЗаказыУдалены);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОписьЗаказовЛабораторииСписокЗаказов.ЗаказВЛабораторию КАК Заказ,
			|	ОписьЗаказовЛабораторииСписокЗаказов.Ссылка КАК Опись
			|ИЗ
			|	Документ.ОписьЗаказовЛаборатории.СписокЗаказов КАК ОписьЗаказовЛабораторииСписокЗаказов
			|ГДЕ
			|	ОписьЗаказовЛабораторииСписокЗаказов.ЗаказВЛабораторию В(&Заказы)"
			;
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				ТаблицаЗаказыИОписи = РезультатЗапроса.Выгрузить();
				ТаблицаОписи = ТаблицаЗаказыИОписи.Скопировать(, "Опись");
				ТаблицаОписи.Свернуть("Опись");
				
				Для Каждого СтрокаОписи Из ТаблицаОписи Цикл
					ОписьОбъект = СтрокаОписи.Опись.ПолучитьОбъект();
					СтрокиЗаказы = ТаблицаЗаказыИОписи.НайтиСтроки(Новый Структура("Опись", СтрокаОписи.Опись));
					
					Для Каждого СтрокаЗаказы Из СтрокиЗаказы Цикл
						СтрокаЗаказНайдена = ОписьОбъект.СписокЗаказов.Найти(СтрокаЗаказы.Заказ);
						Если СтрокаЗаказНайдена <> Неопределено Тогда
							ОписьОбъект.СписокЗаказов.Удалить(СтрокаЗаказНайдена);
						КонецЕсли;
					КонецЦикла;
					
					Если ОписьОбъект.СписокЗаказов.Количество() = 0 И Не ОписьОбъект.ПометкаУдаления Тогда
						ОписьОбъект.ПометкаУдаления = Истина;
					КонецЕсли;
					ОписьОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение 
		
		ОтменитьТранзакцию();
		
		СообщениеПользователю = НСтр("ru =	'Не удалось удалить анализы из заказов во внешнюю лабораторию.
											|Повторите заново перераспределение анализов по контейнерам.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина; 
	
КонецФункции

Функция ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(Лаборатория, Номенклатура)
	
	Если Не ЛабораторияКлиентСерверПовтИсп.ИспользуютсяПравилаЗабора(Лаборатория) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь; // Значение по умолчанию.
	
	Если ЗначениеЗаполнено(Лаборатория) И ЗначениеЗаполнено(Номенклатура) Тогда
		
		МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
		
		Если МодульОбработчик <> Неопределено Тогда
			Параметры = Новый Структура("Лаборатория, Номенклатура", Лаборатория, Номенклатура);
			// Вызываем у модуля конкретной лаборатории ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора().
			Попытка
				Результат = МодульОбработчик.ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(Параметры);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполнения

// Стандартный текст ошибки пустого кода пробы
// 
// Возвращаемое значение:
//  Строка.
//
Функция ТекстОшибкиПустойКодПробы() Экспорт
	
	Возврат НСтр("ru='Код пробы пустой'");
	
КонецФункции

// Сформирует полный текст ошибки кода пробы с указанием контейнера и лаборатории.
//
// Параметры:
//  НомерКонтейнера			 - Число	 - номер строки контейнера.
//  ТекстОшибки				 - Строка	 - текст исходной ошибки.
//  ПредставлениеЛаборатории - Строка	 - название лаборатории.
// 
// Возвращаемое значение:
//  Строка.
//
Функция СформироватьТекстОшибкиКодаПробы(НомерКонтейнера, ТекстОшибки, ПредставлениеЛаборатории) Экспорт
	
	Если ЗначениеЗаполнено(НомерКонтейнера) Тогда
		ШаблонСтроки = "%1, контейнер №%2: %3.";
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ПредставлениеЛаборатории, НомерКонтейнера, ТекстОшибки);
	Иначе
		ШаблонСтроки = "%1: %2.";
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ПредставлениеЛаборатории, ТекстОшибки);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ПредставлениеЛаборатории, НомерКонтейнера, ТекстОшибки);
	
КонецФункции

#КонецОбласти

#Область РаботаСНомерамиЗаявок // Работа с кодами/штрихкодами проб (контейнеров)

// Возвращает Истина, если у лабоатории есть хотья бы один не завершенный не выключенный пул номеров.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - лаборатория, для которой получаем место забора
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьДоступныеПулыНомеров(Лаборатория) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПулыНомеровЗаявокЛабораторий.НачалоДиапазона КАК НачалоДиапазона
	|ИЗ
	|	РегистрСведений.ПулыНомеровЗаявокЛабораторий КАК ПулыНомеровЗаявокЛабораторий
	|ГДЕ
	|	ПулыНомеровЗаявокЛабораторий.Лаборатория = &Лаборатория
	|	И НЕ ПулыНомеровЗаявокЛабораторий.Закрыт
	|	И ПулыНомеровЗаявокЛабораторий.ТекущийНомер < ПулыНомеровЗаявокЛабораторий.ОкончаниеДиапазона"
	;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Получает новые номера заявок из используемых диапазонов номеров и формирует коды проб.
//  Если нет используемого диапазона, запрашивает его.
//
// Параметры:
//  ТаблицаКодыПроб		 - ТаблицаЗначений	 - таблица с колонками:
//  	* Лаборатория			- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* Контейнер   			- Строка - код контейнера
//  	* Биоматериал 			- Строка - код биоматериала
//  	* КодПробы    			- Строка - код пробы, который нужно сформировать для строки таблицы
//  	* Учтен       			- Булево - если имеет значение Истина, значит код пробы сформирован
//  	* ДиапазонОтсутствует 	- Булево - если имеет значение Истина, значит не был получен диапазон номеров.
//  СообщенияОбОшибках	 - Массив из Строка - накопитель строковых ошибок.
//
Процедура ПолучитьНовыеНомераЗаявок(ТаблицаКодыПроб, СообщенияОбОшибках = Неопределено) Экспорт
	
	ТаблицаЗапросыДиапазонов = Новый ТаблицаЗначений;
	ТаблицаЗапросыДиапазонов.Колонки.Добавить("Лаборатория");
	ТаблицаЗапросыДиапазонов.Колонки.Добавить("КоличествоЗапросов");
	ТаблицаЗапросыДиапазонов.Колонки.Добавить("ДиапазонПолучен", Новый ОписаниеТипов("Булево"));
		
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПулыНомеровЗаявокЛабораторий");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ТаблицаЛаборатории = ТаблицаКодыПроб.Скопировать(, "Лаборатория");
		ТаблицаЛаборатории.Свернуть("Лаборатория");
		МассивЛаборатории = ТаблицаЛаборатории.ВыгрузитьКолонку("Лаборатория");
		
		Запрос = Новый Запрос;	
		Запрос.УстановитьПараметр("Лаборатории", МассивЛаборатории);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПулыНомеровЗаявокЛабораторий.Лаборатория КАК Лаборатория,
		|	ПулыНомеровЗаявокЛабораторий.НачалоДиапазона КАК НачалоДиапазона,
		|	ПулыНомеровЗаявокЛабораторий.ОкончаниеДиапазона КАК ОкончаниеДиапазона,
		|	ПулыНомеровЗаявокЛабораторий.ТекущийНомер КАК ТекущийНомер,
		|	ВЫБОР
		|		КОГДА ПулыНомеровЗаявокЛабораторий.ТекущийНомер = 0
		|			ТОГДА ПулыНомеровЗаявокЛабораторий.НачалоДиапазона
		|		ИНАЧЕ ПулыНомеровЗаявокЛабораторий.ТекущийНомер
		|	КОНЕЦ КАК ТекущийНомерСортировка,
		|	ПулыНомеровЗаявокЛабораторий.Закрыт КАК Закрыт
		|ИЗ
		|	РегистрСведений.ПулыНомеровЗаявокЛабораторий КАК ПулыНомеровЗаявокЛабораторий
		|ГДЕ
		|	ПулыНомеровЗаявокЛабораторий.Лаборатория В(&Лаборатории)
		|	И НЕ ПулыНомеровЗаявокЛабораторий.Закрыт
		|	И НЕ ПулыНомеровЗаявокЛабораторий.ОкончаниеДиапазона < ПулыНомеровЗаявокЛабораторий.НачалоДиапазона
		|
		|УПОРЯДОЧИТЬ ПО
		|	Лаборатория,
		|	НачалоДиапазона"
		;
		ТаблицаДиапазоновСортировка = Запрос.Выполнить().Выгрузить();
		ТаблицаДиапазоновСортировка.Сортировать("Лаборатория, ТекущийНомерСортировка");
		ТаблицаДиапазонов = ТаблицаДиапазоновСортировка.Скопировать(,
			"Лаборатория, НачалоДиапазона, ОкончаниеДиапазона, ТекущийНомер, Закрыт");
				
		Для Каждого ЭлементЛаборатория Из МассивЛаборатории Цикл
			
			ПолучитьНомераЗаявок = Ложь;
			
			// Проверяем использование лабораторией существующих в контейнерах кодов проб при формировании кодов проб новых контейнеров.
			ИспользуютсяСуществующиеКодыПроб = ЛабораторияКлиентСерверПовтИсп.ИспользуютсяСуществующиеКодыПробПриПолученииНомеровЗаявок(ЭлементЛаборатория);
			Если ИспользуютсяСуществующиеКодыПроб Тогда
				СтрокиКодыПробЛаборатории = ТаблицаКодыПроб.НайтиСтроки(Новый Структура("Лаборатория", ЭлементЛаборатория));
				
				Для Каждого СтрокаКодыПробЛаборатории Из СтрокиКодыПробЛаборатории Цикл
					Если КодПробыКорректенДляЗаказа(СтрокаКодыПробЛаборатории.КодПробы, ЭлементЛаборатория.ВнешняяЛаборатория) Тогда
						ПолучитьНомераЗаявок = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			МассивДиапазонов = ТаблицаДиапазонов.НайтиСтроки(Новый Структура("Лаборатория", ЭлементЛаборатория));
			КоличествоДиапазонов = МассивДиапазонов.Количество();
			
			// Допускается получение номеров заявок и формирование новых кодов проб, если лаборатория использует
			// корректные существующие в контейнерах коды проб, или доступны диапазоны номеров.
			ПолучитьНомераЗаявок = ПолучитьНомераЗаявок Или КоличествоДиапазонов > 0;
			
			МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ЭлементЛаборатория);
			
			Если ПолучитьНомераЗаявок Тогда
				МассивКодыПроб = ТаблицаКодыПроб.НайтиСтроки(Новый Структура("Лаборатория, Учтен", ЭлементЛаборатория, Ложь));
				Если МассивКодыПроб.Количество() <> 0 Тогда
					Попытка
						МодульОбработчик.ПолучитьНовыеНомераЗаявок(МассивКодыПроб, МассивДиапазонов);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ЛимитДиапазонов = МодульОбработчик.ЛимитПуловНомеровЗаявок();
			Исключение
				ЛимитДиапазонов = 1;
			КонецПопытки;

			МассивДиапазонов = ТаблицаДиапазонов.НайтиСтроки(Новый Структура("Лаборатория, Закрыт", ЭлементЛаборатория, Ложь));			
			КоличествоДиапазонов = МассивДиапазонов.Количество();
			
			Если КоличествоДиапазонов < ЛимитДиапазонов Тогда
				СтрокаЗапросыДиапазонов = ТаблицаЗапросыДиапазонов.Добавить();
				СтрокаЗапросыДиапазонов.Лаборатория = ЭлементЛаборатория;
				СтрокаЗапросыДиапазонов.КоличествоЗапросов = ЛимитДиапазонов - КоличествоДиапазонов;
			КонецЕсли;
			
		КонецЦикла;	
		
		Для Каждого СтрокаДиапазон Из ТаблицаДиапазонов Цикл
			ДиапазонНомеровЗаявок = Новый Структура("Лаборатория, НачалоДиапазона, ОкончаниеДиапазона, ТекущийНомер, Закрыт");
			ЗаполнитьЗначенияСвойств(ДиапазонНомеровЗаявок, СтрокаДиапазон); 
			СохранитьДиапазонНомеровЗаявок(ДиапазонНомеровЗаявок);	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
				
	Исключение 
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Ошибка при получении номеров заявок лаборатории:
			|попытка получения была заблокирована, т.к. выполнялась одновременно с другим пользователем.
			|Повторите заново.'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		
		Возврат;
		
	КонецПопытки;
	
	Если ТаблицаЗапросыДиапазонов.Количество() > 0 Тогда  
		Для Каждого СтрокаЗапросыДиапазонов Из ТаблицаЗапросыДиапазонов Цикл
			Для Индекс = 1 По СтрокаЗапросыДиапазонов.КоличествоЗапросов Цикл
				Попытка
					Если ЗапроситьДиапазонНомеровЗаявок(СтрокаЗапросыДиапазонов.Лаборатория, СообщенияОбОшибках) Тогда 
						СтрокаЗапросыДиапазонов.ДиапазонПолучен = Истина;		
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;		
	КонецЕсли;
	
	СтрокиСПустымиКодами = ТаблицаКодыПроб.НайтиСтроки(Новый Структура("Учтен", Ложь));
	Для Каждого СтрокаСПустымКодом Из СтрокиСПустымиКодами Цикл
		СтрокиСДиапазоном = ТаблицаЗапросыДиапазонов.НайтиСтроки(Новый Структура("Лаборатория, ДиапазонПолучен",
		СтрокаСПустымКодом.Лаборатория, Истина));
		Если СтрокиСДиапазоном.Количество() = 0 Тогда 
			СтрокаСПустымКодом.ДиапазонОтсутствует = Истина;			
		КонецЕсли;			
	КонецЦикла;
	
	СтрокиДляПовторногоЗапроса = ТаблицаКодыПроб.НайтиСтроки(Новый Структура("Учтен, ДиапазонОтсутствует", Ложь, Ложь));
	Если СтрокиДляПовторногоЗапроса.Количество() > 0 Тогда 
		ПолучитьНовыеНомераЗаявок(ТаблицаКодыПроб);	
	КонецЕсли;
	
	МассивЛабораторийБезКодов = Новый Массив;
	СтрокиБезКодовИДиапазонов = ТаблицаКодыПроб.НайтиСтроки(Новый Структура("Учтен, ДиапазонОтсутствует", Ложь, Истина));
	Для Каждого СтрокаБезКодаИДиапазона Из СтрокиБезКодовИДиапазонов Цикл
		Если МассивЛабораторийБезКодов.Найти(СтрокаБезКодаИДиапазона.Лаборатория) = Неопределено Тогда 
			МассивЛабораторийБезКодов.Добавить(СтрокаБезКодаИДиапазона.Лаборатория);	
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЛабораторийБезКодов.Количество() > 0 Тогда
		Для Каждого ЭлементЛабораторияБезКодов Из МассивЛабораторийБезКодов Цикл 
			ШаблонСтроки = НСтр("ru = 'Ошибка при получении номеров заявок лаборатории %1:
				|отсутствует доступный пул номеров заявок.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ЭлементЛабораторияБезКодов);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЦикла;
		Если ТипЗнч(СообщенияОбОшибках) = Тип("Массив") Тогда
			Для Каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
				ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область РаспределениеПоЛабораториям

// Возвращает для номенклатуры исследований назначенные лаборатории по данным о приоритетах и доступности исследований.
//
// Параметры:
//  НоменклатураИсследований - Массив Из СправочникСсылка.Номенклатура
//  Дата					 - Дата - используется для проверки доступности исследований на определенную дату.
//  Филиал					 - СправочникСсылка.Филиалы - филиал, для которого определяются данные о приоритетах исследований.
// 
// Возвращаемое значение:
//  Соответствие
//
Функция ПолучитьЛабораторииИсследований(НоменклатураИсследований, Дата, Филиал) Экспорт
	
	КешАнализовЛабораторий = ПолучитьКешАнализовЛабораторий();
		
	ЛабораторииИсследований = Новый Соответствие;
	ОсновнаяЛабораторияФилиала = УправлениеНастройками.ПолучитьПараметрУчетнойПолитикиФилиала("ОсновнаяЛаборатория", Филиал);
	ОсновнаяЛабораторияФилиалаЭтоВнутренняяЛаборатория	= ЗначениеЗаполнено(ОсновнаяЛабораторияФилиала)
														И Не ЗначениеЗаполнено(ЛабораторияСерверПовтИсп.ВидЛаборатории(ОсновнаяЛабораторияФилиала));
	
	НедоступностьАнализов = ПолучитьНедоступностьАнализов(НоменклатураИсследований, Дата);
	ПриоритетыИсследований = ПолучитьПриоритетыИсследований(НоменклатураИсследований, Филиал);
	
	ОтборНедоступностьАнализов = Новый Структура("Лаборатория, Номенклатура");
	Для Каждого Номенклатура Из НоменклатураИсследований Цикл
		
		Лаборатория = Неопределено;
		ПриоритетыИсследования = ПриоритетыИсследований.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		
		Для Каждого ПриоритетИсследования Из ПриоритетыИсследования Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборНедоступностьАнализов, ПриоритетИсследования);
			Если НедоступностьАнализов.НайтиСтроки(ОтборНедоступностьАнализов).Количество() = 0 Тогда
				Если Не ЗначениеЗаполнено(ПриоритетИсследования.ВидЛаборатории) Тогда
					// Внутренняя лаборатория. КэшНСИЛаборатории не используется, любой анализ актуален.
					ЛабораторииИсследований.Вставить(Номенклатура, ПриоритетИсследования.Лаборатория);
					Прервать;
				Иначе
					// Внешняя лаборатория. Если для этой лаборатории анализ актуален (есть в КэшНСИЛаборатории), берём её.
					НоменклатураАнализов = КешАнализовЛабораторий.Получить(ПриоритетИсследования.Лаборатория);
					Если НоменклатураАнализов <> Неопределено
						И НоменклатураАнализов.Найти(Номенклатура) <> Неопределено
					Тогда
						ЛабораторииИсследований.Вставить(Номенклатура, ПриоритетИсследования.Лаборатория);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЛабораторииИсследований.Получить(Номенклатура) = Неопределено
			И ЗначениеЗаполнено(ОсновнаяЛабораторияФилиала)
		Тогда
			Если ОсновнаяЛабораторияФилиалаЭтоВнутренняяЛаборатория Тогда
				ЛабораторииИсследований.Вставить(Номенклатура, ОсновнаяЛабораторияФилиала);
			Иначе
				НоменклатураАнализов = КешАнализовЛабораторий.Получить(ОсновнаяЛабораторияФилиала);
				Если НоменклатураАнализов <> Неопределено
					И НоменклатураАнализов.Найти(Номенклатура) <> Неопределено
				Тогда
					ЛабораторииИсследований.Вставить(Номенклатура, ОсновнаяЛабораторияФилиала);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЛабораторииИсследований;
	
КонецФункции

// Проверяет доступность исследований внешних лабораторий и возвращает текст сообщения об ошибке,
// если были обнаружены недоступные исследования.
//
// Параметры:
//  ИсследованияДанныеФормы	 - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции - содержит данные
//							   о номенклатуре исследований и лабораториях в форме документа.
//  Дата					 - Дата - используется для проверки доступности исследований на определенную дату.
// 
// Возвращаемое значение:
//  Строка 
//
Функция ПроверитьДоступностьИсследованийВнешнихЛабораторий(Знач ИсследованияДанныеФормы, Знач Дата) Экспорт

	ТекстСообщения = "";
	
	Исследования = ИсследованияДанныеФормы.Выгрузить(, "Номенклатура, Лаборатория");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсследованияДокумента.Номенклатура КАК Номенклатура,
	|	ИсследованияДокумента.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ ИсследованияДокумента
	|ИЗ
	|	&ИсследованияДокумента КАК ИсследованияДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсследованияДокумента.Лаборатория КАК Лаборатория,
	|	ИсследованияДокумента.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.ID КАК ID,
	|	НоменклатураАнализов.Исключен КАК Исключен
	|ПОМЕСТИТЬ НоменклатураАнализов
	|ИЗ
	|	ИсследованияДокумента КАК ИсследованияДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ПО ИсследованияДокумента.Лаборатория = НоменклатураАнализов.Лаборатория
	|			И ИсследованияДокумента.Номенклатура = НоменклатураАнализов.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыНедоступностиАнализов.Лаборатория КАК Лаборатория,
	|	ПериодыНедоступностиАнализов.Номенклатура КАК Номенклатура,
	|	ПериодыНедоступностиАнализов.ID КАК ID,
	|	ПериодыНедоступностиАнализов.Период КАК ДатаНачала,
	|	ПериодыНедоступностиАнализов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ПериодыНедоступностиАнализов
	|ИЗ
	|	РегистрСведений.ПериодыНедоступностиАнализов КАК ПериодыНедоступностиАнализов
	|ГДЕ
	|	ПериодыНедоступностиАнализов.Период <= &ДатаДокумента
	|	И (ПериодыНедоступностиАнализов.ДатаОкончания > &ДатаДокумента
	|			ИЛИ ПериодыНедоступностиАнализов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура
	|ИЗ
	|	НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Исключен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	ПериодыНедоступностиАнализов.ДатаНачала КАК ДатаНачала,
	|	ПериодыНедоступностиАнализов.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыНедоступностиАнализов КАК ПериодыНедоступностиАнализов
	|		ПО НоменклатураАнализов.Лаборатория = ПериодыНедоступностиАнализов.Лаборатория
	|			И (НЕ НоменклатураАнализов.Исключен)
	|			И (ПериодыНедоступностиАнализов.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И НоменклатураАнализов.ID = ПериодыНедоступностиАнализов.ID
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыНедоступностиАнализов.Лаборатория,
	|	ПериодыНедоступностиАнализов.Номенклатура,
	|	ПериодыНедоступностиАнализов.ДатаНачала,
	|	ПериодыНедоступностиАнализов.ДатаОкончания
	|ИЗ
	|	ИсследованияДокумента КАК ИсследованияДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыНедоступностиАнализов КАК ПериодыНедоступностиАнализов
	|		ПО ИсследованияДокумента.Лаборатория = ПериодыНедоступностиАнализов.Лаборатория
	|			И ИсследованияДокумента.Номенклатура = ПериодыНедоступностиАнализов.Номенклатура
	|			И (НЕ ПериодыНедоступностиАнализов.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))"
	;
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ИсследованияДокумента", Исследования);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	НоменклатураИсключена = ПакетЗапроса[3];
	
	Если Не НоменклатураИсключена.Пустой() Тогда
		Выборка = НоменклатураИсключена.Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонСтроки = НСтр("ru='Исследование ""%1"" недоступно в лаборатории ""%2"".%3'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
				Строка(Выборка.Номенклатура), Строка(Выборка.Лаборатория), Символы.ПС);
			ТекстСообщения = ТекстСообщения + Сообщение;
		КонецЦикла;
	КонецЕсли;
	
	НоменклатураНеДоступна = ПакетЗапроса[4];
	
	Если Не НоменклатураНеДоступна.Пустой() Тогда
		Выборка = НоменклатураНеДоступна.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаПериод = ?(ЗначениеЗаполнено(Выборка.ДатаОкончания), "до " + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy"),
				"с " + Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yyyy"));
			ШаблонСтроки = НСтр("ru='Исследование ""%1"" не выполняется %2 в лаборатории ""%3"".%4'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
				Строка(Выборка.Номенклатура), СтрокаПериод, Строка(Выборка.Лаборатория), Символы.ПС);
			ТекстСообщения = ТекстСообщения + Сообщение;
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПолучитьНедоступностьАнализов(НоменклатураИсследований, Дата) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("НоменклатураИсследований", НоменклатураИсследований);
	
	// Получаем информацию о недоступных анализах.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыНедоступности.Лаборатория КАК Лаборатория,
	|	ПериодыНедоступности.Номенклатура КАК Номенклатура,
	|	ПериодыНедоступности.ID КАК ID
	|ПОМЕСТИТЬ ПериодыНедоступностиАнализов
	|ИЗ
	|	РегистрСведений.ПериодыНедоступностиАнализов.СрезПоследних КАК ПериодыНедоступности
	|ГДЕ
	|	ПериодыНедоступности.Период <= &Дата
	|	И (ПериодыНедоступности.ДатаОкончания > &Дата
	|			ИЛИ ПериодыНедоступности.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|	И (ПериодыНедоступности.Номенклатура В (&НоменклатураИсследований)
	|			ИЛИ ПериодыНедоступности.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыНедоступностиАнализов.Лаборатория КАК Лаборатория,
	|	ПериодыНедоступностиАнализов.Номенклатура КАК Номенклатура,
	|	ПериодыНедоступностиАнализов.ID КАК ID
	|ИЗ
	|	ПериодыНедоступностиАнализов КАК ПериодыНедоступностиАнализов
	|ГДЕ
	|	ПериодыНедоступностиАнализов.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)"
	;
	НедоступностьАнализов = Запрос.Выполнить().Выгрузить();
	
	// Для лабораторий, хранящих недоступность анализов по ID, а не номенклатуре, получаем недоступную номенклатуру по ID.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория,
	|	НоменклатураАнализов.Номенклатура
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыНедоступностиАнализов КАК ПериодыНедоступностиАнализов
	|		ПО НоменклатураАнализов.ID = ПериодыНедоступностиАнализов.ID
	|			И НоменклатураАнализов.Лаборатория = ПериодыНедоступностиАнализов.Лаборатория"
	;
	
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НедоступностьАнализов.Добавить(), Выб);
	КонецЦикла;
	
	Возврат НедоступностьАнализов;

КонецФункции

Функция ПолучитьПриоритетыИсследований(НоменклатураИсследований, Филиал)

	// Получаем информацию о приоритетах лабораторий.
	КешЛабораторий = ПолучитьКешНСИЛабораторий();
	Если КешЛабораторий = Неопределено Тогда
		ЗаполнитьКэшНСИЛабораторий();
		КешЛабораторий = ПолучитьКешНСИЛабораторий();
	КонецЕсли;
	
	ПриоритетыИсследованийВсе = ПолучитьИзВременногоХранилища(КешЛабораторий.ПриоритетыИсследований);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриоритетыИсследованийВсе", ПриоритетыИсследованийВсе);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("НоменклатураИсследований", НоменклатураИсследований);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Филиал КАК Филиал,
	|	Таб.Лаборатория КАК Лаборатория,
	|	Таб.Номенклатура КАК Номенклатура,
	|	Таб.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ПриоритетыИсследованийВсе
	|ИЗ
	|	&ПриоритетыИсследованийВсе КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Приоритет КАК Приоритет,
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Номенклатура КАК Номенклатура,
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Лаборатория КАК Лаборатория,
	|	Лаборатории.ВнешняяЛаборатория КАК ВидЛаборатории
	|ИЗ
	|	ПриоритетыИсследованийВсе КАК ПриоритетыРаспределенияАнализовПоЛабораториям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Лаборатории КАК Лаборатории
	|		ПО (Лаборатории.Ссылка = ПриоритетыРаспределенияАнализовПоЛабораториям.Лаборатория)
	|ГДЕ
	|	ПриоритетыРаспределенияАнализовПоЛабораториям.Филиал = &Филиал
	|	И ПриоритетыРаспределенияАнализовПоЛабораториям.Номенклатура В(&НоменклатураИсследований)
	|	И ПриоритетыРаспределенияАнализовПоЛабораториям.Приоритет > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет"
	;
	ПриоритетыИсследований = Запрос.Выполнить().Выгрузить();
	ПриоритетыИсследований.Индексы.Добавить("Номенклатура");
	
	Возврат ПриоритетыИсследований;
	
КонецФункции

#КонецОбласти

// Возвращает массив с описаниями обработки контейнеров.
//
// Параметры:
//  ТаблицаКонтейнеры	 - ТаблицаЗначений	 - таблица с колонками:
//  	* Лаборатория				- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* ВидЛаборатории			- ПеречислениеСсылка.ВнешниеЛаборатории - вид лаборатории
//  	* БиоматериалПредставление	- Строка - наименование биоматериала
//  	* КонтейнерПредставление	- Строка - наименование контейнера
//  	* КодПробы					- Строка - код пробы, используется в описании обработки контейнера
//  	* ИДПравила					- Строка - идентификатор правила, по которому можно определить описание обработки контейнера
//  	* ИдАнализа					- Строка - идентификатор анализа, по которому можно определить описание обработки контейнера.
// 
// Возвращаемое значение:
//   Массив - массив из СтрокаТаблицыЗначений, содержит:
//  	* Лаборатория				- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* Биоматериал				- Строка - наименование биоматериала
//  	* Контейнер					- Строка - наименование контейнера, для которого указано описание его обработки
//  	* КодПробы					- Строка - код пробы, используется в описании обработки контейнера
//  	* КодПротокола				- Строка - код протокола описания
//  	* Описание					- Строка - описание обработки контейнера.
//
Функция ПолучитьОписанияОбработкиКонтейнеров(ТаблицаКонтейнеры) Экспорт
	
	МассивОписанияОбработкиКонтейнеров = Новый Массив;
		
	Если ТаблицаКонтейнеры.Количество() = 0 Тогда
		Возврат МассивОписанияОбработкиКонтейнеров;	
	КонецЕсли;
	
	ТаблицаВидыЛабораторий = ТаблицаКонтейнеры.Скопировать(, "ВидЛаборатории");
	ТаблицаВидыЛабораторий.Свернуть("ВидЛаборатории");
	МассивВидыЛабораторий = ТаблицаВидыЛабораторий.ВыгрузитьКолонку("ВидЛаборатории");
	
	Для Каждого ВидЛаборатории Из МассивВидыЛабораторий Цикл 
		ТаблицаКонтейнерыЛаборатории = ТаблицаКонтейнеры.Скопировать(Новый Структура("ВидЛаборатории", ВидЛаборатории));
		Попытка		
			ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВидЛаборатории).ПолучитьОписанияОбработкиКонтейнеров(
				ТаблицаКонтейнерыЛаборатории, МассивОписанияОбработкиКонтейнеров);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивОписанияОбработкиКонтейнеров;
	
КонецФункции

// Возвращает представление места забора исследований для лаборатории в виде кода, выданного лабораторией,
//  а в случае его отсутствия - в виде адреса клиники.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - лаборатория, для которой получаем место забора
//  Клиника		 - СправочникСсылка.Филиалы		 - клиника, для которой получаем адрес
// 
// Возвращаемое значение:
//   Строка,
//	 Неопределено - если место забора не получено.
//
Функция ПолучитьМестоЗабораИсследований(Лаборатория, Клиника) Экспорт 
	
	Попытка
		МестоЗабора = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория).ПолучитьМестоЗабораИсследований(Лаборатория);
	Исключение
		МестоЗабора = Неопределено;	
	КонецПопытки;
	
	Если МестоЗабора = Неопределено Тогда
		ТипКИАдрес = Перечисления.ТипыКонтактнойИнформации.Адрес; 
		МестоЗабора = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиника, ТипКИАдрес,
			Справочники.ВидыКонтактнойИнформации.АдресФактический);
		Если Не ЗначениеЗаполнено(МестоЗабора) Тогда 
			МестоЗабора = КонтактнаяИнформацияСервер.ПолучитьКИОбъекта(Клиника, ТипКИАдрес,
				Справочники.ВидыКонтактнойИнформации.АдресЮридический);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МестоЗабора;
	
КонецФункции	

// Печатает сопроводительный документ к передаваемым в лабораторию контейнерам заказов по описи
//	путём перенаправления запроса в серверный модуль лаборатории описи.
//	Если модуль лаборатории не реализует собственного алгоритма печати этой формы,
//	то возвращает Неопределено.
//
// Параметры:
//  ОписьЗаказовЛаборатории	 - ДокументСсылка.ОписьЗаказовЛаборатории	 - опись заказов.
// 
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено - печатная форма сопроводительного документа в лабораторию.
//
Функция ПечатьОписиЗаказовДляЛаборатории(ОписьЗаказовЛаборатории) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		МодульЛаборатории = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ОписьЗаказовЛаборатории.Лаборатория);
		Результат = МодульЛаборатории.ПечатьОписиЗаказовДляЛаборатории(ОписьЗаказовЛаборатории);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

// Создает документ "Установка цен" для номенклатуры исследований.
//
// Параметры:
//  ТаблицаЦен	 - ТаблицаЗначений	 - таблица с колонками:
//  	* Номенклатура				- СправочникСсылка.Номенклатура - номенклатура, для которой указана цена
//  	* Цена						- Число - цена номенклатуры
//  Дата		 - Дата - дата установки цен.
//  Прейскурант	 - СправочникСсылка.Прейскуранты - прейскурант, используемый для установки цен. 
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой производится установка цен.
// 
// Возвращаемое значение:
//   ДокументСсылка.УстановкаЦен,
//	 Неопределено - если документ "Установка цен" не создан.
//
Функция УстановитьЦеныНоменклатурыИсследований(ТаблицаЦен, Дата, Прейскурант, Знач Лаборатория = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивНовыхЦен = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Прейскурант", Прейскурант);
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура В (&Номенклатура)
	|	И ЦеныНоменклатурыСрезПоследних.Прейскурант = &Прейскурант"
	;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЦена Из ТаблицаЦен Цикл
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаЦена.Номенклатура, "Номенклатура");
		Если СтрокаРезультат <> Неопределено Тогда
			Если СтрокаРезультат.Цена = СтрокаЦена.Цена
				Или СтрокаРезультат.Период = НачалоДня(Дата)  	
			Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		МассивНовыхЦен.Добавить(СтрокаЦена);
	КонецЦикла;
	
	Если МассивНовыхЦен.Количество() <> 0 Тогда
	
		УстановкаЦен = Документы.УстановкаЦен.СоздатьДокумент();
		УстановкаЦен.Дата = Дата;
		УстановкаЦен.ВидОперации = Перечисления.ВидыОперацийУстановкиЦен.ЦеныПрейскурантов;
		УстановкаЦен.Прейскурант = Прейскурант;
		УстановкаЦен.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		УстановкаЦен.Комментарий = СокрЛП(НСтр("ru='Загружены из цен внешней лаборатории'") + " " + Строка(Лаборатория)) + ". " + Формат(Дата, "ДЛФ=DT");
		
		Для Каждого СтрокаЦена Из МассивНовыхЦен Цикл
			НоменклатураЦены = СтрокаЦена.Номенклатура;
			Если ЗначениеЗаполнено(НоменклатураЦены)
				И СтрокаЦена.Цена <> 0
				И УстановкаЦен.Номенклатура.Найти(НоменклатураЦены, "Номенклатура") = Неопределено
			Тогда 
				НоваяСтрока = УстановкаЦен.Номенклатура.Добавить();
				НоваяСтрока.Номенклатура = НоменклатураЦены;
				НоваяСтрока.ЕдиницаИзмерения = Ценообразование.ПолучитьЕдиницуПродажиНоменклатуры(НоменклатураЦены);
				НоваяСтрока.Цена = СтрокаЦена.Цена;
			КонецЕсли;
		КонецЦикла;
		
		Если УстановкаЦен.Номенклатура.Количество() = 0 Тогда
			Возврат Неопределено;	
		КонецЕсли;
		
		Попытка
			УстановкаЦен.Записать(РежимЗаписиДокумента.Проведение);
		Исключение	
			УстановкаЦен.Записать();
		КонецПопытки;
		
		Возврат УстановкаЦен.Ссылка;	
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

// Получает сроки выполнения для номенклатуры исследований по лабораториям.
//
// Параметры:
//  Исследования - ТаблицаЗначений - лабораторые исследования:
//  	* НомерСтроки - Число
//  	* Номенклатура - СправочникСсылка.Номенклатура
//  	* Лаборатория - СправочникСсылка.Лаборатории
// 
// Возвращаемое значение:
//	ТаблицаЗначений:
//  	* Лаборатория - СправочникСсылка.Лаборатории
//  	* Исследование - СправочникСсылка.Номенклатура
//  	* СрокВыполнения - Строка
//
Функция ПолучитьСрокиВыполненияИсследований(Исследования) Экспорт
	
	СрокиВыполненияИсследований = Новый ТаблицаЗначений;
	СрокиВыполненияИсследований.Колонки.Добавить("Лаборатория");
	СрокиВыполненияИсследований.Колонки.Добавить("Исследование");
	СрокиВыполненияИсследований.Колонки.Добавить("СрокВыполнения");

	Лаборатории = Исследования.Скопировать(, "Лаборатория");
	Лаборатории.Свернуть("Лаборатория");
	
	Для Каждого СтрЛаборатории Из Лаборатории Цикл
		Если ЗначениеЗаполнено(СтрЛаборатории.Лаборатория) Тогда
			ИсследованияЛаборатории = Исследования.Скопировать(Новый Структура("Лаборатория", СтрЛаборатории.Лаборатория));
			Попытка
				МодульЛаборатории = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(СтрЛаборатории.Лаборатория);
				МодульЛаборатории.ПолучитьСрокиВыполненияИсследований(СрокиВыполненияИсследований, ИсследованияЛаборатории);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СрокиВыполненияИсследований;
	
КонецФункции

// Возвращает дополнительную информацию по контейнерам в документе забора исследований.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ДействияНадАнализами - документ забора исследований.
// 
// Возвращаемое значение:
//   Соответствие:
//   	* Ключ - Число - номер строки таб. части "Контейнеры".
//   	* Значение - Строка - содержит дополнительную информацию.
//
Функция ДополнительнаяИнформацияПоКонтейнерамДляПечатиЗаказа(ДокументСсылка) Экспорт

	Результат = Новый Соответствие;
	
	// Получение видов лабораторий, для которых сформированы контейнеры.
	ТаблицаЛаборатории = ДокументСсылка.Контейнеры.Выгрузить(, "Лаборатория");
	ТаблицаЛаборатории.Свернуть("Лаборатория");
	ТаблицаЛаборатории.Колонки.Добавить("ВидЛаборатории", Новый ОписаниеТипов("ПеречислениеСсылка.ВнешниеЛаборатории"));
	
	Для Каждого СтрТаблица Из ТаблицаЛаборатории Цикл
		Если ЗначениеЗаполнено(СтрТаблица.Лаборатория) Тогда
			СтрТаблица.ВидЛаборатории = СтрТаблица.Лаборатория.ВнешняяЛаборатория;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЛаборатории.Свернуть("ВидЛаборатории");
	
	// Получение дополнительной информации по контейнерам отдельно для каждого вида лаборатории.
	Для Каждого СтрТаблица Из ТаблицаЛаборатории Цикл
		Попытка
			МодульЛаборатории = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(СтрТаблица.ВидЛаборатории);
			РезультатЛаборатории = МодульЛаборатории.ДополнительнаяИнформацияПоКонтейнерамДляПечатиЗаказа(ДокументСсылка);
			Для Каждого ЭлементРезультат Из РезультатЛаборатории Цикл
				Результат.Вставить(ЭлементРезультат.Ключ, ЭлементРезультат.Значение);
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Определяет значение признака исключения для номенклатуры исследований лаборатории
// в регистре сведений "Номенклатура анализов внешних лабораторий".
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой определяется исключенная номенклатура.
//  Цены		 - ТаблицаЗначений: 
//  	* Номенклатура	- СправочникСсылка.Номенклатура
//  	* Цена 			- Число - цена исследования/анализа.
//  	* ID 			- Строка - идентификатор исследования/анализа.
//  	* Код 			- Строка - код исследования/анализа.
//
Процедура ОпределитьИсключенныеИсследования(Лаборатория, Цены) Экспорт
	
	НЗНоменклатураАнализов = РегистрыСведений.НоменклатураАнализов.СоздатьНаборЗаписей();
	НЗНоменклатураАнализов.Отбор.Лаборатория.Установить(Лаборатория);
	НЗНоменклатураАнализов.Прочитать();
	
	// Определяем заполнение колонки идентификаторов.
	ЗаполненID = Ложь;
	ТаблицаID = Цены.Скопировать(, "ID");
	ТаблицаID.Свернуть("ID");
	
	Для Каждого СтрТаблицаID Из ТаблицаID Цикл
		Если Не ПустаяСтрока(СтрТаблицаID.ID) Тогда
			ЗаполненID = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеКолонкиИдентификаторов = ?(ЗаполненID, "ID", "Код");
	
	Для Каждого Запись Из НЗНоменклатураАнализов Цикл
		НайденаНоменклатура = Цены.Найти(Запись.ID, НаименованиеКолонкиИдентификаторов) <> Неопределено;
			
		Если Не НайденаНоменклатура И Не Запись.Исключен Тогда
			Запись.Исключен = Истина;
		ИначеЕсли НайденаНоменклатура И Запись.Исключен Тогда
			Запись.Исключен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	НЗНоменклатураАнализов.Записать();
	
КонецПроцедуры

#Область ОбработкаЗагрузкиСправочников

Процедура СохранитьНоменклатуруАнализов(Лаборатория, НастройкиСохранения, ДеревоНоменклатуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
	
	НачатьТранзакцию();
	
	ОбновляемыеРеквизитыНоменклатуры = Новый Массив;
	
	Попытка
		ОбновляемыеРеквизитыНоменклатурыИндивидуальные = МодульОбработчик.ОбновляемыеРеквизитыНоменклатурыПриЗагрузке();
		Для Каждого ИмяРеквизита Из ОбновляемыеРеквизитыНоменклатурыИндивидуальные Цикл
			Если ОбновляемыеРеквизитыНоменклатуры.Найти(ИмяРеквизита) = Неопределено Тогда
				ОбновляемыеРеквизитыНоменклатуры.Добавить(ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	Исключение КонецПопытки;
	
	ОбработаннаяНоменклатура = Новый Массив;
	
	// Получаем из справочника иерархию группы загрузки номенклатуры анализов с подчиненными группами.
	ДеревоГруппыЗагрузкиНоменклатуры = ИерархияГруппыЗагрузкиНоменклатурыАнализов(НастройкиСохранения.ГруппаЗагрузкиНоменклатуры);
	
	// Рекурсивное сохранение номенклатуры анализов из дерева номенклатуры.
	ПереборДереваНоменклатуры(ДеревоНоменклатуры.Строки,
								ДеревоГруппыЗагрузкиНоменклатуры,
								НастройкиСохранения,
								ОбработаннаяНоменклатура,
								Лаборатория,
								ОбновляемыеРеквизитыНоменклатуры);
		
	Попытка
		МодульОбработчик.ПриСохраненииДанныхНоменклатуры(Лаборатория, ОбработаннаяНоменклатура);
	Исключение КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Пустая таблица цен для заполнения в модуле конкретной лаборатории.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками: Код - Строка - публичный код анализа, ID - Строка - внутренний код анализа в лаборатории (если совпадает с публичным, то не заполняется), Цена - Число, Номенклатура - СправочникСсылка.Номенклатура - номенклатура анализа.
//
Функция ПустаяТаблицаЦен() Экспорт
	
	Цены = Новый ТаблицаЗначений;
	Цены.Колонки.Добавить("Код",  Новый ОписаниеТипов("Строка"));
	Цены.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	Цены.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Цены.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Возврат Цены;
	
КонецФункции

// Возвращает таблицу данных о номенклатуре исследований внешней лаборатории.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой получаем данные.
// 
// Возвращаемое значение:
//  ТаблицаЗначений: 
//  	* Номенклатура				- СправочникСсылка.Номенклатура 
//  	* Лаборатория 				- СправочникСсылка.Лаборатории 
//  	* ID 						- Строка - идентификатор исследования/анализа.
//
Функция НоменклатураАнализовЛаборатории(Лаборатория) Экспорт
	
	Попытка
		МодульЛаборатории = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
		ИспользоватьСопоставленияДругойЛаборатории = Не МодульЛаборатории.ЗапрещеноИспользованиеСопоставленияДругойЛабораторииЭтогоВида();
	Исключение
		ИспользоватьСопоставленияДругойЛаборатории = Истина;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнешняяЛаборатория", Лаборатория.ВнешняяЛаборатория);
	Запрос.УстановитьПараметр("Лаборатория", ?(ИспользоватьСопоставленияДругойЛаборатории, Неопределено, Лаборатория));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.ID КАК ID
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория.ВнешняяЛаборатория = &ВнешняяЛаборатория
	|	И (&Лаборатория = НЕОПРЕДЕЛЕНО
	|			ИЛИ НоменклатураАнализов.Лаборатория = &Лаборатория)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Лаборатория,
	|	ID"
	;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Возвращает хранимые настройки взаимодействия с лабораторией с обращением к отдельному общему модулю лаборатории.
//
// Параметры:
//  Лаборатория	- СправочникСсылка.Лаборатории - лаборатория, для которой получаем настройки.
// 
// Возвращаемое значение:
//   - Неопределено - если настройки не записаны или не используются.
//   - Структура - настройки для работы с лабораторией.
//
Функция ПолучитьНастройкиВзаимодействия(Лаборатория) Экспорт
	
	НастройкиВзаимодействия = Неопределено;
	
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
	Если МодульОбработчик <> Неопределено Тогда
		Попытка
			НастройкиВзаимодействия = МодульОбработчик.ПолучитьНастройкиВзаимодействия(Лаборатория);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат НастройкиВзаимодействия;
	
КонецФункции

// Выполняет удаление записей в справочниках лаборатории с обращением к отдельному общему модулю лаборатории.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой очищаем справочники. 
//
Процедура ОчиститьСправочники(Лаборатория) Экспорт

	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
	Если МодульОбработчик <> Неопределено Тогда
		Попытка
			МодульОбработчик.ОчиститьСправочники(Лаборатория);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ИерархияГруппыЗагрузкиНоменклатурыАнализов(ГруппаЗагрузкиНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаЗагрузкиНоменклатуры", ГруппаЗагрузкиНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК ГруппаСсылка,
	|	Номенклатура.Наименование КАК ГруппаНаименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаЗагрузкиНоменклатуры)
	|	И Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Ссылка ИЕРАРХИЯ"
	;
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат Дерево;

КонецФункции

// При загрузке номенклатуры из лаборатории в ходе обновления НСИ.
Процедура ПереборДереваНоменклатуры(СтрокиДереваНоменклатуры, 
									ДеревоГруппыЗагрузкиНоменклатуры,
									НастройкиСохранения, 
									ОбработаннаяНоменклатура, 
									Лаборатория,
									ОбновляемыеРеквизитыНоменклатуры,
									РодительскаяСтрока = Неопределено)
									
	Для Каждого СтрокаДерева Из СтрокиДереваНоменклатуры Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			// Если строка является группой, то обрабатываем подчиненные строки.
			ПереборДереваНоменклатуры(СтрокаДерева.Строки,
										ДеревоГруппыЗагрузкиНоменклатуры,
										НастройкиСохранения,
										ОбработаннаяНоменклатура,
										Лаборатория,
										ОбновляемыеРеквизитыНоменклатуры,
										СтрокаДерева);
										
		Иначе
			// Если строка не выбрана, то пропускаем.
			Если Не СтрокаДерева.Создать Тогда
				Продолжить;
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда // Анализ не был сопоставлен с номенклатурой в базе.
			
				Если НастройкиСохранения.СоздаватьНовуюНоменклатуру Тогда
					// Автоматически создаем новый элемент номенклатуры.
					Номенклатура = ПолучитьОбъектНоменклатурыСБазовымЗаполнениемПриОбновленииАнализов(НастройкиСохранения, ОбновляемыеРеквизитыНоменклатуры, СтрокаДерева);
					
					// Для номенклатуры получаем/создаем в справочнике родительские группы.
					Если РодительскаяСтрока <> Неопределено Тогда
						Номенклатура.Родитель = ПолучитьГруппуНоменклатурыАнализа(НастройкиСохранения.ГруппаЗагрузкиНоменклатуры, РодительскаяСтрока, ДеревоГруппыЗагрузкиНоменклатуры);
					Иначе
						Номенклатура.Родитель = НастройкиСохранения.ГруппаЗагрузкиНоменклатуры;
					КонецЕсли;
					Номенклатура.Записать();
					
					СтрокаДерева.Номенклатура = Номенклатура.Ссылка;
				КонецЕсли;
			Иначе
				Если НастройкиСохранения.ОбновлятьРеквизитыНоменклатурыПриПовторнойЗагрузке Тогда
					Номенклатура = ПолучитьОбъектНоменклатурыСБазовымЗаполнениемПриОбновленииАнализов(НастройкиСохранения, ОбновляемыеРеквизитыНоменклатуры, СтрокаДерева);
					Номенклатура.Записать();
				КонецЕсли;
				Если НастройкиСохранения.ИзменятьГруппуНоменклатурыПриПовторнойЗагрузке Тогда
					// Для номенклатуры получаем/создаем в справочнике родительские группы.
					Если РодительскаяСтрока <> Неопределено Тогда
						НовыйРодитель = ПолучитьГруппуНоменклатурыАнализа(НастройкиСохранения.ГруппаЗагрузкиНоменклатуры, РодительскаяСтрока, ДеревоГруппыЗагрузкиНоменклатуры);
					Иначе
						НовыйРодитель = НастройкиСохранения.ГруппаЗагрузкиНоменклатуры;
					КонецЕсли;
					Если СтрокаДерева.Номенклатура.Родитель <> НовыйРодитель Тогда
						Номенклатура = СтрокаДерева.Номенклатура.ПолучитьОбъект();
						Номенклатура.Родитель = НовыйРодитель;
						Номенклатура.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
				Запись = РегистрыСведений.НоменклатураАнализов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаДерева); // В т.ч. индивидуальные колонки из обработки загрузки как Helix_MultipleRules.
				Запись.Номенклатура 			= СтрокаДерева.Номенклатура;
				Запись.Лаборатория	 			= Лаборатория;
				Если Не ЗначениеЗаполнено(Запись.ID) Тогда
					Запись.ID 					= СтрокаДерева.Код;
				КонецЕсли;
				Запись.Записать();
				
				// Добавление номенклатуры в массив для последующей обработки.
				ОбработаннаяНоменклатура.Добавить(СтрокаДерева.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// При загрузке номенклатуры из лаборатории в ходе обновления НСИ.
Функция ПолучитьОбъектНоменклатурыСБазовымЗаполнениемПриОбновленииАнализов(НастройкиСохранения, ОбновляемыеРеквизитыНоменклатуры, СтрокаДерева)
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Номенклатура = СтрокаДерева.Номенклатура.ПолучитьОбъект();
	Иначе
		Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
		Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;
		Номенклатура.КатегорияВыработки = НастройкиСохранения.СпециализацияНоменклатуры;
	КонецЕсли;
	
	Номенклатура.Наименование = СтрокаДерева.Наименование;
	Номенклатура.НаименованиеПолное = СтрокаДерева.Наименование;
	Номенклатура.Анализ = Истина;
	Номенклатура.КонтрагентПринципал = НастройкиСохранения.КонтрагентПринципал;
	Если Не НастройкиСохранения.НеЗаписыватьАртикулИНеСопоставлять Тогда  
		Номенклатура.Артикул = СтрокаДерева.Код;
	КонецЕсли;
	Для Каждого ИмяРеквизита Из ОбновляемыеРеквизитыНоменклатуры Цикл
		Номенклатура[ИмяРеквизита] = СтрокаДерева[ИмяРеквизита];
	КонецЦикла;
	
	Возврат Номенклатура;
	
КонецФункции

// Возвращает группу номенклатуры анализа.
//
// Параметры:
//  ГруппаЗагрузкиНоменклатуры	 				- СправочникСсылка.Номенклатура - группа загрузки номенклатуры анализов.
//  РодительскаяСтрокаЗагружаемойНоменклатуры	- СтрокаДереваЗначений	- содержит наименование группы, в которую входит загружаемая номенклатура, 
//																		в дереве значений обработки загрузки справочников.
//  ДеревоГруппыЗагрузкиНоменклатуры			- ДеревоЗначений - содержит иерархию группы загрузки номенклатуры анализов.
// 
// Возвращаемое значение:
//   - СправочникСсылка.Номенклатура
//
Функция ПолучитьГруппуНоменклатурыАнализа(ГруппаЗагрузкиНоменклатуры, РодительскаяСтрокаЗагружаемойНоменклатуры, ДеревоГруппыЗагрузкиНоменклатуры)
	
	// Получаем массив наименований родительских групп для номенклатуры в строке дерева номенклатуры из обработки загрузки.
	МассивГруппыРодители = НаименованияИерархическихГруппЗагружаемойНоменклатурыАнализа(РодительскаяСтрокаЗагружаемойНоменклатуры);
	МассивГруппыРодители.Добавить(Строка(ГруппаЗагрузкиНоменклатуры));
	
	Индекс = МассивГруппыРодители.Количество() - 1;
	СтрокиДереваГруппыЗагрузкиНоменклатуры = ДеревоГруппыЗагрузкиНоменклатуры.Строки;
	ГруппаРодитель = Справочники.Номенклатура.ПустаяСсылка();

	УстановитьПривилегированныйРежим(Истина);
		
	// Проверяем, существует ли уже группа номенклатуры в справочнике.
	Пока Не Индекс < 0 Цикл
		СоздатьНовуюГруппу = Истина;
		НаименованиеГруппы = МассивГруппыРодители[Индекс];
		Индекс = Индекс - 1;
		Если ПустаяСтрока(НаименованиеГруппы) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокиДереваГруппыЗагрузкиНоменклатуры.Количество() > 0 Тогда
			СтрокаДерева = СтрокиДереваГруппыЗагрузкиНоменклатуры.Найти(НаименованиеГруппы, "ГруппаНаименование");
			Если СтрокаДерева <> Неопределено Тогда
				СтрокиДереваГруппыЗагрузкиНоменклатуры = СтрокаДерева.Строки;
				ГруппаРодитель = СтрокаДерева.ГруппаСсылка;
				СоздатьНовуюГруппу = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Если группа не найдена в справочнике, автоматически создаем новую.
		Если СоздатьНовуюГруппу Тогда
			НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();
			НоваяГруппа.Наименование = НаименованиеГруппы;
			НоваяГруппа.Родитель = ГруппаРодитель;
			НоваяГруппа.Записать();
			ГруппаРодитель = НоваяГруппа.Ссылка;
			// Добавляем созданную группу в дерево иерархии группы загрузки номенклатуры, полученное из справочника
			// для исключения дублей при обработке другой номенклатуры.
			СтрокаДереваНовая = СтрокиДереваГруппыЗагрузкиНоменклатуры.Добавить();
			СтрокаДереваНовая.ГруппаСсылка = ГруппаРодитель; 
			СтрокаДереваНовая.ГруппаНаименование = Строка(ГруппаРодитель);
			СтрокиДереваГруппыЗагрузкиНоменклатуры = СтрокаДереваНовая.Строки;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ГруппаРодитель;
	
КонецФункции

Функция НаименованияИерархическихГруппЗагружаемойНоменклатурыАнализа(СтрокаДерево, МассивГруппыРодители = Неопределено)

	Если МассивГруппыРодители = Неопределено Тогда
		МассивГруппыРодители = Новый Массив;
	КонецЕсли;
	
	МассивГруппыРодители.Добавить(СокрЛП(СтрокаДерево.Наименование));
	
	Если СтрокаДерево.Родитель <> Неопределено Тогда
		НаименованияИерархическихГруппЗагружаемойНоменклатурыАнализа(СтрокаДерево.Родитель, МассивГруппыРодители);
	КонецЕсли;
	
	Возврат МассивГруппыРодители;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициироватьКешНСИПриНачалеРаботы()
	Возврат РольДоступна(Метаданные.Роли.ЛабораторныеИсследования);
КонецФункции

Функция ПолучитьВидыЛабораторий()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВнешниеЛаборатории.Ссылка
	                      |ИЗ
	                      |	Перечисление.ВнешниеЛаборатории КАК ВнешниеЛаборатории");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ЗапроситьДиапазонНомеровЗаявок(Лаборатория, СообщенияОбОшибках = Неопределено)
	
	ДиапазонНомеровЗаявок = Неопределено;
	
	Попытка
		ДиапазонНомеровЗаявок = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория).ЗапроситьДиапазонНомеровЗаявок(Лаборатория, СообщенияОбОшибках);
	Исключение
	КонецПопытки;
	
	Если ДиапазонНомеровЗаявок = Неопределено Тогда  
		Возврат Ложь;
	КонецЕсли;
	
	СохранитьДиапазонНомеровЗаявок(ДиапазонНомеровЗаявок, Лаборатория);
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьДиапазонНомеровЗаявок(ДиапазонНомеровЗаявок, Лаборатория = Неопределено)
	
	Если ДиапазонНомеровЗаявок.Свойство("Лаборатория") Тогда 
		Лаборатория = ДиапазонНомеровЗаявок.Лаборатория;	
	КонецЕсли;
	
	Если ДиапазонНомеровЗаявок.Свойство("ТекущийНомер") Тогда 
		ТекущийНомер = ДиапазонНомеровЗаявок.ТекущийНомер;	
	КонецЕсли;
	
	НачалоДиапазона = ДиапазонНомеровЗаявок.НачалоДиапазона;
	ОкончаниеДиапазона = ДиапазонНомеровЗаявок.ОкончаниеДиапазона;
	ТекущийНомерДляЗаписи = ?(ТекущийНомер = Неопределено, 0, ТекущийНомер);
	
	МенеджерЗаписей = РегистрыСведений.ПулыНомеровЗаявокЛабораторий.СоздатьМенеджерЗаписи();
	МенеджерЗаписей.Лаборатория = Лаборатория;
	МенеджерЗаписей.НачалоДиапазона = НачалоДиапазона;
	МенеджерЗаписей.ОкончаниеДиапазона = ОкончаниеДиапазона;
	МенеджерЗаписей.ТекущийНомер = ТекущийНомерДляЗаписи;
	Если ТекущийНомерДляЗаписи > 0 Тогда  
		МенеджерЗаписей.ДатаПолученияТекущегоНомера = ТекущаяДатаСеанса();
	КонецЕсли;
	Если ДиапазонНомеровЗаявок.Свойство("Закрыт") Тогда 
		МенеджерЗаписей.Закрыт = ДиапазонНомеровЗаявок.Закрыт;
	КонецЕсли;
	МенеджерЗаписей.Записать(Истина);
		
КонецПроцедуры

#Область ПроверкиЗаполнения

Процедура ПроверитьКорректностьКодовПробЗабора(ДокументЗабора, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контейнеры", ДокументЗабора.Контейнеры.Выгрузить(,"Лаборатория, НомерКонтейнера, КодПробы"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контейнеры.Лаборатория,
	|	Контейнеры.НомерКонтейнера,
	|	Контейнеры.КодПробы
	|ПОМЕСТИТЬ Контейнеры
	|ИЗ
	|	&Контейнеры КАК Контейнеры
	|ГДЕ
	|	Контейнеры.Лаборатория <> ЗНАЧЕНИЕ(Справочник.Лаборатории.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контейнеры.НомерКонтейнера,
	|	МАКСИМУМ(Контейнеры.КодПробы) КАК КодПробы,
	|	Контейнеры.Лаборатория КАК Лаборатория
	|ИЗ
	|	Контейнеры КАК Контейнеры
	|
	|СГРУППИРОВАТЬ ПО
	|	Контейнеры.НомерКонтейнера,
	|	Контейнеры.Лаборатория
	|ИТОГИ ПО
	|	Лаборатория"
	;
	ВыбЛаборатории = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЕстьНекорректныеКоды = Ложь;
	
	Пока ВыбЛаборатории.Следующий() Цикл
		
		ВыбКодыПроб = ВыбЛаборатории.Выбрать();
		
		КодыПроб = Новый Массив;
		
		Пока ВыбКодыПроб.Следующий() Цикл
			КодыПроб.Добавить(ВыбКодыПроб.КодПробы);
		КонецЦикла;
		
		СообщениеОбОшибке = ПроверитьКорректностьКодовПроб(КодыПроб, ВыбЛаборатории.Лаборатория, Неопределено);
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  КодыПроб			 - Массив - Коды проб в порядке следования контейнеров
//  СтрокаЛаборатория	 - Лаборатория
//  ПроверятьПустые		 - Булево - Проверять не заполненные
//  ФормироватьСообщениеОбОшибке - Булево - Вернуть сообщение об ошибке или массив номеров строк.
// 
// Возвращаемое значение:
//  Строка, Массив - Сообщение об ошибке либо массив номеров строк неправильных кодов (начиная с 1).
Функция ПроверитьКорректностьКодовПроб(Знач КодыПроб, Лаборатория, ПроверятьПустые = Ложь)
	
	Возврат ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория).ПроверитьКорректностьКодовПроб(КодыПроб, ПроверятьПустые)
	
КонецФункции

Функция КодПробыКорректенДляЗаказа(КодПробы, ВидЛаборатории, ТекстОшибки = "")
	
	Возврат ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(ВидЛаборатории).КодПробыКорректенДляЗаказа(КодПробы, ТекстОшибки);
	
КонецФункции

#КонецОбласти

#КонецОбласти