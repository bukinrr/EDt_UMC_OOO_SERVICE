#Область ПрограммныйИнтерфейс

Функция ЗначенияПараметровШаблонаПечати(СсылкаНаОбъект, Знач ШаблонПечати = Неопределено, СодержаниеОшибки = "") Экспорт
	
	Перем ОбъектПечати; // Только для печати Договора с клиентом по Виду договора.
	
	Если ШаблонПечати = Неопределено Тогда
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ДоговорСКлиентом") Тогда
			ОбъектПечати = СсылкаНаОбъект.ПолучитьОбъект();
			ШаблонПечати = ОбъектПечати.ВидДоговора.ШаблонПечати;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ОбъектПечати = СсылкаНаОбъект;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШаблонПечати) Тогда 
		СодержаниеОшибки = "Не указан шаблон печати";
		Возврат Неопределено;
	КонецЕсли;
	
	мсПараметрыШаблона = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПечати = ШаблонПечати.ПараметрыПечати.Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Расчетные параметры
	ЗначенияПараметров = ВычислитьЗначенияПараметровШаблонаПечати(ОбъектПечати, ШаблонПечати, СодержаниеОшибки);
	
	// Параметры, вводимые вручную
	ЗнаечнияРучныхПараметров = ЗначенияРучныхПараметровШаблонаПечати(СсылкаНаОбъект, ШаблонПечати, СодержаниеОшибки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗначенияПараметров, ЗнаечнияРучныхПараметров);
	
	// Приведение имени поля к форме <ПАРАМЕТР> - под формат макета word.
	Для Каждого ДанныеПараметра Из ЗначенияПараметров Цикл
		ДанныеПараметра.ИмяПараметра = "<" + ДанныеПараметра.ИмяПараметра + ">";
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Формирует массив, содержащий структуры, описывающие значения параметров шаблона договора,
//
// Параметры:
//  ОбъектПечати	 - ДокументСсылка, ДокументОбъект.ДоговорСКлиентом - Ссылка на документ, в контексте которого выполняется печать или объект документа.
//  ШаблонПечати	 - СправочникСсылка.ШаблоныПечати	 - Шаблон, по котрому нужно распечатать документ
//  СодержаниеОшибки - Строка							 - Строка, куда помещается описание ошибки, если она была
// 
// Возвращаемое значение:
//  Неопределено, Массив - Неопределено или массив структур с именем параметра и вычисленным значением.
//
Функция ВычислитьЗначенияПараметровШаблонаПечати(ОбъектПечати, ШаблонПечати, СодержаниеОшибки = "", ИмяПараметраШаблона = Неопределено) Экспорт
	
	ЗначенияПараметров = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПечати = ШаблонПечати.ПараметрыПечати.Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьБезопасныйРежим(Истина);
	Для Каждого ПараметрШаблона Из ПараметрыПечати Цикл
		
		Если (Не ЗначениеЗаполнено(ИмяПараметраШаблона) И ПараметрШаблона.ВводитсяВручную)
			Или (ЗначениеЗаполнено(ИмяПараметраШаблона) И ПараметрШаблона.ИмяПараметра <> ИмяПараметраШаблона)
		Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = "<" + ПараметрШаблона.ИмяПараметра + ">";
		Результат = "";
		Попытка
			Если ТипЗнч(ОбъектПечати) = Тип("ДокументОбъект.ДоговорСКлиентом") Тогда
				ОбъектПечати.ВыполнитьФормулуДляПечатиШаблона(ПараметрШаблона.Значение, Результат);
			ИначеЕсли ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.ДоговорСКлиентом") Тогда
				ДокументОбъект = ОбъектПечати.ПолучитьОбъект();
				ДокументОбъект.ВыполнитьФормулуДляПечатиШаблона(ПараметрШаблона.Значение, Результат);
			Иначе
				ВыполнитьФормулуДляПечатиШаблона(ПараметрШаблона.Значение, Результат, ОбъектПечати);
			КонецЕсли;
		Исключение
			ТекстОшибки = "Ошибка при вычислении параметра " + ИмяПараметра + ", по причине:
							|" + ОписаниеОшибки();
			
			Если ЗначениеЗаполнено(ИмяПараметраШаблона) Тогда
				СодержаниеОшибки = ТекстОшибки;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
			КонецЕсли;
		КонецПопытки;
		
		СтруктураПараметра = Новый Структура("ИмяПараметра, Значение", ПараметрШаблона.ИмяПараметра, Результат);
		Если ТипЗнч(СтруктураПараметра.Значение) = Тип("ТаблицаЗначений") Тогда
			СтруктураПараметра.Значение = ОбщегоНазначения.ТаблицуЗначенийВТабличныйДокумент(СтруктураПараметра.Значение);
		КонецЕсли;
		
		ЗначенияПараметров.Добавить(СтруктураПараметра);
		
	КонецЦикла;
	УстановитьБезопасныйРежим(Ложь);
	
	Возврат ЗначенияПараметров;
		
КонецФункции

Функция ЕстьРучныеПараметрыШаблонаПечати(ШаблонПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПечати = ШаблонПечати.ПараметрыПечати.Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыПечати.НайтиСтроки(Новый Структура("ВводитсяВручную", Истина)).Количество() > 0;
	
КонецФункции

Функция ВыполнитьФормулуДляПечатиШаблона(ФормулаРасчета, Результат, Знач ОбъектПечати)
	
	// Дополнительные переменные контекста алгоритма расчета.
	// Для возможности использовать в качестве печатных форм word и шаблоны договор без изменения основных алгоритмов.
	Дата	 = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(ОбъектПечати, "Дата", Дата(1,1,1));
	Клиент	 = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(ОбъектПечати, "Клиент", Справочники.Клиенты.ПустаяСсылка());
	Филиал	 = РаботаСДокументамиСервер.ФилиалДокумента(ОбъектПечати);
	Филиал	 = Филиал;
	
	Выполнить(ФормулаРасчета);
	
КонецФункции

Функция ЗначенияРучныхПараметровШаблонаПечати(СсылкаНаОбъект, ШаблонПечати = Неопределено, СодержаниеОшибки) Экспорт
	
	ЗначенияПараметров = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ШаблонПечати) Тогда
		ПараметрыШаблона = ШаблонПечати.ПараметрыПечати.Выгрузить().ВыгрузитьКолонку("ИмяПараметра");
	Иначе
		ПараметрыШаблона = Неопределено;
	КонецЕсли;
	
	НЗ = РегистрыСведений.ЗначенияПараметровШаблоновПечати.СоздатьНаборЗаписей();
	НЗ.Отбор.Объект.Установить(СсылкаНаОбъект);
	НЗ.Прочитать();
	
	Для Каждого Запись Из НЗ Цикл
		
		Если ПараметрыШаблона = Неопределено Или ПараметрыШаблона.Найти(Запись.ИмяПараметра) <> Неопределено Тогда
			СтруктураПараметра = Новый Структура("ИмяПараметра, Значение", Запись.ИмяПараметра, Запись.Значение);
			ЗначенияПараметров.Добавить(СтруктураПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Возвращает двоичные данные файла с шаблонным документом doc-формата,
//
// Параметры:
//  ШаблонПечати - СправочникСсылка.ШаблоныПечати - Шаблон печати
// 
// Возвращаемое значение:
//   Двоичные данные.
//
Функция ПолучитьФайлМакетаШаблонаПечати(ШаблонПечати) Экспорт
	
	Возврат ШаблонПечати.ФайлМакета.Получить();
	
КонецФункции

// Возвращает структуру реквизитов шаблона, определяющих параметры печати,
//
// Параметры:
//  ШаблонПечати - СправочникСсылка.ШаблоныПечати - Шаблон печати
// 
// Возвращаемое значение:
//   Структура - Структура со значением реквизитов параметров печати.
//
Функция ПолучитьПараметрыДляПечати(ШаблонПечати) Экспорт 
	
	Если ЗначениеЗаполнено(ШаблонПечати) Тогда 
		СтруктураПараметровДляПечати = Новый Структура;
		СтруктураПараметровДляПечати.Вставить("НаПринтер", ШаблонПечати.ПечатьБезПредварительногоПросмотра);
		СтруктураПараметровДляПечати.Вставить("КоличествоЭкземпляров", ?(ШаблонПечати.КоличествоЭкземпляров,ШаблонПечати.КоличествоЭкземпляров,1));
	КонецЕсли;
	
	Возврат СтруктураПараметровДляПечати 
	
КонецФункции

// Формирует документ WORD по шаблону без COM объекта
//
// Параметры:
//  ШаблонПечати				 - СправочникСсылка.ШаблоныПечати	 - Шаблон, по котрому нужно распечатать документ
//  ПараметрыШаблона			 - Массив							 - Массив вычисленных параметров шаблона печати
//  ДвоичныеДанные		 		 - ДвоичныеДанные					 - В этот параметр будут помещены двоичные данные сформированного документа при серверном вызове
//  ТекстОшибки                  - Строка                            - Текст ошибки произошедшей в ходе выполнения процедуры
//
Процедура СформироватьДокументШаблонаWORD(ШаблонПечати, ПараметрыШаблона, ДвоичныеДанные, ТекстОшибки) Экспорт
	
	ДанныеФайла = ПолучитьФайлМакетаШаблонаПечати(ШаблонПечати);
	Если ТипЗнч(ДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
		ТекстОшибки = НСтр("ru='К шаблону печати не привязан файл макета!'");
		Возврат;	
	КонецЕсли;
	
	ИмяФайлаМакета = ШаблонПечати.ИмяФайлаМакета;
	Если СтрНайти(ИмяФайлаМакета, ".docx") = 0 Тогда
		ТекстОшибки = НСтр("ru='Для текущего режима печати шаблонов WORD допустимы только файлы макета в формате "".docx"".'") + Символы.ПС
					+ НСтр("ru='У выбранного шаблона файл макета имеет иной формат!'");
		Возврат;	
	КонецЕсли;
	
	// Разделяем параметры на табличные и просто параметры
	СтруктураПараметров = Новый Структура;
	СтруктураТаблиц = Новый Структура;
	
	Для Каждого Эл Из ПараметрыШаблона Цикл
		ИмяПараметра = СтрЗаменить(Эл.ИмяПараметра, "<", "");
		ИмяПараметра = СтрЗаменить(ИмяПараметра, ">", "v8");
		
		Если ТипЗнч(Эл.Значение) = Тип("ТабличныйДокумент") Тогда
			СтруктураТаблиц.Вставить(ИмяПараметра, Эл.Значение);
		Иначе
			СтруктураПараметров.Вставить(ИмяПараметра, Эл.Значение);
		КонецЕсли;		
	КонецЦикла;

	// Получаем макет нашего файла
	Макет = УправлениеПечатьюСлужебный.МакетИзДвоичныхДанных(ДанныеФайла, Истина);	
		
	// Получаем печатную форму и инициализируем ее
	ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(,,Макет);
	УправлениеПечатью.ИнициализироватьПечатнуюФорму(,,Макет);
	
	АдресХранилищаПечатнойФормы = "";
	
	ТекстНеизвестнаяОшибка = НСтр("ru='Произошла неизвестная ошибка!'");
	
	Если ПечатнаяФорма = Неопределено Тогда
		УправлениеПечатью.ОчиститьСсылки(Макет);
		ТекстОшибки = ТекстНеизвестнаяОшибка;
		Возврат;
	КонецЕсли;
	
	ОписаниеОбластиДокумента = Новый Структура("ИмяОбласти, ТипОбласти", "Документ", "Общая");
	ОбластьДокумента = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластиДокумента);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, ОбластьДокумента, СтруктураПараметров);
	
	ОписаниеОбластиВерхнегоКолонтитула = Новый Структура("ИмяОбласти, ТипОбласти", "ВерхнийКолонтитул", "ВерхнийКолонтитул");
	ОбластьВерхнегоКолонтитула = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластиВерхнегоКолонтитула); 
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, ОбластьВерхнегоКолонтитула, СтруктураПараметров);
	
	ОписаниеОбластиНижнегоКолонтитула = Новый Структура("ИмяОбласти, ТипОбласти", "НижнийКолонтитул", "НижнийКолонтитул");
	ОбластьНижнегоКолонтитула = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластиНижнегоКолонтитула); 
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, ОбластьНижнегоКолонтитула, СтруктураПараметров);
	
	
	АдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
	
	Если Не ЗначениеЗаполнено(АдресХранилищаПечатнойФормы) Тогда
		ТекстОшибки = ТекстНеизвестнаяОшибка;
		Возврат;
	КонецЕсли;
	
	ДвДанные = ПолучитьИзВременногоХранилища(АдресХранилищаПечатнойФормы);
	Если ТипЗнч(ДвДанные) <> Тип("ДвоичныеДанные") Тогда
		ТекстОшибки = ТекстНеизвестнаяОшибка;
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("docx");
	ДвДанные.Записать(ИмяФайла);
	ИмяВременногоКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	УправлениеПечатьюСлужебный.РазобратьКонтейнерДокументDOCX(ИмяФайла, ИмяВременногоКаталога);
	
	мИменXmlФайлов = Новый Массив;
	мИменXmlФайлов.Добавить("document.xml");
	мИменXmlФайлов.Добавить("header1.xml");
	мИменXmlФайлов.Добавить("footer1.xml");
	
	Для Каждого Имя Из мИменXmlФайлов Цикл
		мXMLФайл = НайтиФайлы(ИмяВременногоКаталога, Имя, Истина);
		Если мXMLФайл.Количество() > 0 Тогда
			Если Имя = "document.xml" И СтруктураТаблиц.Количество() > 0 Тогда
				XMLСтрока = ПодставновкаТаблицДляСтарогоФормата(мXMLФайл[0].ПолноеИмя, СтруктураТаблиц);				
			Иначе
				Чтение = Новый ЧтениеТекста(мXMLФайл[0].ПолноеИмя, КодировкаТекста.UTF8);
				XMLСтрока = Чтение.Прочитать();
				Чтение.Закрыть();
				ОбратнаяЗаменаУгловыхСкобок(XMLСтрока);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(XMLСтрока) Тогда
				Запись = Новый ЗаписьТекста(мXMLФайл[0].ПолноеИмя, КодировкаТекста.UTF8);
				Запись.Записать(XMLСтрока);
				Запись.Закрыть();
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	УправлениеПечатьюСлужебный.СобратьКонтейнерДокументаDOCX(ИмяФайла, ИмяВременногоКаталога);
	ДвДанные = Новый ДвоичныеДанные(ИмяФайла);

	
	РежимПечатиПоШаблонуWORD = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РежимПечатиПоШаблонуWORD");
	Если РежимПечатиПоШаблонуWORD = Перечисления.РежимыПечатиПоШаблонуWORD.ФормироватьНаСервереPDF
		ИЛИ РежимПечатиПоШаблонуWORD = Перечисления.РежимыПечатиПоШаблонуWORD.ФормироватьНаСервереRTF
	Тогда
		Результат = КонвертироватьДокументWORDПоРежиму(ДвДанные, ТекстОшибки, РежимПечатиПоШаблонуWORD); 
		Если Не Результат Тогда
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru='Произошла ошибка преобразования docx файла в итоговый формат!'"); 
			КонецЕсли;
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	ДвоичныеДанные = ДвДанные;
	
КонецПроцедуры

// Формирует документ WORD по шаблону с использованием COM объекта,
//
// Параметры:
//  ШаблонПечати				 - СправочникСсылка.ШаблоныПечати	 - Шаблон, по котрому нужно распечатать документ
//  мсПараметрыШаблона			 - Массив							 - Массив вычисленных параметров шаблона печати
//  ДвоичныеДанныеДокумента		 - ДвоичныеДанные					 - В этот параметр будут помещены двоичные данные сформированного документа при серверном вызове
//  СодержаниеОшибки			 - Строка							 - Строка, куда помещается описание ошибки, если она была
//  СтруктураПараметровПечати	 - Структура						 - Дополнительные параметры печати
// 
// Возвращаемое значение:
//  Неопределено, ДвоичныеДанные - Неопределено или сформированные двоичные данные документа WORD.
//
Функция СформироватьДокументWORDПоШаблонуCOMОбъект(ШаблонПечати, мсПараметрыШаблона, ДвоичныеДанныеДокумента = Неопределено, СодержаниеОшибки = "", СтруктураПараметровПечати = Неопределено) Экспорт
	Возврат РаботаСШаблонамиПечатиКлиентСервер.СформироватьДокументWORDПоШаблону(ШаблонПечати, мсПараметрыШаблона, ДвоичныеДанныеДокумента, СодержаниеОшибки);
КонецФункции

Функция ПодставновкаТаблицДляСтарогоФормата(АдресФайла, СтруктураТаблиц)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(АдресФайла);
	
	// Создаем DOM файл по считанному XML Word
	Построитель = Новый ПостроительDOM;
	ДокументDOM = Построитель.Прочитать(ЧтениеXML);
	мТелоДокумента = ДокументDOM.ПолучитьЭлементыПоИмени("body");
	ЧтениеXML.Закрыть();
	Если мТелоДокумента.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого Таблица Из СтруктураТаблиц Цикл
		мНайденныхУзлов = ПоискУзлаДомДокументаСТаблицей(мТелоДокумента[0].ДочерниеУзлы,Таблица.Ключ);
		
		Если мНайденныхУзлов.Количество() > 0 Тогда
			Для Каждого Узел Из мНайденныхУзлов Цикл
				
				УзлыСтрокТаблицы = Узел.ПолучитьЭлементыПоИмени("tr");
				Если УзлыСтрокТаблицы.Количество() > 0 Тогда
					
					// Ищем узел в котором находится строка с параметром нашей таблицы
					РабочийУзел = Неопределено;
					Для Каждого УзелСтроки Из УзлыСтрокТаблицы Цикл
						Если СтрНайти(УзелСтроки.ТекстовоеСодержимое, Таблица.Ключ) > 0 Тогда
							РабочийУзел = УзелСтроки;
							Прервать;
						КонецЕсли;						
					КонецЦикла;
					
					Если РабочийУзел <> Неопределено Тогда
						ТабДок = Таблица.Значение;
						
						// Получаем столбцы
						Столбцы = РабочийУзел.ПолучитьЭлементыПоИмени("w:tc");
						
						// Проверяем совпадает ли количество столбцов в узле и в нашем табдоке
						Если Столбцы.Количество() = ТабДок.ШиринаТаблицы Тогда
							ТабДок = Таблица.Значение;
							ПерваяСтрокаНеПройдена = Истина;
							НомерСтроки = ТабДок.ВысотаТаблицы;
							Пока НомерСтроки >= 1 Цикл
								
								// Делаем первый проход строки, для последующих строк клонируем предыдущую и заполняем
								Если ПерваяСтрокаНеПройдена Тогда	
									ПервыйПроходНеПройден = Истина;
									Для Колонка = 1 По ТабДок.ШиринаТаблицы Цикл
										// Делаем первый проход узла, удаляем лишнее и заполняем его данными
										Если ПервыйПроходНеПройден Тогда
											ЭлементыСТекстом = Столбцы[Колонка-1].ПолучитьЭлементыПоИмени("w:t");
											Если ЭлементыСТекстом.Количество() > 0 Тогда
												УзелЭталонДляЗаписи = Неопределено;
												НайденныеУзлы = ПоискУзлаДомДокументаСТаблицей(ЭлементыСТекстом, Таблица.Ключ);
												Если НайденныеУзлы.Количество() > 0 Тогда
													УзелЭталонДляЗаписи = НайденныеУзлы[0];
												Иначе
													Прервать;
												КонецЕсли;
											КонецЕсли;
											
											Для Каждого Эл Из ЭлементыСТекстом Цикл
												Если Эл <> УзелЭталонДляЗаписи Тогда
													Эл.РодительскийУзел.УдалитьДочерний(Эл);
												КонецЕсли;	
											КонецЦикла;
											ТекстЯчейки = ТабДок.Область(НомерСтроки, Колонка).Текст;
											УзелЭталонДляЗаписи.ТекстовоеСодержимое = ТекстЯчейки;
											
											// Для файла из libreoffice чтобы была установлена правая граница
											ЭлементыГраницТаблицы = Столбцы[Колонка-1].ПолучитьЭлементыПоИмени("w:tcBorders"); 
											Если ЭлементыГраницТаблицы.Количество() > 0 Тогда
												ПраваяГраница = ЭлементыГраницТаблицы[0].ПолучитьЭлементыПоИмени("w:right");
												Если ПраваяГраница.Количество() = 0
													И ЭлементыГраницТаблицы[0].ДочерниеУзлы.Количество() > 0 
												Тогда
													НовыйЭл = ДокументDOM.СоздатьЭлемент(ЭлементыГраницТаблицы[0].ДочерниеУзлы[0].URIПространстваИмен, "w:right");
													Для Каждого Эл Из ЭлементыГраницТаблицы[0].ДочерниеУзлы[0].Атрибуты Цикл
														Атрибут = ДокументDOM.СоздатьАтрибут(ЭлементыГраницТаблицы[0].ДочерниеУзлы[0].URIПространстваИмен, Эл.ИмяУзла);	
														Атрибут.ТекстовоеСодержимое = Эл.ТекстовоеСодержимое;
														НовыйЭл.УстановитьУзелАтрибута(Атрибут);	
													КонецЦикла;
													ЭлементыГраницТаблицы[0].ДобавитьДочерний(НовыйЭл);
												КонецЕсли;
												
											КонецЕсли;
											
											ПервыйПроходНеПройден = Ложь;
										Иначе
											// На место текущего узла вставляем склонированный при первом проходе, перезаполняем текущими данными
											ТекущийУзел = Столбцы[Колонка-1];
											Клон = Столбцы[0].КлонироватьУзел(Истина);
											РабочийУзел.ВставитьПеред(Клон,ТекущийУзел);
											РабочийУзел.УдалитьДочерний(ТекущийУзел); 
											ЭлементСТекстом = Клон.ПолучитьЭлементыПоИмени("w:t");
											ТекстЯчейки = ТабДок.Область(НомерСтроки, Колонка).Текст;
											ЭлементСТекстом[0].ТекстовоеСодержимое = ТекстЯчейки;
										КонецЕсли; 		
									КонецЦикла;
									Если ПервыйПроходНеПройден Тогда
										// Что-то пошло не так уходим на следующий параметр
										Прервать;
									КонецЕсли;
									ПерваяСтрокаНеПройдена = Ложь;
								Иначе
									// На место текущего рабочего узла вставляем склонированный узел предыдущей строки и заполняем данными
									РабочийУзел = РабочийУзел.РодительскийУзел.ВставитьПеред(РабочийУзел.КлонироватьУзел(Истина), РабочийУзел);
									Столбцы = РабочийУзел.ПолучитьЭлементыПоИмени("w:tc");
									Для Колонка = 1 По ТабДок.ШиринаТаблицы Цикл
										ТекущийУзел = Столбцы[Колонка-1];
										ЭлементСТекстом = Столбцы[Колонка-1].ПолучитьЭлементыПоИмени("w:t");
										ТекстЯчейки = ТабДок.Область(НомерСтроки, Колонка).Текст;
										ЭлементСТекстом[0].ТекстовоеСодержимое = ТекстЯчейки;
									КонецЦикла;
								КонецЕсли;
								НомерСтроки = НомерСтроки - 1;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Записываем получившийся XML в файл
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьDOM.Записать(ДокументDOM,ЗаписьXML);
	XMLСтрока = ЗаписьXML.Закрыть();			
	ОбратнаяЗаменаУгловыхСкобок(XMLСтрока);
	Возврат XMLСтрока;
	
КонецФункции

Функция ПоискУзлаДомДокументаСТаблицей(ДочерниеУзлы, ИмяПараметра)
	
	мРезультатПоиска = Новый Массив;
	
	Для Каждого Узел Из ДочерниеУзлы Цикл
		
		Если СтрНайти(Узел.ТекстовоеСодержимое, ИмяПараметра) > 0 Тогда
			мРезультатПоиска.Добавить(Узел);		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат мРезультатПоиска;
	
КонецФункции

// Пересохраняет файл docx в формат, соответствующий заданному режиму печати (формирования).
//
// Параметры:
//  ДвоичныеДанныеДокумента		 - ДвоичныеДанные					 - В параметр будут помещены двоичные данные конвертированного документа
//  СодержаниеОшибки			 - Строка							 - Строка, куда помещается описание ошибки, если она была
//  РежимПечатиПоШаблонуWORD	 - ПеречислениеСсылка.РежимыПечатиПоШаблонуWORD - Требуемый режим печати.
// 
// Возвращаемое значение:
//  Булево - успешность операции.
//
Функция КонвертироватьДокументWORDПоРежиму(ДвоичныеДанныеДокумента, СодержаниеОшибки = "", РежимПечатиПоШаблонуWORD) Экспорт 
	
		ИмяФайла = ПолучитьИмяВременногоФайла(".docx"); 
		Попытка
			ДвоичныеДанныеДокумента.Записать(ИмяФайла);
		Исключение
			СодержаниеОшибки = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			Word = Новый COMОбъект("Word.Application");
		Исключение
			СодержаниеОшибки =	"Приложение Microsoft Word не установлено или работа с ним в режиме COM-соединения невозможна.
			|Не удалось создать COM-объект ""Word.Application""
			|" + ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
		Попытка		
			Документ = Word.Documents.Add(ИмяФайла);
		Исключение
			Word.Application.Quit(Ложь);
			СодержаниеОшибки = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
			
	Если РежимПечатиПоШаблонуWORD = ПредопределенноеЗначение("Перечисление.РежимыПечатиПоШаблонуWORD.ФормироватьНаСервереPDF") Тогда
		КодФормата = 17;
		Расширение = "pdf";
	Иначе
		КодФормата = 6;
		Расширение = "rtf";
	КонецЕсли;
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла(Расширение); 
	Попытка
		Документ.SaveAs(ИмяФайлаРезультата, КодФормата);
		Документ.Close(0);
	Исключение
		СодержаниеОшибки = ОписаниеОшибки();
		Word.Application.Quit(Ложь);
		Возврат Ложь;
	КонецПопытки;
	
	Word.Application.Quit(Ложь);
	
	ДвоичныеДанныеДокумента = Новый ДвоичныеДанные(ИмяФайлаРезультата);
	
	УдалитьФайлы(ИмяФайлаРезультата);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбратнаяЗаменаУгловыхСкобок(XMLСтрока)
	
	XMLСтрока = СтрЗаменить(XMLСтрока, "{v8 ", "&lt;");
	XMLСтрока = СтрЗаменить(XMLСтрока, "v8}", "&gt;");
	
КонецПроцедуры

#КонецОбласти