
#Область ПрограммныйИнтерфейс

Функция ОсновнаяФормаФилиалНеЗаполненВывестиТекст() Экспорт

	Возврат НСтр("ru='Не выбран филиал.'");

КонецФункции

Функция ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст() Экспорт

	Возврат НСтр("ru='Не выбрана организация.'");

КонецФункции

Функция ПриЗаписиМедицинскогоОтчетаНаКлиенте(Форма, ПустойПараметр = Неопределено, Автосохранение = Ложь, Вариант = Неопределено) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Форма.Заголовок), , , БиблиотекаКартинок.Записать);
		
	Возврат Истина;
	
КонецФункции

Функция НайтиСтрокиВДанныхФормыДерево(ЭлементыДанныхФормыДерево, ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок) Экспорт
	
	Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			МассивНайденныхСтрок.Добавить(ЭлементДерева);
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиСтрокиВДанныхФормыДерево(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат МассивНайденныхСтрок;
	
КонецФункции

Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	Иначе
		ИмяТекОбласти = ТекущаяОбласть.Имя;
		ПозицияНачалаИмениПараметра = СтрНайти(ИмяТекОбласти, "П0");
		ИмяАктивногоРаздела = Сред(ИмяТекОбласти, ПозицияНачалаИмениПараметра, ДлИмениОбласти);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбщуюФормуПоИмени(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
		
	Попытка
		
		Возврат ПолучитьФорму("Обработка.ОбщиеОбъектыМедОтчетности.Форма." + ИмяФормы, Параметры, Владелец, КлючУникальности);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ПередЗакрытиемМедицинскогоОтчета(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения) Экспорт
	
	Если ЗавершениеРаботы Тогда
		Возврат
	КонецЕсли;
	
	Если Форма.Модифицированность Тогда
	
		Отказ = Истина;
	
		Если ЗавершениеРаботы Тогда
	
			ТекстПредупреждения = НСтр("ru='Данные отчета были изменены.
											|Перед завершением работы рекомендуется записать отчет,
											|иначе измененные данные будут утеряны.'");
	
			Возврат;
	
		КонецЕсли;
	
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект, Форма);
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросСохранитьИзмененияЗавершение(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Форма.СохранитьНаКлиенте(Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Форма.Модифицированность = Ложь;
		
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

Процедура ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, ПризнакНумеруемыхФорм, СписокПечатаемыхЛистов, ДополнительныеПараметры = Неопределено) Экспорт

	Если ПризнакНумеруемыхФорм = Неопределено Тогда
		ПризнакНумеруемыхФорм = Истина;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокПечатаемыхЛистов", СписокПечатаемыхЛистов);
	ПараметрыФормы.Вставить("ВидПечати",              ВидПечати);
	ПараметрыФормы.Вставить("ЗаголовокФормы",         Форма.Заголовок);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ЗаголовокФормы") Тогда
			Если ЗначениеЗаполнено(ДополнительныеПараметры.ЗаголовокФормы) Тогда
				ПараметрыФормы.Вставить("ЗаголовокФормы", ДополнительныеПараметры.ЗаголовокФормы);
			КонецЕсли;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЕстьВыходЗаГраницы") И ДополнительныеПараметры.ЕстьВыходЗаГраницы = Истина Тогда
			ПараметрыФормы.Вставить("ЕстьВыходЗаГраницы", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ВывестиНаПечатьИлиНаПредварительныйПросмотрФормуМедицинскогоОтчета(Форма, ПараметрыФормы);
	
КонецПроцедуры

Процедура ВывестиНаПечатьИлиНаПредварительныйПросмотрФормуМедицинскогоОтчета(Форма, ПараметрыФормы) Экспорт
	
	ПредварительныйПросмотр = ПолучитьОбщуюФормуПоИмени("ПечатьМедицинскихОтчетов",
		ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
	ПараметрыФормы.СписокПечатаемыхЛистов.Очистить();
	
	Если НЕ ПредварительныйПросмотр = Неопределено Тогда
		
		Если ПараметрыФормы.ВидПечати = "ПечататьСразу" Тогда
			
			ПредварительныйПросмотр.ПечататьСразу();
		
		Иначе
			
			ПредварительныйПросмотр.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
			ПредварительныйПросмотр.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция выводит на печать/предварительный просмотр медицинские отчеты.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СписокЗначений - список ссылок на медицинские отчеты.
//   ВидПечати                - Строка - вид печати ("ПоказатьБланк" или "ПечататьСразу").
//
// Возвращаемое значение:
//   Булево - Ложь - если не был найден регл. отчет.
//
Функция НапечататьОтчеты(СписокСсылокНаРеглОтчеты, ВидПечати = "ПоказатьБланк") Экспорт
	
	Для Каждого Стр Из СписокСсылокНаРеглОтчеты Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Попытка
			
			ПредставлениеДокументаРеглОтч = "";
			
			Отчет = ИнициализацияОтчета(Стр.Значение, ПредставлениеДокументаРеглОтч);
			Если Отчет = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
						
			Отчет.Печать(ВидПечати, Истина);
			Отчет = Неопределено;
			
		Исключение
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Не удалось напечатать отчет! Вероятно, отчетом не предусмотрена возможность печати без открытия формы.'"), ПредставлениеДокументаРеглОтч);

			Сообщение.Сообщить();
            						
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ИнициализацияОтчета(Док, ПредставлениеДокументаРеглОтч = Неопределено) Экспорт
	
	ПараметрыФормыИзСохраненногоОтчета = МедицинскаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыФормыИзСохраненногоОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыФормыИзСохраненногоОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          ПараметрыФормыИзСохраненногоОтчета.мСохраненныйДок);
	ПараметрыФормы.Вставить("мПериодичность",           ПараметрыФормыИзСохраненногоОтчета.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              ПараметрыФормыИзСохраненногоОтчета.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
		
	Попытка
		ПолныйПутьКФорме = "Документ.МедицинскийОтчет.Форма.ФормаОтчета";
		ВыбФормаОтчета = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		
		Если НЕ МедицинскаяОтчетностьВызовСервера.ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВыбФормаОтчета.СтруктураРеквизитовФормы.мВерсияФормы) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
		
	Возврат ВыбФормаОтчета;
	
КонецФункции

Процедура ПослеЗаписиМедицинскогоОтчета(Форма) Экспорт
	
	Форма.СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено;
	
	Попытка
		Источник = Новый Структура();
		Источник.Вставить("Ссылка", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		Источник.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Филиал);
		Если Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина Тогда
			Оповестить("Позиционирование в списке отчетов", Источник);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыбратьФормуОтчетаИзДействующегоСпискаЗавершение(ВыбСтрока, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Форма = ДополнительныеПараметры.Форма;
	Результат = Неопределено;
	
	Если Не ВыбСтрока = Неопределено Тогда
		
		СтрОтбора = Новый Структура;
		СтрОтбора.Вставить("ОписаниеОтчета", ВыбСтрока.ОписаниеОтчета);
		
		ВыбСтрока = Форма.мТаблицаФормОтчета.НайтиСтроки(СтрОтбора);
		
		Результат = ВыбСтрока[0].ФормаОтчета;
		
		Форма.ОписаниеНормативДок = ВыбСтрока[0].ОписаниеОтчета;
		
		СохрОписаниеНормативДок = Форма.ОписаниеНормативДок;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = ДополнительныеПараметры.ДопТекстОписания;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СохрОписаниеНормативДок)
		   И ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = Форма.ОписаниеНормативДок + "
			|" + СохрОписаниеНормативДок + ".";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает в параметрах даты  начала и конца периода
// расчитанные по строковому представлению периода, сформированному ранее 
// функцией ПредставлениеПериода().
//
// Параметры:
//  СтрПредставлениеПериода		- Строка - сформированная функцией ПредставлениеПериода().
//  ДатаНачала					- Дата - дата начала периода.
//  ДатаКонца					- Дата - дата конца периода.
//
// Пример:
//  СтрПредставлениеПериода = "Октябрь 2014 г. - Декабрь 2014 г.";
//  МедицинскаяОтчетностьКлиент.ПолучитьНачалоКонецПериода(СтрПредставлениеПериода, ДатаНачала, ДатаКонца);
//
Процедура ПолучитьНачалоКонецПериода(СтрПредставлениеПериода, ДатаНачала, ДатаКонца) Экспорт
	
	// Вначале нужно определить - имеем дело с интервалом дат или
	// одинарным периодом
	ПозицияТире = СтрНайти(СтрПредставлениеПериода,"-");
	
	Если ПозицияТире > 0 Тогда
		// Интервал дат.
		СтрПервыйОдинарныйПериод = СокрЛП(Лев(СтрПредставлениеПериода, ПозицияТире-1));
		СтрВторойОдинарныйПериод = СокрЛП(Сред(СтрПредставлениеПериода, ПозицияТире+1));
		ДатаНачалаПервогоПериода = "";
		ДатаКонцаПервогоПериода = "";
		ДатаНачалаВторогоПериода = "";
		ДатаКонцаВторогоПериода = "";
		// Используем рекурсию.
		ПолучитьНачалоКонецПериода(СтрПервыйОдинарныйПериод, ДатаНачалаПервогоПериода, ДатаКонцаПервогоПериода);
		ПолучитьНачалоКонецПериода(СтрВторойОдинарныйПериод, ДатаНачалаВторогоПериода, ДатаКонцаВторогоПериода);
		ДатаНачала	= ДатаНачалаПервогоПериода;
		ДатаКонца	= ДатаКонцаВторогоПериода;
		Возврат;
		
	КонецЕсли;
	
	// Одинарный период.
			
	Если СтрНайти(Врег(СтрПредставлениеПериода), "ПОЛУГОДИЕ") > 0 Тогда
		// Первые 6 месяцев.
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодДаты, 6, 1));
		
	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "ГОД") > 0 Тогда
		
	    СтрГодДаты = СтрЗаменить(Врег(СтрПредставлениеПериода), "ГОДОВАЯ", "");
		СтрГодДаты = СокрЛП(СтрЗаменить(СтрГодДаты, "Г.", ""));
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецГода(ДатаНачала);
		
	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "МЕСЯЦЕВ") > 0 Тогда
		// 9 месяцев.
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодДаты, 9, 1));

	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "КВАРТАЛ") > 0 Тогда
		
	    ПозСтрКвартал = СтрНайти(Врег(СтрПредставлениеПериода), "КВАРТАЛ");
		СтрНомерКвартала = Лев(СтрПредставлениеПериода, ПозСтрКвартал-1);
		НомерКвартала = Число(СокрЛП(СтрНомерКвартала));
		СтрГодКвартала = СтрЗаменить(Врег(СтрПредставлениеПериода), СтрНомерКвартала+"КВАРТАЛ", "");
		СтрГодКвартала	= СокрЛП(СтрЗаменить(СтрГодКвартала, "Г.", ""));
	    ГодКвартала = Число(СтрГодКвартала);
		МесяцНачалаКвартала = НомерКвартала*3 - 2;
		МесяцКонцаКвартала  = НомерКвартала*3;
		
		ДатаНачала = Дата(ГодКвартала, МесяцНачалаКвартала, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодКвартала, МесяцКонцаКвартала, 1));
		
	Иначе
		// В представлении месяц  или год.
		СоответствиеМесяцев = Новый Соответствие;
		СоответствиеМесяцев.Вставить("ЯНВАРЬ", 	1);
		СоответствиеМесяцев.Вставить("ФЕВРАЛЬ", 2);
		СоответствиеМесяцев.Вставить("МАРТ", 	3);
		СоответствиеМесяцев.Вставить("АПРЕЛЬ", 	4);
		СоответствиеМесяцев.Вставить("МАЙ", 	5);
		СоответствиеМесяцев.Вставить("ИЮНЬ", 	6);
		СоответствиеМесяцев.Вставить("ИЮЛЬ", 	7);
		СоответствиеМесяцев.Вставить("АВГУСТ", 	8);
		СоответствиеМесяцев.Вставить("СЕНТЯБРЬ", 9);
		СоответствиеМесяцев.Вставить("ОКТЯБРЬ", 10);
		СоответствиеМесяцев.Вставить("НОЯБРЬ", 	11);
		СоответствиеМесяцев.Вставить("ДЕКАБРЬ", 12);
		
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		
		СтрМесяцДаты = СокрЛП(СтрЗаменить(СтрПредставлениеПериода, СтрГодДаты, ""));
		
		ГодДаты = Число(СтрГодДаты);
		
		Если ПустаяСтрока(стрМесяцДаты) Тогда
		    // Годовая.
			ДатаНачала = Дата(ГодДаты, 1, 1);
			ДатаКонца  = КонецГода(ДатаНачала);
		Иначе
			// Месяц.
			МесяцДаты  = СоответствиеМесяцев.Получить(стрМесяцДаты);
		
			ДатаНачала = Дата(ГодДаты, МесяцДаты, 1);
			ДатаКонца  = КонецМесяца(ДатаНачала);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура ищет окно по имени формы, если находит то активизирует его.
// Необходима при работе Веб-клиента для предотвращения дублирования открытых окон.
// Необходимость связана с некорректностью нахождения окон открытых форм 
// по Уникальности процедурой ОткрытьФорму() в Веб-клиенте.
//
// Параметры:
//   ИмяФормыДляПоиска - Строка - имя формы, открытое окно которой нужно найти.
//   ВызывающаяФорма - Форма - форма, окно которой будет пропущено при просмотре окон.
//							   Параметр необходим в случае, если процедура вызывается 
//							   из формы до ее открытия. Иногда при обращении к содержимому окна
//							   такой формы возникает ошибка.
//   Результат - Булево - возвращается Истина, если окно найдено,
//					      Ложь, если окно не найдено,
//						  Неопределено, если неверные параметры.
//
Процедура ВебКлиентНайтиАктивизироватьОкно(ИмяФормыДляПоиска, ВызывающаяФорма, Результат = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИмяФормыДляПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипЗнч(ВызывающаяФорма) = Тип("ФормаКлиентскогоПриложения")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытыеОкна = ПолучитьОкна();
	
	Для Каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		
		// Обход ошибки платформы, при вызове из формы до открытия формы,
		// обращение к содержимому окна этой формы вызывает ошибку.
		// Поэтому переданная в качестве параметра вызывающая форма
		// позволяет обойти этот момент.
		Если ОткрытоеОкно = Неопределено ИЛИ ОткрытоеОкно = ВызывающаяФорма.Окно Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Содержимое = ОткрытоеОкно.Содержимое;
		
		Если Содержимое.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОсновнаяФорма = Содержимое[0];
		ИмяФормыОкна = ОсновнаяФорма.ИмяФормы;
		
		Если ИмяФормыОкна = ИмяФормыДляПоиска Тогда
			
			Результат = Истина;
			
			ЗаголовокОкна = ОткрытоеОкно.Заголовок;
			
			ВладелецФормы = ОсновнаяФорма.ВладелецФормы;
			Если ВладелецФормы <> Неопределено Тогда
				
				ВладелецФормы.Активизировать();
				
			КонецЕсли;
			
			Оповестить(ЗаголовокОкна, "Активизировать");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Ложь;

КонецПроцедуры

#КонецОбласти
