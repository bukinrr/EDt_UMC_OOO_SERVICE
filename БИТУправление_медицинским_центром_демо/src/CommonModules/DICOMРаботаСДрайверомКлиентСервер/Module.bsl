#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьИмяМакета() Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		ИмяКомпоненты = "КомпонентDICOM_linux32";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ИмяКомпоненты = "КомпонентDICOM_linux64";
	Иначе
		ИмяКомпоненты = "DICOMDRIVER";
	КонецЕсли; 
	
	Возврат "ОбщийМакет." + ИмяКомпоненты;
КонецФункции

Процедура УстановитьКомпонентуDICOM() Экспорт
	#Если НаКлиенте Тогда
		ИмяМакета = ПолучитьИмяМакета();
		
		УстановитьВнешнююКомпоненту(ИмяМакета);
		
		DICOMРаботаСДрайвером.ЗаписатьВРегистрИспользуемуюВерсиюКомпоненты();
	#КонецЕсли
КонецПроцедуры

Функция ВерсияКомпонентыDICOM() Экспорт
	Возврат "1.0.1.4"
КонецФункции

Функция ТребуетсяУстановитьКомпонентDICOM() Экспорт

	#Если НаКлиенте Тогда
		УстановленнаяВерсия = DICOMРаботаСДрайвером.ПолучитьВерсиюУстановленнойКомпоненты();
							
		Возврат ВерсияКомпонентыDICOM() <> УстановленнаяВерсия;
	#Иначе
		Возврат Ложь;
	#КонецЕсли
	Возврат Истина;

КонецФункции

Функция ПолучитьИнтерфейсDICOM() Экспорт
	

	ИмяМакета = ПолучитьИмяМакета();

	Попытка
		Интерфейс = Новый("AddIn.AddInNative.AddInNativeExtension");
	Исключение
		
		Попытка
			#Если НаКлиенте Тогда
				Если ТребуетсяУстановитьКомпонентDICOM() Тогда
					УстановитьКомпонентуDICOM();
				КонецЕсли;
			#КонецЕсли

			ОК = ПодключитьВнешнююКомпоненту(ИмяМакета, "AddInNative", ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.НеИзолированно);
			
			#Если НаКлиенте Тогда
				Если ОК Тогда
					Интерфейс = Новый("AddIn.AddInNative.AddInNativeExtension");
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			#Иначе
				Интерфейс = ?(ОК, Новый("AddIn.AddInNative.AddInNativeExtension"), Неопределено);
			#КонецЕсли
		Исключение
			ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки
	КонецПопытки;
	
	Если Интерфейс <> Неопределено Тогда
		Интерфейс.LogCatalog = DICOMРаботаСДрайвером.ПолучитьПутьКНастройкамЛогов();
	КонецЕсли;
		
	Возврат Интерфейс;
	
КонецФункции

Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ИспользоватьDICOM = DICOMРаботаСДрайвером.ПолучитьЗначениеКонстантыИспользоватьDICOM();
	
	Если ИспользоватьDICOM Тогда
	
		// Запуск StorageSCP
		НастройкиDICOM = DICOMРаботаСДрайвером.ПолучитьНастройки(
									"STORESCP_АвтоматическийЗапуск"
						);
		Если НастройкиDICOM.STORESCP_АвтоматическийЗапуск = Истина Тогда
			СтатусЗапуска = DICOMРаботаСДрайверомКлиентСервер.ПолучитьСтатусStorageSCP();
			Если СтатусЗапуска = Ложь Тогда
				DICOMРаботаСДрайверомКлиентСервер.ЗапускStorageSCP();
			КонецЕсли;
		КонецЕсли;
		
		// Запуск MWLCSP
		MWLSCP_АвтоматическийЗапуск = DICOMРаботаСДрайвером.ПолучитьЗначениеКонстантыMWLSCP_АвтоматическийЗапуск();
		Если MWLSCP_АвтоматическийЗапуск Тогда
			СтатусЗапуска = DICOMРаботаСДрайвером.ПолучитьСтатусMWLCSP();
			Если СтатусЗапуска = Ложь Тогда
				DICOMРаботаСДрайвером.ЗапускMWLCSP();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
// StorageSCP

Процедура ЗапускStorageSCP() Экспорт
	
	ЗапуститьСлужбуStoreSCP();
	
КонецПроцедуры

Процедура ОстановкаStorageSCP() Экспорт
	
	ВнешняяКомпонента = DICOMРаботаСДрайверомКлиентСервер.ПолучитьИнтерфейсDICOM();
	
	#Если НаСервере Тогда
		НастройкиDICOM = Новый Структура("STORESCP_ИспользуемыйAETitle,STORESCP_КаталогФайлов,STORESCP_ОчищатьКаталогЧерез");
		Попытка
			НастройкиDICOM.STORESCP_ИспользуемыйAETitle = Константы.STORESCP_ИспользуемыйAETitle.Получить();
		Исключение
		КонецПопытки;
		
		Попытка
			НастройкиDICOM.STORESCP_КаталогФайлов = Константы.STORESCP_КаталогФайлов.Получить();
		Исключение
		КонецПопытки;
		
		Попытка
			НастройкиDICOM.STORESCP_ОчищатьКаталогЧерез = Константы.STORESCP_ОчищатьКаталогЧерез.Получить();
		Исключение
		КонецПопытки;
	#Иначе
		НастройкиDICOM = DICOMРаботаСДрайвером.ПолучитьНастройки();
	#КонецЕсли

	AE = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				НастройкиDICOM.STORESCP_ИспользуемыйAETitle, "Port, Наименование, Host"
			);
			port	=  Формат(AE.Port, "ЧГ=0");
			AET		= AE.Наименование;
			host	= AE.Host; 	
	
	Попытка
		
		Рез = ВнешняяКомпонента.StopServiceIn1C("-aec", "1C", "-aet", AET, "-host", host, "-port", port);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка остановки сервиса Storage SCP.");
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСтатусStorageSCP() Экспорт
	
	ВнешняяКомпонента = DICOMРаботаСДрайверомКлиентСервер.ПолучитьИнтерфейсDICOM();
	
	#Если НаСервере Тогда
		НастройкиDICOM = Новый Структура("STORESCP_ИспользуемыйAETitle,STORESCP_КаталогФайлов,STORESCP_ОчищатьКаталогЧерез");
		Попытка
			НастройкиDICOM.STORESCP_ИспользуемыйAETitle = Константы.STORESCP_ИспользуемыйAETitle.Получить();
		Исключение
		КонецПопытки;
		
		Попытка
			НастройкиDICOM.STORESCP_КаталогФайлов = Константы.STORESCP_КаталогФайлов.Получить();
		Исключение
		КонецПопытки;
		
		Попытка
			НастройкиDICOM.STORESCP_ОчищатьКаталогЧерез = Константы.STORESCP_ОчищатьКаталогЧерез.Получить();
		Исключение
		КонецПопытки;
	#Иначе
		НастройкиDICOM = DICOMРаботаСДрайвером.ПолучитьНастройки();
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(НастройкиDICOM.STORESCP_ИспользуемыйAETitle) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано значение STORESCP_ИспользуемыйAETitle");
		Возврат Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(НастройкиDICOM.STORESCP_КаталогФайлов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано значение STORESCP_КаталогФайлов");
		Возврат Ложь;		
	КонецЕсли;

	AE = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				НастройкиDICOM.STORESCP_ИспользуемыйAETitle, "Port, Наименование, Host"
			);
			port	= Формат(AE.Port, "ЧГ=0");
			AET		= AE.Наименование;
			host	= AE.Host; 
	
	Попытка
				
		Рез = ВнешняяКомпонента.TestService("-aec", "1C", "-aet", AET, "-host", host, "-port", port);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось определить статус StorageSCP");
		Рез = Неопределено;
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

//////////////////////////////////////////////////////////////////
// Запросы к PACS

Функция ПолучитьИсследования(МедицинскаяКарта, StudyInstanceUID, Modality, Период, PACS, AETitle, ДанныеPACS, ТипЗапроса = "SERIES") Экспорт
	ВыполнитьПроверкуССообщением(ЗначениеЗаполнено(PACS), "Нет сервера PACS"); 
	
	Интерфейс = ПолучитьИнтерфейсDICOM();
	Если Интерфейс = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка выполнения запроса к PACS.");
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ТипЗапроса = "STUDY" Тогда
		Если ЗначениеЗаполнено(AETitle) Тогда
			Ответ = Интерфейс.FindScu(
				"-S", 
				"-k", DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=" + ТипЗапроса, 
				"-k", DICOMРаботаСДанными.КодPatientID() + "=" + ПолучитьPatientID(МедицинскаяКарта), 
				"-k", DICOMРаботаСДанными.КодModality() + "=" + ПолучитьModality(Modality), 
				"-k", DICOMРаботаСДанными.КодStudyDate() + "=" + ПолучитьПериод(Период), 
				"-k", DICOMРаботаСДанными.КодPatientName() + "=", 
				"-k", DICOMРаботаСДанными.КодStudyInstanceUID() + "=", 
				"-k", DICOMРаботаСДанными.КодStudyTime() + "=", 
				"-k", DICOMРаботаСДанными.КодStudyDescription() + "=", 
				"-k", DICOMРаботаСДанными.КодPatientComments() + "=", 
				"-k", DICOMРаботаСДанными.КодPatientBirthDate() + "=", 
				"-k", DICOMРаботаСДанными.КодPatientSex() + "=", 
				"-k", DICOMРаботаСДанными.КодAccessionNumber() + "=", 
				"-aet", Строка(AETitle), 
				"-aec", Строка(PACS), Строка(ДанныеPACS.Host), Формат(ДанныеPACS.Port, "ЧГ=0")
			);
		Иначе
			Ответ = Интерфейс.FindScu(
				"-S", 
				"-k", DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=" + ТипЗапроса, 
				"-k", DICOMРаботаСДанными.КодPatientID() + "=" + ПолучитьPatientID(МедицинскаяКарта), 
				"-k", DICOMРаботаСДанными.КодPatientName() + "=", 
				"-k", DICOMРаботаСДанными.КодModality() + "=" + ПолучитьModality(Modality), 
				"-k", DICOMРаботаСДанными.КодStudyDate() + "=" + ПолучитьПериод(Период), 
				"-k", DICOMРаботаСДанными.КодStudyInstanceUID() + "=", 
				"-k", DICOMРаботаСДанными.КодStudyTime() + "=", 
				"-k", DICOMРаботаСДанными.КодStudyDescription() + "=", 
				"-k", DICOMРаботаСДанными.КодPatientComments() + "=", 
				"-k", DICOMРаботаСДанными.КодPatientBirthDate() + "=", 
				"-k", DICOMРаботаСДанными.КодPatientSex() + "=", 
				"-k", DICOMРаботаСДанными.КодAccessionNumber() + "=", 
				"-aec", Строка(PACS), Строка(ДанныеPACS.Host), Формат(ДанныеPACS.Port, "ЧГ=0")
			);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(AETitle) Тогда
			Ответ = Интерфейс.FindScu(
				"-S", 
				"-k", DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=" + ТипЗапроса, 
				"-k", DICOMРаботаСДанными.КодStudyInstanceUID() + "=" + StudyInstanceUID, 
				"-k", DICOMРаботаСДанными.КодSeriesInstanceUID() + "=", 
				"-k", DICOMРаботаСДанными.КодModality() + "=" + ПолучитьModality(Modality), 
				"-k", DICOMРаботаСДанными.КодSeriesNumber() + "=", 
				"-k", DICOMРаботаСДанными.КодNumberOfSeriesRelatedInstances() + "=", 
				"-aet", Строка(AETitle), 
				"-aec", Строка(PACS), Строка(ДанныеPACS.Host), Формат(ДанныеPACS.Port, "ЧГ=0")
			);
		Иначе
			Ответ = Интерфейс.FindScu(
				"-S", 
				"-k", DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=" + ТипЗапроса, 
				"-k", DICOMРаботаСДанными.КодStudyInstanceUID() + "=" + StudyInstanceUID, 
				"-k", DICOMРаботаСДанными.КодSeriesInstanceUID() + "=", 
				"-k", DICOMРаботаСДанными.КодModality() + "=" + ПолучитьModality(Modality), 
				"-k", DICOMРаботаСДанными.КодSeriesNumber() + "=", 
				"-k", DICOMРаботаСДанными.КодNumberOfSeriesRelatedInstances() + "=", 
				"-aec", Строка(PACS), Строка(ДанныеPACS.Host), Формат(ДанныеPACS.Port, "ЧГ=0")
			);
		КонецЕсли;
	КонецЕсли;
	
	Возврат DICOMРаботаСДанными.ПрочитатьЗаголовкиDICOM(Ответ);
КонецФункции

Функция ПолучитьПериод(Период)
	Результат = "";
	Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		Результат = Формат(Период.ДатаНачала, "ДФ=ггггММдд");	
	КонецЕсли;
	Если ЗначениеЗаполнено(Период.ДатаНачала) Или ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		Результат = Результат + "-";	
	КонецЕсли;
	Если ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		Результат = Результат + Формат(Период.ДатаОкончания, "ДФ=ггггММдд");	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьModality(Modality)
	Возврат ?(
		ЗначениеЗаполнено(Modality), 
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(Modality, "Код"), 
		""
	);
КонецФункции

Функция ПолучитьPatientID(МедицинскаяКарта)
	Возврат DICOMРаботаСДрайвером.ПрямаяТранслитерация(СтрЗаменить(МедицинскаяКарта," ",""));
КонецФункции

Процедура ПолучитьДанныеИсследования(УИДИсследования, Хранилище, PACS, AETitle, ДанныеPACS) Экспорт
	ВыполнитьПроверкуССообщением(ЗначениеЗаполнено(PACS) И ЗначениеЗаполнено(Хранилище), "Нет сервера PACS или хранилища"); 
	
	Интерфейс = ПолучитьИнтерфейсDICOM();
	Если Интерфейс = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка выполнения запроса к PACS.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(AETitle) Тогда
		DICOMРаботаСДрайвером.ЗапроситьПередачуДанных(
			"-S "
			+ " -k " + DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=STUDY " 
			+ " -k " + DICOMРаботаСДанными.КодStudyInstanceUID() + "=" + УИДИсследования 
			+ " -aet " + Строка(AETitle)
			+ " -aec " + Строка(PACS) 
			+ " -aem " + Строка(Хранилище)
			+ " " + Строка(ДанныеPACS.Host) + " " + Формат(ДанныеPACS.Port, "ЧГ=0"));
	Иначе
		DICOMРаботаСДрайвером.ЗапроситьПередачуДанных(
			"-S "
			+ " -k " + DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=STUDY " 
			+ " -k " + DICOMРаботаСДанными.КодStudyInstanceUID() + "=" + УИДИсследования 
			+ " -aec " + Строка(PACS) 
			+ " -aem " + Строка(Хранилище)
			+ " " + Строка(ДанныеPACS.Host) + " " + Формат(ДанныеPACS.Port, "ЧГ=0"));
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьДанныеИсследованияСерии(УИДСерии, Хранилище, PACS, AETitle, ДанныеPACS) Экспорт
	ВыполнитьПроверкуССообщением(ЗначениеЗаполнено(PACS) И ЗначениеЗаполнено(Хранилище), "Нет сервера PACS или хранилища"); 
	
	Интерфейс = ПолучитьИнтерфейсDICOM();
	Если Интерфейс = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка выполнения запроса к PACS.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(AETitle) Тогда
		DICOMРаботаСДрайвером.ЗапроситьПередачуДанных(
			"-S "
			+" -k " + DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=SERIES" 
			+" -k " + DICOMРаботаСДанными.КодSeriesInstanceUID() + "=" + УИДСерии
			+ " -aet " + Строка(AETitle)
			+ "-aec" + Строка(PACS) 
			+ "-aem" + Строка(Хранилище)
			+ Строка(ДанныеPACS.Host) + Формат(ДанныеPACS.Port, "ЧГ=0"));
	Иначе
		DICOMРаботаСДрайвером.ЗапроситьПередачуДанных(
			"-S "
			+" -k " + DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=SERIES" 
			+" -k " + DICOMРаботаСДанными.КодSeriesInstanceUID() + "=" + УИДСерии
			+ "-aec" + Строка(PACS) 
			+ "-aem" + Строка(Хранилище)
			+ Строка(ДанныеPACS.Host) + Формат(ДанныеPACS.Port, "ЧГ=0"));
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКоличествоСнимковВСерии(УИДСерии, PACS, AETitle, ДанныеPACS) Экспорт
	ВыполнитьПроверкуССообщением(ЗначениеЗаполнено(PACS), "Нет сервера PACS"); 
	
	Если Не ЗначениеЗаполнено(УИДСерии) Тогда
		Возврат 0;	
	КонецЕсли;
	
	Интерфейс = ПолучитьИнтерфейсDICOM();
	Если Интерфейс = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка выполнения запроса к PACS.");
		Возврат 0;	
	КонецЕсли;
	
	Ответ = Новый Массив;
	Если ЗначениеЗаполнено(AETitle) Тогда
		Ответ = Интерфейс.FindScu(
			"-S", 
			"-k", DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=IMAGE", 
			"-k", DICOMРаботаСДанными.КодSeriesInstanceUID() + "=" + УИДСерии, 
			"-aet", Строка(AETitle), 
			"-aec", Строка(PACS), 
			Строка(ДанныеPACS.Host), Формат(ДанныеPACS.Port, "ЧГ=0")
		);
	Иначе
		Ответ = Интерфейс.FindScu(
			"-S", 
			"-k", DICOMРаботаСДанными.КодQueryRetrieveLevel() + "=IMAGE", 
			"-k", DICOMРаботаСДанными.КодSeriesInstanceUID() + "=" + УИДСерии, 
			"-aec", Строка(PACS), 
			Строка(ДанныеPACS.Host), Формат(ДанныеPACS.Port, "ЧГ=0")
		);
	КонецЕсли;
	Возврат DICOMРаботаСДанными.ПрочитатьЗаголовкиDICOM(Ответ).Количество();
КонецФункции

Функция ЗапуститьСлужбуStoreSCP() Экспорт
	// Проверяем статус службы, если нет, то запускаем
	Если DICOMРаботаСДрайверомКлиентСервер.ПолучитьСтатусStorageSCP() = Истина Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Служба StoreSCP уже запущена.");
		Возврат Ложь;
	КонецЕсли;
	
	#Если НаСервере Тогда
		НастройкиDICOM = Новый Структура("STORESCP_ИспользуемыйAETitle,STORESCP_КаталогФайлов,STORESCP_ОчищатьКаталогЧерез");
		Попытка
			НастройкиDICOM.STORESCP_ИспользуемыйAETitle = Константы.STORESCP_ИспользуемыйAETitle.Получить();
		Исключение
		КонецПопытки;
		
		Попытка
			НастройкиDICOM.STORESCP_КаталогФайлов = Константы.STORESCP_КаталогФайлов.Получить();
		Исключение
		КонецПопытки;
		
		Попытка
			НастройкиDICOM.STORESCP_ОчищатьКаталогЧерез = Константы.STORESCP_ОчищатьКаталогЧерез.Получить();
		Исключение
		КонецПопытки;
	#Иначе
		НастройкиDICOM = DICOMРаботаСДрайвером.ПолучитьНастройки();
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(НастройкиDICOM.STORESCP_ИспользуемыйAETitle) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано значение STORESCP_ИспользуемыйAETitle");
		Возврат Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(НастройкиDICOM.STORESCP_КаталогФайлов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано значение STORESCP_КаталогФайлов");
		Возврат Ложь;		
	КонецЕсли;

	AE = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				НастройкиDICOM.STORESCP_ИспользуемыйAETitle, "Port, Наименование"
			);
			Port = Формат(AE.Port, "ЧГ=0");
			AETitle = AE.Наименование;
	ХранилищеDICOM_Префикс = "study";
		
	Shell=Новый COMОбъект("WScript.Shell");		
	СтрокаЗапуска = "";
	КаталогЗапускаСлужб = DICOMРаботаСДрайвером.ПолучитьКаталогЗапускаСлужб();
	КаталогНаДиске = Новый Файл(КаталогЗапускаСлужб);
	Если КаталогНаДиске.Существует() Тогда
		ПутьКФайлуСлужбы = СформироватьПутьКФайлуВКаталоге(КаталогЗапускаСлужб, "StoreSCP.exe");
		Файл_MWLSCP = Новый Файл(ПутьКФайлуСлужбы);
		Если Файл_MWLSCP.Существует() Тогда
			// Все ок файлик на месте		
		Иначе
			УИДХранилища = Новый УникальныйИдентификатор();
			АдресДД = DICOMРаботаСДрайвером.ПолучитьДДОбщегоМакета("StoreSCP", УИДХранилища);
			СлужбаДД = ПолучитьИзВременногоХранилища(АдресДД);
			СлужбаДД.Записать(ПутьКФайлуСлужбы);
		КонецЕсли;
		СтрокаЗапуска = ПутьКФайлуСлужбы 
							+ " -su "
							+ ХранилищеDICOM_Префикс
							+ " -aet "
							+ AETitle
							+ " -od "
							+ НастройкиDICOM.STORESCP_КаталогФайлов
							+ " " + Port;

	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неправильно задан каталог запуска служб DICOM.");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Shell.Run(СтрокаЗапуска, 0, 0);	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка запуска службы StoreSCP");
		Возврат Ложь;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПутьКФайлуВКаталоге(Каталог, ИмяФайла)
	Разделитель = ПолучитьРазделительПути();
	ПоследнийСимвол = Сред(Каталог, СтрДлина(Каталог), 1);
	Если ПоследнийСимвол <> Разделитель Тогда
		Возврат Каталог + Разделитель + ИмяФайла;
	Иначе
		Возврат Каталог + ИмяФайла;
	КонецЕсли;
КонецФункции

Процедура ВыполнитьПроверкуССообщением(Условие, Сообщение)
	ОбщегоНазначенияБИТКлиентСервер.ВыполнитьПроверкуССообщением(Условие, "DICOMРаботаСДрайверомКлиентСервер: " + Сообщение);
КонецПроцедуры

#КонецОбласти