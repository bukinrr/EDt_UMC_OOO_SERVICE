#Область ПрограммныйИнтерфейс

// Выполнено закрытие ли указанного месяца
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на проверяемый документ. 
// 
// Возвращаемое значение:
//   Булево - Истина, если документ попадает в закрытый период.  
//
Функция ВыполненоЗакрытиеМесяца(Период, ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РаспределениеЗатрат") Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат ПроверитьНаличиеДокументаОперацииЗакрытияМесяца(Период, , Истина) <> Неопределено;
	
КонецФункции

// Проверяет наличие документа операции закрытия месяца
//
// Параметры:
//  Дата			 - Дата - проверяемая дата.
//  ВидОперации		 - ПеречислениеСсылка.ВидыОперацийРаспределениеЗатрат	 - проверяемый вид операции распределения затрат.
//  ДокументПроведен - Булево												 - признак проведения документа распределения затрат.
// 
// Возвращаемое значение:
//  ДокументСсылка.РаспределениеЗатрат, Неопределено - ссылку, если существует документ распределения затрат; в противном случае Неопределено.
//
Функция ПроверитьНаличиеДокументаОперацииЗакрытияМесяца(Дата, ВидОперации, ДокументПроведен = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	
	Если ВидОперации = Перечисления.ВидыОперацийРаспределениеЗатрат.ОтражениеНачисленийЗарплатыКакЗатрат Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ОтражениеЗатратПоЗарплате КАК ОтражениеЗатратПоЗарплате
		               |ГДЕ
		               |	ОтражениеЗатратПоЗарплате.Проведен
		               |	И НАЧАЛОПЕРИОДА(ОтражениеЗатратПоЗарплате.Дата, МЕСЯЦ) = &НачалоМесяца";
		
	Иначе 
	
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
		Запрос.УстановитьПараметр("ДокументПроведен", ДокументПроведен);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	РаспределениеЗатрат.Ссылка КАК Ссылка
			               |ИЗ
			               |	Документ.РаспределениеЗатрат КАК РаспределениеЗатрат
			               |ГДЕ
			               |	НЕ РаспределениеЗатрат.ПометкаУдаления
			               |	И (РаспределениеЗатрат.Проведен = &ДокументПроведен ИЛИ &ДокументПроведен = НЕОПРЕДЕЛЕНО) 
						   |	И (РаспределениеЗатрат.ВидОперации = &ВидОперации ИЛИ &ВидОперации = НЕОПРЕДЕЛЕНО)
			               |	И НАЧАЛОПЕРИОДА(РаспределениеЗатрат.Дата, МЕСЯЦ) = &НачалоМесяца
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	РаспределениеЗатрат.Дата УБЫВ";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Результат = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат ?(Результат = Null, Неопределено, Результат);
	
КонецФункции

// Проверка допустимости движений регистра по тому, закрыт ли месяц.
//
// Параметры:
//  Источник	 - РегистрНакопленияНаборЗаписей - набор записей, передаваемый
//                 в подписку на событие ПередЗаписью. 
//  Отказ        - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  Замещение    - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ЗапретИзмененияЗакрытогоМесяцаПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.Отбор.Найти("Регистратор") <> Неопределено Тогда
		
		РегистраторСсылка = Источник.Отбор.Регистратор.Значение;
		
		ТаблицаДвижений = Источник.Выгрузить();
		
		// Проверим, изменились ли фактически движения. Если нет, то прекратим проверку.
		МетаданныеРегистра = Источник.Метаданные();
		СтарыеДвижения = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		СтарыеДвижения.Отбор.Регистратор.Установить(РегистраторСсылка);
		СтарыеДвижения.Прочитать();
		Если ОбщегоНазначения.СравнитьТаблицыНаборовЗаписей(ТаблицаДвижений, СтарыеДвижения.Выгрузить()) Тогда
			Возврат;
		КонецЕсли;
		
		// Определим, какие месяцы затронуты движениями.
		ТаблицаДвижений.Свернуть("Период", ""); // Сокращаем число строк в цикле.
		Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
			СтрокаДвижения.Период = НачалоМесяца(СтрокаДвижения.Период);
		КонецЦикла;
		Для Каждого СтрокаДвижения Из СтарыеДвижения Цикл
			ТаблицаДвижений.Добавить().Период = НачалоМесяца(СтрокаДвижения.Период);
		КонецЦикла;
		
		ТаблицаДвижений.Свернуть("Период", "");
		ПроверяемыеПериоды = ТаблицаДвижений.ВыгрузитьКолонку("Период");
		
		Для Каждого ПроверяемыйПериод Из ПроверяемыеПериоды Цикл
			
			Если ВыполненоЗакрытиеМесяца(ПроверяемыйПериод, РегистраторСсылка) Тогда 
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'За '") + Формат(ПроверяемыйПериод, "ДФ='ММММ гггг'") 
													+ Нстр("ru = ' г. выполнены операции закрытия месяца!'"), Отказ);
													
			ИначеЕсли ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.НачисленияСотрудникам")
				И ЗначениеЗаполнено(ПроверитьНаличиеДокументаОперацииЗакрытияМесяца(ПроверяемыйПериод, Перечисления.ВидыОперацийРаспределениеЗатрат.ОтражениеНачисленийЗарплатыКакЗатрат))
			Тогда
				// Проверка, что в месяце нет проведенных распределений зарплаты на затраты.
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'За '") + Формат(ПроверяемыйПериод, "ДФ='ММММ гггг'") 
													+ Нстр("ru = ' г. выполнено отражение зарплаты на затраты в рамках закрытия месяца!'"), Отказ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

// Возвращает документ рапределения затрат, актуальный для указанного месяца.
//
// Параметры:
//  Период	 - Дата	 - Месяц закрытия.
// 
// Возвращаемое значение:
//   ДокументСсылка.ПравилаРаспределенияЗатрат.
//
Функция ПолучитьПравилаРаспределенияЗатрат(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаРаспределенияЗатрат.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПравилаРаспределенияЗатрат КАК ПравилаРаспределенияЗатрат
	|ГДЕ
	|	ПравилаРаспределенияЗатрат.Дата <= &Период
	|	И ПравилаРаспределенияЗатрат.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаРаспределенияЗатрат.Дата УБЫВ"
	;
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает документы отражения начисления зарплаты в учете затрат.
// Возвращает Истина, если операция выполнена.
//
// Параметры:
//  Период	 - Дата	 - Закрываемый месяц.
// 
// Возвращаемое значение:
//   Булево.
//
Функция СоздатьДокументыОтраженияЗарплатыКакЗатрат(Период) Экспорт
	
	ПравилаРаспределения = ЗакрытиеМесяца.ПолучитьПравилаРаспределенияЗатрат(Период);
	Если ПравилаРаспределения = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='На период документа не заданы правила распределения затрат!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",	КонецМесяца(Период));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияСотрудникамОбороты.Регистратор КАК Регистратор,
	|	НачисленияСотрудникамОбороты.Сотрудник КАК Сотрудник,
	|	НачисленияСотрудникамОбороты.КатегорияВыработки КАК Специализация,
	|	СУММА(НачисленияСотрудникамОбороты.СуммаОборот) КАК Сумма,
	|	НачисленияСотрудникамОбороты.Регистратор.Филиал КАК ФилиалНачисления
	|ИЗ
	|	РегистрНакопления.НачисленияСотрудникам.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК НачисленияСотрудникамОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияСотрудникамОбороты.Регистратор,
	|	НачисленияСотрудникамОбороты.Сотрудник,
	|	НачисленияСотрудникамОбороты.КатегорияВыработки,
	|	НачисленияСотрудникамОбороты.Регистратор.Филиал
	|ИТОГИ ПО
	|	ФилиалНачисления"
	;
	ВыборкаФилиалНачисления = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	Пока ВыборкаФилиалНачисления.Следующий() Цикл
		
		ДокументОтражения = Документы.ОтражениеЗатратПоЗарплате.СоздатьДокумент();
		ДокументОтражения.Дата = КонецМесяца(Период);
		ДокументОтражения.Филиал = ВыборкаФилиалНачисления.ФилиалНачисления;
		//ДокументОтражения.
		
		Выборка = ВыборкаФилиалНачисления.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДокументОтражения.Распределение.Добавить();
			НоваяСтрока.СтатьяЗатрат	 = ПравилаРаспределения.ОсновнаяСтатьяЗатратОтраженияЗарплаты;
			НоваяСтрока.Основание		 = Выборка.Регистратор;
			НоваяСтрока.Сотрудник		 = Выборка.Сотрудник;
			НоваяСтрока.Специализация	 = Выборка.Специализация;
			НоваяСтрока.Сумма			 = Выборка.Сумма;
			
		КонецЦикла;
		
		Попытка
			ДокументОтражения.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Возникла ошибка при проведении отражения затрат рарплаты. Проверьте заполненность настроек распределения затрат.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Попытка
				ДокументОтражения.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
