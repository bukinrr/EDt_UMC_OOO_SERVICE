#Область ПрограммныйИнтерфейс

// Возникает перед началом формирования отчета.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Отказ - Булево - Если установить в значение Истина, то процесс формирования отчета будет остановлен.
//       Для перезапуска процесса формирования
//       рекомендуется использовать процедуру ОтчетыКлиент.СформироватьОтчет().
//
Процедура ПередФормированием(ФормаОтчета, Отказ) Экспорт
	
	Если ФормаОтчета.НастройкиОтчета.ПолноеИмя = "Отчет.ВедомостьПоТоварамНаСкладахВЦенахНоменклатуры" Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор, "ЕдиницаТоваров");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор, "Единица");
	КонецЕсли;
	
КонецПроцедуры

// Возникает после окончания формирования отчета.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   ОтчетСформирован - Булево - Истина если отчет был успешно сформирован.
//
Процедура ПослеФормирования(ФормаОтчета, ОтчетСформирован) Экспорт
	
	ПодменюУровниГруппировок = ФормаОтчета.Элементы.Найти("ГруппаУровеньГруппировки");
	Если ПодменюУровниГруппировок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоУровнейГруппировок = ПолучитьКоличествоУровнейСтруктурыОтчета(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Структура);
	
	Если КоличествоУровнейГруппировок = 0 Тогда
		КоличествоУровнейГруппировок = ФормаОтчета.ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	Иначе
		КоличествоУровнейГруппировок = Мин(КоличествоУровнейГруппировок, ФормаОтчета.ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок());
	КонецЕсли;
		
	Если КоличествоУровнейГруппировок > 1 Тогда
		ФормаОтчета.Элементы.ГруппаУровеньГруппировки.Видимость = Истина;
		Для Каждого КнопкаУровня Из ФормаОтчета.Элементы.ГруппаУровеньГруппировки.ПодчиненныеЭлементы Цикл
			Если Число(СтрЗаменить(КнопкаУровня.Имя, "Уровень", "")) <= КоличествоУровнейГруппировок Тогда
				КнопкаУровня.Видимость = Истина;
			Иначе
				КнопкаУровня.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ФормаОтчета.Элементы.ГруппаУровеньГруппировки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
// См. "Расширение поля формы для поля табличного документа.ОбработкаРасшифровки" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Элемент     - ПолеФормы        - Табличный документ.
//   Расшифровка - Произвольный     - Значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Если ФормаОтчета.НастройкиОтчета.ПолноеИмя = "Отчет.бит_ИсторияЗвонков" Тогда
		бит_ТелефонияКлиентПереопределяемый.бит_ИсторияЗвонковОбработкаРасшифровки(ФормаОтчета.ОтчетДанныеРасшифровки, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
// См. "Расширение поля формы для поля табличного документа.ОбработкаДополнительнойРасшифровки" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Элемент     - ПолеФормы        - Табличный документ.
//   Расшифровка - Произвольный     - Значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаДополнительнойРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик команд, добавленных динамически и подключенных к обработчику "Подключаемый_Команда".
// Пример добавления команды см. ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Команда     - КомандаФормы     - Команда, которая была вызвана.
//   Результат   - Булево           - Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ФормаОтчета, Команда, Результат) Экспорт
	
	
	
КонецПроцедуры

// Обработчик результата выбора подчиненной формы.
// См. "УправляемаяФорма.ОбработкаВыбора" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета       - УправляемаяФорма - Форма отчета.
//   ВыбранноеЗначение - Произвольный     - Результат выбора в подчиненной форме.
//   ИсточникВыбора    - УправляемаяФорма - Форма, где осуществлен выбор.
//   Результат         - Булево           - Истина, если результат выбора обработан.
//
Процедура ОбработкаВыбора(ФормаОтчета, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
КонецПроцедуры

// Обработчик двойного щелчка мыши, нажатия клавиши Enter или гиперссылки в табличном документе формы отчета.
// См. "Расширение поля формы для поля табличного документа.Выбор" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Элемент     - ПолеФормы        - Табличный документ.
//   Область     - ОбластьЯчеекТабличногоДокумента - Выбранное значение.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки события.
//
Процедура ОбработкаВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик широковещательного оповещения формы отчета.
// См. "УправляемаяФорма.ОбработкаОповещения" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   ИмяСобытия  - Строка           - Идентификатор события для принимающих форм.
//   Параметр    - Произвольный     - Расширенная информация о событии.
//   Источник    - УправляемаяФорма, Произвольный - Источник события.
//   ОповещениеОбработано - Булево - Признак того, что событие обработано.
//
Процедура ОбработкаОповещения(ФормаОтчета, ИмяСобытия, Параметр, Источник, ОповещениеОбработано) Экспорт
	
КонецПроцедуры

// Обработчик нажатия на кнопку выбора периода в отдельной форме.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Период - СтандартныйПериод - Значение настройки компоновщика, соответствующей выбранному периоду.
//   СтандартнаяОбработка - Булево - Если Истина, то будет использован стандартный диалог выбора периода.
//       Если установить в Ложь то стандартный диалог не откроется.
//   ОбработчикРезультата - ОписаниеОповещения - Обработчик результата выбора периода.
//       В качестве результата в ОбработчикРезультата могут быть переданы значения типов:
//       Неопределено - Пользователь отказался от ввода периода.
//       СтандартныйПериод - Выбранный период.
//
//  Если в конфигурации используется собственный диалог выбора периода,
//      тогда параметр СтандартнаяОбработка следует установить в Ложь,
//      а выбранный период следует вернуть в ОбработчикРезультата.
//
Процедура ПриНажатииКнопкиВыбораПериода(ФормаОтчета, Период, СтандартнаяОбработка, ОбработчикРезультата) Экспорт
	
КонецПроцедуры

Процедура ИзменениеУровняГруппировки(ФормаОтчета, ИмяКоманды) Экспорт
	
		ФормаОтчета.ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(Число(СтрЗаменить(ИмяКоманды, "Уровень", ""))-1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьКоличествоУровнейГруппировок(ЭлементСтруктурыНастроекКомпоновкиДанных, КоличествоУровнейГруппировок)
	
	КоличествоУровнейГруппировок = КоличествоУровнейГруппировок + 1;
	Если ЭлементСтруктурыНастроекКомпоновкиДанных.Использование Тогда
		Если (ТипЗнч(ЭлементСтруктурыНастроекКомпоновкиДанных) = Тип("ГруппировкаКомпоновкиДанных") 
			Или ТипЗнч(ЭлементСтруктурыНастроекКомпоновкиДанных) = Тип("ГруппировкаТаблицыКомпоновкиДанных"))
			И ЭлементСтруктурыНастроекКомпоновкиДанных.Структура.Количество() > 0
		Тогда
			
			ПолучитьКоличествоУровнейГруппировок(ЭлементСтруктурыНастроекКомпоновкиДанных.Структура[0], КоличествоУровнейГруппировок);
			
		ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроекКомпоновкиДанных) = Тип("ТаблицаКомпоновкиДанных")
			И ЭлементСтруктурыНастроекКомпоновкиДанных.Строки.Количество() > 0
		Тогда
			
			ПолучитьКоличествоУровнейГруппировок(ЭлементСтруктурыНастроекКомпоновкиДанных.Строки[0], КоличествоУровнейГруппировок);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоУровнейСтруктурыОтчета(Структура, ПредыдущийУровень = 0)
	
	ЕстьЗначимыеЭлементыСтруктуры = Ложь;
	МаксимальнаяГлубина = 0;
	
	Для Каждого ЭлементСтруктурыНастроекКомпоновкиДанных Из Структура Цикл
		Если ЭлементСтруктурыНастроекКомпоновкиДанных.Использование Тогда
			ЕстьЗначимыеЭлементыСтруктуры = Истина;
			ГлубинаТекущегоЭлемента = 0;
			
			Если ТипЗнч(ЭлементСтруктурыНастроекКомпоновкиДанных) = Тип("ГруппировкаКомпоновкиДанных")
				Или ТипЗнч(ЭлементСтруктурыНастроекКомпоновкиДанных) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			Тогда
				ГлубинаТекущегоЭлемента = ПолучитьКоличествоУровнейСтруктурыОтчета(ЭлементСтруктурыНастроекКомпоновкиДанных.Структура, ПредыдущийУровень + 1);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроекКомпоновкиДанных) = Тип("ТаблицаКомпоновкиДанных") Тогда
				ГлубинаТекущегоЭлемента = ПолучитьКоличествоУровнейСтруктурыОтчета(ЭлементСтруктурыНастроекКомпоновкиДанных.Строки, ПредыдущийУровень);
				
			ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроекКомпоновкиДанных) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ГлубинаТекущегоЭлемента = ПолучитьКоличествоУровнейСтруктурыОтчета(ЭлементСтруктурыНастроекКомпоновкиДанных.Настройки.Структура, ПредыдущийУровень);
				
			КонецЕсли;
			МаксимальнаяГлубина = Макс(МаксимальнаяГлубина, ГлубинаТекущегоЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗначимыеЭлементыСтруктуры Тогда
		Возврат МаксимальнаяГлубина;
	Иначе
		Возврат ПредыдущийУровень;
	КонецЕсли;
	
КонецФункции


#КонецОбласти