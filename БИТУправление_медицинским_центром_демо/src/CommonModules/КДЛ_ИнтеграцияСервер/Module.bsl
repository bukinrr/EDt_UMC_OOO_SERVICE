
#Область СправочнаяИнформация

// Возвращает хранимые настройки взаимодействия с КДЛ-лабораториями.
//
// Параметры:
//  Лаборатория - СправочникСсылка.Лаборатории - лаборатория, для которой получаем настройки.
// 
// Возвращаемое значение:
//   - Структура - Настройки для работы филиала с КДЛ-лабораториями.
//
Функция ПолучитьНастройкиВзаимодействия(Лаборатория) Экспорт
	
	НастройкаВзаимодействия = ЛабораторияСерверПовтИсп.ПолучитьНастройкиВзаимодействия_Унифицированно(Лаборатория, "КДЛ_НастройкиВзаимодействия");
	
	Возврат НастройкаВзаимодействия;
	
КонецФункции

Функция ОбновитьСправочники(ОбновитьБезПроверкиДаты = Ложь) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Лаборатории.Ссылка КАК Лаборатория
	|ИЗ
	|	Справочник.Лаборатории КАК Лаборатории
	|ГДЕ
	|	НЕ Лаборатории.ПометкаУдаления
	|	И Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.КДЛ)"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ОбновитьСправочникиЛаборатории(Выборка.Лаборатория, Истина) И Не ЕстьИзменения Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат ЕстьИзменения;
	
КонецФункции

Функция ОбновитьСправочникиЛаборатории(Лаборатория,
									   УстанавливатьЦены = Ложь,
									   СообщенияОбОшибках = Неопределено)
	
	ДанныеСправочников = ПолучитьДанныеСправочников(Лаборатория, СообщенияОбОшибках);
	
	Если ДанныеСправочников = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПрайсЗагружен = Ложь;
	
	Если ДанныеСправочников.Прайс <> Неопределено Тогда
		ПрайсЗагружен = Истина;
		ДанныеСправочников.Прайс.Колонки.КодПрайса.Имя = "Код";
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Исследования", ДанныеСправочников.Прайс);
		Если УстанавливатьЦены Тогда
			УстановитьЦеныНоменклатурыИсследований(Лаборатория);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСправочников.Исследования <> Неопределено Тогда
		ДанныеСправочников.Исследования.Колонки.КодИсследования.Имя = "Код";
		ДанныеСправочников.Исследования.Колонки.НаименованиеИсследования.Имя = "Наименование";
		Если ПрайсЗагружен Тогда
			ЗаполнитьДанныеИсследований(ДанныеСправочников.Исследования, Лаборатория);
		Иначе
			ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Исследования", ДанныеСправочников.Исследования);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСправочников.Биоматериалы <> Неопределено Тогда
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Биоматериалы", ДанныеСправочников.Биоматериалы);
	КонецЕсли;
	
	Если ДанныеСправочников.Контейнеры <> Неопределено Тогда
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Контейнеры", ДанныеСправочников.Контейнеры);
	КонецЕсли;
	
	Если ДанныеСправочников.БиоматериалыИсследований <> Неопределено Тогда
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_БиоматериалыИсследований", ДанныеСправочников.БиоматериалыИсследований);
	КонецЕсли;
	
	Если ДанныеСправочников.БиоматериалыКонтейнеров <> Неопределено Тогда
		ДанныеСправочников.БиоматериалыКонтейнеров.Колонки.Код.Имя = "КодБиоматериала";
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_БиоматериалыКонтейнеров", ДанныеСправочников.БиоматериалыКонтейнеров);
	КонецЕсли;
	
	Если ДанныеСправочников.ДопИнформация <> Неопределено Тогда
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_ДопИнформация", ДанныеСправочников.ДопИнформация);
	КонецЕсли;

	Если ДанныеСправочников.Тесты <> Неопределено Тогда
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Тесты", ДанныеСправочников.Тесты);
	КонецЕсли;
			
	Если ДанныеСправочников.Профили <> Неопределено Тогда
		ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Профили", ДанныеСправочников.Профили);
	КонецЕсли;
	
	Если ДанныеСправочников.СтопЛист <> Неопределено Тогда
		ЗаполнитьПериодыНедоступностиАнализов(Лаборатория, ДанныеСправочников.СтопЛист);
	КонецЕсли;
	
	Если ДанныеСправочников.ОписанияИсследований <> Неопределено Тогда
		ЗагрузитьОписанияИсследований(Лаборатория, ДанныеСправочников.ОписанияИсследований);
		ЗаполнитьОписанияИсследований(Лаборатория);
	КонецЕсли;
	
	Если ДанныеСправочников.МедицинскиеУслуги <> Неопределено Тогда
		ЗагрузитьМедицинскиеУслугиДляИсследований(Лаборатория, ДанныеСправочников.МедицинскиеУслуги);
	КонецЕсли;
	
	ЗаполнитьПоэтапныеИсследования(Лаборатория);
	СохранитьПараметрыЗабора(Лаборатория);
	ОпределитьИсключенныеИсследования(Лаборатория);
	
	Возврат Истина;

КонецФункции

Процедура ПерезаполнитьРегистрСведений(Лаборатория, ИмяРегистра, ТаблицаЗаполнения = Неопределено)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Прочитать();
	
	Если ТаблицаЗаполнения = Неопределено Тогда
		НаборЗаписей.Очистить();
	Иначе
		НаборЗаписей.Загрузить(ТаблицаЗаполнения);
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ШаблонСтроки = НСтр("ru='Ошибка записи в регистр сведений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ОписаниеОшибки);
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДанныеСправочников(Лаборатория, СообщенияОбОшибках = Неопределено)
	
	НаименованияСправочников = ПолучитьНаименованияСправочников();
	ФайлыСправочников = ПолучитьФайлыСправочников(Лаборатория, НаименованияСправочников, СообщенияОбОшибках);
	Если ФайлыСправочников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ВозвращаемоеЗначение = Новый Структура;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Лаборатория", Лаборатория);
	СтруктураПараметров.Вставить("ИмяФайла", "");
	СтруктураПараметров.Вставить("ДанныеФайла", "");

	Для Каждого Наименование Из НаименованияСправочников Цикл
		СтрФайлыСправочников = ФайлыСправочников.Найти(Наименование.Значение);
		Если СтрФайлыСправочников <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрФайлыСправочников);
			ВозвращаемоеЗначение.Вставить(Наименование.Ключ, ПолучитьДанныеСправочника(СтруктураПараметров, СообщенияОбОшибках));
		Иначе
			ВозвращаемоеЗначение.Вставить(Наименование.Ключ, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьДанныеСправочника(СтруктураПараметров, СообщенияОбОшибках = Неопределено)
	
	ИмяФайла = СтруктураПараметров.ИмяФайла;
	СтрокаXML = ВыполнитьФорматированиеXML(СтруктураПараметров.ДанныеФайла, ИмяФайла, СообщенияОбОшибках);
		
	Если ПустаяСтрока(СтрокаXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоПрайс = ИмяФайла = "price.xml";
	ЭтоСтопЛист = ИмяФайла = "stoplist.xml";
	ЭтоНоменклатураМедицинскихУслуг = ИмяФайла = "testegisz.xml";
	
	// Заменим строки в тексте XML.
	КорневойЭлементНачало = "<root xmlns=""KDL"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">";
	КорневойЭлементОкончание = "</root>";
	
	ВтораяСтрока = СтрПолучитьСтроку(СтрокаXML, 2);
	СтрокаXML = СтрЗаменить(СтрокаXML, ВтораяСтрока, КорневойЭлементНачало);
	
	ЧислоСтрок = СтрЧислоСтрок(СтрокаXML);
	Если ЧислоСтрок > 2 Тогда
		ПоследняяСтрока = СтрПолучитьСтроку(СтрокаXML, ЧислоСтрок);
		СтрокаXML = СтрЗаменить(СтрокаXML, ПоследняяСтрока, КорневойЭлементОкончание);
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Если ЭтоПрайс Тогда
		ИмяТипа = "price";
	ИначеЕсли ЭтоСтопЛист Тогда
		ИмяТипа = "stoplist";
	ИначеЕсли ЭтоНоменклатураМедицинскихУслуг Тогда
		ИмяТипа = "testegisz";
	Иначе
		ИмяТипа = "КорневойУзел";
	КонецЕсли;
	
	ТипXDTORoot = ФабрикаXDTO.Тип("KDL", ИмяТипа);
	
	Попытка
		ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTORoot);
	Исключение
		ШаблонСообщения = НСтр("ru='%1 Имя файла: %2.'");
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОшибкаЧтенияФайла, ИмяФайла);
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	
	ВозможныеТипыСвойств = Новый Соответствие;
	ВозможныеТипыСвойств.Вставить(ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string"), Новый ОписаниеТипов("Строка"));
	ВозможныеТипыСвойств.Вставить(ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "integer"), Новый ОписаниеТипов("Число"));
	ВозможныеТипыСвойств.Вставить(ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "decimal"), Новый ОписаниеТипов("Число"));
	
	КолонкиГруппировки = "Лаборатория";
	
	Для Каждого СвойствоКорня Из ДанныеXDTO.Свойства() Цикл
		
		СписокXDTO = Неопределено;
		
		Если ЭтоПрайс Тогда
			Если СвойствоКорня.Имя = "Организация" Тогда
				ДанныеXDTOОрганизация = ДанныеXDTO.ПолучитьXDTO(СвойствоКорня.Имя);
				Для Каждого СвойствоОрганизация Из ДанныеXDTOОрганизация.Свойства() Цикл
					Если СвойствоОрганизация.Имя = "Отправитель" Тогда
						ДанныеXDTOОтправитель = ДанныеXDTOОрганизация.ПолучитьXDTO(СвойствоОрганизация.Имя);
						Для Каждого СвойствоОтправитель Из ДанныеXDTOОтправитель.Свойства() Цикл
							Если СвойствоОтправитель.Имя = "Номенклатура" Тогда
								СписокXDTO = ДанныеXDTOОтправитель.ПолучитьСписок(СвойствоОтправитель);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе		
			СписокXDTO = ДанныеXDTO.ПолучитьСписок(СвойствоКорня);
		КонецЕсли;
		
		Если СписокXDTO = Неопределено Или СписокXDTO.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваXDTO = СписокXDTO.ВладеющееСвойство.Тип.Свойства;
		
		ПервыйОбъектXDTO = СписокXDTO[0];
		
		Для Каждого СвойствоXDTO Из СвойстваXDTO Цикл
			Если СвойствоXDTO.ВозможноПустое Тогда
				Если ПервыйОбъектXDTO.Получить(СвойствоXDTO) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ВозвращаемоеЗначение.Колонки.Добавить(СвойствоXDTO.Имя, ВозможныеТипыСвойств[СвойствоXDTO.Тип]);
			
			КолонкиГруппировки = КолонкиГруппировки + ", " + СвойствоXDTO.Имя;
			
		КонецЦикла;
		
		Для Каждого ОбъектXDTO Из СписокXDTO Цикл
			НоваяСтрока = ВозвращаемоеЗначение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектXDTO);
			КоллекцияСвойствXDTO = ОбъектXDTO.Свойства();
			Для Каждого СвойствоXDTO Из КоллекцияСвойствXDTO Цикл
				ИмяКолонки = СвойствоXDTO.Имя;
				Если ВозвращаемоеЗначение.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
					ЗначениеКолонки = НоваяСтрока[ИмяКолонки];
					Если ТипЗнч(ЗначениеКолонки) = Тип("Строка") Тогда
						ЗначениеКолонки = СтрЗаменить(СокрЛП(ЗначениеКолонки), Символы.ПС, " ");
						НоваяСтрока[ИмяКолонки] = ЗначениеКолонки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
	ВозвращаемоеЗначение.ЗаполнитьЗначения(СтруктураПараметров.Лаборатория, "Лаборатория");
	
	ВозвращаемоеЗначение.Свернуть(КолонкиГруппировки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьФорматированиеXML(СтрокаXML, ИмяФайла, СообщенияОбОшибках = Неопределено)
	
	Результат = "";
	
	Попытка
	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.КонфигурацияDOM.УстановитьПараметр("xml-declaration",			Истина);
		ЗаписьDOM.КонфигурацияDOM.УстановитьПараметр("discard-default-content",	Истина);
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
		
		Результат = ЗаписьXML.Закрыть();
		
	Исключение
		ШаблонСообщения = НСтр("ru='Ошибка при форматировании xml-файла: %1.'");
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, СтрШаблон(ШаблонСообщения, ИмяФайла));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьПараметрыЗабора(Лаборатория) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЛабораторияСервер.ЗагрузитьПараметрыЗабораИзВнутреннихМакетов(Перечисления.ВнешниеЛаборатории.КДЛ, Ложь); // Только если в базе еще нет параметров (Ложь).
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыЗабораАнализовIDПараметров.ID КАК ID,
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка.Наименование КАК Наименование,
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка.ТипЗначения КАК ТипЗначения,
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
	|ГДЕ
	|	ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.КДЛ)"
	;
	
	ПараметрыКДЛ = Запрос.Выполнить().Выгрузить();
	ПараметрыКДЛ.Колонки.Добавить("ТипЗначенияПредставление");
	
	Для Каждого СтрПараметрыКДЛ Из ПараметрыКДЛ Цикл
		СтрПараметрыКДЛ.ТипЗначенияПредставление = Строка(СтрПараметрыКДЛ.ТипЗначения);
		Если СтрПараметрыКДЛ.ТипЗначенияПредставление = "Строка" Тогда 
			СтрПараметрыКДЛ.ТипЗначенияПредставление = "Текст";
		ИначеЕсли СтрПараметрыКДЛ.ТипЗначенияПредставление = "Значения параметров забора"
			Или СтрПараметрыКДЛ.ТипЗначенияПредставление = "Булево"
		Тогда
			СтрПараметрыКДЛ.ТипЗначенияПредставление = "Выбор:";
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КДЛ_ДопИнформация.ГруппаДополнительнойИнформации КАК ГруппаДополнительнойИнформации,
	|	ВЫРАЗИТЬ(КДЛ_ДопИнформация.НаименованиеПоля КАК СТРОКА(150)) КАК НаименованиеПоля,
	|	КДЛ_ДопИнформация.ТипДанных КАК ТипДанных,
	|	КДЛ_ДопИнформация.Тег КАК Тег
	|ИЗ
	|	РегистрСведений.КДЛ_ДопИнформация КАК КДЛ_ДопИнформация
	|ГДЕ
	|	КДЛ_ДопИнформация.Лаборатория = &Лаборатория"
	;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	РезультатСвернут = Результат.СкопироватьКолонки("НаименованиеПоля, ТипДанных");
	
	Для Каждого СтрокаРезультат Из Результат Цикл
		ID = СокрЛП(СтрокаРезультат.ГруппаДополнительнойИнформации) + "/" + СокрЛП(СтрокаРезультат.Тег);
		Если ЗначениеЗаполнено(ПараметрыКДЛ.Найти(ID, "ID")) Тогда
			Продолжить;
		Иначе
			Если СтрНайти(СтрокаРезультат.ТипДанных, "Выбор:") <> 0 Тогда
				ТипДанных = "Выбор:";
			Иначе
				ТипДанных = СокрЛП(СтрокаРезультат.ТипДанных);
			КонецЕсли;
			МассивРезультат = ПараметрыКДЛ.НайтиСтроки(Новый Структура("Наименование, ТипЗначенияПредставление",
				СокрЛП(СтрокаРезультат.НаименованиеПоля), ТипДанных));
			Если МассивРезультат.Количество() <> 0 Тогда
				СсылкаПВХПараметр = МассивРезультат[0].Ссылка;
				ПВХПараметрОбъект = СсылкаПВХПараметр.ПолучитьОбъект();
				НоваяСтрокаID = ПВХПараметрОбъект.IDПараметров.Добавить();
				НоваяСтрокаID.ID = ID;
				НоваяСтрокаID.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.КДЛ;
				Попытка
					ПВХПараметрОбъект.Записать();
				Исключение
				КонецПопытки;
			Иначе
				НоваяСтрокаРезультатСвернут = РезультатСвернут.Добавить();
				НоваяСтрокаРезультатСвернут.НаименованиеПоля = СтрокаРезультат.НаименованиеПоля;
				НоваяСтрокаРезультатСвернут.ТипДанных = СтрокаРезультат.ТипДанных;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РезультатСвернут.Свернуть("НаименованиеПоля, ТипДанных");
	
	Для Каждого СтрокаРезультатСвернут Из РезультатСвернут Цикл
		// Создаем параметры забора.
		МассивЗначенийПараметра = Новый Массив;
		
		НовыйПВХПараметр = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.СоздатьЭлемент();
		НовыйПВХПараметр.Наименование = СокрЛП(СтрокаРезультатСвернут.НаименованиеПоля);
			
		ТаблицаИДПараметров = Новый ТаблицаЗначений;
		ТаблицаИДПараметров.Колонки.Добавить("ID");
		ТаблицаИДПараметров.Колонки.Добавить("ВидЛаборатории");
		
		МассивГруппыДопИнфо = Результат.НайтиСтроки(Новый Структура("НаименованиеПоля, ТипДанных",
			СокрЛП(СтрокаРезультатСвернут.НаименованиеПоля), СокрЛП(СтрокаРезультатСвернут.ТипДанных)));
			
		Для Каждого ЭлементГруппыДопИнфо Из МассивГруппыДопИнфо Цикл 
			ID = СокрЛП(ЭлементГруппыДопИнфо.ГруппаДополнительнойИнформации) + "/" + СокрЛП(ЭлементГруппыДопИнфо.Тег);
			Если Не ЗначениеЗаполнено(ПараметрыКДЛ.Найти(ID, "ID")) Тогда
				НоваяСтрокаID = ТаблицаИДПараметров.Добавить();
				НоваяСтрокаID.ID = ID;
				НоваяСтрокаID.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.КДЛ;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаИДПараметров.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыйПВХПараметр.IDПараметров.Загрузить(ТаблицаИДПараметров);
			
		СписокТипов = Новый Массив;
		ТипДанных = СокрЛП(СтрокаРезультатСвернут.ТипДанных);
		Если ТипДанных = "Текст" Тогда
			СписокТипов.Добавить(Тип("Строка"));
		ИначеЕсли ТипДанных = "Число" Тогда 
			СписокТипов.Добавить(Тип("Число"));
		ИначеЕсли ТипДанных = "Дата" Тогда 
			СписокТипов.Добавить(Тип("Дата"));
		ИначеЕсли СтрНайти(ТипДанных, "Выбор:") <> 0 Тогда
			ТипДанныхПреобразован = СокрЛП(СтрЗаменить(ТипДанных, "Выбор:", ""));
			Если СтрНайти(ТипДанныхПреобразован, " либо ") = 0 Тогда
				Если СтрНайти(ТипДанныхПреобразован, ",") = 0 Тогда
					ТипДанныхПреобразован = СтрЗаменить(ТипДанныхПреобразован, " ", ",");
				КонецЕсли;
				ТипДанныхПреобразован = СтрЗаменить(ТипДанныхПреобразован, ",", " либо ");
			КонецЕсли;	
			МассивЗначенийПараметра = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				ТипДанныхПреобразован, " либо ", Истина, Истина);
			Если МассивЗначенийПараметра.Количество() = 2
				И (НРег(СокрЛП(МассивЗначенийПараметра[0])) = "да" Или НРег(СокрЛП(МассивЗначенийПараметра[0])) = "нет")
			Тогда 
				СписокТипов.Добавить(Тип("Булево"));
			Иначе 
				СписокТипов.Добавить(Тип("СправочникСсылка.ЗначенияПараметровЗабора"));	
			КонецЕсли;
		КонецЕсли;
		Если СписокТипов.Количество() > 0 Тогда
			ОписаниеСоставногоТипа = Новый ОписаниеТипов(СписокТипов);
			НовыйПВХПараметр.ТипЗначения = ОписаниеСоставногоТипа;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НовыйПВХПараметр.Записать();
			
		// Создаем значения параметра.
		Если СписокТипов.Найти(Тип("СправочникСсылка.ЗначенияПараметровЗабора")) <> Неопределено Тогда  
			Для Каждого Значение Из МассивЗначенийПараметра Цикл
				НовоеЗначениеПараметра = Справочники.ЗначенияПараметровЗабора.СоздатьЭлемент();
				НовоеЗначениеПараметра.Наименование = Значение;
				НовоеЗначениеПараметра.IDЗначения.Загрузить(ТаблицаИДПараметров);
				НовоеЗначениеПараметра.Владелец = НовыйПВХПараметр.Ссылка;
				НовоеЗначениеПараметра.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем отдельный параметр, отсутствующий в справочниках, для заполнения общего параметра/тэга <Doctor> в заказе.
    ID_Doctor = ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию();
	СтрокаПараметр = ПараметрыКДЛ.Найти(ID_Doctor, "ID");
	Если СтрокаПараметр = Неопределено Тогда
		ПВХПараметр_Doctor = ПланыВидовХарактеристик.ПараметрыЗабораАнализов.СоздатьЭлемент();
		ПВХПараметр_Doctor.Наименование = НСтр("ru='Направивший врач (общий для всех анализов КДЛ в заказе)'");
		ПВХПараметр_Doctor.ТипЗначения = Новый ОписаниеТипов("Строка");
		
		СтрокаIDПараметров = ПВХПараметр_Doctor.IDПараметров.Добавить();
		СтрокаIDПараметров.ВидЛаборатории = Перечисления.ВнешниеЛаборатории.КДЛ;
		СтрокаIDПараметров.ID = ID_Doctor;
		
		ПВХПараметр_Doctor.Записать();
	КонецЕсли;

	ЛабораторияСервер.ЗагрузитьСведенияОПериодеПодстановкиЗначенийПараметровЗаполнения("КДЛ");
	
КонецПроцедуры

Процедура ЗаполнитьПоэтапныеИсследования(Лаборатория) 

	МассивЭтапов = Новый Массив;
	
	МассивИсследований = Новый Массив;
	МассивИсследований.Добавить("4.4.A1.205");
	МассивИсследований.Добавить("4.4.D2.205");
	МассивИсследований.Добавить("4.4.D3.205");
	
	МассивЭтапов.Добавить(Новый Структура("ГруппаИсследований, МассивИсследований", 1, МассивИсследований));
	
	МассивИсследований = Новый Массив;
	МассивИсследований.Добавить("7.6.A1.201");
	МассивИсследований.Добавить("7.6.D1.201");
	МассивИсследований.Добавить("7.6.D2.201");
	
	МассивЭтапов.Добавить(Новый Структура("ГруппаИсследований, МассивИсследований", 2, МассивИсследований));
	
	МассивИсследований = Новый Массив;
	МассивИсследований.Добавить("7.6.A2.201");
	МассивИсследований.Добавить("7.6.D3.201");
	МассивИсследований.Добавить("7.6.D4.201");
	
	МассивЭтапов.Добавить(Новый Структура("ГруппаИсследований, МассивИсследований", 3, МассивИсследований));
	
	ДобавитьПоэтапныеИсследования(Лаборатория, МассивЭтапов);
	
КонецПроцедуры

Процедура ДобавитьПоэтапныеИсследования(Лаборатория, МассивЭтапов)
	
	Для Каждого ЭлементЭтап Из МассивЭтапов Цикл 
	
		НаборЗаписей = РегистрыСведений.КДЛ_ПоэтапныеИсследования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
		НаборЗаписей.Отбор.ГруппаИсследований.Установить(ЭлементЭтап.ГруппаИсследований);
		
		Этап = 1;
		
		Для Каждого ЭлементИсследование Из ЭлементЭтап.МассивИсследований Цикл 
			Запись = НаборЗаписей.Добавить();
			Запись.Лаборатория = Лаборатория;
			Запись.ГруппаИсследований = ЭлементЭтап.ГруппаИсследований;
			Запись.КодИсследования = ЭлементИсследование;
			Запись.Этап = Этап;
			Этап = Этап + 1;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеИсследований(ДанныеИсследований, Лаборатория)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеИсследований) Тогда
		Возврат;	
	КонецЕсли;
	
	МассивНаУдаление = Новый Массив;
	
	НаборЗаписей = РегистрыСведений.КДЛ_Исследования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Выбран() Тогда
		Для Каждого Запись Из НаборЗаписей Цикл
			СтрокаИсследование = ДанныеИсследований.Найти(Запись.Код, "Код");
			Если СтрокаИсследование <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Запись, СтрокаИсследование, "Наименование, СрокВыполнения, ГруппаДополнительнойИнформации");
			КонецЕсли;
			Если ПустаяСтрока(Запись.Наименование) Тогда
				МассивНаУдаление.Добавить(Запись.Код);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
	Попытка
		НаборЗаписей.Записать(Истина);
		КДЛ_ИсследованияЗапись = РегистрыСведений.КДЛ_Исследования.СоздатьМенеджерЗаписи();
		Для Каждого ЭлементКод Из МассивНаУдаление Цикл
			КДЛ_ИсследованияЗапись.Лаборатория = Лаборатория;
			КДЛ_ИсследованияЗапись.Код = ЭлементКод;
			КДЛ_ИсследованияЗапись.Прочитать();
			КДЛ_ИсследованияЗапись.Удалить();
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ШаблонСтроки = НСтр("ru='Ошибка записи в регистр сведений ""(КДЛ-лаборатории) Исследования"": %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ОписаниеОшибки);
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры	

Процедура УстановитьЦеныНоменклатурыИсследований(Лаборатория)
	
	НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	
	Если НастройкаВзаимодействия = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Прейскурант = НастройкаВзаимодействия.Прейскурант;
	Если Не ЗначениеЗаполнено(Прейскурант) Тогда 
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	КДЛ_Исследования.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ПО КДЛ_Исследования.Лаборатория = НоменклатураАнализов.Лаборатория
	|			И КДЛ_Исследования.Код = НоменклатураАнализов.ID
	|			И (КДЛ_Исследования.Лаборатория = &Лаборатория)
	|			И (КДЛ_Исследования.Цена > 0)"
	;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ЛабораторияСервер.УстановитьЦеныНоменклатурыИсследований(Результат.Выгрузить(), ТекущаяДатаСеанса(), Прейскурант, Лаборатория);
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает группу номенклатуры анализа.
//
// Параметры:
//  ГруппаНоменклатурыАнализов	 - СправочникСсылка.Номенклатура - группа загрузки номенклатуры анализов.   
//  Наименование				 - Строка - наименование группы номенклатуры анализа. 
// 
// Возвращаемое значение:
//   - СправочникСсылка.Номенклатура
//
Функция ПолучитьГруппуНоменклатурыАнализа(ГруппаНоменклатурыАнализов, Наименование) Экспорт
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат ГруппаНоменклатурыАнализов;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель" , ГруппаНоменклатурыАнализов);
	Запрос.УстановитьПараметр("Наименование" , СокрЛП(Наименование));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.Родитель = &Родитель
	|	И Номенклатура.Наименование = &Наименование"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		
		НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();
		НоваяГруппа.Наименование = Наименование;
		НоваяГруппа.Родитель = ГруппаНоменклатурыАнализов;
		НоваяГруппа.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат НоваяГруппа.Ссылка;
	КонецЕсли;
	
КонецФункции

// Получает сроки выполнения для номенклатуры исследований из загруженной справочной информации по лаборатории.
//
// Параметры:
//  СрокиВыполненияИсследований - ТаблицаЗначений:
//  	* Лаборатория - СправочникСсылка.Лаборатории
//  	* Исследование - СправочникСсылка.Номенклатура
//  	* СрокВыполнения - Строка
//  ИсследованияЛаборатории - ТаблицаЗначений:
//  	* НомерСтроки - Число
//  	* Номенклатура - СправочникСсылка.Номенклатура
//  	* Лаборатория - СправочникСсылка.Лаборатории
//
Процедура ПолучитьСрокиВыполненияИсследований(СрокиВыполненияИсследований, ИсследованияЛаборатории) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ИсследованияЛаборатории);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ ИсследованияЛаборатории
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсследованияЛаборатории.НомерСтроки КАК НомерСтроки,
	|	ИсследованияЛаборатории.Лаборатория КАК Лаборатория,
	|	ИсследованияЛаборатории.Номенклатура КАК Исследование,
	|	КДЛ_Исследования.СрокВыполнения КАК СрокВыполнения
	|ИЗ
	|	ИсследованияЛаборатории КАК ИсследованияЛаборатории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
	|			ПО НоменклатураАнализов.ID = КДЛ_Исследования.Код
	|				И НоменклатураАнализов.Лаборатория = КДЛ_Исследования.Лаборатория
	|		ПО ИсследованияЛаборатории.Номенклатура = НоменклатураАнализов.Номенклатура
	|			И ИсследованияЛаборатории.Лаборатория = НоменклатураАнализов.Лаборатория
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрСрокиВыполненияИсследований = СрокиВыполненияИсследований.Добавить();
		СтрСрокиВыполненияИсследований.Лаборатория = Строка(Выборка.Лаборатория);
		СтрСрокиВыполненияИсследований.Исследование = Строка(Выборка.Исследование);
		СрокВыполнения = ?(Выборка.СрокВыполнения <> 0, Выборка.СрокВыполнения, НСтр("ru='нет данных'"));
		СтрСрокиВыполненияИсследований.СрокВыполнения = Строка(СрокВыполнения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьИсключенныеИсследования(Лаборатория)
	
	Цены = ТаблицаЦенАнализов(Лаборатория);
	ЛабораторияСервер.ОпределитьИсключенныеИсследования(Лаборатория, Цены);
	
КонецПроцедуры

Функция ПолучитьФайлыСправочников(Лаборатория, НаименованияСправочников, СообщенияОбОшибках = Неопределено)
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОтсутствуетНастройка;
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;

	АдресСайта  = СтрЗаменить(НРег(НастройкиВзаимодействия.FTPСоединениеПуть), "ftp://", "");
	Порт        = ?(ЗначениеЗаполнено(НастройкиВзаимодействия.FTPСоединениеПорт), НастройкиВзаимодействия.FTPСоединениеПорт, 21);
	Логин       = НастройкиВзаимодействия.FTPСоединениеПользователь;
	Пароль      = НастройкиВзаимодействия.FTPСоединениеПароль;
	ИмяКаталога = "/Lists";
	
	Если ПустаяСтрока(АдресСайта) Или ПустаяСтрока(Логин) Или ПустаяСтрока(Пароль) Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ПустойПараметрПодключения;
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		FTPСоединение = ПолучитьFTPСоединение(АдресСайта, Порт, Логин, Пароль);
	Исключение
		СообщениеОбОшибке = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОшибкаПодключения;
		ШаблонСтроки = НСтр("ru='Произошла ошибка при подключении к FTP по причине: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, СообщениеОбОшибке);
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	// Инициализация обработки.
	ОбработкаТранспорта = ИнициализироватьОбработкуТранспорта(НастройкиВзаимодействия);
	ОбработкаТранспорта.FTPСоединениеПуть = АдресСайта + ИмяКаталога;
	ОбработкаТранспорта.Инициализация();
	ОбработкаТранспорта.ВыполнитьДействияПередОбработкойСообщения();
	
	НужныеФайлы = Новый Массив;
	Для Каждого Наименование Из НаименованияСправочников Цикл
		НужныеФайлы.Добавить(Наименование.Значение);
	КонецЦикла;
	
	// Получение списка файлов справочников.
	ФайлыСправочников = ОбработкаТранспорта.ПолучитьТекстыФайловКаталога(, НужныеФайлы.Количество(), FTPСоединение, НужныеФайлы);
	Если ФайлыСправочников = Неопределено Тогда
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, ОбработкаТранспорта.СтрокаСообщенияОбОшибке);
	Иначе
		Для Каждого ФайлСправочника Из ФайлыСправочников Цикл
			ФайлСправочника.ИмяФайла = НРег(ФайлСправочника.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФайлыСправочников;
	
КонецФункции

Функция ПолучитьНаименованияСправочников()
	
	Результат = Новый Соответствие;
	
	// Прайс, цены исследований.
	Результат.Вставить("Прайс", "price.xml");

	// Исследования.
	Результат.Вставить("Исследования", "tests.xml");
	
	// Биоматериалы и локусы.
	Результат.Вставить("Биоматериалы", "locuses.xml");
	
	// Контейнеры.
	Результат.Вставить("Контейнеры", "containers.xml");
	
	// Сопоставление исследований и биоматериалов.
	Результат.Вставить("БиоматериалыИсследований", "test+locus.xml");
	
	// Сопоставление биоматериалов и контейнеров.
	Результат.Вставить("БиоматериалыКонтейнеров", "locus+container.xml");
	
	// Группы дополнительной информации.
	Результат.Вставить("ДопИнформация", "optional.xml");
	
	// Тесты и методики.
	Результат.Вставить("Тесты", "methodics.xml");
	
	// Сопоставление исследований и методик.
	Результат.Вставить("Профили", "profiles.xml");
	
	// Приостановленные коды исследований.
	Результат.Вставить("СтопЛист", "stoplist.xml");
	
	// Описания исследований.
	Результат.Вставить("ОписанияИсследований", "testinfo.xml");
	
	// Медицинские услуги.
	Результат.Вставить("МедицинскиеУслуги", "testegisz.xml");
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьПериодыНедоступностиАнализов(Лаборатория, ТаблицаЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПериодыНедоступностиАнализов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Лаборатория.Установить(Лаборатория);
	
	Для Каждого СтрТаблицаЗаполнения Из ТаблицаЗаполнения Цикл
		
		// Код региона "5" означает, что ограничение действует для всех регионов.
		Если СтрТаблицаЗаполнения.КодРегиона = "5" Тогда
		
			Попытка
				Период = Дата(Лев(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СтрТаблицаЗаполнения.Период), 14));
			Исключение
				Продолжить;
			КонецПопытки;
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период = Период;
			Запись.Лаборатория = Лаборатория;
			Запись.ID = СтрТаблицаЗаполнения.ID;
			
			Попытка
				ДатаОкончания = Дата(Лев(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(СтрТаблицаЗаполнения.ДатаОкончания), 14));
			Исключение
				ДатаОкончания = Дата(1,1,1);
			КонецПопытки;
			
			Запись.ДатаОкончания = ДатаОкончания;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ШаблонСтроки = НСтр("ru='Ошибка записи в регистр сведений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ОписаниеОшибки);
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;

КонецФункции	

Процедура ЗагрузитьОписанияИсследований(Лаборатория, ТаблицаЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписиИсследования = РегистрыСведений.КДЛ_Исследования.СоздатьНаборЗаписей();
	ЗаписиИсследования.Отбор.Лаборатория.Установить(Лаборатория);
	ЗаписиИсследования.Прочитать();
	
	Если ЗаписиИсследования.Выбран() Тогда
		Для Каждого Запись Из ЗаписиИсследования Цикл
			СтрокаЗаполнение = ТаблицаЗаполнения.Найти(Запись.Код, "КодИсследования");
			Если СтрокаЗаполнение <> Неопределено Тогда
				Запись.ОписаниеДляКлиента = СокрЛП(СтрокаЗаполнение.ОписаниеДляКлиента);
				Запись.ОписаниеДляМедперсонала = СокрЛП(СтрокаЗаполнение.ОписаниеДляМедперсонала);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
	Попытка
		ЗаписиИсследования.Записать();
	Исключение
		ШаблонСтроки = НСтр("ru='Ошибка записи описаний исследований в регистр сведений ""(КДЛ-лаборатории) Исследования"": %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьОписанияИсследований(Лаборатория, МассивНоменклатуры = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.УстановитьПараметр("ПроверятьВсюНоменклатуру", ?(МассивНоменклатуры = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.ID КАК Код,
	|	НоменклатураАнализов.Номенклатура.Комментарий КАК ОписаниеДляМедперсонала,
	|	НоменклатураАнализов.Номенклатура.ПодготовкаКлиентаКСдачеАнализа КАК ОписаниеДляКлиента,
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ НоменклатураАнализов
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория = &Лаборатория
	|	И (&ПроверятьВсюНоменклатуру = ИСТИНА
	|			ИЛИ НоменклатураАнализов.Номенклатура В (&МассивНоменклатуры))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Код КАК Код,
	|	НоменклатураАнализов.ОписаниеДляМедперсонала КАК ОписаниеДляМедперсонала,
	|	НоменклатураАнализов.ОписаниеДляКлиента КАК ОписаниеДляКлиента,
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория
	|ИЗ
	|	НоменклатураАнализов КАК НоменклатураАнализов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КДЛ_Исследования.Код КАК Код,
	|	КДЛ_Исследования.ОписаниеДляМедперсонала КАК ОписаниеДляМедперсонала,
	|	КДЛ_Исследования.ОписаниеДляКлиента КАК ОписаниеДляКлиента
	|ИЗ
	|	НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
	|		ПО НоменклатураАнализов.Код = КДЛ_Исследования.Код
	|			И НоменклатураАнализов.Лаборатория = КДЛ_Исследования.Лаборатория
	|			И (НЕ(ПОДСТРОКА(КДЛ_Исследования.ОписаниеДляМедперсонала, 1, 1) = """"
	|					И ПОДСТРОКА(КДЛ_Исследования.ОписаниеДляКлиента, 1, 1) = """"))"
	;
	
	МассивРезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатураАнализов = МассивРезультатыЗапроса[1].Выгрузить();
	ТаблицаСправочникИсследования = МассивРезультатыЗапроса[2].Выгрузить();
	
	Для Каждого СтрокаИсследования Из ТаблицаСправочникИсследования Цикл
		СтрокаНоменклатура = ТаблицаНоменклатураАнализов.Найти(СтрокаИсследования.Код, "Код");
		Если СтрокаНоменклатура <> Неопределено Тогда
			Если СтрокаНоменклатура.ОписаниеДляМедперсонала = СтрокаИсследования.ОписаниеДляМедперсонала
				И СтрокаНоменклатура.ОписаниеДляКлиента = СтрокаИсследования.ОписаниеДляКлиента
			Тогда
				Продолжить;
			КонецЕсли;
			
			НоменклатураОбъект = СтрокаНоменклатура.Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.ПодготовкаКлиентаКСдачеАнализа = СтрокаИсследования.ОписаниеДляКлиента;
			НоменклатураОбъект.Комментарий = СтрокаИсследования.ОписаниеДляМедперсонала;
			
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьМедицинскиеУслугиДляИсследований(Лаборатория, ТаблицаЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписиИсследования = РегистрыСведений.КДЛ_Исследования.СоздатьНаборЗаписей();
	ЗаписиИсследования.Отбор.Лаборатория.Установить(Лаборатория);
	ЗаписиИсследования.Прочитать();
	
	Если ЗаписиИсследования.Выбран() Тогда
		Для Каждого Запись Из ЗаписиИсследования Цикл
			СтрокаЗаполнение = ТаблицаЗаполнения.Найти(Запись.Код, "КодИсследования");
			Если СтрокаЗаполнение <> Неопределено Тогда
				Запись.КодМедицинскойУслуги = СокрЛП(СтрокаЗаполнение.КодМедицинскойУслуги);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ЗаписиИсследования.Записать();
	Исключение
		ШаблонСтроки = НСтр("ru='Ошибка записи медицинских услуг в регистр сведений ""(КДЛ-лаборатории) Исследования"": %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию()
	
    Возврат "bit_kdl_order_doctor";
	
КонецФункции

#Область ОбработкаЗагрузкиСправочников

Функция ОбновитьПолучитьСправочникиИнтерактивнаяЗагрузка(Лаборатория, СообщенияОбОшибках = Неопределено) Экспорт
	
	ДанныеСправочников = Новый Структура;

	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОтключенаИнтеграция;
		ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, ТекстОшибки);
		Возврат ДанныеСправочников;
	КонецЕсли;
	
	// Обновление классификаторов.
	Если Не ОбновитьСправочникиЛаборатории(Лаборатория,, СообщенияОбОшибках) Тогда
		Возврат ДанныеСправочников;
	КонецЕсли;
	
	// Иерархия анализов лаборатории.
	ДеревоНоменклатуры = ПолучитьДанныеНоменклатурыАнализов(Лаборатория).ДеревоНоменклатуры;
	
	ДанныеСправочников.Вставить("ДеревоНоменклатуры", ДеревоНоменклатуры);
	ДанныеСправочников.Вставить("Цены", ТаблицаЦенАнализов(Лаборатория));
	
	Возврат ДанныеСправочников;
	
КонецФункции

Процедура ОчиститьСправочники(Лаборатория) Экспорт
	
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Биоматериалы");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Контейнеры");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Тесты");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_ДопИнформация");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Исследования");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_Профили");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_БиоматериалыИсследований");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_БиоматериалыКонтейнеров");
	ПерезаполнитьРегистрСведений(Лаборатория, "КДЛ_ПоэтапныеИсследования");
	ПерезаполнитьРегистрСведений(Лаборатория, "ПериодыНедоступностиАнализов");
	
КонецПроцедуры

Процедура ПриСохраненииДанныхНоменклатуры(Лаборатория, ОбработаннаяНоменклатура) Экспорт
	
	ЗаполнитьОписанияИсследований(Лаборатория, ОбработаннаяНоменклатура);
	
КонецПроцедуры

// Обновляемые реквизиты номенклатуры при загрузке.
// 
// Возвращаемое значение:
//  Массив - имена реквизитов элементов справочника Номенклатура.
//
Функция ОбновляемыеРеквизитыНоменклатурыПриЗагрузке() Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("НоменклатураМедицинскихУслуг");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает структуру с данными номенклатуры анализов для КДЛ-лабораторий.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории - лаборатория, для которой получаем данные номенклатуры анализов.   
// 
// Возвращаемое значение:
//   - Структура:
//   	* ДеревоНоменклатуры - ДеревоЗначений
//
Функция ПолучитьДанныеНоменклатурыАнализов(Лаборатория)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("ДеревоНоменклатуры");
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	ДеревоНоменклатуры.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоНоменклатуры.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	ДеревоНоменклатуры.Колонки.Добавить("НоменклатураМедицинскихУслуг", Новый ОписаниеТипов("СправочникСсылка.НоменклатураМедицинскихУслуг"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КДЛ_Исследования.Код КАК Код,
	|	ВЫРАЗИТЬ(КДЛ_Исследования.Наименование КАК СТРОКА(1024)) КАК Наименование,
	|	КДЛ_Исследования.КодМедицинскойУслуги КАК КодМедицинскойУслуги,
	|	ВЫРАЗИТЬ(КДЛ_Исследования.Раздел КАК СТРОКА(150)) КАК НаименованиеГруппы
	|ПОМЕСТИТЬ Исследования
	|ИЗ
	|	РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
	|ГДЕ
	|	КДЛ_Исследования.Лаборатория = &Лаборатория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исследования.Код КАК Код,
	|	Исследования.Наименование КАК Наименование,
	|	Исследования.КодМедицинскойУслуги КАК КодМедицинскойУслуги,
	|	Исследования.НаименованиеГруппы КАК НаименованиеГруппы
	|ИЗ
	|	Исследования КАК Исследования
	|ГДЕ
	|	Исследования.Наименование <> """"
	|	И Исследования.Код <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеГруппы,
	|	Наименование
	|ИТОГИ
	|	МАКСИМУМ(Код),
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(КодМедицинскойУслуги)
	|ПО
	|	НаименованиеГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураМедицинскихУслуг.Код КАК КодНМУ,
	|	НоменклатураМедицинскихУслуг.Ссылка КАК НМУ
	|ИЗ
	|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
	|ГДЕ
	|	НЕ НоменклатураМедицинскихУслуг.ЭтоГруппа
	|	И НЕ НоменклатураМедицинскихУслуг.ПометкаУдаления
	|	И НЕ НоменклатураМедицинскихУслуг.Архив
	|	И НоменклатураМедицинскихУслуг.Код <> """""
	;
	
	МассивРезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаГруппы = МассивРезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаСправочникНМУ = МассивРезультатыЗапроса[2].Выгрузить();
	
	Пока ВыборкаГруппы.Следующий() Цикл
		НаименованиеГруппы = ВыборкаГруппы.НаименованиеГруппы;
		СтрокаГруппы = ДеревоНоменклатуры.Строки.Добавить();
		СтрокаГруппы.ЭтоГруппа = Истина;
		СтрокаГруппы.Наименование = НаименованиеГруппы;
		ВыборкаИсследования = ВыборкаГруппы.Выбрать();
		Пока ВыборкаИсследования.Следующий() Цикл
			КодИсследования = ВыборкаИсследования.Код;
			НаименованиеИсследования = ВыборкаИсследования.Наименование;
			
			Если ПустаяСтрока(КодИсследования) Или ПустаяСтрока(НаименованиеИсследования) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаНоменклатуры = СтрокаГруппы.Строки.Добавить();
			СтрокаНоменклатуры.Наименование	= НаименованиеИсследования;
			СтрокаНоменклатуры.Код = КодИсследования;
			
			Если Не ПустаяСтрока(ВыборкаИсследования.КодМедицинскойУслуги) Тогда
				СтрокаСправочникНМУ = ТаблицаСправочникНМУ.Найти(ВыборкаИсследования.КодМедицинскойУслуги, "КодНМУ");
				Если СтрокаСправочникНМУ <> Неопределено Тогда
					СтрокаНоменклатуры.НоменклатураМедицинскихУслуг = СтрокаСправочникНМУ.НМУ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Результат.ДеревоНоменклатуры = ДеревоНоменклатуры;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЦенАнализов(Лаборатория)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КДЛ_Исследования.Код КАК Код,
	|	КДЛ_Исследования.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
	|ГДЕ
	|	КДЛ_Исследования.Лаборатория = &Лаборатория
	|	И КДЛ_Исследования.Код <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цены = ЛабораторияСервер.ПустаяТаблицаЦен();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Цены.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Цены;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КешНСИ

Процедура ЗаполнитьКэшНСИЛаборатории() Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		Возврат;
	КонецЕсли;
	
	КэшНСИЛаборатории = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Номенклатура.Представление КАК ПредставлениеНоменклатуры,
	|	НоменклатураАнализов.Номенклатура.Комментарий КАК НоменклатураКомментарий,
	|	НоменклатураАнализов.Номенклатура.Родитель КАК Группа,
	|	НоменклатураАнализов.ID КАК ИД
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
	|		ПО НоменклатураАнализов.Лаборатория = КДЛ_Исследования.Лаборатория
	|			И НоменклатураАнализов.ID = КДЛ_Исследования.Код
	|ГДЕ
	|	НоменклатураАнализов.Лаборатория.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.КДЛ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИД,
	|	ПредставлениеНоменклатуры"
	;
	
	НоменклатураАнализов = Запрос.Выполнить().Выгрузить();
	КэшНСИЛаборатории.Вставить("НоменклатураАнализов", ОбщегоНазначения.ТаблицаЗначенийВМассив(НоменклатураАнализов));
	КэшНСИЛаборатории.Вставить("КДЛ_ПравилаАнализов", ЗаполнитьКешНСИ_ПравилаАнализов(НоменклатураАнализов.ВыгрузитьКолонку("ИД")));
	
	// Получаем существующий кэш, либо создаем пустой.
	КэшНСИЛабораторий = ПараметрыСеанса.КешНСИЛабораторий.Получить();
	Если ТипЗнч(КэшНСИЛабораторий) <> Тип("Структура") Тогда
		КэшНСИЛабораторий = Новый Структура;
	КонецЕсли;
	
	// К существующему кэшу добавляем кэш КДЛ.
	КэшНСИЛабораторий.Вставить("КДЛ", КэшНСИЛаборатории);
	// Сохраняем старый кэш + кэш КДЛ в параметры сеанса.
	ПараметрыСеанса.КешНСИЛабораторий = Новый ХранилищеЗначения(КэшНСИЛабораторий);
	
КонецПроцедуры

Функция ЗаполнитьКешНСИ_ПравилаАнализов(мсИдАнализов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдАнализов", мсИдАнализов);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	КДЛ_БиоматериалыИсследований.Лаборатория КАК Лаборатория,
	|	КДЛ_БиоматериалыИсследований.КодБиоматериала КАК КодБиоматериала,
	|	КДЛ_БиоматериалыИсследований.КодИсследования КАК КодИсследования,
	|	КДЛ_БиоматериалыИсследований.Обязательность КАК ОбязательностьБиоматериала,
	|	КДЛ_БиоматериалыИсследований.Заполнение КАК Заполнение,
	|	КДЛ_БиоматериалыКонтейнеров.КодКонтейнера КАК КодКонтейнера,
	|	КДЛ_БиоматериалыКонтейнеров.Обязательность КАК ОбязательностьКонтейнера
	|ПОМЕСТИТЬ Биоматериалы
	|ИЗ
	|	РегистрСведений.КДЛ_БиоматериалыИсследований КАК КДЛ_БиоматериалыИсследований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_БиоматериалыКонтейнеров КАК КДЛ_БиоматериалыКонтейнеров
	|		ПО КДЛ_БиоматериалыИсследований.Лаборатория = КДЛ_БиоматериалыКонтейнеров.Лаборатория
	|			И КДЛ_БиоматериалыИсследований.КодБиоматериала = КДЛ_БиоматериалыКонтейнеров.КодБиоматериала
	|			И (КДЛ_БиоматериалыИсследований.КодИсследования В (&ИдАнализов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Биоматериалы.Лаборатория КАК Лаборатория,
	|	Биоматериалы.КодИсследования КАК ИдАнализа,
	|	Биоматериалы.КодБиоматериала КАК ИДБиоматериала,
	|	ВЫРАЗИТЬ(КДЛ_Биоматериалы.Наименование КАК СТРОКА(250)) КАК Биоматериал,
	|	КДЛ_Биоматериалы.Тип КАК ТипБиоматериала,
	|	Биоматериалы.ОбязательностьБиоматериала КАК ОбязательностьБиоматериала,
	|	Биоматериалы.Заполнение КАК Заполнение,
	|	Биоматериалы.КодКонтейнера КАК ИДКонтейнера,
	|	ВЫРАЗИТЬ(КДЛ_Контейнеры.Наименование КАК СТРОКА(250)) КАК Контейнер,
	|	Биоматериалы.ОбязательностьКонтейнера КАК ОбязательностьКонтейнера,
	|	ЛОЖЬ КАК Обязательность
	|ИЗ
	|	Биоматериалы КАК Биоматериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Биоматериалы КАК КДЛ_Биоматериалы
	|		ПО Биоматериалы.Лаборатория = КДЛ_Биоматериалы.Лаборатория
	|			И Биоматериалы.КодБиоматериала = КДЛ_Биоматериалы.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Контейнеры КАК КДЛ_Контейнеры
	|		ПО Биоматериалы.Лаборатория = КДЛ_Контейнеры.Лаборатория
	|			И Биоматериалы.КодКонтейнера = КДЛ_Контейнеры.Код"
	;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТаблицаРезультат Из ТаблицаРезультат Цикл
		Если СтрТаблицаРезультат.ОбязательностьБиоматериала И СтрТаблицаРезультат.ОбязательностьКонтейнера Тогда
			// Правило (биоматериал + контейнер) для анализа определяется обязательным,
			// если биоматериал и контейнер обязательные.
			СтрТаблицаРезультат.Обязательность = Истина;
		Иначе
			Отбор = Новый Структура("Лаборатория, ИдАнализа, ИДБиоматериала");
			ЗаполнитьЗначенияСвойств(Отбор, СтрТаблицаРезультат);
			ТаблицаКонтейнерыБиоматериала = ТаблицаРезультат.Скопировать(Отбор);
			ТаблицаКонтейнерыБиоматериала.Свернуть("Лаборатория, ИдАнализа, ИДБиоматериала, ИДКонтейнера");
			КоличествоКонтейнеровБиоматериала = ТаблицаКонтейнерыБиоматериала.Количество();
			Если СтрТаблицаРезультат.ОбязательностьБиоматериала Тогда
				// Правило (биоматериал + контейнер) для анализа определяется обязательным,
				// если биоматериал обязательный с одним контейнером.
				Если КоличествоКонтейнеровБиоматериала = 1 Тогда
					СтрТаблицаРезультат.Обязательность = Истина;
				КонецЕсли;
			ИначеЕсли Не СтрТаблицаРезультат.ОбязательностьБиоматериала Тогда
				// Правило (биоматериал + контейнер) для анализа определяется обязательным,
				// если для анализа назначен только один необязательный биоматериал
				// с одним контейнером либо контейнер для биоматериала обязательный.
				Отбор.Удалить("ИДБиоматериала");
				ТаблицаБиоматериалыАнализа = ТаблицаРезультат.Скопировать(Отбор);
				ТаблицаБиоматериалыАнализа.Свернуть("Лаборатория, ИдАнализа, ИДБиоматериала");
				КоличествоБиоматериаловАнализа = ТаблицаБиоматериалыАнализа.Количество();
				Если КоличествоБиоматериаловАнализа = 1 Тогда
					Если КоличествоКонтейнеровБиоматериала = 1 Или СтрТаблицаРезультат.ОбязательностьКонтейнера Тогда
						СтрТаблицаРезультат.Обязательность = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("Лаборатория, Обязательность Убыв, Биоматериал, Контейнер");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРезультат);
	
КонецФункции

#КонецОбласти

#Область ЗаборАнализа

// Получить параметры заборов для правила/массива правил
//
// Параметры:
//  ПравилаЗабора - Строка с ID правила забора или Массив таких строк.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьПараметрыЗабора(ПравилаЗабора) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Параметр", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыЗабораАнализов"));
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеПоУмолчанию");
	Результат.Колонки.Добавить("ИдПараметра", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево"));
	
	Если ТипЗнч(ПравилаЗабора) = Тип("Массив") Тогда
		мсНоменклатура = Новый Массив;
		Для Каждого ЭлементПравилоЗабора Из ПравилаЗабора Цикл 
			Если ТипЗнч(ЭлементПравилоЗабора) = Тип("СправочникСсылка.Номенклатура") Тогда 
				мсНоменклатура.Добавить(ЭлементПравилоЗабора);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка КАК Параметр,
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка.Наименование КАК Наименование,
	|	ПараметрыЗабораАнализовIDПараметров.ID КАК ИдПараметра,
	|	ПараметрыЗабораАнализовIDПараметров.Ссылка.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
	|ГДЕ
	|	ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.КДЛ)
	|	И НЕ ПараметрыЗабораАнализовIDПараметров.Ссылка.ПометкаУдаления"
	;
	ТаблицаПараметры = Запрос.Выполнить().Выгрузить();
	
	// Вначале добавляем общий необязательный параметр забора, не зависящий от конкретных исследований в заборе
	// и предназначенный для заполнения общего тэга <Doctor> в заказе.
	// Далее добавляем параметры забора, назначенные для конкретных исследований в справочной информации от лаборатории КДЛ.
    ID_Doctor = ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию();
	СтрокаПараметр = ТаблицаПараметры.Найти(ID_Doctor, "ИдПараметра");
	Если СтрокаПараметр <> Неопределено Тогда
		СтрокаРезультат = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаПараметр);
		СтрокаРезультат.Обязательный = Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КДЛ_Исследования.Лаборатория КАК Лаборатория,
	|	КДЛ_Исследования.ГруппаДополнительнойИнформации КАК ГруппаДополнительнойИнформации
	|ПОМЕСТИТЬ ГруппыДопИнформации
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
	|		ПО НоменклатураАнализов.Лаборатория = КДЛ_Исследования.Лаборатория
	|			И НоменклатураАнализов.ID = КДЛ_Исследования.Код
	|			И (НоменклатураАнализов.Номенклатура В (&Номенклатура))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КДЛ_ДопИнформация.НаименованиеПоля КАК НаименованиеПоля,
	|	ГруппыДопИнформации.ГруппаДополнительнойИнформации КАК ГруппаДопИнформации,
	|	КДЛ_ДопИнформация.Тег КАК Тег,
	|	КДЛ_ДопИнформация.Обязательность КАК Обязательность
	|ИЗ
	|	ГруппыДопИнформации КАК ГруппыДопИнформации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_ДопИнформация КАК КДЛ_ДопИнформация
	|		ПО ГруппыДопИнформации.ГруппаДополнительнойИнформации = КДЛ_ДопИнформация.ГруппаДополнительнойИнформации
	|			И ГруппыДопИнформации.Лаборатория = КДЛ_ДопИнформация.Лаборатория"
	;
	Запрос.УстановитьПараметр("Номенклатура", мсНоменклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		ТаблицаДопИнформация = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаПараметры Из ТаблицаПараметры Цикл
			ИдПараметра = СтрокаПараметры.ИдПараметра;	
			ПозицияРазделителя = СтрНайти(ИдПараметра, "/");
			Если ПозицияРазделителя <> 0 Тогда  
				ГруппаДопИнформации = Лев(ИдПараметра, ПозицияРазделителя - 1);
				Тег = Прав(ИдПараметра, СтрДлина(ИдПараметра) - ПозицияРазделителя); 
				МассивДопИнформация = ТаблицаДопИнформация.НайтиСтроки(Новый Структура("ГруппаДопИнформации, Тег", ГруппаДопИнформации, Тег));
				Если МассивДопИнформация.Количество() <> 0 Тогда 
					СтрокаРезультат = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаПараметры);
					СтрокаРезультат.Обязательный = МассивДопИнформация[0].Обязательность;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	
КонецФункции

Процедура ПроверитьЗаполнениеЗабораАнализа(ДокументОбъект, Лаборатория, Отказ) Экспорт
	
	СообщениеОбОшибке	 = "";
	ОтборПравила		 = Новый Структура("КлючСтрокиИсследования");
	
	Для Каждого СтрокаИсследования Из ДокументОбъект.Исследования Цикл
		
		Если ЛабораторияСерверПовтИсп.ВидЛаборатории(СтрокаИсследования.Лаборатория) = Перечисления.ВнешниеЛаборатории.КДЛ Тогда
			ОтборПравила.КлючСтрокиИсследования = СтрокаИсследования.КлючСтроки;
			СтрокиПравил = ДокументОбъект.ПравилаВнешнихЛабораторий.НайтиСтроки(ОтборПравила);
			Если СтрокиПравил.Количество() = 0 Тогда
				Параметры = Новый Структура("Лаборатория, Номенклатура", СтрокаИсследования.Лаборатория, СтрокаИсследования.Номенклатура);
				Если Не ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(Параметры) Тогда
					ТекстОшибки = "В строке №" + СтрокаИсследования.НомерСтроки + " для исследования " + СтрокаИсследования.Номенклатура + " не выбрано правило выполнения анализа.";
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СообщениеОбОшибке, ТекстОшибки,Символы.ПС);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокиПравил) Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
	КонецЕсли;
		
КонецПроцедуры

Функция ЛабораторияИспользуетНоменклатуруАнализовБезПравилЗабора() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(Параметры) Экспорт
	
	Результат = Ложь; // Значение по умолчанию.
	
	Если Не(Параметры.Свойство("Лаборатория") И Параметры.Свойство("Номенклатура")) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Лаборатория = Параметры.Лаборатория;
	Номенклатура = Параметры.Номенклатура;
	
	КешНСИЛабораторий = ЛабораторияСервер.ПолучитьКешНСИЛабораторий();
	
	Если КешНСИЛабораторий = Неопределено Тогда
		ЛабораторияСервер.ЗаполнитьКэшНСИЛабораторий();
		КешНСИЛабораторий = ЛабораторияСервер.ПолучитьКешНСИЛабораторий();
	КонецЕсли;
	
	Если Не КешНСИЛабораторий.Свойство("КДЛ") Или Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Анализ Из КешНСИЛабораторий.КДЛ.НоменклатураАнализов Цикл
		Если Анализ.Номенклатура = Номенклатура И Анализ.Лаборатория = Лаборатория Тогда
			ДанныеКешаНоменклатуры = Анализ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеКешаНоменклатуры) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если КешНСИЛабораторий.КДЛ.КДЛ_ПравилаАнализов <> Неопределено Тогда
		
		Результат = Истина;
		
		Для Каждого эл Из КешНСИЛабораторий.КДЛ.КДЛ_ПравилаАнализов Цикл
			Если эл.ИдАнализа = ДанныеКешаНоменклатуры.ИД И эл.Лаборатория = Лаборатория Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьНоменклатуруАнализовБезПравилЗабораДляНесколькихЗаявокВОднуЛабораторию(Параметры) Экспорт
	
    МассивСообщения = Новый Массив;
	
	ДлинаНомераЗаявки = ДлинаНомераЗаявки();
	МассивНомераЗаявок = Новый Массив;
	
	Для Каждого КодПробы Из Параметры.КодыПроб Цикл
		НомерЗаявки = Лев(КодПробы, ДлинаНомераЗаявки);
		Если Не ПустаяСтрока(НомерЗаявки) И МассивНомераЗаявок.Найти(НомерЗаявки) = Неопределено Тогда
			МассивНомераЗаявок.Добавить(НомерЗаявки);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНомераЗаявок.Количество() > 1 Тогда
		
		Лаборатория = Параметры.Лаборатория;
		НоменклатураАнализовБезПравилЗабора = Новый Массив;
		
		Для Каждого Номенклатура Из Параметры.НоменклатураАнализов Цикл
			Если ЗначениеЗаполнено(Номенклатура)
				И ДляНоменклатурыАнализаНеПредусмотреныПравилаЗабора(Новый Структура("Лаборатория, Номенклатура", Лаборатория, Номенклатура))
			Тогда
				НоменклатураАнализовБезПравилЗабора.Добавить(Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
		Если НоменклатураАнализовБезПравилЗабора.Количество() > 0 Тогда
			
			СтрокаНомераЗаявок = "";
			Для Каждого НомерЗаявки Из МассивНомераЗаявок Цикл
				СтрокаНомераЗаявок = СтрокаНомераЗаявок + ?(Не ПустаяСтрока(СтрокаНомераЗаявок), ", ", "") + НомерЗаявки;
			КонецЦикла;
			
			СтрокаНоменклатура = "";
			Для Каждого Номенклатура Из НоменклатураАнализовБезПравилЗабора Цикл
				СтрокаНоменклатура = СтрокаНоменклатура + Символы.ПС + Символы.Таб + "-" + Строка(Номенклатура);
			КонецЦикла;
			
			ШаблонСтроки = НСтр("ru='Для лаборатории ""%1"" сформированы контейнеры нескольких заявок с номерами: %2.
				|При отправке в лабораторию в каждую заявку будут добавлены услуги без правил забора: %3'");
			МассивСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
				Лаборатория, СтрокаНомераЗаявок, СтрокаНоменклатура));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСообщения;
	
КонецФункции
	
#Область Преаналитика

Функция РаспределениеБиоматериаловПоКонтейнерам(ДанныеЗабора) Экспорт 
			
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Лаборатория", Новый ОписаниеТипов("СправочникСсылка.Лаборатории"));
	Результат.Колонки.Добавить("ЭтоКонтейнер", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("НомерКонтейнера", ТипЧисло);
	Результат.Колонки.Добавить("КодПробы", ТипСтрока);
	Результат.Колонки.Добавить("ИДПравила", ТипСтрока);
	Результат.Колонки.Добавить("КлючСтрокиИсследования", ТипЧисло);
	Результат.Колонки.Добавить("НомерСтроки", ТипСтрока);
	Результат.Колонки.Добавить("Биоматериал", ТипСтрока);
	Результат.Колонки.Добавить("БиоматериалПредставление", ТипСтрока);
	Результат.Колонки.Добавить("Контейнер", ТипСтрока);
	Результат.Колонки.Добавить("КонтейнерПредставление", ТипСтрока);
	Результат.Колонки.Добавить("ИдАнализа", ТипСтрока);
	Результат.Колонки.Добавить("УсловияХранения", ТипСтрока);
	Результат.Колонки.Добавить("УсловияТранспортировки", ТипСтрока);
	Результат.Колонки.Добавить("ЦветКонтейнера", ТипСтрока);
	Результат.Колонки.Добавить("ПредставлениеАнализа", ТипСтрока);
	
	ПараметрыОтбораПустаяЛаборатория = Новый Структура;
	ПараметрыОтбораПустаяЛаборатория.Вставить("Лаборатория", Справочники.Лаборатории.ПустаяСсылка());
	
	ИсследованияБезЛаборатории = ДанныеЗабора.Исследования.НайтиСтроки(ПараметрыОтбораПустаяЛаборатория);
	
	Для Каждого СтрокаИсследованияБезЛаборатории Из ИсследованияБезЛаборатории Цикл
		ДанныеЗабора.Исследования.Удалить(СтрокаИсследованияБезЛаборатории);
	КонецЦикла;
	
	ТаблицаНоменклатура = ДанныеЗабора.Исследования.Скопировать(, "Номенклатура, Лаборатория, КлючСтроки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатура", ТаблицаНоменклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Лаборатория КАК Лаборатория,
	|	ТаблицаНоменклатура.КлючСтроки КАК КлючСтрокиИсследования
	|ПОМЕСТИТЬ НоменклатураЛабораторий
	|ИЗ
	|	&ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.ID КАК КодАнализа,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураЛабораторий.КлючСтрокиИсследования КАК КлючСтрокиИсследования
	|ПОМЕСТИТЬ НоменклатураИКодыИсследований
	|ИЗ
	|	НоменклатураЛабораторий КАК НоменклатураЛабораторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|		ПО НоменклатураЛабораторий.Номенклатура = НоменклатураАнализов.Номенклатура
	|			И НоменклатураЛабораторий.Лаборатория = НоменклатураАнализов.Лаборатория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураИКодыИсследований.Лаборатория КАК Лаборатория,
	|	НоменклатураИКодыИсследований.КлючСтрокиИсследования КАК КлючСтрокиИсследования,
	|	НоменклатураИКодыИсследований.Номенклатура КАК Номенклатура,
	|	НоменклатураИКодыИсследований.КодАнализа КАК КодАнализа,
	|	КДЛ_БиоматериалыИсследований.КодБиоматериала КАК КодБиоматериала,
	|	КДЛ_БиоматериалыИсследований.Обязательность КАК ОбязательностьБиоматериала,
	|	КДЛ_БиоматериалыИсследований.Заполнение КАК Заполнение,
	|	КДЛ_БиоматериалыКонтейнеров.КодКонтейнера КАК КодКонтейнера,
	|	КДЛ_БиоматериалыКонтейнеров.Обязательность КАК ОбязательностьКонтейнера
	|ПОМЕСТИТЬ БиоматериалыИКонтейнеры
	|ИЗ
	|	НоменклатураИКодыИсследований КАК НоменклатураИКодыИсследований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_БиоматериалыИсследований КАК КДЛ_БиоматериалыИсследований
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_БиоматериалыКонтейнеров КАК КДЛ_БиоматериалыКонтейнеров
	|			ПО КДЛ_БиоматериалыИсследований.Лаборатория = КДЛ_БиоматериалыКонтейнеров.Лаборатория
	|				И КДЛ_БиоматериалыИсследований.КодБиоматериала = КДЛ_БиоматериалыКонтейнеров.КодБиоматериала
	|		ПО НоменклатураИКодыИсследований.Лаборатория = КДЛ_БиоматериалыИсследований.Лаборатория
	|			И НоменклатураИКодыИсследований.КодАнализа = КДЛ_БиоматериалыИсследований.КодИсследования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БиоматериалыИКонтейнеры.Лаборатория КАК Лаборатория,
	|	БиоматериалыИКонтейнеры.КлючСтрокиИсследования КАК КлючСтрокиИсследования,
	|	БиоматериалыИКонтейнеры.Номенклатура КАК Номенклатура,
	|	БиоматериалыИКонтейнеры.КодАнализа КАК КодАнализа,
	|	БиоматериалыИКонтейнеры.КодБиоматериала КАК КодБиоматериала,
	|	БиоматериалыИКонтейнеры.ОбязательностьБиоматериала КАК ОбязательностьБиоматериала,
	|	БиоматериалыИКонтейнеры.Заполнение КАК Заполнение,
	|	КДЛ_Биоматериалы.Наименование КАК Биоматериал,
	|	БиоматериалыИКонтейнеры.КодКонтейнера КАК КодКонтейнера,
	|	БиоматериалыИКонтейнеры.ОбязательностьКонтейнера КАК ОбязательностьКонтейнера,
	|	КДЛ_Контейнеры.Наименование КАК Контейнер
	|ИЗ
	|	БиоматериалыИКонтейнеры КАК БиоматериалыИКонтейнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Биоматериалы КАК КДЛ_Биоматериалы
	|		ПО БиоматериалыИКонтейнеры.Лаборатория = КДЛ_Биоматериалы.Лаборатория
	|			И БиоматериалыИКонтейнеры.КодБиоматериала = КДЛ_Биоматериалы.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Контейнеры КАК КДЛ_Контейнеры
	|		ПО БиоматериалыИКонтейнеры.Лаборатория = КДЛ_Контейнеры.Лаборатория
	|			И БиоматериалыИКонтейнеры.КодКонтейнера = КДЛ_Контейнеры.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КДЛ_ПоэтапныеИсследования.ГруппаИсследований КАК ГруппаИсследований,
	|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория
	|ИЗ
	|	НоменклатураЛабораторий КАК НоменклатураЛабораторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_ПоэтапныеИсследования КАК КДЛ_ПоэтапныеИсследования
	|			ПО НоменклатураАнализов.Лаборатория = КДЛ_ПоэтапныеИсследования.Лаборатория
	|				И НоменклатураАнализов.ID = КДЛ_ПоэтапныеИсследования.КодИсследования
	|		ПО НоменклатураЛабораторий.Номенклатура = НоменклатураАнализов.Номенклатура
	|			И НоменклатураЛабораторий.Лаборатория = НоменклатураАнализов.Лаборатория"
	;
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ПроверкаПравилаЗабора = ПакетЗапроса[3].Выгрузить();
	ПроверкаПоэтапныеИсследования = ПакетЗапроса[4].Выгрузить();
	
	СтрокаКолонки = "Лаборатория, КодБиоматериала, Биоматериал, Номенклатура, КлючСтрокиИсследования";
	ПроверкаПравилаЗабораБиоматериалы = ПроверкаПравилаЗабора.Скопировать(, СтрокаКолонки);
	ПроверкаПравилаЗабораБиоматериалы.Свернуть(СтрокаКолонки);
	
	НомерКонтейнера = 0;
	
	ТаблицаЛаборатории = ДанныеЗабора.Исследования.Скопировать(, "Лаборатория");
	ТаблицаЛаборатории.Свернуть("Лаборатория");
	МассивЛаборатории = ТаблицаЛаборатории.ВыгрузитьКолонку("Лаборатория");
	
	Для Каждого Лаборатория Из МассивЛаборатории Цикл
		
		ПараметрыОтбораЛаборатория = Новый Структура;
		ПараметрыОтбораЛаборатория.Вставить("Лаборатория", Лаборатория);
		
		МассивСообщений = Новый Массив;
		
		// Выводить ошибку при добавлении поэтапных исследований в один документ забора.
		// Т.к. запрещено использовать для поэтапных исследований контейнеры с одним номером заявки.
		ПроверкаПоэтапныеИсследованияЛаборатории = ПроверкаПоэтапныеИсследования.Скопировать(ПараметрыОтбораЛаборатория);
		ПроверкаГруппыИсследованийЛаборатории = ПроверкаПоэтапныеИсследованияЛаборатории.Скопировать(, "ГруппаИсследований");
		ПроверкаГруппыИсследованийЛаборатории.Свернуть("ГруппаИсследований");
		
		Для Каждого СтрокаПроверкаГруппыИсследованийЛаборатории Из ПроверкаГруппыИсследованийЛаборатории Цикл
			СтрокиПроверкаПоэтапныеИсследованияЛаборатории = ПроверкаПоэтапныеИсследованияЛаборатории.НайтиСтроки(
				Новый Структура("ГруппаИсследований", СтрокаПроверкаГруппыИсследованийЛаборатории.ГруппаИсследований));
			Если СтрокиПроверкаПоэтапныеИсследованияЛаборатории.Количество() > 1 Тогда
				НоменклатураДляСообщения = "";
				Для Каждого СтрокаПроверкаПоэтапныеИсследованияЛаборатории Из СтрокиПроверкаПоэтапныеИсследованияЛаборатории Цикл
					НоменклатураДляСообщения = НоменклатураДляСообщения + СтрШаблон("%1%2 -""%3""", Символы.ПС,
						Символы.Таб, Строка(СтрокаПроверкаПоэтапныеИсследованияЛаборатории.Номенклатура));
				КонецЦикла;
				ШаблонСтроки = НСтр("ru='необходимо разделить по разным документам забора поэтапные исследования: %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, НоменклатураДляСообщения);
				МассивСообщений.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		
		// Выводить ошибку, если для исследования не выбран обязательный биоматериал.
		// Ошибка может быть в том случае, когда для обязательного биоматериала назначены только необязательные контейнеры и их больше одного.
		ТаблицаИсследованияЛаборатории = ДанныеЗабора.Исследования.Скопировать(ПараметрыОтбораЛаборатория);
		
		Для Каждого СтрокаИсследования Из ТаблицаИсследованияЛаборатории Цикл
			
			ТаблицаПроверки = ПроверкаПравилаЗабора.Скопировать(
				Новый Структура("Номенклатура, КлючСтрокиИсследования",
				СтрокаИсследования.Номенклатура, СтрокаИсследования.КлючСтроки));
			ПравилаЗабораИсследование = ДанныеЗабора.ПравилаЗабора.Скопировать(
				Новый Структура("Пометка, КлючСтрокиИсследования", Истина, СтрокаИсследования.КлючСтроки));
			Если ПравилаЗабораИсследование.Количество() <> 0 И ТаблицаПроверки.Количество() <> 0 Тогда
				МассивБиоматериалыНеВыбраны = Новый Массив;
				
				Для Каждого ЭлементСтрокиПроверки Из ТаблицаПроверки Цикл
					
					Если ЭлементСтрокиПроверки.ОбязательностьБиоматериала Тогда
						Если ПравилаЗабораИсследование.Найти(ЭлементСтрокиПроверки.КодБиоматериала) = Неопределено
							И МассивБиоматериалыНеВыбраны.Найти(ЭлементСтрокиПроверки.КодБиоматериала) = Неопределено
						Тогда
							ШаблонСтроки = НСтр("ru='для исследования ""%1"" 
								|не выбран обязательный биоматериал ""%2""'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
								Строка(СтрокаИсследования.Номенклатура), ЭлементСтрокиПроверки.Биоматериал);
							МассивБиоматериалыНеВыбраны.Добавить(ЭлементСтрокиПроверки.КодБиоматериала);
							МассивСообщений.Добавить(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводить ошибку, если для биоматериала не выбран обязательный контейнер.
		// Ошибка может быть в том случае, когда для необязательного биоматериала назначены несколько обязательных контейнеров.
		СтрокиПроверкаПравилаЗабораБиоматериалы = ПроверкаПравилаЗабораБиоматериалы.НайтиСтроки(ПараметрыОтбораЛаборатория);
		
		Для Каждого СтрокаПроверка Из СтрокиПроверкаПравилаЗабораБиоматериалы Цикл
			
			ТаблицаПроверки = ПроверкаПравилаЗабора.Скопировать(
				Новый Структура("КодБиоматериала, КлючСтрокиИсследования",
				СтрокаПроверка.КодБиоматериала, СтрокаПроверка.КлючСтрокиИсследования));
			ПравилаЗабораБиоматериала = ДанныеЗабора.ПравилаЗабора.Скопировать(
				Новый Структура("Пометка, ИДБиоматериала, КлючСтрокиИсследования",
				Истина, СтрокаПроверка.КодБиоматериала, СтрокаПроверка.КлючСтрокиИсследования));
			Если ПравилаЗабораБиоматериала.Количество() <> 0 И ТаблицаПроверки.Количество() <> 0 Тогда
				
				Для Каждого ЭлементСтрокиПроверки Из ТаблицаПроверки Цикл
					
					Если ЭлементСтрокиПроверки.ОбязательностьКонтейнера Тогда
						Если ПравилаЗабораБиоматериала.Найти(ЭлементСтрокиПроверки.КодКонтейнера) = Неопределено Тогда
							ШаблонСтроки = НСтр("ru='у исследования ""%1"" 
								|для биоматериала ""%2"" не выбран обязательный контейнер ""%3""'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
								Строка(СтрокаПроверка.Номенклатура), СтрокаПроверка.Биоматериал, ЭлементСтрокиПроверки.Контейнер);
							МассивСообщений.Добавить(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если есть ошибки при распределении по контейнерам, выводим сообщение и прерываем распределение исследований лаборатории.
		Если МассивСообщений.Количество() <> 0 Тогда
			ШаблонСтроки = НСтр("ru='Ошибка при распределении исследований лаборатории %1: %2%3'");
			Для Каждого ЭлементСообщение Из МассивСообщений Цикл
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
					Строка(Лаборатория), Символы.ПС, ЭлементСообщение);
				ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		ТаблицаБиоматериалыКонтейнеры = Новый ТаблицаЗначений;
		ТаблицаБиоматериалыКонтейнеры.Колонки.Добавить("Биоматериал", ТипСтрока);
		ТаблицаБиоматериалыКонтейнеры.Колонки.Добавить("БиоматериалПредставление", ТипСтрока);
		ТаблицаБиоматериалыКонтейнеры.Колонки.Добавить("Контейнер", ТипСтрока);
		ТаблицаБиоматериалыКонтейнеры.Колонки.Добавить("КонтейнерПредставление", ТипСтрока);
		ТаблицаБиоматериалыКонтейнеры.Колонки.Добавить("ЗаполнениеКонтейнера", ТипЧисло);
		ТаблицаБиоматериалыКонтейнеры.Колонки.Добавить("ТаблицаИсследованияВКонтейнере", Новый ОписаниеТипов("ТаблицаЗначений"));
		
		Для Каждого СтрокаДанныеЗабора Из ДанныеЗабора.ПравилаЗабора Цикл 
		 
			КлючСтрокиИсследования = СтрокаДанныеЗабора.КлючСтрокиИсследования;
			МассивИсследованияЛаборатории = ТаблицаИсследованияЛаборатории.НайтиСтроки(
				Новый Структура("КлючСтроки", КлючСтрокиИсследования));
				
			Если МассивИсследованияЛаборатории.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоменклатураИсследования = МассивИсследованияЛаборатории[0].Номенклатура; 	
			МассивДанныеБиоматериалов = ПроверкаПравилаЗабора.НайтиСтроки(
				Новый Структура("КлючСтрокиИсследования, КодБиоматериала", КлючСтрокиИсследования, СтрокаДанныеЗабора.ИДБиоматериала));
					
			Если МассивДанныеБиоматериалов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
				
			КодАнализа = МассивДанныеБиоматериалов[0].КодАнализа;
			ЗаполнениеБиоматериала = МассивДанныеБиоматериалов[0].Заполнение;
				
			КоэффициентЗаполненияБиоматериала = ЗаполнениеБиоматериала/100;
			ЦелаяЧастьКоэффициентаЗаполнения = Цел(КоэффициентЗаполненияБиоматериала);
			ЧастичноеЗаполнениеКонтейнера = ЗаполнениеБиоматериала - 100*ЦелаяЧастьКоэффициентаЗаполнения;
			НеобходимоеКоличествоКонтейнеров = ?(ЧастичноеЗаполнениеКонтейнера > 0 Или ЗаполнениеБиоматериала = 0,
				ЦелаяЧастьКоэффициентаЗаполнения + 1, ЦелаяЧастьКоэффициентаЗаполнения);
			
			Если ЧастичноеЗаполнениеКонтейнера > 0 Или ЗаполнениеБиоматериала = 0 Тогда
				МассивБиоматериалыКонтейнеры = ТаблицаБиоматериалыКонтейнеры.НайтиСтроки(
					Новый Структура("Биоматериал, Контейнер", СтрокаДанныеЗабора.ИДБиоматериала, СтрокаДанныеЗабора.ИДКонтейнера));
					
				ИсследованиеРаспределено = Ложь;	
				
				Для Каждого СтрокаБиоматериалыКонтейнеры Из МассивБиоматериалыКонтейнеры Цикл
					
					НовоеЗаполнениеКонтейнера = СтрокаБиоматериалыКонтейнеры.ЗаполнениеКонтейнера + ЧастичноеЗаполнениеКонтейнера;
					Если НовоеЗаполнениеКонтейнера <= 100 Тогда
						СтрокаИсследованияВКонтейнере = СтрокаБиоматериалыКонтейнеры.ТаблицаИсследованияВКонтейнере.Добавить();
						СтрокаИсследованияВКонтейнере.КлючСтрокиИсследования = КлючСтрокиИсследования;
						СтрокаИсследованияВКонтейнере.ИдАнализа = КодАнализа;
						СтрокаИсследованияВКонтейнере.ПредставлениеАнализа = Строка(НоменклатураИсследования);
						ИсследованиеРаспределено = Истина;
						Прервать;
					КонецЕсли;					
					
				КонецЦикла;
				
				Если ИсследованиеРаспределено Тогда
					НеобходимоеКоличествоКонтейнеров = НеобходимоеКоличествоКонтейнеров - 1;
				КонецЕсли;
			КонецЕсли;
			
			Для Индекс = 1 По НеобходимоеКоличествоКонтейнеров Цикл
				
				ТаблицаИсследованияВКонтейнере = Новый ТаблицаЗначений;
				ТаблицаИсследованияВКонтейнере.Колонки.Добавить("КлючСтрокиИсследования", ТипЧисло);
				ТаблицаИсследованияВКонтейнере.Колонки.Добавить("ИдАнализа", ТипСтрока);
				ТаблицаИсследованияВКонтейнере.Колонки.Добавить("ПредставлениеАнализа", ТипСтрока);
				
				СтрокаИсследованияВКонтейнере = ТаблицаИсследованияВКонтейнере.Добавить();
				СтрокаИсследованияВКонтейнере.КлючСтрокиИсследования = КлючСтрокиИсследования;
				СтрокаИсследованияВКонтейнере.ИдАнализа = КодАнализа;
				СтрокаИсследованияВКонтейнере.ПредставлениеАнализа = Строка(НоменклатураИсследования);
				
				СтрокаБиоматериалыКонтейнеры = ТаблицаБиоматериалыКонтейнеры.Добавить();
				СтрокаБиоматериалыКонтейнеры.Биоматериал = СтрокаДанныеЗабора.ИДБиоматериала;
				СтрокаБиоматериалыКонтейнеры.БиоматериалПредставление = СтрокаДанныеЗабора.Биоматериал;
				СтрокаБиоматериалыКонтейнеры.Контейнер = СтрокаДанныеЗабора.ИДКонтейнера;
				СтрокаБиоматериалыКонтейнеры.КонтейнерПредставление = СтрокаДанныеЗабора.Контейнер;
				
				ЗаполнениеКонтейнера = Мин(ЗаполнениеБиоматериала, 100);
				СтрокаБиоматериалыКонтейнеры.ЗаполнениеКонтейнера = ЗаполнениеКонтейнера;
				ЗаполнениеБиоматериала = ЗаполнениеБиоматериала - ЗаполнениеКонтейнера;
				
				СтрокаБиоматериалыКонтейнеры.ТаблицаИсследованияВКонтейнере = ТаблицаИсследованияВКонтейнере;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтрокаЛаборатории = Результат.Строки.Добавить();
		СтрокаЛаборатории.Лаборатория = Лаборатория;
				
		Для Каждого СтрокаБиоматериалыКонтейнеры Из ТаблицаБиоматериалыКонтейнеры Цикл
			
			СтрокаБиоматериала = СтрокаЛаборатории.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаБиоматериала, СтрокаБиоматериалыКонтейнеры); 
			СтрокаБиоматериала.ЭтоКонтейнер = Истина;
			
			НомерКонтейнера = НомерКонтейнера + 1;
			СтрокаБиоматериала.НомерКонтейнера = НомерКонтейнера;	
			
			Для Каждого СтрокаИсследованияВКонтейнере Из СтрокаБиоматериалыКонтейнеры.ТаблицаИсследованияВКонтейнере Цикл
				
				СтрокаАнализ = СтрокаБиоматериала.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАнализ, СтрокаИсследованияВКонтейнере); 
				
			КонецЦикла; 			
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НумерацияЗаявок

// Возвращает признак использования пулов номеров заявок в интеграции с КДЛ-лабораториями.
//
// Параметры:
//  Лаборатория - СправочникСсылка.Лаборатории - лаборатория, для которой получаем настройки.
// 
// Возвращаемое значение:
//  Булево - Истина, если в настройках учета лабораторий включена интеграция с КДЛ-лабораториями
//	и в настройках взаимодействия лаборатории не используются предраспечатанные штрихкоды.
//
Функция ИспользуютсяПулыНомеровЗаявокЛабораторий(Лаборатория) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		Возврат Ложь;
	Иначе
		НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
		Возврат Не НастройкаВзаимодействия.ИспользоватьПредраспечатанныеШК;
	КонецЕсли;	
	
КонецФункции

// Получает новые номера заявок из используемых диапазонов номеров и формирует коды проб.
//
// Параметры:
//  МассивСтрокиКодыПроб - Массив из СтрокаТаблицыЗначений	 - содержит:
//  	* Лаборатория				- СправочникСсылка.Лаборатории - лаборатория, для которой указаны данные в строке таблицы
//  	* Контейнер   				- Строка - код контейнера
//  	* Биоматериал 				- Строка - код биоматериала
//  	* КодПробы    				- Строка - код пробы, который нужно сформировать для строки таблицы
//  	* Учтен       				- Булево - если имеет значение Истина, значит код пробы сформирован
//  	* ДиапазонОтсутствует 		- Булево - если имеет значение Истина, значит не был получен диапазон номеров.
//  МассивДиапазонов	 - Массив из СтрокаТаблицыЗначений	 - содержит:
//  	* Лаборатория				- СправочникСсылка.Лаборатории - лаборатория, для которой указан диапазон номеров
//  	* НачалоДиапазона 			- Число  - начальное значение диапазона номеров
//  	* ОкончаниеДиапазона 		- Число  - конечное значение диапазона номеров
//  	* ТекущийНомер  			- Число  - последний номер, взятый из диапазона номеров 
//  	* Закрыт   					- Булево - если имеет значение Истина, значит диапазон закончился или недоступен для использования.  
//
Процедура ПолучитьНовыеНомераЗаявок(МассивСтрокиКодыПроб, МассивДиапазонов) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Лаборатория					  = Справочники.Лаборатории.ПустаяСсылка();
	МассивБиоматериалыПроб		  = Новый Массив;
	МассивСтрокиКодыПробЗаполнены = Новый Массив;
	МассивСтрокиКодыПробПустые	  = Новый Массив;
	МассивКодыПроб				  = Новый Массив;
	
	Для Каждого СтрокаКодыПроб Из МассивСтрокиКодыПроб Цикл
		МассивБиоматериалыПроб.Добавить(СтрокаКодыПроб.Биоматериал);
		
		Если Не ЗначениеЗаполнено(Лаборатория) Тогда
			Лаборатория = СтрокаКодыПроб.Лаборатория;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаКодыПроб.КодПробы) Тогда
			СтрокаКодыПроб.Учтен = Истина;
			МассивКодыПроб.Добавить(СтрокаКодыПроб.КодПробы);
			МассивСтрокиКодыПробЗаполнены.Добавить(СтрокаКодыПроб);
		Иначе
			МассивСтрокиКодыПробПустые.Добавить(СтрокаКодыПроб);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодБиоматериала", МассивБиоматериалыПроб);
	Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КДЛ_Биоматериалы.Код КАК Биоматериал,
	|	КДЛ_Биоматериалы.Тип КАК ТипБиоматериала
	|ИЗ
	|	РегистрСведений.КДЛ_Биоматериалы КАК КДЛ_Биоматериалы
	|ГДЕ
	|	КДЛ_Биоматериалы.Лаборатория = &Лаборатория
	|	И КДЛ_Биоматериалы.Код В(&КодБиоматериала)"
	;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		ТаблицаТипыБиоматериала = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	ТаблицаЗаявки = Новый ТаблицаЗначений;
	ТаблицаЗаявки.Колонки.Добавить("НомерЗаявки", Новый ОписаниеТипов("Число"));
	ТаблицаЗаявки.Колонки.Добавить("ТипыБиоматериалов", Новый ОписаниеТипов("Массив"));
	ТаблицаЗаявки.Колонки.Добавить("Биоматериалы", Новый ОписаниеТипов("Массив"));
	ТаблицаЗаявки.Колонки.Добавить("СтрокиКодыПроб", Новый ОписаниеТипов("Массив"));
	
	Для Каждого СтрокаКодыПробЗаполнены Из МассивСтрокиКодыПробЗаполнены Цикл
		НомерЗаявки = ПолучитьНомерЗаявкиИзКодаПробы(СтрокаКодыПробЗаполнены.КодПробы);
		Если НомерЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Биоматериал = СтрокаКодыПробЗаполнены.Биоматериал;
		СтрокаТипыБиоматериала = ТаблицаТипыБиоматериала.Найти(Биоматериал, "Биоматериал");
		Если СтрокаТипыБиоматериала <> Неопределено Тогда
			ТипБиоматериала = СтрокаТипыБиоматериала.ТипБиоматериала;
			
			СтрокаЗаявки = ТаблицаЗаявки.Найти(НомерЗаявки, "НомерЗаявки");
			Если СтрокаЗаявки = Неопределено Тогда
				СтрокаЗаявки = ТаблицаЗаявки.Добавить();
				СтрокаЗаявки.НомерЗаявки = НомерЗаявки;
			КонецЕсли;
		
			СтрокаЗаявки.ТипыБиоматериалов.Добавить(ТипБиоматериала);
			СтрокаЗаявки.Биоматериалы.Добавить(Биоматериал);
			СтрокаЗаявки.СтрокиКодыПроб.Добавить(СтрокаКодыПробЗаполнены);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗаявки.Сортировать("НомерЗаявки");
	
	Для Каждого СтрокаКодыПробПустые Из МассивСтрокиКодыПробПустые Цикл
		Биоматериал = СтрокаКодыПробПустые.Биоматериал;
		СтрокаТипыБиоматериала = ТаблицаТипыБиоматериала.Найти(Биоматериал, "Биоматериал");
		Если СтрокаТипыБиоматериала <> Неопределено Тогда
			ТипБиоматериала = СтрокаТипыБиоматериала.ТипБиоматериала;
			СтрокаРаспределена = Ложь;

			Для Каждого СтрокаЗаявки Из ТаблицаЗаявки Цикл
				
				// В одной заявке не может быть больше 99 проб.
				Если СтрокаЗаявки.СтрокиКодыПроб.Количество() >= 99 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипБиоматериала = 0
					Или СтрокаЗаявки.ТипыБиоматериалов.Найти(ТипБиоматериала) = Неопределено
					Или СтрокаЗаявки.Биоматериалы.Найти(Биоматериал) <> Неопределено
				Тогда
				    КодПробы = СформироватьКодПробы(СтрокаЗаявки.НомерЗаявки, МассивКодыПроб);
					Если Не ПустаяСтрока(КодПробы) Тогда
						СтрокаКодыПробПустые.КодПробы = КодПробы;
						
						СтрокаЗаявки.ТипыБиоматериалов.Добавить(ТипБиоматериала);
						СтрокаЗаявки.Биоматериалы.Добавить(Биоматериал);
						СтрокаЗаявки.СтрокиКодыПроб.Добавить(СтрокаКодыПробПустые);
					
						СтрокаРаспределена = Истина;
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не СтрокаРаспределена Тогда
				НомерЗаявки = ПолучитьНомерЗаявкиИзДиапазоновНомеров(МассивДиапазонов);
				Если НомерЗаявки > 0 Тогда
					СтрокаКодыПробПустые.КодПробы = СформироватьКодПробы(НомерЗаявки, МассивКодыПроб);
					
					СтрокаЗаявки = ТаблицаЗаявки.Добавить();
					СтрокаЗаявки.НомерЗаявки = НомерЗаявки;
		
					СтрокаЗаявки.ТипыБиоматериалов.Добавить(ТипБиоматериала);
					СтрокаЗаявки.Биоматериалы.Добавить(Биоматериал);
					СтрокаЗаявки.СтрокиКодыПроб.Добавить(СтрокаКодыПробПустые);
				Иначе
					
					Прервать;
				
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаКодыПробПустые.КодПробы) Тогда
				СтрокаКодыПробПустые.Учтен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак использования существующих в контейнерах кодов проб при получении номеров заявок и формировании
// кодов проб новых контейнеров в документе забора анализов в интеграции с КДЛ-лабораториями.
// 
// Возвращаемое значение:
//  Булево
//
Функция ИспользуютсяСуществующиеКодыПробПриПолученииНомеровЗаявок() Экспорт
	
	Если ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ДлинаНомераЗаявки()
	
	Возврат 10;

КонецФункции

Функция СформироватьКодПробы(НомерЗаявки, МассивКодыПроб, ПорядковыйНомер = 0)
	
	ПорядковыйНомер = ПорядковыйНомер + 1;
	
	// В одной заявке не может быть больше 99 проб.
	Если ПорядковыйНомер > 99 Тогда
		Возврат "";
	КонецЕсли;
	
	КодПробы = Формат(НомерЗаявки, "ЧГ=0") + Формат(ПорядковыйНомер, "ЧЦ=2; ЧВН=");
	
	Если МассивКодыПроб.Найти(КодПробы) = Неопределено Тогда
    	МассивКодыПроб.Добавить(КодПробы);
		Возврат КодПробы;
	Иначе
		Возврат СформироватьКодПробы(НомерЗаявки, МассивКодыПроб, ПорядковыйНомер);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерЗаявкиИзКодаПробы(Знач КодПробы)
	
	НомерЗаявки = 0;
	
	Если КодПробыКорректен(КодПробы) Тогда
		
		ДлинаНомераЗаявки = ДлинаНомераЗаявки();
		СтрокаНомерЗаявки = Лев(КодПробы, ДлинаНомераЗаявки);
		
		Если СтрДлина(СтрокаНомерЗаявки) = ДлинаНомераЗаявки Тогда
			
			Попытка
				НомерЗаявки = Число(СтрокаНомерЗаявки);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерЗаявки;

КонецФункции

Функция ПолучитьНомерЗаявкиИзДиапазоновНомеров(Диапазоны)
	
	НомерЗаявки = 0;
	СообщенияПользователю = Новый Массив;
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если Не (Диапазон.Закрыт Или ПулНомеровЗаявокСОшибками(Диапазон, СообщенияПользователю)) Тогда
			Если Диапазон.ТекущийНомер < Диапазон.НачалоДиапазона Тогда
				НомерЗаявки = Диапазон.НачалоДиапазона;
			Иначе
				НомерЗаявки = Диапазон.ТекущийНомер + 1;
			КонецЕсли;
			
			Если НомерЗаявки >= Диапазон.ОкончаниеДиапазона Тогда
				Диапазон.Закрыт = Истина;
				Если НомерЗаявки > Диапазон.ОкончаниеДиапазона Тогда
					НомерЗаявки = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если НомерЗаявки > 0 Тогда
				Диапазон.ТекущийНомер = НомерЗаявки;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НомерЗаявки = 0 И СообщенияПользователю.Количество() > 0 Тогда
		Для Каждого Сообщение Из СообщенияПользователю Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НомерЗаявки;

КонецФункции

Функция ПулНомеровЗаявокСОшибками(Диапазон, СообщенияПользователю)
	
	НайденыОшибки = Ложь;
	
	ДлинаНомераЗаявки = ДлинаНомераЗаявки();
	
	Если СтрДлина(Формат(Диапазон.НачалоДиапазона, "ЧГ=0")) <> ДлинаНомераЗаявки
		Или СтрДлина(Формат(Диапазон.ОкончаниеДиапазона, "ЧГ=0")) <> ДлинаНомераЗаявки
	Тогда
		НайденыОшибки = Истина;
		ШаблонСтроки = НСтр("ru = 'Ошибка при получении номеров заявок лаборатории %1:
								  |значения в пуле номеров заявок %2 - %3 должны состоять из %4 цифр.'");
		Сообщение = СтрШаблон(ШаблонСтроки, Строка(Диапазон.Лаборатория), Строка(Диапазон.НачалоДиапазона),
			Строка(Диапазон.ОкончаниеДиапазона), Строка(ДлинаНомераЗаявки));
		СообщенияПользователю.Добавить(Сообщение);
	КонецЕсли;
	
	Если Диапазон.ОкончаниеДиапазона < Диапазон.НачалоДиапазона Тогда
		НайденыОшибки = Истина;
		ШаблонСтроки = НСтр("ru = 'Ошибка при получении номеров заявок лаборатории %1:
								  |окончание диапазона %2 не должно быть меньше начала диапазона %3.'");
		Сообщение = СтрШаблон(ШаблонСтроки, Строка(Диапазон.Лаборатория), Строка(Диапазон.НачалоДиапазона),
			Строка(Диапазон.ОкончаниеДиапазона));
		СообщенияПользователю.Добавить(Сообщение);
	КонецЕсли;
	
	Возврат НайденыОшибки;
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами_ПрограммныйИнтерфейс // Отправка заказов и получение результатов

// Отправяет опись заказов во внешнюю лабораторию.
Функция ОтправитьЗаказыПоОписиВоВнешнююЛабораторию(ОписьЗаказов) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОтключенаИнтеграция;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Лаборатория = ОписьЗаказов.Лаборатория;
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОтсутствуетНастройка;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	АдресСайта  = СтрЗаменить(НРег(НастройкиВзаимодействия.FTPСоединениеПуть), "ftp://", "");
	Порт        = ?(ЗначениеЗаполнено(НастройкиВзаимодействия.FTPСоединениеПорт), НастройкиВзаимодействия.FTPСоединениеПорт, 21);
	Логин       = НастройкиВзаимодействия.FTPСоединениеПользователь;
	Пароль      = НастройкиВзаимодействия.FTPСоединениеПароль;
	ИмяКаталога = "/Input";
	
	Если ПустаяСтрока(АдресСайта) Или ПустаяСтрока(Логин) Или ПустаяСтрока(Пароль) Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ПустойПараметрПодключения;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Попытка
		FTPСоединение = ПолучитьFTPСоединение(АдресСайта, Порт, Логин, Пароль);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
		Исключение
			СообщениеОбОшибке = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОшибкаКаталог;
		КонецПопытки;
	Исключение
		СообщениеОбОшибке = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОшибкаПодключения;
	КонецПопытки;
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		ШаблонСтроки = НСтр("ru='Произошла ошибка при подключении к FTP по причине: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, СообщениеОбОшибке);
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
			
	ЗаполненНомерЗаявки = Ложь;
	ДлинаНомераЗаявки = ДлинаНомераЗаявки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказВоВнешнююЛабораторию.Номер КАК Номер,
	|	ЗаказВоВнешнююЛабораторию.Дата КАК Дата,
	|	ЗаказВоВнешнююЛабораторию.Клиент.Фамилия КАК КлиентФамилия,
	|	ЗаказВоВнешнююЛабораторию.Клиент.Имя КАК КлиентИмя,
	|	ЗаказВоВнешнююЛабораторию.Клиент.Отчество КАК КлиентОтчество,
	|	ЗаказВоВнешнююЛабораторию.Клиент.Пол КАК КлиентПол,
	|	ЗаказВоВнешнююЛабораторию.Клиент.ДатаРождения КАК КлиентДатаРождения,
	|	ЗаказВоВнешнююЛабораторию.Клиент КАК Клиент,
	|	ЗаказВоВнешнююЛабораторию.Ссылка КАК Ссылка,
	|	ЗаказВоВнешнююЛабораторию.Анонимно КАК Анонимно,
	|	ЗаказВоВнешнююЛабораториюИсследования.НомерСтроки КАК НомерСтроки,
	|	ЗаказВоВнешнююЛабораториюИсследования.КодПробы КАК КодПробы,
	|	ЗаказВоВнешнююЛабораториюИсследования.Номенклатура КАК Номенклатура,
	|	ЗаказВоВнешнююЛабораториюИсследования.ИД КАК ИД,
	|	ЗаказВоВнешнююЛабораториюИсследования.Состояние КАК Состояние,
	|	ЗаказВоВнешнююЛабораторию.Лаборатория КАК Лаборатория
	|ПОМЕСТИТЬ ДанныеЗаказов
	|ИЗ
	|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказВоВнешнююЛабораторию КАК ЗаказВоВнешнююЛабораторию
	|		ПО ЗаказВоВнешнююЛабораториюИсследования.Ссылка = ЗаказВоВнешнююЛабораторию.Ссылка
	|			И (ЗаказВоВнешнююЛабораторию.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Создан))
	|			И (ЗаказВоВнешнююЛабораториюИсследования.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовЛаборатории.Создан))
	|			И (НЕ ЗаказВоВнешнююЛабораторию.ПометкаУдаления)
	|			И (ЗаказВоВнешнююЛабораторию.Ссылка В (&Заказы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказов.Номер КАК Номер,
	|	ДанныеЗаказов.Дата КАК Дата,
	|	ДанныеЗаказов.КлиентФамилия КАК КлиентФамилия,
	|	ДанныеЗаказов.КлиентИмя КАК КлиентИмя,
	|	ДанныеЗаказов.КлиентОтчество КАК КлиентОтчество,
	|	ДанныеЗаказов.КлиентПол КАК КлиентПол,
	|	ДанныеЗаказов.КлиентДатаРождения КАК КлиентДатаРождения,
	|	ДанныеЗаказов.Клиент КАК Клиент,
	|	ДанныеЗаказов.Ссылка КАК Ссылка,
	|	ДанныеЗаказов.Анонимно КАК Анонимно,
	|	ДанныеЗаказов.НомерСтроки КАК НомерСтроки,
	|	ДанныеЗаказов.КодПробы КАК КодПробы,
	|	ДанныеЗаказов.Номенклатура КАК Номенклатура,
	|	ДанныеЗаказов.ИД КАК ИД,
	|	ДанныеЗаказов.Состояние КАК Состояние,
	|	ЕСТЬNULL(ДействияНадАнализамиИсследования.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДокументЗабораАнализов
	|ИЗ
	|	ДанныеЗаказов КАК ДанныеЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
	|		ПО ДанныеЗаказов.ИД = ДействияНадАнализамиИсследования.ИД
	|			И ДанныеЗаказов.Номенклатура = ДействияНадАнализамиИсследования.Номенклатура
	|			И ДанныеЗаказов.Клиент = ДействияНадАнализамиИсследования.Клиент
	|			И ДанныеЗаказов.Лаборатория = ДействияНадАнализамиИсследования.Лаборатория"
	;
	
	Запрос.УстановитьПараметр("Заказы", ОписьЗаказов.СписокЗаказов.ВыгрузитьКолонку("ЗаказВЛабораторию"));
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицаЗаказы = Результат.Выгрузить();
		ТаблицаЗаказы.Колонки.Добавить("НомерЗаявки", Новый ОписаниеТипов("Строка"));
		
		Для Каждого СтрТаблицаЗаказы Из ТаблицаЗаказы Цикл
			Если Не ПустаяСтрока(СтрТаблицаЗаказы.КодПробы) Тогда
				НомерЗаявки = Лев(СтрТаблицаЗаказы.КодПробы, ДлинаНомераЗаявки);
				Если СтрДлина(НомерЗаявки) = ДлинаНомераЗаявки Тогда
					СтрТаблицаЗаказы.НомерЗаявки = НомерЗаявки;
					Если Не ЗаполненНомерЗаявки Тогда
						ЗаполненНомерЗаявки = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаполненНомерЗаявки Тогда
		
		ID_Doctor = ИдентификаторНаправившегоВрачаВЗаказеВЛабораторию();
		
		ТаблицаНомераЗаявок = ТаблицаЗаказы.Скопировать(, "Ссылка, НомерЗаявки");
		ТаблицаНомераЗаявок.Свернуть("Ссылка, НомерЗаявки");
		ТаблицаНомераЗаявок.Сортировать("НомерЗаявки");
		
		ТаблицаКодыПроб = ТаблицаЗаказы.Скопировать(, "Номенклатура, КодПробы, ИД");
		ТаблицаКодыПроб.Свернуть("Номенклатура, КодПробы, ИД");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Лаборатория", Лаборатория);
		Запрос.УстановитьПараметр("Номенклатура", ТаблицаЗаказы.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Таблица", ТаблицаКодыПроб);
		Запрос.УстановитьПараметр("ID_Doctor", ID_Doctor);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураАнализов.Номенклатура КАК Номенклатура,
		|	НоменклатураАнализов.ID КАК ИдАнализа,
		|	НоменклатураАнализов.Лаборатория КАК Лаборатория
		|ПОМЕСТИТЬ НоменклатураИсследований
		|ИЗ
		|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
		|ГДЕ
		|	НоменклатураАнализов.Номенклатура В(&Номенклатура)
		|	И НоменклатураАнализов.Лаборатория = &Лаборатория
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураИсследований.Номенклатура КАК Номенклатура,
		|	КДЛ_Исследования.ГруппаДополнительнойИнформации КАК ГруппаДопИнформации,
		|	КДЛ_ДопИнформация.Тег КАК Тег,
		|	КДЛ_Исследования.ГруппаДополнительнойИнформации + ""/"" + КДЛ_ДопИнформация.Тег КАК ИдПараметраЗабора
		|ПОМЕСТИТЬ ИсследованияСПараметрамиЗабора
		|ИЗ
		|	НоменклатураИсследований КАК НоменклатураИсследований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Исследования КАК КДЛ_Исследования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_ДопИнформация КАК КДЛ_ДопИнформация
		|			ПО КДЛ_Исследования.ГруппаДополнительнойИнформации = КДЛ_ДопИнформация.ГруппаДополнительнойИнформации
		|				И КДЛ_Исследования.Лаборатория = КДЛ_ДопИнформация.Лаборатория
		|		ПО НоменклатураИсследований.Лаборатория = КДЛ_Исследования.Лаборатория
		|			И НоменклатураИсследований.ИдАнализа = КДЛ_Исследования.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыЗабораАнализов.Ссылка КАК ПараметрЗабора,
		|	ПараметрыЗабораАнализов.ID КАК ИдПараметраЗабора
		|ПОМЕСТИТЬ ПараметрыЗабораКДЛ
		|ИЗ
		|	ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализов
		|ГДЕ
		|	ПараметрыЗабораАнализов.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.КДЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсследованияСПараметрамиЗабора.Номенклатура КАК Номенклатура,
		|	ПараметрыЗабораКДЛ.ПараметрЗабора КАК ПараметрЗабора,
		|	ИсследованияСПараметрамиЗабора.Тег КАК Тег
		|ПОМЕСТИТЬ ПараметрыЗабораИсследований
		|ИЗ
		|	ИсследованияСПараметрамиЗабора КАК ИсследованияСПараметрамиЗабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗабораКДЛ КАК ПараметрыЗабораКДЛ
		|		ПО ИсследованияСПараметрамиЗабора.ИдПараметраЗабора = ПараметрыЗабораКДЛ.ИдПараметраЗабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.ИД КАК ИД,
		|	Таблица.КодПробы КАК КодПробы
		|ПОМЕСТИТЬ ТаблицаКодыПроб
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКодыПроб.Номенклатура КАК Номенклатура,
		|	ДействияНадАнализамиКонтейнеры.ИдИсследования КАК ИД,
		|	ДействияНадАнализамиКонтейнеры.ИдАнализа КАК ИдАнализа,
		|	ДействияНадАнализамиКонтейнеры.Биоматериал КАК Биоматериал,
		|	КДЛ_Биоматериалы.Тип КАК ТипБиоматериала,
		|	ДействияНадАнализамиКонтейнеры.КодПробы КАК КодПробы,
		|	ДействияНадАнализамиКонтейнеры.Контейнер КАК Контейнер,
		|	ДействияНадАнализамиКонтейнеры.Ссылка КАК ДействияНадАнализамиСсылка
		|ПОМЕСТИТЬ ТаблицаКонтейнеры
		|ИЗ
		|	ТаблицаКодыПроб КАК ТаблицаКодыПроб
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_Биоматериалы КАК КДЛ_Биоматериалы
		|			ПО ДействияНадАнализамиКонтейнеры.Лаборатория = КДЛ_Биоматериалы.Лаборатория
		|				И ДействияНадАнализамиКонтейнеры.Биоматериал = КДЛ_Биоматериалы.Код
		|				И (ДействияНадАнализамиКонтейнеры.Лаборатория = &Лаборатория)
		|		ПО ТаблицаКодыПроб.ИД = ДействияНадАнализамиКонтейнеры.ИдИсследования
		|			И ТаблицаКодыПроб.КодПробы = ДействияНадАнализамиКонтейнеры.КодПробы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтейнеры.Номенклатура КАК Номенклатура,
		|	ТаблицаКонтейнеры.ИД КАК ИД,
		|	ТаблицаКонтейнеры.ИдАнализа КАК ИдАнализа,
		|	ТаблицаКонтейнеры.Биоматериал КАК Биоматериал,
		|	ТаблицаКонтейнеры.ТипБиоматериала КАК ТипБиоматериала,
		|	ТаблицаКонтейнеры.КодПробы КАК КодПробы,
		|	ТаблицаКонтейнеры.Контейнер КАК Контейнер
		|ИЗ
		|	ТаблицаКонтейнеры КАК ТаблицаКонтейнеры
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодПробы,
		|	ИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияНадАнализамиИсследования.Номенклатура КАК Номенклатура,
		|	ДействияНадАнализамиИсследования.ИД КАК ИД,
		|	ТаблицаКонтейнеры.ДействияНадАнализамиСсылка КАК ДействияНадАнализамиСсылка
		|ПОМЕСТИТЬ ИсследованияВДокументах
		|ИЗ
		|	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтейнеры КАК ТаблицаКонтейнеры
		|		ПО ДействияНадАнализамиИсследования.Ссылка = ТаблицаКонтейнеры.ДействияНадАнализамиСсылка
		|			И (ДействияНадАнализамиИсследования.Лаборатория = &Лаборатория)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсследованияВДокументах.Номенклатура КАК Номенклатура,
		|	ИсследованияВДокументах.ИД КАК ИД,
		|	ДействияНадАнализамиПараметрыЗабора.Параметр КАК ПараметрЗабора,
		|	ДействияНадАнализамиПараметрыЗабора.Значение КАК ЗначениеПараметраЗабора,
		|	ДействияНадАнализамиПараметрыЗабора.Ссылка КАК ДокументЗабораАнализов
		|ПОМЕСТИТЬ ПараметрыЗабораВДокументах
		|ИЗ
		|	ИсследованияВДокументах КАК ИсследованияВДокументах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.ПараметрыЗабора КАК ДействияНадАнализамиПараметрыЗабора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПараметрыЗабораАнализов.IDПараметров КАК ПараметрыЗабораАнализовIDПараметров
		|			ПО ДействияНадАнализамиПараметрыЗабора.Параметр = ПараметрыЗабораАнализовIDПараметров.Ссылка
		|				И (ПараметрыЗабораАнализовIDПараметров.ВидЛаборатории = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.КДЛ))
		|		ПО ИсследованияВДокументах.ДействияНадАнализамиСсылка = ДействияНадАнализамиПараметрыЗабора.Ссылка
		|			И (ДействияНадАнализамиПараметрыЗабора.Заполнен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыЗабораВДокументах.Номенклатура КАК Номенклатура,
		|	ПараметрыЗабораВДокументах.ИД КАК ИД,
		|	ПараметрыЗабораВДокументах.ПараметрЗабора КАК ПараметрЗабора,
		|	ПараметрыЗабораВДокументах.ЗначениеПараметраЗабора КАК ЗначениеПараметраЗабора,
		|	ПараметрыЗабораИсследований.Тег КАК ТегПараметраЗабора,
		|	ПараметрыЗабораВДокументах.ДокументЗабораАнализов КАК ДокументЗабораАнализов
		|ИЗ
		|	ПараметрыЗабораВДокументах КАК ПараметрыЗабораВДокументах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗабораИсследований КАК ПараметрыЗабораИсследований
		|		ПО ПараметрыЗабораВДокументах.Номенклатура = ПараметрыЗабораИсследований.Номенклатура
		|			И ПараметрыЗабораВДокументах.ПараметрЗабора = ПараметрыЗабораИсследований.ПараметрЗабора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	NULL,
		|	NULL,
		|	ПараметрыЗабораВДокументах.ПараметрЗабора,
		|	ПараметрыЗабораВДокументах.ЗначениеПараметраЗабора,
		|	ПараметрыЗабораКДЛ.ИдПараметраЗабора,
		|	ПараметрыЗабораВДокументах.ДокументЗабораАнализов
		|ИЗ
		|	ПараметрыЗабораВДокументах КАК ПараметрыЗабораВДокументах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗабораКДЛ КАК ПараметрыЗабораКДЛ
		|		ПО ПараметрыЗабораВДокументах.ПараметрЗабора = ПараметрыЗабораКДЛ.ПараметрЗабора
		|			И (ПараметрыЗабораКДЛ.ИдПараметраЗабора = &ID_Doctor)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсследованияВДокументах.Номенклатура КАК Номенклатура,
		|	ИсследованияВДокументах.ИД КАК ИД,
		|	НоменклатураИсследований.ИдАнализа КАК ИдАнализа,
		|	ТаблицаКонтейнеры.КодПробы КАК КодПробы
		|ИЗ
		|	ИсследованияВДокументах КАК ИсследованияВДокументах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтейнеры КАК ТаблицаКонтейнеры
		|		ПО ИсследованияВДокументах.ДействияНадАнализамиСсылка = ТаблицаКонтейнеры.ДействияНадАнализамиСсылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураИсследований КАК НоменклатураИсследований
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДЛ_БиоматериалыИсследований КАК КДЛ_БиоматериалыИсследований
		|			ПО НоменклатураИсследований.ИдАнализа = КДЛ_БиоматериалыИсследований.КодИсследования
		|				И НоменклатураИсследований.Лаборатория = КДЛ_БиоматериалыИсследований.Лаборатория
		|		ПО ИсследованияВДокументах.Номенклатура = НоменклатураИсследований.Номенклатура
		|ГДЕ
		|	КДЛ_БиоматериалыИсследований.КодИсследования ЕСТЬ NULL"
		;
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаИсследованияИКонтейнеры = ПакетЗапроса[6].Выгрузить();
		ТаблицаИсследованияИКонтейнеры.Колонки.Добавить("НомерЗаявки", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрТаблицаИсследованияИКонтейнеры Из ТаблицаИсследованияИКонтейнеры Цикл
			СтрТаблицаИсследованияИКонтейнеры.НомерЗаявки = Лев(СтрТаблицаИсследованияИКонтейнеры.КодПробы, ДлинаНомераЗаявки);
		КонецЦикла;
		
		ТаблицаПараметрыЗабора = ПакетЗапроса[9].Выгрузить();
		
		ТаблицаУслугиБезБиоматериалов = ПакетЗапроса[10].Выгрузить();
		ТаблицаУслугиБезБиоматериалов.Колонки.Добавить("НомерЗаявки", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрТаблицаУслугиБезБиоматериалов Из ТаблицаУслугиБезБиоматериалов Цикл
			СтрТаблицаУслугиБезБиоматериалов.НомерЗаявки = Лев(СтрТаблицаУслугиБезБиоматериалов.КодПробы, ДлинаНомераЗаявки);
		КонецЦикла;
		ТаблицаУслугиБезБиоматериалов.Свернуть("Номенклатура, ИД, ИдАнализа, НомерЗаявки");
		
		ЕстьОшибкиПриОтправкеЗаказов = Ложь;
		
		Для Каждого СтрокаНомерЗаявки Из ТаблицаНомераЗаявок Цикл
			
			Если ПустаяСтрока(СтрокаНомерЗаявки.НомерЗаявки) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивИсследования = ТаблицаЗаказы.НайтиСтроки(Новый Структура("Ссылка, НомерЗаявки",
				СтрокаНомерЗаявки.Ссылка, СтрокаНомерЗаявки.НомерЗаявки));
				
			ТаблицаИсследованияИКонтейнерыПоНомеруЗаявки = ТаблицаИсследованияИКонтейнеры.Скопировать(Новый Структура("НомерЗаявки", СтрокаНомерЗаявки.НомерЗаявки));
			
			Если МассивИсследования.Количество() = 0 Или ТаблицаИсследованияИКонтейнерыПоНомеруЗаявки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Заказ = МассивИсследования[0];
			
			КДЛ_Л = Метаданные.ПакетыXDTO.КДЛ_Лаборатория.Пакет;
			ОбъектXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("KDL", "root"));
			ОбъектXDTOHeader = ФабрикаXDTO.Создать(ОбъектXDTO.Свойства().Получить("Header").Тип);
			ОбъектXDTOHeader.Version = 5;
			ТекДата = ТекущаяДата();
			ОбъектXDTOHeader.FileDate = Формат(ТекДата, "ДФ=yyyy-MM-dd");
			ОбъектXDTOHeader.FileTime = Формат(ТекДата, "ДФ=HH:mm:ss");
			ОбъектXDTOHeader.GenTime = 0;
			ОбъектXDTOHeader.FileType = "Order";
			ОбъектXDTOHeader.LaboratoryID = НастройкиВзаимодействия.ИдентификаторЛаборатории;
			ОбъектXDTOHeader.LaboratoryName = НастройкиВзаимодействия.НаименованиеЛаборатории;
			ОбъектXDTOHeader.ClinicID = НастройкиВзаимодействия.ИдентификаторОтправителя;
			ОбъектXDTOHeader.ClinicName = НастройкиВзаимодействия.НаименованиеОтправителя;
			ОбъектXDTOHeader.Direction = "FromClinic"; 	
			ОбъектXDTO.Header = ОбъектXDTOHeader; 	
			
			ОбъектXDTOOrder = ФабрикаXDTO.Создать(ОбъектXDTO.Свойства().Получить("Order").Тип);
			ОбъектXDTOOrder.OrderID = СтрокаНомерЗаявки.НомерЗаявки;
			ОбъектXDTOOrder.OrderComment = ОписьЗаказов.Комментарий;
			
			// Направивший врач (общий для всех анализов КДЛ в заказе).
			НаправившийВрач = "";
			ОтборДокументЗабораАнализов = Новый Структура("НомерЗаявки, Ссылка", СтрокаНомерЗаявки.НомерЗаявки, СтрокаНомерЗаявки.Ссылка);
			СтрокиЗаказы = ТаблицаЗаказы.НайтиСтроки(ОтборДокументЗабораАнализов);
			Если СтрокиЗаказы.Количество() > 0 Тогда
				ДокументЗабораАнализов = Неопределено;
				
				Для Каждого СтрокаЗаказы Из СтрокиЗаказы Цикл
					Если ЗначениеЗаполнено(СтрокаЗаказы.ДокументЗабораАнализов) Тогда
						ДокументЗабораАнализов = СтрокаЗаказы.ДокументЗабораАнализов;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ДокументЗабораАнализов) Тогда
					ОтборНаправившийВрач = Новый Структура("ТегПараметраЗабора, ДокументЗабораАнализов", ID_Doctor, ДокументЗабораАнализов);
					СтрокиПараметрыЗабора = ТаблицаПараметрыЗабора.НайтиСтроки(ОтборНаправившийВрач);
					Если СтрокиПараметрыЗабора.Количество() > 0 Тогда
						НаправившийВрач = Строка(СтрокиПараметрыЗабора.Получить(0).ЗначениеПараметраЗабора);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбъектXDTOOrder.Doctor = НаправившийВрач;
			
			// Данные клиента.
			ОбъектXDTOPatient = ФабрикаXDTO.Создать(ОбъектXDTOOrder.Свойства().Получить("Patient").Тип);
			
			Если Заказ.Анонимно Тогда
				ОбъектXDTOPatient.LastName = "Аноним";
				ОбъектXDTOPatient.FirstMiddleName = "Аноним Аноним";
			Иначе
				ОбъектXDTOPatient.LastName = СокрЛП(Заказ.КлиентФамилия);
				ОбъектXDTOPatient.FirstMiddleName = СокрЛП(Заказ.КлиентИмя)	+ ?(ЗначениеЗаполнено(Заказ.КлиентОтчество), " " + СокрЛП(Заказ.КлиентОтчество), "");
			КонецЕсли;
			
			ДатаРожденияКлиента = Заказ.КлиентДатаРождения;
			
			Если Не ЗначениеЗаполнено(ДатаРожденияКлиента)
				Или ДатаРожденияКлиента < Дата(1900,1,1)
			Тогда
				ШаблонСтроки = НСтр("ru='%1 не отправлен по причине: у клиента %2 некорректно указана дата рождения.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Строка(Заказ.Ссылка), Строка(Заказ.Клиент));
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
				ЕстьОшибкиПриОтправкеЗаказов = Истина;
				Продолжить;
			КонецЕсли;
			
			ОбъектXDTOPatient.DOB = Формат(ДатаРожденияКлиента, "ДФ=yyyy-MM-dd");
			
			Если Заказ.КлиентПол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				ОбъектXDTOPatient.Sex = "M";
			ИначеЕсли Заказ.КлиентПол = Перечисления.ПолФизическихЛиц.Женский Тогда
				ОбъектXDTOPatient.Sex = "F";
			Иначе
				ОбъектXDTOPatient.Sex = "U";
			КонецЕсли;
			
			Адрес = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(
				Заказ.Клиент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресЮридический);
			ОбъектXDTOPatient.HomeAddress = ?(ЗначениеЗаполнено(Адрес), Адрес, "");
			
			Почта = Неопределено;
			Телефон = Неопределено;
			Если Не Заказ.Анонимно Тогда
				Почта = ФорматEmail(КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Заказ.Клиент,
					Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, Ложь));
				Телефон = ОпределитьКонтактныйТелефон(КонтактнаяИнформацияСерверПереопределяемый.ПолучитьТелефоныВладельцаСоСлужебнымиПолями(Заказ.Клиент,
					Справочники.ВидыКонтактнойИнформации.ТелефонСотовый));
			КонецЕсли;
			ОбъектXDTOPatient.Email = ?(ЗначениеЗаполнено(Почта), Почта, "");
			ОбъектXDTOPatient.PhoneNumber = ?(ЗначениеЗаполнено(Телефон), Телефон, "");
			
			ОбъектXDTOPatient.Patkod = "";
			ОбъектXDTOPatient.patOtdelen = "";
			ОбъектXDTOPatient.StrahNumber = "";
			ОбъектXDTOPatient.PatKodKonting = "";
			ОбъектXDTOPatient.PREGNANCY = "";
			ОбъектXDTOPatient.CYCLE = "";
			ОбъектXDTOPatient.IDlmk = "";
			
			ОбъектXDTOOrder.Patient = ОбъектXDTOPatient;
			
			ОбъектXDTOSamples = ФабрикаXDTO.Создать(ОбъектXDTOOrder.Свойства().Получить("Samples").Тип);
			
			ТаблицаКонтейнерыПоНомеруЗаявки = ТаблицаИсследованияИКонтейнерыПоНомеруЗаявки.Скопировать(, "НомерЗаявки, КодПробы, Контейнер");
			ТаблицаКонтейнерыПоНомеруЗаявки.Свернуть("НомерЗаявки, КодПробы, Контейнер");
			ТаблицаКонтейнерыПоНомеруЗаявки.Сортировать("КодПробы Возр");
			
			Для Каждого СтрТаблицаКонтейнерыПоНомеруЗаявки Из ТаблицаКонтейнерыПоНомеруЗаявки Цикл
				
				ОбъектXDTOSample = ФабрикаXDTO.Создать(ОбъектXDTOSamples.Свойства().Получить("Sample").Тип);
				ОбъектXDTOSample.SampleType = СтрТаблицаКонтейнерыПоНомеруЗаявки.Контейнер;
				ОбъектXDTOSample.Barcode = СтрТаблицаКонтейнерыПоНомеруЗаявки.КодПробы;
				
				ОбъектXDTOTests = ФабрикаXDTO.Создать(ОбъектXDTOSample.Свойства().Получить("Tests").Тип);
				
				ТаблицаИсследования = Новый ТаблицаЗначений;
				ТаблицаИсследования.Колонки.Добавить("Номенклатура");
				ТаблицаИсследования.Колонки.Добавить("ИдАнализа");
				ТаблицаИсследования.Колонки.Добавить("Биоматериал");
				
				ПараметрыЗабораИсследований = Новый Соответствие;
				
				ОтборКонтейнер = Новый Структура("НомерЗаявки, КодПробы, Контейнер");
				ЗаполнитьЗначенияСвойств(ОтборКонтейнер, СтрТаблицаКонтейнерыПоНомеруЗаявки);
				СтрокиИсследованияИКонтейнерыПоНомеруЗаявки = ТаблицаИсследованияИКонтейнерыПоНомеруЗаявки.НайтиСтроки(ОтборКонтейнер);
				
				Для Каждого СтрокаИсследования Из СтрокиИсследованияИКонтейнерыПоНомеруЗаявки Цикл
					
					НоваяСтрока = ТаблицаИсследования.Добавить();
					НоваяСтрока.Номенклатура = СтрокаИсследования.Номенклатура;
					НоваяСтрока.ИдАнализа = СтрокаИсследования.ИдАнализа;
					НоваяСтрока.Биоматериал = ?(СтрокаИсследования.ТипБиоматериала <> 0, СтрокаИсследования.Биоматериал, "");
					
					СтрокиПараметрыЗабора = ТаблицаПараметрыЗабора.НайтиСтроки(Новый Структура("Номенклатура, ИД",
						СтрокаИсследования.Номенклатура, СтрокаИсследования.ИД));
						
					Если СтрокиПараметрыЗабора.Количество() > 0 Тогда
						МассивЗначенияПараметров = Новый Массив;
						
						Для Каждого СтрокаПараметрыЗабора Из СтрокиПараметрыЗабора Цикл
							МассивЗначенияПараметров.Добавить(Новый Структура("ТегПараметраЗабора, ЗначениеПараметраЗабора",
								СтрокаПараметрыЗабора.ТегПараметраЗабора, СтрокаПараметрыЗабора.ЗначениеПараметраЗабора));
						КонецЦикла;
						
						ПараметрыЗабораИсследований.Вставить(СтрокаИсследования.Номенклатура, МассивЗначенияПараметров);
					КонецЕсли;
					
				КонецЦикла;
				
				// Добавление выбранных в документе забора услуг без биоматериалов.
				СтрокиУслугиБезБиоматериалов = ТаблицаУслугиБезБиоматериалов.НайтиСтроки(
					Новый Структура("НомерЗаявки", СтрТаблицаКонтейнерыПоНомеруЗаявки.НомерЗаявки));
				
				Для Каждого СтрУслугиБезБиоматериалов Из СтрокиУслугиБезБиоматериалов Цикл
					
					НоваяСтрока = ТаблицаИсследования.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрУслугиБезБиоматериалов);
					НоваяСтрока.Биоматериал = "";
					
					СтрокиПараметрыЗабора = ТаблицаПараметрыЗабора.НайтиСтроки(Новый Структура("Номенклатура, ИД",
						НоваяСтрока.Номенклатура, СтрУслугиБезБиоматериалов.ИД));
						
					Если СтрокиПараметрыЗабора.Количество() > 0 Тогда
						МассивЗначенияПараметров = Новый Массив;
						
						Для Каждого СтрокаПараметрыЗабора Из СтрокиПараметрыЗабора Цикл
							МассивЗначенияПараметров.Добавить(Новый Структура("ТегПараметраЗабора, ЗначениеПараметраЗабора",
								СтрокаПараметрыЗабора.ТегПараметраЗабора, СтрокаПараметрыЗабора.ЗначениеПараметраЗабора));
						КонецЦикла;
						
						ПараметрыЗабораИсследований.Вставить(НоваяСтрока.Номенклатура, МассивЗначенияПараметров);
					КонецЕсли;
					
				КонецЦикла;
					
				// Добавление в XML-файл заявки исследований с биоматериалами и услуг без биоматериалов.
				ТаблицаИсследования.Свернуть("Номенклатура, ИдАнализа, Биоматериал");
				
				Для Каждого СтрокаИсследование Из ТаблицаИсследования Цикл
					
					ОбъектXDTOTest = ФабрикаXDTO.Создать(ОбъектXDTOTests.Свойства().Получить("Test").Тип);
					ОбъектXDTOTest.TestShortName = СокрЛП(СтрокаИсследование.ИдАнализа);
					ОбъектXDTOTest.locus = СокрЛП(СтрокаИсследование.Биоматериал);
					
					МассивЗначенияПараметров = ПараметрыЗабораИсследований.Получить(СтрокаИсследование.Номенклатура);
					
					Если МассивЗначенияПараметров <> Неопределено Тогда
						ОбъектXDTODopInfo = ФабрикаXDTO.Создать(ОбъектXDTOTest.Свойства().Получить("DopInfo").Тип);
						Для Каждого ЭлементМассивЗначенияПараметров Из МассивЗначенияПараметров Цикл 
							ОбъектXDTOInfo = ФабрикаXDTO.Создать(ОбъектXDTODopInfo.Свойства().Получить("Info").Тип);
							ОбъектXDTOInfo.ID = ЭлементМассивЗначенияПараметров.ТегПараметраЗабора;
							Если ТипЗнч(ЭлементМассивЗначенияПараметров.ЗначениеПараметраЗабора) = Тип("Дата") Тогда
								Value = Формат(ЭлементМассивЗначенияПараметров.ЗначениеПараметраЗабора, "ДФ=yyyy-MM-dd");
							ИначеЕсли ТипЗнч(ЭлементМассивЗначенияПараметров.ЗначениеПараметраЗабора) = Тип("Число") Тогда
								Value = Формат(ЭлементМассивЗначенияПараметров.ЗначениеПараметраЗабора, "ЧГ=0");
							Иначе 
								Value = Строка(ЭлементМассивЗначенияПараметров.ЗначениеПараметраЗабора);	
							КонецЕсли;
							ОбъектXDTOInfo.Value = Value; 
							ОбъектXDTODopInfo.Info.Добавить(ОбъектXDTOInfo);
						КонецЦикла;
						ОбъектXDTOTest.DopInfo = ОбъектXDTODopInfo; 
					КонецЕсли;
					
					ОбъектXDTOTests.Test.Добавить(ОбъектXDTOTest);
				
				КонецЦикла;
				
				ОбъектXDTOSample.Tests = ОбъектXDTOTests;
				ОбъектXDTOSamples.Sample.Добавить(ОбъектXDTOSample);
				
			КонецЦикла;
			
			ОбъектXDTOOrder.Samples = ОбъектXDTOSamples;
			ОбъектXDTO.Order = ОбъектXDTOOrder; 
			
			ЗаписьСтрока = Новый ЗаписьXML;				
			ЗаписьСтрока.УстановитьСтроку("UTF-8");
			
			// Записываем объявление XML-файла.
			ЗаписьСтрока.ЗаписатьОбъявлениеXML(); 
			ФабрикаXDTO.ЗаписатьXML(ЗаписьСтрока, ОбъектXDTO);
			ДанныеXML = ЗаписьСтрока.Закрыть();
			
			ПодстрокаПоиска = СтрПолучитьСтроку(ДанныеXML, 2);
			ДанныеXML = СтрЗаменить(ДанныеXML, ПодстрокаПоиска, "<root>"); 
				
			ПутьКФайлу = ПолучитьИмяВременногоФайла();
			
			Текст = Новый ТекстовыйДокумент; 
			Текст.УстановитьТекст(ДанныеXML); 
			Текст.Записать(ПутьКФайлу, "UTF-8");
			
			СообщениеОбОшибке = ОтправитьФайлНаFTPСервер(ПутьКФайлу, FTPСоединение, СтрокаНомерЗаявки.НомерЗаявки + ".xml");
			Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
				ШаблонСтроки = НСтр("ru='При отправке заказа № ""%1"" произошла ошибка по причине: ""%2""!'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Заказ.Номер, СообщениеОбОшибке);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
				ЕстьОшибкиПриОтправкеЗаказов = Истина;
				Продолжить;
			Иначе
				ЗаказОбъект = Заказ.Ссылка.ПолучитьОбъект();
				ЗаказОбъект.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отправлен;
				Попытка
					ЗаказОбъект.Записать();
				Исключение
					// Сообщение об ошибке, если заказ успешно отправлен, но не удалось изменить его состояние.
					СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ШаблонСтроки = НСтр("ru='При изменении состояния заказа № ""%1"" произошла ошибка по причине: ""%2""!'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Заказ.Номер, СообщениеОбОшибке);
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибкиПриОтправкеЗаказов Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Заказы уже были отправлены в лабораторию или в описи отсутствуют заказы, доступные для отправки!'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получает результаты по заказу из лаборатории КДЛ.
Процедура ПолучитьРезультатыАнализов(ТекстОшибки) Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Лаборатории.Ссылка КАК Лаборатория,
	|	Лаборатории.Наименование
	|ИЗ
	|	Справочник.Лаборатории КАК Лаборатории
	|ГДЕ
	|	НЕ Лаборатории.ПометкаУдаления
	|	И Лаборатории.ВнешняяЛаборатория = ЗНАЧЕНИЕ(Перечисление.ВнешниеЛаборатории.КДЛ)"
	;	
	
	ВыборкаЛабораторииКДЛ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЛабораторииКДЛ.Следующий() Цикл
		
		ТекстОшибкиЛаборатории = "";
		XML_ПолучитьФайлыРезультатовАнализов(ВыборкаЛабораторииКДЛ.Лаборатория, ТекстОшибкиЛаборатории);
		Если ЗначениеЗаполнено(ТекстОшибкиЛаборатории) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки,
				ВыборкаЛабораторииКДЛ.Наименование + ": " + ТекстОшибкиЛаборатории, Символы.ПС);
		КонецЕсли;
		
		ТекстОшибкиЛаборатории = "";
		PDF_ПолучитьФайлыРезультатовАнализов(ВыборкаЛабораторииКДЛ.Лаборатория, ТекстОшибкиЛаборатории);
		Если ЗначениеЗаполнено(ТекстОшибкиЛаборатории) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки,
				ВыборкаЛабораторииКДЛ.Наименование + ": " + ТекстОшибкиЛаборатории, Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак использования анонимной отправки анализов.
// 
// Возвращаемое значение:
//  Булево 
//
Функция ИспользуетсяАнонимнаяОтправкаАнализов() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами_СлужебныеПроцедуры // Отправка заказов и получение результатов

Процедура XML_ПолучитьФайлыРезультатовАнализов(Лаборатория, ТекстОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресСайта  = СтрЗаменить(НРег(НастройкиВзаимодействия.FTPСоединениеПуть), "ftp://", "");
	Порт        = ?(ЗначениеЗаполнено(НастройкиВзаимодействия.FTPСоединениеПорт), НастройкиВзаимодействия.FTPСоединениеПорт, 21);
	Логин       = НастройкиВзаимодействия.FTPСоединениеПользователь;
	Пароль      = НастройкиВзаимодействия.FTPСоединениеПароль;
	ИмяКаталога = "/Output";
	
	Если ПустаяСтрока(АдресСайта) Или ПустаяСтрока(Логин) Или ПустаяСтрока(Пароль) Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ПустойПараметрПодключения;
		Возврат;
	КонецЕсли;
	
	Попытка
		FTPСоединение = ПолучитьFTPСоединение(АдресСайта, Порт, Логин, Пароль);
	Исключение
		СообщениеОбОшибке = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОшибкаПодключения;
		ШаблонСтроки = НСтр("ru='Произошла ошибка при подключении к FTP по причине: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, СообщениеОбОшибке);
		Возврат;
	КонецПопытки;
	
	// Инициализация обработки транспорта.
	ОбработкаТранспорта = ИнициализироватьОбработкуТранспорта(НастройкиВзаимодействия);
	ОбработкаТранспорта.FTPСоединениеПуть = НастройкиВзаимодействия.FTPСоединениеПуть + ИмяКаталога;
	ОбработкаТранспорта.Инициализация();
	ОбработкаТранспорта.ВыполнитьДействияПередОбработкойСообщения();
	
	ПорцияСчитыванияФайлов = 50;
	ОбработаноФайлов = 0;
	КоличествоОбрабатываемыхЗаРазФайлов = ?(НастройкиВзаимодействия.КоличествоОбрабатываемыхЗаРазФайлов = 0, ПорцияСчитыванияФайлов, НастройкиВзаимодействия.КоличествоОбрабатываемыхЗаРазФайлов);
	ТекстОшибкиFTP = "";
	
	// Складываем данные по полученным результатам в эту таблицу, потом передаем эту таблицу в общий модуль
	// для обработки отметок медосмотра
	ТЗДляПростановкиОтметокПМО = МедосмотрыСервер.ПолучитьПустуюТЗДляПростановкиОтметокПМО();
	
	Пока ОбработаноФайлов < КоличествоОбрабатываемыхЗаРазФайлов Цикл
		
		Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
			Прервать;
		КонецЕсли;
		
		ФайлыРезультатовАнализов = ОбработкаТранспорта.ПолучитьТекстыФайловКаталога(, 5, FTPСоединение);
		
		Если ФайлыРезультатовАнализов = Неопределено Тогда
			Если ОбработаноФайлов = 0 Тогда
				ТекстОшибки = ОбработкаТранспорта.СтрокаСообщенияОбОшибке;
			КонецЕсли;
			Прервать;
		Иначе
			
			ОбработаноФайлов = ОбработаноФайлов + ФайлыРезультатовАнализов.Количество();
			УстановитьПривилегированныйРежим(Истина);
			
			Для Каждого ФайлРезультата Из ФайлыРезультатовАнализов Цикл
				
				НомерЗаявки = ПолучитьШтрихкод(ФайлРезультата.ИмяФайла);
				Если Не ЗначениеЗаполнено(НомерЗаявки) Тогда
					Продолжить;
				КонецЕсли;
				
				Заказ = НайтиЗаказПоНомеруЗаявки(НомерЗаявки);
				Если Заказ.Пустая()
					Или Заказ.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Обработан
					Или Заказ.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отменен
				Тогда					
					ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.ИмяФайла, Ложь, FTPСоединение);
					
					Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
						Прервать;
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
					
				РезультатыВHTML = ПолучитьРезультатыВHTML(ФайлРезультата.ДанныеФайла);
				
				// Создание приема на основании заказа.
				ПриемОбъект = Документы.Прием.СоздатьДокумент();
				
				МассивКодПробы = Новый Массив;
				МассивКодПробы.Добавить(НомерЗаявки);
				
				ИсследованияПолученные = ЗаполнитьПрием(ПриемОбъект, Заказ, НомерЗаявки, РезультатыВHTML);
				ПриемОбъект.Дата = ТекущаяДата();
				ПриемОбъект.Врач = НастройкиВзаимодействия.Лаборант;
				Попытка
					ПриемОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ПриемОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
				
				// Запишем в регистр для автоотправки результатов.
				Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте") Тогда
					Если Не ПриемОбъект.Ссылка.Пустая() Тогда 
						НЗНаАвтоотправку = РегистрыСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.СоздатьНаборЗаписей();
						НЗНаАвтоотправку.Отбор.Документ.Установить(ПриемОбъект.Ссылка);
						Стр = НЗНаАвтоотправку.Добавить();
						Стр.Документ = ПриемОбъект.Ссылка;
						Стр.Период = ПриемОбъект.Дата;
						Попытка
							НЗНаАвтоотправку.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
					
				// Обновление статуса заказа.
				ОбновитьСтатусЗаказа(Заказ, НомерЗаявки, РезультатыВHTML, ИсследованияПолученные);
				
				ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.ИмяФайла, Истина, FTPСоединение);
				
				Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
					Прервать;
				КонецЕсли;
				
				// Добавляем в ТЗ ТЗДляПростановкиОтметокПМО данные обработанных анализов
				Для Каждого Исследование Из ИсследованияПолученные Цикл
					НоваяСтрокаТЗПМО = ТЗДляПростановкиОтметокПМО.Добавить();
					НоваяСтрокаТЗПМО.КодПробы = Исследование.КодПробы;
					НоваяСтрокаТЗПМО.ЗаказВоВнешююЛабораторию = Заказ.Ссылка;
					НоваяСтрокаТЗПМО.Прием = ПриемОбъект.Ссылка;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// Передаем ТЗДляПростановкиОтметокПМО для обработки
	МедосмотрыСервер.УстановитьОтметкиДляДействийПМОПриСозданииДокументаИзВнЛаборатории(ТЗДляПростановкиОтметокПМО);
	
КонецПроцедуры

Процедура PDF_ПолучитьФайлыРезультатовАнализов(Лаборатория, ТекстОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не НастройкиВзаимодействия.ЗагружатьРезультатыВФорматеPDF Тогда
		Возврат;
	КонецЕсли;
	
	АдресСайта  = СтрЗаменить(НРег(НастройкиВзаимодействия.FTPСоединениеПуть), "ftp://", "");
	Порт        = ?(ЗначениеЗаполнено(НастройкиВзаимодействия.FTPСоединениеПорт), НастройкиВзаимодействия.FTPСоединениеПорт, 21);
	Логин       = НастройкиВзаимодействия.FTPСоединениеПользователь;
	Пароль      = НастройкиВзаимодействия.FTPСоединениеПароль;
	ИмяКаталога = "/OutputPDF";
	
	Если ПустаяСтрока(АдресСайта) Или ПустаяСтрока(Логин) Или ПустаяСтрока(Пароль) Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ПустойПараметрПодключения;
		Возврат;
	КонецЕсли;
	
	Попытка
		FTPСоединение = ПолучитьFTPСоединение(АдресСайта, Порт, Логин, Пароль);
	Исключение
		СообщениеОбОшибке = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОшибкаПодключения;
		ШаблонСтроки = НСтр("ru='Произошла ошибка при подключении к FTP по причине: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, СообщениеОбОшибке);
		Возврат;
	КонецПопытки;
	

	// Инициализация обработки транспорта.
	ОбработкаТранспорта = ИнициализироватьОбработкуТранспорта(НастройкиВзаимодействия);
	ОбработкаТранспорта.FTPСоединениеПуть = НастройкиВзаимодействия.FTPСоединениеПуть + ИмяКаталога;
	ОбработкаТранспорта.Инициализация();
	ОбработкаТранспорта.ВыполнитьДействияПередОбработкойСообщения();
	
	ПорцияСчитыванияФайлов = 50;
	ОбработаноФайлов = 0;
	КоличествоОбрабатываемыхЗаРазФайлов = ?(НастройкиВзаимодействия.КоличествоОбрабатываемыхЗаРазФайлов = 0, ПорцияСчитыванияФайлов, НастройкиВзаимодействия.КоличествоОбрабатываемыхЗаРазФайлов);
	ТекстОшибкиFTP = "";
	
	Пока ОбработаноФайлов < КоличествоОбрабатываемыхЗаРазФайлов Цикл
		
		Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
			Прервать;
		КонецЕсли;
		
		Попытка
			ФайлыРезультатовАнализов = FTPСоединение.НайтиФайлы(ИмяКаталога, "*.*", Ложь);
		Исключение
		КонецПопытки;
		
		Если ФайлыРезультатовАнализов = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка при поиске файлов PDF на FTP-сервере.'");
			Прервать;
		КонецЕсли;
			
		Если ФайлыРезультатовАнализов.Количество() = 0 Тогда
			Прервать;
		Иначе
			
			ОбработаноФайлов = ОбработаноФайлов + ФайлыРезультатовАнализов.Количество();
			УстановитьПривилегированныйРежим(Истина);
			Для Каждого ФайлРезультата Из ФайлыРезультатовАнализов Цикл
				
				НомерЗаявки = ПолучитьШтрихкод(ФайлРезультата.Имя);
				Если Не ЗначениеЗаполнено(НомерЗаявки) Тогда
					Продолжить;
				КонецЕсли;
				
				Заказ = НайтиЗаказПоНомеруЗаявки(НомерЗаявки);
				Если Заказ.Пустая()
					Или Заказ.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Обработан
					Или Заказ.Состояние = Перечисления.СостоянияЗаказовЛаборатории.Отменен
				Тогда					
					ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.Имя, Ложь, FTPСоединение);
					
					Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
						Прервать;
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка КАК Ссылка,
				|	&НомерЗаявки КАК НомерЗаявки,
				|	Прием.Ссылка КАК Прием,
				|	Прием.Дата КАК ДатаПриема
				|ИЗ
				|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием КАК Прием
				|		ПО ЗаказВоВнешнююЛабораториюИсследования.Ссылка = Прием.Основание
				|			И (НЕ Прием.ПометкаУдаления)
				|			И (ЗаказВоВнешнююЛабораториюИсследования.Ссылка = &Ссылка)
				|			И (ЗаказВоВнешнююЛабораториюИсследования.КодПробы ПОДОБНО &ШтрихКод)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДатаПриема"
				;
				
				Запрос.УстановитьПараметр("Ссылка", Заказ);
				Запрос.УстановитьПараметр("ШтрихКод", НомерЗаявки + "%");
				Запрос.УстановитьПараметр("НомерЗаявки", НомерЗаявки);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если РезультатЗапроса.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				
				Выборка = РезультатЗапроса.Выбрать();
				
				ОшибкаПриПолученииФайла = Ложь;
				
				Пока Выборка.Следующий() Цикл
					
					ПутьКФайлу = КаталогВременныхФайлов() + ФайлРезультата.Имя;
					
					Попытка
						FTPСоединение.Получить(ФайлРезультата.ПолноеИмя, ПутьКФайлу);
					Исключение
						ШаблонОшибкиFTP = НСтр("ru = 'Ошибка при получении файла PDF ""%1"" с FTP-сервера.'");
						ТекстОшибкиFTP = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиFTP, ФайлРезультата.Имя);
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
						
						ОшибкаПриПолученииФайла = Истина;
						Прервать;
					КонецПопытки;
					
					мсВладельцы = Новый Массив;
					мсВладельцы.Добавить(Выборка.Прием);
					ФайлыДокумента = РаботаСФайлами.ПолучитьВсеФайлы(мсВладельцы);
					
					ФайлУжеДобавлен = Ложь;
					Если ТипЗнч(ФайлыДокумента) = Тип("Массив") Тогда 
						Для Каждого ФайлДокумента Из ФайлыДокумента Цикл
							Если ФайлДокумента.Наименование = ФайлРезультата.Имя Тогда 
								ФайлУжеДобавлен = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Не ФайлУжеДобавлен Тогда
						РаботаСФайлами.ДобавитьНовыйФайл(Выборка.Прием, ПутьКФайлу);
						
						// Запишем в регистр для автоотправки результатов.
						Если УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте") Тогда
							Если Не Выборка.Прием.Пустая() Тогда
								НЗНаАвтоотправку = РегистрыСведений.ОчередьНаОтправкуРезультатовВнешнихЛабораторийПоЭлектроннойПочте.СоздатьНаборЗаписей();
								НЗНаАвтоотправку.Отбор.Документ.Установить(Выборка.Прием);
								Стр = НЗНаАвтоотправку.Добавить();
								Стр.Документ = Выборка.Прием;
								Стр.Период = Выборка.ДатаПриема;
								Попытка
									НЗНаАвтоотправку.Записать();
								Исключение
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					УдалитьФайлы(ПутьКФайлу);
					
				КонецЦикла;
				
				Если ОшибкаПриПолученииФайла Тогда
					Прервать;	
				КонецЕсли;
				
				ТекстОшибкиFTP = ОбработкаТранспорта.Helix_ВыполнитьПеремещениеФайлаНаFTPСервер(ФайлРезультата.Имя, Истина, FTPСоединение);
				
				Если Не ПустаяСтрока(ТекстОшибкиFTP) Тогда
					ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОшибки, ТекстОшибкиFTP, Символы.ПС);
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЗаказПоНомеруЗаявки(НомерЗаявки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихКод", "%" + НомерЗаявки + "%");
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
	|ГДЕ
	|	ЗаказВоВнешнююЛабораториюИсследования.КодПробы ПОДОБНО &ШтрихКод
	|	И НЕ ЗаказВоВнешнююЛабораториюИсследования.Ссылка.ПометкаУдаления"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Заказ = Выборка.Ссылка;
	Иначе 
		Заказ = Документы.ЗаказВоВнешнююЛабораторию.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Заказ;
	
КонецФункции

Функция ПолучитьШтрихкод(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ПоляИмениФайла = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Файл.ИмяБезРасширения, "_");
	Если ПоляИмениФайла.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе 
		Возврат ПоляИмениФайла[0];
	КонецЕсли;

КонецФункции

Функция ЗаполнитьПрием(ЭтотОбъект, ЗаказСсылка, НомерЗаявки, РезультатыВHTML = Неопределено)
                               
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаказСсылка,, "Дата, Номер, ПометкаУдаления, Проведен, Ссылка");
	
	ЭтотОбъект.Основание = ЗаказСсылка;
	МедКартаПрием = ОтраслевыеДополнения.НайтиМедкартуПриемПоЗаказуВоВнешнююЛабораторию(ЗаказСсылка, ОтраслевыеДополнения.НоменклатурыЗаказа(ЗаказСсылка));
	ЭтотОбъект.МедицинскаяКарта = МедКартаПрием.МедКарта;
	ЭтотОбъект.ПервичныйПрием = МедКартаПрием.Прием;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ПервичныйПрием) Тогда
		ЭтотОбъект.ЭтоПервичный = Истина;
	КонецЕсли;
	
	Если РезультатыВHTML <> Неопределено Тогда 
		ЭтотОбъект.Осмотр = РезультатыВHTML;
	КонецЕсли;
	
	ИсследованияПолученные = Новый Массив;
	
	Для Каждого СтрокаИсследования Из ЗаказСсылка.Исследования Цикл
		КодПробы = СтрокаИсследования.КодПробы;
		
		Если (СтрНайти(КодПробы, НомерЗаявки) <> 0 Или ПустаяСтрока(КодПробы))
			И СтрокаИсследования.Состояние <> Перечисления.СостоянияЗаказовЛаборатории.ПолученРезультат
		Тогда  
			ИсследованияПолученные.Добавить(СтрокаИсследования);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого СтрокаИсследование Из ИсследованияПолученные Цикл
		НоваяСтрока = ЭтотОбъект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсследование);
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НомерПробы = СтрокаИсследование.КодПробы;
		НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
	КонецЦикла;
	
	Возврат ИсследованияПолученные;
                
КонецФункции

Функция ПолучитьРезультатыВHTML(ДанныеФайла)

	СтрокаПреобразования =
	"<?xml version=""1.0"" encoding=""ISO-8859-1""?>
	|<xsl:stylesheet version=""1.0""
	|	xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
	|	<xsl:template match=""/"">
	|		<html>
	|			<body>
	|				<xsl:for-each select=""//Pages/Page"">
	|					<xsl:for-each select=""Section"">
	|						<h3>
	|							<xsl:value-of select=""SectionName""/>
	|						</h3>
	|						<xsl:variable name=""SectionID"" select=""@SectionID""/>
	|						<table border=""1"">
	|							<tr>
	|								<th>№</th>
	|								<th>Наименование исследования</th>
	|								<th>Результат</th>
	|								<th>Нормальные значения</th>
	|								<th>Ед. изм.</th>
	|								<th>Комментарий</th>
	|							</tr>
	|							<xsl:for-each select=""//Tests/Test"">
	|								<xsl:for-each select=""TestPosition"">
	|									<xsl:if test=""SectionID=$SectionID"">
	|										<tr>
	|											<td>
	|												<xsl:value-of select=""SectionItem""/>
	|											</td>
	|											<td>
	|												<xsl:value-of select=""../TestName""/>
	|											</td>
	|											<td>
	|												<xsl:value-of select=""../Value""/>
	|											</td>
	|											<td>
	|												<xsl:value-of select=""../NormalValue""/>
	|											</td>
	|											<td>
	|												<xsl:value-of select=""../Dimension""/>
	|											</td>
	|											<td>
	|												<xsl:value-of select=""../TestComment""/>
	|											</td>
	|										</tr>
	|									</xsl:if>
	|								</xsl:for-each>
	|							</xsl:for-each>
	|						</table>
	|					</xsl:for-each>
	|				</xsl:for-each>
	|			</body>
	|		</html>
	|	</xsl:template>
	|</xsl:stylesheet>"
	;
	
	Преобразование = Новый ПреобразованиеXSL;
	Преобразование.ЗагрузитьИзСтроки(СтрокаПреобразования);
	
	Возврат Преобразование.ПреобразоватьИзСтроки(ДанныеФайла);
	
КонецФункции	

Процедура ОбновитьСтатусЗаказа(ЗаказСсылка, НомерЗаявки, РезультатыВHTML = Неопределено, ИсследованияПолученные = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеПолученРезультат = Перечисления.СостоянияЗаказовЛаборатории.ПолученРезультат;
	
	ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
	ТЧИсследования = ЗаказОбъект.Исследования;
	
	ПолученРезультат = Ложь;
	
	Для Каждого СтрИсследованияПолученные Из ИсследованияПолученные Цикл
		МассивИсследования = ТЧИсследования.НайтиСтроки(Новый Структура("КодПробы", СтрИсследованияПолученные.КодПробы));
		Для Каждого СтрМассивИсследования Из МассивИсследования Цикл
			СтрМассивИсследования.Состояние = СостояниеПолученРезультат;
			Если Не ПолученРезультат Тогда
				ПолученРезультат = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПолученРезультат Тогда
		Для Каждого СтрИсследования Из ЗаказОбъект.Исследования Цикл
			Если ПустаяСтрока(СтрИсследования.КодПробы) Тогда
				СтрИсследования.Состояние = СостояниеПолученРезультат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаИсследования = ЗаказОбъект.Исследования.Выгрузить(, "Состояние");
	ТаблицаИсследования.Свернуть("Состояние");
	
	Если ТаблицаИсследования.Количество() = 1 
		И ТаблицаИсследования.Найти(СостояниеПолученРезультат) <> Неопределено
	Тогда 
		ЗаказОбъект.Состояние = СостояниеПолученРезультат;
	КонецЕсли;
	
	ТЧРезультаты = ЗаказОбъект.Результаты; 
	Если ТЧРезультаты.Найти(НомерЗаявки) = Неопределено Тогда
		стрРезультат = ТЧРезультаты.Добавить();
		стрРезультат.КодПробы = НомерЗаявки;
		стрРезультат.Результат = Новый ХранилищеЗначения(РезультатыВHTML, Новый СжатиеДанных(3));
	КонецЕсли;
	
	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВвода

Функция ПроверитьКорректностьКодовПроб(КодыПроб, Знач ПроверятьПустые) Экспорт
	
	СообщениеОбОшибке = "";
	
	Если ПроверятьПустые = Неопределено Тогда
		ПроверятьПустые = Истина;
	КонецЕсли;
	
	ПредставлениеЛаборатории = Строка(Перечисления.ВнешниеЛаборатории.КДЛ);
	
	Для Сч = 1 По КодыПроб.Количество() Цикл
		
		КодПробы = КодыПроб[Сч - 1];
		
		ТекстОшибки = "";
		Если Не КодПробыКорректен(КодПробы, ПроверятьПустые, ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СообщениеОбОшибке,
				ЛабораторияСервер.СформироватьТекстОшибкиКодаПробы(Сч, ТекстОшибки, ПредставлениеЛаборатории),
				Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СообщениеОбОшибке;
		
КонецФункции

Функция КодПробыКорректенДляЗаказа(КодПробы, ТекстОшибки = "") Экспорт
	
	Возврат КодПробыКорректен(КодПробы, Истина, ТекстОшибки);
	
КонецФункции

// Возвращает Истина, если код пробы (штрихкод образца) корректен
Функция КодПробыКорректен(КодПробы, ПроверятьПустые = Ложь, ТекстОшибки = "")
	
	Результат = Истина;
	
	Если ПроверятьПустые И ПустаяСтрока(КодПробы) Тогда
		Результат = Ложь;
		ТекстОшибки = ЛабораторияСервер.ТекстОшибкиПустойКодПробы();
	ИначеЕсли Не ПустаяСтрока(КодПробы) Тогда
		// Код пробы должен быть 12 цифр.
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодПробы)
			Или СтрДлина(КодПробы) <> 12
		Тогда
			Результат = Ложь;
			ТекстОшибки = НСтр("ru='Код пробы должен быть 12 цифр'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

Функция ОпределитьКонтактныйТелефон(Телефоны)
	
	Если Телефоны.Количество() <> 0 Тогда
		
		ПроверяемыеВариантыТелефона = Новый Массив;
		
		Для Каждого СтруктураТелефона Из Телефоны Цикл
			
			ПроверяемыеВариантыТелефона.Очистить();
			ПроверяемыеВариантыТелефона.Добавить(СтруктураТелефона.Представление);
			ПроверяемыеВариантыТелефона.Добавить(СокрЛП(СтруктураТелефона.Поле1) + СокрЛП(СтруктураТелефона.Поле2) + СокрЛП(СтруктураТелефона.Поле3));
			ПроверяемыеВариантыТелефона.Добавить(СтруктураТелефона.Поле3);
			
			Для Каждого Телефон Из ПроверяемыеВариантыТелефона Цикл
				
				ТелефонФорматированный = ФорматТелефона(Телефон);
				Если ЗначениеЗаполнено(ТелефонФорматированный) Тогда
					Возврат ТелефонФорматированный;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ФорматТелефона(Телефон)
	
	Результат = "";
		
	ТелефонЦифры = "";
	Для Сч = 1 По СтрДлина(Телефон) Цикл
		Символ = Сред(Телефон, Сч, 1);
		Если ОбщегоНазначенияКлиентСервер.ЭтоЦифра(Символ) Тогда
			ТелефонЦифры = ТелефонЦифры + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(ТелефонЦифры) = 11 Или СтрДлина(ТелефонЦифры) = 10 Тогда
		
		Результат = Прав(ТелефонЦифры, 10);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматEmail(Знач АдресаПочты)
	
	Если ТипЗнч(АдресаПочты) <> Тип("Массив") Тогда
		Адрес = АдресаПочты;
		АдресаПочты = Новый Массив;
		АдресаПочты.Добавить(Адрес);
	КонецЕсли;
	
	Для Каждого Адрес Из АдресаПочты Цикл
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Адрес) Тогда
			Возврат Адрес;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ТранспортСообщений

Функция ПолучитьFTPСоединение(АдресСайта, Порт, Логин, Пароль)
	
	Возврат Новый FTPСоединение(АдресСайта, Порт, Логин, Пароль,, Истина, 60);
	
КонецФункции

Функция ИнициализироватьОбработкуТранспорта(НастройкиВзаимодействия)
	
	ОбработкаТранспорта = Обработки.ТранспортСообщенийОбменаFTP.Создать();
	ОбработкаТранспорта.FTPСоединениеПароль = НастройкиВзаимодействия.FTPСоединениеПароль;
	ОбработкаТранспорта.FTPСоединениеПользователь = НастройкиВзаимодействия.FTPСоединениеПользователь;
	ОбработкаТранспорта.FTPСоединениеПуть = НастройкиВзаимодействия.FTPСоединениеПуть;
	ОбработкаТранспорта.FTPСоединениеПорт = НастройкиВзаимодействия.FTPСоединениеПорт;
	ОбработкаТранспорта.FTPСжиматьФайлИсходящегоСообщения = Ложь;
	ОбработкаТранспорта.FTPСоединениеМаксимальныйДопустимыйРазмерСообщения = 0;
	ОбработкаТранспорта.FTPСоединениеПассивноеСоединение = Истина;
	
	ОбработкаТранспорта.Инициализация();
	
	Возврат ОбработкаТранспорта;
	
КонецФункции

Функция ОтправитьФайлНаFTPСервер(ПутьКФайлу, FTPСоединение, ИмяФайлаСРасширением = Неопределено)
	
	Если ИмяФайлаСРасширением = Неопределено Тогда
		ИмяФайлаСРасширением = Строка(Новый УникальныйИдентификатор) + ".xml";
	КонецЕсли;
	
	Попытка
		FTPСоединение.Записать(ПутьКФайлу, ИмяФайлаСРасширением);
	Исключение
		Возврат НСтр("ru='Не удалось записать файл на FTP-сервере лаборатории КДЛ'");
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ЭтикеткиКонтейнеров

// Используется ли печать этикеток в интеграции с лабораторией.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПечатьЭтикеток() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруПечатиЭтикеток(Знач ДанныеКонтейнеров, Лаборатория, ДокументСсылка, Клиент, ОписаниеОшибки = "") Экспорт
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОтключенаИнтеграция;
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибки, ТекстОшибки, Символы.ПС);
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкаВзаимодействия = ПолучитьНастройкиВзаимодействия(Лаборатория);
	Если НастройкаВзаимодействия = Неопределено Тогда
		ТекстОшибки = КДЛ_ИнтеграцияСерверПовтИсп.СообщенияОбОшибках().ОтсутствуетНастройка;
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибки, ТекстОшибки, Символы.ПС);
		Возврат Неопределено;
	КонецЕсли;
		
	ВнешняяКомпонента = ГенерацияШтрихкодаСерверПовтИсп.ПодключитьКомпонентуГенерацииИзображенияШтрихкода("");
	Если ВнешняяКомпонента = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'");
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибки, ТекстОшибки, Символы.ПС);
		Возврат Неопределено;
	КонецЕсли;
	
	Таб = Новый ТабличныйДокумент;
	
	// Выведем таблицу на экран.
	Таб.АвтоМасштаб = Истина;
	Таб.КлючПараметровПечати = "ЭтикеткаОбразца_KDL";
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Таб.ПолеСверху = 0;
	Таб.ПолеСнизу  = 0;
	Таб.ПолеСправа = 0;
	Таб.ПолеСлева  = 0;	
	
	МассивКодыПроб = Новый Массив;
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Для Каждого Контейнер Из ДанныеКонтейнеров Цикл 				
		
		КодШтрихкода = Контейнер.КодПробы;
		
		Если Не ЗначениеЗаполнено(КодШтрихкода) Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если МассивКодыПроб.Найти(КодШтрихкода) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		КонтейнерПредставление = Контейнер.Контейнер + " " + Контейнер.КонтейнерПредставление;
		
		Область = ПолучитьОбластьПечатиЭтикеток(Клиент, КодШтрихкода, НастройкаВзаимодействия.НаименованиеОтправителя, ДокументСсылка.Дата, КонтейнерПредставление, НастройкаВзаимодействия.РазмерЭтикетки);		
		
		ТипКода = Штрихкодирование.ПолучитьЗначениеТипаШтрихкодаДляЭУ(ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128);
				
		Для Каждого Рисунок Из Область.Рисунки Цикл
			Если Лев(Рисунок.Имя,8) = Штрихкодирование.ПолучитьИмяПараметраШтрихкод() Тогда
				
				Если ВнешняяКомпонента = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыШтрихкода = Новый Структура;
				
				ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Штрихкод",        КодШтрихкода);
				ПараметрыШтрихкода.Вставить("ТипКода",         ?(ТипКода >= 0, ТипКода, 1));
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
				ПараметрыШтрихкода.Вставить("РазмерШрифта",    8);			
				Рисунок.Картинка = Штрихкодирование.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);			
			КонецЕсли;
		КонецЦикла;		
		Таб.ВывестиГоризонтальныйРазделительСтраниц();
		Таб.Вывести(Область);		
		
		МассивКодыПроб.Добавить(КодШтрихкода);
		
	КонецЦикла;
	
	Возврат УниверсальныеМеханизмыСервер.НапечататьДокумент(Таб, 1,, "Этикетки");
	
КонецФункции

Функция ПолучитьОбластьПечатиЭтикеток(Клиент, КодШтрихкода, ИдентификаторЗаказчика, Дата, Контейнер, РазмерЭтикетки)
	
	МакетТабДокумента = РегистрыСведений.КДЛ_НастройкиВзаимодействия.ПолучитьМакет("КДЛ_МакетЭтикетки");
	Область = МакетТабДокумента.ПолучитьОбласть("Этикетка");
	Область.Параметры.Установить(0, ИдентификаторЗаказчика);
	Область.Параметры.Установить(1, CRMСервер.ПолучитьФИООбъекта(Клиент));
	Область.Параметры.Установить(2, Дата);
	Область.Параметры.Установить(3, Контейнер);
	Область.Параметры.Установить(4, КодШтрихкода);
	
	// Форматируем документ согласно устройству печати.	
	ШиринаЭтикетки = Число(Лев(РазмерЭтикетки, 3));
	ВысотаЭтикетки = Число(Прав(РазмерЭтикетки,3));
	
	Если ШиринаЭтикетки = Неопределено Тогда ШиринаЭтикетки = 20 КонецЕсли;
	
	// Настройка размера.
	// 1. Высота.
	Если ВысотаЭтикетки <> 0 Тогда
		
		ОбщаяВысота = 0;
		КоэфВысоты  = 1.3;
		
		Для сч = 1 По Область.Высотатаблицы Цикл
			ТекОбласть = Область.Область(сч,, сч);
			ОбщаяВысота = ОбщаяВысота + ТекОбласть.ВысотаСтроки;
		КонецЦикла;
		
		Если ОбщаяВысота = 0 Тогда
			ОбщаяВысота = 1;
		КонецЕсли;
		
		Для сч = 1 По Область.Высотатаблицы Цикл
			ТекОбласть = Область.Область(сч,, сч);
			ТекОбласть.ВысотаСтроки = ТекОбласть.ВысотаСтроки/ОбщаяВысота * ВысотаЭтикетки * КоэфВысоты;	
		КонецЦикла;
		
	КонецЕсли;	
	
	// 2. Ширина.
	Если ШиринаЭтикетки <> 0 Тогда
		
		ОбщаяШирина = 0;
		Коэф		= 0.55;
		
		Для сч = 1 По Область.ШиринаТаблицы Цикл
			ТекОбласть = Область.Область(, сч,, сч);
			ОбщаяШирина = ОбщаяШирина + ?(ТекОбласть.ШиринаКолонки = 0, 1, ТекОбласть.ШиринаКолонки);
		КонецЦикла;
		
		Для сч = 1 По Область.ШиринаТаблицы Цикл
			ТекОбласть = Область.Область(, сч,, сч);
			ТекОбласть.ШиринаКолонки = ТекОбласть.ШиринаКолонки/ОбщаяШирина * ШиринаЭтикетки * Коэф;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Область;
КонецФункции

Функция ПолучитьШаблонЭтикеткиЛаборатории() Экспорт
	Возврат Справочники.ШаблоныЭтикетокИЦенниковБПО.ЭтикеткаКДЛ;	
КонецФункции

#КонецОбласти

#Область ОписьЗаказов

Функция ПечатьОписиЗаказовДляЛаборатории(ОписьЗаказовСсылка) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если Не ЛабораторияСервер.НастройкиУчетаЛабораторий().КДЛ_ИспользуетсяИнтеграцияСКДЛ Тогда
		Возврат ТабДокумент;
	КонецЕсли;

	НастройкиВзаимодействия = ПолучитьНастройкиВзаимодействия(ОписьЗаказовСсылка.Лаборатория);
	Если НастройкиВзаимодействия = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Макет = РегистрыСведений.КДЛ_НастройкиВзаимодействия.ПолучитьМакет("КДЛ_ОписьЗаказов");
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТН");
	ОбластьМакета.Параметры.Отправитель = НастройкиВзаимодействия.ИдентификаторОтправителя + ", "
		+ НастройкиВзаимодействия.НаименованиеОтправителя;
	ОбластьМакета.Параметры.ДатаЧисло = Формат(ОписьЗаказовСсылка.Дата, "ДФ=dd");
	ДатаМесяц = Формат(ОписьЗаказовСсылка.Дата, "ДФ=MMMМ");
	Если СтрЗаканчиваетсяНа(ДатаМесяц, "ь") Или СтрЗаканчиваетсяНа(ДатаМесяц, "й") Тогда 
		ДатаМесяц = НРег(СтрЗаменить(СтрЗаменить(ДатаМесяц, "ь", "я"), "й", "я"));
	Иначе 
		ДатаМесяц = НРег(ДатаМесяц + "а");	
	КонецЕсли;
	ОбластьМакета.Параметры.ДатаМесяц = ДатаМесяц;
	ОбластьМакета.Параметры.ДатаГод = Формат(ОписьЗаказовСсылка.Дата, "ДФ=yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
		
	мсОписьЗаказов = ОписьЗаказовСсылка.СписокЗаказов.ВыгрузитьКолонку("ЗаказВЛабораторию");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказВоВнешнююЛабораториюИсследования.КодПробы КАК КодПробы,
	|	ЗаказВоВнешнююЛабораториюИсследования.ИД КАК ИД,
	|	ЗаказВоВнешнююЛабораториюИсследования.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Заказ
	|ИЗ
	|	Документ.ЗаказВоВнешнююЛабораторию.Исследования КАК ЗаказВоВнешнююЛабораториюИсследования
	|ГДЕ
	|	ЗаказВоВнешнююЛабораториюИсследования.Ссылка В(&мсОписьЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияНадАнализамиКонтейнеры.Ссылка КАК Ссылка,
	|	ДействияНадАнализамиКонтейнеры.НомерКонтейнера КАК НомерКонтейнера,
	|	ДействияНадАнализамиКонтейнеры.Контейнер КАК Контейнер,
	|	ДействияНадАнализамиКонтейнеры.КонтейнерПредставление КАК НаименованиеКонтейнера,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДействияНадАнализамиКонтейнеры.Контейнер) КАК КоличествоКонтейнеров
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Заказ КАК Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействияНадАнализами.Контейнеры КАК ДействияНадАнализамиКонтейнеры
	|			ПО ДействияНадАнализамиИсследования.Ссылка = ДействияНадАнализамиКонтейнеры.Ссылка
	|				И ДействияНадАнализамиИсследования.КлючСтроки = ДействияНадАнализамиКонтейнеры.КлючСтрокиИсследования
	|				И (ДействияНадАнализамиИсследования.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАнализов.Забор))
	|				И (ДействияНадАнализамиКонтейнеры.КодПробы В
	|					(ВЫБРАТЬ
	|						Заказ.КодПробы
	|					ИЗ
	|						Заказ КАК Заказ))
	|		ПО Заказ.ИД = ДействияНадАнализамиИсследования.ИД
	|			И Заказ.Номенклатура = ДействияНадАнализамиИсследования.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействияНадАнализамиКонтейнеры.Ссылка,
	|	ДействияНадАнализамиКонтейнеры.Контейнер,
	|	ДействияНадАнализамиКонтейнеры.КонтейнерПредставление,
	|	ДействияНадАнализамиКонтейнеры.НомерКонтейнера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Контейнер КАК Контейнер,
	|	Документы.НаименованиеКонтейнера КАК НаименованиеКонтейнера,
	|	СУММА(Документы.КоличествоКонтейнеров) КАК КоличествоКонтейнеров
	|ИЗ
	|	Документы КАК Документы
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Контейнер,
	|	Документы.НаименованиеКонтейнера";
	
	Запрос.УстановитьПараметр("мсОписьЗаказов",мсОписьЗаказов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда	
		
		ТаблицаСНК = Новый ТаблицаЗначений;
		ТаблицаСНК.Колонки.Добавить("НаименованиеКонтейнера");
		ТаблицаСНК.Колонки.Добавить("Контейнер");
		
		МакетСНК = РегистрыСведений.КДЛ_Контейнеры.ПолучитьМакет("СопоставлениеНаименованийКонтейнеров");
		Для Индекс = 1 По МакетСНК.ВысотаТаблицы Цикл
			СтрокаСНК = ТаблицаСНК.Добавить(); 
			СтрокаСНК.НаименованиеКонтейнера = МакетСНК.Область("R" + Строка(Индекс) + "C1").Текст;
			СтрокаСНК.Контейнер = МакетСНК.Область("R" + Строка(Индекс) + "C2").Текст;
		КонецЦикла;
		
		МассивКБИ = Новый Массив;
		
		МакетКБИ = РегистрыСведений.КДЛ_Контейнеры.ПолучитьМакет("КонтейнерыДляБактериологическогоИсследования");
		Для Индекс = 1 По МакетКБИ.ВысотаТаблицы Цикл
			МассивКБИ.Добавить(МакетКБИ.Область("R" + Строка(Индекс) + "C1").Текст); 
		КонецЦикла; 	
	
		ТаблицаКБИ = Новый ТаблицаЗначений;
		ТаблицаКБИ.Колонки.Добавить("НаименованиеКонтейнера");
		ТаблицаКБИ.Колонки.Добавить("Контейнер");
		ТаблицаКБИ.Колонки.Добавить("КоличествоКонтейнеров");
		
		НомерСтроки = 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТН");
	
		ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			
			Контейнер = ВыборкаРезультатаЗапроса.Контейнер;
			СтрокаСНК = ТаблицаСНК.Найти(Контейнер);
			
			Если СтрокаСНК <> Неопределено Тогда 
				НаименованиеКонтейнера = СтрокаСНК.НаименованиеКонтейнера;
			Иначе 
				НаименованиеКонтейнера = ВыборкаРезультатаЗапроса.НаименованиеКонтейнера;
			КонецЕсли;
			
			Если МассивКБИ.Найти(Контейнер) = Неопределено Тогда
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ОбластьМакета.Параметры.НаименованиеКонтейнера = НаименованиеКонтейнера;
				ОбластьМакета.Параметры.КоличествоКонтейнеров = ВыборкаРезультатаЗапроса.КоличествоКонтейнеров;
				ТабДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
			Иначе 
				СтрокаКБИ = ТаблицаКБИ.Добавить();
				СтрокаКБИ.НаименованиеКонтейнера = НаименованиеКонтейнера; 
				СтрокаКБИ.Контейнер = Контейнер; 
				СтрокаКБИ.КоличествоКонтейнеров = ВыборкаРезультатаЗапроса.КоличествоКонтейнеров; 
			КонецЕсли;
			
		КонецЦикла;	
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокиТНОкончание");
		ОбластьМакета.Параметры.НомерСтрокиДоп1 = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;	
		ОбластьМакета.Параметры.НомерСтрокиДоп2 = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;                        		
		ОбластьМакета.Параметры.НомерСтрокиДоп3 = НомерСтроки;		
		ТабДокумент.Вывести(ОбластьМакета);
	
		Если ТаблицаКБИ.Количество() <> 0 Тогда 
			
			ОбластьМакета = Макет.ПолучитьОбласть("РазделительТН");
			ТабДокумент.Вывести(ОбластьМакета);
			
			НомерСтроки = 1;
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТН");
			
			Для Каждого СтрокаКБИ Из ТаблицаКБИ Цикл
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ОбластьМакета.Параметры.НаименованиеКонтейнера = СтрокаКБИ.НаименованиеКонтейнера;
				ОбластьМакета.Параметры.КоличествоКонтейнеров = СтрокаКБИ.КоличествоКонтейнеров;
				ТабДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 	

	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТН");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьЗаголовки = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСообщениеОбОшибке(СообщенияОбОшибках, ТекстСообщения)
	
	Если ТипЗнч(СообщенияОбОшибках) <> Тип("Массив") Тогда
		СообщенияОбОшибках = Новый Массив;
	КонецЕсли;
	
	СообщенияОбОшибках.Добавить(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти
