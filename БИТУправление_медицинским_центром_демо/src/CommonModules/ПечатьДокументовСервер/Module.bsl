// Функция - Печать сервер
//
// Параметры:
//  Ссылка			 - ЛюбаяСсылка	 - ссылка на объект, печать окторого требуется выполнить.
//  Расшифровка				 - Структура	 - имя печатной формы.
//  КоличествоЭкземпляров	 - Число		 - экземпляров.
//  НаПринтер				 - Булево	 - 
// 
// Возвращаемое значение:
//  Структура - данные сформированной печатной формы.
//
Функция ПечатьСервер(Ссылка, Расшифровка, КоличествоЭкземпляров, НаПринтер) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") 
		Или ТипЗнч(Расшифровка) = Тип("Структура")
	Тогда
		Возврат ПечатьДокумента(Ссылка, Расшифровка, , НаПринтер)
	КонецЕсли;	
	
КонецФункции	

Функция ПечатьДокумента(СсылкаНаОбъект, ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь)
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		МенеджерОбъекта = Документы[МетаданныеОбъекта.Имя];
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		МенеджерОбъекта = Справочники[МетаданныеОбъекта.Имя];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = МенеджерОбъекта.Печать(СсылкаНаОбъект, ИмяМакета);
	ПолныйПутьКМакету = СсылкаНаОбъект.Метаданные().ПолноеИмя() + "." + ИмяМакета;
	СинонимМакета = Строка(СсылкаНаОбъект);
	
	Попытка
		СтруктураПечатныхФорм = МенеджерОбъекта.ПолучитьСтруктуруПечатныхФорм();
		СтруктураПечатныхФорм.Свойство(ИмяМакета, СинонимМакета);
	Исключение КонецПопытки;
	
	Возврат УниверсальныеМеханизмыСервер.НапечататьДокумент(ТабДокумент, 
															КоличествоЭкземпляров, 
															НаПринтер, 
															СсылкаНаОбъект, 
															СсылкаНаОбъект,
															,
															ИмяМакета,
															ПолныйПутьКМакету,
															СинонимМакета);

КонецФункции

// Напечатать печатную форму по умолчанию объекта.
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка	 - объект печати.
// 
// Возвращаемое значение:
//  Структура - данные сформированной печатной формы.
//
Функция НапечататьДокументПоУмолчаниюСервер(Ссылка) Экспорт
	Результат = УниверсальныеМеханизмыСервер.НапечататьДокументПоУмолчанию(Ссылка);
	Возврат Результат;
КонецФункции

// Получает имя печатной формы документа по умолчанию
//
// Параметры:
//  ИмяОбъекта	 - Строка	 - имя объекта метаданных.
//  ТипОбъекта	 - Строка	 - "Документ" или "Справочник".
// 
// Возвращаемое значение:
//  Строка. 
//
Функция ПолучитьИмяПечатнойФормыДокументаПоУмолчанию(ИмяОбъекта, ТипОбъекта) Экспорт
	
	ИмяНастройки = ?(ТипОбъекта = "Документ","",ТипОбъекта) + ИмяОбъекта; 
	
	ИмяПечатнойФормы = ХранилищеПользовательскихНастроекОтчетов.Загрузить(ИмяНастройки, "ПечатнаяФорма");
	Если ЗначениеЗаполнено(ИмяПечатнойФормы) Тогда
		
		ПечатнаяФормаНайдена = Ложь;
		СтруктураПечатныхФорм = ПолучитьСтруктуруПечатныхФормСервер(ИмяОбъекта, ТипОбъекта);			
		Для Каждого кзПФ Из СтруктураПечатныхФорм Цикл
			Если ИмяПечатнойФормы = кзПФ.Значение Тогда
				ПечатнаяФормаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПечатнаяФормаНайдена Тогда
			ВыборкаВнешнихПФ = ПолучитьВыборкуДополнительныхПечатныхФормОбъектаМетаданных(ИмяОбъекта, ТипОбъекта);
			Пока ВыборкаВнешнихПФ.Следующий() Цикл
				Если ИмяПечатнойФормы = ВыборкаВнешнихПФ.Наименование Тогда
					ПечатнаяФормаНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ПечатнаяФормаНайдена Тогда
			ИмяПечатнойФормы = Неопределено;
			ХранилищеПользовательскихНастроекОтчетов.Удалить(ИмяНастройки,"ПечатнаяФорма", ИмяПользователя());
		КонецЕсли;
	Иначе
		СтруктураПечатныхФорм = ПолучитьСтруктуруПечатныхФормСервер(ИмяОбъекта, ТипОбъекта);			
		Для Каждого кзПФ Из СтруктураПечатныхФорм Цикл
			ИмяПечатнойФормы = кзПФ.Значение;
			Прервать;
		КонецЦикла;
		
		// Нет встроенных форм - ищем дополнительную
		Если Не ЗначениеЗаполнено(ИмяПечатнойФормы) Тогда
			
			ВыборкаВнешнихПФ = ПолучитьВыборкуДополнительныхПечатныхФормОбъектаМетаданных(ИмяОбъекта, ТипОбъекта);
			Пока ВыборкаВнешнихПФ.Следующий() Цикл
 				Если Не ЗначениеЗаполнено(ВыборкаВнешнихПФ.ЗаменяемаяПечатнаяФорма) Тогда
					ИмяПечатнойФормы = ВыборкаВнешнихПФ.Наименование;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ИмяПечатнойФормы;
	
КонецФункции

Функция ПолучитьВыборкуДополнительныхПечатныхФормОбъектаМетаданных(ИмяОбъекта, ТипОбъекта)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки = """"
	|			ТОГДА ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма
	|	И НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныПечатиПринадлежность.Ссылка,
	|	ШаблоныПечатиПринадлежность.Ссылка.Представление,
	|	""""
	|ИЗ
	|	Справочник.ШаблоныПечати.Принадлежность КАК ШаблоныПечатиПринадлежность
	|ГДЕ
	|	ШаблоныПечатиПринадлежность.СсылкаОбъекта = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПакетыПечати.Ссылка,
	|	ПакетыПечати.Представление,
	|	""""
	|ИЗ
	|	Справочник.ПакетыПечати КАК ПакетыПечати
	|ГДЕ
	|	ПакетыПечати.МестоВызоваСсылка = &Ссылка";
	Запрос.УстановитьПараметр("ВидОбработкиПечатнаяФорма", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если ТипОбъекта = "Документ" Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[ИмяОбъекта].ПустаяСсылка());
	ИначеЕсли ТипОбъекта = "Справочник" Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[ИмяОбъекта].ПустаяСсылка());
	Иначе
		Возврат "";
	КонецЕсли;

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// Формирует кэш печатных форм
// 
// Возвращаемое значение:
//  Массив.
//
Функция ЗаполнитьКэшПечатныхФорм() Экспорт
	
	МассивВозврата = Новый Массив;
		
	// Документы
	Для Каждого Документ Из Метаданные.Документы Цикл
	
		ИмяПФ = ПолучитьИмяПечатнойФормыДокументаПоУмолчанию(Документ.Имя, "Документ");	
		Если ЗначениеЗаполнено(ИмяПф) Тогда
		    Структура = Новый Структура("ИмяОбъекта,ИмяПФ");
			Структура.ИмяОбъекта = Документ.Имя;
			Структура.ИмяПФ	= ИмяПФ;
			МассивВозврата.Добавить(Структура);
		КонецЕсли;
		
	КонецЦикла;
	
	// Справочники
	ПечатаемыеСправочники = Новый Массив;
	ПечатаемыеСправочники.Добавить("Клиенты");
	Для Каждого ИмяСправочника Из ПечатаемыеСправочники Цикл
		
		ИмяПФ = ПолучитьИмяПечатнойФормыДокументаПоУмолчанию(ИмяСправочника, "Справочник");
		Если ЗначениеЗаполнено(ИмяПф) Тогда
			Структура = Новый Структура("ИмяОбъекта,ИмяПФ,ПоУмолчанию");
			Структура.ИмяОбъекта = ИмяСправочника;
			Структура.ИмяПФ	= ИмяПФ;	
			МассивВозврата.Добавить(Структура);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает доступные варианты печати документа.
//  Результат:	Структура, каждая строка которой соответствует одному из вариантов печати.
//
// Параметры:
//  ИмяОбъекта	 - Строка	 - имя объекта метаданных.
//  ТипОбъекта	 - Строка	 - "Документ" или "Справочник".
// 
// Возвращаемое значение:
//  Структура - печатные формы объекта.
//
Функция ПолучитьСтруктуруПечатныхФормСервер(ИмяОбъекта, ТипОбъекта = "Документ") Экспорт
	
	Попытка
		Если ТипОбъекта = "Документ" Тогда
			Если ТипЗнч(ИмяОбъекта) = Тип("Строка") Тогда
				СтруктураПечатныхФорм = Документы[ИмяОбъекта].ПолучитьСтруктуруПечатныхФорм();
			Иначе
				СтруктураПечатныхФорм = Документы[ИмяОбъекта.Метаданные().Имя].ПолучитьСтруктуруПечатныхФорм();
			КонецЕсли;
		ИначеЕсли ТипОбъекта = "Справочник" Тогда
			СтруктураПечатныхФорм = Справочники[ИмяОбъекта].ПолучитьСтруктуруПечатныхФорм();
		КонецЕсли;
	Исключение
		СтруктураПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедуры печати для пакета документов
//
// Параметры:
//  Пакет	 - СправочникСсылка.ПакетыПечати	 - пакет.
//  Источник - ДокументСсылка	 - документ.
// 
// Возвращаемое значение:
//  Массив.
//
Функция ПолучитьСоставПакета(Пакет,Источник) Экспорт 

	КлиентИсточника = Справочники.Клиенты.ПустаяСсылка();
	Попытка
		ИсточникОбъект = Источник.ПолучитьОбъект();
		
		Если Метаданные.Документы.Содержит(ИсточникОбъект.Метаданные()) Тогда 
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Клиент", ИсточникОбъект.Метаданные()) Тогда 
				КлиентИсточника = Источник.Клиент;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛОЖЬ КАК Печатать,
	|	ДоговорСКлиентом.ВидДоговора
	|ПОМЕСТИТЬ ДоговорыСКлиентом
	|ИЗ
	|	Документ.ДоговорСКлиентом КАК ДоговорСКлиентом
	|ГДЕ
	|	ДоговорСКлиентом.Клиент = &Клиент
	|	И ДоговорСКлиентом.Проведен
	|	И НЕ ДоговорСКлиентом.ПометкаУдаления
	|	И (ДоговорСКлиентом.ДатаОкончания >= &Дата
	|			ИЛИ ДоговорСКлиентом.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетыПечатиСостав.ПредставлениеОбъекта,
	|	ПакетыПечатиСостав.ВидОбъекта,
	|	ПакетыПечатиСостав.КолЭкз КАК КолЭкз,
	|	ПакетыПечатиСостав.СсылкаОбъекта,
	|	ПакетыПечатиСостав.Имя,
	|	ПакетыПечатиСостав.СсылкаНаВнешнююОбработку,
	|	ПакетыПечатиСостав.ЗаменяемаяПечатнаяФорма,
	|	ПакетыПечатиСостав.Расшифровка,
	|	ПакетыПечатиСостав.ВидПечатнойФормы,
	|	ПакетыПечатиСостав.Действие,
	|	ПакетыПечатиСостав.Текст,
	|	ЕСТЬNULL(ДоговорыСКлиентом.Печатать, ИСТИНА) КАК Печатать,
	|	ПакетыПечатиСостав.ВключатьВПакет
	|ИЗ
	|	Справочник.ПакетыПечати.СоставПакета КАК ПакетыПечатиСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСКлиентом КАК ДоговорыСКлиентом
	|		ПО ПакетыПечатиСостав.ПредставлениеОбъекта = ДоговорыСКлиентом.ВидДоговора
	|ГДЕ
	|	ПакетыПечатиСостав.Ссылка В(&Пакет)
	|	И НЕ ПакетыПечатиСостав.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Клиент", КлиентИсточника);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Пакет", Пакет);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
		
КонецФункции

// Функция - Получить печатную форму
//
// Параметры:
//  СсылкаНаОбъект	 - ЛюбаяСсылка	 - объект.
//  ИмяМакета		 - Строка	 - имя формы.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
//
Функция ПолучитьПечатнуюФорму(СсылкаНаОбъект,ИмяМакета) Экспорт
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Возврат Документы[МетаданныеОбъекта.Имя].Печать(СсылкаНаОбъект, ИмяМакета);
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Возврат Справочники[МетаданныеОбъекта.Имя].Печать(СсылкаНаОбъект, ИмяМакета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьТабДок(КоллекцияПечатныхФорм, КолЭкз, СсылкаНаОбъект, ИмяМакета, ПредставлениеМакета, РезультатПечати = Неопределено) Экспорт
	
	Если РезультатПечати <> Неопределено Тогда 
		ПечФорма = РезультатПечати;
	Иначе
		ПечФорма = ПолучитьПечатнуюФорму(СсылкаНаОбъект, ИмяМакета);
	КонецЕсли;

	Если ТипЗнч(ПечФорма) = Тип("ТабличныйДокумент") Тогда
		
		УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ПечФорма, ИмяМакета, ПредставлениеМакета, КолЭкз);
		
	ИначеЕсли ТипЗнч(ПечФорма) = Тип("Массив") Тогда
		// Обойдем все вложенные табдоки и добавим каждый из них в коллекцию
		Для Каждого СтрПечФорма Из ПечФорма Цикл
			Если ТипЗнч(СтрПечФорма.ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
				
				УниверсальныеМеханизмыСервер.ДобавитьДокументВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, СтрПечФорма.ТабличныйДокумент, СтрПечФорма.ИмяМакета, СтрПечФорма.СинонимМакета, КолЭкз * СтрПечФорма.Экземпляров);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Создать договор на сервере
//
// Параметры:
//  ВидДоговора	 - СправочникСсылка.ВидыДоговоров - вид договора.
//  Источник	 - ДокументСсылка, СправочникСсылка.Клиенты - то, для чего создается договор.
// 
// Возвращаемое значение:
//  ДокументСсылка.ДоговорСКлиентом
//
Функция СоздатьДоговорНаСервере(ВидДоговора, Источник) Экспорт     
	
	ДоговорОбъект = Неопределено;

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДоговорСКлиентом.Ссылка
	                      |ИЗ
	                      |	Документ.ДоговорСКлиентом КАК ДоговорСКлиентом
	                      |ГДЕ
	                      |	ДоговорСКлиентом.Клиент = &Клиент
	                      |	И ДоговорСКлиентом.ВидДоговора = &ВидДоговора
	                      |	И НЕ ДоговорСКлиентом.Завершен
	                      |	И ДоговорСКлиентом.Проведен");
						  
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Клиенты") Тогда 
		Запрос.УстановитьПараметр("Клиент",Источник);	
	Иначе 
		Запрос.УстановитьПараметр("Клиент",Источник.Клиент);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДоговора",ВидДоговора);
	Выборка = Запрос.Выполнить();
	Если Не Выборка.Пустой() Тогда 
		ВыборкаДокумент = Выборка.Выбрать();
		Если ВыборкаДокумент.Следующий() Тогда 
			Возврат ВыборкаДокумент.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Если ДоговорОбъект = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДоговорОбъект = Документы.ДоговорСКлиентом.СоздатьДокумент(); 
		ДоговорОбъект.Заполнить(Источник);							// Используем стандартное заполнение документа   
		ДоговорОбъект.ВидДоговора = ВидДоговора;                    // Назначим ему вид договора
		
		ДоговорОбъект.Номер			= "";
		ДоговорОбъект.Дата			= ТекущаяДата();
		ДоговорОбъект.Ответственный	= ПараметрыСеанса.ТекущийПользователь;
		ДоговорОбъект.Филиал			= УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
		
		ДоговорОбъект.Записать(РежимЗаписиДокумента.Проведение);    // Проведем документ
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ДоговорОбъект.Ссылка;
	
КонецФункции

// Функция - Передать состав в клиент
//
// Параметры:
//  Пакет	 - СправочникСсылка.ПакетыПечати	 - пакет
//  Источник - ДокументСсылка	 - объект печати.
//  ТЗ		 - ТаблицаЗначений - таблица с составом пакета.
// 
// Возвращаемое значение:
//  Массив.
//
Функция ПередатьСоставВКлиент(Пакет = Неопределено,Источник = Неопределено, ТЗ = Неопределено) Экспорт
	
    Перем РезультатМассив;
    Перем СтруктураСтрока;
	
	Если Пакет <> Неопределено И Источник <> Неопределено Тогда 
		ТаблицаЗначений = ПолучитьСоставПакета(Пакет,Источник);
	Иначе 
		ТаблицаЗначений = ТЗ;
	КонецЕсли;
	
    РезультатМассив = Новый Массив;
    Для Каждого Строка Из ТаблицаЗначений Цикл
        СтруктураСтрока = Новый Структура;
        Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
            СтруктураСтрока.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		СтруктураСтрока.Вставить("Пакет", Пакет);
        РезультатМассив.Добавить(СтруктураСтрока);
    КонецЦикла;

    Возврат РезультатМассив;

КонецФункции

//  Ссылка			 - ЛюбаяСсылка	 - ссылка на объект, печать окторого требуется выполнить.
//  Расшифровка				 - Структура	 - имя печатной формы.
//  КоличествоЭкземпляров	 - Число		 - экземпляров.
//  НаПринтер				 - Булево	 - вывести ли сразу на принтер (если возможно)
//
// Параметры:
//  Объект			 - ЛюбаяСсылка	 - ссылка на объект, печать окторого требуется выполнить.
//  Расшифровка		 - Структура	 - дополнительные параметры.
//  ДокСсылка		 - ЛюбаяСсылка	 - ссылка на объект, печать окторого требуется выполнить.
//  МенеджерПечати	 - ДокументМенеджер	 - менеджер печатаемого объекта.
//  СтрокаКнопки	 - Структура	 - данные команды печати.
// 
// Возвращаемое значение:
//  Структура - данные печатной формы.
//
&НаСервере
Функция ВывестиНапечататьДокумент(Объект, Расшифровка, ДокСсылка, МенеджерПечати, СтрокаКнопки) Экспорт
	
	Если ТипЗнч(СтрокаКнопки.СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда        // Проверить принаджежность и доп реквизиты
		
		стрРасшифровка = новый Структура;
		стрРасшифровка.Вставить("ВидПечатнойФормы", СтрокаКнопки.ВидПечатнойФормы);
		стрРасшифровка.Вставить("СсылкаНаВнешнююОбработку", СтрокаКнопки.СсылкаНаВнешнююОбработку);
		стрРасшифровка.Вставить("ЗаменяемаяПечатнаяФорма", СтрокаКнопки.ЗаменяемаяПечатнаяФорма);
		стрРасшифровка.Вставить("ОбъектПечати", ДокСсылка);
		
		РезультатПечати = НапечататьВнешнююФормуСПроверкойРежима(Объект, стрРасшифровка);
		Если ТипЗнч(РезультатПечати) = Тип("ТабличныйДокумент") Тогда
			ТабДокумент = РезультатПечати;
			ЭтоДокумент = Найти(МенеджерПечати,"Документ") <> 0;
			СтруктураНаПечать = УниверсальныеМеханизмыСервер.НапечататьДокумент(ТабДокумент, 0, Ложь, ?(ЭтоДокумент, 
			ОбщегоНазначенияСервер.СформироватьЗаголовокДокумента(ДокСсылка[0]), Строка(ДокСсылка[0])), 
			ДокСсылка[0], Расшифровка);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаКнопки.СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ШаблоныПечати") Тогда
		
		Возврат Неопределено;
		// ШаблонПечати = СтрокаКнопки.СсылкаНаВнешнююОбработку;
		
	ИначеЕсли ТипЗнч(СтрокаКнопки.СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ПакетыПечати") Тогда
		СоставПакета = ПечатьДокументовСервер.ПередатьСоставВКлиент(СтрокаКнопки.СсылкаНаВнешнююОбработку, ДокСсылка[0]);
		//СтруктураНаПечать = ПечатьДокументовКлиент.НапечататьПакетДокументов(СоставПакета, ДокСсылка, СтрокаКнопки.СсылкаНаВнешнююОбработку, Ложь);
	КонецЕсли;
	
	Возврат СтруктураНаПечать;
		
КонецФункции

&НаСервере
Функция НапечататьВнешнююФормуСПроверкойРежима(Объект, стрРасшифровка)
	
	Рез = УниверсальныеМеханизмыСервер.РежимЗапускаОбработкиСервер(Объект, стрРасшифровка);
	
	Если ТипЗнч(Рез) = Тип("Строка") Тогда
		Попытка
			ФормаНаОткрытие = "ВнешняяОбработка."+Рез+".Форма.Форма1";
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить печатную форму" + Символы.ПС + Строка(ОписаниеОшибки()));
		КонецПопытки;	
		Возврат Неопределено;
	Иначе
		ТабДокумент = УниверсальныеМеханизмыСервер.НапечататьВнешнююФормуСервер(Объект, стрРасшифровка);
		Возврат ТабДокумент;	
	КонецЕсли;	
	
КонецФункции
//-БИТ