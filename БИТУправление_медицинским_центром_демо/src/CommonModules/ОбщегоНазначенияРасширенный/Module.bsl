#Область ПрограммныйИнтерфейс

// Добавляет отбор на форму.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы.
//  ГруппаПриемник - ГруппаФормы - группа, куда разместится элемент с отбором.
//  ИмяКомпоновщика - Строка
//  ИмяТаблицы - Строка - имя таблицы на форме.
//
// Возвращаемое значение:
//  ПолеФормы.
//
Функция СоздатьЭлементыПользовательскихНастроекНаФорме(ЭлементыФормы, ГруппаПриемник, ИмяКомпоновщика, Знач ИмяТаблицы = "") Экспорт
	
	Если ИмяТаблицы = "" Тогда 
		ИмяТаблицы = ИмяКомпоновщика;
	КонецЕсли;
	
	ЭлементНастройки = ЭлементыФормы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ГруппаПриемник);
	ЭлементНастройки.Шапка = Ложь;
	ЭлементНастройки.ПутьКДанным = ИмяКомпоновщика + ".ПользовательскиеНастройки";
	
	ЭлементКолонка = ЭлементыФормы.Добавить(ИмяТаблицы + "Использование", Тип("ПолеФормы"), ЭлементНастройки);
	ЭлементКолонка.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементКолонка.ПутьКДанным = ИмяКомпоновщика + ".ПользовательскиеНастройки.Использование";
	
	ЭлементГруппаКолонок = ЭлементыФормы.Добавить(ИмяТаблицы + "ГруппаКолонок", Тип("ГруппаФормы"), ЭлементНастройки);
	ЭлементГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ЭлементГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	ЭлементКолонка = ЭлементыФормы.Добавить(ИмяТаблицы + "КартинкаНастройки", Тип("ПолеФормы"), ЭлементГруппаКолонок);
	ЭлементКолонка.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементКолонка.ПутьКДанным = ИмяКомпоновщика + ".ПользовательскиеНастройки.КартинкаНастройки";

	ЭлементКолонка = ЭлементыФормы.Добавить(ИмяТаблицы + "Настройка", Тип("ПолеФормы"), ЭлементГруппаКолонок);
	ЭлементКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	ЭлементКолонка.ПутьКДанным = ИмяКомпоновщика + ".ПользовательскиеНастройки.Настройка";

	ЭлементКолонка = ЭлементыФормы.Добавить(ИмяТаблицы + "ВидСравнения", Тип("ПолеФормы"), ЭлементНастройки);
	ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементКолонка.ПутьКДанным = ИмяКомпоновщика + ".ПользовательскиеНастройки.ВидСравнения";
	
	ЭлементГруппаКолонок = ЭлементыФормы.Добавить(ИмяТаблицы + "ГруппаКолонок1", Тип("ГруппаФормы"), ЭлементНастройки);
	ЭлементГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ЭлементГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	ЭлементКолонка = ЭлементыФормы.Добавить(ИмяТаблицы + "КартинкаЗначения", Тип("ПолеФормы"), ЭлементГруппаКолонок);
	ЭлементКолонка.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементКолонка.ПутьКДанным = ИмяКомпоновщика + ".ПользовательскиеНастройки.КартинкаЗначения";

	ЭлементКолонка = ЭлементыФормы.Добавить(ИмяТаблицы + "Значение", Тип("ПолеФормы"), ЭлементГруппаКолонок);
	ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементКолонка.ПутьКДанным = ИмяКомпоновщика + ".ПользовательскиеНастройки.Значение";
	
	Возврат ЭлементНастройки;
	
КонецФункции

// Позволяет получить настройки компоновщика.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик.
//
// Возвращаемое значение:
//  НастройкиКомпоновкиДанных .
//
Функция ПолучитьНастройкиКомпоновщика(КомпоновщикНастроек) Экспорт
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

// Функция ПолучитьСвязанныеДокументы.
//
// Параметры:
//  ИсходныйДокумент - ДокументСсылка.
//
// Возвращаемое значение:
//  Массив.
//
Функция ПолучитьСвязанныеДокументы(ИсходныйДокумент) Экспорт
	
	СвязанныеДокументы = Новый Массив;
	НайтиСвязанныеДокументыРекурсивно(ИсходныйДокумент, СвязанныеДокументы);
	
	Возврат СвязанныеДокументы;
	
КонецФункции

Процедура НайтиСвязанныеДокументыРекурсивно(ТекДокумент, СвязанныеДокументы) 
	
	МетаданныеДокумента = ТекДокумент.Метаданные();
	ТипДокументы = Документы.ТипВсеСсылки();
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		
		ЗначениеРеквизита = ТекДокумент[Реквизит.Имя];
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Или Не ТипДокументы.СодержитТип(ТипЗнч(ЗначениеРеквизита)) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Зацикливание
		Если СвязанныеДокументы.Найти(ЗначениеРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвязанныеДокументы.Добавить(ЗначениеРеквизита);
		
		НайтиСвязанныеДокументыРекурсивно(ЗначениеРеквизита, СвязанныеДокументы);
		
	КонецЦикла;
		
КонецПроцедуры

// Ищет реквизиты в метаданных объекта с указанным типом данных.
//
// Параметры:
//  СсылкаИлиМетаданные - ЛюбаяСсылка - ссылка на объект-образец.
//  ТипРеквизита - Тип - искомый тип.
//
// Возвращаемое значение:
//  СписокЗначений.
//
Функция НайтиВМетаданныхИмяРеквизитаПоТипу(СсылкаИлиМетаданные, ТипРеквизита) Экспорт 
	
	МетаданныеСсылки = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СсылкаИлиМетаданные)), СсылкаИлиМетаданные.Метаданные(), СсылкаИлиМетаданные);
	
	СписокРеквизитов = Новый СписокЗначений;
	Для Каждого Реквизит Из МетаданныеСсылки.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(ТипРеквизита) Тогда 
			СписокРеквизитов.Добавить(Реквизит.Тип.Типы().Количество(), Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокРеквизитов.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СписокРеквизитов.СортироватьПоЗначению(); // Приоритет реквизитам с наименьшим количеством типов.
	Возврат СписокРеквизитов[0].Представление;
	
КонецФункции

// Возвращает полное наименование либо из специального реквизита, либо из представления объекта.
//
// Параметры:
//  Объект - ЛюбаяСсылка - объект ссылочного типа.
//  ИмяРеквизитаПолноеНаименование - Строка - Имя реквизита, отвечающего за полное наименование. По умолчанию "НаименованиеПолное"
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьПолноеНаименованиеОбъекта(Объект, ИмяРеквизитаПолноеНаименование = "НаименованиеПолное") Экспорт
	
	НаименованиеПолное = "";
	Попытка
		НаименованиеПолное = Объект[ИмяРеквизитаПолноеНаименование];
	Исключение КонецПопытки;
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда 
		Возврат Строка(Объект);
	Иначе 
		Возврат НаименованиеПолное;
	КонецЕсли;
	
КонецФункции

// Функция - Преобразовать ссылочный объект в структуру - формирует структуру реквизитов объекта
// 	Если реквизит содержит ссылку - она так же обрабатывается
// 	Значения перечислений и пустые ссылки посещаются в структуру как есть. Табличные части не обрабатываются
//
// Параметры:
//  ТекОбъект				 - Ссылка - Ссылочный объект
//  соотвОбработанныеОбъекты - Соответствие - Соответствие уже обработанных ссылочных объектов и их структур во
//                                            избежание зацикливания, при первом вызове не указывается
//  ОбрабатыватьПустыеСсылкиРекурсивно - Булево - Признак, указывающий, будут ли пустые ссылки преобразовываться в
//                                                структуру
//	УровеньРекурсии - Число - задает уровень обработки вложенных ссылок: -1 - без ограничений, 1 - будут обработанны
//	                          реквизиты только исходной ссылки
// Возвращаемое значение:
// 	Структура - Структура реквизитов объекта.
//
Функция ПреобразоватьСсылочныйОбъектВСтруктуруРекурсивно(ТекОбъект, 
		соотвОбработанныеОбъекты = Неопределено, ОбрабатыватьПустыеСсылкиРекурсивно = Ложь, Знач УровеньРекурсии = -1) Экспорт  
		
	Если соотвОбработанныеОбъекты = Неопределено Тогда 
		соотвОбработанныеОбъекты = Новый Соответствие;
	КонецЕсли;
	
	Если УровеньРекурсии = 0 Тогда 
		Возврат ТекОбъект;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(ТекОбъект);
	ЭтоСсылка = (ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) И Не Перечисления.ТипВсеСсылки().СодержитТип(ТипОбъекта));
		
	Если ЭтоСсылка И (ОбрабатыватьПустыеСсылкиРекурсивно Или Не ТекОбъект.Пустая()) Тогда
		
		СущСтруктура = соотвОбработанныеОбъекты.Получить(ТекОбъект); // Если объект уже обрабатывался.
		Если СущСтруктура <> Неопределено Тогда
			Возврат СущСтруктура;
		КонецЕсли;
		
		ТекСтруктура = Новый Структура;
		соотвОбработанныеОбъекты.Вставить(ТекОбъект, ТекСтруктура);
		
		ТекУровеньРекурсии = УровеньРекурсии - 1;
		Для Каждого Реквизит Из ТекОбъект.Метаданные().Реквизиты Цикл
			Значение = ТекОбъект[Реквизит.Имя];
			ТекСтруктура.Вставить(Реквизит.Имя, ПреобразоватьСсылочныйОбъектВСтруктуруРекурсивно(Значение, соотвОбработанныеОбъекты, ОбрабатыватьПустыеСсылкиРекурсивно, ТекУровеньРекурсии));
		КонецЦикла;
		
		Если ОбрабатыватьПустыеСсылкиРекурсивно Тогда 
			ТекСтруктура.Вставить("ПустаяСсылка", ТекОбъект.Пустая());
		КонецЕсли;
		
		Возврат ТекСтруктура;
		
	Иначе
		
		Возврат ТекОбъект;
		
	КонецЕсли;
	
КонецФункции

// Создает структуру с заданными колонками и значениями из элемента коллекции.
//
// Параметры:
//  КолонкиКоллекции - Структура - список колонок.
//  ЭлементКоллекции - Структура - источник значений структуры результата.
//  ЗначениеПоУмолчанию - Неопределено - основное значение, если источник значений не задан.
//
// Возвращаемое значение:
//  Структура.
//
Функция СоздатьСтруктуруПоЭлементуКоллекции(КолонкиКоллекции, ЭлементКоллекции = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ИмяПоляКолонки = "Имя";
	Если ТипЗнч(КолонкиКоллекции) = Тип("Структура") Тогда 
		ИмяПоляКолонки = "Ключ";
	КонецЕсли;
	
	СтруктураЭлемента = Новый Структура;
	Если ЭлементКоллекции = Неопределено Тогда 
		Для Каждого Колонка Из КолонкиКоллекции Цикл 
			СтруктураЭлемента.Вставить(Колонка[ИмяПоляКолонки], ЗначениеПоУмолчанию);
		КонецЦикла;
	Иначе
		Для Каждого Колонка Из КолонкиКоллекции Цикл 
			СтруктураЭлемента.Вставить(Колонка[ИмяПоляКолонки], ЭлементКоллекции[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураЭлемента;
	
КонецФункции

// Ищет ссылку по отбору и, если не найдена, создает и возвращает.
//
// Параметры:
//  ПолноеИмяМетаданных - Строка
//  Отбор - Структура
//  ВидыСравненияОтбора - ВидыСравнения - вид сравнения в отборе.
//  СоздатьЕслиНеНайден - Булево - нужно ли создать объект, если не найден по отбору.
//  РеквизитыДляСоздания - Структура - значения для создания, если не найден.
//
// Возвращаемое значение:
//  ЛюбаяСсылка.
//
Функция НайтиСсылкуПоОтбору(ПолноеИмяМетаданных, Отбор, ВидыСравненияОтбора = Неопределено, СоздатьЕслиНеНайден = Истина, РеквизитыДляСоздания = Неопределено) Экспорт 
	
	Если ВидыСравненияОтбора = Неопределено Тогда 
		ВидыСравненияОтбора = Новый Структура;
	КонецЕсли;
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	| Таблица.Ссылка
	|ИЗ
	| %ИмяМетаданных% КАК Таблица";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяМетаданных%", ПолноеИмяМетаданных);
	
	Если Отбор.Количество() > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ГДЕ
		|";
		
		СтрокаУсловий = ""; 	
		Для Каждого кзОтбор Из Отбор Цикл
			
			ТекВидСравнения = Неопределено;
			ВидыСравненияОтбора.Свойство(кзОтбор.Ключ, ТекВидСравнения);
			Если ТекВидСравнения = Неопределено Тогда 
				ТекВидСравнения = "=";
			Иначе
				ТекВидСравнения = НРег(СокрЛП(ТекВидСравнения));
			КонецЕсли;
			
			ПередПараметром = "";
			ПослеПараметра = "";
			Если ТекВидСравнения = "в" Или ТекВидСравнения = "в иерархии" Тогда 
				ПередПараметром = "(";
				ПослеПараметра = ")";
			КонецЕсли;
			
			СтрокаУсловия = " Таблица." + кзОтбор.Ключ + " " + ТекВидСравнения + " " + ПередПараметром + "&" + кзОтбор.Ключ + ПослеПараметра;
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СтрокаУсловий, СтрокаУсловия, Символы.ПС + "И ");
			Запрос.УстановитьПараметр(кзОтбор.Ключ, кзОтбор.Значение);
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + СтрокаУсловий;
		
	КонецЕсли;
	
	НайденныйЭлемент = Неопределено; 
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Если СоздатьЕслиНеНайден И Отбор.Количество() > 0 Тогда 
			Если Отбор.Свойство("ЭтоГруппа") И Отбор.ЭтоГруппа = Истина Тогда 
				Объект = Менеджер.СоздатьГруппу();
			Иначе
				Объект = Менеджер.СоздатьЭлемент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Объект, Отбор);
			Если РеквизитыДляСоздания <> Неопределено Тогда 
				ЗаполнитьЗначенияСвойств(Объект, РеквизитыДляСоздания);
			КонецЕсли;
			Объект.Записать();
			НайденныйЭлемент = Объект.Ссылка;
		КонецЕсли;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НайденныйЭлемент = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

#КонецОбласти