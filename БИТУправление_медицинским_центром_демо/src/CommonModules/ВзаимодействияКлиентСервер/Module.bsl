#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Определение типа ссылки

// Определяет, является ли переданная в функцию ссылка контактом.
//
// Параметры:
//  ОбъектСсылка  - Ссылка - для которой выполняется проверка.
//
// Возвращаемое значение:
//   Булево  - истина, если является контактом, ложь в обратном случае.
//
Функция ЯвляетсяКонтактом(ОбъектСсылка) Экспорт
	
	ОписаниеТиповВозможныхКонтактов =  Новый ОписаниеТипов(МассивВозможныхТиповКонтактов());
	
	Возврат ОписаниеТиповВозможныхКонтактов.СодержитТип(ТипЗнч(ОбъектСсылка));
	
КонецФункции

// Определяет, является ли переданная в функцию ссылка взаимодействием.
//
// Параметры:
//  ОбъектСсылка  - Ссылка - для которой необходимо выполняется проверка.
//
// Возвращаемое значение:
//   Булево   - истина, если переданная ссылка является взаимодействием.
//
Функция ЯвляетсяВзаимодействием(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("Тип") Тогда
		ТипОбъекта = ОбъектСсылка;
	Иначе
		ТипОбъекта = ТипЗнч(ОбъектСсылка);
	КонецЕсли;
	
	Возврат ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее");
	
КонецФункции

// Определяет, является ли переданная в функцию ссылка взаимодействием.
//
// Параметры:
//  ОбъектСсылка  - Ссылка - для которой необходимо выполняется проверка.
//
// Возвращаемое значение:
//   Булево   - истина, если переданная ссылка является взаимодействием.
//
Функция ЯвляетсяЭлектроннымПисьмом(ОбъектСсылка) Экспорт
	
	Возврат ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Получается индекс пиктограммы файла - индекс в картинке КоллекцияПиктограммФайлов.
Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайла) Экспорт
	
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
		ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
		Возврат 0;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Расширение = "." + НРег(РасширениеФайла) + ";";
	
	Если СтрНайти(".dt;.1cd;.cf;.cfu;", Расширение) <> 0 Тогда
		Возврат 6; // Файлы 1С.
		
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 8; // Табличный Файл.
		
	ИначеЕсли СтрНайти(".txt;.log;.ini;", Расширение) <> 0 Тогда
		Возврат 10; // Текстовый Файл.
		
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 12; // Внешние обработки.
		
	ИначеЕсли СтрНайти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 14; // Картинки.
		
	ИначеЕсли СтрНайти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 16; // HTML.
		
	ИначеЕсли СтрНайти(".doc;.dot;.rtf;",Расширение) <> 0 Тогда
		Возврат 18; // Файл Microsoft Word.
		
	ИначеЕсли СтрНайти(".xls;.xlw;",Расширение) <> 0 Тогда
		Возврат 20; // Файл Microsoft Excel.
		
	ИначеЕсли СтрНайти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 22; // Файл Microsoft PowerPoint.
		
	ИначеЕсли СтрНайти(".vsd;",Расширение) <> 0 Тогда
		Возврат 24; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mpp;",Расширение) <> 0 Тогда
		Возврат 26; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 28; // База данных Microsoft Access.
		
	ИначеЕсли СтрНайти(".xml;",Расширение) <> 0 Тогда
		Возврат 30; // xml.
		
	ИначеЕсли СтрНайти(".msg;.eml;",Расширение) <> 0 Тогда
		Возврат 32; // Письмо электронной почты.
		
	ИначеЕсли СтрНайти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 34; // Архивы.
		
	ИначеЕсли СтрНайти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 36; // Исполняемые файлы.
		
	ИначеЕсли СтрНайти(".grs;",Расширение) <> 0 Тогда
		Возврат 38; // Графическая схема.
		
	ИначеЕсли СтрНайти(".geo;",Расширение) <> 0 Тогда
		Возврат 40; // Географическая схема.
		
	ИначеЕсли СтрНайти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 42; // jpg.
		
	ИначеЕсли СтрНайти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 44; // bmp.
		
	ИначеЕсли СтрНайти(".tif;.tiff;",Расширение) <> 0 Тогда
		Возврат 46; // tif.
		
	ИначеЕсли СтрНайти(".gif;",Расширение) <> 0 Тогда
		Возврат 48; // gif.
		
	ИначеЕсли СтрНайти(".png;",Расширение) <> 0 Тогда
		Возврат 50; // png.
		
	ИначеЕсли СтрНайти(".pdf;",Расширение) <> 0 Тогда
		Возврат 52; // pdf.
		
	ИначеЕсли СтрНайти(".odt;",Расширение) <> 0 Тогда
		Возврат 54; // Open Office writer.
		
	ИначеЕсли СтрНайти(".odf;",Расширение) <> 0 Тогда
		Возврат 56; // Open Office math.
		
	ИначеЕсли СтрНайти(".odp;",Расширение) <> 0 Тогда
		Возврат 58; // Open Office Impress.
		
	ИначеЕсли СтрНайти(".odg;",Расширение) <> 0 Тогда
		Возврат 60; // Open Office draw.
		
	ИначеЕсли СтрНайти(".ods;",Расширение) <> 0 Тогда
		Возврат 62; // Open Office calc.
		
	ИначеЕсли СтрНайти(".mp3;",Расширение) <> 0 Тогда
		Возврат 64;
		
	ИначеЕсли СтрНайти(".erf;",Расширение) <> 0 Тогда
		Возврат 66; // Внешние отчеты.
		
	ИначеЕсли СтрНайти(".docx;",Расширение) <> 0 Тогда
		Возврат 68; // Файл Microsoft Word docx.
		
	ИначеЕсли СтрНайти(".xlsx;",Расширение) <> 0 Тогда
		Возврат 70; // Файл Microsoft Excel xlsx.
		
	ИначеЕсли СтрНайти(".pptx;",Расширение) <> 0 Тогда
		Возврат 72; // Файл Microsoft PowerPoint pptx.
		
	ИначеЕсли СтрНайти(".p7s;",Расширение) <> 0 Тогда
		Возврат 74; // Файл подписи.
		
	ИначеЕсли СтрНайти(".p7m;",Расширение) <> 0 Тогда
		Возврат 76; // зашифрованное сообщение.
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции

Функция СписокЗапрещенныхРасширений() Экспорт
	
	СписокЗапрещенныхРасширений = Новый СписокЗначений;
	СписокЗапрещенныхРасширений.Добавить("ade");
	СписокЗапрещенныхРасширений.Добавить("adp");
	СписокЗапрещенныхРасширений.Добавить("app");
	СписокЗапрещенныхРасширений.Добавить("bas");
	СписокЗапрещенныхРасширений.Добавить("bat");
	СписокЗапрещенныхРасширений.Добавить("chm");
	СписокЗапрещенныхРасширений.Добавить("class");
	СписокЗапрещенныхРасширений.Добавить("cmd");
	СписокЗапрещенныхРасширений.Добавить("com");
	СписокЗапрещенныхРасширений.Добавить("cpl");
	СписокЗапрещенныхРасширений.Добавить("crt");
	СписокЗапрещенныхРасширений.Добавить("dll");
	СписокЗапрещенныхРасширений.Добавить("exe");
	СписокЗапрещенныхРасширений.Добавить("fxp");
	СписокЗапрещенныхРасширений.Добавить("hlp");
	СписокЗапрещенныхРасширений.Добавить("hta");
	СписокЗапрещенныхРасширений.Добавить("ins");
	СписокЗапрещенныхРасширений.Добавить("isp");
	СписокЗапрещенныхРасширений.Добавить("jse");
	СписокЗапрещенныхРасширений.Добавить("js");
	СписокЗапрещенныхРасширений.Добавить("lnk");
	СписокЗапрещенныхРасширений.Добавить("mda");
	СписокЗапрещенныхРасширений.Добавить("mdb");
	СписокЗапрещенныхРасширений.Добавить("mde");
	СписокЗапрещенныхРасширений.Добавить("mdt");
	СписокЗапрещенныхРасширений.Добавить("mdw");
	СписокЗапрещенныхРасширений.Добавить("mdz");
	СписокЗапрещенныхРасширений.Добавить("msc");
	СписокЗапрещенныхРасширений.Добавить("msi");
	СписокЗапрещенныхРасширений.Добавить("msp");
	СписокЗапрещенныхРасширений.Добавить("mst");
	СписокЗапрещенныхРасширений.Добавить("ops");
	СписокЗапрещенныхРасширений.Добавить("pcd");
	СписокЗапрещенныхРасширений.Добавить("pif");
	СписокЗапрещенныхРасширений.Добавить("prf");
	СписокЗапрещенныхРасширений.Добавить("prg");
	СписокЗапрещенныхРасширений.Добавить("reg");
	СписокЗапрещенныхРасширений.Добавить("scf");
	СписокЗапрещенныхРасширений.Добавить("scr");
	СписокЗапрещенныхРасширений.Добавить("sct");
	СписокЗапрещенныхРасширений.Добавить("shb");
	СписокЗапрещенныхРасширений.Добавить("shs");
	СписокЗапрещенныхРасширений.Добавить("url");
	СписокЗапрещенныхРасширений.Добавить("vb");
	СписокЗапрещенныхРасширений.Добавить("vbe");
	СписокЗапрещенныхРасширений.Добавить("vbs");
	СписокЗапрещенныхРасширений.Добавить("wsc");
	СписокЗапрещенныхРасширений.Добавить("wsf");
	СписокЗапрещенныхРасширений.Добавить("wsh");
	
	Возврат СписокЗапрещенныхРасширений;
	
КонецФункции

// Проверяет, является ли файл письмом по расширению файла.
//
// Параметры:
//  ИмяФайла  - Строка - имя проверяемого файла.
//
// Возвращаемое значение:
//   Булево   - Истина, если расширение файла, указывает на то, что он является письмом.
//
Функция ЭтоФайлПисьмо(ИмяФайла) Экспорт

	МассивРасширенийФайла = МассивРасширенийФайлаПисьма();
	РасширениеФайла       = РасширениеФайла(ИмяФайла);
	
	Возврат (МассивРасширенийФайла.Найти(РасширениеФайла) <> Неопределено);
	
КонецФункции

// Формирует тему по тексту сообщения на основании первых трех слов.
//
// Параметры:
//  ТекстСообщения  - Строка - текст сообщения, на основании которого формируется тема.
//
// Возвращаемое значение:
//   Строка   - сформированная тема сообщения.
//
Функция ТемаПоТекстуСообщения(ТекстСообщения) Экспорт

	МассивСтрок = СтрРазделить(ТекстСообщения," ", Ложь);
	Тема = "";
	Для Инд = 0 По МассивСтрок.Количество() - 1 Цикл
		Если Инд > 2 Тогда
			Прервать;
		КонецЕсли;
		Тема = Тема + МассивСтрок[Инд] + " ";
	КонецЦикла;
	
	Возврат Лев(Тема, СтрДлина(Тема) - 1);

КонецФункции

// Формирует информационную строку о количестве сообщений и оставшихся символах.
//
// Параметры:
//  ОтправлятьВТранслите  - Булево - признак, того что сообщение при отправке будет автоматически 
//                                   преобразовано в латинские символы.
//  ТекстСообщения  - Строка       - текст сообщения, для которого формируется сообщение.
//
// Возвращаемое значение:
//   Строка   - сформированное информационное сообщение.
//
Функция СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(ОтправлятьВТранслите, ТекстСообщения) Экспорт

	СимволовВСообщении = ?(ОтправлятьВТранслите, 140, 50);
	ЧислоСимволов = СтрДлина(ТекстСообщения);
	КоличествоСообщений   = Цел(ЧислоСимволов / СимволовВСообщении) + 1;
	ОсталосьСимволов      = СимволовВСообщении - ЧислоСимволов % СимволовВСообщении;
	ШаблонТекстаСообщения = НСтр("ru = 'Сообщение - %1, осталось символов - %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, КоличествоСообщений, ОсталосьСимволов);

КонецФункции

// Функция возвращает таблицу имен кодировок.
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  Таблица значений
//
Функция СписокКодировок() Экспорт
	
	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",       НСтр("ru = 'ibm852 (Центральноевропейская DOS)'"));
	СписокКодировок.Добавить("ibm866",       НСтр("ru = 'ibm866 (Кириллица DOS)'"));
	СписокКодировок.Добавить("iso-8859-1",   НСтр("ru = 'iso-8859-1 (Западноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-2",   НСтр("ru = 'iso-8859-2 (Центральноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-3",   НСтр("ru = 'iso-8859-3 (Латиница 3 ISO)'"));
	СписокКодировок.Добавить("iso-8859-4",   НСтр("ru = 'iso-8859-4 (Балтийская ISO)'"));
	СписокКодировок.Добавить("iso-8859-5",   НСтр("ru = 'iso-8859-5 (Кириллица ISO)'"));
	СписокКодировок.Добавить("iso-8859-7",   НСтр("ru = 'iso-8859-7 (Греческая ISO)'"));
	СписокКодировок.Добавить("iso-8859-9",   НСтр("ru = 'iso-8859-9 (Турецкая ISO)'"));
	СписокКодировок.Добавить("iso-8859-15",  НСтр("ru = 'iso-8859-15 (Латиница 9 ISO)'"));
	СписокКодировок.Добавить("koi8-r",       НСтр("ru = 'koi8-r (Кириллица KOI8-R)'"));
	СписокКодировок.Добавить("koi8-u",       НСтр("ru = 'koi8-u (Кириллица KOI8-U)'"));
	СписокКодировок.Добавить("us-ascii",     НСтр("ru = 'us-ascii США'"));
	СписокКодировок.Добавить("utf-8",        НСтр("ru = 'utf-8 (Юникод UTF-8)'"));
	СписокКодировок.Добавить("windows-1250", НСтр("ru = 'windows-1250 (Центральноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1251", НСтр("ru = 'windows-1251 (Кириллица Windows)'"));
	СписокКодировок.Добавить("windows-1252", НСтр("ru = 'windows-1252 (Западноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1253", НСтр("ru = 'windows-1253 (Греческая Windows)'"));
	СписокКодировок.Добавить("windows-1254", НСтр("ru = 'windows-1254 (Турецкая Windows)'"));
	СписокКодировок.Добавить("windows-1257", НСтр("ru = 'windows-1257 (Балтийская Windows)'"));
	
	Возврат СписокКодировок;

КонецФункции

// Получает каталог и имя файла для переданного полного имени файла.
//
// Параметры:
//  ПолноеИмяФайла  - Строка - полное имя файла, из которого будут получены имя каталога и имя файла.
//  ИмяКаталога     - Строка - в данную переменную будет помещено полученное имя каталога.
//  ИмяФайла        - Строка - в данную переменную будет помещено полученное имя файла.
//
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла) Экспорт
	
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКаталога = ИмяКаталога + Лев(ИмяФайла, Позиция);
		ИмяФайла = Сред(ИмяФайла, Позиция+1);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив описания возможных контактов и формирует из него массив типов.
//
// Возвращаемое значение:
//   Массив   - содержит возможные типы контактов.
//
Функция МассивВозможныхТиповКонтактов() Экспорт
	
	МассивОписанияВозможныхКонтактов = МассивОписанияВозможныхКонтактов();
	
	МассивВозможныхТиповКонтактов = Новый Массив;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияВозможныхКонтактов Цикл
		
		МассивВозможныхТиповКонтактов.Добавить(ЭлементМассиваОписания.Тип);
		
	КонецЦикла;
	
	Возврат МассивВозможныхТиповКонтактов;
	
КонецФункции

Функция МассивОписанияВозможныхКонтактов() Экспорт
	
	Возврат ВзаимодействияКлиентСерверСлужебныйПовтИсп.МассивОписанияВозможныхКонтактов();
	
КонецФункции

// Добавляет элемент в массив структур контакта.
//
// Параметры:
//  МассивОписания                     - Массив - массив, в который будут добавлена структура описания контакта.
//  Тип                                - Тип    - тип ссылки контакта.
//  ВозможностьИнтерактивногоСоздания  - Булево - признак возможности интерактивного создания контакта из документов -
//                                                взаимодействий.
//  Имя                                 - Строка - имя типа контакта , как оно определено в метаданных.
//  Представление                       - Строка - представление типа контакта для отображения пользователю.
//  Иерархический                       - Булево - признак того, является ли справочник иерархическим.
//  ЕстьВладелец                        - Булево - признак того, что у контакта есть владелец.
//  ИмяВладельца                        - Строка - имя владельца контакта, как оно определено в метаданных.
//  ИскатьПоДомену                      - Булево - признак того, что по данному типу контакта будет осуществляться
//                                                 поиск по домену.
//  Связь                               - Строка - описывает возможную связь данного контакта с другим контактом, в
//                                                 случае когда текущий контакт является реквизитом другого контакта.
//                                                 Описывается следующей строкой "ИмяТаблицы.ИмяРеквизита".
//  ИмяРеквизитаПредставлениеКонтакта   - Строка - имя реквизита контакта, из которого будет получено представление контакта.
//
Процедура ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(
	МассивОписания,
	Тип,
	ВозможностьИнтерактивногоСоздания,
	Имя,
	Представление,
	Иерархический,
	ЕстьВладелец,
	ИмяВладельца,
	ИскатьПоДомену,
	Связь,
	ИмяРеквизитаПредставлениеКонтакта = "Наименование") Экспорт
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Тип",                               Тип);
	СтруктураОписания.Вставить("ВозможностьИнтерактивногоСоздания", ВозможностьИнтерактивногоСоздания);
	СтруктураОписания.Вставить("Имя",                               Имя);
	СтруктураОписания.Вставить("Представление",                     Представление);
	СтруктураОписания.Вставить("Иерархический",                     Иерархический);
	СтруктураОписания.Вставить("ЕстьВладелец",                      ЕстьВладелец);
	СтруктураОписания.Вставить("ИмяВладельца",                      ИмяВладельца);
	СтруктураОписания.Вставить("ИскатьПоДомену",                    ИскатьПоДомену);
	СтруктураОписания.Вставить("Связь",                             Связь);
	СтруктураОписания.Вставить("ИмяРеквизитаПредставлениеКонтакта", ИмяРеквизитаПредставлениеКонтакта);

	
	МассивОписания.Добавить(СтруктураОписания);
	
КонецПроцедуры

// Проверяет заполнение контактов в документе взаимодействий и обновляет форму документа взаимодействий//
// Параметры:
//  Объект - ДокументОбъект - документ взаимодействий, для которой выполняется проверка.
//  Форма - УправляемаяФорма - форма документа взаимодействий.
//  ВидДокумента - Строка - строковое имя документа взаимодействий.
//
Процедура ПроверитьЗаполнениеКонтактов(Объект,Форма,ВидДокумента) Экспорт
	
КонецПроцедуры

// Получает строковое представление размера файла.
//
// Параметры:
//  РазмерВБайтах - Число - размер в байтах вложенного файла электронного письма.
//
// Возвращаемое значение:
//   Строка   - строковое представление размера вложенного файла электронного письма.
//
Функция ПолучитьСтроковоеПредставлениеРазмераФайла(РазмерВБайтах) Экспорт
	
	Если РазмерВБайтах = 0 Тогда
		Возврат "";
	Иначе
		РазмерМб = РазмерВБайтах / (1024*1024);
		Если РазмерМб > 1 Тогда
			СтрокаРазмер = Формат(РазмерМб,"ЧДЦ=1") + " " + НСтр("ru = 'Мб'");
		Иначе
			СтрокаРазмер = Формат(РазмерВБайтах /1024,"ЧДЦ=0; ЧН=0") + " " + НСтр("ru = 'Кб'");
		КонецЕсли;
		
		Возврат СтрокаРазмер;
	КонецЕсли	
КонецФункции

// Формирует представление адресата электронной почты.
//
// Параметры:
//  Имя     - Строка - имя адресата.
//  Адрес   - Строка - адрес электронной почты адресата.
//  Контакт - СправочникСсылка - контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка - сформированное представление адресата электронной почты.
//
Функция ПолучитьПредставлениеАдресата(Имя, Адрес, Контакт) Экспорт
	
	Результат = ?(Имя = Адрес ИЛИ Имя = "", Адрес,?(ПустаяСтрока(Адрес),Имя, ?(СтрНайти(Имя, Адрес) > 0, Имя, Имя + " <" + Адрес + ">")));	
	Возврат Результат;
	
КонецФункции

// Формирует представление списка адресатов электронной почты для коллекции адресатов.
//
// Параметры:
//  ТаблицаАдресатов    - ТаблицаЗначений - таблица с данным адресатов.
//  ВключатьИмяКонтакта - Булево - признак необходимости включения в представление данных контакта.
//  Контакт             - СправочникСсылка - контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//  Строка - сформированное представление списка адресатов электронной почты.
//
Функция ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресатов, ВключатьИмяКонтакта = Истина) Экспорт

	Представление = "";
	Для Каждого СтрокаТаблицы Из ТаблицаАдресатов Цикл
		Представление = Представление 
	              + ПолучитьПредставлениеАдресата(СтрокаТаблицы.Представление,
	                                              СтрокаТаблицы.Адрес, 
	                                             ?(ВключатьИмяКонтакта, СтрокаТаблицы.Контакт, "")) + "; ";
	КонецЦикла;

	Возврат Представление;

КонецФункции

// Устанавливает значение свойства для всех подчиненных элементов группы.
Процедура УстановитьСвойствоЭлементовГруппы(ГруппаЭлементов, ИмяСвойства, ЗначениеСвойства) Экспорт
	
	Для каждого ПодчиненныйЭлемент Из ГруппаЭлементов.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			
			УстановитьСвойствоЭлементовГруппы(ПодчиненныйЭлемент, ИмяСвойства, ЗначениеСвойства);
			
		Иначе
			
			ПодчиненныйЭлемент[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет отбор динамического списка в зависимости от наличия режима совместимости.
//
// Параметры:
//  Список  - ДинамическийСписок - список, для которого надо определить отбор.
//
// Возвращаемое значение:
//   Отбор   - требуемый отбор.
//
Функция ОтборДинамическогоСписка(Список) Экспорт

	Возврат Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;

КонецФункции

// Получает расширение для переданного имени файла.
//
// Параметры:
//  ИмяФайла  - Строка - имя файла, для которого необходимо получить расширение.
//
// Возвращаемое значение:
//   Строка   - расширение, полученное из переданного имени файла.
//
Функция РасширениеФайла(Знач ИмяФайла) Экспорт
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат РасширениеФайла;
	
КонецФункции

Функция СписокСтатусов() Экспорт
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить("Все", НСтр("ru = 'Все'"));
	СписокСтатусов.Добавить("КРассмотрению", НСтр("ru = 'К рассмотрению'"));
	СписокСтатусов.Добавить("Отложенные", НСтр("ru = 'Отложенные'"));
	СписокСтатусов.Добавить("Рассмотренные", НСтр("ru = 'Рассмотренные'"));
	
	Возврат СписокСтатусов;
	
КонецФункции

Функция ПолучитьКартинкуСтраницыПодписи(ПоказыватьКартинку) Экспорт

	Возврат ?( ПоказыватьКартинку, БиблиотекаКартинок.КоличествоРассмотрено, Новый Картинка);

КонецФункции 

Функция МассивРасширенийФайлаПисьма()
	
	МассивРасширенийФайла = Новый Массив;
	МассивРасширенийФайла.Добавить("msg");
	МассивРасширенийФайла.Добавить("eml");
	
	Возврат МассивРасширенийФайла;
	
КонецФункции

Функция НаименованиеИРасширениеФайлаПоИмениФайла(Знач ИмяФайла) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Расширение",   "");
	СтруктураВозврата.Вставить("Наименование", "");
	
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		
		СтруктураВозврата.Расширение   = МассивСтрок[МассивСтрок.Количество() - 1];
		СтруктураВозврата.Наименование = Лев(ИмяФайла, СтрДлина(ИмяФайла) - СтрДлина(СтруктураВозврата.Расширение) - 1);
	Иначе
		СтруктураВозврата.Наименование = ИмяФайла;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПредставлениеПисьма(ТемаПисьма, ДатаПисьма) Экспорт
	
	ШаблонПредставления = НСтр("ru = '%1 от %2'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, 
	                                                                ТемаВзаимодействия(ТемаПисьма),
	                                                                Формат(ДатаПисьма, "ДЛФ=D"));
	
КонецФункции

Функция ТемаВзаимодействия(Тема)

	Возврат ?(ПустаяСтрока(Тема), НСтр("ru = '<Без темы>'"), Тема);

КонецФункции 

#КонецОбласти
