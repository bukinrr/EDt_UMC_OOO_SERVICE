
#Область ОбщиеФункцииИПроверки

Функция ИспользоватьЭлектронныеПодписиЭМК() Экспорт
	
	Возврат ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьЭлектронныеПодписиЭМК");
	
КонецФункции

Функция ОбъектПодписываетсяЭЦП(СсылкаИлиТип) Экспорт
	
	Если ТипЗнч(СсылкаИлиТип) = Тип("Тип") Тогда
		Тип = СсылкаИлиТип;
	Иначе
		Тип = ТипЗнч(СсылкаИлиТип);
	КонецЕсли;
	
	Возврат Метаданные.ОпределяемыеТипы.ПодписанныйОбъект.Тип.СодержитТип(Тип);
	
КонецФункции

Функция ПроверитьНеобходимостьПроверятьПодпись(Ссылка) Экспорт
	
	Возврат ИспользоватьЭлектронныеПодписиЭМК() И ОбъектПодписываетсяЭЦП(Ссылка) И Ссылка.ПодписанЭП;
	
КонецФункции

Функция ДокументПодписан(ДокументСсылка) Экспорт
	
	Перем Результат;
	
	КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	КешИнформации.Объект = ДокументСсылка;
	КешИнформации.Прочитать();
	
	Если КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписиНет Тогда
		// Не подписан электронной подписью;
		Результат = Ложь;
	ИначеЕсли КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена Тогда
		// Подписан электронной подписью. Подпись не проверена
		Результат = Ложь;
	ИначеЕсли КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьДействительна Тогда
		// Подписан электронной подписью. Подпись действительна
		Результат = Истина;
	ИначеЕсли КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНедействительна Тогда
		// Подписан электронной подписью. Подпись недействительна.
		Результат = Ложь
	Иначе
		Если ДокументСсылка.ПодписанЭП Тогда
			// Подписан электронной подписью. Подпись не проверена
			Результат = Ложь
		Иначе
			// Не подписан электронной подписью
			Результат = Ложь
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДанныхОбъектаДляПодписи

Функция ПолучитьАктуальныйНомерВерсииПодписываемыхДанных(ТипОбъекта = Неопределено) Экспорт
	
	Возврат ЭЦП_СерверПереопределяемый.ПолучитьАктуальныйНомерВерсииПодписываемыхДанных(ТипОбъекта);
	
КонецФункции

// Функция - Сформировать данные объекта для подписи
//
// Параметры:
//  Ссылка  - Ссылка - Ссылка на подписываемый объект 
//  Версия  - Число - Номер версии формируемого хеша. Если не указан - считается, что формируется самая актуальная версия
// 
// Возвращаемое значение:
// Строка - Представление важных данных объекта в строковом виде
//
Функция СформироватьДанныеОбъектаДляПодписи(Ссылка, Версия = Неопределено, ПараметрыПриема = Неопределено) Экспорт
	
	ТипОбъекта = ТипЗнч(Ссылка);
	
	Если Версия = Неопределено Тогда 
		Версия = ПолучитьАктуальныйНомерВерсииПодписываемыхДанных(ТипОбъекта);
	КонецЕсли;
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Ссылка);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		Возврат СформироватьДанныеПриема(Ссылка, Версия, ПараметрыПриема);
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		Возврат СформироватьДанныеПрохожденияМедОсмотра(Ссылка);
	ИначеЕсли ИмяТипаДокумента = "Документ.МедицинскийОтчет" Тогда
		Возврат СформироватьДанныеМедицинскийОтчет(Ссылка);
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		Возврат СформироватьДанныеВрачебнойКомиссии(Ссылка);
	КонецЕсли;
	
КонецФункции

Функция СформироватьДанныеФайловОбъектаДляПодписи(Ссылка, Версия, ХешироватьДанные = Истина, ФункцияХеш = Неопределено) Экспорт
	
	Возврат ЭЦП_СерверПереопределяемый.СформироватьДанныеФайловОбъектаДляПодписи(Ссылка, Версия, ХешироватьДанные, ФункцияХеш);
	
КонецФункции

Функция СформироватьДанныеПриема(Ссылка, Версия, ПараметрыПриема) Экспорт
	
	Возврат ЭЦП_СерверПереопределяемый.СформироватьДанныеПриема(Ссылка, Версия, ПараметрыПриема);
	
КонецФункции

Функция ПолучитьСтроковоеПредставлениеЗначения(Значение, Версия, Имя = Неопределено) Экспорт
	
	Возврат ЭЦП_СерверПереопределяемый.ПолучитьСтроковоеПредставлениеЗначения(Значение, Имя);
	
КонецФункции

Функция СформироватьДанныеПрохожденияМедОсмотра(Ссылка) Экспорт
	
	Возврат ЭЦП_СерверПереопределяемый.СформироватьДанныеПрохожденияМедОсмотра(Ссылка);
	
КонецФункции

Функция СформироватьДанныеМедицинскийОтчет(Ссылка) 
	Возврат ЭЦП_СерверПереопределяемый.СформироватьДанныеМедицинскийОтчет(Ссылка);	
КонецФункции

Функция СформироватьДанныеВрачебнойКомиссии(Ссылка)
	Возврат ЭЦП_СерверПереопределяемый.СформироватьДанныеВрачебнойКомиссии(Ссылка);
КонецФункции
#КонецОбласти

#Область ПроверкаПодписейОбъекта

Функция СоздатьТаблицуПодписей()
	
	ТаблицаПодписей = Новый ТаблицаЗначений;
	ТаблицаПодписей.Колонки.Добавить("КомуВыданСертификат",			Новый ОписаниеТипов("Строка"));
	ТаблицаПодписей.Колонки.Добавить("ДатаПодписи",					Новый ОписаниеТипов("Дата"));
	ТаблицаПодписей.Колонки.Добавить("Комментарий",					Новый ОписаниеТипов("Строка"));
	ТаблицаПодписей.Колонки.Добавить("Статус",						Новый ОписаниеТипов("Строка"));
	ТаблицаПодписей.Колонки.Добавить("Объект");
	ТаблицаПодписей.Колонки.Добавить("АдресПодписи",				Новый ОписаниеТипов("Строка"));
	ТаблицаПодписей.Колонки.Добавить("Отпечаток",					Новый ОписаниеТипов("Строка"));
	ТаблицаПодписей.Колонки.Добавить("Неверна",						Новый ОписаниеТипов("Булево"));
	ТаблицаПодписей.Колонки.Добавить("ИндексКартинки",				Новый ОписаниеТипов("Число"));
	ТаблицаПодписей.Колонки.Добавить("УстановившийПодпись",			Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаПодписей.Колонки.Добавить("НомерСтроки",					Новый ОписаниеТипов("Число"));
	ТаблицаПодписей.Колонки.Добавить("АдресСертификата",			Новый ОписаниеТипов("Строка"));
	ТаблицаПодписей.Колонки.Добавить("Зашифрован",					Новый ОписаниеТипов("Булево"));
	ТаблицаПодписей.Колонки.Добавить("ТекстОшибкиПроверкиПодписи",	Новый ОписаниеТипов("Строка"));
	ТаблицаПодписей.Колонки.Добавить("Версия",						Новый ОписаниеТипов("Число"));
	ТаблицаПодписей.Колонки.Добавить("Субъект",						Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаПодписей;
	
КонецФункции

Функция ПолучитьМассивДанныхПодписейОбъекта(Ссылка) Экспорт
	
	ТаблицаПодписей = СоздатьТаблицуПодписей();
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписейДокумента(Ссылка, ТаблицаПодписей, 0, Новый УникальныйИдентификатор);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПодписей);
	
КонецФункции

Процедура ПроверитьВсеПодписиОбъекта(Ссылка) Экспорт
	
	ТаблицаПодписей = СоздатьТаблицуПодписей();
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписейДокумента(Ссылка, ТаблицаПодписей, 0, Новый УникальныйИдентификатор);
	// бит_СертификатыЭЦП.ПроверитьВсеНаСервере(ТаблицаПодписей);
	УстановитьСтатусПроверкиЭЦПОбъекта(Ссылка);
	
КонецПроцедуры

Процедура УстановитьСтатусПроверкиЭЦПОбъекта(Ссылка) Экспорт
	
	ТаблицаПодписей = СоздатьТаблицуПодписей();
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписейДокумента(Ссылка, ТаблицаПодписей, 0, Новый УникальныйИдентификатор);
	
	ОбщаяПодписьВерна = Ложь;
	Для Каждого ОднаПодпись Из ТаблицаПодписей Цикл
		Если Не ОднаПодпись.Неверна Тогда
			ОбщаяПодписьВерна = Истина;
			Если ОбщаяПодписьВерна = Неопределено Тогда
				ОбщаяПодписьВерна = Истина;
			Иначе
				ОбщаяПодписьВерна = ОбщаяПодписьВерна И Не ОднаПодпись.Неверна;
			КонецЕсли;
			бит_СертификатыЭЦП.УстановитьСтатусПроверки(Ссылка, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщаяПодписьВерна = Ложь Тогда
		бит_СертификатыЭЦП.УстановитьСтатусПроверки(Ссылка, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
	КонецЕсли;
	Если ТаблицаПодписей.Количество() = 0 Тогда
		бит_СертификатыЭЦП.УстановитьСтатусПроверки(Ссылка, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПолейСубъектаЭЦП

Функция ПолучитьНастройкуПолейСубъектаЭЦП(Дата = Неопределено) Экспорт
	
	Возврат УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("НастройкаПолейСубъектаЭЦП", Дата).Получить();
	
КонецФункции

Функция ПолучитьПредставлениеПолейСубъектаЭЦП(Знач Субъект, НастройкаПолей = Неопределено) Экспорт
	
	Если НастройкаПолей = Неопределено Тогда
		НастройкаПолей = ПолучитьНастройкуПолейСубъектаЭЦП();
	КонецЕсли;
	
	Представление = "";
	Для Каждого ПолеСубъекта Из НастройкаПолей Цикл
		ЗначениеПоля = "";
		МетданныеСубъекта = ПолеСубъекта.Метаданные();
		ИмяМетаданных = МетданныеСубъекта.Имя;
		Если Субъект.Свойство(МетданныеСубъекта.ЗначенияПеречисления[Перечисления[ИмяМетаданных].Индекс(ПолеСубъекта)].Имя, ЗначениеПоля) Тогда
			Представление = Представление + ", " + ЗначениеПоля;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Прав(Представление, СтрДлина(Представление) - 2);
	
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

// Рассмотреть вопрос отказа от этих обработчиков
// Для супервайзера проверки не действуют, а врач не может изменить в документе проверяемые реквизиты

Процедура ПриемПередЗаписьюПроверкаИзмененияПодписанныхЭЦППередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Если Не Источник.ЭтоНовый()
		И Источник.ПометкаУдаления
		И Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления
		И Источник.ПодписанЭП
	Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет права на удаление данной ЭМПЗ.");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Источник.ЭтоНовый() И Не Отказ И ИспользоватьЭлектронныеПодписиЭМК() И
		(Источник.ПодписанЭП Или Источник.ДополнительныеСвойства.Свойство("ЭтоПодписание"))
	Тогда
		Версия = Неопределено;
		Если Источник.ПодписанЭП
			И Не бит_РаботаСФайлами.ФайлЭМДСохранен(Источник.Ссылка)
		Тогда
			Источник.ДополнительныеСвойства.Вставить("СтарыеДанныеОбъекта", СформироватьДанныеОбъектаДляПодписи(Источник.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриемПриЗаписиПроверкаИзмененияПодписанныхЭЦППриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("СтарыеДанныеОбъекта") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ПараметрыПриема") Тогда
			НовыеДанныеОбъекта = СформироватьДанныеОбъектаДляПодписи(Источник.Ссылка, , Источник.ДополнительныеСвойства.ПараметрыПриема);
		Иначе
			НовыеДанныеОбъекта = СформироватьДанныеОбъектаДляПодписи(Источник.Ссылка);
		КонецЕсли;
		
		Если НовыеДанныеОбъекта <> Источник.ДополнительныеСвойства.СтарыеДанныеОбъекта Тогда
			Если Источник.ПодписанЭП Тогда
				Если Не Источник.ПометкаУдаления Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет права на изменение данной ЭМПЗ.");
				КонецЕсли;
			Иначе
				Если Источник.Ответственный <> ПараметрыСеанса.ТекущийПользователь
					И Источник.Врач <> ПараметрыСеанса.ТекущийПользователь.Сотрудник
				Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет права на изменение данной ЭМПЗ, поскольку её ведёт другой врач.");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СформировтьPDFИзТабДока(Ссылка, ИмяМакета, ИмяВременногоКаталога = Неопределено, СохранениеЭМД = Истина, ИмяДокумента = "", ЗаписьВПоток = Ложь, ТабДок = Неопределено) Экспорт
	
	Если ТабДок = Неопределено Тогда
		Если ТипЗнч(ИмяМакета) = Тип("Строка") Тогда
			МодульМенеджераДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
			Если ДопСерверныеФункции.ИмяСсылочногоТипа(Ссылка) = "Документ.ПрохождениеМедосмотра" Тогда
				ТабДок = МодульМенеджераДокумента.Печать(Ссылка, ИмяМакета, СохранениеЭМД);
			Иначе
				ТабДок = МодульМенеджераДокумента.Печать(Ссылка, ИмяМакета, СохранениеЭМД);
			КонецЕсли;
		Иначе
			// В частности, для печати дополнительных приказов медосмотров
			стрРасшифровка = Новый Структура;
			стрРасшифровка.Вставить("ВидПечатнойФормы", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
			стрРасшифровка.Вставить("СсылкаНаВнешнююОбработку", ИмяМакета);
			стрРасшифровка.Вставить("ЗаменяемаяПечатнаяФорма", Справочники.ВнешниеОбработки.ПустаяСсылка());
			ТабДок = УниверсальныеМеханизмыСервер.НапечататьВнешнююФормуСервер(Ссылка, стрРасшифровка);
		КонецЕсли;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.15.0") > 0 Тогда
		ТипФайлаЭМД = "PDF_A_1";
	Иначе
		ТипФайлаЭМД = "PDF";
	КонецЕсли;
	
	Если ЗаписьВПоток Тогда
		ДанныеТабдока = Новый ПотокВПамяти;
	Иначе
		ДанныеТабдока = ИмяВременногоКаталога + ?(ЗначениеЗаполнено(ИмяДокумента), Строка(ИмяДокумента), Строка(Ссылка.УникальныйИдентификатор())) + ".pdf";
	КонецЕсли;
	
	ТабДок.Записать(ДанныеТабдока, ТипФайлаТабличногоДокумента[ТипФайлаЭМД]);
	
	Возврат ДанныеТабдока;
	
КонецФункции

Функция ТекущийПользовательЯвляетсяВрачомДокумента(ВрачДокумента) Экспорт
	
	СотрудникиПользователя = ОтраслевыеДополнения.СотрудникиПользователя(ПараметрыСеанса.ТекущийПользователь);
	Возврат СотрудникиПользователя.Найти(ВрачДокумента) <> Неопределено;
	
КонецФункции

Функция ПолучитьСертификатыМОПользователя(Филиал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодписиМО.Сертификат КАК СертификатМО
		|ИЗ
		|	РегистрСведений.ПодписиМО КАК ПодписиМО
		|ГДЕ
		|	(ПодписиМО.Филиал = &Филиал ИЛИ ПодписиМО.Филиал.Организация = &Филиал)
		|	И ПодписиМО.Сертификат В
		|			(ВЫБРАТЬ
		|				СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|			ГДЕ
		|				СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления = ЛОЖЬ
		|				И СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СертификатМО");
	
КонецФункции

Процедура ВывестиБлокиЭЦП(СсылкаНаОбъект, Макет, ТабДокумент, ПорядокРолейПодписей, ОбластьЭЦП) Экспорт
	
	Если СсылкаНаОбъект.ПодписанЭП Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РолиИПодписиЭМД.РольПодписи КАК РольПодписи,
			|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
			|		ПО (РолиИПодписиЭМД.Документ = &Документ)
			|			И (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
			|			И (РолиИПодписиЭМД.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|				ИЛИ РолиИПодписиЭМД.Пользователь = ЭлектронныеПодписи.УстановившийПодпись)";
		
		Запрос.УстановитьПараметр("Документ", СсылкаНаОбъект);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеПодписейПоРолям = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			Если ПорядокРолейПодписей.Найти(Выборка.РольПодписи) <> Неопределено Тогда
				ДанныеПодписейПоРолям.Вставить(Выборка.РольПодписи, ПолучитьДанныеСертификата(Выборка.Сертификат, СсылкаНаОбъект, Выборка.ДатаПодписи));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Роль Из ПорядокРолейПодписей Цикл
			ДанныеПодписи = ДанныеПодписейПоРолям.Получить(Роль);
			Если ДанныеПодписи <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ОбластьЭЦП.Параметры, ДанныеПодписи);
				ТабДокумент.Вывести(ОбластьЭЦП);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ОбластьЭЦП = Макет.ПолучитьОбласть("ОбластьЭЦПОтсутствует");
		ТабДокумент.Вывести(ОбластьЭЦП);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеСертификата(ДанныеСертификата, Ссылка, ДатаПодписи, HTML = Ложь) Экспорт
	
	ДанныеПодписи = Новый Структура("Сертификат, ВладелецСертификата, ДействительностьСертификатаНачало, ДействительностьСертификатаОкончание, ДатаПодписи, НаименованиеОрганизации");
	
	Если ТипЗнч(ДанныеСертификата) = Тип("Строка") Тогда
		Сертификат = Новый СертификатКриптографии(ПолучитьИзВременногоХранилища(ДанныеСертификата));
	Иначе
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата.Получить());
	КонецЕсли;
	
	Если Сертификат.Субъект.Свойство("O") Тогда
		ДанныеЮрЛица = Новый Массив;
		ДанныеЮрЛица.Добавить(?(Сертификат.Субъект.Свойство("OID2_5_4_10"), Сертификат.Субъект.OID2_5_4_10, ""));			// Организация
		ДанныеЮрЛица.Добавить(?(Сертификат.Субъект.Свойство("OID2_5_4_7"), Сертификат.Субъект.OID2_5_4_7, ""));				// Населенный пункт
		ДанныеЮрЛица.Добавить(?(Сертификат.Субъект.Свойство("OID2_5_4_9"), Сертификат.Субъект.OID2_5_4_9, ""));				// Улица и дом
		ДанныеЮрЛица.Добавить(?(Сертификат.Субъект.Свойство("OID1_2_643_100_1"), Сертификат.Субъект.OID1_2_643_100_1, ""));	// ОГРН
		ДанныеПодписи.ВладелецСертификата = СтрСоединить(ДанныеЮрЛица, ", ") + "";
		ДанныеПодписи.НаименованиеОрганизации = ?(Сертификат.Субъект.Свойство("OID2_5_4_10"), Сертификат.Субъект.OID2_5_4_10, "");
	Иначе
		ФИОВладельца = Новый Массив;
		ФИОВладельца.Добавить(Сертификат.Субъект.SN);	// Фамилия физического лица
		ФИОВладельца.Добавить(Сертификат.Субъект.GN);	// Имя и отчество физического лица
		ДанныеПодписи.ВладелецСертификата = СтрСоединить(ФИОВладельца, " ");
		ДанныеПодписи.НаименованиеОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Ссылка).НазваниеОрганизации;
	КонецЕсли;
	
	ДанныеПодписи.Сертификат = Сертификат.СерийныйНомер;
	ДанныеПодписи.ДействительностьСертификатаНачало = Формат(Сертификат.ДатаНачала, "ДФ=dd.MM.yyyy");
	ДанныеПодписи.ДействительностьСертификатаОкончание = Формат(Сертификат.ДатаОкончания, "ДФ=dd.MM.yyyy");
	ДанныеПодписи.ДатаПодписи = Формат(ДатаПодписи, "ДФ=dd.MM.yyyy");
	
	Возврат ДанныеПодписи;
	
КонецФункции

Функция СохранитьИзмененияВДокументе(Документ, СтруктурыЭЦППоУИДЭЦП) Экспорт
	
	РезультатСохранения = Новый Структура;
	РезультатСохранения.Вставить("ЗаписьУспешна",	Ложь);
	РезультатСохранения.Вставить("УИДы",			Новый Массив);
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат РезультатСохранения;
	КонецЕсли;
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	Для Каждого СтруктураЭЦППоСтрокеЭЦП Из СтруктурыЭЦППоУИДЭЦП Цикл
		// Фиксируем в документе полученную информацию
		СтруктураПараметровЭЦП = СтруктураЭЦППоСтрокеЭЦП.СтруктураДанных;
		
		СтрРИП = ДокументОбъект.РолиИПодписиЭМД.Добавить();
		СтрРИП.УИД_ЭМД					= СтруктураПараметровЭЦП.УИД;
		СтрРИП.УИД_ЭЦП					= СтруктураЭЦППоСтрокеЭЦП.УИД_ЭЦП;
		СтрРИП.РольСотрудника			= СтруктураПараметровЭЦП.Роль;
		СтрРИП.ДолжностьМинздрава		= СтруктураПараметровЭЦП.ДолжностьМЗ;
		
		СтрРезультат = Новый Структура("УИД_ЭМД, УИД_ЭЦП, РольСотрудника, ДолжностьМинздрава, СпециальностьМинздрава");
		ЗаполнитьЗначенияСвойств(СтрРезультат, СтрРИП);
		СтрРезультат.СпециальностьМинздрава = СтруктураПараметровЭЦП.СпециальностьМинздрава;
		РезультатСохранения.УИДы.Добавить(СтрРезультат);
	КонецЦикла;
	
	// Сохраним изменения в документе и вернем результат
	Попытка
		ДокументОбъект.Записать();
		РезультатСохранения.ЗаписьУспешна = Истина;
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РезультатСохранения.ЗаписьУспешна = Ложь;
	КонецПопытки;
	
	Возврат РезультатСохранения;
	
КонецФункции

Функция СохранитьИзмененияВРолиИПодписиЭМД(Документ, СтрокиЭЦПНеРЭМД) Экспорт
	
	РезультатСохранения = Новый Структура("ЗаписьУспешна, УИДы", Ложь, Новый Массив);
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат РезультатСохранения;
	КонецЕсли;
	
	Для Каждого СтрокаЭЦП Из СтрокиЭЦПНеРЭМД Цикл
		// Фиксируем в документе полученную информацию
		СтрРИП = РегистрыСведений.РолиИПодписиЭМД.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(СтрРИП, СтрокаЭЦП);
		СтрРИП.УИД_ЭЦП = СтрокаЭЦП.ПолученныйУИДЭЦП;
		СтрРИП.Документ = Документ;
		
		СтрРИП.Записать();
		
		РезультатСохранения.ЗаписьУспешна = Истина;
		РезультатСохранения.УИДы.Добавить(Новый Структура("Роль, УИД_ЭМД, УИД_ЭЦП", СтрРИП.РольПодписи, СтрРИП.УИД_ЭМД, СтрРИП.УИД_ЭЦП));
	КонецЦикла;
	
	Возврат РезультатСохранения;
	
КонецФункции

#Область КартинкаЭЦП

Функция ИмяРисункаЭЦПВТабличномДокументе() Экспорт
	
	Возврат "бит_ЭЦП";
	
КонецФункции

Процедура ДобавитьРисунокЭЦПВТабличныйДокумент(ТабличныйДокумент, ПараметрыЭЦПТабличногоШаблона, ДанныеПодписи, РасположениеПодписи, ВысотаТаблицы) Экспорт
	
	ДанныеКартинки = СформироватьДанныеКартинкиСертификатаSVG(ДанныеПодписи);
	ПараметрыРисунка = СформироватьПараметрыРисунка(ТабличныйДокумент, ПараметрыЭЦПТабличногоШаблона, ДанныеКартинки, РасположениеПодписи, ВысотаТаблицы);
	
	Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Имя = ИмяРисункаЭЦПВТабличномДокументе();
	
	ИмяSVG = ПолучитьИмяВременногоФайла("svg");
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ДанныеКартинки.ТекстКартинки);
	ТекстДок.Записать(ИмяSVG);
	
	Рисунок.Картинка = Новый Картинка(ИмяSVG);
	Рисунок.Расположить(ТабличныйДокумент.Область(ПараметрыРисунка.Расположение));
	ЗаполнитьЗначенияСвойств(Рисунок, ПараметрыРисунка);
	Рисунок.Верх = Рисунок.Верх + ПараметрыРисунка.СдвигВерх;
	Рисунок.Лево = Рисунок.Лево + ПараметрыРисунка.СдвигЛево;
	
КонецПроцедуры

Функция СформироватьПараметрыРисунка(ТабличныйДокумент, ПараметрыЭЦП, ДанныеКартинки, РасположениеПодписи, ВысотаТаблицы)
	
	ПараметрыРисунка = ПолучитьПараметрыРисункаПоУмолчанию();
	
	стрШирина = НСтр(ПараметрыЭЦП, "Ширина");
	
	Если ЗначениеЗаполнено(стрШирина)
		И Число(стрШирина) > 0
	Тогда
		ПараметрыРисунка.Ширина = Число(стрШирина);
	КонецЕсли;
	
	ПараметрыРисунка.Высота = ДанныеКартинки.ВысотаТаблицы*ПараметрыРисунка.Ширина/ДанныеКартинки.ШиринаТаблицы;
	
	Если РасположениеПодписи = Перечисления.РасположениеПодписи.ПоЗаданнымКоординатам Тогда
		стрРасположение	= Нстр(ПараметрыЭЦП, "КоордРасположение");
		стрСдвигВерх	= НСтр(ПараметрыЭЦП, "КоордВерх");
		стрСдвигЛево	= НСтр(ПараметрыЭЦП, "КоордЛево");
	Иначе
		стрРасположение	= СтрШаблон("R%1C1", ВысотаТаблицы+1);
		стрСдвигВерх	= НСтр(ПараметрыЭЦП, "ПослеВерх");
		стрСдвигЛево	= НСтр(ПараметрыЭЦП, "ПослеЛево");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(стрРасположение) Тогда
		ПараметрыРисунка.Расположение = стрРасположение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(стрСдвигВерх) Тогда
		ПараметрыРисунка.СдвигВерх = Число(стрСдвигВерх);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(стрСдвигЛево) Тогда
		ПараметрыРисунка.СдвигЛево = Число(стрСдвигЛево);
	КонецЕсли;
	
	Возврат ПараметрыРисунка;
	
КонецФункции

Функция ПолучитьПараметрыРисункаПоУмолчанию()
	
	ПараметрыРисунка = Новый Структура;
	
	ПараметрыРисунка.Вставить("СдвигВерх",		0);
	ПараметрыРисунка.Вставить("СдвигЛево",		0);
	ПараметрыРисунка.Вставить("Ширина",			50);
	ПараметрыРисунка.Вставить("Узор",			ТипУзораТабличногоДокумента.БезУзора);
	ПараметрыРисунка.Вставить("Линия",			Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии));
	ПараметрыРисунка.Вставить("Расположение",	"R1C1");
	ПараметрыРисунка.Вставить("Высота",			11);
	
	Возврат ПараметрыРисунка;
	
КонецФункции

Функция СформироватьДанныеКартинкиСертификатаSVG(ДанныеПодписи) Экспорт
	
	ШаблонКартинки =
		"<?xml version='1.0' encoding='UTF-8' standalone='no'?>
		|<svg width='%1' height='%2' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.2' baseProfile='tiny'>
		|	<g fill='none' opacity='%5' stroke='black' fill-rule='evenodd' stroke-linecap='butt' stroke-linejoin='bevel'>
		|		<g fill='#000090' stroke='none'>
		|			%3
		|		</g>
		|		<g fill='#000000' stroke='none' font-style='normal' font-family='Consolas' font-size='5' font-weight='Bold'>
		|			%4
		|		</g>
		|	</g>
		|</svg>";
	
	ПараметрыТаблицы = ПолучитьПараметрыТаблицыЭЦП();
	
	СтрокиСерийногоНомера	= ПолучитьМассивСтрокДляТаблицыЭЦП(ДанныеПодписи.Сертификат,				ПараметрыТаблицы.ДлинаУзкойСтроки);
	СтрокиДанныхВладельца	= ПолучитьМассивСтрокДляТаблицыЭЦП(ДанныеПодписи.ВладелецСертификата,		ПараметрыТаблицы.ДлинаУзкойСтроки,	 ПараметрыТаблицы.Разделители);
	СтрокиНаименования		= ПолучитьМассивСтрокДляТаблицыЭЦП(ДанныеПодписи.НаименованиеОрганизации,	ПараметрыТаблицы.ДлинаШирокойСтроки, ПараметрыТаблицы.Разделители);
	
	ДатыЭЦП = Новый Структура("ДействительностьСертификатаНачало, ДействительностьСертификатаОкончание, ДатаПодписи");
	ЗаполнитьЗначенияСвойств(ДатыЭЦП, ДанныеПодписи);
	
	ТекстЛиний = ПолучитьТекстЛинийКартинкиЭЦП(СтрокиСерийногоНомера, СтрокиДанныхВладельца, СтрокиНаименования, ПараметрыТаблицы.ВысотаТаблицы);
	ТекстДанных = ПолучитьТекстДанныхКартинкиЭЦП(СтрокиСерийногоНомера, СтрокиДанныхВладельца, СтрокиНаименования, ДатыЭЦП);
	
	ТекстКартинки = СтрШаблон(ШаблонКартинки, ПараметрыТаблицы.ШиринаТаблицы, ПараметрыТаблицы.ВысотаТаблицы, ТекстЛиний, ТекстДанных, ПараметрыТаблицы.Прозрачность);
	
	Возврат Новый Структура("ТекстКартинки, ШиринаТаблицы, ВысотаТаблицы", ТекстКартинки, ПараметрыТаблицы.ШиринаТаблицы, ПараметрыТаблицы.ВысотаТаблицы);
	
КонецФункции

Функция ПолучитьПараметрыТаблицыЭЦП()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ШиринаТаблицы",		 183);
	Параметры.Вставить("ВысотаТаблицы",		 41);
	Параметры.Вставить("ДлинаУзкойСтроки",	 53);
	Параметры.Вставить("ДлинаШирокойСтроки", 65);
	Параметры.Вставить("Прозрачность",		 1);
	
	Параметры.Вставить("Разделители", " " + Символы.НПП + Символы.Таб);
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьМассивСтрокДляТаблицыЭЦП(Знач Значение, ДлинаСтроки, Разделители = Неопределено) Экспорт
	
	Строки = Новый Массив;
	
	Значение = СтрЗаменить(Значение, Символы.ПС,	"");
	Значение = СтрЗаменить(Значение, Символы.ВТаб,	"");
	Значение = СтрЗаменить(Значение, Символы.ВК,	"");
	
	Если Разделители = Неопределено Тогда
		
		Пока ЗначениеЗаполнено(Значение) Цикл
			Строка = Лев(Значение, ДлинаСтроки);
			Строки.Добавить(Строка);
			Значение = СокрЛП(Прав(Значение, СтрДлина(Значение) - ДлинаСтроки));
		КонецЦикла;
	Иначе
		
		Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Значение, Разделители);
		Строка = "";
		
		Для Каждого Слово Из Слова Цикл
			Если СтрДлина(СтрШаблон("%1 %2", Строка, Слово)) > ДлинаСтроки Тогда
				Строки.Добавить(Строка);
				Строка = Слово;
			ИначеЕсли Строка = "" Тогда
				Строка = Слово;
			Иначе
				Строка = СтрШаблон("%1 %2", Строка, Слово);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Строка) Тогда
			Строки.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Если Строки.Количество() = 0 Тогда
		Строки.Добавить("");
	КонецЕсли;
	
	Возврат Строки;
	
КонецФункции

Функция ПолучитьТекстЛинийКартинкиЭЦП(СтрокиСерийногоНомера, СтрокиДанныхВладельца, СтрокиНаименования, ВысотаТаблицы)
	
	ВысотаСтрокСерийногоНомера	= 6*(СтрокиСерийногоНомера.Количество()-1);
	ВысотаСтрокДанныхВладельца	= 6*(СтрокиДанныхВладельца.Количество()-1);
	ВысотаСтрокНаименования		= 6*(СтрокиНаименования.Количество()-1);
	
	ВысотаЛинииСерийногоНомера	= 17 + ВысотаСтрокСерийногоНомера;
	ВысотаЛинииДанныхВладельца	= 25 + ВысотаСтрокСерийногоНомера + ВысотаСтрокДанныхВладельца;
	ВысотаЛинииНаименования		= 33 + ВысотаСтрокСерийногоНомера + ВысотаСтрокДанныхВладельца;
	
	ВысотаТаблицы = ВысотаТаблицы + ВысотаСтрокСерийногоНомера + ВысотаСтрокДанныхВладельца + ВысотаСтрокНаименования;
	
	СтрокиЛиний = Новый Массив;
	СтрокиЛиний.Добавить("<path d='M0,0 L182,0 L182,1 L0,1'/>");																			// Горизонтальная верхняя
	СтрокиЛиний.Добавить("<path d='M0,8 L182,8 L182,9 L0,9'/>");																			// Горизонтальная между заголовком и сертификатом
	СтрокиЛиний.Добавить(СтрШаблон("<path d='M0,%1 L182,%1 L182,%2 L0,%2'/>",	ВысотаТаблицы-1, ВысотаТаблицы));							// Горизонтальная нижняя
	СтрокиЛиний.Добавить(СтрШаблон("<path d='M0,0 L1,0 L1,%1 L0,%1'/>",			ВысотаТаблицы));											// Вертикальная левая
	СтрокиЛиний.Добавить(СтрШаблон("<path d='M183,0 L182,0 L182,%1 L183,%1'/>",	ВысотаТаблицы));											// Вертикальная правая
	СтрокиЛиний.Добавить(СтрШаблон("<path d='M0,%1 L182,%1 L182,%2 L0,%2'/>",	ВысотаЛинииСерийногоНомера-1, ВысотаЛинииСерийногоНомера));	// Горизонтальная между сертификатом и владельцем
	СтрокиЛиний.Добавить(СтрШаблон("<path d='M0,%1 L182,%1 L182,%2 L0,%2'/>",	ВысотаЛинииДанныхВладельца-1, ВысотаЛинииДанныхВладельца));	// Горизонтальная между владельцем и датами
	СтрокиЛиний.Добавить(СтрШаблон("<path d='M0,%1 L182,%1 L182,%2 L0,%2'/>",	ВысотаЛинииНаименования-1, ВысотаЛинииНаименования));		// Горизонтальная между датами и наименованием организации
	СтрокиЛиний.Добавить(СтрШаблон("<path d='M33,8 L34,8 L34,%1 L33,%1'/>",		ВысотаЛинииДанныхВладельца));								// Вертикальная внутренняя
	
	Возврат СтрСоединить(СтрокиЛиний, Символы.ПС);
	
КонецФункции

Функция ПолучитьТекстДанныхКартинкиЭЦП(СтрокиСерийногоНомера, СтрокиДанныхВладельца, СтрокиНаименования, Даты)
	
	СтрокиДанных = Новый Массив;
	СтрокиДанных.Добавить("<text x='38' y='6'>ДОКУМЕНТ ПОДПИСАН ЭЛЕКТРОННОЙ ПОДПИСЬЮ</text>"); // Заголовок
	
	// Сертификат
	СтрокиДанных.Добавить("<text x='2' y='14'>Сертификат</text>");
	ТекСтрока = 0;
	Для Каждого СтрокаДанных Из СтрокиСерийногоНомера Цикл
		СтрокиДанных.Добавить(СтрШаблон("<text x='35' y='%1'>%2</text>", 14+6*ТекСтрока, СтрокаДанных));
		ТекСтрока = ТекСтрока + 1;
	КонецЦикла;
	
	ДопВысота = 6*СтрокиСерийногоНомера.ВГраница();
	
	// Владелец
	СтрокиДанных.Добавить(СтрШаблон("<text x='2' y='%1'>Владелец</text>", 22+ДопВысота+6*СтрокиДанныхВладельца.ВГраница()/2));
	ТекСтрока = 0;
	Для Каждого СтрокаДанных Из СтрокиДанныхВладельца Цикл
		СтрокиДанных.Добавить(СтрШаблон("<text x='35' y='%1'>%2</text>", 22+ДопВысота+6*ТекСтрока, СтрокаДанных));
		ТекСтрока = ТекСтрока + 1;
	КонецЦикла;
	
	ДопВысота = ДопВысота + 6*СтрокиДанныхВладельца.ВГраница();
	
	// Даты
	СтрокиДанных.Добавить(СтрШаблон("<text x='2' y='%1'>Действителен с %2 по %3. Дата подписи: %4</text>", 30+ДопВысота, Даты.ДействительностьСертификатаНачало, Даты.ДействительностьСертификатаОкончание, Даты.ДатаПодписи));
	
	// Наименование организации
	ТекСтрока = 0;
	Для Каждого СтрокаДанных Из СтрокиНаименования Цикл
		СтрокиДанных.Добавить(СтрШаблон("<text x='2' y='%1'>%2</text>", 38+ДопВысота+6*ТекСтрока, СтрокаДанных));
		ТекСтрока = ТекСтрока + 1;
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиДанных, Символы.ПС);
	
КонецФункции

#КонецОбласти