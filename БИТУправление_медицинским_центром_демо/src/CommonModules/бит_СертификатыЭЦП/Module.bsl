////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет список подписей файла.
//
// Параметры:
//  ТекущийОбъект - СправочникСсылка.ВерсииФайлов
//
Процедура ЗаполнитьСписокПодписейФайла(ТекущийОбъект, ЭлементыДерева, КоличествоПодписей,
	УникальныйИдентификатор, ПолучитьДляПомеченногоНаУдалениеОбъекта = Ложь) Экспорт
	
	КоличествоПодписей = 0;
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Выборка = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Объект.ПометкаУдаления И Не ПолучитьДляПомеченногоНаУдалениеОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Зашифрован = ТекущийОбъект.Зашифрован;
			НоваяСтрока.ИндексКартинки = -1;
			НоваяСтрока.Статус = бит_СертификатыЭЦПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
				Выборка.ПодписьВерна, Выборка.СертификатДействителен, Выборка.ДатаПроверкиПодписи);
			
			Если НоваяСтрока.Свойство("КомуВыданСертификатИСтатус") Тогда
				НоваяСтрока.КомуВыданСертификатИСтатус = 
					НоваяСтрока.КомуВыданСертификат
					+ Символы.ПС
					+ НоваяСтрока.Статус;
			КонецЕсли;
			Если НоваяСтрока.Свойство("ДатаПодписиИКомментарий") Тогда
				НоваяСтрока.ДатаПодписиИКомментарий = 
					Формат(НоваяСтрока.ДатаПодписи, "ДФ='dd.MM.yyyy HH:mm'")
					+ Символы.ПС
					+ НоваяСтрока.Комментарий;
			КонецЕсли;
			
			ДвоичныеДанные = Выборка.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
					УникальныйИдентификатор);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			КоличествоПодписей = КоличествоПодписей + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей Входящего Исходящего Внутреннего документа в дереве.
//
Процедура ЗаполнитьСписокПодписейДокумента(ТекущийОбъект, ЭлементыДерева, КоличествоПодписей,
	УникальныйИдентификатор, ПодписиЭМД = Неопределено) Экспорт
	
	КоличествоПодписей = 0;
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Выборка = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка,,,, ПодписиЭМД);
		
		КоличествоПодписей = Выборка.Количество();
		
		Если ЭлементыДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ИндексКартинки = -1;
			НоваяСтрока.Статус = бит_СертификатыЭЦПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
				Выборка.ПодписьВерна, Выборка.СертификатДействителен, Выборка.ДатаПроверкиПодписи);
			
			Если НоваяСтрока.Свойство("КомуВыданСертификатИСтатус") Тогда
				НоваяСтрока.КомуВыданСертификатИСтатус = 
					НоваяСтрока.КомуВыданСертификат
					+ Символы.ПС
					+ НоваяСтрока.Статус;
			КонецЕсли;
			Если НоваяСтрока.Свойство("ДатаПодписиИКомментарий") Тогда
				НоваяСтрока.ДатаПодписиИКомментарий = 
					Формат(НоваяСтрока.ДатаПодписи, "ДФ='dd.MM.yyyy HH:mm'")
					+ Символы.ПС
					+ НоваяСтрока.Комментарий;
			КонецЕсли;
			
			ДвоичныеДанные = Выборка.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
					УникальныйИдентификатор);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей Входящего Исходящего Внутреннего документа и его подчиненных файлов.
//
Процедура ЗаполнитьСписокПодписей(ОбъектСсылка, УникальныйИдентификатор, ГруппаЭП, ТаблицаПодписей = Неопределено, ПодписиЭМД = Неопределено, СводкаПодписи = Неопределено) Экспорт
	
	Если ТаблицаПодписей <> Неопределено Тогда
		ТаблицаПодписей.Очистить();
	КонецЕсли;
	
	ЭлементыДерева = ТаблицаПодписей;
	КоличествоПодписей = 0;
	
	ЗаполнитьСписокПодписейДокумента(ОбъектСсылка, ЭлементыДерева, КоличествоПодписей, УникальныйИдентификатор, ПодписиЭМД);
	
	ДанныеСообщений = ДанныеСообщенийРЭМДПоЭП(ЭлементыДерева);
	
	Если ГруппаЭП <> Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'ЭП'");
		Если КоличествоПодписей <> 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(КоличествоПодписей) + ")";
		КонецЕсли;
		ГруппаЭП.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	Для Каждого СтрокаЭП Из ЭлементыДерева Цикл
		ДанныеСообщения = ДанныеСообщений.Получить(СтрокаЭП.УникальныйИдентификатор);
		Если ДанныеСообщения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЭП, ДанныеСообщения);
	КонецЦикла;
	
	ЗаполнитьУИДыЭМД(ЭлементыДерева, ОбъектСсылка);
	
	Если СводкаПодписи <> Неопределено Тогда
		ЗаполнитьСводкуПодписей(ОбъектСсылка, СводкаПодписи, ЭлементыДерева, ДанныеСообщений);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеПодписиОбъекта(ОбъектСсылка, ИдентификаторФормы) Экспорт
	
	Результат = Новый Структура(
		"КомуВыданСертификат,
		|ДатаПодписи,
		|Комментарий,
		|Статус,
		|Объект,
		|АдресПодписи,
		|Отпечаток,
		|ПодписьВерна,
		|ИндексКартинки,
		|УстановившийПодпись,
		|НомерСтроки,
		|АдресСертификата,
		|Зашифрован,
		|Версия,
		|ДатаПроверкиПодписи,
		|СертификатДействителен,
		|УникальныйИдентификатор,
		|КомуВыданСертификатИСтатус,
		|ДатаПодписиИКомментарий");
	
	Подпись = ПолучитьЭлектроннуюПодпись(ОбъектСсылка);
	
	Если Подпись <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Подпись);
		
		ДвоичныеДанные = Подпись.Подпись.Получить();
		Если ДвоичныеДанные <> Неопределено Тогда 
			Результат.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
				ИдентификаторФормы);
		КонецЕсли;
		
		ДвоичныеДанныеСертификата = Подпись.Сертификат.Получить();
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
			Результат.АдресСертификата = ПоместитьВоВременноеХранилище(
				ДвоичныеДанныеСертификата, ИдентификаторФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует 2-уровневое дерево в массив.
//
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

// Удаляет выделенные ЭП.
//
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, ВыделенныеСтроки,
	ОбъектСсылка, ТаблицаПодписей, УникальныйИдентификатор, ГруппаЭП, ПодписиЭМД = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	ВсеОбъекты = Новый Соответствие; // соответствие объекта и таблицы номеров строк табл части
	
	МассивВыделенныеСтроки = Новый Массив;
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеСтроки.УникальныйИдентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПодписей = ВсеОбъекты.Получить(ДанныеСтроки.Объект);
			
			Если МассивПодписей = Неопределено Тогда
				МассивПодписей = Новый Массив;
			КонецЕсли;
			
			МассивПодписей.Добавить(ДанныеСтроки.ПорядковыйНомер);
			
			ВсеОбъекты.Вставить(ДанныеСтроки.Объект, МассивПодписей);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараКлючЗначение Из ВсеОбъекты Цикл
		
		ТекущийОбъектСсылка = ПараКлючЗначение.Ключ;
		ТаблицаВыделенныеСтроки = ПараКлючЗначение.Значение;
		
		#Область КиЗ
		// Удалена обработка файлов
		Если Ложь Тогда
		#КонецОбласти
			
		Иначе
			
			ОбъектПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъектСсылка, "ПодписанЭП");
			
			МодульЭлектроннаяПодпись.УдалитьПодпись(ТекущийОбъектСсылка, ТаблицаВыделенныеСтроки, 
				УникальныйИдентификатор);
				
			КоличествоПодписей = КоличествоПодписей(ТекущийОбъектСсылка);
			Если ОбъектПодписан = Истина И КоличествоПодписей = 0 Тогда
				РеквизитПодписанИзменен = Истина;
				Объект = ТекущийОбъектСсылка.ПолучитьОбъект(); 
				ЗаблокироватьДанныеДляРедактирования(ТекущийОбъектСсылка, , УникальныйИдентификатор);
				Объект.ПодписанЭП = Ложь;
				Объект.Записать();
				РазблокироватьДанныеДляРедактирования(ТекущийОбъектСсылка, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеОбъекты.Количество() > 0 Тогда
		ЗаполнитьСписокПодписей(ОбъектСсылка, УникальныйИдентификатор, ГруппаЭП, ТаблицаПодписей, ПодписиЭМД);
	КонецЕсли;
	
КонецПроцедуры

// Удаляем все подписи объекта
//
Процедура УдалитьПодписиОбъекта(ПодписанныйОбъект) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Для Вх Исх Внутр документов формирует массив значений Полей (включая имя поля) - только важные реквизиты.
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//  
Функция СформироватьНаборВажныхПолей(Знач ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	МассивИмен = Новый Массив;
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(ОбъектСсылка);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		МассивИмен = Документы.Прием.ПолучитьИменаКлючевыхРеквизитов(Версия);
		
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра"
		  Или ИмяТипаДокумента = "Документ.МедицинскийОтчет"
		  Или ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" // Версия КОРП
	Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипаДокумента);
		МенеджерОбъекта.ПолучитьИменаКлючевыхРеквизитов();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("Структура") Тогда
		Для Каждого Элемент Из ОбъектСсылка Цикл
			МассивИмен.Добавить(Элемент.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			#Область КиЗ
			Если ИмяПоля = "!ДанныеФайлов" Тогда
				ДанныеФайлов = ЭЦП_УМЦ_Сервер.СформироватьДанныеФайловОбъектаДляПодписи(ОбъектСсылка, Версия);
				МассивПолей.Добавить(ДанныеФайлов);
			ИначеЕсли ИмяПоля = "!ДанныеОбъекта" Тогда
				ДанныеОбъекта = ЭЦП_УМЦ_Сервер.СформироватьДанныеОбъектаДляПодписи(ОбъектСсылка, Версия);
				МассивПолей.Добавить(ДанныеОбъекта);
			Иначе
				ЗначениеПоля = ОбъектСсылка[ИмяПоля];
				СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяПоля);
				МассивПолей.Добавить(СтрокаЗначения);
			КонецЕсли;
			#КонецОбласти
			
		Иначе  // табличные части отдельно обработать
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			НомерСтроки = 0;
			Для Каждого Строка Из ОбъектСсылка[ИмяТабличнойЧасти] Цикл
				
				ЗначениеПоля = Строка[ИмяКолонки];
				ИмяЯчейки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 "%1_%2_%3", ИмяТабличнойЧасти, НомерСтроки, ИмяКолонки);
				
				СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
				МассивПолей.Добавить(СтрокаЗначения);
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

// Формирует файл с именами и значениями полей.
//
Процедура СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Для Каждого ЗначениеПоля Из МассивПолей Цикл
		ТекстовыйДокумент.ДобавитьСтроку(ЗначениеПоля);
	КонецЦикла;
	
	ТекстовыйДокумент.Записать(ИмяФайлаСПутем);
	
КонецПроцедуры	

// Получить объекты для подписи - массив структур АдресФайла или ДвоичныеДанные, ОбъектСсылкаДляПодписи
//  где АдресФайла - адрес файла во временном хранилище
//
Процедура ПолучитьОбъектыДляПодписи(ОбъектСсылка, УникальныйИдентификаторФормы, МассивОбъектовДляПодписи) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Прием")
		Или ДопСерверныеФункции.ИмяСсылочногоТипа(ОбъектСсылка) = "Документ.ВрачебнаяКомиссия" // Версия КОРП
	Тогда
		ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка);
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
			ДвоичныеДанные, ОбъектСсылка);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные объекта (Входящий Исходящий Внутренний).
//
// Параметры:
//  ОбъектСсылка
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//
Функция ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла();
	МассивПолей = СформироватьНаборВажныхПолей(ОбъектСсылка, Версия, ДополнительныеПараметры);
	СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
	
	УдалитьФайлы(ИмяФайлаСПутем);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Заносит информацию о массиве ЭП, замещая прежние подписи.
//
Процедура ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВРегистр, ОбъектСсылка,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	#Область КиЗ
	// Удалена обработка файлов
	#КонецОбласти
	
	ПодписываемыйОбъектСсылка = ОбъектСсылка;
	#Область КиЗ
	// Удалена обработка файлов
	#КонецОбласти
	
	НачатьТранзакцию();
	Попытка
		
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, , УникальныйИдентификатор);
		
		ОбъектСТЧЭП = ПодписываемыйОбъектСсылка.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено;
		
		Если Не ОбъектСТЧЭП Тогда
			Выборка = ПолучитьЭлектронныеПодписи(ПодписываемыйОбъектСсылка);
		КонецЕсли;
		
		// проверим права на удаление подписей
		Если ОбъектСТЧЭП Тогда
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБЭЦП() Тогда 
				Для Каждого Подпись Из ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи Цикл
					
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'Нет прав на удаление подписи.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБЭЦП() Тогда
				Пока Выборка.Следующий() Цикл
					
					Подпись = Выборка;
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'Нет прав на удаление подписи.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектСТЧЭП Тогда
			ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
				НоваяЗапись.КомуВыданСертификат = Данные.КомуВыданСертификат;
				НоваяЗапись.ДатаПодписи = Данные.ДатаПодписи;
				НоваяЗапись.ИмяФайлаПодписи = Данные.ИмяФайлаПодписи;
				НоваяЗапись.Комментарий = Данные.Комментарий;
				НоваяЗапись.Отпечаток = Данные.Отпечаток;
				НоваяЗапись.Подпись = Новый ХранилищеЗначения(Данные.НоваяПодписьДвоичныеДанные);
				НоваяЗапись.УстановившийПодпись = Данные.УстановившийПодпись;
				НоваяЗапись.Сертификат = Новый ХранилищеЗначения(Данные.ДвоичныеДанныеСертификата);
			КонецЦикла;
		Иначе
			бит_СертификатыЭЦП.УдалитьПодписиОбъекта(ПодписываемыйОбъектСсылка);
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись", Данные.НоваяПодписьДвоичныеДанные);
				СвойстваПодписи.Вставить("Отпечаток", Данные.Отпечаток);
				СвойстваПодписи.Вставить("ДатаПодписи", Данные.ДатаПодписи);
				СвойстваПодписи.Вставить("Комментарий", Данные.Комментарий);
				СвойстваПодписи.Вставить("КомуВыданСертификат", Данные.КомуВыданСертификат);
				СвойстваПодписи.Вставить("Сертификат", Данные.ДвоичныеДанныеСертификата);
				бит_СертификатыЭЦП.ЗанестиИнформациюОПодписи(ПодписываемыйОбъектСсылка, СвойстваПодписи);
			КонецЦикла;
		КонецЕсли;
		
		ПодписываемыйОбъект.ПодписанЭП = (МассивДанныхДляЗанесенияВРегистр.Количество() <> 0);
		ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, УникальныйИдентификатор);
		
		#Область КиЗ
		// Удалена обработка файлов
		#КонецОбласти
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет изменены ли ключевые поля и бросает исключение, если изменены.
//
Процедура ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ПроверяемыйОбъект, Ссылка) Экспорт
	
	РеквизитыОбъектаДоИзменения = Ссылка.ПолучитьОбъект().Метаданные().Реквизиты;
	
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			Если РеквизитыОбъектаДоИзменения.Найти(ИмяПоля) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыйОбъект[ИмяПоля] <> Ссылка[ИмяПоля] Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
			КонецЕсли;
			
		Иначе  // табличные части отдельно обработать
			
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			Если ПроверяемыйОбъект[ИмяТабличнойЧасти].Количество() <> Ссылка[ИмяТабличнойЧасти].Количество() Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
			КонецЕсли;
			
			НомерСтроки = 0;
			Для Каждого Строка Из ПроверяемыйОбъект[ИмяТабличнойЧасти] Цикл
				
				СтрокаВБазе = Ссылка[ИмяТабличнойЧасти][НомерСтроки];
				
				Если Строка[ИмяКолонки] <> СтрокаВБазе[ИмяКолонки] Тогда 
					ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того что объект может быть подписан ЭП.
//
Функция ОбъектМожетБытьПодписанЭП(ОбъектСсылка) Экспорт
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(ОбъектСсылка);
	Если ИмяТипаДокумента = "Документ.Прием"
		Или ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" // ВерсияКОРП
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает подписи, принадлежащие объекту.
//
Функция ПолучитьЭлектронныеПодписи(ПодписанныйОбъектСсылка, УстановившийПодпись = Неопределено,
	ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено, ПодписиЭМД = Неопределено, ВернутьТаблицу = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ЭП.ДатаПодписи КАК ДатаПодписи,
		|	ЭП.Объект КАК Объект,
		|	ЭП.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭП.Версия КАК Версия,
		|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭП.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭП.Комментарий КАК Комментарий,
		|	ЭП.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭП.Отпечаток КАК Отпечаток,
		|	ЭП.Подпись КАК Подпись,
		|	ЭП.ПодписьВерна КАК ПодписьВерна,
		|	ЭП.Сертификат КАК Сертификат,
		|	ЭП.СертификатДействителен КАК СертификатДействителен,
		|	ЭП.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
		|	ЭП.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата,
		|	ЭП.ПодписанФайлЭМД КАК ПодписанФайлЭМД,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|			ТОГДА 1
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|			ТОГДА 2
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЭП.Объект.ПодписанЭП
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП,
		|	ЭП.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭП.ПорядковыйНомер КАК ПорядковыйНомер
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЭП.Объект = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	ЭП.Объект = &ОбъектСсылка
		|	И &УсловиеУстановившийПодпись
		|	И &УсловиеДатаПодписи
		|	И &УсловиеУникальныйИдентификатор
		|	И &УсловиеПодписиЭМД
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПодписи";
	Запрос.Параметры.Вставить("ОбъектСсылка", ПодписанныйОбъектСсылка);
	
	Если УстановившийПодпись <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУстановившийПодпись", "ЭП.УстановившийПодпись = &УстановившийПодпись");
		Запрос.Параметры.Вставить("УстановившийПодпись", УстановившийПодпись);
	Иначе
		Запрос.Параметры.Вставить("УсловиеУстановившийПодпись", Истина);
	КонецЕсли;
	
	Если ДатаПодписи <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДатаПодписи", "ЭП.ДатаПодписи = &ДатаПодписи");
		Запрос.Параметры.Вставить("ДатаПодписи", ДатаПодписи);
	Иначе
		Запрос.Параметры.Вставить("УсловиеДатаПодписи", Истина);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУникальныйИдентификатор", "ЭП.УникальныйИдентификатор = &УникальныйИдентификатор");
		Запрос.Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Иначе
		Запрос.Параметры.Вставить("УсловиеУникальныйИдентификатор", Истина);
	КонецЕсли;
	
	Если ПодписиЭМД <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодписиЭМД", "ЭП.ПодписанФайлЭМД = &ПодписиЭМД");
		Запрос.Параметры.Вставить("ПодписиЭМД", ПодписиЭМД);
	Иначе
		Запрос.Параметры.Вставить("УсловиеПодписиЭМД", Истина);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВернутьТаблицу Тогда
		Возврат Результат.Выгрузить();
	Иначе
		Возврат Результат.Выбрать();
	КонецЕсли;
	
КонецФункции

// Возвращает количество подписей объекта.
//
Функция КоличествоПодписей(ПодписанныйОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект = &Объект";
	Запрос.Параметры.Вставить("Объект", ПодписанныйОбъект);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

// Возвращает первую найденную подпись к объекту, в ином случае возвращает Неопределено.
//
Функция ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект,
	УстановившийПодпись = Неопределено, ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	Выборка = ПолучитьЭлектронныеПодписи(ПодписанныйОбъект.Ссылка, УстановившийПодпись, ДатаПодписи, УникальныйИдентификатор);
	Если Выборка.Следующий() Тогда
		Подпись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Подпись, Выборка);
		Подпись.Прочитать();
		Если Не Подпись.Выбран() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Подпись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Обновляет информацию о статусе проверки подписи в РС ЭлектронныеПодписи.
//
Процедура ОбновитьСтатусПроверкиПодписи(ДанныеПодписи) Экспорт
	
	Если Не ДанныеПодписи.Свойство("Объект")
		Или Не ДанныеПодписи.Свойство("УстановившийПодпись")
		Или Не ДанныеПодписи.Свойство("ДатаПодписи")
	Тогда
		Возврат;
	КонецЕсли;
	
	ПодписанныйОбъект = ДанныеПодписи.Объект;
	УстановившийПодпись = ДанныеПодписи.УстановившийПодпись;
	ДатаПодписи = ДанныеПодписи.ДатаПодписи;
	УникальныйИдентификатор = ДанныеПодписи.УникальныйИдентификатор;
	
	Подпись = ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект, УстановившийПодпись, ДатаПодписи, УникальныйИдентификатор);
	
	Если Подпись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Подпись, ДанныеПодписи);
	
	Подпись.Записать();
	
КонецПроцедуры

// Сохраняет информацию о ЭП.
//
Процедура ЗанестиИнформациюОПодписи(ПодписанныеДанные, СвойстваПодписиАргумент) Экспорт
	
	СвойстваПодписи = СвойстваПодписиАргумент;
	
	Если ТипЗнч(СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
	КонецЕсли; 
	
	ДатаПодписиИзФайла = ЭлектроннаяПодпись.ДатаПодписания(СвойстваПодписи.Подпись);
	
	ПодписьЗагруженаИзФайла = Не СвойстваПодписи.Свойство("ДатаПодписи") 
		Или Не ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи);
	
	// Устанавливаем текущую дату сеанса в качестве даты создания подписи,
	// если последнюю не получилось извлечь из двоичных данных.
	Если ЗначениеЗаполнено(ДатаПодписиИзФайла) Тогда
		ДатаПодписи = ДатаПодписиИзФайла;
	ИначеЕсли Не ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	ИначеЕсли ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = СвойстваПодписи.ДатаПодписи;
	КонецЕсли;
	
	#Область КиЗ // Упрощенная реализация совместимости с подпистемой ЭП БСП 3.1
	ПодписиОбъекта = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	ПодписиОбъекта.Отбор.Объект.Установить(ПодписанныеДанные);
	ПодписиОбъекта.Прочитать();
	
	МенеджерЗаписи = ПодписиОбъекта.Добавить();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныеДанные;
	МенеджерЗаписи.ПорядковыйНомер = ПодписиОбъекта.Количество();
	// МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	#КонецОбласти
	
	МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.Объект = ПодписанныеДанные;
	МенеджерЗаписи.УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Версия = ЭЦП_СерверПереопределяемый.ПолучитьАктуальныйНомерВерсииПодписываемыхДанных(ТипЗнч(ПодписанныеДанные));
	СвойстваПодписи.Свойство("Комментарий",МенеджерЗаписи.Комментарий);
	МенеджерЗаписи.КомуВыданСертификат = СвойстваПодписи.КомуВыданСертификат;
	МенеджерЗаписи.Отпечаток = СвойстваПодписи.Отпечаток;
	МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(СвойстваПодписи.Подпись);
	МенеджерЗаписи.Сертификат = Новый ХранилищеЗначения(СвойстваПодписи.Сертификат); 
	
	Если СвойстваПодписи.Свойство("ПодписанФайлЭМД") Тогда
		МенеджерЗаписи.ПодписанФайлЭМД = СвойстваПодписи.ПодписанФайлЭМД;
	КонецЕсли;
	
	// Сразу устанавливаем статус проверки подписи, созданной в программе.
	Если Не ПодписьЗагруженаИзФайла Тогда
		МенеджерЗаписи.ДатаПроверкиПодписи = ДатаПодписи;
		МенеджерЗаписи.ПодписьВерна = Истина;
		МенеджерЗаписи.СертификатДействителен = Истина;
	Иначе
		МенеджерЗаписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		МенеджерЗаписи.ПодписьВерна = СвойстваПодписи.Свойство("ПодписьВерна") И СвойстваПодписи.ПодписьВерна;
		Если Не СвойстваПодписи.Свойство("СертификатДействителен") Тогда
			МенеджерЗаписи.СертификатДействителен = МенеджерЗаписи.ПодписьВерна;
		Иначе	
			МенеджерЗаписи.СертификатДействителен = СвойстваПодписи.СертификатДействителен;
		КонецЕсли;	
	КонецЕсли;
	
	#Область КиЗ // Упрощенная реализация совместимости с подпистемой ЭП БСП 3.1
	// МенеджерЗаписи.Записать();
	ПодписиОбъекта.Записать();
	
	Если ТипЗнч(СвойстваПодписиАргумент) = Тип("Строка") И ЭтоАдресВременногоХранилища(СвойстваПодписиАргумент) Тогда
		стрСвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписиАргумент);
		стрСвойстваПодписи.ПолученныйУИДЭЦП = МенеджерЗаписи.УникальныйИдентификатор;
		СвойстваПодписиАргумент = ПоместитьВоВременноеХранилище(стрСвойстваПодписи);
	ИначеЕсли ТипЗнч(СвойстваПодписиАргумент) = Тип("Структура") И СвойстваПодписиАргумент.Свойство("ПолученныйУИДЭЦП") Тогда
		СвойстваПодписиАргумент.ПолученныйУИДЭЦП = МенеджерЗаписи.УникальныйИдентификатор;
	КонецЕсли;
	
	
	#КонецОбласти
	
КонецПроцедуры

// Сохраняет информацию о массиве ЭП.
//
Процедура ЗанестиИнформациюОПодписях(ПодписанныеДанные, ИдентификаторФормы = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Для Каждого Данные Из ПодписанныеДанные Цикл
		
		ПодписанныйОбъект = Данные.ПодписанныйОбъект;
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписанныйОбъект)) Тогда
			ПодписываемыйОбъект = ПодписанныйОбъект.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ПодписанныйОбъект,, ИдентификаторФормы);
		Иначе
			ПодписываемыйОбъект = ПодписанныйОбъект;
		КонецЕсли;
		
		ЗанестиИнформациюОПодписи(ПодписанныйОбъект, Данные.СвойстваПодписи);
		
		Если ЭЦП_УМЦ_Сервер.ОбъектПодписываетсяЭЦП(ПодписанныйОбъект) Тогда 
			ПодписываемыйОбъект.ПодписанЭП = Истина;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписанныйОбъект)) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПодписываемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ПодписанныйОбъект, ИдентификаторФормы);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Создает копию электронной подписи от источника приемнику.
//
// Параметры:
//  Источник - Структура
//    Объект
//    УстановившийПодпись
//    ДатаПодписи
//  ПриемникСсылка
//
// Возвращаемое значение:
//  Истина, если копирование прошло успешно, иначе Ложь.
//
Функция СкопироватьПодпись(Источник, ПриемникСсылка) Экспорт
	
	Если Не Источник.Свойство("Объект")
		ИЛИ Не Источник.Свойство("УстановившийПодпись") 
		ИЛИ Не Источник.Свойство("ДатаПодписи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодписьИсточника = ПолучитьЭлектроннуюПодпись(Источник.Объект, Источник.УстановившийПодпись, Источник.ДатаПодписи);
	Если ПодписьИсточника = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПодписьПриемника = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ПодписьПриемника, ПодписьИсточника);
		ПодписьПриемника.УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПодписьПриемника.Объект = ПриемникСсылка;
		ПодписьПриемника.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Создает копии всех подписей от источника приемнику.
//
// Возвращаемое значение:
//  Количество скопированных подписей.
//
Функция СкопироватьВсеПодписи(ИсточникСсылка, ПриемникСсылка) Экспорт
	
	КоличествоПодписей = 0;
	
	Выборка = ПолучитьЭлектронныеПодписи(ИсточникСсылка);
	Пока Выборка.Следующий() Цикл
		Попытка
			ПодписьПриемника = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ПодписьПриемника, Выборка);
			ПодписьПриемника.УникальныйИдентификатор = Новый УникальныйИдентификатор;
			ПодписьПриемника.Объект = ПриемникСсылка;
			ПодписьПриемника.Записать();
			КоличествоПодписей = КоличествоПодписей + 1;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат КоличествоПодписей;
	
КонецФункции

// Проверяет существование хотя бы одной подписи для любого документа.
//
Функция СуществуютПодписиКДокументам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Истина
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи
	|ГДЕ
	|	Объект ССЫЛКА Справочник.ВнутренниеДокументы
	|	ИЛИ Объект ССЫЛКА Справочник.ВходящиеДокументы
	|	ИЛИ Объект ССЫЛКА Справочник.ИсходящиеДокументы";

	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Записывает в кеш информацию о статусе проверки ЭП.
//
// Параметры:
//  Ссылка - ссылка на документы или версии файлов.
//
Процедура УстановитьСтатусПроверки(Знач Ссылка, Статус) Экспорт
	
	#Область КиЗ
	// Удалена обработка файлов
	#КонецОбласти
	
	Если Не Ссылка.Пустая() И Ссылка.ПолучитьОбъект() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Ссылка, "СтатусЭП", Статус);
		
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Ссылка, "ДатаПроверкиЭП", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под текущей версией файла.
// Общий статус подписи файла действителен только в том случае, когда действительны все
// подписи файла.
//
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//
Процедура УстановитьСтатусПроверкиДляФайла(ВерсияФайла) Экспорт
	
	ЭПФайла = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(ВерсияФайла);
	
	Если ЭПФайла.Количество() = 0 Тогда
		УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПФайла.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		Если Не ЭПФайла.ПодписьВерна Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под документом с учетом
// статусов подписей подчиненных файлов.
// Общий статус подписи документа действителен только в том случае, когда действительны все
// подписи самого документа и его подчиненных файлов.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//             СправочникСсылка.ВходящиеДокументы
//             СправочникСсылка.ИсходящиеДокументы
//
Процедура УстановитьСтатусПроверкиДляДокумента(Документ) Экспорт
	
	ЭПДокумента = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(Документ);
	
	// Если под самим документом нет ни одной подписи, то наличие подписей под подчиненными файлами
	// не учитываем.
	Если ЭПДокумента.Количество() = 0 Тогда
		УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПДокумента.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПДокумента.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		Если Не ЭПДокумента.ПодписьВерна Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	#Область КиЗ
	// Удалена обработка файлов
	ПодчиненныеФайлы = Новый Массив;
	#КонецОбласти
		
	Для Каждого Файл Из ПодчиненныеФайлы Цикл
		
		ЭПФайла = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(Файл.ТекущаяВерсия);
		
		Если ЭПФайла.Количество() = 0 Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
			Возврат;
		КонецЕсли;
	
		Пока ЭПФайла.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
				Возврат;
			КонецЕсли;
			
			Если Не ЭПФайла.ПодписьВерна Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

Процедура УстановитьСтатусПроверкиДляДокументаПриЗаписиЭлектроннойПодписи(Источник, Отказ, Замещение) Экспорт
	
	ОбъектИсточника = Источник.Отбор.Объект.Значение;

	Если ЗначениеЗаполнено(ОбъектИсточника) Тогда
		
		Если Метаданные.ОпределяемыеТипы.ДокументРЭМД.Тип.СодержитТип(ТипЗнч(ОбъектИсточника)) Тогда
			
			Если Источник.ОбменДанными.Загрузка Тогда                                                    
				Возврат;
			КонецЕсли;
			
			бит_СертификатыЭЦП.УстановитьСтатусПроверкиДляДокумента(ОбъектИсточника);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСводкуПодписей(ОбъектСсылка, СводкаПодписи, ЭлементыДерева, ДанныеСообщений = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СодержимоеТелаHTMLСводки = ПолучитьСодержимоеТелаHTMLСводки(ОбъектСсылка, ЭлементыДерева, ДополнительныеПараметры);
	СводкаПодписи = СтрШаблон("<html><head></head><body><pre>%1</pre></body></html>", СодержимоеТелаHTMLСводки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Возвращаемое значение:
//   ПерсональныеНастройки (Структура)
//       |- ДействияПриСохраненииСЭП (Строка)
//       |- ПутьМодуляКриптографии (Строка)
//       |- РасширениеДляФайловПодписи (Строка)
//       |- РасширениеДляЗашифрованныхФайлов (Строка)
//       |- ОтпечатокЛичногоСертификатаДляШифрования (Строка)
//
Функция ПерсональныеНастройки(ТолькоЗначенияПоУмолчанию = Ложь) Экспорт
	
	ПерсональныеНастройки = Новый Структура;
	
	// Значения "по умолчанию".
	ПерсональныеНастройки.Вставить("ДействияПриСохраненииСЭП", "Спрашивать");
	ПерсональныеНастройки.Вставить("ПутьМодуляКриптографии", "");
	ПерсональныеНастройки.Вставить("РасширениеДляФайловПодписи", "p7s");
	ПерсональныеНастройки.Вставить("РасширениеДляЗашифрованныхФайлов", "p7m");
	ПерсональныеНастройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", "");
	
	Если ТолькоЗначенияПоУмолчанию Тогда
		Возврат ПерсональныеНастройки;
	КонецЕсли;
	
	КлючПодсистемы = "ЭП";
	
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючПодсистемы, КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			ПерсональныеНастройки.Вставить(КлючИЗначение.Ключ, СохраненноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.Спрашивать Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "Спрашивать";
	ИначеЕсли ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.СохранятьВсеПодписи Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	КонецЕсли;
	
	Возврат ПерсональныеНастройки;
	
КонецФункции

#Область КиЗ
Функция ПолучитьДанныеОбъектаСтрокой(Объект, Имя = Неопределено, НазначениеТипа = Неопределено) Экспорт 
	
	Если НазначениеТипа = Неопределено Тогда 
		НазначениеТипа = НазначениеТипаXML.Явное;
	КонецЕсли;
	
	СтроковоеПредставлениеОбъекта = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	Попытка
		Если Не ЗначениеЗаполнено(Имя) Тогда
			ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипа); 	
		Иначе
			ЗаписатьXML(ЗаписьXML, Объект, Имя, НазначениеТипа);
		КонецЕсли;
		СтроковоеПредставлениеОбъекта = ЗаписьXML.Закрыть();
	Исключение
		СтроковоеПредставлениеОбъекта = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СтроковоеПредставлениеОбъекта;
	
КонецФункции
#КонецОбласти

// Добавляет ЭП из сообщения почты.
//
Процедура ДобавитьЭПИзСообщения(ОбъектСсылка, МассивФайловПодписей) Экспорт
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого ОбъектДляПодписи Из МассивФайловПодписей Цикл
		
		НоваяПодписьДвоичныеДанные = ОбъектДляПодписи.ДвоичныеДанные;
		ИмяФайлаПодписи = ОбъектДляПодписи.Имя;
		
		ОбъектСсылкаДляПодписи = ОбъектСсылка;
		
		Отпечаток = ОбъектДляПодписи.Отпечаток;
		КомуВыданСертификат = ОбъектДляПодписи.КомуВыданСертификат;
		
		ДвоичныеДанныеСертификата = ОбъектДляПодписи.ДвоичныеДанныеСертификата;
		
		ДанныеДляЗанесенияВБазу = Новый Структура;
		ДанныеДляЗанесенияВБазу.Вставить("ПодписанныйОбъект", ОбъектСсылкаДляПодписи);
		
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись", НоваяПодписьДвоичныеДанные);
		СвойстваПодписи.Вставить("Отпечаток", Отпечаток);
		СвойстваПодписи.Вставить("ДатаПодписи", ДатаПодписи);
		СвойстваПодписи.Вставить("Комментарий", "");
		СвойстваПодписи.Вставить("КомуВыданСертификат", КомуВыданСертификат);
		СвойстваПодписи.Вставить("Сертификат", ДвоичныеДанныеСертификата);
		
		ДанныеДляЗанесенияВБазу.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
		
	КонецЦикла;
	
	МассивАдресов = Новый Массив;
	ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу);
	
КонецПроцедуры

Функция ПолучитьСодержимоеТелаHTMLСводки(ОбъектСсылка, ЭлементыДерева, ДополнительныеПараметры)
	
	ИмяТипаМД = ДопСерверныеФункции.ИмяСсылочногоТипа(ОбъектСсылка);
	
	Если ИмяТипаМД = "Справочник.МедицинскиеКарты" Тогда
		ДатаМД = ОбъектСсылка.ДатаРегистрации;
	Иначе
		ДатаМД = ОбъектСсылка.Дата;
	КонецЕсли;
	
	ДокументДоРЭМД = ДатаМД < ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьДатуНачалаОбменаИнформациейСРЭМД();
	
	ДанныеТребуемыхПодписей = Новый Структура;
	
	ДанныеТребуемыхПодписей.Вставить("ТребуютсяПодписиДокумента",	Ложь);
	ДанныеТребуемыхПодписей.Вставить("ТребуютсяПодписиРЭМД",		Ложь);
	ДанныеТребуемыхПодписей.Вставить("ТребуютсяПодписиФайлов",		Ложь);
	
	ДанныеТребуемыхПодписей.Вставить("МинКолПодписейДокумента",	1);
	ДанныеТребуемыхПодписей.Вставить("МинКолПодписейФайлов",	0);
	ДанныеТребуемыхПодписей.Вставить("ДанныеРЭМД",				Новый Массив);
	
	ЧастиТекстаСводки = Новый Массив;
	
	ВсеПодписиУстановлены = Истина;
	Ошибки = Новый Массив; // Ошибки выводятся в начале сводки
	
	Если ИмяТипаМД = "Документ.Прием" Тогда
		ЗаполнитьДанныеПоШаблонамПриема(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева, Ошибки);
	ИначеЕсли ИмяТипаМД = "Документ.ПрохождениеМедосмотра" Тогда
		ЗаполнитьДанныеПоДаннымПМО(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева, Ошибки, ДополнительныеПараметры);
	ИначеЕсли ИмяТипаМД = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		ЗаполнитьДанныеПоДаннымВрачебнойКомиссии(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева);
	ИначеЕсли ИмяТипаМД = "Справочник.МедицинскиеКарты" Тогда
		ЗаполнитьДанныеПоДаннымМедкарты(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева);
	ИначеЕсли ИмяТипаМД = "Документ.Форма066" Тогда // Версия КОРП
		ЗаполнитьДанныеПоДаннымФормы066(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева);
	ИначеЕсли ИмяТипаМД = "Документ.СписокНаПрохождениеМедосмотра" Тогда // Версия КОРП
		ЗаполнитьДанныеПоДаннымСПМО(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева);
	ИначеЕсли ИмяТипаМД = "Документ.Рецепт" Тогда
		ЗаполнитьДанныеПоДаннымРецепта(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева, Ошибки);
	КонецЕсли;
	
	Если ДокументДоРЭМД
		И Не ДанныеТребуемыхПодписей.ТребуютсяПодписиФайлов
	Тогда
		ЧастиТекстаСводки.Добавить(ПолучитьСводкуПоДаннымЭПДокумента(ОбъектСсылка, ЭлементыДерева, НСтр("ru='Подписи документа:'"), ВсеПодписиУстановлены,,, ДанныеТребуемыхПодписей.МинКолПодписейДокумента));
		ЧастиТекстаСводки.Вставить(0, СформироватьСтатусПодписейДляСводки(ВсеПодписиУстановлены));
		Возврат СтрСоединить(ЧастиТекстаСводки, "<br>");
	КонецЕсли;
	
	Если ДанныеТребуемыхПодписей.ТребуютсяПодписиДокумента Тогда
		ЧастиТекстаСводки.Добавить(ПолучитьСводкуПоДаннымЭПДокумента(ОбъектСсылка, ЭлементыДерева, НСтр("ru='Подписи документа:'"), ВсеПодписиУстановлены,,, ДанныеТребуемыхПодписей.МинКолПодписейДокумента));
	ИначеЕсли ДанныеТребуемыхПодписей.ТребуютсяПодписиФайлов Тогда
		ЧастиТекстаСводки.Добавить(ПолучитьСводкуПоДаннымЭПДокумента(ОбъектСсылка, ЭлементыДерева, НСтр("ru='Подписи файлов:'"), ВсеПодписиУстановлены,,, ДанныеТребуемыхПодписей.МинКолПодписейФайлов));
	КонецЕсли;
	
	Если ДанныеТребуемыхПодписей.ТребуютсяПодписиРЭМД Тогда
		ЧастиТекстаСводки.Добавить(ПолучитьСводкуПоДаннымЭПДокумента(ОбъектСсылка, ЭлементыДерева, НСтр("ru='Подписи РЭМД:'"), ВсеПодписиУстановлены, ДанныеТребуемыхПодписей.ДанныеРЭМД, Ложь));
		
		Для Каждого СтруктураДанныхРЭМД Из ДанныеТребуемыхПодписей.ДанныеРЭМД Цикл
			Если СтруктураДанныхРЭМД.ТребуетсяПодписьМО Тогда
				ЧастиТекстаСводки.Добавить(ПолучитьСводкуПоДаннымЭПДокумента(ОбъектСсылка, ЭлементыДерева, НСтр("ru='Подписи МО РЭМД:'"), ВсеПодписиУстановлены, ДанныеТребуемыхПодписей.ДанныеРЭМД, Истина));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЧастиТекстаСводки.Вставить(0, СформироватьЗаголовокДляСводки(ВсеПодписиУстановлены, Ошибки));
	
	Возврат СтрШаблон("<div style='font-family:Consolas'>%1</div>", СтрСоединить(ЧастиТекстаСводки, "<br>"));
	
КонецФункции

Функция СформироватьЗаголовокДляСводки(ВсеПодписиУстановлены, Ошибки)
	
	Если Ошибки.Количество() = 0 Тогда
		Возврат СформироватьСтатусПодписейДляСводки(ВсеПодписиУстановлены);
	КонецЕсли;
	
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(СформироватьТекстОшибокДляСводки(Ошибки));
	
	Если Не ВсеПодписиУстановлены Тогда
		ЧастиЗаголовка.Добавить(СформироватьСтатусПодписейДляСводки(ВсеПодписиУстановлены));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиЗаголовка, "<br>");
	
КонецФункции

Функция СформироватьСтатусПодписейДляСводки(ВсеПодписиУстановлены)
	
	ШаблонСтатуса = "<div style='font-size:x-large;color:%1; font-weight: bold'>%2</div>";
	
	Если ВсеПодписиУстановлены Тогда
		Возврат СтрШаблон(ШаблонСтатуса, "mediumseagreen", НСтр("ru='Все необходимые подписи установлены'"));
	Иначе
		Возврат СтрШаблон(ШаблонСтатуса, "red", НСтр("ru='Не все подписи установлены'"));
	КонецЕсли;
	
КонецФункции

Функция СформироватьТекстОшибокДляСводки(Ошибки)
	
	ЧастиТекстаОшибок = Новый Массив;
	Для Каждого СтруктураОшибки Из Ошибки Цикл
		
		ТекстОшибки = СтрШаблон("<div style='font-size:x-large;color:red; font-weight: bold'>%1</div>", СтруктураОшибки.Заголовок);
		
		Если СтруктураОшибки.Свойство("Содержание")
			И ЗначениеЗаполнено(СтруктураОшибки.Содержание)
		Тогда
			ТекстОшибки = СтрШаблон("%1<div>%2</div>", ТекстОшибки, СтруктураОшибки.Содержание);
		КонецЕсли;
		
		ЧастиТекстаОшибок.Добавить(ТекстОшибки);
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиТекстаОшибок, "<br>");
	
КонецФункции

Процедура ДобавитьОшибкуПоНезагруженнымКлассификаторам(НезагруженныеКлассификаторы, Ошибки)
	
	НезагруженныеКлассификаторыПоПорядку = Новый ТаблицаЗначений;
	НезагруженныеКлассификаторыПоПорядку.Колонки.Добавить("Классификатор");
	НезагруженныеКлассификаторыПоПорядку.Колонки.Добавить("Приоритет");
	
	Для Каждого НезагруженныйКлассификатор Из НезагруженныеКлассификаторы Цикл
		НоваяСтрока = НезагруженныеКлассификаторыПоПорядку.Добавить();
		Новаястрока.Классификатор = СтрШаблон("%1 (%2)", ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(НезагруженныйКлассификатор).Представление, НезагруженныйКлассификатор);
		НоваяСтрока.Приоритет = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПриоритетЗагрузкиСправочника(НезагруженныйКлассификатор);
	КонецЦикла;
	
	НезагруженныеКлассификаторыПоПорядку.Свернуть("Классификатор,Приоритет");
	НезагруженныеКлассификаторыПоПорядку.Сортировать("Приоритет");
	
	ЭлементыСпискаКлассификаторов = Новый Массив;
	
	Для Каждого СтрокаКлассификатора Из НезагруженныеКлассификаторыПоПорядку Цикл
		ЭлементыСпискаКлассификаторов.Добавить(СтрШаблон("<li>%1</li>", СтрокаКлассификатора.Классификатор));
	КонецЦикла;
	
	Ошибки.Добавить(Новый Структура("Заголовок, Содержание", НСтр("ru='Не загружены обязательные классификаторы:'"), СтрШаблон("<ul>%1</ul>", СтрСоединить(ЭлементыСпискаКлассификаторов))))
	
КонецПроцедуры

Функция ЗаполнитьДанныеПоШаблонамПриема(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева, Ошибки)
	
	НезагруженныеКлассификаторы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныHTML.Ссылка
		|ИЗ
		|	Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
		|		ПО ПриемШаблоныПриема.ШаблонПриема = ШаблоныHTML.Ссылка
		|ГДЕ
		|	ПриемШаблоныПриема.Ссылка = &Ссылка
		|	И ШаблоныHTML.ВидДокумента = ЗНАЧЕНИЕ(Справочник.РегистрируемыеЭлектронныеМедДокументы.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьПодписиНеРЭМД = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(ОбъектСсылка,,,, Ложь).Количество() > 0;
	Если Не ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД()
		Или Выборка.Следующий()
	Тогда
		Если ЕстьПодписиНеРЭМД
			И Не бит_РаботаСФайлами.ФайлЭМДСохранен(ОбъектСсылка)
		Тогда
			ДанныеТребуемыхПодписей.ТребуютсяПодписиДокумента = Истина;
		Иначе
			ДанныеТребуемыхПодписей.ТребуютсяПодписиФайлов = Истина;
			
			Если МедицинскаяДеятельность.ТребуютсяРолиПоШаблонамПриёма(ОбъектСсылка) Тогда
				Для Каждого РольДокумента Из МедицинскаяДеятельность.РолиДляПодписанияМедицинскогоДокумента(ОбъектСсылка) Цикл
					ДанныеТребуемыхПодписей.МинКолПодписейФайлов = ДанныеТребуемыхПодписей.МинКолПодписейФайлов + РольДокумента.ПараметрыРоли.МинКолПодписей;
				КонецЦикла;
			Иначе
				ДанныеТребуемыхПодписей.МинКолПодписейФайлов = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемШаблоныПриема.ШаблонПриема КАК ШаблонПриема,
		|	ПриемШаблоныПриема.УИД КАК УИД,
		|	Прием.Дата КАК ДатаПриема,
		|	Прием.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ШаблоныПриема
		|ИЗ
		|	Документ.Прием КАК Прием
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Прием.ШаблоныПриема КАК ПриемШаблоныПриема
		|		ПО (Прием.Ссылка = &Ссылка)
		|			И Прием.Ссылка = ПриемШаблоныПриема.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВерсииШаблонов.ШаблонПриема КАК ШаблонПриема,
		|	ВерсииШаблонов.УИД КАК УИД,
		|	ВерсииШаблонов.ВерсияШаблона КАК ВерсияШаблона,
		|	РегистрируемыеЭлектронныеМедДокументы.Ссылка КАК ВидДокумента
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|		ШаблоныПриемов.УИД КАК УИД,
		|		ЕСТЬNULL(ВерсииШаблонов.ВерсияШаблона, ШаблоныПриемов.ШаблонПриема) КАК ВерсияШаблона
		|	ИЗ
		|		ШаблоныПриема КАК ШаблоныПриемов
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ДатыВерсий.ШаблонПриема КАК ШаблонПриема,
		|				ДатыВерсий.ДатаПриема КАК ДатаПриема,
		|				ДатыВерсий.ДатаВерсии КАК ДатаВерсии,
		|				ВерсииШаблоновHTML.Ссылка КАК ВерсияШаблона
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ШаблоныПриемов.ШаблонПриема КАК ШаблонПриема,
		|					ШаблоныПриемов.ДатаПриема КАК ДатаПриема,
		|					МАКСИМУМ(ВерсииШаблоновHTML.Дата) КАК ДатаВерсии
		|				ИЗ
		|					ШаблоныПриема КАК ШаблоныПриемов
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|						ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|							И (ВерсииШаблоновHTML.Дата >= ШаблоныПриемов.ДатаПриема)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ШаблоныПриемов.ШаблонПриема,
		|					ШаблоныПриемов.ДатаПриема) КАК ДатыВерсий
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииШаблоновHTML КАК ВерсииШаблоновHTML
		|					ПО ДатыВерсий.ШаблонПриема = ВерсииШаблоновHTML.Владелец
		|						И (ВерсииШаблоновHTML.Дата = ДатыВерсий.ДатаВерсии)) КАК ВерсииШаблонов
		|			ПО ШаблоныПриемов.ШаблонПриема = ВерсииШаблонов.ШаблонПриема
		|				И ШаблоныПриемов.ДатаПриема = ВерсииШаблонов.ДатаПриема) КАК ВерсииШаблонов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрируемыеЭлектронныеМедДокументы КАК РегистрируемыеЭлектронныеМедДокументы
		|		ПО (РегистрируемыеЭлектронныеМедДокументы.Ссылка = ВерсииШаблонов.ВерсияШаблона.ВидДокумента)
		|			И (НЕ РегистрируемыеЭлектронныеМедДокументы.Архив)";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	ВерсииШаблоновРЭМД = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииШаблонов.ШаблонПриема КАК ШаблонПриема,
		|	ВерсииШаблонов.УИД КАК УИД,
		|	ВерсииШаблонов.ВерсияШаблона КАК ВерсияШаблона,
		|	ВерсииШаблонов.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ВерсииШаблонов
		|ИЗ
		|	&ВерсииШаблонов КАК ВерсииШаблонов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРолейПоШаблонам.УИД КАК УИД,
		|	ДанныеРолейПоШаблонам.Роль КАК Роль,
		|	ДанныеРолейПоШаблонам.Правило ЕСТЬ NULL КАК ПравилаОтсутствуют,
		|	ДанныеРолейПоШаблонам.ВерсияШаблона КАК ВерсияШаблона,
		|	ДанныеРолейПоШаблонам.МинКолПодписей КАК МинКолПодписей,
		|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП,
		|	ЭМД.СообщениеРЭМД КАК СообщениеРЭМД
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВерсииШаблонов.ВерсияШаблона КАК ВерсияШаблона,
		|		ВерсииШаблонов.УИД КАК УИД,
		|		РЭМДПравилаПодписи.Ссылка КАК Правило,
		|		РЭМДПравилаПодписи.Роль КАК Роль,
		|		РЭМДПравилаПодписи.МинКолПодписей КАК МинКолПодписей
		|	ИЗ
		|		ВерсииШаблонов КАК ВерсииШаблонов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|			ПО (РЭМДПравилаПодписи.ВидДокумента = ВерсииШаблонов.ВидДокумента)
		|				И (НЕ РЭМДПравилаПодписи.Архив)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВерсииШаблонов.ВерсияШаблона,
		|		ВерсииШаблонов.УИД,
		|		РЭМДПравилаПодписи.Ссылка,
		|		РЭМДПравилаПодписи.Роль,
		|		РЭМДПравилаПодписи.МинКолПодписей) КАК ДанныеРолейПоШаблонам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Прием.ЭМД КАК ЭМД
		|		ПО (ЭМД.Ссылка = &Ссылка)
		|			И (ЭМД.УИД_Шаблона = ДанныеРолейПоШаблонам.УИД)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Прием.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|		ПО (РолиИПодписиЭМД.Ссылка = &Ссылка)
		|			И (РолиИПодписиЭМД.УИД_ЭМД = ЭМД.УИД)
		|			И ДанныеРолейПоШаблонам.Роль = РолиИПодписиЭМД.РольСотрудника
		|ИТОГИ ПО
		|	УИД,
		|	Роль";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("ВерсииШаблонов", ВерсииШаблоновРЭМД);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЕстьШаблоныРЭМД = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаШаблона = ВерсииШаблоновРЭМД.Найти(Выборка.УИД, "УИД");
		Если СтрокаШаблона = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПравилаОтсутствуют = Ложь;
		
		СтруктураПоШаблону = Новый Структура;
		СтруктураПоШаблону.Вставить("ВидДокумента",					СтрокаШаблона.ВидДокумента);
		СтруктураПоШаблону.Вставить("ДанныеРолей",					Новый Массив);
		СтруктураПоШаблону.Вставить("МинКолПодписейПоШаблону",		0);
		СтруктураПоШаблону.Вставить("КолПодписейВрачейПоШаблону",	0);
		СтруктураПоШаблону.Вставить("ПодписьМО",					Неопределено);
		СтруктураПоШаблону.Вставить("ТребуетсяПодписьМО",			ИнтеграцияЕГИСЗ_РЭМД.ВидДокументаТребуетПодписьМО(СтрокаШаблона.ВидДокумента));
		
		Если Не ЗначениеЗаполнено(СтрокаШаблона.ВидДокумента.ВидДокумента) Тогда
			НезагруженныеКлассификаторы.Добавить(Справочники.ВидыМедицинскихДокументов.ПолучитьOIDСправочника());
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаШаблона.ВидДокумента.ВидДокумента.ВидСЭМД) Тогда
			НезагруженныеКлассификаторы.Добавить(Справочники.КлассификаторыМинЗдрава.ПолучитьOIDСправочника(Перечисления.ВидыКлассификаторовМинЗдрава.ВидыСтруктурированныхЭлектронныхМедицинскихДокументов));
		КонецЕсли;
		
		ВыборкаРолей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаРолей.Следующий() Цикл
			
			СообщениеРЭМД = Неопределено;
			МинКолПодписей = 0;
			ВыборкаПодписей = ВыборкаРолей.Выбрать();
			
			Подписи = Новый Массив;
			Пока ВыборкаПодписей.Следующий() Цикл
				
				Если ВыборкаПодписей.ПравилаОтсутствуют Тогда
					ПравилаОтсутствуют = Истина;
					Прервать;
				КонецЕсли;
				ЕстьШаблоныРЭМД = Истина;
				
				МинКолПодписей = ВыборкаПодписей.МинКолПодписей;
				СообщениеРЭМД = ВыборкаПодписей.СообщениеРЭМД;
				Если ЗначениеЗаполнено(ВыборкаПодписей.УИД_ЭЦП) Тогда
					
					СтрокиПодписи = ЭлементыДерева.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ВыборкаПодписей.УИД_ЭЦП));
					Если СтрокиПодписи.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Подписи.Добавить(ВыборкаПодписей.УИД_ЭЦП);
					СтруктураПоШаблону.КолПодписейВрачейПоШаблону = СтруктураПоШаблону.КолПодписейВрачейПоШаблону + 1;
					
					Если СтруктураПоШаблону.ПодписьМО <> Неопределено
						И СтрокиПодписи[0].ЭтоПодписьМО
					Тогда
						СтруктураПоШаблону.ПодписьМО = ВыборкаПодписей.УИД_ЭЦП;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПравилаОтсутствуют Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СообщениеРЭМД)
				И СтруктураПоШаблону.ПодписьМО = Неопределено
			Тогда
				Для Каждого ЭЦП Из СообщениеРЭМД.ЭлектронныеПодписиЭМД Цикл
					Если ЭЦП.ЭтоПодписьМО Тогда
						СтруктураПоШаблону.ПодписьМО = ЭЦП.УИД_ЭЦП;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтруктураПоШаблону.ДанныеРолей.Добавить(Новый Структура("Роль, МинКолПодписей, ПодписиВрачей", ВыборкаРолей.Роль, МинКолПодписей, Подписи));
			СтруктураПоШаблону.МинКолПодписейПоШаблону = СтруктураПоШаблону.МинКолПодписейПоШаблону + МинКолПодписей;
		КонецЦикла;
		
		Если ПравилаОтсутствуют Тогда
			НезагруженныеКлассификаторы.Добавить(Справочники.РЭМДПравилаПодписи.ПолучитьOIDСправочника());
		Иначе
			ДанныеТребуемыхПодписей.ДанныеРЭМД.Добавить(СтруктураПоШаблону);
		КонецЕсли;
	КонецЦикла;
	
	Если НезагруженныеКлассификаторы.Количество() > 0 Тогда
		ДобавитьОшибкуПоНезагруженнымКлассификаторам(НезагруженныеКлассификаторы, Ошибки);
	КонецЕсли;
	
	ДанныеТребуемыхПодписей.ТребуютсяПодписиРЭМД = ЕстьШаблоныРЭМД И ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД()
													Или ЭлементыДерева.НайтиСтроки(Новый Структура("ПодписанФайлЭМД", Истина)).Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьДанныеПоДаннымПМО(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева, Ошибки, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НезагруженныеКлассификаторы = Новый Массив;
	
	РолиДляПодписанияМедицинскогоДокумента = МедицинскаяДеятельность.РолиДляПодписанияМедицинскогоДокумента(ОбъектСсылка, ДополнительныеПараметры);
	
	Если Не ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД()
		Или РолиДляПодписанияМедицинскогоДокумента.Количество() > 0
	Тогда
		Если ОбъектСсылка.ПодписанЭП
			И Не бит_РаботаСФайлами.ФайлЭМДСохранен(ОбъектСсылка)
		Тогда
			ДанныеТребуемыхПодписей.ТребуютсяПодписиДокумента = Истина;
		Иначе
			ДанныеТребуемыхПодписей.ТребуютсяПодписиФайлов = Истина;
			Для Каждого РольДокумента Из РолиДляПодписанияМедицинскогоДокумента Цикл
				ДанныеТребуемыхПодписей.МинКолПодписейФайлов = ДанныеТребуемыхПодписей.МинКолПодписейФайлов + РольДокумента.ПараметрыРоли.МинКолПодписей;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
	ПриказыВредныеФакторы = МодульМедосмотрыСервер.ПриказыМедосмотраСВидамиДокументов(ОбъектСсылка, ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриказыВредныеФакторы.Ссылка КАК Ссылка,
		|	ПриказыВредныеФакторы.ВидДокумента КАК ВидДокумента,
		|	ПриказыВредныеФакторы.ПриказВредныйФактор КАК ПриказВредныйФактор
		|ПОМЕСТИТЬ ПриказыВредныеФакторы
		|ИЗ
		|	&ПриказыВредныеФакторы КАК ПриказыВредныеФакторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РЭМДПравилаПодписи.Роль КАК Роль,
		|	РЭМДПравилаПодписи.МинКолПодписей КАК МинКолПодписей,
		|	РЭМДПравилаПодписи.МаксКолПодписей КАК МаксКолПодписей,
		|	РЭМДПравилаПодписи.Ссылка КАК Правило,
		|	РЭМДПравилаПодписи.ВидДокумента КАК ВидДокумента,
		|	ПриказыВредныеФакторы.ПриказВредныйФактор КАК ПриказВредныйФактор,
		|	ПриказыВредныеФакторы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Вт_ДанныеПМО
		|ИЗ
		|	ПриказыВредныеФакторы КАК ПриказыВредныеФакторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|		ПО ПриказыВредныеФакторы.ВидДокумента = РЭМДПравилаПодписи.ВидДокумента
		|			И НЕ (РЭМДПравилаПодписи.Архив)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПМО.Роль КАК Роль,
		|	ДанныеПМО.МинКолПодписей КАК МинКолПодписей,
		|	ДанныеПМО.МаксКолПодписей КАК МаксКолПодписей,
		|	ДанныеПМО.Правило ЕСТЬ NULL КАК ПравилаОтсутствуют,
		|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП,
		|	РолиИПодписиЭМД.ДолжностьМинздрава КАК ДолжностьМинздрава,
		|	ДанныеПМО.ВидДокумента КАК ВидДокументаЭМД,
		|	ПрохождениеМедосмотраЭМД.УИД КАК УИД,
		|	ПрохождениеМедосмотраЭМД.СообщениеРЭМД КАК СообщениеРЭМД,
		|	ПрохождениеМедосмотраЭМД.ПутьКФайлуВАрхиве КАК ПутьКФайлуВАрхиве,
		|	ДанныеПМО.ПриказВредныйФактор КАК ПриказВредныйФактор
		|ИЗ
		|	Вт_ДанныеПМО КАК ДанныеПМО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.ЭМД КАК ПрохождениеМедосмотраЭМД
		|		ПО ДанныеПМО.Ссылка = ПрохождениеМедосмотраЭМД.Ссылка
		|			И ДанныеПМО.ПриказВредныйФактор = ПрохождениеМедосмотраЭМД.ПриказВредныйФактор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрохождениеМедосмотра.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|		ПО (РолиИПодписиЭМД.Ссылка = &Ссылка)
		|			И (РолиИПодписиЭМД.УИД_ЭМД = ПрохождениеМедосмотраЭМД.УИД)
		|			И ДанныеПМО.Роль = РолиИПодписиЭМД.РольСотрудника
		|ИТОГИ ПО
		|	УИД,
		|	Роль";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("ПриказыВредныеФакторы", ПриказыВредныеФакторы);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЕстьШаблоныРЭМД = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ПриказВредныйФакторНайден = Ложь;
		ПравилаОтсутствуют = Ложь;
		
		СтруктураПоШаблону = Новый Структура;
		//СтруктураПоШаблону.Вставить("ВидДокумента",				Выборка.ВидДокументаЭМД);
		СтруктураПоШаблону.Вставить("ДанныеРолей",					Новый Массив);
		СтруктураПоШаблону.Вставить("МинКолПодписейПоШаблону",		0);
		СтруктураПоШаблону.Вставить("КолПодписейВрачейПоШаблону",	0);
		СтруктураПоШаблону.Вставить("ПодписьМО",					Неопределено);
		//СтруктураПоШаблону.Вставить("ТребуетсяПодписьМО",			ИнтеграцияЕГИСЗ_РЭМД.ВидДокументаТребуетПодписьМО(Выборка.ВидДокументаЭМД));
		
		ВыборкаРолей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаРолей.Следующий() Цикл
			СообщениеРЭМД = Неопределено;
			МинКолПодписей = 0;
			ВыборкаПодписей = ВыборкаРолей.Выбрать();
			Подписи = Новый Массив;
			Пока ВыборкаПодписей.Следующий() Цикл
				
				Если ВыборкаПодписей.ПравилаОтсутствуют Тогда
					ПравилаОтсутствуют = Истина;
					Прервать;
				КонецЕсли;
				ЕстьШаблоныРЭМД = Истина;
				
				СтруктураПоШаблону.Вставить("ВидДокумента",			ВыборкаПодписей.ВидДокументаЭМД);
				СтруктураПоШаблону.Вставить("ТребуетсяПодписьМО",	ИнтеграцияЕГИСЗ_РЭМД.ВидДокументаТребуетПодписьМО(ВыборкаПодписей.ВидДокументаЭМД));
				
				Если Не ЗначениеЗаполнено(ВыборкаПодписей.ВидДокументаЭМД.ВидДокумента) Тогда
					НезагруженныеКлассификаторы.Добавить(Справочники.ВидыМедицинскихДокументов.ПолучитьOIDСправочника());
				ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПодписей.ВидДокументаЭМД.ВидДокумента.ВидСЭМД) Тогда
					НезагруженныеКлассификаторы.Добавить(Справочники.КлассификаторыМинЗдрава.ПолучитьOIDСправочника(Перечисления.ВидыКлассификаторовМинЗдрава.ВидыСтруктурированныхЭлектронныхМедицинскихДокументов));
				КонецЕсли;
				
				МинКолПодписей = ВыборкаПодписей.МинКолПодписей;
				СообщениеРЭМД = ВыборкаПодписей.СообщениеРЭМД;
				Если ЗначениеЗаполнено(ВыборкаПодписей.УИД_ЭЦП) Тогда
					
					СтрокиПодписи = ЭлементыДерева.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ВыборкаПодписей.УИД_ЭЦП));
					Если СтрокиПодписи.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Подписи.Добавить(ВыборкаПодписей.УИД_ЭЦП);
					СтруктураПоШаблону.КолПодписейВрачейПоШаблону = СтруктураПоШаблону.КолПодписейВрачейПоШаблону + 1;
					
					Если СтруктураПоШаблону.ПодписьМО <> Неопределено
						И СтрокиПодписи[0].ЭтоПодписьМО
					Тогда
						СтруктураПоШаблону.ПодписьМО = ВыборкаПодписей.УИД_ЭЦП;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПравилаОтсутствуют Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СообщениеРЭМД)
				И СтруктураПоШаблону.ПодписьМО = Неопределено
			Тогда
				Для Каждого ЭЦП Из СообщениеРЭМД.ЭлектронныеПодписиЭМД Цикл
					Если ЭЦП.ЭтоПодписьМО Тогда
						СтруктураПоШаблону.ПодписьМО = ЭЦП.УИД_ЭЦП;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтруктураПоШаблону.ДанныеРолей.Добавить(Новый Структура("Роль, МинКолПодписей, ПодписиВрачей", ВыборкаРолей.Роль, МинКолПодписей, Подписи));
			СтруктураПоШаблону.МинКолПодписейПоШаблону = СтруктураПоШаблону.МинКолПодписейПоШаблону + МинКолПодписей;
		КонецЦикла;
		
		Если ПравилаОтсутствуют Тогда
			НезагруженныеКлассификаторы.Добавить(Справочники.РЭМДПравилаПодписи.ПолучитьOIDСправочника());
		Иначе
			ДанныеТребуемыхПодписей.ДанныеРЭМД.Добавить(СтруктураПоШаблону);
		КонецЕсли;
	КонецЦикла;
	
	Если НезагруженныеКлассификаторы.Количество() > 0 Тогда
		ДобавитьОшибкуПоНезагруженнымКлассификаторам(НезагруженныеКлассификаторы, Ошибки);
	КонецЕсли;
	
	ДанныеТребуемыхПодписей.ТребуютсяПодписиРЭМД = ЕстьШаблоныРЭМД И ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД()
													Или ЭлементыДерева.НайтиСтроки(Новый Структура("ПодписанФайлЭМД", Истина)).Количество() > 0;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоДаннымВрачебнойКомиссии(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеТребуемыхПодписей.ТребуютсяПодписиДокумента = Истина;
	
	//Если Не ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД() Тогда
	//	ДанныеТребуемыхПодписей.ТребуютсяПодписиДокумента = Истина;
	//	Возврат;
	//КонецЕсли;
	//
	//ВидДокументаВК = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидРЭМДВрачебнойКомиссии();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ДанныеВК.УИД КАК УИД,
	//	|	ДанныеВК.Роль КАК Роль,
	//	|	ДанныеВК.МинКолПодписей КАК МинКолПодписей,
	//	|	ДанныеВК.СообщениеРЭМД КАК СообщениеРЭМД,
	//	|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		&УИД КАК УИД,
	//	|		РЭМДПравилаПодписи.Роль КАК Роль,
	//	|		РЭМДПравилаПодписи.МинКолПодписей КАК МинКолПодписей,
	//	|		ВК.СообщениеРЭМД КАК СообщениеРЭМД
	//	|	ИЗ
	//	|		Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи,
	//	|		Документ.ВрачебнаяКомиссия КАК ВК
	//	|	ГДЕ
	//	|		РЭМДПравилаПодписи.ВидДокумента = &ВидДокумента
	//	|		И НЕ РЭМДПравилаПодписи.Архив
	//	|		И ВК.Ссылка = &Ссылка) КАК ДанныеВК
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВрачебнаяКомиссия.РолиИПодписиЭМД КАК РолиИПодписиЭМД
	//	|		ПО (РолиИПодписиЭМД.Ссылка = &Ссылка)
	//	|			И (РолиИПодписиЭМД.УИД_ЭМД = &УИД)
	//	|			И ДанныеВК.Роль = РолиИПодписиЭМД.РольСотрудника
	//	|ИТОГИ ПО
	//	|	УИД,
	//	|	Роль";
	//
	//Запрос.УстановитьПараметр("УИД", ОбъектСсылка.УникальныйИдентификатор());
	//Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаВК);
	//Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтруктураПоШаблону = Новый Структура;
	//	СтруктураПоШаблону.Вставить("ВидДокумента",					ВидДокументаВК);
	//	СтруктураПоШаблону.Вставить("ДанныеРолей",					Новый Массив);
	//	СтруктураПоШаблону.Вставить("МинКолПодписейПоШаблону",		0);
	//	СтруктураПоШаблону.Вставить("КолПодписейВрачейПоШаблону",	0);
	//	СтруктураПоШаблону.Вставить("ПодписьМО",					Неопределено);
	//	СтруктураПоШаблону.Вставить("ТребуетсяПодписьМО",			ИнтеграцияЕГИСЗ_РЭМД.ВидДокументаТребуетПодписьМО(ВидДокументаВК));
	//	
	//	ВыборкаРолей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//	Пока ВыборкаРолей.Следующий() Цикл
	//		СообщениеРЭМД = Неопределено;
	//		МинКолПодписей = 0;
	//		ВыборкаПодписей = ВыборкаРолей.Выбрать();
	//		
	//		Подписи = Новый Массив;
	//		Пока ВыборкаПодписей.Следующий() Цикл
	//			МинКолПодписей = ВыборкаПодписей.МинКолПодписей;
	//			СообщениеРЭМД = ВыборкаПодписей.СообщениеРЭМД;
	//			Если ЗначениеЗаполнено(ВыборкаПодписей.УИД_ЭЦП) Тогда
	//				
	//				СтрокиПодписи = ЭлементыДерева.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ВыборкаПодписей.УИД_ЭЦП));
	//				Если СтрокиПодписи.Количество() = 0 Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				
	//				Подписи.Добавить(ВыборкаПодписей.УИД_ЭЦП);
	//				СтруктураПоШаблону.КолПодписейВрачейПоШаблону = СтруктураПоШаблону.КолПодписейВрачейПоШаблону + 1;
	//				
	//				Если СтруктураПоШаблону.ПодписьМО <> Неопределено
	//					И СтрокиПодписи[0].ЭтоПодписьМО
	//				Тогда
	//					СтруктураПоШаблону.ПодписьМО = ВыборкаПодписей.УИД_ЭЦП;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Если ЗначениеЗаполнено(СообщениеРЭМД)
	//			И СтруктураПоШаблону.ПодписьМО = Неопределено
	//		Тогда
	//			Для Каждого ЭЦП Из СообщениеРЭМД.ЭлектронныеПодписиЭМД Цикл
	//				Если ЭЦП.ЭтоПодписьМО Тогда
	//					СтруктураПоШаблону.ПодписьМО = ЭЦП.УИД_ЭЦП;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//		СтруктураПоШаблону.ДанныеРолей.Добавить(Новый Структура("Роль, МинКолПодписей, ПодписиВрачей", ВыборкаРолей.Роль, МинКолПодписей, Подписи));
	//		СтруктураПоШаблону.МинКолПодписейПоШаблону = СтруктураПоШаблону.МинКолПодписейПоШаблону + МинКолПодписей;
	//	КонецЦикла;
	//	
	//	ДанныеТребуемыхПодписей.ДанныеРЭМД.Добавить(СтруктураПоШаблону);
	//КонецЦикла;
	//
	//ДанныеТребуемыхПодписей.ТребуютсяПодписиРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД()
	//												Или ЭлементыДерева.НайтиСтроки(Новый Структура("ПодписанФайлЭМД", Истина)).Количество() > 0;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоДаннымМедкарты(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РолиДляПодписания = Справочники.ВидыМедицинскихКарт.РолиДляПодписания(ОбъектСсылка.ВидКарты);
	
	ДанныеТребуемыхПодписей.ТребуютсяПодписиФайлов = РолиДляПодписания.Количество() > 0;
	ДанныеТребуемыхПодписей.МинКолПодписейФайлов = РолиДляПодписания.Количество();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоДаннымФормы066(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РолиДляПодписания = МедицинскаяДеятельность.РолиДляПодписанияМедицинскогоДокумента(ОбъектСсылка);
	
	ДанныеТребуемыхПодписей.ТребуютсяПодписиФайлов = РолиДляПодписания.Количество() > 0;
	ДанныеТребуемыхПодписей.МинКолПодписейФайлов = РолиДляПодписания.Количество();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоДаннымСПМО(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РолиДляПодписания = МедицинскаяДеятельность.РолиДляПодписанияМедицинскогоДокумента(ОбъектСсылка);
	
	ДанныеТребуемыхПодписей.ТребуютсяПодписиФайлов = РолиДляПодписания.Количество() > 0;
	ДанныеТребуемыхПодписей.МинКолПодписейФайлов = РолиДляПодписания.Количество();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоДаннымРецепта(ОбъектСсылка, ДанныеТребуемыхПодписей, ЭлементыДерева, Ошибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НезагруженныеКлассификаторы = Новый Массив;
	
	ВидДокумента = ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ВидРЭМДРецепта(ОбъектСсылка.ФормаРецепта);
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		НезагруженныеКлассификаторы.Добавить(Справочники.РегистрируемыеЭлектронныеМедДокументы.ПолучитьOIDСправочника());
		ДобавитьОшибкуПоНезагруженнымКлассификаторам(НезагруженныеКлассификаторы, Ошибки);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭМДПравилаПодписи.Роль КАК Роль,
		|	РЭМДПравилаПодписи.МинКолПодписей КАК МинКолПодписей,
		|	РЭМДПравилаПодписи.МаксКолПодписей КАК МаксКолПодписей,
		|	РЭМДПравилаПодписи.Ссылка ЕСТЬ NULL КАК ПравилаОтсутствуют,
		|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП,
		|	РолиИПодписиЭМД.ДолжностьМинздрава КАК ДолжностьМинздрава,
		|	ДанныеРецепта.ВидДокумента КАК ВидДокументаЭМД,
		|	ДанныеРецепта.УИД КАК УИД,
		|	ДанныеРецепта.СообщениеРЭМД КАК СообщениеРЭМД,
		|	ДанныеРецепта.ПутьКФайлуВАрхиве КАК ПутьКФайлуВАрхиве
		|ИЗ
		|	(ВЫБРАТЬ
		|		Рецепт.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(РецептЭМД.ВидДокументаЭМД, &ВидДокумента) КАК ВидДокумента,
		|		ЕСТЬNULL(РецептЭМД.УИД, &ПустойУИД) КАК УИД,
		|		ЕСТЬNULL(РецептЭМД.СообщениеРЭМД, ЗНАЧЕНИЕ(Справочник.СообщенияРЭМД.ПустаяСсылка)) КАК СообщениеРЭМД,
		|		ЕСТЬNULL(РецептЭМД.ПутьКФайлуВАрхиве, """") КАК ПутьКФайлуВАрхиве
		|	ИЗ
		|		Документ.Рецепт КАК Рецепт
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рецепт.ЭМД КАК РецептЭМД
		|			ПО (РецептЭМД.Ссылка = Рецепт.Ссылка)
		|	ГДЕ
		|		Рецепт.Ссылка = &Ссылка) КАК ДанныеРецепта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|		ПО ДанныеРецепта.ВидДокумента = РЭМДПравилаПодписи.ВидДокумента
		|			И (НЕ РЭМДПравилаПодписи.Архив)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рецепт.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|		ПО (РолиИПодписиЭМД.Ссылка = &Ссылка)
		|			И (РолиИПодписиЭМД.УИД_ЭМД = ДанныеРецепта.УИД)
		|			И (РЭМДПравилаПодписи.Роль = РолиИПодписиЭМД.РольСотрудника)
		|ИТОГИ ПО
		|	УИД,
		|	Роль";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("ПустойУИД", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл
		
		ПравилаОтсутствуют = Ложь;
		
		СтруктураПоШаблону = Новый Структура;
		СтруктураПоШаблону.Вставить("ДанныеРолей",					Новый Массив);
		СтруктураПоШаблону.Вставить("МинКолПодписейПоШаблону",		0);
		СтруктураПоШаблону.Вставить("КолПодписейВрачейПоШаблону",	0);
		СтруктураПоШаблону.Вставить("ПодписьМО",					Неопределено);
		
		ВыборкаРолей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаРолей.Следующий() Цикл
			СообщениеРЭМД = Неопределено;
			МинКолПодписей = 0;
			ВыборкаПодписей = ВыборкаРолей.Выбрать();
			Подписи = Новый Массив;
			Пока ВыборкаПодписей.Следующий() Цикл
				
				Если ВыборкаПодписей.ПравилаОтсутствуют Тогда
					ПравилаОтсутствуют = Истина;
					Прервать;
				КонецЕсли;
				
				СтруктураПоШаблону.Вставить("ВидДокумента",			ВыборкаПодписей.ВидДокументаЭМД);
				СтруктураПоШаблону.Вставить("ТребуетсяПодписьМО",	ИнтеграцияЕГИСЗ_РЭМД.ВидДокументаТребуетПодписьМО(ВыборкаПодписей.ВидДокументаЭМД));
				
				Если Не ЗначениеЗаполнено(ВыборкаПодписей.ВидДокументаЭМД.ВидДокумента) Тогда
					НезагруженныеКлассификаторы.Добавить(Справочники.ВидыМедицинскихДокументов.ПолучитьOIDСправочника());
				ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПодписей.ВидДокументаЭМД.ВидДокумента.ВидСЭМД) Тогда
					НезагруженныеКлассификаторы.Добавить(Справочники.КлассификаторыМинЗдрава.ПолучитьOIDСправочника(Перечисления.ВидыКлассификаторовМинЗдрава.ВидыСтруктурированныхЭлектронныхМедицинскихДокументов));
				КонецЕсли;
				
				МинКолПодписей = ВыборкаПодписей.МинКолПодписей;
				СообщениеРЭМД = ВыборкаПодписей.СообщениеРЭМД;
				Если ЗначениеЗаполнено(ВыборкаПодписей.УИД_ЭЦП) Тогда
					
					СтрокиПодписи = ЭлементыДерева.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ВыборкаПодписей.УИД_ЭЦП));
					Если СтрокиПодписи.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Подписи.Добавить(ВыборкаПодписей.УИД_ЭЦП);
					СтруктураПоШаблону.КолПодписейВрачейПоШаблону = СтруктураПоШаблону.КолПодписейВрачейПоШаблону + 1;
					
					Если СтруктураПоШаблону.ПодписьМО <> Неопределено
						И СтрокиПодписи[0].ЭтоПодписьМО
					Тогда
						СтруктураПоШаблону.ПодписьМО = ВыборкаПодписей.УИД_ЭЦП;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПравилаОтсутствуют Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СообщениеРЭМД)
				И СтруктураПоШаблону.ПодписьМО = Неопределено
			Тогда
				Для Каждого ЭЦП Из СообщениеРЭМД.ЭлектронныеПодписиЭМД Цикл
					Если ЭЦП.ЭтоПодписьМО Тогда
						СтруктураПоШаблону.ПодписьМО = ЭЦП.УИД_ЭЦП;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтруктураПоШаблону.ДанныеРолей.Добавить(Новый Структура("Роль, МинКолПодписей, ПодписиВрачей", ВыборкаРолей.Роль, МинКолПодписей, Подписи));
			СтруктураПоШаблону.МинКолПодписейПоШаблону = СтруктураПоШаблону.МинКолПодписейПоШаблону + МинКолПодписей;
		КонецЦикла;
		
		Если ПравилаОтсутствуют Тогда
			НезагруженныеКлассификаторы.Добавить(Справочники.РЭМДПравилаПодписи.ПолучитьOIDСправочника());
		Иначе
			ДанныеТребуемыхПодписей.ДанныеРЭМД.Добавить(СтруктураПоШаблону);
			ДанныеТребуемыхПодписей.ТребуютсяПодписиРЭМД = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НезагруженныеКлассификаторы.Количество() > 0 Тогда
		ДобавитьОшибкуПоНезагруженнымКлассификаторам(НезагруженныеКлассификаторы, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСводкуПоДаннымЭПДокумента(ОбъектСсылка, ЭлементыДерева, Заголовок, ВсеПодписиУстановлены, ДанныеРЭМД = Неопределено, ПодписьМО = Неопределено, МинКолПодписей = Неопределено)
	
	ТаблицаHTMLПодписей = "";
	
	ДанныеЗаголовков = Новый Структура;
	ДанныеЗаголовков.Вставить("КоличествоНедостающихПодписей",		0);
	ДанныеЗаголовков.Вставить("КоличествоДействительныхПодписей",	0);
	ДанныеЗаголовков.Вставить("КоличествоПодписейВсего",			0);
	
	Если ДанныеРЭМД <> Неопределено Тогда
		ТаблицаHTMLПодписей = СформироватьТаблицуHTMLПодписейРЭМД(ЭлементыДерева, ДанныеЗаголовков, ДанныеРЭМД, ПодписьМО);
	Иначе
		ТаблицаHTMLПодписей = СформироватьТаблицуHTMLПодписей(ОбъектСсылка, ЭлементыДерева, ДанныеЗаголовков, МинКолПодписей);
	КонецЕсли;
	
	ТаблицаЗаголовка = "";
	
	Если ДанныеЗаголовков.КоличествоДействительныхПодписей < ДанныеЗаголовков.КоличествоПодписейВсего
		Или ДанныеЗаголовков.КоличествоНедостающихПодписей > 0
	Тогда
		КоличествоПроблемСПодписями = ДанныеЗаголовков.КоличествоНедостающихПодписей + ДанныеЗаголовков.КоличествоПодписейВсего - ДанныеЗаголовков.КоличествоДействительныхПодписей;
		ШаблонТаблицы = "<table border='0'><tbody><tr><td>%1: </td><td>%2</td></tr></tbody></table>";
		ТаблицаЗаголовка = СтрШаблон(ШаблонТаблицы, НСтр("ru='Количество недостающих/недействительных подписей'"), КоличествоПроблемСПодписями);
		ВсеПодписиУстановлены = Ложь;
	КонецЕсли;
	
	ТекстHTMLЗаголовка = СтрШаблон("<div style='font-weight: bold'>%1</div>%2", Заголовок, ТаблицаЗаголовка);
	
	Возврат ТекстHTMLЗаголовка + ТаблицаHTMLПодписей;
	
КонецФункции

Функция ПолучитьМассивПодписейДляСводки(ЭлементыДерева, ПодписьМО, ОбъектСсылка)
	
	ТаблицаПодписей = ЭлементыДерева.Выгрузить();
	
	Если ПодписьМО = Неопределено Тогда
		СтрокиТаблицы = ТаблицаПодписей.НайтиСтроки(Новый Структура("ПодписанФайлЭМД", Ложь));
	Иначе
		Если ПодписьМО Тогда
			СтрокиТаблицы = ТаблицаПодписей.НайтиСтроки(Новый Структура("ПодписанФайлЭМД, ЭтоПодписьМО", Истина, Истина));
		Иначе
			СтрокиТаблицы = Новый Массив;
			Для Каждого СтрокаТаблицы Из ТаблицаПодписей.НайтиСтроки(Новый Структура("ПодписанФайлЭМД", Истина)) Цикл
				Если СтрокаТаблицы.ЭтоПодписьВрача
					Или Не (СтрокаТаблицы.ЭтоПодписьВрача
					Или СтрокаТаблицы.ЭтоПодписьМО)
				Тогда
					СтрокиТаблицы.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияСервер.ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблицаПодписей.Скопировать(СтрокиТаблицы));
	
КонецФункции

Процедура ДобавитьКолонкуВидаДокумента(ПодписиДокумента, Прием)
	
	Для Каждого Подпись Из ПодписиДокумента Цикл
		
		Подпись.Вставить("ВидДокумента", "");
		СтрокаРоли = Прием.РолиИПодписиЭМД.Найти(Подпись.УникальныйИдентификатор, "УИД_ЭЦП");
		
		Если СтрокаРоли <> Неопределено Тогда
			СтрокаЭМД = Прием.ЭМД.Найти(СтрокаРоли.УИД_ЭМД, "УИД");
			Если СтрокаЭМД <> Неопределено Тогда
				Подпись.ВидДокумента = СтрШаблон("<div style='max-width:320px'>%1</div>", СтрокаЭМД.ВидДокументаЭМД.НаименованиеПолное);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуHTMLПодписейРЭМД(ЭлементыДерева, ДанныеЗаголовков, ДанныеРЭМД, ПодписьМО)
	
	СтрокиТаблицыПодписей = Новый Массив;
	ШаблонСтрокиШаблона = "<tr style='font-weight: 900'><td colspan='%1'>%2</td></tr>";
	
	ШаблонТаблицы = "<table cellpadding='7' border='1' style='border-color:inherit;border-collapse:collapse'><tbody>%1</tbody></table>";
	
	КолонкиПодписи = Новый Массив;
	КолонкиПодписи.Добавить("УстановившийПодпись");
	КолонкиПодписи.Добавить("ДатаПодписи");
	КолонкиПодписи.Добавить("Статус");
	
	ДанныеЗаголовка = Новый Структура("УстановившийПодпись, ДатаПодписи, Статус", "Пользователь", "Дата подписи", "Статус");
	
	Если ПодписьМО Тогда
		Для Каждого ДанныеРЭМДПоШаблону Из ДанныеРЭМД Цикл
			
			Если ДанныеРЭМДПоШаблону.ПодписьМО <> Неопределено Тогда
				СтрокиТаблицыПодписей.Добавить(СтрШаблон(ШаблонСтрокиШаблона, КолонкиПодписи.Количество(), ДанныеРЭМДПоШаблону.ВидДокумента));
				СтрокиПодписи = ЭлементыДерева.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ДанныеРЭМДПоШаблону.ПодписьМО));
				
				Если СтрокиПодписи.Количество() = 0 Тогда
					ДанныеПодписи = Новый Структура("УстановившийПодпись, ДатаПодписи, Статус", "&nbsp;");
					ШаблонСтроки = "<tr style='background-color:rgb(255,240,240)'>%1</tr>";
				Иначе
					ДанныеЗаголовков.КоличествоПодписейВсего = ДанныеЗаголовков.КоличествоПодписейВсего + 1;
					ДанныеПодписи = СтрокиПодписи[0];
					
					Если ДанныеПодписи.ПодписьВерна И ДанныеПодписи.СертификатДействителен Тогда
						ДанныеЗаголовков.КоличествоДействительныхПодписей = ДанныеЗаголовков.КоличествоДействительныхПодписей + 1;
						ШаблонСтроки = "<tr>%1</tr>";
					Иначе
						ШаблонСтроки = "<tr style='background-color:rgb(255,240,240)'>%1</tr>";
					КонецЕсли;
				КонецЕсли;
				СтрокиТаблицыПодписей.Добавить(СформироватьСтрокуПодписи(ДанныеПодписи, КолонкиПодписи, ШаблонСтроки));
			ИначеЕсли ДанныеРЭМДПоШаблону.ТребуетсяПодписьМО Тогда
				СтрокиТаблицыПодписей.Добавить(СтрШаблон(ШаблонСтрокиШаблона, КолонкиПодписи.Количество(), ДанныеРЭМДПоШаблону.ВидДокумента));
				ДанныеЗаголовков.КоличествоНедостающихПодписей = ДанныеЗаголовков.КоличествоНедостающихПодписей + 1;
				ДанныеПодписи = Новый Структура("УстановившийПодпись, ДатаПодписи, Статус", "&nbsp;");
				СтрокиТаблицыПодписей.Добавить(СформироватьСтрокуПодписи(ДанныеПодписи, КолонкиПодписи, "<tr style='background-color:rgb(255,240,240)'>%1</tr>"));
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		ДанныеЗаголовка.Вставить("Роль", "Роль");
		КолонкиПодписи.Вставить(0, "Роль");
		// Для врачей
		Для Каждого ДанныеРЭМДПоШаблону Из ДанныеРЭМД Цикл
			Если ДанныеРЭМДПоШаблону.КолПодписейВрачейПоШаблону = 0
				И ДанныеРЭМДПоШаблону.МинКолПодписейПоШаблону = 0
			Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиТаблицыПодписей.Добавить(СтрШаблон(ШаблонСтрокиШаблона, КолонкиПодписи.Количество(), ДанныеРЭМДПоШаблону.ВидДокумента));
			Для Каждого ДанныеРоли Из ДанныеРЭМДПоШаблону.ДанныеРолей Цикл
				
				Для Каждого Подпись Из ДанныеРоли.ПодписиВрачей Цикл
					СтрокаПодписи = ЭлементыДерева.НайтиСтроки(Новый Структура("УникальныйИдентификатор", Подпись))[0];
					ДанныеПодписи = Новый Структура("Роль, УстановившийПодпись, ДатаПодписи, Статус");
					ЗаполнитьЗначенияСвойств(ДанныеПодписи, СтрокаПодписи);
					ДанныеПодписи.Роль = ДанныеРоли.Роль;
					
					ДанныеЗаголовков.КоличествоПодписейВсего = ДанныеЗаголовков.КоличествоПодписейВсего + 1;
					Если СтрокаПодписи.ПодписьВерна И СтрокаПодписи.СертификатДействителен Тогда
						ДанныеЗаголовков.КоличествоДействительныхПодписей = ДанныеЗаголовков.КоличествоДействительныхПодписей + 1;
						ШаблонСтроки = "<tr>%1</tr>";
					Иначе
						ШаблонСтроки = "<tr style='background-color:rgb(255,240,240)'>%1</tr>";
					КонецЕсли;
					
					СтрокиТаблицыПодписей.Добавить(СформироватьСтрокуПодписи(ДанныеПодписи, КолонкиПодписи, ШаблонСтроки));
				КонецЦикла;
				
				КоличествоНедостающихПодписейРоли = ДанныеРоли.МинКолПодписей - ДанныеРоли.ПодписиВрачей.Количество();
				Если КоличествоНедостающихПодписейРоли <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеЗаголовков.КоличествоНедостающихПодписей = ДанныеЗаголовков.КоличествоНедостающихПодписей + КоличествоНедостающихПодписейРоли;
				
				Пока КоличествоНедостающихПодписейРоли <> 0 Цикл
					ДанныеПодписи = Новый Структура("Роль, УстановившийПодпись, ДатаПодписи, Статус", ДанныеРоли.Роль);
					СтрокиТаблицыПодписей.Добавить(СформироватьСтрокуПодписи(ДанныеПодписи, КолонкиПодписи, "<tr style='background-color:rgb(255,240,240)'>%1</tr>"));
					КоличествоНедостающихПодписейРоли = КоличествоНедостающихПодписейРоли - 1;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыПодписей.Количество() > 0 Тогда
		СтрокиТаблицыПодписей.Вставить(0, СформироватьСтрокуПодписи(ДанныеЗаголовка, КолонкиПодписи, "<tr style='text-align:center; font-weight: 900'>%1</tr>"));
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонТаблицы, СтрСоединить(СтрокиТаблицыПодписей));
	
КонецФункции

Функция СформироватьСтрокуПодписи(ДанныеПодписи, Колонки, ШаблонСтроки)
	
	Ячейки = Новый Массив;
	
	Для Каждого Колонка Из Колонки Цикл
		Ячейки.Добавить(СтрШаблон("<td>%1</td>", ДанныеПодписи[Колонка]));
	КонецЦикла;
	
	Возврат СтрШаблон(ШаблонСтроки, СтрСоединить(Ячейки));
	
КонецФункции

Функция СформироватьТаблицуHTMLПодписей(ОбъектСсылка, ЭлементыДерева, ДанныеЗаголовков, МинКолПодписей)
	
	УстановитьПривилегированныйРежим(Истина);
	
	тзПодписи = ЭлементыДерева.Выгрузить();
	тзПодписи.Колонки.Добавить("РольСотрудника");
	
	УИДыЭЦП = тзПодписи.ВыгрузитьКолонку("УникальныйИдентификатор");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИПодписиЭМД.РольПодписи КАК РольПодписи,
		|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП
		|ИЗ
		|	РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|ГДЕ
		|	РолиИПодписиЭМД.УИД_ЭЦП В(&УИДыЭЦП)
		|	И РолиИПодписиЭМД.Документ = &Документ";
	
	Запрос.УстановитьПараметр("УИДыЭЦП", УИДыЭЦП);
	Запрос.УстановитьПараметр("Документ", ОбъектСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВыводитьРоли = Выборка.Количество() > 0;
	
	Пока Выборка.Следующий() Цикл
		СтрокиЭЦП = тзПодписи.НайтиСтроки(Новый Структура("УникальныйИдентификатор", Выборка.УИД_ЭЦП));
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			СтрокаЭЦП.РольСотрудника = Выборка.РольПодписи;
		КонецЦикла;
	КонецЦикла;
	
	ПодписиДокумента = тзПодписи.НайтиСтроки(Новый Структура("ПодписанФайлЭМД", Ложь));
	
	СтрокиТаблицыПодписей = Новый Массив;
	ШаблонСтрокиШаблона = "<tr style='font-weight: 900'><td colspan='%1'>%2</td></tr>";
	
	ШаблонТаблицы = "<table cellpadding='7' border='1' style='border-color:inherit;border-collapse:collapse'><tbody>%1</tbody></table>";
	
	КолонкиПодписи = Новый Массив;
	КолонкиПодписи.Добавить("УстановившийПодпись");
	КолонкиПодписи.Добавить("ДатаПодписи");
	КолонкиПодписи.Добавить("Статус");
	
	ДанныеЗаголовка = Новый Структура("УстановившийПодпись, ДатаПодписи, Статус", "Пользователь", "Дата подписи", "Статус");
	
	Если ВыводитьРоли Тогда
		КолонкиПодписи.Вставить(0, "РольСотрудника");
		ДанныеЗаголовка.Вставить("РольСотрудника", "Роль");
	КонецЕсли;
	
	Для Каждого СтрокаПодписи Из ПодписиДокумента Цикл
		ДанныеЗаголовков.КоличествоПодписейВсего = ДанныеЗаголовков.КоличествоПодписейВсего + 1;
		Если СтрокаПодписи.ПодписьВерна И СтрокаПодписи.СертификатДействителен Тогда
			ДанныеЗаголовков.КоличествоДействительныхПодписей = ДанныеЗаголовков.КоличествоДействительныхПодписей + 1;
			ШаблонСтроки = "<tr>%1</tr>";
		Иначе
			ШаблонСтроки = "<tr style='background-color:rgb(255,240,240)'>%1</tr>";
		КонецЕсли;
		СтрокиТаблицыПодписей.Добавить(СформироватьСтрокуПодписи(СтрокаПодписи, КолонкиПодписи, ШаблонСтроки));
	КонецЦикла;
	
	КоличествоНедостающихПодписейРоли = МинКолПодписей - ПодписиДокумента.Количество();
	Если КоличествоНедостающихПодписейРоли > 0 Тогда
		ДанныеЗаголовков.КоличествоНедостающихПодписей = ДанныеЗаголовков.КоличествоНедостающихПодписей + КоличествоНедостающихПодписейРоли;
		Пока КоличествоНедостающихПодписейРоли <> 0 Цикл
			ДанныеПодписи = Новый Структура("УстановившийПодпись, ДатаПодписи, Статус", "&nbsp;");
			
			Если ВыводитьРоли Тогда
				ДанныеПодписи.Вставить("РольСотрудника", "Роль");
			КонецЕсли;
			
			СтрокиТаблицыПодписей.Добавить(СформироватьСтрокуПодписи(ДанныеПодписи, КолонкиПодписи, "<tr style='background-color:rgb(255,240,240)'>%1</tr>"));
			КоличествоНедостающихПодписейРоли = КоличествоНедостающихПодписейРоли - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыПодписей.Количество() > 0 Тогда
		СтрокиТаблицыПодписей.Вставить(0, СформироватьСтрокуПодписи(ДанныеЗаголовка, КолонкиПодписи, "<tr style='text-align:center; font-weight: 900'>%1</tr>"));
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонТаблицы, СтрСоединить(СтрокиТаблицыПодписей));
	
КонецФункции

Функция ДанныеСообщенийРЭМДПоЭП(ЭлементыДерева)
	
	ДанныеИзСообщенийРЭМД = Новый Соответствие;
	
	УИДыЭЦП = Новый Массив;
	Для Каждого СтрокаЭП Из ЭлементыДерева Цикл
		УИДыЭЦП.Добавить(СтрокаЭП.УникальныйИдентификатор);
	КонецЦикла;
	
	Если УИДыЭЦП.Количество() <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СообщенияРЭМДЭП.УИД_ЭЦП КАК УИД_ЭЦП,
			|	МАКСИМУМ(СообщенияРЭМДЭП.Ссылка) КАК СообщениеРЭМД
			|ПОМЕСТИТЬ СообщенияЭП
			|ИЗ
			|	Справочник.СообщенияРЭМД.ЭлектронныеПодписиЭМД КАК СообщенияРЭМДЭП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияРЭМД КАК СообщенияРЭМД
			|		ПО СообщенияРЭМДЭП.Ссылка = СообщенияРЭМД.Ссылка
			|ГДЕ
			|	НЕ СообщенияРЭМД.ПометкаУдаления
			|	И СообщенияРЭМДЭП.УИД_ЭЦП В(&УИДыЭЦП)
			|
			|СГРУППИРОВАТЬ ПО
			|	СообщенияРЭМДЭП.УИД_ЭЦП
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СообщенияЭП.УИД_ЭЦП КАК УИД_ЭЦП,
			|	СообщенияЭП.СообщениеРЭМД КАК СообщениеРЭМД,
			|	МАКСИМУМ(СообщенияРЭМДЭП.ЭтоПодписьМО) КАК ЭтоПодписьМО,
			|	МАКСИМУМ(НЕ СообщенияРЭМДЭП.ЭтоПодписьМО) КАК ЭтоПодписьВрача
			|ИЗ
			|	СообщенияЭП КАК СообщенияЭП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияРЭМД.ЭлектронныеПодписиЭМД КАК СообщенияРЭМДЭП
			|		ПО СообщенияЭП.СообщениеРЭМД = СообщенияРЭМДЭП.Ссылка
			|			И (СообщенияРЭМДЭП.УИД_ЭЦП = СообщенияЭП.УИД_ЭЦП)
			|
			|СГРУППИРОВАТЬ ПО
			|	СообщенияЭП.УИД_ЭЦП,
			|	СообщенияЭП.СообщениеРЭМД";
		
		Запрос.УстановитьПараметр("УИДыЭЦП", УИДыЭЦП);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеСообщения = Новый Структура("СообщениеРЭМД, ЭтоПодписьМО, ЭтоПодписьВрача");
			ЗаполнитьЗначенияСвойств(ДанныеСообщения, Выборка);
			ДанныеИзСообщенийРЭМД.Вставить(Выборка.УИД_ЭЦП, ДанныеСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеИзСообщенийРЭМД;
	
КонецФункции

Процедура ЗаполнитьУИДыЭМД(ТаблицаПодписей, ОбъектСсылка) Экспорт
	
	Если ТаблицаПодписей.Количество() = 0
		Или (ТипЗнч(ТаблицаПодписей) = Тип("ТаблицаЗначений")
			И ТаблицаПодписей.Колонки.Найти("УИД_ЭМД") = Неопределено)
		Или (ТипЗнч(ТаблицаПодписей) = Тип("ДанныеФормыКоллекция")
			И Не ТаблицаПодписей[0].Свойство("УИД_ЭМД"))
	Тогда
		Возврат;
	КонецЕсли;
	
	УИДыЭЦП = Новый Массив;
	Для Каждого СтрокаЭП Из ТаблицаПодписей Цикл
		УИДыЭЦП.Добавить(СтрокаЭП.УникальныйИдентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП,
		|	РолиИПодписиЭМД.УИД_ЭМД КАК УИД_ЭМД
		|ИЗ
		|	РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|ГДЕ
		|	РолиИПодписиЭМД.УИД_ЭЦП В(&УИДыЭЦП)
		|	И РолиИПодписиЭМД.Документ = &Документ";
	
	Запрос.УстановитьПараметр("УИДыЭЦП", УИДыЭЦП);
	Запрос.УстановитьПараметр("Документ", ОбъектСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокиЭЦП = ТаблицаПодписей.НайтиСтроки(Новый Структура("УникальныйИдентификатор", Выборка.УИД_ЭЦП));
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			СтрокаЭЦП.УИД_ЭМД = Выборка.УИД_ЭМД;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСтороннихМодулей

Процедура ВывестиКартинкуЭП(Форма) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	КешИнформации.Объект = Объект.Ссылка;
	КешИнформации.Прочитать();
	
	Если КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписиНет Тогда
		Форма.СтатусЭП = 0;
		Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Не подписан электронной подписью'");
	ИначеЕсли КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена Тогда
		Форма.СтатусЭП = 1;
		Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Подписан электронной подписью. Подпись не проверена.'");
	ИначеЕсли КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьДействительна Тогда 
		Форма.СтатусЭП = 2;
		Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Подписан электронной подписью. Подпись действительна.'");
	ИначеЕсли КешИнформации.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНедействительна Тогда 
		Форма.СтатусЭП = 3;
		Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Подписан электронной подписью. Подпись недействительна.'");
	Иначе 
		Если Объект.ПодписанЭП Тогда
			Форма.СтатусЭП = 1;
			Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Подписан электронной подписью. Подпись не проверена.'");
		Иначе 
			Форма.СтатусЭП = 0;
			Элементы.КартинкаЭП.Подсказка = НСтр("ru = 'Не подписан электронной подписью'");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти