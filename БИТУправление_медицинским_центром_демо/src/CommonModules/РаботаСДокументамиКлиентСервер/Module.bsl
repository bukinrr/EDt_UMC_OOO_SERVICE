#Область ПрограммныйИнтерфейс

// Процедура корректирует табличную часть оплаты по данным о наличной оплате.
//
// Параметры:
//  Объект	 - ДокументОбъект.ОказаниеУслуг	 - документ.
//
Процедура РассчитатьОплатуСдачуПоПолученнымНаличным(Объект, ОбнулятьСдачу = Ложь, СуммаОплатыНаличнымиДоИзменения = 0) Экспорт 
	
	Если Объект.ПолученоНаличными = 0 Тогда
		// Удалить нал из оплаты
		УдалитьНаличныеИзТЧОплата(Объект);
		Объект.Сдача = 0;
	Иначе
		// Расчет сдачи		
		СуммаОплатыНеНаличными = 0;
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты <> ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными") Тогда
				СуммаОплатыНеНаличными = СуммаОплатыНеНаличными + СтрокаОплаты.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Объект.Сдача = Мин(Макс(0,СуммаОплатыНеНаличными + Объект.ПолученоНаличными - Объект.СуммаДокумента), Объект.ПолученоНаличными);
		
		Если Объект.Сдача = Объект.ПолученоНаличными Тогда
			УдалитьНаличныеИзТЧОплата(Объект);
		Иначе
			СтрокаОплатыНаличными = УдалитьНаличныеИзТЧОплата( Объект, Истина);
			
			Если СтрокаОплатыНаличными = Неопределено Тогда
				СтрокаОплатыНаличными = Объект.Оплата.Добавить();
				СтрокаОплатыНаличными.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными");
			КонецЕсли;
			СтрокаОплатыНаличными.Сумма = Объект.ПолученоНаличными - Объект.Сдача;
			
			Если ОбнулятьСдачу И СуммаОплатыНаличнымиДоИзменения <> СтрокаОплатыНаличными.Сумма Тогда
				Объект.ПолученоНаличными = СтрокаОплатыНаличными.Сумма;
				Объект.Сдача = 0;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьНаличныеИзТЧОплата(Объект, КромеПервогоВхождения=Ложь)
	
	Перем СтрокаОплатыНаличными;
	
	Если КромеПервогоВхождения Тогда
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными") Тогда
				СтрокаОплатыНаличными = СтрокаОплаты;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МаксОбрИнд = Объект.Оплата.Количество()-1;
	Для сч = 0 По МаксОбрИнд Цикл
		Если Не (КромеПервогоВхождения И СтрокаОплаты.НомерСтроки = (МаксОбрИнд-сч+1))
			И Объект.Оплата[МаксОбрИнд-сч].ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными")
			Тогда
			Объект.Оплата.Удалить(МаксОбрИнд - сч);
		КонецЕсли;
	КонецЦикла;		
	
	Возврат СтрокаОплатыНаличными;
	
КонецФункции

// Расчет суммы документа
//
// Параметры:
//  Объект	 - ДокументОбъект.ОказаниеУслуг	 - документ.
//
Процедура РасчитатьСуммуДокументаОказанияУслуг(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Документ) Тогда
		ВремСуммаРаботы = 0;
		ВремСуммаРаботыДоплата = 0;
		мсСтр = Объект.Работы.НайтиСтроки(Новый Структура("Сертификат,НеОплачиваетсяПолисом", ПредопределенноеЗначение("Справочник.Сертификаты.ПустаяСсылка"),Истина));
		мсДоп = Объект.Работы.НайтиСтроки(Новый Структура("Сертификат,НеОплачиваетсяПолисом", ПредопределенноеЗначение("Справочник.Сертификаты.ПустаяСсылка"),Ложь));
		
		Для Каждого стр Из мсСтр Цикл
			ВремСуммаРаботы = ВремСуммаРаботы + стр["Сумма"];          
		КонецЦикла;
		
		Для Каждого стр Из мсДоп Цикл
			ВремСуммаРаботыДоплата = ВремСуммаРаботыДоплата + стр["СуммаНеПоПолису"];          
		КонецЦикла;
		
		ВремСуммаРаботы = ВремСуммаРаботы + ВремСуммаРаботыДоплата;
		
		ВремСуммаМатериалы = 0;
		ВремСуммаМатериалыДоплата = 0;
		мсСтр = Объект.Материалы.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
		мсДоп = Объект.Материалы.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Ложь));
		
		Для Каждого стр Из мсСтр Цикл
			ВремСуммаМатериалы = ВремСуммаМатериалы + стр["Сумма"] - стр["СуммаНеПоПолису"];           
		КонецЦикла;
		
		Для Каждого стр Из мсДоп Цикл
			ВремСуммаМатериалыДоплата = ВремСуммаМатериалыДоплата + стр["СуммаНеПоПолису"];           
		КонецЦикла;
		
		ВремСуммаМатериалыДоплата = ВремСуммаМатериалы + ВремСуммаМатериалыДоплата;

		ВремСуммаТовары = 0;
		ВремСуммаТоварыДоплата = 0;
		мсСтр = Объект.Товары.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
		мсДоп = Объект.Товары.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Ложь));
		
		Для Каждого стр Из мсСтр Цикл
			ВремСуммаТовары = ВремСуммаТовары + стр["Сумма"] - стр["СуммаНеПоПолису"];           
		КонецЦикла;
		
		Для Каждого стр Из мсДоп Цикл
			ВремСуммаТоварыДоплата = ВремСуммаТоварыДоплата + стр["СуммаНеПоПолису"];           
		КонецЦикла;
		
		ВремСуммаТовары = ВремСуммаТовары + ВремСуммаТоварыДоплата;
		
		ВремСуммаСертификаты = 0;
		ВремСуммаСертификатыДоплата = 0;
		мсСтр = Объект.Сертификаты.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
		мсДоп = Объект.Сертификаты.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Ложь));
		
		Для Каждого стр Из мсСтр Цикл
			ВремСуммаСертификаты = ВремСуммаСертификаты + стр["Сумма"];          
		КонецЦикла;
		
		Для Каждого стр Из мсДоп Цикл
			ВремСуммаСертификатыДоплата = ВремСуммаСертификатыДоплата + стр["СуммаНеПоПолису"];          
		КонецЦикла;
		
		ВремСуммаСертификаты = ВремСуммаСертификаты + ВремСуммаСертификатыДоплата;
		
		ВремСуммаСертификатыПополнение = 0;     
		ВремСуммаСертификатыПополнениеДоплата = 0;                          
		мсСтр = Объект.ПополнениеСертификатов.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
		мсДоп = Объект.ПополнениеСертификатов.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Ложь));
		
		Для Каждого стр Из мсСтр Цикл
			ВремСуммаСертификатыПополнение = ВремСуммаСертификатыПополнение + стр["Сумма"];          
		КонецЦикла;
		
		Для Каждого стр Из мсДоп Цикл
			ВремСуммаСертификатыПополнениеДоплата = ВремСуммаСертификатыПополнениеДоплата + стр["СуммаНеПоПолису"];          
		КонецЦикла;
		
		ВремСуммаСертификатыПополнение = ВремСуммаСертификатыПополнение + ВремСуммаСертификатыПополнениеДоплата;

	Иначе
		ВремСуммаРаботы = 0;
		мсСтр = Объект.Работы.НайтиСтроки(Новый Структура("Сертификат", ПредопределенноеЗначение("Справочник.Сертификаты.ПустаяСсылка")));
		Для Каждого стр Из мсСтр Цикл
			ВремСуммаРаботы = ВремСуммаРаботы + стр["Сумма"];          
		КонецЦикла;
		
		Попытка ВремСуммаМатериалы	 = Объект.Материалы.Итог("Сумма");	Исключение КонецПопытки;
		Попытка ВремСуммаТовары		 = Объект.Товары.Итог("Сумма");		Исключение КонецПопытки;
		Попытка ВремСуммаСертификаты = Объект.Сертификаты.Итог("Сумма");Исключение КонецПопытки;
		Попытка ВремСуммаСертификатыПополнение = Объект.ПополнениеСертификатов.Итог("Сумма");Исключение КонецПопытки;
	КонецЕсли;
	
	ВремСумма	= ?(ЗначениеЗаполнено(ВремСуммаТовары)				 , ВремСуммаТовары,0)
				+ ?(ЗначениеЗаполнено(ВремСуммаРаботы)				 , ВремСуммаРаботы,0) 
				+ ?(ЗначениеЗаполнено(ВремСуммаМатериалы)			 , ВремСуммаМатериалы,0) 
				+ ?(ЗначениеЗаполнено(ВремСуммаСертификаты)			 , ВремСуммаСертификаты,0)
				+ ?(ЗначениеЗаполнено(ВремСуммаСертификатыПополнение), ВремСуммаСертификатыПополнение,0);
	
	// Меняем сумму документа на форме, если ее значение изменилось.
	Попытка
		Если ВремСумма <> Объект.СуммаДокумента Тогда 
			Объект.СуммаДокумента = ВремСумма; 
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура установки заголовка надписи суммы оплаты в форме документа
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма открытого документа.
//
Процедура ВывестиЗаголовокСуммаОплатыДокумента(ЭтаФорма) Экспорт
	
	Если ЭтаФорма<>Неопределено Тогда
		// Попытаемся пересчитать сумму документа
		Попытка        
			
			ВремСумма=ЭтаФорма.РассчитатьСуммуОплаты();
			
		Исключение
			
			Попытка ВремСуммаОплата = ЭтаФорма.Объект.Оплата.Итог("Сумма"); Исключение КонецПопытки;
			
		КонецПопытки;
		
		Если ВремСуммаОплата <>Неопределено Тогда
			ВремСумма = ВремСуммаОплата;
		КонецЕсли;
		
		Попытка
			Если ВремСумма<>Неопределено Тогда
				ТекстСумма=Формат(ВремСумма,"ЧДЦ=2; ЧН=0,00");
			КонецЕсли; 
		Исключение
		КонецПопытки;
	
		ЭтаФорма.СуммаОплаты = ТекстСумма;
		
		Попытка
			ЭтаФорма.ОбновитьВидимостьДепозитнойОперацииККМ();
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

// Распределяет сумму оплаты документа по табличной части информации о доплатах.
//
// Параметры:
//  КредитныеДанные	 - ТабличнаяЧасть, ДанныеФормыКоллекция	 - Таблицая часть платежного документа.
//  СуммаДокумента	 - Число - Распределяемая сумма документа оплаты.
//
Процедура РаспределитьОплатуКредитныхДанныхККМ(КредитныеДанные, СуммаДокумента) Экспорт
	
	СуммаВсехПозиций	= КредитныеДанные.Итог("СуммаПриПокупке");
	КоличествоПозиций	= КредитныеДанные.Количество();
	ОстатокСуммыКРаспределению = СуммаДокумента; 	
	
	Если КоличествоПозиций = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Позиция Из КредитныеДанные Цикл
		
		Если СуммаВсехПозиций = 0 И Позиция.СуммаПриПокупке = 0 Тогда
			СуммаПозиции = Окр(СуммаДокумента / КоличествоПозиций, 0);
		Иначе
			СуммаПозиции = Окр(Позиция.СуммаПриПокупке * СуммаДокумента / СуммаВсехПозиций, 2);
		КонецЕсли;

		Если СуммаПозиции > ОстатокСуммыКРаспределению Тогда 
			СуммаПозиции = ОстатокСуммыКРаспределению;
		КонецЕсли;
		Позиция.Сумма = СуммаПозиции;
		
		ОстатокСуммыКРаспределению = ОстатокСуммыКРаспределению - СуммаПозиции;
	КонецЦикла;
	Если ОстатокСуммыКРаспределению <> 0 Тогда 
		Позиция.Сумма = Позиция.Сумма + ОстатокСуммыКРаспределению;	
	КонецЕсли;
	
КонецПроцедуры

// Количество разрешенных способов расчета данной настройкой печати онлайн-чеков ККМ.
//
// Параметры:
//  НастройкаПечатиЧеков - СправочникСсылка.НастройкиПечатиЧеков - Настройки печати онлайн-чеков ККМ.
// 
// Возвращаемое значение:
//   Число.
//
Функция КоличествоРазрешенныхСпособовРасчета(НастройкаПечатиЧеков) Экспорт
	
	Если НастройкаПечатиЧеков.ПустаяСсылка Тогда
		Возврат 0;
	Иначе
		Возврат Число(НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи) + Число(НастройкаПечатиЧеков.ДоступныКредитныеПлатежи)
	КонецЕсли;	
	
КонецФункции

// Название операции вноса аванса исходя из стека настроек учета разной детализации.
//
// Параметры:
//  НастройкаПечатиЧеков - СправочникСсылка.НастройкиПечатиЧеков	- настройка печати чеков филиала документа.
// 
// Возвращаемое значение:
//   Строка.
//
Функция НазваниеПозицииЧекаВносАванса(НастройкаПечатиЧеков) Экспорт
	
	Перем НазваниеПозицииЧека;
	
	Если НастройкаПечатиЧековЗаполнена(НастройкаПечатиЧеков) Тогда
		НазваниеПозицииЧека = НастройкаПечатиЧеков.НазваниеДляВзносаВыдачиДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НазваниеПозицииЧека) Тогда
		НазваниеПозицииЧека = УправлениеНастройками.ПараметрУчета("ПредставлениеВЧекеККМОперацииПополненияБаланса");
		Если ПустаяСтрока(НазваниеПозицииЧека) Тогда
			НазваниеПозицииЧека = НСтр("ru='Расчет по депозиту'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат НазваниеПозицииЧека;
	
КонецФункции

// Проверяет заполненность настройки печати чеков.
//
// Параметры:
//  НастройкаПечатиЧеков - СправочникСсылка.НастройкиПечатиЧеков	- настройка печати чеков филиала документа.
// 
// Возвращаемое значение:
//   Булево.
//
Функция НастройкаПечатиЧековЗаполнена(НастройкаПечатиЧеков) Экспорт
	
	Если ТипЗнч(НастройкаПечатиЧеков) = Тип("Структура") Тогда
		Возврат Не НастройкаПечатиЧеков.ПустаяСсылка;
	Иначе
		Возврат ЗначениеЗаполнено(НастройкаПечатиЧеков);
	КонецЕсли;
	
КонецФункции

#КонецОбласти
