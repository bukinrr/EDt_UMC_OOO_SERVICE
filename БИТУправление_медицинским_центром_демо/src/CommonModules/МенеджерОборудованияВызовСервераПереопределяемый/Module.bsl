#Область ПрограммныйИнтерфейс

// Возвращает список доступных типов оборудования.
// 
// Параметры:
//   СписокТиповОборудования - Массив - Массив доступных типов подключаемого оборудования в конфигурации.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки,
// Пример:
//   СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ).
//
Процедура ДоступныеТипыОборудования(СписокТиповОборудования, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя);
	СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт);
	СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных);
	СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	СписокТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
КонецПроцедуры

// Возвращает флаг возможности добавления новых драйверов оборудования в справочник.
// Параметры:
//   ДобавлениеНовыхДрайверовДоступно - Булево - флаг возможности добавления новых компонент подключения оборудования.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки,
// Пример:
//   ДобавлениеНовыхДрайверовДоступно = Ложь;
//   СтандартнаяОбработка = Ложь. 
//
Процедура ДоступноДобавлениеНовыхДрайверов(ДобавлениеНовыхДрайверовДоступно, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Возвращает доступность сетевого оборудования.
//
// Параметры:
//  СетевоеОборудованиеДоступно - Булево - Сетевое оборудование доступно.
//  СтандартнаяОбработка - Булево - Стандартная обработка.
//
Процедура ДоступноСетевоеОборудование(СетевоеОборудованиеДоступно, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;     
	СетевоеОборудованиеДоступно = Истина;
	
КонецПроцедуры

// Возвращает доступность распределенной фискализации.
//  
// Параметры:
//  РаспределеннаяФискализацииДоступна - Булево - Доступность распределенной фискализации.
//  СтандартнаяОбработка - Булево - Стандартная обработка.
//
Процедура ДоступноРаспределеннаяФискализация(РаспределеннаяФискализацииДоступна, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Возвращает доступность инкассации в форме управление фискальным устройством.
//  
// Параметры:
//  ИнкассацияДоступна - Булево - Доступность инкассации.
//  СтандартнаяОбработка - Булево - Стандартная обработка.
//
Процедура ДоступноИнкассацияВУправлениеФискальнымУстройством(ИнкассацияДоступна, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Доступны возвраты без карты.       
//
// Параметры:
//  ВозвратыБезКарты - Структура - Доступны возвраты без карты:
//   * ВозвратПоПлатежнойКарте - Булево
//   * ВозвратЭлектроннымСертификатом - Булево
//
Процедура ДоступноВозвратыБезКарты(ВозвратыБезКарты) Экспорт
	
КонецПроцедуры  

// Переопределяемая процедура для подсистемы управление доступом СтандартныеПодсистемы
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//  Менеджер - Строка 
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение) Экспорт
	
КонецПроцедуры

#Область Обновление

// Переопределяемая часть процедуры обновления с БПО 3
//  
// Параметры:
//  СсылкаПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - оборудование для обновления перехода с БПО 3
//
Процедура ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОборудованиеККТ

// Процедура заполняет реквизиты организации для регистрации ФН.
//  
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияБПО - организация для заполнения реквизитов.
//  ПараметрыРегистрации - Структура - параметры регистрации ФН.
//
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрацииФН(Организация, ПараметрыРегистрации) Экспорт
	
КонецПроцедуры

// Переопределяет формируемый шаблон чека.
//
// Параметры:
//  ОбщиеПараметры - Структура - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ДополнительныйТекст - Строка - дополнительный текст шаблона чека.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//  ТипОборудования - Строка - типы оборудования строкой.
//
// Возвращаемое Значение:
//  Булево
Функция СформироватьШаблонЧека(ОбщиеПараметры, ДополнительныйТекст, СтандартнаяОбработка, ТипОборудования = "") Экспорт
	
КонецФункции

// Возвращает для каких типов идентификаторов будет заполняться тег 1162 (код товара).
//
// Параметры:
//  ТипыИдентификаторов - Массив - Типы идентификаторов, Массив значений  Перечисления.ТипыИдентификаторовТовараККТ.
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура КодТовараЗаполняетсяДляТиповИдентификаторов(ТипыИдентификаторов, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Возвращает, для каких типов товаров будет заполняться отраслевой реквизит.
//
// Параметры:
//  ТипыТоваров - Структура
//  * ИзделияИзНатуральногоМеха - Булево - Заполнения для изделия из натурального меха. 
//  * ОбъемноСортовойУчет -  Заполнения для товаров объемно сортового учета.
//
Процедура ОтраслевойРеквизитЗаполняетсяДляТиповТоваров(ТипыТоваров) Экспорт
	

	
КонецПроцедуры

 // Ведется учет ИСМП в конфигурации
// Параметры:
//  УчетПродукцииИСМП - Булево - Ведется учет ИСМП в конфигурации 
//  СтандартнаяОбработка - Булево - Выполнение стандартной обработки
//
Процедура ВедетсяУчетПродукцииИСМП(УчетПродукцииИСМП, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Ведется объемно сортовой учет в конфигурации
// Параметры:
//  ОбъемноСортовойУчет - Булево - Ведется объемно сортовой учет в конфигурации 
//  СтандартнаяОбработка - Булево - Выполнение стандартной обработки
//
Процедура ВедетсяОбъемноСортовойУчет(ОбъемноСортовойУчет, СтандартнаяОбработка) Экспорт
	

	
КонецПроцедуры

// Процедура где можно добавить любой текст при формировании чека в формате PDF.
//
// Параметры:
//   ТекстЗаголовка - Строка - Текст который будет выведен при формировании кассового чека в формате PDF
//   ТекстПодвала - Строка - Текст который будет выведен при формировании кассового чека в формате PDF
Процедура ДополнительныйТекстПриФормированииЧекаPDF(ТекстЗаголовка, ТекстПодвала) Экспорт
	
КонецПроцедуры

// Переопределяет доступное ККТ для фискализации чека
//
// Параметры:
//  РеквизитыЧека - Структура - реквизиты фискального чека
//  СписокУстройств - Массив - Список доступных ККТ для фискализации
//  ИдентификаторУстройстваККТ - СправочникСсылка.ПодключаемоеОборудование - выбранное ККТ для фискализации
//
Процедура ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ) Экспорт

КонецПроцедуры

// Возвращает признак заполнения тега 1162 (код товара) только для DataMatrixGS1.
//  
// Возвращаемое значение:
//  Булево - Если код товара заполняется только для КМ DataMatrixGS1.
//
Функция КодТовараЗаполняетсяТолькоДляDataMatrixGS1() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Получить структуру шаблона чека.
Функция ПолучитьСтруктуруШаблонаЧека(ПараметрыШаблонаЧека, ДополнительныйТекст = "", ТипОборудования = "") Экспорт
	
КонецФункции 

Процедура ЗаполнитьОбщиеПараметрыЧека(ОборудованиеСсылка, ОбщиеПараметры, НастройкаПечатиЧеков, Филиал = Неопределено) Экспорт
	
	ОбщиеПараметры.Кассир = ПолучитьТекущегоКассира();
	ОбщиеПараметры.КассирИНН = ПолучитьИННТекущегоКассира();
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		
		РеквизитыОрганизации = ПроцедурыСпециализацииПоставки.ПолучитьРеквизитыОрганизации(Филиал);
		
		ОбщиеПараметры.ОрганизацияНазвание	= РеквизитыОрганизации.НазваниеОрганизации;
		ОбщиеПараметры.ОрганизацияИНН		= РеквизитыОрганизации.ИНН;
		ОбщиеПараметры.ОрганизацияКПП		= РеквизитыОрганизации.КПП;
	КонецЕсли;
	
	ОбщиеПараметры.НомерКассы	= "";
	ОбщиеПараметры.НомерЧека	= "";
	ОбщиеПараметры.НомерСмены	= "";
	
	ПроверитьПолучитьПараметрыККТ(ОборудованиеСсылка, ОбщиеПараметры, НастройкаПечатиЧеков);
	
КонецПроцедуры

Процедура ПроверитьПолучитьПараметрыККТ(Ссылка, ОбщиеПараметры, НастройкаПечатиЧеков) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПодключаемоеОборудование")
		И Ссылка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ
	Тогда
		Для Каждого Парам Из Ссылка.ПараметрыРегистрации Цикл
			Для Каждого КлючИЗначение Из ОбщиеПараметры Цикл
				Если КлючИЗначение.Ключ = Парам.НаименованиеПараметра Тогда
					ОбщиеПараметры.Вставить(КлючИЗначение.Ключ, Парам.ЗначениеПараметра);
					Прервать;
				КонецЕсли;
				// Решаем проблему с различием в именовании обязательного параметра КодСистемыНалогообложения
				Если Парам.НаименованиеПараметра = "КодыСистемыНалогообложения" Тогда
					
					Если ОбщиеПараметры.Свойство("СНО")
						И ОбщиеПараметры.СНО = Перечисления.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход 
						И Не НастройкаПечатиЧеков.ПустаяСсылка
						И (НастройкаПечатиЧеков.ПравилоПечатиЧековЕНВД = Перечисления.ПравилаПечатиЧековЕНВД.НеФискальноОднойСтрокой
						Или НастройкаПечатиЧеков.ПравилоПечатиЧековЕНВД = Перечисления.ПравилаПечатиЧековЕНВД.НеФискальноМногострочно)
					Тогда	
						// Чек будет пробиваться нефискально и сравнивать коды СНО в 1С и в ККМ не требуется
						Продолжить;
					КонецЕсли;
					
					Если СтрНайти(Парам.ЗначениеПараметра, ",") Тогда // Если организация работает по нескольким системам НО.
						мКоды = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Парам.ЗначениеПараметра, ",");
						Если ОбщиеПараметры.Свойство("СНО") И ЗначениеЗаполнено(ОбщиеПараметры.СНО) Тогда
							СНОЧек = ПолучитьКодСНО(ОбщиеПараметры.СНО);
							ВалидныйКодСНО = "";
							Для Каждого Код Из мКоды Цикл
								Попытка
									ТекКод = Число(Код);
									Если ТекКод = СНОЧек Тогда
										ВалидныйКодСНО = ТекКод; 			
									КонецЕсли;
								Исключение
								КонецПопытки;
							КонецЦикла;
							
							Если ЗначениеЗаполнено(ВалидныйКодСНО) Тогда
								ОбщиеПараметры.КодСистемыНалогообложения = Строка(ВалидныйКодСНО);	
							Иначе
								МинимальныйКод = 999; // Выделяем систему НО с минимальным кодом.
								Для Каждого Код Из мКоды Цикл
									Попытка
										ТекКод = Число(Код);
										Если ТекКод <= МинимальныйКод Тогда
											МинимальныйКод = ТекКод;			
										КонецЕсли;
									Исключение
									КонецПопытки;
								КонецЦикла;
								
								Если МинимальныйКод = 999 Тогда //Что-то пошло не так
									ОбщиеПараметры.КодСистемыНалогообложения = Парам.ЗначениеПараметра;	
								Иначе //Удалось выделить самую общую систему налогообложения
									ОбщиеПараметры.КодСистемыНалогообложения = Строка(МинимальныйКод);
								КонецЕсли;	
							КонецЕсли;
						Иначе
							МинимальныйКод = 999; //выделяем систему НО с минимальным кодом
							Для Каждого Код Из мКоды Цикл
								Попытка
									ТекКод = Число(Код);
									Если ТекКод <= МинимальныйКод Тогда
										МинимальныйКод = ТекКод;			
									КонецЕсли;
								Исключение
								КонецПопытки;
							КонецЦикла;
							
							Если МинимальныйКод = 999 Тогда //Что-то пошло не так
								ОбщиеПараметры.КодСистемыНалогообложения = Парам.ЗначениеПараметра;	
							Иначе //Удалось выделить самую общую систему налогообложения
								ОбщиеПараметры.КодСистемыНалогообложения = Строка(МинимальныйКод);
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						Если ОбщиеПараметры.Свойство("СНО") И ЗначениеЗаполнено(ОбщиеПараметры.СНО) Тогда
							СНОЧек = ПолучитьКодСНО(ОбщиеПараметры.СНО);
							Если НЕ ЗначениеЗаполнено(Парам.ЗначениеПараметра) Тогда
								ОбщиеПараметры.КодСистемыНалогообложения = СНОЧек;
							Иначе
								ОбщиеПараметры.КодСистемыНалогообложения = Парам.ЗначениеПараметра;
							КонецЕсли;
						Иначе
							ОбщиеПараметры.КодСистемыНалогообложения = Парам.ЗначениеПараметра;
						КонецЕсли;	
					КонецЕсли;
					Прервать;
				ИначеЕсли Парам.НаименованиеПараметра = "АдресУстановкиККТ" Тогда
					ОбщиеПараметры.АдресМагазина = Парам.ЗначениеПараметра;	 
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		//+бит
		Если ОбщиеПараметры.КодСистемыНалогообложения <> Неопределено Тогда
		//-бит
		ОбщиеПараметры.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(ОбщиеПараметры.КодСистемыНалогообложения));
		//+бит
		КонецЕсли;
		//-бит
	КонецЕсли;
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПодключаемоеОборудование") Тогда
		ПереформироватьПараметрыЧекаУниверсально(Ссылка, ОбщиеПараметры, НастройкаПечатиЧеков);
	КонецЕсли;
	
КонецПроцедуры

// Выравнивает строку врпаво по указанной нужной длине строки
Функция ВыровнятьСтрокуВправо(Текст, НужнаяДлина) Экспорт
	
	Возврат Прав(ПолучитьСтрокуПробелов(НужнаяДлина)+Текст,НужнаяДлина);
	
КонецФункции

// Возвращает тсроку из пробелов нужной длины
Функция ПолучитьСтрокуПробелов(Длина) Экспорт 
	
	Результат = "";
	Для сч = 1 по Длина Цикл
		Результат = Результат + " ";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку нужной длины по левой и правой её частям.
Функция ПолучитьСтрокуЛевоПраво(СтрокаЛево,СтрокаПраво,ШиринаЧековойЛенты) Экспорт
	
	ОбщаяДлина = СтрДлина(СтрокаЛево+СтрокаПраво);
	
	СтрокТекста = Цел(ОбщаяДлина/ШиринаЧековойЛенты)+ ?((ОбщаяДлина/ШиринаЧековойЛенты = Цел(ОбщаяДлина/ШиринаЧековойЛенты)),0,1);
	
	ВставляемаяВСерединуСтрока = ПолучитьСтрокуПробелов(СтрокТекста*ШиринаЧековойЛенты - ОбщаяДлина);
	
	Возврат СтрокаЛево + ВставляемаяВСерединуСтрока + СтрокаПраво;
	
КонецФункции
//-бит


Функция ПолучитьКодСНО(СНО)Экспорт
	Код = Неопределено;
	Если СНО = Перечисления.СистемыНалогообложения.Общая Тогда
		Код = 0;
	ИначеЕсли СНО = Перечисления.СистемыНалогообложения.УпрощеннаяДоход Тогда
		Код = 1;
	ИначеЕсли СНО = Перечисления.СистемыНалогообложения.УпрощеннаяДоходМинусРасход Тогда
		Код = 2;
	ИначеЕсли СНО = Перечисления.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход Тогда
		Код = 3;
	ИначеЕсли СНО = Перечисления.СистемыНалогообложения.ЕдиныйСельскохозяйственныйНалог Тогда
		Код = 4;
	ИначеЕсли СНО = Перечисления.СистемыНалогообложения.ПатентнаяСистемаНалогообложения Тогда
		Код = 5;
	КонецЕсли;
	Возврат Код;
КонецФункции

Процедура ПереформироватьПараметрыЧекаУниверсально(Ссылка, ВходныеПараметры, НастройкаПечатиЧеков)
	
	// Для решения проблемы при печати чеков со скидками, выводящими суммы за точность в 2 знака после запятой
	ПроконтролироватьСовпаденияСуммВТоварах(ВходныеПараметры.ПозицииЧека);
	
	Если ВходныеПараметры.ЭтоОказаниеУслуг Тогда
		Если НЕ ВходныеПараметры.УчетНДСНеИспользуется Тогда // Такие не должны использовать ККТ.
			Если Не НастройкаПечатиЧеков.ПустаяСсылка Тогда
				Если ВходныеПараметры.Свойство("СНО") Тогда
					Если ВходныеПараметры.СНО = Перечисления.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход Тогда	 
						Если НастройкаПечатиЧеков.ПравилоПечатиЧековЕНВД = Перечисления.ПравилаПечатиЧековЕНВД.НеФискальноОднойСтрокой Тогда
							ПараметрыЧекаНеФискальноСводноОднойСтрокой(Ссылка, ВходныеПараметры);
						ИначеЕсли НастройкаПечатиЧеков.ПравилоПечатиЧековЕНВД = Перечисления.ПравилаПечатиЧековЕНВД.НеФискальноМногострочно Тогда
							ПараметрыЧекаНеФискальноСводноМногострочно(Ссылка, ВходныеПараметры);
						Иначе
							ВходныеПараметры = Неопределено; // Очистим структуру параметров, т.к. чек печатать не требуется.
						КонецЕсли;
					Иначе
						ПараметрыЧекаФискальноДетально(Ссылка, ВходныеПараметры);	 
					КонецЕсли;
				Иначе
					// Сюда не должно попасть
					ВызватьИсключение ("Вызвана печать чека ККТ без заполненной СНО.");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПереформироватьТаблицуТоваров(Ссылка, ВходныеПараметры);	
		КонецЕсли;
	Иначе
		Если ВходныеПараметры.Свойство("СНО") Тогда
			ПараметрыЧекаФискальноПКОРКО(Ссылка, ВходныеПараметры);	 
		Иначе
			ПереформироватьТаблицуТоваров(Ссылка, ВходныеПараметры);
		КонецЕсли;	 
	КонецЕсли;
КонецПроцедуры

// Только для ПКО/РКО
Процедура ПараметрыЧекаФискальноПКОРКО(Ссылка, ВходныеПараметры) 
	
	ТаблицаНоменклатуры = ВходныеПараметры.ПозицииЧека;
	ТаблицаОплат = ВходныеПараметры.ТаблицаОплат;
	
	ЭтоВерсия120 = ВерсияФФД12ПоВходнымПараметрам(ВходныеПараметры);			
	
	МассивСтрокОписанияЧека = Новый Массив; 
	ШиринаЧековойЛенты = ПолучитьШиринуЧековойЛенты(ВходныеПараметры.ШиринаЧековойЛенты);
	
	Если ВходныеПараметры.ЭтоОказаниеУслуг Тогда
		//Ничего 
	Иначе
		МассивСтрокОписанияЧека = Новый Массив();
		
		Если ВходныеПараметры.Свойство("Заголовок") И ЗначениеЗаполнено(ВходныеПараметры.Заголовок) Тогда
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ВходныеПараметры.Заголовок, ШиринаЧековойЛенты)));
		КонецЕсли;
		
		ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено;
		ПлатежныйАгент = Неопределено;
		
		// РКО / ПКО
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.ФискальнаяСтрока	= Истина;
			СтрокаПозицииЧека.НомерСтрокиТовара = МассивСтрокОписанияЧека.Количество() + 1;
			
			СтрокаПозицииЧека.Наименование	= ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			СтрокаПозицииЧека.Количество	= ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			СтрокаПозицииЧека.Цена			= ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			СтрокаПозицииЧека.Сумма			= ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			СтрокаПозицииЧека.НомерСекции	= ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СтрокаПозицииЧека.СуммаНДС		= ТаблицаНоменклатуры[ИндексМассива][11].Значение;	
			СтрокаПозицииЧека.СтавкаНДС		= ТаблицаНоменклатуры[ИндексМассива][12].Значение;	

			СтрокаПозицииЧека.СуммаСкидок				= ТаблицаНоменклатуры[ИндексМассива][7].Значение;
			СтрокаПозицииЧека.ЦенаСоСкидками			= ТаблицаНоменклатуры[ИндексМассива][18].Значение; //ФФД 1.0.5
			СтрокаПозицииЧека.ПризнакСпособаРасчета		= ТаблицаНоменклатуры[ИндексМассива][19].Значение; //ФФД 1.0.5
			СтрокаПозицииЧека.ПризнакПредметаРасчета	= ТаблицаНоменклатуры[ИндексМассива][20].Значение; //ФФД 1.1	
			
			Номенклатура = ТаблицаНоменклатуры[ИндексМассива][21].Значение;
			СформироватьДанныеПоАгентскимУслугам(СтрокаПозицииЧека, ПлатежныйАгент, ЕстьОбщийПлатежныйАгентПоЧеку, Номенклатура); // Агентские услуги.
			
			МассивСтрокОписанияЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
		
		мТаблицаОплат = Новый Массив();
		Для каждого стр из ТаблицаОплат Цикл
			мТаблицаОплат.Добавить(Новый Структура("ТипОплаты, Сумма", стр.ТипОплаты, стр.Сумма));
		КонецЦикла;
		
		ЗаполнитьДанныеПоАгентскимУслугам(ВходныеПараметры, ПлатежныйАгент, ЕстьОбщийПлатежныйАгентПоЧеку, ЭтоВерсия120); // Агентские услуги.
	КонецЕсли;
	
	//Затираем параметры в старом формате и заменяем на новый формат представления данных
	ВходныеПараметры.ПозицииЧека.Очистить();
	ВходныеПараметры.ПозицииЧека = МассивСтрокОписанияЧека;
	
	ВходныеПараметры.ТаблицаОплат.Очистить();
	ВходныеПараметры.ТаблицаОплат = мТаблицаОплат;
КонецПроцедуры


// Только для Оказания услуг 

//////////////////////Нефискально+///////////////////////////////////////////////

Процедура ПараметрыЧекаНеФискальноСводноОднойСтрокой(Ссылка, ВходныеПараметры) 
	ТаблицаНоменклатуры = ВходныеПараметры.ПозицииЧека;
	ТаблицаОплат = ВходныеПараметры.ТаблицаОплат;
	
	МассивСтрокОписанияЧека = Новый Массив;
	ШиринаЧековойЛенты = ПолучитьШиринуЧековойЛенты(ВходныеПараметры.ШиринаЧековойЛенты);
		
	Если ВходныеПараметры.ЭтоОказаниеУслуг Тогда
		
		Если ВходныеПараметры.Свойство("Заголовок") И ЗначениеЗаполнено(ВходныеПараметры.Заголовок) Тогда
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ВходныеПараметры.Заголовок, ШиринаЧековойЛенты)));
		КонецЕсли;
		
		//От номенклатуры оставляем только строку с общей суммой к оплате
		ГоризонтальныйРазделитель = Лев("--------------------------------------------------------------------------",ШиринаЧековойЛенты);
		ФорматнаяСтрокаСуммы		= "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
		ФорматнаяСтрокаКоличества	= "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=";
		нпп = 0;
		
		ДобавитьОписаниеШапкиНефискальногоЧека(МассивСтрокОписанияЧека, ВходныеПараметры, ШиринаЧековойЛенты);
		
		ВсегоСумма = 0;	
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;			 
			ВсегоСумма = ВсегоСумма + Сумма;
		КонецЦикла;
		
		Если ВходныеПараметры.Свойство("НомерДокумента") Тогда
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","Оплата по документу №" + ВходныеПараметры.НомерДокумента));			 
		КонецЕсли;
		
		РежимПечатиДополнительнойРасшифровкиПлатежа = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМВариантПечатиДополнительнойРасшифровкиПлатежа");
		ПечатьДополнительнойРасшифровкиПлатежа = ?(РежимПечатиДополнительнойРасшифровкиПлатежа = 0, Ложь, Истина);
		
		РасшифровкаПлатежа = ВходныеПараметры.РасшифровкаПлатежа;
		Бонусами = ВходныеПараметры.ИтогБонусов;
		ГоризонтальныйРазделительРОВНО = Лев("==========================================================================",ШиринаЧековойЛенты);
		
		Если ПечатьДополнительнойРасшифровкиПлатежа И РежимПечатиДополнительнойРасшифровкиПлатежа = 2 Тогда
			ПечатьДополнительнойРасшифровкиПлатежа = Ложь;
			Если Бонусами <> 0 Тогда
				ПечатьДополнительнойРасшифровкиПлатежа = Истина;
			Иначе	
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ (СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Наличными
						ИЛИ СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Безналичные)
					Тогда
						ПечатьДополнительнойРасшифровкиПлатежа = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			Если Бонусами<> 0 Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","Списано бонусов: " + Формат(Бонусами,"ЧДЦ=2")));
			КонецЕсли;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ПолучитьСтрокуЛевоПраво(НСтр("ru = 'ИТОГО К ОПЛАТЕ:'"), Формат(ВсегоСумма,ФорматнаяСтрокаСуммы), ШиринаЧековойЛенты)));
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделитель));
		КонецЕсли;
	
		Если ВходныеПараметры.Свойство("КлиентДокумента") И ЗначениеЗаполнено(ВходныеПараметры.КлиентДокумента)
			И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМПродажаПечататьФИОКлиента")
		Тогда
		
			Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","	"));
			КонецЕсли;
			
			ТекстФИОКлиена = НСтр("ru = 'Принято от: '") + ОбщегоНазначения.ФамилияИнициалыФизЛица(ВходныеПараметры.КлиентДокумента);
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ТекстФИОКлиена,ШиринаЧековойЛенты)));
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",""));
			
				Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
				КонецЕсли;

		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			// Нефискальный вывод нашей расшифровки платежа (с сертификатами и депозитами).
			Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				Если ТипЗнч(СтрокаРасшифровки) = Тип("Строка") Тогда
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",СтрокаРасшифровки));
				ИначеЕсли ТипЗнч(СтрокаРасшифровки) = Тип("Число") Тогда
					ФорматнаяСтрокаСуммы = "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо("= " + Формат(СтрокаРасшифровки,ФорматнаяСтрокаСуммы),ШиринаЧековойЛенты)));			
				Иначе
					// Фискальная строка оплаты по налу/безналу перенеслась в новый формат в цикле ниже
					ТекстСтроки = ВыровнятьСтрокуВправо(Строка(СтрокаРасшифровки.ВидОплаты) + " = " + Формат(СтрокаРасшифровки.Сумма,ФорматнаяСтрокаСуммы),ШиринаЧековойЛенты);
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока", ТекстСтроки));
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
			
		КонецЕсли;
	Иначе
		//Сюда не должны попасть
	КонецЕсли;
	
	ДобавитьОписаниеПодвалаНефискальногоЧека(МассивСтрокОписанияЧека, ВходныеПараметры, ШиринаЧековойЛенты);
	
	//Затираем параметры в старом формате и заменяем на новый формат представления данных
	ВходныеПараметры.ПозицииЧека.Очистить();
	ВходныеПараметры.ПозицииЧека = МассивСтрокОписанияЧека;
	
	ВходныеПараметры.ТаблицаОплат.Очистить();
	Текст = "";
	Для каждого стр из МассивСтрокОписанияЧека Цикл
		Текст = Текст + стр.Текст + Символы.ПС;
	КонецЦикла;
	
	ВходныеПараметры.Вставить("Текст", Текст);
	//Укажем, что чек должен печататься просто как нефискальный текст
	ВходныеПараметры.Вставить("ЭтоНефискальныйЧек", Истина);
КонецПроцедуры

Процедура ПараметрыЧекаНеФискальноСводноМногострочно(Ссылка, ВходныеПараметры) 
	ТаблицаНоменклатуры = ВходныеПараметры.ПозицииЧека;
	ТаблицаОплат = ВходныеПараметры.ТаблицаОплат;
	
	МассивСтрокОписанияЧека = Новый Массив;
	ШиринаЧековойЛенты = ПолучитьШиринуЧековойЛенты(ВходныеПараметры.ШиринаЧековойЛенты);
	
	Если ВходныеПараметры.ЭтоОказаниеУслуг Тогда
		
		Если ВходныеПараметры.Свойство("Заголовок") И ЗначениеЗаполнено(ВходныеПараметры.Заголовок) Тогда
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ВходныеПараметры.Заголовок, ШиринаЧековойЛенты)));
		КонецЕсли;
		
		//От номенклатуры оставляем только строку с общей суммой к оплате
		ГоризонтальныйРазделитель = Лев("--------------------------------------------------------------------------",ШиринаЧековойЛенты);
		ФорматнаяСтрокаСуммы		= "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
		ФорматнаяСтрокаКоличества	= "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=";
		нпп = 0;
		
		ДобавитьОписаниеШапкиНефискальногоЧека(МассивСтрокОписанияЧека, ВходныеПараметры, ШиринаЧековойЛенты);
		
		МаксДлинаЦены	= 0;
		МаксДлинаСуммы	= 0;
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			СуммаСкидки = ТаблицаНоменклатуры[ИндексМассива][7].Значение;
			
			Длина = СтрДлина(Формат(Цена,ФорматнаяСтрокаСуммы));
			Если Длина>МаксДлинаЦены Тогда
				МаксДлинаЦены = Длина;
			КонецЕсли;
			
			Длина = СтрДлина(Формат(Сумма + СуммаСкидки,ФорматнаяСтрокаСуммы));
			Если Длина>МаксДлинаСуммы Тогда
				МаксДлинаСуммы = Длина;
			КонецЕсли;
			
		КонецЦикла;
		
		СуммыНДС = Новый Структура();
		ВсегоСумма = 0;	
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			СуммаСкидки   = ТаблицаНоменклатуры[ИндексМассива][7].Значение;
			ПроцентСкидки = ТаблицаНоменклатуры[ИндексМассива][8].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СуммаНДС      = ТаблицаНоменклатуры[ИндексМассива][11].Значение;
			СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;
			Сертификат    = ТаблицаНоменклатуры[ИндексМассива][17].Значение;    
			
			ВсегоСумма = ВсегоСумма + Сумма;
			
			нпп = нпп + 1;
			// Формирование наименования
			Наименование = Формат(нпп,"ЧГ=") + ": " + Наименование + "";
			
			// Сумма по абонементу
			Если ЗначениеЗаполнено(Сертификат) Тогда
				Цена = 0;
				Сумма = 0;
				ПроцентСкидки = 0;
			КонецЕсли;
			
			// Разбивка наименования на строки шириной не более ширины ленты.
			ТекНаименование = Наименование;
			Пока СтрДлина(ТекНаименование) > ШиринаЧековойЛенты Цикл
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ТекНаименование,ШиринаЧековойЛенты)));	
				ТекНаименование = Прав(ТекНаименование,СтрДлина(ТекНаименование)-ШиринаЧековойЛенты);
			КонецЦикла;
			Если СтрДлина(ТекНаименование) <> 0 Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ТекНаименование));
			КонецЕсли;
			
			СтрокаСтоимость	= Формат(Количество,ФорматнаяСтрокаКоличества) + " * "
			+ ВыровнятьСтрокуВправо(Формат(Цена,ФорматнаяСтрокаСуммы),МаксДлинаЦены) + " = "
			+ ВыровнятьСтрокуВправо(Формат(Сумма + СуммаСкидки ,ФорматнаяСтрокаСуммы),МаксДлинаСуммы);				  
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо(СтрокаСтоимость,ШиринаЧековойЛенты)));
			
			Если СуммаСкидки <> 0 Тогда
				СтрокаСкидка = НСтр("ru = '(с учетом скидки '") + ПроцентСкидки + "%)";
				СтрокаСкидкаСумма = "   " + Формат(Сумма,ФорматнаяСтрокаСуммы) ;
				
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо(СтрокаСкидка + СтрокаСкидкаСумма, ШиринаЧековойЛенты)));	
			КонецЕсли;
			
		КонецЦикла;
				
		РежимПечатиДополнительнойРасшифровкиПлатежа = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМВариантПечатиДополнительнойРасшифровкиПлатежа");
		ПечатьДополнительнойРасшифровкиПлатежа = ?(РежимПечатиДополнительнойРасшифровкиПлатежа = 0, Ложь, Истина);
		
		РасшифровкаПлатежа = ВходныеПараметры.РасшифровкаПлатежа;
		Бонусами = ВходныеПараметры.ИтогБонусов;
		ГоризонтальныйРазделительРОВНО = Лев("==========================================================================",ШиринаЧековойЛенты);
		
		Если ПечатьДополнительнойРасшифровкиПлатежа И РежимПечатиДополнительнойРасшифровкиПлатежа = 2 Тогда
			ПечатьДополнительнойРасшифровкиПлатежа = Ложь;
			Если Бонусами <> 0 Тогда
				ПечатьДополнительнойРасшифровкиПлатежа = Истина;
			Иначе	
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ (СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Наличными
						ИЛИ СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Безналичные)
					Тогда
						ПечатьДополнительнойРасшифровкиПлатежа = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			Если Бонусами<> 0 Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","Списано бонусов: " + Формат(Бонусами,"ЧДЦ=2")));
			КонецЕсли;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ПолучитьСтрокуЛевоПраво(НСтр("ru = 'ИТОГО К ОПЛАТЕ:'"), Формат(ВсегоСумма,ФорматнаяСтрокаСуммы), ШиринаЧековойЛенты)));
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделитель));
		КонецЕсли;
	
		Если ВходныеПараметры.Свойство("КлиентДокумента") И ЗначениеЗаполнено(ВходныеПараметры.КлиентДокумента)
			И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМПродажаПечататьФИОКлиента")
		Тогда
		
			Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","	"));
			КонецЕсли;
			
			ТекстФИОКлиена = НСтр("ru = 'Принято от: '") + ОбщегоНазначения.ФамилияИнициалыФизЛица(ВходныеПараметры.КлиентДокумента);
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ТекстФИОКлиена,ШиринаЧековойЛенты)));
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",""));
			
				Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
				КонецЕсли;

		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			// Нефискальный вывод нашей расшифровки платежа (с сертификатами и депозитами).
			Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				Если ТипЗнч(СтрокаРасшифровки) = Тип("Строка") Тогда
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",СтрокаРасшифровки));
				ИначеЕсли ТипЗнч(СтрокаРасшифровки) = Тип("Число") Тогда
					ФорматнаяСтрокаСуммы = "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо("= " + Формат(СтрокаРасшифровки,ФорматнаяСтрокаСуммы),ШиринаЧековойЛенты)));			
				Иначе
					// Фискальная строка оплаты по налу/безналу перенеслась в новый формат в цикле ниже
					ТекстСтроки = ВыровнятьСтрокуВправо(Строка(СтрокаРасшифровки.ВидОплаты) + " = " + Формат(СтрокаРасшифровки.Сумма,ФорматнаяСтрокаСуммы),ШиринаЧековойЛенты);
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока", ТекстСтроки));
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
			
		КонецЕсли;
	Иначе
		//Сюда не должны попасть?
	КонецЕсли;
	
	ДобавитьОписаниеПодвалаНефискальногоЧека(МассивСтрокОписанияЧека, ВходныеПараметры, ШиринаЧековойЛенты);
	
	//Затираем параметры в старом формате и заменяем на новый формат представления данных
	ВходныеПараметры.ПозицииЧека.Очистить();
	ВходныеПараметры.ПозицииЧека = МассивСтрокОписанияЧека;
	
	ВходныеПараметры.ТаблицаОплат.Очистить();
	Текст = ""; 
	Для каждого стр из МассивСтрокОписанияЧека Цикл
		Текст = Текст + стр.Текст + Символы.ПС;
	КонецЦикла;
	
	ВходныеПараметры.Вставить("Текст", Текст);
	
	//Укажем, что чек должен печататься просто как нефискальный текст
	ВходныеПараметры.Вставить("ЭтоНефискальныйЧек", Истина);
КонецПроцедуры

//////////////////////Нефискально-///////////////////////////////////////////////

//////////////////////Фискально+///////////////////////////////////////////////

Процедура ПараметрыЧекаФискальноДетально(Ссылка, ВходныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНоменклатуры = ВходныеПараметры.ПозицииЧека;
	ТаблицаОплат = ВходныеПараметры.ТаблицаОплат;
	
	ЭтоВерсия120 = ВерсияФФД12ПоВходнымПараметрам(ВходныеПараметры);
	
	ПроконтролироватьСовпаденияСуммВТоварах(ТаблицаНоменклатуры);
	
	МассивСтрокОписанияЧека = Новый Массив;
	ШиринаЧековойЛенты = ПолучитьШиринуЧековойЛенты(ВходныеПараметры.ШиринаЧековойЛенты);
	
	Если ВходныеПараметры.ЭтоОказаниеУслуг Тогда
		
		ЧекСодержитПродажуМаркированногоЛекарства = Ложь;
		
		// Оплаты ЭС НСПК: вычисляем, есть ли в чеке.
		ЕстьОплатаНСПК = Ложь;
		ВидОплатыНСПК = РаботаСДокументамиСервер.ВидОплатыЭСНСПК_ВнутреннееИмя();
		Для Каждого СтрокаРасшифровки Из ВходныеПараметры.РасшифровкаПлатежа Цикл
			Если СтрокаРасшифровки.ВидОплаты = ВидОплатыНСПК Тогда
				ЕстьОплатаНСПК = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Заголовок чека
		Если ВходныеПараметры.Свойство("Заголовок") И ЗначениеЗаполнено(ВходныеПараметры.Заголовок) Тогда
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ВходныеПараметры.Заголовок, ШиринаЧековойЛенты)));
		КонецЕсли;
		
		ВсегоСумма = 0;
		ГоризонтальныйРазделитель = Лев("--------------------------------------------------------------------------",ШиринаЧековойЛенты);
		ФорматнаяСтрокаСуммы		= "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
		ФорматнаяСтрокаКоличества	= "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=";
		
		СуммыНДС = Новый Структура();
		
		ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено;
		ПлатежныйАгент = Неопределено;
		
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.ФискальнаяСтрока	= Истина;
			СтрокаПозицииЧека.НомерСтрокиТовара	= МассивСтрокОписанияЧека.Количество() + 1;
			
			СтрокаПозицииЧека.Наименование	= ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			СтрокаПозицииЧека.Количество	= ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			СтрокаПозицииЧека.Цена			= ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			СтрокаПозицииЧека.Сумма			= ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			СтрокаПозицииЧека.НомерСекции	= ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СтрокаПозицииЧека.СуммаНДС		= ТаблицаНоменклатуры[ИндексМассива][11].Значение;
			СтрокаПозицииЧека.СтавкаНДС		= ТаблицаНоменклатуры[ИндексМассива][12].Значение;

			СтрокаПозицииЧека.СуммаСкидок				= ТаблицаНоменклатуры[ИндексМассива][7].Значение;
			СтрокаПозицииЧека.ЦенаСоСкидками			= ТаблицаНоменклатуры[ИндексМассива][18].Значение; // ФФД 1.0.5
			СтрокаПозицииЧека.ПризнакСпособаРасчета		= ТаблицаНоменклатуры[ИндексМассива][19].Значение; // ФФД 1.0.5
			СтрокаПозицииЧека.ПризнакПредметаРасчета	= ТаблицаНоменклатуры[ИндексМассива][20].Значение; // ФФД 1.1	

			ВсегоСумма = ВсегоСумма + СтрокаПозицииЧека.Сумма;
			
			Если ТаблицаНоменклатуры[ИндексМассива].Количество() > 21 Тогда
				
				// ФФД 1.2, тег 1208 Мера количества (MeasureOfQuantity)
				МераКоличества = ТаблицаНоменклатуры[ИндексМассива][23].Значение;
				СтрокаПозицииЧека.КодЕдиницыИзмерения = РаботаСТорговымОборудованием.КодЕдиницыИзмеренияПоМереКоличестваПредметаРасчета(МераКоличества);
				
				// ФФД 1.2 Маркированные товары
				Штрихкод = ТаблицаНоменклатуры[ИндексМассива][21].Значение;
				ДанныеШтрихкода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Штрихкод);
				
				Если СтрДлина(Штрихкод) > 0 И ДанныеШтрихкода.Разобран И ДанныеШтрихкода.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1 Тогда
					
					// Необходимо для получения base64 кода с тегом GS
					ШтрихкодРазобранный = ИнтеграцияМДЛПКлиентСервер.РазобратьСтрокуШтрихкодаГС1(Штрихкод);
					СтрокаПозицииЧека.ШтрихкодBase64 = ШтрихкодРазобранный.ШтрихкодBase64;
					
					ДанныеКодаТоварнойНоменклатуры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеКодаТоварнойНоменклатуры();
					ДанныеКодаТоварнойНоменклатуры.ТипМаркировки							= Перечисления.ТипыМаркировкиККТ.ЛекарственныеПрепараты;	
					ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы	= ДанныеШтрихкода.GTIN;
					ДанныеКодаТоварнойНоменклатуры.СерийныйНомер							= ДанныеШтрихкода.СерийныйНомер;
					ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара						= ДанныеШтрихкода.РеквизитКодаТовара;
					//ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак			= ""
					
					// Формирование тэга 1163, для ФФД 1.2
					//ДанныеКодаТоварнойНоменклатуры.ТипКодаТовара							= ; // Строка,Необязательно - Таблица 118
					//ДанныеКодаТоварнойНоменклатуры.ЗначениеКодаТовара						= ; // Строка,Необязательно - Значение кода товара в Base64 (Таблица 118)
					
					СтрокаПозицииЧека.КонтрольнаяМарка = СтрокаПозицииЧека.ШтрихкодBase64;
					СтрокаПозицииЧека.ШтрихКод = Штрихкод;
					СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры = ДанныеКодаТоварнойНоменклатуры;	
					
					// ФФД 1.2.Маркировка
					Если ТаблицаНоменклатуры[ИндексМассива][26].Значение = "МаркированноеЛекарство" Тогда	
						СтрокаПозицииЧека.ДополнительныйРеквизит = "mdlp";						
						ЧекСодержитПродажуМаркированногоЛекарства = Истина;
					ИначеЕсли ТаблицаНоменклатуры[ИндексМассива][26].Значение = "Прочее" Тогда 
						ЧекСодержитПродажуМаркированногоПрочегоТовара = Истина;	
					КонецЕсли;
					
					// Дробное количество (штучная продажа из потребительской упаковки).
					Числитель = ТаблицаНоменклатуры[ИндексМассива][24].Значение;
					Знаменатель = ТаблицаНоменклатуры[ИндексМассива][25].Значение; 
					Если ЧекСодержитПродажуМаркированногоЛекарства
						И ЗначениеЗаполнено(Числитель)
						И ЗначениеЗаполнено(Знаменатель)
						И Не Числитель = Знаменатель 	// Если числитель = знаменатель - это полная продажа упаковки.
					Тогда
						ДробноеКоличество = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДробноеКоличество();
						ДробноеКоличество.Числитель			= Числитель;
						ДробноеКоличество.Знаменатель		= Знаменатель;
						СтрокаПозицииЧека.ДробноеКоличество = ДробноеКоличество;	
					КонецЕсли;

					// Рецепт, по которому продано лекарство.
					Если ЧекСодержитПродажуМаркированногоЛекарства И ТаблицаНоменклатуры[ИндексМассива][28].Значение <> Неопределено Тогда
						СтрокаПозицииЧека.ОтраслевойРеквизит = ТаблицаНоменклатуры[ИндексМассива][28].Значение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Добавляем код ТРУ в чек, если предполагается для строки чека.
			Если ЕстьОплатаНСПК Тогда
				ДобавитьКодТРУвСтрокуЧека(МассивСтрокОписанияЧека, ТаблицаНоменклатуры[ИндексМассива], ВходныеПараметры);
			КонецЕсли;
	
			Номенклатура = ТаблицаНоменклатуры[ИндексМассива][29].Значение;
			СформироватьДанныеПоАгентскимУслугам(СтрокаПозицииЧека, ПлатежныйАгент, ЕстьОбщийПлатежныйАгентПоЧеку, Номенклатура); // Агентские услуги.
			
			// Фискально добавляем номенклатурные позиции в таблицу товаров
			МассивСтрокОписанияЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
		
		//// МДЛП
		//Если ЧекСодержитПродажуМаркированногоЛекарства И ВходныеПараметры.Свойство("Склад") Тогда
		//	МодульИнтеграцияМДЛПМедицина = ДопСерверныеФункции.ОбщийМодуль("ИнтеграцияМДЛПМедицина_БИТ");
		//	Если МодульИнтеграцияМДЛПМедицина <> Неопределено Тогда
		//		РезультатПоиска = МодульИнтеграцияМДЛПМедицина.ОрганизацияМестоДеятельностиОбъекта(ВходныеПараметры.Организация, ВходныеПараметры.Склад);
		//		Если РезультатПоиска <> Неопределено И ЗначениеЗаполнено(РезультатПоиска.МестоДеятельности) Тогда
		//			ДополнительныйРеквизитПользователя = Новый Структура("Наименование, Значение");
		//			ДополнительныйРеквизитПользователя.Наименование	= "mdlp";
		//			ДополнительныйРеквизитПользователя.Значение		= "sid" + Строка(РезультатПоиска.Местодеятельности.Идентификатор) + "&";
		//			ВходныеПараметры.Вставить("ДополнительныйРеквизитПользователя", ДополнительныйРеквизитПользователя);
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
		РежимПечатиДополнительнойРасшифровкиПлатежа = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМВариантПечатиДополнительнойРасшифровкиПлатежа");
		ПечатьДополнительнойРасшифровкиПлатежа = ?(РежимПечатиДополнительнойРасшифровкиПлатежа = 0, Ложь, Истина);
		
		РасшифровкаПлатежа = ВходныеПараметры.РасшифровкаПлатежа;
		Бонусами = ВходныеПараметры.ИтогБонусов;
		ГоризонтальныйРазделительРОВНО = Лев("==========================================================================",ШиринаЧековойЛенты);
		
		Если ПечатьДополнительнойРасшифровкиПлатежа И РежимПечатиДополнительнойРасшифровкиПлатежа = 2 Тогда
			ПечатьДополнительнойРасшифровкиПлатежа = Ложь;
			Если Бонусами <> 0 Тогда
				ПечатьДополнительнойРасшифровкиПлатежа = Истина;
			Иначе	
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ (СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Наличными
						ИЛИ СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Безналичные)
					Тогда
						ПечатьДополнительнойРасшифровкиПлатежа = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","	"));
			
			Если Бонусами<> 0 Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","Списано бонусов: " + Формат(Бонусами,"ЧДЦ=2")));
			КонецЕсли;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ПолучитьСтрокуЛевоПраво(НСтр("ru = 'ИТОГО К ОПЛАТЕ:'"), Формат(ВсегоСумма,ФорматнаяСтрокаСуммы), ШиринаЧековойЛенты)));
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделитель));
		КонецЕсли;
		ПечатьДополнительнойРасшифровкиПлатежа = ПечатьДополнительнойРасшифровкиПлатежа Или ЕстьОплатаНСПК; // При НСПК всегда выводим расшифровку оплаты.
	
		Если ВходныеПараметры.Свойство("КлиентДокумента") И ЗначениеЗаполнено(ВходныеПараметры.КлиентДокумента)
			И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМПродажаПечататьФИОКлиента")
		Тогда
		
			Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","	"));
			КонецЕсли;
			
			ТекстФИОКлиена = НСтр("ru = 'Принято от: '") + ОбщегоНазначения.ФамилияИнициалыФизЛица(ВходныеПараметры.КлиентДокумента);
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ТекстФИОКлиена,ШиринаЧековойЛенты)));
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",""));
			
				Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
				КонецЕсли;

		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			// Нефискальный вывод нашей расшифровки платежа (с сертификатами и депозитами).
			Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				Если ТипЗнч(СтрокаРасшифровки) = Тип("Строка") Тогда
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",СтрокаРасшифровки));
				ИначеЕсли ТипЗнч(СтрокаРасшифровки) = Тип("Число") Тогда
					ФорматнаяСтрокаСуммы = "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо("= " + Формат(СтрокаРасшифровки,ФорматнаяСтрокаСуммы),ШиринаЧековойЛенты)));			
				Иначе
					// Фискальная строка оплаты по налу/безналу перенеслась в новый формат в цикле ниже
					ТекстСтроки = ВыровнятьСтрокуВправо(Строка(СтрокаРасшифровки.ВидОплаты) + " = " + Формат(СтрокаРасшифровки.Сумма,ФорматнаяСтрокаСуммы),ШиринаЧековойЛенты);
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока", ТекстСтроки));
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
		КонецЕсли;
	
		мТаблицаОплат = Новый Массив();
		Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
			мТаблицаОплат.Добавить(Новый Структура("ТипОплаты, Сумма", СтрокаОплаты.ТипОплаты, СтрокаОплаты.Сумма));
		КонецЦикла;
		
		ЗаполнитьДанныеПоАгентскимУслугам(ВходныеПараметры, ПлатежныйАгент, ЕстьОбщийПлатежныйАгентПоЧеку, ЭтоВерсия120); // Агентские услуги.
	Иначе
		// Не должны попасть
	КонецЕсли;
	
	//Затираем параметры в старом формате и заменяем на новый формат представления данных
	ВходныеПараметры.ПозицииЧека.Очистить();
	ВходныеПараметры.ПозицииЧека = МассивСтрокОписанияЧека;
	
	ВходныеПараметры.ТаблицаОплат.Очистить();
	ВходныеПараметры.ТаблицаОплат = мТаблицаОплат;
	
КонецПроцедуры

Процедура ДобавитьКодТРУвСтрокуЧека(МассивСтрокОписанияЧека, ПозицияЧека, ВходныеПараметры)
	
	// Добавляем код ТРУ в чек
	Если ЗначениеЗаполнено(ПозицияЧека[27].Значение) Тогда
		// Нефискальная строка
		СтрокаТекста = "ТРУ (КОД):" + ПозицияЧека[27].Значение; 
		ТекстоваяСтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(СтрокаТекста);
		МассивСтрокОписанияЧека.Добавить(ТекстоваяСтрокаЧека);
	КонецЕсли;
	
КонецПроцедуры

#Область АгенскиеДоговоры

Функция РеквизитыПлатежногоАгентаПоНоменклатуре(Номенклатура) Экспорт
		
	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Номенклатура.КонтрагентПринципал) Тогда						
		Возврат РеквизитыПлатежногоАгента(Номенклатура.КонтрагентПринципал);		
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

Функция РеквизитыПлатежногоАгента(ПлатежныйАгент)
	
	Результат = Новый Структура;
	
	ДанныеПоставщика = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика();
	//ДанныеПоставщика.Телефон      = НомерТелефона;
	ДанныеКонтрагент = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПлатежныйАгент, "НаименованиеПолное, ИНН");
	
	ДанныеПоставщика.Наименование = ДанныеКонтрагент.НаименованиеПолное;
	ДанныеПоставщика.ИНН          = ДанныеКонтрагент.ИНН;
	Результат.Вставить("ДанныеПоставщика", ДанныеПоставщика);
	Результат.Вставить("КонтрагентПринципал", ПлатежныйАгент); 
	ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент");
	
	Результат.Вставить("ПризнакАгента", ПризнакАгента);
	Результат.Вставить("ПризнакАгентаПоПредметуРасчета", ПризнакАгента);
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияФФД12ПоВходнымПараметрам(ВходныеПараметры)
	
	Попытка 
		ПараметрыРегистрации = ВходныеПараметры.ПодключаемоеОборудование.ПараметрыРегистрации;
		
		ВерсияФФДККТ = ПараметрыРегистрации.Найти("ВерсияФФДККТ");
		ВерсияФФДФН = ПараметрыРегистрации.Найти("ВерсияФФДФН");
		
		Возврат ВерсияФФДККТ.ЗначениеПараметра >= "1.2" И ВерсияФФДФН.ЗначениеПараметра >= "1.2";
				
	Исключение
		Возврат Ложь;			
	КонецПопытки;
	
КонецФункции

Процедура СформироватьДанныеПоАгентскимУслугам(СтрокаПозицииЧека, ПлатежныйАгент, ЕстьОбщийПлатежныйАгентПоЧеку, Номенклатура)
	
	РеквизитыПлатАгента = РеквизитыПлатежногоАгентаПоНоменклатуре(Номенклатура);
	
	Если РеквизитыПлатАгента.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, РеквизитыПлатАгента);
		
		// ФФД 1.0.5 и ФФД 1.1 для вынесения в шапку
		Если ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено Тогда
			ЕстьОбщийПлатежныйАгентПоЧеку = Истина;
			ПлатежныйАгент = РеквизитыПлатАгента.КонтрагентПринципал;
		ИначеЕсли ЕстьОбщийПлатежныйАгентПоЧеку Тогда
			Если ПлатежныйАгент <> РеквизитыПлатАгента.КонтрагентПринципал Тогда
				ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
			КонецЕсли;
		КонецЕсли;
		// ФФД 1.0.5 и ФФД 1.1 для вынесения в шапку
	ИначеЕсли ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено 
		  Или ЕстьОбщийПлатежныйАгентПоЧеку = Истина
	Тогда
		ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоАгентскимУслугам(ВходныеПараметры, ПлатежныйАгент, ЕстьОбщийПлатежныйАгентПоЧеку, ЭтоВерсия120);
	
	// Договор агента устанавливаем только если он совпадает в шапке и по строкам, 
	// или в шапке не задан а по строкам одинаковый
	// В версии ФФД 1.2 передача комитента в шапке была упразднена
	Если Не ЭтоВерсия120 Тогда
		Если ЕстьОбщийПлатежныйАгентПоЧеку = Истина Тогда
			СтруктураРеквизитов = РеквизитыПлатежногоАгента(ПлатежныйАгент);
			ЗаполнитьЗначенияСвойств(ВходныеПараметры, СтруктураРеквизитов, "ДанныеПоставщика, ПризнакАгента");
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////Фискально-///////////////////////////////////////////////

Процедура ДобавитьОписаниеШапкиНефискальногоЧека(МассивСтрокОписанияЧека, ВходныеПараметры, ШиринаЧековойЛенты)
	ГоризонтальныйРазделитель = Лев("--------------------------------------------------------------------------",ШиринаЧековойЛенты);
	Если ВходныеПараметры.Свойство("ДанныеФилиала") Тогда
		ДанныеФилиала = ВходныеПараметры.ДанныеФилиала;
		ИНН					= ДанныеФилиала.ИНН;
		КПП					= ДанныеФилиала.КПП;
		Кассир				= ДанныеФилиала.Кассир;
		НазваниеОрганизации	= ДанныеФилиала.НазваниеОрганизации;
		
		МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",НазваниеОрганизации));
		МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","ИНН " + ИНН));
		МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","КПП " + КПП));
		МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","Кассир: " + Кассир));
		МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","Дата: " + Формат(ТекущаяДата(),"ДЛФ=DT")));
		МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделитель));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеПодвалаНефискальногоЧека(МассивСтрокОписанияЧека, ВходныеПараметры, ШиринаЧековойЛенты)
	ГоризонтальныйРазделитель = Лев("--------------------------------------------------------------------------",ШиринаЧековойЛенты);
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойЭкземпляра

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре Фискальные операции
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  Запись - РегистрСведенийЗапись.ФискальныеОперации - Запись фискальные операции.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ЭкземплярПлатежныеОперацииПриСозданииНаСервере(Запись, ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойСписка

// Дополнительные переопределяемые действия с управляемой формой в Список платежные операции
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Параметры - Структура - Параметры операции
//  Отказ - Булево - Отказ создания.
//  СтандартнаяОбработка - Булево - Стандартная обработка.
//
Процедура СписокПлатежныеОперацииПриСозданииНаСервере(ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти 

#Область РаботаСФормойПанельАдминистрирования

// Дополнительные переопределяемые действия с управляемой формой в Панели администрирования БПО
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ПанельАдминистрированияПриСозданииНаСервере(Форма, Отказ, Параметры, СтандартнаяОбработка) Экспорт
	

	
КонецПроцедуры

// Дополнительная настройка доступности при изменении реквизита формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  РеквизитПутьКДанным - Строка
//
Процедура ПанельАдминистрированияУстановкаДоступности(Форма, РеквизитПутьКДанным) Экспорт
	

	
КонецПроцедуры

// Позволяет заполнить пользовательские команды на Панели администрирования
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Команды - ТаблицаЗначений:
//   * Идентификатор - Строка
//   * Представление - Строка
//   * Подсказка - Строка
//   * ГруппаФормы - Неопределено, 
//                 - ГруппаФормы
//   * Важность - Строка
//   * Порядок - Число
//   * ФункциональныеОпции - Строка
//   * Менеджер - Строка
//   * Обработчик - Строка
//   * ДополнительныеПараметры - Структура
//   * ИмяФормы - Строка
//   * ПараметрыФормы - Структура
//                    - Неопределено
//   * ИмяПараметраФормы - Строка
//
Процедура ПриЗаполненииКомандПанелиАдминистрирования(Форма, Команды) Экспорт
	

	
КонецПроцедуры

#КонецОбласти 

#Область ОчередьФискальныхЧеков

// Завершение фискализация чека в очереди
//
// Параметры:
//  ИдентификаторФискальнойЗаписи - Строка - Идентификатор фискальной записи
//  ПараметрыФискализации - Структура - Параметры операции
//  ОборудованиеККТ - СправочникСсылка.ПодключаемоеОборудование -
//  РезультатФискализации - Структура - Результат Фискализации
//  РезультатВыполненияПакетнойОперации - Структура -
//    * Результат - Булево - Результат выполнения пакета операций.
//    * ОписаниеОшибки - ИнформацияОбОшибке - Описание ошибки выполнения пакета операции.
//    * РезультатВыполненияЭквайринговойОперации - Структура - 
//                                   См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//    * РезультатФискализацииЧека - Структура - 
//                                   См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//    * РезультатФискализацииЧекаВыдачи - Структура - 
//                                   См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//    * РезультатФискализацииЧекаКоррекции - Структура - 
//                                   См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//    * РезультатАварийнойОтменыОперации - Структура - 
//                                   См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//    * ПараметрыЭквайринговойОперации - Структура - структура для передачи данных в пакетной операции
//                                   См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков()
//    * ПараметрыПродажаСВыдачейНаличных - Структура - структура для передачи данных в пакетной операции
//                                   См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков()
Процедура ФискализацияЧекаВОчереди(ИдентификаторФискальнойЗаписи, ПараметрыФискализации, ОборудованиеККТ, РезультатФискализации, РезультатВыполненияПакетнойОперации) Экспорт
	
КонецПроцедуры

// Завершение фискализация чека в очереди
//
// Параметры:
//  РеквизитыЧека - Структура - Данные документа основания.
//  СтатусДокументаИзменен - Булево - признак изменения статуса документа.
//
Процедура ПроверитьСтатусДокументаОснования(РеквизитыЧека, СтатусДокументаИзменен) Экспорт
	
КонецПроцедуры

Функция ПолучитьНастройкуПечатиЧековФилиала(Филиал = Неопределено, ВернутьСтруктуру = Ложь) Экспорт
	
	НастройкаПечатиЧековСсылка = Справочники.НастройкиПечатиЧеков.ПустаяСсылка();	
	Если ЗначениеЗаполнено(Филиал) И ЗначениеЗаполнено(Филиал.НастройкаПечатиЧеков) Тогда 
		НастройкаПечатиЧековСсылка = Филиал.НастройкаПечатиЧеков;			
	КонецЕсли;
	
	Если ВернутьСтруктуру Тогда
		НастройкаПечатиЧеков = ОбщегоНазначенияРасширенный.ПреобразоватьСсылочныйОбъектВСтруктуруРекурсивно(НастройкаПечатиЧековСсылка, , Истина, 1); 
		НастройкаПечатиЧеков.Вставить("Ссылка", НастройкаПечатиЧековСсылка);
		Возврат НастройкаПечатиЧеков;
	Иначе
		Возврат НастройкаПечатиЧековСсылка;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

// Обработчик события заполнения персональных данных.
//
// Параметры:
//  ПерсональныеДанные - Структура - Возвращаемый параметр, персональные данные.
//  СубъектПерсональныхДанных - ОпределяемыйТип.СубъектПерсональныхДанныхБПО - субъект персональных данных. 
//  ТипПерсональныхДанных - ПеречислениеСсылка.ТипыПерсональныхДанныхККТ - Тип персональных данных
//  НаДату - Дата - Дата, на которую необходимо получать персональные данные
//
Процедура ОбработкаЗаполненияПерсональныхДанных(ПерсональныеДанные, СубъектПерсональныхДанных, ТипПерсональныхДанных, НаДату) Экспорт
	
	Если СубъектПерсональныхДанных <> Неопределено И ПерсональныеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПерсональныеДанные, СубъектПерсональныхДанных);
		ПерсональныеДанные.ДатаРождения = Формат(ПерсональныеДанные.ДатаРождения,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	
КонецПроцедуры

#Область ПродажаСВыдачейНаличных

// Процедура где требуется проверить достаточность наличных денежных средств в кассовом аппарате
//
// Параметры:
//   ИдентификаторККТ - СправочникСсылка.ПодключаемоеОборудование - ссылка на элемент КТТ
//   Сумма - Число - требуемая сумма для выдачи наличных
//   Отказ - Булево - если установить в Истина, тогда выдача наличных осуществляться не будет
Процедура ПроверитьДостаточностьНаличныхСредств(ИдентификаторККТ, Сумма, Отказ) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойТоваровНСПК

// Процедура, где требуется заполнить дерево товаров по кодам ТРУ.
//
// Параметры:
//   ДеревоСертификатовЗначение - ДеревоЗначений - дерево значений для заполнения
//   КодыТоваровТРУ - ТаблицаЗначений - таблица значений с товарами и кодами ТРУ для поиска сопоставлений
Процедура ЗаполнитьДеревоТоваровПоКодамТРУ(ДеревоСертификатовЗначение, КодыТоваровТРУ) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЛогированиеПлатежныхОпераций

// Возвращает доступность логирования платежных операций
//  
// Параметры:
//  ЛогированиеДоступно - Булево - Доступность логирования.
//  СтандартнаяОбработка - Булево - Стандартная обработка.
//
Процедура ДоступноЛогированиеПлатежныхОпераций(ЛогированиеДоступно, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Устанавливает период хранения платежных операций в регистре сведений
//
// Параметры:
//   ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций
Процедура ПериодХраненияИсторииПлатежныхОпераций(ПериодХранения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#Область ОборудованиеККТ

#КонецОбласти

#Область РаботаСЭлементомФормы

// Дополнительные переопределяемые действия с элементом формы 
// служит для учета специфики визуального отображения в зависимости от типа клиента.
//
// Параметры:
//  ЭлементУправления - ЭлементУправленияИнтерфейсом - элемент управления.
//  СтандартнаяОбработка - Булево - Стандартная обработка.
//
Процедура ПодготовитьЭлементУправления(ЭлементУправления, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСФормойЭкземпляраОборудования

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ЭкземплярОборудованияПриСозданииНаСервере(Объект, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт
	//+БИТ
	ЭлементОрганизация = ЭтаФорма.Элементы.Найти("Организация");
	Если ЭлементОрганизация <> Неопределено Тогда
		ЭлементОрганизация.ВыбиратьТип = Ложь;
		Если ТипЗнч(Объект.Организация) <> Тип("СправочникСсылка.Организации") Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	//-БИТ
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЧтенииНаСервере".
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//
Процедура ЭкземплярОборудованияПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗаписьюНаСервере".
//
// Параметры:
//  Отказ - Булево - Отказ операции
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ПараметрыЗаписи - Структура - Параметры операции
//
Процедура ЭкземплярОборудованияПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЗаписиНаСервере".
//
// Параметры:
//  Отказ - Булево - Отказ операции
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ПараметрыЗаписи - Структура - Параметры операции
//
Процедура ЭкземплярОборудованияПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПослеЗаписиНаСервере".
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ПараметрыЗаписи - Структура - Параметры операции
//
Процедура ЭкземплярОборудованияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ОбработкаПроверкиЗаполненияНаСервере".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  ПроверяемыеРеквизиты - Структура - Проверяемые реквизиты
//
Процедура ЭкземплярОборудованияОбработкаПроверкиЗаполненияНаСервере(Объект, ЭтаФорма, Отказ, ПроверяемыеРеквизиты) Экспорт

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойЭкземпляраФискальныеОперации

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре Фискальные операции
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  Запись - РегистрСведенийЗапись.ФискальныеОперации - Запись фискальные операции.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ЭкземплярФискальныеОперацииПриСозданииНаСервере(Запись, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойСпискаФискальныеОперации

// Дополнительные переопределяемые действия с управляемой формой в Список Фискальные операции
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура СписокФискальныеОперацииПриСозданииНаСервере(ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти 

#КонецОбласти

//+бит 
#Область БИТ
#Область ПроцедурыОбновленияБПОМеждуВерсиями

// Обновить параметры ККТ.
//
Процедура ОбновитьПараметрыККТ() Экспорт
	
	// ККТ - при переходе на 2.0.4
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля = &СпособФорматноЛогическогоКонтроля
	|	И ПодключаемоеОборудование.ТипОборудования = &ТипОборудования";
	Запрос.УстановитьПараметр("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Оборудование = Выборка.Ссылка.ПолучитьОбъект();
		Оборудование.СпособФорматноЛогическогоКонтроля = Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
		Оборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = 0.01;
		Оборудование.ОбменДанными.Загрузка = Истина;
		Оборудование.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьНазваниеПолучателя(КлиентТекстом, Клиент) Экспорт
	
	Если Не ПустаяСтрока(КлиентТекстом) Тогда
		Возврат КлиентТекстом;
	ИначеЕсли ТипЗнч(Клиент) = Тип("Строка") Тогда
		Возврат(Клиент);
	Иначе
		Если ЗначениеЗаполнено(Клиент) Тогда
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ИмяРеквизита = "НаименованиеПолное";
			Иначе
				Возврат "";
			КонецЕсли;
			
			Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Клиент, ИмяРеквизита);
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИННПолучателя(ИннТекстом, Клиент) Экспорт
	Если НЕ ПустаяСтрока(ИннТекстом) Тогда
		Возврат ИннТекстом;
	Иначе
		Если ЗначениеЗаполнено(Клиент) Тогда
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ИмяРеквизита = "ИНН";
			Иначе
				Возврат "";
			КонецЕсли;
			
			Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Клиент, ИмяРеквизита);
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьАдресПолучателя(АдресТекстом, Клиент) Экспорт
	Если НЕ ПустаяСтрока(АдресТекстом) Тогда
		Возврат АдресТекстом;
	Иначе
		Если ЗначениеЗаполнено(Клиент) Тогда
			Если ТипЗнч(Клиент) <> Тип("СправочникСсылка.Контрагенты") Тогда
				Возврат "";
			КонецЕсли;
			
			Возврат РаботаСКлиентами.АдресКлиентаДляДокументов(Клиент);
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьТекущегоКассира() Экспорт
	
	Кассир = "";
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		Кассир = ПараметрыСеанса.ТекущийПользователь.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Кассир) Тогда
		Кассир = "Администратор";	
	КонецЕсли;
	
	Возврат Кассир;
	
КонецФункции

Функция ПолучитьИННТекущегоКассира() Экспорт
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		КассирИНН = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИННКассира");		
	Иначе
		КассирИНН = Неопределено;
	КонецЕсли;	
	Возврат КассирИНН;
КонецФункции

Процедура ПроконтролироватьСовпаденияСуммВТоварах(ТаблицаНоменклатуры)
	ТаблицаНоменклатурыКэш = Новый Массив();
	
	Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
		СтрокаТаблицыНоменклатуры = ТаблицаНоменклатуры[ИндексМассива];
		
		Количество				= СтрокаТаблицыНоменклатуры[5].Значение;
		ЦенаСоСкидками			= СтрокаТаблицыНоменклатуры[18].Значение; //ФФД 1.0.5
		Сумма					= СтрокаТаблицыНоменклатуры[9].Значение;
		
		Если Количество <> 0 Тогда
			ЦенаСоСкидкамиТочная	= Сумма / Количество;
		Иначе
			ЦенаСоСкидкамиТочная = ЦенаСоСкидками
		КонецЕсли;
		
		// Если цены различаются, значит мы имеем дело с округлением знаков после запятой
		Если ЦенаСоСкидкамиТочная <> ЦенаСоСкидками Тогда
			КоличествоКопеек = Цел(ЦенаСоСкидкамиТочная * 100);
			ЦенаНа1КопейкуМеньше = КоличествоКопеек / 100;      	// Цена1
			ЦенаНа1КопейкуБольше = (КоличествоКопеек + 1) / 100 ;   // Цена2
			ДельтаЦены = (ЦенаНа1КопейкуБольше - ЦенаНа1КопейкуМеньше);
			
			КоличествоСтрока2 = (Сумма - ЦенаНа1КопейкуМеньше * Количество) / ДельтаЦены;
			КоличествоСтрока1 = Количество - КоличествоСтрока2; 
			
			ТаблицаНоменклатурыКэш.Добавить(СтрокаТаблицыНоменклатуры.Скопировать());
			Строка1Кэш = ТаблицаНоменклатурыКэш[ТаблицаНоменклатурыКэш.ВГраница()];
			ПерезаполнитьСтрокуТоваровНовымиДанными(Строка1Кэш, КоличествоСтрока1, ЦенаНа1КопейкуМеньше);
			
			ТаблицаНоменклатурыКэш.Добавить(СтрокаТаблицыНоменклатуры.Скопировать());
			Строка2Кэш = ТаблицаНоменклатурыКэш[ТаблицаНоменклатурыКэш.ВГраница()];
			ПерезаполнитьСтрокуТоваровНовымиДанными(Строка2Кэш, КоличествоСтрока2, ЦенаНа1КопейкуБольше);
		Иначе
			ТаблицаНоменклатурыКэш.Добавить(СтрокаТаблицыНоменклатуры.Скопировать());	
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНоменклатуры = ТаблицаНоменклатурыКэш;
КонецПроцедуры

Процедура ПерезаполнитьСтрокуТоваровНовымиДанными(СтрокаТаблицы, НовоеКоличество, НоваяЦена)
	
	СтрокаТаблицы[5].Значение		= НовоеКоличество; // Количество
	СтрокаТаблицы[18].Значение		= НоваяЦена; // Цена со скидками
	СтрокаТаблицы[9].Значение		= НовоеКоличество * СтрокаТаблицы[18].Значение; // Сумма
	СтрокаТаблицы[7].Значение		= НовоеКоличество * СтрокаТаблицы[4].Значение - СтрокаТаблицы[9].Значение; // Сумма скидок
	
	// Сумма НДС
	СтавкаНДСЧислом = СтрокаТаблицы[12].Значение;
	Если ТипЗнч(СтавкаНДСЧислом) = Тип("Число") Тогда
		
		СуммаСтроки = СтрокаТаблицы[9].Значение;
		
		СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СуммаСтроки, Истина, СтавкаНДСЧислом);
		СуммаНДС = Окр(СуммаНДС, 2);
		
		СтрокаТаблицы[11].Значение = СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереформироватьТаблицуТоваров(Ссылка, ВходныеПараметры)
	
	ОсновнаяСтавкаНДСПеречисление = Константы.УдалитьОсновнаяСтавкаНДСФискализируемойДеятельности.Получить();
	Если ЗначениеЗаполнено(ОсновнаяСтавкаНДСПеречисление) Тогда
		ОсновнаяСтавкаНДС = РаботаСНДССервер.ПолучитьСтавкуНДС(ОсновнаяСтавкаНДСПеречисление);
	Иначе
		ОсновнаяСтавкаНДС = "";
	КонецЕсли;
	
	ТаблицаНоменклатуры = ВходныеПараметры.ПозицииЧека;
	ТаблицаОплат = ВходныеПараметры.ТаблицаОплат;
	
	Если ВходныеПараметры.ЭтоОказаниеУслуг Тогда
		ШиринаЧековойЛенты = ВходныеПараметры.ШиринаЧековойЛенты;
		
		Если ШиринаЧековойЛенты = 0 ИЛИ ШиринаЧековойЛенты > 48 Тогда
			ШиринаЧековойЛенты = 48
		КонецЕсли;
		
		ГоризонтальныйРазделитель = Лев("--------------------------------------------------------------------------",ШиринаЧековойЛенты);
		ФорматнаяСтрокаСуммы		= "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
		ФорматнаяСтрокаКоличества	= "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=";
		нпп = 0;
		
		МаксДлинаЦены	= 0;
		МаксДлинаСуммы	= 0;
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			СуммаСкидки = ТаблицаНоменклатуры[ИндексМассива][7].Значение;
			
			Длина = СтрДлина(Формат(Цена,ФорматнаяСтрокаСуммы));
			Если Длина>МаксДлинаЦены Тогда
				МаксДлинаЦены = Длина;
			КонецЕсли;
			
			Длина = СтрДлина(Формат(Сумма + СуммаСкидки,ФорматнаяСтрокаСуммы));
			Если Длина>МаксДлинаСуммы Тогда
				МаксДлинаСуммы = Длина;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивСтрокОписанияЧека = Новый Массив;
		ВсегоСумма = 0;	
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			СуммаСкидки   = ТаблицаНоменклатуры[ИндексМассива][7].Значение;
			ПроцентСкидки = ТаблицаНоменклатуры[ИндексМассива][8].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СуммаНДС      = ТаблицаНоменклатуры[ИндексМассива][11].Значение;
			СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;
			Сертификат    = ТаблицаНоменклатуры[ИндексМассива][17].Значение;    
			
			ВсегоСумма = ВсегоСумма + Сумма;
			
			нпп = нпп + 1;
			// Формирование наименования
			Наименование = Формат(нпп,"ЧГ=") + ": " + Наименование + "";
			
			// Сумма по абонементу
			Если ЗначениеЗаполнено(Сертификат) Тогда
				Цена = 0;
				Сумма = 0;
				ПроцентСкидки = 0;
			КонецЕсли;
			
			// Разбивка наименования на строки шириной не более ширины ленты.
			ТекНаименование = Наименование;
			Пока СтрДлина(ТекНаименование) > ШиринаЧековойЛенты Цикл
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ТекНаименование,ШиринаЧековойЛенты)));	
				ТекНаименование = Прав(ТекНаименование,СтрДлина(ТекНаименование)-ШиринаЧековойЛенты);
			КонецЦикла;
			Если СтрДлина(ТекНаименование) <> 0 Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ТекНаименование));
			КонецЕсли;
			
			СтрокаСтоимость	= Формат(Количество,ФорматнаяСтрокаКоличества) + " * "
			+ ВыровнятьСтрокуВправо(Формат(Цена,ФорматнаяСтрокаСуммы),МаксДлинаЦены) + " = "
			+ ВыровнятьСтрокуВправо(Формат(Сумма + СуммаСкидки ,ФорматнаяСтрокаСуммы),МаксДлинаСуммы);				  
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо(СтрокаСтоимость,ШиринаЧековойЛенты)));
			
			Если СуммаСкидки <> 0 Тогда
				СтрокаСкидка = НСтр("ru = '(с учетом скидки '") + ПроцентСкидки + "%)";
				СтрокаСкидкаСумма = "   " + Формат(Сумма,ФорматнаяСтрокаСуммы) ;
				
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо(СтрокаСкидка + СтрокаСкидкаСумма, ШиринаЧековойЛенты)));	
			КонецЕсли;
			
		КонецЦикла;
		
		РежимПечатиДополнительнойРасшифровкиПлатежа = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМВариантПечатиДополнительнойРасшифровкиПлатежа");
		ПечатьДополнительнойРасшифровкиПлатежа = ?(РежимПечатиДополнительнойРасшифровкиПлатежа = 0, Ложь, Истина);
		
		РасшифровкаПлатежа = ВходныеПараметры.РасшифровкаПлатежа;
		Бонусами = ВходныеПараметры.ИтогБонусов;
		ГоризонтальныйРазделительРОВНО = Лев("==========================================================================",ШиринаЧековойЛенты);
		
		Если ПечатьДополнительнойРасшифровкиПлатежа И РежимПечатиДополнительнойРасшифровкиПлатежа = 2 Тогда
			ПечатьДополнительнойРасшифровкиПлатежа = Ложь;
			Если Бонусами <> 0 Тогда
				ПечатьДополнительнойРасшифровкиПлатежа = Истина;
			Иначе	
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ (СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Наличными
						ИЛИ СтрокаРасшифровки.ВидОплаты = Перечисления.ВидыОплаты.Безналичные)
					Тогда
						ПечатьДополнительнойРасшифровкиПлатежа = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","	"));
			
			Если Бонусами<> 0 Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","Списано бонусов: " + Формат(Бонусами,"ЧДЦ=2")));
			КонецЕсли;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ПолучитьСтрокуЛевоПраво(НСтр("ru = 'ИТОГО К ОПЛАТЕ:'"), Формат(ВсегоСумма,ФорматнаяСтрокаСуммы), ШиринаЧековойЛенты)));			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделитель));
		КонецЕсли;
	
		Если ВходныеПараметры.Свойство("КлиентДокумента") И ЗначениеЗаполнено(ВходныеПараметры.КлиентДокумента)
			И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ЧекККМПродажаПечататьФИОКлиента")
		Тогда
		
			Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока","	"));
			КонецЕсли;
			
			ТекстФИОКлиена = НСтр("ru = 'Принято от: '") + ОбщегоНазначения.ФамилияИнициалыФизЛица(ВходныеПараметры.КлиентДокумента);
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",Лев(ТекстФИОКлиена,ШиринаЧековойЛенты)));
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",""));
			
			Если Не ПечатьДополнительнойРасшифровкиПлатежа Тогда
				МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
			КонецЕсли;

		КонецЕсли;
		
		Если ПечатьДополнительнойРасшифровкиПлатежа Тогда 
			// Нефискальный вывод нашей расшифровки платежа (с сертификатами и депозитами).
			Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				Если ТипЗнч(СтрокаРасшифровки) = Тип("Строка") Тогда
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",СтрокаРасшифровки));
				ИначеЕсли ТипЗнч(СтрокаРасшифровки) = Тип("Число") Тогда
					ФорматнаяСтрокаСуммы = "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=";
					МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ВыровнятьСтрокуВправо("= " + Формат(СтрокаРасшифровки,ФорматнаяСтрокаСуммы),ШиринаЧековойЛенты)));			
				Иначе
					СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
					СтрокаПозицииЧека.ФискальнаяСтрока	= Истина;
					СтрокаПозицииЧека.НомерСтрокиТовара = МассивСтрокОписанияЧека.Количество() + 1;
					
					СтрокаПозицииЧека.Наименование	= Строка(СтрокаРасшифровки.ВидОплаты);
					СтрокаПозицииЧека.Количество	= 1;
					СтрокаПозицииЧека.Цена			= СтрокаРасшифровки.Сумма;
					СтрокаПозицииЧека.Сумма			= СтрокаРасшифровки.Сумма;
					СтрокаПозицииЧека.НомерСекции	= СтрокаРасшифровки.НомерСекции;
					СтрокаПозицииЧека.СуммаНДС		= СуммаНДС;
					СтрокаПозицииЧека.СтавкаНДС		= ОсновнаяСтавкаНДС;
					МассивСтрокОписанияЧека.Добавить(СтрокаПозицииЧека);
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрокОписанияЧека.Добавить(Новый Структура("Текст, ТекстоваяСтрока",ГоризонтальныйРазделительРОВНО));
			
		КонецЕсли;
		
		мТаблицаОплат = Новый Массив();
		Для каждого стр из ТаблицаОплат Цикл
			мТаблицаОплат.Добавить(стр);
		КонецЦикла;
	Иначе
		МассивСтрокОписанияЧека = Новый Массив();
		// РКО / ПКО
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.ФискальнаяСтрока	= Истина;
			СтрокаПозицииЧека.НомерСтрокиТовара = МассивСтрокОписанияЧека.Количество() + 1;
			
			СтрокаПозицииЧека.Наименование	= ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			СтрокаПозицииЧека.Количество	= ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			СтрокаПозицииЧека.Цена			= ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			СтрокаПозицииЧека.Сумма			= ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			СтрокаПозицииЧека.НомерСекции	= ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СтрокаПозицииЧека.СуммаНДС      = ТаблицаНоменклатуры[ИндексМассива][11].Значение;
			СтрокаПозицииЧека.СтавкаНДС		= ОсновнаяСтавкаНДС;	
			МассивСтрокОписанияЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
		
		мТаблицаОплат = Новый Массив();
		Для каждого стр из ТаблицаОплат Цикл
			мТаблицаОплат.Добавить(стр);
		КонецЦикла;
	КонецЕсли;
	//Затираем параметры в старом формате и заменяем на новый формат представления данных
	ВходныеПараметры.ПозицииЧека.Очистить();
	ВходныеПараметры.ПозицииЧека = МассивСтрокОписанияЧека;
	
	ВходныеПараметры.ТаблицаОплат.Очистить();
	ВходныеПараметры.ТаблицаОплат = мТаблицаОплат;
КонецПроцедуры

// Получить данные журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - запись фискальной операции.
//  ТипыДокументов - ПеречислениеСсылка.ТипыФискальныхДокументовККТ - типы документов.
//  ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - тип расчета.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//   * ДанныеXML - ХранилищеЗначения - Данные чека, переданные в ККТ (XML).
//
Функция ДанныеФискальнойОперации(ДокументСсылка, ИдентификаторЗаписи = Неопределено, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,  
	|	ФискальныеОперации.Дата                    КАК Дата,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.ЗаводскойНомерФН        КАК ЗаводскойНомерФН, 
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма,         
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит, 
	|	ФискальныеОперации.ЕдиныйЧек               КАК ЕдиныйЧек,
	|	ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы КАК ИдентификаторОплатыПлатежнойСистемы,  
	|	ФискальныеОперации.ТипПлатежнойСистемы     КАК ТипПлатежнойСистемы,
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ФискальныеОперации.ДокументОснование = &ДокументСсылка)
	|	И НЕ ФискальныеОперации.бит_Сторно"
		+ ?(ИдентификаторЗаписи = Неопределено, "", " И (ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи)")
		+ ?(ТипыДокументов = Неопределено, "", " И (ФискальныеОперации.ТипДокумента В (&ТипыДокументов))")
		+ ?(ТипРасчета = Неопределено, "", " И (ФискальныеОперации.ТипРасчета = &ТипРасчета)")
		+ " УПОРЯДОЧИТЬ ПО ФискальныеОперации.Дата УБЫВ, ФискальныеОперации.НомерСменыККМ УБЫВ");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ИдентификаторЗаписи <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	КонецЕсли;
	
	Если ТипыДокументов <> Неопределено Тогда
		// Подготовка типов документов для запроса.
		МассивТипыДокументов = Новый Массив();
		Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
			Для Каждого ТипДокумента Из ТипыДокументов Цикл
				МассивТипыДокументов.Добавить(ТипДокумента);
			КонецЦикла;
		Иначе
			МассивТипыДокументов.Добавить(ТипыДокументов);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипыДокументов", МассивТипыДокументов);
	КонецЕсли;
	
	Если ТипРасчета <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	КонецЕсли;
	
	//+бит
	ФискальныеОперации = Новый Массив();
	//-бит
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("Дата");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("ЗаводскойНомерФН");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");  	
		ФискальнаяОперация.Вставить("ЕдиныйЧек");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ФискальнаяОперация.Вставить("ИдентификаторОплатыПлатежнойСистемы"); 
		ФискальнаяОперация.Вставить("ТипПлатежнойСистемы"); 
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		//+бит
		ФискальныеОперации.Добавить(ФискальнаяОперация);
		//Возврат ФискальнаяОперация;
		//-бит

	КонецЦикла;
	
	
	Возврат ФискальныеОперации;
	
КонецФункции

Процедура ПроверитьУжеФискализированныеИУдалитьЧекиКоррекции(ЧекиКоррекции, Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияПечатиОнлайнЧеков.УИД КАК УИД
		|ИЗ
		|	РегистрСведений.ИсторияПечатиОнлайнЧеков КАК ИсторияПечатиОнлайнЧеков
		|ГДЕ
		|	ИсторияПечатиОнлайнЧеков.Документ = &Документ
		|	И ИсторияПечатиОнлайнЧеков.СторноОперация = ИСТИНА
		|	И ИсторияПечатиОнлайнЧеков.Результат = ИСТИНА";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЧекиКоррекции.Количество() > 0 Тогда
			ЧекиКоррекции.Удалить(0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеОперацииПоЧекуВЛоги(Знач ПараметрыЧека, Результат, СообщениеОтОборудования = Неопределено, СторноОперация = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СообщениеОтОборудования) Тогда
		Попытка
			СообщениеОтОборудования = ПараметрыЧека.НомерЧекаККТ;
		Исключение КонецПопытки;
	КонецЕсли;
	
	Если ПараметрыЧека.Свойство("ЕстьПерсональныеДанные") И ПараметрыЧека.ЕстьПерсональныеДанные Тогда
		Данные = ПараметрыЧека.ДанныеЧекаXMLПерсональныеДанные;
	Иначе
		Данные = ПараметрыЧека.ДанныеЧекаXML;
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаВремяПечати = ТекущаяДата();
	УИДОперации = Новый УникальныйИдентификатор();
	
	ЗаписьЧека = РегистрыСведений.ИсторияПечатиОнлайнЧеков.СоздатьМенеджерЗаписи();	
	ЗаписьЧека.Документ = ПараметрыЧека.ДокументОснование;
	ЗаписьЧека.УИД		= УИДОперации;
	ЗаписьЧека.Прочитать();
	
	Если НЕ ЗаписьЧека.Выбран() Тогда
		ЗаписьЧека.Документ 				= ПараметрыЧека.ДокументОснование;
		ЗаписьЧека.УИД						= УИДОперации;
		
		ЗаписьЧека.Дата						= ДатаВремяПечати;
		ЗаписьЧека.ДанныеXML				= Данные;
		ЗаписьЧека.ПодключаемоеОборудование	= ПараметрыЧека.бит_ПодключаемоеОборудование;
		ЗаписьЧека.Пользователь				= ПараметрыСеанса.ТекущийПользователь;
		ЗаписьЧека.СторноОперация 			= СторноОперация;
		ЗаписьЧека.Результат				= Результат;
		Попытка
			Если НЕ Результат И ЗначениеЗаполнено(СообщениеОтОборудования) Тогда 
				ЗаписьЧека.СообщениеОтОборудования	= СообщениеОтОборудования;
			КонецЕсли;
		Исключение КонецПопытки;
		
		ЗаписьЧека.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеОперацииКоррекции(ДанныеОперации) Экспорт
		
	Если НЕ ДанныеОперации.НеприменениеККТ Тогда
		Для Каждого ЧекКоррекцииСторно Из ДанныеОперации.ЧекиКоррекцииСторно Цикл
			// Заполнить результаты фискализация чека из XML пакета.
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ЧекКоррекцииСторно); 
			Попытка
				// Записать фискальную операцию - сторно.
				ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьФискальнуюОперацию(ЧекКоррекцииСторно);
			Исключение
				ЧекКоррекцииСторно.ОперацияЗаписана = Ложь;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьШиринуЧековойЛенты(Знач ШиринаЧековойЛенты)
	
	Если ШиринаЧековойЛенты = 0 ИЛИ ШиринаЧековойЛенты > 48 Тогда
		ШиринаЧековойЛенты = 48
	КонецЕсли;
	
	Возврат ШиринаЧековойЛенты;
	
КонецФункции

#КонецОбласти
//-бит

