#Область ПрограммныйИнтерфейс

// Процедура СозданиеНовойКИ.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект
//
Процедура СозданиеНовойКИ(Ссылка) Экспорт
	
	ПараметрыВыбораКИ = Новый Структура("Объект", Ссылка);
	ОткрытьФорму("Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаДереваВидовУпр", ПараметрыВыбораКИ);
		
КонецПроцедуры

// Процедура РедактированиеКИ.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект
//  СтруктураЗначений - Структура
//  КлючЗаписи - Неопределено - не используется.
//
Процедура РедактированиеКИ(Ссылка, СтруктураЗначений, КлючЗаписи = Неопределено) Экспорт
	
	СтрокаФормы = КонтактнаяИнформацияСервер.ПолучитьСтрокуФормыПоВиду(СтруктураЗначений.Вид);
	
	Если ЗначениеЗаполнено(СтрокаФормы) Тогда
		
		Если СтрокаФормы = "Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаЗаписиАдресаУпр" Тогда
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", СтруктураЗначений.Вид);
			ПараметрыОткрытия.Вставить("ЗначенияПолей",           СтруктураЗначений.ЗначенияПолей);
			ПараметрыОткрытия.Вставить("Значение",		          СтруктураЗначений.Значение);
			ПараметрыОткрытия.Вставить("Представление",           СтруктураЗначений.Представление);
			ПараметрыОткрытия.Вставить("Объект",				  СтруктураЗначений.Объект);
						
			Если Не ЗначениеЗаполнено(СтруктураЗначений.ЗначенияПолей) Тогда
				
				ПараметрыОткрытия.Вставить("Комментарий", СтруктураЗначений.Представление);
				
				ЗначенияПолейXML = КонтактнаяИнформацияСервер.ОбновитьКИПодФорматФИАС(Ссылка, СтруктураЗначений.Вид, Истина, глКэшАдресовФилиалов);
				
				ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗначенияПолейXML);
				
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияЗаполненияКИ", КонтактнаяИнформацияКлиент, Новый Структура("Объект", Ссылка));
			УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Неопределено, Оповещение);	
			
		Иначе
			
			ЗначенияЗаполнения = Новый Структура;
			Для Каждого КлючЗначение Из СтруктураЗначений Цикл
				ЗначенияЗаполнения.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			ЗначенияЗаполнения.Вставить("Объект", Ссылка);
			ЗначенияЗаполнения.Вставить("Редактирование", Истина);
			ОткрытьФорму(СтрокаФормы, Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
			
		КонецЕсли;	
		
	Иначе
		ОткрытьФорму("РегистрСведений.КонтактнаяИнформация.Форма.ФормаЗаписиУпр");
	КонецЕсли;		
	
КонецПроцедуры

// Удаляет строку контактной информации на форме.
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - владелец контактной информации на форме.
//  КонтактнаяИнформацияСписок	 - ТаблицаФормы	 - элемент формы со списком контактной информации.
// 
// Возвращаемое значение:
//  Булево - выполнено ли удаление. 
//
Функция УдалитьКИ(Объект, КонтактнаяИнформацияСписок) Экспорт
	
	Если Объект <> Неопределено
		И Не Объект.Ссылка.Пустая()
	Тогда
		ТекущиеДанные = КонтактнаяИнформацияСписок.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			КонтактнаяИнформацияСервер.УдалитьЗаписьКИ(ТекущиеДанные.Вид, Объект.Ссылка);
			КонтактнаяИнформацияСписок.Обновить();
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь; // Удаления не было.
	
КонецФункции

// Обработчик начала добавления контактной информации на форме объекта.
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - владелец контактной информации на форме.
//  КонтактнаяИнформацияСписок	 - ТаблицаФормы	 - элемент формы со списком контактной информации.
// 
// Возвращаемое значение:
//  Булево - выполнено ли удаление. 
//
Процедура КонтактнаяИнформацияСписокПередНачаломДобавления(КонтактнаяИнформацияСписок, Отказ, Форма) Экспорт
	
	Отказ = Истина;
	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(Форма) Тогда
		СозданиеНовойКИ(Форма.Объект.Ссылка);
		КонтактнаяИнформацияСписок.Обновить();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик начала изменения контактной информации на форме объекта.
//
// Параметры:
//  КонтактнаяИнформацияСписок - ТаблицаФормы - список КИ на форме.
//  Форма - ФормаКлиентскогоПриложения - форма.
//  Объект - СправачникОбъект.
//
Процедура КонтактнаяИнформацияСписокПередНачаломИзменения(КонтактнаяИнформацияСписок, Форма, Объект) Экспорт
	
	ТекДанные = КонтактнаяИнформацияСписок.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		ЭтоОбъектФормы = ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура");
		
		Если Не ЭтоОбъектФормы Или РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(Форма) Тогда
			
			СтруктураЗначений = КонтактнаяИнформацияКлиентСерверПереопределяемый.ПолучитьСтруктуруПолейКонтактнойИнформации();
			
			ДанныеЗаписи = КонтактнаяИнформацияСерверПереопределяемый.ДанныеЗаписиКИ(ТекДанные.Объект, ТекДанные.Тип, ТекДанные.Вид);
			Если ДанныеЗаписи = Неопределено Тогда
				// Добавление новой записи
				ЗаполнитьЗначенияСвойств(СтруктураЗначений, ТекДанные);
			Иначе
				// Редактирование старой записи
				ЗаполнитьЗначенияСвойств(СтруктураЗначений, ДанныеЗаписи);
			КонецЕсли;	
			
			КонтактнаяИнформацияКлиент.РедактированиеКИ(?(ЭтоОбъектФормы, Объект.Ссылка, Объект), СтруктураЗначений);
			Отказ = Истина;
			
			КонтактнаяИнформацияСписок.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура ОбработкаОповещенияЗаполненияКИ.
//
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Структура
//
Процедура ОбработкаОповещенияЗаполненияКИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		КонтактнаяИнформацияСервер.ЗаписатьКонтактнуюИнформацию(ДополнительныеПараметры.Объект, Результат.Тип, Результат.Вид, Результат.КонтактнаяИнформация, Результат.Значение);
		
		// Оповещение динамических списков контактной информации без основной таблицы об изменении данных.
		Оповестить("КонтактнаяИнформацияИзменение", ДополнительныеПараметры.Объект);
	КонецЕсли;
	
КонецПроцедуры

// Ставит строке контактной информации на форме отметку "Основная".
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - владелец контактной информации на форме.
//  КонтактнаяИнформацияСписок	 - ТаблицаФормы	 - элемент формы со списком контактной информации.
// 
// Возвращаемое значение:
//  Булево - выполнено ли удаление. 
//
Процедура ОсновнаяКИ_ПрисвоитьНаФорме(Объект, КонтактнаяИнформацияСписок, Кнопка_КИОсновная) Экспорт
	
	ТекущиеДанные = КонтактнаяИнформацияСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Устанавливаем информацию по умолчанию
		Если ТекущиеДанные.ЗначениеПоУмолчанию = Ложь Тогда
			
			ТекДанные = Новый Структура;
			ТекДанные.Вставить("Тип", ТекущиеДанные.Тип);
			ТекДанные.Вставить("Вид", ТекущиеДанные.Вид);
			ТекДанные.Вставить("Представление", ТекущиеДанные.Представление);
			
			КонтактнаяИнформацияСервер.СброситьОсновнуюЗапись(Объект.Ссылка, ТекДанные);
			Кнопка_КИОсновная.Пометка = Истина;
			
		// Сбрасываем информацию по умолчанию, если она была ранее выбрана как по умолчанию.
		Иначе
			КонтактнаяИнформацияСервер.СброситьОсновнуюЗапись(Объект.Ссылка);
			Кнопка_КИОсновная.Пометка = Ложь;	
		КонецЕсли;
		
		КонтактнаяИнформацияСписок.Обновить();
	КонецЕсли;
	
КонецПроцедуры

// Открывает данные из КИ
//
// Параметры:
//  Данные	 - Структура - содержит параметры для открытия КИ.
//
Процедура ОткрытьСсылкуИзКИ(Данные) Экспорт
	Тип = Данные.Тип;
	Представление = СокрЛП(Данные.Представление);
	Если НЕ ПустаяСтрока(Представление) Тогда
		соотВидыКИ = ПолучитьПеречислениеВидовКИСервер();
		Если Тип = соотВидыКИ.Получить("АдресЭлектроннойПочты") Тогда	
			Если Найти(Представление,"mailto:")>0 Тогда
				СтрокаЗапуска = Представление;
			Иначе
				СтрокаЗапуска = "mailto:" + Представление;
			КонецЕсли; 
			Попытка
				ЗапуститьПриложение(СтрокаЗапуска);
			Исключение
			КонецПопытки;				
			
		ИначеЕсли Тип = соотВидыКИ.Получить("ВебСтраница") Тогда
			СтрокаЗапуска = Представление;
			Попытка
				ЗапуститьПриложение(СтрокаЗапуска);
			Исключение
			КонецПопытки;			
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// Функция ВыбратьСоздатьКИКлиента.
//
// Параметры:
//  Клиент - СправочникСсылка.Клиенты - клиент.
//  ТипКИ - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип.
//  Филиал - СправочникСсылка.Филиалы - филиал.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВыбратьСоздатьКИКлиента(Клиент, ТипКИ, Филиал = Неопределено) Экспорт
	
	Рез = "";
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		Парам = Новый Структура("Клиент, ТипКИ", Клиент, ТипКИ);
		ФормаВыборка = ПолучитьФорму("Обработка.РедактированиеКонтактнойИнформации.Форма.ФормаВыбораКонтактнойИнформацииЧек", Парам);	
		Рез = ФормаВыборка.ОткрытьМодально();
	
		Если ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			
			Если Филиал = Неопределено Тогда
				Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
			КонецЕсли;
			
			НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Филиал, Истина);
			
			// Исключаем из номера всё кроме цифр и символа '+'.
			ИсходныйНомер = Рез;
			БылиЦифры = Ложь;
			НомерИзЦифр = "";
			ДлинаНомера = СтрДлина(ИсходныйНомер);
			Для Сч=1 По ДлинаНомера Цикл
				ТекСимвол = Сред(ИсходныйНомер, Сч, 1);
				КодСимвола = КодСимвола(ИсходныйНомер, Сч);
				
				Если Не БылиЦифры И ТекСимвол = "+" Тогда
					НомерИзЦифр = НомерИзЦифр + ТекСимвол;
					БылиЦифры = Истина;
					Продолжить;
				Иначе
					Попытка 
						ЧислоСимвола = Число("0"+ТекСимвол);
						НомерИзЦифр = НомерИзЦифр + ТекСимвол;
						БылиЦифры = Истина;
						Продолжить;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			Рез = НомерИзЦифр;
			
			ДлинаСтроки = СтрДлина(Рез);
			
			Если НастройкаПечатиЧеков.СпособФормированияТелефонаКлиента = ПредопределенноеЗначение("Перечисление.СпособыФормированияТелефонногоКода.Код8") Тогда
				Если ДлинаСтроки = 10 Тогда
					Рез = "8" + Рез;
				ИначеЕсли ДлинаСтроки = 12 И Лев(Рез, 2) = "+7" Тогда
					Рез = "8" + Сред(Рез, 3);
				КонецЕсли;
			ИначеЕсли НастройкаПечатиЧеков.СпособФормированияТелефонаКлиента = ПредопределенноеЗначение("Перечисление.СпособыФормированияТелефонногоКода.КодПлюс7") Тогда
				Если ДлинаСтроки = 10 Тогда
					Рез = "+7" + Рез;
				ИначеЕсли ДлинаСтроки = 11 И Лев(Рез, 1) = "8" Тогда
					Рез = "+7" + Сред(Рез, 2);
				КонецЕсли;
			ИначеЕсли НастройкаПечатиЧеков.СпособФормированияТелефонаКлиента = ПредопределенноеЗначение("Перечисление.СпособыФормированияТелефонногоКода.КодПустой") Тогда
				Если ДлинаСтроки = 11 И Лев(Рез, 1) = "8" Тогда
					Рез = Сред(Рез, 2)
				ИначеЕсли ДлинаСтроки = 12 И Лев(Рез, 2) = "+7" Тогда
					Рез = Сред(Рез, 3)
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			Подсказка = "Введите номер телефона";
		ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			Подсказка = "Введите e-mail";
		КонецЕсли;
		ВвестиСтроку(Рез, Подсказка);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции	

// Записывает контактную информацию для строки таблицы КИ на форме.
//
// Параметры:
//  СтрокаКИ - ДанныеФормыЭлементКоллекции	 - Строка ТЧ с контактной информацией для записи
//
Процедура ЗаписатьНаФормеСтрокуКИ(СтрокаКИ) Экспорт
	
	СтруктураЗаписи = Новый Структура;
	
	СтруктураЗаписи.Вставить("Вид", СтрокаКИ.Вид);
	СтруктураЗаписи.Вставить("Объект", СтрокаКИ.Объект);
	СтруктураЗаписи.Вставить("Тип", СтрокаКИ.Тип);
	СтруктураЗаписи.Вставить("Представление", СтрокаКИ.Представление);
	СтруктураЗаписи.Вставить("Комментарий", СтрокаКИ.Комментарий);
	СтруктураЗаписи.Вставить("ЗначениеПоУмолчанию", СтрокаКИ.ЗначениеПоУмолчанию);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаКИ, "Поле3") Тогда
		СтруктураЗаписи.Вставить("Поле3", СтрокаКИ.Поле3);
	Иначе
		СтруктураЗаписи.Вставить("Поле3", СтрокаКИ.Представление);
	КонецЕсли;
	
	КонтактнаяИнформацияСерверПереопределяемый.ЗаписатьКонтактнуюИнформацию(СтруктураЗаписи);
	
КонецПроцедуры

// Звонок Skype.
//
// Параметры:
//  ЛогинSkype - Строка - логин.
//  Форма - ФормаКлиентскогоПриложения - форма.
//  ЭлементФормы - ПолеФормы - элемент.
//
Процедура ВыполнитьКомандуSkype(ЛогинSkype, Форма, ЭлементФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(ЛогинSkype) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("ЛогинSkype", ЛогинSkype);
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"));
	Список.Добавить("НачатьЧат", НСтр("ru = 'Начать чат'"));
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюSkype", УправлениеКонтактнойИнформациейКлиент, Параметры);
	
	Попытка
		Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список, ЭлементФормы);
	Исключение
		Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПеречислениеВидовКИСервер()
	Возврат КонтактнаяИнформацияСервер.ПолучитьПеречислениеВидовКИСервер();
КонецФункции	

#КонецОбласти

