 
#Область ПрограммныйИнтерфейс   

// Функция - Параметры общей формы ввода нового отчета
//
// Параметры:
//  ФормаОтчета				 - 	 - 
//  РазрешенныеПериодичности - 	 - 
//  ОсновнаяПериодичность	 - 	 - 
// 
// Возвращаемое значение:
//  Структура - параметры для открытия единой формы.
//
Функция ПараметрыОбщейФормыВводаНовогоОтчета(ФормаОтчета, РазрешеннаяПериодичность, ОсновнаяПериодичность) Экспорт
	
	ПараметрыОбщейФормы = ФормаОтчета.Параметры.ПараметрыФормы;
	
	ЭтаФормаИмя = Строка(ФормаОтчета.ИмяФормы);
	ИсточникОтчета = МедицинскаяОтчетностьВызовСервера.ИсточникОтчета(ЭтаФормаИмя);
	ПараметрыОбщейФормы.Вставить("ИсточникОтчета",	 ИсточникОтчета);
	ПараметрыОбщейФормы.Вставить("ИсточникФормаИмя", ЭтаФормаИмя);
	
	ПараметрыОбщейФормы.Вставить("РазрешеннаяПериодичность", РазрешеннаяПериодичность);
	
	Если ОсновнаяПериодичность = Неопределено
		И РазрешеннаяПериодичность.Количество() <> 0
	Тогда
		ПараметрыОбщейФормы.Вставить("ОсновнаяПериодичность", РазрешеннаяПериодичность[0]);
	Иначе
		ПараметрыОбщейФормы.Вставить("ОсновнаяПериодичность", ОсновнаяПериодичность);	
	КонецЕсли;
	
	Возврат ПараметрыОбщейФормы;
	
КонецФункции

// Формирует шаблон таблицы для получения данных из переопределяемого метода.
//
// Возвращаемое значение:
//   ТаблицаЗначений - шаблон таблицы для получения данных из переопределяемого метода.
//
Функция ПустаяТаблицаОписанияОбъектовМедицинскойОтчетности() Экспорт
	
	ТаблицаОписания = Новый ТаблицаЗначений;
	ТаблицаОписания.Колонки.Добавить("Наименование");
	ТаблицаОписания.Колонки.Добавить("ТипОбъекта");
	ТаблицаОписания.Колонки.Добавить("ВидКонтролирующегоОргана");
	ТаблицаОписания.Колонки.Добавить("ГруппаВДереве");
	ТаблицаОписания.Колонки.Добавить("ВидДокумента");
	ТаблицаОписания.Колонки.Добавить("НеОтправляетсяВКонтролирующийОрган");
	ТаблицаОписания.Колонки.Добавить("ЯвляетсяАктуальным");
	ТаблицаОписания.Колонки.Добавить("ИмяОсновногоМакетаДляПечати");
	ТаблицаОписания.Колонки.Добавить("ВидЭлектронногоПредставления");
	
	Возврат ТаблицаОписания;
	
КонецФункции

// Заполняет наименование таблицы для получения данных из переопределяемого метода.
//
// Параметры:
//   ТаблицаОписания - ТаблицаЗначений - таблица описания.
//
Процедура ЗаполнитьНаименованиеВТаблицеОписанияОбъектовМедицинскойОтчетности(ТаблицаОписания) Экспорт
	
	// Заполняем колонку Наименование из метаданных.
	Для Каждого СтрокаТаблицыОписания Из ТаблицаОписания Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыОписания.Наименование) Тогда
			СтрокаТаблицыОписания.Наименование = Метаданные.НайтиПоТипу(СтрокаТаблицыОписания.ТипОбъекта).Представление();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет дерево видов отчетов данными из таблицы.
//
// Параметры:
//   ДеревоОтчетов - ДеревоЗначений - дерево регл. отчетов.
//   ТаблицаОписанияОтчетов - ТаблицаЗначений - таблица регл. отчетов.
//
Процедура ДобавитьВДеревоМедицинскихОтчетовОтчетыИзТаблицы(ДеревоОтчетов, ТаблицаОписанияОтчетов) Экспорт
	
	ЗначенияКолонок = Новый Структура;
	
	Для Каждого СтрокаТаблицыОписанияОтчетов Из ТаблицаОписанияОтчетов Цикл
		
		МетаОбъект = Метаданные.НайтиПоТипу(СтрокаТаблицыОписанияОтчетов.ТипОбъекта);
		Если МетаОбъект <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицыОписанияОтчетов.ГруппаВДереве) Тогда
			
			ЗначенияКолонок.Вставить("Наименование",  ?(ЗначениеЗаполнено(СтрокаТаблицыОписанияОтчетов.Наименование),
				СтрокаТаблицыОписанияОтчетов.Наименование, МетаОбъект.Синоним));
			ЗначенияКолонок.Вставить("ПолноеИмя",     МетаОбъект.ПолноеИмя());
			ЗначенияКолонок.Вставить("ТипПолучателя", СтрокаТаблицыОписанияОтчетов.ВидКонтролирующегоОргана);
			ЗначенияКолонок.Вставить("Категория",     СтрокаТаблицыОписанияОтчетов.ГруппаВДереве);
			ЗначенияКолонок.Вставить("ЭтоГруппа",     Ложь);
			
			ДобавитьОтчетВДеревоМедицинскихОтчетов(ДеревоОтчетов, ЗначенияКолонок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу, содержащую доступные медицинские отчеты, ограниченные переданным отбором.
//
// Параметры:
//   Отбор - Массив - массив имен отчетов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - доступные медицинские отчеты, ограниченные переданным отбором.
//
Функция ТаблицаДоступныеМедицинскиеОтчеты(Отбор) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(МедицинскиеОтчеты.Наименование КАК СТРОКА(255)) КАК НаименованиеОтчета,
	|	МедицинскиеОтчеты.Ссылка КАК СсылкаВидОтчета,
	|	МедицинскиеОтчеты.ИсточникОтчета КАК ИсточникОтчета
	|ИЗ
	|	Справочник.МедицинскиеОтчеты КАК МедицинскиеОтчеты
	|ГДЕ
	|	МедицинскиеОтчеты.ИсточникОтчета В(&Отбор)
	|	И НЕ МедицинскиеОтчеты.ЭтоГруппа");
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Добавляет в форме медицинского отчета кнопку ("скрепку")
// для открытия формы с присоединенными файлами.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма медицинского отчета.
//
Процедура ДобавитьКнопкуПрисоединенныеФайлы(Форма) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Если СтрНайти(Форма.ИмяФормы, "Отчет.МедицинскийОтчет") > 0
		 ИЛИ СтрНайти(Форма.ИмяФормы, "Отчет.МедицинскоеУведомление") > 0 Тогда
			
			ИмяКоманды = "ПрисоединенныеФайлы";
			
			КомандаПрисоединенныеФайлы = Форма.Команды.Найти(ИмяКоманды);
			
			Если ТипЗнч(КомандаПрисоединенныеФайлы) = Тип("КомандаФормы") Тогда
				Возврат;
			КонецЕсли;
			
			КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "Подключаемый_ОткрытьПрисоединенныеФайлы";
			КомандаФормы.Заголовок = "Присоединенные файлы";
			КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
			КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
			КомандаФормы.Картинка = БиблиотекаКартинок.Скрепка;
			
			// Кнопка "со скрепкой" добавляется в конец командной панели формы.
			Группа = Форма.Элементы.Вставить("ГруппаПрисоединенныеФайлы",
			Тип("ГруппаФормы"), Форма.Элементы.ФормаКоманднаяПанель);
			Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
			
			Кнопка = Форма.Элементы.Добавить("ПрисоединенныеФайлы",
				Тип("КнопкаФормы"), Форма.Элементы.ГруппаПрисоединенныеФайлы);
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Заголовок = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Признак запрета интерактивного изменения форм отчетности.
// 
// Возвращаемое значение:
//  Булево. 
//
Функция ЗапрещатьРедактированиеФормМедОтчетности() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Создает массив из переданных периодичностей.
//
// Параметры:
//  ПериодичностьСтрока	 - Строка - строка с разделенными "," именами значения перечисления Периодичность.
// 
// Возвращаемое значение:
//  Структура - структура с полями "РазрешеннаяПериодичность" и "ОсновнаяПериодичность" для общей формы выбора варианта и периода нового отчета.
//
Функция ПериодичностьОтчетаДляСозданияНового(ПериодичностьСтрока) Экспорт
	
	Перем ОсновнаяПериодичность;
	
	ПериодичностьРазделители = СтрЗаменить(ПериодичностьСтрока, " ", "");
	РазрешеннаяПериодичностьСтроки = СтрРазделить(ПериодичностьРазделители, ",");
	
	РазрешеннаяПериодичность = Новый Массив;
	
	Для Каждого ПериодСтрокой Из РазрешеннаяПериодичностьСтроки Цикл
		ЗначениеСсылка = Перечисления.Периодичность[ПериодСтрокой];
		РазрешеннаяПериодичность.Добавить(ЗначениеСсылка);
	КонецЦикла;
	
	Если РазрешеннаяПериодичность.Количество() <> 0 Тогда
		ОсновнаяПериодичность = РазрешеннаяПериодичность[0];
	КонецЕсли;
	
	Возврат Новый Структура("РазрешеннаяПериодичность, ОсновнаяПериодичность", РазрешеннаяПериодичность, ОсновнаяПериодичность);
									   
КонецФункции
								   
#КонецОбласти

#Область НоваяФормаМедицинскойОтчетности

// Формирует таблицу для получения данных из переопределяемого метода
Функция ТаблицаОписанияОбъектовМедицинскойОтчетности() Экспорт
	
	ТаблицаОписания = ПустаяТаблицаОписанияОбъектовМедицинскойОтчетности();
	
	ЗаполнитьНаименованиеВТаблицеОписанияОбъектовМедицинскойОтчетности(ТаблицаОписания);
	
	Возврат ТаблицаОписания;
	
КонецФункции

// Дополняет дерево видов отчетов другими видами, входящими и не входящими в общий перечень
Процедура ДобавитьВДеревоМедицинскихОтчетовДругиеОтчеты(ДеревоОтчетов) Экспорт
	
	ЗначенияКолонок = Новый Структура;
	
	// Дополним единичными отчетами, не входящими в общий перечень
	ТаблицаОписанияОбъектов = ТаблицаОписанияОбъектовМедицинскойОтчетности();
	ТаблицаОписанияОтчетов = ТаблицаОписанияОбъектов.Скопировать(Новый Структура("ЯвляетсяАктуальным", Истина));
	
	ДобавитьВДеревоМедицинскихОтчетовОтчетыИзТаблицы(ДеревоОтчетов, ТаблицаОписанияОтчетов);
		
КонецПроцедуры

Процедура ДобавитьОтчетВДеревоМедицинскихОтчетов(ДеревоОтчетов, ЗначенияКолонок)
	
	Перем Категория;
	
	УзелДерева = ДеревоОтчетов;
	
	Если ЗначенияКолонок.Свойство("Категория", Категория) И ЗначениеЗаполнено(Категория) Тогда
		НайденныеГруппы = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("Наименование,ЭтоГруппа", Категория, Истина), Истина);
		Если НайденныеГруппы.Количество() > 0 Тогда
			УзелДерева = НайденныеГруппы[0];
		Иначе // создаем папку
			УзелДерева = ДеревоОтчетов.Строки.Добавить();
			УзелДерева.Наименование = Категория;
			УзелДерева.ЭтоГруппа = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = УзелДерева.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДерева, ЗначенияКолонок);
	
КонецПроцедуры

Процедура ФормаМедицинскойОтчетности_ПриСозданииНаСервере(Форма) Экспорт

	МедицинскаяОтчетностьПереопределяемый.ФормаМедицинскойОтчетности_ПриСозданииНаСервере(Форма);

КонецПроцедуры

Процедура СправочникМедицинскиеОтчеты_ПриСозданииНаСервере(Форма) Экспорт

	МедицинскаяОтчетностьПереопределяемый.СправочникМедицинскиеОтчеты_ПриСозданииНаСервере(Форма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	Возврат УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	
КонецФункции

Функция МедОтчеты(Наим, НеЗапоминатьВКэше = Ложь, ВыводитьСообщение = Истина) Экспорт
	Перем ВременныйФайл;
	Перем ПараметрыОтчета;
	
	Если СтрНайти(Наим, "ВнешнийОтчетОбъект.") <> 0 Тогда
		Наим = СтрЗаменить(Наим, "ВнешнийОтчетОбъект.", "");
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.МедицинскиеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	
	Если НайденныйЭлемент = Справочники.МедицинскиеОтчеты.ПустаяСсылка() Тогда
		Если Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не НайденныйЭлемент.ВнешнийОтчетИспользовать Или НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // Используется внутренний отчет.
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			
			Возврат Документы[Наим];
			
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			
			Возврат Отчеты[Наим];
			
		Иначе
			
			Если ВыводитьСообщение Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!'"), СокрП(Наим));
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
	Иначе // Используется внешний отчет
		Попытка
			ВременныйФайл = ФайлОтчета(НайденныйЭлемент);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл, Истина);
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
			КонецПопытки;
			Возврат ВнешнийОтчет;
		Исключение
			
			Если ВыводитьСообщение Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось запустить внешний отчет %1!'"), СокрП(Наим));
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет, является ли отчет, заданный строкой-идентификатором, внешним.
// Параметры:
//		ИмяОтчета - строка, СправочникСсылка.МедицинсиеОтчеты -идентификатор отчета или ссылка на отчет.
// ВозвращаемоеЗначение:
//		Булево - Истина, если для заданной строки-идентификатора используется внешний отчет.
//				 Ложь - в противном случае.
//				 Неопределено - информация по отчету, заданному строкой-идентификатором 
//  			 отсутствует в справочнике МедицинскиеОтчеты.
Функция ЭтоВнешнийОтчет(ИмяОтчета) Экспорт
	
	Если ТипЗнч(ИмяОтчета) = Тип("СправочникСсылка.МедицинскиеОтчеты") Тогда
		ОтчетСсылка = ИмяОтчета; // В параметре передали ссылку на элемент справочника медицинской отчетности.
	Иначе
		ОтчетСсылка = ОтчетСсылка(ИмяОтчета);
		Если ОтчетСсылка.Пустая() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат ОтчетСсылка.ВнешнийОтчетИспользовать;
	
КонецФункции

// Возвращает ссылку на медицинский отчет в справочнике.
// Параметры:
//		ИмяОтчета - строка-идентификатор отчета (источник отчета).
// ВозвращаемоеЗначение:
//		СправочникСсылка.МедицинскиеОтчеты.
Функция ОтчетСсылка(ИмяОтчета) Экспорт
	
	Возврат Справочники.МедицинскиеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИмяОтчета);
	
КонецФункции

Функция ФормаМедОтчета(Наим, ВыбраннаяФорма = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
	
	Перем ВременныйФайл;
	
	НайденныйЭлемент = Справочники.МедицинскиеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.МедицинскиеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не НайденныйЭлемент.ВнешнийОтчетИспользовать Или НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда
		// Используется внутренний отчет.
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			Возврат Документы[Наим];
			
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим];
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!'"), СокрП(Наим));
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		// Используется внешний отчет.
		Попытка
			ВременныйФайл = ФайлОтчета(НайденныйЭлемент);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл, Ложь);
			
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
				
			КонецПопытки;
			
			Возврат ВнешнийОтчет;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден отчет %1!'"), СокрП(Наим));
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаблокироватьДокумент(мСохраненныйДок) Экспорт
	
	Попытка
		
		мСохраненныйДок.Заблокировать();
		
		Возврат Истина;
		
	Исключение
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Не удается заблокировать документ!%1Возможно, документ уже открыт другим пользователем!'"), Символы.ПС);

		Сообщение.Сообщить();
        
		Возврат Ложь;
		
	КонецПопытки;
			
КонецФункции

Функция ПродолжитьПриНесоответствииВерсийФорм(Знач ВерсияФормы, Знач мВерсияФормы) Экспорт
	
	ПервыйСлеш = СтрНайти(ВерсияФормы, "/");
	ВторойСлеш = СтрНайти(Лев(ВерсияФормы, ПервыйСлеш - 1) + " " + Сред(ВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодВерсияФормы = Сред(ВерсияФормы, ВторойСлеш + 1);
	МесяцВерсияФормы = Сред(ВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньВерсияФормы = Сред(ВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодВерсияФормы) = 2 Тогда
		ГодВерсияФормы = "20" + ГодВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцВерсияФормы) = 1 Тогда
		МесяцВерсияФормы = "0" + МесяцВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньВерсияФормы) = 1 Тогда
		ДеньВерсияФормы = "0" + ДеньВерсияФормы;
	КонецЕсли;
	ДатаВерсияФормы = Дата(ГодВерсияФормы + МесяцВерсияФормы + ДеньВерсияФормы);
	
	ПервыйСлеш = СтрНайти(мВерсияФормы, "/");
	ВторойСлеш = СтрНайти(Лев(мВерсияФормы, ПервыйСлеш - 1) + " " + Сред(мВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодмВерсияФормы = Сред(мВерсияФормы, ВторойСлеш + 1);
	МесяцмВерсияФормы = Сред(мВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньмВерсияФормы = Сред(мВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодмВерсияФормы) = 2 Тогда
		ГодмВерсияФормы = "20" + ГодмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцмВерсияФормы) = 1 Тогда
		МесяцмВерсияФормы = "0" + МесяцмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньмВерсияФормы) = 1 Тогда
		ДеньмВерсияФормы = "0" + ДеньмВерсияФормы;
	КонецЕсли;
	ДатамВерсияФормы = Дата(ГодмВерсияФормы + МесяцмВерсияФормы + ДеньмВерсияФормы);
	
	Если ДатамВерсияФормы < ДатаВерсияФормы Тогда
						
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраненные данные не могут быть открыты текущей версией отчета!%1Версия отчета - от %2Версия данных - от %3'"), Символы.ПС, Формат(ДатамВерсияФормы, "ДЛФ=DD; ДП='Пустая дата'") + Символы.ПС, Формат(ДатаВерсияФормы,  "ДЛФ=DD; ДП='Пустая дата'"));
		
		Сообщение.Сообщить();
                  						
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПриЗаписиМедицинскогоОтчетаНаСервере(Форма, Автосохранение = Ложь, Вариант, мСохраненныйДок) Экспорт
	
	Если Автосохранение = Неопределено Тогда
		Автосохранение = Ложь;
	КонецЕсли;
			
	Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((мСохраненныйДок = Неопределено) ИЛИ (Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> Форма.СтруктураРеквизитовФормы.мВариант)) Тогда
		
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
			// Создаем новый документ вида МедицинскийОтчет.
						
			мСохраненныйДок = Документы.МедицинскийОтчет.СоздатьДокумент();
			ЗаблокироватьДокумент(мСохраненныйДок);
			Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина;
			мСохраненныйДок.Дата = Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
			мСохраненныйДок.УстановитьВремя();
			мСохраненныйДок.УстановитьНовыйНомер();
						
		КонецЕсли;

	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СуществуетДокументСАналогичнымиРеквизитами(Форма, КПП = "") Экспорт	
	
	Попытка
		Вариант = Форма.СтруктураРеквизитовФормы.ВидДокумента*Форма.НомерКорректировки;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мСохраненныйДок", ?(Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено, Неопределено, Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка));
	
	Запрос.УстановитьПараметр("ИсточникОтчета", Метаданные.Отчеты[Сред(Лев(СтрЗаменить(Форма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(Форма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя);
	
	Запрос.УстановитьПараметр("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Вариант", Вариант);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(МедицинскийОтчет.Ссылка)
	               |ИЗ
	               |	Документ.МедицинскийОтчет КАК МедицинскийОтчет
	               |ГДЕ
	               |	МедицинскийОтчет.Ссылка <> &мСохраненныйДок
	               |	И МедицинскийОтчет.ИсточникОтчета = &ИсточникОтчета
	               |	И МедицинскийОтчет.Организация = &Организация
	               |	И МедицинскийОтчет.ДатаНачала МЕЖДУ &ДатаНачалаНач И &ДатаНачалаКон
	               |	И МедицинскийОтчет.ДатаОкончания МЕЖДУ &ДатаКонцаНач И &ДатаКонцаКон
	               |	И МедицинскийОтчет.Вид = &Вариант";
			   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 ИЛИ РезультатЗапроса.Получить(0).Получить(0) = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОперацииПриВосстановленииМедицинскогоОтчета(Форма) Экспорт

	Форма.СтруктураРеквизитовФормы.мВариант = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	Если Форма.СтруктураРеквизитовФормы.мВариант = Неопределено Тогда
		Форма.СтруктураРеквизитовФормы.мВариант = 0;
	КонецЕсли;

	Если Форма.СтруктураРеквизитовФормы.мВариант = 0 Тогда
		Если Форма.СтруктураРеквизитовФормы.Свойство("ВидДокумента") Тогда
			Форма.СтруктураРеквизитовФормы.ВидДокумента = 0;
		КонецЕсли;
	Иначе
		Если Форма.СтруктураРеквизитовФормы.Свойство("ВидДокумента") Тогда
			Форма.СтруктураРеквизитовФормы.ВидДокумента = 1;
		КонецЕсли;
		Форма.НомерКорректировки = Форма.СтруктураРеквизитовФормы.мВариант;
	КонецЕсли;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты("");
	
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
	
		Если РеквизитФормы.Имя = "мДеревоСтраницОтчета"
		   И Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ПоказатьСтраницу = 1;
			Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ВыводНаПечать    = 1;
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме) Экспорт
	
	// Заполняем строку.
	Для Каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = СтрокаТаблицы[КолонкаИмя];
		Иначе
			Строка1.Области[НазвЯчейки].Текст = СтрокаТаблицы[КолонкаИмя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПредставлениеВидаДокумента(Вид) Экспорт
	
	Если Вид = 0 Тогда
		Возврат "П";
	ИначеЕсли Вид = Неопределено Тогда
		Возврат "-";
	Иначе
		Возврат "К/" + Вид;
	КонецЕсли;
	
КонецФункции

Функция СвернутьДанныеТабличногоПоля(Данные) Экспорт
	
	ТП = Новый ТаблицаЗначений;
	ТП.Колонки.Добавить("Имя");
	ТП.Колонки.Добавить("Кол");
	ТП.Колонки.Добавить("Номер");
	ТП.Колонки.Добавить("Знач");
	
	Для Каждого Стр Из Данные Цикл
		НоваяСтрока = ТП.Добавить();
		НоваяСтрока.Имя = Стр.Ключ;
		НоваяСтрока.Кол = 1;
		НоваяСтрока.Знач = Стр.Значение;
	КонецЦикла;
	
	ТП.Сортировать("Имя");
	
	Для Каждого Стр Из ТП Цикл
		Имя = Стр.Имя;
		
		Если ЭтоКодПоказателяП(Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПризнакКвадратика = Ложь; // Признак того, что значение является частью другого значения.
		
		НомерСимвола = СтрДлина(Имя);
		
		БылаЦифра = Ложь;
		
		Пока НомерСимвола > 0 Цикл
			
			Симв = Сред(Имя, НомерСимвола, 1);
			КодСимв = КодСимвола(Симв);
			
			Если (КодСимв >= КодСимвола("0") И КодСимв <= КодСимвола("9")) ИЛИ (Симв = "_") Тогда
				
				Если Симв = "_" Тогда
					Если БылаЦифра Тогда
						
						ПризнакКвадратика = Истина;
						НомерСимвола = НомерСимвола - 1;
						Прервать;
						
					КонецЕсли;
				Иначе
					БылаЦифра = Истина;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола - 1;
			
		КонецЦикла;
		
		Если БылаЦифра Тогда
			Корень = Лев(Стр.Имя, НомерСимвола);
			Номер = Сред(Стр.Имя, НомерСимвола + 1);
			Попытка
				Стр.Номер = Число( ?( Лев(Номер, 1) = "_", Сред(Номер, 2), Номер));
			Исключение
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибки преобразования номера из окончания: %1 === %2'"), Корень, Номер);
	
				Сообщение.Сообщить();
				
			КонецПопытки;
			Стр.Имя = Корень;
		КонецЕсли;
		
	КонецЦикла;
	
	ТП.Сортировать("Имя, Номер");
	
	ТП2 = ТП.Скопировать();
	ТП2.Свернуть("Имя", "Кол");
	
	Для Каждого Стр Из ТП2 Цикл
		Если Стр.Имя = "П" ИЛИ Стр.Имя = "ЧНП" Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Кол > 1 Тогда
			ЗначениеСводногоПоказателя = ВычислитьЗначениеПоКорню(ТП, Стр.Имя);
			НайдЗнач = Неопределено;
			Если НЕ Данные.Свойство(Стр.Имя, НайдЗнач) Тогда
				Данные.Вставить(Стр.Имя, ЗначениеСводногоПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ВычислитьЗначениеПоКорню(Табл, Корень)
	
	Табл2 = Табл.Скопировать();
	ИтоговоеЗначение = "";
	
	Для Каждого Стр Из Табл2 Цикл
		
		Имя = Стр.Имя;
		Если Имя = Корень Тогда
			ИтоговоеЗначение = ИтоговоеЗначение + Стр.Знач;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ((ВРЕГ(Лев(Корень, 4)) = "ДАТА") ИЛИ (СтрЧислоВхождений(Корень, "Дата") <> 0)) 
		И (((СтрДлина(ИтоговоеЗначение)=8) ИЛИ (СтрДлина(ИтоговоеЗначение)=6)) ИЛИ (ПустаяСтрока(ИтоговоеЗначение)))Тогда
		
		Если ПустаяСтрока(ИтоговоеЗначение) Тогда
			ИтоговоеЗначение = "00.00.0000";
		Иначе
			ИтоговоеЗначение = Лев(ИтоговоеЗначение, 2) + "." + Сред(ИтоговоеЗначение, 3, 2) + "." + Сред(ИтоговоеЗначение, 5);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеЗначение;
	
КонецФункции

Функция ФИОНаписаноВерно(Знач СтрокаПараметр, ПроверятьТолькоРусскиеБуквы = Ложь) Экспорт
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);
	
	СписокДопустимыхЗначений = Новый Соответствие;
	СписокДопустимыхЗначений.Вставить(КодСимвола(" "), " ");
	СписокДопустимыхЗначений.Вставить(КодСимвола("."), ".");
	СписокДопустимыхЗначений.Вставить(КодСимвола("-"), "-");
	СписокДопустимыхЗначений.Вставить(КодСимвола("ё"), "ё");
	СписокДопустимыхЗначений.Вставить(КодСимвола("Ё"), "Ё");
	
	КодA = КодСимвола("A");
	КодZ = КодСимвола("z");
	КодА = КодСимвола("А");
	КодЯ = КодСимвола("я");
	Если  ПроверятьТолькоРусскиеБуквы Тогда
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если ((Код >= КодА) И (Код <= КодЯ)) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если (((Код >= КодA) И (Код <= КодZ)) ИЛИ ((Код >= КодА) И (Код <= КодЯ))) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат 1;
	
КонецФункции

Функция ПредставлениеПериодаДокументаВыгрузкаМедицинскихОтчетов(Док) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Док.ПериодПо) Тогда
		Возврат "";
	КонецЕсли;
	
	ГодДокСтрока = Формат(Год(Док.ПериодПо), "ЧГ=");
	МесяцДок = Месяц(Док.ПериодПо);
	Если МесяцДок = 1 Тогда
		Возврат "По итогам января " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 2 Тогда
		Возврат "По итогам февраля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 3 Тогда
		Возврат "По итогам I квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 4 Тогда
		Возврат "По итогам апреля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 5 Тогда
		Возврат "По итогам мая " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 6 Тогда
		Возврат "По итогам II квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 7 Тогда
		Возврат "По итогам июля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 8 Тогда
		Возврат "По итогам августа " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 9 Тогда
		Возврат "По итогам III квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 10 Тогда
		Возврат "По итогам октября " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 11 Тогда
		Возврат "По итогам ноября " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 12 Тогда
		Возврат "По итогам " + ГодДокСтрока + "г.";
	КонецЕсли;
	
КонецФункции

Процедура ВывестиОбласти(СписокВыводимыхНаПечатьОбластей, ТабличноеПоле, ПечатнаяФорма)
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
				
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		ОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Пока ОбластьОграничителиУмещаетсяНаСтраницу Цикл
			
			// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
			ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
			
			Если ВыводимыеОбластиУмещаютсяНаСтраницу Тогда
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьОграничители);
				ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРаздела(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле)
	Перем ИмяЛиста;
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	Перем ВидПечати;
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
			
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(
			ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле));
		Возврат СписокПечатныхФорм;
	КонецЕсли;

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличноеПоле.Области Цикл
							
		Если НЕ ТипЗнч(Область) = Тип("РисунокТабличногоДокумента")
		   И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(ТабличноеПоле, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(ТабличноеПоле, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(ТабличноеПоле, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		// Защита против частей разделов, которые не помещаются на лист, если даже
		// выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			Если Рез <> Ложь ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		ОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа.
		ТаблПоле = ТабличноеПоле.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока ОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если ВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
					ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
						ИтоговыйТаблДок.Напечатать();
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
			ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
				ИтоговыйТаблДок.Напечатать();
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СписокПечатныхФорм;
	
КонецФункции

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле)
	Перем ИмяЛиста;
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	Перем ВидПечати;
	Перем Верх;
	Перем Низ;
	Перем Секции;

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста", ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",   Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",         ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",              Верх);
	СтруктураПараметровЛиста.Свойство("Низ",               Низ);
	СтруктураПараметровЛиста.Свойство("Секции",            Секции);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	Если Секции = Неопределено Тогда
		
		// Перебираем все области таблицы и добавляем в список 
		// только те области, которые являются секциями таблицы.
		Для Каждого Область Из ТабличноеПоле.Области Цикл
			
			Если НЕ ТипЗнч(Область) = Тип("РисунокТабличногоДокумента")
				И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				// Добавляем в список имя области и ее верхнюю координату.
				Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
					Продолжить;
				КонецЕсли;
				
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Секция Из Секции Цикл
			
			ОбластьСекции = ТабличноеПоле.Области.Найти(Секция);
			
			Если ОбластьСекции = Неопределено
			 ИЛИ ОбластьСекции.Верх < Верх
			 ИЛИ ОбластьСекции.Низ > Низ Тогда
				
				Продолжить
				
			КонецЕсли;
						
			СписокВыводимыхНаПечатьОбластей.Добавить(ОбластьСекции.Верх, ОбластьСекции.Имя);
			
		КонецЦикла
		
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	ВывестиОбласти(СписокВыводимыхНаПечатьОбластей, ТабличноеПоле, ПечатнаяФорма);
		
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(ЗаголовокФормы) + " (" + СокрП(ИмяЛиста) + ")");
	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ПечатнаяФорма.Напечатать();
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПолучитьКартуИменованныхГруппСтрок(ТаблПоле)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	
	Для Каждого Обл Из ТаблПоле.Области Цикл
		Если НЕ ТипЗнч(Обл) = Тип("РисунокТабличногоДокумента") И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Карта;
	
КонецФункции

Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьОбластиМногострочнойЧасти(ТаблПоле, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(ТаблПоле);
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТаблПоле.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТаблПоле.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	КонецЦикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции

Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 По 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если (ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") ИЛИ Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
КонецФункции

Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
КонецФункции

Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если (ТипЗнч(ТекОбл) = Тип("РисунокТабличногоДокумента") ИЛИ ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если (ТипЗнч(ТекОбл) = Тип("РисунокТабличногоДокумента") ИЛИ ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник) И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ВывестиНаПечатьЛистОбщая(ЗаголовокФормы,
								   СтруктураПараметровЛиста,
								   ТабличноеПоле,
								   СписокПечатаемыхЛистов) Экспорт
	
	Перем ИмяЛиста;
	Перем Ориентация;
	Перем ВидПечати;
	Перем Секции;
	Перем НомерСтраницы;
		
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста", ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",   Ориентация);
	СтруктураПараметровЛиста.Свойство("ВидПечати",         ВидПечати);
		
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");

	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);
		
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(ТабличноеПоле);
	
	НомЛиста = 0;
	
	Для Каждого СтраницаРаздела Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		
		СтруктураПараметровЛиста.Вставить("Верх", СтраницаРаздела.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", СтраницаРаздела.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
		
		Если СтруктураПараметровЛиста.Свойство("Секции", Секции) Тогда
			
			МассивМногострочныхЧастей = Новый Массив;
			
			Для Каждого Секция Из Секции Цикл
				
				ОбластьСекции = ТабличноеПоле.Области.Найти(Секция);
				
				Если ОбластьСекции = Неопределено
					ИЛИ ОбластьСекции.Верх < СтраницаРаздела.Верх
					ИЛИ ОбластьСекции.Низ > СтраницаРаздела.Низ
					ИЛИ СтрНайти(ВРег(ОбластьСекции.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") = 0 Тогда
					
					Продолжить
					
				КонецЕсли;
				
				МассивМногострочныхЧастей.Добавить(ОбластьСекции.Имя);
				
			КонецЦикла;
			
			Если МассивМногострочныхЧастей.Количество() = 0 Тогда
				
				СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", Неопределено);
				
			Иначе
				
				СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", МассивМногострочныхЧастей);
				
			КонецЕсли;
			
		Иначе	
			
			СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть",
				ПолучитьКартуМногострочныхСекцийЛиста(ТабличноеПоле, СтраницаРаздела.Верх, СтраницаРаздела.Низ));
				
		КонецЕсли;
				
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(ЗаголовокФормы, СтруктураПараметровЛиста, ТабличноеПоле);
		
		СчЛиста = 0;
		Для Каждого ПечатныйЛист Из ПечатныеЛисты Цикл
			СписокПечатаемыхЛистов.Вставить(СчЛиста, ПечатныйЛист.Значение, ИмяЛиста);
			СчЛиста = СчЛиста + 1;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьКартуЛистовРаздела(ТаблПоле)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	КолСтрок = ТаблПоле.ВысотаТаблицы;
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТаблПоле.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	Возврат Карта;
	
КонецФункции

Функция	ПолучитьКартуМногострочныхСекцийЛиста(ТаблДок, Верх, Низ)
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если НЕ ТипЗнч(Обл) = Тип("РисунокТабличногоДокумента") И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И СтрНайти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
КонецФункции

Функция ЭтоКодПоказателяП(КодПок)
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВывестиПоказатель(Текст, ЗначениеЯчейки, ИмяЯчейки, ПризнакФормата, ФорматВыгрузки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		Текст.ДобавитьСтроку(ИмяЯчейки + ":")
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки)));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда
			Если НЕ ЗначениеЗаполнено(Дата(ЗначениеЯчейки)) = 1 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":");
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D")));
			КонецЕсли;
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			Если ЗначениеЯчейки = "0" Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе	
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + ВРЕГ(СокрЛП(Знч)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытииМедицинскогоОтчета(Форма) Экспорт
		
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено И Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> МедицинскаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Форма.СтруктураРеквизитовФормы.мСохраненныйДок)) И Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Заблокирован() Тогда
		Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Разблокировать();
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено
	   И Форма.СтруктураРеквизитовФормы.мСохраненныйДок <> МедицинскаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Форма.СтруктураРеквизитовФормы.мСохраненныйДок)) Тогда
	
		РазблокироватьДанныеДляРедактирования(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПринтерДоступен() Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;
	Возврат ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТаблДок, ТаблДок, Ложь);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции внешних Медицинских отчетов.

// Возвращает двоичные данные с файлом - внешним отчетом (реквизит ВнешнийОтчетХранилище), 
// для переданного в качестве параметра элемента справочника МедицинскиеОтчеты.
// Параметры:
//		МедОтч - ссылка на элемент справочника МедицинскиеОтчеты.
// Возвращаемое значение:
//		Содержимое реквизита ВнешнийОтчетХранилище элемента справочника с учетом кэша.
Функция ФайлОтчета(МедОтч, НеЗапоминатьВКэше = Ложь) Экспорт
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МедОтч.ВнешнийОтчетХранилище.Получить());
	ВременныйФайл = ВнешниеОтчеты.Подключить(АдресВоВременномХранилище, , Ложь,	ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	Возврат ВременныйФайл;
	
КонецФункции

Функция ПолучитьНизМногострочнойЧасти(ТаблПоле, ИмяОбласти)
	
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(ТаблПоле);
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	Низ = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	КонецЦикла;
	Возврат Низ - 1;
	
КонецФункции

#КонецОбласти

#Область ПроцессыОбработкиДокументов

Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура УправлениеДоступностьюРеквизитов(Форма, БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	
КонецПроцедуры

#КонецОбласти
