#Область ПрограммныйИнтерфейс

// Обновляет отбор списка вредных факторов по номеру подпункта.
//
// Параметры:
//  ТекстПоиска		 - Строка				- Строка поиска по номеру.
//  Список			 - ДанныеФормыСтруктура	- Реквизит формы.
//  ЭлементСписок	 - ПолеФормы	 		- Элемент формы со список пунктов вредности.
//
Процедура ОбновитьОтборСпискаВредныхФакторовПоНомеруПП(ТекстПоиска, Список, ЭлементСписок) Экспорт
	
	мсТекстПоиска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ТекстПоиска, ".");
	
	ЗначениеПоиска = "";
	Для Каждого ФрагментТекстаПоиска Из мсТекстПоиска Цикл
		ФрагментТекстаПоиска = СокрЛП(ФрагментТекстаПоиска);
		Если СтрДлина(ФрагментТекстаПоиска) = 2
			И Лев(ФрагментТекстаПоиска,1) = "0"
		Тогда
			ФрагментТекстаПоиска = Прав(ФрагментТекстаПоиска, 2);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ЗначениеПоиска, ФрагментТекстаПоиска, ".");
	КонецЦикла;
	
	ЗначениеПоискаКон = ЗначениеПоиска + "99";
	
	Если Прав(ЗначениеПоиска, 1) = "." Тогда
		ЗначениеПоиска = ЗначениеПоиска + " ";
	КонецЕсли;
	
	мсЭлементыНаУдаление = Новый Массив;
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерПП")
			И ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Заполнено
		Тогда
			мсЭлементыНаУдаление.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из мсЭлементыНаУдаление Цикл
		Список.Отбор.Элементы.Удалить(ЭлементОтбора);	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗначениеПоиска) Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("НомерПП");
		ЭлементОтбора.ПравоеЗначение = ЗначениеПоиска;
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения	 = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("НомерПП");
		ЭлементОтбора.ПравоеЗначение = ЗначениеПоискаКон;
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения	 = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	КонецЕсли;
	
	ЭлементСписок.Обновить();
	
КонецПроцедуры

// Обновить отбор списка пунктов вредности по нужному приказу периодических медосмотров.
//
// Параметры:
//  Список			 - ДинамическийСписок - список
//  ЭлементСписок	 - ЭлементФормы	- элемент список
//  Приказ29н		 - Булево - приказ 29н
//  Приказ302н		 - Булево - приказ 302н 
//
Процедура ОбновитьОтборСпискаПоВерсииПриказа(Список, ЭлементСписок, Приказ29н, Приказ302н) Экспорт
	
	мсЭлементыНаУдаление = Новый Массив;
	
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если (ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерПП") Или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерПП_302н"))
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
		Тогда
			мсЭлементыНаУдаление.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из мсЭлементыНаУдаление Цикл
		Список.Отбор.Элементы.Удалить(ЭлементОтбора);	
	КонецЦикла;
	
	Если Не Приказ29н Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("НомерПП_302н");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;
	
	Если Не Приказ302н Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("НомерПП");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;
	
	ЭлементСписок.Обновить();
	
КонецПроцедуры

Функция ПолучитьГруппуПриказовСправок() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.ПриказыМедосмотров.СправкиИИныеМедосмотры");
КонецФункции

#Область РаботаСоСправкамиОказаниеУслуг // Розничные медосмотры (медосмотры справок) в документе ОказаниеУслуг.

Процедура УдалитьСправкуИзСоставаСправокНоменклатураПродолжение(Результат, ДопПараметры) Экспорт
	
	ЭтаФорма = ДопПараметры.ЭтаФорма;
	Элементы = ЭтаФорма.Элементы;
	Объект = ЭтаФорма.Объект;
	
	УдаляемаяНоменклатура = ДопПараметры.УдаляемаяНоменклатура; 
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Объект.Работы.Удалить(Объект.Работы.Индекс(УдаляемаяНоменклатура));
	КонецЕсли;
	
	ТекущиеДанные = Элементы["СоставСправокСправки"].ТекущиеДанные;
	УдаляемыеЭлементыДействий = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки", ТекущиеДанные.Номенклатура));
	Для Каждого Эл Из УдаляемыеЭлементыДействий Цикл
		ЭтаФорма["СоставСправок"].Удалить(ЭтаФорма["СоставСправок"].Индекс(Эл));
	КонецЦикла;
	
	УдаляемыеЭлементы = ЭтаФорма["СоставСправокСправки"].НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура)); 
	Для Каждого Эл Из УдаляемыеЭлементы Цикл
		ЭтаФорма["СоставСправокСправки"].Удалить(ЭтаФорма["СоставСправокСправки"].Индекс(Эл));
		ЭтаФорма.РаботыПослеУдаления(Неопределено);
	КонецЦикла;
	ЭтаФорма.СоставСправокСправкиПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

Процедура УдалениеДействийСправкиИзСоставаСправокНоменклатураПродолжение(Результат, ДопПараметры) Экспорт
	
	ЭтаФорма = ДопПараметры.ЭтаФорма;
	Объект = ЭтаФорма.Объект;
	Элементы = ЭтаФорма.Элементы;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = Элементы["СоставСправокСправки"].ТекущиеДанные;
		ДействияДляУдаления = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки",ТекущиеДанные.Номенклатура)); 
		Для Каждого Эл Из ДействияДляУдаления Цикл
			СтрокиСПересечениемДействий = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("Действие",Эл.Действие));
			УдалитьСтрокиДействий = Истина;
			Если СтрокиСПересечениемДействий.Количество() > 1 Тогда
				Для Каждого Строка Из СтрокиСПересечениемДействий Цикл
					Если Строка.НоменклатураСправки <> ТекущиеДанные.Номенклатура 
						И Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", Строка.НоменклатураСправки)).Количество() = 0
					Тогда
						УдалитьСтрокиДействий = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если УдалитьСтрокиДействий Тогда
				НайденныеРаботы = Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", Эл.НоменклатураДействия));
				Для Каждого Работа Из НайденныеРаботы Цикл
					Объект.Работы.Удалить(Объект.Работы.Индекс(Работа));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Элементы["СоставСправокСправки"].ТекущиеДанные;
	УдаляемыеЭлементыДействий = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки", ТекущиеДанные.Номенклатура));
	Для Каждого Эл Из УдаляемыеЭлементыДействий Цикл
		ЭтаФорма["СоставСправок"].Удалить(ЭтаФорма["СоставСправок"].Индекс(Эл));
	КонецЦикла;
	
	УдаляемыеЭлементы = ЭтаФорма["СоставСправокСправки"].НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура)); 
	Для Каждого Эл Из УдаляемыеЭлементы Цикл
		ЭтаФорма["СоставСправокСправки"].Удалить(ЭтаФорма["СоставСправокСправки"].Индекс(Эл));
		ЭтаФорма.РаботыПослеУдаления(Неопределено);
	КонецЦикла;
	ЭтаФорма.СоставСправокСправкиПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

Процедура ОбновитьСоставСправокПоСтроке(ЭтаФорма, ИндексТекущейСтроки, Номенклатура = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "СоставСправок") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ЭтаФорма.Объект;
	Элементы = ЭтаФорма.Элементы;
	СтрокаРаботы = Неопределено;
	
	Если Номенклатура = Неопределено Тогда
		СтрокаРаботы = Объект.Работы[ИндексТекущейСтроки];
		Номенклатура = СтрокаРаботы.Номенклатура;
	КонецЕсли;
	
	// Удаление состава номенклатуры медосмотра для текущей строки из реквизита формы СоставСправок.
	СтрокиТекущейНоменклатуры = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки", Номенклатура));
	ИсключенныеДействия = Новый Массив;
	
	Для Каждого Эл Из СтрокиТекущейНоменклатуры Цикл
		Если Не Эл.Использовать Тогда
			ИсключенныеДействия.Добавить(Эл.Действие);
		КонецЕсли;
		ЭтаФорма["СоставСправок"].Удалить(ЭтаФорма["СоставСправок"].Индекс(Эл));
		Найденный = ЭтаФорма["СоставСправокСправки"].НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		
		Для Каждого Эл Из Найденный Цикл
			ЭтаФорма["СоставСправокСправки"].Удалить(ЭтаФорма["СоставСправокСправки"].Индекс(Эл));
		КонецЦикла;
	КонецЦикла;
	
	// Пересчет состава номенклатуры медосмотра для текущей строки из реквизита формы СоставСправок.
	Если ЗначениеЗаполнено(Номенклатура) И НеобходимПересчетСправки(Номенклатура) Тогда
		Контекст = МедосмотрыСервер.ОбновитьСоставСправокПоСтрокеСервер(Номенклатура, Объект.Клиент, Объект.Дата, Объект.Прейскурант);
		Если Контекст <> Неопределено Тогда
			ЦенаНоменклатурыРаботы = 0;
			Если Контекст.СпособФомированияЦеныМедосмотра = ПредопределенноеЗначение("Перечисление.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямСРедактированием") Тогда
				Если Контекст.ДействияМедосмотра.Количество() <> 0 Тогда
					НоваяСправка = ЭтаФорма["СоставСправокСправки"].Добавить();
					НоваяСправка.Номенклатура = Номенклатура;
					
					Для Каждого Эл Из Контекст.ДействияМедосмотра Цикл
						НовоеДействие = ЭтаФорма["СоставСправок"].Добавить();
						НовоеДействие.Действие = Эл.Действие;
						НовоеДействие.НоменклатураДействия = Эл.Номенклатура;
						НовоеДействие.НоменклатураСправки = Номенклатура;
						НовоеДействие.Цена = Эл.Цена;
						Если ИсключенныеДействия.Найти(НовоеДействие.Действие) <> Неопределено Тогда
							НовоеДействие.Использовать = Ложь;
						Иначе
							НовоеДействие.Использовать = Истина;
							ЦенаНоменклатурыРаботы = ЦенаНоменклатурыРаботы + Эл.Цена;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли Контекст.СпособФомированияЦеныМедосмотра = ПредопределенноеЗначение("Перечисление.СпособФормированияЦеныМедосмотра.ЦенаРассчитываетсяПоДействиямБезРедактирования") Тогда
				Для Каждого Эл Из Контекст.ДействияМедосмотра Цикл
					ЦенаНоменклатурыРаботы = ЦенаНоменклатурыРаботы + Эл.Цена;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаРаботы <> Неопределено Тогда
				СтрокаРаботы.Цена = ЦенаНоменклатурыРаботы;
				ЭтаФорма.РаботыЦенаПриИзменении(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы["ГруппаСоставСправок"].Видимость = ЭтаФорма["СоставСправок"].Количество() > 0;
	
КонецПроцедуры

Процедура УдалитьСправкуИзСоставаСправокПоНоменклатуре(ЭтаФорма, Номенклатура) Экспорт
	
	// Не надо делать операцию, если эта номенклатура справки дважды в документе.
	Если ЭтаФорма.Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = ЭтаФорма.Элементы;
	
	СтрокиТекущейНоменклатуры = ЭтаФорма["СоставСправок"].НайтиСтроки(Новый Структура("НоменклатураСправки", Номенклатура));
	
	Для Каждого Эл Из СтрокиТекущейНоменклатуры Цикл
		
		ЭтаФорма["СоставСправок"].Удалить(ЭтаФорма["СоставСправок"].Индекс(Эл));
		Найденный = ЭтаФорма["СоставСправокСправки"].НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		
		Для Каждого Эл Из Найденный Цикл
			ЭтаФорма["СоставСправокСправки"].Удалить(ЭтаФорма["СоставСправокСправки"].Индекс(Эл));
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы["ГруппаСоставСправок"].Видимость = ЭтаФорма["СоставСправок"].Количество() > 0;
	
КонецПроцедуры

Функция ОбновитьСоставСправок(ЭтаФорма) Экспорт
	
	Объект = ЭтаФорма.Объект;
	
	// Обновим справки из работ
	ОбновляемыеРаботы = Новый Массив;
	
	Если глНоменклатураСправокЦенаПоПолуКлиента <> Неопределено И глНоменклатураСправокЦенаПоПолуКлиента.Количество() <> 0 Тогда
		
		Для Каждого Эл Из Объект.Работы Цикл
			Если глНоменклатураСправокЦенаПоПолуКлиента.Найти(Эл.Номенклатура) <> Неопределено Тогда
				ОбновляемыеРаботы.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Эл Из ОбновляемыеРаботы Цикл
		
		ОбновитьСоставСправокПоСтроке(ЭтаФорма, Эл.НомерСтроки - 1);
		
	КонецЦикла;
	
	// Обновим справки в табличной части для которых выполнили замену на номенклатурные позиции
	ОбновляемаяНоменклатура = Новый Массив;
	
	Для Каждого Эл Из ЭтаФорма["СоставСправокСправки"] Цикл
		
		Если Объект.Работы.НайтиСтроки(Новый Структура("Номенклатура", Эл.Номенклатура)).Количество() = 0 Тогда
			ОбновляемаяНоменклатура.Добавить(Эл.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Эл Из ОбновляемаяНоменклатура Цикл
		ОбновитьСоставСправокПоСтроке(ЭтаФорма, Неопределено, Эл);
	КонецЦикла;
	
КонецФункции

Функция НеобходимПересчетСправки(Номенклатура)
	
	мНоменклатурДляПересчета = МедосмотрыСерверПовтИсп.ПолучитьСписокНоменклатурМедосмотровТребующихПересчетСтоимости();
	Возврат мНоменклатурДляПересчета.Найти(Номенклатура) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВыборПрофессииРаботника

Процедура ОбработкаВыбораПрофессии(ЭтаФорма, СтандартнаяОбработка, РеквизитФормы = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь; 
	
	Контекст = Новый Структура;
	Контекст.Вставить("ЭтаФорма", ЭтаФорма);
	Контекст.Вставить("РеквизитФормы", РеквизитФормы);
	Оповещние = Новый ОписаниеОповещения("ОбработкаОповещнияВыбораПрофессии", ЭтотОбъект, Контекст);
	
	Отбор = Новый Структура("ВидКлассификатора", ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих"));
	СтруктураПараметров = Новый Структура("ПроизвольныйЗапрос, Отбор", ТекстЗапросаДляВыбораПрофессии(), Отбор);
	ОткрытьФорму("Справочник.КлассификаторыМинЗдрава.ФормаВыбора", СтруктураПараметров, ЭтаФорма, , , , Оповещние);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещнияВыбораПрофессии(ВыбраннаяПрофессия, Контекст) Экспорт
	
	Если ВыбраннаяПрофессия <> Неопределено Тогда 
		НаменованиеПрофессии = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбраннаяПрофессия, "НаименованиеПолное");
		Если Контекст.РеквизитФормы Тогда
			Контекст.ЭтаФорма.Профессия = НаменованиеПрофессии;
		Иначе
			Контекст.ЭтаФорма.Объект.Профессия = НаменованиеПрофессии;
		КонецЕсли;
		Контекст.ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса профессий для дин. списка формы выбора в ПМО и СПМО
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляВыбораПрофессии() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СправочникКлассификаторыМинЗдрава.Ссылка,
		|	СправочникКлассификаторыМинЗдрава.ПометкаУдаления,
		|	СправочникКлассификаторыМинЗдрава.Родитель,
		|	СправочникКлассификаторыМинЗдрава.ЭтоГруппа,
		|	СправочникКлассификаторыМинЗдрава.Наименование,
		|	СправочникКлассификаторыМинЗдрава.НаименованиеПолное,
		|	СправочникКлассификаторыМинЗдрава.ВидКлассификатора,
		|	СправочникКлассификаторыМинЗдрава.НПП,
		|	СправочникКлассификаторыМинЗдрава.Архив,
		|	СправочникКлассификаторыМинЗдрава.OIDСправочникаИсточника,
		|	СправочникКлассификаторыМинЗдрава.УИДЕГИСЗ,
		|	СправочникКлассификаторыМинЗдрава.УИДЕГИСЗРодителя,
		|	СправочникКлассификаторыМинЗдрава.ВерсияКлассификатораМинздрава,
		|	СправочникКлассификаторыМинЗдрава.OIDКлассификатораМинздрава,
		|	СправочникКлассификаторыМинЗдрава.Атрибуты,
		|	СправочникКлассификаторыМинЗдрава.Предопределенный,
		|	СправочникКлассификаторыМинЗдрава.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.КлассификаторыМинЗдрава КАК СправочникКлассификаторыМинЗдрава
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВЫРАЗИТЬ(КлассификаторыМинЗдрава.НаименованиеПолное КАК СТРОКА(1024)) КАК НаименованиеПолное,
		|			МИНИМУМ(КлассификаторыМинЗдрава.УИДЕГИСЗ) КАК УИДЕГИСЗ
		|		ИЗ
		|			Справочник.КлассификаторыМинЗдрава КАК КлассификаторыМинЗдрава
		|		ГДЕ
		|			КлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВЫРАЗИТЬ(КлассификаторыМинЗдрава.НаименованиеПолное КАК СТРОКА(1024))) КАК УникальныеПрофессии
		|		ПО (СправочникКлассификаторыМинЗдрава.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих))
		|			И (УникальныеПрофессии.УИДЕГИСЗ = СправочникКлассификаторыМинЗдрава.УИДЕГИСЗ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти