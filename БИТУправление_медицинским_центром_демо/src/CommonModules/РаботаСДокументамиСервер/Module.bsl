#Область ПрограммныйИнтерфейс

// Получить данные номенклатуры при подборе.
//
// Параметры:
//  Номенклатура				 - СправочникСсылка.Номенклатура	 - номенклатура.
//  ИспользоватьЕдиницуТоваров	 - Булево - учитывать ли ед. товаров позиции.
// 
// Возвращаемое значение:
//  Структура - значения реквизитов номенклатуры и дополнительные данные о ней.
//
Функция ДанныеНоменклатурыПодборВДокумент(Номенклатура, ИспользоватьЕдиницуТоваров = Ложь) Экспорт
	
	ДанныеНоменклатуры = ОбщегоНазначенияСервер.ПолучитьРеквизитыСсылки(Номенклатура);
	ДанныеНоменклатуры.Вставить("ЭтоУслуга", ДанныеНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга);
	ДанныеНоменклатуры.Вставить("ЭтоНабор" , ДанныеНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор);
	
	Если ИспользоватьЕдиницуТоваров Тогда
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Ценообразование.ПолучитьЕдиницуПродажиНоменклатуры(Номенклатура));
	Иначе
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", ДанныеНоменклатуры.ЕдиницаХраненияОстатков);
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

// Получить данные номенклатуры, необходимые для обработки чтения её штрихкода.
//
// Параметры:
//  Номенклатура				 - СправочникСсылка.Номенклатура	 - номенклатура.
//  ИспользоватьЕдиницуТоваров	 - Булево - учитывать ли ед. товаров позиции.
// 
// Возвращаемое значение:
//  Структура - значения реквизитов номенклатуры и дополнительные данные о ней.
//
Функция ДанныеНоменклатурыДляОбработкиЧтенияШК(Номенклатура, ИспользоватьЕдиницуТоваров = Ложь) Экспорт
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	ДанныеНоменклатуры.Вставить("ЭтоМатериал",	 ДанныеНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал);
	ДанныеНоменклатуры.Вставить("ЭтоУслуга",	 ДанныеНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга);
	ДанныеНоменклатуры.Вставить("ЭтоНабор" ,	 ДанныеНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор);
	
	// Единица измерения по-умолчанию для операции с учетом ИспользоватьЕдиницуТоваров.
	Если ДанныеНоменклатуры.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		// Складская номенклатура.
		Если ИспользоватьЕдиницуТоваров Тогда
			ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Ценообразование.ПолучитьЕдиницуПродажиНоменклатуры(Номенклатура));
		Иначе
			ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Номенклатура.ЕдиницаХраненияОстатков);
		КонецЕсли;
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмеренияКоэффициент", ДанныеНоменклатуры.ЕдиницаИзмерения.Коэффициент);
	Иначе
		// Услуга или набор.
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Неопределено);
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмеренияКоэффициент", Неопределено);
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

// Процедура расчета суммы документа
//
// Параметры:
//  Объект	 - ДокументОбъект	 - документ.
//
Процедура РасчитатьСуммуДокумента(Объект) Экспорт
	
	Если Объект.Ссылка.Метаданные() = Метаданные.Документы.ОказаниеУслуг Тогда
		Если ЗначениеЗаполнено(Объект.Документ) Тогда
			ВремСуммаРаботы = 0;
			мсСтр = Объект.Работы.НайтиСтроки(Новый Структура("Сертификат,НеОплачиваетсяПолисом", Справочники.Сертификаты.ПустаяСсылка(),Истина));
			Для Каждого стр Из мсСтр Цикл
				ВремСуммаРаботы = ВремСуммаРаботы + стр["Сумма"];          
			КонецЦикла;
			
			ВремСуммаМатериалы = 0;
			мсСтр = Объект.Материалы.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
			Для Каждого стр Из мсСтр Цикл
				ВремСуммаМатериалы = ВремСуммаМатериалы + стр["Сумма"];          
			КонецЦикла;
			
			ВремСуммаТовары = 0;
			мсСтр = Объект.Товары.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
			Для Каждого стр Из мсСтр Цикл
				ВремСуммаТовары = ВремСуммаТовары + стр["Сумма"];          
			КонецЦикла;
			
			ВремСуммаСертификаты = 0;
			мсСтр = Объект.Сертификаты.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
			Для Каждого стр Из мсСтр Цикл
				ВремСуммаСертификаты = ВремСуммаСертификаты + стр["Сумма"];          
			КонецЦикла;
			
			ВремСуммаСертификатыПополнение = 0;                          
			мсСтр = Объект.ПополнениеСертификатов.НайтиСтроки(Новый Структура("НеОплачиваетсяПолисом",Истина));
			Для Каждого стр Из мсСтр Цикл
				ВремСуммаСертификатыПополнение = ВремСуммаСертификатыПополнение + стр["Сумма"];          
			КонецЦикла;
		Иначе
			ВремСуммаРаботы = 0;
			мсСтр = Объект.Работы.НайтиСтроки(Новый Структура("Сертификат", Справочники.Сертификаты.ПустаяСсылка()));
			Для Каждого стр Из мсСтр Цикл
				ВремСуммаРаботы = ВремСуммаРаботы + стр["Сумма"];          
			КонецЦикла;
			
			Попытка ВремСуммаМатериалы	 = Объект.Материалы.Итог("Сумма");	Исключение КонецПопытки;
			Попытка ВремСуммаТовары		 = Объект.Товары.Итог("Сумма");		Исключение КонецПопытки;
			Попытка ВремСуммаСертификаты = Объект.Сертификаты.Итог("Сумма");Исключение КонецПопытки;
			Попытка ВремСуммаСертификатыПополнение = Объект.ПополнениеСертификатов.Итог("Сумма");Исключение КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка ВремСуммаРаботы			 = Объект.Работы.Итог("Сумма"); 	Исключение КонецПопытки;
		Попытка ВремСуммаМатериалы		 = Объект.Материалы.Итог("Сумма");	Исключение КонецПопытки;
		Попытка ВремСуммаТовары			 = Объект.Товары.Итог("Сумма");		Исключение КонецПопытки;
		Попытка ВремСуммаСертификаты	 = Объект.Сертификаты.Итог("Сумма");Исключение КонецПопытки;
	КонецЕсли;
	
	Попытка ВремСуммаУслуги				= Объект.Услуги.Итог("Сумма");				Исключение КонецПопытки;
	Попытка ВремСуммаПрочее				= Объект.Прочее.Итог("Сумма");				Исключение КонецПопытки;
	Попытка ВремСуммаОплатаПоставщикам	= Объект.ОплатаПоставщикам.Итог("Сумма");	Исключение КонецПопытки;
	
	ВремСумма	= ?(ЗначениеЗаполнено(ВремСуммаТовары)				 , ВремСуммаТовары,0)
				+ ?(ЗначениеЗаполнено(ВремСуммаРаботы)				 , ВремСуммаРаботы,0) 
				+ ?(ЗначениеЗаполнено(ВремСуммаМатериалы)			 , ВремСуммаМатериалы,0) 
				+ ?(ЗначениеЗаполнено(ВремСуммаСертификаты)			 , ВремСуммаСертификаты,0)
				+ ?(ЗначениеЗаполнено(ВремСуммаСертификатыПополнение), ВремСуммаСертификатыПополнение,0)
				+ ?(ЗначениеЗаполнено(ВремСуммаПрочее)				 , ВремСуммаПрочее,0) 
				+ ?(ЗначениеЗаполнено(ВремСуммаОплатаПоставщикам)	 , ВремСуммаОплатаПоставщикам,0)
				+ ?(ЗначениеЗаполнено(ВремСуммаУслуги)	 			 , ВремСуммаУслуги,0);
	
	// Меняем сумму документа на форме, если ее значение изменилось.
	Попытка
		Если ВремСумма <> Объект.СуммаДокумента Тогда 
			Объект.СуммаДокумента = ВремСумма; 
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Находит единицу номенклатуры по наименованию.
//
// Параметры:
//  Наименование - Строка, СправочникСсылка		 - Наименование единицы измерения.
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура-владелец.
// 
// Возвращаемое значение:
//   СправочникСсылка.ЕдиницаИзмерения.
//
Функция НайтиЕдИзмерения(Наименование, Номенклатура) Экспорт
	Если ТипЗнч(Наименование) = Тип("Строка") Тогда
		Возврат Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Наименование,Истина,,Номенклатура);
	Иначе
		Возврат Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Наименование.Наименование,Истина,,Номенклатура);
	КонецЕсли;	
КонецФункции	

// Получить владельца объекта ссылочного типа.
//
// Параметры:
//  Ссылка	 - ДокументСсылка	 - ссылка на объект.
// 
// Возвращаемое значение:
//   - ДокументСсылка.
//
Функция ПолучитьВладельца(Ссылка) Экспорт
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка.ПолучитьОбъект().Владелец;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	

// Процедура заполняет цену строки табличной части документа
//
// Параметры:
//  ЭтотОбъект				 - ДокументОбъект	 - объект документа-владельца строки табличной части
//  ИмяТЧ					 - Строка			 - Имя табличной части строки
//  СтруктураСтрока			 - Структура		 - Строка табличной части документа.
//  Прейскурант				 - СправочникСсылка.Прейскуранты - прайс.
//  фМетаданныеРеквизитыТЧ	 - Метаданные					 - метаданные реквизитов.
// 
// Возвращаемое значение:
//   Булево.
//
Функция дкУстановитьЦенуСтрокиТабЧастиСервер(ЭтотОбъект, ИмяТЧ, СтруктураСтрока, Прейскурант = Неопределено, Знач фМетаданныеРеквизитыТЧ = Неопределено) Экспорт
	
	Перем ЕстьЦена, ЕстьКоличествоСумма, ЕстьХарактеристика, ЕстьЕдиницаИзмерения;
	
	СтрРезультат = Новый Структура;
	
	МетаданныеОбъекта = ЭтотОбъект.Ссылка.Метаданные();
	
	Если фМетаданныеРеквизитыТЧ = Неопределено
		Или ТипЗнч(фМетаданныеРеквизитыТЧ) = Тип("КоллекцияОбъектовМетаданных")
	Тогда
		Если фМетаданныеРеквизитыТЧ = Неопределено Тогда
			фМетаданныеРеквизитыТЧ	= МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты;
		КонецЕсли;
		
		ЕстьЦена = фМетаданныеРеквизитыТЧ.Найти("Цена") <> Неопределено;
		ЕстьЕдиницаИзмерения = фМетаданныеРеквизитыТЧ.Найти("ЕдиницаИзмерения") <> Неопределено;
		ЕстьХарактеристика	= фМетаданныеРеквизитыТЧ.Найти("ХарактеристикаНоменклатуры") <> Неопределено;
		ЕстьКоличествоСумма	= фМетаданныеРеквизитыТЧ.Найти("Количество") <> Неопределено
							И фМетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено;
	Иначе
		ЕстьЦена = фМетаданныеРеквизитыТЧ.Свойство("Цена");
		ЕстьЕдиницаИзмерения = фМетаданныеРеквизитыТЧ.Свойство("ЕдиницаИзмерения");
		ЕстьХарактеристика	= фМетаданныеРеквизитыТЧ.Свойство("ХарактеристикаНоменклатуры");
		ЕстьКоличествоСумма	= фМетаданныеРеквизитыТЧ.Свойство("Количество") И фМетаданныеРеквизитыТЧ.Свойство("Сумма");
	КонецЕсли;
	
	Если Прейскурант = Неопределено Тогда
		Прейскурант = ОтраслевыеДополнения.ПолучитьПрейскурантДляСтрокиТабличнойЧасти(ЭтотОбъект,  СтруктураСтрока);
		Если Не ЗначениеЗаполнено(Прейскурант) 
			 И МетаданныеОбъекта.Реквизиты.Найти("Прейскурант") <> Неопределено 
		Тогда
			Прейскурант = ЭтотОбъект.Прейскурант;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЦена И ЗначениеЗаполнено(Прейскурант) Тогда
		
		Если ЕстьХарактеристика Тогда
			
			Если ЕстьЕдиницаИзмерения Тогда
				СтруктураЦен = ПолучитьЦену(ЭтотОбъект, Прейскурант, СтруктураСтрока.Номенклатура, ЭтотОбъект.Дата,СтруктураСтрока.ХарактеристикаНоменклатуры, СтруктураСтрока.ЕдиницаИзмерения);
			Иначе
				СтруктураЦен = ПолучитьЦену(ЭтотОбъект, Прейскурант,СтруктураСтрока.Номенклатура,ЭтотОбъект.Дата, СтруктураСтрока.ХарактеристикаНоменклатуры);	
			КонецЕсли;
			
		Иначе                                                     
			СтруктураЦен = ПолучитьЦену(ЭтотОбъект, Прейскурант, СтруктураСтрока.Номенклатура,ЭтотОбъект.Дата,, СтруктураСтрока.ЕдиницаИзмерения);	
		КонецЕсли;                                                                                            
		
		Если ЗначениеЗаполнено(СтруктураЦен) и ЗначениеЗаполнено(СтруктураЦен.Цена) Тогда
			СтрРезультат.Вставить("Цена",СтруктураЦен.Цена);
		Иначе
			Если ЕстьХарактеристика Тогда
				СтруктураЦен = ПолучитьЦену(ЭтотОбъект, Прейскурант, СтруктураСтрока.Номенклатура,ЭтотОбъект.Дата, СтруктураСтрока.ХарактеристикаНоменклатуры, СтруктураСтрока.Номенклатура.ЕдиницаХраненияОстатков);
			Иначе                                                     
				СтруктураЦен = ПолучитьЦену(ЭтотОбъект, Прейскурант, СтруктураСтрока.Номенклатура, ЭтотОбъект.Дата, , СтруктураСтрока.Номенклатура.ЕдиницаХраненияОстатков);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураЦен) И ЗначениеЗаполнено(СтруктураЦен.Цена) Тогда
				СтрРезультат.Вставить("Цена",СтруктураЦен.Цена * СтруктураСтрока.Коэффициент / 
					?(ЗначениеЗаполнено(СтруктураЦен.ЕдиницаИзмерения.Коэффициент),СтруктураЦен.ЕдиницаИзмерения.Коэффициент,0));
			Иначе
				СтрРезультат.Вставить("Цена",0);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьКоличествоСумма Тогда
			СтрРезультат.Вставить("Сумма", СтрРезультат.Цена * СтруктураСтрока.Количество);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрРезультат.Свойство("Сумма") Тогда
		СтрРезультат.Вставить("Сумма", 0);
	КонецЕсли;
	
	Если Не СтрРезультат.Свойство("Цена") Тогда
		СтрРезультат.Вставить("Цена", 0);
	КонецЕсли;	
	
	Возврат СтрРезультат;
	
КонецФункции

// Переопределяемая функция получения цены номенклатуры в контексте документа.
//
// Параметры:
//  ДанныеШапкиОбъекта			 - Структура, ДокументОбъект				 - данные шапки документа для получения пола по полю Клиент.
//  Прейскурант					 - СправочникСсылка.Прейскуранты			 - прейскурант.
//  Номенклатура				 - СправочникСсылка.Номенклатура			 - номенклатура.
//  НаМомент					 - Дата, МоментВремени						 - дата цен.
//  ХарактеристикаНоменклатуры	 - СправочникСсылка.ХарактеристикаНоменклатуры	 - характеристика.
//  ЕдиницаИзмерения			 - СправочникСсылка.ЕдиницаИзмерения			 - единица измерения.
// 
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьЦену(ДанныеШапкиОбъекта, Прейскурант, Номенклатура, НаМомент, ХарактеристикаНоменклатуры = Неопределено, ЕдиницаИзмерения = Неопределено) Экспорт
	
	// Отработка переопределяемых реализаций
	ОбщийМодульПереопределяемый = ОбщегоНазначения.ОбщийМодуль("РаботаСДокументамиСерверПереопределяемый");
	Если ОбщийМодульПереопределяемый <> Неопределено Тогда
		СтандартнаяОбработка = Истина;
		Цена = ОбщийМодульПереопределяемый.ПолучитьЦену(СтандартнаяОбработка, ДанныеШапкиОбъекта, Прейскурант, Номенклатура, НаМомент, ХарактеристикаНоменклатуры, ЕдиницаИзмерения);
		Если Не СтандартнаяОбработка Тогда
			Возврат Новый Структура("Цена",Цена);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ценообразование.ПолучитьЦену(Прейскурант, Номенклатура, НаМомент, ХарактеристикаНоменклатуры, ЕдиницаИзмерения);
	
КонецФункции

// Обработчик изменения документа-основания в документах платежных поручений
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект.ПлатежноеПоручениеВходящее, ДокументОбъект.ПлатежноеПоручениеИсходящее - документ.
//
Процедура ПлатежноеПоручениеПриИзмененииДокументОснования(ДокументОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		
		КонтрагентОснования = Неопределено;
		Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			КонтрагентОснования = ДокументОбъект.ДокументОснование.Клиент;
		ИначеЕсли ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
				Или ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		Тогда
			КонтрагентОснования = ДокументОбъект.ДокументОснование.Контрагент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтрагентОснования) 
			И ДокументОбъект.Контрагент <> КонтрагентОснования 
		Тогда
			ДокументОбъект.Контрагент = КонтрагентОснования;
			Если ТипЗнч(КонтрагентОснования) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаДокумента", ДокументОбъект.ДокументОснование.Метаданные()) Тогда
			ДокументОбъект.СуммаДокумента = ДокументОбъект.ДокументОснование.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	                                                           
КонецПроцедуры

// Общий обработчик заполнения при вводе нового на основании
//  Совмещен с заполнением реквизитов по умолчанию для новых документов
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект заполняемого документа
//  Основание	 - ДокументСсылка	 - ссылка на объект-основание заполнения
//  Копирование	 - Булево			 - признак копирования при вводе нового объекта.
//
Процедура ОбработкаЗаполнения(ЭтотОбъект, Основание = Неопределено, Копирование = Ложь) Экспорт
	дкОбработкаЗаполнения(ЭтотОбъект, Основание, Копирование);
КонецПроцедуры

// Обработка изменения реквизита документа на форме.
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект			 - Документ, реквизит которого обрабатывается.
//  Имя			 - Строка					 - Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ТекСтрока	 - СтрокаТабличнойЧасти		 - Ссылка на строку табличной части документа, реквизит которой обрабатывается.
//  		Имеет смысл только для табличных частей документов.
//  ЭтаФорма	 - ФормаКлиентскогоПриложения	 - Ссылка на форму документа. Если значение неопределено,
//  	производится программная обработка реквизитов.
//  ДопПараметры - Структура					 - Структура, содержащая дополнительные параметры обработки реквизита.
// 
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
//
Функция ОбработкаРеквизита(ЭтотОбъект,Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено) Экспорт
	Возврат дкОбработкаРеквизита(ЭтотОбъект, Имя, ТекСтрока, ЭтаФорма, ДопПараметры);	
КонецФункции

// Процедура расчета суммы документа
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения	 - форма открытого документа.
//
Процедура РасчитатьСуммуДокументаСервер(ЭтаФорма) Экспорт
	дкРасчитатьСуммуДокумента(ЭтаФорма);	
КонецПроцедуры

// Проверяет, что в табличной части нет товаров
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт
	дкПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, Отказ, Заголовок);
КонецПроцедуры													
													
// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено,
                                 Отказ, Заголовок) Экспорт
	дкПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, Отказ, Заголовок);
КонецПроцедуры

// Проверяет склады в документе на принадлежность филиалу документа. Ложь - в документе склад другого филиала.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ.
//
// Возвращаемое значение:
//   Булево. 
//
Функция ПроверитьПринадлежностьСкладаФилиалу(Документ) Экспорт
	
	РазныеФилиалы = Ложь;
	ТекстСообщения = "";
	Филиал = Неопределено;
	Склад = Неопределено;
	СкладПолучатель = Неопределено;
	
	МетаданныеДокумента = Документ.Метаданные();
	Реквизиты = МетаданныеДокумента.Реквизиты;
	
	Филиал = РаботаСДокументамиСервер.ФилиалДокумента(Документ);
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Реквизиты.Найти("Склад") <> Неопределено Тогда
		Склад = Документ.Склад;
	ИначеЕсли Реквизиты.Найти("СкладОтправитель") <> Неопределено Тогда
		Склад = Документ.СкладОтправитель;
		СкладПолучатель = Документ.СкладПолучатель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад)
		И ЗначениеЗаполнено(Склад.Филиал)
	Тогда
		РазныеФилиалы = Филиал <> Склад.Филиал;
	КонецЕсли;
	
	// Если перемещение, то проверяем второй склад документа.
	Если ЗначениеЗаполнено(СкладПолучатель) Тогда
		
		РазныеФилиалыУПолучателя = (Филиал <> СкладПолучатель.Филиал И ЗначениеЗаполнено(СкладПолучатель.Филиал));
		РазныеФилиалы = РазныеФилиалы И РазныеФилиалыУПолучателя;
		
	КонецЕсли;
	
	Если РазныеФилиалы Тогда
		ТекстСообщения = НСтр("ru='Филиал склада не совпадает с филиалом документа!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура заполняет цену строки табличной части документа.
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект документа-владельца строки табличной части
//  ИмяТЧ		 - Строка			 - Имя табличной части строки
//  ТекСтрока	 - СтрокаТабличнойЧасти	 - Строка табличной части документа.
//
Процедура УстановитьЦенуСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока) Экспорт
	дкУстановитьЦенуСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока);	
КонецПроцедуры

// Процедура пересчитывает сумму строки по скидке.
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект - Документ, для которого пересчитывается скидка
//  ИмяТЧ		 - Строка - Имя табличной части
//  ТекСтрока	 - СтрокаТабличнойЧасти	 - Пересчитываемая строка.
//
Процедура ПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока) Экспорт
	дкПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока);
КонецПроцедуры

// Заполняет поле представления внешнего участника денежной операции для печати в ордере.
//
// Параметры:
//  Участник					 - СправочникСсылка.Клиент, СправочникСсылка.Сотрудники	 - физ. лицо, оплачивающее, либо получающее денежные средства.
//  Представление				 - Строка												 - в этот параметр будет записано представление участника операции.
//  ИНН							 - Строка														 - ИНН
//  ИгнорироватьУчетнуюПолитику	 - Булево														 - Следует ли учитывать настройку из учетной политики.
//
Процедура ЗаполнитьУчастникаИИННДенежнойОперации(Знач Участник, Представление, ИНН, Адрес, ИгнорироватьУчетнуюПолитику = Ложь) Экспорт
	
	АвтозаполнениеПолучателяИИНН = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АвтозаполнениеПолучателяИИНН");
	
	Если (ИгнорироватьУчетнуюПолитику ИЛИ АвтозаполнениеПолучателяИИНН) И ЗначениеЗаполнено(Участник) Тогда
		ТипОбъекта = ТипЗнч(Участник);
		Если ТипОбъекта = Тип("СправочникСсылка.Клиенты") Или ТипОбъекта = Тип("СправочникОбъект.Клиенты") Тогда
			
			Клиент = Участник;
			
			ЗаконныйПредставительКлиента = Участник.ЗаконныйПредставитель;
			Если ЗначениеЗаполнено(ЗаконныйПредставительКлиента) Тогда 
				Если ТипЗнч(ЗаконныйПредставительКлиента) = Тип("СправочникСсылка.Клиенты") Тогда
					Клиент = ЗаконныйПредставительКлиента;
				ИначеЕсли ТипЗнч(ЗаконныйПредставительКлиента) = Тип("Строка") Тогда
					Представление = ЗаконныйПредставительКлиента;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Представление	= ОбщегоНазначения.ФИОФизЛица(Клиент);
			ИНН				= Клиент.ИНН;
			Адрес			= "";
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Или ТипОбъекта = Тип("СправочникОбъект.Контрагенты") Тогда
			Представление	= Участник.Наименование;
			ИНН				= Участник.ИНН;
			Адрес			= РаботаСКлиентами.АдресКлиентаДляДокументов(Участник);
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") Или ТипОбъекта = Тип("СправочникОбъект.Сотрудники") Тогда
			Представление	= ОбщегоНазначения.ФИОФизЛица(Участник);
			ИНН				= "";
			Адрес			= ""; 
		Иначе
			Представление	= "";
			ИНН				= "";
			Адрес			= "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу материалов расходами на работы согласно нормам расходов
//
// Параметры:
//  ТаблицаРабот - ТаблицаЗначений - содержит таблицу номенклатуры услуг
//  ТаблицаМатериалов - ТаблицаЗначений - заполняемая таблица
//  СтруктураШапкиДокумента - Структура - значения реквизитов документа
//  КорректировкаПоНормеНаДокумент - Булево - контроль норм расходов на документ по флагу ОбщийРасходНаУслугиДокумента
//  ТаблицаКоличестваМатериалов - ТаблицаЗначений - количество материалов, которое присутствует в документе независимо от заполнения
//
Процедура ЗаполнитьРасходМатериаловПоНормамНаРаботы(ТаблицаРабот, ТаблицаМатериалов,
	СтруктураШапкиДокумента = Неопределено, КорректировкаПоНормеНаДокумент = Неопределено,
	ТаблицаСохраненныхМатериалов = Неопределено) Экспорт
	
	Если КорректировкаПоНормеНаДокумент = Неопределено Тогда
		КорректировкаПоНормеНаДокумент = Истина;
	КонецЕсли;

	ВидДокумента = Неопределено;
	ЭтоЗаказ = Ложь;
	Если СтруктураШапкиДокумента <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураШапкиДокумента, "ВидДокумента")
	Тогда
		ВидДокумента =  СтруктураШапкиДокумента.ВидДокумента;
		Если ВидДокумента = "ПередачаЗаказаВМастерскую"
			Или ВидДокумента = "ВыполнениеЗаказа"
		Тогда
			ЭтоЗаказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса = "ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, Количество" 
	+ ?(ЭтоЗаказ, "",", КлючСтроки, кНомерСтроки")
	+ " ПОМЕСТИТЬ ТаблицаРабот ИЗ &Источник КАК Таблица ";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Источник", ТаблицаРабот);
	Запрос.Выполнить();
	
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	НормыРасходаМатериалов.Материал КАК Материал,
	|	НормыРасходаМатериалов.ХарактеристикаМатериала КАК ХарактеристикаМатериала,
	|	НормыРасходаМатериалов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(НормыРасходаМатериалов.Норма) КАК Норма,
	|	НормыРасходаМатериалов.ВходитВСтоимость КАК ВходитВСтоимость,
	|	НормыРасходаМатериалов.Номенклатура КАК Работа,
	|	НормыРасходаМатериалов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НормыРасходаМатериалов.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ТаблицаРабот.Количество КАК Количество,"
	+ ?(ЭтоЗаказ, "",
	"	ТаблицаРабот.КлючСтроки,
	|	ТаблицаРабот.кНомерСтроки,")
	+
	"	НормыРасходаМатериалов.НеЗависитОтКоличестваУслуги КАК НеЗависитОтКоличестваУслуги
	|ПОМЕСТИТЬ втНормыРасходов
	|ИЗ
	|	ТаблицаРабот КАК ТаблицаРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормыРасходаМатериалов КАК НормыРасходаМатериалов
	|		ПО ТаблицаРабот.Номенклатура = НормыРасходаМатериалов.Номенклатура
	|			И ТаблицаРабот.ХарактеристикаНоменклатуры = НормыРасходаМатериалов.ХарактеристикаНоменклатуры
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	НормыРасходаМатериалов.Материал,
	|	НормыРасходаМатериалов.ЕдиницаИзмерения,
	|	НормыРасходаМатериалов.Номенклатура,
	|	НормыРасходаМатериалов.ХарактеристикаНоменклатуры,
	|	НормыРасходаМатериалов.ХарактеристикаМатериала,
	|	НормыРасходаМатериалов.ЕдиницаИзмерения.Коэффициент,
	|	ТаблицаРабот.Количество,"
	+ ?(ЭтоЗаказ, "",
	"	ТаблицаРабот.КлючСтроки,
	|	ТаблицаРабот.кНомерСтроки,")
	+
	"	НормыРасходаМатериалов.ВходитВСтоимость,
	|	НормыРасходаМатериалов.НеЗависитОтКоличестваУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНормыРасходов.Работа КАК Работа,
	|	втНормыРасходов.ХарактеристикаНоменклатуры КАК ХарактеристикаРаботы,
	|	втНормыРасходов.Материал КАК Номенклатура,
	|	втНормыРасходов.ХарактеристикаМатериала КАК ХарактеристикаНоменклатуры,
	|	втНормыРасходов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втНормыРасходов.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА втНормыРасходов.НеЗависитОтКоличестваУслуги
	|			ТОГДА втНормыРасходов.Норма
	|		ИНАЧЕ втНормыРасходов.Норма * втНормыРасходов.Количество
	|	КОНЕЦ КАК Количество,"
	+ ?(ЭтоЗаказ, "",
	"втНормыРасходов.КлючСтроки КАК КлючСтрокиРаботы,
	|	втНормыРасходов.кНомерСтроки КАК кНомерСтроки,")
	+
	"	втНормыРасходов.ВходитВСтоимость КАК ВходитВСтоимость"
	"ИЗ
	|	втНормыРасходов КАК втНормыРасходов
	|
	|УПОРЯДОЧИТЬ ПО"
	+ ?(ЭтоЗаказ,"",
	"	кНомерСтроки,")
	+
	"	ХарактеристикаРаботы";
	Запрос.Текст = ТекстЗапроса;
	
	Если ЭтоЗаказ Тогда
		Если ВидДокумента = "ПередачаЗаказаВМастерскую" 
			Или ВидДокумента = "ПриемЗаказаИзМастерской"
		Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие",
								"НормыРасходаМатериалов.Производственная
								|	И НормыРасходаМатериалов.ДляВнешнегоПроизводства");
		ИначеЕсли ВидДокумента = "ВыполнениеЗаказа" Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие",
								"НормыРасходаМатериалов.Производственная");
		КонецЕсли; 
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ИСТИНА");	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда		
 
		ПолучатьКлючСтроки = Ложь;
		Прейскурант = Неопределено;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
			Если СтруктураШапкиДокумента.Свойство("Прейскурант") Тогда
				Прейскурант = СтруктураШапкиДокумента.Прейскурант;
				Если СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("Документ") <> Неопределено Тогда
					Попытка
						ВидПолиса = ДопСерверныеФункции.ПолучитьРеквизит(СтруктураШапкиДокумента.Документ, "ВидПолиса");
						ПрейскурантПолиса = ДопСерверныеФункции.ПолучитьРеквизит(ВидПолиса, "Прейскурант");
						Если ЗначениеЗаполнено(ПрейскурантПолиса) Тогда
							Прейскурант = ПрейскурантПолиса;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли; 
			
			Если ВидДокумента = "ОказаниеУслуг" Тогда
				ПолучатьКлючСтроки = Истина;
			Иначе
				Результат.Колонки.Найти("КлючСтрокиРаботы").Имя = "КлючСтроки";
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаМатериалов.Колонки.Добавить("ХарактеристикаРаботы");
		
		Для Каждого ВыборкаНормы Из Результат Цикл
			
			СтрокаМатериалы = ТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериалы, ВыборкаНормы);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаМатериалы, "КлючСтрокиРаботы") Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаНормы, "КлючСтрокиРаботы") Тогда
					СтрокаМатериалы.КлючСтрокиРаботы = ВыборкаНормы.КлючСтрокиРаботы;
				Иначе
					СтрокаМатериалы.КлючСтрокиРаботы = ВыборкаНормы.кНомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
			Если ПолучатьКлючСтроки Тогда
				СтрокаМатериалы.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(ТаблицаМатериалов);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Прейскурант)
				И Не ВыборкаНормы.ВходитВСтоимость
			Тогда
				СтруктураЦен = Ценообразование.ПолучитьЦену(Прейскурант, 
															СтрокаМатериалы.Номенклатура,
															СтруктураШапкиДокумента.Дата,
															СтрокаМатериалы.ХарактеристикаНоменклатуры,
															СтрокаМатериалы.ЕдиницаИзмерения);
															
				Если ТаблицаМатериалов.Колонки.Найти("Цена") <> Неопределено Тогда
					СтрокаМатериалы.Цена = СтруктураЦен.Цена;	
				КонецЕсли; 
				Если ТаблицаМатериалов.Колонки.Найти("Сумма") <> Неопределено Тогда	
					СтрокаМатериалы.Сумма = СтрокаМатериалы.Цена * СтрокаМатериалы.Количество;
				КонецЕсли;	
				Если ТаблицаМатериалов.Колонки.Найти("СуммаСоСкидкой") <> Неопределено Тогда
					СтрокаМатериалы.СуммаСоСкидкой = СтрокаМатериалы.Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если КорректировкаПоНормеНаДокумент Тогда
			КорректировкаРасходовПоНормамНаДокумент(ТаблицаМатериалов, ТаблицаСохраненныхМатериалов);	
		КонецЕсли;
		
		ТаблицаМатериалов.Колонки.Удалить("ХарактеристикаРаботы");
		
	КонецЕсли;
	
КонецПроцедуры

// Убирает строки, по которым есть излишек расходов по нормам на документ
//
// Параметры:
//  ТаблицаМатериалов			 - ТаблицаЗначений	 - корректируемая таблица таблица
//  ТаблицаКоличестваМатериалов	 - ТаблицаЗначений	 - количество материалов, которое присутствует в документе независимо от заполнения
//
Процедура КорректировкаРасходовПоНормамНаДокумент(ТаблицаМатериалов, ТаблицаКоличестваМатериалов = Неопределено) Экспорт
	
	Если ТаблицаКоличестваМатериалов = Неопределено Тогда
		ТаблицаКоличестваМатериалов = ТаблицаМатериалов.СкопироватьКолонки();
	КонецЕсли; 
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		МенеджерЗаписи = РегистрыСведений.НормыРасходаМатериалов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Материал = Строка.Номенклатура;
		МенеджерЗаписи.ХарактеристикаМатериала = Строка.ХарактеристикаНоменклатуры;
		МенеджерЗаписи.Номенклатура = Строка.Работа;
		МенеджерЗаписи.ХарактеристикаНоменклатуры = Строка.ХарактеристикаРаботы;
		МенеджерЗаписи.Прочитать();
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
		НайденныеСтроки = ТаблицаКоличестваМатериалов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицыКоличестваМатериалов = НайденныеСтроки[0];
		Иначе
			СтрокаТаблицыКоличестваМатериалов = Неопределено;
		КонецЕсли; 
		
		Если СтрокаТаблицыКоличестваМатериалов = Неопределено Тогда
			СтрокаТаблицыКоличестваМатериалов = ТаблицаКоличестваМатериалов.Добавить();
			СтрокаТаблицыКоличестваМатериалов.Номенклатура = Строка.Номенклатура;
			СтрокаТаблицыКоличестваМатериалов.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			СтрокаТаблицыКоличестваМатериалов.Количество = Строка.Количество;
		Иначе
			Если МенеджерЗаписи.ОбщийРасходНаУслугиДокумента Тогда
				Если СтрокаТаблицыКоличестваМатериалов.Количество >= Строка.Количество Тогда
					Строка.Количество = 0;
				Иначе
					Строка.Количество = Строка.Количество - СтрокаТаблицыКоличестваМатериалов.Количество;
					СтрокаТаблицыКоличестваМатериалов.Количество = СтрокаТаблицыКоличестваМатериалов.Количество + Строка.Количество;
				КонецЕсли;
			Иначе
				СтрокаТаблицыКоличестваМатериалов.Количество = СтрокаТаблицыКоличестваМатериалов.Количество + Строка.Количество;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	мОбрИнд = ТаблицаМатериалов.Количество()-1;
	Для Сч = 0 По мОбрИнд Цикл	
		СтрокаТЗ = ТаблицаМатериалов[мОбрИнд-Сч];
		Если СтрокаТЗ.Количество = 0 Тогда
			ТаблицаМатериалов.Удалить(мОбрИнд-Сч);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Возвращает ссылку на филиал документа.
//
// Параметры:
//  Документ - ДокументСсылка - документ, имеющий реквизит филиала.
// 
// Возвращаемое значение:
//  СправочникСсылка.Филиалы - филиал.
//
Функция ФилиалДокумента(Документ) Экспорт
	
	Попытка
		Филиал = ДопСерверныеФункции.ПолучитьРеквизит(Документ, ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов());
	Исключение
		Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	КонецПопытки;
	
	Возврат Филиал;
	
КонецФункции

// Возвращает ссылку на организацию документа.
//
// Параметры:
//  Документ - ДокументСсылка - документ, имеющий реквизит филиала.
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации - организация.
//
Функция ОрганизацияДокумента(Документ) Экспорт
	
	Филиал		 = ФилиалДокумента(Документ);
	Организация	 = ДопСерверныеФункции.ПолучитьРеквизит(Филиал, "Организация");
	
	Возврат Организация;
	
КонецФункции

// Возвращает документ возврата по исходному документу.
//
// Параметры:
//  ИсходныйДокумент - ДокументСсылка.ОказаниеУслуг, ДокументСсылка.ОплатаПлатежнойКартой - проверяемый исходный документ.
// 
// Возвращаемое значение:
//   ДокументСсылка, Неопределено.
//
Функция НайтиВозвратПоДокументу(ИсходныйДокумент) Экспорт
	
	ТекстЗапроса = "";
	
	Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ОказаниеУслуг.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ОказаниеУслуг КАК ОказаниеУслуг
		               |ГДЕ
		               |	ОказаниеУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту)
		               |	И ОказаниеУслуг.ДокументОснование = &Основание
		               |	И ОказаниеУслуг.Проведен";
		
	ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ВозвратПоПлатежнойКарте.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ВозвратПоПлатежнойКарте КАК ВозвратПоПлатежнойКарте
		               |ГДЕ
		               |	ВозвратПоПлатежнойКарте.ДокументОснование = &Основание
		               |	И ВозвратПоПлатежнойКарте.Проведен";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Основание", ИсходныйДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает документ возврата по исходному документу.
//
// Параметры:
//  ИсходныйДокумент - ДокументСсылка - исходный документ, типом которого предусмотрено создание коррекций.
// 
// Возвращаемое значение:
//   ДокументСсылка, Неопределено.
//
Функция НайтиКоррекциюПоДокументу(ИсходныйДокумент) Экспорт
	
	ИмяДокумента = ИсходныйДокумент.Метаданные().Имя;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаШапкиДокумента
	|ГДЕ
	|	ДокументОснование = &Основание
	|	И Коррекция
	|	И Проведен";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основание", ИсходныйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Таблица сметы по документу. Параметр "ПорядокКолонок" определяет, какие стандартные колонки функции оставить и в каком порядке.
// Нацелена на использование в word-шаблонах печати.
//
// Параметры:
//  Документ		 - ДокументСсылка	 - документ, имеющий таблицу с номенклатурой и ценами.
//  ПараметрыСметы	 - Структура		 - используются ключи: "ПорядокКолонок", "ТолькоУслуги","ОставитьБесплатные", "ОставитьСертификатыНаОплату", "Абонементы".
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено.
//
Функция СметаПоДокументу(Документ, ПараметрыСметы = Неопределено) Экспорт
	
	ТипСумма  = Новый ОписаниеТипов("Число, Строка"); // Перед возвратом сметы будет применёт Формат к суммовому показателю.
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Смета = Новый ТаблицаЗначений;
	Смета.Колонки.Добавить("НомерПП", ТипЧисло); // Номер строки в итоговой таблице как отдельная колонка для вывода в word-шаблоны.
	Смета.Колонки.Добавить("НаименованиеПозиции", ТипСтрока);
	
	// Детали товарной позиции
	Смета.Колонки.Добавить("Номенклатура");
	Смета.Колонки.Добавить("НоменклатураНаименование", ТипСтрока); // Дозаполняется далее в этой процедуре.
	Смета.Колонки.Добавить("НоменклатураНаименованиеПолное", ТипСтрока); // Дозаполняется далее в этой процедуре.
	Смета.Колонки.Добавить("НоменклатураВидНоменклатуры");
	
	Смета.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Смета.Колонки.Добавить("СерияНоменклатуры",			 Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Смета.Колонки.Добавить("ЕдиницаИзмерения",			 Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	// Количество, цены, скидки, суммы.
	Смета.Колонки.Добавить("Количество",	 ТипЧисло);
	Смета.Колонки.Добавить("Цена",			 ТипСумма);
	Смета.Колонки.Добавить("Сумма",			 ТипСумма);
	Смета.Колонки.Добавить("СуммаСкидки",	 ТипСумма);
	Смета.Колонки.Добавить("ПроцентСкидки",	 ТипЧисло);

	Смета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	// Номенклатура медицинских услуг
	Смета.Колонки.Добавить("НМУ", Новый ОписаниеТипов("СправочникСсылка.НоменклатураМедицинскихУслуг"));
	Смета.Колонки.Добавить("НМУКод", ТипСтрока);
	Смета.Колонки.Добавить("НМУНаименование", ТипСтрока);
	
    // Координаты позиции в исходном документе
	Смета.Колонки.Добавить("ИмяТЧ", ТипСтрока);
	Смета.Колонки.Добавить("НомерСтроки", ТипЧисло);
	
	// Обращение к специализированной функции в зависимости от типа документа.
	ИмяДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Документ);
	
	Если ИмяДокумента = "Документ.ОказаниеУслуг" Тогда
		ПозицииДокумента = Документы.ОказаниеУслуг.СметаПоДокументу(Документ, ПараметрыСметы);
	//ИначеЕсли ИмяДокумента = "Документ.КомплексныйРасчетКлиента" Тогда
	//	ПозицииДокумента = КомплексныеРасчетыКлиентовСервер.СметаПоДокументу(Документ, ПараметрыСметы);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ПозицияДокумента Из ПозицииДокумента Цикл
		СтрокаСмета = Смета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСмета, ПозицияДокумента);
	КонецЦикла;
	
	// Вычисление полей из реквизитов Номенклатуры
	НоменклатураМассив = ОбщегоНазначения.ВыгрузитьКолонку(Смета, "Номенклатура");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоменклатураМассив", НоменклатураМассив);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	Номенклатура.НоменклатураМедицинскихУслуг КАК НМУ,
	|	Номенклатура.НоменклатураМедицинскихУслуг.Код КАК НМУКод,
	|	Номенклатура.НоменклатураМедицинскихУслуг.ПолноеНаименование КАК НМУНаименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&НоменклатураМассив)"
	;
	РеквизитыНоменклатуры = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаСмета Из Смета Цикл
		РеквизитыПозицииМассив = РеквизитыНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", СтрокаСмета.Номенклатура));
		Если РеквизитыПозицииМассив.Количество()<>0 Тогда
			РеквизитыПозиции = РеквизитыПозицииМассив[0];
			ЗаполнитьЗначенияСвойств(СтрокаСмета, РеквизитыПозиции);
		КонецЕсли;
	КонецЦикла;
	
	// Удаление строк по параметрам сметы
	СметаПоДокументу_УдалитьСтрокиПоПараметрамСметы(Смета, Документ, ПараметрыСметы);
	
	// Заполнение "НомерПП"
	НомерСтроки = 1;
	Для Каждого СтрокаСмета Из Смета Цикл
		СтрокаСмета.НомерПП = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Вычисление колонки "НаименованиеПозиции"
	СметаПоДокументу_ЗаполнитьНаименованиеПозиций(Смета, Документ, ПараметрыСметы);
	
	// Применение параметра "ПорядокКолонок".
	Если ПараметрыСметы.Свойство("ПорядокКолонок") Тогда
		
		Попытка
			ПорядокКолонок = СтрЗаменить(ПараметрыСметы.ПорядокКолонок," ","");
			
			Смета.Свернуть(ПорядокКолонок);
			
			МассивПорядка = СтрРазделить(ПорядокКолонок, ",", Ложь);
			Позиция = 1;
			Для Каждого ЭлементПорядка Из МассивПорядка Цикл
				
				Колонка = Смета.Колонки.Найти(ЭлементПорядка);
				ТекПозиция = Смета.Колонки.Индекс(Колонка) + 1;
				Если ТекПозиция <> Позиция Тогда
					Смета.Колонки.Сдвинуть(Колонка, Позиция - ТекПозиция); 
				КонецЕсли;
				
				Позиция = Позиция + 1;
			КонецЦикла;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	// Форматирование суммовых колонок (после всех удалений строк, т.к. числовое значение при удалении может требоваться)
	Если Не ПараметрыСметы.Свойство("ФорматЧисел") Тогда // Сейчас реализуется только как полная отмена стандартного форматирования.
		Для Каждого СтрокаСметы Из Смета Цикл
			Для Каждого Колонка Из Смета.Колонки Цикл
				
				Если  Колонка.ТипЗначения.СодержитТип(Тип("Число"))
					И Колонка.ТипЗначения.СодержитТип(Тип("Строка"))
					И ТипЗнч(СтрокаСметы[Колонка.Имя]) = Тип("Число")
				Тогда
					СтрокаСметы[Колонка.Имя] = ОбщегоНазначенияКлиентСервер.ФорматСумм(СтрокаСметы[Колонка.Имя],,"0");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Смета;
	
КонецФункции

#Область ОбработчикиПодписокПрочие

// Выполняет общие действия проведения документов, если требуется.
//
// Параметры:
//  Источник		 - ДокументОбъект	 - Документ, который проводится.
//  Отказ			 - Булево			 - Признак отказа от проведения
//  РежимПроведения	 - РежимПроведения	 - Режим проведения документа.
//
Процедура ОбработкаПроведенияДокументов(Источник,Отказ,РежимПроведения) Экспорт
	
	дкОбработкаПроведенияДокументовОбработкаПроведения(Источник,Отказ,РежимПроведения);
	
КонецПроцедуры

// Сброс филиала при копировании документа.
//
// Параметры:
//  Источник			 - ДокументОбъект	 - документ.
//  ОбъектКопирования	 - ДокументОбъект	 - копируемый документ.
//
Процедура ДокументПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	// Проще указать исключения, новых не ожидается.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаГрафиковРаботы")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ТабельУчетаРабочегоВремени")
	Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Источник.Филиал = Неопределено;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Простановка филиала в движения документа при проведении.
//
// Параметры:
//  Источник		 - ДокументОбъект			 - документ.
//  Отказ			 - Булево					 - Признак отказа от записи
//  РежимПроведения	 - РежимПроведенияДокумента	 - режим проведения.
//
Процедура ДокументПриПроведенииЗаполнениеФилиалаРегистровНакопленияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Перем ФилиалДокумента;
	
	Если Источник.Движения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФилиалДокумента = Источник.Филиал;
	Исключение
		Возврат;
	КонецПопытки;
	
	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	
	Для Каждого НаборЗаписей Из Источник.Движения Цикл
		Если НаборЗаписей.Количество() <> 0 Тогда
			МатаданныеРегистра = НаборЗаписей.Метаданные();
			Если МетаданныеРегистрыНакопления.Содержит(МатаданныеРегистра)
				И МатаданныеРегистра.Измерения.Найти("Филиал") <> Неопределено
			Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.Филиал) Тогда
						Запись.Филиал = ФилиалДокумента;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверка совпадения филиала склада в документе.
//
// Параметры:
//  Источник		 - ДокументОбъект			 - складкой документ.
//  Отказ			 - Булево					 - Признак отказа от записи
//  РежимПроведения	 - РежимПроведенияДокумента	 - режим проведения.
//
Процедура ДокументСкладаПриПроведенииПроверкаСовпаденияФилиалаСклада(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Не Источник.ОбменДанными.Загрузка Тогда
		
		Если Источник.Товары.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СообщениеПользователю = ОграничениеДоступаНаУровнеЗаписей.ТребуетсяПредупреждениеНесоответствияСкладаИФилиала(Источник.Склад, Источник.Филиал);
		Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ККМ_ДокументыОплатыДетализацияДоНоменклатурыДоплаты

// Процедура проверяет корректность кредитных сумм, внесенных в шапку и в табличную часть документа.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект	 - объект проводимого документа
//  Отказ			 - Булево			 - Признак отказа от записи
//  РежимЗаписи		 - РежимЗаписиДокумента	 - режим записи.
//
Процедура ДокументОплатыПроверитьСуммыКредитаККМПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	Если Не ДокументОбъект.ОбменДанными.Загрузка
		И РежимЗаписи = РежимЗаписиДокумента.Проведение
	Тогда
		Если ДокументОбъект.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит
			Или ДокументОбъект.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Предоплата
		Тогда
			Валюта = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
			
			Если ДокументОбъект.КредитныеДанные.Итог("Сумма") <> ДокументОбъект.СуммаДокумента Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке("Итоговая сумма по табличной части ""Данные доплаты"" (" 
													+ ОбщегоНазначенияКлиентСервер.ФорматСумм(ДокументОбъект.КредитныеДанные.Итог("Сумма"),Валюта, "0") 
													+ ") отличается от общей суммы документа(" 
													+ ОбщегоНазначенияКлиентСервер.ФорматСумм(ДокументОбъект.СуммаДокумента, Валюта, "0") 
													+ "). Данные суммы должны совпадать.",
													Отказ);
			КонецЕсли;
			НомерСтроки = 1;									
			Для Каждого СтрокаДанных Из ДокументОбъект.КредитныеДанные Цикл
				Если СтрокаДанных.Сумма > СтрокаДанных.СуммаПриПокупке Тогда
					Отказ = Истина;
					ОбщегоНазначения.СообщитьОбОшибке("В строке №" + Строка(НомерСтроки) + " сумма вносимой оплаты по кредиту (" 
					+ ОбщегоНазначенияКлиентСервер.ФорматСумм(СтрокаДанных.Сумма, Валюта, "0") 
					+ ") превышает полную стоимость ползиции (" 
					+ ОбщегоНазначенияКлиентСервер.ФорматСумм(СтрокаДанных.СуммаПриПокупке, Валюта, "0") 
					+ "). Данные суммы должны совпадать.",
					Отказ);
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// В чеке заполняет доплату по данным сделки.
//
// Параметры:
//  Сделка				 - ДокументСсылка.КомплексныйРасчет	 - сделка.
//  НастройкаПечатиЧеков - Структура	 - настройки формирования и печати чеков.
//  КредитныеДанные		 - ТабличнаяЧасть	 - данные доплаты.
//  СуммаДокумента		 - Число	 - сумма чека.
//
Процедура ДокументОплатыЗаполнитьРасчетыПоДолгуПоКомплексномуРасчетуСервер(Сделка, НастройкаПечатиЧеков, КредитныеДанные, СуммаДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаПечатиЧеков)
		И Не НастройкаПечатиЧеков.ПустаяСсылка
		И НастройкаПечатиЧеков.ДоступныКредитныеПлатежи
	Тогда 
		КредитныеДанные.Очистить();
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплексныйРасчетКлиентаСостав.Номенклатура КАК Номенклатура,
		|	КомплексныйРасчетКлиентаСостав.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	КомплексныйРасчетКлиентаСостав.Сумма КАК СуммаПриПокупке,
		|	КомплексныйРасчетКлиентаСостав.Сумма КАК Сумма,
		|	КомплексныйРасчетКлиентаСостав.Количество КАК Количество
		|ИЗ
		|	Документ.КомплексныйРасчетКлиента.Состав КАК КомплексныйРасчетКлиентаСостав
		|ГДЕ
		|	КомплексныйРасчетКлиентаСостав.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Сделка); 
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДатаПолученияСтавки = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		Пока Выборка.Следующий() Цикл
			СтрокаДанных = КредитныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
			СтрокаДанных.Наименование = "Оплата за " + Выборка.НаименованиеПолное;
			СтрокаДанных.СтавкаНДС = УчетНДСВызовСервера.СтавкаНДС(СтрокаДанных.Номенклатура, ДатаПолученияСтавки);
		КонецЦикла;
		ОбновитьСтавкиНДСКредитныхДанныхККМ(НастройкаПечатиЧеков, КредитныеДанные);
		РаботаСДокументамиКлиентСервер.РаспределитьОплатуКредитныхДанныхККМ(КредитныеДанные, СуммаДокумента)
	КонецЕсли;
	
КонецПроцедуры

// Обновляет ставки НДС данных доплаты в чеке.
//
// Параметры:
//  НастройкаПечатиЧеков - Структура	 - настройки формирования и печати чеков.
//  КредитныеДанные		 - ТабличнаяЧасть	 - данные доплаты.
//
Процедура ОбновитьСтавкиНДСКредитныхДанныхККМ(НастройкаПечатиЧеков, КредитныеДанные) Экспорт
	Если ЗначениеЗаполнено(НастройкаПечатиЧеков) И  НЕ НастройкаПечатиЧеков.ПустаяСсылка Тогда
		Если ЗначениеЗаполнено(НастройкаПечатиЧеков) И НЕ НастройкаПечатиЧеков.ПустаяСсылка И ЗначениеЗаполнено(НастройкаПечатиЧеков.СтавкаНДСДляОсновнойСистемыНалогообложения) Тогда
			СтавкаНДСПоУмолчанию = НастройкаПечатиЧеков.СтавкаНДСДляОсновнойСистемыНалогообложения;
		Иначе
			СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.НДС0;
		КонецЕсли;
		Для Каждого СтрокаДанных Из КредитныеДанные Цикл
			Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура.ВидСтавкиНДС) Тогда
					// Ставка номенклатуры приоритетней всего
					//СтрокаДанных.СтавкаНДС = СтрокаДанных.Номенклатура.СтавкаНДС;
					СтавкаНДСНоменклатуры = УчетНДСВызовСервера.СтавкаНДС(СтрокаДанных.Номенклатура, ОбщегоНазначения.ТекущаяДатаПользователя());
				Иначе
					СтрокаДанных.СтавкаНДС = СтавкаНДСПоУмолчанию;		
				КонецЕсли;
			Иначе // Нет номенклатуры - используется ставка по умолчанию
				СтрокаДанных.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Для незаполненных настроек печати чеков обновление ставок НДС не требуется
		// 
	КонецЕсли;
КонецПроцедуры

// Заполнить доплату в документе чека.
//
// Параметры:
//  ДокументОснование	 - 	ДокументОбъект - документ чека.
//  НастройкаПечатиЧеков - Структура	 - настройки формирования и печати чеков.
//  КредитныеДанные		 - ТабличнаяЧасть	 - данные доплаты.
//  СуммаДокумента		 - Число	 - сумма чека.
//  СпособРасчетаЧекаККМ - ПеречислениеСсылка.СпособыРасчетаЧекаККМ	 - способ расчета.
//
Процедура ДокументОплатыЗаполнитьРасчетыПоДолгуПоОказаниюУслуг(ДокументОснование, НастройкаПечатиЧеков, КредитныеДанные, СуммаДокумента, СпособРасчетаЧекаККМ) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда	
		Если ЗначениеЗаполнено(НастройкаПечатиЧеков) И  Не НастройкаПечатиЧеков.ПустаяСсылка Тогда
			Если НЕ ЗначениеЗаполнено(СпособРасчетаЧекаККМ) Тогда
				СпособРасчетаЧекаККМ = ДокументОснование.СпособРасчетаЧекаККМ;
			КонецЕсли;
			
			Если ДокументОснование.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит 
				И НЕ НастройкаПечатиЧеков.ДоступныКредитныеПлатежи
			Тогда
				СпособРасчетаЧекаККМ = Неопределено; // В найстройках онлайн-чеков расчет по операции кредита не разрешен.
			ИначеЕсли СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит
				Или (Не ЗначениеЗаполнено(СпособРасчетаЧекаККМ)
						И НастройкаПечатиЧеков.ДоступныКредитныеПлатежи
						И Не НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи)
			Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОказаниеУслугРаботы.Номенклатура КАК НоменклатураСсылка,
				|	ОказаниеУслугРаботы.Сумма КАК Сумма,
				|	"""" КАК ЧастьНазвания,
				|	ОказаниеУслугРаботы.КлючСтроки КАК КлючСтроки,
				|	""Работы"" КАК ИмяТЧ,
				|	ОказаниеУслугРаботы.Количество КАК Количество
				|ПОМЕСТИТЬ НоменклатураДокумента
				|ИЗ
				|	Документ.ОказаниеУслуг.Работы КАК ОказаниеУслугРаботы
				|ГДЕ
				|	ОказаниеУслугРаботы.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОказаниеУслугТовары.Номенклатура,
				|	ОказаниеУслугТовары.Сумма,
				|	"""",
				|	NULL,
				|	""Товары"",
				|	ОказаниеУслугТовары.Количество
				|ИЗ
				|	Документ.ОказаниеУслуг.Товары КАК ОказаниеУслугТовары
				|ГДЕ
				|	ОказаниеУслугТовары.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОказаниеУслугСертификаты.Сертификат.ВидСертификата.Номенклатура,
				|	ОказаниеУслугСертификаты.Сумма,
				|	""Оплата за сертификат "" + ОказаниеУслугСертификаты.Сертификат.ВидСертификата.Наименование,
				|	NULL,
				|	""Сертификаты"",
				|	1
				|ИЗ
				|	Документ.ОказаниеУслуг.Сертификаты КАК ОказаниеУслугСертификаты
				|ГДЕ
				|	ОказаниеУслугСертификаты.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.Номенклатура,
				|	ОказаниеУслугПополнениеСертификатов.Сумма,
				|	""Оплата за пополнение сертификата "" + ОказаниеУслугПополнениеСертификатов.Сертификат.ВидСертификата.Наименование,
				|	NULL,
				|	""ПополнениеСертификатов"",
				|	ОказаниеУслугПополнениеСертификатов.Количество
				|ИЗ
				|	Документ.ОказаниеУслуг.ПополнениеСертификатов КАК ОказаниеУслугПополнениеСертификатов
				|ГДЕ
				|	ОказаниеУслугПополнениеСертификатов.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОказаниеУслугМатериалы.Номенклатура,
				|	ОказаниеУслугМатериалы.Сумма,
				|	"""",
				|	ОказаниеУслугМатериалы.КлючСтрокиРаботы,
				|	""Материалы"",
				|	ОказаниеУслугМатериалы.Количество
				|ИЗ
				|	Документ.ОказаниеУслуг.Материалы КАК ОказаниеУслугМатериалы
				|ГДЕ
				|	ОказаниеУслугМатериалы.Ссылка = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	НоменклатураДокумента.НоменклатураСсылка КАК Номенклатура,
				|	НоменклатураДокумента.Сумма КАК СуммаПриПокупке,
				|	ВЫБОР
				|		КОГДА НоменклатураДокумента.ЧастьНазвания = """"
				|			ТОГДА ""Оплата за "" + (ВЫРАЗИТЬ(СправочникНоменклатура.Наименование КАК СТРОКА(250)))
				|		ИНАЧЕ НоменклатураДокумента.ЧастьНазвания
				|	КОНЕЦ КАК НаименованиеДляДокумента,
				|	СправочникНоменклатура.удалитьСтавкаНДС КАК СтавкаНДС,
				|	НоменклатураДокумента.ИмяТЧ КАК ИмяТЧ,
				|	НоменклатураДокумента.КлючСтроки КАК КлючСтроки,
				|	НоменклатураДокумента.Количество КАК Количество
				|ИЗ
				|	НоменклатураДокумента КАК НоменклатураДокумента
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
				|		ПО НоменклатураДокумента.НоменклатураСсылка = СправочникНоменклатура.Ссылка
				|ГДЕ
				|	НоменклатураДокумента.Сумма > 0";
				Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
				РезультатЗапроса = Запрос.Выполнить();
				
				ТЗДанныеНоменклатуры = РезультатЗапроса.Выгрузить();
				
				РаботаСТорговымОборудованием.ОбработатьВыводМатериаловВЧеке(ТЗДанныеНоменклатуры, ДокументОснование, Истина); 
				
				КредитныеДанные.Очистить();
				
				ДатаПолученияСтавки = ОбщегоНазначения.ТекущаяДатаПользователя();
				
				Для Каждого Данные Из ТЗДанныеНоменклатуры Цикл
					СтрокаДанных = КредитныеДанные.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанных, Данные);
					СтрокаДанных.Наименование = Данные.НаименованиеДляДокумента;
					СтрокаДанных.СтавкаНДС = УчетНДСВызовСервера.СтавкаНДС(СтрокаДанных.Номенклатура, ДатаПолученияСтавки);
				КонецЦикла;
				РаботаСДокументамиСервер.ОбновитьСтавкиНДСКредитныхДанныхККМ(НастройкаПечатиЧеков, КредитныеДанные);
				РаботаСДокументамиКлиентСервер.РаспределитьОплатуКредитныхДанныхККМ(КредитныеДанные, СуммаДокумента)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Определить способ расчета у документа чека.
//
// Параметры:
//  Документ - ДокументОбъект	 - документ чека.
// 
// Возвращаемое значение:
//   ПеречислениеСсылка.СпособыРасчетаЧекаККМ.
//
Функция ОпределитьСпособРасчетаДокумента(Знач Документ) Экспорт
	Если ЗначениеЗаполнено(Документ.СпособРасчетаЧекаККМ) Тогда
		СпособРасчетаЧекаККМ = Документ.СпособРасчетаЧекаККМ;
	Иначе
		СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Аванс;
	КонецЕсли;
	
	Возврат СпособРасчетаЧекаККМ;
КонецФункции

Процедура ПлатежноКассовыйДокументЧекаОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не (Источник.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит
		Или Источник.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Предоплата)
	Тогда
		
		мОбрИнд = ПроверяемыеРеквизиты.Количество()-1;
		Для Cч = 0 по мОбрИнд Цикл
			
			ИмяРеквизита = ПроверяемыеРеквизиты[мОбрИнд-Cч];
			Если СтрНайти(ИмяРеквизита, "КредитныеДанные.") <> 0 Тогда
				ПроверяемыеРеквизиты.Удалить(мОбрИнд-Cч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ККМ_Прочее

Функция ПроверитьКассуИПолучитьНомерЧека(СсылкаНаОборудование, ДокументСсылка, ДанныеXML, ТекстОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудованиеПараметрыРегистрации.ЗначениеПараметра КАК ЗначениеПараметра
		|ИЗ
		|	Справочник.ПодключаемоеОборудование.ПараметрыРегистрации КАК ПодключаемоеОборудованиеПараметрыРегистрации
		|ГДЕ
		|	ПодключаемоеОборудованиеПараметрыРегистрации.Ссылка = &СсылкаНаОборудование
		|	И ПодключаемоеОборудованиеПараметрыРегистрации.НаименованиеПараметра = ""ЗаводскойНомерФН""";
	
	Запрос.УстановитьПараметр("СсылкаНаОборудование", СсылкаНаОборудование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДанныеЧека = ПолучитьНомерЧекаИФН(ДокументСсылка, ДанныеXML);
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если Не ДанныеЧека.ЗаводскойНомерФН = ВыборкаДетальныеЗаписи.ЗначениеПараметра Тогда
			ТекстОшибки = "Чек был распечатан на другой кассе, либо заменен ФН. Заводской номер ФН кассы отличен от ФН чека.";
		КонецЕсли;
	Иначе
		ТекстОшибки = "Для кассы документа не задана настройка 'Заводской номер ФН'.";
	КонецЕсли;
	
	Возврат ДанныеЧека;
	
КонецФункции

Функция ПолучитьНомерЧекаИФН(ДокументСсылка, ДанныеXML)
	
	мДанныхФО = МенеджерОборудованияВызовСервераПереопределяемый.ДанныеФискальнойОперации(ДокументСсылка);
	Если мДанныхФО.Количество() = 1 Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("НомерЧекаККМ", мДанныхФО[0].НомерЧекаККМ);
		СтруктураДанных.Вставить("ЗаводскойНомерФН", мДанныхФО[0].ЗаводскойНомерФН);
		СтруктураДанных.Вставить("ФискальныйПризнак", мДанныхФО[0].ФискальныйПризнак); 
		Возврат СтруктураДанных;
		
	ИначеЕсли мДанныхФО.Количество() > 1 Тогда
		
		Для Каждого ФискОпер Из мДанныхФО Цикл
			Если ФискОпер.ДанныеXML.Получить() = ДанныеXML Тогда
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("НомерЧекаККМ", ФискОпер.НомерЧекаККМ);
				СтруктураДанных.Вставить("ЗаводскойНомерФН", ФискОпер.ЗаводскойНомерФН);
				СтруктураДанных.Вставить("ФискальныйПризнак", ФискОпер.ФискальныйПризнак);
				Возврат СтруктураДанных;				
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	// Сюда не должны попасть, если не было умышленного изменения данных, не доступных пользователю, но на всякий случай.
	ВызватьИсключение "Печать не возможна. Не удалось найти фискальную операцию!"
	
КонецФункции

Функция ПолучитьДанныеXMLИсторииПечатиПоДокументу(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияПечатиОнлайнЧеков.ДанныеXML КАК ДанныеXML
		|ИЗ
		|	РегистрСведений.ИсторияПечатиОнлайнЧеков КАК ИсторияПечатиОнлайнЧеков
		|ГДЕ
		|	ИсторияПечатиОнлайнЧеков.Документ = &Документ
		|	И ИсторияПечатиОнлайнЧеков.Результат = ИСТИНА";
	
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	мДанныеXML = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		мДанныеXML.Добавить(Выборка.ДанныеXML);	
	КонецЦикла;
	
	Возврат мДанныеXML;
	
КонецФункции

// Вычисляет требуемый "Признак способа расчета" для чека документа приёма/возврата денег (без продажи).
//  Учитывается документ сделки (разреза расчетов) и документа-основания.
//
// Параметры:
//  ДокументОснование	 - ДокументСсылка							 - Основание, выбранное в денежном документе.
//  Сделка				 - ДокументСсылка.КомплексныйРасчет			 - Разрез расчетов с клиентом.
//  СуммаДокумента		 - Число									 - Сумма оплаты/возврата.
//  СуммаКредитныхДанных - Число									 - сумма в табличной части.
//  СпособРасчетаЧекаККМ - ПеречислениеСсылка.СпособыРасчетаЧекаККМ	 - Значение реквизита документа, указывающего, аванс это или оплата долга.
// 
// Возвращаемое значение:
//   ПеречислениеСсылка.ПризнакиСпособаРасчета.
//
Функция ПолучитьПризнакСпособаРасчетаДенежногоДокумента(ДокументОснование, Сделка, СуммаДокумента, СуммаКредитныхДанных, СпособРасчетаЧекаККМ = Неопределено) Экспорт
	
	Если СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит Тогда
		Возврат Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если СуммаДокумента >= ДокументОснование.СуммаДокумента Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		Иначе
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;	
		КонецЕсли;
		
		Возврат ПризнакСпособаРасчета;
	
	ИначеЕсли ЗначениеЗаполнено(Сделка) Тогда
		Если СуммаДокумента	>= Сделка.Состав.Итог("Сумма") Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		Иначе
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;	
		КонецЕсли;
		
		Возврат ПризнакСпособаРасчета;
		
	ИначеЕсли СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Предоплата Тогда
		Если СуммаДокумента >= СуммаКредитныхДанных Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		Иначе
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;	
		КонецЕсли;
		
		Возврат ПризнакСпособаРасчета;
		
	КонецЕсли;
	
	Возврат Перечисления.ПризнакиСпособаРасчета.Аванс;
	
КонецФункции

// Проверяет, заблокирован ли объект для записи другими сеансами.
//
// Параметры:
//  ДанныеФормыОбъект	 - ДанныеФормыСтруктура	 - Объект документа из формы.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ОбъектНикемНеЗаблокирован(Знач ДанныеФормыОбъект) Экспорт
	
	ПолноеИмяМетаданных = ДанныеФормыОбъект.Ссылка.Метаданные().ПолноеИмя();
	ТипОбъекта = Тип(СтрЗаменить(ПолноеИмяМетаданных, ".", "Объект."));
	
	ОбъектДанных = ДанныеФормыВЗначение(ДанныеФормыОбъект, ТипОбъекта);
	Попытка
		ОбъектДанных.Заблокировать();
		ОбъектДанных.Разблокировать();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Очищает данные о печати чека ККМ в документе.
//
// Параметры:
//  Объект	 - ДокументОбъект	 - Документ ПКО,РКО,ОПВ,ВПВ.
//
Процедура ОчиститьРеквизитыККМДокумента(Объект) Экспорт
	
	Объект.КредитныеДанные.Очистить();
	
	Реквизиты = "НомерЧекаККМ,
				|СпособРасчетаЧекаККМ,
				|ДатаПечатиЧека,
				|ФискальноеУстройство,
				|НомерЧекаЭТ,
				|СсылочныйНомер,
				|НомерКарты,
				|ОписаниеКоррекции,
				|ДатаКоррекции,
				|НомерПредписания";
	
	ПустыеЗначения = Новый Структура(Реквизиты);
	
	ЗаполнитьЗначенияСвойств(Объект, ПустыеЗначения);
	
КонецПроцедуры

// Получить данные оплаты безналичными для чека.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - документ чека.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьДанныеОплатыДляБезнала(Объект) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		
		ДанныеОплаты = ПолучитьДанныеОплатыДляБезналаОУ(Объект.Ссылка);
		
	Иначе
		// Прочие чековые документы безналичных расчетов.
		ДанныеОплаты = СтруктураДанныеОплатыБезналомДляЧека();
		
		ЭТ = Объект.ЭквайринговыйТерминал;
		
		Если ЗначениеЗаполнено(ЭТ) Тогда
			
			ДанныеОплатыЗаполнитьПоЭТ(ЭТ, ДанныеОплаты);
			
			ДанныеОплаты.СуммаОплаты = Объект.СуммаДокумента;
			
			Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПоПлатежнойКарте") Тогда
				// Возврат на карту
				ДанныеОплаты.СсылочныйНомер = Объект.СсылочныйНомер; // Ссылочный номер исходного платежа, перенесенный при вводе на основании в документ возврата.
				ДанныеОплаты.НомерКарты	 = Объект.НомерКарты;		 // Номер карты исходного платежа.
				
				Если Объект.ОтменаПлатежа Тогда
					ДанныеОплаты.ТипТранзакции  = "AuthorizeVoid";
				Иначе
					ДанныеОплаты.ТипТранзакции  = "AuthorizeRefund";
				КонецЕсли;
			Иначе 
				// Оплата картой
				ДанныеОплаты.ТипТранзакции  = "AuthorizeSales";
			КонецЕсли;
			
		ИначеЕсли ИспользуютсяЭквайринговыеТерминалы() Тогда
			ДанныеОплаты.ОписаниеОшибки = НСтр("ru='У безналичной оплаты не заполнен эквайринговый терминал.'");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОплаты.ДокументОснование = Объект.Ссылка;
	
	Возврат ДанныеОплаты;
	
КонецФункции

Функция ПолучитьДанныеОплатыДляБезналаОУ(Документ)
	
	Если ЗначениеЗаполнено(Документ.ИдентификаторКорзиныНСПК) Тогда
		// Особые параметры оплаты безналом при оплате ЭС НСПК	
		Возврат	ПолучитьДанныеОплатыДляБезналаОУ_НСПК(Документ);
	Иначе
		ДанныеОплаты = СтруктураДанныеОплатыБезналомДляЧека();
		
		Отбор = Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные);
		мОплатыБезналом = Документ.Оплата.НайтиСтроки(Отбор);
		Если мОплатыБезналом.Количество() = 1 Тогда
			
			СтрокаОплаты = мОплатыБезналом[0];
			ЭТ = СтрокаОплаты.ЭквайринговыйТерминал;
			
			Если ЗначениеЗаполнено(ЭТ) Тогда
				
				ДанныеОплатыЗаполнитьПоЭТ(ЭТ, ДанныеОплаты);
				
				ДанныеОплаты.СуммаОплаты = СтрокаОплаты.Сумма;
				
				ДанныеОплаты.СсылочныйНомер	= Документ.СсылочныйНомер;
				ДанныеОплаты.НомерКарты		= Документ.НомерКарты;
				
				Если Документ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ПродажаКлиенту") Тогда
					ДанныеОплаты.ТипТранзакции  = "AuthorizeSales";
				Иначе
					ДанныеОплаты.ТипТранзакции  = "AuthorizeRefund";
				КонецЕсли;
				
			ИначеЕсли ИспользуютсяЭквайринговыеТерминалы() Тогда
				ДанныеОплаты.ОписаниеОшибки = НСтр("ru='В строке безналичной оплаты не заполнен эквайринговый терминал.'");
			КонецЕсли;
		ИначеЕсли мОплатыБезналом.Количество() > 1 Тогда
			ДанныеОплаты.ОписаниеОшибки = НСтр("ru='В таблице оплат должна быть только одна строка безналичной оплаты.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеОплаты;
	
КонецФункции

Функция ПолучитьДанныеОплатыДляБезналаОУ_НСПК(Документ)
	
	ДанныеОплаты = СтруктураДанныеОплатыБезналомДляЧека();
	ДанныеОплаты.СуммаСобственныхСредств = 0;
	ДанныеОплаты.СуммаЭлектронногоСертификата = 0;
	
	Если Документ.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту Тогда
		ДанныеОплаты.ТипТранзакции  = "ReturnElectronicCertificate";	
	Иначе
		ДанныеОплаты.ТипТранзакции  = "PayElectronicCertificate";
	КонецЕсли;
	
	ДанныеОплаты.ИдентификаторКорзины = Документ.ИдентификаторКорзиныНСПК;
	
	СтрокиБезнал = Документ.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные));
	
	Если ЗначениеЗаполнено(СтрокиБезнал) Тогда
		Для Каждого СтрокаОплаты Из СтрокиБезнал Цикл
			Если СтрокаОплаты.ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.СертификатНСПК Тогда
				
				ДанныеОплаты.СуммаЭлектронногоСертификата = СтрокаОплаты.Сумма;
				ДанныеОплаты.ЭквайринговыйТерминал = СтрокаОплаты.ЭквайринговыйТерминал.ЭквайрингНСПК;
				ДанныеОплаты.ТипЭТ = ДанныеОплаты.ЭквайринговыйТерминал.Тип;
				
				ОборудованиеПриемаОплаты = Новый Массив;
				
				ЭТОборудованиеРабочегоМеста = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭквайринговыйТерминал");
				Для Каждого Оборудование Из ЭТОборудованиеРабочегоМеста Цикл
					Если ДанныеОплаты.ЭквайринговыйТерминал.Оборудование.Найти(Оборудование.Ссылка, "ПодключаемоеОборудование") <> Неопределено Тогда
						ОборудованиеПриемаОплаты.Добавить(Оборудование.Ссылка);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеОплаты.ПодключенноеОборудование = ОборудованиеПриемаОплаты;
				ДанныеОплаты.ИспользоватьЭТАвтономно = ДанныеОплаты.ЭквайринговыйТерминал.ИспользоватьЭТАвтономно;
				ДанныеОплаты.ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ = ДанныеОплаты.ЭквайринговыйТерминал.ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ;
				
			ИначеЕсли СтрокаОплаты.ЭквайринговыйТерминал.Тип = Перечисления.ТипыСпособовОплат.Эквайринг Тогда
				ДанныеОплаты.СуммаСобственныхСредств = СтрокаОплаты.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОплаты.СуммаОплаты = ДанныеОплаты.СуммаСобственныхСредств + ДанныеОплаты.СуммаЭлектронногоСертификата;
		
	КонецЕсли;
	
	ДанныеОплаты.СсылочныйНомер	= Документ.СсылочныйНомер;
	ДанныеОплаты.НомерКарты		= Документ.НомерКарты;
	ДанныеОплаты.ЭтоОплатаСБП	= Ложь;
	
	Возврат ДанныеОплаты;
	
КонецФункции

Функция СтруктураДанныеОплатыБезналомДляЧека()
	
	ДанныеОплаты = Новый Структура(	"СуммаОплаты,
									|ЭквайринговыйТерминал,
									|ТипЭТ,
									|ПодключенноеОборудование,
									|ИдентификаторУстройства,
									|ТипТранзакции,
									|ИспользоватьЭТАвтономно,
									|ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ,
									|ЭтоОплатаСБП,
									|СсылочныйНомер,
									|НомерКарты,
									|ОписаниеОшибки,
									|ИдентификаторКорзины,
									|СуммаЭлектронногоСертификата,
									|СуммаСобственныхСредств,
									|ДокументОснование");
	
	ДанныеОплаты.СуммаОплаты = 0;
	ДанныеОплаты.ОписаниеОшибки = "";
	
	Возврат ДанныеОплаты;
	
КонецФункции

Процедура ДанныеОплатыЗаполнитьПоЭТ(ЭТ, ДанныеОплаты)
	
	ДанныеОплаты.ЭквайринговыйТерминал = ЭТ;
	ДанныеОплаты.ТипЭТ = ЭТ.Тип;
	
	ОборудованиеПриемаОплаты = Новый Массив;
	
	// Из этого ЭТ берем то Подключаемое оборудование, что приписано к этому Рабочему месте.
	ЭТОборудованиеРабочегоМеста = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭквайринговыйТерминал");
	Для Каждого Оборудование Из ЭТОборудованиеРабочегоМеста Цикл
		Если ЭТ.Оборудование.Найти(Оборудование.Ссылка, "ПодключаемоеОборудование") <> Неопределено Тогда
			ОборудованиеПриемаОплаты.Добавить(Оборудование.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОплаты.ПодключенноеОборудование = ОборудованиеПриемаОплаты;
	ДанныеОплаты.ИспользоватьЭТАвтономно = ЭТ.ИспользоватьЭТАвтономно;	// Автономный, т.е. не подключен к программе.
	ДанныеОплаты.ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ = ЭТ.ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ;
	ДанныеОплаты.ЭтоОплатаСБП = ЭТ.Тип = Перечисления.ТипыСпособовОплат.СБП; // Это способ оплаты через Систему быстрых платежей (СБП).
	
КонецПроцедуры

// Есть ли подключенные ЭТ к базе.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ИспользуютсяЭквайринговыеТерминалы() Экспорт
	
	// В оказании услуг идентичный, можно перенаправить сюда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.УстройствоИспользуется
		|	И ПодключаемоеОборудование.ТипОборудования = &ТипОборудования
		|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления";

	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);

	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполнить депозитную операцию ККМ документа чека.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - документ чека.
//  НастройкаПечатиЧеков - Структура	 - настройки формирования и печати чеков.
// 
Процедура ЗаполнитьДепозитнуюОперациюККМ(Объект, НастройкаПечатиЧеков) Экспорт
	Если Объект.Свойство("ВидОперации")
		И (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПеремещениеВКассу)
	Тогда
		Объект.СпособРасчетаЧекаККМ = Неопределено;
	Иначе
		Если ЗначениеЗаполнено(НастройкаПечатиЧеков) И НЕ НастройкаПечатиЧеков.ПустаяСсылка Тогда
			Если НастройкаПечатиЧеков.ДоступныКредитныеПлатежи И НЕ НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи Тогда
				Объект.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит;
				РаботаСДокументамиСервер.ОбновитьСтавкиНДСКредитныхДанныхККМ(НастройкаПечатиЧеков, Объект.КредитныеДанные);
			ИначеЕсли НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи И НЕ НастройкаПечатиЧеков.ДоступныКредитныеПлатежи Тогда
				Если  Объект.СпособРасчетаЧекаККМ <> Перечисления.СпособыРасчетаЧекаККМ.Аванс
					И Объект.СпособРасчетаЧекаККМ <> Перечисления.СпособыРасчетаЧекаККМ.Предоплата
				Тогда
					Объект.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Аванс;
				КонецЕсли;
			ИначеЕсли НастройкаПечатиЧеков.ДоступныКредитныеПлатежи
				И НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи 
				И Объект.СпособРасчетаЧекаККМ = Перечисления.СпособыРасчетаЧекаККМ.Кредит
			Тогда
				РаботаСДокументамиСервер.ОбновитьСтавкиНДСКредитныхДанныхККМ(НастройкаПечатиЧеков, Объект.КредитныеДанные);
			КонецЕсли;
		Иначе
			Объект.СпособРасчетаЧекаККМ = Неопределено;
			Объект.КредитныеДанные.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
Процедура ЗаполнитьПерсональныеДанныеШаблонаЧека(ОбщиеПараметры, ПерсональныеДанныеПокупателя, Объект, Покупатель) Экспорт
	
	СтруктураДанныхФорматноЛогическогоКонтроля = ФорматноЛогическийКонтрольВызовСервера.СтруктураДанныхФорматноЛогическогоКонтроля(ОбщиеПараметры.ПодключаемоеОборудование);
	ФорматФД = СтруктураДанныхФорматноЛогическогоКонтроля.ФорматФД;
	
	// ОбщиеПараметры.ПерсональныеДанные
	Если ТипЗнч(ПерсональныеДанныеПокупателя) = Тип("Структура") Тогда
		ПерсональныеДанные = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПерсональныеДанныеПокупателя();  // Тэг 1256 - Сведения о покупателе (клиенте).
		ЗаполнитьЗначенияСвойств(ПерсональныеДанные, ПерсональныеДанныеПокупателя);
		
		// Реквизиты начиная с ФФД 1.2
		ОбщиеПараметры.Вставить("СубъектПерсональныхДанных", ПерсональныеДанныеПокупателя);
		Если ОбщиеПараметры.СубъектПерсональныхДанных <> Неопределено Тогда
			Для Каждого КлючИЗначение Из ОбщиеПараметры.СубъектПерсональныхДанных Цикл
				Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
					ОбщиеПараметры.Вставить("ЕстьПерсональныеДанные", Истина);
					ЗаполнитьЗначенияСвойств(ПерсональныеДанные, ПерсональныеДанныеПокупателя); 
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПерсональныеДанные.ДатаРождения)
			Или ЗначениеЗаполнено(ПерсональныеДанные.ВидДокумента)
			Или ЗначениеЗаполнено(ПерсональныеДанные.ДанныеДокумента)
			Или Не ЗначениеЗаполнено(ПерсональныеДанные.ИНН)
		Тогда
			ОбщиеПараметры.ТипПерсональныхДанных = ПредопределенноеЗначение("Перечисление.ТипыПерсональныхДанныхККТ.ПаспортныеДанные");
		Иначе
			ОбщиеПараметры.ТипПерсональныхДанных = ПредопределенноеЗначение("Перечисление.ТипыПерсональныхДанныхККТ.ИНН");		
		КонецЕсли;
	КонецЕсли;
	
	// ОбщиеПараметры.СведенияОПокупателе
	Если	ФорматФД = "1.0"
		Или ФорматФД = "1.05"
		Или ОбщиеПараметры.ЕстьПерсональныеДанные
	Тогда
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПоПлатежнойКарте")
		Тогда
			ОбщиеПараметры.Вставить("Получатель",		МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНазваниеПолучателя(Объект.Выдать, Покупатель));
			ОбщиеПараметры.Вставить("ПолучательИНН",	МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьИННПолучателя(Объект.ВыдатьИНН, Покупатель));
			ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес	= МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьАдресПолучателя(Объект.ВыдатьАдрес, Покупатель);
		Иначе
			ОбщиеПараметры.Вставить("Получатель",		МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНазваниеПолучателя(Объект.ПринятоОт, Покупатель));
			ОбщиеПараметры.Вставить("ПолучательИНН",	МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьИННПолучателя(Объект.ПринятоОтИНН, Покупатель));
			ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес	= МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьАдресПолучателя(Объект.ПринятоОтАдрес, Покупатель);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбщиеПараметры.СведенияОПокупателе, ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыКММОказаниеУслуг

Функция ПечатьЧекаОУ_ПолучитьШаблонЧекаОказаниеУслуг(Знач Объект, СтрокаЧекаИндекс, ПараметрыЧека) Экспорт 
	
	Возврат Документы.ОказаниеУслуг.ПолучитьШаблонЧека(Объект, СтрокаЧекаИндекс, ПараметрыЧека);
	
КонецФункции

#Область ФД12вЧеке // ФД 1.2 и маркировка в чеке

Функция ПроверитьПодготовитьДанныеПоМаркированнымТоварам(Ссылка, ТаблицаТоваров, ВидОперации) Экспорт
	
	ПараметрыПроверкиНаККТ = ПолучитьПараметрыПроверкиНаККТ(Ссылка);

	//	Исходя из вида документа, определим планируемый статус КМ
	Если ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту Тогда
		ПланируемыйСтатусКМ = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту Тогда
		ПланируемыйСтатусКМ = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен;
	Иначе
		ВызватьИсключение "Неожиданный вид операции для документа.";
	КонецЕсли;
		
	Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
		
		ШКТовара = СтрокаТаблицыТоваров[21].Значение;
	
		Если ЗначениеЗаполнено(ШКТовара) Тогда
			ДанныеШтрихкода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ШКТовара);
			
			Если ДанныеШтрихкода.Разобран Тогда
				НаименованиеРеквизита = ДанныеШтрихкода.НаименованиеРеквизита;				
				//	Проверим, что это ШК от маркированного лекарственного препарата
				//	TODO: добавить проверку номенклатуры на наличие потребительской упаковки?
				Если ДанныеШтрихкода.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
					ПараметрыКМ = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыЗапросКМ();
					ПараметрыКМ.Количество			= СтрокаТаблицыТоваров[5].Значение;
					
					// Получаем base64 код с тэгом GS
					ШтрихкодРазобранный = ИнтеграцияМДЛПКлиентСервер.РазобратьСтрокуШтрихкодаГС1(ШКТовара);
					ПараметрыКМ.КонтрольнаяМарка	= ШтрихкодРазобранный.ШтрихкодBase64;
					
					ПараметрыКМ.ПланируемыйСтатусТовара = ПланируемыйСтатусКМ;
					ПараметрыКМ.Вставить("ИдентификаторЗапроса", Строка(Новый УникальныйИдентификатор()));
					
					ПараметрыКМ.ВСтавить("ШтрихкодУпаковки", ШКТовара);
					ПараметрыКМ.Вставить("ПолученРезультатЗапросаКМ", Ложь);
					
					ПараметрыКМ.Вставить("УИД", Строка(Новый УникальныйИдентификатор()));
					
					ПараметрыПроверкиНаККТ.ПроверяемыеКМ.Добавить(ПараметрыКМ);
					
					РезультатПроверки = НовыйРезультатПроверкиОтдельногоКМНаККТ();
					ПараметрыПроверкиНаККТ.Результат.ДанныеПроверки.Вставить(ПараметрыКМ.УИД, РезультатПроверки);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПроверкиНаККТ.Результат.ПроверяемыеКМ = ПараметрыПроверкиНаККТ.ПроверяемыеКМ;
	
	Возврат ПараметрыПроверкиНаККТ;
	
КонецФункции

// Новые параметры проверки на ККТ.
// 
// Параметры:
//  ПараметрыНачалаПроверки - см. ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ.
// 
// Возвращаемое значение:
//  Структура - Новые параметры проверки на ККТ:
// * ФормаОсновногоОбъекта       - ФормаКлиентскогоПриложения - Форма объекта с доступной формой проверки.
// * ОповещениеОЗавершении       - ОписаниеОповещения         - Вызываемое оповещение при завершении проверки.
// * ИдентификаторККТ		     - Неопределено, СправочникСсылка.ПодключаемоеОборудование - ККТ.
// * ТекущийИндекс               - Число - Текущий индекс проверяемого элемента
// * ПроверяемыеКМ  	         - Массив из см. НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения.
// * ВыполняетсяЛогирование      - Булево - Записывать в лог запросы и ответы ККТ.
// * Результат					 - Структура - см. НовыйРезультатПроверкиСредствамиККТ()
Функция ПолучитьПараметрыПроверкиНаККТ(Ссылка)
	
	ПараметрыПроверкиНаККТ = Новый Структура();
	ПараметрыПроверкиНаККТ.Вставить("ФормаОсновногоОбъектаУникальныйИдентификатор",	Неопределено);
	ПараметрыПроверкиНаККТ.Вставить("ИдентификаторККТ",			Неопределено);
	ПараметрыПроверкиНаККТ.Вставить("ТекущийИндекс",			0);	
	ПараметрыПроверкиНаККТ.Вставить("ПроверяемыеКМ",			Новый Массив);
	ПараметрыПроверкиНаККТ.Вставить("Результат",				НовыйРезультатПроверкиСредствамиККТ());
	ПараметрыПроверкиНаККТ.Вставить("ВыполняетсяЛогирование",	Истина);
    ПараметрыПроверкиНаККТ.Вставить("ПрерватьОперацию",			Ложь);
	ПараметрыПроверкиНаККТ.Вставить("СсылкаНаОбъект",			Ссылка);	
		
	Возврат ПараметрыПроверкиНаККТ;	
	
КонецФункции

// Конструктор структуры данных результата проверки средствами ККТ.
// 
// Возвращаемое значение:
//  Структура:
// * ЕстьОшибки            - Булево       - Признак наличия ошибок при проверке
// * ТекстОшибки           - Строка       - Текст общей ошибки, например, не подключено оборудование.
// * ДанныеПроверки        - Соответствие - результат проверки в соответсвии с исходными переданным данными для проверки.
// * ПроверяемыеКМ      - Массив       - Элементы проверки.
// * ВыполнитьФискализацию - Булево       - Истина, если ошибок не было или пользователь согласен с ошибками проверки.
Функция НовыйРезультатПроверкиСредствамиККТ()
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",			Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",		"");
	ВозвращаемоеЗначение.Вставить("ДанныеПроверки",		Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ПроверяемыеКМ",		Новый Массив());
	
	ВозвращаемоеЗначение.Вставить("ВыполнитьФискализацию",       Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыйРезультатПроверкиОтдельногоКМНаККТ()
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",           "");
	ВозвращаемоеЗначение.Вставить("КодМаркировкиПроверен", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатПроверки",     Ложь);
	
	ВозвращаемоеЗначение.Вставить("РезультаПроверкиОИСМ",  Ложь);
	ВозвращаемоеЗначение.Вставить("КодРезультатаПроверки", 0);
	ВозвращаемоеЗначение.Вставить("СтатусТовара",          Неопределено);
	ВозвращаемоеЗначение.Вставить("КодОбработкиЗапроса",   0);
	
	ВозвращаемоеЗначение.Вставить("ПодтвержденНаККТ",      Ложь);
	ВозвращаемоеЗначение.Вставить("ОтображатьОшибки",      Ложь);
	
	ВозвращаемоеЗначение.Вставить("ПропуститьОжиданиеОтветаОИСМ",    Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПолныйКодМаркировки",    Ложь);
	ВозвращаемоеЗначение.Вставить("ПредставлениеРезультатаПроверки", "");
	ВозвращаемоеЗначение.Вставить("ПредставлениеВЧеке",              "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ККМ_ПроверкаПраваИзмененияФискализированных

// Обработчик подписки на событие ДокументыККМПередЗаписью.
//
// Параметры:
//  Источник		 - ДокументОбъект			 - документ чека.
//  Отказ			 - Булево					 - отказ
//  РежимЗаписи		 - РежимЗаписиОбъекта		 - режим записи.
//  РежимПроведения	 - РежимПроведенияДокумента	 - режим проведения.
//
Процедура ДокументыККМПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Запрещаю перепроведение документа простыми пользователями, у которых нет полных прав.
	Если Не Отказ Тогда 
		Если Не Источник.ЭтоНовый() 
			И (РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
			И Не РольДоступна("ДополнительныеПраваРедактированиеФискализированныхДокументовККМ")			
			И Не Источник.ОбменДанными.Загрузка
			И Не РаботаСТорговымОборудованием.ДокументККМНеФискализирован(Источник)
		Тогда
			Если РольДоступна("ПолныеПрава") Тогда			
				ПроверитьИзменениеРеквизитовИТабличныхЧастейДокументаККМ(Отказ, Источник, РежимЗаписи);	
			Иначе
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Из документа уже распечатан чек ККМ. Недостаточно прав доступа для записи документа.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик подписки на событие ОказаниеУслугПередЗаписью
//
// Параметры:
//  Источник		 - ДокументОбъект.ОказаниеУслуг	 - документ продажи.
//  Отказ			 - Булево	 - отказ
//  РежимЗаписи		 - РежимЗаписиОбъекта	 - режим записи.
//  РежимПроведения	 - РежимПроведенияДокумента	 - режим проведения.
//
Процедура ОказаниеУслугПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Запрещаю перепроведение документа простыми пользователями, у которых нет полных прав.
	Если Не Отказ Тогда 
		Если  Не Источник.ЭтоНовый() 
			И (РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
			И Источник.НомерЧекаЭТ <> ""
			И ИзмениласьСуммаБезнала(Источник)
			И Не РольДоступна("ПолныеПрава")
			И Не Источник.ОбменДанными.Загрузка
		Тогда 
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Из документа уже распечатан чек на эквайринговом терминале и была изменена сумма безналичной оплаты. Недостаточно прав доступа для записи документа.");
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Функция проверяет не изменилась ли сумма оплаты по безналичному расчету в текущей версии объекта по сравнению с данными в базе.
Функция ИзмениласьСуммаБезнала(Источник)
	НоваяТЧ			= Источник.Оплата.Выгрузить();
	СтараяТЧ		= Источник.Ссылка.Оплата.Выгрузить();
	СтараяТЧ.Свернуть("ВидОплаты", "Сумма");
	НоваяТЧ. Свернуть("ВидОплаты", "Сумма");
	Отбор			= Новый Структура("ВидОплаты", Перечисления.ВидыОплаты.Безналичные);
	мНовыйБезнал	= НоваяТЧ.НайтиСтроки(Отбор);
	мСтарыйБезнал	= СтараяТЧ.НайтиСтроки(Отбор);
	Если мНовыйБезнал.Количество()	= мСтарыйБезнал.Количество()
			И мНовыйБезнал.Количество() > 0
			И мНовыйБезнал[0].Сумма = мСтарыйБезнал[0].Сумма Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Процедура проверяет изменение реквизитов и табличных частей документа ККМ.
//
// Параметры:
//  Отказ			 - Булево	 		- признак отказа от проведения.
//  ДокументОбъект	 - ДокументОбъект 	- документ, изменение которого проверяется.  
//
Процедура ПроверитьИзменениеРеквизитовИТабличныхЧастейДокументаККМ(Отказ, ДокументОбъект, РежимЗаписи)
	
	Перем СообщениеОбОшибке;
	
	ТекстОшибкиНачало = НСтр("ru='Недостаточно прав доступа для изменения фискализированного документа.'")
					  + НСтр("ru='Из документа уже распечатан чек ККМ.'");
					  
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		// Попытка отмены проведения
		СообщениеОбОшибке = ТекстОшибкиНачало + Символы.ПС
						  + НСтр("ru='Попытка отмены проведения документа'");
		Отказ = Истина;
		
	Иначе // Проверка изменения реквизитов.
		мсИзмененныеРеквизитыИТабЧасти = ПолучитьИзмененныеРеквизитыИТабличныеЧастиДокументаККМ(ДокументОбъект);
		Если мсИзмененныеРеквизитыИТабЧасти.Количество() <> 0 Тогда
			стрИзмененныеРеквизиты = "";
			Для Каждого Элемент Из мсИзмененныеРеквизитыИТабЧасти Цикл
				стрИзмененныеРеквизиты = стрИзмененныеРеквизиты 	
					+ ?(Не ПустаяСтрока(стрИзмененныеРеквизиты), ", ", "") + Элемент;
			КонецЦикла;
			Отказ = Истина;
			
			СообщениеОбОшибке = ТекстОшибкиНачало + Символы.ПС
							  + НСтр("ru='В документе были изменены следующие реквизиты или табличные части: '") + стрИзмененныеРеквизиты + ".";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает измененные реквизиты и табличные части документа ККМ.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - документ, изменение которого проверяется.  
// 
// Возвращаемое значение:
// 	 Массив - коллекция измененных реквизитов и табличных частей документа. 
//
Функция ПолучитьИзмененныеРеквизитыИТабличныеЧастиДокументаККМ(ДокументОбъект)
	
	Массив = Новый Массив;
	
	фМетаданные = ДокументОбъект.Метаданные();
	
	// Реквизиты шапки
	мсИменаРеквизитов = ПолучитьИменаПроверяемыхРеквизитовДокументаККМ(фМетаданные.Имя);
	Для Каждого ИмяРеквизита Из мсИменаРеквизитов Цикл
		фМетаданныеРеквизит = фМетаданные.Реквизиты.Найти(ИмяРеквизита);
		Если фМетаданныеРеквизит <> Неопределено Тогда
			Если ДокументОбъект[ИмяРеквизита] <> ДокументОбъект.Ссылка[ИмяРеквизита] Тогда 
				Массив.Добавить(фМетаданныеРеквизит.Синоним);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Табличные части
	мсИменаТЧ = ПолучитьИменаПроверяемыхТабличныхЧастейДокументаККМ(фМетаданные.Имя);	
	Для Каждого ИмяТЧ Из мсИменаТЧ Цикл
		фМетаданныеТЧ = фМетаданные.ТабличныеЧасти.Найти(ИмяТЧ);
		Если фМетаданныеТЧ <> Неопределено Тогда
			Если ИзмененаТабличнаяЧастьДокументаККМ(ДокументОбъект, ИмяТЧ, фМетаданныеТЧ) Тогда 
				Массив.Добавить(фМетаданныеТЧ.Синоним);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Функция проверяет изменения в табличной части документа ККМ.
//
// Параметры:
//  ДокументОбъект	- ДокументОбъект 	- документ, табличная часть которого проверяется. 
//  ИмяТЧ			- Строка 			- имя табличной части документа.  
//  фМетаданныеТЧ	- ОбъектМетаданных - метаданные табличной части документа.
// 
// Возвращаемое значение:
//   Булево - Истина, если изменена табличная часть документа. 
//
Функция ИзмененаТабличнаяЧастьДокументаККМ(ДокументОбъект, ИмяТЧ, фМетаданныеТЧ)
	
	стрИменаВыгружаемыхРеквизитов = "";
	мсИменаРеквизитовТЧ = ПолучитьИменаПроверяемыхРеквизитовТабличныхЧастейДокументаККМ();	
	Для Каждого ИмяРеквизитаТЧ Из мсИменаРеквизитовТЧ Цикл
		Если фМетаданныеТЧ.Реквизиты.Найти(ИмяРеквизитаТЧ) <> Неопределено Тогда  
			стрИменаВыгружаемыхРеквизитов = стрИменаВыгружаемыхРеквизитов 
				+ ?(Не ПустаяСтрока(стрИменаВыгружаемыхРеквизитов), ", ", "") + ИмяРеквизитаТЧ;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументОбъект[ИмяТЧ])
		Или ЗначениеЗаполнено(ДокументОбъект.Ссылка[ИмяТЧ]) 
	Тогда 
		тзВыгрузкаТЧДокумент = ДокументОбъект[ИмяТЧ].Выгрузить(, стрИменаВыгружаемыхРеквизитов);
		тзВыгрузкаТЧДокументСсылка = ДокументОбъект.Ссылка[ИмяТЧ].Выгрузить(, стрИменаВыгружаемыхРеквизитов);
		Возврат Не ОбщегоНазначения.КоллекцииИдентичны(тзВыгрузкаТЧДокумент, тзВыгрузкаТЧДокументСсылка,,, Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
	
// Функция возвращает имена проверяемых реквизитов документа ККМ.
//
// Параметры:
// 	ИмяОбъектаМетаданных - Строка - имя объекта метаданных. 
// 
// Возвращаемое значение:
// 	 Массив - коллекция имен реквизитов документа. 
//
Функция ПолучитьИменаПроверяемыхРеквизитовДокументаККМ(ИмяОбъектаМетаданных)
	
	Массив = Новый Массив;
	
	// Общие реквизиты для всех документов.
	Массив.Добавить("СуммаДокумента");
	Массив.Добавить("СпособРасчетаЧекаККМ");
	Массив.Добавить("ТелефонЧек");
	Массив.Добавить("АдресEmailЧек");
	Массив.Добавить("НеприменениеККТ");
	Массив.Добавить("ТипКоррекции");
	Массив.Добавить("ОписаниеКоррекции");
	Массив.Добавить("ДатаКоррекции");
	Массив.Добавить("НомерПредписания");
	Массив.Добавить("ДополнительныйРеквизит");
	Массив.Добавить("Коррекция");
	
	// Реквизиты для отдельных документов.
	Если ИмяОбъектаМетаданных = "ОказаниеУслуг" Тогда
		Массив.Добавить("ПолученоНаличными");
		Массив.Добавить("СдачуВДепозит");
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = "ОказаниеУслуг"
		Или ИмяОбъектаМетаданных = "ПриходныйКассовыйОрдер" 
		Или ИмяОбъектаМетаданных = "РасходныйКассовыйОрдер" 
	Тогда
		Массив.Добавить("ВидОперации");
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = "ПриходныйКассовыйОрдер" 
		Или ИмяОбъектаМетаданных = "РасходныйКассовыйОрдер" 
		Или ИмяОбъектаМетаданных = "ОплатаПлатежнойКартой" 
		Или ИмяОбъектаМетаданных = "ВозвратПоПлатежнойКарте" 
	Тогда
		Массив.Добавить("НомерЧекаККМ");
		Массив.Добавить("НомераЧековСторно");
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = "ОплатаПлатежнойКартой" 
		Или ИмяОбъектаМетаданных = "ВозвратПоПлатежнойКарте" 
	Тогда
		Массив.Добавить("НомерЧекаЭТ");
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = "ВозвратПоПлатежнойКарте" Тогда
		Массив.Добавить("ОтменаПлатежа");
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Функция возвращает имена проверяемых табличных частей документа ККМ.
//
// Параметры:
//  ИмяОбъектаМетаданных - Строка - имя объекта метаданных. 
// 
// Возвращаемое значение:
//   Массив - коллекция имен табличных частей документа. 
//
Функция ПолучитьИменаПроверяемыхТабличныхЧастейДокументаККМ(ИмяОбъектаМетаданных)
	
	Массив = Новый Массив;

	Если ИмяОбъектаМетаданных = "ОказаниеУслуг" Тогда
		Массив.Добавить("Работы");
		Массив.Добавить("Материалы");
		Массив.Добавить("Товары");
		Массив.Добавить("Сертификаты");
		Массив.Добавить("ПополнениеСертификатов");
		Массив.Добавить("Оплата");
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = "ПриходныйКассовыйОрдер" 
		Или ИмяОбъектаМетаданных = "РасходныйКассовыйОрдер" 
		Или ИмяОбъектаМетаданных = "ОплатаПлатежнойКартой" 
		Или ИмяОбъектаМетаданных = "ВозвратПоПлатежнойКарте" 
	Тогда
		Массив.Добавить("КредитныеДанные");
	КонецЕсли;
	
	Возврат Массив; 
	
КонецФункции

// Функция возвращает имена проверяемых реквизитов табличных частей документа ККМ.
// 
// Возвращаемое значение:
//   Массив - коллекция имен реквизитов табличных частей документа. 
//
Функция ПолучитьИменаПроверяемыхРеквизитовТабличныхЧастейДокументаККМ()
	
	Массив = Новый Массив;

	Массив.Добавить("Количество");
	Массив.Добавить("Цена");
	Массив.Добавить("Сумма");
	Массив.Добавить("СуммаСкидки");
	Массив.Добавить("СуммаНеПоПолису");
	Массив.Добавить("НеОплачиваетсяПолисом");
	Массив.Добавить("СтавкаНДСФискализации");
	
	Массив.Добавить("ВидОплаты");
	
	Массив.Добавить("Наименование");
	Массив.Добавить("СтавкаНДС");

	Возврат Массив; 
	
КонецФункции

#КонецОбласти

#Область ДокументыКоррекции

// Сторнирует движения по регистрам документа основания.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - документ с реквизитом ДокументОснование.
//  Отказ			 - Булево	 - когда Истина, сторнирование не делается.
//  ИмяРегистра		 - Строка	 - полное имя метаданных регистра. Когда не задан, сторнируются все регистры.
//
Процедура СторнироватьДвиженияПоРегистрамУПР(ДокументОбъект, Отказ, ИмяРегистра = Неопределено) Экспорт
	
	Если НЕ Отказ И ДокументОбъект <> Неопределено И ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		ДвиженияОснования = ДокументОбъект.ДокументОснование.ПолучитьОбъект().Движения;
		
		РегистрыДвиженийОснования = ДокументОбъект.ДокументОснование.Метаданные().Движения;
		РегистрыДвижений = ДокументОбъект.Метаданные().Движения;
		
		Для Каждого МетаданныеРегистраОснования Из РегистрыДвиженийОснования Цикл
			Для Каждого МетаданныеРегистра Из РегистрыДвижений Цикл
				// Состав регистров может отличаться
				Если МетаданныеРегистра.ПолноеИмя() = МетаданныеРегистраОснования.ПолноеИмя() Тогда
					
					// Пропускаем, если в параметре процедуры задан конкретный регистр для формирования движений.
					Если ИмяРегистра <> Неопределено
						И ИмяРегистра <> МетаданныеРегистра.ПолноеИмя()
					Тогда
						Продолжить;
					КонецЕсли;
					
					МетаданныеРесурсов = МетаданныеРегистра.Ресурсы;
					
					ИсходныйНаборДвижений	= ДвиженияОснования[МетаданныеРегистра.Имя]; 
					ТекущийНаборДвижений	= ДокументОбъект.Движения[МетаданныеРегистра.Имя];
					
					ИсходныйНаборДвижений.Прочитать();
					
					// Определим вид регистра, чтобы инвертировать его записи
					Если СтрНайти(МетаданныеРегистра.ПолноеИмя(), "РегистрНакопления.") = 1 Тогда
						Для Каждого ИсходнаяЗапись Из ИсходныйНаборДвижений  Цикл
							Если Не ИсходнаяЗапись.ДвижениеКоррекции Тогда
								ТекущаяЗапись = ТекущийНаборДвижений.Добавить();
								ЗаполнитьЗначенияСвойств(ТекущаяЗапись, ИсходнаяЗапись);
								
								ТекущаяЗапись.Регистратор = ДокументОбъект.Ссылка;
								
								// Для того, чтобы реальные движения увидели сторнированные в этом месте остатки на складах,
								// необходимо передвинуть их в прошлое на 1 секунду, впоследствии мы опять вернем их Период к верному значению.
								// Для остальных регистров будем использовать сразу же актуальный период.
								Если МетаданныеРегистра.Имя = "ПартииТоваровНаСкладах" Тогда
									ТекущаяЗапись.Период = ДокументОбъект.Дата - 1;
								Иначе
									ТекущаяЗапись.Период = ДокументОбъект.Дата; // Дату текущего документа.
								КонецЕсли;

								Для Каждого МетаданныеРесурса Из МетаданныеРесурсов Цикл
									ТекущаяЗапись[МетаданныеРесурса.Имя] = -ТекущаяЗапись[МетаданныеРесурса.Имя];
								КонецЦикла;	
								
								ТекущаяЗапись.ДвижениеКоррекции = Истина;
							КонецЕсли; 
						КонецЦикла;
					ИначеЕсли СтрНайти(МетаданныеРегистра.ПолноеИмя(), "РегистрСведений.") = 1 Тогда 
						// Списанные товары?		
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

// Установить условное оформление документов коррекции в списке документа чеков.
//
// Параметры:
//  ДинамическийСписок	 - ДинамическийСписок	 - список на форме.
//
Процедура УстановитьУсловноеОформлениеДокументовКоррекции(ДинамическийСписок) Экспорт
	УО = ДинамическийСписок.УсловноеОформление.Элементы;
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Использование = Истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 218, 185));
	
	// Условие форматирования
	ЭлементУсловия  = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Коррекция");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.Использование = Истина;
	
КонецПроцедуры

// Проверить данные документа коррекции при записи.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - документ
//  Отказ			 - Булево	 - отказ
//  РежимЗаписи		 - РежимЗаписиОбъекта	 - режим записи.
//
Процедура ПроверитьДанныеКоррекции(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	Если Не Отказ
		И Не ДокументОбъект.ОбменДанными.Загрузка
	Тогда
		// Проверка документа-коррекции, на корректность его опций.
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ДокументОбъект.Коррекция
		Тогда
			// Документ должен либо корректировать своё документ-основание, либо быть корректировкой неприменения ККТ.
			Если Не ДокументОбъект.НеприменениеККТ И Не ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Документ должен либо корректировать документ-основание, либо быть корректировкой неприменения ККТ!'"), Отказ);
			КонецЕсли;
			
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг")
				И ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
			Тогда 
				Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
					// Проверяем, что совпадает вид операции у основания и у коррекции
					ВидОперацииДокументОбъект = ДокументОбъект.ВидОперации;
					ВидОперацииДокументОснование = ДокументОбъект.ДокументОснование.ВидОперации;
					Если ВидОперацииДокументОбъект <> ВидОперацииДокументОснование Тогда 
						ШаблонСтроки = НСтр("ru='Документ Оказание услуг с видом операции %1 не может корректировать Оказание услуг с видом операции %2!'");
						СообщениеОбОшибке = СтрШаблон(ШаблонСтроки, Строка(ВидОперацииДокументОбъект), Строка(ВидОперацииДокументОснование)); 
						ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке, Отказ);
					КонецЕсли;
				Иначе 
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Документ Оказание услуг может корректировать только Оказание услуг в качестве документа-основания!'"),Отказ);
				КонецЕсли;
				
				// Проверка, что время коррекции не меньше, чем у исходного документа.
				Если ДокументОбъект.Дата < ДокументОбъект.ДокументОснование.Дата Тогда
					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Дата и время документа коррекции не должна быть меньше, чем у исходного документа!'"),Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим, что не пытаемся редактировать уже скорректированные документы.
		ДокументыКоррекции = НайтиКорректирующиеДокументы(ДокументОбъект);
				
		Для Каждого Док Из ДокументыКоррекции Цикл
			Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Отказ = Истина;	
			КонецЕсли;
			ШаблонСтроки = НСтр("ru='Имеется проведенный документ-коррекции %1, ссылающийся на текущий документ.'");
			СообщениеОбОшибке = СтрШаблон(ШаблонСтроки, Строка(Док.Ссылка)); 
			ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке, Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить документ коррекции по основанию.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - документ
//  Данныезаполнения - Структура	 - данные заполнения коррекции.
//
Процедура ЗаполнитьДанныеДокументаКоррекцииПоОснованию(ДокументОбъект, Данныезаполнения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Данныезаполнения);
		
	РаботаСДокументамиСервер.ОбработкаЗаполнения(ДокументОбъект, ДокументОбъект.ДокументОснование);
	
	ДокументОбъект.ДатаКоррекции = ТекущаяДатаСеанса();
	ДокументОбъект.Ответственный = "";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
		Для Каждого СтрокаСкидки Из ДокументОбъект.Скидки Цикл
			// При коррекции дадим возможность указать произвольный размер бонусной скидки
			Если ДокументОбъект.Коррекция И СтрокаСкидки.Скидка.ТипСкидки = Перечисления.ТипыСкидок.Бонусы Тогда
				СтрокаСкидки.РучноеРедактирование	= Истина;
				СтрокаСкидки.БонусМакс				= 1000000;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Ищет корректирующие документы для текущего.
//
// Параметры:
//  ТекущийДокумент	 - ДокументОбъект - документ
// 
// Возвращаемое значение:
//   Массив.
//
Функция НайтиКорректирующиеДокументы(ТекущийДокумент) Экспорт
	
	Если ТекущийДокумент <> Неопределено И ЗначениеЗаполнено(ТекущийДокумент.Ссылка) Тогда
		ИмяДокумента = ТекущийДокумент.Метаданные().Имя;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Коррекция
		|	И НЕ Док.НеприменениеККТ
		|	И Док.ДокументОснование = &ДокументОснование
		|	И Док.Ссылка <> &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ТекущийДокумент.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выгрузка = РезультатЗапроса.Выгрузить();
		
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Выгрузка);
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПоFEFO

// Заполняет по FEFO серию в строке документа.
//
// Параметры:
//  ЭтотОбъект		 - ДокументОбъект		 - документ
//  ТЧТовары		 - ТабличнаяЧасть		 - товары.
//  ТЧТоварыВторая	 - ТабличнаяЧасть		 - товары.
//  ИмяТЧ			 - Строка				 - табличная часть
//  Дата			 - Дата					 - дата остатков.
//  Склад			 - СправочникСсылка.Склады	 - склад.
//  СкладВторой		 - СправочникСсылка.Склады	 - склад.
//  Филиал			 - СправочникСсылка.Филиалы	 - филиал документа.
//  НомерСтроки		 - Число					 - номер строки для заполнения.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ЗаполнитьПоFEFO(ЭтотОбъект, ТЧТовары, ТЧТоварыВторая, ИмяТЧ, Дата, Склад, СкладВторой, Филиал, НомерСтроки) Экспорт
	
	фМетаданные = ЭтотОбъект.Ссылка.Метаданные();
	фМетаданныеРеквизитыТЧ = фМетаданные.ТабличныеЧасти[ИмяТЧ].Реквизиты;
	Если фМетаданные = Метаданные.Документы.ПеремещениеМатериалов Тогда
		ИмяСкладТЧ = "СкладОтправитель";
	Иначе
		ИмяСкладТЧ = "Склад";
	КонецЕсли;
	
	тзТовары = ТЧТовары.Выгрузить();
	
	мсНоменклатура = Новый Массив;
	мсСклады = Новый Массив;
	
	НетСтрокДляОбработки = Истина;
	
	Для Каждого СтрокаТовары Из тзТовары Цикл
		Если НомерСтроки <> Неопределено Тогда 
			Если НомерСтроки <> СтрокаТовары.НомерСтроки Тогда 
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТовары.Номенклатура.ВестиУчетПоСериям И Не ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) Тогда
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				
				НетСтрокДляОбработки = Ложь;
				мсНоменклатура.Добавить(СтрокаТовары.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаТовары[ИмяСкладТЧ]) Тогда 
					мсСклады.Добавить(СтрокаТовары[ИмяСкладТЧ]);
				ИначеЕсли мсСклады.Найти(Склад) = Неопределено Тогда
					мсСклады.Добавить(Склад);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если НетСтрокДляОбработки Тогда
		Возврат НСтр("ru = 'Нет позиций с учетом по сериям, по которым серия не заполнена.'");
	КонецЕсли;
	
	тзОстаткиСерийНоменклатуры = ПолучитьОстаткиСерийНоменклатуры(Дата, мсНоменклатура, мсСклады, Филиал);
	тзОстаткиСерийНоменклатуры.Сортировать("Номенклатура, СрокГодности");
		
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		Если СтрокаТовары.Номенклатура.ВестиУчетПоСериям И ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) Тогда 
			Номенклатура = СтрокаТовары.Номенклатура;
			СтрокаСклад = СтрокаТовары[ИмяСкладТЧ];
			Если Не ЗначениеЗаполнено(СтрокаСклад) Тогда 
				СтрокаСклад = Склад; 	
			КонецЕсли;
			Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад", Номенклатура, СтрокаТовары.ХарактеристикаНоменклатуры, СтрокаТовары.СерияНоменклатуры, СтрокаСклад);
			СтрокиСерийНоменклатуры = тзОстаткиСерийНоменклатуры.НайтиСтроки(Отбор);
			Коэффициент = ?(СтрокаТовары.ЕдиницаИзмерения.Коэффициент = 0, 1, СтрокаТовары.ЕдиницаИзмерения.Коэффициент); 
			Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда 
				КоличествоНоменклатуры = Окр(СтрокаТовары.Количество*Коэффициент, 3);
			Иначе
				КоличествоНоменклатуры = Окр(СтрокаТовары.Количество*Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 3);
			КонецЕсли;
			Для Каждого ЭлементСтрока Из СтрокиСерийНоменклатуры Цикл
				ЭлементСтрока.Остаток = ?(КоличествоНоменклатуры < ЭлементСтрока.Остаток, ЭлементСтрока.Остаток - КоличествоНоменклатуры, 0);
				Если ЭлементСтрока.Остаток = 0 Тогда 
					тзОстаткиСерийНоменклатуры.Удалить(ЭлементСтрока);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	Если ТЧТоварыВторая <> Неопределено И СкладВторой <> Неопределено Тогда  
		Для Каждого СтрокаТовары Из ТЧТоварыВторая Цикл
			Если СтрокаТовары.Номенклатура.ВестиУчетПоСериям И ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) Тогда 
				Номенклатура = СтрокаТовары.Номенклатура;
				СтрокаСклад = СтрокаТовары.Склад;
				Если Не ЗначениеЗаполнено(СтрокаСклад) Тогда 
					СтрокаСклад = СкладВторой; 	
				КонецЕсли;
				Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад", Номенклатура, СтрокаТовары.ХарактеристикаНоменклатуры, СтрокаТовары.СерияНоменклатуры, СтрокаСклад);
				СтрокиСерийНоменклатуры = тзОстаткиСерийНоменклатуры.НайтиСтроки(Отбор);
				Коэффициент = ?(СтрокаТовары.ЕдиницаИзмерения.Коэффициент = 0, 1, СтрокаТовары.ЕдиницаИзмерения.Коэффициент); 
				Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда 
					КоличествоНоменклатуры = Окр(СтрокаТовары.Количество*Коэффициент, 3);
				Иначе
					КоличествоНоменклатуры = Окр(СтрокаТовары.Количество*Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 3);
				КонецЕсли;
				Для Каждого ЭлементСтрока Из СтрокиСерийНоменклатуры Цикл
					ЭлементСтрока.Остаток = ?(КоличествоНоменклатуры < ЭлементСтрока.Остаток, ЭлементСтрока.Остаток - КоличествоНоменклатуры, 0);
					Если ЭлементСтрока.Остаток = 0 Тогда 
						тзОстаткиСерийНоменклатуры.Удалить(ЭлементСтрока);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Если тзОстаткиСерийНоменклатуры.Количество() = 0 Тогда 
		Возврат НСтр("ru = 'Для обрабатываемых строк нет остатков на указанном складе для заполнения.'");
	КонецЕсли;

	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		Если НомерСтроки <> Неопределено Тогда 
			Если НомерСтроки <> СтрокаТовары.НомерСтроки Тогда 
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовары.Номенклатура.ВестиУчетПоСериям И Не ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) Тогда 
			Номенклатура = СтрокаТовары.Номенклатура;
			СтрокаСклад = СтрокаТовары[ИмяСкладТЧ];
			Если Не ЗначениеЗаполнено(СтрокаСклад) Тогда 
				СтрокаСклад = Склад; 	
			КонецЕсли;
			Отбор = Новый Структура("Номенклатура, Склад", Номенклатура, СтрокаСклад);
			Если ЗначениеЗаполнено(СтрокаТовары.ХарактеристикаНоменклатуры) Тогда
				Отбор.Вставить("ХарактеристикаНоменклатуры", СтрокаТовары.ХарактеристикаНоменклатуры);
			КонецЕсли;
			СтрокиСерийНоменклатуры = тзОстаткиСерийНоменклатуры.НайтиСтроки(Отбор);
			
			Если СтрокиСерийНоменклатуры.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Коэффициент = ?(СтрокаТовары.ЕдиницаИзмерения.Коэффициент = 0, 1, СтрокаТовары.ЕдиницаИзмерения.Коэффициент); 
			Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда 
				КоличествоНоменклатуры = Окр(СтрокаТовары.Количество*Коэффициент, 3);
			Иначе
				КоличествоНоменклатуры = Окр(СтрокаТовары.Количество*Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 3);
			КонецЕсли;
			
			тзТоварыСтрока = тзТовары.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
			ИндексСтрокиТовары = тзТовары.Индекс(тзТоварыСтрока); 
			ИндексВставки = ИндексСтрокиТовары + 1; 
			
			Для Индекс = 0 По СтрокиСерийНоменклатуры.Количество() - 1 Цикл
				
				Остаток = СтрокиСерийНоменклатуры[Индекс].Остаток;
				КоличествоЕдОстатков = ?(КоличествоНоменклатуры <= Остаток, КоличествоНоменклатуры, Остаток);
				Количество = КоличествоЕдОстатков; 
				КоличествоНоменклатуры = КоличествоНоменклатуры - Количество;
				Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда 
					Количество = Окр(Количество/Коэффициент, 3);
				Иначе
					Количество = Окр(Количество/Коэффициент*Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 3);
				КонецЕсли;
								
				Если Индекс = 0 Тогда 
					тзТоварыСтрока = тзТовары.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
					тзТоварыСтрока.СерияНоменклатуры = СтрокиСерийНоменклатуры[Индекс].СерияНоменклатуры;
					тзТоварыСтрока.ХарактеристикаНоменклатуры = СтрокиСерийНоменклатуры[Индекс].ХарактеристикаНоменклатуры;
					СтрокаСклад = СтрокиСерийНоменклатуры[Индекс].Склад;
					Если СтрокаСклад <> Склад Тогда 
						тзТоварыСтрока[ИмяСкладТЧ] = СтрокаСклад;
					КонецЕсли;
					тзТоварыСтрока.Количество = Количество;
					Если фМетаданные.Имя <> "Прием" Тогда
						СтруктураЦен = ПолучитьЦену(ЭтотОбъект, ЭтотОбъект.Прейскурант, тзТоварыСтрока.Номенклатура, ЭтотОбъект.Дата, тзТоварыСтрока.ХарактеристикаНоменклатуры, тзТоварыСтрока.ЕдиницаИзмерения);
						тзТоварыСтрока.Цена = СтруктураЦен.Цена;
						Если фМетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено Тогда 
							тзТоварыСтрока.Сумма = тзТоварыСтрока.Цена * тзТоварыСтрока.Количество;
							РассчитатьСуммуСкидкиСтроки(тзТоварыСтрока);
						КонецЕсли;	
					КонецЕсли;

				Иначе
					НоваяСтрокаТовары = тзТовары.Вставить(ИндексВставки);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
					НоваяСтрокаТовары.СерияНоменклатуры = СтрокиСерийНоменклатуры[Индекс].СерияНоменклатуры;
					НоваяСтрокаТовары.ХарактеристикаНоменклатуры = СтрокиСерийНоменклатуры[Индекс].ХарактеристикаНоменклатуры;
					СтрокаСклад = СтрокиСерийНоменклатуры[Индекс].Склад;
					Если СтрокаСклад <> Склад Тогда 
						НоваяСтрокаТовары[ИмяСкладТЧ] = СтрокаСклад;
					КонецЕсли;
					НоваяСтрокаТовары.Количество = Количество;
					СтруктураЦен = ПолучитьЦену(ЭтотОбъект, ЭтотОбъект.Прейскурант, НоваяСтрокаТовары.Номенклатура, ЭтотОбъект.Дата, НоваяСтрокаТовары.ХарактеристикаНоменклатуры, НоваяСтрокаТовары.ЕдиницаИзмерения);
					НоваяСтрокаТовары.Цена = СтруктураЦен.Цена;
					Если фМетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено Тогда 
						НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.Цена * НоваяСтрокаТовары.Количество;
						РассчитатьСуммуСкидкиСтроки(НоваяСтрокаТовары);
					КонецЕсли;
					Если фМетаданныеРеквизитыТЧ.Найти("КлючСтроки") <> Неопределено Тогда 
						НоваяСтрокаТовары.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(тзТовары);
					КонецЕсли;
					ИндексВставки = ИндексВставки + 1;
				КонецЕсли;
				
				СтрокиСерийНоменклатуры[Индекс].Остаток = ?(Остаток > КоличествоЕдОстатков, Остаток - КоличествоЕдОстатков, 0);
				Если СтрокиСерийНоменклатуры[Индекс].Остаток = 0 Тогда 
					тзОстаткиСерийНоменклатуры.Удалить(СтрокиСерийНоменклатуры[Индекс]);	
				КонецЕсли;
				
				Если КоличествоНоменклатуры = 0 Тогда 
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоНоменклатуры > 0 Тогда
				Количество = КоличествоНоменклатуры;
				Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда 
					Количество = Окр(Количество/Коэффициент, 3);
				Иначе
					Количество = Окр(Количество/Коэффициент*Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 3);
				КонецЕсли;
				НоваяСтрокаТовары = тзТовары.Вставить(ИндексСтрокиТовары);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
				НоваяСтрокаТовары.Количество = Количество;
				Если фМетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено Тогда 
					НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.Цена * НоваяСтрокаТовары.Количество;
					РассчитатьСуммуСкидкиСтроки(НоваяСтрокаТовары);
				КонецЕсли;
				Если фМетаданныеРеквизитыТЧ.Найти("КлючСтроки") <> Неопределено Тогда 
					НоваяСтрокаТовары.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(тзТовары);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	ТЧТовары.Загрузить(тзТовары);
	
	Возврат ТЧТовары;
	
КонецФункции

Функция ПолучитьОстаткиСерийНоменклатуры(Дата, мсНоменклатура, мсСклады, Клиника)
		
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                |	ПартииТоваровНаСкладахОстатки.Склад КАК Склад,
	                |	ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                |	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	                |	ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК Остаток,
	                |	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.ГоденДо КАК СрокГодности
	                |ИЗ
	                |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Дата, ) КАК ПартииТоваровНаСкладахОстатки
	                |ГДЕ
	                |	ПартииТоваровНаСкладахОстатки.Номенклатура В(&СписокНоменклатуры)
	                |	И ПартииТоваровНаСкладахОстатки.Склад В(&Склады)
	                |	И ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.ГоденДо > &Дата";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", мсНоменклатура);
	Запрос.УстановитьПараметр("Склады", мсСклады);
	Запрос.УстановитьПараметр("Дата", Дата);
	тзОстаткиПоСериям = Запрос.Выполнить().Выгрузить();
	
	Возврат тзОстаткиПоСериям;
	
КонецФункции

// Позволяет рассчитать сумму скидки строки документа.
//
// Параметры:
//  ТекСтрока	 - СтрокаТабличнойЧасти	 - строка документа.
//
Процедура РассчитатьСуммуСкидкиСтроки(ТекСтрока) Экспорт
	
	мСумма = ТекСтрока.Цена * ТекСтрока.Количество;
	ТекСтрока.СуммаСкидки = мСумма * ТекСтрока.ПроцентСкидки/100;
	ТекСтрока.Сумма		  = мСумма - ТекСтрока.СуммаСкидки;
	
	Если ТекСтрока.СуммаСкидки <> 0 Тогда
		ПорядокОкругления = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПорядокОкругленияПослеСкидки");
		Если ЗначениеЗаполнено(ПорядокОкругления) Тогда
			ТекСтрока.Сумма	= Ценообразование.ОкруглитьЦену(ТекСтрока.Сумма, ПорядокОкругления, Ложь);
			ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Имя реквизита склада в табличной части документа, если есть.
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - документ
//  ИмяТЧ		 - Строка	 - имя табличной части товаров.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ИмяРеквизитаСклад(ЭтотОбъект, ИмяТЧ) Экспорт 
	
	МетаданныеДокументы = Метаданные.Документы;
	МетаданныеОбъекта = ЭтотОбъект.Ссылка.Метаданные();
	
	ИмяСклад = "Склад";
	
	Если МетаданныеОбъекта = МетаданныеДокументы.ПеремещениеМатериалов Тогда
		ИмяСклад = "СкладОтправитель";
		
	ИначеЕсли МетаданныеОбъекта = МетаданныеДокументы.ОказаниеУслуг Тогда
		Если ИмяТЧ = "Товары" Тогда 
			ИмяСклад = "Склад";
		ИначеЕсли ИмяТЧ = "Материалы" Тогда 
			ИмяСклад = "СкладМатериалов";
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументы.Найти("Прием") <> Неопределено И 
		МетаданныеОбъекта = Метаданные.Документы["Прием"]
	Тогда
		ИмяСклад = "СкладМатериалов";
	КонецЕсли;
	
	Возврат Новый Структура("ИмяДокумента, ИмяСклад", МетаданныеОбъекта.Имя, ИмяСклад);
	
КонецФункции

#КонецОбласти

#Область ДвиженияДокументов

// Сворачивает движения документа в наборе записей
//
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей	 - набор записей регистра.
//
Процедура СвернутьДвиженияРегистра(НаборЗаписей, СуммируемыеКолонки = "") Экспорт
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Колонки.Удалить("НомерСтроки");
	ОбщегоНазначения.СвернутьТаблицуЗначений(ТаблицаДвижений, СуммируемыеКолонки);
	НаборЗаписей.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

#Область РегистрНакопленияДенежныеСредства

// Выполняет движения документа по регистру накопления "Оплаты".
//
// Параметры:
//  ДокументОбъект			 - ДокументОбъект	 - объект документа, по которому выполняются движения
//  ТаблицаОплат			 - ТаблицаЗначений	 - таблица с данными для формирования движений
//  СтруктураШапкиДокумента	 - Структура		 - структура шапки документа, откуда вызвана процедура
//  Отказ					 - Булево			 - признак отмены проведения документа.
//
Процедура ВыполнитьДвиженияПоРегиструОплаты(ДокументОбъект, ТаблицаОплат, СтруктураШапкиДокумента, Отказ) Экспорт
	
	НаборДвижений = ДокументОбъект.Движения.Оплаты;	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	// Добавим новые оплаты к старым движениям
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, ТаблицаДвижений);
	// Очистим старые движения, т.к. данные из таблицы будут добавляться, а не заменять их
	НаборДвижений.Очистить();

	Если ДокументОбъект.СдачуВДепозит Тогда
		Движение = ТаблицаДвижений.Добавить();
		Движение.ВидОплаты	= Перечисления.ВидыОплаты.Наличными;
		Движение.Сумма		= СтруктураШапкиДокумента.Сдача * ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ВозвратКлиенту, -1, 1);
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Клиент,"Клиент");
	НаборДвижений.мПериод           = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДобавитьДвижениеПоРегиструОплаты(ДвиженияОплаты, Дата, Клиент, ВидОплаты, Сумма) Экспорт
	
	Движение = ДвиженияОплаты.Добавить();
	Движение.Период		= Дата;
	Движение.ВидОплаты	= ВидОплаты;
	Движение.Клиент		= Клиент;
	Движение.Сумма		= Сумма;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияМДЛП

// Возвращает структуру дробной части частичной продажи маркированной упаковки
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура	 - Номенклатура
//  ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения - Единица измерения
// 
// Возвращаемое значение:
// Структура  - Структура со свойствами "Числитель" и "Знаменатель"
//
Функция ПолучитьДробнуюЧастьМДЛП(Номенклатура, ЕдиницаИзмерения) Экспорт
	
	ДробнаяЧасть = Новый Структура("Числитель, Знаменатель");
	ДробнаяЧасть.Знаменатель = Справочники.ЕдиницыИзмерения.ПолучитьКоличествоБазовыхЕдиницВУпаковке(Номенклатура);
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) И ДробнаяЧасть.Знаменатель > ЕдиницаИзмерения.Коэффициент Тогда
		ДробнаяЧасть.Числитель = ЕдиницаИзмерения.Коэффициент;
	Иначе
		ДробнаяЧасть.Числитель = 0;	
	КонецЕсли;
	
	Возврат ДробнаяЧасть;	
	
КонецФункции
 
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик подписки на событие ДокументыПередЗаписью.
//
// Параметры:
//  Источник		 - ДокументОбъект			 - источник.
//  Отказ			 - Булево					 - отказ.
//  РежимЗаписи		 - РежимЗаписиДокумента		 - режим записи.
//  РежимПроведения	 - РежимПроведенияДокумента	 - режим проведения.
//
Процедура ДокументыПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Простановка филиала в документ, если на момент записи он пустой
	ИмяФилиал = ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов();
	
	Если Не Отказ
		И Источник.Метаданные().Реквизиты.Найти(ИмяФилиал) <> Неопределено
		И Источник[ИмяФилиал].Пустая()
	Тогда
		Источник[ИмяФилиал] = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	КонецЕсли;
	
	// Вставка признака ЭтоНовый в ДополнительныеСведения объекта.
	Если Не Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСНСПК // Операции оплаты ЭС НСПК.

Функция ПараметрыОперацииНСПК(ЭквайринговыйТерминал = Неопределено, Документ = Неопределено) Экспорт

	ПараметрыОперации = ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК(); 
	ПараметрыОперации.АдресСервера = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("АдресСервисаНСПК");
	
	Если ЭквайринговыйТерминал <> Неопределено Тогда
		ПараметрыОперации.КлючДоступа = ЭквайринговыйТерминал.КлючОрганизацииНСПК;
		ПараметрыОперации.ИдентификаторКассы = ЭквайринговыйТерминал.ИдентификаторНСПК;
		ПараметрыОперации.КлючКассы = ЭквайринговыйТерминал.КлючКассыНСПК;
	КонецЕсли;
	
	ПараметрыОперации.ИдентификаторЗапроса = "0";
	ПараметрыОперации.ПроверятьКорневыеСертификаты = Истина;
    ПараметрыОперации.ОснованиеФискальнойОперации = Документ;
	
	Если Документ <> Неопределено Тогда
		
		ПараметрыОперации.ИдентификаторКорзины = Документ.ИдентификаторКорзиныНСПК;
		ДанныеФискальнойОперации = ПолучитьФискальныеДанные(Документ);
		
		Если ДанныеФискальнойОперации <> Неопределено Тогда
			ПараметрыОперации.НомерФискальногоНакопителя = ДанныеФискальнойОперации.ЗаводскойНомерФН;
			ПараметрыОперации.ФискальныйТипРасчета	 = ДанныеФискальнойОперации.ТипРасчета;
			ПараметрыОперации.ФискальныйПризнакЧека	 = Лев(ДанныеФискальнойОперации.ФискальныйПризнак, 10);
			ПараметрыОперации.ФискальныйЧекНомер	 = ДанныеФискальнойОперации.НомерЧекаККМ;
			ПараметрыОперации.ФискальныйЧекДатаВремя = ДанныеФискальнойОперации.Дата;
			ПараметрыОперации.ФискальныйЧекСумма	 = Документы.ОказаниеУслуг.ПолучитьСуммуОплатыНСПК(ДанныеФискальнойОперации.ДокументОснование);
			
			МестоРасчета = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(ДанныеФискальнойОперации.Филиал, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресФактический, Истина, Ложь);
			Если МестоРасчета = Неопределено Тогда
				МестоРасчета = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(ДанныеФискальнойОперации.Филиал, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресЮридический, Истина, Ложь);	
			КонецЕсли;
			Если МестоРасчета <> Неопределено Тогда
				ПараметрыОперации.ФискальныйМестоРасчетов = Лев(МестоРасчета, 255);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыОперации.ИдентификаторКорзины = ""; // Удаляем корзину ЭС НСПК из документа.
	КонецЕсли;
	
	Возврат ПараметрыОперации;
	
КонецФункции

Функция ПолучитьФискальныеДанные(Документ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ФискальныеОперации.ДокументОснование КАК ДокументОснование,
	               |	ФискальныеОперации.Сумма КАК Сумма,
	               |	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак,
	               |	ФискальныеОперации.ТипРасчета КАК ТипРасчета,
	               |	ФискальныеОперации.ЗаводскойНомерФН КАК ЗаводскойНомерФН,
	               |	ФискальныеОперации.НомерЧекаККМ КАК НомерЧекаККМ,
	               |	ФискальныеОперации.Дата КАК Дата,
	               |	ФискальныеОперации.ДокументОснование.Филиал КАК Филиал
	               |ИЗ
	               |	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	               |ГДЕ
	               |	ФискальныеОперации.ДокументОснование = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьДокументИзОчередиПодтвержденияНСПК(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ДокументВОчередиНаПодтверждениеНСПК(Документ) <> Неопределено Тогда
		Запись = РегистрыСведений.ОчередьНаПодтверждениеОперацииЭС_НСПК.СоздатьМенеджерЗаписи();
		Запись.Документ = Документ;
		Запись.Удалить();
	КонецЕсли;

КонецПроцедуры

Функция ДокументВОчередиНаПодтверждениеНСПК(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОчередьНаПодтверждениеОперацииЭС_НСПК.Документ КАК Документ
	               |ИЗ
	               |	РегистрСведений.ОчередьНаПодтверждениеОперацииЭС_НСПК КАК ОчередьНаПодтверждениеОперацииЭС_НСПК
	               |ГДЕ
	               |	ОчередьНаПодтверждениеОперацииЭС_НСПК.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Документ;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
 
Процедура ДобавитьДокументВОчередьПодтвержденияНСПК(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ДокументВОчередиНаПодтверждениеНСПК(Документ) = Неопределено Тогда
		НоваяЗапись = РегистрыСведений.ОчередьНаПодтверждениеОперацииЭС_НСПК.СоздатьМенеджерЗаписи();
		НоваяЗапись.Документ = Документ;
		НоваяЗапись.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ВидОплатыЭСНСПК_ВнутреннееИмя() Экспорт
	
	Возврат "ЭС НСПК";
	
КонецФункции

Функция СпособыОплатыЭСНСПКЭквайринговогоТерминала(ЭквайринговыйТерминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭТ", ЭквайринговыйТерминал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	               |ГДЕ
	               |	ЭквайринговыеТерминалы.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыСпособовОплат.СертификатНСПК)
	               |	И ЭквайринговыеТерминалы.ЭквайрингНСПК = &ЭТ
	               |	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

Процедура СметаПоДокументу_ЗаполнитьНаименованиеПозиций(Смета, Документ, ДополнительныеПараметры)

	// Вычисление шаблона с учётом ключей ДополнительныеПараметры
	// ...
	// Нет ключей.
	ШаблонНаименования = "%ТорговоеНаименованиеНоменклатуры %НМУКод";
	
	ПоляПодстановки = Новый Структура;
	ПоляПодстановки.Вставить("НМУКод");
	ПоляПодстановки.Вставить("НМУНаименование");
	ПоляПодстановки.Вставить("ХарактеристикаНоменклатуры");
	ПоляПодстановки.Вставить("СерияНоменклатуры");
	ПоляПодстановки.Вставить("ЕдиницаИзмерения");
	ПоляПодстановки.Вставить("НоменклатураНаименование"); // Просто Номенклатура.Наименование без учета полного.
	
	// Вычисление колонки "НаименованиеПозиции"
	Для Каждого СтрокаСмета Из Смета Цикл
		
		Если ТипЗнч(СтрокаСмета.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			ТорговоеНаименованиеНоменклатуры = ?(ЗначениеЗаполнено(СтрокаСмета.НоменклатураНаименованиеПолное),
												 СтрокаСмета.НоменклатураНаименованиеПолное,
												 СтрокаСмета.НоменклатураНаименование);
		
		ИначеЕсли ТипЗнч(СтрокаСмета.Номенклатура) = Тип("СправочникСсылка.Сертификаты") Тогда
			ТорговоеНаименованиеНоменклатуры = СтрокаСмета.Номенклатура.ВидСертификата;
		Иначе
			ТорговоеНаименованиеНоменклатуры = Строка(СтрокаСмета.Номенклатура);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПоляПодстановки, СтрокаСмета);
		ПоляПодстановки.Вставить("ТорговоеНаименованиеНоменклатуры", ТорговоеНаименованиеНоменклатуры);
		
		НаименованиеПозиции = ШаблонНаименования;
		Для Каждого ПолеПодстановки Из ПоляПодстановки Цикл
			НаименованиеПозиции = СтрЗаменить(НаименованиеПозиции, "%" + ПолеПодстановки.Ключ, Строка(ПолеПодстановки.Значение));
		КонецЦикла;
		
		СтрокаСмета.НаименованиеПозиции = НаименованиеПозиции;
	КонецЦикла;

КонецПроцедуры

Процедура СметаПоДокументу_УдалитьСтрокиПоПараметрамСметы(Смета, Документ, ПараметрыСметы)
	
	ТолькоУслуги				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСметы, "ТолькоУслуги", Ложь);
	ОставитьБесплатные			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСметы, "ОставитьБесплатные", Ложь);
	ОставитьСертификатыНаОплату	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСметы, "ОставитьСертификатыНаОплату", Ложь);
	ОставитьАбонементы			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСметы, "ОставитьАбонементы", Ложь);
	//ОставитьОплачиваемыеПолисом	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСметы, "ОставитьОплачиваемыеПолисом", Ложь);
	
	мОбрИнд = Смета.Количество()-1;
	Для Сч = 0 По мОбрИнд Цикл
		
		СтрокаСметы = Смета[мОбрИнд-Сч];
		
		// ТолькоУслуги - оставить только номенклатуру с видом "Услуга".
		Если  ТолькоУслуги
			И СтрокаСметы.НоменклатураВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга 
		Тогда
			Смета.Удалить(мОбрИнд-Сч);
			Продолжить;
		КонецЕсли;
		
		// ОставитьБесплатные - оставить даже позиции с нулевой ценой.
		Если Не ОставитьБесплатные
			И СтрокаСметы.Сумма = 0
		Тогда
			Смета.Удалить(мОбрИнд-Сч);
			Продолжить;
		КонецЕсли;
		
		// Сертификаты
		Если ТипЗнч(СтрокаСметы.Номенклатура) = Тип("СправочникСсылка.Сертификаты") Тогда
			
			ВидСертификата = СтрокаСметы.Номенклатура.ВидСертификаты;
			
			// ОставитьСертификатыНаОплату - не удалять сертификаты на оплату.
			Если  Не ОставитьСертификатыНаОплату
				И ВидСертификата = Перечисления.ТипыСертификатов.НаОплату
			Тогда
				Смета.Удалить(мОбрИнд-Сч);
				Продолжить;
			КонецЕсли;
			
			// ОставитьАбонементы - не удалять сертификаты на услуги.
			Если  Не ОставитьАбонементы
				И ВидСертификата <> Перечисления.ТипыСертификатов.НаОплату
			Тогда
				Смета.Удалить(мОбрИнд-Сч);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//// ОставитьОплачиваемыеПолисом - не удалять оплачиваемые полисом.
		//Если  ТолькоУслуги
		//	И СтрокаСметы.???
		//Тогда
		//	Смета.Удалить(мОбрИнд-Сч);
		//	Продолжить;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти
