#Область ПрограммныйИнтерфейс

Процедура СозданиеИзменениеПациента(Пациент, ПервичныйВводПациента = Ложь) Экспорт
	
	ИнтеграцияЕГИСЗ_ГИП.СозданиеИзменениеПациента(Пациент, ПервичныйВводПациента);
	
КонецПроцедуры

Функция ЗапросДанныхОПациенте(
	ИдентификаторПациента = Неопределено,
	Фамилия = Неопределено,
	Имя = Неопределено,
	Отчество = Неопределено,
	ДатаРождения = Неопределено,
	Пол = Неопределено,
	Снилс = Неопределено
	) Экспорт
	
	Возврат ИнтеграцияЕГИСЗ_ГИП.ЗапросДанныхОПациенте(ИдентификаторПациента, Фамилия, Имя, Отчество, ДатаРождения, Пол, Снилс);
	
КонецФункции

Функция ПроверитьНеобходимостьАвтоОбновления(НаименованиеСправочника, OIDСправочника = Неопределено) Экспорт
	
	Если OIDСправочника = Неопределено Тогда
		МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + НаименованиеСправочника);
		
		Попытка
			OIDСправочника = МенеджерСправочника.ПолучитьOIDСправочника();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	РезультатПроверки = Новый Структура();
	МенеджерЗаписи = РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Классификатор = OIDСправочника;
	МенеджерЗаписи.Прочитать();
	
	РезультатПроверки.Вставить("Режим", МенеджерЗаписи.РежимОбновления);
	РезультатПроверки.Вставить("ТекущаяВерсия", МенеджерЗаписи.Версия);
	
	Версии = ЗагрузкаКлассификаторовНСИЕГИСЗ.ПолучитьВсеВерсииКлассификатора(OIDСправочника);
	Если Версии <> Неопределено Тогда
		ДанныеОТекущейВерсии = Версии.НайтиСтроки(Новый Структура("Версия",МенеджерЗаписи.Версия));
		Если ДанныеОТекущейВерсии.Количество() > 0 Тогда
			ДатаТекущейВерсии = ДанныеОТекущейВерсии[0].ДатаОбновления;
		КонецЕсли;
		ПоследняяВерсия = Версии[Версии.Количество()-1].Версия;
		ДатаПоследнейВерсии = Версии[Версии.Количество()-1].ДатаОбновления;
	КонецЕсли;
	
	РезультатПроверки.Вставить("Oid",					OIDСправочника);
	РезультатПроверки.Вставить("ПоследняяВерсия",		ПоследняяВерсия);
	РезультатПроверки.Вставить("ДатаТекущейВерсии",		ДатаТекущейВерсии);
	РезультатПроверки.Вставить("ДатаПоследнейВерсии",	ДатаПоследнейВерсии);
	РезультатПроверки.Вставить("ВерсияУстарела",		РезультатПроверки.ТекущаяВерсия <> ПоследняяВерсия); // Невозможно иметь текущий номер версии больше, чем последняя в ФР НСИ.
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОбновитьСправочник(OidСправочника) Экспорт
	
	Возврат ИнтеграцияЕГИСЗСервер.ОбновитьСправочник(OidСправочника);
	
КонецФункции 

Функция ПолучитьПроблемыСЭМДПередПодписанием(Документ) Экспорт
	
	Возврат ИнтеграцияЕГИСЗ_СЭМД.ПолучитьПроблемыСЭМДПередПодписанием(Документ);
	
КонецФункции

Функция ПолучитьXMLПоСсылкеМД(Ссылка, СвойстваЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, НаименованиеШаблона, ТекстОшибки, ДополнительныеПараметры) Экспорт
	
	Возврат ИнтеграцияЕГИСЗ_СЭМД.ПолучитьXMLПоСсылкеМД(Ссылка, СвойстваЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, НаименованиеШаблона, ТекстОшибки, ДополнительныеПараметры);
	
КонецФункции

Функция ДокументЯвляетсяЗаключениемМедосмотра(Документ) Экспорт
	
	Возврат ДопСерверныеФункции.ИмяСсылочногоТипа(Документ) = "Документ.ПрохождениеМедосмотра" И Документ.ВидПрохожденияМО <> Перечисления["ВидыМедосмотров"].СправкаПрочий;
	
КонецФункции

Функция ИмеютсяОшибкиВалидацииПоДокументу(МедицинскийДокумент) Экспорт
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(МедицинскийДокумент);
	СотрудникУстановившийПодпись = Пользователи.ТекущийПользователь().Сотрудник;
	
	ДополнительныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ДополнительныеПараметрыДляРаботыССЭМД();
	
	ДолжностьМЗ = Неопределено;
	ДолжностиСотрудника = ИнтеграцияЕГИСЗВызовСервера.ДолжностиМЗ(СотрудникУстановившийПодпись);
	Если ДолжностиСотрудника.Количество() > 0 Тогда
		// Для проверки на наличие ошибок подойдёт любая должность
		ДолжностьМЗ = ДолжностиСотрудника[0];
	КонецЕсли;
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		Для Каждого СтрокаШаблона Из МедицинскийДокумент.ШаблоныПриема Цикл
			ДополнительныеПараметры.ШаблонОсмотра = СтрокаШаблона.ШаблонПриема;
			ДополнительныеПараметры.ИндексШаблона = МедицинскийДокумент.ШаблоныПриема.Индекс(СтрокаШаблона);
			
			Если ИмеютсяОшибкиВалидацииПоШаблону(МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		Если ЗначениеЗаполнено(МедицинскийДокумент.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
			ДополнительныеПараметры.ШаблонОсмотра = МедицинскийДокумент.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
			Возврат ИмеютсяОшибкиВалидацииПоШаблону(МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры);
		Иначе
			МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
			ОбработанныеПриказы = Новый Массив;
			Для Каждого СтрокаФактора Из МедицинскийДокумент.ФакторыИУсловияРаботы Цикл
				Если МодульМедосмотрыСервер.ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДополнительныеПараметры.ШаблонОсмотра = СтрокаФактора.Фактор.ШаблонОсмотраСправки;
					ДополнительныеПараметры.ВредныйФакторСправки = СтрокаФактора.Фактор;
					ДополнительныеПараметры.ПриказМО = Неопределено;
					
					Если ИмеютсяОшибкиВалидацииПоШаблону(МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры) Тогда
						Возврат Истина;
					КонецЕсли;
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор);
				Иначе
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор.Приказ) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДополнительныеПараметры.ШаблонОсмотра = Неопределено;
					ДополнительныеПараметры.ВредныйФакторСправки = Неопределено;
					ДополнительныеПараметры.ПриказМО = СтрокаФактора.Фактор.Приказ;
					
					Если ИмеютсяОшибкиВалидацииПоШаблону(МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры) Тогда
						Возврат Истина;
					КонецЕсли;
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор.Приказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		Возврат ИмеютсяОшибкиВалидацииПоШаблону(МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСписокLocalidПоВидуДокумента(ВидДокумента) Экспорт
	
	МакетXML = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьМакетСправочникаПоВидуДокумента(ВидДокумента);
	Если ЗначениеЗаполнено(МакетXML) Тогда
		Возврат ИнтеграцияЕГИСЗ_СЭМД.СписокLocalidМакета(МакетXML);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Процедура ПересчитатьОбязательныеПоляLocalid(мСтрокиLocalid, мСтрокиКонстант) Экспорт
	
	ИнтеграцияЕГИСЗ_СЭМД.ПересчитатьОбязательныеПоляLocalid(мСтрокиLocalid, мСтрокиКонстант);
	
КонецПроцедуры

Функция ДолжностиМЗ(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должности.ДолжностьМинздрава КАК ДолжностьМинздрава,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.Должности КАК Должности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = &Сотрудник)
		|			И Должности.Ссылка = Сотрудники.Должность
		|			И (Должности.ДолжностьМинздрава <> ЗНАЧЕНИЕ(Справочник.КлассификаторыМинЗдрава.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДолжностиМинздрава.ДолжностьМинздрава,
		|	1
		|ИЗ
		|	РегистрСведений.ДолжностиМинздрава КАК ДолжностиМинздрава
		|ГДЕ
		|	ДолжностиМинздрава.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДолжностьМинздрава");
	
КонецФункции

Функция ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, ВидКлассификатора = Неопределено, ИмяСправочникаКлассификатора = Неопределено) Экспорт
	Возврат ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, ВидКлассификатора, ИмяСправочникаКлассификатора);
КонецФункции

Функция ПроверитьСоответствиеТиповКлассификацийВитальныхПараметров(ВитальныеПараметры) Экспорт
	
	Возврат ИнтеграцияЕГИСЗ_СЭМД.ПроверитьСоответствиеТиповКлассификацийВитальныхПараметров(ВитальныеПараметры);
	
КонецФункции

Функция ПолучитьСтруктуруТипаЗначенияВитальногоПараметра(ВитальныйПараметр) Экспорт
	
	СтруктураТипа = Новый Структура("Тип, ВидКлассификатора");
	
	Если ТипЗнч(ВитальныйПараметр) = Тип("СправочникСсылка.КлассификаторыМинЗдрава")
		И ВитальныйПараметр.ВидКлассификатора = Перечисления.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры
	Тогда
		СтрокиАтрибутаТипа = ВитальныйПараметр.Атрибуты.НайтиСтроки(Новый Структура("Ключ", "DATA_TYPE"));
		Если СтрокиАтрибутаТипа.Количество() > 0 Тогда
			СтруктураТипа.Тип = ИнтеграцияЕГИСЗ_СЭМД.ТипДанныхИзXML(СтрокиАтрибутаТипа[0].Значение);
		КонецЕсли;
		
		СтрокиАтрибутаВидаКлассификатора = ВитальныйПараметр.Атрибуты.НайтиСтроки(Новый Структура("Ключ", "OID"));
		Если СтрокиАтрибутаВидаКлассификатора.Количество() > 0 Тогда
			ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(СтрокиАтрибутаВидаКлассификатора[0].Значение);
			Если ПараметрыСправочника.Свойство("ВидКлассификатора") Тогда
				СтруктураТипа.ВидКлассификатора = ПараметрыСправочника.ВидКлассификатора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураТипа;
	
КонецФункции

Функция ПолучитьПриказВредныйФакторПоУИД(ПМО, УИД) Экспорт
	
	СтрокаПриказа = ПМО.ИдентификаторыПриказов.Найти(УИД, "УИД");
	Если СтрокаПриказа <> Неопределено Тогда
		Возврат СтрокаПриказа.ПриказВредныйФактор;
	КонецЕсли;
	
	Возврат Справочники.ПриказыМедосмотров.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьУИДПоПриказуВредномуФактору(ПМО, ПриказВредныйФактор) Экспорт
	
	СтрокаПриказа = ПМО.ИдентификаторыПриказов.Найти(ПриказВредныйФактор, "ПриказВредныйФактор");
	Если СтрокаПриказа <> Неопределено Тогда
		Возврат СтрокаПриказа.УИД;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьДанныеСтраховойМедОрганизации(СМО) Экспорт
	
	Результат = Новый Структура();
	
	Если ЗначениеЗаполнено(СМО) И ТипЗнч(СМО) = Тип("СправочникСсылка.РеестрСтраховыхМедОрганизаций") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеестрСтраховыхМедОрганизаций.Наименование КАК Наименование,
			|	РеестрСтраховыхМедОрганизаций.ОГРН КАК ОГРН,
			|	РеестрСтраховыхМедОрганизаций.КПП КАК КПП,
			|	РеестрСтраховыхМедОрганизаций.ПолноеНаименование КАК ПолноеНаименование
			|ИЗ
			|	Справочник.РеестрСтраховыхМедОрганизаций КАК РеестрСтраховыхМедОрганизаций
			|ГДЕ
			|	РеестрСтраховыхМедОрганизаций.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", СМО);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выгрузка = РезультатЗапроса.Выгрузить();
		Для Каждого СтрокаТЗ Из Выгрузка Цикл
			Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверка существует ли файл
Функция ФайлСуществует(ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции

Функция ПолучитьДДФайла(ИмяФайла) Экспорт
	
	Попытка
		Возврат Новый ДвоичныеДанные(ИмяФайла);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МенеджерКриптографии(Операция, ПараметрыСозданияМенеджераКриптографии = Неопределено) Экспорт
	Возврат ЭлектроннаяПодписьСлужебный.МенеджерКриптографии(Операция, ПараметрыСозданияМенеджераКриптографии);
КонецФункции

Функция Подписать(Знач КонвертSOAP, ДанныеАлгоритмаПодписания, СертификатКриптографии, МенеджерКриптографии) Экспорт
	Возврат ЭлектроннаяПодписьСлужебный.Подписать(КонвертSOAP, ДанныеАлгоритмаПодписания, СертификатКриптографии, МенеджерКриптографии);
КонецФункции

Функция ПараметрыСозданияМенеджераКриптографии() Экспорт
	Возврат ЭлектроннаяПодписьСлужебный.ПараметрыСозданияМенеджераКриптографии();
КонецФункции

Функция ПолучитьДДСертификата(Сертификат) Экспорт
	Возврат Сертификат.ДанныеСертификата.Получить();
КонецФункции

Функция ПолучитьСтрокуПоXPath(ДокументDOM, Знач Разыменователь = Неопределено, XPath) Экспорт
	
	Если Неопределено = Разыменователь Тогда
		Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	КонецЕсли;
	
	ТипРезультата = ТипРезультатаDOMXPath.Строка;
	
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(
		XPath, ДокументDOM, Разыменователь, ТипРезультата
	);
	
	Возврат РезультатXPath.СтроковоеЗначение;
	
КонецФункции

Процедура ЗаписатьДанныеОтправленногоСообщенияВРегистр(УИДСообщения, ДатаСообщения, ИдентификаторДокумента, ИдентификаторРЭМД = Неопределено, Объект = Неопределено) Экспорт
	ИнтеграцияЕГИСЗ_РЭМД.ЗаписатьДанныеОтправленногоСообщенияВРегистр(УИДСообщения, ДатаСообщения, ИдентификаторДокумента, ИдентификаторРЭМД, Объект);
КонецПроцедуры

Функция ПолучитьСодержимоеЭлемента(РодительскийУзелDOM, ИмяЭлемента, Индекс = 0) Экспорт
	Возврат ИнтеграцияЕГИСЗСлужебныйСервер.ПолучитьСодержимоеЭлемента(РодительскийУзелDOM, ИмяЭлемента, Индекс);
КонецФункции

Функция ЗаписатьВЖурналРегистрации(ИмяСобытия, ПредставлениеУровня = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = Неопределено, РежимТранзакции = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньСобытияПоПредставлению(ПредставлениеУровня), ОбъектМетаданных, Данные, Комментарий, РежимТранзакции);
КонецФункции

Функция УровеньСобытияПоПредставлению(ПредставлениеУровня) Экспорт
	Если ПредставлениеУровня = "Информация" Тогда
		Возврат УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ПредставлениеУровня = "Ошибка" Тогда
		Возврат УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ПредставлениеУровня = "Предупреждение" Тогда
		Возврат УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли ПредставлениеУровня = "Примечание" Тогда
		Возврат УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
КонецФункции

Процедура ЕГИСЗ_ОбработкаПолученияФормыОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Или ВидФормы = "ФормаГруппы" Тогда
		МетаданныеСправочника = Источник.ПустаяСсылка().Метаданные();
		ЭлементСоставаРеквизита =  Метаданные.ОбщиеРеквизиты.УИДЕГИСЗ.Состав.Найти(МетаданныеСправочника);
		Если ЭлементСоставаРеквизита <> Неопределено
			И ЭлементСоставаРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
			И МетаданныеСправочника.ОсновнаяФормаОбъекта = Неопределено
		Тогда
			СтандартнаяОбработка = Ложь;
			Если Параметры.Свойство("Ключ") Тогда
				Ссылка = Параметры.Ключ;
			Иначе
				Ссылка = Источник.ПустаяСсылка();
			КонецЕсли;
			Параметры.Вставить("СправочникСсылка", Ссылка);
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.ЭлементКлассификатораЕГИСЗ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмеютсяОшибкиВалидацииПоШаблону(МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗ, ДополнительныеПараметры)
	
	ОшибкиВалидации = Новый ТаблицаЗначений;
	ОшибкиВалидации.Колонки.Добавить("Текст");
	ОшибкиВалидации.Колонки.Добавить("Правило");
	ОшибкиВалидации.Колонки.Добавить("Расположение");
	
	СвойстваЭМД = ИнтеграцияЕГИСЗ_РЭМД.СформироватьСвойстваЭМД(МедицинскийДокумент, ДополнительныеПараметры);
	Если ЗначениеЗаполнено(СвойстваЭМД.ВидРЭМД.Схематрон) Тогда
		ИнтеграцияЕГИСЗ_СЭМД.ЗаполнитьОшибкиВалидацииПоСхематрону(СвойстваЭМД.ВидРЭМД.Схематрон, ОшибкиВалидации, МедицинскийДокумент, СотрудникУстановившийПодпись, ДолжностьМЗ, СвойстваЭМД.ВидРЭМД, ДополнительныеПараметры);
		Если ОшибкиВалидации.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьЗаполненностьОбязательныхРеквизитовВрача(Врач, НезаполненныеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Врач.СНИЛС) Тогда
		НезаполненныеРеквизиты.Добавить(НСтр("ru='СНИЛС врача'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Врач.Подразделение) Тогда
		НезаполненныеРеквизиты.Добавить(НСтр("ru='Подразделение врача'"));
	ИначеЕсли Не ЗначениеЗаполнено(Врач.Подразделение.ПодразделениеМинздрава) Тогда
		НезаполненныеРеквизиты.Добавить(НСтр("ru='Подразделение минздрава в подразделении врача'"));
	КонецЕсли;
	
	ДолжностиМЗ = ДолжностиМЗ(Врач);
	
	Если ДолжностиМЗ.Количество() = 0 Тогда
		НезаполненныеРеквизиты.Добавить(НСтр("ru='Должность минздрава'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьОбязательныхРеквизитовКлиента(Клиент, НезаполненныеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Клиент.СНИЛС) Тогда
		НезаполненныеРеквизиты.Добавить(НСтр("ru='СНИЛС клиента'"));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяФормыВыбораКлассификатораПоТипу(ТипКлассификатора) Экспорт
	
	Попытка
		ЭлементКлассификатора = Новый(ТипКлассификатора);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	МетаданныеКлассификатора = ЭлементКлассификатора.Метаданные();
	
	Если Метаданные.ОбщиеРеквизиты.УИДЕГИСЗ.Состав.Найти(МетаданныеКлассификатора) <> Неопределено Тогда
		Возврат СтрШаблон("%1.ФормаВыбора", МетаданныеКлассификатора.ПолноеИмя());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти