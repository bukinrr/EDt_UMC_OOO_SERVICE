//+БИТ Заглушка для типовых подсистем
Функция ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Очередь, ПолноеИмяРегистра) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ 1 ГДЕ ЛОЖЬ");
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
//-БИТ	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для проверки доступности объекта при выполнении отложенного обновления.
//

// Вызывает исключение или блокирует форму от редактирования, если
// имеются незавершенные отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект Данные.
//
// При вызове из отложенного обработчика обновления (случай проверки в программном интерфейсе)
// проверка не выполняется, если не указан параметр ИмяОтложенногоОбработчика, так как
// предполагается, что порядок обновления уже учтен при построении очередей.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура, Строка - ссылка на объект, сам объект,
//           набор записей или полное имя объекта метаданных, обработку которого необходимо проверить.
//  Форма  - УправляемаяФорма - если объект не обработан, то у переданной формы
//           будет установлено свойство ТолькоПросмотр. Если форма не была
//           передана, то будет вызвано исключение.
//
//  ИмяОтложенногоОбработчика - Строка - если заполнено, тогда при вызове из другого отложенного обработчика
//           проверяется, что указанный отложенный обработчик имеет номер очереди меньше, чем текущий.
//           Если это не так, тогда вызывается исключение о недопустимости использования
//           программного интерфейса указанного в параметре ИмяПроцедурыПрограммногоИнтерфейса.
//
//  ИмяПроцедурыПрограммногоИнтерфейса - Строка - имя процедуры программного интерфейса,
//           которое выводится в тексте исключения, вызываемого при проверке номера очереди
//           отложенного обработчика обновления, указанного в параметре ИмяОтложенногоОбработчика.
//
//  Пример:
//   Блокировка формы объекта в обработчике ПриСозданииНаСервере модуля формы:
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
//
//   Блокировка записи объекта в обработчике ПередЗаписью модуля объекта (набора записей):
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
//
//   Проверить, что обновлен конкретный объект и вызвать исключение о недопустимости вызова
//   процедуры ЭлектроннаяПодпись.ОбновитьПодпись, если он еще не обработан указанным обработчиком
//   Справочник.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию:
//
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ПодписанныйОбъект,,
//      "Справочник.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию",
//      "ЭлектроннаяПодпись.ОбновитьПодпись");
//
//   Проверить, что обновлены все объекты требуемого типа:
//   ВсеЗаказыОбработаны = ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("Документ.ЗаказПокупателя"); 
//
Процедура ПроверитьОбъектОбработан(Данные, Форма = Неопределено, ИмяОтложенногоОбработчика = "", ИмяПроцедурыПрограммногоИнтерфейса = "") Экспорт
	//+бит	
	//Если Не ЭтоВызовИзОбработчикаОбновления() Тогда
	//	Результат = ОбъектОбработан(Данные);
	//	Если Результат.Обработан Тогда
	//		Возврат;
	//	КонецЕсли;
	//		
	//	Если Форма = Неопределено Тогда
	//		ВызватьИсключение Результат.ТекстИсключения;
	//	КонецЕсли;
	//	
	//	Форма.ТолькоПросмотр = Истина;
	//	ОбщегоНазначения.СообщитьПользователю(Результат.ТекстИсключения);
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(ИмяОтложенногоОбработчика) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ИмяОтложенногоОбработчика = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ИмяОбработчика Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ОчередьТребуемогоОбработчика = ОчередьОтложенногоОбработчикаОбновления(ИмяОтложенногоОбработчика);
	//ОчередьТекущегоОбработчика = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;
	//Если ОчередьТекущегоОбработчика > ОчередьТребуемогоОбработчика Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru = 'Недопустимо вызывать %1
	//	           |из обработчика обновления
	//	           |%2
	//	           |так как его номер очереди меньше или равен номеру очереди обработчика обновления
	//	           |%3'"),
	//	ИмяПроцедурыПрограммногоИнтерфейса,
	//	ПараметрыСеанса.ПараметрыОбработчикаОбновления.ИмяОбработчика,
	//	ИмяОтложенногоОбработчика);
	//-бит	
КонецПроцедуры

// Проверяет, имеются ли отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект Данные.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура, Строка - ссылка на объект, сам объект, 
//           набор записей или полное имя объекта метаданных, блокировку которого необходимо проверить.
//
// Возвращаемое значение:
//   Структура - с полями:
//     * Обработан       - Булево - признак того, что переданный объект обработан.
//     * ТекстИсключения - Строка - текст исключения, если объект еще не обработан,
//                         содержит список незавершенных обработчиков.
//
// Пример:
//   Проверить, что обновлены все объекты требуемого типа:
//   ВсеЗаказыОбработаны = ОбновлениеИнформационнойБазы.ОбъектОбработан("Документ.ЗаказПокупателя"); 
//
Функция ОбъектОбработан(Данные) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Обработан", Истина);
	Результат.Вставить("ТекстИсключения", "");
	Результат.Вставить("НевыполненныеОбработчикиСтрокой", "");
	
	Если Данные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	//+бит
	//Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
	//	
	//	ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	//	Если Не ЭтоПодчиненныйУзелРИБ Тогда
	//		Возврат Результат;
	//	ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
	//		Возврат Результат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//СведенияОБлокируемыхОбъектах = ОбновлениеИнформационнойБазыСлужебный.СведенияОБлокируемыхОбъектах();
	//
	//Если ТипЗнч(Данные) = Тип("Строка") Тогда
	//	ПолноеИмя = Данные;
	//Иначе
	//	МетаданныеИОтбор = МетаданныеИОтборПоДанным(Данные);
	//	ПолноеИмя = МетаданныеИОтбор.Метаданные.ПолноеИмя();
	//КонецЕсли;
	//
	//ПроверяемыйОбъект = СтрЗаменить(ПолноеИмя, ".", "");
	//
	//ОбработчикиОбъекта = СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[ПроверяемыйОбъект];
	//Если ОбработчикиОбъекта = Неопределено Тогда
	//	Возврат Результат;
	//КонецЕсли;
	//
	//Обработан = Истина;
	//НезавершенныеОбработчики = Новый Массив;
	//Для Каждого Обработчик Из ОбработчикиОбъекта Цикл
	//	СвойстваОбработчика = СведенияОБлокируемыхОбъектах.Обработчики[Обработчик];
	//	Если СвойстваОбработчика.Выполнен Тогда
	//		Обработан = Истина;
	//	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
	//		Обработан = Ложь;
	//	Иначе
	//		Обработан = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
	//			СвойстваОбработчика.ПроцедураПроверки + "(Параметры)", МетаданныеИОтбор);
	//	КонецЕсли;
	//	
	//	Результат.Обработан = Обработан И Результат.Обработан;
	//	
	//	Если Не Обработан Тогда
	//		НезавершенныеОбработчики.Добавить(Обработчик);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если НезавершенныеОбработчики.Количество() > 0 Тогда
	//	ТекстИсключения = НСтр("ru = 'Действия с объектом временно запрещены, так как не завершен переход на новую версию программы.
	//		|Это плановый процесс, который скоро завершится.
	//		|Остались следующие процедуры обработки данных:'");
	//	
	//	НевыполненныеОбработчикиСтрокой = "";
	//	Для Каждого НезавершенныйОбработчик Из НезавершенныеОбработчики Цикл
	//		НевыполненныеОбработчикиСтрокой = НевыполненныеОбработчикиСтрокой + Символы.ПС + НезавершенныйОбработчик;
	//	КонецЦикла;
	//	Результат.ТекстИсключения = ТекстИсключения + НевыполненныеОбработчикиСтрокой;
	//	Результат.НевыполненныеОбработчикиСтрокой = НевыполненныеОбработчикиСтрокой;
	//КонецЕсли;
	//-бит
	
	Возврат Результат;
	
КонецФункции

// Дополнительные параметры функций ОтметитьКОбработке и ОтметитьВыполнениеОбработки.
// 
// Возвращаемое значение:
//  Структура:
//     * ЭтоДвижения - Булево - в параметре Данные функции переданы ссылки на регистраторы, по которым нужно обновить движения.
//                              Значение по умолчанию - Ложь.
//      * ПолноеИмяРегистра - Строка - полное имя регистра, по которому нужно обновить данные. Например, РегистрНакопления.ТоварыНаСкладах.
//      * ОтметитьВсеРегистраторы - Булево - необходимо отметить к обработке все проведенные документы переданного во
//                                           втором параметре типа.
//                                           В этом случае в параметре Данные процедуры можно передавать
//                                           ОбъектМетаданных:Документ или ДокументСсылка.
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений,
//                                                 по которым нужно обновлять данные, значение по умолчанию - Ложь.
//
Функция ДополнительныеПараметрыОтметкиОбработки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Ложь);
	ДополнительныеПараметры.Вставить("ОтметитьВсеРегистраторы", Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Ложь);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Отмечает, что переданные данные необходимо обновить.
// Важно: не рекомендуется передавать в параметр Данные сразу все данные, которые
// необходимо зарегистрировать к обработке, т.к. большие коллекции типа Массив
// или ТаблицаЗначений могут занять существенный объем памяти сервера и привести
// к сильному снижению производительности системы. Рекомендуется получать и передавать
// данные небольшими порциями, например, по 1000 объектов.
//
// Параметры:
//  ОсновныеПараметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//  Данные            - Ссылка, Массив, НаборЗаписей - данные, по которым нужно зарегистрировать изменения.
//                    - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//                        - нет измерений с именем "Узел".
//                        - все измерения регистра должны входить в основной отбор
//                        - в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//                          по которым нужно регистрировать необходимость обработки
//                        - запись наборов в процессе обновления должна проходить с тем же отбором,
//                          что и регистрация необходимости обработки
//                        - в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры - Структура - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
// 
Процедура ОтметитьКОбработке(ОсновныеПараметры, Данные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет, что все данные обработаны.
//
// Параметры:
//  Очередь    - Число        - очередь, к которой отнесен обработчик и в которой зарегистрированы данные,
//                              которые он будет обрабатывать.
//             - Неопределено - проверяется, завершена ли обработка в целом;
//             - Массив       - проверяется, есть ли данные для обработки в списке очередей.
//  ПолноеИмяМетаданныеОбъекта- Строка, ОбъектМетаданных - полное имя обрабатываемого объекта или 
//                              его метаданные. Например, "Документ.ПриходныйОрдерНаТовары"
//                            - Массив - массив полных имен объектов или объектов метаданных,
//                              в массиве не должно быть независимых регистров сведений.
//  Отбор - ЛюбаяСсылка, Структура, Неопределено, Массив - отбор данных для проверки.
//                              Если передано Неопределено - проверяется по всему типу объекта.
//                              Если объект - регистр, подчиненный регистратору, то в отборе - ссылка
//                                 на регистратор или массив ссылок.
//                              Если объект ссылочного типа, то в отборе - или ссылка, или массив ссылок.
//                              Если объект - независимый регистр сведений, то в отборе - структура со значениями измерений.
//                              Ключ структуры - имя измерения, значение - значение отбора (можно передать массив значений).
// 
// Возвращаемое значение:
//  Булево - Истина, если все данные обработаны.
//
Функция ОбработкаДанныхЗавершена(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор = Неопределено) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для использования в обработчиках обновления.
//

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	//+бит
	//Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	//Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	//
	//Если РегистрироватьНаУзлахПлановОбмена = Неопределено
	//	Или Не РегистрироватьНаУзлахПлановОбмена Тогда
	//	Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	//КонецЕсли;
	
	Данные.Записать();
	
	//ОтметитьВыполнениеОбработки(Данные);
	
КонецПроцедуры

// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Объект                            - Произвольный - записываемый объект ссылочного типа. Например, СправочникОбъект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//   ДокументРежимЗаписи              - ДокументРежимЗаписи - имеет смысл только для данных типа ДокументОбъект - режим
//                                                            записи документа.
//											Если параметр не передан, то документ записывается в режиме "Запись".
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь, ДокументРежимЗаписи = Неопределено) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена
		И Не Объект.ЭтоНовый() Тогда
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Если ДокументРежимЗаписи <> Неопределено Тогда
		Если ТипЗнч(ДокументРежимЗаписи) <> Тип("РежимЗаписиДокумента") Тогда
			ТекстИсключения = НСтр("ru = 'Неправильный тип параметра ДокументРежимЗаписи'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Объект.ОбменДанными.Загрузка
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.Проведение
			И Не ДокументРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Объект.Записать(ДокументРежимЗаписи);
	Иначе
		Объект.Записать();
	КонецЕсли;
	
	// ОтметитьВыполнениеОбработки(Объект);
	
КонецПроцедуры

// Записывает изменения в переданном наборе записей.
// Для использования в обработчиках обновления.
//
// Параметры:
//   НаборЗаписей                      - РегистрСведенийНаборЗаписей,
//                                       РегистрНакопленияНаборЗаписей,
//                                       РегистрБухгалтерииНаборЗаписей,
//                                       РегистрРасчетаНаборЗаписей - набор записей, который необходимо записать.
//   Замещать                          - Булево       - определяет режим замещения существующей записи в соответствии с
//       текущими установками отбора. Истина - перед записью существующие записи будут удалены. Ложь - записи будут
//       дописаны к уже существующим в информационной базе записям.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(Знач НаборЗаписей, Замещать = Истина, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено,
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	НаборЗаписей.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено 
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	НаборЗаписей.Записать(Замещать);
	
	// ОтметитьВыполнениеОбработки(НаборЗаписей);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ ПРИ СМЕНЕ ВЕРСИИ КОНФИГУРАЦИИ.
// Отмечает, что переданные данные обновлены.
//
// Параметры:
//  Данные					 - Ссылка, Массив, НаборДанных - данные, по которым нужно зарегистрировать изменения.
//							 - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//													- все измерения регистра должны входить в основной отбор;
//													- в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//														по которым ранее регистрировалась необходимость обработки;
//													- запись наборов в процессе обновления должна проходить с тем же отбором,
//														что и регистрация необходимости обработки;
//													- в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры	 - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//  Очередь					 - Число, Неопределено - очередь обработки, в которой выполняется текущий обработчик. По умолчанию очередь передавать
//													не нужно, т.к. она будет взята из параметров сеанса, в котором запущен обработчик обновления.
//
Процедура ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт

	Возврат;
	
КонецПроцедуры

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоВыполнитьОбновление(Метаданные.Версия, ВерсияИБ(Метаданные.Имя));
	
КонецФункции

// Проверить права текущего пользователя на выполнение обновления информационной базы.
//
Функция ЕстьПраваНаОбновлениеИнформационнойБазы() 
	
	Возврат ПравоДоступа("МонопольныйРежим", Метаданные) И ПравоДоступа("Администрирование", Метаданные);
	
КонецФункции	

// Возвращает порцию ссылок, по которым нужно произвести обработку.
//  Данные берутся из зарегистрированных в очереди, учитываются заблокированные более приоритетными очередями данные.
//	Ссылки на документы возвращаются упорядоченными по убыванию по дате.
//
// Параметры:
//  Очередь				 - Число - очередь, к которой отнесен обработчик и в которой зарегистрированы данные, которые он будет
//									обрабатывать.
//  ПолноеИмяОбъекта	 - Строка	 - имя объекта, который нужно обработать. Например, Документ.ПриходныйОрдерНаТовары.
//  ДополнительныеПараметры	 - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса - выборка ссылок, которые нужно обработать, поля выборки:
//     * Ссылка - ЛюбаяСсылка.
//   ТаблицаЗначений - данные, которые нужно обработать, имена колонок соответствуют именам измерений регистра.
//
Функция ВыбратьСсылкиДляОбработки(Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	
	//+БИТ Заглушка до стандартных библиотек БСП
	Запрос = Новый Запрос("ВЫБРАТЬ NULL КАК Так ГДЕ ЛОЖЬ");
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Дополнительные параметры выборки данных для обработки.
// 
// Возвращаемое значение:
//  Структура:
//   * ВыбиратьПорциями - Булево - выбирать данные для обработки порциями.
//                        Если выбираются документы, то порция определяется с учетом упорядочивания по убыванию
//                        по дате документа. Если выбираются регистраторы регистра, то порция определяется с
//                        учетом упорядочивания по убыванию по дате регистратора, если передано полное имя документа.
//                        Если полное имя документа не передано - упорядочивание происходит по периоду регистра:
//                        а) берется максимальная дата по каждому регистратору;
//                        б) если по регистратору нет записей, он в топе.
//   * ИмяВременнойТаблицы - Строка - параметр актуален для методов, создающих временные таблицы. Если имя не задано
//                           (поведение по умолчанию), то временная таблица будет создана с именем, указанным
//                           в описании каждого метода.
//   * ДополнительныеИсточникиДанных - Соответствие из КлючИЗначение - параметр актуален для методов, выбирающих
//                                     регистраторы и ссылки для обработки. В ключах соответствия может быть только один
//                                     из следующих видов данных:
//                                     1. Пути к реквизитам шапки документа или реквизитам табличных частей, которые
//                                        участвуют в соединениях с другими таблицами (в т.ч. неявных соединениях при
//                                        обращении "через точку").
//                                     2. Имена ссылочных объектов метаданных (Строка), в значениях которых находится
//                                        соответствие, в котором ключ - это имя регистра (Строка), а в значении
//                                        соответствие в ключах которого то же, что и в п. 1, т.е.
//                                        иерархия соответствий "Объект" -> "Регистр" -> "Источники".
//                                     Процедуры проверяют блокировку данных этих таблиц обработчиками меньших
//                                     очередей. Формат имен источников: <ИмяРеквизита> или
//                                     <ИмяТабличной>.<ИмяРеквизитаТабличнойЧасти>. Для удобства заполнения
//                                     см. УстановитьИсточникДанных() и см. ПолучитьИсточникДанных().
//   * ПоляУпорядочивания  - Массив - имена полей независимого регистра сведений, используется для упорядочивания
//                                    результата запроса.
//   * МаксимумВыборки - Число - максимальное количество выбираемых записей.
//   * ИмяИзмеренияДляОтбора - Строка - имя измерения независимого регистра сведений, которому подчинены записи набора,
//                                      (аналог регистратора для регистров, подчиненных регистраторам).
//
Функция ДополнительныеПараметрыВыборкиДанныхДляОбработки() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьПорциями", Истина);
	ДополнительныеПараметры.Вставить("ИмяВременнойТаблицы", "");
	ДополнительныеПараметры.Вставить("ДополнительныеИсточникиДанных", Новый Соответствие);
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания", Новый Массив);
	ДополнительныеПараметры.Вставить("МаксимумВыборки", МаксимальноеКоличествоЗаписейВВыборке());
	ДополнительныеПараметры.Вставить("ИмяИзмеренияДляОтбора", "Регистратор");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Максимальное количество записей в выборке данных для обновления.
//
// Возвращаемое значение:
//  Число - константа 10000.
//
Функция МаксимальноеКоличествоЗаписейВВыборке() Экспорт
	
	Возврат 10000;
	
КонецФункции

// Создает временную таблицу ссылок, которые не обработаны в текущей очереди
//  и не заблокированы меньшими очередями.
//  Имя таблицы: ВТДляОбработки<ИмяОбъекта>, например ВТДляОбработкиНоменклатура.
//  Колонки таблицы:
//   Ссылка - ЛюбаяСсылка.
//
// Параметры:
//  Очередь           - Число  - очередь обработки, в которой выполняется текущий обработчик.
//  ПолноеИмяОбъекта  - Строка - полное имя объекта, для которого выполняется проверка, например Справочник.Номенклатура.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//  ДополнительныеПараметры - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки.
// 
// Возвращаемое значение:
//  Структура - результат формирования временной таблицы:
//   * ЕстьЗаписиВоВременнойТаблице - Булево - в создаваемой таблице есть хотя бы одна запись. Записей может не быть по
//                                            двум причинам:
//                                             все обработано или все, что нужно обработать, еще заблокировано
//                                             обработчиками с меньшей очередью.
//   * ЕстьДанныеДляОбработки - Булево - в очереди есть ссылки для обработки, т.е. еще не все обработано.
//   * ИмяВременнойТаблицы - Строка - имя созданной временной таблицы.
//
Функция СоздатьВременнуюТаблицуСсылокДляОбработки(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ЕстьДанныеДляОбработки,ИмяВременнойТаблицы", Ложь, Ложь,"");
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав.
//
Функция ПроверитьНевозможностьОбновленияИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции	

// Возвращает Истина, если выполняется обновление ИБ
Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции

// Возвращает Истина, если вызов функции выполняется из обработчика обновления.
// Для любого вида обработчика обновления - монопольного, оперативного и отложенного.
//
// Параметры:
//  РежимВыполненияОбработчика - Строка - Отложенно, Оперативно, Монопольно или комбинация данных
//                               вариантов через запятую. Если указано, то проверяется только
//                               вызов из обработчиков обновления с данным режимом выполнения.
//
// Возвращаемое значение:
//  Булево - Истина, если вызов функции выполняется из обработчика обновления.
//
Функция ЭтоВызовИзОбработчикаОбновления(РежимВыполненияОбработчика = "") Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Выполнить неинтерактивное обновление данных ИБ.
//
// Результат:
//      Неопределено - обновление не выполнялось (не требуется)
//      Строка       - адрес временного хранилища со списком выполненных обработчиков обновления.
//
Функция ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	ВерсияМетаданных = Метаданные.Версия;
	ВерсияДанных = ВерсияИБ(Метаданные.Имя);
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	 
	Если НЕ НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Изменился номер версии конфигурации: с ""%1"" на ""%2"". Будет выполнено обновление информационной базы.'"),
		ВерсияДанных, ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		Сообщение = НСтр("ru = 'Недостаточно прав для выполнения обновления. Обратитесь к системному администратору.'");
		ЗаписатьОшибку(Сообщение);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	РежимОтладки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеВерсииИБ", "РежимОтладки", Ложь);
	
	// Установка монопольного режима для обновления информационной базы.
	Если НЕ РежимОтладки Тогда
		Попытка
			УстановитьМонопольныйРежим(Истина);
		Исключение
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно выполнить обновление информационной базы, так как к ней подключены другие сеансы.
					 |Обратитесь к системному администратору.
					 |
					 |Подробности ошибки:
					 |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибку(Сообщение);
			
			ВызватьИсключение Сообщение;
		КонецПопытки;
	КонецЕсли;	
	
	Попытка
		СписокОбработчиковОбновления = ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления();
		
		// Также всегда вызываются процедуры обновления данных библиотеки стандартных подсистем.
		//
		Обработчик = СписокОбработчиковОбновления.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Приоритет = 1;
		Обработчик.Процедура = "СтандартныеПодсистемыСервер.ВыполнитьОбновлениеИнформационнойБазы";
		
		ВыполненныеОбработчики = ВыполнитьИтерациюОбновления(Метаданные.Имя, Метаданные.Версия,
			СписокОбработчиковОбновления);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление информационной базы на версию ""%1"" завершилось с ошибками: 
				|%2'"), ВерсияМетаданных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьОшибку(Сообщение);
		// Отключение монопольного режима.
		Если НЕ РежимОтладки Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;	
		ВызватьИсключение;
	КонецПопытки;
	
	// Отключение монопольного режима.
	Если НЕ РежимОтладки Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;	
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновление информационной базы на версию ""%1"" выполнено успешно.'"), ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	ВыводитьОписаниеОбновлений = ВерсияДанных <> "0.0.0.0";
	ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновления(ВерсияДанных, ВерсияМетаданных, 
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений);
	
	Адрес = "";
	Если ВыводитьОписаниеОбновлений Тогда
		Результат = Новый Структура("Обработчики,ВерсияОт,ВерсияПо", 
			ВыполненныеОбработчики, ВерсияДанных, ВерсияМетаданных);
		Адрес = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для библиотеки ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//  ВерсияМетаданныхИБ       – Строка – версия метаданных, до которой необходимо
//                                      выполнить обновление.
//  ОбработчикиОбновления    – Соответствие – список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   – выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления) Экспорт
	
	ТекущаяВерсияИБ = ВерсияИБ(ИдентификаторБиблиотеки);
	Если ПустаяСтрока(ТекущаяВерсияИБ) Тогда
		 ТекущаяВерсияИБ = "0.0.0.0";
	КонецЕсли;
	НоваяВерсияИБ = ТекущаяВерсияИБ;
	ВерсияМетаданных = ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	
	ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполняются обязательные процедуры обновления информационной базы.'");
		Иначе
			НоваяВерсияИБ = Версия.Версия;
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			                 ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
		КонецЕсли;
		
		ЗаписатьИнформацию(Сообщение);
		
		Для Каждого Обработчик Из Версия.Строки Цикл
			ОбщегоНазначения.ВыполнитьБезопасно(Обработчик.Процедура);
		КонецЦикла;
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполнены обязательные процедуры обновления информационной базы.'");
		Иначе
			// Установка номера версии информационной базы
			УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ);
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			  ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
			ТекущаяВерсияИБ = НоваяВерсияИБ;
			
		КонецЕсли;
		ЗаписатьИнформацию(Сообщение);
		
	КонецЦикла;
	
	// Установка номера версии информационной базы
	Если ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ);
	КонецЕсли;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

// Возвращает пустую таблицу обработчиков обновления и первоначального заполнения ИБ.
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица с колонками:
//                       Версия       - номер версии конфигурации, при переходе на которую должна
//                                      быть выполнена процедура-обработчик обновления
//                       Процедура    - полное имя процедуры-обработчика обновления. 
//                                      Должна быть обязательно экспортной. 
//                       Опциональный - если Истина, то обработчик не должен срабатывать
//                                      при первом запуске на "пустой" базе.
//                       Приоритет    - Число. Для внутреннего использования.
//
Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	Возврат Обработчики;
	
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   – версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);.
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы");
	Запрос.Параметры.Вставить("ИмяПодсистемы", ИдентификаторБиблиотеки);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

// Возвращает Истина если запуск информационной базы
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ Версия ИЗ РегистрСведений.ВерсииПодсистем";
	
	Возврат Запрос.Выполнить().Пустой()
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) 
	
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
	
КонецФункции

Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии) 
	
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИдентификаторБиблиотеки);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.ИмяПодсистемы = ИдентификаторБиблиотеки;
	НоваяЗапись.Версия = НомерВерсии;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОбработчикиОбновленияВИнтервале(Знач ВсеОбработчики, Знач ВерсияОт, Знач ВерсияДо)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	Источник = Новый ОписаниеИсточникаДанных(ВсеОбработчики);
	Источник.Колонки.Версия.Измерение = Истина;
	ПостроительЗапроса.ИсточникДанных = Источник;
	ПостроительЗапроса.Измерения.Добавить("Версия");
	ПостроительЗапроса.Выполнить();
	ВыборкаИтоги = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыполняемыеОбработчики = Новый ДеревоЗначений();
	ВыполняемыеОбработчики.Колонки.Добавить("Версия");
	ВыполняемыеОбработчики.Колонки.Добавить("Процедура");
	ВыполняемыеОбработчики.Колонки.Добавить("Приоритет");
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Если ВыборкаИтоги.Версия <> "*" И 
			НЕ (СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияОт) > 0 
				И СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияДо) <= 0) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВерсии = Неопределено;
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Процедура = Null Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Опциональный = Истина И ВерсияОт = "0.0.0.0" Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаВерсии = Неопределено Тогда
				СтрокаВерсии = ВыполняемыеОбработчики.Строки.Добавить();
				СтрокаВерсии.Версия = ВыборкаИтоги.Версия;
				СтрокаВерсии.Приоритет = Выборка.Приоритет;
			КонецЕсли;
			Обработчик = СтрокаВерсии.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Обработчик, Выборка, "Версия,Процедура");
		КонецЦикла;
		
	КонецЦикла;
	
	// Упорядочить обработчики по возрастанию версий
	КоличествоСтрок = ВыполняемыеОбработчики.Строки.Количество();
	Для Инд1 = 2 По КоличествоСтрок Цикл
		Для Инд2 = 0 По КоличествоСтрок - Инд1 Цикл
			
			Версия1 = ВыполняемыеОбработчики.Строки[Инд2].Версия;
			Версия2 = ВыполняемыеОбработчики.Строки[Инд2+1].Версия;
			Если Версия1 = "*" И Версия2 = "*" Тогда
				Результат = ВыполняемыеОбработчики.Строки[Инд2].Приоритет - ВыполняемыеОбработчики.Строки[Инд2 + 1].Приоритет;
			ИначеЕсли Версия1 = "*" Тогда
				Результат = -1;
			ИначеЕсли Версия2 = "*" Тогда
				Результат = 1;
			Иначе
				Результат = СтроковыеФункцииКлиентСервер.СравнитьВерсии(Версия1, Версия2);
				Если Результат = 0 Тогда
					Результат = ВыполняемыеОбработчики.Строки[Инд2].Приоритет - ВыполняемыеОбработчики.Строки[Инд2 + 1].Приоритет;
				КонецЕсли;
			КонецЕсли;	
			
			Если Результат > 0  Тогда 
				ВыполняемыеОбработчики.Строки.Сдвинуть(Инд2, 1);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

// Устанавливает вспомогательные данные для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты      - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра      - Строка - имя параметра, который нужно установить (без приставки ИзмененияПараметра).
//  ЗначениеПараметра - фиксированные данные, которые устанавливаются в качестве значения параметра.
//  ТолькоПроверка    - .
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = Константы[ИмяКонстанты].Получить().Получить();
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		
		Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		МенеджерЗначения = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		МенеджерЗначения.ОбменДанными.Получатели.Автозаполнение = Ложь;
		МенеджерЗначения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		МенеджерЗначения.Значение = Новый ХранилищеЗначения(Параметры);
		МенеджерЗначения.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ ХОДА ОБНОВЛЕНИЯ

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

Процедура ЗаписатьИнформацию(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ОБНОВЛЕНИЙ

// Формирует табличный документ с описанием изменений в версиях,
// которые соответствуют переданному списку версий ОбработчикиОбновления.
//
Функция ДокументОписаниеОбновлений(Знач ОбработчикиОбновления) Экспорт
	
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент();
	Если ОбработчикиОбновления = Неопределено Тогда
		Возврат ДокументОписаниеОбновлений;
	КонецЕсли;
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		МакетОписаниеОбновлений = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
	Иначе	
		МакетОписаниеОбновлений = Новый ТабличныйДокумент();
	КонецЕсли;
	
	СписокВерсий = Новый Массив();
	ИдентификаторОбласти = "Версия";
	ДлинаИдентификатора = СтрДлина(ИдентификаторОбласти);
	Для Каждого Область Из МакетОписаниеОбновлений.Области Цикл
		
		Если Лев(Область.Имя, ДлинаИдентификатора) <> ИдентификаторОбласти Тогда
			Продолжить;
		КонецЕсли;
			
		НомерВерсии = Сред(Область.Имя, ДлинаИдентификатора + 1);
		НомерВерсии = СтрЗаменить(НомерВерсии, "_", ".");
		
		НадоВыводитьВерсию = СтроковыеФункцииКлиентСервер.СравнитьВерсии(НомерВерсии, ОбработчикиОбновления.ВерсияОт) > 0;
		Если НадоВыводитьВерсию Тогда
			СписокВерсий.Добавить(НомерВерсии);
		КонецЕсли;
			
	КонецЦикла;
	
	// Упорядочим по убыванию
	КоличествоВерсий = СписокВерсий.Количество();
	Для Инд1 = 2 По КоличествоВерсий Цикл
		Для Инд2 = 0 По КоличествоВерсий - Инд1 Цикл
			
			Меньше = СтроковыеФункцииКлиентСервер.СравнитьВерсии(СписокВерсий[Инд2], СписокВерсий[Инд2+1]) < 0;
			Если Меньше Тогда 
				СписокВерсий.Вставить(Инд2+1, СписокВерсий[Инд2]);
				СписокВерсий.Удалить(Инд2);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Выведем версии
	Для Каждого НомерВерсии Из СписокВерсий Цикл
		ВывестиОписаниеИзменений(НомерВерсии, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЦикла;
	
	Возврат ДокументОписаниеОбновлений;
	
КонецФункции

// Вывести описания изменений в указанной версии
//
// Параметры
//  НомерВерсии  – Строка - номер версии, для которого выводится описание из макета
//                          табличного документа МакетОписаниеОбновлений в табличный документ 
//                          ДокументОписаниеОбновлений.
//
Процедура ВывестиОписаниеИзменений(Знач НомерВерсии, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	Номер = СтрЗаменить(НомерВерсии, ".", "_");
	
	Если МакетОписаниеОбновлений.Области.Найти("Шапка" + Номер) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + Номер));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + Номер);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + Номер));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры
