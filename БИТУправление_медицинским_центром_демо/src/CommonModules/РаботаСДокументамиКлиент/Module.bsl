#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОДНОТИПНОГО ПОВЕДЕНИЯ ДОКУМЕНТОВ 

#Область ЗаполнениеДанных

// Процедура пересчитывает сумму строки по скидке
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект документа-владельца строки табличной части
//  ИмяТЧ		 - Строка			 - Имя табличной части строки
//  ТекСтрока	 - Структура		 - Строка табличной части документа
//
Процедура РассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока)
	
	Если Не ТекСтрока.Свойство("СуммаСкидки") Тогда 
		Возврат;
	КонецЕсли;
	
	мСумма = ТекСтрока.Цена * ТекСтрока.Количество;
	Скидка = 0;
	Попытка
		Скидка = мСумма * ТекСтрока.ПроцентСкидки/100;
		
	Исключение
	КонецПопытки;
	ТекСтрока.Сумма = мСумма - Скидка;
	
	Если Скидка <> 0 Тогда
		ПорядокОкругления = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПорядокОкругленияПослеСкидки");
		Если ЗначениеЗаполнено(ПорядокОкругления) Тогда
			ТекСтрока.Сумма	= Ценообразование.ОкруглитьЦену(ТекСтрока.Сумма, ПорядокОкругления, Ложь);
			ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма;
		КонецЕсли;
	Иначе
		ТекСтрока.СуммаСкидки = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму строки по скидке
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект	 - объект документа-владельца строки табличной части
//  ИмяТЧ		 - Строка			 - Имя табличной части строки
//  ТекСтрока	 - Структура		 - Строка табличной части документа
//
Процедура ПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(ЭтотОбъект,ИмяТЧ, ТекСтрока) Экспорт
	
	мСумма = ТекСтрока.Цена * ТекСтрока.Количество;
	ТекСтрока.Сумма			= мСумма - ТекСтрока.СуммаСкидки;
	ТекСтрока.ПроцентСкидки = ?(мСумма<>0,100*ТекСтрока.СуммаСкидки / мСумма,0);
	
КонецПроцедуры

// Процедура заполняет СуммуПриПокупке строки табличной части по Сумме.
//
// Параметры:
//  ТекСтрока	 - Структура - Строка табличной части документа.
//
Процедура ЗаполнитьСуммуПриПокупкеСтрокиТабЧасти(ТекСтрока) Экспорт
	
	Если ТекСтрока.СуммаПриПокупке = 0 Тогда
		ТекСтрока.СуммаПриПокупке = ТекСтрока.Сумма;
	КонецЕсли;
	
КонецПроцедуры

// Автоматически заполняет серию в строке по FEFO
//
// Параметры:
//  ЭтаФорма	 - ФормаКлиентскогоПриложения	 - форма.
//  ИмяТЧ		 - Строка						 - табличная часть
//  НомерСтроки	 - Число						 - номер строки.
//
Процедура ЗаполнитьПоFEFOКлиент(ЭтаФорма, ИмяТЧ, НомерСтроки = Неопределено) Экспорт 
	
	ТЧТоварыВторая = Неопределено;
	СкладВторой = Неопределено;
	Объект = ЭтаФорма.Объект;
	
	СтруктураИмен = РаботаСДокументамиСервер.ИмяРеквизитаСклад(Объект.Ссылка, ИмяТЧ);
	ИмяСклад = СтруктураИмен.ИмяСклад;
	ИмяДокумента = СтруктураИмен.ИмяДокумента;
	
	Склад = Объект[ИмяСклад];
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
    	СтрокаПредупреждения = НСтр("ru = 'В документе не указан склад.'");
		ПоказатьПредупреждение(, СтрокаПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТЧТовары = Объект[ИмяТЧ];
	Если ИмяДокумента = "ОказаниеУслуг" Тогда 
		Если ИмяТЧ = "Товары" Тогда  
			ТЧТоварыВторая = Объект["Материалы"];
			СкладВторой = Объект["СкладМатериалов"]; 
		Иначе
			ТЧТоварыВторая = Объект["Товары"]; 
			СкладВторой = Объект["Склад"]; 
		КонецЕсли;
	КонецЕсли;
	
	ДанныеFEFO = РаботаСДокументамиСервер.ЗаполнитьПоFEFO(Объект, ТЧТовары, ТЧТоварыВторая, ИмяТЧ, Объект.Дата, Склад, СкладВторой, Объект.Филиал, НомерСтроки);
	
	Если ТипЗнч(ДанныеFEFO) = Тип("Строка") Тогда 
		ПоказатьПредупреждение(, ДанныеFEFO);
		Возврат;
	КонецЕсли;
	
	Объект = ЭтаФорма.Объект;
	Объект[ИмяТЧ].Очистить();
	Для Каждого СтрокаДанныеFEFO Из ДанныеFEFO Цикл
		СтрокаТЧ = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДанныеFEFO); 
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;	
	
КонецПроцедуры
#КонецОбласти

#Область ОбработкаСобытийДокументов

// Возвращает ИСТИНА, если открытие формы можно продолжить.
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения - форма документа.
//  СтруктураПараметров	 - Структура	 - Стурктура параметров открытия документа, полученная до вызова.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ФормаДокументаПриОткрытии(ЭтаФорма, СтруктураПараметров = Неопределено) Экспорт
	
	ЭтоНовый = ЭтаФорма.Объект.Ссылка.Пустая();
	
	Если СтруктураПараметров <> Неопределено Тогда
		
		Если ЭтоНовый И СтруктураПараметров.Свойство("СтарыйДокументКоррекции") Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу уже есть коррекция: %1. 
										|Продолжить создание нового документа коррекции?'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтруктураПараметров.СтарыйДокументКоррекции));
			
			Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоНовый И СтруктураПараметров.Свойство("СтарыйДокументВозврата") Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу уже есть возврат: %1. 
										|Продолжить создание нового документа возврата?'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтруктураПараметров.СтарыйДокументВозврата));
			
			Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРеквизитовДокументов

// Обработка изменения реквизита документа на форме.
//
// Параметры:
//  ЭтотОбъект	 - ДокументОбъект			 - Документ, реквизит которого обрабатывается.
//  Имя			 - Строка					 - Имя реквизита документа с полным путем (например Тавары.Номенклатура).
//  ТекСтрока	 - СтрокаТабличнойЧасти		 - Ссылка на строку табличной части документа, реквизит которой обрабатывается.
//  		Имеет смысл только для табличных частей документов.
//  ЭтаФорма	 - ФормаКлиентскогоПриложения	 - Ссылка на форму документа. Если значение неопределено,
//  	производится программная обработка реквизитов.
//  ДопПараметры - Структура					 - Структура, содержащая дополнительные параметры обработки реквизита.
// 
// Возвращаемое значение:
//   Булево   – Результат выполнения обработки.
//
Функция дкОбработкаРеквизитаКлиент(ЭтотОбъект,Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено) Экспорт
	
	РезультатОбработки = Истина;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекСтрока.НомерСтроки < 1 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ"
	Если Имя = "Товары.Номенклатура" или Имя="Материалы.Номенклатура" Тогда
		
		ОбработкаРеквизитаНоменклатурыПоПолису(ЭтотОбъект, Имя, ТекСтрока);
		
		Рез = Истина;
		// Установим количество
		Попытка
			Если ТекСтрока.Количество=0 Тогда ТекСтрока.Количество=1 КонецЕсли;
		Исключение КонецПопытки;
		Если (РаботаСДокументамиСервер.ПолучитьВладельца(ТекСтрока.ЕдиницаИзмерения) <> ТекСтрока.Номенклатура)  тогда
			Если Имя="Товары.Номенклатура" 
				И ТипЗнч(ДопПараметры) = Тип("Структура")
				И ДопПараметры.Свойство("ИспользоватьЕдиницуТоваров")
				И ДопПараметры.ИспользоватьЕдиницуТоваров
			Тогда
				ТекСтрока.ЕдиницаИзмерения = Ценообразование.ПолучитьЕдиницуПродажиНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
			Иначе
				ТекСтрока.ЕдиницаИзмерения = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
			КонецЕсли;
			ТекСтрока.Коэффициент = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.ЕдиницаИзмерения, "Коэффициент");
			
			ТоварыЕдиницаИзмерения_ОбработкаШтрихкодаСтрокиДокумента(ЭтотОбъект, ТекСтрока);
		КонецЕсли;
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		СтруктураСтроки = СтрокуФормыВСтруктуру(ТекСтрока);
		
		Если ТекСтрока.Свойство("Цена") Или ТекСтрока.Свойство("Сумма") Тогда
			СтрЦенаСумма = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(СтруктураШапкиДокумента, ИмяТЧ, СтруктураСтроки);
			
			Если ТекСтрока.Свойство("Цена") Тогда
				ТекСтрока.Цена = СтрЦенаСумма.Цена;
			КонецЕсли;
			
			Если ТекСтрока.Свойство("Сумма") Тогда
				ТекСтрока.Сумма = СтрЦенаСумма.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("СуммаСкидки") Тогда
			РассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		КонецЕсли;
		
		Возврат Рез;
		
		// ОБРАБОТКА РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "УСЛУГИ"
	ИначеЕсли Имя="Услуги.Номенклатура" Тогда
		Рез=Истина;
		// Установим количество
		Попытка
			Если ТекСтрока.Количество=0 Тогда ТекСтрока.Количество=1 КонецЕсли;
		Исключение КонецПопытки;
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		СтруктураСтроки = СтрокуФормыВСтруктуру(ТекСтрока);
		СтрЦенаСумма = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(СтруктураШапкиДокумента, ИмяТЧ, СтруктураСтроки);
		ТекСтрока.Цена = СтрЦенаСумма.Цена;
		ТекСтрока.Сумма = СтрЦенаСумма.Сумма;
		
		Возврат Рез;
		
	ИначеЕсли Имя="Работы.Номенклатура" Тогда
		
		ОбработкаРеквизитаНоменклатурыПоПолису(ЭтотОбъект, Имя, ТекСтрока);
		
		Рез = Истина;
		ИмяТЧ = "Работы";
		
		СтруктураСтроки = СтрокуФормыВСтруктуру(ТекСтрока);
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
		Если ТекСтрока.Свойство("Сертификат")
			И ЗначениеЗаполнено(ТекСтрока.Сертификат)
			И Не СертификатыКлиентов.НоменклатураВходитВОграничениеСертификата(ТекСтрока.Номенклатура,ТекСтрока.Сертификат)
		Тогда
			ТекСтрока.Сертификат = Неопределено;
		КонецЕсли;
		
		Если Не ТекСтрока.Свойство("Сертификат")
			Или Не ЗначениеЗаполнено(ТекСтрока.Сертификат)
		Тогда
			СтрЦенаСумма = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(СтруктураШапкиДокумента, ИмяТЧ, СтруктураСтроки);
			ТекСтрока.Цена = СтрЦенаСумма.Цена;                                                           
			ТекСтрока.Сумма = СтрЦенаСумма.Сумма;
			РассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		КонецЕсли;
		
		Возврат Рез;
		
	ИначеЕсли Имя = "Товары.ХарактеристикаНоменклатуры"	Или
		Имя = "Работы.ХарактеристикаНоменклатуры"		Или
		Имя = "Материалы.ХарактеристикаНоменклатуры"
	Тогда
		
		Рез=Истина;
		Если ТекСтрока.Количество=0 Тогда ТекСтрока.Количество=1; КонецЕсли; 
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);

		Если ТекСтрока.Свойство("Цена") 
			И (Не ТекСтрока.Свойство("Сертификат") Или Не ЗначениеЗаполнено(ТекСтрока.Сертификат))
		Тогда
			СтруктураСтроки = СтрокуФормыВСтруктуру(ТекСтрока);
			СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
			СтрЦенаСумма = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(СтруктураШапкиДокумента, ИмяТЧ, СтруктураСтроки);
			ТекСтрока.Цена = СтрЦенаСумма.Цена;
			ТекСтрока.Сумма = СтрЦенаСумма.Сумма;
		КонецЕсли;

		Если ТекСтрока.Свойство("СуммаСкидки") Тогда 
			РассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		КонецЕсли;

	ИначеЕсли Имя="Товары.Количество"	Или
		Имя="Работы.Количество"			Или
		Имя="Услуги.Количество"			Или
		Имя="Материалы.Количество" 
	Тогда 
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		Попытка
			Если ТекСтрока.Свойство("Цена") Тогда
				ТекСтрока.Сумма=ТекСтрока.Цена*ТекСтрока.Количество;
			КонецЕсли; 
			РассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		Исключение
		КонецПопытки;
		
	ИначеЕсли Имя="Товары.ЕдиницаИзмерения" или  Имя="Материалы.ЕдиницаИзмерения" тогда
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		СтарыйКоэффициент = ?(ЗначениеЗаполнено(ТекСтрока.Коэффициент),ТекСтрока.Коэффициент,1);
		ТекСтрока.Коэффициент = ДопСерверныеФункции.ПолучитьРеквизит(ТекСтрока.ЕдиницаИзмерения, "Коэффициент");
		
		СтруктураСтроки = СтрокуФормыВСтруктуру(ТекСтрока);
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		СтрЦенаСумма = РаботаСДокументамиСервер.дкУстановитьЦенуСтрокиТабЧастиСервер(СтруктураШапкиДокумента, ИмяТЧ, СтруктураСтроки);
		ТекСтрока.Цена = СтрЦенаСумма.Цена;
		ТекСтрока.Сумма = СтрЦенаСумма.Сумма;
		
		ТоварыЕдиницаИзмерения_ОбработкаШтрихкодаСтрокиДокумента(ЭтотОбъект, ТекСтрока);
		
	ИначеЕсли Имя="Товары.Цена" Или Имя="Материалы.Цена" Или Имя="Работы.Цена" Или Имя="Услуги.Цена" Тогда
		
		ИмяТЧ = Лев(Имя, Найти(Имя,".")-1);
		
		Попытка
			ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
			Если ТекСтрока.Свойство("СуммаСкидки") Тогда
				РассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
				Если ТекСтрока.Сумма + ТекСтрока.СуммаСкидки = 0 
					И ЭтотОбъект.РучноеРедактированиеСкидок
				Тогда
					ТекСтрока.ПроцентСкидки = 0;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки; 
		
	ИначеЕсли Имя="Товары.Сумма" Или Имя="Материалы.Сумма" Или Имя="Работы.Сумма" Или Имя="Услуги.Сумма" Тогда
		Попытка
			ТекКоличество = ТекСтрока.Количество;
		Исключение
			ТекКоличество = 0;
		КонецПопытки;
		Если ТекКоличество <> 0 Тогда
			Если ТекСтрока.Свойство("СуммаСкидки") Тогда
				Если ТекСтрока.Цена = 0
					И ДопПараметры.Свойство("ЕстьПравоИзмененияЦены") И Не ДопПараметры.ЕстьПравоИзмененияЦены
				Тогда
					// Цену менять нет права. Отмена изменения
					ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
				ИначеЕсли (Не ДопПараметры.Свойство("ЕстьПравоИзмененияЦены") Или ДопПараметры.ЕстьПравоИзмененияЦены)
					И (ТекСтрока.Цена = 0 Или Не ЭтотОбъект.РучноеРедактированиеСкидок)
				Тогда
					// Изменяю цену строки
					ТекСтрока.Цена = (ТекСтрока.Сумма + ТекСтрока.СуммаСкидки)/ТекКоличество; 
				Иначе
					// Изменяю сумму скидки и процент скидки строки
					ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекКоличество - ТекСтрока.Сумма;
					ПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
				КонецЕсли;
			Иначе
				ТекСтрока.Цена = ТекСтрока.Сумма / ТекКоличество; 
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли Имя = "Товары.ПроцентСкидки"  Или
		Имя = "Работы.ПроцентСкидки"		Или
		Имя = "Материалы.ПроцентСкидки"
	Тогда
		РассчитатьСуммуСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		
	ИначеЕсли Имя = "Товары.СуммаСкидки" Или
		Имя = "Работы.СуммаСкидки"		 Или
		Имя = "Материалы.СуммаСкидки"
	Тогда
		
		ТекСтрока.СуммаСкидки = Мин(ТекСтрока.СуммаСкидки,ТекСтрока.Цена * ТекСтрока.Количество);
		Если ТекСтрока.Цена <> 0 И ТекСтрока.Количество <> 0 Тогда
			ПересчитатьСкидкуПоСуммеСкидкиСтрокиТабЧасти(ЭтотОбъект, ИмяТЧ, ТекСтрока);
		КонецЕсли;
		
		// ОБРАБОТКА РЕКВИЗИТОВ ШАПКИ ДОКУМЕНТА
	ИначеЕсли Имя="ИнвентаризацияТоваров" Тогда
		
		ЕстьИнвентаризация = ЗначениеЗаполнено(ЭтотОбъект.Инвентаризация);
		Если ЕстьИнвентаризация Тогда
			ЭтотОбъект.Склад = ДопСерверныеФункции.ПолучитьРеквизит(ЭтотОбъект.Инвентаризация, "Склад");
		КонецЕсли;
		
		Если ЭтаФорма<>Неопределено Тогда 
			ЭтаФорма.Элементы.Склад.Доступность = Не ЕстьИнвентаризация;
		КонецЕсли;
		
	Иначе	
		// Обработка реквизита с заданым именем не предусмотрена
		Возврат Ложь;
	КонецЕсли; 
	
	// Если при обработке ошибок нет - все нормально
	Возврат РезультатОбработки;
КонецФункции 

Процедура ОбработкаРеквизитаНоменклатурыПоПолису(ЭтотОбъект, Имя, ТекСтрока)
	
	Если ЭтотОбъект.Свойство("Документ") Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.Документ) Тогда
			
			ОписаниеПолиса = МедицинскоеСтрахование.ОписаниеПолиса(ЭтотОбъект.Документ, ЭтотОбъект.Дата);
			Если ОписаниеПолиса.ПолисДействителен Тогда
				
				Номенклатура = ?(СтрНачинаетсяС(Имя, "Материалы."), ТекСтрока.Работа, ТекСтрока.Номенклатура);
				
				ТекСтрока.НеОплачиваетсяПолисом = МедицинскоеСтрахование.УслугаНеОплачиваетсяПолисом(ЭтотОбъект.Документ, Номенклатура);
				Если ТекСтрока.НеОплачиваетсяПолисом Тогда 
					ТекСтрока.СуммаНеПоПолису = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Преобразует строку табличной части на форме в структуру
//
// Параметры:
//  ТекСтрока	 - СтрокаТабличнойЧасти	 - Ссылка на строку табличной части документа, реквизит которой обрабатывается.
// 
// Возвращаемое значение:
//   Структура.
//
Функция СтрокуФормыВСтруктуру(ТекСтрока) Экспорт
	
	СтруктураСтроки = Новый Структура;
	
	СтруктураСтроки.Вставить("Номенклатура",ТекСтрока.Номенклатура);
	
	ПоляТабличнойЧасти = Новый Структура("ХарактеристикаНоменклатуры,
										 |Цена,	
										 |ЕдиницаИзмерения,
										 |Коэффициент,
										 |Сертификат,
										 |НеОплачиваетсяПолисом,
										 |Количество");	
										 
	Для Каждого кзПолеТЧ Из ПоляТабличнойЧасти Цикл
		Если ТекСтрока.Свойство(кзПолеТЧ.Ключ) Тогда
			СтруктураСтроки.Вставить(кзПолеТЧ.Ключ,ТекСтрока[кзПолеТЧ.Ключ]);
		КонецЕсли;
	КонецЦикла;										
	
	Возврат СтруктураСтроки;
	
КонецФункции	

// Формирует структуру шапки документа
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект	 - документ.
// 
// Возвращаемое значение:
//   Структура.
//
Функция СформироватьСтруктуруШапкиДокумента(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		СтруктураШапкиДокумента = ОбщегоНазначенияСервер.СформироватьСтруктуруШапкиДокумента(ДокументОбъект.Ссылка);
		ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, ДокументОбъект);
	Иначе
		СтруктураШапкиДокумента = ОбщегоНазначенияСервер.СформироватьСтруктуруШапкиДокумента(ДокументОбъект);
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

Процедура ТоварыЕдиницаИзмерения_ОбработкаШтрихкодаСтрокиДокумента(ЭтотОбъект, ТекСтрока)

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока, "Штрихкод")
		И ЗначениеЗаполнено(ТекСтрока.Штрихкод)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока, "КоличествоЗнаменатель")
	Тогда
		ДанныеШтрихкода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ТекСтрока.Штрихкод);
		Если ДанныеШтрихкода.Разобран 
			И ДанныеШтрихкода.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1")
			И ЗначениеЗаполнено(ТекСтрока.Номенклатура)
		Тогда
		
			ДробнаяЧасть = РаботаСДокументамиСервер.ПолучитьДробнуюЧастьМДЛП(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
			ТекСтрока.КоличествоЧислитель = ДробнаяЧасть.Числитель;
			ТекСтрока.КоличествоЗнаменатель = ДробнаяЧасть.Знаменатель;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Запасы

// Подготовить отбор для поиска поиска строки документа при считывании штрихкода и необходимости добавления новой.
//	Задается либо структура с полями Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Единица
//	либо данные поля по отдельности.
//
// Параметры:
//  ДанныеНоменклатуры			 - 											 - 
//  Номенклатура				 - СправочникСсылка.Номенклатура			 - Номенклатура
//  ХарактеристикаНоменклатуры	 - СправочникСсылка.ХарактеристикиНоменклатуры	 - Характеристика
//  СерияНоменклатуры			 - СправочникСсылка.СерияНоменклатуры			 - Серия
//  Единица						 - СправочникСсылка.ЕдиницыИзмерения			 - Единица. Если не заполнена, не участвует в поиске.
// 
// Возвращаемое значение:
//  Структура - отбор из переданных значений.
//
Функция ЧтениеШтрихкода_ОтборДляПоискаСтрокиДокумента(Знач ДанныеНоменклатуры = Неопределено, Номенклатура = Неопределено, ХарактеристикаНоменклатуры = Неопределено, СерияНоменклатуры = Неопределено, Единица = Неопределено) Экспорт
	
	Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения");
	
	Если ДанныеНоменклатуры = Неопределено Тогда
		Отбор.Номенклатура = Номенклатура;
		Отбор.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		Отбор.СерияНоменклатуры = СерияНоменклатуры;
		Отбор.ЕдиницаИзмерения = Единица;
	Иначе
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеНоменклатуры);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отбор.ЕдиницаИзмерения) Тогда
		Отбор.Удалить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

// Добавляет строку товара по в табличную часть по данным штрихкода.
//  ДанныеНоменклатуры уже содержит заполненную ЕдиницаИзмерения из дефолтной, если в самом штрихкоде ее не было.
//
// Параметры:
//  ТабличнаяЧасть			 - ДанныеФормыКоллекция	 - табличная часть товаров на форме.
//  ДанныеНоменклатуры		 - Структура			 - данные чтения штрихкода
//  РеквизитыНоменклатуры	 - Структура			 - см. РаботаСДокументамиСервер.ДанныеНоменклатурыДляОбработкиЧтенияШК.
// 
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции - добавленная строка.
//
Функция ЧтениеШтрихкода_ДобавитьСтрокуТовараПоДаннымШтрихкода(ТабличнаяЧасть, ДанныеНоменклатурыПоШтрихкоду, РеквизитыНоменклатуры) Экспорт
	
	СтрокаТовары = ТабличнаяЧасть.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеНоменклатурыПоШтрихкоду);
	
	// Коэффициент единицы измерения.
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Коэффициент") Тогда
		СтрокаТовары.Коэффициент = ?(СтрокаТовары.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения,
									РеквизитыНоменклатуры.ЕдиницаИзмеренияКоэффициент,
									ДопСерверныеФункции.ПолучитьРеквизит(СтрокаТовары.ЕдиницаИзмерения, "Коэффициент"));
	КонецЕсли;
	
	// Штрихкод маркировки
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Штрихкод") Тогда
		СтрокаТовары.Штрихкод = ДанныеНоменклатурыПоШтрихкоду.Штрихкод;
	КонецЕсли;
	
	Возврат СтрокаТовары;
	  
КонецФункции

// Добавляет строку товара по в табличную часть по данным штрихкода.
//  ДанныеНоменклатуры уже содержит заполненную ЕдиницаИзмерения из дефолтной, если в самом штрихкоде ее не было.
//
// Параметры:
//  ТабличнаяЧасть			 - ДанныеФормыКоллекция	 - табличная часть товаров на форме.
//  ДанныеНоменклатуры		 - Структура			 - данные чтения штрихкода. Дополняются в ходе выполнения!
//  РеквизитыНоменклатуры	 - Структура			 - см. РаботаСДокументамиСервер.ДанныеНоменклатурыДляОбработкиЧтенияШК.
// 
// Возвращаемое значение:
//  Массив Из ДанныеФормыЭлементКоллекции - найденные строки, подходящие под данные штрихкода.
//
Функция ЧтениеШтрихкода_НайтиСтрокиДокументаПоДаннымШтрихкода(ТабличнаяЧасть, ДанныеНоменклатурыПоШтрихкоду, РеквизитыНоменклатуры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеНоменклатурыПоШтрихкоду.ЕдиницаИзмерения) Тогда
		ДанныеНоменклатурыПоШтрихкоду.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
	КонецЕсли;
	
	СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(РаботаСДокументамиКлиент.ЧтениеШтрихкода_ОтборДляПоискаСтрокиДокумента(ДанныеНоменклатурыПоШтрихкоду));
	
	Возврат СтрокиТабличнойЧасти;
	  
КонецФункции

// Показывает предупреждение, что в документе ожидается чтение штрихкода только товарно-материальных ценностей.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура, Строка - номенклатура для текста предупреждения.
//
Процедура ЧтениеШтрихкода_ПредупреждениеОжидаетсяМатериал(Номенклатура) Экспорт
	
	ШаблонПредупреждения = НСтр("ru='Номенклатура %1 не является складской позицией.
									|Для данной операции можно использовать только складскую номенклатуру.'");
	ПоказатьПредупреждение(,СтрШаблон(ШаблонПредупреждения, Строка(Номенклатура)),30);
	  
КонецПроцедуры

#КонецОбласти

#Область ККМ_ДокументыОплаты_ДетализацияДоНоменклатурыДоплаты

// Обновляет на форме видимость и доступность поля способа расчета ККМ
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения				 - форма.
//  ВидОперации			 - ПеречислениеСсылка.ВидыОперацийРКО		 - операция.
//  СпособРасчетаЧекаККМ - ПеречислениСсылка.СпособыРасчетаЧекаККМ	 - способ расчета чека.
//  НастройкаПечатиЧеков - Структура								 - настройки работы с чеками.
//
Процедура ОбновитьВидимостьДоступностьСпособаРасчетаККМ(Форма, ВидОперации, СпособРасчетаЧекаККМ, НастройкаПечатиЧеков) Экспорт

	Если	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") 		// РКО
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПеремещениеВКассу")		// РКО
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") 	// ПКО 
	Тогда
		Форма.Элементы.СпособРасчетаЧекаККМ.Видимость = Ложь;
	Иначе
		Если ЗначениеЗаполнено(НастройкаПечатиЧеков) И Не НастройкаПечатиЧеков.ПустаяСсылка Тогда
			Если НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи Тогда
				Форма.Элементы.СпособРасчетаЧекаККМ.Видимость = Истина;
			Иначе
				Если Не ЗначениеЗаполнено(СпособРасчетаЧекаККМ)
					И Не НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи
				Тогда
					Форма.Элементы.СпособРасчетаЧекаККМ.Видимость = Ложь; // Когда настройки совсем не заполнены - интерфейс не изменяется	
				Иначе
					Форма.Элементы.СпособРасчетаЧекаККМ.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			 Форма.Элементы.СпособРасчетаЧекаККМ.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.СпособРасчетаЧекаККМ.Видимость Тогда
		
		Аванс		 = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Аванс");
		Предоплата	 = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Предоплата");
		Кредит		 = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Кредит");
		
		ПолеФормыСписокВыбора = Форма.Элементы.СпособРасчетаЧекаККМ.СписокВыбора;
		
		// Сохранение эталонного списка выбора
		Если Не Форма.ДополнительныеСвойства.Свойство("ПредставленияСпособовРасчетаЧекаККМ") Тогда
			Форма.ДополнительныеСвойства.Вставить("ПредставленияСпособовРасчетаЧекаККМ", Новый СписокЗначений);
			Для Каждого ЗначениеВыбора Из ПолеФормыСписокВыбора Цикл
				Форма.ДополнительныеСвойства.ПредставленияСпособовРасчетаЧекаККМ.Добавить(ЗначениеВыбора.Значение, ЗначениеВыбора.Представление);
			КонецЦикла;
		КонецЕсли;
		ПредставленияСпособовРасчетаЧекаККМ = Форма.ДополнительныеСвойства.ПредставленияСпособовРасчетаЧекаККМ;
		
		ДобавитьУдалитьСпособРасчетаЧекаККМСпискуВыбора(ПолеФормыСписокВыбора, Аванс,		 НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи, ПредставленияСпособовРасчетаЧекаККМ);
		ДобавитьУдалитьСпособРасчетаЧекаККМСпискуВыбора(ПолеФормыСписокВыбора, Предоплата,	 НастройкаПечатиЧеков.ДоступныАвансовыеПлатежи, ПредставленияСпособовРасчетаЧекаККМ);
		ДобавитьУдалитьСпособРасчетаЧекаККМСпискуВыбора(ПолеФормыСписокВыбора, Кредит,		 НастройкаПечатиЧеков.ДоступныКредитныеПлатежи, ПредставленияСпособовРасчетаЧекаККМ);
		
		// Сортировка и представление вариантов выбора согласно установленным в денежном документе.
		ПолеФормыСписокВыбора.СортироватьПоПредставлению();
		
		Для Каждого ВариантВыбора Из ПолеФормыСписокВыбора Цикл
			ЭлементПредставление = ПредставленияСпособовРасчетаЧекаККМ.НайтиПоЗначению(ВариантВыбора.Значение);
			ВариантВыбора.Представление = ЭлементПредставление.Представление;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьУдалитьСпособРасчетаЧекаККМСпискуВыбора(СписокВыбора, СпособРасчета, Использовать, ПредставленияСпособовРасчетаЧекаККМ)
	
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(СпособРасчета);
	ПредставлениеЭлемент = ПредставленияСпособовРасчетаЧекаККМ.НайтиПоЗначению(СпособРасчета);
	
	Если Использовать И ПредставлениеЭлемент <> Неопределено Тогда
	
		Если ЭлементСписка = Неопределено Тогда
			ЭлементСписка = СписокВыбора.Добавить(СпособРасчета);
		КонецЕсли;
		ЭлементСписка.Представление = ПредставленияСпособовРасчетаЧекаККМ.Индекс(ПредставлениеЭлемент);
		
	ИначеЕсли ЭлементСписка <> Неопределено Тогда
		СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость кредитных данных ККМ в форме чека.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения				 - форма.
//  ВидОперации			 - ПеречислениеСсылка.ВидыОперацийРКО		 - операция.
//  КредитныеДанные		 - ДанныеФормаКоллекция						 - табличная часть на форме.
//  СпособРасчетаЧекаККМ - ПеречислениСсылка.СпособыРасчетаЧекаККМ	 - способ расчета чека.
//
Процедура ОбновитьВидимостьКредитныхДанныхККМ(Форма, ВидОперации, КредитныеДанные, СпособРасчетаЧекаККМ) Экспорт
	
	Если	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке")		// ПКО
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")          // РКО
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПеремещениеВКассу")            // РКО
	Тогда
		Форма.Элементы.ГруппаКредитныеДанные.Видимость = Ложь;
	Иначе
		
		Если СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Кредит") Тогда
			Форма.Элементы.ГруппаКредитныеДанные.Заголовок = "Данные доплаты для онлайн ККМ";
			Форма.Элементы.ГруппаКредитныеДанные.Видимость = Истина;
		ИначеЕсли СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Предоплата") Тогда
			Форма.Элементы.ГруппаКредитныеДанные.Заголовок = "Данные предоплаты для онлайн ККМ";
			Форма.Элементы.ГруппаКредитныеДанные.Видимость = Истина;
		Иначе
			Форма.Элементы.ГруппаКредитныеДанные.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает табличную часть кредитных данных, если способ расчета их не предополагает.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения				 - форма.
//  ВидОперации			 - ПеречислениеСсылка.ВидыОперацийРКО		 - операция.
//  КредитныеДанные		 - ДанныеФормаКоллекция						 - табличная часть на форме.
//  СпособРасчетаЧекаККМ - ПеречислениСсылка.СпособыРасчетаЧекаККМ	 - способ расчета чека.
//
Процедура СогласоватьЗначенияРеквизитовПоСпособуРасчета(Форма, ВидОперации, КредитныеДанные, СпособРасчетаЧекаККМ) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Если	ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") 		// РКО
			Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПеремещениеВКассу")		// РКО
			Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") 	// ПКО 
		Тогда
			СпособРасчетаЧекаККМ = Неопределено;
			КредитныеДанные.Очистить();
		Иначе
			Если СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Аванс") Тогда
				КредитныеДанные.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Открывает вопрос с предложением перезаполнить кредитные данные по сделке документа.
//
// Параметры:
//  ДокументОбъект	 - ДанныеФормыСтруктура	 - документ на форме.
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - форма.
//
Процедура ПредложитьПерезаполнитьКредитныеДанныеПоСделкеДокумента(ДокументОбъект, ЭтаФорма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Сделка")
		И ЗначениеЗаполнено(ДокументОбъект.Сделка) 
		И Не ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) 
		И (ДокументОбъект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Кредит")
		Или ДокументОбъект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Предоплата"))
	Тогда
		Ответ = Вопрос("Перезаполнить данные доплаты ККМ по комплексному расчету?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Оповестить("ДокументОплатыЗаполнитьРасчетыПоДолгуПоКомплексномуРасчету", ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет способ расчета ККМДокумента оплаты при его записи.
//
// Параметры:
//  ЭтотОбъект			 - ДокументОбъект	 - проверяемый документ.
//  НастройкаПечатиЧеков - Структура		 - настройки работы с чеками.
//  РежимЗаписи			 - РежимЗаписиДокумента	 - режим записи.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ПроверитьСпособРасчетаККМДокументаОплаты(Объект, НастройкаПечатиЧеков, РежимЗаписи = Неопределено) Экспорт
	
	Результат = Истина;
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
	Тогда
		СпособРасчетаДокумента = РаботаСДокументамиСервер.ОпределитьСпособРасчетаДокумента(Объект);
		СпособРасчетаОснования = РаботаСДокументамиСервер.ОпределитьСпособРасчетаДокумента(Объект.ДокументОснование);
		
		Если СпособРасчетаДокумента <> СпособРасчетаОснования 
			И (РежимЗаписи = Неопределено Или РежимЗаписи = РежимЗаписиДокумента.Проведение)
		Тогда
			ТекстПредупреждения = "Различаются способы расчета по доплате (ККМ) в текущем документе (" + Строка(СпособРасчетаДокумента) + ") и в документе-основании (" + СпособРасчетаОснования + ").";
			Если РаботаСДокументамиКлиентСервер.КоличествоРазрешенныхСпособовРасчета(НастройкаПечатиЧеков) < 2 Тогда
				Если РежимЗаписи = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
				КонецЕсли;
			Иначе
				ТекстВопроса = ТекстПредупреждения + Символы.ПС + "Все равно продолжить операцию?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область КонтрольФискализацииРазнымиСНО // Процедуры организации непробития чека доплаты по двум СНО (ЕНВД и не ЕНВД)

// Проверяет, что в чеке нет номенклатуры нескольких СНО
//
// Параметры:
//  Объект				 - ДокументОбъект	 - проверяемый документ.
//  НастройкаПечатиЧеков - Структура		 - настройки работы с чеками.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ПроверкаНоменклатурыКредитаНаНесколькоСНО(Объект, НастройкаПечатиЧеков) Экспорт
	
	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
	
		РассчитатьЗаполнитьПризнакиЕНВДКредитнойЧасти(Объект, НастройкаПечатиЧеков);
				
		// Определим, что имеются номенклатуры по разным системам налогообложения.
		Признаки = ПолучитьСтруктуруНоменклатурыПоЕНВДПатенту(Объект);
		
		Если Признаки.ЕНВД > 0 И Признаки.ОСН > 0
			Или Признаки.Патент > 0 И Признаки.ОСН > 0 
			Или Признаки.Патент > 0 И Признаки.ЕНВД > 0 Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить структуру описания ОСН номенклатуры в документе, т.е. какие ОСН использованы в кредитных данных.
//
// Параметры:
//  Объект	 - ДокументОбъект 	 - документ чека.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьСтруктуруНоменклатурыПоЕНВДПатенту(Объект) Экспорт
	Признаки = Новый Структура("ОСН, ЕНВД, Патент",0,0,0);
	Для Каждого СтрокаКредит Из Объект.КредитныеДанные Цикл
		Если СтрокаКредит.ЕНВД Тогда
			Признаки.ЕНВД = Признаки.ЕНВД + 1;
		ИначеЕсли СтрокаКредит.Патент Тогда
			Признаки.Патент = Признаки.Патент + 1;
		Иначе
			Признаки.ОСН = Признаки.ОСН + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Признаки;
КонецФункции

// Задает вопрос о номенклатуре доплаты по разным СНО в чеке.
// 
// Возвращаемое значение:
//   КодВозвратаДиалога.
//
Функция ЗадатьВопросНоменклатураДоплатыПоРазнымСНОЧек() Экспорт
	
	Возврат ЗадатьВопросНоменклатураДоплатыПоРазнымСНО();
	
КонецФункции

Функция ЗадатьВопросНоменклатураДоплатыПоРазнымСНОПриОткрытии(ЭтаФорма)
	
	ЗадатьВопросНоменклатураДоплатыПоРазнымСНО(,,ЭтаФорма);
	
КонецФункции

// Задает вопрос номенклатуре с разными СНО в чеке.
// 
// Возвращаемое значение:
//   КодВозвратаДиалога.
//
Функция ЗадатьВопросДляНоменклатурПоРазнымСНОПередЗаписью() Экспорт
	
	Возврат ЗадатьВопросНоменклатураДоплатыПоРазнымСНО(Истина, КодВозвратаДиалога.Отмена);
	
КонецФункции

Функция ЗадатьВопросНоменклатураДоплатыПоРазнымСНО(ДоступенВариантОтмены = Ложь, КнопкаПоУмолчанию = Неопределено, ЭтаФорма = Неопределено)
	
	Если КнопкаПоУмолчанию = Неопределено Тогда
		КнопкаПоУмолчанию = КодВозвратаДиалога.Пропустить
	КонецЕсли;
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(КодВозвратаДиалога.ОК,			"Разделить позиции доплаты по разным документам");
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Пропустить,	"Игнорировать");
	Если ДоступенВариантОтмены Тогда
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена,	"Отменить запись");
	КонецЕсли;

	ТекстВопроса = "Обратите внимание на колонки Нефиск./Патент: в данном документе указаны позиции доплаты, которые относятся к разным системам налогообложения. " + Символы.ПС + "Согласно ФЗ-54 расчеты по разным СНО должны фискализироваться разными кассовыми документами. Выберите действие:";
	
	Если ЭтаФорма <> Неопределено Тогда
		// Асинхронный вопрос
		Оповещение = Новый ОписаниеОповещения("ПлатежныйДокументПриОткрытииПроверкаНоменклатурыДоплатыНаНесколькоСНО_ПослеОтвета",РаботаСДокументамиКлиент,Новый Структура("ЭтаФорма", ЭтаФорма));
		ПоказатьВопрос(Оповещение, ТекстВопроса, ВариантыОтветов, 60, КнопкаПоУмолчанию,,КнопкаПоУмолчанию);
	Иначе
		Возврат Вопрос(ТекстВопроса, ВариантыОтветов, 60, КнопкаПоУмолчанию,,КнопкаПоУмолчанию);
	КонецЕсли;
	
КонецФункции

// Распределяет номенклатуру разных СНО на разные чеки.
//
// Параметры:
//  ЭтаФорма				 - ФормаКлиентскогоПриложения	 - форма.
//  НастройкаПечатиЧеков	 - Структура					 - настройки работы с чеками.
//  РезультатРаспределения	 - Массив						 - массив документов по итогу распределения.
//
Процедура РаспределитьНоменклатуруПоРазнымСНО(ЭтаФорма, НастройкаПечатиЧеков, РезультатРаспределения) Экспорт
		
	Если Не ЗначениеЗаполнено(РезультатРаспределения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Автоматическое распределение не удалось, сделайте это вручную");
	Иначе
		ЭтаФорма.Прочитать();
		Для Каждого ЭлементРезультатРаспределения Из РезультатРаспределения Цикл
			ОткрытьЗначение(ЭлементРезультатРаспределения);
		КонецЦикла;
		РаботаСДокументамиКлиент.ПроверкаНоменклатурыКредитаНаНесколькоСНО(ЭтаФорма.Объект, НастройкаПечатиЧеков);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признаки ЕНВД в кредитной части документа чека.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - документ чека.
//  НастройкаПечатиЧеков - Структура		 - настройки работы с чеками.
//
Процедура РассчитатьЗаполнитьПризнакиЕНВДКредитнойЧасти(Объект, НастройкаПечатиЧеков) Экспорт
	
	ТаблицаПродажПрименение = РаботаСНДССервер.ЗаполнитьПризнакЕНВДПатентДляНоменклатуры(Объект, НастройкаПечатиЧеков);
	
	Если ТаблицаПродажПрименение <> Неопределено И ТаблицаПродажПрименение.Количество() > 0 Тогда
		Для Каждого ПрименяемаяСтрока Из ТаблицаПродажПрименение Цикл
			СтрокаТЧ = Объект.КредитныеДанные[ПрименяемаяСтрока.НомерСтроки - 1];
			СтрокаТЧ.ЕНВД = ПрименяемаяСтрока.ЕНВД;
			СтрокаТЧ.Патент = ПрименяемаяСтрока.Патент;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура - Платежный документ при открытии проверка номенклатуры доплаты на несколько СНО
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения	 - форма.
//
Процедура ПлатежныйДокументПриОткрытииПроверкаНоменклатурыДоплатыНаНесколькоСНО(ЭтаФорма) Экспорт
	
	ЭтаФорма.РаспределитьНоменклатуруПоРазнымСНО = Ложь;
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.Ссылка)
		И Не ПроверкаНоменклатурыКредитаНаНесколькоСНО(ЭтаФорма.Объект, ЭтаФорма.НастройкаПечатиЧеков)
	Тогда
		ЭтаФорма.Элементы.ОсновнаяПанель.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаКредитныеДанные;
		ЗадатьВопросНоменклатураДоплатыПоРазнымСНОПриОткрытии(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Обработка ответа на вопрос доплаты по нескольким СНО.
//
// Параметры:
//  Ответ					 - КодВозвратаДиалога	 - ответ.
//  ДополнительныеПараметры	 - Структура			 - параметры контекста вопроса.
//
Процедура ПлатежныйДокументПриОткрытииПроверкаНоменклатурыДоплатыНаНесколькоСНО_ПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
		НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
		
		РезультатРаспределения = РаботаСНДССервер.ПлатежныйДокументРаспределитьНоменклатуруПоРазнымСНО(ЭтаФорма.Объект);
	    РаспределитьНоменклатуруПоРазнымСНО(ЭтаФорма, НастройкаПечатиЧеков, РезультатРаспределения);
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события ПередЗаписью на форме платежного документа (ПКО, РКО, ОПК, ВПК).
Процедура ПлатежныйДокументПередЗаписьюНаФорме(ЭтаФорма, Отказ, Объект, ПараметрыЗаписи, НастройкаПечатиЧеков) Экспорт
	
	Если Не РаботаСДокументамиКлиент.ПроверитьСпособРасчетаККМДокументаОплаты(Объект, НастройкаПечатиЧеков, ПараметрыЗаписи.РежимЗаписи) Тогда
		Отказ = Истина;
	КонецЕсли;
		
	РаботаСДокументамиКлиент.ПлатежныйДокументПередЗаписьюПроверкаНоменклатурыДоплатыНаНесколькоСНО(Этаформа, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

// Обработчик события в форме перед записью, отразающей платежный документ - проверка номенклатуры доплаты на несколько СНО
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - форма.
//  Отказ			 - Булево						 - признак отказа записи.
//  ПараметрыЗаписи	 - Стурктура					 - параметры записи.
//
Процедура ПлатежныйДокументПередЗаписьюПроверкаНоменклатурыДоплатыНаНесколькоСНО(ЭтаФорма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение	Тогда
		Возврат
	КонецЕсли;
	
	Если Не РаботаСДокументамиКлиент.ПроверкаНоменклатурыКредитаНаНесколькоСНО(ЭтаФорма.Объект, ЭтаФорма.НастройкаПечатиЧеков) Тогда
		ЭтаФорма.Элементы.ОсновнаяПанель.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаКредитныеДанные;
		Ответ = ЗадатьВопросДляНоменклатурПоРазнымСНОПередЗаписью();
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Этаформа.РаспределитьНоменклатуруПоРазнымСНО = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события в форме после записи, отразающей платежный документ - проверка номенклатуры доплаты на несколько СНО
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - форма.
//
Процедура ПлатежныйДокументПослеЗаписиОбработкаНоменклатурыДоплатыНаНесколькоСНО(ЭтаФорма) Экспорт
	
	Если ЭтаФорма.РаспределитьНоменклатуруПоРазнымСНО Тогда
		РаботаСДокументамиКлиент.РассчитатьЗаполнитьПризнакиЕНВДКредитнойЧасти(ЭтаФорма.Объект, ЭтаФорма.НастройкаПечатиЧеков);
		РезультатРаспределения = РаботаСНДССервер.ПлатежныйДокументРаспределитьНоменклатуруПоРазнымСНО(ЭтаФорма.Объект);
		РаботаСДокументамиКлиент.РаспределитьНоменклатуруПоРазнымСНО(ЭтаФорма, ЭтаФорма.НастройкаПечатиЧеков, РезультатРаспределения);
		ЭтаФорма.РаспределитьНоменклатуруПоРазнымСНО = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Проверка корректности номенклатуры в чеке у платежнорго документа чека: проверка доплаты на несколько СНО.
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - форма.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ПлатежныйДокументЧекОбработкаНоменклатурыДоплатыНаНесколькоСНО(ЭтаФорма) Экспорт
	
	Результат = Истина;
	
	Если Не РаботаСДокументамиКлиент.ПроверкаНоменклатурыКредитаНаНесколькоСНО(ЭтаФорма.Объект, ЭтаФорма.НастройкаПечатиЧеков) Тогда
		
		ЭтаФорма.Элементы.ОсновнаяПанель.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаКредитныеДанные;
		
		Ответ = ЗадатьВопросНоменклатураДоплатыПоРазнымСНОЧек();
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			РезультатРаспределения = РаботаСНДССервер.ПлатежныйДокументРаспределитьНоменклатуруПоРазнымСНО(ЭтаФорма.Объект);
			РаботаСДокументамиКлиент.РаспределитьНоменклатуруПоРазнымСНО(ЭтаФорма, ЭтаФорма.НастройкаПечатиЧеков, РезультатРаспределения);
			Результат = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыПечатиЧеков

Процедура ПредложитьПечатьКопииЧекаПоДокументу(ДокументСсылка, УникальныйИдентификатор, ТекстСообщения = "") Экспорт
	
	ТекстСообщения = ?(ЗначениеЗаполнено(ТекстСообщения), ТекстСообщения + " ", ТекстСообщения);
	ТекстВопроса = НСтр("ru = 'Напечатать копию чека?'");
	Контекст = Новый Структура("ДокументСсылка, УникальныйИдентификатор", ДокументСсылка, УникальныйИдентификатор);
	ОповещениеПродолжения = Новый ОписаниеОповещения("ПечатьКопииЧекаПоДокументу", РаботаСДокументамиКлиент, Контекст);
	ПоказатьВопрос(ОповещениеПродолжения, ТекстСообщения + ТекстВопроса, РежимДиалогаВопрос.ДаНет);   
		
КонецПроцедуры

Процедура ПечатьКопииЧекаПоДокументу(РезультатВыбора, Контекст) Экспорт
	
	Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
		мДанныеXML = РаботаСДокументамиСервер.ПолучитьДанныеXMLИсторииПечатиПоДокументу(Контекст.ДокументСсылка);
		Если мДанныеXML.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Не удалось найти чеки в истории печати онлайн-чеков");
			Возврат;
		КонецЕсли;
		ПечатьКопииЧекаПоИсторииПечати(мДанныеXML, Контекст.ДокументСсылка, Контекст.УникальныйИдентификатор);		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПечатьКопииЧекаПоИсторииПечати(ДанныеXML, ДокументСсылка, УникальныйИдентификатор) Экспорт
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
		
		Если ТипЗнч(ДанныеXML) = Тип("Массив") Тогда
			мДанныхXML = ДанныеXML;	
		Иначе
			мДанныхXML = Новый Массив;
			мДанныхXML.Добавить(ДанныеXML);
		КонецЕсли;
				
		Контекст = Новый Структура("мДанныхXML, Документ, УИФормы, Счетчик", мДанныхXML, ДокументСсылка, УникальныйИдентификатор, 0);
		ОповещениеПродолжения = Новый ОписаниеОповещения("НапечататьКопиюФормированиеДанных", РаботаСДокументамиКлиент, Контекст);
		
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.ТипыПО = ПоддерживаемыеТипыВО;
		ОтборОборудования.РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
		Организация = ОбщегоНазначенияБИТКлиентСервер.ОрганизацияОбъекта(ДокументСсылка);
		ОтборОборудования.Организация = ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(Организация, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОповещениеПродолжения, ОтборОборудования,
		НСтр("ru='Выберите фискальное устройство'"),
		НСтр("ru='Фискальное устройство не подключено.'"),
		НСтр("ru='Фискальное устройство не выбрано.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура НапечататьКопиюФормированиеДанных(РезультатОперации, Контекст) Экспорт
	
	Если РезультатОперации.Результат Тогда
		
		ТекстОшибки = "";
		Если Не Контекст.Свойство("ИдентификаторУстройства") Тогда 
			Контекст.Вставить("ИдентификаторУстройства", РезультатОперации.ИдентификаторУстройства);
		КонецЕсли;
		ДанныеЧека = РаботаСДокументамиСервер.ПроверитьКассуИПолучитьНомерЧека(Контекст.ИдентификаторУстройства, 
																				Контекст.Документ, 
																				Контекст.мДанныхXML[Контекст.Счетчик], 
																				ТекстОшибки);
																						
		ПоказатьВопрос = Ложь;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Или Контекст.Свойство("ПринудительноПрограммно") Тогда
					
			ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека();
			ПараметрыОперации.ФискальныйПризнак = ДанныеЧека.ФискальныйПризнак;     
			ПараметрыОперации.Аппаратно = Ложь;
			ПараметрыОперации.НомерЧека = ДанныеЧека.НомерЧекаККМ; 
			Контекст.Вставить("ПараметрыОперации", ПараметрыОперации);
			
			Если Не Контекст.Свойство("ВопросБылЗадан") И Не Контекст.Свойство("ПринудительноПрограммно") Тогда				
				Контекст.Вставить("ВопросБылЗадан", Истина);
				ПоказатьВопрос = Истина;	
			КонецЕсли;
		Иначе
			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("НомерЧека", ДанныеЧека.НомерЧекаККМ);
		КонецЕсли;
		
		Контекст.Вставить("ПараметрыОперации", ПараметрыОперации);
		ОповещениеПродолжения = Новый ОписаниеОповещения("НапечататьКопиюВыполнениеПечатиКопии", ЭтотОбъект, Контекст);
		
		Если ПоказатьВопрос Тогда
			ТекстВопроса = "Оформление чека будет отличаться. Продолжить?";
			ПоказатьВопрос(ОповещениеПродолжения, ТекстОшибки + " " + ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
	КонецЕсли;

КонецПроцедуры


Процедура НапечататьКопиюВыполнениеПечатиКопии(РезультатОперации, Контекст) Экспорт
	
	Если РезультатОперации = КодВозвратаДиалога.Да Тогда
		Оповещения = Новый ОписаниеОповещения("НапечататьКопиюЗавершение", РаботаСДокументамиКлиент, Контекст);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(Оповещения, Контекст.УИФормы, Контекст.ИдентификаторУстройства, Контекст.ПараметрыОперации);	
	КонецЕсли;
	
КонецПроцедуры

Процедура НапечататьКопиюЗавершение(РезультатОперации, Контекст) Экспорт
	
	Если РезультатОперации.Результат Тогда
		КоличествоЭлементов = Контекст.мДанныхXML.Количество();
		Если Контекст.Счетчик + 1 < КоличествоЭлементов Тогда
			Контекст.Счетчик = Контекст.Счетчик + 1;
			ОповещениеПродолжения = Новый ОписаниеОповещения("НапечататьКопиюФормированиеДанных", РаботаСДокументамиКлиент, Контекст);  
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Новый Структура("Результат", Истина));
		Иначе
			Если КоличествоЭлементов = 1 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Копия чека успешно напечатана!'"));
			Иначе
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Копии чеков успешно напечатаны!'"));
			КонецЕсли;
		КонецЕсли;		
	Иначе
		// Если драйвер не поддерживает печать копии аппаратно, пытаемся напечатать программно 
		Если СтрНайти(РезультатОперации.ОписаниеОшибки, "<ОбъектДрайвера.НапечататьКопиюЧека>")
			//И СтрНайти(РезультатОперации.ОписаниеОшибки, "Метод объекта не обнаружен (НапечататьКопиюЧека)")
			И Не Контекст.Свойство("ПринудительноПрограммно")
		Тогда
			Контекст.Вставить("ПринудительноПрограммно", Истина);
			ОповещениеПродолжения = Новый ОписаниеОповещения("НапечататьКопиюФормированиеДанных", РаботаСДокументамиКлиент, Контекст);
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Новый Структура("Результат", Истина));
		Иначе
			ОбщегоНазначения.СообщитьПользователю(РезультатОперации.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пробивает чек денежного документа.
//
// Параметры:
//  ЭтаФорма		 - ФормаКлиентскогоПриложения	 - форма.
//
Процедура ЧекДенежногоДокумента(ЭтаФорма) Экспорт
	
	Объект = ЭтаФорма.Объект;
	УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ПредложитьПечатьКопииЧекаПоДокументу(Объект.Ссылка, ЭтаФорма.УникальныйИдентификатор, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если (Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма, Истина))
		Или (Не Объект.Проведен)
	Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Перед пробитием чека на фискальном регистраторе документ необходимо провести!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьСпособРасчетаККМДокументаОплаты(Объект, НастройкаПечатиЧеков) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПлатежныйДокументЧекОбработкаНоменклатурыДоплатыНаНесколькоСНО(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверки при совместной работе нескольких пользователей над документом
	Если Не КонтрольИзмененийДанныхВДругихСеансахКлиент(ЭтаФорма)Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
	Тогда
		ВыполнитьОперациюПКОРКО(ЭтаФорма);
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПоПлатежнойКарте")
	Тогда
		ВыполнитьОперациюОПКВПК(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОперациюПКОРКО(ЭтаФорма)
	
	Объект = ЭтаФорма.Объект;
	УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	ОписаниеОшибки	= "";
	
	СуммаОперации	= 0;
	НомерЧекаЭТ		= "";
	
	ВыполнитьОперацию = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
			ТипИнкассации = 1; //  Тип операции (0 - Выемка / 1 - Внесение)
			ВыполнитьОперацию = Истина;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПеремещениеВКассу")
		Тогда
			ТипИнкассации = 0; //  Тип операции (0 - Выемка / 1 - Внесение)
			ВыполнитьОперацию = Истина;
		Иначе
			
			ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
						
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачалоПечатиЧекаФР", РаботаСДокументамиКлиент, ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если ВыполнитьОперацию Тогда
			
			// Напечатаем чек инвентаризации
			ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
			СуммаОперации = Объект.СуммаДокумента; // Сумма внесения/выемки
			ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма, ДокументОснование, ПодключаемоеОборудование", ТипИнкассации, СуммаОперации, Объект.Ссылка, Неопределено);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
			ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
			ДополнительныеПараметры = Новый Структура("ЭтаФорма, ПараметрыОперации" , ЭтаФорма, ПараметрыОперации);
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачалоПечатиЧекаИнв", РаботаСДокументамиКлиент, ДополнительныеПараметры);			
		КонецЕсли;
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");
		
		ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОтборОборудования.ТипыПО = ПоддерживаемыеТипыВО;
		ОтборОборудования.РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
		Организация = ОбщегоНазначенияБИТКлиентСервер.ОрганизацияОбъекта(ЭтаФорма.Объект.Филиал);
		ОтборОборудования.Организация = ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(Организация, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		
		МенеджерОборудованияКлиент.ВыбратьУстройство(ОповещениеПриЗавершении, ОтборОборудования,
		НСтр("ru='Выберите фискальное устройство'"),
		НСтр("ru='Фискальное устройство не подключено.'"),
		НСтр("ru='Фискальное устройство не выбрано.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОперациюОПКВПК(ЭтаФорма) Экспорт
	
	Объект = ЭтаФорма.Объект;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	ОписаниеОшибки = "";
	
	СуммаОперации	= 0;
	НомерЧекаЭТ		= "";
	
	ОсуществленАсинхронныйВызовОплатыНАЭТ = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() И НЕ Объект.Коррекция Тогда
		Если Не ЗначениеЗаполнено(Объект.НомерЧекаЭТ) Тогда // Оплата по ЭТ еще не проведена.
			ДанныеОплаты = РаботаСДокументамиСервер.ПолучитьДанныеОплатыДляБезнала(Объект.Ссылка); // Определим данные оборудования и величину оплаты по безналу.
			Если НЕ ЗначениеЗаполнено(ДанныеОплаты.ОписаниеОшибки) Тогда
				СуммаОперации = ДанныеОплаты.СуммаОплаты;
				Если СуммаОперации > 0 Тогда 
					Если ДанныеОплаты.ИспользоватьЭТАвтономно Тогда   
						// Автономный эквайринговый терминал, не подключенный к программе  
						Если ДанныеОплаты.ЗапрашиватьПодтверждениеОплатыАвтономногоЭТ Тогда
							Ответ = Вопрос(НСтр("ru='Выбранный эквайринговй терминал используется в автономном режиме. Подтвердите прохождение оплаты?'"), РежимДиалогаВопрос.ДаНетОтмена);
						Иначе
							Ответ = КодВозвратаДиалога.Да;
						КонецЕсли;
						
						Если Ответ = КодВозвратаДиалога.Да Тогда
							// В качестве номера документа используем значение по-умолчанию
							УстановитьНомерЧекаДокументаВФорме(ЭтаФорма, "9999999999", "НомерЧекаЭТ");
						ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
							ТекстСообщения = НСтр("ru='Дальнейшее оформление продажи по безналичному расчету невозможно.'");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							Возврат;
						ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
							Возврат; // Отменили действие
						КонецЕсли;
						
					ИначеЕсли ДанныеОплаты.ЭтоОплатаСБП Тогда
						// Оплата в системе быстрых платежей
						Оповещение = Оповещение_ОперацияПоПлатежнойКартеЗавершение(ЭтаФорма);
						
						Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
							Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ПродажаКлиенту") Тогда
								ИнтеграцияСБПКлиент.ОткрытьФормуОперацииСБП(Оповещение, ЭтаФорма, Объект.Ссылка, ДанныеОплаты.ЭквайринговыйТерминал);
							ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОказанияУслуг.ВозвратКлиенту") Тогда
								ИнтеграцияСБПКлиент.ОткрытьФормуОперацииСБП(Оповещение, ЭтаФорма, Объект.Ссылка, ДанныеОплаты.ЭквайринговыйТерминал, Объект.ДокументОснование, Истина);
							КонецЕсли;							
						ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
							ИнтеграцияСБПКлиент.ОткрытьФормуОперацииСБП(Оповещение, ЭтаФорма, Объект.Ссылка, Объект.ЭквайринговыйТерминал);
						ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПоПлатежнойКарте") Тогда
							ИнтеграцияСБПКлиент.ОткрытьФормуОперацииСБП(Оповещение, ЭтаФорма, Объект.Ссылка, Объект.ЭквайринговыйТерминал, Объект.ДокументОснование, Истина);
						Иначе
							ВызватьИсключение ИнтеграцияСБПКлиент.ТекстОшибкиНедопустимаяОперацияСБПНачалоОплаты();
						КонецЕсли;
						
						ОсуществленАсинхронныйВызовОплатыНАЭТ = Истина;
						
					ИначеЕсли ЗначениеЗаполнено(ДанныеОплаты.ПодключенноеОборудование) Тогда
						// Эквайринговый терминал подключен к программе
						
						ДанныеОплаты.ИдентификаторУстройства = ОборудованиеЭТПоДаннымОплаты(ДанныеОплаты);
						Если Не ЗначениеЗаполнено(ДанныеОплаты.ИдентификаторУстройства) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Эквайринговый терминал не выбран");
							Возврат;
						КонецЕсли;
						
						Оповещение = Оповещение_ОперацияПоПлатежнойКартеЗавершение(ЭтаФорма);
						ПринятьОплатуНаЭТ(Оповещение, ЭтаФорма, ДанныеОплаты, ДанныеОплаты.ТипТранзакции, ДанныеОплаты.НомерКарты, ДанныеОплаты.СсылочныйНомер);
						
						ОсуществленАсинхронныйВызовОплатыНАЭТ = Истина;
						
					ИначеЕсли ДанныеОплаты.ТипЭТ = ПредопределенноеЗначение("Перечисление.ТипыСпособовОплат.Прочее") Тогда
						// Для прочего способа безналичной оплаты ничего делать не нужно
					Иначе 
						СообщениеОбошибке = СтрШаблон(НСтр("ru='У выбранного терминала ""%1"" не указано подключаемое оборудование для этого рабочего места!'"), ДанныеОплаты.ЭквайринговыйТерминал);
						ПоказатьПредупреждение(, СообщениеОбошибке);
						Возврат;
					КонецЕсли;	
				КонецЕсли;
			Иначе // При формировании данных для эквайрингового терминала произошли ошибки, сообщим об этом пользователю 
				ТекстСообщения = ДанныеОплаты.ОписаниеОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли; // Конец ветки проверки НомерЧекаЭТ на заполненность.
	КонецЕсли;
	
	Если Не ОсуществленАсинхронныйВызовОплатыНАЭТ Тогда
		ПечатьЧекаФРСПредВыбором(ЭтаФорма);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		Попытка
			ЭтаФорма.ОбновитьИндикациюЧекиПробиты();
		Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ОборудованиеЭТПоДаннымОплаты(ДанныеОплаты)
	
	Если ДанныеОплаты.ПодключенноеОборудование.Количество() = 1 Тогда
		Возврат ДанныеОплаты.ПодключенноеОборудование[0];
		
	ИначеЕсли ДанныеОплаты.ПодключенноеОборудование.Количество() > 1 Тогда
		
		СписокОборудования = Новый СписокЗначений;
		Для Каждого Оборудование Из ДанныеОплаты.ПодключенноеОборудование Цикл
			СписокОборудования.Добавить(Оборудование);
		КонецЦикла;
		
		ВыбранноеОборудование = СписокОборудования.ВыбратьЭлемент();
		Если ВыбранноеОборудование = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранноеОборудование.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПринятьОплатуНаЭТ(Оповещение, ЭтаФорма, ДанныеОплаты, ТипТранзакции, НомерКарты = Неопределено, СсылочныйНомер = Неопределено) Экспорт
	
	ИдентификаторУстройстваЭТ = ДанныеОплаты.ИдентификаторУстройства;
	ИдентификаторУстройстваПУ = Неопределено; // Не указываем на чем печатать, тогда БПО автоматически вызовет диалог выбора ФР.
	
	ЭтаФорма.Доступность = Ложь; // При необходимости можно заблокировать интерфейс пользователя.
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.СуммаОперации	= ДанныеОплаты.СуммаОплаты;
	ПараметрыОперации.ТипТранзакции	= ТипТранзакции;
	ПараметрыОперации.ДокументОснование = ДанныеОплаты.ДокументОснование;
	
	Если ТипТранзакции = "PayElectronicCertificate" Или ТипТранзакции = "ReturnElectronicCertificate" Тогда
		ПараметрыОперации.ИдентификаторКорзины = ДанныеОплаты.ИдентификаторКорзины; 
		ПараметрыОперации.СуммаЭлектронногоСертификата = ДанныеОплаты.СуммаЭлектронногоСертификата;
		ПараметрыОперации.СуммаСобственныхСредств = ДанныеОплаты.СуммаСобственныхСредств;
	КонецЕсли;
	
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, ЭтаФорма.УникальныйИдентификатор, 
		ИдентификаторУстройстваЭТ, ПараметрыОперации);
	
КонецПроцедуры

Функция Оповещение_ОперацияПоПлатежнойКартеЗавершение(ЭтаФорма)
	
	ДополнительныеПараметры = Новый Структура("ЭтаФорма", ЭтаФорма);
	Возврат Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", РаботаСДокументамиКлиент, ДополнительныеПараметры);
	
КонецФункции

// Завершение операции чека по платежной карте
//
// Параметры:
//  РезультатВыполнения		 - Булево	 - пробит ли чек.
//  ДополнительныеПараметры	 - Структура - параметры выполнения.
//
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	// Можно совместить с ОУ
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Операция отменена");
		Возврат;
	КонецЕсли;
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	
	Объект = ЭтаФорма.Объект;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	ЭтаФорма.Доступность = Истина;  // При необходимости разблокируем интерфейс пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция завершена.'");
		
		Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
			И РезультатВыполнения.Свойство("ПоказатьВопрос")
		Тогда
		   	Оповещение = РезультатВыполнения.ПоказатьВопрос.Оповещение;
			ТекстВопроса = РезультатВыполнения.ПоказатьВопрос.ТекстСообщения; 
			Режим = РезультатВыполнения.ПоказатьВопрос.Режим;
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим);
		КонецЕсли;
		
		// Изменим служебные реквизиты, зафиксировав номер карты и ссылочный номер
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СсылочныйНомер") Тогда // Для возможности использования процедуры в ОУ.
			Объект.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "НомерКарты") Тогда // Для возможности использования процедуры в ОУ.
			Объект.НомерКарты = РезультатВыполнения.НомерКарты;
		КонецЕсли;
		
		// Сохраним номер чека ЭТ
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Если ЗначениеЗаполнено(РезультатВыполнения.НомерЧекаЭТ) Тогда
			УстановитьНомерЧекаДокументаВФорме(ЭтаФорма, РезультатВыполнения.НомерЧекаЭТ, "НомерЧекаЭТ");
		Иначе
			// Сюда не должно попадать, т.к. драйвер эквайринга должен вернуть ключ транзакции (номер чека).
			ЭквайринговыйТерминал = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ЭквайринговыйТерминал") Тогда
				ЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Оплата") Тогда
				Отбор = Новый Структура("ВидОплаты", ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные"));
				мОплатыБезналом = Объект.Оплата.НайтиСтроки(Отбор);
				Если мОплатыБезналом.Количество() > 0 Тогда
					ПервыйЭТ = ОбщегоНазначенияСервер.ПолучитьРеквизитыСсылки(мОплатыБезналом[0].ЭквайринговыйТерминал);
					ЭквайринговыйТерминал = ?(ПервыйЭТ.Тип = ПредопределенноеЗначение("Перечисление.ТипыСпособовОплат.СертификатНСПК"),ПервыйЭТ.ЭквайрингНСПК, мОплатыБезналом[0].ЭквайринговыйТерминал);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЭквайринговыйТерминал)
				И НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭквайринговыйТерминал, "ИспользоватьЭТАвтономно")
				И НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭквайринговыйТерминал, "НеОповещатьОбОтсутствииНомераСлипЧека")
			Тогда
				ТекстСообщения = "Эквайринговый терминал удачно произвел операцию, но вернул пустой номер слип-чека, обратитесь к специалистам техподдержки банка.";
				// Добавление текста по возможной ошибке эквайера при оплате ЭС НСПК
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Оплата")	// Только для ОказаниеУслуг.
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ИдентификаторКорзиныНСПК")
					И ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК)
					И ОбщегоНазначенияСервер.ФункцияМенеджера("Документы.ОказаниеУслуг", "СуммаБезналичнойОплатыДокумента", Объект) = 0
				Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + "Это может быть ошибкой банка-эквайера, в т.ч. если нет доплаты картой к сертификату НСПК.";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			// В качестве номера документа используем значение по-умолчанию
			УстановитьНомерЧекаДокументаВФорме(ЭтаФорма, "9999999999", "НомерЧекаЭТ");
		КонецЕсли;
		ПечатьЧекаФРСПредВыбором(ЭтаФорма, ДополнительныеПараметры);
	Иначе 
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Выбор регистратора для печати чека.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения	 - форма.
//
Процедура ПечатьЧекаФРСПредВыбором(ЭтаФорма, ДополнительныеПараметрыОперации = Неопределено)
	// В ОУ идентичный
	ЭтаФорма.Доступность = Ложь;
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
	ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
	ПоддерживаемыеТипыВО.Добавить("ККТ");
	
	ДополнительныеПараметры = Новый Структура("ЭтаФорма", ЭтаФорма);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачалоПечатиЧекаФР", РаботаСДокументамиКлиент, ДополнительныеПараметры);
	
	ОтборОборудования = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
	ОтборОборудования.ТипыПО = ПоддерживаемыеТипыВО;
	ОтборОборудования.РабочееМесто = МенеджерОборудованияКлиент.РабочееМестоКлиента();
	Организация = ОбщегоНазначенияБИТКлиентСервер.ОрганизацияОбъекта(ЭтаФорма.Объект.Филиал);
	ОтборОборудования.Организация = ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(Организация, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	МенеджерОборудованияКлиент.ВыбратьУстройство(ОповещениеПриЗавершении, ОтборОборудования,
	НСтр("ru='Выберите фискальное устройство'"),
	НСтр("ru='Фискальное устройство не подключено.'"),
	НСтр("ru='Фискальное устройство не выбрано.'"));
	
КонецПроцедуры

Функция ПолучитьШаблонЧека(ЭтаФорма, ОборудованиеСсылка, ШиринаСтроки = 0)
	
	Объект = ЭтаФорма.Объект;
	НастройкаПечатиЧеков = МенеджерОборудованияВызовСервераПереопределяемый.ПолучитьНастройкуПечатиЧековФилиала(Объект.Филиал, Истина);
	
	Если ТипЗнч(ОборудованиеСсылка) = Тип("Структура") Тогда
		ОборудованиеСсылка = ОборудованиеСсылка.ИдентификаторУстройства;
	КонецЕсли;	
	
	// Общие параметры чека.
	Если НЕ Объект.Коррекция Тогда
		ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	Иначе
		ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	КонецЕсли;
	
	ПараметрыЧека = ПолучитьЗначенияЗаполненияДляПКОРКОППВ(НастройкаПечатиЧеков);
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		ПараметрыЧека.СтрокаОписаниеНоменклатуры = Строка(Объект.Основание);
	КонецЕсли;
	
	// Заполнение параметров в зависимости от типа документа
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтКлиента")
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочееПоступлениеДенежныхСредств")
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствОтКонтрагента")
		Тогда
			ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
		Иначе
			ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств");
		КонецЕсли;
		
		ОбщиеПараметры.Вставить("Заголовок", "Принято от: " + Объект.ПринятоОт);
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаОтКлиента") Тогда
			ПараметрыЧека.СтрокаОписаниеНоменклатуры = Строка(Объект.ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыСКлиентами") Тогда
			ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		Иначе
			ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств");
		КонецЕсли;
		
		ОбщиеПараметры.Вставить("Заголовок", "Выдать: " + Объект.Выдать);
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыСКлиентами") Тогда
			ПараметрыЧека.СтрокаОписаниеНоменклатуры = Строка(Объект.ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		
		ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
		
		ОбщиеПараметры.Вставить("Заголовок" ,"Клиент: " + Объект.ПринятоОт);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПоПлатежнойКарте") Тогда
		
		ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		
		ОбщиеПараметры.Вставить("Заголовок" ,"Клиент: " + Объект.Выдать);
		
	КонецЕсли;
	
	// Если Электронно = Истина, то чек будет предоставлен в элетронной форме, без печати.
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ПечататьБумажныйЧек") Тогда
		ОбщиеПараметры.Электронно = Не ЭтаФорма["ПечататьБумажныйЧек"];
	Иначе
		ОбщиеПараметры.Электронно = Ложь;
	КонецЕсли;
	
	ОбщиеПараметры.Отправляет1СSMS   = Ложь; // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Ложь; // Email отправляет средствами 1C.
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;
		
	ОбщиеПараметры.ПокупательEmail = ?(НЕ ЗначениеЗаполнено(Объект.АдресEmailЧек),Неопределено ,Объект.АдресEmailЧек);
	ОбщиеПараметры.ПокупательНомер = ?(НЕ ЗначениеЗаполнено(Объект.ТелефонЧек),Неопределено ,Объект.ТелефонЧек);	
	
	// Начало блока коррекции
	ОбщиеПараметры.Вставить("Организация"			  , ОбщегоНазначенияБИТКлиентСервер.ОрганизацияОбъекта(Объект.Филиал)); // Ссылка,Обязательно. Организация по которому пробивается чек.
	ОбщиеПараметры.Вставить("ДополнительныйРеквизит"  , Объект.ДополнительныйРеквизит); // Строка,Необязательно - Дополнительный реквизит Тег 1192.
	ОбщиеПараметры.Вставить("СформироватьЧекКоррекции", Объект.Коррекция); // Булево,Необязательно - сформировать чек коррекции, только для ФФД 1.1.
	
	Если Объект.Коррекция Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ОбщиеПараметры.КорректируемыйДокумент = Объект.ДокументОснование;
		КонецЕсли;
		ОбщиеПараметры.ДанныеКоррекции.ТипКоррекции		 = Объект.ТипКоррекции;
		ОбщиеПараметры.ДанныеКоррекции.ОписаниеКоррекции = Объект.ОписаниеКоррекции;
		ОбщиеПараметры.ДанныеКоррекции.ДатаКоррекции	 = Объект.ДатаКоррекции;
		ОбщиеПараметры.ДанныеКоррекции.НомерПредписания	 = Объект.НомерПредписания;
		ОбщиеПараметры.НеприменениеККТ					 = Объект.НеприменениеККТ;
	КонецЕсли;
	// Конец блока коррекции
	
	НомерСекции = 2;

	// Подготовка таблицы товаров.
	ТаблицаТоваров = Новый Массив();
	ПризнакСпособаРасчета = РаботаСДокументамиСервер.ПолучитьПризнакСпособаРасчетаДенежногоДокумента(Объект.ДокументОснование, СделкаДокумента(Объект), Объект.СуммаДокумента, Объект.КредитныеДанные.Итог("Сумма"), Объект.СпособРасчетаЧекаККМ);
	
	Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаЧекаККМ)
		ИЛИ Объект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Аванс")
	Тогда
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		
		СтрокаТаблицыТоваров.Добавить(ПараметрыЧека.СтрокаОписаниеНоменклатуры);//  1 - Наименование
		СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);            //  4 - Номер отдела
		СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  //  5 - Цена за позицию без скидки
		СтрокаТаблицыТоваров.Добавить(1);                      //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("");                     //  7 - Наименование скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                      //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                      //  9 - Процент скидки/наценки
		СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  // 10 - Сумма позиции со скидкой
		СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(СуммаНДСДляДенежногоДокумента(Объект.СуммаДокумента,
										ПараметрыЧека.НалоговаяСтавка)); // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(ПараметрыЧека.НалоговаяСтавка);// 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");                     // 17 - Наименование секции форматирования товарной строки
		СтрокаТаблицыТоваров.Добавить("");                     // 18 - пустая строка
		
		СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  // 19 - Цена со скидками.
		СтрокаТаблицыТоваров.Добавить(ПризнакСпособаРасчета);  // 20 - Признак способа расчета.
		СтрокаТаблицыТоваров.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата")); // 21 - Признак предмета расчета
		СтрокаТаблицыТоваров.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")); // 22 - Номенклатура (например, для чека услуг через Агентские договоры).
		
		ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
	ИначеЕсли ЗначениеЗаполнено(Объект.СпособРасчетаЧекаККМ)
		И (Объект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Кредит")
			Или Объект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Предоплата"))
	Тогда
		// Получение видов номенклатуры в документе.
		НоменклатураДокумента = Новый Массив;
		Для Каждого Позиция Из Объект.КредитныеДанные Цикл
			Если ЗначениеЗаполнено(Позиция.Номенклатура) Тогда
				НоменклатураДокумента.Добавить(Позиция.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		ВидыНоменклатурыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НоменклатураДокумента, "ВидНоменклатуры");
		
		// Заполнение структуры фискальной строки
		Для Каждого Позиция Из Объект.КредитныеДанные Цикл
			СтрокаТаблицыТоваров = Новый СписокЗначений();
			
			Если Позиция.Количество = 0 Тогда
				Позиция.Количество = 1;
			КонецЕсли;
			ЦенаЗаЕдиницуТовара = Окр(Позиция.Сумма/Позиция.Количество, 2, РежимОкругления.Окр15как20);
			
			СтрокаТаблицыТоваров.Добавить(Позиция.Наименование);	//  1 - Наименование
			СтрокаТаблицыТоваров.Добавить("");						//  2 - Штрихкод
			СтрокаТаблицыТоваров.Добавить("");						//  3 - Артикул
			СтрокаТаблицыТоваров.Добавить(НомерСекции);				//  4 - Номер отдела
			СтрокаТаблицыТоваров.Добавить(ЦенаЗаЕдиницуТовара);		//  5 - Цена за позицию без скидки
			СтрокаТаблицыТоваров.Добавить(Позиция.Количество);		//  6 - Количество
			СтрокаТаблицыТоваров.Добавить("");						//  7 - Наименование скидки/наценки
			СтрокаТаблицыТоваров.Добавить(0);						//  8 - Сумма скидки/наценки
			СтрокаТаблицыТоваров.Добавить(0);						//  9 - Процент скидки/наценки
			СтрокаТаблицыТоваров.Добавить(Позиция.Сумма);			// 10 - Сумма позиции со скидкой
			СтрокаТаблицыТоваров.Добавить(0);						// 11 - Номер налога (1)
			СтрокаТаблицыТоваров.Добавить(СуммаНДСДляДенежногоДокумента(Позиция.Сумма,
											РаботаСНДССервер.ПолучитьСтавкуНДС(Позиция.СтавкаНДС))); // 12 - Сумма налога (1)
			СтрокаТаблицыТоваров.Добавить(РаботаСНДССервер.ПолучитьСтавкуНДС(Позиция.СтавкаНДС));// 13 - Процент налога (1)
			СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
			СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
			СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
			СтрокаТаблицыТоваров.Добавить("");                     // 17 - Наименование секции форматирования товарной строки
			СтрокаТаблицыТоваров.Добавить("");                     // 18 - пустая строка
			
			СтрокаТаблицыТоваров.Добавить(ЦенаЗаЕдиницуТовара); // 19 - ФФД 1.0.5 Цена со скидкой
			
			// При предоплате признак способа расчета определяется для каждой строки отдельно (полная или частичная предоплата)
			Если Объект.СпособРасчетаЧекаККМ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЧекаККМ.Предоплата") Тогда
				ПризнакСпособаРасчета = РаботаСДокументамиСервер.ПолучитьПризнакСпособаРасчетаДенежногоДокумента(Неопределено, Неопределено, Позиция.Сумма, Позиция.СуммаПриПокупке, Объект.СпособРасчетаЧекаККМ)
			КонецЕсли;
			
			СтрокаТаблицыТоваров.Добавить(ПризнакСпособаРасчета); // 20 - ФФД 1.0.5
			
			// 21 - Признак предмета расчета. ФФД 1.1.
			ВидНоменклатурыСоотв = ВидыНоменклатурыДокумента.Получить(Позиция.Номенклатура);
			ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата");
			Если ВидНоменклатурыСоотв <> Неопределено Тогда
				Если ВидНоменклатурыСоотв.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга") Тогда
					СтрокаТаблицыТоваров.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга"));
				ИначеЕсли ВидНоменклатурыСоотв.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
					СтрокаТаблицыТоваров.Добавить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар"));
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыТоваров.Добавить(Позиция.Номенклатура); // 22 - Номенклатура (например, для чека услуг через Агентские договоры).
			
			ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);	
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаОплат = Новый Массив();
	
	СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
	Тогда
		СтрокаОплаты.ТипОплаты	= ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"); // Наличная оплата.
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПоПлатежнойКарте")
	Тогда
		СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно");
	КонецЕсли;
	СтрокаОплаты.Сумма = Объект.СуммаДокумента;
	ТаблицаОплат.Добавить(СтрокаОплаты);
	
	ОбщиеПараметры.ТаблицаОплат = ТаблицаОплат;
	ОбщиеПараметры.ПозицииЧека = ТаблицаТОваров;
	ОбщиеПараметры.Вставить("ДокументОснование", Объект.Ссылка);
	ОбщиеПараметры.Вставить("ПодключаемоеОборудование",	ОборудованиеСсылка);
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
	РаботаСДокументамиСервер.ЗаполнитьПерсональныеДанныеШаблонаЧека(ОбщиеПараметры, ЭтаФорма.ПерсональныеДанныеПокупателя, Объект, ПолучитьКлиентаПлатежногоДокумента(Объект));
	
	ДополнитьОбщиеПараметрыЧека(Объект, НастройкаПечатиЧеков, ОбщиеПараметры);
	
	ОбщиеПараметры.Вставить("ШиринаЧековойЛенты", ШиринаСтроки);  
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	// Параметры необходимые для печати чека на ККТ.
	МенеджерОборудованияВызовСервераПереопределяемый.ЗаполнитьОбщиеПараметрыЧека(ОборудованиеСсылка, ОбщиеПараметры, НастройкаПечатиЧеков, Объект.Филиал);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

Функция ПолучитьШаблонЧекаОказаниеУслуг(Объект, ЭтаФорма, ОборудованиеСсылка, СтрокаТЧЧеки, ШиринаСтроки = 0)
	
	ПараметрыЧека = Новый Структура;
	ПараметрыЧека.Вставить("НастройкаПечатиЧеков",			 ЭтаФорма["НастройкаПечатиЧеков"]);
	ПараметрыЧека.Вставить("ПерсональныеДанныеПокупателя",	 ЭтаФорма["ПерсональныеДанныеПокупателя"]);
	ПараметрыЧека.Вставить("ОперационныйРеквизит",			 ЭтаФорма["ОперационныйРеквизит"]);
	ПараметрыЧека.Вставить("ОтраслевойРеквизит",			 ЭтаФорма["ОтраслевойРеквизит"]);
	ПараметрыЧека.Вставить("Электронно", 					 Не ЭтаФорма["ПечататьБумажныйЧек"]);
	ПараметрыЧека.Вставить("ШиринаСтроки", 					 ШиринаСтроки);
	ПараметрыЧека.Вставить("ОборудованиеСсылка", 			 ОборудованиеСсылка);
	ПараметрыЧека.Вставить("УникальныйИдентификаторФормы", 	 ЭтаФорма.УникальныйИдентификатор);
	
	Возврат РаботаСДокументамиСервер.ПечатьЧекаОУ_ПолучитьШаблонЧекаОказаниеУслуг(Объект, Объект.Чеки.Индекс(СтрокаТЧЧеки), ПараметрыЧека);
	
КонецФункции

Функция СуммаНДСДляДенежногоДокумента(Сумма, СтавкаНДСЧислом)
	
	СтрокаПозиции = Новый Структура;
	СтрокаПозиции.Вставить("Сумма", Сумма);
	СтрокаПозиции.Вставить("СуммаНДС", 0);
	СтрокаПозиции.Вставить("СтавкаНДСЧислом", СтавкаНДСЧислом);

	
	РаботаСТорговымОборудованием.РассчитатьСуммаНДСПозицииЧека(СтрокаПозиции);
	
	Возврат СтрокаПозиции.СуммаНДС;
	
КонецФункции

// Значения заполнения для кассовый и карточных документов чека.
//
// Параметры:
//  НастройкаПечатиЧеков - СправочникСсылка.НастройкиПечатиЧеков	- настройка печати чеков филиала документа.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьЗначенияЗаполненияДляПКОРКОППВ(НастройкаПечатиЧеков) Экспорт
	
	ПараметрыЧека = Новый Структура("СтрокаОписаниеНоменклатуры, НалоговаяСтавка", РаботаСДокументамиКлиентСервер.НазваниеПозицииЧекаВносАванса(НастройкаПечатиЧеков), 0);
	
	Если РаботаСДокументамиКлиентСервер.НастройкаПечатиЧековЗаполнена(НастройкаПечатиЧеков) Тогда
		ПараметрыЧека.НалоговаяСтавка = РаботаСНДССервер.ПолучитьСтавкуНДС(НастройкаПечатиЧеков.СтавкаНДСДляОсновнойСистемыНалогообложения);
	КонецЕсли;
	
	Возврат ПараметрыЧека;
	
КонецФункции

// Возвращает сделку документа.
//
// Параметры:
//  Объект	 - ДокументСсылка, ДокументОбъект	 - документ.
// 
// Возвращаемое значение:
//   ДокументСсылка.КомплексныйРасчетКлиента.
//
Функция СделкаДокумента(Объект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Сделка") Тогда
		Возврат Объект["Сделка"];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРасшифровкуПлатежа(Объект)
	МассивСтрокРасшифровкиПлатежа = Новый Массив;
	
	СтруктураПлатежа = Новый Структура("ВидОплаты,ИсходныйНомерСтроки,НомерСтроки,Сертификат,Сумма,НомерСекции");
	СтруктураПлатежа.Сумма = Объект.СуммаДокумента;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
	Тогда
		СтруктураПлатежа.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Наличными");
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		СтруктураПлатежа.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные");
	КонецЕсли;
	
	МассивСтрокРасшифровкиПлатежа.Добавить(СтруктураПлатежа);
	
	Возврат МассивСтрокРасшифровкиПлатежа;
КонецФункции

Функция ПолучитьКлиентаПлатежногоДокумента(Объект)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ИмяРеквизитаКлиента = "Контрагент";
	Иначе
		ИмяРеквизитаКлиента = "Клиент";
	КонецЕсли;
	
	Если ТипЗнч(Объект[ИмяРеквизитаКлиента]) = Тип("СправочникСсылка.Контрагенты") Тогда
		КлиентДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект[ИмяРеквизитаКлиента], "НаименованиеПолное");
	Иначе
		КлиентДокумента = Объект[ИмяРеквизитаКлиента];
	КонецЕсли;

	Возврат КлиентДокумента;
КонецФункции

Процедура ДополнитьОбщиеПараметрыЧека(Объект, НастройкаПечатиЧеков, ОбщиеПараметры)
	Если Не НастройкаПечатиЧеков.ПустаяСсылка Тогда
		Признаки = ПолучитьСтруктуруНоменклатурыПоЕНВДПатенту(Объект);
		Если Признаки.ОСН = 0
			И (Признаки.ЕНВД > 0 Или Признаки.Патент > 0)
		Тогда
			КлиентДокумента = ПолучитьКлиентаПлатежногоДокумента(Объект);
			ОбщиеПараметры.Вставить("ЭтоОказаниеУслуг", Ложь);
			
			Если Признаки.ЕНВД = 0 Тогда
				ОбщиеПараметры.Вставить("СНО", ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ПатентнаяСистемаНалогообложения"));
			Иначе				
				ОбщиеПараметры.Вставить("СНО", ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход"));
			КонецЕсли;
			
			ОбщиеПараметры.Вставить("ОсновнаяСтавкаНДС", РаботаСНДССервер.ПолучитьОсновнуюСтавкуНДСПоСНО(ОбщиеПараметры.СНО, НастройкаПечатиЧеков));
			
			ОбщиеПараметры.Вставить("ИтогБонусов",				0									);
			ОбщиеПараметры.Вставить("РасшифровкаПлатежа",		ПолучитьРасшифровкуПлатежа(Объект)  );
			ОбщиеПараметры.Вставить("КлиентДокумента",			КлиентДокумента						);
			ОбщиеПараметры.Вставить("ДанныеФилиала",			РаботаСНДССервер.ПолучитьДанныеФилиала(Объект.Филиал));	
			ОбщиеПараметры.Вставить("УчетНДСНеИспользуется",	Ложь								);
			ОбщиеПараметры.Вставить("НомерДокумента",			Объект.Номер						);
			
		Иначе
			ОбщиеПараметры.Вставить("ЭтоОказаниеУслуг", Ложь);
			ОбщиеПараметры.Вставить("СНО", НастройкаПечатиЧеков.ОсновнаяСистемаНалогообложения);		
		КонецЕсли;
	Иначе
		ОбщиеПараметры.Вставить("ЭтоОказаниеУслуг", Ложь);
	КонецЕсли;
КонецПроцедуры

// Продолжение печати чека.
//
// Параметры:
//  РезультатВыполнения		 - Булево	 - результат прошлого этапа печати.
//  ДополнительныеПараметры	 - Структура - данные выполнения.
//
Процедура НачалоПечатиЧекаФР(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если Не РезультатВыполнения.Результат Тогда // Например, ни одной подключеннй кассы на рабочем месте.
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
			ДополнительныеПараметры.ЭтаФорма.Доступность = Истина;
		КонецЕсли;
		ОборудованиеСсылка = РезультатВыполнения.ИдентификаторУстройства;
	Иначе
		ОборудованиеСсылка = РезультатВыполнения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОборудованиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем ширину строки чека
	ПараметрыКассы = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ОборудованиеСсылка);
	
	ДополнительныеПараметры.Вставить("Оборудование", ОборудованиеСсылка);
	
	Оповещение = Новый ОписаниеОповещения("НачалоПечатиЧекаФР_ПослеПолученияШириныСтрокиПечатающегоУстройства", РаботаСДокументамиКлиент, ДополнительныеПараметры); 
	
	// Если не удалось получить данные оборудования значит оно еще не подключено, пытаемся подключить
	Если ПараметрыКассы = Неопределено Тогда
		ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(Оповещение, ЭтаФорма.УникальныйИдентификатор, ОборудованиеСсылка); 	
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Новый Структура("ШиринаСтроки", ПараметрыКассы.ШиринаСтроки)); 
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоПечатиЧекаФР_ПослеПолученияШириныСтрокиПечатающегоУстройства(РезультатОперации, ДополнительныеПараметры) Экспорт
	
	ШиринаСтроки = 0;
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		Если РезультатОперации.Свойство("ШиринаСтроки") Тогда
			ШиринаСтроки = РезультатОперации.ШиринаСтроки;
		Иначе
			ПараметрыКассы = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ДополнительныеПараметры.Оборудование);
			Если ТипЗнч(ПараметрыКассы) = Тип("Структура") Тогда
				ШиринаСтроки = ПараметрыКассы.ШиринаСтроки;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	
	Объект = ЭтаФорма.Объект;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Оборудование)
		И РаботаСДокументамиКлиент.НастройкиПечатиЧековКорректны(ДополнительныеПараметры.Оборудование, НастройкаПечатиЧеков)
	Тогда
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			Оборудование = ДополнительныеПараметры.Оборудование;
			Для Каждого СтрокаЧек Из Объект.Чеки Цикл
				Если Не ЗначениеЗаполнено(СтрокаЧек.НомерЧека) Тогда
					ОбщиеПараметрыЧека = ПолучитьШаблонЧекаОказаниеУслуг(Объект, ЭтаФорма, Оборудование, СтрокаЧек, ШиринаСтроки);
					
					Если Не ЗначениеЗаполнено(ОбщиеПараметрыЧека) Тогда
						Если ЗначениеЗаполнено(СтрокаЧек.КлючСтроки) <> Неопределено Тогда
							УстановитьНомерЧекаДокументаТабЧастиЧеки(ЭтаФорма, 9999, "", СтрокаЧек.КлючСтроки); // Фиктивный номер чека для чеков ЕНВД, которые специально не печатаются.
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					
					Если ОбщиеПараметрыЧека.СодержитМаркированныеТовары Тогда
						//	Проверяем что указанная ККТ поддерживает ФФД1.2.
						ККТПоддерживаетПроверкуКМ = МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(Оборудование);
						Если ККТПоддерживаетПроверкуКМ Тогда 	
							//	Вызов формы для взаимодействия с ККТ по проверке КМ с передачей команды о начале проверки КМ.
							ПараметрыОповещения = Новый Структура("ОбщиеПараметрыЧека, ЭтаФорма", ОбщиеПараметрыЧека, ЭтаФорма); 
							ОписаниеОповещенияПослеПроверкиКМ = Новый ОписаниеОповещения("ЗакрытиеФормыПроверкиКМНаККТ", ЭтотОбъект, ПараметрыОповещения);										
							ОткрытьФорму("ОбщаяФорма.ПроверкаКодовМаркировкиЛекарств",, ЭтаФорма,,,, ОписаниеОповещенияПослеПроверкиКМ);					
							Оповестить("НачалоПроверки", ОбщиеПараметрыЧека.ПараметрыПроверкиНаККТ, ЭтаФорма);	
						Иначе
							Сообщить(НСтр("ru = 'Чек содержит штрихкоды маркированных товаров, но выбранное печатающее устройство не поддерживает ФФД 1.2 и функционал проверки кодов маркировки!'"));					
						КонецЕсли;
					Иначе
						ПечатьЧекаФР(ЭтаФорма, Оборудование, ОбщиеПараметрыЧека, СтрокаЧек.КлючСтроки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		Иначе
			ОбщиеПараметры = ПолучитьШаблонЧека(ЭтаФорма, ДополнительныеПараметры.Оборудование, ШиринаСтроки);
			ПечатьЧекаФР(ЭтаФорма, ДополнительныеПараметры.Оборудование, ОбщиеПараметры);
		КонецЕсли;	
	Иначе
		ЭтаФорма.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьЧекаФР(ЭтаФорма, РезультатВыполнения, ОбщиеПараметры, КлючСтрокиЧеки = Неопределено)
	
	Объект = ЭтаФорма.Объект;
	УникальныйИдентификатор = ЭтаФорма.УникальныйИдентификатор;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	// Напечатаем основной чек
	Если ЗначениеЗаполнено(ОбщиеПараметры) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
		
		Если КлючСтрокиЧеки <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ЧекиКлючСтроки",КлючСтрокиЧеки);	
		КонецЕсли;

		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеПечатиЧекаНаФР", РаботаСДокументамиКлиент, ДополнительныеПараметры);
		
		Если ОбщиеПараметры.Свойство("ЭтоНефискальныйЧек") И ОбщиеПараметры.ЭтоНефискальныйЧек Тогда
			ОбщиеПараметры.Вставить("СтрокиТекста", ОбщиеПараметры.Текст);
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, РезультатВыполнения, ОбщиеПараметры);
		Иначе
			Если НЕ Объект.Коррекция Тогда
				ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, РезультатВыполнения, ОбщиеПараметры);
			Иначе
				ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, РезультатВыполнения, ОбщиеПараметры);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		УстановитьНомерЧекаДокументаВФорме(ЭтаФорма, 9999,, Объект); // Фиктивный номер чека для чеков ЕНВД, которые специально не печатаются.
		
		ЭтаФорма.Доступность = Истина;
		РассчитатьЗаполнитьПризнакиЕНВДКредитнойЧасти(Объект, НастройкаПечатиЧеков);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение печати чека.
//
// Параметры:
//  РезультатВыполнения		 - Булево	 - результат прошлого этапа печати.
//  ДополнительныеПараметры	 - Структура - данные выполнения.
//
Процедура ЗавершениеПечатиЧекаНаФР(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	Объект = ЭтаФорма.Объект;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	ЭтаФорма.Доступность = Истина;
	Контекст = ДополнительныеПараметры;
	Если РезультатВыполнения.Результат Тогда
		Если РезультатВыполнения.Свойство("НомерЧекаККТ") Тогда
			
			Если Объект.Коррекция Тогда
				НомераЧековСторно = МенеджерОборудованияКлиентПереопределяемый.ПолучитьНомераЧековСторно(РезультатВыполнения.ПараметрыФискализации);
			КонецЕсли;
			
			Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				
				ЭтаФорма.ОбновитьИнформациюОКМ();
				
				Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ЧекиКлючСтроки") Тогда
					// Подумать ПодключеннаяККМ
					УстановитьНомерЧекаДокументаТабЧастиЧеки(ЭтаФорма, РезультатВыполнения.НомерЧекаККТ, НомераЧековСторно, ДополнительныеПараметры.ЧекиКлючСтроки, РезультатВыполнения.ИдентификаторУстройства);
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК) Тогда
					ОтправитьПодтверждениеНСПК(ЭтаФорма, Истина);
				КонецЕсли;
				
				Оповестить("УспешноеПробитиеЧекаОказаниеУслуг", Объект.Ссылка);
			Иначе
				
				// Установить полученное значение номера чека реквизиту документа.
				Объект.ДатаПечатиЧека = ТекущаяДата();
				Объект.ФискальноеУстройство = РезультатВыполнения.ИдентификаторУстройства;
				
				Если Объект.Коррекция Тогда
					Объект.НомераЧековСторно = НомераЧековСторно;
				КонецЕсли;
				
				УстановитьНомерЧекаДокументаВФорме(ЭтаФорма, РезультатВыполнения.НомерЧекаККТ,, Объект);
				
				РассчитатьЗаполнитьПризнакиЕНВДКредитнойЧасти(Объект, НастройкаПечатиЧеков);
				Оповестить("УспешноеПробитиеЧека", Объект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
		"%ДополнительноеОписание%",
		РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		// Нужно для случая когда чек коррекции успел пробиться, а с основным произошла ошибка
		// чтобы перезаписать состояние пробития КММ
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			ЭтаФорма.СохранитьИзмененияОбъектаФормы();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		ЭтаФорма.ОбновитьИндикациюЧекиПробиты();
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗакрытиеФормыПроверкиКМНаККТ(Результат, ДополнительныеПараметры) Экспорт
	
	// Обновим статусы КМ по данным из регистра РезультатыПроверкиКМНаККТ	
	ДополнительныеПараметры.ЭтаФорма.ОбновитьИнформациюОКМ();
	// Перейдем к фискализации чека
	ОбщиеПараметрыЧека = ДополнительныеПараметры.ОбщиеПараметрыЧека;	
	Если Результат.ПрерватьОперацию Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверка КМ была прервана пользователем.");
	Иначе
		Если НЕ Результат.Результат.ЕстьОшибки Тогда
			КлючСтрокиЧеки = ?(ОбщиеПараметрыЧека.Свойство("КлючСтрокиЧеки"), ОбщиеПараметрыЧека.КлючСтрокиЧеки, Неопределено);  
			ПечатьЧекаФР(ДополнительныеПараметры.ЭтаФорма, ОбщиеПараметрыЧека.ПодключаемоеОборудование, ОбщиеПараметрыЧека, КлючСтрокиЧеки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Маркированные товары не прошли проверку ККТ/ГИСМ. Детально можно узнать на закладке Товары.");
			// Уточним, не желают ли продавец и покупатель приобрести КМ, не прошедшие проверку?
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПечатиКМНеПрошедшихПроверку", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Желаете игнорировать ошибки при проверке КМ на ККТ и напечатать чек?';"), Режим, 0);	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияВопросаОПечатиКМНеПрошедшихПроверку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		ОбщиеПараметрыЧека = ДополнительныеПараметры.ОбщиеПараметрыЧека;
		КлючСтрокиЧеки = ?(ОбщиеПараметрыЧека.Свойство("КлючСтрокиЧеки"), ОбщиеПараметрыЧека.КлючСтрокиЧеки, Неопределено);
		ПечатьЧекаФР(ДополнительныеПараметры.ЭтаФорма, ОбщиеПараметрыЧека.ПодключаемоеОборудование, ОбщиеПараметрыЧека, КлючСтрокиЧеки);	
	КонецЕсли;
	
КонецПроцедуры

// Присваивает номер чека документа в форме
//
// Параметры:
//  ЭтаФорма	 - ФормаКлиентскогоПриложения	 - форма документа чека
//  НомерЧека	 - Число						 - номер чека
//  ИмяРеквизита - Строка						 - имя реквизита номера чека в документе.
//  Объект		 - ДанныеФормыКоллекция			 - документ чека на форме.
//
Процедура УстановитьНомерЧекаДокументаВФорме(ЭтаФорма, НомерЧека, ИмяРеквизита = "НомерЧекаККМ", Объект = Неопределено)
	
	Если Объект = Неопределено Тогда
		Объект = ЭтаФорма.Объект;
	Иначе
		Объект[ИмяРеквизита] = НомерЧека;
	КонецЕсли;
	
	ОбъектКопия = Объект;
	РаботаСТорговымОборудованием.УстановитьНомерЧекаДокументаВФорме(ОбъектКопия, НомерЧека, ИмяРеквизита);
	КопироватьДанныеФормы(ОбъектКопия, ЭтаФорма.Объект);
	ЭтаФорма.Прочитать();
	Объект = ЭтаФорма.Объект;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КредитныеДанные") Тогда
		НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
		РассчитатьЗаполнитьПризнакиЕНВДКредитнойЧасти(Объект, НастройкаПечатиЧеков.Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		Элементы = ЭтаФорма.Элементы;
		ЭтаФорма.ОбновитьВидимостьНомеровЧеков(Элементы.ГруппаНомераЧеков, Элементы.НомерЧекаККМ, Элементы.НомерЧекаЭТ, Объект.НомерЧекаККМ, Объект.НомерЧекаЭТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНомерЧекаДокументаТабЧастиЧеки(ЭтаФорма, НомерЧекаККМ, НомераЧековСторно = "",КлючСтроки, ПодключеннаяККМ = Неопределено)
	
	Для Каждого СтрокаЧек Из ЭтаФорма.Объект.Чеки Цикл
		Если СтрокаЧек.КлючСтроки = КлючСтроки Тогда
			СтрокаЧек.НомерЧека				= НомерЧекаККМ;
			СтрокаЧек.ДатаПечатиЧека		= ТекущаяДата();
			СтрокаЧек.ФискальноеУстройство	= ПодключеннаяККМ;
			СтрокаЧек.НомераЧековСторно		= НомераЧековСторно;
		КонецЕсли;
	КонецЦикла;

	ЭтаФорма.СохранитьИзмененияОбъектаФормы();
	
КонецПроцедуры

Процедура НачалоПечатиЧекаИнв(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		ОборудованиеСсылка = РезультатВыполнения.ИдентификаторУстройства;
	Иначе
		ОборудованиеСсылка = РезультатВыполнения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОборудованиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = ДополнительныеПараметры.ЭтаФорма.УникальныйИдентификатор;
	ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассациюНаФискальномУстройствеЗавершение", РаботаСДокументамиКлиент, ДополнительныеПараметры);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ОборудованиеСсылка, ПараметрыОперации);

КонецПроцедуры

Процедура ИнкассациюНаФискальномУстройствеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	Объект = ЭтаФорма.Объект;
	НастройкаПечатиЧеков = ЭтаФорма.НастройкаПечатиЧеков;
	
	ЭтаФорма.Доступность = Истина;
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Объект.ДатаПечатиЧека = ТекущаяДата();
		Объект.ФискальноеУстройство = РезультатВыполнения.ИдентификаторУстройства;
		УстановитьНомерЧекаДокументаВФорме(ЭтаФорма, "-1",, Объект);
		
		РассчитатьЗаполнитьПризнакиЕНВДКредитнойЧасти(Объект, НастройкаПечатиЧеков);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ККМ_Прочее

// Контроль изменений данных формы в других сеансах.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения	 - форма.
// 
// Возвращаемое значение:
//   Булево.
//
Функция КонтрольИзмененийДанныхВДругихСеансахКлиент(Форма) Экспорт
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ВерсияДанныхБД = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Форма.Объект.Ссылка, "ВерсияДанных");
		Если Форма.Объект.ВерсияДанных <> ВерсияДанныхБД Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Пробитие чека на фискальном регистраторе невозможно, документ был изменен в другом сеансе! Откройте документ заново и повторите попытку.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Устанавливает видимость элементов коррекции.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - форма.
//  Коррекция	 - Булево						 - коррекция ли это.
//
Процедура ОбновитьВидимостьЭлементовКоррекции(Форма, Коррекция) Экспорт
	
	Форма.Элементы.ГруппаКоррекция.Видимость			= Коррекция;
	ЗаголовокКоррекции = "Коррекция";
	
	Если Форма.Элементы.Найти("НадписьКоррекция") <> Неопределено Тогда
		Форма.Элементы.НадписьКоррекция.Видимость = Коррекция;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ложь, если в случае ККТ с передачей данных при печати чека не заполнены настройки онлайн-чеков филиала.
//
// Параметры:
//  ФискальноеУстройство - СправочникСсылка.ПодключаемоеОборудование - оборудование кассы.
//  НастройкаПечатиЧеков - Структура - настройки печати онлайн-чеков.
// 
// Возвращаемое значение:
//   Булево.
//
Функция НастройкиПечатиЧековКорректны(ФискальноеУстройство, НастройкаПечатиЧеков) Экспорт
	
	Если НастройкаПечатиЧеков.ПустаяСсылка
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФискальноеУстройство, "ТипОборудования") = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ")
	Тогда
		СообщитьОНезаполненныхНастройкахККТ();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СообщитьОНезаполненныхНастройкахККТ()
	
	СообщениеОбОшибке = НСтр("ru='Для филиала документа не указана настройка печати онлайн чеков! Печать чека на ККТ отменена.
	                        	 |Закройте документ, перейдите в ""Администрирование - %1"", заполните реквизит ""Настройка печати онлайн чеков"", после чего заново откройте документ и пробейте чек.'");
	
	СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ПроцедурыСпециализацииПоставки.СинонимСправочникаФилиалов());
	ПоказатьПредупреждение(,СообщениеОбОшибке, 60, НСтр("ru='Ошибка печати чека'"));
	
КонецПроцедуры

Процедура ВыполнитьРедактированиеРеквизитаККТ(Форма, НазваниеРеквизитаККТ, Клиент) Экспорт
	
	ПараметрыРеквизитаККТ = Новый Структура("НазваниеРеквизитаККТ", НазваниеРеквизитаККТ, Клиент);
	
	Если НазваниеРеквизитаККТ = "ПерсональныеДанныеПокупателя" Тогда
		ПерсональныеДанные = Новый Структура;
		Если СтрНайти(Форма.ИмяФормы, "Документ.РасходныйКассовыйОрдер") > 0 Тогда
			ПерсональныеДанные.Вставить("Клиент", Форма.Объект.Контрагент);	
		Иначе
			ПерсональныеДанные.Вставить("Клиент", Форма.Объект.Клиент);
		КонецЕсли;
		Если СтрНайти(Форма.ИмяФормы, "Документ.ПриходныйКассовыйОрдер") > 0
			Или СтрНайти(Форма.ИмяФормы, "Документ.ОплатаПлатежнойКартой") > 0
		Тогда
			ПерсональныеДанные.Вставить("КлиентПредставление", Форма.Объект.ПринятоОт);
			ПерсональныеДанные.Вставить("ИНН", Форма.Объект.ПринятоОтИНН);
			ПерсональныеДанные.Вставить("Адрес", Форма.Объект.ПринятоОтАдрес);
		Иначе
			ПерсональныеДанные.Вставить("КлиентПредставление", Форма.Объект.Выдать);
			ПерсональныеДанные.Вставить("ИНН", Форма.Объект.ВыдатьИНН);
			ПерсональныеДанные.Вставить("Адрес", Форма.Объект.ВыдатьАдрес);
		КонецЕсли;
		ПараметрыРеквизитаККТ.Вставить("ПерсональныеДанные", ПерсональныеДанные);
	КонецЕсли;
	
	ПараметрыРеквизитаККТ.Вставить("Дата", Форма.Объект.Дата);
	ПараметрыРеквизитаККТ.Вставить("АдресХранилищаДанныхРеквизита", ПоместитьЗначениеРеквизитаККТВХранилище(Форма, ПараметрыРеквизитаККТ.НазваниеРеквизитаККТ));
	ОповещениеОЗакрытииФормыРедактированияРеквизитаККТ = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияРеквизитаККТ", Форма, ПараметрыРеквизитаККТ);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыЧекаККТ", ПараметрыРеквизитаККТ, Форма,,,, ОповещениеОЗакрытииФормыРедактированияРеквизитаККТ);
	
КонецПроцедуры

Функция ПоместитьЗначениеРеквизитаККТВХранилище(Форма, НазваниеРеквизитаККТ)
	
	Возврат ПоместитьВоВременноеХранилище(Форма[НазваниеРеквизитаККТ], Форма.УникальныйИдентификатор) 	
	
КонецФункции 

Процедура СохранитьЗначениеРеквизитаККТВОбъекте(Форма, ЗначениеРеквизитаККТ, НазваниеРеквизитаККТ) Экспорт
	
	Если ЗначениеЗаполнено(НазваниеРеквизитаККТ) Тогда
		Форма[НазваниеРеквизитаККТ]	= ЗначениеРеквизитаККТ;
		Форма.Модифицированность	= Истина;
	Иначе
		ВызватьИсключение "Реквизит с названием " + НазваниеРеквизитаККТ + " не найден. Обратитесь в техподдержку разработчика программного продукта.";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЗначениеРеквизитаККТВОбъекте(Форма, НазваниеРеквизитаККТ) Экспорт 
	
	Если ЗначениеЗаполнено(НазваниеРеквизитаККТ) Тогда
		Форма[НазваниеРеквизитаККТ]	= Неопределено;
		Форма.Модифицированность = Истина;
		Если СтрНайти(Форма.ИмяФормы, "Документ.ПриходныйКассовыйОрдер") > 0
			Или СтрНайти(Форма.ИмяФормы, "Документ.ОплатаПлатежнойКартой") > 0
		Тогда
			Форма.Объект.ПринятоОт = Форма.Объект.Клиент;
			Форма.Объект.ПринятоОтИНН = Неопределено;
			Форма.Объект.ПринятоОтАдрес = Неопределено;
		Иначе
			Форма.Объект.Выдать = Форма.Объект.Клиент;
			Форма.Объект.ВыдатьИНН = Неопределено;
			Форма.Объект.ВыдатьАдрес = Неопределено;	
		КонецЕсли;
	Иначе
		ВызватьИсключение "Реквизит с названием " + НазваниеРеквизитаККТ + " не найден. Обратитесь в техподдержку разработчика программного продукта.";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодтверждениеНСПК // Операция подтверждения фискальной операции с ЭС НСПК.

Процедура ОтправитьПодтверждениеНСПК(ЭтаФорма, ПервичнаяОтправка = Ложь) Экспорт
	
	Объект = ЭтаФорма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторКорзиныНСПК) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе не используется электронный сертификат НСПК!");
		Возврат;
	ИначеЕсли Не Объект.СостояниеЧековККМ = ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиПробиты") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Чек не пробит!");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("ПервичнаяОтправка", ПервичнаяОтправка);
	
	Если ПервичнаяОтправка
		Или РаботаСДокументамиСервер.ДокументВОчередиНаПодтверждениеНСПК(Объект.Ссылка) = Неопределено
	Тогда
		ОповещениеВопросОтправитьПодтверждениеНСПК(КодВозвратаДиалога.Повторить, ДополнительныеПараметры);		
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ОповещениеВопросОтправитьПодтверждениеНСПК", РаботаСДокументамиКлиент, ДополнительныеПараметры),
		"Подтверждение уже было отправлено. Повторить отправку подтверждения?", РежимДиалогаВопрос.ПовторитьОтмена);			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОповещениеВопросОтправитьПодтверждениеНСПК(Результат, ДополнительныеПараметры) Экспорт
	
	Объект = ДополнительныеПараметры.ЭтаФорма.Объект;
	
	Если Результат = КодВозвратаДиалога.Повторить Тогда
		
		ПараметрыОперации = РаботаСДокументамиСервер.ПараметрыОперацииНСПК(ДополнительныеПараметры.ЭтаФорма.НСПК_СпособОплаты, Объект.Ссылка); 
		
		ОповещениеМетода = Новый ОписаниеОповещения("ОтправитьПодтвреждениеНСПКЗавершение", РаботаСДокументамиКлиент, ДополнительныеПараметры);
		ЭлектронныеСертификатыНСПККлиент.НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПодтвреждениеНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Объект = ДополнительныеПараметры.ЭтаФорма.Объект;
	
	Если РезультатВыполнения.Результат
		И Не ДополнительныеПараметры.ПервичнаяОтправка
	Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Подтверждение операции НСПК успешно отправлено!");
		РаботаСДокументамиСервер.УдалитьДокументИзОчередиПодтвержденияНСПК(Объект.Ссылка);
	ИначеЕсли Не РезультатВыполнения.Результат Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При отправке подтверждения операции НСПК произошла ошибка (код " + РезультатВыполнения.КодРезультата + ") " + РезультатВыполнения.ОписаниеОшибки + " Попробуйте повторить операцию позже!");
		РаботаСДокументамиСервер.ДобавитьДокументВОчередьПодтвержденияНСПК(Объект.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование // Подклчаемое оборудование в документах

// Отработка смены филиала в форме платёжного документа по безналу.
//
// Параметры:
//  Объект			 - ДокументОбъект - документ на форме
//  ИсходныйФилиал	 - СправочникСсылка.Филиалы - филиал до изменения.
//
Процедура ПлатежныйДокументОбновитьЭквайрингПриСменеФилиала(Объект, ИсходныйФилиал) Экспорт
	
	Если Объект.Филиал <> ИсходныйФилиал
		И Не ЗначениеЗаполнено(Объект.НомерЧекаЭТ)
		И Не ЗначениеЗаполнено(Объект.НомерЧекаККМ)
	Тогда
		ОбновитьТерминал = Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал);
		Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
			ПривязкаТерминала = ДопСерверныеФункции.ПолучитьРеквизит(Объект.ЭквайринговыйТерминал, "Касса");
			Если ЗначениеЗаполнено(ПривязкаТерминала)
				И ТипЗнч(ПривязкаТерминала) = Тип("СправочникСсылка.Филиалы")
				И ПривязкаТерминала <> Объект.Филиал
			Тогда
				ОбновитьТерминал = Истина;
		    КонецЕсли;
		КонецЕсли;
		Если ОбновитьТерминал Тогда
			Объект.ЭквайринговыйТерминал = РаботаСТорговымОборудованием.ПолучитьЭквайринговыйТерминал(, Объект.Филиал);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти