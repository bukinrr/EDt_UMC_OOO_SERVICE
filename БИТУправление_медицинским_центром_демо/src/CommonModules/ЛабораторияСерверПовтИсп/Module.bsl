#Область ПрограммныйИнтерфейс

// Вид лаборатории по лаборатории.
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории, ПеречислениеСсылка.ВнешниеЛаборатории	 - лабоатория.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВнешниеЛаборатории.
//
Функция ВидЛаборатории(Лаборатория) Экспорт
	
	Если ЗначениеЗаполнено(Лаборатория) Тогда
		
		Если ТипЗнч(Лаборатория) = Тип("ПеречислениеСсылка.ВнешниеЛаборатории") Тогда
			Возврат Лаборатория;
		Иначе
			Возврат Лаборатория.ВнешняяЛаборатория;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ВнешниеЛаборатории.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Лаборатория использует ли контейнеры в интеграции.
//
// Параметры:
//  Лаборатория					 - СправочникСсылка.Лаборатории, ПеречислениеСсылка.ВнешниеЛаборатории	 - лаборатория или её вид.
//  НастройкиУчетаЛабораторий	 - Структура															 - см. ЛабораторияСервер.НастройкиУчетаЛабораторий().
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЛабораторияИспользуетКонтейнеры(Лаборатория, НастройкиУчетаЛабораторий = Неопределено) Экспорт
	
	// Если настройки переданы, они могут учитывать контекст вызова, например, что документ забора старый и для него 
	// иная трактовка. Но, если не передано, то просто используются текущие настройки лабораторий.
	Если НастройкиУчетаЛабораторий = Неопределено Тогда
		НастройкиУчетаЛабораторий = ЛабораторияСервер.НастройкиУчетаЛабораторий();
	КонецЕсли;
	
	ИспользуетКонтейнеры = Ложь;
	
	Если ЗначениеЗаполнено(Лаборатория)
		И НастройкиУчетаЛабораторий.ИспользуетсяРасширеннаяЛаборатория
	Тогда
		ВидЛаборатории = ВидЛаборатории(Лаборатория);
		Если ЗначениеЗаполнено(ВидЛаборатории) Тогда
			
			ИмяВидаЛаборатории = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидЛаборатории);
			
			ИспользуетКонтейнеры = ЛабораторииНеИспользующиеКонтейнеры().Найти(ИмяВидаЛаборатории) = Неопределено;
		Иначе
			ИспользуетКонтейнеры = НастройкиУчетаЛабораторий.ИспользуетсяРасширеннаяВнутренняяЛаборатория;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользуетКонтейнеры;
	
КонецФункции

// Имена лабораторий, не использующих контейнеры
//	В текущей интерпретации совпадает с лабораториями, не распределяющими по контейнерам, но имеющие там строки,
//	иными словами, "не использующих контейнеры" = не используют стандартный порядок распределения и, значит,
//	стандартную проверку заполнения при проведении документа.
// 
// Возвращаемое значение:
//  Массив - из Строка с именами лабораторий из Перечисление.ВнешниеЛаборатории или ПеречислениеСсылка.ВнешниеЛаборатории.
//
Функция ЛабораторииНеИспользующиеКонтейнеры(ВернутьКакСсылки = Ложь) Экспорт
	
	ИменаЛабораторий = Новый Массив;
	
	ИменаЛабораторий.Добавить("Invitro");	// Перечисление.ВнешниеЛаборатории.Invitro.
	ИменаЛабораторий.Добавить("Гемотест");	// Перечисление.ВнешниеЛаборатории.Гемотест.
	
	// Если нужны ссылки на перечисление, преобразуем строки имен лабораторий
	Если ВернутьКакСсылки Тогда
		пчВнешниеЛаборатории = Перечисления.ВнешниеЛаборатории;
		
		Для Сч = 0 По ИменаЛабораторий.Количество() - 1 Цикл
			ИменаЛабораторий[Сч] = пчВнешниеЛаборатории[ИменаЛабораторий[Сч]];
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИменаЛабораторий;
	
КонецФункции

// Возвращает признак использования пулов номеров заявок в интеграции с КДЛ-лабораториями.
//
// Параметры:
//  Лаборатория - СправочникСсылка.Лаборатории - лаборатория, для которой получаем настройки.
// 
// Возвращаемое значение:
//  Булево - Истина, если в настройках учета лабораторий включена интеграция с этой лабораторией
//				и в настройках взаимодействия лаборатории не используются предраспечатанные штрихкоды.
//
Функция ИспользуютсяПулыНомеровЗаявокЛабораторий(Лаборатория) Экспорт
	
	Результат = Ложь; // Значение по умолчанию. Например, внутренняя лаборатория.
	
	Если ЗначениеЗаполнено(Лаборатория) Тогда
		
		МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
		
		Если МодульОбработчик <> Неопределено Тогда
			// Вызываем у модуля конкретной лаборатории ИспользуютсяПулыНомеровЗаявокЛабораторий()
			// без параметров, а если такая спецификация отсутствует, то с параметром Лаборатория.
			Попытка
				Результат = МодульОбработчик.ИспользуютсяПулыНомеровЗаявокЛабораторий();
			Исключение
				Попытка
					Результат = МодульОбработчик.ИспользуютсяПулыНомеровЗаявокЛабораторий(Лаборатория);
				Исключение КонецПопытки;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Лаборатория разрешает ручной ввод кода (штрихкода) пробы (контейнера).
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории	 - лабоатория.
// 
// Возвращаемое значение:
//  Булево - если Истина, то можно вводить код пробы вручную или сканером.
//
Функция ЛабораторияРазрешаетВводКодаПробы(Лаборатория) Экспорт
	
	РедактированиеКодаПробыЗапрещено = Ложь;
	
	МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
	Попытка
		РедактированиеКодаПробыЗапрещено = МодульОбработчик.РедактированиеКодаПробыЗапрещено();
	Исключение КонецПопытки;
	
	Возврат Не РедактированиеКодаПробыЗапрещено И Не ИспользуютсяПулыНомеровЗаявокЛабораторий(Лаборатория);
	
КонецФункции

// Лаборатория отправляет заказы в лабораторию в процессе оформления забора в программе (из формы документа ДействияНадАнализами).
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории, ПеречислениеСсылка.ВнешниеЛаборатории	 - лаборатория.
// 
// Возвращаемое значение:
//  Булево - если Истина, то можно вводить код пробы вручную или сканером.
//
Функция ЛабораторияОтправляетЗаказыИнтерактивно(Лаборатория) Экспорт
	
	ВидЛаборатории = ВидЛаборатории(Лаборатория);
	Если ЗначениеЗаполнено(ВидЛаборатории) Тогда
		ИмяВидаЛаборатории = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидЛаборатории);
		
		// Одни и те же лаборатории - не распределяющие по котейнерам и отправляющие интерактивно.
		Возврат ЛабораторииНеИспользующиеКонтейнеры().Найти(ИмяВидаЛаборатории) <> Неопределено;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Определяет использует ли лабоатория номенклатуру анализов без правил забора
//
// Параметры:
//  Лаборатория	 - СправочникСсылка.Лаборатории, ПеречислениеСсылка.ВнешниеЛаборатории	 - лаборатория. 
// 
// Возвращаемое значение:
//  Булево - использует номенклатуру анализов без правил забора.
//
Функция ЛабораторияИспользуетНоменклатуруАнализовБезПравилЗабора(Лаборатория) Экспорт
	
	Результат = Ложь; // Значение по умолчанию.
	
	Если ЗначениеЗаполнено(Лаборатория) Тогда
		
		МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
		
		Если МодульОбработчик <> Неопределено Тогда
			// Вызываем у модуля конкретной лаборатории ЛабораторияИспользуетНоменклатуруАнализовБезПравилЗабора().
			Попытка
				Результат = МодульОбработчик.ЛабораторияИспользуетНоменклатуруАнализовБезПравилЗабора();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает настройку взаимодействия для указанной лаборатории.
//
// Параметры:
//  Лаборатория			 - СправочникСсылка.Лаборатории	 - лаборатория
//  ИмяРегистраНастроек	 - Строка						 - имя регистра сведений, в котором хранятся настройки взаимодействия.
// 
// Возвращаемое значение:
//  Структура - настройка взаимодействия c ключами согласно полям таблицы регистра настроек (состав полей зависит от регистра).
//
Функция ПолучитьНастройкиВзаимодействия_Унифицированно(Лаборатория, ИмяРегистраНастроек) Экспорт
	
	Перем Настройки;
	
	НЗ = РегистрыСведений[ИмяРегистраНастроек].СоздатьНаборЗаписей();
	НЗ.Отбор.Лаборатория.Установить(Лаборатория);
	НЗ.Прочитать();
	Если НЗ.Количество() <> 0 Тогда
		ТЗ = НЗ.Выгрузить();
		ДанныеНастроек = ТЗ[0];
		
		// Заполняем структуру настроек, если интеграция с этой Лабораторией используется.
		Если ТЗ.Колонки.Найти("Используется") <> Неопределено
			И ДанныеНастроек.Используется
		Тогда
			Настройки = Новый Структура;
			Для Каждого Колонка Из ТЗ.Колонки Цикл
				Настройки.Вставить(Колонка.Имя, ДанныеНастроек[Колонка.Имя]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти
