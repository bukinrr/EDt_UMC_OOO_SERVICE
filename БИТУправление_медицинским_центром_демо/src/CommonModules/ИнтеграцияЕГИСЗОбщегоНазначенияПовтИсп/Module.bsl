#Область ПрограммныйИнтерфейс

// Функция - Получить наименование классификатора по OID
//
// Параметры:
//  codeSystem	 - Строка	 - OID.
// 
// Возвращаемое значение:
//  Строка - code system name классификатора.
//
Функция ПолучитьНаименованиеКлассификатораПоOID(codeSystem) Экспорт
	
	Запись = РегистрыСведений.НастройкиОбновленияСправочниковЕГИСЗ.СоздатьМенеджерЗаписи();
	Запись.Классификатор = codeSystem;
	Запись.Прочитать();
	
	Если Запись.Выбран() И ЗначениеЗаполнено(Запись.Наименование) Тогда
		Возврат Запись.Наименование;
	КонецЕсли; 
	
	СоответствиеКлассификаторы = Новый Соответствие;
	СоответствиеКлассификаторы.Вставить("1.2.643.5.1.13.13.11.1002"	, "Должности работников организаций медицинского и фармацевтического профиля");
	СоответствиеКлассификаторы.Вставить("1.2.643.5.1.13.13.99.2.147", "Цели направления на медико-социальную экспертизу");
	СоответствиеКлассификаторы.Вставить("1.2.643.5.1.13.13.99.2.315", "Категории гражданства");
	СоответствиеКлассификаторы.Вставить("1.2.643.5.1.13.13.99.2.314", "Отношение к воинской обязанности");
	СоответствиеКлассификаторы.Вставить("1.2.643.5.1.13.13.11.1005"	, "Международная классификация болезней и состояний, связанных со здоровьем 10 пересмотра. Версия 4");
	
	Наименование = СоответствиеКлассификаторы.Получить(codeSystem);
	Если Наименование = Неопределено Тогда
		ПараметрыСправочника = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПараметрыСправочникаЕГИСЗ(codeSystem);
		Если ПараметрыСправочника.Свойство("ВидКлассификатора") Тогда
			Наименование = Строка(ПараметрыСправочника.ВидКлассификатора);
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСправочника.Пояснение) Тогда
			Наименование = ПараметрыСправочника.Пояснение;
		Иначе
			Наименование = ПараметрыСправочника.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Получить текст макета справочника
//
// Параметры:
//  oid	 - Строка - Оид справочника
// 
// Возвращаемое значение:
//  Строка - Текст макета.
//
Функция ПолучитьМакетСправочникаПоOid(oid) Экспорт
	
	Перем ИмяМакета;
	
	Макеты = Метаданные.Справочники.РегистрируемыеЭлектронныеМедДокументы.Макеты;
	Для Каждого Макет Из Макеты Цикл
		Если СокрЛП(Макет.Комментарий) = СокрЛП(oid) Тогда
			ИмяМакета = Макет.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//OidМакетов = Новый Соответствие;
	//
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.1",		"ВыписнойЭпикризСтационарный");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.2",		"ЭпикризВАмбулатории");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.3",		"Направление");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.5",		"ПротоколКонсультации");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.6",		"ПротоколИнструментальногоИсследования");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.7",		"ПротоколЛабораторногоИсследования");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.8",		"СправкаДопускаУправленияТранспортнымСредством");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.10",	"ВыписнойЭпикризИзРодильногоДома");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.11",	"ПротоколГемотрансфузии");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.12",	"ПротоколПрижизненногоПатологоанатомическогоИсследования");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.13",	"МедицинскоеСвидетельствоОСмерти");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.14",	"МедицинскоеСвидетельствоОПеринатальнойСмерти");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.33",	"МедицинскоеСвидетельствоОРождении");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.34",	"НаправлениеНаМСЭ");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.35",	"СведенияОРезультатахПроведеннойМСЭ");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.36",	"ПротоколТелемедицинскойКонсультации");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.37",	"ЛьготныйРецептНаЛекарственныйПрепаратИСпециальноеПитание");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.38",	"ОтпускЛекарственногоПрепарата");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.39",	"МедицинскаяСправка");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.40",	"КартаПрофилактическогоМедицинскогоОсмотраНесовершеннолетнего");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.41",	"АмбулаторнаяКарта");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.42",	"КонтрольнаяКартаДиспансерногоНаблюдения");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.44",	"КонтрольнаяКартаДиспансеризации");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.45",	"МедицинскоеЗаключениеОбОтсутствииМедицинскихПротивопоказанийКВладениюОружием");
	//OidМакетов.Вставить("1.2.643.5.1.13.2.7.5.1.46",	"МедицинскоеЗаключениеОбОтсутствииНаркотиковПсихотропныхВеществ");
	//
	//ИмяМакета = OidМакетов.Получить(oid);
	
	Если ИмяМакета <> Неопределено Тогда
		Попытка
			Возврат Справочники.РегистрируемыеЭлектронныеМедДокументы.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить элемент классификатора пола физического лица по значению перечисления
//
// Параметры:
//  ПолПациента	 - ПеречислениеСсылка.ПолФизическихЛиц - Пол физического лица
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторыМинЗдрава, Неопределено - Элемент классификатора половой принадлежности
//
Функция ЭлементКлассификатораПолаФизЛица(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.КлассификаторПоловойПринадлежности);
	
КонецФункции

// Получить элемент классификатора типа адреса пациента по виду адреса
//
// Параметры:
//  ВидАдреса - СправочникСсылка.ВидыКонтактнойИнформации - Вид адреса
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторыМинЗдрава, Неопределено - Элемент классификатора типа адреса пациента
//
Функция ТипАдресаПациентаПоВидуАдреса(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ТипАдресаПациента);
	
КонецФункции

// Получить элемент классификатора вид места жительства по уид
//
// Параметры:
//  УИДЕГИСЗ - Число - Признак жителя города или села
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторыМинЗдрава, Неопределено - Элемент классификатора вид места жительства
//
Функция ВидМестаЖительстваПоУИДЕГИСЗ(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ПризнакЖителяГородаСела);
	
КонецФункции

Функция ИсточникОплатыПоКлассификатору(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ИсточникиОплатыМедПомощи);
	
КонецФункции

Функция ТипДокументаОснованияДляИсточникаОплаты(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ТипыДокументовОснований);
	
КонецФункции

Функция РольСотрудникаПриПодписанииМД(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ,, Метаданные.Справочники.РолиПриПодписиМедДокументов.ПолноеИмя());
	
КонецФункции

Функция ТипСобытияПоРЭМД(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ТипыДокументированныхСобытий);
	
КонецФункции

Функция ФормаОказанияМедПомощи(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ФормыОказанияМедицинскойПомощи);
	
КонецФункции

Функция ВидМедицинскойПомощи(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ВидыМедПомощи);
	
КонецФункции

Функция УсловияОказанияМедицинскойПомощи(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.УсловияОказанияМедицинскойПомощи);
	
КонецФункции

Функция ТипМедицинскойКарты(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ТипыМедицинскихКарт);
	
КонецФункции

Функция ВидМедицинскойДокументации(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ,, Метаданные.Справочники.ВидыМедицинскихДокументов.ПолноеИмя());
	
КонецФункции

Функция Должность(УИДЕГИСЗ = Неопределено, Наименование = Неопределено) Экспорт
	
	ВидКлассификатора = Перечисления.ВидыКлассификаторовМинЗдрава.ПрофессииРабочихИДолжностейСлужащих;
	
	Если УИДЕГИСЗ <> Неопределено Тогда
		Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, ВидКлассификатора);
	ИначеЕсли Наименование <> Неопределено Тогда
		Возврат ЭлементКлассификатораПоНаименованиюЭлемента(Наименование, ВидКлассификатора);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция Заключение(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ЗаключенияВМедицинскихДокументах);
	
КонецФункции

Функция ГруппаЗдоровья(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ГруппыЗдоровья);
	
КонецФункции

Функция РегистрируемыеЭлектронныеМедДокументы(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ,, Метаданные.Справочники.РегистрируемыеЭлектронныеМедДокументы.ПолноеИмя());
	
КонецФункции

Функция ДопустимоРедактированиеЭлементовЕГИСЗ() Экспорт
	
	Возврат ОбщегоНазначенияСервер.РежимРасширенныхВозможностейРедактированияДанных();
	
КонецФункции

Функция ЕдиницыИзмерения(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ЕдиницыИзмерения);
	
КонецФункции

Функция АктуальныйВидРЭМДЗаключенияМО() Экспорт
	
	Возврат РегистрируемыеЭлектронныеМедДокументы(194);
	
КонецФункции

Функция ВидРЭМДВрачебнойКомиссии() Экспорт
	
	Возврат РегистрируемыеЭлектронныеМедДокументы(99);
	
КонецФункции

Функция ВидРЭМДРецепта(ФормаРецепта) Экспорт
	
	Если ФормаРецепта = Перечисления.ФормыРецептов.Форма107_1_у Тогда
		Возврат РегистрируемыеЭлектронныеМедДокументы(148);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция УровеньКонфиденциальностиМедицинскогоДокумента(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.УровеньКонфиденциальностиМедицинскогоДокумента);
	
КонецФункции

Функция ВидыНозологическихЕдиниц(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ВидыНозологическихЕдиницДиагноза);
	
КонецФункции

Функция ЭтапыТалонаНаОказаниеВысокотехнологичнойМедицинскойПомощи(УИДЕГИСЗ) Экспорт
	
	Возврат ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, Перечисления.ВидыКлассификаторовМинЗдрава.ЭтапыТалонаНаОказаниеВысокотехнологичнойМедицинскойПомощи);
	
КонецФункции

Функция РежимОтладки() Экспорт
	
	Возврат СтрНайти(Строка(ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска")), "EmdrDebugMode") > 0;
	
КонецФункции

Функция ДлительностьПаузыПослеПревышенияЛимита() Экспорт
	
	Возврат 60;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЭлементКлассификатораПоУИДЕГИСЗ(УИДЕГИСЗ, ВидКлассификатора = Неопределено, ИмяСправочникаКлассификатора = Неопределено) Экспорт
	
	УсловиеПоискаЭлемента = "КлассификаторыМинЗдрава.УИДЕГИСЗ = &ЗначениеДляПоиска";
	Возврат ЭлементКлассификатораПоЗначению(УИДЕГИСЗ, ВидКлассификатора, ИмяСправочникаКлассификатора, УсловиеПоискаЭлемента);
	
КонецФункции

Функция ЭлементКлассификатораПоНаименованиюЭлемента(Наименование, ВидКлассификатора = Неопределено, ИмяСправочникаКлассификатора = Неопределено) Экспорт
	
	УсловиеПоискаЭлемента = "КлассификаторыМинЗдрава.НаименованиеПолное ПОДОБНО &ЗначениеДляПоиска";
	Возврат ЭлементКлассификатораПоЗначению(Наименование, ВидКлассификатора, ИмяСправочникаКлассификатора, УсловиеПоискаЭлемента);
	
КонецФункции

Функция ЭлементКлассификатораПоЗначению(ЗначениеДляПоиска, ВидКлассификатора, ИмяСправочникаКлассификатора, УсловиеПоискаЭлемента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяСправочникаКлассификатора = Неопределено Тогда
		ИмяСправочникаКлассификатора = Метаданные.Справочники.КлассификаторыМинЗдрава.ПолноеИмя();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторыМинЗдрава.Ссылка КАК Ссылка
		|ИЗ
		|	&СправочникКлассификатора КАК КлассификаторыМинЗдрава
		|ГДЕ
		|	&УсловиеВидаКлассификатора
		|	И &УсловиеПоискаЭлемента
		|	И НЕ КлассификаторыМинЗдрава.Архив
		|	И НЕ КлассификаторыМинЗдрава.ПометкаУдаления";
	
	Если ВидКлассификатора <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидаКлассификатора", "КлассификаторыМинЗдрава.ВидКлассификатора = &ВидКлассификатора");
		Запрос.УстановитьПараметр("ВидКлассификатора", ВидКлассификатора);
	Иначе
		Запрос.УстановитьПараметр("УсловиеВидаКлассификатора", Истина);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаЭлемента", УсловиеПоискаЭлемента);
	Запрос.УстановитьПараметр("ЗначениеДляПоиска", ЗначениеДляПоиска);
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СправочникКлассификатора", ИмяСправочникаКлассификатора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти