#Область ПрограммныйИнтерфейс

/////////////////////////////////////////////////////////////////////////////////
// БазоваяФункциональность
//

// Возвращает список процедур-обработчиков обновления библиотеки.
//
// Здесь в алфавитном порядке размещаются только процедуры-обработчики обновления 
// библиотечных подсистем, которые используются в данной конфигурации. 
// Процедуры-обработчики обновления самой конфигурации следует размещать в функции 
// ОбработчикиОбновления общего модуля ОбновлениеИнформационнойБазыПереопределяемый.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
//
Функция ОбработчикиОбновленияСтандартныхПодсистем() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
	
	//// АдресныйКлассификатор
	// АдресныйКлассификатор.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	//// Конец АдресныйКлассификатор.
	
	// БазоваяФункциональность
	СтандартныеПодсистемыСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец БазоваяФункциональность
		
	// ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец ДатыЗапретаИзменения
		
	//// ОбменДанными
	// ОбменДаннымиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	//// Конец ОбменДанными.
		
	// ПолучениеФайловИзИнтернета
	ПолучениеФайловИзИнтернета.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец ПолучениеФайловИзИнтернета
	
	//// Пользователи
	// Пользователи.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	//// Конец Пользователи.
	
	// РаботаСПочтовымиСообщениями
	РаботаСПочтовымиСообщениямиСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец РаботаСПочтовымиСообщениями
		
	Возврат Обработчики;
	
КонецФункции

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	// ОбменДанными
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиВключен",                           "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	// Конец ОбменДанными
	
	// УправлениеДоступом
	Обработчики.Вставить("ОграничиватьДоступПоВиду*",               "УправлениеДоступом.УстановкаПараметровСеанса");
	Обработчики.Вставить("ВидыДоступа*",                            "УправлениеДоступом.УстановкаПараметровСеанса");
	Обработчики.Вставить("ДобавлятьРуководителямДоступПодчиненных", "УправлениеДоступом.УстановкаПараметровСеанса");
	// Конец УправлениеДоступом
	
	// Пользователи
	Обработчики.Вставить("ТекущийПользователь",        "Пользователи.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "Пользователи.УстановкаПараметровСеанса");
	// Конец Пользователи
	
	// ОценкаПроизводительности
	Обработчики.Вставить("ТекущийЗамерВремени", "ОценкаПроизводительностиВызовСервера.УстановкаПараметровСеанса");
	// Конец ОценкаПроизводительности
	
	Возврат Обработчики;
	
КонецФункции

// Переопределяет массив реквизитов объекта, относительно которых разрешается устанавливать время напоминания.
// Например, можно скрыть те реквизиты с датами, которые являются служебными или не имеют смысла для 
// установки напоминаний: дата документа или задачи и прочие.
// 
// Параметры
//  Источник	 - Любая ссылка - Ссылка на объект, для которого формируется массив реквизитов с датами
//  МассивРеквизитов - Массив - Массив имён реквизитов (из метаданных), содержащих даты
//
Процедура ПриЗаполненииСпискаРеквизитовИсточникаСДатамиДляНапоминания(Источник, МассивРеквизитов) Экспорт
	
	// БизнесПроцессыИЗадачи
	//Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачиПользователя") Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить("СрокИсполнения"); 
		МассивРеквизитов.Добавить("ДатаНачала"); 
	КонецЕсли;
	// Конец БизнесПроцессыИЗадачи
		
	//// ЗаметкиПользователя
	//Если ТипЗнч(Источник) = Тип("СправочникСсылка.Заметки") Тогда
	//	МассивРеквизитов.Очистить();
	//КонецЕсли;
	//// Конец ЗаметкиПользователя
	
КонецПроцедуры

#КонецОбласти
