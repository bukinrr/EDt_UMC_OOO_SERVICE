////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОповещениеПользователя

// Формирует и выводит сообщение, которое может быть связано с элементом управления формы.
//
// См. ОбщегоНазначения.СообщитьПользователю
//
// Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле - Строка - наименование реквизита формы.
//  ПутьКДанным - Строка - путь к данным (путь к реквизиту формы).
//  Отказ - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//  ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ПолеВРеквизитеФормыОбъект",
//   "Объект");
//
//  Альтернативный вариант использования в форме объекта:
//  ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "Объект.ПолеВРеквизитеФормыОбъект");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//  ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ИмяРеквизитаФормы");
//
//  3. Для вывода сообщения связанного с объектом информационной базы:
//  ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы:
//  ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
//  Случаи некорректного использования:
//   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//   2. Передача в параметре КлючДанных значения типа отличного от допустимого.
//   3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщенияПользователю,
		КлючДанных,
		Поле,
		ПутьКДанным,
		Отказ);
	
КонецПроцедуры

// Возвращает код основного языка конфигурации, например "ru".
//
// См. ОбщегоНазначения.КодОсновногоЯзыка
//
// Возвращаемое значение:
//  Строка - код языка.
//
Функция КодОсновногоЯзыка() Экспорт
	
	Возврат СтандартныеПодсистемыКлиент.ПараметрКлиента("КодОсновногоЯзыка");
	
КонецФункции

#КонецОбласти

// Устарела. Следует использовать ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами
// Предлагает пользователю установить расширение для работы с 1С:Предприятием в веб-клиенте.
// Предназначена для использования в начале участков кода, в которых ведется работа с файлами.
//
// Параметры:
//   ОписаниеОповещенияОЗакрытии    - ОписаниеОповещения - описание процедуры,
//                                    которая будет вызвана после закрытия формы со следующими параметрами:
//                                      РасширениеПодключено    - Булево - Истина, если расширение было подключено.
//                                      ДополнительныеПараметры - Произвольный - параметры, заданные в
//                                                                               ОписаниеОповещенияОЗакрытии.
//   ТекстПредложения                - Строка - текст сообщения. Если не указан, то выводится текст по умолчанию.
//   ВозможноПродолжениеБезУстановки - Булево - если Истина, будет показана кнопка ПродолжитьБезУстановки,
//                                              если Ложь, будет показана кнопка Отмена.
//
// Пример:
//
//    Оповещение = Новый ОписаниеОповещения("ПечатьДокументаЗавершение", ЭтотОбъект);
//    ТекстСообщения = НСтр("ru = 'Для печати документа необходимо установить расширение для работы с 1С:Предприятием.'");
//    ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
//
//    Процедура ПечатьДокументаЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
//      Если РасширениеПодключено Тогда
//        // код печати документа, рассчитывающий на то, что расширение подключено.
//        // ...
//      Иначе
//        // код печати документа, который работает без подключенного расширения.
//        // ...
//      КонецЕсли;
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		ОписаниеОповещенияОЗакрытии, 
		ТекстПредложения = "", 
		ВозможноПродолжениеБезУстановки = Истина) Экспорт
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(
		ОписаниеОповещенияОЗакрытии, 
		ТекстПредложения, 
		ВозможноПродолжениеБезУстановки);
	
КонецПроцедуры

// Предлагает пользователю подключить расширение работы с файлами в веб-клиенте,
// и в случае отказа выдает предупреждение о невозможности продолжения операции.
// Предназначена для использования в начале участков кода, в которых ведется работа с файлами
// только при подключенном расширении.
//
// Параметры:
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание процедуры, которая будет вызвана, если расширение
//                                                     подключено со следующими параметрами:
//                                                      Результат               - Булево - всегда Истина.
//                                                      ДополнительныеПараметры - Неопределено
//  ТекстПредложения    - Строка - текст с предложением подключить расширение работы с файлами. 
//                                 Если не указан, то выводится текст по умолчанию.
//  ТекстПредупреждения - Строка - текст предупреждения о невозможности продолжения операции. 
//                                 Если не указан, то выводится текст по умолчанию.
//
// Возвращаемое значение:
//  Булево - Истина, если расширение подключено.
//   
// Пример:
//
//    Оповещение = Новый ОписаниеОповещения("ПечатьДокументаЗавершение", ЭтотОбъект);
//    ТекстСообщения = НСтр("ru = 'Для печати документа необходимо установить расширение работы с файлами.'");
//    ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
//
//    Процедура ПечатьДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
//        // код печати документа, рассчитывающий на то, что расширение подключено.
//        // ...
Процедура ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещенияОЗакрытии, Знач ТекстПредложения = "", 
	Знач ТекстПредупреждения = "") Экспорт
	
	Параметры = Новый Структура("ОписаниеОповещенияОЗакрытии,ТекстПредупреждения", 
		ОписаниеОповещенияОЗакрытии, ТекстПредупреждения, );
	Оповещение = Новый ОписаниеОповещения("ПроверитьРасширениеРаботыСФайламиПодключеноЗавершение",
		ОбщегоНазначенияСлужебныйКлиент, Параметры);
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения);
	
КонецПроцедуры

// Возвращает пользовательскую настройку "Предлагать установку расширения работы с файлами".
//
// Возвращаемое значение:
//  Булево - Истина, если предлагать.
//
Функция ПредлагатьУстановкуРасширенияРаботыСФайлами() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	Возврат ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Истина);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции работы со списками в формах.

// Проверяет, что в параметре команды Параметр передан объект ожидаемого типа ОжидаемыйТип.
// В противном случае, выдает стандартное сообщение и возвращает Ложь.
// Такая ситуация возможна, например, если в списке выделена строка группировки.
//
// Для использования в командах, работающих с элементами динамических списков в формах.
// Пример использования:
// 
//   Если НЕ ПроверитьТипПараметраКоманды(Элементы.Список.ВыделенныеСтроки, 
//      Тип("ЗадачаСсылка.ЗадачаИсполнителя")) Тогда
//      Возврат;
//   КонецЕсли;
//   ...
// 
// Параметры:
//  Параметр     - Массив из Тип, или ссылочный тип - параметр команды.
//  ОжидаемыйТип - Тип                      - ожидаемый тип параметра.
//
// Возвращаемое значение:
//  Булево - Истина, если параметр ожидаемого типа.
//
Функция ПроверитьТипПараметраКоманды(Знач Параметр, Знач ОжидаемыйТип) Экспорт
	
	Если Параметр = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		// Если в массиве один элемент и он неправильного типа...
		Результат = НЕ (Параметр.Количество() = 1 И ТипЗнч(Параметр[0]) <> ОжидаемыйТип);
	Иначе
		Результат = ТипЗнч(Параметр) = ОжидаемыйТип;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры общего назначения.

// Открывает форму редактирования произвольного многострочного текста.
//
// Параметры:
//  ОповещениеОЗакрытии     - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана 
//                            после закрытия формы ввода текста с теми же параметрами, что и для метода
//                            ПоказатьВводСтроки.
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать;
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//
// Пример:
//
//   Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект);
//   ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования);
//
//   &НаКлиенте
//   Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
//      Если ВведенныйТекст = Неопределено Тогда
//		   Возврат;
//   	КонецЕсли;	
//	
//	   Объект.МногострочныйКомментарий = ВведенныйТекст;
//	   Модифицированность = Истина;
//   КонецПроцедуры
//
Процедура ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, 
	Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст,,, Истина);
	Иначе
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования многострочного комментария.
//
// Параметры:
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
//  ФормаВладелец           - УправляемаяФорма - форма, в поле которой выполняется ввод комментария.
//  ИмяРеквизита            - Строка - имя реквизита формы, в который будет помещен введенный пользователем
//                                     комментарий.
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//                                     По умолчанию: "Комментарий".
//
// Пример:
//  ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
//
Процедура ПоказатьФормуРедактированияКомментария(Знач МногострочныйТекст, Знач ФормаВладелец, Знач ИмяРеквизита, 
	Знач Заголовок = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ФормаВладелец, ИмяРеквизита);
	Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", 
		ОбщегоНазначенияСлужебныйКлиент, ДополнительныеПараметры);
	ЗаголовокФормы = ?(Заголовок <> Неопределено, Заголовок, НСтр("ru='Комментарий'"));
	ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, МногострочныйТекст, ЗаголовокФормы);
	
КонецПроцедуры

// Процедура ПреобразоватьЗимнееВремяКТекущему изменяет переданное
// значение времени в местное время из зимнего к текущему с учетом NTFS коррекции.
//
// Параметры:
//  ДатаВремя    - Дата, преобразуемое время.
//
// Возвращаемое значение:
//  Дата - преобразованное время.
//
Процедура ПреобразоватьЗимнееВремяКТекущему(ДатаВремя) Экспорт
	
	ДатаВремя = МестноеВремя(ДатаВремя);
	
КонецПроцедуры

// Предлагает пользователю установить расширение работы с файлами в веб-клиенте.
// При этом инициализирует параметр сеанса ПредлагатьУстановкуРасширенияРаботыСФайлами.
//
// Предназначена для использования в начале участков кода, в которых ведется работа с файлами.
// Например:
//
//    ПредложитьУстановкуРасширенияРаботыСФайлами("Для печати документа необходимо установить расширение работы с
//    файлами."); далее располагается код печати документа
//    // ...
//
// Параметры:
//  ТекстПредложения - Строка - текст сообщения. Если не указан, то выводится текст по умолчанию.
//   
// Возвращаемое значение:
//  Строка - возможные значения:
//           Подключено                - расширение подключено.
//           НеПодключено              - пользователь отказался от подключения.
//           НеподдерживаемыйВебКлиент - расширение не может быть подключено, так как не поддерживается в Веб-клиенте.
//
Функция ПредложитьУстановкуРасширенияРаботыСФайлами(ТекстПредложения = Неопределено) Экспорт
	
#Если ВебКлиент Или МобильныйКлиент Тогда
	
	ПредлагатьУстановкуРасширенияРаботыСФайлами = Неопределено;
		
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		Возврат "Подключено"; // Если расширение и так уже есть, незачем про него спрашивать.
	КонецЕсли;
	
	Если ЭтоВебКлиентБезПоддержкиРасширенияРаботыСФайлами() Тогда
		Возврат "НеподдерживаемыйВебКлиент";
	КонецЕсли;
	
	ПервоеОбращениеЗаСеанс = Ложь;
	
	Если ПредлагатьУстановкуРасширенияРаботыСФайлами = Неопределено Тогда
		
		ПервоеОбращениеЗаСеанс = Истина;
		ПредлагатьУстановкуРасширенияРаботыСФайлами = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", 
			"ПредлагатьУстановкуРасширенияРаботыСФайлами");
		Если ПредлагатьУстановкуРасширенияРаботыСФайлами = Неопределено Тогда
			ПредлагатьУстановкуРасширенияРаботыСФайлами = Истина;
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПредлагатьУстановкуРасширенияРаботыСФайлами", 
				ПредлагатьУстановкуРасширенияРаботыСФайлами);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредлагатьУстановкуРасширенияРаботыСФайлами = Ложь Тогда
		Возврат ?(РасширениеПодключено, "Подключено", "НеПодключено");
	КонецЕсли;
	
	Если ПервоеОбращениеЗаСеанс Тогда
		ПараметрыФормы = Новый Структура("Сообщение", ТекстПредложения);
		КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы);
		Если КодВозврата = Неопределено Тогда
			КодВозврата = Истина;
		КонецЕсли;
		
		ПредлагатьУстановкуРасширенияРаботыСФайлами = КодВозврата;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПредлагатьУстановкуРасширенияРаботыСФайлами", 
			ПредлагатьУстановкуРасширенияРаботыСФайлами);
	КонецЕсли;
	Возврат ?(ПодключитьРасширениеРаботыСФайлами(), "Подключено", "НеПодключено");
	
#Иначе
	Возврат "Подключено";
#КонецЕсли
	
КонецФункции

// Возвращает Истина, если этот веб клиент не поддерживает расширение работы с файлами.
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоВебКлиентБезПоддержкиРасширенияРаботыСФайлами() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	
	Если Найти(СистемнаяИнфо.ИнформацияПрограммыПросмотра, "Safari") <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Найти(СистемнаяИнфо.ИнформацияПрограммыПросмотра, "Chrome") <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Предлагает пользователю подключить расширение работы с файлами в веб-клиенте,
// и в случае отказа выдает предупреждение о невозможности продолжения операции.
//
// Предназначена для использования в начале участков кода, в которых ведется работа с файлами
// только при подключенном расширении.
// Например:
//
//    Если Не РасширениеРаботыСФайламиПодключено("Для печати документа необходимо установить расширение работы с
//    файлами.") Тогда
//      Возврат;
//    КонецЕсли; 
//    // далее располагается код печати документа
//    // ...
//
// Параметры:
//  ТекстПредложения    - Строка - текст с предложением подключить расширение работы с файлами. 
//                                 Если не указан, то выводится текст по умолчанию.
//  ТекстПредупреждения - Строка - текст предупреждения о невозможности продолжения операции. 
//                                 Если не указан, то выводится текст по умолчанию.
//
// Возвращаемое значение:
//  Булево - Истина, если расширение подключено.
//
Функция РасширениеРаботыСФайламиПодключено(ТекстПредложения = Неопределено, ТекстПредупреждения = Неопределено) Экспорт
	
	Результат = ПредложитьУстановкуРасширенияРаботыСФайлами(ТекстПредложения);
	ТекстСообщения = "";
	Если Результат = "НеПодключено" Тогда
		Если ТекстПредупреждения <> Неопределено Тогда
			ТекстСообщения = ТекстПредупреждения;
		Иначе
			ТекстСообщения = НСтр("ru = 'Действие недоступно, так как не подключено расширение работы с файлами в Веб-клиенте.'")
		КонецЕсли;
	ИначеЕсли Результат = "НеподдерживаемыйВебКлиент" Тогда
		ТекстСообщения = НСтр("ru = 'Действие недоступно в используемом Веб-клиенте, так как для него не может быть подключено расширение работы с файлами.'");
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Предупреждение(ТекстСообщения);
	КонецЕсли;
	Возврат Результат = "Подключено";
	
КонецФункции

// Выполняет регистрацию компоненты "comcntr.dll" для текущей версии платформы.
// В случае успешной регистрации, предлагает пользователю перезапустить клиентский сеанс 
// для того чтобы регистрация вступила в силу.
//
// Вызывается перед клиентским кодом, который использует менеджер COM-соединений (V82.COMConnector)
// и инициируется интерактивными действиями пользователя. Например:
// 
// ЗарегистрироватьCOMСоединитель();
//   // далее идет код, использующий менеджер COM-соединений (V82.COMConnector)
//   // ...
//
// Параметры:
//  ВыполнитьПерезагрузкуСеанса - Булево - По умолчанию Ложь
//
Процедура ЗарегистрироватьCOMСоединитель(Знач ВыполнитьПерезагрузкуСеанса = Ложь) Экспорт
	
#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
	
	ТекстКоманды = "regsvr32.exe /n /i:user /s comcntr.dll";
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(ТекстКоманды, КаталогПрограммы(), Истина, КодВозврата);
	
	Если КодВозврата = Неопределено Или КодВозврата > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при регистрации компоненты comcntr.'") + Символы.ПС
			+ НСтр("ru = 'Код ошибки regsvr32:'") + " " + КодВозврата;
			
		Если КодВозврата = 5 Тогда
			ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'Недостаточно прав доступа.'");
		КонецЕсли;
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Регистрация компоненты comcntr'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", ТекстСообщения);
		ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + Символы.ПС + НСтр("ru = 'Подробности см. в Журнале регистрации.'"));
		
	ИначеЕсли ВыполнитьПерезагрузкуСеанса Тогда
		
		ТекстВопроса = НСтр("ru = 'Для завершения перерегистрации компоненты comcntr необходимо перезапустить программу.
			|Перезапустить сейчас?'");
			
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
			ЗавершитьРаботуСистемы(Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
#КонецЕсли
	 
КонецПроцедуры

#Область УсловныеВызовы

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для вызова необязательных подсистем.

// Возвращает Истина, если функциональная подсистема существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// Возвращаемое значение:
//  Булево - Истина, если существует.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ПодсистемыКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ИменаПодсистем = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске().ИменаПодсистем;
		ПараметрыПриложения.Вставить(ИмяПараметра, ИменаПодсистем);
	КонецЕсли;
	ИменаПодсистем = ПараметрыПриложения[ИмяПараметра];
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;

КонецФункции

// Возвращает ссылку на общий модуль или модуль менеджера по имени.
//
// См. ОбщегоНазначения.ОбщийМодуль
//
// Параметры:
//  Имя - Строка - имя общего модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль, МодульМенеджераОбъекта - общий модуль.
//
// Пример:
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
//		МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");
//		МодульОбновлениеКонфигурации.<Имя метода>();
//	КонецЕсли;
//
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
//		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
//		МодульПолнотекстовыйПоискСервер.<Имя метода>();
//	КонецЕсли;
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
#Если Не ВебКлиент Тогда
	
	// В веб-клиенте не проверяется
	// т.к. при обращении к модулям с вызовом сервера типа такого модуля в веб-клиенте не существует.
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Общий модуль ""%1"" не существует.'"), 
			Имя);
	КонецЕсли;
	
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

#КонецОбласти

#Область ТекущееОкружение

////////////////////////////////////////////////////////////////////////////////
// Функции описания текущего окружения клиентского приложения и операционной системы.

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
//
// См. ОбщегоНазначения.ЭтоWindowsКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоWindowsКлиент() Экспорт
	
	ТипПлатформыКлиента = ТипПлатформыКлиента();
	Возврат ТипПлатформыКлиента = ТипПлатформы.Windows_x86
		Или ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64;
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Linux.
//
// См. ОбщегоНазначения.ЭтоLinuxКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоLinuxКлиент() Экспорт
	
	ТипПлатформыКлиента = ТипПлатформыКлиента();
	Возврат ТипПлатформыКлиента = ТипПлатформы.Linux_x86
		Или ТипПлатформыКлиента = ТипПлатформы.Linux_x86_64;
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением macOS.
//
// См. ОбщегоНазначения.ЭтоMacOSКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоMacOSКлиент() Экспорт
	
	ТипПлатформыКлиента = ТипПлатформыКлиента();
	Возврат ТипПлатформыКлиента = ТипПлатформы.MacOS_x86
		Или ТипПлатформыКлиента = ТипПлатформы.MacOS_x86_64;
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением ОС X.
//
// См. ОбщегоНазначения.ЭтоOSXКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоOSXКлиент() Экспорт
	
	ТипПлатформыКлиента = ТипПлатформыКлиента();
	Возврат ТипПлатформыКлиента = ТипПлатформы.MacOS_x86
		Или ТипПлатформыКлиента = ТипПлатформы.MacOS_x86_64;
	
КонецФункции

// Возвращает Истина, если клиентское приложение подключено к базе через веб-сервер.
//
// См. ОбщегоНазначения.КлиентПодключенЧерезВебСервер
//
// Возвращаемое значение:
//  Булево - Истина, если подключен.
//
Функция КлиентПодключенЧерезВебСервер() Экспорт
	
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()), "WS=") = 1;
	
КонецФункции

// Возвращает Истина, если включен режим отладки.
//
// См. ОбщегоНазначения.РежимОтладки
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим отладки.
//
Функция РежимОтладки() Экспорт
	
	Возврат СтрНайти(ПараметрЗапуска, "РежимОтладки") > 0;
	
КонецФункции

// Возвращает объем оперативной памяти, доступной клиентскому  приложению.
//
// См. ОбщегоНазначения.ОперативнаяПамятьДоступнаяКлиентскомуПриложению
//
// Возвращаемое значение:
//  Число - количество гигабайтов оперативной памяти с точностью до десятых долей.
//  Неопределено - нет клиентского приложения, то есть ТекущийРежимЗапуска() = Неопределено.
//
Функция ОперативнаяПамятьДоступнаяКлиентскомуПриложению() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат Окр(СистемнаяИнформация.ОперативнаяПамять / 1024, 1);
	
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// См. ОбщегоНазначения.ИнформационнаяБазаФайловая
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	
	Если Не ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	КонецЕсли;
	
	Возврат СтандартныеПодсистемыКлиент.ПараметрКлиента("ИнформационнаяБазаФайловая");
	
КонецФункции

// Возвращает тип платформы клиента.
//
// Возвращаемое значение:
//  ТипПлатформы, Неопределено - тип платформы на которой запущен клиент. В режиме веб-клиента, если тип 
//                               платформы иной, чем описан в типе ТипПлатформы, то возвращается Неопределено.
//
Функция ТипПлатформыКлиента() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы
	
КонецФункции

#КонецОбласти

#Область Данные

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для работы с прикладными типами и коллекциями значений.

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно,
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// См. ОбщегоНазначения.СкопироватьРекурсивно
//
// Параметры:
//  Источник - Структура, ФиксированнаяСтруктура,
//             Соответствие, ФиксированноеСоответствие,
//             Массив, ФиксированныйМассив,
//             СписокЗначений - объект, который необходимо скопировать.
//  ФиксироватьДанные - Булево, Неопределено - если Истина - фиксировать,
//                          если Ложь - снять фиксацию, если Неопределено - не изменять.
//
// Возвращаемое значение:
//  Структура - , ФиксированнаяСтруктура,
//  Соответствие, ФиксированноеСоответствие,
//  Массив, ФиксированныйМассив,
//  СписокЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		Приемник = ОбщегоНазначенияСлужебныйКлиент.СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда
		Приемник = ОбщегоНазначенияСлужебныйКлиент.СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда
		Приемник = ОбщегоНазначенияСлужебныйКлиент.СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = ОбщегоНазначенияСлужебныйКлиент.СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Формы

////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры общего назначения для работы в формами.

// Задает вопрос о продолжении действия, которое приведет к потере изменений:
// "Данные были изменены. Сохранить изменения?".
// Для использования в обработчиках события ПередЗакрытием модулей форм объектов,
// которые возможно записать в информационную базу.
// Отображение вопроса зависит свойства модифицированности формы.
// Для отображения вопроса произвольной формы используйте: 
//  см. процедуру ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы().
//
// Параметры:
//  ОповещениеСохранитьИЗакрыть  - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку "OK".
//  Отказ                        - Булево - возвращаемый параметр, признак отказа от выполняемого действия.
//  ЗавершениеРаботы             - Булево - признак того, что форма закрывается в процессе завершения работы приложения.
//  ТекстПредупреждения          - Строка - текст предупреждения, выводимый пользователю. По умолчанию, выводится текст
//                                          "Данные были изменены. Сохранить изменения?".
//  ТекстПредупрежденияПриЗавершении - Строка - возвращаемый параметр с текстом предупреждения, выводимым пользователю 
//                                          при завершении приложения. Если параметр указан, то возвращается текст
//                                          "Данные были изменены. Все изменения будут потеряны.".
//
// Пример:
//
//  &НаКлиенте
//  Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
//    Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
//    ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
//  КонецПроцедуры
//  
//  &НаКлиенте
//  Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
//     // записываем данные формы.
//     // ...
//     Модифицированность = Ложь; // не выводить подтверждение о закрытии формы еще раз.
//     Закрыть(<РезультатВыбораВФорме>);
//  КонецПроцедуры
//
Процедура ПоказатьПодтверждениеЗакрытияФормы(
		Знач ОповещениеСохранитьИЗакрыть, 
		Отказ, 
		Знач ЗавершениеРаботы, 
		Знач ТекстПредупреждения = "", 
		ТекстПредупрежденияПриЗавершении = Неопределено) Экспорт
	
	Форма = ОповещениеСохранитьИЗакрыть.Модуль;
	Если Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗавершениеРаботы Тогда
		Если ТекстПредупрежденияПриЗавершении = "" Тогда // Передан параметр из ПередЗакрытием.
			ТекстПредупрежденияПриЗавершении = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("ОповещениеСохранитьИЗакрыть", ОповещениеСохранитьИЗакрыть);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	
	ТекущиеПараметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	Если ТекущиеПараметры <> Неопределено
	   И ТекущиеПараметры.ОповещениеСохранитьИЗакрыть.Модуль = Параметры.ОповещениеСохранитьИЗакрыть.Модуль Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;
	
	Форма.Активизировать();
	ПодключитьОбработчикОжидания("ПодтвердитьЗакрытиеФормыСейчас", 0.1, Истина);
	
КонецПроцедуры

// Задает вопрос о продолжении действия, которое приведет к закрытию формы.
// Для использования в обработчиках события ПередЗакрытием модулей форм.
// Для отображения вопроса в форме, которая  возможно записать в информационную базу, используйте: 
//  см. процедуру ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы().
//
// Параметры:
//  Форма                        - УправляемаяФорма - форма, которая вызывает диалог предупреждения.
//  Отказ                        - Булево - возвращаемый параметр, признак отказа от выполняемого действия.
//  ЗавершениеРаботы             - Булево - признак завершения работы программы.
//  ТекстПредупреждения          - Строка - текст предупреждения, выводимый пользователю.
//  ИмяРеквизитаЗакрытьФормуБезПодтверждения - Строка - имя реквизита, содержащего в себе признак того, нужно
//                                 выводить предупреждение или нет.
//  ОписаниеОповещенияЗакрыть    - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку "Да".
//
// Пример: 
//  ТекстПредупреждения = НСтр("ru = 'Закрыть помощник?'");
//  ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
//      ЭтотОбъект, Отказ, ТекстПредупреждения, "ЗакрытьФормуБезПодтверждения");
//
Процедура ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		Знач Форма, 
		Отказ, 
		Знач ЗавершениеРаботы, 
		Знач ТекстПредупреждения, 
		Знач ИмяРеквизитаЗакрытьФормуБезПодтверждения, 
		Знач ОписаниеОповещенияЗакрыть = Неопределено) Экспорт
		
	Если Форма[ИмяРеквизитаЗакрытьФормуБезПодтверждения] Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	Параметры.Вставить("ИмяРеквизитаЗакрытьФормуБезПодтверждения", ИмяРеквизитаЗакрытьФормуБезПодтверждения);
	Параметры.Вставить("ОписаниеОповещенияЗакрыть", ОписаниеОповещенияЗакрыть);
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;
	
	ПодключитьОбработчикОжидания("ПодтвердитьЗакрытиеПроизвольнойФормыСейчас", 0.1, Истина);
	
КонецПроцедуры

// Обновляет интерфейс программы сохраняя текущее активное окно.
//
Процедура ОбновитьИнтерфейсПрограммы() Экспорт
	
	ТекущееАктивноеОкно = АктивноеОкно();
	ОбновитьИнтерфейс();
	Если ТекущееАктивноеОкно <> Неопределено Тогда
		ТекущееАктивноеОкно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

// Оповещает открытые формы и динамические списки об изменении одного объекта.
//
// Параметры:
//  Источник - ЛюбаяСсылка,
//             РегистрСведенийКлючЗаписи,
//             РегистрНакопленияКлючЗаписи,
//             РегистрБухгалтерииКлючЗаписи,
//             РегистрРасчетаКлючЗаписи - ссылка измененного объекта или ключ измененной записи регистра, об изменении 
//                                        которой(го) необходимо уведомить динамические списки и формы.
//  ДополнительныеПараметры - Произвольный - любые параметры, которые необходимо передать в методе Оповестить.
//
Процедура ОповеститьОбИзмененииОбъекта(Источник, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Оповестить("Запись_" + ОбщегоНазначенияСлужебныйКлиент.ИмяОбъектаМетаданных(ТипЗнч(Источник)), ДополнительныеПараметры, Источник);
	ОповеститьОбИзменении(Источник);
КонецПроцедуры

// Оповещает открытые формы и динамические списки об изменении сразу нескольких объектов.
//
// Параметры:
//  Источник - Тип, ОписаниеТипов - тип или типы объектов, об изменении которых необходимо уведомить 
//                                  динамические списки и формы;
//           - Массив - список измененных ссылок и/или ключей записей регистров, об изменении 
//                      которых необходимо уведомить динамические списки и формы.
//  ДополнительныеПараметры - Произвольный - любые параметры, которые необходимо передать в методе Оповестить.
//
Процедура ОповеститьОбИзмененииОбъектов(Источник, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("Тип") Тогда
		ОповеститьОбИзменении(Источник);
		Оповестить("Запись_" + ОбщегоНазначенияСлужебныйКлиент.ИмяОбъектаМетаданных(Источник), ДополнительныеПараметры);
	ИначеЕсли ТипЗнч(Источник) = Тип("ОписаниеТипов") Тогда
		Для Каждого Тип Из Источник.Типы() Цикл
			ОповеститьОбИзменении(Тип);
			Оповестить("Запись_" + ОбщегоНазначенияСлужебныйКлиент.ИмяОбъектаМетаданных(Тип), ДополнительныеПараметры);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("Массив") Тогда
		Если Источник.Количество() = 1 Тогда
			ОповеститьОбИзмененииОбъекта(Источник[0], ДополнительныеПараметры);
		Иначе
			ОповещаемыеТипы = Новый Соответствие;
			Для Каждого Ссылка Из Источник Цикл
				ОповещаемыеТипы.Вставить(ТипЗнч(Ссылка));
			КонецЦикла;
			Для Каждого Тип Из ОповещаемыеТипы Цикл
				ОповеститьОбИзменении(Тип.Ключ);
				Оповестить("Запись_" + ОбщегоНазначенияСлужебныйКлиент.ИмяОбъектаМетаданных(Тип.Ключ), ДополнительныеПараметры);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗапускВнешнихПриложений

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с внешними приложениями.

// Открывает проводник с указанным путем.
// Если передан путь к файлу, то выполняет позиционирование курсора в проводнике на этом файле.
//
// Параметры:
//  ПутьККаталогуИлиФайлу - Строка - полный путь к файлу или каталогу на диске.
//
// Пример:
//  // Для Windows
//  ОбщегоНазначенияКлиент.ОткрытьПроводник("C:\Users");
//  ОбщегоНазначенияКлиент.ОткрытьПроводник("C:\Program Files\1cv8\common\1cestart.exe");
//  // Для Linux
//  ОбщегоНазначенияКлиент.ОткрытьПроводник("/home/");
//  ОбщегоНазначенияКлиент.ОткрытьПроводник("/opt/1C/v8.3/x86_64/1cv8c");
//
Процедура ОткрытьПроводник(ПутьККаталогуИлиФайлу) Экспорт
	
	ФайлИнфо = Новый Файл(ПутьККаталогуИлиФайлу);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ФайлИнфо", ФайлИнфо);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПроводникПослеПроверкиРасширенияРаботыСФайлами",
		ОбщегоНазначенияСлужебныйКлиент, Контекст);
		
	ТекстПредложения = НСтр("ru = 'Для открытия папки необходимо установить расширение работы с файлами.'");
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

// Открывает файл в программе просмотра, ассоциированной с расширением файла в операционной системе.
// Блокирует возможность открытия файлов, расширение которых относятся к исполняемым файлам.
//
// Параметры:
//  ПутьКФайлу - Строка - полный путь к файлу на диске, который требуется открыть.
//  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
//                            - Если оповещение не задано - в случае ошибки будет показано предупреждение.
//      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
// Пример:
//  ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(КаталогДокументов() + "test.pdf");
//  ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(КаталогДокументов() + "test.xlsx");
//
Процедура ОткрытьФайлВПрограммеПросмотра(ПутьКФайлу, Знач Оповещение = Неопределено) Экспорт
	
	ФайлИнфо = Новый Файл(ПутьКФайлу);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ФайлИнфо", ФайлИнфо);
	Контекст.Вставить("Оповещение", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФайлВПрограммеПросмотраПослеПроверкиРасширенияРаботыСФайлами",
		ОбщегоНазначенияСлужебныйКлиент, Контекст);
	
	ТекстПредложения = НСтр("ru = 'Для открытия файла необходимо установить расширение работы с файлами.'");
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

// Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.
//
// Допустимые протоколы: http, https, e1c, v8help, mailto, tel, skype.
//
// Для открытия проводника или файла в программе просмотра не следует формировать ссылку по протоколу file://
// - для открытия проводника см. ОткрытьПроводник.
// - Для открытия файла по расширению см. ОткрытьФайлВПрограммеПросмотра.
//
// Параметры:
//  НавигационнаяСсылка - Строка - ссылка, которую требуется открыть.
//  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
//                            - Если оповещение не задано - в случае ошибки будет показано предупреждение.
//      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
// Пример:
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/startpage"); // начальная страница.
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("v8help://1cv8/QueryLanguageFullTextSearchInData");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("mailto:help@1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("skype:echo123?call");
//
Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("НавигационнаяСсылка", НавигационнаяСсылка);
	Контекст.Вставить("Оповещение", Оповещение);
	
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось перейти по ссылке ""%1"" по причине: 
			           |Неверно задана навигационная ссылка.'"),
			НавигационнаяСсылка);
	
	Если Не ОбщегоНазначенияСлужебныйКлиент.ЭтоДопустимаяСсылка(НавигационнаяСсылка) Тогда 
		ОбщегоНазначенияСлужебныйКлиент.ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияСлужебныйКлиент.ЭтоВебСсылка(НавигационнаяСсылка)
		Или ОбщегоНазначенияСлужебныйКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда 
		
		Попытка
		
#Если ТолстыйКлиентОбычноеПриложение Тогда
			ЗапуститьПриложение(НавигационнаяСсылка);
#Иначе
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
#КонецЕсли
		
		Исключение
			ОбщегоНазначенияСлужебныйКлиент.ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
			Возврат;
		КонецПопытки;
		
		Если Оповещение <> Неопределено Тогда 
			ПриложениеЗапущено = Истина;
			ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияСлужебныйКлиент.ЭтоСсылкаНаСправку(НавигационнаяСсылка) Тогда 
		ОткрытьСправку(НавигационнаяСсылка);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами",
		ОбщегоНазначенияСлужебныйКлиент, Контекст);
		
	ТекстПредложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для открытия ссылки ""%1"" необходимо установить расширение работы с файлами.'"),
		НавигационнаяСсылка);
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

// Возвращает структуру параметров для см. процедуру ЗапуститьПрограмму.
//
// Возвращаемое значение:
//  ТекущийКаталог              - Строка - Задает текущий каталог запускаемого приложения.
//  Оповещение                  - Булево - ОписаниеОповещения, Неопределено - оповещение о результате 
//                                         завершения запущенного приложения.
//                                         Если оповещение не задано - в случае ошибки будет показано предупреждение.
//      * Результат             - Структура - Результат работы программы.
//          ** ПриложениеЗапущено - Булево - Истина, если внешнее приложение не вызвало ошибок при открытии.
//          ** ОписаниеОшибки     - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
//          ** КодВозврата        - Число  - код возврата программы.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Функция ПараметрыЗапускаПрограммы() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийКаталог", "");
	Параметры.Вставить("Оповещение", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Запускает внешнюю программу в соответствии с параметрами запуска.
//
// Для переводчиков: RunApplication.
//
// Параметры:
//  СтрокаКоманды             - Строка                  - Командная строка для запуска программы.
//  ПараметрыЗапускаПрограммы - Структура, Неопределено - см. функцию ПараметрыЗапускаПрограммы.
//
// Пример:
//
//
Процедура ЗапуститьПрограмму(Знач СтрокаКоманды, ПараметрыЗапускаПрограммы = Неопределено) Экспорт
	
	Если ПараметрыЗапускаПрограммы = Неопределено Тогда 
		ПараметрыЗапускаПрограммы = ПараметрыЗапускаПрограммы();
	КонецЕсли;
	
	ТекущийКаталог      = ПараметрыЗапускаПрограммы.ТекущийКаталог;
	Оповещение          = ПараметрыЗапускаПрограммы.Оповещение;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СтрокаКоманды", СтрокаКоманды);
	Контекст.Вставить("ТекущийКаталог", ТекущийКаталог);
	Контекст.Вставить("Оповещение", Оповещение);
	
	Если ОбщегоНазначенияСлужебныйКлиент.СодержитНебезопасныеДействия(СтрокаКоманды) Тогда 
		ОписаниеОшибки =
			НСтр("ru = 'Недопустимое значение параметра СтрокаКоманды.
			           |Строка команды не должна содержать  символы: ""$"", ""`"", ""|"", "";"", ""&"".'");
		
		ОбщегоНазначенияСлужебныйКлиент.ЗапуститьПрограммуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапуститьПрограммуПослеПроверкиРасширенияРаботыСФайлами",
		ОбщегоНазначенияСлужебныйКлиент, Контекст);
		
	ТекстПредложения = НСтр("ru = 'Для создания временного каталога необходимо установить расширение работы с файлами.'");
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ВнешниеКомпоненты

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для подключения и установки внешних компонент из макетов конфигурации.

// Возвращает структуру параметров для см. процедуру ПодключитьКомпонентуИзМакета.
//
// Возвращаемое значение:
//  Структура - коллекция параметров:
//      * Кэшировать           - Булево - (по умолчанию Истина) использовать механизм кэширования компонент на клиенте.
//      * ПредложитьУстановить - Булево - (по умолчанию Истина) предлагать устанавливать и обновлять компоненту.
//      * ТекстПояснения       - Строка - для чего нужна компонента и что не будет работать, если ее не устанавливать.
//      * ИдентификаторыСозданияОбъектов - Массив - идентификатор создания экземпляра модуля объекта,
//                 используется только для компонент, у которых есть несколько идентификаторов создания объектов,
//                 при задании параметр Идентификатор будет игнорироваться.
//
// Пример:
//
//  ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
//  ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для использования сканера штрихкодов требуется
//                                             |внешняя компонента «1С:Сканеры штрихкода (NativeApi)».'");
//
Функция ПараметрыПодключенияКомпоненты() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Кэшировать", Истина);
	Параметры.Вставить("ПредложитьУстановить", Истина);
	Параметры.Вставить("ТекстПояснения", "");
	Параметры.Вставить("ИдентификаторыСозданияОбъектов", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Подключает компоненту, выполненную по технологии Native API и COM, в асинхронном режиме.
// Компонента должна храниться в макете конфигурации в виде ZIP-архива.
// Для веб-клиента предлагается диалог, подсказывающий пользователю действия по установке.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - описание оповещения о подключении со следующими параметрами:
//      * Результат - Структура - результат подключения компоненты:
//          ** Подключено         - Булево - признак подключения.
//          ** ПодключаемыйМодуль - AddIn  - экземпляр объекта внешней компоненты;
//                                - ФиксированноеСоответствие - экземпляры объектов внешней компоненты, 
//                                     указанные в ПараметрыПодключения.ИдентификаторыСозданияОбъектов,
//                                     Ключ - Идентификатор, Значение - экземпляр объекта.
//          ** ОписаниеОшибки     - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//  Идентификатор        - Строка                  - идентификатор объекта внешней компоненты.
//  ПолноеИмяМакета      - Строка                  - полное имя макета, используемое как местоположение компоненты.
//  ПараметрыПодключения - Структура, Неопределено - см. функцию ПараметрыПодключенияКомпоненты.
//
// Пример:
//
//  Оповещение = Новый ОписаниеОповещения("ПодключитьКомпонентуЗавершение", ЭтотОбъект);
//
//  ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
//  ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для оформления заявления на выпуск сертификата требуется
//                                             |внешняя компонента «Криптография (CryptS)».'");
//
//  ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(Оповещение, 
//      "CryptS",
//      "Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена",
//      ПараметрыПодключения);
//
//  &НаКлиенте
//  Процедура ПодключитьКомпонентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
//
//      ПодключаемыйМодуль = Неопределено;
//
//      Если Результат.Подключено Тогда 
//          ПодключаемыйМодуль = Результат.ПодключаемыйМодуль;
//      Иначе
//          Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
//              ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
//          КонецЕсли;
//      КонецЕсли;
//
//      Если ПодключаемыйМодуль <> Неопределено Тогда 
//          // ПодключаемыйМодуль содержит созданный экземпляр подключенной компоненты.
//      КонецЕсли;
//
//      ПодключаемыйМодуль = Неопределено;
//
//  КонецПроцедуры
//
Процедура ПодключитьКомпонентуИзМакета(Оповещение, Идентификатор, ПолноеИмяМакета,
	ПараметрыПодключения = Неопределено) Экспорт
	
	Параметры = ПараметрыПодключенияКомпоненты();
	Если ПараметрыПодключения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ПараметрыПодключения);
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("Идентификатор", Идентификатор);
	Контекст.Вставить("Местоположение", ПолноеИмяМакета);
	Контекст.Вставить("Кэшировать", Параметры.Кэшировать);
	Контекст.Вставить("ПредложитьУстановить", Параметры.ПредложитьУстановить);
	Контекст.Вставить("ТекстПояснения", Параметры.ТекстПояснения);
	Контекст.Вставить("ИдентификаторыСозданияОбъектов", Параметры.ИдентификаторыСозданияОбъектов);
	
	ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпоненту(Контекст);
	
КонецПроцедуры

// Возвращает структуру параметров для см. процедуру УстановитьКомпонентуИзМакета.
//
// Возвращаемое значение:
//  Структура - коллекция параметров:
//      * ТекстПояснения - Строка - для чего нужна компонента и что не будет работать, если ее не устанавливать.
//
// Пример:
//
//  ПараметрыУстановки = ОбщегоНазначенияКлиент.ПараметрыУстановкиКомпоненты();
//  ПараметрыУстановки.ТекстПояснения = НСтр("ru = 'Для использования сканера штрихкодов требуется
//                                           |внешняя компонента «1С:Сканеры штрихкода (NativeApi)».'");
//
Функция ПараметрыУстановкиКомпоненты() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстПояснения", "");
	
	Возврат Параметры;
	
КонецФункции

// Устанавливает компоненту, выполненную по технологии Native API и COM асинхронном режиме.
// Компонента должна храниться в макете конфигурации в виде ZIP-архива.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - описание оповещения об установке внешней компоненты:
//      * Результат - Структура - результат установки компоненты:
//          ** Установлено    - Булево - признак установки.
//          ** ОписаниеОшибки - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПолноеИмяМакета    - Строка                  - полное имя макета, используемое как местоположение компоненты.
//  ПараметрыУстановки - Структура, Неопределено - см. функцию ПараметрыУстановкиКомпоненты.
//
// Пример:
//
//  Оповещение = Новый ОписаниеОповещения("УстановитьКомпонентуЗавершение", ЭтотОбъект);
//
//  ПараметрыУстановки = ОбщегоНазначенияКлиент.ПараметрыУстановкиКомпоненты();
//  ПараметрыУстановки.ТекстПояснения = НСтр("ru = 'Для оформления заявления на выпуск сертификата требуется
//                                           |внешняя компонента «Криптография (CryptS)».'");
//
//  ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(Оповещение,
//      "Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена",
//      ПараметрыУстановки);
//
//  &НаКлиенте
//  Процедура УстановитьКомпонентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
//
//      Если Не Результат.Установлено И Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда 
//          ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
//      КонецЕсли;
//
//  КонецПроцедуры
//
Процедура УстановитьКомпонентуИзМакета(Оповещение, ПолноеИмяМакета, ПараметрыУстановки = Неопределено) Экспорт
	
	Параметры = ПараметрыУстановкиКомпоненты();
	Если ПараметрыУстановки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ПараметрыУстановки);
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("Местоположение", ПолноеИмяМакета);
	Контекст.Вставить("ТекстПояснения", Параметры.ТекстПояснения);
	
	ОбщегоНазначенияСлужебныйКлиент.УстановитьКомпоненту(Контекст);
	
КонецПроцедуры

// Результат установки компоненты.
//
Функция РезультатУстановкиКомпоненты() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Установлено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Возврат Результат;
	
КонецФункции

Процедура УстановитьКомпонентуИзМакетаЗавершение(ДополнительныеПараметры) Экспорт
	
	РезультатУстановки = РезультатУстановкиКомпоненты();
	РезультатУстановки.Установлено = Истина;
	
	Если  ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатУстановки);
	КонецЕсли;
	
КонецПроцедуры

// Результат подключения компоненты.
//
Функция РезультатПодключенияКомпоненты()
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ПодключаемыйМодуль", Неопределено);
	Возврат Результат;
	
КонецФункции

Процедура ПодключитьКомпонентуИзМакетаЗавершение(Подключено, ПараметрыПодключения) Экспорт
	
	РезультатПодключения = РезультатПодключенияКомпоненты();

	Если Подключено Тогда 
		Попытка
			ProgID = "AddIn." + СтрЗаменить(ПараметрыПодключения.Идентификатор, ".", "_") + "." + ПараметрыПодключения.Идентификатор;
			РезультатПодключения.ПодключаемыйМодуль = Новый (ProgID);
			РезультатПодключения.Подключено = Истина;
		Исключение
			РезультатПодключения.ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыПодключения.ОповещениеПриПодключении, РезультатПодключения);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с журналом регистрации.

// Записывает очередное сообщение в глобальный массив сообщений
//
// Параметры: 
// 	ИмяСобытия - Строка - имя события для журнала регистрации
// 	ПредставлениеУровня - Строка - описание уровня события, по нему будет определен уровень события при записи на сервере
// 	Комментарий - Строка - комментарий для события журнала
// 	ДатаСобытия - Дата - точная дата возникновения события, описанного в сообщении. Будет добавлена в начало комментария
// 	ЗаписатьСобытия - Булево - признак вызова процедуры непосредственной записи накопленных сообщений после добавления
Процедура ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, ПредставлениеУровня = "Информация", 
	Комментарий = "", ДатаСобытия = "", ЗаписатьСобытия = Ложь) Экспорт
	
	// В случае необходимости выполним инициализацию глобального списка сообщений для журнала регистрации.
	Если СообщенияДляЖурналаРегистрации = Неопределено Тогда
		СообщенияДляЖурналаРегистрации = Новый СписокЗначений;
	КонецЕсли;
	
	Если ДатаСобытия = "" Тогда
		ДатаСобытия = ТекущаяДата();
	КонецЕсли;
	
	КомментарийСДатой = Строка(ДатаСобытия) +" " + Комментарий;
	СтруктураСообщения = Новый Структура("ИмяСобытия, ПредставлениеУровня, Комментарий", 
		ИмяСобытия, ПредставлениеУровня, КомментарийСДатой);
	СообщенияДляЖурналаРегистрации.Добавить(СтруктураСообщения);
	
	Если ЗаписатьСобытия Тогда
		ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	КонецЕсли;
		
КонецПроцедуры

// Проверяет текущий вариант использования журнала регистрации.
// Если регистрация изменений отключена - то предлагает полностью включить его.
//
// Параметры: 
// 	СписокПроверок - СписокЗначений, список строковых представлений режимов журнала регистрации, которые необходимо
//                  проверить на включение.
// 	СпрашиватьОРегистрации - Булево, признак, отвечающий за вопрос о включении журнала в необходимых режимах.
// 	СообщениеОНеобходимостиВключенияЖурнала - Строка, сообщение, которое будет выведено пользователю в случае, когда
//                                           проверка не прошла, и надо включить журнале регистрации.
Процедура ПроверитьВключениеЖурналаРегистрации(СписокПроверок = Неопределено, СпрашиватьОРегистрации = Истина, СообщениеОНеобходимостиВключенияЖурнала = "") Экспорт
	
	// Регистрация данных видов событий уже включена.
	Если ОбщегоНазначения.ПроверитьВключениеЖурналаРегистрации(СписокПроверок) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпрашиватьОРегистрации Тогда 
		
		// Если было передано произвольное сообщение, тогда выведем его.
		Если Не ПустаяСтрока(СообщениеОНеобходимостиВключенияЖурнала) Тогда
			ТекстВопроса = СообщениеОНеобходимостиВключенияЖурнала;
		Иначе	
			
			Если СписокПроверок = Неопределено Тогда
				ТекстВопроса = НСтр("ru = 'Для продолжения рекомендуется включить использование Журнала регистрации. 
					|В противном случае, запись событий в Журнал регистрации не будет произведена. 
					|Включить сейчас?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Для продолжения рекомендуется включить регистрацию событий %1 в Журнале регистрации. 
					|В противном случае, записи событий в Журнал регистрации будут неполными. 
					|Включить сейчас?'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СписокПроверок);
			КонецЕсли;
		КонецЕсли;
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Умолчание = КодВозвратаДиалога.Да;
		Заголовок = НСтр("ru = 'Журнал регистрации'");
		КодВозврата = Вопрос(ТекстВопроса, Режим, , Умолчание, Заголовок);
	Иначе
		КодВозврата = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Попытка 
			ОбщегоНазначения.ВключитьИспользованиеЖурналаРегистрации(СписокПроверок);
			Текст = НСтр("ru = 'Настройка изменена'");
			Пояснение = НСтр("ru = 'Регистрация событий в журнале регистрации обновлена'");
			ПоказатьОповещениеПользователя(Текст,,Пояснение);
		Исключение

			ИмяСобытия = НСтр("ru = 'Настройка журнала регистрации'");
			ПредставлениеУровня = "Ошибка";
			Комментарий = НСтр("ru = 'Невозможно установить монопольный доступ. Настройка журнала регистрации не изменена'");
			ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, ПредставлениеУровня, Комментарий,, Истина);
			
			ОткрытьФорму("ОбщаяФорма.ВключениеЖурналаРегистрации",Новый Структура("СписокПроверок",СписокПроверок)); 
			
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Функции для обработки действий пользователя в процессе редактирования
// многострочного текста, например комментария в документах.

// Открывает форму редактирования произвольного многострочного текста модально.
//
// Параметры:
// 	МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
// 	РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования.
// 	Модифицированность       - Строка - флаг модифицированности формы.
// 	Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//
Процедура ОткрытьФормуРедактированияМногострочногоТекста(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, 
		Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ТекстВведен = ВвестиСтроку(МногострочныйТекст,,, Истина);
	Иначе
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
	Если Не ТекстВведен Тогда
		Возврат;
	КонецЕсли;
		
	РезультатРедактирования = МногострочныйТекст;
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования многострочного комментария модально.
//
// Параметры:
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
//  РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования.
//  Модифицированность       - Строка - флаг модифицированности формы.
//
// Пример:
//  ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);.
//
Процедура ОткрытьФормуРедактированияКомментария(Знач МногострочныйТекст, РезультатРедактирования,
	Модифицированность = Ложь) Экспорт
	
	ОткрытьФормуРедактированияМногострочногоТекста(МногострочныйТекст, РезультатРедактирования, Модифицированность, 
		НСтр("ru='Комментарий'"));
	
КонецПроцедуры

// ПутьКФайлу Полный путь переносимого файла.
// ИмяКаталога - полный путь к новому каталогу.
// ИмяФайла - имя файла и расширение.
Функция ПеренестиФайл(ПутьКФайлу,ИмяКаталога,ИмяФайла)
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	КопироватьФайл(ПутьКФайлу, ИмяКаталога+ "\" + ИмяФайла);	
КонецФункции

// Процедура установки заголовка надписи суммы документа в форме документа.
//
// Параметры:
//  ЭтаФорма - форма открытого документа.
//
Процедура ВывестиЗаголовокСуммаДокумента(ЭтаФорма) Экспорт
	
	Если ЭтаФорма<>Неопределено Тогда
		
		Попытка
			
			Если ЭтаФорма.Элементы.Найти("тНадписьСуммаДокумента")<>Неопределено Тогда
				ТекстИтого = " ";
			Иначе
				ТекстИтого = "Итого: ";
			КонецЕсли;
			ТекстСумма=ТекстИтого+Формат(ЭтаФорма.СуммаДокумента,"ЧДЦ=2; ЧН=0,00");
			ЭтаФорма.Элементы.тСуммаДокумента.Заголовок = ТекстСумма;
			
		Исключение
			
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура ЗапуститьОбработкуОбновления.
//
Процедура ЗапуститьОбработкуОбновления() Экспорт
	
	ФормаОписаниеОбновлений    = ПолучитьФорму("Обработка.ОбновлениеИнформационнойБазы.Форма.ОписаниеОбновленийУпр");
	
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.Элементы.ДокументОписаниеОбновлений;
	
	Результат = ОбщегоНазначенияСервер.ЗапуститьОбработкуОбновления();
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
	
		Если ЗначениеЗаполнено(Результат.Ошибка) Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;	
		
		// Подготовка к выводу формы описания обновлений.
		Если  Результат.ДокументОписаниеОбновленийВысотаТаблицы > 0 Тогда
			ФормаОписаниеОбновлений.Открыть();
			ФормаОписаниеОбновлений.ДокументОписаниеОбновлений = Результат.ДокументОписаниеОбновлений;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

// Функция ВремяВСекунды.
//
// Параметры:
//  ДатаВремя - Дата
//
// Возвращаемое значение:
//  Число.
//
Функция ВремяВСекунды(ДатаВремя) Экспорт
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		Возврат ДатаВремя-НачалоДня(ДатаВремя);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

// Процедура ДобавитьИзображение.
//
// Параметры:
//  ИмяКаталога - Строка
//
Процедура ДобавитьИзображение(ИмяКаталога) Экспорт
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл с изображением";
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	ДиалогОткрытияФайла.Фильтр = РаботаСФормамиКлиент.ПолучитьФильтрИзображений();
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ВыбранноеИзображение = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ИмяФайла = СтрЗаменить(ДиалогОткрытияФайла.ПолноеИмяФайла,ДиалогОткрытияФайла.Каталог,"");
	ПеренестиФайл(ДиалогОткрытияФайла.ПолноеИмяФайла,ИмяКаталога,ИмяФайла);
	
КонецПроцедуры

// Дата сеанса.
// Возвращаемое значение:
//  Дата.
//
Функция ДатаСеанса() Экспорт 
	
	Возврат ТекущаяДата();
	
КонецФункции

// Возвращает универсальную дату сеанса, получаемую из текущей даты сеанса.
//
// Функция возвращает время, близкое к результату функции УниверсальноеВремя() в серверном контексте.
// Погрешность обусловлена временем выполнения серверного вызова.
// Предназначена для использования вместо функции УниверсальноеВремя().
//
// Возвращаемое значение:
//  Дата.
//
Функция ДатаУниверсальная() Экспорт
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	ДатаСеанса = ТекущаяДата() + ПараметрыРаботыКлиента.ПоправкаКВремениСеанса;
	Возврат ДатаСеанса + ПараметрыРаботыКлиента.ПоправкаКУниверсальномуВремени;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать:
//  ОткрытьНавигационнуюСсылку при передачи ссылки на сайт или навигационной ссылки.
//  ОткрытьПроводник для открытия проводника при передачи пути к папке или файлу.
//  ОткрытьФайлВПрограммеПросмотра для открытия файла по расширению при передачи пути к файлу.
//
// Выполняет переход по ссылке на объект информационной базы или внешний объект.
// (например, ссылка на сайт или путь к папке).
//
// Параметры:
//  Ссылка - Строка - ссылка для перехода.
//
Процедура ПерейтиПоСсылке(Ссылка) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЗапуститьПриложение(Ссылка);
	#Иначе
		ПерейтиПоНавигационнойСсылке(Ссылка);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
