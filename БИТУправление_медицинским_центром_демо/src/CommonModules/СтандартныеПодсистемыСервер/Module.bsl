///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2015-2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак того, является ли конфигурация базовой.
// Базовые версии конфигураций могут иметь программные ограничения, действие которых
// можно предусмотреть с помощью этой функции.
// Конфигурация считается базовой, если в ее имени есть термин "Базовая",
// например, "УправлениеТорговлейБазовая".
//
// Возвращаемое значение:
//   Булево - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	Возврат СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительная базовая функциональность для анализа параметров клиента на сервере.

// Возвращает фиксированное соответствие, содержащее некоторые параметры клиента:
//  ПараметрЗапуска                    - Строка,
//  СтрокаСоединенияИнформационнойБазы - Строка - строка соединения, полученная на клиенте.
//
// Возвращает пустое фиксированное соответствие, если ТекущийРежимЗапуска() = Неопределено.
//
Функция ПараметрыКлиентаНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыКлиента.Количество() = 0
	   И ТекущийРежимЗапуска() <> Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры клиента на сервере.'");
	КонецЕсли;
	
	Возврат ПараметрыКлиента;
	
КонецФункции

// Проверяет, что в текущем сеансе доступна последняя версия программы,
// в противном случае, вызывает исключение с требованием перезапустить сеанс.
//
// В старых сеансах нельзя обновлять параметры работы программы, а также
// нельзя выполнять изменение некоторых данных, чтобы не перезаписать
// новую версию данных (полученную с помощью новой версии программы)
// старой версией данных (полученной с помощью старой версии программы).
//
Процедура ПроверитьДинамическоеОбновлениеВерсииПрограммы() Экспорт
		
КонецПроцедуры

// Проверяет, что в текущем сеансе есть динамическое изменение конфигурации базы и
// при этом нет режима обновления информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если версия программы обновлена.
//
Функция ВерсияПрограммыОбновленаДинамически() Экспорт
	
	Возврат КонфигурацияБазыДанныхИзмененаДинамически();
	
КонецФункции

// Возвращаемое значение:
//  Булево
//
Функция ЭтоРазделенныйРежимСеансаБезРазделителей() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено()
	 Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
	 Или Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	Возврат МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	
КонецФункции

// Возвращает значение параметра работы программы.
//
// В старом сеансе (когда версия программы обновлена динамически),
// если параметр не найден, вызывается исключение с требованием перезапуска,
// если параметр найден, значение возвращается без учета версии.
//
// В разделенном режиме модели сервиса, если параметр не найден или
// версия параметра не равна версии конфигурации вызывается исключение,
// так как обновление неразделенных данных невозможно.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
// Возвращаемое значение:
//  Произвольный - возвращается Неопределено, когда параметр не найден или
//                 когда в новом сеансе версия параметра не равна версии конфигурации.
//
Функция ПараметрРаботыПрограммы(ИмяПараметра) Экспорт
	
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);
	
КонецФункции

// Устанавливает значение параметра работы программы.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра - Строка - не более 128 символов. Например,
//                 "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Значение     - Произвольный - значение, которое можно поместить в хранилище значения.
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяПараметра, Значение) Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ИмяПараметра, Значение);
	
КонецПроцедуры

// Обновляет значение параметра работы программы, если изменилось.
// Перед вызовом требуется установить привилегированный режим.
//
// Параметры:
//  ИмяПараметра   - Строка - не более 128 символов. Например,
//                   "СтандартныеПодсистемы.ВариантыОтчетов.ОтчетыСНастройками".
//
//  Значение       - Произвольный - значение, которое можно поместить в хранилище значения.
//
//  ЕстьИзменения  - Булево - возвращаемое значение. Устанавливается Истина,
//                   если старое и новое значения параметра не совпадают.
//
//  СтароеЗначение - Произвольный - возвращаемое значение. До обновления.
//
Процедура ОбновитьПараметрРаботыПрограммы(ИмяПараметра, Значение, ЕстьИзменения = Ложь, СтароеЗначение = Неопределено) Экспорт
	
	РегистрыСведений.ПараметрыРаботыПрограммы.ОбновитьПараметрРаботыПрограммы(ИмяПараметра,
		Значение, ЕстьИзменения, СтароеЗначение);
	
КонецПроцедуры

// Возвращает ссылку, соответствующую объекту метаданных, для использования в базе данных.
//
// Параметры:
//   ОбъектМетаданных
//       - ОбъектМетаданных - Объект метаданных конфигурации или расширения.
//       - Тип              - Тип, который можно успешно использовать в функции Метаданные.НайтиПоТипу().
//       - Строка           - Полное имя объекта метаданных,
//           которое можно успешно использовать в функции Метаданные.НайтиПоПолномуИмени().
//
// Возвращаемое значение:
//   СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта метаданных конфигурации.
//   СправочникСсылка.ИдентификаторыОбъектовРасширений - Ссылка объекта метаданных расширения.
//   Строка - Если у данного объекта метаданных нет ссылки, то возвращается полное имя объекта метаданных.
//
Функция ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных) Экспорт
	
	Тип = ТипЗнч(ОписаниеОбъектаМетаданных);
	Если Тип = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
	ИначеЕсли Тип = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъектаМетаданных);
	Иначе
		ОбъектМетаданных = ОписаниеОбъектаМетаданных;
	КонецЕсли;
	//Если ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных")
	//	И ЭтоОбъектРасширенияНеразделенногоПользователя(ОбъектМетаданных) Тогда
	//	Возврат ОбъектМетаданных.ПолноеИмя();
	//КонецЕсли;
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных);
	
КонецФункции

// Возвращает таблицу возможных форматов для сохранения табличного документа.
//
// Возвращаемое значение
//  ТаблицаЗначений:
//                   ТипФайлаТабличногоДокумента - ТипФайлаТабличногоДокумента                 - значение в платформе,
//                                                                                               соответствующее
//                                                                                               формату;
//                   Ссылка                      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка на метаданные,
//                                                                                               где хранится
//                                                                                               представление;
//                   Представление               - Строка -                                    - представление типа
//                                                          файла (заполняется из перечисления);
//                   Расширение                  - Строка -                                    - тип файла для
//                                                          операционной системы;
//                   Картинка                    - Картинка                                    - значок формата.
//
// Примечание: таблица форматов может быть переопределена в процедуре
// УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохранения().
//
Функция НастройкиФорматовСохраненияТабличногоДокумента() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ТипФайлаТабличногоДокумента", Новый ОписаниеТипов("ТипФайлаТабличногоДокумента"));
	ТаблицаФорматов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыСохраненияОтчетов"));
	ТаблицаФорматов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));

	// Документ PDF (.pdf)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.PDF;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.PDF;
	НовыйФормат.Расширение = "pdf";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	// Лист Microsoft Excel 2007 (.xlsx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLSX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLSX;
	НовыйФормат.Расширение = "xlsx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel2007;

	// Лист Microsoft Excel 97-2003 (.xls)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLS;
	НовыйФормат.Расширение = "xls";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel;

	// Электронная таблица OpenDocument (.ods).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ODS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ODS;
	НовыйФормат.Расширение = "ods";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	
	// Табличный документ (.mxl)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.MXL;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.MXL;
	НовыйФормат.Расширение = "mxl";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматMXL;

	// Документ Word 2007 (.docx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.DOCX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.DOCX;
	НовыйФормат.Расширение = "docx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматWord2007;
	
	// Веб-страница (.html)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.HTML5;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.HTML;
	НовыйФормат.Расширение = "html";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматHTML;
	
	// Текстовый документ UTF-8 (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.TXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.TXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;
	
	// Текстовый документ ANSI (.txt).
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ANSITXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;

	Для Каждого ФорматСохранения Из ТаблицаФорматов Цикл
		ФорматСохранения.Представление = Строка(ФорматСохранения.Ссылка);
	КонецЦикла;
		
	Возврат ТаблицаФорматов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ИдентификаторыОбъектовМетаданных запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
	// Загрузка в справочник ИдентификаторыОбъектовРасширений запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ИдентификаторыОбъектовРасширений.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ИдентификаторыОбъектовРасширений.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Преобразует строку в допустимое наименование колонки таблицы значений, заменяя недопустимые
// символы на код символа ограниченного символом подчеркивания.
//
// Параметры:
//  Строка - Строка - Строка для преобразования.
// 
// Возвращаемое значение:
//  Строка - Строка, содержащая только допустимые символы для наименования колонок таблицы значений.
//
Функция ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка) Экспорт
	
	НедопустимыеСимволы = ":;!@#$%^&-~`'.,?{}[]+=*/|\ ()_""";
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Символ =  Сред(Строка, Индекс, 1);
		Если СтрНайти(НедопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + "_" + КодСимвола(Символ) + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Преобразовать адаптированное наименование колонки, в котором недопустимые
// символы заменены на код символа, ограниченного символом подчеркивания в обычную строку.
//
// Параметры:
//  НаименованиеКолонки - Строка - Адаптированное наименование колонки.
// 
// Возвращаемое значение:
//  Строка - преобразованная строка.
//
Функция ПреобразоватьАдаптированноеНаименованиеКолонкиВСтроку(НаименованиеКолонки) Экспорт
	
	Результат = "";
	Для Индекс = 1 По СтрДлина(НаименованиеКолонки) Цикл
		Символ = Сред(НаименованиеКолонки, Индекс, 1);
		Если Символ = "_" Тогда
			ПозицияЗакрывающегоСимвола = СтрНайти(НаименованиеКолонки, "_", НаправлениеПоиска.СНачала, Индекс + 1);
			КодСимвола = Сред(НаименованиеКолонки, Индекс + 1, ПозицияЗакрывающегоСимвола - Индекс - 1);
			Результат = Результат + Символ(КодСимвола);
			Индекс = ПозицияЗакрывающегоСимвола;
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПредставлениеОбъектовМетаданных(Объекты)
	
	Результат = Новый Массив;
	
	Для Каждого Объект Из Объекты Цикл
		
		Результат.Добавить(Объект.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для процедуры УстановитьКлючНазначенияФормы.
Процедура УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки)
	
	Если Не ЗначениеЗаполнено(Ключ)
	 Или Форма.КлючНазначенияИспользования = Ключ Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не УстановитьНастройки Тогда
		Форма.КлючНазначенияИспользования = Ключ;
		Возврат;
	КонецЕсли;
	
	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/КлючТекущегоВарианта");
	ТипыНастроек.Добавить("/КлючТекущихПользовательскихНастроек");
	ТипыНастроек.Добавить("/ТекущиеПользовательскиеНастройки");
	ТипыНастроек.Добавить("/КлючТекущихНастроекДанных");
	ТипыНастроек.Добавить("/ТекущиеДанные");
	ТипыНастроек.Добавить("/НастройкиФормы");
	// Английский вариант.
	ТипыНастроек.Добавить("/CurrentVariantKey");
	ТипыНастроек.Добавить("/CurrentUserSettingsKey");
	ТипыНастроек.Добавить("/CurrentUserSettings");
	ТипыНастроек.Добавить("/CurrentDataSettingsKey");
	ТипыНастроек.Добавить("/CurrentData");
	ТипыНастроек.Добавить("/FormSettings");
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючНазначенияИспользованияФормы") <> Истина 
		 И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючНазначенияИспользования);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючНазначенияИспользованияФормы", Истина);
	КонецЕсли;
	
	Форма.КлючНазначенияИспользования = Ключ;
	
КонецПроцедуры

// Для процедуры УстановитьКлючНазначенияФормы.
Процедура УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, Ключ, УстановитьНастройки)
	
	Если Не ЗначениеЗаполнено(Ключ)
	 Или Форма.КлючСохраненияПоложенияОкна = Ключ Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не УстановитьНастройки Тогда
		Форма.КлючСохраненияПоложенияОкна = Ключ;
		Возврат;
	КонецЕсли;
	
	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/НастройкиОкна");
	ТипыНастроек.Добавить("/Такси/НастройкиОкна");
	ТипыНастроек.Добавить("/НастройкиОкнаВебКлиента");
	ТипыНастроек.Добавить("/Такси/НастройкиОкнаВебКлиента");
	// Английский вариант.
	ТипыНастроек.Добавить("/WindowSettings");
	ТипыНастроек.Добавить("/Taxi/WindowSettings");
	ТипыНастроек.Добавить("/WebClientWindowSettings");
	ТипыНастроек.Добавить("/Taxi/WebClientWindowSettings");
	
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючСохраненияПоложенияОкнаФормы") <> Истина 
		И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючСохраненияПоложенияОкна);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючСохраненияПоложенияОкнаФормы", Истина);
	КонецЕсли;
	
	Форма.КлючСохраненияПоложенияОкна = Ключ;
	
КонецПроцедуры

// Для процедур УстановитьКлючНазначенияИспользованияФормы, УстановитьКлючСохраненияПоложенияОкнаФормы.
Процедура УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, ИмяФормы, ТекущийКлюч)
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКлюч = "/" + Ключ;
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	Для каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + НовыйКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			Возврат; // Настройки для ключа уже установлены.
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийКлюч) Тогда
		ТекущийКлюч = "/" + ТекущийКлюч;
	КонецЕсли;
	
	// Установка начальных настроек ключа копированием от текущего ключа.
	Для Каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + ТекущийКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		КлючОбъекта = ИмяФормы + НовыйКлюч + ТипНастроек;
		Пока Выборка.Следующий() Цикл
			ОписаниеНастроек = Новый ОписаниеНастроек;
			ОписаниеНастроек.Представление = Выборка.Представление;
			ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, Выборка.КлючНастроек,
				Выборка.Настройки, ОписаниеНастроек);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает представление поля Дата в списках, содержащих реквизит с составом даты Дата и время.
// Подробнее см. стандарт "Поле "Дата" в списках".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма со списком.
//   ПолноеИмяРеквизита - Строка - Полный путь к реквизиту типа "Дата" в формате "<ИмяСписка>.<ИмяПоля>".
//   ИмяЭлемента - Строка - Имя элемента формы, связанного с реквизитом списка типа "Дата".
//
// Пример:
//  Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//    СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект);
//
Процедура УстановитьУсловноеОформлениеПоляДата(Форма, ПолноеИмяРеквизита = "Список.Дата", ИмяЭлемента = "Дата") Экспорт
	УсловноеОформлениеКД = Форма.УсловноеОформление;
	ПутьКРеквизиту = ПолноеИмяРеквизита;
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКРеквизиту, ".");
		Если МассивСтрок.Количество() > 1 Тогда
			ДинамическийСписок = Форма[МассивСтрок[0]];
			Если ТипЗнч(ДинамическийСписок) = Тип("ДинамическийСписок") Тогда
				МассивСтрок.Удалить(0);
				УсловноеОформлениеКД = ДинамическийСписок.УсловноеОформление;
				ПутьКРеквизиту = СтрСоединить(МассивСтрок, ".");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Форма) <> Тип("ДинамическийСписок") Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата",
			"Форма",
			Форма,
			Тип("ФормаКлиентскогоПриложения"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки) Тогда
		УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	КонецЕсли;
	
	// По умолчанию используется представление "10.06.2012".
	ЭлементОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты: ""10.06.2012""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	// Для сегодняшнего дня используется представления "09:46".
	ЭлементОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты сегодня: ""09:46""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Внутренние процедуры и функции подсистемы "Базовая функциональность".
//

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("СтандартныеПодсистемы", 
		ВерсияБиблиотеки(), СтандартныеПодсистемыПереопределяемый.ОбработчикиОбновленияСтандартныхПодсистем());
	
КонецПроцедуры

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	//+бит
	// Возврат СтандартныеПодсистемыПовтИсп.ОписанияПодсистем().ПоИменам["СтандартныеПодсистемы"];
	Возврат ""; // Нет интеграции с подсистемами БСП.
	//-бит
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Проверка запуска с пустым списком пользователей.
	Параметры.Вставить("ОшибкаЗапускаСПустымСпискомПользователей","");

	Если ЗначениеЗаполнено(Параметры.ОшибкаЗапускаСПустымСпискомПользователей) Тогда
		// Будет предложено создать администратора или завершить работу.
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных", 
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	Параметры.Вставить("КодОсновногоЯзыка", ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Проверка необходимости предварительного обновления параметров работы программы.
	Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы",
	Ложь);
	
	Если Параметры.НеобходимоОбновлениеПараметровРаботыПрограммы
	   И Параметры.ПервыйЗапросПараметров Тогда
		// Будет выполнено предварительное обновление.
		Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
		
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено
		   И Истина Тогда
			Если Константы.ВыполнитьЗагрузкуПараметровРаботыПрограммы.Получить() = Истина Тогда
				Параметры.Вставить("ПодтвердитьНастройкиЗагрузкиСообщенияВПодчиненномУзлеРИБ");
				Параметры.Вставить("ГлавныйУзел", ПланыОбмена.ГлавныйУзел());
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначенияПовтИсп.РазделениеВключено());
	
	Параметры.Вставить("ЭлементыСтиля", НаборЭлементовСтиля());
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Возврат Истина;
	
КонецФункции

// Возвращает сериализуемый набор элементов стиля.
// 
// Возвращаемое значение:
//  Структура:
//   * Ключ - Строка - имя элемента стиля.
//   * Значение - Строка
//              - ОбъектМетаданныхЭлементСтиля - элемент стиля. Для толстого клиента обычного приложения
//                           элемент стиля преобразуется в системное строковое представление переданного значения.
//
Функция НаборЭлементовСтиля()
	
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, Новый ХранилищеЗначения(ЭлементСтиля.Значение));
		Иначе
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
	Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", 
		ОбновлениеИнформационнойБазы.ПроверитьНевозможностьОбновленияИнформационнойБазы());
	Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы", 
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы());
	Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", СтандартныеПодсистемыПереопределяемый.ЭтоБазоваяВерсияКонфигурации());
	
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	УстановитьПривилегированныйРежим(Ложь);
	Параметры.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	Параметры.Вставить("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
		
	// Параметры для внешних подключений пользователей
	Параметры.Вставить("ИнформацияОПользователе", ПолучитьИнформациюОПользователе());
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначения.ИмяCOMСоединителя());
	Параметры.Вставить("ЭлементыСтиля", НаборЭлементовСтиля());
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры) 
	
	Если Не Параметры.РазделениеВключено Или Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		
		Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
		Параметры.Вставить("ПредставлениеПользователя", Строка(Параметры.АвторизованныйПользователь));
		
		УстановитьПривилегированныйРежим(Истина);
		Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ПланыОбмена.ГлавныйУзел() <> Неопределено);
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
	Параметры.Вставить("ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий",
		ОбщегоНазначения.ИнформационнаяБазаФайловая()
		);
	
	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		Ложь);
	
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", Ложь);
	
	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("ВерсияКонфигурации", Метаданные.Версия); //+бит.
	
КонецПроцедуры

Функция ПолучитьИнформациюОПользователе()
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Возврат Новый Структура("Имя, ПолноеИмя, ПарольУстановлен, АутентификацияСтандартная, АутентификацияОС",
		ТекущийПользователь.Имя, ТекущийПользователь.ПолноеИмя, ТекущийПользователь.ПарольУстановлен,
		ТекущийПользователь.АутентификацияСтандартная, ТекущийПользователь.АутентификацияОС);
КонецФункции

// Обработчики обновления базовой функциональности
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
КонецПроцедуры

// Обновляет кэши свойств метаданных, позволяющие ускорить
// открытие сеанса, а также обновление ИБ, особенно в модели сервиса.
// Их обновление происходит до обновления ИБ.
//
// Для использования в других библиотеках и конфигурациях.
//
Процедура ОбновитьВсеПараметрыРаботыПрограммы(НайтиИзменения = Ложь,
                                              ЕстьИзменения = Неопределено,
                                              ОшибкаУстановкиМонопольногоРежима = Неопределено,
                                              ВФоне = Ложь) Экспорт
	
	ЕстьИзменения  = Ложь;
	ТолькоПроверка = Ложь;
	СнятьМонопольныйРежим = Ложь;
	
	Если НайтиИзменения Тогда
		ТолькоПроверка = Истина;
		
	ИначеЕсли НЕ МонопольныйРежим() Тогда
		Попытка
			УстановитьМонопольныйРежим(Истина);
			СнятьМонопольныйРежим = Истина;
		Исключение
			СнятьМонопольныйРежим = Ложь;
			ТолькоПроверка = Истина;
		КонецПопытки;
	КонецЕсли;
	
	БезИзменений = Новый Структура;
	Попытка
		ПроверитьОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, ТолькоПроверка, БезИзменений, ВФоне);
	Исключение
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	Если НЕ НайтиИзменения И ТолькоПроверка Тогда
		Если ЕстьИзменения Тогда
			Попытка
				УстановитьМонопольныйРежим(Истина);
			Исключение
				ТекстОшибки =
					НСтр("ru = 'Невозможно выполнить обновление информационной базы:
					           |- Невозможно установить монопольный режим
					           |- Версия конфигурации не предусматривает обновление без установки монопольного режима.'");
				
				Если ОшибкаУстановкиМонопольногоРежима = Неопределено Тогда
					ВызватьИсключение ТекстОшибки;
				Иначе
					ОшибкаУстановкиМонопольногоРежима = ТекстОшибки;
					Возврат;
				КонецЕсли;
			КонецПопытки;
			Попытка
				ОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, Ложь);
			Исключение
				УстановитьМонопольныйРежим(Ложь);
				ВызватьИсключение;
			КонецПопытки;
			УстановитьМонопольныйРежим(Ложь);
		Иначе
			// Монопольный режим не требуется.
			ПроверитьОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, Ложь, БезИзменений, ВФоне);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция НеобходимоОбновлениеПараметровРаботыПрограммы(ВыполнитьЗагрузку = Истина) Экспорт
	
	// Обновление в локальном режиме.
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ШаблонОбработчиковСобытий(События, ОбязательныеСобытия)
	
	ОбработчикиСобытий  = Новый Соответствие;
	
	Для каждого Событие Из События Цикл
		
		Если ТипЗнч(Событие) = Тип("Строка") Тогда // Имя события в виде строки.
			ОбработчикиСобытий.Вставить(Событие, Новый Массив);
			
		Иначе// Описание события в виде структуры - см. ОбщегоНазначения.НовоеСобытие().
			ОбработчикиСобытий.Вставить(Событие.Имя, Новый Массив);
			Если Событие.Обязательное Тогда
				Если ОбязательныеСобытия.Получить(Событие.Имя) = Неопределено Тогда
					ОбязательныеСобытия.Вставить(Событие.Имя, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработчикиСобытий;
	
КонецФункции

Процедура ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
                                                     ОбязательныеСобытия,
                                                     ОбработчикиСобытийПоПодсистемам)
	
	Для каждого ОбязательноеСобытие Из ОбязательныеСобытия Цикл
		
		ОбработчикНайден = Ложь;
		Для каждого ОбработчикиСобытийПодсистемы Из ОбработчикиСобытийПоПодсистемам Цикл
			
			Если ОбработчикиСобытийПодсистемы.Значение.Получить(ОбязательноеСобытие.Ключ).Количество() <> 0 Тогда
				ОбработчикНайден = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОбработчикНайден Тогда
			ОбязательныеСобытияБезОбработчиков.Добавить(ОбязательноеСобытие.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтандартноеОписаниеОбработчиковСобытий(ОписанияПодсистем, ОбработчикиСобытийПоПодсистемам)
	
	ОбработчикиСобытий  = Новый Соответствие;
	МодулиОбработчиков  = Новый Соответствие;
	СобытияОбработчиков = Новый Соответствие;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		ОбработчикиСобытийПодсистемы = ОбработчикиСобытийПоПодсистемам[Подсистема];
		
		Для каждого КлючИЗначение Из ОбработчикиСобытийПодсистемы Цикл
			Событие              = КлючИЗначение.Ключ;
			ОписанияОбработчиков = КлючИЗначение.Значение;
			
			Обработчики = ОбработчикиСобытий[Событие];
			Если Обработчики = Неопределено Тогда
				Обработчики = Новый Массив;
				ОбработчикиСобытий.Вставить(Событие, Обработчики);
				МодулиОбработчиков.Вставить(Событие, Новый Соответствие);
			КонецЕсли;
			
			Для каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
				Если ТипЗнч(ОписаниеОбработчика) = Тип("Структура") Тогда
					Обработчик = ОписаниеОбработчика;
				Иначе
					Обработчик = Новый Структура;
					Обработчик.Вставить("Модуль", ОписаниеОбработчика);
				КонецЕсли;
				Если НЕ Обработчик.Свойство("Версия") Тогда
					Обработчик.Вставить("Версия", "");
				КонецЕсли;
				Обработчик.Вставить("Подсистема", Подсистема);
				
				// Проверка полного имени модуля процедуры обработчика события.
				Если ТипЗнч(Обработчик.Модуль) <> Тип("Строка")
				 ИЛИ НЕ ЗначениеЗаполнено(Обработчик.Модуль) Тогда
					
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Ошибка в имени модуля ""%2"".'"),
						Событие,
						Обработчик.Модуль);
				КонецЕсли;
				
				// Проверка, что один и тот же модуль указан для события только раз.
				Если МодулиОбработчиков[Событие].Получить(Обработчик.Модуль) = Неопределено Тогда
					МодулиОбработчиков[Событие].Вставить(Обработчик.Модуль, Истина);
				Иначе
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Модуль ""%2"" уже добавлен.'"),
						Событие,
						Обработчик.Модуль);
				КонецЕсли;
				Обработчики.Добавить(Новый ФиксированнаяСтруктура(Обработчик));
				
				// Проверка, что один и тот же обработчик указан для событий только один раз.
				ИмяПроцедуры = Сред(Событие, Найти(Событие, "\") + 1);
				ИмяОбработчика = Обработчик.Модуль + "." + ИмяПроцедуры;
				
				Если СобытияОбработчиков[ИмяОбработчика] = Неопределено Тогда
					СобытияОбработчиков.Вставить(ИмяОбработчика, Событие);
				Иначе
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при подготовке обработчиков события
						           |""%1"".
						           |
						           |Обработчик ""%2"" уже добавлен для события
						           |""%3"".'"),
						Событие,
						ИмяОбработчика,
						СобытияОбработчиков[ИмяОбработчика]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Фиксация массивов обработчиков.
	Для каждого КлючИЗначение Из ОбработчикиСобытий Цикл
		ОбработчикиСобытий[КлючИЗначение.Ключ] = Новый ФиксированныйМассив(КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОбработчикиСобытий);
	
КонецФункции

// Возвращает соответствие имен событий массивам их обработчиков.
// 
// Возвращаемое значение:
//  Структура со свойствами:
//    НаКлиенте - Соответствие (см. ниже)
//    НаСервере - Соответствие (см. ниже)
//
//  Соответствие, где
//   Ключ     - Строка - полное имя события,
//   Значение - Массив структур со свойствами:
//               Версия - Строка - версия обработчика (пустая, если не была указана),
//               Модуль - имя модуля в котором размещен обработчик.
//
Функция ОбработчикиСобытий() Экспорт
	
	ОписанияПодсистем = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	
	// Определение всех доступных событий программы.
	КлиентскиеСобытия = Новый Массив;
	СерверныеСобытия  = Новый Массив;
	КлиентскиеСлужебныеСобытия = Новый Массив;
	СерверныеСлужебныеСобытия  = Новый Массив;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		Описание = ОписанияПодсистем.ПоИменам[Подсистема];
		
		Если НЕ Описание.ДобавлятьСобытия
		   И НЕ Описание.ДобавлятьСлужебныеСобытия Тогда
			
			Продолжить;
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(
			Описание.ОсновнойСерверныйМодуль);
		
		Если Описание.Имя = "СтандартныеПодсистемы" Тогда
			Модуль = СтандартныеПодсистемыСервер;
		КонецЕсли;
		
		Если Описание.ДобавлятьСобытия Тогда
			Модуль.ПриДобавленииСобытий(КлиентскиеСобытия, СерверныеСобытия);
		КонецЕсли;
		
		Если Описание.ДобавлятьСлужебныеСобытия Тогда
			Модуль.ПриДобавленииСлужебныхСобытий(КлиентскиеСлужебныеСобытия, СерверныеСлужебныеСобытия);
		КонецЕсли;
	КонецЦикла;
	
	ПроверкаУникальностиИменСобытий(КлиентскиеСобытия);
	ПроверкаУникальностиИменСобытий(СерверныеСобытия);
	ПроверкаУникальностиИменСобытий(КлиентскиеСлужебныеСобытия);
	ПроверкаУникальностиИменСобытий(СерверныеСлужебныеСобытия);
	
	// Подготовка новых массивов для добавления обработчиков.
	ОбработчикиКлиентскихСобытийПоПодсистемам = Новый Соответствие;
	ОбработчикиСерверныхСобытийПоПодсистемам  = Новый Соответствие;
	ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам = Новый Соответствие;
	ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам  = Новый Соответствие;
	
	ОбязательныеКлиентскиеСобытия = Новый Соответствие;
	ОбязательныеСерверныеСобытия  = Новый Соответствие;
	ОбязательныеКлиентскиеСлужебныеСобытия = Новый Соответствие;
	ОбязательныеСерверныеСлужебныеСобытия  = Новый Соответствие;
	
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		
		ОбработчикиКлиентскихСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(КлиентскиеСобытия, ОбязательныеКлиентскиеСобытия));
		
		ОбработчикиСерверныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(СерверныеСобытия, ОбязательныеСерверныеСобытия));
		
		ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(КлиентскиеСлужебныеСобытия, ОбязательныеКлиентскиеСлужебныеСобытия));
		
		ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам.Вставить(Подсистема,
			ШаблонОбработчиковСобытий(СерверныеСлужебныеСобытия, ОбязательныеСерверныеСлужебныеСобытия));
		
	КонецЦикла;
	
	// Добавление всех обработчиков для требуемых событий программы.
	Для каждого Подсистема Из ОписанияПодсистем.Порядок Цикл
		Описание = ОписанияПодсистем.ПоИменам[Подсистема];
		
		Если НЕ Описание.ДобавлятьОбработчикиСобытий
		   И НЕ Описание.ДобавлятьОбработчикиСлужебныхСобытий Тогда
			
			Продолжить;
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(
			Описание.ОсновнойСерверныйМодуль);
		
		Если Описание.Имя = "СтандартныеПодсистемы" Тогда
			Модуль = СтандартныеПодсистемыСервер;
		КонецЕсли;
		
		Если Описание.ДобавлятьОбработчикиСобытий Тогда
			Модуль.ПриДобавленииОбработчиковСобытий(
				ОбработчикиКлиентскихСобытийПоПодсистемам[Подсистема],
				ОбработчикиСерверныхСобытийПоПодсистемам[Подсистема]);
		КонецЕсли;
		
		Если Описание.ДобавлятьОбработчикиСлужебныхСобытий Тогда
			Модуль.ПриДобавленииОбработчиковСлужебныхСобытий(
				ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам[Подсистема],
				ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам[Подсистема]);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка обязательных событий.
	ОбязательныеСобытияБезОбработчиков = Новый Массив;
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеКлиентскиеСобытия, ОбработчикиКлиентскихСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеСерверныеСобытия, ОбработчикиСерверныхСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеКлиентскиеСлужебныеСобытия, ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам);
	
	ДобавитьОбязательныеСобытияБезОбработчиков(ОбязательныеСобытияБезОбработчиков,
		ОбязательныеСерверныеСлужебныеСобытия, ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам);
	
	Если ОбязательныеСобытияБезОбработчиков.Количество() > 0 Тогда
		ИмяСобытия  = НСтр("ru = 'Обработчики событий'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		Комментарий = НСтр("ru = 'Для следующих обязательных событий не определены обработчики:'")
			+ Символы.ПС + СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ОбязательныеСобытияБезОбработчиков, Символы.ПС);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение НСтр("ru = 'Для обязательных событий не определены обработчики.
		                             |Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	// Форматирование описаний обработчиков событий программы.
	ВсеОбработчикиСобытий = Новый Структура;
	ВсеОбработчикиСобытий.Вставить("НаКлиенте", Новый Структура);
	ВсеОбработчикиСобытий.Вставить("НаСервере", Новый Структура);
	
	ВсеОбработчикиСобытий.НаКлиенте.Вставить("ОбработчикиСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиКлиентскихСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаСервере.Вставить("ОбработчикиСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиСерверныхСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаКлиенте.Вставить("ОбработчикиСлужебныхСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиКлиентскихСлужебныхСобытийПоПодсистемам));
	
	ВсеОбработчикиСобытий.НаСервере.Вставить("ОбработчикиСлужебныхСобытий", СтандартноеОписаниеОбработчиковСобытий(
		ОписанияПодсистем, ОбработчикиСерверныхСлужебныхСобытийПоПодсистемам));
	
	Возврат Новый ФиксированнаяСтруктура(ВсеОбработчикиСобытий);
	
КонецФункции

Процедура ПроверкаУникальностиИменСобытий(События)
	
	ВсеСобытия    = Новый Соответствие;
	
	Для каждого Событие Из События Цикл
		
		Если ВсеСобытия.Получить(Событие) = Неопределено Тогда
			ВсеСобытия.Вставить(Событие, Истина);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подготовке списка событий.
				           |
				           |Событие ""%1""
				           |уже добавлено.'"),
				Событие);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет регистрацию изменений объекта на всех узлах плана обмена.
// Для разделенных конфигураций должны выполняться условия:
//  план обмена должен быть разделенным,
//  регистрируемый объект должен быть неразделенным.
//
//  Параметры:
// Объект - Объект данных (СправочникОбъект, ДокументОбъект и пр.). Объект, который требуется зарегистрировать.
// Объект должен быть неразделенным, иначе будет выдано исключение.
//
// ИмяПланаОбмена - Строка. Имя плана обмена, на всех узлах которого требуется выполнить регистрацию объекта.
// План обмена должен быть разделенным, иначе будет выдано исключение.
//
Процедура ЗарегистрироватьОбъектНаВсехУзлах(Знач Объект, Знач ИмяПланаОбмена, ВключаяГлавныйУзел = Истина) Экспорт
	
	Если Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Объект.Метаданные()) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ВызватьИсключение НСтр("ru = 'Регистрация изменений неразделенных данных в разделенном режиме.'");
		КонецЕсли;
		
		МодульРаботаВМоделиСервиса = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		КонецЕсли;
		
		Если МодульРаботаВМоделиСервиса <> Неопределено Тогда
			ЭтоРазделенныйПланОбмена = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(
				"ПланОбмена." + ИмяПланаОбмена, МодульРаботаВМоделиСервиса.РазделительОсновныхДанных());
		Иначе
			ЭтоРазделенныйПланОбмена = Ложь;
		КонецЕсли;
		
		Если Не ЭтоРазделенныйПланОбмена Тогда
			ВызватьИсключение НСтр("ru = 'Регистрация изменений для неразделенных планов обмена не поддерживается.'");
		КонецЕсли;
		
		Если МодульРаботаВМоделиСервиса <> Неопределено Тогда
			ЭтоРазделенныйОбъектМетаданных = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(
				Объект.Метаданные().ПолноеИмя(), МодульРаботаВМоделиСервиса.РазделительОсновныхДанных());
		Иначе
			ЭтоРазделенныйОбъектМетаданных = Ложь;
		КонецЕсли;
		
		Если ЭтоРазделенныйОбъектМетаданных Тогда
				ВызватьИсключение НСтр("ru = 'Регистрация изменений для разделенных объектов не поддерживается.'");
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	#ТаблицаПланаОбмена КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.РегистрироватьИзменения
		|	И НЕ ПланОбмена.ПометкаУдаления";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПланаОбмена", "ПланОбмена." + ИмяПланаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
		
		Для Каждого Получатель Из Получатели Цикл
			
			Объект.ОбменДанными.Получатели.Добавить(Получатель);
			
		КонецЦикла;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	#ТаблицаПланаОбмена КАК ПланОбмена
		|ГДЕ
		|	НЕ ПланОбмена.ЭтотУзел
		|	И НЕ ПланОбмена.ПометкаУдаления";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПланаОбмена", "ПланОбмена." + ИмяПланаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
		
		ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
		
		Для Каждого Получатель Из Получатели Цикл
			Если Не ВключаяГлавныйУзел И Получатель = ГлавныйУзел Тогда
				Продолжить;
			КонецЕсли;
			Объект.ОбменДанными.Получатели.Добавить(Получатель);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с файловой системой.

// Добавляет новый каталог временных файлов.
//   Используется в связке с ОчиститьКаталогВременныхФайлов.
//
// Параметры:
//   Расширение - Строка - Расширение каталога.
//       В качестве расширения полезно указывать аббревиатуру подсистемы, чтобы было понятно "кто за собой не убрал".
//       Рекомендуется указывать на английском языке, чтобы исключить ошибки ОС.
//
// Возвращаемое значение:
//   Строка - Полный путь к каталогу с последним слешем.
//
Функция СоздатьКаталогВременныхФайлов(Расширение) Экспорт
	ПутьККаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла(Расширение));
	СоздатьКаталог(ПутьККаталогу);
	Возврат ПутьККаталогу;
КонецФункции

// Добавляет новый каталог временных файлов.
//   Используется в связке с СоздатьКаталогВременныхФайлов.
//
// Параметры:
//   ПутьККаталогу - Строка - Полный путь к каталогу.
//
Процедура ОчиститьКаталогВременныхФайлов(ПутьККаталогу) Экспорт
	Попытка
		УдалитьФайлы(ПутьККаталогу);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Стандартные подсистемы'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка очистки каталога временных файлов ""%1"":%2'"),
				ПутьККаталогу,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для функции ОбновитьВсеПараметрыРаботыПрограммы

Процедура ПроверитьОбновитьВсеПараметрыРаботыПрограммы(ЕстьИзменения, ТолькоПроверка, БезИзменений = Неопределено, ВФоне = Ложь)
	
	Если ТипЗнч(БезИзменений) <> Тип("Структура") Тогда
		БезИзменений = Новый Структура;
	КонецЕсли;
	
	Если НЕ БезИзменений.Свойство("БазоваяФункциональностьСлужебныеСобытия") Тогда
		ЕстьТекущиеИзменения = Ложь;
		Константы.ПараметрыСлужебныхСобытий.СоздатьМенеджерЗначения().Обновить(ЕстьТекущиеИзменения, ТолькоПроверка);
		Если ЕстьТекущиеИзменения Тогда
			ЕстьИзменения = Истина;
			Если ТолькоПроверка Тогда
				Возврат;
			КонецЕсли;
		Иначе
			БезИзменений.Вставить("БазоваяФункциональностьСлужебныеСобытия");
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=20");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезИзменений.Свойство("БазоваяФункциональностьИдентификаторыОбъектовМетаданных") Тогда
		
		Если СтандартныеПодсистемыПовтИсп.ОтключитьСправочникИдентификаторыОбъектовМетаданных() Тогда
			БезИзменений.Вставить("БазоваяФункциональностьИдентификаторыОбъектовМетаданных");
		Иначе
			ЕстьТекущиеИзменения = Ложь;
			Если ТолькоПроверка Тогда
				// Проверка только критичных изменений: добавление, удаление или переименование объектов метаданных.
				Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(, ЕстьТекущиеИзменения, ТолькоПроверка, ЕстьТекущиеИзменения, ЕстьТекущиеИзменения);
			Иначе
				Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(ЕстьТекущиеИзменения);
			КонецЕсли;
			Если ЕстьТекущиеИзменения Тогда
				ЕстьИзменения = Истина;
				Если ТолькоПроверка Тогда
					Возврат;
				КонецЕсли;
			Иначе
				БезИзменений.Вставить("БазоваяФункциональностьИдентификаторыОбъектовМетаданных");
			КонецЕсли;
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=50");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезИзменений.Свойство("ПользователиПараметрыРаботы") Тогда
		
		ЕстьТекущиеИзменения = Ложь;
		Если ЕстьТекущиеИзменения Тогда
			ЕстьИзменения = Истина;
			Если ТолькоПроверка Тогда
				Возврат;
			КонецЕсли;
		Иначе
			БезИзменений.Вставить("ПользователиПараметрыРаботы");
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=80");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезИзменений.Свойство("УправлениеДоступомПараметрыОграниченияДоступа") Тогда
		
		Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			БезИзменений.Вставить("УправлениеДоступомПараметрыОграниченияДоступа");
		Иначе
			МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
			
			ЕстьТекущиеИзменения = Ложь;
			МодульУправлениеДоступомСлужебный.ОбновитьПараметрыОграниченияДоступа(ЕстьТекущиеИзменения, ТолькоПроверка);
			Если ЕстьТекущиеИзменения Тогда
				ЕстьИзменения = Истина;
				Если ТолькоПроверка Тогда
					Возврат;
				КонецЕсли;
			Иначе
				БезИзменений.Вставить("УправлениеДоступомПараметрыОграниченияДоступа");
			КонецЕсли;
		КонецЕсли;
		Если ВФоне Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПрибавкаНаШагеПрогресса=100");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Функции поддержки инициализации параметров сеанса
//

////////////////////////////////////////////////////////////////////////////////
// Подтверждение завершения работы программы

// Прочитать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Возвращаемое значение:
//   Булево   - значение настройки.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	Если Результат = Неопределено Тогда
		Результат = Истина;
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(Результат);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции


// Устанавливает размер шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма для изменения шрифта заголовков групп;
//	ИменаГрупп - Строка - Список имен групп формы, разделенных запятыми.
//
Процедура УстановитьОтображениеЗаголовковГрупп(Форма, ИменаГрупп = "") Экспорт
	
	Если Истина Тогда
		ЖирныйШрифт = Новый Шрифт(,, Истина);
		Если НЕ ЗначениеЗаполнено(ИменаГрупп) Тогда 
			Для Каждого Элемент из Форма.Элементы Цикл 
				Если Тип(Элемент) = Тип("ГруппаФормы") И
					Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа И
					Элемент.ОтображатьЗаголовок = Истина И (  
					Элемент.Отображение = ОтображениеОбычнойГруппы.Нет ) Тогда 
						Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивЗаголовков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаГрупп,,, Истина);
			Для Каждого ИмяЗаголовка Из МассивЗаголовков Цикл
				Элемент = Форма.Элементы[ИмяЗаголовка];
				Попытка
					Если Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение ИЛИ Элемент.Отображение = ОтображениеОбычнойГруппы.Нет Тогда 
						Элемент.ШрифтЗаголовка = ЖирныйШрифт;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет проверку состава плана обмена на наличие обязательных объектов метаданных
// и объектов-исключений из состава плана обмена.
//
// Параметры:
//  ИмяПланаОбмена – Строка, ПланОбменаСсылка. Имя плана обмена или ссылка на узел плана обмена,
//  для которого необходимо выполнить проверку.
//
Процедура ПроверитьСоставПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		ИмяПланаОбмена = ИмяПланаОбмена.Метаданные().Имя;
	КонецЕсли;
	
	РаспределеннаяИнформационнаяБаза = Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ВключитьВСостав = Новый Массив;
	ИсключитьИзСостава = Новый Массив;
	ОтключитьАвторегистрацию = Новый Массив;
	
	// Получаем список обязательных объектов и объектов-исключений
	ОбязательныеОбъекты = Новый Массив;
	ОбъектыИсключения = Новый Массив;
	ОбъектыНачальногоОбраза = Новый Массив;
	
	ПризнакРаспределеннаяИнформационнаяБаза = РаспределеннаяИнформационнаяБаза;
	ОбменДаннымиСервер.ПриПолученииОбязательныхОбъектовПланаОбмена(ОбязательныеОбъекты, ПризнакРаспределеннаяИнформационнаяБаза);
	ОбменДаннымиСервер.ПриПолученииОбъектовИсключенийПланаОбмена(ОбъектыИсключения, ПризнакРаспределеннаяИнформационнаяБаза);
	Если ПризнакРаспределеннаяИнформационнаяБаза Тогда
				
		ОбменДаннымиСервер.ПриПолученииОбъектовНачальногоОбразаПланаОбмена(ОбъектыНачальногоОбраза);
		
		Для Каждого Объект Из ОбъектыНачальногоОбраза Цикл
			
			ОбязательныеОбъекты.Добавить(Объект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверяем список обязательных объектов для состава плана обмена
	Для Каждого Объект Из ОбязательныеОбъекты Цикл
		
		Если СоставПланаОбмена.Найти(Объект) = Неопределено Тогда
			
			ВключитьВСостав.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем список объектов-исключений из состава плана обмена
	Для Каждого Объект Из ОбъектыИсключения Цикл
		
		Если СоставПланаОбмена.Найти(Объект) <> Неопределено Тогда
			
			ИсключитьИзСостава.Добавить(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем признак авторегистрации
	// Авторегистрация должна быть отключена у всех объектов начального образа
	Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
		
		Если ОбъектыНачальногоОбраза.Найти(ЭлементСостава.Метаданные) <> Неопределено
			И ЭлементСостава.АвтоРегистрация <> АвтоРегистрацияИзменений.Запретить Тогда
			
			ОтключитьАвторегистрацию.Добавить(ЭлементСостава.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формируем и выводим текст исключения при необходимости
	Если ВключитьВСостав.Количество() <> 0
		ИЛИ ИсключитьИзСостава.Количество() <> 0
		ИЛИ ОтключитьАвторегистрацию.Количество() <> 0 Тогда
		
		Если ВключитьВСостав.Количество() <> 0 Тогда
			
			ОписаниеИсключения1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ВключитьВСостав), ", "));
			
		КонецЕсли;
		
		Если ИсключитьИзСостава.Количество() <> 0 Тогда
			
			ОписаниеИсключения2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В состав плана обмена %1 НЕ должны входить следующие объекты метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ИсключитьИзСостава), ", "));
			
		КонецЕсли;
		
		Если ОтключитьАвторегистрацию.Количество() <> 0 Тогда
			
			ОписаниеИсключения3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В составе плана обмена %1 не должно быть объектов с установленным признаком авторегистрации.
				|Требуется запретить авторегистрацию для следующих объектов метаданных: %2'"),
				ИмяПланаОбмена,
				СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПредставлениеОбъектовМетаданных(ОтключитьАвторегистрацию), ", "));
			
		КонецЕсли;
		
		ОписаниеИсключения = "[ОписаниеИсключения1]
		|
		|[ОписаниеИсключения2]
		|
		|[ОписаниеИсключения3]
		|";
		
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения1]", ОписаниеИсключения1);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения2]", ОписаниеИсключения2);
		ОписаниеИсключения = СтрЗаменить(ОписаниеИсключения, "[ОписаниеИсключения3]", ОписаниеИсключения3);
		
		ВызватьИсключение СокрЛП(ОписаниеИсключения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРаботыПрограммы(ИмяКонстанты) Экспорт
	
	Возврат СтандартныеПодсистемыПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
	
КонецФункции

// Устанавливает ключ назначения формы (ключ назначения использования и
// ключ сохранения положения окна). При необходимости копирует текущие настройки формы,
// если для соответствующего нового ключа они еще не были записаны.
//
// Параметры:
//  Форма - УправляемаяФорма - форма ПриСозданииНаСервере, которой устанавливается ключ.
//  Ключ  - Строка - новый ключ назначения формы.
//  УстановитьНастройки - Булево - установить новому ключу настройки, сохраненные для текущего ключа.
//
Процедура УстановитьКлючНазначенияФормы(Форма, Ключ, КлючПоложения = "", УстановитьНастройки = Истина) Экспорт
	
	УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки);
	УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, ?(КлючПоложения = "", Ключ, КлючПоложения), УстановитьНастройки);
	
КонецПроцедуры

// Возвращает уточнения при возникновении проблем с параметрами работы программы.
Функция УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика() Экспорт
	
	Возврат Символы.ПС + Символы.ПС 
		+ НСтр("ru = 'Для разработчика: возможно требуется обновить вспомогательные данные,
					|которые влияют на работу программы. Для выполнения обновления можно:
					|- воспользоваться внешней обработкой
					|  ""Инструменты разработчика: Обновление вспомогательных данных"",
					|- либо запустить программу с параметром командной строки 1С:Предприятия 8
					|  ""/С ЗапуститьОбновлениеИнформационнойБазы"",
					|- либо увеличить номер версии конфигурации, чтобы при очередном запуске
					|  выполнились процедуры обновления данных информационной базы.'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИменаПодсистем", СтандартныеПодсистемыПовтИсп.ИменаПодсистем());
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	Параметры.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
		
	Если Не Параметры.РазделениеВключено Или Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
		Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	
	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОбщегоНазначения.ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ());
	
	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("КодОсновногоЯзыка",   Метаданные.ОсновнойЯзык.КодЯзыка);
	
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие процедуры и функции.

Функция ЭлементыСтиля() Экспорт
	
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
	
КонецФункции

// Вызывает исключение с требованием перезапустить сеанс из-за обновления версии программы.
Процедура ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы() Экспорт
	
	ТекстОшибки = НСтр("ru = 'Версия программы обновлена, требуется перезапустить сеанс.'");
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

// Проверяет, что переданная таблица является регистром.
// 
// Параметры:
//  ИмяТаблицы - Строка - полное имя таблицы.
// 
// Возвращаемое значение:
//  Булево 
//
Функция ЭтоТаблицаРегистра(ИмяТаблицы) Экспорт
	ВРегИмяТаблицы = ВРег(ИмяТаблицы);
	Если СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрСведений"))
		Или СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрНакопления"))
		Или СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрБухгалтерии"))
		Или СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрРасчета")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

