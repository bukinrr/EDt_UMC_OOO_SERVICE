#Область ПрограммныйИнтерфейс

// Нужно ли обновить номер документа после изменения даты документа в форме.
//
// Параметры:
//  ЭтаФорма				 - ФормаКлиентскогоПриложения	 - форма документа.
//  НачальнаяДатаДокумента	 - Дата	 - дата документа до изменения.
//
Процедура ПроверитьНомерДокумента(ЭтаФорма, НачальнаяДатаДокумента) Экспорт
	
	ДокументОбъект = ЭтаФорма.РеквизитФормыВЗначение("Объект");	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Определяем назначенную для данного вида документов периодичность смены номера.
	ПериодСменыНомера = МетаданныеДокумента.ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// Определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;
	ЭтаФорма.ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");	
КонецПроцедуры

// Поместить в архив либо извлечь из архива выбранные строки списка объекта на форме
//
// Параметры:
//  ВыбранныеСтроки	 - Массив	 - строки динамического списка на форме.
//
Процедура ПоместитьВАрхив(Знач ВыбранныеСтроки) Экспорт 
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйЭлемент = ВыбранныеСтроки[0].Ссылка.ПолучитьОбъект();
	
	Если ПервыйЭлемент.ЭтоГруппа
		И ПервыйЭлемент.Архив = Null
	Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакАрхива = Не ПервыйЭлемент.Архив;
	мГруппы = Новый Массив;
	
	Для Каждого выбСтрока Из ВыбранныеСтроки Цикл 
		выбОбъект = выбСтрока.Ссылка.ПолучитьОбъект();
		Если выбОбъект.ЭтоГруппа Тогда
			мГруппы.Добавить(выбОбъект.Ссылка);
		Иначе
			выбОбъект.Архив = ПризнакАрхива;
			выбОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если мГруппы.Количество() > 0 Тогда
		ПоместитьВАрхивЭлементыГруппы(мГруппы, ПризнакАрхива);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьВАрхивЭлементыГруппы(мГруппы, ПризнакАрхива)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыСправочника.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяДокумента КАК ЭлементыСправочника
		|ГДЕ
		|	ЭлементыСправочника.Ссылка В ИЕРАРХИИ(&Группа)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента", мГруппы[0].Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("Группа", мГруппы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		выбОбъект = Выборка.Ссылка.ПолучитьОбъект();
		выбОбъект.Архив = ПризнакАрхива;
		выбОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Формирует подменю операции на форме документа.
//
// Параметры:
//  МассивТипов	 - массив					 - массив из перечисления видов операций этого вида документов.
//  ЭтаФорма	 - ФормаКлиентскогоПриложения	 - форма документа.
//  СтрДействие	 - Строка						 - имя процедуры обработчика команды выбора операции в модуле формы.
//
Процедура УстановитьПодменюОперации(МассивТипов, ЭтаФорма, СтрДействие = "ДействияФормыДействиеУстановитьОперацию") Экспорт
	
	НазваниеПодменю = "ПодменюВидаОперации";
	ЭтаФорма.Элементы.Добавить(НазваниеПодменю, Тип("ГруппаФормы"),ЭтаФорма.КоманднаяПанель);
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы[НазваниеПодменю].Заголовок = "Вид операции";
	
	Для каждого ЗначениеВидОперации из МассивТипов Цикл
		
        Команда = ЭтаФорма.Команды.Добавить(ЗначениеВидОперации.Имя);
		Команда.Действие = СтрДействие;
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка = ЭтаФорма.Элементы.Добавить(ЗначениеВидОперации.Имя, Тип("КнопкаФормы"),ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы[НазваниеПодменю]); 
		Кнопка.ИмяКоманды = Команда.Имя;
		Кнопка.Заголовок = ЗначениеВидОперации.Синоним; 
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти