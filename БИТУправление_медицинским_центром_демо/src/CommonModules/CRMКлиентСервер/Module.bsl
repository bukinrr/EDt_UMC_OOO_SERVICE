#Область ПрограммныйИнтерфейс

// Формирует структуру с перечнем реквизитов документа события, создаваемого подсистемой телефонии.
//
// Параметры:
//  ЗаполнитьПоУмолчанию - Булево - заполнить ли по умолчанию значения реквизитов.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьСтруктуруСобытия(ЗаполнитьПоУмолчанию = Ложь) Экспорт 
	
	ОсновныеПоля = 
		"Клиент,
		|ДатаПлан,
		|ДатаФакт,
		|ФактическийИсполнитель,
		|Цель,
		|Комментарий,
		|СозданАвтоматически";
		
	ПоляЗвонка = 
		"ТипЗвонка,
		|ИсходЗвонка,
		|УспешностьЗвонка,
		|ЗвонокНачат,
		|ЗвонокЗавершен,
		|НомерТелефона,
		|ДлительностьЗвонка,
		|ЗаписьРазговора,
		|бит_НабранныйНомер";
	
	СтруктураСобытия = Новый Структура(ОсновныеПоля + ", " + ПоляЗвонка);
	
	Если ЗаполнитьПоУмолчанию Тогда 
		СтруктураСобытия.ДатаФакт = ТекущаяДата();
		СтруктураСобытия.ФактическийИсполнитель = ОбщегоНазначения.ТекущийПользователь();
		СтруктураСобытия.СозданАвтоматически = Истина;
		СтруктураСобытия.ЗвонокНачат = Истина;
	КонецЕсли;
	
	Возврат СтруктураСобытия;
	
КонецФункции

// Позволяет получить стандартные даты записи листов ожидания
// 
// Возвращаемое значение:
//   СписокЗначений.
//
Функция ПолучитьСтандартныеДатыЗаписиЛистовОжидания() Экспорт 
	
	СписокДат = Новый СписокЗначений;
	СписокДат.Добавить("Неделя",	"Неделя", Истина);
	СписокДат.Добавить("Месяц",		"Месяц", Истина);
	СписокДат.Добавить("ДваМесяца",	"Два месяца", Истина);
	СписокДат.Добавить("ТриМесяца",	"Три месяца", Истина);
	СписокДат.Добавить("Полгода",	"Полгода", Истина);
	СписокДат.Добавить("Год", 		"Год", Истина);
	
	Возврат СписокДат;
	
КонецФункции

// Позволяет получить стандартные периоды записи листов ожидания
// 
// Возвращаемое значение:
//   СписокЗначений.
//
Функция ПолучитьСтандартныеПериодыДатыЗаписиЛистовОжидания() Экспорт
	
	СписокДат = Новый СписокЗначений;
	СписокДат.Добавить("День",		"День", Истина);
	СписокДат.Добавить("Неделя",	"Неделя", Истина);
	СписокДат.Добавить("Месяц",		"Месяц", Истина);
		
	Возврат СписокДат;
	
КонецФункции

// Сформирует период записи по данным листа ожидания.
//
// Параметры:
//  ДатаЗаписи	 - Строка	 - шаг отступа от исходной даты.
//  ПериодЗаписи - Строка	 - тип периода записи.
//  ИсходнаяДата - Дата		 - дата для отсчета даты будущей записи.
// 
// Возвращаемое значение:
//   СтандартныйПериод.
//
Функция СформироватьДатуПериодЗаписи(ДатаЗаписи, ПериодЗаписи = Неопределено, Знач ИсходнаяДата = Неопределено) Экспорт
	
	Если ИсходнаяДата = Неопределено Тогда 
		ИсходнаяДата = ТекущаяДата();
	КонецЕсли;
	
	ДатаНачала = ИсходнаяДата;
	Если ДатаЗаписи = "День" Тогда 
		ДатаНачала = ДатаНачала + 86400;
	ИначеЕсли ДатаЗаписи = "Неделя" Тогда 
		ДатаНачала = ДатаНачала + 7 * 86400;
	ИначеЕсли ДатаЗаписи = "Месяц" Тогда 
		ДатаНачала = ДобавитьМесяц(ДатаНачала, 1);
	ИначеЕсли ДатаЗаписи = "ДваМесяца" Тогда 
		ДатаНачала = ДобавитьМесяц(ДатаНачала, 2);
	ИначеЕсли ДатаЗаписи = "ТриМесяца" Тогда 
		ДатаНачала = ДобавитьМесяц(ДатаНачала, 3);
	ИначеЕсли ДатаЗаписи = "Полгода" Тогда 
		ДатаНачала = ДобавитьМесяц(ДатаНачала, 6);
	ИначеЕсли ДатаЗаписи = "Год" Тогда 
		ДатаНачала = ДобавитьМесяц(ДатаНачала, 12);
	КонецЕсли;
	
	ДатаОкончания = ДатаНачала;
	Если ПериодЗаписи = "Неделя" Тогда
		ДатаОкончания = ДатаОкончания + 7 * 86400;
	ИначеЕсли ПериодЗаписи = "Месяц" Тогда 
		ДатаОкончания = ДобавитьМесяц(ДатаОкончания, 1);
	КонецЕсли;
	
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = ДатаНачала;
	Период.ДатаОкончания = ДатаОкончания;
	
	Возврат Период;
	
КонецФункции

// Получает дату и период записи строками для заполнения в листе ожидания.
//
// Параметры:
//  ПериодЗаписи - СтандартныйПериод - период будущей записи клиента.
//  ИсходнаяДата - Дата				 - дата для отсчета даты будущей записи.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьСтандартныеПромежуткиПоПериодуЗаписи(ПериодЗаписи, ИсходнаяДата = Неопределено) Экспорт
	
	Если ИсходнаяДата = Неопределено Тогда 
		ИсходнаяДата = ТекущаяДата();
	КонецЕсли;
	
	// Определяем период
	Период = Неопределено;
	РазностьДней = (НачалоДня(ПериодЗаписи.ДатаОкончания) - ПериодЗаписи.ДатаНачала) / 86400;
	Если РазностьДней = 0 Тогда 
		Период = "День";
	ИначеЕсли РазностьДней = 7 Тогда 
		Период = "Неделя";
	ИначеЕсли НачалоДня(ПериодЗаписи.ДатаОкончания) = ДобавитьМесяц(ПериодЗаписи.ДатаНачала, 1) Тогда 
		Период = "Месяц";
	КонецЕсли;
	
	// Определяем смещение записи
	Дата = Неопределено;
	Для Каждого СтандартнаяДата Из ПолучитьСтандартныеДатыЗаписиЛистовОжидания() Цикл
		ВычПериод = СформироватьДатуПериодЗаписи(СтандартнаяДата.Значение, , ИсходнаяДата);
		Если ПериодЗаписи.ДатаНачала = ВычПериод.ДатаНачала Тогда
			Дата = СтандартнаяДата.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Дата, Период", Дата, Период); 
	
КонецФункции

// Добавить сообщение в текст переписки на форме.
//
// Параметры:
//  ФорматированныйДокумент	 - ФорматированныйДокумент	 - текст переписки.
//  Сообщение				 - Строка					 - сообщение.
//  Дата					 - Дата						 - дата осообщения.
//  Пользователь			 - СправочникСсылка.Пользователи - автор сообщения.
//  ТекущийПользователь		 - СправочникСсылка.Пользователи - текущий пользователь.
//
Процедура ДобавитьСообщениеВДокумент(ФорматированныйДокумент, Знач Сообщение, Дата = Неопределено, Пользователь = Неопределено, ТекущийПользователь = Неопределено) Экспорт 
	
	Если ПустаяСтрока(Сообщение) Тогда 
		Возврат;
	КонецЕсли;
	
	Сообщение = СокрЛП(Сообщение);
	
	Если Дата = Неопределено Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если ТекущийПользователь = Неопределено Тогда 
		ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда 
		Пользователь = ТекущийПользователь;
	КонецЕсли;
	
	Если Ложь Тогда 
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
	КонецЕсли;
	
	// Сброс цвета
	СтрокаСброс = ФорматированныйДокумент.Добавить(" ", Тип("ТекстФорматированногоДокумента"));
	СтрокаСброс.ЦветТекста = Новый Цвет(0,0,0);
	СтрокаСброс.Шрифт = Новый Шрифт(СтрокаСброс.Шрифт, , , Ложь);

	СтрокаЗаголовок = ФорматированныйДокумент.Добавить(Строка(Пользователь) + " (" + Строка(Дата) + "):", Тип("ТекстФорматированногоДокумента"));
	СтрокаЗаголовок.Шрифт = Новый Шрифт(СтрокаЗаголовок.Шрифт, , , Истина);
	Если Пользователь = ТекущийПользователь Тогда 
		СтрокаЗаголовок.ЦветТекста = Новый Цвет(0, 128, 0);
	Иначе
		СтрокаЗаголовок.ЦветТекста = ДопСерверныеФункцииПовтИсп.ЦветСтиля("ПоясняющийТекст");
	КонецЕсли;
	
	ФорматированныйДокумент.Удалить(СтрокаСброс.ЗакладкаНачала, СтрокаСброс.ЗакладкаКонца); 
	
	// Сброс цвета
	СтрокаСброс = ФорматированныйДокумент.Добавить(" ", Тип("ТекстФорматированногоДокумента"));
	СтрокаСброс.ЦветТекста = Новый Цвет(0,0,0);
	СтрокаСброс.Шрифт = Новый Шрифт(СтрокаСброс.Шрифт, , , Ложь);
	
	ФорматированныйДокумент.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	
	СтрокаСообщение = ФорматированныйДокумент.Добавить(Сообщение, Тип("ТекстФорматированногоДокумента"));
	СтрокаСообщение.Шрифт = Новый Шрифт(СтрокаСообщение.Шрифт, , , Ложь);
	
	ФорматированныйДокумент.Добавить(" ", Тип("ПереводСтрокиФорматированногоДокумента"));
	
КонецПроцедуры

#КонецОбласти
