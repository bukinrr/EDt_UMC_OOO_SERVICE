#Область ПрограммныйИнтерфейс

// Возвращает Истина, если в конфигуарции присутствует функционал групповой записи.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЕстьФункционалГрупповойЗаписи() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если переданный клиент является предопределенным групповым либо это заявка с таким клиентом.
//
// Параметры:
//  ЗаявкаКлиент - СправочникСсылка.Клиенты, ДокументСсылка.Заявка	 - Заявка или клиент.
//  ЭтоКлиент	 - Булево											 - если это точно клиент, передается Истина, если не извество, то Неопределено
// 
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоГрупповаяЗаявка(ЗаявкаКлиент, ЭтоКлиент = Неопределено) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает массив клиентов заявки. 
// В случае не групповой заявки - клиента шапки документа.
//
// Параметры:
//  Заявка	 - ДокументСсылка.Заявка - Заявка.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьКлиентовЗаявки(Заявка) Экспорт
	
	Результат = Новый Массив;
	
	Если ЭтоГрупповаяЗаявка(Заявка, Ложь) Тогда
		Для Каждого СтрокаКлиент Из Заявка.Клиенты Цикл
			Результат.Добавить(СтрокаКлиент.Клиент);
		КонецЦикла;
	Иначе
		Результат.Добавить(Заявка.Клиент);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик события формы ПриСозданииНаСервере для фоормы документа Оказание услуг.
//
// Параметры:
//  Объект				 - ДанныеФормыКоллекция	 - объект документа на форме.
//  СтруктураПараметров	 - Структура	 - данные заполнения нового документа на форме.
//  Параметры			 - Структруа	 - свойство Параметры формы документа.
//
Процедура ОказаниеУслугПриСозданииНаСервере(Объект,СтруктураПараметров,Параметры) Экспорт

	Возврат;
	
КонецПроцедуры

// Обработчик события формы ПриСозданииНаСервере для фоормы документа Прием.
//
// Параметры:
//  Объект				 - ДанныеФормыКоллекция	 - объект документа на форме.
//  СтруктураПараметров	 - Структура	 - данные заполнения нового документа на форме.
//  Параметры			 - Структруа	 - свойство Параметры формы документа.
//
Процедура ПриемПриСозданииНаСервере(Объект,СтруктураПараметров,Параметры) Экспорт

	Возврат;
	
КонецПроцедуры

// Дополняет визуальные настройки при формировании журнала записи по функцональности этого варианта конфигурации.
//
// Параметры:
//  ОсновнаяНастройкаЯчеек	 - СправочникСсылка.КонфигурированиеЯчеекКалендаря	 - настройки журнала записи.
//  Результат				 - Структура										 - уже сфомированные визуальные настройки журнала записи для дополнения.
//
Процедура ЖурналЗаписиПолучитьВизуальныеНастройки(ОсновнаяНастройкаЯчеек, Результат) Экспорт
	
	Результат.Вставить("ЕстьПереопределяемоеФормированиеПодстрокиЯчейкиКлиента", Ложь); 
	
КонецПроцедуры 

// Формирует альтернативный текст ячейки записи в журнале записи, если это предополгается для функцональности этого варианта конфигурации.
//
// Параметры:
//  ПараметрыВызова		 - Структура - сведения о записи.
//  СтандартнаяОбработка - Булево	 - флаг стандартной обработки.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ЖурналЗаписиСформироватьПодстрокуЯчейкиКлиента(ПараметрыВызова, СтандартнаяОбработка) Экспорт
	
	Возврат "";
	
КонецФункции

// Формирует список всех родственников указанного клиента. При необходимости - вместе с самим клиентом.
//
// Параметры:
//  Клиент			 - СправочникСсылка.Клиенты	 - Клиент.
//  ВключаяЕгоСамого - Булево - добавить ли клиента в результат функции.
// 
// Возвращаемое значение:
//   СписокЗначений.
//
Функция ПолучитьРодственниковКлиента(Клиент, ВключаяЕгоСамого = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.СвязиМеждуКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Клиент.Установить(Клиент);
	НаборЗаписей.Прочитать();
	СписокКлиентов = Новый СписокЗначений;
	
	Если ВключаяЕгоСамого Тогда
		СписокКлиентов.Добавить(Клиент);
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если ТипЗнч(Запись.Клиент2) = Тип("СправочникСсылка.Клиенты") Тогда
			СписокКлиентов.Добавить(Запись.Клиент2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокКлиентов;
	
КонецФункции

// Формирует наименование клиента по ФИО и настройке учетной политики.
//
// Параметры:
//  Фамилия	 			- Строка	 - Фамилия.
//  Имя		 			- Строка	 - Имя.
//  Отчество 			- Строка	 - Отчетство.
//  ВидПредставленияФИО - Строка	 - Настройка, определяющая правило фомирования наименования по ФИО.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеПоФИО(Фамилия, Имя, Отчество, ВидПредставленияФИО = Неопределено) Экспорт
	
	Если ВидПредставленияФИО = Неопределено Тогда 
		ВидПредставленияФИО = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВидПредставленияФИО");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПредставленияФИО) Тогда
		ВидПредставленияФИО = "Фамилия Имя Отчество";
	КонецЕсли;
	
	// Выбор настроенного значения
	Если ВидПредставленияФИО = "Фамилия Имя Отчество" Тогда
		Наименование = СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество);
	
	ИначеЕсли ВидПредставленияФИО = "Фамилия И. О." Тогда
		Наименование = СокрЛП(Фамилия)
					 + " " + СокрЛП(Сред(Имя,1,1)) + "."
					 + ?(ЗначениеЗаполнено(Отчество),СокрЛП(Сред(Отчество,1,1)) + ".","");
	
	ИначеЕсли ВидПредставленияФИО = "Фамилия Имя" Тогда
		Наименование = СокрЛП(Фамилия) + " " + СокрЛП(Имя);
	
	ИначеЕсли ВидПредставленияФИО = "Имя Фамилия" Тогда
		Наименование = СокрЛП(Имя) + " " + СокрЛП(Фамилия);
	
	ИначеЕсли ВидПредставленияФИО = "Имя Отчество Фамилия" Тогда
		Наименование = СокрЛП(Имя) + " " + СокрЛП(Отчество) + " " + СокрЛП(Фамилия);
	
	ИначеЕсли ВидПредставленияФИО = "Имя Отчество" Тогда
		Наименование = СокрЛП(Имя) + " " + СокрЛП(Отчество);
	КонецЕсли;
	
	Наименование = СокрЛП(СтрЗаменить(Наименование, "  ", " "));
	
	Возврат Наименование;
	
КонецФункции

// Возвращает остаток по взаиморасчетам. Положительный - клиент должен организации, отрицательный - у клиента депозит.
//
// Параметры:
//
//  Клиент					- элемент справочника Клиенты
//  Дата					- дата получения состояния взаиморасчетов
//  Сделка					- отбираемый разрез взаиморасчетов с клиентом
//  УчитыватьРазрезСделки	- когда Ложь, отбор расчетов по параметру Сделка не осуществляется.
//
// Возвращаемое значение:
//  Число - сумма взаиморасчетов.
//
Функция ПолучитьВзаиморасчетыСКлиентом(Клиент, Дата = Неопределено, Знач Сделка = Неопределено, УчитыватьРазрезСделки = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		
		Если Дата = Неопределено Тогда
			Дата = Дата(1,1,1);
		КонецЕсли;
		
		ТипИзмеренияСделка = Метаданные.НайтиПоПолномуИмени("РегистрНакопления.ВзаиморасчетыСКлиентами").Измерения.Сделка.Тип;
		
		Если ЗначениеЗаполнено(Сделка)
			И ДопСерверныеФункции.ИмяСсылочногоТипа(Сделка) = "Документ.КомплексныйРасчетКлиента"
			И ОбщегоНазначения.ОбщийМодуль("КомплексныеРасчетыКлиентов").РасчетСОбособленнымУчетомВзаиморасчетов(Сделка)
		Тогда
		    СделкаЗначение = ТипИзмеренияСделка.ПривестиЗначение(Сделка);
		Иначе
			СделкаЗначение = ТипИзмеренияСделка.ПривестиЗначение(Неопределено);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВзаиморасчетыСКлиентами.СуммаОстаток КАК Остаток
		               |ИЗ
		               |	РегистрНакопления.ВзаиморасчетыСКлиентами.Остатки(
		               |			&Дата,
		               |			Клиент = &Клиент
		               |				И (&УчитыватьРазрезСделки = ЛОЖЬ ИЛИ Сделка = &Сделка)
		               |	) КАК ВзаиморасчетыСКлиентами";
		Запрос.УстановитьПараметр("Дата", Дата);			   
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Сделка", СделкаЗначение);
		Запрос.УстановитьПараметр("УчитыватьРазрезСделки", УчитыватьРазрезСделки);
		
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() И ЗначениеЗаполнено(Рез.Остаток) Тогда
			Возврат Рез.Остаток;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Возвращает описание состояния расчетов по сделкам у клиента.
//
// Параметры:
//  Клиент	 - Справочник.КлиентСсылка	 - Клиент.
//  Дата	 - Дата	 - Дата остатков.
// 
// Возвращаемое значение:
//   Структура.
//
Функция ПолучитьНаличиеДолговДепозитовПоСделкамКлиента(Клиент, Дата = Неопределено) Экспорт
	
	Результат = Новый Структура("ЕстьДолги, ОписаниеРасчетов", Ложь, "");
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		
		Если Дата = Неопределено Тогда
			Дата = Дата(1,1,1);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКомплексныхРасчетовКлиентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВидыКомплексныхРасчетовКлиентов
		|ИЗ
		|	Справочник.ВидыКомплексныхРасчетовКлиентов КАК ВидыКомплексныхРасчетовКлиентов
		|ГДЕ
		|	ВидыКомплексныхРасчетовКлиентов.ОбособленныйУчетВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКлиентамиОстатки.Клиент КАК Клиент,
		|	ВзаиморасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ВзаиморасчетыСКлиентамиОстатки.Сделка КАК Сделка,
		|	ВзаиморасчетыСКлиентамиОстатки.Сделка.Представление КАК СделкаПредставление,
		|	ВзаиморасчетыСКлиентамиОстатки.Сделка.Вид.Представление КАК ВидПредставление
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКлиентами.Остатки(
		|			&Дата,
		|			Клиент = &Клиент
		|				И Сделка.Вид В
		|					(ВЫБРАТЬ
		|						ВидыКомплексныхРасчетовКлиентов.Ссылка
		|					ИЗ
		|						ВидыКомплексныхРасчетовКлиентов)) КАК ВзаиморасчетыСКлиентамиОстатки"
		;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.ЕстьДолги	= Результат.ЕстьДолги Или Выборка.СуммаОстаток > 0;
			
			ДолгДепозит = ?(Выборка.СуммаОстаток > 0, НСтр("ru='Долг'"), НСтр("ru='Депозит'"));
			СуммаРасчетов = Макс(-Выборка.СуммаОстаток, Выборка.СуммаОстаток);
			
			ОписаниеРасчета = ДолгДепозит + Символы.Таб
							+ ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаРасчетов, ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты()) + " "
							+ Выборка.ВидПредставление + " " + Выборка.СделкаПредставление;
			
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Результат.ОписаниеРасчетов, ОписаниеРасчета, Символы.ПС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает состояние взаиморасчетов с переданным массивом/списком значений клиентов в виде соответствия Клиент-Сумма.
//
// Параметры:
//  Клиенты	 - Массив, СписокЗначений - Клиенты, для которых требуется получить взаиморасчеты.
// 
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьВзаиморасчетыСКлиентами(Клиенты) Экспорт
	
	ТаблицаРасчетов = Новый ТаблицаЗначений;
	ТаблицаРасчетов.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
	ТаблицаРасчетов.Колонки.Добавить("СуммаОбщая", Новый ОписаниеТипов("Число"));
	ТаблицаРасчетов.Колонки.Добавить("ЕстьДолги", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.Колонки.Добавить("ЕстьАвансы", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКлиентами.Клиент КАК Клиент,
	               |	ВзаиморасчетыСКлиентами.СуммаОстаток КАК СуммаОбщая,
	               |	ВзаиморасчетыСКлиентами.Сделка КАК Сделка
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКлиентами.Остатки(&Дата, Клиент В (&Клиенты)) КАК ВзаиморасчетыСКлиентами
	               |ИТОГИ
	               |	СУММА(СуммаОбщая)
	               |ПО
	               |	Клиент";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());			   
	Запрос.УстановитьПараметр("Клиенты", Клиенты);
	
	ВыборкаКлиент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКлиент.Следующий() Цикл
		СтрокаТаблицы = ТаблицаРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаКлиент);
		Выборка = ВыборкаКлиент.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СуммаОбщая > 0 Тогда
				СтрокаТаблицы.ЕстьДолги = Истина;
			ИначеЕсли Выборка.СуммаОбщая < 0 Тогда
				СтрокаТаблицы.ЕстьАвансы = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;
	
КонецФункции

// Возвращает описание состояния расчетов по сделкам у массива клиентов.
//
// Параметры:
//  Клиенты	 - Массив элементов Справочник.КлиентСсылка	 - Клиенты.
//  Дата	 - Дата	 - Дата остатков.
// 
// Возвращаемое значение:
//   Соответствие.
//
Функция ПолучитьНаличиеДолговПоСделкамКлиентов(Клиенты, Дата = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКлиентами.Клиент КАК Клиент,
	               |	ВзаиморасчетыСКлиентами.СуммаОстаток КАК Остаток,
	               |	ВзаиморасчетыСКлиентами.Сделка КАК Сделка
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКлиентами.Остатки(&Дата, Клиент В (&Клиенты)) КАК ВзаиморасчетыСКлиентами
	               |ГДЕ
	               |	ВзаиморасчетыСКлиентами.СуммаОстаток > 0";
	
	Запрос.УстановитьПараметр("Дата", Дата);			   
	Запрос.УстановитьПараметр("Клиенты", Клиенты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Клиент, Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
