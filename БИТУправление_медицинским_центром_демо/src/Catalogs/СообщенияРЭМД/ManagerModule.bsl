#Область ПрограммныйИнтерфейс

Процедура СформироватьНовоеСообщениеПоЭЦПФайла(Документ, ДанныеФайла, ДанныеЭЦПФайла, СпециальностиПоЭМД) Экспорт
	
	Если ДанныеФайла = Неопределено Тогда
		Сообщить("Незаполнены ДанныеФайла - формирование сообщения РЭМД невозможно!");
		Возврат;
	КонецЕсли;
	
	// Получим все подписи документа
	ПодписиВыборка = бит_СертификатыЭЦП.ПолучитьЭлектронныеПодписи(Документ.Ссылка);
	ИдентификаторРЭМД = ИнтеграцияЕГИСЗ_РЭМД.ПолучитьИдентификаторИНомерДокументаДляРЭМД(Документ, Истина);
	
	Подписи = Новый Массив();
	инд = 1;
	Пока ПодписиВыборка.Следующий() Цикл
		
		СтруктураПодписи = ПолучитьДанныеЭлектронныхПодписейИзРезультатаПодписания(Документ, ПодписиВыборка);
		// Будем использовать только данные тех подписей, которые есть во входящем массиве ДанныеЭЦПФайла.
		Для Каждого ПодписьФайла Из ДанныеЭЦПФайла Цикл
			Если ПодписьФайла.УИД_ЭЦП = ПодписиВыборка.УникальныйИдентификатор Тогда
				
				ДвоичныеДанныеПодписи = ПодписиВыборка.Подпись.Получить();
				
				ИмяФайлаПодписи = ИдентификаторРЭМД.ИдентификаторДокумента + "_sign" + инд;
				ПутиДляПодписи = ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайлаПодписи);
				ДвоичныеДанныеПодписи.Записать(ПутиДляПодписи.ПолныйПуть);
				
				ДанныеПодписи = Новый Структура;
				ДанныеПодписи.Вставить("ОтносительныйПутьКФайлуПодписиЭМД",	ПутиДляПодписи.ОтносительныйПуть);
				ДанныеПодписи.Вставить("РольРЭМД",							ПодписьФайла.РольСотрудника);
				ДанныеПодписи.Вставить("Сотрудник",							СтруктураПодписи.Сотрудник);
				ДанныеПодписи.Вставить("ЭтоПодписьМО",						СтруктураПодписи.ЭтоПодписьМО);
				ДанныеПодписи.Вставить("УИД_ЭЦП",							ПодписьФайла.УИД_ЭЦП);
				ДанныеПодписи.Вставить("ДолжностьМинздрава",				ПодписьФайла.ДолжностьМинздрава);
				ДанныеПодписи.Вставить("СпециальностьМинздрава",			СпециальностиПоЭМД.Получить(ПодписьФайла.УИД_ЭЦП));
				
				Подписи.Добавить(ДанныеПодписи);
				
				инд = инд + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Документ",				Документ);
	ДанныеСообщения.Вставить("ПутьКФайлуЭМД",			ДанныеФайла.ИмяФайла);
	ДанныеСообщения.Вставить("Клиент",					Документ.Клиент);
	ДанныеСообщения.Вставить("ИдентификаторДокумента",	ИдентификаторРЭМД.ИдентификаторДокумента);
	ДанныеСообщения.Вставить("НомерДокумента",			ИдентификаторРЭМД.НомерДокумента);
	ДанныеСообщения.Вставить("ВидДокумента",			ДанныеФайла.ВидДокументаШаблона);
	ДанныеСообщения.Вставить("НомерВерсии",				Документ);
	
	// Когда требуется перезаписать существующее сообщение, то ссылка на него приходит в структуре ДанныеФайла
	Если ДанныеФайла.Свойство("СообщениеРЭМД") Тогда
		ДанныеСообщения.Вставить("СообщениеРЭМД", ДанныеФайла.СообщениеРЭМД);
	КонецЕсли;
	Если ДанныеФайла.Свойство("УИД_Шаблона") Тогда
		ДанныеСообщения.Вставить("УИД_Шаблона", ДанныеФайла.УИД_Шаблона);
	КонецЕсли;
	
	СообщениеРЭМДСсылка = ДобавитьСообщениеВСправочник(ДанныеСообщения, Подписи);
	
	ДанныеФайла.Вставить("СообщениеРЭМД", СообщениеРЭМДСсылка);
	
КонецПроцедуры

//TODO: именно эту функцию потом встроить в процесс подписания файлов с помощью ЭЦП
Функция СформироватьФайлыЭМДПоМД(Документ, СотрудникУстановившийПодпись, ДолжностиМЗ, ТекстыОшибок) Экспорт
	
	ФайлыЭМД = Новый Массив;
	
	ПутьКАрхивуРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПутьКАрхивуРЭМД();
	
	ДополнительныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ДополнительныеПараметрыДляРаботыССЭМД();
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Документ);
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		Шаблоны = Документ.ШаблоныПриема.Выгрузить();
		
		ВерсииШаблонов = Новый ТаблицаЗначений;
		ВерсииШаблонов.Колонки.Добавить("ВерсияШаблона");
		ВерсииШаблонов.Колонки.Добавить("ШаблонПриема");
		ДокументыПриемаКлиентСервер.ЗаполнитьТаблицуВерсийШаблонов(ВерсииШаблонов, Документ);
		
		Для Каждого СтрокаШаблона Из Шаблоны Цикл
			
			СтрокаВерсии = ВерсииШаблонов.Найти(СтрокаШаблона.ШаблонПриема, "ШаблонПриема");
			Если СтрокаВерсии <> Неопределено Тогда
				ДополнительныеПараметры.ШаблонОсмотра = СтрокаВерсии.ВерсияШаблона;
			Иначе
				ДополнительныеПараметры.ШаблонОсмотра = СтрокаШаблона.ШаблонПриема;
			КонецЕсли;
			
			ДополнительныеПараметры.УИДШаблона		= СтрокаШаблона.УИД;
			ДополнительныеПараметры.ИндексШаблона	= Шаблоны.Индекс(СтрокаШаблона);
			ДополнительныеПараметры.СтрокаШаблона	= СтрокаШаблона;
			
			ДолжностьМЗ = ДолжностиМЗ.Получить(СтрокаШаблона.УИД);
			СформироватьФайлЭМД(Документ, ПутьКАрхивуРЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстыОшибок, ФайлыЭМД, ДополнительныеПараметры);
		КонецЦикла;
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		Если ЗначениеЗаполнено(Документ.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
			
			ДополнительныеПараметры.ШаблонОсмотра		 = Документ.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
			ДополнительныеПараметры.ВредныйФакторСправки = Документ.Номенклатура.ВредныйФакторСправки;
			
			УИДПриказа = ИнтеграцияЕГИСЗВызовСервера.ПолучитьУИДПоПриказуВредномуФактору(Документ, Документ.Номенклатура.ВредныйФакторСправки);
			ДолжностьМЗ = ДолжностиМЗ.Получить(УИДПриказа);
			СформироватьФайлЭМД(Документ, ПутьКАрхивуРЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстыОшибок, ФайлыЭМД, ДополнительныеПараметры);
		Иначе
			МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
			ОбработанныеПриказы = Новый Массив;
			Для Каждого СтрокаФактора Из Документ.ФакторыИУсловияРаботы Цикл
				Если МодульМедосмотрыСервер.ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					УИДПриказа = ИнтеграцияЕГИСЗВызовСервера.ПолучитьУИДПоПриказуВредномуФактору(Документ, СтрокаФактора.Фактор);
					
					ДополнительныеПараметры.УИДШаблона			 = УИДПриказа;
					ДополнительныеПараметры.ШаблонОсмотра		 = СтрокаФактора.Фактор.ШаблонОсмотраСправки;
					ДополнительныеПараметры.ВредныйФакторСправки = СтрокаФактора.Фактор;
					ДополнительныеПараметры.ПриказМО			 = Неопределено;
					
					ДолжностьМЗ = ДолжностиМЗ.Получить(УИДПриказа);
					СформироватьФайлЭМД(Документ, ПутьКАрхивуРЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстыОшибок, ФайлыЭМД, ДополнительныеПараметры);
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор);
				Иначе
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор.Приказ) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					УИДПриказа = ИнтеграцияЕГИСЗВызовСервера.ПолучитьУИДПоПриказуВредномуФактору(Документ, СтрокаФактора.Фактор.Приказ);
					
					ДополнительныеПараметры.УИДШаблона			 = УИДПриказа;
					ДополнительныеПараметры.ШаблонОсмотра		 = Неопределено;
					ДополнительныеПараметры.ВредныйФакторСправки = Неопределено;
					ДополнительныеПараметры.ПриказМО			 = СтрокаФактора.Фактор.Приказ;
					
					ДолжностьМЗ = ДолжностиМЗ.Получить(УИДПриказа);
					СформироватьФайлЭМД(Документ, ПутьКАрхивуРЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстыОшибок, ФайлыЭМД, ДополнительныеПараметры);
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор.Приказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
		ДолжностьМЗ = ДолжностиМЗ.Получить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		СформироватьФайлЭМД(Документ, ПутьКАрхивуРЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстыОшибок, ФайлыЭМД, ДополнительныеПараметры);
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		ДолжностьМЗ = ДолжностиМЗ.Получить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		СформироватьФайлЭМД(Документ, ПутьКАрхивуРЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстыОшибок, ФайлыЭМД, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ФайлыЭМД;
	
КонецФункции

Функция ПолучитьДанныеЭлектронныхПодписейИзРезультатаПодписания(ДокументСсылка, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ОтраслевыеДополнения.СотрудникПользователяПоФилиалу(ДанныеПодписи.УстановившийПодпись, РаботаСДокументамиСервер.ФилиалДокумента(ДокументСсылка));
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		ВызватьИсключение СтрШаблон("У пользователя ""%1"" нет подходящего сотрудника для ЭМД.", ДанныеПодписи.УстановившийПодпись);
	КонецЕсли;
	
	ЭтоПодписьМО = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьСертификатПодписанияСообщенийSOAP().Отпечаток = ДанныеПодписи.Отпечаток;
	
	Возврат Новый Структура("ДвоичныеДанныеПодписи, Сотрудник, ЭтоПодписьМО", ДанныеПодписи.Подпись.Получить(), Сотрудник, ЭтоПодписьМО);
	
КонецФункции

Процедура ЗаписатьТекстОшибки(СообщениеРЭМД, Ошибка) Экспорт
	
	Объект = СообщениеРЭМД.ПолучитьОбъект();
	
	Если ТипЗнч(Ошибка) = Тип("Структура") Тогда
		Текст = "";
		
		Если Ошибка.Свойство("ТекстОшибки")
			И ЗначениеЗаполнено(Ошибка.ТекстОшибки)
		Тогда
			Текст = Ошибка.ТекстОшибки;
		Иначе
			Для Каждого Деталь Из Ошибка.Детали Цикл
				Текст = Текст + ?(Текст <> "", Символы.ПС, "") + стрШаблон("%1 %2", Деталь.Код, Деталь.Сообщение);
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.ТекстПоследнейОшибки <> Текст
			Или Объект.Отправить = Истина
			Или Объект.Обновить = Истина
		Тогда
			Объект.ТекстПоследнейОшибки = Текст;
			Объект.Отправить = Ложь;
			Объект.Обновить = Ложь;
			Объект.Записать();
		КонецЕсли;
	Иначе
		
		Если Объект.ТекстПоследнейОшибки <> Ошибка
			Или Объект.Отправить = Истина
			Или Объект.Обновить = Истина
		Тогда
			Объект.ТекстПоследнейОшибки = Ошибка;
			Объект.Отправить = Ложь;
			Объект.Обновить = Ложь;
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДокументаПоEmdrId(ИдентификаторРЭМД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияРЭМД.Ссылка КАК Ссылка,
		|	СообщенияРЭМД.ПутьКФайлуЭМД КАК ОтносительныйПутьКФайлуЭМД,
		|	СообщенияРЭМД.Документ КАК ДокументИнформационнойБазы,
		|	СообщенияРЭМД.НомерДокумента КАК НомерДокумента,
		|	СообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	СообщенияРЭМД.ИдентификаторРЭМД = &ИдентификаторРЭМД";
	Запрос.УстановитьПараметр("ИдентификаторРЭМД", ИдентификаторРЭМД);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьEmdrId(ИдентификаторДокумента, ИдентификаторРЭМД, НомерВерсии, ХранитьДо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияРЭМД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	(СообщенияРЭМД.ИдентификаторДокумента = &ИдентификаторДокумента)
		//|			ИЛИ СообщенияРЭМД.ИдентификаторШаблонаЭМД = &ИдентификаторДокумента)
		|	И СообщенияРЭМД.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ИдентификаторДокумента", ИдентификаторДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект.ИдентификаторРЭМД <> ИдентификаторРЭМД Или Объект.НомерВерсии <> НомерВерсии Тогда
			Объект.ИдентификаторРЭМД = ИдентификаторРЭМД;
			Объект.НомерВерсии = НомерВерсии;
			Если ХранитьДо <> Неопределено Тогда
				Объект.ХранитьДо = ХранитьДо;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеДокументаПоУИДСообщения(УИДСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияРЭМД.Ссылка КАК Ссылка,
		|	СообщенияРЭМД.ПутьКФайлуЭМД КАК ОтносительныйПутьКФайлуЭМД,
		|	СообщенияРЭМД.Документ КАК ДокументИнформационнойБазы,
		|	СообщенияРЭМД.НомерДокумента КАК НомерДокумента,
		|	СообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	СообщенияРЭМД.НомерВерсии КАК НомерВерсии
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	СообщенияРЭМД.ПометкаУдаления = ЛОЖЬ
		|	И СообщенияРЭМД.ИдентификаторДокумента = &УИДДокумента";
	Запрос.УстановитьПараметр("УИДДокумента", УИДСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеДокументаПоУИД(УИД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияРЭМД.Ссылка КАК Ссылка,
		|	СообщенияРЭМД.ПутьКФайлуЭМД КАК ОтносительныйПутьКФайлуЭМД,
		|	СообщенияРЭМД.Документ КАК ДокументИнформационнойБазы,
		|	СообщенияРЭМД.НомерДокумента КАК НомерДокумента,
		|	СообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	СообщенияРЭМД.НомерВерсии КАК НомерВерсии
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	СообщенияРЭМД.ПометкаУдаления = ЛОЖЬ
		|	И (СообщенияРЭМД.ИдентификаторШаблонаЭМД = &УИД
		|			ИЛИ СообщенияРЭМД.НомерДокумента = &УИД)";
	Запрос.УстановитьПараметр("УИД", УИД);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеДокументаПоУИДиНомеруДокумента(УИД_Шаблона, УИД_Документа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияРЭМД.Ссылка КАК Ссылка,
		|	СообщенияРЭМД.ПутьКФайлуЭМД КАК ОтносительныйПутьКФайлуЭМД,
		|	СообщенияРЭМД.Документ КАК ДокументИнформационнойБазы,
		|	СообщенияРЭМД.НомерДокумента КАК НомерДокумента,
		|	СообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	СообщенияРЭМД.НомерВерсии КАК НомерВерсии
		|ИЗ
		|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|ГДЕ
		|	СообщенияРЭМД.ПометкаУдаления = ЛОЖЬ
		|	И (СообщенияРЭМД.ИдентификаторШаблонаЭМД = &УИД
		|			ИЛИ СообщенияРЭМД.НомерДокумента = &УИД)
		|	И СообщенияРЭМД.НомерДокумента = &НомерДокумента";
	Запрос.УстановитьПараметр("УИД", УИД_Шаблона);
	Запрос.УстановитьПараметр("НомерДокумента", УИД_Документа);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьФайлЭМД(Документ, ПутьКАрхивуРЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстыОшибок, ФайлыЭМД, ДополнительныеПараметры)
	
	ИдентификаторРЭМД = ИнтеграцияЕГИСЗ_РЭМД.ПолучитьИдентификаторИНомерДокументаДляРЭМД(Документ, Истина, ДополнительныеПараметры.УИДШаблона);
	ИмяФайлаБезРасширения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКАрхивуРЭМД) + ИдентификаторРЭМД.ИдентификаторДокумента;
	
	ТекстОшибки = "";
	ФайлЭМД = СформироватьФайлЭМДПоШаблону(Документ, ИмяФайлаБезРасширения, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстОшибки, ПутьКАрхивуРЭМД, ДополнительныеПараметры);
	Если ФайлЭМД <> Неопределено Тогда
		ФайлыЭМД.Добавить(ФайлЭМД);
	ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
		ТекстыОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьФайлЭМДПоШаблону(Документ, ИмяФайлаБезРасширения, СотрудникУстановившийПодпись, ДолжностьМЗ, ТекстОшибки, ПутьКАрхивуРЭМД, ДополнительныеПараметры)
	
	СвойстваЭМД = ИнтеграцияЕГИСЗ_РЭМД.СформироватьСвойстваЭМД(Документ, ДополнительныеПараметры);
	
	ФайлСформирован = Ложь;
	ВидДокумента = СвойстваЭМД.ВидРЭМД;
	
	ШаблонОсмотра = ДополнительныеПараметры.ШаблонОсмотра;
	СтрокаШаблона = ДополнительныеПараметры.СтрокаШаблона;
	
	// ЭМД формируются только по тем шаблонам, у которых указан вид ЭМД из специального классификатора.
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		НаименованиеШаблона = "";
		Если ЗначениеЗаполнено(ШаблонОсмотра) Тогда
			НаименованиеШаблона = ?(ТипЗнч(ШаблонОсмотра) = Тип("СправочникСсылка.ШаблоныHTML"), ШаблонОсмотра.Наименование, ШаблонОсмотра.Владелец.Наименование);
		КонецЕсли;
		
		МассивСтрок = ВидДокумента.Атрибуты.НайтиСтроки(Новый Структура("Ключ", "FORMAT"));
		// Конечный формат файла либо *.xml, либо *.PDF/A - в зависимости от описания выбранного вида ЭМД.
		Если МассивСтрок.Количество() > 0 И МассивСтрок[0].Значение = "2" Тогда
			ИмяФайла = ИмяФайлаБезРасширения + ".xml";
			
			Попытка
				ТекстXML = ИнтеграцияЕГИСЗВызовСервера.ПолучитьXMLПоСсылкеМД(Документ, СвойстваЭМД, СотрудникУстановившийПодпись, ДолжностьМЗ, НаименованиеШаблона, ТекстОшибки, ДополнительныеПараметры);
				Если ТекстXML <> Неопределено Тогда
					XML = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
					XML.ЗаписатьСтроку(ТекстXML);
					XML.Закрыть();
					ФайлСформирован = Истина;
				//Иначе
				//	ТекстОшибки = СтрШаблон(НСтр("ru='Для шаблона ""%1"" выбран вид регистрируемого электронного документа ""%2"", не поддерживаемый программой!'"), НаименованиеШаблона, ШаблонОсмотра.ВидДокумента.Наименование);
				КонецЕсли;
			Исключение
				ТекстОшибки = СформироватьОшибкуФормированияXML(Документ, НаименованиеШаблона);
			КонецПопытки;
		Иначе
			ИмяФайла = ИмяФайлаБезРасширения + ".pdf";
			
			ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Документ);
			Если ИмяТипаДокумента = "Документ.Прием" Тогда
				
				ТекстДляПечати = РаботаСШаблонамиHTMLКлиентСервер.УдалитьТекстHTMLЭЦП(СтрокаШаблона.ТекстДляПечати, Истина);
				ДанныеРисунков = РаботаСШаблонамиHTML.ДобавитьРисункиКартинок(ТекстДляПечати, Документ, ДополнительныеПараметры.ИндексШаблона);
				ТекстДляПечати = РаботаСШаблонамиHTML.ДекодироватьИзображенияHTMLТекста(ТекстДляПечати, ШаблонОсмотра.СписокИзображений, ДанныеРисунков);
				
				Если ТекстДляПечати <> Неопределено Тогда
					ДДФайлаPDF = РаботаСШаблонамиHTMLКлиентСервер.ПреобразоватьHTMLвPDF(ТекстДляПечати, ОбщегоНазначения.ЭтоLinuxСервер(), Ложь, , Истина, Истина);
					Если ДДФайлаPDF <> Неопределено Тогда
						Попытка
							ДДФайлаPDF.Записать(ИмяФайла);
							ФайлСформирован = Истина;
						Исключение КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ФайлСформирован Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Форматирование шаблона: %1 в pdf не удалась!'"), НаименованиеШаблона);
				КонецЕсли;
				
			ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
				
				Если СформироватьPDFСправки(Документ.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки, Документ.ПараметрыПриема, ИмяФайла) Тогда
					ФайлСформирован = Истина;
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Форматирование шаблона: %1 в pdf не удалась!'"), НаименованиеШаблона);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ФайлСформирован Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подготовим все необходимые данные, чтобы можно было сопоставить полученный файл ЭМД с шаблоном HTML, по которому он сформирован.
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("ДД",					Новый ДвоичныеДанные(ИмяФайла));
	ДанныеФайла.Вставить("ИмяФайла",			ИмяФайла);
	ДанныеФайла.Вставить("ШаблонПриема",		ШаблонОсмотра);
	ДанныеФайла.Вставить("ВидДокументаШаблона",	ВидДокумента);
	ДанныеФайла.Вставить("ОтносительныйПуть",	ПолучитьОтносительныйПутьФайлаВАрхиве(ИмяФайла));
	
	Если СтрокаШаблона <> Неопределено Тогда
		ДанныеФайла.Вставить("УИД_Шаблона", СтрокаШаблона.УИД);
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.ПриказМО) Тогда
		ДанныеФайла.Вставить("УИД_Шаблона", ИнтеграцияЕГИСЗВызовСервера.ПолучитьУИДПоПриказуВредномуФактору(Документ, ДополнительныеПараметры.ПриказМО));
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.ВредныйФакторСправки) Тогда
		ДанныеФайла.Вставить("УИД_Шаблона", ИнтеграцияЕГИСЗВызовСервера.ПолучитьУИДПоПриказуВредномуФактору(Документ, ДополнительныеПараметры.ВредныйФакторСправки));
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ПолучитьОтносительныйПутьФайлаВАрхиве(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Имя;
	
КонецФункции

Функция СформироватьОшибкуФормированияXML(Документ, НаименованиеШаблона)
	
	Если ИнтеграцияЕГИСЗВызовСервера.ДокументЯвляетсяЗаключениемМедосмотра(Документ) Тогда
		
		Возврат СтрШаблон(НСтр("ru='Форматирование файла xml по документу медосмотра не удалось!'"));
		
	КонецЕсли;
		
	Возврат СтрШаблон(НСтр("ru='Форматирование файла xml по шаблону: %1 не удалось!'"), НаименованиеШаблона);
	
КонецФункции

Функция СформироватьPDFСправки(Шаблон, ПараметрыПриема, ИмяФайла)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Область(1,1).Текст = НСтр("ru='Не удалось сформировать форму для печати'");
	
	Если ЗначениеЗаполнено(Шаблон)
		И Шаблон.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент
	Тогда
		ТабДок = Шаблон.ТабличныйДокумент.Получить();
		Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
			
			ЗначенияПараметров = Новый Структура;
			Для Каждого СтрокаПараметра Из Шаблон.СоответствияПараметрам Цикл
				Если ЗначениеЗаполнено(СтрокаПараметра.Параметр) Тогда
					мсСтрокаПриема = ПараметрыПриема.НайтиСтроки(Новый Структура("Параметр", СтрокаПараметра.Параметр));
					Если мсСтрокаПриема.Количество() <> 0 Тогда
						Попытка
							Значение = мсСтрокаПриема[0].Значение;
							Значение = Формат(Значение, СтрокаПараметра.Параметр.ФорматнаяСтрока);
							
							ЗначенияПараметров.Вставить(СтрокаПараметра.Наименование, Значение);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТабДок.Параметры.Заполнить(ЗначенияПараметров);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ТабДок);
			
			// Настройки печати
			ТабличныйДокумент.ИмяПараметровПечати = Строка(Шаблон.УникальныйИдентификатор());
			
			ТабличныйДокумент.АвтоМасштаб = Шаблон.ПечатьАвтомасштабирование;
			ТабличныйДокумент.ОриентацияСтраницы = ?(Шаблон.ПечатьОриентацияСтраницы, ОриентацияСтраницы.Ландшафт, ОриентацияСтраницы.Портрет);
			
			Если ЗначениеЗаполнено(Шаблон.ПечатьРазмерБумаги) Тогда
				ТабличныйДокумент.РазмерСтраницы = Шаблон.ПечатьРазмерБумаги;
			КонецЕсли;
			
			Если Шаблон.ПечатьДвусторонняяПечать = 0 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ИспользоватьНастройкиПринтера;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 1 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.Нет;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 2 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВверх;
			ИначеЕсли Шаблон.ПечатьДвусторонняяПечать = 3 Тогда
				ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево;
			КонецЕсли;
			
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.15.0") > 0 Тогда
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF_A_1);
			Иначе
				ВызватьИсключение(НСтр("ru='Отправка в РЭМД медицинских документов в формате pdf возможна при использовании платформы не ниже 8.3.15 версии'"));
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайла)
	ПутьКХранилищу = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПутьКАрхивуРЭМД();
	
	Если Не ЗначениеЗаполнено(ПутьКХранилищу) Тогда
		
		ВызватьИсключение "Не заполнен путь к хранилищу файлов ЭМД.";
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьOIDИНаменованиеМедицинскойОрганизации();
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.КодOIDМедицинскойОрганизации) Тогда
		
		ВызватьИсключение "Не заполнен ""Код OID Медицинской организации"" у организации: " + РеквизитыОрганизации.Наименование;
	КонецЕсли;
	
	// путь исключая путь к хранилищу.
	ОтносительныйПуть = РеквизитыОрганизации.КодOIDМедицинскойОрганизации + ПолучитьРазделительПути()
				+ Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд") + ПолучитьРазделительПути();
				
	ПолныйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКХранилищу)
					+ ОтносительныйПуть;
	
	ИмяФайлаСПутем = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(ПолныйПуть, ИмяФайла);
	ПолноеИмяФайлаСПутем = ПолныйПуть + ИмяФайлаСПутем;
	
	ИмяФайлаСОтносительнымПутем = ОтносительныйПуть + ИмяФайлаСПутем; // путь исключая путь к хранилищу.
	
	Возврат Новый Структура("ПолныйПуть, ОтносительныйПуть", ПолноеИмяФайлаСПутем, ИмяФайлаСОтносительнымПутем);
	
КонецФункции

Функция ДобавитьСообщениеВСправочник(ДанныеСообщения, ЭлектронныеПодписи)
	
	Если ДанныеСообщения.Свойство("СообщениеРЭМД")
		И ЗначениеЗаполнено(ДанныеСообщения.СообщениеРЭМД)
	Тогда
		ОбъектСообщения = ДанныеСообщения.СообщениеРЭМД.ПолучитьОбъект();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияРЭМД.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СообщенияРЭМД КАК СообщенияРЭМД
			|ГДЕ
			|	СообщенияРЭМД.ИдентификаторДокумента = &ИдентификаторДокумента
			|	И НЕ СообщенияРЭМД.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИдентификаторДокумента", ДанныеСообщения.ИдентификаторДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОбъектСообщения = Выборка.Ссылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ОбъектСообщения.ИдентификаторРЭМД)
				И Не ДанныеСообщения.Документ.Тестовый
			Тогда
				ОбъектСообщения.НомерВерсии = ОбъектСообщения.НомерВерсии + 1;
			КонецЕсли;
		Иначе
			Если ДанныеСообщения.Документ.Тестовый Тогда
				Возврат Справочники.СообщенияРЭМД.ПустаяСсылка();
			КонецЕсли;
			
			ОбъектСообщения = Справочники.СообщенияРЭМД.СоздатьЭлемент();
			ОбъектСообщения.ДатаСоздания = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ОбъектСообщения.Наименование	= ДанныеСообщения.ИдентификаторДокумента;
		ОбъектСообщения.Документ		= ДанныеСообщения.Документ;
		ОбъектСообщения.Клиент			= ДанныеСообщения.Клиент;
		ОбъектСообщения.ВидДокумента	= ДанныеСообщения.ВидДокумента;
		ОбъектСообщения.НомерДокумента	= ДанныеСообщения.НомерДокумента;
	КонецЕсли;
	
	ОбъектСообщения.ИдентификаторДокумента	= ДанныеСообщения.ИдентификаторДокумента;
	ОбъектСообщения.ПутьКФайлуЭМД			= ДанныеСообщения.ПутьКФайлуЭМД;
	ОбъектСообщения.ТекстПоследнейОшибки	= "";
	
	Если ВыполненоТребованиеУстановкиПодписиМО(ДанныеСообщения.ВидДокумента, ЭлектронныеПодписи) Тогда
		ОбъектСообщения.Обновить	= Не ДанныеСообщения.Документ.Тестовый И ЗначениеЗаполнено(ОбъектСообщения.Ссылка);
		ОбъектСообщения.Отправить	= Не ДанныеСообщения.Документ.Тестовый;
	КонецЕсли;
	
	Если ДанныеСообщения.Свойство("УИД_Шаблона") Тогда
		ОбъектСообщения.ИдентификаторШаблонаЭМД = ДанныеСообщения.УИД_Шаблона;
	КонецЕсли;
	
	ОбъектСообщения.ЭлектронныеПодписиЭМД.Очистить();
	
	Для Каждого Подпись Из ЭлектронныеПодписи Цикл
		НоваяСтрока = ОбъектСообщения.ЭлектронныеПодписиЭМД.Добавить();
		НоваяСтрока.ПутьКФайлуПодписиЭМД	= Подпись.ОтносительныйПутьКФайлуПодписиЭМД;
		НоваяСтрока.Сотрудник				= Подпись.Сотрудник;
		НоваяСтрока.РольРЭМД				= Подпись.РольРЭМД;
		НоваяСтрока.УИД_ЭЦП					= Подпись.УИД_ЭЦП;
		НоваяСтрока.ДолжностьМинздрава		= Подпись.ДолжностьМинздрава;
		НоваяСтрока.СпециальностьМинздрава	= Подпись.СпециальностьМинздрава;
		
		//TODO: Проверка на подпись МО
		Если ИнтеграцияЕГИСЗ_РЭМД.ВидДокументаТребуетПодписьМО(ДанныеСообщения.ВидДокумента) Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.РольРЭМД)
				И Подпись.ЭтоПодписьМО
			Тогда
				Если ОбъектСообщения.ЭлектронныеПодписиЭМД.Найти(Истина, "ЭтоПодписьМО") = Неопределено Тогда
					СтрокаПодписиМО = ОбъектСообщения.ЭлектронныеПодписиЭМД.Добавить();
					СтрокаПодписиМО.ПутьКФайлуПодписиЭМД = Подпись.ОтносительныйПутьКФайлуПодписиЭМД;
					СтрокаПодписиМО.Сотрудник			 = Подпись.Сотрудник;
					СтрокаПодписиМО.ЭтоПодписьМО		 = Истина;
					СтрокаПодписиМО.УИД_ЭЦП				 = Подпись.УИД_ЭЦП;
				КонецЕсли;
			Иначе
				НоваяСтрока.ЭтоПодписьМО = Подпись.ЭтоПодписьМО;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектСообщения.Записать();
	
	Если ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьРежимОтправкиСообщения() = Перечисления.РежимыОтправкиСообщенийРЭМД.ПриПодписанииДокумента
		И УстановленыПодписиПоВсемПравилам(ОбъектСообщения.Ссылка)
		И Не ДанныеСообщения.Документ.Тестовый
		И ВыполненоТребованиеУстановкиПодписиМО(ДанныеСообщения.ВидДокумента, ЭлектронныеПодписи)
	Тогда
		Попытка
			РезультатОтРЭМД = ИнтеграцияЕГИСЗ_РЭМД.ЗарегистрироватьДокументВРЭМД(ОбъектСообщения.Ссылка);
			
			Если РезультатОтРЭМД <> Истина Тогда
				Если Не (ТипЗнч(РезультатОтРЭМД) = Тип("Структура")
						И РезультатОтРЭМД.Свойство("ДостигнутЛимит")
						И РезультатОтРЭМД.ДостигнутЛимит = Истина)
				Тогда
					ЗаписатьТекстОшибки(ОбъектСообщения.Ссылка, РезультатОтРЭМД);
				КонецЕсли;
			Иначе
				ЗаписатьТекстОшибки(ОбъектСообщения.Ссылка, "");
			КонецЕсли;
		Исключение
			Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьТекстОшибки(ОбъектСообщения.Ссылка, Текст);
			ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ОбъектСообщения.Ссылка);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбъектСообщения.Ссылка;
	
КонецФункции

Функция УстановленыПодписиПоВсемПравилам(СообщениеРЭМД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭМД.СообщениеРЭМД КАК СообщениеРЭМД,
		|	ЭМД.УИД КАК УИД,
		|	ЭМД.УИД_Шаблона КАК УИД_Шаблона
		|ПОМЕСТИТЬ ЭМД
		|ИЗ
		|	&ЭМД КАК ЭМД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиИПодписиЭМД.РольСотрудника КАК РольСотрудника,
		|	РолиИПодписиЭМД.УИД_ЭЦП КАК УИД_ЭЦП,
		|	РолиИПодписиЭМД.УИД_ЭМД КАК УИД_ЭМД
		|ПОМЕСТИТЬ РолиИПодписиЭМД
		|ИЗ
		|	&РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РЭМДПравилаПодписи.Ссылка КАК Правило,
		|	РЭМДПравилаПодписи.МинКолПодписей КАК МинКолПодписей,
		|	ЭлектронныеПодписи.УникальныйИдентификатор КАК УникальныйИдентификатор
		|ПОМЕСТИТЬ ПодписиПоРолям
		|ИЗ
		|	Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияРЭМД КАК СообщенияРЭМД
		|		ПО (СообщенияРЭМД.Ссылка = &СообщениеРЭМД)
		|			И (СообщенияРЭМД.ВидДокумента = РЭМДПравилаПодписи.ВидДокумента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЭМД КАК ЭМД
		|		ПО (ЭМД.УИД_Шаблона = &ИдентификаторШаблонаЭМД)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|		ПО (ЭМД.УИД = РолиИПодписиЭМД.УИД_ЭМД)
		|			И (РолиИПодписиЭМД.РольСотрудника = РЭМДПравилаПодписи.Роль)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО (ЭлектронныеПодписи.Объект = СообщенияРЭМД.Документ)
		|			И (ЭлектронныеПодписи.УникальныйИдентификатор = РолиИПодписиЭМД.УИД_ЭЦП)
		|			И (ЭлектронныеПодписи.ПодписанФайлЭМД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПодписиПоРолям.Правило) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПодписиПоРолям.Правило КАК Правило,
		|		ПодписиПоРолям.МинКолПодписей КАК МинКолПодписей
		|	ИЗ
		|		ПодписиПоРолям КАК ПодписиПоРолям) КАК ПодписиПоРолям
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПодписиПоРолям.Правило КАК Правило,
		|			КОЛИЧЕСТВО(ПодписиПоРолям.УникальныйИдентификатор) КАК КоличествоЭП
		|		ИЗ
		|			ПодписиПоРолям КАК ПодписиПоРолям
		|		ГДЕ
		|			НЕ ПодписиПоРолям.УникальныйИдентификатор ЕСТЬ NULL
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПодписиПоРолям.Правило) КАК КоличествоЭППоПравилам
		|		ПО (КоличествоЭППоПравилам.Правило = ПодписиПоРолям.Правило)
		|ГДЕ
		|	ПодписиПоРолям.МинКолПодписей > ЕСТЬNULL(КоличествоЭППоПравилам.КоличествоЭП, 0)";
	
	Запрос.УстановитьПараметр("СообщениеРЭМД",				СообщениеРЭМД);
	Запрос.УстановитьПараметр("ЭМД",						СообщениеРЭМД.Документ.ЭМД.Выгрузить());
	Запрос.УстановитьПараметр("РолиИПодписиЭМД",			СообщениеРЭМД.Документ.РолиИПодписиЭМД.Выгрузить());
	Запрос.УстановитьПараметр("ИдентификаторШаблонаЭМД",	Новый УникальныйИдентификатор(СообщениеРЭМД.ИдентификаторШаблонаЭМД));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество = 0;
	
КонецФункции

Функция ВыполненоТребованиеУстановкиПодписиМО(ВидДокумента, МассивПодписей)
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяПодписьМО = Истина;
	Попытка
		ТребуетсяПодписьМО = Булево(ВидДокумента.Атрибуты.Найти("MO_SIGN").Значение) = Истина;
	Исключение КонецПопытки;
	
	Если Не ТребуетсяПодписьМО Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаПодписи Из МассивПодписей Цикл
		Если СтрокаПодписи.ЭтоПодписьМО Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
