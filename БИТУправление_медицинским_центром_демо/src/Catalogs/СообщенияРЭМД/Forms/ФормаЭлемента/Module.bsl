#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОтправленныеСообщения, "ИдентификаторДокумента", Объект.ИдентификаторДокумента, ВидСравненияКомпоновкиДанных.Равно);
	
	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") И Элемент <> Элементы.ОбновлениеДанных Тогда
			Элемент.ТолькоПросмотр = Не ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ДопустимоРедактированиеЭлементовЕГИСЗ();
		КонецЕсли;
	КонецЦикла;
	
	СформироватьЗаголовокСостояния();
	
	Элементы.Обновить.Видимость = ЗначениеЗаполнено(Объект.Транспорт);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПосмотретьФайл(Команда)
	
	ДанныеФайла = НайтиФайлНаСервере();
	Если ЗначениеЗаполнено(ДанныеФайла.ФайлНайден) Тогда 
		Попытка
			ФайлXSLСхемы = КаталогВременныхФайлов() + "DischSum.xsl";
			Файл = Новый Файл(ФайлXSLСхемы);
			Если Не Файл.Существует() Тогда
				ДДXSLСхемы = ПолучитьXSLСхему();
				ДДXSLСхемы.Записать(ФайлXSLСхемы);
			КонецЕсли;
		Исключение КонецПопытки;
		ИВФ = ПолучитьИмяВременногоФайла(ДанныеФайла.РасширениеФайла);
		ДанныеФайла.ДД.Записать(ИВФ);
		ЗапуститьПриложение(ИВФ);
	Иначе
		Сообщить(НСтр("ru='Не удалось найти файл на сервере.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЛог(Команда)
	
	ВыбранноеСообщение = Элементы.ОтправленныеСообщения.ТекущиеДанные;
	Если ВыбранноеСообщение <> Неопределено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = "Запросы РЭМД " + Строка(ВыбранноеСообщение.УИДСообщения);
		ДиалогСохраненияФайла.Фильтр = "ZIP-архив(*.zip)|*.zip";
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = "Выберите куда сохранить файл";
		
		ПараметрыОповещения = Новый Структура("УИДСообщения", ВыбранноеСообщение.УИДСообщения);
		ПослеВыбораСохраняемогоФайла = Новый ОписаниеОповещения("ПослеВыбораСохраняемогоФайла", ЭтотОбъект, ПараметрыОповещения);
		ДиалогСохраненияФайла.Показать(ПослеВыбораСохраняемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодписьМО(Команда)
	
	ОбновитьПодписьМОНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НайтиФайлНаСервере()
	
	Результат = Новый Структура("ФайлНайден, ДД, РасширениеФайла", Ложь, Неопределено, "");
	
	ВыбФайл = Новый Файл(ИнтеграцияЕГИСЗ_РЭМД.ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Объект.ПутьКФайлуЭМД));
	Если ВыбФайл.Существует() Тогда
		Результат.ДД				= Новый ДвоичныеДанные(ВыбФайл.ПолноеИмя);
		Результат.ФайлНайден		= Истина;
		Результат.РасширениеФайла	= ВыбФайл.Расширение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСохраняемогоФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекстОшибки = "";
		ДДАрхиваСЛогами = ПолучитьАрхивСЛогами(ДополнительныеПараметры.УИДСообщения, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ПоказатьПредупреждение(,ТекстОшибки);
		Иначе
			ДДАрхиваСЛогами.Записать(Результат[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАрхивСЛогами(УИДСообщения, ТекстОшибки)
	
	АрхивЛогов = ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПутьКАрхивуЛогов();
	
	ИмяФайлаЛогов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(АрхивЛогов, УИДСообщения + ".zip");
	ФайлЛогов = Новый Файл(ИмяФайлаЛогов);
	Если Не ФайлЛогов.Существует() Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Архив логов по сообщению не найден: %1'"), ИмяФайлаЛогов);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый ДвоичныеДанные(ИмяФайлаЛогов);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПодписьМОНаСервере()
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("МедицинскийДокумент",	Объект.Документ);
	ДанныеПодписи.Вставить("Роль",					Неопределено);
	ДанныеПодписи.Вставить("УИД",					Новый УникальныйИдентификатор(Объект.ИдентификаторДокумента));
	ДанныеПодписи.Вставить("ПутьКФайлу",			ИнтеграцияЕГИСЗ_РЭМД.ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Объект.ПутьКФайлуЭМД));
	ДанныеПодписи.Вставить("СообщениеРЭМД",			Объект.Ссылка);
	ДанныеПодписи.Вставить("ПодписываемыеДанные",	ИнтеграцияЕГИСЗВызовСервера.ПолучитьДДФайла(ДанныеПодписи.ПутьКФайлу));
	
	Объекты = Новый Массив;
	Объекты.Добавить(ДанныеПодписи.МедицинскийДокумент);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объекты", Объекты);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьФайлЭМДВРолиЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	НаборДанных = Новый Массив;
	МассивДанныхОбъектов = Новый Массив;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы",	 УникальныйИдентификатор);
	ПараметрыВыполнения.Вставить("МассивДанныхОбъектов", МассивДанныхОбъектов);
	
	МассивДанныхОбъектов.Добавить(ДанныеПодписи);
	
	ТекущиеПараметрыВыполнения = Новый Структура;
	ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы",	УникальныйИдентификатор);
	ТекущиеПараметрыВыполнения.Вставить("ПодписываемыеДанные",	ДанныеПодписи.ПодписываемыеДанные);
	
	ЭлементДанных = Новый Структура;
	ЭлементДанных.Вставить("Представление",		ДанныеПодписи.МедицинскийДокумент);
	ЭлементДанных.Вставить("Данные",			ДанныеПодписи.ПодписываемыеДанные);
	ЭлементДанных.Вставить("Объект",			Новый ОписаниеОповещения("ПриПолученииПодписи", ОбщегоНазначенияКлиент.ОбщийМодуль("бит_СертификатыЭЦПКлиент"), ТекущиеПараметрыВыполнения));
	ЭлементДанных.Вставить("СообщениеРЭМД",		ДанныеПодписи.СообщениеРЭМД);
	ЭлементДанных.Вставить("ИмяФайла",			ДанныеПодписи.ПутьКФайлу);
	ЭлементДанных.Вставить("Роль",				ДанныеПодписи.Роль);
	ЭлементДанных.Вставить("УИД",				ДанныеПодписи.УИД);
	ЭлементДанных.Вставить("ПодписанФайлЭМД",	Истина);
	ЭлементДанных.Вставить("ИдентификаторРоли",	Неопределено);
	
	НаборДанных.Добавить(ЭлементДанных);
	
	Операция = НСтр("ru = 'Подписание'");
	ЗаголовкиСтруктура = Новый Структура;
	ЗаголовкиСтруктура.Вставить("ЗаголовокДанных");
	ЗаголовокДанных = ЗаголовкиСтруктура.ЗаголовокДанных;
	ЗаголовокДанных = НСтр("ru = 'Объект'");
	ПредставлениеНабора = ЗаголовокДанных;
	
	СертификатыМО = Новый Массив;
	СертификатыМО.Добавить(ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьСертификатПодписанияСообщенийSOAP());
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий",	Истина);
	ОписаниеДанных.Вставить("ИдентификаторФормы",	УникальныйИдентификатор);
	ОписаниеДанных.Вставить("Операция",				Операция);
	ОписаниеДанных.Вставить("ЗаголовокДанных",		ЗаголовокДанных);
	ОписаниеДанных.Вставить("НаборДанных",			НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора",	ПредставлениеНабора);
	ОписаниеДанных.Вставить("ОтборСертификатов",	СертификатыМО);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеПодписанияОбъектов", ОбщегоНазначенияКлиент.ОбщийМодуль("бит_СертификатыЭЦПКлиент"), ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЭМДВРолиЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Сообщить("Не удалось подписать " + Параметры.СообщениеРЭМД);
		Возврат;
	КонецЕсли;
	
	// При сохранении данных подписи надо сохранить признак подписания файла ЭМД.
	Параметры.Вставить("ПодписанФайлЭМД", Истина);
	бит_СертификатыЭЦПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	ОбновитьТЧСообщенияРЭМД(Параметры);
	
	Прочитать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьТЧСообщенияРЭМД(ПараметрыОбновления) 
	
	мСообщенияСУстановленнымиПодписями = Новый Массив;
	Для Каждого СтрокаЭЦП Из ПараметрыОбновления.УИДыЭЦП Цикл
		
		СообщениеРЭМД = СтрокаЭЦП.СообщениеРЭМД;
		
		Если ЗначениеЗаполнено(СообщениеРЭМД) Тогда
			ИдентификаторРЭМД		= ИнтеграцияЕГИСЗ_РЭМД.ПолучитьИдентификаторИНомерДокументаДляРЭМД(СообщениеРЭМД.Документ, , СообщениеРЭМД.ИдентификаторШаблонаЭМД);
			ПутьКАрхивуРЭМД			= ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПутьКАрхивуРЭМД();
			ИмяФайлаБезРасширения	= ПутьКАрхивуРЭМД + "\" + ИдентификаторРЭМД.ИдентификаторДокумента;
			
			ДвоичныеДанныеПодписи = СтрокаЭЦП.СвойстваПодписи.Подпись;
			СРЭМД = СообщениеРЭМД.ПолучитьОбъект();
			
			УдалитьСтрокиПодписейМО(СРЭМД);
			
			НомерПодписи	= СРЭМД.ЭлектронныеПодписиЭМД.Количество() + 1;
			ИмяФайлаПодписи	= ИдентификаторРЭМД.ИдентификаторДокумента + "_sign" + НомерПодписи;
			ПутиДляПодписи	= ИнтеграцияЕГИСЗСервер.ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайлаПодписи);
			ДвоичныеДанныеПодписи.Записать(ПутиДляПодписи.ПолныйПуть);
			
			СРЭМД.Отправить = Истина;
			
			Подпись = СРЭМД.ЭлектронныеПодписиЭМД.Добавить();
			Подпись.ПутьКФайлуПодписиЭМД = ПутиДляПодписи.ОтносительныйПуть;
			Подпись.Сотрудник			 = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
			Подпись.РольРЭМД			 = СтрокаЭЦП.РольПодписи;
			Подпись.ЭтоПодписьМО		 = Истина;
			Подпись.УИД_ЭЦП				 = СтрокаЭЦП.ПолученныйУИДЭЦП;
			Попытка
				СРЭМД.Записать();
				мСообщенияСУстановленнымиПодписями.Добавить(СообщениеРЭМД);
			Исключение
				СообщениеДляЖР = СтрШаблон("Ошибка при сохранении данных подписи МО в сообщении  ""%1"" :", СообщениеРЭМД);
				ЗаписьЖурналаРегистрации("ИнтеграцияЕГИСЗ.Ошибка", УровеньЖурналаРегистрации.Ошибка,,, СообщениеДляЖР);
				Сообщить(СтрШаблон("Ошибка при сохранении данных подписи МО в сообщении  ""%1"" :", СообщениеРЭМД));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мСообщенияСУстановленнымиПодписями;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСтрокиПодписейМО(СообщениеРЭМД)
	
	СтрокиМО = СообщениеРЭМД.ЭлектронныеПодписиЭМД.НайтиСтроки(Новый Структура("ЭтоПодписьМО", Истина));
	Для Каждого СтрокаМО Из СтрокиМО Цикл
		СообщениеРЭМД.ЭлектронныеПодписиЭМД.Удалить(СтрокаМО);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСостояния()
	
	Состояние = "";
	КоличествоТребуемыхПодписей = ПолучитьКоличествоТребуемыхПодписейСообщения();
	
	Если Объект.Отправить Или Объект.Обновить Тогда
		Состояние = "Готово к отправке";
	ИначеЕсли ЗначениеЗаполнено(Объект.ТекстПоследнейОшибки) Тогда
		Состояние = "Возникла ошибка при отправке (см. ""Ошибки"")";
	ИначеЕсли ЕстьОшибкиОтправленногоСообщения() Тогда
		Состояние = "Ответ из РЭМД содержит ошибку (см. ""Отправленные сообщения""). Обратитесь в СТП РЭМД.";
	ИначеЕсли ЗначениеЗаполнено(Объект.ИдентификаторРЭМД) Тогда
		Состояние = "Зарегистрирован";
	ИначеЕсли КоличествоТребуемыхПодписей.ПодписиМО > Объект.ЭлектронныеПодписиЭМД.НайтиСтроки(Новый Структура("ЭтоПодписьМО", Истина)).Количество() Тогда
		Состояние = "Не хватает подписи МО";
	ИначеЕсли КоличествоТребуемыхПодписей.ПодписиВрача > Объект.ЭлектронныеПодписиЭМД.НайтиСтроки(Новый Структура("ЭтоПодписьМО", Ложь)).Количество() Тогда
		Состояние = "Не хватает подписей врача";
	ИначеЕсли ЕстьОтправленныеСообщенияБезОтвета() Тогда
		Состояние = "Сообщение отправлено в РЭМД, но ответ пока не получен";
	КонецЕсли;
		
	Элементы.СостояниеСообщения.Заголовок = Состояние;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоТребуемыхПодписейСообщения()
	
	КоличествоТребуемыхПодписей = Новый Структура("ПодписиВрача, ПодписиМО", 0, 0);
	СтрокаАтрибута = Объект.ВидДокумента.Атрибуты.Найти("MO_SIGN");
	
	Если СтрокаАтрибута <> Неопределено Тогда
		Попытка
			Если Булево(СтрокаАтрибута.Значение) Тогда
				КоличествоТребуемыхПодписей.ПодписиМО = 1;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(РЭМДПравилаПодписи.МинКолПодписей) КАК МинКолПодписей
		|ИЗ
		|	Справочник.РЭМДПравилаПодписи КАК РЭМДПравилаПодписи
		|ГДЕ
		|	НЕ РЭМДПравилаПодписи.ПометкаУдаления
		|	И НЕ РЭМДПравилаПодписи.Архив
		|	И РЭМДПравилаПодписи.ВидДокумента = &ВидЭМД";
	
	Запрос.УстановитьПараметр("ВидЭМД", Объект.ВидДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоТребуемыхПодписей.ПодписиВрача = Выборка.МинКолПодписей;
	КонецЕсли;
	
	Возврат КоличествоТребуемыхПодписей;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиОтправленногоСообщения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(ИнтеграцияЕГИСЗСообщенияРЭМД.ТекстОшибки КАК СТРОКА(100)) КАК ТекстОшибки
		|ИЗ
		|	РегистрСведений.ИнтеграцияЕГИСЗСообщенияРЭМД КАК ИнтеграцияЕГИСЗСообщенияРЭМД
		|ГДЕ
		|	ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента = &ИдентификаторДокумента";
	
	Запрос.УстановитьПараметр("ИдентификаторДокумента", Объект.ИдентификаторДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ЗначениеЗаполнено(Выборка.ТекстОшибки);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОтправленныеСообщенияБезОтвета()
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнтеграцияЕГИСЗСообщенияРЭМД.ДатаСообщения КАК ДатаСообщения,
		|	ИнтеграцияЕГИСЗСообщенияРЭМД.ДатаОтвета КАК ДатаОтвета
		|ИЗ
		|	РегистрСведений.ИнтеграцияЕГИСЗСообщенияРЭМД КАК ИнтеграцияЕГИСЗСообщенияРЭМД
		|ГДЕ
		|	ИнтеграцияЕГИСЗСообщенияРЭМД.ИдентификаторДокумента = &ИдентификаторДокумента
		|	И ИнтеграцияЕГИСЗСообщенияРЭМД.ТипВызова = ЗНАЧЕНИЕ(Перечисление.ТипВызоваРЭМД.Отправка)";
	
	Запрос.УстановитьПараметр("ИдентификаторДокумента", Объект.ИдентификаторДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ЗначениеЗаполнено(Выборка.ДатаСообщения) И Не ЗначениеЗаполнено(Выборка.ДатаОтвета);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьXSLСхему()
	
	Возврат Обработки.ПоискДокументовРЭМД.ПолучитьМакет("XSLСхема");
	
КонецФункции

#КонецОбласти
