#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВыполнитьСтандартноеПолучениеДанныхВыбора") Тогда
		Возврат;
	Иначе
		СтандартнаяОбработка = Ложь;

		Если Не Параметры.Отбор.Свойство("Архив") Тогда
			Параметры.Отбор.Вставить("Архив",Ложь);
		КонецЕсли;
		Если Не Параметры.Отбор.Свойство("ПометкаУдаления") Тогда
			Параметры.Отбор.Вставить("ПометкаУдаления",Ложь);
		КонецЕсли;

		Параметры.Вставить("ВыполнитьСтандартноеПолучениеДанныхВыбора");
		ДанныеВыбора = Справочники.Диагнозы.ПолучитьДанныеВыбора(Параметры);

		Если ДанныеВыбора.Количество() <> 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ДанныеВыбора);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Диагнозы.Наименование КАК Наименование,
				|	Диагнозы.КодДиагноза КАК КодДиагноза,
				|	Диагнозы.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Диагнозы КАК Диагнозы
				|ГДЕ
				|	Диагнозы.Ссылка В(&Ссылка)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Представление = Выборка.Наименование;
				Если ЗначениеЗаполнено(Выборка.КодДиагноза) Тогда
					Представление = ПредставлениеДиагнозаСКодом(, Представление, Выборка.КодДиагноза);
				КонецЕсли;
				
				ЭлементСписка = ДанныеВыбора.НайтиПоЗначению(Выборка.Ссылка);
				ЭлементСписка.Представление = Представление;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ЗагрузкаИзЕГИСЗ

// Возвращает идентификатор основного классификатора источника на сайте росминздрава.
// 
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьOIDСправочника() Экспорт
	Возврат "1.2.643.5.1.13.13.11.1005";
КонецФункции

// Возвращает список альтернативных идентификаторов классификатора источника на сайте росминздрава.
// 
// Возвращаемое значение:
// 	Массив Из Строка
//
Функция ПолучитьАльтернативныеOID() Экспорт
	СписокOID = Новый Массив();
	СписокOID.Добавить("1.2.643.5.1.13.2.1.1.641");
	СписокOID.Добавить("1.2.643.5.1.13.2.1.1.718");
	Возврат СписокOID;
КонецФункции

// Описывает соответствие между именем реквизита в классификаторе и его именем в базе 1С.
// 
// Возвращаемое значение:
//   Соответствие.
//
Функция ПолучитьСопоставленийРеквизитовИXMLСправочникаЕГИСЗ() Экспорт
	
	Сопоставление = Новый Соответствие;
	//1) ID, Уникальный идентификатор, Целочисленное, уникальный идентификатор записи, числовой формат, соответствует порядковому номеру записи (общее количество записей – 14922), Обязательное;
	Сопоставление.Вставить("ID", "УИДЕГИСЗ");
	//2) REC_CODE, Поле сортировки, Строковое, содержит уникальную информацию о записи, отражающую, в том числе и код МКБ-10;
	Сопоставление.Вставить("REC_CODE", ""); // Содержит полный код группы+подгруппы+элементы   ПолеСортировки.
	//3) MKB_CODE, Код МКБ, Строковое, поле содержит трехзначные коды рубрик и четырехзначные или пятизначные коды подрубрик (в записях, соответствующих классам и блокам МКБ-10 данное поле остается пустым);
	Сопоставление.Вставить("MKB_CODE", "КодДиагноза, Код"); // Только код самого элемента.
	//4) MKB_NAME, Название, Строковое, текстовое поле, содержит названия классов, блоков, рубрик и подрубрик МКБ-10;
	Сопоставление.Вставить("MKB_NAME", "Наименование");
	//5) ID_PARENT, Код родительской записи, Целочисленное, ссылка на родительскую запись, номер строки предшествующего уровня, к которому относится данная запись, позволяет проследить иерархическую структуру данного справочника;
	Сопоставление.Вставить("ID_PARENT", "УИДЕГИСЗРодителя");
	//6) ADDL_CODE, Дополнительный код, Целочисленное, используется только в записях МКБ, предусматривающих двойное кодирование. Данное поле является числовым и может содержать код 1 или 2;
	Сопоставление.Вставить("ADDL_CODE", "");
	//7) ACTUAL, Признак актуальности, Целочисленное, числовой код. Используется для обозначения актуальности записи. Может содержать значение 1 или 0;
	Сопоставление.Вставить("ACTUAL", "");
	//8) DATE, Дата изменения актуальности, Дата, отражает дату начала работы изменений: внесенной новой записи или исключенной ранее существующей записи, в ходе текущей и последующих актуализаций справочника. Для записей МКБ, существовавших ранее в версии справочника 1.1 , поле DATE остается пустым;
	Сопоставление.Вставить("DATE", "");
	Сопоставление.Вставить("NAME", "Наименование");
	Сопоставление.Вставить("SORT", "");
	Сопоставление.Вставить("PARENT", "УИДЕГИСЗРодителя");
	Сопоставление.Вставить("CODE", "КодДиагноза, Код");
	
	Возврат Сопоставление;

КонецФункции

// Формирует массив структур, ключи которых - поля для поиска существующих элементов при загрузки из ФР НСИ ЕГИСЗ,
//  а порядок в массиве - приоритет использования способов поиска.
//
// Параметры:
//  OID	 - Строка - oid
// 
// Возвращаемое значение:
//  Массив - наборы ключей поиска.
//
Функция ПолучитьПорядокПоискаСуществующихОбъектов(OID) Экспорт
	
	ПорядокПоиска = Новый Массив;
	
	ПоляПоиска = Новый Структура;
	ПоляПоиска.Вставить("УИДЕГИСЗ", "УИДЕГИСЗ");
	ПоляПоиска.Вставить("OIDСправочникаИсточника", "OIDСправочникаИсточника");
	ПорядокПоиска.Добавить(ПоляПоиска);
	
	ПоляПоиска = Новый Структура;
	ПоляПоиска.Вставить("КодДиагноза", "КодДиагноза");
	ПорядокПоиска.Добавить(ПоляПоиска);
	
	Возврат ПорядокПоиска;
	
КонецФункции

// Возвращает массив структур, ключ которой - имя реквизита справочника, 
//	а значение - имя поля таблицы актуальных в общей форме загрузки.
// 
// Возвращаемое значение:
//   Массив.
//
Функция ПолучитьЗагружаемыеПоляЕГИСЗ() Экспорт
	
	Поля = Новый Структура;
	Поля.Вставить("УИДЕГИСЗ",			"УИДЕГИСЗ");
	Поля.Вставить("УИДЕГИСЗРодителя",	"УИДЕГИСЗРодителя");
	Поля.Вставить("КодДиагноза",		"КодДиагноза");
	Поля.Вставить("Код",				"КодДиагноза");
	Поля.Вставить("НаименованиеПолное",	"Наименование");
	Поля.Вставить("Наименование",		"Наименование");
	Возврат Поля;
	
КонецФункции

// Загрузка справочника: событие перед началом загрузки.
//
// Параметры:
//  ТаблицаКлассификатора	 - ТаблицаЗначений	 - таблица классификатора
//  OID						 - Строка			 - OID
//  ДополнительныеСвойства	 - Структура		 - дополнительные свойства.
//
Функция ЗагрузкаСправочникаПередНачаломЗагрузки(ТаблицаКлассификатора, OID, ДополнительныеСвойства) Экспорт
	
	Если OID = OIDСправочникаМКБС() Тогда // Загрузка МКБ-С.
		
		// Определяем элементы, которые нам не требуется загружать.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Таб", ТаблицаКлассификатора.Скопировать(,"УИДЕГИСЗ, УИДЕГИСЗРодителя"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таб.УИДЕГИСЗ КАК УИДЕГИСЗ,
		|	Таб.УИДЕГИСЗРодителя КАК УИДЕГИСЗРодителя
		|ПОМЕСТИТЬ Классификатор
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Классификатор.УИДЕГИСЗРодителя КАК УИДЕГИСЗ
		|ПОМЕСТИТЬ Родители
		|ИЗ
		|	Классификатор КАК Классификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Родители.УИДЕГИСЗ КАК УИДЕГИСЗ
		|ИЗ
		|	Родители КАК Родители
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Классификатор.УИДЕГИСЗРодителя КАК УИДЕГИСЗРодителя
		|		ИЗ
		|			Классификатор КАК Классификатор
		|		ГДЕ
		|			НЕ Классификатор.УИДЕГИСЗ В
		|						(ВЫБРАТЬ
		|							Родители.УИДЕГИСЗ
		|						ИЗ
		|							Родители КАК Родители)) КАК РодителиКонечныхЭлементов
		|		ПО Родители.УИДЕГИСЗ = РодителиКонечныхЭлементов.УИДЕГИСЗРодителя
		|ГДЕ
		|	РодителиКонечныхЭлементов.УИДЕГИСЗРодителя ЕСТЬ NULL"
		;
		
		ДополнительныеСвойства.Вставить("НеЗаружаемыеЭелменты", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УИДЕГИСЗ"));
	КонецЕсли; 
	
КонецФункции

// Загрузка справочника: событие Перед поиском элемента классификатора в базе
//
// Параметры:
//  СтрокаКлассификатора - СтрокаТаблицыЗначений - строка классификатора.
//
Процедура ПередПоискомЭлементаКлассификатораВБазе(СтрокаКлассификатора) Экспорт
	
	// Вытаскиваем код элемента из наименования, если указан в скобках к конце наименования.
	Если (Не ЗначениеЗаполнено(СтрокаКлассификатора.Код))
		И (Прав(СокрЛП(СтрокаКлассификатора.Наименование),1) = ")")
	Тогда
		ПозицияОткрывающей = СтрНайти(СтрокаКлассификатора.Наименование, "(", НаправлениеПоиска.СКонца);
		Если ПозицияОткрывающей <> 0 Тогда
			КодДиагноза = Сред(СтрокаКлассификатора.Наименование, ПозицияОткрывающей + 1, СтрДлина(СтрокаКлассификатора.Наименование) - ПозицияОткрывающей - 1);
			СтрокаКлассификатора.Код = СтрокаКодаЛатиницей(КодДиагноза);
			СтрокаКлассификатора.КодДиагноза = СокрЛП(СтрокаКлассификатора.Код);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Загрузка справочника: событие перед загрузкой элемента.
//
// Параметры:
//  СтрокаДереваКлассификатора	 - СтрокаДереваЗначений	 - строка дерева классификатора
//  Родитель					 - Ссылка				 - группа
//  ДополнительныеСвойства		 - Структура			 - дополнительные свойства
//  OID							 - Строка				 - OID
//  Отказ						 - Булево				 - Отказ
// 
// Возвращаемое значение:
//  Строка - сообщение.
//
Функция ЗагрузкаСправочникаПередЗагрузкойЭлемента(СтрокаДереваКлассификатора, Родитель, ДополнительныеСвойства, OID, Отказ) Экспорт
	
	Если OID = OIDСправочникаМКБС() Тогда // Загрузка МКБ-С.
		
		УИД = СтрокаДереваКлассификатора.УИДЕГИСЗ;
		Если ЗначениеЗаполнено(СтрокаДереваКлассификатора.Ссылка)
			И СтрокаДереваКлассификатора.Ссылка.OIDСправочникаИсточника = ПолучитьOIDСправочника()
		Тогда
			// Уже существует элемент из МКБ-10
			Отказ = Истина;
		
		ИначеЕсли ДополнительныеСвойства.Свойство("НеЗаружаемыеЭелменты")
			И ДополнительныеСвойства.НеЗаружаемыеЭелменты.Найти(УИД) <> Неопределено
		Тогда
			// Это группа верхних уровней, которые нужно загружать из МКБ-10, а не из МКБ-С.
			Отказ = Истина;
		
		ИначеЕсли Родитель = Неопределено И СтрокаДереваКлассификатора.Ссылка = Неопределено Тогда
			// Нужно записать диагноз, а его группа не загружена из МКБ-10. Нужно прервать загрузку и направить в МКБ-10.
			Сообщение = НСтр("ru='Необходимо сначала загрузить иерархию групп диагноза из МКБ-10 для диагноза %1!'");
			ПредставлениеДиагноза	= ?(ЗначениеЗаполнено(СтрокаДереваКлассификатора.Код),"(" + СокрЛП(СтрокаДереваКлассификатора.Код) + ")", "")
									+ СтрокаДереваКлассификатора.Наименование;
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПредставлениеДиагноза);
			
			Возврат Сообщение;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Загрузка справочника: событие перед записью элемента справочника.
//
// Параметры:
//  ОбъектСправочника		 - СправочникОбъект	 - объект справочника
//  ДополнительныеСвойства	 - Структура		 - дополнительные свойства
//  СтрокаКлассификатора	 - СтрокаДереваЗначений	 - строка дерева классификатора
//  СообщениеОтказа			 - Строка				 - Сообщение отказа
//
Процедура ЗагрузкаСправочникаИзЕГИСЗПередЗаписью(ОбъектСправочника, ДополнительныеСвойства, СтрокаКлассификатора, СообщениеОтказа = "") Экспорт
	
	ОбъектСправочника.Наименование = ОбъектСправочника.НаименованиеПолное;
	Если ОбъектСправочника.КодДиагноза = "" Тогда
		Если ЗначениеЗаполнено(ОбъектСправочника.Код) Тогда
			ОбъектСправочника.КодДиагноза = ОбъектСправочника.Код;
		ИначеЕсли Прав(ОбъектСправочника.НаименованиеПолное,1) <> ")" Тогда
		Иначе
			КодСтрока = СокрЛП(Лев(Прав(ОбъектСправочника.НаименованиеПолное,8),7));
			ОбъектСправочника.Код = КодСтрока;
			ОбъектСправочника.КодДиагноза = ОбъектСправочника.Код;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// OID классификатора МКБ-С.
// 
// Возвращаемое значение:
//  Строка.
//
Функция OIDСправочникаМКБС() Экспорт
	
	Возврат "1.2.643.5.1.13.13.11.1499";
	
КонецФункции

// Загрузка справочника: событие перед обработкой таблицы классификатора
//
// Параметры:
//  ТаблицаКлассификатор - ТаблицаЗначений - таблица классификатора. 
// 
Процедура ПередОбработкойТаблицыКлассификатора(ТаблицаКлассификатор) Экспорт
	
	СтрокиРазделов = ТаблицаКлассификатор.НайтиСтроки(Новый Структура("УИДЕГИСЗРодителя", 0));
	
	Для Каждого СтрокаРаздела Из СтрокиРазделов Цикл
		
		СтрокиПодразделов = ТаблицаКлассификатор.НайтиСтроки(Новый Структура("УИДЕГИСЗРодителя", СтрокаРаздела.УИДЕГИСЗ));
		Если СтрокиПодразделов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КодыПодразделов = Новый СписокЗначений;
		Для Каждого СтрокаПодраздела Из СтрокиПодразделов Цикл
			Для Каждого Код Из СтрРазделить(СтрокаПодраздела.КодДиагноза, "-", Ложь) Цикл
				КодыПодразделов.Добавить(СокрЛП(Код));
			КонецЦикла;
		КонецЦикла;
		
		Если КодыПодразделов.Количество() > 0 Тогда
			КодыПодразделов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
			КодДиагноза = СтрШаблон("%1-%2", КодыПодразделов[0].Значение, КодыПодразделов[КодыПодразделов.Количество()-1].Значение);
			СтрокаРаздела.Код = СтрокаКодаЛатиницей(КодДиагноза);
			СтрокаРаздела.КодДиагноза = СокрЛП(СтрокаРаздела.Код);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Найти в справочнике диагноз МКБ10 по диагнозу МКБС.
//
// Параметры:
//  ДиагнозМКБС	 - СправочникСсылка.Диагнозы	 - диагноз МКБ-С.
// 
// Возвращаемое значение:
//  СправочникСсылка.Диагнозы - диагноз МКБ-10.
//
Функция ДиагнозМКБ10ПоМКБС(ДиагнозМКБС) Экспорт
	
	ТекущийЭлементИерархии = ДиагнозМКБС;
	
	Пока ЗначениеЗаполнено(ТекущийЭлементИерархии) Цикл
		
		КодДиагноза = ТекущийЭлементИерархии.КодДиагноза;
		РезультатПоиска = ДиагнозПоКоду(КодДиагноза);
		Если РезультатПоиска = Неопределено Тогда
			// Нет МКБ-10 с таким кодом - ищем по коду группы.
			ТекущийЭлементИерархии = ТекущийЭлементИерархии.Родитель;
			
		ИначеЕсли РезультатПоиска.ЭтоГруппа Тогда
			// В МКБ-10 начались группы - дальше нет смысла искать.
			Возврат Справочники.Диагнозы.ПустаяСсылка();
			
		Иначе
			// Найден.
			Возврат РезультатПоиска.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Не найден.
	Возврат Справочники.Диагнозы.ПустаяСсылка();
	
КонецФункции

// Представление диагноза из наименования с кодом
//
// Параметры:
//  Диагноз		 - СправочникСсылка.Диагнозы	 - диагноз
//  Наименование - Строка	 - наименование.
//  КодДиагноза	 - Строка	 - код диагноза.
// 
// Возвращаемое значение:
//  Строка - представление диагноза.
//
Функция ПредставлениеДиагнозаСКодом(Диагноз = Неопределено, Знач Наименование = "", Знач КодДиагноза = "") Экспорт
	
	Если ЗначениеЗаполнено(Диагноз) Тогда
		Наименование = Диагноз.НаименованиеПолное;
		КодДиагноза	 = Диагноз.КодДиагноза;
	КонецЕсли;
	
	Возврат СокрЛП(КодДиагноза + " " + Наименование);
	
КонецФункции

// Возвращает имя реквизита для дальнейшего заполнения в шаблоне параметра Code по нему 
// 
// Возвращаемое значение:
//  Строка - имя реквизита код диагноза.
//
Функция ПолучитьИмяРеквизитаDisplayNameИCode() Экспорт
	
	СтруктураВозвращаемогоЗначения = Новый Структура;
	СтруктураВозвращаемогоЗначения.Вставить("Code", "КодДиагноза");
	Возврат СтруктураВозвращаемогоЗначения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДиагнозПоКоду(КодДиагноза)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("OIDСправочникаИсточника", ПолучитьOIDСправочника()); // OID МКБ-10.
	Запрос.УстановитьПараметр("КодДиагноза", КодДиагноза);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Диагнозы.Ссылка КАК Ссылка,
		|	Диагнозы.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.Диагнозы КАК Диагнозы
		|ГДЕ
		|	Диагнозы.OIDСправочникаИсточника = &OIDСправочникаИсточника
		|	И Диагнозы.КодДиагноза = &КодДиагноза";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		СтрокаЗапроса = Результат.Выгрузить()[0];
		Возврат Новый Структура("Ссылка, ЭтоГруппа", СтрокаЗапроса.Ссылка, СтрокаЗапроса.ЭтоГруппа);
	КонецЕсли;
	
КонецФункции

Функция СтрокаКодаЛатиницей(КодДиагноза)
	
	КодДиагнозаЛатиницей = КодДиагноза;
	
	ЗаменяемыеСимволы = Новый Соответствие;
	
	ЗаменяемыеСимволы.Вставить("А", "A");
	ЗаменяемыеСимволы.Вставить("В", "B");
	ЗаменяемыеСимволы.Вставить("С", "C");
	ЗаменяемыеСимволы.Вставить("Е", "E");
	ЗаменяемыеСимволы.Вставить("Н", "H");
	ЗаменяемыеСимволы.Вставить("К", "K");
	ЗаменяемыеСимволы.Вставить("М", "M");
	ЗаменяемыеСимволы.Вставить("О", "O");
	ЗаменяемыеСимволы.Вставить("Р", "P");
	ЗаменяемыеСимволы.Вставить("Т", "T");
	ЗаменяемыеСимволы.Вставить("Х", "X");
	
	Для Каждого КлючЗначение Из ЗаменяемыеСимволы Цикл
		КодДиагнозаЛатиницей = СтрЗаменить(КодДиагнозаЛатиницей, КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат КодДиагнозаЛатиницей;
	
КонецФункции

#КонецОбласти