#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФорматФайлаЗагрузки = НастройкиИзХранилища("ЗагрузкаВидовПолиса", "ФорматФайлаЗагрузки");
	
	Если ЗначениеЗаполнено(ФорматФайлаЗагрузки) Тогда
		УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(ФорматФайлаЗагрузки, ИнформацияПоКолонкам, ШаблонСДанными); 
	Иначе
		УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(ПолучитьФорматФайлаПоУмолчанию(), ИнформацияПоКолонкам, ШаблонСДанными);
	КонецЕсли;
	ВидПолиса = Параметры.ВидПолиса;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ВидПолиса) Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
		Элементы.ВидПолиса.ОграничениеТипа = ОписаниеТипа; 
		ВидПолиса = ОписаниеТипа.ПривестиЗначение(ВидПолиса); 
		
		Элементы.ВидПолиса.ВыбиратьТип = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьШаблонИзФайла(Команда)
	
	АдресВременногоХранилища = "";
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл'");
	ДиалогОткрытияФайла.Фильтр = "Табличный документ(*.xlsx,*.csv)|*.xlsx;*.csv";
	Если ДиалогОткрытияФайла.Выбрать() Тогда

		ПередатьФайлНаСервер(Истина, АдресВременногоХранилища, ДиалогОткрытияФайла.ПолноеИмяФайла, Неопределено)
		
	Иначе
		Текст = НСтр("ru='Файл не выбран!'; en='File not selected!'");
		ПоказатьПредупреждение(,Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблонВФайл(Команда)
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Если Истина Тогда
			ПутьКФайлу = "";
		Иначе
			ПутьКФайлу = "";
		КонецЕсли;
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.РасширениеФайла",, ЭтаФорма, Истина);
		ПутьКФайлу = "";
	КонецЕсли;
	
	ИмяФайла = "Загрузка страховых полисов";
	ПолучитьПутьКФайлуНачалоВыбора(РежимДиалогаВыбораФайла.Сохранение, ПутьКФайлу, ИмяФайла);
	ВыбранныйФайл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);
	РасширениеФайла = СтрЗаменить(ВыбранныйФайл.Расширение,".","");
	Если ЗначениеЗаполнено(ВыбранныйФайл.Имя) тогда
		Если РасширениеФайла = "csv" тогда
			СохранитьТаблицуВCSVФайл(ПутьКФайлу, ИнформацияПоКолонкам);
		ИначеЕсли РасширениеФайла = "xlsx" тогда
			АдресВоВременномХранилище = ТабличныйДокументУдалениеПримечаний();
			ТабличныйДокументБезПримечаний = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
			ТабличныйДокументБезПримечаний.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.xlsx);
		ИначеЕсли РасширениеФайла = "mxl" тогда 
			ШаблонСДанными.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.mxl);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Шаблон файла не был сохранен.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не выбран тип операции!");
		Возврат;	
	КонецЕсли;
	
	РезультатЗагрузки = ЗагрузитьНаСервере();
	
	Если РезультатЗагрузки.Свойство("ИзменениеДокументомСоставаСтрахуемых") Тогда
		Форма = ПолучитьФорму("Документ.ИзменениеСоставаСтрахуемых.Форма.ФормаДокумента");
		КопироватьДанныеФормы(ДокументИзменения, Форма.Объект);
		Форма.Модифицированность = Истина;
		Форма.Открыть();	
	КонецЕсли;
	
	СообщениеРезультатЗагрузки = НСтр("ru='Загрузка выполнена'");
	Если РезультатЗагрузки.Свойство("ТаблицаОшибок") Тогда
		СтруктураНаПечать = Новый Структура;
		
		ОписаниеПечатнойФормы = Новый Структура;
		ОписаниеПечатнойФормы.Вставить("СинонимМакета", "Предупреждения загрузки списка медосмотра");
		ОписаниеПечатнойФормы.Вставить("Экземпляров",	1);
		ОписаниеПечатнойФормы.Вставить("ИмяМакета", "");
		ОписаниеПечатнойФормы.Вставить("ПолныйПутьКМакету", "");
		ОписаниеПечатнойФормы.Вставить("ИмяФайлаПечатнойФормы", "");
		ОписаниеПечатнойФормы.Вставить("ТабличныйДокумент", РезультатЗагрузки.ТаблицаОшибок);
		
		КоллекцияПечатныхФорм = Новый Массив; 
		КоллекцияПечатныхФорм.Добавить(ОписаниеПечатнойФормы);
		СтруктураНаПечать.Вставить("КоллекцияПечатныхФорм",КоллекцияПечатныхФорм);

		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов",СтруктураНаПечать,ЭтотОбъект.ВладелецФормы);
		
		СообщениеРезультатЗагрузки = СообщениеРезультатЗагрузки + Символы.ПС + НСтр("ru='Но часть данных не удалось обработать'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, СообщениеРезультатЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФорматФайлаЗагрузкиПриИзменении(Элемент)
	
	ИнформацияПоКолонкамНаСервер = ИнформацияПоКолонкам;
	Если ЗначениеЗаполнено(ФорматФайлаЗагрузки) Тогда
		НастройкиВХранилище("Загрузка", "ФорматФайлаЗагрузки", ФорматФайлаЗагрузки);
		УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(ФорматФайлаЗагрузки, ИнформацияПоКолонкамНаСервер, ШаблонСДанными);		
	Иначе
		ФорматФайлаЗагрузкиПриИзмененииНаСервере(ИнформацияПоКолонкамНаСервер, ШаблонСДанными);		
	КонецЕсли;
	КопироватьДанныеФормы(ИнформацияПоКолонкамНаСервер, ИнформацияПоКолонкам);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФорматФайлаЗагрузкиПриИзмененииНаСервере(ИнформацияПоКолонкамНаСервер, ШаблонСДанными)
	
	Формат = ПолучитьФорматФайлаПоУмолчанию();
	НастройкиВХранилище("Загрузка", "ФорматФайлаЗагрузки", Формат);
	УниверсальныеМеханизмыСервер.ЗаполнитьШаблонСДаннымиПоФорматуФайла(Формат, ИнформацияПоКолонкамНаСервер, ШаблонСДанными);		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьФорматФайлаПоУмолчанию()
	
	СписокКолонок = Справочники.ФорматыФайловДляЗагрузкиДанных.ПустаяСсылка().СписокКолонок.Выгрузить();
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 1;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО;
	НоваяСтрока.ИмяКолонкиВФайле = "ФИО";

	НоваяСтрока = СписокКолонок.Добавить(); 
	НоваяСтрока.НомерСтроки = 2;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаРождения;
	НоваяСтрока.ИмяКолонкиВФайле = "Дата рождения";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 3;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисНомер;
	НоваяСтрока.ИмяКолонкиВФайле = "Номер";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 4;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисСерия;
	НоваяСтрока.ИмяКолонкиВФайле = "Серия";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 5;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисДействуетС;
	НоваяСтрока.ИмяКолонкиВФайле = "Действует с";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 6;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисСрокДействия;
	НоваяСтрока.ИмяКолонкиВФайле = "Срок действия";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 7;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВидДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Вид документа удостоверяющего личность";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 8;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.СерияДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Серия документа";   
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 9;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.НомерДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Номер документа";       
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 10;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаВыдачиДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Дата выдачи документа";
	
	НоваяСтрока = СписокКолонок.Добавить();
	НоваяСтрока.НомерСтроки = 11;
	НоваяСтрока.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.КемВыданДУЛ;
	НоваяСтрока.ИмяКолонкиВФайле = "Кем выдан документ";	
	
	Возврат Новый Структура("СписокКолонок", СписокКолонок);
	
КонецФункции

&НаСервереБезКонтекста
Процедура НастройкиВХранилище(КлючОбъекта, КлючНастроек, Настройки)
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиИзХранилища(КлючОбъекта, КлючНастроек)
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
КонецФункции

&НаКлиенте
Процедура ПередатьФайлНаСервер(Результат, АдресВременногоХранилища, ИмяФайла, Параметр) 
	
	Если Результат = Истина Тогда
		Расширение = СтрЗаменить(ОбщегоНазначения.ПолучитьРасширениеФайла(ИмяФайла),".","");
		Если Расширение = "csv" ИЛИ Расширение = "xlsx" ИЛИ Расширение = "mxl" Тогда
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
			ФоновоеЗадание = Ложь;
			ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru ='Не получилось загрузить данные из файла. Убедитесь в корректности данных в файле.'"));        
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание = Ложь)
	ИмяВременногоФайла=ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОчиститьШаблонСДанными();

	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("Расширение", Расширение);
	ПараметрыВызоваСервера.Вставить("ШаблонСДанными", ШаблонСДанными);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ПараметрыВызоваСервера.Вставить("ИнформацияПоКолонкам", ТаблицаИнформацияПоКолонкам);
	
	Обработки.ЗагрузкаДанныхИзФайла.ЗагрузитьФайлВТаблицу(ПараметрыВызоваСервера, АдресВременногоХранилища);
	ШаблонСДанными = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	НормализоватьТабличныйДокумент();
	
КонецПроцедуры

&НаСервере
Процедура НормализоватьТабличныйДокумент()
		
	СоответствиеНомеровКолонок = ПолучитьСоответствиеНомеровКолонок(ИнформацияПоКолонкам);
	Если СоответствиеНомеровКолонок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	// В качестве области, по которой "группируется" таблица берется ФИО или первая колонка.
	НомерКолонкиГруппировки = 1;
	Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО] <> Неопределено Тогда
		НомерКолонкиГруппировки = СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО];
		СоответствиеНомеровКолонок.Удалить(СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО]);
	КонецЕсли;
	
	ПоследнийНомерНепустойКолонкиГруппировки = 2;
	Счетчик = 2;
	Пока Счетчик <= ШаблонСДанными.ВысотаТаблицы Цикл
		ОбластьГруппировки = ШаблонСДанными.Область(Счетчик, НомерКолонкиГруппировки);
		КолонкаГруппировки = СокрЛП(ОбластьГруппировки.Текст);
		Если ПустаяСтрока(КолонкаГруппировки) Тогда
			Если Счетчик <> 2 Тогда
				Для Каждого НомерКолонки Из СоответствиеНомеровКолонок Цикл
					Если НомерКолонки.Значение = НомерКолонкиГруппировки Тогда
						Продолжить;
					КонецЕсли;
					ПредКолонка = ШаблонСДанными.Область(ПоследнийНомерНепустойКолонкиГруппировки, НомерКолонки.Значение);
					ТекКолонка = ШаблонСДанными.Область(Счетчик, НомерКолонки.Значение);
					Если Не ПустаяСтрока(ТекКолонка.Текст) Тогда
						ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(
							ПредКолонка.Текст, ШаблонСДанными.Область(Счетчик, НомерКолонки.Значение).Текст, ПолучитьРазделительПоТипуКолонки(НомерКолонки.Ключ));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ШаблонСДанными.УдалитьОбласть(ШаблонСДанными.Область(Счетчик, , Счетчик), ТипСмещенияТабличногоДокумента.ПоВертикали); // Удаляем строку
		Иначе
			ПоследнийНомерНепустойКолонкиГруппировки = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазделительПоТипуКолонки(ТипКолонки)
	
	Если ТипКолонки = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВредныеФакторыИУсловия Тогда
		Возврат "; ";
	Иначе 
		Возврат " ";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОчиститьШаблонСДанными()
	ОбластьЗаголовка = ШаблонСДанными.ПолучитьОбласть(1, 1, 1, ШаблонСДанными.ШиринаТаблицы);
	ШаблонСДанными.Очистить();
	ШаблонСДанными.Вывести(ОбластьЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПутьКФайлуНачалоВыбора(РежимДиалога, ПутьКФайлу, ИмяФайла = "")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	
	ДиалогВыбораФайла.Фильтр                      = НСтр("ru='Книга Excel 2007 (*.xlsx)|*.xlsx|Текстовый документ c разделителями (*.csv)|*.csv|Табличный документ (*.mxl)|*.mxl'");
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "csv";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайла;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

// Функция для обхода ошибки сохранения, если в документе есть примечания.
//
&НаСервере
Функция ТабличныйДокументУдалениеПримечаний()
	ТабличныйДокументДляСохранения = новый ТабличныйДокумент;
	
	ТабличныйДокументДляСохранения =  ШаблонСДанными;
	Для Индекс = 1 По ШаблонСДанными.ШиринаТаблицы Цикл 
		Ячейка = ТабличныйДокументДляСохранения.ПолучитьОбласть(1, Индекс, 1, Индекс).ТекущаяОбласть;
		Ячейка.Примечание.Текст = "";
		Ячейка.ЦветФона = Новый Цвет();
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокументДляСохранения);
	Возврат АдресВоВременномХранилище;
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьТаблицуВCSVФайл(ПолноеИмяФайла, ИнформацияПоКолонкам)
	Обработки.ЗагрузкаДанныхИзФайла.СохранитьТаблицуВCSVФайл(ПолноеИмяФайла, ИнформацияПоКолонкам);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере()
	
	РезультатЗагрузки = Новый Структура;
	
	ОшибкиЗагрузки.Очистить();

	УниверсальныеМеханизмыСервер.ОбновитьИнформациюПоКолонкам(ИнформацияПоКолонкам, ШаблонСДанными);
	
	СоответствиеНомеровКолонок = ПолучитьСоответствиеНомеровКолонок(ИнформацияПоКолонкам);
	
	// Массив где будем копить ссылки утвержденных полисов
	Если ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.УтверждениеСписка Тогда
		мУтвержденныхПолисов = Новый Массив;	
	КонецЕсли;
	
	ИзменениеДокументомСоставаСтрахуемых = ВидПолиса.СоставСтрахуемыхФиксируетсяДокументально; 
	
	Если ИзменениеДокументомСоставаСтрахуемых Тогда
		ЗначениеВРеквизитФормы(Документы.ИзменениеСоставаСтрахуемых.СоздатьДокумент(), "ДокументИзменения");
		ДокументИзменения.ВидПолиса = ВидПолиса;
		ДокументИзменения.ВидОперации = ВидОперации;
	КонецЕсли;
	
	Для Счетчик = 2 По ШаблонСДанными.ВысотаТаблицы Цикл
		
		ФИО = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ФИО]).Текст;
		ФИО = УбратьЛишниеПереносыПробелы(ФИО);
		ДатаРождения = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаРождения]).Текст;
		
		// Пол
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Пол] <> Неопределено Тогда
			Пол = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.Пол]).Текст;
			Пол = ВРег(Лев(СокрЛ(Пол), 1));
			Если Пол = "М" Тогда
				Пол = Перечисления.ПолФизическихЛиц.Мужской;
			ИначеЕсли Пол = "Ж" Тогда 
				Пол = Перечисления.ПолФизическихЛиц.Женский;
			Иначе
				Пол = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	
		// СНИЛС
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СНИЛС] <> Неопределено Тогда
			СНИЛС = ШаблонСДанными.Область(счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СНИЛС]).Текст;
			СНИЛС = УбратьЛишниеПереносыПробелы(СНИЛС);
		КонецЕсли;
		
		// Номер полиса
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисСерия] <> Неопределено Тогда
			ПолисСерия = ШаблонСДанными.Область(счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисСерия]).Текст;
		КонецЕсли;
		
		// Серия полиса
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисНомер] <> Неопределено Тогда
			ПолисНомер = ШаблонСДанными.Область(счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисНомер]).Текст;
		КонецЕсли;
		
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисДействуетС] <> Неопределено Тогда
			ПолисДействуетС = ШаблонСДанными.Область(счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисДействуетС]).Текст;
		КонецЕсли;
		
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисСрокДействия] <> Неопределено Тогда
			ПолисСрокДействия = ШаблонСДанными.Область(счетчик,СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ПолисСрокДействия]).Текст;
		КонецЕсли;
		
		Клиент = НайтиПоФИОИДатеРождения(ВидОперации, ФИО, ДатаРождения, Пол, СНИЛС, ОшибкиЗагрузки);
		
		НаборПаспортныхДанных = ПолучитьСтруктуруПаспотрныхДанных(Счетчик, СоответствиеНомеровКолонок);
		Если НаборПаспортныхДанных <> Неопределено Тогда
			ДобавитьПаспортныеДанныеКлиенту(НаборПаспортныхДанных, Клиент);
		КонецЕсли;
		
		Если Клиент = Справочники.Клиенты.ПустаяСсылка() Тогда
			ОшибкиЗагрузки.Добавить("Клиент " + ФИО + " не был найден");
			Продолжить;	
		КонецЕсли;
		
		мТекстОшибки = Новый Массив;
		
		Попытка
			Если ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.ДобавлениеВСписок
				И ЗначениеЗаполнено(ДатаОперации) 
			Тогда
				ПолисДействуетС = ДатаОперации;
			Иначе
				ПолисДействуетС = ?(ЗначениеЗаполнено(ПолисДействуетС), Дата(ПолисДействуетС + " 0:00:00"), Дата(1,1,1));
			КонецЕсли;
		Исключение
			мТекстОшибки.Добавить("Некорректно указана дата" + " " + """Действует с""");
		КонецПопытки;
		
		Попытка
			ПолисСрокДействия = ?(ЗначениеЗаполнено(ПолисСрокДействия), Дата(ПолисСрокДействия + " 0:00:00"), Дата(1,1,1));
		Исключение
			мТекстОшибки.Добавить("Некорректно указана дата" + " " + """Срок действия""");
		КонецПопытки;
		
		
		Если мТекстОшибки.Количество() = 0 Тогда 
			
			мСсылок = НайтиПолисКлиента(Клиент, ВидПолиса, ВидОперации, мТекстОшибки, ПолисНомер, ПолисСерия, ПолисДействуетС, ПолисСрокДействия);
			
			// Установка данных полисов в зависимости от типа операции и от того включена ли опция СоставСтрахуемыхФиксируетсяДокументально у видов полисов
			Если ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.ДобавлениеВСписок
				ИЛИ ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.УтверждениеСписка
				Тогда
				Если мСсылок.Количество() <> 0 Тогда
					СсылкаНаПолис = мСсылок[0].Ссылка;
					Созданный = мСсылок[0].Созданный;
					Если Не ИзменениеДокументомСоставаСтрахуемых Тогда
						ВыполнитьИзмененияДляОперацииДобавленияИУтверждениеСписка(СсылкаНаПолис, Созданный, мТекстОшибки, ДатаОперации, ПолисДействуетС, ПолисСрокДействия);	
						Если ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.УтверждениеСписка Тогда
							мУтвержденныхПолисов.Добавить(СсылкаНаПолис);
						КонецЕсли
					Иначе
						ВыполнитьИзмененияДляОперацииДобавленияИУтверждениеСписка(СсылкаНаПолис, Созданный, мТекстОшибки, ДатаОперации, ПолисДействуетС, ПолисСрокДействия);
						НоваяСтрока = ДокументИзменения.Страхуемые.Добавить();
						НоваяСтрока.Клиент = Клиент;
						НоваяСтрока.Полис = СсылкаНаПолис;
						НоваяСтрока.НомерПолиса = СсылкаНаПолис.Номер;
						НоваяСтрока.СерияПолиса = СсылкаНаПолис.Серия;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.ИсключениеИзСписка Тогда
				Если Не ИзменениеДокументомСоставаСтрахуемых Тогда
					ВыполнитьИзмененияДляОперацииИсключениеИзСписка(мСсылок, мТекстОшибки, ДатаОперации);
				Иначе
					Для Каждого Ссылка Из мСсылок Цикл
						НоваяСтрока = ДокументИзменения.Страхуемые.Добавить();
						НоваяСтрока.Клиент = Клиент;
						НоваяСтрока.Полис = Ссылка;
						НоваяСтрока.НомерПолиса = Ссылка.Номер;
						НоваяСтрока.СерияПолиса = Ссылка.Серия;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;		
			
		КонецЕсли;
		
		Если мТекстОшибки.Количество() > 0 Тогда
		 	ТекстОшибки = ФИО + " " + НСтр("ru='не был загружен: '");
			Для Каждого Эл Из мТекстОшибки Цикл
				ТекстОшибки = ТекстОшибки + Эл;
				Если мТекстОшибки.Найти(Эл) <> мТекстОшибки.Количество() - 1 Тогда
					ТекстОшибки = ТекстОшибки + "; ";
				КонецЕсли;
			КонецЦикла;
			ОшибкиЗагрузки.Добавить(ТекстОшибки);
		
		КонецЕсли;
				
	КонецЦикла;
	
	// Аннулирование полисов которые не вошли в список
	Если ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.УтверждениеСписка
		И Не ИзменениеДокументомСоставаСтрахуемых  
	Тогда
		АннулироватьНеУтвержденныеПолиса(мУтвержденныхПолисов, ВидПолиса);		
	КонецЕсли;
		
	// Представление ошибок
	Если ОшибкиЗагрузки.Количество() <> 0 Тогда
		ТаблицаОшибок = Новый ТабличныйДокумент;
		
		Сч = 1;
		Для Каждого ЭлементОшибка Из ОшибкиЗагрузки Цикл
			ТаблицаОшибок.Область(Сч,1).Текст = ЭлементОшибка.Значение;
			Сч = Сч + 1;
		КонецЦикла;
		
		РезультатЗагрузки.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	КонецЕсли;
	
	Если ИзменениеДокументомСоставаСтрахуемых Тогда
		ДокументИзменения.Дата = ТекущаяДата();
		РезультатЗагрузки.Вставить("ИзменениеДокументомСоставаСтрахуемых", Истина);
	КонецЕсли;
	
	Возврат РезультатЗагрузки;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьИзмененияДляОперацииДобавленияИУтверждениеСписка(СсылкаНаПолис, Созданный, ДатаОперации, мТекстовОшибков, ДействуетС = Неопределено, СрокДействия = Неопределено)
	
	// Устанавливаем данные полисов в зависимости от вновь прибывших параметров
	
	СтраховойПолисОбъект = СсылкаНаПолис.ПолучитьОбъект();
	СтраховойПолисОбъект.НеДействителен = Ложь;
	
	Если Созданный Тогда
		СтраховойПолисОбъект.СрокДействия = СрокДействия;
		СтраховойПолисОбъект.СрокДействияНачало = ДействуетС; 
		Если ЗначениеЗаполнено(ДатаОперации) Тогда
			СтраховойПолисОбъект.СрокДействияНачало = ДатаОперации;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтраховойПолисОбъект.СрокДействияНачало)
			И СтраховойПолисОбъект.СрокДействияНачало > ДействуетС 
		Тогда
			СтраховойПолисОбъект.СрокДействияНачало = ДействуетС;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтраховойПолисОбъект.СрокДействия) 
			И СтраховойПолисОбъект.СрокДействия < СрокДействия 
		Тогда
			СтраховойПолисОбъект.СрокДействия = СрокДействия;	
		КонецЕсли;
	КонецЕсли;
	
	СтраховойПолисОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьИзмененияДляОперацииИсключениеИзСписка(МассивСсылок, мТекстовОшибков, ДатаОперации)
	
	// Аннулируем полисы которые передали в параметре, либо устанавливаем срок действия если задан
	Для Каждого Ссылка Из МассивСсылок Цикл
		СтраховойПолисОбъект = Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ДатаОперации) Тогда
			СтраховойПолисОбъект.НеДействителен = Истина;
		Иначе
			СтраховойПолисОбъект.СрокДействия = ДатаОперации;
		КонецЕсли;
		СтраховойПолисОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АннулироватьНеУтвержденныеПолиса(мУтвержденныхПолисов, ВидПолиса)
	
	// Аннулируем все полисы которые не попали в список утвержеднных
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраховыеПолисы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтраховыеПолисы КАК СтраховыеПолисы
	|ГДЕ
	|	НЕ СтраховыеПолисы.Ссылка В (&мСсылок)
	|	И СтраховыеПолисы.ВидПолиса = &ВидПолиса";
	
	Запрос.УстановитьПараметр("мСсылок", мУтвержденныхПолисов);
	Запрос.УстановитьПараметр("ВидПолиса", ВидПолиса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтраховойПолисОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтраховойПолисОбъект.НеДействителен = Истина;
		СтраховойПолисОбъект.Записать();
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПолисКлиента(Клиент, ВидПолиса, ВидОперации, мТекстОшибки, Номер = Неопределено, Серия = Неопределено, ДействуетС = Неопределено, СрокДействия = Неопределено)
	
	мСсылок = Новый Массив;
	
	
	// Поиск полисов пользователя 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраховыеПолисы.Ссылка КАК Ссылка,
		|	СтраховыеПолисы.НеДействителен КАК НеДействителен,
		|	СтраховыеПолисы.Номер КАК Номер,
		|	СтраховыеПолисы.Серия КАК Серия,
		|	СтраховыеПолисы.СрокДействияНачало КАК СрокДействияНачало,
		|	СтраховыеПолисы.СрокДействия КАК СрокДействия
		|ИЗ
		|	Справочник.СтраховыеПолисы КАК СтраховыеПолисы
		|ГДЕ
		|	СтраховыеПолисы.ВидПолиса = &ВидПолиса
		|	И СтраховыеПолисы.Владелец = &Клиент
		|	И (СтраховыеПолисы.Номер = &Номер
		|			ИЛИ &Номер = НЕОПРЕДЕЛЕНО)
		|	И (СтраховыеПолисы.Серия = &Серия
		|			ИЛИ &Серия = НЕОПРЕДЕЛЕНО)
		|	И СтраховыеПолисы.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтраховыеПолисы.СрокДействияНачало УБЫВ";
	
	Запрос.УстановитьПараметр("ВидПолиса", ВидПолиса);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Если ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.ИсключениеИзСписка Тогда
		Запрос.УстановитьПараметр("Номер", ?(ЗначениеЗаполнено(Номер), Номер, Неопределено));
		Запрос.УстановитьПараметр("Серия", ?(ЗначениеЗаполнено(Серия), Серия, Неопределено));
	Иначе
		Запрос.УстановитьПараметр("Номер", ?(Номер = Неопределено, "", Номер));
		Запрос.УстановитьПараметр("Серия", ?(Серия = Неопределено, "", Серия));
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.ДобавлениеВСписок
		ИЛИ ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.УтверждениеСписка 
	Тогда
		
		Если (ЗначениеЗаполнено(Номер) ИЛИ ЗначениеЗаполнено(Серия)) Тогда
			Если Выборка.Следующий() Тогда
				СтраховойПолисСсылка = Выборка.Ссылка;
				мСсылок.Добавить(Новый Структура("Ссылка, Созданный", Выборка.Ссылка, Ложь));
				Возврат мСсылок;			
			КонецЕсли;
		Иначе
			Если Выборка.Количество() <> 0 Тогда
				СрокДействияДляОтбора = ?(ЗначениеЗаполнено(СрокДействия), Дата(СрокДействия), Дата(1,1,1));
				СрокНачалаДействияДляОтбора = ?(ЗначениеЗаполнено(ДействуетС), Дата(ДействуетС), Дата(1,1,1));
				
				// Пытаемся найти по уже заполненным датам
				Если Выборка.НайтиСледующий(Новый Структура("СрокДействияНачало, СрокДействия, НеДействителен", СрокНачалаДействияДляОтбора, СрокДействияДляОтбора, Ложь)) Тогда
					мСсылок.Добавить(Новый Структура("Ссылка, Созданный", Выборка.Ссылка, Ложь));
					Возврат мСсылок;
				ИначеЕсли Выборка.НайтиСледующий(Новый Структура("СрокДействияНачало, НеДействителен", СрокНачалаДействияДляОтбора, Ложь)) Тогда 
					мСсылок.Добавить(Новый Структура("Ссылка, Созданный", Выборка.Ссылка, Ложь));
					Возврат мСсылок;
				ИначеЕсли Выборка.НайтиСледующий(Новый Структура("СрокДействия, НеДействителен", СрокДействияДляОтбора, Ложь)) Тогда
					мСсылок.Добавить(Новый Структура("Ссылка, Созданный", Выборка.Ссылка, Ложь));
					Возврат мСсылок;
				КонецЕсли;
				
				// Перебираем то что есть в выборке на предмет соотвествия нашим данным
				Пока Выборка.Следующий() Цикл
					Если Не Выборка.НеДействителен Тогда
						Если Не ЗначениеЗаполнено(Выборка.СрокДействияНачало) Тогда
							Продолжить;
						КонецЕсли;
						
						Если Выборка.СрокДействияНачало <= СрокДействияДляОтбора Тогда
							мСсылок.Добавить(Новый Структура("Ссылка, Созданный", Выборка.Ссылка, Ложь));
							Возврат мСсылок;	
						ИначеЕсли Выборка.СрокДействия <= СрокНачалаДействияДляОтбора
							ИЛИ Не ЗначениеЗаполнено(Выборка.СрокДействия)
							ИЛИ Не ЗначениеЗаполнено(СрокДействияДляОтбора)
						Тогда
							мСсылок.Добавить(Новый Структура("Ссылка, Созданный", Выборка.Ссылка, Ложь));
							Возврат мСсылок;
						КонецЕсли;
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Ничего не нашли создаем новый полис
		СтраховойПолисОбъект = Справочники.СтраховыеПолисы.СоздатьЭлемент();
		СтраховойПолисОбъект.Владелец = Клиент;
		СтраховойПолисОбъект.ВидПолиса = ВидПолиса;
		СтраховойПолисОбъект.Номер = Номер;
		СтраховойПолисОбъект.Серия = Серия;
		СтраховойПолисОбъект.Записать();
		
		мСсылок.Добавить(Новый Структура("Ссылка, Созданный", СтраховойПолисОбъект.Ссылка, Истина));
		Возврат мСсылок;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.ИсключениеИзСписка Тогда
		Если Выборка.Количество() = 0 Тогда
			мТекстОшибки.Добавить("Не было найдено активных полисов");			
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			мСсылок.Добавить(Выборка.Ссылка);	
		КонецЦикла;			
	КонецЕсли;
	
	Возврат мСсылок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеНомеровКолонок(Знач ИнформацияПоКолонкам)
	
	СоответствиеНомеровКолонок = Новый Соответствие;
	Для Каждого СтрокаКолонка Из ИнформацияПоКолонкам Цикл
		СоответствиеНомеровКолонок.Вставить(СтрокаКолонка.Колонка, СтрокаКолонка.Позиция);
	КонецЦикла;
	Возврат СоответствиеНомеровКолонок;
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьЛишниеПереносыПробелы(Знач ИсхСтрока)
	Возврат СокрЛП(СтрЗаменить(СтрЗаменить(ИсхСтрока, Символы.ПС, " "), "  ", " "));
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПоФИОИДатеРождения(ВидОперации, ФИО, ДатаРождения, Пол = Неопределено, СНИЛС = Неопределено, ОшибкиЗагрузки = "")
	
	Если ДатаРождения <> Неопределено И ТипЗнч(ДатаРождения) = Тип("Строка") Тогда
		
		ДатаРождения = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(ДатаРождения);
		Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
			ОшибкиЗагрузки.Добавить(Строка(ФИО) + ": " + "Некорректно указано поле ""Дата рождения""");
		КонецЕсли;
		
	КонецЕсли;
		
	МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ФИО," ");
	
	Если МассивФИО.Количество() = 3 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Клиенты.Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	Клиенты.Фамилия = &Фамилия
		               |	И Клиенты.Имя = &Имя
		               |	И Клиенты.Отчество = &Отчество
		               |	И (Клиенты.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ Клиенты.ДатаРождения = &ДатаРождения
					   |			ИЛИ &ДатаРождения = ДАТАВРЕМЯ(1, 1, 1))
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Клиенты.ДатаРождения УБЫВ";
		
		Запрос.УстановитьПараметр("Фамилия", МассивФИО[0]);
		Запрос.УстановитьПараметр("Имя", МассивФИО[1]);
		Запрос.УстановитьПараметр("Отчество", МассивФИО[2]);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Клиенты.Ссылка
		               |ИЗ
		               |	Справочник.Клиенты КАК Клиенты
		               |ГДЕ
		               |	(Клиенты.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ Клиенты.ДатаРождения = &ДатаРождения
					   |			ИЛИ &ДатаРождения = ДАТАВРЕМЯ(1, 1, 1))
		               |	И Клиенты.Наименование = &Наименование
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Клиенты.ДатаРождения УБЫВ";
		
		Запрос.УстановитьПараметр("Наименование", ФИО);
		Запрос.УстановитьПараметр("ДатаРождения", ДатаРождения);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;		
	КонецЕсли;
	
	// Если не нашли создаем
	Если МассивФИО.Количество() <> 0 И ВидОперации <> Перечисления.ВидыОперацийИзмененияСоставаСтрахуемых.ИсключениеИзСписка Тогда
		
		НовыйКлиент = Справочники.Клиенты.СоздатьЭлемент();
		НовыйКлиент.Наименование = ФИО;
		НовыйКлиент.ДатаРождения = ДатаРождения;
		НовыйКлиент.СНИЛС = СНИЛС;
		
		Если МассивФИО.Количество()>=1 Тогда
			НовыйКлиент.Фамилия = Трег(МассивФИО[0]);
		КонецЕсли;
		Если МассивФИО.Количество()>=2 Тогда
			НовыйКлиент.Имя =Трег(МассивФИО[1]);
		КонецЕсли;
		Если МассивФИО.Количество()>=3 Тогда
			НовыйКлиент.Отчество = Трег(МассивФИО[2]);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Пол) И Не ПустаяСтрока(ФИО) Тогда
			НовыйКлиент.Пол = ОбщегоНазначения.ОпределитьПол(НовыйКлиент.Имя, НовыйКлиент.Фамилия, НовыйКлиент.Отчество);
		Иначе
			НовыйКлиент.Пол = Пол;
		КонецЕсли;
		
		НовыйКлиент.Записать();
		Возврат НовыйКлиент.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.Клиенты.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ТипОперацииПриИзменении(Элемент)
	                                             
	Элементы.ДатаОперации.Видимость = Истина;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИзмененияСоставаСтрахуемых.ИсключениеИзСписка") Тогда
		Элементы.ДатаОперации.Заголовок = "Срок действия";
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИзмененияСоставаСтрахуемых.ДобавлениеВСписок") Тогда
		мРезПоискаПоляДействуетС =  ИнформацияПоКолонкам.НайтиСтроки(Новый Структура("Колонка", ПредопределенноеЗначение("Перечисление.КолонкиФайлаДляЗагрузкиДанных.ПолисДействуетС")));
		Если мРезПоискаПоляДействуетС.Количество()= 0 Тогда
			Элементы.ДатаОперации.Заголовок = "Действует с";
		Иначе
			Элементы.ДатаОперации.Видимость = Ложь;
			ДатаОперации = Дата(1,1,1);
		КонецЕсли;
	Иначе
		Элементы.ДатаОперации.Видимость = Ложь;
		ДатаОперации = Дата(1,1,1);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПаспортныеДанныеКлиенту(НаборПаспортныхДанных, Клиент)

	Если ЗначениеЗаполнено(Клиент) Тогда
		
		Запись = РегистрыСведений.ПаспортныеДанные.СоздатьМенеджерЗаписи();
		Запись.ФизЛицо = Клиент;
		Запись.ДокументВид = НаборПаспортныхДанных.ВидДУЛ; 	
		Запись.ДокументСерия = НаборПаспортныхДанных.СерияДУЛ;
		Запись.ДокументНомер = НаборПаспортныхДанных.НомерДУЛ;
		Запись.ДокументДатаВыдачи = НаборПаспортныхДанных.ДатаВыдачиДУЛ;
		Запись.ДокументКемВыдан = НаборПаспортныхДанных.КемВыданДУЛ; 
		Если ЗначениеЗаполнено(НаборПаспортныхДанных.ДатаВыдачиДУЛ) Тогда
			Запись.Период = Дата(НаборПаспортныхДанных.ДатаВыдачиДУЛ);
		Иначе
			Если УниверсальныеМеханизмыСервер.НайтиПаспортныеДанные(НаборПаспортныхДанных, Клиент) Тогда 
				Возврат;
			Иначе
				Запись.Период = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;
		Запись.Записать();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПаспотрныхДанных(Счетчик, СоответствиеНомеровКолонок)

	// ВидДУЛ
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВидДУЛ] <> Неопределено Тогда
			ВидДУЛТекст = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ВидДУЛ]).Текст;
			ВидДУЛТекст = УбратьЛишниеПереносыПробелы(ВидДУЛТекст); 
			ВидДул = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоНаименованию(ВидДУЛТекст);
		КонецЕсли; 
		
		// СерияДУЛ
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СерияДУЛ] <> Неопределено Тогда
			СерияДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.СерияДУЛ]).Текст;
			СерияДУЛ = УбратьЛишниеПереносыПробелы(СерияДУЛ);
		КонецЕсли;
		
		 // НомерДУЛ
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.НомерДУЛ] <> Неопределено Тогда
			НомерДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.НомерДУЛ]).Текст;
			НомерДУЛ = УбратьЛишниеПереносыПробелы(НомерДУЛ);
		КонецЕсли;

		// ДатаВыдачиДУЛ
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаВыдачиДУЛ] <> Неопределено Тогда
			ДатаВыдачиДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаВыдачиДУЛ]).Текст;
			ДатаВыдачиДУЛ = УбратьЛишниеПереносыПробелы(ДатаВыдачиДУЛ);
			ДатаВыдачиДУЛ = СтрЗаменить(ДатаВыдачиДУЛ,".", "");
			ДатаВыдачиДУЛ = Прав(ДатаВыдачиДУЛ, 4) + Сред(ДатаВыдачиДУЛ, 3, 2) + Лев(ДатаВыдачиДУЛ, 2);
		КонецЕсли;
		
		// КемВыданДУЛ
		Если СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.КемВыданДУЛ] <> Неопределено Тогда
			КемВыданДУЛ = ШаблонСДанными.Область(Счетчик, СоответствиеНомеровКолонок[Перечисления.КолонкиФайлаДляЗагрузкиДанных.КемВыданДУЛ]).Текст;
			КемВыданДУЛ = УбратьЛишниеПереносыПробелы(КемВыданДУЛ);
		КонецЕсли; 
		
		Если НЕ (ЗначениеЗаполнено(СерияДУЛ) ИЛИ ЗначениеЗаполнено(НомерДУЛ)) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидДУЛ) Тогда
			ВидДУЛ = УправлениеНастройками.ПараметрУчета("ОсновнойВидДУЛ");
			Если НЕ ЗначениеЗаполнено(ВидДУЛ) Тогда
				ВидДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21;
			КонецЕсли;
		КонецЕсли;
		
		НаборПаспортныхДанных = Новый Структура;
		НаборПаспортныхДанных.Вставить("ВидДУЛ", ВидДУЛ);
		НаборПаспортныхДанных.Вставить("СерияДУЛ", СерияДУЛ);
		НаборПаспортныхДанных.Вставить("НомерДУЛ", НомерДУЛ);
		НаборПаспортныхДанных.Вставить("ДатаВыдачиДУЛ", ДатаВыдачиДУЛ);
		НаборПаспортныхДанных.Вставить("КемВыданДУЛ", КемВыданДУЛ);
		
		Возврат НаборПаспортныхДанных; 
	
КонецФункции

#КонецОбласти
