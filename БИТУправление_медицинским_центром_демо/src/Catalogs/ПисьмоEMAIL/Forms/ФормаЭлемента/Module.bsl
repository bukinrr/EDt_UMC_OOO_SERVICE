#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущаяСтраница;

&НаКлиенте
Перем ТекстHTMLИзмененВручную;

&НаКлиенте
Перем НеАктивизироватьСтрокуПараметра;

&НаКлиенте
Перем мсНеОбрабатываемыеУИД;

&НаКлиенте
Перем соотвКешИзображенийШаблонов;

&НаКлиенте
Перем ТегиРазрешающиеВставкуПараметров;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ТекПараметрВид = "Ссылка";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	СписокШаблонов = Новый Массив;
	СписокШаблонов.Добавить(Объект.Ссылка);
	РаботаСШаблонамиHTMLКлиентСервер.ИнициализироватьНастройкиИзображенийПриема(соотвКешИзображенийШаблонов, СписокШаблонов, ЭтаФорма.УникальныйИдентификатор);
	
	ТекстHTMLПоУмолчанию = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию();
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(Объект.ТекстHTML), ТекстHTMLПоУмолчанию, Объект.ТекстHTML));
	
	ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML);
	
	ПредыдущаяСтраница = "СтраницаHTML";

	Список = Элементы.КомандаformatBlock.СписокВыбора;
	Список.Добавить("<p>", НСтр("ru='Обычный'"));
	Список.Добавить("<h1>", НСтр("ru='Заголовок 1'"));
	Список.Добавить("<h2>", НСтр("ru='Заголовок 2'"));
	Список.Добавить("<h3>", НСтр("ru='Заголовок 3'"));
	Список.Добавить("<h4>", НСтр("ru='Заголовок 4'"));
	Список.Добавить("<h5>", НСтр("ru='Заголовок 5'"));
	Список.Добавить("<h6>", НСтр("ru='Заголовок 6'"));
	Список.Добавить("<pre>", НСтр("ru='Форматированный'"));
	Список.Добавить("<address>", НСтр("ru='Адрес'"));
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
	СтилиТекста = ТекЭлемент.Значение;

	// Заполнение списка шрифтов
	Список = Элементы.КомандаFontName.СписокВыбора;
	Список.Добавить("Arial");
	Список.Добавить("Arial Black");
	Список.Добавить("Arial Narrow");
	Список.Добавить("Comic Sans MS");
	Список.Добавить("Courier New");
	Список.Добавить("System");
	Список.Добавить("Tahoma");
	Список.Добавить("Times New Roman");
	Список.Добавить("Verdana");
	Список.Добавить("Wingdings");
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
    ИмяШрифта = ТекЭлемент.Значение;
	
	ТегиРазрешающиеВставкуПараметров = Новый Массив;
	ТегиРазрешающиеВставкуПараметров.Добавить("div");
	ТегиРазрешающиеВставкуПараметров.Добавить("p");
	ТегиРазрешающиеВставкуПараметров.Добавить("body");
	ТегиРазрешающиеВставкуПараметров.Добавить("html");
	ТегиРазрешающиеВставкуПараметров.Добавить("td");

	// Заполнение списка размеров
	Список = Элементы.КомандаFontSize.СписокВыбора;
	Для Ном = 1 По 14 Цикл
		Список.Добавить(Ном);
	КонецЦикла;
	ТекЭлемент = Список.НайтиПоИдентификатору(2);
	РазмерыШрифта = ТекЭлемент.Значение;
	
	ТекПараметрВставлятьЗаголовок = Истина;
	ТекПараметрСНовойСтроки = Истина;
	
	ЗаполнитьКешПараметров();
	НеАктивизироватьСтрокуПараметра = Истина;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения", 0.1, Истина);
	ТекстHTMLИзмененВручную = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML, ОбновлятьИзображения = Истина, СтраницаHTML = Истина, СтраницаТекст = Истина)
	
	НеАктивизироватьСтрокуПараметра = Истина;
	
	Если ОбновлятьИзображения Тогда 
		РаботаСШаблонамиHTMLКлиентСервер.ЗагрузитьИзображенияПриема(ДокументHTML, соотвКешИзображенийШаблонов, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтраницаHTML Тогда
		ТекстРедактораHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	КонецЕсли;
	Если СтраницаТекст Тогда
		ТекстКодаHTML.УстановитьТекст(РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML));
	КонецЕсли;
	
	ТекстПросмотраHTML = ТекстРедактораHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПараметр(Команда)
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;	
	ФормаВыбораПараметра = ПолучитьФорму("ПланВидовХарактеристик.ПараметрыHTML.ФормаВыбора");	
	ПараметрСсылка = ФормаВыбораПараметра.ОткрытьМодально();
		
	Если ПараметрСсылка = Неопределено Тогда	
		Возврат;	
	КонецЕсли;
	
	ВидПараметра = СтрЗаменить(Команда.Имя, "КомандаВставить", "");	
	ДобавитьПараметрВШаблон(ВидПараметра, ПараметрСсылка, , Истина);	
		
	НеАктивизироватьСтрокуПараметра = Истина;
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	
	// Выделение строки добавленного параметра.
	ТекСтрокаПараметра = ПолучитьПараметрИзКеша(Строка(ПараметрСсылка.УникальныйИдентификатор()), Истина);
	Если ТекСтрокаПараметра <> Неопределено Тогда
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ТекСтрокаПараметра.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЭлемент(Команда)
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	ВидЭлемента = СтрЗаменить(Команда.Имя, "КомандаВставить", "");
	
	ДобавитьПараметрВШаблон(ВидЭлемента, , Истина);	
			
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	ДокументHTML = Элемент.Документ;
	
	Если Не РаботаСHTMLКлиентСервер.ЭлементПустой(ДокументHTML) И Не РаботаСHTMLКлиентСервер.ЭлементПустой(ДокументHTML.body) Тогда
		ДокументHTML.body.contentEditable = "true";
		ДокументHTML.designMode = "On";
	КонецЕсли;
	
	childNodes = ?(ДокументHTML.body <> Неопределено, ДокументHTML.body.childNodes, ДокументHTML.childNodes); 
	Если childNodes.length > 0
		И Не РаботаСHTMLКлиентСервер.ЭлементПустой(childNodes.item(0))
	Тогда
		Попытка
			childNodes.item(0).focus();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	НеАктивизироватьСтрокуПараметра = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДокументHTML = ВыполнитьОбработкуHTMLШаблонаПередЗаписью();
	Объект.ТекстHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML); 		
	ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML);
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения");
	
	// Определение изменения текста нтмл без модифицированности формы.
	Если Не Модифицированность
		И Не Объект.Ссылка.Пустая() 
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML
	Тогда
	
		ТекстHTML = РаботаСШаблонамиHTMLКлиентСервер.НормализоватьТекстHTMLШаблона(Элементы.ПолеHTMLДокумента.Документ.body.innerHTML);
		
	    Если ТекстHTML <> ДопСерверныеФункции.ПолучитьРеквизит(Объект.Ссылка, "ТекстHTML") Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗначениеЗаполнено(ВременныйКаталогИзображений) Тогда
		УдалитьФайлы(ВременныйКаталогИзображений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьОбработкуHTMLШаблонаПередЗаписью()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML Тогда
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Элементы.ПолеHTMLДокумента.Документ.body.innerHTML);
	Иначе
		ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(ТекстHTML), РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию(), ТекстHTML));
	КонецЕсли;
	
	РаботаСШаблонамиHTMLКлиентСервер.НормализоватьВычисляемыеБлокиHTML(ДокументHTML);
	
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	ЗаполнитьСписокИзображенийПоШаблону(ДокументHTML, соотвКешИзображенийШаблонов);
	ЗаполнитьСоответствияПараметрам();
	
	Возврат ДокументHTML;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСоответствияПараметрам()
	
	Объект.СоответствияПараметрам.Загрузить(КешДобавляемыеПараметры.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Команда = Сред(Элемент.Имя, 8);
	Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Команда) Тогда
		Список = Элемент.СписокВыбора;
		Элементы.ПолеHTMLДокумента.Документ.execCommand(Команда, Истина, ВыбранноеЗначение);
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеHTMLДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Кнопка)
	
	Команда = Сред(Кнопка.Имя, 8);
	Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Команда) Тогда
		Элементы.ПолеHTMLДокумента.Документ.execCommand(Команда, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ПредыдущаяСтраница = "СтраницаHTML" Тогда
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Элементы.ПолеHTMLДокумента.Документ.body.innerHTML);
		ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML,,Ложь,Истина);
	ИначеЕсли ТекстHTMLИзмененВручную Тогда
		ТекстHTMLИзмененВручную = Ложь;
		ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(ТекстHTML), РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию(), ТекстHTML));
		ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML,,Истина,Ложь);
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "СтраницаHTML" Тогда
		
		Элементы.КоманднаяПанельКнопок.Доступность	 = Истина;
		Элементы.ГруппаВыпадающихСписков.Доступность = Истина;
		
		ПредыдущаяСтраница = "СтраницаHTML";
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения", 0.1, Истина);
		
	ИначеЕсли ТекущаяСтраница.Имя = "СтраницаТекст" Тогда
		
		Элементы.КоманднаяПанельКнопок.Доступность	 = Ложь;
		Элементы.ГруппаВыпадающихСписков.Доступность = Ложь;
		
		ПредыдущаяСтраница = "СтраницаТекст";
		ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения");
		
	ИначеЕсли ТекущаяСтраница.Имя = "СтраницаПросмотр" Тогда
		
		Элементы.КоманднаяПанельКнопок.Доступность	 = Ложь;
		Элементы.ГруппаВыпадающихСписков.Доступность = Ложь;
		
		ПредыдущаяСтраница = "СтраницаПросмотр";
		ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения");
		
	Иначе
		
		ПредыдущаяСтраница = "";
		ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения");
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеКодаHTMLПриИзменении(Элемент)
	
	ТекстHTMLИзмененВручную = Истина;
	
	ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(ТекстHTML), РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию(), ТекстHTML));
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	Цвет = ПолучитьФорму("Справочник.ШаблоныHTML.Форма.ВыборЦвета").ОткрытьМодально();
	
	Если Цвет <> Неопределено Тогда
		Кнопка = Сред(Команда.Имя, 8);
		Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Кнопка) Тогда
			Элементы.ПолеHTMLДокумента.Документ.execCommand(Кнопка, Ложь, "" + ПеревестиИз10(Цвет.Красный) + ПеревестиИз10(Цвет.Зеленый) + ПеревестиИз10(Цвет.Синий));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПеревестиИз10(Знач Значение = 0) 
	
	Значение = Число(Значение);
	Если Значение <= 0 Тогда
		Возврат "00";
	КонецЕсли;
	
	Значение = Цел(Значение);
	Результат = "";
	
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%16+1,1) + Результат;
		Значение = Цел(Значение/16);
	КонецЦикла;
	
	Если СтрДлина(Результат) = 1 Тогда
		Результат = "0" + Результат;
	КонецЕсли; 
  
	Возврат Результат;
	
КонецФункции

#Область ПодборПараметров

&НаКлиенте
Процедура СписокПараметровПриАктивизацииСтроки(Элемент)

	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекПараметрЗаголовок = Строка(ТекДанные.Ссылка) + ":";
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если ТекДанные.ЭтоГруппа Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Необходимо выбрать элемента, а не группу!'"));
	КонецЕсли;
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;	
	ТекПараметр = ВыбраннаяСтрока;
	Если Не ЗначениеЗаполнено(ТекПараметрВид) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбран вид параметра для вставки!'"));
		Возврат;
	КонецЕсли;
	
	ДобавитьПараметрВШаблон(ТекПараметрВид, ТекПараметр);	
		
	НеАктивизироватьСтрокуПараметра = Истина;
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	
	// Выделение строки добавленного параметра.
	ТекСтрокаПараметра = ПолучитьПараметрИзКеша(Строка(ТекПараметр.УникальныйИдентификатор()), Истина);
	Если ТекСтрокаПараметра <> Неопределено Тогда
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ТекСтрокаПараметра.ПолучитьИдентификатор();
	КонецЕсли;	
	
КонецПроцедуры

// ----------------ВСТАВКА-ПАРАМЕТРОВ-И-ЭЛЕМЕНТОВ-----------------.

&НаКлиенте
Процедура ВставлятьЗаголовокПриИзменении(Элемент)
	Элементы.ТекПараметрЗаголовок.Доступность = ТекПараметрВставлятьЗаголовок;
КонецПроцедуры

// Добавляет параметр в шаблон с выбранным видом.
// ВидПараметра - вид параметра HTML или вид элемента HTML.
// ТекПараметр - ссылка на параметр. Если первый параметр является видом элемента HTML, то должен быть неопределено.
&НаКлиенте
Процедура ДобавитьПараметрВШаблон(ВидПараметра, ТекПараметр = Неопределено, ВставкаЭлемента = Ложь, ВставлятьТолькоПараметр = Ложь)
	
	СНовойСтроки = Не ВставлятьТолькоПараметр И ТекПараметрСНовойСтроки;
	ВставлятьЗаголовок = Не ВставлятьТолькоПараметр И ТекПараметрВставлятьЗаголовок;
	
	Если ВставкаЭлемента Тогда
		ТекПараметр = Неопределено;
	Иначе
		// Должны вставлять параметр, но его не передали - ничего не делаем.
		Если ТекПараметр = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстHTML = "";
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML Тогда
		ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
		Если ДокументHTML.getSelection().focusNode = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана позиция в тексте для добавления'"));
			Возврат;	
		КонецЕсли;
		ТекстHTML = ДокументHTML.body.innerHTML;
		Если ТекПараметр = Неопределено Тогда
			ТекстHTMLПараметра = СформироватьТекстHTMLЭлемента(ВидПараметра);
		Иначе
			ТекстHTMLПараметра = СформироватьПолныйТекстHTMLПараметра(ТекПараметр, ВидПараметра, 
				?(ВставлятьЗаголовок, ТекПараметрЗаголовок, Неопределено), СНовойСтроки);
		КонецЕсли;
		ТекстHTML = ДобавитьТекстHTMLВДокумент(ДокументHTML, ТекстHTMLПараметра);
		Если ВидПараметра = "Картинка" Тогда
			РаботаСШаблонамиHTMLКлиентСервер.ЗагрузитьИзображенияПриема(ДокументHTML, соотвКешИзображенийШаблонов, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТекст Тогда
		// Формируем текст параметра
		Если ТекПараметр = Неопределено Тогда
			ТекстHTMLПараметра = СформироватьТекстHTMLЭлемента(ВидПараметра);
		Иначе
			ТекстHTMLПараметра = СформироватьПолныйТекстHTMLПараметра(ТекПараметр, ВидПараметра, 
			?(ВставлятьЗаголовок, ТекПараметрЗаголовок, Неопределено), СНовойСтроки);
		КонецЕсли;
		ТекстHTML = ДобавитьКодHTMLВДокумент(Элементы.ПолеКодаHTML, ТекстHTMLПараметра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура ЗаменаВыделенныхПараметровЗавершение.
//
// Параметры:
//  Результат - КодВозвратаДиалога
//  ДополнительныеПараметры - Структура
//
Процедура ЗаменаВыделенныхПараметровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекПараметр = ДополнительныеПараметры.ТекПараметр;
		ТекстHTML = ДополнительныеПараметры.ТекстHTML;
		мсВыдПараметры = ДополнительныеПараметры.мсВыдПараметры;
		ДокументHTML = ДополнительныеПараметры.ДокументHTML;
		ВидПараметра = ДополнительныеПараметры.ВидПараметра;
		
		// Формируем текст параметра
		Если ТекПараметр = Неопределено Тогда
			ТекстHTMLПараметра = СформироватьТекстHTMLЭлемента(ВидПараметра);
		Иначе
			ТекстHTMLПараметра = СформироватьПолныйТекстHTMLПараметра(ТекПараметр, ВидПараметра);
		КонецЕсли;
		Для Каждого элПараметр Из мсВыдПараметры Цикл
			// Удаляем область с параметром.
			УдалитьЭлементHTML(элПараметр);
			ТекстHTML = ДобавитьТекстHTMLВДокумент(ДокументHTML, ТекстHTMLПараметра);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьУзелВСелекшенДокумента(ДокументHTML, Узел)
	
	doc = ДокументHTML;
	sel = ДокументHTML.getSelection();
	
	// Первый диапазон селекшена
	range = sel.getRangeAt(0);
	
	sel.removeAllRanges();
	
	// Удалить содержимое текущего селекшена.
	Если range <> Неопределено Тогда
		range.deleteContents();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана позиция для подстановки в тексте'"));
		Возврат;
	КонецЕсли;
	
	// Получить расположение текущего селекшена.
	container = range.startContainer;
	Пока ТегиРазрешающиеВставкуПараметров.Найти(НРег(container.tagName)) = Неопределено Цикл
		container = container.parentNode;
	КонецЦикла;
	pos = range.startOffset;
	
	// Создать новый диапазон для нового селекшена.
	range = ДокументHTML.createRange();
	
	Если (container.nodeType=3 И Узел.nodeType=3) Тогда
		// Если текст вставляется в textNode, делать оптимизированную вставку.
		container.insertData(pos, Узел.data);
		// Установить курсор после вставленного текста.
		range.setEnd(container, pos+Узел.length);
		range.setStart(container, pos+Узел.length);
		
	Иначе
		
		afterNode = Неопределено;
		beforeNode = Неопределено;
		Если (container.nodeType=3) Тогда
			// При вставке в textNode создать 2 textNode, между ними поместить insertNode.
			textNode = container;
			container = textNode.parentNode;
			text = textNode.nodeValue;
			
			textBefore = Сред(text,0,pos);
			textAfter = Сред(text,pos+1);
			
			beforeNode = ДокументHTML.createTextNode(textBefore);
			afterNode = ДокументHTML.createTextNode(textAfter);
			
			// Вставить 3 новых узла перед исходным textNode, и удалить его.
			container.insertBefore(afterNode, textNode);
			container.insertBefore(Узел, afterNode);
			container.insertBefore(beforeNode, Узел);
			
			// Удалить старую дочерний узел.
			container.removeChild(textNode);
			
		Иначе 
			// Иначе вставить узел
			Если container.childNodes.length >= pos И container.childNodes.length <> 0 Тогда
				Попытка
					afterNode = container.childNodes[pos];
					container.insertBefore(Узел, afterNode);
				Исключение
					container.appendChild(Узел);
				КонецПопытки;
			Иначе
				container.appendChild(Узел);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			range.setEnd(afterNode, 0);
			range.setStart(afterNode, 0);
		Исключение
		КонецПопытки;
		
		sel.addRange(range);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет текст html в область выделения документа.
&НаКлиенте
Функция ДобавитьТекстHTMLВДокумент(ДокументHTML, Знач ТекстHTML, ИмяТегаИсключенияВложения = "")
	
	НовыйУзел = ДокументHTML.createElement("span");
	НовыйУзел.innerHTML = ТекстHTML;
	
	ВставитьУзелВСелекшенДокумента(ДокументHTML, НовыйУзел);
	
	Возврат ДокументHTML.body.innerHTML;
	
КонецФункции
// Добавляет код html в область выделения текстового документа.
&НаКлиенте
Функция ДобавитьКодHTMLВДокумент(ТекстовыйДокумент, КодЭлементаHTML)
	 
	ТекстовыйДокумент.ВыделенныйТекст = КодЭлементаHTML;
	ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует html-код с учетом заголовка и переноса на новую строку.
&НаКлиенте
Функция СформироватьПолныйТекстHTMLПараметра(ПараметрСсылка, ВидПараметра, Заголовок = Неопределено, СНовойСтроки = Ложь)
	
	ТекстПараметраHTML = СформироватьТекстHTMLПараметра(ПараметрСсылка, ВидПараметра);
	Если ЗначениеЗаполнено(Заголовок) Тогда
		ТекстПараметраHTML = Заголовок + " " + ТекстПараметраHTML;
	КонецЕсли;
	Если СНовойСтроки Тогда 
		ТекстПараметраHTML = "<DIV class=FORMAT>" + ТекстПараметраHTML + "</DIV>";
	КонецЕсли;
	
	Возврат ТекстПараметраHTML;
	
КонецФункции

// Формирует html-код для параметра по виду.
&НаКлиенте
Функция СформироватьТекстHTMLПараметра(ПараметрСсылка, ВидПараметра)
	
	ТекстHTMLПараметра = "";
	Если ВидПараметра = "Ссылка" Тогда		
		
		ТекстHTMLПараметра = "<a id='" + Строка(ПараметрСсылка.УникальныйИдентификатор()) + "' href=about:>[...]</a>";				
		
	ИначеЕсли ВидПараметра = "Флажок" Тогда
		
		ТекстHTMLПараметра = "<input type='checkbox' id='" + Строка(ПараметрСсылка.УникальныйИдентификатор()) + "' value='False'></input>";
		
	ИначеЕсли ВидПараметра = "ПолеВыбора" Тогда
		
		Структура = Новый Структура("Параметр", ПараметрСсылка);	
		ФормаЗаполненияСпискаВыбора = ПолучитьФорму("Справочник.ШаблоныHTML.Форма.ФормаСпискаВыбора", Структура);
		СписокВыбора = ФормаЗаполненияСпискаВыбора.ОткрытьМодально();	
		Если СписокВыбора <> Неопределено Тогда
			
			ВыборHTML = "<select id='" + Строка(ПараметрСсылка.УникальныйИдентификатор()) + "'>";		
			Для Каждого Строка Из СписокВыбора Цикл						
				ВыборHTML = ВыборHTML + "<option " + ?(Строка.ПоУмолчанию, "selected ", "") + "value='" + 
					РаботаСШаблонамиHTML.ПреобразоватьЗначениеВСтрокуВнутр(Строка.Значение) + "'>" + Строка.Представление;				
			КонецЦикла;			
			ВыборHTML  = ВыборHTML + "</select>";
			ТекстHTMLПараметра = ВыборHTML;
			
		КонецЕсли;
		
	ИначеЕсли ВидПараметра = "ПолеВвода" Тогда
		
		ТекстHTMLПараметра = "<textarea rows=1 style=overflow:auto id='" + 
			Строка(ПараметрСсылка.УникальныйИдентификатор()) + "'></textarea>";
		
	КонецЕсли;	
	
	Возврат ТекстHTMLПараметра;
	
КонецФункции

// Формирует html-код вставляемого элемента по виду.
&НаКлиенте
Функция СформироватьТекстHTMLЭлемента(ВидЭлемента)
	
	ТекстHTMLЭлемента = "";
	Если ВидЭлемента = "Линия" Тогда
		
		ТекстHTMLЭлемента = "<HR>";
		
	ИначеЕсли ВидЭлемента = "Таблица" Тогда
		
		ФормаПараметровТаблицы = ПолучитьФорму("Справочник.ШаблоныHTML.Форма.ФормаВставкиТаблицы");
		ПараметрыТаблицы = ФормаПараметровТаблицы.ОткрытьМодально();
		ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
		Таблица = ДокументHTML.createElement("table");	
	
		Если ПараметрыТаблицы = Неопределено Или ПараметрыТаблицы.Строки = 0 Или ПараметрыТаблицы.Колонки = 0 Тогда		
			Возврат ТекстHTMLЭлемента;		
		КонецЕсли;
		
		Таблица.width = "100%";	
		Таблица.border = "3";	
		Если ПараметрыТаблицы.Заголовок <> "" Тогда		
			Таблица.createCaption();
			Таблица.caption.innerText = ПараметрыТаблицы.Заголовок;			
		КонецЕсли;
		
		Для КоличествоСтрок = 1 По ПараметрыТаблицы.Строки Цикл			
			НоваяСтрока = Таблица.insertRow();			
			Для КоличествоСтолбцов = 1 По ПараметрыТаблицы.Колонки Цикл				
				НоваяЯчейка = НоваяСтрока.insertCell();
				НоваяЯчейка.innerText = Символы.НПП;
				НоваяЯчейка.width = Строка(Окр(100/ПараметрыТаблицы.Колонки)) + "%";
				НоваяЯчейка.style.wordWrap = "break-word";				
			КонецЦикла;			
		КонецЦикла;
		
		ТекстHTMLЭлемента = Таблица.outerHTML; 
		
	ИначеЕсли ВидЭлемента = "Разрыв" Тогда
		
		ТекстHTMLЭлемента = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстHTMLРазрывСтраницы(Истина);
		
	ИначеЕсли ВидЭлемента = "Картинка" Тогда 
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Фильтр = "Изображения (*.jpg, *.png, *.gif)|*.jpg;*.png;*.gif";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ИмяФайлаКартинки = "";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			ФайлКартинки = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
			
			ИдентификаторИзображения = 
				РаботаСШаблонамиHTMLКлиентСервер.ДобавитьИзображениеВКеш(соотвКешИзображенийШаблонов, ДиалогОткрытияФайла.ПолноеИмяФайла, ЭтаФорма.УникальныйИдентификатор); 
				
			Если ИдентификаторИзображения <> Неопределено Тогда 
				Картинка = Элементы.ПолеHTMLДокумента.Документ.createElement("image");
				Картинка.id = ИдентификаторИзображения;
				Картинка.src = соотвКешИзображенийШаблонов.Получить(ИдентификаторИзображения).АдресВХранилище;
				ТекстHTMLЭлемента = Картинка.outerHTML;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ТекстHTMLЭлемента;
	
КонецФункции

// ----------------КЕШ-ПАРАМЕТРОВ-----------------

// Первоначальное заполнение кеша параметров из таблицы.
&НаКлиенте
Процедура ЗаполнитьКешПараметров()
	
	мсНеОбрабатываемыеУИД = Новый Массив;
	КешДобавляемыеПараметры.Очистить();
	Для Каждого СтрокаПараметр Из Объект.СоответствияПараметрам Цикл
		
		НоваяСтрока = КешДобавляемыеПараметры.Добавить();
		НоваяСтрока.Параметр = СтрокаПараметр.Параметр;
		НоваяСтрока.Идентификатор = Строка(СтрокаПараметр.Параметр.УникальныйИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение кеша параметров на основании HTML-документа.
&НаКлиенте
Процедура ЗаполнитьКешПараметровПоШаблону(ДокументHTML)
	
	мсОбновленныеСтроки = Новый Массив;
	
	// Ссылки
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "A", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
		// Нормализуем ссылки - внутри них не должно быть тегов.
		РаботаСHTMLКлиентСервер.ПоместитьЭлементВглубьДерева(Параметр, Истина);
		Параметр.textContent = "[...]";
		
	КонецЦикла;
	
	// Поля ввода
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "TEXTAREA", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	// Флажки
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "INPUT", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	// Списки выбора
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "SELECT", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	// Ищем строки, которых уже нет в шаблоне.
	мсСтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПараметр Из КешДобавляемыеПараметры Цикл
		Если мсОбновленныеСтроки.Найти(СтрокаПараметр) = Неопределено Тогда
			мсСтрокиКУдалению.Добавить(СтрокаПараметр);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого элСтрокаКУдалению Из мсСтрокиКУдалению Цикл 
		КешДобавляемыеПараметры.Удалить(элСтрокаКУдалению);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИзображенийПоШаблону(ДокументHTML, Знач соотвКешИзображенийШаблонов)
	
	Объект.СписокИзображений.Очистить();
	
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "IMG", Истина);
	Для Каждого ЭлементКартинка Из СписокЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКартинка.id) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКартинка.src = "";
		СтруктураКартинки = соотвКешИзображенийШаблонов.Получить(ЭлементКартинка.id);
		
		Если СтруктураКартинки = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.СписокИзображений.Добавить();
		НоваяСтрока.Идентификатор = СтруктураКартинки.Идентификатор;
		НоваяСтрока.Расширение = СтруктураКартинки.Расширение;
		
		ДанныеКартинка = ПолучитьИзВременногоХранилища(СтруктураКартинки.АдресВХранилище);
		ДвоичныеДанныеКартинки = ДанныеКартинка;
		Если ТипЗнч(ДанныеКартинка) = Тип("Картинка") Тогда 
			ДвоичныеДанныеКартинки = ДанныеКартинка.ПолучитьДвоичныеДанные();
		КонецЕсли;
		
		НоваяСтрока.ИзображениеBase64 = Base64Строка(ДвоичныеДанныеКартинки);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает самый глубокий узел элемента, если их встречается несколько - берет первый, остальные удаляет.
&НаКлиенте
Функция ПолучитьПоследнийУзел(ЭлементHTML)
	
	Если ЭлементHTML.childNodes.length = 0 Тогда
		Возврат ЭлементHTML;
	Иначе
		// Удаляем прочие узлы, если их несколько.
		Для Сч = 1 По ЭлементHTML.childNodes.length - 1 Цикл 
			ЭлементHTML.removeChild(ЭлементHTML.childNodes.item(Сч));
		КонецЦикла;
		Возврат ПолучитьПоследнийУзел(ЭлементHTML.childNodes.item(0));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДополнитьКешПараметров(ПараметрСсылка, ИскатьСуществующий = Истина)
	
	Если Не ИскатьСуществующий Тогда
		НоваяСтрока = КешДобавляемыеПараметры.Добавить();
		НоваяСтрока.Параметр = ПараметрСсылка;
		НоваяСтрока.Идентификатор = Строка(ПараметрСсылка.УникальныйИдентификатор());
		
		Возврат НоваяСтрока;		
	Иначе
		НайдПараметры = КешДобавляемыеПараметры.НайтиСтроки(Новый Структура("Параметр", ПараметрСсылка));
		Если НайдПараметры.Количество() = 0 Тогда			
			НоваяСтрока = КешДобавляемыеПараметры.Добавить();
			НоваяСтрока.Параметр = ПараметрСсылка;
			НоваяСтрока.Идентификатор = Строка(ПараметрСсылка.УникальныйИдентификатор());
			
			Возврат НоваяСтрока;			
		Иначе
			// Очистка лишних параметров
			НайдСтрока = НайдПараметры[0];
			НайдПараметры.Удалить(0);
			Для Каждого СтрокаПараметр Из НайдПараметры Цикл
				КешДобавляемыеПараметры.Удалить(СтрокаПараметр);
			КонецЦикла;
			
			Возврат НайдСтрока;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрИзКеша(УИД, ВернутьСтроку = Ложь)
	
	НайдПараметры = КешДобавляемыеПараметры.НайтиСтроки(Новый Структура("Идентификатор", УИД));
	Если НайдПараметры.Количество() > 0 Тогда
		Если ВернутьСтроку Тогда
			Возврат НайдПараметры[0];
		Иначе
			Возврат НайдПараметры[0].Параметр;
		КонецЕсли;
	Иначе
		Попытка
			ИдПараметра = Новый УникальныйИдентификатор(УИД);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		НайдПараметр = ПолучитьПараметрПоУИД(ИдПараметра);
		Если Не НайдПараметр.Пустая() Тогда
			СтрокаПараметр = ДополнитьКешПараметров(НайдПараметр, Ложь);
			Если ВернутьСтроку Тогда
				Возврат СтрокаПараметр;
			Иначе
				Возврат НайдПараметр;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура КешДобавляемыеПараметрыПриАктивизацииСтроки(Элемент)
	
	Если НеАктивизироватьСтрокуПараметра Или Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаHTML Тогда
		НеАктивизироватьСтрокуПараметра = Ложь;
		Возврат;
	КонецЕсли;
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные = Неопределено
		Или ДокументHTML = Неопределено 
		Или ДокументHTML.body = Неопределено 
	Тогда
		Возврат;
	КонецЕсли;
	
	мсНайдПараметры = ПолучитьВсеПараметрыПоУИД(ДокументHTML, ТекДанные.Идентификатор);
	Если мсНайдПараметры.Количество() = 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекДанные", ТекДанные);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("УдалитьПараметрШаблонаИзСпискаЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеОЗакрытии, НСтр("ru='Параметр не найден в шаблоне. Удалить из списка?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НайдПараметр = мсНайдПараметры[0];
	ВыделитьЭлементHTML(ДокументHTML, НайдПараметр);
	РежимВставки = 1;
	
КонецПроцедуры

&НаКлиенте
// Процедура УдалитьПараметрШаблонаИзСпискаЗавершение.
//
// Параметры:
//  Результат - КодВозвратаДиалога - ответ
//  ДополнительныеПараметры - Структура.
//
Процедура УдалитьПараметрШаблонаИзСпискаЗавершение(Результат = Неопределено, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	Если Результат = КодВозвратаДиалога.Да Тогда
		КешДобавляемыеПараметры.Удалить(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

// ----------------ПРОЧИЕ-ФУНКЦИИ-РАБОТЫ-С-ПАРАМЕТРАМИ-----------------.

&НаКлиенте
Функция ПолучитьМассивВыделенныхПараметров(ДокументHTML)
	МассивПараметров = Новый Массив;
	Выделение = ДокументHTML.getSelection();
	НайдЭлемент = НайтиЭлементСЗаполненнымID(Выделение.focusNode);
	Если НайдЭлемент <> Неопределено
		// И НРег(Выделение.type) = "range"
	Тогда
		МассивПараметров.Добавить(НайдЭлемент);
	КонецЕсли;
	
	Возврат МассивПараметров;
КонецФункции

&НаКлиенте
Функция ПолучитьВсеПараметрыПоУИД(ДокументHTML, Знач УИД)
	
	МассивПараметров = Новый Массив;
	
	Если Не ЗначениеЗаполнено(УИД) Тогда 
		Возврат МассивПараметров;
	КонецЕсли;
	
	НайдПараметр = ДокументHTML.getElementById(УИД);
	Пока НайдПараметр <> Неопределено Цикл
		НайдПараметр.id = "";
		МассивПараметров.Добавить(НайдПараметр);
		НайдПараметр = ДокументHTML.getElementById(УИД);
	КонецЦикла;
	
	Для Каждого НайдПараметр Из МассивПараметров Цикл
		НайдПараметр.id = УИД;
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции

&НаКлиенте
Процедура УдалитьЭлементHTML(Элемент)
	
	Родитель = Элемент.parentNode.parentNode;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Родитель.removeChild(Элемент.parentNode);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЭлементHTML(ДокументHTML, ЭлементHTML)
	
	ВыделеннаяОбласть = ДокументHTML.getSelection();
	Элемент = ДокументHTML.getElementById(ЭлементHTML.id);
	Область = ДокументHTML.createRange();
	Область.selectNode(Элемент);
	Область.setStartBefore(Элемент);
	Область.setEndAfter(Элемент);
	ВыделеннаяОбласть.addRange(Область);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЭлементСЗаполненнымID(Элемент, ТолькоПараметры = Истина)
	
	Если Элемент = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	КорректныйИД = Ложь;
	Если ЗначениеЗаполнено(Элемент.id) Тогда
		КорректныйИД = Истина;
		Если ТолькоПараметры Тогда
			Попытка
				УИД = Новый УникальныйИдентификатор(Элемент.id);
			Исключение
				КорректныйИД = Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если КорректныйИД Тогда		
		Возврат Элемент;
	ИначеЕсли Элемент.parentElement = Null Или Элемент.parentElement = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайтиЭлементСЗаполненнымID(Элемент.parentElement);
	КонецЕсли;
	
КонецФункции

// ----------------ПРОЧИЕ-ФУНКЦИИ-РАБОТЫ-С-HTML-----------------.

// ----------------ОБРАБОТЧИКИ-ОЖИДАНИЯ-----------------

&НаКлиенте
Процедура ОбработчикОжиданияПроверкаВыделения()
		
	Если ТекущийЭлемент <> Элементы.ПолеHTMLДокумента Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	НеАктивизироватьСтрокуПараметра = Ложь;
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	мсЭлементы = ПолучитьМассивВыделенныхПараметров(Элементы.ПолеHTMLДокумента.Документ);
	
	ЭлементHTML = Неопределено;
	Если мсЭлементы.Количество() = 0 Тогда
		ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ДокументHTML.activeElement);
	ИначеЕсли мсЭлементы.Количество() = 1 Тогда
		ЭлементHTML = мсЭлементы[0];
	КонецЕсли;
	
	Если ЭлементHTML = Неопределено Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения", 0.1, Истина);
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = Неопределено;
		РежимВставки = 0;
		Возврат;
	КонецЕсли;
	
	ТекУИД = ЭлементHTML.id;
	ТекСтрокаПараметр = Неопределено;
	Если мсНеОбрабатываемыеУИД.Найти(ТекУИД) = Неопределено Тогда 
		ТекСтрокаПараметр = ПолучитьПараметрИзКеша(ТекУИД, Истина);
	КонецЕсли;
	
	Если ТекСтрокаПараметр = Неопределено Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения", 0.1, Истина);
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = Неопределено;
		РежимВставки = 0;
		мсНеОбрабатываемыеУИД.Добавить(ТекУИД);
		Возврат;
	КонецЕсли; 
	
	ИдентификаторСтроки = ТекСтрокаПараметр.ПолучитьИдентификатор();
	Если ВРег(ЭлементHTML.tagName) = "A" Тогда
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ИдентификаторСтроки;	
	Иначе
		НеАктивизироватьСтрокуПараметра = Истина;
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ИдентификаторСтроки;
		НеАктивизироватьСтрокуПараметра = Ложь;
	КонецЕсли;
	РежимВставки = 1;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаВыделения", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрПоУИД(УИД)
	
	Если ТипЗнч(УИД) = Тип("Строка") Тогда
		Попытка
			УИД = Новый УникальныйИдентификатор(УИД);
		Исключение
			Возврат Справочники.ВычисляемыеЗначенияПараметров.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ПараметрСсылка = Справочники.ВычисляемыеЗначенияПараметров.ПолучитьСсылку(УИД);
		Если ПараметрСсылка.ПолучитьОбъект() = Неопределено Тогда
			ПараметрСсылка = Справочники.ВычисляемыеЗначенияПараметров.ПустаяСсылка();
		КонецЕсли;
	Исключение
		ПараметрСсылка = Справочники.ВычисляемыеЗначенияПараметров.ПустаяСсылка();
	КонецПопытки;
	
	Возврат ПараметрСсылка;
	
КонецФункции

&НаКлиенте
Процедура ПросмотрHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтWORD(Команда)
	
	Документ = Элементы.ПолеHTMLДокумента.Документ;
	ОчиститьОтНенужныхТегов(Документ.Body);
	
КонецПроцедуры

&НаКлиенте
Функция ОчиститьОтНенужныхТегов(Документ)
	
	МассивИменАтрибутовДляУдаления = Новый Массив;
	
	Если Нрег(Документ.TagName) = "td" Тогда
		
		// Для ячеек таблиц необходимо.
		// 1. Убрать атрибут "width"
		Для Каждого Атрибут Из Документ.attributes Цикл
			Если Нрег(Атрибут.name) = "width" Тогда
				МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			КонецЕсли;
		КонецЦикла;
		
		// 2. Убрать тэг "p", сохранив его содержимое.
		НенужныеДети = Новый Массив;
		Для Каждого Ребенок Из Документ.children Цикл
			Если Нрег(Ребенок.Tagname) = "p" Тогда
				ВсеДетиРебенка = Ребенок.Children;
				Для Каждого РебенокРебенка Из ВсеДетиРебенка Цикл
					Документ.appendChild(РебенокРебенка);
				КонецЦикла;
				НенужныеДети.Добавить(Ребенок);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого НенужныйРебенок Из НенужныеДети Цикл
			Документ.removeChild(НенужныйРебенок);
		КонецЦикла;
	КонецЕсли;
	
	// Атрибуты для таблицы, которые нужно сохранить.
	АтрибутыTable = Новый Массив;
	АтрибутыTable.Добавить("border");
	АтрибутыTable.Добавить("style");
	
	// Необходимые свойства стиля для таблицы.
	СвойстваСтиляTable = Новый Массив;
	СвойстваСтиляTable.Добавить("border-collapse");
	СвойстваСтиляTable.Добавить("border-color");
	СвойстваСтиляTable.Добавить("border-style");
	
	ЗначенияСвойствСтилейTableПоУмолчанию = Новый Соответствие;
	ЗначенияСвойствСтилейTableПоУмолчанию.Вставить("border-collapse", "collapse");
	ЗначенияСвойствСтилейTableПоУмолчанию.Вставить("border-color", "inherit");
	ЗначенияСвойствСтилейTableПоУмолчанию.Вставить("border-style", "solid");
	
	Для Каждого Атрибут Из Документ.attributes Цикл
		
		Если Нрег(Документ.TagName) = "table"
			И АтрибутыTable.Найти(Нрег(Атрибут.name)) = Неопределено
		Тогда
			// Убрать ненужные атрибуты у элемента таблицы.
			МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			
		ИначеЕсли Нрег(Атрибут.name) = "style" Тогда
			
			// Для всех остальных элементов очистить атрибут "style" от MSO свойств стиля.
			МассивИсходныхСвойствСтиля = СтрРазделить(Атрибут.value,";", Ложь);
			МассивСвойствСтиля = Новый Массив;
			Для Каждого СвойствоСтиля Из МассивИсходныхСвойствСтиля Цикл
				
				ИмяИЗначениеСвойства = СтрРазделить(СвойствоСтиля,":");
				
				// Сохранить свойство стиля, если это не MSO-свойство.
				Если Найти(Нрег(ИмяИЗначениеСвойства[0]), "mso-") = 0 Тогда
					
					Если Нрег(Документ.TagName) = "td" Тогда
						// Для ячейки таблицы сохранить только свойство стиля "width".
						Если Нрег(ИмяИЗначениеСвойства[0]) = "width" Тогда
							МассивСвойствСтиля.Добавить(СвойствоСтиля);
						КонецЕсли;
					ИначеЕсли Нрег(Документ.TagName) = "table" Тогда
						// Для ячейки таблицы сохранить только свойства стиля, содержащиеся в массиве СвойстваСтиляTable.
						Если Не СвойстваСтиляTable.Найти(Нрег(ИмяИЗначениеСвойства[0])) = Неопределено Тогда
							МассивСвойствСтиля.Добавить(СвойствоСтиля);
						КонецЕсли;
					Иначе
						МассивСвойствСтиля.Добавить(СвойствоСтиля);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			НовоеЗначениеАтрибута = СтрСоединить(МассивСвойствСтиля,";");
			
			// Для строки таблицы установить свойство стиля "height" по умолчанию, если этого свойства нет.
			Если Нрег(Документ.TagName) = "tr"
				И Найти(Нрег(НовоеЗначениеАтрибута), "height:") = 0
			Тогда
				МассивСвойствСтиля.Добавить("height:20px");
				НовоеЗначениеАтрибута = СтрСоединить(МассивСвойствСтиля,";");
			КонецЕсли;
			
			// Установить необходимые свойства стиля для таблицы, если этих свойств нет.
			Если Нрег(Документ.TagName) = "table" Тогда
				Для Каждого СвойствоСтиляTable Из СвойстваСтиляTable Цикл
					Если Найти(Нрег(НовоеЗначениеАтрибута), СвойствоСтиляTable) = 0 Тогда
						МассивСвойствСтиля.Добавить(СвойствоСтиляTable + ":" + ЗначенияСвойствСтилейTableПоУмолчанию[СвойствоСтиляTable]);
						НовоеЗначениеАтрибута = СтрСоединить(МассивСвойствСтиля,";");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивСвойствСтиля.Количество() = 0 Тогда
				// Если в атрибуте стиля нет ни одного свойства, удалить этот атрибут.
				МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			Иначе
				Атрибут.value = НовоеЗначениеАтрибута;
			КонецЕсли;
			
		ИначеЕсли Нрег(Атрибут.name) = "class" Тогда
			// Удалить MSO-классы
			Если Лев(Атрибут.Value, 3) = "Mso" Тогда
				МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяАтрибутДляУдаления Из МассивИменАтрибутовДляУдаления Цикл
		Документ.removeAttribute(ИмяАтрибутДляУдаления);
	КонецЦикла;
	
	// Рекурсивный обратный обход дочерних узлов.
	Если Документ.children.length <> 0 Тогда
		Для НомерРебенка = -Документ.children.length + 1 По 0 Цикл
			children = Документ.children[-НомерРебенка];
			Если Не Тип(children) = Тип("Число") Тогда
				Если Найти(children.Tagname, ":") Тогда
					// Удалить ненужный узел
					Документ.removeChild(children);
				Иначе
					ОчиститьОтНенужныхТегов(children);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
