#Область РазделОписанияПеременных

&НаКлиенте
Перем КлючПоляДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Предопределенный Тогда
		Элементы.Код.Доступность = Ложь;
	КонецЕсли;
	
	Для Каждого Эл Из Объект.МакетыПечати Цикл
		
		НоваяСтрока = МакетыПечати.Добавить();
		НоваяСтрока.Макет = Эл.Макет;
		Если ТипЗнч(Эл.Макет) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			НоваяСтрока.Внешняя = Истина;
		КонецЕсли;
		НоваяСтрока.ОбластьПрименения = Эл.ОбластьПрименения;
		
	КонецЦикла;
	
	УстановитьСписокДоступныхТиповДополнительныхПолей();
	
	// Настроить доступные для выбора регистрируемые виды ЭМД
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.УИДЕГИСЗ", Справочники.РегистрируемыеЭлектронныеМедДокументы.ПолучитьИдентификаторыДоступныеРЭМД(, Ложь)));
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РегистрируемыйЭМДРЭМД.ПараметрыВыбора = НовыеПараметры;
	
	ИспользуетсяРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	
	ЗаполнитьРолиПодписей();
	УстановитьВидимостьДоступностьЭлементов();
	
	ВидыДокументаРЭМД29н.Добавить(ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.РегистрируемыеЭлектронныеМедДокументы(103));
	ВидыДокументаРЭМД29н.Добавить(ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.РегистрируемыеЭлектронныеМедДокументы(194));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнициализироватьМакетДляПодписанияЭЦП();
	РегистрируемыйЭМДРЭМДПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.МакетыПечати.Очистить();
	
	Для Каждого Эл Из МакетыПечати Цикл
		
		НоваяСтрока = Объект.МакетыПечати.Добавить();
		НоваяСтрока.Макет = Эл.Макет;
		НоваяСтрока.ОбластьПрименения = Эл.ОбластьПрименения;
		
	КонецЦикла;
	
	СохранитьРолиПодписей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура МакетыПечатиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.МакетыПечати.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.МакетыПечатиМакет.СписокВыбора.Очистить();
		Если ТекущиеДанные.Внешняя Тогда
			
			Если ТекущиеДанные.ОбластьПрименения = ПредопределенноеЗначение("Перечисление.ОбластьПримененияПФДляМО.СписокНаПрохождениеМО") Тогда
				ТипПолучателяПФ = ПредопределенноеЗначение("Документ.СписокНаПрохождениеМедосмотра.ПустаяСсылка");
			Иначе
				ТипПолучателяПФ = ПредопределенноеЗначение("Документ.ПрохождениеМедосмотра.ПустаяСсылка");
			КонецЕсли;
			
			мПечФорм = ЗаполнитьСписокВыбораВнешнейПФ(ТипПолучателяПФ);
			Для Каждого Эл Из мПечФорм Цикл
				Элементы.МакетыПечатиМакет.СписокВыбора.Добавить(Эл.Ссылка, Эл.Наименование);
			КонецЦикла;
			Элементы.МакетыПечатиМакет.СписокВыбора.СортироватьПоПредставлению();
		Иначе
			мПечФорм = ЗаполнитьСписокВыбораМакетаПФ(ТекущиеДанные.ОбластьПрименения);
			Для Каждого Эл Из мПечФорм Цикл
				Элементы.МакетыПечатиМакет.СписокВыбора.Добавить(Эл.Имя, Эл.Синоним);
			КонецЦикла;
			Элементы.МакетыПечатиМакет.СписокВыбора.СортироватьПоПредставлению();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетыПечатиВнешнийПриИзменении(Элемент)
	МакетыПечатиПриАктивизацииСтроки(Неопределено);
	ТекДанные = Элементы.МакетыПечати.ТекущиеДанные;
	Если ТекДанные.Внешняя Тогда
		ТекДанные.Макет = ПредопределенноеЗначение("Справочник.ВнешниеОбработки.ПустаяСсылка");
	Иначе
		ТекДанные.Макет = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МакетыПечатиОбластьПримененияПриИзменении(Элемент)
	МакетыПечатиПриАктивизацииСтроки(Неопределено);
	ТекДанные = Элементы.МакетыПечати.ТекущиеДанные;
	Если ТекДанные.Внешняя Тогда
		ТекДанные.Макет = ПредопределенноеЗначение("Справочник.ВнешниеОбработки.ПустаяСсылка");
	Иначе
		ТекДанные.Макет = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РолиПодписейПриИзменении(Элемент)
	
	УстановитьИдентификаторыРолей();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаРоли = РолиПодписей.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	НастройкиРоли = Новый Структура("Обязательная, Роль, РежимНастройкиДоступности, ПризнакДоступностиРоли");
	ЗаполнитьЗначенияСвойств(НастройкиРоли, СтрокаРоли);
	ПараметрыОткрытияФормы = Новый Структура("НастройкиРоли", НастройкиРоли);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеЗакрытияНастроекРоли", ЭтотОбъект, Новый Структура("ИндексСтроки", РолиПодписей.Индекс(СтрокаРоли)));
	ОткрытьФорму("Справочник.ПриказыМедосмотров.Форма.НастройкаРоли", ПараметрыОткрытияФормы, ЭтотОбъект,,,,ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СтрокаРоли = РолиПодписей.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		НастройкиРоли = Новый Структура("Обязательная, Роль, РежимНастройкиДоступности, ПризнакДоступностиРоли");
		ЗаполнитьЗначенияСвойств(НастройкиРоли, СтрокаРоли);
		ПараметрыОткрытияФормы = Новый Структура("НастройкиРоли", НастройкиРоли);
	Иначе
		ПараметрыОткрытияФормы = Неопределено;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеЗакрытияНастроекРоли", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПриказыМедосмотров.Форма.НастройкаРоли", ПараметрыОткрытияФормы, ЭтотОбъект,,,,ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеПоля.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ключ) Тогда
		ТекущиеДанные.Ключ = "u" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "_"); 
	КонецЕсли;
	
	ИдентификаторСотрудников = ПолучитьСсылкуИдентификаторыОбъектовМетаданныхСотрудники();
	Если РолиПодписей.НайтиСтроки(Новый Структура("ПризнакДоступностиРоли", КлючПоляДоИзменения)).Количество() > 0 
		И (КлючПоляДоИзменения <> ТекущиеДанные.Ключ ИЛИ ТекущиеДанные.ТипЗначения <> ИдентификаторСотрудников)  
	Тогда
		ОбщегоНазначения.СообщитьПользователю("Данная строка с ключом не может быть изменена или удалена, т.к. данный ключ используется в ""Роли ЭЦП""");
		ТекущиеДанные.Ключ = КлючПоляДоИзменения;
		ТекущиеДанные.ТипЗначения = ИдентификаторСотрудников;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередУдалением(Элемент, Отказ)
		ТекущийКлюч = Элементы.ДополнительныеПоля.ТекущиеДанные.Ключ;
	Если РолиПодписей.НайтиСтроки(Новый Структура("ПризнакДоступностиРоли", ТекущийКлюч)).Количество() > 0 Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Данная строка не может быть удалена, т.к. данный ключ используется в ""Роли ЭЦП""");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	КлючПоляДоИзменения = Элементы.ДополнительныеПоля.ТекущиеДанные.Ключ;
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяПечатнаяФормаДляПодписанияПриИзменении(Элемент)
	
	Если ВнешняяПечатнаяФормаДляПодписания Тогда
		Объект.МакетДляПодписанияЭЦП = ПредопределенноеЗначение("Справочник.ВнешниеОбработки.ПустаяСсылка");
	Иначе
		Объект.МакетДляПодписанияЭЦП = "";
	КонецЕсли;
	
	ЗаполнитьСписокВыбораДляМакетаПодписания();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрируемыйЭМДРЭМДПриИзменении(Элемент)
	
	//Элементы.ДанныеДляПодписания.Видимость	= Не (ИспользуетсяРЭМД И ЗначениеЗаполнено(Объект.ВидДокумента));
	Элементы.РолиПодписей.Видимость			= Не (ИспользуетсяРЭМД И ЗначениеЗаполнено(Объект.ВидДокумента));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияНастроекРоли(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		СтрокаРоли = РолиПодписей.Добавить();
	Иначе
		СтрокаРоли = РолиПодписей[ДополнительныеПараметры.ИндексСтроки];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаРоли, Результат);
	
	Если СтрокаРоли.РежимНастройкиДоступности = ПредопределенноеЗначение("Перечисление.РежимыНастройкиДоступностиРоли.ЗначениеПараметра") Тогда
		СтрокаРоли.ПредставлениеНастройкаДоступности = СтрШаблон("%1: %2", СтрокаРоли.РежимНастройкиДоступности, СтрокаРоли.ПризнакДоступностиРоли);
	Иначе
		СтрокаРоли.ПредставлениеНастройкаДоступности = СтрокаРоли.РежимНастройкиДоступности;
	КонецЕсли;
	
	УстановитьИдентификаторыРолей();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИдентификаторыРолей()
	
	Для Каждого СтрокаРоли Из РолиПодписей Цикл
		Если Не ЗначениеЗаполнено(СтрокаРоли.ИдентификаторРоли) Тогда
			СтрокаРоли.ИдентификаторРоли = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРолиПодписей()
	
	Объект.РолиПодписей.Очистить();
	
	Для Каждого СтрокаРоли Из РолиПодписей Цикл
		ЗаполнитьЗначенияСвойств(Объект.РолиПодписей.Добавить(), СтрокаРоли);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРолиПодписей()
	
	Для Каждого СтрокаРоли Из Объект.РолиПодписей Цикл
		НоваяРоль = РолиПодписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяРоль, СтрокаРоли);
		Если НоваяРоль.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ЗначениеПараметра Тогда
			НоваяРоль.ПредставлениеНастройкаДоступности = СтрШаблон("%1: %2", НоваяРоль.РежимНастройкиДоступности, НоваяРоль.ПризнакДоступностиРоли);
		Иначе
			НоваяРоль.ПредставлениеНастройкаДоступности = НоваяРоль.РежимНастройкиДоступности;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСписокВыбораВнешнейПФ(ВладелецПечатнойФормы)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеОбработки.Ссылка КАК Ссылка,
	|	ВнешниеОбработки.Наименование КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.СсылкаОбъекта КАК СсылкаОбъекта
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|		ПО ВнешниеОбработки.Ссылка = ВнешниеОбработкиПринадлежность.Ссылка
	|			И (ВнешниеОбработки.ВидОбработки = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма))
	|			И (ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &ВладелецПечатнойФормы)";
	
	Запрос.УстановитьПараметр("ВладелецПечатнойФормы", ВладелецПечатнойФормы);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	ДанныеВнПечФорм = Новый Массив;
	
	Если Выборка.Количество() > 0 Тогда
		
		Для Каждого Элемент Из Выборка Цикл
			
			СтрПечФорм = Новый Структура("Ссылка, Наименование", Элемент.Ссылка, Элемент.Наименование);
			ДанныеВнПечФорм.Добавить(СтрПечФорм);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВнПечФорм;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСписокВыбораМакетаПФ(ОбластьПрименения)
	
	Если ОбластьПрименения = Перечисления.ОбластьПримененияПФДляМО.СписокНаПрохождениеМО Тогда
		КоллекцияМакетов = Документы.СписокНаПрохождениеМедосмотра.ПолучитьСписокДинамическихПечатныхФорм();
	ИначеЕсли ОбластьПрименения = Перечисления.ОбластьПримененияПФДляМО.ПрохождениеМО Тогда
		КоллекцияМакетов = Документы.ПрохождениеМедосмотра.ПолучитьСписокДинамическихПечатныхФорм();
	Иначе
		КоллекцияМакетов = Новый Массив;
	КонецЕсли;
	
	//Элементы.МакетыПечатиМакет.СписокВыбора.Очистить();
	
	ДанныеВнПечФорм = Новый Массив;
	
	Если КоллекцияМакетов.Количество() > 0 Тогда
		
		Для Каждого Элемент Из КоллекцияМакетов Цикл
			//Если Строка(Элемент.ТипМакета) = "ТабличныйДокумент" Тогда // "ТипМакета.ТабличныйДокумент" недоступно.
				//Элементы.МакетыПечатиМакет.СписокВыбора.Добавить(Элемент.Имя, Элемент.Синоним);
				СтрПечФорм = Новый Структура("Имя, Синоним", Элемент.Имя, Элемент.Синоним);
				ДанныеВнПечФорм.Добавить(СтрПечФорм)
				
			//КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВнПечФорм;
	
КонецФункции

&НаСервере
Процедура УстановитьСписокДоступныхТиповДополнительныхПолей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
		|	ИдентификаторыОбъектовМетаданных.Представление КАК Представление
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	(ИдентификаторыОбъектовМетаданных.ПолноеИмя ПОДОБНО ""Документ.%""
		|			ИЛИ ИдентификаторыОбъектовМетаданных.ПолноеИмя ПОДОБНО ""Справочник.%""
		|			ИЛИ ИдентификаторыОбъектовМетаданных.ПолноеИмя ПОДОБНО ""Перечисление.%"")";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Элементы.ДополнительныеПоляТипЗначения.СписокВыбора.Добавить("Строка", "Строка");
	Элементы.ДополнительныеПоляТипЗначения.СписокВыбора.Добавить("Число", "Число");
	Элементы.ДополнительныеПоляТипЗначения.СписокВыбора.Добавить("Булево", "Булево");
	Элементы.ДополнительныеПоляТипЗначения.СписокВыбора.Добавить("Дата", "Дата");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.ДополнительныеПоляТипЗначения.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуИдентификаторыОбъектовМетаданныхСотрудники()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Имя = ""Сотрудники""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьМакетДляПодписанияЭЦП()
	
	Если ТипЗнч(Объект.МакетДляПодписанияЭЦП) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ВнешняяПечатнаяФормаДляПодписания = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораДляМакетаПодписания();
	
	Объект.МакетДляПодписанияЭЦП = Объект.МакетДляПодписанияЭЦП;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораДляМакетаПодписания()
	
	Элементы.МакетДляПодписанияЭЦП.СписокВыбора.Очистить();
	
	Если ВнешняяПечатнаяФормаДляПодписания Тогда
		мПечФорм = ЗаполнитьСписокВыбораВнешнейПФ(ПредопределенноеЗначение("Документ.ПрохождениеМедосмотра.ПустаяСсылка"));
		Для Каждого Эл Из мПечФорм Цикл
			Элементы.МакетДляПодписанияЭЦП.СписокВыбора.Добавить(Эл.Ссылка, Эл.Наименование);
		КонецЦикла;
		Элементы.МакетДляПодписанияЭЦП.СписокВыбора.СортироватьПоПредставлению();
	Иначе
		мПечФорм = ЗаполнитьСписокВыбораМакетаПФ(ПредопределенноеЗначение("Перечисление.ОбластьПримененияПФДляМО.ПрохождениеМО"));
		Для Каждого Эл Из мПечФорм Цикл
			Элементы.МакетДляПодписанияЭЦП.СписокВыбора.Добавить(Эл.Имя, Эл.Синоним);
		КонецЦикла;
		Элементы.МакетДляПодписанияЭЦП.СписокВыбора.СортироватьПоПредставлению();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйФактор(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначения.СообщитьПользователю("Для создания обязательного фактора необходимо записать элемент");
	Иначе
		СсылкаФактор = СоздатьНовыйФакторСервер(Объект.Ссылка);
		Объект.ФакторСОбязДействиями = СсылкаФактор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовыйФакторСервер(ПриказСсылка)
	
	НовыйЭлемент = Справочники.ПереченьВредныхФакторовИРабот.СоздатьЭлемент();
	НовыйЭлемент.Приказ = ПриказСсылка;
	НовыйЭлемент.Наименование = "Обязательные действия по " + ПриказСсылка.Код;
	НовыйЭлемент.Записать();
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	ИспользуетсяИнтеграцияРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	Элементы.РегистрируемыйЭМДРЭМД.Видимость = ИспользуетсяИнтеграцияРЭМД;
	
	Элементы.РегистрируемыйЭМДРЭМД.Видимость = Объект.Родитель <> МедосмотрыСервер.ПолучитьГруппуПриказовСправок();
	Элементы.ДанныеДляПодписания.Видимость = Объект.Родитель <> МедосмотрыСервер.ПолучитьГруппуПриказовСправок();
	Элементы.РегистрируемыйЭМДРЭМД.Видимость = Объект.Ссылка <> Справочники.ПриказыМедосмотров.Приказ29н;
	Элементы.ВидыДокументаРЭМД29н.Видимость = Объект.Ссылка = Справочники.ПриказыМедосмотров.Приказ29н;
	
КонецПроцедуры

#КонецОбласти
