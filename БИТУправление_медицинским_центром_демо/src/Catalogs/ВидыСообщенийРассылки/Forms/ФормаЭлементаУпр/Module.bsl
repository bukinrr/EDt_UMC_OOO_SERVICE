#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДатаДокумента.СписокВыбора.Добавить(Неопределено,"Дата и время события");
	Элементы.ДатаДокумента.СписокВыбора.Добавить("Дата","Дата документа");
	
	Если Не ЗначениеЗаполнено(Объект.СпособОтправки) Тогда 
		Объект.СпособОтправки = Перечисления.СпособыОтправкиСообщений.SMS;
	КонецЕсли;
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Если Не Параметры.Ключ.Пустая() Тогда
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		НастройкиОтбора = СправочникОбъект.ХранилищеОтбор.Получить();
		Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
			КомпоновщикОтбора.ЗагрузитьНастройки(НастройкиОтбора);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьПанельДаты();
	НастроитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.СпособыОтправкиСообщений.SMS")
		И ПустаяСтрока(Объект.ШаблонТекста)
	Тогда
		Ответ = Вопрос(НСтр("ru='Шаблон текста SMS-сообщения не заполнен. Все равно записать?'"), РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.СпособыОтправкиСообщений.EMAIL")
		И Объект.ШаблонEMAIL.Пустая()
	Тогда
		Ответ = Вопрос(НСтр("ru='Шаблон Email-сообщения не заполнен. Все равно записать?'"), РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда 
		Если Объект.ВидСобытия <> ПредопределенноеЗначение("Справочник.ВидыСобытий.ЗаписьНовойЗаявки")  	
			И Объект.ФормироватьСообщениеПриПерезаписиДокумента 
		Тогда 
			Объект.ФормироватьСообщениеПриПерезаписиДокумента = Ложь;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Для Предопределенных видов событий и для корректно заполненных видов событий оставим установленное автоформирование
	// сообщений, а для остальных - запретим.
	Если НЕ Отказ И НЕ ТекущийОбъект.ВидСобытия.Предопределенный И НЕ ЗначениеЗаполнено(ТекущийОбъект.ВидСобытия.ТипСОбытия) Тогда
		ТекущийОбъект.АвтоматическиФормироватьСообщения = Ложь;
	КонецЕсли;
	
	ТекущийОбъект.ХранилищеОтбор = Новый ХранилищеЗначения(КомпоновщикОтбора.ПолучитьНастройки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидСобытияПриИзменении(Элемент)
	
	ТипСобытия = ДопСерверныеФункции.ПолучитьРеквизит(Объект.ВидСобытия, "ТипСобытия");
	
	Если ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.НаступлениеКалендарнойДаты")
		И ТипЗнч(Объект.Дата) <> Тип("Дата")
	Тогда
		Объект.Дата = ТекущаяДата() - 86400;
		
	ИначеЕсли ТипСобытия <> ПредопределенноеЗначение("Перечисление.ТипыСобытий.НаступлениеКалендарнойДаты")
		И ТипЗнч(Объект.Дата) = Тип("Дата")
	Тогда
		Объект.Дата = Неопределено;
	КонецЕсли;
	
	НастроитьПанельДаты();
	Если ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ДеньРождения")
		Или	ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.НаступлениеКалендарнойДаты")
	Тогда
		Объект.Время = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы");	
	КонецЕсли;

	НастроитьВидимостьДоступность();
	
	Если Объект.ВидСобытия <> ПредопределенноеЗначение("Справочник.ВидыСобытий.ЗаписьНовойЗаявки") Тогда
		ОтправлятьБезПодтверждения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКалендаряПриИзменении(Элемент)
	Объект.Дата = ДатаКалендаря;
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокументаПриИзменении(Элемент)
	Объект.Дата	= ДатаДокумента;
	ВидимостьПоВариантуДатыОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ПоляШаблонаТекстаВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПоляШаблонаТекста.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаЗаполненияВыражения = ПолучитьФорму("Справочник.ВидыСообщенийРассылки.Форма.ФормаРедактированияВыраженияУпр", Новый Структура("Выражение", ТекДанные.Выражение));
	ТекДанные.Выражение = ФормаЗаполненияВыражения.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСообщенияПриИзменении(Элемент)
	НастроитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекОтбораНастройкиОтборОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекОтбораНастройкиОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	СхемаКомпоновкиДанных = СправочникОбъект.ПолучитьМакет("ПоляШаблона");
	ВремХранилищеСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	КомпоновщикОтбора.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВремХранилищеСКД)
	);
	КомпоновщикОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикОтбора.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Содержимое = СправочникОбъект.ХранилищеОтбор.Получить();
	
	Если Содержимое <> Неопределено Тогда
		КомпоновщикОтбора.ЗагрузитьНастройки(Содержимое);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьДополнительныеДаты(ВидСобытия)
	ДДаты = ВидСобытия.ДополнительныеДаты;	
	Для Каждого СтрДата Из ДДаты Цикл
		Если Элементы.ДатаДокумента.СписокВыбора.НайтиПоЗначению(СтрДата.Синоним) = Неопределено Тогда
			Элементы.ДатаДокумента.СписокВыбора.Добавить(СтрДата.Синоним,СтрДата.Синоним);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПанельДаты()
	
	ПанельДата = Элементы.ПанельДата;
	
	ТипСобытия = ДопСерверныеФункции.ПолучитьРеквизит(Объект.ВидСобытия, "ТипСобытия");
	
	Если ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ДеньРождения") Тогда
		ПанельДата.ТекущаяСтраница = ПанельДата.ПодчиненныеЭлементы.СтраницаДатаСобытия;
	ИначеЕсли ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.НаступлениеКалендарнойДаты") Тогда
		ПанельДата.ТекущаяСтраница = ПанельДата.ПодчиненныеЭлементы.СтраницаДатаКалендаря;
	ИначеЕсли ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Документ") Тогда
		ПанельДата.ТекущаяСтраница = ПанельДата.ПодчиненныеЭлементы.СтраницаДатаДокумента;
		
		мТекЗначениеДаты = Объект.Дата;
		
		ПолучитьДополнительныеДаты(Объект.ВидСобытия);
		эл = Элементы.ДатаДокумента.СписокВыбора.НайтиПоЗначению(Объект.Дата);
		Если эл <> Неопределено Тогда
			ДатаДокумента = эл.Представление;
		Иначе 
			ДатаДокумента = " ";
		КонецЕсли;
		ДатаДокумента = Объект.Дата;
	Иначе
		ПанельДата.ТекущаяСтраница = ПанельДата.ПодчиненныеЭлементы.СтраницаДатаСобытия;
	КонецЕсли;
	
	ПанельДата.Видимость = ЗначениеЗаполнено(ТипСобытия)
		Или (ЗначениеЗаполнено(Объект.ВидСобытия) И ДопСерверныеФункции.ПолучитьРеквизит(Объект.ВидСобытия, "Предопределенный"));
	
	ДатаКалендаря = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДоступность()
	
	ЭтоСМС = (Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.СпособыОтправкиСообщений.SMS"));
	Элементы.ШаблонEMAIL.Видимость = Не ЭтоСМС;
	Элементы.ГруппаПоляШаблонаТекста.Видимость = ЭтоСМС;
	ВидимостьПоВариантуДатыОтправки();
	
	ТипСобытия = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидСобытия, "ТипСобытия");
	Элементы.АвтоматическиФормироватьСообщения.Видимость = ЗначениеЗаполнено(Объект.ВидСобытия)
														 И (ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидСобытия, "Предопределенный") ИЛИ ЗначениеЗаполнено(ТипСобытия));
	Элементы.ОтправлятьБезПодтверждения.Доступность = (Объект.ВидСобытия = ПредопределенноеЗначение("Справочник.ВидыСобытий.ЗаписьНовойЗаявки"));
	
	Элементы.ФормироватьСообщениеПриПерезаписиДокумента.Видимость = (Объект.ВидСобытия = ПредопределенноеЗначение("Справочник.ВидыСобытий.ЗаписьНовойЗаявки"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПоВариантуДатыОтправки()
	
	УпреждениеВозможно = ДатаДокумента <> Неопределено;
	
	Элементы.ЗапасДней.Видимость = УпреждениеВозможно;
	Элементы.ВремяОтправки_ДатаСобытия1.Видимость = УпреждениеВозможно;
	
КонецПроцедуры

#КонецОбласти
