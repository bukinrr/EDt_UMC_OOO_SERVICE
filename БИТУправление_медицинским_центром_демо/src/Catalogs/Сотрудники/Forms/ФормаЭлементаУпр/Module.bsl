#Область РазделОписанияПеременных

&НаКлиенте
Перем текФамилия;

&НаКлиенте
Перем текИмя;

&НаКлиенте
Перем текОтчество;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСервер.УстановитьУсловноеОформлениеПоляКонтактнойИнфомрации(КонтактнаяИнформация);
	НастроитьТабличныеЧасти(Истина);
	ОбновитьДанныеСотрудника();
	НастройкаПодбораПриСоздании();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Изображение = ПолучитьКартинку(Объект.Ссылка);
	КонецЕсли;
	Элементы.Изображение.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Элементы.ГруппаКнопкиИзмененияФотоСотрудника.Видимость = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ФотографииСотрудников);
	
	Элементы.ПанельФормы.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	
	// Локализация
	ОсновнаяСтрана = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнаяСтрана");
	Если ОсновнаяСтрана = Справочники.СтраныМира.Россия Тогда
		Элементы.СНИЛС.Маска = МедицинскоеСтрахованиеКлиентСервер.МаскаСНИЛС();
	ИначеЕсли ЗначениеЗаполнено(ОсновнаяСтрана) Тогда
		Элементы.СНИЛС.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрыВыбораПоля = Новый Массив;
	ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.ВидКлассификатора", Перечисления.ВидыКлассификаторовМинЗдрава.НоменклатураСпециальностей));
	Элементы.СпециализацииФРМРСпециализацияФРМР.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекФамилия	= Объект.Фамилия;
	ТекИмя		= Объект.Имя;
	ТекОтчество	= Объект.Отчество;
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.НеУказан");
		Модифицированность = Ложь;
	КонецЕсли; 
	
	ОбновитьСвойства();
	
	Если Истина // ИспользоватьПодключаемоеОборудование Проверка на включенную ФО "Использовать ВО".
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() // Проверка на определенность рабочего места ВО.
	Тогда
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	РаботаСФормамиКлиент.ОчиститьЛишниеКомандыПобор(ЭтаФорма);
	НастройкаВидимостиОсновногоСпособаЗаполнения();
	ОбновитьДополнительнуюДолжностьФРМР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверка формата СНИЛС
	Если Элементы.СНИЛС.Видимость Тогда
		МедицинскаяДеятельностьКлиент.СНИЛС_КорректенПроверитьНаФорме(Объект.СНИЛС, Отказ, "Объект.СНИЛС");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НаследоватьСпособЗаполненияГрафикаОтПодразделения Тогда
		ТекущийОбъект.ОсновнойСпособЗаполненияГрафика = Справочники.СпособыЗаполненияГрафиковРабот.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СвойстваИЗначенияСервер.ЗаписатьЗначенияСвойствВФорме(Объект.Ссылка, Свойства.СвойстваИЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНастройки();
	НастроитьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования.
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "КонтактнаяИнформацияИзменение" Тогда
		Если Параметр = Объект.Ссылка Тогда
			Элементы.КонтактнаяИнформация.Обновить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборРаботы(Команда)

	РаботаСФормамиКлиент.КнопкаПодборПриНажатии(ЭтаФорма, "Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьУслуги(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Добавление услуг возможно только после записи нового сотрудника.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьУслугиПослеВыбораСотрудника", ЭтотОбъект);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалНастроекДобавить(Команда)
	
	МассивФилиалов = Новый Массив;
	Для Каждого Строка Из ФилиалыДереваНастроек Цикл
		МассивФилиалов.Добавить(Строка.Филиал);
	КонецЦикла;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	Отбор.ПравоеЗначение = МассивФилиалов;
	Отбор.Использование = Истина;
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФилиалНастроекДобавитьЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("Справочник.Филиалы.ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура КИСоздать(Команда)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломДобавления(Элементы.КонтактнаяИнформация, Ложь, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КИИзменить(Команда)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломИзменения(Элементы.КонтактнаяИнформация, ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура КИУдалить(Команда)
	КонтактнаяИнформацияКлиент.УдалитьКИ(Объект, Элементы.КонтактнаяИнформация);
КонецПроцедуры

&НаКлиенте
Процедура КИОсновная(Команда)
	КонтактнаяИнформацияКлиент.ОсновнаяКИ_ПрисвоитьНаФорме(Объект, Элементы.КонтактнаяИнформация, Элементы.КонтактнаяИнформацияКИОсновная);
КонецПроцедуры

&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Штрихкоды.ТекущиеДанные;
	
	РаботаСТорговымОборудованиемКлиент.КнопкаНовыйШрихкодНажатие(ТекущаяСтрока, Объект.Ссылка);
	Элементы.Штрихкоды.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Основная(Команда)
	
	ТекущиеДанные = Элементы.Специализации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Объект.Специализация = ТекущиеДанные.Специализация Тогда
			Объект.Специализация = Неопределено;
		Иначе
			Объект.Специализация = ТекущиеДанные.Специализация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзображениеСоздать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос(НСтр("ru = 'Необходимо записать элемент справочника. Продолжить?'"),РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ИмяФайла = "";
		ПутьФайла = "";
		
		Если ПоместитьФайл(ПутьФайла, , ИмяФайла, Истина) = Истина Тогда
			
			Изображение = ПутьФайла;
			УстановитьКартинку();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзображениеУдалить(Команда)
	Если Не Объект.Ссылка.Пустая() Тогда
		ИзображениеУдалитьНаСервере(Объект.Ссылка);
		Элементы.Изображение.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события ПриИзменении элемента Фамилия.
//
&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	Объект.Фамилия = ВРег(Лев(Объект.Фамилия,1))+ Сред(Объект.Фамилия,2);
	
	ПозицииПробелов = ОпределитьПозицииПробелов(Объект.Наименование);
	Если ПозицииПробелов[0] > 0 Тогда
		ФамилияИзНаименования = Сред(Объект.Наименование, 1, (ПозицииПробелов[0] - 1));
		Если ФамилияИзНаименования <> текФамилия И Не ПустаяСтрока(ФамилияИзНаименования) Тогда
			текФамилия = СокрЛП(Объект.Фамилия);
			Возврат;
		КонецЕсли;
		Наименование = СокрЛП(Объект.Фамилия) + Сред(Объект.Наименование, ПозицииПробелов[0]);
		
	Иначе
		Если ПустаяСтрока(Наименование) Тогда
			Объект.Наименование = СокрЛП(Объект.Фамилия);
		Иначе
			Если СокрЛП(Наименование) = текФамилия Тогда
				Объект.Наименование = СокрЛП(Объект.Фамилия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.Фамилия);
	
	ПриИзмененииФИО();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Имя.
//
&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	Объект.Имя = ВРег(Лев(Объект.Имя,1))+ Сред(Объект.Имя,2);
	ПозицииПробелов = ОпределитьПозицииПробелов(Объект.Наименование);
	Если ПозицииПробелов[0] > 0 И ПозицииПробелов[1] > 0 Тогда
		ИмяИзНаименования = Сред(Объект.Наименование, (ПозицииПробелов[0] + 1), (ПозицииПробелов[1] - ПозицииПробелов[0] - 1));
		Если ИмяИзНаименования <> текИмя И Не ПустаяСтрока(ИмяИзНаименования) Тогда
			текИмя = СокрЛП(Объект.Имя);
			Возврат;
		КонецЕсли;
		Объект.Наименование = Сред(Объект.Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Объект.Имя) + Сред(Объект.Наименование, ПозицииПробелов[1]);
		
	ИначеЕсли ПозицииПробелов[0] > 0 Тогда
		ИмяИзНаименования = Сред(Объект.Наименование, (ПозицииПробелов[0] + 1));
		Если ИмяИзНаименования <> текИмя И Не ПустаяСтрока(ИмяИзНаименования) Тогда
			текИмя = СокрЛП(Объект.Имя);
			Возврат;
		КонецЕсли;
		Объект.Наименование = Сред(Объект.Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Объект.Имя);
		
	Иначе
		Если Не ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.Имя);
		Иначе
			Объект.Наименование = " " + СокрЛП(Объект.Имя);
		КонецЕсли;
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.Имя);
	
	ПриИзмененииФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	Объект.Отчество = ТРег(Объект.Отчество);
	ПриИзмененииФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений;
		
		Если Не ПустаяСтрока(Объект.Фамилия) Тогда
			СписокВыбора.Добавить(СокрЛП(Объект.Фамилия));
		КонецЕсли;
		
		Если Не ПустаяСтрока(Объект.Фамилия) И Не ПустаяСтрока(Объект.Имя) Тогда
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Объект.Имя)));
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Сред(Объект.Имя,1,1)) + "."));
		КонецЕсли;
		
		Если Не ПустаяСтрока(Объект.Фамилия) И Не ПустаяСтрока(Объект.Имя) И Не ПустаяСтрока(Объект.Отчество) Тогда
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Объект.Имя) + " " + СокрЛП(Объект.Отчество)));
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Сред(Объект.Имя,1,1)) + "." + СокрЛП(Сред(Объект.Отчество,1,1)) + "."));
		КонецЕсли;
		
		ДанныеВыбора = СписокВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборПодбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Добавление услуг возможно только после записи нового сотрудника.'"));
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьУслугуСотруднику(ВыбранноеЗначение, Объект.Ссылка);
	Элементы.ОсновныеУслуги.Обновить();
	
	Если глКэшОсновныхУслугСотрудников <> Неопределено Тогда
		глКэшОсновныхУслугСотрудников.Удалить(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалыДереваНастроекПриАктивизацииСтроки(Элемент)
	ЗаполнитьНастройкиДерева(Элементы.ФилиалыДереваНастроек.ТекущиеДанные.Филиал);
	РазвернутьДеревоЗначений(ДеревоНастроек);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	
	// Сохраняем настройку
	СтрокаДерева = Элементы.ДеревоНастроек.ТекущиеДанные;
	Филиал = Элементы.ФилиалыДереваНастроек.ТекущиеДанные.Филиал;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Филиал", Филиал);
	ПараметрыОтбора.Вставить("Настройка", СтрокаДерева.Настройка);
	НайденныеСтроки = НастройкиСотрудника.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Настройки по филиалу не дублируются, поэтому там 1 элемент
		НайденныеСтроки[0].Значение = СтрокаДерева.Значение;
	Иначе
		// Настройка по новому филиалу, нужно сохранить
		СтрокаНастройки = НастройкиСотрудника.Добавить();
		СтрокаНастройки.Филиал = Филиал;
		СтрокаНастройки.Сотрудник = Объект.Ссылка;
		СтрокаНастройки.Настройка = СтрокаДерева.Настройка;
		СтрокаНастройки.Значение = СтрокаДерева.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалыДереваНастроекПередУдалением(Элемент, Отказ)
	
	Филиал = Элементы.ФилиалыДереваНастроек.ТекущиеДанные.Филиал;
	
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Отказ = Истина;
	Иначе
		мОбрИнд = НастройкиСотрудника.Количество()-1;
		Для Сч = 0 По мОбрИнд Цикл
			СтрокаТЗ = НастройкиСотрудника[мОбрИнд-Сч];
			Если СтрокаТЗ.Филиал = Филиал Тогда
				НастройкиСотрудника.Удалить(мОбрИнд-Сч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПоУмолчанию = Истина Тогда
			Элементы.КонтактнаяИнформацияКИОсновная.Пометка = Истина;
		Иначе
			Элементы.КонтактнаяИнформацияКИОсновная.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломДобавления(Элемент, Отказ, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломИзменения(Элементы.КонтактнаяИнформация, ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ОбъектОтбораЗначений", Объект.Ссылка);
	ФормаСвойства =  ПолучитьФорму("ПланВидовХарактеристик.СвойстваОбъектов.ФормаОбъекта", ПараметрыФормы);
	ФормаСвойства.открытьмодально();
	ОбновитьСвойства();
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияСервер.ИнвертироватьПометкуУдаления(Элемент.ТекущиеДанные.Свойство);
	ОбновитьСвойства();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеУслугиПриИзменении(Элемент)
	
	Если глКэшОсновныхУслугСотрудников <> Неопределено Тогда
		глКэшОсновныхУслугСотрудников.Удалить(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненныйСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СпециализацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и Объект.Специализации.Количество() = 1 Тогда
		Объект.Специализация = Элементы.Специализации.ТекущиеДанные.Специализация;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпециализацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СпециализацииПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Специализация = Объект.Специализация Тогда
		мсСтр = Объект.Специализации.НайтиСтроки(Новый Структура("Специализация", Объект.Специализация));
		Если мсСтр.Количество() = 1 Тогда
			Объект.Специализация = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаследоватьОтГруппыПриИзменении(Элемент)
	Элементы.ОсновнойСпособЗаполненияГрафика.Доступность = Не НаследоватьСпособЗаполненияГрафикаОтПодразделения;
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ОбновитьДополнительнуюДолжностьФРМР();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ.

// Функция определяет номера позиций пробелов в строке реквизита Наименование.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  Массив, числа - позиции пробелов в строке.
//
&НаСервере
Функция ОпределитьПозицииПробелов(Наименование)
	
	Пробелы = Новый Массив;
	Для счетчик = 1 По 2 Цикл
		Пробелы.Добавить(0);
	КонецЦикла;
	КолПробелов = 0;
	
	Для счетчик = 1 По СтрДлина(Наименование) Цикл
		Если Сред(Наименование, счетчик, 1) = " " Тогда
			Пробелы[КолПробелов] = счетчик;
			КолПробелов = КолПробелов + 1;
		КонецЕсли;
		Если КолПробелов = 2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Пробелы;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииФИО()
	
	// Определим пол.
	Если Не ЗначениеЗаполнено(Объект.Пол) Или Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.НеУказан") Или Объект.Ссылка.Пустая() Тогда
		Объект.Пол = УниверсальныеМеханизмыСервер.ОпределитьПол(Объект.Имя, Объект.Фамилия, Объект.Отчество);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьУслугуСотруднику(Номенклатура, СотрудникСсылка)
	
	Если Не Номенклатура.ЭтоГруппа Тогда
		Запись = РегистрыСведений.ОсновныеУслугиСотрудников.СоздатьМенеджерЗаписи();
		Запись.Номенклатура = Номенклатура;
		Запись.Сотрудник = СотрудникСсылка;
		Запись.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьУслугиПослеВыбораСотрудника(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		
		СкопироватьУслугиИзУслугСотрудника(ЗначениеВыбора, Объект.Ссылка);
		Элементы.ОсновныеУслуги.Обновить();
		
		Если глКэшОсновныхУслугСотрудников <> Неопределено Тогда
			глКэшОсновныхУслугСотрудников.Удалить(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьУслугиИзУслугСотрудника(ИсточникСсылка, ПриемникСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеУслугиСотрудников.Часы КАК Часы,
		|	ОсновныеУслугиСотрудников.Минуты КАК Минуты,
		|	ОсновныеУслугиСотрудников.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ОсновныеУслугиСотрудников КАК ОсновныеУслугиСотрудников
		|ГДЕ
		|	ОсновныеУслугиСотрудников.Сотрудник = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ИсточникСсылка);
	Результат = Запрос.Выполнить();
	УслугиСотрудника = Результат.Выгрузить();
	
	НЗ = РегистрыСведений.ОсновныеУслугиСотрудников.СоздатьНаборЗаписей();
	НЗ.Отбор.Сотрудник.Установить(ПриемникСсылка);
	НЗ.Прочитать();
	ОсновныеУслугиСотрудника = НЗ.Выгрузить();
	Для Каждого УслугаНабора Из УслугиСотрудника Цикл
		Если ОсновныеУслугиСотрудника.Найти(УслугаНабора.Номенклатура) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяЗапись = НЗ.Добавить();
		НоваяЗапись.Сотрудник = ПриемникСсылка;
		НоваяЗапись.Номенклатура = УслугаНабора.Номенклатура;
		НоваяЗапись.Часы = УслугаНабора.Часы;
		НоваяЗапись.Минуты = УслугаНабора.Минуты;
	КонецЦикла;
	НЗ.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиОсновногоСпособаЗаполнения()
	Если Объект.ОсновнойСпособЗаполненияГрафика.Пустая() Тогда
		НаследоватьСпособЗаполненияГрафикаОтПодразделения = Истина;
		Элементы.ОсновнойСпособЗаполненияГрафика.Доступность = Ложь;
	Иначе
		НаследоватьСпособЗаполненияГрафикаОтПодразделения = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьДанныеСотрудника()
	
	ПолучитьНастройкиСотрудника();
	ЗаполнитьДерево();
	
КонецПроцедуры

// Процедура заполняет набор записей регистра сведений значениями настроек.
&НаСервере
Процедура ЗаполнитьДерево()
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	
	Дерево = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Настройки.Родитель,
	|	Настройки.Ссылка,
	|	Настройки.Наименование,
	|	Настройки.ЭтоГруппа,
	|	ЗначениеНастроек.Значение
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиСотрудников КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСотрудников КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Сотрудник = &Сотрудник)
	|			И (ЗначениеНастроек.Филиал = &Филиал)
	|ГДЕ
	|	(НЕ Настройки.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Настройки.ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Запрос.УстановитьПараметр("Филиал", Справочники.Филиалы.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Родитель.Пустая() Тогда
			СтрокаГруппы = Дерево.Строки.Найти(Выборка.Родитель, "Настройка", Истина);
			Если СтрокаГруппы=Неопределено Тогда
				СтрокаГруппы = Дерево.Строки.Добавить();
				СтрокаГруппы.Настройка = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;
		Иначе
			СтрокаГруппы = Дерево;
		КонецЕсли;
		
		СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
		СтрокаНастройки.Настройка = Выборка.Ссылка;
		
		Если Параметры.Ключ.Пустая() Или Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение();
		Иначе
			СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		КонецЕсли;
		
		СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиДерева(Филиал = Неопределено)
	
	Если Филиал = Неопределено Тогда
		Филиал = ПредопределенноеЗначение("Справочник.Филиалы.ПустаяСсылка");
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Филиал", Филиал);
	МассивСтрокНастроек = НастройкиСотрудника.НайтиСтроки(Отбор);
	
	Дерево = ДеревоНастроек.ПолучитьЭлементы();
	
	Для Каждого СтрокаНастройки Из Дерево Цикл
		
		Если СтрокаНастройки.ЭтоГруппа Тогда
			
			СтрокаГруппы = СтрокаНастройки.ПолучитьЭлементы();
			Для Каждого СтрокаДерева Из СтрокаГруппы Цикл
				
				СтрокаДерева.Значение = Неопределено;
				Для Каждого Строка Из МассивСтрокНастроек Цикл
					Если СтрокаДерева.Настройка = Строка.Настройка Тогда
						СтрокаДерева.Значение = Строка.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаНастройки.Значение = Неопределено;
			Для Каждого Строка Из МассивСтрокНастроек Цикл
				Если СтрокаНастройки.Настройка = Строка.Настройка Тогда
					СтрокаНастройки.Значение = Строка.Значение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоЗначений(ДеревоЗначений)
	КоллекцияЭлементовДерева = ДеревоНастроек.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНастроек.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФилиалНастроекДобавитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДобавляемыйФилиал = Результат;
	
	Если ЗначениеЗаполнено(ДобавляемыйФилиал) Тогда
		
		СтрокаФилиала = ФилиалыДереваНастроек.Добавить();
		СтрокаФилиала.Филиал = ДобавляемыйФилиал;
		
		ЗаполнитьНастройкиДерева(ДобавляемыйФилиал);
		
		РазвернутьДеревоЗначений(ДеревоНастроек);
		
		Элементы.ФилиалыДереваНастроек.ТекущаяСтрока = СтрокаФилиала.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиСотрудника()
	
	Настройки = РеквизитФормыВЗначение("НастройкиСотрудника");
	Настройки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст=
		"ВЫБРАТЬ
		|	Настройки.Ссылка КАК Настройка,
		|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
		|	ЗначениеНастроек.Значение КАК Значение,
		|	ЕСТЬNULL(ЗначениеНастроек.Филиал, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал,
		|	&Сотрудник КАК Сотрудник
		|ИЗ
		|	ПланВидовХарактеристик.НастройкиСотрудников КАК Настройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСотрудников КАК ЗначениеНастроек
		|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
		|			И (ЗначениеНастроек.Сотрудник = &Сотрудник)
		|ГДЕ
		|	НЕ Настройки.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Настройки.ЭтоГруппа ИЕРАРХИЯ,
		|	Настройки.Наименование";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	
	ТекущиеНастройки = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТекущиеНастройки Цикл
		СтрокаНастроек = Настройки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНастроек, Строка);
	КонецЦикла; 
	ЗначениеВРеквизитФормы(Настройки, "НастройкиСотрудника");
	
	ФилиалыНастроек = РеквизитФормыВЗначение("ФилиалыДереваНастроек");
	ФилиалыНастроек.Очистить();
	ТекущиеФилиалыНастроек = ТекущиеНастройки.Скопировать(,"Филиал");
	ТекущиеФилиалыНастроек.Свернуть("Филиал");
	// Проверяем на параметр по умолчанию
	Если Не ЗначениеЗаполнено(ТекущиеФилиалыНастроек.Найти(Справочники.Филиалы.ПустаяСсылка())) Тогда
		Строка = ТекущиеФилиалыНастроек.Добавить();
		Строка.Филиал = Справочники.Филиалы.ПустаяСсылка();
	КонецЕсли;
	Для Каждого Строка Из ТекущиеФилиалыНастроек Цикл
		СтрокаФилиала = ФилиалыНастроек.Добавить();
		СтрокаФилиала.Филиал = Строка.Филиал;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ФилиалыНастроек, "ФилиалыДереваНастроек");
	
КонецПроцедуры

// Процедура выполняет запись значений настроек в регистр сведений.
&НаСервере
Процедура ОбновитьНастройки()
	
	Набор = РегистрыСведений.НастройкиСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.Сотрудник.Использование = Истина;
	Набор.Отбор.Сотрудник.Значение = Объект.Ссылка;
	Дерево = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	ЗаполнитьНаборЗаписей(Дерево.Строки, Набор);
	Набор.Записать();
	
КонецПроцедуры

// Процедура заполняет набор записей регистра сведений значениями настроек.
&НаСервере
Процедура ЗаполнитьНаборЗаписей(СтрокиДерева, НаборЗаписей)
	
	Для Каждого Строка Из НастройкиСотрудника Цикл
		
		Если Строка.Настройка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Филиал = Строка.Филиал;
		Запись.Сотрудник = Объект.Ссылка;
		Запись.Настройка = Строка.Настройка;
		Запись.Значение = Строка.Настройка.ТипЗначения.ПривестиЗначение(Строка.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТабличныеЧасти(ПриСозданииФормы = Ложь)
	
	Если ПриСозданииФормы Тогда
		Элементы.ГруппаШтрихкоды.Видимость = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьШтрихкодированиеСотрудников");
	КонецЕсли;
	
	КонтактнаяИнформация.Параметры.УстановитьЗначениеПараметра("Объект"			,Объект.Ссылка);
	КонтактнаяИнформация.Параметры.УстановитьЗначениеПараметра("ИмяМетаданных",	"Сотрудники");
	
	РаботаСФормамиСервер.УстановитьОтборСписка("Владелец", Объект.Ссылка, Штрихкоды);
	РаботаСФормамиСервер.УстановитьОтборСписка("Объект", Объект.Ссылка, КонтактнаяИнформация);
	РаботаСФормамиСервер.УстановитьОтборСписка("Объект", Объект.Ссылка, ТабличноеПолеДатыОбъекта);
	РаботаСФормамиСервер.УстановитьОтборСписка("Сотрудник", Объект.Ссылка, ОсновныеУслуги);
	РаботаСФормамиСервер.УстановитьОтборСписка("Сотрудник", Объект.Ссылка, ДолжностиФРМР);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПодбораПриСоздании()
	РаботаСФормамиСервер.НастройкаПодбораПриСоздании(ЭтаФорма, Ложь, "Работы", "Услуга");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзображениеУдалитьНаСервере(Ссылка)
	НаборЗаписей = РегистрыСведений.ФотографииСотрудников.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Сотрудник.Установить(Ссылка); 
	НаборЗаписей.Записать();
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинку()
	
	ФайлНаДиске = Новый Файл(Изображение);
	
	МенеджерЗаписи 					= РегистрыСведений.ФотографииСотрудников.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сотрудник		= Объект.Ссылка;
	МенеджерЗаписи.Хранилище		= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Изображение));
	
	Изображение = ПоместитьВоВременноеХранилище(МенеджерЗаписи.Хранилище.Получить());
	// Записываем новый элемент справочника Файлы.
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКартинку(Ссылка)
	
	КлючЗаписиРег = РегистрыСведений.ФотографииСотрудников.СоздатьКлючЗаписи(Новый Структура("Сотрудник", Ссылка));
	
	Если Не КлючЗаписиРег.Пустой() Тогда
		
		Возврат ПолучитьНавигационнуюСсылку(КлючЗаписиРег, "Хранилище");
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДополнительнуюДолжностьФРМР()
	
	ОсновнаяДолжностьФРМР = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Должность, "ДолжностьМинздрава");
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ОсновнаяДолжностьФРМР", ЗначениеЗаполнено(ОсновнаяДолжностьФРМР));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ ПОЛЬЗОВАТЕЛЯ.

// Процедура обновляет информацию в таблице свойств объекта.
//
&НаСервере
Процедура ОбновитьСвойства()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Свойства.ОбъектОтбораЗначений	= Объект.Ссылка;
	Свойства.ОбъектОтбораНазначений	= Объект.Ссылка;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Свойства");
	ОбъектОбработки.ПрочитатьЗаполнитьСвойстваИЗначения();
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Свойства");
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API).

&НаКлиенте
Функция СШКСотрудник(Сотрудник, СШК) Экспорт
	
	ПоказатьЗначение(,Сотрудник);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	РаботаСТорговымОборудованиемКлиент.ДобавитьШрихкодВФормеОбъекта (ЭтаФорма, Элементы.ПанельФормы, Объект, Штрихкод, ТипКода);
	Элементы.Штрихкоды.Обновить();
	Возврат Истина
КонецФункции // СШКНеизвестныйКод().

#КонецОбласти