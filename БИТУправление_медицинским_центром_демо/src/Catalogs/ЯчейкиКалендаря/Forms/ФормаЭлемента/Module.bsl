#Область РазделОписанияПеременных

&НаКлиенте
Перем ПредыдущаяСтрокаПравил;

&НаКлиенте
Перем ТекущаяСтрокаПравил;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Отборы.Очистить();
		Если Объект.ТипПризнака = 2 Тогда
			Объект.РассчитыватьОнлайн = Истина;
		КонецЕсли;
	Иначе
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		Для Каждого СтрокаПравила Из СправочникОбъект.Отборы Цикл
			Отбор = СтрокаПравила.Отбор.Получить();
			СтрокаОтбора = ХранилищеОтборов.Добавить();
			СтрокаОтбора.Отбор = Отбор;
			СтрокаОтбора.СтрокаПравила = Объект.Отборы[СтрокаПравила.НомерСтроки-1].ПолучитьИдентификатор();
			
			Если Объект.ТипПризнака = 2 Тогда
				Если ТипЗнч(СтрокаПравила.Результат.Получить()) = Тип("ДвоичныеДанные") Тогда
					СтрокаОтбора.РезультатНаФорме = ПоместитьВоВременноеХранилище(СтрокаПравила.Результат.Получить(), УникальныйИдентификатор);
					СтрокаОтбора.Картинка = СтрокаОтбора.РезультатНаФорме;
					СтрокаОтбора.ИмяФайла = СтрокаПравила.ИмяФайла;
				Иначе
					СтрокаОтбора.РезультатНаФорме = ПоместитьВоВременноеХранилище(СтрокаПравила.Результат.Получить(), УникальныйИдентификатор);
				КонецЕсли;
			Иначе
				СтрокаОтбора.РезультатНаФорме = СтрокаПравила.Результат.Получить();
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаОтбора Из ХранилищеОтборов Цикл
			СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(СтрокаОтбора.СтрокаПравила);
			Если СтрокаПравила <> Неопределено Тогда
				Если Объект.ТипПризнака <> 2
					Или ТипЗнч(ПолучитьИзВременногоХранилища(СтрокаОтбора.РезультатНаФорме)) = Тип("ДвоичныеДанные")
				Тогда
					СтрокаПравила.РезультатНаФорме = СтрокаОтбора.РезультатНаФорме;
					СтрокаПравила.Картинка = СтрокаПравила.РезультатНаФорме;
				Иначе
					СтрокаПравила.РезультатНаФорме = "";
					СтрокаПравила.Картинка = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.ТипПризнака = 0 Тогда
			ТекстПоУмолчанию = Строка(СправочникОбъект.ЗначениеПоУмолчанию.Получить());
		ИначеЕсли Объект.ТипПризнака = 1 Тогда
			ФонПоУмолчанию = СправочникОбъект.ЗначениеПоУмолчанию.Получить();
		Иначе
			КартинкаПоУмолчанию = ПоместитьВоВременноеХранилище(СправочникОбъект.ЗначениеПоУмолчанию.Получить(), УникальныйИдентификатор);
		КонецЕсли;
		
		Команда = ЭтаФорма.Команды.Добавить("ПоказатьКартинку");
		Команда.Заголовок = "Показать картинку";
		Команда.Действие = "ПоказатьКартинкуНажатие";
		НовЭлемент = Элементы.Добавить("Показать", Тип("КнопкаФормы"), Элементы.ОтборыКонтекстноеМеню);
		НовЭлемент.ИмяКоманды = "ПоказатьКартинку";
	КонецЕсли;
	
	ИнициализироватьСхемуСКДПоВидуПризнака();
	
	// Страницы расчета алгоритмом на языке 1С
	Элементы.ГруппаОбработчики.ТекущаяСтраница = Элементы.ГруппаАлгоритмРасчета;
	Элементы.ГруппаОбработчики.ОтображениеСтраниц = ?(Объект.РассчитыватьОнлайн, ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально, ОтображениеСтраницФормы.Нет);
	Элементы.ГруппаПередФормированием.Видимость = Объект.РассчитыватьОнлайн;
	Элементы.ДекорацияКонтекстПараметры.Видимость = Объект.РассчитыватьОнлайн;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьВидимостьЭлементов();
	
	ОбновитьДоступностьЭлементовПоВладельцуПризнака();
	
	ОбновитьВозможностьРедактирования();
	
	ОбновитьЭлементыОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ФорматУсловия = 2 Тогда
		ПроверяемыеРеквизиты.Добавить("Объект.ДополнительноеСвойство");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаОтбора Из ХранилищеОтборов Цикл
		
		СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(СтрокаОтбора.СтрокаПравила);
		Если СтрокаПравила <> Неопределено Тогда
			ТекущийОбъект.Отборы[СтрокаПравила.НомерСтроки-1].Отбор = Новый ХранилищеЗначения(СтрокаОтбора.Отбор);
			
			Если Не Объект.ТипПризнака = 2 Тогда
				ТекущийОбъект.Отборы[СтрокаПравила.НомерСтроки-1].Результат = Новый ХранилищеЗначения(СтрокаОтбора.РезультатНаФорме);
			Иначе
				Если Не СтрокаОтбора.РезультатНаФорме = "" Тогда
					ТекущийОбъект.Отборы[СтрокаПравила.НомерСтроки-1].Результат = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаОтбора.РезультатНаФорме));
					ТекущийОбъект.Отборы[СтрокаПравила.НомерСтроки-1].ИмяФайла = СтрокаОтбора.ИмяФайла;
				Иначе
					ТекущийОбъект.Отборы[СтрокаПравила.НомерСтроки-1].Результат = Новый ХранилищеЗначения(СтрокаОтбора.РезультатНаФорме);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если Объект.ТипПризнака = 1 Тогда
		ТекущийОбъект.ЗначениеПоУмолчанию = Новый ХранилищеЗначения(ФонПоУмолчанию);
	ИначеЕсли Объект.ТипПризнака = 2 Тогда
		Если КартинкаПоУмолчанию = "" Тогда
			ТекущийОбъект.ЗначениеПоУмолчанию = Неопределено;
		Иначе
			ТекущийОбъект.ЗначениеПоУмолчанию = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(КартинкаПоУмолчанию));
		КонецЕсли;
	Иначе
		ТекущийОбъект.ЗначениеПоУмолчанию = Новый ХранилищеЗначения(ТекстПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаОтбора Из ХранилищеОтборов Цикл
		СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(СтрокаОтбора.СтрокаПравила);
		Если СтрокаПравила <> Неопределено Тогда
			СтрокаПравила.РезультатНаФорме = СтрокаОтбора.РезультатНаФорме;
			СтрокаПравила.Картинка = СтрокаПравила.РезультатНаФорме;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ФорматУсловия <> 2
		И Не Объект.РассчитыватьОнлайн
	Тогда
		ВыбранныйВариант = ОткрытьФормуМодально("Справочник.ЯчейкиКалендаря.Форма.ФормаВыбораВариантаОбновления");
		Если ЗначениеЗаполнено(ВыбранныйВариант) Тогда
			Состояние("Запуск пересчета...");
		КонецЕсли;
		РаботаСПризнакамиСервер.ОбновлениеРПКОПослеЗаписиПризнака(ВыбранныйВариант, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Протестировать(Команда)
	
	РезультатВычисления = "";
	
	Если Объект.ВидПризнака = 0 Тогда
		ОбъектКалендаря = ОткрытьФормуМодально("Справочник.Клиенты.ФормаВыбора", Новый Структура("РежимВыбора", Истина));	
	Иначе
		ОбъектКалендаря = ОткрытьФормуМодально("Документ.Заявка.ФормаВыбора", Новый Структура("РежимВыбора", Истина));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКалендаря) Тогда
		Если Объект.ФорматУсловия = 0 Тогда
			СообщениеОбОшибке = "";
			ОбъектКопия = Объект;
			РезультатВычисления = ТестПроизвольногоАлгоритма(ОбъектКалендаря, СообщениеОбОшибке, ОбъектКопия);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ПоказатьПредупреждение(, СообщениеОбОшибке);
				Если РезультатВычисления = Неопределено Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Объект.ФорматУсловия = 1 Тогда
			РассчитатьОтборыСКДНаСервере(Объект, ОбъектКалендаря, РезультатВычисления);
		КонецЕсли;
		
		ПоказатьЗначение(, РезультатВычисления);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинку(Команда)
	
	ДиалогОткрытияФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКартинкуНажатие(Команда)
	
	КартинкаСтроки = Объект.Отборы.НайтиПоИдентификатору(ТекущаяСтрокаПравил).РезультатНаФорме;
	Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(КартинкаСтроки), Ложь);
	ПоказатьЗначение(,Картинка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКартинкуПоУмолчанию(Команда)
	
	ОчиститьКартинкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКартинку(Команда)
	
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		СтрокаОтбора.РезультатНаФорме = "";
		ПолучитьСтрокуОтбораТекущегоПравила().ИмяФайла = "";
		Строка = Элементы.Отборы.ТекущиеДанные;
		Если Строка <> Неопределено Тогда
			Строка.РезультатНаФорме = "";
			Строка.Картинка = "";
			Строка.ИмяФайла = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	ОбновитьЭлементыОтборов();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПриИзменении(Элемент)
	ОтборКомпоновкиПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередУдалением(Элемент, Отказ)
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		ХранилищеОтборов.Удалить(СтрокаОтбора);
	КонецЕсли;
	КомпоновщикОтбораПрименения.Настройки.Отбор.Элементы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока Тогда
		
		НоваяСтрокаОтбора = ХранилищеОтборов.Добавить();
		НоваяСтрокаОтбора.СтрокаПравила = Элемент.ТекущаяСтрока;
		
		Если Копирование 
			И ПредыдущаяСтрокаПравил <> Неопределено
			Тогда
			СтрокаОтбораПредыдущей = ПолучитьСтрокуОтбораТекущегоПравила(ПредыдущаяСтрокаПравил);
			Если СтрокаОтбораПредыдущей <> Неопределено Тогда
				
				НоваяСтрокаОтбора.Отбор = СтрокаОтбораПредыдущей.Отбор;
				КомпоновщикОтбораПрименения.ЗагрузитьНастройки(НоваяСтрокаОтбора.Отбор);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Отборы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПредыдущаяСтрокаПравил = ТекущаяСтрокаПравил;
		ТекущаяСтрокаПравил = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЭлементыОтбораКомпоновщика = КомпоновщикОтбораПрименения.Настройки.Отбор.Элементы;
		ЭлементыОтбораКомпоновщика.Очистить();
		
		СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
		Если СтрокаОтбора <> Неопределено
			И СтрокаОтбора.Отбор  <> Неопределено
		Тогда
			КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СтрокаОтбора.Отбор);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыРезультатНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ТипПризнака = 2 Тогда // Картинка.
		ДиалогОткрытияФайла(ПолучитьСтрокуОтбораТекущегоПравила());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыРезультатНаФормеПриИзменении(Элемент)
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(ТекущаяСтрокаПравил);
		Если СтрокаПравила <> Неопределено Тогда
			СтрокаОтбора.РезультатНаФорме = СтрокаПравила.РезультатНаФорме;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборДоступныеПоляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФорматУсловияПриИзменении(Элемент)
	
	Если Объект.ФорматУсловия = 2 Тогда
		Если Объект.ТипПризнака = 1 Или Объект.ТипПризнака = 2 Тогда // Фон или картинка.
			Объект.ФорматУсловия = 1;
			ПоказатьПредупреждение(,НСтр("ru='Для назначения признака ""Фон"" и ""Картинка"" не допускается использование дополнительный свойств как источник.'"), 30);
		ИначеЕсли Объект.РассчитыватьОнлайн Тогда
			Объект.РассчитыватьОнлайн = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПризнакаПриИзменении(Элемент)
	
	ОбновитьОтборПоВидуПризнака();
	ОбновитьДоступностьЭлементовПоВладельцуПризнака();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПризнакаПриИзменении(Элемент)
	
	Если Объект.ФорматУсловия = 2
		И (Объект.ТипПризнака = 1 // Фон.
			Или Объект.ТипПризнака = 2) // Картинка.
	Тогда
		Объект.ТипПризнака = 0;
		ПоказатьПредупреждение(,НСтр("ru='Для назначений признака ""Фон"" и ""Картинка"" не допускается использование Дополнительного свойства в качестве источника.'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПризнака = 2 Тогда
		Объект.РассчитыватьОнлайн = Истина;
	КонецЕсли;
	
	ОбновитьОтборПоВидуПризнака();
	ОбработатьВидимостьЭлементов();
	ОбновитьДоступностьЭлементовПоВладельцуПризнака();
	ОбновитьВозможностьРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьОнлайнПриИзменении(Элемент)
	
	Если Объект.Отборы.Количество() = 0 Тогда
		ИнициализироватьСхемуСКДПоВидуПризнака();
	Иначе
		Оповещение = Новый ОписаниеОповещения("РассчитыватьОнлайнПриИзмененииПослеВопросаОчистки", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru='При изменении места расчета отборы элементов будут очищены. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
	Элементы.ГруппаОбработчики.ОтображениеСтраниц = ?(Объект.РассчитыватьОнлайн, ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально, ОтображениеСтраницФормы.Нет);
	Элементы.ГруппаПередФормированием.Видимость = Объект.РассчитыватьОнлайн;
	Элементы.ДекорацияКонтекстПараметры.Видимость = Объект.РассчитыватьОнлайн;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтборКомпоновкиПриИзменении()
	
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		Настройки = Новый КомпоновщикНастроекКомпоновкиДанных;
		Настройки.ЗагрузитьНастройки(КомпоновщикОтбораПрименения.Настройки);
		СтрокаОтбора.Отбор = Настройки.Настройки;
		
		СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(ТекущаяСтрокаПравил);
		Если СтрокаПравила <> Неопределено Тогда
			Если Объект.ВидПризнака = 1 
				И Объект.РассчитыватьОнлайн
			Тогда
				СтрокаПравила.ПредставлениеОтбора = КомпоновщикОтбораПрименения.Настройки.Отбор
			Иначе	 
				СтрокаПравила.ПредставлениеОтбора = Строка(СтрокаОтбора.Отбор.Отбор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуОтбораТекущегоПравила(Знач ИдентификаторСтрокиПравила = Неопределено)
	
	Если ИдентификаторСтрокиПравила = Неопределено Тогда
		ИдентификаторСтрокиПравила = ТекущаяСтрокаПравил;
	КонецЕсли;
	
	СтрокиОтбора = ХранилищеОтборов.НайтиСтроки(Новый Структура("СтрокаПравила", ИдентификаторСтрокиПравила));
	Если СтрокиОтбора.Количество() <> 0 Тогда
		Возврат СтрокиОтбора[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьТипЗначенияДляКолонкиРезультатов()
	МассивТипов = Новый Массив;
	
	Если Объект.ТипПризнака = 0 Тогда // Текст.
		МассивТипов.Добавить(Тип("Строка"));
		ПараметрыСтроки = Новый КвалификаторыСтроки(20);
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
	ИначеЕсли Объект.ТипПризнака = 1 Тогда // Цвет.
		МассивТипов.Добавить(Тип("Цвет"));
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли Объект.ТипПризнака = 2 Тогда // Картинка.
		МассивТипов.Добавить(Тип("Картинка"));
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	Элементы.ОтборыРезультатНаФорме.ОграничениеТипа = ДопустимыеТипы;
	Элементы.ОтборыРезультатНаФорме.ВыбиратьТип		= Ложь;
КонецПроцедуры

Процедура РассчитатьОтборыСКДНаСервере(Знач Объект, КлючевойОбъект, РезультатВычисления)
	Об = РеквизитФормыВЗначение("Объект");
	РаботаСПризнакамиСервер.РассчитатьПризнакПоОтборамСКД(Об.Отборы, Об.ЗначениеПоУмолчанию, КлючевойОбъект, РезультатВычисления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВидимостьЭлементов()
	
	Если Объект.ТипПризнака = 0 Тогда
		Элементы.ДекорацияТекст.Видимость			= Истина;
		Элементы.ДекорацияФон.Видимость		 		= Ложь;
		Элементы.ДекорацияКартинка.Видимость 		= Ложь;
		Элементы.ТекстПоУмолчанию.Видимость	 		= Истина;
		Элементы.ФонПоУмолчанию.Видимость			= Ложь;
		Элементы.КартинкаПоУмолчанию.Видимость		= Ложь;
		Элементы.ВыбратьКартинку.Видимость			= Ложь;
		Элементы.ОтборыКартинка.Видимость			= Ложь;
		Элементы.ОтборыОчиститьКартинку.Видимость	= Ложь;
	ИначеЕсли Объект.ТипПризнака = 1 Тогда
		Элементы.ДекорацияТекст.Видимость			= Ложь;
		Элементы.ДекорацияФон.Видимость				= Истина;
		Элементы.ДекорацияКартинка.Видимость		= Ложь;
		Элементы.ТекстПоУмолчанию.Видимость			= Ложь;
		Элементы.ФонПоУмолчанию.Видимость			= Истина;
		Элементы.КартинкаПоУмолчанию.Видимость		= Ложь;
		Элементы.ВыбратьКартинку.Видимость			= Ложь;
		Элементы.ОтборыКартинка.Видимость			= Ложь;
		Элементы.ОтборыОчиститьКартинку.Видимость	= Ложь;
	ИначеЕсли Объект.ТипПризнака = 2 Тогда
		Элементы.ДекорацияТекст.Видимость			= Ложь;
		Элементы.ДекорацияФон.Видимость				= Ложь;
		Элементы.ДекорацияКартинка.Видимость		= Истина;
		Элементы.ТекстПоУмолчанию.Видимость			= Ложь;
		Элементы.ФонПоУмолчанию.Видимость			= Ложь;
		Элементы.КартинкаПоУмолчанию.Видимость		= Истина;
		Элементы.ВыбратьКартинку.Видимость			= Истина;
		Элементы.ОтборыКартинка.Видимость			= Истина;
		Элементы.ОтборыОчиститьКартинку.Видимость	= Истина;
	КонецЕсли;
	
	Если Объект.ФорматУсловия = 0 Тогда
		Элементы.СтраницыИсточниковЗначений.ТекущаяСтраница = Элементы.ГруппаКод1С;
	ИначеЕсли Объект.ФорматУсловия = 2 Тогда
		Элементы.СтраницыИсточниковЗначений.ТекущаяСтраница = Элементы.ГруппаДополнительноеСвойство;
	Иначе
		Элементы.СтраницыИсточниковЗначений.ТекущаяСтраница = Элементы.ГруппаСКД;
	КонецЕсли;
	
	ЗадатьТипЗначенияДляКолонкиРезультатов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборПоВидуПризнака()
	
	ИнициализироватьСхемуСКДПоВидуПризнака();
	Объект.Отборы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуСКДПоВидуПризнака()
	
	Если Объект.ВидПризнака = 0 Тогда
		Если Объект.РассчитыватьОнлайн Тогда
			СхемаКомпоновкиДанных = Справочники.ЯчейкиКалендаря.ПолучитьМакет("МакетОтбораКлиентыОнлайнВычисление");
			Если УправлениеНастройками.ПолучитьУчетнуюПолитику().МаксимальнаяСуммаДолгаКлиента = Неопределено Тогда
				СхемаКомпоновкиДанных.НаборыДанных.Данные.Поля.Найти("ДоДостиженияЛимитаПоДолгуОсталось").ОграничениеИспользования.Условие = Истина;
			КонецЕсли;
		Иначе
			СхемаКомпоновкиДанных = Справочники.ЯчейкиКалендаря.ПолучитьМакет("МакетОтбораКлиенты");
		КонецЕсли;
	ИначеЕсли Объект.ВидПризнака = 1 Тогда
		Если Объект.РассчитыватьОнлайн Тогда
			СхемаКомпоновкиДанных = Справочники.ЯчейкиКалендаря.ПолучитьМакет("МакетОтбораЗаявкиОнлайнВычисление");
			СхемаКомпоновкиДанных = РаботаСПризнакамиСервер.ДобавитьПоляДопСвойств(СхемаКомпоновкиДанных, ПолучитьДопСвойства(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_Заявка));	
		Иначе
			СхемаКомпоновкиДанных = Справочники.ЯчейкиКалендаря.ПолучитьМакет("МакетОтбораЗаявки");
		КонецЕсли;
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикОтбораПрименения.Инициализировать(ИсточникНастроек);
	КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикОтбораПрименения.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДопСвойства(НазначениеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Наименование КАК Наименование,
	|	СвойстваОбъектов.ТипЗначения КАК ТипЗначения,
	|	СвойстваОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

&НаКлиенте
Процедура РассчитыватьОнлайнПриИзмененииПослеВопросаОчистки(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ИнициализироватьСхемуСКДПоВидуПризнака();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовПоВладельцуПризнака()

	Элементы.РассчитыватьОнлайн.Доступность = (Не Объект.ТипПризнака = 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВозможностьРедактирования()
	
	Если Объект.ТипПризнака = 2 Тогда
		Элементы.ОтборыРезультатНаФорме.РедактированиеТекста = Ложь;
	Иначе
		Элементы.ОтборыРезультатНаФорме.РедактированиеТекста = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Если ТекущийЭлемент.Имя = "Отборы" Тогда	
			ДополнительныеПараметры.РезультатНаФорме = "";
			ДополнительныеПараметры.ИмяФайла = "";
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	ДобавляемыйФайл = Новый Файл(Результат[0].ПолноеИмя);
	МаксимальныйРазмерФайла = 1024 * 24;
	Если ДобавляемыйФайл.Размер() < МаксимальныйРазмерФайла Тогда
		Если ТекущийЭлемент.Имя = "Отборы" Тогда
			Строка = Элементы.Отборы.ТекущиеДанные;
			Строка.РезультатНаФорме = Результат[0].Хранение;
			Строка.Картинка = Строка.РезультатНаФорме;
			Строка.ИмяФайла = ДобавляемыйФайл.Имя;
			ДополнительныеПараметры.РезультатНаФорме = Элементы.Отборы.ТекущиеДанные.РезультатНаФорме;
			ДополнительныеПараметры.ИмяФайла = Элементы.Отборы.ТекущиеДанные.ИмяФайла;
		Иначе
			КартинкаПоУмолчанию = Результат[0].Хранение;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Размер файла не должен превышать 24 Кб.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогОткрытияФайла(СтрокаХранилищаОтборов = неопределено)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите картинку";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Фильтр = РаботаСФормамиКлиент.ПолучитьФильтрИзображений();
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект, СтрокаХранилищаОтборов);
	НачатьПомещениеФайлов(Оповещение, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКартинкуНаСервере()
	
	КартинкаПоУмолчанию = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыОтборов()
	Элементы.ГруппаОтборы.Доступность = (Объект.Отборы.Количество() > 0);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТестПроизвольногоАлгоритма(ОбъектКалендаря, СообщениеОбошибке, Знач Объект)
	
	Результат = Неопределено;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("Объект", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.НовыйМассив(ТипЗнч(ОбъектКалендаря))));
	ТаблицаРезультат.Колонки.Добавить("ЯчейкаКалендаря", Новый ОписаниеТипов("СправочникСсылка.ЯчейкиКалендаря"));
	ТаблицаРезультат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеХранилище", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	ОбъектыКалендаря = ОбщегоНазначенияКлиентСервер.НовыйМассив(ОбъектКалендаря);
	
	НачатьТранзакцию(); // Начинаем запись элемента справочника.
	
	СправочникОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ЯчейкиКалендаря")); //РеквизитФормыВЗначение("Объект");
	
	Если Не Объект.РассчитыватьОнлайн Тогда
		СправочникОбъект.ПередФормированием = "";
	КонецЕсли;
	
	СправочникОбъект.Записать();
	
	Отчеты.КалендарьПланирования.РассчитатьЯчейкуПроизвольногоАлгоритма(ТаблицаРезультат, СправочникОбъект.Ссылка, ОбъектыКалендаря, СообщениеОбошибке);
	
	ОтменитьТранзакцию(); // Отменяем запись элемента справочника.
	
	Если ТаблицаРезультат.Количество() <> 0 Тогда
		
		СтрокаРезультат = ТаблицаРезультат[0];
		
		Если Объект.ТипПризнака <> 0 Тогда
			Попытка
				Результат = СтрокаРезультат.ЗначениеХранилище.Получить();
			Исключение
			КонецПопытки;
		Иначе
			Результат = СтрокаРезультат.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
