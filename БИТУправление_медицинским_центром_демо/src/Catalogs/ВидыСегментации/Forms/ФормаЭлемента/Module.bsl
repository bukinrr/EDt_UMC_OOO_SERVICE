#Область ОбработчикиСобытийФормы

&НаКлиенте
Перем ПредыдущаяСтрокаПравил;

&НаКлиенте
Перем ТекущаяСтрокаПравил;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РегистраторыСегмента.Загрузить(ПолучитьРегистраторыИзмененияСегментации(Объект.Ссылка));
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаПравила Из СправочникОбъект.ПравилаСегментации Цикл
		Отбор = СтрокаПравила.Отбор.Получить();
		СтрокаОтбора = ХранилищеОтборов.Добавить();
		СтрокаОтбора.Отбор = Отбор;
		СтрокаОтбора.СтрокаПравила = Объект.ПравилаСегментации[СтрокаПравила.НомерСтроки-1].ПолучитьИдентификатор();
	КонецЦикла;
	
	СхемаКомпоновкиДанных = Справочники.ВидыСегментации.ПолучитьМакет("МакетОтбора");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
    ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикОтбораПрименения.Инициализировать(ИсточникНастроек);
	КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикОтбораПрименения.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Элементы.КомпоновщикОтбораПримененияНастройкиОтбор.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаОтбора Из ХранилищеОтборов Цикл
		
		СтрокаПравила = Объект.ПравилаСегментации.НайтиПоИдентификатору(СтрокаОтбора.СтрокаПравила);
		Если СтрокаПравила <> Неопределено Тогда
			ТекущийОбъект.ПравилаСегментации[СтрокаПравила.НомерСтроки-1].Отбор = Новый ХранилищеЗначения(СтрокаОтбора.Отбор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьРегистраторыИзмененийСегментации(Объект.Ссылка, РегистраторыСегмента);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьЭлементыОтборов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Экспортировать(Команда)
	УИД = ЭтаФорма.УникальныйИдентификатор;
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогФыбораФайла.Фильтр = "(*.xml)|*.xml"; 
	
	ДиалогФыбораФайла.Заголовок = "Выберите файл";
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		АдресХранилища = ЭкспортироватьСервер(Объект.Ссылка, УИД);
		ДанныеДляВыгрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
		ДанныеДляВыгрузки.Записать(ДиалогФыбораФайла.ПолноеИмяФайла); 
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭкспортироватьСервер(Шаблон, УИД)
	ДвоичныеДанные = Справочники.ВидыСегментации.Экспортировать(Шаблон);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные,УИД);
	Возврат Адрес;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПравилаСегментацииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаСегментации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Элементы.КомпоновщикОтбораПримененияНастройкиОтбор.Доступность = Истина;

		ПредыдущаяСтрокаПравил = ТекущаяСтрокаПравил;
		ТекущаяСтрокаПравил = ТекущиеДанные.ПолучитьИдентификатор();

		ЭлементыОтбораКомпоновщика = КомпоновщикОтбораПрименения.Настройки.Отбор.Элементы;
		ЭлементыОтбораКомпоновщика.Очистить();
		
		СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
		Если СтрокаОтбора <> Неопределено
			И ТипЗнч(СтрокаОтбора.Отбор) = Тип("НастройкиКомпоновкиДанных")
		Тогда
			КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СтрокаОтбора.Отбор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаСегментацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		НоваяСтрокаОтбора = ХранилищеОтборов.Добавить();
		НоваяСтрокаОтбора.СтрокаПравила = Элемент.ТекущаяСтрока;
		
		Если Копирование 
			И ПредыдущаяСтрокаПравил <> Неопределено
		Тогда
			СтрокаОтбораПредыдущей = ПолучитьСтрокуОтбораТекущегоПравила(ПредыдущаяСтрокаПравил);
			Если СтрокаОтбораПредыдущей <> Неопределено Тогда
				
				НоваяСтрокаОтбора.Отбор = СтрокаОтбораПредыдущей.Отбор;
				КомпоновщикОтбораПрименения.ЗагрузитьНастройки(НоваяСтрокаОтбора.Отбор);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаСегментацииПередУдалением(Элемент, Отказ)
	
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		ХранилищеОтборов.Удалить(СтрокаОтбора);
	КонецЕсли;
	КомпоновщикОтбораПрименения.Настройки.Отбор.Элементы.Очистить();
	Элементы.КомпоновщикОтбораПримененияНастройкиОтбор.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПриИзменении(Элемент)
	ОтборКомпоновкиПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтборКомпоновкиПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Модифицированность = Истина;
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Модифицированность = Истина;
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборДоступныеПоляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаСегментацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Ссылка.Пустая() Тогда
		РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаСегментацииПриИзменении(Элемент)
	ОбновитьЭлементыОтборов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьСтрокуОтбораТекущегоПравила(Знач ИдентификаторСтрокиПравила = Неопределено)
	
	Если ИдентификаторСтрокиПравила = Неопределено Тогда
		ИдентификаторСтрокиПравила = ТекущаяСтрокаПравил;
	КонецЕсли;
	
	СтрокиОтбора = ХранилищеОтборов.НайтиСтроки(Новый Структура("СтрокаПравила", ИдентификаторСтрокиПравила));
	Если СтрокиОтбора.Количество() <> 0 Тогда
		Возврат СтрокиОтбора[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРегистраторыИзмененияСегментации(ВидСегментации)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	СегментационныеРегистраторы.Ссылка,
	               	|	&ВидСегментации
	               	|ПОМЕСТИТЬ Регистраторы
	               	|ИЗ
	               	|	Перечисление.СегментационныеРегистраторы КАК СегментационныеРегистраторы
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	Регистраторы.Ссылка КАК Регистратор,
	               	|	ВЫБОР
	               	|		КОГДА СегментационныеСвязиДанных.СегментационныйРегистратор ЕСТЬ NULL 
	               	|			ТОГДА ЛОЖЬ
	               	|		ИНАЧЕ ИСТИНА
	               	|	КОНЕЦ КАК Используется
	               	|ИЗ
	               	|	Регистраторы КАК Регистраторы
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СегментационныеСвязиДанных КАК СегментационныеСвязиДанных
	               	|		ПО Регистраторы.Ссылка = СегментационныеСвязиДанных.СегментационныйРегистратор
	               	|			И Регистраторы.ВидСегментации = СегментационныеСвязиДанных.ВидСегментации";
	Запрос.УстановитьПараметр("ВидСегментации", ВидСегментации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьРегистраторыИзмененийСегментации(Ссылка, РегистраторыСегмента)
	
	Набор = РегистрыСведений.СегментационныеСвязиДанных.СоздатьНаборЗаписей();
	Набор.Отбор.ВидСегментации.Установить(Ссылка);
	
	Для Каждого СтрокаРегистратора Из РегистраторыСегмента Цикл
		Если СтрокаРегистратора.Используется Тогда
			Запись = Набор.Добавить();
			Запись.ВидСегментации = Ссылка;
			Запись.СегментационныйРегистратор = СтрокаРегистратора.Регистратор;
		КонецЕсли;
	КонецЦикла;
	Набор.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпоновкиПриИзменении()
	
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		Настройки = Новый КомпоновщикНастроекКомпоновкиДанных;
		Настройки.ЗагрузитьНастройки(КомпоновщикОтбораПрименения.Настройки);
		СтрокаОтбора.Отбор = Настройки.Настройки;
		
		СтрокаПравила = Объект.ПравилаСегментации.НайтиПоИдентификатору(ТекущаяСтрокаПравил);
		Если СтрокаПравила <> Неопределено Тогда
			СтрокаПравила.ПредставлениеОтбора = Строка(СтрокаОтбора.Отбор.Отбор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыОтборов()
	Элементы.ГруппаОтбор.Доступность = (Объект.ПравилаСегментации.Количество() > 0);	
КонецПроцедуры

#КонецОбласти
