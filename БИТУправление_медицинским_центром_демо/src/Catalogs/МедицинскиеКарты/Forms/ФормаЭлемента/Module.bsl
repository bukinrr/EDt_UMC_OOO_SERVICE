#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	// Чтение штрихкода карты
	Если Не ЭтоНовый Тогда
		Если ПрочитатьШтрихкодМедкарты() Тогда
			Элементы.ПрисвоитьШтрихкод.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ВидКарты) Тогда
			Объект.ВидКарты = мУчетнаяПолитика.ОсновнойВидМедКарт;
		КонецЕсли;
		
		Объект.ДатаРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Если ЗначениеЗаполнено(Параметры.Основание)	Тогда
			Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Заявка") Тогда
				Объект.Клиент = Параметры.Основание.Клиент;
			ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.Клиенты") Тогда
				Объект.Клиент = Параметры.Основание;
			КонецЕсли;
		КонецЕсли;
		
		ФормированиеНомера(Истина);
		Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = "№";
		КонецЕсли;
	КонецЕсли;	
	
	#Область ЭлектронныеПодписи
	ИспользуютсяЭП = ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК();
	
	Если ИспользуютсяЭП И Не Объект.Ссылка.Пустая() Тогда
		Если Объект.ПодписанЭП Тогда
			ОбновитьСписокПодписей();
		Иначе
			бит_СертификатыЭЦП.ЗаполнитьСводкуПодписей(Объект.Ссылка, СводкаHTML, ЭлектронныеПодписи);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьВидимостьПоЭП();
	#КонецОбласти
	
	НастроитьПоВидуМедкарты();
	Если ЗначениеЗаполнено(Объект.ВидКарты) Тогда
		ОбновитьПредпросмотрНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДополнительныеСвойства = Новый Структура;
	ЗаполнитьСписокПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДополнительныеСвойства.Вставить("ЗаписьНового", Объект.Ссылка.Пустая());
	
	Если ЗначениеЗаполнено(ШтрихКод)
		И Не ЗначениеЗаполнено(ТипШтрихкода)
	Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru='Нельзя сохранить штрихкод без указания типа штрихкода!'"), 10);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.НомерКарты) Тогда
		ОтраслевыеДополнения.ФормированиеНомера(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ШтрихкодИзменен Тогда 
		
		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(Штрихкод) И ЗначениеЗаполнено(ТипШтрихкода) Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();             
			НоваяЗапись.Владелец = ТекущийОбъект.Ссылка;
			НоваяЗапись.Штрихкод = ШтрихКод;
			НоваяЗапись.ТипШтрихкода = ТипШтрихкода;
			
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
	ИначеЕсли ДополнительныеСвойства.ЗаписьНового
			И мУчетнаяПолитика.АвтоматическиШтрихкодироватьМедицинскиеКарты
	Тогда
		
		ПрочитатьШтрихкодМедкарты(ТекущийОбъект.Ссылка);	
		
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("КлиентИзменен") Тогда
		ДополнительныеСвойства.Вставить("КлиентИзменен", ТекущийОбъект.ДополнительныеСвойства.КлиентИзменен);
	КонецЕсли;
	
	ШтрихкодИзменен = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Автоматическая смена основной карты клиента, если той нет или закрыта, или удалена.
	Если ЗначениеЗаполнено(Объект.Клиент)
		И Не Объект.ПометкаУдаления
		И (Объект.ДатаЗакрытия > ТекущаяДата() Или Не ЗначениеЗаполнено(Объект.ДатаЗакрытия)) // Медкарта не закрыта, не удалена.
	Тогда
		ТекущаяОсновнаяКарта = Объект.Клиент.ОсновнаяМедицинскаяКарта;
		
		Если Не ЗначениеЗаполнено(ТекущаяОсновнаяКарта)
				Или (ТекущаяОсновнаяКарта <> Объект.Ссылка 
					 И (ТекущаяОсновнаяКарта.ПометкаУдаления 
						Или (ТекущаяОсновнаяКарта.ДатаЗакрытия < ТекущаяДата() И ЗначениеЗаполнено(ТекущаяОсновнаяКарта.ДатаЗакрытия))))
		Тогда
			КлиентОбъект = Объект.Клиент.ПолучитьОбъект();
			КлиентОбъект.ОсновнаяМедицинскаяКарта = Объект.Ссылка;
			КлиентОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьСтандартныеДейтсвияПередЗаписью");
			КлиентОбъект.Записать();
			ДополнительныеСвойства.Вставить("ИзмененаОсновнаяМедКартаКлиента");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Автоматическая смена основной карты клиента, если та закрыта или удалена. Оповещение формы клиента.
	Если ДополнительныеСвойства.Свойство("ИзмененаОсновнаяМедКартаКлиента") Тогда
		Оповестить("КлиентИзменен", Объект.Клиент,Объект.Ссылка);
		
	ИначеЕсли ДополнительныеСвойства.Свойство("КлиентИзменен") Тогда
		Оповестить("КлиентИзменен", Объект.Клиент);
	КонецЕсли;
	
	ЗаполнитьСписокПараметров();
	
	ДополнительныеСвойства.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		
		Возврат;
		
	КонецЕсли;

	Структура = Новый Структура("ШтрихКод, ТипШтрихкода, ЕдиницаИзмерения, ХарактеристикаНоменклатуры", "", ТипШтрихкода, ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"), ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	РаботаСТорговымОборудованиемКлиент.КнопкаНовыйШрихкодНажатие(Структура, Объект.Ссылка);
	
	ПрочитатьШтрихкодМедкарты();
	
	ТипШтрихкода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	
	ШтрихкодИзменен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрЭМК(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Клиент, Медицинскаякарта", Объект.Клиент, Объект.Ссылка);
	ОткрытьФорму("Обработка.ПросмотрМедКарт.Форма.ФормаАмбулаторнаяМК", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда 
		ОбновитьПредпросмотрНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименование(Команда)
	
	ФормированиеНомера(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоВидуМедкарты(Команда)
	
	Если Объект.ЗаполняемыеПараметры.Количество() > 0 И 
		Вопрос(НСтр("ru = 'Табличная часть будет очищена.'") + " " + НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет 
	Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокПараметров();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВручнуюДобавленныйПараметр(Команда)
	
	ТекДанные = Элементы.ЗаполняемыеПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПараметра = Объект.ЗаполняемыеПараметры.НайтиПоИдентификатору(ТекДанные.ПолучитьИдентификатор());
	Объект.ЗаполняемыеПараметры.Удалить(СтрокаПараметра);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НомерКартыПриИзменении(Элемент)
	
	ФормированиеНомера(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПациентПриИзменении(Элемент)
	
	ФормированиеНомера(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКартыПриИзменении(Элемент)
	
	ФормированиеНомера(Истина);
	ЗаполнитьСписокПараметров();
	НастроитьПоВидуМедкарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполняемыеПараметрыИмяПараметраПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаполняемыеПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ИмяПараметра) Тогда 
		
		ТипЗначенияПараметра = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекДанные.ИмяПараметра, "ТипЗначения");
		ТекДанные.Значение = ТипЗначенияПараметра.ПривестиЗначение(Неопределено);
		
		Элементы.ЗаполняемыеПараметрыЗначение.ДоступныеТипы = ТипЗначенияПараметра;	
		Если ТипЗначенияПараметра.Типы().Количество() > 1 Тогда
			Элементы.ЗаполняемыеПараметрыЗначение.ВыбиратьТип = Истина;
		Иначе 
			Элементы.ЗаполняемыеПараметрыЗначение.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполняемыеПараметрыПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ЗаполняемыеПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ИмяПараметра) Тогда
		Элементы.ЗаполняемыеПараметрыЗначение.ДоступныеТипы = ТекДанные.ТипЗначения;
		Элементы.ЗаполняемыеПараметрыЗначение.ОграничениеТипа = ТекДанные.ТипЗначения;
		Элементы.ЗаполняемыеПараметрыЗначение.КнопкаВыбора = ?(ТекДанные.ТипЗначения.СодержитТип(Тип("Строка")), Истина, Неопределено);
	КонецЕсли;
	
	Элементы.УдалитьВручнуюДобавленныйПараметр.Доступность = Не ИзмененияЗапрещены И ЗначениеЗаполнено(ТекДанные.ИмяВручнуюЗаполненногоПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ФормированиеНомера(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	ШтрихкодИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполняемыеПараметрыЗначениеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЗаполняемыеПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные.ИзПриема = Не ЗначениеЗаполнено(ТекДанные.Значение) И ЗначениеЗаполнено(ТекДанные.ЗначениеПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполняемыеПараметрыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗаполняемыеПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	ТекДанные.ИзПриема = Не ЗначениеЗаполнено(ТекДанные.Значение) И ЗначениеЗаполнено(ТекДанные.ЗначениеПоУмолчанию);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполняемыеПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗаполняемыеПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Или Не ЗначениеЗаполнено(ТекДанные.ИмяПараметра)
		Или Не ТекДанные.ТипЗначения.СодержитТип(Тип("Строка"))
	Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрШаблонаОсмотра = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекДанные.ИмяПараметра, "ПараметрШаблонаОсмотра"); 
	
	ДополнительныеПараметры = Новый Структура("Параметр", ТекДанные.ИмяПараметра);
	ОповещениеОВыборе = Новый ОписаниеОповещения("ВыборЗначенияПараметраЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	МедицинскаяДеятельностьКлиент.ПоказатьФормуВводаТекста(ТекДанные.Значение, ПараметрШаблонаОсмотра, ОповещениеОВыборе);  
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ScanData" Тогда
		
		Если ВводДоступен() Тогда
			
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменилисьПодписи"
		И Параметр = Объект.Ссылка
	Тогда
		ЭтотОбъект.Прочитать();
		ОбновитьДанныеПослеПодписания();
		ОбновитьПредпросмотрНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПодписей"
		И Параметр = Объект.Ссылка
	Тогда
		ОбновитьСписокПодписей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьШтрихкодМедкарты(МедкартаСсылка = Неопределено)
	
	Если МедкартаСсылка = Неопределено Тогда
		МедкартаСсылка = Объект.Ссылка;
	КонецЕсли;
	
	НЗ = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	НЗ.Отбор.Владелец.Установить(МедкартаСсылка);
	НЗ.Прочитать();
	Если НЗ.Количество() <> 0 Тогда
		ШтрихКод	 = НЗ[0].Штрихкод;
		ТипШтрихкода = НЗ[0].ТипШтрихкода;
	КонецЕсли;
	
	Возврат НЗ.Количество() <> 0;
	
КонецФункции

&НаКлиенте
Функция СШКМедКарта(МедКарта, ВладелецКарты, СШК) Экспорт
	
	Если МедКарта <> Объект.Ссылка Тогда
		
		ОткрытьЗначение(МедКарта);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ФормированиеНомера(ГенерироватьНомерКарты = Истина)
	ОтраслевыеДополнения.ФормированиеНомера(Объект, ГенерироватьНомерКарты);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПараметров()
	
	ДанныеПараметров = МедицинскаяДеятельность.ПолучитьВычисляемыеЗначенияПараметровМедкарты(Объект.Ссылка, Объект.ВидКарты, Объект.ЗаполняемыеПараметры);
	
	ВручнуюЗаполненныеПараметры = Новый Массив;
	Для Каждого СтрокаПараметра Из Объект.ЗаполняемыеПараметры Цикл
		Если ЗначениеЗаполнено(СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра) Тогда
			ВручнуюЗаполненныеПараметры.Добавить(Новый Структура("Параметр, Значение", СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра, СтрокаПараметра.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Объект.ЗаполняемыеПараметры.Очистить();
	Для Каждого кзПараметр Из ДанныеПараметров.Параметры Цикл
		СтруктураПараметра = кзПараметр.Значение;
		НоваяСтрока = Объект.ЗаполняемыеПараметры.Добавить();
		НоваяСтрока.ИмяПараметра = СтруктураПараметра.Параметр;
		НоваяСтрока.ТипЗначения = СтруктураПараметра.ТипЗначения;
		НоваяСтрока.ЗначениеПоУмолчанию = СтруктураПараметра.ВычисленноеЗначение;
		
		Если СтруктураПараметра.ЭтоНовый Тогда
			НоваяСтрока.Значение = СтруктураПараметра.ЗначениеПоУмолчанию;
		Иначе
			НоваяСтрока.Значение = СтруктураПараметра.РучноеЗначение;
			НоваяСтрока.ИзПриема = Не ЗначениеЗаполнено(НоваяСтрока.Значение) И ЗначениеЗаполнено(СтруктураПараметра.ВычисленноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПараметра Из ВручнуюЗаполненныеПараметры Цикл
		НоваяСтрока = Объект.ЗаполняемыеПараметры.Добавить();
		НоваяСтрока.ИмяВручнуюЗаполненногоПараметра = СтрокаПараметра.Параметр;
		НоваяСтрока.Значение = СтрокаПараметра.Значение;
	КонецЦикла;
	
	ДобавитьУсловноеОформлениеПараметровМедкарты();
	ОбновитьОтображениеДанных(Элементы.ЗаполняемыеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияПараметраЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокиПараметра = Объект.ЗаполняемыеПараметры.НайтиСтроки(Новый Структура("ИмяПараметра", ДополнительныеПараметры.Параметр));
	Если СтрокиПараметра.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	СтрокаПараметра = СтрокиПараметра[0];
	СтрокаПараметра.Значение = Значение;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредпросмотрНаСервере()
	
	Предпросмотр.Очистить();
	Предпросмотр.ОтображатьСетку = Ложь;
	Предпросмотр.ОтображатьЗаголовки = Ложь;
	Предпросмотр.ОтображатьГруппировки = Ложь;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ОписаниеОшибки = "";
		Если Объект.ПодписанЭП Тогда
			ТабДок = ПолучитьСформированныйТабДок(Объект.Ссылка);
		КонецЕсли;
		
		Если ТабДок = Неопределено Тогда
			ТабДок = МедицинскаяДеятельность.ПолучитьТекстТитульного(Объект.Ссылка, Объект.Клиент, ОписаниеОшибки,,, РедактированиеРазрешено);
		КонецЕсли;
		
		Если ТабДок <> Неопределено Тогда
			Предпросмотр.Вывести(ТабДок);
			ЗаполнитьЗначенияСвойств(Предпросмотр, ТабДок, "ДвусторонняяПечать, РазмерСтраницы, ВысотаСтраницы, ШиринаСтраницы, ОриентацияСтраницы, КлючПараметровПечати");
		ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСформированныйТабДок(Медкарта)
	
	ДанныеФайловЭМД = бит_РаботаСФайлами.ПолучитьДанныеФайловЭМД(Медкарта, , ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Если ДанныеФайловЭМД.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ДанныеФайловЭМД.Получить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор()).ДвоичныеДанные.ОткрытьПотокДляЧтения());
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьШтампыЭЦП(ТабДок, Медкарта);
	
	Возврат ТабДок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьШтампыЭЦП(ТабДок, Медкарта)
	
	ОбластьЭЦП = Справочники.ВидыМедицинскихКарт.ПолучитьОбластьЭЦПМакетаМедкарты(Медкарта.ВидКарты);
	
	Если ОбластьЭЦП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасшифровокПоРолям = Справочники.ВидыМедицинскихКарт.ПараметрыРасшифровокЭЦП(Медкарта.ВидКарты);
	
	Если ПараметрыРасшифровокПоРолям = Неопределено
		Или ПараметрыРасшифровокПоРолям.Количество() = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИПодписиЭМД.РольПодписи КАК РольПодписи,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиИПодписиЭМД КАК РолиИПодписиЭМД
		|		ПО (РолиИПодписиЭМД.Документ = &Документ)
		|			И (РолиИПодписиЭМД.УИД_ЭЦП = ЭлектронныеПодписи.УникальныйИдентификатор)
		|			И (РолиИПодписиЭМД.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				ИЛИ РолиИПодписиЭМД.Пользователь = ЭлектронныеПодписи.УстановившийПодпись)";
	
	Запрос.УстановитьПараметр("Документ", Медкарта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеПараметровРасшифровок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		ПараметрРасшифровки = ПараметрыРасшифровокПоРолям.Получить(Выборка.РольПодписи);
		Если ПараметрРасшифровки <> Неопределено Тогда
			ДанныеПараметровРасшифровок.Вставить(ПараметрРасшифровки, ЭЦП_УМЦ_Сервер.ПолучитьДанныеСертификата(Выборка.Сертификат, Медкарта, Выборка.ДатаПодписи));
		КонецЕсли;
	КонецЦикла;
	
	Области = Новый Массив;
	Для Строка = 1 По ТабДок.ВысотаТаблицы Цикл
		Для Колонка = 1 По ТабДок.ШиринаТаблицы Цикл
			ТекОбласть = ТабДок.Область(Строка, Колонка);
			
			Если Области.Найти(ТекОбласть.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Области.Добавить(ТекОбласть.Имя);
			
			Если ЗначениеЗаполнено(ТекОбласть.Расшифровка)
				И ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура")
				И ТекОбласть.Расшифровка.Свойство("ПараметрРасшифровки")
			Тогда
				
				ДанныеПодписи = ДанныеПараметровРасшифровок.Получить(ТекОбласть.Расшифровка.ПараметрРасшифровки);
				Если ДанныеПодписи <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ОбластьЭЦП.Параметры, ДанныеПодписи);
					ТабДокЭЦП = Новый ТабличныйДокумент;
					ТабДокЭЦП.Вывести(ОбластьЭЦП);
					ТабДок.ВставитьОбласть(ТабДокЭЦП.Области[0], ТекОбласть);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеПараметровМедкарты()
	
	УсловноеОформление.Элементы.Очистить();
	Для Каждого СтрокаПараметрМедкарты Из Объект.ЗаполняемыеПараметры Цикл
		ДобавитьУсловноеОформлениеПараметраМедкарты(СтрокаПараметрМедкарты.ИмяПараметра, СтрокаПараметрМедкарты.ЗначениеПоУмолчанию);
	КонецЦикла;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	Поле = ЭлементУО.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("ЗаполняемыеПараметры");
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполняемыеПараметры.ИмяВручнуюЗаполненногоПараметра");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеПараметраМедкарты(Параметр, ЗначениеПоУмолчанию)
	
	// Текст для не заполненных вручную значений парамтеров
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	Поле = ЭлементУО.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("ЗаполняемыеПараметрыЗначение");
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполняемыеПараметры.ИмяПараметра");
	ЭлементОтбора.ПравоеЗначение = Параметр;
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполняемыеПараметры.Значение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления = ЭлементУО.Оформление.Элементы.Найти("Текст");
	ЭлементОформления.Значение = Строка(ЗначениеПоУмолчанию);
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоВидуМедкарты()
	
	Роли = Справочники.ВидыМедицинскихКарт.РолиДляПодписания(Объект.ВидКарты);
	ПодписаниеДоступно = Роли.Количество() > 0;
	РедактированиеРазрешено = Справочники.ВидыМедицинскихКарт.ДоступноРучноеРедактирование(Объект.ВидКарты);
	
	Элементы.УдалитьВручнуюДобавленныйПараметр.Видимость = РедактированиеРазрешено;
	Элементы.ГруппаЭП.Видимость = ИспользуютсяЭП И ПодписаниеДоступно;
	
	ЗаполнитьЗначенияПустыхПараметровПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Элементы.Предпросмотр.Редактирование = Ложь;
	Если ЗначениеЗаполнено(Область.Расшифровка) Тогда
		
		Если ТипЗнч(Область.Расшифровка) <> Тип("Структура")
			Или Область.Расшифровка.Свойство("ПараметрРасшифровки")
			Или Не Область.Расшифровка.Свойство("СтрокаПараметров")
		Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		СтрокаПараметров = Область.Расшифровка.СтрокаПараметров;
		СписокВыбора = Область.Расшифровка.СпискиВыбора.Получить(СтрокаПараметров);
		
		Если СтрНайти(СтрокаПараметров, "[") = 0
			И Не ЗначениеЗаполнено(Область.Расшифровка.ИмяФормыЗаполнения)
		Тогда
			Если СписокВыбора = Неопределено Тогда
				Элементы.Предпросмотр.Редактирование = Истина;
				Возврат;
			ИначеЕсли СписокВыбора.Получить("ВозможностьРедактирования") <> Истина Тогда
				СтандартнаяОбработка = Ложь;
				
				Если СписокВыбора.Получить("ВозможностьРедактирования") = Ложь
					И ТипЗнч(СписокВыбора.Получить("Значения")) = Тип("Массив")
				Тогда
					ДополнительныеПараметры = Новый Структура("ОбластьТабДока", Область.Имя);
					ДополнительныеПараметры.Вставить("Параметр", СтрокаПараметров);
					ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("УстановитьТекстВОбластьПослеВыбораИзМеню", ЭтотОбъект, ДополнительныеПараметры);
					
					СписокЗначенийПараметра = Новый СписокЗначений;
					СписокЗначенийПараметра.ЗагрузитьЗначения(СписокВыбора["Значения"]);
					ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокЗначенийПараметра, Область);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ЗначенияПараметровСтроки = Новый Массив;
		ЗначенияПустыхПараметровСтрокиПоУмолчанию = Новый Массив;
		
		Если СтрНайти(СтрокаПараметров, "[") = 0 Тогда
			СтруктураПараметра = Новый Структура("Параметр, Значение", СтрокаПараметров, "");
			СтрокиПараметра = Объект.ЗаполняемыеПараметры.НайтиСтроки(Новый Структура("ИмяВручнуюЗаполненногоПараметра", СтрокаПараметров));
			Если СтрокиПараметра.Количество() > 0 Тогда
				СтруктураПараметра.Значение = СтрокиПараметра[0].Значение;
			КонецЕсли;
			ЗначенияПараметровСтроки.Добавить(СтруктураПараметра);
		Иначе
			Для Каждого ПараметрРасшифровки Из ОбщегоНазначенияКлиентСервер.НайтиПараметрыВТексте(СтрокаПараметров, "[", "]") Цикл
				СтруктураПараметра = Новый Структура("Параметр, Значение", ПараметрРасшифровки.ИмяПараметра, "");
				СтрокиПараметра = Объект.ЗаполняемыеПараметры.НайтиСтроки(Новый Структура("ИмяВручнуюЗаполненногоПараметра", ПараметрРасшифровки.ИмяПараметра));
				Если СтрокиПараметра.Количество() > 0 Тогда
					СтруктураПараметра.Значение = СтрокиПараметра[0].Значение;
				КонецЕсли;
				ЗначенияПараметровСтроки.Добавить(СтруктураПараметра);
				
				СтрокиЗначений = ЗначенияПустыхПараметровПоУмолчанию.НайтиСтроки(Новый Структура("ИмяПараметра", ПараметрРасшифровки.ИмяПараметра));
				Если СтрокиЗначений.Количество() > 0 Тогда
					ЗначенияПустыхПараметровСтрокиПоУмолчанию.Добавить(Новый Структура("ИмяПараметра, Значение", СтрокиЗначений[0].ИмяПараметра, СтрокиЗначений[0].Значение));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Расшифровка", Область.Расшифровка);
		ПараметрыОткрытия.Вставить("ЗначенияПараметровСтроки", ЗначенияПараметровСтроки);
		ПараметрыОткрытия.Вставить("ЗначенияПустыхПараметровСтрокиПоУмолчанию", ЗначенияПустыхПараметровСтрокиПоУмолчанию);
		
		ДополнительныеПараметры = Новый Структура("ОбластьТабДока", Область.Имя);
		
		Если ЗначениеЗаполнено(Область.Расшифровка.ИмяФормыЗаполнения) Тогда
			ИмяФормыЗаполнения = Область.Расшифровка.ИмяФормыЗаполнения;
			// В этом случае в строке только один параметр
			ДополнительныеПараметры.Вставить("Параметр", ЗначенияПараметровСтроки[0].Параметр);
			ДополнительныеПараметры.Вставить("СтрокаПараметров", Область.Расшифровка.СтрокаПараметров);
			ПараметрыОткрытия.Вставить("НачальноеЗначение", ЗначенияПараметровСтроки[0].Значение); // Обработка.ИнтерфейсВводаПолейЭМД.ЗанятостьПациента
		Иначе
			ИмяФормыЗаполнения = "Справочник.МедицинскиеКарты.Форма.ЗаполнениеПараметровШаблона";
		КонецЕсли;
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗаполненияПараметров", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ИмяФормыЗаполнения, ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстВОбластьПослеВыбораИзМеню(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПараметра = Объект.ЗаполняемыеПараметры.НайтиСтроки(Новый Структура("ИмяВручнуюЗаполненногоПараметра", ДопПараметры.Параметр));
	Если СтрокиПараметра.Количество() = 0 Тогда
		СтрокаПараметра = Объект.ЗаполняемыеПараметры.Добавить();
		СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра = ДопПараметры.Параметр;
	Иначе
		СтрокаПараметра = СтрокиПараметра[0];
	КонецЕсли;
	СтрокаПараметра.Значение = ВыбранныйЭлемент.Значение;
	
	Модифицированность = Истина;
	Предпросмотр.Область(ДопПараметры.ОбластьТабДока).Текст = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияПараметров(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Параметр") Тогда
		ЗначениеИзмененногоПараметра = Результат;
		СтрокиЗначенияПустогоПараметра = ЗначенияПустыхПараметровПоУмолчанию.НайтиСтроки(Новый Структура("ИмяПараметра", ДопПараметры.Параметр));
		Если Не ЗначениеЗаполнено(ЗначениеИзмененногоПараметра)
			И СтрокиЗначенияПустогоПараметра.Количество() > 0
		Тогда
			ЗначениеИзмененногоПараметра = СтрокиЗначенияПустогоПараметра[0].Значение;
		КонецЕсли;
		ИзмененныеПараметры = Новый Массив;
		ИзмененныеПараметры.Добавить(Новый Структура("Параметр, Значение", ДопПараметры.Параметр, ЗначениеИзмененногоПараметра));
		Если СтрНайти(ДопПараметры.СтрокаПараметров, "[") = 0 Тогда
			НовыйТекстОбласти = ЗначениеИзмененногоПараметра;
		Иначе
			НовыйТекстОбласти = СтрЗаменить(ДопПараметры.СтрокаПараметров, СтрШаблон("[%1]", ДопПараметры.Параметр), ЗначениеИзмененногоПараметра);
		КонецЕсли;
	Иначе
		ИзмененныеПараметры = Результат.ИзмененныеПараметры;
		НовыйТекстОбласти = Результат.ТекстСтроки;
	КонецЕсли;
	
	Для Каждого ЗначениеПараметра Из ИзмененныеПараметры Цикл
		СтрокиПараметра = Объект.ЗаполняемыеПараметры.НайтиСтроки(Новый Структура("ИмяВручнуюЗаполненногоПараметра", ЗначениеПараметра.Параметр));
		Если СтрокиПараметра.Количество() = 0 Тогда
			СтрокаПараметра = Объект.ЗаполняемыеПараметры.Добавить();
			СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра = ЗначениеПараметра.Параметр;
		Иначе
			СтрокаПараметра = СтрокиПараметра[0];
		КонецЕсли;
		СтрокаПараметра.Значение = ЗначениеПараметра.Значение;
	КонецЦикла;
	
	Модифицированность = ИзмененныеПараметры.Количество() > 0;
	Предпросмотр.Область(ДопПараметры.ОбластьТабДока).Текст = НовыйТекстОбласти;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрПриАктивизации(Элемент)
	
	Элементы.Предпросмотр.Редактирование = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрПриИзмененииСодержимогоОбласти(Элемент, Область, ДополнительныеПараметры)
	
	ИмяВручнуюЗаполненногоПараметра = Область.Расшифровка.СтрокаПараметров;
	СтрокиПараметра = Объект.ЗаполняемыеПараметры.НайтиСтроки(Новый Структура("ИмяВручнуюЗаполненногоПараметра", ИмяВручнуюЗаполненногоПараметра));
	Если СтрокиПараметра.Количество() = 0 Тогда
		Если Не ЗначениеЗаполнено(Область.Текст) Тогда
			Возврат;
		КонецЕсли;
		СтрокаПараметра = Объект.ЗаполняемыеПараметры.Добавить();
		СтрокаПараметра.ИмяВручнуюЗаполненногоПараметра = ИмяВручнуюЗаполненногоПараметра;
	Иначе
		СтрокаПараметра = СтрокиПараметра[0];
	КонецЕсли;
	
	СтрокаПараметра.Значение = Область.Текст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПустыхПараметровПоУмолчанию()
	
	ЗначенияПустыхПараметровПоУмолчанию.Очистить();
	ЗначенияПараметров = Справочники.ВидыМедицинскихКарт.ПолучитьЗначенияПустыхПараметровПоУмолчанию(Объект.ВидКарты);
	Для Каждого ЗначениеПараметра Из ЗначенияПараметров Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияПустыхПараметровПоУмолчанию.Добавить(), ЗначениеПараметра);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписи

#Область ЭлектронныеПодписиКоманды

&НаКлиенте
Процедура ПодписатьВсе(Команда)
	
	ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Ложь, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодписаниюЭМД(Команда)
	
	ЭЦП_УМЦ_Клиент.ПерейтиКПодписаниюЭМД(ЭтотОбъект, Истина, Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписиСлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокПодписей()
	
	бит_СертификатыЭЦП.ЗаполнитьСписокПодписей(Объект.Ссылка, УникальныйИдентификатор, Элементы.ГруппаЭП, ЭлектронныеПодписи, , СводкаHTML);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПодписания()
	
	ОбновитьСписокПодписей();
	УстановитьДоступностьВидимостьПоЭП();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписиУправлениеДоступностьюПолей

&НаСервере
Процедура УстановитьДоступностьВидимостьПоЭП()
	
	Элементы.ГруппаЭП.Видимость = ИспользуютсяЭП;
	
	//ЭтоСупервайзер = ЭЦП_УМЦ_Сервер.ЭтоСупервайзер();
	ОтсутствуютПраваНаИзменение = Не ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());
	
	//ИзмененияЗапрещены = ОтсутствуютПраваНаИзменение Или (ИспользуютсяЭП И Не ЭтоСупервайзер И Объект.ПодписанЭП);
	ИзмененияЗапрещены = ОтсутствуютПраваНаИзменение Или (ИспользуютсяЭП И Объект.ПодписанЭП);
	
	Элементы.ОбновитьПредпросмотр.Доступность	= Не ИзмененияЗапрещены;
	Элементы.ПрисвоитьШтрихкод.Доступность		= Не ИзмененияЗапрещены;
	Элементы.ГруппаДанные.ТолькоПросмотр		= ИзмененияЗапрещены;
	
	УстановитьДоступностьПодчиненныхКнопок(Элементы.ГруппаНаименование, ИзмененияЗапрещены);
	УстановитьДоступностьПодчиненныхКнопок(Элементы.ЗаполняемыеПараметры.КоманднаяПанель, ИзмененияЗапрещены);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПодчиненныхКнопок(Родитель, ИзмененияЗапрещены, ИсключаемыеЭлементы = Неопределено)
	
	Для Каждого ПодчиненныйЭлемент Из Родитель.ПодчиненныеЭлементы Цикл
		Если ИсключаемыеЭлементы <> Неопределено
			И ИсключаемыеЭлементы.Найти(ПодчиненныйЭлемент) <> Неопределено
		Тогда
			Продолжить;
		КонецЕсли;
		ПодчиненныйЭлемент.Доступность = Не ИзмененияЗапрещены;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
