#Область ПрограммныйИнтерфейс

#Область ЗагрузкаИзЕГИСЗ

// Возвращает идентификатор основного классификатора источника на сайте росминздрава.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьOIDСправочника() Экспорт
	Возврат "1.2.643.5.1.13.13.11.1461";
КонецФункции

// Возвращает список альтернативных идентификаторов классификатора источника на сайте росминздрава.
// 
// Возвращаемое значение:
// 	Массив Из Строка
//
Функция ПолучитьАльтернативныеOID() Экспорт
	СписокOID = Новый Массив();
	СписокOID.Добавить("1.2.643.5.1.13.2.1.1.178");
	Возврат СписокOID;
КонецФункции

// Описывает соответствие между именем реквизита в классификаторе и его именем в базе 1С.
// 
// Возвращаемое значение:
//   - Соответствие.
//
Функция ПолучитьСопоставленийРеквизитовИXMLСправочникаЕГИСЗ() Экспорт
	
	Сопоставление = Новый Соответствие;
	//1) id, Уникальный идентификатор, Целочисленное, Обязательное;
	Сопоставление.Вставить("ID", "УИДЕГИСЗ");
	//2) oid, OID, Строковое;
	Сопоставление.Вставить("OID", "OIDОрганизации");
	//4) nameFull, Полное наименование, Строковое, Обязательное;
	Сопоставление.Вставить("NAMEFULL", "ПолноеНаименование");
	//5) nameShort, Сокращенное наименование, Строковое;
	Сопоставление.Вставить("NAMESHORT", "Наименование");
	//6) parentId, Уникальный идентификатор родительской организации, Строковое;
	Сопоставление.Вставить("PARENTID", "УИДЕГИСЗРодителя");
	//9) inn, ИНН, Строковое;
	Сопоставление.Вставить("INN", "ИНН");
	//10) kpp, КПП, Строковое;
	Сопоставление.Вставить("KPP", "КПП");
	//11) ogrn, ОГРН, Строковое;
	Сопоставление.Вставить("OGRN", "ОГРН");
	
	Возврат Сопоставление;
	
КонецФункции

// Возвращает массив структур, ключ которой - имя реквизита справочника, а значение - имя поля таблицы актуальных в общей форме загрузки.
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПолучитьЗагружаемыеПоляЕГИСЗ() Экспорт
	
	Поля = Новый Структура;
	Поля.Вставить("Наименование","Наименование");
	Поля.Вставить("ПолноеНаименование", "ПолноеНаименование");
	Поля.Вставить("OIDОрганизации", "OIDОрганизации");
	Поля.Вставить("ИНН", "ИНН");
	Поля.Вставить("КПП", "КПП");
	Поля.Вставить("ОГРН", "ОГРН");
	Поля.Вставить("УИДЕГИСЗ", "УИДЕГИСЗ");
	Возврат Поля;
	
КонецФункции

// Дополнительные атрибуты классификатора для загрузки.
// 
// Возвращаемое значение:
//  Соответствие - дополнительные атрибуты.
//
Функция ПолучитьДополнительныеАтрибуты() Экспорт
	
	Поля = Новый Соответствие;
	
	//3) oldOid, OID(неактуальный), Строковое;
	Поля.Вставить("oldOid", "oldOid");
	//7) medicalSubjectId, Код субъекта системы здравоохранения, Целочисленное;
	Поля.Вставить("medicalSubjectId", "medicalSubjectId");
	//8) medicalSubjectName, Наименование субъекта системы здравоохранения, Строковое;
	Поля.Вставить("medicalSubjectName", "medicalSubjectName");
	//12) regionId, Код региона РФ, Целочисленное;
	Поля.Вставить("regionId", "regionId");
	//13) regionName, Наименование региона РФ, Строковое;
	Поля.Вставить("regionName", "regionName");
	//14) organizationType, Форма собственности, Целочисленное;
	Поля.Вставить("organizationType", "organizationType");
	//15) moDeptId, Идентификатор ведомственной принадлежности, Целочисленное;
	Поля.Вставить("moDeptId", "moDeptId");
	//16) moDeptName, Ведомственная принадлежность, Строковое;
	Поля.Вставить("moDeptName", "moDeptName");
	//17) founder, Учредитель, Строковое;
	Поля.Вставить("founder", "founder");
	//18) deleteDate, Дата удаления записи, Дата;
	Поля.Вставить("deleteDate", "deleteDate");
	//19) , Причина удаления записи, Строковое;
	Поля.Вставить("deleteReason", "deleteReason");
	//20) createDate, Дата создания записи, Дата;
	Поля.Вставить("createDate", "createDate");
	//21) modifyDate, Дата последнего изменения записи, Дата;
	Поля.Вставить("modifyDate", "modifyDate");
	//22) moLevel, Уровень организации, Строковое;
	Поля.Вставить("moLevel", "moLevel");
	//23) moAgencyKindId, Идентификатор вида деятельности, Целочисленное;
	Поля.Вставить("moAgencyKindId", "moAgencyKindId");
	//24) moAgencyKind, Вид деятельности, Строковое;
	Поля.Вставить("moAgencyKind", "moAgencyKind");
	//25) profileAgencyKindId, Идентификатор профиля деятельности, Целочисленное;
	Поля.Вставить("profileAgencyKindId", "profileAgencyKindId");
	//26) profileAgencyKind, Профиль деятельности, Строковое;
	Поля.Вставить("profileAgencyKind", "profileAgencyKind");
	//27) postIndex, Почтовый индекс, Строковое;
	Поля.Вставить("postIndex", "postIndex");
	//28) cadastralNumber, Кадастровый номер, Строковое;
	Поля.Вставить("cadastralNumber", "cadastralNumber");
	//29) latitude, Широта, Строковое;
	Поля.Вставить("latitude", "latitude");
	//30) longtitude, Долгота, Строковое;
	Поля.Вставить("longtitude", "longtitude");
	//31) fiasVersion, Версия ФИАС, Целочисленное;
	Поля.Вставить("fiasVersion", "fiasVersion");
	//32) aoidArea, Идентификатор населенного пункта, Строковое;
	Поля.Вставить("aoidArea", "aoidArea");
	//33) aoidStreet, Идентификатор улицы, Строковое;
	Поля.Вставить("aoidStreet", "aoidStreet");
	//34) houseid, Идентификатор дома, Строковое;
	Поля.Вставить("houseid", "houseid");
	//35) addrRegionId, Код региона, Целочисленное;
	Поля.Вставить("addrRegionId", "addrRegionId");
	//36) addrRegionName, Наименование региона, Строковое;
	Поля.Вставить("addrRegionName", "addrRegionName");
	//37) territoryCode, Код региона по ОКАТО, Строковое;
	Поля.Вставить("territoryCode", "territoryCode");
	//38) isFederalCity, Город федерального значения, Строковое;
	Поля.Вставить("isFederalCity", "isFederalCity");
	//39) areaName, Наименование населенного пункта, Строковое;
	Поля.Вставить("areaName", "areaName");
	//40) prefixArea, Префикс населенного пункта, Строковое;
	Поля.Вставить("prefixArea", "prefixArea");
	//41) streetName, Наименование улицы, Строковое;
	Поля.Вставить("streetName", "streetName");
	//42) prefixStreet, Префикс улицы, Строковое;
	Поля.Вставить("prefixStreet", "prefixStreet");
	//43) house, Номер дома, Строковое;
	Поля.Вставить("house", "house");
	//44) building, Номер строения, Строковое;
	Поля.Вставить("building", "building");
	//45) struct, Номер корпуса, Строковое;
	Поля.Вставить("struct", "struct");
	//46) parentOspOid, OID головной организации для СП-1, Строковое;
	Поля.Вставить("parentOspOid", "parentOspOid");
	//47) ospOid, OID СП-1, Строковое;
	Поля.Вставить("ospOid", "ospOid");
	//48) childrenOspOid, OID СП-1, дочерних для организации, Строковое;
	Поля.Вставить("childrenOspOid", "childrenOspOid");
	
	Возврат Поля;
	
КонецФункции

// Формирует массив структур, ключи которых - поля для поиска существующих элементов при загрузки из ФР НСИ ЕГИСЗ,
//  а порядок в массиве - приоритет использования способов поиска.
// 
// Возвращаемое значение:
//  Массив - наборы ключей поиска.
//
Функция ПолучитьПорядокПоискаСуществующихОбъектов() Экспорт
	
	ПорядокПоиска = Новый Массив;
	
	ПоляПоиска = Новый Структура;
	ПоляПоиска.Вставить("УИДЕГИСЗ", "УИДЕГИСЗ");
	
	ПорядокПоиска.Добавить(ПоляПоиска);
	
	Возврат ПорядокПоиска;
	
КонецФункции

// Загрузка справочника: событие перед записью элемента справочника.
//
// Параметры:
//  ОбъектСправочника		 - СправочникОбъект	 - объект справочника
//  ДополнительныеСвойства	 - Структура		 - дополнительные свойства
//  СтрокаКлассификатора	 - СтрокаДереваЗначений	 - строка дерева классификатора
//  СообщениеОтказа			 - Строка				 - Сообщение отказа
//
Процедура ЗагрузкаСправочникаИзЕГИСЗПередЗаписью(ОбъектСправочника, ДополнительныеСвойства, СтрокаКлассификатора, СообщениеОтказа) Экспорт
	
	Если ДополнительныеСвойства.Свойство("ТестовыйКонтур") Тогда
		ОбъектСправочника.ТестовыйКонтур = ДополнительныеСвойства.ТестовыйКонтур;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает имя реквизита для дальнейшего заполнения в шаблоне параметра DisplayName по нему
// 
// Возвращаемое значение:
//  Строка - имя реквизита полное наименование
//
Функция ПолучитьИмяРеквизитаDisplayNameИCode() Экспорт
	
	СтруктураВозвращаемогоЗначения = Новый Структура;
	СтруктураВозвращаемогоЗначения.Вставить("Name", "ПолноеНаименование");
	Возврат СтруктураВозвращаемогоЗначения;
	
КонецФункции

// Список полей отбора для загрузки из внешнего классификатора.
// 
// Возвращаемое значение:
//  Структура - список полей.
//
Функция СписокПолейДляЗагрузкиПоОтбору() Экспорт
	СписокПолей = Новый Структура;
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("Представление","OID медицинской организации");
	ПараметрыПоля.Вставить("ТипДанных",Тип("Строка"));
	ПараметрыПоля.Вставить("ТолькоТочноеСовпадение",Ложь);
	СписокПолей.Вставить("oid",ПараметрыПоля);
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("Представление","Полное наименование");
	ПараметрыПоля.Вставить("ТипДанных",Тип("Строка"));
	ПараметрыПоля.Вставить("ТолькоТочноеСовпадение",Ложь);
	СписокПолей.Вставить("nameFull",ПараметрыПоля);
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("Представление","Сокращенное наименование");
	ПараметрыПоля.Вставить("ТипДанных",Тип("Строка"));
	ПараметрыПоля.Вставить("ТолькоТочноеСовпадение",Ложь);
	СписокПолей.Вставить("nameShort",ПараметрыПоля);
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("Представление","ИНН");
	ПараметрыПоля.Вставить("ТипДанных",Тип("Строка"));
	ПараметрыПоля.Вставить("ТолькоТочноеСовпадение",Ложь);
	СписокПолей.Вставить("inn",ПараметрыПоля);
	
	Возврат СписокПолей;
КонецФункции

#КонецОбласти