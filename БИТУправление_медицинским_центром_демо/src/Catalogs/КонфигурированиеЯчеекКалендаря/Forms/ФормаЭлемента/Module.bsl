#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
   	ЗаполнитьИзОбъектаПоследовательностьОтображенияВФорме();
	
	ВидОтображенияДляОтката = ТекущийОбъект.ВидОтображения;
	
	ОтображениеДанныхГрафикаВЯчейке.Очистить();
	ОтображениеДанныхГрафикаВПримечанииЯчейки.Очистить();
	Для Каждого Строка Из ТекущийОбъект.ОтображениеВидовВремениКабинетовСотрудников Цикл
		Если Строка.ВПримечанииЯчейки Тогда
			ОтображениеДанныхГрафикаВПримечанииЯчейки.Добавить(Строка.Поле,,Строка.ТолькоВПервойСтроке);
		Иначе
			ОтображениеДанныхГрафикаВЯчейке.Добавить(Строка.Поле,,Строка.ТолькоВПервойСтроке);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОтображениеДанныхГрафикаВПримечанииЯчейкиЗначение.СписокВыбора;
	СписокВыбора.Добавить(Перечисления.ПоляОтображенияГрафикаВРасписании.ВидВремениГрафика);
	СписокВыбора.Добавить(Перечисления.ПоляОтображенияГрафикаВРасписании.КабинетСотрудник);
	СписокВыбора.Добавить(Перечисления.ПоляОтображенияГрафикаВРасписании.Филиал);
	
	СписокПолейСортировки = Элементы.СортировкаСубъектовРасписанияПолеСортировки. СписокВыбора;
	СписокПолейСортировки.Добавить(Справочники.Подразделения.ПустаяСсылка(),		Справочники.Подразделения.ПустаяСсылка().Метаданные().Синоним);
	СписокПолейСортировки.Добавить(Справочники.Должности.ПустаяСсылка(),			Справочники.Должности.ПустаяСсылка().Метаданные().Синоним);
	СписокПолейСортировки.Добавить(Справочники.Сотрудники.ПустаяСсылка(),			Справочники.Сотрудники.ПустаяСсылка().Метаданные().Синоним);
	СписокПолейСортировки.Добавить(Справочники.КатегорииВыработки.ПустаяСсылка(),	Справочники.КатегорииВыработки.ПустаяСсылка().Метаданные().Синоним);
	
	Для Каждого ЭлементПоляСортировки Из СписокПолейСортировки Цикл
		
		НовыйЭлементУсловногоОформления    = УсловноеОформление.Элементы.Добавить();
		ЭлементыПолейНовогоЭлемента        = НовыйЭлементУсловногоОформления.Поля.Элементы;
		ЭлементыОтбораНовогоЭлемента    = НовыйЭлементУсловногоОформления.Отбор.Элементы;
		
		НовоеПолеОформления = ЭлементыПолейНовогоЭлемента.Добавить();
		НовоеПолеОформления.Использование    = Истина;
		НовоеПолеОформления.Поле            = Новый ПолеКомпоновкиДанных("СортировкаСубъектовРасписанияПолеСортировки");
		
		ЭлементОтбора = ЭлементыОтбораНовогоЭлемента.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.СортировкаСубъектовРасписания.ПолеСортировки");
		ЭлементОтбора.ПравоеЗначение	= ЭлементПоляСортировки.Значение;
		ЭлементОтбора.Использование		= Истина;
		
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементПоляСортировки.Представление);
	КонецЦикла;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ЦветаСубъектовСтрока Из СправочникОбъект.ЦветаСубъектовРасписания Цикл
		ЦветЯчейки = ЦветаСубъектовСтрока.Цвет.Получить(); 
		Объект.ЦветаСубъектовРасписания[ЦветаСубъектовСтрока.НомерСтроки - 1].ЦветНаФорме = ЦветЯчейки;
		ЦветаСубъектовУстановкаЦветаЯчейки(ЦветЯчейки, ЦветаСубъектовСтрока.ОкрашиваемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаРучнойСортировки Из Объект.СортировкаСубъектовРасписанияРучнойПорядок Цикл
		НоваяСтрокаДляСортировкаСубъектовРасписанияРучнойПорядок = СортировкаСубъектовРасписанияРучнойПорядок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДляСортировкаСубъектовРасписанияРучнойПорядок,СтрокаРучнойСортировки);
		НоваяСтрокаДляСортировкаСубъектовРасписанияРучнойПорядок.ТипЗначения = Строка(ТипЗнч(СтрокаРучнойСортировки.Значение));
	КонецЦикла;
	
	Элементы.ВыводГрупповых.Видимость = РаботаСКлиентамиПереопределяемый.ЕстьФункционалГрупповойЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображенияЯчеек.КлиентУслугиРаздельно") Тогда
		Элементы.ГруппаТаблиц.ТекущаяСтраница = Элементы.КлиентУслугиРаздельно;
		Элементы.Услуги.Видимость = Истина;
	Иначе
		Элементы.ГруппаТаблиц.ТекущаяСтраница = Элементы.КлиентУслугиВместе;
		Элементы.Услуги.Видимость = Ложь;
	КонецЕсли;
	Объект.Наименование = Строка(Объект.ВидОтображения);
	
	Если ОтображениеДанныхВДополнительнойЯчейке.Количество() = 0
		И ОтображениеДанныхВПримечанииДополнительнойЯчейки.Количество() = 0
		И ОтображениеКартинокВДополнительнойЯчейке.Количество() = 0
		И Не ЗначениеЗаполнено(Объект.ЦветФонаДополнительнойКолонки)
	Тогда
		ВыводитьВспомогательнуюКолонкуКалендаря = Ложь;
	Иначе
		ВыводитьВспомогательнуюКолонкуКалендаря = Истина;
	КонецЕсли;
	ВыводитьВспомогательнуюКолонкуКалендаряПриИзменении("");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьИзФормыПоследовательностьОтображенияВОбъекте(ТекущийОбъект);
	
	Для Каждого Последовательность Из ТекущийОбъект.ПоследовательностьОтображения Цикл
		Если Не ЗначениеЗаполнено(Последовательность.РазмещениеВЯчейках) Тогда
			Последовательность.РазмещениеВЯчейках = Перечисления.СпособыОтображенияДополнительныхПолейРасписания.ОсновнаяЯчейка;	
		КонецЕсли;
	КонецЦикла;
	ТекущийОбъект.ОтображениеВидовВремениКабинетовСотрудников.Очистить();	
	Для Каждого ЭлементСписка Из ОтображениеДанныхГрафикаВЯчейке Цикл
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Строка = ТекущийОбъект.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
			Строка.Поле = ЭлементСписка.Значение;
			Строка.ТолькоВПервойСтроке = ЭлементСписка.Пометка; 
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из ОтображениеДанныхГрафикаВПримечанииЯчейки Цикл
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Строка = ТекущийОбъект.ОтображениеВидовВремениКабинетовСотрудников.Добавить();
			Строка.Поле = ЭлементСписка.Значение;
			Строка.ТолькоВПервойСтроке = ЭлементСписка.Пометка; 
			Строка.ВПримечанииЯчейки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЦветаСубъектовЭлементСписка Из Объект.ЦветаСубъектовРасписания Цикл
		ТекущийОбъект.ЦветаСубъектовРасписания[ЦветаСубъектовЭлементСписка.НомерСтроки-1].Цвет = Новый ХранилищеЗначения(ЦветаСубъектовЭлементСписка.ЦветНаФорме);
	КонецЦикла;
	
	ПоляСортировки = Новый Массив;
	Для Каждого СтрокаТЧ Из ТекущийОбъект.СортировкаСубъектовРасписания Цикл
		Если ПоляСортировки.Найти(СтрокаТЧ.ПолеСортировки) = Неопределено 
			И Не ЗначениеЗаполнено(СтрокаТЧ.ПолеСортировки)
			И Не СтрокаТЧ.ПолеСортировки = Неопределено
		Тогда
			ПоляСортировки.Добавить(СтрокаТЧ.ПолеСортировки);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.СортировкаСубъектовРасписания.Очистить();
	Для Каждого ПолеСортировки Из ПоляСортировки Цикл
		Строка = ТекущийОбъект.СортировкаСубъектовРасписания.Добавить();
		Строка.ПолеСортировки = ПолеСортировки;
	КонецЦикла;
	
	ПоляРучнойСортировки = Новый Массив;	
	Для Каждого СтрокаТЗ Из СортировкаСубъектовРасписанияРучнойПорядок Цикл	
		Если СтрокаТЗ.Значение <> Неопределено
			И ПоляРучнойСортировки.Найти(СтрокаТЗ.Значение) = Неопределено
		Тогда
			ПоляРучнойСортировки.Добавить(СтрокаТЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.СортировкаСубъектовРасписанияРучнойПорядок.Очистить();
	Для Каждого ПолеРучнойСортировки Из ПоляРучнойСортировки Цикл
		Строка = ТекущийОбъект.СортировкаСубъектовРасписанияРучнойПорядок.Добавить();
		Строка.Значение = ПолеРучнойСортировки;	
	КонецЦикла;
	СортировкаСубъектовРасписанияРучнойПорядок.Загрузить(ТекущийОбъект.СортировкаСубъектовРасписанияРучнойПорядок.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ЦветаСубъектовРасписанияОкрашиваемыйЭлементПриИзменении(Элемент)
	ЦветаСубъектовУстановкаЦветаЯчейки(Элементы.ЦветаСубъектовРасписания.ТекущиеДанные.ЦветНаФорме, Элементы.ЦветаСубъектовРасписания.ТекущиеДанные.ОкрашиваемыйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("КонфигурированиеЯчеекКалендаряЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ВидОтображенияПриИзменении(Элемент)
	
	Объект.Наименование = Строка(Объект.ВидОтображения);
	
	ПредыдущаяСтраница = Элементы.ГруппаТаблиц.ТекущаяСтраница;
	Если Объект.ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображенияЯчеек.КлиентУслугиРаздельно") Тогда
		Элементы.ГруппаТаблиц.ТекущаяСтраница = Элементы.КлиентУслугиРаздельно;
		Элементы.Услуги.Видимость = Истина;
	Иначе
		Элементы.ГруппаТаблиц.ТекущаяСтраница = Элементы.КлиентУслугиВместе;
		Элементы.Услуги.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьИзОбъектаПоследовательностьОтображенияВФорме();
	
	Если ПредыдущаяСтраница = Элементы.КлиентУслугиРаздельно Тогда
		ПереместитьНаОбъектСервер();
	КонецЕсли;
	
	ВидОтображенияДляОтката = Объект.ВидОтображения;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьНаОбъектСервер()
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ЗаполнитьИзФормыПоследовательностьОтображенияВОбъекте(ТекущийОбъект);	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзФормыПоследовательностьОтображенияВОбъекте(ТекущийОбъект)
	
	ТекущийОбъект.ПоследовательностьОтображения.Очистить();
	
	пчСпособыОтображения = Перечисления.СпособыОтображенияДополнительныхПолейРасписания;
	
	Если ТекущийОбъект.ВидОтображения = Перечисления.ВидыОтображенияЯчеек.КлиентУслугиРаздельно Тогда
		Для Каждого СтрокаКлиента Из Клиент Цикл
			Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();	
			Строка.Ячейка = СтрокаКлиента.Ячейка;
			Строка.ВТойЖеСтроке = СтрокаКлиента.ВТойЖеСтроке;
			Строка.РазмещениеВЯчейках = пчСпособыОтображения.ОсновнаяЯчейка;
		КонецЦикла;
		
		Для Каждого СтрокаУслуг Из Услуги Цикл
			Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();
			Строка.Ячейка = СтрокаУслуг.Ячейка;
			Строка.ВТойЖеСтроке = СтрокаУслуг.ВТойЖеСтроке;
			Строка.РазмещениеВЯчейках = пчСпособыОтображения.ОсновнаяЯчейка;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаУслуг Из ОтображениеДанныхВДополнительнойЯчейке Цикл
		Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();
		Строка.Ячейка = СтрокаУслуг.Ячейка;
		Строка.ВТойЖеСтроке = СтрокаУслуг.ВТойЖеСтроке;
		Строка.РазмещениеВЯчейках = пчСпособыОтображения.ДополнительнаяЯчейка;
	КонецЦикла;
	
	Для Каждого СтрокаУслуг Из ОтображениеДанныхВПримечанииДополнительнойЯчейки Цикл
		Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();
		Строка.Ячейка = СтрокаУслуг.Ячейка;
		Строка.ВТойЖеСтроке = СтрокаУслуг.ВТойЖеСтроке;
		Строка.РазмещениеВЯчейках = пчСпособыОтображения.ПримечаниеКДополнительнойЯчейке;
	КонецЦикла;
	
	Для Каждого СтрокаУслуг Из ОтображениеДанныхВПримечанииЯчейкиЗаявки Цикл
		Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();
		Строка.Ячейка = СтрокаУслуг.Ячейка;
		Строка.ВТойЖеСтроке = СтрокаУслуг.ВТойЖеСтроке;
		Строка.РазмещениеВЯчейках = пчСпособыОтображения.ПримечаниеКЗаявке;
	КонецЦикла;
	
	Для Каждого СтрокаУслуг Из ОтображениеДанныхВОсновнойЯчейке Цикл
		Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();
		Строка.Ячейка = СтрокаУслуг.Ячейка;
		Строка.ВТойЖеСтроке = СтрокаУслуг.ВТойЖеСтроке;
		Строка.РазмещениеВЯчейках = пчСпособыОтображения.ОсновнаяЯчейка;
	КонецЦикла;
	
	Для Каждого СтрокаНастройки Из ОтображениеКартинокВОсновнойЯчейке Цикл
		Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();
		Строка.Ячейка = СтрокаНастройки.Ячейка;
		Строка.РазмещениеВЯчейках = пчСпособыОтображения.КартинкиОсновнойЯчейки;
	КонецЦикла;
	
	Для Каждого СтрокаНастройки Из ОтображениеКартинокВДополнительнойЯчейке Цикл
		Строка = ТекущийОбъект.ПоследовательностьОтображения.Добавить();
		Строка.Ячейка = СтрокаНастройки.Ячейка;
		Строка.РазмещениеВЯчейках = пчСпособыОтображения.КартинкиДополнительнойЯчейки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзОбъектаПоследовательностьОтображенияВФорме()
	
	Клиент.Очистить();
	Услуги.Очистить();
	ОтображениеДанныхВОсновнойЯчейке.Очистить();
	ОтображениеДанныхВДополнительнойЯчейке.Очистить();
	ОтображениеДанныхВПримечанииДополнительнойЯчейки.Очистить();
	ОтображениеДанныхВПримечанииЯчейкиЗаявки.Очистить();
	ОтображениеКартинокВОсновнойЯчейке.Очистить();
	ОтображениеКартинокВДополнительнойЯчейке.Очистить();
	
	пчСпособыОтображения = Перечисления.СпособыОтображенияДополнительныхПолейРасписания;
	СоответствиеПолейФормы = Новый Соответствие;
	СоответствиеПолейФормы.Вставить(пчСпособыОтображения.ДополнительнаяЯчейка,			  ОтображениеДанныхВДополнительнойЯчейке);
	СоответствиеПолейФормы.Вставить(пчСпособыОтображения.ПримечаниеКДополнительнойЯчейке, ОтображениеДанныхВПримечанииДополнительнойЯчейки);
	СоответствиеПолейФормы.Вставить(пчСпособыОтображения.ПримечаниеКЗаявке,				  ОтображениеДанныхВПримечанииЯчейкиЗаявки);
	СоответствиеПолейФормы.Вставить(пчСпособыОтображения.КартинкиОсновнойЯчейки,		  ОтображениеКартинокВОсновнойЯчейке);
	СоответствиеПолейФормы.Вставить(пчСпособыОтображения.КартинкиДополнительнойЯчейки,	  ОтображениеКартинокВДополнительнойЯчейке);
	
	Для Каждого Строка Из Объект.ПоследовательностьОтображения Цикл
		Если Строка.РазмещениеВЯчейках = пчСпособыОтображения.ОсновнаяЯчейка
			Или Не ЗначениеЗаполнено(Строка.РазмещениеВЯчейках)
		Тогда
			Если Объект.ВидОтображения = Перечисления.ВидыОтображенияЯчеек.КлиентУслугиРаздельно Тогда
				Если Строка.Ячейка.Родитель = Справочники.ЯчейкиКалендаря.Клиент Тогда
					СтрокаКлиента = Клиент.Добавить();
					СтрокаКлиента.Ячейка = Строка.Ячейка;
					СтрокаКлиента.ВТойЖеСтроке = Строка.ВТойЖеСтроке;
				ИначеЕсли Строка.Ячейка.Родитель <> Справочники.ЯчейкиКалендаря.Клиент Тогда
					СтрокаУслуги = Услуги.Добавить();
					СтрокаУслуги.Ячейка = Строка.Ячейка;
					СтрокаУслуги.ВТойЖеСтроке = Строка.ВТойЖеСтроке;		
				КонецЕсли;
			ИначеЕсли Объект.ВидОтображения = Перечисления.ВидыОтображенияЯчеек.КлиентУслугиВместе Тогда
				СтрокаКлиента = ОтображениеДанныхВОсновнойЯчейке.Добавить();
				СтрокаКлиента.Ячейка = Строка.Ячейка;
				СтрокаКлиента.ВТойЖеСтроке = Строка.ВТойЖеСтроке;
			КонецЕсли;
		Иначе
			СтрокаНастройки = СоответствиеПолейФормы.Получить(Строка.РазмещениеВЯчейках).Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНастройки, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеДанныхГрафикаВЯчейкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	             
	Если ЭтаФорма[Элемент.Имя].Количество() >= 3 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеДанныхГрафикаВЯчейкеПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтображениеДанныхГрафикаВЯчейке.ТекущиеДанные;
	Если ТекущиеДанные.Значение = ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.Время")
		И ТекущиеДанные.Пометка
	Тогда
	    ОтображениеДанныхГрафикаВЯчейке.НайтиПоИдентификатору(Элементы.ОтображениеДанныхГрафикаВЯчейке.ТекущаяСтрока).Пометка = Ложь;
	КонецЕсли;
	Элементы.ОтображениеДанныхГрафикаВЯчейке.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеДанныхГрафикаВПримечанииЯчейкиПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтображениеДанныхГрафикаВЯчейке.ТекущиеДанные;
	Если ТекущиеДанные.Значение = ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.Время")
		И ТекущиеДанные.Пометка
	Тогда
		ТекущиеДанные.Пометка = Ложь;
	КонецЕсли;
	Элементы.ОтображениеДанныхГрафикаВЯчейке.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВспомогательнуюКолонкуКалендаряПриИзменении(Элемент)
	
	Элементы.ГруппаНиз.Видимость					 = ВыводитьВспомогательнуюКолонкуКалендаря;
	Элементы.ШиринаДополнительногоПоля.Видимость	 = ВыводитьВспомогательнуюКолонкуКалендаря;						
	Элементы.ЦветФонаДополнительнойКолонки.Видимость = ВыводитьВспомогательнуюКолонкуКалендаря;
	
	Если Не ВыводитьВспомогательнуюКолонкуКалендаря Тогда
		Объект.ЦветФонаДополнительнойКолонки = Неопределено;
		Объект.ШиринаДополнительногоПоля	 = 0;
		ОтображениеДанныхВДополнительнойЯчейке.Очистить();
		ОтображениеДанныхВПримечанииДополнительнойЯчейки.Очистить();
		ОтображениеКартинокВДополнительнойЯчейке.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСубъектовРасписанияПриАктивизацииСтроки(Элемент)
	
	Элементы.ГруппаСортировкаСубъектовРасписанияРучнойПорядок.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.СортировкаСубъектовРасписанияТЗ.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	СортировкаСубъектовРасписанияТЗ.Очистить();
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Для Каждого СтрокаТаблицыРучнойСортировки Из СортировкаСубъектовРасписанияРучнойПорядок Цикл
			Если ТипЗнч(Элемент.Текущиеданные.ПолеСортировки) = ТипЗнч(СтрокаТаблицыРучнойСортировки.Значение) Тогда
				СтрокаСортировкиТЗ = СортировкаСубъектовРасписанияТЗ.Добавить();
				СтрокаСортировкиТЗ.НомерСтроки = СортировкаСубъектовРасписанияТЗ.Индекс(СтрокаСортировкиТЗ) + 1;
				СтрокаСортировкиТЗ.Значение = СтрокаТаблицыРучнойСортировки.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦветаСубъектовУстановкаЦветаЯчейки(ЦветНаФорме, ОкрашиваемыйЭлемент)
	НовыйЭлементУсловногоОформления	= УсловноеОформление.Элементы.Добавить();
	ЭлементыПолейНовогоЭлемента		= НовыйЭлементУсловногоОформления.Поля.Элементы;
	ЭлементыОтбораНовогоЭлемента	= НовыйЭлементУсловногоОформления.Отбор.Элементы;
	
	НовоеПолеОформления = ЭлементыПолейНовогоЭлемента.Добавить();
	НовоеПолеОформления.Использование	= Истина;
	НовоеПолеОформления.Поле			= Новый ПолеКомпоновкиДанных("ЦветаСубъектовРасписанияЦветНаФорме");
	
	ЭлементОтбора = ЭлементыОтбораНовогоЭлемента.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Объект.ЦветаСубъектовРасписания.ЦветНаФорме");
	ЭлементОтбора.ПравоеЗначение	= ЦветНаФорме;
	ЭлементОтбора.Использование		= Истина;
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,9,Истина));
	
	Если ОкрашиваемыйЭлемент Тогда
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНаФорме);
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240,240,240));
	Иначе
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,0,0));
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветНаФорме);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветаСубъектовРасписанияЦветНаФормеПриИзменении(Элемент)
	ЦветаСубъектовУстановкаЦветаЯчейки(Элементы.ЦветаСубъектовРасписания.ТекущиеДанные.ЦветНаФорме, Элементы.ЦветаСубъектовРасписания.ТекущиеДанные.ОкрашиваемыйЭлемент);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого ЦветаСубъектовСтрока Из ТекущийОбъект.ЦветаСубъектовРасписания Цикл
		ЦветЯчейки = ЦветаСубъектовСтрока.Цвет.Получить(); 
		Объект.ЦветаСубъектовРасписания[ЦветаСубъектовСтрока.НомерСтроки - 1].ЦветНаФорме = ЦветЯчейки;
		ЦветаСубъектовУстановкаЦветаЯчейки(ЦветЯчейки, ЦветаСубъектовСтрока.ОкрашиваемыйЭлемент);
	КонецЦикла;
	
	ОбновитьПовторноИспользуемыеЗначения(); // Для обновления визуальных настроек формирования журнала записи.
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСубъектовРасписанияПередУдалением(Элемент, Отказ)
	Если Объект.СортировкаСубъектовРасписания.НайтиСтроки(Новый Структура("ПолеСортировки", Элемент.Текущиеданные.ПолеСортировки)).Количество() <= 1 Тогда
		МассивСтрокРучнойСортировкиКУдалению = СортировкаСубъектовРасписанияРучнойПорядок.НайтиСтроки(Новый Структура("ТипЗначения", Строка(ТипЗнч(Элемент.Текущиеданные.ПолеСортировки))));
		Для Каждого СтрокаКУдалению Из МассивСтрокРучнойСортировкиКУдалению Цикл
			СортировкаСубъектовРасписанияРучнойПорядок.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСубъектовРасписанияТЗПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение) Тогда
		Элемент.ТекущиеДанные.Значение = Элементы.СортировкаСубъектовРасписания.ТекущиеДанные.ПолеСортировки;
		Элемент.ТекущиеДанные.НомерСтроки = СортировкаСубъектовРасписанияТЗ.Индекс(Элемент.ТекущиеДанные) + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСубъектовРасписанияТЗПередУдалением(Элемент, Отказ)
	
	НомерНеуникальногоЗначенияСтроки = СортировкаПолучитьНомерНеуникальнойСтроки(СортировкаСубъектовРасписанияТЗ, Элемент.ТекущиеДанные);
	СтрокаВТЧ = СортировкаПолучитьСтрокуПоНомеруИЗначению(СортировкаСубъектовРасписанияРучнойПорядок, НомерНеуникальногоЗначенияСтроки, Элемент.ТекущиеДанные.Значение);
	
	СортировкаСубъектовРасписанияРучнойПорядок.Удалить(СтрокаВТЧ);
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПереместитьВверх(Команда)
	
	ТекущаяСтрока = Элементы.СортировкаСубъектовРасписанияТЗ.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено И СортировкаСубъектовРасписанияТЗ.Индекс(ТекущаяСтрока) > 0 Тогда		
		ИндексТекущейСтроки	= СортировкаСубъектовРасписанияТЗ.Индекс(ТекущаяСтрока);
		ПредыдущаяСтрока	= СортировкаСубъектовРасписанияТЗ[ИндексТекущейСтроки-1];
		СортировкаСдвинутьСтрокуВТаблицахВниз(ПредыдущаяСтрока, ТекущаяСтрока);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПереместитьВниз(Команда)
	
	ТекущаяСтрока = Элементы.СортировкаСубъектовРасписанияТЗ.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И СортировкаСубъектовРасписанияТЗ.Индекс(ТекущаяСтрока) < СортировкаСубъектовРасписанияТЗ.Количество() - 1 Тогда		
		ИндексТекущейСтроки	= СортировкаСубъектовРасписанияТЗ.Индекс(ТекущаяСтрока);
		СледующаяСтрока		= СортировкаСубъектовРасписанияТЗ[ИндексТекущейСтроки+1];
		СортировкаСдвинутьСтрокуВТаблицахВниз(ТекущаяСтрока,СледующаяСтрока);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСдвинутьСтрокуВТаблицахВниз(ВерхняяСтрока, НижняяСтрока)
	
	ИндексВерхнейСтроки	= СортировкаСубъектовРасписанияТЗ.Индекс(ВерхняяСтрока);	
	ВерхняяСтрока.НомерСтроки	= ВерхняяСтрока.НомерСтроки + 1;
	НижняяСтрока.НомерСтроки 	= НижняяСтрока.НомерСтроки - 1;
	
	НомерНеуникальногоЗначенияВерхнейСтроки	= СортировкаПолучитьНомерНеуникальнойСтроки(СортировкаСубъектовРасписанияТЗ, ВерхняяСтрока);
	НомерНеуникальногоЗначенияНижнейСтроки	= СортировкаПолучитьНомерНеуникальнойСтроки(СортировкаСубъектовРасписанияТЗ, НижняяСтрока);
	
	ВерхняяСтрокаВТЧ	= СортировкаПолучитьСтрокуПоНомеруИЗначению(СортировкаСубъектовРасписанияРучнойПорядок, НомерНеуникальногоЗначенияВерхнейСтроки, ВерхняяСтрока.Значение);
	НижняяСтрокаВТЧ		= СортировкаПолучитьСтрокуПоНомеруИЗначению(СортировкаСубъектовРасписанияРучнойПорядок, НомерНеуникальногоЗначенияНижнейСтроки, НижняяСтрока.Значение);
	
	ИндексВерхнейСтрокиВТЧ	= СортировкаСубъектовРасписанияРучнойПорядок.Индекс(ВерхняяСтрокаВТЧ);
	ИндексНижнейСтрокиВТЧ	= СортировкаСубъектовРасписанияРучнойПорядок.Индекс(НижняяСтрокаВТЧ);
	
	СортировкаСубъектовРасписанияТЗ.Сдвинуть(ИндексВерхнейСтроки,1);
	СортировкаСубъектовРасписанияРучнойПорядок.Сдвинуть(ИндексВерхнейСтрокиВТЧ, ИндексНижнейСтрокиВТЧ-ИндексВерхнейСтрокиВТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСубъектовРасписанияТЗПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НоваяСтрокаТабличнойЧастиРучнойСортировки = СортировкаСубъектовРасписанияРучнойПорядок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТабличнойЧастиРучнойСортировки,Элемент.ТекущиеДанные);
			НоваяСтрокаТабличнойЧастиРучнойСортировки.ТипЗначения = Строка(ТипЗнч(Элементы.СортировкаСубъектовРасписания.Текущиеданные.ПолеСортировки));
		Иначе	 
			Если Не СортировкаВыбранноеЗначение.Значение = Элемент.ТекущиеДанные.Значение Тогда					
				СтрокаДляИзменения = СортировкаПолучитьСтрокуПоНомеруИЗначению(СортировкаСубъектовРасписанияРучнойПорядок, СортировкаВыбранноеЗначение.Номер, СортировкаВыбранноеЗначение.Значение);
				СтрокаДляИзменения.Значение = Элемент.ТекущиеДанные.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СортировкаПолучитьСтрокуПоНомеруИЗначению(ТаблицаСортировки, Номер, Значение)
	
	НомерНеуникальногоЗначения = 1;
	
	Для Каждого СтрокаТаблицыСортировки Из ТаблицаСортировки Цикл
		Если СтрокаТаблицыСортировки.Значение = Значение Тогда
			Если НомерНеуникальногоЗначения = Номер Тогда
				Возврат СтрокаТаблицыСортировки;
			КонецЕсли;
			НомерНеуникальногоЗначения = НомерНеуникальногоЗначения + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция СортировкаПолучитьНомерНеуникальнойСтроки(ТаблицаСортировки, Строка)
	
	НомерНеуникальногоЗначения = 1;
	
	Для Каждого СтрокаТаблицыСортировки Из ТаблицаСортировки Цикл
		Если СтрокаТаблицыСортировки.Значение = Строка.Значение Тогда
			Если СтрокаТаблицыСортировки = Строка Тогда
				Возврат НомерНеуникальногоЗначения;
			КонецЕсли;
			НомерНеуникальногоЗначения = НомерНеуникальногоЗначения + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура СортировкаСубъектовРасписанияТЗПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда		
		СортировкаВыбранноеЗначение = Новый Структура;		
		НомерНеуникальногоЗначения = СортировкаПолучитьНомерНеуникальнойСтроки(СортировкаСубъектовРасписанияТЗ, Элемент.ТекущиеДанные);		
		СортировкаВыбранноеЗначение.Вставить("Значение",Элемент.ТекущиеДанные.Значение);
		СортировкаВыбранноеЗначение.Вставить("Номер",НомерНеуникальногоЗначения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветаСубъектовРасписанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.ЦветаСубъектовРасписания.ТекущиеДанные.Назначение = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
