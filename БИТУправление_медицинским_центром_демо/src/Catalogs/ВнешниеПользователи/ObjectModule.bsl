#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ИдентификаторПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") И
	     Пользователи.ПользовательПоИдентификаторуСуществует(ИдентификаторПользователяИБ, Ссылка) Тогда
	     
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Один пользователь информационной базы
		                                                             |может быть связан только с одним пользователем или внешним пользователем.'"), , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектАвторизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для внешнего пользователя не установлен объект авторизации.'"), , , , Отказ);
		Возврат;
	Иначе
		Если ВнешниеПользователи.ОбъектАвторизацииИспользуется(ОбъектАвторизации, Ссылка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Объект авторизации уже используется для другого внешнего пользователя.'"), , , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка, что объект авторизации не изменен.
	Если НЕ ЭтоНовый() Тогда
		СтарыйОбъектАвторизации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ОбъектАвторизации");
		Если ЗначениеЗаполнено(СтарыйОбъектАвторизации) И СтарыйОбъектАвторизации <> ОбъектАвторизации Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Объект информационной базы нельзя изменять.'"), , , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка ОбменДанными.Загрузка должна выполняться после кода выше.
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	// Обновление состава автоматической группы "Все внешние пользователи".
	ИзмененныеВнешниеПользователи = Неопределено;
	ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи, ИзмененныеВнешниеПользователи);
	ИзмененныеВнешниеПользователи.Добавить(Ссылка);
	ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи, ЕстьОшибки);
		
	// Обновление состава автоматической группы <все объекты авторизации одного типа> (если есть).
	Если ЗначениеЗаполнено(ОбъектАвторизации) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	ГруппыВнешнихПользователей.ВсеОбъектыАвторизации
		|	И ТИПЗНАЧЕНИЯ(ГруппыВнешнихПользователей.ТипОбъектовАвторизации) = &ТипОбъектовАвторизации");
		Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипЗнч(ОбъектАвторизации));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(Выборка.Ссылка, ИзмененныеВнешниеПользователи);
			ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи, ЕстьОшибки);
		КонецЕсли;
	КонецЕсли;
		
	// Обновление состава группы нового внешнего пользователя (если задана).
	Если ДополнительныеСвойства.Свойство("ГруппаНовогоВнешнегоПользователя") И
	     ЗначениеЗаполнено(ДополнительныеСвойства.ГруппаНовогоВнешнегоПользователя) Тогда
		
		ОбъектГруппы = ДополнительныеСвойства.ГруппаНовогоВнешнегоПользователя.ПолучитьОбъект();
		ОбъектГруппы.Состав.Добавить().ВнешнийПользователь = Ссылка;
		ОбъектГруппы.Записать();
		ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(ОбъектГруппы.Ссылка, ИзмененныеВнешниеПользователи);
		ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи, ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ДополнительныеСвойства.Вставить("ЕстьОшибки");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если Пользователи.ПользовательИБСуществует(ИдентификаторПользователяИБ) Тогда
		
		Отказ = НЕ Пользователи.УдалитьПользователяИБ(ИдентификаторПользователяИБ);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти