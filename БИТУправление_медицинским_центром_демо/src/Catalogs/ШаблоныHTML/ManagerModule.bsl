#Область ПрограммныйИнтерфейс

// Экспортировать шаблоны в файл на диске.
//
// Параметры:
//  ШаблоныКВыгрузке - Массив - выгружаемые шаблоны.
//  Путь			 - Строка - путь к файлу для сохранения.
//
Процедура Экспортировать(ШаблоныКВыгрузке, Путь) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(Путь);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл не выбран'"));
		Возврат;
	КонецПопытки;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Экспортируем объект шаблона осмотра
	ЗаписьXML.ЗаписатьНачалоЭлемента("Корневой");
	ЗаписьXML.ЗаписатьАтрибут("Конфигурация", СтрШаблон("%1 (%2)", Метаданные.Синоним, Метаданные.Версия));
	
	ВыгружаемыеШаблоны	= Новый Массив;
	ИерархияШаблонов	= Новый Массив;
	ВычисляемыеЗначения = Новый Массив;
	ВычисляемыеИерархия = Новый Массив;
	Иерархия			= Новый Массив;
	ПараметрыШаблона	= Новый Массив;
	ТаблицыШаблона		= Новый Массив;
	ШаблоныЗаполнения	= Новый Массив;
	КлассификаторыЕГИСЗ	= Новый Массив;
	ДействияМедосмотра	= Новый Массив;
	ОграниченияДействий	= Новый Массив;
	Специализации		= Новый Массив;
	
	Для Каждого ШаблонКВыгрузке Из ШаблоныКВыгрузке Цикл
		
		ШаблонИПодчиненные = ПолучитьДочерниеЭлементыШаблонаОсмотра(ШаблонКВыгрузке);
		ШаблонИПодчиненные.Добавить(ШаблонКВыгрузке);
		
		// Получаем массив ссылок на параметры шаблона осмотра
		Для Каждого ШаблонОсмотра Из ШаблонИПодчиненные Цикл
		
			ВыгружаемыеШаблоны.Добавить(ШаблонОсмотра);
			
			Если Не ШаблонОсмотра.ЭтоГруппа Тогда
				
				Для Каждого СтрокаПараметрШаблона Из ШаблонОсмотра.СоответствияПараметрам Цикл
					
					ПараметрШаблона = СтрокаПараметрШаблона.Параметр;
					Если ПараметрыШаблона.Найти(ПараметрШаблона) = Неопределено
						И ЗначениеЗаполнено(ПараметрШаблона)
					Тогда
						
						ПараметрыШаблона.Добавить(ПараметрШаблона);
						
						Родители = ПолучитьИерархиюПараметраПриема(ПараметрШаблона);
						
						Для Каждого Строка Из Родители Цикл
							Если Иерархия.Найти(Строка.Ссылка) = Неопределено
								И ЗначениеЗаполнено(Строка.Ссылка)
							Тогда
								Иерархия.Добавить(Строка.Ссылка);
							КонецЕсли;
						КонецЦикла;
						
						Если Не ПараметрШаблона.ЭтоГруппа
							И ПараметрШаблона.ИспользуетсяВычисляемоеЗначение
							И ЗначениеЗаполнено(ПараметрШаблона.ЗначениеПоУмолчанию)
						Тогда
							ВычисляемыеЗначения.Добавить(ПараметрШаблона.ЗначениеПоУмолчанию);
							Если ЗначениеЗаполнено(ПараметрШаблона.ЗначениеПоУмолчанию.Родитель) Тогда
								ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(ВычисляемыеИерархия, ПараметрШаблона.ЗначениеПоУмолчанию.Родитель);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Метаданные.Справочники.Найти("ДействияМедосмотра") <> Неопределено Тогда
						ДействиеМедосмотра = СтрокаПараметрШаблона.ДействиеМедосмотра;
						Если ЗначениеЗаполнено(ДействиеМедосмотра)
							И ДействияМедосмотра.Найти(ДействиеМедосмотра) = Неопределено
						Тогда
							ДействияМедосмотра.Добавить(ДействиеМедосмотра);
							Если ЗначениеЗаполнено(ДействиеМедосмотра.ОграничениеДействия)
								И ОграниченияДействий.Найти(ДействиеМедосмотра.ОграничениеДействия) = Неопределено
							Тогда
								ОграниченияДействий.Добавить(ДействиеМедосмотра.ОграничениеДействия);
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ДействиеМедосмотра.Специализация)
								И Специализации.Найти(ДействиеМедосмотра.Специализация) = Неопределено
							Тогда
								Специализации.Добавить(ДействиеМедосмотра.Специализация);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Получаем таблицы параметров шаблона
				Если ШаблонОсмотра.ВидШаблона = Перечисления.ВидыШаблонов.HTMLШаблон Тогда
					
					ТаблицыПараметровШаблона = ПолучитьТаблицыПараметровШаблона(ШаблонОсмотра.ТекстHTML);
					Для Каждого ТаблицаШаблона Из ТаблицыПараметровШаблона Цикл
						Если ТаблицыШаблона.Найти(ТаблицаШаблона) = Неопределено Тогда
							ТаблицыШаблона.Добавить(ТаблицаШаблона);
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли ШаблонОсмотра.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
					
					Для Каждого СтрокаПараметрШаблона Из ШаблонОсмотра.СоответствияТаблицамШаблонов Цикл
						
						ПараметрШаблона = СтрокаПараметрШаблона.Параметр;
						Если ПараметрыШаблона.Найти(ПараметрШаблона) = Неопределено
							И ЗначениеЗаполнено(ПараметрШаблона)
						Тогда
							
							ПараметрыШаблона.Добавить(ПараметрШаблона);
							
							Родители = ПолучитьИерархиюПараметраПриема(ПараметрШаблона);
							
							Для Каждого Строка Из Родители Цикл
								Если Иерархия.Найти(Строка.Ссылка) = Неопределено
									И ЗначениеЗаполнено(Строка.Ссылка)
								Тогда
									Иерархия.Добавить(Строка.Ссылка);
								КонецЕсли;
							КонецЦикла;
							
							Если Не ПараметрШаблона.ЭтоГруппа
								И ПараметрШаблона.ИспользуетсяВычисляемоеЗначение
								И ЗначениеЗаполнено(ПараметрШаблона.ЗначениеПоУмолчанию)
							Тогда
								ВычисляемыеЗначения.Добавить(ПараметрШаблона.ЗначениеПоУмолчанию);
							КонецЕсли;
						КонецЕсли;
						
						ТаблицаШаблона = СтрокаПараметрШаблона.ТаблицаШаблонов;
						Если ТаблицыШаблона.Найти(ТаблицаШаблона) = Неопределено
							И ЗначениеЗаполнено(ТаблицаШаблона)
						Тогда
							ТаблицыШаблона.Добавить(ТаблицаШаблона);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Получаем список ссылок на шаблоны заполнения шаблона осмотра.
				ВыбШаблоныЗаполнения = Справочники.ШаблоныЗаполненияОсмотра.Выбрать(,ШаблонКВыгрузке);
				Пока ВыбШаблоныЗаполнения.Следующий() Цикл
					Если ШаблоныЗаполнения.Найти(ВыбШаблоныЗаполнения.Ссылка) = Неопределено Тогда
						ШаблоныЗаполнения.Добавить(ВыбШаблоныЗаполнения.Ссылка)
					КонецЕсли;
				КонецЦикла;
				
				Если Не ШаблонОсмотра.ЭтоГруппа Тогда
					мсВычисляемыеБлоки = ПолучитьМассивВычисляемыхБлоков(ШаблонОсмотра.ТекстHTML);
					Для Каждого элВычБлок Из мсВычисляемыеБлоки Цикл
						Если ВычисляемыеЗначения.Найти(элВычБлок) = Неопределено Тогда
							ВычисляемыеЗначения.Добавить(элВычБлок);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ИерархияШаблона = ПолучитьИерархиюШаблонаОсмотра(ШаблонОсмотра);
			Для Каждого ГруппаШаблонов Из ИерархияШаблона Цикл
				Если ЗначениеЗаполнено(ГруппаШаблонов)
					И ИерархияШаблонов.Найти(ГруппаШаблонов) = Неопределено
				Тогда
					ИерархияШаблонов.Добавить(ГруппаШаблонов);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаКлассификаторов = ТаблицаОбъектовКлассификатора(ВыгружаемыеШаблоны, КлассификаторыЕГИСЗ);
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОбъектыКлассификаторов");
	ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(ТаблицаКлассификаторов));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Экспортируем объекты
	ПакетыСоставныхФраз = ПолучитьПакетыСоставныхФразВПараметреШаблона(ПараметрыШаблона);
	СоставныеФразы = ПолучитьСоставныеФразы(ПараметрыШаблона, ПакетыСоставныхФраз);
	ДопЗначенияХарактеристик = ПолучитьДопЗначенияХарактеристик(ПараметрыШаблона);
	
	ЭкспортОбъектов(ЗаписьXML, ВыгружаемыеШаблоны,		 "Шаблон");						// Шаблоны осмотров
	ЭкспортОбъектов(ЗаписьXML, ИерархияШаблонов,		 "ГруппаШаблонов");				// Иерархия шаблонов осмотров
	ЭкспортОбъектов(ЗаписьXML, ПараметрыШаблона,		 "ПараметрШаблона");			// Параметры шаблона осмотра
	ЭкспортОбъектов(ЗаписьXML, ТаблицыШаблона,			 "ТаблицаПараметровШаблона");	// Таблицы параметров шаблона осмотра
	ЭкспортОбъектов(ЗаписьXML, Иерархия,				 "Иерархия");					// Иерархия параметров
	ЭкспортОбъектов(ЗаписьXML, ВычисляемыеЗначения,		 "ВычисляемоеЗначение");		// Вычисляемые значения параметров шаблона осмотра
	ЭкспортОбъектов(ЗаписьXML, ВычисляемыеИерархия,		 "ВычисляемоеЗначениеГруппа");	// Иерархия вычисляемых значений параметров шаблона осмотра
	ЭкспортОбъектов(ЗаписьXML, ПакетыСоставныхФраз,		 "ПакетыСоставныхФраз");		// Пакеты фраз, упомянутые в параметрах
	ЭкспортОбъектов(ЗаписьXML, СоставныеФразы,			 "СоставнаяФраза");				// Составные фразы
	ЭкспортОбъектов(ЗаписьXML, ДопЗначенияХарактеристик, "ЗначениеПараметра");			// Дополнительные значения характеристик
	ЭкспортОбъектов(ЗаписьXML, ШаблоныЗаполнения,		 "ШаблонЗаполнения");			// Объекты шаблонов заполнения шаблона осмотра
	ЭкспортОбъектов(ЗаписьXML, КлассификаторыЕГИСЗ,		 "ЭлементКлассификатора");		// Классификаторы ЕГИСЗ
	ЭкспортОбъектов(ЗаписьXML, ДействияМедосмотра,		 "ДействиеМедосмотра");			// Действия медосмотров из справок
	ЭкспортОбъектов(ЗаписьXML, ОграниченияДействий,		 "ОграничениеДействия");		// Ограничения действий медосмотров
	ЭкспортОбъектов(ЗаписьXML, Специализации,			 "Специализация");				// Специализации
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

Процедура ЭкспортОбъектов(ЗаписьXML, МассивВыгружаемыхЭлементов, ИмяЭлемента)
	
	Если МассивВыгружаемыхЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаОбъектов = ДопСерверныеФункции.ИмяСсылочногоТипа(МассивВыгружаемыхЭлементов[0]);
	
	Для Каждого ВыгружаемыйЭлемент Из МассивВыгружаемыхЭлементов Цикл
		ЭлементОбъект = ВыгружаемыйЭлемент.ПолучитьОбъект();
		
		Если ИмяТипаОбъектов = "Справочник.ШаблоныHTML" Тогда
			Если Не ЭлементОбъект.ЭтоГруппа Тогда
				ЭлементОбъект.Специализация = Справочники.КатегорииВыработки.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ЭлементОбъект = Неопределено
			И (ИмяТипаОбъектов = "ПланВидовХарактеристик.ПараметрыHTML"
				Или ИмяТипаОбъектов = "Справочник.ТаблицыШаблоновПриема")
		Тогда
			Продолжить;
		ИначеЕсли ИмяТипаОбъектов = "Справочник.ДействияМедосмотра"
			И ЭлементОбъект <> Неопределено
		Тогда
			ЭлементОбъект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
		ЗаписатьXML(ЗаписьXML, ЭлементОбъект);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЭталонныйDOMДокументСериализованногоОбъекта(Элемент, РеквизитыЭлемента, ТабличныеЧастиИРеквизиты)
	
	ЗаписьXMLШаблоны = Новый ЗаписьXML;
	ЗаписьXMLШаблоны.УстановитьСтроку();
	ЗаписатьXML(ЗаписьXMLШаблоны, Элемент);
	ПостроительDOM = Новый ПостроительDOM;
	СтрокаЭталонногоXML = ЗаписьXMLШаблоны.Закрыть();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаЭталонногоXML);
	
	DOMДокументЭталоногоОбъекта = ПостроительDOM.Прочитать(ЧтениеXML);
	ОчиститьИмяПредопределенногоВЭталонномDOM(DOMДокументЭталоногоОбъекта);
	
	ЭлементыБазы = Метаданные.НайтиПоТипу(ТипЗнч(Элемент));
	РеквизитыЭлемента = Новый ТаблицаЗначений;
	РеквизитыЭлемента.Колонки.Добавить("ИмяРеквизита");
	РеквизитыЭлемента.Колонки.Добавить("Тип");
	Для Каждого ЭлементБазы ИЗ ЭлементыБазы.Реквизиты Цикл
		
		СтрокаРеквизитов = РеквизитыЭлемента.Добавить();
		СтрокаРеквизитов.ИмяРеквизита = ЭлементБазы.Имя;
		СтрокаРеквизитов.Тип = ЭлементБазы.Тип;
			
	КонецЦикла;
	РеквизитыЭлемента.Индексы.Добавить("ИмяРеквизита");
	Если ЭлементыБазы.ТабличныеЧасти.Количество() < 0 Тогда
		ТабличныеЧастиИРеквизиты = Неопределено;
	Иначе
		ТабличныеЧастиЭлемента = Новый ТаблицаЗначений;
		ТабличныеЧастиЭлемента.Колонки.Добавить("ИмяТабличнойЧасти");
		ТабличныеЧастиЭлемента.Колонки.Добавить("ТаблицаРеквизитовИТипов");
		
		Для Каждого ЭлементБазы ИЗ ЭлементыБазы.ТабличныеЧасти Цикл
			СтрокаТабличныхЧасти = ТабличныеЧастиЭлемента.Добавить();
			СтрокаТабличныхЧасти.ИмяТабличнойЧасти = ЭлементБазы.Имя;
			ТаблицаРеквизитовИТипов = Новый ТаблицаЗначений;
			ТаблицаРеквизитовИТипов.Колонки.Добавить("Реквизит");
			ТаблицаРеквизитовИТипов.Колонки.Добавить("Тип", Новый ОписаниеТипов);
			Для Каждого Реквизит ИЗ ЭлементБазы.Реквизиты Цикл
				НоваяСтрока = ТаблицаРеквизитовИТипов.Добавить();
				НоваяСтрока.Реквизит = Реквизит.Имя;
				НоваяСтрока.Тип = Реквизит.Тип;
			КонецЦикла;
			ТаблицаРеквизитовИТипов.Индексы.Добавить("Реквизит");
			СтрокаТабличныхЧасти.ТаблицаРеквизитовИТипов = ТаблицаРеквизитовИТипов;
		КонецЦикла;
		ТабличныеЧастиИРеквизиты = ТабличныеЧастиЭлемента;
	КонецЕсли;
	ТабличныеЧастиЭлемента.Индексы.Добавить("ИмяТабличнойЧасти");
	Возврат DOMДокументЭталоногоОбъекта 
		
КонецФункции

Процедура ОчиститьИмяПредопределенногоВЭталонномDOM(ДокументDOM)
	
	Для Каждого ДочернийУзел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла = "PredefinedDataName" Тогда
			ДочернийУзел.ТекстовоеСодержимое = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяПредопределенногоПараметраШаблонаПриема()
	
	// Нужно вернуть любое имя предопределенного элемента конфигурации, если в конфигурации (не в базе) заложены.
	ИмяПредопределенного = "ПрофпатологЗаключение";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПланыВидовХарактеристик.ПараметрыHTML, ИмяПредопределенного) Тогда
		Возврат ИмяПредопределенного;
	КонецЕсли;
	
	ИмяПредопределенного = "НомерНеделиБеременности";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПланыВидовХарактеристик.ПараметрыHTML, ИмяПредопределенного) Тогда
		Возврат ИмяПредопределенного;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСтруктуруПарамтеровДляПроверитьИЗаменитьРеквизитыНаЭталонные()
	
	СтруктураПараметров = Новый Структура;
	ПропускаемыеТипы = Новый Массив;
	ПропускаемыеТипы.Добавить(Тип("Строка"));
	ПропускаемыеТипы.Добавить(Тип("Число"));
	ПропускаемыеТипы.Добавить(Тип("Булево"));
	ПропускаемыеТипы.Добавить(Тип("ХранилищеЗначения"));
	ПропускаемыеТипы.Добавить(Тип("ПеречислениеСсылка.ВидыШаблонов"));
	ПропускаемыеТипы.Добавить(Тип("ПеречислениеСсылка.ПолучателиВычисляемогоЗначения"));
	ПропускаемыеТипы.Добавить(Тип("ПеречислениеСсылка.ВидыКлассификаторовМинЗдрава"));
	ПропускаемыеТипы.Добавить(Тип("ПеречислениеСсылка.КодировкаПолейЭМД"));
	ПропускаемыеТипы.Добавить(Тип("ПеречислениеСсылка.РежимыНастройкиДоступностиРоли"));
	ПропускаемыеТипы.Добавить(Тип("ПеречислениеСсылка.РолиПодписей"));
	
	СтруктураПараметров.Вставить("ПропускаемыеТипы", ПропускаемыеТипы);
	СтруктураПараметров.Вставить("Пространства", Новый Соответствие);
	Возврат СтруктураПараметров;
	
КонецФункции

// Осуществляет проверку существования типа Реквизитов, а также в случае если должна быть ссылка в параметре, а ее нет, то заменяет на пустую. 
Процедура ПроверитьИЗаменитьРеквизитыНаЭталонные(ТекЭлементDOM, РезультатПоиска = Неопределено, ЭталоноеЗначение = Неопределено, СтруктураПараметров, МассивДобавленных)
	
	ТекЭлементDOMИмяУзла = ТекЭлементDOM.ИмяУзла;
	Если ТекЭлементDOMИмяУзла = "ValueType" Тогда
		Если СтрНайти(ТекЭлементDOM.ТекстовоеСодержимое, "Ref") <> 0 Тогда
			Попытка
				Для Каждого УзелТипа Из ТекЭлементDOM.ПервыйДочерний.ДочерниеУзлы Цикл
					Тип = Тип(УзелТипа.ТекстовоеСодержимое);
				КонецЦикла;
			Исключение
				// Обход ошибки платформы 70048156 для 8.3.22+.
				// Не возвращает по каким-то причинам корректный элемент, необходимый для удаления
				// поэтому добавим перед текущим, а следом текущий удалим (аналог заменить), но элемент уже корректный возвращается.
				// ТекЭлементDOM.РодительскийУзел.ЗаменитьДочерний(ЭталоноеЗначение.КлонироватьУзел(Истина), ТекЭлементDOM);.
				РодительскийУзел = ТекЭлементDOM.РодительскийУзел;
				ЗамененныйЭл = РодительскийУзел.ВставитьПеред(ЭталоноеЗначение.КлонироватьУзел(Истина), ТекЭлементDOM);
				РодительскийУзел.УдалитьДочерний(ТекЭлементDOM);
				МассивДобавленных.Добавить(Новый Структура("КорневойЭлемент, ДобавленныйЭлемент", РодительскийУзел, ЗамененныйЭл));
			КонецПопытки;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		ПространствоИмен = СтруктураПараметров.Пространства.Получить(ТекЭлементDOMИмяУзла);
		Если ПространствоИмен = Неопределено Тогда
			ПространствоИмен = Строка(ТекЭлементDOM.ПолучитьСоответствияПространствИмен().Получить("xsi"));
			СтруктураПараметров.Пространства.Вставить(ТекЭлементDOMИмяУзла, ПространствоИмен);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПространствоИмен) Тогда
			АтрибутNull = ТекЭлементDOM.ПолучитьУзелАтрибута(ПространствоИмен,"nil");
			Если АтрибутNull <> Неопределено И ВРег(АтрибутNull.Значение) = "TRUE" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Для Каждого Типа ИЗ РезультатПоиска.Тип.Типы() Цикл
		Если СтруктураПараметров.ПропускаемыеТипы.Найти(Типа) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НовыйУИД = Новый УникальныйИдентификатор(ТекЭлементDOM.ТекстовоеСодержимое);
	Исключение
		ТекЭлементDOM.ТекстовоеСодержимое = "00000000-0000-0000-0000-000000000000";
	КонецПопытки;
КонецПроцедуры

Процедура ПроверитьИЗаменитьРеквизитыТЧНаЭталонные(ЭлементДочерниеУзлы, ДокументDOM, РезультатПоиска, СтруктураПараметров, МассивДобавленных)
	
	РезультатПоискаТаблицаРеквизитовИТиповКоличество = РезультатПоиска.ТаблицаРеквизитовИТипов.Количество();
	
	Для Каждого Строка ИЗ ЭлементДочерниеУзлы Цикл
		ПределИтер = Макс(Строка.ДочерниеУзлы.Количество(), РезультатПоискаТаблицаРеквизитовИТиповКоличество);
		Для Итер = 0 По ПределИтер Цикл
			
			Если Строка.ДочерниеУзлы.Количество() > Итер И РезультатПоискаТаблицаРеквизитовИТиповКоличество > Итер Тогда
				Если Строка.ДочерниеУзлы[Итер].ИмяУзла = РезультатПоиска.ТаблицаРеквизитовИТипов[Итер].Реквизит Тогда
					ПроверитьИЗаменитьРеквизитыНаЭталонные(Строка.ДочерниеУзлы[Итер], РезультатПоиска.ТаблицаРеквизитовИТипов[Итер],,СтруктураПараметров, МассивДобавленных);
				Иначе
					НайденныеВТекущемДокументе = Строка.ПолучитьЭлементыПоИмени(РезультатПоиска.ТаблицаРеквизитовИТипов[Итер].Реквизит);
					Если НайденныеВТекущемДокументе.Количество() > 0 И НайденныеВТекущемДокументе.Количество() < 2 Тогда
						ВставляемыйЭлемент = НайденныеВТекущемДокументе[0];
					Иначе
						ВставляемыйЭлемент = ДокументDOM.СоздатьЭлемент(РезультатПоиска.ТаблицаРеквизитовИТипов[Итер].Реквизит);
					КонецЕсли;
					Строка.ВставитьПеред(ВставляемыйЭлемент, Строка.ДочерниеУзлы[Итер]);
					МассивДобавленных.Добавить(Новый Структура("КорневойЭлемент, ДобавленныйЭлемент", Строка, ВставляемыйЭлемент));
					ПроверитьИЗаменитьРеквизитыНаЭталонные(Строка.ДочерниеУзлы[Итер], РезультатПоиска.ТаблицаРеквизитовИТипов[Итер],,СтруктураПараметров, МассивДобавленных);
				КонецЕсли;
			ИначеЕсли Строка.ДочерниеУзлы.Количество() > Итер Тогда
				Строка.УдалитьДочерний(Строка.ДочерниеУзлы[Итер]);
				Итер = Итер - 1;
			ИначеЕсли РезультатПоискаТаблицаРеквизитовИТиповКоличество > Итер Тогда
				ВставляемыйЭлемент = ДокументDOM.СоздатьЭлемент(РезультатПоиска.ТаблицаРеквизитовИТипов[Итер].Реквизит);
				Строка.ДобавитьДочерний(ВставляемыйЭлемент);
				МассивДобавленных.Добавить(Новый Структура("КорневойЭлемент, ДобавленныйЭлемент", Строка, ВставляемыйЭлемент));
				ПроверитьИЗаменитьРеквизитыНаЭталонные(Строка.ДочерниеУзлы[Итер], РезультатПоиска.ТаблицаРеквизитовИТипов[Итер],,СтруктураПараметров, МассивДобавленных);
			КонецЕсли;
			ПределИтер = Макс(Строка.ДочерниеУзлы.Количество(), РезультатПоискаТаблицаРеквизитовИТиповКоличество);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получить текст XML из загружаемого с увеличенной совместимостью с метаданными текущей конфигурации.
//
// Параметры:
//  Путь			 - Строка - путь к исходному файлу экспорта шаблона.
//  ПолнаяЗагрузка	 - Булево - не используется.
// 
// Возвращаемое значение:
//  Строка - переработанный xml-текст для загрузки шаблонов.
//
Функция ПолучитьЭталонныйXMLШаблона(Путь, ПолнаяЗагрузка = Истина) Экспорт
	
	// Ошибка платформы 70048156 для 8.3.22+ при работе с клонированием элементов DOM документа
	// в Массив складываем склонированные элементы перед выходом из функции удаляем склонированные элементы.
	МассивДобавленных = Новый Массив;
	
	СтруктураПараметров = ПолучитьСтруктуруПарамтеровДляПроверитьИЗаменитьРеквизитыНаЭталонные();
	ТаблицаЭталонов = Новый ТаблицаЗначений;
	ТаблицаЭталонов.Колонки.Добавить("Имя");
	ТаблицаЭталонов.Колонки.Добавить("Тип");
	ТаблицаЭталонов.Колонки.Добавить("ДокументDOM");
	ТаблицаЭталонов.Колонки.Добавить("ЭталонныеОбъекты");
	ТаблицаЭталонов.Колонки.Добавить("ТабличныеЧастиИРеквизиты");
	ТаблицаЭталонов.Колонки.Добавить("Реквизиты");
	
	ДобавитьСтрокуЭталона(ТаблицаЭталонов, "Шаблон", Справочники.ШаблоныHTML);
	Если ПолнаяЗагрузка Тогда
		ДобавитьСтрокуЭталона(ТаблицаЭталонов, "ПараметрШаблона",			ПланыВидовХарактеристик.ПараметрыHTML, ИмяПредопределенногоПараметраШаблонаПриема());
		ДобавитьСтрокуЭталона(ТаблицаЭталонов, "СоставнаяФраза",			Справочники.СоставныеФразы);
		ДобавитьСтрокуЭталона(ТаблицаЭталонов, "ВычисляемоеЗначение",		Справочники.ВычисляемыеЗначенияПараметров);
		ДобавитьСтрокуЭталона(ТаблицаЭталонов, "ЗначениеПараметра",			Справочники.ДополнительныеЗначенияХарактеристик);
		ДобавитьСтрокуЭталона(ТаблицаЭталонов, "ТаблицаПараметровШаблона",	Справочники.ТаблицыШаблоновПриема);
		ДобавитьСтрокуЭталона(ТаблицаЭталонов, "ЭлементКлассификатора",		Справочники.РегистрируемыеЭлектронныеМедДокументы);
	КонецЕсли;
	
	Для Каждого Элемент ИЗ ТаблицаЭталонов Цикл
		Элемент.ДокументDOM = ПолучитьЭталонныйDOMДокументСериализованногоОбъекта(Элемент.ЭталонныеОбъекты, Элемент.Реквизиты, Элемент.ТабличныеЧастиИРеквизиты);
	КонецЦикла;
	
	ТаблицаЭталонов.Колонки.Удалить(ТаблицаЭталонов.Колонки.ЭталонныеОбъекты);
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(Путь);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл не выбран'"));
		Возврат Неопределено;
	КонецПопытки;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Если Не ПолнаяЗагрузка Тогда
		// Оставляем только шаблоны и группы шаблонов для загрузки списка шаблонов
		ПределИтератора = ДокументDOM.ЭлементДокумента.ДочерниеУзлы.Количество() - 1;
		Итератор = 0;
		Пока Итератор <= ПределИтератора Цикл
			ЭлементДокументаДочерниеУзлыИтератор = ДокументDOM.ЭлементДокумента.ДочерниеУзлы[Итератор];
			Если Не (ЭлементДокументаДочерниеУзлыИтератор.ИмяУзла = "Шаблон"
					Или ЭлементДокументаДочерниеУзлыИтератор.ИмяУзла = "ГруппаШаблонов")
			Тогда
				ДокументDOM.ЭлементДокумента.УдалитьДочерний(ДокументDOM.ЭлементДокумента.ДочерниеУзлы[Итератор]);
				Итератор = Итератор - 1;
				ПределИтератора = ПределИтератора - 1;
			КонецЕсли;
			Итератор = Итератор + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Сравнение двух XML исходного и эталоного
	Для Каждого ЭлементНазваниеОбъектов ИЗ ДокументDOM.ЭлементДокумента.ДочерниеУзлы Цикл
		СтрокиЭталоновПоИмениУзла = ТаблицаЭталонов.НайтиСтроки(Новый Структура("Имя", ЭлементНазваниеОбъектов.ИмяУзла));
		Если СтрокиЭталоновПоИмениУзла.Количество() > 0 Тогда
			СтрокиЭталоновПоТипам = Новый Соответствие;
			Для Каждого СтрокаЭталонаПоИмениУзла Из СтрокиЭталоновПоИмениУзла Цикл
				СтрокиЭталоновПоТипам.Вставить(СтрокаЭталонаПоИмениУзла.Тип, СтрокаЭталонаПоИмениУзла);
			КонецЦикла;
			
			Для Каждого Элемент ИЗ ЭлементНазваниеОбъектов.ДочерниеУзлы Цикл
				
				Эталон = СтрокиЭталоновПоТипам.Получить(Тип(Элемент.ИмяУзла));
				
				Если Эталон = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭталонныйDOM = Эталон.ДокументDOM.ЭлементДокумента;
				
				Если ЭлементНазваниеОбъектов.ИмяУзла = "Шаблон" Тогда
					НайденныеЭлементы = Элемент.ПолучитьЭлементыПоИмени("IsFolder");
					Если НайденныеЭлементы.Количество() > 0 Тогда
						Если НайденныеЭлементы[0].ТекстовоеСодержимое = "true" Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ПределИтератора = Макс(Элемент.ДочерниеУзлы.Количество(), ЭталонныйDOM.ДочерниеУзлы.Количество());
				// Потеговое сравнение XML сериализованных объектов исходного документа с эталонами 
				Для Итератор = 0 По ПределИтератора Цикл
					Если Элемент.ДочерниеУзлы.Количество() > Итератор И ЭталонныйDOM.ДочерниеУзлы.Количество() > Итератор Тогда
						ЭлементДочерниеУзлыИтератор = Элемент.ДочерниеУзлы[Итератор];
						ЭлементДочерниеУзлыИтераторИмяУзла = ЭлементДочерниеУзлыИтератор.ИмяУзла;
						ЭталонныйDOMДочерниеУзлыИтератор = ЭталонныйDOM.ДочерниеУзлы[Итератор];
						ЭталонныйDOMДочерниеУзлыИтераторИмяУзла = ЭталонныйDOMДочерниеУзлыИтератор.ИмяУзла;
						РезультатПоискаРеквизита = Эталон.Реквизиты.Найти(ЭталонныйDOMДочерниеУзлыИтераторИмяУзла, "ИмяРеквизита");
						Если ЭлементДочерниеУзлыИтераторИмяУзла = ЭталонныйDOMДочерниеУзлыИтераторИмяУзла Тогда
							Если РезультатПоискаРеквизита <> Неопределено Тогда
								ПроверитьИЗаменитьРеквизитыНаЭталонные(ЭлементДочерниеУзлыИтератор, РезультатПоискаРеквизита,,СтруктураПараметров, МассивДобавленных);
							ИначеЕсли ЭлементДочерниеУзлыИтераторИмяУзла = "ValueType" Тогда
								ПроверитьИЗаменитьРеквизитыНаЭталонные(ЭлементДочерниеУзлыИтератор, , ЭталонныйDOMДочерниеУзлыИтератор,СтруктураПараметров, МассивДобавленных);
							КонецЕсли;
							РезультатПоискаТЧ = Эталон.ТабличныеЧастиИРеквизиты.Найти(ЭлементДочерниеУзлыИтераторИмяУзла, "ИмяТабличнойЧасти");
							Если РезультатПоискаТЧ = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							ПроверитьИЗаменитьРеквизитыТЧНаЭталонные(ЭлементДочерниеУзлыИтератор.ДочерниеУзлы, ДокументDOM, РезультатПоискаТЧ, СтруктураПараметров, МассивДобавленных);
						Иначе
							НайденныеВТекущемДокументе = Элемент.ПолучитьЭлементыПоИмени(ЭталонныйDOMДочерниеУзлыИтераторИмяУзла);
							Если НайденныеВТекущемДокументе.Количество() > 0 И НайденныеВТекущемДокументе.Количество() < 2 Тогда
								ВставляемыйЭлемент = НайденныеВТекущемДокументе[0];
								Если РезультатПоискаРеквизита <> Неопределено Тогда
									ПроверитьИЗаменитьРеквизитыНаЭталонные(ВставляемыйЭлемент, РезультатПоискаРеквизита,,СтруктураПараметров, МассивДобавленных);
								ИначеЕсли ВставляемыйЭлемент.ИмяУзла = "ValueType" Тогда
									ПроверитьИЗаменитьРеквизитыНаЭталонные(ВставляемыйЭлемент, , ЭталонныйDOMДочерниеУзлыИтератор,СтруктураПараметров, МассивДобавленных);
								КонецЕсли;
								РезультатПоискаТЧ = Эталон.ТабличныеЧастиИРеквизиты.Найти(ВставляемыйЭлемент.ИмяУзла, "ИмяТабличнойЧасти");
								Если РезультатПоискаТЧ = Неопределено Тогда
									ВставляемыйЭлемент = Элемент.ВставитьПеред(ВставляемыйЭлемент, Элемент.ДочерниеУзлы[Итератор]);
									МассивДобавленных.Добавить(Новый Структура("КорневойЭлемент, ДобавленныйЭлемент", Элемент, ВставляемыйЭлемент));
									Продолжить;
								КонецЕсли;
								ПроверитьИЗаменитьРеквизитыТЧНаЭталонные(ВставляемыйЭлемент.ДочерниеУзлы, ДокументDOM, РезультатПоискаТЧ, СтруктураПараметров, МассивДобавленных);
							Иначе
								ВставляемыйЭлемент = ЭталонныйDOMДочерниеУзлыИтератор.КлонироватьУзел(Истина);
							КонецЕсли;
							ДобавленныйЭл = Элемент.ВставитьПеред(ВставляемыйЭлемент, Элемент.ДочерниеУзлы[Итератор]);
							МассивДобавленных.Добавить(Новый Структура("КорневойЭлемент, ДобавленныйЭлемент", Элемент, ДобавленныйЭл));
						КонецЕсли;
					ИначеЕсли Элемент.ДочерниеУзлы.Количество() > Итератор Тогда
						Элемент.УдалитьДочерний(Элемент.ДочерниеУзлы[Итератор]);
						Итератор = Итератор - 1;
					ИначеЕсли ЭталонныйDOM.ДочерниеУзлы.Количество() > Итератор Тогда
						ДобавленныйЭл = Элемент.ДобавитьДочерний(ЭталонныйDOM.ДочерниеУзлы[Итератор].КлонироватьУзел(Истина));
						МассивДобавленных.Добавить(Новый Структура("КорневойЭлемент, ДобавленныйЭлемент", Элемент, ДобавленныйЭл));
					КонецЕсли;
					ПределИтератора = Макс(Элемент.ДочерниеУзлы.Количество(), ЭталонныйDOM.ДочерниеУзлы.Количество());
				КонецЦикла;
			КонецЦикла;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьАтрибутыРасположенияПодписи(ДокументDOM);
	
	// Экспорт DOM документа в XML строку
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	СтрокаЭталонногоXMLШаблона = ЗаписьXML.Закрыть();
	
	Для Каждого ДобавленныйЭлементDOM Из МассивДобавленных Цикл
		ДобавленныйЭлементDOM.КорневойЭлемент.УдалитьДочерний(ДобавленныйЭлементDOM.ДобавленныйЭлемент);
	КонецЦикла;
	
	Возврат СтрокаЭталонногоXMLШаблона;
	
КонецФункции

Процедура ДобавитьСтрокуЭталона(ТаблицаЭталонов, Имя, ЭлементМетаданных, ИмяПредопределенныхДанных = Неопределено);
	
	НоваяСтрока = ТаблицаЭталонов.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.ЭталонныеОбъекты = ЭлементМетаданных.СоздатьЭлемент();
	НоваяСтрока.Тип = ТипЗнч(НоваяСтрока.ЭталонныеОбъекты);
	Если ИмяПредопределенныхДанных <> Неопределено Тогда
		НоваяСтрока.ЭталонныеОбъекты.ИмяПредопределенныхДанных = ИмяПредопределенныхДанных;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьАтрибутыРасположенияПодписи(ДокументDOM)
	
	Для Каждого ЭлементDOM Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументDOM, "РасположениеПодписи", Истина) Цикл
		Если ЭлементDOM.Атрибуты.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементDOM.УстановитьАтрибут("http://www.w3.org/2000/xmlns/",				"xmlns:xs",	 "http://www.w3.org/2001/XMLSchema");
		ЭлементDOM.УстановитьАтрибут("http://www.w3.org/2000/xmlns/",				"xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЭлементDOM.УстановитьАтрибут("http://www.w3.org/2001/XMLSchema-instance",	"xsi:type",	 "xs:decimal");
	КонецЦикла;
	
КонецФункции

// Импортировать шаблоны из файла экспорта.
//
// Параметры:
//  Путь - Строка	 	 - имя файла.
//	НужныеШаблоныИзФайла - Массив	- наименования шаблонов, которые надо загрузить из файла.
//
// Возвращаемое значение:
//  Массив - ссылки на загруженные шаблоны.
//
Функция Импортировать(Путь, НужныеШаблоныИзФайла = Неопределено) Экспорт
	
	Перем ТаблицаКлассификаторов;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	СтрокаЭталоногоXMLШаблона = ПолучитьЭталонныйXMLШаблона(Путь);
	Если СтрокаЭталоногоXMLШаблона <> Неопределено Тогда
		ЧтениеXML.УстановитьСтроку(СтрокаЭталоногоXMLШаблона);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Шаблоны = Новый Массив;
	ПредопределенныеЭлементыXML = Новый Соответствие;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
			
			Данные = ПрочитатьXML(ЧтениеXML);
			
			Если ТипЗнч(Данные) = Тип("ХранилищеЗначения") Тогда
				ТаблицаКлассификаторов = Данные.Получить();
				ОбработатьТаблицуСсылокНаКлассификаторыПриИмпорте(ТаблицаКлассификаторов);
			Иначе
				Если Данные <> Неопределено Тогда
					
					ИмяТипаОбъекта = ДопСерверныеФункции.ИмяСсылочногоТипа(Данные);
					
					Если Данные.Ссылка.Пустая() Тогда
						Данные.УстановитьНовыйКод();
					ИначеЕсли ИмяТипаОбъекта = "Справочник.ШаблоныHTML"
						И ТребуетсяСоздатьВерсию(Данные)
					Тогда
						ВерсионированиеШаблонов.СоздатьВерсиюШаблона(Данные.Ссылка);
					ИначеЕсли ИмяТипаОбъекта = "Справочник.ДействияМедосмотра"
						Или ИмяТипаОбъекта = "Справочник.ОграниченияДействийМедосмотра"
						Или ИмяТипаОбъекта = "Справочник.КатегорииВыработки"
					Тогда
						// Существующие элементы данных типов не трогать
						Продолжить;
					КонецЕсли;
					
					Данные.ДополнительныеСвойства.Вставить("ОбновитьСтроковыеЗначенияПараметровШаблона");
					
					// Обработка предопределенных элементов
					Если Данные.Предопределенный И ТипЗнч(Данные) = Тип("ПланВидовХарактеристикОбъект.ПараметрыHTML") Тогда
						
						ПредопределенныеЭлементыВБазе = Метаданные.НайтиПоПолномуИмени(ОбщегоНазначения.ИмяТаблицыПоСсылке(Данные.Ссылка)).ПолучитьИменаПредопределенных();
						Если ПредопределенныеЭлементыВБазе.Найти(Данные.ИмяПредопределенныхДанных) <> Неопределено Тогда
							СсылкаНаЭлемент = ?(Данные.ЭтоНовый(), Данные.ПолучитьСсылкуНового(), Данные.Ссылка);
							ПредопределенныеЭлементыXML.Вставить(СсылкаНаЭлемент.УникальныйИдентификатор(), ОбщегоНазначения.МенеджерОбъектаПоСсылке(Данные.Ссылка)[Данные.ИмяПредопределенныхДанных].Ссылка);
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Отказ = Ложь;
					ОбработатьКлассификаторыВШаблонеПриИмпорте(Данные, ТаблицаКлассификаторов, Отказ);
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеЗаписаны = Ложь;
					Для Сч = 1 По 10 Цикл // Итерации попытки сделать уникальный код.
						Если ЭлементСТакимКодомСуществует(Данные) Тогда
							Данные.УстановитьНовыйКод();
						Иначе
							Данные.Записать();
							ДанныеЗаписаны = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ДанныеЗаписаны Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru='Данные не записаны: %1: %2'"), ТипЗнч(Данные.Ссылка), Строка(Данные)));
					КонецЕсли;
					
					Если ТипЗнч(Данные) = Тип("СправочникОбъект.ШаблоныHTML") Тогда
						Шаблоны.Добавить(Данные.Ссылка);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗагруженныеНужныеШаблоны = Новый Массив;
	
	Для Каждого Шаблон Из Шаблоны Цикл
		ШаблонОбъект = Шаблон.ПолучитьОбъект();
		
		// Сбор ссылок загруженных шаблонов с учётом 
		Если ТипЗнч(НужныеШаблоныИзФайла) <> Тип("Массив")
			Или (Не ШаблонОбъект.ЭтоГруппа
					И НужныеШаблоныИзФайла.Найти(ШаблонОбъект.Наименование) <> Неопределено) // Поиск по наименованию шаблона.
		Тогда
			ЗагруженныеНужныеШаблоны.Добавить(Шаблон);
		КонецЕсли;
		
		// Подмена ссылок предопределенных параметров шаблона
		Для Каждого СтрокаПараметра Из ШаблонОбъект.СоответствияПараметрам Цикл
			УИДXML = СтрокаПараметра.Параметр.УникальныйИдентификатор();
			ПредопределенныйПараметр = ПредопределенныеЭлементыXML.Получить(УИДXML);
			Если ПредопределенныйПараметр <> Неопределено Тогда
				СтрокаПараметра.Параметр = ПредопределенныйПараметр;
				ШаблонОбъект.ТекстHTML = СтрЗаменить(ШаблонОбъект.ТекстHTML, Строка(УИДXML), Строка(ПредопределенныйПараметр.УникальныйИдентификатор()));
			КонецЕсли;
		КонецЦикла;
		ШаблонОбъект.Записать();
	КонецЦикла;
	
	Возврат ЗагруженныеНужныеШаблоны;
	
КонецФункции

Функция ЭлементСТакимКодомСуществует(Данные)
	
	Перем МенеджерОбъекта;
	
	МетаданныеЭлемента = Данные.Метаданные();
	
	// Менеджер справочника или плана видов характеристик.
	Если Метаданные.Справочники.Содержит(МетаданныеЭлемента) Тогда
		МенеджерОбъекта = Справочники[МетаданныеЭлемента.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЭлемента) Тогда
		МенеджерОбъекта = ПланыВидовХарактеристик[МетаданныеЭлемента.Имя];
	КонецЕсли;
	
	// Собственно проверка существования с этим кодом.
	Если МенеджерОбъекта <> Неопределено
		И МенеджерОбъекта.ПустаяСсылка().Метаданные().ДлинаКода <> 0
	Тогда
		СуществующийОбъектТакойЖеКод = МенеджерОбъекта.НайтиПоКоду(Данные.Код);
		Возврат ЗначениеЗаполнено(СуществующийОбъектТакойЖеКод)
				И СуществующийОбъектТакойЖеКод <> Данные.Ссылка;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Перезаписывает все шаблоны базы с заданными ключами в ДополнительныеСвойства.
//
// Параметры:
//  ДополнительныеСвойства	 - Структура - ДополнительныеСвойства для объектов при записи.
//
Процедура ПерезаписатьШаблоны(ДополнительныеСвойства = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныHTML.Ссылка
	|ИЗ
	|	Справочник.ШаблоныHTML КАК ШаблоныHTML
	|ГДЕ
	|	НЕ ШаблоныHTML.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Шаблон = Выборка.Ссылка.ПолучитьОбъект();
		Если ДополнительныеСвойства <> Неопределено Тогда 
			Для Каждого кзСвойство Из ДополнительныеСвойства Цикл 
				Шаблон.ДополнительныеСвойства.Вставить(кзСвойство.Ключ, кзСвойство.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			Шаблон.Записать();
		Исключение КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаОбъектовКлассификатора(ВыгружаемыеШаблоны, КлассификаторыЕГИСЗ)
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Справочник",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидКлассификатора",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКлассификаторовМинЗдрава"));
	Таблица.Колонки.Добавить("УИДЕГИСЗ",Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Ссылка");
	
	Для Каждого ШаблонОсмотра Из ВыгружаемыеШаблоны Цикл
		
		Если ШаблонОсмотра.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШаблонОсмотра.ВидДокумента) Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.УИДЕГИСЗ = ШаблонОсмотра.ВидДокумента.УИДЕГИСЗ;
			НоваяСтрока.Ссылка = ШаблонОсмотра.ВидДокумента;
			НоваяСтрока.Справочник = "Справочник.РегистрируемыеЭлектронныеМедДокументы";
			КлассификаторыЕГИСЗ.Добавить(ШаблонОсмотра.ВидДокумента);
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.УИДЕГИСЗ = ШаблонОсмотра.ВидДокумента.ВидДокумента.УИДЕГИСЗ;
			НоваяСтрока.Ссылка = ШаблонОсмотра.ВидДокумента.ВидДокумента;
			НоваяСтрока.Справочник = "Справочник.ВидыМедицинскихДокументов";
			КлассификаторыЕГИСЗ.Добавить(ШаблонОсмотра.ВидДокумента.ВидДокумента);
			
			ДобавитьСтрокуКлассификатора(ШаблонОсмотра.ВидДокумента.ВидДокумента.ВидСЭМД, Таблица, КлассификаторыЕГИСЗ);
		КонецЕсли;
		
		КлассификаторыВТабличныхЧастях = Новый Структура;
		КлассификаторыВТабличныхЧастях.Вставить("СоответствияПараметрам", "КлассификацияПоля");
		КлассификаторыВТабличныхЧастях.Вставить("СоответствияТаблицамШаблонов", "КлассификацияПоля");
		КлассификаторыВТабличныхЧастях.Вставить("КонстантыCDAДокумента", "Значение");
		КлассификаторыВТабличныхЧастях.Вставить("РолиПодписей", "Роль");
		
		Для Каждого КлассификаторВТЧ Из КлассификаторыВТабличныхЧастях Цикл
			Для Каждого СтрокаТЧ Из ШаблонОсмотра[КлассификаторВТЧ.Ключ] Цикл
				ДобавитьСтрокуКлассификатора(СтрокаТЧ[КлассификаторВТЧ.Значение], Таблица, КлассификаторыЕГИСЗ);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СтрокаПараметра Из ШаблонОсмотра.СоответствияПараметрам Цикл
			Для Каждого ЗначениеВыбора Из СтрокаПараметра.Параметр.ЗначенияВыбора Цикл
				ДобавитьСтрокуКлассификатора(ЗначениеВыбора.Значение, Таблица, КлассификаторыЕГИСЗ);
			КонецЦикла;
			ДобавитьСтрокуКлассификатора(СтрокаПараметра.Параметр.ЗначениеПоУмолчанию, Таблица, КлассификаторыЕГИСЗ);
			ДобавитьСтрокуКлассификатора(СтрокаПараметра.Параметр.Назначение, Таблица, КлассификаторыЕГИСЗ);
		КонецЦикла;
		
		ДобавитьСтрокуКлассификатора(ШаблонОсмотра.ВидМедицинскойДокументации, Таблица, КлассификаторыЕГИСЗ);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Допустимые варианты расположения ЭЦП в шаблоне.
//
// Параметры:
//  ВидШаблона	 - ПеречислениеСсылка.ВидыШаблонов	 - вид шаблона.
// 
// Возвращаемое значение:
//  Массив - допустимые расположения.
//
Функция РасположенияПодписи(ВидШаблона) Экспорт
	
	Расположения = Новый Массив;
	
	Если ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент Тогда
		Расположения.Добавить(Перечисления.РасположениеПодписи.ПоЗаданнымКоординатам);
		Расположения.Добавить(Перечисления.РасположениеПодписи.ПослеДокумента);
		Расположения.Добавить(Перечисления.РасположениеПодписи.НеВыводить);
	Иначе
		Расположения.Добавить(Перечисления.РасположениеПодписи.ПравыйВерхнийУгол);
		Расположения.Добавить(Перечисления.РасположениеПодписи.ПравыйНижнийУгол);
		Расположения.Добавить(Перечисления.РасположениеПодписи.ЛевыйВерхнийУгол);
		Расположения.Добавить(Перечисления.РасположениеПодписи.ЛевыйНижнийУгол);
		Расположения.Добавить(Перечисления.РасположениеПодписи.ПослеДокумента);
	КонецЕсли;
	
	Возврат Расположения;
	
КонецФункции

// Числовые коды вариантов расположения подписи и их значения.
// 
// Возвращаемое значение:
//  Соответствие - расшифровка числовых кодов вариантов расположения.
//
Функция ЧисловыеРасположенияПодписи() Экспорт
	
	ЧисловыеРасположения = Новый Соответствие;
	ЧисловыеРасположения.Вставить(0, Перечисления.РасположениеПодписи.ПослеДокумента);
	ЧисловыеРасположения.Вставить(1, Перечисления.РасположениеПодписи.ПравыйВерхнийУгол);
	ЧисловыеРасположения.Вставить(2, Перечисления.РасположениеПодписи.ПравыйНижнийУгол);
	ЧисловыеРасположения.Вставить(3, Перечисления.РасположениеПодписи.ЛевыйВерхнийУгол);
	ЧисловыеРасположения.Вставить(4, Перечисления.РасположениеПодписи.ЛевыйНижнийУгол);
	
	Возврат ЧисловыеРасположения;
	
КонецФункции

Функция МетаданныеВстроенныхОбработок() Экспорт
	
	ВстроенныеОбработки = Новый Массив;
	МедицинскаяДеятельностьПереопределяемый.ДополнитьМетаданныеВстроенныхОбработок(ВстроенныеОбработки);
	
	Возврат ВстроенныеОбработки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("Ключ") Тогда
			ЭтоТабличныйШаблонСправки = Параметры.Ключ.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент;
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
			ЭтоТабличныйШаблонСправки = Параметры.ЗначенияЗаполнения.Свойство("ВидШаблона") И Параметры.ЗначенияЗаполнения.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент;
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
			ЭтоТабличныйШаблонСправки = Параметры.ЗначениеКопирования.ВидШаблона = Перечисления.ВидыШаблонов.ТабличныйДокумент;
		Иначе
			ЭтоТабличныйШаблонСправки = Ложь;
		КонецЕсли;
		
		Если ЭтоТабличныйШаблонСправки Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаЭлементаТабличногоШаблонаСправки";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицыПараметровШаблона(ТекстHTML)
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	ТаблицыШаблона = Новый Массив;
	
	Коллекция = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "TABLE");
	Для Каждого Элемент Из Коллекция Цикл
		Если Элемент.hasAttribute("data-bit-dyntable-id") Тогда
			ТаблицаШаблона = РаботаСШаблонамиHTML.ТаблицаШаблоновПоСтрокеУИД(Элемент.getAttribute("data-bit-dyntable-id"));
			Если ТаблицыШаблона.Найти(ТаблицаШаблона) = Неопределено И ЗначениеЗаполнено(ТаблицаШаблона) Тогда
				ТаблицыШаблона.Добавить(ТаблицаШаблона);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицыШаблона;
	
КонецФункции

Функция ПолучитьМассивВычисляемыхБлоков(ТекстHTML)
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	мсВычисляемыеБлоки = Новый Массив;
	
	Для Каждого ЭлементHTML Из ДокументHTML.ПолучитьЭлементыПоИмени("TT") Цикл
		Если ЗначениеЗаполнено(ЭлементHTML.Идентификатор) Тогда
			Попытка
				мсВычисляемыеБлоки.Добавить(
					Справочники.ВычисляемыеЗначенияПараметров.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементHTML.Идентификатор)));
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат мсВычисляемыеБлоки;
	
КонецФункции

Функция ПолучитьИерархиюПараметраПриема(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыHTML.Родитель КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыHTML КАК ПараметрыHTML
	|ГДЕ
	|	ПараметрыHTML.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	ПараметрыHTML.Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Группы верхней иерархии
Функция ПолучитьИерархиюШаблонаОсмотра(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныHTML.Родитель КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныHTML КАК ШаблоныHTML
	|ГДЕ
	|	ШаблоныHTML.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	ШаблоныHTML.Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьДочерниеЭлементыШаблонаОсмотра(ШаблонОсмотра)
		
	Если ШаблонОсмотра.ЭтоГруппа Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныHTML.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныHTML КАК ШаблоныHTML
		|ГДЕ
		|	ШаблоныHTML.Ссылка В ИЕРАРХИИ (&Ссылка)
		|	И ШаблоныHTML.Ссылка <> &Ссылка
		|";
		Запрос.УстановитьПараметр("Ссылка", ШаблонОсмотра);
		
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе	
		Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоставныеФразы(ПараметрыШаблона, ПакетыФраз)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Параметр", ПараметрыШаблона);
	Запрос.УстановитьПараметр("ПакетыФраз", ПакетыФраз);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставныеФразы.Ссылка КАК СоставнаяФраза,
	|	СоставныеФразы.ПометкаУдаления
	|ПОМЕСТИТЬ СоставныеФаразыПоПараметру
	|ИЗ
	|	Справочник.СоставныеФразы КАК СоставныеФразы
	|ГДЕ
	|	СоставныеФразы.Параметр В(&Параметр)
	|	ИЛИ СоставныеФразы.Параметр В
	|							(&ПакетыФраз) 
	|	И СоставныеФразы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставныеФаразыПоПараметру.СоставнаяФраза
	|ПОМЕСТИТЬ СоставныеФразыПомеченные
	|ИЗ
	|	СоставныеФаразыПоПараметру КАК СоставныеФаразыПоПараметру
	|ГДЕ
	|	СоставныеФаразыПоПараметру.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставныеФаразыПоПараметру.СоставнаяФраза
	|ИЗ
	|	СоставныеФаразыПоПараметру КАК СоставныеФаразыПоПараметру
	|ГДЕ
	|	НЕ СоставныеФаразыПоПараметру.ПометкаУдаления
	|	И НЕ СоставныеФаразыПоПараметру.СоставнаяФраза В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					СоставныеФразыПомеченные.СоставнаяФраза
	|				ИЗ
	|					СоставныеФразыПомеченные КАК СоставныеФразыПомеченные)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СоставнаяФраза");
	
КонецФункции

Функция ПолучитьПакетыСоставныхФразВПараметреШаблона(ПараметрыШаблона)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Параметр", ПараметрыШаблона);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПакетыСоставныхФраз.Пакет КАК Пакет
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыHTML.ПакетыСоставныхФраз КАК ПакетыСоставныхФраз
	|ГДЕ
	|	ПакетыСоставныхФраз.Ссылка В(&Параметр)";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пакет");
	
КонецФункции

Функция ПолучитьДопЗначенияХарактеристик(ПараметрыШаблона)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Параметр", ПараметрыШаблона);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеЗначенияХарактеристик.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеЗначенияХарактеристик КАК ДополнительныеЗначенияХарактеристик
	|ГДЕ
	|	НЕ ДополнительныеЗначенияХарактеристик.ПометкаУдаления
	|	И ДополнительныеЗначенияХарактеристик.Владелец В(&Параметр)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ОбработатьТаблицуСсылокНаКлассификаторыПриИмпорте(ТаблицаКлассификаторов)
	
	ТаблицаКлассификаторов.Колонки.Добавить("СуществующаяСсылка");
	Для Каждого СтрокаОбъекта Из ТаблицаКлассификаторов Цикл
		
		СуществующаяСсылка = НайтиЭлементКлассификатора(СтрокаОбъекта.Справочник, СтрокаОбъекта.ВидКлассификатора, СтрокаОбъекта.УИДЕГИСЗ);
		
		//Если Не ЗначениеЗаполнено(СуществующаяСсылка) Тогда
		//	
		//	Если СтрокаОбъекта.Справочник = "Справочник.РегистрируемыеЭлектронныеМедДокументы" Тогда
		//		ИнтеграцияЕГИСЗСервер.ОбновитьСправочник(Справочники.ВидыМедицинскихДокументов.ПолучитьOIDСправочника(), Ложь);
		//		OID = МенеджерСправочника.ПолучитьOIDСправочника();
		//	ИначеЕсли СтрокаОбъекта.Справочник = "Справочник.КлассификаторыМинЗдрава" Тогда
		//		OID = МенеджерСправочника.ПолучитьOIDСправочника(СтрокаОбъекта.ВидКлассификатора);
		//	Иначе
		//		OID = МенеджерСправочника.ПолучитьOIDСправочника();
		//	КонецЕсли;
		//	
		//	ИнтеграцияЕГИСЗСервер.ОбновитьСправочник(OID, Ложь);
		//	СуществующаяСсылка = МенеджерСправочника.НайтиПоРеквизиту("УИДЕГИСЗ",СтрокаОбъекта.УИДЕГИСЗ);
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СуществующаяСсылка) Тогда
			СтрокаОбъекта.СуществующаяСсылка = СуществующаяСсылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьКлассификаторыВШаблонеПриИмпорте(Данные, ТаблицаКлассификаторов, Отказ)
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ШаблоныHTML") Тогда
		
		// Подмена загружаемой ссылки из источника на ссылку из базы-приемника.
		СуществующаяСсылка = НайтиСопоставленныйЭлементКлассификатора(ТаблицаКлассификаторов, Данные.ВидДокумента);
		Если ЗначениеЗаполнено(СуществующаяСсылка) Тогда
			Данные.ВидДокумента = СуществующаяСсылка;
		КонецЕсли;
		
		СуществующаяСсылка = НайтиСопоставленныйЭлементКлассификатора(ТаблицаКлассификаторов, Данные.ВидМедицинскойДокументации);
		Если ЗначениеЗаполнено(СуществующаяСсылка) Тогда
			Данные.ВидМедицинскойДокументации = СуществующаяСсылка;
		КонецЕсли;
		
		КлассификаторыВТабличныхЧастях = Новый Структура;
		КлассификаторыВТабличныхЧастях.Вставить("СоответствияПараметрам", "КлассификацияПоля");
		КлассификаторыВТабличныхЧастях.Вставить("СоответствияТаблицамШаблонов", "КлассификацияПоля");
		КлассификаторыВТабличныхЧастях.Вставить("КонстантыCDAДокумента", "Значение");
		КлассификаторыВТабличныхЧастях.Вставить("РолиПодписей", "Роль");
		
		Для Каждого КлассификаторВТЧ Из КлассификаторыВТабличныхЧастях Цикл
			
			Для Каждого СтрокаТЧ Из Данные[КлассификаторВТЧ.Ключ] Цикл
				
				ЗначениеКлассификатора = СтрокаТЧ[КлассификаторВТЧ.Значение];
				
				СуществующаяСсылка = НайтиСопоставленныйЭлементКлассификатора(ТаблицаКлассификаторов, ЗначениеКлассификатора);
				Если ЗначениеЗаполнено(СуществующаяСсылка) Тогда
					СтрокаТЧ[КлассификаторВТЧ.Значение] = СуществующаяСсылка;
				КонецЕсли;
 
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ПланВидовХарактеристикОбъект.ПараметрыHTML") Тогда
		
		ЗаполнитьРеквизитСуществующейСсылкой(ТаблицаКлассификаторов, Данные, "ЗначениеПоУмолчанию");
		ЗаполнитьРеквизитСуществующейСсылкой(ТаблицаКлассификаторов, Данные, "Назначение");
		
		Для Каждого ЗначениеВыбора Из Данные.ЗначенияВыбора Цикл
			ЗаполнитьРеквизитСуществующейСсылкой(ТаблицаКлассификаторов, ЗначениеВыбора, "Значение");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ВидыМедицинскихДокументов") Тогда
		
		ЗаполнитьРеквизитСуществующейСсылкой(ТаблицаКлассификаторов, Данные, "ВидСЭМД");
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.РегистрируемыеЭлектронныеМедДокументы") Тогда
		
		ЗаполнитьРеквизитСуществующейСсылкой(ТаблицаКлассификаторов, Данные, "ВидДокумента");
		
	Иначе
		// Отменяем загрузку ссылки классификатора из источинка, если в приемнике нашли соответствующую ей.
		Если Данные.ЭтоНовый() Тогда
			СуществующаяСсылка = НайтиСопоставленныйЭлементКлассификатора(ТаблицаКлассификаторов, Данные.ПолучитьСсылкуНового());
			Если ЗначениеЗаполнено(СуществующаяСсылка) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитСуществующейСсылкой(ТаблицаКлассификаторов, Данные, ИмяРеквизита)
	
	СуществующаяСсылка = НайтиСопоставленныйЭлементКлассификатора(ТаблицаКлассификаторов, Данные[ИмяРеквизита]);
	Если ЗначениеЗаполнено(СуществующаяСсылка) Тогда
		Данные[ИмяРеквизита] = СуществующаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКлассификатора(ЗначениеКлассификатора, Таблица, КлассификаторыЕГИСЗ)
	
	МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеКлассификатора));
	
	Если ЗначениеЗаполнено(ЗначениеКлассификатора)
		И МетаданныеЗначения <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗначениеКлассификатора, "УИДЕГИСЗ")
		И ЗначениеЗаполнено(ЗначениеКлассификатора.УИДЕГИСЗ)
	Тогда
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.УИДЕГИСЗ = ЗначениеКлассификатора.УИДЕГИСЗ;
		НоваяСтрока.Ссылка = ЗначениеКлассификатора;
		
		НоваяСтрока.Справочник = МетаданныеЗначения.ПолноеИмя();
		
		Если ТипЗнч(ЗначениеКлассификатора) = Тип("СправочникСсылка.КлассификаторыМинЗдрава") Тогда
			НоваяСтрока.ВидКлассификатора = ЗначениеКлассификатора.ВидКлассификатора;
		КонецЕсли;
		
		КлассификаторыЕГИСЗ.Добавить(ЗначениеКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСопоставленныйЭлементКлассификатора(ТаблицаКлассификаторов, СсылкаИсточника)
	
	Если ТаблицаКлассификаторов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Найти(СсылкаИсточника, "Ссылка");
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат СтрокаТаблицы.СуществующаяСсылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЭлементКлассификатора(ИмяСправочника, ВидКлассификатора, УИДЕГИСЗ)
	
	НайденныйЭлемент = Неопределено;
	
	Запрос = Новый Запрос;
	Если Не ЗначениеЗаполнено(ВидКлассификатора) Тогда
		Запрос.Текст = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ТаблицаКлассификатора.Ссылка КАК Ссылка
		 |ИЗ
		 |	&ТаблицаКлассификатора КАК ТаблицаКлассификатора
		 |ГДЕ
		 |	ТаблицаКлассификатора.УИДЕГИСЗ = &УИДЕГИСЗ
		 |
		 |УПОРЯДОЧИТЬ ПО
		 |	ТаблицаКлассификатора.ПометкаУдаления,
		 |	ТаблицаКлассификатора.АРХИВ"
		;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаКлассификатора", ИмяСправочника);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаКлассификатора.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлассификаторыМинЗдрава КАК ТаблицаКлассификатора
		|ГДЕ
		|	ТаблицаКлассификатора.ВидКлассификатора = &ВидКлассификатора
		|	И ТаблицаКлассификатора.УИДЕГИСЗ = &УИДЕГИСЗ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаКлассификатора.ПометкаУдаления,
		|	ТаблицаКлассификатора.Архив"
		;
		Запрос.УстановитьПараметр("ВидКлассификатора", ВидКлассификатора);
	КонецЕсли;
	Запрос.УстановитьПараметр("УИДЕГИСЗ", УИДЕГИСЗ);
	
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		НайденныйЭлемент = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

Функция ТребуетсяСоздатьВерсию(ШаблонHTML)
	
	Если ШаблонHTML.ВидШаблона <> Перечисления.ВидыШаблонов.HTMLШаблон Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонHTML.ТекстHTML) Тогда
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ШаблонHTML.ТекстHTML);
		Если РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-draw-id").Количество() > 0
			Или РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-selected-img-id").Количество() > 0
			Или РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-dyntable-id").Количество() > 0
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонHTML.Ссылка.ТекстHTML) Тогда
		ИсходныйДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ШаблонHTML.Ссылка.ТекстHTML);
		Если РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ИсходныйДокументHTML,,, "data-bit-draw-id").Количество() > 0
			Или РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ИсходныйДокументHTML,,, "data-bit-selected-img-id").Количество() > 0
			Или РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ИсходныйДокументHTML,,, "data-bit-dyntable-id").Количество() > 0
		Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
