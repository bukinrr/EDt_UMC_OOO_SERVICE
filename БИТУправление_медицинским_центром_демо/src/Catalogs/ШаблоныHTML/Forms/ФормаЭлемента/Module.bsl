#Область РазделОписанияПеременных

&НаКлиенте
Перем ПредыдущаяСтраница;

&НаКлиенте
Перем ТекстHTMLИзмененВручную;

&НаКлиенте
Перем НеАктивизироватьСтрокуПараметра;

&НаКлиенте
Перем мсНеОбрабатываемыеУИД;

&НаКлиенте
Перем соотвКешИзображенийШаблонов;

&НаКлиенте
Перем ДанныеТекущегоЭлементаШаблонаHTML;

&НаКлиенте
Перем ДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag;

&НаКлиенте
Перем НажатиеВПолеHTMLДокумента;

&НаКлиенте
Перем ТегиПоддерживающиеСкрываемость;

&НаКлиенте
Перем ТегиРазрешающиеВставкуПараметров;

&НаКлиенте
Перем ПредставлениеИменТегов;

&НаКлиенте
Перем ДанныеЭлементаHTMLДляКонтекстногоМеню;

&НаКлиенте
Перем РедактированиеСтруктурыHTML;

&НаКлиенте
Перем ИндексТекущейТаблицы;

&НаКлиенте
Перем ТегиПоддерживающиеРисование;

&НаКлиенте
Перем ЕстьРисунки;

&НаКлиенте
Перем ПредыдущееИмяВстроеннойОбработки;

&НаКлиенте
Перем КэшДопустимыхЗначений;

&НаКлиенте
Перем соотвКешДобавленныхИзображений;

&НаКлиенте
Перем РедактированиеСекцийСЭМД;

&НаКлиенте
Перем ИменаСекцийСЭМД;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьКешПараметров();
	ЗаполнитьТипыЗначенийПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая()
		И ЗначениеЗаполнено(ЭтотОбъект.Параметры.ЗначениеКопирования)
	Тогда
		ЗаполнитьКешПараметров();
		ЗаполнитьТипыЗначенийПараметров();
	КонецЕсли;
	
	РасширенныеВозможностиРедактирования = ОбщегоНазначенияСервер.РежимРасширенныхВозможностейРедактированияДанных();
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	Если Не ЗначениеЗаполнено(Объект.ВидШаблона) Тогда
		Объект.ВидШаблона = Перечисления.ВидыШаблонов.HTMLШаблон;
	КонецЕсли;
	
	Если Объект.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
		ДанныеОбработки = ПолучитьДанныеОбработкиСервер();
		Если ДанныеОбработки <> Неопределено Тогда
			Если ТипЗнч(ДанныеОбработки) = Тип("Строка") Тогда
				ВстроеннаяОбработка = Истина;
				ИмяВстроеннойОбработки = ДанныеОбработки;
			Иначе
				ДвоичныеДанныеОбработки = ДанныеОбработки;
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
				ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяЭП = ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК();
	НастроитьЭлементыФормыПриСоздании();
	
	мРасположения = Справочники.ШаблоныHTML.РасположенияПодписи(Объект.ВидШаблона);
	Элементы.РасположениеПодписи.СписокВыбора.ЗагрузитьЗначения(мРасположения);
	
	Для Каждого МетаданныеВстроеннойОбработки Из Справочники.ШаблоныHTML.МетаданныеВстроенныхОбработок() Цикл
		Элементы.ИмяВстроеннойОбработки.СписокВыбора.Добавить(МетаданныеВстроеннойОбработки.Имя, МетаданныеВстроеннойОбработки.Синоним);
	КонецЦикла;
	
	Если ТипЗнч(Объект.РасположениеПодписи) = Тип("Число") Тогда
		Объект.РасположениеПодписи = Справочники.ШаблоныHTML.ЧисловыеРасположенияПодписи().Получить(Объект.РасположениеПодписи);
	ИначеЕсли Объект.РасположениеПодписи = Неопределено Тогда
		Объект.РасположениеПодписи = Перечисления.РасположениеПодписи.ПослеДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.РолиПодписей.Количество() = 0
	Тогда
		РольАвтора = Объект.РолиПодписей.Добавить();
		РольАвтора.Роль = ИнтеграцияЕГИСЗСервер.ЭлементКлассификатораПоID(19, "РолиПриПодписиМедДокументов"); // Автор документа
		РольАвтора.Обязательная = Истина;
		РольАвтора.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.АвторДокумента;
		РольАвтора.ИдентификаторРоли = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ЗаполнитьРолиПодписей();
	
	// СЭМД
	ЗаполнитьИсточникиЗаполненийLocalid();
	УстановитьУсловноеОформлениеТаблицыLocalid();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьИзображенияHTMLШаблона();
	
	ТекстHTMLПоУмолчанию = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию();
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(Объект.ТекстHTML), ТекстHTMLПоУмолчанию, Объект.ТекстHTML));
	
	// Прорисовка областей исключения из печати вариантов клиента и медкарты.
	Если ЗначениеЗаполнено(мУчетнаяПолитика.РежимРазметкиКлиентскойОбластиШаблоновПриема) Тогда
		ДокументHTML = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьСтильКлиентскойОбластиДокумента(ДокументHTML);
	КонецЕсли;
	
	ПриОткрытииЗаполнитьКонстантыФормы();
	
	ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML);
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	
	ПредыдущаяСтраница = Элементы.СтраницаHTML;
	НажатиеВПолеHTMLДокумента = Ложь;
	ТекстHTMLИзмененВручную = Ложь;
	
	РедактированиеСтруктурыHTML = Ложь;
	Элементы.ДеревоТеговГруппаРедактированиеСтруктурыHTML.Видимость = РедактированиеСтруктурыHTML;
	Элементы.ДеревоТеговГруппаПеремещенияИУдаленияТегов.Видимость = РедактированиеСтруктурыHTML;
	
	ЕстьРисунки = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-draw-id").Количество() > 0;
	
	ПредыдущееИмяВстроеннойОбработки = ИмяВстроеннойОбработки;
	
	// СЭМД
	ВидДокументаПриИзменении(Неопределено);
	ПроверитьСовпадениеТиповДанныхСЭМД();
	ЗаполнитьПредставленияLocalid();
	ОбновитьФлагиИспользованДляТаблицыLocalid();
	
	РедактированиеСекцийСЭМД = Ложь;
	ИменаСекцийСЭМД = Новый Массив;
	Элементы.ДеревоТеговСЭМД_ИмяСекции.Видимость = РедактированиеСекцийСЭМД;
	Элементы.ДеревоТеговДеревоТегов_СЭМД_ПроверитьКорректностьСекций.Видимость = РедактированиеСекцийСЭМД;
	Элементы.ДеревоТеговДеревоТегов_СЭМД_ЗаполнитьСекцииАвтоматически.Видимость = РедактированиеСекцийСЭМД;
	
	УстановитьДоступностьКнопокКонтекстногоМенюПоляHTML();
	
	Если Объект.ВидДокумента <> ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон")
		И ЗначениеЗаполнено(Параметры.ПараметрHTML)
	Тогда
		СтрокиПараметров = Объект.СоответствияПараметрам.НайтиСтроки(Новый Структура("Параметр", Параметры.ПараметрHTML));
		Если СтрокиПараметров.Количество() > 0 Тогда
			Элементы.СоответствияПараметрам.ТекущаяСтрока = Объект.СоответствияПараметрам.Индекс(СтрокиПараметров[0]);
		КонецЕсли;
		
		СтрокиПараметровТаблицы = Объект.СоответствияТаблицамШаблонов.НайтиСтроки(Новый Структура("Параметр", Параметры.ПараметрHTML));
		Если СтрокиПараметровТаблицы.Количество() > 0 Тогда
			Элементы.СоответствияТаблицамШаблонов.ТекущаяСтрока = Объект.СоответствияТаблицамШаблонов.Индекс(СтрокиПараметровТаблицы[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ЗаполнитьПредставленияLocalid();
		РасставитьАтрибутыСекцийВHTML();
	КонецЕсли;
	
	ДокументHTML = Неопределено;
	
	Если Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон") Тогда
		
		ДокументHTML = ВыполнитьОбработкуHTMLШаблонаПередЗаписью(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ДокументHTMLБезСтилейКлиентскихОбластей = РаботаСШаблонамиHTMLКлиентСервер.УдалитьСтильКлиентскойОбластиДокумента(ДокументHTML);
		Объект.ТекстHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTMLБезСтилейКлиентскихОбластей);
		
		ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML);
		
	КонецЕсли;
	
	СохранитьРолиПодписей();
	
	Если мУчетнаяПолитика.ИспользоватьВерсионированиеШО
		И Не Объект.Ссылка.Пустая()
		И ПроверитьИзменениеРеквизитовШаблона()
	Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Шаблон был изменен, создать новую версию шаблона?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВерсионированиеШаблонов.СоздатьВерсиюШаблона(Объект.Ссылка);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			ТекстСообщения = СформироватьТекстСообщенияСТребованиемПоВерсионированию(ДокументHTML);
			Если ТекстСообщения <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоСтруктурированныйФорматЭМД = ЗначениеЗаполнено(Объект.ВидДокумента) И ХарактеристикиВидаДокумента(Объект.ВидДокумента).ФорматДокументаCDA;
	
	Если ИспользуетсяИнтеграцияРЭМД И Модифицированность И ЭтоСтруктурированныйФорматЭМД Тогда
		
		ТекстОшибки = ИнтеграцияЕГИСЗ_СЭМДКлиент.СформироватьТекстОшибок(ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента, ТаблицаПараметровСЭМД(), Объект.СоответствияТаблицамШаблонов, Объект.ВидШаблона);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СтрокиТекстаВопроса = Новый Массив;
			СтрокиТекстаВопроса.Добавить(НСтр("ru='Обнаружены ошибки при заполнении страницы СЭМД!"));
			СтрокиТекстаВопроса.Добавить(ТекстОшибки);
			СтрокиТекстаВопроса.Добавить(НСтр("ru='Продолжить запись?'"));
			
			Ответ = Вопрос(СтрСоединить(СтрокиТекстаВопроса, Символы.ПС), РежимДиалогаВопрос.ДаНет);
			Отказ = Ответ = КодВозвратаДиалога.Нет;
		КонецЕсли;
	КонецЕсли;
	
	СортировкаТаблицыПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РегистрацияОбработки Тогда
		ТекущийОбъект.Обработка = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки , Новый СжатиеДанных(9));
		РегистрацияОбработки = Ложь;
	Иначе
		Если ТекущийОбъект.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
			ТекущийОбъект.НазваниеФайла = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ВстроеннаяОбработка Тогда
		ТекущийОбъект.НазваниеФайла = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьТипыЗначенийПараметров();
	ОбновитьПредставленияГруппирующихПолейКонстант();
	Если Объект.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
		ЗаполнитьКешПараметров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ТекстКодаHTML.УстановитьТекст(РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзКодаДокумента(Объект.ТекстHTML));
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Объект.ТекстHTML);
	Если ЗначениеЗаполнено(мУчетнаяПолитика.РежимРазметкиКлиентскойОбластиШаблоновПриема) Тогда
		ДокументHTML = РаботаСШаблонамиHTMLКлиентСервер.ДобавитьСтильКлиентскойОбластиДокумента(ДокументHTML);
	КонецЕсли;
	ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML);
	ЗаполнитьПредставленияLocalid();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// Определение изменения текста нтмл без модифицированности формы.
	Если Не Модифицированность
		И Не Объект.Ссылка.Пустая()
		И Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон")
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML
		И ОбщегоНазначения.ЕстьПравоДоступа("Редактирование", "Справочник.ШаблоныHTML")
	Тогда
	
		ТекстHTML = РаботаСШаблонамиHTMLКлиентСервер.НормализоватьТекстHTMLШаблона(Элементы.ПолеHTMLДокумента.Документ.body.innerHTML);
		ДокументHTML = РаботаСШаблонамиHTMLКлиентСервер.УдалитьСтильКлиентскойОбластиДокумента(РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML));
		ТекстHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
		
		НормализованныйТекстHTML = УбратьИсточникиВыбираемогоИзображения(ТекстHTML);
		НормализованныйТекстHTMLПред = УбратьИсточникиВыбираемогоИзображения(ДопСерверныеФункции.ПолучитьРеквизит(Объект.Ссылка, "ТекстHTML"));
		
		НормализованныйТекстHTML = РаботаСШаблонамиHTMLКлиентСервер.НормализоватьОтступы(НормализованныйТекстHTML);
		НормализованныйТекстHTMLПред = РаботаСШаблонамиHTMLКлиентСервер.НормализоватьОтступы(НормализованныйТекстHTMLПред);
		
		Если НормализованныйТекстHTML <> НормализованныйТекстHTMLПред Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗначениеЗаполнено(ВременныйКаталогИзображений) Тогда
		УдалитьФайлы(ВременныйКаталогИзображений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ПереданныеПараметры, Источник)
	
	Если ИмяСобытия = "СобытиеЗакрытияФормыВыбораПараметраHTML" Тогда
		Если Источник <> ЭтотОбъект Тогда
			Возврат;
		КонецЕсли;
		
		ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
		ИмяКоманды = ПереданныеПараметры["ИмяКоманды"];
		ПараметрСсылка = ПереданныеПараметры["ВыбранныйЭлемент"];
		Если ПараметрСсылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ИмяКоманды = "КонтекстноеМенюИзменение" Тогда
			
			УИДНовогоПараметра = Строка(ПараметрСсылка.УникальныйИдентификатор());
			
			Если ДанныеЭлементаHTMLДляКонтекстногоМеню <> Неопределено
				И ЗначениеЗаполнено(ДанныеЭлементаHTMLДляКонтекстногоМеню.id)
				И УИДНовогоПараметра <> ДанныеЭлементаHTMLДляКонтекстногоМеню.id
			Тогда
				
				ЭлементыПараметраHTML = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ДанныеЭлементаHTMLДляКонтекстногоМеню.id);
				Если ЭлементыПараметраHTML.length = 1 Тогда
					УдалитьСтрокуПараметра(ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра", ДанныеЭлементаHTMLДляКонтекстногоМеню.id))[0]);
					ЭлементыПараметраHTML[0].id = УИДНовогоПараметра;
				КонецЕсли;
				
				ДополнитьКешПараметров(РаботаСШаблонамиHTML.ПолучитьПараметрПоУИД(УИДНовогоПараметра, Ложь), Ложь);
				
				НеАктивизироватьСтрокуПараметра = Истина;
				Модифицированность = Истина;
			КонецЕсли;
			ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено;
		Иначе
			Если Не ЗначениеЗаполнено(ИмяКоманды) Тогда
				Если Не ДобавитьПараметрВШаблон("ПолеВвода", ПараметрСсылка, , Истина) Тогда
					Возврат;
				КонецЕсли;
			Иначе
				ВидПараметра = СтрЗаменить(ИмяКоманды, "КомандаВставить", "");
				Если Не ДобавитьПараметрВШаблон(ВидПараметра, ПараметрСсылка, , Истина) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
			
			// Выделение строки добавленного параметра
			ТекСтрокаПараметра = ПолучитьПараметрИзКеша(Строка(ПараметрСсылка.УникальныйИдентификатор()), Истина);
			Если ТекСтрокаПараметра <> Неопределено Тогда
				Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ТекСтрокаПараметра.ПолучитьИдентификатор();
			КонецЕсли;
			НеАктивизироватьСтрокуПараметра = Истина;
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьПараметраHTML" Тогда
		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", ПереданныеПараметры.Параметр));
		Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
			Если СтрокаПараметра.ТипЗначения <> ПереданныеПараметры.ТипЗначения Тогда
				СтрокаПараметра.ТипЗначения = ПереданныеПараметры.ТипЗначения;
				Если ЗначениеЗаполнено(СтрокаПараметра.localid) Тогда
					СтрокаПараметра.localid = "";
					СтрокаПараметра.localidПредставление = "";
					ОбновитьФлагиИспользованДляТаблицыLocalid();
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML, ОбновлятьИзображения = Истина, СтраницаHTML = Истина, СтраницаТекст = Истина)
	
	НеАктивизироватьСтрокуПараметра = Истина;
	
	Если ОбновлятьИзображения Тогда
		РаботаСШаблонамиHTMLКлиентСервер.ЗагрузитьИзображенияПриема(ДокументHTML, соотвКешИзображенийШаблонов, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтраницаHTML Тогда
		УстановитьСкриптКонтекстногоМеню(ДокументHTML);
		ТекстРедактораHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	КонецЕсли;
	Если СтраницаТекст Тогда
		ТекстКодаHTML.УстановитьТекст(РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML));
	КонецЕсли;
	
	ТекстПросмотраHTML = ТекстКодаHTML.ПолучитьТекст();
	ОбработатьКнопкиДобавленияИзображений();
	ДобавитьКнопкиРедактированияКартинок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПараметр(Команда)
	
	ПараметрОткрытия = Новый Структура("Команда", Команда.Имя);
	ОткрытьФорму("ПланВидовХарактеристик.ПараметрыHTML.Форма.ФормаВыбора", ПараметрОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЭлемент(Команда)
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	ВидЭлемента = СтрЗаменить(Команда.Имя, "КомандаВставить", "");
	
	ДобавитьПараметрВШаблон(ВидЭлемента, , Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыШаблонаНеСтрокаЧисло()
	
	СписокОтбора = Новый СписокЗначений;
	Выб = ПланыВидовХарактеристик.ПараметрыHTML.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Не Выб.ЭтоГруппа Тогда
			Если Не (Выб.ТипЗначения.СодержитТип(Тип("Число"))
				Или Выб.ТипЗначения.СодержитТип(Тип("Строка")))
			Тогда
				СписокОтбора.Добавить(Выб.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОтбора;
	
КонецФункции

&НаКлиенте
Процедура КомандаВставитьВвод(Команда)
	
	НеАктивизироватьСтрокуПараметра = Истина;
	
	ПараметрОткрытия = Новый Структура("СписокОтбора", ПолучитьПараметрыШаблонаНеСтрокаЧисло());
	ОткрытьФорму("ПланВидовХарактеристик.ПараметрыHTML.Форма.ФормаВыбора", ПараметрОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьВычисляемыйБлок(Команда)
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	
	ПараметрыФормы = Новый Структура("Отбор, ПолучательВычисляемогоЗначения");
	ПолучателиВычисляемогоЗначения = Новый СписокЗначений;
	ПолучателиВычисляемогоЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ПолучателиВычисляемогоЗначения.ВычисляемыйБлок"));
	ПолучателиВычисляемогоЗначения.Добавить(ПредопределенноеЗначение("Перечисление.ПолучателиВычисляемогоЗначения.ПустаяСсылка"));
	ПараметрыФормы.Отбор = Новый Структура("ПолучательВычисляемогоЗначения", ПолучателиВычисляемогоЗначения);
	ПараметрыФормы.ПолучательВычисляемогоЗначения = ПредопределенноеЗначение("Перечисление.ПолучателиВычисляемогоЗначения.ВычисляемыйБлок");
	
	ФормаВыбора = ПолучитьФорму("Справочник.ВычисляемыеЗначенияПараметров.ФормаВыбора", ПараметрыФормы);
	
	ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстHTMLБлока = "<tt id=" + Строка(ЗначениеВыбора.УникальныйИдентификатор()) + ">" + "&lt;" + СокрЛП(ЗначениеВыбора) + "&gt;" + "</tt>";
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML Тогда
		ДобавитьТекстHTMLВДокумент(ДокументHTML, ТекстHTMLБлока, "tt");
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТекст Тогда
		ДобавитьКодHTMLВДокумент(Элементы.ПолеКодаHTML, ТекстHTMLБлока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьКомментарий(Команда)
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	ВидЭлемента = СтрЗаменить(Команда.Имя, "КомандаВставить", "");
	
	ДобавитьПараметрВШаблон(ВидЭлемента, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьВыбираемаяКартинка(Команда)
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	ВидЭлемента = СтрЗаменить(Команда.Имя, "КомандаВставить", "");
	
	ДобавитьПараметрВШаблон(ВидЭлемента, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	ДокументHTML = Элемент.Документ;
	
	Если Не РаботаСHTMLКлиентСервер.ЭлементПустой(ДокументHTML) И Не РаботаСHTMLКлиентСервер.ЭлементПустой(ДокументHTML.body) Тогда
		ДокументHTML.body.contentEditable = "true";
		ДокументHTML.designMode = "On";
	КонецЕсли;
	
	ОбновитьДеревоТегов();
	
	childNodes = ?(ДокументHTML.body <> Неопределено, ДокументHTML.body.childNodes, ДокументHTML.childNodes);
	Если childNodes.length > 0
		И Не РаботаСHTMLКлиентСервер.ЭлементПустой(childNodes.item(0))
	Тогда
		Попытка
			childNodes.item(0).focus();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	НеАктивизироватьСтрокуПараметра = Ложь;
	ТекстHTMLПоследний = Элемент.Документ.body.outerHTML;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрHTML) Тогда
		СтрокиТаблицыПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", Параметры.ПараметрHTML));
		Если СтрокиТаблицыПараметров.Количество() > 0 Тогда
			Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ТаблицаПараметров.Индекс(СтрокиТаблицыПараметров[0]);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыЭлементаHTML(ПолучитьТекущийЭлементШаблонаHTML());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ДанныеСобытия.Element);
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Чтобы не срабатывал переход по ссылке
	Если ВРег(ДанныеСобытия.Element.TagName) = "A" Или ВРег(ЭлементHTML.TagName) = "A" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ТегЭлемента = ВРег(ЭлементHTML.TagName);
	
	мсСтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра", ЭлементHTML.id));
	Если мсСтрокаПараметра.Количество() > 0 Тогда
		
		СтрокаПараметра = мсСтрокаПараметра[0];
		
		Если ЗначениеЗаполнено(СтрокаПараметра.localid) Тогда
			ДопустимыеЗначения = КэшДопустимыхЗначений.Получить(СтрокаПараметра.localid);
			Если ДопустимыеЗначения <> Неопределено Тогда
				СтрокаПараметра.ДопустимыеЗначения.ЗагрузитьЗначения(ДопустимыеЗначения);
			КонецЕсли;
		КонецЕсли;
		
		РаботаСШаблонамиHTMLКлиент.ВыбратьЗначениеПараметраHTMLИнтерактивно(ЭтаФорма, Элемент.Имя, ЭлементHTML, СтрокаПараметра);
		СтрокаПараметра.ДопустимыеЗначения.Очистить();
	КонецЕсли;
	
	Если ТегЭлемента = "BUTTON" Тогда
		ОбработатьНажатиеКнопки(ЭлементHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбработатьНажатиеКнопки(ЭлементHTMLКнопка)
	
	ИдентификаторКнопкиРедактированияКартинки = РаботаСШаблонамиHTMLКлиент.ПолучитьЗначениеАтрибутаБлижайшегоРодительскогоУзла(ЭлементHTMLКнопка, "data-bit-container-draw-id");
	
	Если ЗначениеЗаполнено(ИдентификаторКнопкиРедактированияКартинки)
		И ИдентификаторКнопкиРедактированияКартинки = ЭлементHTMLКнопка.parentNode.id
	Тогда
		
		УзелКартинки = ЭлементHTMLКнопка.parentNode.parentNode.lastChild;
		ДанныеКартинки = соотвКешИзображенийШаблонов.Получить(УзелКартинки.id);
		Если ДанныеКартинки = Неопределено Тогда
			ДанныеКартинки = соотвКешДобавленныхИзображений.Получить(УзелКартинки.id);
		КонецЕсли;
		
		Если ДанныеКартинки <> Неопределено Тогда
			ОткрытьФорму("ОбщаяФорма.РедактированиеКартинки", Новый Структура("ДанныеКартинки", ДанныеКартинки), ЭтотОбъект);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИдентификаторКнопкиВыбораКартинки = РаботаСШаблонамиHTMLКлиент.ПолучитьЗначениеАтрибутаБлижайшегоРодительскогоУзла(ЭлементHTMLКнопка, "data-bit-selected-img-container-id");
	
	Если ЗначениеЗаполнено(ИдентификаторКнопкиВыбораКартинки)
		И ИдентификаторКнопкиВыбораКартинки = ЭлементHTMLКнопка.parentNode.id
	Тогда
		
		Результат = Ждать РаботаСШаблонамиHTMLКлиент.ОбработатьНажатиеКнопкиИзмененияИзображения(УникальныйИдентификатор, ЭлементHTMLКнопка);
		
		Если Результат <> Неопределено Тогда
			соотвКешДобавленныхИзображений.Вставить(РаботаСШаблонамиHTMLКлиентСервер.ПолучитьЭлементДобавляемогоИзображения(ЭлементHTMLКнопка.parentNode.parentNode).id, Результат);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИзменениеРеквизитовШаблона()
	
	ПредШаблон = Объект.Ссылка;
	ШаблонИзменен = Ложь;
	Если ПредШаблон.ТекстHTML <> РаботаСШаблонамиHTMLКлиентСервер.НормализоватьОтступы(Объект.ТекстHTML)
		Или ПредШаблон.ВидШаблона <> Объект.ВидШаблона
		Или ПредШаблон.Обработка.Получить() <> ДвоичныеДанныеОбработки
		Или ПредШаблон.ВидДокумента <> Объект.ВидДокумента
		Или ПредШаблон.НеИспользоватьШапкуШаблона <> Объект.НеИспользоватьШапкуШаблона
		Или ТаблицаИзменилась("СоответствияПараметрам", "Параметр, localid, КлассификацияПоля, ГруппирующееПоле, ОбъединяющееПоле")
		Или ТаблицаИзменилась("СоответствияТаблицамШаблонов", "Параметр, localid, КлассификацияПоля, ГруппирующееПоле")
		Или ТаблицаИзменилась("КонстантыCDAДокумента", "localid, Значение")
		Или ПредШаблон.РасположениеПодписи <> Объект.РасположениеПодписи
		Или ПредШаблон.ВидМедицинскойДокументации <> Объект.ВидМедицинскойДокументации
		Или ТаблицаИзменилась("РолиПодписей", "Роль, Обязательная, РежимНастройкиДоступности, ПризнакДоступностиРоли")
		Или ПредШаблон.НеФормироватьОтдельныйЭМД <> Объект.НеФормироватьОтдельныйЭМД
	Тогда
		ШаблонИзменен = Истина;
	КонецЕсли;
	
	Возврат ШаблонИзменен;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьОбработкуHTMLШаблонаПередЗаписью(Отказ)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML Тогда
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Элементы.ПолеHTMLДокумента.Документ.body.innerHTML);
	Иначе
		ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(ТекстHTML), РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию(), ТекстHTML));
	КонецЕсли;
	
	РаботаСШаблонамиHTMLКлиентСервер.НормализоватьВычисляемыеБлокиHTML(ДокументHTML);
	
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	ЗаполнитьСписокИзображенийПоШаблону(ДокументHTML, соотвКешИзображенийШаблонов);
	ЗаполнитьСоответствияПараметрам();
	
	ТекстТелаHTML = РаботаСDOMКлиентСервер.ПолучитьКодТелаHTMLИзДокументаDOM(ДокументHTML);
	ОписаниеОшибки = "";
	Если Не РаботаСШаблонамиHTMLКлиентСервер.ПроверкаВозможностиОбъединенияHTML(ТекстТелаHTML, ТекстТелаHTML, ОписаниеОшибки) Тогда
		ТекстВопроса = НСтр("ru = 'Обнаружены нераразрешимые проблемы в составе шаблона осмотра! 
		|Чаще всего это случается, если в шаблон копировался форматированный текст или сложные объекты из текстовых редакторов, например, MS Word.
		|Корректная работа шаблона, а также его отображение в электронной медицинской карте не гарантируется. Рекомендуется переделать шаблон. Продолжить сохранение?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

&НаКлиенте
Функция СформироватьТекстСообщенияСТребованиемПоВерсионированию(ДокументHTML)
	
	Если ДокументHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-draw-id").Количество() > 0 Тогда
		Возврат НСтр("ru='В шаблоне имеются картинки с включенной поддержкой рисования. Необходимо создать новую версию шаблона.'");
	ИначеЕсли РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-selected-img-id").Количество() > 0 Тогда
		Возврат НСтр("ru='В шаблоне имеются выбираемые картинки. Необходимо создать новую версию шаблона.'");
	ИначеЕсли РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-dyntable-id").Количество() > 0 Тогда
		Возврат НСтр("ru='В шаблоне имеются таблицы параметров. Необходимо создать новую версию шаблона.'");
	КонецЕсли;
	
	ИсходныйДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Объект.ТекстHTML);
	
	Если РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ИсходныйДокументHTML,,, "data-bit-draw-id").Количество() > 0 Тогда
		Возврат НСтр("ru='В исходном тексте шаблона имелись картинки с включенной поддержкой рисования. Необходимо создать новую версию шаблона.'");
	ИначеЕсли РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ИсходныйДокументHTML,,, "data-bit-selected-img-id").Количество() > 0 Тогда
		Возврат НСтр("ru='В исходном тексте шаблона имелись выбираемые картинки. Необходимо создать новую версию шаблона.'");
	ИначеЕсли РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ИсходныйДокументHTML,,, "data-bit-dyntable-id").Количество() > 0 Тогда
		Возврат НСтр("ru='В исходном тексте шаблона имелись таблицы параметров. Необходимо создать новую версию шаблона.'");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСоответствияПараметрам()
	
	Объект.СоответствияПараметрам.Загрузить(ТаблицаПараметров.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Команда = Сред(Элемент.Имя, 8);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеHTMLДокумента;
	
	СтилиКоманд = Новый Соответствие;
	СтилиКоманд.Вставить("FontName", "font-family");
	СтилиКоманд.Вставить("FontSize", "font-size");
	
	Выделение = Элементы.ПолеHTMLДокумента.Документ.getSelection();
	Диапазон = Выделение.getRangeAt(0);
	СтильКоманды = СтилиКоманд.Получить(Команда);
	
	Если Команда = "FontSize" Тогда
		ЗначаениеСтиля = ПолучитьЗначениеСтиляРазмераШрифта(ВыбранноеЗначение);
	Иначе
		ЗначаениеСтиля = ВыбранноеЗначение;
	КонецЕсли;
	
	ТекущийЭлементДиапазона = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(Диапазон.startContainer);
	
	Если СтильКоманды <> Неопределено
		И Диапазон.startContainer = Диапазон.endContainer
		И ТекущийЭлементДиапазона <> Неопределено
		И Не СтрНачинаетсяС(ТекущийЭлементДиапазона.id, "Заголовок_")
	Тогда
		УстановитьСтильДляЭлемента(СтильКоманды, ЗначаениеСтиля, ТекущийЭлементДиапазона);
		Возврат;
	КонецЕсли;
	
	ПроверитьКраяДиапазона(Диапазон);
	Выделение.removeAllRanges();
	Выделение.addRange(Диапазон);
	
	мЭлементыПараметров = ПолучитьЭлементыПараметровВВыделении(Диапазон.commonAncestorContainer, Выделение);
	
	Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Команда) Тогда
		Элементы.ПолеHTMLДокумента.Документ.execCommand(Команда, Истина, ВыбранноеЗначение);
	КонецЕсли;
	
	Если СтильКоманды <> Неопределено Тогда
		УстановитьЗначениеСтиляУЭлементов(СтильКоманды, ЗначаениеСтиля, мЭлементыПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеСтиляУЭлементов(СтильКоманды, ЗначаениеСтиля, мЭлементыПараметров, Отключаемый = Ложь)
	
	Для Каждого ЭлементПараметра Из мЭлементыПараметров Цикл
		УстановитьСтильДляЭлемента(СтильКоманды, ЗначаениеСтиля, ЭлементПараметра, Отключаемый);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтильДляЭлемента(СтильКоманды, ЗначаениеСтиля, ЭлементHTML, Отключаемый = Ложь)
	
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТега = НРег(ЭлементHTML.nodeName);
	
	Если (ИмяТега = "a"
		Или ИмяТега = "input"
		Или ИмяТега = "textarea")
	Тогда
		Если Отключаемый И ЭлементHTML.style[СтильКоманды] = ЗначаениеСтиля Тогда
			ЭлементHTML.style[СтильКоманды] = "";
		Иначе
			ЭлементHTML.style[СтильКоманды] = ЗначаениеСтиля;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКраяДиапазона(Диапазон)
	
	НачальныйЭлемент = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(Диапазон.startContainer);
	Если НачальныйЭлемент <> Неопределено
		И НРег(НачальныйЭлемент.nodeName) = "a"
	Тогда
		Диапазон.setStartBefore(НачальныйЭлемент);
	КонецЕсли;
	
	КонечныйЭлемент = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(Диапазон.endContainer);
	Если КонечныйЭлемент <> Неопределено
		И НРег(КонечныйЭлемент.nodeName) = "a"
	Тогда
		Диапазон.setEndAfter(КонечныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеСтиляРазмераШрифта(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение > 6 Тогда
		Возврат "-webkit-xxx-large";
	КонецЕсли;
	
	ЗначенияСтилей = Новый Соответствие;
	ЗначенияСтилей.Вставить(1, "xx-small");
	ЗначенияСтилей.Вставить(2, "small");
	ЗначенияСтилей.Вставить(3, "medium");
	ЗначенияСтилей.Вставить(4, "large");
	ЗначенияСтилей.Вставить(5, "x-large");
	ЗначенияСтилей.Вставить(6, "xx-large");
	
	Возврат ЗначенияСтилей.Получить(ВыбранноеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКоманду(Кнопка)
	
	Команда = Сред(Кнопка.Имя, 8);
	
	СтилиКоманд = Новый Соответствие;
	СтилиКоманд.Вставить("Bold",		Новый Структура("Стиль, Значение", "fontWeight",	 "bold"));
	СтилиКоманд.Вставить("Italic",		Новый Структура("Стиль, Значение", "fontStyle",		 "italic"));
	СтилиКоманд.Вставить("Underline",	Новый Структура("Стиль, Значение", "textDecoration", "underline"));
	
	Выделение = Элементы.ПолеHTMLДокумента.Документ.getSelection();
	Диапазон = Выделение.getRangeAt(0);
	СтильКоманды = СтилиКоманд.Получить(Команда);
	
	Если СтильКоманды <> Неопределено И Диапазон.startContainer = Диапазон.endContainer И Диапазон.startOffset = Диапазон.endOffset Тогда
		ТекущийЭлементДиапазона = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(Диапазон.startContainer);
		УстановитьСтильДляЭлемента(СтильКоманды.Стиль, СтильКоманды.Значение, ТекущийЭлементДиапазона, Истина);
		Возврат;
	КонецЕсли;
	
	ПроверитьКраяДиапазона(Диапазон);
	Выделение.removeAllRanges();
	Выделение.addRange(Диапазон);
	
	мЭлементыПараметров = ПолучитьЭлементыПараметровВВыделении(Диапазон.commonAncestorContainer, Выделение);
	
	Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Команда) Тогда
		Элементы.ПолеHTMLДокумента.Документ.execCommand(Команда, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.ПараметрыЭлементовHTML.Доступность = Ложь;
	Элементы.СкрыватьТег.Доступность			= Ложь;
	Элементы.ГруппаСворачиваемость.Доступность	= Ложь;
	Элементы.ДоступноРисование.Доступность		= Ложь;
	
	Если ПредыдущаяСтраница = Элементы.СтраницаHTML Тогда
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(Элементы.ПолеHTMLДокумента.Документ.body.innerHTML);
		ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML,,Ложь,Истина);
	ИначеЕсли ТекстHTMLИзмененВручную Тогда
		ТекстHTMLИзмененВручную = Ложь;
		ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
		ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(ТекстHTML), РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию(), ТекстHTML));
		ЕстьРисунки = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML,,, "data-bit-draw-id").Количество() > 0;
		ЗаполнитьСтраницыШаблонаПоДокументуHTML(ДокументHTML,,Истина,Ложь);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаHTML Тогда
		
		Элементы.КоманднаяПанельКнопок.Доступность	 = Истина;
		Элементы.ГруппаВыпадающихСписков.Доступность = Истина;
		Элементы.ГруппаДерево.Доступность			 = Истина;
		
		ПредыдущаяСтраница = Элементы.СтраницаHTML;
		ДеревоТеговРедактированиеHTMLДоступностьЭлементов();
		
		Если Элементы.ФормаОтображатьДеревоТегов.Пометка Тогда
			ДеревоТеговПриАктивизацииСтроки(Элементы.ДеревоТегов);
		КонецЕсли;
		
		УстановитьПараметрыЭлементаHTML(ПолучитьТекущийЭлементШаблонаHTML());
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТекст Тогда
		
		Элементы.КоманднаяПанельКнопок.Доступность	 = Ложь;
		Элементы.ГруппаВыпадающихСписков.Доступность = Ложь;
		Элементы.ГруппаДерево.Доступность			 = Ложь;
		
		ПредыдущаяСтраница = Элементы.СтраницаТекст;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		
		Элементы.КоманднаяПанельКнопок.Доступность	 = Ложь;
		Элементы.ГруппаВыпадающихСписков.Доступность = Ложь;
		Элементы.ГруппаДерево.Доступность			 = Ложь;
		
		ПредыдущаяСтраница = Элементы.СтраницаПросмотр;
		
		ДобавитьПодписьЭЦП();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСЭМД Тогда
		
		Элементы.КоманднаяПанельКнопок.Доступность	 = Ложь;
		Элементы.ГруппаВыпадающихСписков.Доступность = Ложь;
		
		ПредыдущаяСтраница = Элементы.СтраницаСЭМД;
		
	Иначе
		
		ПредыдущаяСтраница = Неопределено;
		
	КонецЕсли;
	
	Элементы.ГруппаПараметрыСтраницы.Видимость = ТекущаяСтраница <> Элементы.СтраницаСЭМД;
	Элементы.ФормаОтображатьДеревоТегов.Доступность = ТекущаяСтраница <> Элементы.СтраницаСЭМД;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеКодаHTMLПриИзменении(Элемент)
	
	ТекстHTMLИзмененВручную = Истина;
	
	ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(?(ПустаяСтрока(ТекстHTML), РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстШаблонаHTMLПоУмолчанию(), ТекстHTML));
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныHTML.Форма.ВыборЦвета",, ЭтотОбъект,,,, Новый ОписаниеОповещения("ПослеВыбораЦвета", ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЦвета(Цвет, ДополнительныеПараметры) Экспорт
	
	Если Цвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Команда = Сред(ДополнительныеПараметры.ИмяКоманды, 8);
	СтилиКоманд = Новый Соответствие;
	СтилиКоманд.Вставить("ForeColor", "color");
	СтилиКоманд.Вставить("BackColor", "background-color");
	
	Выделение = Элементы.ПолеHTMLДокумента.Документ.getSelection();
	Диапазон = Выделение.getRangeAt(0);
	СтильКоманды = СтилиКоманд.Получить(Команда);
	ЗначаениеСтиля = СтрШаблон("rgb(%1,%2,%3)", Цвет.Красный, Цвет.Зеленый, Цвет.Синий);
	
	Если СтильКоманды <> Неопределено И Диапазон.startContainer = Диапазон.endContainer И Диапазон.startOffset = Диапазон.endOffset Тогда
		ТекущийЭлементДиапазона = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(Диапазон.startContainer);
		УстановитьСтильДляЭлемента(СтильКоманды, ЗначаениеСтиля, ТекущийЭлементДиапазона);
		Возврат;
	КонецЕсли;
	
	ПроверитьКраяДиапазона(Диапазон);
	Выделение.removeAllRanges();
	Выделение.addRange(Диапазон);
	
	мЭлементыПараметров = ПолучитьЭлементыПараметровВВыделении(Диапазон.commonAncestorContainer, Выделение);
	
	Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Команда) Тогда
		Элементы.ПолеHTMLДокумента.Документ.execCommand(Команда, Ложь, "" + ПеревестиИз10(Цвет.Красный) + ПеревестиИз10(Цвет.Зеленый) + ПеревестиИз10(Цвет.Синий));
	КонецЕсли;
	
	Если СтильКоманды <> Неопределено Тогда
		УстановитьЗначениеСтиляУЭлементов(СтильКоманды, ЗначаениеСтиля, мЭлементыПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЭлементыПараметровВВыделении(ЭлементHTML, Выделение)
	
	мЭлементыПараметров = Новый Массив;
	ЗаполнитьЭлементыПараметровВВыделении(ЭлементHTML, Выделение, мЭлементыПараметров);
	Возврат мЭлементыПараметров;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЭлементыПараметровВВыделении(ЭлементHTML, Выделение, мЭлементыПараметров)
	
	Для Каждого ДочернийУзел Из ЭлементHTML.childNodes Цикл
		
		ИмяТега = НРег(ДочернийУзел.nodeName);
		
		Если Выделение.containsNode(ДочернийУзел, Истина)
			И (ИмяТега = "a"
				Или ИмяТега = "input"
				Или ИмяТега = "textarea")
			И ЗначениеЗаполнено(ДочернийУзел.id)
		Тогда
			мЭлементыПараметров.Добавить(ДочернийУзел);
			Продолжить;
		КонецЕсли;
		ЗаполнитьЭлементыПараметровВВыделении(ДочернийУзел, Выделение, мЭлементыПараметров);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПеревестиИз10(Знач Значение = 0)
	
	Значение = Число(Значение);
	Если Значение <= 0 Тогда
		Возврат "00";
	КонецЕсли;
	
	Значение = Цел(Значение);
	Результат = "";
	
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%16+1,1) + Результат;
		Значение = Цел(Значение/16);
	КонецЦикла;
	
	Если СтрДлина(Результат) = 1 Тогда
		Результат = "0" + Результат;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВидШаблонаПриИзменении(Элемент)
	
	ЭтоHTMLШаблон = Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон");
	Если ЭтоHTMLШаблон Тогда
		Элементы.Атрибуты.ТекущаяСтраница = Элементы.АтрибутыHTML;
	Иначе
		Элементы.Атрибуты.ТекущаяСтраница = Элементы.АтрибутыОбработки;
	КонецЕсли;
	
	Элементы.ФормаПроверка.Видимость				= Не ЭтоHTMLШаблон;
	Элементы.ГруппаПараметры.Видимость				= ЭтоHTMLШаблон;
	Элементы.ГруппаТаблицаLocalid.Видимость			= Не ЭтоHTMLШаблон;
	Элементы.ФормаОтображатьДеревоТегов.Видимость	= ЭтоHTMLШаблон;
	Элементы.ГруппаПараметрыСтраницы.Видимость		= Не (ЭтоHTMLШаблон И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСЭМД);
	Элементы.ПараметрыЭлементовHTML.Видимость		= ЭтоHTMLШаблон;
	
	// СЭМД
	ЗаполнитьПредставленияLocalid();
	ОбновитьФлагиИспользованДляТаблицыLocalid();
	ЗаполнитьТипыЗначенийПараметров();
	
	Элементы.ГруппаФайлОбработки.Видимость		 = Не ВстроеннаяОбработка;
	Элементы.ГруппаВстроеннаяОбработка.Видимость = ВстроеннаяОбработка;
	
	Элементы.ВидШаблона.ТолькоПросмотр					 = ВстроеннаяОбработка И Не РасширенныеВозможностиРедактирования;
	Элементы.ВидДокумента.ТолькоПросмотр				 = ВстроеннаяОбработка И Не РасширенныеВозможностиРедактирования;
	Элементы.ЭтоЗубнаяКарта.ТолькоПросмотр				 = ВстроеннаяОбработка И Не РасширенныеВозможностиРедактирования;
	Элементы.СоответствияПараметрам.ТолькоПросмотр		 = ВстроеннаяОбработка И Не РасширенныеВозможностиРедактирования;
	Элементы.СоответствияТаблицамШаблонов.ТолькоПросмотр = ВстроеннаяОбработка И Не РасширенныеВозможностиРедактирования;
	
	Для Каждого ЭлементКнопки Из Элементы.СоответствияПараметрам.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		ЭлементКнопки.Доступность = РасширенныеВозможностиРедактирования Или Не ВстроеннаяОбработка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФайл()
	
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	СтруктураВозврата = Новый Структура;
	
	ДиалогФайла.Фильтр = "Внешняя обработка(*.epf)|*.epf";
	ВнешняяОбработка = Неопределено;
	
	Если ДиалогФайла.Выбрать() Тогда
		
		ПолноеИмяФайлаОбработки = ДиалогФайла.ПолноеИмяФайла;
		Файл = Новый Файл(ПолноеИмяФайлаОбработки);
		
		АдресВоВременномХранилище = "";
		ВыбранноеИмяФайла = "";
		
		Если ПоместитьФайл(АдресВоВременномХранилище, ПолноеИмяФайлаОбработки, , Ложь) Тогда
			
			ИмяФайла		= Файл.Имя;
			РасширениеФайла = СтрЗаменить(Файл.Расширение,".","");
			
			РезультатРегистрацииОбработки = ЗарегистрироватьОбработку(АдресВоВременномХранилище, ИмяФайла, РасширениеФайла);
			Если ДопСерверныеФункции.ИмяСсылочногоТипа(РезультатРегистрацииОбработки) = "Справочник.ШаблоныHTML" Тогда
				ПоказатьЗначение(, РезультатРегистрацииОбработки);
				Возврат Истина;
			ИначеЕсли РезультатРегистрацииОбработки = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;
			ВидШаблонаПриИзменении(Неопределено);
			ВидДокументаПриИзменении(Неопределено);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Объект.НазваниеФайла = Файл.Имя;
	Возврат Истина;
	
КонецФункции

// Получает файл обработки из временного хранилища, пытается создать объект
// обработки (внешнего отчета) и получает информацию из объекта внешней обработки (отчета).
//
&НаСервере
Функция ЗарегистрироватьОбработку(АдресВоВременномХранилище, ИмяФайла, РасширениеФайла)
	
	ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
	
	Попытка
		ВнешняяОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВременногоФайла, Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = ВнешняяОбработкаОбъект.Метаданные().Синоним;
	КонецЕсли;
	ПараметрыШаблона = ВнешняяОбработкаОбъект.ПолучитьСписокПараметров();
	
	Для Каждого ЭлементПараметр Из ПараметрыШаблона Цикл
		Если Объект.СоответствияПараметрам.НайтиСтроки(Новый Структура("Наименование",ЭлементПараметр.Имя)).Количество() = 0 Тогда
			НовыйПараметр = Объект.СоответствияПараметрам.Добавить();
			НовыйПараметр.Наименование = ЭлементПараметр.Имя;
			НовыйПараметр.Представление = ЭлементПараметр.Синоним;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ПараметрыТаблицШаблона = ВнешняяОбработкаОбъект.ПолучитьПараметрыТаблицШаблона();
		
		Для Каждого ЭлементПараметр Из ПараметрыТаблицШаблона Цикл
			
			СтруктураПоиска = Новый Структура("Наименование", ЭлементПараметр.Имя);
			Если ЭлементПараметр.Свойство("ИмяТаблицы") Тогда
				СтруктураПоиска.Вставить("ТаблицаОбработки", ЭлементПараметр.ИмяТаблицы);
			КонецЕсли;
			
			Если Объект.СоответствияТаблицамШаблонов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				НовыйПараметр = Объект.СоответствияТаблицамШаблонов.Добавить();
				НовыйПараметр.Наименование = ЭлементПараметр.Имя; // Имя колонки
				НовыйПараметр.Представление = ЭлементПараметр.Синоним;
				Если ЭлементПараметр.Свойство("ИмяТаблицы") Тогда
					НовыйПараметр.ТаблицаОбработки = ЭлементПараметр.ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаменитьФайл(Команда)
	
	ВыбратьФайл();
	РегистрацияОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогФайла.Фильтр = "Внешняя обработка(*.epf)|*.epf";
	
	ДвоичныеДанные = ПолучитьДанныеОбработкиСервер();
	
	Если ДвоичныеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru ='Внешний файл отсутствует в хранилище'"));
		Возврат;
	КонецЕсли;
	
	ДиалогФайла.ПолноеИмяФайла = ОбщегоНазначенияСервер.УдалитьЗапрещенныеСимволыИмени(Объект.Наименование);
	
	Если ДиалогФайла.Выбрать() Тогда
		ИмяФайла = ДиалогФайла.ПолноеИмяФайла;
		Попытка
			ДвоичныеДанные.Записать(ИмяФайла);
		Исключение
			ПоказатьПредупреждение(, НСтр("ru ='Внешний файл не сохранен'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОбработкиСервер()
	
	Возврат РеквизитФормыВЗначение("Объект").Обработка.Получить();
	
КонецФункции

&НаСервере
Функция ПоместитьДвоичныеДанныеОбработкиВХранилище()
	
	АдресХранилища = "";
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = ОбработкаОбъект.Обработка.Получить();
	
	Если ДвоичныеДанные <> Неопределено Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данных для записи не найдено'"));
	КонецЕсли;
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура Проверка(Команда)
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(,НСтр("ru = 'В режиме Веб-клиента данная операция не доступна.'"));
	#Иначе
	
	Если ВстроеннаяОбработка Тогда
		Если ЗначениеЗаполнено(ИмяВстроеннойОбработки) Тогда
			ОбработкаОткрытияОбработки(, ИмяВстроеннойОбработки);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Не выбрана встроенная обработка'"));
		КонецЕсли;
	Иначе
		АдресХранилища = ПоместитьДвоичныеДанныеОбработкиВХранилище();
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			ОбработкаОткрытияОбработки(АдресХранилища);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'В шаблоне не сохранен файл обработки шаблона'"));
		КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОткрытияОбработки(АдресХранилища, ИмяВстроеннойОбработки = Неопределено)
	
	Если ИмяВстроеннойОбработки <> Неопределено Тогда
		ИмяФормыОбработки = "Обработка."+ ИмяВстроеннойОбработки +".Форма";
	Иначе
		// Подключаем обработку
		Попытка
			ИмяОбработки = ОбщегоНазначенияСервер.ПодключитьВнешнююОбработку(АдресХранилища);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		ИмяФормыОбработки = "ВнешняяОбработка."+ ИмяОбработки +".Форма";
	КонецЕсли;
	
	// Откроем форму обработки
	ПараметрыФормы = Новый Структура("ЗначенияПоУмолчанию",УправлениеОбработкамиШаблоновСервер.ПолучитьСтруктуруСоответствий(Объект.Ссылка));
	ПараметрыФормы.Вставить("СписокЗаполнений",УправлениеОбработкамиШаблоновСервер.СформироватьМассивЗаполнений(Объект.Ссылка));
	ФормаОбработки = ПолучитьФорму(ИмяФормыОбработки, ПараметрыФормы,	ЭтаФорма);
	ФормаОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Попытка
		Для Каждого СоответсвиеПараметрам из Объект.СоответствияПараметрам Цикл
			Если СодержитДопЗначения(СоответсвиеПараметрам.Параметр) Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", СоответсвиеПараметрам.Параметр);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				
				ФормаОбработки.Элементы[СоответсвиеПараметрам.Наименование].ПараметрыВыбора = НовыеПараметры;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	ФормаОбработки.Открыть();
	
КонецПроцедуры

&НаСервере
Функция СодержитДопЗначения(ПараметрОбработки)
	
	Возврат ПараметрОбработки.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДополнительныеЗначенияХарактеристик"));
	
КонецФункции

// ------------------ПОДБОР-ПАРАМЕТРОВ-------------------

&НаКлиенте
Процедура СписокПараметровПриАктивизацииСтроки(Элемент)
	
	НеАктивизироватьСтрокуПараметра = Истина;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Назначение = ПредопределенноеЗначение("Перечисление.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра") Тогда
		ДопустимыеПараметры = Новый СписокЗначений;
		ДопустимыеПараметры.Добавить("Ссылка", "Ссылка");
	Иначе
		ДопустимыеПараметры = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьДопустимыеЭлементыШаблонаПоТипуПараметра(ТекДанные.ТипЗначения);
	КонецЕсли;
	
	СписокВыбора = Элементы.ТекВидПараметра.СписокВыбора;
	
	Если ДопустимыеПараметры.НайтиПоЗначению(ТекПараметрВид) = Неопределено Тогда
		ТекПараметрВид = ДопустимыеПараметры[0].Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекПараметрВид) Тогда
		СписокВыбора.Очистить();
		Для Каждого элДопустимыйПараметр Из ДопустимыеПараметры Цикл
			СписокВыбора.Добавить(элДопустимыйПараметр.Значение, элДопустимыйПараметр.Представление);
		КонецЦикла;
		ТекПараметрЗаголовок = Строка(ТекДанные.Ссылка) + ":";
	Иначе
		Элементы.ТекВидПараметра.СписокВыбора.Очистить();
		ТекПараметрЗаголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекВидПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаПараметра = Элементы.СписокПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаПараметра <> Неопределено
		И Не ТекущаяСтрокаПараметра.ЭтоГруппа
		И Элемент.СписокВыбора.Количество() = 0
	Тогда
		СписокПараметровПриАктивизацииСтроки(Элементы.СписокПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекДанные.ЭтоГруппа Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	ТекПараметр = Элемент.ТекущиеДанные.Ссылка;
	Если Не ЗначениеЗаполнено(ТекПараметрВид) Тогда
		ПоказатьПредупреждение(, НСтр("ru ='Не выбран вид параметра для вставки!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ДобавитьПараметрВШаблон(ТекПараметрВид, ТекПараметр) Тогда
		Возврат;
	КонецЕсли;
	
	НеАктивизироватьСтрокуПараметра = Истина;
	ЗаполнитьКешПараметровПоШаблону(ДокументHTML);
	
	// Выделение строки добавленного параметра
	ТекСтрокаПараметра = ПолучитьПараметрИзКеша(Строка(ТекПараметр.УникальныйИдентификатор()), Истина);
	Если ТекСтрокаПараметра <> Неопределено Тогда
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ТекСтрокаПараметра.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры


// ----------------ВСТАВКА-ПАРАМЕТРОВ-И-ЭЛЕМЕНТОВ-----------------.

&НаКлиенте
Процедура ВставлятьЗаголовокПриИзменении(Элемент)
	Элементы.ТекПараметрЗаголовок.Доступность = ТекПараметрВставлятьЗаголовок;
КонецПроцедуры

// Добавляет параметр в шаблон с выбранным видом
// ВидПараметра - вид параметра HTML или вид элемента HTML
// ТекПараметр - ссылка на параметр. Если первый параметр является видом элемента HTML, то должен быть неопределено.
&НаКлиенте
Функция ДобавитьПараметрВШаблон(ВидПараметра, ТекПараметр = Неопределено, ВставкаЭлемента = Ложь, ВставлятьТолькоПараметр = Ложь)
	
	Если Элементы.Атрибуты.ТекущаяСтраница <> Элементы.АтрибутыHTML Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СНовойСтроки = Не ВставлятьТолькоПараметр И ТекПараметрСНовойСтроки;
	ВставлятьЗаголовок = Не ВставлятьТолькоПараметр И ТекПараметрВставлятьЗаголовок;
	
	Если ВставкаЭлемента Тогда
		ТекПараметр = Неопределено;
	Иначе
		// Должны вставлять параметр, но его не передали - ничего не делаем.
		Если ТекПараметр = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекстHTML = "";
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML Тогда
		ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
		Если ДокументHTML.getSelection().focusNode = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана позиция в тексте для добавления'"));
			Возврат Ложь;
		КонецЕсли;
		ТекстHTML = ДокументHTML.body.innerHTML;
		Если ТекПараметр = Неопределено Тогда
			ТекстHTMLПараметра = СформироватьТекстHTMLЭлемента(ВидПараметра);
		Иначе
			ТекстHTMLПараметра = СформироватьПолныйТекстHTMLПараметра(ТекПараметр, ВидПараметра,
				?(ВставлятьЗаголовок, ТекПараметрЗаголовок, Неопределено), СНовойСтроки);
		КонецЕсли;
		ТекстHTML = ДобавитьТекстHTMLВДокумент(ДокументHTML, ТекстHTMLПараметра);
		Если ВидПараметра = "Картинка" Тогда
			РаботаСШаблонамиHTMLКлиентСервер.ЗагрузитьИзображенияПриема(ДокументHTML, соотвКешИзображенийШаблонов, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТекст Тогда
		// Формируем текст параметра
		Если ТекПараметр = Неопределено Тогда
			ТекстHTMLПараметра = СформироватьТекстHTMLЭлемента(ВидПараметра);
		Иначе
			ТекстHTMLПараметра = СформироватьПолныйТекстHTMLПараметра(ТекПараметр, ВидПараметра,
			?(ВставлятьЗаголовок, ТекПараметрЗаголовок, Неопределено), СНовойСтроки);
		КонецЕсли;
		ТекстHTML = ДобавитьКодHTMLВДокумент(Элементы.ПолеКодаHTML, ТекстHTMLПараметра);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВставитьУзелВСелекшенДокумента(ДокументHTML, Узел)
	
	doc = ДокументHTML;
	sel = ДокументHTML.getSelection();
	
	// Первый диапазон селекшена
	range = sel.getRangeAt(0);
	
	sel.removeAllRanges();
	
	// Удалить содержимое текущего селекшена
	Если range <> Неопределено Тогда
		range.deleteContents();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана позиция для подстановки в тексте'"));
		Возврат;
	КонецЕсли;
	
	// Получить расположение текущего селекшена
	container = range.startContainer;
	
	КурсорВТегеПараметра = Ложь;
	Тег = container;
	Пока НРег(Тег.nodeName) <> "body" Цикл
		Если Тег.nodeType <> 3 И ЗначениеЗаполнено(Тег.getAttribute("id")) Тогда
			КурсорВТегеПараметра = Истина;
			Прервать;
		КонецЕсли;
		Тег = Тег.parentNode;
	КонецЦикла;
	
	Пока ТегиРазрешающиеВставкуПараметров.Найти(НРег(container.tagName)) = Неопределено	Цикл
		Если Не КурсорВТегеПараметра И (container.tagName = Неопределено И container.nodeName = "#text") Тогда
			Прервать;
		КонецЕсли;
		container = container.parentNode;
	КонецЦикла;
	pos = range.startOffset;
	
	// Создать новый диапазон для нового селекшена
	range = ДокументHTML.createRange();
	
	Если (container.nodeType=3 И Узел.nodeType=3) Тогда
		// Если текст вставляется в textNode, делать оптимизированную вставку
		container.insertData(pos, Узел.data);
		// Установить курсор после вставленного текста
		range.setEnd(container, pos+Узел.length);
		range.setStart(container, pos+Узел.length);
		
	Иначе
		
		afterNode = Неопределено;
		beforeNode = Неопределено;
		Если (container.nodeType=3) Тогда
			// При вставке в textNode создать 2 textNode, между ними поместить insertNode
			textNode = container;
			container = textNode.parentNode;
			text = textNode.nodeValue;
			
			textBefore = Сред(text,0,pos);
			textAfter = Сред(text,pos+1);
			
			beforeNode = ДокументHTML.createTextNode(textBefore);
			afterNode = ДокументHTML.createTextNode(textAfter);
			
			// Вставить 3 новых узла перед исходным textNode, и удалить его
			container.insertBefore(afterNode, textNode);
			container.insertBefore(Узел, afterNode);
			container.insertBefore(beforeNode, Узел);
			
			// Удалить старую дочерний узел
			container.removeChild(textNode);
			
		Иначе
			
			Если ВРег(container.nodeName) = "BODY"
				И container.childNodes.length = 1
				И ВРег(container.childNodes[0].nodeName) = "DIV"
				И ВРег(container.childNodes[0].className) = "FORMAT"
			Тогда
				container = container.childNodes[0];
			КонецЕсли;
			// Иначе вставить узел
			Если container.childNodes.length >= pos И container.childNodes.length <> 0 Тогда
				Попытка
					afterNode = container.childNodes[pos];
					container.insertBefore(Узел, afterNode);
				Исключение
					container.appendChild(Узел);
				КонецПопытки;
			Иначе
				container.appendChild(Узел);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			range.setEnd(afterNode, 0);
			range.setStart(afterNode, 0);
		Исключение
		КонецПопытки;
		
		sel.addRange(range);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет текст html в область выделения документа
&НаКлиенте
Функция ДобавитьТекстHTMLВДокумент(ДокументHTML, Знач ТекстHTML, ИмяТегаИсключенияВложения = "")
	
	Если ЗначениеЗаполнено(ТекстHTML) Тогда
		НовыйУзел = ДокументHTML.createElement("span");
		НовыйУзел.innerHTML = ТекстHTML;
		
		ВставитьУзелВСелекшенДокумента(ДокументHTML, НовыйУзел);
	КонецЕсли;
	
	Возврат ДокументHTML.body.innerHTML;
	
КонецФункции

// Добавляет код html в область выделения текстового документа.
&НаКлиенте
Функция ДобавитьКодHTMLВДокумент(ТекстовыйДокумент, КодЭлементаHTML)
	
	ТекстовыйДокумент.ВыделенныйТекст = КодЭлементаHTML;
	ТекстHTML = ТекстКодаHTML.ПолучитьТекст();
	
	Возврат ТекстHTML;
	
КонецФункции

// Формирует html-код с учетом заголовка и переноса на новую строку.
&НаКлиенте
Функция СформироватьПолныйТекстHTMLПараметра(ПараметрСсылка, ВидПараметра, Заголовок = Неопределено, СНовойСтроки = Ложь)
	
	ТекстПараметраHTML = СформироватьТекстHTMLПараметра(ПараметрСсылка, ВидПараметра);
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Если ВидПараметра = "ПолеМногострочногоВвода" Тогда
			// Переносим на след строку и оствляем элемент в текущем блоке div
			ТекстПараметраHTML = Заголовок + " <BR> " + ТекстПараметраHTML;
		Иначе
			ТекстПараметраHTML = Заголовок + " " + ТекстПараметраHTML;
		КонецЕсли;
	КонецЕсли;
	
	Если СНовойСтроки Тогда 
		ТекстПараметраHTML = "<DIV>" + ТекстПараметраHTML + "</DIV>";
	КонецЕсли;
	
	Возврат ТекстПараметраHTML;
	
КонецФункции

// Формирует html-код для параметра по виду
&НаКлиенте
Функция СформироватьТекстHTMLПараметра(ПараметрСсылка, ВидПараметра)
	
	ТекстHTMLПараметра = "";
	Если ВидПараметра = "Ссылка" Тогда
		
		ТекстHTMLПараметра = "<a id='" + Строка(ПараметрСсылка.УникальныйИдентификатор()) + "' href=about:>[...]</a>";
		
	ИначеЕсли ВидПараметра = "Флажок" Тогда
		
		ТекстHTMLПараметра = "<input type='checkbox' id='" + Строка(ПараметрСсылка.УникальныйИдентификатор()) + "' value='False'></input>";
		
	ИначеЕсли ВидПараметра = "ПолеВыбора" Тогда
		
		Структура = Новый Структура("Параметр", ПараметрСсылка);
		ФормаЗаполненияСпискаВыбора = ПолучитьФорму("Справочник.ШаблоныHTML.Форма.ФормаСпискаВыбора", Структура);
		СписокВыбора = ФормаЗаполненияСпискаВыбора.ОткрытьМодально();
		Если СписокВыбора <> Неопределено Тогда
			
			ВыборHTML = "<select id='" + Строка(ПараметрСсылка.УникальныйИдентификатор()) + "'>";
			Для Каждого Строка Из СписокВыбора Цикл
				ВыборHTML = ВыборHTML + "<option " + ?(Строка.ПоУмолчанию, "selected ", "") + "value='" + 
					РаботаСШаблонамиHTML.ПреобразоватьЗначениеВСтрокуВнутр(Строка.Значение) + "'>" + Строка.Представление;
			КонецЦикла;
			ВыборHTML = ВыборHTML + "</select>";
			ТекстHTMLПараметра = ВыборHTML;
			
		КонецЕсли;
		
	ИначеЕсли ВидПараметра = "ПолеВвода" Тогда
		
		ТекстHTMLПараметра =  "<input id='" + 
			Строка(ПараметрСсылка.УникальныйИдентификатор()) + "'></input>";
		
	ИначеЕсли ВидПараметра = "ПолеМногострочногоВвода" Тогда
		
		ТекстHTMLПараметра = "<textarea rows=2 cols=0 style='overflow:auto' id='" +
			Строка(ПараметрСсылка.УникальныйИдентификатор()) + "'></textarea>";
		
	КонецЕсли;
	
	Возврат ТекстHTMLПараметра;
	
КонецФункции

// Формирует html-код вставляемого элемента по виду
&НаКлиенте
Функция СформироватьТекстHTMLЭлемента(ВидЭлемента)
	
	ТекстHTMLЭлемента = "";
	Если ВидЭлемента = "Линия" Тогда
		
		ТекстHTMLЭлемента = "<HR>";
		
	ИначеЕсли ВидЭлемента = "Таблица" Тогда
		
		ФормаПараметровТаблицы = ПолучитьФорму("Справочник.ШаблоныHTML.Форма.ФормаВставкиТаблицы");
		ПараметрыТаблицы = ФормаПараметровТаблицы.ОткрытьМодально();
		ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
		Таблица = ДокументHTML.createElement("table");
	
		Если ПараметрыТаблицы = Неопределено Или ПараметрыТаблицы.Строки = 0 Или ПараметрыТаблицы.Колонки = 0 Тогда
			Возврат ТекстHTMLЭлемента;
		КонецЕсли;
		
		Таблица.style.borderColor = "inherit";
		Таблица.style.borderStyle = "solid";
		Таблица.style.borderCollapse = "Collapse";
		Таблица.style.width = "100%";
		Таблица.border = "1";
		
		Если ПараметрыТаблицы.Заголовок <> "" Тогда
			Таблица.createCaption();
			Таблица.caption.innerText = ПараметрыТаблицы.Заголовок;
		КонецЕсли;
		
		Для КоличествоСтрок = 1 По ПараметрыТаблицы.Строки Цикл
			НоваяСтрока = Таблица.insertRow();
			Для КоличествоСтолбцов = 1 По ПараметрыТаблицы.Колонки Цикл
				НоваяЯчейка = НоваяСтрока.insertCell();
				НоваяЯчейка.innerText = Символы.НПП;
				НоваяЯчейка.style.width = Строка(Окр(100/ПараметрыТаблицы.Колонки)) + "%";
				НоваяЯчейка.style.wordWrap = "break-word";
			КонецЦикла;
		КонецЦикла;
		
		ТекстHTMLЭлемента = Таблица.outerHTML;
		
	ИначеЕсли ВидЭлемента = "Разрыв" Тогда
		
		ТекстHTMLЭлемента = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьТекстHTMLРазрывСтраницы(Истина);
		
	ИначеЕсли ВидЭлемента = "Картинка" Тогда
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Фильтр = "Изображения (*.jpg, *.png, *.gif)|*.jpg;*.png;*.gif";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ИмяФайлаКартинки = "";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			ФайлКартинки = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
			
			ИдентификаторИзображения = 
				РаботаСШаблонамиHTMLКлиентСервер.ДобавитьИзображениеВКеш(соотвКешИзображенийШаблонов, ДиалогОткрытияФайла.ПолноеИмяФайла, ЭтаФорма.УникальныйИдентификатор);
				
			Если ИдентификаторИзображения <> Неопределено Тогда
				Картинка = Элементы.ПолеHTMLДокумента.Документ.createElement("image");
				Картинка.id = ИдентификаторИзображения;
				Картинка.src = соотвКешИзображенийШаблонов.Получить(ИдентификаторИзображения).АдресВХранилище;
				ТекстHTMLЭлемента = Картинка.outerHTML;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = "Комментарий" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВводаКомментария", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, "", НСтр("ru = 'Текст комментария'"));
		
	ИначеЕсли ВидЭлемента = "ВыбираемаяКартинка" Тогда
		
		ТекстHTMLЭлемента = ПолучитьТекстКнопкиВыбираемогоИзображения();
	КонецЕсли;
	
	Возврат ТекстHTMLЭлемента;
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаКомментария(ТекстКомментария, Параметры) Экспорт
	
	Если ТекстКомментария = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонТекстаЭлемента = 
		"<div data-bit-hidden='true' align=left>
		|	<em>
		|		<font size=2 color=#888888>
		|			&lt;%1&gt;
		|		</font>
		|	</em>
		|</div>";
	
	ТекстHTMLЭлемента = СтрШаблон(ШаблонТекстаЭлемента, ТекстКомментария);
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаHTML Тогда
		ДобавитьТекстHTMLВДокумент(Элементы.ПолеHTMLДокумента.Документ, ТекстHTMLЭлемента);
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТекст Тогда
		ДобавитьКодHTMLВДокумент(Элементы.ПолеКодаHTML, ТекстHTMLЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// ----------------КЕШ-ПАРАМЕТРОВ-----------------

// Первоначальное заполнение кеша параметров из таблицы
&НаСервере
Процедура ЗаполнитьКешПараметров()
	
	ТаблицаПараметров.Очистить();
	Для Каждого СтрокаПараметр Из Объект.СоответствияПараметрам Цикл
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.Параметр = СтрокаПараметр.Параметр;
		
		Если НоваяСтрока.Параметр.Назначение = Перечисления.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра Тогда
			НоваяСтрока.ТипЗначения = ТипыЗначенийВитальныхПараметров();
		Иначе
			НоваяСтрока.ТипЗначения = СтрокаПараметр.Параметр.ТипЗначения;
			НоваяСтрока.ВидКлассификатора = СтрокаПараметр.Параметр.ВидКлассификатора;
		КонецЕсли;
		
		НоваяСтрока.СтрокаУидПараметра = Строка(НоваяСтрока.Параметр.УникальныйИдентификатор());
		НоваяСтрока.ФорматнаяСтрока = НоваяСтрока.Параметр.ФорматнаяСтрока;
		Если НоваяСтрока.Параметр.ТипЗначения <> Неопределено Тогда
			НоваяСтрока.Значение = НоваяСтрока.Параметр.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЕсли;
		НоваяСтрока.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(НоваяСтрока);
		НоваяСтрока.localid = СтрокаПараметр.localid;
		НоваяСтрока.КлассификацияПоля = СтрокаПараметр.КлассификацияПоля;
		НоваяСтрока.ГруппирующееПоле = СтрокаПараметр.ГруппирующееПоле;
		Если СтрокаПараметр.ГруппирующееПоле <> Неопределено Тогда
			НоваяСтрока.ГруппирующееПоле = СтрокаПараметр.ГруппирующееПоле;
			Если ТипЗнч(СтрокаПараметр.ГруппирующееПоле) = Тип("Число") Тогда
				НоваяСтрока.ГруппирующееПолеПредставление	 = СтрШаблон("Константа №%1", Строка(Объект.КонстантыCDAДокумента[СтрокаПараметр.ГруппирующееПоле].НомерСтроки));
				СтрокаПараметр.ГруппирующееПолеПредставление = СтрШаблон("Константа №%1", Строка(Объект.КонстантыCDAДокумента[СтрокаПараметр.ГруппирующееПоле].НомерСтроки));
			Иначе
				НоваяСтрока.ГруппирующееПолеПредставление	 = "Параметр: " + Строка(СтрокаПараметр.ГруппирующееПоле);
				СтрокаПараметр.ГруппирующееПолеПредставление = "Параметр: " + Строка(СтрокаПараметр.ГруппирующееПоле);
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.ОбъединяющееПоле = СтрокаПараметр.ОбъединяющееПоле;
		Если СтрокаПараметр.ОбъединяющееПоле <> Неопределено Тогда
			НоваяСтрока.ОбъединяющееПоле = СтрокаПараметр.ОбъединяющееПоле;
			Если ТипЗнч(СтрокаПараметр.ОбъединяющееПоле) = Тип("Число") Тогда
				НоваяСтрока.ОбъединяющееПолеПредставление	 = СтрШаблон("Константа №%1", Строка(Объект.КонстантыCDAДокумента[СтрокаПараметр.ОбъединяющееПоле].НомерСтроки));
				СтрокаПараметр.ОбъединяющееПолеПредставление = СтрШаблон("Константа №%1", Строка(Объект.КонстантыCDAДокумента[СтрокаПараметр.ОбъединяющееПоле].НомерСтроки));
			Иначе
				НоваяСтрока.ОбъединяющееПолеПредставление	 = "Параметр: " + Строка(СтрокаПараметр.ОбъединяющееПоле);
				СтрокаПараметр.ОбъединяющееПолеПредставление = "Параметр: " + Строка(СтрокаПараметр.ОбъединяющееПоле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставленияГруппирующихПолейКонстант();
	
КонецПроцедуры

// Заполнение кеша параметров на основании HTML-документа
&НаКлиенте
Процедура ЗаполнитьКешПараметровПоШаблону(ДокументHTML)
	
	мсНеОбрабатываемыеУИД = Новый Массив;
	мсОбновленныеСтроки = Новый Массив;
	
	// Ссылки
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "A", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
		// Нормализуем ссылки - внутри них не должно быть тегов
		РаботаСHTMLКлиентСервер.ПоместитьЭлементВглубьДерева(Параметр, Истина);
		Параметр.textContent = "[...]";
		
	КонецЦикла;
	
	// Поля ввода
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "TEXTAREA", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	// Флажки
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "INPUT", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	// Списки выбора
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "SELECT", Истина);
	Для Каждого Параметр Из СписокЭлементов Цикл
		
		СтрокаПараметра = ПолучитьПараметрИзКеша(Параметр.id, Истина);
		Если СтрокаПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мсОбновленныеСтроки.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	// Ищем строки, которых уже нет в шаблоне
	мсСтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПараметр Из ТаблицаПараметров Цикл
		Если мсОбновленныеСтроки.Найти(СтрокаПараметр) = Неопределено Тогда
			мсСтрокиКУдалению.Добавить(СтрокаПараметр);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого элСтрокаКУдалению Из мсСтрокиКУдалению Цикл
		УдалитьСтрокуПараметра(элСтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИзображенийПоШаблону(ДокументHTML, Знач соотвКешИзображенийШаблонов)
	
	ЭтоWinXP = РаботаСШаблонамиHTMLКлиентСервер.ЭтоWindowsXP();
	
	Объект.СписокИзображений.Очистить();
	
	СписокЭлементов = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоИмени(ДокументHTML, "IMG", Истина);
	Для Каждого ЭлементКартинка Из СписокЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКартинка.id)
			Или ЭлементКартинка.ЕстьАтрибут("data-bit-selected-img-id")
		Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКартинка.src = "";
		СтруктураКартинки = соотвКешИзображенийШаблонов.Получить(ЭлементКартинка.id);
		
		Если СтруктураКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.СписокИзображений.Добавить();
		НоваяСтрока.Идентификатор = СтруктураКартинки.Идентификатор;
		НоваяСтрока.Расширение = СтруктураКартинки.Расширение;
		
		Если ЭтоWinXP Тогда
			Base64Картинки = РаботаСHTMLКлиентСервер.ПолучитьДанныеИзBase64КартинкиHTML(СтруктураКартинки.АдресВХранилище);
		Иначе
			ДанныеКартинка = ПолучитьИзВременногоХранилища(СтруктураКартинки.АдресВХранилище);
			ДвоичныеДанныеКартинки = ДанныеКартинка;
			Если ТипЗнч(ДанныеКартинка) = Тип("Картинка") Тогда
				ДвоичныеДанныеКартинки = ДанныеКартинка.ПолучитьДвоичныеДанные();
			КонецЕсли;
			Base64Картинки = Base64Строка(ДвоичныеДанныеКартинки);
		КонецЕсли;
		
		НоваяСтрока.ИзображениеBase64 = Base64Картинки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает самый глубокий узел элемента, если их встречается несколько - берет первый, остальные удаляет.
&НаКлиенте
Функция ПолучитьПоследнийУзел(ЭлементHTML)
	
	Если ЭлементHTML.childNodes.length = 0 Тогда
		Возврат ЭлементHTML;
	Иначе
		// Удаляем прочие узлы, если их несколько
		Для Сч = 1 По ЭлементHTML.childNodes.length - 1 Цикл
			ЭлементHTML.removeChild(ЭлементHTML.childNodes.item(Сч));
		КонецЦикла;
		Возврат ПолучитьПоследнийУзел(ЭлементHTML.childNodes.item(0));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДополнитьКешПараметров(СтруктураПараметра, ИскатьСуществующий = Истина)
	
	Если СтруктураПараметра.Назначение = ПредопределенноеЗначение("Перечисление.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра") Тогда
		СтруктураПараметра.ТипЗначения = ТипыЗначенийВитальныхПараметров();
	КонецЕсли;
	
	Если Не ИскатьСуществующий Тогда
		СтрокаПараметр = ТаблицаПараметров.Добавить();
		СтрокаПараметр.Параметр = СтруктураПараметра.Ссылка;
		СтрокаПараметр.ВидКлассификатора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметра.Ссылка,"ВидКлассификатора");
		СтрокаПараметр.ТипЗначения = СтруктураПараметра.ТипЗначения;
	Иначе
		НайдПараметры = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", СтруктураПараметра.Ссылка));
		Если НайдПараметры.Количество() > 0 Тогда
			СтрокаПараметр = НайдПараметры[0];
			НайдПараметры.Удалить(0);
			Для Каждого УдаляемыйПараметр Из НайдПараметры Цикл
				УдалитьСтрокуПараметра(УдаляемыйПараметр);
			КонецЦикла;
		Иначе
			СтрокаПараметр = ТаблицаПараметров.Добавить();
			СтрокаПараметр.Параметр = СтруктураПараметра.Ссылка;
			СтрокаПараметр.ВидКлассификатора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметра.Ссылка,"ВидКлассификатора");
			СтрокаПараметр.ТипЗначения = СтруктураПараметра.ТипЗначения;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПараметр.СтрокаУидПараметра = Строка(СтрокаПараметр.Параметр.УникальныйИдентификатор());
	ЗаполнитьЗначенияСвойств(СтрокаПараметр, СтруктураПараметра);
	Если ЗначениеЗаполнено(СтрокаПараметр.Значение) Тогда
		Попытка
			СтрокаПараметр.Значение = СтрокаПараметр.ТипЗначения.ПривестиЗначение(СтрокаПараметр.Значение);
		Исключение
			СтрокаПараметр.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецПопытки;
	Иначе
		СтрокаПараметр.Значение = СтрокаПараметр.ТипЗначения.ПривестиЗначение(Неопределено);
	КонецЕсли;
	СтрокаПараметр.Представление = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьПредставлениеПараметра(СтрокаПараметр);
	
	Возврат СтрокаПараметр;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрИзКеша(УИД, ВернутьСтроку = Ложь)
	
	НайдПараметры = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра", УИД));
	Если НайдПараметры.Количество() > 0 Тогда
		Если ВернутьСтроку Тогда
			Возврат НайдПараметры[0];
		Иначе
			Возврат НайдПараметры[0].Параметр;
		КонецЕсли;
	Иначе
		Попытка
			ИдПараметра = Новый УникальныйИдентификатор(УИД);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		СтруктураПараметра = РаботаСШаблонамиHTML.ПолучитьПараметрПоУИД(ИдПараметра, Ложь);
		Если Не СтруктураПараметра.Ссылка.Пустая() Тогда
			СтрокаПараметр = ДополнитьКешПараметров(СтруктураПараметра, Ложь);
			Если ВернутьСтроку Тогда
				Возврат СтрокаПараметр;
			Иначе
				Возврат СтруктураПараметра.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура КешДобавляемыеПараметрыПриАктивизацииСтроки(Элемент)
	
	Если НеАктивизироватьСтрокуПараметра Или Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаHTML Тогда
		НеАктивизироватьСтрокуПараметра = Ложь;
		Возврат;
	КонецЕсли;
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные = Неопределено
		Или ДокументHTML = Неопределено
		Или ДокументHTML.body = Неопределено
	Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПоУИД = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, ТекДанные.СтрокаУидПараметра);
	Если ЭлементыПоУИД.length = 0 Тогда
		Если Вопрос(НСтр("ru = 'Параметр не найден в шаблоне. Удалить из списка?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УдалитьСтрокуПараметра(ТекДанные);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыделитьЭлементHTML(ДокументHTML, ЭлементыПоУИД[0]);
	РежимВставки = 1;
	
КонецПроцедуры

// ----------------ПРОЧИЕ-ФУНКЦИИ-РАБОТЫ-С-ПАРАМЕТРАМИ-----------------.

&НаКлиенте
Процедура ВыделитьЭлементHTML(ДокументHTML, ЭлементHTML)
	
	ВыделенныйФрагмент = ДокументHTML.getSelection();
	ВыделенныйФрагмент.removeAllRanges();
	Диапазон = ДокументHTML.createRange();
	Диапазон.selectNode(ЭлементHTML);
	ВыделенныйФрагмент.addRange(Диапазон);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЭлементСЗаполненнымID(Элемент, ТолькоПараметры = Истина)
	
	Если Элемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КорректныйИД = Ложь;
	Если ЗначениеЗаполнено(Элемент.id) Тогда
		КорректныйИД = Истина;
		Если ТолькоПараметры Тогда
			Попытка
				УИД = Новый УникальныйИдентификатор(Элемент.id);
			Исключение
				КорректныйИД = Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если КорректныйИД Тогда
		Возврат Элемент;
	ИначеЕсли Элемент.parentElement = Null Или Элемент.parentElement = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайтиЭлементСЗаполненнымID(Элемент.parentElement);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИндексТекущейТаблицы = Неопределено;
	
	Если ДанныеСобытия.Element.hasAttribute("bit-contextmenu-selectElement") Тогда
		
		ОбновитьЗначениеЭлементаHTMLДляКонтекстногоМеню(ДанныеСобытия.Element);
		
		ДанныеСобытия.Element.removeAttribute("bit-contextmenu-selectElement");
		
		ТаблицыДокумента = ДанныеСобытия.Element.ownerDocument.getElementsByTagName("table");
		Для сч = 1 По ТаблицыДокумента.length Цикл
			ИндексТаблицы = сч-1;
			Если ТаблицыДокумента[ИндексТаблицы].contains(ДанныеСобытия.Element) Тогда
				ИндексТекущейТаблицы = ИндексТаблицы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьДоступностьКнопокКонтекстногоМенюПоляHTML();
		Возврат;
	Иначе
		ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено;
		УстановитьДоступностьКнопокКонтекстногоМенюПоляHTML();
	КонецЕсли;
	
	ЭлементHTML = РаботаСШаблонамиHTMLКлиентСервер.НайтиЭлементСЗаполненнымIDВышеПоИерархии(ДанныеСобытия.Element);
	
	Попытка
		ЭлементHTML.focus();
	Исключение КонецПопытки;
	
	// Элементы не имеют id
	Если ЭлементHTML = Неопределено Тогда
		ДокументHTML = ДанныеСобытия.Document;
		Узел = ДокументHTML.getSelection().focusNode;
		
		УстановитьКурсорВПустомДокументе(Узел);
		
		Если Узел <> Неопределено Тогда
			ТипУзла = НРег(Узел.parentNode.tagName);
			Если ТипУзла = "td" Тогда
				// Нажали в клетку таблицы
				Узел = Узел.parentNode;
			КонецЕсли;
			ЭлементHTML = Узел;
		КонецЕсли;
		
		Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	Если ЭлементHTML <> Неопределено И РаботаСШаблонамиHTMLКлиентСервер.ЭтоУзелПараметра(ЭлементHTML) Тогда
		ТекУИД = ЭлементHTML.id;
		ТекСтрокаПараметр = Неопределено;
		Если мсНеОбрабатываемыеУИД.Найти(ТекУИД) = Неопределено Тогда
			ТекСтрокаПараметр = ПолучитьПараметрИзКеша(ТекУИД, Истина);
		КонецЕсли;
		
		Если ТекСтрокаПараметр = Неопределено Тогда
			Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = Неопределено;
			мсНеОбрабатываемыеУИД.Добавить(ТекУИД);
		Иначе
			ИдентификаторСтроки = ТекСтрокаПараметр.ПолучитьИдентификатор();
			Если ВРег(ЭлементHTML.tagName) = "A" Тогда
				Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ИдентификаторСтроки;
			Иначе
				НеАктивизироватьСтрокуПараметра = Истина;
				Элементы.КешДобавляемыеПараметры.ТекущаяСтрока = ИдентификаторСтроки;
				НеАктивизироватьСтрокуПараметра = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементHTML <> Неопределено Тогда
		Пока ЭлементHTML.tagName = Неопределено Цикл
			ЭлементHTML = ЭлементHTML.parentNode;
		КонецЦикла;
		
		// Получить параметры нового выбранного элемента
		ТекущийЭлементШаблонаHTML = ПолучитьТекущийЭлементШаблонаHTML();
		Если ТекущийЭлементШаблонаHTML <> ЭлементHTML Тогда
			УстановитьПараметрыЭлементаHTML(ЭлементHTML);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийЭлементШаблонаHTMLИмеющийTag = ДанныеСобытия.Element;
	СохранитьДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag(ТекущийЭлементШаблонаHTMLИмеющийTag);
	
	СкрыватьТег = ТекущийЭлементШаблонаHTMLИмеющийTag.hasAttribute("data-bit-hidden");
	ДоступноРисование = ТекущийЭлементШаблонаHTMLИмеющийTag.hasAttribute("data-bit-draw-id");
	
	ИмяТега = Нрег(Строка(ТекущийЭлементШаблонаHTMLИмеющийTag.tagName));
	
	Если ТегиПоддерживающиеСкрываемость.Найти(ИмяТега) <> Неопределено Тогда
		Элементы.СкрыватьТег.Доступность			= Истина;
		Элементы.ГруппаСворачиваемость.Доступность	= Истина;
	Иначе
		Элементы.СкрыватьТег.Доступность			= Ложь;
		Элементы.ГруппаСворачиваемость.Доступность	= Ложь;
	КонецЕсли;
	
	Элементы.ДоступноРисование.Доступность = ТегиПоддерживающиеРисование.Найти(ИмяТега) <> Неопределено;
	
	СворачиватьТег = 0;
	СвернутПоУмолчанию = Ложь;
	Элементы.СвернутПоУмолчанию.Доступность = Ложь;
	Если ТекущийЭлементШаблонаHTMLИмеющийTag.hasAttribute("data-bit-collapse") Тогда
		Элементы.СвернутПоУмолчанию.Доступность = Истина;
		Если ТекущийЭлементШаблонаHTMLИмеющийTag.getAttribute("data-bit-collapse") = "collapse" Тогда
			СворачиватьТег = 1;
			СвернутПоУмолчанию = Истина;
		Иначе
			СворачиватьТег = 2;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементHTML = ТекущийЭлементШаблонаHTMLИмеющийTag;
	
	Если Элементы.ФормаОтображатьДеревоТегов.Пометка Тогда
		НажатиеВПолеHTMLДокумента = Истина;
		
		Если Элемент.Документ.body.outerHTML <> ТекстHTMLПоследний Тогда
			
			ТекстHTMLПоследний = Элемент.Документ.body.outerHTML;
			ОбновитьДеревоТегов();
		КонецЕсли;
		
		СтрокаДерева = ПолучитьСтрокуДереваПоHTMLЭлементу(ЭлементHTML);
		
		Элементы.ДеревоТегов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		НажатиеВПолеHTMLДокумента = Ложь;
		ТекущийЭлементШаблонаHTMLИмеющийTag.click();
	КонецЕсли;
	
КонецПроцедуры

// ----------------ИЗМЕНЕНИЕ-ПАРАМЕТРОВ-ЭЛЕМЕНТА-HTML-----------------

&НаКлиенте
Процедура УстановитьПараметрыЭлементаHTML(Знач ЭлементHTML)
	
	// Сбрасываем положение доступности изменений элементов
	Элементы.ЭлементHTMLТумблерТаблицы.Доступность = Ложь;
	
	Элементы.ЭлементHTMLВысотаГруппа.Доступность = Ложь;
	Элементы.ЭлементHTMLШиринаГруппа.Доступность = Ложь;
	
	Элементы.ЭлементHTMLРазмерРамки.Доступность = Ложь;
	Элементы.ЭлементHTMLВертикальноеВыравниваниеЯчейки.Доступность = Ложь;

	Элементы.ПараметрыЭлементовHTML.Доступность = Ложь;
	
	Элементы.ЭлементРежимВводаПоляВвода.Доступность = Ложь;
	
	Элементы.СтраницыВысотаЕдИзмерения.ТекущаяСтраница = Элементы.СтраницаВысотаЕдИзмеренияОбщая;
	Элементы.СтраницыШиринаЕдИзмерения.ТекущаяСтраница = Элементы.СтраницаШиринаЕдИзмеренияОбщая;
	
	Элементы.НастройкиДобавленияИзображения.Видимость = Ложь;
	
	ОбъектМожноМенять = Ложь;
	
	// Определяем тип элемента
	Если ЭлементHTML <> Неопределено Тогда
		
		СохранитьДанныеТекущегоЭлементаШаблонаHTML(ЭлементHTML);
		
		ИмяТега = НРег(ЭлементHTML.tagName);
		ЭлементHTMLИмяТега = ИмяТега;
		
		Пока Не ОбъектМожноМенять И ИмяТега <> "body" Цикл
			// Устанавливаем заголовок для выбранного тега.
			Если (ИмяТега = "input") И (НРег(ЭлементHTML.type) = "checkbox") Тогда
				ВыбранныйЭлементHTML = НСтр("ru='Флажок';en='Checkbox'");
			ИначеЕсли ЗначениеЗаполнено(ИмяТега)
				И ПредставлениеИменТегов.Свойство(ИмяТега, ВыбранныйЭлементHTML) Тогда
			Иначе
				ВыбранныйЭлементHTML = ЭлементHTML.tagName;
			КонецЕсли;
			
			// Индивидуальные действия для различных тегов
			Если ИмяТега = "td" Тогда
				ЭлементHTMLСтатусТумблера = "Ячейка";
				Элементы.ЭлементHTMLТумблерТаблицы.Доступность = Истина;
				Элементы.ЭлементHTMLВертикальноеВыравниваниеЯчейки.Доступность = Истина;
				ОбъектМожноМенять = Истина;
				АтрибутVerticalAlign = ЭлементHTML.style.verticalAlign;
				Если Не ЗначениеЗаполнено(АтрибутVerticalAlign) Тогда
					АтрибутVerticalAlign = "middle";
				КонецЕсли; 
				ВертикальноеВыравниваниеЯчейки = АтрибутVerticalAlign;
			ИначеЕсли ИмяТега	= "textarea" Тогда
				РежимВводаПоляВводаМногострочный = Истина;
				Элементы.ЭлементРежимВводаПоляВвода.Доступность = Истина;
				Элементы.СтраницыВысотаЕдИзмерения.ТекущаяСтраница = Элементы.СтраницаВысотаЕдИзмеренияTextArea;
				Элементы.СтраницыШиринаЕдИзмерения.ТекущаяСтраница = Элементы.СтраницаШиринаЕдИзмеренияTextArea;
				ОбъектМожноМенять = Истина;
			ИначеЕсли ИмяТега	= "table" Тогда
				ОбъектМожноМенять = Истина;
			ИначеЕсли ИмяТега	= "img" Тогда
				ОбъектМожноМенять = Истина;
				Если ЭлементHTML.hasAttribute("data-bit-selected-img-id") Тогда
					Элементы.НастройкиДобавленияИзображения.Видимость = Истина;
				КонецЕсли;
			ИначеЕсли ИмяТега	= "select" Тогда
				ОбъектМожноМенять = Истина;
			ИначеЕсли ИмяТега	= "input" И НРег(ЭлементHTML.type) <> "checkbox" Тогда
				РежимВводаПоляВводаМногострочный = Ложь;
				Элементы.ЭлементРежимВводаПоляВвода.Доступность = Истина;
				ОбъектМожноМенять = Истина;
			Иначе
				ЭлементHTML = ЭлементHTML.parentNode;
				ИмяТега = НРег(ЭлементHTML.tagName);
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектМожноМенять Тогда
			СохранитьДанныеТекущегоЭлементаШаблонаHTML(ЭлементHTML);
			
			Элементы.ПараметрыЭлементовHTML.Доступность = Истина;
			Элементы.ЭлементHTMLШиринаГруппа.Доступность = Истина;
			Элементы.ЭлементHTMLВысотаГруппа.Доступность = ИмяТега <> "select";
			
			// Присваиваем значения для сброса изменения
			ИсходнаяШиринаЭлементаHTML = ПолучитьШиринуHTMLЭлемента(ЭлементHTML);
			ИсходнаяВысотаЭлементаHTML = ПолучитьВысотуHTMLЭлемента(ЭлементHTML);
			
			ИзменитьЗначенияПолзунковШириныВысоты(ИсходнаяШиринаЭлементаHTML, ИсходнаяВысотаЭлементаHTML);
			ТекстHTMLПоследний = Элементы.ПолеHTMLДокумента.Документ.body.outerHTML;
			
		КонецЕсли;
	Иначе
		ВыбранныйЭлементHTML = НСтр("ru='Текст'");
		ЭлементHTMLИмяТега = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьШиринуHTMLЭлемента(ЭлементHTML)
	
	ШиринаЭлемента = "";
	
	Попытка
		ШиринаЭлемента = ЭлементHTML.style.width;
	Исключение
	КонецПопытки;
			
	Если Не ЗначениеЗаполнено(ШиринаЭлемента) Тогда
		Если Нрег(ЭлементHTML.tagname) = "textarea"
			И ЭлементHTML.hasAttribute("Cols")
		Тогда
			Попытка
				ШиринаЭлемента = Формат(ЭлементHTML.cols,"ЧГ=") + "cols";
			Исключение	КонецПопытки;
		ИначеЕсли ЭлементHTML.hasAttribute("Width") Тогда
			ШиринаЭлемента = ЭлементHTML.getAttribute("Width");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШиринаЭлемента) Тогда
		Попытка
			ШиринаЭлемента = ЭлементHTML.width;
		Исключение
			ШиринаЭлемента = "";
		КонецПопытки;
	КонецЕсли;
	
	Возврат ШиринаЭлемента;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВысотуHTMLЭлемента(ЭлементHTML)
	
	ВысотаЭлемента = "";
	
	Если Нрег(ЭлементHTML.tagname) = "td" Тогда
		Попытка
			ВысотаЭлемента = ЭлементHTML.parentnode.style.height;
		Исключение КонецПопытки;
	Иначе
		Попытка
			ВысотаЭлемента = ЭлементHTML.style.height;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ВысотаЭлемента) Тогда
		
		Если Нрег(ЭлементHTML.tagname) = "textarea" Тогда
			Попытка
				ВысотаЭлемента = Строка(ЭлементHTML.rows) + "rows";
			Исключение	КонецПопытки;
			
		ИначеЕсли ЭлементHTML.hasAttribute("Height") Тогда
			ВысотаЭлемента = ЭлементHTML.getAttribute("Height");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВысотаЭлемента) Тогда
		Попытка
			ВысотаЭлемента = ЭлементHTML.height;
		Исключение
			ВысотаЭлемента = "";
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВысотаЭлемента;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьЗначенияПолзунковШириныВысоты(Ширина, Высота)
	
	Размер = СтруктураРазмераЭлементаHTML(Ширина);
	ЭлементHTMLШиринаЕдИзмерения = Размер.Единица;
	ЭлементHTMLШирина			 = Размер.Величина;
	ПереключениеЕдИзмеренияЭлементаHTMLШирина();
		
	Размер = СтруктураРазмераЭлементаHTML(Высота);
	ЭлементHTMLВысотаЕдИзмерения = Размер.Единица;
	ЭлементHTMLВысота			 = Размер.Величина;
	ПереключениеЕдИзмеренияЭлементаHTMLВысота();
	
КонецПроцедуры

// Раскладвывает строку в структуру размера элемента HTML.
//
// Параметры:
//  Размер	 - Строка	 - Например, "100px", "15%", "10" и т.д.
// 
// Возвращаемое значение:
//   - Стурктруа.
//
&НаКлиенте
Функция СтруктураРазмераЭлементаHTML(РазмерСтрока)
	
	Размер = НРег(РазмерСтрока);
	
	Единицы = Новый Массив;
	Единицы.Добавить("%");
	Единицы.Добавить("px");
	Единицы.Добавить("pt");
	Единицы.Добавить("cols");
	Единицы.Добавить("rows");
	
	Величина = 0;
	Единица = "px";
	ВзятаЕдиницаПоУмолчанию = Истина;
	// Определение единицы измерения
	Для Каждого ЕдиницаИзмерения Из Единицы Цикл
		Если Прав(Размер, СтрДлина(ЕдиницаИзмерения)) = ЕдиницаИзмерения Тогда
			Единица = ЕдиницаИзмерения;
			ВзятаЕдиницаПоУмолчанию = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// Определение величины
	ВеличинаСтрока = Лев(Размер, СтрДлина(Размер) - ?(ВзятаЕдиницаПоУмолчанию, 0, СтрДлина(Единица)));
	Попытка
		Величина = Число(ВеличинаСтрока);
	Исключение КонецПопытки;
	
	Возврат Новый Структура("Величина, Единица", Величина, Единица);
	
КонецФункции

&НаКлиенте
Процедура ПереключениеЕдИзмеренияЭлементаHTMLШирина()
	
	Если ЭлементHTMLШиринаЕдИзмерения = "%" Тогда
		МаксимальноеЗначение = 100;
	ИначеЕсли ЭлементHTMLШиринаЕдИзмерения = "cols" Тогда
		МаксимальноеЗначение = 150;
	Иначе
		Если ЭлементHTMLИмяТега = "img" Тогда
			МаксимальноеЗначение = 1920;
		Иначе
			МаксимальноеЗначение = 1000;
		КонецЕсли;
	КонецЕсли;
	Элементы.ЭлементHTMLШиринаПолзунок.МаксимальноеЗначение = МаксимальноеЗначение;
	
	ЭлементHTMLШирина = Мин(ЭлементHTMLШирина, Элементы.ЭлементHTMLШиринаПолзунок.МаксимальноеЗначение);
	
	ЭлементыHTMLПолзункиПриИзменении(Элементы.ЭлементHTMLШиринаПолзунок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеЕдИзмеренияЭлементаHTMLВысота()
	
	Если ЭлементHTMLВысотаЕдИзмерения = "rows" Тогда
		МаксимальноеЗначение = 50;
	Иначе
		Если ЭлементHTMLИмяТега = "img" Тогда
			МаксимальноеЗначение = 1080;
		Иначе
			МаксимальноеЗначение = 500;
		КонецЕсли;
	КонецЕсли;
	Элементы.ЭлементHTMLВысотаПолзунок.МаксимальноеЗначение = МаксимальноеЗначение;
	
	ЭлементHTMLВысота = Мин(ЭлементHTMLВысота, Элементы.ЭлементHTMLВысотаПолзунок.МаксимальноеЗначение);
	
	ЭлементыHTMLПолзункиПриИзменении(Элементы.ЭлементHTMLВысотаПолзунок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыTDЭлемента()
	
	// Определяем столбец ячейки
	ТекущийЭлементШаблонаHTML = ПолучитьТекущийЭлементШаблонаHTML();
	
	СписокСтолбцов = ТекущийЭлементШаблонаHTML.parentNode.childNodes;
	Для Сч = 0 По СписокСтолбцов.length - 1 Цикл
		Если СписокСтолбцов[Сч] = ТекущийЭлементШаблонаHTML Тогда
			НомерСтолбца = Сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// При изменении ширины одной ячейки таблицы меняем ширину всех ячеек в этом столбце
	СписокСтрок = ТекущийЭлементШаблонаHTML.parentNode.parentNode.childNodes;
	Для Каждого СтрокаТаблицы Из СписокСтрок Цикл
		Если НомерСтолбца <= (СтрокаТаблицы.childNodes.length-1) Тогда
			Узел = СтрокаТаблицы.childNodes[НомерСтолбца];
			Если Узел.style <> Неопределено Тогда
				СтрокаТаблицы.childNodes[НомерСтолбца].style.Width = Строка(ЭлементHTMLШирина)+Строка(ЭлементHTMLШиринаЕдИзмерения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Изменение высоты строки ячейки
	СтрокаСтолбца = ТекущийЭлементШаблонаHTML.parentNode;
	СтрокаСтолбца.style.height = Строка(ЭлементHTMLВысота)+Строка(ЭлементHTMLВысотаЕдИзмерения);
	
	ТекущийЭлементШаблонаHTML.style.verticalAlign = ВертикальноеВыравниваниеЯчейки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементHTMLСбросПараметров(Команда)
	
	ЭлементHTMLШирина = 0;
	ЭлементHTMLВысота = 0;
	ЭлементHTMLРазмерРамки = 0;
	
	ТекущийЭлементШаблонаHTML = ПолучитьТекущийЭлементШаблонаHTML();
	
	СброситьОформлениеЭлементаHTML(Истина, Истина, Истина);
	
	ВертикальноеВыравниваниеЯчейки = "middle";
	ТекущийЭлементШаблонаHTML.style.verticalAlign = "";
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОформлениеЭлементаHTML(Ширина = Ложь, Высота = Ложь, Рамки = Ложь)
	
	ТекущийЭлементШаблонаHTML = ПолучитьТекущийЭлементШаблонаHTML();
	
	Попытка
		ИмяТега = НРег(ТекущийЭлементШаблонаHTML.tagName);
		Если Не ЗначениеЗаполнено(ИмяТега) Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Ширина Тогда
		ТекущийЭлементШаблонаHTML.style.width = "";
		
		Если ТекущийЭлементШаблонаHTML.hasAttribute("Width") Тогда
			Если ИмяТега = "table" Тогда
				ТекущийЭлементШаблонаHTML.setAttribute("Width","100%")
			Иначе
				ТекущийЭлементШаблонаHTML.removeAttribute("Width")
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийЭлементШаблонаHTML.hasAttribute("cols") Тогда
			ТекущийЭлементШаблонаHTML.setAttribute("cols", "0");
		КонецЕсли;
	КонецЕсли;
	
	Если Высота Тогда
		ТекущийЭлементШаблонаHTML.style.height = "";
		
		Если ТекущийЭлементШаблонаHTML.hasAttribute("Height") Тогда
			ТекущийЭлементШаблонаHTML.removeAttribute("Height")
		КонецЕсли;
	
		Если ТекущийЭлементШаблонаHTML.hasAttribute("rows") Тогда
			ТекущийЭлементШаблонаHTML.setAttribute("rows", "0")
		КонецЕсли;
	КонецЕсли;
	
	Если Рамки Тогда
		Если ТекущийЭлементШаблонаHTML.hasAttribute("Border") Тогда
			ТекущийЭлементШаблонаHTML.setAttribute("Border","1");
			РазмерРамки = "1";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВводаПоляВводаМногострочныйПриИзменении(Элемент)
	
	Перем style_overflow, outerHTML, УзелРодитель, ИндексChildren;
	
	ТекущийЭлементШаблонаHTML = ПолучитьТекущийЭлементШаблонаHTML();
	
	Если РежимВводаПоляВводаМногострочный
		И НРег(ТекущийЭлементШаблонаHTML.tagName) = "input"
	Тогда
		style_overflow = "auto";
		outerHTML = СтрЗаменить(ТекущийЭлементШаблонаHTML.outerHTML,"input","textarea");
		
	ИначеЕсли Не РежимВводаПоляВводаМногострочный
		И НРег(ТекущийЭлементШаблонаHTML.tagName) = "textarea"
	Тогда
		style_overflow = null;
		outerHTML = СтрЗаменить(ТекущийЭлементШаблонаHTML.outerHTML,"textarea","input");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(outerHTML) Тогда
		// Сохраняем родителя и индекс элемента в коллекции children
		Попытка
			УзелРодитель = ТекущийЭлементШаблонаHTML.parentNode;
			Для Сч = 1 По УзелРодитель.children.length Цикл
				Если ТекущийЭлементШаблонаHTML = УзелРодитель.children[Сч - 1] Тогда
					ИндексChildren = Сч - 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Исключение КонецПопытки;
		
		// Редактируем элемент
		ТекущийЭлементШаблонаHTML.style.overflow = style_overflow;
		ТекущийЭлементШаблонаHTML.outerHTML = outerHTML;
		
		// Восстановление текущего элемента
		Если ИндексChildren <> Неопределено Тогда
			
			ТекущийЭлементШаблонаHTML = УзелРодитель.children[ИндексChildren];
			// Восстанавливаем фокус на элементе поля ввода.
			ТекущийЭлементШаблонаHTML.focus();
			РаботаСШаблонамиHTMLКлиентСервер.УстановитьТекущийЭлементРедактораHTML(Элементы.ПолеHTMLДокумента.Документ, ТекущийЭлементШаблонаHTML);
			УстановитьПараметрыЭлементаHTML(ТекущийЭлементШаблонаHTML);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаТаблицуПриИзменении(Элемент)
	Если ЭлементHTMLСтатусТумблера = "Таблица" Тогда
		Попытка
			ТекущийЭлементШаблонаHTML = ПолучитьТекущийЭлементШаблонаHTML();
			ТекущийЭлементШаблонаHTML = РаботаСHTMLКлиентСервер.ПолучитьБлижайшийУзел(ТекущийЭлементШаблонаHTML, "table");
			СохранитьДанныеТекущегоЭлементаШаблонаHTML(ТекущийЭлементШаблонаHTML);
			ИсходнаяШиринаЭлементаHTML = ПолучитьШиринуHTMLЭлемента(ТекущийЭлементШаблонаHTML);
			ИсходнаяВысотаЭлементаHTML = ПолучитьВысотуHTMLЭлемента(ТекущийЭлементШаблонаHTML);
			ИзменитьЗначенияПолзунковШириныВысоты(ИсходнаяШиринаЭлементаHTML,ИсходнаяВысотаЭлементаHTML);
			Если ТекущийЭлементШаблонаHTML.hasAttribute("Border") Тогда
				РазмерРамки = ТекущийЭлементШаблонаHTML.getAttribute("Border");
			КонецЕсли;
			
			ВыбранныйЭлементHTML = "Таблица";
			Элементы.ЭлементHTMLРазмерРамки.Доступность = Истина;
			Элементы.ЭлементHTMLВертикальноеВыравниваниеЯчейки.Доступность = Ложь;
		Исключение
			А = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось найти таблицу'"));
		КонецПопытки;
	Иначе
		ТекущийЭлементШаблонаHTML = Элементы.ПолеHTMLДокумента.Документ.getSelection().focusNode.parentNode;
		СохранитьДанныеТекущегоЭлементаШаблонаHTML(ТекущийЭлементШаблонаHTML);
		ИсходнаяШиринаЭлементаHTML = ПолучитьШиринуHTMLЭлемента(ТекущийЭлементШаблонаHTML);
		ИсходнаяВысотаЭлементаHTML = ПолучитьВысотуHTMLЭлемента(ТекущийЭлементШаблонаHTML);
		ИзменитьЗначенияПолзунковШириныВысоты(ИсходнаяШиринаЭлементаHTML,ИсходнаяВысотаЭлементаHTML);
		
		ВыбранныйЭлементHTML = "Ячейка";
		Элементы.ЭлементHTMLРазмерРамки.Доступность = Ложь;
		Элементы.ЭлементHTMLВертикальноеВыравниваниеЯчейки.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыHTMLПолзункиПриИзменении(Элемент)
	
	ТекущийЭлементШаблонаHTML = ПолучитьТекущийЭлементШаблонаHTML();
	
	Если Элемент = Элементы.ЭлементHTMLШиринаПолзунок
		Или Элемент = Элементы.ЭлементHTMLШирина
	Тогда
		Если ЭлементHTMLШиринаЕдИзмерения = "cols" Тогда
			ИмяАтрибута		 = "Cols";
			ЗначениеЕдиницы	 = "";
			ЗначениеАтрибута = Формат(ЭлементHTMLШирина, "ЧН=; ЧГ=");
			ТекущийЭлементШаблонаHTML.style.width = null;
		Иначе
			ИмяАтрибута		 = "Width";
			ЗначениеЕдиницы	 = ЭлементHTMLШиринаЕдИзмерения;
			ЗначениеАтрибута = Формат(ЭлементHTMLШирина, "ЧГ=");
		КонецЕсли;
		
		СброситьОформлениеЭлементаHTML(Истина,,);
		
	ИначеЕсли Элемент = Элементы.ЭлементHTMLВысотаПолзунок
		Или Элемент = Элементы.ЭлементHTMLВысота
	Тогда
		Если ЭлементHTMLВысотаЕдИзмерения = "rows" Тогда
			ИмяАтрибута		 = "Rows";
			ЗначениеЕдиницы	 = "";
			ЗначениеАтрибута = Формат(ЭлементHTMLВысота, "ЧН=; ЧГ=");
			ТекущийЭлементШаблонаHTML.style.height = null;
		Иначе
			ИмяАтрибута		 = "Height";
			ЗначениеЕдиницы	 = ЭлементHTMLВысотаЕдИзмерения;
			ЗначениеАтрибута = Формат(ЭлементHTMLВысота, "ЧГ=");
		КонецЕсли;
		
		СброситьОформлениеЭлементаHTML(,Истина,);
		
	ИначеЕсли Элемент = Элементы.ЭлементHTMLРазмерРамки Тогда
		ИмяАтрибута = "Border";
		ЗначениеАтрибута = Строка(РазмерРамки);
		ЗначениеЕдиницы	 = "";
		СброситьОформлениеЭлементаHTML(,,Истина);
		РазмерРамки = ЗначениеАтрибута;
	КонецЕсли;
	
	Если НРег(ТекущийЭлементШаблонаHTML.tagName) = "td" Тогда
		ОбновитьПараметрыTDЭлемента();
	Иначе
		Если ТекущийЭлементШаблонаHTML.hasAttribute(ИмяАтрибута) Тогда
			ТекущийЭлементШаблонаHTML.setAttribute(ИмяАтрибута, ЗначениеАтрибута + ЗначениеЕдиницы);
		ИначеЕсли ИмяАтрибута = "Rows" Или ИмяАтрибута = "Cols" Тогда
			Попытка
				ТекущийЭлементШаблонаHTML[ИмяАтрибута] = ЗначениеАтрибута;
			Исключение
			КонецПопытки;
		Иначе
			РаботаСШаблонамиHTMLКлиентСервер.ИзменитьЭлементСтиля(ТекущийЭлементШаблонаHTML, НРег(ИмяАтрибута), ЗначениеАтрибута + ЗначениеЕдиницы);
		КонецЕсли;
	КонецЕсли;
	ТекстHTMLПоследний = Элементы.ПолеHTMLДокумента.Документ.body.outerHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура КешДобавляемыеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтWORD(Команда)
	
	Документ = Элементы.ПолеHTMLДокумента.Документ;
	ОчиститьОтНенужныхТегов(Документ.Body);
	
КонецПроцедуры

// Рекурсивно удаляет из узла (включая подчиненные) некорректные для платформы стили и атрибуты тегов.
// Может использоваться для исправления HTML-документа, созданного в ms word
// или аналогичных мусорящих внешних редаткорах HTML.
//
// Параметры:
//  Документ - тело или другой узел html документа.
//
&НаКлиенте
Процедура ОчиститьОтНенужныхТегов(Документ)
	
	МассивИменАтрибутовДляУдаления = Новый Массив;
	
	Если Нрег(Документ.TagName) = "td" Тогда
		
		// Для ячеек таблиц необходимо
		// 1. Убрать атрибут "width".
		Для Каждого Атрибут Из Документ.attributes Цикл
			Если Нрег(Атрибут.name) = "width" Тогда
				МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			КонецЕсли;
		КонецЦикла;
		
		// 2. Убрать тэг "p", сохранив его содержимое
		НенужныеДети = Новый Массив;
		Для Каждого Ребенок Из Документ.children Цикл
			Если Нрег(Ребенок.Tagname) = "p" Тогда
				ВсеДетиРебенка = Ребенок.Children;
				Для Каждого РебенокРебенка Из ВсеДетиРебенка Цикл
					Документ.appendChild(РебенокРебенка);
				КонецЦикла;
				НенужныеДети.Добавить(Ребенок);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого НенужныйРебенок Из НенужныеДети Цикл
			Документ.removeChild(НенужныйРебенок);
		КонецЦикла;
	КонецЕсли;
	
	// Атрибуты для таблицы, которые нужно сохранить
	АтрибутыTable = Новый Массив;
	АтрибутыTable.Добавить("border");
	АтрибутыTable.Добавить("style");
	
	// Необходимые свойства стиля для таблицы
	СвойстваСтиляTable = Новый Массив;
	СвойстваСтиляTable.Добавить("border-collapse");
	СвойстваСтиляTable.Добавить("border-color");
	СвойстваСтиляTable.Добавить("border-style");
	
	ЗначенияСвойствСтилейTableПоУмолчанию = Новый Соответствие;
	ЗначенияСвойствСтилейTableПоУмолчанию.Вставить("border-collapse", "collapse");
	ЗначенияСвойствСтилейTableПоУмолчанию.Вставить("border-color", "inherit");
	ЗначенияСвойствСтилейTableПоУмолчанию.Вставить("border-style", "solid");
	
	Для Каждого Атрибут Из Документ.attributes Цикл
		
		Если НРег(Документ.TagName) = "table"
			И АтрибутыTable.Найти(НРег(Атрибут.name)) = Неопределено
		Тогда
			// Убрать ненужные атрибуты у элемента таблицы
			МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			
		ИначеЕсли НРег(Атрибут.name) = "style" Тогда
			
			// Для всех остальных элементов очистить атрибут "style" от MSO свойств стиля
			МассивИсходныхСвойствСтиля = СтрРазделить(Атрибут.value,";", Ложь);
			МассивСвойствСтиля = Новый Массив;
			Для Каждого СвойствоСтиля Из МассивИсходныхСвойствСтиля Цикл
				
				ИмяИЗначениеСвойства = СтрРазделить(СвойствоСтиля,":");
				
				ЗначениеСвойстваСтиля = СокрЛП(НРег(ИмяИЗначениеСвойства[0]));
				// Сохранить свойство стиля, если это не MSO-свойство
				Если Найти(ЗначениеСвойстваСтиля, "mso-") = 0 Тогда
					
					Если НРег(Документ.TagName) = "table" Тогда
						// Для таблицы сохранить только свойства стиля, содержащиеся в массиве СвойстваСтиляTable
						Если СвойстваСтиляTable.Найти(ЗначениеСвойстваСтиля) <> Неопределено Тогда
							МассивСвойствСтиля.Добавить(СвойствоСтиля);
						КонецЕсли;
					Иначе
						МассивСвойствСтиля.Добавить(СвойствоСтиля);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			НовоеЗначениеАтрибута = СтрСоединить(МассивСвойствСтиля,";");
			
			// Для строки таблицы установить свойство стиля "height" по умолчанию, если этого свойства нет
			Если НРег(Документ.TagName) = "tr"
				И Найти(НРег(НовоеЗначениеАтрибута), "height:") = 0
			Тогда
				МассивСвойствСтиля.Добавить("height:20px");
				НовоеЗначениеАтрибута = СтрСоединить(МассивСвойствСтиля,";");
			КонецЕсли;
			
			// Установить необходимые свойства стиля для таблицы, если этих свойств нет
			Если НРег(Документ.TagName) = "table" Тогда
				Для Каждого СвойствоСтиляTable Из СвойстваСтиляTable Цикл
					Если Найти(НРег(НовоеЗначениеАтрибута), СвойствоСтиляTable) = 0 Тогда
						МассивСвойствСтиля.Добавить(СвойствоСтиляTable + ":" + ЗначенияСвойствСтилейTableПоУмолчанию[СвойствоСтиляTable]);
						НовоеЗначениеАтрибута = СтрСоединить(МассивСвойствСтиля,";");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивСвойствСтиля.Количество() = 0 Тогда
				// Если в атрибуте стиля нет ни одного свойства, удалить этот атрибут
				МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			Иначе
				Атрибут.value = НовоеЗначениеАтрибута;
			КонецЕсли;
			
		ИначеЕсли НРег(Атрибут.name) = "class" Тогда
			// Удалить MSO-классы
			Если Лев(Атрибут.Value, 3) = "Mso" Тогда
				МассивИменАтрибутовДляУдаления.Добавить(Атрибут.name);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяАтрибутДляУдаления Из МассивИменАтрибутовДляУдаления Цикл
		Документ.removeAttribute(ИмяАтрибутДляУдаления);
	КонецЦикла;
	
	// Рекурсивный обратный обход дочерних узлов
	Если Документ.children.length <> 0 Тогда
		Для НомерРебенка = -Документ.children.length + 1 По 0 Цикл
			children = Документ.children[-НомерРебенка];
			Если Не Тип(children) = Тип("Число") Тогда
				Если Найти(children.Tagname, ":") Тогда
					// Удалить ненужный узел
					Документ.removeChild(children);
				Иначе
					ОчиститьОтНенужныхТегов(children);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДеревоТегов(Команда)
	
	ОтображатьДеревоТегов = Не Элементы.ФормаОтображатьДеревоТегов.Пометка;
	Элементы.ФормаОтображатьДеревоТегов.Пометка = ОтображатьДеревоТегов;
	
	ОбновитьДеревоТегов();
	
	// Делаем текущей страницу дерева
	Если ОтображатьДеревоТегов Тогда
		Элементы.ГруппаПараметрыСтраницы.ТекущаяСтраница = Элементы.ГруппаДерево;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	ОбновитьДеревоТегов();
	ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	ТекущийЭлементШаблонаHTMLИмеющийTag.click();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьТегПриИзменении(Элемент)
	
	ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	
	Если СкрыватьТег Тогда
		ТекущийЭлементШаблонаHTMLИмеющийTag.setAttribute("data-bit-hidden","true");
	Иначе
		ТекущийЭлементШаблонаHTMLИмеющийTag.removeAttribute("data-bit-hidden");
	КонецЕсли;
	ОбновитьДеревоТегов();
	ТекущийЭлементШаблонаHTMLИмеющийTag.click();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступноРисованиеПриИзменении(Элемент)
	
	ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	
	Если ДоступноРисование Тогда
		ТекущийЭлементШаблонаHTMLИмеющийTag.setAttribute("data-bit-draw-id", Строка(Новый УникальныйИдентификатор));
	Иначе
		ТекущийЭлементШаблонаHTMLИмеющийTag.removeAttribute("data-bit-draw-id");
	КонецЕсли;
	
	ОбновитьДеревоТегов();
	ТекущийЭлементШаблонаHTMLИмеющийTag.click();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоТегов()
	
	ОтображатьДеревоТегов = Элементы.ФормаОтображатьДеревоТегов.Пометка;
	
	Если ОтображатьДеревоТегов Тогда
		ДеревоТегов.ПолучитьЭлементы().Очистить();
		Элементы.ДеревоТегов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		Элементы.ГруппаДерево.Видимость = Истина;
		ЕстьРисунки = Ложь;
		ЗаполнитьДеревоТегов(Элементы.ПолеHTMLДокумента.Документ.body, ДеревоТегов.ПолучитьЭлементы(), 0);
		ПодключитьОбработчикОжидания("РазвернутьДеревоТегов",0.1,Истина);
	Иначе
		Элементы.ГруппаДерево.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоТегов(Документ, УровеньДерева, НомерУзла)
	
	НужныеСвойстваУзла = Новый Структура("tagName, innerText, outerHTML, innerHTML, children");
	ЗаполнитьЗначенияСвойств(НужныеСвойстваУзла, Документ);
	
	ТегУзла = Строка(НужныеСвойстваУзла.tagName);
	Если НРег(ТегУзла) = "option" Тогда
		Возврат;
	КонецЕсли;
	
	ИннерТекст = Строка(НужныеСвойстваУзла.innerText);
	ДочерниеУзлы = НужныеСвойстваУзла.children;
	ЧислоДочернихУзлов = ДочерниеУзлы.length;
	
	СтрокаДереваТегов = УровеньДерева.Добавить();
	
	СтрокаДереваТегов.ИмяТега = "<" + ТегУзла + ">";
	СтрокаДереваТегов.НомерУзла = НомерУзла;
	
	// Упрощенно оцениваем, есть ли атрибут в теге.
	СтрокаДереваТегов.СкрыватьТег = РаботаСHTMLКлиентСервер.ЕстьАтрибутВТекстеТега("data-bit-hidden", НужныеСвойстваУзла.outerHTML, НужныеСвойстваУзла.innerHTML);
	СтрокаДереваТегов.ДоступноРисование = РаботаСHTMLКлиентСервер.ЕстьАтрибутВТекстеТега("data-bit-draw-id", НужныеСвойстваУзла.outerHTML, НужныеСвойстваУзла.innerHTML);
	
	Если РаботаСHTMLКлиентСервер.ЕстьАтрибутВТекстеТега("data-bit-collapse", НужныеСвойстваУзла.outerHTML, НужныеСвойстваУзла.innerHTML) Тогда
		Если Документ.getAttribute("data-bit-collapse") = "collapse" Тогда
			СтрокаДереваТегов.СворачиватьТег = 1;
		Иначе
			СтрокаДереваТегов.СворачиватьТег = 2;
		КонецЕсли;
	Иначе
		СтрокаДереваТегов.СворачиватьТег = 0;
	КонецЕсли;
	
	Если РаботаСHTMLКлиентСервер.ЕстьАтрибутВТекстеТега("data-bit-sectionname", НужныеСвойстваУзла.outerHTML, НужныеСвойстваУзла.innerHTML) Тогда
		СтрокаДереваТегов.СЭМД_ИменаСекций.ЗагрузитьЗначения(СтрРазделить(Документ.getAttribute("data-bit-sectionname"), "|"));
	Иначе
		СтрокаДереваТегов.СЭМД_ИменаСекций.Очистить();
	КонецЕсли;
	
	Если НРег(ТегУзла) <> "body" Тогда
		СтрокаДереваТегов.ТекстТега = ИннерТекст;
	КонецЕсли;
	
	ЕстьРисунки = ЕстьРисунки Или СтрокаДереваТегов.ДоступноРисование;
	
	Если ЧислоДочернихУзлов <> 0 Тогда
		Для НомерДочернегоУзла = 0 По ЧислоДочернихУзлов - 1 Цикл
			ЗаполнитьДеревоТегов(ДочерниеУзлы[НомерДочернегоУзла], СтрокаДереваТегов.ПолучитьЭлементы(), НомерДочернегоУзла);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговПриАктивизацииСтроки(Элемент)
	
	Элементы.ДоступноРисование.Видимость = Ложь;
	Элементы.НастройкиДобавленияИзображения.Видимость = Ложь;
	
	Если Элементы.ПолеHTMLДокумента.Документ.body.outerHTML <> ТекстHTMLПоследний Тогда
		ТекстHTMLПоследний = Элементы.ПолеHTMLДокумента.Документ.body.outerHTML;
		ОбновитьДеревоТегов();
	КонецЕсли;
	
	Если НажатиеВПолеHTMLДокумента Тогда
		ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	Иначе
		
		СтрокаДерева = Элементы.ДеревоТегов.ТекущиеДанные;
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СкрыватьТег = СтрокаДерева.СкрыватьТег;
		ДоступноРисование = СтрокаДерева.ДоступноРисование;
		
		HTMLЭлемент = ПолучитьHTMLЭлементПоСтрокеДереваТегов(СтрокаДерева);
		
		Если HTMLЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийЭлементШаблонаHTMLИмеющийTag = HTMLЭлемент;
		СохранитьДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag(ТекущийЭлементШаблонаHTMLИмеющийTag);
		
		УстановитьПараметрыЭлементаHTML(HTMLЭлемент);
		
		СворачиватьТег = 0;
		СвернутПоУмолчанию = Ложь;
		Элементы.СвернутПоУмолчанию.Доступность = Ложь;
		Если ТекущийЭлементШаблонаHTMLИмеющийTag.hasAttribute("data-bit-collapse") Тогда
			
			Элементы.СвернутПоУмолчанию.Доступность = Истина;
			
			Если ТекущийЭлементШаблонаHTMLИмеющийTag.getAttribute("data-bit-collapse") = "collapse" Тогда
				СворачиватьТег = 1;
				СвернутПоУмолчанию = Истина;
			Иначе
				СворачиватьТег = 2;
			КонецЕсли;
		КонецЕсли;
		
		ИмяТега = НРег(Строка(ТекущийЭлементШаблонаHTMLИмеющийTag.tagName));
		
		Если ТегиПоддерживающиеСкрываемость.Найти(ИмяТега) <> Неопределено Тогда
			Элементы.СкрыватьТег.Доступность			= Истина;
			Элементы.ГруппаСворачиваемость.Доступность	= Истина;
		Иначе
			Элементы.СкрыватьТег.Доступность			= Ложь;
			Элементы.ГруппаСворачиваемость.Доступность	= Ложь;
		КонецЕсли;
		
		Элементы.ДоступноРисование.Доступность = ТегиПоддерживающиеРисование.Найти(ИмяТега) <> Неопределено;
		
		Если НРег(ТекущийЭлементШаблонаHTMLИмеющийTag.tagName) <> "body" Тогда
			Попытка
				ЭтаФорма.ТекущийЭлемент = Элементы.ПолеHTMLДокумента;
				РаботаСШаблонамиHTMLКлиентСервер.УстановитьТекущийЭлементРедактораHTML(Элементы.ПолеHTMLДокумента.Документ, ТекущийЭлементШаблонаHTMLИмеющийTag);
				ТекущийЭлементШаблонаHTMLИмеющийTag.scrollIntoView();
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если РедактированиеСекцийСЭМД
		И Элементы.ДеревоТегов.ТекущиеДанные <> Неопределено
		И НРег(ТекущийЭлементШаблонаHTMLИмеющийTag.tagName) <> "body"
		И НРег(ТекущийЭлементШаблонаHTMLИмеющийTag.tagName) <> "br"
	Тогда
		ДоступныеИмена = Новый СписокЗначений;
		ДоступныеИмена.ЗагрузитьЗначения(ИменаСекцийСЭМД);
		Элементы.ДеревоТегов.ТекущиеДанные.СЭМД_ИменаСекций.ДоступныеЗначения = ДоступныеИмена;
	Иначе
		Элементы.ДеревоТегов.ТекущиеДанные.СЭМД_ИменаСекций.ДоступныеЗначения = Новый СписокЗначений;
	КонецЕсли;
	
	Если ТекущийЭлементШаблонаHTMLИмеющийTag.tagName = "TABLE" Тогда
		Элементы.ТаблицаПараметровМногострочная.Видимость = мУчетнаяПолитика.ИспользоватьВерсионированиеШО;
		Если ТекущийЭлементШаблонаHTMLИмеющийTag.hasAttribute("data-bit-dyntable-id") Тогда
			ТаблицаПараметровТегаTable = РаботаСШаблонамиHTML.ТаблицаШаблоновПоСтрокеУИД(ТекущийЭлементШаблонаHTMLИмеющийTag.getAttribute("data-bit-dyntable-id"));
		Иначе
			ТаблицаПараметровТегаTable = ПредопределенноеЗначение("Справочник.ТаблицыШаблоновПриема.ПустаяСсылка");
		КонецЕсли;
	Иначе
		Элементы.ТаблицаПараметровМногострочная.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДеревоТеговГруппаПеремещенияТегов.Доступность = Элементы.ДеревоТегов.ВыделенныеСтроки.Количество() = 1;
	Элементы.ДобавитьОбъединяющийТег.Доступность = Ложь;
	Элементы.УдалитьОбъединяющийТег.Доступность = Ложь;
	
	КоличествоВыделенныхСтрок = Элемент.ВыделенныеСтроки.Количество();
	Если КоличествоВыделенныхСтрок > 0 Тогда
		
		СтрокиНаОдномУровне = Истина;
		СтрокаТега = ДеревоТегов.НайтиПоИдентификатору(Элемент.ВыделенныеСтроки[0]);
		Если СтрокаТега.ИмяТега <> "<BODY>" Тогда
			
			Родитель = СтрокаТега.ПолучитьРодителя();
			Для Каждого ИндексВыделеннойСтроки Из Элемент.ВыделенныеСтроки Цикл
				ТекущаяСтрока = ДеревоТегов.НайтиПоИдентификатору(ИндексВыделеннойСтроки);
				Если ТекущаяСтрока.ПолучитьРодителя() <> Родитель Тогда
					СтрокиНаОдномУровне = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокиНаОдномУровне Тогда
				// Строки идут подряд
				ИндексыПотомков = ПолучитьИндексыНачальногоКонечногоПотомка(Элемент.ВыделенныеСтроки);
				Если ИндексыПотомков.Конечный - ИндексыПотомков.Начальный = КоличествоВыделенныхСтрок - 1 Тогда
					Элементы.ДобавитьОбъединяющийТег.Доступность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ДоступноРисование.Видимость = мУчетнаяПолитика.ИспользоватьВерсионированиеШО И СтрокаТега.ИмяТега = "<IMG>";
	КонецЕсли;
	
	Если КоличествоВыделенныхСтрок = 1
		И (СтрокаТега.ПолучитьЭлементы().Количество() > 0
			Или Не ЗначениеЗаполнено(ПолучитьHTMLЭлементПоСтрокеДереваТегов(СтрокаТега).innerHTML))
		И СтрокаТега.ИмяТега = "<DIV>"
	Тогда
		Элементы.УдалитьОбъединяющийТег.Доступность = Истина;
	КонецЕсли;
	
	Если КоличествоВыделенныхСтрок = 1
		И СтрокаТега.ИмяТега = "<IMG>"
		И ТекущийЭлементШаблонаHTMLИмеющийTag.hasAttribute("data-bit-selected-img-id")
		И мУчетнаяПолитика.ИспользоватьВерсионированиеШО
	Тогда
		Элементы.НастройкиДобавленияИзображения.Видимость = Истина;
		ЗаполнитьНастройкиДобавленияИзображения(ТекущийЭлементШаблонаHTMLИмеющийTag);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиДобавленияИзображения(ТекущийЭлементШаблонаHTMLИмеющийTag)
	
	НастройкиДобавленияИзображенияОригинальныйРазмер = Истина;
	НастройкиДобавленияИзображенияРежимЗаполненияКонтейнера = "";
	
	ПереносимыеСтилиСтрока = ТекущийЭлементШаблонаHTMLИмеющийTag.getAttribute("data-bit-custom-style");
	СтилиСтрока = ТекущийЭлементШаблонаHTMLИмеющийTag.getAttribute("style");
	Если Не (ЗначениеЗаполнено(ПереносимыеСтилиСтрока)
			И ЗначениеЗаполнено(СтилиСтрока))
	Тогда
		Возврат;
	КонецЕсли;
	
	ПереносимыеСтили = Новый Массив;
	Для Каждого ЭлементПереносимогоСтиля Из СтрРазделить(ПереносимыеСтилиСтрока, ";") Цикл
		ПереносимыеСтили.Добавить(СокрЛП(НРег(ЭлементПереносимогоСтиля)));
	КонецЦикла;
	
	ЭлементыСтиля = СтрРазделить(СтилиСтрока, ";");
	
	ЗначенияЭлементовСтиля = Новый Соответствие;
	Для Каждого ЭлементСтиля Из ЭлементыСтиля Цикл
		ИмяЗначениеЭлементаСтиля = СтрРазделить(ЭлементСтиля, ":");
		ЗначениеЭлементаСтиля = Неопределено;
		Если ИмяЗначениеЭлементаСтиля.Количество() > 1 Тогда
			ЗначениеЭлементаСтиля = СокрЛП(ИмяЗначениеЭлементаСтиля[1]);
		КонецЕсли;
		ЗначенияЭлементовСтиля.Вставить(СокрЛП(НРег(ИмяЗначениеЭлементаСтиля[0])), ЗначениеЭлементаСтиля);
	КонецЦикла;
	
	Если ПереносимыеСтили.Найти("width") <> Неопределено
		И ПереносимыеСтили.Найти("height") <> Неопределено
	Тогда
		НастройкиДобавленияИзображенияОригинальныйРазмер = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоТегов()
	
	ЭлементыДереваТегов = ДеревоТегов.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДереваТегов Цикл
		Элементы.ДеревоТегов.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗаполнитьКонстантыФормы()
	
	Список = Элементы.КомандаformatBlock.СписокВыбора;
	Список.Добавить("<p>", "Обычный");
	Список.Добавить("<h1>", "Заголовок 1");
	Список.Добавить("<h2>", "Заголовок 2");
	Список.Добавить("<h3>", "Заголовок 3");
	Список.Добавить("<h4>", "Заголовок 4");
	Список.Добавить("<h5>", "Заголовок 5");
	Список.Добавить("<h6>", "Заголовок 6");
	Список.Добавить("<pre>", "Форматированный");
	Список.Добавить("<address>", "Адрес");
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
	СтилиТекста = ТекЭлемент.Значение;
	
	// Заполнение списка шрифтов
	Список = Элементы.КомандаFontName.СписокВыбора;
	Список.Добавить("Arial");
	Список.Добавить("Arial Black");
	Список.Добавить("Arial Narrow");
	Список.Добавить("Comic Sans MS");
	Список.Добавить("Courier New");
	Список.Добавить("System");
	Список.Добавить("Tahoma");
	Список.Добавить("Times New Roman");
	Список.Добавить("Verdana");
	Список.Добавить("Wingdings");
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
	ИмяШрифта = ТекЭлемент.Значение;
	
	// Заполнение списка размеров
	Список = Элементы.КомандаFontSize.СписокВыбора;
	Для Ном = 1 По 14 Цикл
		Список.Добавить(Ном);
	КонецЦикла;
	ТекЭлемент = Список.НайтиПоИдентификатору(2);
	РазмерыШрифта = ТекЭлемент.Значение;
	
	ВидШаблонаПриИзменении(Неопределено);
	ТекПараметрВставлятьЗаголовок = Истина;
	ТекПараметрСНовойСтроки = Истина;
	
	НеАктивизироватьСтрокуПараметра = Истина;
	
	Элементы.ПараметрыЭлементовHTML.Доступность = Ложь;
	Элементы.ЭлементРежимВводаПоляВвода.Доступность = Ложь;
	Элементы.ЭлементHTMLТумблерТаблицы.Доступность = Ложь;
	Элементы.ЭлементHTMLРазмерРамки.Доступность = Ложь;
	
	ТегиПоддерживающиеСкрываемость = Новый Массив;
	ТегиПоддерживающиеСкрываемость.Добавить("div");
	ТегиПоддерживающиеСкрываемость.Добавить("p");
	ТегиПоддерживающиеСкрываемость.Добавить("strong");
	ТегиПоддерживающиеСкрываемость.Добавить("pre");
	ТегиПоддерживающиеСкрываемость.Добавить("tr");
	ТегиПоддерживающиеСкрываемость.Добавить("table");
	ТегиПоддерживающиеСкрываемость.Добавить("span");
	Если Ложь Тогда
		ТегиПоддерживающиеСкрываемость.Добавить("input");
		ТегиПоддерживающиеСкрываемость.Добавить("textarea");
		ТегиПоддерживающиеСкрываемость.Добавить("a");
	КонецЕсли;
	
	ТегиРазрешающиеВставкуПараметров = Новый Массив;
	ТегиРазрешающиеВставкуПараметров.Добавить("div");
	ТегиРазрешающиеВставкуПараметров.Добавить("p");
	ТегиРазрешающиеВставкуПараметров.Добавить("body");
	ТегиРазрешающиеВставкуПараметров.Добавить("html");
	ТегиРазрешающиеВставкуПараметров.Добавить("td");
	ТегиРазрешающиеВставкуПараметров.Добавить("span");
	
	ПредставлениеИменТегов = Новый Структура;
	ПредставлениеИменТегов.Вставить("td",		НСтр("ru='Колонка'"));
	ПредставлениеИменТегов.Вставить("table",	НСтр("ru='Таблица';en='Table'"));
	ПредставлениеИменТегов.Вставить("p",		НСтр("ru='Строка'"));
	ПредставлениеИменТегов.Вставить("textarea", НСтр("ru='Поле многострочного ввода';en='TextArea'"));
	ПредставлениеИменТегов.Вставить("a",		НСтр("ru='Ссылка';en='Anchor'"));
	ПредставлениеИменТегов.Вставить("img",		НСтр("ru='Изображение'"));
	ПредставлениеИменТегов.Вставить("select",	НСтр("ru='Поле выбора';en='Select'"));
	ПредставлениеИменТегов.Вставить("input",	НСтр("ru='Поле ввода';en='Input'"));
	
	ТегиПоддерживающиеРисование = Новый Массив;
	ТегиПоддерживающиеРисование.Добавить("img");
	
КонецПроцедуры

&НаКлиенте
Процедура СворачиватьТегПриИзменении(Элемент)
	
	ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	
	Если СворачиватьТег Тогда
		ТекущийЭлементШаблонаHTMLИмеющийTag.setAttribute("data-bit-collapse","collapse");
	Иначе
		ТекущийЭлементШаблонаHTMLИмеющийTag.removeAttribute("data-bit-collapse");
	КонецЕсли;
	ОбновитьДеревоТегов();
	ТекущийЭлементШаблонаHTMLИмеющийTag.click();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутПоУмолчаниюПриИзменении(Элемент)
	
	ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	
	Если СвернутПоУмолчанию Тогда
		ТекущийЭлементШаблонаHTMLИмеющийTag.setAttribute("data-bit-collapse","collapse");
	Иначе
		ТекущийЭлементШаблонаHTMLИмеющийTag.setAttribute("data-bit-collapse","expand");
	КонецЕсли;
	ОбновитьДеревоТегов();
	ТекущийЭлементШаблонаHTMLИмеющийTag.click();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровТегаTableПриИзменении(Элемент)
	
	ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	
	Если ЗначениеЗаполнено(ТаблицаПараметровТегаTable) Тогда
		Если Найти(Элементы.ПолеHTMLДокумента.Документ.body.outerHTML,Строка(ТаблицаПараметровТегаTable.УникальныйИдентификатор())) = 0 Тогда
			НомерЭталоннойСтроки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаблицаПараметровТегаTable, "НомерЭталоннойСтроки");
			Если НомерЭталоннойСтроки > ТекущийЭлементШаблонаHTMLИмеющийTag.rows.length Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранная таблица имеет номер эталонной строки: %1, однако, таблица HTML имеет меньше строк.
																									|Таблица не присвоена!'"), НомерЭталоннойСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ТаблицаПараметровТегаTable = Неопределено;
				ТекущийЭлементШаблонаHTMLИмеющийTag.removeAttribute("data-bit-dyntable-id");
			Иначе
				ТекущийЭлементШаблонаHTMLИмеющийTag.setAttribute("data-bit-dyntable-id", Строка(ТаблицаПараметровТегаTable.УникальныйИдентификатор()));
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ссылка на данную таблицу уже есть в шаблоне. Её указание в двух таблицах HTML не допускается.'"));
			ТаблицаПараметровТегаTable = Неопределено;
		КонецЕсли;
	Иначе
		ТекущийЭлементШаблонаHTMLИмеющийTag.removeAttribute("data-bit-dyntable-id");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереименоватьПараметрыНаСервере(Знач СоответствияПараметрам)
	
	Для Каждого Строка Из СоответствияПараметрам.Выгрузить() Цикл
		ПараметрHTML = Строка.Параметр;
		Если ПараметрHTML.Наименование <> Строка.Представление Тогда
			ОбПараметрHTML = ПараметрHTML.ПолучитьОбъект();
			ОбПараметрHTML.Наименование = Строка.Представление;
			ОбПараметрHTML.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьПараметрыШаблонаОбработки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПереименоватьПараметрыШаблонаОбработкиПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru='Наименования элементов в базе данных будут изменены. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, 30);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьПараметрыШаблонаОбработкиПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ПереименоватьПараметрыНаСервере(Объект.СоответствияПараметрам);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиПараметрыНаСервере()
	
	Если Объект.СоответствияПараметрам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПараметровОбработки = Новый ТаблицаЗначений;
	ТаблицаПараметровОбработки.Колонки.Добавить("ПараметрОбработки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	ТаблицаПараметровОбработки.Колонки.Добавить("ПараметрHTML", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыHTML"));
	
	Для Каждого Строка Из Объект.СоответствияПараметрам Цикл
		СтрокаТаблицы = ТаблицаПараметровОбработки.Добавить();
		СтрокаТаблицы.ПараметрОбработки = Строка.Представление;
	КонецЦикла;
	
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ПараметрыHTML.Наименование КАК Наименование,
		|	ПараметрыHTML.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втПараметры
		|ИЗ
		|	ПланВидовХарактеристик.ПараметрыHTML КАК ПараметрыHTML
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|%1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВложенныйЗапрос.ПараметрОбработки КАК ПараметрОбработки
		|ПОМЕСТИТЬ втГруппировки
		|ИЗ
		|	(ВЫБРАТЬ
		|		втРезультатПоиска.Ссылка КАК Ссылка,
		|		СУММА(втРезультатПоиска.Количество) КАК Количество,
		|		втРезультатПоиска.ПараметрОбработки КАК ПараметрОбработки
		|	ИЗ
		|		втРезультатПоиска КАК втРезультатПоиска
		|	
		|	СГРУППИРОВАТЬ ПО
		|		втРезультатПоиска.Ссылка,
		|		втРезультатПоиска.ПараметрОбработки) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.ПараметрОбработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втГруппировки.Ссылка КАК Ссылка,
		|	втГруппировки.ПараметрОбработки КАК ПараметрОбработки
		|ИЗ
		|	втГруппировки КАК втГруппировки
		|ГДЕ
		|	втГруппировки.Количество = 1";
	
	мЗапросПараметров = Новый Массив;
	ПервыйВложенныйЗапрос = Истина;
	Для Каждого Строка Из ТаблицаПараметровОбработки Цикл
		
		МассивСловПоиска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка.ПараметрОбработки, "_");
		
		ШаблонВложенногоЗапроса =
			"ВЫБРАТЬ
			|%1
			|ИЗ
			|	(ВЫБРАТЬ
			|		втПараметры.Ссылка КАК Ссылка,
			|		1 КАК Количество
			|	ИЗ
			|		втПараметры КАК втПараметры
			|	ГДЕ
			|		%2) КАК ВложенныйЗапрос";
		
		ШаблонТекстаПолей =
			"	ВложенныйЗапрос.Ссылка%1,
			|	ВложенныйЗапрос.Количество%2,
			|	""%3""%4%5";
		
		Если ПервыйВложенныйЗапрос Тогда
			ТекстПолей = СтрШаблон(ШаблонТекстаПолей, " КАК Ссылка", " КАК Количество", Строка.ПараметрОбработки, " КАК ПараметрОбработки", СтрШаблон("%1ПОМЕСТИТЬ втРезультатПоиска", Символы.ПС));
		Иначе
			ТекстПолей = СтрШаблон(ШаблонТекстаПолей, "", "", Строка.ПараметрОбработки, "", "");
		КонецЕсли;
		
		мЧастиУсловия = Новый Массив;
		Для Каждого Слово Из МассивСловПоиска Цикл
			мЧастиУсловия.Добавить(СтрШаблон("втПараметры.Наименование ПОДОБНО ""%1%2%1""", "%",  Слово ));
		КонецЦикла;
		
		ТекстУсловий = СтрСоединить(мЧастиУсловия, СтрШаблон("%1		И ", Символы.ПС));
		
		мЗапросПараметров.Добавить(СтрШаблон(ШаблонВложенногоЗапроса, ТекстПолей, ТекстУсловий));
		ПервыйВложенныйЗапрос = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ШаблонТекстаЗапроса, СтрСоединить(мЗапросПараметров, СтрШаблон("%1%1ОБЪЕДИНИТЬ ВСЕ%1%1", Символы.ПС)));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	Для Каждого Строка Из Объект.СоответствияПараметрам Цикл
		Если ЗначениеЗаполнено(Строка.Параметр) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрHTML = Выгрузка.Найти(Строка.Представление, "ПараметрОбработки");
		Если ЗначениеЗаполнено(ПараметрHTML) Тогда
			Строка.Параметр = ПараметрHTML.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПараметрыШаблонаОбработки(Команда)
	НайтиПараметрыНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Элементы.ЭтоЗубнаяКарта.Видимость = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(мУчетнаяПолитика, "РаботаСЗубнымиКартами", Ложь);
	Элементы.ПечатаетсяБезПереходаНаНовуюСтраницу.Видимость = Не мУчетнаяПолитика.ИспользуетсяРежимВводаПриемаПоОдномуШаблону;
	Элементы.ТаблицаПараметровМногострочная.Видимость = Ложь;
	Элементы.ДоступноРисование.Видимость = Ложь;
	Элементы.НастройкиДобавленияИзображения.Видимость = Ложь;
	
	ИспользуетсяИнтеграцияРЭМД = ИнтеграцияЕГИСЗСерверПовтИсп.ИспользуетсяИнтеграцияРЭМД();
	Элементы.ВидДокумента.Видимость			 = ИспользуетсяИнтеграцияРЭМД;
	Элементы.СтраницаСЭМД.Видимость			 = ИспользуетсяИнтеграцияРЭМД;
	Элементы.ДеревоТеговГруппаСЭМД.Видимость = ИспользуетсяИнтеграцияРЭМД;
	
	Элементы.ФормаОтображатьДеревоТегов.Пометка = Ложь;
	
	Элементы.РаботаСОбластямиПолучателейПечати.Видимость = ЗначениеЗаполнено(мУчетнаяПолитика.РежимРазметкиКлиентскойОбластиШаблоновПриема);
	
	Элементы.РасположениеПодписи.Видимость = ИспользуетсяЭП;
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.УИДЕГИСЗ", Справочники.РегистрируемыеЭлектронныеМедДокументы.ПолучитьИдентификаторыДоступныеРЭМД()));
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ВидДокумента.ПараметрыВыбора = НовыеПараметры;
	
	Элементы.ДеревоТеговДоступноРисование.Видимость = мУчетнаяПолитика.ИспользоватьВерсионированиеШО;
	Элементы.КомандаВставитьВыбираемаяКартинка.Видимость = мУчетнаяПолитика.ИспользоватьВерсионированиеШО;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбластьПечати(Команда)
	
	КлиентскаяЧасть = Команда.Имя = "ДобавитьКлиентскуюОбластьПечати";
	sel = Элементы.ПолеHTMLДокумента.Документ.getSelection();
	РаботаСШаблонамиHTMLКлиентСервер.ДобавитьОбластьПечати(Элементы.ПолеHTMLДокумента.Документ, sel, КлиентскаяЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбластьПечати(Команда)
	
	sel = Элементы.ПолеHTMLДокумента.Документ.getSelection();
	РаботаСШаблонамиHTMLКлиентСервер.УдалитьОбластьПечати(Элементы.ПолеHTMLДокумента.Документ, sel);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеОбластиПечати(Команда)
	
	Для Каждого ЭлементHTLM Из Элементы.ПолеHTMLДокумента.Документ.querySelectorAll("[data-bit-clientpart]") Цикл
		РаботаСШаблонамиHTMLКлиентСервер.ВырезатьОбластьПечати(ЭлементHTLM)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодписьЭЦП()
	
	Если Не ИспользуетсяЭП Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписи = Новый Структура;
	СтруктураКолонтитулы = Новый Структура("ВерхнийКолонтитул, НижнийКолонтитул", "", "");
	
	ДанныеПодписи.Вставить("Сертификат",							"Серийный номер");
	ДанныеПодписи.Вставить("ВладелецСертификата",					"Данные владельца");
	ДанныеПодписи.Вставить("ДействительностьСертификатаНачало",		Формат(ТекущаяДата()-48*3600, "ДФ=dd.MM.yyyy"));
	ДанныеПодписи.Вставить("ДействительностьСертификатаОкончание",	Формат(ТекущаяДата()+48*3600, "ДФ=dd.MM.yyyy"));
	ДанныеПодписи.Вставить("ДатаПодписи",							Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
	ДанныеПодписи.Вставить("НаименованиеОрганизации",				"Наименование организации");
	
	ТекстКолонтитула = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьHTMLТекстЭЦПМедицинскогоДокумента(Объект.РасположениеПодписи, ДанныеПодписи);
	
	Если Объект.РасположениеПодписи = ПредопределенноеЗначение("Перечисление.РасположениеПодписи.ПравыйВерхнийУгол")
		Или Объект.РасположениеПодписи = ПредопределенноеЗначение("Перечисление.РасположениеПодписи.ЛевыйВерхнийУгол")
	Тогда
		СтруктураКолонтитулы.ВерхнийКолонтитул = ТекстКолонтитула;
	Иначе
		СтруктураКолонтитулы.НижнийКолонтитул = ТекстКолонтитула;
	КонецЕсли;
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстПросмотраHTML);
	
	РаботаСШаблонамиHTMLКлиентСервер.ДобавитьКолонтитулЭЦП(ДокументHTML, СтруктураКолонтитулы);
	
	ТекстПросмотраHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКнопкиДобавленияИзображений()
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстПросмотраHTML);
	РаботаСШаблонамиHTMLКлиентСервер.ДобавитьКнопкиДобавленияИзображений(ДокументHTML);
	ТекстПросмотраHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКнопкиРедактированияКартинок()
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстПросмотраHTML);
	РаботаСШаблонамиHTMLКлиентСервер.ДобавитьРисункиКартинок(ДокументHTML);
	ТекстПросмотраHTML = РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеПодписиПриИзменении(Элемент)
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаПросмотр" Тогда
		ДобавитьПодписьЭЦП();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьИзображенияHTMLШаблона()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Открытие существующего
		СписокШаблонов = Новый Массив;
		СписокШаблонов.Добавить(Объект.Ссылка);
		РаботаСШаблонамиHTMLКлиентСервер.ИнициализироватьНастройкиИзображенийПриема(соотвКешИзображенийШаблонов, СписокШаблонов, ЭтаФорма.УникальныйИдентификатор);
		
	Иначе
		соотвКешИзображенийШаблонов = Новый Соответствие;
		
		Если Объект.СписокИзображений.Количество() <> 0 Тогда // Ввод нового копированием шаблона с изображениями.
			
			ИспользоватьBase64 = РаботаСШаблонамиHTMLКлиентСервер.ЭтоWindowsXP();
			
			Для Каждого СтрокаИзображение Из Объект.СписокИзображений Цикл
				
				СтруктураИзображения = Новый Структура("Идентификатор, Расширение");
				ЗаполнитьЗначенияСвойств(СтруктураИзображения, СтрокаИзображение);
				
				// Помещаем картинку в хранилище
				ДвоичныеДанныеКартинки = Base64Значение(СтрокаИзображение.ИзображениеBase64);
				Если ИспользоватьBase64 Тогда  
					СтруктураИзображения.Вставить("АдресВХранилище", РаботаСHTMLКлиентСервер.ПолучитьBase64КартинкиДляHTML(ДвоичныеДанныеКартинки));
				Иначе
					СтруктураИзображения.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ЭтаФорма.УникальныйИдентификатор));
				КонецЕсли;
				
				соотвКешИзображенийШаблонов.Вставить(СтрокаИзображение.Идентификатор, СтруктураИзображения);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	соотвКешДобавленныхИзображений = Новый Соответствие;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьHTMLЭлементПоСтрокеДереваТегов(Знач СтрокаДерева)
	
	МассивНомеровУзлов = Новый Массив;
	Пока СтрокаДерева <> Неопределено Цикл
		Если Нрег(СтрокаДерева.ИмяТега) <> "<body>" Тогда
			МассивНомеровУзлов.Добавить(СтрокаДерева.НомерУзла);
		КонецЕсли;
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
	КонецЦикла;
	
	HTMLЭлемент = Элементы.ПолеHTMLДокумента.Документ.body;
	
	ИндексПоследнего = МассивНомеровУзлов.ВГраница();
	Для Индекс = -ИндексПоследнего По 0 Цикл
		НомерДочернегоУзла = МассивНомеровУзлов[-Индекс];
		Если Не НомерДочернегоУзла >= HTMLЭлемент.children.length Тогда
			HTMLЭлемент = HTMLЭлемент.children[НомерДочернегоУзла];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат HTMLЭлемент;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуДереваПоHTMLЭлементу(Знач ЭлементHTML)
	
	МассивНомеровУзлов = Новый Массив;
	Пока Нрег(ЭлементHTML.tagName) <> "body" Цикл
		КоличествоДочернихУзловРодительскогоУзла = ЭлементHTML.parentNode.children.length;
		Для НомерУзла = 0 По КоличествоДочернихУзловРодительскогоУзла-1 Цикл
			Если ЭлементHTML.parentNode.children[НомерУзла] = ЭлементHTML Тогда
				МассивНомеровУзлов.Добавить(НомерУзла);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементHTML = ЭлементHTML.parentNode;
	КонецЦикла;
	МассивНомеровУзлов.Добавить(0);
	
	ИндексПоследнего = МассивНомеровУзлов.ВГраница();
	
	СтрокаДерева = ДеревоТегов;
	
	Для Индекс = -ИндексПоследнего По 0 Цикл
		НомерДочернегоУзла = МассивНомеровУзлов[-Индекс];
		Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если Строка.НомерУзла = НомерДочернегоУзла Тогда
				СтрокаДерева = Строка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокаДерева;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыШаблонаНеБулево()
	
	СписокОтбора = Новый СписокЗначений;
	Выб = ПланыВидовХарактеристик.ПараметрыHTML.Выбрать();
	Пока  Выб.Следующий() Цикл
		Если Не Выб.ЭтоГруппа Тогда
			Если Не Выб.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				СписокОтбора.Добавить(Выб.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОтбора;
	
КонецФункции

&НаСервере
Функция ТаблицаИзменилась(НаименованиеТаблицы, КолонкиТаблицы)
	
	Таблица1 = Объект.Ссылка[НаименованиеТаблицы].Выгрузить(,КолонкиТаблицы);
	Таблица2 = Объект[НаименованиеТаблицы].Выгрузить(,КолонкиТаблицы);
	Возврат Не ОбщегоНазначения.СравнитьТаблицыНаборовЗаписей(Таблица1, Таблица2);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСкрытьШапку(Команда)
	
	Элементы.УстановкаПараметровШаблона.Видимость = Не Элементы.УстановкаПараметровШаблона.Видимость;
	Элементы.ШапкаПравойКолонки.Видимость = Не Элементы.ШапкаПравойКолонки.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура СортировкаСтрокТаблицыПараметров(ТекстHTML)
	
	ЭлементыПараметров = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML));
	ПараметрыШаблонаПоПорядку = Новый Массив;
	
	Для Каждого ЭлементШаблона Из ЭлементыПараметров Цикл
		Если Не РаботаСШаблонамиHTMLКлиентСервер.ЭтоУзелПараметра(ЭлементШаблона) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			УидПараметра = ЭлементШаблона.ПолучитьАтрибут("id");
			ПараметрШаблона = ПланыВидовХарактеристик.ПараметрыHTML.ПолучитьСсылку(Новый УникальныйИдентификатор(УидПараметра));
			Если ПараметрыШаблонаПоПорядку.Найти(ПараметрШаблона) = Неопределено Тогда
				ПараметрыШаблонаПоПорядку.Добавить(ПараметрШаблона);
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого ПараметрШаблона Из ПараметрыШаблонаПоПорядку Цикл
		НомерПараметра = ПараметрыШаблонаПоПорядку.Найти(ПараметрШаблона)+1;
		СтрокиПараметра = Объект.СоответствияПараметрам.НайтиСтроки(Новый Структура("Параметр", ПараметрШаблона));
		Если СтрокиПараметра.Количество() = 0 Тогда
			СтрокиПараметраТаблицыПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", ПараметрШаблона));
			Если СтрокиПараметраТаблицыПараметров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПараметра = Объект.СоответствияПараметрам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметра, СтрокиПараметраТаблицыПараметров[0]);
		Иначе
			СтрокаПараметра = СтрокиПараметра[0];
			
			СтрокиТаблицыПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра", Строка(ПараметрШаблона.УникальныйИдентификатор())));
			localid = "";
			Если СтрокиТаблицыПараметра.Количество() > 0 Тогда
				localid = СтрокиТаблицыПараметра[0].localid;
				ЗаполнитьЗначенияСвойств(СтрокаПараметра, СтрокиТаблицыПараметра[0], "localid, КлассификацияПоля, ГруппирующееПоле, ОбъединяющееПоле, ВидКлассификатора");
				Модифицированность = Истина;
			КонецЕсли;
			СтрокаПараметра.localid = localid;
			
			//Если ЗначениеЗаполнено(СтрокаПараметра.localid) Тогда
				
				ОчиститьСтрокуПараметра = Истина;
				ЭтоКлассификация = Ложь;
				ТекущийLocalid = СтрокаПараметра.localid;
				ЧастиLocalid = СтрРазделить(ТекущийLocalid, ".");
				Если ЧастиLocalid.Количество() > 1
					И ЧастиLocalid[1] = "КлассификацияПоля"
				Тогда
					ТекущийLocalid = ЧастиLocalid[0];
					ЭтоКлассификация = Истина;
				КонецЕсли;
				
				СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ТекущийLocalid));
				Если СтрокиLocalid.Количество() > 0 Тогда
					Если ЭтоКлассификация Тогда
						ОчиститьСтрокуПараметра = Не ЗначениеЗаполнено(СтрокаПараметра.ВидКлассификатора) Или СтрокаПараметра.ВидКлассификатора <> СтрокиLocalid[0].КлассификацияПоляКлассификаторМЗ
					Иначе
						ОчиститьСтрокуПараметра = Не ТипыДанныхСовпадают(СтрокаПараметра.Параметр.ТипЗначения.Типы(), СтрокиLocalid[0].ТипЗначения.Типы());
					КонецЕсли;
				КонецЕсли;
				
				Если ОчиститьСтрокуПараметра Тогда
					СтрокаПараметра.localid = Неопределено;
					СтрокаПараметра.КлассификацияПоля = Неопределено;
					СтрокаПараметра.ГруппирующееПоле = Неопределено;
					Модифицированность = Истина;
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		Объект.СоответствияПараметрам.Сдвинуть(Объект.СоответствияПараметрам.Индекс(СтрокаПараметра), НомерПараметра - СтрокаПараметра.НомерСтроки);
	КонецЦикла;
	
	Если ПараметрыШаблонаПоПорядку.Количество() < Объект.СоответствияПараметрам.Количество() Тогда
		Для Индекс = 1-Объект.СоответствияПараметрам.Количество() По -ПараметрыШаблонаПоПорядку.Количество() Цикл
			Объект.СоответствияПараметрам.Удалить(-Индекс);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьКешПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюОткрытьПараметр(Команда)
	
	КонтекстноеМенюПараметр = КонтекстноеМенюПолучитьТекущийПараметр();
	Если КонтекстноеМенюПараметр <> Неопределено Тогда
		ПоказатьЗначение(, КонтекстноеМенюПараметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюИзменитьПараметр(Команда)
	
	КонтекстноеМенюПараметр = КонтекстноеМенюПолучитьТекущийПараметр();
	Если КонтекстноеМенюПараметр <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Команда", "КонтекстноеМенюИзменение");
		
		Если ВРег(ДанныеЭлементаHTMLДляКонтекстногоМеню.nodeName) = "TEXTAREA"
			Или (ВРег(ДанныеЭлементаHTMLДляКонтекстногоМеню.nodeName) = "INPUT"
			И ВРег(ДанныеЭлементаHTMLДляКонтекстногоМеню.type) <> "CHECKBOX")
		Тогда
			ПараметрыОткрытия.Вставить("СписокОтбора", ПолучитьПараметрыШаблонаНеСтрокаЧисло());
			
		ИначеЕсли ВРег(ДанныеЭлементаHTMLДляКонтекстногоМеню.nodeName) = "INPUT"
			И ВРег(ДанныеЭлементаHTMLДляКонтекстногоМеню.type) = "CHECKBOX"
		Тогда
			ПараметрыОткрытия.Вставить("СписокОтбора", ПолучитьПараметрыШаблонаНеБулево());
		КонецЕсли;
		
		ОткрытьФорму("ПланВидовХарактеристик.ПараметрыHTML.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюИзменитьПолеВыбора(Команда)
	
	КонтекстноеМенюПараметр = КонтекстноеМенюПолучитьТекущийПараметр();
	Если КонтекстноеМенюПараметр <> Неопределено Тогда
		ЭлементыПараметраHTML = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(Элементы.ПолеHTMLДокумента.Документ, ДанныеЭлементаHTMLДляКонтекстногоМеню.id)[0];
		МассивЭлементовВыбора = Новый Массив;
		НомерСтрокиПоУмолчанию = Неопределено;
		Для Каждого ЭлементВыбора Из ЭлементыПараметраHTML.querySelectorAll("option") Цикл
			Если ЭлементВыбора.hasAttribute("value") Тогда
				МассивЭлементовВыбора.Добавить(ЭлементВыбора.getAttribute("value"));
			КонецЕсли;
			Если ЭлементВыбора.hasAttribute("selected") Тогда
				Попытка
					НомерСтрокиПоУмолчанию = Число(ЭлементВыбора.index);
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Структура = Новый Структура("Параметр, ЭлементыСпискаВыбора, НомерСтрокиПоУмолчанию", КонтекстноеМенюПараметр, МассивЭлементовВыбора, НомерСтрокиПоУмолчанию);
		ФормаЗаполненияСпискаВыбора = ПолучитьФорму("Справочник.ШаблоныHTML.Форма.ФормаСпискаВыбора", Структура);
		СписокВыбора = ФормаЗаполненияСпискаВыбора.ОткрытьМодально();
		Если СписокВыбора <> Неопределено Тогда
			ТекстHTMLЭлементовВыбора = ПолучитьТекстHTMLЭлементовВыбора(СписокВыбора);
			ЭлементыПараметраHTML.innerHTML = ТекстHTMLЭлементовВыбора;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КонтекстноеМенюПолучитьТекущийПараметр()
	
	Если ДанныеЭлементаHTMLДляКонтекстногоМеню <> Неопределено
		И ЗначениеЗаполнено(ДанныеЭлементаHTMLДляКонтекстногоМеню.id)
	Тогда
		СтрокаПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("СтрокаУидПараметра", ДанныеЭлементаHTMLДляКонтекстногоМеню.id));
		Если СтрокаПараметра.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Параметр отсутствует в списке параметров шаблона'"));
		Иначе
			Возврат СтрокаПараметра[0].Параметр;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Не выбран параметр'"));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКнопокКонтекстногоМенюПоляHTML()
	
	Элементы.ПолеHTMLДокументаКонтекстноеМенюОткрытьПараметр.Доступность	= Ложь;
	Элементы.ПолеHTMLДокументаКонтекстноеМенюИзменитьПараметр.Доступность	= Ложь;
	Элементы.ПолеHTMLДокументаКонтекстноеМенюИзменитьПолеВыбора.Доступность	= Ложь;
	Элементы.ПолеHTMLДокументаКонтекстноеМенюДобавитьСтроку.Видимость		= Ложь;
	Элементы.ПолеHTMLДокументаКонтекстноеМенюДобавитьКолонку.Видимость		= Ложь;
	
	Если Не (РедактированиеСтруктурыHTML
			Или РедактированиеСекцийСЭМД)
	Тогда
		Если ДанныеЭлементаHTMLДляКонтекстногоМеню <> Неопределено
			И ЗначениеЗаполнено(ДанныеЭлементаHTMLДляКонтекстногоМеню.id)
		Тогда
			Элементы.ПолеHTMLДокументаКонтекстноеМенюОткрытьПараметр.Доступность	= Истина;
			Элементы.ПолеHTMLДокументаКонтекстноеМенюИзменитьПараметр.Доступность	= Истина;
			Элементы.ПолеHTMLДокументаКонтекстноеМенюИзменитьПолеВыбора.Доступность	= ВРег(ДанныеЭлементаHTMLДляКонтекстногоМеню.nodeName) = "SELECT";
		КонецЕсли;
		
		Если ИндексТекущейТаблицы <> Неопределено Тогда
			Элементы.ПолеHTMLДокументаКонтекстноеМенюДобавитьСтроку.Видимость	= Истина;
			Элементы.ПолеHTMLДокументаКонтекстноеМенюДобавитьКолонку.Видимость	= Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСкриптКонтекстногоМеню(ДокументHTML)
	
	Если ДокументHTML.Тело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументHTML.Тело.УстановитьАтрибут("oncontextmenu","contextMenuFunc(event)");
	ТекстСкрипта =
		"<script type='text/javascript'>
		|	function contextMenuFunc(event){
		|		if (event.target !== document.body){
		|			event.target.setAttribute('bit-contextmenu-selectElement', 'true')};
		|		event.target.click();
		|	}
		|</script>";
	РаботаСDOMКлиентСервер.ДобавитьПроизвольныйHTMLВЭлемент(ДокументHTML.Тело.РодительскийУзел, ТекстСкрипта, , ДокументHTML.Тело);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеЭлементаHTMLДляКонтекстногоМеню(ЭлементHTML)
	
	ЭлементЯвляетсяПараметромШаблона = Истина;
	
	Попытка
		ДанныеЭлементаHTMLДляКонтекстногоМеню = Новый Структура("tagName, id, nodeName, type");
		ЗаполнитьЗначенияСвойств(ДанныеЭлементаHTMLДляКонтекстногоМеню, ЭлементHTML);
		ЭлементЯвляетсяПараметромШаблона = РаботаСШаблонамиHTMLКлиентСервер.ЭтоУзелПараметра(ЭлементHTML);
	Исключение
		ЭлементЯвляетсяПараметромШаблона = Ложь;
	КонецПопытки;
	
	Если Не ЭлементЯвляетсяПараметромШаблона Тогда
		ДанныеЭлементаHTMLДляКонтекстногоМеню = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстHTMLЭлементовВыбора(СписокВыбора)
	
	ТекстHTMLЭлементовВыбора = "";
	Для Каждого Строка Из СписокВыбора Цикл	
		ТекстHTMLЭлементовВыбора = ТекстHTMLЭлементовВыбора + "<option " + ?(Строка.ПоУмолчанию, "selected ", "") + "value='" +
		РаботаСШаблонамиHTML.ПреобразоватьЗначениеВСтрокуВнутр(Строка.Значение) + "'>" + Строка.Представление;
	КонецЦикла;
	
	Возврат ТекстHTMLЭлементовВыбора;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОбъединяющийТег(Команда)
	
	ИндексыПотомков = ПолучитьИндексыНачальногоКонечногоПотомка(Элементы.ДеревоТегов.ВыделенныеСтроки);
	
	HTMLЭлементРодителя = ПолучитьHTMLЭлементПоСтрокеДереваТегов(ИндексыПотомков.Родитель);
	Документ = Элементы.ПолеHTMLДокумента.Документ;
	sel = Документ.getSelection();
	range = sel.getRangeAt(0);
	range.setStartBefore(HTMLЭлементРодителя.children[ИндексыПотомков.Начальный]);
	range.setEndAfter(HTMLЭлементРодителя.children[ИндексыПотомков.Конечный]);
	
	fragm = range.extractContents();
	newNode = Документ.createElement("div");
	newNode.appendChild(fragm);
	range.insertNode(newNode);
	
	ЗаполнитьЧастьДереваТеговРодительскойСтроки(ИндексыПотомков.Родитель, HTMLЭлементРодителя, newNode);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЧастьДереваТеговРодительскойСтроки(РодительскаяСтрока, HTMLЭлементРодителя, НоваяТекущаяСтрока)
	
	РодительскаяСтрока.ПолучитьЭлементы().Очистить();
	НомерПотомка = 0;
	Для Каждого Потомок Из HTMLЭлементРодителя.children Цикл
		ЗаполнитьДеревоТегов(Потомок, РодительскаяСтрока.ПолучитьЭлементы(), НомерПотомка);
		НомерПотомка = НомерПотомка + 1;
	КонецЦикла;
	РазвернутьДеревоТегов();
	ТекстHTMLПоследний = Элементы.ПолеHTMLДокумента.Документ.body.outerHTML;
	Элементы.ДеревоТегов.ТекущаяСтрока = ПолучитьСтрокуДереваПоHTMLЭлементу(НоваяТекущаяСтрока).ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИндексыНачальногоКонечногоПотомка(ВыделенныеСтроки)
	
	ИндексыПотомков = Новый Структура("Начальный, Конечный, Родитель");
	Родитель = ДеревоТегов.НайтиПоИдентификатору(ВыделенныеСтроки[0]).ПолучитьРодителя();
	ИндексНачальнойСтроки = ВыделенныеСтроки[0];
	ИндексКонечнойСтроки = ВыделенныеСтроки[0];
	Для Каждого ИндексВыделеннойСтроки Из ВыделенныеСтроки Цикл
		Если ИндексВыделеннойСтроки > ИндексКонечнойСтроки Тогда
			ИндексКонечнойСтроки = ИндексВыделеннойСтроки;
		ИначеЕсли ИндексВыделеннойСтроки < ИндексНачальнойСтроки Тогда
			ИндексНачальнойСтроки = ИндексВыделеннойСтроки;
		КонецЕсли;
	КонецЦикла;
	ИндексыПотомков.Начальный	= Родитель.ПолучитьЭлементы().Индекс(ДеревоТегов.НайтиПоИдентификатору(ИндексНачальнойСтроки));
	ИндексыПотомков.Конечный	= Родитель.ПолучитьЭлементы().Индекс(ДеревоТегов.НайтиПоИдентификатору(ИндексКонечнойСтроки));
	ИндексыПотомков.Родитель	= Родитель;
	
	Возврат ИндексыПотомков;
	
КонецФункции

&НаКлиенте
Процедура УдалитьОбъединяющийТег(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоТегов.ТекущиеДанные;
	РодительТекущейСтроки = ТекущаяСтрока.ПолучитьРодителя();
	
	HTMLЭлемент = ПолучитьHTMLЭлементПоСтрокеДереваТегов(ТекущаяСтрока);
	ПервыйДочерний = HTMLЭлемент.firstChild;
	HTMLЭлементРодителя = HTMLЭлемент.parentNode;
	РаботаСШаблонамиHTMLКлиентСервер.ВырезатьБлокЭлементаССохранениемСодержимого(HTMLЭлемент);
	
	ЗаполнитьЧастьДереваТеговРодительскойСтроки(РодительТекущейСтроки, HTMLЭлементРодителя, ПервыйДочерний);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСтруктурыHTML(Команда)
	
	РедактированиеСтруктурыHTML = Не Элементы.РедактированиеСтруктурыHTML.Пометка;
	Элементы.РедактированиеСтруктурыHTML.Пометка = РедактированиеСтруктурыHTML;
	
	Если РедактированиеСтруктурыHTML Тогда
		ОбновитьДеревоТегов();
	КонецЕсли;
	
	Элементы.ДеревоТеговГруппаРедактированиеСтруктурыHTML.Видимость = РедактированиеСтруктурыHTML;
	Элементы.ДеревоТеговГруппаПеремещенияИУдаленияТегов.Видимость = РедактированиеСтруктурыHTML;
	Элементы.Страницы.ТолькоПросмотр = РедактированиеСтруктурыHTML;
	
	ДеревоТеговРедактированиеHTMLДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговРедактированиеHTMLДоступностьЭлементов()
	
	ДокументHTML = Элементы.ПолеHTMLДокумента.Документ;
	
	ИнтерактивноеРедактированиеЗапрещено = РедактированиеСтруктурыHTML Или РедактированиеСекцийСЭМД;
	
	ДокументHTML.body.contentEditable	= ?(ИнтерактивноеРедактированиеЗапрещено, "false", "true");
	ДокументHTML.designMode				= ?(ИнтерактивноеРедактированиеЗапрещено, "off", "on");
	
	Элементы.ГруппаВставка.Доступность				= Не ИнтерактивноеРедактированиеЗапрещено;
	Элементы.ГруппаПараметр.Доступность				= Не ИнтерактивноеРедактированиеЗапрещено;
	Элементы.КешДобавляемыеПараметры.Доступность	= Не ИнтерактивноеРедактированиеЗапрещено;
	Элементы.ОперацииРедактированияHTML.Доступность	= Не ИнтерактивноеРедактированиеЗапрещено;
	Элементы.ПараметрыЭлементовHTML.Доступность		= Не ИнтерактивноеРедактированиеЗапрещено;
	Элементы.ПолеКодаHTML.ТолькоПросмотр			= ИнтерактивноеРедактированиеЗапрещено;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуПараметра(СтрокаПараметра)
	
	Если ИспользуетсяИнтеграцияРЭМД Тогда
		ИнтеграцияЕГИСЗ_СЭМДКлиент.УстановитьФлагИспользованДляLocalid(СтрокаПараметра.localid, Ложь, ТаблицаLocalidМакета);
	КонецЕсли;
	
	ТаблицаПараметров.Удалить(СтрокаПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКурсорВПустомДокументе(ТекущийУзел)
	
	Если ТекущийУзел = Неопределено
		Или ВРег(ТекущийУзел.nodeName) <> "BODY"
		Или ТекущийУзел.childNodes.length <> 1
	Тогда
		Возврат;
	КонецЕсли;

	ДочернийУзелПустогоДокумента = ТекущийУзел.childNodes[0];
	
	Если ВРег(ДочернийУзелПустогоДокумента.nodeName) <> "DIV"
		Или ВРег(ДочернийУзелПустогоДокумента.className) <> "FORMAT"
		Или Не ПустаяСтрока(ДочернийУзелПустогоДокумента.innerText)
	Тогда
		Возврат;
	КонецЕсли;
	
	ДокументHTML = ТекущийУзел.ownerDocument;
	УзелDIVДляУстановкиКурсора = Неопределено;
	Если ПустаяСтрока(ДочернийУзелПустогоДокумента.innerHTML) Тогда
		// Первое нажатие в пустой документ
		УзелDIVДляУстановкиКурсора = ДокументHTML.createElement("div");
		ДочернийУзелПустогоДокумента.appendChild(УзелDIVДляУстановкиКурсора);
	Иначе
		// Повторное нажатие в пустой документ
		Для Каждого ДочернийУзел Из ДочернийУзелПустогоДокумента.childNodes Цикл
			Если ВРег(ДочернийУзел.tagName) = "DIV" И ПустаяСтрока(ДочернийУзел.innerHTML) Тогда
				УзелDIVДляУстановкиКурсора = ДочернийУзел;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если УзелDIVДляУстановкиКурсора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелDIVДляУстановкиКурсора.innerHTML = "<h1>Пустой текст для выделения</h1>";
	ВыделитьЭлементHTML(ДокументHTML, УзелDIVДляУстановкиКурсора);
	УзелDIVДляУстановкиКурсора.innerHTML = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Не РедактированиеСтруктурыHTML
		Или ПараметрыПеретаскивания.Значение.Количество() <> 1
		Или ВРег(ДеревоТегов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]).ИмяТега) = "<BODY>"
	Тогда
		Выполнение = Ложь;
	КонецЕсли;
	ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоТегов;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ЭтотОбъект.ТекущийЭлемент <> Элементы.ДеревоТегов
		Или Строка = Неопределено
		Или ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или Строка = ПараметрыПеретаскивания.Значение[0]
	Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваемаяСтрока = ДеревоТегов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ЦелеваяСтрока = ДеревоТегов.НайтиПоИдентификатору(Строка);
	
	Если ВРег(ЦелеваяСтрока.ИмяТега) <> "<BODY>" Тогда
		РодительСтроки = ЦелеваяСтрока.ПолучитьРодителя();
		
		Пока ВРег(РодительСтроки.ИмяТега) <> "<BODY>" Цикл
			Если РодительСтроки = ПеретаскиваемаяСтрока Тогда
				СтандартнаяОбработка = Истина;
				Возврат;
			КонецЕсли;
			РодительСтроки = РодительСтроки.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретаскиваемаяСтрока = ДеревоТегов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ЦелеваяСтрока = ДеревоТегов.НайтиПоИдентификатору(Строка);
	
	HTMLЭлементПеретаскиваемойСтроки = ПолучитьHTMLЭлементПоСтрокеДереваТегов(ПеретаскиваемаяСтрока);
	HTMLЭлементЦелевойСтроки = ПолучитьHTMLЭлементПоСтрокеДереваТегов(ЦелеваяСтрока);
	
	ПеремещённыйЭлемент = HTMLЭлементЦелевойСтроки.appendChild(HTMLЭлементПеретаскиваемойСтроки);
	
	ОбновитьДеревоТегов();
	ТекстHTMLПоследний = Элементы.ПолеHTMLДокумента.Документ.body.outerHTML;
	Элементы.ДеревоТегов.ТекущаяСтрока = ПолучитьСтрокуДереваПоHTMLЭлементу(ПеремещённыйЭлемент).ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТегВверх(Команда)
	
	ПереместитьУзел(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТегВниз(Команда)
	
	ПереместитьУзел(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУзел(Вверх)
	
	СтрокаДерева = Элементы.ДеревоТегов.ТекущиеДанные;
	Если ВРег(СтрокаДерева.ИмяТега) = "<BODY>" Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяСтрока = Неопределено;
	СледующаяСтрока = Неопределено;
	СтрокаПослеСледующей = Неопределено;
	
	Родитель = СтрокаДерева.ПолучитьРодителя();
	ДочерниеСтроки = Родитель.ПолучитьЭлементы();
	
	Для Каждого СтрокаТекущегоУровня Из ДочерниеСтроки Цикл
		Если СтрокаТекущегоУровня = СтрокаДерева Тогда
			ИндексТекущейСтроки = ДочерниеСтроки.Индекс(СтрокаТекущегоУровня);
			Если ИндексТекущейСтроки > 0 Тогда
				ПредыдущаяСтрока = ДочерниеСтроки.Получить(ИндексТекущейСтроки - 1);
			КонецЕсли;
			Если ИндексТекущейСтроки < ДочерниеСтроки.Количество() - 1 Тогда
				СледующаяСтрока = ДочерниеСтроки.Получить(ИндексТекущейСтроки + 1);
			КонецЕсли;
			Если ИндексТекущейСтроки < ДочерниеСтроки.Количество() - 2 Тогда
				СтрокаПослеСледующей = ДочерниеСтроки.Получить(ИндексТекущейСтроки + 2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПредыдущаяСтрока = Неопределено
		И СледующаяСтрока = Неопределено
	Тогда
		Возврат;
	КонецЕсли;
	
	HTMLЭлементРодителя = ПолучитьHTMLЭлементПоСтрокеДереваТегов(Родитель);
	HTMLЭлементТекущейСтроки = ПолучитьHTMLЭлементПоСтрокеДереваТегов(СтрокаДерева);
	
	Если (Вверх И ПредыдущаяСтрока = Неопределено)
		Или (Не Вверх И СледующаяСтрока <> Неопределено И СтрокаПослеСледующей = Неопределено)
	Тогда
		HTMLЭлементРодителя.appendChild(HTMLЭлементТекущейСтроки);
	ИначеЕсли Не Вверх И СтрокаПослеСледующей <> Неопределено Тогда
		HTMLЭлементСтрокиПослеСледующей = ПолучитьHTMLЭлементПоСтрокеДереваТегов(СтрокаПослеСледующей);
		HTMLЭлементРодителя.insertBefore(HTMLЭлементТекущейСтроки, HTMLЭлементСтрокиПослеСледующей);
	ИначеЕсли Не Вверх И СледующаяСтрока = Неопределено Тогда
		HTMLЭлементРодителя.prepend(HTMLЭлементТекущейСтроки);
	Иначе
		
		Если Вверх Тогда
			HTMLЭлементПредыдущейСтроки = ПолучитьHTMLЭлементПоСтрокеДереваТегов(ПредыдущаяСтрока);
			HTMLЭлементРодителя.insertBefore(HTMLЭлементТекущейСтроки, HTMLЭлементПредыдущейСтроки);
		Иначе
			HTMLЭлементСледующейСтроки = ПолучитьHTMLЭлементПоСтрокеДереваТегов(СледующаяСтрока);
			HTMLЭлементРодителя.insertBefore(HTMLЭлементТекущейСтроки, HTMLЭлементСледующейСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЧастьДереваТеговРодительскойСтроки(Родитель, HTMLЭлементРодителя, HTMLЭлементТекущейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеТеги(Команда)
	
	ОповещениеОбУдаленииУзлов = Новый ОписаниеОповещения("ДеревоТеговПередУдалениемПродолжение", ЭтотОбъект, Элементы.ДеревоТегов.ВыделенныеСтроки);
	ПоказатьВопрос(ОповещениеОбУдаленииУзлов, НСтр("ru='Удалить выбранные узлы?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговПередУдалениемПродолжение(Результат, ИндексыВыбранныхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = Новый Массив;
	Для Каждого ИндексВыбраннойСтроки Из ИндексыВыбранныхСтрок Цикл
		ВыбранныеСтроки.Добавить(ДеревоТегов.НайтиПоИдентификатору(ИндексВыбраннойСтроки));
	КонецЦикла;
	
	ИндексыСтрокКУдалению = Новый СписокЗначений;
	
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		
		Если ВРег(ВыбраннаяСтрока.ИмяТега) <> "<BODY>" Тогда
			ДобавитьСтроку = Истина;
			
			РодительСтроки = ВыбраннаяСтрока.ПолучитьРодителя();
			Пока ВРег(РодительСтроки.ИмяТега) <> "<BODY>" Цикл
				Если ВыбранныеСтроки.Найти(РодительСтроки) <> Неопределено Тогда
					ДобавитьСтроку = Ложь;
					Прервать;
				КонецЕсли;
				РодительСтроки = РодительСтроки.ПолучитьРодителя();
			КонецЦикла;
			
			Если ДобавитьСтроку Тогда
				ИндексыСтрокКУдалению.Добавить(ВыбраннаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексыСтрокКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексыСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого ИндексСтрокиКУдалению Из ИндексыСтрокКУдалению Цикл
		СтрокаДерева = ДеревоТегов.НайтиПоИдентификатору(ИндексСтрокиКУдалению.Значение);
		HTMLЭлементУдаляемойСтроки = ПолучитьHTMLЭлементПоСтрокеДереваТегов(СтрокаДерева);
		HTMLЭлементУдаляемойСтроки.parentNode.removeChild(HTMLЭлементУдаляемойСтроки);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ОбновитьДеревоТегов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ЭлементТекущейТаблицы = ПолучитьТекущуюТаблицу();
	
	Если ЭлементТекущейТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяСтрока = ЭлементТекущейТаблицы.rows[ЭлементТекущейТаблицы.rows.length-1];
	КлонПоследнейСтроки = ПоследняяСтрока.cloneNode(Истина);
	
	Для Каждого ЯчейкаСтроки Из КлонПоследнейСтроки.cells Цикл
		Пока ЯчейкаСтроки.firstChild <> Неопределено Цикл
			//Очищаем ячейку
			ЯчейкаСтроки.removeChild(ЯчейкаСтроки.firstChild);
		КонецЦикла;
		ЯчейкаСтроки.innerText = Символы.НПП;
	КонецЦикла;
	
	ПоследняяСтрока.parentNode.appendChild(КлонПоследнейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	
	ЭлементТекущейТаблицы = ПолучитьТекущуюТаблицу();
	
	Если ЭлементТекущейТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтроки Из ЭлементТекущейТаблицы.rows Цикл
		ПоследняяЯчейка = ЭлементСтроки.cells[ЭлементСтроки.cells.length-1];
		КлонПоследнейЯчейки = ПоследняяЯчейка.cloneNode(Ложь);
		КлонПоследнейЯчейки.innerText = Символы.НПП;
		ПрисвоитьШиринуЯчейкам(ПоследняяЯчейка, КлонПоследнейЯчейки);
		ПоследняяЯчейка.parentNode.appendChild(КлонПоследнейЯчейки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюТаблицу()
	
	Если ИндексТекущейТаблицы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Таблицы = Элементы.ПолеHTMLДокумента.Документ.getElementsByTagName("table");
	Если Таблицы.length < ИндексТекущейТаблицы + 1
		Или Таблицы[ИндексТекущейТаблицы].rows.length = 0
	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Таблицы[ИндексТекущейТаблицы];
	
КонецФункции

&НаКлиенте
Процедура ПрисвоитьШиринуЯчейкам(Ячейка, СоседняяЯчейка)
	
	Ячейка.style.width = НовоеЗначениеШирины(Ячейка.style.width);
	Ячейка.width = НовоеЗначениеШирины(Ячейка.width);
	СоседняяЯчейка.style.width = НовоеЗначениеШирины(СоседняяЯчейка.style.width);
	СоседняяЯчейка.width = НовоеЗначениеШирины(СоседняяЯчейка.width);
	
КонецПроцедуры

&НаКлиенте
Функция НовоеЗначениеШирины(Ширина)
	
	ЗначениеШирины = СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(Ширина);
	
	Если ЗначениеЗаполнено(ЗначениеШирины) Тогда
		НовоеЗначениеШирины = Строка(Цел(Число(ЗначениеШирины) / 2));
		Возврат СтрЗаменить(Ширина, ЗначениеШирины, НовоеЗначениеШирины);
	КонецЕсли;
	
	Возврат Ширина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag(ЭлементИмеющийTag)
	
	ЭлементыПоТегу = Элементы.ПолеHTMLДокумента.Документ.getElementsByTagName(ЭлементИмеющийTag.tagName);
	Для НомерЭлемента = 1 По ЭлементыПоТегу.length Цикл
		ИндексЭлемента = НомерЭлемента - 1;
		Если ЭлементыПоТегу[ИндексЭлемента] = ЭлементИмеющийTag Тогда
			ДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag = Новый Структура("ИмяТега, НомерЭлемента", ЭлементИмеющийTag.tagName, ИндексЭлемента);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag()
	
	Если ДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыПоТегу = Элементы.ПолеHTMLДокумента.Документ.getElementsByTagName(ДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag.ИмяТега);
	
	Если ЭлементыПоТегу.length < ДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag.НомерЭлемента + 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлементыПоТегу[ДанныеТекущегоЭлементаШаблонаHTMLИмеющегоTag.НомерЭлемента];
	
КонецФункции

&НаКлиенте
Процедура СохранитьДанныеТекущегоЭлементаШаблонаHTML(ЭлементHTML)
	
	ЭлементыПоТегу = Элементы.ПолеHTMLДокумента.Документ.getElementsByTagName(ЭлементHTML.tagName);
	Для НомерЭлемента = 1 По ЭлементыПоТегу.length Цикл
		ИндексЭлемента = НомерЭлемента - 1;
		Если ЭлементыПоТегу[ИндексЭлемента] = ЭлементHTML Тогда
			ДанныеТекущегоЭлементаШаблонаHTML = Новый Структура("ИмяТега, НомерЭлемента", ЭлементHTML.tagName, ИндексЭлемента);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийЭлементШаблонаHTML()
	
	Если ДанныеТекущегоЭлементаШаблонаHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыПоТегу = Элементы.ПолеHTMLДокумента.Документ.getElementsByTagName(ДанныеТекущегоЭлементаШаблонаHTML.ИмяТега);
	
	Если ЭлементыПоТегу.length < ДанныеТекущегоЭлементаШаблонаHTML.НомерЭлемента + 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлементыПоТегу[ДанныеТекущегоЭлементаШаблонаHTML.НомерЭлемента];
	
КонецФункции

&НаКлиенте
Процедура ВстроеннаяОбработкаПриИзменении(Элемент)
	
	ВидШаблонаПриИзменении(Неопределено);
	ВидДокументаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяВстроеннойОбработкиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИмяВстроеннойОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьВстроеннуюОбработкуПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru='Шаблон будет загружен заново. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, 30);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВстроеннуюОбработкуПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		ИмяВстроеннойОбработки = ПредыдущееИмяВстроеннойОбработки;
		Возврат;
	КонецЕсли;
	
	Объект.СоответствияПараметрам.Очистить();
	Объект.СоответствияТаблицамШаблонов.Очистить();
	Объект.КонстантыCDAДокумента.Очистить();
	
	Попытка
		РезультатИмпорта = ИмпортироватьШаблонВнутреннейОбработки(ИмяВстроеннойОбработки);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если РезультатИмпорта <> Неопределено
		И РезультатИмпорта.Количество() > 0
	Тогда
		Если РезультатИмпорта[0] = Объект.Ссылка Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмпортироватьШаблонВнутреннейОбработки(ИмяВстроеннойОбработки)
	
	Макет = Обработки[ИмяВстроеннойОбработки].Создать().ПолучитьМакетШаблона();
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	Макет.Записать(ИмяФайла);
	
	Возврат Справочники.ШаблоныHTML.Импортировать(ИмяФайла);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПараметрыОбработки(Команда)
	
	ПолучитьПараметрыОбработкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыОбработкиНаСервере()
	
	Попытка
		Если ВстроеннаяОбработка Тогда
			ОбработкаОбъект = Обработки[ИмяВстроеннойОбработки].Создать();
			ПараметрыШаблона = ОбработкаОбъект.ПолучитьСписокПараметров();
		Иначе
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
			ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВременногоФайла, Истина);
			ПараметрыШаблона = ОбработкаОбъект.ПолучитьСписокПараметров();
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлементПараметр Из ПараметрыШаблона Цикл
		Если Объект.СоответствияПараметрам.НайтиСтроки(Новый Структура("Наименование",ЭлементПараметр.Имя)).Количество() = 0 Тогда
			НовыйПараметр = Объект.СоответствияПараметрам.Добавить();
			НовыйПараметр.Наименование = ЭлементПараметр.Имя;
			НовыйПараметр.Представление = ЭлементПараметр.Синоним;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ПараметрыТаблицШаблона = ОбработкаОбъект.ПолучитьПараметрыТаблицШаблона();
	Исключение
		Возврат;
	КонецПопытки;
		
	Для Каждого ЭлементПараметр Из ПараметрыТаблицШаблона Цикл
		
		СтруктураПоиска = Новый Структура("Наименование", ЭлементПараметр.Имя);
		Если ЭлементПараметр.Свойство("ИмяТаблицы") Тогда
			СтруктураПоиска.Вставить("ТаблицаОбработки", ЭлементПараметр.ИмяТаблицы);
		КонецЕсли;
		
		Если Объект.СоответствияТаблицамШаблонов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			НовыйПараметр = Объект.СоответствияТаблицамШаблонов.Добавить();
			НовыйПараметр.Наименование = ЭлементПараметр.Имя; // Имя колонки
			НовыйПараметр.Представление = ЭлементПараметр.Синоним;
			Если ЭлементПараметр.Свойство("ИмяТаблицы") Тогда
				НовыйПараметр.ТаблицаОбработки = ЭлементПараметр.ИмяТаблицы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СтрокаРоли = РолиПодписей.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		НастройкиРоли = Новый Структура("Обязательная, Роль, РежимНастройкиДоступности, ПризнакДоступностиРоли");
		ЗаполнитьЗначенияСвойств(НастройкиРоли, СтрокаРоли);
		ПараметрыОткрытияФормы = Новый Структура("НастройкиРоли", НастройкиРоли);
	Иначе
		ПараметрыОткрытияФормы = Неопределено;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеЗакрытияНастроекРоли", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныHTML.Форма.НастройкаРоли", ПараметрыОткрытияФормы, ЭтотОбъект,,,,ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаРоли = РолиПодписей.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	НастройкиРоли = Новый Структура("Обязательная, Роль, РежимНастройкиДоступности, ПризнакДоступностиРоли");
	ЗаполнитьЗначенияСвойств(НастройкиРоли, СтрокаРоли);
	ПараметрыОткрытияФормы = Новый Структура("НастройкиРоли", НастройкиРоли);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеЗакрытияНастроекРоли", ЭтотОбъект, Новый Структура("ИндексСтроки", РолиПодписей.Индекс(СтрокаРоли)));
	ОткрытьФорму("Справочник.ШаблоныHTML.Форма.НастройкаРоли", ПараметрыОткрытияФормы, ЭтотОбъект,,,,ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияНастроекРоли(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		СтрокаРоли = РолиПодписей.Добавить();
	Иначе
		СтрокаРоли = РолиПодписей[ДополнительныеПараметры.ИндексСтроки];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаРоли, Результат);
	
	Если СтрокаРоли.РежимНастройкиДоступности = ПредопределенноеЗначение("Перечисление.РежимыНастройкиДоступностиРоли.ЗначениеПараметра") Тогда
		СтрокаРоли.ПредставлениеНастройкаДоступности = СтрШаблон("%1: %2", СтрокаРоли.РежимНастройкиДоступности, СтрокаРоли.ПризнакДоступностиРоли);
	Иначе
		СтрокаРоли.ПредставлениеНастройкаДоступности = СтрокаРоли.РежимНастройкиДоступности;
	КонецЕсли;
	
	УстановитьИдентификаторыРолей();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРолиПодписей()
	
	Объект.РолиПодписей.Очистить();
	
	Для Каждого СтрокаРоли Из РолиПодписей Цикл
		ЗаполнитьЗначенияСвойств(Объект.РолиПодписей.Добавить(), СтрокаРоли);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРолиПодписей()
	
	Для Каждого СтрокаРоли Из Объект.РолиПодписей Цикл
		НоваяРоль = РолиПодписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяРоль, СтрокаРоли);
		Если НоваяРоль.РежимНастройкиДоступности = Перечисления.РежимыНастройкиДоступностиРоли.ЗначениеПараметра Тогда
			НоваяРоль.ПредставлениеНастройкаДоступности = СтрШаблон("%1: %2", НоваяРоль.РежимНастройкиДоступности, НоваяРоль.ПризнакДоступностиРоли);
		Иначе
			НоваяРоль.ПредставлениеНастройкаДоступности = НоваяРоль.РежимНастройкиДоступности;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПодписейПриИзменении(Элемент)
	
	УстановитьИдентификаторыРолей();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИдентификаторыРолей()
	
	Для Каждого СтрокаРоли Из РолиПодписей Цикл
		Если Не ЗначениеЗаполнено(СтрокаРоли.ИдентификаторРоли) Тогда
			СтрокаРоли.ИдентификаторРоли = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстКнопкиВыбираемогоИзображения()
	
	// Элементы стилей, перечисленные в атрибуте data-bit-custom-style через ";", при условии, что они есть в атрибуте "style", будут перенесены в атрибут "style" выбранного изображения
	ШаблонДобавляемогоИзображения = "<img id='%1' data-bit-selected-img-id='%2' src='//:0' style='border:1px solid black;width:100px;height:100px;object-fit:contain' data-bit-custom-style='object-fit'/>";
	Возврат СтрШаблон(ШаблонДобавляемогоИзображения, Строка(Новый УникальныйИдентификатор), Строка(Новый УникальныйИдентификатор));
	
КонецФункции

&НаКлиенте
Процедура ИзменениеМаксимальногоРазмераВыбираемогоИзображения(Элемент)
	
	ЭлементИзображения = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	
	Если НастройкиДобавленияИзображенияОригинальныйРазмер Тогда
		РаботаСШаблонамиHTMLКлиентСервер.ИзменитьЭлементАтрибута(ЭлементИзображения, "data-bit-custom-style", "width",, Истина);
		РаботаСШаблонамиHTMLКлиентСервер.ИзменитьЭлементАтрибута(ЭлементИзображения, "data-bit-custom-style", "height",, Истина);
	Иначе
		РаботаСШаблонамиHTMLКлиентСервер.ИзменитьЭлементАтрибута(ЭлементИзображения, "data-bit-custom-style", "width");
		РаботаСШаблонамиHTMLКлиентСервер.ИзменитьЭлементАтрибута(ЭлементИзображения, "data-bit-custom-style", "height");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УбратьИсточникиВыбираемогоИзображения(ТекстHTML)
	
	ДокументHTML = РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТекстHTML);
	
	ВыбираемыеИзображения = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ДокументHTML, , "img", "data-bit-selected-img-id");
	Для Каждого ВыбираемоеИзображение Из ВыбираемыеИзображения Цикл
		ВыбираемоеИзображение.УдалитьАтрибут("src");
	КонецЦикла;
	
	Возврат РаботаСDOMКлиентСервер.ПолучитьТекстHTMLДокументаDOM(ДокументHTML);
	
КонецФункции

#Область СЭМД

#Область ОбработчикиСобытийЭлементовСЭМД

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	КэшДопустимыхЗначений = Новый Соответствие;
	ЭтоHTMLШаблон = Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон");
	ХарактеристикиВидаДокумента = ХарактеристикиВидаДокумента(Объект.ВидДокумента);
	ЭтоCDAДокумент = ХарактеристикиВидаДокумента.ФорматДокументаCDA;
	ВидимостьЭлементовCDAДокумента = ЗначениеЗаполнено(Объект.ВидДокумента) И ИспользуетсяИнтеграцияРЭМД И ЭтоCDAДокумент;
	ВидимостьЭлементовРЭМД = ЗначениеЗаполнено(Объект.ВидДокумента) И ИспользуетсяИнтеграцияРЭМД;
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СтраницаСЭМД",													ВидимостьЭлементовРЭМД И ЭтоHTMLШаблон);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаТаблицаLocalid",											ВидимостьЭлементовРЭМД И Не ЭтоHTMLШаблон);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияПараметрамLocalidПредставление",						ВидимостьЭлементовCDAДокумента);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияПараметрамКлассификацияПоля",						ВидимостьЭлементовCDAДокумента);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияПараметрамСЭМД_ПроверитьОшибки",						ВидимостьЭлементовCDAДокумента);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияПараметрамСЭМД_ОчиститьНекорректныеСопоставления",	ВидимостьЭлементовCDAДокумента);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияПараметрамГруппирующееПолеПредставление",			ВидимостьЭлементовCDAДокумента);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияТаблицамШаблоновlocalidПредставление",				ВидимостьЭлементовCDAДокумента);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияТаблицамШаблоновКлассификацияПоля",					ВидимостьЭлементовCDAДокумента);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "СоответствияТаблицамШаблоновГруппирующееПолеПредставление",		ВидимостьЭлементовCDAДокумента);
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТаблицаПараметров",	ИспользуетсяИнтеграцияРЭМД И ЭтоCDAДокумент);
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТаблицаКонстант",	ИспользуетсяИнтеграцияРЭМД И ЭтоCDAДокумент);
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаСЭМДПраво",	ИспользуетсяИнтеграцияРЭМД И ЭтоCDAДокумент);
		ИнтеграцияЕГИСЗ_СЭМДКлиент.ЗаполнитьТаблицуLocalid(ТаблицаLocalidМакета, Объект.ВидДокумента, Объект.КонстантыCDAДокумента, Элементы);
		ЗаполнитьПредставленияLocalid();
		ОбновитьФлагиИспользованДляТаблицыLocalid();
		OIDВидаДокумента = ХарактеристикиВидаДокумента.OIDКлассификатораМинздрава;
		ЗаполнитьКэшДопустимыхЗначений(КэшДопустимыхЗначений, Объект.ВидДокумента);
		УстановитьИспользованиеИсточникаЗаполнения(Объект.ЗаполнятьДиагнозыИзТабличнойЧасти, ИсточникЗаполненияПоДиагнозам);
		УстановитьВидимостьПоИсточникамЗаполнения();
	Иначе
		OIDВидаДокумента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрПриИзменении(Элемент)
	
	ТекДанные = Элемент.Родитель.ТекущиеДанные; 
	ПараметрыТипа = ПолучитьТипДанныхПараметра(ТекДанные.Параметр);
	ТекДанные.ТипЗначения = ПараметрыТипа.ТипЗначения;
	ТекДанные.ВидКлассификатора = ПараметрыТипа.ВидКлассификатора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТаблицыПриИзмененииПредставления(Элемент)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ПолеТаблицыПриИзмененииПредставления(Элемент, ТаблицаLocalidМакета);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппирующееПолеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ГруппирующееПолеПредставлениеНачалоВыбора(Элемент, ТаблицаПараметровСЭМД(), ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединяющееПолеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ОбъединяющееПолеПредставлениеНачалоВыбора(Элемент, ТаблицаПараметровСЭМД(), Объект.КонстантыCDAДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификацияПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.КлассификацияПоляНачалоВыбора(Элемент, СтандартнаяОбработка, ТаблицаLocalidМакета, ТаблицаПараметровСЭМД());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТаблицыПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ПолеТаблицыПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ТаблицаПараметровСЭМД(), ТаблицаLocalidМакета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораLocalid(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ЗаполнитьСписокВыбораLocalid(Элемент, ТаблицаLocalidМакета);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаLocalidМакетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ТаблицаLocalidМакетаВыбор(Элементы, ТаблицаLocalidМакета, ТаблицаПараметровСЭМД());
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонстантЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ТаблицаКонстантЗначениеНачалоВыбора(Элемент, ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента, Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонстантПередУдалением(Элемент, Отказ)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ТаблицаКонстантПередУдалением(Элемент, ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента, ТаблицаПараметровСЭМД());
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаLocalidКонстантыПриИзменении(Элемент)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ТаблицаLocalidКонстантыПриИзменении(ЭтотОбъект, Объект.КонстантыCDAДокумента, ТаблицаLocalidМакета, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонстантЗначениеПриИзменении(Элемент)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ТаблицаКонстантЗначениеПриИзменении(Объект.КонстантыCDAДокумента, ТаблицаLocalidМакета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПриИзменении(Элемент)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ТаблицаПараметровПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонстантЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ТаблицаКонстантЗначениеАвтоПодбор(Элемент, ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента, Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьДиагнозыИзТабличнойЧастиПриИзменении(Элемент)
	
	УстановитьИспользованиеИсточникаЗаполнения(Объект.ЗаполнятьДиагнозыИзТабличнойЧасти, ИсточникЗаполненияПоДиагнозам);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговСЭМД_ИмяСекцииПриИзменении(Элемент)
	
	ТекущаяСтрокаТега = Элементы.ДеревоТегов.ТекущиеДанные;
	ИменаСекцийТега = ТекущаяСтрокаТега.СЭМД_ИменаСекций.ВыгрузитьЗначения();
	
	ТекущийЭлементШаблонаHTMLИмеющийTag = ПолучитьТекущийЭлементШаблонаHTMLИмеющийTag();
	
	Если ИменаСекцийТега.Количество() > 0 Тогда
		ТекущийЭлементШаблонаHTMLИмеющийTag.setAttribute("data-bit-sectionname", СтрСоединить(ИменаСекцийТега, "|"));
	Иначе
		ТекущийЭлементШаблонаHTMLИмеющийTag.removeAttribute("data-bit-sectionname");
	КонецЕсли;
	
	ТекстHTMLПоследний = Элементы.ПолеHTMLДокумента.Документ.body.outerHTML;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандСЭМД

&НаКлиенте
Процедура ОчиститьНекорректныеСопоставления(Команда)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ОчиститьНекорректныеСопоставления(ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента, ТаблицаПараметровСЭМД(), Объект.СоответствияТаблицамШаблонов, Объект.ВидШаблона);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОшибкиСЭМД(Команда)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ПроверитьОшибкиСЭМД(ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента, ТаблицаПараметровСЭМД(), Объект.СоответствияТаблицамШаблонов, Объект.ВидШаблона);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКонстантыCDAДокумента(Команда)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.ДобавитьВКонстанты(ТаблицаLocalidМакета, Объект.КонстантыCDAДокумента, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКлассификациюВПолеЭМД(Команда)
	
	ИнтеграцияЕГИСЗ_СЭМДКлиент.УстановитьКлассификациюВПолеЭМД(Элементы, ТаблицаLocalidМакета, ТаблицаПараметровСЭМД(), Объект.КонстантыCDAДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СЭМД_СортироватьТаблицуПараметров(Команда)
	
	СортировкаТаблицыПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСекцийСЭМД(Команда)
	
	РедактированиеСекцийСЭМД = Не Элементы.ДеревоТеговДеревоТегов_СЭМД_РедактированиеСекций.Пометка;
	Элементы.ДеревоТеговДеревоТегов_СЭМД_РедактированиеСекций.Пометка = РедактированиеСекцийСЭМД;
	Элементы.ДеревоТеговСЭМД_ИмяСекции.Видимость = РедактированиеСекцийСЭМД;
	Элементы.ДеревоТеговДеревоТегов_СЭМД_ПроверитьКорректностьСекций.Видимость = РедактированиеСекцийСЭМД;
	Элементы.ДеревоТеговДеревоТегов_СЭМД_ЗаполнитьСекцииАвтоматически.Видимость = РедактированиеСекцийСЭМД;
	Элементы.ВидДокумента.Доступность = Не РедактированиеСекцийСЭМД;
	
	Если РедактированиеСекцийСЭМД Тогда
		ИменаСекцийСЭМД = Новый Массив;
		СтруктураПараметровПоСекциям = ПолучитьСтруктуруПараметровПоСекциям();
		Для Каждого КлючЗНачение Из СтруктураПараметровПоСекциям Цикл
			ИменаСекцийСЭМД.Добавить(КлючЗНачение.Ключ);
		КонецЦикла;
		ОбновитьДеревоТегов();
	КонецЕсли;
	
	ДеревоТеговРедактированиеHTMLДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТегов_СЭМД_ПроверитьКорректностьСекций(Команда)
	
	СтруктураПараметровПоСекциям = ПолучитьСтруктуруПараметровПоСекциям();
	ТелоДокумента = Элементы.ПолеHTMLДокумента.Документ.body;
	
	//УдалитьНекорректноВложенныеСекции();
	
	ОшибкиРасстановкиСекций = ПолучитьОшибкиРасстановкиСекций(СтруктураПараметровПоСекциям, ТелоДокумента);
	
	Если ОшибкиРасстановкиСекций.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибок не обнаружено'"));
	Иначе
		Для Каждого ОшибкиСекции Из ОшибкиРасстановкиСекций Цикл
			
			СписокНедостающихПараметровСекции = Новый Массив;
			Для Каждого НедостающийПараметр Из ОшибкиСекции.НедостающиеПараметры Цикл
				СписокНедостающихПараметровСекции.Добавить(СтрШаблон("%1•%2", Символы.Таб, НедостающийПараметр.Параметр));
			КонецЦикла;
			
			ТекстОшибкиСекции = СтрШаблон(НСтр("ru='В секцию %1 должы быть включены параметры:%2%3'"), ОшибкиСекции.Секция, Символы.ПС, СтрСоединить(СписокНедостающихПараметровСекции, Символы.ПС));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиСекции);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТегов_СЭМД_ЗаполнитьСекцииАвтоматически(Команда)
	
	РасставитьАтрибутыСекцийВHTML(Истина);
	ОбновитьДеревоТегов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСЭМД

&НаКлиенте
Процедура СортировкаТаблицыПараметров()
	
	Если Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон") Тогда
		СортировкаСтрокТаблицыПараметров(ТекстКодаHTML.ПолучитьТекст());
	КонецЕсли;
	
	ЗаполнитьПредставленияLocalid();
	ОбновитьФлагиИспользованДляТаблицыLocalid();
	
КонецПроцедуры

&НаКлиенте
Функция МожноИспользоватьLocalid(СтрокаLocalid)
	
	Возврат ИнтеграцияЕГИСЗ_СЭМДКлиент.МожноИспользоватьLocalid(СтрокаLocalid, ТаблицаLocalidМакета);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПредставленияLocalid()
	
	Для каждого СтрокаПараметра Из Объект.КонстантыCDAДокумента Цикл
		СтрокаПараметра.localidПредставление = ИнтеграцияЕГИСЗ_СЭМДКлиент.ПолучитьПредставлениеLocalid(СтрокаПараметра, ТаблицаLocalidМакета);
	КонецЦикла;
	
	Если Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.Обработка") Тогда
		Для каждого СтрокаПараметра Из Объект.СоответствияТаблицамШаблонов Цикл
			СтрокаПараметра.localidПредставление = ИнтеграцияЕГИСЗ_СЭМДКлиент.ПолучитьПредставлениеLocalid(СтрокаПараметра, ТаблицаLocalidМакета);
		КонецЦикла;
		Для каждого СтрокаПараметра Из Объект.СоответствияПараметрам Цикл
			СтрокаПараметра.localidПредставление = ИнтеграцияЕГИСЗ_СЭМДКлиент.ПолучитьПредставлениеLocalid(СтрокаПараметра, ТаблицаLocalidМакета);
		КонецЦикла;
	Иначе
		Для каждого СтрокаПараметра Из ТаблицаПараметров Цикл
			СтрокаПараметра.localidПредставление = ИнтеграцияЕГИСЗ_СЭМДКлиент.ПолучитьПредставлениеLocalid(СтрокаПараметра, ТаблицаLocalidМакета);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипыДанныхСовпадают(Знач СписокТипов1, Знач СписокТипов2)
	
	Если ТипЗнч(СписокТипов1) <> Тип("Массив") Тогда
		Если ТипЗнч(СписокТипов1) <> Тип("Тип") Тогда
			СписокТипов1 = ТипЗнч(СписокТипов1);
		КонецЕсли;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(СписокТипов1);
		СписокТипов1 = МассивТипов;
	КонецЕсли;
	
	Если ТипЗнч(СписокТипов2) <> Тип("Массив") Тогда
		Если ТипЗнч(СписокТипов2) <> Тип("Тип") Тогда
			СписокТипов2 = ТипЗнч(СписокТипов2);
		КонецЕсли;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(СписокТипов2);
		СписокТипов2 = МассивТипов;
	КонецЕсли;
	
	Для Каждого Тип1 Из СписокТипов1 Цикл
		Для Каждого Тип2 Из СписокТипов2 Цикл
			Если Тип1 = Тип2 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТипыЗначенийПараметров()
	
	Если Объект.ВидШаблона = Перечисления.ВидыШаблонов.Обработка Тогда
		Для Каждого СтрокаПараметра Из Объект.СоответствияПараметрам Цикл
			СтрокаПараметра.ТипЗначения = СтрокаПараметра.Параметр.ТипЗначения;
			СтрокаПараметра.ВидКлассификатора = СтрокаПараметра.Параметр.ВидКлассификатора;
		КонецЦикла;
		Для Каждого СтрокаПараметра Из Объект.СоответствияТаблицамШаблонов Цикл
			СтрокаПараметра.ТипЗначения = СтрокаПараметра.Параметр.ТипЗначения;
			СтрокаПараметра.ВидКлассификатора = СтрокаПараметра.Параметр.ВидКлассификатора;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
			Если СтрокаПараметра.Параметр.Назначение = Перечисления.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра Тогда
				СтрокаПараметра.ТипЗначения = ТипыЗначенийВитальныхПараметров();
			Иначе
				СтрокаПараметра.ТипЗначения = СтрокаПараметра.Параметр.ТипЗначения;
				СтрокаПараметра.ВидКлассификатора = СтрокаПараметра.Параметр.ВидКлассификатора;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипДанныхПараметра(Параметр)
	
	Результат = Новый Структура();
	Результат.Вставить("ТипЗначения", Параметр.ТипЗначения);
	Результат.Вставить("ВидКлассификатора", Параметр.ВидКлассификатора);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ХарактеристикиВидаДокумента(ВидДокумента)
	
	ХарактеристикиВидаДокумента = Новый Структура("ФорматДокументаCDA, OIDКлассификатораМинздрава");
	
	ХарактеристикиВидаДокумента.ФорматДокументаCDA = ИнтеграцияЕГИСЗСервер.ПолучитьЗначениеАтрибутаЭлементаКлассификатора(ВидДокумента, "FORMAT") = "2";
	ХарактеристикиВидаДокумента.OIDКлассификатораМинздрава = ВидДокумента.ВидДокумента.OIDКлассификатораМинздрава;
	
	Возврат ХарактеристикиВидаДокумента;
	
КонецФункции

&НаКлиенте
Процедура РасставитьАтрибутыСекцийВHTML(ПринудительнаяРасстановка = Ложь)
	
	Если Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон") Тогда
		
		СтруктураПараметровПоСекциям = ПолучитьСтруктуруПараметровПоСекциям();
		ТелоДокумента = Элементы.ПолеHTMLДокумента.Документ.body;
		
		Если ПринудительнаяРасстановка Тогда
			ТребуетсяРасстановкаАтрибутовСекций = Истина;
		Иначе
			ТребуетсяРасстановкаАтрибутовСекций = ТребуетсяРасстановкаАтрибутовСекций(СтруктураПараметровПоСекциям, ТелоДокумента);
		КонецЕсли;
		
		Если ТребуетсяРасстановкаАтрибутовСекций Тогда
			Для Каждого УзелСекции Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТелоДокумента,,,"data-bit-sectionname") Цикл
				УзелСекции.removeAttribute("data-bit-sectionname");
			КонецЦикла;
			
			Для Каждого ПараметрыСекции Из СтруктураПараметровПоСекциям Цикл
				ИмяСекции = ПараметрыСекции.Ключ;
				УзлыПараметровСекции = Новый Массив;
				Для Каждого СтруктураПараметраСекции Из ПараметрыСекции.Значение Цикл
					УзлыПараметра = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТелоДокумента, СтруктураПараметраСекции.УИД);
					Для Каждого УзелПараметра Из УзлыПараметра Цикл
						УзлыПараметровСекции.Добавить(УзелПараметра);
					КонецЦикла;
				КонецЦикла;
				ОбщийРодительскийУзел = ПолучитьОбщийРодительскийУзел(ТелоДокумента, УзлыПараметровСекции);
				
				ТекущееИмяСекцииУзла = ОбщийРодительскийУзел.getAttribute("data-bit-sectionname");
				Если Не ЗначениеЗаполнено(ТекущееИмяСекцииУзла) Тогда
					ОбщийРодительскийУзел.setAttribute("data-bit-sectionname", ИмяСекции);
				Иначе
					ОбщийРодительскийУзел.setAttribute("data-bit-sectionname", ТекущееИмяСекцииУзла + "|" + ИмяСекции);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьСтраницыШаблонаПоДокументуHTML(РаботаСDOMКлиентСервер.СоздатьДокументDOM(ТелоДокумента.innerHTML));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяРасстановкаАтрибутовСекций(СтруктураПараметровПоСекциям, ТелоДокумента)
	
	ОшибкиРасстановкиСекций = ПолучитьОшибкиРасстановкиСекций(СтруктураПараметровПоСекциям, ТелоДокумента);
	Возврат ОшибкиРасстановкиСекций.Количество() > 0;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОшибкиРасстановкиСекций(СтруктураПараметровПоСекциям, ТелоДокумента)
	
	НедостающиеПараметрыСекций = Новый Массив;
	
	УзлыСекцийПоИменам = Новый Соответствие;
	
	УзлыВсехСекций = РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(ТелоДокумента,,, "data-bit-sectionname");
	Для Каждого УзелСекций Из УзлыВсехСекций Цикл
		
		СекцииУзла = УзелСекций.getAttribute("data-bit-sectionname");
		Для Каждого ИмяСекции Из СтрРазделить(СекцииУзла, "|") Цикл
			
			УзлыТекущейСекции = УзлыСекцийПоИменам.Получить(ИмяСекции);
			Если УзлыТекущейСекции = Неопределено Тогда
				УзлыТекущейСекции = Новый Массив;
			КонецЕсли;
			
			Если УзлыТекущейСекции.Найти(УзелСекций) = Неопределено Тогда
				УзлыТекущейСекции.Добавить(УзелСекций);
			КонецЕсли;
			УзлыСекцийПоИменам.Вставить(ИмяСекции, УзлыТекущейСекции);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ПараметрыСекции Из СтруктураПараметровПоСекциям Цикл
		
		УзлыСекции = УзлыСекцийПоИменам.Получить(ПараметрыСекции.Ключ);
		Если УзлыСекции = Неопределено
			Или УзлыСекции.Количество() = 0
		Тогда
			НедостающиеПараметрыСекций.Добавить(Новый Структура("Секция, НедостающиеПараметры", ПараметрыСекции.Ключ, ПараметрыСекции.Значение));
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоУИД = Новый Соответствие;
		ИдентификаторыПараметры = Новый Массив;
		Для Каждого СтруктураПараметра Из ПараметрыСекции.Значение Цикл
			Если ИдентификаторыПараметры.Найти(СтруктураПараметра.УИД) = Неопределено Тогда
				ИдентификаторыПараметры.Добавить(СтруктураПараметра.УИД);
				ПараметрыПоУИД.Вставить(СтруктураПараметра.УИД, СтруктураПараметра.Параметр);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УзелСекции Из УзлыСекции Цикл
			Для Каждого УзелПараметра Из РаботаСHTMLКлиентСервер.ПолучитьЭлементыПоЗначениюАтрибута(УзелСекции,,, "id") Цикл
				ИндексПараметра = ИдентификаторыПараметры.Найти(УзелПараметра.id);
				Если ИндексПараметра <> Неопределено Тогда
					ИдентификаторыПараметры.Удалить(ИндексПараметра);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ИдентификаторыПараметры.Количество() > 0 Тогда
			НедостающиеПараметры = Новый Массив;
			Для Каждого ИдентификаторПараметра Из ИдентификаторыПараметры Цикл
				НедостающиеПараметры.Добавить(Новый Структура("Параметр, УИД", ПараметрыПоУИД.Получить(ИдентификаторПараметра), ИдентификаторПараметра));
			КонецЦикла;
			НедостающиеПараметрыСекций.Добавить(Новый Структура("Секция, НедостающиеПараметры", ПараметрыСекции.Ключ, НедостающиеПараметры));
		КонецЕсли;
	КонецЦикла;
	
	Возврат НедостающиеПараметрыСекций;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровПоСекциям()
	
	СтруктураПараметровПоСекциям = Новый Структура;
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПараметра.Localid) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", СтрРазделить(СтрокаПараметра.localid, ".")[0]));
		Если СтрокиLocalid.Количество() = 0 Или СтрокиLocalid[0].Секция.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Секции = СтрокиLocalid[0].Секция;
		Если Секции.Количество() > 1 Тогда
			СписокСекций = ПолучитьСписокСекцийПоГруппирующемуПараметру(СтрокаПараметра, СтрокиLocalid[0]);
		Иначе
			СписокСекций = Секции;
		КонецЕсли;
		
		Для Каждого Секция Из СписокСекций Цикл
			Если Не СтруктураПараметровПоСекциям.Свойство(Секция.Значение) Тогда
				СтруктураПараметровПоСекциям.Вставить(Секция.Значение, Новый Массив);
			КонецЕсли;
			СтруктураПараметровПоСекциям[Секция.Значение].Добавить(Новый Структура("Параметр, УИД", СтрокаПараметра.Параметр, СтрокаПараметра.СтрокаУидПараметра));
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураПараметровПоСекциям;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСекцийПоГруппирующемуПараметру(СтрокаПараметра, СтрокаLocalid)
	
	ГруппирующийПараметр = СтрокаПараметра.ГруппирующееПоле;
	Если Не ЗначениеЗаполнено(ГруппирующийПараметр) Тогда
		// Константы
		СписокСекций = Новый Массив;
		ГруппирующиеLocalid = СтрокаLocalid.ГруппирующееПоле;
		Для Каждого	ГруппирующийLocalid Из ГруппирующиеLocalid Цикл
			СтрокиКонстанты = Объект.КонстантыCDAДокумента.НайтиСтроки(Новый Структура("localid", ГруппирующийLocalid.Значение));
			Если СтрокиКонстанты.Количество() > 0 Тогда
				// TODO: Не факт, что у группирующего localid 1 секция, надо искать рекурсивно
				СписокСекций.Добавить(ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ГруппирующийLocalid.Значение))[0].Секция[0]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(ГруппирующийПараметр) = Тип("Число") Тогда
			LocalidГруппирующегоПараметра = Объект.КонстантыCDAДокумента[ГруппирующийПараметр].localid;
		Иначе
			LocalidГруппирующегоПараметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", ГруппирующийПараметр))[0].localid;
		КонецЕсли;
		// TODO: Не факт, что у группирующего localid 1 секция, надо искать рекурсивно
		СписокСекций = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", LocalidГруппирующегоПараметра))[0].Секция;
	КонецЕсли;
	
	Возврат СписокСекций;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОбщийРодительскийУзел(ТелоДокумента, УзлыПараметровСекции)
	
	ОбщийРодительскийУзел = ПолучитьРодительУзла(УзлыПараметровСекции[0]);
	
	ОбщийРодительскийУзелНайден = Ложь;
	Пока ОбщийРодительскийУзелНайден = Ложь Цикл
		УзелЯвляетсяОбщим = Истина;
		Для Каждого УзелПараметра Из УзлыПараметровСекции Цикл
			Если Не ОбщийРодительскийУзел.contains(УзелПараметра) Тогда
				ОбщийРодительскийУзел = ПолучитьРодительУзла(ОбщийРодительскийУзел.parentNode);
				УзелЯвляетсяОбщим = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если УзелЯвляетсяОбщим Тогда
			ОбщийРодительскийУзелНайден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщийРодительскийУзел;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРодительУзла(Узел)
	
	Если ВРег(Узел.tagName) = "DIV" Или ВРег(Узел.tagName) = "BODY" Тогда
		Возврат Узел;
	Иначе
		Возврат ПолучитьРодительУзла(Узел.parentNode);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСовпадениеТиповДанныхСЭМД()
	
	Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		Если Не ЗначениеЗаполнено(СтрокаПараметра.localid) Тогда
			Продолжить;
		КонецЕсли;
		
		ОчиститьСтрокуПараметра = Истина;
		ЭтоКлассификация = Ложь;
		ТекущийLocalid = СтрокаПараметра.localid;
		ЧастиLocalid = СтрРазделить(ТекущийLocalid, ".");
		Если ЧастиLocalid.Количество() > 1
			И ЧастиLocalid[1] = "КлассификацияПоля"
		Тогда
			ТекущийLocalid = ЧастиLocalid[0];
			ЭтоКлассификация = Истина;
		КонецЕсли;
		
		СтрокиLocalid = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("localid", ТекущийLocalid));
		Если СтрокиLocalid.Количество() > 0 Тогда
			Если ЭтоКлассификация Тогда
				ОчиститьСтрокуПараметра = Не ЗначениеЗаполнено(СтрокаПараметра.ВидКлассификатора) Или СтрокаПараметра.ВидКлассификатора <> СтрокиLocalid[0].КлассификацияПоляКлассификаторМЗ
			Иначе
				ОчиститьСтрокуПараметра = Не ТипыДанныхСовпадают(СтрокаПараметра.ТипЗначения.Типы(), СтрокиLocalid[0].ТипЗначения.Типы());
			КонецЕсли;
		КонецЕсли;
		
		Если ОчиститьСтрокуПараметра Тогда
			СтрокаПараметра.localid = Неопределено;
			СтрокаПараметра.КлассификацияПоля = Неопределено;
			СтрокаПараметра.ГруппирующееПоле = Неопределено;
			СтрокаПараметра.ОбъединяющееПоле = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияГруппирующихПолейКонстант()
	
	Для Каждого СтрокаПараметр Из Объект.КонстантыCDAДокумента Цикл
		Если СтрокаПараметр.ГруппирующееПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПараметр.ГруппирующееПоле) = Тип("Число") Тогда
			СтрокаПараметр.ГруппирующееПолеПредставление = СтрШаблон("Константа №%1", Строка(Объект.КонстантыCDAДокумента[СтрокаПараметр.ГруппирующееПоле].НомерСтроки));
		Иначе
			СтрокаПараметр.ГруппирующееПолеПредставление = "Параметр: " + Строка(СтрокаПараметр.ГруппирующееПоле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФлагиИспользованДляТаблицыLocalid()
	
	Для каждого СтрокаLocalid Из ТаблицаLocalidМакета Цикл
		ПараметрыОтбора = Новый Структура("localid", СтрокаLocalid.localid);
		
		ВКонстантах = Объект.КонстантыCDAДокумента.НайтиСтроки(ПараметрыОтбора).Количество();
		Если Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.Обработка") Тогда
			ВСопостовлениях = Объект.СоответствияПараметрам.НайтиСтроки(ПараметрыОтбора).Количество();
			ВСопостовленияхТаблиц = Объект.СоответствияТаблицамШаблонов.НайтиСтроки(ПараметрыОтбора).Количество();
			СтрокаLocalid.Использован = ВКонстантах + ВСопостовлениях + ВСопостовленияхТаблиц;
		Иначе
			ВТаблицеПараметров = ТаблицаПараметров.НайтиСтроки(ПараметрыОтбора).Количество();
			СтрокаLocalid.Использован = ВКонстантах + ВТаблицеПараметров;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТаблицаПараметровСЭМД()
	
	Если Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон") Тогда
		Возврат ТаблицаПараметров;
	Иначе
		Возврат Объект.СоответствияПараметрам;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьКэшДопустимыхЗначений(КэшДопустимыхЗначений, ВидДокумента)
	
	Для Каждого СтруктураLocalid Из ИнтеграцияЕГИСЗ_СЭМД.МассивLocalidДокумента(ВидДокумента) Цикл
		Если СтруктураLocalid.Свойство("ДопустимыеЗначения")
			И СтруктураLocalid.ДопустимыеЗначения <> Неопределено
		Тогда
			КэшДопустимыхЗначений.Вставить(СтруктураLocalid.localid, СтруктураLocalid.ДопустимыеЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипыЗначенийВитальныхПараметров()
	
	Возврат ИнтеграцияЕГИСЗ_СЭМД.ТипыЗначенийВитальныхПараметров();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИсточникиЗаполненийLocalid()
	
	ИсточникЗаполненияПоДиагнозам = ИнтеграцияЕГИСЗ_СЭМД.ИсточникЗаполненияПоДиагнозам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицыLocalid()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КолонкиТаблицыLocalid = Новый Массив;
	ДополнитьКолонкиТаблицы(КолонкиТаблицыLocalid, Элементы.ТаблицаLocalidМакета.ПодчиненныеЭлементы);
	
	Для Каждого КолонкаТаблицы Из КолонкиТаблицыLocalid Цикл
		ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(КолонкаТаблицы.Имя);
	КонецЦикла;
	
	ОтборЭлементаУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаLocalidМакета.ИспользованиеИсточникаЗаполнения");
	ОтборЭлементаУО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаУО.ПравоеЗначение = Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКолонкиТаблицы(Колонки, ПодчиненныеЭлементы)
	
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
			Колонки.Добавить(ПодчиненныйЭлемент);
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			ДополнитьКолонкиТаблицы(Колонки, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИспользованиеИсточникаЗаполнения(ИспользованиеИсточникаЗаполнения, ИсточникЗаполнения)
	
	СтрокиИсточниковПоДиагнозам = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("ИсточникЗаполнения", ИсточникЗаполнения));
	Для Каждого СтрокаИсточникаПоДиагнозу Из СтрокиИсточниковПоДиагнозам Цикл
		СтрокаИсточникаПоДиагнозу.ИспользованиеИсточникаЗаполнения = ИспользованиеИсточникаЗаполнения;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоИсточникамЗаполнения()
	
	ДопустимоЗаполнениеДиагнозовИзТабличнойЧасти = ТаблицаLocalidМакета.НайтиСтроки(Новый Структура("ИсточникЗаполнения", ИсточникЗаполненияПоДиагнозам)).Количество() > 0;
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ЗаполнятьДиагнозыИзТабличнойЧасти", ДопустимоЗаполнениеДиагнозовИзТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТеговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.СЭМД_ИменаСекций.ТипЗначения = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти