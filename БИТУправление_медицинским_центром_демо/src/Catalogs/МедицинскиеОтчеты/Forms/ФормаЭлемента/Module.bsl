
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		И Не ЗначениеЗаполнено(Объект.ИсточникОтчета)
	Тогда
		Объект.ВнешнийОтчетИспользовать = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаИсточникОтчета.Видимость = Ложь;
		Элементы.ГруппаКнопокСохранения.Видимость = Ложь;
	Иначе 
		ЭтаФорма.ИспользоватьВнешнийОтчет = Число(Объект.ВнешнийОтчетИспользовать);
		ЭтаФорма.ВнешнийОтчетЗарегистрирован = ВнешнийОтчетЗарегистрирован(Объект.Ссылка);
	КонецЕсли;
	
	Элементы.ВерсияВнешнегоОтчетаДляСервиса.Видимость = (ОбщегоНазначения.РазделениеВключено()
		И Объект.ВнешнийОтчетИспользовать);
			
	Элементы.ОбновитьНаименованиеИзВнешнегоОтчета.Видимость = Объект.ВнешнийОтчетИспользовать И Не ЭтоВстроенныйОтчет(Объект.ИсточникОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеЭУ();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверки
	Если Не Объект.ВнешнийОтчетИспользовать
		И ПустаяСтрока(Объект.ИсточникОтчета)
	Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Укажите источник объекта.'"));
		Модифицированность = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// ЕстьВстроенныйОтчетСМетаданными(ИсточникОтчета, ТекстОшибки)
	Если Не Объект.ВнешнийОтчетИспользовать И ОпределитьТипОтчета(Объект.ИсточникОтчета, , Истина) = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Медицинский отчет """ + СокрЛП(Объект.ИсточникОтчета) + """ не найден в конфигурации.'"));
		Модифицированность = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЕстьОтчетСЭтимИсточником(Объект.ИсточникОтчета, Объект.Ссылка) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Уже есть элемент справочника с таким именем метаданных отчета.'"));
		Модифицированность = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Объект.ВнешнийОтчетИспользовать И Не ВнешнийОтчетЗарегистрирован Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Внешний отчет отсутствует. Загрузите внешний отчет или установите признак ""Использовать"" в положение ""Внутренний отчет"".'"));
		Модифицированность = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ВнешнийОтчетИспользовать Тогда 
		Объект.ВнешнийОтчетВерсия = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(АдресФайлаВоВременномХранилище) Тогда
		ТекущийОбъект.ВнешнийОтчетХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище), Новый СжатиеДанных(9));
	ИначеЕсли ОчиститьХранилищеВнешнегоОтчета Тогда 
		ТекущийОбъект.ВнешнийОтчетХранилище = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЕстьОтчетСЭтимИсточником(Объект.ИсточникОтчета, Объект.Ссылка) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru = 'Медицинский отчет с таким именем источника объекта уже существует'"), Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Очищаем полное имя внешнего отчета, т.к. после записи оно не должно прорисовываться
	ПолноеИмяЗагруженногоВнешнегоОтчета = Неопределено;
	
	УправлениеЭУ();
	Оповестить("Обновить дерево отчетов", "Обновить дерево отчетов", ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименованиеИзВнешнегоОтчета(Команда)
	
	Если Объект.ВнешнийОтчетИспользовать Тогда
		ОписаниеОтчета = ОписаниеВнешнегоОтчета(Объект.ИсточникОтчета, АдресФайлаВоВременномХранилище);
		Если ОписаниеОтчета <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ОписаниеОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеВнешнегоОтчета(ИсточникОтчета, АдресФайлаВоВременномХранилище)
	
	Перем ОтчетМетаданные;
	
	Если ЗначениеЗаполнено(АдресФайлаВоВременномХранилище) Тогда
		
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище).Записать(ИмяФайлаОтчета);
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета);
			ОтчетМетаданные = ОбъектОтчет.Метаданные();
		Исключение КонецПопытки;
		УдалитьФайлы(ИмяФайлаОтчета);
	
	Иначе
		Попытка 
			ОтчетМетаданные = МедицинскаяОтчетностьВызовСервера.ОтчетМетаданные(ИсточникОтчета);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ОтчетМетаданные <> Неопределено Тогда
		Возврат Новый Структура("Наименование, Описание", ОтчетМетаданные.Синоним, ОтчетМетаданные.Комментарий);
	КонецЕсли;		
	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПолеИспользоватьВнешнийОтчетПриИзменении(Элемент)
	
	ИзмененПризнакИспользованияВнешнегоОтчета = Истина;
	Объект.ВнешнийОтчетИспользовать = (ЭтаФорма.ИспользоватьВнешнийОтчет = 1);
	
	Модифицированность = Истина;
	Если Объект.ВнешнийОтчетИспользовать И Не ВнешнийОтчетЗарегистрирован Тогда
		ВыбратьВнешнийОтчет();
	Иначе
		// Очистка выбранного внешнего отчета
		ОчиститьХранилищеВнешнегоОтчета = Истина;
		ЭтаФорма.ВнешнийОтчетЗарегистрирован = Ложь;
		ИзмененВнешнийОтчетХранилище = Истина;
		ИсточникОтчетаФайл = "";
		ПолноеИмяЗагруженногоВнешнегоОтчета = "";
		
		УправлениеЭУ();
	КонецЕсли;
	
	Элементы.ОбновитьНаименованиеИзВнешнегоОтчета.Видимость = Объект.ВнешнийОтчетИспользовать И Не ЭтоВстроенныйОтчет(Объект.ИсточникОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыгрузитьНажатие(Элемент)
	
	ПолноеИмяВыгружаемогоФайла = "";
	АдресДанныхВыгружаемогоФайла = "";
	ПолноеИмяФайлаВыбор = "";
	
	// Извлекаем имя из отчета
	Состояние("Получение имени отчета...");
	Результат = ПолноеИмяИДанныеФайла(Объект.Ссылка);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("ИмяФайла", ПолноеИмяВыгружаемогоФайла) Тогда 
		ПолноеИмяВыгружаемогоФайла = ?(ПустаяСтрока(Объект.ИсточникОтчета), "", Объект.ИсточникОтчета + ".erf");
	КонецЕсли;
	
	Если НЕ Результат.Свойство("АдресВременногоХранилища", АдресДанныхВыгружаемогоФайла) Тогда 
		Возврат;
	КонецЕсли;

	
	#Если ВебКлиент Тогда
		
		ПолучитьФайл(АдресДанныхВыгружаемогоФайла,ПолноеИмяВыгружаемогоФайла, Истина);
		
	#Иначе
		
		// Инициализируем диалог выбора файлов
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок = "Укажите файл для сохранения";
		Диалог.ПроверятьСуществованиеФайла = Истина;
		Диалог.Расширение = "erf";
		Диалог.Фильтр = "Внешний отчет (*.erf)|*.erf";
		
		Диалог.ПолноеИмяФайла = ПолноеИмяВыгружаемогоФайла;
		
		Состояние();
		
		// Показываем диалог
		Если НЕ Диалог.Выбрать() Тогда
			Возврат;
		Иначе
			ПолноеИмяФайлаВыбор = Диалог.ПолноеИмяФайла;
		КонецЕсли;
		
		ПолучитьИзВременногоХранилища(АдресДанныхВыгружаемогоФайла).Записать(ПолноеИмяФайлаВыбор);
		
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеИсточникОтчетаФайлОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ВнешнийОтчетЗарегистрирован Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолеИсточникОтчетаФайлОчисткаЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить хранящийся в информационной базе отчет?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеИсточникОтчетаФайлОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Объект.ИсточникОтчета = "";
	
	ОчиститьХранилищеВнешнегоОтчета = Истина;
	ЭтаФорма.ВнешнийОтчетЗарегистрирован = Ложь;
	ИзмененВнешнийОтчетХранилище = Истина;
	ИсточникОтчетаФайл = "";
	ПолноеИмяЗагруженногоВнешнегоОтчета = "";
	
	Модифицированность = Истина;
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеИсточникОтчетаФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВнешнийОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеИсточникОтчетаОбъектПриИзменении(Элемент)
	Объект.ИсточникОтчета = СокрЛП(Объект.ИсточникОтчета);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЕстьВстроенныйОтчетСМетаданными(ИсточникОтчета, ТекстОшибки)
	
	ЕстьОтчет = Истина;
	
	ОбъектМетаданных = Метаданные.Отчеты.Найти(ИсточникОтчета);
	Если ОбъектМетаданных = Неопределено Тогда
		ТекстОшибки = "Конфигурация не содержит отчета с именем, указанным в качестве источника.";
		ЕстьОтчет = Ложь;
	Иначе
		СодержитсяВПодсистеме = Метаданные.Подсистемы.Медицина.Подсистемы.МедицинскаяОтчетность.Состав.Содержит(ОбъектМетаданных);	
		//Если Не СодержитсяВПодсистеме Тогда
		//	ТекстОшибки = "Отчет с указанным именем не входит в подсистему медицинской отчетности";
		//	ЕстьОтчет = Ложь;
		//КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОтчет;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьОтчетСЭтимИсточником(ИсточникОтчета, ТекущийЭлемент)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ТекущийЭлемент", ТекущийЭлемент);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МедицинскиеОтчеты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МедицинскиеОтчеты КАК МедицинскиеОтчеты
		|ГДЕ
		|	МедицинскиеОтчеты.ИсточникОтчета = &ИсточникОтчета
		|	И НЕ МедицинскиеОтчеты.ПометкаУдаления
		|	И МедицинскиеОтчеты.Ссылка <> &ТекущийЭлемент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Функция ОпределитьТипОтчета(ФайлВнешнегоОтчета, Расширение = "", НеВыводитьСообщения = Ложь) Экспорт
	
	ТипОтчета = 0;
	
	Если ЗначениеЗаполнено(ФайлВнешнегоОтчета) Тогда
	
		Если ВнешнийОтчетЗарегистрирован(Объект.Ссылка) Или ЭтоАдресВременногоХранилища(АдресФайлаВоВременномХранилище) Тогда 
			ТипОтчета  = 1;
		Иначе
			ТипОтчета = НайтиВМетаданных(ФайлВнешнегоОтчета);
		КонецЕсли;
	
		Если ТипОтчета = 0 Тогда
			
			Если Не НеВыводитьСообщения Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден отчет ""%1"".'"), ФайлВнешнегоОтчета);

				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
	
		Если Не НеВыводитьСообщения Тогда
						
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран файл внешнего отчета.'");
			Сообщение.Сообщить();
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ТипОтчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиВМетаданных(ФайлВнешнегоОтчета)
	
	Если Метаданные.Отчеты.Найти(ФайлВнешнегоОтчета) <> Неопределено Тогда
		Возврат 2;
	ИначеЕсли Метаданные.Документы.Найти(ФайлВнешнегоОтчета) <> Неопределено Тогда
		Возврат 3;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьВнешнийОтчет()
	
	#Если ВебКлиент Тогда
		
		АдресФайлаВоВременномХранилище = "";
		ВыбранноеИмяФайла              = "";
		
		ДополнительныеПараметры = Новый Структура("ВыбранноеИмяФайла", ВыбранноеИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,,, УникальныйИдентификатор);
		
	#Иначе
		
		// Инициализируем диалог
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = "Выберите файл внешнего отчета";
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПроверятьСуществованиеФайла = Истина;
		Диалог.Фильтр = "Внешний отчет (*.erf)|*.erf";
		
		Если Не Диалог.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла), Новый УникальныйИдентификатор);
		ПолноеИмяЗагруженногоВнешнегоОтчета = Диалог.ПолноеИмяФайла;
		
		ЗарегистрироватьВнешнийОтчет();
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийОтчетЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	АдресФайлаВоВременномХранилище = Адрес;
	ПолноеИмяЗагруженногоВнешнегоОтчета = ВыбранноеИмяФайла;
	
	ЗарегистрироватьВнешнийОтчет();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолноеИмяИДанныеФайла(ОбъектСсылка)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ДанныеХранилища = ОбъектСсылка.ВнешнийОтчетХранилище.Получить();
	ДанныеХранилища.Записать(ВремФайл);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеХранилища, Новый УникальныйИдентификатор);
	
	ИмяФайла = ВнешниеОтчеты.Создать(ВремФайл).Метаданные().Имя + ".erf";
	УдалитьФайлы(ИмяФайла);
	
	Возврат Новый Структура("ИмяФайла, АдресВременногоХранилища", ИмяФайла, АдресВременногоХранилища);
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьВнешнийОтчет()
	
	Состояние("Проверка внешнего отчета...");
	
	СвойстваОтчета = МедицинскаяОтчетностьВызовСервера.СвойстваВнешнегоОтчета(Объект.Ссылка, АдресФайлаВоВременномХранилище);
	Если СвойстваОтчета.Свойство("Результат") И Не СвойстваОтчета["Результат"] Тогда 
		
		ТекстПредупреждения = Неопределено;
		Если СвойстваОтчета.Свойство("ТекстПредупреждения", ТекстПредупреждения) Тогда 
			ПоказатьПредупреждение(,ТекстПредупреждения);
		КонецЕсли;
		
		ПолноеИмяЗагруженногоВнешнегоОтчета = Неопределено;
		Возврат;
		
	КонецЕсли;
		
	ЗарегистрироватьВнешнийОтчетСоответствиеМеждуСправочникомИОтчетом(СвойстваОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВнешнийОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СвойстваОтчета = ДополнительныеПараметры.СвойстваОтчета;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ПолноеИмяЗагруженногоВнешнегоОтчета = Неопределено;
		УправлениеЭУ();
	Иначе
		ЗарегистрироватьВнешнийОтчетСоответствиеМеждуСправочникомИОтчетом(СвойстваОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВнешнийОтчетСоответствиеМеждуСправочникомИОтчетом(Знач СвойстваОтчета)
	
	// Сравнение версий выбранного и хранимого отчетов
	ВерсияХранимогоОтчета = СокрЛП(Объект.ВнешнийОтчетВерсия);
	КраткаяВерсияВнешнегоОтчета = СвойстваОтчета["КраткаяВерсияВнешнегоОтчета"];
	Если ЗначениеЗаполнено(ВерсияХранимогоОтчета) И ЗначениеЗаполнено(КраткаяВерсияВнешнегоОтчета) Тогда
		РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов = СравнитьКраткиеВерсииОтчетов(ВерсияХранимогоОтчета, КраткаяВерсияВнешнегоОтчета);
		Если РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов = -1 Тогда // если загружаемый отчет старее хранимого
			ТекстВопроса = "Внимание!
				|
				|В информационной базе уже зарегистрирован аналогичный отчет более поздней версии.
				|
				|Версия зарегистрированного отчета: " + ВерсияХранимогоОтчета + "
				|Версия выбранного отчета: " + КраткаяВерсияВнешнегоОтчета + "
				|
				|Использование более поздней версии предпочтительнее.
				|
				|Продолжить действие (не рекомендуется)?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьВнешнийОтчетСоответствиеМеждуСправочникомИОтчетомЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ЗарегистрироватьВнешнийОтчетЗагрузкаВнешнегоОтчета();
		КонецЕсли;
	Иначе
		ЗарегистрироватьВнешнийОтчетЗагрузкаВнешнегоОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВнешнийОтчетСоответствиеМеждуСправочникомИОтчетомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ПолноеИмяЗагруженногоВнешнегоОтчета = Неопределено;
		УправлениеЭУ();
	Иначе
		ЗарегистрироватьВнешнийОтчетЗагрузкаВнешнегоОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВнешнийОтчетЗагрузкаВнешнегоОтчета()
	
	// Загружаем внешний отчет в справочник
	Состояние("Загрузка внешнего отчета...");
	
	Результат = МедицинскаяОтчетностьВызовСервера.ЗарегистрироватьВнешнийОтчет(Объект.Ссылка, АдресФайлаВоВременномХранилище);
	
	Если Результат.Свойство("Зарегистрирован") И НЕ Результат["Зарегистрирован"] Тогда 
		ТекстПредупреждения = Неопределено;
		Если Результат.Свойство("ТекстПредупреждения", ТекстПредупреждения) Тогда 
			ПоказатьПредупреждение(,ТекстПредупреждения);
		КонецЕсли;
		ПолноеИмяЗагруженногоВнешнегоОтчета = Неопределено;
		УправлениеЭУ();
	ИначеЕсли Результат["Зарегистрирован"] Тогда
		
		Модифицированность = Истина;
		
		Если Результат.Свойство("ИмяМетаданныхОтчета")
			И Результат.ИмяМетаданныхОтчета <> Объект.ИсточникОтчета
		Тогда
			
			ЭтоВстроенныйОтчет = ЭтоВстроенныйОтчет(Объект.ИсточникОтчета);
			
			ТекстВопроса = НСтр("ru='Имя метаданных внешнего отчета: ""%1"", отличается от текущего'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Результат.ИмяМетаданныхОтчета);
			
			Если ЭтоВстроенныйОтчет Тогда
				ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru='Для отчетов встроенной отчетности имя метаданных внешнего отчета должно совпадать с источником отчета.'");
				ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru='Внешний отчет не зарегистрирован.'");
				ПоказатьПредупреждение(, ТекстВопроса);
				Возврат;
			Иначе
				ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru='Продолжить и заменить имя источника отчета?'");
				
				Оповещение = Новый ОписаниеОповещения("ЗарегистрироватьВнешнийОтчетЗагрузкаВнешнегоОтчетаПеренестиВОбъект", ЭтотОбъект, Результат);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30,КодВозвратаДиалога.ОК,,КодВозвратаДиалога.Отмена);
				
			КонецЕсли;
		Иначе
			ЗарегистрироватьВнешнийОтчетЗагрузкаВнешнегоОтчетаПеренестиВОбъект(, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВнешнийОтчетЗагрузкаВнешнегоОтчетаПеренестиВОбъект(Ответ = Неопределено, Результат) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	Иначе
		Если Результат.Свойство("ИмяМетаданныхОтчета") Тогда
			Результат.Вставить("ИсточникОтчета", Результат.ИмяМетаданныхОтчета);
		КонецЕсли;
		
		Если Результат.Свойство("ИсточникОтчета") Тогда
			Объект.ИсточникОтчета = Результат.ИсточникОтчета;
		КонецЕсли;
		
		Если Результат.Свойство("ВнешнийОтчетВерсия") Тогда
			Объект.ВнешнийОтчетВерсия = Результат.ВнешнийОтчетВерсия;
		КонецЕсли;
		Если Результат.Свойство("ВнешнийОтчетИспользовать") Тогда 
			Объект.ВнешнийОтчетИспользовать = Результат.ВнешнийОтчетИспользовать;
		КонецЕсли;
		Если Результат.Свойство("Наименование") Тогда 
			Объект.Наименование = Результат.Наименование;
		КонецЕсли;
		Если Результат.Свойство("Описание") Тогда 
			Объект.Описание = Результат.Описание;
		КонецЕсли;
		
		ЭтаФорма.ВнешнийОтчетЗарегистрирован = Истина;
		ИзмененВнешнийОтчетХранилище = Истина;
		УправлениеЭУ();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СравнитьКраткиеВерсииОтчетов(Версия1, Версия2)
	
	// Раскладываем версию 1 и преобразуем составляющие к числам
	ЧастиВерсии1 = МедицинскаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(Версия1, ".");
	ЧислоСоставляющихВерсии1 = ЧастиВерсии1.Количество();
	Для Инд = 0 По ЧислоСоставляющихВерсии1 - 1 Цикл
		ЧастьВерсии1 = ЧастиВерсии1[Инд];
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьВерсии1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЧастиВерсии1[Инд] = Число(ЧастьВерсии1);
	КонецЦикла;
	
	// Раскладываем версию 2 и преобразуем составляющие к числам
	ЧастиВерсии2 = МедицинскаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(Версия2, ".");
	ЧислоСоставляющихВерсии2 = ЧастиВерсии1.Количество();
	Для Инд = 0 По ЧислоСоставляющихВерсии2 - 1 Цикл
		ЧастьВерсии2 = ЧастиВерсии2[Инд];
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьВерсии2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЧастиВерсии2[Инд] = Число(ЧастьВерсии2);
	КонецЦикла;
	
	// Дополняем массив составляющих нулями, уравнивая число составляющих первой и второй версий
	Если ЧислоСоставляющихВерсии1 > ЧислоСоставляющихВерсии2 Тогда
		Для Инд = ЧислоСоставляющихВерсии2 + 1 По ЧислоСоставляющихВерсии1 Цикл
			ЧастиВерсии2.Добавить(0);
		КонецЦикла;
	ИначеЕсли ЧислоСоставляющихВерсии2 > ЧислоСоставляющихВерсии1 Тогда
		Для Инд = ЧислоСоставляющихВерсии1 + 1 По ЧислоСоставляющихВерсии2 Цикл
			ЧастиВерсии1.Добавить(0);
		КонецЦикла;
	КонецЕсли;
	
	// Сравниваем по каждому составляющему
	Для Инд = 0 По ЧислоСоставляющихВерсии1 - 1 Цикл
		ЧастьВерсии1 = ЧастиВерсии1[Инд];
		ЧастьВерсии2 = ЧастиВерсии2[Инд];
		Если ЧастьВерсии1 > ЧастьВерсии2 Тогда
			Возврат -1;
		ИначеЕсли ЧастьВерсии1 < ЧастьВерсии2 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВнешнийОтчетЗарегистрирован(СсылкаНаОбъект)
	Возврат СсылкаНаОбъект.ВнешнийОтчетХранилище.Получить() <> Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоВстроенныйОтчет(ИсточникОтчета)
	
	ЭтоВстроенныйОтчет = Ложь;
	
	ПереченьОтчетов = Справочники.МедицинскиеОтчеты.ПереченьОтчетов();
	
	Для Каждого ОписаниеОтчета Из ПереченьОтчетов Цикл
		Если ИсточникОтчета = ОписаниеОтчета.ИмяМетаданных Тогда
			ЭтоВстроенныйОтчет = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭтоВстроенныйОтчет;
	
КонецФункции
	
&НаКлиенте
Процедура УправлениеЭУ()
	
	Элементы.ПолеИсточникОтчетаОбъект.Доступность = НЕ Объект.ВнешнийОтчетИспользовать;
	Элементы.ПолеИсточникОтчетаФайл.Доступность = Объект.ВнешнийОтчетИспользовать;
	
	// Управляем ЭУ внешнего отчета
	Если Модифицированность И ЗначениеЗаполнено(ПолноеИмяЗагруженногоВнешнегоОтчета) Тогда
		ИсточникОтчетаФайл = ПолноеИмяЗагруженногоВнешнегоОтчета;
	Иначе
		ИсточникОтчетаФайл = ?(ВнешнийОтчетЗарегистрирован, "Отчет загружен в ИБ", "");
	КонецЕсли;
	
	ВерсияВнешнегоОтчета = ?(ЗначениеЗаполнено(Объект.ВнешнийОтчетВерсия), СокрЛП(Объект.ВнешнийОтчетВерсия), "<информация о версии недоступна>");
	Элементы.ПолеИсточникОтчетаФайл.Доступность = Объект.ВнешнийОтчетИспользовать;
	
	Элементы.ВерсияВнешнегоОтчета.Видимость = ВнешнийОтчетЗарегистрирован;
	Элементы.ДекорацияВыгрузить.Видимость = ВнешнийОтчетЗарегистрирован И НЕ ОчиститьХранилищеВнешнегоОтчета;
	
КонецПроцедуры

#КонецОбласти