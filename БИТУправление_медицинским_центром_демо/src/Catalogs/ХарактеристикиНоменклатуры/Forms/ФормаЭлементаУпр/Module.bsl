
#Область ОбработчикиСобытийФормы

// Обработчик события ПередОткрытием формы.
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Свойства.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
	
	// Заполнить список свойств
	ОбработкаОбъектЗначенияСвойств = Обработки.ЗначенияСвойствОбъекта.Создать();
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;

	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Характеристика = Параметры.ЗначениеКопирования.Ссылка.Скопировать();  // Скопируем значения источника.
	Иначе
		Характеристика = Объект.Ссылка;
	КонецЕсли;

	ПрочитатьЗаполнитьСвойстваИЗначения(Характеристика);
	#Если ТолстыйКлиент Тогда
	ПодключитьОбработчикИзмененияДанных("Владелец", "ПрочитатьЗаполнитьСвойстваИЗначения", Ложь);
	#КонецЕсли
	
КонецПроцедуры

// Обработчик события ПередЗаписью формы.
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		АналогичныеХарактеристики = АналогичныеХарактеристики();
		
		Если АналогичныеХарактеристики.Количество() > 0 Тогда
			
			Вопрос = НСтр("ru = 'В информационной базе уже имеются характеристики с аналогичными свойствами.
			|Использовать одну из существующих характеристик вместо создаваемой вновь?'");
			Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНетОтмена);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				Отказ = Истина;
				ЗаголовокВыбора = НСтр("ru = 'Выберите одну из существующих характеристик вместо создаваемой вновь.'");
				ВыбраннаяСтрока = АналогичныеХарактеристики.ВыбратьСтроку(ЗаголовокВыбора);
				
				Если ВыбраннаяСтрока <> Неопределено Тогда
					СправочникОбъектХарактеристикиНоменклатуры = ВыбраннаяСтрока.Характеристика.ПолучитьОбъект();
				КонецЕсли;
				
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента Наименование.
&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений();
	Список.Добавить(СформироватьНаименованиеНаСервере());
	РезультатВыбора = ВыбратьИзСписка(Список, Элементы.Наименование);
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.Наименование = РезультатВыбора.Значение;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Функция СформироватьНаименованиеНаСервере()
	
	Об = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ХарактеристикиНоменклатуры"));
	Наим = Об.СформироватьНаименование(Свойства.СвойстваИЗначения);
	
	Возврат Наим;
	
КонецФункции

#Область ПроцедурыВызываемыеИзОбработчиков

// Перенос из ОбработкаЗаписиНовогоОбъекта.
&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
		
		ПроверитьДобавитьНовоеСвойствоСервер(НовыйОбъект);
		
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДобавитьНовоеСвойствоСервер(Ссылка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Свойства");
	
	ОбработкаОбъект.ПроверитьДобавитьНовоеСвойство(Ссылка, ЭтаФорма);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Свойства");
	
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
&НаСервере
Процедура ОбновитьСвойства()
	
	Свойства.ОбъектОтбораЗначений   = Объект.Ссылка;
	Свойства.ОбъектОтбораНазначений = Объект.Владелец;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Свойства", Тип("ОбработкаОбъект.ЗначенияСвойствОбъекта"));
	ОбъектОбработки.ПрочитатьЗаполнитьСвойстваИЗначения();
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Свойства");	
	Элементы.СвойстваИЗначения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСвойства();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Значение = ДанныеФормыВЗначение(Свойства, Тип("ОбработкаОбъект.ЗначенияСвойствОбъекта"));
	Значение.ОбъектОтбораЗначений = ТекущийОбъект.Ссылка;
	Значение.ЗаписатьЗначенияСвойств();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзОбработчиков

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Характеристика - ссылка на справочник Характеристик, значения свойства которого надо прочитать.
//
&НаСервере
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(Характеристика)
	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием, поскольку в этом случае Владелец пустой.
	
	Если Свойства.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
		Свойства.ОбъектОтбораЗначений   = Характеристика;
		Свойства.ОбъектОтбораНазначений = Объект.Владелец; 
		Значение = ДанныеФормыВЗначение(Свойства, Тип("ОбработкаОбъект.ЗначенияСвойствОбъекта"));
		Значение.ПрочитатьЗаполнитьСвойстваИЗначения();
		ЗначениеВДанныеФормы(Значение, Свойства);
	КонецЕсли;
	Элементы.СвойстваИЗначения.Обновить();
КонецПроцедуры

// Функция проверяет, есть ли характеристики с аналогичными значениями свойств.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Таблица значений, содержащая аналогичные характеристики. 
//  Таблица состоит из одной колонки, содержащей ссылку на характеристики.
//
&НаСервере
Функция АналогичныеХарактеристики()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВладелецХарактеристики", Объект.Владелец);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Характеристика                   КАК Характеристика
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ 
	|		Справочник.ХарактеристикиНоменклатуры.Ссылка            КАК Характеристика
	|
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры
	|
	|	ГДЕ
	|		Справочник.ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики
	|
	|	)                                                           КАК ХарактеристикиНоменклатуры
	|";

	Для каждого Строка Из Свойства.СвойстваИЗначения Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			Индекс = Свойства.СвойстваИЗначения.Индекс(Строка);
 			Запрос.УстановитьПараметр("Свойство" + Индекс, Строка.Свойство);
			Запрос.УстановитьПараметр("Значение" + Индекс, Строка.Значение);

			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЗначенияСвойствОбъектов             КАК ЗначенияСвойствОбъектов" + Индекс + "
			|
			|ПО
			|	ЗначенияСвойствОбъектов" + Индекс + ".Объект = ХарактеристикиНоменклатуры.Характеристика
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Свойство = &Свойство" + Индекс +"
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Значение = &Значение" + Индекс +"
			|";
		КонецЕсли;
	КонецЦикла;
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Характеристика");
	
КонецФункции

&НаКлиенте
Процедура СвойстваИЗначенияПриИзменении(Элемент)
	Объект.Наименование = СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Функция СформироватьНаименование()
	
	масЗнач = Новый Массив;
	
	Для Каждого Стр Из Свойства.СвойстваИЗначения Цикл 
		Если ЗначениеЗаполнено(Стр.Значение) Тогда 
			Если ТипЗнч(Стр.Значение) = Тип("Дата") 
				И Стр.Значение = НачалоДня(Стр.Значение)
			Тогда
				// Значение - это Дата без времени.
				масЗнач.Добавить(Формат(Стр.Значение, "ДФ=dd.MM.yyyy"));
			Иначе
				// Все остальные типы
				масЗнач.Добавить(Стр.Значение);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Строка = "";
	
	Для Инд = 0 По масЗнач.Количество() - 1 Цикл 
		Строка = Строка + Строка(масЗнач[Инд]) + ", ";
	КонецЦикла;
	
	Строка = Лев(Строка, СтрДлина(Строка) - 2);
	
	Если ПустаяСтрока(Строка) Тогда
		
		Строка = "<Свойства не назначены>";
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

&НаКлиенте
Процедура СвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбораЗначений", Объект.Ссылка);
	
	ФормаСвойства =  ПолучитьФорму("ПланВидовХарактеристик.СвойстваОбъектов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
	ФормаСвойства.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОбщегоНазначенияСервер.ТипСвойстваЗначениеСвойствОбъекта(Элементы.СвойстваИЗначения.ТекущиеДанные.Свойство) Тогда
		СтандартнаяОбработка=ложь;

		мПараметры = Новый Структура;
		мПараметры.Вставить("Отбор", Новый Структура("Владелец", Элементы.СвойстваИЗначения.ТекущиеДанные.Свойство));
		Значение = ПолучитьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора",мПараметры).открытьмодально();
		Если ЗначениеЗаполнено(Значение) Тогда
			Элементы.СвойстваИЗначения.ТекущиеДанные.значение = значение;
		КонецЕсли;
	КонецЕсли;
    Объект.Наименование = СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияСервер.ИнвертироватьПометкуУдаления(Элемент.ТекущиеДанные.Свойство);
	ОбновитьСвойства();

КонецПроцедуры

#КонецОбласти

#КонецОбласти
