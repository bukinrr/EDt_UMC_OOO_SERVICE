#Область ПрограммныйИнтерфейс

// Процедура ПроверкаИЗаполнениеДо804н.
//
Процедура ПроверкаИЗаполнениеДо804н() Экспорт
	
	Если Справочники.НоменклатураМедицинскихУслуг.Выбрать().Следующий() Тогда // НМУ заполнено
		НачатьТранзакцию();
	
		// Заполнено до 804н
		Если Не Справочники.НоменклатураМедицинскихУслуг.Выбрать(,,Новый Структура("Код","A27")).Следующий() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	НоменклатураМедицинскихУслуг.Ссылка
				|ИЗ
				|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
				|ГДЕ
				|	НоменклатураМедицинскихУслуг.ВнутреннийИД <> 0";
			Если Не Запрос.Выполнить().Выбрать().Следующий() Тогда
				ТекстОшибки = ЗаполнитьСтаруюНоменклатуруМУНаСервере();
				Если ТекстОшибки <> "" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					ОтменитьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			
			// ПолучитьМакетКодирования
			МакетКодирования = Справочники.НоменклатураМедицинскихУслуг.ПолучитьМакет("МакетКодирования804");
			
			ОбластьКлассаА =  МакетКодирования.ПолучитьОбласть("КлассА");
			ОбластьПодразделовКлассаА = МакетКодирования.ПолучитьОбласть("ПодразделыА");
			
			ОбластьКлассаВ = МакетКодирования.ПолучитьОбласть("КлассВ");
			ОбластьПодразделовКлассаВ = МакетКодирования.ПолучитьОбласть("ПодразделыВ");
			
			// Создать А27 и заполнить подразделы.
			А27 = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
			А27.Код = "A27";
			А27.Наименование = "Генетические исследования";
			А27.ПолноеНаименование = "Генетические исследования";
			А27.Записать();
			
			Для СчПодр=1 По ОбластьПодразделовКлассаА.ВысотаТаблицы Цикл
				ПодразделА27 = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
				ПодразделА27.Родитель = А27.Ссылка;
				ПодразделА27.Код = "A27." + ОбластьПодразделовКлассаА.Область(СчПодр,1,СчПодр,2).Текст;
				ПодразделА27.ПолноеНаименование = ОбластьПодразделовКлассаА.Область(СчПодр,2,СчПодр,3).Текст;
				ПодразделА27.Наименование = ПодразделА27.ПолноеНаименование;
				ПодразделА27.Записать();
			КонецЦикла;
			
			// Переименуем B0_.069 в B0_.070 и создадим B0_.069.
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НоменклатураМедицинскихУслуг.Ссылка
				|ИЗ
				|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
				|ГДЕ
				|	НоменклатураМедицинскихУслуг.ЭтоГруппа
				|	И НоменклатураМедицинскихУслуг.Код ПОДОБНО &КодКлассаВ";
			
			Запрос.УстановитьПараметр("КодКлассаВ", "B0_.069");
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ПодразделВ70 = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				ПодразделВ70.Код = Лев(ПодразделВ70.Код,5) + "70";   //B0_.069 --> B0_.070 "Прочие"
				ПодразделВ70.Записать();
				// Создать подраздел 69 в каждом В
				ПодразделВ69 = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
				ПодразделВ69.Родитель = ПодразделВ70.Родитель;
				ПодразделВ69.Код = Лев(ПодразделВ70.Код,5) + "69";
				ПодразделВ69.Наименование = "Остеопатия";
				ПодразделВ69.ПолноеНаименование = "Остеопатия";
				ПодразделВ69.Записать();
			КонецЦикла;
			
			
			// Получим ссылки на классы на подразделы // А01-В05 А01.01-В05.070.
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НоменклатураМедицинскихУслуг.Ссылка
				|ПОМЕСТИТЬ Классы
				|ИЗ
				|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
				|ГДЕ
				|	НоменклатураМедицинскихУслуг.Родитель = ЗНАЧЕНИЕ(Справочник.НоменклатураМедицинскихУслуг.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	НоменклатураМедицинскихУслуг.Ссылка
				|ИЗ
				|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
				|ГДЕ
				|	НоменклатураМедицинскихУслуг.Родитель В
				|			(ВЫБРАТЬ
				|				Классы.Ссылка
				|			ИЗ
				|				Классы)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Классы.Ссылка
				|ИЗ
				|	Классы КАК Классы";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбъектГруппа = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Попытка
					НомерСтроки = Число(Прав(ОбъектГруппа.Код,2));
				Исключение
					// Какой-то неправильный элемент, добавленный пользователями.
					Продолжить;
				КонецПопытки;
				
				Если СтрНайти(ОбъектГруппа.Код,".") = 0 Тогда // Класс
					Наименование = ?(Лев(ОбъектГруппа.Код,1)="A",ОбластьКлассаА.Область(НомерСтроки,2,НомерСтроки,3).Текст,ОбластьКлассаВ.Область(НомерСтроки,2,НомерСтроки,3).Текст);
				Иначе // подраздел
					Наименование = ?(Лев(ОбъектГруппа.Код,1)="A",ОбластьПодразделовКлассаА.Область(НомерСтроки,2,НомерСтроки,3).Текст,ОбластьПодразделовКлассаВ.Область(НомерСтроки,2,НомерСтроки,3).Текст);
				КонецЕсли;
				
				Если ОбъектГруппа.ПолноеНаименование <> Наименование Тогда // Правим группу
					ОбъектГруппа.ПолноеНаименование = Наименование;
					ОбъектГруппа.Записать();
				КонецЕсли;
			КонецЦикла;
			
			// Сопоставим коды СопоставлениеВнутрИд1664_804.
			МакетКодирования = Справочники.НоменклатураМедицинскихУслуг.ПолучитьМакет("СопоставлениеВнутрИд1664_804");
			
			ОбластьУдалить			= МакетКодирования.ПолучитьОбласть("ИсключаемыеИД"); // Те, которые перезапишутся
			// Те, которые объединили (разгруз + загруз = рагруз-загруз).
			ОбластьОбъединить		= МакетКодирования.ПолучитьОбласть("ОбъединяемыеИД");
			ОбластьОдинаковыйКод	= МакетКодирования.ПолучитьОбласть("ОдинаковыйКод"); // Ошибки в приказе
			// Само сопоставление старого/нового внутрИД для дальнейшего поддержания работоспособности.
			ОбластьПереименовать	= МакетКодирования.ПолучитьОбласть("СопоставлениеВнутрИД");
			
			Для Сч=1 По ОбластьУдалить.ВысотаТаблицы Цикл			// Изменим ИД ненужных больше
				МУСсылка = Справочники.НоменклатураМедицинскихУслуг.НайтиПоРеквизиту("ВнутреннийИД",Число(ОбластьУдалить.Область(Сч,1,Сч,2).Текст));
				Если МУСсылка <> Справочники.НоменклатураМедицинскихУслуг.ПустаяСсылка() Тогда 
					МУОбъект = МУСсылка.ПолучитьОбъект();
					МУОбъект.ВнутреннийИД = 1;   // Присваиваем фейковый ид
					МУОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
			Дубли = Новый Соответствие;
			Для Сч=1 По ОбластьОбъединить.ВысотаТаблицы Цикл		// Объединим
				МУСсылка = Справочники.НоменклатураМедицинскихУслуг.НайтиПоРеквизиту("ВнутреннийИД",Число(ОбластьОбъединить.Область(Сч,1,Сч,2).Текст));
				Дубли.Вставить(МУСсылка,Справочники.НоменклатураМедицинскихУслуг.НайтиПоРеквизиту("ВнутреннийИД",Число(ОбластьОбъединить.Область(Сч,2,Сч,3).Текст)));
				МУОбъект = МУСсылка.ПолучитьОбъект();
				МУОбъект.ВнутреннийИД = 1;   // Присваиваем фейковый ид
				МУОбъект.Записать();
			КонецЦикла;
			
			ПараметрыУдаленияДублей = Новый Структура;
			ПараметрыУдаленияДублей.Вставить("ВключатьБизнесЛогику",Истина);
			ПараметрыУдаленияДублей.Вставить("СпособУдаления","Пометка"); 	
			ПараметрыУдаленияДублей.Вставить("УчитыватьПрикладныеПравила",Истина);
			ПоискИУдалениеДублей.ЗаменитьСсылкиОбщая(Дубли, ПараметрыУдаленияДублей);
			
			// Запомним ВнутрИд с одинаковыми кодами в массив (т.к. ошибка всего одна).
			Для Сч=1 По ОбластьОдинаковыйКод.ВысотаТаблицы Цикл
				ОдинаковыйКод = Новый Массив;
				ОдинаковыйКод.Добавить(Число(ОбластьОдинаковыйКод.Область(Сч,1,Сч,2).Текст));
			КонецЦикла;
			
			Для Сч=1 По ОбластьПереименовать.ВысотаТаблицы Цикл	// Изменяем внутрИд
				МУСсылка = Справочники.НоменклатураМедицинскихУслуг.НайтиПоРеквизиту("ВнутреннийИД",Число(ОбластьПереименовать.Область(Сч,1,Сч,2).Текст));
				МУОбъект = МУСсылка.ПолучитьОбъект();
				МУОбъект.ВнутреннийИД = Число(ОбластьПереименовать.Область(Сч,2,Сч,3).Текст);   // Присваиваем ид из сопоставления.
				МУОбъект.Записать();
			КонецЦикла;
			
			// Сохраним в ТЗ текущие код/ссылка/внутрид.
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НоменклатураМедицинскихУслуг.Ссылка,
				|	НоменклатураМедицинскихУслуг.Код,
				|	НоменклатураМедицинскихУслуг.ВнутреннийИД
				|ИЗ
				|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг";
			
			СтарыеДанныеТЗ = Запрос.Выполнить().Выгрузить();
			
			// Переименовать всё
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НоменклатураМедицинскихУслуг.Ссылка
				|ИЗ
				|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
				|ГДЕ
				|	НЕ НоменклатураМедицинскихУслуг.ЭтоГруппа";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МУОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				МУОбъект.Код = МУОбъект.Код + ".9998";
				МУОбъект.Записать();
			КонецЦикла;
			
			// ПройтисьПоСопоставлениюПереименоватьИСоздатьНоменклатуру
			МакетСоотношение = Справочники.НоменклатураМедицинскихУслуг.ПолучитьМакет("НМУ804");
			
			Сч=0;
			Для каждого СтрокаКласса Из ЗначениеИзСтрокиВнутр(МакетСоотношение.ПолучитьТекст()).Строки Цикл
				Для каждого СтрокаРаздела Из СтрокаКласса.Строки Цикл
					Для каждого СтрокаПодраздела  Из СтрокаРаздела.Строки Цикл
						Для каждого СтрокаНМУ Из СтрокаПодраздела.Строки Цикл
							НовыйКод = СокрЛП(СтрокаНМУ.Код);
							Если ОдинаковыйКод.Найти(СтрокаНМУ.ИД) <> Неопределено Тогда
								НовыйКод = НовыйКод+"_"+Сч;
								Сч=Сч+1;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаНМУ.ИД) Тогда 
								МУСсылка = СтарыеДанныеТЗ.Найти(СтрокаНМУ.ИД,"ВнутреннийИД");
								Если МУСсылка <> Неопределено Тогда
									МУОбъект = МУСсылка.Ссылка.ПолучитьОбъект();
								Иначе
									МУОбъект = Справочники.НоменклатураМедицинскихУслуг.СоздатьЭлемент();
								КонецЕсли;
							Иначе
								// ЕстьСтарыйКод - находим, изменяем.
								СтарыйКод = СокрЛП(СтрокаНМУ.СтарыйКод);
								МУСсылка = СтарыеДанныеТЗ.Найти(СтарыйКод,"код");
								Если СтарыйКод <> "" И МУСсылка <> Неопределено Тогда
									МУОбъект = МУСсылка.Ссылка.ПолучитьОбъект();
								Иначе
									МУОбъект = Справочники.НоменклатураМедицинскихУслуг.СоздатьЭлемент();       // НетСтарогоКода - создаём.
								КонецЕсли;
							КонецЕсли;
							
							КодРодителя = ?(Лев(НовыйКод,1)="A",Лев(НовыйКод,6),Лев(НовыйКод,7));
							МУОбъект.Родитель = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(КодРодителя);
							МУОбъект.Код = НовыйКод;
							МУОбъект.Наименование = СокрЛП(СтрокаНМУ.Наименование);
							МУОбъект.ПолноеНаименование = СокрЛП(СтрокаНМУ.Наименование);
							МУОбъект.Записать();
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НоменклатураМедицинскихУслуг.Ссылка
				|ИЗ
				|	Справочник.НоменклатураМедицинскихУслуг КАК НоменклатураМедицинскихУслуг
				|ГДЕ
				|	(НоменклатураМедицинскихУслуг.Код ПОДОБНО &Код9998
				|			ИЛИ НоменклатураМедицинскихУслуг.ВнутреннийИД = 1)";
			
			Запрос.УстановитьПараметр("Код9998", "%.9998");
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МУОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				МУОбъект.Код = Лев(МУОбъект.Код,СтрДлина(МУОбъект.Код)-5)+"  ..";
				МУОбъект.ПометкаУдаления = Истина;
				МУОбъект.Записать();
			КонецЦикла;
			
			// ПройтисьПоСправочникуНоменклатура,, где заполнен "нму". скопировать новый код.
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка,
				|	Номенклатура.НоменклатураМедицинскихУслуг.Код КАК Код
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.НоменклатураМедицинскихУслуг <> ЗНАЧЕНИЕ(Справочник.НоменклатураМедицинскихУслуг.ПустаяСсылка)
				|	И НЕ Номенклатура.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МУОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				МУОбъект.Артикул = ВыборкаДетальныеЗаписи.Код;
				МУОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаИзЕГИСЗ

// Возвращает идентификатор классификатора источника на сайте росминздрава.
// 
// Возвращаемое значение:
//	Строка.
//
Функция ПолучитьOIDСправочника() Экспорт
	Возврат "1.2.643.5.1.13.13.11.1070";
КонецФункции

// Описывает соответствие между именем реквизита в классификаторе и его именем в базе 1С.
// 
// Возвращаемое значение:
//	Соответствие.
//
Функция ПолучитьСопоставленийРеквизитовИXMLСправочникаЕГИСЗ() Экспорт
	
	
	Сопоставление = Новый Соответствие;
	//1) ID, Уникальный идентификатор, Целочисленное, числовой формат, обязательное поле, Обязательное;
	Сопоставление.Вставить("ID", "УИДЕГИСЗ");
	//2) S_CODE, Код услуги, Строковое, уникальный код услуги согласно Приказу Минздравсоцразвития России от 27.12.2011 N 1664н «Об утверждении номенклатуры медицинских услуг»,текстовый формат, обязательное поле, Обязательное;
	Сопоставление.Вставить("S_CODE", "Код");
	//3) NAME, Полное название, Строковое, текстовый формат, обязательное поле, Обязательное;
	Сопоставление.Вставить("NAME", "Наименование");
	//4) REL, Признак актуальности, Целочисленное, числовой формат, один символ (если =1 – запись актуальна, если 0 – запись упразднена в соответствии с новыми нормативно-правовыми актами);
	Сопоставление.Вставить("REL", "ПризнакАктуальности");
	//5) DATEOUT, Дата упразднения, Дата, дата, после которой данная запись упраздняется согласно новым приказам;
	Сопоставление.Вставить("DATEOUT", "");
	
	Возврат Сопоставление;
	
КонецФункции

Процедура ДополнитьКолонкиТаблицыДанных(ТЗРеквизитов) Экспорт
	
	ТЗРеквизитов.Колонки.Добавить("ПризнакАктуальности", Новый ОписаниеТипов("Число"));
	
КонецПроцедуры

// Формирует массив структур, ключи которых - поля для поиска существующих элементов при загрузки из ФР НСИ ЕГИСЗ,
//  а порядок в массиве - приоритет использования способов поиска.
// 
// Возвращаемое значение:
//  Массив - наборы ключей поиска.
//
Функция ПолучитьПорядокПоискаСуществующихОбъектов() Экспорт
	
	ПорядокПоиска = Новый Массив;
	
	ПоляПоиска = Новый Структура;
	ПоляПоиска.Вставить("УИДЕГИСЗ", "УИДЕГИСЗ");
	ПоляПоиска.Вставить("Код", "Код");
	ПорядокПоиска.Добавить(ПоляПоиска);
	
	ПоляПоиска = Новый Структура;
	ПоляПоиска.Вставить("УИДЕГИСЗ", "УИДЕГИСЗ");
	ПоляПоиска.Вставить("ПолноеНаименование", "Наименование");
	ПорядокПоиска.Добавить(ПоляПоиска);
	
	ПоляПоиска = Новый Структура;
	ПоляПоиска.Вставить("УИДЕГИСЗ", "УИДЕГИСЗ");
	ПорядокПоиска.Добавить(ПоляПоиска);
	
	ПоляПоиска = Новый Структура;
	ПоляПоиска.Вставить("Код", "Код");
	ПоляПоиска.Вставить("ПолноеНаименование", "Наименование");
	ПорядокПоиска.Добавить(ПоляПоиска);
	
	Возврат ПорядокПоиска;
	
КонецФункции

// Возвращает массив структур, ключ которой - имя реквизита справочника, 
//	а значение - имя поля таблицы актуальных в общей форме загрузки.
// 
// Возвращаемое значение:
//	Массив.
//
Функция ПолучитьЗагружаемыеПоляЕГИСЗ() Экспорт
	
	Поля = Новый Структура;
	
	Поля.Вставить("УИДЕГИСЗ",	"УИДЕГИСЗ");
	
	Поля.Вставить("Код", "Код");
	Поля.Вставить("ПолноеНаименование", "Наименование");
	Поля.Вставить("Наименование", "Наименование");
	
	Возврат Поля;
	
КонецФункции

// Загрузка справочника: событие перед записью элемента справочника.
//
// Параметры:
//  ОбъектСправочника		 - СправочникОбъект	 - объект справочника
//  ДополнительныеСвойства	 - Структура		 - дополнительные свойства
//  СтрокаКлассификатора	 - СтрокаДереваЗначений	 - строка дерева классификатора
//  СообщениеОтказа			 - Строка				 - Сообщение отказа
//
Процедура ЗагрузкаСправочникаИзЕГИСЗПередЗаписью(ОбъектСправочника, ДополнительныеСвойства, СтрокаКлассификатора, СообщениеОтказа = "") Экспорт
	
	Если ДополнительныеСвойства.Количество() <= 1 Тогда
		// Инициализация свойств.
		МакетГрупп = Справочники.НоменклатураМедицинскихУслуг.ПолучитьМакет("МакетКодирования804"); 
			
		ДополнительныеСвойства.Вставить("ОбластьКлассаА", МакетГрупп.ПолучитьОбласть("КлассА"));
		ДополнительныеСвойства.Вставить("ОбластьПодразделовКлассаА", МакетГрупп.ПолучитьОбласть("ПодразделыА"));
		
		ДополнительныеСвойства.Вставить("ОбластьКлассаВ", МакетГрупп.ПолучитьОбласть("КлассВ"));
		ДополнительныеСвойства.Вставить("ОбластьПодразделовКлассаВ", МакетГрупп.ПолучитьОбласть("ПодразделыВ"));
		
		ДополнительныеСвойства.Вставить("НайденныеГруппы", Новый Соответствие);
	КонецЕсли;
	
	// Присваиваем группу загружаемому элементу.
	
	ЧастиКода = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОбъектСправочника.Код, ".");
	Если ЧастиКода.Количество() < 3 Тогда
		Возврат;
	КонецЕсли;
	
	КодКласса = ЧастиКода[0];
	Если СтрДлина(КодКласса) <> 3 Тогда
		Возврат;
	КонецЕсли;
	
	КодПодраздела = ЧастиКода[1];
	ПолныйКодПодраздела = КодКласса + "." + КодПодраздела;
	
	// Поиск группы в числе уже найденных при этой загрузке классификатора.
	ГруппаПодраздела = ДополнительныеСвойства.НайденныеГруппы.Получить(ПолныйКодПодраздела);
	Если Не ЗначениеЗаполнено(ГруппаПодраздела) Тогда
		
		// Поиск или создание группы первого уровня (А01).
		ГруппаКласса = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(КодКласса);
		
		Если Не ЗначениеЗаполнено(ГруппаКласса) Тогда
			
			Если Лев(КодКласса, 1) = "A" Тогда
				ОбластьКласса = ДополнительныеСвойства.ОбластьКлассаА;
			ИначеЕсли Лев(КодКласса, 1) = "B" Тогда
				ОбластьКласса = ДополнительныеСвойства.ОбластьКлассаВ;
			Иначе
				Возврат;
			КонецЕсли;
			
			Для Сч = 1 По ОбластьКласса.ВысотаТаблицы Цикл
				
				КодСтроки = ОбластьКласса.Область(Сч,1,Сч,1).Текст;
				Если КодКласса = КодСтроки Тогда
					НоваяГруппа = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
					НоваяГруппа.Код = КодСтроки;
					НоваяГруппа.ПолноеНаименование = ОбластьКласса.Область(Сч,2,Сч,2).Текст;
					НоваяГруппа.Наименование = НоваяГруппа.ПолноеНаименование;
					НоваяГруппа.Записать();
					ГруппаКласса = НоваяГруппа.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(ГруппаКласса) Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли Не ГруппаКласса.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		
		// Поиск или создание группы второго уровня (2 или 3 цифры).
		ГруппаПодраздела = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(ПолныйКодПодраздела);
		
		Если Не ЗначениеЗаполнено(ГруппаПодраздела) Тогда
			
			Если Лев(КодКласса, 1) = "A" Тогда
				ОбластьПодразделов = ДополнительныеСвойства.ОбластьПодразделовКлассаА;
			ИначеЕсли Лев(КодКласса, 1) = "B" Тогда
				ОбластьПодразделов = ДополнительныеСвойства.ОбластьПодразделовКлассаВ;
			КонецЕсли;
			
			Для Сч = 1 По ОбластьПодразделов.ВысотаТаблицы Цикл
				
				КодСтроки = ОбластьПодразделов.Область(Сч,1,Сч,1).Текст;
				Если КодПодраздела = КодСтроки Тогда
					
					НоваяГруппа = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
					НоваяГруппа.Код = ПолныйКодПодраздела;
					НоваяГруппа.ПолноеНаименование = ОбластьПодразделов.Область(Сч,2,Сч,2).Текст;
					НоваяГруппа.Наименование = НоваяГруппа.ПолноеНаименование;
					НоваяГруппа.Родитель = ГруппаКласса;
					НоваяГруппа.Записать();
					ГруппаПодраздела = НоваяГруппа.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(ГруппаПодраздела) Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли Не ГруппаПодраздела.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Присваиваем группу подраздела загружаемому элементу - после того как нашли её.
	ОбъектСправочника.Родитель = ГруппаПодраздела;
	
КонецПроцедуры

// Загрузка справочника: событие перед обработкой таблицы классификатора
//
// Параметры:
//  ТаблицаКлассификатор - ТаблицаЗначений - таблица классификатора. 
// 
Процедура ПередОбработкойТаблицыКлассификатора(ТаблицаКлассификатор) Экспорт
	
	НеактуальныеЭлементы = ТаблицаКлассификатор.НайтиСтроки(Новый Структура("ПризнакАктуальности", 0));
	
	Для Каждого НеактуальныйЭлемент Из НеактуальныеЭлементы Цикл
		НеактуальныйЭлемент.Архив = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Загрузка справочника: событие после обработки таблицы классификатора
//
// Параметры:
//  ТаблицаКлассификатор - ТаблицаЗначений - таблица классификатора. 
// 
Процедура ПослеОбработкиТаблицыКлассификатора(ТаблицаКлассификатор) Экспорт
	
	МакетГрупп = Справочники.НоменклатураМедицинскихУслуг.ПолучитьМакет("МакетКодирования804"); 
	ОбластьКлассаА = МакетГрупп.ПолучитьОбласть("КлассА");
	ОбластьПодразделовКлассаА = МакетГрупп.ПолучитьОбласть("ПодразделыА");
	ОбластьКлассаВ = МакетГрупп.ПолучитьОбласть("КлассВ");
	ОбластьПодразделовКлассаВ = МакетГрупп.ПолучитьОбласть("ПодразделыВ");
	
	НайденныеКлассы = Новый Соответствие;
	НайденныеПодразделы = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКлассификатор Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ссылка)
			Или СтрокаТаблицы.Архив
		Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиКода = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.Код, ".");
		Если ЧастиКода.Количество() < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		КодКласса = ЧастиКода[0];
		Если СтрДлина(КодКласса) <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		КодПодраздела = ЧастиКода[1];
		ПолныйКодПодраздела = КодКласса + "." + КодПодраздела;
		
		ГруппаКласса = НайденныеКлассы.Получить(КодКласса);
		Если ГруппаКласса = Неопределено Тогда
			ГруппаКласса = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(КодКласса);
			Если ЗначениеЗаполнено(ГруппаКласса) Тогда
				НайденныеКлассы.Вставить(КодКласса, ГруппаКласса);
			Иначе
				СтрокаТаблицы.СледуетОбновить = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ГруппаПодраздела = НайденныеПодразделы.Получить(ПолныйКодПодраздела);
		Если ГруппаПодраздела = Неопределено Тогда
			ГруппаПодраздела = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(ПолныйКодПодраздела);
			Если ЗначениеЗаполнено(ГруппаПодраздела) Тогда
				НайденныеПодразделы.Вставить(ПолныйКодПодраздела, ГруппаПодраздела);
			Иначе
				СтрокаТаблицы.СледуетОбновить = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.Ссылка.Родитель <> ГруппаПодраздела Тогда
			СтрокаТаблицы.СледуетОбновить = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список альтернативных идентификаторов классификатора источника на сайте росминздрава.
// 
// Возвращаемое значение:
//  Массив - строки дополнительных OID классификатора в ФР НСИ ЕГИСЗ.
//
Функция ПолучитьАльтернативныеOID() Экспорт
	
	СписокOID = Новый Массив;
	СписокOID.Добавить("1.2.643.5.1.13.2.1.1.473");
	Возврат СписокOID;

КонецФункции

Процедура УстановитьУсловиеОтбораДанныхСправочника(Запрос) Экспорт
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", "НЕ Источник.ЭтоГруппа");
	
КонецПроцедуры

#КонецОбласти

// Возвращает имя реквизита для дальнейшего заполнения в шаблоне параметра Code по нему
Функция ПолучитьИмяРеквизитаDisplayNameИCode() Экспорт
	
	СтруктураВозвращаемогоЗначения = Новый Структура;
	СтруктураВозвращаемогоЗначения.Вставить("Code", "Код");
	Возврат СтруктураВозвращаемогоЗначения;
	
КонецФункции

Функция ТребуетсяПроверкаЗаполненностиЭлементаКлассификатораПередЗаписью(ОбъектНМУ) Экспорт
	
	Возврат Не ОбъектНМУ.ЭтоГруппа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьСтаруюНоменклатуруМУНаСервере()
	ОписаниеОшибки = "";
	Попытка
		МакетКодирования = Справочники.НоменклатураМедицинскихУслуг.ПолучитьМакет("МакетКодирования");
		МакетНМУ = Справочники.НоменклатураМедицинскихУслуг.ПолучитьМакет("НМУ");
		
		ОбластьКлассаА =  МакетКодирования.ПолучитьОбласть("КлассА");
		ОбластьПодразделовКлассаА = МакетКодирования.ПолучитьОбласть("ПодразделыА");
		РодительКлассаА = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
		ПроверкаИСозданиеИерархии(ОбластьКлассаА,ОбластьПодразделовКлассаА);
		
		ОбластьКлассаВ = МакетКодирования.ПолучитьОбласть("КлассВ");
		ОбластьПодразделовКлассаВ = МакетКодирования.ПолучитьОбласть("ПодразделыВ");
		РодительКлассаВ = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
		ПроверкаИСозданиеИерархии(ОбластьКлассаВ,ОбластьПодразделовКлассаВ);
		
		ДеревоЗначений = ЗначениеИзСтрокиВнутр(МакетНМУ.ПолучитьТекст());
		
		// Обход дерева
		Для каждого Строка0 Из ДеревоЗначений.Строки Цикл		// КлассА/КлассВ
			Для каждого Строка1 Из Строка0.Строки Цикл			// А01
				Для каждого Строка2 Из Строка1.Строки Цикл		// А01.01
					Для каждого Строка3 Из Строка2.Строки Цикл	// А01.01.001
						ПроверкаИСозданиеЭлементаНоменклатуры(Строка3.Код, Строка3.Наименование, Строка3.ИД, Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(Строка2.Код));
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		Возврат ОписаниеОшибки;
	Исключение
		Возврат ОписаниеОшибки;
	КонецПопытки;
КонецФункции

Процедура ПроверкаИСозданиеИерархии(ОбластьКласса,ОбластьПодразделов)
	ТекКод="";
	
	Для СчКл=1 По ОбластьКласса.ВысотаТаблицы Цикл
		СсылкаГруппы = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(ОбластьКласса.Область(СчКл,1,СчКл,2).Текст);
		
		Если СсылкаГруппы = Справочники.НоменклатураМедицинскихУслуг.ПустаяСсылка() Тогда           // Если нет такой записи
			ГруппаКласса = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
			ГруппаКласса.Код = ОбластьКласса.Область(СчКл,1,СчКл,2).Текст;
			ГруппаКласса.Наименование = ОбластьКласса.Область(СчКл,2,СчКл,3).Текст;
			ГруппаКласса.ПолноеНаименование = ОбластьКласса.Область(СчКл,2,СчКл,3).Текст;
			ГруппаКласса.Записать();
			ТекКод = ГруппаКласса.Код + ".";
			СсылкаГруппы = ГруппаКласса.Ссылка;
			Для СчПодр=1 По ОбластьПодразделов.ВысотаТаблицы Цикл
				ГруппаПодраздела = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
				ГруппаПодраздела.Код = ТекКод + ОбластьПодразделов.Область(СчПодр,1,СчПодр,2).Текст;
				ГруппаПодраздела.Наименование = ОбластьПодразделов.Область(СчПодр,2,СчПодр,3).Текст;
				ГруппаПодраздела.ПолноеНаименование = ОбластьПодразделов.Область(СчПодр,2,СчПодр,3).Текст;
				ГруппаПодраздела.Родитель = СсылкаГруппы;
				ГруппаПодраздела.Записать();
			КонецЦикла;
		// Если есть запись класса (А01).
		Иначе
			ГруппаКласса = СсылкаГруппы.ПолучитьОбъект();
			Если СсылкаГруппы.Наименование <> Лев(ОбластьКласса.Область(СчКл,2,СчКл,3).Текст,150) ИЛИ ГруппаКласса.ПолноеНаименование = "" Тогда
				ГруппаКласса.Наименование = ОбластьКласса.Область(СчКл,2,СчКл,3).Текст;
				ГруппаКласса.ПолноеНаименование = ОбластьКласса.Область(СчКл,2,СчКл,3).Текст;
				ГруппаКласса.Записать();
				СсылкаГруппы = ГруппаКласса.Ссылка;
			КонецЕсли;
			
			ТекКод = СсылкаГруппы.Код + ".";
			Для СчПодр=1 По ОбластьПодразделов.ВысотаТаблицы Цикл
				СсылкаГруппаПодраздела = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(ТекКод + ОбластьПодразделов.Область(СчПодр,1,СчПодр,2).Текст);
				// Если есть запись подраздела (А01.01).
				Если СсылкаГруппаПодраздела <> Справочники.НоменклатураМедицинскихУслуг.ПустаяСсылка() Тогда
					ГруппаПодраздела = СсылкаГруппаПодраздела.ПолучитьОбъект();
					Если СсылкаГруппаПодраздела.Наименование <> Лев(ОбластьПодразделов.Область(СчПодр,2,СчПодр,3).Текст,150) ИЛИ СсылкаГруппаПодраздела.Родитель <> СсылкаГруппы ИЛИ ГруппаПодраздела.ПолноеНаименование = "" Тогда
						ГруппаПодраздела.Наименование = ОбластьПодразделов.Область(СчПодр,2,СчПодр,3).Текст;
						ГруппаПодраздела.ПолноеНаименование = ОбластьПодразделов.Область(СчПодр,2,СчПодр,3).Текст;
						ГруппаПодраздела.Родитель = СсылкаГруппы;
						ГруппаПодраздела.Записать();
					КонецЕсли;
				// Если нет записи подраздела (А01.01).
				Иначе
					ГруппаПодраздела = Справочники.НоменклатураМедицинскихУслуг.СоздатьГруппу();
					ГруппаПодраздела.Код = ТекКод + ОбластьПодразделов.Область(СчПодр,1,СчПодр,2).Текст;
					ГруппаПодраздела.Наименование = ОбластьПодразделов.Область(СчПодр,2,СчПодр,3).Текст;
					ГруппаПодраздела.ПолноеНаименование = ОбластьПодразделов.Область(СчПодр,2,СчПодр,3).Текст;
					ГруппаПодраздела.Родитель = СсылкаГруппы;
					ГруппаПодраздела.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПроверкаИСозданиеЭлементаНоменклатуры(Код, ПолноеНаименование, ВнутрИд,Родитель)
	Ссылка = Справочники.НоменклатураМедицинскихУслуг.НайтиПоРеквизиту ("ВнутреннийИД", ВнутрИд);
	
	Если Ссылка.Пустая() Тогда
		// Проверка на наличие объекта без внутреннего ИД.
		Ссылка = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(Код);
		Если Ссылка.Пустая() Тогда
			// Абсолютно новый объект.
			Объект = Справочники.НоменклатураМедицинскихУслуг.СоздатьЭлемент();
			Объект.Код = Код;
		Иначе
			// Совпадает код, но нет или не действительный внутренний ИД. Обновляем данные, проставляем внутренний ИД.
			Объект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		Объект.Наименование			= ПолноеНаименование;
		Объект.ПолноеНаименование	= ПолноеНаименование;
		Объект.ВнутреннийИД			= ВнутрИд;
		Объект.Родитель				= Родитель;
		Объект.Записать();
		Ссылка = Объект.Ссылка;
	Иначе
		// Есть внутренний ид, обновляем все данные.
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Наименование			= ПолноеНаименование;
		Объект.ПолноеНаименование	= ПолноеНаименование;
		Объект.Родитель				= Родитель;
		Объект.Код					= Код;
		Объект.Записать();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти
