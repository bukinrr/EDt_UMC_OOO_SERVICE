#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не Параметры.Отбор.Свойство("ПометкаУдаления") Тогда
		Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);	
	КонецЕсли;
	
	Если Параметры.Свойство("ВыборГруппИЭлементов")
		И Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Архив") Тогда
		Параметры.Отбор.Вставить("Архив", Ложь);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает параметры загрузки данных из файла.
//
// Параметры:
//     Параметры - Структура - Список параметров. Поля: 
//         * Заголовок - Строка - Заголовок окна.
//         * ОбязательныеКолонки - Массив - Список имен колонок обязательных для заполнения.
//         * ТипДанныхКолонки - Соответствие, Ключ - Имя колонки, Значение - Описание типа данных.
//
Процедура ОпределитьПараметрыЗагрузкиДанныхИзФайла(Параметры) Экспорт
	
	Параметры.Заголовок = НСтр("ru = 'Номенклатура'");	
	ОписаниеТипаНаименование =  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150));
	Параметры.ТипДанныхКолонки.Вставить("Наименование", ОписаниеТипаНаименование);
		
КонецПроцедуры

// Производит сопоставление загружаемых данных с данными в ИБ.
//
// Параметры:
//   ЗагружаемыеДанные - ТаблицаЗначений - таблица значений с загружаемыми данными:
//     * СопоставленныйОбъект - СправочникСсылка - Ссылка на сопоставленный объект. Заполняется внутри процедуры
//     * <другие колонки>     - Произвольный - Состав колонок соответствует макету "ЗагрузкаИзФайла".
//
Процедура СопоставитьЗагружаемыеДанныеИзФайла(ЗагружаемыеДанные) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.Архив = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		Фильтр = Новый Структура("Наименование", РезультатЗапроса.Наименование);
		Строки = ЗагружаемыеДанные.НайтиСтроки(Фильтр);
		Для Каждого Строка Из Строки Цикл
			Строка.ОбъектСопоставления = РезультатЗапроса.Номенклатура;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Загрузка данных из файла.
//
// Параметры:
//  ЗагружаемыеДанные -ТаблицаЗначений - ТаблицаЗначений с колонками:
//       * СопоставленныйОбъект         - СправочникСсылка - Ссылка на сопоставленный объект.
//       * РезультатСопоставленияСтроки - Строка       - Статус загрузки, возможны варианты: Создан, Обновлен, Пропущен.
//       * ОписаниеОшибки               - Строка       - расшифровка ошибки загрузки данных.
//       * Идентификатор                - Число        - Уникальный номер строки
//       <другие колонки>               - Произвольный - Строки за загружаемого файла в соответствие с макетом.
//  ПараметрыЗагрузки                  - Структура - Параметры загрузки.
//       * СоздаватьНовые               - Булево       - Требуется ли создавать новые элементы справочника.
//       * ОбновлятьСуществующие        - Булево       - Требуется ли обновлять элементы справочника.
//  Отказ - Булево                     - Отмена загрузки.
//
Процедура ЗагрузитьИзФайла(ЗагружаемыеДанные, ПараметрыЗагрузки, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЦен = Новый ТаблицаЗначений();
	СписокЦен.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокЦен.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	СписокЦен.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	ОперацийВТранзакции = 100;
	
	Сч = 0;
	
	НачатьТранзакцию();	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		ОбъектСопоставленияЗаполнен = ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСопоставления);
		
		Если (ОбъектСопоставленияЗаполнен
			И ПараметрыЗагрузки.ОбновлятьСуществующие = 0)
			ИЛИ (НЕ ОбъектСопоставленияЗаполнен
			И ПараметрыЗагрузки.СоздаватьНовые = 0) Тогда
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				Продолжить;
		КонецЕсли;
			
		Попытка
			
			Если ОбъектСопоставленияЗаполнен Тогда
				
				Блокировка        = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.Номенклатура");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.ОбъектСопоставления);
				Блокировка.Заблокировать();
				
				ЭлементСправочника = СтрокаТаблицы.ОбъектСопоставления.ПолучитьОбъект();
				
				Если ЭлементСправочника = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Номенклатура с артикулом %1 не существует.'"), СтрокаТаблицы.Артикул);
				КонецЕсли;
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Обновлен";
				
			Иначе
				
				ЭлементСправочника                         = СоздатьЭлемент();
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Создан";
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы);
			
			Причина = "Родитель";
			// Родитель
			Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
				РодительЭлемента = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТаблицы.Родитель);
				Если Не ЗначениеЗаполнено(РодительЭлемента) Тогда
					РодительЭлемента = Справочники.Номенклатура.СоздатьГруппу();
					РодительЭлемента.Наименование = СтрокаТаблицы.Родитель;
					РодительЭлемента.Записать();
				КонецЕсли;
				ЭлементСправочника.Родитель = РодительЭлемента.Ссылка;
			КонецЕсли; 		  
			
			Причина = "Это группа";
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЭтоГруппа) И СтрокаТаблицы.ЭтоГруппа Тогда
				СуществующийЭлемент = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТаблицы.Наименование);
				Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
					РодительЭлемента = Справочники.Номенклатура.СоздатьГруппу();
					РодительЭлемента.Наименование = СтрокаТаблицы.Наименование;
					РодительЭлемента.Родитель = ЭлементСправочника.Родитель;
					РодительЭлемента.Записать();
				ИначеЕсли СуществующийЭлемент.Родитель <> ЭлементСправочника.Родитель Тогда 
					СуществующийЭлемент.Родитель = ЭлементСправочника.Родитель.Ссылка;	
				КонецЕсли;  
				Продолжить;	
			КонецЕсли; 
			
			Причина = "Полное наименование";
			// Полное наименование
			Если ЗагружаемыеДанные.Колонки.Найти("НаименованиеПолное") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеПолное) Тогда
				ЭлементСправочника.НаименованиеПолное = СтрокаТаблицы.НаименованиеПолное;
			Иначе
				ЭлементСправочника.НаименованиеПолное = СтрокаТаблицы.Наименование;
			КонецЕсли;
			
			Причина = "Базовая единица измерения";
			// Базовая единица измерения
			Если ЗагружаемыеДанные.Колонки.Найти("БазоваяЕдиницаИзмерения") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.БазоваяЕдиницаИзмерения) Тогда
				БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СтрокаТаблицы.БазоваяЕдиницаИзмерения);	
				Если Не ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
					Попытка
						БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
						БазоваяЕдиницаИзмерения.Наименование = СтрокаТаблицы.БазоваяЕдиницаИзмерения;
						БазоваяЕдиницаИзмерения.НаименованиеПолное = СтрокаТаблицы.БазоваяЕдиницаИзмерения;
						БазоваяЕдиницаИзмерения.Записать();
					Исключение КонецПопытки;
				КонецЕсли; 
				ЭлементСправочника.БазоваяЕдиницаИзмерения = БазоваяЕдиницаИзмерения.Ссылка;
			КонецЕсли;
			
			Причина = "Единица хранения остатков";
			// Единица хранения остатков
			Если ЗагружаемыеДанные.Колонки.Найти("ЕдиницаХраненияОстатков") <> Неопределено Тогда
				ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(СтрокаТаблицы.ЕдиницаХраненияОстатков,,,ЭлементСправочника.Ссылка);
				ЭлементСправочника.ЕдиницаХраненияОстатков = ЕдиницаХраненияОстатков.Ссылка;	
			КонецЕсли; 
			
			Причина = "Единица товаров";
			// Единица товаров
			Если ЗагружаемыеДанные.Колонки.Найти("ЕдиницаТоваров") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаТоваров) Тогда
				Если Не ЭлементСправочника.Ссылка.Пустая() Тогда
					ЕдиницаТоваров = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(СтрокаТаблицы.ЕдиницаТоваров,,,ЭлементСправочника);
					ЭлементСправочника.ЕдиницаТоваров = ЕдиницаТоваров.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Причина = "Упаковка";
			// Упаковка
			Если ЗагружаемыеДанные.Колонки.Найти("Упаковка") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Упаковка)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементСправочника, "Упаковка")
			Тогда
				Если Не ЭлементСправочника.Ссылка.Пустая() Тогда
					Упаковка = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(СтрокаТаблицы.Упаковка,,,ЭлементСправочника);
					ЭлементСправочника.Упаковка = Упаковка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Причина = "Индивидуальный шаблон осмотра";
			// Индивидуальный шаблон осмотра
			Если ЗагружаемыеДанные.Колонки.Найти("ИндивидуальныйШаблонОсмотра") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ИндивидуальныйШаблонОсмотра)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементСправочника, "ИндивидуальныйШаблонОсмотра")
			Тогда
				ИндивидуальныйШаблонОсмотра = Справочники.ШаблоныHTML.НайтиПоНаименованию(СтрокаТаблицы.ИндивидуальныйШаблонОсмотра);
				ЭлементСправочника.ИндивидуальныйШаблонОсмотра = ИндивидуальныйШаблонОсмотра.Ссылка;
			КонецЕсли;	
			
			Причина = "Номенклатура медицинских услуг";
			// Номенклатура медицинских услуг
			Если ЗагружаемыеДанные.Колонки.Найти("НоменклатураМедицинскихУслуг") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураМедицинскихУслуг)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементСправочника, "НоменклатураМедицинскихУслуг")
			Тогда
				НоменклатураМедицинскихУслуг = Справочники.НоменклатураМедицинскихУслуг.НайтиПоКоду(СтрокаТаблицы.НоменклатураМедицинскихУслуг);
				ЭлементСправочника.НоменклатураМедицинскихУслуг = НоменклатураМедицинскихУслуг.Ссылка;
			КонецЕсли;
			
			Причина = "Вид ставки НДС";
			// Вид ставки НДС
			Если ЗагружаемыеДанные.Колонки.Найти("ВидСтавкиНДС") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ВидСтавкиНДС) Тогда
				ЭлементСправочника.ВидСтавкиНДС = СтрокаТаблицы.ВидСтавкиНДС;
			КонецЕсли;
			
			Причина = "Вид номенклатуры";
			// Вид номенклатуры
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидНоменклатуры) Тогда		
				ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры." + СтрокаТаблицы.ВидНоменклатуры);
				ЭлементСправочника.ВидНоменклатуры = ВидНоменклатуры;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭлементСправочника.ВидНоменклатуры) Тогда
				Если ЗначениеЗаполнено(ЭлементСправочника.БазоваяЕдиницаИзмерения) Тогда
					ЭлементСправочника.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал;
				Иначе
					ЭлементСправочника.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга;	
				КонецЕсли;	
			КонецЕсли; 
			
			Причина = "Специализация";
			// Специализация
			Если ЗагружаемыеДанные.Колонки.Найти("КатегорияВыработки") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.КатегорияВыработки) Тогда
				Специализация = Справочники.КатегорииВыработки.НайтиПоНаименованию(СтрокаТаблицы.КатегорияВыработки, Истина);
				Если Не ЗначениеЗаполнено(Специализация) Тогда
					Специализация = Справочники.КатегорииВыработки.СоздатьЭлемент();
					Специализация.Наименование = СтрокаТаблицы.КатегорияВыработки;
					Специализация.Записать();
				КонецЕсли;
				ЭлементСправочника.КатегорияВыработки = Специализация.Ссылка;
			КонецЕсли;				
			
			Если НЕ ЭлементСправочника.ПроверитьЗаполнение() Тогда
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				Если СообщенияПользователю.Количество()>0 Тогда
					ТекстСообщений = "";
					Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
						ТекстСообщений  = ТекстСообщений + СообщениеПользователю.Текст + Символы.ПС;
					КонецЦикла;
					СтрокаТаблицы.ОписаниеОшибки = ТекстСообщений;
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(ЭлементСправочника.КатегорияВыработки) Тогда
					ЭлементСправочника.ОбменДанными.Загрузка = Истина;
					Если Не ЗначениеЗаполнено(ЭлементСправочника.Код) Тогда
						ЭлементСправочника.УстановитьНовыйКод();
					КонецЕсли;
				КонецЕсли; 
				ЭлементСправочника.Записать();
				СтрокаТаблицы.ОбъектСопоставления = ЭлементСправочника.Ссылка;
				
				Причина = "Единица хранения остатков";
				Если Не ЗначениеЗаполнено(ЭлементСправочника.ЕдиницаХраненияОстатков) 
						И ЭлементСправочника.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
					УстановитьЕдиницуПриЗагрузке(ЭлементСправочника,СтрокаТаблицы.ЕдиницаХраненияОстатков);
				КонецЕсли;
				
				Причина = "Единица товаров";
				Если ЗагружаемыеДанные.Колонки.Найти("ЕдиницаТоваров") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаТоваров)
					И Не ЗначениеЗаполнено(ЭлементСправочника.ЕдиницаТоваров) 
					И ЭлементСправочника.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал
				Тогда
					УстановитьЕдиницуПриЗагрузке(ЭлементСправочника,СтрокаТаблицы.ЕдиницаТоваров,"ЕдиницаТоваров");
				КонецЕсли;
				
				Причина = "Цена";
				Если ЗагружаемыеДанные.Колонки.Найти("Цена") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Цена) Тогда
					НоваяСтрока = СписокЦен.Добавить();
					НоваяСтрока.Номенклатура = ЭлементСправочника.Ссылка;
					НоваяСтрока.Цена = СтрокаТаблицы.Цена;
					Если ЭлементСправочника.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
						НоваяСтрока.ЕдиницаИзмерения = ЭлементСправочника.ЕдиницаХраненияОстатков.Ссылка;	
					КонецЕсли; 
				КонецЕсли; 
				
				Если Сч = ОперацийВТранзакции Тогда
					Сч = 0;
					Попытка 
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
						Возврат;
					КонецПопытки;
					НачатьТранзакцию();
				Иначе
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЕсли;
		Исключение
			Причина = "Столбец """ + Причина + """: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтрокаТаблицы.РезультатСопоставленияСтроки = Причина;
			СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'Невозможна запись из-за некорректности данных. По причине:'" + Причина);
		КонецПопытки;
	КонецЦикла;
	
	Попытка 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	УстановитьЦены(СписокЦен);
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЦены(СписокЦен)
	
	Если СписокЦен.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	ДокументЦены = Документы.УстановкаЦен.СоздатьДокумент();
	Для Каждого СтрокаЦены Из СписокЦен Цикл
		НоваяСтрока = ДокументЦены.Номенклатура.Добавить();
		НоваяСтрока.Цена = СтрокаЦены.Цена;
		НоваяСтрока.Номенклатура = СтрокаЦены.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаЦены.ЕдиницаИзмерения;
	КонецЦикла; 
	ДокументЦены.Дата = ТекущаяДатаСеанса();
	ДокументЦены.Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала();
	ДокументЦены.ВидОперации = Перечисления.ВидыОперацийУстановкиЦен.ЦеныПрейскурантов;
	ДокументЦены.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура УстановитьЕдиницуПриЗагрузке(ЭлементСправочника, Единица, ИмяРеквизита = "ЕдиницаХраненияОстатков")
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	Если ЗначениеЗаполнено(Единица) Тогда
		ЕдиницаИзмерения.Наименование = Единица;
		ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Единица);
	ИначеЕсли ЗначениеЗаполнено(ЭлементСправочника.БазоваяЕдиницаИзмерения) Тогда 
		ЕдиницаИзмерения.Наименование = ЭлементСправочника.БазоваяЕдиницаИзмерения.Наименование;
		ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ЭлементСправочника.БазоваяЕдиницаИзмерения; 
	Иначе
		Возврат;
	КонецЕсли; 	
	ЕдиницаИзмерения.Коэффициент = 1;
	ЕдиницаИзмерения.Владелец = ЭлементСправочника.Ссылка;
	ЕдиницаИзмерения.Записать();	 	
	ЭлементСправочника[ИмяРеквизита] = ЕдиницаИзмерения.Ссылка;
	ЭлементСправочника.Записать();
	
КонецПроцедуры

#КонецОбласти
