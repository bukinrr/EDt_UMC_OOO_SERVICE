
&НаКлиенте
Перем мВестиУчетПоХарактеристикам;
&НаКлиенте
Перем мПоказыватьСопутствующие;
&НаКлиенте
Перем соотВидыНоменклатуры;
&НаКлиенте
Перем мФормироватьНаименованиеПолноеАвтоматически;
&НаКлиенте
Перем СпособФормированияЦеныМедосмотраДоИзменения;

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	Если Параметры.Ключ.Пустая() Тогда
		Значение = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Номенклатура"));
		Значение.ОбработкаЗаполнения("");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ЕдиницаХраненияОстатков	= Неопределено;	
		Объект.ЕдиницаТоваров			= Неопределено;
		КопируемаяНоменклатура = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	ОбновитьОтборы();
	
	мВестиУчетПоХарактеристикам = мУчетнаяПолитика.ВестиУчетПоХарактеристикам;
	мВестиУчетПоХарактеристикам = ?(мВестиУчетПоХарактеристикам=Неопределено,Истина,мВестиУчетПоХарактеристикам);
	
	Элементы.КомплектующиеНоменклатурыХарактеристикаКомплектующей.Видимость = мВестиУчетПоХарактеристикам;
	
	Элементы.ВестиУчетПоХарактеристикам.Видимость = мВестиУчетПоХарактеристикам;
	
	Элементы.ГруппаСопутствующие.Видимость = мУчетнаяПолитика.ПоказыватьСопутствующиеТовары;
	Элементы.СопутствующиеТовары.Видимость = мУчетнаяПолитика.ПоказыватьСопутствующиеТовары;
	Элементы.СопутствующиеТоварыУнаследованные.Видимость = мУчетнаяПолитика.ПоказыватьСопутствующиеТовары;
	
	Если мУчетнаяПолитика.ПоказыватьСопутствующиеТовары Тогда
		ОбновитьСопутствующиеУнаследованныеСервер();	
	КонецЕсли;
	
	РаботаСФормамиСервер.УстановитьВидимостьВнешнегоКода(Элементы.ВнешнийКод,Ложь,РеквизитФормыВЗначение("Объект").Метаданные().Имя);
	
	ОбновитьСвойства();
	
	Элементы.ОборудованияФилиал.Видимость = ПараметрыСеанса.УчетПоНесколькимФилиалам;
	
	Элементы.СтавкаНДС.РежимВыбораИзСписка = Истина;
	Элементы.СтавкаНДС.СписокВыбора.Очистить();
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыСтавокНДС Цикл
		Элементы.СтавкаНДС.СписокВыбора.Добавить(ЗначениеПеречисления,
			Строка(Перечисления.СтавкиНДС.СтавкаНДС(ЗначениеПеречисления, ТекущаяДатаПользователя)));
	КонецЦикла;
	
	ПриСозданииНаСервереМедицина();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мВестиУчетПоХарактеристикам = мУчетнаяПолитика.ВестиУчетПоХарактеристикам;
	мВестиУчетПоХарактеристикам = ?(мВестиУчетПоХарактеристикам=Неопределено,Истина,мВестиУчетПоХарактеристикам);
	
	соотВидыНоменклатуры = ДопСерверныеФункцииПовтИсп.ПолучитьСоответствиеДляПеречисления("ВидыНоменклатуры");
	
	мПоказыватьСопутствующие = мУчетнаяПолитика.ПоказыватьСопутствующиеТовары;
	// Определение видимости в зависимости от вида номенклатуры
	ЭтоНабор  = (Объект.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Набор"));
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	ВидНоменклатурыПриИзменении(Неопределено);		
	ВестиУчетПоХарактеристикамПриИзменении(Неопределено);
	ВестиУчетПоСериямПриИзменении(Неопределено);
	
	Если Истина // ИспользоватьПодключаемоеОборудование Проверка на включенную ФО "Использовать ВО".
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.

		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	
	КонецЕсли;
	
	РедактироватьЛСПриИзменении(Элементы.РедактироватьЛС);
	
	СпособФормированияЦеныМедосмотраДоИзменения = Объект.СпособФомированияЦеныМедосмотра;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СвойстваИЗначенияСервер.ЗаписатьЗначенияСвойствВФорме(Объект.Ссылка, Свойства.СвойстваИЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		Если ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) И
			Не ЗначениеЗаполнено(Объект.ЕдиницаХраненияОстатков)
		Тогда
			ПроверитьЕдиницуХраненияОстатков();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КопируемаяНоменклатура) Тогда
		ЗаполненныеДанныеКопируемогоЗначения = ПолучитьСписокЗаполненныхДанныеКопируемогоЗначения(КопируемаяНоменклатура);
		Если ЗаполненныеДанныеКопируемогоЗначения.Количество() <> 0 Тогда
			ПараметрыЗаписи.Вставить("ЗаполненныеДанныеКопируемогоЗначения", ЗаполненныеДанныеКопируемогоЗначения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтборы();
	ОбновитьСвойства();
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаполненныеДанныеКопируемогоЗначения") Тогда
		ПаремертыФормы = Новый Структура(); 
		ПаремертыФормы.Вставить("Реквизиты", ПараметрыЗаписи.ЗаполненныеДанныеКопируемогоЗначения);
		ПаремертыФормы.Вставить("КопируемаяНоменклатура", КопируемаяНоменклатура);
		ПаремертыФормы.Вставить("Номенклатура", Объект.Ссылка);

		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКопирования",ПаремертыФормы);
		КопируемаяНоменклатура = Неопределено;
	КонецЕсли;
	
	Если Объект.МедосмотрСправка И Объект.СпособФомированияЦеныМедосмотра <> СпособФормированияЦеныМедосмотраДоИзменения Тогда
		ОбщегоНазначения.СообщитьПользователю("Был изменен способ формирования цены медосмотра. Другим пользователям для мгновенного применения изменений потребуется перезапустить программу!");
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	СпособФормированияЦеныМедосмотраДоИзменения = Объект.СпособФомированияЦеныМедосмотра;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновлениеФормыНоменклатуры" Тогда
		Если Объект.Ссылка= Параметр Тогда
			ОбновитьОтборы();
			ОбновитьСвойства();
			ЭтаФорма.Прочитать();	
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписанВредныйФакторПриВызовеИзНоменклатуры" И Источник = УникальныйИдентификатор Тогда
		Объект.ВредныйФакторСправки = Параметр;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем Действие;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВыбранноеЗначение.Свойство("Действие", Действие);
		
		Если Действие = "ПодборНормативногоМатериала" Тогда
			Если Объект.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Услуга") Тогда
				Элементы.ПанельЭлемента.ТекущаяСтраница = Элементы.ПанельЭлемента.Страницы.Нормы;
				ОбработкаВнесенияНоменклатуры(ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.ХарактеристикаНоменклатуры, ВыбранноеЗначение.ЕдиницаИзмерения,
				ВыбранноеЗначение.Количество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьСопутствующиеУнаследованныеСервер()
	
	Значение = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.Номенклатура"));
	
	мас = Значение.ОбновитьСопутствующиеУнаследованные();
	
	СопутствующиеТоварыУнаследованные.Очистить();
	Если мас <> Неопределено Тогда
		Для Инд = 0 По мас.Количество() - 1 Цикл
			нс = СопутствующиеТоварыУнаследованные.Добавить();
			нс.Код = мас[Инд].Код;
			нс.Артикул = мас[Инд].Артикул;
			нс.Номенклатура = мас[Инд].Номенклатура;
			нс.ВидНоменклатуры = мас[Инд].ВидНоменклатуры;
			нс.Владелец = мас[Инд].Владелец;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЕдиницыИзмеренияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли; 
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ЭтоУслуга = (Объект.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Услуга"));
	ЭтоНабор  = (Объект.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Набор"));
	
	Элементы.КатегорияВыработки.Доступность	= Не ЭтоНабор;
	Если ЭтоНабор Тогда
		Если Не Объект.КатегорияВыработки.Пустая() Тогда
			Объект.КатегорияВыработки = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПродолжительностьМин.Доступность = ЭтоУслуга;
	Элементы.ПродолжительностьЧас.Доступность = ЭтоУслуга;
	Элементы.ДекорацияПродолжительность.Доступность = ЭтоУслуга;
	
	Элементы.ГруппаПродолжительностьЕдиницыУслуги.Видимость = ЭтоУслуга;
	
	Если Объект.ПродолжительностьЕдиницыУслуги > 0 Тогда
		КоличествоОпределяетсяПродолжительностью = Истина;
	Иначе
		Элементы.ПродолжительностьЕдиницыУслуги.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ЕдиницыИзмерения.Доступность = Не ЭтоНабор;
	Элементы.ЕдиницаХраненияОстатков.Доступность = Не (ЭтоУслуга Или ЭтоНабор);
	Элементы.ЕдиницаТоваров.Доступность = Не (ЭтоУслуга Или ЭтоНабор);
	
	Элементы.ЕдиницаХраненияОстатков.АвтоОтметкаНезаполненного = Не (ЭтоУслуга Или ЭтоНабор);
	Элементы.ЕдиницаХраненияОстатков.ОтметкаНезаполненного     = Не (ЭтоУслуга Или ЭтоНабор) И Элементы.ЕдиницаХраненияОстатков.ОтметкаНезаполненного; 
	
	Элементы.КодМедУслуги.Видимость 				= ЭтоУслуга;
	Элементы.КодТРУ.Видимость						= Не (ЭтоУслуга Или ЭтоНабор);
	Элементы.ПланируетсяБезСотрудника.Доступность	= ЭтоУслуга;
	Элементы.ПланируетсяБезОборудования.Доступность	= ЭтоУслуга;
	Элементы.ТолькоДляПланирования.Доступность		= ЭтоУслуга;
	Элементы.ГруппаНормы.Видимость					= ЭтоУслуга; // Или ЭтоНабор;
	Элементы.ГруппаКомплектующие.Видимость			= ЭтоНабор;
	Элементы.ГруппаМинимальныеОстатки.Видимость		= Не (ЭтоУслуга Или ЭтоНабор);
	Элементы.ГруппаСопутствующие.Видимость = Не ЭтоНабор И мПоказыватьСопутствующие;
	
	Элементы.ГруппаОборудование.Видимость = ЭтоУслуга;
	Элементы.ГруппаФормыУчастия.Видимость = ЭтоУслуга;
	Элементы.ГруппаРаботаПоАгентскомуДоговору.Видимость = ЭтоУслуга;
	
	// Видимость характеристики зависит от вида
	Если Элемент <> Неопределено Тогда
		ВестиУчетПоХарактеристикамПриИзменении(Неопределено);
		ВестиУчетПоСериямПриИзменении(Неопределено);
	КонецЕсли;
	
	Элементы.ВестиУчетПоХарактеристикам.Видимость = мВестиУчетПоХарактеристикам И Не ЭтоНабор;
	
	Элементы.ВестиУчетПоСериям.Видимость = Не (ЭтоУслуга Или ЭтоНабор);  
	
	ВидНоменклатурыПриИзмененииМедицина(ЭтоУслуга, ЭтоНабор);	

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьНаименованиеПолноеАвтоматически();
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоХарактеристикамПриИзменении(Элемент)
	
	ЭтоУслуга = (Объект.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Услуга"));
	ЭтоНабор  = (Объект.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Набор"));
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаХарактеристики", Объект.ВестиУчетПоХарактеристикам И мВестиУчетПоХарактеристикам И Не ЭтоНабор);
	
	Если Элементы.Найти("ХарактеристикаНоменклатуры") <> Неопределено Тогда
		
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ХарактеристикаНоменклатуры",	Объект.ВестиУчетПоХарактеристикам И мВестиУчетПоХарактеристикам И Не ЭтоНабор);
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ХарактеристикаМатериала",	мВестиУчетПоХарактеристикам);
		
	КонецЕсли;
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТабличноеПолеЦеныХарактеристикаНоменклатуры",				Объект.ВестиУчетПоХарактеристикам И мВестиУчетПоХарактеристикам И Не ЭтоНабор);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТабличноеПолеШтрихкодыХарактеристикаНоменклатуры",			Объект.ВестиУчетПоХарактеристикам И мВестиУчетПоХарактеристикам И Не ЭтоНабор);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТабличноеПолеМинимальныеОстаткиХарактеристикаНоменклатуры",	Объект.ВестиУчетПоХарактеристикам И мВестиУчетПоХарактеристикам);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСериямПриИзменении(Элемент)

	ЭтоМатериал = (Объект.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Материал"));
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ТабличноеПолеШтрихкодыСерияНоменклатуры", Объект.ВестиУчетПоСериям И ЭтоМатериал);
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаСерии", Объект.ВестиУчетПоСериям И ЭтоМатериал);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ МОДУЛЯ

&НаСервере
Процедура ПроверитьЕдиницуХраненияОстатков()
	
	Если ЗначениеЗаполнено(Объект.ЕдиницаХраненияОстатков) Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, Объект.Ссылка);
	
	Если ВыборкаЕдиниц.Следующий() Тогда
		
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
		
	Иначе
		
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		
		НайденнаяЕдиницаОбъект.Наименование            = Объект.БазоваяЕдиницаИзмерения.Наименование;
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = Объект.БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = Объект.Ссылка;
		
		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru ='Не удалось записать единицу хранения остатков: 
						|'") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		
	КонецЕсли;
	
	Объект.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	СправочникОбъект = Объект.Ссылка.ПолучитьОбъект();
	СправочникОбъект.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
КонецПроцедуры // ПроверитьЕдиницуХраненияОстатков()

// Установка отборов для списков
&НаСервере
Процедура ОбновитьОтборы()
	
	РаботаСФормамиСервер.УстановитьОтборСписка("Владелец", Объект.Ссылка, ТабличноеПолеХарактеристики);
	РаботаСФормамиСервер.УстановитьОтборСписка("Владелец", Объект.Ссылка, Серии);
	РаботаСФормамиСервер.УстановитьОтборСписка("Номенклатура", Объект.Ссылка, ТабличноеПолеНормы);
	РаботаСФормамиСервер.УстановитьОтборСписка("Номенклатура", Объект.Ссылка, ТабличноеПолеЦены);
	РаботаСФормамиСервер.УстановитьОтборСписка("Номенклатура", Объект.Ссылка, ТабличноеПолеМинимальныеОстатки);
	РаботаСФормамиСервер.УстановитьОтборСписка("Владелец", Объект.Ссылка, ТабличноеПолеШтрихкоды);
	РаботаСФормамиСервер.УстановитьОтборСписка("Владелец", Объект.Ссылка, ЕдиницыИзмерения);
	РаботаСФормамиСервер.УстановитьОтборСписка("Номенклатура", Объект.Ссылка, ТабличноеПолеНормы);
	РаботаСФормамиСервер.УстановитьОтборСписка("Номенклатура", Объект.Ссылка, ФормыУчастия);
	РаботаСФормамиСервер.УстановитьОтборСписка("Номенклатура", Объект.Ссылка, ДействияМедосмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВнесенияНоменклатуры(Материал, ХарактеристикаМатериала, Единица, Количество)
	
	Если ХарактеристикаМатериала = Неопределено Тогда
		Объект.ХарактеристикаМатериала = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	Если Материал.ВидНоменклатуры = соотВидыНоменклатуры.Получить("Материал") Тогда
		
		КлючМатериала = ОбработкаВнесенияНоменклатурыСервер(Материал, ХарактеристикаМатериала, Единица, Количество);
		
		Элементы.ТабличноеПолеНормы.ТекущаяСтрока = КлючМатериала;
		// Указываем колонку Материал и включаем редактирование строки для обработки в процедуре ПриИзменении
		Элементы.ТабличноеПолеНормы.ТекущаяКолонка = Элементы.ТабличноеПолеНормы.Колонки.Материал;
		Элементы.ТабличноеПолеНормы.ИзменитьСтроку();
		Элементы.ТабличноеПолеНормы.ЗакончитьРедактированиеСтроки(Ложь);
		
	Иначе
		ПоказатьПредупреждение(,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Номенклатура %1 не является материалом. Допускается только подбор номенклатуры материалов.'"),
			Строка(Материал)));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработкаВнесенияНоменклатурыСервер(Материал, ХарактеристикаМатериала, Единица, Количество)
	// Заносим все измерения выбранной номенклатуры в структуру, чтобы не повторять это действие трижды
	СтруктураИзмерений = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Материал, ХарактеристикаМатериала", Объект.Ссылка, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), Материал, ХарактеристикаМатериала);
	
	ЗаписьМатериала = РегистрыСведений.НормыРасходаМатериалов.СоздатьМенеджерЗаписи();
	// Заполняем значения измерений МенеджераЗаписи регистра сведений данными из структуры
	Для Каждого ЕдиницаСтруктуры Из СтруктураИзмерений Цикл
		ЗаписьМатериала[ЕдиницаСтруктуры.Ключ] = ЕдиницаСтруктуры.Значение;
	КонецЦикла;
	ЗаписьМатериала.ЕдиницаИзмерения = Единица;
	ЗаписьМатериала.Прочитать();
	
	Если Не ЗаписьМатериала.Выбран() Тогда
		Для Каждого ЕдиницаСтруктуры Из СтруктураИзмерений Цикл
			ЗаписьМатериала[ЕдиницаСтруктуры.Ключ] = ЕдиницаСтруктуры.Значение;
		КонецЦикла;
		ЗаписьМатериала.ЕдиницаИзмерения = Единица;
		ЗаписьМатериала.Норма = 0;
	КонецЕсли;
	
	ЗаписьМатериала.Норма = ЗаписьМатериала.Норма + Количество;
	
	ЗаписьМатериала.Записать();
	// Выделяем вновь добавленную строку
	КлючМатериала = РегистрыСведений.НормыРасходаМатериалов.СоздатьКлючЗаписи(СтруктураИзмерений);
	Возврат КлючМатериала;
КонецФункции	

// Процедура обновляет информацию в таблице свойств объекта.
//
&НаСервере
Процедура ОбновитьСвойства()

	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	Свойства.ОбъектОтбораЗначений   = Объект.Ссылка;
	Свойства.ОбъектОтбораНазначений = Объект.Ссылка;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Свойства");
	ОбъектОбработки.ПрочитатьЗаполнитьСвойстваИЗначения();
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Свойства");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеНормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСопутствующиеУнаследованные(Команда)
	ОбновитьСопутствующиеУнаследованныеСервер();
КонецПроцедуры

&НаКлиенте
Процедура Свойства1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		ПараметрыФормы = Новый Структура("ОбъектОтбораЗначений", Объект.Ссылка);
		ФормаСвойства =  ПолучитьФорму("ПланВидовХарактеристик.СвойстваОбъектов.ФормаОбъекта", ПараметрыФормы);
		ФормаСвойства.открытьмодально();	
		ОбновитьСвойства();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элементы.Свойства.ТекущиеДанные.Свойство, "ТипЗначения").СодержитТип(Тип("СправочникСсылка.ХранилищеДополнительнойИнформации")) Тогда
		
		СтандартнаяОбработка=Ложь;
		
		мПараметры = Новый Структура;
		мПараметры.Вставить("Отбор", Новый Структура("Объект", Объект.Ссылка));
		
		ОткрытьФорму("Справочник.ХранилищеДополнительнойИнформации.ФормаВыбора",мПараметры,Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства1ПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияСервер.ИнвертироватьПометкуУдаления(Элемент.ТекущиеДанные.Свойство);
	ОбновитьСвойства();

КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеШтрихкодыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеМинимальныеОстаткиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	
	ПоказатьПредупреждение(,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Данный штрихкод уже назначен: ""%1"".'"),
		СокрЛП(ДанныеНоменклатуры.Номенклатура)));
	Возврат Истина;
	
КонецФункции // СШКНоменклатура()

&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
	РаботаСТорговымОборудованиемКлиент.ДобавитьШрихкодВФормеОбъекта (ЭтаФорма, Элементы.ПанельЭлемента, Объект, Штрихкод, ТипКода);
	Элементы.ТабличноеПолеШтрихкоды.Обновить();
	Элементы.ПанельЭлемента.ТекущаяСтраница = Элементы.ГруппаШтрихкоды;
	Возврат Истина;
	
КонецФункции // СШКНеизвестныйКод()

&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = Элементы.ТабличноеПолеШтрихкоды.ТекущиеДанные;

	РаботаСТорговымОборудованиемКлиент.КнопкаНовыйШрихкодНажатие(ТекущаяСтрока, Объект.Ссылка, ?(Объект.ЕдиницаТоваров.Пустая(),Объект.ЕдиницаХраненияОстатков,Объект.ЕдиницаТоваров));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПодчиненногоСправочникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВАрхивХарактеристику(Команда)

	РаботаСДиалогамиКлиент.ПоместитьВАрхив(Элементы.ТабличноеПолеХарактеристики.ВыделенныеСтроки);
	
	Элементы.ТабличноеПолеХарактеристики.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьАрхивныеХарактеристики(Команда)

	СкрытьПоказатьАрхивныеЭлементыДинамическогоСписка(Элементы.ТабличноеПолеХарактеристикиСкрытьПоказатьАрхивныеХарактеристики, ТабличноеПолеХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВАрхивСерию(Команда)

	РаботаСДиалогамиКлиент.ПоместитьВАрхив(Элементы.Серии.ВыделенныеСтроки);
	
	Элементы.Серии.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьАрхивныеСерии(Команда)

	СкрытьПоказатьАрхивныеЭлементыДинамическогоСписка(Элементы.СерииСкрытьПоказатьАрхивныеСерии, Серии);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьАрхивныеЭлементыДинамическогоСписка(КнопкаФормы, РеквизитДинамическийСписок, Показать = Неопределено)

	РаботаСДиалогамиКлиент.СкрытьПоказатьАрхивные(КнопкаФормы, РеквизитДинамическийСписок, Показать);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элементы.ТабличноеПолеЦены.ТекущиеДанные.Регистратор);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(Объект.НаименованиеПолное) 
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

&НаКлиенте
Процедура КоличествоОпределяетсяПродолжительностьюПриИзменении(Элемент)
	
	Элементы.ПродолжительностьЕдиницыУслуги.Доступность = КоличествоОпределяетсяПродолжительностью;
	Если КоличествоОпределяетсяПродолжительностью Тогда
	    Этаформа.ТекущийЭлемент = Элементы.ПродолжительностьЕдиницыУслуги;
	Иначе
		Объект.ПродолжительностьЕдиницыУслуги = 0;
	КонецЕсли;
	
КонецПроцедуры

// Дополнительные данные, которые могут быть взяты из копируемой номенклатуры:
// 		Минимальные остатки (только для материалов)
//		Формы участия (только для услуг)
//		Нормы расхода (только для услуг)
//		Свойства
&НаСервереБезКонтекста
Функция ПолучитьСписокЗаполненныхДанныеКопируемогоЗначения(КопируемаяНоменклатура)
		  
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",КопируемаяНоменклатура);					   
	
	Если КопируемаяНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	МинимальныеОстаткиНоменклатуры.Номенклатура
		               |ИЗ
		               |	РегистрСведений.МинимальныеОстаткиНоменклатуры КАК МинимальныеОстаткиНоменклатуры
		               |ГДЕ
		               |	МинимальныеОстаткиНоменклатуры.Номенклатура = &Номенклатура";
		Если Не Запрос.Выполнить().Пустой() Тогда
			Результат.Добавить("МинимальныеОстаткиНоменклатуры","Минимальные остатки", Истина);
		КонецЕсли; 
	КонецЕсли;	
	
	Если КопируемаяНоменклатура.ВидНоменклатуры  = Перечисления.ВидыНоменклатуры.Услуга Тогда

		Если Метаданные.РегистрыСведений.Найти("ТрудовыеРолиРаботИТоваров") <> Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ТрудовыеРолиРаботИТоваров.Номенклатура
			               |ИЗ
			               |	РегистрСведений.ТрудовыеРолиРаботИТоваров КАК ТрудовыеРолиРаботИТоваров
			               |ГДЕ
			               |	ТрудовыеРолиРаботИТоваров.Номенклатура = &Номенклатура";
			Если Не Запрос.Выполнить().Пустой() Тогда
				Результат.Добавить("ТрудовыеРолиРаботИТоваров","Формы участия", Истина);
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	НормыРасходаМатериалов.Номенклатура
		               |ИЗ
		               |	РегистрСведений.НормыРасходаМатериалов КАК НормыРасходаМатериалов
		               |ГДЕ
		               |	НормыРасходаМатериалов.Номенклатура = &Номенклатура";
		Если Не Запрос.Выполнить().Пустой() Тогда
			Результат.Добавить("НормыРасходаМатериалов","Нормы расхода", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗначенияСвойствОбъектов.Свойство
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Объект = &Номенклатура
	               |	И ЗначенияСвойствОбъектов.Значение <> НЕОПРЕДЕЛЕНО";
	Если Не Запрос.Выполнить().Пустой() Тогда
		Результат.Добавить("ЗначенияСвойствОбъектов","Свойства", Истина);
	КонецЕсли; 

	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетИзмененияЦен(Команда)
	
	СтрПараметры = Новый Структура("Прейскурант", Элементы.ТабличноеПолеЦены.ТекущиеДанные.Прейскурант);
	
	НастройкиИВариантОтчета = ПолучитьНастройкиИВариантОтчетаПоЦенам("ИзмененияЦенНоменклатуры", СтрПараметры, Объект.ВидНоменклатуры);
	
	ПользовательскиеНастройки = НастройкиИВариантОтчета["ПользовательскиеНастройки"];
	КлючВарианта = НастройкиИВариантОтчета["КлючВарианта"];
	
	Отбор = Новый Структура("Номенклатура", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии, КлючВарианта", Отбор, ПользовательскиеНастройки, Истина, КлючВарианта);
	
	ОткрытьФорму("Отчет.ИзмененияЦенНоменклатуры.Форма", ПараметрыФормы,, Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИВариантОтчетаПоЦенам(ИмяОтчета, СтруктураПараметров, ВидНоменклатуры)
	
	СтруктураНастроек = Новый Структура;
	ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
	
	ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
		Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ
			Тогда
				ПараметрСКД.Значение = ЭлПараметр.Значение;
				ПараметрСКД.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
		ИмяВарианта = "ПоНоменклатуре";
	ИначеЕсли ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал Тогда
		ИмяВарианта = "ПоНоменклатуреЕдИзм";
	Иначе
		ИмяВарианта = "ПоНоменклатуреЕдИзмХарактеристики";
	КонецЕсли;
	
	НастройкиИВариантОтчета = Новый Соответствие();
	НастройкиИВариантОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	НастройкиИВариантОтчета.Вставить("КлючВарианта", ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВарианта].Имя);
	
    Возврат НастройкиИВариантОтчета;
	
КонецФункции

&НаКлиенте
Процедура ТабличноеПолеЦеныПриАктивизацииСтроки(Элемент)
	Если Не Элементы.ТабличноеПолеЦены.ТекущиеДанные = Неопределено Тогда 
		Элементы.ТабличноеПолеЦеныОткрытьОтчетИзмененияЦен.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

#Область Медицина

&НаСервере
Процедура ПриСозданииНаСервереМедицина()
	Элементы.ПодготовкаКлиентаКСдачеАнализа.Видимость = Объект.Анализ;
	ОбновитьНастройкиПоляИндивидуальногоШаблона(Объект, Элементы.ИндивидуальныйШаблонОсмотра);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПредставлениеЛС()
	
	Госрегистрация =   ?(ЗначениеЗаполнено(Объект.REGNUM), Объект.REGNUM, "") 
	                 + ?(ЗначениеЗаполнено(Объект.REGDATE), ", " + Формат(Объект.REGDATE, "ДЛФ=Д"), "") 
					 + ?(ЗначениеЗаполнено(Объект.FIRM_REGISTRATOR), " от " + Объект.FIRM_REGISTRATOR, "") 
					 + ?(ЗначениеЗаполнено(Объект.COUNTRY_REGISTRATOR), " [" + Объект.COUNTRY_REGISTRATOR + "]", "");
	
	Производитель  =   ?(ЗначениеЗаполнено(Объект.FIRM_MANUFACTOR), Объект.FIRM_MANUFACTOR, "")
					 + ?(ЗначениеЗаполнено(Объект.COUNTRY_MANUFACTOR), " [" + Объект.COUNTRY_MANUFACTOR + "]", "");
					 
	ЛатНазвание    = Объект.LATNAME;
					 
	ДейстВещество  = Объект.NDV;
	
	НормДокумент   = Объект.REGCERTID;
	
	ФармДействие   = Объект.PHARMAACTIONS;
	
	Яды            = Объект.STRONG;
	
	ЖНиВЛС		   = Объект.JNVLS;
	
	Нарко          = Объект.NARCO;
	
	Элементы.НадписьГосрегистрация.Заголовок = Госрегистрация;
	Элементы.НадписьПроизводитель.Заголовок  = Производитель;
	Элементы.НадписьЛатНазвание2.Заголовок   = ЛатНазвание;
	Элементы.НадписьДействующееВещество2.Заголовок = ДейстВещество;
	Элементы.НадписьНормДокумент2.Заголовок = НормДокумент;
	Элементы.НадписьФармДействие2.Заголовок = ФармДействие;
	Элементы.НадписьЯды2.Заголовок = Строка(Яды);
	Элементы.НадписьЖНиВЛС2.Заголовок = Строка(ЖНиВЛС);
	Элементы.НадписьНарко2.Заголовок = Строка(Нарко);
	Элементы.НадписьКодКЛП2.Заголовок = Строка(Объект.КЛП);
	Элементы.НадписьАТХ2.Заголовок = Строка(Объект.АТХ);
	Элементы.НадписьНормализованнаяФорма2.Заголовок = Строка(Объект.НормализованнаяФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЛСПриИзменении(Элемент)
	
	Если НЕ РедактироватьЛС Тогда
		
		ПересчитатьПредставлениеЛС();	
		
	КонецЕсли; 
	
	Для Каждого Группа1 Из Элементы.ГруппаРеквизитовЛС.ПодчиненныеЭлементы Цикл
		
		Если Группа1.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			Для Каждого Группа2 Из Группа1.ПодчиненныеЭлементы Цикл
				
				Если Найти(Группа2.Имя, "11") <> 0 Тогда
					
					Группа2.Видимость = РедактироватьЛС;
					
				ИначеЕсли Найти(Группа2.Имя, "22") <> 0 Тогда
					
					Группа2.Видимость = НЕ РедактироватьЛС;
					
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АнализПриИзменении(Элемент)
	
	Если Объект.МедосмотрСправка Тогда
		Объект.МедосмотрСправка = Ложь;
		ОбновитьВидимостьЭлементовМедосмотра();
	КонецЕсли;
	
	Элементы.ПодготовкаКлиентаКСдачеАнализа.Видимость = Объект.Анализ;
	ПроверитьСоответствиеШаблонаПриема();
	ОбновитьНастройкиПоляИндивидуальногоШаблона(Объект, Элементы.ИндивидуальныйШаблонОсмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзмененииМедицина(ЭтоУслуга, ЭтоНабор)
	
	Элементы.Анализ.Видимость = ЭтоУслуга;
	Элементы.ИндивидуальныйШаблонОсмотра.Видимость = ЭтоУслуга И Не Объект.МедосмотрСправка;
	
	Элементы.ГруппаРеквизитовЛС.Видимость = Не (ЭтоУслуга Или ЭтоНабор);
	
	ОбновитьВидимостьЭлементовМедосмотра();
	
	Если Элементы.Найти("ГруппаОборудованиеDICOM") <> Неопределено Тогда
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "ГруппаОборудованиеDICOM",
			ЭтоУслуга И DICOMРаботаСДрайвером.ПолучитьЗначениеКонстантыИспользоватьDICOM());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНастройкиПоляИндивидуальногоШаблона(ОбъектДанныеФормы = Неопределено, ЭлементФормы = Неопределено)
	
	Заголовок = "Шаблон приема";
	ВидыШаблона = Новый Массив;
	
	Если ОбъектДанныеФормы.МедосмотрСправка Тогда
		ЭлементФормы.Видимость = Ложь;
		Заголовок = "Форма справки";
		ВидыШаблона.Добавить(ПредопределенноеЗначение("Перечисление.ВидыШаблонов.ТабличныйДокумент"));
	Иначе
		ЭлементФормы.Видимость = Истина;
		ВидыШаблона.Добавить(ПредопределенноеЗначение("Перечисление.ВидыШаблонов.HTMLШаблон"));
		ВидыШаблона.Добавить(ПредопределенноеЗначение("Перечисление.ВидыШаблонов.Обработка"));
		
		Если ОбъектДанныеФормы.Анализ Тогда
			Заголовок = "Шаблон анализа";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыбораШаблона = Новый Массив;
	ПараметрыВыбораШаблона.Добавить(Новый ПараметрВыбора("Отбор.ВидШаблона", Новый ФиксированныйМассив(ВидыШаблона)));
	
	ЭлементФормы.Заголовок = Заголовок;
	ЭлементФормы.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораШаблона);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТРУПриИзменении(Элемент)
	
	СтрокаТРУ = "";
	Для Сч = 1 По СтрДлина(Объект.КодТРУ) Цикл
		Символ = Сред(Объект.КодТРУ, Сч, 1);
		Символ = СтрЗаменить(Символ, " ", "0");
		Если Символ <> "."
			И Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ,,Ложь)
		Тогда
			Символ = "0";
		КонецЕсли;
		СтрокаТРУ = СтрокаТРУ + Символ;
	КонецЦикла;
	
	Объект.КодТРУ = Лев(СтрокаТРУ + СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("0", 30), 30);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТРУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВводТРУЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВводаТРУ", Новый Структура("КодТру", Объект.КодТРУ), Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводТРУЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.КодТРУ = Результат;	
	КонецЕсли;
	
КонецПроцедуры 

#Область Медосмотры

&НаКлиенте
Процедура МедосмотрСправкаПриИзменении(Элемент)
	
	Если Объект.Анализ Тогда
		Объект.Анализ = Ложь;
		Элементы.ПодготовкаКлиентаКСдачеАнализа.Видимость = Объект.Анализ;
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовМедосмотра();
	ПроверитьСоответствиеШаблонаПриема();
	ОбновитьНастройкиПоляИндивидуальногоШаблона(Объект, Элементы.ИндивидуальныйШаблонОсмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияМедосмотраПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовМедосмотра()
	
	ЭтоУслуга = Объект.ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга");
	
	Элементы.МедосмотрСправка.Видимость = ЭтоУслуга;
	Элементы.ГруппаМедосмотрСправка.Видимость = Объект.МедосмотрСправка И ЭтоУслуга;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеШаблонаПриема()
	
	Если ЗначениеЗаполнено(Объект.ИндивидуальныйШаблонОсмотра) Тогда
	
		ВидШаблона = ДопСерверныеФункции.ПолучитьРеквизит(Объект.ИндивидуальныйШаблонОсмотра, "ВидШаблона");
		ЭтоВидТабДок = ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблонов.ТабличныйДокумент");
		
		Если	(Объект.МедосмотрСправка И Не ЭтоВидТабДок)
			Или	(Не Объект.МедосмотрСправка И ЭтоВидТабДок)
		Тогда
			Объект.ИндивидуальныйШаблонОсмотра = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВредныйФакторСправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФиксНастройки = ПолучитьФиксНастройкиВредныеФакторы(ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура("ФиксированныеНастройки", ФиксНастройки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВредныйФакторСправкиНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПереченьВредныхФакторовИРабот.Форма.ФормаВыбораБезОтбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте 
Процедура ВредныйФакторСправкиНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ВредныйФакторСправки = Результат;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФиксНастройкиВредныеФакторы(УникальныйИдентификаторФормы)

	Схема = Новый СхемаКомпоновкиДанных;
	
	Источник = Схема.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник1";
	Источник.ТипИсточникаДанных = "local";
	
	Набор = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Набор.Запрос = "ВЫБРАТЬ * ИЗ Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот";
	Набор.Имя = "Запрос1";
	Набор.ИсточникДанных ="Источник1";
	Набор.АвтоЗаполнениеДоступныхПолей = Истина;

	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификаторФормы);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));

	Элт = КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элт.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приказ.Родитель");
	Элт.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элт.Использование = Истина;
	Элт.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ПриказыМедосмотров.СправкиИИныеМедосмотры");

	Возврат КомпоновщикНастроек.ФиксированныеНастройки

КонецФункции

&НаКлиенте
Процедура УстановкаДействийМедОсмотра(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВредныйФакторСправки) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаДействийМедОсмотраПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Вредный фактор не заполнен, создать новый?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ПоказатьЗначение(,Объект.ВредныйФакторСправки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаДействийМедОсмотраПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура("ВредныйФакторСправки", Истина);
		ОткрытьФорму("Справочник.ПереченьВредныхФакторовИРабот.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 
		ВредныйФакторСправкиНачалоВыбора(Неопределено, Неопределено, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти