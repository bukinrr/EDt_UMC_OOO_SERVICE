#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ** Установка начальных значений
	//   перед загрузкой данных из настроек на сервере
	//   для случая, когда данные ещё не были записаны и не загружаются.
	ПоказатьПодсистемыРолей = Истина;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
	// ** Подготовка постоянных данных.
	ЗаполнитьСписокТиповОбъектовАвторизации();
	
	// Удаление роли ПолныеПрава из списка выбора и таблицы ролей.
	
	// ** Заполнение изменяемых данных.
	
	Если Объект.Ссылка = Справочники.ГруппыВнешнихПользователей.ПустаяСсылка() И
	     Объект.Родитель.Ссылка = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		
		Объект.Родитель = Справочники.ГруппыВнешнихПользователей.ПустаяСсылка();
	КонецЕсли;
	
	ОпределитьДействияВФорме();
	
	// ** Установка постоянной доступности свойств.
	
	Элементы.Наименование.Видимость     = ЗначениеЗаполнено(ДействияВФорме.СвойстваЭлемента);
	Элементы.Родитель.Видимость         = ЗначениеЗаполнено(ДействияВФорме.СвойстваЭлемента);
	Элементы.Комментарий.Видимость      = ЗначениеЗаполнено(ДействияВФорме.СвойстваЭлемента);
	Элементы.Состав.Видимость           = ЗначениеЗаполнено(ДействияВФорме.СоставГруппы);
	Элементы.ОтображениеРолей.Видимость = ЗначениеЗаполнено(ДействияВФорме.Роли);
	
	ЭтоГруппаВсеВнешниеПользователи = (Объект.Ссылка = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи);
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ
	                 НЕ ЭтоГруппаВсеВнешниеПользователи И
	                 ДействияВФорме.Роли <> "Редактирование" И
	                 ДействияВФорме.СоставГруппы <> "Редактирование" И
	                 ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	
	Элементы.Наименование.ТолькоПросмотр              =     ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	Элементы.Родитель.ТолькоПросмотр                  =     ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	Элементы.Комментарий.ТолькоПросмотр               =     ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	Элементы.ВнешниеПользователиГруппы.ТолькоПросмотр =     ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СоставГруппы     <> "Редактирование";
	Элементы.Состав.ТолькоПросмотр                    =     ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СоставГруппы     <> "Редактирование";
	Элементы.СоставПодобрать.Доступность              = НЕ (ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СоставГруппы     <> "Редактирование");
	
	УстановитьТолькоПросмотрРолей(ДействияВФорме.Роли <> "Редактирование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененаГруппаВнешнихПользователей", Объект.Ссылка, ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка незаполненных и повторяющихся внешних пользователей.
	НомерСтроки = Объект.Состав.Количество()-1;
	
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
		ТекущаяСтрока = Объект.Состав.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВнешнийПользователь) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен внешний пользователь.'"),
			                                                  ,
			                                                  "Объект.Состав[" + Формат(НомерСтроки, "ЧГ=0") + "].ВнешнийПользователь",
			                                                  ,
			                                                  Отказ);
			Прервать;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", ТекущаяСтрока.ВнешнийПользователь));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Внешний пользователь повторяется.'"),
			                                                  ,
			                                                  "Объект.Состав[" + Формат(НомерСтроки, "ЧГ=0") + "].ВнешнийПользователь",
			                                                  ,
			                                                  Отказ);
			Прервать;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
		ПоказатьПодсистемыРолей = Ложь;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	Иначе
		ПоказатьПодсистемыРолей = Истина;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	КонецЕсли;
	
	СкрытьРольПолныеПрава = Истина;
	ОбновитьДеревоРолей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		ОбновитьСоставРолей(Элементы.Роли.ТекущаяСтрока, Элементы.Роли.ТекущиеДанные.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	Объект.ВсеОбъектыАвторизации = Ложь;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборРодителя");
	
	ОткрытьФорму("Справочник.ГруппыВнешнихПользователей.ФормаВыбора", ПараметрыФормы, Элементы.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаОбъектовАвторизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПредставлениеТипаОбъектовАвторизации) Тогда
		УдалитьНеТипичныеВнешниеПользователи();
	Иначе
		Объект.ВсеОбъектыАвторизации  = Ложь;
		Объект.ТипОбъектовАвторизации = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаОбъектовАвторизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйЭлемент = ВыбратьИзСписка(ТипыОбъектовАвторизации, Элемент, ТипыОбъектовАвторизации.НайтиПоЗначению(Объект.ТипОбъектовАвторизации));
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Модифицированность = Истина;
		Объект.ТипОбъектовАвторизации        = ВыбранныйЭлемент.Значение;
		ПредставлениеТипаОбъектовАвторизации = ВыбранныйЭлемент.Представление;
		
		ПредставлениеТипаОбъектовАвторизацииПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОбъектыАвторизацииПриИзменении(Элемент)
	
	Если Объект.ВсеОбъектыАвторизации Тогда
		Объект.Состав.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры


&НаКлиенте
Процедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ОбработкаВыбораВнешнегоПользователя(Значение);
		КонецЦикла;
	Иначе
		ОбработкаВыбораВнешнегоПользователя(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставВнешнийПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ** Для работы интерфейса ролей.

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = ПоказатьТолькоВыбранныеРоли;
	
	ОбновитьДеревоРолей();
	РазвернутьПодсистемыРолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодсистемыРолей(Команда)
	
	ПоказатьПодсистемыРолей = НЕ ПоказатьПодсистемыРолей;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = ПоказатьПодсистемыРолей;
	
	ОбновитьДеревоРолей();
	РазвернутьПодсистемыРолей();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ОбновитьСоставРолей(Неопределено, Истина);
	Если ПоказатьТолькоВыбранныеРоли Тогда
		РазвернутьПодсистемыРолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ОбновитьСоставРолей(Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВнешнихПользователей(Команда)

	ВыбратьПодобратьПользователей(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	// Для нового элемента показать все роли, иначе только выбранные.
	ПоказатьТолькоВыбранныеРоли                      = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = ЗначениеЗаполнено(Объект.Ссылка);
	//
	СкрытьРольПолныеПрава = Истина;
	ОбновитьДеревоРолей();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	ДействияВФорме.Вставить("Роли",                   ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("СоставГруппы",           ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("СвойстваЭлемента",       ""); // "", "Просмотр",     "Редактирование"
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ() ИЛИ
	     ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи) Тогда
		// Администратор
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.СоставГруппы           = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	ИначеЕсли РольДоступна("ДобавлениеИзменениеВнешнихПользователей") Тогда
		// Менеджер внешних пользователей.
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.СоставГруппы           = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	Иначе
		// Читатель внешних пользователей.
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.СоставГруппы           = "Просмотр";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	КонецЕсли;
	
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме.
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	ИначеЕсли ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
		ДействияВФорме.Роли = "";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СоставГруппы + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСвойств()
	
	Элементы.Состав.ТолькоПросмотр = Объект.ВсеОбъектыАвторизации;
	
	Элементы.СоставПодобрать.Доступность                = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	Элементы.КонтекстноеМенюСоставПодобрать.Доступность = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	Элементы.СоставДобавить.Доступность                 = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	Элементы.КонтекстноеМенюСоставДобавить.Доступность  = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	
	Элементы.ВсеОбъектыАвторизации.Доступность          = ЗначениеЗаполнено(ПредставлениеТипаОбъектовАвторизации) И НЕ ЗначениеЗаполнено(Объект.Родитель);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповОбъектовАвторизации()
	
	Для каждого ТипСсылкиОбъектаАвторизации Из Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.Тип.Типы() Цикл
	
		МетаданныеТипа     = Метаданные.НайтиПоТипу(ТипСсылкиОбъектаАвторизации);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипСсылкиОбъектаАвторизации);
		ОписаниеТипаСсылки = Новый ОписаниеТипов(МассивТипов);
		
		ТипыОбъектовАвторизации.Добавить(ОписаниеТипаСсылки.ПривестиЗначение(Неопределено), МетаданныеТипа.Синоним);
	КонецЦикла;
	
	
	НайденныйЭлемент = ТипыОбъектовАвторизации.НайтиПоЗначению(Объект.ТипОбъектовАвторизации);
	ПредставлениеТипаОбъектовАвторизации = ?(НайденныйЭлемент = Неопределено, "", НайденныйЭлемент.Представление);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеТипичныеВнешниеПользователи()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) <> &ТипОбъектовАвторизации
	|	И ВнешниеПользователи.Ссылка В(&ВыбранныеВнешниеПользователи)");
	Запрос.УстановитьПараметр("ВыбранныеВнешниеПользователи", Объект.Состав.Выгрузить().ВыгрузитьКолонку("ВнешнийПользователь"));
	Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипЗнч(Объект.ТипОбъектовАвторизации));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", Выборка.Ссылка));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.Состав.Удалить(Объект.Состав.Индекс(НайденнаяСтрока));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(Элементы.Состав.ТекущиеДанные = Неопределено, Неопределено, Элементы.Состав.ТекущиеДанные.ВнешнийПользователь));
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	
	Если Объект.ТипОбъектовАвторизации <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипОбъектовАвторизации", Объект.ТипОбъектовАвторизации);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, ?(Подобрать, Элементы.Состав, Элементы.СоставВнешнийПользователь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВнешнегоПользователя(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Если Объект.Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", ВыбранноеЗначение)).Количество() = 0 Тогда
			Объект.Состав.Добавить().ВнешнийПользователь = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ** Для работы интерфейса ролей.

&НаСервере
Функция КоллекцияРолей(ТаблицаЗначенийДляЧтения = Ложь)
	
	Если ТаблицаЗначенийДляЧтения Тогда
		Возврат Объект.Роли.Выгрузить();
	КонецЕсли;
	
	Возврат Объект.Роли;
	
КонецФункции

&НаСервере
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей = Неопределено, Знач РазрешитьПросмотрТолькоВыбранных = Ложь)
	
	Если ТолькоПросмотрРолей <> Неопределено Тогда
		Элементы.Роли.ТолькоПросмотр              =    ТолькоПросмотрРолей;
		Элементы.РолиУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
		Элементы.РолиСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	КонецЕсли;
	
	Если РазрешитьПросмотрТолькоВыбранных Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РазвернутьПодсистемыРолей(Коллекция = Неопределено);
	
	Если Коллекция = Неопределено Тогда
		Коллекция = Роли.ПолучитьЭлементы();
	КонецЕсли;
	
	// Развернуть все
	Для каждого Строка Из Коллекция Цикл
		Элементы.Роли.Развернуть(Строка.ПолучитьИдентификатор());
		Если НЕ Строка.ЭтоРоль Тогда
			РазвернутьПодсистемыРолей(Строка.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРолей()
	
	Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;
	
	// Запоминание текущей строки
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";
	//
	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "", ТекущиеДанные.ПолучитьРодителя().Имя);
			ТекущаяРоль       = ТекущиеДанные.Имя;
		Иначе
			ТекущаяПодсистема = ТекущиеДанные.Имя;
			ТекущаяРоль       = "";
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРолей = ПользователиСерверПовтИсп.ДеревоРолей(ПоказатьПодсистемыРолей).Скопировать();
	ДобавитьИменаНесуществующихРолей(ДеревоРолей);
	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли);
	
	ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
	
	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	
	// Восстановление текущей строки.
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема), Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];
		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеПодсистемы).Получить(ИндексПодсистемы);
		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль), Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];
			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли);
		
		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава 
				И (ВРег(Строка.Имя) = ВРег("ПолныеПрава") ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")) Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 6;
				Строка.Пометка = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;
				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 5;
				Строка.Пометка = Строка.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено, СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(СтрокаДереваЗначений.Родитель);
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево, СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат ДанныеФормыКоллекцияЭлементовДерева;
	
КонецФункции


&НаСервере
Процедура ОбновитьСоставРолей(ИдентификаторСтроки, Добавить);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		// Обработка всех
		КоллекцияРолей = КоллекцияРолей();
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
			Для каждого ОписаниеРоли Из ВсеРоли Цикл
				Если ОписаниеРоли.Имя <> "ПолныеПрава" И ОписаниеРоли.Имя <> "АдминистраторСистемы" Тогда
					КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Имя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей();
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			// Возврат
			Возврат;
			// Возврат
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(ТекущиеДанные.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(ТекущиеДанные.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПометкуВыбранныхРолей(Роли.ПолучитьЭлементы());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРоль(Знач Роль, Знач Добавить)
	
	НайденныеРоли = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Роль));
	
	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			КоллекцияРолей().Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			КоллекцияРолей().Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРолиПодсистемы(Знач Коллекция, Знач Добавить)
	
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Строка.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПометкуВыбранныхРолей(Знач Коллекция)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		Если Строка.ЭтоРоль Тогда
			Строка.Пометка = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИменаНесуществующихРолей(ДеревоРолей)
	
	// Добавление несуществующих ролей.
	Для каждого Строка Из КоллекцияРолей() Цикл
		Если ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, Строка.Роль), Истина).Количество() = 0 Тогда
			СтрокаДерева = ДеревоРолей.Строки.Вставить(0);
			СтрокаДерева.ЭтоРоль       = Истина;
			СтрокаДерева.Имя           = Строка.Роль;
			СтрокаДерева.Синоним       = "? " + Строка.Роль;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 