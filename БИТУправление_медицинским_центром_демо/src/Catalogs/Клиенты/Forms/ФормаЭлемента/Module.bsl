#Область РазделОписанияПеременных

&НаКлиенте
Перем текФамилия;
&НаКлиенте
Перем текИмя;
&НаКлиенте
Перем текОтчество;

&НаКлиенте
Перем мТекущаяФотография, мПустаяКартинка;

&НаКлиенте
Перем мВидПредставленияФИО;

&НаКлиенте
Перем мПараметрыСозданияМедКарты;

&НаКлиенте
Перем ТекущееПредставлениеКИ, ТекущийКомментарийКИ;

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	
	МедицинаПриСозданииФормы();
	
	НастроитьТабличныеЧасти(Истина);
	НастроитьРеквизиты();
	ОбновитьСвойства();
	УстановитьУсловноеОформление();
		
	ОбновитьТекстВозраст(Объект.ДатаРождения, Элементы.ДекорацияПолныхЛет);
	
	ЗаполнитьСпискиИменОтчеств();
	ЗаполнитьСписокИмен(Объект.Пол, СписокИмен, СписокОтчеств, СписокИменМ, СписокОтчествМ, СписокИменЖ, СписокОтчествЖ);
	
	// Обновить состояние счета
	Если Не Объект.Ссылка.Пустая() Тогда
		РаботаСФормамиКлиентСервер.ПолучитьОписаниеВзаиморасчетов(Объект.Ссылка,, ЭтаФорма);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Наименование)
		И Не (Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования))
	Тогда
		ЗаполнитьФиоИзНаименования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьТабличныеЧастиНаКлиенте();
	текФамилия  = Объект.Фамилия;
	текИмя		= Объект.Имя;
	текОтчество	= Объект.Отчество;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	мВидПредставленияФИО = мУчетнаяПолитика.ВидПредставленияФИО;
	
	ОтображениеИзображения();
	ИзменениеДатыСтажа();
	
	Если Не ЗначениеЗаполнено(Объект.умцМестоРаботы) Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
		Элементы.умцМестоРаботы1.ОграничениеТипа = ОписаниеТипа; 
		Если Не ЭтаФорма.ТолькоПросмотр Тогда
			Объект.умцМестоРаботы = ОписаниеТипа.ПривестиЗначение(Объект.умцМестоРаботы); 
		КонецЕсли;
		
		Элементы.умцМестоРаботы1.ВыбиратьТип = Ложь;
	Иначе
		МестоРаботыИзСправочника = (ТипЗнч(Объект.умцМестоРаботы) = Тип("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	
	ПечатьДокументовКлиент.УстановитьЗаголовокПечатнойФормы(ЭтаФорма, Ложь);

	Элементы.МаксимальнаяСуммаДолгаКлиента.Заголовок = " " + глКраткоеНаименованиеОсновнойВалюты;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Наименование)
	Тогда
		ПриИзмененииФИО();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверка формата СНИЛС
	Если Элементы.СНИЛС.Видимость
		И Не МедицинскаяДеятельностьКлиент.СНИЛС_КорректенПроверитьНаФорме(Объект.СНИЛС, Отказ, "Объект.СНИЛС")
	Тогда
		Возврат;
	КонецЕсли;

	// Проверка нового объекта на дубль
	Если Объект.Ссылка.Пустая() Тогда                              
		ДублиКлиента = ПолучитьДублиНовогоКлиента(Объект);
		Если ДублиКлиента.Количество() <> 0 Тогда
			ПараметрыФормы = Новый Структура("ДублиКлиента", ДублиКлиента);
			Ответ = ОткрытьФормуМодально("Справочник.Клиенты.Форма.РешениеОДублеКлиента", ПараметрыФормы);
			Если Ответ = "Отмена" Или Ответ = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			ИначеЕсли Ответ = "Отказ" Тогда
				Отказ = Истина;
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
				Возврат;
			ИначеЕсли ТипЗнч(Ответ) = Тип("СправочникСсылка.Клиенты") Тогда
				Отказ = Истина;
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
				Оповестить("ОтказЗаписиКлиентаДубль", Ответ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	мПараметрыСозданияМедКарты = Ложь;
	Если Объект.Ссылка.Пустая() Тогда                              
		Если Не мУчетнаяПолитика.АвтоСозданиеМедкарт
			И ЗначениеЗаполнено(мУчетнаяПолитика.ОсновнойВидМедКарт) 
		Тогда
			Если Вопрос(НСтр("ru = 'Создать новую мед. карту?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				мПараметрыСозданияМедКарты = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОграничиватьГлубинуКредитнойЛинии 
		И Объект.МаксимальнаяСуммаДолгаКлиента <> Неопределено
	Тогда
		Объект.МаксимальнаяСуммаДолгаКлиента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстОшибки = ПроверитьЗаполнениеОбязательныхРеквизитовПередЗаписью(Отказ);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	
	СвойстваИЗначенияСервер.ПодготовитьКЗаписиЗначенияСвойствВФорме(ТекущийОбъект, Свойства.СвойстваИЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НастроитьТабличныеЧастиНаКлиенте();
	ОбновитьСвойства();
	
	Полисы.Параметры.УстановитьЗначениеПараметра("Владелец",Объект.Ссылка);
	Если мПараметрыСозданияМедКарты Тогда
		ЗначенияЗаполнения = Новый Структура("Клиент, ВидКарты", Объект.Ссылка, мУчетнаяПолитика.ОсновнойВидМедКарт); 
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ФормаМедКарты = ОткрытьФорму("Справочник.МедицинскиеКарты.ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
	КонецЕсли;
	ОбновитьЗначениеУсловногоОформленияОсновнойМедкарты();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьКИНовогоПослеЗаписиНаСервере(ПараметрыЗаписи);
	
	НастроитьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФотографию" Тогда
		Если Источник = Объект.Ссылка Тогда
			Если ЗначениеЗаполнено(Параметр) Тогда 
				Объект.Фотография = Параметр;
			Иначе
				Объект.Фотография = Неопределено;
			КонецЕсли;

			ОтображениеИзображения();
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "TracksData" Тогда
		Если ВводДоступен() Тогда
			КодКарты = Неопределено;
			СМК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСМК(ЭтаФорма,  Параметр[0], СМК, Неопределено, Неопределено);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "КонтактнаяИнформацияИзменение" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ОбновитьКИ();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "РодственныеСвязиИзменение" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ОбновитьСписокВыбораЗаконногоПредставителя(Элементы.ЗаконныйПредставитель, Объект.Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "КлиентИзменен" И Параметр = Объект.Ссылка Тогда
		Прочитать();
		// Если это смена основной медкарты, то обновим индикацию основной в списке карт.
		Если ТипЗнч(Источник) = Тип("СправочникСсылка.МедицинскиеКарты") Тогда
			ОбновитьЗначениеУсловногоОформленияОсновнойМедкарты();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СохранитьАнамнез" + Строка(Объект.Ссылка) Тогда
		Прочитать();
		Объект.ПредставлениеАнамнеза = Параметр;
		Записать();
	ИначеЕсли ИмяСобытия = "ИзменениеМестонахожденияМедкарты" Тогда
		Если Параметр.Клиент = Объект.Ссылка Тогда
			Элементы.МедицинскиеКарты.Обновить();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьНовогоПолиса" Тогда
		Если Параметр.Клиент = Объект.Ссылка 
			И Не ЗначениеЗаполнено(Объект.умцОсновнойСтраховойПолис) 
		Тогда
			Объект.умцОсновнойСтраховойПолис = Параметр.Полис;
			Попытка
				Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЛекарственнаяНепереносимостьИзменение" Тогда
		Если Параметр = Объект.Ссылка Тогда
			РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ОткрытьЛекарственнуюНепереносимость", "Заголовок", МедицинскаяДеятельность.ЗаголовокКнопкиОткрытьЛекарственнуюНепереносимость(Объект.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьРеквизиты()

	СобственныйСотрудник = ЗначениеЗаполнено(Объект.Сотрудник);
	Элементы.умцСотрудник.ТолькоПросмотр = Не СобственныйСотрудник;
	
	// Настройка полей законного представителя
	Если Объект.Ссылка.Пустая()
		И Не ЗначениеЗаполнено(Объект.ЗаконныйПредставитель)
	Тогда
		Объект.ЗаконныйПредставитель = Справочники.Клиенты.ПустаяСсылка();
	КонецЕсли;		
		
	Если ТипЗнч(Объект.ЗаконныйПредставитель) = Тип("СправочникСсылка.Клиенты") Тогда
		ЗаконныйПредставительВыборТипа = 1
	ИначеЕсли ТипЗнч(Объект.ЗаконныйПредставитель) = Тип("Строка") Тогда
		ЗаконныйПредставительВыборТипа = 2;
	Иначе
		ЗаконныйПредставительВыборТипа = 0; // Не выбран.
	КонецЕсли;
	Элементы.ЗаконныйПредставительТелефон.Видимость = ЗаконныйПредставительВыборТипа = 2;
	
	Если Объект.Пол = Перечисления.ПолФизическихЛиц.НеУказан
		И Элементы.Пол.СписокВыбора.НайтиПоЗначению(Перечисления.ПолФизическихЛиц.НеУказан) = Неопределено
	Тогда
		Элементы.Пол.СписокВыбора.Добавить(Перечисления.ПолФизическихЛиц.НеУказан);
	КонецЕсли;
	
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("МаксимальнаяСуммаДолгаКлиента") = Неопределено Тогда
		Элементы.ГруппаМаксСуммаДолгаКлиента.Видимость = Ложь;
	Иначе
		Элементы.ГруппаМаксСуммаДолгаКлиента.ТолькоПросмотр = Не ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные().Реквизиты.МаксимальнаяСуммаДолгаКлиента);
		ОграничиватьГлубинуКредитнойЛинии = ТипЗнч(Объект.МаксимальнаяСуммаДолгаКлиента) = Тип("Число");
		Элементы.МаксимальнаяСуммаДолгаКлиента.Доступность = ОграничиватьГлубинуКредитнойЛинии;
	КонецЕсли;
	
	// Локализация
	ОсновнаяСтрана = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнаяСтрана");
	Если ОсновнаяСтрана = Справочники.СтраныМира.Россия Тогда
		Элементы.СНИЛС.Маска = МедицинскоеСтрахованиеКлиентСервер.МаскаСНИЛС();
	ИначеЕсли ЗначениеЗаполнено(ОсновнаяСтрана) Тогда
		Элементы.СНИЛС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТабличныеЧасти(ПриСозданииФормы = Ложь)
		
	Если ПриСозданииФормы Тогда
		
		мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	    Элементы.ГруппаШтрихкоды.Видимость = мУчетнаяПолитика.ИспользоватьШтрихкодированиеКлиентов;
		Элементы.ГруппаКартыСкидок.Видимость = мУчетнаяПолитика.ИспользоватьКартыСкидок;
		РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, "Профосмотры", ИспользуютсяПрофосмотры);
 		
		Если Элементы.Найти("МедицинскиеКартыМестонахождение") <> Неопределено Тогда
			Элементы.МедицинскиеКартыМестонахождение.Видимость = мУчетнаяПолитика.ВестиУчетМестонахожденияМедкарт;
			Элементы.МедицинскиеКартыКлиника.Видимость = мУчетнаяПолитика.ВестиУчетМестонахожденияМедкарт;
		КонецЕсли;
		
		ВзаимодействияСКлиентом.ТекстЗапроса = CRMСервер.ПолучитьТекстЗапросаСпискаВзаимодействийСКлиентом();
		Если ПустаяСтрока(ВзаимодействияСКлиентом.ТекстЗапроса) Тогда
			Элементы.ВзаимодействияСКлиентом.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтактнаяИнформацияСерверПереопределяемый.ЗаполнитьТаблицуКИОбъекта(КонтактнаяИнформация, Объект.Ссылка);

	Полисы.Параметры.УстановитьЗначениеПараметра("Владелец",Объект.Ссылка);
	Полисы.Параметры.УстановитьЗначениеПараметра("ТекущаяДата",КонецДня(ТекущаяДата()));
	ВзаимодействияСКлиентом.Параметры.УстановитьЗначениеПараметра("Клиент", Объект.Ссылка);
	
	// Настройка выпадающего списка поля законного представителя
	ОбновитьСписокВыбораЗаконногоПредставителя(Элементы.ЗаконныйПредставитель, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТабличныеЧастиНаКлиенте()
	
	РаботаСФормамиКлиент.УстановитьОтборСписка("Объект",	Объект.Ссылка, ТабличноеПолеДатыОбъекта);
	РаботаСФормамиКлиент.УстановитьОтборСписка("Владелец",	Объект.Ссылка, Штрихкоды);
	РаботаСФормамиКлиент.УстановитьОтборСписка("Владелец",	Объект.Ссылка, МагнитныеКарты);
	РаботаСФормамиКлиент.УстановитьОтборСписка("ФизЛицо",	Объект.Ссылка, ПаспортныеДанные);
	РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент",	Объект.Ссылка, Договоры);
	РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент",	Объект.Ссылка, МедицинскиеКарты);
	РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент",	Объект.Ссылка, СвязанныеКлиенты);
	РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент",	Объект.Ссылка, ЛьготыКлиента);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("ВладелецКарты", Объект.Ссылка, КартыСкидок);
	Иначе
		РаботаСФормамиКлиент.УстановитьОтборСписка("ВладелецКарты", 0, КартыСкидок);
	КонецЕсли;
	
	Если ИспользуютсяПрофосмотры Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент", Объект.Ссылка, ЭтаФорма["ВредныеФакторыИРаботы"]);
	КонецЕсли;
	
	// CRM
	Если Объект.Ссылка.Пустая() Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент", Неопределено, СписокСобытий);
	Иначе
		РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент", Объект.Ссылка, СписокСобытий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
&НаСервере
Процедура ОбновитьСвойства()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	Свойства.ОбъектОтбораЗначений   = Объект.Ссылка;
	Свойства.ОбъектОтбораНазначений = Объект.Ссылка;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Свойства");
	ОбъектОбработки.ПрочитатьЗаполнитьСвойстваИЗначения();
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Свойства");	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиИменОтчеств()

	Макет = Справочники.Клиенты.ПолучитьМакет("СтандартныеИменаОтчестваРФ");	
	СписокИменМ = Макет.ПолучитьОбласть("ИменаМ").ПолучитьТекст();
	СписокИменМ = СтрЗаменить(СписокИменМ, "#Область ИменаМ" + Символы.ПС, "");
	СписокИменМ = СтрЗаменить(СписокИменМ, Символы.ПС + "#КонецОбласти" + Символы.ПС, "");
	
	СписокИменЖ = Макет.ПолучитьОбласть("ИменаЖ").ПолучитьТекст();
	СписокИменЖ = СтрЗаменить(СписокИменЖ, "#Область ИменаЖ" + Символы.ПС, "");
	СписокИменЖ = СтрЗаменить(СписокИменЖ, Символы.ПС + "#КонецОбласти" + Символы.ПС, "");
	
	СписокОтчествМ = Макет.ПолучитьОбласть("ОтчестваМ").ПолучитьТекст();
	СписокОтчествМ = СтрЗаменить(СписокОтчествМ, "#Область ОтчестваМ" + Символы.ПС, "");
	СписокОтчествМ = СтрЗаменить(СписокОтчествМ, Символы.ПС + "#КонецОбласти", "");
	
	СписокОтчествЖ = Макет.ПолучитьОбласть("ОтчестваЖ").ПолучитьТекст();
	СписокОтчествЖ = СтрЗаменить(СписокОтчествЖ, "#Область ОтчестваЖ" + Символы.ПС, "");
	СписокОтчествЖ = СтрЗаменить(СписокОтчествЖ, Символы.ПС + "#КонецОбласти", "");	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФиоИзНаименования()
	
	Наименование = Объект.Наименование;
	МассивФИО = СтрРазделить(Наименование, " ");
	
	Если МассивФИО.Количество()>=1 Тогда
		Объект.Фамилия = Трег(МассивФИО[0]);
	КонецЕсли;
	Если МассивФИО.Количество()>=2 Тогда
		Объект.Имя =Трег(МассивФИО[1]);
	КонецЕсли;
	Если МассивФИО.Количество()>=3 Тогда
		Объект.Отчество = Трег(МассивФИО[2]);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокИмен(Пол = Неопределено, СписокИмен, СписокОтчеств, СписокИменМ, СписокОтчествМ, СписокИменЖ, СписокОтчествЖ)
	
	Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		
		МассивИмен		= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокИменМ, Символы.ПС);
		МассивОтчеств	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокОтчествМ, Символы.ПС);
		
	ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		
		МассивИмен		= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокИменЖ, Символы.ПС);
		МассивОтчеств	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокОтчествЖ, Символы.ПС);
		
	Иначе
		
		СписокИменМЖ	= СписокИменМ + Символы.ПС + СписокИменЖ;
		СписокОтчествМЖ	= СписокОтчествМ + Символы.ПС + СписокОтчествЖ;
		
		МассивИмен	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокИменМЖ, Символы.ПС);
		МассивОтчеств	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокОтчествМЖ, Символы.ПС);
		
	КонецЕсли;
		
	СписокИмен.ЗагрузитьЗначения(МассивИмен);
	СписокОтчеств.ЗагрузитьЗначения(МассивОтчеств);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуСДиска()
	
	АдресВХранилище = "";
	ВыбранноеИмяФайла = "";
	
	Если ПоместитьФайл(АдресВХранилище, , ВыбранноеИмяФайла, , УникальныйИдентификатор) Тогда 
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		
		ИмяФайлаКартинки = Файл.Имя;
		СсылкаНаКартинку = АдресВХранилище;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСДиска(Команда)
	ЗагрузитьКартинкуСДиска();
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеИзображения()
	
	Если ТипЗнч(объект.Фотография) = Тип("Строка")  Тогда
		Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ХранитьФотоКлиентовКакФайлы") Тогда
			Попытка
				СсылкаНаКартинку = ПоместитьВоВременноеХранилище( Новый Картинка(объект.Фотография), УникальныйИдентификатор); 
			Исключение
				СсылкаНаКартинку = "";
			КонецПопытки;
		Иначе
			СсылкаНаКартинку = Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.Фотография) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда	
		ПутьКФайлу = РаботаСФайламиКлиент.ОткрытьФайл(Объект.Фотография, , , Истина);
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			ДанныеКартинки = Новый Картинка(ПутьКФайлу);
			СсылкаНаКартинку = ПоместитьВоВременноеХранилище(ДанныеКартинки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		СсылкаНаКартинку = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Фамилия.
//
&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	Объект.Фамилия = ВРег(Лев(Объект.Фамилия, 1)) + Сред(Объект.Фамилия, 2);
	ПриИзмененииФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	Объект.Имя = ВРег(Лев(Объект.Имя,1))+ Сред(Объект.Имя,2);
	ПриИзмененииФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Текст = Объект.Имя;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Текст)
		И мУчетнаяПолитика.АвтоподстановкаИмениОтчества
	Тогда
		
		ДанныеВыбора = ЗаполнитьДанныеВыбораИмяОтчества(Текст, СписокИмен);
	    Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	Объект.Отчество = ВРег(Лев(Объект.Отчество,1))+ Сред(Объект.Отчество,2);
	ПриИзмененииФИО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Текст = Объект.Отчество;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Текст)
		И мУчетнаяПолитика.АвтоподстановкаИмениОтчества
	Тогда
		
		ДанныеВыбора = ЗаполнитьДанныеВыбораИмяОтчества(Текст, СписокОтчеств);
	    Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	ОбновитьТекстВозраст(Объект.ДатаРождения, Элементы.ДекорацияПолныхЛет);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолПриИзменении(Элемент)
	
	ЗаполнитьСписокИмен(Объект.Пол, СписокИмен, СписокОтчеств, СписокИменМ, СписокОтчествМ, СписокИменЖ, СписокОтчествЖ);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеВыбораИмяОтчества(Текст, Список)

	КоличествоСимволов = СтрДлина(Текст);
	
	НовыйМассив = Новый Массив;
	
	Для Каждого Строка Из Список Цикл
		Если Нрег(Лев(Строка, КоличествоСимволов)) = Нрег(Текст) Тогда
			НовыйМассив.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
	спЗначений = Новый СписокЗначений();
	спЗначений.ЗагрузитьЗначения(НовыйМассив);
	Возврат спЗначений;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстВозраст(ДатаРождения, ДекорацияПолныхЛет)
	
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		
		ТекущийЗаголовок = ДекорацияПолныхЛет.Заголовок;
		НовыйЗаголовок	 = ОбщегоНазначенияКлиентСервер.ПолучитьВозрастСтрокой(ДатаРождения);
		Если НовыйЗаголовок <> ТекущийЗаголовок Тогда
			ДекорацияПолныхЛет.Заголовок = НовыйЗаголовок;
		КонецЕсли;
	Иначе
		ДекорацияПолныхЛет.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеОбязательныхРеквизитовПередЗаписью(Отказ)
	
	// Проверка заполненности обязательных полей элемента
	ОбъектСтруктура = ОбщегоНазначенияСервер.ПолучитьРеквизитыСсылки(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ОбъектСтруктура, Объект);
	ОбъектСтруктура.Вставить("Ссылка", Объект.Ссылка);
	
	// Дополнение контактной информацией на форме.
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		ДанныеПоля = РегистрыСведений.ОбязательныеРеквизитыОбъектов.ОписаниеПроверяемогоВидаКИ(СтрокаКИ.Вид);
		ОбъектСтруктура.Вставить(ДанныеПоля.ИмяРеквизита, СтрокаКИ.Представление);	
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			ОбъектСтруктура.Вставить("КонтактнаяИнформацияТелефон", СтрокаКИ.Представление);	
		КонецЕсли;
	КонецЦикла;
	
	ТекстОшибки = РегистрыСведений.ОбязательныеРеквизитыОбъектов.ПроверитьЗаполненностьОбязательныхРеквизитов(ОбъектСтруктура, Объект.Ссылка.Пустая(), Отказ);
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура Свойства1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ОбъектОтбораЗначений", Объект.Ссылка);
	ФормаСвойства =  ПолучитьФорму("ПланВидовХарактеристик.СвойстваОбъектов.ФормаОбъекта", ПараметрыФормы);
	ФормаСвойства.открытьмодально();	
	ОбновитьСвойства();
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Элементы.Свойства.ТекущиеДанные.Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		СтандартнаяОбработка = Ложь;
		
		мПараметры = Новый Структура;
		мПараметры.Вставить("Отбор", Новый Структура("Владелец", Элементы.Свойства.ТекущиеДанные.Свойство));
		Значение = ПолучитьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора",мПараметры).ОткрытьМодально();
		Если ЗначениеЗаполнено(Значение) Тогда
			Элементы.Свойства.ТекущиеДанные.Значение = Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства1ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ОбщегоНазначенияСервер.ИнвертироватьПометкуУдаления(Элемент.ТекущиеДанные.Свойство);
	ОбновитьСвойства();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКИ()

	КИКопия = КонтактнаяИнформация;
	КонтактнаяИнформацияСерверПереопределяемый.ЗаполнитьТаблицуКИОбъекта(КИКопия, Объект.Ссылка);
	КопироватьДанныеФормы(КИКопия, КонтактнаяИнформация);		
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКИНовогоПослеЗаписиНаСервере(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоНовый
		И КонтактнаяИнформация.Количество() > 0
	Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
		
		Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
			
			Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаКИ);
				Запись.Объект = Объект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КИЗвонокSkype(Команда)
	
	ТекущиеДанные = Элементы.КонтактнаяИнформация.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		КонтактнаяИнформацияКлиент.ВыполнитьКомандуSkype(ТекущиеДанные.Представление, ЭтотОбъект, Элементы.КонтактнаяИнформацияПредставление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Элементы.КонтактнаяИнформацияКИЗвонокSkype.Доступность = (Элемент.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	Если ТекущееПредставлениеКИ <> Элементы.КонтактнаяИнформация.ТекущиеДанные.Представление
		И Не Объект.Ссылка.Пустая()
	Тогда
		КонтактнаяИнформацияКлиент.ЗаписатьНаФормеСтрокуКИ(Элементы.КонтактнаяИнформация.ТекущиеДанные);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтотОбъект) Тогда
		КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломИзменения(Элементы.КонтактнаяИнформация, ЭтотОбъект, Объект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияКомментарийПриИзменении(Элемент)
	
	Если ТекущийКомментарийКИ <> Элементы.КонтактнаяИнформация.ТекущиеДанные.Комментарий
		И Не Объект.Ссылка.Пустая()
	Тогда
		КонтактнаяИнформацияКлиент.ЗаписатьНаФормеСтрокуКИ(Элементы.КонтактнаяИнформация.ТекущиеДанные);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломДобавления(Элемент, Отказ, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.КонтактнаяИнформация.ТекущиеДанные;
	Если Не ТекущиеДанные.РедактируетсяВФормеОбъекта Тогда
		Отказ = Истина;
		КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломИзменения(Элементы.КонтактнаяИнформация, ЭтаФорма, Объект);
	Иначе
		ТекущееПредставлениеКИ	 = ТекущиеДанные.Представление;
		ТекущийКомментарийКИ	 = ТекущиеДанные.Комментарий;
		
		Если ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			Элементы.КонтактнаяИнформацияПредставление.Маска = ТекущиеДанные.МаскаВводаТелефонногоНомера;
			ТекущиеДанные.ИспользоватьМаскуВвода = (Элементы.КонтактнаяИнформацияПредставление.Маска <> "");
		Иначе
			Элементы.КонтактнаяИнформацияПредставление.Маска = "";
			ТекущиеДанные.ИспользоватьМаскуВвода = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КИСоздать(Команда)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломДобавления(Элементы.КонтактнаяИнформация, Ложь, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КИИзменить(Команда)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломИзменения(Элементы.КонтактнаяИнформация, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура КИУдалить(Команда)
	
	Если КонтактнаяИнформацияКлиент.УдалитьКИ(Объект, Элементы.КонтактнаяИнформация) Тогда
		ОбновитьКИ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КИОсновная(Команда)
	
	ТекущиеДанные = Элементы.КонтактнаяИнформация.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Представление)
	Тогда
		// Устанавливаем информацию по умолчанию.
		Если ТекущиеДанные.ЗначениеПоУмолчанию = Ложь Тогда
			
			ОписаниеКИ = Новый Структура;
			ОписаниеКИ.Вставить("Тип", ТекущиеДанные.Тип);
			ОписаниеКИ.Вставить("Вид", ТекущиеДанные.Вид);
			ОписаниеКИ.Вставить("Представление", ТекущиеДанные.Представление);
		Иначе
			// Сбрасываем информацию по умолчанию, если она была ранее выбрана как по умолчанию.
			ОписаниеКИ = Неопределено;
		КонецЕсли;
		
		КонтактнаяИнформацияСервер.СброситьОсновнуюЗапись(Объект.Ссылка, ОписаниеКИ);
		ТекущиеДанные.ЗначениеПоУмолчанию = Не ТекущиеДанные.ЗначениеПоУмолчанию;
		
		// Сброс на форме признака ЗначениеПоУмолчанию у остальных строк этого же типа КИ.
		Если ТекущиеДанные.ЗначениеПоУмолчанию  Тогда
			Для Каждого СтрокаКИ Из КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", ТекущиеДанные.Тип)) Цикл
				Если СтрокаКИ.Вид <> ТекущиеДанные.Вид Тогда
					СтрокаКИ.ЗначениеПоУмолчанию = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УОМедкарт = МедицинскиеКарты.УсловноеОформление.Элементы;
	УОМедкарт.Очистить();
	ЭлементУО = УОМедкарт.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый  Шрифт(, , Истина, , , , ) );
	
	ЭлементУсловия  = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Объект.ОсновнаяМедицинскаяКарта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНажатие(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьИсториюПосещений();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФотографияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаФайловДокумента = ПолучитьФорму("ОбщаяФорма.ФормаФайлов", Новый Структура("Владелец, ВключатьПредпросмотр, ВыборФотоКлиента, ВыводитьИерархию", Объект.Ссылка, Истина, Истина, Истина));
	ФормаФайловДокумента.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйШтрихКод(Команда)
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Штрихкоды.ТекущиеДанные;
	
	РаботаСТорговымОборудованиемКлиент.КнопкаНовыйШрихкодНажатие(ТекущаяСтрока, Объект.Ссылка);
    Элементы.Штрихкоды.Обновить();
КонецПроцедуры

&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		РаботаСТорговымОборудованиемКлиент.ДобавитьШрихкодВФормеОбъекта(ЭтаФорма, Элементы.ПанельФормы, Объект, Штрихкод, ТипКода);
		Элементы.Штрихкоды.Обновить();
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции // СШКНеизвестныйКод()

&НаКлиенте
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		РаботаСТорговымОборудованиемСервер.ДобавитМагнитныйКодСервер(Объект.Ссылка, Код);
		Элементы.МагнитныеКарты.Обновить();
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // СМКНеизвестныйКод()

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений;
		
		Если НЕ ПустаяСтрока(Объект.Фамилия) Тогда
			СписокВыбора.Добавить(СокрЛП(Объект.Фамилия));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Объект.Фамилия) И НЕ ПустаяСтрока(Объект.Имя) Тогда
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Объект.Имя)));
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Сред(Объект.Имя,1,1)) + "."));
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(Объект.Фамилия) И НЕ ПустаяСтрока(Объект.Имя) И НЕ ПустаяСтрока(Объект.Отчество) Тогда
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Объект.Имя) + " " + СокрЛП(Объект.Отчество)));
			СписокВыбора.Добавить((СокрЛП(Объект.Фамилия) + " " + СокрЛП(Сред(Объект.Имя,1,1)) + "." + СокрЛП(Сред(Объект.Отчество,1,1)) + "."));
		КонецЕсли; 
		
		ДанныеВыбора = СписокВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФИО()
	
	Объект.Наименование = РаботаСКлиентамиПереопределяемый.ПредставлениеПоФИО(Объект.Фамилия, Объект.Имя, Объект.Отчество, мВидПредставленияФИО);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) 
		Или Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.НеУказан") 
		Или Объект.Ссылка.Пустая() 
	Тогда
		Объект.Пол = УниверсальныеМеханизмыСервер.ОпределитьПол(Объект.Имя, Объект.Фамилия, Объект.Отчество);
		ЗаполнитьСписокИмен(Объект.Пол, СписокИмен, СписокОтчеств, СписокИменМ, СписокОтчествМ, СписокИменЖ, СписокОтчествЖ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьДокумент(Команда)
	
	ТекущиеДанные = Элементы.ИсторияПосещений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПосещенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияПосещений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	
	Отказ = НЕ РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если Отказ = Ложь Тогда
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект", Объект.Ссылка));
		ОткрытьФорму("Задача.ЗадачиПользователя.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ДанныеСтроки(ВыбраннаяСтрока).Документ);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокДокументовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого СтрокаСписка Из Строки Цикл
		Если СтрокаСписка.Значение.Данные.ДатаФактНеизвестна = Истина Тогда
			Попытка 
				СтрокаСписка.Значение.Оформление["ДатаСобытия"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
				СтрокаСписка.Значение.Оформление["Документ"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;			
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Команда)
	
	Элементы.ВзаимодействияСКлиентом.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолисОсновной(Команда)
	
	Если Объект.умцОсновнойСтраховойПолис = Элементы.Полисы.ТекущаяСтрока Тогда
		Объект.умцОсновнойСтраховойПолис = Неопределено;
	Иначе
		// Проверяем, можно ли этот полис сделать основным
		Если Не Элементы.Полисы.ТекущиеДанные.НеДействителен Тогда
			Объект.умцОсновнойСтраховойПолис = Элементы.Полисы.ТекущаяСтрока;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Нельзя установить основным не действительный полис'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолисыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = НЕ РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если Не Отказ И Не Копирование Тогда
		ЗначенияЗаполнения = Новый Структура("Владелец", Объект.Ссылка);
		ОткрытьФорму("Справочник.СтраховыеПолисы.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолисыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Найти("ПолисыСправочникКлиентыСоздатьГарантийноеПисьмо") <> Неопределено Тогда
		Элементы.ПолисыСправочникКлиентыСоздатьГарантийноеПисьмо.Доступность = Элемент.ТекущиеДанные <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаМедкартаОсновная(Команда)
	
	Если Элементы.МедицинскиеКарты.ТекущиеДанные <> Неопределено Тогда
		Если Объект.ОсновнаяМедицинскаяКарта = Элементы.МедицинскиеКарты.ТекущаяСтрока Тогда
			Объект.ОсновнаяМедицинскаяКарта = Неопределено;
			ОбновитьЗначениеУсловногоОформленияОсновнойМедкарты()
		Иначе
			// Установка новой основной карты
			Если Не ЗначениеЗаполнено(Элементы.МедицинскиеКарты.ТекущиеДанные.ДатаЗакрытия)
				Или Элементы.МедицинскиеКарты.ТекущиеДанные.ДатаЗакрытия > ТекущаяДата() 
			Тогда
				Объект.ОсновнаяМедицинскаяКарта = Элементы.МедицинскиеКарты.ТекущаяСтрока;
				ОбновитьЗначениеУсловногоОформленияОсновнойМедкарты()
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Нельзя установить основной закрытую карту'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеУсловногоОформленияОсновнойМедкарты()
	МедицинскиеКарты.УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение = Объект.ОсновнаяМедицинскаяКарта;
КонецПроцедуры

&НаКлиенте
Процедура КомандаМедкартаТитульныйЛист(Команда)
	
	ТекущиеДанные = Элементы.МедицинскиеКарты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		МедицинскаяДеятельностьКлиент.НапечататьМедкарту(ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВыдатьКарту(Команда)
	
	ТекущиеДанные = Элементы.МедицинскиеКарты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура("МедКарта, ВозвратКарты, Клиника", 
											Элементы.МедицинскиеКарты.ТекущаяСтрока,
											ТекущиеДанные.Местонахождение <> "В регистратуре",
											Неопределено);
		
		ФормаММ = ПолучитьФорму("ОбщаяФорма.ФормаМестонахожденияМедкарты", ПараметрыОткрытия);
		ФормаММ.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДатыОбъектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МедицинскиеКартыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Справочник.МедицинскиеКарты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	                                            
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ); 
КонецПроцедуры

&НаКлиенте
Процедура МагнитныеКартыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура КартыСкидокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СписокСобытийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДублиНовогоКлиента(Знач Объект)
	
	СтруктураСправочника = ОбщегоНазначенияСервер.ПолучитьРеквизитыСсылки(Справочники.Клиенты.ПустаяСсылка());
	СтруктураСправочника.Вставить("Ссылка");
	ЗаполнитьЗначенияСвойств(СтруктураСправочника, Объект);
	
	Возврат Справочники.Клиенты.ПолучитьДублирующихКлиентов(СтруктураСправочника);
	
КонецФункции

&НаКлиенте
Процедура КомандаОбновитьСостояниеСчета(Команда)
	
	ОбновитьСостояниеСчета();
	
КонецПроцедуры    

&НаКлиенте
Процедура ОбновитьСостояниеСчета()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		РаботаСФормамиКлиентСервер.ПолучитьОписаниеВзаиморасчетов(Объект.Ссылка,, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПросмотрЭМК(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Клиент, Медицинскаякарта", Объект.Ссылка, Объект.ОсновнаяМедицинскаяКарта);
	ОткрытьФорму("Обработка.ПросмотрМедКарт.Форма.ФормаАмбулаторнаяМК", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#Область БИТ_Phone // БИТ:Phone

&НаКлиенте
Процедура ПрослушатьЗвонок(Команда)
	ТДСписокСобытий = Элементы.СписокСобытий.ТекущиеДанные;
	Если ТДСписокСобытий <> Неопределено Тогда
		Если ТДСписокСобытий.ВидСобытия <> ПредопределенноеЗначение("Перечисление.ВидыСобытий.ВходящийЗвонок") 
			И ТДСписокСобытий.ВидСобытия <> ПредопределенноеЗначение("Перечисление.ВидыСобытий.ИсходящийЗвонок")
			Тогда
			Возврат;
		Иначе
			Если ЗначениеЗаполнено(ТДСписокСобытий.ЗаписьРазговора) Тогда
				бит_БитфонКлиент.ВоспроизвестиЗаписьРазговора(ТДСписокСобытий.ЗаписьРазговора);	
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Не удалось найти путь к записи разговора.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область МестоРаботы

&НаКлиенте
Процедура ИзменениеФорматаВводаМестаРаботы()
	
	ОписаниеТипа = ?(МестоРаботыИзСправочника, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), Новый ОписаниеТипов("Строка"));
	Элементы.умцМестоРаботы1.ОграничениеТипа = ОписаниеТипа; 
	
	Объект.умцМестоРаботы = ОписаниеТипа.ПривестиЗначение(Объект.умцМестоРаботы); 
	
	Элементы.умцМестоРаботы1.ВыбиратьТип = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СобственныйСотрудникПриИзменении(Элемент)
	Если СобственныйСотрудник Тогда
		ЭтаФорма.Элементы.умцСотрудник.ТолькоПросмотр = Ложь;
	Иначе
		ЭтаФорма.Элементы.умцСотрудник.ТолькоПросмотр = Истина;
		Объект.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаконныйПредставительВыборТипаПриИзменении(Элемент)
	
	Если ЗаконныйПредставительВыборТипа = 1 Тогда
		Объект.ЗаконныйПредставитель = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");	
	Иначе
		Объект.ЗаконныйПредставитель = "";
	КонецЕсли;
	Элементы.ЗаконныйПредставительТелефон.Видимость = ЗаконныйПредставительВыборТипа = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаконныйПредставительПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ЗаконныйПредставитель) = Тип("СправочникСсылка.Клиенты") Тогда		
		ЗаконныйПредставительВыборТипа = 1
	Иначе
		ЗаконныйПредставительВыборТипа = 2;
	КонецЕсли;
	Элементы.ЗаконныйПредставительТелефон.Видимость = ЗаконныйПредставительВыборТипа = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьЗвонок(Команда)
	Если РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Если ОбщегоНазначения.ЕстьПравоДоступа("Добавление", "Документ.Событие") Тогда
			ЗначенияЗаполнения = Новый Структура("Клиент, ВидСобытия", 
				Объект.Ссылка, ПредопределенноеЗначение("Перечисление.ВидыСобытий.ИсходящийЗвонок"));
			ОткрытьФорму("Документ.Событие.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения",ЗначенияЗаполнения));
		Иначе
			ПоказатьПредупреждение(,НСтр("ru='Нет права на добавление документа.'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеКлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	РаботаСДиалогамиКлиент.ПередНачаломДобавленияВПодчиненныйСписокНаФормеОбъекта(ЭтаФорма, Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеКлиентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.НетОбратнойСвязиНоВозможна 
		И Поле = Элементы.СвязанныеКлиентыНетОбратнойСвязиНоВозможна
	Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Объект.Пол <> Неопределено Тогда
			ТипОбратнойСвязи = РаботаСКлиентами.ПолучитьОтветнуюРодственнуюСвязь(ТекущиеДанные.ТипСвязи, Объект.Пол);
		Иначе
			ТипОбратнойСвязи = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Клиент, Клиент2, ТипСвязи", ТекущиеДанные.Клиент2, Объект.Ссылка, ТипОбратнойСвязи));
		ОткрытьФорму("РегистрСведений.СвязиМеждуКлиентами.ФормаЗаписи", ПараметрыФормы);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Клиент2) = Тип("СправочникСсылка.Клиенты")
			И Поле = Элементы.СвязанныеКлиентыКлиент2
	Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ТекущиеДанные.Клиент2);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура СвязанныеКлиентыПередУдалением(Элемент, Отказ)
	
	Если Не Элемент.ТекущиеДанные.НетОбратнойСвязиНоВозможна Тогда
		
		Клиент2 = Элемент.ТекущиеДанные.Клиент2;
		
		ТекстВопроса = НСтр("ru='Удалить так же связь между %1 и %2?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса,Клиент2,Объект.Ссылка);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			РаботаСКлиентами.УдалитьРодственнуюСвязь(Клиент2,Объект.Ссылка);	
		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеКлиентыПослеУдаления(Элемент)
	
	ОбновитьСписокВыбораЗаконногоПредставителя(Элементы.ЗаконныйПредставитель, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораЗаконногоПредставителя(ЭлементЗаконныйПредставитель, КлиентСсылка)
	
	СписокВыбора = ЭлементЗаконныйПредставитель.СписокВыбора;
	СписокВариантов = ПолучитьСписокВыбораЗаконногоПредставителя(КлиентСсылка);
	СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокВариантов Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	ЭлементЗаконныйПредставитель.КнопкаСпискаВыбора = СписокВыбора.Количество() <> 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораЗаконногоПредставителя(Клиент)
	
	Результат = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Клиент) Тогда
		
		СвязиЭтогоКлиента = РегистрыСведений.СвязиМеждуКлиентами.СоздатьНаборЗаписей();
		СвязиЭтогоКлиента.Отбор.Клиент.Установить(Клиент);
		СвязиЭтогоКлиента.Прочитать();
		
		СвязиСЭтимКлиентом = РегистрыСведений.СвязиМеждуКлиентами.СоздатьНаборЗаписей();
		СвязиСЭтимКлиентом.Отбор.Клиент2.Установить(Клиент);
		СвязиСЭтимКлиентом.Прочитать();
		ТаблицаСвязиСЭтимКлиентом = СвязиСЭтимКлиентом.Выгрузить();
		Отбор = Новый Структура("Клиент");
		
		Для Каждого Запись Из СвязиЭтогоКлиента Цикл
			
			Родство = "";
			Если ТипЗнч(Запись.Клиент2) = Тип("СправочникСсылка.Клиенты") Тогда
				СтрокаТаблицы = ТаблицаСвязиСЭтимКлиентом.Найти(Запись.Клиент2, "Клиент");
				Если СтрокаТаблицы <> Неопределено Тогда
					Родство = Строка(СтрокаТаблицы.ТипСвязи);
				КонецЕсли;
			КонецЕсли;
			
			Результат.Добавить(Запись.Клиент2, Строка(Запись.Клиент2) + ?(ЗначениеЗаполнено(Запись.ТипСвязи), " (" + Родство + ")",""));
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИсториюПосещений()
	
	КопияРеквизита = ИсторияПосещений;
	ПолучитьИсториюПосещений(Объект.Ссылка, КопияРеквизита);
	КопироватьДанныеФормы(КопияРеквизита, ИсторияПосещений);
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ПолучитьИсториюПосещений(Клиент, РеквизитИсторияПосещений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.Сотрудник КАК Сотрудник,
	|	ПродажиОбороты.КоличествоОборот КАК Количество,
	|	ПродажиОбороты.СуммаОборот КАК Сумма,
	|	ПродажиОбороты.Период КАК Дата,
	|	ПродажиОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , Регистратор, Клиент = &Клиент) КАК ПродажиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ"
	;
	РеквизитИсторияПосещений.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.История
		И ИсторияПосещений.Количество() = 0
	Тогда
		ОбновитьИсториюПосещений();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МедицинаПриСозданииФормы()
	
	ИспользуютсяПрофосмотры = Метаданные.ФункциональныеОпции.Найти("ИспользоватьПрофосмотры") <> Неопределено И ПолучитьФункциональнуюОпцию("ИспользоватьПрофосмотры");
	
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, 
																"КнопкаОткрытьАнамнез",
																ЗначениеЗаполнено(мУчетнаяПолитика.ШаблонАнамнезаЖизни));
	РаботаСФормамиКлиентСервер.УстановитьВидимостьЭлементаФормы(Элементы, 
																"ПолисыГруппа",
																мУчетнаяПолитика.ИспользоватьСтраховыеПолисы);
																
	РаботаСФормамиКлиентСервер.УстановитьПолеЭлементаФормы(Элементы, "ОткрытьЛекарственнуюНепереносимость", "Заголовок", МедицинскаяДеятельность.ЗаголовокКнопкиОткрытьЛекарственнуюНепереносимость(Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьГлубинуКредитнойЛинииПриИзменении(Элемент)
	
	Элементы.МаксимальнаяСуммаДолгаКлиента.Доступность = ОграничиватьГлубинуКредитнойЛинии;
	Если ОграничиватьГлубинуКредитнойЛинии Тогда
		ОписаниеЧисло = Новый ОписаниеТипов("Число");
		Объект.МаксимальнаяСуммаДолгаКлиента = ОписаниеЧисло.ПривестиЗначение(Объект.МаксимальнаяСуммаДолгаКлиента);
	КонецЕсли;

КонецПроцедуры

#Область Льготы

&НаКлиенте
Процедура ЛьготыКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Оповещение = Новый ОписаниеОповещения("ЛьготыКлиентаПередНачаломДобавленияПродолжение", ЭтотОбъект);
	РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЛьготыКлиентаПередНачаломДобавленияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗначениеОтбора = Новый Структура("ВидКлассификатора", ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.КлассификаторКатегорийЛьгот"));
	ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ЛьготыКлиентаПередНачаломДобавленияПослеВыбораЛьготы", ЭтотОбъект);
	ОткрытьФорму("Справочник.КлассификаторыМинЗдрава.ФормаВыбора", ПараметрыФормыВыбора, Элементы.ЛьготыКлиента,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыКлиентаПередНачаломДобавленияПослеВыбораЛьготы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДобавитьЛьготуКлиенту(Объект.Ссылка, Результат);
		Элементы.ЛьготыКлиента.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЛьготуКлиенту(Клиент, Льгота)
	
	Запись = РегистрыСведений.ЛьготыКлиентов.СоздатьМенеджерЗаписи();
	Запись.Клиент = Клиент;
	Запись.Льгота = Льгота;
	Запись.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СоцСтатус

&НаКлиенте
Процедура СоцСтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ВидКлассификатора", ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.КлассификаторСоциальныхСтатусов"));
	ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Справочник.КлассификаторыМинЗдрава.ФормаВыбора", ПараметрыФормыВыбора, Элементы.СоцСтатус);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДатаОтсчетаСтажаПриИзменении(Элемент)
	ИзменениеДатыСтажа();
КонецПроцедуры

&НаКлиенте
Процедура ЛетСтажаПриИзменении(Элемент)
	ИзменениеМесяцаГода();
КонецПроцедуры

&НаКлиенте
Процедура МесяцевСтажаПриИзменении(Элемент)
	Если МесяцевСтажа >= 12 Тогда
		
		ЛетСтажа = ЛетСтажа + Цел(МесяцевСтажа / 12);
		МесяцевСтажа = МесяцевСтажа - 12 * Цел(МесяцевСтажа / 12);
		
	ИначеЕсли МесяцевСтажа <= -1 Тогда
		Если ЛетСтажа >= 1 Тогда
			ЛетСтажа = ЛетСтажа + (Цел(МесяцевСтажа / 12) - 1);
		КонецЕсли;
		МесяцевСтажа = 12 + МесяцевСтажа;
		
	КонецЕсли;
	ИзменениеМесяцаГода();
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеДатыСтажа()
	
	Если ЗначениеЗаполнено(Объект.ДатаОтсчетаСтажа) Тогда
		
		ЛетСтажа = Год(ТекущаяДата()) - Год(Объект.ДатаОтсчетаСтажа) - ?(ДеньГода(ТекущаяДата()) < ДеньГода(Объект.ДатаОтсчетаСтажа),1,0);
		ВозрастМесяцев = 0;
		
		счДата	= ДобавитьМесяц(НачалоМесяца(Объект.ДатаОтсчетаСтажа),12 * ЛетСтажа);
		счДата  = ДобавитьМесяц(счДата,1);
		ТекДата	= ТекущаяДата();
		
		Пока счДата < ТекДата Цикл 
			ВозрастМесяцев = ВозрастМесяцев + 1;
			счДата = ДобавитьМесяц(счДата,1);
		КонецЦикла;
		
		Если ВозрастМесяцев >= 12 Тогда
			ЛетСтажа = ЛетСтажа + Цел(ВозрастМесяцев / 12);
			МесяцевСтажа = ВозрастМесяцев - 12 * Цел(ВозрастМесяцев / 12);
		Иначе
			МесяцевСтажа = ВозрастМесяцев;
		КонецЕсли;
	Иначе
		ЛетСтажа = 0;
		МесяцевСтажа = 0;
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеМесяцаГода()
	Модифицированность = Истина;
	ДеньМесяца = ?(ЗначениеЗаполнено(Объект.ДатаОтсчетаСтажа), День(Объект.ДатаОтсчетаСтажа), День(ТекущаяДата()));
	ДатаОтсчета = ДобавитьМесяц(ТекущаяДата(),(ЛетСтажа * 12 + МесяцевСтажа)*-1);
	Объект.ДатаОтсчетаСтажа = Дата(Год(ДатаОтсчета), Месяц(ДатаОтсчета), ДеньМесяца);
КонецПроцедуры

&НаКлиенте
Процедура ФорматВводаМестаРаботы1ПриИзменении(Элемент)
	
	ИзменениеФорматаВводаМестаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура Профессия1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МедосмотрыКлиент.ОбработкаВыбораПрофессии(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Профессия1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	МедосмотрыСервер.ПрофессияОкончаниеВводаТекстаНаСервере(Текст, СтандартнаяОбработка, ДанныеВыбора);
	
КонецПроцедуры
