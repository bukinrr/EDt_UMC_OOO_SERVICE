#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВыполнитьСтандартноеПолучениеДанныхВыбора") Тогда
		Возврат;
	ИначеЕсли СтрДлина(Параметры.СтрокаПоиска) < УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("МинДлинаСтрокиПоискаКлиента") Тогда 
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("ПометкаУдаления") Тогда
		Параметры.Отбор.Вставить("ПометкаУдаления",Ложь);	
	КонецЕсли;
	
	Если Параметры.Свойство("ВыборГруппИЭлементов")
		И Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы
	Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Архив") Тогда
		Параметры.Отбор.Вставить("Архив",Ложь);	
	КонецЕсли;
	
	Если Не УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоискКлиентаПоПодстрокеПоказыватьСДатойРождения") Тогда
		Возврат;
	КонецЕсли;
	
	// Получение даты рождения клиентов.
	СтандартнаяОбработка = Ложь;
	
	Параметры.Вставить("ВыполнитьСтандартноеПолучениеДанныхВыбора");
	ДанныеВыбора = Справочники.Клиенты.ПолучитьДанныеВыбора(Параметры);

	Если ДанныеВыбора.Количество() <> 0 Тогда
		
		Если ДанныеВыбора.Количество() <= 3 Тогда
			Для Каждого ЭлементСписка Из ДанныеВыбора Цикл
				ДатаРождения = ЭлементСписка.Значение.ДатаРождения;
				Если ЗначениеЗаполнено(ДатаРождения) Тогда
					ЭлементСписка.Представление = ЭлементСписка.Значение.Наименование + " (" + Формат(ДатаРождения,"ДЛФ=D") + ")";
				КонецЕсли;
			КонецЦикла;
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ДанныеВыбора);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Клиенты.Наименование КАК Наименование,
			|	Клиенты.ДатаРождения КАК ДатаРождения,
			|	Клиенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Клиенты КАК Клиенты
			|ГДЕ
			|	Клиенты.Ссылка В(&Ссылка)"
			;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Представление = Выборка.Наименование;
				Если ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
					Представление = Представление + " (" + Формат(Выборка.ДатаРождения,"ДЛФ=D") + ")";
				КонецЕсли;
				
				ЭлементСписка = ДанныеВыбора.НайтиПоЗначению(Выборка.Ссылка);
				ЭлементСписка.Представление = Представление;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает элементы с совпадающим наборром значений реквизитов проверки дублей.
//
// Параметры:
//  ДанныеОбъекта	 - Структура - поля для поиска дубля.
// 
// Возвращаемое значение:
//	СписокЗначений - дубли.
//
Функция ПолучитьДублирующихКлиентов(ДанныеОбъекта) Экспорт
	
	Результат = Новый СписокЗначений;
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(УчетнаяПолитика.РежимПроверкиДублейКлиентов)
		И УчетнаяПолитика.РежимПроверкиДублейКлиентов <> Перечисления.РежимыПроверкиДублейКлиентов.НеПроверять 
	Тогда
		// Формируем запрос в зависимости от выбранной настройки.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Клиенты.Ссылка,
		|	Клиенты.Представление
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Ссылка <> &Клиент
		|	И НЕ Клиенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("Клиент",ДанныеОбъекта.Ссылка);
		Запрос.УстановитьПараметр("Имя",ДанныеОбъекта.Имя);
		Запрос.УстановитьПараметр("Фамилия",ДанныеОбъекта.Фамилия);
		Запрос.УстановитьПараметр("Отчество",ДанныеОбъекта.Отчество);
		Запрос.УстановитьПараметр("ДатаРождения",ДанныеОбъекта.ДатаРождения);
		
		Если УчетнаяПолитика.РежимПроверкиДублейКлиентов = Перечисления.РежимыПроверкиДублейКлиентов.ФамилияИмя Тогда
			Условия = Новый Структура("Фамилия,Имя");
		ИначеЕсли УчетнаяПолитика.РежимПроверкиДублейКлиентов = Перечисления.РежимыПроверкиДублейКлиентов.ФамилияИмяОтчество Тогда
			Условия = Новый Структура("Фамилия,Имя,Отчество");
		ИначеЕсли УчетнаяПолитика.РежимПроверкиДублейКлиентов = Перечисления.РежимыПроверкиДублейКлиентов.ФамилияИмяДР Тогда
			Условия = Новый Структура("Фамилия,Имя,ДатаРождения");
		ИначеЕсли УчетнаяПолитика.РежимПроверкиДублейКлиентов = Перечисления.РежимыПроверкиДублейКлиентов.ФамилияИмяОтчествоДР Тогда
			Условия = Новый Структура("Фамилия,Имя,Отчество,ДатаРождения");
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Для Каждого КЗ Из Условия Цикл
			Запрос.Текст = Запрос.Текст + Символы.ПС + "И Клиенты."+КЗ.Ключ+" = &"+КЗ.Ключ;
		КонецЦикла;
		
		Выб = Запрос.Выполнить().Выбрать();
		
		Пока Выб.Следующий() Цикл
			Результат.Добавить(Выб.Ссылка, Выб.Представление);
		КонецЦикла;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Устанавливает параметры загрузки данных из файла.
//
// Параметры:
//     Параметры - Структура - Список параметров. Поля: 
//         * Заголовок - Строка - Заголовок окна.
//         * ОбязательныеКолонки - Массив - Список имен колонок обязательных для заполнения.
//         * ТипДанныхКолонки - Соответствие, Ключ - Имя колонки, Значение - Описание типа данных.
//
Процедура ОпределитьПараметрыЗагрузкиДанныхИзФайла(Параметры) Экспорт
	
	Параметры.Заголовок = НСтр("ru = 'Клиенты'");	
		
	ОписаниеТипаНаименование =  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));
	Параметры.ТипДанныхКолонки.Вставить("Фамилия", ОписаниеТипаНаименование);
	
	ОписаниеТипаНаименование =  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));
	Параметры.ТипДанныхКолонки.Вставить("Имя", ОписаниеТипаНаименование);
	
	ОписаниеТипаНаименование =  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));	
	Параметры.ТипДанныхКолонки.Вставить("Отчество", ОписаниеТипаНаименование);
		
КонецПроцедуры

// Производит сопоставление загружаемых данных с данными в ИБ.
//
// Параметры:
//   ЗагружаемыеДанные - ТаблицаЗначений - таблица значений с загружаемыми данными:
//     * СопоставленныйОбъект - СправочникСсылка - Ссылка на сопоставленный объект. Заполняется внутри процедуры
//     * <другие колонки>     - Произвольный - Состав колонок соответствует макету "ЗагрузкаИзФайла".
//
Процедура СопоставитьЗагружаемыеДанныеИзФайла(ЗагружаемыеДанные) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Фамилия КАК Фамилия,
	|	Клиенты.Имя КАК Имя,
	|	Клиенты.Отчество КАК Отчество,
	|	Клиенты.ДатаРождения КАК ДатаРождения,
	|	Клиенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Архив = ЛОЖЬ
	|	И Клиенты.ПометкаУдаления = ЛОЖЬ";	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		Фильтр = Новый Структура("Фамилия, Имя, Отчество", РезультатЗапроса.Фамилия,РезультатЗапроса.Имя,РезультатЗапроса.Отчество);
		Строки = ЗагружаемыеДанные.НайтиСтроки(Фильтр);
		Для Каждого Строка Из Строки Цикл
			Строка.ОбъектСопоставления = РезультатЗапроса.Ссылка;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Загрузка данных из файла.
//
// Параметры:
//  ЗагружаемыеДанные -ТаблицаЗначений - ТаблицаЗначений с колонками:
//       * СопоставленныйОбъект         - СправочникСсылка - Ссылка на сопоставленный объект.
//       * РезультатСопоставленияСтроки - Строка       - Статус загрузки, возможны варианты: Создан, Обновлен, Пропущен.
//       * ОписаниеОшибки               - Строка       - расшифровка ошибки загрузки данных.
//       * Идентификатор                - Число        - Уникальный номер строки
//       <другие колонки>               - Произвольный - Строки за загружаемого файла в соответствие с макетом.
//  ПараметрыЗагрузки                  - Структура - Параметры загрузки.
//       * СоздаватьНовые               - Булево       - Требуется ли создавать новые элементы справочника.
//       * ОбновлятьСуществующие        - Булево       - Требуется ли обновлять элементы справочника.
//  Отказ - Булево                     - Отмена загрузки.
//
Процедура ЗагрузитьИзФайла(ЗагружаемыеДанные, ПараметрыЗагрузки, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОстатков = Документы.ВводОстатков.СоздатьДокумент();
	
	ПчТипыКонтактнойИнформации	 = Перечисления.ТипыКонтактнойИнформации;
	СпрВидыКонтактнойИнформации	 = Справочники.ВидыКонтактнойИнформации;
	
	ОперацийВТранзакции = 100;
	Сч = 0; 
	
	НачатьТранзакцию();	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		ОбъектСопоставленияЗаполнен = ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСопоставления);
		
		Если (ОбъектСопоставленияЗаполнен
			И ПараметрыЗагрузки.ОбновлятьСуществующие = 0)
			ИЛИ (НЕ ОбъектСопоставленияЗаполнен
			И ПараметрыЗагрузки.СоздаватьНовые = 0) Тогда
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если ОбъектСопоставленияЗаполнен Тогда
				
				Блокировка        = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.Клиенты");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.ОбъектСопоставления);
				Блокировка.Заблокировать();
				
				ЭлементСправочника = СтрокаТаблицы.ОбъектСопоставления.ПолучитьОбъект();
				
				Если ЭлементСправочника = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Клиент с артикулом %1 не существует.'"), СтрокаТаблицы.Артикул);
				КонецЕсли;
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Обновлен";
				
			Иначе
				
				ЭлементСправочника                         = СоздатьЭлемент();
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Создан";
				
			КонецЕсли;
			
			Причина = "Наименование";
			// Получение полей ФИО из Наименования.
			Если ЗагружаемыеДанные.Колонки.Найти("Наименование") <> Неопределено Тогда
				Если ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
					
					Если ПустаяСтрока(СтрокаТаблицы.Фамилия) Тогда
						СтрокаТаблицы.Наименование = СокрЛП(СокрЛП(СтрокаТаблицы.Имя) + " " + СокрЛП(СтрокаТаблицы.Отчество));
					Иначе
						СтрокаТаблицы.Наименование = РаботаСКлиентамиПереопределяемый.ПредставлениеПоФИО(СтрокаТаблицы.Фамилия, СтрокаТаблицы.Имя, СтрокаТаблицы.Отчество);
					КонецЕсли;
					
					Если ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
						СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
						Причина = НСтр("ru='Не заполнены как поля ФИО клиента, так и его наименование.'");
						СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'Невозможна запись из-за некорректности данных. По причине:'" + Причина);
						Продолжить;
					КонецЕсли;
					
				ИначеЕсли ПустаяСтрока(СтрокаТаблицы.Фамилия) И ПустаяСтрока(СтрокаТаблицы.Имя) И ПустаяСтрока(СтрокаТаблицы.Отчество) Тогда
					ЧастиФИО = СтрРазделить(СтрокаТаблицы.Наименование, " ", Ложь);
					Если ЧастиФИО.Количество() >= 1 Тогда
						СтрокаТаблицы.Фамилия = ЧастиФИО[0];
					КонецЕсли;
					Если ЧастиФИО.Количество() >= 2 Тогда
						СтрокаТаблицы.Имя = ЧастиФИО[1];
					КонецЕсли;
					Если ЧастиФИО.Количество() >= 3 Тогда
						СтрокаТаблицы.Отчество = ЧастиФИО[2];
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы);
			Если ПустаяСтрока(ЭлементСправочника.Наименование) Тогда
				ЭлементСправочника.Наименование = СтрокаТаблицы.Фамилия + " " + СтрокаТаблицы.Имя + " " + СтрокаТаблицы.Отчество;	
			КонецЕсли; 
			
			Причина = "Дата рождения";
			// Дата рождения
			Если ЗагружаемыеДанные.Колонки.Найти("ДатаРождения") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ДатаРождения) Тогда
				Попытка
					ЭлементСправочника.ДатаРождения = Дата(Число(Сред(СтрокаТаблицы.ДатаРождения, 7, 4)), Число(Сред(СтрокаТаблицы.ДатаРождения, 4, 2)), Число(Сред(СтрокаТаблицы.ДатаРождения, 1, 2)));
				Исключение
					ВызватьИсключение;
				КонецПопытки;
			КонецЕсли;
			
			Причина = "Дата создания";
			// Дата создания
			Если ЗагружаемыеДанные.Колонки.Найти("ДатаСоздания") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ДатаСоздания) Тогда
				Попытка
					ЭлементСправочника.ДатаСоздания = Дата(СтрокаТаблицы.ДатаСоздания);	
				Исключение
					Попытка
						ЭлементСправочника.ДатаСоздания = Дата(СтрокаТаблицы.ДатаСоздания + " 00:00:00");
					Исключение ВызватьИсключение; КонецПопытки;
				КонецПопытки;	
			КонецЕсли;
			
			Причина = "Место работы";
			// Место работы
			Если ЗагружаемыеДанные.Колонки.Найти("умцМестоРаботы") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.умцМестоРаботы) Тогда
				Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТаблицы.умцМестоРаботы); 
				Если ЗначениеЗаполнено(Контрагент) Тогда
					ЭлементСправочника.умцМестоРаботы = Контрагент;
				Иначе
					ЭлементСправочника.умцМестоРаботы = СтрокаТаблицы.умцМестоРаботы;
				КонецЕсли; 	
			КонецЕсли; 
			
			Причина = "Ответственный";
			// Ответственный
			Если ЗагружаемыеДанные.Колонки.Найти("Ответственный") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Ответственный) Тогда
				Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТаблицы.Ответственный);
				Если ЗначениеЗаполнено(Ответственный) Тогда
					ЭлементСправочника.Ответственный = Ответственный;
				КонецЕсли;
			КонецЕсли;
			
			Причина = "Автор";
			// Автор
			Если ЗагружаемыеДанные.Колонки.Найти("Автор") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Автор) Тогда
				Автор = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТаблицы.Автор);
				Если ЗначениеЗаполнено(Автор) Тогда
					ЭлементСправочника.Автор = Автор;
				КонецЕсли;
			КонецЕсли;
			
			Причина = "Сотрудник";
			// Сотрудник
			Если ЗагружаемыеДанные.Колонки.Найти("Сотрудник") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
				Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(СтрокаТаблицы.Сотрудник);
				Если ЗначениеЗаполнено(Сотрудник) Тогда
					ЭлементСправочника.Сотрудник = Сотрудник;
				Иначе
					Попытка
						НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
						НовыйСотрудник.Наименование = СтрокаТаблицы.Сотрудник;
						НовыйСотрудник.Записать();	
						ЭлементСправочника.Сотрудник = НовыйСотрудник;		
					Исключение КонецПопытки;
				КонецЕсли; 
			КонецЕсли;
			
			Причина = "Основной сотрудник";
			// Основной сотрудник
			Если ЗагружаемыеДанные.Колонки.Найти("ОсновнойСотрудник") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ОсновнойСотрудник) Тогда
				Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(СтрокаТаблицы.ОсновнойСотрудник);
				Если ЗначениеЗаполнено(Сотрудник) Тогда
					ЭлементСправочника.ОсновнойСотрудник = Сотрудник;
				Иначе
					Попытка
						НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
						НовыйСотрудник.Наименование = СтрокаТаблицы.ОсновнойСотрудник;
						НовыйСотрудник.Записать();	
						ЭлементСправочника.ОсновнойСотрудник = НовыйСотрудник;		
					Исключение КонецПопытки;
				КонецЕсли; 
			КонецЕсли;
			
			Причина = "Статус";
			// Статус
			Если ЗагружаемыеДанные.Колонки.Найти("Статус") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Статус) Тогда
				Статус = Справочники.СтатусыКлиентов.НайтиПоНаименованию(СтрокаТаблицы.Статус);
				Если ЗначениеЗаполнено(Статус) Тогда
					ЭлементСправочника.Статус = Статус;
				Иначе
					Попытка
						НовыйСтатус = Справочники.СтатусыКлиентов.СоздатьЭлемент();
						НовыйСтатус.Наименование = СтрокаТаблицы.Статус;
						НовыйСтатус.Записать();	
						ЭлементСправочника.Статус = НовыйСтатус;		
					Исключение КонецПопытки;
				КонецЕсли; 
			КонецЕсли;
			
			Причина = "Законный представитель";
			// Законный представитель
			Если ЗагружаемыеДанные.Колонки.Найти("ЗаконныйПредставитель") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ЗаконныйПредставитель) Тогда
				ЗаконныйПредставитель = Справочники.Клиенты.НайтиПоНаименованию(СтрокаТаблицы.ЗаконныйПредставитель);
				Если ЗначениеЗаполнено(ЗаконныйПредставитель) Тогда
					ЭлементСправочника.ЗаконныйПредставитель = ЗаконныйПредставитель;
				Иначе
					ЭлементСправочника.ЗаконныйПредставитель = СтрокаТаблицы.ЗаконныйПредставитель;	
				КонецЕсли; 
			КонецЕсли;
			
			Причина = "Источник информации";
			// Источник информации
			Если ЗагружаемыеДанные.Колонки.Найти("ИсточникИнформации") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ИсточникИнформации) Тогда
				ИсточникИнформации = Справочники.ИсточникиИнформации.НайтиПоНаименованию(СтрокаТаблицы.ИсточникИнформации);
				Если ЗначениеЗаполнено(ИсточникИнформации) Тогда
					ЭлементСправочника.ИсточникИнформации = ИсточникИнформации;
				Иначе
					Попытка
						НовыйИсточникИнформации = Справочники.ИсточникиИнформации.СоздатьЭлемент();
						НовыйИсточникИнформации.Наименование = СтрокаТаблицы.ИсточникИнформации;
						НовыйИсточникИнформации.Записать();	
						ЭлементСправочника.ИсточникИнформации = НовыйИсточникИнформации;		
					Исключение КонецПопытки;	
				КонецЕсли; 
			КонецЕсли;
			
			Причина = "Страховой полис";
			// Страховой полис
			Если ЗагружаемыеДанные.Колонки.Найти("умцОсновнойСтраховойПолис") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.умцОсновнойСтраховойПолис) Тогда
				СтраховойПолис = Справочники.СтраховыеПолисы.НайтиПоНаименованию(СтрокаТаблицы.умцОсновнойСтраховойПолис);
				Если ЗначениеЗаполнено(СтраховойПолис) Тогда
					ЭлементСправочника.умцОсновнойСтраховойПолис = СтраховойПолис;
				КонецЕсли; 
			КонецЕсли;
			
			Причина = "Пол";
			// Пол
			Если ЗагружаемыеДанные.Колонки.Найти("Пол") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Пол) Тогда
				Попытка
					ЭлементСправочника.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц." + СтрокаТаблицы.Пол); 
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭлементСправочника.Пол) Тогда
				ЭлементСправочника.Пол = УниверсальныеМеханизмыСервер.ОпределитьПол(СтрокаТаблицы.Имя,СтрокаТаблицы.Фамилия,СтрокаТаблицы.Отчество);
				Если Не ЗначениеЗаполнено(ЭлементСправочника.Пол) Тогда
					ЭлементСправочника.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.НеУказан");	
				КонецЕсли; 
			КонецЕсли; 
			
			Если Не ЭлементСправочника.ПроверитьЗаполнение() Тогда
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				Если СообщенияПользователю.Количество()>0 Тогда
					ТекстСообщений = "";
					Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
						ТекстСообщений  = ТекстСообщений + СообщениеПользователю.Текст + Символы.ПС;
					КонецЦикла;
					СтрокаТаблицы.ОписаниеОшибки = ТекстСообщений;
				КонецЕсли;
			Иначе
				ЭлементСправочника.Записать();
				СтрокаТаблицы.ОбъектСопоставления = ЭлементСправочника.Ссылка;
				
				Причина = "Остатки";
				// Остатки
				Если ЗагружаемыеДанные.Колонки.Найти("ОстатокВзаиморасчетов") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ОстатокВзаиморасчетов) Тогда
					НоваяСтрока = ДокументОстатков.ВзаиморасчетыСКлиентами.Добавить();
					НоваяСтрока.Клиент = ЭлементСправочника.Ссылка;
					НоваяСтрока.Сумма = -СтрокаТаблицы.ОстатокВзаиморасчетов;
				КонецЕсли; 
				
				ПоляКонтактнойИнформации = Новый Структура("Поле3, Представление");
				
				Причина = "Сотовый телефон";
				// Сотовый телефон
				Если ЗагружаемыеДанные.Колонки.Найти("Телефон") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Телефон) Тогда
					КонтактнаяИнформацияСерверПереопределяемый.ЗаписатьНомерТелефона(ЭлементСправочника.Ссылка, СтрокаТаблицы.Телефон);
				КонецЕсли;
				
				Причина = "Домашний телефон";
				// Домашний телефон
				Если ЗагружаемыеДанные.Колонки.Найти("ДопТелефон") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ДопТелефон) Тогда
					КонтактнаяИнформацияСерверПереопределяемый.ЗаписатьНомерТелефона(ЭлементСправочника.Ссылка, СтрокаТаблицы.ДопТелефон, СпрВидыКонтактнойИнформации.ТелефонДомашний);
				КонецЕсли;
				
				Причина = "Email";
				// Email
				Если ЗагружаемыеДанные.Колонки.Найти("Email") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Email) Тогда
					ЗаписьКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					ЗаписьКИ.Объект	= ЭлементСправочника.Ссылка;
					ЗаписьКИ.Тип	 	= ПчТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					ЗаписьКИ.Вид	 	= СпрВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий;
					ЗаписьКИ.Представление = СтрокаТаблицы.Email;	
					ЗаписьКИ.Записать();
				КонецЕсли;
				
				Причина = "Адрес";
				// Адрес
				Если ЗагружаемыеДанные.Колонки.Найти("Адрес") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Адрес) Тогда
					КонтактнаяИнформацияСерверПереопределяемый.РазобратьИЗаписатьАдрес(СтрокаТаблицы.Адрес, ЭлементСправочника.Ссылка);				
				КонецЕсли;
				
				Причина = "ВидДУЛ";
                // ВидДУЛ
				Если ЗагружаемыеДанные.Колонки.Найти("ВидДУЛ") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ВидДУЛ) Тогда
					ВидДул = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоНаименованию(СтрокаТаблицы.ВидДУЛ);
					Если НЕ ЗначениеЗаполнено(ВидДУЛ) Тогда
						ВидДУЛ = УправлениеНастройками.ПараметрУчета("ОсновнойВидДУЛ");
						Если НЕ ЗначениеЗаполнено(ВидДУЛ) Тогда
							ВидДУЛ = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;  
				
				Причина = "СерияДУЛ";
                // СерияДУЛ
				Если ЗагружаемыеДанные.Колонки.Найти("СерияДУЛ") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.СерияДУЛ) Тогда
					СерияДУЛ = СтрокаТаблицы.СерияДУЛ;				
				КонецЕсли;
				
				Причина = "НомерДУЛ";
                // СерияДУЛ
				Если ЗагружаемыеДанные.Колонки.Найти("НомерДУЛ") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.НомерДУЛ) Тогда
					НомерДУЛ = СтрокаТаблицы.НомерДУЛ;				
				КонецЕсли;
				
				Причина = "ДатаВыдачиДУЛ";
                // СерияДУЛ
				Если ЗагружаемыеДанные.Колонки.Найти("ДатаВыдачиДУЛ") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыдачиДУЛ) Тогда
					ДатаВыдачиДУЛ = СтрЗаменить(СтрокаТаблицы.ДатаВыдачиДУЛ,".", "");
					ДатаВыдачиДУЛ = Прав(ДатаВыдачиДУЛ, 4) + Сред(ДатаВыдачиДУЛ, 3, 2) + Лев(ДатаВыдачиДУЛ, 2);				
				КонецЕсли;
				
				Причина = "КемВыданДУЛ";
                // СерияДУЛ
				Если ЗагружаемыеДанные.Колонки.Найти("КемВыданДУЛ") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.КемВыданДУЛ) Тогда
					КемВыданДУЛ = СтрокаТаблицы.КемВыданДУЛ;				
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СерияДУЛ) ИЛИ ЗначениеЗаполнено(НомерДУЛ) Тогда 
					
					НаборПаспортныхДанных = Новый Структура;
					НаборПаспортныхДанных.Вставить("ВидДУЛ", ВидДУЛ);
					НаборПаспортныхДанных.Вставить("СерияДУЛ", СерияДУЛ);
					НаборПаспортныхДанных.Вставить("НомерДУЛ", НомерДУЛ);
					НаборПаспортныхДанных.Вставить("ДатаВыдачиДУЛ", ДатаВыдачиДУЛ);
					НаборПаспортныхДанных.Вставить("КемВыданДУЛ", КемВыданДУЛ);
					
					ДобавитьПаспортныеДанныеКлиенту(НаборПаспортныхДанных, ЭлементСправочника.Ссылка); 
					
				КонецЕсли;
			
				Если Сч = ОперацийВТранзакции Тогда
					Сч = 0;
					Попытка 
						ЗафиксироватьТранзакцию();
					Исключение
					КонецПопытки;
					НачатьТранзакцию();
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Причина = "Столбец """ + Причина + """: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтрокаТаблицы.РезультатСопоставленияСтроки = Причина;
			СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'Невозможна запись из-за некорректности данных. По причине:'" + Причина);
		КонецПопытки;
	КонецЦикла;
	
	Попытка 
		ЗафиксироватьТранзакцию();
	Исключение
	КонецПопытки;
	
	Если ДокументОстатков.ВзаиморасчетыСКлиентами.Количество() <> 0 Тогда
		ДокументОстатков.Дата = ТекущаяДатаСеанса();
		ДокументОстатков.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли; 
				
КонецПроцедуры

// Возвращает законного представителя клиента и его совершеннолетних родственников.
//
// Параметры:
//  Клиент	 - СправочникСсылка.Клиенты	 - Клиент.
//  Дата	 - Дата	 - Дата актуальности данных.
// 
// Возвращаемое значение:
//  Массив - Массив из Структура с ключами: Представитель - Строка, СправочникСсылка.Клиенты; СтепеньРодства - Строка, СправочникСсылка.СтепениРодства.
//
Функция ПолучитьПредставителейКлиента(Клиент, Дата = Неопределено) Экспорт
	
	Дата = ?(Дата = Неопределено, ТекущаяДата(), Дата);
	
	МассивПредставителей = Новый Массив;
	
	Если ЗначениеЗаполнено(Клиент.ЗаконныйПредставитель) Тогда
		МассивПредставителей.Добавить(Новый Структура("Объект, СтепеньРодства", Клиент.ЗаконныйПредставитель, "Законный представитель"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязиМеждуКлиентами.Клиент2 КАК Родственник,
	               |	СвязиМеждуКлиентами.ТипСвязи КАК ТипСвязи
	               |ИЗ
	               |	РегистрСведений.СвязиМеждуКлиентами КАК СвязиМеждуКлиентами
	               |ГДЕ
	               |	СвязиМеждуКлиентами.Клиент = &Клиент
	               |	И СвязиМеждуКлиентами.Клиент2.ДатаРождения < &ПорогСовершеннолетия
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЫБОР
	               |		КОГДА СвязиМеждуКлиентами.ТипСвязи.КодФСС = """"
	               |			ТОГДА ""999""
	               |		ИНАЧЕ СвязиМеждуКлиентами.ТипСвязи.КодФСС
	               |	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("ПорогСовершеннолетия", ДобавитьМесяц(Дата, -216));
	
	ПоискЗаконногоПредставителя = МассивПредставителей.Количество() > 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПоискЗаконногоПредставителя И МассивПредставителей[0].Объект = Выборка.Родственник Тогда
			МассивПредставителей[0] = Новый Структура("Объект, СтепеньРодства", Выборка.Родственник, Выборка.ТипСвязи);	
		Иначе
			МассивПредставителей.Добавить(Новый Структура("Объект, СтепеньРодства", Выборка.Родственник, Выборка.ТипСвязи));
		КонецЕсли;
	КонецЦикла;
		
	Возврат МассивПредставителей;
	
КонецФункции

Процедура ДобавитьПаспортныеДанныеКлиенту(НаборПаспортныхДанных, Клиент)

	Если ЗначениеЗаполнено(Клиент) Тогда
		
		Запись = РегистрыСведений.ПаспортныеДанные.СоздатьМенеджерЗаписи();
		Запись.ФизЛицо = Клиент;
		Запись.ДокументВид = НаборПаспортныхДанных.ВидДУЛ;
		Запись.ДокументСерия = НаборПаспортныхДанных.СерияДУЛ;
		Запись.ДокументНомер = НаборПаспортныхДанных.НомерДУЛ;
		Запись.ДокументДатаВыдачи = НаборПаспортныхДанных.ДатаВыдачиДУЛ;
		Запись.ДокументКемВыдан = НаборПаспортныхДанных.КемВыданДУЛ; 
		Если ЗначениеЗаполнено(НаборПаспортныхДанных.ДатаВыдачиДУЛ) Тогда
			Запись.Период = Дата(НаборПаспортныхДанных.ДатаВыдачиДУЛ);
		Иначе
			Если УниверсальныеМеханизмыСервер.НайтиПаспортныеДанные(НаборПаспортныхДанных, Клиент) Тогда 
				Возврат;
			Иначе
				Запись.Период = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;;
		Запись.Записать();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
