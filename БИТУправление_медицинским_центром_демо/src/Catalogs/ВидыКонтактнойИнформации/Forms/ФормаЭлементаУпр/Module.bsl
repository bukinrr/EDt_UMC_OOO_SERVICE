#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Тип) Тогда
		Элементы.Тип.Доступность = Ложь;
	Иначе
		Элементы.Тип.Доступность = Истина;
	КонецЕсли;
	
	ОбновитьТаблицуНазначенийКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ИспользоватьМаскуВвода И Не ЗначениеЗаполнено(Объект.МаскаВводаТелефонногоНомера) Тогда 
		ПоказатьПредупреждение(,НСтр("ru='При использовании ввода по маске необходимо заполнить маску ввода!'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Запись назначений КИ
	НЗНазначения = РегистрыСведений.НазначениеКонтактнойИнформации.СоздатьНаборЗаписей();
	НЗНазначения.Отбор.Вид.Установить(Объект.Ссылка);
	Для Каждого элСписка Из НазначениеКонтактнойИнформации Цикл
		Если элСписка.Пометка Тогда
			Запись = НЗНазначения.Добавить();
			Запись.Вид = Объект.Ссылка;
			Запись.ИмяМетаданных = элСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	НЗНазначения.Записать();
	
	ОбновитьТаблицуНазначенийКИ();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ВидКонтактнойИнформацииИзменение", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	НастроитьВидимостьДоступность();
	
	Если (Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
		Или Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое"))
	Тогда
		Объект.РедактируетсяВФормеОбъекта = Истина;
	ИначеЕсли Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Объект.РедактируетсяВФормеОбъекта = Ложь
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМаскуВводаПриИзменении(Элемент)
	НастроитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправкуМаскаВвода(Команда)
	
	ТекстСправки = НСтр("ru='Маска ввода содержит посимвольную строку маски интерактивного ввода текста в поле.
					|В строке маски допустимо использование следующих специальных символов: 
					|! - любой введенный символ преобразуется в верхний регистр; 
					|9 - допустимо ввести произвольный символ цифры; 
					|# - допустимо ввести произвольный символ цифры или - (знак минус) или + (знак плюс) или пробел; 
					|N - допустимо ввести любые алфавитно-цифровые символы (буквы или цифры); 
					|U - допустимо ввести любые алфавитно-цифровые символы (буквы или цифры) и любой введенный символ преобразуется в верхний регистр; 
					|X (латинского алфавита) - допустимо ввести произвольный символ; 
					|^ - недопустимо вводить этот символ интерактивно пользователем, он может устанавливаться только из языка; 
					|h - допустим ввод символов обозначения шестнадцатеричных цифр; 
					|@ – допустимо ввести любые алфавитно-цифровые символы (буквы или цифры) в верхнем регистре или пробел.'");
	ПоказатьПредупреждение(,ТекстСправки, 60, НСтр("ru='Формат маски ввода в 1С'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТаблицуНазначенийКИ()
	
	Элементы.НазначениеКонтактнойИнформации.ТолькоПросмотр = Объект.Ссылка.Пустая();

	// Заполнение списка назначений КИ
	мсНазначенияВидовКонтактнойИнфомрации = КонтактнаяИнформацияСервер.ПолучитьНазначенияВидовКонтактнойИнфомрации();
	
	НЗНазначения = РегистрыСведений.НазначениеКонтактнойИнформации.СоздатьНаборЗаписей();
	Если Не Объект.Ссылка.Пустая() Тогда
		НЗНазначения.Отбор.Вид.Установить(Объект.Ссылка);
		НЗНазначения.Прочитать();
	КонецЕсли;
	ТЗНазначения = НЗНазначения.Выгрузить();
	
	НазначениеКонтактнойИнформации.Очистить();
	Для Каждого НазначениеКИ Из мсНазначенияВидовКонтактнойИнфомрации Цикл
		
		элСписка = НазначениеКонтактнойИнформации.Добавить();
		элСписка.Значение		= НазначениеКИ.Имя;
		элСписка.Представление	= НазначениеКИ.Синоним;
		элСписка.Пометка		= ТЗНазначения.Найти(НазначениеКИ.Имя) <> Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДоступность()
	
	Элементы.ГруппаМаска.Доступность = (Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	Элементы.МаскаВводаТелефонногоНомера.Доступность = Объект.ИспользоватьМаскуВвода;
	
	ЭтоАдрес = (Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	Элементы.МеждународныйФорматАдреса.Доступность = ЭтоАдрес;
	Элементы.РедактируетсяВФормеОбъекта.Доступность = Не ЭтоАдрес;
	
КонецПроцедуры
		
#КонецОбласти