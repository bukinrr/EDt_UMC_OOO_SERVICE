#Область ПрограммныйИнтерфейс

// Устанавливает параметры загрузки данных из файла.
//
// Параметры:
//     Параметры - Структура - Список параметров. Поля: 
//         * Заголовок - Строка - Заголовок окна.
//         * ОбязательныеКолонки - Массив - Список имен колонок обязательных для заполнения.
//         * ТипДанныхКолонки - Соответствие, Ключ - Имя колонки, Значение - Описание типа данных.
//
Процедура ОпределитьПараметрыЗагрузкиДанныхИзФайла(Параметры) Экспорт
	
	Параметры.Заголовок = НСтр("ru = 'Сертификаты'");	
	
КонецПроцедуры

// Производит сопоставление загружаемых данных с данными в ИБ.
//
// Параметры:
//   ЗагружаемыеДанные - ТаблицаЗначений - таблица значений с загружаемыми данными:
//     * СопоставленныйОбъект - СправочникСсылка - Ссылка на сопоставленный объект. Заполняется внутри процедуры
//     * <другие колонки>     - Произвольный - Состав колонок соответствует макету "ЗагрузкаИзФайла".
//
Процедура СопоставитьЗагружаемыеДанныеИзФайла(ЗагружаемыеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сертификаты.ВидСертификата КАК ВидСертификата,
	|	Сертификаты.ВладелецКарты КАК ВладелецСертификата,
	|	Сертификаты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	Сертификаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сертификаты КАК Сертификаты
	|ГДЕ
	|	НЕ Сертификаты.Архив
	|	И НЕ Сертификаты.ПометкаУдаления";	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		Фильтр = Новый Структура("ВидСертификата, ВладелецСертификата, ДатаНачалаДействия", 
				 Строка(РезультатЗапроса.ВидСертификата),Строка(РезультатЗапроса.ВладелецСертификата),Формат(РезультатЗапроса.ДатаНачалаДействия, "ДФ=dd.MM.yyyy"));
		Строки = ЗагружаемыеДанные.НайтиСтроки(Фильтр);
		Для Каждого Строка Из Строки Цикл
			Строка.ОбъектСопоставления = РезультатЗапроса.Ссылка;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Загрузка данных из файла.
//
// Параметры:
//  ЗагружаемыеДанные -ТаблицаЗначений - ТаблицаЗначений с колонками:
//       * СопоставленныйОбъект         - СправочникСсылка - Ссылка на сопоставленный объект.
//       * РезультатСопоставленияСтроки - Строка       - Статус загрузки, возможны варианты: Создан, Обновлен, Пропущен.
//       * ОписаниеОшибки               - Строка       - расшифровка ошибки загрузки данных.
//       * Идентификатор                - Число        - Уникальный номер строки
//       <другие колонки>               - Произвольный - Строки за загружаемого файла в соответствие с макетом.
//  ПараметрыЗагрузки                  - Структура - Параметры загрузки.
//       * СоздаватьНовые               - Булево       - Требуется ли создавать новые элементы справочника.
//       * ОбновлятьСуществующие        - Булево       - Требуется ли обновлять элементы справочника.
//  Отказ - Булево                     - Отмена загрузки.
//
Процедура ЗагрузитьИзФайла(ЗагружаемыеДанные, ПараметрыЗагрузки, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОперацийВТранзакции = 100;
	Сч = 0; 
	
	НачатьТранзакцию();	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		ОбъектСопоставленияЗаполнен = ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСопоставления);
		
		Если (ОбъектСопоставленияЗаполнен
			И ПараметрыЗагрузки.ОбновлятьСуществующие = 0)
			ИЛИ (НЕ ОбъектСопоставленияЗаполнен
			И ПараметрыЗагрузки.СоздаватьНовые = 0) Тогда
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если ОбъектСопоставленияЗаполнен Тогда
				
				Блокировка        = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.Сертификаты");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.ОбъектСопоставления);
				Блокировка.Заблокировать();
				
				ЭлементСправочника = СтрокаТаблицы.ОбъектСопоставления.ПолучитьОбъект();
				
				Если ЭлементСправочника = Неопределено Тогда
					ВызватьИсключение "Сертификат не существует!";
				КонецЕсли;
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Обновлен";
				
			Иначе
				
				ЭлементСправочника                         = СоздатьЭлемент();
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Создан";
				
			КонецЕсли;
			
			Причина = "Вид сертификата";
			// Вид сертификата
			Если ЗагружаемыеДанные.Колонки.Найти("ВидСертификата") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ВидСертификата) Тогда
				ВидСертификата = Справочники.ВидыСертификатов.НайтиПоНаименованию(СтрокаТаблицы.ВидСертификата);
				Если ВидСертификата <> Неопределено Тогда
					ЭлементСправочника.ВидСертификата = ВидСертификата;		
				Иначе
					ВызватьИсключение "Поле ""Вид сертификата"" обязательно к заполнению!";	
				КонецЕсли;
			Иначе	
				ВызватьИсключение "Поле ""Вид сертификата"" обязательно к заполнению!";	
			КонецЕсли;
			
			Причина = "Владелец сертификата";
			// Владелец сертификата
			Если ЗагружаемыеДанные.Колонки.Найти("ВладелецСертификата") <> Неопределено Тогда
				Клиент = Справочники.Клиенты.НайтиПоНаименованию(СтрокаТаблицы.ВладелецСертификата);
				Если Клиент <> Неопределено Тогда
					ЭлементСправочника.ВладелецКарты = Клиент;		
				КонецЕсли;
			КонецЕсли;
			
			Причина = "Примечание";
			// Примечание
			Если ЗагружаемыеДанные.Колонки.Найти("Примечание") <> Неопределено Тогда
				ЭлементСправочника.Примечание = СтрокаТаблицы.Примечание;		
			КонецЕсли;
			
			Причина = "Сумма продажи";
			// Сумма продажи
			Если ЗагружаемыеДанные.Колонки.Найти("СуммаПродажи") <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаПродажи) Тогда
					ЭлементСправочника.СуммаПродажи = Число(СтрокаТаблицы.СуммаПродажи);		
				КонецЕсли;
			КонецЕсли;
						
			Причина = "Дата начала действия";
			// Дата начала действия
			Если ЗагружаемыеДанные.Колонки.Найти("ДатаНачалаДействия") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачалаДействия) Тогда
				Попытка
					ЭлементСправочника.ДатаНачалаДействия = Дата(СтрокаТаблицы.ДатаНачалаДействия);	
				Исключение
					Попытка
						ЭлементСправочника.ДатаНачалаДействия = Дата(СтрокаТаблицы.ДатаНачалаДействия + " 00:00:00");
					Исключение ВызватьИсключение; КонецПопытки;
				КонецПопытки;	
			КонецЕсли;  
			
			Причина = "Архив";
			// Архив
			Если ЗагружаемыеДанные.Колонки.Найти("Архив") <> Неопределено Тогда
				Если СтрокаТаблицы.Архив = "Да" Или СтрокаТаблицы.Архив = "да" 
					 Или СтрокаТаблицы.Архив = "1" Или СтрокаТаблицы.Архив = "Истина"
				Тогда
					ЭлементСправочника.Архив = Истина;	
				КонецЕсли;
			КонецЕсли;
			
			Причина = "Ручное редактрование владельца";
			// Ручное редактрование владельца
			Если ЗагружаемыеДанные.Колонки.Найти("РучноеРедактированиеВладельца") <> Неопределено Тогда
				Если СтрокаТаблицы.РучноеРедактированиеВладельца = "Да" Или СтрокаТаблицы.РучноеРедактированиеВладельца = "да" 
					 Или СтрокаТаблицы.РучноеРедактированиеВладельца = "1" Или СтрокаТаблицы.РучноеРедактированиеВладельца = "Истина"
				Тогда
					ЭлементСправочника.РучноеРедактированиеВладельца = Истина;	
				КонецЕсли;
			КонецЕсли;
			
			Причина = "Ручное редактрование даты начала действия";
			// Ручное редактрование даты начала действия
			Если ЗагружаемыеДанные.Колонки.Найти("РучноеРедактированиеДатыНачалаДействия") <> Неопределено Тогда
				Если СтрокаТаблицы.РучноеРедактированиеДатыНачалаДействия = "Да" Или СтрокаТаблицы.РучноеРедактированиеДатыНачалаДействия = "да" 
					 Или СтрокаТаблицы.РучноеРедактированиеДатыНачалаДействия = "1" Или СтрокаТаблицы.РучноеРедактированиеДатыНачалаДействия = "Истина"
				Тогда
					ЭлементСправочника.РучноеРедактированиеДатыДействия = Истина;	
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЭлементСправочника.ПроверитьЗаполнение() Тогда
				СтрокаТаблицы.РезультатСопоставленияСтроки = "Пропущен";
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				Если СообщенияПользователю.Количество()>0 Тогда
					ТекстСообщений = "";
					Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
						ТекстСообщений  = ТекстСообщений + СообщениеПользователю.Текст + Символы.ПС;
					КонецЦикла;
					СтрокаТаблицы.ОписаниеОшибки = ТекстСообщений;
				КонецЕсли;
			Иначе
				ЭлементСправочника.Записать();
				СтрокаТаблицы.ОбъектСопоставления = ЭлементСправочника.Ссылка;
				
				Если Сч = ОперацийВТранзакции Тогда
					Сч = 0;
					Попытка 
						ЗафиксироватьТранзакцию();
					Исключение
					КонецПопытки;
					НачатьТранзакцию();
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Причина = "Столбец """ + Причина + """: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтрокаТаблицы.РезультатСопоставленияСтроки = Причина;
			СтрокаТаблицы.ОписаниеОшибки = НСтр("ru = 'Невозможна запись из-за некорректности данных. По причине:'" + Причина);
		КонецПопытки;
	КонецЦикла;
	
	Попытка 
		ЗафиксироватьТранзакцию();
	Исключение
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти