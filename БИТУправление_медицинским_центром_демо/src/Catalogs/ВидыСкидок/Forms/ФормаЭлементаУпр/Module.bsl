#Область ОписаниеПеременных

&НаКлиенте
Перем мСтарыйВариант;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДекорацияВалюта.Заголовок = СокрЛП(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВалютаУчета"));
	
	НастройкаРасшифровкиСкидокПриОткрытии();
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнениеТаблДатВремени();
		Объект.НоминалБонуса = 1;
		Объект.НакоплениеБонусов = Перечисления.ФормыСкидки.Процент;
	КонецЕсли;
	
	Элементы.ГруппаВремяПоДнямНедели.Видимость = Объект.ОграничиватьПоДнямНедели;
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Если Не Параметры.Ключ.Пустая() Тогда
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		настройкиОтбораСкидок = СправочникОбъект.ХранилищеОтбор.Получить();
		Если ЗначениеЗаполнено(настройкиОтбораСкидок) Тогда
			КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СправочникОбъект.ХранилищеОтбор.Получить());
		КонецЕсли;
		
		НастройкиОтбораНакопления = СправочникОбъект.ХранилищеОтборНакопления.Получить();
		Если ЗначениеЗаполнено(настройкиОтбораНакопления) Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СправочникОбъект.ХранилищеОтборНакопления.Получить());
		КонецЕсли;
	КонецЕсли;
	
	НастройкаПолейПриОткрытииСервер();
	
	Элементы.РазмерыНакопленияРазмер.Заголовок = ПолучитьЗаголовокРазмера();
	
	ПолеКомпановкиСпискаНоменклатур = Справочники.ВидыСкидок.ПолеКомпановкиСпискаНоменклатур();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПолейПриОткрытииСервер()
	
	Если Не ЗначениеЗаполнено(ОбщееВремяНачала) Тогда
		ОбщееВремяНачала = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбщееВремяОкончания) Тогда
		ОбщееВремяОкончания = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяОкончанияРаботы");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьОтбораНакопления(Истина);
	
	ТипСкидкиПриИзмененииОбработчик(Неопределено, Истина);
	
	ЗаполнитьСписокВыбораФормыСкидки();
	УстановитьФорматРазмераСкидки();
	
	ТипСкидкиПриИзмененииОбработчик(Неопределено, Истина);
	
	ОбновитьПредставлениеШкалы();
	ОбновитьНастройкиФормыПоФормеСкидки();
	СписокПриИзмененииОбработчик(Неопределено, Истина);
	
	СписокНакопПриИзмененииОбработчик(Неопределено, Истина);
	ФормаСкидкиПриИзменении(Неопределено);
	
	УстановитьВидимостьСтраницыДнейНедели();
	
	Элементы.СоставНатуральнойСкидкиХарактеристикаНоменклатуры.Видимость = 
		УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
		
	БонусыСгорают = Объект.СрокСгоранияБонуса > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПоискПовторовСкидки() Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Если ПоискПовторовНакопление() Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	НастройкиЗаписаны = Ложь;
	
	Если Отказ = Ложь Тогда
		Если НЕ НастройкиЗаписаны Тогда
			ЗаписьНастроек();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Отказ Тогда
		Если Объект.ФормаСкидки <> Перечисления.ФормыСкидки.НатуральнаяСкидка Тогда
			Объект.СоставНатуральнойСкидки.Очистить();
		КонецЕсли;	
		
		Если Объект.ТипСкидки <> Перечисления.ТипыСкидок.НакопительнаяСкидка Тогда
			Объект.ШкалаДиапазонов.Очистить();
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеОтбор = Новый ХранилищеЗначения(КомпоновщикОтбораПрименения.ПолучитьНастройки());
		ТекущийОбъект.ХранилищеОтборНакопления = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТипСкидкиПриИзменении(Элемент)
	ТипСкидкиПриИзмененииОбработчик(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораФормыСкидки()
	
	Элемент = Элементы.ФормаСкидки;
	ДопустимыеФормыСкидки = ПолучитьСписокПоТипу();
	Элемент.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из ДопустимыеФормыСкидки Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыПоФормеСкидки()
	
	// Настройка редактирования полей.
	ЭтоНатуральная	= Объект.ФормаСкидки = Перечисления.ФормыСкидки.НатуральнаяСкидка;
	ЭтоНакопление	= Объект.ТипСкидки = Перечисления.ТипыСкидок.НакопительнаяСкидка;
	ЭтоСуммовая		= Объект.ФормаСкидки = Перечисления.ФормыСкидки.Сумма;
	ЭтоТипСкидка	= Объект.ТипСкидки = Перечисления.ТипыСкидок.Скидка;
	
	Элементы.СуммоваяСкидкаНаКаждуюЕдиницу.Видимость = ЭтоТипСкидка И ЭтоСуммовая;
	Элементы.ГруппаСоставНатуральнойСкидки.Видимость = ЭтоНатуральная;
	Элементы.ГруппаСкидкаПрименения.Видимость = (НЕ ЭтоНатуральная И Не ЭтоНакопление);
	
	Если Объект.НакоплениеБонусов = Перечисления.ФормыСкидки.Количество Тогда
		Элементы.НадписьРазмерностьСкидки3.Заголовок = "";
	Иначе
		Элементы.НадписьРазмерностьСкидки3.Заголовок = "%";
	КонецЕсли;
	
	Если Объект.ТипСкидки = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Бонусы") Тогда
		
		Элементы.РазмерыНакопленияРазмер.Заголовок = ПолучитьЗаголовокРазмера();
		
		Если Объект.НакоплениеБонусов = ПредопределенноеЗначение("Перечисление.ФормыСкидки.Процент") Тогда
			Элементы.РазмерНакопления.МаксимальноеЗначение	= 100;
			Элементы.РазмерНакопления.МинимальноеЗначение	= 0;
			Элементы.РазмерНакопления.ФорматРедактирования	= "ЧЦ=5; ЧДЦ=2; ЧРД=,; ЧН=0,0";
			
			Элементы.РазмерыНакопленияРазмер.МаксимальноеЗначение = 100;
			Элементы.РазмерыНакопленияРазмер.МинимальноеЗначение  = 0;
			Элементы.РазмерыНакопленияРазмер.Формат = "ЧЦ=5; ЧДЦ=2; ЧРД=,; ЧН=0,0";
		Иначе                                                                     
			Элементы.РазмерНакопления.МаксимальноеЗначение	= 0;
			Элементы.РазмерНакопления.МинимальноеЗначение	= 0;
			Элементы.РазмерНакопления.ФорматРедактирования	= "";
		
			Элементы.РазмерыНакопленияРазмер.МаксимальноеЗначение = 0;
			Элементы.РазмерыНакопленияРазмер.МинимальноеЗначение  = 0;
			Элементы.РазмерыНакопленияРазмер.Формат = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоДнямНеделиПриИзменении(Элемент)
	
	УстановитьВидимостьСтраницыДнейНедели();
	
	Если Объект.ОграничиватьПоДнямНедели Тогда
		ЗаполнениеТаблДатВремени();
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыСкидкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаСкидкаНакопления Тогда
		СписокНакопПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормаСкидкиПриИзменении(Элемент)
	УстановитьФорматРазмераСкидки();
	ОбновитьНастройкиФормыПоФормеСкидки();	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРазмераСкидки()
	
	Если Объект.ФормаСкидки = ПредопределенноеЗначение("Перечисление.ФормыСкидки.Процент") Тогда
		Элементы.РазмерСкидки.МаксимальноеЗначение	= 100;
		Элементы.РазмерСкидки.МинимальноеЗначение	= -1000;
		Элементы.РазмерСкидки.ФорматРедактирования	= "ЧЦ=5; ЧДЦ=2; ЧРД=,; ЧН=0,0";
		
		Элементы.РазмерыСкидкиРазмер.МаксимальноеЗначение = 100;
		Элементы.РазмерыСкидкиРазмер.МинимальноеЗначение  = -1000;
		Элементы.РазмерыСкидкиРазмер.Формат = "ЧЦ=5; ЧДЦ=2; ЧРД=,; ЧН=0,0";
		
		Элементы.НадписьРазмерностьСкидки.Заголовок = "%";
	Иначе                                                                     
		Элементы.РазмерСкидки.МаксимальноеЗначение	= 10000000;
		Элементы.РазмерСкидки.МинимальноеЗначение	= -10000000;
		Элементы.РазмерСкидки.ФорматРедактирования	= "";
		
		Элементы.РазмерыСкидкиРазмер.МаксимальноеЗначение = 10000000;
		Элементы.РазмерыСкидкиРазмер.МинимальноеЗначение  = -10000000;
		Элементы.РазмерыСкидкиРазмер.Формат = "";
		
		Если Объект.ФормаСкидки = ПредопределенноеЗначение("Перечисление.ФормыСкидки.Сумма") Тогда
			Элементы.НадписьРазмерностьСкидки.Заголовок = глКраткоеНаименованиеОсновнойВалюты;
		Иначе
			Элементы.НадписьРазмерностьСкидки.Заголовок = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НакоплениеБонусовПриИзменении(Элемент)
	ОбновитьНастройкиФормыПоФормеСкидки();
КонецПроцедуры

&НаКлиенте
Процедура НакоплениеБонусовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТипСкидкиПриИзмененииОбработчик(Элемент, ПриОткрытии = Ложь)
	
	ЭтоНакопление	= Объект.ТипСкидки = ПредопределенноеЗначение("Перечисление.ТипыСкидок.НакопительнаяСкидка");
	ЭтоБонусы		= Объект.ТипСкидки = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Бонусы");
	ЭтоКупоны		= Объект.ТипСкидки = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Купоны");
	ЭтоТипСкидка	= Объект.ТипСкидки = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Скидка");
	ЭтоСуммовая		= Объект.ФормаСкидки = ПредопределенноеЗначение("Перечисление.ФормыСкидки.Сумма");
	
	Если ЭтоНакопление Тогда
		Элементы.ФормаСкидки.Заголовок = "Форма накопления";
	ИначеЕсли ЭтоБонусы Тогда	
		Элементы.ФормаСкидки.Заголовок = "Ограничение зачета бонуса";
	Иначе
		Элементы.ФормаСкидки.Заголовок = "Форма скидки";
	КонецЕсли;	
	
	Если ЭтоБонусы Тогда
		Элементы.РазмерСкидки.Заголовок = "Зачет не более";
	Иначе
		Элементы.РазмерСкидки.Заголовок = "Размер скидки";
	КонецЕсли;
	Элементы.ОтдельныйОтборНакопления.Видимость = (ЭтоБонусы ИЛИ ЭтоНакопление);
	Элементы.ОтдельныйОтборНакопления1.Видимость = (ЭтоБонусы ИЛИ ЭтоНакопление);
	Элементы.НакоплениеБонусов.Видимость = ЭтоБонусы;
	
	Элементы.ГруппаОтборНакопления.Видимость = ((ЭтоБонусы ИЛИ ЭтоНакопление) И Объект.ОтдельныйОтборНакопления);
	Элементы.ГруппаСкидкаНакопления.Видимость = ЭтоБонусы;
	Если Элементы.ГруппаСкидкаНакопления.Видимость Тогда
		Элементы.ГруппаРазмерТекущегоНакопления.Видимость = Не ЭтоБонусы И НЕ СписокНакопления;
		Элементы.ГруппаНакопления.Видимость = ЭтоБонусы И СписокНакопления;
	КонецЕсли;
	
	Элементы.ГруппаШкалаДиапазонов.Видимость = ЭтоНакопление;
	Элементы.НоминалБонуса.Видимость	= ЭтоБонусы;
	Элементы.ДекорацияВалюта.Видимость  = ЭтоБонусы;
	Элементы.СуммоваяСкидкаНаКаждуюЕдиницу.Видимость = ЭтоТипСкидка И ЭтоСуммовая;
	
	Элементы.СрокСгоранияБонуса.Заголовок = ?(ЭтоНакопление,"Срок сгорания накопления (дней)","Срок сгорания бонуса (дней)");
	
	Элементы.ВестиУчетПоНомерамКупонов.Видимость = ЭтоКупоны И Ложь;
	
	Элементы.СрокСгоранияБонуса.Видимость = Ложь;
	Элементы.УстановкаСрокаСгорания.Видимость = ЭтоБонусы;
	БонусыСгорают = ЭтоБонусы И Объект.СрокСгоранияБонуса > 0;
	Элементы.СрокСгоранияБонуса.Видимость = БонусыСгорают;
	
	Элементы.ГруппаАтрибутыБонусов.Видимость = ЭтоБонусы;
	Элементы.ПериодАктивацииНачисленногоБонуса.Видимость = Ложь;
	
	Элементы.ПоДнямНедели.Видимость = НЕ ЭтоНакопление И НЕ ЭтоБонусы;
	Если Элемент <> Неопределено Тогда
		Объект.ОграничиватьПоДнямНедели = Объект.ОграничиватьПоДнямНедели И НЕ ЭтоНакопление И НЕ ЭтоБонусы;
	КонецЕсли;
	УстановитьВидимостьСтраницыДнейНедели();
	
	Элементы.ГруппаСкидкаПрименения.Видимость = НЕ ЭтоНакопление;
	
	ОбновитьПредставлениеШкалы();

	// Изменение данных объекта
	Если НЕ ПриОткрытии Тогда
		
		// Сохранения формы скидки, если в списке форм скидки по выбранному типу есть ранее выбранная форма скидки.
		отборФорм = ПолучитьСписокПоТипу();
		стараяФорма = Объект.ФормаСкидки;
		
		Если отборФорм.НайтиПоЗначению(стараяФорма)  <> Неопределено Тогда
			Объект.ФормаСкидки = стараяФорма;
			
		ИначеЕсли отборФорм.Количество() = 1 Тогда
			Объект.ФормаСкидки = отборФорм[0].Значение;
			ОбновитьНастройкиФормыПоФормеСкидки();
		Иначе
			Объект.ФормаСкидки = ПредопределенноеЗначение("Перечисление.ФормыСкидки.ПустаяСсылка");
			ОбновитьНастройкиФормыПоФормеСкидки();
		КонецЕсли;
		ЗаполнитьСписокВыбораФормыСкидки();
		УстановитьФорматРазмераСкидки();	
		
		Элементы.РазмерыНакопленияРазмер.Заголовок = ПолучитьЗаголовокРазмера();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзмененииОбработчик(Элемент, ПриОткрытии = Ложь)
	
	Элементы.ГруппаСкидки.Видимость = Список;
	Элементы.ГруппаРазмерТекущейСкидки.Видимость = НЕ Список;	

	// Изменение данных объекта
	Если НЕ ПриОткрытии Тогда
		
		Если Не Список Тогда
			Если объект.РазмерыСкидки.Количество()=0 Тогда
				ТекущаяСкидка = 0;
				РазмерСкидкиПриИзменении(Неопределено);
			Иначе	
				ТекущаяСкидка = Объект.РазмерыСкидки[0].Размер;
				Объект.РазмерыСкидки.Очистить();
				нс = Объект.РазмерыСкидки.Добавить();
				нс.Размер = ТекущаяСкидка;
				нс.Номенклатура = Неопределено;
			КонецЕсли;
		Иначе
			Если Элемент <> Неопределено Тогда
				Объект.РазмерыСкидки.Очистить();
				Объект.РазмерыСкидки.Добавить();
				Объект.РазмерыСкидки[0].Номенклатура = Неопределено;
				Объект.РазмерыСкидки[0].Размер = ТекущаяСкидка;
				ТекущаяСкидка = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ Список И объект.РазмерыСкидки.Количество() > 0 Тогда
			ТекущаяСкидка = Объект.РазмерыСкидки[0].Размер;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНакопПриИзмененииОбработчик(Элемент, ПриОткрытии = Ложь)
	Элементы.ГруппаНакопления.Видимость = СписокНакопления;
	Элементы.ГруппаРазмерТекущегоНакопления.Видимость = НЕ СписокНакопления;	
	
	// Изменение данных объекта
	Если НЕ ПриОткрытии Тогда
		
		Если Не СписокНакопления Тогда
			Если объект.РазмерыНакопления.Количество()=0 Тогда
				ТекущаяНакопительнаяСкидка = 0;
				РазмерНакопленияПриИзменении(Неопределено);
			Иначе	
				ТекущаяНакопительнаяСкидка = Объект.РазмерыНакопления[0].Размер;
				Объект.РазмерыНакопления.Очистить();
				нс = Объект.РазмерыНакопления.Добавить();
				нс.Размер = ТекущаяНакопительнаяСкидка;
				нс.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Если НЕ СписокНакопления И объект.РазмерыНакопления.Количество() > 0 Тогда
			ТекущаяНакопительнаяСкидка = Объект.РазмерыНакопления[0].Размер;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
///////////// СОБЫТИЯ ТАБЛИЧНЫХ ЧАСТЕЙ /////////////////////////////////// .

&НаКлиенте
Процедура СоставНатуральнойСкидкиНоменклатураПриИзменении(Элемент)
	текданные = Элементы.СоставНатуральнойСкидки.ТекущиеДанные;
	ед = СоставНатуральнойСкидкиАвтоподстановкаЕдиницы(текданные.Номенклатура);
	текданные.ЕдиницаИзмерения =  ед;
	текданные.Количество = 1;
КонецПроцедуры

&НаСервере
Функция СоставНатуральнойСкидкиАвтоподстановкаЕдиницы(Номенклатура)
	
	Если ЗначениеЗаполнено(Номенклатура.ЕдиницаТоваров) Тогда
		Возврат Номенклатура.ЕдиницаТоваров;
	Иначе	
		Возврат Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ОтдельныйОтборНакопленияПриИзменении(Элемент)
	
	УстановитьВидимостьОтбораНакопления();
	
	Если Объект.ОтдельныйОтборНакопления Тогда
		Элементы.ПанельОтбор.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОтборНакопления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтдельныйОтборНакопления1ПриИзменении(Элемент)
	
	УстановитьВидимостьОтбораНакопления();
	
	Если Объект.ОтдельныйОтборНакопления Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтборНакопления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)	
	СписокПриИзмененииОбработчик(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СписокНакопПриИзменении(Элемент)
	
	Элементы.ГруппаНакопления.Видимость = СписокНакопления;
	Элементы.ГруппаРазмерТекущегоНакопления.Видимость = НЕ СписокНакопления;
	
	Если Не СписокНакопления Тогда
		Если объект.РазмерыНакопления.Количество()=0 Тогда
			ТекущаяНакопительнаяСкидка = 0;
			РазмерНакопленияПриИзменении(Неопределено);
		Иначе	
			ТекущаяНакопительнаяСкидка = Объект.РазмерыНакопления[0].Размер;
			Объект.РазмерыНакопления.Очистить();
			нс = Объект.РазмерыНакопления.Добавить();
			нс.Размер = ТекущаяНакопительнаяСкидка;
			нс.Номенклатура = Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтборуПрименения(Команда)
	
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикОтбораПрименения.Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееВремяОкончанияПриИзменении(Элемент)
	ОбщееВремяОкончания = КонецМинуты(ОбщееВремяОкончания);
КонецПроцедуры

&НаКлиенте
Процедура СоставНатуральнойСкидкиЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текстрока = Элементы.СоставНатуральнойСкидки.ТекущиеДанные;
	Парам = Новый Структура("Отбор", Новый Структура("Владелец",текстрока.Номенклатура));
	Форма = ПолучитьФорму("Справочник.ЕдиницыИзмерения.ФормаВыбора", Парам, ЭтаФорма);
	
	ДанныеВыбора = Форма.ОткрытьМодально();
	
	Если ДанныеВыбора <> Неопределено Тогда
		текстрока.ЕдиницаИзмерения  = ДанныеВыбора;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерСкидкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекущаяСкидка) Тогда
		Если Объект.РазмерыСкидки.Количество() = 1 Тогда
			Объект.РазмерыСкидки[0].Номенклатура = Неопределено;
			Объект.РазмерыСкидки[0].Размер = ТекущаяСкидка;
		Иначе
			новстр= Объект.РазмерыСкидки.Добавить();
			новстр.Номенклатура = Неопределено;
			новстр.Размер = ТекущаяСкидка;
		КонецЕсли;	
	Иначе
		Объект.РазмерыСкидки.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерНакопленияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекущаяНакопительнаяСкидка) Тогда
		Если Объект.РазмерыНакопления.Количество() = 1 Тогда
			Объект.РазмерыНакопления[0].Номенклатура = Неопределено;
			Объект.РазмерыНакопления[0].Размер = ТекущаяНакопительнаяСкидка;
		Иначе
			новстр= Объект.РазмерыНакопления.Добавить();
			новстр.Номенклатура = Неопределено;
			новстр.Размер = ТекущаяНакопительнаяСкидка;
		КонецЕсли;	
	Иначе
		Объект.РазмерыНакопления.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерыНакопленияНоменклатураПриИзменении(Элемент)
	
	ПоискПовторовНакопление();
	
КонецПроцедуры

// --------------- События ТЧ ШкалаДиапазонов.
&НаКлиенте
Процедура ШкалаДиапазоновПриАктивизацииСтроки(Элемент)
	ОбновитьПредставлениеСтроки(Элементы.ШкалаДиапазонов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеИнтервала(ТекущаяСтрока = Неопределено)
	
	ТабличнаяЧасть = Объект.ШкалаДиапазонов;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.ШкалаДиапазонов.ТекущиеДанные;
	КонецЕсли;	
	
	Если ТекущаяСтрока <> Неопределено Тогда
		МаксНижняяГраница = Неопределено;
		СледующаяСтрока = Неопределено;
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			Если (МаксНижняяГраница = Неопределено Или МаксНижняяГраница >= СтрокаТЧ.НижняяГраница)
				И ТекущаяСтрока.НижняяГраница <= СтрокаТЧ.НижняяГраница
				И СтрокаТЧ <> ТекущаяСтрока Тогда
				СледующаяСтрока = СтрокаТЧ;
				МаксНижняяГраница = СтрокаТЧ.НижняяГраница;
			КонецЕсли;
		КонецЦикла;
		
		Если СледующаяСтрока = Неопределено Тогда
			ПредставлениеИнтервала = "От " + СокрЛП(ТекущаяСтрока.НижняяГраница);
		ИначеЕсли ТекущаяСтрока.НижняяГраница = СледующаяСтрока.НижняяГраница Тогда
			ПредставлениеИнтервала = "ОШИБКА: такая нижняя граница уже есть!";
		Иначе
			ПредставлениеИнтервала = "От " + СокрЛП(ТекущаяСтрока.НижняяГраница) + " до " + СокрЛП(СледующаяСтрока.НижняяГраница);
		КонецЕсли;
		Возврат ПредставлениеИнтервала;
	Иначе
		Возврат "";
	КонецЕсли;
	
	
	
КонецФункции // ПолучитьПредставлениеИнтервала()

&НаКлиенте
Процедура ШкалаДиапазоновПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Объект.ШкалаДиапазонов.Сортировать("НижняяГраница");
КонецПроцедуры

&НаКлиенте
Процедура ШкалаДиапазоновНижняяГраницаПриИзменении(Элемент)
	ОбновитьПредставлениеСтроки(Элементы.ШкалаДиапазонов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВидПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	отборФорм = ПолучитьСписокТипов();
	
	ВыбранныйЭлемент = ВыбратьИзСписка(отборФорм, Элемент, отборФорм.НайтиПоЗначению(Объект.ВидПолучателя));
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Объект.ВидПолучателя = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТипов()
	
	списокВидовСкидок = Новый СписокЗначений;
	
	Для Каждого стр Из Перечисления.ВидПолучателя Цикл
		списокВидовСкидок.Добавить(стр);
	КонецЦикла;
	
	Возврат списокВидовСкидок;
	
КонецФункции	

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПрименитьОбщееВремя(Команда)
	
	Если Объект.ВремяПоДнямНедели.Количество() = 0 Тогда
		ЗаполнениеТаблДатВремени();
	КонецЕсли;
	ИзменитьВремя();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТаблДатВремени()
	
	Если Объект.ВремяПоДнямНедели.Количество() = 0 Тогда
		Для Каждого _день Из Перечисления.ДниНедели Цикл
			НовСтр = Объект.ВремяПоДнямНедели.Добавить();
			НовСтр.ДеньНедели = _день;
			НовСтр.Выбран = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСписокПоТипу()
	
	СписокФорм = Новый СписокЗначений;
	Если Объект.ТипСкидки = Перечисления.ТипыСкидок.НакопительнаяСкидка Тогда
		СписокФорм.Добавить(ПредопределенноеЗначение("Перечисление.ФормыСкидки.Сумма"));
		СписокФорм.Добавить(ПредопределенноеЗначение("Перечисление.ФормыСкидки.Количество"));
	ИначеЕсли Объект.ТипСкидки = Перечисления.ТипыСкидок.Бонусы Тогда
		СписокФорм.Добавить(ПредопределенноеЗначение("Перечисление.ФормыСкидки.Сумма"));
		СписокФорм.Добавить(ПредопределенноеЗначение("Перечисление.ФормыСкидки.Процент"));
	ИначеЕсли Объект.ТипСкидки = Перечисления.ТипыСкидок.Скидка ИЛИ 
		Объект.ТипСкидки = Перечисления.ТипыСкидок.Купоны Тогда
		СписокФорм.Добавить(ПредопределенноеЗначение("Перечисление.ФормыСкидки.Процент"));
		СписокФорм.Добавить(ПредопределенноеЗначение("Перечисление.ФормыСкидки.Сумма"));
		СписокФорм.Добавить(ПредопределенноеЗначение("Перечисление.ФормыСкидки.НатуральнаяСкидка"));
	КонецЕсли;
	
	Возврат СписокФорм;
	
КонецФункции

&НаСервере
Процедура НастройкаРасшифровкиСкидокПриОткрытии()
	
	Список = (Объект.РазмерыСкидки.Количество() > 1 ИЛИ (Объект.РазмерыСкидки.Количество() = 1  И ЗначениеЗаполнено(Объект.РазмерыСкидки[0].Номенклатура)));
	Элементы.ГруппаСкидки.Видимость = Список; 
	элементы.ГруппаРазмерТекущейСкидки.Видимость = НЕ Список;
	
	СписокНакопления  = (Объект.РазмерыНакопления.Количество() > 1 ИЛИ (Объект.РазмерыНакопления.Количество() = 1  И ЗначениеЗаполнено(Объект.РазмерыНакопления[0].Номенклатура)));
	Элементы.ГруппаНакопления.Видимость = СписокНакопления;
	Элементы.ГруппаРазмерТекущегоНакопления.Видимость = НЕ СписокНакопления;
	
	элементы.ГруппаСоставНатуральнойСкидки.Видимость = (Объект.ФормаСкидки = Перечисления.ФормыСкидки.НатуральнаяСкидка);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьОтбораНакопления(ПрограммнаяСмена = Ложь)
	
	Если ЗначениеЗаполнено(Объект.ТипСкидки) Тогда 
		типСкидкиНакопления = ТипСкидкиНакопления();
		Если типСкидкиНакопления Тогда
			Элементы.ГруппаОтборНакопления.Видимость = типСкидкиНакопления И Объект.ОтдельныйОтборНакопления;
		Иначе	                   
			Элементы.ГруппаОтборНакопления.Видимость = Ложь;
			Если НЕ ПрограммнаяСмена Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выбранный вид скидки не является накопительным'"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТипСкидкиНакопления()
	
	ПВА = Перечисления.ТипыСкидок;
	Возврат Объект.ТипСкидки = ПВА.Бонусы Или Объект.ТипСкидки = ПВА.НакопительнаяСкидка;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьСтраницыДнейНедели()
	ЭтоНакопление	= (Объект.ТипСкидки = ПредопределенноеЗначение("Перечисление.ТипыСкидок.НакопительнаяСкидка"));
	ЭтоБонусы		= (Объект.ТипСкидки = ПредопределенноеЗначение("Перечисление.ТипыСкидок.Бонусы"));
	Элементы.ГруппаВремяПоДнямНедели.Видимость = Объект.ОграничиватьПоДнямНедели И (НЕ ЭтоНакопление И НЕ ЭтоБонусы);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Настройки накопления
	СхемаКомпоновкиДанных = СправочникОбъект.ПолучитьМакет("ПоляШаблона");
	ВремХранилищеСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВремХранилищеСКД)
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Содержимое = СправочникОбъект.ХранилищеОтборНакопления.Получить();
	
	Если Содержимое <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Содержимое);
	КонецЕсли;
	
	// Настройки скидки
	КомпоновщикОтбораПрименения.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВремХранилищеСКД)
	);
	КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикОтбораПрименения.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Содержимое = СправочникОбъект.ХранилищеОтбор.Получить();
	
	Если Содержимое <> Неопределено Тогда
		КомпоновщикОтбораПрименения.ЗагрузитьНастройки(Содержимое);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиОтбораПоУмолчанию()

&НаКлиенте
Функция ПоискПовторовНакопление()
	
	Если Элементы.РазмерыНакопления.ТекущиеДанные <> Неопределено Тогда
		парамПоиска = Новый Структура("Номенклатура", Элементы.РазмерыНакопления.ТекущиеДанные.Номенклатура);
		повторы = Объект.РазмерыНакопления.НайтиСтроки(парамПоиска);
		
		Если повторы.Количество()>1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не допускаются ввод повторяющихся значений номенклатуры в расшифровке накопления'"));
			ЭтаФорма.ТекущийЭлемент = Элементы.РазмерыНакопления;
			Возврат Истина;
		КонецЕсли;	
		
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПоискПовторовСкидки()
	
	Если Элементы.РазмерыСкидки.ТекущиеДанные <> Неопределено Тогда
		парамПоиска = Новый Структура("Номенклатура", Элементы.РазмерыСкидки.ТекущиеДанные.Номенклатура);
		повторы = Объект.РазмерыСкидки.НайтиСтроки(парамПоиска);
		
		Если повторы.Количество()>1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не допускаются ввод повторяющихся значений номенклатуры в расшифровке скидки'"));
			ЭтаФорма.ТекущийЭлемент = Элементы.РазмерыСкидки;
			Возврат Истина;
		КонецЕсли;	
		
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаписьНастроек()
	об = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВидыСкидок"));
	об.ХранилищеОтбор = Новый ХранилищеЗначения(КомпоновщикОтбораПрименения.ПолучитьНастройки());
	об.ХранилищеОтборНакопления = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	Модифицированность = Ложь;
	об.Записать();
	НастройкиЗаписаны = Истина;
	ЗначениеВДанныеФормы(об, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВремя()
	
	Для Каждого СтрокаДня Из Объект.ВремяПоДнямНедели Цикл
		СтрокаДня.ВремяНачала = ОбщееВремяНачала;
		СтрокаДня.ВремяОкончания = ОбщееВремяОкончания;
		СтрокаДня.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьВремя()

&НаКлиенте
Функция ОбновитьПредставлениеШкалы()
	Для Каждого стр Из Объект.ШкалаДиапазонов Цикл
		ОбновитьПредставлениеСтроки(стр); 
	КонецЦикла;	
	
	
КонецФункции	

&НаКлиенте
Функция ОбновитьПредставлениеСтроки(ТекСтрока)
	
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока.Представление = ПолучитьПредставлениеИнтервала(ТекСтрока);
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПредставлениеШкалы();
	
КонецПроцедуры

// По форме скидки определить заголовок (просто размер или со знаком %).
&НаСервере
Функция ПолучитьЗаголовокРазмера()
	
	Если Объект.ТипСкидки = Перечисления.ТипыСкидок.Бонусы Тогда 
		Возврат "Размер" + ?(Объект.НакоплениеБонусов = Перечисления.ФормыСкидки.Количество, "", " (%)");
	Иначе
		Возврат "Скидка";
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура УстановкаСрокаСгоранияПриИзменении(Элемент)
	
	Элементы.СрокСгоранияБонуса.Видимость = БонусыСгорают;
	Объект.СрокСгоранияБонуса = ?(БонусыСгорают, Макс(Объект.СрокСгоранияБонуса, 1), 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокСгоранияБонусаПриИзменении(Элемент)
	
	Если Объект.СрокСгоранияБонуса = 0 Тогда
		Объект.СрокСгоранияБонуса = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТПОтборПриАктивизацииСтроки(Элемент)
	
	// При изменении в этой процедуре свойства ТолькоПросмотр происходит серверный вызов, провоцирующий бесконечный цикл ПриАктивизацииСтроки
	ПодключитьОбработчикОжидания("НастроитьВидыСравненияДляСпискаНоменклатур", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТПОтборЛевоеЗначениеПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("НастроитьВидыСравненияДляСпискаНоменклатур", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидыСравненияДляСпискаНоменклатур()
	
	Если Элементы.ТПОтбор.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ТПОтбор.ТекущиеДанные.ВидСравнения)
	Тогда
		РедактированиеЗапрещено = Элементы.ТПОтбор.ТекущиеДанные.ЛевоеЗначение = ПолеКомпановкиСпискаНоменклатур;
		Если Элементы.ТПОтборВидСравнения.ТолькоПросмотр <> РедактированиеЗапрещено Тогда
			Элементы.ТПОтборВидСравнения.ТолькоПросмотр = РедактированиеЗапрещено;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидыСравненияДляСпискаНоменклатур(КомпоновщикОтбораПрименения.Настройки.Отбор.Элементы);
	
	Элементы.ТПОтбор.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидыСравненияДляСпискаНоменклатур(ЭлементыОтбора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			УстановитьВидыСравненияДляСпискаНоменклатур(ЭлементОтбора.Элементы);
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпановкиСпискаНоменклатур
			И ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке
		Тогда
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
			
			мТипы = Новый Массив;
			мТипы.Добавить(Тип("СправочникСсылка.Номенклатура"));
			ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов(мТипы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПоле2Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти