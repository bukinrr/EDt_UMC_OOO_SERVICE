
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
			
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Если Не Параметры.Ключ.Пустая() Тогда
		
		НастройкиОтбора = Объект.Ссылка.ХранилищеОтбор.Получить();
		Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора);
		КонецЕсли;
		
		НастройкиОтбораНоменклатура = Объект.Ссылка.ХранилищеОтборНоменклатуры.Получить();
		Если ЗначениеЗаполнено(НастройкиОтбораНоменклатура) Тогда
			КомпоновщикНастроекНоменклатура.ЗагрузитьНастройки(НастройкиОтбораНоменклатура);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ТекущийОбъект.ИнтеграцияСВнешнимСервисом Тогда
		Если Не ЗначениеЗаполнено(ТекущийОбъект.Клиника) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена клиника'"),,"Объект.Клиника");
			Отказ = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущийОбъект.Прейскурант) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен Прейскурант'"),,"Объект.Прейскурант");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекущийОбъект.ХранилищеОтбор = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
		ТекущийОбъект.ХранилищеОтборНоменклатуры = Новый ХранилищеЗначения(КомпоновщикНастроекНоменклатура.ПолучитьНастройки());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте                                   
Процедура ПроверитьПодключениеFTP(Команда)  
	
	ПроверитьПодключение("FTP");
	
КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СсылкаРегЗаданиеУдалениеБрониНажатие(Элемент)
	ИД = ОткрытьФормуРегЗаданияОтменыБрони();
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание",Новый Структура("Идентификатор, Действие",ИД,"Изменить"));
КонецПроцедуры

&НаКлиенте
Процедура СсылкаРегЗаданиеОтправкаFTP(Элемент)
	ИД = ОткрытьФормуРегЗаданияОтправкиНаFTP();
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание",Новый Структура("Идентификатор, Действие",ИД,"Изменить"));
КонецПроцедуры

&НаКлиенте
Процедура СсылкаРегЗаданиеОтправкаНоменклатурыИЦенFTP(Элемент)
	ИД = ОткрытьФормуРегЗаданияОтправкиНоменклатурыИЦенНаFTP();
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание",Новый Структура("Идентификатор, Действие",ИД,"Изменить"));
КонецПроцедуры

&НаКлиенте
Процедура СсылкаРегЗаданиеЗагрузкаЛОFTP(Элемент)
	ИД = ОткрытьФормуРегЗаданияЗагрузкиЛистовОжиданияСFTP();
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание",Новый Структура("Идентификатор, Действие",ИД,"Изменить"));
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияСВнешнимСервисомПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверитьПодключение(ВидТранспортаСтрокой) 
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	ПроверитьПодключениеНаСервере(Отказ, ВидТранспортаСтрокой);
	
	Если Отказ Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось установить подключение.'"));
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Подключение успешно установлено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере(Отказ, ВидТранспортаСтрокой)    
	
	ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, Перечисления.ВидыТранспортаСообщенийОбмена[ВидТранспортаСтрокой]);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	Если Метаданные.Справочники.Найти("ВидыВремениГрафика") = Неопределено Тогда
		Элементы.ВыгружаемыеВидыВремени.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Клиника.АвтоОтметкаНезаполненного = Не Объект.ИнтеграцияСВнешнимСервисом;
	Элементы.Прейскурант.АвтоОтметкаНезаполненного = Не Объект.ИнтеграцияСВнешнимСервисом;
	
КонецПроцедуры

&НаСервере
Функция ОткрытьФормуРегЗаданияОтменыБрони()
	Возврат РегламентныеЗадания.НайтиПредопределенное("ОтменаПросроченныхБроней").УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ОткрытьФормуРегЗаданияОтправкиНаFTP()
	Возврат РегламентныеЗадания.НайтиПредопределенное("ОтправитьРасписаниеИСотрудниковНаFTP").УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ОткрытьФормуРегЗаданияЗагрузкиЛистовОжиданияСFTP()
	Возврат РегламентныеЗадания.НайтиПредопределенное("ИмпортЛистовОжиданияСFTP").УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ОткрытьФормуРегЗаданияОтправкиНоменклатурыИЦенНаFTP()
	Возврат РегламентныеЗадания.НайтиПредопределенное("ОтправитьНоменклатуруИЦеныНаFTP").УникальныйИдентификатор;
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Настройки сотрудников
	СхемаКомпоновкиДанных = СправочникОбъект.ПолучитьМакет("ПоляШаблона");
	ВремХранилищеСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВремХранилищеСКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Содержимое = СправочникОбъект.ХранилищеОтбор.Получить();
	
	Если Содержимое <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Содержимое);
	КонецЕсли;
	
	// Настройки номенклатуры
	СхемаКомпоновкиДанных = СправочникОбъект.ПолучитьМакет("ПоляШаблонаНоменклатуры");
	ВремХранилищеСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	КомпоновщикНастроекНоменклатура.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВремХранилищеСКД));
	КомпоновщикНастроекНоменклатура.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекНоменклатура.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Содержимое = СправочникОбъект.ХранилищеОтборНоменклатуры.Получить();
	
	Если Содержимое <> Неопределено Тогда
		КомпоновщикНастроекНоменклатура.ЗагрузитьНастройки(Содержимое);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	Элементы.ГруппаОтменаПросроченныхБроней.Доступность = Не Объект.ИнтеграцияСВнешнимСервисом;
	
	Элементы.Клиника.АвтоОтметкаНезаполненного = Не Объект.ИнтеграцияСВнешнимСервисом;
	Элементы.Прейскурант.АвтоОтметкаНезаполненного = Не Объект.ИнтеграцияСВнешнимСервисом;
КонецПроцедуры

#КонецОбласти
