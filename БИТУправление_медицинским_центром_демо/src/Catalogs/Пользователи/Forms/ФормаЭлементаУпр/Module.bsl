#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мЭтоНовыйЭлементСправочника = Параметры.Ключ.Пустая();
	
	ОбновитьДанныеПользователя();
	
	РаботаСФормамиСервер.УстановитьУсловноеОформлениеПоляКонтактнойИнфомрации(КонтактнаяИнформация);
	НастроитьТабличныеЧасти();
	
	Если ЕстьПравоАдминистрирования() Тогда
		
		ПерезаполнитьРоли();
		ОбновитьПараметрыПользователя(ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"]);
		
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Профиль) Тогда
			ПерезаполнитьНастройки();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Код) Тогда
			КэшИмя = ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"];
		КонецЕсли;
		Элементы.РолиРольПрисвоена.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Профиль);
		// Заполнение списка выбора языка.
		Если Метаданные.Языки.Количество() < 2 Тогда
			Элементы.ЯзыкИнтерфейсаПрограммы.Видимость = Ложь;
		Иначе
			Для Каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
				Элементы.ЯзыкИнтерфейсаПрограммы.СписокВыбора.Добавить(МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
			КонецЦикла;
		КонецЕсли;
		
		// Заполнение списка выбора режимов запуска.
		Для Каждого РежимЗапускаПриложения Из РежимЗапускаКлиентскогоПриложения Цикл
			ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапускаПриложения);
			ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
			Элементы.РежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапускаПриложения));
		КонецЦикла;
		Элементы.ПользовательИнфБазыПользовательОС.ТолькоПросмотр = Не АутентификацияОС;
		Элементы.ГруппаСтандартнаяАутентификация.ТолькоПросмотр = Не Аутентификация1С;
	Иначе
		Элементы.Аутентификация.Видимость = Ложь;
		Элементы.Роли.Видимость = Ложь;
		Элементы.ГруппаСертфикатыЭЦП.Видимость = Ложь;
		Элементы.КонтактнаяИнформацияКоманднаяПанель.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЕстьПравоАдминистрирования() Тогда 
		Если КэшИмя <> "" 
			И Не ЕстьПользовательИБ(КэшИмя) 
		Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(НСтр("ru = 'В Информационной базе отсутствует пользователь, соответствующий этому Пользователю из справочника. Создать нового пользователя информацинной базы?'"), Режим, 20, КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СоздатьНовогоПользователяИБ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ЕстьПравоАдминистрирования() Тогда 

		Если ЗначениеЗаполнено(КэшИмя)
			И КэшИмя <> ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"]
			И ПользователиИнформационнойБазы.НайтиПоИмени(ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"]) <> Неопределено 
		Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Пользователь с таким именем уже зарегистрирован в информационной базе!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
		Если Пароль <> ПодтверждениеПароля Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Введенные пароль и подтверждение пароля не совпадают!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
		ЗаписатьПользователяИБ();
		СоздатьНовогоПользователяИБ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНастройки();
	НастроитьТабличныеЧасти();
	КэшИмя = ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтактнаяИнформацияИзменение" Тогда
		Если Параметр = Объект.Ссылка Тогда
			Элементы.КонтактнаяИнформация.Обновить();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КИСоздать(Команда)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломДобавления(Элементы.КонтактнаяИнформация, Ложь, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КИИзменить(Команда)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломИзменения(Элементы.КонтактнаяИнформация, ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура КИУдалить(Команда)
	КонтактнаяИнформацияКлиент.УдалитьКИ(Объект, Элементы.КонтактнаяИнформация);
КонецПроцедуры

&НаКлиенте
Процедура КИОсновная(Команда)
	КонтактнаяИнформацияКлиент.ОсновнаяКИ_ПрисвоитьНаФорме(Объект, Элементы.КонтактнаяИнформация, Элементы.КонтактнаяИнформацияКИОсновная);
КонецПроцедуры

#Область МашиночитаемыеДоверенности

&НаКлиенте
Процедура СоздатьМЧД(Команда)
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Пользователь", Объект.Ссылка));
	Оповещение = Новый ОписаниеОповещения("СоздатьМЧД_Завершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.МашиночитаемыеДоверенности.ФормаЗаписи", ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМЧД_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.МЧД.Обновить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПоУмолчанию = Истина Тогда
			Элементы.КонтактнаяИнформацияКИОсновная.Пометка = Истина;
		Иначе	
			Элементы.КонтактнаяИнформацияКИОсновная.Пометка = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломДобавления(Элемент, Отказ, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	КонтактнаяИнформацияКлиент.КонтактнаяИнформацияСписокПередНачаломИзменения(Элементы.КонтактнаяИнформация, ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	ПерезаполнитьРоли();
	ПерезаполнитьНастройки();
	Элементы.РолиРольПрисвоена.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Профиль);
	
	Для Каждого СтрокаДерева Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНастроек.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС", , Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПароляПриИзменении(Элемент)
	Если Пароль <> ПодтверждениеПароля Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Введенные пароли не совпадают!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияОСПриИзменении(Элемент)
	Элементы.ПользовательИнфБазыПользовательОС.ТолькоПросмотр = НЕ АутентификацияОС;
КонецПроцедуры

&НаКлиенте
Процедура Аутентификация1СПриИзменении(Элемент)
	Элементы.ГруппаСтандартнаяАутентификация.ТолькоПросмотр = НЕ Аутентификация1С;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ПерезаполнитьРоли();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоСоздание(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		СтандартнаяОбработка = Ложь;
		ФизЛицо = ОбщегоНазначенияСервер.ФункцияМенеджера("Справочники.ФизическиеЛица", "СоздатьФизЛицоПоСотруднику", Объект.Сотрудник);
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ПоказатьЗначение(, ФизЛицо);
			Объект.ФизическоеЛицо = ФизЛицо;
			Модифицированность = Истина;
		Иначе
			ЗначенияЗаполнения = Новый Структура("Наименование", Строка(Объект.Сотрудник));
			ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), Элементы.ФизическоеЛицо, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Объект.ФизическоеЛицо.Пустая()
		И Не Объект.Сотрудник.Пустая()
	Тогда
		СтандартнаяОбработка = Ложь;
		ФизЛицо = ОбщегоНазначенияСервер.ФункцияМенеджера("Справочники.ФизическиеЛица", "СоздатьФизЛицоПоСотруднику", Объект.Сотрудник);
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			Объект.ФизическоеЛицо = ФизЛицо;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура Обновляет данные пользователя
&НаСервере
Процедура ОбновитьДанныеПользователя()
	
	ЗаполнитьДерево();
	
КонецПроцедуры

// Процедура обновляет информацию в таблице настроек
&НаСервере
Процедура ЗаполнитьДерево()
	
	Дерево = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Настройки.Родитель,
	|	Настройки.Ссылка,
	|	Настройки.ЭтоГруппа,
	|	ЗначениеНастроек.Значение
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь)
	|ГДЕ
	|	(НЕ Настройки.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Настройки.ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";
	
	Запрос.УстановитьПараметр("Пользователь", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Родитель.Пустая() Тогда
			СтрокаГруппы = Дерево.Строки.Найти(Выборка.Родитель, "Настройка", Истина);
			Если СтрокаГруппы=Неопределено Тогда
				СтрокаГруппы = Дерево.Строки.Добавить();
				СтрокаГруппы.Настройка = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;
		Иначе
			СтрокаГруппы = Дерево;
		КонецЕсли;		
		
		СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
		СтрокаНастройки.Настройка = Выборка.Ссылка;
		
		Если Параметры.Ключ.Пустая() ИЛИ Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			Если Не Выборка.ЭтоГруппа Тогда
				СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение();
			КонецЕсли;
		Иначе
			СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		КонецЕсли;
		
		СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоНастроек);	
	
КонецПроцедуры

// Процедура выполняет запись значений настроек в регистр сведений.
&НаСервере
Процедура ОбновитьНастройки()
	
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Использование = Истина;
	Набор.Отбор.Пользователь.Значение = Объект.Ссылка;
	Дерево = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	ЗаполнитьНаборЗаписей(Дерево.Строки, Набор);
	Набор.Записать();
	
КонецПроцедуры

// Процедура заполняет набор записей регистра сведений значениями настроек.
&НаСервере
Процедура ЗаполнитьНаборЗаписей(СтрокиДерева, НаборЗаписей)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не СтрокаДерева.ЭтоГруппа Тогда
			
			Если СтрокаДерева.Настройка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = НаборЗаписей.Добавить();
			Запись.Пользователь = Объект.Ссылка;
			Запись.Настройка = СтрокаДерева.Настройка;
			Запись.Значение = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
			
		Иначе
			
			ЗаполнитьНаборЗаписей(СтрокаДерева.Строки, НаборЗаписей)
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастроитьТабличныеЧасти()
	
	КонтактнаяИнформация.Параметры.УстановитьЗначениеПараметра("Объект", Объект.Ссылка);
	КонтактнаяИнформация.Параметры.УстановитьЗначениеПараметра("ИмяМетаданных", "Пользователи");
	РаботаСФормамиСервер.УстановитьОтборСписка("Объект", Объект.Ссылка, КонтактнаяИнформация);
	
	РаботаСФормамиСервер.УстановитьОтборСписка("Пользователь", Объект.Ссылка, СертификатыЭЦП); // Сертификаты ЭЦП.
	РаботаСФормамиСервер.УстановитьОтборСписка("Пользователь", Объект.Ссылка, МЧД); // Машиночитаемые доверенности.
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиИзПрофиля(СтрокиДерева, НастройкиИзПрофиля)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Не СтрокаДерева.ЭтоГруппа Тогда
			Если СтрокаДерева.Настройка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаПрофиля из НастройкиИзПрофиля Цикл
				Если СтрокаПрофиля.Настройка = СтрокаДерева.Настройка
					И Не (ЗначениеЗаполнено(СтрокаДерева.Значение) И Не ЗначениеЗаполнено(СтрокаПрофиля.Значение) И ТипЗнч(СтрокаДерева.Значение)<>Тип("Булево"))
				Тогда
					СтрокаДерева.Значение = СтрокаПрофиля.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла
		Иначе
			ЗаполнитьНастройкиИзПрофиля(СтрокаДерева.Строки, НастройкиИзПрофиля)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНастройки()
	// Получим настройки из профиля 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиПользователейНастройки.Значение КАК Значение,
	|	ПрофилиПользователейНастройки.Настройка КАК Настройка
	|ИЗ
	|	Справочник.ПрофилиПользователей.Настройки КАК ПрофилиПользователейНастройки
	|ГДЕ
	|	ПрофилиПользователейНастройки.Ссылка = &Профиль
	|	И ПрофилиПользователейНастройки.Используется";	
	Запрос.УстановитьПараметр("Профиль", Объект.Профиль);
	НастройкиИзПрофиля = Запрос.Выполнить().Выгрузить();
	
	// Исправим настройки по настройкам из профиля	
	Настройки = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	ЗаполнитьНастройкиИзПрофиля(Настройки.Строки, НастройкиИзПрофиля);
	ЗначениеВДанныеФормы(Настройки, ДеревоНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРоли()
	мРолей = ЗаполнитьРолиСервер(ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"], Объект.Профиль);
	Роли.Очистить();
	Для Каждого Элемент Из мРолей Цикл
		ЗаполнитьЗначенияСвойств(Роли.Добавить(),Элемент);
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция ЗаполнитьРолиСервер(ИмяПользователяБД,Профиль)
	мРоли = Новый Массив();
	Если НЕ ЗначениеЗаполнено(Профиль) Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяБД);
		Для Каждого Роль Из Метаданные.Роли Цикл
			Если ПользовательИБ <> Неопределено Тогда
				РольПрисвоена = ПользовательИБ.Роли.Содержит(Роль);		
			Иначе
				РольПрисвоена = Ложь;
			КонецЕсли;
			мРоли.Добавить(Новый Структура("Роль, РольПредставление, РольПрисвоена",Роль.Имя, Роль.Синоним, РольПрисвоена));
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиПользователейРоли.Роль КАК Роль
		|ИЗ
		|	Справочник.ПрофилиПользователей.Роли КАК ПрофилиПользователейРоли
		|ГДЕ
		|	ПрофилиПользователейРоли.Ссылка = &Профиль";
		Запрос.УстановитьПараметр("Профиль", Профиль);
		РезультатЗапроса = Запрос.Выполнить();
		тзРолиПрофиля = РезультатЗапроса.Выгрузить();
		Для Каждого Роль Из Метаданные.Роли Цикл
			Отбор = Новый Структура("Роль",Роль.Имя);
			Строки = тзРолиПрофиля.НайтиСтроки(Отбор);	
			РольПрисвоена = ? (Строки.Количество() > 0, Истина, Ложь);
			мРоли.Добавить(Новый Структура("Роль, РольПредставление, РольПрисвоена",Роль.Имя, Роль.Синоним, РольПрисвоена));
		КонецЦикла;
	КонецЕсли;
	Возврат мРоли;
КонецФункции

&НаСервере
Процедура ЗаписатьПользователяИБ()
	
	Если ЗначениеЗаполнено(КэшИмя)
		И Не СоздатьНовогоПользователяИБ
	Тогда
		// Записываем уже существующего пользователя, поищем кем он был раньше.
		ТекущийПользовательИБ	=	ПользователиИнформационнойБазы.НайтиПоИмени(КэшИмя);
		// Если в справочнике пользователь есть, а в ИБ нет, то не будет записывать его заново.
		Если ТекущийПользовательИБ = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе 
		ТекущийПользовательИБ	=	ПользователиИнформационнойБазы.НайтиПоИмени(ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"]);
		Если ТекущийПользовательИБ = Неопределено Тогда
			ТекущийПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			// В базе уже есть такой пользователь, мы пытаемся создать нового с таким же именем
			// Такой случай должен был отсечься на предыдущем этапе.
			сд = 1;
		КонецЕсли;
	КонецЕсли;
	// Основные параметры пользователя
	ТекущийПользовательИБ.Имя		= ОтраслевыеДополнения.КонтрольКорректностиФИО(Объект.Код)["Наименование"];
	ТекущийПользовательИБ.ПолноеИмя	= Объект.Наименование;
	// Перезаполним роли пользователя 
	ТекущийПользовательИБ.Роли.Очистить();
	Для Каждого Строка Из Роли Цикл
		Если Строка.РольПрисвоена Тогда
			РольПоСтроке = Метаданные.Роли.Найти(Строка.Роль);
			ТекущийПользовательИБ.Роли.Добавить(РольПоСтроке);
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные параметры пользователя
	ТекущийПользовательИБ.АутентификацияOpenID = АутентификацияOpenID;
	ТекущийПользовательИБ.АутентификацияОС = АутентификацияОС;
	ТекущийПользовательИБ.АутентификацияСтандартная = Аутентификация1С;
	Если (ТекущийПользовательИБ.ПарольУстановлен И Пароль <> "********") ИЛИ (НЕ ТекущийПользовательИБ.ПарольУстановлен И Пароль <> "") Тогда
		ТекущийПользовательИБ.Пароль = Пароль;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РежимЗапуска) Тогда
		Для Каждого РежимЗапускаПриложения Из РежимЗапускаКлиентскогоПриложения Цикл
			ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапускаПриложения);
			ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
			Если РежимЗапуска = ИмяЗначения Тогда
				ТекущийПользовательИБ.РежимЗапуска = РежимЗапускаПриложения;
			КонецЕсли;
		КонецЦикла;
		
		ТекущийПользовательИБ.ПользовательОС = ПользовательИнфБазыПользовательОС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЯзыкИнтерфейсаПрограммы) Тогда
		Для Каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Если МетаданныеЯзыка.Имя = ЯзыкИнтерфейсаПрограммы тогда
				ТекущийПользовательИБ.Язык = МетаданныеЯзыка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекущийПользовательИБ.ПоказыватьВСпискеВыбора = ПоказыватьВСпискеВыбора;
	ТекущийПользовательИБ.ЗапрещеноИзменятьПароль = ПользователюЗапрещеноИзменятьПароль;
	ТекущийПользовательИБ.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыПользователя(Наименование)
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Наименование);
	Если ТекущийПользовательИБ <> Неопределено Тогда
		// Дополнительные параметры пользователя
		АутентификацияOpenID 				= ТекущийПользовательИБ.АутентификацияOpenID;
		АутентификацияОС 					= ТекущийПользовательИБ.АутентификацияОС ;
		Аутентификация1С 					= ТекущийПользовательИБ.АутентификацияСтандартная ;
		Если  ТекущийПользовательИБ.ПарольУстановлен Тогда
			Пароль		 					= "********";
			ПодтверждениеПароля = Пароль;
		КонецЕсли;
		
		Для каждого РежимЗапускаПриложения Из РежимЗапускаКлиентскогоПриложения Цикл
			ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапускаПриложения);
			ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
			Если ТекущийПользовательИБ.РежимЗапуска = РежимЗапускаПриложения Тогда
				РежимЗапуска 			= ИмяЗначения;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
			Если МетаданныеЯзыка = ТекущийПользовательИБ.Язык тогда
				ЯзыкИнтерфейсаПрограммы= МетаданныеЯзыка.Имя;
			КонецЕсли;
		КонецЦикла;
		ПоказыватьВСпискеВыбора 			= ТекущийПользовательИБ.ПоказыватьВСпискеВыбора;
		ПользователюЗапрещеноИзменятьПароль = ТекущийПользовательИБ.ЗапрещеноИзменятьПароль ;
		ПользовательИнфБазыПользовательОС	= ТекущийПользовательИБ.ПользовательОС ;
	КонецЕсли;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЕстьПользовательИБ(Имя)
	
	Возврат ПользователиИнформационнойБазы.НайтиПоИмени(Имя) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПравоАдминистрирования()
	
	Возврат ПравоДоступа("Администрирование", Метаданные);
	
КонецФункции

#КонецОбласти
