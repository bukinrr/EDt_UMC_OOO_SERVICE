#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПроверки; // ИнтеграцияМДЛПМедицинаКлиент.НовыеПараметрыПроверкиНаККТ - 

#КонецОбласти


&НаКлиенте
Процедура ОтменаОперации(Команда)
	ОтменитьОперацию();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОперацию()
	
	ПараметрыПроверки.ПрерватьОперацию = Истина;
	ЗакрытьОкно(ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОкно(РезультатЗакрытия = Ложь)
	
	ЗакрытиеОкнаРазрешено = Истина;
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Прогресс.Видимость = Ложь;
	
	ДанныеСтрокиСообщения = Новый Массив();
	ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Подготовка к проверке средствами ККТ пожалуйста, подождите...'"));
	
	Элементы.ДекорацияПояснение.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтрокиСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВладелецФормы <> Источник Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "НачалоПроверки" Тогда
		
		ПараметрыПроверки = Параметр;
		ТекущаяОперация   = ВыполняемыеОперации().ЛокальнаяПроверка;
		
		СледующийШаг();
		
	КонецЕсли;
	
	НастроитьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или ЗакрытиеОкнаРазрешено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняемыеОперации()
	
	ВозвращаемоеЗначение= Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЛокальнаяПроверка", "ЛокальнаяПроверка");
	ВозвращаемоеЗначение.Вставить("УдаленнаяПроверка", "УдаленнаяПроверка");
	ВозвращаемоеЗначение.Вставить("Подтверждение",     "Подтверждение");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура СледующийКод()
	
	ТекущаяОперация                 = ВыполняемыеОперации().ЛокальнаяПроверка;
	ПараметрыПроверки.ТекущийИндекс = ПараметрыПроверки.ТекущийИндекс + 1;
	СледующийШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийШаг(Знач ПаузаДоСледующегоШага = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПаузаДоСледующегоШага) Тогда
		//ПаузаДоСледующегоШага = 0.1;
		ПаузаДоСледующегоШага = 2;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнениеШагаПроверки", ПаузаДоСледующегоШага, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнениеШагаПроверки()
	
	//TODO:
	Если ПараметрыПроверки.ПроверяемыеКМ.Количество() = 0
		Или ПараметрыПроверки.ТекущийИндекс > ПараметрыПроверки.ПроверяемыеКМ.ВГраница()
		Или ЗначениеЗаполнено(ПараметрыПроверки.Результат.ТекстОшибки)
		Или ПараметрыПроверки.ПрерватьОперацию Тогда
		
		ОбработкаРезультатаПроверкиСредствамиККТ();
			
		ЗакрытьОкно(ПараметрыПроверки);
			
		Возврат;
	
	КонецЕсли;
	
	НастроитьПредставление();
	
	ВыполняемыеОперации = ВыполняемыеОперации();
	
	Если ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
		
		ЛокальнаяПроверкаИОтправкаЗапроса();
		
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.УдаленнаяПроверка Тогда
		
		ПолучениеРезультатаУдаленнойПроверки();
		
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.Подтверждение Тогда
		
		ПодтверждениеКодаМаркировки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальнаяПроверкаИОтправкаЗапроса()
	
	ПроверяемыйКМ   = ПараметрыПроверки.ПроверяемыеКМ[ПараметрыПроверки.ТекущийИндекс];
	РезультатПроверки = ПараметрыПроверки.Результат.ДанныеПроверки[ПроверяемыйКМ.УИД];
	
	ПараметрыЗапросаКМ = МенеджерОборудованияКлиентСервер.ПараметрыЗапросКМ();
	ПараметрыЗапросаКМ.ИдентификаторЗапроса			= ПроверяемыйКМ.ИдентификаторЗапроса;
	ПараметрыЗапросаКМ.ОжидатьПолучениеОтветаОИСМ	= (Не РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ);
	ПараметрыЗапросаКМ.Количество					= ПроверяемыйКМ.Количество;
	//ПараметрыЗапросаКМ.ДробноеКоличество			= ПроверяемыйКМ.ДробноеКоличество;	
	ПараметрыЗапросаКМ.КонтрольнаяМарка				= ПроверяемыйКМ.КонтрольнаяМарка;
	//КодЕдиницыИзмерения.МераКоличестваПредметаРасчета =ПроверяемыйКМ.МераКоличестваПредметаРасчета; 
	ПараметрыЗапросаКМ.ПланируемыйСтатусТовара		= ПроверяемыйКМ.ПланируемыйСтатусТовара;
	
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапросаКМ.КонтрольнаяМарка) Тогда
		РезультатПроверки.ТребуетсяПолныйКодМаркировки = Истина;
		СледующийКод();
		Возврат;
	КонецЕсли;
	
	ЛокальнаяПроверкаСредствамиККТЗавершение = Новый ОписаниеОповещения(
		"ЛокальнаяПроверкаСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияКлиент.НачатьЗапросКМ(
		ЛокальнаяПроверкаСредствамиККТЗавершение,
		ПараметрыПроверки.ФормаОсновногоОбъектаУникальныйИдентификатор,
		ПараметрыЗапросаКМ,
		ПараметрыПроверки.ИдентификаторККТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРезультатаУдаленнойПроверки()
	
	УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение = Новый ОписаниеОповещения(
		"УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияКлиент.НачатьПолученияРезультатовЗапросаКМ(
		УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение,
		ПараметрыПроверки.ФормаОсновногоОбъектаУникальныйИдентификатор,
		Неопределено,
		ПараметрыПроверки.ИдентификаторККТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеКодаМаркировки()
	
	ПроверяемыйКМ									= ПараметрыПроверки.ПроверяемыеКМ[ПараметрыПроверки.ТекущийИндекс];
	ПараметрыПодтвержденияКМ						= МенеджерОборудованияКлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса	= ПроверяемыйКМ.ИдентификаторЗапроса;
	
	ПодтверждениеКодаМаркировкиНаККТЗавершение = Новый ОписаниеОповещения(
		"ПодтверждениеКодаМаркировкиНаККТЗавершение",
		ЭтотОбъект,
		ПараметрыПроверки);
	
	МенеджерОборудованияКлиент.НачатьПодтверждениеКМ(
		ПодтверждениеКодаМаркировкиНаККТЗавершение,
		ПараметрыПроверки.ФормаОсновногоОбъектаУникальныйИдентификатор,
		ПараметрыПодтвержденияКМ,
		ПараметрыПроверки.ИдентификаторККТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаПроверкиСредствамиККТ()
	
	Для Каждого СтрокаПроверки Из ПараметрыПроверки.Результат.ПроверяемыеКМ Цикл
		
		РезультатПроверкиСтроки = ПараметрыПроверки.Результат.ДанныеПроверки[СтрокаПроверки.УИД];
			
		ДанныеПредставления = ИнтеграцияМДЛПМедицинаКлиентСервер_БИТ.ДанныеПредставленияРезультатовПроверкиСредствамиККТ(РезультатПроверкиСтроки);
		
		Если ДанныеПредставления.ЕстьОшибки Тогда
			РезультатПроверкиСтроки.ПредставлениеВЧеке = ДанныеПредставления.ПредставлениеВЧеке;
			РезультатПроверкиСтроки.ТекстОшибки        = ДанныеПредставления.ОписаниеОшибок;
			ПараметрыПроверки.Результат.ЕстьОшибки     = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохраним результаты проверки в регистре РезультатыПроверкиКМНаККТ
	СсылкаНаОбъект        = ПараметрыПроверки.СсылкаНаОбъект;
	
	ИнтеграцияМДЛПМедицинаВызовСервера_БИТ.СохранитьРезультатПроверкиСредствамиККТ(
		ПараметрыПроверки.Результат,
		СсылкаНаОбъект)
	
КонецПроцедуры

&НаКлиенте
Функция ТекстДляЗаписиВЛогЗапросов(Операция, ПараметрыПроверки, ЗапросXML = Неопределено, РезультатXML = Неопределено)
	
	СтрокиЛога = Новый Массив;
	
	СтрокиЛога.Добавить(СтрШаблон(
		НСтр("ru = 'Операция: %1 (%2)'"),
		Операция,
		ПараметрыПроверки.ИдентификаторККТ));
	
	Если ЗначениеЗаполнено(ЗапросXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Запрос:'"));
		СтрокиЛога.Добавить(ЗапросXML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатXML) Тогда
		СтрокиЛога.Добавить(НСтр("ru = 'Результат:'"));
		СтрокиЛога.Добавить(РезультатXML);
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиЛога, Символы.ПС);
	
КонецФункции

&НаКлиенте
Процедура НастроитьПредставление()
	
	ПроверяемыйКМ			= ПараметрыПроверки.ПроверяемыеКМ[ПараметрыПроверки.ТекущийИндекс]; 
	КодМаркировки			= ПроверяемыйКМ.ШтрихкодУпаковки;
	КоличествоЭлементов		= ПараметрыПроверки.ПроверяемыеКМ.Количество();
	НомерТекущегоЭлемента	= ПараметрыПроверки.ТекущийИндекс + 1;
	ВыполняемыеОперации		= ВыполняемыеОперации();
	Суффикс					= Неопределено;
	
	ДанныеСтрокиСообщения = Новый Массив();
	Если ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется локальная проверка кода маркировки'"));
		Суффикс = НСтр("ru = 'на ККТ. Пожалуйста, подождите...'");
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.УдаленнаяПроверка Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется проверка статуса кода маркировки ОИСМ'"));
		Суффикс = НСтр("ru = 'средствами ККТ. Пожалуйста, подождите...'");
	ИначеЕсли ТекущаяОперация = ВыполняемыеОперации.Подтверждение Тогда
		ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется подтверждение кода маркировки'"));
		Суффикс = НСтр("ru = 'на ККТ. Пожалуйста, подождите...'");
	КонецЕсли;
	
	ДанныеСтрокиСообщения.Добавить(" ");
	ДанныеСтрокиСообщения.Добавить(Новый ФорматированнаяСтрока(КодМаркировки,,,, "СкопироватьШтриховойКодВБуферОбмена"));
	
	Если КоличествоЭлементов > 1 Тогда
		
		Элементы.Прогресс.РасширеннаяПодсказка.Заголовок = СтрШаблон(
			НСтр("ru = 'Код маркировки %1 из %2'"),
			НомерТекущегоЭлемента,
			КоличествоЭлементов);
		
		Элементы.Прогресс.Видимость = Истина;
		
		Если КоличествоЭлементов <> 0 Тогда
			Прогресс = Окр(НомерТекущегоЭлемента / КоличествоЭлементов * 100);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСтрокиСообщения.Добавить(Символы.ПС);
	Если ЗначениеЗаполнено(Суффикс) Тогда
		ДанныеСтрокиСообщения.Добавить(Суффикс);
	КонецЕсли;
	
	Элементы.ДекорацияПояснение.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтрокиСообщения);
	
КонецПроцедуры

#Область ОписаниеОповещений

&НаКлиенте
Процедура ЛокальнаяПроверкаСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ПрерватьОперацию Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда
		ВыходныеПараметры =  ДанныеОтвета;
	Иначе
		ВыходныеПараметры = Неопределено;
	КонецЕсли;
	
	ПроверяемыйКМ				= ПараметрыПроверки.ПроверяемыеКМ[ПараметрыПроверки.ТекущийИндекс];
	РезультатПроверкиКМ			= ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ПроверяемыйКМ.УИД);
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование
		И ВыходныеПараметры <> Неопределено Тогда
		
		ДанныеРезультата = Новый Массив();
		
		Если ВыходныеПараметры.Свойство("РезультатXML")
			И ЗначениеЗаполнено(ВыходныеПараметры.РезультатXML) Тогда
			ДанныеРезультата.Добавить(ВыходныеПараметры.РезультатXML);
		КонецЕсли;
		
		Если Не ДанныеОтвета.Результат
			И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеРезультата.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Локальная проверка средствами ККТ'"),
			ПараметрыПроверки,
			ВыходныеПараметры.ЗапросXML,
			СтрСоединить(ДанныеРезультата, Символы.ПС));

		//	TODO:реализовать запись логов		
		//ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		РезультатПроверкиКМ.КодМаркировкиПроверен		= ВыходныеПараметры.КодМаркировкиПроверен;
		РезультатПроверкиКМ.РезультатПроверки			= ВыходныеПараметры.РезультатПроверки;
		ТекущаяОперация									= ВыполняемыеОперации().УдаленнаяПроверка;
	Иначе
		РезультатПроверкиКМ.ТекстОшибки					= ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки			= ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки			= Истина;
	КонецЕсли;
	
	СледующийШаг();
	
КонецПроцедуры

&НаКлиенте
Процедура УдаленнаяПроверкаКодаМаркировкиСредствамиККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ПрерватьОперацию Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда
		ВыходныеПараметры =  ДанныеОтвета;
	Иначе
		ВыходныеПараметры = Неопределено;
	КонецЕсли;
	
	ПроверяемыйКМ				= ПараметрыПроверки.ПроверяемыеКМ[ПараметрыПроверки.ТекущийИндекс];
	РезультатПроверкиКМ			= ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ПроверяемыйКМ.УИД);
	ПаузаДоСледующегоШага		= Неопределено;
	
	Если ПроверяемыйКМ.ПолученРезультатЗапросаКМ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ДанныеДляЛогирования = Новый Массив();
		
		Если ВыходныеПараметры.Свойство("РезультатXML")
			И ЗначениеЗаполнено(ВыходныеПараметры.РезультатXML) Тогда
			ДанныеДляЛогирования.Добавить(ВыходныеПараметры.РезультатXML);
		КонецЕсли;
		
		Если (ДанныеОтвета.Результат = Ложь Или ДанныеОтвета.Результат = 1)
			И ЗначениеЗаполнено(ДанныеОтвета.ОписаниеОшибки) Тогда
			ДанныеДляЛогирования.Добавить(ДанныеОтвета.ОписаниеОшибки);
		КонецЕсли;
		
		Если ДанныеДляЛогирования.Количество() Тогда
			ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
				НСтр("ru = 'Проверка статуса товара ОИСМ средствами ККТ'"),
				ПараметрыПроверки,,
				СтрСоединить(ДанныеДляЛогирования, Символы.ПС));
			//	TODO:реализовать запись логов		
			//ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		ВыполняемыеОперации = ВыполняемыеОперации();
		
		РезультатПроверкиКМ.РезультаПроверкиОИСМ			= ВыходныеПараметры.РезультатПроверкиОИСМ;
		РезультатПроверкиКМ.СтатусТовара					= ВыходныеПараметры.СтатусТовара;
		РезультатПроверкиКМ.КодРезультатаПроверки			= ВыходныеПараметры.КодРезультатаПроверкиОИСМ;
		РезультатПроверкиКМ.ПредставлениеРезультатаПроверки	= ВыходныеПараметры.РезультатПроверкиСведенийОТоваре;
		РезультатПроверкиКМ.КодОбработкиЗапроса				= ВыходныеПараметры.КодОбработкиЗапроса;
		РезультатПроверкиКМ.ПредставлениеВЧеке				= ВыходныеПараметры.РезультатПроверкиСведенийОТовареПФ;
		
		Если ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Получен")
			Или ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.НеМожетБытьПолучен") Тогда
			
			ТекущаяОперация								= ВыполняемыеОперации.Подтверждение;
			ПроверяемыйКМ.ПолученРезультатЗапросаКМ		= Истина;

			//// Задать вопрос пользователю о покупке КМ, не прошедшего проверку.
			//Если НЕ ВыходныеПараметры.РезультатПроверкиОИСМ Тогда
			//									
			//КонецЕсли;
			
		ИначеЕсли ВыходныеПараметры.СтатусРезультата = ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается") Тогда
		
			Если РезультатПроверкиКМ.ПропуститьОжиданиеОтветаОИСМ Тогда
				ТекущаяОперация = ВыполняемыеОперации.Подтверждение;
			Иначе
				ПаузаДоСледующегоШага = 1;	//	В секундах.
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РезультатПроверкиКМ.ТекстОшибки					= ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки			= ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки			= Истина;

	КонецЕсли;
	
	СледующийШаг(ПаузаДоСледующегоШага);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеКодаМаркировкиНаККТЗавершение(ДанныеОтвета, ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ПрерватьОперацию Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыйКМ				= ПараметрыПроверки.ПроверяемыеКМ[ПараметрыПроверки.ТекущийИндекс];
	РезультатПроверкиКМ			= ПараметрыПроверки.Результат.ДанныеПроверки.Получить(ПроверяемыйКМ.УИД);
	
	Если ПараметрыПроверки.ВыполняетсяЛогирование Тогда
		
		ТекстОшибки = Неопределено;
		
		Если Не ДанныеОтвета.Результат Тогда
			ТекстОшибки = ДанныеОтвета.ОписаниеОшибки;
		КонецЕсли;
		
		ТекстЛога = ТекстДляЗаписиВЛогЗапросов(
			НСтр("ru = 'Подтверждение кода маркировки при выбытии'"),
			ПараметрыПроверки,
			ПроверяемыйКМ.ИдентификаторЗапроса,
			ТекстОшибки);
		//	TODO:реализовать запись логов		
		//ЛогированиеЗапросовИСМПКлиент.Вывести(ТекстЛога);
		
	КонецЕсли;
	
	Если ДанныеОтвета.Результат Тогда
		
		РезультатПроверкиКМ.ПодтвержденНаККТ = Истина;
		
	Иначе
		
		РезультатПроверкиКМ.ТекстОшибки			= ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ТекстОшибки	= ДанныеОтвета.ОписаниеОшибки;
		ПараметрыПроверки.Результат.ЕстьОшибки 	= Истина;
		
		//ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку = Истина;
		
	КонецЕсли;
	
	СледующийКод();
	
КонецПроцедуры

#КонецОбласти