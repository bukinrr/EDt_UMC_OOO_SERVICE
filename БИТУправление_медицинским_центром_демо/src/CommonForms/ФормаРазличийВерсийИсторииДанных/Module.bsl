#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем МетаданныеДанных, Шаблон, СуществуетВерсияДоИзменения, ЗначениеСвойства, РазличияТабличнойЧасти, ОтборВерсии,
		ИндексДаты, ИндексИмениПользователя, ИндексПолногоИмениПользователя, ИндексКомментария,
		ВерсияДоИзменения, ВерсияПослеИзменения, Различия, МетаданныеВерсии, ПустаяЯчейка, ПустаяСтрока,
		ОбластьЗаголовкаВерсии, ОбластьВерсии, ИмяПользователя, ОбластьЗаголовкаКомментария, ОбластьКомменатрия,
		МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ПолеНайдено, ИмяПоля, РазличияЗначенияПоля,
		ОбластьПредставленияПоля, ОбластьЗначенияПослеИзменения, ОбластьЗначенияДоИзменения,
		МетаданныеВерсииТабличныеЧасти, ТабличныеЧасти, МетаданныеТабличнаяЧасть, ВсеПоля, ИмяТабличнойЧасти,
		МетаданныеВерсииТабличнаяЧасть, ОбластьПредставленияТабличнойЧасти, ОбластьСтроки, ОбластьНомераСтроки, ОбластьЛегенды;
	
	МетаданныеДанных = Параметры.Данные.Метаданные();
	
	Если Не ПравоДоступа("ПросмотрИсторииДанных", МетаданныеДанных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Шаблон = Новый ТабличныйДокумент;
	Шаблон.Прочитать("v8res://mngbase/DataHistoryVersionDifferencesRuTemplate.mxl");
	Отчет.Очистить();
	
	СуществуетВерсияДоИзменения = Параметры.НомерВерсииДоИзменения <> Неопределено;
	Если СуществуетВерсияДоИзменения Тогда
		ОтборВерсии = Новый Структура;
		ОтборВерсии.Вставить("Данные", Параметры.Данные);
		ОтборВерсии.Вставить("НомерВерсии", Параметры.НомерВерсииДоИзменения);

		ВерсияДоИзменения = ИсторияДанных.ВыбратьВерсии(ОтборВерсии, "Дата, ИмяПользователя, ПолноеИмяПользователя, Комментарий", , )[0];
	КонецЕсли;
	
	ОтборВерсии = Новый Структура;
	ОтборВерсии.Вставить("Данные", Параметры.Данные);
	ОтборВерсии.Вставить("НомерВерсии", Параметры.НомерВерсииПослеИзменения);
	ИндексДаты = 0;
	ИндексИмениПользователя = 1;
	ИндексПолногоИмениПользователя = 2;
	ИндексКомментария = 3;
	
	Заголовок = СтрШаблон(NStr("ru = '%1 (Различия версий %2 и %3)'; SYS = 'DataHistory.DiffTitle'", "ru"),
		ПолучитьПредставлениеДанных(МетаданныеДанных, Параметры.Данные),
		Строка(Параметры.НомерВерсииПослеИзменения),
		Строка(Параметры.НомерВерсииДоИзменения));
		
	ВерсияПослеИзменения = ИсторияДанных.ВыбратьВерсии(ОтборВерсии, "Дата, ИмяПользователя, ПолноеИмяПользователя, Комментарий", , )[0];
	
	Различия = ИсторияДанных.ПолучитьРазличияВерсий(Параметры.Данные, Параметры.НомерВерсииПослеИзменения, Параметры.НомерВерсииДоИзменения);
	
	МетаданныеВерсии = ИсторияДанных.ПолучитьМетаданные(Параметры.Данные, Параметры.НомерВерсииПослеИзменения);
	
	ПустаяЯчейка = Шаблон.ПолучитьОбласть("ПустаяЯчейка");
	ПустаяСтрока = Шаблон.ПолучитьОбласть("ПустаяСтрока");
	
	Отчет.Вывести(ПустаяЯчейка);
	Отчет.Присоединить(Шаблон.ПолучитьОбласть("ЗаголовокПосле"));
	Если СуществуетВерсияДоИзменения Тогда
		Отчет.Присоединить(Шаблон.ПолучитьОбласть("ЗаголовокДо"));
	КонецЕсли;
			
	ОбластьЗаголовкаВерсии = Шаблон.ПолучитьОбласть("ЗаголовокВерсии");
	МетаданныеВерсии.Свойство("Представление", ОбластьЗаголовкаВерсии.Параметры.ПредставлениеМетаданных);
	Отчет.Вывести(ОбластьЗаголовкаВерсии);
	
	ОбластьВерсии = Шаблон.ПолучитьОбласть("Версия");
	ОбластьВерсии.Параметры.НомерВерсии = Параметры.НомерВерсииПослеИзменения;
	
	ОбластьВерсии.Параметры.Дата = ВерсияПослеИзменения[ИндексДаты];
	ИмяПользователя = ВерсияПослеИзменения[ИндексПолногоИмениПользователя];
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = ВерсияПослеИзменения[ИндексИмениПользователя]
	КонецЕсли;
	ОбластьВерсии.Параметры.ИмяПользователя = ИмяПользователя;
	
	Отчет.Присоединить(ОбластьВерсии);
	Если СуществуетВерсияДоИзменения Тогда
		ОбластьВерсии = Шаблон.ПолучитьОбласть("Версия");
		ОбластьВерсии.Параметры.НомерВерсии = Параметры.НомерВерсииДоИзменения;
		
		ОбластьВерсии.Параметры.Дата = ВерсияДоИзменения[ИндексДаты];
		ИмяПользователя = ВерсияДоИзменения[ИндексПолногоИмениПользователя];
		Если ПустаяСтрока(ИмяПользователя) Тогда
			ИмяПользователя = ВерсияДоИзменения[ИндексИмениПользователя]
		КонецЕсли;
		ОбластьВерсии.Параметры.ИмяПользователя = ИмяПользователя;
		Отчет.Присоединить(ОбластьВерсии);
	КонецЕсли;
	
	Если Не (ПустаяСтрока(ВерсияПослеИзменения[ИндексКомментария]) 
		И  (Не СуществуетВерсияДоИзменения
			Или ПустаяСтрока(ВерсияДоИзменения[ИндексКомментария]))) Тогда
	
		ОбластьЗаголовкаКомментария = Шаблон.ПолучитьОбласть("ЗаголовокКомментария");
		Отчет.Вывести(ОбластьЗаголовкаКомментария);
		
		Если  Не ПустаяСтрока(ВерсияПослеИзменения[ИндексКомментария]) Тогда
			ОбластьКомменатрия = Шаблон.ПолучитьОбласть("Комментарий");
			ОбластьКомменатрия.Параметры.Комментарий = ВерсияПослеИзменения[2];
			Отчет.Присоединить(ОбластьКомменатрия);	
		Иначе 
			Отчет.Присоединить(ПустаяЯчейка);	
		КонецЕсли;
		
		Если  СуществуетВерсияДоИзменения
			И Не ПустаяСтрока(ВерсияДоИзменения[2]) Тогда
			ОбластьКомменатрия = Шаблон.ПолучитьОбласть("Комментарий");
			ОбластьКомменатрия.Параметры.Комментарий = ВерсияДоИзменения[2];
			Отчет.Присоединить(ОбластьКомменатрия);	
		КонецЕсли;
	КонецЕсли;
	Отчет.Вывести(ПустаяСтрока);
	
	МетаданныеВерсииПоля = Неопределено;
	Если МетаданныеВерсии.Свойство("Поля", МетаданныеВерсииПоля) Тогда
		ИменаПолей = Новый Массив;
		ПредставленияПолей = Новый Массив;

		ОпределитьОтображаемыеПоляДанных(
			МетаданныеДанных, 
			МетаданныеВерсииПоля, 
			ИменаПолей, 
			ПредставленияПолей);
				
		ПолеНайдено = Ложь;
		Для Каждого ИмяПоля Из ИменаПолей Цикл
			Если Различия.Свойство(ИмяПоля, ЗначениеСвойства) Тогда 
				ПолеНайдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПолеНайдено Тогда
			Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
				ИмяПоля = ИменаПолей[ИндексПоля];

				Если Различия.Свойство(ИмяПоля, ЗначениеСвойства) Тогда 
					РазличияЗначенияПоля = ЗначениеСвойства;
					
					ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
					ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
					Отчет.Вывести(ОбластьПредставленияПоля);
					
					ОбластьЗначенияПослеИзменения = Неопределено; 
					Если Не СуществуетВерсияДоИзменения Тогда 
						ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("СозданиеЗначенияПоля");
					Иначе 
						ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
					КонецЕсли;
					
					Если РазличияЗначенияПоля.Свойство("ЗначениеПослеИзменения", ЗначениеСвойства) Тогда 
						УстановитьЗначениеПоля(ОбластьЗначенияПослеИзменения.Параметры, ЗначениеСвойства);
					КонецЕсли;
					Отчет.Присоединить(ОбластьЗначенияПослеИзменения);
					
					Если СуществуетВерсияДоИзменения Тогда
						ОбластьЗначенияДоИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
						Если РазличияЗначенияПоля.Свойство("ЗначениеДоИзменения", ЗначениеСвойства) Тогда 
							УстановитьЗначениеПоля(ОбластьЗначенияДоИзменения.Параметры, ЗначениеСвойства);
						КонецЕсли;
						Отчет.Присоединить(ОбластьЗначенияДоИзменения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Отчет.Вывести(ПустаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеВерсииТабличныеЧасти = Неопределено;
	Если МетаданныеВерсии.Свойство("ТабличныеЧасти", МетаданныеВерсииТабличныеЧасти) Тогда
		ТабличныеЧасти = ПолучитьТабличныеЧасти(МетаданныеДанных);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			МетаданныеТабличнаяЧасть = ТабличнаяЧасть.Метаданные;
			ВсеПоля = ТабличнаяЧасть.Поля;
			
			ИмяТабличнойЧасти = МетаданныеТабличнаяЧасть.Имя;
			Если Не МетаданныеВерсииТабличныеЧасти.Свойство(ИмяТабличнойЧасти, ЗначениеСвойства) Тогда
				Продолжить;
			КонецЕсли;
			МетаданныеВерсииТабличнаяЧасть = ЗначениеСвойства;
			МетаданныеВерсииПоля = Неопределено;
			Если Не МетаданныеВерсииТабличнаяЧасть.Свойство("Поля", МетаданныеВерсииПоля) Тогда
				Продолжить;
			КонецЕсли;
			ИменаПолей = Новый Массив;
			ПредставленияПолей = Новый Массив;
		    
			ОпределитьОтображаемыеПоля(
				ВсеПоля,
				МетаданныеВерсииПоля,
				ИменаПолей,
				ПредставленияПолей);
				
			Если ИменаПолей.Количество() = 0 then
				Продолжить;
			КонецЕсли;

			Если Не Различия.Свойство(ИмяТабличнойЧасти, ЗначениеСвойства) Тогда 
				Продолжить;
			КонецЕсли;

			ОбластьПредставленияТабличнойЧасти = Шаблон.ПолучитьОбласть("ПредставлениеТабличнойЧасти");
			МетаданныеВерсииТабличнаяЧасть.Свойство("Представление", ОбластьПредставленияТабличнойЧасти.Параметры.ПредставлениеТабличнойЧасти);
			Отчет.Вывести(ОбластьПредставленияТабличнойЧасти);
			
			РазличияТабличнойЧасти = ЗначениеСвойства;
			Для Каждого СтрокаТабличнойЧасти Из РазличияТабличнойЧасти Цикл
				
				Если СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Добавление Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("СозданиеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииПослеИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
					
					Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
						ИмяПоля = ИменаПолей[ИндексПоля];
	  					ПоляСтроки = Неопределено;
	  					Если Не СтрокаТабличнойЧасти.Свойство("Поля", ПоляСтроки) Тогда
	  						Продолжить;
	  					КонецЕсли;
					    
					    РазличияЗначенияПоля = Неопределено;
						Если ПоляСтроки.Свойство(ИмяПоля, РазличияЗначенияПоля) Тогда 
							ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
							ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
							Отчет.Вывести(ОбластьПредставленияПоля);
							
							ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("СозданиеЗначенияПоля");
							УстановитьЗначениеПоля(ОбластьЗначенияПослеИзменения.Параметры, РазличияЗначенияПоля);
							Отчет.Присоединить(ОбластьЗначенияПослеИзменения);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Изменение Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("ИзменениеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииПослеИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);

					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииДоИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);

					Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
						ИмяПоля = ИменаПолей[ИндексПоля];
	  					ПоляСтроки = Неопределено;
	  					Если Не СтрокаТабличнойЧасти.Свойство("Поля", ПоляСтроки) Тогда
	  						Продолжить;
	  					КонецЕсли;
	  					РазличияЗначенияПоля = Неопределено;
						Если ПоляСтроки.Свойство(ИмяПоля, РазличияЗначенияПоля) Тогда 
							ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
							ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
							Отчет.Вывести(ОбластьПредставленияПоля);
							
							ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
							РазличияЗначенияПоля.Свойство("ЗначениеПослеИзменения", ЗначениеСвойства);
							УстановитьЗначениеПоля(ОбластьЗначенияПослеИзменения.Параметры, ЗначениеСвойства);
							Отчет.Присоединить(ОбластьЗначенияПослеИзменения);
							                           							
							ОбластьЗначенияДоИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
							РазличияЗначенияПоля.Свойство("ЗначениеДоИзменения", ЗначениеСвойства);
							УстановитьЗначениеПоля(ОбластьЗначенияДоИзменения.Параметры, ЗначениеСвойства);
							Отчет.Присоединить(ОбластьЗначенияДоИзменения);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Удаление Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("УдалениеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					Отчет.Присоединить(ПустаяЯчейка);

					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииДоИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
					
					Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
						ИмяПоля = ИменаПолей[ИндексПоля];
	  					ПоляСтроки = Неопределено;
	  					Если Не СтрокаТабличнойЧасти.Свойство("Поля", ПоляСтроки) Тогда
	  						Продолжить;
	  					КонецЕсли;
					    
					    РазличияЗначенияПоля = Неопределено;
						Если ПоляСтроки.Свойство(ИмяПоля, РазличияЗначенияПоля) Тогда 
							ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
							ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
							Отчет.Вывести(ОбластьПредставленияПоля);
							
							Отчет.Присоединить(ПустаяЯчейка);
							
							ОбластьЗначенияДоИзменения = Шаблон.ПолучитьОбласть("УдалениеЗначенияПоля");
							УстановитьЗначениеПоля(ОбластьЗначенияДоИзменения.Параметры, РазличияЗначенияПоля);
							Отчет.Присоединить(ОбластьЗначенияДоИзменения);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Перемещение Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("ПеремещениеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииПослеИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииДоИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
				КонецЕсли;
				Отчет.Вывести(ПустаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	
	
	Отчет.Вывести(ПустаяСтрока);
	ОбластьЛегенды = Шаблон.ПолучитьОбласть("Легенда");
	ОбластьЛегенды.Область("R1C1:R4C1").СоздатьФорматСтрок();
	ОбластьЛегенды.Область("R1C1:R4C1").ШиринаКолонки = 12;
					
	Отчет.Вывести(ОбластьЛегенды);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОпределитьОтображаемыеПоляДанных(МетаданныеДанных, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей)
	Перем ПредставлениеПоля;
	Если Метаданные.Константы.Содержит(МетаданныеДанных) Тогда 
		Для Каждого ПолеВерсии Из МетаданныеВерсииПоля Цикл
			Если Метаданные.ОбщиеРеквизиты.Найти(ПолеВерсии.Ключ) = Неопределено Тогда
				ИменаПолей.Добавить(ПолеВерсии.Ключ);
				ПредставленияПолей.Добавить(ПолеВерсии.Значение);	
			КонецЕсли;
		КонецЦикла;
	Иначе	
		ОпределитьОтображаемыеСтандартныеРеквизиты(
			МетаданныеДанных,
			МетаданныеВерсииПоля, 
			ИменаПолей, 
			ПредставленияПолей);
			
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.Измерения, 
				МетаданныеВерсииПоля, 
				ИменаПолей, 
				ПредставленияПолей); 
				
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.Ресурсы, 
				МетаданныеВерсииПоля, 
				ИменаПолей, 
				ПредставленияПолей); 
		КонецЕсли;
		
		ОпределитьОтображаемыеПоля(
			МетаданныеДанных.Реквизиты, 
			МетаданныеВерсииПоля, 
			ИменаПолей, 
			ПредставленияПолей); 
	КонецЕсли;
		
	ОпределитьОтображаемыеОбщиеРеквизиты(
		МетаданныеВерсииПоля, 
		ИменаПолей, 
		ПредставленияПолей);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеПоля(Поля, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей)
	Перем ПредставлениеПоля;
	Для Каждого Поле Из Поля Цикл
		ПредставлениеПоля = Неопределено;
		Если Не МетаданныеВерсииПоля.Свойство(Поле.Имя, ПредставлениеПоля) Тогда
			Продолжить;
		КонецЕсли;
		ИменаПолей.Добавить(Поле.Имя);
		ПредставленияПолей.Добавить(ПредставлениеПоля);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеОбщиеРеквизиты(МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей)
	Перем ПредставлениеПоля;
	Для Каждого Поле Из Метаданные.ОбщиеРеквизиты Цикл
		Если Не ПравоДоступа("Просмотр", Поле) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеПоля = Неопределено;
		Если Не МетаданныеВерсииПоля.Свойство(Поле.Имя, ПредставлениеПоля) Тогда
			Продолжить;
		КонецЕсли;
		ИменаПолей.Добавить(Поле.Имя);
		ПредставленияПолей.Добавить(ПредставлениеПоля);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеСтандартныеРеквизиты(МетаданныеДанных, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей)
	Перем ПредставлениеПоля;
	Для Каждого Поле Из МетаданныеДанных.СтандартныеРеквизиты Цикл
	
		Если Не ПравоДоступа("Просмотр", МетаданныеДанных, ,Поле.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеПоля = Неопределено;
		Если Не МетаданныеВерсииПоля.Свойство(Поле.Имя, ПредставлениеПоля) Тогда
			Продолжить;
		КонецЕсли;
		ИменаПолей.Добавить(Поле.Имя);
		ПредставленияПолей.Добавить(ПредставлениеПоля);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПоля(Параметры, ЗначениеПоля)
	Перем ЗначениеСвойства;
	Если ТипЗнч(ЗначениеПоля) = Тип("ФиксированнаяСтруктура") Тогда
		ЗначениеСвойства = Неопределено;
		Если ЗначениеПоля.Свойство("Представление", ЗначениеСвойства) Тогда
			Параметры.ЗначениеПоля = ЗначениеСвойства;
		КонецЕсли;
		ЗначениеСвойства = Неопределено;
		Если ЗначениеПоля.Свойство("Ссылка", ЗначениеСвойства) Тогда
			Параметры.ЗначениеПоляСсылка = ЗначениеСвойства;
		КонецЕсли;
	Иначе
		Параметры.ЗначениеПоля = ЗначениеПоля;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДанных(МетаданныеДанных, Данные)
	Перем Представление, Разделитель;
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда 
		Представление = "";
	
		Если МетаданныеДанных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора
				Или МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Строка(Данные.Период);
			Иначе
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Формат(Данные.Период, "ДЛФ=Д");
			КонецЕсли;
		КонецЕсли;
		
		Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + МетаданныеДанных.СтандартныеРеквизиты.Регистратор.Представление() + "=" + Строка(Данные.Регистратор);
		КонецЕсли;
		
		Для Каждого Измерение Из МетаданныеДанных.Измерения Цикл
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + Строка(Измерение) + "=" + Строка(Данные[Измерение.Имя]);
		КонецЦикла;
		
		Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			Если 	ОбщийРеквизит.РазделениеДанных <> Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять
				Или ОбщийРеквизит.ИспользованиеРазделяемыхДанных <> Метаданные.СвойстваОбъектов.ОбщийРеквизитИспользованиеРазделяемыхДанных.НезависимоИСовместно Тогда
				Продолжить;
			КонецЕсли;
			
			Разделитель = ОбщийРеквизит.Content.Найти(МетаданныеДанных);
			Если 		Разделитель = Неопределено
				Или 	Разделитель.Использование = Метаданные.СвойстваОбъектов.ОбщийРеквизитИспользование.НеИспользовать
				Или (Разделитель.Использование = Метаданные.СвойстваОбъектов.ОбщийРеквизитИспользование.Авто
					И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
				Продолжить;
			КонецЕсли;

			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			
			Представление = Представление + Строка(ОбщийРеквизит) + "=" + Строка(Данные[ОбщийРеквизит.Имя]);
		КонецЦикла;
		
		Возврат Представление;
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеДанных) Тогда
		Возврат МетаданныеДанных.Представление();
	Иначе
		Возврат Строка(Данные);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьТабличныеЧасти(МетаданныеДанных)
	Перем ЭтоПланСчетов, ЭтоПланВидовРасчета, ВсеПоля, ТабличныеЧасти, Элемент;
	ЭтоПланСчетов = Метаданные.ПланыСчетов.Содержит(МетаданныеДанных);
	ЭтоПланВидовРасчета = Метаданные.ПланыВидовРасчета.Содержит(МетаданныеДанных);
	ТабличныеЧасти = Новый Массив;
	Если ЭтоПланСчетов Или ЭтоПланВидовРасчета Тогда
		Для Каждого МетаданныеТабличнаяЧасть Из МетаданныеДанных.СтандартныеТабличныеЧасти Цикл
			
			Если Не ПравоДоступа("Просмотр", МетаданныеДанных, , МетаданныеТабличнаяЧасть.Имя) Тогда
				Продолжить;
			КонецЕсли;
		
			ВсеПоля = Новый Массив;
			Для Каждого Поле Из МетаданныеТабличнаяЧасть.СтандартныеРеквизиты Цикл
				Если Поле.Имя = "НомерСтроки" Или Поле.Имя = "НомерСтроки" Тогда
					Продолжить;
				КонецЕсли;
				
				ВсеПоля.Добавить(Поле);
			КонецЦикла;
			
		    Если ЭтоПланСчетов Тогда 
				Для Каждого Поле Из МетаданныеДанных.ПризнакиУчетаСубконто Цикл
					ВсеПоля.Добавить(Поле);
				КонецЦикла;
			КонецЕсли;
			
			Элемент = Новый Структура;
			Элемент.Вставить("Метаданные", МетаданныеТабличнаяЧасть);
			Элемент.Вставить("Поля", ВсеПоля);
			ТабличныеЧасти.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого МетаданныеТабличнаяЧасть Из МетаданныеДанных.ТабличныеЧасти Цикл
		Если Не ПравоДоступа("Просмотр", МетаданныеТабличнаяЧасть) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПоля = Новый Массив;
		Для Каждого Поле Из МетаданныеТабличнаяЧасть.Реквизиты Цикл
			Если Не ПравоДоступа("Просмотр", Поле) Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеПоля.Добавить(Поле);
		КонецЦикла;
		
		Элемент = Новый Структура;
		Элемент.Вставить("Метаданные", МетаданныеТабличнаяЧасть);
		Элемент.Вставить("Поля", ВсеПоля);
		ТабличныеЧасти.Добавить(Элемент);
	КонецЦикла;
	
	Возврат ТабличныеЧасти;
КонецФункции

#КонецОбласти