#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ссылка") Тогда
		Ссылка = Параметры.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		СотрудникУстановившийПодпись = ОтраслевыеДополнения.СотрудникПользователяПоФилиалу(ПараметрыСеанса.ТекущийПользователь, РаботаСДокументамиСервер.ФилиалДокумента(Ссылка));
	КонецЕсли;
	
	Элементы.Проверить.Доступность = ЗначениеЗаполнено(СотрудникУстановившийПодпись);
	Элементы.ВалидацияПоСхематрону.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступныеДолжностиМЗ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	
	ИмеютсяКритичныеОшибки = ПроверитьНаСервере();
	
	Если ОшибкиВалидацииПоСхематрону.ПолучитьЭлементы().Количество() > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ не проходит валидацию РЭМД.'"));
	ИначеЕсли Не ИмеютсяКритичныеОшибки Тогда
		ПоказатьПредупреждение(, НСтр("ru='Ошибок не обнаружено, документ может быть подписан.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СотрудникУстановившийПодписьПриИзменении(Элемент)
	
	ОбновитьДоступныеДолжностиМЗ();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьМЗПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПроверитьНаСервере()
	
	НезаполненныеОбязательныеПараметры.ПолучитьЭлементы().Очистить();
	ПрочиеОшибки.ПолучитьЭлементы().Очистить();
	ОшибкиВалидацииПоСхематрону.ПолучитьЭлементы().Очистить();
	
	Строки = НезаполненныеОбязательныеПараметры.ПолучитьЭлементы();
	НезагруженныеКлассификаторы = Новый Массив;
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Ссылка);
	
	НезаполненныеКлассификации = Новый Соответствие;
	НекритичныеПроблемы = Новый Соответствие;
	
	ДополнительныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ДополнительныеПараметрыДляРаботыССЭМД();
	
	Если ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		Если ЗначениеЗаполнено(Ссылка.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки) Тогда
			
			ДополнительныеПараметры.ШаблонОсмотра = Ссылка.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки;
			
			НезаполненныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьНезаполненныеОбязательныеПараметры(Ссылка, СотрудникУстановившийПодпись, НезагруженныеКлассификаторы, НекритичныеПроблемы, ДолжностьМЗ, ДополнительныеПараметры);
			ЗаполнитьСтрокиПоПМО(НезаполненныеПараметры, Строки, Ссылка);
			ДополнитьНезаполненныеКлассификации(НезаполненныеПараметры.ПараметрыСекцийТела, НезаполненныеКлассификации, Ссылка.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки.Наименование);
			ЗаполнитьОшибкиСхематрона(НезаполненныеПараметры.ОшибкиСхематрона);
		Иначе
			МодульМедосмотров = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
			ОбработанныеПриказы = Новый Массив;
			Для Каждого СтрокаФактора Из Ссылка.ФакторыИУсловияРаботы Цикл
				Если МодульМедосмотров.ЭтоПриказСправки(СтрокаФактора.Фактор.Приказ) Тогда
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДополнительныеПараметры.ПриказМО = Неопределено;
					ДополнительныеПараметры.ШаблонОсмотра = СтрокаФактора.Фактор.ШаблонОсмотраСправки;
					ДополнительныеПараметры.ВредныйФакторСправки = СтрокаФактора.Фактор;
					ДополнительныеПараметры.СообщениеРЭМД = Неопределено;
					
					НезаполненныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьНезаполненныеОбязательныеПараметры(Ссылка, СотрудникУстановившийПодпись, НезагруженныеКлассификаторы, НекритичныеПроблемы, ДолжностьМЗ, ДополнительныеПараметры);
					ЗаполнитьСтрокиПоПМО(НезаполненныеПараметры, Строки, Ссылка);
					ДополнитьНезаполненныеКлассификации(НезаполненныеПараметры.ПараметрыСекцийТела, НезаполненныеКлассификации, СтрокаФактора.Фактор.ШаблонОсмотраСправки.Наименование);
					ЗаполнитьОшибкиСхематрона(НезаполненныеПараметры.ОшибкиСхематрона);
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор);
				Иначе
					Если ОбработанныеПриказы.Найти(СтрокаФактора.Фактор.Приказ) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СообщениеРЭМД = Неопределено;
					СтрокаЭМД = Ссылка.ЭМД.Найти(ИнтеграцияЕГИСЗВызовСервера.ПолучитьУИДПоПриказуВредномуФактору(Ссылка, СтрокаФактора.Фактор.Приказ), "УИД_Шаблона");
					Если СтрокаЭМД <> Неопределено Тогда
						СообщениеРЭМД = СтрокаЭМД.СообщениеРЭМД;
					КонецЕсли;
					
					ДополнительныеПараметры.ПриказМО = СтрокаФактора.Фактор.Приказ;
					ДополнительныеПараметры.ШаблонОсмотра = Неопределено;
					ДополнительныеПараметры.ВредныйФакторСправки = Неопределено;
					ДополнительныеПараметры.СообщениеРЭМД = СообщениеРЭМД;
					
					НезаполненныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьНезаполненныеОбязательныеПараметры(Ссылка, СотрудникУстановившийПодпись, НезагруженныеКлассификаторы, НекритичныеПроблемы, ДолжностьМЗ, ДополнительныеПараметры);
					ЗаполнитьСтрокиПоПМО(НезаполненныеПараметры, Строки, Ссылка, Истина);
					ДополнитьНезаполненныеКлассификации(НезаполненныеПараметры.ПараметрыСекцийТела, НезаполненныеКлассификации, Ссылка.Номенклатура.ВредныйФакторСправки.ШаблонОсмотраСправки.Наименование);
					ЗаполнитьОшибкиСхематрона(НезаполненныеПараметры.ОшибкиСхематрона);
					ОбработанныеПриказы.Добавить(СтрокаФактора.Фактор.Приказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяТипаДокумента = "Документ.Прием" Тогда
		
		ВерсииШаблонов = Новый ТаблицаЗначений;
		ВерсииШаблонов.Колонки.Добавить("ВерсияШаблона");
		ВерсииШаблонов.Колонки.Добавить("ШаблонПриема");
		ДокументыПриемаКлиентСервер.ЗаполнитьТаблицуВерсийШаблонов(ВерсииШаблонов, Ссылка);
		
		Для Каждого СтрокаШаблона Из Ссылка.ШаблоныПриема Цикл
			
			СтрокаВерсии = ВерсииШаблонов.Найти(СтрокаШаблона.ШаблонПриема, "ШаблонПриема");
			Если СтрокаВерсии <> Неопределено Тогда
				ДополнительныеПараметры.ШаблонОсмотра = СтрокаВерсии.ВерсияШаблона;
			Иначе
				ДополнительныеПараметры.ШаблонОсмотра = СтрокаШаблона.ШаблонПриема;
			КонецЕсли;
			
			ДополнительныеПараметры.ИндексШаблона = Ссылка.ШаблоныПриема.Индекс(СтрокаШаблона);
			ДополнительныеПараметры.СтрокаШаблона = СтрокаШаблона;
			
			НезаполненныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьНезаполненныеОбязательныеПараметры(Ссылка, СотрудникУстановившийПодпись, НезагруженныеКлассификаторы, НекритичныеПроблемы, ДолжностьМЗ, ДополнительныеПараметры);
			ЗаполнитьСтрокиПоПриему(НезаполненныеПараметры, Строки, СтрокаШаблона);
			ДополнитьНезаполненныеКлассификации(НезаполненныеПараметры.ПараметрыСекцийТела, НезаполненныеКлассификации, СтрокаШаблона.ШаблонПриема.Наименование);
			ЗаполнитьОшибкиСхематрона(НезаполненныеПараметры.ОшибкиСхематрона, СтрокаШаблона.ШаблонПриема);
		КонецЦикла;
	//ИначеЕсли ИмяТипаДокумента = "Документ.ВрачебнаяКомиссия" Тогда // Версия КОРП
	//	НезаполненныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьНезаполненныеОбязательныеПараметры(Ссылка, СотрудникУстановившийПодпись, НезагруженныеКлассификаторы, НекритичныеПроблемы, ДолжностьМЗ);
	//	ЗаполнитьСтрокиПоВК(НезаполненныеПараметры, Строки, Ссылка);
	//	ДополнитьНезаполненныеКлассификации(НезаполненныеПараметры.ПараметрыСекцийТела, НезаполненныеКлассификации, Неопределено);
	//	ЗаполнитьОшибкиСхематрона(НезаполненныеПараметры.ОшибкиСхематрона);
	ИначеЕсли ИмяТипаДокумента = "Документ.Рецепт" Тогда
		НезаполненныеПараметры = ИнтеграцияЕГИСЗ_СЭМД.ПолучитьНезаполненныеОбязательныеПараметры(Ссылка, СотрудникУстановившийПодпись, НезагруженныеКлассификаторы, НекритичныеПроблемы, ДолжностьМЗ, ДополнительныеПараметры);
		ДополнитьНезаполненныеКлассификации(НезаполненныеПараметры.ПараметрыСекцийТела, НезаполненныеКлассификации, Неопределено);
		ЗаполнитьОшибкиСхематрона(НезаполненныеПараметры.ОшибкиСхематрона);
	КонецЕсли;
	
	Проблемы = ИнтеграцияЕГИСЗВызовСервера.ПолучитьПроблемыСЭМДПередПодписанием(Ссылка);
	Если НезагруженныеКлассификаторы.Количество() > 0 Тогда
		Проблемы.Вставить(НСтр("ru='Требуется загрузить классификаторы'"), НезагруженныеКлассификаторы);
	КонецЕсли;
	
	Если НезаполненныеКлассификации.Количество() > 0 Тогда
		Проблемы.Вставить(НСтр("ru='В шаблонах не заполнены классификации полей'"), НезаполненныеКлассификации);
	КонецЕсли;
	
	ИмеютсяКритичныеОшибки = НезаполненныеОбязательныеПараметры.ПолучитьЭлементы().Количество() > 0 Или Проблемы.Количество() > 0;
	
	Если НекритичныеПроблемы.Количество() > 0 Тогда
		Проблемы.Вставить(НСтр("ru='Некритичные проблемы'"), НекритичныеПроблемы);
	КонецЕсли;
	
	ЗаполнитьПрочиеОшибки(Проблемы, ПрочиеОшибки.ПолучитьЭлементы());
	
	Если ОшибкиВалидацииПоСхематрону.ПолучитьЭлементы().Количество() > 0 Тогда
		Элементы.ВалидацияПоСхематрону.Доступность = Истина;
		Элементы.Ошибки.ТекущаяСтраница = Элементы.ВалидацияПоСхематрону;
	Иначе
		Элементы.ВалидацияПоСхематрону.Доступность = Ложь;
		Элементы.Ошибки.ТекущаяСтраница = Элементы.Основные;
	КонецЕсли;
	
	Возврат ИмеютсяКритичныеОшибки;
	
КонецФункции

&НаСервере
Процедура ДополнитьНезаполненныеКлассификации(НезаполненныеПараметры, НезаполненныеКлассификации, НаименованиеШаблона)
	
	НезаполненныеКлассификацииШаблона = Новый Массив;
	Для Каждого НезаполненныйПараметр Из НезаполненныеПараметры Цикл
		СвойстваУзла = НезаполненныйПараметр.СвойстваРодительскогоУзла.СвойстваУзла;
		Если СтрЗаканчиваетсяНа(НРег(СвойстваУзла.localid), ".классификацияполя") Тогда
			Если НезаполненныеКлассификацииШаблона.Найти(СвойстваУзла.Синоним) = Неопределено Тогда
				НезаполненныеКлассификацииШаблона.Добавить(СвойстваУзла.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НезаполненныеКлассификацииШаблона.Количество() > 0 Тогда
		НезаполненныеКлассификации.Вставить(НаименованиеШаблона, НезаполненныеКлассификацииШаблона);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОшибкиСхематрона(ОшибкиСхематрона, ШаблонПриема = Неопределено)
	
	Если ОшибкиСхематрона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ШаблонПриема = Неопределено Тогда
		СтрокиОшибок = ОшибкиВалидацииПоСхематрону.ПолучитьЭлементы();
	Иначе
		СтрокаШаблона = ОшибкиВалидацииПоСхематрону.ПолучитьЭлементы().Добавить();
		СтрокаШаблона.ОшибкаВалидации = ШаблонПриема.Наименование;
		СтрокиОшибок = СтрокаШаблона.ПолучитьЭлементы();
	КонецЕсли;
	
	ПравилаОшибокСхематрона = ОшибкиСхематрона.Скопировать();
	ПравилаОшибокСхематрона.Свернуть("Правило");
	
	ЗаполнитьТаблицуОшибокСхематрона(ОшибкиСхематрона, ПравилаОшибокСхематрона, СтрокиОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОшибокСхематрона(ОшибкиСхематрона, ПравилаОшибокСхематрона, СтрокиТаблицы)
	
	Для Каждого ПравилоОшибокСхематрона Из ПравилаОшибокСхематрона Цикл
		ОшибкиПоПравилу = ОшибкиСхематрона.НайтиСтроки(Новый Структура("Правило", ПравилоОшибокСхематрона.Правило));
		Если ОшибкиПоПравилу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПравила = СтрокиТаблицы.Добавить();
		СтрокаПравила.ОшибкаВалидации = ПравилоОшибокСхематрона.Правило;
		СтрокиОшибокПоПравилу = СтрокаПравила.ПолучитьЭлементы();
		Для Каждого СтрокаОшибки Из ОшибкиПоПравилу Цикл
			НоваяСтрока = СтрокиОшибокПоПравилу.Добавить();
			НоваяСтрока.ОшибкаВалидации = СтрокаОшибки.Текст;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоПМО(НезаполненныеПараметры, Строки, Ссылка, ЭтоПриказ = Ложь)
	
	Для Каждого НезаполненныйПараметр Из НезаполненныеПараметры.ПараметрыОбщихСекций Цикл
		НоваяСтрока = Строки.Добавить();
		НоваяСтрока.НезаполненныйПараметр = ПолучитьСтрокуНезаполненногоПараметра(НезаполненныйПараметр);
	КонецЦикла;
	
	Если ЭтоПриказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НезаполненныйПараметр Из НезаполненныеПараметры.ПараметрыСекцийТела Цикл
		// В эту таблицу только зарезервированные
		Если ИнтеграцияЕГИСЗ_СЭМД.ЗарезервированныйLocalid(НезаполненныйПараметр.СвойстваРодительскогоУзла.СвойстваУзла.LocalId) Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.НезаполненныйПараметр = ПолучитьСтрокуНезаполненногоПараметра(НезаполненныйПараметр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоВК(НезаполненныеПараметры, Строки, Ссылка)
	
	Для Каждого НезаполненныйПараметр Из НезаполненныеПараметры.ПараметрыОбщихСекций Цикл
		НоваяСтрока = Строки.Добавить();
		НоваяСтрока.НезаполненныйПараметр = ПолучитьСтрокуНезаполненногоПараметра(НезаполненныйПараметр);
	КонецЦикла;
	
	Если ИнтеграцияЕГИСЗВызовСервера.ДокументЯвляетсяЗаключениемМедосмотра(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НезаполненныйПараметр Из НезаполненныеПараметры.ПараметрыСекцийТела Цикл
		// В эту таблицу только зарезервированные
		Если ИнтеграцияЕГИСЗ_СЭМД.ЗарезервированныйLocalid(НезаполненныйПараметр.СвойстваРодительскогоУзла.СвойстваУзла.LocalId) Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.НезаполненныйПараметр = ПолучитьСтрокуНезаполненногоПараметра(НезаполненныйПараметр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоПриему(НезаполненныеПараметры, Строки, Шаблон)
	
	LocalidЗаполняемыеПоДаннымДокумента = ИнтеграцияЕГИСЗ_СЭМД.LocalidЗаполняемыеПоДаннымДокумента(Шаблон.ШаблонПриема);
	
	Если НезаполненныеПараметры.ПараметрыОбщихСекций.Количество() > 0
		Или НезаполненныеПараметры.ПараметрыСекцийТела.Количество() > 0
	Тогда
		НоваяСтрокаШаблона = Строки.Добавить();
		НоваяСтрокаШаблона.НезаполненныйПараметр = Шаблон.ШаблонПриема;
		СтрокиПараметровШаблона = НоваяСтрокаШаблона.ПолучитьЭлементы();
		Для Каждого НезаполненныйПараметр Из НезаполненныеПараметры.ПараметрыОбщихСекций Цикл
			НоваяСтрока = СтрокиПараметровШаблона.Добавить();
			НоваяСтрока.НезаполненныйПараметр = ПолучитьСтрокуНезаполненногоПараметра(НезаполненныйПараметр);
		КонецЦикла;
		
		Для Каждого НезаполненныйПараметр Из НезаполненныеПараметры.ПараметрыСекцийТела Цикл
			LocalidНезаполненногоПараметра = НезаполненныйПараметр.СвойстваРодительскогоУзла.СвойстваУзла.LocalId;
			// В эту таблицу только зарезервированные и заполняемые по данным документа
			Если ИнтеграцияЕГИСЗ_СЭМД.ЗарезервированныйLocalid(LocalidНезаполненногоПараметра)
				Или LocalidЗаполняемыеПоДаннымДокумента.Найти(LocalidНезаполненногоПараметра) <> Неопределено
			Тогда
				НоваяСтрока = СтрокиПараметровШаблона.Добавить();
				НоваяСтрока.НезаполненныйПараметр = ПолучитьСтрокуНезаполненногоПараметра(НезаполненныйПараметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрочиеОшибки(Проблемы, Строки)
	
	Если ТипЗнч(Проблемы) <> Тип("Массив") И ТипЗнч(Проблемы) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Проблема Из Проблемы Цикл
		
		Если ТипЗнч(Проблема) = Тип("Соответствие") Тогда
			ЗаполнитьПрочиеОшибки(Проблема, Строки);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Проблема) = Тип("КлючИЗначение") Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Ошибка = Проблема.Ключ;
			ЗаполнитьПрочиеОшибки(Проблема.Значение, НоваяСтрока.ПолучитьЭлементы());
		ИначеЕсли ТипЗнч(Проблема) = Тип("Строка") Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Ошибка = Проблема;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуНезаполненногоПараметра(ДанныеНезаполненногоПараметра)
	
	Возврат ДанныеНезаполненногоПараметра.СвойстваРодительскогоУзла.СвойстваУзла.Синоним;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступныеДолжностиМЗ()
	
	ДолжностьМЗ = Неопределено;
	
	ДолжностиСотрудника = ИнтеграцияЕГИСЗВызовСервера.ДолжностиМЗ(СотрудникУстановившийПодпись);
	Если ДолжностиСотрудника.Количество() > 0 Тогда
		ДолжностьМЗ = ДолжностиСотрудника[0];
	КонецЕсли;
	
	ПараметрыВыбораПоля = Новый Массив;
	ПараметрыВыбораПоля.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДолжностиСотрудника));
	Элементы.ДолжностьМЗ.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
	Элементы.ДолжностьМЗ.СписокВыбора.ЗагрузитьЗначения(ДолжностиСотрудника);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.Проверить.Доступность = ЗначениеЗаполнено(СотрудникУстановившийПодпись) И ЗначениеЗаполнено(ДолжностьМЗ);
	
КонецПроцедуры

#КонецОбласти