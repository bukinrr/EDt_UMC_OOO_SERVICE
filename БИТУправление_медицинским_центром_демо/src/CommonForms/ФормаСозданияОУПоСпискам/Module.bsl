#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СхемаКомпоновкиДанных = Документы.СписокНаПрохождениеМедосмотра.ПолучитьМакет("ОтборСписковНаПрохождение");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);	
	
	ОтборСписковНаПрохождение.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	ОтборСписковНаПрохождение.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ЗагрузитьНастройки();
	ДатаСозданияОУ = ТекущаяДата();
	
	Если ТипЗнч(Параметры.СпискиНаПрохождение) = Тип("Массив") И Параметры.СпискиНаПрохождение.Количество() > 0 Тогда 
		Для Каждого элСписок Из Параметры.СпискиНаПрохождение Цикл 
			НоваяСтрока = СпискиНаПрохождениеМедосмотра.Добавить();
			НоваяСтрока.СписокНаПрохождение = элСписок;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда	
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСпискиНаПрохождение(Команда)
	
	ТекстВопроса = НСтр("ru = 'Перед заполнением список будет очищен. Заполнить?'");
	Если СпискиНаПрохождениеМедосмотра.Количество() > 0 
		И Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет 
	Тогда
		Возврат;
	КонецЕсли;
	
	СпискиНаПрохождениеМедосмотра.Очистить();
	СпискиСписковНаМедосмотр = ПолучитьСпискиНаПрохождениеНаСервере(ОтборСписковНаПрохождение);
	
	Если СпискиСписковНаМедосмотр.СпискиНаМедосмотрНекорректные.Количество() <> 0 Тогда
		ТекстСПМО = "";
		Для Каждого НекорректныйДокумент Из СпискиСписковНаМедосмотр.СпискиНаМедосмотрНекорректные Цикл
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстСПМО, Строка(НекорректныйДокумент), Символы.ПС);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Следующие документы удовлетворяют отбору, но не добавлены, т.к. для них не заполнена программа обслуживания(вид полиса):
				|"+ТекстСПМО);
	КонецЕсли;
	
	мсСпискиНаМедосмотр = СпискиСписковНаМедосмотр.СпискиНаМедосмотр;
	Для Каждого элСписок Из мсСпискиНаМедосмотр Цикл
		НоваяСтрока = СпискиНаПрохождениеМедосмотра.Добавить();
		НоваяСтрока.СписокНаПрохождение = элСписок;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпискиНаПрохождениеНаСервере(Знач ОтборСписковНаПрохождение)
	
	Результат = Новый Структура("СпискиНаМедосмотр,СпискиНаМедосмотрНекорректные", Новый Массив, Новый Массив);
	
	СхемаКомпоновкиДанных = Документы.СписокНаПрохождениеМедосмотра.ПолучитьМакет("ОтборСписковНаПрохождение");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных)));
    КомпоновщикНастроек.ЗагрузитьНастройки(ОтборСписковНаПрохождение.ПолучитьНастройки());
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);	

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
	Для Каждого Документ Из ТабРезультат.ВыгрузитьКолонку("СписокНаПрохождение") Цикл
		Если ЗначениеЗаполнено(Документ.ВидПолиса) Тогда
			Результат.СпискиНаМедосмотр.Добавить(Документ);
		Иначе
			Результат.СпискиНаМедосмотрНекорректные.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокУслуг(Команда)
	
	Если Не ЗначениеЗаполнено(НастройкаВыборУслуг)
		Или НастройкаВыборУслуг = "ТолькоВыполненные" И Не ЗначениеЗаполнено(НастройкаУчетВыполнения)
	Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не заполнены параметры определения состава услуг к отражению'"), 30);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Перед заполнением таблица будет очищена.'") + " " + НСтр("ru = 'Продолжить?'");
	Если СписокУслугНаОплату.Количество() > 0 
		И Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет 
	Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокУслугНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокУслугНаСервере()
	
	СписокУслугНаОплату.Очистить();
	
	Прейскурант = УправлениеНастройками.ПолучитьПрейскурантФилиала();

	Выборка = ПолучитьДанныеКОтражениюПродаж(Прейскурант);
		
	// Доп. параметры

	ПользовательскаяДата = (НастройкаДатыСозданияОУ = "Фиксированная" И ЗначениеЗаполнено(ДатаСозданияОУ));
	
	КешСоставаМедкомисии = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СписокУслугНаОплату.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Дата = ?(ПользовательскаяДата, ДатаСозданияОУ, Выборка.Дата);
		НоваяСтрока.СписокНаПрохождение	= Выборка.СПМО;
		НоваяСтрока.ПрохождениеМедосмотра = Выборка.ПМО;
		
		Если Выборка.Цена <> Null Тогда 
			НоваяСтрока.Цена = Выборка.Цена;
		Иначе
			ПрейскурантСписка = ?(ЗначениеЗаполнено(Выборка.Прейскурант),Выборка.Прейскурант,Прейскурант);
			
			НоваяСтрока.Цена = Ценообразование.ПолучитьЦену(ПрейскурантСписка, НоваяСтрока.Номенклатура, НоваяСтрока.Дата).Цена;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Сотрудник) Тогда 
			НоваяСтрока.Врач = Выборка.Сотрудник;
		Иначе
			ДатаСостава = НачалоДня(НоваяСтрока.Дата);
			СтруктураКлюч = Новый Структура("ДатаСостава,Филиал",ДатаСостава,Выборка.Филиал);
			СоставМедкомисии = КешСоставаМедкомисии.Получить(СтруктураКлюч);
			Если СоставМедкомисии = Неопределено Тогда 
				СоставМедкомисии = МедосмотрыСерверПовтИсп.ПолучитьСоставМедкомиссии(ДатаСостава,,Выборка.Филиал);
				КешСоставаМедкомисии.Вставить(СтруктураКлюч, СоставМедкомисии);
			КонецЕсли;
			
			// Ищем врача среди медкомиссии
			Если СоставМедкомисии.Количество() > 0 Тогда 
				ВрачиПоСпециализации = СоставМедкомисии.НайтиСтроки(Новый Структура("Специализация", НоваяСтрока.Номенклатура.КатегорияВыработки));
				Если ВрачиПоСпециализации.Количество() > 0 Тогда 
					НоваяСтрока.Врач = ВрачиПоСпециализации[0].Сотрудник;
				Иначе
					НоваяСтрока.Врач = ВрачПоУмолчанию;
				КонецЕсли;
			Иначе
				НоваяСтрока.Врач = ВрачПоУмолчанию;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	СписокУслугНаОплату_ТЗ = РеквизитФормыВЗначение("СписокУслугНаОплату");
	ОбщегоНазначения.СвернутьТаблицуЗначений(СписокУслугНаОплату_ТЗ, "Количество");
	ЗначениеВРеквизитФормы(СписокУслугНаОплату_ТЗ, "СписокУслугНаОплату");
	
	СписокУслугНаОплату.Сортировать("Клиент, Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОказанияУслуг(Команда)
	
	Если Не ЗначениеЗаполнено(НастройкаВыборУслуг)
		Или НастройкаВыборУслуг = "ТолькоВыполненные" И Не ЗначениеЗаполнено(НастройкаУчетВыполнения)
	Тогда
		Предупреждение("Не заполнены параметры определения состава услуг к отражению", 30);
		Возврат;
	КонецЕсли;
	
	Если СписокУслугНаОплату.Количество() = 0 Тогда 
		ТекстВопроса = НСтр("ru = 'Таблица услуг пустая. Заполнить?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда 
			Возврат;
		КонецЕсли;
		ЗаполнитьСписокУслугНаСервере();
		Возврат;
	Иначе
		ТекстВопроса = НСтр("ru = 'Создать документы оказания услуг?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = СоздатьОказанияУслугНаСервере();
	ЗаполнитьСписокУслугНаСервере();
	
	Если ТекстОшибки = "" Тогда 
		ТекстСообщения = НСтр("ru = 'Документы созданы!'");
	Иначе
		ТекстСообщения = ТекстОшибки;
	КонецЕсли;
	
	Предупреждение(ТекстСообщения);
		
КонецПроцедуры

&НаСервере
Функция СоздатьОказанияУслугНаСервере()
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();	
	АвтоматическиЗаполнятьМатериалы = 
		мУчетнаяПолитика.ВестиУчетРасходаМатериаловНаУслуги И 
		мУчетнаяПолитика.АвтоматическиЗаполнятьНормыРасходаМатериаловОУ;
	ТекстОшибки = "";
	Счетчик = 0;
	ТаблицаУслуг = СписокУслугНаОплату.Выгрузить();
	
	ТаблицаСозданныеПМО = Новый ТаблицаЗначений;
	ТаблицаСозданныеПМО.Колонки.Добавить("ПМО");
	ТаблицаСозданныеПМО.Колонки.Добавить("СПМО");
	ТаблицаСозданныеПМО.Колонки.Добавить("Клиент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслуг.Клиент,
	|	ТаблицаУслуг.Номенклатура,
	|	ТаблицаУслуг.Цена,
	|	ТаблицаУслуг.Количество,
	|	ВЫРАЗИТЬ(ТаблицаУслуг.СписокНаПрохождение КАК Документ.СписокНаПрохождениеМедосмотра) КАК СписокНаПрохождение,
	|	ТаблицаУслуг.ПрохождениеМедосмотра,
	|	ТаблицаУслуг.Врач,
	|	ТаблицаУслуг.Дата,
	|	ТаблицаУслуг.Филиал
	|ПОМЕСТИТЬ ТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Филиал КАК Филиал,
	|	ТаблицаУслуг.Клиент КАК Клиент,
	|	ТаблицаУслуг.Номенклатура,
	|	ТаблицаУслуг.Цена,
	|	ТаблицаУслуг.Количество,
	|	ТаблицаУслуг.СписокНаПрохождение КАК СписокНаПрохождение,
	|	ТаблицаУслуг.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра,
	|	ТаблицаУслуг.Врач,
	|	ТаблицаУслуг.Дата КАК Дата,
	|	ТаблицаУслуг.СписокНаПрохождение.ВидПолиса КАК ВидПолиса,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуг.СписокНаПрохождение.ВидПолиса.Прейскурант = ЗНАЧЕНИЕ(Справочник.Прейскуранты.ПустаяСсылка)
	|			ТОГДА &ОсновнойПрейскурант
	|		ИНАЧЕ ТаблицаУслуг.СписокНаПрохождение.ВидПолиса.Прейскурант
	|	КОНЕЦ КАК Прейскурант
	|ИЗ
	|	ТаблицаУслуг КАК ТаблицаУслуг
	|ИТОГИ ПО
	|	СписокНаПрохождение,
	|	Дата,
	|	Клиент,
	|	ПрохождениеМедосмотра";
	Запрос.УстановитьПараметр("ТаблицаУслуг", ТаблицаУслуг);
	Запрос.УстановитьПараметр("ОсновнойПрейскурант", УправлениеНастройками.ПолучитьПрейскурантФилиала());
	Результат = Запрос.Выполнить();
	ВыборкаСписки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Результат.Пустой() Тогда 
		ТекстОшибки = НСтр("ru = 'Документы не созданы!'");
	КонецЕсли;
	
	Пока ВыборкаСписки.Следующий() Цикл
		
		СписокНаПрохождение = ВыборкаСписки.СписокНаПрохождение;
		Если Не ЗначениеЗаполнено(ВыборкаСписки.ВидПолиса) Тогда
			ТекстОшибки = НСтр("ru = 'В списке на прохождение не указана программа обслуживания!'");
			Продолжить;
		КонецЕсли;
		
		ВыборкаДаты = ВыборкаСписки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДаты.Следующий() Цикл
			
			ВыборкаКлиенты = ВыборкаДаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКлиенты.Следующий() Цикл 
				
				// Поиск полиса
				Полис = МедицинскоеСтрахование.ПолисПоВиду(ВыборкаКлиенты.Клиент, ВыборкаСписки.ВидПолиса, Истина, ВыборкаКлиенты.Дата);
				Если Не ЗначениеЗаполнено(Полис) Тогда 
					НовыйПолис = Справочники.СтраховыеПолисы.СоздатьЭлемент();
					НовыйПолис.Владелец = ВыборкаКлиенты.Клиент;
					НовыйПолис.ВидПолиса = ВыборкаСписки.ВидПолиса;
					НовыйПолис.Записать();
					Полис = НовыйПолис.Ссылка;
				КонецЕсли;
				
				ВыборкаПМО = ВыборкаКлиенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПМО.Следующий() Цикл
				
					ПрохождениеМО = ВыборкаПМО.ПрохождениеМедосмотра;
					Если Не ЗначениеЗаполнено(ПрохождениеМО) Тогда
						мсПМО = ТаблицаСозданныеПМО.НайтиСтроки(Новый Структура("СПМО, Клиент", СписокНаПрохождение, ВыборкаКлиенты.Клиент));
						Если мсПМО.Количество() > 0 Тогда
							ПрохождениеМО = мсПМО[0];
						КонецЕсли;
					КонецЕсли;
					
					
					Если Не ЗначениеЗаполнено(ПрохождениеМО) Тогда
						СтруктураСоздания = Новый Структура;
						СтруктураСоздания.Вставить("Клиент", ВыборкаКлиенты.Клиент);
						СтруктураСоздания.Вставить("Дата", ТекущаяДата());
						СтруктураСоздания.Вставить("СПМО",	 СписокНаПрохождение);
						СтруктураСоздания.Вставить("Филиал", СписокНаПрохождение.Филиал);
						СтруктураСоздания.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
						
						// Поиск типа медосмотра в СПМО.
						СтрокаРаботникВСписке = СписокНаПрохождение.Клиенты.Найти(ВыборкаКлиенты.Клиент, "Клиент");
						Если СтрокаРаботникВСписке <> Неопределено Тогда
							СтруктураСоздания.Вставить("ТипМедосмотра", СтрокаРаботникВСписке.ТипМедосмотра);
						КонецЕсли;
						
						// Создание нового ПМО
						ПрохождениеМО = Документы.ПрохождениеМедосмотра.СоздатьПрохождениеМедосмотра(СтруктураСоздания);
						
						Если ПрохождениеМО = Неопределено Тогда 
							Продолжить;
						КонецЕсли;
						
						СтрокаТаблицы = ТаблицаСозданныеПМО.Добавить();
						СтрокаТаблицы.ПМО	 = ПрохождениеМО;
						СтрокаТаблицы.СПМО	 = СтруктураСоздания.СПМО;
						СтрокаТаблицы.Клиент = СтруктураСоздания.Клиент;
						
					КонецЕсли;
					
					НовоеОУ = Документы.ОказаниеУслуг.СоздатьДокумент();
					НовоеОУ.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;
					НовоеОУ.Документ = Полис;
					НовоеОУ.ДокументОснование = ПрохождениеМО;
					НовоеОУ.Клиент = ВыборкаКлиенты.Клиент;
					НовоеОУ.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"ОсновнаяКасса");
					НовоеОУ.Прейскурант = ВыборкаКлиенты.Прейскурант;
					НовоеОУ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					НовоеОУ.Комментарий = "Отражение в учете услуг медосмотра по спискам на прохождение";
					
					ВыборкаУслуги = ВыборкаПМО.Выбрать();
					Пока ВыборкаУслуги.Следующий() Цикл
						Если ЗначениеЗаполнено(ВыборкаУслуги.Врач) Тогда 
							// Не определены на момент до выборки
							НовоеОУ.Дата = ВыборкаУслуги.Дата;
							НовоеОУ.Филиал = ВыборкаУслуги.Филиал;
							НовоеОУ.Сотрудник = ВыборкаУслуги.Врач;
							НовоеОУ.Склад = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(ВыборкаУслуги.Врач,"ОсновнойСкладТоваров", ВыборкаУслуги.Филиал);
							НовоеОУ.СкладМатериалов = УправлениеНастройками.ПолучитьЗначениеСотрудникаПоУмолчанию(ВыборкаУслуги.Врач,"ОсновнойСкладМатериалов", ВыборкаУслуги.Филиал);
							Если ЗначениеЗаполнено(ВыборкаУслуги.Номенклатура) Тогда 
								НоваяСтрока = НовоеОУ.Работы.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУслуги);
								НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
								НоваяСтрока.Сотрудник = ВыборкаУслуги.Врач;
								НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					// Подготовка данных о нормативной продолжительности услуг
					Сотрудники = Новый Массив;
					НоменклатураРабот = Новый Массив;
					Для Каждого строкаРабот Из НовоеОУ.Работы Цикл 
						Сотрудники.Добавить(строкаРабот.Сотрудник);
						НоменклатураРабот.Добавить(строкаРабот.Номенклатура);
					КонецЦикла;
					
					НормативныеПродолжительностиУслуг = КалендарьПланирования.ПолучитьНормативныеПродолжительностиУслуг(Сотрудники, НоменклатураРабот);
					Отбор = Новый Структура("Сотрудник, Номенклатура");
					
					// Заполнение фактической продолжительности
					Для Каждого строкаРабот Из НовоеОУ.Работы Цикл 
						Отбор.Сотрудник = строкаРабот.Сотрудник;
						Отбор.Номенклатура = строкаРабот.Номенклатура;
						мсСтр = НормативныеПродолжительностиУслуг.НайтиСтроки(Отбор);
						Если мсСтр.Количество() <> 0 Тогда
							строкаРабот.Продолжительность = Дата(1,1,1) + мсСтр[0].Продолжительность;

						КонецЕсли;
					КонецЦикла;	

					Если АвтоматическиЗаполнятьМатериалы Тогда 
						СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(НовоеОУ);
						НовоеОУ.Материалы.Загрузить(Документы.ОказаниеУслуг.ЗаполнитьМатериалыПоНормамРабот(СтруктураШапкиДокумента, НовоеОУ.Работы.Выгрузить()));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НовоеОУ.Сотрудник) Тогда 
						Попытка
							НовоеОУ.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							Счетчик = Счетчик + 1;
						КонецПопытки;
					Иначе 
						ТекстОшибки = НСтр("ru = 'Документы не созданы! Не заполнен врач в документе оказания услуг'");
					КонецЕсли;	
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Счетчик > 0 Тогда 
		ТекстОшибки = НСтр("ru = 'Документы не созданы! При записи документов возникли ошибки'");
	КонецЕсли;	
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКСпискуУслуг(Команда)
	
	ЗаполнитьСписокУслугНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписокУслугНаОплату;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЭлементНастроекПриИзменении(Элемент)
	
	НастроитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСозданияОУПоСпискам", "НастройкаВыборУслуг", НастройкаВыборУслуг);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСозданияОУПоСпискам", "НастройкаДатыСозданияОУ", НастройкаДатыСозданияОУ);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСозданияОУПоСпискам", "НастройкаУчетВыполнения", НастройкаУчетВыполнения);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСозданияОУПоСпискам", "ВрачПоУмолчанию", ВрачПоУмолчанию);
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	НастройкаВыборУслуг = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСозданияОУПоСпискам", "НастройкаВыборУслуг", Элементы.НастройкаВыборУслуг.СписокВыбора[0].Значение);
	НастройкаДатыСозданияОУ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСозданияОУПоСпискам", "НастройкаДатыСозданияОУ", Элементы.НастройкаДатыСозданияОУ.СписокВыбора[0].Значение);
	НастройкаУчетВыполнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСозданияОУПоСпискам", "НастройкаУчетВыполнения", Элементы.НастройкаУчетВыполнения.СписокВыбора[0].Значение);
	ВрачПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСозданияОУПоСпискам", "ВрачПоУмолчанию", ПараметрыСеанса.ТекущийПользователь.Сотрудник);
			
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДоступность()
	
	ВыбиратьДату = (НастройкаДатыСозданияОУ = "Фиксированная");
	ВсеУслуги = (НастройкаВыборУслуг = "ВсеУслуги");
	
	Элементы.ДатаСозданияОУ.Видимость = ВыбиратьДату;
	Элементы.НастройкаУчетВыполнения.Видимость = Не ВсеУслуги;
	Элементы.ГруппаВыборУслугВрач.Видимость = Не ВсеУслуги;
	НастройкаУчетВыполнения = ?(ВсеУслуги, "ИзПриемов", НастройкаУчетВыполнения);	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКОтражениюПродаж(Прейскурант)
	
	// Подготовка временных таблиц
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("СпискиНаПрохождение", СпискиНаПрохождениеМедосмотра.Выгрузить().ВыгрузитьКолонку("СписокНаПрохождение"));
	Запрос.УстановитьПараметр("ОсновнойПрейскурант", Прейскурант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокНаПрохождениеМедосмотра.Ссылка КАК СписокНаПрохождение,
	|	СписокНаПрохождениеМедосмотра.Дата,
	|	СписокНаПрохождениеМедосмотра.ДатаЗаключительногоАкта,
	|	СписокНаПрохождениеМедосмотра.Контрагент,
	|	СписокНаПрохождениеМедосмотра.ВидПолиса,
	|	ВЫБОР
	|		КОГДА СписокНаПрохождениеМедосмотра.ВидПолиса.Прейскурант = ЗНАЧЕНИЕ(Справочник.Прейскуранты.ПустаяСсылка)
	|			ТОГДА &ОсновнойПрейскурант
	|		ИНАЧЕ СписокНаПрохождениеМедосмотра.ВидПолиса.Прейскурант
	|	КОНЕЦ КАК Прейскурант,
	|	СписокНаПрохождениеМедосмотра.ДействияМедосмотраФиксируютсяСметой,
	|	СписокНаПрохождениеМедосмотра.Филиал
	|ПОМЕСТИТЬ СпискиНаПрохождение
	|ИЗ
	|	Документ.СписокНаПрохождениеМедосмотра КАК СписокНаПрохождениеМедосмотра
	|ГДЕ
	|	СписокНаПрохождениеМедосмотра.Ссылка В(&СпискиНаПрохождение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНаПрохождениеМедосмотраУслуги.Клиент,
	|	СписокНаПрохождениеМедосмотраУслуги.Действие,
	|	СписокНаПрохождениеМедосмотраУслуги.Действие.Номенклатура КАК Номенклатура,
	|	СписокНаПрохождениеМедосмотраУслуги.Цена,
	|	СписокНаПрохождениеМедосмотраУслуги.Ссылка КАК СПМО,
	|	СписокНаПрохождениеМедосмотраУслуги.Ссылка.Филиал КАК Филиал
	|ПОМЕСТИТЬ Сметы
	|ИЗ
	|	Документ.СписокНаПрохождениеМедосмотра.Услуги КАК СписокНаПрохождениеМедосмотраУслуги
	|ГДЕ
	|	СписокНаПрохождениеМедосмотраУслуги.Ссылка В(&СпискиНаПрохождение)
	|	И СписокНаПрохождениеМедосмотраУслуги.Действие.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрохождениеМедосмотра.Ссылка КАК ПМОСсылка,
	|	ПрохождениеМедосмотра.Клиент,
	|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра,
	|	ПрохождениеМедосмотра.Дата,
	|	ПрохождениеМедосмотра.ДатаЗавершения,
	|	ВЫБОР
	|		КОГДА ПрохождениеМедосмотра.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Закрыт,
	|	ПрохождениеМедосмотра.Филиал
	|ПОМЕСТИТЬ ПМО
	|ИЗ
	|	Документ.ПрохождениеМедосмотра КАК ПрохождениеМедосмотра
	|ГДЕ
	|	ПрохождениеМедосмотра.СписокНаПрохождениеМедосмотра В(&СпискиНаПрохождение)
	|	И ПрохождениеМедосмотра.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиКПрохождению.Клиент,
	|	УслугиКПрохождению.Номенклатура,
	|	МАКСИМУМ(УслугиКПрохождению.Цена) КАК Цена,
	|	УслугиКПрохождению.СПМО,
	|	СУММА(1) КАК Количество,
	|	УслугиКПрохождению.СПМО.Филиал КАК Филиал
	|ПОМЕСТИТЬ УслугиКПрохождению
	|ИЗ
	|	Сметы КАК УслугиКПрохождению
	|ГДЕ
	|	УслугиКПрохождению.СПМО.ДействияМедосмотраФиксируютсяСметой
	|
	|СГРУППИРОВАТЬ ПО
	|	УслугиКПрохождению.Клиент,
	|	УслугиКПрохождению.СПМО,
	|	УслугиКПрохождению.Номенклатура,
	|	УслугиКПрохождению.СПМО.Филиал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПМО.Клиент,
	|	ПрохождениеМедосмотраДействияМедосмотра.Действие.Номенклатура,
	|	NULL,
	|	ПМО.СписокНаПрохождениеМедосмотра,
	|	СУММА(1),
	|	ПМО.Филиал
	|ИЗ
	|	Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ПрохождениеМедосмотраДействияМедосмотра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПМО КАК ПМО
	|		ПО ПрохождениеМедосмотраДействияМедосмотра.Ссылка = ПМО.ПМОСсылка
	|ГДЕ
	|	ПрохождениеМедосмотраДействияМедосмотра.Ссылка В
	|			(ВЫБРАТЬ
	|				ПМО.ПМОСсылка
	|			ИЗ
	|				ПМО)
	|	И НЕ ПрохождениеМедосмотраДействияМедосмотра.Ссылка.СписокНаПрохождениеМедосмотра.ДействияМедосмотраФиксируютсяСметой
	|
	|СГРУППИРОВАТЬ ПО
	|	ПМО.СписокНаПрохождениеМедосмотра,
	|	ПМО.Клиент,
	|	ПрохождениеМедосмотраДействияМедосмотра.Действие.Номенклатура,
	|	ПМО.Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.Клиент,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
	|	ПМО.ПМОСсылка КАК ПМО,
	|	ПМО.СписокНаПрохождениеМедосмотра КАК СПМО,
	|	ПМО.СписокНаПрохождениеМедосмотра.Филиал КАК Филиал
	|ПОМЕСТИТЬ ОказанныеУслуги
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			(Клиент, Номенклатура) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					УслугиКПрохождению.Клиент,
	|					УслугиКПрохождению.Номенклатура
	|				ИЗ
	|					УслугиКПрохождению)) КАК ПродажиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПМО КАК ПМО
	|		ПО (ВЫБОР
	|				КОГДА ПродажиОбороты.Регистратор.ДокументОснование ССЫЛКА Документ.ПрохождениеМедосмотра
	|					ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Регистратор.ДокументОснование КАК Документ.ПрохождениеМедосмотра)
	|				КОГДА ПродажиОбороты.Регистратор.ДокументОснование ССЫЛКА Документ.Прием
	|						И ВЫРАЗИТЬ(ПродажиОбороты.Регистратор.ДокументОснование КАК Документ.Прием).ПервичныйПрием ССЫЛКА Документ.ПрохождениеМедосмотра
	|					ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(ПродажиОбороты.Регистратор.ДокументОснование КАК Документ.Прием).ПервичныйПрием КАК Документ.ПрохождениеМедосмотра)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = ПМО.ПМОСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.Клиент,
	|	ПродажиОбороты.Номенклатура,
	|	ПМО.СписокНаПрохождениеМедосмотра,
	|	ПМО.ПМОСсылка,
	|	ПМО.СписокНаПрохождениеМедосмотра.Филиал";
	Запрос.Выполнить();

	// Получение услуг к отражению продаж
	
	Если НастройкаВыборУслуг = "ВсеУслуги" 
		Или НастройкаУчетВыполнения = "ИзПрМО"
	Тогда
		// Запрос-основа
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УслугиКПрохождению_И_ПМО.Клиент,
		|	УслугиКПрохождению_И_ПМО.Номенклатура,
		|	УслугиКПрохождению_И_ПМО.Цена,
		|	УслугиКПрохождению_И_ПМО.СПМО,
		|	СпискиНаПрохождение.Прейскурант,
		|	УслугиКПрохождению_И_ПМО.ПМО,
		|	УслугиКПрохождению_И_ПМО.Количество - ЕСТЬNULL(ОказанныеУслуги.Количество, 0) КАК Количество,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЕСТЬNULL(УслугиКПрохождению_И_ПМО.Дата, ВЫБОР
		|			КОГДА СпискиНаПрохождение.ДатаЗаключительногоАкта <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА СпискиНаПрохождение.ДатаЗаключительногоАкта
		|			ИНАЧЕ СпискиНаПрохождение.Дата
		|		КОНЕЦ) КАК Дата,
		|	СпискиНаПрохождение.Филиал КАК Филиал
		|ИЗ
		|	(ВЫБРАТЬ
		|		УслугиКПрохождению.Клиент КАК Клиент,
		|		УслугиКПрохождению.Номенклатура КАК Номенклатура,
		|		УслугиКПрохождению.Цена КАК Цена,
		|		УслугиКПрохождению.СПМО КАК СПМО,
		|		МАКСИМУМ(ПМО.ПМОСсылка) КАК ПМО,
		|		УслугиКПрохождению.Количество КАК Количество,
		|		ВЫБОР
		|			КОГДА ПМО.ПМОСсылка ЕСТЬ NULL 
		|				ТОГДА NULL
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПМО.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА КОНЕЦПЕРИОДА(ПМО.ДатаЗавершения, ДЕНЬ)
		|					ИНАЧЕ ПМО.Дата
		|				КОНЕЦ
		|		КОНЕЦ КАК Дата,
		|		УслугиКПрохождению.Филиал КАК Филиал
		|	ИЗ
		|		УслугиКПрохождению КАК УслугиКПрохождению
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПМО КАК ПМО
		|			ПО УслугиКПрохождению.СПМО = ПМО.СписокНаПрохождениеМедосмотра
		|				И УслугиКПрохождению.Клиент = ПМО.Клиент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УслугиКПрохождению.Клиент,
		|		УслугиКПрохождению.Номенклатура,
		|		УслугиКПрохождению.СПМО,
		|		УслугиКПрохождению.Цена,
		|		УслугиКПрохождению.Количество,
		|		ВЫБОР
		|			КОГДА ПМО.ПМОСсылка ЕСТЬ NULL 
		|				ТОГДА NULL
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПМО.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА КОНЕЦПЕРИОДА(ПМО.ДатаЗавершения, ДЕНЬ)
		|					ИНАЧЕ ПМО.Дата
		|				КОНЕЦ
		|		КОНЕЦ,
		|		УслугиКПрохождению.Филиал) КАК УслугиКПрохождению_И_ПМО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпискиНаПрохождение КАК СпискиНаПрохождение
		|		ПО УслугиКПрохождению_И_ПМО.СПМО = СпискиНаПрохождение.СписокНаПрохождение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОказанныеУслуги КАК ОказанныеУслуги
		|		ПО УслугиКПрохождению_И_ПМО.Клиент = ОказанныеУслуги.Клиент
		|			И УслугиКПрохождению_И_ПМО.Номенклатура = ОказанныеУслуги.Номенклатура
		|			И УслугиКПрохождению_И_ПМО.СПМО = ОказанныеУслуги.СПМО
		|ГДЕ
		|	УслугиКПрохождению_И_ПМО.Количество > ЕСТЬNULL(ОказанныеУслуги.Количество, 0)";
		
		Если НастройкаУчетВыполнения = "ИзПрМО" Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + "И УслугиКПрохождению_И_ПМО.ПМО В (ВЫБРАТЬ ПМОСсылка  ИЗ ПМО ГДЕ ПМО.Закрыт)";
		КонецЕсли;
			
	ИначеЕсли НастройкаУчетВыполнения = "ИзПриемов" Или НастройкаУчетВыполнения = "ИзПрМОПоОтметкам" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра,
			|	ПМО.Клиент,
			|	ПМО.СписокНаПрохождениеМедосмотра КАК СПМО,
			|	ОтметкиВыполненияДействийСрезПоследних.Действие,
			|	ОтметкиВыполненияДействийСрезПоследних.Действие.Номенклатура КАК Номенклатура,
			|	СУММА(1) КАК Количество,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор ССЫЛКА Документ.Прием
			|				ТОГДА ОтметкиВыполненияДействийСрезПоследних.ДокументРегистратор.Врач
			|			ИНАЧЕ ЗНАЧЕНИЕ(справочник.сотрудники.пустаяссылка)
			|		КОНЕЦ) КАК Сотрудник,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ПМО.ПМОСсылка ЕСТЬ NULL 
			|				ТОГДА NULL
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ПМО.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА КОНЕЦПЕРИОДА(ПМО.ДатаЗавершения, ДЕНЬ)
			|					ИНАЧЕ ПМО.Дата
			|				КОНЕЦ
			|		КОНЕЦ) КАК Дата,
			|	ПМО.Филиал
			|ПОМЕСТИТЬ ОтметкиВыполнения
			|ИЗ
			|	РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(
			|			,
			|			ПрохождениеМедОсмотра В
			|				(ВЫБРАТЬ
			|					ПМО.ПМОСсылка
			|				ИЗ
			|					ПМО)) КАК ОтметкиВыполненияДействийСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПМО КАК ПМО
			|		ПО ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра = ПМО.ПМОСсылка
			|ГДЕ
			|	ОтметкиВыполненияДействийСрезПоследних.Действие.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|	И ОтметкиВыполненияДействийСрезПоследних.Выполнено
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтметкиВыполненияДействийСрезПоследних.ПрохождениеМедОсмотра,
			|	ПМО.Клиент,
			|	ПМО.СписокНаПрохождениеМедосмотра,
			|	ОтметкиВыполненияДействийСрезПоследних.Действие,
			|	ОтметкиВыполненияДействийСрезПоследних.Действие.Номенклатура,
			|	ПМО.Филиал
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УслугиКПрохождению_И_ПМО.Клиент,
			|	УслугиКПрохождению_И_ПМО.Номенклатура,
			|	УслугиКПрохождению_И_ПМО.Цена,
			|	УслугиКПрохождению_И_ПМО.СПМО,
			|	СпискиНаПрохождение.Прейскурант,
			|	УслугиКПрохождению_И_ПМО.ПМО,
			|	УслугиКПрохождению_И_ПМО.Количество - ЕСТЬNULL(ОказанныеУслуги.Количество, 0) КАК Количество,
			|	УслугиКПрохождению_И_ПМО.Сотрудник,
			|	ЕСТЬNULL(УслугиКПрохождению_И_ПМО.Дата, ВЫБОР
			|			КОГДА СпискиНаПрохождение.ДатаЗаключительногоАкта <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА СпискиНаПрохождение.ДатаЗаключительногоАкта
			|			ИНАЧЕ СпискиНаПрохождение.Дата
			|		КОНЕЦ) КАК Дата,
			|	СпискиНаПрохождение.Филиал
			|ИЗ
			|	(ВЫБРАТЬ
			|		УслугиКПрохождению.Клиент КАК Клиент,
			|		УслугиКПрохождению.Номенклатура КАК Номенклатура,
			|		УслугиКПрохождению.Цена КАК Цена,
			|		УслугиКПрохождению.СПМО КАК СПМО,
			|		МАКСИМУМ(ПМО.ПМОСсылка) КАК ПМО,
			|		ВЫБОР
			|			КОГДА УслугиКПрохождению.Количество > ОтметкиВыполненияСводно.Количество
			|				ТОГДА ОтметкиВыполненияСводно.Количество
			|			ИНАЧЕ УслугиКПрохождению.Количество
			|		КОНЕЦ КАК Количество,
			|		ОтметкиВыполненияСводно.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА ПМО.ПМОСсылка ЕСТЬ NULL 
			|				ТОГДА NULL
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ПМО.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА КОНЕЦПЕРИОДА(ПМО.ДатаЗавершения, ДЕНЬ)
			|					ИНАЧЕ ПМО.Дата
			|				КОНЕЦ
			|		КОНЕЦ КАК Дата
			|	ИЗ
			|		УслугиКПрохождению КАК УслугиКПрохождению
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПМО КАК ПМО
			|			ПО УслугиКПрохождению.СПМО = ПМО.СписокНаПрохождениеМедосмотра
			|				И УслугиКПрохождению.Клиент = ПМО.Клиент
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				ОтметкиВыполнения.СПМО КАК СПМО,
			|				ОтметкиВыполнения.Клиент КАК Клиент,
			|				ОтметкиВыполнения.Номенклатура КАК Номенклатура,
			|				СУММА(ОтметкиВыполнения.Количество) КАК Количество,
			|				ОтметкиВыполнения.Сотрудник КАК Сотрудник
			|			ИЗ
			|				ОтметкиВыполнения КАК ОтметкиВыполнения
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ОтметкиВыполнения.СПМО,
			|				ОтметкиВыполнения.Клиент,
			|				ОтметкиВыполнения.Номенклатура,
			|				ОтметкиВыполнения.Сотрудник) КАК ОтметкиВыполненияСводно
			|			ПО УслугиКПрохождению.СПМО = ОтметкиВыполненияСводно.СПМО
			|				И УслугиКПрохождению.Клиент = ОтметкиВыполненияСводно.Клиент
			|				И УслугиКПрохождению.Номенклатура = ОтметкиВыполненияСводно.Номенклатура
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпискиНаПрохождение КАК СпискиНаПрохождение
			|			ПО УслугиКПрохождению.СПМО = СпискиНаПрохождение.СписокНаПрохождение
			|				И (СпискиНаПрохождение.ДействияМедосмотраФиксируютсяСметой)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		УслугиКПрохождению.Клиент,
			|		УслугиКПрохождению.Номенклатура,
			|		УслугиКПрохождению.СПМО,
			|		УслугиКПрохождению.Цена,
			|		ОтметкиВыполненияСводно.Сотрудник,
			|		ВЫБОР
			|			КОГДА ПМО.ПМОСсылка ЕСТЬ NULL 
			|				ТОГДА NULL
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ПМО.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА КОНЕЦПЕРИОДА(ПМО.ДатаЗавершения, ДЕНЬ)
			|					ИНАЧЕ ПМО.Дата
			|				КОНЕЦ
			|		КОНЕЦ,
			|		ВЫБОР
			|			КОГДА УслугиКПрохождению.Количество > ОтметкиВыполненияСводно.Количество
			|				ТОГДА ОтметкиВыполненияСводно.Количество
			|			ИНАЧЕ УслугиКПрохождению.Количество
			|		КОНЕЦ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОтметкиВыполнения.Клиент,
			|		ОтметкиВыполнения.Номенклатура,
			|		Смета.Цена,
			|		ОтметкиВыполнения.СПМО,
			|		ОтметкиВыполнения.ПрохождениеМедОсмотра,
			|		ОтметкиВыполнения.Количество,
			|		ОтметкиВыполнения.Сотрудник,
			|		ВЫБОР
			|			КОГДА ОтметкиВыполнения.ПрохождениеМедОсмотра ЕСТЬ NULL 
			|				ТОГДА NULL
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ОтметкиВыполнения.ПрохождениеМедОсмотра.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА КОНЕЦПЕРИОДА(ОтметкиВыполнения.ПрохождениеМедОсмотра.ДатаЗавершения, ДЕНЬ)
			|					ИНАЧЕ ОтметкиВыполнения.ПрохождениеМедОсмотра.Дата
			|				КОНЕЦ
			|		КОНЕЦ
			|	ИЗ
			|		ОтметкиВыполнения КАК ОтметкиВыполнения
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				Сметы.Клиент КАК Клиент,
			|				Сметы.Номенклатура КАК Номенклатура,
			|				МАКСИМУМ(Сметы.Цена) КАК Цена,
			|				Сметы.СПМО КАК СПМО,
			|				Сметы.Действие КАК Действие
			|			ИЗ
			|				Сметы КАК Сметы
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Сметы.Клиент,
			|				Сметы.Номенклатура,
			|				Сметы.СПМО,
			|				Сметы.Действие) КАК Смета
			|			ПО ОтметкиВыполнения.СПМО = Смета.СПМО
			|				И ОтметкиВыполнения.Клиент = Смета.Клиент
			|				И ОтметкиВыполнения.Действие = Смета.Действие
			|				И ОтметкиВыполнения.Номенклатура = Смета.Номенклатура
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпискиНаПрохождение КАК СпискиНаПрохождение
			|			ПО ОтметкиВыполнения.СПМО = СпискиНаПрохождение.СписокНаПрохождение
			|				И (НЕ СпискиНаПрохождение.ДействияМедосмотраФиксируютсяСметой)) КАК УслугиКПрохождению_И_ПМО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпискиНаПрохождение КАК СпискиНаПрохождение
			|		ПО УслугиКПрохождению_И_ПМО.СПМО = СпискиНаПрохождение.СписокНаПрохождение
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОказанныеУслуги КАК ОказанныеУслуги
			|		ПО УслугиКПрохождению_И_ПМО.Клиент = ОказанныеУслуги.Клиент
			|			И УслугиКПрохождению_И_ПМО.Номенклатура = ОказанныеУслуги.Номенклатура
			|			И УслугиКПрохождению_И_ПМО.СПМО = ОказанныеУслуги.СПМО
			|ГДЕ
			|	УслугиКПрохождению_И_ПМО.Количество > ЕСТЬNULL(ОказанныеУслуги.Количество, 0)";
		
		Если НастройкаУчетВыполнения = "ИзПрМОПоОтметкам" Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + "И УслугиКПрохождению_И_ПМО.ПМО В (ВЫБРАТЬ ПМОСсылка  ИЗ ПМО ГДЕ ПМО.Закрыт)";
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти