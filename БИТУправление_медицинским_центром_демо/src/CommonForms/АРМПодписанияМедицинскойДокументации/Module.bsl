#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеМД.Параметры.УстановитьЗначениеПараметра("ОтмеченныеМД", Новый Массив());
	ДанныеМД.Параметры.УстановитьЗначениеПараметра("ПустойУИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ДанныеМД.Параметры.УстановитьЗначениеПараметра("ВидыДокументовСПодписьюМО", ПолучитьВидыДокументовСПодписьюМО());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапуститьАвтоРегистрациюВРЭМД(Команда)
	
	СообщенияРЭМДКОтправке = ИнтеграцияЕГИСЗ_РЭМД.ПолучитьПодготовленныеСообщенияРЭМД();
	
	ДостигнутЛимит = Ложь;
	Для Каждого СообщениеРЭМД Из СообщенияРЭМДКОтправке Цикл
		ИнтеграцияЕГИСЗ_РЭМДКлиент.ЗарегистрироватьДокументВРЭМД(СообщениеРЭМД, ДостигнутЛимит);
		Если ДостигнутЛимит Тогда
			Сообщить(НСтр("ru='Превышен лимит запросов к сервису.'"));
			Прервать;
		КонецЕсли;
		Прогресс = Окр(СообщенияРЭМДКОтправке.Найти(СообщениеРЭМД) * 100 / СообщенияРЭМДКОтправке.Количество());
		Состояние("Выполняется отправка сообщений в РЭМД...", Прогресс);
	КонецЦикла;
	
	Элементы.ДанныеКРегистрации.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтмеченныеДокументы(Команда)
	
	мДанныеДляПодписи = ПодписатьОтмеченныеДокументыНаСервере();
	Если мДанныеДляПодписи.Количество() > 0 Тогда
		ПодписатьФайлЭМДВРоли(мДанныеДляПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	СнятьВсеОтметкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметку(Команда)
	
	ВД = Элементы.ДанныеМД.ВыделенныеСтроки;
	
	ПоявилисьНовыеОтметки = Ложь;
	
	Для Каждого ВДИдентификатор Из ВД Цикл
		Если СообщенияДляПодписи.НайтиПоЗначению(ВДИдентификатор) = Неопределено Тогда 
			СообщенияДляПодписи.Добавить(ВДИдентификатор, "");
			ПоявилисьНовыеОтметки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоявилисьНовыеОтметки Тогда
		ОтметитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	
	ВД = Элементы.ДанныеМД.ВыделенныеСтроки;
	ПоявилисьНовыеОтметки = Ложь;
	
	Для Каждого ВДИдентификатор Из ВД Цикл
		НайденныйЭлемент = СообщенияДляПодписи.НайтиПоЗначению(ВДИдентификатор);
		Если НайденныйЭлемент <> Неопределено Тогда 
			СообщенияДляПодписи.Удалить(НайденныйЭлемент);
			ПоявилисьНовыеОтметки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоявилисьНовыеОтметки Тогда
		СнятьОтметкуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеОтметки(Команда)
	УстановитьВсеОтметкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСообщенияВРЭМД(Команда)
	
	ДостигнутЛимит = Ложь;
	Для Каждого СообщениеРЭМД Из Элементы.ДанныеКРегистрации.ВыделенныеСтроки Цикл
		Если ЗначениеЗаполнено(СообщениеРЭМД) Тогда
			ИнтеграцияЕГИСЗ_РЭМДКлиент.ЗарегистрироватьДокументВРЭМД(СообщениеРЭМД, ДостигнутЛимит);
			Если ДостигнутЛимит Тогда
				Сообщить(НСтр("ru='Превышен лимит запросов к сервису.'"));
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДанныеКРегистрации.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеМДНаПодписьПриИзменении(Элемент)
	
	ТД = Элементы.ДанныеМД.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		
		НайденныйЭлемент = СообщенияДляПодписи.НайтиПоЗначению(ТД.Ссылка);
		// Флажок взвели и это сообщение не состояло в списк отмеченных - добавим его туда и обновим параметры на сервере.
		Если НайденныйЭлемент = Неопределено И ТД.НаПодпись Тогда
			СообщенияДляПодписи.Добавить(ТД.Ссылка, "");
			ОтметитьНаСервере();
			
		// Флажок сняли и это сообщение состояло в списк отмеченных - удалим его оттуда и обновим параметры на сервере.
		ИначеЕсли НайденныйЭлемент <> Неопределено И Не ТД.НаПодпись Тогда
			СообщенияДляПодписи.Удалить(НайденныйЭлемент);
			ОтметитьНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущийЭлемент = Элементы.ДанныеМДДокумент
	Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКРегистрацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущийЭлемент = Элементы.ДанныеКРегистрацииДокумент
	Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьВидыДокументовСПодписьюМО()
	
	ВидыДокументовСПодписьюМО = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭМДАтрибуты.Ссылка КАК Ссылка,
		|	РЭМДАтрибуты.Ключ КАК Ключ,
		|	РЭМДАтрибуты.Значение КАК Значение
		|ИЗ
		|	Справочник.РегистрируемыеЭлектронныеМедДокументы.Атрибуты КАК РЭМДАтрибуты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрируемыеЭлектронныеМедДокументы КАК РЭМД
		|		ПО РЭМДАтрибуты.Ссылка = РЭМД.Ссылка
		|			И (НЕ РЭМД.ПометкаУдаления)
		|			И (НЕ РЭМД.Архив)
		|			И (РЭМДАтрибуты.Ключ = ""MO_SIGN"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Если Булево(Выборка.Значение) Тогда
				ВидыДокументовСПодписьюМО.Добавить(Выборка.Ссылка);
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ВидыДокументовСПодписьюМО;
	
КонецФункции

&НаСервере
Функция ПодписатьОтмеченныеДокументыНаСервере()
	
	мДанныеДляПодписи = Новый Массив();
	Для Каждого КлючИЗначение Из СообщенияДляПодписи Цикл
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("МедицинскийДокумент",	КлючИЗначение.Значение.Документ);
		ДанныеПодписи.Вставить("Роль",					Неопределено);
		ДанныеПодписи.Вставить("УИД",					Новый УникальныйИдентификатор(КлючИЗначение.Значение.ИдентификаторДокумента));
		ДанныеПодписи.Вставить("ПутьКФайлу",			ИнтеграцияЕГИСЗ_РЭМД.ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(КлючИЗначение.Значение.ПутьКФайлуЭМД));
		ДанныеПодписи.Вставить("СообщениеРЭМД",			КлючИЗначение.Значение);
		ДанныеПодписи.Вставить("ПодписываемыеДанные",	ИнтеграцияЕГИСЗВызовСервера.ПолучитьДДФайла(ДанныеПодписи.ПутьКФайлу));
		
		мДанныеДляПодписи.Добавить(ДанныеПодписи);
	КонецЦикла;
	
	Возврат мДанныеДляПодписи;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьФайлЭМДВРолиЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось подписать " + Параметры.СообщениеРЭМД);
		Возврат;
	КонецЕсли;
	
	// При сохранении данных подписи надо сохранить признак подписания файла ЭМД.
	Параметры.Вставить("ПодписанФайлЭМД", Истина);
	
	бит_СертификатыЭЦПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	мСообщенияСУстановленнымиПодписями = ОбновитьТЧСообщенияРЭМД(Параметры);
	
	Для Каждого Сообщение Из мСообщенияСУстановленнымиПодписями Цикл
		НайденныйЭлемент = СообщенияДляПодписи.НайтиПоЗначению(Сообщение);
		Если НайденныйЭлемент <> Неопределено Тогда 
			СообщенияДляПодписи.Удалить(НайденныйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Если мСообщенияСУстановленнымиПодписями.Количество() > 0 Тогда
		ОтметитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьТЧСообщенияРЭМД(ПараметрыОбновления)
	
	мСообщенияСУстановленнымиПодписями = Новый Массив;
	Для Каждого СтрокаЭЦП Из ПараметрыОбновления.УИДыЭЦП Цикл
		
		СообщениеРЭМД = СтрокаЭЦП.СообщениеРЭМД;
		
		Если ЗначениеЗаполнено(СообщениеРЭМД) Тогда
			ИдентификаторРЭМД		= ИнтеграцияЕГИСЗ_РЭМД.ПолучитьИдентификаторИНомерДокументаДляРЭМД(СообщениеРЭМД.Документ, , СообщениеРЭМД.ИдентификаторШаблонаЭМД);
			ПутьКАрхивуРЭМД			= ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьПутьКАрхивуРЭМД();
			ИмяФайлаБезРасширения	= ПутьКАрхивуРЭМД + "\" + ИдентификаторРЭМД.ИдентификаторДокумента;
			
			ДвоичныеДанныеПодписи = СтрокаЭЦП.СвойстваПодписи.Подпись;
			СРЭМД = СообщениеРЭМД.ПолучитьОбъект();
			
			УдалитьСтрокиПодписейМО(СРЭМД);
			
			НомерПодписи	= СРЭМД.ЭлектронныеПодписиЭМД.Количество() + 1;
			ИмяФайлаПодписи	= ИдентификаторРЭМД.ИдентификаторДокумента + "_sign" + НомерПодписи;
			ПутиДляПодписи	= ИнтеграцияЕГИСЗСервер.ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайлаПодписи);
			ДвоичныеДанныеПодписи.Записать(ПутиДляПодписи.ПолныйПуть);
			
			СРЭМД.Отправить = Истина;
			
			Подпись = СРЭМД.ЭлектронныеПодписиЭМД.Добавить();
			Подпись.ПутьКФайлуПодписиЭМД = ПутиДляПодписи.ОтносительныйПуть;
			Подпись.Сотрудник			 = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
			Подпись.РольРЭМД			 = СтрокаЭЦП.РольПодписи;
			Подпись.ЭтоПодписьМО		 = Истина;
			Подпись.УИД_ЭЦП				 = СтрокаЭЦП.ПолученныйУИДЭЦП;
			Попытка
				СРЭМД.Записать();
				мСообщенияСУстановленнымиПодписями.Добавить(СообщениеРЭМД);
			Исключение
				СообщениеДляЖР = СтрШаблон("Ошибка при сохранении данных подписи МО в сообщении  ""%1"" :", СообщениеРЭМД);
				ЗаписьЖурналаРегистрации("ИнтеграцияЕГИСЗ.Ошибка", УровеньЖурналаРегистрации.Ошибка,,, СообщениеДляЖР);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Ошибка при сохранении данных подписи МО в сообщении  ""%1"" :", СообщениеРЭМД));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мСообщенияСУстановленнымиПодписями;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСтрокиПодписейМО(СообщениеРЭМД)
	
	СтрокиМО = СообщениеРЭМД.ЭлектронныеПодписиЭМД.НайтиСтроки(Новый Структура("ЭтоПодписьМО", Истина));
	Для Каждого СтрокаМО Из СтрокиМО Цикл
		СообщениеРЭМД.ЭлектронныеПодписиЭМД.Удалить(СтрокаМО);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЭМДВРоли(мДанныеДляПодписи)
	
	Объекты = Новый Массив;
	Для Каждого ДанныеДляПодписи Из мДанныеДляПодписи Цикл
		Объекты.Добавить(ДанныеДляПодписи.МедицинскийДокумент);
	КонецЦикла;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объекты", Объекты);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьФайлЭМДВРолиЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	НаборДанных = Новый Массив;
	МассивДанныхОбъектов = Новый Массив;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы",	 УникальныйИдентификатор);
	ПараметрыВыполнения.Вставить("МассивДанныхОбъектов", МассивДанныхОбъектов);
	
	Для Каждого ОбъектМ Из мДанныеДляПодписи Цикл
		
		МассивДанныхОбъектов.Добавить(ОбъектМ);
		
		ТекущиеПараметрыВыполнения = Новый Структура;
		ТекущиеПараметрыВыполнения.Вставить("ИдентификаторФормы",	УникальныйИдентификатор);
		ТекущиеПараметрыВыполнения.Вставить("ПодписываемыеДанные",	ОбъектМ.ПодписываемыеДанные);
		
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("Представление",		ОбъектМ.МедицинскийДокумент);
		ЭлементДанных.Вставить("Данные",			ОбъектМ.ПодписываемыеДанные);
		ЭлементДанных.Вставить("Объект",			Новый ОписаниеОповещения("ПриПолученииПодписи", ОбщегоНазначенияКлиент.ОбщийМодуль("бит_СертификатыЭЦПКлиент"), ТекущиеПараметрыВыполнения));
		ЭлементДанных.Вставить("СообщениеРЭМД",		ОбъектМ.СообщениеРЭМД);
		ЭлементДанных.Вставить("ИмяФайла",			ОбъектМ.ПутьКФайлу);
		ЭлементДанных.Вставить("Роль",				ОбъектМ.Роль);
		ЭлементДанных.Вставить("УИД",				ОбъектМ.УИД);
		ЭлементДанных.Вставить("ПодписанФайлЭМД",	Истина);
		ЭлементДанных.Вставить("ИдентификаторРоли",	Неопределено);
		
		НаборДанных.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Операция = НСтр("ru = 'Подписание'");
	ЗаголовкиСтруктура = Новый Структура;
	ЗаголовкиСтруктура.Вставить("ЗаголовокДанных");
	ЗаголовокДанных = ЗаголовкиСтруктура.ЗаголовокДанных;
	ЗаголовокДанных = НСтр("ru = 'Объект'");
	ПредставлениеНабора = ЗаголовокДанных;
	
	СертификатыМО = Новый Массив;
	СертификатыМО.Добавить(ИнтеграцияЕГИСЗСерверПовтИсп.ПолучитьСертификатПодписанияСообщенийSOAP());
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий",	Истина);
	ОписаниеДанных.Вставить("ИдентификаторФормы",	УникальныйИдентификатор);
	ОписаниеДанных.Вставить("Операция",				Операция);
	ОписаниеДанных.Вставить("ЗаголовокДанных",		ЗаголовокДанных);
	ОписаниеДанных.Вставить("НаборДанных",			НаборДанных);
	ОписаниеДанных.Вставить("ПредставлениеНабора",	ПредставлениеНабора);
	ОписаниеДанных.Вставить("ОтборСертификатов",	СертификатыМО);
	
	ОбработчикПродолжения = Новый ОписаниеОповещения("ПослеПодписанияОбъектов", ОбщегоНазначенияКлиент.ОбщийМодуль("бит_СертификатыЭЦПКлиент"), ПараметрыВыполнения);
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОбработчикПродолжения);
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиНаСервере()
	
	СообщенияДляПодписи.Очистить();
	ДанныеМД.Параметры.УстановитьЗначениеПараметра("ОтмеченныеМД", Новый Массив());
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьНаСервере()
	
	мОтмеченныеМД = Новый Массив();
	
	Для Каждого КлючИЗначение Из СообщенияДляПодписи Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Представление) Тогда
			КлючИЗначение.Представление = СформироватьПредставлениеСообщенияРЭМД(КлючИЗначение.Значение);
		КонецЕсли;
		мОтмеченныеМД.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ДанныеМД.Параметры.УстановитьЗначениеПараметра("ОтмеченныеМД", мОтмеченныеМД);
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтметкуНаСервере()
	
	мОтмеченныеМД = Новый Массив();
	
	Для Каждого КлючИЗначение Из СообщенияДляПодписи Цикл
		мОтмеченныеМД.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ДанныеМД.Параметры.УстановитьЗначениеПараметра("ОтмеченныеМД", мОтмеченныеМД);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВсеОтметкиНаСервере()
	
	ТЗ = ВыгрузитьДинамическийСписокВТаблицуЗначений(ДанныеМД);
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		НайденныйЭлемент = СообщенияДляПодписи.НайтиПоЗначению(СтрокаТЗ.Ссылка);
		Если НайденныйЭлемент = Неопределено Тогда 
			СообщенияДляПодписи.Добавить(СтрокаТЗ.Ссылка, СтрокаТЗ.Документ);
			ПоявилисьНовыеОтметки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоявилисьНовыеОтметки Тогда
		мОтмеченныеМД = Новый Массив();
		
		Для Каждого КлючИЗначение Из СообщенияДляПодписи Цикл
			мОтмеченныеМД.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
		
		ДанныеМД.Параметры.УстановитьЗначениеПараметра("ОтмеченныеМД", мОтмеченныеМД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьСхемуКомпоновки(СхемаКомпоновкиАдресСхемы, КомпоновщикНастроекНастройкиАдресНастроек = Неопределено, ТипГенератораМакета = Неопределено, ВыгружатьВДерево = Ложь, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Если Ложь Тогда
		СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
		КомпоновщикНастроекНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
	КонецЕсли;
	
	СхемаКомпоновки = СхемаКомпоновкиАдресСхемы;
	Если ТипЗнч(СхемаКомпоновкиАдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(СхемаКомпоновкиАдресСхемы) Тогда
		СхемаКомпоновки = ПолучитьИзВременногоХранилища(СхемаКомпоновкиАдресСхемы);
	КонецЕсли;
	
	Если ТипГенератораМакета = Неопределено Тогда
		ТипГенератораМакета = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	КонецЕсли;
	
	ВнешниеНаборы = ВнешниеНаборыДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ВнешниеНаборы = Новый Структура;
	КонецЕсли;
	
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	Если КомпоновщикНастроекНастройкиАдресНастроек <> Неопределено Тогда
		
		КомпоновщикНастроек = КомпоновщикНастроекНастройкиАдресНастроек;
		Если ТипЗнч(КомпоновщикНастроекНастройкиАдресНастроек) = Тип("Строка") И ЭтоАдресВременногоХранилища(КомпоновщикНастроекНастройкиАдресНастроек) Тогда
			КомпоновщикНастроек = ПолучитьИзВременногоХранилища(КомпоновщикНастроекНастройкиАдресНастроек);
		КонецЕсли;
		
		Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
			НастройкиКомпоновки = КомпоновщикНастроек;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, , , ТипГенератораМакета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборы, , Истина);
	
	Результат = Неопределено;
	Если ТипГенератораМакета = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") Тогда
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		Если ВыгружатьВДерево Тогда
			Результат = Новый ДеревоЗначений;
		Иначе
			Результат = Новый ТаблицаЗначений;
		КонецЕсли;
		
		ПроцессорВывода.УстановитьОбъект(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Иначе
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДинамическийСписокВТаблицуЗначений(Список) Экспорт
	
	ТекстЗапроса = "";
	Если Список.ПроизвольныйЗапрос Тогда
		ТекстЗапроса = Список.ТекстЗапроса;
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ * ИЗ " + Список.ОсновнаяТаблица + " КАК Таб";
	КонецЕсли;
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ЛокальнаяБаза";
	ИсточникДанных.СтрокаСоединения = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = "ЛокальнаяБаза";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	
	Попытка
		
		// Работает только на 8.3
		КомпоновщикНастроек.ЗагрузитьНастройки(Список.КомпоновщикНастроек.ПолучитьНастройки());
		НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		
	Исключение
		
		//НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		//
		//// Копируем отбор
		//РаботаССКДКлиентСервер.СкопироватьОтборКомпоновкиДанных(НастройкиКомпоновки.Отбор, Список.Отбор);
		//
		//// Устанавливаем параметры
		//Для Каждого УстановленныйПараметр Из Список.Параметры.Элементы Цикл
		// НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(УстановленныйПараметр.Параметр, УстановленныйПараметр.Значение);
		//КонецЦикла;
		
	КонецПопытки;
	
	ДетальныеЗаписи = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	Для Каждого ДоступноеПоле Из НастройкиКомпоновки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		ВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		ВыбранноеПоле.Заголовок = ДоступноеПоле.Заголовок;
		
	КонецЦикла;
	
	Возврат ВыполнитьСхемуКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеСообщенияРЭМД(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Или ТипЗнч(Ссылка) <> Тип("СправочникСсылка.СообщенияРЭМД") Тогда
		Возврат "";
	КонецЕсли;
	
	МД = Ссылка.Документ;
	
	ИмяТипаДокумента = ДопСерверныеФункции.ИмяСсылочногоТипа(Ссылка.Документ);
	
	Если ИмяТипаДокумента = "Документ.Прием" Тогда
		Префикс = "Прием";
		ВрачСтрокой = МД.Врач.Наименование;
	ИначеЕсли ИмяТипаДокумента = "Документ.ПрохождениеМедосмотра" Тогда
		Префикс = "МедКомиссия";
		ВрачСтрокой = МД.ПредседательМедКомиссии.Наименование;
	Иначе
		Префикс = "Документ";
		ВрачСтрокой = "Врач";
	КонецЕсли;
	
	ДатаСтрокой	= Формат(Ссылка.Документ.Дата, "'от' ДФ=""dd.MM.yyyy ЧЧ:мм""");
	Описание	= Ссылка.ВидДокумента.Наименование;
	
	Возврат Префикс + "   " + ДатаСтрокой + "   " + ВрачСтрокой + "   " + Описание;
	
КонецФункции

#КонецОбласти
