
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Заявка", Заявка);
	Филиал = Параметры.Филиал;
	
	НеРаньше = 	?(Параметры.Дата < ТекущаяДата(), ТекущаяДата(), Параметры.Дата);
	СотрудникШапки = Параметры.СотрудникШапки;

	ТЗ = РеквизитФормыВЗначение("Работы");
	НомерСтроки = 0;
	Для Каждого Строка Из Параметры.СотрудникВремя Цикл
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Сотрудник) И Не ЗначениеЗаполнено(СотрудникШапки) Тогда
			НоваяСтрока.ЛюбойСотрудник = Истина;
		КонецЕсли;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТЗ, "Работы");
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ВремяНачала		= УчетнаяПолитика.ВремяНачалаРаботы; 
	ВремяОкончания	= УчетнаяПолитика.ВремяОкончанияРаботы; 
	ВремяОжидания	= УчетнаяПолитика.ПодборВремениЗаписиМаксВремяОжидания;
	
	ФормироватьПриОткрытии = РаботаСФормамиСервер.ПолучитьНастройкуФормы("ФормаПоискаВремениЗаписи", "ФормироватьПриОткрытии", Истина);
	
	// Установка отраслевых заголовков
	Представления = ПроцедурыСпециализацииПоставки.ОтраслевыеПредставленияРеквизитов();
	Элементы.СотрудникШапки.Заголовок	= Представления.Получить("Сотрудник");
	Элементы.РаботыСотрудник.Заголовок	= Представления.Получить("Сотрудник");
	Элементы.ДеревоВариантовСотрудник.Заголовок = Представления.Получить("Сотрудник");
	Элементы.ДеревоВариантовСписокСотрудников.Заголовок = Представления.Получить("Сотрудники");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ФормироватьПриОткрытии Тогда
		НайтиВарианты(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ФормироватьПриОткрытии", ФормироватьПриОткрытии);
	
	РаботаСФормамиСервер.СохранитьНастройкиФормы(НастройкиФормы, "ФормаПоискаВремениЗаписи"); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборВремени(Команда)
	
	НайтиВарианты();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзТЗ(Команда)
	
	Если ДеревоВариантов.ПолучитьЭлементы().Количество() > 0 Тогда
		ДеревоВариантовВыбор(Элементы.ДеревоВариантов, Элементы.ДеревоВариантов.ТекущаяСтрока,,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУдобноеВремя(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьУдобноеВремяЗавершение", ЭтотОбъект);
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ВыбиратьПериод", Истина);
	ПараметрыВыбора.Вставить("ВремяНачалаАктуальности",	УчетнаяПолитика.ВремяНачалаРаботы);
	ПараметрыВыбора.Вставить("ВремяОкончанияАктуальности", УчетнаяПолитика.ВремяОкончанияРаботы);
	// ПараметрыВыбора.Вставить("ВремяНачала", ВремяНачала);
	// ПараметрыВыбора.Вставить("ВремяОкончания", ВремяОкончания);
	
	ОткрытьФорму("ОбщаяФорма.ВыборВремени", ПараметрыВыбора, ЭтаФорма, ЭтаФорма,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУдобноеВремяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВремяНачала = Результат.ВремяНачала;
		ВремяОкончания = Результат.ВремяОкончания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВремяОжиданияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВремяОжидания = ВремяОжидания + Направление * ОбщегоНазначенияКлиент.ВремяВСекунды(Дата(1,1,1,0,5,0));

КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ВремяВСекунды(ВремяНачала) > ОбщегоНазначенияКлиент.ВремяВСекунды(ВремяОкончания) Тогда
		ВремяОкончания = ВремяНачала;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдобноеВремяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизитаГраницы	= ?(Элемент = Элементы.ВремяНачала, "ВремяНачала", "ВремяОкончания");
	ЭтаФорма[ИмяРеквизитаГраницы] = ЭтаФорма[ИмяРеквизитаГраницы] + Направление * ОбщегоНазначенияКлиент.ВремяВСекунды(Дата(1,1,1,0,30,0));
	
КонецПроцедуры

&НаКлиенте
Процедура НеРаньшеПриИзменении(Элемент)
	
	Если НеРаньше < ТекущаяДата() Тогда
		НеРаньше = ТекущаяДата();
	КонецЕсли;
	
	Если НеРаньше > НеПозднее Тогда 
		 НеПозднее = НеРаньше;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НеПозднееРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(НеПозднее) Тогда
		НеПозднее = НеРаньше - 60 * 60 * 24;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСотрудникПриИзменении(Элемент)
	
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.ЛюбойСотрудник = ТекДанные.Сотрудник.Пустая();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыВзятьНаправляющегоСотрудникаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекДанные <> Неопределено и ТекДанные.ЛюбойСотрудник Тогда
		ТекДанные.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВариантов

&НаКлиенте
Процедура ДеревоВариантовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ДеревоВариантов.ТекущаяСтрока <> Неопределено Тогда
		
		Если ДеревоВариантов.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолучитьРодителя() = Неопределено Тогда
			ИдентификаторРодителя = ВыбраннаяСтрока;
		Иначе
			ИдентификаторРодителя = ДеревоВариантов.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолучитьРодителя().ПолучитьИдентификатор();
		КонецЕсли;
		
		Результат = Новый Структура("День, Работы", Элемент.ДанныеСтроки(ИдентификаторРодителя).Дата, Новый Массив);
		
		СледующийЭлемент = ИдентификаторРодителя + 1;
		
		Пока ДеревоВариантов.НайтиПоИдентификатору(СледующийЭлемент).ПолучитьРодителя() <> Неопределено Цикл
			Результат.Работы.Добавить(Новый Структура("Время, Сотрудник", Элемент.ДанныеСтроки(СледующийЭлемент).ВремяНачала, Элемент.ДанныеСтроки(СледующийЭлемент).Сотрудник));
			СледующийЭлемент = СледующийЭлемент + 1;
			Если ДеревоВариантов.НайтиПоИдентификатору(СледующийЭлемент) = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОповеститьОВыборе(Результат); 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НайтиВарианты(ПриОткрытии = Ложь)
	
	Если Работы.Количество() > 0 Тогда 
		Если Не ЗначениеЗаполнено(НеРаньше) Тогда
			НеРаньше = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НеПозднее) Тогда
			НеПозднее = ДобавитьМесяц(ТекущаяДата(), 1);
		КонецЕсли;
		
		Если НеПозднее < НеРаньше Тогда
			НеПозднее = НеРаньше;
		КонецЕсли;
		
		Для Каждого Строка Из Работы Цикл	
			Если Не ЗначениеЗаполнено(Строка.Сотрудник)
				И Не Строка.ЛюбойСотрудник Тогда
				Строка.Сотрудник = СотрудникШапки;
			КонецЕсли;
		КонецЦикла;
		
		Состояние(НСтр("ru='Идёт поиск вариантов времени записи'"));
		ДеревоВариантов.ПолучитьЭлементы().Очистить();
		ПодготовкаДанныхДляЗаполненияДерева();
		
		Если ДеревоВариантов.ПолучитьЭлементы().Количество() <> 0 Тогда
			Элементы.ДеревоВариантов.ТекущаяСтрока = ДеревоВариантов.ПолучитьЭлементы()[0].ПолучитьИдентификатор()
		КонецЕсли;
	ИначеЕсли Не ПриОткрытии Тогда
		ПоказатьПредупреждение(,НСтр("ru='Исходные данные для поиска отсутствуют'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаДанныхДляЗаполненияДерева()
	
	РаботыОбъект = РеквизитФормыВЗначение("Работы");
	
	// ПроизвольнаяНоменклатура - массив, содержащий номенклатуру с пометкой любой Сотрудник,
	//							номер строки и количество претендующих на это место Сотрудников.
	ПроизвольнаяНоменклатура = ЗаполнениеПроизвольнойНоменклатуры(РаботыОбъект);
		
	Если ПроизвольнаяНоменклатура.Количество() = 0 Тогда
		ЗаполнениеДереваНаСервере();
	Иначе
			
		// ПотенциальныеСотрудники - массив структур, потенциальных вариантов расписания на незаполненную номенклатуру
		ПотенциальныеСотрудники = ПолучитьВариантыСотрудников(ПроизвольнаяНоменклатура, НеРаньше, НеПозднее);
		
		// Заполнение столбца количество претендентов и поиск количества сочетаний сотрудников 
		КоличествоСочетанийСотрудников = 1;
		Для Каждого Строка Из ПроизвольнаяНоменклатура Цикл
			ТекущийМассив = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ПотенциальныеСотрудники);
			// Удаляем элементы, которые не соответствуют индексу
			ОбрИнд = ТекущийМассив.Количество()-1;
			Для Счетчик = 0 по ОбрИнд Цикл
				СтрокаМассива = ТекущийМассив[ОбрИнд-Счетчик];
				Если СтрокаМассива.ИндексСтроки <> Строка.ИндексСтроки Тогда
					ТекущийМассив.Удалить(ОбрИнд-Счетчик);
				КонецЕсли;	
			КонецЦикла;
			Строка.КоличествоПретендентов = ТекущийМассив.Количество();
			Если Строка.КоличествоПретендентов = 0 Тогда // Выведем все неудавшиеся номенклатуры, а не только первую встретившуюся, поэтому без "Прервать;"
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось подобрать сотрудника по специализации для " + Строка.Номенклатура);   
			КонецЕсли;		
			КоличествоСочетанийСотрудников = КоличествоСочетанийСотрудников * ТекущийМассив.Количество(); 
		КонецЦикла;                                  
		
		Если КоличествоСочетанийСотрудников = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// МассивВсехСотрудников - содержит все возможные сочетания сотрудников
		МассивВсехСотрудников = ПолучениеСочетанийНезаполненныхВрачей(ПроизвольнаяНоменклатура, ПотенциальныеСотрудники, ПроизвольнаяНоменклатура.Количество(), КоличествоСочетанийСотрудников);
		
		ЗаполнениеДереваНаСервере(МассивВсехСотрудников);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнениеПроизвольнойНоменклатуры(Работы)
	
	ПроизвольнаяНоменклатура = Новый Массив;
	
	Для Каждого Строка Из Работы Цикл
		Если Не ЗначениеЗаполнено(Строка.Сотрудник) 
			Или Строка.ЛюбойСотрудник Тогда
			ПроизвольнаяНоменклатура.Добавить(Новый Структура("ИндексСтроки, Номенклатура, КоличествоПретендентов", Строка.НомерСтроки, Строка.Номенклатура,));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроизвольнаяНоменклатура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВариантыСотрудников(ПроизвольнаяНоменклатура, ДатаНачала, ДатаОкончания)
	
	// ВариантыСотрудников - массив структур, где ИндексСтроки - номер строки незаполненной номенклатуры в ТЗРаботы
	//					Номенклатура - незаполненная номенклатура, Сотрудник - сотрудник, с подходящей специализацией.
	ВариантыСотрудников = Новый Массив;
	// СотрудникСпециализация - ТЗ сотрудник-специализация, которые есть в расписании на выбранный период
	СотрудникСпециализация = УчаствующиеСотрудники(ДатаНачала, ДатаОкончания);
	Для Каждого Элемент Из ПроизвольнаяНоменклатура Цикл
		СпециализацияНоменклатуры = Элемент.Номенклатура.КатегорияВыработки;
		Для Каждого СтрокаСотрудник Из СотрудникСпециализация Цикл
			Если СтрокаСотрудник.Специализация = СпециализацияНоменклатуры Тогда
				ВариантыСотрудников.Добавить(Новый Структура("ИндексСтроки, Номенклатура, Сотрудник", Элемент.ИндексСтроки, Элемент.Номенклатура, СтрокаСотрудник.Сотрудник));  	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ВариантыСотрудников;
	
КонецФункции

&НаСервереБезКонтекста
Функция УчаствующиеСотрудники(ДатаНачала, ДатаОкончания)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	               |	СотрудникиСпециализации.Специализация КАК Специализация
	               |ИЗ
	               |	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники.Специализации КАК СотрудникиСпециализации
	               |		ПО (СотрудникиСпециализации.Ссылка = ГрафикиРаботы.Сотрудник)
	               |ГДЕ
	               |	ГрафикиРаботы.Дата >= &ДатаНачала
	               |	И ГрафикиРаботы.Дата <= &ДатаОкончания
	               |	И ГрафикиРаботы.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ДатаОкончания));
	
	СписокСотрудников = Запрос.Выполнить().Выгрузить();

	Возврат СписокСотрудников;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучениеСочетанийНезаполненныхВрачей(ПроизвольнаяНоменклатура, ПотенциальныеСотрудники, КоличествоНезаполненныхСотрудников, КоличествоСочетанийСотрудников)
	
	// Двумерный массив со всеми сочетаниями сотрудников
	МассивВсехСотрудников = Новый Массив(КоличествоСочетанийСотрудников, КоличествоНезаполненныхСотрудников);
	
	Делитель = 1;
	НомерСтолбца = 0;
	НомерСтроки = 0;
	Для Каждого Строка из ПроизвольнаяНоменклатура Цикл
		Делитель = Делитель * Строка.КоличествоПретендентов;	
		КоличествоПовторений = КоличествоСочетанийСотрудников / Делитель;
		КоличествоПроходовЦикла = Делитель / Строка.КоличествоПретендентов;
		Счетчик = 0;
		Пока Счетчик < КоличествоПроходовЦикла Цикл
			Для Каждого СтрокаСотрудника Из ПотенциальныеСотрудники Цикл	
				КоличествоОбработанныхСтрок = 0;
				Если СтрокаСотрудника.ИндексСтроки = Строка.ИндексСтроки Тогда
					Пока КоличествоОбработанныхСтрок < КоличествоПовторений Цикл
						МассивВсехСотрудников[НомерСтроки][НомерСтолбца] = СтрокаСотрудника.Сотрудник;
						НомерСтроки = НомерСтроки + 1;
						КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		НомерСтолбца = НомерСтолбца + 1;
		НомерСтроки = 0;
	КонецЦикла;
	
	Возврат МассивВсехСотрудников;
	
КонецФункции

// Процедура ЗаполнениеДереваНаСервере - В ней вызывается процедура ПодборОптимальногоРасписания.ПодборРасписания,
//				в которую передается ТЗРаботы, в которой произвольная номенклатура заполнена конкретными вариантами.
//				Количество вызовов процедуры = количеству возможных сочетаний.
//				После каждого вызова ПодборОптимальногоРасписания.ПодборРасписания вызывается процедура дозаполнения
//				дерева (ПрорисовкаДереваНаСервере).
//
// Параметры:
//  ПроизвольныеСотрудники - массив - содержит все возможные сочетания сотрудников
//
&НаСервере
Процедура ЗаполнениеДереваНаСервере(ПроизвольныеСотрудники = Неопределено)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоВариантов");
	
	ДеревоОбъект.Строки.Очистить();
	
	МассивРеквизитов = Новый Массив;
	
	ТЗРаботы = РеквизитФормыВЗначение("Работы");

	Если ПроизвольныеСотрудники = Неопределено Тогда
		СтруктРез = ПодборОптимальногоРасписания.ПодборРасписания(ТЗРаботы, НеРаньше, НеПозднее, ВремяНачала, ВремяОкончания, Филиал, ВремяОжидания, Заявка);
		ПрорисовкаДереваНаСервере(ДеревоОбъект, СтруктРез, ТЗРаботы);
	Иначе
		КоличествоСочетаний = ПроизвольныеСотрудники.Количество();
		СчетчикСочетаний = 0;
		// В цикле происходит заполнение произвольной номенклатуры конкретными сотрудниками
		Пока СчетчикСочетаний < КоличествоСочетаний Цикл
			ОбработанныйЭлемент = 0;
			КопияТЗРаботы = ТЗРаботы.Скопировать();
			Для Каждого Строка Из КопияТЗРаботы Цикл
				Если Строка.ЛюбойСотрудник Или Не ЗначениеЗаполнено(Строка.Сотрудник) Тогда
					Строка.Сотрудник = ПроизвольныеСотрудники[СчетчикСочетаний][ОбработанныйЭлемент];
					ОбработанныйЭлемент = ОбработанныйЭлемент + 1;
				КонецЕсли;
			КонецЦикла;
			
			СтруктРез = ПодборОптимальногоРасписания.ПодборРасписания(КопияТЗРаботы, НеРаньше, НеПозднее, ВремяНачала, ВремяОкончания, Филиал, ВремяОжидания, Заявка);
			
			ПрорисовкаДереваНаСервере(ДеревоОбъект, СтруктРез, КопияТЗРаботы);
			
			СчетчикСочетаний = СчетчикСочетаний + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	// *** В текущий момент ДеревоОбъект содержит варианты с подобранным временем, его, например, можно оставить исходным 
	// *** и дальше накладывать дополнительную фильтрацию. Либо, если появилась необходимость, дополнительные фильтры
	// *** можно дописать в ПодборОптимальногоРасписания.ПодборРасписания 
	ДеревоОбъект.Строки.Сортировать("Дата Возр, КоличествоУникальныхСотрудников Возр");
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоВариантов");
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрорисовкаДереваНаСервере(ДеревоОбъект, СтруктРез, КопияТЗРаботы)
	
	ТЗ_рез  = СтруктРез.ТЗПотенциальныхВариантовЗаписи;
	СотрудникиВариантов = СтруктРез.МсВрачи;
	КоличествоКолонокВТЗ = ТЗ_рез.Колонки.Количество();
	ИмяПоследнегоСотрудника = "Врач_" + Число(КоличествоКолонокВТЗ-2);
	
	// Получили уникальных врачей 			
	Сотрудники = Новый Массив;
	КоличествоУникальныхСотрудников = 0;
	Для Каждого Строка Из КопияТЗРаботы Цикл
		Если Сотрудники.Найти(Строка.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(Строка.Сотрудник);
			КоличествоУникальныхСотрудников = КоличествоУникальныхСотрудников + 1;
		КонецЕсли;
	КонецЦикла;
	
	СотрудникиСтрокой = "";
	Для Каждого Элемент Из Сотрудники Цикл
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(СотрудникиСтрокой, Элемент,,Истина);
	КонецЦикла;
	
	КоличествоПриемов = КопияТЗРаботы.Количество();
	ВремяПоследнегоПриема = КопияТЗРаботы[КоличествоПриемов - 1].Время;
	
	Для Каждого Строка из ТЗ_рез Цикл 
		СтрокаУровня1 = ДеревоОбъект.Строки.Добавить();
		СтрокаУровня1.Дата = Строка.День;
		СтрокаУровня1.Интервал = Формат(Строка.Врач_1, "ДФ=HH:mm") + " - " + Формат(Строка[ИмяПоследнегоСотрудника]  + (ВремяПоследнегоПриема - Дата(1,1,1)), "ДФ=HH:mm");
		СтрокаУровня1.Ожидание = Строка.ЗатраченноеВремя;
		СтрокаУровня1.СписокСотрудников = СотрудникиСтрокой;
		СтрокаУровня1.КоличествоУникальныхСотрудников = КоличествоУникальныхСотрудников;
		Для Счетчик = 1 По КоличествоКолонокВТЗ - 2 Цикл
			ТекущийСотрудник = "Врач_" + Счетчик;
			СтрокаУровня2 = СтрокаУровня1.Строки.Добавить();
			СтрокаУровня2.ВремяНачала = Строка[ТекущийСотрудник]; 
			СтрокаУровня2.ВремяОкончания = Строка[ТекущийСотрудник] + (КопияТЗРаботы[Счетчик-1].Время - Дата(1,1,1));
			СтрокаУровня2.Сотрудник = СотрудникиВариантов[Счетчик-1];
			СтрокаУровня2.Номенклатура = КопияТЗРаботы[Счетчик-1].Номенклатура;
			СтрокаУровня2.Интервал = Формат(СтрокаУровня2.ВремяНачала, "ДФ=HH:mm") + " - " + Формат(СтрокаУровня2.ВремяОкончания, "ДФ=HH:mm");
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

#КонецОбласти
