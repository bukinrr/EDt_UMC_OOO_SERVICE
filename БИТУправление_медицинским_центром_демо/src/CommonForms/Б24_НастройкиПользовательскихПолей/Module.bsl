#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаПолей = ПолучитьТаблицуПолей();
	ЗаполнитьСпискиВыбора(ТаблицаПолей);
	ЗаполнитьПоля();
	ЗаполнитьПодсказки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНаСервере();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуПолей()
	
	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ЗаголовокПоля");
	ТаблицаПолей.Колонки.Добавить("ИмяПоля");
	ТаблицаПолей.Колонки.Добавить("Сущность");
	ТаблицаПолей.Колонки.Добавить("Множественное");
	
	ДополнитьТаблицуПолей(ТаблицаПолей, "lead");
	ДополнитьТаблицуПолей(ТаблицаПолей, "deal");
	
	Возврат ТаблицаПолей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьТаблицуПолей(ТаблицаПолей, Сущность)
	
	ПользовательскиеПоля = Битрикс.ВыполнитьМетод(СтрШаблон("crm.%1.userfield", Сущность), "list", , , Новый Структура("LANG", "ru"));
	
	Если ПользовательскиеПоля <> Неопределено Тогда
		Для Каждого ПользовательскоеПоле Из ПользовательскиеПоля Цикл
			НовоеПользовательскоеПоле = ТаблицаПолей.Добавить();
			НовоеПользовательскоеПоле.ЗаголовокПоля = ПользовательскоеПоле["EDIT_FORM_LABEL"];
			НовоеПользовательскоеПоле.ИмяПоля = ПользовательскоеПоле["FIELD_NAME"];
			НовоеПользовательскоеПоле.Множественное = ВРег(ПользовательскоеПоле["MULTIPLE"]) = "Y";
			НовоеПользовательскоеПоле.Сущность = Сущность;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора(ТаблицаПолей)
	
	// Лиды
	Для Каждого Поле Из ТаблицаПолей.НайтиСтроки(Новый Структура("Сущность", "lead")) Цикл
		ДобавитьВСписокВыбора("ЛидДатаСоздания", Поле);
	КонецЦикла;
	
	// Сделки
	Для Каждого Поле Из ТаблицаПолей.НайтиСтроки(Новый Структура("Сущность", "deal")) Цикл
		ДобавитьВСписокВыбора("СделкаДатаСоздания", Поле);
		ДобавитьВСписокВыбора("СделкаУИД", Поле);
		Если Поле.Множественное Тогда
			ДобавитьВСписокВыбора("СделкаСписокНоменклатур", Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокВыбора(ИмяЭлемента, Поле)
	
	Попытка
		Элементы[ИмяЭлемента].СписокВыбора.Добавить(Поле.ИмяПоля, Поле.ЗаголовокПоля);
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере()
	
	НЗ = РегистрыСведений.Б24_ПользовательскиеПоля.СоздатьНаборЗаписей();
	тзПоля = Новый ТаблицаЗначений;
	тзПоля.Колонки.Добавить("ПользовательскоеПоле");
	тзПоля.Колонки.Добавить("ИмяПоля");
	
	Для Каждого МетаданныеСтатуса Из Метаданные.Перечисления.Б24_ПользовательскиеПоля.ЗначенияПеречисления Цикл
		
		НовоеПоле = тзПоля.Добавить();
		НовоеПоле.ПользовательскоеПоле = Перечисления.Б24_ПользовательскиеПоля[МетаданныеСтатуса.Имя];
		
		Попытка
			ИмяПоля = ЭтотОбъект[МетаданныеСтатуса.Имя];
		Исключение
			ИмяПоля = "";
		КонецПопытки;
		
		НовоеПоле.ИмяПоля = ИмяПоля;
		
	КонецЦикла;
	
	НЗ.Загрузить(тзПоля);
	НЗ.Записать();
	ОбновитьПовторноИспользуемыеЗначения();
	
	//НаборЗаписей = РегистрыСведений.Б24_ПользовательскиеПоля.СоздатьНаборЗаписей();
	//
	//Для Каждого ПолПоле Из ПользовательскиеПоля Цикл
	//	Если Не ЗначениеЗаполнено(ПолПоле.ЗаголовокПоля) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	МассивТипов = Новый Массив;
	//	МассивТипов.Добавить(ТипЗнч(ПолПоле.НазначениеПоля));
	//	СтрокиТаблицыПолей = ТаблицаПользовательскихПолей.НайтиСтроки(Новый Структура("ЗаголовокПоля, Сущность", ПолПоле.ЗаголовокПоля, Новый ОписаниеТипов(МассивТипов)));
	//	Если СтрокиТаблицыПолей.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	НовПолПоле = НаборЗаписей.Добавить();
	//	НовПолПоле.ИмяПоля = СтрокиТаблицыПолей[0].ИмяПоля;
	//	НовПолПоле.ПользовательскоеПоле = ПолПоле.НазначениеПоля;
	//КонецЦикла;
	//НаборЗаписей.Записать();
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоля()
	
	Поля = Новый Структура;
	
	нзПоля = РегистрыСведений.Б24_ПользовательскиеПоля.СоздатьНаборЗаписей();
	нзПоля.Прочитать();
	тзПоля = нзПоля.Выгрузить();
	
	Для Каждого МетаданныеСтатуса Из Метаданные.Перечисления.Б24_ПользовательскиеПоля.ЗначенияПеречисления Цикл
		СтрокаПоле = тзПоля.Найти(Перечисления.Б24_ПользовательскиеПоля[МетаданныеСтатуса.Имя], "ПользовательскоеПоле");
		Значение = ?(СтрокаПоле = Неопределено, Неопределено, СтрокаПоле.ИмяПоля);
		Поля.Вставить(МетаданныеСтатуса.Имя, Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Поля);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказки()
	
	ПодсказкиЭлементов = Новый Соответствие;
	ПодсказкиЭлементов.Вставить("ЛидДатаСоздания",			"ЛидДатаСоздания");
	ПодсказкиЭлементов.Вставить("СделкаДатаСоздания",		"СделкаДатаСоздания");
	ПодсказкиЭлементов.Вставить("СделкаУИД",				"СделкаУИД");
	ПодсказкиЭлементов.Вставить("СделкаСписокНоменклатур",	"СделкаСписокНоменклатур");
	
	Для Каждого ПодсказкаЭлемента Из ПодсказкиЭлементов Цикл
		
		Попытка
			ЭлементПоляВвода = Элементы[ПодсказкаЭлемента.Ключ];
			КомментарийПеречисления = ПолучитьКомментарийПоля(ПодсказкаЭлемента.Значение);
			Если ЗначениеЗаполнено(КомментарийПеречисления) Тогда
				ЭлементПоляВвода.Подсказка = КомментарийПеречисления;
				ЭлементПоляВвода.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			КонецЕсли;
		Исключение КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомментарийПоля(ИмяЗначенияПеречисления)
	
	ЗначениеПеречисления = Перечисления.Б24_ПользовательскиеПоля[ИмяЗначенияПеречисления];
	ЗначенияПеречисления = Метаданные.Перечисления.Б24_ПользовательскиеПоля.ЗначенияПеречисления;
	Комментарий = ЗначенияПеречисления[Перечисления.Б24_ПользовательскиеПоля.Индекс(ЗначениеПеречисления)].Комментарий;
	Возврат Комментарий;
	
КонецФункции

#КонецОбласти