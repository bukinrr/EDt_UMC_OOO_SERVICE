&НаКлиенте
Перем ПолеОтказ;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УзелИнформационнойБазы = Параметры.УзелИнформационнойБазы;
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Не заданы параметры формы. Форма не может быть открыта.'"), Отказ);
		Возврат;
	КонецЕсли;
	
	// Выполняем проверку на то, что в подчиненном узле РИБ настройка обмена была выполнена полностью.
	НастройкаПодчиненногоУзлаРИБЗавершена = Истина;
	
	ЭтоПодчиненныйУзелРИБ = ПланыОбмена.ГлавныйУзел() <> Неопределено;
	
	Если ЭтоПодчиненныйУзелРИБ Тогда
		
		ИмяПланаОбменаРИБ = ПланыОбмена.ГлавныйУзел().Метаданные().Имя;
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
		
		Если ИмяПланаОбмена = ИмяПланаОбменаРИБ
			И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда
			
			НастройкаПодчиненногоУзлаРИБЗавершена = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получаем вид транспорта сообщений обмена по умолчанию для узла;
	// если значение по умолчанию не задано, то устанавливаем значение FILE.
	ВидТранспортаСообщенийОбмена = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
	Если Не ЗначениеЗаполнено(ВидТранспортаСообщенийОбмена) Тогда
		ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	КонецЕсли;
	
	ОбменДаннымиСервер.ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(УзелИнформационнойБазы, Элементы.ВидТранспортаСообщенийОбмена);
	
	ПолучитьСостоянияОбменовДанными();
	
	// Устанавливаем заголовок формы.
	Заголовок = НСтр("ru = 'Обмен с информационной базой: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, Строка(УзелИнформационнойБазы));
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = Истина;
	
	Элементы.НастроитьПараметрыТранспортаСообщенийОбмена.Видимость = РольДоступнаДобавлениеИзменениеОбменовДанными;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Открываем форму помощника настройки обмена, если настройка не была завершена.
	Если Не НастройкаПодчиненногоУзлаРИБЗавершена Тогда
		
		Предупреждение(НСтр("ru = 'Для выполнения обмена данными необходимо завершить настройку обмена с использованием помощника.'"));
		
		ПараметрыФормы = Новый Структура("ИмяПланаОбмена, ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ", ИмяПланаОбмена, Истина);
		ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.Форма", ПараметрыФормы);
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеЭлементовФормы();
	
	УстановитьДоступностьКнопкиОткрытияКаталогаОбмена();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	РезультатЗагрузкиДанных = "Выполнение";
	
	ОбновитьОтображениеЭлементовФормы();
	
	// Выполняем загрузку данных
	ПодключитьОбработчикОжидания("ВыполнитьЗагрузкуДанныхНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелИнформационнойБазы, ЭтаФорма, "ВыгрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыТранспортаСообщенийОбмена(Команда)
	
	Отбор              = Новый Структура("Узел", УзелИнформационнойБазы);
	ЗначенияЗаполнения = Новый Структура("Узел", УзелИнформационнойБазы);
	
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "НастройкиТранспортаОбмена", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогОбменаИнформацией(Команда)
	
	// Вызов сервера без контекста.
	ИмяКаталога = ПолучитьИмяКаталогаНаСервере(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы);
	
	Если ПустаяСтрока(ИмяКаталога) Тогда
		Предупреждение(НСтр("ru = 'Каталог обмена информацией не задан.'"));
		Возврат;
	КонецЕсли;
	
	// Открываем каталог в приложении explorer.
	ЗапуститьПриложение(ИмяКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТранспортаСообщенийОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиОткрытияКаталогаОбмена();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункции

&НаСервере
Процедура ПолучитьСостоянияОбменовДанными()
	
	СостоянияОбменовДанными = РегистрыСведений.СостоянияОбменовДанными.СостоянияОбменовДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СостоянияОбменовДанными, "РезультатЗагрузкиДанных, РезультатВыгрузкиДанных");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(Отказ)
	
	// Запускаем выполнение обмена.
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, Истина, Ложь, ВидТранспортаСообщенийОбмена);
	
	// Обновляем данные формы
	ПолучитьСостоянияОбменовДанными();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВыгрузкуДанныхНаСервере(Отказ)
	
	// Запускаем выполнение обмена.
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, Ложь, Истина, ВидТранспортаСообщенийОбмена);
	
	// Обновляем данные формы
	ПолучитьСостоянияОбменовДанными();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаНаСервере(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы)
	
	Возврат РегистрыСведений.НастройкиТранспортаОбмена.ИмяКаталогаОбменаИнформацией(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовФормы()
	
	Элементы.СтраницыСтатусаЗагрузкиДанных.ТекущаяСтраница = Элементы[ОбменДаннымиКлиент.СтраницыСтатусаЗагрузкиДанных()[РезультатЗагрузкиДанных]];
	Элементы.СтраницыСтатусаВыгрузкиДанных.ТекущаяСтраница = Элементы[ОбменДаннымиКлиент.СтраницыСтатусаВыгрузкиДанных()[РезультатВыгрузкиДанных]];
	
	Элементы.ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных.Заголовок = ОбменДаннымиКлиент.ЗаголовкиГиперссылокЗагрузкиДанных()[РезультатЗагрузкиДанных];
	Элементы.ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных.Заголовок = ОбменДаннымиКлиент.ЗаголовкиГиперссылокВыгрузкиДанных()[РезультатВыгрузкиДанных];
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхНаКлиенте()
	
	Состояние(НСтр("ru = 'Выполняется загрузка данных.'"),,
			НСтр("ru = 'Пожалуйста, подождите...'"), БиблиотекаКартинок.Информация32
	);
	
	ПолеОтказ = Ложь;
	Отказ = Ложь;
	
	// Выполняем загрузку данных
	ВыполнитьЗагрузкуДанныхНаСервере(Отказ);
	
	ПолеОтказ = ПолеОтказ ИЛИ Отказ;
	
	РезультатВыгрузкиДанных = "Выполнение";
	
	ОбновитьОтображениеЭлементовФормы();
	
	// Выполняем выгрузку данных
	ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуДанныхНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуДанныхНаКлиенте()
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных.'"),,
			НСтр("ru = 'Пожалуйста, подождите...'"), БиблиотекаКартинок.Информация32
	);
	
	Отказ = Ложь;
	
	// Выполняем выгрузку данных
	ВыполнитьВыгрузкуДанныхНаСервере(Отказ);
	
	ПолеОтказ = ПолеОтказ ИЛИ Отказ;
	
	ОбновитьОтображениеЭлементовФормы();
	
	Оповестить("ВыполненОбменДанными");
	
	Если ПолеОтказ = Истина Тогда
		
		Состояние(НСтр("ru = 'Возникли ошибки при выгрузке и загрузке данных!'"),,
				НСтр("ru = 'Используйте журнал регистрации для диагностики ошибок.'"), БиблиотекаКартинок.Ошибка32
		);
		
	Иначе
		
		Состояние(НСтр("ru = 'Выгрузка и загрузка данных успешно завершены.'"),,, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиОткрытияКаталогаОбмена()
	
	Элементы.ОткрытьКаталогОбменаИнформацией.Доступность = Не (ВидТранспортаСообщенийОбмена = ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.EMAIL"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
