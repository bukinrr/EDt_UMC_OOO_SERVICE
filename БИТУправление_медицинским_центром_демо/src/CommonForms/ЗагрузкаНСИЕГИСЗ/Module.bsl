
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.НаименованиеСправочника) Тогда
		
		Если Параметры.ВыбратьЕдинственный Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Параметры.Свойство("ВидКлассификатора", ВидКлассификатора);
		
		МенеджерСправочника = Справочники[Параметры.НаименованиеСправочника];
		Если Не ЗначениеЗаполнено(Параметры.OID) Тогда
			Если ЗначениеЗаполнено(ВидКлассификатора) Тогда
				Параметры.OID = МенеджерСправочника.ПолучитьOIDСправочника(ВидКлассификатора);
				Заголовок = Строка(ВидКлассификатора);
			Иначе
				Параметры.OID = МенеджерСправочника.ПолучитьOIDСправочника();
				Заголовок = Строка(МенеджерСправочника.СоздатьЭлемент().Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.ВыбратьЕдинственный Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Форма загрузки НСИ ЕГИСЗ не может быть открыта самостоятельно без указания загружаемого справочника");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Версии = ЗагрузкаКлассификаторовНСИЕГИСЗ.ПолучитьВсеВерсииКлассификатора(Параметры.OID, Параметры.ТестовыйКонтур);
	Если Версии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВерсииСправочника.Загрузить(Версии);
	
	ВерсииСправочника.Сортировать("ДатаОбновления Убыв");
	
	Если ЗначениеЗаполнено(ВидКлассификатора) Тогда
		Поля = МенеджерСправочника.ПолучитьСопоставленийРеквизитовИXMLСправочникаЕГИСЗ(ВидКлассификатора);
	Иначе
		Поля = МенеджерСправочника.ПолучитьСопоставленийРеквизитовИXMLСправочникаЕГИСЗ();
		Элементы.ВидКлассификатора.Видимость = Ложь;
	КонецЕсли;
	
	ЕстьКод = Ложь;
	Для Каждого Поле Из Поля Цикл
		ИменаПолей = СтрРазделить(СтрЗаменить(Поле.Значение," ",""), ",", Ложь);
		Если ИменаПолей.Найти("Код") <> Неопределено Тогда
			ЕстьКод = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.АктуальноеКодСпр.Видимость = ЕстьКод;
	Элементы.АктуальноеПометка.ТриСостояния = Истина;
	
	ДополнительныеСвойства = Новый Структура;
	
	// Выбор версии классификатора доступен при запуске с параметром запуска "ConfDebug" или при указании параметра ПоследнююВерсию
	Если Параметры.Свойство("ПоследнююВерсию") Тогда
		ЗагружатьПоследнююВерсию = Параметры.ПоследнююВерсию;
	Иначе
		ЗагружатьПоследнююВерсию = Не ОбщегоНазначенияСервер.РежимРасширенныхВозможностейРедактированияДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗагружатьПоследнююВерсию Тогда
		Получить(Неопределено);
		Если Параметры.Свойство("НеОтображатьФорму")
			И Параметры.НеОтображатьФорму
		Тогда
			ОбновитьСправочник(Неопределено);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Получить(Команда)
	
	// Выполнение операции
	Состояние("Идёт получение данных классификатора");
	
	ТекДанные = Элементы.ВерсииСправочника.ТекущиеДанные;
	Версия = "";
	Если ТекДанные <> Неопределено Тогда
		Версия = ТекДанные.Версия;
		ДатаВерсии = ТекДанные.ДатаОбновления;
	ИначеЕсли ВерсииСправочника.Количество() > 0 Тогда
		Версия = ВерсииСправочника[0].Версия;
		ДатаВерсии = ВерсииСправочника[0].ДатаОбновления;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Версия) Тогда
		
		КоличествоЧастей = ЗагрузкаКлассификаторовНСИЕГИСЗ.ЗапроситьКоличествоЧастейКлассификатора(Параметры.OID, Версия, Параметры.ТестовыйКонтур);
		
		Если КоличествоЧастей = 1
			Или ТипЗнч(Параметры.Отбор) = Тип("Структура")
		Тогда
			ТаблицаКлассификаторХранилище = ПолучитьДеревоКлассификации();
			Структура = Новый Структура("СинхронныйВызов", Истина);
			ЗавершениеПолучить(Структура, Неопределено);
			КоличествоАктуальных = ОбновитьКоличествоАктуальных(Актуальное);
		Иначе
			ПолучитьДеревоКлассификацииНаКлиентеАсинхронно();
		КонецЕсли;
		
	Иначе
		Если Параметры.ТестовыйКонтур Тогда
			АдресСервера = ЗагрузкаКлассификаторовНСИЕГИСЗ.ТестовыйАдресСервераWSDL();
		Иначе
			АдресСервера = ЗагрузкаКлассификаторовНСИЕГИСЗ.АдресСервераWSDL();
		КонецЕсли;
		
		СтруктураURIСервера = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервера);
		ТестОшибкиОбщий = "Проверьте доступность сервера ФР НСИ ЕГИСЗ: "
					+ СтруктураURIСервера.Схема + "://" + СтруктураURIСервера.Хост;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить ответ от сервиса ФР НСИ ЕГИСЗ!" + Символы.ПС + ТестОшибкиОбщий);
	КонецЕсли;
	
	Если Параметры.ВыбратьЕдинственный Тогда
		УстановитьЗначениеФлажков(ЭтотОбъект["Актуальное"], Ложь); // Снять все Флажки
		Элементы.АктуальноеСнятьФлажкиВыделенноеАктуальное.Видимость = Ложь;
		Элементы.УстановитьФлажки.Видимость = Ложь;
		Элементы.АктуальноеУстановитьФлажкиВыделенноеАктуальное.Видимость = Ложь;
		Элементы.АктуальноеУстановитьРекомендуемыеИзменения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСправочник(Команда)
	
	// Есть ли отмеченные элементы для загрузки?
	Если ЕстьОтмеченныеЭлементыВДеревеАктуальных(Актуальное.ПолучитьЭлементы()) Тогда
		
		Состояние("Идёт загрузка справочника");
		
		ОбновитьСправочникНаСервере();
		
		КнопкиОтветов = Новый СписокЗначений;
		КнопкиОтветов.Добавить(КодВозвратаДиалога.ОК);
		КнопкиОтветов.Добавить(КодВозвратаДиалога.Прервать, "Закрыть форму");
		
		Если Не (Параметры.Свойство("НеОтображатьФорму")
			И Параметры.НеОтображатьФорму)
		Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиАктуальных", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, "Загрузка завершена.", КнопкиОтветов, 120, КодВозвратаДиалога.ОК,,КодВозвратаДиалога.Прервать);
		КонецЕсли;
	Иначе
		Если Не (Параметры.Свойство("НеОтображатьФорму")
			И Параметры.НеОтображатьФорму)
		Тогда
			ПоказатьПредупреждение(, "Нет отмеченных элементов для загрузки.", 30);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьЗначениеФлажков(ЭтотОбъект[Прав(Команда.Имя,СтрДлина(Команда.Имя)-11)], Ложь); // Прав откидывает "СнятьФлажки"
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьЗначениеФлажков(ЭтотОбъект[Прав(Команда.Имя,СтрДлина(Команда.Имя)-16)], Истина); // Прав откидывает "УстановитьФлажки"
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВыделенное(Команда)
	УстановитьЗначениеФлажковДляВыделенныхЭлементов(Прав(Команда.Имя,СтрДлина(Команда.Имя)-26), Истина); // Прав откидывает "УстановитьФлажкиВыделенное"
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВыделенное(Команда)
	УстановитьЗначениеФлажковДляВыделенныхЭлементов(Прав(Команда.Имя,СтрДлина(Команда.Имя)-21), Ложь); // Прав откидывает "СнятьФлажкиВыделенное"
КонецПроцедуры

&НаКлиенте
Процедура Архивировать(Команда)
	АрхивироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРекомендуемыеИзменения(Команда)
	УстановитьЗначениеФлажков(ЭтотОбъект["Актуальное"], Истина, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АрхивноеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Архивное.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ОткрытьЗначение(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершениеПолучить(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Не Результат.Свойство("СинхронныйВызов") Тогда
			
			Если Результат.Статус = "Ошибка" Тогда
				ПоказатьПредупреждение(,Результат.КраткоеПредставлениеОшибки);
				Возврат;
			КонецЕсли;
			ЗаполнениеДанныхИзДлительнойОперции(Результат.АдресРезультата);
			КоличествоАктуальных = ОбновитьКоличествоАктуальных(Актуальное);
		КонецЕсли;
		
		Если ТаблицаКлассификаторХранилище <> "" Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСправочник;
			КоличествоУстаревших = Архивное.ПолучитьЭлементы().Количество();
			Если КоличествоУстаревших > 0 Тогда
				Элементы.СтраницаУстаревшее.Заголовок = Элементы.СтраницаУстаревшее.Заголовок + " (" + Архивное.ПолучитьЭлементы().Количество() + ")";
			Иначе
				Элементы.СтраницаУстаревшее.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если Параметры.ТестовыйКонтур Тогда
				АдресСервера = ЗагрузкаКлассификаторовНСИЕГИСЗ.ТестовыйАдресСервераWSDL();
			Иначе
				АдресСервера = ЗагрузкаКлассификаторовНСИЕГИСЗ.АдресСервераWSDL();
			КонецЕсли;
			
			СтруктураURIСервера = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервера);
			ТестОшибкиОбщий = "Проверьте доступность сервера ФР НСИ ЕГИСЗ: "
					+ СтруктураURIСервера.Схема + "://" + СтруктураURIСервера.Хост;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка при запросе данных от сервиса ФР НСИ ЕГИСЗ!" + Символы.ПС + ТестОшибкиОбщий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоКлассификации()
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("НаименованиеСправочника", Параметры.НаименованиеСправочника);
	ПараметрыЗагрузки.Вставить("OID", Параметры.OID);
	ПараметрыЗагрузки.Вставить("Версия", Версия);
	ПараметрыЗагрузки.Вставить("ВидКлассификатора", ВидКлассификатора);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ПараметрыЗагрузки.Вставить("Отбор", Параметры.Отбор);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Архивное", Архивное);
	ПараметрыФормы.Вставить("Актуальное", Актуальное);
	ПараметрыФормы.Вставить("УИД", ЭтаФорма.УникальныйИдентификатор);
	
	Хранилище = ЗагрузкаКлассификаторовНСИЕГИСЗ.ПолучитьДеревоКлассификации(ПараметрыЗагрузки, ПараметрыФормы, , Параметры.ТестовыйКонтур);
	
	Возврат Хранилище;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДеревоКлассификацииНаКлиентеАсинхронно()
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("НаименованиеСправочника", Параметры.НаименованиеСправочника);
	ПараметрыЗагрузки.Вставить("OID", Параметры.OID);
	ПараметрыЗагрузки.Вставить("Версия", Версия);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ПараметрыЗагрузки.Вставить("Отбор", Параметры.Отбор);
	КонецЕсли;
	ПараметрыЗагрузки.Вставить("ВидКлассификатора", ВидКлассификатора);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Архивное", Архивное);
	ПараметрыФормы.Вставить("Актуальное", Актуальное);
	ПараметрыФормы.Вставить("УИД", ЭтаФорма.УникальныйИдентификатор);
	
	ДлительнаяОперация = СоздатьДлитОперациюПолучитьДеревоКлассификации(ПараметрыЗагрузки, ПараметрыФормы, УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = "Получение данных классификатора...";
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПолучить", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДлитОперациюПолучитьДеревоКлассификации(ПараметрыЗагрузки, Знач ПараметрыФормы, УникальныйИдентификаторФормы)
	
	НаименованиеЗадания = НСтр("ru = 'Получение данных классификатора'");
	ВыполняемыйМетод = "ЗагрузкаКлассификаторовНСИЕГИСЗ.ПолучитьДеревоКлассификацииДлительнаяОперация";
	
	ПараметрыФормы.Вставить("Архивное", ДанныеФормыВЗначение(ПараметрыФормы.Архивное, Тип("ДеревоЗначений")));
	ПараметрыФормы.Вставить("Актуальное", ДанныеФормыВЗначение(ПараметрыФормы.Актуальное, Тип("ДеревоЗначений")));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗаполнениеДанныхИзДлительнойОперции(АдресРезультата)
	
	ТаблицаКлассификатор = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Параметры.OID, "ТаблицаКлассификатор");
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Параметры.OID);
	
	Если ТаблицаКлассификатор <> Неопределено Тогда
		ТаблицаКлассификаторХранилище = ПоместитьВоВременноеХранилище(ТаблицаКлассификатор, УникальныйИдентификатор);
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		ЗначениеВРеквизитФормы(Результат.Архивное, "Архивное");
		ЗначениеВРеквизитФормы(Результат.Актуальное, "Актуальное");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиАктуальных(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Прервать Тогда
		Закрыть(Истина);
	ИначеЕсли ТипЗнч(ЭтотОбъект.ОписаниеОповещенияОЗакрытии) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ЭтотОбъект.ОписаниеОповещенияОЗакрытии, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСправочникНаСервере()
	
	ТаблицаКлассификатор = ПолучитьИзВременногоХранилища(ТаблицаКлассификаторХранилище);
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("OID", Параметры.OID);
	ПараметрыЗаписи.Вставить("МенеджерСправочника", Справочники[Параметры.НаименованиеСправочника]);
	ПараметрыЗаписи.Вставить("Версия", Версия);
	ПараметрыЗаписи.Вставить("ВидКлассификатора", ВидКлассификатора);
	ПараметрыЗаписи.Вставить("ДатаВерсии", ДатаВерсии);
	
	// Параметр НеОтображатьФорму используется при полном обновлении поэтому необходимо обновлять версию
	Если Параметры.Свойство("НеОтображатьФорму")
		И Параметры.НеОтображатьФорму
	Тогда
		ПараметрыЗаписи.Вставить("ОбновитьВерсию", Истина);
	КонецЕсли;
	
	Если Параметры.ВыбратьЕдинственный Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗагрузкаКлассификаторовНСИЕГИСЗ.ЗаписатьНовыеЭлементыСправочника(ПараметрыЗаписи, ТаблицаКлассификатор, Актуальное, ДополнительныеСвойства,, Параметры.ТестовыйКонтур);
	
	Если Параметры.ВыбратьЕдинственный Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Если Результат Тогда
	// 	УдалитьИзВременногоХранилища(ТаблицаКлассификаторХранилище);
	// КонецЕсли;.
	
	ДополнительныеСвойства = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОтмеченныеЭлементыВДеревеАктуальных(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		Если Строка.Пометка
			Или ЕстьОтмеченныеЭлементыВДеревеАктуальных(Строка.ПолучитьЭлементы())
		Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область УстановкаФлажковИАрхива

&НаКлиенте
Процедура УстановитьЗначениеФлажков(КорневойЭлемент, ЗначениеУстанавливаемойПометки, ТолькоРекомендуемые = Ложь)
	
	Попытка
		ВетвьДерева = КорневойЭлемент.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ВетвьДерева Цикл
			ЭлементДерева.Пометка = ?(ТолькоРекомендуемые,ЭлементДерева.СледуетОбновить,ЗначениеУстанавливаемойПометки);
			УстановитьЗначениеФлажков(ЭлементДерева, ЗначениеУстанавливаемойПометки,ТолькоРекомендуемые);
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось!");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажковДляВыделенныхЭлементов(КорневойЭлемент, ЗначениеУстанавливаемойПометки)
	
	Попытка
		ВыделенныеСтроки = Элементы[КорневойЭлемент].ВыделенныеСтроки;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ВыделеннаяСтрока = ЭтотОбъект[КорневойЭлемент].НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ВыделеннаяСтрока <> Неопределено Тогда
				ВыделеннаяСтрока.Пометка = ЗначениеУстанавливаемойПометки;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось!");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура АрхивироватьВетвь(КорневойЭлемент)
	
	ВетвьДерева = КорневойЭлемент.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ВетвьДерева Цикл
		Попытка
			Если ЭлементДерева.Пометка Тогда
				ОбъектСсылка = ЭлементДерева.Ссылка.ПолучитьОбъект();
				ОбъектСсылка.Архив = Истина;
				ОбъектСсылка.Записать();
				АрхивироватьВетвь(ЭлементДерева);
				ЭлементДерева.Архив = Истина;
				ЭлементДерева.Пометка = Ложь;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сделать архивным элемент: " + ЭлементДерева.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АрхивироватьНаСервере()
	АрхивироватьВетвь(ЭтотОбъект["Архивное"]);
КонецПроцедуры

&НаКлиенте
Процедура АктуальноеПометкаПриИзменении(Элемент)
	
	ИДТекущейСтроки = Элементы["Актуальное"].ТекущаяСтрока;
	
	Если ИДТекущейСтроки <> Неопределено Тогда
		
		ЭлементКоллекции = ЭтаФорма["Актуальное"].НайтиПоИдентификатору(ИДТекущейСтроки);
		
		Если Параметры.ВыбратьЕдинственный Тогда
			Пометка = ЭлементКоллекции.Пометка;
			УстановитьЗначениеФлажков(ЭтотОбъект["Актуальное"], Ложь); // Снять все Флажки
			ЭлементКоллекции.Пометка = Пометка;
		КонецЕсли;
		
		Если ЭлементКоллекции.Пометка = 2 Тогда
			ЭлементКоллекции.Пометка = 0;
		КонецЕсли;
		
		УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Пометка);
		
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель.Пометка = ?(УстановленноДляВсех(ЭлементКоллекции),
			ЭлементКоллекции.Пометка, 2);
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)
	
	ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
		ТекЭлемент.Пометка = ЗначениеПометки;
		УстановкаФлажков(ТекЭлемент, ТекЭлемент.Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УстановленноДляВсех(ЭлементКоллекции)
	
	СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент.Пометка <> ЭлементКоллекции.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбновитьКоличествоАктуальных(ДеревоФормы, Количество = 0)
	
	СтрокиУровня = ДеревоФормы.ПолучитьЭлементы();
	
	Для Каждого Строка Из СтрокиУровня Цикл
		
		Количество = Количество + 1;
		Количество = ОбновитьКоличествоАктуальных(Строка, Количество);
		
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

#КонецОбласти
