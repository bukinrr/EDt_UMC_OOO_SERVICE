#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ВидКарты = УчетнаяПолитика.ОсновнойВидМедКарт;
	МинДлинаСтрокиПоискаКлиента = УчетнаяПолитика.МинДлинаСтрокиПоискаКлиента;
	ВидДокумента = УчетнаяПолитика.ОсновнойВидДУЛ;
	
	ВидТелефона = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонСотовый");
	ВидАдреса	= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЮридический");
	
	Элементы.Телефон.Маска = ПолучитьМаскуВводаТелефона(ВидТелефона);
	Элементы.ПредставительТелефон.Маска = Элементы.Телефон.Маска;
	
	Представитель = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
	ПредставительТипИзСправочника = Истина;
	Элементы.ПредставительТелефон.Видимость = Не ПредставительТипИзСправочника;
	Элементы.ГруппаПолис.Видимость = УчетнаяПолитика.ИспользоватьСтраховыеПолисы;
	
	ДокументУстановитьМаскуСерииНомераНаСервере();
	
	// Локализация
	ОсновнаяСтрана = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнаяСтрана");
	Если ОсновнаяСтрана = Справочники.СтраныМира.Россия Тогда
		Элементы.СНИЛС.Маска = МедицинскоеСтрахованиеКлиентСервер.МаскаСНИЛС();
	ИначеЕсли ЗначениеЗаполнено(ОсновнаяСтрана) Тогда
		Элементы.СНИЛС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьНовогоКлиента(Команда)
	
	Если СтрДлина(СокрЛП(ФИО))<3 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нельзя добавить клиента, т.к. не указано ФИО!'"));
		Возврат;
	КонецЕсли;
	
	Если Вопрос(НСтр("ru='Добавить нового клиента?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
		
		СтруктураСправочника = Новый Структура("Ссылка, Фамилия, Имя, Отчество, ДатаРождения");
		мсЧастиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО," ",Ложь);
		Если мсЧастиФИО.Количество()>=1 Тогда
			СтруктураСправочника.Фамилия = Трег(мсЧастиФИО[0]);
		КонецЕсли;
		Если мсЧастиФИО.Количество()>=2 Тогда
			СтруктураСправочника.Имя =Трег(мсЧастиФИО[1]);
		КонецЕсли;
		Если мсЧастиФИО.Количество()>=3 Тогда
			СтруктураСправочника.Отчество = Трег(мсЧастиФИО[2]);
		КонецЕсли;
		СтруктураСправочника.ДатаРождения = ДатаРождения;
		СтруктураСправочника.Ссылка = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");

		ДублиКлиента = ПолучитьДублиНовогоКлиента(СтруктураСправочника);
		Если ДублиКлиента.Количество() <> 0 Тогда
			ПараметрыФормы = Новый Структура("ДублиКлиента", ДублиКлиента);
			Ответ = ОткрытьФормуМодально("Справочник.Клиенты.Форма.РешениеОДублеКлиента", ПараметрыФормы);
			Если Ответ = "Отмена" Или Ответ = Неопределено Тогда
				Возврат;
			ИначеЕсли Ответ = "Отказ" Тогда
				ЭтаФорма.Закрыть();
				Возврат;
			ИначеЕсли ТипЗнч(Ответ) = Тип("СправочникСсылка.Клиенты") Тогда
				ЭтаФорма.Закрыть();
				ОповеститьОВыборе(Ответ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.СНИЛС.Видимость
			И Не МедицинскаяДеятельностьКлиент.СНИЛС_КорректенПроверитьНаФорме(СНИЛС,, "СНИЛС")
		Тогда
			Возврат;
		КонецЕсли;
		
		СоздаватьМедкарту = УчетнаяПолитика.АвтоСозданиеМедкарт;
		Если Не СоздаватьМедкарту И ЗначениеЗаполнено(ВидКарты) Тогда
			Если Вопрос("Создать новую мед. карту?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				СоздаватьМедкарту = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НовыйКлиент = СоздатьНовогоКлиентаСервер(ПараметрыСозданияКлиента(), СоздаватьМедкарту);
		Если НовыйКлиент <> Неопределено Тогда
			ОповеститьОВыбореКлиента(НовыйКлиент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	Если Элементы.Результат.ТекущаяСтрока <> Неопределено Тогда
		ОповеститьОВыбореКлиента(Элементы.Результат.ТекущиеДанные.Клиент)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуКлиентов(Команда)
	
	ПараметрыФормы = Новый Структура("РежимВыбора", ВладелецФормы <> Неопределено);
	ОткрытьФорму("Справочник.Клиенты.ФормаВыбора", ПараметрыФормы, ВладелецФормы);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлиента(Команда)
	ТекДанные = Элементы.Результат.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ",ТекДанные.Клиент);
		ОткрытьФорму("Справочник.Клиенты.ФормаОбъекта",СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоискОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаПоискаПоФИО(Текст);
	ОпределитьПолПоФИОКлиента(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ПоискАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ОбработкаПоискаПоФИО(Текст);
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПустаяСсылка = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
	
	Если СтруктураАдреса <> Неопределено Тогда 
		ЗначенияПолей = СтруктураАдреса;
		ЗначениеJSON = СтруктураАдресаJSON;
	Иначе
		ЗначенияПолей = КонтактнаяИнформацияСервер.ЗначенияПолейСГородомИзКэшаФилиала(ПустаяСсылка, ВидАдреса, глКэшАдресовФилиалов);
		ЗначениеJSON = Неопределено;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидАдреса);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Значение", ЗначениеJSON);
	ПараметрыОткрытия.Вставить("Представление",           Неопределено);
	ПараметрыОткрытия.Вставить("Объект",				  ПустаяСсылка);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияЗаполненияКИ", ЭтаФорма, Новый Структура("Объект", ПустаяСсылка));
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Неопределено, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОповеститьОВыбореКлиента(Элементы.Результат.ТекущиеДанные.Клиент);
КонецПроцедуры

&НаКлиенте
Процедура НомерКартыПриИзменении(Элемент)
	Элементы.ДекорацияИнфоНомерКарты.Видимость = НЕ ЗначениеЗаполнено(НомерКарты);
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(ФИО) Тогда
 		мсФИОПоиск = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО," ",Ложь);
		ФИО = "";
 		Для Каждого эл из мсФИОПоиск Цикл
	 		ФИО = ФИО + строка(Трег(эл))+ " ";
		КонецЦикла;
		ФИО = СокрП(ФИО);
		ОпределитьПолПоФИОКлиента(ФИО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставительТипПриИзменении(Элемент)
	Если ПредставительТипИзСправочника Тогда
		Представитель = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");	
	Иначе
		Представитель = "";
	КонецЕсли;
	Элементы.ПредставительТелефон.Видимость = Не ПредставительТипИзСправочника;
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ДокументСерия = "";
	ДокументНомер = "";
	ДокументУстановитьМаскуСерииНомераКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументКемВыданНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму("ОбщаяФорма.ПодборУчрежденияВыдачиПаспорта", Новый Структура("КемВыдан", ДокументКемВыдан));
	Форма.КемВыдан = ДокументКемВыдан;
	КемВыдан = Форма.ОткрытьМодально();
	Если КемВыдан <> Неопределено Тогда
		ДокументКемВыдан = КемВыдан;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументКодПодразделенияПриИзменении(Элемент)
	
	Наименования = ДокументКодПодразделенияПриИзмененииНаСервере(ДокументКодПодразделения, ДокументДатаВыдачи);
	
	Если ТипЗнч(Наименования) = Тип("Строка") Тогда
		ДокументКемВыдан = Наименования;
	ИначеЕсли  ТипЗнч(Наименования) = Тип("Массив") Тогда
		спЗначений = Новый СписокЗначений();
		спЗначений.ЗагрузитьЗначения(Наименования);
		ДопПараметры = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтаФорма, ДопПараметры);
		ЭтаФорма.ПоказатьВыборИзСписка(Оповещение,спЗначений);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

 #Область СлужебныеПроцедурыИФункции 
 
&наКлиенте
Процедура ОповеститьОВыбореКлиента(Клиент)
	
	Если ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Клиент);
	Иначе
		ПоказатьЗначение(, Клиент);
	КонецЕсли;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры
 
 // При создании на сервере
&НаСервере
Процедура ДокументУстановитьМаскуСерииНомераНаСервере()

	Элементы.ДокументСерия.Видимость = Не ВидДокумента.НеИмеетСерию;
	Элементы.ДокументСерия.Маска = ВидДокумента.МаскаСерииДокумента;
	Элементы.ДокументНомер.Маска = ВидДокумента.МаскаНомераДокумента;
	Элементы.ДокументКодПодразделения.Маска = ВидДокумента.МаскаКодаПодразделения;

КонецПроцедуры

&НаКлиенте
Процедура ДокументУстановитьМаскуСерииНомераКлиент()
	
	ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВидДокумента, "НеИмеетСерию, МаскаСерииДокумента, МаскаНомераДокумента, МаскаКодаПодразделения");
	
	Элементы.ДокументСерия.Видимость = Не ЗначенияРеквизитов.НеИмеетСерию;
	Элементы.ДокументСерия.Маска = ЗначенияРеквизитов.МаскаСерииДокумента;
	Элементы.ДокументНомер.Маска = ЗначенияРеквизитов.МаскаНомераДокумента;
	Элементы.ДокументКодПодразделения.Маска = ЗначенияРеквизитов.МаскаКодаПодразделения;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДублиНовогоКлиента(СтруктураСправочника)
	
	Возврат Справочники.Клиенты.ПолучитьДублирующихКлиентов(СтруктураСправочника);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНовогоКлиентаСервер(ДанныеКлиента, СоздаватьМедкарту = Ложь)
	
	// 1. Создание элемента справочника
	Объект = Справочники.Клиенты.СоздатьЭлемент();
	Объект.УстановитьНовыйКод();
	Объект.Наименование = ДанныеКлиента.ФИО;
	
	мсЧастиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеКлиента.ФИО," ",Ложь);
	Если мсЧастиФИО.Количество()>=1 Тогда
		Объект.Фамилия = Трег(мсЧастиФИО[0]);
	КонецЕсли;
	Если мсЧастиФИО.Количество()>=2 Тогда
		Объект.Имя = Трег(мсЧастиФИО[1]);
	КонецЕсли;
	Если мсЧастиФИО.Количество()>=3 Тогда
		Объект.Отчество = Трег(мсЧастиФИО[2]);
	КонецЕсли;
	
	Объект.Наименование = РаботаСКлиентамиПереопределяемый.ПредставлениеПоФИО(Объект.Фамилия, Объект.Имя, Объект.Отчество);
	
	Объект.ДатаРождения = ДанныеКлиента.ДатаРождения;
	Объект.ИсточникИнформации = ДанныеКлиента.ИсточникИнформации;
	Пол = ДанныеКлиента.Пол;
	Если Не ЗначениеЗаполнено(Пол) Или Пол = Перечисления.ПолФизическихЛиц.НеУказан Тогда
		Пол = ОбщегоНазначения.ОпределитьПол(Объект.Имя, Объект.Фамилия, Объект.Отчество);
	КонецЕсли;
	Объект.Пол = Пол;
	
	Объект.СНИЛС = СтрЗаменить(СтрЗаменить(ДанныеКлиента.СНИЛС, " ", ""), "-", "");
	
	Если ДанныеКлиента.ГруппаСправочника.ЭтоГруппа Тогда
		Объект.Родитель = ДанныеКлиента.ГруппаСправочника.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКлиента.Представитель) Тогда
		Объект.ЗаконныйПредставитель = ДанныеКлиента.Представитель;
		Объект.ЗаконныйПредставительПримечание = ДанныеКлиента.ПредставительКомментарий;
		Если Не ДанныеКлиента.ПредставительТипИзСправочника Тогда
			Объект.ЗаконныйПредставительТелефон = ДанныеКлиента.ПредставительТелефон;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздаватьМедкарту Тогда 
		ПараметрыМедкарты = Новый Структура;
		Если ЗначениеЗаполнено(ДанныеКлиента.ВидКарты) Тогда 
			ПараметрыМедкарты.Вставить("ВидКарты", ДанныеКлиента.ВидКарты);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКлиента.НомерКарты) Тогда 
			ПараметрыМедкарты.Вставить("НомерКарты", ДанныеКлиента.НомерКарты);
		КонецЕсли;
		Объект.ДополнительныеСвойства.Вставить("СоздаватьМедкарту");
		Объект.ДополнительныеСвойства.Вставить("ПараметрыМедкарты", ПараметрыМедкарты);
	КонецЕсли;
	
	Отказ = Ложь;
	
	ТекстОшибки = ПроверитьЗаполнениеОбязательныхРеквизитовПередЗаписью(Отказ, Объект, ДанныеКлиента);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект.Записать();
	
	Если ЗначениеЗаполнено(ДанныеКлиента.Представитель)
		И ЗначениеЗаполнено(ДанныеКлиента.ПредставительСтепеньРодства)
	Тогда
		ЗаписьРодство = РегистрыСведений.СвязиМеждуКлиентами.СоздатьМенеджерЗаписи();
		ЗаписьРодство.Клиент = Объект.Ссылка;
		ЗаписьРодство.Клиент2 = Объект.ЗаконныйПредставитель;
		ЗаписьРодство.ТипСвязи = ДанныеКлиента.ПредставительСтепеньРодства;
		ЗаписьРодство.Записать();
	КонецЕсли;
	
	
	НомерКарты = Объект.ОсновнаяМедицинскаяКарта.НомерКарты;
	ВидКарты = Объект.ОсновнаяМедицинскаяКарта.ВидКарты;
	
	// 2. Ввод контактной информации
	Телефон = СокрЛП(ДанныеКлиента.Телефон);
	Если ЗначениеЗаполнено(Телефон) Тогда
		КонтактнаяИнформацияСерверПереопределяемый.ЗаписатьНомерТелефона(
			Объект.Ссылка,
			Телефон,
			?(ДанныеКлиента.ВидТелефона.Пустая(), Справочники.ВидыКонтактнойИнформации.ТелефонСотовый, ДанныеКлиента.ВидТелефона));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКлиента.Адрес) Тогда
		
		Если ДанныеКлиента.ВидАдреса.Пустая() Тогда
			Вид	  = Справочники.ВидыКонтактнойИнформации.АдресЮридический;
		Иначе
			Вид	  = ДанныеКлиента.ВидАдреса;
		КонецЕсли;
		
		КонтактнаяИнформацияСервер.ЗаписатьКонтактнуюИнформацию(Объект.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Вид, ДанныеКлиента.СтруктураАдреса, ДанныеКлиента.СтруктураАдресаJSON);
	КонецЕсли;
	
	// 3. Ввод паспортных данных
	Если ЗначениеЗаполнено(ДанныеКлиента.ДокументНомер) Тогда
	
		запПаспортныеДанные = РегистрыСведений.ПаспортныеДанные.СоздатьМенеджерЗаписи();
		запПаспортныеДанные.ФизЛицо = Объект.Ссылка;
		запПаспортныеДанные.ДокументВид				 = ДанныеКлиента.ВидДокумента;
		запПаспортныеДанные.ДокументСерия			 = ДанныеКлиента.ДокументСерия;
		запПаспортныеДанные.ДокументНомер			 = ДанныеКлиента.ДокументНомер;
		запПаспортныеДанные.ДокументДатаВыдачи		 = ДанныеКлиента.ДокументДатаВыдачи;
		запПаспортныеДанные.ДокументКемВыдан		 = ДанныеКлиента.ДокументКемВыдан;
		запПаспортныеДанные.ДокументКодПодразделения = ДанныеКлиента.ДокументКодПодразделения;
		запПаспортныеДанные.Период = ТекущаяДата();
	    запПаспортныеДанные.Записать();
		
	КонецЕсли; 
	
	// 4. Ввод данных полиса
	Если ЗначениеЗаполнено(ДанныеКлиента.ВидПолиса) Тогда
		
		Полис = Справочники.СтраховыеПолисы.СоздатьЭлемент();
		Полис.УстановитьНовыйКод();
		Полис.Владелец = Объект.Ссылка;
		Полис.ВидПолиса = ДанныеКлиента.ВидПолиса;
		Полис.Серия = ДанныеКлиента.ПолисСерия;
		Полис.Номер = ДанныеКлиента.ПолисНомер;
		Полис.СрокДействияНачало = ДанныеКлиента.ПолисСрокДействияНачало;
		Полис.СрокДействия = ДанныеКлиента.ПолисСрокДействия;
		Полис.НеДействителен = Ложь;
		Полис.Записать();
		Объект = Объект.Ссылка.ПолучитьОбъект();
		Объект.умцОсновнойСтраховойПолис = Полис.Ссылка;
		Объект.Записать();
		
	КонецЕсли; 
	
	Возврат Объект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПоискаПоФИО(Текст)
	
	Если Не ПустаяСтрока(Текст) И СтрДлина(Текст) >= МинДлинаСтрокиПоискаКлиента Тогда
		
		РезультатПоиска = ВыполнитьПоиск("ФИО",Текст);	
		Результат.Очистить();
		Для Каждого СтрокаРезультатаПоиска Из РезультатПоиска Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаРезультатаПоиска);
		КонецЦикла;
		
		Если Результат.Количество() <> 0 Тогда
			Элементы.Результат.ТекущаяСтрока = Результат[0].ПолучитьИдентификатор();
		Иначе
			ПереформироватьСтрокуФИОНового(Текст);
		КонецЕсли;
		
		Элементы.РезультатОткрытьКлиента.Доступность = (Результат.Количество() <> 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПоиск(ПолеПоиска,Знач ЗначениеПоиска)
		
	мсНайденныеКлиенты = РаботаСФормамиСервер.ПолучитьМассивКлиентовПоАвтоподбору(ЗначениеПоиска, УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьАвтоПодборКлиентовПоКоду"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Клиент,
	|	Клиенты.Представление КАК Представление,
	|	Клиенты.ДатаРождения КАК ДатаРождения,
	|	ПРЕДСТАВЛЕНИЕ(Клиенты.ОсновнаяМедицинскаяКарта) КАК МедКарта
	|ПОМЕСТИТЬ Клиенты
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Клиенты.Ссылка)
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|ГДЕ
	|	Клиенты.Ссылка В(&Клиенты)
	|	И НЕ Клиенты.ПометкаУдаления
	|	И НЕ Клиенты.Архив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.Клиент,
	|	Клиенты.ДатаРождения КАК ДатаРождения,
	|	КонтактнаяИнформация.Представление КАК Телефон,
	|	КонтактнаяИнформация.Вид КАК ВидТелефона,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотовый)
	|			ТОГДА 0
	|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРабочий)
	|			ТОГДА 1
	|		КОГДА КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонДомашний)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет,
	|	Клиенты.МедКарта КАК МедКарта,
	|	Клиенты.Представление КАК КлиентПредставление
	|ИЗ
	|	Клиенты КАК Клиенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтактнаяИнформация.Объект = Клиенты.Клиент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Клиенты.Представление,
	|	Приоритет";
	Запрос.УстановитьПараметр("Клиенты",мсНайденныеКлиенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатПоиска = РезультатЗапроса.Выгрузить();
	РезультатПоиска.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Позиция = мсНайденныеКлиенты.НайтиПоЗначению(Выборка.Клиент);
		Если Позиция <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(РезультатПоиска.Добавить(),Выборка);
			мсНайденныеКлиенты.Удалить(Позиция);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатПоиска);
	
КонецФункции

&НаКлиенте
Процедура ВидТелефонаПриИзменении(Элемент)
	
	Элементы.Телефон.Маска = ПолучитьМаскуВводаТелефона(ВидТелефона);
	Элементы.ПредставительТелефон.Маска = Элементы.Телефон.Маска;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗаполненияКИ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтруктураАдреса = Результат.КонтактнаяИнформация;
		СтруктураАдресаJSON = Результат.Значение;
		Адрес = Результат.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьСтрокуФИОНового(Знач Текст)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		Пока Найти(Текст, "  ") Цикл
			Текст = СтрЗаменить(Текст, "  ", " ");
		КонецЦикла;
		
		Если КодСимвола(Текст,1)>=1025 И КодСимвола(Текст,1)<=1105 Или  КодСимвола(Текст,1)=32 Тогда		
			мсФИОПоиск = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст," ",Ложь);
			ФИО = "";
			Для Каждого эл Из мсФИОПоиск Цикл
				ФИО = ФИО + строка(Трег(эл))+ " ";
			КонецЦикла;
			ФИО = СокрП(ФИО);
		КонецЕсли
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПолПоФИОКлиента(Текст)
	
	Если Не ПустаяСтрока(Текст) Тогда
		мсЧастиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО," ",Ложь);
		
		Фамилия = "";
		Имя = "";
		Отчество = "";
		Если мсЧастиФИО.Количество() > 0 Тогда
			Фамилия = мсЧастиФИО[0];
		КонецЕсли;
		Если мсЧастиФИО.Количество() > 1 Тогда
			Имя = мсЧастиФИО[1];
		КонецЕсли;
		Если мсЧастиФИО.Количество() > 2 Тогда
			Отчество = мсЧастиФИО[2];
		КонецЕсли;
		
		Пол = ОбщегоНазначения.ОпределитьПол(Имя, Фамилия, Отчество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаскуВводаТелефона(ВидТелефона)

	Если ВидТелефона.ИспользоватьМаскуВвода Тогда
		Возврат ВидТелефона.МаскаВводаТелефонногоНомера;
	Иначе 
		Возврат "";
	КонецЕсли; 

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеОбязательныхРеквизитовПередЗаписью(Отказ, Объект, ДанныеКлиента)
	
	// Проверка заполненности обязательных полей элемента
	ОбъектСтруктура = ОбщегоНазначенияСервер.ПолучитьРеквизитыСсылки(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ОбъектСтруктура, Объект);
	ОбъектСтруктура.Вставить("Ссылка", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ДанныеКлиента.Телефон) Тогда
		ДанныеПоля = РегистрыСведений.ОбязательныеРеквизитыОбъектов.ОписаниеПроверяемогоВидаКИ(ДанныеКлиента.ВидТелефона);
		ОбъектСтруктура.Вставить(ДанныеПоля.ИмяРеквизита, ДанныеКлиента.Телефон);	
		ОбъектСтруктура.Вставить("КонтактнаяИнформацияТелефон", ДанныеКлиента.Телефон);	
	КонецЕсли;
	
	ОбъектСтруктура.Вставить("КИПроверятьТолькоТелефоны", Истина);
	
	ТекстОшибки = РегистрыСведений.ОбязательныеРеквизитыОбъектов.ПроверитьЗаполненностьОбязательныхРеквизитов(ОбъектСтруктура, Объект.Ссылка.Пустая(), Отказ);
	
	Отказ = Отказ Или не ПустаяСтрока(ТекстОшибки);
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументКодПодразделенияПриИзмененииНаСервере(КодУФМС, ДатаВыдачи)
	
	Возврат РегистрыСведений.ПаспортныеДанные.НаименованияПоКоду(КодУФМС, ДатаВыдачи);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеОкончания(ЗначениеВыбора, ДопПараметры) Экспорт
	
	Если НЕ (ЗначениеВыбора = Неопределено) Тогда
		ДокументКемВыдан = ЗначениеВыбора.Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыСозданияКлиента()
	
	ДанныеКлиента = Новый Структура;
	ДанныеКлиента.Вставить("ФИО", ФИО);
	ДанныеКлиента.Вставить("ДатаРождения", ДатаРождения);
	ДанныеКлиента.Вставить("ИсточникИнформации", ИсточникИнформации);
	ДанныеКлиента.Вставить("Пол", Пол);
	ДанныеКлиента.Вставить("СНИЛС", СНИЛС);
	ДанныеКлиента.Вставить("ГруппаСправочника", ГруппаСправочника);
	ДанныеКлиента.Вставить("Представитель", Представитель);
	ДанныеКлиента.Вставить("ПредставительТипИзСправочника", ПредставительТипИзСправочника);
	ДанныеКлиента.Вставить("ПредставительКомментарий", ПредставительКомментарий);
	ДанныеКлиента.Вставить("ПредставительТелефон", ПредставительТелефон);
	ДанныеКлиента.Вставить("ПредставительСтепеньРодства", ПредставительСтепеньРодства);
	ДанныеКлиента.Вставить("ВидКарты", ВидКарты);
	ДанныеКлиента.Вставить("НомерКарты", НомерКарты);
	ДанныеКлиента.Вставить("ВидТелефона", ВидТелефона);
	ДанныеКлиента.Вставить("Адрес", Адрес);
	ДанныеКлиента.Вставить("ВидАдреса", ВидАдреса);
	ДанныеКлиента.Вставить("СтруктураАдреса", СтруктураАдреса);
	ДанныеКлиента.Вставить("СтруктураАдресаJSON", СтруктураАдресаJSON);
	ДанныеКлиента.Вставить("ВидДокумента", ВидДокумента);
	ДанныеКлиента.Вставить("ДокументСерия", ДокументСерия);
	ДанныеКлиента.Вставить("ДокументНомер", ДокументНомер);
	ДанныеКлиента.Вставить("ДокументДатаВыдачи", ДокументДатаВыдачи);
	ДанныеКлиента.Вставить("ДокументКемВыдан", ДокументКемВыдан);
	ДанныеКлиента.Вставить("ДокументКодПодразделения", ДокументКодПодразделения);
	ДанныеКлиента.Вставить("ВидПолиса", ВидПолиса);
	ДанныеКлиента.Вставить("ПолисСерия", ПолисСерия);
	ДанныеКлиента.Вставить("ПолисНомер", ПолисНомер);
	ДанныеКлиента.Вставить("ПолисСрокДействияНачало", ПолисСрокДействияНачало);
	ДанныеКлиента.Вставить("ПолисСрокДействия", ПолисСрокДействия);
	ДанныеКлиента.Вставить("Телефон", Телефон);
	
	Возврат ДанныеКлиента;
	
КонецФункции

#КонецОбласти