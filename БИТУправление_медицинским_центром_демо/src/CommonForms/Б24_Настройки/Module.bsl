#Область РазделОписанияПеременных

&НаКлиенте
Перем ПредупреждениеПоказано;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьНастройки();
	ОбязательныеНастройкиЗаполнены = БитриксПовтИсп.ОбязательныеНастройкиЗаполнены();
	
	Если ОбязательныеНастройкиЗаполнены Тогда
		ЗаполнитьСпискиВыбораБП();
	КонецЕсли;
	
	Б24_ИспользоватьОбмен	= Константы.Б24_ИспользоватьОбмен.Получить();
	Б24_РежимОбмена			= Константы.Б24_РежимОбмена.Получить();
	
	ПериодАктуальностиЗаявкиЧасы = Цел((ПериодАктуальностиЗаявки%86400)/3600);
	ПериодАктуальностиЗаявкиДни = Цел(ПериодАктуальностиЗаявки/86400);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьДоступность();
	НастроитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПредупреждениеПоказано = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НезаполненныеНастройки = ПолучитьНезаполненныеНастройки();
	
	Если ЗначениеЗаполнено(СтрСоединить(НезаполненныеНастройки, "")) Тогда
		Отказ = Истина;
		ТекстНезаполненныхНастроек = НСтр("ru='Не все обязательные настройки заполнены. Вернуться на форму настроек?'");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОНезаполненныхНастройках", ЭтотОбъект, Новый Структура("НезаполненныеНастройки", НезаполненныеНастройки));
		ПоказатьВопрос(Оповещение, ТекстНезаполненныхНастроек, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	СохранитьНаСервере();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПользовательскиеПоля(Команда)
	
	ОткрытьФорму("ОбщаяФорма.Б24_НастройкиПользовательскихПолей");
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНаСервере();
	НастроитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЛидовИСделок(Команда)
	
	ОткрытьФорму("ОбщаяФорма.Б24_СостоянияЛидовИСделок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРЗ(Команда)
	
	УИДРЗ = Неопределено;
	
	Если Команда.Имя = "ОткрытьОтправкаНеотправленныхДокументов" Тогда
		УИДРЗ = ПолучитьУИДРЗ("ОбменБитрикс24_ОтправитьНеотправленныеДокументыВБитрикс");
	ИначеЕсли Команда.Имя = "ОткрытьОтменаПросроченныхЛидов" Тогда
		УИДРЗ = ПолучитьУИДРЗ("ОбменБитрикс24_ОтменитьПросроченныеЛиды");
	ИначеЕсли Команда.Имя = "ОткрытьИмпортНедостающихЛидов" Тогда
		УИДРЗ = ПолучитьУИДРЗ("ОбменБитрикс24_ИмпортНедостающихЛидов");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", УИДРЗ);
	ПараметрыФормы.Вставить("Действие",      "Изменить");
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеПользователей(Команда)
	
	ОткрытьФорму("ОбщаяФорма.Б24_ИдентификаторыПользователей");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РежимСозданияСделкиПриИзменении(Элемент)
	
	НастроитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПолученияЛидаПриИзменении(Элемент)
	
	НастроитьДоступность();
	Если РежимПолученияЛида = 0 Тогда
		СтатусЛида = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАктуальностиЗаявкиПриИзменении(Элемент)
	
	ПериодАктуальностиЗаявки = 86400 * ПериодАктуальностиЗаявкиДни + 3600 * ПериодАктуальностиЗаявкиЧасы;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОбменаПриИзменении(Элемент)
	
	НастроитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	НастроитьДоступность();
	НастроитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыСоСделкамиПриИзменении(Элемент)
	
	Режим1 = РежимРаботыСоСделками = 1 Или РежимРаботыСоСделками = 2;
	Режим2 = РежимРаботыСоСделками = 2;
	Режим4 = РежимРаботыСоСделками = 3;
	
	Если Режим2 Тогда
		Режим3 = Ложь;
	КонецЕсли;
	
	НастроитьДоступность();
	НастроитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбменаССайтомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.ИнтеграцияСВнешнимСервисом", Истина);
	ПараметрыВыбораПоля = Новый Массив;
	ПараметрыВыбораПоля.Добавить(НовыйПараметрВыбора);
	Элементы.НастройкаОбменаССайтом.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОНезаполненныхНастройках(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ПредупреждениеПоказано = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Для Каждого НезаполненныеНастройки Из ДополнительныеПараметры.НезаполненныеНастройки Цикл
		Если ЗначениеЗаполнено(НезаполненныеНастройки) Тогда
			Сообщить(НезаполненныеНастройки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступность()
	
	Элементы.ШаблоныБП.Доступность = ОбязательныеНастройкиЗаполнены И РежимСозданияСделки = 1;
	Элементы.НастроитьПользовательскиеПоля.Доступность = ОбязательныеНастройкиЗаполнены;
	Элементы.СостоянияЛидовИСделок.Доступность = ОбязательныеНастройкиЗаполнены;
	Элементы.Режим3.Доступность = Не Режим2;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимость()
	
	Элементы.ГруппаИсходящийВебхук.Видимость			= Б24_РежимОбмена <> 2;
	Элементы.ГруппаНастройкиПолученияДанных.Видимость	= Элементы.ГруппаИсходящийВебхук.Видимость;
	Элементы.ПериодАктуальностиЗаявки.Видимость			= Режим1 Или Режим3;
	Элементы.ДляОтправки.Видимость						= РежимРаботыСоСделками <> 3;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки()
	
	Настройки = БитриксПовтИсп.СписокНастроек();
	ЗаполнитьРеквизиты(Настройки);
	
	Если Режим4 Тогда
		РежимРаботыСоСделками = 3;
	ИначеЕсли Режим2 Тогда
		РежимРаботыСоСделками = 2;
	ИначеЕсли Режим1 Тогда
		РежимРаботыСоСделками = 1;
	ИначеЕсли ЗначениеЗаполнено(Настройки) Тогда
		// Настройки задавались в старой версии интеграции
		Элементы.РежимРаботыСоСделками.СписокВыбора.Вставить(0, 0, "Общая сделка по лиду");
	Иначе
		// Значение по умолчанию при новой настройке
		РежимРаботыСоСделками = 1;
	КонецЕсли;
	
	Режим3 = Режим3 И РежимРаботыСоСделками <> 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизиты(Настройки)
	
	ГруппаКлиентовИзБитрикс24		= Настройки.Получить(Перечисления.Б24_Настройки.ГруппаКлиентовИзБитрикс24);
	ШаблонБПКонвертацииЛида			= Настройки.Получить(Перечисления.Б24_Настройки.ШаблонБПКонвертацииЛида);
	ШаблонБПСозданияСделкиПоКлиенту	= Настройки.Получить(Перечисления.Б24_Настройки.ШаблонБПСозданияСделкиПоКлиенту);
	ШаблонБПИзменениеОтветственного	= Настройки.Получить(Перечисления.Б24_Настройки.ШаблонБПИзменениеОтветственного);
	ИДПользователяВебхука			= Настройки.Получить(Перечисления.Б24_Настройки.ИДПользователяВебхука);
	КодАвторизации					= Настройки.Получить(Перечисления.Б24_Настройки.КодАвторизации);
	КодВебхука						= Настройки.Получить(Перечисления.Б24_Настройки.КодВебхука);
	НаименованиеБитрикс24			= Настройки.Получить(Перечисления.Б24_Настройки.НаименованиеБитрикс24);
	НастройкаОбменаССайтом			= Настройки.Получить(Перечисления.Б24_Настройки.НастройкаОбменаССайтом);
	ПериодАктуальностиЗаявки		= Настройки.Получить(Перечисления.Б24_Настройки.ПериодАктуальностиЗаявки);
	Режим1							= Настройки.Получить(Перечисления.Б24_Настройки.Режим1);
	Режим2							= Настройки.Получить(Перечисления.Б24_Настройки.Режим2);
	Режим3							= Настройки.Получить(Перечисления.Б24_Настройки.Режим3);
	Режим4							= Настройки.Получить(Перечисления.Б24_Настройки.Режим4);
	РежимПолученияЛида				= Настройки.Получить(Перечисления.Б24_Настройки.РежимПолученияЛида);
	РежимСозданияСделки				= Настройки.Получить(Перечисления.Б24_Настройки.РежимСозданияСделки);
	НезащищенноеСоединение			= Настройки.Получить(Перечисления.Б24_Настройки.НезащищенноеСоединение);
	ОтправлятьЗвонки				= Настройки.Получить(Перечисления.Б24_Настройки.ОтправлятьЗвонки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере()
	
	НЗ = РегистрыСведений.Б24_Настройки.СоздатьНаборЗаписей();
	
	тзНастройки = Новый ТаблицаЗначений;
	тзНастройки.Колонки.Добавить("Настройка");
	тзНастройки.Колонки.Добавить("Значение");
	ЗаполнитьТЗНастроек(тзНастройки);
	
	НЗ.Загрузить(тзНастройки);
	НЗ.Записать();
	
	Константы.Б24_ИспользоватьОбмен.Установить(Б24_ИспользоватьОбмен);
	Константы.Б24_РежимОбмена.Установить(Б24_РежимОбмена);
	
	Модифицированность = Ложь;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбязательныеНастройкиЗаполнены = БитриксПовтИсп.ОбязательныеНастройкиЗаполнены();
	Если ОбязательныеНастройкиЗаполнены	Тогда
		ЗаполнитьСпискиВыбораБП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗНастроек(тзНастройки)
	
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.НаименованиеБитрикс24,			ФорматированноеНаименование(НаименованиеБитрикс24));
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.ГруппаКлиентовИзБитрикс24,		ГруппаКлиентовИзБитрикс24);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.ШаблонБПКонвертацииЛида,			ШаблонБПКонвертацииЛида);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.ШаблонБПСозданияСделкиПоКлиенту,	ШаблонБПСозданияСделкиПоКлиенту);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.ШаблонБПИзменениеОтветственного,	ШаблонБПИзменениеОтветственного);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.ИДПользователяВебхука,			ИДПользователяВебхука);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.КодАвторизации,					КодАвторизации);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.КодВебхука,						КодВебхука);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.НастройкаОбменаССайтом,			НастройкаОбменаССайтом);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.ПериодАктуальностиЗаявки,		ПериодАктуальностиЗаявки);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.Режим1,							Режим1);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.Режим2,							Режим2);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.Режим3,							Режим3);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.Режим4,							Режим4);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.РежимПолученияЛида,				РежимПолученияЛида);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.РежимСозданияСделки,				РежимСозданияСделки);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.НезащищенноеСоединение,			НезащищенноеСоединение);
	ДобавитьСтрокуВТаблицуНастроек(тзНастройки, Перечисления.Б24_Настройки.ОтправлятьЗвонки,				ОтправлятьЗвонки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВТаблицуНастроек(Настройки, Настройка, Значение)
	
	НоваяНастройка = Настройки.Добавить();
	НоваяНастройка.Настройка = Настройка;
	НоваяНастройка.Значение = Значение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматированноеНаименование(НаименованиеБитрикс24)
	
	Пока Прав(НаименованиеБитрикс24, 1) = "/" Цикл
		НаименованиеБитрикс24 = Лев(НаименованиеБитрикс24, СтрДлина(НаименованиеБитрикс24)-1);
	КонецЦикла;
	
	Возврат НаименованиеБитрикс24;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбораБП()
	
	ЗаполнитьСписокВыбораЭлемента(Элементы.ШаблонБПКонвертацииЛида,			"CCrmDocumentLead",		"umc_bp_convertation");
	ЗаполнитьСписокВыбораЭлемента(Элементы.ШаблонБПСозданияСделкиПоКлиенту,	"CCrmDocumentContact",	"umc_bp_creation");
	ЗаполнитьСписокВыбораЭлемента(Элементы.ШаблонБПИзменениеОтветственного,	"CCrmDocumentDeal",		"umc_bp_change_author");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораЭлемента(Элемент, Сущность, ИмяКонстанты)
	
	Элемент.СписокВыбора.Очистить();
	ШаблоныБП = Битрикс.ВыполнитьМетод("bizproc.workflow.template", "list", , , Новый Структура("ENTITY", Сущность), "ID,NAME,CONSTANTS");
	
	Если ШаблоныБП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ШаблонБП Из ШаблоныБП Цикл
		КонстантыШаблона = ШаблонБП.Получить("CONSTANTS");
		Если КонстантыШаблона = Неопределено
			Или ТипЗнч(КонстантыШаблона) <> Тип("Соответствие")
			Или КонстантыШаблона.Получить(ИмяКонстанты) = Неопределено
		Тогда
			Продолжить;
		КонецЕсли;
		Элемент.СписокВыбора.Добавить(СтроковыеФункцииКлиентСервер.ПолучитьЦифрыСтроки(ШаблонБП["ID"]), ШаблонБП["NAME"]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУИДРЗ(Метаданные)
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные);
	Если РегЗадание <> Неопределено Тогда
		Возврат РегЗадание.УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьНезаполненныеНастройки()
	
	НезаполненныеНастройки = Новый Массив;
	
	Если Не Б24_ИспользоватьОбмен Тогда
		Возврат НезаполненныеНастройки;
	КонецЕсли;
	
	НезаполненныеНастройки.Добавить(СтрСоединить(НезаполненныеРеквизиты(),				Символы.ПС + " • "));
	НезаполненныеНастройки.Добавить(СтрСоединить(ОтключенныеРегЗадания(),				Символы.ПС + " • "));
	НезаполненныеНастройки.Добавить(СтрСоединить(НезаполненныеПользовательскиеПоля(),	Символы.ПС + " • "));
	НезаполненныеНастройки.Добавить(СтрСоединить(НезаполненныеСтатусы(),				Символы.ПС + " • "));
	
	Возврат НезаполненныеНастройки;
	
КонецФункции

&НаСервере
Функция НезаполненныеРеквизиты()
	
	НезаполненныеРеквизиты = Новый Массив;
	
	ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='Адрес Битрикс24'"),			НаименованиеБитрикс24);
	ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='Код вебхука'"),				КодВебхука);
	ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='ID пользователя вебхука'"),	ИДПользователяВебхука);
	                    
	Если Б24_РежимОбмена <> 2 Тогда
		ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='Токен приложения'"),			КодАвторизации);
		ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='Настройка обмена с сайтом'"),	НастройкаОбменаССайтом);
	КонецЕсли;
	
	Если РежимРаботыСоСделками <> 3 И РежимСозданияСделки = 1 Тогда
		ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='Бизнес процесс конвертации сделки'"),				 ШаблонБПКонвертацииЛида);
		ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='Бизнес процесс создания новой сделки по контакту'"), ШаблонБПСозданияСделкиПоКлиенту);
		ДобавитьНезаполненныйРеквизит(НезаполненныеРеквизиты, НСтр("ru='Бизнес процесс изменения ответственного сделки'"),	 ШаблонБПИзменениеОтветственного);
	КонецЕсли;
	
	Если НезаполненныеРеквизиты.Количество() > 0 Тогда
		НезаполненныеРеквизиты.Вставить(0, НСтр("ru='Не заполнены настройки:'"));
	КонецЕсли;
	
	Возврат НезаполненныеРеквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьНезаполненныйРеквизит(НезаполненныеНастройки, Синоним, ЗначениеРеквизита)
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		НезаполненныеНастройки.Добавить(Синоним);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтключенныеРегЗадания()
	
	ОтключенныеРегЗадания = Новый Массив;
	
	ДобавитьОтключенноеРегЗадание(ОтключенныеРегЗадания, НСтр("ru='Отправка неотправленных документов'"),	"ОбменБитрикс24_ОтправитьНеотправленныеДокументыВБитрикс");
	ДобавитьОтключенноеРегЗадание(ОтключенныеРегЗадания, НСтр("ru='Отмена просроченных лидов'"),			"ОбменБитрикс24_ОтменитьПросроченныеЛиды");
	ДобавитьОтключенноеРегЗадание(ОтключенныеРегЗадания, НСтр("ru='Импорт недостающих лидов'"),				"ОбменБитрикс24_ИмпортНедостающихЛидов");
	
	Если ОтключенныеРегЗадания.Количество() > 0 Тогда
		ОтключенныеРегЗадания.Вставить(0, НСтр("ru='Отключены регламентные задания:'"));
	КонецЕсли;
	
	Возврат ОтключенныеРегЗадания;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОтключенноеРегЗадание(ОтключенныеРегЗадания, ЗаголовокРегЗадания, ИмяРегЗадания)
	
	Если Не РегламентныеЗадания.НайтиПредопределенное(ИмяРегЗадания).Использование Тогда
		ОтключенныеРегЗадания.Добавить(ЗаголовокРегЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НезаполненныеПользовательскиеПоля()
	
	НезаполненныеПользовательскиеПоля = Новый Массив;
	
	НЗ = РегистрыСведений.Б24_ПользовательскиеПоля.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	ЗначенияПользовательскихПолей = НЗ.Выгрузить();
	
	Для Каждого ПользовательскоеПоле Из Перечисления.Б24_ПользовательскиеПоля Цикл
		СтрокаПользовательскогоПоля = ЗначенияПользовательскихПолей.Найти(ПользовательскоеПоле, "ПользовательскоеПоле");
		Если СтрокаПользовательскогоПоля = Неопределено
			Или Не ЗначениеЗаполнено(СтрокаПользовательскогоПоля.ИмяПоля)
		Тогда
			НезаполненныеПользовательскиеПоля.Добавить(ПользовательскоеПоле.Метаданные().Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Если НезаполненныеПользовательскиеПоля.Количество() > 0 Тогда
		НезаполненныеПользовательскиеПоля.Вставить(0, НСтр("ru='Не заполнены пользовательские поля:'"));
	КонецЕсли;
	
	Возврат НезаполненныеПользовательскиеПоля;
	
КонецФункции

&НаСервере
Функция НезаполненныеСтатусы()
	
	НезаполненныеСтатусы = Новый Массив;
	
	НЗ = РегистрыСведений.Б24_Статусы.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	СохраненныеСтатусы = НЗ.Выгрузить();
	
	ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.ЛидУспешный);
	ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.ЛидОтказ);
	ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.ЛидПросрочен);
	
	Если Б24_РежимОбмена <> 1 Тогда
		ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.ЛидПриВыгрузке);
	КонецЕсли;
	
	Если Б24_РежимОбмена <> 2 Тогда
		ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.ЛидКЗагрузке);
	КонецЕсли;
	
	Если РежимРаботыСоСделками <> 3 Тогда
		ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.СделкаЗавершена);
		ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.СделкаНовая);
		ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.СделкаОтказ);
	КонецЕсли;
	
	Если Режим3 Тогда
		ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Перечисления.Б24_Статусы.ЛидЗаписанНаПрием);
	КонецЕсли;
	
	Если НезаполненныеСтатусы.Количество() > 0 Тогда
		НезаполненныеСтатусы.Вставить(0, НСтр("ru='Не заполнены пользовательские поля:'"));
	КонецЕсли;
	
	Возврат НезаполненныеСтатусы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьНезаполненныйСтатус(НезаполненныеСтатусы, СохраненныеСтатусы, Статус)
	
	СтрокаСтатуса = СохраненныеСтатусы.Найти(Статус, "Статус");
	Если СтрокаСтатуса = Неопределено Или Не ЗначениеЗаполнено(СтрокаСтатуса.ИдентификаторСтатуса) Тогда
		НезаполненныеСтатусы.Добавить(Статус.Метаданные().Синоним);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти