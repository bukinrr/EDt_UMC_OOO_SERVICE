#Область РазделОписанияПеременных

&НаКлиенте
Перем ВремяНачалаРаботы;
&НаКлиенте
Перем ВремяОкончанияРаботы;
&НаКлиенте
Перем мПериодичностьПланирования;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаРаботы = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы", ТекущаяДата());
	ВремяОкончанияРаботы = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяОкончанияРаботы", ТекущаяДата());
	РабочийДеньВЧасах =  Час(ВремяОкончанияРаботы) - Час(ВремяНачалаРаботы); 
	мПериодичностьПланирования = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПериодичностьПланирования", ТекущаяДата());
	Элементы.ГруппаОтборы.Видимость = Истина;
	
	Элементы.Филиал.Видимость = УправлениеНастройками.ТребуетсяУчетПоФилиалам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Обновить(Неопределено);
	ИзменитьЗаголовки();
	ЗаполнитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаявкаИзменение" Тогда
		
		ЗаявкиИзОповещенияВСписке = ЗаявкиДляПереноса.НайтиСтроки(Новый Структура("Заявка", Параметр.Ссылка));
		Если ЗаявкиИзОповещенияВСписке.Количество() <> 0 Тогда
			
			СтрокаЗаявки = ЗаявкиИзОповещенияВСписке[0];
			
			ДатаЗаписиСтарая = СтрокаЗаявки.ЗаявкаДата + (СтрокаЗаявки.ЗаявкаВремяНачала - Дата(1,1,1));
			Если ДатаЗаписиСтарая <> Параметр.Дата Тогда
				ЗаявкиДляПереноса.Удалить(СтрокаЗаявки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаявкиДляПереноса.Очистить();
	АдресаПереноса.Очистить();
	ДлительнаяОперация = СоздатьДлитОперациюПолученияДанныхДляОбновления(ЗаявкиДляПереноса, УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = "Получение данных необходимых для обновления...";
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОбновить", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗаявкуВПрошлое(Команда)
	
	ТД = Элементы.АдресаПереноса.ТекущиеДанные;
	ТДЗаявка = Элементы.ЗаявкиДляПереноса.ТекущиеДанные;
	Если  ТД <> Неопределено И ТДЗаявка <> Неопределено Тогда
		ЗначенияЗаполнения = Новый Структура("ХочуРаньше, Сотрудник, Филиал, ВремяНачала",
												Ложь, ТД.Сотрудник,  ТД.Филиал, ТД.ВремяНачала);
		ЗначенияЗаполнения.Вставить("Оборудование", 	ПредопределенноеЗначение("Справочник.Оборудование.ПустаяСсылка"));										
		ЗначенияЗаполнения.Вставить("ДатаНачала", 		ТД.Дата + (ТД.ВремяНачала		- Дата(0001,01,01)));
		
		ЗначенияЗаполнения.Вставить("ДатаОкончания", 	ТД.Дата + (ТД.ВремяОкончания	- Дата(0001,01,01)));
		ЗначенияЗаполнения.Вставить("ВремяОкончания", 	ТД.ВремяОкончания);
		
		ФормаЗаявки = ОткрытьФорму("Документ.Заявка.ФормаОбъекта", Новый Структура("Ключ, ЗначенияПерезаполнения", ТДЗаявка.Заявка, ЗначенияЗаполнения));
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите строку в расписании");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборы(Команда)
	Элементы.ГруппаОтборы.Видимость = НЕ Элементы.ГруппаОтборы.Видимость;
	Элементы.ФормаПоказатьОтборы.Пометка = Элементы.ГруппаОтборы.Видимость
КонецПроцедуры

&НаКлиенте
Процедура НачатьРазговор(Команда)
	
	Если Команда.Имя = "НачатьРазговор" Тогда
		бит_БитфонКлиент.ОткрытьБитфонНачатьРазговор(Элементы.ЗаявкиДляПереноса.ТекущиеДанные.Клиент);
	Иначе
		бит_АТСКлиент.ОткрытьМониторНачатьРазговор(Элементы.ЗаявкиДляПереноса.ТекущиеДанные.Клиент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаявкиДляПереносаПриАктивизацииСтроки(Элемент)
	ПересчитатьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура АдресаПереносаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Ответ = Вопрос("Хотите перенести текущую заявку на указанную дату/время/специалиста?",РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПеренестиЗаявкуВПрошлое(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиДляПереносаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ЗаявкиДляПереноса.ТекущиеДанные <> Неопределено Тогда	
		ОткрытьЗначение(Элементы.ЗаявкиДляПереноса.ТекущиеДанные.Заявка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВремяНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСФормамиКлиент.ОбработчикРегулированияКвантуемогоВремени(ОтборВремяНачала, Направление, мПериодичностьПланирования);
	ПересчитатьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВремяОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСФормамиКлиент.ОбработчикРегулированияКвантуемогоВремени(ОтборВремяОкончания, Направление, мПериодичностьПланирования);
	ПересчитатьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаНачалаПриИзменении(Элемент)
	ПересчитатьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОкончанияПриИзменении(Элемент)
	ПересчитатьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВремяНачалаПриИзменении(Элемент)
	ПересчитатьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВремяОкончанияПриИзменении(Элемент)
	ПересчитатьАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ДопускатьПереносВДругиеФилиалыПриИзменении(Элемент)
	
	НастроитьСпискиПоНастройкамФилиалов();
	ПодключитьОбработчикОжидания("ПроверитьАктуальностьОтборТекущаяСтрокаЗаявки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	НастроитьСпискиПоНастройкамФилиалов();
	ПодключитьОбработчикОжидания("ПроверитьАктуальностьОтборТекущаяСтрокаЗаявки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СоздатьДлитОперациюПолученияДанныхДляОбновления(Знач ЗаявкиДляПереноса, УникальныйИдентификаторФормы)
	НаименованиеЗадания = НСтр("ru = 'Получение данных необходимых для обновления'");
	ВыполняемыйМетод = "УправлениеЗаявками.СформироватьДанныеДляФормыУправленияПереносомЗаявок";
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаявкиДляПереноса", ЗаявкиДляПереноса.Выгрузить());
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
КонецФункции

&НаКлиенте
Процедура ЗавершениеОбновить(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			ПоказатьПредупреждение(,Результат.КраткоеПредставлениеОшибки);
			Возврат;
		КонецЕсли;
		 
		ОбновитьНаСервере(Результат.АдресРезультата);
		ЗаполнитьОтборы();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере(АдресДанных)
	
	РезультатДлитОперации = ПолучитьИзВременногоХранилища(АдресДанных);
	ЗначениеВРеквизитФормы(РезультатДлитОперации.ВыгрузкаТаблица, "СводнаяТаблица");
	ЗначениеВРеквизитФормы(РезультатДлитОперации.ЗаявкиДляПереноса, "ЗаявкиДляПереноса");	
	
	НастроитьСпискиПоНастройкамФилиалов();
	
	Элементы.ФормаНачатьРазговор.Доступность = ЗаявкиДляПереноса.Количество() > 0;
	Элементы.ФормаНачатьРазговорМонитор.Доступность = ЗаявкиДляПереноса.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСпискиПоНастройкамФилиалов()

	Элементы.ЗаявкиДляПереносаКоличествоВариантов.Видимость = ДопускатьПереносВДругиеФилиалы;
	Элементы.ЗаявкиДляПереносаКоличествоВариантовЭтотЖеФилиал.Видимость = Не ДопускатьПереносВДругиеФилиалы;
	
	Отбор = Новый Структура;
	
	Если Не ДопускатьПереносВДругиеФилиалы Тогда
		Отбор.Вставить("МожноПеренестиВТуЖеКлинику",Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		Отбор.Вставить("Филиал",Филиал);
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		Элементы.ЗаявкиДляПереноса.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе	
		Элементы.ЗаявкиДляПереноса.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресаПоЗаявке(ЗаявкаСсылка)
	АдресаПереноса.Очистить();
	ОтборПоЗаявке = Новый Структура("Заявка", ЗаявкаСсылка); 
	АдресаЗаявки = СводнаяТаблица.НайтиСтроки(ОтборПоЗаявке);
	Для Каждого Адрес Из АдресаЗаявки Цикл
		Если Адрес.КоличествоВариантов > 0 
			//И НаложитьОтборы(Адрес)
		Тогда
			нАдрес = АдресаПереноса.Добавить();	
			ЗаполнитьЗначенияСвойств(нАдрес, Адрес);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьАдреса()
	Если Элементы.ЗаявкиДляПереноса.ТекущиеДанные <> Неопределено Тогда	
		ОбновитьАдресаПоЗаявке(Элементы.ЗаявкиДляПереноса.ТекущиеДанные.Заявка);
	КонецЕсли;
КонецПроцедуры

// Отборы по свободным ячейкам графиков
&НаКлиенте
Процедура ЗаполнитьОтборы()
	ОтборВремяНачала = ВремяНачалаРаботы;
	ОтборВремяОкончания = ВремяОкончанияРаботы;
	ОтборДатаНачала = НачалоДня(ТекущаяДата() + 24*60*60);
	ОтборДатаОкончания = УправлениеЗаявками.ПолучитьДатуОкончанияПоЗаявкамХочуРаньше(ОтборДатаНачала);
КонецПроцедуры

// Универсальность заголовков
&НаКлиенте
Процедура ИзменитьЗаголовки()
	Элементы.ЗаявкиДляПереносаСотрудник.Заголовок	= УправлениеЗаявкамиПереопределяемый.ПолучитьСпециализированноеИмяРеквизита(Элементы.ЗаявкиДляПереносаСотрудник.Заголовок);
	Элементы.АдресаПереносаСотрудник.Заголовок		= УправлениеЗаявкамиПереопределяемый.ПолучитьСпециализированноеИмяРеквизита(Элементы.АдресаПереносаСотрудник.Заголовок);
	Элементы.АдресаПереносаФилиал.Заголовок	= УправлениеЗаявкамиПереопределяемый.ПолучитьСпециализированноеИмяРеквизита(Элементы.АдресаПереносаФилиал.Заголовок);
	Элементы.ГруппаИнформацияКлиент.Заголовок	= УправлениеЗаявкамиПереопределяемый.ПолучитьСпециализированноеИмяРеквизита(Элементы.ГруппаИнформацияКлиент.Заголовок);
	Элементы.Филиал.Заголовок					= УправлениеЗаявкамиПереопределяемый.ПолучитьСпециализированноеИмяРеквизита(Элементы.Филиал.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьОтборТекущаяСтрокаЗаявки()
	
	Если Элементы.ЗаявкиДляПереноса.ТекущаяСтрока = Неопределено
		И АдресаПереноса.Количество() > 0
	Тогда
		АдресаПереноса.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти