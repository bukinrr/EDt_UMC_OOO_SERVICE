#Область РазделОписанияПеременных

&НаКлиенте
Перем СоответствиеРасширенийФайлов;

&НаКлиенте
Перем мсВсеВладельцы;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	ИспользуютсяЭП = ЭЦП_УМЦ_Сервер.ИспользоватьЭлектронныеПодписиЭМК();
	
	// Параметры
	Владелец				= Параметры.Владелец;
	ВключатьПредпросмотр	= Параметры.ВключатьПредпросмотр;
	ВыборФотоКлиента		= Параметры.ВыборФотоКлиента;
	ВыводитьИерархию		= Параметры.ВыводитьИерархию;
	
	ПоказыватьФайлыПодчиненных	= РаботаСФормамиСервер.ПолучитьНастройкуФормы("ФормаПросмотраИсторииБолезни", "ПоказыватьФайлыПодчиненных", Ложь);
	Элементы.КнопкаПоказыватьФайлыПодчиненных.Пометка = ПоказыватьФайлыПодчиненных;
	
	Если ВыборФотоКлиента
		И ТипЗнч(Владелец) = Тип("СправочникСсылка.Клиенты")
	Тогда
		ТекОснИзображение = Владелец.Фотография;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда // Без владельца не запускать
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВладельцев(Владелец);
	
	ОбновитьСписокКлассификацийФайлов();
	
	ИмяУстройстваСканирование = РаботаСФайлами.ПолучитьНастройкиСканированияПользователя(ПараметрыСеанса.РабочееМестоКлиента).ИмяУстройства;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Клиенты") Тогда
		Клиент = Владелец;
	ИначеЕсли ТипЗнч(Владелец) = Тип("ДокументСсылка.Прием") Тогда
		Клиент = Владелец.Клиент;
	КонецЕсли;
	
	Элементы.ФормаОтправитьКлиентуПоЭлектроннойПочте.Видимость = ЗначениеЗаполнено(Клиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеДереваВладельцев = ПолучитьВсехВладельцевВИерархии();
	мсВсеВладельцы = ДанныеДереваВладельцев.СписокВладельцев;
	Если мсВсеВладельцы.Количество() < 2 Тогда
		Элементы.Владельцы.Видимость = Ложь;
		СписокВладельцев = Новый СписокЗначений;
		СписокВладельцев.ЗагрузитьЗначения(мсВсеВладельцы);
		СписокВладельцев.Добавить(Владелец);
		РаботаСФормамиКлиент.УстановитьОтборСписка("Объект", СписокВладельцев, СписокФайлов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;

	Если ДанныеДереваВладельцев.СтрокаТекущегоВладельца <> Неопределено Тогда 
		Элементы.Владельцы.ТекущаяСтрока = ДанныеДереваВладельцев.СтрокаТекущегоВладельца.ПолучитьИдентификатор();
	КонецЕсли;
	
	СоответствиеРасширенийФайлов = РаботаСФайламиКлиент.ПолучитьРасширенияДляПредпросмотраФайлов();
	Элементы.ГруппаПредпросмотр.Видимость = Ложь;
	Элементы.СписокФайловВключитьПредпросмотр.Пометка = ВключатьПредпросмотр;
	
	ЭтаФорма.Заголовок = "Файлы """ + Строка(Владелец) + """";
	Если УчетнаяПолитика.ХранитьФотоКлиентовКакФайлы Тогда // Формируем каталог хранения
		КаталогХранения = УчетнаяПолитика.БазовыйКаталогФайлов;
	КонецЕсли;
	
	Если УчетнаяПолитика.ХранитьФотоКлиентовКакФайлы И УчетнаяПолитика.АвтоматическоеСканированиеФайлов Тогда
		РаботаСФайлами.ПросканироватьСписокФайловВКаталоге(УчетнаяПолитика.БазовыйКаталогФайлов, мсВсеВладельцы); 
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПоТекущимДанным();
	ОбновитьПредпросмотр();
	
	Для Каждого ЭлементВерхнегоУр Из Владельцы.ПолучитьЭлементы() Цикл
		Элементы.Владельцы.Развернуть(ЭлементВерхнегоУр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		РаботаСФормамиСервер.СохранитьНастройкуФормы("ФормаПрикрепленныеФайлы", "ПоказыватьФайлыПодчиненных", ПоказыватьФайлыПодчиненных); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КлассификацияПрикрепленныхФайловЗапись" Тогда
		ОбновитьСписокКлассификацийФайлов();
		РаботаСФормамиКлиент.СнятьОтборСписка("Классификация", СписокФайлов);
	ИначеЕсли ИмяСобытия = "ОбновитьФормуФайлов" Тогда 
		Элементы.СписокФайлов.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьСписокКлассификацийФайлов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Пометка,
		|	КлассификацияПрикрепленныхФайлов.Ссылка КАК Классификация,
		|   КлассификацияПрикрепленныхФайлов.Представление КАК КлассификацияПредставление
		|ИЗ
		|	Справочник.КлассификацияПрикрепленныхФайлов КАК КлассификацияПрикрепленныхФайлов
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлассификацияПрикрепленныхФайлов.Наименование ВОЗР";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); // Иерархия для загрузки в реквизит.
	
	// Добавление
	ЗначениеВРеквизитФормы(РезультатЗапроса, "Классификация");
	ТекущаяСтрока = Классификация.ПолучитьЭлементы().Вставить(0);
	ТекущаяСтрока.Пометка = Истина;
	ТекущаяСтрока.Классификация = Неопределено;
	ТекущаяСтрока.КлассификацияПредставление = Новый ФорматированнаяСтрока("<"+НСтр("ru='Без классификации'")+">",Новый Шрифт(,,,Истина) ,ЦветаСтиля.ЦветАкцента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьПоТекущимДанным()
	
	ЗапретДобавления = Ложь;
	ЗапретИзменения = Ложь;
	
	Если ИспользуютсяЭП Тогда
		
		// Проверяем доступность изменений по владельцу
		Если Элементы.Владельцы.Видимость Тогда
			ТекДанныеВладелец = Элементы.Владельцы.ТекущиеДанные;
			Если ТекДанныеВладелец = Неопределено Тогда
				ЗапретДобавления = Истина;
			Иначе
				ЗапретДобавления = ЭЦП_УМЦ_Сервер.ПроверитьНеобходимостьПроверятьПодпись(ТекДанныеВладелец.Владелец);
			КонецЕсли;
		Иначе
			ЗапретДобавления = ЭЦП_УМЦ_Сервер.ПроверитьНеобходимостьПроверятьПодпись(Владелец);
		КонецЕсли;
		
		ТекДанныеФайл = Элементы.СписокФайлов.ТекущиеДанные;
		Если ТекДанныеФайл = Неопределено Тогда 
			ЗапретИзменения = Истина;
		Иначе
			ЗапретИзменения = ЭЦП_УМЦ_Сервер.ПроверитьНеобходимостьПроверятьПодпись(ТекДанныеФайл.Объект);
		КонецЕсли;
		
	КонецЕсли;	
	
	Элементы.Добавить.Доступность = Не ЗапретДобавления;
	Элементы.ГруппаДобавить.Доступность = Не ЗапретДобавления;
	Элементы.Удалить.Доступность = Не ЗапретИзменения;
	Элементы.ЗаменитьФайл.Доступность = Не ЗапретИзменения;
	
	Элементы.ГруппаДобавить.Видимость = ПолучитьВидимостьГруппыДобавления();	
	Элементы.Добавить.Видимость = Не Элементы.ГруппаДобавить.Видимость; 
	
КонецПроцедуры

// Возвращает массив текущего и вложенных элементов списка владельцев.
&НаКлиенте
Функция ПолучитьВсехВладельцевВИерархии()
	
	Ветвь = Элементы.Владельцы.ТекущиеДанные;
	СтрокаТекущегоВладельца = Ветвь;
	
	мсВладельцы = Новый Массив;
	Если Ветвь <> Неопределено Тогда
		мсВладельцы.Добавить(Ветвь.Владелец);
		СформироватьМассивВладельцевВИерархии(Ветвь, мсВладельцы, СтрокаТекущегоВладельца);
	ИначеЕсли Владельцы.ПолучитьЭлементы().Количество() > 0 Тогда
		СформироватьМассивВладельцевВИерархии(Владельцы, мсВладельцы, СтрокаТекущегоВладельца);	
	КонецЕсли;
	
	Возврат Новый Структура("СписокВладельцев, СтрокаТекущегоВладельца", мсВладельцы, СтрокаТекущегоВладельца);
	
КонецФункции

// Обход дерева владельцев с заданного элемента и составление списка.
&НаКлиенте
Процедура СформироватьМассивВладельцевВИерархии(ВетвьДерева, мсВладельцы, СтрокаТекущегоВладельца = Неопределено)
	
	Ветви = ВетвьДерева.ПолучитьЭлементы();
	Для Каждого ПодВетвь Из Ветви Цикл
		Если мсВладельцы.Найти(ПодВетвь.Владелец) = Неопределено Тогда
			мсВладельцы.Добавить(ПодВетвь.Владелец);
		КонецЕсли;
		Если ПодВетвь.Владелец = Владелец Тогда 
			СтрокаТекущегоВладельца = ПодВетвь;
		КонецЕсли;
    	СформироватьМассивВладельцевВИерархии(ПодВетвь, мсВладельцы, СтрокаТекущегоВладельца);
	КонецЦикла;
	
КонецПроцедуры

// В зависимости от владельца формы заполняет список владельцев.
&НаСервере
Процедура ЗаполнитьСписокВладельцев(Владелец)
	
	Если ВыводитьИерархию Тогда
		ДеревоИерархии = ПолучитьДеревоИерархииПоОбъекту(Владелец);
		ЗаполнитьРекурсивно(ДеревоИерархии, Владельцы);
	Иначе
		Владельцы.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРекурсивно(УзелИсточник, УзелПриемник)
	
	СтрокиПриемника = УзелПриемник.ПолучитьЭлементы();
	Для Каждого СтрокаИсточник Из УзелИсточник.Строки Цикл
		
		ТекОбъект = СтрокаИсточник["Объект" + Строка(СтрокаИсточник.Уровень() + 1)];
		Если ТекОбъект = Null Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокиПриемника.Добавить();
		НоваяСтрока.Владелец = ТекОбъект;
		ЗаполнитьРекурсивно(СтрокаИсточник, НоваяСтрока);
		
		// Проверяем наличие файлов
		НоваяСтрока.ЕстьФайлы = РаботаСФайлами.ПроверитьНаличиеФайлов(ТекОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДеревоИерархииПоОбъекту(Объект)
	
	ДеревоИерархии = Новый ДеревоЗначений;
	
	ТаблицаИерархии = Новый ТаблицаЗначений;
	ТаблицаИерархии.Колонки.Добавить("Объект1");
	ТаблицаИерархии.Колонки.Добавить("Объект2");
	ТаблицаИерархии.Колонки.Добавить("Объект3");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	 |	ХранилищеДополнительнойИнформации.Объект КАК Объект1
	 |ИЗ
	 |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	 |ГДЕ
	 |	ХранилищеДополнительнойИнформации.Объект = &Объект"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИерархии.Добавить(), Выборка);
	КонецЦикла;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	// Если это клиент, добавляем файлы связанных документов
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Клиенты") Тогда
		Запрос.УстановитьПараметр("Клиент", Объект);
		Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		 |	&Клиент КАК Объект1,
		 |	ХранилищеДополнительнойИнформации.Объект КАК Объект2
		 |ИЗ
		 |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		 |ГДЕ
		 |	ХранилищеДополнительнойИнформации.КонечныйВладелец = &Клиент"
		;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаИерархии.Добавить(), Выборка);
		КонецЦикла;
		
		// Если конфигурация имеет документ Прием и они есть в таблице, то для них выводится в иерархии их первичный прием.
		Если Метаданные.Документы.Найти("Прием") <> Неопределено Тогда
			МассивПриемов = Новый Массив;
			Для Каждого СтрокаТаблицы Из ТаблицаИерархии Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Объект2)
					И СтрокаТаблицы.Объект2.Метаданные().Имя = "Прием"
				Тогда
					МассивПриемов.Добавить(СтрокаТаблицы.Объект2);
				КонецЕсли;
			КонецЦикла;
			Если МассивПриемов.Количество() <> 0 Тогда
				Запрос.УстановитьПараметр("Приемы", МассивПриемов);
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Прием.Ссылка КАК Ссылка,
				|	Прием.ПервичныйПрием КАК ПервичныйПрием
				|ИЗ
				|	Документ.Прием КАК Прием
				|ГДЕ
				|	Прием.Ссылка В(&Приемы)
				|	И Прием.Ссылка <> Прием.ПервичныйПрием"
				;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаТаблицы = ТаблицаИерархии.Найти(Выборка.Ссылка, "Объект2");
					Если СтрокаТаблицы <> Неопределено Тогда
						СтрокаТаблицы.Объект3 = СтрокаТаблицы.Объект2;
						СтрокаТаблицы.Объект2 = Выборка.ПервичныйПрием;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Метаданные.Документы.Найти("ГарантийноеПисьмоПоПолису") <> Неопределено Тогда
			Запрос.УстановитьПараметр("Клиент", Объект);
			Запрос.Текст = 
				 "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				 |	&Клиент КАК Объект1,
				 |	ХранилищеДополнительнойИнформации.Объект КАК Объект2
				 |ИЗ
				 |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
				 |ГДЕ
				 |	ХранилищеДополнительнойИнформации.Объект ССЫЛКА Документ.ГарантийноеПисьмоПоПолису
				 |	И ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.Объект КАК Документ.ГарантийноеПисьмоПоПолису).Полис.Владелец = &Клиент"
				;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаИерархии.Добавить(), Выборка);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		// Если объект - это документ приёма, то выводим файлы подчиненных приёмов.
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
		Если Метаданные.Документы.Найти(МетаданныеТипа) <> Неопределено
			И МетаданныеТипа.Имя = "Прием"
		Тогда
			Если Объект.ПервичныйПрием = Объект Тогда
				Запрос.УстановитьПараметр("ПервичныйПрием", Объект);
				Запрос.Текст = 
				 "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				 |	&ПервичныйПрием КАК Объект1,
				 |	ХранилищеДополнительнойИнформации.Объект КАК Объект2
				 |ИЗ
				 |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
				 |ГДЕ
				 |	ХранилищеДополнительнойИнформации.Объект ССЫЛКА Документ.Прием
				 |	И ХранилищеДополнительнойИнформации.Объект <> &ПервичныйПрием
				 |	И ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.Объект КАК Документ.Прием).ПервичныйПрием = &ПервичныйПрием"
				;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаИерархии.Добавить(), Выборка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Оформление дерева иерархии
	ДеревоИерархии = ОбщегоНазначенияСервер.ТаблицуЗначенийВДеревоЗначений(ТаблицаИерархии, "Объект1, Объект2");
	
	Для Каждого СтрокаУровень1 Из ДеревоИерархии.Строки Цикл
		УдаляемыеСтрокиУровень2 = Новый Массив;
		Для Каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаУровень2.Объект2) Тогда
				УдаляемыеСтрокиУровень3 = Новый Массив;
				Для Каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
					Если Не ЗначениеЗаполнено(СтрокаУровень3.Объект3) Тогда
						УдаляемыеСтрокиУровень3.Добавить(СтрокаУровень3);
					КонецЕсли;
				КонецЦикла;
			Для Каждого СтрокаУровня Из УдаляемыеСтрокиУровень3 Цикл
				СтрокаУровень2.Строки.Удалить(СтрокаУровня);
			КонецЦикла;
			Иначе
				УдаляемыеСтрокиУровень2.Добавить(СтрокаУровень2);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаУровня Из УдаляемыеСтрокиУровень2 Цикл
			СтрокаУровень1.Строки.Удалить(СтрокаУровня);
		КонецЦикла;
	КонецЦикла;
	
	Если ДеревоИерархии.Строки.Количество() = 0 И
		Метаданные.Справочники.ХранилищеДополнительнойИнформации.Реквизиты.Объект.Тип.СодержитТип(ТипЗнч(Объект)) 
	Тогда
	
		ДеревоИерархии = Новый ДеревоЗначений;
		Если ДеревоИерархии.Колонки.Найти("Объект1") = Неопределено Тогда
			ДеревоИерархии.Колонки.Добавить("Объект1");
		КонецЕсли;
		НоваяСтрока = ДеревоИерархии.Строки.Добавить();
		НоваяСтрока.Объект1 = Объект;
				
	КонецЕсли;
	
	Возврат ДеревоИерархии;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ТекДанные = Элементы.Владельцы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(Владелец) Тогда
			ТекВладелец = Владелец;
		ИначеЕсли мсВсеВладельцы.Количество() = 1 Тогда 
			ТекВладелец = мсВсеВладельцы[0];
		Иначе 
			Возврат;
		КонецЕсли;
	Иначе
		ТекВладелец = ТекДанные.Владелец;	
	КонецЕсли;
	
	НеобходимоПроверятьПодпись = ЭЦП_УМЦ_Сервер.ПроверитьНеобходимостьПроверятьПодпись(ТекВладелец);
	Если НеобходимоПроверятьПодпись Тогда 
		Если Не ЗаблокироватьВладельцаФайлов(ТекВладелец) Тогда 
	    	ПоказатьПредупреждение(, Строка(ТекВладелец) + " заблокирован другим пользователем");
		КонецЕсли;
	КонецЕсли;
	
	// Настраиваем и открываем диалог открытия файла
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = "Все файлы "+"(*.*)|*.*";
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда	
		Для Каждого Файл из ДиалогОткрытияФайла.ВыбранныеФайлы Цикл
			СсылкаНаФайл = РаботаСФайламиКлиент.ДобавитьНовыйФайл(ТекВладелец, Файл, УчетнаяПолитика);
			// ЭЦП
			Если НеобходимоПроверятьПодпись Тогда
				ЭЦП_УМЦ_Клиент.ПроверитьВсеПодписиОбъекта(ТекВладелец);
				РазблокироватьВладельцаФайлов(ТекВладелец);
			КонецЕсли;
			Элементы.СписокФайлов.ТекущаяСтрока = СсылкаНаФайл;
			ОповеститьОбИзмененииСоставаФайлов(ТекВладелец);
		КонецЦикла; 
	КонецЕсли;
	
	Элементы.СписокФайлов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытиеФайла(ТекДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.СписокФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ОткрытиеФайла(ТекДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытиеФайла(СсылкаНаФайл)
	
	СтрокаКеш = ПолучитьКешированныйПутьКФайлу(СсылкаНаФайл);
	Если СтрокаКеш <> Неопределено Тогда 
		СтрокаКеш.ПутьКФайлу = РаботаСФайламиКлиент.ОткрытьФайл(СсылкаНаФайл, , СтрокаКеш.ПутьКФайлу);
	Иначе
		ПутьКФайлу = РаботаСФайламиКлиент.ОткрытьФайл(СсылкаНаФайл);
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда 
			ДобавитьКешированныйПутьКФайлу(СсылкаНаФайл, ПутьКФайлу);
		Иначе
			Если Вопрос("Невозможно получить файл, возможно он был удален или перемещен. Удалить из списка?", 
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да 
			Тогда
				РаботаСФайламиКлиент.УдалитьФайл(СсылкаНаФайл, УчетнаяПолитика);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКешированныйПутьКФайлу(СсылкаНаФайл)
	
	НайдСтроки = КешПутейКФайлам.НайтиСтроки(Новый Структура("Файл", СсылкаНаФайл));
	Если НайдСтроки.Количество() > 0 Тогда 
		Возврат НайдСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция УдалитьКешированныйПутьКФайлу(СсылкаНаФайл)
	
	НайдСтроки = КешПутейКФайлам.НайтиСтроки(Новый Структура("Файл", СсылкаНаФайл));
	Если НайдСтроки.Количество() > 0 Тогда 
		КешПутейКФайлам.Удалить(НайдСтроки[0]);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДобавитьКешированныйПутьКФайлу(СсылкаНаФайл, ПутьКФайлу)
	
	СтрокаКеш = ПолучитьКешированныйПутьКФайлу(СсылкаНаФайл);
	Если СтрокаКеш = Неопределено Тогда 
		НоваяСтрока = КешПутейКФайлам.Добавить();
		НоваяСтрока.Файл = СсылкаНаФайл;
		НоваяСтрока.ПутьКФайлу = ПутьКФайлу;
		СтрокаКеш = НоваяСтрока;
	Иначе
		СтрокаКеш.ПутьКФайлу = ПутьКФайлу;
	КонецЕсли;
	
	Возврат СтрокаКеш;
	
КонецФункции

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	Строка = Элементы.СписокФайлов.ТекущиеДанные;
	Если Строка = Неопределено Тогда Возврат; КонецЕсли;
		
	РаботаСФайламиКлиент.УдалитьВосстановитьФайл(Строка.Ссылка, УчетнаяПолитика, Не Строка.ПометкаУдаления);
	
	Элементы.СписокФайлов.Обновить();
		
	// ЭЦП
	Если ЭЦП_УМЦ_Сервер.ПроверитьНеобходимостьПроверятьПодпись(Строка.Объект) Тогда
		ЭЦП_УМЦ_Клиент.ПроверитьВсеПодписиОбъекта(Строка.Объект);
	КонецЕсли;
	
	ОповеститьОбИзмененииСоставаФайлов(Строка.Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	Строка = Элементы.СписокФайлов.ТекущиеДанные;
	Если Строка = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = "";
	ДиалогСохраненияФайла.Фильтр = "Файлы "+"(*" + Строка.Расширение + ")|*" + Строка.Расширение;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = "Сохранение файла";
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		ДанныеФайла = РаботаСФайлами.ПолучитьФайлНаСервере(Строка.Ссылка, , Истина);
		Если ДанныеФайла.Свойство("ДвоичныеДанные") Тогда
			ДанныеФайла.ДвоичныеДанные.Записать(ДиалогСохраненияФайла.ПолноеИмяФайла);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьФайл(Команда)
	
	Строка = Элементы.СписокФайлов.ТекущиеДанные;
	Если Строка = Неопределено Тогда Возврат; КонецЕсли;
	
	// Настраиваем и открываем диалог открытия файла
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = "Все файлы "+"(*.*)|*.*";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		СсылкаНаФайл = РаботаСФайламиКлиент.ДобавитьНовыйФайл(Строка.Объект, ДиалогОткрытияФайла.ПолноеИмяФайла, УчетнаяПолитика, Строка.Ссылка);	
		
		// ЭЦП
		Если ЭЦП_УМЦ_Сервер.ПроверитьНеобходимостьПроверятьПодпись(Строка.Объект) Тогда
			ЭЦП_УМЦ_Клиент.ПроверитьВсеПодписиОбъекта(Строка.Объект);
		КонецЕсли;
		
		Элементы.СписокФайлов.ТекущаяСтрока = СсылкаНаФайл;
		ОповеститьОбИзмененииСоставаФайлов(Строка.Объект);
		
		УдалитьКешированныйПутьКФайлу(СсылкаНаФайл)
	КонецЕсли;
	
	Элементы.СписокФайлов.Обновить();
	
	ПодключитьОбработчикОжидания("ОбновитьПредпросмотрОтложенный", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрОтложенный()
	
	Если Элементы.СписокФайлов.ТекущиеДанные <> Неопределено Тогда
		ОбновитьПредпросмотр(Элементы.СписокФайлов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайловТекущегоВладельца()
	
	ТекДанные = Элементы.Владельцы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказыватьФайлыПодчиненных Тогда 
		мсВладельцы = ПолучитьВсехВладельцевВИерархии().СписокВладельцев;
	Иначе
		мсВладельцы = Новый Массив;
		мсВладельцы.Добавить(ТекДанные.Владелец);
	КонецЕсли;
	
	СписокВладельцев = Новый СписокЗначений;
	СписокВладельцев.ЗагрузитьЗначения(мсВладельцы);
	РаботаСФормамиКлиент.УстановитьОтборСписка("Объект", СписокВладельцев, СписокФайлов, ВидСравненияКомпоновкиДанных.ВСписке);
	УстановитьВидимостьДоступностьПоТекущимДанным();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыПриАктивизацииСтроки(Элемент)
	
	ОбновитьСписокФайловТекущегоВладельца();

КонецПроцедуры

&НаКлиенте
Процедура КнопкаПоказыватьФайлыПодчиненныхНажатие(Команда)
	
	ПоказыватьФайлыПодчиненных = Не ПоказыватьФайлыПодчиненных;
	Элементы.КнопкаПоказыватьФайлыПодчиненных.Пометка = ПоказыватьФайлыПодчиненных;
	
	ОбновитьСписокФайловТекущегоВладельца();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКомментарий(Команда)
	
	ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекДанные.Ссылка.Пустая() Тогда
		Если Вопрос("Неизвестная ошибка - файл не найден в хранилище. Удалить из списка?", 
			РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УдалитьФайл(Неопределено);
		КонецЕсли;
	Иначе
		Комментарий = ТекДанные.Комментарий;
		ВвестиСтроку(Комментарий, "Введите комментарий:", 0, Истина);
		ИзменитьКомментарийСервер(ТекДанные.Ссылка, Комментарий);
	КонецЕсли;
	Элементы.СписокФайлов.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьКомментарийСервер(Ссылка, Комментарий)
	
    ФайлОбъект = Ссылка.ПолучитьОбъект();
	ФайлОбъект.Комментарий = Комментарий;
	ФайлОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьКлассФайла(Команда)
	
	ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекДанные.Ссылка.Пустая() Тогда
		Если Вопрос(НСтр("ru='Неизвестная ошибка - файл не найден в хранилище. Удалить из списка?'"), 
			РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УдалитьФайл(Неопределено);
		КонецЕсли;
	Иначе
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыбратьКатегориюДляДополнительнойИнформацииЗавершение", ЭтотОбъект, ТекДанные.Ссылка);
		ПараметрыФормы = Новый Структура("ТекущаяСтрока", ДопСерверныеФункции.ПолучитьРеквизит(ТекДанные.Ссылка, "Классификация"));
		ОткрытьФорму("Справочник.КлассификацияПрикрепленныхФайлов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, Владелец,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегориюДляДополнительнойИнформацииЗавершение(Результат, Параметр) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Не ЗначениеЗаполнено(Параметр) Тогда
			Возврат;
		КонецЕсли;
		ИзменитьКатегориюСервер(Параметр, Результат);
		
		Элементы.СписокФайлов.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьКатегориюСервер(Ссылка, Классификация)
	ФайлОбъект = Ссылка.ПолучитьОбъект();
	ФайлОбъект.Классификация = Классификация;
	ФайлОбъект.Записать();		
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПриАктивизацииСтроки(Элемент)
		
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредпросмотр(ТекДанные);
	
	ИзмененияЗапрещены = ЭЦП_УМЦ_Сервер.ПроверитьНеобходимостьПроверятьПодпись(ТекДанные.Объект);
	УстановитьВидимостьДоступностьПоТекущимДанным();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Строка = Неопределено)
	
	Если Строка = Неопределено Или Не ВключатьПредпросмотр Тогда
		Если Элементы.ГруппаПредпросмотр.Видимость = Истина Тогда 
			Элементы.ГруппаПредпросмотр.Видимость = Ложь;
		КонецЕсли;
		Элементы.СделатьОсновнымИзображением.Видимость = Ложь;
		
		Возврат;
	КонецЕсли;
	
	ТипФайла = СоответствиеРасширенийФайлов.Получить(НРег(Строка.Расширение));
	Если ТипФайла = Неопределено Или Не ВключатьПредпросмотр Тогда 
		Элементы.ГруппаПредпросмотр.Видимость = Ложь;
	Иначе
		ИмяРеквизита = "Предпросмотр" + ТипФайла;
		Для Каждого Элемент Из Элементы.ГруппаПредпросмотр.ПодчиненныеЭлементы Цикл 
			Если Элемент.Имя = ИмяРеквизита Тогда 
				Элемент.Видимость = Истина;
			Иначе
				Элемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем файл
		СтрокаКеш = ПолучитьКешированныйПутьКФайлу(Строка.Ссылка);
		Если СтрокаКеш = Неопределено Тогда 
			ПутьКФайлу = РаботаСФайламиКлиент.ОткрытьФайл(Строка.Ссылка, , , Истина);
			Если ЗначениеЗаполнено(ПутьКФайлу) Тогда 
				СтрокаКеш = ДобавитьКешированныйПутьКФайлу(Строка.Ссылка, ПутьКФайлу);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаПредпросмотр.Видимость = Истина;
		
		Если ТипФайла = "Текст" Тогда
			Текст = Новый ЧтениеТекста(СтрокаКеш.ПутьКФайлу);
			ЭтаФорма[ИмяРеквизита] = Текст.Прочитать(); 
		ИначеЕсли ТипФайла = "Картинка" Тогда
			ЭтаФорма[ИмяРеквизита] = ПоместитьВоВременноеХранилище(Новый Картинка(СтрокаКеш.ПутьКФайлу), УникальныйИдентификатор);
		Иначе
			Элементы.ГруппаПредпросмотр.Видимость = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	Элементы.СделатьОсновнымИзображением.Видимость	= Строка <> Неопределено
													И ТипЗнч(Строка.Объект) = Тип("СправочникСсылка.Клиенты")
													И ТипФайла = "Картинка";
	
КонецПроцедуры

&НаКлиенте
Процедура Основная(Команда)
	
	ТекДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекОснИзображение <> ТекДанные.Ссылка Тогда
		// Установить новую основную фотографию
		Оповестить("ОбновитьФотографию", ТекДанные.Ссылка, Владелец);
		ТекОснИзображение = ТекДанные.Ссылка;
	Иначе
		// Очистить основную фотографию клиента
		Оповестить("ОбновитьФотографию", Неопределено, Владелец);
		ТекОснИзображение = Неопределено;
	КонецЕсли;
	Элементы.СписокФайлов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПредпросмотр(Команда)
	
	ВключатьПредпросмотр = Не ВключатьПредпросмотр;
	Элементы.СписокФайловВключитьПредпросмотр.Пометка = ВключатьПредпросмотр;
	ОбновитьПредпросмотр(Элементы.СписокФайлов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииСоставаФайлов(ТекВладелец, ЭтоИзменениеПометкиУдаления = Ложь)
	
	Оповестить("ИзмененСоставФайлов", РаботаСФайлами.ПолучитьКоличествоФайловОбъекта(ТекВладелец), ТекВладелец);
	
	Если ВыборФотоКлиента И Не ЭтоИзменениеПометкиУдаления Тогда
		ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			// Если типа файла соответствует расширению изображений - делаем его основным
			Если СоответствиеРасширенийФайлов.Получить(НРег(ТекущиеДанные.Расширение)) = "Картинка" Тогда
				Оповестить("ОбновитьФотографию", ТекущиеДанные.Ссылка, Владелец);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификацияПриИзменении(Элемент)
	
	СписокКлассификаций = Новый СписокЗначений;
	Для Каждого СтрокаТЧ Из Классификация.ПолучитьЭлементы() Цикл
		Если СтрокаТЧ.Пометка Тогда
			СписокКлассификаций.Добавить(СтрокаТЧ.Классификация)
		КонецЕсли;
	КонецЦикла;
	
	Если СписокКлассификаций.Количество() = Классификация.ПолучитьЭлементы().Количество() Тогда
		РаботаСФормамиКлиент.СнятьОтборСписка("Классификация", СписокФайлов);
	Иначе
		РаботаСФормамиКлиент.УстановитьОтборСписка("Классификация", СписокКлассификаций, СписокФайлов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификацияОтметитьВсе(Команда)
	
	УстановитьСнятьВсеФлажки(Истина);

КонецПроцедуры

&НаКлиенте
Процедура КлассификацияСнятьВсе(Команда)
	
	УстановитьСнятьВсеФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьВсеФлажки(Значение)
	Для Каждого СтрокаТЧ Из Классификация.ПолучитьЭлементы() Цикл
		СтрокаТЧ.Пометка = Значение;
	КонецЦикла;
	КлассификацияПриИзменении(Неопределено);
КонецПроцедуры

#Область ЭлектроннаяПодпись

&НаСервере
Функция ЗаблокироватьВладельцаФайлов(Владелец) 

	ЗаблокироватьДанныеДляРедактирования(Владелец, , УникальныйИдентификатор);
	Возврат Истина;
		
КонецФункции

&НаСервере
Процедура РазблокироватьВладельцаФайлов(Владелец) 

	РазблокироватьДанныеДляРедактирования(Владелец, УникальныйИдентификатор); 
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПолучитьВидимостьГруппыДобавления()
	
	Если РаботаСФайламиСлужебныйКлиент.ДоступноСканирование() И ЗначениеЗаполнено(ИмяУстройстваСканирование) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСоСканера(Команда)
	
	ТекДанные = Элементы.Владельцы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(Владелец) Тогда
			ТекВладелец = Владелец;
		ИначеЕсли мсВсеВладельцы.Количество() = 1 Тогда 
			ТекВладелец = мсВсеВладельцы[0];
		Иначе 
			Возврат;
		КонецЕсли;
	Иначе
		ТекВладелец = ТекДанные.Владелец;	
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСоСканераЗавершение", ЭтаФорма);
	
	ПараметрыДобавления = РаботаСФайламиКлиент.ПараметрыДобавленияСоСканера();
	ПараметрыДобавления.Вставить("ОбработчикРезультата", Оповещение);
	ПараметрыДобавления.Вставить("ВладелецФайла", ТекВладелец);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
	ПараметрыДобавления.Вставить("ЭтоФайл", Истина);
	РаботаСФайламиСлужебныйКлиент.ДобавитьСоСканера(ПараметрыДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоСканераЗавершение(Результат, ДопПараметры) Экспорт
	
	Элементы.СписокФайлов.Обновить();
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") 
		И ЗначениеЗаполнено(Результат)
	Тогда
		Оповещение = Новый ОписаниеОповещения("ДобавитьСоСканераЗавершениеПоказаФайла", ЭтаФорма);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ",Результат);
		ОткрытьФорму("Справочник.ХранилищеДополнительнойИнформации.Форма.ИзображениеСоСканера", ПараметрыОткрытия, ЭтаФорма,,,,Оповещение);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ТекстОшибки")
			И ЗначениеЗаполнено(Результат.ТекстОшибки)
	Тогда
		ПоказатьПредупреждение(,Результат.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоСканераЗавершениеПоказаФайла(Результат, ДопПараметры) Экспорт
	
	Элементы.СписокФайлов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКлиентуПоЭлектроннойПочте(Команда)
	
	Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбрано ни одного файла'"), 15, НСтр("ru='Не удалось отправить'"));
		Возврат;
	КонецЕсли;
	
	мФайлы = Новый Массив;
	Для Каждого ВыбраннаяСтрока Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбраннаяСтрока, "ПометкаУдаления") Тогда
			ПоказатьПредупреждение(,НСтр("ru='Невозможно отправить помеченный на удаление файл!'"), 15, НСтр("ru='Не удалось отправить'"));
			Возврат;
		Иначе
			мФайлы.Добавить(ВыбраннаяСтрока);
			ОбъектФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбраннаяСтрока, "Объект");
			Если Не ЗначениеЗаполнено(ОбъектФайлов) Тогда
				ОбъектФайлов = Владелец;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтправления = ПолучитьНастройкиПисьма(мФайлы, ОбъектФайлов, Клиент);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОтправления);
	// Если при формировании параметров отправления произошла ошибка, то выводим сообщение.
	Если ПараметрыОтправления.Свойство("СообщениеОбОшибке") Тогда
		Если Не ПустаяСтрока(ПараметрыОтправления.СообщениеОбОшибке) Тогда 
			ОбщегоНазначения.СообщитьОбОшибке(ПараметрыОтправления.СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиПисьма(Файлы, Объект, Клиент)
	
	Возврат УправлениеЭлектроннойПочтой.ПолучитьПараметрыОтправкиФайловПоЭлектроннойПочте(Файлы, Объект, Клиент);
	
КонецФункции