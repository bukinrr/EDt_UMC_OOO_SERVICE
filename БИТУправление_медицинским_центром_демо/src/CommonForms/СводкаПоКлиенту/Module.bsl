#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Клиент = Параметры.Клиент;
	
	Телефон = ПолучитьТелефоныКлиента(Клиент);
	Элементы.Телефон.Видимость = ЗначениеЗаполнено(Телефон);
	
	ФИО = Клиент.Фамилия + " " + Клиент.Имя + " " + Клиент.Отчество + " ";
	НастроитьТабличныеЧастиНаСервере();
	
	// Планы лечения
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПланыЛечения) Тогда
		УстановитьВидимостьДоступностьЭлементовСпискаНазначенийНаСервере();
		ОбновитьСписокНазначенийНаСервере();
	Иначе
		Элементы.ГруппаНазначения.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьТабличныеЧастиНаКлиенте();
	ОбновитьСостояниеСчета();
	
	Если Элементы.ГруппаНазначения.Видимость Тогда
		РазвернутьСписокНазначений();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Телефон = ПолучитьТелефоныКлиента(Клиент);
	Элементы.Телефон.Видимость = ЗначениеЗаполнено(Телефон);
	
	НастроитьТабличныеЧастиНаСервере();
	
	ОбновитьСостояниеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСостояниеСчета(Команда)
	ОбновитьСостояниеСчета();
КонецПроцедуры

#Область ПланыЛечения

&НаКлиенте
Процедура ВыполнитьОбновлениеСпискаНазначений(Команда)
	
	ОбновитьСписокНазначений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛистОжиданияПоНазначению(Команда)
	
	ДанныеЗаполнения = ПолучитьДанныеЗаполненияПоНазначению();
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = CRMСервер.ПолучитьЗначенияЗаполненияДляЛистаОжиданияПоОбъекту(ДанныеЗаполнения.ПервичныйПрием);
	ПараметрыФормы = Новый Структура("Клиент, ДатаНачала", ДанныеЗаполнения.Клиент, ТекущаяДата());
		
	ПараметрыФормы.Вставить("СписокНоменклатуры", ДанныеЗаполнения.СписокНоменклатуры); 
	
	Если ДанныеЗаполнения.Свойство("ПлановаяДата")
		И ДанныеЗаполнения.ПлановаяДата <> Неопределено
	Тогда 
		ПараметрыФормы.Вставить("ПлановаяДата", ДанныеЗаполнения.ПлановаяДата);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Сотрудник")
		И ДанныеЗаполнения.Сотрудник <> Неопределено
	Тогда 
		ЗначенияЗаполнения.Вставить("Сотрудник", ДанныеЗаполнения.Сотрудник);
	КонецЕсли;
			
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ЛистОжидания.Форма.ФормаБыстрогоСоздания", ПараметрыФормы);	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуПоНазначению(Команда)
	
	ДанныеЗаполнения = ПолучитьДанныеЗаполненияПоНазначению();
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура("ДокументЗаписи, Клиент, Работы, ЛистОжидания", ДанныеЗаполнения.ДокументРегистратор, ДанныеЗаполнения.Клиент, ДанныеЗаполнения.мсДанныеДляЗаявки);
	ПараметрыЗаписи.Вставить("ДанныеЛистаОжидания", Новый Структура("ДатаНачала, ДатаОкончания, Сотрудник, Специализация", 
	ДанныеЗаполнения.ПлановаяДата, ДанныеЗаполнения.ПлановаяДата, ДанныеЗаполнения.Сотрудник));
	КалендарьПланированияКлиент.ОткрытьАктивизироватьКалендарьПланирования();
	Оповестить("НамерениеЗаписиПоДокументу", ПараметрыЗаписи, ПараметрыЗаписи.ДокументЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриемПоНазначению(Команда)
	
	ДанныеЗаполнения = ПолучитьДанныеЗаполненияПоНазначению();
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОповещениеОбновитьСписокНазначений",ЭтотОбъект);
	ЗначенияЗаполнения = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);
	ОткрытьФорму("Документ.Прием.ФормаОбъекта", ЗначенияЗаполнения,,,,,ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВыполненияНазначения(Команда)
	
	ВыделенныеСтроки = Элементы.СписокНазначений.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() <> 0 Тогда		
		ТекущиеДанные = СписокНазначений.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокНазначений.ТекущиеДанные.ДокументВыполнения.Количество() = 1 Тогда
		ДокументВыполнения = Элементы.СписокНазначений.ТекущиеДанные.ДокументВыполнения[0].Значение;
		ОткрытьЗначение(ДокументВыполнения);
	Иначе
		ВыбранноеЗначение = ВыбратьИзМеню(Элементы.СписокНазначений.ТекущиеДанные.ДокументВыполнения);
		Если ВыбранноеЗначение <> Неопределено Тогда
			ОткрытьЗначение(ВыбранноеЗначение.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФИОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ОткрытьЗначение(Клиент);
	
КонецПроцедуры

&НаКлиенте
Процедура БудущиеЗаявкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаОбъект = ПолучениеИзХранилища(Расшифровка, ДанныеРасшифровкиЗ);
	ОткрытьЗначение(СсылкаНаОбъект);
	
 КонецПроцедуры
 
 &НаКлиенте
Процедура ПосещенияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	СсылкаНаОбъект=ПолучениеИзХранилища(Расшифровка, ДанныеРасшифровкиП);
	ОткрытьЗначение(СсылкаНаОбъект);
	
КонецПроцедуры

#Область ПланыЛечения

&НаКлиенте
Процедура СписокНазначенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ЕстьПравоДоступа("Просмотр", "Документ.Прием", ОбщегоНазначения.ТекущийПользователь()) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.СписокНазначений.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() <> 0 Тогда		
		ТекущиеДанные = СписокНазначений.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	Иначе
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Назначение = ТекущиеДанные.Назначение;
	
	Если ТипЗнч(Назначение) = Тип("ДокументСсылка.Прием") Тогда
		ПоказатьЗначение(, Назначение);	
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьТелефоныКлиента(Клиент)
	
	ТелефоныСтрокой = "";
	
	ТелефоныКлиента = КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Клиент, Перечисления.ТипыКонтактнойИнформации.Телефон,,Ложь);
	Для Каждого Телефон Из ТелефоныКлиента Цикл
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТелефоныСтрокой, Телефон, ", ");
	КонецЦикла;
	
	Возврат ТелефоныСтрокой;
	
КонецФункции

&НаСервере
Процедура НастроитьТабличныеЧастиНаСервере()
	
	БудущиеЗаявки.Очистить();
	Посещения.Очистить();
	
	ДанныеРасшифровкиЗ = ЗаполнениеТабличногоДокумента(Отчеты.РасписаниеКлиента.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"), БудущиеЗаявки, "СводкаПоКлиенту", "Клиент", Ложь, Истина);
	ДанныеРасшифровкиП = ЗаполнениеТабличногоДокумента(Отчеты.ПосещенияКлиентов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"), Посещения, "ПоДатеПосещения", "Клиент", Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнениеТабличногоДокумента(СКД, ТабДокВывода, НаименованиеОтчета, ПКД, СоздатьОтбор, БудЗаявки)
	
	Перем ДанныеРасшифровки;
	
	ТабДок = Новый ТабличныйДокумент;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	
	СтруктураВариантов = Новый Структура;
	ВариантыНастроек = СКД.ВариантыНастроек;
	
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Если Вариант.Имя = НаименованиеОтчета Тогда
			Настройки = Вариант.Настройки;
		КонецЕсли;
	КонецЦикла;
	
	Если СоздатьОтбор Тогда
		ДобавитьОтборОтчета(Настройки, ПКД,Клиент,ВидСравненияКомпоновкиДанных.Равно); 
	Иначе
		Для Каждого Отбор Из Настройки.Отбор.Элементы Цикл
			Если Строка(Отбор.ЛевоеЗначение)="Клиент" Тогда
				Отбор.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				Отбор.ПравоеЗначение = Клиент;
				Отбор.Использование = Истина;
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если БудЗаявки Тогда
		ДобавитьОтборОтчета(Настройки,"ВремяНачала",ТекущаяДата(),ВидСравненияКомпоновкиДанных.БольшеИлиРавно); 
	КонецЕсли;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокВывода);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеРасшифровкиЗначение = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);
	Возврат ДанныеРасшифровкиЗначение;
	
КонецФункции

&НаСервере
Процедура ДобавитьОтборОтчета(Настройки, ПКД, ЗначПоляОтбора, ВидСравнения)
	
	НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПКД);
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ВидСравнения = ВидСравнения;
	НовыйОтбор.ПравоеЗначение = ЗначПоляОтбора;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТабличныеЧастиНаКлиенте()
	
	РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент", Клиент, События, ВидСравненияКомпоновкиДанных.Равно); 
	РаботаСФормамиКлиент.УстановитьОтборСписка("Объект", Клиент, Задачи, ВидСравненияКомпоновкиДанных.Равно); 
	РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент", Клиент, ЛистыОжидания, ВидСравненияКомпоновкиДанных.Равно); 
	РаботаСФормамиКлиент.УстановитьОтборСписка("Выполнен", Ложь, ЛистыОжидания, ВидСравненияКомпоновкиДанных.Равно); 
	РаботаСФормамиКлиент.УстановитьОтборСписка("ДатаОкончанияПлан", ТекущаяДата(), ЛистыОжидания, ВидСравненияКомпоновкиДанных.БольшеИлиРавно); 
	РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент", Клиент, ОбратнаяСвязь, ВидСравненияКомпоновкиДанных.Равно); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеСчета()
	
	РаботаСФормамиКлиентСервер.ПолучитьОписаниеВзаиморасчетов(Клиент,, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучениеИзХранилища(Расшифровка, Данные)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Данные);
	Ссылка = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение; 
	
	Возврат Ссылка;
	
КонецФункции

#Область ПланыЛечения

&НаКлиенте
Функция ПолучитьДанныеЗаполненияПоНазначению()
	
	мсДанныеДляЗаявки = Новый Массив;
	ПлановаяДата = Неопределено;
	СписокНоменклатуры = Новый СписокЗначений;
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("Клиент", Клиент);
	ДанныеЗаполнения.Вставить("мсДанныеДляЗаявки", мсДанныеДляЗаявки);
	ДанныеЗаполнения.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ДанныеЗаполнения.Вставить("Работы", Новый Массив);
	
	Если ПлановаяДата = Неопределено Тогда 
		ПлановаяДата = НачалоДня(ТекущаяДата()) + ОбщегоНазначения.ВремяВСекунды(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы"));
	Иначе
		ПлановаяДата = Макс(ПлановаяДата, НачалоДня(ПлановаяДата) + ОбщегоНазначения.ВремяВСекунды(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВремяНачалаРаботы")));
	КонецЕсли;
	ДанныеЗаполнения.Вставить("ПлановаяДата", ПлановаяДата);
	
	ВыделенныеСтроки = Элементы.СписокНазначений.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ДанныеЗаполнения.Вставить("ДокументРегистратор", ПредопределенноеЗначение("Документ.Прием.ПустаяСсылка"));
		ДанныеЗаполнения.Вставить("ПервичныйПрием", ПредопределенноеЗначение("Документ.Прием.ПустаяСсылка"));
		ДанныеЗаполнения.Вставить("Сотрудник", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ТекущиеДанные = СписокНазначений.НайтиПоИдентификатору(ВыделенныеСтроки[0]);	
		
	Если ТипЗнч(ТекущиеДанные.Назначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеЗаполнения.Вставить("ПервичныйПрием", ТекущиеДанные.ПолучитьРодителя().Назначение);
	Иначе
		ДанныеЗаполнения.Вставить("ПервичныйПрием", ТекущиеДанные.Назначение);
	КонецЕсли;
	
	Если Элементы.СписокНазначений.ВыделенныеСтроки.Количество() > 1 Тогда
		ДанныеЗаполнения.Вставить("ДокументРегистратор", ДанныеЗаполнения.ПервичныйПрием);
	Иначе
		ДанныеЗаполнения.Вставить("ДокументРегистратор", ТекущиеДанные.ДокументРегистратор);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("МедицинскаяКарта", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения.ДокументРегистратор, "МедицинскаяКарта"));
	
	Для Каждого ИдентификаторСтрокиДерева Из Элементы.СписокНазначений.ВыделенныеСтроки Цикл
		
		ЭлементГруппы = СписокНазначений.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
		Если ЭлементГруппы = Неопределено 
			Или ТипЗнч(ЭлементГруппы.Назначение) <> Тип("СправочникСсылка.Номенклатура")
		Тогда 
			Продолжить;
		КонецЕсли;

		ВидНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементГруппы.Назначение, "ВидНоменклатуры");
		Если ВидНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Материал") Тогда
			Продолжить;
		КонецЕсли;
		
		СписокНоменклатуры.Добавить(ЭлементГруппы.Назначение);
		СтруктураУслуги = Новый Структура("Номенклатура, Количество", ЭлементГруппы.Назначение, 1);
		ДанныеЗаполнения.Работы.Добавить(СтруктураУслуги);
		
		ДанныеДляЗаявки = Новый Структура;
		ДанныеДляЗаявки.Вставить("Номенклатура", ЭлементГруппы.Назначение);
		мсДанныеДляЗаявки.Добавить(ДанныеДляЗаявки);
		
		Если ЗначениеЗаполнено(ЭлементГруппы.Дата) И ПлановаяДата = Неопределено Тогда 
			ПлановаяДата = ЭлементГруппы.Дата;
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗаполнитьДанныеЗаполненияПоНазначениюНаСервере(ДанныеЗаполнения);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеЗаполненияПоНазначениюНаСервере(ДанныеЗаполнения)
	
	МедицинскаяКарта = ДанныеЗаполнения.ДокументРегистратор.МедицинскаяКарта;
	Если ЗначениеЗаполнено(МедицинскаяКарта) Тогда
		ДанныеЗаполнения.Вставить("МедицинскаяКарта", МедицинскаяКарта);
	КонецЕсли;

	Сотрудник = Неопределено;
	Если НЕ (ДанныеЗаполнения.ДокументРегистратор.Врач.Архив
		Или ДанныеЗаполнения.ДокументРегистратор.Врач.ПометкаУдаления)
	Тогда
		Сотрудник = ДанныеЗаполнения.ДокументРегистратор.Врач;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Сотрудник)
		И ДанныеЗаполнения.ДокументРегистратор <> ДанныеЗаполнения.ПервичныйПрием
	Тогда
		Если НЕ (ДанныеЗаполнения.ПервичныйПрием.Врач.Архив
			Или ДанныеЗаполнения.ПервичныйПрием.Врач.ПометкаУдаления)
		Тогда
			Сотрудник = ДанныеЗаполнения.ПервичныйПрием.Врач;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ДанныеЗаполнения.Вставить("Сотрудник", Сотрудник)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНазначений()
	СписокНазначений.ПолучитьЭлементы().Очистить();
	ОбновитьСписокНазначенийНаСервере();
	РазвернутьСписокНазначений();
КонецПроцедуры
 
&НаСервере
Процедура ОбновитьСписокНазначенийНаСервере()
	СписокНазначений.ПолучитьЭлементы().Очистить();
	ЗаполнитьНазначения(Клиент, СписокНазначений);
	ЗаполнитьДанныеВыполненияНазначений(СписокНазначений);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОбновитьСписокНазначений(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСписокНазначений();		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСписокНазначений()
	ГруппыНазначений = СписокНазначений.ПолучитьЭлементы();
	Для Каждого ГруппаНазначений Из ГруппыНазначений Цикл
		Элементы.СписокНазначений.Развернуть(ГруппаНазначений.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначения(Клиент, СписокНазначений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Прием.Ссылка КАК ПервичныйПрием
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.Клиент = &Клиент
	               |	И Прием.ЭтоПервичный
	               |	И НЕ Прием.ПометкаУдаления
	               |	И Прием.Проведен
	               |	И НЕ Прием.Закрыт
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Прием.Дата,
	               |	Прием.Номер";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Дерево = РеквизитФормыВЗначение("СписокНазначений");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТаблицаПланаЛечения = ДокументыПриемаСервер.ПолучитьНазначенияПриема(Выборка.ПервичныйПрием);	
		ТаблицаПланаЛечения.Сортировать("ВидНазначения, Номенклатура"); 
		Если ТаблицаПланаЛечения.Количество() > 0 Тогда
			
			СтрокаДереваПервичныйПрием = Дерево.Строки.Добавить();
			СтрокаДереваПервичныйПрием.Назначение = Выборка.ПервичныйПрием;
			
			Для Каждого Назначение Из ТаблицаПланаЛечения Цикл
				ЭлементГруппы = СтрокаДереваПервичныйПрием.Строки.Добавить();
				ЭлементГруппы.ВидНазначения = Назначение.ВидНазначения;
				ЭлементГруппы.ИдентификаторНазначения = Назначение.ИдентификаторЭлемента;
				ЭлементГруппы.Назначение = Назначение.Номенклатура;
				ЭлементГруппы.Дата = Назначение.Дата;
				ЭлементГруппы.ДатаНачалаБезВремени = ЭлементГруппы.Дата;
				ЭлементГруппы.Сотрудник = Назначение.Сотрудник;
				ЭлементГруппы.ДокументВыполнения = Назначение.СписокРегистраторов;
				ЭлементГруппы.Количество = Назначение.Количество;
				ЭлементГруппы.Факт = Назначение.Факт;
				ЭлементГруппы.ДокументРегистратор = Назначение.ДокументРегистратор;
				ЭлементГруппы.Комментарий = Назначение.Комментарий;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Назначение, "ДатаОкончания") Тогда
					ЭлементГруппы.ДатаОкончания		= Назначение.ДатаОкончания;
					ЭлементГруппы.Дозировка			= Назначение.Дозировка;
					ЭлементГруппы.ПриемовВДень		= Назначение.ПриемовВДень;
					ЭлементГруппы.ЕдиницаИзмерения	= Назначение.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "СписокНазначений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыполненияНазначений(СписокНазначений)
	
	ИдентификаторыПозицийПланаЛечения = Новый Массив;
	Для Каждого ЭлементВерхнегоУровня Из СписокНазначений.ПолучитьЭлементы() Цикл
		Для Каждого ЭлементПланаЛечения Из ЭлементВерхнегоУровня.ПолучитьЭлементы() Цикл
			ИдентификаторыПозицийПланаЛечения.Добавить(Новый УникальныйИдентификатор(ЭлементПланаЛечения.ИдентификаторНазначения));
		КонецЦикла;
	КонецЦикла;
	
	Если ИдентификаторыПозицийПланаЛечения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификтаторы", ИдентификаторыПозицийПланаЛечения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента,
	|	СУММА(ВЫБОР
	|			КОГДА ВыполнениеПланаЛечения.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВыполнениеПланаЛечения.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВыполнениеПланаЛечения.Регистратор
	|ИЗ
	|	РегистрСведений.ВыполнениеПланаЛечения КАК ВыполнениеПланаЛечения
	|ГДЕ ВыполнениеПланаЛечения.ИдентификаторЭлемента В (&Идентификтаторы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполнениеПланаЛечения.ИдентификаторЭлемента,
	|	ВыполнениеПланаЛечения.Регистратор";
	ТаблицаВыполнения = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("ИдентификаторЭлемента");
		
	УдалятьВыполненныеНазначения = Ложь;
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.Прием) Тогда
		УдалятьВыполненныеНазначения = Истина;
	КонецЕсли;

	КоличествоВерхнихУровней = СписокНазначений.ПолучитьЭлементы().Количество()-1;
	ЭлементыВерхнегоУровня = СписокНазначений.ПолучитьЭлементы();
	Для ИндДерево=0 По КоличествоВерхнихУровней Цикл
		
		ОбрИндДерево = КоличествоВерхнихУровней-ИндДерево;
		ЭлементВерхнегоУровня = ЭлементыВерхнегоУровня.Получить(ОбрИндДерево);
		КоличествоЭлементовПланаЛечения = ЭлементВерхнегоУровня.ПолучитьЭлементы().Количество()-1;
		ЭлементыПланаЛечения = ЭлементВерхнегоУровня.ПолучитьЭлементы();
		
		Для Инд=0 По КоличествоЭлементовПланаЛечения Цикл
			
			ОбрИнд = КоличествоЭлементовПланаЛечения-Инд;
			ЭлементПланаЛечения = ЭлементыПланаЛечения.Получить(ОбрИнд);
			
			Отбор.ИдентификаторЭлемента = Новый УникальныйИдентификатор(ЭлементПланаЛечения.ИдентификаторНазначения);
			
			КоличествоВыполнено = 0;
			
			СписокРегистраторов = Новый СписокЗначений;
			СтрокиТаблицыВыполнения = ТаблицаВыполнения.НайтиСтроки(Отбор);
			Для Каждого СтрокаВыполнения Из СтрокиТаблицыВыполнения Цикл
				
				СписокРегистраторов.Добавить(СтрокаВыполнения.Регистратор);
				КоличествоВыполнено = КоличествоВыполнено + СтрокаВыполнения.Количество;
				
			КонецЦикла;
			
			ЭлементПланаЛечения.Факт = КоличествоВыполнено;
			
			Если УдалятьВыполненныеНазначения
				И ЭлементПланаЛечения.Факт >= ЭлементПланаЛечения.Количество	
			Тогда
				ЭлементыПланаЛечения.Удалить(ОбрИнд);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭлементВерхнегоУровня.ПолучитьЭлементы().Количество() = 0 Тогда
			ЭлементыВерхнегоУровня.Удалить(ОбрИндДерево);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовСпискаНазначенийНаСервере()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.Заявка) Тогда
		Элементы.СписокНазначенийСоздатьЗаявку.Видимость = Ложь;
		Элементы.СписокНазначенийСоздатьЗаявку.Доступность = Ложь;
	КонецЕсли;
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ЛистОжидания) Тогда
		Элементы.СписокНазначенийСоздатьЛистОжидания.Видимость = Ложь;
		Элементы.СписокНазначенийСоздатьЛистОжидания.Доступность = Ложь;
	КонецЕсли;
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.Прием) Тогда
		Элементы.СписокНазначенийСоздатьПрием.Видимость = Ложь;
		Элементы.СписокНазначенийСоздатьПрием.Доступность = Ложь;
	КонецЕсли;
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.Прием) Тогда
		Элементы.СписокНазначенийКомандаПросмотрВыполнения.Видимость = Ложь;
		Элементы.СписокНазначенийКомандаПросмотрВыполнения.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти