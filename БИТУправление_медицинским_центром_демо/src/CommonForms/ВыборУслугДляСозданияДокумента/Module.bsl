#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата = ТекущаяДата();
	
	УстановитьРежимФормы();
	ОбновитьДанныеТаблиц();
	
	Если ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер") <> Неопределено Тогда
		Элементы.Режим.СписокВыбора.Добавить("ЗаборМедосмотры",НСтр("ru='Медосмотры'"));	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ОбновитьТаблицаКлиентНоменклатура(Клиент);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("Режим", Режим);
	РаботаСФормамиСервер.СохранитьНастройкиФормы(НастройкиФормы, "ВыборУслугДляСозданияДокумента");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		СтрокаНоменклатуры.Выбрана = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		СтрокаНоменклатуры.Выбрана = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗабор(Команда)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ТекущийКлиент = Клиент;
	Иначе
		ТекущиеДанные = Элементы.ТаблицаКлиенты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущийКлиент = ТекущиеДанные.Клиент;
	КонецЕсли;
	
	Данные = ДанныеВыбранныхПозиций(ТекущийКлиент);
	
	Если Данные.ВыбранныеПозиции.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбрана номенклатура!'"), 30);
	Иначе
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",
			Новый Структура("Клиент, Анализы, ВидОперации", Данные.Клиент, Данные.ВыбранныеПозиции, ПредопределенноеЗначение("Перечисление.ВидыОперацийАнализов.Забор")));
		ОткрытьФорму("Документ.ДействияНадАнализами.ФормаОбъекта", ПараметрыФормы, ЭтаФорма.ВладелецФормы);
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАнализы(Команда)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ТекущийКлиент = Клиент;
	Иначе
		ТекущиеДанные = Элементы.ТаблицаКлиенты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущийКлиент = ТекущиеДанные.Клиент;
	КонецЕсли;
	
	Данные = ДанныеВыбранныхПозиций(ТекущийКлиент);
	
	Если Данные.ВыбранныеПозиции.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбраны анализы!'"), 30);
	Иначе
		ОповеститьОВыборе(Данные.ВыбранныеПозиции);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПродажу(Команда)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ТекущийКлиент = Клиент;
	Иначе
		ТекущиеДанные = Элементы.ТаблицаКлиенты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущийКлиент = ТекущиеДанные.Клиент;
	КонецЕсли;
	
	Данные = ДанныеВыбранныхПозиций(ТекущийКлиент);
	Данные.Вставить("Работы", Данные.ВыбранныеПозиции);
	
	// Заявки выполненных работ
	Заявки = Новый Массив;
	Для Каждого СтрокаВыполнения Из Данные.ВыбранныеПозиции Цикл
		Если ТипЗнч(СтрокаВыполнения.ДополнительнаяИнформация) = Тип("Структура")
			И СтрокаВыполнения.ДополнительнаяИнформация.Свойство("Заявка")
			И Заявки.Найти(СтрокаВыполнения.ДополнительнаяИнформация.Заявка) = Неопределено
		Тогда
			Заявки.Добавить(СтрокаВыполнения.ДополнительнаяИнформация.Заявка);
		КонецЕсли;
	КонецЦикла;
	Если Заявки.Количество() <> 0 Тогда
		Данные.Вставить("ЗаявкиОснования", Заявки);
	КонецЕсли;
	
	Данные.Удалить("ВыбранныеПозиции");
	
	// Открытие документа продажи
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Данные);
	ПараметрыФормы.Вставить("НеПроверятьПовторОУпоЗаявке", Истина);
	ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта", ПараметрыФормы);
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	Перем ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		ТекущиеДанные = Элементы.ТаблицаКлиенты.ТекущиеДанные;
	КонецЕсли;
	
	ОбновитьДанныеТаблиц();
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ОбновитьТаблицаКлиентНоменклатура(Клиент);
	Иначе
		Если ТекущиеДанные <> Неопределено 
			И ЗначениеЗаполнено(ТекущиеДанные.Клиент)
		Тогда
			мсСтр = ТаблицаКлиенты.НайтиСтроки(Новый Структура("Клиент", ТекущиеДанные.Клиент));
			Если мсСтр.Количество() <> 0 Тогда
				Элементы.ТаблицаКлиенты.ТекущаяСтрока = мсСтр[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		ИначеЕсли ТаблицаКлиенты.Количество() = 1 Тогда
			Элементы.ТаблицаКлиенты.ТекущаяСтрока = ТаблицаКлиенты[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаКлиентыПриАктивизацииСтроки(Элемент)
	
	ТаблицаНоменклатуры.Очистить();
	
	ТекущиеДанные = Элементы.ТаблицаКлиенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТаблицаКлиентНоменклатура(ТекущиеДанные.Клиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицаКлиентНоменклатура(ТекущийКлиент)
	
	ТаблицаНоменклатуры.Очистить();
	НайденныеСтроки = ТаблицаКлиентНоменклатура.НайтиСтроки(Новый Структура("Клиент", ТекущийКлиент));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаНоменклатуры = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, НайденнаяСтрока);
		СтрокаНоменклатуры.Выбрана = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыборДаты_Завершение", ЭтотОбъект);
	ОткрытьФорму("Документ.Прием.Форма.ФормаВводДаты", Новый Структура("Дата, ВозвращатьДату", Дата, Истина),ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДаты_Завершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		Дата = РезультатВыбора;
		ОбновитьДанныеТаблиц();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ДанныеВыбранныхПозиций(Клиент)
	
	ВыбранныеПозиции = Новый Массив;
	
	ВыбранныеСтрокиНаФорме = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Выбрана", Истина));
	Отбор = Новый Структура("Клиент, Номенклатура, Сотрудник");
	
	Для Каждого СтрокаНоменклатуры Из ВыбранныеСтрокиНаФорме Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНоменклатуры);
		Отбор.Клиент = Клиент;
		
		СтрокаРезультата = Новый Структура("Номенклатура, Количество, Сотрудник, Комментарий, ДополнительнаяИнформация, ИД, Клиент");
		СтрокаНоменклатурыКлиент = ТаблицаКлиентНоменклатура.НайтиСтроки(Отбор)[0];
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаНоменклатурыКлиент);
		СтрокаРезультата.Клиент = Клиент;
		ВыбранныеПозиции.Добавить(СтрокаРезультата);
		
	КонецЦикла;
	
	Данные = Новый Структура("Клиент, ВыбранныеПозиции", Клиент, ВыбранныеПозиции);
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура УстановитьРежимФормы()
	
	Клиент = Параметры.Клиент;
	Элементы.Клиент.Видимость = ЗначениеЗаполнено(Клиент);
	Элементы.ТаблицаКлиенты.Видимость = Не ЗначениеЗаполнено(Клиент);
	
	Если ЗначениеЗаполнено(Параметры.Режим) Тогда
		Режим = Параметры.Режим;
	Иначе
		Режим = РаботаСФормамиСервер.ПолучитьНастройкуФормы("ВыборУслугДляСозданияДокумента", "Режим", Ложь);
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ИсключаемыеАнализы) = Тип("Массив") Тогда
		ИсключаемыеАнализы.ЗагрузитьЗначения(Параметры.ИсключаемыеАнализы);		
	КонецЕсли;
	
	Команда = Команды.Найти("СоздатьЗабор");
	
	Если Лев(Режим, СтрДлина("Забор")) = "Забор" Тогда
		Заголовок = НСтр("ru='Создать забор анализов'");
	ИначеЕсли Режим = "Выбор" Тогда
		Заголовок = НСтр("ru='Выбрать анализы'"); 
		Команда.Действие = "ВыбратьАнализы";
		Режим = РаботаСФормамиСервер.ПолучитьНастройкуФормы("ВыборУслугДляСозданияДокумента", "Режим", Ложь);
	Иначе
		Заголовок = НСтр("ru='Оформить продажу'");
		Команда.Действие = "СоздатьПродажу";
		Элементы.Режим.Видимость = Ложь;
	КонецЕсли;
	
	Команда.Заголовок = Заголовок;
	УстановитьЗаголовокФормы(Заголовок);
	
	Если ТипЗнч(Параметры.Анализы) = Тип("Массив") Тогда
		Режим = "ЗаданныйПеречень";
		Для Каждого СтрокаАнализа Из Параметры.Анализы Цикл
			НоваяСтрокаТЧ = ТаблицаКлиентНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаАнализа);
		КонецЦикла;
		Элементы.ФормаОбновитьДанные.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы(Заголовок)
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = Заголовок;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблиц()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныеДанные = Новый Массив;
	Источники = Новый Массив;
	
	РежимПродажа = Ложь;
	
	Если Режим = "ЗаданныйПеречень" Тогда
		ИсходныеДанные.Добавить(ТаблицаКлиентНоменклатура.Выгрузить());
	Иначе
		// Режимы забора анализа
		Если Режим = "ЗаборПоПродажам" Тогда
			Источники.Добавить("ЗаборПоПродажам");
			
		ИначеЕсли Режим = "ЗаборНазначенияЗаСегодня"
			Или	  Режим = "ЗаборНазначенияНеВыполненные"
			Или	  Режим = "ЗаборМедосмотры"
		Тогда	
			Источники.Добавить(Режим);
			
		// Режимы продажи
		ИначеЕсли Режим = "ПродажаАнализов" Тогда
			Источники.Добавить("ЗабранныеАнализы");
			РежимПродажа = Истина;
			
		ИначеЕсли Режим = "Продажа" Тогда
			Источники.Добавить("ВыполненныеПриемы");
			Источники.Добавить("ЗабранныеАнализы");
			Источники.Добавить("ВыполненныеВакцинации");
			РежимПродажа = Истина;
			
		ИначеЕсли Режим = "ПродажаВакцинаций" Тогда
			Источники.Добавить("ВыполненныеВакцинации");
			РежимПродажа = Истина;
			
		КонецЕсли;
			
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("Дата", ?(ЗначениеЗаполнено(Дата), Дата, НачалоДня(ТекущаяДата())));
		ПараметрыВыбора.Вставить("Клиент", Клиент);
		
		Если РежимПродажа Тогда
			СформироватьДанныеИсточниковРежимПродажа(ИсходныеДанные, ПараметрыВыбора, Источники);
		Иначе
			СформироватьДанныеИсточников(ИсходныеДанные, ПараметрыВыбора, Источники);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуНоменклатурыКлиентов(ИсходныеДанные);
	
	ОбновитьТаблицуКлиентов();
	ОбновитьВидимостьКолонокТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыКлиентов(ИсходныеДанные)
	
	ТаблицаКлиентНоменклатура.Очистить();
	ТаблицаКлиенты.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Элемент Из ИсходныеДанные Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = Элемент;
			Запрос.УстановитьПараметр("Дата", Дата);
			Если ЗначениеЗаполнено(Клиент) Тогда
				Запрос.УстановитьПараметр("Клиент", Клиент);
			КонецЕсли; 
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если ИсключаемыеАнализы.НайтиПоЗначению(Выборка.Номенклатура) <> Неопределено Тогда
					Продолжить;	
				КонецЕсли;
				СтрКН = ТаблицаКлиентНоменклатура.Добавить();
				ЗаполнитьЗначенияСвойств(СтрКН, Выборка);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Строка Из Элемент Цикл
				Если ИсключаемыеАнализы.НайтиПоЗначению(Строка.Номенклатура) <> Неопределено Тогда
					Продолжить;	
				КонецЕсли; 
				СтрКН = ТаблицаКлиентНоменклатура.Добавить();
				ЗаполнитьЗначенияСвойств(СтрКН, Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуКлиентов()
	
	ЗаполнитьТаблицуКлиентов();
	
	Если Режим = "ЗаборПоПродажам" Или Режим = "ЗаборНазначенияЗаСегодня" Тогда
		Элементы.ТаблицаКлиентыКлиент.Заголовок = НСтр("ru='Клиенты за текущий день'");
	Иначе
		Элементы.ТаблицаКлиентыКлиент.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКлиентов()
	
	ТаблицаКлиентов = ТаблицаКлиентНоменклатура.Выгрузить(, "Клиент");
	ТаблицаКлиентов.Свернуть("Клиент");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКлиентов", ТаблицаКлиентов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКлиентов.Клиент КАК Клиент
	|ПОМЕСТИТЬ Клиенты
	|ИЗ
	|	&ТаблицаКлиентов КАК ТаблицаКлиентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.Клиент КАК Клиент,
	|	Клиенты.Клиент.Представление КАК Порядок
	|ИЗ
	|	Клиенты КАК Клиенты";	
	
	Клиенты = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(Клиенты, "ТаблицаКлиенты");
	
	ТаблицаКлиенты.Сортировать("Порядок");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКолонокТаблиц()
	
	// Настраиваем видимость доп. колонок исходя из наличия заполенных значений
	Элементы.ТаблицаНоменклатурыСотрудник.Видимость		 = ОтборЧтоТоОтбирает(ТаблицаКлиентНоменклатура, "Сотрудник",   Справочники.Сотрудники.ПустаяСсылка());
	Элементы.ТаблицаНоменклатурыКомментарий.Видимость	 = ОтборЧтоТоОтбирает(ТаблицаКлиентНоменклатура, "Комментарий", "");
	Элементы.ТаблицаНоменклатурыКоличество.Видимость	 = ОтборЧтоТоОтбирает(ТаблицаКлиентНоменклатура, "Количество",  1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборЧтоТоОтбирает(Таблица, ИмяКолонки, ЗначениеОтбора)
	
	Отбор = Новый Структура(ИмяКолонки, ЗначениеОтбора);
	Возврат Таблица.НайтиСтроки(Отбор).Количество() <> Таблица.Количество();
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДляЗабораОплаченныхАнализов()
	
	Текст = "ВЫБРАТЬ
	  |	Номенклатура,
	  |	Клиент,
	  |	СУММА(Количество) КАК Количество
	  |ПОМЕСТИТЬ ДанныеОУ
	  |ИЗ
	  |	РегистрНакопления.Продажи КАК Продажи
	  |ГДЕ
	  |	ПЕРИОД МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	  | И Регистратор ССЫЛКА Документ.ОказаниеУслуг
	  |	И Номенклатура.Анализ
	  |
	  |СГРУППИРОВАТЬ ПО
	  |	Номенклатура,
	  |	Клиент
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	ДействияНадАнализамиИсследования.Номенклатура,
	  |	ДействияНадАнализамиИсследования.Клиент,
	  |	СУММА(1) КАК Количество
	  |ПОМЕСТИТЬ ДанныеЗабора
	  |ИЗ
	  |	Документ.ДействияНадАнализами.Исследования КАК ДействияНадАнализамиИсследования
	  |ГДЕ
	  |	НАЧАЛОПЕРИОДА(ДействияНадАнализамиИсследования.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	  |	И НЕ ДействияНадАнализамиИсследования.Ссылка.ПометкаУдаления
	  |	И ДействияНадАнализамиИсследования.Ссылка.Проведен
	  |
	  |СГРУППИРОВАТЬ ПО
	  |	ДействияНадАнализамиИсследования.Номенклатура,
	  |	ДействияНадАнализамиИсследования.Клиент
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	ДанныеОУ.Номенклатура,
	  |	ДанныеОУ.Клиент,
	  |	ДанныеОУ.Количество - ЕСТЬNULL(ДанныеЗабора.Количество, 0) КАК Количество
	  |ИЗ
	  |	ДанныеОУ КАК ДанныеОУ
	  |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗабора КАК ДанныеЗабора
	  |		ПО ДанныеОУ.Номенклатура = ДанныеЗабора.Номенклатура
	  |			И ДанныеОУ.Клиент = ДанныеЗабора.Клиент
	  |ГДЕ
	  |	ДанныеОУ.Количество - ЕСТЬNULL(ДанныеЗабора.Количество, 0) > 0";
	Если ЗначениеЗаполнено(Клиент) Тогда
		Текст = Текст + " И ДанныеОУ.Клиент = &Клиент";
	КонецЕсли;
	Текст = Текст + " УПОРЯДОЧИТЬ ПО
	  |	ДанныеОУ.Клиент.Наименование";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура СформироватьДанныеИсточников(ИсходныеДанные, ПараметрыВыбора, Источники = Неопределено)
	
	#Область ЗаборАнализа // Источники лабораторных анализов к забору.
	
	Если Источники.Найти("ЗаборПоПродажам") <> Неопределено Тогда // Проданные анализы за сегодня.
		ТекстЗапроса = ПолучитьТекстЗапросаДляЗабораОплаченныхАнализов();
		ИсходныеДанные.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если Источники.Найти("ЗаборНазначенияЗаСегодня") <> Неопределено Тогда
		ТаблицаДанных = ДокументыПриемаСервер.НазначенияПриемов(ПараметрыВыбора);
		ИсходныеДанные.Добавить(ТаблицаДанных);
	КонецЕсли;
	
	Если Источники.Найти("ЗаборНазначенияНеВыполненные") <> Неопределено Тогда
		ЧислоДнейГоризонта = ГоризонтНазначенияНеВыполненные(ЗначениеЗаполнено(Клиент)); // Фиксация интервала времени.
		ПараметрыВыбора.Вставить("Дата", ПараметрыВыбора.Дата - ЧислоДнейГоризонта * 60 * 60 * 24);
		
		ТаблицаДанных = ДокументыПриемаСервер.НазначенияПриемов(ПараметрыВыбора);
		ИсходныеДанные.Добавить(ТаблицаДанных);
	КонецЕсли;
	
	Если Источники.Найти("ЗаборМедосмотры") <> Неопределено	Тогда
		МодульМедосмотрыСервер = ДопСерверныеФункции.ОбщийМодуль("МедосмотрыСервер");
		Если МодульМедосмотрыСервер <> Неопределено Тогда
			ТаблицаДанных = МодульМедосмотрыСервер.НазначенияАнализыМедосмотров(ПараметрыВыбора);
			ИсходныеДанные.Добавить(ТаблицаДанных);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеИсточниковРежимПродажа(ИсходныеДанные, ПараметрыВыбора, Источники = Неопределено)
	
	// Все источники должны быть таблицами значений.
	
	// Документы приема: выполненные услуги.
	Если Источники.Найти("ВыполненныеПриемы") <> Неопределено
		И Метаданные.Документы.Найти("Прием") <> Неопределено
		И УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ПостоплатаПоПриемамИспользуется") = Истина
	Тогда
		ТаблицаДанныхПриемы = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.Прием").ПолучитьДанныеВыполненияДляПродажи(ПараметрыВыбора);
	Иначе
		ТаблицаДанныхПриемы = ТаблицаКлиентНоменклатура.Выгрузить(Новый Массив);
	КонецЕсли;
	
	// Анализы по постоплате
	Если Источники.Найти("ЗабранныеАнализы") <> Неопределено
		И Метаданные.Документы.Найти("ДействияНадАнализами") <> Неопределено
		И УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ИспользоватьЛабораторныеИсследования") = Истина
		И УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ЛабораторияПоПостоплатеПрименяется") = Истина
	Тогда
		ТаблицаДанных = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ДействияНадАнализами").ПолучитьДанныеВыполненияДляПродажи(ПараметрыВыбора);
		ИсходныеДанные.Добавить(ТаблицаДанных);
	КонецЕсли;
			
	// Вакцинации по постоплате не на основании приёма
	Если Источники.Найти("ВыполненныеВакцинации") <> Неопределено
		И УправлениеНастройкамиПереопределяемый.ПолучитьПараметрУчета("ИспользоватьВакцинации") = Истина
		И Метаданные.ОбщиеМодули.Найти("Вакцинации") <> Неопределено
	Тогда
		ОбщийМодуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Вакцинации");
		ТаблицаДанных = ОбщийМодуль.ПолучитьДанныеДляПродажиПоВакцинациям(ПараметрыВыбора);
		ИсходныеДанные.Добавить(ТаблицаДанных);
	КонецЕсли;
	
	// Убираем дубли, если услуга пришла и из приёма, и из другого источника (приём приоритетнее).
	ЕдинаяТаблицаВыполнения = ИсключитьДублиИзРазныхИсточниковВыполнения(ТаблицаДанныхПриемы, ИсходныеДанные);
	Для Каждого СтрокаВыполнения Из ЕдинаяТаблицаВыполнения Цикл
		Валидатор = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		СтрокаВыполнения.Сотрудник = Валидатор.ПривестиЗначение(СтрокаВыполнения.Сотрудник);
	КонецЦикла;
		
	// Убираем продажи и отдаем результат.		
	ТаблицаДанных = ВычестьПродажиИзВыполнения(ЕдинаяТаблицаВыполнения, ПараметрыВыбора); // Здесь ТаблицаДанныхПриемы - уже единая таблица всех выполнений с исключенными дублями одной услуги в разных источниках.
	
	ИсходныеДанные.Очистить();
	ИсходныеДанные.Добавить(ТаблицаДанных);
	
КонецПроцедуры

&НаСервере
Функция ИсключитьДублиИзРазныхИсточниковВыполнения(ТаблицаДанныхПриемы, ИсходныеДанныеПрочихИсточников)
	
	// Объединение прочих источников в одну таблицу.
	ТаблицаПрочиеИсточники = ТаблицаДанныхПриемы.СкопироватьКолонки();
	Для Каждого ТаблицаИсточник Из ИсходныеДанныеПрочихИсточников Цикл
		Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПрочиеИсточники.Добавить(), СтрокаИсточник);
		КонецЦикла;
	КонецЦикла;
	ОбщегоНазначения.СвернутьТаблицуЗначений(ТаблицаПрочиеИсточники, "Количество");
	
	// Исключени из строк прочих источников тех, что дублируются приёмами.
	СтрокиПрочихНаУдаление = Новый Массив;
	
	Отборы = Новый Массив;
	Отборы.Добавить(Новый Структура("Клиент, Номенклатура, Сотрудник"));
	Отборы.Добавить(Новый Структура("Клиент, Номенклатура"));
	Для Каждого Отбор Из Отборы Цикл
		Для Каждого СтрокаДанныхПриемов Из ТаблицаДанныхПриемы Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанныхПриемов);
			СтрокиПрочих = ТаблицаПрочиеИсточники.НайтиСтроки(Отбор);
			
			ЛимитЗачета = СтрокаДанныхПриемов.Количество;
			СтрокиПрочихНаУдаление.Очистить();
			КоличествоЗачтенное = 0;
			
			Для Каждого СтрокаПрочегоИсточника Из СтрокиПрочих Цикл
				Если СтрокиПрочихНаУдаление.Найти(СтрокаПрочегоИсточника) <> Неопределено Тогда
					Продолжить; // Уже исключена была.
				КонецЕсли;
					
				КоличествоЗачтенное = Мин(ЛимитЗачета, СтрокаПрочегоИсточника.Количество);
				Если КоличествоЗачтенное > 0 Тогда
					Если КоличествоЗачтенное = СтрокаПрочегоИсточника.Количество
						И СтрокиПрочихНаУдаление.Найти(СтрокаПрочегоИсточника) = Неопределено
					Тогда
						СтрокиПрочихНаУдаление.Добавить(СтрокаПрочегоИсточника);
					Иначе
						СтрокаПрочегоИсточника.Количество = СтрокаПрочегоИсточника.Количество - КоличествоЗачтенное;
					КонецЕсли;
					
					ЛимитЗачета = ЛимитЗачета - КоличествоЗачтенное;
				КонецЕсли;
			КонецЦикла;
			// Удаление строк прочих источников, обнуленных при удалении дублей
			Для Каждого СтрокаПрочегоИсточника Из СтрокиПрочихНаУдаление Цикл
				ТаблицаПрочиеИсточники.Удалить(СтрокаПрочегоИсточника);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Добавляем "выжившие" строки прочих источников в общую таблицу выполненных услуг.
	Для Каждого СтрокаПрочегоИсточника Из ТаблицаПрочиеИсточники Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанныхПриемы.Добавить(), СтрокаПрочегоИсточника);
	КонецЦикла;
	ОбщегоНазначения.СвернутьТаблицуЗначений(ТаблицаДанныхПриемы, "Количество");
	
	Возврат ТаблицаДанныхПриемы;
	
КонецФункции

// Таблица выполненных, услуг, на которые не оформлена продажа
&НаСервере
Функция ВычестьПродажиИзВыполнения(ЕдинаяТаблицаВыполнения, ПараметрыВыбора)
	
	ПараметрыПоискаПродаж = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбора);
	ПараметрыПоискаПродаж.Вставить("Номенклатура", ЕдинаяТаблицаВыполнения.ВыгрузитьКолонку("Номенклатура"));
	ПараметрыПоискаПродаж.Вставить("Номенклатура", ЕдинаяТаблицаВыполнения.ВыгрузитьКолонку("Клиент"));
	
	Продажи = РегистрыНакопления.Продажи.ПолучитьПродажиКороткогоПериода(ПараметрыВыбора);
	
	// Сначала ищем по точному совпадению до сотрудника. 
	// Далее - проход по пустым сотрудникам в ЕдинаяТаблицаВыполнения.
	// Далее - по любому совпадению Клиент + Номенклатура.
	Отборы = Новый Массив;
	Отборы.Добавить(Новый Структура("Отбор", Новый Структура("Клиент, Номенклатура, Сотрудник")));
	Отборы.Добавить(Новый Структура("Отбор, ОтборБазовойТаблицы", Новый Структура("Клиент, Номенклатура"),
																  Новый Структура("Сотрудник", Справочники.Сотрудники.ПустаяСсылка())));
	Отборы.Добавить(Новый Структура("Отбор", Новый Структура("Клиент, Номенклатура")));
	
	СтрокиВыполненияНаУдаление = Новый Массив;
	
	Для Каждого ОписаниеОтбора Из Отборы Цикл
		Для Каждого СтрокаВыполнения Из ЕдинаяТаблицаВыполнения Цикл
			
			// Отбор к строке ЕдинаяТаблицаВыполнения (хотим засчитывать в первую очередь строки с пустым сотрудником, если отбора идентичного сотрудника уже не нашли).
			Если ОписаниеОтбора.Свойство("ОтборБазовойТаблицы") Тогда
				ПродолжитьНадо = Ложь;
				Для Каждого кзОтбор Из ОписаниеОтбора.ОтборБазовойТаблицы Цикл
					ПродолжитьНадо = ПродолжитьНадо Или СтрокаВыполнения[кзОтбор.Ключ] <> кзОтбор.Значение;
				КонецЦикла;
				Если ПродолжитьНадо Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Продажи - поиск строка, соответствующих стркое выполнения.
			ЗаполнитьЗначенияСвойств(ОписаниеОтбора.Отбор, СтрокаВыполнения);
			СтрокиПродажи = Продажи.НайтиСтроки(ОписаниеОтбора.Отбор);
			
			Для Каждого СтрокаПродажи Из СтрокиПродажи Цикл
				КоличествоЗачтенное = Мин(СтрокаВыполнения.Количество, СтрокаПродажи.Количество);
				СтрокаВыполнения.Количество	 = СтрокаВыполнения.Количество	 - КоличествоЗачтенное;
				СтрокаПродажи.Количество	 = СтрокаПродажи.Количество		 - КоличествоЗачтенное;
			КонецЦикла;
			
			Если СтрокаВыполнения.Количество <= 0
				И СтрокиВыполненияНаУдаление.Найти(СтрокаВыполнения) = Неопределено
			Тогда
				СтрокиВыполненияНаУдаление.Добавить(СтрокаВыполнения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Удаление строк, где выполнено не больше проданного.
	Для Каждого СтрокаВыполнения Из СтрокиВыполненияНаУдаление Цикл
		ЕдинаяТаблицаВыполнения.Удалить(СтрокаВыполнения);
	КонецЦикла;
	
	Возврат ЕдинаяТаблицаВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВычестьПродажиИзДанныхВыполнения()
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГоризонтНазначенияНеВыполненные(КлиентЗаполнен)
	Возврат ?(КлиентЗаполнен, 62, 7);
КонецФункции

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	ОбновитьДанныеТаблиц();
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ОбновитьТаблицаКлиентНоменклатура(Клиент);
	Иначе
		Если ТаблицаКлиенты.Количество() = 1 Тогда
			Элементы.ТаблицаКлиенты.ТекущаяСтрока = ТаблицаКлиенты[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьДаты = Режим = "ЗаборПоПродажам" Или Режим = "ЗаборНазначенияЗаСегодня"; 
	Элементы.Дата.Видимость = ВидимостьДаты;
	Если Не ВидимостьДаты Тогда
		Дата = ТекущаяДата();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
