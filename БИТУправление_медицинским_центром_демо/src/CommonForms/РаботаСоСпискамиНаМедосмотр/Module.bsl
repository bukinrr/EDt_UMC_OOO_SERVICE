
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимПредседательМедкомиссии = РольДоступна("ПредседательМедкомиссии");
	
	ОтборСостояние = 6;
	ОтборСостояниеСправка = 6;
	УстановитьВидимостьЭлементов();
	
	ИнициализацияСписковПриСоздании();
	
	МинДлинаСтрокиПоискаКлиента = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("МинДлинаСтрокиПоискаКлиента");
	
	// Инициализация списков при создании.
	
	Если ПараметрыСеанса.УчетПоНесколькимФилиалам Тогда
		Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
	Иначе
		Элементы.Филиал.Видимость = Ложь;
	КонецЕсли;
	
	АдресДействияМедосмотраСотрудника = ПолучитьДействияМедосмотраСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтборПоФилиалу();
	ЗаполнитьОтборыСписка();
	ОтборСостояниеСправкаПриИзменении(Неопределено);
	
	// Установка параметров запроса у динамического списка периодических медосмотров.
	Список.Параметры.УстановитьЗначениеПараметра("ИспользуетсяОтборПоФИО", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ТекстОтборФИО", "");
	Список.Параметры.УстановитьЗначениеПараметра("ИспользуетсяОтборПоПрМО", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПрМО", "");
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПрохожденияМедосмотра" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыполнитьОтборПоСпискуМО" Тогда
		ОтборСписокМО = Параметр; 
		ОтборСостояние = 0;
		ОтборКлиентФИО = Неопределено;
		ОтборКонтрагент = Неопределено;
		ОтборНомерОбходногоЛиста = Неопределено;
      	Филиал = Неопределено;
		ОбновитьОтборПоФилиалу();
		ЗаполнитьОтборыСписка();
		
		ПодключитьОбработчикОжидания("ОбновитьТекстРедактированияПолейОтбораПериодическихМедосмотров", 0.1, Истина);
		
		// Установка параметров запроса у динамического списка периодических медосмотров.
		Список.Параметры.УстановитьЗначениеПараметра("ИспользуетсяОтборПоФИО", Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("ТекстОтборФИО", "");
		Список.Параметры.УстановитьЗначениеПараметра("ИспользуетсяОтборПоПрМО", Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("ОтборПрМО", "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияСписковПриСоздании()
	
	Элементы.СтраницаППМО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПрофосмотры");
	Элементы.СтраницаСправки.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьМедосмотрыСправок");
	
	Если Элементы.СтраницаППМО.Видимость Тогда
		НуженОтборПоОтметкам = УправлениеНастройками.ПараметрУчета("МедосмотрыПравилоОпределенияНезавершивших") = Перечисления.МедосмотрыПравилаОпределенияНеЗавершивших.ЕстьОтметкиПрохождения;
		Список.Параметры.УстановитьЗначениеПараметра("НуженОтборПоОтметкам", НуженОтборПоОтметкам);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстРедактированияПолейОтбораПериодическихМедосмотров()
	
	Элементы.ОтборКлиентФИО.ОбновитьТекстРедактирования();
	Элементы.ОтборКонтрагент.ОбновитьТекстРедактирования();
	Элементы.ОтборНомерОбходногоЛиста.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборыСписка()
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("Контрагент", ОтборКонтрагент, Список);
	Иначе
		РаботаСФормамиКлиент.СнятьОтборСписка("Контрагент", Список);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСписокМО) Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("СписокМО", ОтборСписокМО, Список);
	Иначе
		РаботаСФормамиКлиент.СнятьОтборСписка("СписокМО", Список);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСостояние) Тогда
		Если ОтборСостояние <= 4 Тогда
			// Конкретное состояние
			РаботаСФормамиКлиент.УстановитьОтборСписка("СостояниеПрохождения", ОтборСостояние, Список);
		ИначеЕсли ОтборСостояние = 6 Тогда
			// Либо не пришел, либо проходит
			ПравоеЗначение = Новый СписокЗначений;
			ПравоеЗначение.Добавить(1);
			ПравоеЗначение.Добавить(2);
			
			РаботаСФормамиКлиент.УстановитьОтборСписка("СостояниеПрохождения", ПравоеЗначение, Список, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
	Иначе
		РаботаСФормамиКлиент.СнятьОтборСписка("СостояниеПрохождения", Список);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборДатаРождения) Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент.ДатаРождения", ОтборДатаРождения, Список);
	Иначе
		РаботаСФормамиКлиент.СнятьОтборСписка("Клиент.ДатаРождения", Список);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ПерейтиКПМО.Видимость = РежимПредседательМедкомиссии;
	Элементы.ПерейтиКПМОКМ.Видимость = РежимПредседательМедкомиссии;
	
	Элементы.ОткрытьСписокНаМО.Видимость = РежимПредседательМедкомиссии;
	Элементы.ОткрытьСписокНаМОКМ.Видимость = РежимПредседательМедкомиссии;
	
	Если Не РежимПредседательМедкомиссии Тогда
		
		СписокВыбора = Элементы.ОтборСостояние.СписокВыбора;
		
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(1);
		СписокВыбора.Удалить(ЭлементСписка);
		
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(6);
		СписокВыбора.Удалить(ЭлементСписка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СписокСписокМО Тогда
		ОткрытьСписокНаМО(Неопределено);
	ИначеЕсли РежимПредседательМедкомиссии Тогда
		ДействиеПерейтиКПМО();
	Иначе
		ДействиеСоздатьПрием();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНаМО(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.СписокМО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	ЗаполнитьОтборыСписка();	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПерейтиКПМО()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ПМО) Тогда
			ОткрытьЗначение(ТекущиеДанные.ПМО);
		Иначе
			ЗначенияЗаполнения = Новый Структура("Клиент, СписокНаПрохождениеМедосмотра", ТекущиеДанные.Клиент, ТекущиеДанные.СписокМО);
			ОткрытьФорму("Документ.ПрохождениеМедосмотра.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСоздатьПрием(ЭтоСправка = Ложь)
	
	Если ЭтоСправка Тогда
		ТекущиеДанные = Элементы.СписокСправки.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПМО = ?(ЭтоСправка, ТекущиеДанные.Ссылка, ТекущиеДанные.ПМО); 
		
		Если ЗначениеЗаполнено(ПМО) Тогда
			
			ЗначенияЗаполнения = Новый Структура("Клиент, ПервичныйПрием", ТекущиеДанные.Клиент, ПМО);
			
			СписокВыбора = ДействияИОтметкиВыполненияДляМедОсмотра(ПМО, АдресДействияМедосмотраСотрудника);
			
			Если СписокВыбора.Количество() = 1 Тогда
				ДействиеСоздатьПриемПослеВыбораДействияМедосмотра(СписокВыбора[0], ЗначенияЗаполнения)
				
			ИначеЕсли СписокВыбора.Количество() > 1 Тогда
				
				Оповещение = Новый ОписаниеОповещения("ДействиеСоздатьПриемПослеВыбораДействияМедосмотра", ЭтотОбъект, ЗначенияЗаполнения);
				ЭлементКоманднаяПанель = ?(ЭтоСправка, Элементы.КоманднаяПанельСправки, Элементы.КоманднаяПанельППМО);
				ПоказатьВыборИзМеню(Оповещение, СписокВыбора, ЭлементКоманднаяПанель);
			Иначе
				ОткрытьФормуСозданияПриема(ЗначенияЗаполнения);	
			КонецЕсли;
			
		Иначе
			ПоказатьПредупреждение(,"Пациент еще не начал прохождение медосмотра у профпатолога!");
		КонецЕсли;
	Иначе
		ОткрытьФорму("Документ.Прием.ФормаОбъекта");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСоздатьПриемПослеВыбораДействияМедосмотра(ВыбранноеЗначение, ЗначенияЗаполнения) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	Иначе 
		ДействиеМО	  = ВыбранноеЗначение.Значение.ДействиеМО;
		Специализация = ВыбранноеЗначение.Значение.Специализация;
		УжеПройден  = ВыбранноеЗначение.Значение.УжеПройден;
		
		ЗначенияЗаполнения.Вставить("Специализация", Специализация);
		
		Если УжеПройден Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОткрытииПриема",ЭтотОбъект,
									Новый Структура("Специализация, ЗначенияЗаполнения", Специализация, ЗначенияЗаполнения));
			ПоказатьВопрос(ОповещениеОЗакрытии, НСтр("ru='Работник уже прошел специалиста: '") + Строка(ДействиеМО) + ". " + НСтр("ru='Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ОткрытьФормуСозданияПриема(ЗначенияЗаполнения);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОткрытииПриема(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуСозданияПриема(Параметры.ЗначенияЗаполнения);	
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьФормуСозданияПриема(ЗначенияЗаполнения) 
	
	ОткрытьФорму("Документ.Прием.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДействияИОтметкиВыполненияДляМедОсмотра(ПМО, Знач АдресДействияМедосмотраСотрудника)
	
	ДействияМедосмотраСотрудника = ПолучитьИзВременногоХранилища(АдресДействияМедосмотраСотрудника);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПМО", ПМО);
	Запрос.УстановитьПараметр("ДействияМО", ДействияМедосмотраСотрудника);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействияВрача.Действие КАК Действие
	               |ПОМЕСТИТЬ ДействияВрача
	               |ИЗ
	               |	Документ.ПрохождениеМедосмотра.ДействияМедосмотра КАК ДействияВрача
	               |ГДЕ
	               |	ДействияВрача.Ссылка = &ПМО
	               |	И ДействияВрача.Действие В(&ДействияМО)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ОтметкиВыполненияДействийСрезПоследних.Выполнено, ЛОЖЬ) КАК УжеПройден,
	               |	ДействияВрача.Действие.Представление КАК ДействиеМО,
	               |	ДействияВрача.Действие.Специализация КАК Специализация
	               |ИЗ
	               |	ДействияВрача КАК ДействияВрача
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВыполненияДействий.СрезПоследних(
	               |				,
	               |				ПрохождениеМедОсмотра = &ПМО
	               |					И Действие В (&ДействияМО)) КАК ОтметкиВыполненияДействийСрезПоследних
	               |		ПО (ОтметкиВыполненияДействийСрезПоследних.Действие = ДействияВрача.Действие)
	               |";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		
		Значение = Новый Структура("ДействиеМО, Специализация, УжеПройден");
		ЗаполнитьЗначенияСвойств(Значение, Выборка);
		
		Представление = Строка(Выборка.ДействиеМО);
		
		Если Выборка.УжеПройден Тогда
			Представление = Представление + " (" + НСтр("ru='Уже пройден'") + ")";
		КонецЕсли;
		
		СписокВыбора.Добавить(Значение, Представление);		
	КонецЦикла; 
	
	СписокВыбора.СортироватьПоПредставлению();
	
	Возврат СписокВыбора;
		
КонецФункции

&НаКлиенте
Процедура СоздатьПрием(Команда)
	
	ЭтоСправка = Ложь;
	
	Если Команда <> Неопределено И Команда.Имя = "СоздатьПриемПоСправке" Тогда
		ЭтоСправка = Истина;
	КонецЕсли;
	
	ДействиеСоздатьПрием(ЭтоСправка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПМО(Команда)
	
	ДействиеПерейтиКПМО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлиентФИОАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)	
	Если Ожидание <> 0 Тогда
		УстановитьОтборПоФИО(Текст, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлиентФИООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)	
	УстановитьОтборПоФИО(Текст, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлиентФИОПриИзменении(Элемент)
	УстановитьОтборПоФИО(, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерОбходногоЛистаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если Ожидание <> 0 Тогда
		УстановитьОтборПоПрМО(Текст, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерОбходногоЛистаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	УстановитьОтборПоПрМО(Текст, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерОбходногоЛистаПриИзменении(Элемент)
	УстановитьОтборПоПрМО(, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоФИО(ЗначениеПоиска = Неопределено, ЭлементФормыОтбора = Неопределено)
	
	Если ЭлементФормыОтбора = Элементы.ОтборКлиентФИОСправки Тогда
		ДляСправок = Истина;
	Иначе
		ДляСправок = Ложь;
	КонецЕсли;
	
	Если ЗначениеПоиска = Неопределено Тогда
		Если ДляСправок Тогда
			ЗначениеПоиска = ОтборКлиентФИОСправки;
		Иначе
			ЗначениеПоиска = ОтборКлиентФИО;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеПоискаСоответствует = ЗначениеЗаполнено(ЗначениеПоиска);
	ДлинаЗначенияПоискаСоответствует = СтрДлина(ЗначениеПоиска) >= МинДлинаСтрокиПоискаКлиента;
	
	ИспользуетсяОтборПоФИО = ЗначениеПоискаСоответствует И ДлинаЗначенияПоискаСоответствует;
	
	Если ДляСправок Тогда
		// Справки
		ОтборФИО = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокСправки.Отбор, "Клиент.Наименование");
		Если ИспользуетсяОтборПоФИО Тогда
			РаботаСФормамиКлиент.УстановитьОтборСписка("Клиент.Наименование", ЗначениеПоиска, СписокСправки, ВидСравненияКомпоновкиДанных.НачинаетсяС);
		Иначе
			РаботаСФормамиКлиент.СнятьОтборСписка("Клиент.Наименование", СписокСправки);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрКомпоновкиЕслиИзменился(Список.Параметры, "ИспользуетсяОтборПоФИО", ИспользуетсяОтборПоФИО);
		Если ИспользуетсяОтборПоФИО Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрКомпоновкиЕслиИзменился(Список.Параметры, "ТекстОтборФИО", ЗначениеПоиска + "%");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПрМО(ЗначениеПоиска = Неопределено, ЭлементФормыОтбора = Неопределено)
	
	Если ЭлементФормыОтбора = Элементы.ОтборНомерОбходногоЛистаСправки Тогда
		ДляСправок = Истина;
	Иначе
		ДляСправок = Ложь;
	КонецЕсли;
	
	Если ЗначениеПоиска = Неопределено Тогда
		Если ДляСправок Тогда
			ЗначениеПоиска = ОтборНомерОбходногоЛистаСправки;
		Иначе
			ЗначениеПоиска = ОтборНомерОбходногоЛиста;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяОтборПоПрМО = ЗначениеЗаполнено(ЗначениеПоиска);
	
	Если ДляСправок Тогда
		// Справки
		Если ИспользуетсяОтборПоПрМО Тогда
			РаботаСФормамиКлиент.УстановитьОтборСписка("Номер", ЗначениеПоиска, СписокСправки, ВидСравненияКомпоновкиДанных.Содержит);
		Иначе
			РаботаСФормамиКлиент.СнятьОтборСписка("Номер", СписокСправки);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрКомпоновкиЕслиИзменился(Список.Параметры, "ИспользуетсяОтборПоПрМО", ИспользуетсяОтборПоПрМО);
		Если ИспользуетсяОтборПоПрМО Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрКомпоновкиЕслиИзменился(Список.Параметры, "ОтборПрМО", "%" + ЗначениеПоиска + "%");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпециальностиТекущегоСотрудника()
	
	Сотрудник = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
	
	ТабСпециализации = Сотрудник.Специализации.Выгрузить();
	ТабСпециализации.Колонки.Добавить("Основная", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаСпециализации Из ТабСпециализации Цикл
		Если СтрокаСпециализации.Специализация = Сотрудник.Специализация Тогда
			СтрокаСпециализации.Основная = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТабСпециализации.Сортировать("Основная, НомерСтроки");
	
	Возврат ТабСпециализации.ВыгрузитьКолонку("Специализация");
	
КонецФункции

&НаСервере
Функция ПолучитьДействияМедосмотраСотрудника()
	
	// Вызывается при создании формы
	Специализации = ПолучитьСпециальностиТекущегоСотрудника();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Специализации", Специализации);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДействияМедосмотра.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДействияМедосмотра КАК ДействияМедосмотра
	               |ГДЕ
	               |	ДействияМедосмотра.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДействийМедицинскогоОсмотра.Врач)
	               |	И ДействияМедосмотра.Специализация В(&Специализации)";
	
	ДействияМедосмотра = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ПоместитьВоВременноеХранилище(ДействияМедосмотра, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОтборСписокМОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПерезаполнитьСвязьПараметров();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокМОПриИзменении(Элемент)
	ЗаполнитьОтборыСписка();
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСвязьПараметров()
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "ОтборКонтрагент");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Иначе
		НовыеСвязи = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	Элементы.ОтборСписокМО.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УказатьПричинуНеЯвкиНаСервере(Клиент, СписокМО, ПричинаНеявки)
	
	ДокОбъект = СписокМО.ПолучитьОбъект();
	СтрокаКлиента = ДокОбъект.Клиенты.Найти(Клиент);
	Если СтрокаКлиента <> Неопределено Тогда
		СтрокаКлиента.ПричинаНеявки = ПричинаНеявки;
		ДокОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПричинуНеявки(Команда)
	
	ТД = Элементы.Список.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		
		ФормаВыбора = ПолучитьФорму("Справочник.ПричиныНеявкиНаМедосмотр.ФормаВыбора");
		ПричинаНеявки = ФормаВыбора.ОткрытьМодально();
		Если ПричинаНеявки <> Неопределено Тогда
			УказатьПричинуНеЯвкиНаСервере(ТД.Клиент, ТД.СписокМО, ПричинаНеявки);
			Элементы.Список.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТД = Элементы.Список.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюУказатьПричинуНеявки.Видимость = ТД.СостояниеПрохождения = 1;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборПоФилиалу()
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("Филиал", Филиал, Список);
		РаботаСФормамиКлиент.УстановитьОтборСписка("Филиал", Филиал, СписокСправки);
	Иначе
		РаботаСФормамиКлиент.СнятьОтборСписка("Филиал", Список);
		РаботаСФормамиКлиент.СнятьОтборСписка("Филиал", СписокСправки);
	КонецЕсли;
	ПоказыватьКолонкуФилиал = Элементы.Филиал.Видимость И Не ЗначениеЗаполнено(Филиал);
	Элементы.СписокФилиал.Видимость = ПоказыватьКолонкуФилиал;
	Элементы.СписокСправкиФилиал.Видимость = ПоказыватьКолонкуФилиал;
	
КонецПроцедуры

&НаКлиенте
Функция СШКПрМО(фПрохождениеМедосмотра, СШК) Экспорт
	
	ОтборНомерМО = ОбщегоНазначения.ПолучитьЗначениеРеквизита(фПрохождениеМедосмотра, "СписокНаПрохождениеМедосмотра");
	ЗаполнитьОтборыСписка();
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
	Предупреждение("Неизвестный штрихкод! Данный штрихкод не присвоен ни одному объекту!");
	Возврат Истина;
	
КонецФункции // СШКНеизвестныйКод()

&НаКлиенте
Процедура Печать(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ПМО) Тогда
			УниверсальныеМеханизмыКлиент.ОткрытьФормуВыбораПечатныхФормОбъекта(ТекущиеДанные.ПМО, ЭтаФорма);
		Иначе
			ЗначенияЗаполнения = Новый Структура("Клиент, СписокНаПрохождениеМедосмотра", ТекущиеДанные.Клиент, ТекущиеДанные.СписокМО);
			Предупреждение("Будет создан документ прохождения медосмотра",,"Предупреждение");
			ПМОСсылка = СоздатьПМО(ЗначенияЗаполнения);
			Если ЗначениеЗаполнено(ПМОСсылка) Тогда 
				ТекущиеДанные.ПМО = ПМОСсылка;
				УниверсальныеМеханизмыКлиент.ОткрытьФормуВыбораПечатныхФормОбъекта(ТекущиеДанные.ПМО, ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПМО(ЗначенияЗаполнения)
	
	ПМОСсылка = Документы.ПрохождениеМедосмотра.ПустаяСсылка();
	ПМО = Документы.ПрохождениеМедосмотра.СоздатьДокумент();
	ПМО.Заполнить(ЗначенияЗаполнения);
	ПМО.Дата = ТекущаяДата();
	ПМО.ТипМедосмотра = ТипМедосмотраКлиентаИзСПМО(ЗначенияЗаполнения.Клиент, ЗначенияЗаполнения.СписокНаПрохождениеМедосмотра);
	ПМО.Записать(РежимЗаписиДокумента.Проведение);
	ПМОСсылка = ПМО.Ссылка;
	
	Возврат ПМОСсылка;	
		
КонецФункции

&НаСервере
Функция ТипМедосмотраКлиентаИзСПМО(Клиент, СПМО)
	
	СтрокиСписка = СПМО.Клиенты.НайтиСтроки(Новый Структура("Клиент", Клиент));
	
	Если СтрокиСписка.Количество() > 0 Тогда
		Возврат СтрокиСписка[0].ТипМедосмотра;
	Иначе
		Возврат Перечисления.ТипыМедосмотров.Периодический;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#Область Справки

&НаКлиенте
Процедура ОтметитьПрохождениеВрача(Команда)
	
	ТекущиеДанные = Элементы.СписокСправки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЗначенияЗаполнения = Новый Структура("Клиент, ПрохождениеМедосмотра", ТекущиеДанные.Клиент, ТекущиеДанные.Ссылка);
		
		СпециальностиСотрудника = ПолучитьСпециальностиТекущегоСотрудника();
		Если СпециальностиСотрудника.Количество() = 1 Тогда
			ЗначенияЗаполнения.Вставить("Специализация", СпециальностиСотрудника[0]);
		ИначеЕсли СпециальностиСотрудника.Количество() > 1 Тогда
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения(СпециальностиСотрудника);
			ЭлементСпециализация = ВыбратьИзМеню(СписокВыбора, Элементы.КоманднаяПанельСправки);
			Если ЭлементСпециализация = Неопределено Тогда
				Возврат;
			Иначе
				ЗначенияЗаполнения.Вставить("Специализация", ЭлементСпециализация.Значение);
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму("Документ.ОтметкаВыполненияМедосмотра.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОткрытииОтметкиВыполнения(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуОтметкиВыполнения(Параметры.Действие,Параметры.ЗначенияЗаполнения);	
	КонецЕсли; 	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьФормуОтметкиВыполнения(Действие, ЗначенияЗаполнения) 
	Форма = ОткрытьФорму("Документ.ОтметкаВыполненияМедосмотра.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	Если ЗначениеЗаполнено(Действие) Тогда
		Форма.ДействияМедосмотра.Очистить();
		НоваяСтрока = Форма.ДействияМедосмотра.Добавить();
		НоваяСтрока.Значение = Действие;
		НоваяСтрока.Пометка	 = Истина;	
	КонецЕсли; 	
КонецПроцедуры
 

&НаКлиенте
Процедура ПечатьСправки(Команда)
	
	ТекущиеДанные = Элементы.СписокСправки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УниверсальныеМеханизмыКлиент.ОткрытьФормуВыбораПечатныхФормОбъекта(ТекущиеДанные.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеСправкаПриИзменении(Элемент)
	
	Если ОтборСостояниеСправка = 0 Тогда
		// Все
		РаботаСФормамиКлиент.СнятьОтборСписка("ДатаЗавершения", СписокСправки);
	ИначеЕсли ОтборСостояниеСправка = 3 Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("ДатаЗавершения", Неопределено, СписокСправки, ВидСравненияКомпоновкиДанных.Заполнено);
	ИначеЕсли ОтборСостояниеСправка = 6 Тогда
		РаботаСФормамиКлиент.УстановитьОтборСписка("ДатаЗавершения", Неопределено, СписокСправки, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ОбновитьОтборПоФилиалу();
	
КонецПроцедуры

#КонецОбласти