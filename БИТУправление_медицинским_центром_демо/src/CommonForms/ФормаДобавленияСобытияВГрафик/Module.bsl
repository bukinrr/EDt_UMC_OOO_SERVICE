#Область РазделОписанияПеременных

&НаКлиенте
Перем мОткрытиеФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры.ДанныеСобытия) = Тип("Структура") Тогда
		
		ВремяНач = Параметры.ДанныеСобытия.ВремяНач;
		ВремяКон = Параметры.ДанныеСобытия.ВремяКон;
		Если ВремяКон = ВремяНач Тогда
			ВремяКон = Мин(ВремяНач + 30 * 60, Дата(1,1,1,23,55,00));
		КонецЕсли;
		
		Для Каждого СтруктураПолучателя Из Параметры.ДанныеСобытия.ОбъектыКОбработке Цикл
			Если Не ЗначениеЗаполнено(ДатаНач) Или ДатаНач > СтруктураПолучателя.Дата Тогда
				ДатаНач = СтруктураПолучателя.Дата;
			КонецЕсли;
			
			Если ДатаКон < СтруктураПолучателя.Дата Тогда
				ДатаКон = СтруктураПолучателя.Дата
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтруктураПолучателя.Объект) ИЛИ  ТипЗнч(СтруктураПолучателя.Объект) = Тип("Дата") Тогда
				мДатыИзменялисьВручную = Истина; // Временный обход случая когда в выделение по периоду попал день без сотрудников.
			Иначе
				СтрТаб = ОбъектыКОбработке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрТаб,СтруктураПолучателя);
				СтрТаб.Сотрудник = СтруктураПолучателя.Объект;
				СтрТаб.ПометкаУдаления = Ложь;
				СтрТаб.ВремяНачала = ВремяНач;
				СтрТаб.ВремяКонца = ВремяКон;
				
			КонецЕсли;
			Филиал = СтрТаб.Филиал;
			Подразделение = СтрТаб.Подразделение;
		КонецЦикла;
		
		ТабОбъектыКОбработке = ОбъектыКОбработке.Выгрузить();
		ОбщегоНазначения.СвернутьТаблицуЗначений(ТабОбъектыКОбработке, "");
		ОбъектыКОбработке.Загрузить(ТабОбъектыКОбработке);
		ОбъектыКОбработкеКэш.Загрузить(ТабОбъектыКОбработке);
	Иначе 
		
		Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
		
	КонецЕсли;
	ВремяНачИсходное = ВремяНач;
	ВремяКонИсходное = ВремяКон;
	
	ВидВремени = Справочники.ВидыВремениГрафика.РабочееВремя;
	Название = Строка(ВидВремени);
	Элементы.СправочникСписок.ТекущаяСтрока = ВидВремени;
	
	ДатыИзменялисьВручную = Ложь;
	
	УО = СправочникСписок.УсловноеОформление.Элементы;
	Выб = Справочники.ВидыВремениГрафика.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.Ссылка <> Справочники.ВидыВремениГрафика.РабочееВремя Тогда
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона",Выб.Цвет.Получить());
			
			// Условие форматирования
			ЭлементУсловия  = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементУсловия.ВидСравнения	  = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = Выб.Ссылка;
			
			// Оформляемое поле
			ОформлПоле1 = ЭлементУО.Поля.Элементы.Добавить();
			ОформлПоле1.Поле = Новый ПолеКомпоновкиДанных("Код");
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Название) Или 
		ВидВремени <> Элементы.СправочникСписок.ТекущаяСтрока
	Тогда
		Название = Строка(ВидВремени);
	КонецЕсли;
	
	ВидВремени = Элементы.СправочникСписок.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	Если мОткрытиеФормы <> Ложь Тогда
		Если Не ЗначениеЗаполнено(Название) Или 
			ВидВремени <> Элементы.СправочникСписок.ТекущаяСтрока
		Тогда
			Название = Строка(Элементы.СправочникСписок.ТекущаяСтрока);
		КонецЕсли;
		ВидВремени = Элементы.СправочникСписок.ТекущаяСтрока;
	
		Если ЗначениеЗаполнено(ВидВремени) Тогда
			Цвет = ПолучитьЦветВидаВремени(ВидВремени);
			Если Цвет <> Неопределено Тогда
				Элементы.ПолеЦветСобытия.ЦветФона = Цвет;
			Иначе
				Элементы.ПолеЦветСобытия.ЦветФона = Новый Цвет();
			КонецЕсли;
		КонецЕсли;
	Иначе
		мОткрытиеФормы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачПриИзменении(Элемент)
	мДатыИзменялисьВручную = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачРегулирование(Элемент, Направление, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВремяНач = Мин(ВремяНач + 5 * 60 * Направление,Дата(1,1,1,23,59,00));
	ВремяКон = Мин(ВремяКон + 5 * 60 * Направление,Дата(1,1,1,23,59,00));
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВремяКон = ВремяКон + 5 * 60 * Направление;
	ВремяНач = Мин(ВремяНач, ВремяКон - 5 * 60);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветВидаВремени(ВидВремениСсылка)
	Возврат ВидВремениСсылка.Цвет.Получить();
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если ВремяНач >= ВремяКон Тогда
		Предупреждение("Время начала события должно быть меньше времени его окончания!");
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНач) 
		И ЗначениеЗаполнено(ДатаКон)
		И ЗначениеЗаполнено(ВремяНач) 
		И ЗначениеЗаполнено(ВремяКон) 
		И ДатаКон <= ДобавитьМесяц(ДатаНач, 12)
	Тогда
		Если мДатыИзменялисьВручную = Истина Тогда
			// Перестраиваю таблицу Объект - Дата, т.к. даты менялись и полученная извне таблица уже содержит другие даты.
			СписокОбъектов = Новый Массив;
			Для Каждого СтрокаОбъект Из ОбъектыКОбработке Цикл
				Если СписокОбъектов.Найти(СтрокаОбъект.Сотрудник) = Неопределено Тогда
					СписокОбъектов.Добавить(СтрокаОбъект.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из ОбъектыКОбработке Цикл
				Если Строка.Дата < ДатаНач ИЛИ Строка.Дата > ДатаКон Тогда
					Строка.ПометкаУдаления = Истина;
				КонецЕсли;
				Если (Строка.ВремяНачала <= ВремяНач И Строка.ВремяКонца <= ВремяНач) ИЛИ (Строка.ВремяНачала >= ВремяКон И Строка.ВремяКонца >= ВремяКон) Тогда
					Строка.ПометкаУдаления = Истина;
				КонецЕсли;
				Если Строка.ВремяНачала = ВремяНачИсходное И ВремяНач < ВремяНачИсходное Тогда // Расширяли левую границу
					Строка.ВремяНачала = ВремяНач;
				КонецЕсли;
				Если Строка.ВремяКонца = ВремяКонИсходное И ВремяКон > ВремяКонИсходное Тогда // Расширяли правую границу
					Строка.ВремяКонца = ВремяКон;
				КонецЕсли;
				Если Строка.ВремяНачала < ВремяНач И Строка.ВремяКонца > ВремяНач И ВремяНач > ВремяНачИсходное Тогда // Сужали левую границу
					Строка.ВремяНачала = ВремяНач;
				КонецЕсли;
				Если Строка.ВремяКонца > ВремяКон И Строка.ВремяНачала < ВремяКон И ВремяКон < ВремяКонИсходное Тогда // Сужали правую границу
					Строка.ВремяКонца = ВремяКон;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		инд = 0;фИндексВПределахГраниц = Истина;
		Пока фИндексВПределахГраниц Цикл
			ТекущийЭлементТаблицы		= ОбъектыКОбработке[инд]; 			
			Если ТекущийЭлементТаблицы.ПометкаУдаления	Тогда
				ОбъектыКОбработке.Удалить(ТекущийЭлементТаблицы);
			Иначе
				Инд = Инд+1;
			КонецЕсли;
			фИндексВПределахГраниц = ? (инд <= (ОбъектыКОбработке.Количество()- 1), Истина, Ложь );
		КонецЦикла;
		
		ТекДата = ДатаНач;
		
		Пока ТекДата <= ДатаКон Цикл
			мсСтрок = ОбъектыКОбработке.НайтиСтроки(Новый Структура("Дата",ТекДата));
			Если мсСтрок.Количество() = 0 Тогда
				Для каждого Объект из СписокОбъектов Цикл
					СтрокаОбъект = ОбъектыКОбработке.Добавить();
					СтрокаОбъект.Сотрудник		= Объект;
					СтрокаОбъект.Дата			= ТекДата;
					СтрокаОбъект.ВремяНачала	= ВремяНач;
					СтрокаОбъект.ВремяКонца		= ВремяКон;
					СтрокаОбъект.ДокументУГ		= ПредопределенноеЗначение("Документ.УстановкаГрафиковРаботы.ПустаяСсылка");
					СтрокаОбъект.Филиал			= Филиал;
					СтрокаОбъект.Подразделение	= Подразделение
				КонецЦикла;
			КонецЕсли;
			ТекДата = ТекДата + 86400;
		КонецЦикла;
		
		Текст = Название;
		
		// Добавление события
		СообщениеОбОщибках = ГрафикиСотрудников.ДобавитьСобытие(ОбъектыКОбработке, ВремяНач, ВремяКон, ВидВремени, Текст, Комментарий);
		Если Значениезаполнено(СообщениеОбОщибках) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОщибках);
		Иначе
			Закрыть(Истина);
		КонецЕсли;
	Иначе
		Предупреждение("Некорректно указан период события!");	
	КонецЕсли;
	// На случай если мы попытались добавить невозможные события и система отказала в проведении документов Установки графиков
	// Вернемся к исходной таблице объектов.
	ОбъектыКОбработке.Очистить();
	Для каждого стрТабКэш из ОбъектыКОбработкеКэш Цикл
		СтрТаб = ОбъектыКОбработке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаб, СтрТабКэш);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
