#Область РазделОписанияПеременных

Перем мНоменклатураАнализов Экспорт; // Заполняется, если требуется вывести даже номенклатуру, с которой сопоставление с лабораторией никогда не делалось.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрДата = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Дата"));
	
	Лаборатории = Неопределено;

	ПараметрЛаборатории = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Лаборатории"));
	Если ПараметрЛаборатории.Использование Тогда
		Если ТипЗнч(ПараметрЛаборатории.Значение) = Тип("СписокЗначений") Тогда
			Лаборатории = ПараметрЛаборатории.Значение.ВыгрузитьЗначения();
		ИначеЕсли ТипЗнч(ПараметрЛаборатории.Значение) = Тип("СправочникСсылка.Лаборатории") Тогда
			Лаборатории = Новый Массив;
			Лаборатории.Добавить(ПараметрЛаборатории.Значение);
		КонецЕсли;
	КонецЕсли;
	
	ДатаОтчета = ?(ТипЗнч(ПараметрДата.Значение) = Тип("СтандартнаяДатаНачала"), ПараметрДата.Значение.Дата, ПараметрДата.Значение);
	
	Таблица = ПолучитьДанныеОДоступностиИсследованийЛабораторий(ДатаОтчета, Лаборатории, мНоменклатураАнализов);
	ВнешниеНаборыДанных = Новый Структура("Данные", Таблица);
	
	ОсновнойМакетОформления = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойМакетОформленияСКД");
	КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрМакет = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
	ПараметрМакет.Значение = ОсновнойМакетОформления;
	ПараметрМакет.Использование = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	// Инициализация процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// Получение результата.
	ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает данные о доступности номенклатуры исследований внешних лабораторий.
//
// Параметры:
//  Дата					 - Дата - используется для проверки доступности исследований на определенную дату.
//  Лаборатории				 - Массив Из СправочникСсылка.Лаборатории - лаборатории, для которых проверяется доступность исследований.
//  						 - Неопределено - если не выполняется отбор по лабораториям.
//  НоменклатураИсследований - Массив Из СправочникСсылка.Номенклатура - проверяемая номенклатура исследований.
//  						 - Неопределено - если не выполняется отбор по номенклатуре исследований.
// 
// Возвращаемое значение:
//   ТаблицаЗначений
//   	* Лаборатория 	- СправочникСсылка.Лаборатории
//   	* Исследование 	- СправочникСсылка.Номенклатура
//   	* Идентификатор - Строка - идентификатор исследования/анализа.
//   	* Доступно 		- Булево - если Истина, тогда исследование доступно для лаборатории. 
//
Функция ПолучитьДанныеОДоступностиИсследованийЛабораторий(Дата, Лаборатории, НоменклатураИсследований = Неопределено) Экспорт
	
	// Вызов функции из документа забора анализов.
	Если Лаборатории <> Неопределено И НоменклатураИсследований <> Неопределено Тогда
		// Получаем внешние лаборатории, для которых используется интеграция, за исключением полученных из документа.
		АктуальныеЛаборатории = ЛабораторияСервер.ПолучитьАктуальныеЛаборатории(Истина, Ложь, Лаборатории);
		Для Каждого АктуальнаяЛаборатория Из АктуальныеЛаборатории Цикл
			Лаборатории.Добавить(АктуальнаяЛаборатория);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоменклатураИсследованийНеЗаполнена", НоменклатураИсследований = Неопределено);
	Запрос.УстановитьПараметр("НоменклатураИсследований", НоменклатураИсследований);
	Запрос.УстановитьПараметр("ЛабораторииНеЗаполнены", Лаборатории = Неопределено);
	Запрос.УстановитьПараметр("Лаборатории", Лаборатории);
	Запрос.УстановитьПараметр("Дата", Дата);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Номенклатура КАК Исследование,
	|	НоменклатураАнализов.ID КАК ID,
	|	НЕ НоменклатураАнализов.Исключен КАК Доступно
	|ПОМЕСТИТЬ НоменклатураАнализов
	|ИЗ
	|	РегистрСведений.НоменклатураАнализов КАК НоменклатураАнализов
	|ГДЕ
	|	(&НоменклатураИсследованийНеЗаполнена
	|			ИЛИ НоменклатураАнализов.Номенклатура В (&НоменклатураИсследований))
	|	И (&ЛабораторииНеЗаполнены
	|			ИЛИ НоменклатураАнализов.Лаборатория В (&Лаборатории))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Исследование КАК Исследование,
	|	НоменклатураАнализов.ID КАК ID,
	|	ВЫБОР
	|		КОГДА &Дата >= ПериодыНедоступностиАнализов.Период
	|				И (&Дата < ПериодыНедоступностиАнализов.ДатаОкончания
	|					ИЛИ ПериодыНедоступностиАнализов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Доступно
	|ПОМЕСТИТЬ ДоступностьИсследованийПоПериодам
	|ИЗ
	|	НоменклатураАнализов КАК НоменклатураАнализов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыНедоступностиАнализов КАК ПериодыНедоступностиАнализов
	|		ПО НоменклатураАнализов.Лаборатория = ПериодыНедоступностиАнализов.Лаборатория
	|			И (ВЫБОР
	|				КОГДА ПериодыНедоступностиАнализов.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА НоменклатураАнализов.ID = ПериодыНедоступностиАнализов.ID
	|				ИНАЧЕ НоменклатураАнализов.Исследование = ПериодыНедоступностиАнализов.Номенклатура
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураАнализов.Лаборатория КАК Лаборатория,
	|	НоменклатураАнализов.Исследование КАК Исследование,
	|	НоменклатураАнализов.ID КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ДоступностьИсследованийПоПериодам.Доступно ЕСТЬ NULL
	|			ТОГДА НоменклатураАнализов.Доступно
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НоменклатураАнализов.Доступно = ИСТИНА
	|						И ДоступностьИсследованийПоПериодам.Доступно = ИСТИНА
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК Доступно
	|ИЗ
	|	НоменклатураАнализов КАК НоменклатураАнализов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступностьИсследованийПоПериодам КАК ДоступностьИсследованийПоПериодам
	|		ПО НоменклатураАнализов.Лаборатория = ДоступностьИсследованийПоПериодам.Лаборатория
	|			И НоменклатураАнализов.Исследование = ДоступностьИсследованийПоПериодам.Исследование"
	;
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если НоменклатураИсследований = Неопределено Или Лаборатории = Неопределено Тогда
		Возврат ТаблицаРезультатЗапроса;
	Иначе
		// Вызов функции из документа забора анализов.
		Результат = ТаблицаРезультатЗапроса.СкопироватьКолонки();
		
		Отбор = Новый Структура();
		Для Каждого Элемент Из НоменклатураИсследований Цикл
			Для Каждого Лаборатория Из Лаборатории Цикл
				Отбор.Вставить("Лаборатория", Лаборатория);
				Отбор.Вставить("Исследование", Элемент);
				СтрокиТаблицы = ТаблицаРезультатЗапроса.НайтиСтроки(Отбор);
				НоваяСтрока = Результат.Добавить();
				Если СтрокиТаблицы.Количество() <> 0 Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиТаблицы[0]);
				Иначе
					НоваяСтрока.Лаборатория = Лаборатория;
					НоваяСтрока.Исследование = Элемент;
					НоваяСтрока.Идентификатор = Неопределено;
					НоваяСтрока.Доступно = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат; 
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
