#Область ПрограммныйИнтерфейс

Функция СформироватьСтатистикаПоОператорамСервер(Макет, Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ИмеютсяПроблемыССобытиями = Ложь;
	
	ДатаНачала = НачалоДня(ДатаНачала);
	ДатаОкончания = КонецДня(ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияЗвонков.Пользователь КАК Оператор,
		|	НАЧАЛОПЕРИОДА(ИсторияЗвонков.Дата, ДЕНЬ) КАК День,
		|	ИсторияЗвонков.Дата КАК Дата,
		|	ИсторияЗвонков.ДлительностьЗвонка КАК ВремяЗвонков,
		|	ИсторияЗвонков.Номер КАК Номер,
		|	ИсторияЗвонков.ТипЗвонка КАК ТипЗвонка,
		|	СУММА(1) КАК ЗвонковПринято
		|ИЗ
		|	РегистрСведений.бит_ИсторияЗвонков КАК ИсторияЗвонков
		|ГДЕ
		|	ИсторияЗвонков.Дата <= &ДатаОкончания
		|	И ИсторияЗвонков.Дата >= ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, -1)
		|	И ИсторияЗвонков.Успешность
		|	И ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Входящий)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияЗвонков.Пользователь,
		|	ИсторияЗвонков.Дата,
		|	ИсторияЗвонков.ДлительностьЗвонка,
		|	ИсторияЗвонков.Номер,
		|	ИсторияЗвонков.ТипЗвонка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Неуспешные.Пользователь КАК Оператор,
		|	Неуспешные.День КАК День,
		|	Неуспешные.Дата КАК Дата,
		|	Неуспешные.Номер КАК Номер,
		|	Неуспешные.Количество КАК ЗвонковПропущено,
		|	Неуспешные.ДлительностьЗвонка КАК ВремяЗвонков
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИсторияЗвонков.Пользователь КАК Пользователь,
		|		НАЧАЛОПЕРИОДА(ИсторияЗвонков.Дата, ДЕНЬ) КАК День,
		|		ИсторияЗвонков.Дата КАК Дата,
		|		ИсторияЗвонков.Номер КАК Номер,
		|		1 КАК Количество,
		|		ИсторияЗвонков.ДлительностьЗвонка КАК ДлительностьЗвонка
		|	ИЗ
		|		РегистрСведений.бит_ИсторияЗвонков КАК ИсторияЗвонков
		|	ГДЕ
		|		ИсторияЗвонков.Дата <= &ДатаОкончания
		|		И ИсторияЗвонков.Дата >= &ДатаНачала
		|		И НЕ ИсторияЗвонков.Успешность
		|		И ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Входящий)) КАК Неуспешные
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ИсторияЗвонков.Пользователь КАК Пользователь,
		|			НАЧАЛОПЕРИОДА(ИсторияЗвонков.Дата, ДЕНЬ) КАК День,
		|			ИсторияЗвонков.Номер КАК Номер,
		|			1 КАК Количество,
		|			ИсторияЗвонков.ДлительностьЗвонка КАК ДлительностьЗвонка
		|		ИЗ
		|			РегистрСведений.бит_ИсторияЗвонков КАК ИсторияЗвонков
		|		ГДЕ
		|			ИсторияЗвонков.Дата <= &ДатаОкончания
		|			И ИсторияЗвонков.Дата >= &ДатаНачала
		|			И ИсторияЗвонков.Успешность
		|			И ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Входящий)) КАК Успешные
		|		ПО Неуспешные.День = Успешные.День
		|			И Неуспешные.Номер = Успешные.Номер
		|ГДЕ
		|	Успешные.Номер ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	День
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияЗвонков.Пользователь КАК Оператор,
		|	НАЧАЛОПЕРИОДА(ИсторияЗвонков.Дата, ДЕНЬ) КАК День,
		|	ИсторияЗвонков.Дата КАК Дата,
		|	ИсторияЗвонков.ДлительностьЗвонка КАК ВремяЗвонков,
		|	ИсторияЗвонков.Номер КАК Номер,
		|	ИсторияЗвонков.ТипЗвонка КАК ТипЗвонка,
		|	СУММА(1) КАК ЗвонковСовершено
		|ИЗ
		|	РегистрСведений.бит_ИсторияЗвонков КАК ИсторияЗвонков
		|ГДЕ
		|	ИсторияЗвонков.Дата <= &ДатаОкончания
		|	И ИсторияЗвонков.Дата >= ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, -1)
		|	И ИсторияЗвонков.Успешность
		|	И ИсторияЗвонков.ТипЗвонка = ЗНАЧЕНИЕ(Перечисление.бит_ТипЗвонка.Исходящий)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияЗвонков.Пользователь,
		|	ИсторияЗвонков.Дата,
		|	ИсторияЗвонков.ДлительностьЗвонка,
		|	ИсторияЗвонков.Номер,
		|	ИсторияЗвонков.ТипЗвонка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_СобытияБитФон.Пользователь КАК Пользователь,
		|	бит_СобытияБитФон.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(бит_СобытияБитФон.Дата, ДЕНЬ) КАК День,
		|	бит_СобытияБитФон.Событие КАК Событие,
		|	ВЫБОР
		|		КОГДА бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияБитФон.НаЛинии)
		|			ТОГДА 0
		|		КОГДА бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияБитФон.Логаут)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.бит_СобытияБитФон КАК бит_СобытияБитФон
		|ГДЕ
		|	бит_СобытияБитФон.Дата <= &ДатаОкончания
		|	И бит_СобытияБитФон.Дата >= &ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь,
		|	Дата,
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	СтатистикаЗвонков = Новый ТаблицаЗначений;
	СтатистикаЗвонков.Колонки.Добавить("Оператор",			Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	СтатистикаЗвонков.Колонки.Добавить("День",				Новый ОписаниеТипов("Дата"));
	СтатистикаЗвонков.Колонки.Добавить("ЗвонковПринято",	Новый ОписаниеТипов("Число"));
	СтатистикаЗвонков.Колонки.Добавить("ЗвонковПропущено",	Новый ОписаниеТипов("Число"));
	СтатистикаЗвонков.Колонки.Добавить("ЗвонковСовершено",	Новый ОписаниеТипов("Число"));
	СтатистикаЗвонков.Колонки.Добавить("ВремяЗвонков",		Новый ОписаниеТипов("Число"));
	
	СтатистикаСобытий = СтатистикаЗвонков.СкопироватьКолонки();
	СтатистикаСобытий.Колонки.Добавить("ВремяРаботы",		Новый ОписаниеТипов("Число"));
	
	УникальныеПринятые		= ДополнитьСтатистику(СтатистикаЗвонков, Результаты[0].Выгрузить(), Истина,	ДатаНачала, ДатаОкончания, "ЗвонковПринято",	"ВремяЗвонков");
	УникальныеПропущенные	= ДополнитьСтатистику(СтатистикаЗвонков, Результаты[1].Выгрузить(), Ложь,	ДатаНачала, ДатаОкончания, "ЗвонковПропущено",	"ЗвонковПропущено");
	УникальныеИсходящие		= ДополнитьСтатистику(СтатистикаЗвонков, Результаты[2].Выгрузить(), Истина,	ДатаНачала, ДатаОкончания, "ЗвонковСовершено",	"ЗвонковСовершено", "ВремяЗвонков");
	
	ОбработатьСобытияБитФона(СтатистикаСобытий, Результаты[3].Выгрузить(), ДатаНачала, ДатаОкончания, ИмеютсяПроблемыССобытиями);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатистикаЗвонков.Оператор КАК Оператор,
		|	СтатистикаЗвонков.День КАК День,
		|	СтатистикаЗвонков.ЗвонковПринято КАК ЗвонковПринято,
		|	СтатистикаЗвонков.ЗвонковПропущено КАК ЗвонковПропущено,
		|	СтатистикаЗвонков.ЗвонковСовершено КАК ЗвонковСовершено,
		|	СтатистикаЗвонков.ВремяЗвонков КАК ВремяЗвонков
		|ПОМЕСТИТЬ СтатистикаЗвонков
		|ИЗ
		|	&СтатистикаЗвонков КАК СтатистикаЗвонков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатистикаСобытий.Оператор КАК Оператор,
		|	СтатистикаСобытий.День КАК День,
		|	СтатистикаСобытий.ВремяРаботы КАК ВремяРаботы
		|ПОМЕСТИТЬ СтатистикаСобытий
		|ИЗ
		|	&СтатистикаСобытий КАК СтатистикаСобытий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СтатистикаЗвонков.Оператор, СтатистикаСобытий.Оператор) КАК Оператор,
		|	ЕСТЬNULL(СтатистикаЗвонков.День, СтатистикаСобытий.День) КАК День,
		|	ЕСТЬNULL(СтатистикаЗвонков.ЗвонковПринято, 0) КАК ЗвонковПринято,
		|	ЕСТЬNULL(СтатистикаЗвонков.ЗвонковПропущено, 0) КАК ЗвонковПропущено,
		|	ЕСТЬNULL(СтатистикаЗвонков.ЗвонковСовершено, 0) КАК ЗвонковСовершено,
		|	ЕСТЬNULL(СтатистикаЗвонков.ВремяЗвонков, 0) КАК ВремяЗвонков,
		|	ЕСТЬNULL(СтатистикаСобытий.ВремяРаботы, 0) КАК ВремяРаботы
		|ИЗ
		|	СтатистикаЗвонков КАК СтатистикаЗвонков
		|		ПОЛНОЕ СОЕДИНЕНИЕ СтатистикаСобытий КАК СтатистикаСобытий
		|		ПО СтатистикаЗвонков.Оператор = СтатистикаСобытий.Оператор
		|			И СтатистикаЗвонков.День = СтатистикаСобытий.День";
	
	Запрос.УстановитьПараметр("СтатистикаЗвонков", СтатистикаЗвонков);
	Запрос.УстановитьПараметр("СтатистикаСобытий", СтатистикаСобытий);
	
	тСтатистика = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьТабДокПоОператорам(ТабДок, Макет, тСтатистика, УникальныеПропущенные, УникальныеПринятые, УникальныеИсходящие, ДатаНачала, ДатаОкончания);
	
	Возврат Новый Структура("ТабДок, ИмеютсяПроблемыССобытиями", ТабДок, ИмеютсяПроблемыССобытиями);
	
КонецФункции

Функция СформироватьЗагруженностьЛинийСерверПоЧасам(Макет, Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ИмеютсяПроблемыССобытиями = Ложь;
	
	ДатаНачала = НачалоДня(ДатаНачала);
	ДатаОкончания = КонецДня(ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИсторияЗвонков.Дата, ДЕНЬ) КАК День,
		|	ИсторияЗвонков.Дата КАК НачалоЗвонка,
		|	ДОБАВИТЬКДАТЕ(ИсторияЗвонков.Дата, СЕКУНДА, ИсторияЗвонков.ДлительностьЗвонка) КАК КонецЗвонка
		|ИЗ
		|	РегистрСведений.бит_ИсторияЗвонков КАК ИсторияЗвонков
		|ГДЕ
		|	ИсторияЗвонков.Успешность
		|	И ИсторияЗвонков.Дата <= &ДатаОкончания
		|	И ИсторияЗвонков.Дата > ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, -1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияЗвонков.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_СобытияБитФон.Пользователь КАК Пользователь,
		|	бит_СобытияБитФон.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(бит_СобытияБитФон.Дата, ДЕНЬ) КАК День,
		|	бит_СобытияБитФон.Событие КАК Событие,
		|	ВЫБОР
		|		КОГДА бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияБитФон.НаЛинии)
		|			ТОГДА 0
		|		КОГДА бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияБитФон.Логаут)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.бит_СобытияБитФон КАК бит_СобытияБитФон
		|ГДЕ
		|	бит_СобытияБитФон.Дата <= &ДатаОкончания
		|	И бит_СобытияБитФон.Дата >= &ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь,
		|	Дата,
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	СтатистикаЗвонковПоЧасам = Новый ТаблицаЗначений;
	СтатистикаЗвонковПоЧасам.Колонки.Добавить("День",			Новый ОписаниеТипов("Дата"));
	СтатистикаЗвонковПоЧасам.Колонки.Добавить("Час",			Новый ОписаниеТипов("Число"));
	СтатистикаЗвонковПоЧасам.Колонки.Добавить("Максимум",		Новый ОписаниеТипов("Число"));
	СтатистикаЗвонковПоЧасам.Колонки.Добавить("Длительность",	Новый ОписаниеТипов("Число"));
	
	СтатистикаСобытийПоЧасам = СтатистикаЗвонковПоЧасам.СкопироватьКолонки();
	
	ЗаполнитьЗвонкиПоЧасам(			СтатистикаЗвонковПоЧасам, Результаты[0].Выбрать(),	 ДатаНачала, ДатаОкончания);
	ОбработатьСобытияБитФонаПоЧасам(СтатистикаСобытийПоЧасам, Результаты[1].Выгрузить(), ДатаНачала, ДатаОкончания, ИмеютсяПроблемыССобытиями);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатистикаЗвонковПоЧасам.День КАК День,
		|	СтатистикаЗвонковПоЧасам.Час КАК Час,
		|	СтатистикаЗвонковПоЧасам.Максимум КАК Максимум,
		|	СтатистикаЗвонковПоЧасам.Длительность КАК Длительность
		|ПОМЕСТИТЬ СтатистикаЗвонковПоЧасам
		|ИЗ
		|	&СтатистикаЗвонковПоЧасам КАК СтатистикаЗвонковПоЧасам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатистикаСобытийПоЧасам.День КАК День,
		|	СтатистикаСобытийПоЧасам.Час КАК Час,
		|	СтатистикаСобытийПоЧасам.Длительность КАК Длительность
		|ПОМЕСТИТЬ СтатистикаСобытийПоЧасам
		|ИЗ
		|	&СтатистикаСобытийПоЧасам КАК СтатистикаСобытийПоЧасам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СтатистикаЗвонковПоЧасам.День, СтатистикаСобытийПоЧасам.День) КАК День,
		|	ЕСТЬNULL(СтатистикаЗвонковПоЧасам.Час, СтатистикаСобытийПоЧасам.Час) КАК Час,
		|	ЕСТЬNULL(СтатистикаЗвонковПоЧасам.Максимум, 0) КАК Максимум,
		|	ЕСТЬNULL(СтатистикаЗвонковПоЧасам.Длительность, 0) КАК ДлительностьЗвонков,
		|	ЕСТЬNULL(СтатистикаСобытийПоЧасам.Длительность, 0) КАК ДлительностьСобытий
		|ИЗ
		|	СтатистикаЗвонковПоЧасам КАК СтатистикаЗвонковПоЧасам
		|		ПОЛНОЕ СОЕДИНЕНИЕ СтатистикаСобытийПоЧасам КАК СтатистикаСобытийПоЧасам
		|		ПО СтатистикаЗвонковПоЧасам.День = СтатистикаСобытийПоЧасам.День
		|			И СтатистикаЗвонковПоЧасам.Час = СтатистикаСобытийПоЧасам.Час
		|
		|УПОРЯДОЧИТЬ ПО
		|	День,
		|	Час";
	
	Запрос.УстановитьПараметр("СтатистикаЗвонковПоЧасам", СтатистикаЗвонковПоЧасам);
	Запрос.УстановитьПараметр("СтатистикаСобытийПоЧасам", СтатистикаСобытийПоЧасам);
	
	СтатистикаПоЧасам = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьТабДокЗагруженностиЛиний(ТабДок, Макет, СтатистикаПоЧасам);
	
	Возврат Новый Структура("ТабДок, ИмеютсяПроблемыССобытиями", ТабДок, ИмеютсяПроблемыССобытиями);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДополнитьСтатистику(СтатистикаЗвонков, ТЗ, ОбрезатьГраницы, ДатаНачала, ДатаОкончания, ПолеКоличества, ПолеЗаполнения, ПолеСуммы = Неопределено)
	
	Если ОбрезатьГраницы Тогда
		мСтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТЗ Цикл
			Если СтрокаТаблицы.Дата < ДатаНачала Тогда
				// Только часть звонка попала в период, срезаем начало
				Если СтрокаТаблицы.Дата + СтрокаТаблицы.ВремяЗвонков < ДатаНачала Тогда
					мСтрокиКУдалению.Добавить(СтрокаТаблицы);
				Иначе
					СтрокаТаблицы.ВремяЗвонков = СтрокаТаблицы.ВремяЗвонков - (КонецДня(СтрокаТаблицы.Дата) - СтрокаТаблицы.Дата);
					СтрокаТаблицы.Дата = ДатаНачала;
					СтрокаТаблицы.День = ДатаНачала;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.Дата + СтрокаТаблицы.ВремяЗвонков > ДатаОкончания Тогда
				// Только часть звонка попала в период, срезаем конец
				СтрокаТаблицы.ВремяЗвонков = КонецДня(СтрокаТаблицы.Дата) - СтрокаТаблицы.Дата;
			ИначеЕсли НачалоДня(СтрокаТаблицы.Дата + СтрокаТаблицы.ВремяЗвонков) > НачалоДня(СтрокаТаблицы.Дата) Тогда
				// Звонок перешёл через полночь, разделяем на 2 строки
				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				СтрокаТаблицы.ВремяЗвонков = КонецДня(СтрокаТаблицы.Дата) - СтрокаТаблицы.Дата;
				
				НоваяСтрока[ПолеКоличества] = 0;
				НоваяСтрока.ВремяЗвонков = НоваяСтрока.ВремяЗвонков - (КонецДня(НоваяСтрока.Дата) - НоваяСтрока.Дата);
				НоваяСтрока.Дата = КонецДня(НоваяСтрока.Дата) + 1;
				НоваяСтрока.День = НоваяСтрока.Дата;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из мСтрокиКУдалению Цикл
			ТЗ.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	ТЗУникальных = ТЗ.Скопировать();
	ТЗУникальных.Свернуть("Номер");
	
	ТЗ.Свернуть("День, Оператор", СтрШаблон("%1, ВремяЗвонков", ПолеКоличества));
	
	Для Каждого Строка Из ТЗ Цикл
		Строки = СтатистикаЗвонков.НайтиСтроки(Новый Структура("День, Оператор", Строка.День, Строка.Оператор));
		
		Если Строки.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СтатистикаЗвонков.Добавить(), Строка);
			Продолжить;
		КонецЕсли;
		
		Строки[0][ПолеЗаполнения] = Строка[ПолеЗаполнения];
		Если ПолеСуммы <> Неопределено Тогда
			Строки[0][ПолеСуммы] = Строки[0][ПолеСуммы] + Строка[ПолеСуммы];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗУникальных;
	
КонецФункции

Процедура ОбработатьСобытияБитФона(СтатистикаСобытий, тзСобытия, ДатаНачала, ДатаОкончания, ИмеютсяПроблемыССобытиями)
	
	ЗаполнитьСобытияНаГраницахПоЗвонкам(тзСобытия, ИмеютсяПроблемыССобытиями);
	
	тзПользователи = тзСобытия.Скопировать(,"Пользователь");
	тзПользователи.Свернуть("Пользователь");
	
	ТаблицаНедоступности = ПолучитьТаблицуНедоступности(тзПользователи.ВыгрузитьКолонку("Пользователь"), ДатаНачала, ДатаОкончания);
	
	Для Каждого СтрокаПользователя Из тзПользователи Цикл
		
		Пользователь = СтрокаПользователя.Пользователь;
		
		СтрокиТекущегоПользователя = тзСобытия.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СтрокиТекущегоПользователя, тзСобытия);
		
		СтрокиНедоступностиПользователя = ТаблицаНедоступности.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СтрокиНедоступностиПользователя, ТаблицаНедоступности);
		
		ТаблицаИнтерваловРабочегоВремени = ПолучитьТаблицуИнтервалов(Пользователь, СтрокиТекущегоПользователя);
		ВырезатьНедоступноеВремя(ТаблицаИнтерваловРабочегоВремени, СтрокиНедоступностиПользователя);
		
		ДополнитьСтатистикуПоСобытиям(СтатистикаСобытий, Пользователь, ТаблицаИнтерваловРабочегоВремени);
	КонецЦикла;
	
	СтатистикаСобытий.Свернуть("Оператор, День", "ВремяРаботы");
	
КонецПроцедуры

Процедура ЗаполнитьСобытияНаГраницахПоЗвонкам(тзСобытия, ИмеютсяПроблемыССобытиями)
	
	ДниСобытийПоПользователям = тзСобытия.Скопировать();
	ДниСобытийПоПользователям.Свернуть("Пользователь, День");
	
	тзПервыеСобытия = тзСобытия.СкопироватьКолонки();
	тзПоследниеСобытия = тзСобытия.СкопироватьКолонки();
	
	Для Каждого ДеньСобытияПользователя Из ДниСобытийПоПользователям Цикл
		ТекущийПользователь = ДеньСобытияПользователя.Пользователь;
		ТекущийДень = ДеньСобытияПользователя.День;
		
		СобытияДня = тзСобытия.НайтиСтроки(Новый Структура("Пользователь, День", ТекущийПользователь, ТекущийДень));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СобытияДня, тзСобытия);
		
		ПоследнееСобытие = СобытияДня[СобытияДня.ВГраница()];
		ПервоеСобытие = СобытияДня[0];
		
		Если ПервоеСобытие.Событие <> Перечисления.СобытияБитФон.Логин Тогда
			ЗаполнитьЗначенияСвойств(тзПервыеСобытия.Добавить(), ПервоеСобытие);
		КонецЕсли;
		Если ПоследнееСобытие.Событие <> Перечисления.СобытияБитФон.Логаут Тогда
			ЗаполнитьЗначенияСвойств(тзПоследниеСобытия.Добавить(), ПоследнееСобытие);
		КонецЕсли;
	КонецЦикла;
	
	ИмеютсяПроблемыССобытиями = тзПервыеСобытия.Количество() > 0 Или тзПоследниеСобытия.Количество() > 0;
	
	Если Не ИмеютсяПроблемыССобытиями Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервыеСтроки.Пользователь КАК Пользователь,
		|	ПервыеСтроки.Дата КАК Дата
		|ПОМЕСТИТЬ ПервыеСтроки
		|ИЗ
		|	&ПервыеСтроки КАК ПервыеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеСтроки.Пользователь КАК Пользователь,
		|	ПоследниеСтроки.Дата КАК Дата
		|ПОМЕСТИТЬ ПоследниеСтроки
		|ИЗ
		|	&ПоследниеСтроки КАК ПоследниеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервыеСтроки.Пользователь КАК Пользователь,
		|	ПервыеСтроки.Дата КАК Дата,
		|	ЕСТЬNULL(ПервыеЗвонки.ДатаНачалаЗвонка, НАЧАЛОПЕРИОДА(ПервыеСтроки.Дата, ДЕНЬ)) КАК ДатаНачалаЗвонка
		|ИЗ
		|	ПервыеСтроки КАК ПервыеСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПервыеСтроки.Пользователь КАК Пользователь,
		|			ПервыеСтроки.Дата КАК Дата,
		|			МИНИМУМ(бит_ИсторияЗвонков.Дата) КАК ДатаНачалаЗвонка
		|		ИЗ
		|			РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервыеСтроки КАК ПервыеСтроки
		|				ПО (ПервыеСтроки.Пользователь = бит_ИсторияЗвонков.Пользователь)
		|					И (бит_ИсторияЗвонков.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ПервыеСтроки.Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(ПервыеСтроки.Дата, ДЕНЬ))
		|					И бит_ИсторияЗвонков.Дата < ПервыеСтроки.Дата
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПервыеСтроки.Пользователь,
		|			ПервыеСтроки.Дата) КАК ПервыеЗвонки
		|		ПО (ПервыеЗвонки.Пользователь = ПервыеСтроки.Пользователь)
		|			И (ПервыеЗвонки.Дата = ПервыеСтроки.Дата)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеСтроки.Пользователь КАК Пользователь,
		|	ПоследниеСтроки.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ПоследниеЗвонки.ДатаКонцаЗвонка ЕСТЬ NULL
		|			ТОГДА КОНЕЦПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ)
		|		КОГДА НАЧАЛОПЕРИОДА(ПоследниеЗвонки.ДатаКонцаЗвонка, ДЕНЬ) > КОНЕЦПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ)
		|			ТОГДА КОНЕЦПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ)
		|		ИНАЧЕ ПоследниеЗвонки.ДатаКонцаЗвонка
		|	КОНЕЦ КАК ДатаКонцаЗвонка
		|ИЗ
		|	ПоследниеСтроки КАК ПоследниеСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПоследниеСтроки.Пользователь КАК Пользователь,
		|			ПоследниеСтроки.Дата КАК Дата,
		|			МАКСИМУМ(ДОБАВИТЬКДАТЕ(бит_ИсторияЗвонков.Дата, СЕКУНДА, бит_ИсторияЗвонков.ДлительностьЗвонка)) КАК ДатаКонцаЗвонка
		|		ИЗ
		|			РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеСтроки КАК ПоследниеСтроки
		|				ПО (ПоследниеСтроки.Пользователь = бит_ИсторияЗвонков.Пользователь)
		|					И (бит_ИсторияЗвонков.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ))
		|					И бит_ИсторияЗвонков.Дата > ПоследниеСтроки.Дата
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПоследниеСтроки.Пользователь,
		|			ПоследниеСтроки.Дата) КАК ПоследниеЗвонки
		|		ПО (ПоследниеЗвонки.Пользователь = ПоследниеСтроки.Пользователь)
		|			И (ПоследниеЗвонки.Дата = ПоследниеСтроки.Дата)";
	
	Запрос.УстановитьПараметр("ПервыеСтроки", тзПервыеСобытия);
	Запрос.УстановитьПараметр("ПоследниеСтроки", тзПоследниеСобытия);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПервые = Результат[2].Выбрать();
	Пока ВыборкаПервые.Следующий() Цикл
		ДобавитьСтрокуТЗСобытия(тзСобытия, ВыборкаПервые.Пользователь, ВыборкаПервые.ДатаНачалаЗвонка, Перечисления.СобытияБитФон.Логин);
	КонецЦикла;
	
	ВыборкаПоследние = Результат[3].Выбрать();
	Пока ВыборкаПоследние.Следующий() Цикл
		ДобавитьСтрокуТЗСобытия(тзСобытия, ВыборкаПоследние.Пользователь, ВыборкаПоследние.ДатаКонцаЗвонка, Перечисления.СобытияБитФон.Логаут);
	КонецЦикла;
	
	тзСобытия.Сортировать("Пользователь, Дата, Приоритет");
	
КонецПроцедуры

Функция ПолучитьДатуПоследнегоЗвонка(Пользователь, ВремяНачалаРаботы, ВремяОкончанияРаботы)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ИсторияЗвонков.ДлительностьЗвонка КАК ДлительностьЗвонка,
		|	бит_ИсторияЗвонков.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|ГДЕ
		|	бит_ИсторияЗвонков.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И бит_ИсторияЗвонков.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	бит_ИсторияЗвонков.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаНач", ВремяНачалаРаботы);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ДатаКон", ВремяОкончанияРаботы);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	Если РезультатЗапроса.Количество() <> 0 Тогда
		Возврат РезультатЗапроса.Дата + РезультатЗапроса.ДлительностьЗвонка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуИнтервалов(Пользователь, СтрокиТекущегоПользователя)
	
	ТаблицаИнтерваловРабочегоВремени = Новый ТаблицаЗначений;
	ТаблицаИнтерваловРабочегоВремени.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтерваловРабочегоВремени.Колонки.Добавить("ДатаОкончания");
	
	Для Каждого Строка Из СтрокиТекущегоПользователя Цикл
		Если Строка.Событие <> Перечисления.СобытияБитФон.Логин Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяНачалаРаботы = Строка.Дата;
		ВремяОкончанияРаботы = Строка.Дата;
		
		Для НомерСтроки = СтрокиТекущегоПользователя.Найти(Строка) + 1 По СтрокиТекущегоПользователя.ВГраница() Цикл
			
			ПоследующаяСтрока = СтрокиТекущегоПользователя[НомерСтроки];
			
			Если ПоследующаяСтрока.Событие = Перечисления.СобытияБитФон.НаЛинии Тогда
				ВремяОкончанияРаботы = ПоследующаяСтрока.Дата;
				
			ИначеЕсли ПоследующаяСтрока.Событие = Перечисления.СобытияБитФон.Логаут Тогда
				ВремяОкончанияРаботы = ПоследующаяСтрока.Дата;
				Прервать;
				
			ИначеЕсли ПоследующаяСтрока.Событие = Перечисления.СобытияБитФон.Логин Тогда
				
				Если Строка.Дата = ВремяОкончанияРаботы
					И ПоследующаяСтрока.Дата > Строка.Дата
				Тогда
					// Между двумя логинами
					ДатаПоследнегоЗвонка = ПолучитьДатуПоследнегоЗвонка(Пользователь, Строка.Дата, ПоследующаяСтрока.Дата);
					Если ДатаПоследнегоЗвонка <> Неопределено Тогда
						Если ДатаПоследнегоЗвонка <= ПоследующаяСтрока.Дата Тогда
							ВремяОкончанияРаботы = ДатаПоследнегоЗвонка;
						Иначе
							ВремяОкончанияРаботы = ПоследующаяСтрока.Дата;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Строка.Дата <> ВремяОкончанияРаботы Тогда
			Интервал = ТаблицаИнтерваловРабочегоВремени.Добавить();
			Интервал.ДатаНачала = Строка.Дата;
			Интервал.ДатаОкончания = ВремяОкончанияРаботы;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИнтерваловРабочегоВремени.Сортировать("ДатаНачала");
	
	Возврат ТаблицаИнтерваловРабочегоВремени;
	
КонецФункции

Функция ПолучитьТаблицуНедоступности(Пользователи, ДатаНачала, ДатаОкончания)
	
	ТаблицаНедоступности = Новый ТаблицаЗначений;
	ТаблицаНедоступности.Колонки.Добавить("ДатаНачала");
	ТаблицаНедоступности.Колонки.Добавить("ДатаОкончания");
	ТаблицаНедоступности.Колонки.Добавить("Пользователь");
	ТаблицаНедоступности.Колонки.Добавить("День");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_СобытияБитФон.Пользователь КАК Пользователь,
		|	бит_СобытияБитФон.Дата КАК Дата,
		|	бит_СобытияБитФон.Событие КАК Событие
		|ИЗ
		|	РегистрСведений.бит_СобытияБитФон КАК бит_СобытияБитФон
		|ГДЕ
		|	бит_СобытияБитФон.Пользователь В (&Пользователи)
		|	И бит_СобытияБитФон.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, -2) И &ДатаОкончания
		|	И (бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(ПеречислениЕ.СобытияБитФон.Доступен)
		|			ИЛИ бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(ПеречислениЕ.СобытияБитФон.Недоступен))
		|
		|УПОРЯДОЧИТЬ ПО
		|	бит_СобытияБитФон.Пользователь,
		|	бит_СобытияБитФон.Дата";
	
	Запрос.УстановитьПараметр("Пользователи",	Пользователи);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	тзСобытий = Запрос.Выполнить().Выгрузить();
	
	Если тзСобытий.Количество() = 0 Тогда
		Возврат ТаблицаНедоступности;
	КонецЕсли;
	
	Для Каждого Пользователь Из Пользователи Цикл
		
		СтрокиСобытий = тзСобытий.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СтрокиСобытий, тзСобытий);
		
		ПоискНачалаИнтервала = Истина;
		СтрокаИнтервалаНедоступности = Неопределено;
		
		Для Каждого СтрокаСобытия Из СтрокиСобытий Цикл
			
			Если СтрокаСобытия.Событие = Перечисления.СобытияБитФон.Недоступен
				И ПоискНачалаИнтервала
			Тогда
				СтрокаИнтервалаНедоступности = ТаблицаНедоступности.Добавить();
				СтрокаИнтервалаНедоступности.ДатаНачала = СтрокаСобытия.Дата;
				СтрокаИнтервалаНедоступности.ДатаОкончания = Дата(2999,1,1);
				СтрокаИнтервалаНедоступности.Пользователь = Пользователь;
				СтрокаИнтервалаНедоступности.День = НачалоДня(СтрокаИнтервалаНедоступности.ДатаНачала);
				
				ПоискНачалаИнтервала = Ложь;
			ИначеЕсли СтрокаСобытия.Событие = Перечисления.СобытияБитФон.Доступен Тогда
				Если СтрокаИнтервалаНедоступности <> Неопределено
					И Не ПоискНачалаИнтервала
				Тогда
					СтрокаИнтервалаНедоступности.ДатаОкончания = СтрокаСобытия.Дата;
					
				ИначеЕсли ПоискНачалаИнтервала
						И ТаблицаНедоступности.НайтиСтроки(Новый Структура("Пользователь", Пользователь)).Количество() = 0
				Тогда
					СтрокаИнтервалаНедоступности = ТаблицаНедоступности.Добавить();
					СтрокаИнтервалаНедоступности.ДатаНачала = ДобавитьМесяц(ДатаНачала, -2);
					СтрокаИнтервалаНедоступности.ДатаОкончания = СтрокаСобытия.Дата;
					СтрокаИнтервалаНедоступности.Пользователь = Пользователь;
					СтрокаИнтервалаНедоступности.День = НачалоДня(СтрокаИнтервалаНедоступности.ДатаНачала);
				КонецЕсли;
				
				ПоискНачалаИнтервала = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаНедоступности;
	
КонецФункции

Процедура ВырезатьНедоступноеВремя(ТаблицаИнтерваловРабочегоВремени, СтрокиНедоступности)
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого ИнтервалРабочегоВремени Из ТаблицаИнтерваловРабочегоВремени Цикл
		Для Каждого ИнтервалНедоступности Из СтрокиНедоступности Цикл
			
			Если ИнтервалРабочегоВремени.ДатаНачала >= ИнтервалНедоступности.ДатаНачала
				И ИнтервалРабочегоВремени.ДатаОкончания <= ИнтервалНедоступности.ДатаОкончания
			Тогда
				// Вся свободная строка внутри занятой - удалить
				СтрокиКУдалению.Добавить(ИнтервалРабочегоВремени);
				
			ИначеЕсли ИнтервалРабочегоВремени.ДатаНачала >= ИнтервалНедоступности.ДатаНачала
				И ИнтервалРабочегоВремени.ДатаНачала < ИнтервалНедоступности.ДатаОкончания
				И ИнтервалРабочегоВремени.ДатаОкончания > ИнтервалНедоступности.ДатаОкончания
			Тогда
				// Срезать начало
				ИнтервалРабочегоВремени.ДатаНачала = ИнтервалНедоступности.ДатаОкончания;
				
			ИначеЕсли ИнтервалРабочегоВремени.ДатаНачала < ИнтервалНедоступности.ДатаНачала
				И ИнтервалРабочегоВремени.ДатаОкончания > ИнтервалНедоступности.ДатаНачала
				И ИнтервалРабочегоВремени.ДатаОкончания <= ИнтервалНедоступности.ДатаОкончания
			Тогда
				// Срезать конец
				ИнтервалРабочегоВремени.ДатаОкончания = ИнтервалНедоступности.ДатаНачала;
				
			ИначеЕсли ИнтервалРабочегоВремени.ДатаНачала < ИнтервалНедоступности.ДатаНачала
				И ИнтервалРабочегоВремени.ДатаОкончания > ИнтервалНедоступности.ДатаОкончания
			Тогда
				// Расчленить на 2 части
				НоваяСтрока = ТаблицаИнтерваловРабочегоВремени.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИнтервалРабочегоВремени);
				НоваяСтрока.ДатаНачала = ИнтервалНедоступности.ДатаОкончания;
				НоваяСтрока.ДатаОкончания = ИнтервалРабочегоВремени.ДатаОкончания;
				
				ИнтервалРабочегоВремени.ДатаОкончания = ИнтервалНедоступности.ДатаНачала;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ТаблицаИнтерваловРабочегоВремени.Удалить(Строка);
	КонецЦикла;
	
	ТаблицаИнтерваловРабочегоВремени.Сортировать("ДатаНачала");
	
КонецПроцедуры

Процедура ДополнитьСтатистикуПоСобытиям(СтатистикаСобытий, Пользователь, ТаблицаИнтерваловРабочегоВремени)
	
	Для Каждого СтрокаИнтервала Из ТаблицаИнтерваловРабочегоВремени Цикл
		СтрокаСтатистики = СтатистикаСобытий.Добавить();
		СтрокаСтатистики.Оператор = Пользователь;
		СтрокаСтатистики.День = НачалоДня(СтрокаИнтервала.ДатаНачала);
		СтрокаСтатистики.ВремяРаботы = СтрокаИнтервала.ДатаОкончания - СтрокаИнтервала.ДатаНачала;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабДокПоОператорам(ТабДок, Макет, тСтатистика, УникальныеПропущенные, УникальныеПринятые, УникальныеИсходящие, ДатаНачала, ДатаОкончания)
	
	тСтатистика.Сортировать("Оператор, День");
	
	ИтогиПоОператорам = тСтатистика.Скопировать();
	ИтогиПоОператорам.Свернуть("Оператор", "ЗвонковПринято, ЗвонковПропущено, ЗвонковСовершено, ВремяЗвонков, ВремяРаботы");
	
	ТабДок.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Для Каждого СтрокаОператора Из ИтогиПоОператорам Цикл
		ОбластьСотрудник = Макет.ПолучитьОбласть("СтрокаСотрудник");
		ПараметрыОбл = ОбластьСотрудник.Параметры;
		ПараметрыОбл.Оператор = СтрокаОператора.Оператор;
		
		ПараметрыОбл.ОператорПринято		= СтрокаОператора.ЗвонковПринято;
		ПараметрыОбл.ОператорПропущено		= СтрокаОператора.ЗвонковПропущено;
		ПараметрыОбл.ОператорСовершено		= СтрокаОператора.ЗвонковСовершено;
		ПараметрыОбл.ОператорВремяЗвонков	= ПредставлениеДлительности(СтрокаОператора.ВремяЗвонков);
		ПараметрыОбл.ОператорВремяРаботы	= ПредставлениеДлительности(СтрокаОператора.ВремяРаботы);
		
		ТабДок.Вывести(ОбластьСотрудник, 1);
		
		СтрокиПоДням = тСтатистика.НайтиСтроки(Новый Структура("Оператор", СтрокаОператора.Оператор));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СтрокиПоДням, тСтатистика);
		
		Для Каждого СтрокаДня Из СтрокиПоДням Цикл
			ОбластьДанные = Макет.ПолучитьОбласть("СтрокаДанные");
			ПараметрыОбл					= ОбластьДанные.Параметры;
			ПараметрыОбл.Дата				= Формат(СтрокаДня.День,"ДФ=dd.MM.yyyy");
			ПараметрыОбл.ЗвонковПринято		= СтрокаДня.ЗвонковПринято;
			ПараметрыОбл.ЗвонковПропущено	= СтрокаДня.ЗвонковПропущено;
			ПараметрыОбл.ЗвонковСовершено	= СтрокаДня.ЗвонковСовершено;
			ПараметрыОбл.ВремяЗвонков		= ПредставлениеДлительности(СтрокаДня.ВремяЗвонков);
			ПараметрыОбл.ВремяРаботы		= ПредставлениеДлительности(СтрокаДня.ВремяРаботы);
			ТабДок.Вывести(ОбластьДанные, 2);
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьИтогов = Макет.ПолучитьОбласть("СтрокаИтогов");
	
	ПараметрыОбл = ОбластьИтогов.Параметры;
	ПараметрыОбл.Период				= СтрШаблон("%1 - %2", Формат(ДатаНачала,"ДФ=dd.MM.yyyy"), Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"));
	ПараметрыОбл.ВсегоПринято		= ПолучитьКоличествоЗвонков(УникальныеПринятые,		тСтатистика.Итог("ЗвонковПринято"));
	ПараметрыОбл.ВсегоПропущено		= ПолучитьКоличествоЗвонков(УникальныеПропущенные,	тСтатистика.Итог("ЗвонковПропущено"));
	ПараметрыОбл.ВсегоСовершено		= ПолучитьКоличествоЗвонков(УникальныеИсходящие,	тСтатистика.Итог("ЗвонковСовершено"));
	ПараметрыОбл.ОбщееВремяЗвонков	= ПредставлениеДлительности(тСтатистика.Итог("ВремяЗвонков"));
	ПараметрыОбл.ОбщееВремяРаботы	= ПредставлениеДлительности(тСтатистика.Итог("ВремяРаботы"));
	
	ТабДок.Вывести(ОбластьИтогов);
	
КонецПроцедуры

Функция ПолучитьКоличествоЗвонков(ТаблицаУникальныхЗвонков, КоличествоЗвонковВсего)
	
	КоличествоЗвонков = КоличествоЗвонковВсего;
	КоличествоУникальныхЗвонков = ТаблицаУникальныхЗвонков.Количество();
	
	Если КоличествоЗвонковВсего > КоличествоУникальныхЗвонков Тогда
		КоличествоЗвонков = СтрШаблон("%1 (%2)", КоличествоЗвонков, КоличествоУникальныхЗвонков);
	КонецЕсли;
	
	Возврат КоличествоЗвонков;
	
КонецФункции

Процедура ДобавитьСтрокуТЗСобытия(тзСобытия, Пользователь, Дата, Событие)
	
	
	НоваяСтрокаЛогина = тзСобытия.Добавить();
	НоваяСтрокаЛогина.Пользователь	= Пользователь;
	НоваяСтрокаЛогина.Дата			= Дата;
	НоваяСтрокаЛогина.День	= НачалоДня(Дата);
	НоваяСтрокаЛогина.Событие		= Событие;
	
	Если Событие = Перечисления.СобытияБитФон.НаЛинии Тогда
		НоваяСтрокаЛогина.Приоритет = 0;
	ИначеЕсли Событие = Перечисления.СобытияБитФон.Логаут Тогда
		НоваяСтрокаЛогина.Приоритет = 1;
	Иначе
		НоваяСтрокаЛогина.Приоритет = 2;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗвонкиПоЧасам(СтатистикаЗвонковПоЧасам, ВыборкаЗвонков, ДатаНачала, ДатаОкончания)
	
	Звонки = Новый ТаблицаЗначений;
	Звонки.Колонки.Добавить("День");
	Звонки.Колонки.Добавить("НачалоЗвонка");
	Звонки.Колонки.Добавить("КонецЗвонка");
	Звонки.Индексы.Добавить("День");
	
	НачалоПериода = НачалоДня(ДатаНачала);
	КонецПериода = КонецДня(ДатаОкончания);
	
	Пока ВыборкаЗвонков.Следующий() Цикл
		Если ВыборкаЗвонков.День < НачалоПериода Тогда
			Если ВыборкаЗвонков.КонецЗвонка > НачалоПериода Тогда
				ЗаполнитьЗначенияСвойств(Звонки.Добавить(), Новый Структура("День, НачалоЗвонка, КонецЗвонка", НачалоПериода, НачалоПериода, ВыборкаЗвонков.КонецЗвонка));
			КонецЕсли;
		ИначеЕсли ВыборкаЗвонков.КонецЗвонка > КонецПериода Тогда
			ЗаполнитьЗначенияСвойств(Звонки.Добавить(), Новый Структура("День, НачалоЗвонка, КонецЗвонка", НачалоДня(ВыборкаЗвонков.НачалоЗвонка), ВыборкаЗвонков.НачалоЗвонка, КонецПериода));
		ИначеЕсли ВыборкаЗвонков.День <> НачалоДня(ВыборкаЗвонков.КонецЗвонка) Тогда
			ЗаполнитьЗначенияСвойств(Звонки.Добавить(), Новый Структура("День, НачалоЗвонка, КонецЗвонка", НачалоДня(ВыборкаЗвонков.НачалоЗвонка), ВыборкаЗвонков.НачалоЗвонка, КонецДня(ВыборкаЗвонков.НачалоЗвонка)));
			ЗаполнитьЗначенияСвойств(Звонки.Добавить(), Новый Структура("День, НачалоЗвонка, КонецЗвонка", КонецДня(ВыборкаЗвонков.НачалоЗвонка) + 1, КонецДня(ВыборкаЗвонков.НачалоЗвонка) + 1, ВыборкаЗвонков.КонецЗвонка));
		Иначе
			ЗаполнитьЗначенияСвойств(Звонки.Добавить(), ВыборкаЗвонков);
		КонецЕсли;
	КонецЦикла;
	
	Звонки.Сортировать("НачалоЗвонка");
	
	ДниЗвонков = Звонки.Скопировать();
	ДниЗвонков.Свернуть("День");
	
	Для Каждого СтрокаДня Из ДниЗвонков Цикл
		ЗвонкиДня = Звонки.НайтиСтроки(Новый Структура("День", СтрокаДня.День));
		
		ОтрезкиЗвонковПоЧасам = Новый Соответствие;
		ДлительностьЗвонковПоЧасам = Новый Соответствие;
		
		Для Каждого СтрокаЗвонкаЗаДень Из ЗвонкиДня Цикл
			
			Если НачалоЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка) = НачалоЧаса(СтрокаЗвонкаЗаДень.КонецЗвонка) Тогда
				МассивОтрезков = ПолучитьМассивОтрезков(ОтрезкиЗвонковПоЧасам, НачалоЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка));
				МассивОтрезков.Добавить(Новый Структура("ДатаНачала, ДатаКонца", СтрокаЗвонкаЗаДень.НачалоЗвонка, СтрокаЗвонкаЗаДень.КонецЗвонка));
				
				ДлительностьЗвонкаВТекущемЧасе = СтрокаЗвонкаЗаДень.КонецЗвонка - СтрокаЗвонкаЗаДень.НачалоЗвонка;
				ДобавитьДлительностьПоЧасам(ДлительностьЗвонковПоЧасам, НачалоЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка), ДлительностьЗвонкаВТекущемЧасе);
				
			Иначе
				МассивОтрезков = ПолучитьМассивОтрезков(ОтрезкиЗвонковПоЧасам, НачалоЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка));
				МассивОтрезков.Добавить(Новый Структура("ДатаНачала, ДатаКонца", СтрокаЗвонкаЗаДень.НачалоЗвонка, КонецЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка)));
				
				ДлительностьЗвонкаВТекущемЧасе = КонецЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка) - СтрокаЗвонкаЗаДень.НачалоЗвонка + 1;
				ДобавитьДлительностьПоЧасам(ДлительностьЗвонковПоЧасам, НачалоЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка), ДлительностьЗвонкаВТекущемЧасе);
				
				МассивОтрезков = ПолучитьМассивОтрезков(ОтрезкиЗвонковПоЧасам, НачалоЧаса(СтрокаЗвонкаЗаДень.КонецЗвонка));
				МассивОтрезков.Добавить(Новый Структура("ДатаНачала, ДатаКонца", НачалоЧаса(СтрокаЗвонкаЗаДень.КонецЗвонка), СтрокаЗвонкаЗаДень.КонецЗвонка));
				
				ДлительностьЗвонкаВТекущемЧасе = СтрокаЗвонкаЗаДень.КонецЗвонка - НачалоЧаса(СтрокаЗвонкаЗаДень.КонецЗвонка);
				ДобавитьДлительностьПоЧасам(ДлительностьЗвонковПоЧасам, НачалоЧаса(СтрокаЗвонкаЗаДень.КонецЗвонка), ДлительностьЗвонкаВТекущемЧасе);
				
				Если НачалоЧаса(СтрокаЗвонкаЗаДень.КонецЗвонка) > КонецЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка) + 1 Тогда
					ТекущийЧас = КонецЧаса(СтрокаЗвонкаЗаДень.НачалоЗвонка) + 1;
					Пока ТекущийЧас < НачалоЧаса(СтрокаЗвонкаЗаДень.КонецЗвонка) Цикл
						МассивОтрезков = ПолучитьМассивОтрезков(ОтрезкиЗвонковПоЧасам, НачалоЧаса(ТекущийЧас));
						МассивОтрезков.Добавить(Новый Структура("ДатаНачала, ДатаКонца", НачалоЧаса(ТекущийЧас), КонецЧаса(ТекущийЧас)));
						
						ДлительностьЗвонкаВТекущемЧасе = КонецЧаса(ТекущийЧас) - НачалоЧаса(ТекущийЧас) + 1;
						ДобавитьДлительностьПоЧасам(ДлительностьЗвонковПоЧасам, НачалоЧаса(ТекущийЧас), ДлительностьЗвонкаВТекущемЧасе);
						
						ТекущийЧас = ТекущийЧас + 3600;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МинимальныйЧас = 23;
		МаксимальныйЧас = 0;
		ЧасыЗвонков = Новый Массив;
		Для Каждого ОтрезкиЗвонковЧаса Из ОтрезкиЗвонковПоЧасам Цикл
			
			СтрокаСтатистики = СтатистикаЗвонковПоЧасам.Добавить();
			СтрокаСтатистики.День = СтрокаДня.День;
			СтрокаСтатистики.Час = Число(Формат(ОтрезкиЗвонковЧаса.Ключ, "ДФ=ЧЧ"));
			СтрокаСтатистики.Максимум = ПолучитьМаксимумПересечений(ОтрезкиЗвонковЧаса.Значение);
			СтрокаСтатистики.Длительность = ДлительностьЗвонковПоЧасам.Получить(ОтрезкиЗвонковЧаса.Ключ);
			
			ЧасыЗвонков.Добавить(СтрокаСтатистики.Час);
			МинимальныйЧас = Мин(МинимальныйЧас, СтрокаСтатистики.Час);
			МаксимальныйЧас = Макс(МаксимальныйЧас, СтрокаСтатистики.Час);
		КонецЦикла;
		
		// Добавление окон
		Для Час = МинимальныйЧас По МаксимальныйЧас Цикл
			Если ЧасыЗвонков.Найти(Час) = Неопределено Тогда
				СтрокаСтатистики = СтатистикаЗвонковПоЧасам.Добавить();
				СтрокаСтатистики.День = СтрокаДня.День;
				СтрокаСтатистики.Час = Час;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СтатистикаЗвонковПоЧасам.Сортировать("День, Час");
	
КонецПроцедуры

Функция ПолучитьМассивОтрезков(ЧасыДня, Час)
	
	МассивОтрезков = ЧасыДня.Получить(Час);
	Если МассивОтрезков = Неопределено Тогда
		МассивОтрезков = Новый Массив;
		ЧасыДня.Вставить(Час, МассивОтрезков);
	КонецЕсли;
	
	Возврат МассивОтрезков;
	
КонецФункции

Процедура ДобавитьДлительностьПоЧасам(ДлительностьЗвонковПоЧасам, Час, Длительность)
	
	ТекущаяДлительность = ДлительностьЗвонковПоЧасам.Получить(Час);
	Если ТекущаяДлительность = Неопределено Тогда
		ТекущаяДлительность = 0;
	КонецЕсли;
	
	ДлительностьЗвонковПоЧасам.Вставить(Час, Длительность + ТекущаяДлительность);
	
КонецПроцедуры

Функция ПолучитьМаксимумПересечений(Отрезки)
	
	Если Отрезки.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ГраницыОтрезков = Новый ТаблицаЗначений;
	ГраницыОтрезков.Колонки.Добавить("Граница");
	ГраницыОтрезков.Колонки.Добавить("Начало");
	
	Для Каждого СтрокаОтрезка Из Отрезки Цикл
		СтрокаГраницы = ГраницыОтрезков.Добавить();
		СтрокаГраницы.Граница = СтрокаОтрезка.ДатаНачала;
		СтрокаГраницы.Начало = Истина;
		
		СтрокаГраницы = ГраницыОтрезков.Добавить();
		СтрокаГраницы.Граница = СтрокаОтрезка.ДатаКонца;
		СтрокаГраницы.Начало = Ложь;
	КонецЦикла;
	
	ГраницыОтрезков.Сортировать("Граница, Начало убыв");
	
	КоличествоПересечений = 0;
	МаксимумПересечений = 0;
	
	Для Каждого Граница Из ГраницыОтрезков Цикл
		
		Если Граница.Начало Тогда
			КоличествоПересечений = КоличествоПересечений + 1;
		Иначе
			КоличествоПересечений = КоличествоПересечений - 1;
		КонецЕсли;
		
		МаксимумПересечений = Макс(МаксимумПересечений, КоличествоПересечений);
	КонецЦикла;
	
	Возврат МаксимумПересечений;
	
КонецФункции

Процедура ОбработатьСобытияБитФонаПоЧасам(СтатистикаСобытийПоЧасам, тзСобытия, ДатаНачала, ДатаОкончания, ИмеютсяПроблемыССобытиями)
	
	ЗаполнитьСобытияНаГраницахПоЗвонкам(тзСобытия, ИмеютсяПроблемыССобытиями);
	
	тзПользователи = тзСобытия.Скопировать(,"Пользователь");
	тзПользователи.Свернуть("Пользователь");
	
	ТаблицаНедоступности = ПолучитьТаблицуНедоступности(тзПользователи.ВыгрузитьКолонку("Пользователь"), ДатаНачала, ДатаОкончания);
	
	ДниСобытийПоПользователям = тзСобытия.Скопировать();
	ДниСобытийПоПользователям.Свернуть("Пользователь, День");
	
	СтатистикаСобытийПоПользователям = СтатистикаСобытийПоЧасам.Скопировать();
	СтатистикаСобытийПоПользователям.Колонки.Добавить("Пользователь");
	
	Для Каждого СтрокаДняПользователя Из ДниСобытийПоПользователям Цикл
		
		Пользователь = СтрокаДняПользователя.Пользователь;
		День = СтрокаДняПользователя.День;
		
		СтрокиТекущегоПользователя = тзСобытия.НайтиСтроки(Новый Структура("Пользователь, День", Пользователь, День));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СтрокиТекущегоПользователя, тзСобытия);
		
		СтрокиНедоступностиПользователя = ТаблицаНедоступности.НайтиСтроки(Новый Структура("Пользователь, День", Пользователь, День));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СтрокиНедоступностиПользователя, ТаблицаНедоступности);
		
		ТаблицаИнтерваловРабочегоВремени = ПолучитьТаблицуИнтервалов(Пользователь, СтрокиТекущегоПользователя);
		ВырезатьНедоступноеВремя(ТаблицаИнтерваловРабочегоВремени, СтрокиНедоступностиПользователя);
		
		ДополнитьСтатистикуСобытийПоЧасам(СтатистикаСобытийПоЧасам, Пользователь, День, ТаблицаИнтерваловРабочегоВремени);
	КонецЦикла;
	
	СтатистикаСобытийПоЧасам.Свернуть("День, Час", "Длительность");
	
КонецПроцедуры

Процедура ДополнитьСтатистикуСобытийПоЧасам(СтатистикаСобытийПоЧасам, Пользователь, День, ТаблицаИнтерваловРабочегоВремени)
	
	Для Каждого СтрокаИнтервала Из ТаблицаИнтерваловРабочегоВремени Цикл
		
		Если НачалоЧаса(СтрокаИнтервала.ДатаНачала) = НачалоЧаса(СтрокаИнтервала.ДатаОкончания) Тогда
			Длительность = СтрокаИнтервала.ДатаОкончания - СтрокаИнтервала.ДатаНачала;
			ДобавитьСтрокуСтатистикиСобытияЧаса(СтатистикаСобытийПоЧасам, День, НачалоЧаса(СтрокаИнтервала.ДатаНачала), Длительность);
		Иначе
			Длительность = КонецЧаса(СтрокаИнтервала.ДатаНачала) - СтрокаИнтервала.ДатаНачала + 1;
			ДобавитьСтрокуСтатистикиСобытияЧаса(СтатистикаСобытийПоЧасам, День, НачалоЧаса(СтрокаИнтервала.ДатаНачала), Длительность);
			
			Длительность = СтрокаИнтервала.ДатаОкончания - НачалоЧаса(СтрокаИнтервала.ДатаОкончания);
			ДобавитьСтрокуСтатистикиСобытияЧаса(СтатистикаСобытийПоЧасам, День, НачалоЧаса(СтрокаИнтервала.ДатаОкончания), Длительность);
			
			Если НачалоЧаса(СтрокаИнтервала.ДатаОкончания) > КонецЧаса(СтрокаИнтервала.ДатаНачала) + 1 Тогда
				ТекущийЧас = КонецЧаса(СтрокаИнтервала.ДатаНачала) + 1;
				Пока ТекущийЧас < НачалоЧаса(СтрокаИнтервала.ДатаОкончания) Цикл
					Длительность = КонецЧаса(ТекущийЧас) - НачалоЧаса(ТекущийЧас) + 1;
					ДобавитьСтрокуСтатистикиСобытияЧаса(СтатистикаСобытийПоЧасам, День, НачалоЧаса(ТекущийЧас), Длительность);
					
					ТекущийЧас = ТекущийЧас + 3600;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуСтатистикиСобытияЧаса(СтатистикаСобытийПоЧасам, День, НачалоЧаса, Длительность)
	
	НоваяСтрока = СтатистикаСобытийПоЧасам.Добавить();
	НоваяСтрока.День		 = День;
	НоваяСтрока.Час			 = (НачалоЧаса - НачалоДня(НачалоЧаса)) / 3600;
	НоваяСтрока.Длительность = Длительность;
	
КонецПроцедуры

Функция ЗаполнитьТабДокЗагруженностиЛиний(ТабДок, Макет, СтатистикаПоЧасам)
	
	ТабДок.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	ДниСтрок = СтатистикаПоЧасам.Скопировать();
	ДниСтрок.Свернуть("День");
	
	МаксимумЗаПериод = 0;
	ДлительностьЗвонковЗаПериод = 0;
	ДлительностьСобытийЗаПериод = 0;
	
	Итоги = Новый ТаблицаЗначений;
	Итоги.Колонки.Добавить("Час",					Новый ОписаниеТипов("Число"));
	Итоги.Колонки.Добавить("Максимум",				Новый ОписаниеТипов("Число"));
	Итоги.Колонки.Добавить("ДлительностьЗвонков",	Новый ОписаниеТипов("Число"));
	Итоги.Колонки.Добавить("ДлительностьСобытий",	Новый ОписаниеТипов("Число"));
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	Для Каждого СтрокаДня Из ДниСтрок Цикл
		
		СтрокиДня = СтатистикаПоЧасам.НайтиСтроки(Новый Структура("День", СтрокаДня.День));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СтрокиДня, СтатистикаПоЧасам);
		
		МаксимумЗаДень = 0;
		ДлительностьЗвонковЗаДень = 0;
		ДлительностьСобытийЗаДень = 0;
		СтрокиПоЧасам = Новый Массив;
		
		Для Каждого Строка Из СтрокиДня Цикл
			МаксимумЗаДень = Макс(МаксимумЗаДень, Строка.Максимум);
			ДлительностьЗвонковЗаДень = ДлительностьЗвонковЗаДень + Строка.ДлительностьЗвонков;
			ДлительностьСобытийЗаДень = ДлительностьСобытийЗаДень + Строка.ДлительностьСобытий;
			
			СтрокаДанных = ПолучитьСтрокуЧаса(Макет, Строка.Час, Строка.Максимум, Строка.ДлительностьЗвонков, Строка.ДлительностьСобытий);
			СтрокиПоЧасам.Добавить(СтрокаДанных);
			
			ОбновитьИтоги(Итоги, Строка.Час, Строка.Максимум, Строка.ДлительностьЗвонков, Строка.ДлительностьСобытий);
		КонецЦикла;
		
		МаксимумЗаПериод = Макс(МаксимумЗаПериод, МаксимумЗаДень);
		ДлительностьЗвонковЗаПериод = ДлительностьЗвонковЗаПериод + ДлительностьЗвонковЗаДень;
		ДлительностьСобытийЗаПериод = ДлительностьСобытийЗаПериод + ДлительностьСобытийЗаДень;
		
		СтрокаДаты = Макет.ПолучитьОбласть("Дата");
		СтрокаДаты.Параметры.Дата = Формат(СтрокаДня.День, "ДФ=dd.MM.yyyy");
		СтрокаДаты.Параметры.Максимум = Формат(МаксимумЗаДень, "ЧН=0");
		СтрокаДаты.Параметры.ДлительностьЗвонков = ПредставлениеДлительности(ДлительностьЗвонковЗаДень);
		СтрокаДаты.Параметры.ДлительностьСобытий = ПредставлениеДлительности(ДлительностьСобытийЗаДень);
		ТабДок.Вывести(СтрокаДаты, 1);
		
		Для Каждого СтрокаДанных Из СтрокиПоЧасам Цикл
			ТабДок.Вывести(СтрокаДанных, 2);
		КонецЦикла;
	КонецЦикла;
	
	СтрокаЗаПериод = Макет.ПолучитьОбласть("ЗаПериод");
	СтрокаЗаПериод.Параметры.Максимум = Формат(МаксимумЗаПериод, "ЧН=0");
	СтрокаЗаПериод.Параметры.ДлительностьЗвонков = ПредставлениеДлительности(ДлительностьЗвонковЗаПериод);
	СтрокаЗаПериод.Параметры.ДлительностьСобытий = ПредставлениеДлительности(ДлительностьСобытийЗаПериод);
	
	ТабДок.Вывести(СтрокаЗаПериод, 1);
	
	Итоги.Сортировать("Час");
	Для Каждого СтрокаИтогов Из Итоги Цикл
		СтрокаДанных = ПолучитьСтрокуЧаса(Макет, СтрокаИтогов.Час, СтрокаИтогов.Максимум, СтрокаИтогов.ДлительностьЗвонков, СтрокаИтогов.ДлительностьСобытий);
		ТабДок.Вывести(СтрокаДанных, 2);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
КонецФункции

Процедура ОбновитьИтоги(Итоги, Час, Максимум, ДлительностьЗвонков, ДлительностьСобытий)
	
	СтрокаИтогов = Итоги.Найти(Час, "Час");
	Если СтрокаИтогов = Неопределено Тогда
		СтрокаИтогов = Итоги.Добавить();
		СтрокаИтогов.Час = Час;
	КонецЕсли;
	
	СтрокаИтогов.Максимум = Макс(СтрокаИтогов.Максимум, Максимум);
	СтрокаИтогов.ДлительностьЗвонков = СтрокаИтогов.ДлительностьЗвонков + ДлительностьЗвонков;
	СтрокаИтогов.ДлительностьСобытий = СтрокаИтогов.ДлительностьСобытий + ДлительностьСобытий;
	
КонецПроцедуры

Функция ПолучитьСтрокуЧаса(Макет, Час, Максимум, ДлительностьЗвонков, ДлительностьСобытий)
	
	СтрокаДанных = Макет.ПолучитьОбласть("Данные");
	СтрокаДанных.Параметры.Время = Формат(Дата(1,1,1) + Час * 3600, "ДФ=ЧЧ:мм; ДП=");
	СтрокаДанных.Параметры.Максимум = Формат(Максимум, "ЧН=0");
	СтрокаДанных.Параметры.ДлительностьЗвонков = ПредставлениеДлительности(ДлительностьЗвонков);
	СтрокаДанных.Параметры.ДлительностьСобытий = ПредставлениеДлительности(ДлительностьСобытий);
	
	Возврат СтрокаДанных;
	
КонецФункции

Функция ПредставлениеДлительности(Длительность)
	
	ДлительностьМин = Окр(Длительность / 60);
	ДлительностьЧасыМинуты = Цел(ДлительностьМин/60) + ДлительностьМин%60/100;
	
	Возврат Формат(ДлительностьЧасыМинуты, "ЧДЦ=2; ЧРД=:; ЧН=0:00");
	
КонецФункции

#КонецОбласти