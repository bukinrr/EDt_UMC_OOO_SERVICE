#Область ОбработчикиСобытий

&НаКлиенте
Процедура _Сформировать(Команда)
		
	СформироватьНаСервере();
	
	// Скрываем сообщение о статусе
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь; 
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗаполнитьПараметрыНастроек() Тогда
		_Сформировать(Неопределено);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьНаСервере()
	
	// Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ПечатьРеестраОказанныхУслугПоСоглашению.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
	РеестрОУ = ПолучитьЗначениеПараметраРеестрОказанныхУслуг(Настройки);
	
	Если Не ЗначениеЗаполнено(РеестрОУ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан реестр оказанных услуг'"));
		Возврат;
	КонецЕсли;
	
	// Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);
	
	// Очищаем поле табличного документа
	Результат = Элементы.Результат;
	Результат.Очистить();
	
	ВысотаШапки = ВывестиШапкуОтчетаИПолучитьВысоту(Результат, РеестрОУ);
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

	// Вывод заголовков колонок на каждую страницу
	
	Попытка
		Результат.ПовторятьПриПечатиСтроки = Результат.Область(ВысотаШапки + 1,,ВысотаШапки + МакетКомпоновки.Макеты.Макет1.Макет.Количество());
	Исключение
	КонецПопытки;
	
	ВывестиПодвалОтчета(Результат, РеестрОУ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВывестиШапкуОтчетаИПолучитьВысоту(Результат, РеестрОУ)
	
	Макет = Отчеты.ПечатьРеестраОказанныхУслугПоСоглашению.ПолучитьМакет("МакетШапкаИПодвал");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Контрагент = ?(ЗначениеЗаполнено(РеестрОУ.Контрагент.НаименованиеПолное),РеестрОУ.Контрагент.НаименованиеПолное,РеестрОУ.Контрагент.Наименование);
	ОбластьШапка.Параметры.ДатаНач = Формат(РеестрОУ.НачалоПериода,"ДФ=dd.MM.yyyy; ДЛФ=DD");
	ОбластьШапка.Параметры.ДатаКон = Формат(РеестрОУ.КонецПериода,"ДФ=dd.MM.yyyy; ДЛФ=DD");
	ОбластьШапка.Параметры.Соглашение = РеестрОУ.Соглашение;
	
	Результат.Вывести(ОбластьШапка);
	
	Возврат ОбластьШапка.ВысотаТаблицы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиПодвалОтчета(Результат, РеестрОУ)
	
	ОбщаяСумма = ПолучитьОбщуюСуммуПоРееструОУ(РеестрОУ);
	
	Макет = Отчеты.ПечатьРеестраОказанныхУслугПоСоглашению.ПолучитьМакет("МакетШапкаИПодвал");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Итого = Формат(ОбщаяСумма,"ЧДЦ=2");
	ОбластьПодвал.Параметры.Прописью = ОбщегоНазначения.СформироватьСуммуПрописью(ОбщаяСумма,УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВалютаУчета"));
	ОбластьПодвал.Параметры.Комментарий = РеестрОУ.Комментарий;
	Если ЗначениеЗаполнено(РеестрОУ.Ответственный.Сотрудник) Тогда
		ОбластьПодвал.Параметры.Ответственный = РеестрОУ.Ответственный.Сотрудник;
	Иначе
		ОбластьПодвал.Параметры.Ответственный = "_______________________";
	КонецЕсли;
	
	Результат.Вывести(ОбластьПодвал);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбщуюСуммуПоРееструОУ(РеестрОУ)
	
	Услуги = РеестрОУ.Услуги;
	
	ОбщаяСумма = 0;
	
	Для Каждого Стр Из Услуги Цикл
		ОбщаяСумма = ОбщаяСумма + Стр.Сумма;
	КонецЦикла;
	
	Возврат ОбщаяСумма;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПараметраРеестрОказанныхУслуг(Настройки)
	
	ЭлементыПараметров = Настройки.ПараметрыДанных.Элементы;
	
	Для Каждого СтрЭлементы Из ЭлементыПараметров Цикл
		
		Если СтрЭлементы.Параметр = Новый ПараметрКомпоновкиДанных("РеестрОказанныхУслуг") Тогда
			Возврат СтрЭлементы.Значение;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПараметрыНастроек()
		
	Если ЗначениеЗаполнено(Параметры.РеестрОказанныхУслуг) Тогда
		
		ПараметрыДанныхНастроек = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;	
		
		Для Каждого Элемент Из ПараметрыДанныхНастроек Цикл
			Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных("РеестрОказанныхУслуг") Тогда
				Элемент.Значение = Параметры.РеестрОказанныхУслуг;	
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

#КонецОбласти