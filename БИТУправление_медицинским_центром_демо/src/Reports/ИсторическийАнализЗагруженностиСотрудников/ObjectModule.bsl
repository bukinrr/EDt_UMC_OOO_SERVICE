#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	
	ПараметрСписокДатНачала = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Дата"));
	ПараметрСписокКоличествоДней = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КоличествоДней"));
	ПараметрВключатьТекущуюДату = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВключатьТекущуюДату")).Значение;
		
	// Если только один элемент
	Если ТипЗнч(ПараметрСписокДатНачала.Значение) = Тип("Дата") Тогда
		Значение = ПараметрСписокДатНачала.Значение;
		ПараметрСписокДатНачала.Значение = Новый СписокЗначений;
		ПараметрСписокДатНачала.Значение.Добавить(Значение);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрСписокКоличествоДней.Значение) = Тип("Число") Тогда
		Значение = ПараметрСписокКоличествоДней.Значение;
		ПараметрСписокКоличествоДней.Значение = Новый СписокЗначений;
		ПараметрСписокКоличествоДней.Значение.Добавить(Значение);
	КонецЕсли;
	
	СписокДатНачала = Новый Массив;
	// Если не заполнен список дат, в массив добавится текущая дата
	Если Не ЗначениеЗаполнено(ПараметрСписокДатНачала.Значение) Тогда
		СписокДатНачала.Добавить(НачалоДня(ТекущаяДата()));
	Иначе
		Для Каждого Дата Из ПараметрСписокДатНачала.Значение Цикл
			СписокДатНачала.Добавить(Дата.Значение);
		КонецЦикла;
	КонецЕсли;
		
	СписокКоличествоДней = Новый Массив;
	// Если не заполнен список количества дней, в массив добавится 1
	Если Не ЗначениеЗаполнено(ПараметрСписокКоличествоДней.Значение) Тогда
		СписокКоличествоДней.Добавить(1);
	Иначе
		Для Каждого КоличествоДней Из ПараметрСписокКоличествоДней.Значение Цикл
			СписокКоличествоДней.Добавить(КоличествоДней.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если (ПараметрВключатьТекущуюДату
		И СписокДатНачала.Найти(НачалоДня(ТекущаяДата())) = Неопределено)
	Тогда
		СписокДатНачала.Добавить(НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
	ВидыНерабочегоВремени = ГрафикиСотрудников.ПолучитьВидыВремени(Ложь);
	ВидыРабочегоВремени = ГрафикиСотрудников.ПолучитьВидыВремени(Истина);
	
	Для Каждого ДатаНачала Из СписокДатНачала Цикл
		
		СписокДат = Новый Массив;
		Для Каждого КоличествоДней Из СписокКоличествоДней Цикл
			СписокДат.Добавить(ДатаНачала + 86400 * (КоличествоДней));
		КонецЦикла;
		
		ТаблицаСотрудников = ПолучитьСписокСотрудников(СписокДат, ВидыНерабочегоВремени, ВидыРабочегоВремени);
		ТаблицаСотрудников.Колонки.Добавить("ВремяЗаявок",					Новый ОписаниеТипов("Число"));
		ТаблицаСотрудников.Колонки.Добавить("КоличествоДней",				Новый ОписаниеТипов("Число"));
		ТаблицаСотрудников.Колонки.Добавить("Дата",							Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ПродолжительностьПоГрафику",	Новый ОписаниеТипов("Число"));
		
		Для Каждого КоличествоДней Из СписокКоличествоДней Цикл
			
			Начало = ДатаНачала + 86400 * (КоличествоДней);
			Конец = КонецДня(Начало);
			
			ТаблицаРабочегоВремени = ГрафикиСотрудников.ПолучитьРабочееВремяЗаПериод(Начало, Конец, Ложь, Ложь,, Тип("СправочникСсылка.Сотрудники"));
			ТаблицаРабочегоВремени.Колонки.Добавить("ПродолжительностьПоГрафику", Новый ОписаниеТипов("Число"));
			ТаблицаРабочегоВремени.Колонки.Добавить("Специализация");
			Для Каждого Строка Из ТаблицаРабочегоВремени Цикл
				Строка.ПродолжительностьПоГрафику = Окр((Строка.ВремяОкончания - Строка.ВремяНачала)/60);
				Строка.Специализация = Строка.Сотрудник.Специализация;
			КонецЦикла;
			ТаблицаРабочегоВремени.Свернуть("Филиал, Сотрудник, Специализация", "ПродолжительностьПоГрафику");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ЗаявкаРаботы.Продолжительность, МИНУТА) КАК ВремяЗаявок,
			|	НАЧАЛОПЕРИОДА(Заявка.ДатаНачала, ДЕНЬ) КАК Дата,
			|	ВЫБОР
			|		КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|			ТОГДА ЗаявкаРаботы.Ссылка.Сотрудник
			|		ИНАЧЕ ЗаявкаРаботы.Сотрудник
			|	КОНЕЦ КАК Сотрудник,
			|	Заявка.Филиал КАК Филиал,
			|	ВЫБОР
			|		КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|			ТОГДА ЗаявкаРаботы.Ссылка.Сотрудник.Специализация
			|		ИНАЧЕ ЗаявкаРаботы.Сотрудник.Специализация
			|	КОНЕЦ КАК Специализация
			|ИЗ
			|	Документ.Заявка.Работы КАК ЗаявкаРаботы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заявка КАК Заявка
			|		ПО ЗаявкаРаботы.Ссылка = Заявка.Ссылка
			|ГДЕ
			|	Заявка.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаявок.Отменена)
			|	И НЕ Заявка.ПометкаУдаления
			|	И Заявка.ДатаНачала МЕЖДУ &ДатаНачала И КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ)";
			
			Запрос.УстановитьПараметр("Дата", Начало);
			Запрос.УстановитьПараметр("ДатаНачала", Начало);
			
			ТаблицаВремениЗаявок = Запрос.Выполнить().Выгрузить();
			ТаблицаВремениЗаявок.Свернуть("Филиал, Сотрудник, Специализация", "ВремяЗаявок");
			
			Если ИтоговаяТаблица.Количество() = 0 Тогда
				ИтоговаяТаблица = ТаблицаРабочегоВремени.СкопироватьКолонки();
				ИтоговаяТаблица.Колонки.Добавить("ВремяЗаявок",		Новый ОписаниеТипов("Число"));
				ИтоговаяТаблица.Колонки.Добавить("КоличествоДней",	Новый ОписаниеТипов("Число"));
				ИтоговаяТаблица.Колонки.Добавить("Дата",			Новый ОписаниеТипов("Дата"));;
			КонецЕсли;
			
			Для Каждого Сотрудник Из ТаблицаСотрудников Цикл
				
				НоваяСтрока = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Сотрудник);
				
				Отбор = Новый Структура;
				Отбор.Вставить("Филиал",Сотрудник.Филиал);
				Отбор.Вставить("Сотрудник",Сотрудник.Сотрудник);
				Отбор.Вставить("Специализация",Сотрудник.Специализация);
				
				НайденныеСтрокиПродолжительности = ТаблицаРабочегоВремени.НайтиСтроки(Отбор);
				НайденныеСтрокиВремениЗаявок = ТаблицаВремениЗаявок.НайтиСтроки(Отбор);
				Если НайденныеСтрокиПродолжительности.Количество() > 0 Тогда
					НоваяСтрока.ПродолжительностьПоГрафику = НайденныеСтрокиПродолжительности[0].ПродолжительностьПоГрафику;
				КонецЕсли;
				Если НайденныеСтрокиВремениЗаявок.Количество() > 0 Тогда
					НоваяСтрока.ВремяЗаявок = НайденныеСтрокиВремениЗаявок[0].ВремяЗаявок;
				КонецЕсли;
				НоваяСтрока.КоличествоДней = КоличествоДней;
				НоваяСтрока.Дата = ДатаНачала;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ВнешниеНаборыДанных = Новый Структура("Данные",ИтоговаяТаблица);
	
	ОсновнойМакетОформления = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойМакетОформленияСКД");
	КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрМакет = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
	ПараметрМакет.Значение = ОсновнойМакетОформления;
	ПараметрМакет.Использование = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСписокСотрудников(СписокДат, ВидыНерабочегоВремени, ВидыРабочегоВремени)
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	Для Каждого Дата Из СписокДат Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГрафикиРаботы.Сотрудник КАК Сотрудник,
			|	ГрафикиРаботы.ВидВремени КАК ВидВремени,
			|	ГрафикиРаботы.Филиал КАК Филиал
			|ПОМЕСТИТЬ Графики
			|ИЗ
			|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
			|ГДЕ
			|	ГрафикиРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И НЕ ГрафикиРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|	И ГрафикиРаботы.Сотрудник.УчаствуетВКалендарномПланировании = ИСТИНА
			|	И (ГрафикиРаботы.Филиал = &Филиал
			|			ИЛИ &Филиал = НЕОПРЕДЕЛЕНО)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Графики.Сотрудник КАК Сотрудник,
			|	Графики.Филиал КАК Филиал,
			|	Графики.Сотрудник.Специализация КАК Специализация
			|ИЗ
			|	Графики КАК Графики
			|ГДЕ
			|	(Графики.ВидВремени В (&ВидыРабочегоВремени)
			|			ИЛИ Графики.ВидВремени В (&ВидыНерабочегоВремени))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Графики.Сотрудник";
		
		Запрос.УстановитьПараметр("ВидыНерабочегоВремени", ВидыНерабочегоВремени);
		Запрос.УстановитьПараметр("ВидыРабочегоВремени", ВидыРабочегоВремени);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));
		Запрос.УстановитьПараметр("Филиал", Неопределено);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСотрудников.Количество() = 0 Тогда
			ТаблицаСотрудников = РезультатЗапроса.СкопироватьКолонки();
		КонецЕсли;
		
		Для Каждого Строка Из РезультатЗапроса Цикл
			НовыйСотрудник = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйСотрудник, Строка);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаСотрудников.Свернуть("Сотрудник, Филиал, Специализация");
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

#КонецОбласти