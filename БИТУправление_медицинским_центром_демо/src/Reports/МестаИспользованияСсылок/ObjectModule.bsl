#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов
// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.ФормироватьСразу = Истина;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Переформируем заголовок по набору ссылок.
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	НаборСсылок = Настройки.ПараметрыДанных.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных("НаборСсылок") );
	Если НаборСсылок <> Неопределено Тогда
		НаборСсылок = НаборСсылок.Значение;
	КонецЕсли;
	Заголовок = ЗаголовокПоНаборуСсылок(НаборСсылок);
	КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок", Заголовок);
	
	ПроцессорКомпоновки = ПроцессорКомпоновки(ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроцессорКомпоновки(ДанныеРасшифровки = Неопределено, ТипГенератора = "ГенераторМакетаКомпоновкиДанных")
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Список ссылок из параметров.
	ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных("НаборСсылок") ).Значение;
	ТипЗначения = ТипЗнч(ЗначениеПараметра);
	Если ТипЗначения = Тип("СписокЗначений") Тогда
		МассивСсылок = ЗначениеПараметра.ВыгрузитьЗначения();
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		МассивСсылок = ЗначениеПараметра;
	Иначе
		МассивСсылок = Новый Массив;
		Если ЗначениеПараметра <>Неопределено Тогда
			МассивСсылок.Добавить(ЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
	// Параметры вывода из фиксированных параметров.
	Для Каждого ПараметрВывода Из КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыВывода.Элементы Цикл
		Если ПараметрВывода.Использование Тогда
			Элемент = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрВывода.Параметр);
			Если Элемент <> Неопределено Тогда
				Элемент.Использование = Истина;
				Элемент.Значение      = ПараметрВывода.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Таблицы источников данных
	МестаИспользования = МестаИспользования(МассивСсылок);
	
	// Проверяем чтобы у нас были все ссылки.
	Для Каждого Ссылка Из МассивСсылок Цикл
		Если МестаИспользования.Найти(Ссылка, "Ссылка") = Неопределено Тогда
			Дополнительно = МестаИспользования.Добавить();
			Дополнительно.Ссылка = Ссылка;
			Дополнительно.ВспомогательныеДанные = Истина;
		КонецЕсли;
	КонецЦикла;
		
	ВнешниеДанные = Новый Структура;
	ВнешниеДанные.Вставить("МестаИспользования", МестаИспользования);
	
	// Выполнение
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, , Тип(ТипГенератора));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеДанные, ДанныеРасшифровки);
	
	Возврат ПроцессорКомпоновки;
КонецФункции

Функция ЗаголовокПоНаборуСсылок(Знач НаборСсылок)
	Результат = Неопределено;
	
	Если ТипЗнч(НаборСсылок) = Тип("СписокЗначений") Тогда
		ВсегоСсылок = НаборСсылок.Количество() - 1;
		Если ВсегоСсылок >= 0 Тогда
		
			ОдинаковыйТип = Истина;
			ТипПервойСсылки = ТипЗнч(НаборСсылок[0].Значение);
			Для Позиция = 0 По ВсегоСсылок Цикл
				Если ТипЗнч(НаборСсылок[Позиция].Значение) <> ТипПервойСсылки Тогда
					ОдинаковыйТип = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОдинаковыйТип Тогда
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Места использования %1'"), НаборСсылок[0].Значение.Метаданные().Представление());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = НСтр("ru = 'Места использования элементов'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает все места использования ссылок.
// Если какая-либо ссылка нигде не используется, то строк для нее в результирующей таблице не будет.
//
// Параметры:
//     НаборСсылок     - Массив - Ссылки, для которых ищем места использования.
//     АдресРезультата - Строка - Необязательный адрес во временном хранилище, куда будет помещен копия результата
//                                замены.
// 
// Возвращаемое значение:
//     ТаблицаЗначений - Состоит из колонок:
//       * Ссылка                - ЛюбаяСсылка      - Ссылка, которая анализируется.
//       * Данные                - Произвольный     - Данные, содержащие анализируемую ссылку.
//       * Метаданные            - ОбъектМетаданных - Метаданные найденных данных.
//       * ПредставлениеДанных   - Строка           - Представление данных, содержащих анализируемую ссылку.
//       * ТипСсылки             - Тип              - Тип анализируемой ссылки.
//       * ВспомогательныеДанные - Булево           - Истина, если данные используются анализируемой ссылкой как
//                                                    вспомогательными  данными (ведущее измерение и т.п.).
//
Функция МестаИспользования(Знач НаборСсылок, Знач АдресРезультата = "") Экспорт
	
	МестаИспользования = Новый ТаблицаЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	МестаИспользования = НайтиПоСсылкам(НаборСсылок);
	УстановитьПривилегированныйРежим(Ложь);
	
	МестаИспользования.Колонки.Добавить("ПредставлениеДанных", Новый ОписаниеТипов("Строка"));
	МестаИспользования.Колонки.Добавить("ТипСсылки");
	МестаИспользования.Колонки.Добавить("ИнформацияОМестеИспользования");
	МестаИспользования.Колонки.Добавить("ВспомогательныеДанные", Новый ОписаниеТипов("Булево"));
	
	МестаИспользования.Индексы.Добавить("Ссылка");
	МестаИспользования.Индексы.Добавить("Данные");
	МестаИспользования.Индексы.Добавить("ВспомогательныеДанные");
	МестаИспользования.Индексы.Добавить("Ссылка, ВспомогательныеДанные");
	
	ТипКлючиЗаписей = ОписаниеТипаКлючиЗаписей();
	ТипВсеСсылки    = ОписаниеТипаВсеСсылки();
	
	МетаПоследовательности = Метаданные.Последовательности;
	МетаКонстанты          = Метаданные.Константы;
	МетаДокументы          = Метаданные.Документы;
	
	ИсключенияПоискаСсылок = ИсключенияПоискаСсылок();
	
	КэшИзмерений = Новый Соответствие;
	
	Для Каждого Строка Из МестаИспользования Цикл
		Ссылка    = Строка.Ссылка;
		Данные    = Строка.Данные;
		Мета      = Строка.Метаданные;
		ТипДанных = ТипЗнч(Данные);
		
		ИсключениеПоиска = ИсключенияПоискаСсылок[Мета];
		
		Если ИсключениеПоиска = Неопределено Тогда
			ЭтоВспомогательныеДанные = (Ссылка = Данные);
			
		ИначеЕсли ИсключениеПоиска = "*" Тогда
			ЭтоВспомогательныеДанные = Истина;
			
		Иначе
			ЭтоВспомогательныеДанные = Ложь;
			Для Каждого ПутьКРеквизиту Из ИсключениеПоиска Цикл
				Если Ссылка = ВычислитьЗначениеДанныхПоПути(Данные, ПутьКРеквизиту) Тогда
					ЭтоВспомогательныеДанные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МетаДокументы.Содержит(Мета) Тогда
			Представление = Строка(Данные);
			
		ИначеЕсли МетаКонстанты.Содержит(Мета) Тогда
			Представление = Мета.Представление() + " (" + НСтр("ru = 'константа'") + ")";
			
		ИначеЕсли МетаПоследовательности.Содержит(Мета) Тогда
			Представление = Мета.Представление() + " (" + НСтр("ru = 'последовательность'") + ")";
			
		ИначеЕсли ТипДанных = Неопределено Тогда
			Представление = Строка(Данные);
			
		ИначеЕсли ТипВсеСсылки.СодержитТип(ТипДанных) Тогда
			МетаПредставлениеОбъекта = Новый Структура("ПредставлениеОбъекта");
			ЗаполнитьЗначенияСвойств(МетаПредставлениеОбъекта, Мета);
			Если ПустаяСтрока(МетаПредставлениеОбъекта.ПредставлениеОбъекта) Тогда
				МетаПредставление = Мета.Представление();
			Иначе
				МетаПредставление = МетаПредставлениеОбъекта.ПредставлениеОбъекта;
			КонецЕсли;
			Представление = Строка(Данные);
			Если Не ПустаяСтрока(МетаПредставление) Тогда
				Представление = Представление + " (" + МетаПредставление + ")";
			КонецЕсли;
			
		ИначеЕсли ТипКлючиЗаписей.СодержитТип(ТипДанных) Тогда
			Представление = Мета.ПредставлениеЗаписи;
			Если ПустаяСтрока(Представление) Тогда
				Представление = Мета.Представление();
			КонецЕсли;
			
			ОписаниеИзмерений = "";
			Для Каждого КлючЗначение Из ОписаниеИзмеренийНабора(Мета, КэшИзмерений) Цикл
				Значение = Данные[КлючЗначение.Ключ];
				Описание = КлючЗначение.Значение;
				Если Значение = Ссылка Тогда
					Если Описание.Ведущее Тогда
						ЭтоВспомогательныеДанные = Истина;
					КонецЕсли;
				КонецЕсли;
				Формат = Описание.Формат; 
				ОписаниеИзмерений = ОписаниеИзмерений + ", " 
					+ Описание.Представление + " """ + ?(Формат = Неопределено, Строка(Значение), Формат(Значение, Формат)) + """";
			КонецЦикла;
			ОписаниеИзмерений = Сред(ОписаниеИзмерений, 3);
			
			Если Не ПустаяСтрока(ОписаниеИзмерений) Тогда
				Представление = Представление + " (" + ОписаниеИзмерений + ")";
			КонецЕсли;
			
		Иначе
			Представление = Строка(Данные);
			
		КонецЕсли;
		
		Строка.ПредставлениеДанных   = Представление;
		Строка.ВспомогательныеДанные = ЭтоВспомогательныеДанные;
		Строка.ТипСсылки             = ТипЗнч(Строка.Ссылка);
	КонецЦикла;
	
	Если Не ПустаяСтрока(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(МестаИспользования, АдресРезультата);
	КонецЕсли;
	
	Возврат МестаИспользования;
КонецФункции

// Возвращает описание типа, включающего в себя все возможные ссылочные типы конфигурации.
//
// Возвращаемое значение:
//  ОписаниеТипов - все ссылочные типы конфигурации.
//
Функция ОписаниеТипаВсеСсылки() Экспорт
	
	Возврат Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
		Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
			Справочники.ТипВсеСсылки(),
			Документы.ТипВсеСсылки().Типы()),
			ПланыОбмена.ТипВсеСсылки().Типы()),
			Перечисления.ТипВсеСсылки().Типы()),
			ПланыВидовХарактеристик.ТипВсеСсылки().Типы()),
			ПланыСчетов.ТипВсеСсылки().Типы()),
			ПланыВидовРасчета.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()),
			Задачи.ТипВсеСсылки().Типы());
	
КонецФункции

Функция ОписаниеИзмеренийНабора(Знач Мета, Кэш)
	
	ОписаниеИзмерений = Кэш[Мета];
	Если ОписаниеИзмерений<>Неопределено Тогда
		Возврат ОписаниеИзмерений;
	КонецЕсли;
	
	// Период и регистратор, если есть.
	ОписаниеИзмерений = Новый Структура;
	
	ДанныеИзмерения = Новый Структура("Ведущее, Представление, Формат, Тип", Ложь);
	
	Если Метаданные.РегистрыСведений.Содержит(Мета) Тогда
		// Возможно есть период
		МетаПериод = Мета.ПериодичностьРегистраСведений; 
		Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений;
		
		Если МетаПериод = Периодичность.ПозицияРегистратора Тогда
			ДанныеИзмерения.Тип           = Документы.ТипВсеСсылки();
			ДанныеИзмерения.Представление = НСтр("ru='Регистратор'");
			ДанныеИзмерения.Ведущее       = Истина;
			ОписаниеИзмерений.Вставить("Регистратор", ДанныеИзмерения);
			
		ИначеЕсли МетаПериод = Периодичность.Год Тогда
			ДанныеИзмерения.Тип           = Новый ОписаниеТипов("Дата");
			ДанныеИзмерения.Представление = НСтр("ru='Период'");
			ДанныеИзмерения.Формат        = "ДФ='yyyy ""г.""'; ДП='Дата не задана'";
			ОписаниеИзмерений.Вставить("Период", ДанныеИзмерения);
			
		ИначеЕсли МетаПериод = Периодичность.День Тогда
			ДанныеИзмерения.Тип           = Новый ОписаниеТипов("Дата");
			ДанныеИзмерения.Представление = НСтр("ru='Период'");
			ДанныеИзмерения.Формат        = "ДЛФ=D; ДП='Дата не задана'";
			ОписаниеИзмерений.Вставить("Период", ДанныеИзмерения);
			
		ИначеЕсли МетаПериод = Периодичность.Квартал Тогда
			ДанныеИзмерения.Тип           = Новый ОписаниеТипов("Дата");
			ДанныеИзмерения.Представление = НСтр("ru='Период'");
			ДанныеИзмерения.Формат        =  "ДФ='к ""квартал ""yyyy ""г.""'; ДП='Дата не задана'";
			ОписаниеИзмерений.Вставить("Период", ДанныеИзмерения);
			
		ИначеЕсли МетаПериод = Периодичность.Месяц Тогда
			ДанныеИзмерения.Тип           = Новый ОписаниеТипов("Дата");
			ДанныеИзмерения.Представление = НСтр("ru='Период'");
			ДанныеИзмерения.Формат        = "ДФ='ММММ yyyy ""г.""'; ДП='Дата не задана'";
			ОписаниеИзмерений.Вставить("Период", ДанныеИзмерения);
			
		ИначеЕсли МетаПериод = Периодичность.Секунда Тогда
			ДанныеИзмерения.Тип           = Новый ОписаниеТипов("Дата");
			ДанныеИзмерения.Представление = НСтр("ru='Период'");
			ДанныеИзмерения.Формат        = "ДЛФ=DT; ДП='Дата не задана'";
			ОписаниеИзмерений.Вставить("Период", ДанныеИзмерения);
			
		КонецЕсли;
		
	Иначе
		ДанныеИзмерения.Тип           = Документы.ТипВсеСсылки();
		ДанныеИзмерения.Представление = НСтр("ru='Регистратор'");
		ДанныеИзмерения.Ведущее       = Истина;
		ОписаниеИзмерений.Вставить("Регистратор", ДанныеИзмерения);
		
	КонецЕсли;
	
	// Все измерения
	Для Каждого МетаИзмерение Из Мета.Измерения Цикл
		ДанныеИзмерения = Новый Структура("Ведущее, Представление, Формат, Тип");
		ДанныеИзмерения.Тип           = МетаИзмерение.Тип;
		ДанныеИзмерения.Представление = МетаИзмерение.Представление();
		ДанныеИзмерения.Ведущее       = МетаИзмерение.Ведущее;
		ОписаниеИзмерений.Вставить(МетаИзмерение.Имя, ДанныеИзмерения);
	КонецЦикла;
	
	Кэш[Мета] = ОписаниеИзмерений;
	Возврат ОписаниеИзмерений;
КонецФункции

Функция ОписаниеТипаКлючиЗаписей()
	
	ДобавляемыеТипы = Новый Массив;
	Для Каждого Мета Из Метаданные.РегистрыСведений Цикл
		ДобавляемыеТипы.Добавить(Тип("РегистрСведенийКлючЗаписи." + Мета.Имя));
	КонецЦикла;
	Для Каждого Мета Из Метаданные.РегистрыНакопления Цикл
		ДобавляемыеТипы.Добавить(Тип("РегистрНакопленияКлючЗаписи." + Мета.Имя));
	КонецЦикла;
	Для Каждого Мета Из Метаданные.РегистрыБухгалтерии Цикл
		ДобавляемыеТипы.Добавить(Тип("РегистрБухгалтерииКлючЗаписи." + Мета.Имя));
	КонецЦикла;
	Для Каждого Мета Из Метаданные.РегистрыРасчета Цикл
		ДобавляемыеТипы.Добавить(Тип("РегистрРасчетаКлючЗаписи." + Мета.Имя));
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(ДобавляемыеТипы); 
КонецФункции

// Возвращает исключения при поиске мест использования объектов.
//
// Возвращаемое значение:
//   Соответствие - Исключения поиска ссылок в разрезе объектов метаданных:
//       * Ключ - ОбъектМетаданных - Объект метаданных, для которого применяются исключения.
//       * Значение - Строка, Массив - описание исключенных реквизитов.
//           Если "*", то исключены все реквизиты объекта метаданных.
//           Если массив строк, то содержит относительные имена исключенных реквизитов.
//
Функция ИсключенияПоискаСсылок() Экспорт
	
	ИсключенияПоискаИнтеграция = Новый Массив;
	
	ИсключенияПоиска = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключенияПоиска, ИсключенияПоискаИнтеграция);
	
	Результат = Новый Соответствие;
	Для Каждого ИсключениеПоиска Из ИсключенияПоиска Цикл
		// Определение полного имени реквизита и объекта метаданных - носителя реквизита.
		Если ТипЗнч(ИсключениеПоиска) = Тип("Строка") Тогда
			ПолноеИмя          = ИсключениеПоиска;
			МассивПодстрок     = СтрРазделить(ПолноеИмя, ".");
			КоличествоПодстрок = МассивПодстрок.Количество();
			ОбъектМетаданных   = Метаданные.НайтиПоПолномуИмени(МассивПодстрок[0] + "." + МассивПодстрок[1]);
		Иначе
			ОбъектМетаданных   = ИсключениеПоиска;
			ПолноеИмя          = ОбъектМетаданных.ПолноеИмя();
			МассивПодстрок     = СтрРазделить(ПолноеИмя, ".");
			КоличествоПодстрок = МассивПодстрок.Количество();
			Если КоличествоПодстрок > 2 Тогда
				Пока Истина Цикл
					Родитель = ОбъектМетаданных.Родитель();
					Если ТипЗнч(Родитель) = Тип("ОбъектМетаданныхКонфигурация") Тогда
						Прервать;
					Иначе
						ОбъектМетаданных = Родитель;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		// Регистрация.
		Если КоличествоПодстрок < 4 Тогда
			Результат.Вставить(ОбъектМетаданных, "*");
		Иначе
			ПутиКРеквизитам = Результат.Получить(ОбъектМетаданных);
			Если ПутиКРеквизитам = "*" Тогда
				Продолжить; // Весь объект метаданных уже исключен.
			ИначеЕсли ПутиКРеквизитам = Неопределено Тогда
				ПутиКРеквизитам = Новый Массив;
				Результат.Вставить(ОбъектМетаданных, ПутиКРеквизитам);
			КонецЕсли;
			// Формат реквизита:
			//   "<ВидОМ>.<ИмяОМ>.<ТипРеквизитаИлиТЧ>.<ИмяРеквизитаИлиТЧ>[.<ТипРеквизита>.<ИмяРеквизитаТЧ>]".
			//   Примеры:
			//     "РегистрСведений.ВерсииОбъектов.Реквизит.АвторВерсии",
			//     "Документ._ДемоЗаказПокупателя.ТабличнаяЧасть.СчетаНаОплату.Реквизит.Счет",
			//     "ПланВидовРасчета._ДемоОсновныеНачисления.СтандартнаяТабличнаяЧасть.БазовыеВидыРасчета.СтандартныйРеквизит.ВидРасчета".
			// Относительный путь к реквизиту должен получиться таким, чтобы его можно было использовать в условиях запроса:
			//   "<ИмяРеквизитаИлиТЧ>[.<ИмяРеквизитаТЧ>]".
			Если КоличествоПодстрок = 4 Тогда
				ОтносительныйПутьКРеквизиту = МассивПодстрок[3];
			Иначе
				ОтносительныйПутьКРеквизиту = МассивПодстрок[3] + "." + МассивПодстрок[5];
			КонецЕсли;
			ПутиКРеквизитам.Добавить(ОтносительныйПутьКРеквизиту);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ВычислитьЗначениеДанныхПоПути(Знач Данные, Знач ПутьДанных)
	Результат = Данные;
	
	Имена = СтрРазделить(ПутьДанных, ".", Ложь);
	Для Каждого ИмяРеквизита Из Имена Цикл
		Тест = Новый Структура(ИмяРеквизита, Неопределено);
		ЗаполнитьЗначенияСвойств(Тест, Результат);
		Если Тест[ИмяРеквизита] = Неопределено Тогда
			Тест[ИмяРеквизита] = -1;
			ЗаполнитьЗначенияСвойств(Тест, Результат);
			Если Тест[ИмяРеквизита] = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка вычисления %1 для объекта %2. Реквизит %3 не найден'"),
					ПутьДанных, Данные, ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Результат = Тест[ИмяРеквизита];
		Если Результат = Неопределено Тогда // Не можем дальше читать.
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли