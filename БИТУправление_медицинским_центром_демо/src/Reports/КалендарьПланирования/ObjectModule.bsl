#Область ПрограммныйИнтерфейс

// Параметры оформления календаря.
Перем мРазмерШрифтаШапки, мРазмерШрифтаОбщий, мРазмерШрифтаКлиент, мРазмерШрифтаРаботы,
	  мШрифтШапки, мШрифтОбщий, мШрифтЧас, мШрифтКлиент, мШрифтРаботы,
      мШиринаКолонкиВремя,мШиринаКолонкиРабВремя,мШиринаКолонкиКлиент,мШиринаКолонкиРаботы;
Перем мВысотаСтроки, мВысотаСтрокиШапки;
Перем мСтруктураВизуальныхНастроек;

Перем мВремяНачалаДня; // Время, с которого начинается вывод календаря планирования.

// Конечное значение диапазона выводимого времени в календарь записи.
Перем мВремяОкончанияДня; 

Перем мКвантПланирования;	// Периодичность планирования в секундах.
Перем мУчетнаяПолитика; 	// Параметры учетной политики для экспорта в форму.
Перем мРежимыФормирования Экспорт;  // Энумератор возможных режимов формирования отчета.

// Доплнительные Параметры оформления календаря. 
Перем мКолонокВКолонкеСотрудника, мКолонокВКолонкеОборудования, мВысотаЗаголовкаСтраницы,
      мЦветОбластиРабочегоВремени, мЦветНерабочихЧасов, мЦветФонаРаботыЗаявкиБезСостояния, мЦветФонаВыполненнойЗаявки;

Перем мОтдельныеКолонкиГрафика;	  
Перем мГрафикОтдельнойКолонкой;
Перем мКлиентОтдельнойКолонкой; 

Перем КэшЗаявкиИПризнаки;
Перем КэшЗаявкиИДопСвойства;

Перем НастройкиДПР;

Перем ВысотаШапки;
Перем МинимальнаяВысотаСтрокиЖурналаЗаписи; // Минимальная высота строки интервала врменеи журнала записи.

Перем мКэшВидовСостоянийЗаявки; // Кэш состояний заявок.
Перем мКэшДанныхКлиентов; 		// Кэш данных Клиентов. 
Перем мКэшДанныхНоменклатуры; 	// Кэш данных Номенклатуры. 
Перем мКэшДопИнформацииКлиентов;// Кэш контактной информации клиентов. 
Перем мКэшМедкарт;				// Кэш данных Медицинских карт.

// Хранит ссылки и представления сотрудников в свободном времени кабинетов и кабинетов - у сотрудников.
Перем мТаблицаРасшифровокСвободногоВремени, мОтборПоискаРасшифровокСвободногоВремениСубъект;
Перем мПредставлениеВременныхИнтервалов;
Перем мРасшифровкиКолонок;
Перем мРасшифровкиСтрок;
Перем мПредставлениеВремениСтрок;
Перем мПредставленияСубъектов;

Перем ПерваяКолонкаПослеВремени, ПерваяКолонкаПослеВремениПоВсемуРасписанию;
Перем ПерваяСтрокаПослеШапки;

Перем мКлиент;
Перем мТабНульСтрокиВремени;
Перем мТабНульДиапазоныВремени;
Перем мПредопределенноеРабочееВремя;

Перем мКраткоеНаименованиеОсновнойВалюты;

Перем мСоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи Экспорт; // Признак того, что нужно собирать информацию для анализа повторного создания приёма.

Перем КэшКоличествоПробеловДляКартинок;
Перем ОтступыКартинок, ШиринаКартинки;
Перем ЕстьКартинкиВОсновнойЯчейке;
Перем ЕстьКартинкиВДопЯчейке;

Перем КомментарииДня;
Перем ТаблицаОбъектов;

Перем мКэшДанныхЗаявокОнлайн;
Перем мКэшДопСвойствЗаявок;

Перем ЕстьПоляСортировки;
Перем мЯчейкиУслуг;

// Типы значений для многократных сравнений
Перем ТипЧисло, ТипЗаявка, ТипКлиент, ТипСтруктура, ТипСотрудники, ТипОборудование, ТипЦвет, ТипДата, ТипДвоичныеДанные, ТипКартинка;

// Процедура создает структуру кэшей для хранения информации по активным Клиентам и Номенклатурам.
Процедура ЗаполнитьКонстантыОтчета()

	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();

	МинимальнаяВысотаСтрокиЖурналаЗаписи = 6;
	мСтруктураВизуальныхНастроек = УправлениеНастройкамиПовтИсп.ПолучитьВизуальныеНастройкиЖурналаЗаписи();
	мГрафикОтдельнойКолонкой = мУчетнаяПолитика.ОтдельнаяКолонкаРабочегоВремени;
	мКлиентОтдельнойКолонкой = мСтруктураВизуальныхНастроек.ВидОтображения = Перечисления.ВидыОтображенияЯчеек.КлиентУслугиРаздельно;
	
	мРазмерШрифтаШапки	= 11;
	мРазмерШрифтаОбщий	= 10;
	мРазмерШрифтаЧас	= 10;
	мРазмерШрифтаКлиент	= 10;
	мРазмерШрифтаРаботы	= 10;                                                        
    мШиринаКолонкиВремя		= 4;
	мШиринаКолонкиРабВремя	= ?(мГрафикОтдельнойКолонкой,1,0.25);
	мШиринаКолонкиКлиент	= мСтруктураВизуальныхНастроек.ШиринаКолонкиКлиента;
	мШиринаКолонкиРаботы	= ?(мУчетнаяПолитика.ШиринаКолонкиРаботыЖурналаЗаписи=0,20,мУчетнаяПолитика.ШиринаКолонкиРаботыЖурналаЗаписи);
	мВысотаСтроки = Макс(МинимальнаяВысотаСтрокиЖурналаЗаписи,мУчетнаяПолитика.ВысотаСтрокиЖурналаЗаписи);
	
	ЕстьКартинкиВОсновнойЯчейке	= мСтруктураВизуальныхНастроек.ЕстьКартинкиВОсновнойЯчейке;
	ЕстьКартинкиВДопЯчейке		= мСтруктураВизуальныхНастроек.ЕстьКартинкиВДопЯчейке;
	ЕстьПоляСортировки			= мСтруктураВизуальныхНастроек.ЕстьПоляСортировки; 
	
	Если мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания
		И МодельРасписания.Количество() <> 0
	Тогда
		ТекущийИнтервал = Неопределено;
		мВремяНачалаДня	= Неопределено;
		мВремяОкончанияДня = Неопределено;
		
		Для Каждого ЭлементМодель Из МодельРасписания Цикл
			// Определение минимального интервала расписания
			Интервал = ЭлементМодель.Значение.Интервал;
			Если ЗначениеЗаполнено(Интервал) Тогда
				Если ТекущийИнтервал = Неопределено Тогда
					ТекущийИнтервал = Интервал;
				ИначеЕсли Интервал <> ТекущийИнтервал Тогда
					ТекущийИнтервал = ПолучитьОбщееКратноеИнтерваловВремени(Интервал, ТекущийИнтервал);
				КонецЕсли;
			КонецЕсли;
			
			// Определение времени начала и окончания работы
			ВремяНачала		= ЭлементМодель.Значение.ВремяНачалаРаботы;
			ВремяОкончания	= ЭлементМодель.Значение.ВремяОкончанияРаботы;
			
			Если ЗначениеЗаполнено(ВремяНачала) Тогда
				мВремяНачалаДня = ?(мВремяНачалаДня = Неопределено, ВремяНачала, Мин(мВремяНачалаДня, ВремяНачала));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяОкончания) Тогда
				мВремяОкончанияДня = ?(мВремяОкончанияДня = Неопределено, ВремяОкончания, Макс(мВремяОкончанияДня, ВремяОкончания));
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийИнтервал = Неопределено Тогда
			ТекущийИнтервал = мУчетнаяПолитика.ПериодичностьПланирования;
		КонецЕсли;
		мКвантПланирования = ОбщегоНазначения.ВремяВСекунды(ТекущийИнтервал);
		
		Если мВремяНачалаДня = Неопределено Тогда
			мВремяНачалаДня = мУчетнаяПолитика.ВремяНачалаРаботы;
		КонецЕсли;
		Если мВремяОкончанияДня = Неопределено Тогда
			мВремяОкончанияДня = мУчетнаяПолитика.ВремяОкончанияРаботы;
		КонецЕсли;
	Иначе
		мКвантПланирования = ОбщегоНазначения.ВремяВСекунды(мУчетнаяПолитика.ПериодичностьПланирования);
		// Определение времени начала и окончания за весь период.
		мВремяНачалаДня	= мУчетнаяПолитика.ВремяНачалаРаботы;
		мВремяОкончанияДня = мУчетнаяПолитика.ВремяОкончанияРаботы;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мКвантПланирования) Тогда
		мКвантПланирования = 600;
	КонецЕсли;
	
	// Заполним структуру настроек доп.ячеек календаря.
	НастройкиДПР = Новый Структура;
	ШиринаОсновногоДПР = мСтруктураВизуальныхНастроек.ОсновнаяНастройкаЯчеек.ШиринаДополнительногоПоля;
	НастройкиДПР.Вставить("ШиринаОсновногоДПР", ?(ЗначениеЗаполнено(ШиринаОсновногоДПР), ШиринаОсновногоДПР, 2));

	Если мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияДопЯчейки.Количество() <> 0
		Или мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияПримечанияДопЯчейки.Количество() <> 0
		Или мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияКартинокДопЯчейки.Количество() <> 0
		Или ЗначениеЗаполнено(мСтруктураВизуальныхНастроек.ЦветФонаДополнительнойКолонки)
	Тогда
		НастройкиДПР.Вставить("КоличествоДПР", 1);
	Иначе
		НастройкиДПР.Вставить("КоличествоДПР", 0);
	КонецЕсли;
	
	мКолонокВКолонкеСотрудника	= 1 + Число(мГрафикОтдельнойКолонкой) + Число(мКлиентОтдельнойКолонкой) + НастройкиДПР.КоличествоДПР;
	мКолонокВКолонкеОборудования= 1 + Число(мГрафикОтдельнойКолонкой)
									+ ?(мСтруктураВизуальныхНастроек.ОтображениеЯчеекКабинетовКакУСотрудников, НастройкиДПР.КоличествоДПР, 0);

	мВысотаЗаголовкаСтраницы	= 0;
	мВысотаСтрокиШапки			= 14;
	
    мШрифтШапки	 = Новый Шрифт(,мРазмерШрифтаШапки	, Истина);
	мШрифтОбщий	 = Новый Шрифт(,мРазмерШрифтаОбщий	, Ложь);                             
	мШрифтЧас	 = Новый Шрифт(,мРазмерШрифтаЧас	, Истина);
	
	мШрифтКлиент = мУчетнаяПолитика.ШрифтКлиент.Получить();
	Если мШрифтКлиент = Неопределено Тогда
		мШрифтКлиент  = Новый Шрифт(,мРазмерШрифтаКлиент);
	КонецЕсли;
	мШрифтРаботы = мУчетнаяПолитика.ШрифтРабот.Получить();
	Если мШрифтРаботы = Неопределено Тогда
		мШрифтРаботы  = Новый Шрифт(,мРазмерШрифтаРаботы);
	КонецЕсли;
	
	мЦветНерабочихЧасов = мУчетнаяПолитика.ОсновнойЦветНерабочегоВремени.Получить();
	Если мЦветНерабочихЧасов = Неопределено Тогда
		мЦветНерабочихЧасов = Новый Цвет(245,230,235);
	КонецЕсли;
	мЦветОбластиРабочегоВремени =  ?(мГрафикОтдельнойКолонкой,мЦветНерабочихЧасов,Новый Цвет());
	
	мЦветФонаРаботыЗаявкиБезСостояния = мУчетнаяПолитика.ОсновнойЦветЗаявки.Получить();
	Если ТипЗнч(мЦветФонаРаботыЗаявкиБезСостояния) <> Тип("Цвет") Тогда
		мЦветФонаРаботыЗаявкиБезСостояния = УправлениеНастройками.ПолучитьЦветЗаявкиПоУмолчанию();
	КонецЕсли;
	мЦветФонаВыполненнойЗаявки  = Новый Цвет(150,130,50);
	мКраткоеНаименованиеОсновнойВалюты = ОбщегоНазначения.ПолучитьКраткоеНаименованиеОсновнойВалюты();
	
	мПредопределенноеРабочееВремя = Справочники.ВидыВремениГрафика.РабочееВремя;
	
	ТипЧисло		 = Тип("Число");
	ТипЗаявка		 = Тип("ДокументСсылка.Заявка");
	ТипКлиент		 = Тип("СправочникСсылка.Клиенты");
	ТипСтруктура	 = Тип("Структура");
	ТипСотрудники	 = Тип("СправочникСсылка.Сотрудники");
	ТипОборудование	 = Тип("СправочникСсылка.Оборудование");
	ТипЦвет			 = Тип("Цвет");
	ТипДата			 = Тип("Дата");
	ТипКартинка		 = Тип("Картинка");
	ТипДвоичныеДанные = Тип("ДвоичныеДанные");
	
КонецПроцедуры

Функция ИнициироватьТаблицуРасшифровокСвободногоВремени()
		
	ТипыСубъектов = Новый Массив;
	ТипыСубъектов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ТипыСубъектов.Добавить(Тип("СправочникСсылка.Оборудование"));
	
	мТаблицаРасшифровокСвободногоВремени = Новый ТаблицаЗначений;
	мТаблицаРасшифровокСвободногоВремени.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Число"));
	мТаблицаРасшифровокСвободногоВремени.Колонки.Добавить("ИдентификаторСобытия", Новый ОписаниеТипов("УникальныйИдентификатор"));
	мТаблицаРасшифровокСвободногоВремени.Колонки.Добавить("Субъект", Новый ОписаниеТипов(ТипыСубъектов));
	мТаблицаРасшифровокСвободногоВремени.Колонки.Добавить("Филиал", Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	// Это предопределенный вид времени "Рабочее время"
	мТаблицаРасшифровокСвободногоВремени.Колонки.Добавить("ЭтоВидРабВремя", Новый ОписаниеТипов("Булево"));
	// Этот вид времени отвечает за рабочее время
	мТаблицаРасшифровокСвободногоВремени.Колонки.Добавить("ЭтоРабВремя", Новый ОписаниеТипов("Булево"));
	мТаблицаРасшифровокСвободногоВремени.Индексы.Добавить("ИдентификаторСобытия");
	мТаблицаРасшифровокСвободногоВремени.Индексы.Добавить("ИдентификаторСобытия, Субъект");
	
	мОтборПоискаРасшифровокСвободногоВремениСубъект = Новый Структура("ИдентификаторСобытия, Субъект");
	
КонецФункции

Функция ПолучитьОбщееКратноеИнтерваловВремени(Интервал1, Интервал2)
	
	БольшийИнтервал = Макс(Интервал1, Интервал2);
	МеньшийИнтервал = Мин (Интервал1, Интервал2);
	
	БИнтМинут = Час(БольшийИнтервал)*60 + Минута(БольшийИнтервал);
	МИнтМинут = Час(МеньшийИнтервал)*60 + Минута(МеньшийИнтервал);
	
	Если Минута(МеньшийИнтервал)+Час(МеньшийИнтервал) = 0 Тогда
		Возврат БольшийИнтервал;
	ИначеЕсли БИнтМинут/МИнтМинут = Цел(БИнтМинут/МИнтМинут) Тогда
		Возврат МеньшийИнтервал;
	Иначе
		// Это или 30 и 20 минут, или 20 и 15, или 15 и 10
		Если БИнтМинут = 30 И МИнтМинут = 20 Тогда
			Возврат Дата(1,1,1,0,10,0);
		ИначеЕсли БИнтМинут = 20 И МИнтМинут = 15 Тогда
			Возврат Дата(1,1,1,0,5,0);
		ИначеЕсли БИнтМинут = 15 И МИнтМинут = 10 Тогда
			Возврат Дата(1,1,1,0,5,0);
		Иначе
			Возврат МеньшийИнтервал;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Формирует выборку отчета по графикам и работам.
Функция ПолучитьТаблицуОбъектовЖурналаЗаписи(МенеджерВТ)
	
	Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаРаботы.Ссылка КАК Ссылка,
	|	ЗаявкаРаботы.Ссылка.Сотрудник КАК СсылкаСотрудник,
	|	ЗаявкаРаботы.Ссылка.ДатаНачала КАК СсылкаДатаНачала,
	|	ЗаявкаРаботы.Ссылка.ДатаОкончания КАК СсылкаДатаОкончания,
	|	ЗаявкаРаботы.Ссылка.Состояние КАК Состояние,
	|	ЗаявкаРаботы.Ссылка.Филиал КАК Филиал,
	|	ЗаявкаРаботы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаявкаРаботы.Ссылка.Кабинет КАК Кабинет,
	|	ЗаявкаРаботы.Сотрудник КАК Сотрудник,
	|	ЗаявкаРаботы.Номенклатура КАК Номенклатура,
	|	ЗаявкаРаботы.НомерСтроки КАК НомерСтроки,
	|	ЗаявкаРаботы.Продолжительность КАК Продолжительность,
	|	ЗаявкаРаботы.ДатаНачала КАК ДатаНачала,
	|	ЗаявкаРаботы.ДатаОкончания КАК ДатаОкончания,
	|	ЗаявкаРаботы.Оборудование1 КАК Оборудование1,
	|	ЗаявкаРаботы.Оборудование2 КАК Оборудование2,
	|	ЗаявкаРаботы.Оборудование3 КАК Оборудование3,
	|	ЗаявкаРаботы.Оборудование1.УчаствуетВКалендарномПланировании,
	|	ЗаявкаРаботы.Оборудование2.УчаствуетВКалендарномПланировании,
	|	ЗаявкаРаботы.Оборудование3.УчаствуетВКалендарномПланировании
	|ПОМЕСТИТЬ РаботыЗаявок
	|ИЗ
	|	Документ.Заявка.Работы КАК ЗаявкаРаботы
	|ГДЕ
	|	ЗаявкаРаботы.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0 КАК порядок1,
	|   ГрафикиСотрудников.Дата КАК Дата,
	|	ГрафикиСотрудников.Сотрудник КАК Объект,
	|	ГрафикиСотрудников.Сотрудник.Наименование КАК ОбъектПредставление,
	|	ГрафикиСотрудников.Сотрудник.ДополнительнаяИнформацияДляЖЗ КАК ДополнительнаяИнформацияДляЖЗ,
	|	ГрафикиСотрудников.Сотрудник,
	|	ГрафикиСотрудников.Сотрудник.Должность КАК Должность,
	|	ГрафикиСотрудников.Сотрудник.Специализация КАК Специализация,
	|	NULL КАК Оборудование,
	|	ВЫБОР КОГДА ГрафикиСотрудников.Подразделение = Значение(Справочник.Подразделения.ПустаяСсылка) ТОГДА
	|		ГрафикиСотрудников.Сотрудник.Подразделение.Код
	|	ИНАЧЕ
	|		ГрафикиСотрудников.Подразделение.Код
	|	КОНЕЦ КАК ПорядокПодразделение,
	|	ВЫБОР КОГДА ГрафикиСотрудников.Подразделение = Значение(Справочник.Подразделения.ПустаяСсылка) 
	|		И ГрафикиСотрудников.Филиал = ГрафикиСотрудников.Сотрудник.Подразделение.Филиал
	|	ТОГДА
	|		ГрафикиСотрудников.Сотрудник.Подразделение
	|	ИНАЧЕ
	|		ГрафикиСотрудников.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ГрафикиСотрудников.Филиал КАК Филиал,
	|   ИСТИНА КАК ЭтоГрафик
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиСотрудников
	|ГДЕ
	|  (ГрафикиСотрудников.Сотрудник.УчаствуетВКалендарномПланировании) И
	|	ГрафикиСотрудников.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания 
	|        
	|ОБЪЕДИНИТЬ ВСЕ
	| " + ПолучитьЗапросПоДокументамСотрудников() + " 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|   ГрафикиОборудования.Дата КАК Дата,
	|	ГрафикиОборудования.Кабинет,
	|	ГрафикиОборудования.Кабинет.Наименование,
	|	"""",
	|	NULL,
	|	NULL,
	|	ГрафикиОборудования.Кабинет.Специализация,
	|	ГрафикиОборудования.Кабинет,
	|
	|	ВЫБОР КОГДА ГрафикиОборудования.Подразделение = Значение(Справочник.Подразделения.ПустаяСсылка) ТОГДА
	|		ГрафикиОборудования.Кабинет.Подразделение.Код
	|	ИНАЧЕ
	|		ГрафикиОборудования.Подразделение.Код
	|	КОНЕЦ КАК ПорядокПодразделение,
	|
	|	ВЫБОР КОГДА ГрафикиОборудования.Подразделение = Значение(Справочник.Подразделения.ПустаяСсылка) 
	|		И ГрафикиОборудования.Филиал = ГрафикиОборудования.Кабинет.Подразделение.Филиал
	|	ТОГДА
	|		ГрафикиОборудования.Кабинет.Подразделение
	|	ИНАЧЕ
	|		ГрафикиОборудования.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ГрафикиОборудования.Филиал КАК Филиал,
	|
	|   ИСТИНА КАК ЭтоГрафик
	|
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиОборудования
	|ГДЕ
	|	ГрафикиОборудования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|  И (ГрафикиОборудования.Кабинет.УчаствуетВКалендарномПланировании)
	|
	|ОБЪЕДИНИТЬ ВСЕ " + ПолучитьЗапросПоДокументамОборудованияДляВыборкиОбъектов() + "
	|";
	
	Если Не ПараметрыСеанса.УчетПоНесколькимФилиалам Тогда
		
		Текст = СтрЗаменить(Текст,"И ЗаявкаРаботы.Ссылка.Филиал = НоменклатураОборудования.Филиал","");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);

	Если РежимФормирования <> мРежимыФормирования.Период Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Если Не мУчетнаяПолитика.ФормироватьЖурналЗаписиБезОтбора
		И (	(	мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания
			 	И МодельРасписания.Количество() = 0
			 	И Сотрудники.Количество() = 0)
			Или
			(	Не мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания
				И (Не ЗначениеЗаполнено(Подразделение) 
					Или ТипЗнч(Подразделение) = Тип("СправочникСсылка.Филиалы"))))
	Тогда
		ТаблицаОбъектов.Очистить();
		
	Иначе
		ТаблицаОбъектов.Колонки.Добавить("Порядок");
		
		// Отбор по филиалу графика.
		Если ЗначениеЗаполнено(Филиал) Тогда
			УдалитьСтрокиЖурналаРегистрацииПоОтбору(ТаблицаОбъектов, Филиал);
		КонецЕсли;
		
		Если мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания Тогда
			
			// Если отбор по модели и сотруднику не заполнен, а формировать при этом требуется в т.ч. по невключенным в модели.
			Если МодельРасписания.Количество() = 0
			 	И Сотрудники.Количество() = 0
				И мУчетнаяПолитика.ВключатьВЖурналЗаписиУчастниковБезМоделейРасписания
			Тогда
				// Т.к. отбор по филиалу (в случае заполнения) уже выполнен, дополнительные отборы не производятся.
			Иначе
				// Удаление строк отбором по модели расписания и списку сотрудников (кабинетов). 
				// Если отбора нет, то выводятся только те сотрудники/кабинеты, которые упомянуты в моделях расписания базы.
				СписокОбъектовДляОтбора = Новый СписокЗначений;

				// Определяю перечень моделей для формируемого расписания.
				Если ЗначениеЗаполнено(Филиал)
					Или Сотрудники.Количество() = 0
				Тогда
					Если МодельРасписания.Количество() <> 0 Тогда
						ПереченьМоделей = МодельРасписания.ВыгрузитьЗначения();
						СписокОбъектовДляОтбора.ЗагрузитьЗначения(КалендарьПланирования.ПолучитьУчастниковМоделиРасписания(МодельРасписания));
					Иначе
						ПереченьМоделей = Новый Массив;
						
						// Получаю все модели расписания выбранного филиала либо с не указанным филиалом и показываю только их участников. 
						Если Не мУчетнаяПолитика.ВключатьВЖурналЗаписиУчастниковБезМоделейРасписания Тогда
							Выб = Справочники.МоделиРасписания.Выбрать();
							Пока Выб.Следующий() Цикл
								Если Не Выб.ЭтоГруппа
									И Не Выб.ПометкаУдаления
									И (Выб.Филиал = Филиал Или Выб.Филиал.Пустая() Или Филиал.Пустая())
								Тогда
									ПереченьМоделей.Добавить(Выб.Ссылка);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;			
				КонецЕсли;
				
				Если Сотрудники.Количество() <> 0 Тогда
					СписокОбъектовДляОтбора = Сотрудники;
				Иначе
					СписокОбъектовДляОтбора = Новый СписокЗначений;
					СписокОбъектовДляОтбора.ЗагрузитьЗначения(КалендарьПланирования.ПолучитьУчастниковМоделиРасписания(ПереченьМоделей));
				КонецЕсли;
				
				Если СписокОбъектовДляОтбора <> Неопределено Тогда
					мОбрИнд = ТаблицаОбъектов.Количество()-1;
					Для сч = 0 по мОбрИнд Цикл
						
						СтрокаОбъекта = ТаблицаОбъектов[мОбрИнд-сч];
						ЭлементСписка = СписокОбъектовДляОтбора.НайтиПоЗначению(СтрокаОбъекта.Объект);
						Если ЭлементСписка = Неопределено Тогда
							ТаблицаОбъектов.Удалить(мОбрИнд-сч);
						Иначе
							СтрокаОбъекта.Порядок = СписокОбъектовДляОтбора.Индекс(ЭлементСписка); 
						КонецЕсли;
						
					КонецЦикла;
					
					// Отбор по филиалу модели расписания.
					Если ЗначениеЗаполнено(Филиал)
						И ПереченьМоделей.Количество() <> 0
					Тогда
						СписокУчастниковПоФилиалам = КалендарьПланирования.ПолучитьУчастниковМоделиРасписанияПоФилиалам(ПереченьМоделей);
						
						мОбрИнд = ТаблицаОбъектов.Количество()-1;
						Отбор = Новый Структура("Филиал, Субъект");
						ОтборПустойФилиал = Новый Структура("Филиал, Субъект",Справочники.Филиалы.ПустаяСсылка());
						Для сч = 0 по мОбрИнд Цикл
							
							СтрокаОбъекта = ТаблицаОбъектов[мОбрИнд-сч];
							Отбор.Субъект = СтрокаОбъекта.Объект;
							Отбор.Филиал  = СтрокаОбъекта.Филиал;
							ОтборПустойФилиал.Субъект = СтрокаОбъекта.Объект;
							
							Если СписокУчастниковПоФилиалам.НайтиСтроки(Отбор).Количество() = 0 
								И СписокУчастниковПоФилиалам.НайтиСтроки(ОтборПустойФилиал).Количество() = 0 
							Тогда
								ТаблицаОбъектов.Удалить(мОбрИнд-сч);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					ТаблицаОбъектов.Сортировать("Порядок");
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Удаление строк отбором по подразделению.
			Если ЗначениеЗаполнено(Подразделение) Тогда
				УдалитьСтрокиЖурналаРегистрацииПоОтбору(ТаблицаОбъектов, Подразделение);
			КонецЕсли;
		КонецЕсли;
		ТаблицаОбъектов.Колонки.Удалить("Порядок");
	КонецЕсли;
	ТаблицаОбъектов.Колонки.Удалить("ЭтоГрафик");
	ОбщегоНазначения.СвернутьТаблицуЗначений(ТаблицаОбъектов);
	
	Если ЕстьПоляСортировки Тогда
		ТаблицаОбъектов.Колонки.Добавить("Порядок2");
		СортировкаТаблицыОбъектов(ТаблицаОбъектов, ТаблицаОбъектов.Скопировать());
		ТаблицаОбъектов.Сортировать("Дата, Порядок1, Порядок2");
	Иначе
		ТаблицаОбъектов.Сортировать("Дата, Порядок1, ПорядокПодразделение, ОбъектПредставление");	
	КонецЕсли;
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

Процедура СортировкаТаблицыОбъектов(ТаблицаОбъектов, ТаблицаНепронумерованныхОбъектов,
	НомерПоляСортировки=0, КоличествоСтрокДоВсехОстальных=0, КоличествоСтрокПослеВсехОстальных=0,
	СтруктураКолонок=Неопределено, МассивИменКолонок=Неопределено, РезультатЗапроса=Неопределено)
	
	Если НомерПоляСортировки = 0 Тогда		
		
		ТекстЗапросаПодразделения =
		"ВЫБРАТЬ
		|	Подразделения.Родитель.Код КАК Родитель,
		|	Подразделения.Код КАК Элемент
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ИТОГИ ПО
		|	Подразделения.Родитель;";
		
		ТекстЗапросаСотрудники =
		"ВЫБРАТЬ
		|	Сотрудники.Родитель КАК Родитель,
		|	Сотрудники.Ссылка КАК Элемент
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ЭтоГруппа = ЛОЖЬ
		|ИТОГИ ПО
		|	Родитель;";
		
		ТекстЗапросаСпециализации =
		"ВЫБРАТЬ
		|	КатегорииВыработки.Родитель КАК Родитель,
		|	КатегорииВыработки.Ссылка КАК Элемент
		|ИЗ
		|	Справочник.КатегорииВыработки КАК КатегорииВыработки
		|ГДЕ
		|	КатегорииВыработки.ЭтоГруппа = ЛОЖЬ
		|ИТОГИ ПО
		|	Элемент ИЕРАРХИЯ;";
		
		МассивИменКолонок = Новый Массив;
		МассивТекстовЗапроса = Новый Массив;
		
		Для Каждого ИмяСортировки Из мСтруктураВизуальныхНастроек.СортировкаСубъектовРасписания Цикл
			
			Если ТипЗнч(ИмяСортировки.ПолеСортировки) = Тип("СправочникСсылка.Подразделения") Тогда
				ИмяКолонки = "ПорядокПодразделение";
				МассивТекстовЗапроса.Добавить(ТекстЗапросаПодразделения);
			ИначеЕсли ТипЗнч(ИмяСортировки.ПолеСортировки) = Тип("СправочникСсылка.Сотрудники") Тогда
				ИмяКолонки = "Объект";
				МассивТекстовЗапроса.Добавить(ТекстЗапросаСотрудники);
			ИначеЕсли ТипЗнч(ИмяСортировки.ПолеСортировки) = Тип("СправочникСсылка.Должности") Тогда
				ИмяКолонки = "Должность";
			ИначеЕсли ТипЗнч(ИмяСортировки.ПолеСортировки) = Тип("СправочникСсылка.КатегорииВыработки") Тогда
				ИмяКолонки = "Специализация";
				МассивТекстовЗапроса.Добавить(ТекстЗапросаСпециализации);
			КонецЕсли;
			
			МассивИменКолонок.Добавить(ИмяКолонки);
		КонецЦикла;
		
		Если МассивИменКолонок.Найти("Объект") = Неопределено Тогда
			 МассивИменКолонок.Добавить("Объект");
		КонецЕсли;
		
		СтруктураКолонок = Новый Структура;
		Для каждого Колонка Из ТаблицаОбъектов.Колонки Цикл
			СтруктураКолонок.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(МассивТекстовЗапроса);
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда 
			РезультатЗапроса = Запрос.ВыполнитьПакет();				
		КонецЕсли;
		
	КонецЕсли;
	
	ПолеСортировки = мСтруктураВизуальныхНастроек.СортировкаСубъектовРасписания[НомерПоляСортировки].ПолеСортировки;
	ИмяКолонки = МассивИменКолонок[НомерПоляСортировки];
	
	ТаблицаРучнойСортировки = мСтруктураВизуальныхНастроек["СортировкаСубъектовРасписанияРучнойПорядок" + Строка(ТипЗнч(ПолеСортировки))];
	КоличествоСтрокВТаблицеРучнойСортировки = ТаблицаРучнойСортировки.Количество();
	
	МассивПолейГрупп = Новый Массив;
	Для Каждого СтрокаРучногоПорядка Из ТаблицаРучнойСортировки Цикл		
		Если ЗначениеЗаполнено(СтрокаРучногоПорядка.Значение) Тогда			
			МассивПолейГрупп.Добавить(СтрокаРучногоПорядка.Значение);			
		КонецЕсли;		
	КонецЦикла;
	
	ЭтоСтрокиДо = Истина;
	
	Для Каждого СтрокаРучногоПорядка Из ТаблицаРучнойСортировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаРучногоПорядка.Значение) Тогда
			МассивПолейГрупп.Удалить(МассивПолейГрупп.Найти(СтрокаРучногоПорядка.Значение));
		КонецЕсли;
		
		НомерСтрокиТаблицы = ТаблицаРучнойСортировки.Индекс(СтрокаРучногоПорядка);
		
		Если СтрокаРучногоПорядка.Значение <> ПолеСортировки Тогда
			
			КолонкиДляСортировки = СтрЗаменить(СтрСоединить(МассивИменКолонок, ","),"Объект","ОбъектПредставление");			
			
			Если СтрокаРучногоПорядка.ЭтоГруппа Тогда
				ТаблицаОбъектовДоИлиПосле = СортировкаЗаполнитьТаблицуПоДереву(ТаблицаНепронумерованныхОбъектов, РезультатЗапроса[НомерПоляСортировки].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), ИмяКолонки, МассивПолейГрупп, СтрокаРучногоПорядка);					
			Иначе
				ТаблицаОбъектовДоИлиПосле = ТаблицаНепронумерованныхОбъектов.Скопировать(Новый Структура(ИмяКолонки,СтрокаРучногоПорядка.Значение));
			КонецЕсли;
			
			ТаблицаОбъектовДоИлиПосле.Сортировать(КолонкиДляСортировки);
			
			Если ЭтоСтрокиДо Тогда
				
				Для Каждого СтрокаТаблицыДо Из ТаблицаОбъектовДоИлиПосле Цикл
					ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаТаблицыДо);
					ТаблицаОбъектов.НайтиСтроки(СтруктураКолонок)[0].Порядок2 = ТаблицаОбъектовДоИлиПосле.Индекс(СтрокаТаблицыДо) + КоличествоСтрокДоВсехОстальных;
				КонецЦикла;
				КоличествоСтрокДоВсехОстальных = ТаблицаОбъектовДоИлиПосле.Количество() + КоличествоСтрокДоВсехОстальных;
			Иначе
				
				Для Каждого СтрокаТаблицыПосле Из ТаблицаОбъектовДоИлиПосле Цикл
					ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаТаблицыПосле);
					ТаблицаОбъектов.НайтиСтроки(СтруктураКолонок)[0].Порядок2 = ТаблицаОбъектов.Количество() - (ТаблицаОбъектовДоИлиПосле.Количество() - ТаблицаОбъектовДоИлиПосле.Индекс(СтрокаТаблицыПосле));
				КонецЦикла;
				КоличествоСтрокПослеВсехОстальных = ТаблицаОбъектовДоИлиПосле.Количество() + КоличествоСтрокПослеВсехОстальных;	
			КонецЕсли;
			
		ИначеЕсли СтрокаРучногоПорядка.Значение = ПолеСортировки Тогда
			ЭтоСтрокиДо = Ложь;			
		КонецЕсли;
		ТаблицаНепронумерованныхОбъектов = ТаблицаОбъектов.Скопировать(Новый Структура("Порядок2", Неопределено));
	КонецЦикла;	
	
	Если НомерПоляСортировки + 1 < мСтруктураВизуальныхНастроек.СортировкаСубъектовРасписания.Количество() Тогда
		СортировкаТаблицыОбъектов(ТаблицаОбъектов, ТаблицаНепронумерованныхОбъектов, НомерПоляСортировки + 1, КоличествоСтрокДоВсехОстальных, КоличествоСтрокПослеВсехОстальных, СтруктураКолонок, МассивИменКолонок, РезультатЗапроса);
	Иначе
		Если ТаблицаНепронумерованныхОбъектов.Количество() > 0 Тогда
			КолонкиДляСортировки = СтрЗаменить(СтрСоединить(МассивИменКолонок, ","),"Объект","ОбъектПредставление");
			ТаблицаНепронумерованныхОбъектов.Сортировать(КолонкиДляСортировки);
			Для Каждого СтрокаТаблицы Из ТаблицаНепронумерованныхОбъектов Цикл
				ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаТаблицы);
				ТаблицаОбъектов.НайтиСтроки(СтруктураКолонок)[0].Порядок2 = ТаблицаНепронумерованныхОбъектов.Индекс(СтрокаТаблицы) + КоличествоСтрокДоВсехОстальных;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция СортировкаЗаполнитьТаблицуПоДереву(ТаблицаНепронумерованныхОбъектов, Дерево, ИмяКолонки, МассивПолейГрупп, СтрокаРучногоПорядка)
	
	Таблица = ТаблицаНепронумерованныхОбъектов.СкопироватьКолонки();
	Для Каждого СтрокаТаблицы Из ТаблицаНепронумерованныхОбъектов Цикл						
		Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]) Тогда
			СтрокаДерева = Дерево.Строки.НайтиСтроки(Новый Структура("Элемент", СтрокаТаблицы[ИмяКолонки]), Истина)[0];
			Пока СтрокаДерева <> Неопределено Цикл
				Если МассивПолейГрупп.Найти(СтрокаДерева.Элемент) = Неопределено Тогда
					Если СтрокаДерева.Элемент = СтрокаРучногоПорядка.Значение Тогда
						НоваяСтрока = Таблица.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
						Прервать;
					Иначе
						СтрокаДерева = СтрокаДерева.Родитель;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;						
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьЗапросПоДокументамСотрудников(ДляВыборкиОбъектов=Истина)
	
	Если Истина Тогда
		Если ДляВыборкиОбъектов Тогда
			Возврат "ВЫБРАТЬ
			        |	0 КАК Поле1,
			        |	ВложенныйЗапрос.ДеньЗаявки,
			        |	ВложенныйЗапрос.Сотрудник,
			        |	ВложенныйЗапрос.Сотрудник.Наименование,
					|	ВложенныйЗапрос.Сотрудник.ДополнительнаяИнформацияДляЖЗ,
			        |	ВложенныйЗапрос.Сотрудник,
					|	ВложенныйЗапрос.Сотрудник.Должность,
					|	ВложенныйЗапрос.Сотрудник.Специализация,
			        |	NULL КАК Поле3,
			        |	ВложенныйЗапрос.Сотрудник.Подразделение.Код,
			        |	ВложенныйЗапрос.Сотрудник.Подразделение,
			        |	ВложенныйЗапрос.Филиал,
			        |	ЛОЖЬ КАК ЭтоГрафик
			        |ИЗ
			        |	(ВЫБРАТЬ
			        |		НАЧАЛОПЕРИОДА(ЗаявкаРаботы.СсылкаДатаНачала, ДЕНЬ) КАК ДеньЗаявки,
			        |		ВЫБОР
			        |			КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			        |					И (НЕ ЕстьNULL(ЗаявкаРаботы.Номенклатура.ПланируетсяБезСотрудника,ЛОЖЬ))
			        |				ТОГДА ЗаявкаРаботы.СсылкаСотрудник
			        |			ИНАЧЕ ЗаявкаРаботы.Сотрудник
			        |		КОНЕЦ КАК Сотрудник,
			        |		ЗаявкаРаботы.Филиал КАК Филиал
			        |	ИЗ
			        |		РаботыЗаявок КАК ЗаявкаРаботы
			        |	ГДЕ
			        |		ЗаявкаРаботы.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
			        |		И (НЕ ЗаявкаРаботы.ПометкаУдаления)
			        |		И (ЗаявкаРаботы.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
			        |				ИЛИ ЗаявкаРаботы.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
			        |					)
			        |		И ЗаявкаРаботы.СсылкаДатаОкончания > ЗаявкаРаботы.СсылкаДатаНачала) КАК ВложенныйЗапрос
			        |ГДЕ
			        |	ВложенныйЗапрос.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			        |	И ВложенныйЗапрос.Сотрудник.УчаствуетВКалендарномПланировании";
		Иначе
			Возврат "ВЫБРАТЬ
			        |	ЗаявкиВТ.Ссылка КАК ДокументСсылка,
			        |	ЗаявкиВТ.ДеньЗаявки КАК Дата,
			        |	ЗаявкиВТ.Сотрудник КАК ОБЪЕКТ,
			        |	ЗаявкиВТ.КлиентСсылка.Представление КАК Клиент,
			        |	ЗаявкиВТ.ДатаНачала КАК ДатаНачала,
			        |	ЗаявкиВТ.ДатаОкончания,
			        |	ЗаявкиВТ.Сотрудник.Подразделение.Код,
			        |	ЗаявкиВТ.Сотрудник.Подразделение,
			        |	ЗаявкиВТ.Номенклатура КАК Работа,
			        |	ЗаявкиВТ.Состояние,
			        |	ЗаявкиВТ.СостояниеЦвет,
			        |	ЗаявкиВТ.СсылкаДатаНачала КАК ДокументДатаНачала,
			        |	ЗаявкиВТ.СсылкаДатаОкончания КАК ДокументДатаОкончания,
			        |	ЗаявкиВТ.КлиентСсылка КАК КлиентСсылка,
			        |	ЗаявкиВТ.Кабинет,
			        |	ЗаявкиВТ.Примечание
			        |ИЗ
			        |	ЗаявкиВТ КАК ЗаявкиВТ
			        |ГДЕ
			        |	ЗаявкиВТ.Сотрудник В(&Объекты)
			        |
			        |УПОРЯДОЧИТЬ ПО
			        |	ОБЪЕКТ,
			        |	ДокументСсылка,
			        |	ДатаНачала, ДатаОкончания";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗапросПоДокументамОборудованияДляВыборкиОбъектов()
	
	Возврат "ВЫБРАТЬ
	        |	1 КАК Поле1,
	        |	НАЧАЛОПЕРИОДА(ЗаявкаРаботы.СсылкаДатаНачала, ДЕНЬ) КАК Поле2,
	        |	ЗаявкаРаботы.Оборудование1 КАК Оборудование,
	        |	ЗаявкаРаботы.Оборудование1.Наименование КАК ОборудованиеНаименование,
			|	"""" КАК ДополнительнаяИнформацияДляЖЗ,
	        |	NULL КАК Поле3,
			|	NULL КАК Поле4,
			|	ЗаявкаРаботы.Оборудование1.Специализация КАК ОборудованиеСпециализация,
	        |	ЗаявкаРаботы.Оборудование1 КАК Оборудование1,
	        |	ЗаявкаРаботы.Оборудование1.Подразделение.Код КАК ОборудованиеПодразделениеКод,
	        |	ЗаявкаРаботы.Оборудование1.Подразделение КАК ОборудованиеПодразделение,
	        |	ЗаявкаРаботы.Филиал,
	        |	ЛОЖЬ КАК ЭтоГрафик
	        |ИЗ
	        |	РаботыЗаявок КАК ЗаявкаРаботы
	        |ГДЕ
	        |	(НЕ ЗаявкаРаботы.ПометкаУдаления)
	        |	И ЗаявкаРаботы.СсылкаДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	        |	И ЗаявкаРаботы.Оборудование1.УчаствуетВКалендарномПланировании
	        |	И ЗаявкаРаботы.СсылкаДатаОкончания > ЗаявкаРаботы.СсылкаДатаНачала
	        |	И (ЗаявкаРаботы.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
	        |			ИЛИ ЗаявкаРаботы.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
	        |				)
	        |	И ЗаявкаРаботы.Оборудование1 <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	1,
	        |	НАЧАЛОПЕРИОДА(ЗаявкаРаботы.СсылкаДатаНачала, ДЕНЬ),
	        |	ЗаявкаРаботы.Оборудование2,
	        |	ЗаявкаРаботы.Оборудование2.Наименование,
			|	"""",
	        |	NULL,
			|	NULL,
			|	ЗаявкаРаботы.Оборудование2.Специализация,
	        |	ЗаявкаРаботы.Оборудование2,
	        |	ЗаявкаРаботы.Оборудование2.Подразделение.Код,
	        |	ЗаявкаРаботы.Оборудование2.Подразделение,
	        |	ЗаявкаРаботы.Филиал,
	        |	ЛОЖЬ
	        |ИЗ
	        |	РаботыЗаявок КАК ЗаявкаРаботы
	        |ГДЕ
	        |	(НЕ ЗаявкаРаботы.Ссылка.ПометкаУдаления)
	        |	И ЗаявкаРаботы.СсылкаДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	        |	И ЗаявкаРаботы.Оборудование2.УчаствуетВКалендарномПланировании
	        |	И ЗаявкаРаботы.СсылкаДатаОкончания > ЗаявкаРаботы.СсылкаДатаНачала
	        |	И (ЗаявкаРаботы.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
	        |			ИЛИ ЗаявкаРаботы.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
	        |				)
	        |	И ЗаявкаРаботы.Оборудование2 <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	1,
	        |	НАЧАЛОПЕРИОДА(ЗаявкаРаботы.СсылкаДатаНачала, ДЕНЬ),
	        |	ЗаявкаРаботы.Оборудование3,
	        |	ЗаявкаРаботы.Оборудование3.Наименование,
			|	"""",
	        |	NULL,
			|	NULL,
			|	ЗаявкаРаботы.Оборудование3.Специализация,
	        |	ЗаявкаРаботы.Оборудование3,
	        |	ЗаявкаРаботы.Оборудование3.Подразделение.Код,
	        |	ЗаявкаРаботы.Оборудование3.Подразделение,
	        |	ЗаявкаРаботы.Филиал,
	        |	ЛОЖЬ
	        |ИЗ
	        |	РаботыЗаявок КАК ЗаявкаРаботы
	        |ГДЕ
	        |	(НЕ ЗаявкаРаботы.Ссылка.ПометкаУдаления)
	        |	И ЗаявкаРаботы.СсылкаДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	        |	И ЗаявкаРаботы.Оборудование3.УчаствуетВКалендарномПланировании
	        |	И ЗаявкаРаботы.СсылкаДатаОкончания > ЗаявкаРаботы.СсылкаДатаНачала
	        |	И (ЗаявкаРаботы.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
	        |			ИЛИ ЗаявкаРаботы.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
	        |				)
	        |	И ЗаявкаРаботы.Оборудование3 <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	        |
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	1,
	        |	НАЧАЛОПЕРИОДА(ЗаявкаРаботы.СсылкаДатаНачала, ДЕНЬ),
	        |	ЗаявкаРаботы.Ссылка.Кабинет,
	        |	ЗаявкаРаботы.Ссылка.Кабинет.Наименование,
			|	"""",
	        |	NULL,
			|	NULL,
			|	ЗаявкаРаботы.Ссылка.Кабинет.Специализация,
	        |	ЗаявкаРаботы.Ссылка.Кабинет,
	        |	ЗаявкаРаботы.Ссылка.Кабинет.Подразделение.Код,
	        |	ЗаявкаРаботы.Ссылка.Кабинет.Подразделение,
	        |	ЗаявкаРаботы.Филиал,
	        |	ЛОЖЬ
	        |ИЗ
	        |	РаботыЗаявок КАК ЗаявкаРаботы
	        |ГДЕ
	        |	(НЕ ЗаявкаРаботы.Ссылка.ПометкаУдаления)
	        |	И ЗаявкаРаботы.СсылкаДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	        |	И ЗаявкаРаботы.Ссылка.Кабинет.УчаствуетВКалендарномПланировании
	        |	И ЗаявкаРаботы.СсылкаДатаОкончания > ЗаявкаРаботы.СсылкаДатаНачала
	        |	И (ЗаявкаРаботы.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
	        |			ИЛИ ЗаявкаРаботы.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
	        |				)
	        |	И ЗаявкаРаботы.Кабинет <> ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	1,
	        |	НАЧАЛОПЕРИОДА(ЗаявкаРаботы.СсылкаДатаНачала, ДЕНЬ),
	        |	НоменклатураОборудования.Оборудование,
	        |	НоменклатураОборудования.Оборудование.Наименование,
			|	"""",
	        |	NULL,
			|	NULL,
			|	НоменклатураОборудования.Оборудование.Специализация,
	        |	НоменклатураОборудования.Оборудование,
	        |	НоменклатураОборудования.Оборудование.Подразделение.Код,
	        |	НоменклатураОборудования.Оборудование.Подразделение,
	        |	ЗаявкаРаботы.Филиал,
	        |	ЛОЖЬ
	        |ИЗ
	        |	РаботыЗаявок КАК ЗаявкаРаботы
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Оборудования КАК НоменклатураОборудования
	        |		ПО ЗаявкаРаботы.Номенклатура = НоменклатураОборудования.Ссылка
	        |			И (ЗаявкаРаботы.Филиал = НоменклатураОборудования.Филиал ИЛИ НоменклатураОборудования.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	        |ГДЕ
	        |	(НЕ ЗаявкаРаботы.Ссылка.ПометкаУдаления)
	        |	И ЗаявкаРаботы.СсылкаДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	        |	И ЗаявкаРаботы.СсылкаДатаОкончания > ЗаявкаРаботы.СсылкаДатаНачала
	        |	И НоменклатураОборудования.Оборудование.УчаствуетВКалендарномПланировании
	        |	И НоменклатураОборудования.Оборудование ССЫЛКА Справочник.Оборудование
	        |	И (ЗаявкаРаботы.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
	        |			ИЛИ ЗаявкаРаботы.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена)
	        |				)";
	
КонецФункции

Функция ПолучитьЗапросПоРаботамОборудования()
	
	Возврат "ВЫБРАТЬ
	        |	ЗаявкаРаботы.Ссылка КАК Ссылка,
	        |	НАЧАЛОПЕРИОДА(Заявки.ДатаНачала, ДЕНЬ) КАК Дата,
	        |	ЗаявкаРаботы.Оборудование1 КАК Оборудование1,
	        |	ЗаявкаРаботы.Оборудование2 КАК Оборудование2,
	        |	ЗаявкаРаботы.Оборудование3 КАК Оборудование3,
	        |	Заявки.Кабинет КАК Кабинет,
	        |	ЗаявкаРаботы.ДатаНачала КАК ДатаНачала,
	        |	ЗаявкаРаботы.ДатаОкончания КАК ДатаОкончания,
	        |	Заявки.ДатаНачала КАК СсылкаДатаНачала,
	        |	Заявки.ДатаОкончания КАК СсылкаДатаОкончания,
	        |	ЗаявкаРаботы.НомерСтроки КАК НомерСтроки,
	        |	ЗаявкаРаботы.Продолжительность КАК Продолжительность,
	        |	ЗаявкаРаботы.Номенклатура КАК Номенклатура,
	        |	ВЫБОР
	        |		КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(СПРАВОЧНИК.Сотрудники.ПустаяСсылка)
	        |			ТОГДА Заявки.Врач.Представление
	        |		ИНАЧЕ ЗаявкаРаботы.Сотрудник.Представление
	        |	КОНЕЦ КАК СотрудникПредставление,
	        |	Заявки.Состояние КАК Состояние,
	        |	Заявки.СостояниеЦвет КАК СостояниеЦвет,
	        |	Заявки.Филиал КАК Филиал,
	        |	ЗаявкаРаботы.Оборудование1.УчаствуетВКалендарномПланировании КАК Оборудование1УчаствуетВКалендарномПланировании,
	        |	ЗаявкаРаботы.Оборудование2.УчаствуетВКалендарномПланировании КАК Оборудование2УчаствуетВКалендарномПланировании,
	        |	ЗаявкаРаботы.Оборудование3.УчаствуетВКалендарномПланировании КАК Оборудование3УчаствуетВКалендарномПланировании,
	        |	Заявки.Клиент КАК КлиентСсылка,
	        |	Заявки.Примечание КАК Примечание,
			|	НАЧАЛОПЕРИОДА(ЗаявкаРаботы.Ссылка.ДатаНачала, ДЕНЬ) КАК ДеньЗаявки,
			|		ВЫБОР
			|			КОГДА ЗаявкаРаботы.Номенклатура.ПланируетсяБезСотрудника
			|				ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|			КОГДА ЗаявкаРаботы.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|				ТОГДА ЗаявкаРаботы.Ссылка.Сотрудник
			|			ИНАЧЕ ЗаявкаРаботы.Сотрудник
			|		КОНЕЦ КАК Сотрудник
	        |ПОМЕСТИТЬ ЗаявкиВТ
	        |ИЗ
	        |	РаботыЗаявок КАК ЗаявкаРаботы
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			Заявка.Ссылка КАК Ссылка,
	        |			Заявка.ДатаНачала КАК ДатаНачала,
	        |			Заявка.ДатаОкончания КАК ДатаОкончания,
	        |			Заявка.Клиент КАК Клиент,
	        |			Заявка.Состояние КАК Состояние,
	        |			Заявка.Состояние.Цвет КАК СостояниеЦвет,
	        |			Заявка.Кабинет КАК Кабинет,
	        |			Заявка.Сотрудник КАК Врач,
	        |			Заявка.Филиал КАК Филиал,
	        |			Заявка.Примечание КАК Примечание
	        |		ИЗ
	        |			Документ.Заявка КАК Заявка
	        |		ГДЕ
	        |			Заявка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	        |			И (&Филиал = НЕОПРЕДЕЛЕНО
	        |					ИЛИ Заявка.Филиал = &Филиал)
	        |			И Заявка.ПометкаУдаления = ЛОЖЬ
	        |			И Заявка.ДатаОкончания > Заявка.ДатаНачала
	        |			И (Заявка.Состояние = ЗНАЧЕНИЕ(Справочник.ВидысостоянийЗаявок.ПустаяСсылка)
	        |					ИЛИ Заявка.Состояние.ТипСостояния <> ЗНАЧЕНИЕ(Перечисление.ТипыСостоянийЗаявок.Отменена))) КАК Заявки
	        |		ПО ЗаявкаРаботы.Ссылка = Заявки.Ссылка
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЗаявкиВТ.Ссылка КАК Ссылка,
	        |	ЗаявкиВТ.Дата КАК Дата,
	        |	ЗаявкиВТ.Оборудование1 КАК Оборудование1,
	        |	ЗаявкиВТ.Оборудование2 КАК Оборудование2,
	        |	ЗаявкиВТ.Оборудование3 КАК Оборудование3,
	        |	ЗаявкиВТ.Кабинет КАК Кабинет,
	        |	ЗаявкиВТ.ДатаНачала КАК ДатаНачала,
	        |	ЗаявкиВТ.ДатаОкончания КАК ДатаОкончания,
	        |	ЗаявкиВТ.СсылкаДатаНачала КАК СсылкаДатаНачала,
	        |	ЗаявкиВТ.СсылкаДатаОкончания КАК СсылкаДатаОкончания,
	        |	ЗаявкиВТ.НомерСтроки КАК НомерСтроки,
	        |	ЗаявкиВТ.Продолжительность КАК Продолжительность,
	        |	ЗаявкиВТ.Номенклатура КАК Номенклатура,
	        |	ЗаявкиВТ.СотрудникПредставление КАК СотрудникПредставление,
	        |	ЗаявкиВТ.Состояние КАК Состояние,
	        |	ЗаявкиВТ.СостояниеЦвет КАК СостояниеЦвет,
	        |	ЗаявкиВТ.Филиал КАК Филиал,
	        |	ЗаявкиВТ.Оборудование1УчаствуетВКалендарномПланировании КАК Оборудование1УчаствуетВКалендарномПланировании,
	        |	ЗаявкиВТ.Оборудование2УчаствуетВКалендарномПланировании КАК Оборудование2УчаствуетВКалендарномПланировании,
	        |	ЗаявкиВТ.Оборудование3УчаствуетВКалендарномПланировании КАК Оборудование3УчаствуетВКалендарномПланировании,
	        |	ЗаявкиВТ.КлиентСсылка КАК КлиентСсылка,
	        |	ЗаявкиВТ.Примечание КАК Примечание
	        |ПОМЕСТИТЬ ЗаявкиТЧ
	        |ИЗ
	        |	ЗаявкиВТ КАК ЗаявкиВТ
	        |ГДЕ
	        |	НЕ(ЗаявкиВТ.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	        |				И ЗаявкиВТ.Номенклатура.ПланируетсяБезОборудования)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЗаявкиТЧ.Ссылка КАК ДокументСсылка,
	        |	ЗаявкиТЧ.Дата КАК Дата,
	        |	ЗаявкиТЧ.Оборудование1 КАК Объект,
	        |	ЗаявкиТЧ.ДатаНачала КАК ДатаНачала,
	        |	ЗаявкиТЧ.ДатаОкончания КАК ДатаОкончания,
	        |	ЗаявкиТЧ.СсылкаДатаНачала КАК ДокументДатаНачала,
	        |	ЗаявкиТЧ.СсылкаДатаОкончания КАК ДокументДатаОкончания,
	        |	ЗаявкиТЧ.НомерСтроки КАК НомерСтроки,
	        |	ЗаявкиТЧ.Продолжительность КАК Продолжительность,
	        |	ЗаявкиТЧ.Номенклатура КАК Работа,
	        |	ЗаявкиТЧ.СотрудникПредставление КАК СотрудникПредставление,
	        |	ЗаявкиТЧ.Состояние КАК Состояние,
	        |	ЗаявкиТЧ.СостояниеЦвет КАК СостояниеЦвет,
	        |	ЗаявкиТЧ.КлиентСсылка КАК КлиентСсылка,
	        |	ЗаявкиТЧ.Примечание КАК Примечание
	        |ИЗ
	        |	ЗаявкиТЧ КАК ЗаявкиТЧ
	        |ГДЕ
	        |	ЗаявкиТЧ.Оборудование1УчаствуетВКалендарномПланировании = ИСТИНА
	        |	И ЗаявкиТЧ.Оборудование1 В(&Объекты)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ЗаявкиТЧ.Ссылка,
	        |	ЗаявкиТЧ.Дата,
	        |	ЗаявкиТЧ.Оборудование2,
	        |	ЗаявкиТЧ.ДатаНачала,
	        |	ЗаявкиТЧ.ДатаОкончания,
	        |	ЗаявкиТЧ.СсылкаДатаНачала,
	        |	ЗаявкиТЧ.СсылкаДатаОкончания,
	        |	ЗаявкиТЧ.НомерСтроки,
	        |	ЗаявкиТЧ.Продолжительность,
	        |	ЗаявкиТЧ.Номенклатура,
	        |	ЗаявкиТЧ.СотрудникПредставление,
	        |	ЗаявкиТЧ.Состояние,
	        |	ЗаявкиТЧ.СостояниеЦвет,
	        |	ЗаявкиТЧ.КлиентСсылка,
	        |	ЗаявкиТЧ.Примечание
	        |ИЗ
	        |	ЗаявкиТЧ КАК ЗаявкиТЧ
	        |ГДЕ
	        |	ЗаявкиТЧ.Оборудование2 В(&Объекты)
	        |	И ЗаявкиТЧ.Оборудование2УчаствуетВКалендарномПланировании = ИСТИНА
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ЗаявкиТЧ.Ссылка,
	        |	ЗаявкиТЧ.Дата,
	        |	ЗаявкиТЧ.Оборудование3,
	        |	ЗаявкиТЧ.ДатаНачала,
	        |	ЗаявкиТЧ.ДатаОкончания,
	        |	ЗаявкиТЧ.СсылкаДатаНачала,
	        |	ЗаявкиТЧ.СсылкаДатаОкончания,
	        |	ЗаявкиТЧ.НомерСтроки,
	        |	ЗаявкиТЧ.Продолжительность,
	        |	ЗаявкиТЧ.Номенклатура,
	        |	ЗаявкиТЧ.СотрудникПредставление,
	        |	ЗаявкиТЧ.Состояние,
	        |	ЗаявкиТЧ.СостояниеЦвет,
	        |	ЗаявкиТЧ.КлиентСсылка,
	        |	ЗаявкиТЧ.Примечание
	        |ИЗ
	        |	ЗаявкиТЧ КАК ЗаявкиТЧ
	        |ГДЕ
	        |	ЗаявкиТЧ.Оборудование3 В(&Объекты)
	        |	И ЗаявкиТЧ.Оборудование3УчаствуетВКалендарномПланировании = ИСТИНА
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ЗаявкиТЧ.Ссылка,
	        |	ЗаявкиТЧ.Дата,
	        |	ЗаявкиТЧ.Кабинет,
	        |	ЗаявкиТЧ.ДатаНачала,
	        |	ЗаявкиТЧ.ДатаОкончания,
	        |	ЗаявкиТЧ.СсылкаДатаНачала,
	        |	ЗаявкиТЧ.СсылкаДатаОкончания,
	        |	ЗаявкиТЧ.НомерСтроки,
	        |	ЗаявкиТЧ.Продолжительность,
	        |	ЗаявкиТЧ.Номенклатура,
	        |	ЗаявкиТЧ.СотрудникПредставление,
	        |	ЗаявкиТЧ.Состояние,
	        |	ЗаявкиТЧ.СостояниеЦвет,
	        |	ЗаявкиТЧ.КлиентСсылка,
	        |	ЗаявкиТЧ.Примечание
	        |ИЗ
	        |	ЗаявкиТЧ КАК ЗаявкиТЧ
	        |ГДЕ
	        |	ЗаявкиТЧ.Кабинет.УчаствуетВКалендарномПланировании = ИСТИНА
	        |	И ЗаявкиТЧ.Кабинет В(&Объекты)
	        |	И (ЗаявкиТЧ.Оборудование1 = НЕОПРЕДЕЛЕНО
	        |			ИЛИ ЗаявкиТЧ.Оборудование1 = ЗНАЧЕНИЕ(Справочник.Оборудование.ПустаяСсылка)
	        |			ИЛИ ЗаявкиТЧ.Оборудование1 = ЗНАЧЕНИЕ(Справочник.МоделиОборудования.ПустаяСсылка))
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ЗаявкиТЧ.Ссылка,
	        |	ЗаявкиТЧ.Дата,
	        |	НоменклатураОборудования.Оборудование,
	        |	ЗаявкиТЧ.ДатаНачала,
	        |	ЗаявкиТЧ.ДатаОкончания,
	        |	ЗаявкиТЧ.СсылкаДатаНачала,
	        |	ЗаявкиТЧ.СсылкаДатаОкончания,
	        |	ЗаявкиТЧ.НомерСтроки,
	        |	ЗаявкиТЧ.Продолжительность,
	        |	ЗаявкиТЧ.Номенклатура,
	        |	ЗаявкиТЧ.СотрудникПредставление,
	        |	ЗаявкиТЧ.Состояние,
	        |	ЗаявкиТЧ.СостояниеЦвет,
	        |	ЗаявкиТЧ.КлиентСсылка,
	        |	ЗаявкиТЧ.Примечание
	        |ИЗ
	        |	ЗаявкиТЧ КАК ЗаявкиТЧ
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Оборудования КАК НоменклатураОборудования
	        |		ПО ЗаявкиТЧ.Номенклатура = НоменклатураОборудования.Ссылка
	        |			И (ЗаявкиТЧ.Филиал = НоменклатураОборудования.Филиал
	        |				ИЛИ НоменклатураОборудования.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	        |ГДЕ
	        |	НоменклатураОборудования.Оборудование.УчаствуетВКалендарномПланировании
	        |	И НоменклатураОборудования.Оборудование В(&Объекты)
	        |	И НоменклатураОборудования.Оборудование ССЫЛКА Справочник.Оборудование
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ДокументСсылка,
	        |	ДатаНачала";
		
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Возвращаемое значение:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Функция СформироватьОтчет() Экспорт
	
	Перем МестонахождениеМедКарт;
	
	ЗаполнитьКонстантыОтчета();
	ИнициироватьТаблицуРасшифровокСвободногоВремени();
	
	мПредставлениеВременныхИнтервалов = Новый Соответствие;
	мРасшифровкиКолонок = Новый Соответствие;
	мРасшифровкиСтрок = Новый Соответствие;
	мПредставлениеВремениСтрок = Новый Соответствие;
	мПредставленияСубъектов = Новый Соответствие;
	
	мОтдельныеКолонкиГрафика = Новый Массив;
	
	КомментарииДня = Новый ТаблицаЗначений;
	ЗаполнитьТаблицуКомментариевДня();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.Область().ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ДокументРезультат.Область().ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Если Ложь Тогда ДокументРезультат = Новый  ТабличныйДокумент КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
 	ТаблицаОбъектов = ПолучитьТаблицуОбъектовЖурналаЗаписи(МенеджерВТ);
	ТаблицаОбъектовПоДатам = ТаблицаОбъектов.Скопировать(,"Объект, Дата");
	ТаблицаОбъектовПоДатам.Свернуть("Объект, Дата", "");
	
	Объекты = ТаблицаОбъектовПоДатам.ВыгрузитьКолонку("Объект");
	ВыбГрафики	= ПолучитьВыборкуГрафиков(Объекты);
	/////////////////////////////////////////////////////////////////////	
	мВыведенныеЗаявки = Новый СписокЗначений;	
	мТабНульСтрокиВремени = Новый ТаблицаЗначений;
	мТабНульСтрокиВремени.Колонки.Добавить("Дата",	Новый ОписаниеТипов("Дата"));
	мТабНульСтрокиВремени.Колонки.Добавить("Объект");
	мТабНульСтрокиВремени.Колонки.Добавить("Время",	Новый ОписаниеТипов("Дата"));
	мТабНульСтрокиВремени.Колонки.Добавить("ВремяДобавочное",	Новый ОписаниеТипов("Дата"));
	
	ТабГрафики = ПолучитьТаблицуГрафиков(ВыбГрафики);	
    ТабСобытий = ПолучитьТаблицуСобытий(ВыбГрафики); // Для поиска событий графиков с непустыми представлениями события.
		
	ТаблицаДиапазонов = Новый ТаблицаЗначений;
	ТаблицаДиапазонов.Колонки.Добавить("Дата");
	
	ДанныеДокументов = ПолучитьВыборкуДокументовОтчета(Объекты, МенеджерВТ);
	
	Отбор = Новый Структура("Объект, Дата, ВремяНач");
	
	ТабДокументы = ПолучитьЕдинуюТаблицуДокументов(ДанныеДокументов);
	
	Для Каждого СтрДокументы Из ТабДокументы Цикл
		
		Если ЗначениеЗаполнено(СтрДокументы.ДокументСсылка) Тогда
			мВыведенныеЗаявки.Добавить(СтрДокументы.ДокументСсылка);
			
			Если СтрДокументы.ВремяНачала <> СтрДокументы.ВремяОкончания Тогда 
				Отбор.Объект 	= СтрДокументы.Объект;
				Отбор.Дата	 	= НачалоДня(СтрДокументы.ДатаНачала);
				Отбор.ВремяНач	= ПолучитьВремяНулевойДаты(СтрДокументы.ДатаНачала);
				
				мсСтрГрафика = ТабГрафики.НайтиСтроки(Отбор);
				Для Каждого СтрГрафика Из мсСтрГрафика Цикл
					Если Не СтрГрафика.ОбрезокСобытияБезГоловы Тогда
						Если СтрГрафика.ВремяНачала = СтрГрафика.ВремяОкончания Тогда
							СтрГрафика.ВремяОкончания = СтрГрафика.ВремяОкончания + 1;
						КонецЕсли;
						СтрГрафика.ВремяНачала = СтрГрафика.ВремяНачала + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Подбор секунд начала (и окончания) для работ с нулевой длительностью.
	ПодобратьВремяНулевыхРабот(ТабДокументы, ТабГрафики);
	
	Для Каждого СтрГрафика Из ТабГрафики Цикл
		Если СтрГрафика.ВремяНач <> СтрГрафика.ВремяНачала И 
			Не СтрГрафика.ОбрезокСобытияБезГоловы
		Тогда
			СтрНульВремя = мТабНульСтрокиВремени.Добавить();
			СтрНульВремя.Объект = СтрГрафика.Объект;
			СтрНульВремя.Дата	= СтрГрафика.Дата;
			СтрНульВремя.Время	= СтрГрафика.ВремяНач;
			СтрНульВремя.ВремяДобавочное = СтрГрафика.ВремяНачала;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрДок Из ТабДокументы Цикл
		Если СтрДок.ВремяНачала <> НачалоМинуты(СтрДок.ВремяНачала) Тогда
			СтрНульВремя = мТабНульСтрокиВремени.Добавить();
			СтрНульВремя.Объект = ?(СтрДок.СтрокаРасписанияКлиента,СтрДок.Клиент,СтрДок.Объект);
			СтрНульВремя.Дата	= СтрДок.Дата;
			СтрНульВремя.Время	= НачалоМинуты(СтрДок.ВремяНачала);
			СтрНульВремя.ВремяДобавочное = СтрДок.ВремяНачала;
		КонецЕсли;
	КонецЦикла;
	
	мТабНульСтрокиВремени.Сортировать("Время, ВремяДобавочное УБЫВ");
	мТабНульДиапазоныВремени = мТабНульСтрокиВремени.Скопировать();
	мТабНульДиапазоныВремени.Свернуть("Время, ВремяДобавочное","");
	мТабНульДиапазоныВремени.Сортировать("ВремяДобавочное");
	
	резДокументы = ДанныеДокументов.РезультатДокументыСотрудников;
	резДокументыКабинетов = ДанныеДокументов.РезультатДокументыОборудования;
	
	ВыбБлоки = резДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыбБлокиКабинетов = резДокументыКабинетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Местонахождение медицинских карт. Кэширование нахождений.
	Если УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетМестонахожденияМедкарт")
//		И мСтруктураВизуальныхНастроек.ОсновнаяНастройкаЯчеек.ПоследовательностьОтображения.Найти(Справочники.ЯчейкиКалендаря.МедКартаНомер) <> Неопределено
	Тогда
		МассивСсылокДокументов = резДокументы.Выгрузить().ВыгрузитьКолонку("ДокументСсылка");
		Для Каждого СтрокаТаблицы Из резДокументыКабинетов.Выгрузить() Цикл
			Если МассивСсылокДокументов.Найти(СтрокаТаблицы.ДокументСсылка) = Неопределено Тогда
				МассивСсылокДокументов.Добавить(СтрокаТаблицы.ДокументСсылка);
			КонецЕсли;
		КонецЦикла;
		МестонахождениеМедКарт = УстановитьМестонахожденияМедКарт(МассивСсылокДокументов);
	КонецЕсли;
	
	// Определение времени начала и окончания за весь период
	ВремяНачалаДня		= мВремяНачалаДня;
	мВремяОкончанияДня	= ?(ЗначениеЗаполнено(мВремяОкончанияДня), мВремяОкончанияДня, Дата('000101012200'));
	
	ВысотаШапки = ?(РежимФормирования = мРежимыФормирования.Период,2,1);
	
	Для Каждого СтрГрафика Из ТабГрафики Цикл
		СтрокаДаты = ТаблицаДиапазонов.Добавить();
		СтрокаДаты.Дата = СтрГрафика.ВремяНачала;
			
		Если ЗначениеЗаполнено(СтрГрафика.ВремяОкончания)
			И СтрГрафика.ВремяНачала <> СтрГрафика.ВремяОкончания
		Тогда
			СтрокаДаты = ТаблицаДиапазонов.Добавить();
			СтрокаДаты.Дата = СтрГрафика.ВремяОкончания;
		КонецЕсли;
	КонецЦикла;		
		
	Для Каждого СтрДок Из табДокументы Цикл
		СтрокаДаты = ТаблицаДиапазонов.Добавить();
		СтрокаДаты.Дата = СтрДок.ВремяНачала;
		
		Если ЗначениеЗаполнено(СтрДок.ВремяОкончания)
			И СтрДок.ВремяНачала <> СтрДок.ВремяОкончания
		Тогда
			СтрокаДаты = ТаблицаДиапазонов.Добавить();
			СтрокаДаты.Дата = СтрДок.ВремяОкончания;
		КонецЕсли;
	КонецЦикла;	
	
	/////////////////////////////////////////////////////////////
	ТекДата = ДатаНачала;
	Пока ТекДата <= ДатаОкончания Цикл
		ОпределитьГраницыДня(резДокументы.Выбрать(), резДокументыКабинетов.Выбрать(), ВыбГрафики,ТекДата,мВремяНачалаДня,мВремяОкончанияДня);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	ВремяНачалаДняДляТЗ = мВремяНачалаДня;
	ВремяКонцаДняДляТЗ	= мВремяОкончанияДня;
	КалендарьПланирования.ОкруглитьВремяДоПериодаПланирования(ВремяНачалаДняДляТЗ);
	КалендарьПланирования.ОкруглитьВремяДоПериодаПланирования(ВремяКонцаДняДляТЗ);
	
	Если мКвантПланирования <> 0 Тогда
		
		Пока ВремяНачалаДняДляТЗ <= ВремяКонцаДняДляТЗ Цикл
			
			СтараяСтрокаДаты = ТаблицаДиапазонов.Найти(ВремяНачалаДняДляТЗ, "Дата");
			
			Если СтараяСтрокаДаты = Неопределено Тогда
				СтрокаДаты = ТаблицаДиапазонов.Добавить();
				СтрокаДаты.Дата		= ВремяНачалаДняДляТЗ;
			КонецЕсли;
			ВремяНачалаДняДляТЗ = ВремяНачалаДняДляТЗ + мКвантПланирования;
		КонецЦикла;
	КонецЕсли;
	
	ВыбГрафики.Сбросить();
	
	ТаблицаДиапазонов.Свернуть("Дата");
	ТаблицаДиапазонов.Сортировать("Дата Возр");
	СтрокаПред = Неопределено;
	
	Для сч = 1 По 15 Цикл
		Для Каждого СтрокаДаты Из ТаблицаДиапазонов	Цикл
			
			Если СтрокаПред <> Неопределено Тогда
				Если НачалоДня(СтрокаПред.Дата) = НачалоДня(СтрокаДаты.Дата) Тогда
					Если НачалоМинуты(СтрокаПред.Дата) = НачалоМинуты(СтрокаДаты.Дата)
						И СтрокаПред.Дата < СтрокаДаты.Дата
					Тогда
						ТаблицаДиапазонов.Сдвинуть(СтрокаДаты,-1);
					КонецЕсли;
					СтрокаПред = СтрокаДаты;
				Иначе
					СтрокаПред = Неопределено;
				КонецЕсли;
			Иначе
				СтрокаПред = СтрокаДаты;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Сохранение перечня клиентов и номенклатуры заявок для формирования кэшей.
	ВозвращаемыеДанныеЗаявок = Новый Соответствие;
	
	ТабДокументыВрем = ТабДокументы.Скопировать(,"КлиентСсылка, ДокументСсылка, Работа");
	ТабДокументыВремКлиенты = ТабДокументыВрем.Скопировать(,"КлиентСсылка");
	ТабДокументыВремКлиенты.Свернуть("КлиентСсылка");
	ТабДокументыВремЗаявки = ТабДокументыВрем.Скопировать(,"ДокументСсылка");
	ТабДокументыВремЗаявки.Свернуть("ДокументСсылка");
	ТабДокументыВремРаботы = ТабДокументыВрем.Скопировать(,"Работа");
	ТабДокументыВремРаботы.Свернуть("Работа");
	
	мКлиенты = ТабДокументыВремКлиенты.ВыгрузитьКолонку("КлиентСсылка");
	мЗаявки	 = ТабДокументыВремЗаявки.ВыгрузитьКолонку("ДокументСсылка");
	мУслуги	 = ТабДокументыВремРаботы.ВыгрузитьКолонку("Работа");
	ТабДокументыВрем.Свернуть("КлиентСсылка, ДокументСсылка");
	Для Каждого СтрокаДокумента Из ТабДокументыВрем Цикл
		ВозвращаемыеДанныеЗаявок.Вставить(СтрокаДокумента.ДокументСсылка, СтрокаДокумента.КлиентСсылка);
	КонецЦикла;
	
	ТаблицаДиапазонов.Свернуть("Дата");
	ТаблицаДиапазонов.Сортировать("Дата Возр");
	
	СформироватьКэшДанныхЗаявок(мКлиенты, мУслуги, мЗаявки);
	
	ТаблицаДиапазонов.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число"));
	ПустаяДата = Дата(1,1,1);
	Для Каждого СтрокаДиапазона Из ТаблицаДиапазонов Цикл
		СтрокаДиапазона.Продолжительность = СтрокаДиапазона.Дата - ПустаяДата;
	КонецЦикла;
	
	// Получение табличных документов, содержащих пустую колонку сотрудника/оборудования нужной ширины и высоты.
    КолонкиСотрудникаОборудования = ПолучитьСтруктуруПустыхКолонокСеткиДня(ТаблицаДиапазонов.Количество() - 1, Объекты);
	
	ШиринаКартинки = 4;
	ОтступыКартинок = Новый Соответствие;
	КэшКоличествоПробеловДляКартинок = Новый Соответствие;
	мЯчейкиУслуг = ВыводимыеВЗаявкуЯчейкиУслуг();
	
	// Вывод графиков по дням
	ПервыеКолонкиДней = Новый Соответствие; // Для второго цикла по документам дней.
	ТекДата = ДатаНачала;
	Пока ТекДата <= ДатаОкончания Цикл
		СписокОбъектовНаДень = ПолучитьСписокОбъектовНаДень(ТаблицаОбъектовПоДатам,ТекДата);
		
		ЦветаСубъектовВШапке = ПолучитьЦветаСубъектовВШапкеНаДень(ТаблицаОбъектов,ТекДата);
		
		Если СписокОбъектовНаДень.Количество() = 0 Тогда
			СписокОбъектовНаДень.Добавить(Справочники.Сотрудники.ПустаяСсылка());
		КонецЕсли;
		
		ВыводитьКолонкуВремени = (ТекДата = ДатаНачала);
		
		КолонкаНачалаВывода	= ДокументРезультат.ШиринаТаблицы + 1;
		ПервыеКолонкиДней.Вставить(ТекДата, КолонкаНачалаВывода);
		
		ВывестиСеткуДняОтчета(СписокОбъектовНаДень, ДокументРезультат,ТекДата,мВремяНачалаДня,мВремяОкончанияДня, КолонкаНачалаВывода, ВыводитьКолонкуВремени, ТаблицаДиапазонов, КолонкиСотрудникаОборудования, ЦветаСубъектовВШапке);
		
		ВывестиГрафики(СписокОбъектовНаДень,ДокументРезультат,ТабГрафики,ТекДата,мВремяНачалаДня,мВремяОкончанияДня, КолонкаНачалаВывода, ТаблицаДиапазонов);
		
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	// Вывод пунктирных линий в графике
	ВывестиЛинииРазделенияЧасовВСеткеОтчета(ДокументРезультат, ТаблицаДиапазонов);
	
	// Вывод документов по дням
	ТекДата = ДатаНачала;
	Пока ТекДата <= ДатаОкончания Цикл
		СписокОбъектовНаДень = ПолучитьСписокОбъектовНаДень(ТаблицаОбъектовПоДатам,ТекДата);
		КолонкаНачалаВывода	= ПервыеКолонкиДней.Получить(ТекДата);
		ВывестиДокументы(СписокОбъектовНаДень,ДокументРезультат,ВыбБлоки,ВыбБлокиКабинетов,ТекДата,мВремяНачалаДня,мВремяОкончанияДня, КолонкаНачалаВывода, ТаблицаДиапазонов);
		
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	
	ДокументРезультат.ФиксацияСверху = ВысотаШапки;
	ДокументРезультат.ФиксацияСлева	 = 3;
	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСлева	= 10;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ДокументРезультат.КлючПараметровПечати = "Календарь планирования";
	
	МассивФилиалов = Новый Массив;
	
	// Заполнение возвращаемого поля ПовторяющиесяРасшифровкиСвободногоВремени 
	ПовторяющиесяРасшифровкиСвободногоВремени = Новый Соответствие;
	Для Каждого СтрокаРасшифровки Из мТаблицаРасшифровокСвободногоВремени Цикл
		
		ИндексФилиала = МассивФилиалов.Найти(СтрокаРасшифровки.Филиал);
		Если ИндексФилиала = Неопределено Тогда
			ИндексФилиала = МассивФилиалов.Количество();
			МассивФилиалов.Добавить(СтрокаРасшифровки.Филиал);
			Если мСтруктураВизуальныхНастроек.ЕстьВыводФилиала Тогда
				мПредставленияСубъектов.Вставить(СтрокаРасшифровки.Филиал, Строка(СтрокаРасшифровки.Филиал));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Субъект) Тогда
			ДанныеРасшифровки = Новый Структура("Субъект, ИдентификаторСобытия, Филиал",
												СтрокаРасшифровки.Субъект,
												СтрокаРасшифровки.ИдентификаторСобытия,
												ИндексФилиала);
		Иначе
			ДанныеРасшифровки = Новый Структура("ИдентификаторСобытия, Филиал",
												СтрокаРасшифровки.ИдентификаторСобытия,
												ИндексФилиала);
		КонецЕсли;
		
		Если Не СтрокаРасшифровки.ЭтоВидРабВремя Тогда
			ДанныеРасшифровки.Вставить("ЭтоНеВидРабВремя"); // Более редкое состояние, чем ЭтоВидРабВремя.
		КонецЕсли;
		Если Не СтрокаРасшифровки.ЭтоРабВремя Тогда
			ДанныеРасшифровки.Вставить("ЭтоНеРабВремя"); // Более редкое состояние, чем ЭтоРабВремя.
		КонецЕсли;
		
		ПовторяющиесяРасшифровкиСвободногоВремени.Вставить(СтрокаРасшифровки.Ключ, ДанныеРасшифровки);

	КонецЦикла;
	
	// Вывод названий видов времени и Обработка расшифровок ячеек после формирования табличного документа.
	ВыполнитьФинальнуюОбработкуЯчеекКалендаря(ДокументРезультат, ТабСобытий, ПовторяющиесяРасшифровкиСвободногоВремени);

	ТретьяКолонка = ДокументРезультат.Область(1,3,ДокументРезультат.ВысотаТаблицы);
	Если ТретьяКолонка.ШиринаКолонки = 0 Тогда
		ДокументРезультат.УдалитьОбласть(ТретьяКолонка);
	КонецЕсли;
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ДокументРезультат", ДокументРезультат);
	РезультатФормирования.Вставить("ДанныеЗаявок", ВозвращаемыеДанныеЗаявок);
	РезультатФормирования.Вставить("ПовторяющиесяРасшифровкиСвободногоВремени", ПовторяющиесяРасшифровкиСвободногоВремени);
	РезультатФормирования.Вставить("ПредставленияСубъектов", мПредставленияСубъектов);
	РезультатФормирования.Вставить("ИндексыФилиалов", МассивФилиалов);
	РезультатФормирования.Вставить("ОтдельныеКолонкиГрафика", мОтдельныеКолонкиГрафика);
	РезультатФормирования.Вставить("РасшифровкиКолонок", мРасшифровкиКолонок);
	РезультатФормирования.Вставить("РасшифровкиСтрок", мРасшифровкиСтрок);
	РезультатФормирования.Вставить("ПерваяКолонкаПослеВремени",	ПерваяКолонкаПослеВремениПоВсемуРасписанию);
	РезультатФормирования.Вставить("ПерваяСтрокаПослеШапки",	ПерваяСтрокаПослеШапки);
	РезультатФормирования.Вставить("КолонокВКолонкеСотрудника",	мКолонокВКолонкеСотрудника);
	РезультатФормирования.Вставить("КолонокВКолонкеОборудования",	мКолонокВКолонкеОборудования);
	РезультатФормирования.Вставить("ОтступыКартинок", ОтступыКартинок);
	РезультатФормирования.Вставить("ШиринаКартинки",  ШиринаКартинки);

	Если МестонахождениеМедКарт <> Неопределено Тогда
		РезультатФормирования.Вставить("МестонахождениеМедКарт", МестонахождениеМедКарт);
	КонецЕсли;
	
	Если мСоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи = Ложь Тогда // Может быть Неопределено или Булево.
		ДанныеПриемовЗаявок = СформироватьДанныеПриемовЗаявок(ВозвращаемыеДанныеЗаявок);
		Если ДанныеПриемовЗаявок <> Неопределено Тогда
			РезультатФормирования.Вставить("ДанныеПриемовЗаявок", ДанныеПриемовЗаявок);
		КонецЕсли;
	КонецЕсли;
	
	Если мУчетнаяПолитика.ИспользоватьХочуРаньшеВЗаявках Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕстьЗаявкиХочуРаньше.Значение КАК Значение
		|ИЗ
		|	Константа.ЕстьЗаявкиХочуРаньше КАК ЕстьЗаявкиХочуРаньше";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			РезультатФормирования.Вставить("ЕстьЗаявкиХочуРаньше", ВыборкаДетальныеЗаписи.Значение);
		Иначе
			РезультатФормирования.Вставить("ЕстьЗаявкиХочуРаньше", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФормирования;

КонецФункции // СформироватьОтчет().

Функция ПолучитьЦветаСубъектовВШапкеНаДень(ТаблицаОбъектов,ТекДата)
	
	ЦветаСубъектовВШапке = Новый Соответствие;
	ТаблицаОбъектовНаТекДату = ТаблицаОбъектов.Скопировать(Новый Структура("Дата", ТекДата));
	
	Для Каждого СтрокаЦвета Из мСтруктураВизуальныхНастроек.ЦветаСубъектовРасписания Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Порядок1", ?(СтрокаЦвета.Назначение=Истина,0,1));
		
		Если Не СтрокаЦвета.Должность.Пустая() Тогда
			СтруктураПоиска.Вставить("Должность", СтрокаЦвета.Должность);
		КонецЕсли;
		
		Если Не СтрокаЦвета.Подразделение.Пустая() Тогда
			СтруктураПоиска.Вставить("ПорядокПодразделение", СтрокаЦвета.КодПодразделение);
		КонецЕсли;
		
		Если Не СтрокаЦвета.Специализация.Пустая() Тогда
			СтруктураПоиска.Вставить("Специализация", СтрокаЦвета.Специализация);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаОбъектовНаТекДату.НайтиСтроки(СтруктураПоиска);
		
		ОкрашиваемыйЭлемент = ?(СтрокаЦвета.ОкрашиваемыйЭлемент = 0, "Фон", "Текст");
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЦветаСубъектовВШапке.Получить(НайденнаяСтрока.Объект) = Неопределено Тогда				
				
				СоответствиеЦвета = Новый Соответствие;
				СоответствиеЦвета.Вставить(ОкрашиваемыйЭлемент, СтрокаЦвета.ЦветФона);
				ЦветаСубъектовВШапке.Вставить(НайденнаяСтрока.Объект, СоответствиеЦвета);
				
			ИначеЕсли ЦветаСубъектовВШапке.Получить(НайденнаяСтрока.Объект)[ОкрашиваемыйЭлемент] = Неопределено Тогда
				
				ЦветаСубъектовВШапке.Получить(НайденнаяСтрока.Объект).Вставить(ОкрашиваемыйЭлемент, СтрокаЦвета.ЦветФона);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЦветаСубъектовВШапке;
	
КонецФункции

Процедура УдалитьСтрокиЖурналаРегистрацииПоОтбору(ТаблицаОбъектов,Подразделение)
	
	ОтборГрафиков = Новый Структура("ЭтоГрафик,Дата,Сотрудник",Истина);
	мОбрИнд = ТаблицаОбъектов.Количество()-1;
	Для сч = 0 по мОбрИнд Цикл
		
		СтрокаТаблицы = ТаблицаОбъектов[мОбрИнд-сч];
		Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.Подразделения") Тогда
			
			Если СтрокаТаблицы.ЭтоГрафик Тогда
				// Это строка графика работы. Просто проверяется равенство подразделения отбора и графика.
				Если СтрокаТаблицы.Подразделение <> Подразделение Тогда
					ТаблицаОбъектов.Удалить(мОбрИнд-сч);
				КонецЕсли;
			Иначе
				// Это документ. получаю все подразделения по графикам на этот день, отбираю по ним.
				ОтборГрафиков.Дата = СтрокаТаблицы.Дата;
				ОтборГрафиков.Сотрудник = СтрокаТаблицы.Сотрудник;
				мсСтрокиГрафиковДня = ТаблицаОбъектов.НайтиСтроки(ОтборГрафиков);
				Если мсСтрокиГрафиковДня.Количество() = 0 Тогда
					// Работает в выходной - беру подразделение по-умолчанию.
					Если СтрокаТаблицы.Подразделение <> Подразделение Тогда
						ТаблицаОбъектов.Удалить(мОбрИнд-сч);
					КонецЕсли;
				Иначе
					// Отбираю по всем подразделениям, которые есть в графиках работы у человека на этот день.
					флОтборНеПройден = Истина;
					Для Каждого СтрокаГрафика из мсСтрокиГрафиковДня Цикл
						Если СтрокаГрафика.Подразделение = Подразделение Тогда
							флОтборНеПройден = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если флОтборНеПройден Тогда
						ТаблицаОбъектов.Удалить(мОбрИнд-сч);
					КонецЕсли;
				КонецЕсли;
				мсСтрокиГрафиковДня = Неопределено;
			КонецЕсли; 
			
		ИначеЕсли	ТипЗнч(Подразделение) = ТипСотрудники 
				Или	ТипЗнч(Подразделение) = ТипОборудование	
		Тогда 
			
			Если (СтрокаТаблицы.Сотрудник <> Подразделение 
				И СтрокаТаблицы.Оборудование <> Подразделение)
				Или (ЗначениеЗаполнено(Филиал) И СтрокаТаблицы.Филиал <> Филиал)
			Тогда
				ТаблицаОбъектов.Удалить(мОбрИнд-сч);
			КонецЕсли;
			
		Иначе 
			// Филиал
			Если СтрокаТаблицы.Филиал <> Подразделение
				И ЗначениеЗаполнено(СтрокаТаблицы.Филиал)
			Тогда
				ТаблицаОбъектов.Удалить(мОбрИнд-сч);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьЕдинуюТаблицуДокументов(ДанныеДокументов)
	
	ТабДокументы = ПолучитьТабицуДокументов(ДанныеДокументов.РезультатДокументыСотрудников);
	
	ТабДокументы.Колонки.Объект.Имя = "_Объект";
	ТабДокументы.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.Оборудование"));
	ТабДокументы.ЗагрузитьКолонку(ТабДокументы.ВыгрузитьКолонку("_Объект"), "Объект");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПолучитьТабицуДокументов(ДанныеДокументов.РезультатДокументыОборудования), ТабДокументы);
	
	Возврат ТабДокументы;
	
КонецФункции	
	
Функция ПолучитьВыборкуГрафиков(СписокОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	|	ГрафикиРаботы.Кабинет КАК Кабинет,
	|	ГрафикиРаботы.Дата КАК Дата,
	|	ГрафикиРаботы.Смена КАК Смена,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ), СЕКУНДА, 1)
	|		ИНАЧЕ ГрафикиРаботы.ВремяОкончания
	|	КОНЕЦ КАК ВремяОкончания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ГрафикиРаботы.Регистратор.Режим В (&РежимыУстановкиГарфикаСотрудников)
	|						ТОГДА ВЫБОР
	|								КОГДА ГрафикиРаботы.Сотрудник.Подразделение.Филиал = ГрафикиРаботы.Филиал
	|									ТОГДА ГрафикиРаботы.Сотрудник.Подразделение
	|								ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ГрафикиРаботы.Кабинет.Подразделение.Филиал = ГрафикиРаботы.Филиал
	|								ТОГДА ГрафикиРаботы.Сотрудник.Подразделение
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ГрафикиРаботы.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ГрафикиРаботы.Филиал КАК Филиал,
	|	ГрафикиРаботы.Филиал.Представление КАК ФилиалПредставление,
	|	ГрафикиРаботы.Сотрудник.Представление КАК СотрудникПредставление,
	|	ГрафикиРаботы.Кабинет.Представление КАК КабинетПредставление,
	|	ГрафикиРаботы.ВидВремени КАК ВидВремени,
	|	ГрафикиРаботы.ВидВремени.Цвет КАК ЦветВидаВремени,
	|	ГрафикиРаботы.ВидВремени.РабочееВремя КАК ЭтоРабВремя,
	|	ВЫБОР КОГДА ГрафикиРаботы.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыВремениГрафика.РабочееВремя) ИЛИ ГрафикиРаботы.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыВремениГрафика.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоВидРабВремя,
	|	ГрафикиРаботы.Название КАК НазваниеСобытия,
	|	ГрафикиРаботы.Комментарий КАК КомментарийСобытия,
	|	ГрафикиРаботы.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	ГрафикиРаботы.Автор КАК Автор,
	|	ГрафикиРаботы.ДатаСоздания КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РАЗНОСТЬДАТ(ГрафикиРаботы.ВремяНачала, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ), СЕКУНДА, 1), МИНУТА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ГрафикиРаботы.ВремяНачала, ГрафикиРаботы.ВремяОкончания, МИНУТА)
	|	КОНЕЦ КАК Продолжительность,
	|	1 КАК ПорядокВидВремени,
	|	ГрафикиРаботы.Регистратор КАК ДокументУстановкиГрафика
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	(ГрафикиРаботы.Сотрудник В (&Объекты)
	|			ИЛИ ГрафикиРаботы.Кабинет В (&Объекты))
	|	И ГрафикиРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ВЫБОР
	|			КОГДА &Филиал = НЕОПРЕДЕЛЕНО
	|					ИЛИ &УчетПоНесколькимФилиалам = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ГрафикиРаботы.Филиал В ИЕРАРХИИ (&Филиал)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И (&Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ ВЫБОР
	|				КОГДА ГрафикиРаботы.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|					ТОГДА ГрафикиРаботы.Сотрудник.Подразделение
	|				ИНАЧЕ ГрафикиРаботы.Подразделение
	|			КОНЕЦ В ИЕРАРХИИ (&Подразделение))
	|	И (ГрафикиРаботы.Сотрудник В (&Объекты)
	|			ИЛИ ГрафикиРаботы.Кабинет В (&Объекты))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикиРаботы.ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания УБЫВ,
	|	ДатаСоздания";
	
	Запрос.УстановитьПараметр("Объекты"      ,СписокОбъектов);
	Запрос.УстановитьПараметр("ДатаНачала"   ,ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	Запрос.УстановитьПараметр("УчетПоНесколькимФилиалам",ПараметрыСеанса.УчетПоНесколькимФилиалам);
	
	Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.Подразделения") Тогда
		мПодразделение	= Подразделение;
		мСотрудник		= Справочники.Сотрудники.ПустаяСсылка();
		мФилиал			= Неопределено;
	ИначеЕсли	ТипЗнч(Подразделение) = Тип("СправочникСсылка.Сотрудники")
			Или	ТипЗнч(Подразделение) = Тип("СправочникСсылка.Оборудование") 
	Тогда
		мПодразделение	= Справочники.Подразделения.ПустаяСсылка();
		мСотрудник		= Подразделение;
		мФилиал			= ?(ЗначениеЗаполнено(Филиал), Филиал, Неопределено);
	Иначе
		мПодразделение	= Справочники.Подразделения.ПустаяСсылка();
		мСотрудник		= Справочники.Сотрудники.ПустаяСсылка();
		мФилиал			= ?(ЗначениеЗаполнено(Филиал), Филиал, Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Подразделение",мПодразделение);
	Запрос.УстановитьПараметр("Сотрудник",мСотрудник);
	Запрос.УстановитьПараметр("Филиал",мФилиал);
	
	РежимыУстановкиГарфикаСотрудников = Новый Массив;
	РежимыУстановкиГарфикаСотрудников.Добавить(Перечисления.ВидыУстановкиГрафиков.Сотрудники);
	РежимыУстановкиГарфикаСотрудников.Добавить(Перечисления.ВидыУстановкиГрафиков.СотрудникиКабинеты);
	Запрос.УстановитьПараметр("РежимыУстановкиГарфикаСотрудников",РежимыУстановкиГарфикаСотрудников);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПолучитьВыборкуДокументовОтчета(СписокОбъектов, МенеджерВТ)
	
	ДанныеДокументов = Новый Структура("РезультатДокументыСотрудников, РезультатДокументыОборудования");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьЗапросПоРаботамОборудования();
	// Для получения временной таблицы РаботыЗаявок и передачи ЗаявкиВТ в следующий запрос
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Объекты"      , СписокОбъектов);
	Запрос.УстановитьПараметр("ДатаНачала"   , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Если ПараметрыСеанса.УчетПоНесколькимФилиалам Тогда
		Запрос.УстановитьПараметр("Филиал", ?(ЗначениеЗаполнено(Филиал), Филиал, Неопределено));
	Иначе
		Запрос.УстановитьПараметр("Филиал", Неопределено);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ЗаявкаРаботы.Ссылка.Филиал = НоменклатураОборудования.Филиал","");
	КонецЕсли;
	РезультатКабинеты = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = ПолучитьЗапросПоДокументамСотрудников(Ложь);
	Результат = Запрос.Выполнить();
	
	// Действия по получению данных для вывода документов сотрудников.
	// Делаю Таблицу Работ-Блоков_работ.
	мсТаб = Новый Массив;
	мсТаб.Добавить(Результат.Выгрузить());
	мсТаб.Добавить(РезультатКабинеты);
	
	счТаб = 0;
	Для Каждого ТабДокументоРаботы Из мсТаб Цикл
		
		ТабДокументоРаботы.Колонки.Добавить("ДатаНачалаБлока"	, Новый ОписаниеТипов("Дата"));
		ТабДокументоРаботы.Колонки.Добавить("ДатаОкончанияБлока", Новый ОписаниеТипов("Дата"));
		ТабДокументоРаботы.Колонки.Добавить("НомерБлока"		, Новый ОписаниеТипов("Число"));
		
		ТабИнтервалыБлоков = ТабДокументоРаботы.СкопироватьКолонки("ДатаНачалаБлока,ДатаОкончанияБлока,НомерБлока");
		
		счБлоков	= -1;
		текСсылка	= Неопределено;
		текОбъект	= Неопределено;
		текДатаКон	= Неопределено;
		
		Для Каждого стрДок Из ТабДокументоРаботы Цикл
			Если стрДок.ДокументСсылка <> текСсылка Или
				 стрДок.Объект		   <> текОбъект Или
				 стрДок.ДатаНачала 	   <> текДатаКон Или
				 (счТаб = 1 И Не мСтруктураВизуальныхНастроек.ОтображениеЯчеекКабинетовКакУСотрудников) // Т.е. оборудование не в режиме "Как сотрудников" выводим без объединения работ в блоки.
			Тогда
				текСсылка = стрДок.ДокументСсылка;
				текОбъект = стрДок.Объект;
				счБлоков = счБлоков + 1;
			КонецЕсли;
			стрДок.НомерБлока = счБлоков;
			текДатаКон = стрДок.ДатаОкончания;
		КонецЦикла;
		
		Для сч = 0 По счБлоков Цикл
			Стр = ТабИнтервалыБлоков.Добавить();
			Стр.НомерБлока = сч;
		КонецЦикла;
		
		Для Каждого стрДок Из ТабДокументоРаботы Цикл
			Если ТабИнтервалыБлоков[стрДок.НомерБлока].ДатаНачалаБлока = Дата(1,1,1) Тогда
				ТабИнтервалыБлоков[стрДок.НомерБлока].ДатаНачалаБлока = стрДок.ДатаНачала;
			КонецЕсли;
			ТабИнтервалыБлоков[стрДок.НомерБлока].ДатаОкончанияБлока = стрДок.ДатаОкончания;
		КонецЦикла;
		
		// И, наконец, даты начала и окончания блоков сохраняем в таблицу работ документов для сотрудников.
		Для Каждого стрДок Из ТабДокументоРаботы Цикл
			стрДок.ДатаНачалаБлока	  = ТабИнтервалыБлоков[стрДок.НомерБлока].ДатаНачалаБлока;
			стрДок.ДатаОкончанияБлока = ТабИнтервалыБлоков[стрДок.НомерБлока].ДатаОкончанияБлока;
		КонецЦикла;
		
		// Удаляем блоки нулевой продолжительности (потенциально возможны в ненулевой завяке на несколько субъектов расписания).
		УдаляемыеБлоки = Новый Массив;
		Для Сч = 0 По счБлоков Цикл
			Если ТабИнтервалыБлоков[Сч].ДатаНачалаБлока = ТабИнтервалыБлоков[Сч].ДатаОкончанияБлока Тогда
				УдаляемыеБлоки.Добавить(Сч);
			КонецЕсли;
		КонецЦикла;
		
		мОбрИнд = ТабДокументоРаботы.Количество()-1;
		Для Сч = 0 По мОбрИнд Цикл
			СтрокаТЗ = ТабДокументоРаботы[мОбрИнд-Сч];
			Если УдаляемыеБлоки.Найти(СтрокаТЗ.НомерБлока) <> Неопределено Тогда
				РаботаПеремещена = Ложь;
				
				Для СчСтр = Сч + 1 По (мОбрИнд) Цикл
					СтрокаПриклейки = ТабДокументоРаботы[мОбрИнд-СчСтр];
					Если СтрокаПриклейки.Объект = СтрокаТЗ.Объект
						И СтрокаПриклейки.НомерБлока <> СтрокаТЗ.НомерБлока
					Тогда
						Если СтрокаТЗ.ДатаОкончанияБлока = СтрокаПриклейки.ДатаОкончанияБлока Тогда
							СтрокаТЗ.НомерБлока = СтрокаПриклейки.НомерБлока;
							СтрокаТЗ.ДатаНачала = СтрокаПриклейки.ДатаОкончания;
							СтрокаТЗ.ДатаОкончания = СтрокаПриклейки.ДатаОкончания;
							СтрокаТЗ.ДатаНачалаБлока = СтрокаПриклейки.ДатаНачалаБлока;
							СтрокаТЗ.ДатаОкончанияБлока = СтрокаПриклейки.ДатаОкончанияБлока;
							
							РаботаПеремещена = Истина;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не РаботаПеремещена Тогда
					ТабДокументоРаботы.Удалить(мОбрИнд-Сч);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Вынужденное ухищирение для использования виртуальной таблицы.
		ТабДокументоРаботы.Колонки.СостояниеЦвет.Имя = "Цвет";
		ТабДокументоРаботы.Колонки.Добавить("СостояниеЦвет",Новый ОписаниеТипов("Строка"));
		Для Каждого стрДок Из ТабДокументоРаботы Цикл
			стрДок.СостояниеЦвет = ?(стрДок.Цвет = NULL, "", ЗначениеВСтрокуВнутр(стрДок.Цвет.Получить()));
		КонецЦикла;
		ТабДокументоРаботы.Колонки.Удалить("Цвет");
		
		Запрос.Текст =	 "ВЫБРАТЬ * ПОМЕСТИТЬ ТабДокументы ИЗ &ТабДокументоРаботы КАК ТабДокументы;
						 |ВЫБРАТЬ * ИЗ ТабДокументы ИТОГИ ПО Объект, НомерБлока;
						 |УНИЧТОЖИТЬ ТабДокументы";
		
		Запрос.УстановитьПараметр("ТабДокументоРаботы", ТабДокументоРаботы);
		
		Если счТаб = 0 Тогда
			ДанныеДокументов.РезультатДокументыСотрудников = Запрос.Выполнить();
		Иначе
			ДанныеДокументов.РезультатДокументыОборудования = Запрос.Выполнить();
		КонецЕсли;
		
		счТаб = счТаб + 1;
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;	
	
КонецФункции

Функция ПолучитьСтруктуруПустыхКолонокСеткиДня(КоличествоСтрок, СписокОбъектов)
	
	ЕстьОборудование = Ложь;
	Для Каждого Объект Из СписокОбъектов Цикл
		Если ТипЗнч(Объект) = ТипОборудование Тогда
			ЕстьОборудование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Макет = ПолучитьМакет("СеткиКолонкиЖурналаЗаписи");
	ОбластьСтрокиКолонки = Макет.ПолучитьОбласть("Колонки" + мКолонокВКолонкеСотрудника);
	
	КолонкаСотрудника = Новый ТабличныйДокумент;
	Для сч = 1 По КоличествоСтрок Цикл
		КолонкаСотрудника.Вывести(ОбластьСтрокиКолонки);
	КонецЦикла;
	
	Результат = Новый Структура("КолонкаСотрудника",КолонкаСотрудника.Область(1,1, КоличествоСтрок, мКолонокВКолонкеСотрудника));
	
	Если ЕстьОборудование Тогда
		
		ОбластьСтрокиКолонки = Макет.ПолучитьОбласть("Колонки" + мКолонокВКолонкеОборудования);
		
		КолонкаОборудования = Новый ТабличныйДокумент;
		Для сч = 1 По КоличествоСтрок Цикл
			КолонкаОборудования.Вывести(ОбластьСтрокиКолонки);
		КонецЦикла;
		
		Результат.Вставить("КолонкаОборудования",КолонкаОборудования.Область(1,1, КоличествоСтрок, мКолонокВКолонкеОборудования));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиСеткуДняОтчета(СписокОбъектов, ДокументРезультат,Дата,ВремяНачалаДня,ВремяОкончанияДня, КолонкаНачалаВывода, ВыводитьКолонкуВремени, ТаблицаДиапазонов, КолонкиСотрудникаОборудования, ЦветаСубъектовВШапке)
	
	Если СписокОбъектов.Количество() = 0 И Не ВыводитьКолонкуВремени Тогда Возврат КонецЕсли;
	
	ПерваяКолонкаПослеВремени = ?(ВыводитьКолонкуВремени,3,0) + КолонкаНачалаВывода;
	ПерваяСтрокаПослеШапки = ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
	
	Если ПерваяКолонкаПослеВремениПоВсемуРасписанию = Неопределено Тогда
		ПерваяКолонкаПослеВремениПоВсемуРасписанию = ПерваяКолонкаПослеВремени;
	КонецЕсли;

	вПозНач = ВысотаШапки + 1;
	вПозКон = ВысотаШапки + ТаблицаДиапазонов.Количество() - 1;
	
	гПоз = ПерваяКолонкаПослеВремени;
	Для Каждого Объект Из СписокОбъектов Цикл
		
		этоСотрудник = ТипЗнч(Объект)= ТипСотрудники;
		
		КолонкаШаблон = ?(этоСотрудник, КолонкиСотрудникаОборудования.КолонкаСотрудника, КолонкиСотрудникаОборудования.КолонкаОборудования);
		гПозКон = гПоз + ?(этоСотрудник, мКолонокВКолонкеСотрудника, мКолонокВКолонкеОборудования) - 1;
		ДокументРезультат.ВставитьОбласть(КолонкаШаблон, ДокументРезультат.Область(вПозНач,гПоз,вПозКон,гПозКон));
		
		гПоз = гПозКон + 1;
		
	КонецЦикла;
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	ВысотаТаблицы = ТаблицаДиапазонов.Количество();
	
	// Таблица вида |Время|Сотрудник1|Сотрудник2|...|Оборудование1|.
	// При использовании дополнительных колонок: |Время|ДПР1|ДПР2|...|Сотрудник1|ДПР1|ДПР2|...|Сотрудник2|...|ДПР1|ДПР2|...|Оборудование1|.
	
	ВывестиШапкуСтраницы(СписокОбъектов, ДокументРезультат,ШиринаТаблицы,ВысотаТаблицы,ПерваяКолонкаПослеВремени,ВыводитьКолонкуВремени, Дата, ЦветаСубъектовВШапке);
	
	Если ВыводитьКолонкуВремени Тогда
		ВывестиКолонкуВремени(ДокументРезультат,ВысотаТаблицы,ВремяНачалаДня,ВремяОкончанияДня,ТаблицаДиапазонов);
	КонецЕсли;
	
	Если Не мГрафикОтдельнойКолонкой Тогда
		ДокументРезультат.Область(ПерваяСтрокаПослеШапки,
								  ПерваяКолонкаПослеВремени,
								  ВысотаТаблицы + ?(РежимФормирования = мРежимыФормирования.Период,1,0),
								  ДокументРезультат.ШиринаТаблицы).ЦветФона = мЦветНерабочихЧасов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиШапкуСтраницы(СписокОбъектов, ДокументРезультат,ШиринаТаблицы,ВысотаТаблицы,ПерваяКолонкаПослеВремени,ВыводитьКолонкуВремени,Дата,ЦветаСубъектовВШапке)
	
	ЛинияШапки = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	Если ВыводитьКолонкуВремени Тогда
		ДокументРезультат.Область(1,1,ВысотаШапки).ШиринаКолонки = 1;
		ДокументРезультат.Область(1,2,ВысотаШапки).ШиринаКолонки = мШиринаКолонкиВремя;
	КонецЕсли;
	
	ОбластьШапки = ДокументРезультат.Область(1,ПерваяКолонкаПослеВремени-?(ВыводитьКолонкуВремени,2,0) - 1, ВысотаШапки,ДокументРезультат.Ширинатаблицы);
	ОбластьШапки.АвтоВысотаСтроки = Истина;
	ОбластьШапки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьШапки.ЦветФона = Новый Цвет(240,240,240);
	ОбластьШапки.Шрифт = мШрифтШапки;
	
	ОбластьШапки.ГраницаСверху	= ЛинияШапки;
	ОбластьШапки.ГраницаСлева	= ЛинияШапки;
	ОбластьШапки.ГраницаСнизу	= ЛинияШапки;
	ОбластьШапки.ГраницаСправа	= ЛинияШапки;
	
	Если ВыводитьКолонкуВремени Тогда
		ЯчейкаВремя = ДокументРезультат.Область(1,1,ВысотаШапки,3);
		ЯчейкаВремя.Текст = "Время";
		ЯчейкаВремя.Шрифт = мШрифтОбщий;
		ЯчейкаВремя.ШиринаКолонки = мШиринаКолонкиВремя;
		ЯчейкаВремя.Объединить();
	КонецЕсли;
	
	гПоз=ПерваяКолонкаПослеВремени;
	флПереходСотрудникиОборудование = Ложь;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		этоСотрудник	= ТипЗнч(Объект) = ТипСотрудники;
		этоКабинет		= ТипЗнч(Объект) = ТипОборудование;
		
		СтруктураЦветаЯчейкиОбъекта = ЦветаСубъектовВШапке.Получить(Объект);
		Если мГрафикОтдельнойКолонкой Тогда
			ДокументРезультат.Область(1,гПоз).ШиринаКолонки = мШиринаКолонкиРабВремя;
			мОтдельныеКолонкиГрафика.Добавить(гПоз);
		КонецЕсли;
		
		Если этоСотрудник И мКлиентОтдельнойКолонкой Тогда
			КолонкаКлиент = гПоз + Число(мГрафикОтдельнойКолонкой) + НастройкиДПР.КоличествоДПР;
			ДокументРезультат.Область(1,КолонкаКлиент).ШиринаКолонки = мШиринаКолонкиКлиент;
		КонецЕсли;
		
		// Вывести сотрудника/кабинет в шапку сетки журнала записи.
		ВывестиОбъектВШапкуСтраницы(Объект, ДокументРезультат, Дата, гПоз, этоСотрудник, ЛинияШапки, КомментарииДня, СтруктураЦветаЯчейкиОбъекта);
		
		// Отсечение двойной линией расписания оборудования/кабинетов от расписания сотрудников.
		// 	Если Не этоСотрудник И Не флПереходСотрудникиОборудование Тогда
		// 		флПереходСотрудникиОборудование = Истина;
		// 		ДокументРезультат.Область(1,гПоз,ВысотаТаблицы,гПоз).Обвести(Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Двойная,1),ЛинияШапки,ЛинияШапки,ЛинияШапки);
		// 	КонецЕсли;.
		
		
		//***
		//мРасшифровкиКолонок.Вставить(гПоз + мКолонокВКолонкеСотрудника - 1, Новый Структура("Дата, Объект", Дата, Объект));	
		//
		//гПоз = гПоз + ?(этоСотрудник,мКолонокВКолонкеСотрудника,мКолонокВКолонкеОборудования);
		КолонокЭтойВКолонкеГрафика = ?(этоСотрудник,мКолонокВКолонкеСотрудника,мКолонокВКолонкеОборудования);
		
		Для Сч = 0 По КолонокЭтойВКолонкеГрафика - 1 Цикл
			мРасшифровкиКолонок.Вставить(гПоз + Сч, Новый Структура("Дата, Объект", Дата, Объект));
		КонецЦикла;
		
	    гПоз = гПоз + КолонокЭтойВКолонкеГрафика;
		
	КонецЦикла;
	
	// Если ВысотаШапки > 1, значит, первая строка выделена на вывод даты, а перечень сотрудников идёт уже ниже/.
	Если ВысотаШапки > 1 Тогда
		
		Если СписокОбъектов.Количество() = 1 
			И СписокОбъектов[0] = Справочники.Сотрудники.ПустаяСсылка()
		Тогда
			вПозКон = ВысотаШапки;
		Иначе
			вПозКон = 1;
		КонецЕсли;
		
		ОбластьДаты = ДокументРезультат.Область(1,ПерваяКолонкаПослеВремени,вПозКон,ДокументРезультат.Ширинатаблицы);
		ОбластьДаты.Объединить();
		ОбластьДаты.Текст = Формат(Дата,"ДФ='dd MMMM'") + " (" + Формат(Дата,"ДФ=ddd") + ")";
		ОбластьДаты.Расшифровка = Дата;
	КонецЕсли;
	
	ДокументРезультат.Область(1,,1).АвтоВысотаСтроки = 0;
	ДокументРезультат.Область(1,,1).ВысотаСтроки	 = 0;

КонецПроцедуры

Процедура ВывестиОбъектВШапкуСтраницы(Объект, ДокументРезультат, Дата, гПоз, этоСотрудник, ЛинияШапки, КомментарииДня, СтруктураЦветаЯчейкиОбъекта)
	
	// Формирование текста для вывода в ячейку объекта в шапке
	Если ЗначениеЗаполнено(Объект) Тогда
		
		СтрокаОбъекта = ТаблицаОбъектов.Найти(Объект, "Объект");
		Если СтрокаОбъекта <> Неопределено Тогда
			ТекстОписанияОбъекта = СтрокаОбъекта.ОбъектПредставление;
			Если этоСотрудник Тогда
				ТекстОписанияОбъекта = ОбщегоНазначения.ФамилияИнициалыФизЛица(ТекстОписанияОбъекта);
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстОписанияОбъекта, СтрокаОбъекта.ДополнительнаяИнформацияДляЖЗ, " ", Истина);
			КонецЕсли;
		Иначе
			ТекстОписанияОбъекта = Строка(Объект);
		КонецЕсли;
	
	ИначеЕсли РежимФормирования = мРежимыФормирования.День Тогда
		ТекстОписанияОбъекта = Формат(Дата,"ДФ='dd MMMM'") + " (" + Формат(Дата,"ДФ=ddd") + ")";
	Иначе
		ТекстОписанияОбъекта = "";
	КонецЕсли;
	
	// Установка ширины доп. колонки
	Если НастройкиДПР.КоличествоДПР > 0
		И (этоСотрудник Или мСтруктураВизуальныхНастроек.ОтображениеЯчеекКабинетовКакУСотрудников)
	Тогда
		позДПР = гПоз + Число(мГрафикОтдельнойКолонкой);
		ДокументРезультат.Область(1,позДПР).ШиринаКолонки = НастройкиДПР.ШиринаОсновногоДПР;
		мОтдельныеКолонкиГрафика.Добавить(позДПР);
	КонецЕсли;
	
	// Формирование ячейки объекта в шапке
	КоличествоКолонок = ?(этоСотрудник, мКолонокВКолонкеСотрудника, мКолонокВКолонкеОборудования);
	
	ДокументРезультат.Область(1,гПоз+КоличествоКолонок-1).ШиринаКолонки = мШиринаКолонкиРаботы;
	ОбластьСотрудник = ДокументРезультат.Область(ВысотаШапки,гПоз,ВысотаШапки,гПоз + КоличествоКолонок-1);
	ОбластьСотрудник.Объединить();
	ОбластьСотрудник.Текст = ТекстОписанияОбъекта;
	
	Если СтруктураЦветаЯчейкиОбъекта <> Неопределено Тогда
		
		Если СтруктураЦветаЯчейкиОбъекта["Фон"] <> Неопределено Тогда
			ОбластьСотрудник.ЦветФона = СтруктураЦветаЯчейкиОбъекта["Фон"];
		КонецЕсли;
		
		Если СтруктураЦветаЯчейкиОбъекта["Текст"] <> Неопределено Тогда
			ОбластьСотрудник.ЦветТекста = СтруктураЦветаЯчейкиОбъекта["Текст"];
		КонецЕсли;
	КонецЕсли;	
		
	ОбластьСотрудник.Обвести(ЛинияШапки,ЛинияШапки,ЛинияШапки,ЛинияШапки);
	ОбластьСотрудник.Расшифровка = Объект;
	
	// Вывод комментария на день для объекта шапки
	Если ЗначениеЗаполнено(Объект) Тогда
		
		ОтборКомментарииДня = Новый Структура("Сотрудник, Период", Объект, Дата);
		
		Комментарии = КомментарииДня.НайтиСтроки(ОтборКомментарииДня);
		Если Комментарии.Количество() <> 0 Тогда
			ОбластьСотрудник.Примечание.Текст = Комментарии[0].Комментарий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиКолонкуВремени(ДокументРезультат,ВысотаТаблицы, ВремяНачалаДня,ВремяОкончанияДня,ТаблицаДиапазонов)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
    ОбластьВремя = ДокументРезультат.Область(1,1,ВысотаТаблицы + ВысотаШапки - 1,3);
	ОбластьВремя.ГраницаСверху	= Линия;
	ОбластьВремя.ГраницаСнизу	= Линия;

	ОбластьВремя.Обвести(Линия,Линия,Линия,Линия);
	
	ОбластьЧас = ДокументРезультат.Область(2,1,ВысотаТаблицы,1);
	ОбластьЧас.Шрифт = мШрифтЧас;
	
	фВремяТек	= ТаблицаДиапазонов[0].Дата;
	фЧасТек		= Час(фВремяТек);
	фПозЧасТек	= 1 + ВысотаШапки;
	
	КоличествоДиапазонов = ТаблицаДиапазонов.Количество();
	
	Для сч=1 По КоличествоДиапазонов-1 Цикл
		
		// Для расчета колонки длительности интервала времени.
		Если Сч = 1 Тогда
			фВремяТек = ТаблицаДиапазонов[Сч-1].Дата;
			РазницаМинуты = (ТаблицаДиапазонов[Сч].Продолжительность - ТаблицаДиапазонов[Сч-1].Продолжительность)/60;
		Иначе
			// Вычитаем
			СледующееВремя = ТаблицаДиапазонов[Сч].Дата;
			фВремяТек	= ТаблицаДиапазонов[Сч-1].Дата;
			РазницаМинуты = Окр((СледующееВремя - фВремяТек)/60);
		КонецЕсли;

		ТекКоордХ = сч + ВысотаШапки;
		Если Час(фВремяТек) <> фЧасТек Тогда
			ОбластьЧас = ДокументРезультат.Область(фПозЧасТек,1,ТекКоордХ - 1);
			ОбластьЧас.Объединить();
			фЧасТек = Час(фВремяТек);
			фПозЧасТек	= ТекКоордХ;
		КонецЕсли;
		
		ЯчейкаЧас = ДокументРезультат.Область(ТекКоордХ,1);
		ЯчейкаЧас.ВысотаСтроки = мВысотаСтроки;
		ЯчейкаЧас.Текст = Формат(фВремяТек,"ДФ=HH; ДП=00");
		
		Если мУчетнаяПолитика.ОтображатьКолонкуЖЗДлительностиИнтервала Тогда
			ЯчейкаМин = ДокументРезультат.Область(ТекКоордХ,2);
			
			Если РазницаМинуты >= 0 Тогда
				ЯчейкаПродолжительность = ДокументРезультат.Область(ТекКоордХ,3);
				ЯчейкаПродолжительность.Обвести(Линия,Линия,Линия,Линия);
				ЯчейкаПродолжительность.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ЯчейкаПродолжительность.Текст = "("+РазницаМинуты+")";
			КонецЕсли;
		Иначе
			ДокументРезультат.Область(ТекКоордХ,3).ШиринаКолонки = 0;
			ЯчейкаМин = ДокументРезультат.Область(ТекКоордХ,2,ТекКоордХ,3);
			ЯчейкаМин.Объединить();
		КонецЕсли;
		
		// Вывод минуты сетки расписания.
		ЯчейкаМин.Текст = Формат(фВремяТек,"ДФ=mm; ДП=00");
		
		мРасшифровкиСтрок.Вставить(ТекКоордХ, фВремяТек);

	КонецЦикла;
	
	// Добавляем в расшифровки строк еще одну после последней, чтобы из неё считать продолжительность последней строки расписания.
	мРасшифровкиСтрок.Вставить(ТекКоордХ + 1, ТаблицаДиапазонов[КоличествоДиапазонов - 1].Дата);
	
	// Кеш строковых представлений времени в строках
	Для Каждого КлючЗначение Из мРасшифровкиСтрок Цикл
		ПредставлениеВремени = Формат(КлючЗначение.Значение, "ДФ=Ч:мм");
		мПредставлениеВремениСтрок.Вставить(КлючЗначение.Ключ, ПредставлениеВремени);
	КонецЦикла;
	
	Если мУчетнаяПолитика.ОтображатьКолонкуЖЗДлительностиИнтервала Тогда
		РазницаМинуты = (ТаблицаДиапазонов[КоличествоДиапазонов-1].Продолжительность - ТаблицаДиапазонов[КоличествоДиапазонов-2].Продолжительность)/60;
		ЯчейкаПродолжительность = ДокументРезультат.Область(ТекКоордХ,3);
		ЯчейкаПродолжительность.Обвести(Линия,Линия,Линия,Линия);
		ЯчейкаПродолжительность.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ЯчейкаПродолжительность.Текст = "("+РазницаМинуты +")";
	КонецЕсли;
	
	ОбластьЧас = ДокументРезультат.Область(фПозЧасТек,1,ТекКоордХ);
	ОбластьЧас.Объединить();
	
КонецПроцедуры

Процедура ВывестиЛинииРазделенияЧасовВСеткеОтчета(ДокументРезультат, ТаблицаДиапазонов)
	
	Если мСтруктураВизуальныхНастроек.ТипЛинииСеткиВнутриЧаса = 0 Тогда
		ЛинияМеждуЧасами = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		НачПунктира = ПерваяКолонкаПослеВремениПоВсемуРасписанию - 2;
		Для Сч = 2 По ТаблицаДиапазонов.Количество() - 1 Цикл
			Диапазон = ТаблицаДиапазонов[Сч - 1];
			вПоз = ПерваяСтрокаПослеШапки + Сч - 1;
			Если Диапазон.Дата <> НачалоЧаса(Диапазон.Дата) Тогда
				ДокументРезультат.Область(вПоз, НачПунктира, вПоз, ДокументРезультат.ШиринаТаблицы).ГраницаСверху = ЛинияМеждуЧасами;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИнтервалГрафика(ДокументРезультат, ВремяНачала, ВремяОкончания, ВремяНачалаДня,ВремяОкончанияДня, гПоз, этоСотрудник, ТаблицаДиапазонов, ВыбГрафики)
	
	НачПоз = (ВремяНачала    - ВремяНачалаДня)/мКвантПланирования + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
	КонПоз = (ВремяОкончания - ВремяНачалаДня)/мКвантПланирования + ВысотаШапки + мВысотаЗаголовкаСтраницы;
	
	СтрокаНачалаДиапазона = ТаблицаДиапазонов.Найти((ВремяНачала));
	Если СтрокаНачалаДиапазона <> Неопределено Тогда 
		НачПоз = ТаблицаДиапазонов.Индекс(СтрокаНачалаДиапазона) + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
	Иначе 
		НачПоз = ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
	КонецЕсли;
	
	Если ВремяОкончания = ВремяОкончанияДня Тогда
		СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти((ВремяОкончания));
		СдвигВверх = 1;
	Иначе
		СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти((ВремяОкончания));
		Если ВыбГрафики.ВремяНачала <> ВыбГрафики.ВремяОкончания Тогда
			СдвигВверх = 1;
		Иначе
			СдвигВверх = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаОкончанияДиапазона <> Неопределено Тогда 
		КонПоз = ТаблицаДиапазонов.Индекс(СтрокаОкончанияДиапазона) - СдвигВверх + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
	Иначе 
		КонПоз = ТаблицаДиапазонов.Количество() - 2 - СдвигВверх + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
	КонецЕсли;
	
	Если Не ГрафикиСотрудников.ЭтоОбычноеРабочееВремя(ВыбГрафики.ВидВремени) Тогда
		ЦветВидаВремени = ВыбГрафики.ЦветВидаВремени.Получить();
		Если ЦветВидаВремени <> Неопределено
			И ЦветВидаВремени <> Новый Цвет(0,0,0)
		Тогда
			мЦвет = ЦветВидаВремени;
		Иначе
			мЦвет = мЦветОбластиРабочегоВремени;
		КонецЕсли;
	Иначе
		мЦвет = мЦветОбластиРабочегоВремени;
	КонецЕсли;
	
	гПозКон = гПоз + ?(этоСотрудник, мКолонокВКолонкеСотрудника, мКолонокВКолонкеОборудования) - 1;
		
	Если мГрафикОтдельнойКолонкой Тогда
		ОбластьИнтервалаГрафика = ДокументРезультат.Область(НачПоз,гПоз,КонПоз,гПоз);
		ОбластьИнтервалаГрафика.Объединить();
		ОбластьИнтервалаГрафика.ЦветФона = мЦвет;
	Иначе
		ДокументРезультат.Область(НачПоз,гПоз,КонПоз,гПозКон).ЦветФона = мЦвет;
	КонецЕсли;

	флДобавитьРасшифровкуПоВторомуСубъекту	 = ?(этоСотрудник, ЗначениеЗаполнено(ВыбГрафики.Кабинет), ЗначениеЗаполнено(ВыбГрафики.Сотрудник));
	флВывод2Суб = мСтруктураВизуальныхНастроек.ОтображатьКабинетСотрудникаВЯчейке;

	// Вывод времени начала интервала.
	ВыводитьВремяВСвободныеЯчейкиЖЗ = мСтруктураВизуальныхНастроек.ВыводитьВремяВСвободныеЯчейкиЖЗ;
	
	Если	ВыводитьВремяВСвободныеЯчейкиЖЗ
		Или	флДобавитьРасшифровкуПоВторомуСубъекту
		Или мСтруктураВизуальныхНастроек.ОтображатьФилиалВЯчейке
		Или (мСтруктураВизуальныхНастроек.ОтображатьВидВремениГрафикаВЯчейке И ЗначениеЗаполнено(ВыбГрафики.ВидВремени))
	Тогда
		ЭтоРабВремя = ВыбГрафики.ЭтоВидРабВремя Или ВыбГрафики.ЭтоРабВремя;

		ВыбГрафикиИдентификаторСобытия = ВыбГрафики.ИдентификаторСобытия;
		Для текВертПоз = НачПоз По КонПоз Цикл
			ОбластьЯчейки = ДокументРезультат.Область(текВертПоз,гПозКон);
			
			Если ВыводитьВремяВСвободныеЯчейкиЖЗ Тогда
				ОбластьЯчейки.Текст = мПредставлениеВремениСтрок[текВертПоз];
			КонецЕсли;
			
			Если флДобавитьРасшифровкуПоВторомуСубъекту Тогда
				Если этоСотрудник Тогда
					// Основной объект графика - сотрудник, значит, второй объект графика - кабинет.
					Субъект = ВыбГрафики.Кабинет;
					СубъектПредставление = ?(флВывод2Суб, ВыбГрафики.КабинетПредставление, "");
				Иначе
					// Основной объект графика - кабинет, значит, второй объект графика - сотрудник.
					Субъект = ВыбГрафики.Сотрудник;
					СубъектПредставление = ?(флВывод2Суб, ВыбГрафики.СотрудникПредставление, "");
				КонецЕсли;
				мПредставленияСубъектов.Вставить(Субъект, СубъектПредставление);
					
				ОбластьЯчейки.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ОбластьЯчейки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Иначе
				Субъект = Неопределено;
			КонецЕсли;
			
			// Фиксируем числовой ключ варианта расшифровки ячеек журнала записи.
			Если флДобавитьРасшифровкуПоВторомуСубъекту Тогда
				
				мОтборПоискаРасшифровокСвободногоВремениСубъект.ИдентификаторСобытия = ВыбГрафики.ИдентификаторСобытия;
				мОтборПоискаРасшифровокСвободногоВремениСубъект.Субъект = Субъект;
				
				РасшифровкиСвободногоВремени = мТаблицаРасшифровокСвободногоВремени.НайтиСтроки(мОтборПоискаРасшифровокСвободногоВремениСубъект);
				Если РасшифровкиСвободногоВремени.Количество() <> 0 Тогда
					РасшифровкаСвободногоВремени = РасшифровкиСвободногоВремени[0];
				Иначе
					РасшифровкаСвободногоВремени = Неопределено;
				КонецЕсли;
			Иначе
				РасшифровкаСвободногоВремени = мТаблицаРасшифровокСвободногоВремени.Найти(ВыбГрафики.ИдентификаторСобытия, "ИдентификаторСобытия");
			КонецЕсли;
			
			Если РасшифровкаСвободногоВремени <> Неопределено Тогда
				ОбластьЯчейки.Расшифровка = РасшифровкаСвободногоВремени.Ключ;
			Иначе
				ОбластьЯчейки.Расшифровка = ДобавитьКлючРасшифровкиСвободногоВремени(ВыбГрафики, Субъект, ВыбГрафики.ЭтоВидРабВремя, ЭтоРабВремя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГрафики(СписокОбъектовНаДень,ДокументРезультат,ТабГрафики, Дата,ВремяНачалаДня,ВремяОкончанияДня, КолонкаНачалаВывода, ТаблицаДиапазонов)
	
	ОтборСотрудник	= Новый Структура("Дата,Сотрудник", Дата);
	ОтборКабинет	= Новый Структура("Дата, Кабинет", Дата);
	
	гПоз = КолонкаНачалаВывода + ?(Дата=ДатаНачала,3,0); 

	Для Каждого Объект Из СписокОбъектовНаДень Цикл
		
		этоСотрудник = ТипЗнч(Объект)= ТипСотрудники;
				
		Если этоСотрудник Тогда
			ОтборСотрудник.Сотрудник = Объект;
			Отбор = ОтборСотрудник;
		Иначе	
			ОтборКабинет.Кабинет = Объект;
			Отбор = ОтборКабинет;
		КонецЕсли;

		мсСтрГрафика = ТабГрафики.НайтиСтроки(Отбор);
		Для Каждого ВыбГрафики Из мсСтрГрафика Цикл	
			Если ЗначениеЗаполнено(ВыбГрафики.Смена) Тогда
				Для Каждого Период Из ВыбГрафики.Смена.ПериодыСмены Цикл
					ВывестиИнтервалГрафика(ДокументРезультат, Период.ВремяНачала, Период.ВремяОкончания, ВремяНачалаДня,ВремяОкончанияДня, гПоз, этоСотрудник, ТаблицаДиапазонов, ВыбГрафики);
				КонецЦикла;                        
			Иначе
				ВремяНачала = ПолучитьВремяНачалаОбъекта(ВыбГрафики.Дата, Объект, ВыбГрафики.ВремяНачала);
				Если ВыбГрафики.ВремяНач = ВыбГрафики.ВремяКон Тогда
					ВремяОкончания = ВыбГрафики.ВремяОкончания;
				Иначе
					ВремяОкончания = ПолучитьВремяКонцаОбъекта(ВыбГрафики.ВремяОкончания);
				КонецЕсли;
			
				ВывестиИнтервалГрафика(ДокументРезультат, ВремяНачала, ВремяОкончания, ВремяНачалаДня,ВремяОкончанияДня, гПоз, этоСотрудник, ТаблицаДиапазонов, ВыбГрафики);
			КонецЕсли;
		КонецЦикла;
		
		гПоз = гПоз + ?(этоСотрудник,мКолонокВКолонкеСотрудника,мКолонокВКолонкеОборудования);

	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДокументы(СписокОбъектовНаДень,ДокументРезультат,ВыбБлоки,ВыбБлокиКабинетов, Дата,ВремяНачалаДня,ВремяОкончанияДня, КолонкаНачалаВывода, ТаблицаДиапазонов)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	отбор = Новый Структура("Объект");
	гПоз = КолонкаНачалаВывода + ?(Дата=ДатаНачала,3,0);
	врНачСек = ВремяНачалаДня-НачалоДня(ВремяНачалаДня);
	
	Для Каждого Объект Из СписокОбъектовНаДень Цикл
		этоСотрудник = ТипЗнч(Объект)= ТипСотрудники;
		Отбор.Объект = Объект; 
		
		Если этоСотрудник Тогда
			ВыбБлоки.Сбросить();	
			Если ВыбБлоки.НайтиСледующий(Отбор) Тогда
				
				ВыбБлокиОбъекта = ВыбБлоки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыбБлокиОбъекта.Следующий() Цикл
					ВыбРаботыБлока = ВыбБлокиОбъекта.Выбрать();
					ВыбРаботыБлока.Следующий();
					Если ВыбРаботыБлока.Дата <> Дата Тогда Продолжить; КонецЕсли;
					Если ВыбРаботыБлока.ДатаНачалаБлока = ВыбРаботыБлока.ДатаОкончанияБлока Тогда Продолжить; КонецЕсли;
					
					// Определение цвета заявки.
					Если ВыбРаботыБлока.Состояние.Пустая() Тогда
						ЦветФонаТекДокумента = мЦветФонаРаботыЗаявкиБезСостояния;
					Иначе
						ЦветФонаТекДокумента = ЗначениеИзСтрокиВнутр(ВыбРаботыБлока.СостояниеЦвет);
						Если ТипЗнч(ЦветФонаТекДокумента) <> ТипЦвет Тогда
							ЦветФонаТекДокумента = мЦветФонаРаботыЗаявкиБезСостояния;
						КонецЕсли;
					КонецЕсли;
					
					Расшифровка	= ВыбРаботыБлока.ДокументСсылка;
					
					СтрокаНачалаДиапазона = ТаблицаДиапазонов.Найти(ПолучитьВремяНулевойДаты(ВыбРаботыБлока.ДатаНачалаБлока));
					Если СтрокаНачалаДиапазона <> Неопределено Тогда 
						НачВПоз = ТаблицаДиапазонов.Индекс(СтрокаНачалаДиапазона) + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
					Иначе
						НачВПоз = ( (ВыбРаботыБлока.ДатаНачалаБлока - НачалоДня(ВыбРаботыБлока.ДатаНачалаБлока)) - врНачСек)
								/мКвантПланирования + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
					КонецЕсли;
					Если ВыбРаботыБлока.ДатаОкончанияБлока = КонецДня(ВыбРаботыБлока.ДатаНачалаБлока)+1 Тогда
					    СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти(86400);
					Иначе	
						СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти(ПолучитьВремяНулевойДаты(ВыбРаботыБлока.ДатаОкончанияБлока));
					КонецЕсли;
					Если СтрокаОкончанияДиапазона <> Неопределено Тогда 
						КонВПоз = ТаблицаДиапазонов.Индекс(СтрокаОкончанияДиапазона) - 1 + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
					Иначе
						КонВПоз = ((ВыбРаботыБлока.ДатаОкончанияБлока - НачалоДня(ВыбРаботыБлока.ДатаОкончанияБлока)) - врНачСек )/мКвантПланирования -1 + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
					КонецЕсли;

					// Вывод текста в область заявок.
					Если мКлиентОтдельнойКолонкой Тогда
						КлиентУслугиРаздельно(ВыбРаботыБлока,Расшифровка,НачВПоз,КонВПоз,врНачСек,гПоз,ДокументРезультат,ЦветФонаТекДокумента)	
					Иначе
						КлиентУслугиВместе(ВыбРаботыБлока,Расшифровка,НачВПоз,КонВПоз,врНачСек,гПоз,ДокументРезультат,ЦветФонаТекДокумента);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе	
			ВыбБлокиКабинетов.Сбросить();
			Если ВыбБлокиКабинетов.НайтиСледующий(Отбор) Тогда
				
				Если мСтруктураВизуальныхНастроек.ОтображениеЯчеекКабинетовКакУСотрудников Тогда
					
					ВыбБлокиОбъекта = ВыбБлокиКабинетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыбБлокиОбъекта.Следующий() Цикл
						ВыбРаботыБлока = ВыбБлокиОбъекта.Выбрать();
						ВыбРаботыБлока.Следующий();
						Если ВыбРаботыБлока.Дата <> Дата Тогда Продолжить; КонецЕсли;
						Если ВыбРаботыБлока.ДатаНачалаБлока = ВыбРаботыБлока.ДатаОкончанияБлока Тогда Продолжить; КонецЕсли;
						
						// Определение цвета заявки.
						Если ВыбРаботыБлока.Состояние.Пустая() Тогда
							ЦветФонаТекДокумента = мЦветФонаРаботыЗаявкиБезСостояния;
						Иначе
							ЦветФонаТекДокумента = ЗначениеИзСтрокиВнутр(ВыбРаботыБлока.СостояниеЦвет);
							Если ТипЗнч(ЦветФонаТекДокумента) <> ТипЦвет Тогда
								ЦветФонаТекДокумента = мЦветФонаРаботыЗаявкиБезСостояния;
							КонецЕсли;
						КонецЕсли;
						
						Расшифровка	= ВыбРаботыБлока.ДокументСсылка;
						
						СтрокаНачалаДиапазона = ТаблицаДиапазонов.Найти(ПолучитьВремяНулевойДаты(ВыбРаботыБлока.ДатаНачалаБлока));
						Если СтрокаНачалаДиапазона <> Неопределено Тогда 
							НачВПоз = ТаблицаДиапазонов.Индекс(СтрокаНачалаДиапазона) + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
						Иначе
							НачВПоз = ( (ВыбРаботыБлока.ДатаНачалаБлока - НачалоДня(ВыбРаботыБлока.ДатаНачалаБлока)) - врНачСек)
									/ мКвантПланирования + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
						КонецЕсли;
						
						Если ВыбРаботыБлока.ДатаОкончанияБлока = КонецДня(ВыбРаботыБлока.ДатаНачалаБлока)+1 Тогда
						    СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти(86400);
						Иначе	
							СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти(ПолучитьВремяНулевойДаты(ВыбРаботыБлока.ДатаОкончанияБлока));
						КонецЕсли;
						
						Если СтрокаОкончанияДиапазона <> Неопределено Тогда 
							КонВПоз = ТаблицаДиапазонов.Индекс(СтрокаОкончанияДиапазона) - 1 + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
						Иначе
							КонВПоз = ((ВыбРаботыБлока.ДатаОкончанияБлока - НачалоДня(ВыбРаботыБлока.ДатаОкончанияБлока)) - врНачСек )/мКвантПланирования -1 + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
						КонецЕсли;
						
						КлиентУслугиВместе(ВыбРаботыБлока,Расшифровка,НачВПоз,КонВПоз,врНачСек,гПоз,ДокументРезультат,ЦветФонаТекДокумента);
						
					КонецЦикла;
				Иначе
					Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
					
					ВыбРаботыБлока = ВыбБлокиКабинетов.Выбрать();
					ОбластиБлоков = Новый Соответствие;
					
					Пока ВыбРаботыБлока.Следующий() Цикл
						
						Если ВыбРаботыБлока.Дата <> Дата
							Или ВыбРаботыБлока.ДатаНачалаБлока = ВыбРаботыБлока.ДатаОкончанияБлока
						Тогда
							Продолжить;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ВыбРаботыБлока.Продолжительность) Тогда
							ОбластьБлока = ОбластиБлоков.Получить(ВыбРаботыБлока.НомерБлока);
							Если ОбластьБлока <> Неопределено Тогда
								ОбластьБлока.Текст = ОбластьБлока.Текст + Символы.ПС + ВыбРаботыБлока.Работа;
							КонецЕсли;
							
							Продолжить;
						КонецЕсли;
						
						// Определение цвета заявки.
						Если ВыбРаботыБлока.Состояние.Пустая() Тогда
							ЦветФонаТекДокумента = мЦветФонаРаботыЗаявкиБезСостояния;
						Иначе
							ЦветФонаТекДокумента = ЗначениеИзСтрокиВнутр(ВыбРаботыБлока.СостояниеЦвет);
							Если ТипЗнч(ЦветФонаТекДокумента) <> ТипЦвет Тогда
								ЦветФонаТекДокумента = мЦветФонаРаботыЗаявкиБезСостояния;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаНачалаДиапазона = ТаблицаДиапазонов.Найти(ПолучитьВремяНулевойДаты(ВыбРаботыБлока.ДатаНачала));
						Если СтрокаНачалаДиапазона <> Неопределено Тогда 
							НачВПоз = ТаблицаДиапазонов.Индекс(СтрокаНачалаДиапазона) + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
						Иначе
							НачВПоз = ( (ВыбРаботыБлока.ДатаНачала - НачалоДня(ВыбРаботыБлока.ДатаНачала)) - врНачСек)
									/ мКвантПланирования + ВысотаШапки + 1 + мВысотаЗаголовкаСтраницы;
						КонецЕсли;
						
						Если ВыбРаботыБлока.ДатаОкончания = КонецДня(ВыбРаботыБлока.ДатаНачала)+1 Тогда
							СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти(86400);
						Иначе	
							СтрокаОкончанияДиапазона = ТаблицаДиапазонов.Найти(ПолучитьВремяНулевойДаты(ВыбРаботыБлока.ДатаОкончания));
						КонецЕсли;
						
						Если СтрокаОкончанияДиапазона <> Неопределено Тогда 
							КонВПоз = ТаблицаДиапазонов.Индекс(СтрокаОкончанияДиапазона) - 1 + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
						Иначе
							КонВПоз = ((ВыбРаботыБлока.ДатаОкончания - НачалоДня(ВыбРаботыБлока.ДатаОкончания)) - врНачСек )/мКвантПланирования -1 + (ВысотаШапки + 1) + мВысотаЗаголовкаСтраницы;
						КонецЕсли;
						Если КонВПоз <> Цел(КонВПоз) Тогда КонВПоз = Цел(КонВПоз) + 1 КонецЕсли; // Для случая неизвестной проблемы с дробной координатой (вероятно, нельзя воспроизвести).
						
						гПозНач = гПоз + ?(мГрафикОтдельнойКолонкой,1,0);
						гПозКон = гПоз + ?(мГрафикОтдельнойКолонкой,1,0); // Не учитывается НастройкиДПР.КоличествоДПР, т.к. при ОтображениеЯчеекКабинетовКакУСотрудников = Ложь не отображаем их.
						ОбластьРабота = ДокументРезультат.Область(НачВПоз, гПозНач, КонВПоз, гПозКон);
						
						ОбластиБлоков.Вставить(ВыбРаботыБлока.НомерБлока, ОбластьРабота);
						
						ОбластьРабота.Объединить();
						
						ОбластьРабота.Шрифт = мШрифтРаботы;
						Если ВыбРаботыБлока.Работа.ПланируетсяБезСотрудника Тогда
							ОбластьРабота.Текст = ВыбРаботыБлока.Работа;
						Иначе
							ОбластьРабота.Текст = ?(ВыбРаботыБлока.СотрудникПредставление=NULL,"",ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыбРаботыБлока.СотрудникПредставление) + Символы.ПС) + ВыбРаботыБлока.Работа;
						КонецЕсли;
						ОбластьРабота.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						ОбластьРабота.Расшифровка = ВыбРаботыБлока.ДокументСсылка;
						ОбластьРабота.ЦветФона = ЦветФонаТекДокумента;
						ОбластьРабота.Обвести(Линия,Линия,Линия,Линия);
						
						// Если внутри часа выводим не сплошную линию, убеждаемся, что низ заявки не стал пунктирным.
						Если мСтруктураВизуальныхНастроек.ТипЛинииСеткиВнутриЧаса = 0 Тогда
							ОбластьНиже = ДокументРезультат.Область(ОбластьРабота.Низ + 1, ОбластьРабота.Лево, ОбластьРабота.Низ + 1, ОбластьРабота.Право);
							Если ОбластьНиже.ГраницаСверху.ТипЛинии <> Линия.ТипЛинии Тогда
								Если мГрафикОтдельнойКолонкой Тогда
									ДокументРезультат.Область(ОбластьНиже.Верх,ОбластьНиже.Лево - 1, ОбластьНиже.Низ, ОбластьНиже.Право).Разъединить();
								КонецЕсли;
								ОбластьНиже.ГраницаСверху = Линия;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		гПоз = гПоз + ?(этоСотрудник,мКолонокВКолонкеСотрудника,мКолонокВКолонкеОборудования);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьГраницыДня(ВыбДокументы, ВыбДокументыКабинетов, ВыбГрафики, Дата,ВремяНачалаДня,ВремяОкончанияДня)
	
	Отбор = Новый Структура("Дата",Дата);
	вырНач = ВремяНачалаДня - НачалоДня(ВремяНачалаДня);
	вырКон = ВремяОкончанияДня - НачалоДня(ВремяНачалаДня);
	
	// Учет для границ времени документов.
	мДатаДокНач = КонецДня(Дата);
	мДатаДокКон = НачалоДня(Дата);
	
	ВыбДокументы.Сбросить();
	Пока ВыбДокументы.НайтиСледующий(Отбор) Цикл
		
		мДатаДокНач = Мин (мДатаДокНач, ВыбДокументы.ДокументДатаНачала);
		мДатаДокКон = Макс(мДатаДокКон, ВыбДокументы.ДокументДатаОкончания);
		
	КонецЦикла;
	
	ВыбДокументыКабинетов.Сбросить();
	Пока ВыбДокументыКабинетов.НайтиСледующий(Отбор) Цикл
		
		мДатаДокНач = Мин (мДатаДокНач, ВыбДокументыКабинетов.ДокументДатаНачала);
		мДатаДокКон = Макс(мДатаДокКон, ВыбДокументыКабинетов.ДокументДатаОкончания);
		
	КонецЦикла;
	
	вырНач = Мин(вырНач, ОбщегоНазначения.ВремяВСекунды(мДатаДокНач));
	вырКон = РасширитьВремяОкончанияЖурнала(Дата, мДатаДокКон, вырКон); 
		
	// Учет для границ графиков сотрудников.
	ВыбГрафики.Сбросить();
	Отбор.Вставить("Дата",Дата);
	Пока ВыбГрафики.НайтиСледующий(Отбор) Цикл
		Если ЗначениеЗаполнено(ВыбГрафики.Смена) Тогда
			Для каждого Период из ВыбГрафики.Смена.ПериодыСмены Цикл
				вырНач = Мин (вырНач, ОбщегоНазначения.ВремяВСекунды(Период.ВремяНачала));
				вырКон = Макс(вырКон, ОбщегоНазначения.ВремяВСекунды(Период.ВремяОкончания));
			КонецЦикла;
		Иначе
			вырНач = Мин (вырНач, ОбщегоНазначения.ВремяВСекунды(ВыбГрафики.ВремяНачала));
			вырКон = РасширитьВремяОкончанияЖурнала(ВремяНачалаДня, ВыбГрафики.ВремяОкончания, вырКон);
		КонецЕсли;
	КонецЦикла;
	
	// Оформление результата после учета границ и документов записи, и графиков
	ВремяНачалаДня    = НачалоДня(ВремяНачалаДня) + вырНач;
	ВремяОкончанияДня = НачалоДня(ВремяНачалаДня) + вырКон;
	
КонецПроцедуры

Функция РасширитьВремяОкончанияЖурнала(ДатаКалендаря, ПроверяемоеВремяОкончания, ТекущееВремяОкончанияСек)
	
	Результат = ТекущееВремяОкончанияСек;
	
	Если НачалоДня(ПроверяемоеВремяОкончания) = НачалоДня(ДатаКалендаря) Тогда
		Результат = Макс(ТекущееВремяОкончанияСек, ОбщегоНазначения.ВремяВСекунды(ПроверяемоеВремяОкончания));
	Иначе
		// Делаем журнал до полуночи
		Результат = 86400;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  

Функция ПолучитьСписокОбъектовНаДень(ТаблицаОбъектовПоДатам, Дата)
	
	СтрокиОбъектовНаДень = ТаблицаОбъектовПоДатам.НайтиСтроки(Новый Структура("Дата", Дата));
	
	ОбъектыНаДень = Новый Массив;
	
	Для Каждого СтрокаОбъектаНаДень Из СтрокиОбъектовНаДень Цикл
		
		Если ОбъектыНаДень.Найти(СтрокаОбъектаНаДень.Объект) = Неопределено Тогда
			ОбъектыНаДень.Добавить(СтрокаОбъектаНаДень.Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыНаДень;
	
КонецФункции

// Класический способ отображения (раздельно клиент и услуги).
Процедура КлиентУслугиРаздельно(ВыбРаботыБлока,Расшифровка,НачВПоз,КонВПоз,врНачСек,гПоз,ДокументРезультат,ЦветФонаТекДокумента)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);	
	гПозЯчейки = гПоз + НастройкиДПР.КоличествоДПР + Число(мГрафикОтдельнойКолонкой);
	гПозРабота = гПоз + НастройкиДПР.КоличествоДПР + Число(мГрафикОтдельнойКолонкой) + 1;
	
	#Область ВычислениеТекстаЯчеек // Блок вычисления текстовых значений ячеек, примечаний и цвета доп.колонки
	ТекстовыеДанныеЯчейки = Новый Структура("ТекстОсновнойЯчейки, ПримечаниеОсновнойЯчейки, ТекстДопЯчейки, ПримечаниеДопЯчейки", "","","","");
	
	Если НастройкиДПР.КоличествоДПР > 0 Тогда
		ОбластьОбщая = ДокументРезультат.Область(НачВПоз, гПозЯчейки - 1, КонВПоз, гПозРабота);
		ОбластьПоля	 = ДокументРезультат.Область(НачВПоз, гПозЯчейки - 1, КонВПоз, гПозЯчейки - 1);
		
		ОбластьОбщая.Разъединить();
		ОбластьПоля.Объединить();
		ОбластьПоля.Обвести(Линия,Линия,Линия,Линия);

		ОбластьПоля.Расшифровка = Расшифровка;
		
		УстановитьЦветФонаДопЯчейкиЗаявки(ОбластьПоля, Расшифровка, ВыбРаботыБлока.КлиентСсылка, ЦветФонаТекДокумента)
	КонецЕсли;
	
	ДозаполнитьЗначенияЯчеек(ТекстовыеДанныеЯчейки, ВыбРаботыБлока.КлиентСсылка, ВыбРаботыБлока, Ложь);
	
	Если НастройкиДПР.КоличествоДПР > 0 Тогда
		ОбластьПоля.Текст = Строка(ТекстовыеДанныеЯчейки.ТекстДопЯчейки);
		ОбластьПоля.Примечание.Текст = ТекстовыеДанныеЯчейки.ПримечаниеДопЯчейки; 
	КонецЕсли;
	#КонецОбласти // Блок вычисления текстовых значений ячеек, примечаний и цвета доп.колонки

	ВыбРаботыБлока.Сбросить();
	ВыбРаботыБлока.Следующий();
	Клиент = ВыбРаботыБлока.ДокументСсылка.Клиент;
	
	ОбластьКлиент = ДокументРезультат.Область(НачВПоз, гПозЯчейки, КонВПоз, гПозЯчейки);
	
	ОбластьКлиент.Объединить();
	ОбластьКлиент.Шрифт = мШрифтКлиент;
	ОбластьКлиент.Текст = ТекстовыеДанныеЯчейки.ТекстОсновнойЯчейки;
	ОбластьКлиент.ОриентацияТекста = 90;
	ОбластьКлиент.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьКлиент.Расшифровка = Расшифровка;
	ОбластьКлиент.ЦветФона = ЦветФонаТекДокумента;
	ОбластьКлиент.РазмещениеТекста		= ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	ОбластьКлиент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ОбластьКлиент.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ОбластьКлиент.Обвести(Линия,Линия,Линия,Линия);
	
	ОбластьРабота = ДокументРезультат.Область(НачВПоз,гПозРабота,КонВПоз,гПозРабота);
	ОбластьРабота.Объединить();
	ОбластьРабота.Шрифт = мШрифтРаботы;
	
	ОбластьРабота.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьРабота.Расшифровка = Расшифровка;
	ОбластьРабота.ЦветФона = ЦветФонаТекДокумента;
	ОбластьРабота.Обвести(Линия,Линия,Линия,Линия);
	
	ТекстовыеДанныеЯчейки = Новый Структура("ТекстОсновнойЯчейки, ПримечаниеОсновнойЯчейки, ТекстДопЯчейки, ПримечаниеДопЯчейки");
	ТекстовыеДанныеЯчейки.ТекстОсновнойЯчейки = "";	

	РассчитатьЗначенияПолейЯчеек(ТекстовыеДанныеЯчейки.ТекстОсновнойЯчейки, Клиент, "ПоследовательностьОтображенияОсновнойЯчейкиУслуга", ВыбРаботыБлока, Ложь,Истина);	
	РассчитатьЗначенияПолейЯчеек(ТекстовыеДанныеЯчейки.ПримечаниеОсновнойЯчейки, Клиент, "ПоследовательностьОтображенияПримечанияОсновнойЯчейки", ВыбРаботыБлока, Ложь,Истина);	
	
	ОбластьРабота.Текст = ТекстовыеДанныеЯчейки.ТекстОсновнойЯчейки;
	ОбластьРабота.Примечание.Текст = ТекстовыеДанныеЯчейки.ПримечаниеОсновнойЯчейки;
		
КонецПроцедуры

Процедура КлиентУслугиВместе(ВыбРаботыБлока,Расшифровка,НачВПоз,КонВПоз,врНачСек,гПоз,ДокументРезультат,ЦветФонаТекДокумента)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	КонВПоз = КонВПоз + 1;						
	гПозЯчейки = гПоз + НастройкиДПР.КоличествоДПР + Число(мГрафикОтдельнойКолонкой);
	
	ОбщаяСтрокаНеосновныхДПР = "";
	
	ТекстовыеДанныеЯчейки = Новый Структура("ТекстОсновнойЯчейки, ПримечаниеОсновнойЯчейки, ТекстДопЯчейки, ПримечаниеДопЯчейки", "","","","");
	ДозаполнитьЗначенияЯчеек(ТекстовыеДанныеЯчейки, ВыбРаботыБлока.КлиентСсылка, ВыбРаботыБлока, Истина);
	
	Если НастройкиДПР.КоличествоДПР > 0 Тогда 
		
		ОбластьПоля = ДокументРезультат.Область(НачВПоз, гПозЯчейки - 1, КонВПоз - 1,  гПозЯчейки - 1);
		Если мГрафикОтдельнойКолонкой Тогда
			ОбластьОбщая = ДокументРезультат.Область(НачВПоз - 1, гПоз + 1 + НастройкиДПР.КоличествоДПР, КонВПоз - 1, гПоз + 1 + НастройкиДПР.КоличествоДПР);
		Иначе
			ОбластьОбщая = ДокументРезультат.Область(НачВПоз - 1, гПоз + 1 + НастройкиДПР.КоличествоДПР, КонВПоз - 1, гПоз + 1 + НастройкиДПР.КоличествоДПР);
		КонецЕсли;
		ОбластьОбщая.Разъединить();
		ОбластьПоля.Объединить();
		ОбластьПоля.Обвести(Линия,Линия,Линия,Линия);

		ОбластьПоля.Расшифровка = Расшифровка;
		
		УстановитьЦветФонаДопЯчейкиЗаявки(ОбластьПоля, Расшифровка, ВыбРаботыБлока.КлиентСсылка, ЦветФонаТекДокумента);
		
		ОбластьПоля.Текст = Строка(ТекстовыеДанныеЯчейки.ТекстДопЯчейки);
		ОбластьПоля.Примечание.Текст = ТекстовыеДанныеЯчейки.ПримечаниеДопЯчейки;
		
		Если ЕстьКартинкиВДопЯчейке Тогда
			ВывестиКартинкиВЯчейку(ДокументРезультат, ОбластьПоля, мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияКартинокДопЯчейки,
								   ВыбРаботыБлока.КлиентСсылка, Расшифровка);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьКлиент = ДокументРезультат.Область(НачВПоз, гПозЯчейки, КонВПоз - 1, гПозЯчейки);
	
	ОбластьКлиент.Объединить();
	ОбластьКлиент.Шрифт = мШрифтРаботы;
	ОбластьКлиент.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьКлиент.Расшифровка = Расшифровка;
	ОбластьКлиент.ЦветФона = ЦветФонаТекДокумента;		
	ОбластьКлиент.Текст = ТекстовыеДанныеЯчейки.ТекстОсновнойЯчейки;
	ОбластьКлиент.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ОбластьКлиент.Обвести(Линия,Линия,Линия,Линия);

	ОбластьКлиент.Примечание.Текст = ТекстовыеДанныеЯчейки.ПримечаниеОсновнойЯчейки;
	
	Если ЕстьКартинкиВОсновнойЯчейке Тогда
		ВывестиКартинкиВЯчейку(ДокументРезультат, ОбластьКлиент, мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияКартинокОсновнойЯчейки,
							   ВыбРаботыБлока.КлиентСсылка, Расшифровка);
	КонецЕсли;
	
	// Если внутри часа выводим не сплошную линию, убеждаемся, что низ заявки не стал пунктирным.
	Если мСтруктураВизуальныхНастроек.ТипЛинииСеткиВнутриЧаса = 0 Тогда
		ОбластьНиже = ДокументРезультат.Область(ОбластьКлиент.Низ + 1, ОбластьКлиент.Лево - НастройкиДПР.КоличествоДПР, ОбластьКлиент.Низ + 1, ОбластьКлиент.Право);
		Если ОбластьНиже.ГраницаСверху.ТипЛинии <> Линия.ТипЛинии Тогда
			ОбластьНиже.ГраницаСверху = Линия
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РазделительТекстаЯчейки(Приёмник, ВТойЖеСтроке)
	
	Если ЗначениеЗаполнено(Приёмник) Тогда
		Если ВТойЖеСтроке Тогда
			Возврат " ";
		Иначе
			Возврат Символы.ПС;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ВыводимыеВЗаявкуЯчейкиУслуг()
	
	мЯчейкиУслуг = Новый Структура;
	
	ПоследовательностиОтображения = Новый Массив;
	ПоследовательностиОтображения.Добавить("ПоследовательностьОтображенияОсновнойЯчейки");
	ПоследовательностиОтображения.Добавить("ПоследовательностьОтображенияОсновнойЯчейкиКлиент");
	ПоследовательностиОтображения.Добавить("ПоследовательностьОтображенияОсновнойЯчейкиУслуга");
	ПоследовательностиОтображения.Добавить("ПоследовательностьОтображенияПримечанияОсновнойЯчейки");
	ПоследовательностиОтображения.Добавить("ПоследовательностьОтображенияДопЯчейки");
	ПоследовательностиОтображения.Добавить("ПоследовательностьОтображенияПримечанияДопЯчейки");
	
	Для Каждого ПоследовательностьИмя Из ПоследовательностиОтображения Цикл
		
		ПоследовательностьОтображения = мСтруктураВизуальныхНастроек[ПоследовательностьИмя];
		
		ЯчейкиУслуг = Новый Массив;
		Для Каждого СтрокаНастройки Из ПоследовательностьОтображения Цикл
			Если СтрокаНастройки.ЯчейкаРодительИмяПредопределенного <> "Клиент" Тогда
				ЯчейкиУслуг.Добавить(СтрокаНастройки);
			КонецЕсли;
		КонецЦикла;
		
		мЯчейкиУслуг.Вставить(ПоследовательностьИмя, ЯчейкиУслуг);
		
	КонецЦикла;
	
	Возврат мЯчейкиУслуг;
	
КонецФункции

Процедура УстановитьЦветФонаДопЯчейкиЗаявки(ОбластьПоля, Заявка, Клиент, ЦветФонаТекДокумента)
	
	ФонДопЯчейки = ПолучитьФонДопЯчейкиЗаявки(Заявка, Клиент);
	Если ФонДопЯчейки <> Неопределено Тогда
		ОбластьПоля.ЦветФона = ФонДопЯчейки;
	Иначе
		ОбластьПоля.ЦветФона = ЦветФонаТекДокумента; // Случай, когда не задан или признак для цвета фона допячейки или не заполнен для заявки.
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьФонДопЯчейкиЗаявки(Заявка, Клиент)
	
	Если ЗначениеЗаполнено(мСтруктураВизуальныхНастроек.ЦветФонаДопЯчейки) Тогда
		
		КэшЗаявкиИПризнаки.Сбросить();
		Если КэшЗаявкиИПризнаки.НайтиСледующий(Новый Структура("Объект, Признак", Заявка, мСтруктураВизуальныхНастроек.ЦветФонаДопЯчейки)) Тогда
			Фон = КэшЗаявкиИПризнаки.ЗначениеХранилище.Получить();
		Иначе 
			КэшЗаявкиИПризнаки.Сбросить();
			Если КэшЗаявкиИПризнаки.НайтиСледующий(Новый Структура("Объект, Признак", Клиент, мСтруктураВизуальныхНастроек.ЦветФонаДопЯчейки)) Тогда
				Фон = КэшЗаявкиИПризнаки.ЗначениеХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		Если Фон <> Неопределено И Фон <> Новый Цвет(0,0,0) И ТипЗнч(Фон) = ТипЦвет Тогда
			Возврат Фон;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция УстановитьМестонахожденияМедКарт(МассивСсылокДокументов)
	
	// Удалим пустые ссылки.
	МассивСсылокДокументовБезПустых = новый Массив;
	Для Каждого ЭлементМассива Из МассивСсылокДокументов Цикл
		Если ЗначениеЗаполнено(ЭлементМассива) Тогда
			МассивСсылокДокументовБезПустых.Добавить(ЭлементМассива);			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Прием.МедицинскаяКарта) КАК МедицинскаяКарта,
	               |	Прием.ДокументОснование КАК Основание
	               |ПОМЕСТИТЬ МедКартыПоПриемам
	               |ИЗ
	               |	Документ.Прием КАК Прием
	               |ГДЕ
	               |	Прием.ДокументОснование В(&Основание)
	               |	И (НЕ Прием.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Прием.ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(МедицинскиеКарты.Ссылка) КАК МедицинскаяКарта,
	               |	Заявка.Ссылка КАК Основание
	               |ПОМЕСТИТЬ ПервыеПопавшиесяМедКарты
	               |ИЗ
	               |	Документ.Заявка КАК Заявка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	               |		ПО Заявка.Клиент = МедицинскиеКарты.Клиент
	               |			И (Заявка.Ссылка В (&Основание))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Заявка.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Заявка.Ссылка,
	               |	ВЫБОР
	               |		КОГДА МедКартыПоПриемам.МедицинскаяКарта ЕСТЬ NULL 
	               |			ТОГДА ВЫБОР
	               |					КОГДА Заявка.Клиент.ОсновнаяМедицинскаяКарта = ЗНАЧЕНИЕ(Справочник.МедицинскиеКарты.ПустаяСсылка)
	               |						ТОГДА ЕСТЬNULL(ПервыеПопавшиесяМедКарты.МедицинскаяКарта, ЗНАЧЕНИЕ(Справочник.МедицинскиеКарты.ПустаяСсылка))
	               |					ИНАЧЕ Заявка.Клиент.ОсновнаяМедицинскаяКарта
	               |				КОНЕЦ
	               |		ИНАЧЕ МедКартыПоПриемам.МедицинскаяКарта
	               |	КОНЕЦ КАК МедКарта
	               |ПОМЕСТИТЬ ИтоговыеМедКартыКЗаявкам
	               |ИЗ
	               |	Документ.Заявка КАК Заявка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МедКартыПоПриемам КАК МедКартыПоПриемам
	               |		ПО (МедКартыПоПриемам.Основание = Заявка.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПервыеПопавшиесяМедКарты КАК ПервыеПопавшиесяМедКарты
	               |		ПО (ПервыеПопавшиесяМедКарты.Основание = Заявка.Ссылка)
	               |ГДЕ
	               |	Заявка.Ссылка В(&Основание)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИтоговыеМедКартыКЗаявкам.Ссылка КАК Заявка,
	               |	ИтоговыеМедКартыКЗаявкам.Ссылка.Клиент КАК Клиент,
	               |	ИтоговыеМедКартыКЗаявкам.МедКарта,
	               |	ВЫБОР
	               |		КОГДА МестонахожденияМедкартСрезПоследних.Сотрудник ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		КОГДА МестонахожденияМедкартСрезПоследних.ВыданаНаРуки
	               |				ИЛИ МестонахожденияМедкартСрезПоследних.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Выдана,
	               |	ВЫБОР
	               |		КОГДА ИтоговыеМедКартыКЗаявкам.МедКарта = ЗНАЧЕНИЕ(Справочник.МедицинскиеКарты.ПустаяСсылка)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Существует
	               |ИЗ
	               |	ИтоговыеМедКартыКЗаявкам КАК ИтоговыеМедКартыКЗаявкам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахожденияМедкарт.СрезПоследних КАК МестонахожденияМедкартСрезПоследних
	               |		ПО ИтоговыеМедКартыКЗаявкам.МедКарта = МестонахожденияМедкартСрезПоследних.МедицинскаяКарта";
	
	Запрос.УстановитьПараметр("Основание", массивСсылокДокументовБезПустых);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьВремяНулевойДаты(Дата)
	
	Возврат Дата(1,1,1) + Час(Дата) * 60 * 60 + Минута(Дата) * 60;
	
КонецФункции

Процедура СформироватьКэшДанныхЗаявок(мКлиенты, мУслуги, мЗаявки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мКлиенты", мКлиенты);
	Запрос.УстановитьПараметр("МаксимальнаяСуммаДолга", ?(мУчетнаяПолитика.МаксимальнаяСуммаДолгаКлиента = Неопределено, 0, мУчетнаяПолитика.МаксимальнаяСуммаДолгаКлиента));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Клиент,
	|	Клиенты.Ссылка КАК КлиентЗапросКБД,
	|	Клиенты.Наименование КАК Наименование,
	|	Клиенты.Фамилия КАК Фамилия,
	|	Клиенты.Имя КАК Имя,
	|	Клиенты.Отчество КАК Отчество,
	|	Клиенты.ДатаРождения КАК ДатаРождения,
	|	Клиенты.КраткийКомментарий КАК КраткийКомментарий,
	|	Клиенты.Комментарий,
	|	ВЫБОР
	|		КОГДА Клиенты.МаксимальнаяСуммаДолгаКлиента > 0
	|			ТОГДА Клиенты.МаксимальнаяСуммаДолгаКлиента
	|		ИНАЧЕ &МаксимальнаяСуммаДолга
	|	КОНЕЦ КАК МаксимальнаяСуммаДолга,
	|	Клиенты.ОсновнаяМедицинскаяКарта КАК ОсновнаяМедицинскаяКарта,
	|	Клиенты.ОсновнаяМедицинскаяКарта.Наименование КАК КартаНаименование,
	|	Клиенты.ОсновнаяМедицинскаяКарта.НомерКарты КАК КартаНомер,
	|	Клиенты.ОсновнаяМедицинскаяКарта.ВидКарты.Префикс КАК КартаПрефикс,
	|	Клиенты.ОсновнаяМедицинскаяКарта.ВидКарты.Суффикс КАК КартаСуффикс
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка В(&мКлиенты)";
	
	Результат = Запрос.Выполнить();
	мКэшДанныхКлиентов = Результат.Выгрузить();
	мКэшДанныхКлиентов.Индексы.Добавить("Клиент");
	
	мКэшДанныхКлиентов.Колонки.Добавить("ЕстьАванс", Новый ОписаниеТипов("Булево"));
	
	Если мСтруктураВизуальныхНастроек.ЕстьРассчитываемыеПризнакиЗаявок Тогда
		ЗаполнитьИсходныеДанныеОнлайнРасчетаЗаявок(мЗаявки);
	Иначе
		мКэшДанныхЗаявокОнлайн = Новый ТаблицаЗначений; // Пустая коллекция.
		мКэшДанныхЗаявокОнлайн.Колонки.Добавить("Заявка");
	КонецЕсли;
	
	// Дополнительная информация для предопределенных полей отображения долга.
	Если ТребуютсяДолгиКлиентаВКэшеДанныхКлиентов() Тогда
		РасчетыСКлиентами = РаботаСКлиентамиПереопределяемый.ПолучитьВзаиморасчетыСКлиентами(мКлиенты);
		
		мКэшДанныхКлиентов.Колонки.Добавить("СуммаДолга", Новый ОписаниеТипов("Число"));
		мКэшДанныхКлиентов.Колонки.Добавить("ЕстьДолги", Новый ОписаниеТипов("Булево"));
		мКэшДанныхКлиентов.Колонки.Добавить("ДоДостиженияЛимитаПоДолгуОсталось", Новый ОписаниеТипов("Число"));
		
		Для Каждого СтрокаКэш Из мКэшДанныхКлиентов Цикл
			СтрокаРасчетов = РасчетыСКлиентами.Найти(СтрокаКэш.Клиент, "Клиент");
			Если СтрокаРасчетов = Неопределено Тогда
				СтрокаКэш.СуммаДолга = 0;
			Иначе
				СтрокаКэш.СуммаДолга = Макс(0, СтрокаРасчетов.СуммаОбщая);
				СтрокаКэш.ЕстьДолги	= СтрокаРасчетов.ЕстьДолги;
				СтрокаКэш.ЕстьАванс = СтрокаРасчетов.ЕстьАвансы;
			КонецЕсли;
			СтрокаКэш.ДоДостиженияЛимитаПоДолгуОсталось = СтрокаКэш.МаксимальнаяСуммаДолга - СтрокаКэш.СуммаДолга;
		КонецЦикла;		
	КонецЕсли;
		
	КалендарьПланирования.ОбновитьКэшДопИнформацииКлиентов(мКэшДопИнформацииКлиентов,мКлиенты);
	
	СформироватьКэшПризнаковПоЗаявкам(мКлиенты, мЗаявки);
	
	// Заполнение кэша услуг заявок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мУслуги", мУслуги);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&мУслуги)";
	
	Результат = Запрос.Выполнить();
	мКэшДанныхНоменклатуры = Результат.Выгрузить();
	мКэшДанныхНоменклатуры.Индексы.Добавить("Ссылка");
	
	СформироватьКэшДанныхЗаявокМедицина(мКлиенты, мУслуги);
	
КонецПроцедуры

Процедура ЗаполнитьИсходныеДанныеОнлайнРасчетаЗаявок(мЗаявки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мЗаявки", мЗаявки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Заявка,
	|	Заявка.Ссылка КАК ЗаявкаЗапросКБД,
	|	Заявка.ДатаНачала КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Заявка.ДатаНачала, ДЕНЬ), Заявка.ДатаНачала, СЕКУНДА)) КАК ВремяНачала,
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Заявка.ДатаОкончания, ДЕНЬ), Заявка.ДатаОкончания, СЕКУНДА)) КАК ВремяОкончания,
	|	Заявка.Состояние КАК Состояние
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка В(&мЗаявки)";
	
	мКэшДанныхЗаявокОнлайн = Запрос.Выполнить().Выгрузить();
	мКэшДанныхЗаявокОнлайн.Индексы.Добавить("Заявка");
	
	// Получаем все свойства заявок для колонок таблицы кэша.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НазначениеСвойства", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_Заявка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвойстваОбъектов.ТипЗначения КАК ТипЗначения,
	|	СвойстваОбъектов.Ссылка КАК Ссылка,
	|	СвойстваОбъектов.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства";
	РезультатЗапроса = Запрос.Выполнить();
	мКэшДопСвойствЗаявок = РезультатЗапроса.Выгрузить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИдентификаторСвойства = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ИмяКолонки = "Свойство" + СтрЗаменить(Выборка.Ссылка.УникальныйИдентификатор(), "-","_");		 
		мКэшДанныхЗаявокОнлайн.Колонки.Добавить(ИмяКолонки, Выборка.ТипЗначения);
		ИдентификаторСвойства.Вставить(Выборка.Ссылка, ИмяКолонки);
	КонецЦикла;
	
	// Получаем значения свойств для заявок журнала записи.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мЗаявки", мЗаявки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Объект,
	|	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект В(&мЗаявки)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеЗаявки = мКэшДанныхЗаявокОнлайн.Найти(Выборка.Объект, "Заявка");
		ДопСвойство = Новый Структура(ИдентификаторСвойства.Получить(Выборка.Свойство), Выборка.Значение);
		ЗаполнитьЗначенияСвойств(ДанныеЗаявки,ДопСвойство);
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуютсяДолгиКлиентаВКэшеДанныхКлиентов() 
	
	Требуется = мСтруктураВизуальныхНастроек.ПоследовательностьОтображения.Найти(Справочники.ЯчейкиКалендаря.ДолгКлиентаСумма, "Ячейка") <> Неопределено;
	
	// Возможно, используется в отборах СКД
	Если Не Требуется Тогда
		Для Каждого ЯчейкаКалендаря Из мСтруктураВизуальныхНастроек.РассчитываемыеПризнаки Цикл
			
			Если ЯчейкаКалендаря.ФорматУсловия = 1 // СКД
				И ЯчейкаКалендаря.РассчитыватьОнлайн
			Тогда
				Попытка
					Для Каждого СтрокаОтбор Из ЯчейкаКалендаря.Отборы Цикл
						Отбор = СтрокаОтбор.Отбор.Получить();
						Если ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор.Отбор, "СуммаДолга").Количество() <> 0
							Или ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор.Отбор, "ЕстьДолги").Количество() <> 0
							Или ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор.Отбор, "ЕстьАванс").Количество() <> 0
							Или ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор.Отбор, "ДоДостиженияЛимитаПоДолгуОсталось").Количество() <> 0
						Тогда
							Требуется = Истина;
						КонецЕсли;
					КонецЦикла;
					Если Требуется Тогда
						Прервать;
					КонецЕсли;
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Требуется;
	
КонецФункции

Процедура СформироватьКэшДанныхЗаявокМедицина(мКлиенты, мУслуги)
	
	СтрокаНастроек = мСтруктураВизуальныхНастроек.ПоследовательностьОтображения.Найти(Справочники.ЯчейкиКалендаря.МедКартаНомер, "Ячейка");
	Если СтрокаНастроек <> Неопределено Тогда
		КэшироватьМедКарты = Истина;
	Иначе
		КэшироватьМедКарты = Ложь;
	КонецЕсли;
	
	Если КэшироватьМедКарты Тогда
		// Сохраняем в Кэш только те Медкарты Клиентов, которые записанны как "Основные".
		мКэшМедкарт = Новый ТаблицаЗначений();
		мКэшМедкарт.Колонки.Добавить("Клиент");
		мКэшМедкарт.Колонки.Добавить("КартаНаименование");
		мКэшМедкарт.Колонки.Добавить("КартаНомер");
		мКэшМедкарт.Колонки.Добавить("КартаПрефикс");
		мКэшМедкарт.Колонки.Добавить("КартаСуффикс");
		Для Каждого СтрокаТаблицыИсточника Из мКэшДанныхКлиентов Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицыИсточника.ОсновнаяМедицинскаяКарта) Тогда
				СтрокаТаблицыПриемника = мКэшМедкарт.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
			КонецЕсли;
		КонецЦикла;
		
		Граница = мКлиенты.ВГраница();
		Индекс = 0;
		Пока Индекс <= Граница Цикл
			Отбор = Новый Структура("Клиент,ОсновнаяМедицинскаяКарта",мКлиенты[Индекс],Справочники.МедицинскиеКарты.ПустаяСсылка());
			Строки = мКэшДанныхКлиентов.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				мКлиенты.Удалить(Индекс);
				Граница = Граница - 1;
			Иначе			
				Индекс = Индекс + 1;
			КонецЕсли;			      
		КонецЦикла;
		// Если остались клиенты, у которых нет Медкарт выбранных в качестве "Основной", то для них выбираем все незакрытые Медкарты подходящего вида.
		Если мКлиенты.Количество() > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("мКлиенты", мКлиенты);
			Запрос.УстановитьПараметр("ОсновнойВид", мУчетнаяПолитика.ОсновнойВидМедКарт);
			Запрос.УстановитьПараметр("ЭтотДень", ДатаНачала);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МедицинскиеКарты.Ссылка КАК КартаСсылка,
			|	МедицинскиеКарты.Клиент КАК Клиент,
			|	МедицинскиеКарты.НомерКарты КАК КартаНомер,
			|	МедицинскиеКарты.Наименование КАК КартаНаименование,
			|	МедицинскиеКарты.ВидКарты.Префикс КАК КартаПрефикс,
			|	МедицинскиеКарты.ВидКарты.Суффикс КАК КартаСуффикс
			|ИЗ
			|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
			|ГДЕ
			|	НЕ МедицинскиеКарты.ПометкаУдаления
			|	И МедицинскиеКарты.Клиент В(&мКлиенты)
			|	И МедицинскиеКарты.ВидКарты = &ОсновнойВид
			|	И (МедицинскиеКарты.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ИЛИ МедицинскиеКарты.ДатаЗакрытия > &ЭтотДень)";
			Результат = Запрос.Выполнить();
			ТЗКарт2 = Результат.Выгрузить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТЗКарт2,мКэшМедкарт);
			Граница=мКлиенты.ВГраница();
			Индекс=0;
			Пока Индекс<=Граница Цикл
				Отбор = Новый Структура("Клиент",мКлиенты[Индекс]);
				Строки = ТЗКарт2.НайтиСтроки(Отбор);
				Если Строки.Количество()=0 Тогда
					Индекс=Индекс+1;
				Иначе
					мКлиенты.Удалить(Индекс);
					Граница=Граница-1;
				КонецЕсли;
			КонецЦикла;
			
			Если мКлиенты.Количество()>0 Тогда
				Запрос = Новый Запрос;			
				Запрос.УстановитьПараметр("мКлиенты", мКлиенты);
				Запрос.УстановитьПараметр("ЭтотДень", ТекущаяДата());
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МедицинскиеКарты.Ссылка КАК КартаСсылка,
				|	МедицинскиеКарты.Клиент КАК Клиент,
				|	МедицинскиеКарты.НомерКарты КАК КартаНомер,
				|	МедицинскиеКарты.Наименование КАК КартаНаименование,
				|	МедицинскиеКарты.ВидКарты.Суффикс КАК КартаСуффикс,
				|	МедицинскиеКарты.ВидКарты.Префикс КАК КартаПрефикс
				|ИЗ
				|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
				|ГДЕ
				|	НЕ МедицинскиеКарты.ПометкаУдаления
				|	И МедицинскиеКарты.Клиент В(&мКлиенты)
				|	И (МедицинскиеКарты.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|			ИЛИ МедицинскиеКарты.ДатаЗакрытия > &ЭтотДень)";
				Результат = Запрос.Выполнить();
				ТЗКарт3 = Результат.Выгрузить();
				// Загружаем в кэш только одну карту произвольного вида для каждого из оставшихся клиентов, у которых не нашлось Медкарт подходящего вида.
				Индекс=0;
				Пока Индекс<=Граница Цикл
					Отбор = Новый Структура("Клиент",мКлиенты[Индекс]);
					Строки = ТЗКарт3.НайтиСтроки(Отбор);
					Если Строки.Количество() = 0 Тогда
						Индекс=Индекс + 1;
					Иначе
						мКлиенты.Удалить(Индекс);
						СтрокаТаблицыПриемника = мКэшМедкарт.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, Строки[0]);
						Граница=Граница - 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует числовой ключ, по которому на строное клиенту будет формироваться текст и подсказка ячейки графика, а также его расшифровка.
//
// Параметры:
//  ПараметрыКлюча - Структура - Структура с полями:
// 		Субъект
//      СубъектПредставление
//      ИдентификаторСобытия
//      ЭтоВидРабВремя
//      ЭтоРабВремя
//		Филиал
// 
// Возвращаемое значение:
//   - Число
//
Функция ДобавитьКлючРасшифровкиСвободногоВремени(ВыбГрафики, Субъект, ЭтоВидРабВремя, ЭтоРабВремя)
	
	НоваяСтрока = мТаблицаРасшифровокСвободногоВремени.Добавить();
	НоваяСтрока.ИдентификаторСобытия = ВыбГрафики.ИдентификаторСобытия;
	
	НоваяСтрока.Филиал			 = ВыбГрафики.Филиал;
	НоваяСтрока.Субъект			 = Субъект;
	НоваяСтрока.ЭтоВидРабВремя	 = ЭтоВидРабВремя;
	НоваяСтрока.ЭтоРабВремя		 = ЭтоРабВремя;
		
	НоваяСтрока.Ключ = мТаблицаРасшифровокСвободногоВремени.Количество();
		
	Возврат НоваяСтрока.Ключ;
	
КонецФункции

Функция ПолучитьТаблицуГрафиков(ВыбГрафики)
	
	ТабГрафики = Новый ТаблицаЗначений;
	ТабГрафики.Колонки.Добавить("Объект");
	ТабГрафики.Колонки.Добавить("Дата");
	ТабГрафики.Колонки.Добавить("ВремяНачала");
	ТабГрафики.Колонки.Добавить("ВремяОкончания");
	ТабГрафики.Колонки.Добавить("ВидВремени");
	ТабГрафики.Колонки.Добавить("ЦветВидаВремени");
	ТабГрафики.Колонки.Добавить("ЭтоРабВремя");
	ТабГрафики.Колонки.Добавить("ЭтоВидРабВремя");
	ТабГрафики.Колонки.Добавить("НазваниеСобытия");
	ТабГрафики.Колонки.Добавить("КомментарийСобытия");
	ТабГрафики.Колонки.Добавить("ИдентификаторСобытия");
	ТабГрафики.Колонки.Добавить("Автор");
	ТабГрафики.Колонки.Добавить("Филиал");
	ТабГрафики.Колонки.Добавить("ФилиалПредставление");
	ТабГрафики.Колонки.Добавить("Подразделение");
	ТабГрафики.Колонки.Добавить("Смена");
	ТабГрафики.Колонки.Добавить("ДокументУстановкиГрафика");
	ТабГрафики.Колонки.Добавить("Кабинет");
	ТабГрафики.Колонки.Добавить("Сотрудник");
	Табграфики.Колонки.Добавить("СотрудникПредставление");
	Табграфики.Колонки.Добавить("КабинетПредставление");
	Табграфики.Колонки.Добавить("ДатаСоздания");
	// Для расшифровки ячейки календаря.
	ТабГрафики.Колонки.Добавить("ВремяНач");
	ТабГрафики.Колонки.Добавить("ВремяКон");
	
	ТабГрафики.Колонки.Добавить("Продолжительность");
	ТабГрафики.Колонки.Добавить("ВыводитьТолькоГоловуСобытия", Новый ОписаниеТипов("Булево"));
	ТабГрафики.Колонки.Добавить("ОбрезокСобытияБезГоловы", Новый ОписаниеТипов("Булево"));
	
	ВыбГрафики.Сбросить();
	Отбор = Новый Структура("Объект, Дата");
	
	мсПустыеГоловыСобытий = Новый Массив;
	мсСтрокиГрафикаКУдалению = Новый Массив;
	
	мсОбъектыГрафика = Новый Массив;
	
	Пока ВыбГрафики.Следующий() Цикл
		
		мсОбъектыГрафика.Очистить();
		Если ЗначениеЗаполнено(ВыбГрафики.Сотрудник) Тогда
			мсОбъектыГрафика.Добавить(ВыбГрафики.Сотрудник);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбГрафики.Кабинет) Тогда
			мсОбъектыГрафика.Добавить(ВыбГрафики.Кабинет);
		КонецЕсли;
		
		Для Каждого Объект Из мсОбъектыГрафика Цикл
		
			Отбор.Объект = Объект;
			Отбор.Дата = ВыбГрафики.Дата;
			
			ЗаполнитьЗначенияСвойств(Отбор, ВыбГрафики);
			мсСтрГрафика = ТабГрафики.НайтиСтроки(Отбор);
			
			Для Каждого СтрГрафика Из мсСтрГрафика Цикл
				
				Если (ВыбГрафики.ВремяНачала <= СтрГрафика.ВремяНачала 
						И ВыбГрафики.ВремяОкончания	> СтрГрафика.ВремяНачала 
						И ВыбГрафики.ВремяОкончания	< СтрГрафика.ВремяОкончания)
				Тогда
					// Срезаю верх у предыдущего события.
					Если Не ГрафикиСотрудников.ЭтоОбычноеРабочееВремя(СтрГрафика.ВидВремени) Тогда
						мсПустыеГоловыСобытий.Добавить(ПолучитьСтруктуруИзСтрокиТаблицы(СтрГрафика, ТабГрафики.Колонки));
						СтрГрафика.ОбрезокСобытияБезГоловы = Истина;
					КонецЕсли;
					
					СтрГрафика.ВремяНачала = ВыбГрафики.ВремяОкончания;
									
				ИначеЕсли  ВыбГрафики.ВремяНачала	 <= СтрГрафика.ВремяНачала 
						 И ВыбГрафики.ВремяОкончания >= СтрГрафика.ВремяОкончания
				Тогда
					// Удаляю предыдущее событие.
					Если мсСтрокиГрафикаКУдалению.Найти(СтрГрафика) = Неопределено Тогда
						мсСтрокиГрафикаКУдалению.Добавить(СтрГрафика);
						Если Не ГрафикиСотрудников.ЭтоОбычноеРабочееВремя(СтрГрафика.ВидВремени) Тогда
							мсПустыеГоловыСобытий.Добавить(ПолучитьСтруктуруИзСтрокиТаблицы(СтрГрафика, ТабГрафики.Колонки));
						КонецЕсли;
					КонецЕсли;
					 
				ИначеЕсли  ВыбГрафики.ВремяНачала	 > СтрГрафика.ВремяНачала 
						 И ВыбГрафики.ВремяНачала 	 < СтрГрафика.ВремяОкончания
						 И ВыбГрафики.ВремяОкончания >= СтрГрафика.ВремяОкончания
				Тогда
					// Срезаю низ у предыдущего события.
					СтрГрафика.ВремяОкончания = ВыбГрафики.ВремяНачала;
					
				ИначеЕсли  ВыбГрафики.ВремяНачала	 > СтрГрафика.ВремяНачала 
						 И ВыбГрафики.ВремяОкончания < СтрГрафика.ВремяОкончания
				Тогда
					// Разрубаю предыдущее событие.
					СтрГрафика2 = ТабГрафики.Добавить();
					ЗаполнитьЗначенияСвойств(СтрГрафика2, СтрГрафика);
					СтрГрафика2.ВремяНачала		= ВыбГрафики.ВремяОкончания;
					СтрГрафика2.ВремяОкончания	= СтрГрафика.ВремяОкончания;
					СтрГрафика2.ОбрезокСобытияБезГоловы = Истина;
					
					СтрГрафика.ВремяОкончания	= ВыбГрафики.ВремяНачала;

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СтрГрафика = ТабГрафики.Добавить();
		ЗаполнитьЗначенияСвойств(СтрГрафика, ВыбГрафики);
		СтрГрафика.ВремяНач = СтрГрафика.ВремяНачала;
		СтрГрафика.ВремяКон = СтрГрафика.ВремяОкончания;
		Если ГрафикиСотрудников.ЭтоОбычноеРабочееВремя(СтрГрафика.ВидВремени) Тогда
			СтрГрафика.ОбрезокСобытияБезГоловы = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого СтрГрафика Из мсСтрокиГрафикаКУдалению Цикл
		ТабГрафики.Удалить(СтрГрафика);
	КонецЦикла;
	
	ТабДобавочныеСекунды = Новый ТаблицаЗначений;
	ТабДобавочныеСекунды.Колонки.Добавить("Время",Новый ОписаниеТипов("Дата"));
	ТабДобавочныеСекунды.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТабДобавочныеСекунды.Колонки.Добавить("Объект");
	ТабДобавочныеСекунды.Колонки.Добавить("ИнкрементСекунд",Новый ОписаниеТипов("Число"));
	
	Для Каждого ПустойЗаголовокСобытия Из мсПустыеГоловыСобытий Цикл
		
		мсСтр = ТабДобавочныеСекунды.НайтиСтроки(Новый Структура("Дата, Время, Объект", ПустойЗаголовокСобытия.Дата, ПустойЗаголовокСобытия.ВремяНачала, ПустойЗаголовокСобытия.Объект));
		СтрокаИнкрементСекунд = ?(мсСтр.Количество()>0,мсСтр[0],Неопределено);
		Если СтрокаИнкрементСекунд = Неопределено Тогда
			Инкремент = 1;
			СтрокаИнкрементСекунд = ТабДобавочныеСекунды.Добавить();
			СтрокаИнкрементСекунд.Время = ПустойЗаголовокСобытия.ВремяНачала;
			СтрокаИнкрементСекунд.Дата  = ПустойЗаголовокСобытия.Дата;
			СтрокаИнкрементСекунд.Объект = ПустойЗаголовокСобытия.Объект;
		Иначе
			Инкремент = СтрокаИнкрементСекунд.ИнкрементСекунд + 1;
		КонецЕсли;
		СтрокаИнкрементСекунд.ИнкрементСекунд = СтрокаИнкрементСекунд.ИнкрементСекунд + 1;
		
		СтрГрафика = ТабГрафики.Добавить();
		ЗаполнитьЗначенияСвойств(СтрГрафика, ПустойЗаголовокСобытия);
		СтрГрафика.ВремяНачала = ПустойЗаголовокСобытия.ВремяНачала + Инкремент;
		СтрГрафика.ВремяОкончания = СтрГрафика.ВремяНачала;
		СтрГрафика.ВыводитьТолькоГоловуСобытия = Истина;
		
	КонецЦикла;
	
	ТабГрафики.Сортировать("ЭтоВидРабВремя УБЫВ, ВремяНачала, ВремяОкончания УБЫВ, ДатаСоздания");
	
	Возврат ТабГрафики;
	
КонецФункции

Процедура ПодобратьВремяНулевыхРабот(ТабДокументы, ТабГрафики)
	
	ТабДобавочныеСекунды = Новый ТаблицаЗначений;
	ТабДобавочныеСекунды.Колонки.Добавить("Объект");
	ТабДобавочныеСекунды.Колонки.Добавить("ДатаВремя",Новый ОписаниеТипов("Дата"));
	ТабДобавочныеСекунды.Колонки.Добавить("ИнкрементСекунд",Новый ОписаниеТипов("Число"));
	
	// Добавить нулевые инкремены ненулевым работам.
	Для Каждого СтрДок Из ТабДокументы Цикл
		Если СтрДок.ДатаНачалаБлока <> СтрДок.ДатаОкончанияБлока Тогда
			СтрокаИнкрементСекунд = ТабДобавочныеСекунды.Добавить();
			СтрокаИнкрементСекунд.ДатаВремя = СтрДок.ДатаНачалаБлока;
			СтрокаИнкрементСекунд.Объект = ?(СтрДок.СтрокаРасписанияКлиента,СтрДок.Клиент,СтрДок.Объект);
			СтрокаИнкрементСекунд.ИнкрементСекунд = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрДок Из ТабДокументы Цикл
		Если СтрДок.ДатаНачалаБлока = СтрДок.ДатаОкончанияБлока Тогда
			мсСтр = ТабДобавочныеСекунды.НайтиСтроки(Новый Структура("ДатаВремя, Объект", СтрДок.ДатаНачалаБлока, ?(СтрДок.СтрокаРасписанияКлиента,СтрДок.Клиент,СтрДок.Объект)));
			СтрокаИнкрементСекунд = ?(мсСтр.Количество()>0,мсСтр[0],Неопределено);
			Если СтрокаИнкрементСекунд = Неопределено Тогда
				СтрокаИнкрементСекунд = ТабДобавочныеСекунды.Добавить();
				СтрокаИнкрементСекунд.ДатаВремя  = СтрДок.ДатаНачалаБлока;
				СтрокаИнкрементСекунд.Объект = ?(СтрДок.СтрокаРасписанияКлиента,СтрДок.Клиент,СтрДок.Объект);
				СтрокаИнкрементСекунд.ИнкрементСекунд = 1;
			Иначе
				СтрокаИнкрементСекунд.ИнкрементСекунд = СтрокаИнкрементСекунд.ИнкрементСекунд + 1;	
			КонецЕсли;
			СтрДок.ВремяНачала = СтрДок.ВремяНачала + СтрокаИнкрементСекунд.ИнкрементСекунд;
			СтрДок.ВремяОкончания = СтрДок.ВремяОкончания + СтрокаИнкрементСекунд.ИнкрементСекунд;
			
			// Сдвиг по времени сдвинутых строк графика.
			Если Не СтрДок.СтрокаРасписанияКлиента Тогда
				мсСтр = ТабГрафики.НайтиСтроки(Новый Структура("Дата, ВремяНачала, Объект", НачалоДня(СтрДок.ДатаНачалаБлока), ПолучитьВремяНулевойДаты(СтрДок.ДатаНачалаБлока),СтрДок.Объект));
				Для Каждого СтрГрафик Из мсСтр Цикл
					Если СтрГрафик.ВремяНачала <> СтрГрафик.ВремяНач Тогда
						Если СтрГрафик.ВремяНачала = СтрГрафик.ВремяОкончания Тогда
							СтрГрафик.ВремяОкончания = СтрГрафик.ВремяОкончания + 1;
						КонецЕсли;
						СтрГрафик.ВремяНачала = СтрГрафик.ВремяНачала + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруИзСтрокиТаблицы(СтрокаТаблицы, КолонкиТаблицы)
	
	СтруктураСтроки = Новый Структура;
	Для Каждого Колонка Из КолонкиТаблицы Цикл
		СтруктураСтроки.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
	КонецЦикла;
	
	Возврат СтруктураСтроки;
	
КонецФункции

Функция	ПолучитьТабицуДокументов(резДокументы)
	
	табДокументы = резДокументы.Выгрузить();
	табДокументы.Колонки.Добавить("ВремяНачала");
	табДокументы.Колонки.Добавить("ВремяОкончания");
	табДокументы.Колонки.Добавить("СтрокаРасписанияКлиента", Новый ОписаниеТипов("Булево"));
	
	мОбр = табДокументы.Количество() - 1;
	Для сч = 0 по мОбр Цикл
		СтрокаТаб = табДокументы[мобр-сч];
		Если Не ЗначениеЗаполнено(СтрокаТаб.ДокументСсылка) Тогда
			табДокументы.Удалить(СтрокаТаб);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка возможности наложения заявок в расписании клиента.
	
	Отбор = Новый Структура("КлиентСсылка, Дата, СтрокаРасписанияКлиента",,,Истина);
	// На случай отображения расписания клиента Если ЭтотОбъект.ПоказыватьРасписаниеКлиента Тогда...
	Если Ложь Тогда
		Кол = табДокументы.Количество();
		Для сч = 1 по Кол Цикл
			СтрДок = табДокументы[сч-1];
			Если СтрДок.КлиентСсылка = мКлиент Тогда
				
				НовДатаОкончанияБлока = Неопределено;
				
				Отбор.КлиентСсылка = мКлиент;
				Отбор.Дата	 = СтрДок.Дата;
				
				мсСтрРез = табДокументы.НайтиСтроки(Отбор);
				
				Для Каждого СтрРез Из мсСтрРез Цикл
					
					Если  СтрДок.ДатаНачалаБлока	< СтрРез.ДатаНачалаБлока 
						И СтрДок.ДатаОкончанияБлока	>= СтрРез.ДатаОкончанияБлока
					Тогда
						// Новая полностью закрывает старую, меняем новую.
						НовДатаОкончанияБлока = СтрРез.ДатаНачалаБлока;
						
						Если СтрДок.ДатаОкончанияБлока	> СтрРез.ДатаОкончанияБлока Тогда
							СтрНов = табДокументы.Добавить();
							ЗаполнитьЗначенияСвойств(СтрНов, СтрДок);
							СтрНов.СтрокаРасписанияКлиента = Истина;
							СтрНов.ДатаНачалаБлока		= СтрРез.ДатаОкончанияБлока;
							СтрНов.ДатаОкончанияБлока	= СтрДок.ДатаОкончанияБлока;
						КонецЕсли;
						
					ИначеЕсли  СтрДок.ДатаНачалаБлока	<= СтрРез.ДатаНачалаБлока 
						И СтрДок.ДатаОкончанияБлока	> СтрРез.ДатаНачалаБлока 
						И СтрДок.ДатаОкончанияБлока	<= СтрРез.ДатаОкончанияБлока
					Тогда
						// Срезаю верх у предыдущего. 
						СтрРез.ДатаНачалаБлока = СтрДок.ДатаОкончанияБлока;
						
					ИначеЕсли  СтрДок.ДатаНачалаБлока <= СтрРез.ДатаНачалаБлока 
						И СтрДок.ДатаОкончанияБлока >= СтрРез.ДатаОкончанияБлока
					Тогда
						// Онуляю предыдущее. 
						СтрРез.ДатаОкончанияБлока = СтрРез.ДатаНачалаБлока;
						
					ИначеЕсли  СтрДок.ДатаНачалаБлока > СтрРез.ДатаНачалаБлока 
						И СтрДок.ДатаНачалаБлока 	  < СтрРез.ДатаОкончанияБлока
						И СтрДок.ДатаОкончанияБлока  >= СтрРез.ДатаОкончанияБлока
					Тогда
						// Срезаю низ у предыдущего. 
						СтрРез.ДатаОкончанияБлока = СтрДок.ДатаНачалаБлока;
						
					ИначеЕсли  СтрДок.ДатаНачалаБлока	 > СтрРез.ДатаНачалаБлока 
						И СтрДок.ДатаОкончанияБлока < СтрРез.ДатаОкончанияБлока
					Тогда
						// Разрубаю предыдущее. 
						СтрРез2 = табДокументы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрРез2, СтрРез);
						СтрРез2.ДатаНачалаБлока		= СтрДок.ДатаОкончанияБлока;
						СтрРез2.ДатаОкончанияБлока	= СтрРез.ДатаОкончанияБлока;
						
						СтрРез.ДатаОкончанияБлока	= СтрДок.ДатаНачалаБлока;
						
					КонецЕсли;
				КонецЦикла;
				
				СтрРез = табДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрРез, СтрДок);
				СтрРез.СтрокаРасписанияКлиента = Истина;
				Если НовДатаОкончанияБлока <> Неопределено Тогда
					СтрРез.ДатаОкончанияБлока = НовДатаОкончанияБлока;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	мОбр = табДокументы.Количество() - 1;
	Для сч = 0 по мОбр Цикл
		СтрокаТаб = табДокументы[мобр-сч];
		СтрокаТаб.ВремяНачала	 = ПолучитьВремяНулевойДаты(СтрокаТаб.ДатаНачалаБлока);
		СтрокаТаб.ВремяОкончания = ПолучитьВремяНулевойДаты(СтрокаТаб.ДатаОкончанияБлока);
	КонецЦикла;
	
	Возврат табДокументы;
	
КонецФункции

Функция ПолучитьТаблицуСобытий(ВыбГрафики)
	ТабГрафики = Новый ТаблицаЗначений;
	ТабГрафики.Колонки.Добавить("ВидВремени");
	ТабГрафики.Колонки.Добавить("ИдентификаторСобытия");
	ТабГрафики.Колонки.Добавить("ПредставлениеСобытия");
	ВыбГрафики.Сбросить();
	Пока ВыбГрафики.Следующий() Цикл
		
		ПредставлениеСобытия = СокрЛП(ВыбГрафики.НазваниеСобытия + " " + ВыбГрафики.КомментарийСобытия);
		Если Не ПустаяСтрока(ПредставлениеСобытия) Тогда
			НоваяСтрока = ТабГрафики.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбГрафики);
			НоваяСтрока.ПредставлениеСобытия = ПредставлениеСобытия;
		КонецЕсли;
	КонецЦикла;
	
	ТабГрафики.Свернуть("ВидВремени,ИдентификаторСобытия,ПредставлениеСобытия");
	ТабГрафики.Индексы.Добавить("ИдентификаторСобытия");
	
	Возврат ТабГрафики;
КонецФункции

// Вывод названий видов времени и Обработка расшифровок ячеек после формирования табличного документа.
Процедура ВыполнитьФинальнуюОбработкуЯчеекКалендаря(ДокументРезультат, ТабСобытий, ПовторяющиесяРасшифровкиСвободногоВремени)
	
	Если мСтруктураВизуальныхНастроек.ОтображатьВидВремениГрафикаВЯчейке Тогда	
		
		ВидВремениПростоеРабочееВремя = Справочники.ВидыВремениГрафика.РабочееВремя;
		Для Каждого ДанныеРасшифровки Из ПовторяющиесяРасшифровкиСвободногоВремени Цикл
			
			ДанныеСобытия = ТабСобытий.Найти(ДанныеРасшифровки.Значение.ИдентификаторСобытия,"ИдентификаторСобытия");
			Если ДанныеСобытия <> Неопределено Тогда
				
				НазваниеСобытия	= ДанныеСобытия.ПредставлениеСобытия;
				
				Если ЗначениеЗаполнено(ДанныеСобытия.ВидВремени)
					И ДанныеСобытия.ВидВремени <> ВидВремениПростоеРабочееВремя
					И Не ПустаяСтрока(НазваниеСобытия)
				Тогда
					ДанныеРасшифровки.Значение.Вставить("НазваниеСобытия", НазваниеСобытия);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьВремяНачалаОбъекта(Дата, Объект, ВремяНачала)
	
	мсСтрокиНульДиапазонов = мТабНульДиапазоныВремени.НайтиСтроки(Новый Структура("Время", НачалоМинуты(ВремяНачала)));
	Если мсСтрокиНульДиапазонов.Количество() = 0 Тогда
		Возврат ВремяНачала;
	Иначе
		ВремяМакс = ВремяНачала;
		Для Каждого СтрокаНульДиапазона Из мсСтрокиНульДиапазонов Цикл
			Если СтрокаНульДиапазона.ВремяДобавочное > ВремяМакс Тогда
				ВремяМакс = СтрокаНульДиапазона.ВремяДобавочное;
			КонецЕсли;
		КонецЦикла;
		
		мсНульСтрокиОбъекта = мТабНульСтрокиВремени.НайтиСтроки(Новый Структура("Дата, Объект, Время", Дата, Объект, НачалоМинуты(ВремяНачала)));
		
		Для Каждого НульСтрокаОбъекта Из мсНульСтрокиОбъекта Цикл
			Если  НульСтрокаОбъекта.ВремяДобавочное <= ВремяМакс 
				И НульСтрокаОбъекта.ВремяДобавочное > ВремяНачала
			Тогда
				ВремяМакс = НульСтрокаОбъекта.ВремяДобавочное-1;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ВремяМакс;
		
	КонецЕсли;
	
	Возврат ВремяНачала;
	
КонецФункции

Функция ПолучитьВремяКонцаОбъекта(Знач ВремяОкончания)
	
	Если ВремяОкончания = НачалоМинуты(ВремяОкончания) Тогда
		ВремяМакс = ВремяОкончания;
		
		Для Каждого СтрокаДиапазона Из мТабНульДиапазоныВремени Цикл
			Если  НачалоМинуты(СтрокаДиапазона.Время) = ВремяОкончания Тогда
				ВремяМакс = Макс(ВремяМакс, СтрокаДиапазона.ВремяДобавочное);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат ВремяОкончания;
	КонецЕсли;
	
	Возврат ВремяМакс;
	
КонецФункции

Функция СформироватьДанныеПриемовЗаявок(ВозвращаемыеДанныеЗаявок)
	
	// Чтобы не передавать повторно набор ссылок на заявки, но при этом не создавать в соответствии ДанныеЗаявок
	// переменный тип значения либо избыточный - структура 1) только с клиентом. или 2) клиент, массив приёмов и врачей,
	// в качестве ключа у ДанныеПриемовЗаявок применяется индекс заявки в соответствии ДанныеЗаявок.
	ДанныеПриемовЗаявок = Новый Соответствие;
	
	Заявки = Новый Массив;
	Для Каждого КлючЗначениеЗаявка Из ВозвращаемыеДанныеЗаявок Цикл
		Заявки.Добавить(КлючЗначениеЗаявка.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Прием.Ссылка КАК Ссылка,
	|	Прием.Дата КАК Дата,
	|	Прием.Врач КАК Врач,
	|	Прием.ДокументОснование КАК Заявка
	|ИЗ
	|	Документ.Прием КАК Прием
	|ГДЕ
	|	НЕ Прием.ПометкаУдаления
	|	И Прием.ДокументОснование В(&Заявки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Прием.Проведен УБЫВ
	|ИТОГИ ПО
	|	Заявка"
	;
	ВедетсяРаботаСГрупповымиЗаявками = РаботаСКлиентамиПереопределяемый.ЕстьФункционалГрупповойЗаписи() И мУчетнаяПолитика.ИспользоватьГрупповыеПосещения;
	Если ВедетсяРаботаСГрупповымиЗаявками Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ Прием.Клиент,");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заявки",Заявки);
	
	ВыборкаЗаявки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаявки.Следующий() Цикл
		
		Выборка = ВыборкаЗаявки.Выбрать();
		
		ДанныеПриемовЗаявки = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Если ВедетсяРаботаСГрупповымиЗаявками Тогда
				ДанныеПриемовЗаявки.Добавить(Новый Структура("Прием, Врач, Дата, Клиент", Выборка.Ссылка, Выборка.Врач, Выборка.Дата, Выборка.Клиент));
			Иначе
				ДанныеПриемовЗаявки.Добавить(Новый Структура("Прием, Врач, Дата", Выборка.Ссылка, Выборка.Врач, Выборка.Дата));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПриемовЗаявок.Вставить(ВыборкаЗаявки.Заявка, ДанныеПриемовЗаявки);
		
	КонецЦикла;
	
	Если ДанныеПриемовЗаявок.Количество() > 0 Тогда
		Возврат ДанныеПриемовЗаявок;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Процедура СформироватьКэшПризнаковПоЗаявкам(мКлиенты, мЗаявки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если (мСтруктураВизуальныхНастроек.РассчитываемыеПризнаки.Количество() + мСтруктураВизуальныхНастроек.ХранимыеПризнаки.Количество()) > 0 Тогда
		
		мКлиентыЗаявки = Новый Массив;
		мКлиентыЗаявки.Добавить(мКлиенты);
		мКлиентыЗаявки.Добавить(мЗаявки);
		ТаблицаРассчитываемыхПризнаков = ВычислитьДополнительныеПризнакиОбъектовВычисляемыеОнлайн(мКлиентыЗаявки);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РассчитываемыеПризнаки.Объект КАК КлючевойОбъект,
		               |	РассчитываемыеПризнаки.ЯчейкаКалендаря КАК Признак,
		               |	РассчитываемыеПризнаки.Значение,
		               |	РассчитываемыеПризнаки.ЗначениеХранилище
		               |ПОМЕСТИТЬ РассчитываемыеПризнаки
		               |ИЗ
		               |	&РассчитываемыеПризнаки КАК РассчитываемыеПризнаки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПризнакиКлючевыхОбъектов.КлючевойОбъект КАК Объект,
		               |	ПризнакиКлючевыхОбъектов.Признак КАК Признак,
		               |	ПризнакиКлючевыхОбъектов.ЗначениеПризнака КАК Значение,
		               |	ПризнакиКлючевыхОбъектов.ЗначениеПризнакаХранилище КАК ЗначениеХранилище
		               |ИЗ
		               |	РегистрСведений.ПризнакиКлючевыхОбъектов КАК ПризнакиКлючевыхОбъектов
		               |ГДЕ
		               |	ПризнакиКлючевыхОбъектов.Признак В(&ХранимыеПризнаки)
		               |	И (ПризнакиКлючевыхОбъектов.КлючевойОбъект В (&Клиенты)
		               |			ИЛИ ПризнакиКлючевыхОбъектов.КлючевойОбъект В (&Заявки))
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РассчитываемыеПризнаки.КлючевойОбъект,
		               |	РассчитываемыеПризнаки.Признак,
		               |	РассчитываемыеПризнаки.Значение,
		               |	РассчитываемыеПризнаки.ЗначениеХранилище
		               |ИЗ
		               |	РассчитываемыеПризнаки КАК РассчитываемыеПризнаки
		               |";
		
		Запрос.УстановитьПараметр("Клиенты", мКлиенты);
		Запрос.УстановитьПараметр("Заявки", мЗаявки);
		Запрос.УстановитьПараметр("ХранимыеПризнаки", мСтруктураВизуальныхНастроек.ХранимыеПризнаки);
		
		Запрос.УстановитьПараметр("РассчитываемыеПризнаки", ТаблицаРассчитываемыхПризнаков);
		КэшЗаявкиИПризнаки = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	Если мСтруктураВизуальныхНастроек.ПризнакиДопСвойств.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗначенияСвойствОбъектов.Объект КАК Объект,
		               |	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
		               |	ЗначенияСвойствОбъектов.Значение КАК Значение
		               |ИЗ
		               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		               |ГДЕ
		               |	ЗначенияСвойствОбъектов.Свойство В(&Свойства)
		               |	И (ЗначенияСвойствОбъектов.Свойство.НазначениеСвойства = &НазначениеКлиент
		               |				И ЗначенияСвойствОбъектов.Объект В (&Клиенты)
		               |		ИЛИ ЗначенияСвойствОбъектов.Свойство.НазначениеСвойства = &НазначениеЗаявка
		               |				И ЗначенияСвойствОбъектов.Объект В (&Заявки))
		               |";
		
		Запрос.УстановитьПараметр("Клиенты", мКлиенты);
		Запрос.УстановитьПараметр("Заявки", мЗаявки);
		Запрос.УстановитьПараметр("Свойства", мСтруктураВизуальныхНастроек.ПризнакиДопСвойств);
		Запрос.УстановитьПараметр("НазначениеЗаявка", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_Заявка);
		Запрос.УстановитьПараметр("НазначениеКлиент", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Клиенты);

		КэшЗаявкиИДопСвойства = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВычислитьДополнительныеПризнакиОбъектовВычисляемыеОнлайн(мКлиентыЗаявки)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Объект", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.НовыйМассив(ТипКлиент, ТипЗаявка)));
	Результат.Колонки.Добавить("ЯчейкаКалендаря", Новый ОписаниеТипов("СправочникСсылка.ЯчейкиКалендаря"));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеХранилище", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	КешМакетовСКД = Новый Структура;
	
	Для Каждого ЯчейкаКалендаря Из мСтруктураВизуальныхНастроек.РассчитываемыеПризнаки Цикл
		
		ФорматУсловия = ЯчейкаКалендаря.ФорматУсловия;
		
		Если ЯчейкаКалендаря.ВидПризнака = 0 Тогда
			// Тип владельца - СправочникСсылка.Клиенты.
			ОбъектыКалендаря = мКлиентыЗаявки[0];
		Иначе
			// Тип владельца - ДокументСсылка.Заявка.
			ОбъектыКалендаря = мКлиентыЗаявки[1];
		КонецЕсли;
		
		Если ФорматУсловия = 0 Тогда // Алгоритм на встроенном языке 1С.
			
			Отчеты.КалендарьПланирования.РассчитатьЯчейкуПроизвольногоАлгоритма(Результат, ЯчейкаКалендаря, ОбъектыКалендаря);
			
		ИначеЕсли ФорматУсловия = 1 Тогда // Отбор СКД.

			МассивДанныхОнлайнРасчета = Новый Массив;
			МассивОбъектов = Новый Массив;
			Для Каждого Объект Из ОбъектыКалендаря Цикл
					
				Если ТипЗнч(Объект) = ТипЗаявка И ЯчейкаКалендаря.ВидПризнака = 1 Тогда
				    ДанныеОнлайнРасчета = мКэшДанныхЗаявокОнлайн.Найти(Объект, "Заявка");
				ИначеЕсли ТипЗнч(Объект) = ТипКлиент И ЯчейкаКалендаря.ВидПризнака = 0 Тогда
					ДанныеОнлайнРасчета = мКэшДанныхКлиентов.Найти(Объект, "Клиент");
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ДанныеОнлайнРасчета <> Неопределено Тогда
					МассивДанныхОнлайнРасчета.Добавить(ДанныеОнлайнРасчета);
					МассивОбъектов.Добавить(Объект);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
			Значения = РаботаСПризнакамиСервер.РассчитатьПризнакПоОтборамСКД(ЯчейкаКалендаря.Отборы, ЯчейкаКалендаря.ЗначениеПоУмолчанию, МассивОбъектов, МассивДанныхОнлайнРасчета, мКэшДопСвойствЗаявок, КешМакетовСКД);
			Для Каждого ЭлементЗначения Из Значения Цикл
				
				Значение = ЭлементЗначения.РезультатРасчета;
				Объект = ЭлементЗначения.Объект;
				
				СтрокаТаблицы = Результат.Добавить();
				СтрокаТаблицы.Объект = Объект;
				СтрокаТаблицы.ЯчейкаКалендаря = ЯчейкаКалендаря;
				
				ТипЗначения = ТипЗнч(Значение);
				
				Если 	(ЯчейкаКалендаря.ТипПризнака = 1 И ТипЗначения = ТипЦвет) // Ожидаем цвет
					Или (ЯчейкаКалендаря.ТипПризнака = 2 И (ТипЗначения = ТипДвоичныеДанные Или ТипЗначения = ТипКартинка))
				Тогда
					СтрокаТаблицы.ЗначениеХранилище = Новый ХранилищеЗначения(Значение);
				Иначе
					СтрокаТаблицы.Значение = Строка(Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДозаполнитьЗначенияЯчеек(ТекстовыеДанныеЯчейки, Знач Клиент, ВыбРаботыБлока, ВозвращатьУслуга)
	
	// Текст основной ячейки
	Если ВозвращатьУслуга Тогда
		// Данные клиента и услуг выводятся вместе в ячейку заявки.
		РассчитатьЗначенияПолейЯчеек(ТекстовыеДанныеЯчейки.ТекстОсновнойЯчейки, Клиент, "ПоследовательностьОтображенияОсновнойЯчейки", ВыбРаботыБлока, Истина, ВозвращатьУслуга);
	Иначе
		// Текст ячейки клиента в режиме, когда данные клиента и услуг выводятся раздельно в 2 ячейки. См. КлиентИУслугиРаздельно().
		РассчитатьЗначенияПолейЯчеек(ТекстовыеДанныеЯчейки.ТекстОсновнойЯчейки, Клиент, "ПоследовательностьОтображенияОсновнойЯчейкиКлиент", ВыбРаботыБлока, Истина, ВозвращатьУслуга);
	КонецЕсли;
	
	// Примечание основной ячейки
	Если мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияПримечанияОсновнойЯчейки.Количество() <> 0 Тогда
		РассчитатьЗначенияПолейЯчеек(ТекстовыеДанныеЯчейки.ПримечаниеОсновнойЯчейки, Клиент, "ПоследовательностьОтображенияПримечанияОсновнойЯчейки", ВыбРаботыБлока, Истина, Истина);
	КонецЕсли;
	
	// Текст дополнительной ячейки
	Если мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияДопЯчейки.Количество() <> 0 Тогда
		РассчитатьЗначенияПолейЯчеек(ТекстовыеДанныеЯчейки.ТекстДопЯчейки, Клиент, "ПоследовательностьОтображенияДопЯчейки", ВыбРаботыБлока, Истина, Истина);
	КонецЕсли;
	
	// Примечание дополнительной ячейки
	Если мСтруктураВизуальныхНастроек.ПоследовательностьОтображенияПримечанияДопЯчейки.Количество() <> 0 Тогда
		РассчитатьЗначенияПолейЯчеек(ТекстовыеДанныеЯчейки.ПримечаниеДопЯчейки,Клиент, "ПоследовательностьОтображенияПримечанияДопЯчейки", ВыбРаботыБлока, Истина, Истина);
	КонецЕсли;
	
	ВыбРаботыБлока.Сбросить();
	ВыбРаботыБлока.Следующий();
	
КонецПроцедуры

Процедура РассчитатьЗначенияПолейЯчеек(Приемник, Клиент, ИмяПоследовательностиОтображения, Знач ВыбРаботыБлока, ВозвращатьКлиент, ВозвращатьУслуга);
	
	РезультатнаяСтрока = ?(ЗначениеЗаполнено(Приемник), Приемник, "");
	ВыбраннаяПоследовательностьОтображения = мСтруктураВизуальныхНастроек[ИмяПоследовательностиОтображения];
	УслугиЗаписаны = Ложь;
	//ЯчейкиКалендаря = Справочники.ЯчейкиКалендаря;
	флУслугиВыведены = Ложь;
	
	ВыбРаботыБлока.Сбросить();
	ВыбРаботыБлока.Следующий();
	
	ОтборыПоискаЗначенийДопПризнаков = Новый Массив;
	ОтборыПоискаЗначенийДопПризнаков.Добавить(Новый Структура("Объект, Признак", Клиент));
	ОтборыПоискаЗначенийДопПризнаков.Добавить(Новый Структура("Объект, Признак", ВыбРаботыБлока.ДокументСсылка));
	
	ОтборыПоискаЗначенийДопСвойств = Новый Массив;
	ОтборыПоискаЗначенийДопСвойств.Добавить(Новый Структура("Объект, Свойство", ВыбРаботыБлока.ДокументСсылка));
	ОтборыПоискаЗначенийДопСвойств.Добавить(Новый Структура("Объект, Свойство", Клиент));
	
	ПараметрыТекстаКлиента = Новый Структура("ДанныеКлиента, Ячейка, ВыборкаРаботыБлока, СтруктураВизуальныхНастроек");
	
	ОтборКлиент = Новый Структура("Клиент");
	
	ЯчейкиУслуг = ?(ВозвращатьУслуга,мЯчейкиУслуг[ИмяПоследовательностиОтображения],Новый Массив);
	АктуальныеЯчейки = Новый Массив;
	
	Для Каждого СтрокаНастройки Из ВыбраннаяПоследовательностьОтображения Цикл
		
		Значение = "";
		
		Если СтрокаНастройки.Предопределенный
			И ПустаяСтрока(Приемник) // Учтем, что не должно быть дублирования при заполнении предопределенных признаков по Заявке и Клиенту
		Тогда
			// Вывод всех данны по номенклатуре.
			Если СтрокаНастройки.ЯчейкаРодительИмяПредопределенного = "Услуга"
				И СтрокаНастройки.ЯчейкаИмяПредопределенного <> "ВремяБлока"
				И СтрокаНастройки.ЯчейкаИмяПредопределенного <> "Сотрудник"
				И СтрокаНастройки.ЯчейкаИмяПредопределенного <> "Кабинет"
			Тогда
				Если Не флУслугиВыведены Тогда
					ВыбРаботыБлока.Сбросить();
					Пока ВыбРаботыБлока.Следующий() Цикл
						ЗначениеТекУслуги = "";
						Отбор = Новый Структура("Ссылка",ВыбРаботыБлока.Работа);
						Строки = мКэшДанныхНоменклатуры.НайтиСтроки(Отбор);
						Если Строки.Количество() <> 0 Тогда
							ДанныеУслуги = Строки[0];
							
							Для Каждого ЯчейкаУслуги Из ЯчейкиУслуг Цикл
								Если ЯчейкаУслуги.ЯчейкаИмяПредопределенного = "НаименованиеУслуги" Тогда
									ЗначениеТекУслуги	= ЗначениеТекУслуги + РазделительТекстаЯчейки(ЗначениеТекУслуги, ЯчейкаУслуги.ВТойЖеСтроке)
									+ СокрЛП(ДанныеУслуги.Наименование);
									
								ИначеЕсли ЯчейкаУслуги.ЯчейкаИмяПредопределенного = "АртикулУслуги" Тогда
									Артикул = ДанныеУслуги.Артикул;
									Если ЗначениеЗаполнено(Артикул) Тогда
										ЗначениеТекУслуги = ЗначениеТекУслуги + РазделительТекстаЯчейки(ЗначениеТекУслуги, ЯчейкаУслуги.ВТойЖеСтроке)
										+ СокрЛП(Артикул);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если ЗначениеЗаполнено(ЗначениеТекУслуги) Тогда
							Значение = Значение + ?(ЗначениеЗаполнено(Значение), Символы.ПС,"") + ЗначениеТекУслуги;
						КонецЕсли;
					КонецЦикла;
					флУслугиВыведены = Истина;
				КонецЕсли;
			Иначе
				ОтборКлиент.Клиент = Клиент;
				Строки = мКэшДанныхКлиентов.НайтиСтроки(ОтборКлиент);
				Если Строки.Количество() > 0 Тогда
					
					ДанныеКлиента = Строки[0];
					
					СтандартнаяОбработка = Истина;
					Если мСтруктураВизуальныхНастроек.ЕстьПереопределяемоеФормированиеПодстрокиЯчейкиКлиента Тогда
						// Формирование текста описания клиента в ячейке, индивидуального для конфигурации
						ПараметрыТекстаКлиента.ДанныеКлиента				 = ДанныеКлиента;
						ПараметрыТекстаКлиента.Ячейка						 = СтрокаНастройки.Ячейка;
						ПараметрыТекстаКлиента.ВыборкаРаботыБлока			 = ВыбРаботыБлока;
						ПараметрыТекстаКлиента.СтруктураВизуальныхНастроек	 = мСтруктураВизуальныхНастроек;
						Значение = РаботаСКлиентамиПереопределяемый.ЖурналЗаписиСформироватьПодстрокуЯчейкиКлиента(ПараметрыТекстаКлиента, СтандартнаяОбработка);
					КонецЕсли;
					
					Если СтандартнаяОбработка Тогда
						Если СтрокаНастройки.ЯчейкаИмяПредопределенного = "НаименованиеКлиента" Тогда
							Значение = СокрЛП(ДанныеКлиента.Наименование);
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ФамилияИОКлиента" Тогда
							Значение = ОбщегоНазначения.ФамилияИнициалыФизЛица(,ДанныеКлиента.Фамилия, ДанныеКлиента.Имя, ДанныеКлиента.Отчество);
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ФамилияКлиента" Тогда
							Значение = СокрЛП(ДанныеКлиента.Фамилия);
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ГодРождения" Тогда
							Если ЗначениеЗаполнено(ДанныеКлиента.ДатаРождения) Тогда
								Значение = Формат(Год(ДанныеКлиента.ДатаРождения),"ЧГ=") + "г.р.";
							КонецЕсли;
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "КраткийКомментарийКлиента" Тогда
							Если ЗначениеЗаполнено(ДанныеКлиента.КраткийКомментарий) Тогда
								Значение = ДанныеКлиента.КраткийКомментарий;
							КонецЕсли;
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ТелефонКлиента" Тогда
							Если мКэшДопИнформацииКлиентов[Клиент]<>Неопределено Тогда
								Телефон = Неопределено;
								Если Не мКэшДопИнформацииКлиентов[Клиент].Свойство("СотовыйТелефон",Телефон) Тогда
									мКэшДопИнформацииКлиентов[Клиент].Свойство("Телефон",Телефон);
								КонецЕсли;
								Если ЗначениеЗаполнено(Телефон) Тогда
									Значение = Телефон;
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ВремяБлока" И ВозвращатьУслуга Тогда
							ВыбРаботыБлока.Сбросить();
							ДатаНачалаБлока = Дата(1,1,1);
							ВыбРаботыБлока.Следующий();
							ДатаНачалаБлока = ВыбРаботыБлока.ДатаНачалаБлока;
							ДатаОкончанияБлока = ВыбРаботыБлока.ДатаОкончанияБлока;	
							Пока ВыбРаботыБлока.Следующий() Цикл
								ДатаОкончанияБлока = ВыбРаботыБлока.ДатаОкончанияБлока;	
							КонецЦикла;
							
							Значение = "с " + Формат(ДатаНачалаБлока,"ДФ=H:mm") + " до " + Формат(ПолучитьВремяНулевойДаты(ДатаОкончанияБлока),"ДФ=H:mm; ДП=24:00");
						
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "Сотрудник" Тогда
							
							ВыбРаботыБлока.Сбросить();
							ВыбРаботыБлока.Следующий();
							
							Если ТипЗнч(ВыбРаботыБлока.Объект) = ТипОборудование Тогда
								Значение = ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыбРаботыБлока.СотрудникПредставление);
							КонецЕсли;
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "Кабинет" Тогда
							
							ВыбРаботыБлока.Сбросить();
							ВыбРаботыБлока.Следующий();
							
							Если ТипЗнч(ВыбРаботыБлока.Объект) = ТипСотрудники Тогда
								Значение = ВыбРаботыБлока.Кабинет;
							КонецЕсли;
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ДопОписаниеКлиента" Тогда
								Значение = ДанныеКлиента.Комментарий;
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ПримечаниеЗаявки" Тогда
							ВыбРаботыБлока.Сбросить();
							ВыбРаботыБлока.Следующий();
							Значение = ВыбРаботыБлока.Примечание;
							
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "ДолгКлиентаСумма" Тогда
							Если ЗначениеЗаполнено(ДанныеКлиента.СуммаДолга) Тогда
								Значение = "Долг " + Формат(ДанныеКлиента.СуммаДолга, "") + " " + мКраткоеНаименованиеОсновнойВалюты;
							КонецЕсли;
						
						ИначеЕсли СтрокаНастройки.ЯчейкаИмяПредопределенного = "МедКартаНомер" Тогда
							ОтборКлиент.Клиент = Клиент;
							Строки = мКэшМедкарт.НайтиСтроки(ОтборКлиент);
							Если Строки.Количество() <> 0 Тогда
								Значение = "№ ";
								Для Каждого Элемент Из Строки Цикл
									Значение = Значение + Элемент.КартаНаименование;
								КонецЦикла;
							Иначе
								Значение = "";
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаНастройки.Свойство) Тогда
				// Дополнительное свойство объекта.
				ОтборыПоискаЗначенийДопСвойств[0].Свойство = СтрокаНастройки.Свойство;
				ОтборыПоискаЗначенийДопСвойств[1].Свойство = СтрокаНастройки.Свойство;

				Для Каждого ОтборЗначения Из ОтборыПоискаЗначенийДопСвойств Цикл
					КэшЗаявкиИДопСвойства.Сбросить();
					Если КэшЗаявкиИДопСвойства.НайтиСледующий(ОтборЗначения) Тогда
						Значение = ПривестиЗначениеКСтрокеВыводаВЯчейку(КэшЗаявкиИДопСвойства.Значение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Вычисляемая доп. информация объекта (признак).
				ОтборыПоискаЗначенийДопПризнаков[0].Признак = СтрокаНастройки.Ячейка;
				ОтборыПоискаЗначенийДопПризнаков[1].Признак = СтрокаНастройки.Ячейка;
				Для Каждого ОтборЗначения Из ОтборыПоискаЗначенийДопПризнаков Цикл
					КэшЗаявкиИПризнаки.Сбросить();
					Если КэшЗаявкиИПризнаки.НайтиСледующий(ОтборЗначения) Тогда
						Значение = ПривестиЗначениеКСтрокеВыводаВЯчейку(КэшЗаявкиИПризнаки.Значение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		// Собираем итоговую строку
		Если ЗначениеЗаполнено(Значение) Тогда
			РезультатнаяСтрока = РезультатнаяСтрока + РазделительТекстаЯчейки(РезультатнаяСтрока, СтрокаНастройки.ВТойЖеСтроке) + СокрЛП(Значение);
		КонецЕсли;
	КонецЦикла;
	Приемник = Строка(РезультатнаяСтрока);
КонецПроцедуры

Функция ПривестиЗначениеКСтрокеВыводаВЯчейку(Значение)
	
	ЗначениеСтрока = "";
	
	Если ТипЗнч(Значение) = ТипДата Тогда
		Если Значение = НачалоДня(Значение) Тогда
			ЗначениеСтрока = Формат(Значение, "ДЛФ=D");
		Иначе
			ЗначениеСтрока = Формат(Значение, "ДФ='dd.MM.yyyy HH:mm'");
		КонецЕсли;
	Иначе
		ЗначениеСтрока = Строка(Значение);
	КонецЕсли;
	
	Возврат ЗначениеСтрока;
	
КонецФункции

#Область ВыводКартинок // Служебные процедуры для вывода картинок в журнал записи.

Процедура ВывестиКартинкиВЯчейку(ДокументРезультат, ОбластьВывода, ПоследовательностьОтображенияКартинок, Клиент, Заявка)
	
	МассивКартинок = Новый Массив;
	
	ОтборПоискаЗначенияКлиент = Новый Структура("Объект, Признак", Клиент);
	ОтборПоискаЗначенияЗаявка = Новый Структура("Объект, Признак", Заявка);
	
	Для Каждого СтрокаНастройки Из ПоследовательностьОтображенияКартинок Цикл
		
		ОтборЗначения = ?(СтрокаНастройки.ЭтоКлиент, ОтборПоискаЗначенияКлиент, ОтборПоискаЗначенияЗаявка);
		ОтборЗначения.Признак = СтрокаНастройки.Ячейка;
	
		КэшЗаявкиИПризнаки.Сбросить();
		Если КэшЗаявкиИПризнаки.НайтиСледующий(ОтборЗначения) Тогда
			ДанныеКартинки = КэшЗаявкиИПризнаки.ЗначениеХранилище.Получить();
			Если ТипЗнч(ДанныеКартинки) = ТипДвоичныеДанные Тогда
				МассивКартинок.Добавить(Новый Картинка(ДанныеКартинки, Истина));
			ИначеЕсли ТипЗнч(ДанныеКартинки) = ТипКартинка Тогда
				МассивКартинок.Добавить(ДанныеКартинки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКартинок = МассивКартинок.Количество();
	
	Если КоличествоКартинок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПробелыКТекстуЯчейки(ОбластьВывода, ДокументРезультат, КоличествоКартинок);
	
	КонецПредыдущейКартинки = 0;
	Для Каждого Картинка Из МассивКартинок Цикл
		ВыводОчереднойКартинки(ДокументРезультат, Картинка, ОбластьВывода, КонецПредыдущейКартинки);
		КонецПредыдущейКартинки = КонецПредыдущейКартинки + ШиринаКартинки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыводОчереднойКартинки(ДокументРезультат, Картинка, ОбластьТД, КонецПредыдущейКартинки)
	
	Рисунок = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Картинка = Картинка;
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСнизу = Ложь;
	Рисунок.ГраницаСлева = Ложь;
	Рисунок.ГраницаСправа = Ложь;
	Рисунок.Расположить(ОбластьТД);
	Если КонецПредыдущейКартинки > 0 Тогда
		ОтступыКартинок.Вставить(Рисунок.Имя, КонецПредыдущейКартинки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПробелыКТекстуЯчейки(ОбластьТД, ДокументРезультат, КоличествоКартинок)
	
	Если КэшКоличествоПробеловДляКартинок.Получить(КоличествоКартинок) = Неопределено Тогда
		КэшКоличествоПробеловДляКартинок.Вставить(КоличествоКартинок, РасчитатьКоличествоПробеловДляКартинки(ОбластьТД, ДокументРезультат, КоличествоКартинок));
	КонецЕсли;
	ОбластьТД.Текст = Лев("         ", КэшКоличествоПробеловДляКартинок.Получить(КоличествоКартинок)) + ОбластьТД.Текст;
	
КонецПроцедуры

Функция РасчитатьКоличествоПробеловДляКартинки(ОбластьТД, ДокументРезультат, КоличествоКартинок)
	
	ВремТабДок = Новый ТабличныйДокумент;
	ВремТабДок.Вывести(ПолучитьМакет("СеткиКолонкиЖурналаЗаписи").ПолучитьОбласть("Колонки1"));
	ВремОбласть = ВремТабДок.Область(1,1);
	ВремОбласть.Шрифт = ОбластьТД.Шрифт;
	
	// 82 / 152 сред. символов шрифта ≈ 1 мм
	ВремОбласть.ШиринаКолонки = КоличествоКартинок * (ШиринаКартинки * 82 / 152);
	
	ВремОбласть.АвтоВысотаСтроки = Истина;
	ВремОбласть.ВысотаСтроки = 0;
	
	ВремОбласть.Текст = " ";
	КоличествоПробелов = 1;
	
	ВысотаДо = ВысотаОбластиВмм(ВремОбласть, ВремТабДок);
	Пока ВысотаОбластиВмм(ВремОбласть, ВремТабДок) = ВысотаДо Цикл
		ВремОбласть.Текст = ВремОбласть.Текст + " ";
		КоличествоПробелов = КоличествоПробелов + 1;		
		Если КоличествоПробелов > 20 Тогда
			Возврат КоличествоПробелов;	
		КонецЕсли;		
	КонецЦикла;
	Возврат КоличествоПробелов;
	
КонецФункции

Функция ВысотаОбластиВмм(Область, ТабДок)
	
	Надпись = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	Надпись.Расположить(Область);
	ТабДок.Рисунки.Удалить(Надпись);
	Возврат(Надпись.Высота);
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьТаблицуКомментариевДня()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомментарииДня.Период КАК Период,
		|	КомментарииДня.Сотрудник КАК Сотрудник,
		|	КомментарииДня.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.КомментарииДня КАК КомментарииДня
		|ГДЕ
		|	КомментарииДня.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ДатаНачала));
	КомментарииДня = Запрос.Выполнить().Выгрузить();	
	
КонецПроцедуры

мРежимыФормирования = Новый Структура;
мРежимыФормирования.Вставить("День"	 ,1);
мРежимыФормирования.Вставить("Период",2);

#КонецОбласти
