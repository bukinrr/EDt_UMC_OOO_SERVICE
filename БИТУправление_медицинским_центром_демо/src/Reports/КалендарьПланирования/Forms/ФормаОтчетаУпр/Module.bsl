&НаКлиенте
Перем ИдётОткрытиеОтчета;

&НаКлиенте
Перем ТекущаяСтрокаДереваОтбора;

&НаКлиенте
Перем мДанныеЗаявок;

&НаКлиенте
Перем мДанныеПриемовЗаявок;

&НаКлиенте
Перем мПовторяющиесяРасшифровкиСвободногоВремени;

&НаКлиенте
Перем мРасшифровкиСтрок;

&НаКлиенте
Перем мРасшифровкиКолонок;

&НаКлиенте
Перем мКлиентВзятИзДанныхЗаявки Экспорт; // Если поле Клиент заполнено из Заявки занятого времени, про при активизации свободной области поле клиента будет очищено. В ином случае - останется заполнено, чтобы клиент попал в новый документ записи.

&НаКлиенте
Перем мВыделенныйДиапазонЯчеекЖЗ;

&НаКлиенте
Перем АвтоОбновлениеЗадачНапоминанийЗапущено;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
	мУчетнаяПолитика.Вставить("ИспользуетсяОбменССайтом", ВебИнтеграция.ЕстьНастройкиОбменаССайтом());
	мУчетнаяПолитика.Вставить("ИспользоватьОбменДанными", Константы.ИспользоватьОбменДанными.Получить() И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ОшибкиОбменовДанными));
	
	ВысотаЗаголовка = мУчетнаяПолитика.ВысотаСтрокиЖурналаЗаписи;
	Если ВысотаЗаголовка = 0 Тогда
		ВысотаЗаголовка = 14;
	КонецЕсли;
	
	ДанныеХранилищаФормы = Новый Структура;
	мАдресХранилищаФормы = ПоместитьВоВременноеХранилище(ДанныеХранилищаФормы,ЭтаФорма.УникальныйИдентификатор);
	мРежимыФормирования = РеквизитФормыВЗначение("Отчет").мРежимыФормирования;
	
	ЕстьПравоДоступаПриемВрача = ОбщегоНазначения.ЕстьПравоДоступа("Добавление", Метаданные.Документы.Прием);
	ЕстьПравоСоставленияГрафиковРаботы = 
		ОбщегоНазначения.ЕстьПравоДоступа("ИнтерактивноеИзменениеПроведенных", Метаданные.Документы.УстановкаГрафиковРаботы);
		
	СоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи = 
		УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(,"СоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи");
		
	ПараметрыОтчета = ВосстановитьПараметрыОтчета();
	Если ПараметрыОтчета <> Неопределено Тогда
		
		Отчет.ДатаНачала = ?(ПараметрыОтчета.Свойство("ДатаНачала"), ПараметрыОтчета.ДатаНачала, НачалоДня(ТекущаяДата()));
		ДлинаПериода			= ПараметрыОтчета.ДлинаПериода;
		Отчет.ДатаОкончания		= Отчет.ДатаНачала + (ДлинаПериода - 1) * 86400;
		Отчет.РежимФормирования = ?(ПараметрыОтчета.Свойство("РежимФормирования"), ПараметрыОтчета.РежимФормирования,мРежимыФормирования.День);
		ПараметрыОтчета.Свойство("Филиал", Отчет.Филиал);
		Отчет.Подразделение		= ПараметрыОтчета.Подразделение;
		Отчет.МодельРасписания	= ПараметрыОтчета.МодельРасписания;
		Отчет.Сотрудники		= ПараметрыОтчета.Сотрудники;
		ПараметрыОтчета.Свойство("Клиент", Клиент);
	Иначе
		Отчет.ДатаНачала = НачалоДня(ТекущаяДата());	
		Отчет.РежимФормирования = мРежимыФормирования.День;
		ДлинаПериода			= 7;
		Отчет.Филиал 			= УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя();
		Отчет.Подразделение		= Отчет.Филиал;
	КонецЕсли;
	
	Элементы.ПолеКалендаряВыборДаты.ВыделенныеДаты.Добавить(Отчет.ДатаНачала);
	
	Элементы.Филиал.Видимость = ПараметрыСеанса.УчетПоНесколькимФилиалам;
	Элементы.КнопкаСоздатьОУ.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.ОказаниеУслуг);
	Элементы.КнопкаСоздатьЗаявку.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.Заявка);
	
	Если мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания Тогда
		Элементы.Филиал.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ГруппаОтборПодразделения.Видимость = Ложь;
		
		Элементы.МодельРасписания.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДоступныхМоделей(Отчет.Филиал));
		ОбновитьСписокВыбораСотрудников(Элементы.Сотрудники, Отчет.МодельРасписания);
		Отчет.Подразделение = Отчет.Филиал;
	Иначе
		СформироватьДеревоОтбора();
		Элементы.Филиал.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.ГруппаОтборМоделиРасписания.Видимость = Ложь;
	КонецЕсли;
	
	МодельРасписанияПредставление = Строка(Отчет.МодельРасписания);
	СотрудникиПредставление = Строка(Отчет.Сотрудники);
	
	Элементы.ЛистыОжиданияЗаписи.Видимость = ПоказыватьЛистыОжидания();
	Элементы.ГруппаЗаписьПоЛистуОжидания.Видимость = Ложь;
	
	Если Элементы.Найти("ДокументыОчередиФилиал") <> Неопределено Тогда
		Элементы.ДокументыОчередиФилиал.Видимость = ПараметрыСеанса.УчетПоНесколькимФилиалам;
	КонецЕсли;
	
	ОбновитьКонтекстноеМенюЖурналаЗаписи();

	// Задачи и напоминания
	УстановитьНастройкиСпискаЗадач();
	
	// SMS
	ПоказыватьЗакладкуSMS = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоказыватьЗакладкуSMSСообщенийВКалендареПланирования");
	Элементы.Панель.ПодчиненныеЭлементы.SMS.Видимость = ПоказыватьЗакладкуSMS;
	Если ПоказыватьЗакладкуSMS Тогда
		ОбработкаSMSРассылки = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнаяОбработкаSMSРассылки");
	КонецЕсли;
		
	ОбновитьСписокИнфСообщений(ИнформационныеСообщения);

	ИспользоватьУчетМестонахожденияМедКарт = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетМестонахожденияМедкарт"); 
	
	Если мУчетнаяПолитика.ИспользуетсяОбменССайтом Тогда
		ОбновитьНепросмотренныеДокументы(Элементы.НовыхЗаявокССайта, Элементы.ЛистыОжиданияЗаписи);
	КонецЕсли;
	
	Если мУчетнаяПолитика.ИспользоватьОбменДанными Тогда
		ОбновитьНепросмотренныеКонфликтыРБД(Элементы.КонфликтыЗагрузкиЗаявокРБД);
	КонецЕсли;

	// Подгонка размера интерфейса под режим и мастаб интерфейса
	ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	ВариантМасштаба = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
	
	Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения",,, );
	Если Настройка <> Неопределено Тогда
		ВариантИнтерфейса = Настройка.ВариантИнтерфейсаКлиентскогоПриложения;
		ВариантМасштаба = Настройка.ВариантМасштабаФормКлиентскогоПриложения;
	Иначе
		ВариантИнтерфейса = КлиентскоеПриложение.ТекущийВариантИнтерфейса();
	КонецЕсли;
	
	Если мУчетнаяПолитика.КалендарьЖурналаЗаписиРастягивать Тогда
		Элементы.ПолеКалендаряВыборДаты.РастягиватьПоВертикали = Истина;
		Элементы.МодельРасписания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.Сотрудники.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.Филиал.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элементы.МодельРасписания.ПодсказкаВвода = "";
		Элементы.Сотрудники.ПодсказкаВвода = "";
		Элементы.Филиал.ПодсказкаВвода = "";
	КонецЕсли;
	
	Если ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		
		// Ширина панели навигации
		Если ВариантМасштаба = ВариантМасштабаФормКлиентскогоПриложения.Компактный Тогда
			Элементы.ГруппаНавигацияЖурнала.Ширина = Элементы.ГруппаНавигацияЖурнала.Ширина + 3;
			Если Не мУчетнаяПолитика.КалендарьЖурналаЗаписиРастягивать Тогда
				Элементы.ГруппаНавигацияЖурнала.Ширина = Элементы.ГруппаНавигацияЖурнала.Ширина + 2; // Долполнительно.
			КонецЕсли;
		КонецЕсли;
		
		// Размер шрифта поля календаря
		Если мУчетнаяПолитика.КалендарьЖурналаЗаписиРастягивать Тогда
			Элементы.ПолеКалендаряВыборДаты.Шрифт = Новый Шрифт(Элементы.ПолеКалендаряВыборДаты.Шрифт,,11);
		Иначе
			Элементы.ПолеКалендаряВыборДаты.Шрифт = Новый Шрифт(Элементы.ПолеКалендаряВыборДаты.Шрифт,,12);
		КонецЕсли;
		
		Элементы.ПерейтиКТекущейДате.Видимость = Ложь;
	КонецЕсли;
	
	РаботаСФормамиСервер.ДобавитьДополнительныеКомандыНаФорму(ЭтаФорма, КалендарьПланирования.ДополнительныеКомандыОперацийЖурналаЗаписи(), "ГруппаДополнительныеКнопкиПерехода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	НастроитьВидимостьДлиныДнейФормирования();
	
	// Задачи и напоминания
	АвтоОбновлениеЗадачНапоминанийЗапущено = Ложь;
	ЭтаФорма.ПодключитьОбработчикОжидания("ДействияОбработчикаОжидания", 3, Истина);
	Если мУчетнаяПолитика.ИспользуетсяОбменССайтом И ОбщегоНазначения.ЕстьПравоДоступа("Просмотр", "РегистрСведений.НепросмотренныеДокументыССайта") Тогда
		ПериодОбновленияНепросмотренныхДокументовССайта = ?(ЗначениеЗаполнено(мУчетнаяПолитика.ПериодОбновленияНепросмотренныхДокументовССайта), мУчетнаяПолитика.ПериодОбновленияНепросмотренныхДокументовССайта, 180);
		ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияНовыхДокументовССайта", ПериодОбновленияНепросмотренныхДокументовССайта, Ложь);
	КонецЕсли;
	Если мУчетнаяПолитика.ИспользоватьОбменДанными Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияКонфликтыРИБ", 600, Ложь);
	КонецЕсли;
	
	// Автоформирование отчета
	ИдётОткрытиеОтчета = Истина;
	ОбновитьОтчет();
	
	ЗадачиИНапоминания.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	мСписокОтложенногоВремени = УправлениеКонтактами.ПолучитьСписокИнтерваловНапоминания();
	Сч = 0;
	Пока Сч < мСписокОтложенногоВремени.Количество() Цикл
		Элементы.ЗначениеОтложенногоВремени.СписокВыбора.Вставить(Сч, мСписокОтложенногоВремени.Получить(Сч).Значение,мСписокОтложенногоВремени.Получить(Сч).Представление);
		Сч = Сч + 1;
	КонецЦикла;
	
	Если Истина // ИспользоватьПодключаемоеОборудование Проверка на включенную ФО "Использовать ВО".
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
	// Установка текущей строки дерева отбора, если отбор известен и используется режим отбора "Дерево подразделений".
	Если Не мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания
		И Отчет.Подразделение <> Отчет.Филиал
	Тогда
		УстановитьТекущуюСтрокуДереваОтбора(ДеревоОтбора);
		ЭлементыДереваОтбора = ДеревоОтбора.ПолучитьЭлементы();
		Если ЭлементыДереваОтбора.Количество() <> 0 Тогда
			Элементы.ДеревоОтбора.Развернуть(ЭлементыДереваОтбора[0].ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЕсли;	
	
	ПодключитьАвтообновлениеОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаявкаИзменение" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") 
			И Параметр.Свойство("Дата")
		Тогда
			// Даты оповещения попадают ли в отображаемый сейчас период? Если да, обновляем отчет
			Если ТипЗнч(Параметр.Дата) = Тип("Дата") Тогда
				МассивДат = Новый Массив;
				МассивДат.Добавить(Параметр.Дата);
			ИначеЕсли ТипЗнч(Параметр.Дата) = Тип("Массив") Тогда
				МассивДат = Параметр.Дата;
			Иначе
				Возврат;
			КонецЕсли;
			
			ТребуетсяОбновить = Ложь;
			Для Каждого ОбновленнаяДата Из МассивДат Цикл
				Если ((Отчет.РежимФормирования = мРежимыФормирования.День 
						И НачалоДня(ОбновленнаяДата) = Отчет.ДатаНачала)
					Или (Отчет.РежимФормирования = мРежимыФормирования.Период 
						И ОбновленнаяДата >= Отчет.ДатаНачала И ОбновленнаяДата <= Отчет.ДатаОкончания))
				Тогда
					ТребуетсяОбновить = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТребуетсяОбновить Тогда
				
				Если Параметр.Свойство("Ссылка")
					И ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(Параметр, "ИзменилосьТолькоСостояние", Ложь)
					И Не УправлениеНастройкамиПовтИсп.ИзменениеСостоянияЗаявкиТребуетПерерисовкиЖурналаЗаписи()
				Тогда
					Если ТипЗнч(Параметр.Ссылка) = Тип("Массив") Тогда
						// Обновить цвет состояния переданного массива заявок
						Для Каждого Элемент Из Параметр.Ссылка Цикл
							ОтобразитьНовоеСостояниеЗаявки(Элемент);	
						КонецЦикла;
					Иначе
						ОтобразитьНовоеСостояниеЗаявки(Параметр.Ссылка); // Обновить цвет состояния переданной заявки.
					КонецЕсли;
				Иначе
					// Полный пересчет журнала
					ОбновитьОтчет();
					Попытка
						Элементы.ДокументыОчереди.Обновить();
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли  ИмяСобытия = "ГрафикиРаботыИзменение"  Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") и Параметр.Свойство("Дата") и 
			 Отчет.ДатаНачала >= Параметр.Дата и Отчет.ДатаНачала <= КонецМесяца(Параметр.Дата)
		Тогда
			ОбновитьОтчет();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВидСостояниеЗаявкиЗапись"  Тогда
		ОбновитьКонтекстноеМенюЖурналаЗаписи();
	ИначеЕсли ИмяСобытия = "ScanData" Тогда
		Если ВводДоступен() Тогда
			ТипШК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСШКФормы(ЭтаФорма, Параметр, ТипШК);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "TracksData" Тогда
		Если ВводДоступен() Тогда
			КодКарты = Неопределено;
			СМК = Неопределено;
			РаботаСТорговымОборудованиемКлиент.ОбработатьСобытиеСМК(ЭтаФорма,  Параметр[0], СМК, Неопределено, Неопределено);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьНовойМедкарты" Тогда
		// Обновление кэша местонахождений медкарт
		Если мУчетнаяПолитика.ВестиУчетМестонахожденияМедкарт Тогда
			Для Каждого СтрокаНахожденияМедкарты Из МестонахождениеМедКарт Цикл
				Если СтрокаНахожденияМедкарты.Клиент = Параметр.Клиент И
					Не ЗначениеЗаполнено(СтрокаНахожденияМедкарты.МедКарта) 
				Тогда
					СтрокаНахожденияМедкарты.МедКарта = Параметр.МедКарта;
			 	КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеМестонахожденияМедкарты" Тогда
		Для Каждого СтрокаНахожденияМедкарты Из МестонахождениеМедКарт Цикл
			Если СтрокаНахожденияМедкарты.МедКарта = Параметр.МедКарта Тогда
				СтрокаНахожденияМедкарты.Выдана = Параметр.Выдана;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "ЗаписанПрием" Тогда
		Если Не СоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи Тогда
			Если мДанныеЗаявок.Получить(Параметр.ДокументОснование) <> Неопределено Тогда
				// Заявка приёма есть в открытом расписании
				Если мДанныеПриемовЗаявок = Неопределено Тогда 
					мДанныеПриемовЗаявок = Новый Соответствие;
				КонецЕсли;
				
				ДанныеПриемовЗаявки = мДанныеПриемовЗаявок.Получить(Параметр.ДокументОснование);
				Если ДанныеПриемовЗаявки = Неопределено Тогда
					ДанныеПриемовЗаявки = Новый Массив;
				КонецЕсли;
				
				флТребуетсяДобавитьПрием = Истина;
				Для Каждого ДанныеПриемаЗаявки Из ДанныеПриемовЗаявки Цикл
					Если ДанныеПриемаЗаявки.Прием = Параметр.Прием Тогда
						ДанныеПриемаЗаявки.Врач = Параметр.Врач;
						ДанныеПриемаЗаявки.Дата = Параметр.Дата;
						флТребуетсяДобавитьПрием = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флТребуетсяДобавитьПрием Тогда
					ДанныеПриемовЗаявки.Добавить(Новый Структура("Прием, Врач, Дата", Параметр.Прием, Параметр.Врач, Параметр.Дата));
					мДанныеПриемовЗаявок.Вставить(Параметр.ДокументОснование, ДанныеПриемовЗаявки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработанКонфликтРБД" Тогда
		ОбновитьНепросмотренныеКонфликтыРБД(Элементы.КонфликтыЗагрузкиЗаявокРБД);
	ИначеЕсли ИмяСобытия = "ЗадачаПриИзменении" Тогда
		ОбновитьЗадачи();
	ИначеЕсли ИмяСобытия = "НамерениеЗаписиПоДокументу" Тогда 
		
		Элементы.Панель.ТекущаяСтраница = Элементы.ЖурналЗаписи;
		
		ТекущийДокументЗаписи = Параметр.ДокументЗаписи;
		ТекущийКлиентДокументаЗаписи = Параметр.Клиент;
		ТекущиеПараметрыЗаписи		 = Параметр;
		Клиент = Параметр.Клиент;
		Элементы.ГруппаЗаписьПоЛистуОжидания.Видимость = Истина;
		
		Элементы.ЗаписьПоЛОПривязать.Видимость = Параметр.Свойство("ЛистОжидания");
		
		Если Параметр.Свойство("ЛистОжидания") Тогда
			
			// Период записи
			ДанныеЛО = Параметр.ДанныеЛистаОжидания;
			Отчет.ДатаНачала = Макс(НачалоДня(ТекущаяДата()), ДанныеЛО.ДатаНачала);
			Элементы.ПолеКалендаряВыборДаты.ВыделенныеДаты.Очистить();
			Элементы.ПолеКалендаряВыборДаты.ВыделенныеДаты.Добавить(Отчет.ДатаНачала);
	
			ДлинаПериода = 1;
			Если мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания Тогда
				
				Отчет.МодельРасписания.Очистить();
				Отчет.Сотрудники.Очистить();
				
				Если ЗначениеЗаполнено(ДанныеЛО.Сотрудник) Тогда
					
					Отчет.Сотрудники.Добавить(ДанныеЛО.Сотрудник);
					ОбновитьСписокВыбораСотрудников(Элементы.Сотрудники, Отчет.МодельРасписания);
					
					ДлинаПериода = Мин(Макс((НачалоДня(ДанныеЛО.ДатаОкончания) - НачалоДня(ДанныеЛО.ДатаНачала)) / 86400, 1), 7);
					
				ИначеЕсли ЗначениеЗаполнено(ДанныеЛО.Специализация) Тогда
					
					МоделиРасписанияСпециализации = КалендарьПланирования.ПолучитьМоделиРасписанияПоСпециализации(ДанныеЛО.Специализация, Отчет.Филиал);
					ДоступныеМодели = Элементы.МодельРасписания.СписокВыбора;
					Для Каждого МодельСпециализации Из МоделиРасписанияСпециализации Цикл
						Если ДоступныеМодели.НайтиПоЗначению(МодельСпециализации) <> Неопределено Тогда
							Отчет.МодельРасписания.Добавить(МодельСпециализации);
						КонецЕсли;
					КонецЦикла;
					
					ДлинаПериода = 1;
				КонецЕсли;
				
				Отчет.ДатаОкончания = Отчет.ДатаНачала + (ДлинаПериода - 1) * 86400;
				Отчет.РежимФормирования = ?(ДлинаПериода = 1, мРежимыФормирования.День, мРежимыФормирования.Период);
				НастроитьВидимостьДлиныДнейФормирования();
				
				МодельРасписанияПредставление = Строка(Отчет.МодельРасписания);
				СотрудникиПредставление = Строка(Отчет.Сотрудники);
				
				ОбновитьОтчет();
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр.Свойство("Работы") Тогда
			ТекущаяНоменклатураДокументаЗаписи.ЗагрузитьЗначения(Параметр.Работы);			
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ЗаявкаПоДокументуЗапись" И Параметр.ДокументЗаписи = ТекущийДокументЗаписи Тогда 
		
		ЗаписьПоЛООтменить(Неопределено);
		
	ИначеЕсли ИмяСобытия = "ЗаписьКомментарияДняСотрудника" Тогда
		
		ОбновитьКомментарийБезОбновленияОтчета(Параметр);
		
	ИначеЕсли ИмяСобытия = "СобытиеИзБ24" Тогда 
		
		БитриксКлиент.ОбработатьСобытиеЖЗ(ЭтотОбъект, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПараметрыОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
КонецПроцедуры

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура ОбновитьОтчет(УстановитьФокусВводаНаТаблице = Истина)
	
	ОтключитьАвтообновлениеОтчета();
	ОтключитьОбработчикОжидания("ПроверкаНеобходимостиВыполненияОтложенногоАвтообновленияОтчета");
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ВысотаСтроки",		Отчет.ВысотаСтроки);
	ПараметрыФормирования.Вставить("ДатаНачала",		Отчет.ДатаНачала);
	ПараметрыФормирования.Вставить("ДатаОкончания",		Отчет.ДатаОкончания);
	ПараметрыФормирования.Вставить("Подразделение",		Отчет.Подразделение);
	ПараметрыФормирования.Вставить("МодельРасписания",	Отчет.МодельРасписания);
	ПараметрыФормирования.Вставить("Сотрудники",		Отчет.Сотрудники);
	ПараметрыФормирования.Вставить("РежимФормирования", Отчет.РежимФормирования);
	ПараметрыФормирования.Вставить("Филиал",			Отчет.Филиал);
	
	Если ЕстьПравоДоступаПриемВрача Тогда
		ПараметрыФормирования.Вставить("мСоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи", СоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи);
	Иначе
		ПараметрыФормирования.Вставить("мСоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи", Неопределено);
	КонецЕсли;
	
	РезультатФормирования = СформироватьОтчет(ПараметрыФормирования, ПолучитьСохраняемыеНастройкиФормы());
	ДокументРезультат = РезультатФормирования.ДокументРезультат;
	мДанныеЗаявок = РезультатФормирования.ДанныеЗаявок;
	
	РасположитьКартинкиЖЗ(РезультатФормирования.ОтступыКартинок, РезультатФормирования.ШиринаКартинки);
	
	// Обработка ключа "ДанныеПриемовЗаявок". В т.ч. преобразование ключа-индекса в ключ-ссылку на заявку.
	Если РезультатФормирования.Свойство("ДанныеПриемовЗаявок") Тогда
		мДанныеПриемовЗаявок = РезультатФормирования.ДанныеПриемовЗаявок;
	Иначе
		мДанныеПриемовЗаявок = Неопределено;
	КонецЕсли;
	
	// Довывод представлений ячеек графика работы
	ПараметрыОтображения = РезультатФормирования.ПараметрыОтображения;
	ПараметрыОтображенияЯчеекГрафиковРаботыДополнитьНаКлиенте(ПараметрыОтображения);
	
	мПовторяющиесяРасшифровкиСвободногоВремени = РезультатФормирования.ПовторяющиесяРасшифровкиСвободногоВремени;
	ВыведенныеРасшифровкиКолонки = Новый Массив;
	ОтдельныеКолонкиГрафика = РезультатФормирования.ОтдельныеКолонкиГрафика;
	
	мРасшифровкиКолонок = РезультатФормирования.РасшифровкиКолонок;
	мРасшифровкиСтрок = РезультатФормирования.РасшифровкиСтрок;
	ТипЧисло = Тип("Число");
	
	Для Каждого Расшифровка Из мПовторяющиесяРасшифровкиСвободногоВремени Цикл
		
		// Второй участник расписания в графике
		ДанныеРасшифровки = Расшифровка.Значение;
		
		Если  ПараметрыОтображения.Свойство("ЕстьВыводСубъекта")
			И ДанныеРасшифровки.Свойство("Субъект")
		Тогда
			ДанныеРасшифровки.Вставить("СубъектПредставление", РезультатФормирования.ПредставленияСубъектов.Получить(ДанныеРасшифровки.Субъект));
		КонецЕсли;
		
		// Филиал
		ДанныеРасшифровки.Филиал = РезультатФормирования.ИндексыФилиалов[ДанныеРасшифровки.Филиал];
		
		Если  ПараметрыОтображения.Свойство("ЕстьВыводФилиала")
			И ЗначениеЗаполнено(ДанныеРасшифровки.Филиал)
		Тогда
			ДанныеРасшифровки.Вставить("ФилиалПредставление", РезультатФормирования.ПредставленияСубъектов.Получить(ДанныеРасшифровки.Филиал));
		КонецЕсли;
	КонецЦикла;
	
	Для счГ = РезультатФормирования.ПерваяКолонкаПослеВремени По ДокументРезультат.ШиринаТаблицы Цикл
		
		ВыведенныеРасшифровкиКолонки.Очистить();
		Для счВ = РезультатФормирования.ПерваяСтрокаПослеШапки По ДокументРезультат.ВысотаТаблицы Цикл
			
			Ячейка = ДокументРезультат.Область(счВ, счГ);
			ЯчейкаРасшифровка = Ячейка.Расшифровка;
			
			Если ТипЗнч(ЯчейкаРасшифровка) = ТипЧисло Тогда // Свободное (рабочее или не рабочее) время.
				
				// В колонке сотрудника/кабинета может быть несколько объединенных колоночек. Обрабатываем только последнюю из них.
				Если Ячейка.Лево <> счГ Тогда
					Продолжить;
				КонецЕсли;
				КлючРасшифровки = ЯчейкаРасшифровка;
			
				ДанныеРасшифровки = мПовторяющиесяРасшифровкиСвободногоВремени.Получить(КлючРасшифровки);
				Если ДанныеРасшифровки.Количество() <> 2 Тогда// Если только филиал и Ид графика, то не требуется доп. действий, т.к. нечего выводить кроме рабочего времени (в примечание не даем выводить).
					
					// Формирование текста ячейки и примечания
					Для Каждого кзПараметрыОбображения Из ПараметрыОтображения Цикл
						
						Если кзПараметрыОбображения.Ключ = "ПоляЯчейки" Тогда
							ТекстИсходный = Ячейка.Текст;
						ИначеЕсли кзПараметрыОбображения.Ключ = "ПоляПримечания" Тогда
							ТекстИсходный = "";
						Иначе
							Продолжить;
						КонецЕсли;
						ЧастиОбщегоТекста = Новый Массив;
					
						Для Каждого Строка Из кзПараметрыОбображения.Значение Цикл
							
							Если Строка.ПолеВремя Тогда
								Если Не ДанныеРасшифровки.Свойство("ЭтоНеРабВремя") Тогда
									ДобавитьВМассивСтроку(ЧастиОбщегоТекста, ТекстИсходный);
								КонецЕсли;
							ИначеЕсли Строка.ПолеВидВремени
									И ДанныеРасшифровки.Свойство("ЭтоНеВидРабВремя")
							Тогда
								Если (Не Строка.ТолькоВПервойСтроке 
										Или ВыведенныеРасшифровкиКолонки.Найти(КлючРасшифровки) = Неопределено)
									И ДанныеРасшифровки.Свойство("НазваниеСобытия")
								Тогда
									ДобавитьВМассивСтроку(ЧастиОбщегоТекста, ДанныеРасшифровки.НазваниеСобытия);
								КонецЕсли;
							ИначеЕсли Строка.ПолеСубъект2 Тогда
								Если (Не Строка.ТолькоВПервойСтроке 
										Или ВыведенныеРасшифровкиКолонки.Найти(КлючРасшифровки) = Неопределено)
									И ДанныеРасшифровки.Свойство("СубъектПредставление")
								Тогда
									ДобавитьВМассивСтроку(ЧастиОбщегоТекста, ДанныеРасшифровки.СубъектПредставление);
								КонецЕсли;
							ИначеЕсли Строка.ПолеФилиал Тогда
								Если (Не Строка.ТолькоВПервойСтроке 
										Или ВыведенныеРасшифровкиКолонки.Найти(КлючРасшифровки) = Неопределено)
									И ДанныеРасшифровки.Свойство("ФилиалПредставление")
								Тогда
									ДобавитьВМассивСтроку(ЧастиОбщегоТекста, ДанныеРасшифровки.ФилиалПредставление);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						ТекстИтоговый = СтрСоединить(ЧастиОбщегоТекста, Символы.ПС);
						Если ТекстИтоговый <> ТекстИсходный Тогда
							Если кзПараметрыОбображения.Ключ = "ПоляЯчейки" Тогда
								Ячейка.Текст = ТекстИтоговый;
							Иначе
								Ячейка.Примечание.Текст = ТекстИтоговый;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				
					ВыведенныеРасшифровкиКолонки.Добавить(КлючРасшифровки);
					
				КонецЕсли;
			ИначеЕсли ЯчейкаРасшифровка = Неопределено Тогда
				Ячейка.Расшифровка = Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Если РезультатФормирования.Свойство("МестонахождениеМедКарт") Тогда
		МестонахождениеМедКарт.Очистить();
		Для Каждого СтрокаМестонахождения Из РезультатФормирования.МестонахождениеМедКарт Цикл
			ЗаполнитьЗначенияСвойств(МестонахождениеМедКарт.Добавить(), СтрокаМестонахождения);
		КонецЦикла;
	КонецЕсли;
	
	Если Элементы.Панель.ТекущаяСтраница = Элементы.ЖурналЗаписи
		И УстановитьФокусВводаНаТаблице
	Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДокументРезультат;
	КонецЕсли;
	
	Элементы.ЕстьЗаявкиХочуРаньшеПодОбработку.Видимость = мУчетнаяПолитика.ИспользоватьХочуРаньшеВЗаявках И РезультатФормирования.ЕстьЗаявкиХочуРаньше;
	
	ПодключитьАвтообновлениеОтчета();
	
КонецПроцедуры // ОбновитьОтчет().

&НаКлиенте
Процедура ДобавитьВМассивСтроку(Массив, СтрокаКандидат)
	
	Если Не ПустаяСтрока(СтрокаКандидат) Тогда
		Массив.Добавить(СокрЛП(СтрокаКандидат));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьОтчет(ПараметрыФормирования, СохраняемыеНастройкиФормы)

	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетОбъект = Отчеты.КалендарьПланирования.Создать();
	ЗаполнитьЗначенияСвойств(ОтчетОбъект, ПараметрыФормирования);
	
	РезультатФормирования = ОтчетОбъект.СформироватьОтчет();
	
	РезультатФормирования.Вставить("ПараметрыОтображения", ПолучитьПараметрыОтображенияЯчеекГрафиковРаботы());
	
	Если РезультатФормирования.Свойство("МестонахождениеМедКарт") Тогда
		РезультатФормирования.МестонахождениеМедКарт = 
			ОбщегоНазначенияСервер.ПреобразоватьТаблицуЗначенийВМассивСтруктур(РезультатФормирования.МестонахождениеМедКарт);
	КонецЕсли;
	
	СохранитьНастройкиФормы(СохраняемыеНастройкиФормы.ПараметрыОтчета, СохраняемыеНастройкиФормы.НастройкиПанелиЗадач);
	
	Возврат РезультатФормирования;	
	
КонецФункции

&НаКлиенте
Функция ПолучитьРасшифровкуПустойЯчейки(вПоз, гПоз, вПозКон = Неопределено, КлючРасшифровки = Неопределено)
	
	Результат = Новый Структура;
	
	РасшифровкаСтрокиВремя = мРасшифровкиСтрок.Получить(вПоз);
	РасшифровкаКолонки	= мРасшифровкиКолонок.Получить(гПоз);
	
	Если РасшифровкаСтрокиВремя = Неопределено
		Или РасшифровкаКолонки = Неопределено
	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Время", РасшифровкаСтрокиВремя);
	
	Для Каждого КлючЗначение Из РасшифровкаКолонки Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	РасшифровкаПоследнейСтроки = мРасшифровкиСтрок.Получить(вПозКон);
	Если ТипЗнч(РасшифровкаПоследнейСтроки) = Тип("Дата") Тогда
		
		ВремяСледующейСтроки = мРасшифровкиСтрок.Получить(вПозКон + 1);
		
		Результат.Вставить("ВремяОкончания", ВремяСледующейСтроки); 
		Результат.Вставить("КоличествоВыбранныхЯчеек", вПозКон - вПоз + 1);
		
	КонецЕсли;
	
	Результат.Вставить("Дата", РасшифровкаКолонки.Дата + (РасшифровкаСтрокиВремя - Дата(1,1,1)));
	
	Если КлючРасшифровки <> Неопределено Тогда
		ДанныеРасшифровки = мПовторяющиесяРасшифровкиСвободногоВремени.Получить(КлючРасшифровки);
		Если ДанныеРасшифровки <> Неопределено Тогда
			Для Каждого КлючЗначение Из ДанныеРасшифровки Цикл
				Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
// Функция - Получить расшифровку ячейки
//
// Параметры:
//  Область	 - ОбластьЯчеектабличногоДокумента - Область табличного документа ДокументРезультат (журнала записи). Когда не задано, используется текущая область
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ПолучитьРасшифровкуЯчейки(Знач Область = Неопределено)

	Если Область = Неопределено Тогда
		Область = ДокументРезультат.ТекущаяОбласть;
		Если Область = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Расшифровка = Область.Расшифровка;
	Исключение
		Расшифровка = Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка")
		Или ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Оборудование")
	Тогда
		Возврат Расшифровка;
	Иначе
		Возврат ПолучитьРасшифровкуПустойЯчейки(Область.Верх, Область.Лево, Область.Низ, Расшифровка);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьВХранилищеФормы(Адрес, Ключ, Значение)
	ДанныеХранилищаФормы = ПолучитьИзВременногоХранилища(Адрес);
	ДанныеХранилищаФормы.Вставить(Ключ, Значение);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИзХранилищаФормы(Адрес, Ключ)
	
	Перем Значение;
	
	ДанныеХранилищаФормы = ПолучитьИзВременногоХранилища(Адрес);
	Попытка
		Значение = ДанныеХранилищаФормы[Ключ];
	Исключение
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ОбновитьКонтекстноеМенюЖурналаЗаписи(ОбновитьТолькоКэшВидовСостояний = Ложь)
	
	Если Не ОбновитьТолькоКэшВидовСостояний Тогда
		КомандыКонтекстногоМенюЖурнала	= ЭтаФорма.КомандыКонтекстногоМенюЖурнала;
		Если КомандыКонтекстногоМенюЖурнала.Количество() = 0 Тогда
			// Первый вызов процедуры
			КомандыКонтекстногоМенюЖурнала	= Новый СписокЗначений;
			Для Каждого КнопкаМеню Из Элементы.ДокументРезультат.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(КнопкаМеню) = Тип("КнопкаФормы") Тогда
					КомандыКонтекстногоМенюЖурнала.Добавить(КнопкаМеню.ИмяКоманды, Команды.Найти(КнопкаМеню.ИмяКоманды).Заголовок,,КнопкаМеню.Картинка);
				КонецЕсли;
				КнопкаМеню.Видимость = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Истина Тогда // мУчетнаяПолитика.ИспользоватьСостоянияЗаявок
		
		мКэшВидовСостоянийЗаявки = Новый ТаблицаЗначений;
		
		мКэшВидовСостоянийЗаявки.Колонки.Добавить("Состояние");
		мКэшВидовСостоянийЗаявки.Колонки.Добавить("Представление");
		мКэшВидовСостоянийЗаявки.Колонки.Добавить("Код");
		
		Назначена = Справочники.ВидыСостоянийЗаявок.Запланирована;
		Оплачена  = Справочники.ВидыСостоянийЗаявок.Оплачена;
		Принята	  = Справочники.ВидыСостоянийЗаявок.Прием;
		Выполнена = Справочники.ВидыСостоянийЗаявок.Выполнена;
		
		ТабСостояния = Новый ТаблицаЗначений;
		ТабСостояния.Колонки.Добавить("Ссылка");
		ТабСостояния.Колонки.Добавить("Наименование");
		ТабСостояния.Колонки.Добавить("Код");
		ТабСостояния.Колонки.Добавить("Порядок");
		ВыбСостояния = Справочники.ВидыСостоянийЗаявок.Выбрать();
		Пока ВыбСостояния.Следующий() Цикл
			
			Если ВыбСостояния.Ссылка = Справочники.ВидыСостоянийЗаявок.Забронирована Или 
				ВыбСостояния.Ссылка = Справочники.ВидыСостоянийЗаявок.СозданаНаСайте Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыбСостояния.ПометкаУдаления ИЛИ
				 (ВыбСостояния.Ссылка = Справочники.ВидыСостоянийЗаявок.Оплачена И НЕ ЗначениеЗаполнено(Оплачена)) ИЛИ
				 (ВыбСостояния.Ссылка = Справочники.ВидыСостоянийЗаявок.Прием И НЕ ЗначениеЗаполнено(Принята)) ИЛИ
				 (ВыбСостояния.Ссылка = Справочники.ВидыСостоянийЗаявок.Выполнена И НЕ ЗначениеЗаполнено(Выполнена)) Тогда
				 Продолжить;
			КонецЕсли;
			
			СтрСостояние = ТабСостояния.Добавить();
			ЗаполнитьЗначенияСвойств(СтрСостояние, ВыбСостояния);
			
			Если ВыбСостояния.Ссылка = Назначена Тогда
				СтрСостояние.Порядок = 1;
			ИначеЕсли ВыбСостояния.Ссылка = Оплачена Тогда
				СтрСостояние.Порядок = 2;
			ИначеЕсли ВыбСостояния.Ссылка = Принята Тогда
				СтрСостояние.Порядок = 3;
			ИначеЕсли ВыбСостояния.Ссылка = Выполнена Тогда
				СтрСостояние.Порядок = 4;
			ИначеЕсли ВыбСостояния.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена Тогда
				СтрСостояние.Порядок = 6;
			Иначе
				СтрСостояние.Порядок = 5;
			КонецЕсли;				
			
		КонецЦикла;
		ТабСостояния.Сортировать("Порядок, Наименование");
		
		Для Каждого СтрСостояние Из ТабСостояния Цикл
			СтрКэш = мКэшВидовСостоянийЗаявки.Добавить();
			СтрКэш.Состояние = СтрСостояние.Ссылка;
			СтрКэш.Представление = СокрЛП(СтрСостояние.Наименование); 
			СтрКэш.Код = СтрСостояние.Код;
		КонецЦикла;
		мКэшВидовСостоянийЗаявки.Сортировать("Код");
		ПоместитьВХранилищеФормы(ЭтаФорма.мАдресХранилищаФормы, "мКэшВидовСостоянийЗаявки", мКэшВидовСостоянийЗаявки);
		
		Если Не ОбновитьТолькоКэшВидовСостояний Тогда
			
			// Удаление старых команд состояний
			масЭлТовКоманды = Новый Массив;
			Для Каждого элКоманда Из КомандыКонтекстногоМенюЖурнала Цикл 
				Если Найти(элКоманда.Значение,"ДействиеСостояние") <> 0 Тогда
					масЭлТовКоманды.Добавить(элКоманда);
				КонецЕсли;
			КонецЦикла;	
			
			мОбр = масЭлТовКоманды.Количество() - 1;
			Для инд = 0 По мОбр Цикл 
				ИмяКоманды = масЭлТовКоманды[мОбр - инд].Значение;
				КомандыКонтекстногоМенюЖурнала.Удалить(масЭлТовКоманды[мОбр - инд]);
				Команды.Удалить(Команды.Найти(ИмяКоманды));
			КонецЦикла;
			
			// Добавление в контекстное меню команд установки состояния заявки.
			Для Сч=0 По мКэшВидовСостоянийЗаявки.Количество()-1 Цикл
				ИмяКоманды = "ДействиеСостояние"+Сч;
				Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
				Команда.Действие = "ДействиеМенюУстановитьСостояние";
				КомандыКонтекстногоМенюЖурнала.Добавить(ИмяКоманды, мКэшВидовСостоянийЗаявки[сч].Представление);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Элементы.ДокументРезультатКМГруппаСостоянияЗаявок.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокМенюЖурналаЗаписи(Расшифровка, ОбъектЯчейки)

	СписокКнопокМеню = Новый СписокЗначений;
	
	КомандыКонтекстногоМенюЖурнала	= ЭтаФорма.КомандыКонтекстногоМенюЖурнала;
	
	ЭтоЗаявка			= ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка");
	ЭтоСвободноеВремя	= ТипЗнч(Расшифровка) = Тип("Структура");
	ЭтоСотрудник		= ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Сотрудники");
	ЭтоКабинет			= ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Оборудование");
	
	Если ЭтоЗаявка Или ЭтоСвободноеВремя Тогда
		
		// Открыть клиента
		Если ЭтоЗаявка Тогда
			ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюОткрытьКлиента"));
		КонецЕсли; 
		
		// Создания
		ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюСоздатьОказаниеУслуг"));
		Если ЭтоСвободноеВремя Тогда
			ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("СоздатьЗаявку"));
			Если мУчетнаяПолитика.ИспользоватьЛистыОжиданияЗаписи Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("СоздатьПостановкуВОчередьКонтекстно"));
			КонецЕсли;
			Если ЗначениеЗаполнено(БуферОбменаЗаявка) Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюВставить"));
			КонецЕсли;
		Иначе
			Если мУчетнаяПолитика.ИспользоватьЛистыОжиданияЗаписи Тогда
            	ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("СоздатьПостановкуВОчередьКонтекстно"));
			КонецЕсли;
		КонецЕсли; 
		
		// Группа заявка
		Если ЭтоЗаявка Тогда
			Если ЕстьПравоДоступаПриемВрача Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("СоздатьПрием"));
			КонецЕсли;
			ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюОткрытьЗаявку"));
			ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюОткрытьКомментарии"));
			
			// Состояния заявок
			Если Истина Тогда // мУчетнаяПолитика.ИспользоватьСостоянияЗаявок
				Для Каждого элКоманда Из КомандыКонтекстногоМенюЖурнала Цикл
					Если Найти(элКоманда.Значение,"ДействиеСостояние") <> 0 Тогда
						ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, элКоманда);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоЗаявка И ИспользоватьУчетМестонахожденияМедКарт Тогда
			Результат = ОпределитьМестонахождениеМедКарты(Расшифровка);
			Если Результат = 0 Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("МедкартуСоздатьИВыдать"));
			ИначеЕсли Результат = 1  Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("МедкартуВыдать"));
			ИначеЕсли Результат = 2 Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("МедкартуВернуть"));
			КонецЕсли;
		КонецЕсли;
		
		// Команды Вырезать и Копировать
		Если ЭтоЗаявка Тогда
			ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюВырезать"));
			ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюКопировать"));
		КонецЕсли;
		
		// Команды ДобавитьСобытие и АннулироватьСобытие
		Если ЕстьПравоСоставленияГрафиковРаботы Тогда
			Если ТипЗнч(Расшифровка) = Тип("Структура")
				И (ЗначениеЗаполнено(ОбъектЯчейки)
					Или ЕстьТекущийОбъектОтбораЖЗ())
			Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("ДобавитьСобытие"));
			КонецЕсли;

			Если ТипЗнч(Расшифровка) = Тип("Структура")
				И Расшифровка.Свойство("ИдентификаторСобытия") 
			Тогда
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("АннулироватьСобытие"));
				ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("ОчиститьВремяГрафика"));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоСотрудник Или ЭтоКабинет Тогда	
		Если Элементы.ДокументРезультат.ТекущаяОбласть.Примечание.Текст = "" Тогда
			КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюДобавитьКомментарий").Представление = "Добавить комментарий";
		Иначе
			КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюДобавитьКомментарий").Представление = "Редактировать комментарий";
		КонецЕсли;
		ДобавитьЭлементСпискаЗначенийКопированием(СписокКнопокМеню, КомандыКонтекстногоМенюЖурнала.НайтиПоЗначению("КонтекстноеМенюДобавитьКомментарий"));	
	КонецЕсли;
	
	Возврат СписокКнопокМеню;
	
КонецФункции

// Возвращает 0 если не найдена мед карта, 1 - если она находится в регистратуре, 2 - если она у пациента.
&НаКлиенте
Функция ОпределитьМестонахождениеМедКарты(Заявка)
	
	Для Каждого СтрокаКоллекции Из МестонахождениеМедКарт Цикл
		Если СтрокаКоллекции.Заявка = Заявка Тогда
			Если Не СтрокаКоллекции.Существует Тогда
				Возврат 0;
			ИначеЕсли СтрокаКоллекции.Выдана Тогда
				Возврат 2;
			Иначе
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	// Карты все-таки, нет нигде
	Возврат 0;
		
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементСпискаЗначенийКопированием(СписокПриемник, ЭлементИсточник)
	ЭлементПриемник = СписокПриемник.Добавить();
	ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюДобавитьКомментарийДня(Команда)
	
	ТекущаяОбласть = Элементы.ДокументРезультат.ТекущаяОбласть;
	Дата = мРасшифровкиКолонок.Получить(ТекущаяОбласть.Лево).Дата;
	ДобавитьКомментарий(ТекущаяОбласть.Расшифровка, Дата);
	ОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьОУ(Команда)
	
	РасшифровкаОбластиЯчеек = ПолучитьРасшифровкуЯчейки();
	Если ЗначениеЗаполнено(Клиент)
		И ТипЗнч(РасшифровкаОбластиЯчеек) = Тип("ДокументСсылка.Заявка")
		И Клиент <> мДанныеЗаявок.Получить(РасшифровкаОбластиЯчеек)
	Тогда
		ДобавитьОказаниеУслуги();
	Иначе
		ДобавитьОказаниеУслугПоЯчейкеЗаписи(РасшифровкаОбластиЯчеек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеМенюЗаписиДобавитьОказаниеУслуг(Команда)
	
	ДобавитьОказаниеУслугПоЯчейкеЗаписи(ПолучитьРасшифровкуЯчейки());
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеМенюЗаписиДобавитьПрием(Команда)
	
	ТекущийКлиент = Клиент;
	Заявка = ПолучитьРасшифровкуЯчейки();
	
	СтандартнаяОбработка = Истина;                         
	РаботаСКлиентамиКлиентПереопределяемый.КалендарьПланированияОткрытьФормуВыбораКлиента(ПредопределенноеЗначение("Документ.Прием.ПустаяСсылка"), Заявка, ТекущийКлиент, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ДобавитьПриёмПоЯчейкеЗаписи(Заявка,ТекущийКлиент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеМенюЗаписиДобавитьЗаявку(Кнопка)
	
	ДобавитьЗаявкуПоЯчейкеЗаписи(ПолучитьРасшифровкуЯчейки());
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеМенюЗаписиОткрытьЗаявку(Команда)
	
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка") Тогда
		ОткрытьЗначение(Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеМенюЗаписиУдалитьЗаявку(Кнопка)
	
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка") Тогда
		Ответ = Вопрос(НСтр("ru='Хотите отменить заявку?'"),РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОтменитьЗаявку(Расшифровка);
			ОбновитьОтчет();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействиеМенюУстановитьСостояние(Команда)
	
	НовоеСостояние = ПолучитьСостояниеКомандыУстановкиСостояния(Команда.Имя, ЭтаФорма.мАдресХранилищаФормы);
	Если НовоеСостояние = Неопределено Тогда
		ОбновитьКонтекстноеМенюЖурналаЗаписи(Истина);
		НовоеСостояние = ПолучитьСостояниеКомандыУстановкиСостояния(Команда.Имя, ЭтаФорма.мАдресХранилищаФормы);
	КонецЕсли;
	
	ЗаявкаСсылка = ПолучитьРасшифровкуЯчейки();
	
	Если мУчетнаяПолитика.ЗапрашиватьПричинуЗакрытияЗаявок
		И КалендарьПланирования.ИнтерактивнаяСменаСостоянияЗаявкиТребуетУказанияПричиныОтмены(НовоеСостояние, ЗаявкаСсылка)
	Тогда
		КалендарьПланированияКлиент.ОткрытьДиалогПричиныОтменыЗаявки(ЗаявкаСсылка);
	Иначе
		ЭтоОтменаЗаписи = ДействиеМенюУстановитьСостояниеСервер(ЗаявкаСсылка, НовоеСостояние);
		
		Если ЭтоОтменаЗаписи Или УправлениеНастройкамиПовтИсп.ИзменениеСостоянияЗаявкиТребуетПерерисовкиЖурналаЗаписи() Тогда
			ОбновитьОтчет();
		Иначе
			ОтобразитьНовоеСостояниеЗаявки(ЗаявкаСсылка, НовоеСостояние);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеКомандыУстановкиСостояния(ИмяКомандыСостояния, мАдресХранилищаФормы)
	
	ИндКэша = Число(СтрЗаменить(ИмяКомандыСостояния,"ДействиеСостояние",""));
	мКэшВидовСостоянийЗаявки = ПолучитьИзХранилищаФормы(мАдресХранилищаФормы,"мКэшВидовСостоянийЗаявки");
	
	Если мКэшВидовСостоянийЗаявки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат мКэшВидовСостоянийЗаявки[ИндКэша].Состояние;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДействиеМенюУстановитьСостояниеСервер(ЗаявкаСсылка, НовоеСостояние)
	
	ЗаявкаОбъект = ЗаявкаСсылка.ПолучитьОбъект();
	Если ЗаявкаОбъект.Состояние <> НовоеСостояние Тогда
		ЗаявкаОбъект.мНеДелатьПроверокПриЗаписи = Истина;
		ЗаявкаОбъект.Состояние = НовоеСостояние;
		ЗаявкаОбъект.Записать();
		
		Возврат НовоеСостояние.ТипСостояния = Перечисления.ТипыСостоянийЗаявок.Отменена Или НовоеСостояние = Справочники.ВидыСостоянийЗаявок.Отменена;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДокументРезультатПриАктивизацииОбласти(Элемент)
	
	Элементы.ЗаписьПоЛОПривязать.Доступность = Ложь;
	
	Попытка
		Расшифровка = ПолучитьРасшифровкуЯчейки();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка") Тогда
		КлиентЗаявки = мДанныеЗаявок.Получить(Расшифровка);
		Если ЗначениеЗаполнено(КлиентЗаявки) Тогда
			Клиент = КлиентЗаявки;
			Элементы.ЗаписьПоЛОПривязать.Доступность = (Клиент = ТекущийКлиентДокументаЗаписи);
		КонецЕсли;
		мКлиентВзятИзДанныхЗаявки = Истина;
	ИначеЕсли мКлиентВзятИзДанныхЗаявки = Истина Тогда
		Клиент = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	РасшифровкаЯчейки = ПолучитьРасшифровкуЯчейки();
	
	Если ТипЗнч(РасшифровкаЯчейки)= Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьЗаявкуПоЯчейкеЗаписи(РасшифровкаЯчейки);
	ИначеЕсли ТипЗнч(РасшифровкаЯчейки)= Тип("ДокументСсылка.Заявка") Тогда
		КлиентШапкиЗаявки = мДанныеЗаявок.Получить(РасшифровкаЯчейки);
		ДокументОУ = КалендарьПланирования.ПолучитьОказаниеУслугЗаявки(РасшифровкаЯчейки,, КлиентШапкиЗаявки);
		Если ЗначениеЗаполнено(ДокументОУ) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьЗначение(ДокументОУ);
		КонецЕсли;
	КонецЕсли;                             
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОбработчикаОжидания()
	
	ОбновитьЗадачи(,Истина);

	Если АвтоОбновлениеЗадачНапоминанийЗапущено Тогда
		ОбновитьНапоминания();
	Иначе
		ЭтаФорма.ПодключитьОбработчикОжидания("ДействияОбработчикаОжидания", 600, Ложь);
		АвтоОбновлениеЗадачНапоминанийЗапущено = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет картинку кнопки напоминаний
&НаКлиенте
Процедура ОбновитьНапоминания()
	
	ИнформационныеСообщенияКопия = ИнформационныеСообщения;
	ОбновитьСписокИнфСообщений(ИнформационныеСообщенияКопия);
	КопироватьДанныеФормы(ИнформационныеСообщенияКопия, ИнформационныеСообщения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСписокИнфСообщений(ИнформационныеСообщения)
	
	СписокИнфСообщений = РаботаСФормамиСервер.ПолучитьСписокИнформационныхСообщений();
	ИнформационныеСообщения.Очистить();
	Для Каждого ИнфСообщение Из СписокИнфСообщений Цикл
		СтрокаИнф = ИнформационныеСообщения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИнф,ИнфСообщение.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеКалендаряВыборДатыПриИзменении(Элемент)
	
	Элементы.ПолеКалендаряВыборДаты.Доступность = Ложь;
	ПриИзмененииНастроекФормирования();
	Элементы.ПолеКалендаряВыборДаты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтчета()
	
	// Сохранение текущего отбора и даты журнала записи
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ДатаНачала"			, Отчет.ДатаНачала);
	ПараметрыОтчета.Вставить("ДлинаПериода"			, ДлинаПериода);
	ПараметрыОтчета.Вставить("РежимФормирования"	, Отчет.РежимФормирования);
	ПараметрыОтчета.Вставить("Подразделение"		, Отчет.Подразделение);
	ПараметрыОтчета.Вставить("МодельРасписания"		, Отчет.МодельРасписания);
	ПараметрыОтчета.Вставить("Сотрудники"			, Отчет.Сотрудники);
	ПараметрыОтчета.Вставить("Филиал"				, Отчет.Филиал);
	ПараметрыОтчета.Вставить("Клиент"				, Клиент);
	
	ПараметрыСеанса.ЖурналЗаписиТекущиеПараметры = ЗначениеВСтрокуВнутр(ПараметрыОтчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьПараметрыОтчета()
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ЖурналЗаписиТекущиеПараметры) Тогда
		Попытка
			ПараметрыОтчета = ЗначениеИзСтрокиВнутр(ПараметрыСеанса.ЖурналЗаписиТекущиеПараметры);
		Исключение КонецПопытки;
		
		Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
			
			Возврат ПараметрыОтчета;	
			
		КонецЕсли;
	Иначе
		// Восстановление параметров ЖЗ между сенсами одного пользователя
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(, "СохранятьОтборЖурналаЗаписиМеждуСеансами") Тогда
			ПараметрыОтчета = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ФормаКалендарьПланирования","НастройкиОтборЖЗ");
			Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
				Возврат ПараметрыОтчета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСохраняемыеНастройкиФормы()
	
	// Сохранение текущего отбора и даты журнала записи
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ДлинаПериода"			, ДлинаПериода);
	// ПараметрыОтчета.Вставить("РежимФормирования"	, Отчет.РежимФормирования);
	ПараметрыОтчета.Вставить("Подразделение"		, Отчет.Подразделение);
	ПараметрыОтчета.Вставить("МодельРасписания"		, Отчет.МодельРасписания);
	ПараметрыОтчета.Вставить("Сотрудники"			, Отчет.Сотрудники);
	ПараметрыОтчета.Вставить("Филиал"				, Отчет.Филиал);
	
	// Сохранение настроек пользователя для списка задач
	НастройкиПанелиЗадач = Новый Структура;
	НастройкиПанелиЗадач.Вставить("ЗадачиРеквизитСрока",ЗадачиРеквизитСрока);
	НастройкиПанелиЗадач.Вставить("ЗадачиВидСравнения",ЗадачиВидСравнения);
	НастройкиПанелиЗадач.Вставить("ЗадачиДатаСравнения",ЗадачиДатаСравнения);
	
	Возврат Новый Структура("ПараметрыОтчета, НастройкиПанелиЗадач", ПараметрыОтчета, НастройкиПанелиЗадач);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(ПараметрыОтчета, НастройкиПанелиЗадач)

	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(, "СохранятьОтборЖурналаЗаписиМеждуСеансами") Тогда
		ХранилищеПользовательскихНастроекОтчетов.Сохранить("ФормаКалендарьПланирования", "НастройкиОтборЖЗ", ПараметрыОтчета);
	КонецЕсли;
	
	// Сохранение настроек пользователя для списка задач
	ХранилищеПользовательскихНастроекОтчетов.Сохранить("ФормаКалендарьПланирования", "НастройкиПанелиЗадач", НастройкиПанелиЗадач);

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСпискаЗадач()
	
	// Настройка отбора задач
	ЗадачиДатаСравнения = ТекущаяДата();
	
	ЗадачиВидСравнения = Неопределено;
	ЗадачиВидСравненияСписокВыбора = Элементы.ЗадачиВидСравнения.СписокВыбора;
	ЗадачиВидСравненияСписокВыбора.Добавить(Неопределено, "<Без отбора>");
	ЗадачиВидСравненияСписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Больше);
	ЗадачиВидСравненияСписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	ЗадачиВидСравненияСписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
	ЗадачиВидСравненияСписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	ЗадачиВидСравненияСписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	
	ЗадачиРеквизитСрока = "СрокИсполнения";
	ЗадачиРеквизитСрокаСписокВыбора = Элементы.ЗадачиРеквизитСрока.СписокВыбора;
	ЗадачиРеквизитСрокаСписокВыбора.Добавить("СрокИсполнения", "Исполнения");
	ЗадачиРеквизитСрокаСписокВыбора.Добавить("СрокОповещения", "Оповещения");
	
	// Восстановление пользовательских настроек
	Настройки = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ФормаКалендарьПланирования", "НастройкиПанелиЗадач");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Настройки.Свойство("ЗадачиРеквизитСрока", ЗадачиРеквизитСрока);
		Настройки.Свойство("ЗадачиДатаСравнения", ЗадачиДатаСравнения);
		Настройки.Свойство("ЗадачиВидСравнения", ЗадачиВидСравнения);
		Если ЗадачиВидСравненияСписокВыбора.НайтиПоЗначению(ЗадачиВидСравнения) = Неопределено Тогда
			ЗадачиВидСравнения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбъектТекущейКолонки()
	
	Возврат ПолучитьОбъектКолонки(Элементы.ДокументРезультат.ТекущаяОбласть.Лево);
	
КонецФункции

&НаКлиенте
Функция ПолучитьОбъектКолонки(Колонка)
	
	Перем ОбъектЯчейки;
	
	Для сч = 1 по 3 Цикл
		Область = ДокументРезультат.Область(сч, Колонка);
		Если ТипЗнч(Область.Расшифровка) = Тип("СправочникСсылка.Сотрудники") 
			Или ТипЗнч(Область.Расшифровка) = Тип("СправочникСсылка.Оборудование") 
//			Или ТипЗнч(Область.Расшифровка) = Тип("Дата") 
		Тогда
			ОбъектЯчейки = Область.Расшифровка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектЯчейки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровПустойЯчейки(Расшифровка, Объект)
	
	СтруктураПараметров = Новый Структура("ДатаНачала,ВремяНачала,ВремяОкончания,Сотрудник, Оборудование, Филиал");
	Если ТипЗнч(Расшифровка) <> Тип("ДокументСсылка.Заявка") Тогда
		
		СтруктураПараметров.ВремяНачала    = Расшифровка.Дата;
		СтруктураПараметров.ВремяОкончания = СтруктураПараметров.ВремяНачала;
		СтруктураПараметров.ДатаНачала     = НачалоДня(Расшифровка.Дата) + ОбщегоНазначенияКлиентСервер.ВремяВСекунды(СтруктураПараметров.ВремяНачала);
		Расшифровка.Свойство("Филиал", СтруктураПараметров.Филиал);
		Если Не ЗначениеЗаполнено(СтруктураПараметров.Филиал)
			И ЗначениеЗаполнено(Отчет.Филиал)
		Тогда
			СтруктураПараметров.Филиал = Отчет.Филиал;
		КонецЕсли;
		
		Если ТипЗнч(Объект)=Тип("СправочникСсылка.Сотрудники") Тогда
			СтруктураПараметров.Сотрудник = Объект;
			Если Расшифровка.Свойство("Субъект") Тогда
				СтруктураПараметров.Оборудование = Расшифровка.Субъект;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект)=Тип("СправочникСсылка.Оборудование") Тогда
			СтруктураПараметров.Оборудование = Объект;
			Если Расшифровка.Свойство("Субъект") Тогда
				СтруктураПараметров.Сотрудник = Расшифровка.Субъект;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаявкуПоЯчейкеЗаписи(РасшифровкаОбластиЯчеек)
	
	ОбъектРасписания = ПолучитьОбъектТекущейКолонки();
	Если ТипЗнч(РасшифровкаОбластиЯчеек) = Тип("Структура") Тогда
		ЗначенияЗаполнения = ПолучитьСтруктуруПараметровПустойЯчейки(РасшифровкаОбластиЯчеек, ОбъектРасписания);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначенияЗаполнения.Сотрудник)
		И Отчет.Сотрудники.Количество() = 1
		И ТипЗнч(Отчет.Сотрудники[0].Значение) = Тип("СправочникСсылка.Сотрудники")
	Тогда
		ЗначенияЗаполнения.Сотрудник = Отчет.Сотрудники[0].Значение;
	КонецЕсли;
	
	Если ТипЗнч(РасшифровкаОбластиЯчеек) = Тип("Структура") Тогда
		ЗначенияЗаполнения.Вставить("ДатаОкончания", ЗначенияЗаполнения.ДатаНачала + (РасшифровкаОбластиЯчеек.ВремяОкончания - РасшифровкаОбластиЯчеек.Время));
		ЗначенияЗаполнения.Вставить("ВремяОкончания", РасшифровкаОбластиЯчеек.ВремяОкончания);
		ЗначенияЗаполнения.Вставить("КоличествоВыбранныхЯчеек", РасшифровкаОбластиЯчеек.КоличествоВыбранныхЯчеек);
	Иначе
		ЗначенияЗаполнения.Вставить("КоличествоВыбранныхЯчеек", 1);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Клиент", Клиент);
	ИмяФилиал = ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов();
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.Филиал) Тогда
		ЗначенияЗаполнения.Вставить(ИмяФилиал, ЗначенияЗаполнения.Филиал);
	ИначеЕсли ЗначениеЗаполнено(Отчет.Филиал) Тогда
		ЗначенияЗаполнения.Вставить(ИмяФилиал, Отчет.Филиал);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущийДокументЗаписи) Тогда 
		ЗначенияЗаполнения.Вставить("Основание", ТекущийДокументЗаписи);
		Если ЗначениеЗаполнено(ТекущийКлиентДокументаЗаписи) Тогда 
			ЗначенияЗаполнения.Вставить("Клиент", ТекущийКлиентДокументаЗаписи);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяНоменклатураДокументаЗаписи) Тогда 
			ЗначенияЗаполнения.Вставить("Работы", ТекущаяНоменклатураДокументаЗаписи.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.Сотрудник) Тогда
		РежимДлительностиЗаявкиИПродолжительность = ПолучитьРежимДлительностиЗаявкиИПродолжительностьПоСотруднику(ЗначенияЗаполнения.Сотрудник);
		ЗначенияЗаполнения.Вставить("РежимДлительностиЗаявки", РежимДлительностиЗаявкиИПродолжительность["РежимДлительностиЗаявки"]);
		ЗначенияЗаполнения.Вставить("СредняяПродолжительность", РежимДлительностиЗаявкиИПродолжительность["СредняяПродолжительность"]);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, Оборудование",ЗначенияЗаполнения, ЗначенияЗаполнения.Оборудование);
	
	Если ТекущиеПараметрыЗаписи <> Неопределено Тогда
		ПараметрыФормы.Вставить("ПараметрыЗаписиПоДокументу", ТекущиеПараметрыЗаписи);
	КонецЕсли;
	
	ОткрытьФорму("Документ.Заявка.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРежимДлительностиЗаявкиИПродолжительностьПоСотруднику(Сотрудник)
	
	РежимДлительностиЗаявкиИПродолжительность = Новый Соответствие;
	
	РежимДлительностиЗаявкиИПродолжительность.Вставить("РежимДлительностиЗаявки", Сотрудник.РежимДлительностиЗаявки);
	РежимДлительностиЗаявкиИПродолжительность.Вставить("СредняяПродолжительность", Сотрудник.ДлительностьПриема);
	
	Если РежимДлительностиЗаявкиИПродолжительность["СредняяПродолжительность"] = Дата(1,1,1) Тогда
		РежимДлительностиЗаявкиИПродолжительность.Вставить("СредняяПродолжительность", Сотрудник.Специализация.ДлительностьПриема);
	КонецЕсли;
	
	Возврат РежимДлительностиЗаявкиИПродолжительность;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОказаниеУслугПоЯчейкеЗаписи(РасшифровкаОбластиЯчеек)
	Если ТипЗнч(РасшифровкаОбластиЯчеек) = Тип("ДокументСсылка.Заявка")	Тогда
		ДобавитьОказаниеУслуги(РасшифровкаОбластиЯчеек);
	ИначеЕсли ТипЗнч(РасшифровкаОбластиЯчеек) = Тип("Структура") Тогда
		ДобавитьОказаниеУслуги(,ПолучитьСтруктуруПараметровПустойЯчейки(РасшифровкаОбластиЯчеек,ПолучитьОбъектТекущейКолонки()));
	Иначе
		ДобавитьОказаниеУслуги();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПриёмПоЯчейкеЗаписи(РасшифровкаОбластиЯчеек,ТекущийКлиент)
	
	Объект = ПолучитьОбъектТекущейКолонки();
	Если Не СоздаватьПовторныеПриемыПоЗаявкеИзЖурналаЗаписи
		И мДанныеПриемовЗаявок <> Неопределено
	Тогда
		// Для кабинетов не реализовано автоопределение наличия приёма этого врача. Создается новый приём.
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
			Заявка = РасшифровкаОбластиЯчеек;
			ДанныеПриемовЗаявки = мДанныеПриемовЗаявок.Получить(Заявка);
			Если ДанныеПриемовЗаявки <> Неопределено Тогда
				
				ТекущийДень = НачалоДня(ТекущаяДата());
				НайденныеАналогичныеПриемы = Новый Массив;
				
				Для Каждого ДанныеПриемаЗаявки Из ДанныеПриемовЗаявки Цикл
					Если ДанныеПриемаЗаявки.Врач = Объект
						И НачалоДня(ДанныеПриемаЗаявки.Дата) = ТекущийДень
					Тогда
						НайденныеАналогичныеПриемы.Добавить(ДанныеПриемаЗаявки.Прием);
					КонецЕсли;
				КонецЦикла;
				
				Если НайденныеАналогичныеПриемы.Количество() = 1 Тогда
					ОткрытьФорму("Документ.Прием.ФормаОбъекта", Новый Структура("Ключ", НайденныеАналогичныеПриемы[0]));
					Возврат;
				ИначеЕсли НайденныеАналогичныеПриемы.Количество() > 1 Тогда
					
					ПриемыЗаявки = Новый Массив;
					Если ДанныеПриемовЗаявки <> Неопределено Тогда
						Для Каждого ДанныеПриемаЗаявки Из ДанныеПриемовЗаявки Цикл
							ПриемыЗаявки.Добавить(ДанныеПриемаЗаявки.Прием);
						КонецЦикла;
					КонецЕсли;
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Заявка", РасшифровкаОбластиЯчеек);
					ПараметрыФормы.Вставить("ПриемыЗаявки", ПриемыЗаявки);
					ПараметрыФормы.Вставить("Сотрудник", Объект);
					ОткрытьФорму("Документ.Заявка.Форма.ПриемыЗаявки", ПараметрыФормы);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если не дошли до ветки открытия существующего(их) приёмов, то попадаем сюда для создания нового приема.
	СоздатьНовыйПриёмПоЯчейкеЗаписи(РасшифровкаОбластиЯчеек, Объект, ТекущийКлиент);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйПриёмПоЯчейкеЗаписи(РасшифровкаОбластиЯчеек, Знач УчастникРасписания = Неопределено, ТекущийКлиент)
	
	Если УчастникРасписания = Неопределено Тогда
		УчастникРасписания = ПолучитьОбъектТекущейКолонки();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",Новый Структура("ДокументОснование", РасшифровкаОбластиЯчеек));
	Если ТипЗнч(УчастникРасписания) = Тип("СправочникСсылка.Сотрудники")
		И ЗначениеЗаполнено(УчастникРасписания)
	Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Врач", УчастникРасписания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийКлиент) Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Клиент", ТекущийКлиент);
	КонецЕсли; 
	
	ОткрытьФорму("Документ.Прием.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьЗаявку(Заявка) 
	Если ЗначениеЗаполнено(Заявка) Тогда                                    
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.ОтменитьЗаявку(УправлениеНастройками.ПолучитьЗначениеПараметраУчетнойПолитикиПоУмолчанию("ЗапрашиватьПричинуЗакрытияЗаявок"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОказаниеУслуги(Заявка = Неопределено, ЗначенияЗаполнения = Неопределено, ПараметрыОткрытия = Неопределено)
	
	Если Заявка = Неопределено Тогда
		ТекущийКлиент = Клиент;
	Иначе
		ТекущийКлиент = мДанныеЗаявок.Получить(Заявка);
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;                         
	РаботаСКлиентамиКлиентПереопределяемый.КалендарьПланированияОткрытьФормуВыбораКлиента(ПредопределенноеЗначение("Документ.ОказаниеУслуг.ПустаяСсылка"), Заявка, ТекущийКлиент, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если СоздатьОбщееОказаниеУслугПроверкаУсловий(Заявка) Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначенияЗаполнения = Неопределено Тогда
		ЗначенияЗаполнения = Новый Структура;
		Если ЗначениеЗаполнено(Заявка) Тогда
			ЗначенияЗаполнения.Вставить("ДокументОснование", Заявка);
		Иначе
			ПримерноеВремяОУ = ТекущаяДата();
			
			ЗначенияЗаполнения.Вставить("ДатаНачала", ПримерноеВремяОУ);
			ЗначенияЗаполнения.Вставить("ДатаОкончания", ПримерноеВремяОУ);
		КонецЕсли;
	Иначе
		ЗначенияЗаполнения.Вставить("ДатаОкончания", ЗначенияЗаполнения.ДатаНачала);
	КонецЕсли;		
	ЗначенияЗаполнения.Вставить("Дата", ТекущаяДата());
	ЗначенияЗаполнения.Вставить("Клиент", ТекущийКлиент);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	Если ЗначенияЗаполнения.Свойство("Оборудование") Тогда
		ПараметрыФормы.Вставить("Оборудование",ЗначенияЗаполнения.Оборудование);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
		Для Каждого КЗ Из ПараметрыОткрытия Цикл
			ПараметрыФормы.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта",ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюОткрытьКлиента(Команда)
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	Если ТипЗнч(Расшифровка)= Тип("ДокументСсылка.Заявка") Тогда
		ТекущийКлиент = ПолучитьЗначениеРеквизитаСсылки(Расшифровка,"Клиент");
		
		СтандартнаяОбработка = Истина;                         
		РаботаСКлиентамиКлиентПереопределяемый.КалендарьПланированияОткрытьФормуВыбораКлиента(Неопределено, Расшифровка, ТекущийКлиент, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьЗначение(ТекущийКлиент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиента(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаКлиентаУпр",,Элементы.Клиент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетВзаиморасчетыСКлиентом(Команда)
	РаботаСФормамиКлиент.ОткрытьОтчетКлиента("ВзаиморасчетыСКлиентами", Клиент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПродажи(Команда)
	РаботаСФормамиКлиент.ОткрытьОтчетКлиента("Продажи", Клиент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявкиКлиента(Команда)
	СтруктураПараметры = Новый Структура;
	Если ЗначениеЗаполнено(Клиент) Тогда
		СтруктураПараметры.Вставить("Отбор", Новый Структура("Клиент",Клиент));
	КонецЕсли;
	СтруктураПараметры.Вставить("ТолькоТекущие", Истина);
	ОткрытьФорму("Документ.Заявка.ФормаСписка", СтруктураПараметры);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаСсылки(Ссылка, ИмяРеквизита)
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции

&НаКлиенте
Процедура ИнформационныеСообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВнутреннийИдСообщения = Элемент.ТекущиеДанные.ВнутреннийИдСообщения;
	Если ВнутреннийИдСообщения = "ПревышениеМинимальныхОстатков" Тогда
		
		Форма = ПолучитьФорму("Отчет.МинимальныеОстаткиТоваров.ФормаОбъекта");
		Форма.УстановитьТекущийВариант("Анализ соответствия остатков материалов минимальным остаткам");
		Форма.СкомпоноватьРезультат();
		Форма.Открыть();
		
	ИначеЕсли ВнутреннийИдСообщения = "ПревышениеТочкиЗаказа" Тогда
		
		Форма = ПолучитьФорму("Отчет.МинимальныеОстаткиТоваров.ФормаОбъекта");
		Форма.УстановитьТекущийВариант("Анализ соответствия остатков материалов минимальным остаткам и точке предупреждения");
		Форма.СкомпоноватьРезультат();
		Форма.Открыть();
		
	ИначеЕсли ВнутреннийИдСообщения = "ПревышениеСрокаГодности" Тогда	
		
		Форма = ПолучитьФорму("Отчет.ВедомостьПоТоварамНаСкладах.ФормаОбъекта");
		Форма.УстановитьТекущийВариант("ПревышениеСрокаГодности");
		Форма.СкомпоноватьРезультат();
		Форма.Открыть();

		Форма.ПользовательскиеНастройкиМодифицированы = Ложь;
		Форма.ВариантМодифицирован = Ложь;		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационныеСообщения(Команда)
	ОбновитьНапоминания();
КонецПроцедуры

&НаКлиенте                                                   
Процедура ПодключитьАвтообновлениеОтчета()
	
	Если мУчетнаяПолитика.ПериодАвтообновленияЖурналаЗаписи <> 0 Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьАвтообновлениеОтчета", мУчетнаяПолитика.ПериодАвтообновленияЖурналаЗаписи, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьАвтообновлениеОтчета()
	
	ОтключитьОбработчикОжидания("ВыполнитьАвтообновлениеОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтообновлениеОтчета()
	
	Если ЭтаФорма.ВводДоступен() Тогда
		
		// При обновлении отчета сбросится текст редактирования полей ввода.
		// Подготавливаем информацию по редактированию полей Сотрудники, Модели расписания,
		// чтобы не обновлять отчет, если идёт редактирование.
		Если (ТекущийЭлемент = Элементы.Сотрудники
				Или ТекущийЭлемент = Элементы.МодельРасписания
				Или ТекущийЭлемент = Элементы.Клиент
				)
			И ЗначениеЗаполнено(ТекущийЭлемент.ТекстРедактирования)
		Тогда
			ТекстПоля = ?(ТекущийЭлемент = Элементы.Сотрудники, СотрудникиПредставление, МодельРасписанияПредставление);
		Иначе
			ТекстПоля = Неопределено
		КонецЕсли;
		
		Если ТекстПоля <> Неопределено И ТекстПоля <> ТекущийЭлемент.ТекстРедактирования Тогда
		   	// Не обновляем отчет, даем время на завершение ввода в поле отбора.
			ОтключитьАвтообновлениеОтчета();
			ПодключитьОбработчикОжидания("ВыполнитьАвтообновлениеОтчета", 2, Истина);
			
		Иначе
			
			ОбновитьОтчет(Ложь);
		
		КонецЕсли;
				
	Иначе
		ПодключитьОбработчикОжидания("ПроверкаНеобходимостиВыполненияОтложенногоАвтообновленияОтчета", 1, Ложь);
		ОтключитьАвтообновлениеОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНеобходимостиВыполненияОтложенногоАвтообновленияОтчета()
	
	Если ЭтаФорма.ВводДоступен() Тогда
		ОтключитьОбработчикОжидания("ПроверкаНеобходимостиВыполненияОтложенногоАвтообновленияОтчета");
		ОбновитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОтображенияЯчеекГрафиковРаботы()
	
	ПоляЯчеек = Справочники.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка.ОтображениеВидовВремениКабинетовСотрудников;
	
	// Формирую для передачи на Клиент состав и порядок отображения ячеек кабинетов, сотрудников и видов времени.
	Результат = Новый Структура("ПоляЯчейки, ПоляПримечания", Новый Массив, Новый Массив);
	
	Для Каждого Строка Из ПоляЯчеек Цикл
		Если Строка.ВПримечанииЯчейки Тогда
			ТекНастройка = Результат.ПоляПримечания;
		Иначе
			ТекНастройка = Результат.ПоляЯчейки;
		КонецЕсли;
		ТекНастройка.Добавить(Новый Структура("Поле, ТолькоВПервойСтроке", Строка.Поле, Строка.ТолькоВПервойСтроке));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыОтображенияЯчеекГрафиковРаботыДополнитьНаКлиенте(ПараметрыОтображения)
	
	КлючиПолейГрафика = Новый Соответствие;
	КлючиПолейГрафика.Вставить(ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.Время"),			 "ПолеВремя");
	КлючиПолейГрафика.Вставить(ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.ВидВремениГрафика"), "ПолеВидВремени");
	КлючиПолейГрафика.Вставить(ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.КабинетСотрудник"),	 "ПолеСубъект2");
	КлючиПолейГрафика.Вставить(ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.Филиал"),			 "ПолеФилиал");
	
	ЕстьВыводФилиала = Ложь;
	ЕстьВыводСубъекта = Ложь;
	
	Для Каждого кзПараметрыОбображения Из ПараметрыОтображения Цикл
		Для Каждого СтруктураЯчейки Из кзПараметрыОбображения.Значение Цикл
			СтруктураЯчейки.Вставить("ПолеВремя",		 Ложь);
			СтруктураЯчейки.Вставить("ПолеВидВремени",	 Ложь);
			СтруктураЯчейки.Вставить("ПолеСубъект2",	 Ложь);
			СтруктураЯчейки.Вставить("ПолеФилиал",		 Ложь);
			
			ИмяПоля = КлючиПолейГрафика.Получить(СтруктураЯчейки.Поле);
			Если ИмяПоля <> Неопределено Тогда
				СтруктураЯчейки[ИмяПоля] = Истина;
			КонецЕсли;
		
			// Флаги вывода дополнительных представлений
			Если СтруктураЯчейки.Поле = ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.Филиал") Тогда
				ЕстьВыводФилиала = Истина;
			КонецЕсли;
			Если СтруктураЯчейки.Поле = ПредопределенноеЗначение("Перечисление.ПоляОтображенияГрафикаВРасписании.КабинетСотрудник") Тогда
				ЕстьВыводСубъекта = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьВыводФилиала Тогда
		ПараметрыОтображения.Вставить("ЕстьВыводФилиала", Истина);
	КонецЕсли;
	Если ЕстьВыводСубъекта Тогда
		ПараметрыОтображения.Вставить("ЕстьВыводСубъекта", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасположитьКартинкиЖЗ(ОтступыКартинок, ШиринаКартинки)
	
	Для Каждого Рисунок Из ДокументРезультат.Рисунки Цикл
		Рисунок.Ширина = ШиринаКартинки;
		Рисунок.Высота = ШиринаКартинки;
		Рисунок.ЦветФона = Новый Цвет;
		ОтступКартинки = ОтступыКартинок.Получить(Рисунок.Имя);
		Если ЗначениеЗаполнено(ОтступКартинки) Тогда
			Рисунок.Лево = Рисунок.Лево + ОтступКартинки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API).

// Функция осуществляет обработку считывания штрих-кода клиенты
//
// Параметры:
//  Клиент   - <СправочникСсылка.Клиенты>
//                 - клиент, штрих-код которой был отсканирован.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
&НаКлиенте
Функция СШККлиент(фКлиент, СШК) Экспорт
	
	Клиент=фКлиент;
	ОбработкаПодбораКлиента(Клиент);
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет обработку считывания штрих-кода клиенты
//
// Параметры:
//  Клиент   - <СправочникСсылка.Клиенты>
//                 - клиент, штрих-код которой был отсканирован.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
&НаКлиенте
Функция СШКСертификат(Сертификат, СШК) Экспорт
	
	Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "ВладелецКарты");
	СтруктураПараметров = Новый Структура("ДатаНачала,Сотрудник");
	СтруктураПараметров.ДатаНачала = ТекущаяДата();                           
	СтруктураПараметров.Вставить("Клиент",Клиент);	
	СтруктураПараметров.Вставить("Сертификат",Сертификат);
	
	ДобавитьПараметрСотрудникПоРасшифровкеОбласти(СтруктураПараметров);
	
	ДобавитьОказаниеУслуги(,СтруктураПараметров);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКНоменклатура(ДанныеНоменклатуры, СШК) Экспорт
	
	Номенклатура				= ДанныеНоменклатуры.Номенклатура;
	Количество					= ДанныеНоменклатуры.Количество;
	ХарактеристикаНоменклатуры	= ДанныеНоменклатуры.ХарактеристикаНоменклатуры;
	Единица						= ДанныеНоменклатуры.ЕдиницаИзмерения;
	Цена						= ДанныеНоменклатуры.Цена;
	СерияНоменклатуры			= ДанныеНоменклатуры.СерияНоменклатуры;
	Штрихкод					= ДанныеНоменклатуры.Штрихкод;
	
	СтруктураПараметров = Новый Структура("Номенклатура, Единица, ХарактеристикаНоменклатуры, СерияНоменклатуры", Номенклатура, Единица, ХарактеристикаНоменклатуры, СерияНоменклатуры);
	ДобавитьОказаниеУслуги(,,СтруктураПараметров);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШККарта(Карта, КартаКлиент, СШК) Экспорт
	
	Если ЗначениеЗаполнено(КартаКлиент) Тогда
		Клиент = КартаКлиент;
		ОбработкаПодбораКлиента(Клиент,Карта);
	Иначе	
		ЗначенияЗаполнения = Новый Структура;
		ПримерноеВремяОУ = ТекущаяДата();
			
		ЗначенияЗаполнения.Вставить("ДатаНачала", ПримерноеВремяОУ);
		ЗначенияЗаполнения.Вставить("ДатаОкончания", ПримерноеВремяОУ);
		ЗначенияЗаполнения.Вставить("КартаКлиента", Карта);
		ДобавитьОказаниеУслуги(Неопределено, ЗначенияЗаполнения);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СШКМедКарта(МедКарта, ВладелецКарты, СШК) Экспорт

	Результат = Истина;

	Если ЗначениеЗаполнено(ВладелецКарты) Тогда
		Клиент = ВладелецКарты;
		ОбработкаПодбораКлиента(Клиент);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
	ПоказатьПредупреждение(,НСтр("ru='Нейзвестный штрихкод! Данный штрихкод не присвоен ни одному объекту!'"));
	Возврат Истина;
	
КонецФункции // СШКНеизвестныйКод()

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
&НаКлиенте
Функция СМКМагнитнаяКарта(МагнитнаяКарта, СМК) Экспорт

	Результат = Истина;

	Если ТипЗнч(МагнитнаяКарта) = Тип("СправочникСсылка.Клиенты") Тогда
		Клиент = МагнитнаяКарта;
		ОбработкаПодбораКлиента(Клиент);
	ИначеЕсли ТипЗнч(МагнитнаяКарта) = Тип("СправочникСсылка.КартыСкидок") Тогда
		СШККарта(МагнитнаяКарта, МагнитнаяКарта.ВладелецКарты, Неопределено);	
	ИначеЕсли ТипЗнч(МагнитнаяКарта) = Тип("СправочникСсылка.Сертификаты") Тогда
		СШКСертификат(МагнитнаяКарта, "");
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
&НаКлиенте
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

///////////////////////////////////////////////////////////////////////////////
// end ФУНКЦИИ ОБСЛУЖИВАНИЯ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ.

// Дополняет структуру параметров данными расшифровки
&НаКлиенте
Процедура ДобавитьПараметрСотрудникПоРасшифровкеОбласти(СтруктураПараметров)
	
	ТекущаяОбласть = Элементы.ДокументРезультат.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено	Тогда
		
		Расшифровка = ТекущаяОбласть.Расшифровка;
		Если ТипЗнч(Расшифровка)= Тип("Структура") Тогда
			СтруктураПараметровРасшифровки = ПолучитьСтруктуруПараметровПустойЯчейки(ТекущаяОбласть.Расшифровка,ПолучитьОбъектТекущейКолонки());
			Если СтруктураПараметровРасшифровки.Свойство("Сотрудник") Тогда
				СтруктураПараметров.Вставить("Сотрудник",СтруктураПараметровРасшифровки.Сотрудник);
			КонецЕсли;
			Если СтруктураПараметровРасшифровки.Свойство("Оборудование") Тогда
				СтруктураПараметров.Вставить("Оборудование",СтруктураПараметровРасшифровки.Оборудование);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Расшифровка)= тип("ДокументСсылка.Заявка") Тогда
			СтруктураПараметров.Вставить("Сотрудник",Расшифровка.Сотрудник);
			
		ИначеЕсли ТипЗнч(Расшифровка)= тип("СправочникСсылка.Сотрудники") Тогда
			СтруктураПараметров.Вставить("Сотрудник",Расшифровка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораКлиента(Клиент,КартаКлиента = Неопределено)
	
	МассивСертификатов = СертификатыКлиентов.ПолучитьМассивСертификатовКлиента(Клиент);
	
	Сертификат = Неопределено;
	Если МассивСертификатов.Количество() = 1 Тогда
		Сертификат = МассивСертификатов[0];
	ИначеЕсли МассивСертификатов.Количество() > 1 Тогда
		
		// Вариант реализации выбора через форму списка (работает)
		ФормаВыборка = ПолучитьФорму("Справочник.Сертификаты.ФормаВыбора");// Справочники.Сертификаты.ПолучитьФормуВыбора("ФормаСписка");
		спСертификаты = Новый СписокЗначений;
		спСертификаты.ЗагрузитьЗначения(МассивСертификатов);
		ОтборПометка = ФормаВыборка.Список.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));	
		ОтборПометка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборПометка.ЛевоеЗначение = ФормаВыборка.Список.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Ссылка").Поле;
		ОтборПометка.ПравоеЗначение = спСертификаты;
		ОтборПометка.Использование = Истина;
		
		Сертификат = ФормаВыборка.ОткрытьМодально();
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ДатаНачала,Сотрудник");
	СтруктураПараметров.ДатаНачала = ТекущаяДата();
	СтруктураПараметров.Вставить("Клиент",Клиент);	
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		СтруктураПараметров.Вставить("Сертификат",Сертификат);
	КонецЕсли;

	ДобавитьПараметрСотрудникПоРасшифровкеОбласти(СтруктураПараметров);
	Если КартаКлиента <> Неопределено тогда
		СтруктураПараметров.Вставить("КартаКлиента",КартаКлиента);		
	КонецЕсли;
	
	Если мУчетнаяПолитика.СпособОбработкиСчитыванияШкКлиентаВЖЗ = 0 Тогда   	// Создание ОУ
		Состояние(НСтр("ru='Открывается новое оказание услуг...'"));
		ДобавитьОказаниеУслуги(,СтруктураПараметров);
	ИначеЕсли мУчетнаяПолитика.СпособОбработкиСчитыванияШкКлиентаВЖЗ = 1 Тогда  // Создание заявки
		Состояние(НСтр("ru='Открывается новая заявка...'"));
		ДобавитьЗаявкуПоЯчейкеЗаписи(ПолучитьРасшифровкуЯчейки());
	ИначеЕсли мУчетнаяПолитика.СпособОбработкиСчитыванияШкКлиентаВЖЗ = 2 Тогда  // Открытие карты клиента
		Состояние(НСтр("ru='Открывается карточка клиента...'"));
		РаботаСФормамиКлиент.ОткрытьФормуСсылочногоЗначения(Клиент);
	Иначе
		Состояние(НСтр("ru='Клиент заполнен'"));                           // Иначе - только подстановка
	КонецЕсли;                                                 
		
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоОтбора()
	
	ДеревоОтбора.ПолучитьЭлементы().Очистить();
	
	// 1. Корень
	СтрокаКорень = ДеревоОтбора.ПолучитьЭлементы().Добавить();
	Если ЗначениеЗаполнено(Отчет.Филиал) Тогда
		СтрокаКорень.Значение = Отчет.Филиал;
	Иначе
		СтрокаКорень.Значение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
	// 2. Подразделения и сотрудники
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Подразделение КАК Подразделение,
	|	0 КАК Порядок,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Подразделение.Наименование КАК ПодразделениеНаименование
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.УчаствуетВКалендарномПланировании
	|	//%ОтборФилиал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Оборудование.Ссылка,
	|	Оборудование.Подразделение,
	|	1 КАК Порядок,
	|	Оборудование.Наименование,
	|	Оборудование.Подразделение.Наименование
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ГДЕ
	|	Оборудование.УчаствуетВКалендарномПланировании
	|	//%ОтборФилиал
	|ОБЪЕДИНИТЬ ВСЕ
	|                                     
	|ВЫБРАТЬ
	|	Неопределено,
	|	Подразделения.Ссылка,
	|	2 КАК Порядок,
	|	"""",
	|	Наименование
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ  
	|	Подразделения.ВсегдаПоказыватьВОтбореЖурналаЗаписи
	|	//%ОтборСсылкаФилиал
	|УПОРЯДОЧИТЬ ПО
	|	ПодразделениеНаименование,
	|	Порядок,
	|	Наименование
	|ИТОГИ ПО
	|	Подразделение"
	;
	Если ПараметрыСеанса.УчетПоНесколькимФилиалам
		И ЗначениеЗаполнено(Отчет.Филиал) 
	Тогда
		Запрос.УстановитьПараметр("Филиал",Отчет.Филиал);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//%ОтборФилиал"," И (Подразделение.Филиал = &Филиал
												 | Или Подразделение.Филиал = Значение(Справочник.Филиалы.ПустаяСсылка))");
												 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//%ОтборСсылкаФилиал"," И (Филиал = &Филиал 
												 | Или Филиал = Значение(Справочник.Филиалы.ПустаяСсылка))");
	КонецЕсли;
	
	ВыбПодразделения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыбПодразделения.Следующий() Цикл
		
		СтрокаПодразделения = СтрокаКорень.ПолучитьЭлементы().Добавить();
		СтрокаПодразделения.Значение = ВыбПодразделения.Подразделение;
		
		ВыбСотрудники = ВыбПодразделения.Выбрать();
		Пока ВыбСотрудники.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыбСотрудники.Сотрудник) Тогда
				СтрокаСотрудник = СтрокаПодразделения.ПолучитьЭлементы().Добавить();
				СтрокаСотрудник.Значение = ВыбСотрудники.Сотрудник;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуДереваОтбора(УровеньДерева)

	Для Каждого СтрокаДерева Из УровеньДерева.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Значение = Отчет.Подразделение Тогда
			Элементы.ДеревоОтбора.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			Возврат;
		Иначе
			УстановитьТекущуюСтрокуДереваОтбора(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекФормирования()
	Отчет.ДатаОкончания = Отчет.ДатаНачала + (ДлинаПериода - 1) * 86400;
	ОбновитьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура РежимФормированияПриИзменении(Элемент)
	
	НастроитьВидимостьДлиныДнейФормирования();
	ПриИзмененииНастроекФормирования();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДлиныДнейФормирования()
	Элементы.ДлинаПериода.Видимость	= Отчет.РежимФормирования = мРежимыФормирования.Период;
	Элементы.НадписьДней.Видимость	= Отчет.РежимФормирования = мРежимыФормирования.Период;
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПериодаПриИзменении(Элемент)
	Если ДлинаПериода = 0 Тогда 
		ДлинаПериода = 1;
	КонецЕсли;
	ПриИзмененииНастроекФормирования();
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	мКлиентВзятИзДанныхЗаявки = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущейДате(Команда)
	
	Отчет.ДатаНачала = ТекущаяДата();
	Элемент = Элементы.ПолеКалендаряВыборДаты;
	Элемент.ВыделенныеДаты.Очистить();
	Элемент.ВыделенныеДаты.Добавить(Отчет.ДатаНачала);
	ПолеКалендаряВыборДатыПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтбораПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаДереваОтбора = Элемент.ТекущаяСтрока Тогда
		Возврат
	Иначе
		ТекущаяСтрокаДереваОтбора = Элемент.ТекущаяСтрока;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Отчет.Подразделение = Элемент.ТекущиеДанные.Значение;
	КонецЕсли;
	
	Если ИдётОткрытиеОтчета Тогда
		ИдётОткрытиеОтчета = Ложь
	Иначе
		ОбновитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	Если мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания Тогда
		
		СписокВыбора = Элементы.МодельРасписания.СписокВыбора;
		СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДоступныхМоделей(Отчет.Филиал));
		
		мОбрИнд = Отчет.МодельРасписания.Количество()-1;
		Для сч = 0 по мОбрИнд Цикл
			ЭлементСписка = Отчет.МодельРасписания[мОбрИнд-сч];
			Если СписокВыбора.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
				Отчет.МодельРасписания.Удалить(мОбрИнд-сч);
			КонецЕсли;
		КонецЦикла;
		
		Если мУчетнаяПолитика.ФормироватьЖурналЗаписиБезОтбора Тогда
			ОбновитьОтчет();
		КонецЕсли;
	Иначе
		СформироватьДеревоОтбора();
		Элементы.ДеревоОтбора.Обновить();
		
		Если ДеревоОтбора.ПолучитьЭлементы().Количество() <> 0 Тогда
			Элементы.ДеревоОтбора.Развернуть(ДеревоОтбора.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
		КонецЕсли;
		Подразделение = ДеревоОтбора.ПолучитьЭлементы()[0].Значение;
		ОбновитьОтчет();
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхМоделей(Филиал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МоделиРасписания.Ссылка
	|ИЗ
	|	Справочник.МоделиРасписания КАК МоделиРасписания
	|ГДЕ
	|	НЕ МоделиРасписания.ЭтоГруппа
	|	И (МоделиРасписания.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ МоделиРасписания.Филиал = &Филиал
	|			ИЛИ &Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	|	И НЕ МоделиРасписания.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоделиРасписания.Наименование"
	;
	Запрос.УстановитьПараметр("Филиал", ?(ПараметрыСеанса.УчетПоНесколькимФилиалам,Филиал, Справочники.Филиалы.ПустаяСсылка()));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииМодельРасписания()
	
	Отчет.Сотрудники.Очистить();
	СотрудникиПредставление = Строка(Отчет.Сотрудники);
	ОбновитьСписокВыбораСотрудников(Элементы.Сотрудники, Отчет.МодельРасписания);
	МодельРасписанияПредставление = Строка(Отчет.МодельРасписания);
	ОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельРасписанияПриИзменении(Элемент)
	ПриИзмененииМодельРасписания();
КонецПроцедуры

&НаКлиенте
Процедура МодельРасписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("СписокВыбранных, Филиал", Отчет.МодельРасписания.ВыгрузитьЗначения(), Отчет.Филиал);
	
	РезультатВыбора = ОткрытьФормуМодально("Отчет.КалендарьПланирования.Форма.ФормаПодбораСпискаОтбора", ПараметрыФормы);
	Если РезультатВыбора <> Неопределено Тогда
		Отчет.МодельРасписания.ЗагрузитьЗначения(РезультатВыбора);
	КонецЕсли;
	ПриИзмененииМодельРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельРасписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Отчет.МодельРасписания.ЗагрузитьЗначения(ВыбранноеЗначение.ВыгрузитьЗначения());
	Иначе
		Отчет.МодельРасписания.Очистить();
		Отчет.МодельРасписания.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	ПриИзмененииМодельРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельРасписанияОчистка(Элемент, СтандартнаяОбработка)
	
	Отчет.МодельРасписания.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораСотрудников(ЭлементСотрудники, МодельРасписания)
	
	ЭлементСотрудники.СписокВыбора.Очистить();
	
	СотрудникиДляСпискаВыбора = ПолучитьСписокОтбораСотрудников(МодельРасписания);
	Для Каждого ЭлементСписка Из СотрудникиДляСпискаВыбора Цикл
		ЭлементСотрудники.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезконтекста
Функция ПолучитьСписокОтбораСотрудников(МодельРасписания, ТекстПоиска = "")
	
	Результат = Новый Массив;
	
	// МодельРасписания - список значений	
	Если МодельРасписания.Количество() > 0 Тогда
		УчастникиМодели = КалендарьПланирования.ПолучитьУчастниковМоделиРасписания(МодельРасписания);
		Результат = ДопСерверныеФункции.ПредставленияМассиваСсылок(УчастникиМодели);
	Иначе
		Результат = КалендарьПланирования.ВсеСотрудникиУчаствующиеВРасписании(ТекстПоиска);
		Если Результат.Количество() > ЛимитЭлементовСпискаВыбораУчастниковРасписания() Тогда
			Результат.Очистить(); // Поиск в списке будет только по подстроке и отдельным запросом.
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезконтекста
Функция ЛимитЭлементовСпискаВыбораУчастниковРасписания()
	Возврат 800; // Лимит около 0,25 секунд на добавление всех в список выбора.
КонецФункции

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	ОбновитьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("СписокВыбранных, ВыборСубъектовЖурналаЗаписи, Филиал", Отчет.Сотрудники.ВыгрузитьЗначения(), Истина, Отчет.Филиал);
	Если ЗначениеЗаполнено(Отчет.МодельРасписания) Тогда
		ПараметрыФормы.Вставить("СписокВыбора", Элемент.СписокВыбора);
	Иначе
		ПараметрыФормы.Вставить("СписокВыбора", Неопределено);
	КонецЕсли;
	
	РезультатВыбора = ОткрытьФормуМодально("Отчет.КалендарьПланирования.Форма.ФормаПодбораСпискаОтбора", ПараметрыФормы);
	Если РезультатВыбора <> Неопределено Тогда
		Отчет.Сотрудники.ЗагрузитьЗначения(РезультатВыбора);
		СотрудникиПредставление = Строка(Отчет.Сотрудники);
	КонецЕсли;
	ОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Отчет.Сотрудники.ЗагрузитьЗначения(ВыбранноеЗначение.ВыгрузитьЗначения());
	Иначе
		Отчет.Сотрудники.Очистить();
		Отчет.Сотрудники.Добавить(ВыбранноеЗначение);
		СотрудникиПредставление = Строка(Отчет.Сотрудники);
	КонецЕсли;
	ОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОчистка(Элемент, СтандартнаяОбработка)
	
	Отчет.Сотрудники.Очистить();
	СотрудникиПредставление = Строка(Отчет.Сотрудники);

	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	// Обработчик требуется только для баз, где из-за количества сотрудников они не загружаются в список выбора.
	Если Элементы.Сотрудники.СписокВыбора.Количество() = 0
		И Не ПустаяСтрока(Текст)
	Тогда
		ДанныеВыбора = ПолучитьСписокОтбораСотрудников(Новый Массив, Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СотрудникиПредставление = Строка(Отчет.Сотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура МодельРасписанияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	МодельРасписанияПредставление = Строка(Отчет.МодельРасписания);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенныеСМС_ТекВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	#Если ТолстыйКлиентУправляемоеПриложение  Или ТолстыйКлиентОбычноеПриложение Тогда
	ОткрытьЗначение(ВыбраннаяСтрока.Рассылка);
	#Иначе
	ОткрытьЗначение(ДопСерверныеФункции.ПолучитьРеквизит(ВыбраннаяСтрока, "Рассылка"));
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленныеSMS(Команда)
	СМС_ФормированиеСообщений.ОтправитьВсеНеотправленныеСообщения(ОбработкаSMSРассылки);
	ПодключитьОбработчикОжидания("ОтправитьНеотправленныеSMS_ПослеОтправки", 10, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленныеSMS_ПослеОтправки() Экспорт
	Элементы.НазначенныеСМС_Тек.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ДокументРезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ОткрытьКонтекстноеМеню",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтекстноеМеню()
	
	СписокКоманд = ПолучитьСписокМенюЖурналаЗаписи(ПолучитьРасшифровкуЯчейки(), ПолучитьОбъектТекущейКолонки());
	элКоманда = ВыбратьИзМеню(СписокКоманд, Элементы.ДокументРезультат);
	Если элКоманда <> Неопределено Тогда
		Команда = Команды.Найти(элКоманда.Значение);
		Выполнить(Команда.Действие+"(Команда)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачи(Команда = Неопределено, Автообновление = Ложь)
	
	ЗадачиИНапоминания.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	
	Если Не Автообновление Тогда
		
		// Установка отбора по сроку.
		ОтборПоСрокуИсполнения = Ложь;
		ОтборПоСрокуОповещения = Ложь;
		
		Если ЗадачиВидСравнения <> Неопределено
			И ЗначениеЗаполнено(ЗадачиДатаСравнения)
			И ЗначениеЗаполнено(ЗадачиРеквизитСрока)
		Тогда
			ОтборПоСрокуИсполнения = ЗадачиРеквизитСрока = "СрокИсполнения";
			ОтборПоСрокуОповещения = ЗадачиРеквизитСрока = "СрокОповещения";
		КонецЕсли;
		
		Если ОтборПоСрокуИсполнения Тогда
			РаботаСФормамиКлиент.УстановитьОтборСписка("СрокИсполнения", ЗадачиДатаСравнения, ЗадачиИНапоминания, ЗадачиВидСравнения);
		Иначе
			РаботаСФормамиКлиент.СнятьОтборСписка("СрокИсполнения", ЗадачиИНапоминания);
		КонецЕсли;
		Если ОтборПоСрокуОповещения  Тогда
			РаботаСФормамиКлиент.УстановитьОтборСписка("СрокОповещения", ЗадачиДатаСравнения, ЗадачиИНапоминания, ЗадачиВидСравнения);
		Иначе
			РаботаСФормамиКлиент.СнятьОтборСписка("СрокОповещения", ЗадачиИНапоминания);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ЗадачиИНапоминания.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	ВыбЗадача = Элементы.ЗадачиИНапоминания.ТекущиеДанные.ЗадачаСсылка;
	ОткрытьЗначение(ВыбЗадача);
	               
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтметитьВыполнениеЗадачи(ЗадачаСсылка)
	
	ВыбЗадача = ЗадачаСсылка.ПолучитьОбъект();
	ВыбЗадача.Выполнена = Истина;
	ВыбЗадача.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Выполнено(Команда)
	
	ВыбЗадача = Элементы.ЗадачиИНапоминания.ТекущиеДанные.ЗадачаСсылка;
	ОтметитьВыполнениеЗадачи(ВыбЗадача);
	ОбновитьЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиИНапоминанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбЗадача = Элемент.ТекущиеДанные.ЗадачаСсылка;
	ОткрытьЗначение(ВыбЗадача);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтложитьЗадачу(ЗадачаСсылка, ЗначениеОтложенногоВремени)
	
	ВыбЗадача = ЗадачаСсылка.ПолучитьОбъект();
	ВыбЗадача.СрокОповещения = Макс(НачалоМинуты(ТекущаяДата()),ВыбЗадача.СрокОповещения) + ЗначениеОтложенногоВремени;
	ВыбЗадача.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	ШагПрохода = 0;
	
	Пока ШагПрохода <= Элементы.ЗадачиИНапоминания.ВыделенныеСтроки.Количество() - 1 Цикл
		ВыбЗадача = Элементы.ЗадачиИНапоминания.ТекущиеДанные.ЗадачаСсылка;
		ОтложитьЗадачу(ВыбЗадача, ЗначениеОтложенногоВремени);
		ШагПрохода = ШагПрохода + 1;
	КонецЦикла;
	
	ОбновитьЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНазначения(Команда)
	ФормаНазначений = ПолучитьФорму("ОбщаяФорма.ФормаЗапланированныеПроцедуры");
	ФормаНазначений.Клиент = Клиент;
	ФормаНазначений.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьМедкарту(Команда)
	
	Заявка = ПолучитьРасшифровкуЯчейки();
	ПараметрыОткрытия = Новый Структура("Заявка, МедКарта, Клиника", 
										Заявка,
										ПолучитьМедкартуЗаявки(Заявка),
										Отчет.Филиал);
										
	ФормаММ = ПолучитьФорму("ОбщаяФорма.ФормаМестонахожденияМедкарты", ПараметрыОткрытия);
	ФормаММ.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИВыдатьМедкарту(Команда)
	
	Заявка = ПолучитьРасшифровкуЯчейки();
	
	Если Вопрос(НСтр("ru='Медицинская карта не создана, 
		|Создать?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура("Основание", Заявка);
		ФормаМедКарты = ПолучитьФорму("Справочник.МедицинскиеКарты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		рез = ФормаМедКарты.ОткрытьМодально();
		
	Иначе
		Возврат;
	КонецЕсли;
	
	МедКарта = ПолучитьМедкартуЗаявки(Заявка);
	
	Если ЗначениеЗаполнено(МедКарта) Тогда
		ПараметрыОткрытия = Новый Структура("Заявка, МедКарта, Клиника", 
											Заявка,
											МедКарта,
											Отчет.Филиал);
		ФормаММ = ПолучитьФорму("ОбщаяФорма.ФормаМестонахожденияМедкарты", ПараметрыОткрытия);
		ФормаММ.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМедкарту(Команда)
	
	Заявка = ПолучитьРасшифровкуЯчейки();
	ПараметрыОткрытия = Новый Структура("Заявка, МедКарта, ВозвратКарты, Клиника", 
										Заявка,
										ПолучитьМедкартуЗаявки(Заявка),
										Истина,
										Отчет.Филиал);
										
	ФормаММ = ПолучитьФорму("ОбщаяФорма.ФормаМестонахожденияМедкарты", ПараметрыОткрытия);
	ФормаММ.Открыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМедкартуЗаявки(Заявка)
	
	Отбор = Новый Структура("Заявка", Заявка);
	мсСтр = МестонахождениеМедКарт.НайтиСтроки(Отбор);
	Если мсСтр.Количество() <> 0 Тогда
		Возврат мсСтр[0].МедКарта;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура СоздатьОчередьНаЗапись(Команда)
	ФормаПостановки = ПолучитьФорму("Документ.ЛистОжидания.ФормаОбъекта");
	ФормаПостановки.Объект.Клиент = Клиент;
	ФормаПостановки.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуПоОчереди(Команда)
	
	ТекущиеДанные = Элементы.ДокументыОчереди.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормыЗаявки = Новый Структура("Основание", Элементы.ДокументыОчереди.ТекущаяСтрока);
		ФормаЗаявки = ПолучитьФорму("Документ.Заявка.ФормаОбъекта", ПараметрыФормыЗаявки);
		ФормаЗаявки.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПостановкуВОчередьКонтекстно(Команда)
	
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	ЗначенияЗаполнения = ПолучитьСтруктуруПараметровПустойЯчейки(Расшифровка,ПолучитьОбъектТекущейКолонки());
	
	Если Не РаботаСКлиентамиПереопределяемый.ЭтоГрупповаяЗаявка(Клиент) Тогда
		ЗначенияЗаполнения.Вставить("Клиент", Клиент);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка") Тогда
		ПараметрыФормы.Вставить("Основание", Расшифровка);
	Иначе
		Если ЗначениеЗаполнено(ЗначенияЗаполнения.ДатаНачала) Тогда
			ЗначенияЗаполнения.Вставить("ДатаНачалаПлан", НачалоДня(ЗначенияЗаполнения.ДатаНачала));
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияЗаполнения.Удалить("ДатаНачала");
	ЗначенияЗаполнения.Удалить("ВремяНачала");
	ЗначенияЗаполнения.Удалить("ВремяОкончания");
	
	ОткрытьФорму("Документ.ЛистОжидания.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПозициюОчередиЗаписи(Команда)
	
	ТекущиеДанные = Элементы.ДокументыОчереди.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УдалитьПозициюОчередиЗаписиСервер(Элементы.ДокументыОчереди.ТекущаяСтрока);
		Элементы.ДокументыОчереди.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПозициюОчередиЗаписиСервер(Документ)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюВырезать(Команда)
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка") Тогда
		БуферОбменаЗаявка = Расшифровка;
		БуферОбменаПоследняяОперацияВырКоп = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюКопировать(Команда)
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Заявка") Тогда
		БуферОбменаЗаявка = Расшифровка;
		БуферОбменаПоследняяОперацияВырКоп = 0;
	КонецЕсли;
КонецПроцедуры

// Коды операций
// 0 - копировать
// 1 - вырезать
// 2 - вставить после вырезания.
&НаКлиенте
Процедура КонтекстноеМенюВставить(Команда)
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	Если БуферОбменаЗаявка.Пустая() Тогда
		Состояние(НСтр("ru='Заявка для вставки не скорпирована(не вырезана)!'"));
		Возврат;
	КонецЕсли;
	
	// Переименование полей заполнения под реквизиты документа.
	ЗначенияЗаполнения = ПолучитьСтруктуруПараметровПустойЯчейки(Расшифровка,ПолучитьОбъектТекущейКолонки());
	Если ЗначенияЗаполнения.Свойство("Оборудование") И ЗначениеЗаполнено(ЗначенияЗаполнения.Оборудование) Тогда
		ЗначенияЗаполнения.Вставить("Кабинет", ЗначенияЗаполнения.Оборудование);
		ЗначенияЗаполнения.Удалить("Оборудование");
	КонецЕсли;
	
	// Выполнение операции вставки.
	Если БуферОбменаПоследняяОперацияВырКоп = 0 Тогда
		ЗначенияЗаполнения.Вставить("Дата", ТекущаяДата());
		СоздатьНовуюЗаявку(БуферОбменаЗаявка,ЗначенияЗаполнения,мУчетнаяПолитика);
	ИначеЕсли БуферОбменаПоследняяОперацияВырКоп = 1 Тогда
		РедактироватьЗаявку(БуферОбменаЗаявка,ЗначенияЗаполнения,мУчетнаяПолитика);
		БуферОбменаЗаявка = Неопределено;
	КонецЕсли;
	
	ОбновитьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКомментарийКлиента(Команда)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		
	    ПараметрыФормы = Новый Структура("Клиент", Клиент);
		
		ЗаявкаЯчейки = ПолучитьРасшифровкуЯчейки();
		Если ТипЗнч(ЗаявкаЯчейки) = Тип("ДокументСсылка.Заявка") Тогда
			КлиентЗаявки = мДанныеЗаявок.Получить(ЗаявкаЯчейки);
			Если КлиентЗаявки = Клиент Тогда
				ПараметрыФормы.Вставить("Заявка", ЗаявкаЯчейки);
			КонецЕсли;
		КонецЕсли;
		
    	ОткрытьФорму("Отчет.КалендарьПланирования.Форма.ФормаКомментарииКлиента",ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюОткрытьКомментарии(Команда)
	ЗаявкаЯчейки = ПолучитьРасшифровкуЯчейки();
	КлиентЗаявки = мДанныеЗаявок.Получить(ЗаявкаЯчейки);
	ПараметрыФормы = Новый Структура("Клиент, Заявка", КлиентЗаявки, ЗаявкаЯчейки);
    ОткрытьФорму("Отчет.КалендарьПланирования.Форма.ФормаКомментарииКлиента",ПараметрыФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовуюЗаявку(Буфер,ЗначенияЗаполнения,мУчетнаяПолитика)
	
	НоваяЗаявка = Буфер.Скопировать();
	ЗначенияЗаполнения.Вставить("ДатаОкончания", Буфер.ДатаОкончания + (ЗначенияЗаполнения.ДатаНачала - Буфер.ДатаНачала));
	ЗначенияЗаполнения.Вставить("ВремяОкончания", ЗначенияЗаполнения.ДатаОкончания);	
	ЗаполнитьЗначенияСвойств(НоваяЗаявка,ЗначенияЗаполнения);
	Если НоваяЗаявка.Состояние = Справочники.ВидыСостоянийЗаявок.Выполнена
		Или НоваяЗаявка.Состояние = Справочники.ВидыСостоянийЗаявок.Оплачена
		Или НоваяЗаявка.Состояние = Справочники.ВидыСостоянийЗаявок.Прием
		Или Не ЗначениеЗаполнено(НоваяЗаявка.Состояние)
	Тогда 
		НоваяЗаявка.Состояние = Справочники.ВидыСостоянийЗаявок.Запланирована;
	КонецЕсли;
	НоваяЗаявка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
		НоваяЗаявка.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РедактироватьЗаявку(Буфер,ЗначенияЗаполнения,мУчетнаяПолитика)
	
	ЗначенияЗаполнения.Вставить("ДатаОкончания", Буфер.ДатаОкончания + (ЗначенияЗаполнения.ДатаНачала - Буфер.ДатаНачала));
	ЗначенияЗаполнения.Вставить("ВремяОкончания", ЗначенияЗаполнения.ДатаОкончания);
	БуферОбъект = Буфер.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(БуферОбъект,ЗначенияЗаполнения);
	
	Попытка
		БуферОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапоминание(Команда)
	                                                                                       
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",Новый Структура("Инициатор", ОбщегоНазначения.ТекущийПользователь()));
	ОткрытьФорму("Задача.ЗадачиПользователя.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетЗаявкиКлиента(Команда)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		Период = Новый СтандартныйПериод;
		Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Период.ДатаНачала = НачалоДня(ТекущаяДата());
		РаботаСФормамиКлиент.ОткрытьОтчетКлиента("РасписаниеКлиента", Клиент, Период);
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Клиент не выбран!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытие(Команда)
	
	ТекущаяОбласть = Элементы.ДокументРезультат.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда
		мВыделенныйДиапазонЯчеекЖЗ = Новый Структура("Верх, Низ, Лево, Право", ТекущаяОбласть.Верх, ТекущаяОбласть.Низ, ТекущаяОбласть.Лево, ТекущаяОбласть.Право);
		ОбработкаВыделенияДиапазонаЯчеекЖЗ();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАннулироватьГрафик(Команда)
		
	ТекОбласть = ДокументРезультат.ТекущаяОбласть;
	Расшифровка = ПолучитьРасшифровкуЯчейки();
	
	ИмяРеквизитаФилиал = ПроцедурыСпециализацииПоставки.ИмяРеквизитаФилиалДокументов();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Расшифровка, ИмяРеквизитаФилиал) Тогда
		текФилиал = Расшифровка[ИмяРеквизитаФилиал];
	Иначе
		текФилиал = Отчет.Филиал;
	КонецЕсли;
	
	ОбъектЯчейки = ПолучитьОбъектТекущейКолонки();
	
	Если ЗначениеЗаполнено(ОбъектЯчейки)
		И ТипЗнч(Расшифровка) = Тип("Структура") 
		И Расшифровка.Свойство("ИдентификаторСобытия")
	Тогда
		Если Команда.Имя = "ОчиститьВремяГрафика"
			И ГрафикиСотрудников.ОчиститьВремя(Расшифровка.Время,
												Расшифровка.ВремяОкончания,
												Расшифровка.ИдентификаторСобытия) Тогда
			ОбновитьОтчет();
			
		ИначеЕсли Команда.Имя = "АннулироватьСобытие"
			И ГрафикиСотрудников.УдалитьСобытие(Расшифровка.ИдентификаторСобытия) Тогда
			ОбновитьОтчет();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыделенияДиапазонаЯчеекЖЗ()

	Если ТипЗнч(мВыделенныйДиапазонЯчеекЖЗ) = Тип("Структура")
		И мВыделенныйДиапазонЯчеекЖЗ.Свойство("Верх")
		И мВыделенныйДиапазонЯчеекЖЗ.Свойство("Низ")
		И мВыделенныйДиапазонЯчеекЖЗ.Свойство("Лево")
		И мВыделенныйДиапазонЯчеекЖЗ.Свойство("Право")
	Тогда
		ТекОбласть = ДокументРезультат.ТекущаяОбласть;
		мУчетнаяПолитика = УправлениеНастройками.ПолучитьУчетнуюПолитику();
		// Ложь - по подразделениям, Истина - по моделям расписания.
		РежимОтборов = мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания;
		Если ТекОбласть <> Неопределено Тогда
			Если ТекОбласть.Верх = мВыделенныйДиапазонЯчеекЖЗ.Верх 
				И ТекОбласть.Низ = мВыделенныйДиапазонЯчеекЖЗ.Низ
				И ТекОбласть.Лево = мВыделенныйДиапазонЯчеекЖЗ.Лево 
				И ТекОбласть.Право = мВыделенныйДиапазонЯчеекЖЗ.Право
			Тогда
				ОбъектыКОбработке = Новый Массив;
				ВремяНач = Дата(1,1,1,23,59,59);
				ВремяКон = Дата(1,1,1);
				
				ОбработанныеРасшифровки = Новый Массив;
				
				// Собираем человеко-дни из выделенного диапазона.
				Для гПоз = ТекОбласть.Лево По ТекОбласть.Право Цикл
					ДатаПустойКолонки = Дата(1,1,1);
					ЭтоПустаяКолонка = Истина;
					Для вПоз = ТекОбласть.Верх По ТекОбласть.Низ Цикл
						Расшифровка = ПолучитьРасшифровкуЯчейки(ДокументРезультат.Область(вПоз,гПоз));
						Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
							
							Расшифровка.Вставить("Время", Дата(1,1,1) + (Расшифровка.Дата - НачалоДня(Расшифровка.Дата)));
							ОбъектЯчейки = Расшифровка.Объект;
							
							Если ТипЗнч(ОбъектЯчейки) = Тип("СправочникСсылка.Сотрудники")
								Или ТипЗнч(ОбъектЯчейки) = Тип("СправочникСсылка.Оборудование")
								Или ТипЗнч(ОбъектЯчейки) = Тип("Дата")
							Тогда
								Если ЗначениеЗаполнено(ОбъектЯчейки) И ТипЗнч(ОбъектЯчейки) <> Тип("Дата") И ЭтоПустаяКолонка Тогда
									ЭтоПустаяКолонка = Ложь; // Встретили первую именную ячейку, значит выделяли не пустую колонку
								ИначеЕсли ДатаПустойКолонки <> Расшифровка.Дата Тогда
									ДатаПустойКолонки = Расшифровка.Дата; // Для пустой колонки сработает 1 раз и запомнит дату
								КонецЕсли;
								
								текПодразделение = ?(ТипЗнч(Отчет.Подразделение) = Тип("СправочникСсылка.Подразделения"),Отчет.Подразделение,ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));									
								
								СтруктураОбъекта = Новый Структура("Объект, ВремяНачала, ВремяКонца, Дата, ИдентификаторСобытия, Подразделение, Филиал");
								СтруктураОбъекта.ВремяНачала			= Расшифровка.Время;
								СтруктураОбъекта.ВремяКонца				= Расшифровка.ВремяОкончания;
								СтруктураОбъекта.Дата					= НачалоДня(Расшифровка.Дата);
								СтруктураОбъекта.Филиал					= Отчет.Филиал;
								СтруктураОбъекта.Подразделение			= текПодразделение;
								СтруктураОбъекта.Объект					= ОбъектЯчейки;
								СтруктураОбъекта.ИдентификаторСобытия	= ?(Расшифровка.Свойство("ИдентификаторСобытия"), Расшифровка.ИдентификаторСобытия, Неопределено);
								
								Если РасшифровкаДобавленияГрафикаУникальна(СтруктураОбъекта,  ОбработанныеРасшифровки) Тогда
									ОбъектыКОбработке.Добавить(СтруктураОбъекта);
									ОбработанныеРасшифровки.Добавить(Новый Структура(Новый ФиксированнаяСтруктура(СтруктураОбъекта)));
								КонецЕсли;
							КонецЕсли;

							// Соберем ВремяНачала и ВремяКонца.
							Если ВремяНач > Расшифровка.Время Тогда // Не будет такого
								ВремяНач = НачалоМинуты(Расшифровка.Время);
							КонецЕсли;
							Если ВремяКон < Расшифровка.ВремяОкончания Тогда
								ВремяКон = НачалоМинуты(Расшифровка.ВремяОкончания);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если ЭтоПустаяКолонка Тогда
						
						СклеитьСтрокиПоВремени(ОбъектыКОбработке);
						Если Не РежимОтборов Тогда
							// По подразделениям	
							СтрокаДерева = Элементы.ДеревоОтбора.ТекущиеДанные.Значение;
							Если (ТипЗнч(СтрокаДерева) = Тип("СправочникСсылка.Сотрудники") Или ТипЗнч(СтрокаДерева) = Тип("СправочникСсылка.Оборудование"))
								И ЗначениеЗаполнено(СтрокаДерева) 
							Тогда
								текПодразделение = ?(ТипЗнч(Отчет.Подразделение) = Тип("СправочникСсылка.Подразделения"),Отчет.Подразделение,ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
								Количество = ОбъектыКОбработке.Количество();
								Для инд = 0 по Количество - 1 Цикл
									СтруктураОбъекта = Новый Структура("Объект, ВремяНачала, ВремяКонца, Дата, ИдентификаторСобытия, Подразделение, Филиал");	
									ЗаполнитьЗначенияСвойств(СтруктураОбъекта,ОбъектыКОбработке[0]);
									СтруктураОбъекта.Объект = СтрокаДерева;
									ОбъектыКОбработке.Добавить(СтруктураОбъекта);
									ОбъектыКОбработке.Удалить(0);
								КонецЦикла;
							Иначе
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В календаре планирования не выбраны сотрудники, для которых добавляется событие.'"));
								Возврат;
							КонецЕсли;
						Иначе
							// По моделям
							Количество = ОбъектыКОбработке.Количество();
							Для инд = 0 По Количество - 1 Цикл
								Для Каждого Сотрудник Из Отчет.Сотрудники Цикл
									СтруктураОбъекта = Новый Структура("Объект, ВремяНачала, ВремяКонца, Дата, ИдентификаторСобытия, Подразделение, Филиал");	
									ЗаполнитьЗначенияСвойств(СтруктураОбъекта,ОбъектыКОбработке[0]);
									СтруктураОбъекта.Объект = Сотрудник.Значение;
									ОбъектыКОбработке.Добавить(СтруктураОбъекта);
								КонецЦикла;
								ОбъектыКОбработке.Удалить(0);
							КонецЦикла;
						КонецЕсли;
					Иначе
						СклеитьСтрокиПоВремени(ОбъектыКОбработке);
						Если Не РежимОтборов Тогда
							// По подразделениям
						Иначе
							// По моделям
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Добавим события по найденным объектам
				Если ОбъектыКОбработке.Количество() <> 0 Тогда
					ДействиеВыполнено = ДобавитьСобытиеНов(ОбъектыКОбработке, ВремяНач, ВремяКон);
					Если ДействиеВыполнено Тогда
						ОбновитьОтчет();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСобытиеНов(ОбъектыКОбработке, ВремяНач, ВремяКон)
	
	ДанныеСобытия  = Новый Структура("ОбъектыКОбработке,ВремяНач, ВремяКон", ОбъектыКОбработке, ВремяНач, ВремяКон);		
	
	ПараметрыФормы = Новый Структура("ДанныеСобытия",ДанныеСобытия);
	Форма = ПолучитьФорму("ОбщаяФорма.ФормаДобавленияСобытияВГрафик",ПараметрыФормы);
	
	ДействиеВыполнено = Форма.ОткрытьМодально();
	
	Возврат (ДействиеВыполнено = Истина);
	
КонецФункции

&НаКлиенте
Функция ДобавитьКомментарий(Сотрудник, Дата)

	СтруктураФормы = Новый Структура("Период, Сотрудник", Дата, Сотрудник);
	
	МассивКлюча = Новый Массив;
	МассивКлюча.Добавить(СтруктураФормы);
	
	КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.КомментарииДня", МассивКлюча);
	
	СтруктураКлюча = Новый Структура;
	СтруктураКлюча.Вставить("Ключ", КлючЗаписи);

	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ЗначенияЗаполнения", СтруктураФормы);
	
	Попытка         
		ОткрытьФормуМодально("РегистрСведений.КомментарииДня.Форма.ФормаЗаписи", СтруктураКлюча, ЭтаФорма);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Если Найти(ОписаниеОшибки, "Объект не найден") Тогда
			ОткрытьФормуМодально("РегистрСведений.КомментарииДня.Форма.ФормаЗаписи", СтруктураЗаполнения, ЭтаФорма);
		КонецЕсли;
	КонецПопытки; 
	
КонецФункции

&НаКлиенте
Процедура СклеитьСтрокиПоВремени(ОбъектыКОбработке)
	ВсегоЭлементов = ОбъектыКОбработке.Количество();
	Если ВсегоЭлементов >= 2 Тогда
		инд = 1;фИндексВПределахМассива = Истина;
		Пока фИндексВПределахМассива Цикл
			ТекущийЭлементМассива		= ОбъектыКОбработке[инд];
			ПредыдущийЭлементМассива	= ОбъектыКОбработке[инд-1]; 			
			Если ТекущийЭлементМассива.Объект		= ПредыдущийЭлементМассива.Объект
				И ТекущийЭлементМассива.ВремяНачала	= ПредыдущийЭлементМассива.ВремяКонца
				И ТекущийЭлементМассива.Дата		= ПредыдущийЭлементМассива.Дата
				И ТекущийЭлементМассива.ИдентификаторСобытия = ПредыдущийЭлементМассива.ИдентификаторСобытия
			Тогда
				ПредыдущийЭлементМассива.ВремяКонца = ТекущийЭлементМассива.ВремяКонца;
				ОбъектыКОбработке.Удалить(инд);
			Иначе
				Инд = Инд+1;
			КонецЕсли;
			
			фИндексВПределахМассива = ? (инд <= (ОбъектыКОбработке.Количество()- 1), Истина, Ложь );
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РасшифровкаДобавленияГрафикаУникальна(СтруктураОбъекта, ОбработанныеРасшифровки)
	
	// Исключание точных дублей в объектах к обработке
	Уникальная = Истина;
	Для Каждого ТекущаяСтрока Из ОбработанныеРасшифровки Цикл
		
		Если ТекущаяСтрока.ВремяНачала <> ТекущаяСтрока.ВремяКонца Тогда
			
			Различаются = Ложь;
			Для Каждого КлючЗначение Из СтруктураОбъекта Цикл
				Если ТекущаяСтрока[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
					Различаются = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Различаются Тогда
				Уникальная = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Уникальная;
	
КонецФункции

// Получает сотрудника/кабинет/оборудование, отбираемое сейчас деревом подразделений либо полем Сотрудник.
&НаКлиенте
Функция ЕстьТекущийОбъектОтбораЖЗ()
	
	Если мУчетнаяПолитика.РежимОтбораЖурналаЗаписиПоМоделямРасписания Тогда
		// По моделям
		Результат = Отчет.Сотрудники.Количество() <> 0;
	Иначе
		// По подразделениям	
		СтрокаДерева = Элементы.ДеревоОтбора.ТекущиеДанные.Значение;
		Результат = (ТипЗнч(СтрокаДерева) = Тип("СправочникСсылка.Сотрудники") 
						Или ТипЗнч(СтрокаДерева) = Тип("СправочникСсылка.Оборудование")) И ЗначениеЗаполнено(СтрокаДерева);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтборСпискаЗадачПриИзменении(Элемент)
	
	ОбновитьЗадачи();

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновленияНовыхДокументовССайта()
	ОбновитьНепросмотренныеДокументы(Элементы.НовыхЗаявокССайта, Элементы.ЛистыОжиданияЗаписи);
КонецПроцедуры

// Обновляет информацию для пользователя о том, что есть неотработанные заявки и листы ожидания, загруженные с сайта.
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНепросмотренныеДокументы(ЭлементНовыхЗаявокССайта, ЭлементЛистыОжиданияЗаписи)
	
	Результат = ПолучитьКоличествоНепросмотренныхДокументов();
	Если Не Результат = Неопределено Тогда
		Если Результат.КолЗаявок <> 0 Тогда
			ЭлементНовыхЗаявокССайта.Заголовок = НСтр("ru='Новых внешних заявок: '") + Результат.КолЗаявок;
			ЭлементНовыхЗаявокССайта.Видимость = Истина;
		Иначе	
			ЭлементНовыхЗаявокССайта.Видимость = Ложь;
		КонецЕсли;
		
		ЭлементЛистыОжиданияЗаписи.Заголовок = НСтр("ru='Листы ожидания записи'");
		ТекстКолЛистов = ?(Результат.КолЛистовОжидания = 0, "", Строка(Результат.КолЛистовОжидания));
		ТекстКолОбращений = ?(Результат.КолОбращений = 0, "", Строка(Результат.КолОбращений) + " " + НСтр("ru='обращ.'"));
		
		ТекстИнфо = "";
		Если Не ПустаяСтрока(ТекстКолЛистов) Или Не ПустаяСтрока(ТекстКолОбращений) Тогда
			ТекстИнфо = ТекстКолЛистов;
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ТекстИнфо, ТекстКолОбращений, " + ", Истина);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстИнфо) Тогда
			ЭлементЛистыОжиданияЗаписи.Заголовок = ЭлементЛистыОжиданияЗаписи.Заголовок + " (" + ТекстИнфо + ")";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Считывает из базы данных информацию о неотработанных заявках и листах ожидания, загруженных с сайта.
&НаСервереБезКонтекста
Функция ПолучитьКоличествоНепросмотренныхДокументов()
	
	КоличествоДокументов = Новый Структура("КолЗаявок, КолЛистовОжидания, КолОбращений",0,0,0);
	
	Запрос = Новый Запрос;
	
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НепросмотренныеДокументыССайта) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Заявки.КолЗаявок КАК КолЗаявок,
			|	ЛистыОжидания.КолЛистовОжидания КАК КолЛистовОжидания
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(НепросмотренныеЗаявкиССайта.Документ) КАК КолЗаявок
			|	ИЗ
			|		РегистрСведений.НепросмотренныеДокументыССайта КАК НепросмотренныеЗаявкиССайта
			|	ГДЕ
			|		ТИПЗНАЧЕНИЯ(НепросмотренныеЗаявкиССайта.Документ) = ТИП(Документ.Заявка)
			|		И НЕ ВЫРАЗИТЬ(НепросмотренныеЗаявкиССайта.Документ КАК Документ.Заявка).ПометкаУдаления) КАК Заявки,
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(НепросмотренныеЛистыОжиданияССайта.Документ) КАК КолЛистовОжидания
			|	ИЗ
			|		РегистрСведений.НепросмотренныеДокументыССайта КАК НепросмотренныеЛистыОжиданияССайта
			|	ГДЕ
			|		ТИПЗНАЧЕНИЯ(НепросмотренныеЛистыОжиданияССайта.Документ) = ТИП(Документ.ЛистОжидания)
			|		И НЕ ВЫРАЗИТЬ(НепросмотренныеЛистыОжиданияССайта.Документ КАК Документ.ЛистОжидания).ПометкаУдаления) КАК ЛистыОжидания";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			КоличествоДокументов.КолЗаявок = ВыборкаДетальныеЗаписи.КолЗаявок;
			КоличествоДокументов.КолЛистовОжидания = ВыборкаДетальныеЗаписи.КолЛистовОжидания;
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НеотработанныеОбращения) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеотработанныеОбращения.Документ) КАК КолОбращений

		|ИЗ
		|	РегистрСведений.НеотработанныеОбращения КАК НеотработанныеОбращения"
		;
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			КоличествоДокументов.КолОбращений = ВыборкаДетальныеЗаписи.КолОбращений;
		КонецЕсли;
	КонецЕсли;

	Возврат КоличествоДокументов;
КонецФункции

// Открывает форму просмотра новых заявок, загруженных с сайта.
&НаКлиенте
Процедура НовыхЗаявокССайтаНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.НепросмотренныеДокументыССайта.Форма.СписокНовыхЗаявокССайта",,ЭтаФорма);
КонецПроцедуры

// Помечает на удаление текущий лист ожидания
&НаКлиенте
Процедура ПометитьНаУдалениеСПроверкойКлиента(Команда)
	
	ТекДанные = Элементы.ДокументыОчереди.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекСтрока = Элементы.ДокументыОчереди.ТекущаяСтрока;
		Попытка
			ПометитьНаУдалениеНаСервере(ТекСтрока);
			ВебИнтеграция.ПометитьКакПрочитанныйДокумент(ТекСтрока);
			ПоКлиентуНетДокументов = ПроверитьКлиентаПоНаличиюПокупокИЗаписей(ТекСтрока);
		Исключение
			ПоказатьПредупреждение(,НСтр("ru='Не удалось пометить на удаление заявку! По причине: '") + ОписаниеОшибки());
		КонецПопытки;
		Элементы.ДокументыОчереди.Обновить();
		Если ПоКлиентуНетДокументов Тогда
			Ответ = Вопрос(НСтр("ru='Клиент не был ранее записан, и ему не оказывались услуги. Пометить его на удаление?'") ,РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ПометитьНаУдалениеНаСервере(ТекСтрока, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пометка на удаление переданного значения
&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеНаСервере(Знач Ссылка, ЭтоУдалениеКлиента = Ложь)
	
	Если ЭтоУдалениеКлиента Тогда
		Ссылка = Ссылка.Клиент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ИСТИНА, если по клиенту нет продаж и заявок.
&НаСервереБезКонтекста
Функция ПроверитьКлиентаПоНаличиюПокупокИЗаписей(Заявка)
	
	Клиент = Заявка.Клиент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Продажи.Клиент
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Клиент = &Клиент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Заявка.Клиент
		|ИЗ
		|	Документ.Заявка КАК Заявка
		|ГДЕ
		|	Заявка.Клиент = &Клиент
		|	И НЕ Заявка.Состояние = &Состояние
		|	И НЕ Заявка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Состояние", Справочники.ВидыСостоянийЗаявок.СозданаНаСайте);
	
	Возврат Запрос.Выполнить().Пустой();
		
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияОбновленияКонфликтыРИБ()
	ОбновитьНепросмотренныеКонфликтыРБД(Элементы.КонфликтыЗагрузкиЗаявокРБД);
КонецПроцедуры

// Обновляет информацию для пользователя о том, есть ли конфликты загрузки заявок с сайта.
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНепросмотренныеКонфликтыРБД(ЭлементКонфликтыЗагрузкиЗаявокРБД)
	
	Результат = ПолучитьКоличествоНепросмотренныхКонфилктовРБД();
	Если Не Результат = Неопределено Тогда
		Если Результат.КолЗаявок <> 0 Тогда
			ЭлементКонфликтыЗагрузкиЗаявокРБД.Заголовок = "Конфликтов обмена заявками: " + Результат.КолЗаявок;
			ЭлементКонфликтыЗагрузкиЗаявокРБД.Видимость = Истина;
		Иначе	
			ЭлементКонфликтыЗагрузкиЗаявокРБД.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Считывает из базы данных информацию о неотработанных заявках, загруженных с конфликтом по РБД (план обмена "обмен с филиалами").
&НаСервереБезКонтекста
Функция ПолучитьКоличествоНепросмотренныхКонфилктовРБД()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОшибкиОбменовДанными.Объект) КАК КолЗаявок
		|ИЗ
		|	РегистрСведений.ОшибкиОбменовДанными КАК ОшибкиОбменовДанными
		|ГДЕ
		|	НЕ ОшибкиОбменовДанными.Обработан
		|	И ТИПЗНАЧЕНИЯ(ОшибкиОбменовДанными.Объект) = ТИП(Документ.Заявка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоДокументов = Новый Структура("КолЗаявок",Выборка.КолЗаявок);
		Возврат КоличествоДокументов;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура КонфликтыЗагрузкиЗаявокРБДНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ОшибкиОбменовДанными.Форма.ФормаРазбораКонфликтов",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЕстьЗаявкиХочуРаньшеНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.ПереносЗаявокНаБолееРаннееВремя");
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьПоЛООтменить(Команда)
	
	Если Клиент = ТекущийКлиентДокументаЗаписи Тогда
		Клиент = Неопределено;
	КонецЕсли;
	
	ТекущийДокументЗаписи = Неопределено;
	ТекущийКлиентДокументаЗаписи = Неопределено;
	ТекущиеПараметрыЗаписи		 = Неопределено;
	ТекущаяНоменклатураДокументаЗаписи.Очистить();
	Элементы.ГруппаЗаписьПоЛистуОжидания.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьПоЛОПривязать(Команда)
	
	Попытка
		Расшифровка = ПолучитьРасшифровкуЯчейки();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(Расшифровка) <> Тип("ДокументСсылка.Заявка") Тогда
		Возврат;
	КонецЕсли;
	
	ЛистыПоЗаявке = CRMСервер.ПолучитьДокументыОчередиПоЗаявке(Расшифровка);
	Если ЛистыПоЗаявке.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выбранная заявка уже привязана к листу ожидания '") + ЛистыПоЗаявке[0]);
		Возврат;
	КонецЕсли;
	
	// Отметка выполнения листа ожидания - основания записи
	CRMСервер.ОтметитьВыполнениеЛистаОжидания(ТекущийДокументЗаписи, Расшифровка);
	// Если запись введена сразу на несклько листов ожидания, дополнительные листы тоже отмечаются как выполненные
	Если ТипЗнч(ТекущиеПараметрыЗаписи) = Тип("Структура")
		И ТекущиеПараметрыЗаписи.Свойство("СопутствующиеЛистыОжидания")
	Тогда
	    СопутствующиеЛистыОжидания = ТекущиеПараметрыЗаписи.СопутствующиеЛистыОжидания;
		Для Каждого ЛистОжидания Из СопутствующиеЛистыОжидания Цикл
			Попытка
				CRMСервер.ОтметитьВыполнениеЛистаОжидания(ЛистОжидания, Расшифровка);
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// Очистка данных для ввода записи на их основании.
	ЗаписьПоЛООтменить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура лоПерейтиКРасширенномуСписку(Команда)
	
	CRMКлиент.ОткрытьАктивизироватьОчередь();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбщееОказаниеУслуг(Заявки = Неопределено, ЗначенияЗаполнения = Неопределено, ПараметрыОткрытия = Неопределено)
	
	ЗначенияЗаполнения = Новый Структура;
	Если ЗначениеЗаполнено(Заявки) Тогда
		ЗначенияЗаполнения.Вставить("ДокументОснование", Заявки[0]);
		ЗначенияЗаполнения.Вставить("ЗаявкиОснования", Заявки);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Дата", ТекущаяДата());
	ЗначенияЗаполнения.Вставить("Клиент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявки[0],"Клиент"));
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, Заявки", ЗначенияЗаполнения, Заявки);
	Если ЗначенияЗаполнения.Свойство("Оборудование") Тогда
		ПараметрыФормы.Вставить("Оборудование",ЗначенияЗаполнения.Оборудование);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьОбщееОказаниеУслугПроверкаУсловий(Заявка, ЯвныйВызовКоманды = Ложь)
	
	Если ЗначениеЗаполнено(Заявка) И (ЯвныйВызовКоманды ИЛИ мУчетнаяПолитика.ПредлагатьСобиратьЗаявкиЗаДеньВДокументПродажи) Тогда
		
		ЗначенияРеквизитовЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявка, "Клиент, ДатаНачала, Филиал");
		КлиентЗаявки = ЗначенияРеквизитовЗаявки.Клиент;
		Дата		 = ЗначенияРеквизитовЗаявки.ДатаНачала;
		Филиал		 = ЗначенияРеквизитовЗаявки.Филиал;
		
		НайденныеЗаявки = УправлениеЗаявками.ПолучитьЗаявкиКлиентаЗаДеньСостояниеДоПродажи(КлиентЗаявки, Дата, Филиал, мУчетнаяПолитика);
		КолДругихЗаявок = НайденныеЗаявки.Количество() - 1;
		
		ОписаниеОповещенияОЗакрытииФормыВыбораЗаявокДляОказанияУслуг = Новый ОписаниеОповещения("ОбработкаВыбораЗаявок", ЭтотОбъект);

		Если КолДругихЗаявок > 0 Тогда
			Если НЕ ЯвныйВызовКоманды И мУчетнаяПолитика.ПредлагатьСобиратьЗаявкиЗаДеньВДокументПродажи Тогда
				
				СписокКнопок = Новый СписокЗначений();
				СписокКнопок.Добавить("На все",		  НСтр("ru='На все'"));
				СписокКнопок.Добавить("На текущую",   НСтр("ru='На текущую'"));
				
				Если КолДругихЗаявок > 1 Тогда
					СписокКнопок.Добавить("На некоторые", НСтр("ru='Выбрать нужные...'"));
				КонецЕсли;
				
				ТекстЗаявок = УправлениеЗаявками.СклонениеСловаЗаявка(КолДругихЗаявок);
				
				ТекстВопроса = НСтр("ru='У клиента на день еще %1 %2 без оформленной продажи. На какие из них создать документ?'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Строка(КолДругихЗаявок), ТекстЗаявок);
				
				Ответ = Вопрос(ТекстВопроса, СписокКнопок); 
				Если Ответ = "На текущую" Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = "На некоторые" Тогда
					ПомеченныеЗаявки = Новый Массив;
					ПомеченныеЗаявки.Добавить(Заявка);
					
					ПараметрыЗаявок = Новый Структура("Заявки, Клиент, Дата, Филиал, ЗаявкиДокументаПродажи", НайденныеЗаявки, КлиентЗаявки, Дата, Филиал, ПомеченныеЗаявки);
					ОткрытьФорму("Документ.ОказаниеУслуг.Форма.ЗаявкиДокумента", ПараметрыЗаявок, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытииФормыВыбораЗаявокДляОказанияУслуг, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат Истина;
				ИначеЕсли Ответ = "На все" Тогда
					мЗаявки = Новый Массив();
					Для Каждого НайденнаяЗаявка Из НайденныеЗаявки Цикл
						мЗаявки.Добавить(НайденнаяЗаявка);
					КонецЦикла;
					ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытииФормыВыбораЗаявокДляОказанияУслуг, мЗаявки); 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораЗаявок(ВыбранныеЗаявки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеЗаявки) = Тип("Массив") И ВыбранныеЗаявки.Количество() > 0 Тогда
		Если ВыбранныеЗаявки.Количество() = 1 Тогда
			ДобавитьОказаниеУслуги(ВыбранныеЗаявки[0]); 
		Иначе
			ДобавитьОбщееОказаниеУслуг(ВыбранныеЗаявки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомментарийБезОбновленияОтчета(ДанныеКомментария)
	
	Если ДанныеКомментария.Период >= Отчет.ДатаНачала
		И ДанныеКомментария.Период <= Отчет.ДатаОкончания
	Тогда
		Для гПоз = 2 По ДокументРезультат.ШиринаТаблицы Цикл
			
			РасшифровкаКолонки	= мРасшифровкиКолонок.Получить(гПоз);
			Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура")
				И РасшифровкаКолонки.Свойство("Объект")
				И РасшифровкаКолонки.Объект = ДанныеКомментария.Сотрудник
			Тогда
				вПоз = Отчет.РежимФормирования; // 1 - день, 2 - период. Удобное совпадение.
				ДокументРезультат.Область(гПоз, вПоз).Примечание.Текст = ДанныеКомментария.Комментарий;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНовоеСостояниеЗаявки(Заявка, НовоеСостояние = Неопределено)
	
	ЕстьЦветФонаДопЯчейки = УправлениеНастройкамиПовтИсп.ЗаданЦветФонаДопЯчейкиЗаявкиЖурналаЗаписи();
	
	// Поиск заявки в табличном документе
	Области = Новый Массив;
	
	Для СчВ = 2 По ДокументРезультат.ВысотаТаблицы Цикл
		Для СчГ = 2 По ДокументРезультат.ШиринаТаблицы Цикл
			ОбластьТек = ДокументРезультат.Область(СчВ, СчГ);
			Если ОбластьТек.Расшифровка = Заявка Тогда
				
				Если ЕстьЦветФонаДопЯчейки Тогда
					// Определяем, надо ли менять цвет в доп. ячейке календаря.
					ОбластьСправа = ДокументРезультат.Область(СчВ, СчГ+1);
					Если ОбластьСправа.Расшифровка = Заявка Тогда
						Области.Добавить(ОбластьСправа);
						СчГ = СчГ + 1;
						
						// Обновление цвета доп. ячейки только если её цвет и так совпадает с цветом прошлого состояния заявки.
						Если ОбластьТек.ЦветФона = ОбластьСправа.ЦветФона Тогда
							Области.Добавить(ОбластьТек);
						КонецЕсли;
					Иначе
						Области.Добавить(ОбластьТек);
					КонецЕсли;
				Иначе
					// Просто запоминаем область табличного документа.
					Области.Добавить(ОбластьТек);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Области.Количество() <> 0 Тогда
		// Получение нового цвета.
		Если ЗначениеЗаполнено(НовоеСостояние) Тогда
			НовыйЦвет = ЦветСостоянияЗаявки(НовоеСостояние);
		Иначе
			НовыйЦвет = ЦветСостоянияЗаявки(Заявка);
		КонецЕсли;
		
		// Установка нового цвета
		Для Каждого Область Из Области Цикл
			Область.ЦветФона = НовыйЦвет;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветСостоянияЗаявки(Заявка)
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Заявка") Тогда
		Состояние = Заявка.Состояние;
	Иначе
		// Передано новое состояние
		Состояние = Заявка;
	КонецЕсли;
	
	Цвет = ?(ЗначениеЗаполнено(Состояние), Состояние.Цвет.Получить(), Неопределено);
	
	Если ТипЗнч(Цвет) <> Тип("Цвет") Или Цвет = Новый Цвет Тогда
		Цвет = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойЦветЗаявки").Получить();
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

// Для вызова при создании формы на сервере.
&НаСервере
Функция ПоказыватьЛистыОжидания()
	Возврат мУчетнаяПолитика.ИспользоватьЛистыОжиданияЗаписи
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЛистОжидания)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НепросмотренныеДокументыССайта)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НеотработанныеОбращения);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ДополнительнаяКомандаФормы(Команда)
	РаботаСДиалогамиКлиент.ВыполнитьДополнительнуюКомандуФормы(ЭтаФорма, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОПрограмме(Команда)
	ОткрытьФорму("Обработка.ИнформацияОПрограмме.Форма");
КонецПроцедуры
