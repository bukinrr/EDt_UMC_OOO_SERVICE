
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Филиал = ?(ПараметрыСеанса.УчетПоНесколькимФилиалам,Параметры.Филиал, Справочники.Филиалы.ПустаяСсылка());

	Если Параметры.СписокВыбора = Неопределено Тогда
		Если Параметры.ВыборСубъектовЖурналаЗаписи Тогда
			
			РазворачиватьДеревоСписка = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РазворачиватьДеревоСубъектовРасписанияПриПодбореВЖурналЗаписи");
			
			РежимОтображенияСубъектовСохр = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ФормаПодбораСпискаОтбора", "РежимОтображенияСубъектов");
			Если РежимОтображенияСубъектовСохр <> Неопределено Тогда
				РежимОтображенияСубъектов = РежимОтображенияСубъектовСохр;
			Иначе
				РежимОтображенияСубъектов = Число(УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоУмолчаниюПодборСубъектовВЖурналЗаписиПоСтруктуреОрганизации"));
			КонецЕсли;
		Иначе
			РазворачиватьДеревоСписка = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("РазворачиватьДеревоМоделейРасписанияПриПодбореВЖурналЗаписи");
		КонецЕсли;
		Элементы.Список.НачальноеОтображениеДерева = ?(РазворачиватьДеревоСписка, НачальноеОтображениеДерева.РаскрыватьВсеУровни, НачальноеОтображениеДерева.НеРаскрывать);
	КонецЕсли;

	ДеревоВыбора = ПолучитьДеревоВыбора(Параметры.СписокВыбранных, Параметры.ВыборСубъектовЖурналаЗаписи, РежимОтображенияСубъектов);
	ЗначениеВРеквизитФормы(ДеревоВыбора, "Список");

	Элементы.РежимОтображенияСубъектов.Видимость = Параметры.ВыборСубъектовЖурналаЗаписи И Параметры.СписокВыбора = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиФормы();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	Если Параметры.ВыборСубъектовЖурналаЗаписи И Параметры.СписокВыбора = Неопределено Тогда
		ХранилищеПользовательскихНастроекОтчетов.Сохранить("ФормаПодбораСпискаОтбора", "РежимОтображенияСубъектов", РежимОтображенияСубъектов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	СписокВыбранных = Новый Массив;
	СформироватьСписокВыбранных(Список.ПолучитьЭлементы(), СписокВыбранных);
	СписокВыбранных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокВыбранных);	
	Закрыть(СписокВыбранных);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоВыбора(СписокВыбранных, ВыборСубъектовЖурналаЗаписи, РежимОтображенияСубъектов)
	
	СписокВыбора = Параметры.СписокВыбора;
	
	Если ТипЗнч(СписокВыбора) = Тип("СписокЗначений") Тогда
		ДеревоСписка = Новый ДеревоЗначений;
		ДеревоСписка.Колонки.Добавить("Значение");
		ДеревоСписка.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		ДеревоСписка.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
		ДеревоСписка.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
		ДеревоСписка.Колонки.Добавить("ЭтоСотрудник", Новый ОписаниеТипов("Булево"));
		ДеревоСписка.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
		
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			СтрокаДерева = ДеревоСписка.Строки.Добавить();
			СтрокаДерева.Значение = ЭлементСписка.Значение;
			СтрокаДерева.Представление = Строка(ЭлементСписка.Значение);
			Если ТипЗнч(СтрокаДерева.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
				СтрокаДерева.ЭтоСотрудник = Истина;
			КонецЕсли;
		КонецЦикла;
		ДеревоСписка.Строки.Сортировать("ЭтоСотрудник Убыв, Представление");
		
	ИначеЕсли ВыборСубъектовЖурналаЗаписи Тогда
		// Выбор сотрудников, кабинетов
		Если РежимОтображенияСубъектов = 0 Тогда
			ДеревоСписка = ПолучитьДеревоВыбораСубъектовПоСправочнику();
		ИначеЕсли РежимОтображенияСубъектов = 1 Тогда 
			ДеревоСписка = ПолучитьДеревоВыбораСубъектовПоПодразделениям(Филиал);
		Иначе 
			ДеревоСписка = ПолучитьДеревоВыбораСубъектовПоСпециализациям();
		КонецЕсли;
		ДеревоСписка.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
		ДеревоСписка.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Иначе
		// Выбор моделей расписания
		ДеревоСписка = ПолучитьДеревоВыбораМоделейПоСправочнику(Филиал);
		ДеревоСписка.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
		ДеревоСписка.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	КонецЕсли;
	
	УстановитьПометкиСтрокДерева(ДеревоСписка, СписокВыбранных);
	
	ПрисвоитьКартинкиСтрокамДереваСписка(ДеревоСписка);
	
	ДеревоСписка.Колонки.Удалить("ЭтоГруппа");
	Если ДеревоСписка.Колонки.Найти("ЭтоСотрудник") <> Неопределено Тогда
		ДеревоСписка.Колонки.Удалить("ЭтоСотрудник");
	КонецЕсли;
	
	Возврат ДеревоСписка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДеревоВыбораСубъектовПоСправочнику()
	
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Значение,
	|	Сотрудники.ЭтоГруппа КАК ЭтоГруппа,
	|	Сотрудники.Представление КАК Представление
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.УчаствуетВКалендарномПланировании
	|	И НЕ Сотрудники.Архив
	|	И НЕ Сотрудники.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Оборудование.Ссылка,
	|	Оборудование.ЭтоГруппа,
	|	Оборудование.Представление
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ГДЕ
	|	Оборудование.УчаствуетВКалендарномПланировании
	|	И НЕ Оборудование.ПометкаУдаления
	|ИТОГИ ПО
	|	Значение ИЕРАРХИЯ"
	;
	
	ДеревоСписка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоСписка.Колонки.Добавить("ЭтоСотрудник", Новый ОписаниеТипов("Булево"));	

	НормализоватьИерархиюРезультатаЗапросаПоСубъектам(ДеревоСписка);
	
	Возврат ДеревоСписка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДеревоВыбораСубъектовПоПодразделениям(Филиал)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Значение,
	|	Сотрудники.Представление КАК Представление,
	|	Сотрудники.Подразделение КАК Подразделение,
	|	ИСТИНА КАК ЭтоСотрудник,
	|	Сотрудники.Подразделение.Представление,
	|	Сотрудники.Подразделение.Филиал КАК Филиал
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.УчаствуетВКалендарномПланировании
	|	И НЕ Сотрудники.ЭтоГруппа
	|	И (Сотрудники.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ &Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ Сотрудники.Подразделение.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ Сотрудники.Подразделение.Филиал = &Филиал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Оборудование.Ссылка,
	|	Оборудование.Представление,
	|	Оборудование.Подразделение,
	|	ЛОЖЬ,
	|	Оборудование.Подразделение.Представление,
	|	Оборудование.Подразделение.Филиал
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ГДЕ
	|	НЕ Оборудование.ЭтоГруппа
	|	И (Оборудование.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ &Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ Оборудование.Подразделение.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ Оборудование.Подразделение.Филиал = &Филиал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка),
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ГДЕ
	|	ЛОЖЬ";
	
	Если ПараметрыСеанса.УчетПоНесколькимФилиалам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ГДЕ
		|	ЛОЖЬ
		|ИТОГИ ПО
		|	Филиал, 
		|	Подразделение ИЕРАРХИЯ"
		;
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Подразделение ИЕРАРХИЯ"
		;
	КонецЕсли;
	
	ДеревоСписка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоСписка.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));	

	Если ПараметрыСеанса.УчетПоНесколькимФилиалам Тогда
		Для Каждого СтрокаДерева Из ДеревоСписка.Строки Цикл
			СтрокаДерева.Значение = СтрокаДерева.Филиал;
		КонецЦикла;
	КонецЕсли;
	
	НормализоватьИерархиюРезультатаЗапросаПоПодразделениям(ДеревоСписка);
	
	мОбрИнд = ДеревоСписка.Строки.Количество() - 1;
	Для сч = 0 По мОбрИнд Цикл
		
		СтрокаДерева = ДеревоСписка.Строки[мОбрИнд - сч];
		Если Не ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
			
			Для Каждого СтрокаЭлементКорневойГруппы Из СтрокаДерева.Строки Цикл
				
				НоваяСтрокаКорня = ДеревоСписка.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКорня, СтрокаЭлементКорневойГруппы);
				
			КонецЦикла;
			
			ДеревоСписка.Строки.Удалить(СтрокаДерева);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоСписка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДеревоВыбораСубъектовПоСпециализациям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиСпециализации.Ссылка КАК Значение,
	|	СотрудникиСпециализации.Ссылка.Представление КАК Представление,
	|	СотрудникиСпециализации.Специализация КАК Специализация,
	|	СотрудникиСпециализации.Специализация.Представление КАК СпециализацияПредставление
	|ИЗ
	|	Справочник.Сотрудники.Специализации КАК СотрудникиСпециализации
	|ГДЕ
	|	НЕ СотрудникиСпециализации.Специализация = ЗНАЧЕНИЕ(Справочник.КатегорииВыработки.ПустаяСсылка)
	|	И СотрудникиСпециализации.Ссылка.УчаствуетВКалендарномПланировании
	|	И НЕ СотрудникиСпециализации.Ссылка.ПометкаУдаления
	|	И НЕ СотрудникиСпециализации.Ссылка.Архив
	|	И НЕ СотрудникиСпециализации.Специализация.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КатегорииВыработки.ПустаяСсылка),
	|	NULL,
	|	NULL,
	|	NULL
	|ГДЕ
	|	ЛОЖЬ
	|ИТОГИ ПО
	|	Специализация ИЕРАРХИЯ";
	
	ДеревоСписка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоСписка.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	
	НормализоватьИерархиюРезультатаЗапросаПоСпециализациям(ДеревоСписка);
	
	Возврат ДеревоСписка;

КонецФункции	
	
&НаСервереБезКонтекста
Функция ПолучитьДеревоВыбораМоделейПоСправочнику(Филиал)
	
	Запрос = Новый запрос;
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МоделиРасписания.Ссылка КАК Значение,
	|	МоделиРасписания.Представление КАК Представление,
	|	МоделиРасписания.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.МоделиРасписания КАК МоделиРасписания
	|ГДЕ
	|	(МоделиРасписания.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|			ИЛИ МоделиРасписания.Филиал = &Филиал
	|			ИЛИ &Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	|	И НЕ МоделиРасписания.ПометкаУдаления
	|ИТОГИ ПО
	|	Значение ИЕРАРХИЯ"
	;
	
	ДеревоСписка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	НормализоватьИерархиюРезультатаЗапросаПоМоделям(ДеревоСписка);
	
	Возврат ДеревоСписка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьПометкиСтрокДерева(ДеревоСписка, СписокВыбранных)

	Для Каждого СтрокаДерева Из ДеревоСписка.Строки Цикл
		
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			СтрокаДерева.Пометка = (СписокВыбранных.Найти(СтрокаДерева.Значение) <> Неопределено);
		Иначе
			УстановитьПометкиСтрокДерева(СтрокаДерева, СписокВыбранных);
			флВсеПометкиПодчиненныхУстановлены = Истина;
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				Если Не ПодчиненнаяСтрока.Пометка Тогда
					флВсеПометкиПодчиненныхУстановлены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаДерева.Пометка = флВсеПометкиПодчиненныхУстановлены;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ПрисвоитьКартинкиСтрокамДереваСписка(УровеньДереваСписка)
	
	Для Каждого СтрокаДерева Из УровеньДереваСписка.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда 
			СтрокаДерева.Картинка = БиблиотекаКартинок.Группа;
		ИначеЕсли ТипЗнч(СтрокаДерева.Значение) = Тип("СправочникСсылка.МоделиРасписания") Тогда
			СтрокаДерева.Картинка = БиблиотекаКартинок.МодельРасписания;
		ИначеЕсли ТипЗнч(СтрокаДерева.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтрокаДерева.Картинка = БиблиотекаКартинок.Сотрудник;
		ИначеЕсли ТипЗнч(СтрокаДерева.Значение) = Тип("СправочникСсылка.Оборудование") Тогда
			СтрокаДерева.Картинка = БиблиотекаКартинок.Кабинет;
		КонецЕсли;
		
		ПрисвоитьКартинкиСтрокамДереваСписка(СтрокаДерева)
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НормализоватьИерархиюРезультатаЗапросаПоМоделям(УровеньДерева)
	
	мсСтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаДерева Из УровеньДерева.Строки Цикл
		
		Если СтрокаДерева.Родитель <> Неопределено И СтрокаДерева.Значение = СтрокаДерева.Родитель.Значение Тогда 
			мсСтрокиКУдалению.Добавить(СтрокаДерева);
		Иначе
			НормализоватьИерархиюРезультатаЗапросаПоМоделям(СтрокаДерева)
		КонецЕсли;
				
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из мсСтрокиКУдалению Цикл
		УровеньДерева.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
	УровеньДерева.Строки.Сортировать("ЭтоГруппа Убыв, Представление");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НормализоватьИерархиюРезультатаЗапросаПоСубъектам(УровеньДерева)
	
	мсСтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаДерева Из УровеньДерева.Строки Цикл
		
		Если СтрокаДерева.Родитель <> Неопределено И СтрокаДерева.Значение = СтрокаДерева.Родитель.Значение Тогда 
			мсСтрокиКУдалению.Добавить(СтрокаДерева);
		Иначе
			СтрокаДерева.ЭтоСотрудник = ТипЗнч(СтрокаДерева.Значение) = Тип("СправочникСсылка.Сотрудники");
			НормализоватьИерархиюРезультатаЗапросаПоСубъектам(СтрокаДерева)
		КонецЕсли;
				
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из мсСтрокиКУдалению Цикл
		УровеньДерева.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
	УровеньДерева.Строки.Сортировать("ЭтоСотрудник Убыв, ЭтоГруппа Убыв, Представление");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НормализоватьИерархиюРезультатаЗапросаПоПодразделениям(УровеньДерева)
	
	мсСтрокиКУдалению = Новый Массив;
	мОбр = УровеньДерева.Строки.Количество() - 1;
	Для сч = 0 По мОбр Цикл
		СтрокаДерева = УровеньДерева.Строки[мОбр - сч];
		
		Если  СтрокаДерева.Родитель <> Неопределено
			И	((ЗначениеЗаполнено(СтрокаДерева.Подразделение) И СтрокаДерева.Подразделение = СтрокаДерева.Родитель.Подразделение)
			 		Или (Не ЗначениеЗаполнено(СтрокаДерева.Подразделение) И Не ЗначениеЗаполнено(СтрокаДерева.Родитель.Подразделение)))
		Тогда 
			Если СтрокаДерева.Строки.Количество() <> 0 Тогда
				мсСтрокиКУдалению.Добавить(СтрокаДерева);
				Для Каждого СтрокаНижнегоУровня Из СтрокаДерева.Строки Цикл
					НоваяСтрока = СтрокаДерева.Родитель.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНижнегоУровня);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
				СтрокаДерева.ЭтоГруппа = Истина;
				СтрокаДерева.Значение = СтрокаДерева.Подразделение;
			ИначеЕсли ТипЗнч(СтрокаДерева.Значение) = Тип("СправочникСсылка.Филиалы") Тогда
				СтрокаДерева.ЭтоГруппа = Истина;
			КонецЕсли;
			НормализоватьИерархиюРезультатаЗапросаПоПодразделениям(СтрокаДерева);
		КонецЕсли;
				
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из мсСтрокиКУдалению Цикл
		УровеньДерева.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
	УровеньДерева.Строки.Сортировать("ЭтоГруппа Убыв, ПодразделениеПредставление, ЭтоСотрудник Убыв, Представление");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НормализоватьИерархиюРезультатаЗапросаПоСпециализациям(УровеньДерева)
	
	мОбр = УровеньДерева.Строки.Количество() - 1;
	Для сч = 0 По мОбр Цикл
		СтрокаДерева = УровеньДерева.Строки[мОбр - сч];
		Если Не ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
			СтрокаДерева.ЭтоГруппа = Истина;
			СтрокаДерева.Значение = СтрокаДерева.Специализация;
		КонецЕсли;
		НормализоватьИерархиюРезультатаЗапросаПоСпециализациям(СтрокаДерева);
	КонецЦикла;
	
	УровеньДерева.Строки.Сортировать("СпециализацияПредставление, Представление");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокВыбранных(УровеньДерева, СписокВыбранных)
	
	Для Каждого СтрокаДерева Из УровеньДерева Цикл
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			Если СтрокаДерева.Пометка Тогда
				СписокВыбранных.Добавить(СтрокаДерева.Значение);
			КонецЕсли;
		Иначе
			СформироватьСписокВыбранных(ПодчиненныеСтроки, СписокВыбранных)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтроку(Команда)
	
	ТекущийЭлемент = Элементы.СписокЗначение;
	ПриВыбореСтрокиСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриВыбореСтрокиСписка();

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
			ТекущиеДанные.Пометка = Не ТекущиеДанные.Пометка;
			ПометкаПриИзменении();
		Иначе
			ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
			Если Элементы.Список.Развернут(ТекущаяСтрока) Тогда
				Элементы.Список.Свернуть(ТекущаяСтрока);
			Иначе 
				Элементы.Список.Развернуть(ТекущаяСтрока, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПометкаПриИзменении(Элемент)
	
	ПометкаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении()
	
	ТекущаяСтрока = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	ИзменитьПометкуВеткиДереваВниз(ТекущаяСтрока, ТекущаяСтрока.Пометка);
	ИзменитьПометкуВеткиДереваВверх(ТекущаяСтрока, ТекущаяСтрока.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуВеткиДереваВниз(ТекущаяСтрока, Пометка)
	
	ПодчиненныеЭлементыСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыСтроки Цикл
		ПодчиненныйЭлемент.Пометка = Пометка;
		ИзменитьПометкуВеткиДереваВниз(ПодчиненныйЭлемент, Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуВеткиДереваВверх(ТекущаяСтрока, Пометка)
	
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	Если ТекущийРодитель <> Неопределено 
		И ТекущийРодитель.Пометка <> Пометка
	Тогда
		флВсеПометкиПодчиненныхУстановлены = Истина;
		ПодчиненныеЭлементыСтроки = ТекущийРодитель.ПолучитьЭлементы();
	
		Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыСтроки Цикл
			Если Не ПодчиненныйЭлемент.Пометка Тогда
				флВсеПометкиПодчиненныхУстановлены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекущийРодитель.Пометка = флВсеПометкиПодчиненныхУстановлены;
		ИзменитьПометкуВеткиДереваВверх(ТекущийРодитель, Пометка)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияСубъектовПриИзменении(Элемент)
	
	СписокВыбранных = Новый Массив;
	СформироватьСписокВыбранных(Список.ПолучитьЭлементы(), СписокВыбранных);
	ПриИзмененииРежимаОтображенияСервер(СписокВыбранных);	
	
	Если РазворачиватьДеревоСписка Тогда
		Для Каждого СтрокаКорня Из Список.ПолучитьЭлементы() Цикл
			Элементы.Список.Развернуть(СтрокаКорня.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаОтображенияСервер(СписокВыбранных)
	
	ЗначениеВРеквизитФормы(ПолучитьДеревоВыбора(СписокВыбранных, Истина, РежимОтображенияСубъектов),"Список");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ИзменитьПометкуВеткиДереваВниз(Список, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ИзменитьПометкуВеткиДереваВниз(Список, Ложь);

КонецПроцедуры
