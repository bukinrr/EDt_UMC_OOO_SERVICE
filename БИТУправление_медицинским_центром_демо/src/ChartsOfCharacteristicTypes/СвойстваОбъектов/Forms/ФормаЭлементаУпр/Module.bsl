&НаКлиенте
Перем ПредыдущаяСтрокаПравил;

&НаКлиенте
Перем ТекущаяСтрокаПравил;

/////////////////////////////////////////////////
//// КЛИЕНТСКИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьИнформационнуюСтроку()
	
	Если НаборЗаписейНазначенияСвойства.Количество() > 1 Тогда
		Элементы.НадписьНазначенияСвойства.Заголовок =
		НСтр("ru='Свойство предназначено только для указанных объектов'");
	Иначе
		Элементы.НадписьНазначенияСвойства.Заголовок =
		НСтр("ru='Свойство предназначено для всех объектов указанного типа'");
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////
//// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаСервере
Процедура ОбновитьСвойстваВладельца(ВладелецФормы)
	ОбъектОбработки = ВладелецФормы.РеквизитФормыВЗначение("Свойства");
	ОбъектОбработки.ПрочитатьЗаполнитьСвойстваИЗначения();
	ВладелецФормы.ЗначениеВРеквизитФормы(ОбъектОбработки, "Свойства");
	Элементы.СписокЗначенияСвойства.Обновить();
КонецПроцедуры

#Область ОбработчикиСобытий

&НаКлиенте
Процедура НаборЗаписейНазначенияСвойстваПриИзменении(Элемент)
	
	Отбор = НаборЗаписейНазначенияСвойства.Отбор.Свойство;
	Отбор.Значение = Объект.Ссылка;
	Отбор.Использование = Истина;
	ОбновитьИнформационнуюСтроку();

КонецПроцедуры
                            
&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	Элементы.ЗначенияСвойства.Доступность = Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	РаботаСФормамиКлиент.УстановитьОтборСписка("Владелец", Объект.Ссылка, СписокЗначенияСвойства);
	Объект.Отборы.Очистить();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Отборы.Очистить();
		Если Параметры.ОбъектОтбораЗначений <> Неопределено Тогда
			НазначениеСвойств = СвойстваИЗначенияСервер.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(Параметры.ОбъектОтбораЗначений);
			Если НазначениеСвойств.Количество() = 1  Тогда
				
				Объект.НазначениеСвойства = НазначениеСвойств[0].Значение;
				
			КонецЕсли;	
		КонецЕсли; 
	Иначе
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		Для Каждого СтрокаПравила Из СправочникОбъект.Отборы Цикл
			Отбор = СтрокаПравила.Отбор.Получить();
			СтрокаОтбора = ХранилищеОтборов.Добавить();
			СтрокаОтбора.Отбор = Отбор;
			СтрокаОтбора.СтрокаПравила = Объект.Отборы[СтрокаПравила.НомерСтроки-1].ПолучитьИдентификатор();
			СтрокаОтбора.РезультатНаФорме = СтрокаПравила.Значение;
		КонецЦикла;
		
		Для Каждого СтрокаОтбора Из ХранилищеОтборов Цикл
			СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(СтрокаОтбора.СтрокаПравила);
			Если СтрокаПравила <> Неопределено Тогда
				 СтрокаПравила.РезультатНаФорме = СтрокаОтбора.РезультатНаФорме;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли; 
	
	УстановитьОтборНаборЗаписейНазначенияСвойств();
	НаборЗаписей = РеквизитФормыВЗначение("НаборЗаписейНазначенияСвойства");
	НаборЗаписей.Прочитать();
	ЗначениеВРеквизитФормы(НаборЗаписей,"НаборЗаписейНазначенияСвойства");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СписокЗначенияСвойства.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	ОбновитьОтображениеЭлементовПоНазначениеСвойства();
	ИнициализироватьСхемуСКД();
	ОбновитьЭлементыОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	ОбновитьЭлементыОтборов();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.НазначениеСвойства = ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура") Тогда
		Для Каждого СтрокаОтбора Из ХранилищеОтборов Цикл
			
			СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(СтрокаОтбора.СтрокаПравила);
			Если СтрокаПравила <> Неопределено Тогда
				ТекущийОбъект.Отборы[СтрокаПравила.НомерСтроки-1].Отбор = Новый ХранилищеЗначения(СтрокаОтбора.Отбор);
				ТекущийОбъект.Отборы[СтрокаПравила.НомерСтроки-1].Значение = СтрокаОтбора.РезультатНаФорме;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаОтбора Из ХранилищеОтборов Цикл
		СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(СтрокаОтбора.СтрокаПравила);
		Если СтрокаПравила <> Неопределено Тогда
			 СтрокаПравила.РезультатНаФорме = СтрокаОтбора.РезультатНаФорме;
		КонецЕсли;		
	КонецЦикла;

	УстановитьОтборНаборЗаписейНазначенияСвойств();
	НаборЗаписей = РеквизитФормыВЗначение("НаборЗаписейНазначенияСвойства");
	ТабЗаписей = НаборЗаписей.Выгрузить();
	ТабЗаписей.ЗаполнитьЗначения(Объект.Ссылка, "Свойство");
	НаборЗаписей.Загрузить(ТабЗаписей);
	НаборЗаписей.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СписокЗначенияСвойства.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	
	Если типЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Попытка
			ОбновитьСвойстваВладельца(ВладелецФормы);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗначенияСвойстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;	
	КонецЕсли;
	ЗначенияЗаполнения = Новый Структура ("Владелец", Объект.Ссылка);
	ПарамФормы = Новый Структура ("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаОбъекта", ПарамФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНаборЗаписейНазначенияСвойств()
	
	НаборЗаписей = РеквизитФормыВЗначение("НаборЗаписейНазначенияСвойства");
	НаборЗаписей.Отбор.Свойство.Значение = Объект.Ссылка;
	НаборЗаписей.Отбор.Свойство.Использование = Истина;
	ЗначениеВРеквизитФормы(НаборЗаписей,"НаборЗаписейНазначенияСвойства");
	
КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейНазначенияСвойстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Отказ = Истина;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовПоНазначениеСвойства()
	Элементы.НазначенияСвойства.Доступность = Истина;
	Элементы.ПараметрыАвтоматическогоРасчета.Видимость = Ложь;
	Если Объект.НазначениеСвойства = ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_Заявка") Тогда
		Элементы.НазначенияСвойства.Доступность = Ложь;
	ИначеЕсли Объект.НазначениеСвойства = ПредопределенноеЗначение("ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура") Тогда
		Элементы.ПараметрыАвтоматическогоРасчета.Видимость = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазначениеСвойстваПриИзменении(Элемент)
	ОбновитьОтображениеЭлементовПоНазначениеСвойства();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтраницыПриСменеСтраницыНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ПараметрыАвтоматическогоРасчета" Тогда
		Если НЕ РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
			Для каждого Страница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
				Если Страница.Доступность И Страница <> ТекущаяСтраница Тогда
					Элементы.Страницы.ТекущаяСтраница = Страница;	
				КонецЕсли; 	
			КонецЦикла; 	
    	КонецЕсли;	
	КонецЕсли; 
	СтраницыПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПриИзменении(Элемент)
	ОтборКомпоновкиПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпоновкиПриИзменении()
	
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		Настройки = Новый КомпоновщикНастроекКомпоновкиДанных;
		Настройки.ЗагрузитьНастройки(КомпоновщикОтбораПрименения.Настройки);
		СтрокаОтбора.Отбор = Настройки.Настройки;
		
		СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(ТекущаяСтрокаПравил);
		Если СтрокаПравила <> Неопределено Тогда
			СтрокаПравила.ПредставлениеОтбора = Строка(СтрокаОтбора.Отбор.Отбор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуОтбораТекущегоПравила(Знач ИдентификаторСтрокиПравила = Неопределено)
	
	Если ИдентификаторСтрокиПравила = Неопределено Тогда
		ИдентификаторСтрокиПравила = ТекущаяСтрокаПравил;
	КонецЕсли;
	
	СтрокиОтбора = ХранилищеОтборов.НайтиСтроки(Новый Структура("СтрокаПравила", ИдентификаторСтрокиПравила));
	Если СтрокиОтбора.Количество() <> 0 Тогда
		Возврат СтрокиОтбора[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтборыПередУдалением(Элемент, Отказ)
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		ХранилищеОтборов.Удалить(СтрокаОтбора);
	КонецЕсли;
	КомпоновщикОтбораПрименения.Настройки.Отбор.Элементы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока Тогда
		
		НоваяСтрокаОтбора = ХранилищеОтборов.Добавить();
		НоваяСтрокаОтбора.СтрокаПравила = Элемент.ТекущаяСтрока;
		
		Если Копирование 
			И ПредыдущаяСтрокаПравил <> Неопределено
			Тогда
			СтрокаОтбораПредыдущей = ПолучитьСтрокуОтбораТекущегоПравила(ПредыдущаяСтрокаПравил);
			Если СтрокаОтбораПредыдущей <> Неопределено Тогда
				
				НоваяСтрокаОтбора.Отбор = СтрокаОтбораПредыдущей.Отбор;
				КомпоновщикОтбораПрименения.ЗагрузитьНастройки(НоваяСтрокаОтбора.Отбор);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Отборы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПредыдущаяСтрокаПравил = ТекущаяСтрокаПравил;
		ТекущаяСтрокаПравил = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЭлементыОтбораКомпоновщика = КомпоновщикОтбораПрименения.Настройки.Отбор.Элементы;
		ЭлементыОтбораКомпоновщика.Очистить();
		
		СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
		Если СтрокаОтбора <> Неопределено
			И СтрокаОтбора.Отбор  <> Неопределено
		Тогда
			КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СтрокаОтбора.Отбор);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборыРезультатНаФормеПриИзменении(Элемент)
	СтрокаОтбора = ПолучитьСтрокуОтбораТекущегоПравила();
	Если СтрокаОтбора <> Неопределено Тогда
		СтрокаПравила = Объект.Отборы.НайтиПоИдентификатору(ТекущаяСтрокаПравил);
		Если СтрокаПравила <> Неопределено Тогда
			СтрокаОтбора.РезультатНаФорме = СтрокаПравила.РезультатНаФорме;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборДоступныеПоляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуСКД()
		
	СхемаКомпоновкиДанных = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьМакет("МакетОтбораНоменклатуры");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикОтбораПрименения.Инициализировать(ИсточникНастроек);
	КомпоновщикОтбораПрименения.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикОтбораПрименения.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);	
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПересчитатьВсеЭлементыНаСервере(Свойство)
	
	КоличествоЗаписей = 0;
	КоличествоЗаписейВПачке = 50;

	СКД = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьМакет("МакетОтбораНоменклатуры");
	Выборка = Справочники.Номенклатура.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если КоличествоЗаписей = 0 Тогда
			НачатьТранзакцию();		
		КонецЕсли; 
		
		Попытка
			СвойстваИЗначенияСервер.ПересчитатьЗначениеСвойстваОбъекта(Выборка.Ссылка, Свойство, СКД);
		Исключение
			ОтменитьТранзакцию();
			Прервать;
		КонецПопытки; 
		КоличествоЗаписей = КоличествоЗаписей +1;
		
		Если КоличествоЗаписей = КоличествоЗаписейВПачке Тогда
			ЗафиксироватьТранзакцию();
			КоличествоЗаписей = 0;	
		КонецЕсли;		
	КонецЦикла;  
		
КонецФункции

&НаКлиенте
Процедура ПересчитатьВсеЭлементы(Команда)
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		ПересчитатьВсеЭлементыНаСервере(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Объект не записан. Для продолжения следует выполнить запись.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыОтборов()
	Элементы.ГруппаОтборы.Доступность = (Объект.Отборы.Количество() > 0);	
КонецПроцедуры

#КонецОбласти
