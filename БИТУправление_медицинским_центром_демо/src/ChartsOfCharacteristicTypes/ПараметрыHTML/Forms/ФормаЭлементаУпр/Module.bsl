#Область РазделОписанияПеременных

&НаКлиенте
Перем ТекущийТипЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОтборДоступностьСоставныеФразы();
	УстановитьОтборПоляЗначенияПараметра();
	
	// Исключение типа СправочникСсылка.СтрокиЭМКНеограниченнойДлины из доступных для параметра.
	ДоступныетипыДляВыбора = Новый Массив;
	ТипПлана = Объект.Ссылка.Метаданные().Тип;
	Для Каждого ТипПараметра Из ТипПлана.Типы() Цикл
		Если ТипПараметра <> Тип("СправочникСсылка.СтрокиЭМКНеограниченнойДлины") Тогда
			ДоступныетипыДляВыбора.Добавить(ТипПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ТипЗначения.ДоступныеТипы = Новый ОписаниеТипов(ДоступныетипыДляВыбора,
															 ТипПлана.КвалификаторыЧисла,
															 ТипПлана.КвалификаторыСтроки,
															 ТипПлана.КвалификаторыДаты);
	
	// По-умолчанию тип нового параметра - строка.
	Если Объект.Ссылка.Пустая()
		И Параметры.ЗначениеКопирования.Пустая()
	Тогда
		Объект.ТипЗначения = Новый ОписаниеТипов("Строка",,ТипПлана.КвалификаторыСтроки);
	КонецЕсли;
	
	Элементы.Наименование.Доступность = Не Объект.Предопределенный;
	Элементы.ТипЗначения.Доступность = Не Объект.Предопределенный;
	Элементы.ИспользуетсяВычисляемоеЗначение.Доступность = Не Объект.Предопределенный;
	
	УстановитьЗначениеПереключателяНазначенияИзПеречня();
	
	УстановитьДоступностьПоВстроеннымОбработкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьСвойстваРеквизитов();
	
	Элементы.ГруппаДеревоЗначенийВыбора.Видимость = Объект.ВыборПоСсылкеИзОграниченногоСписка;
	
	УстановитьСвойстваЗначенияВыбора();
	
	ЗаполнитьДеревоЗначенийВыбораИзТабличнойЧасти();
	
	Если Не ЗначениеЗаполнено(Объект.Назначение) Тогда
		НазначениеИзПеречняПриИзменении(Неопределено);
	КонецЕсли;
	
	ОбновитьВидимостьТипаЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СохранитьДеревоЗначенийВыбораВТабличнуюЧасть();
	Оповестить("ЗаписьПараметраHTML", Новый Структура("Параметр, ТипЗначения", Объект.Ссылка, Объект.ТипЗначения));
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НастроитьСвойстваРеквизитов();
	УстановитьОтборДоступностьСоставныеФразы();
	УстановитьОтборПоляЗначенияПараметра();
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедцрыИФункции

&НаСервере
Процедура УстановитьОтборДоступностьСоставныеФразы()
	
	ПараметрЗначения = Новый СписокЗначений;
	ПараметрЗначения.Добавить(Объект.Ссылка);
	ПараметрЗначения.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыHTML.ПустаяСсылка"));
	РаботаСФормамиСервер.УстановитьОтборСписка("Параметр", ПараметрЗначения, Фразы, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Если Объект.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
		
		Если ПоказыватьТолькоЛичные Тогда
			Фразы.Параметры.УстановитьЗначениеПараметра("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Иначе
			Фразы.Параметры.УстановитьЗначениеПараметра("Пользователь", Справочники.Пользователи.ПустаяСсылка());
		КонецЕсли;
		
		Элементы.Фразы.Доступность = Истина;
		Элементы.ПакетыСоставныхФраз.Доступность = Истина;
		
	Иначе
		
		Фразы.Параметры.УстановитьЗначениеПараметра("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Элементы.Фразы.Доступность = Ложь;
		Элементы.ПакетыСоставныхФраз.Доступность = Ложь;
		
	КонецЕсли;
	Элементы.ФразыКомандаФразыПоказатьЛичные.Картинка = ?(ПоказыватьТолькоЛичные,БиблиотекаКартинок.УстановленнаяПометка, БиблиотекаКартинок.СнятаяПометка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоляЗначенияПараметра()
	
	РаботаСФормамиСервер.УстановитьОтборСписка("Владелец", Объект.Ссылка, ЗначенияПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	
	Если НедопустимыйСоставнойТип() Тогда
		мПредставленияТипов = Новый Массив;
		Для Каждого Тип Из ДопустимыеСоставныеТипы() Цикл
			мПредставленияТипов.Добавить(СтрШаблон("""%1""", Тип));
		КонецЦикла;
		ТекстПредупреждения = СтрШаблон(НСтр("ru='Составной тип данных доступен только для следующих типов: %1.'"), СтрСоединить(мПредставленияТипов, ", "));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Объект.ТипЗначения = ТекущийТипЗначения;
		Возврат;
	КонецЕсли;
	
	Объект.ФорматнаяСтрока = РаботаСШаблонамиHTMLКлиентСервер.ПолучитьФорматнуюСтрокуПоТипу(Объект.ТипЗначения);
	УстановитьОтборДоступностьСоставныеФразы();
	НастроитьСвойстваРеквизитов();
	УстановитьСвойстваЗначенияВыбора();
	ТекущийТипЗначения = Объект.ТипЗначения;
	
КонецПроцедуры

&НаКлиенте
Функция НедопустимыйСоставнойТип()
	
	Если Объект.ТипЗначения.Типы().Количество() <= 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Тип Из Объект.ТипЗначения.Типы() Цикл
		Если ДопустимыеСоставныеТипы().Найти(Тип) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ДопустимыеСоставныеТипы()
	
	мТипы = Новый Массив;
	мТипы.Добавить(Тип("ДокументСсылка.ДоговорСКлиентом"));
	мТипы.Добавить(Тип("СправочникСсылка.СоглашенияСтрахования"));
	мТипы.Добавить(Тип("СправочникСсылка.СтраховыеПолисы"));
	
	Возврат мТипы;
	
КонецФункции

&НаКлиенте
Процедура НастроитьСвойстваРеквизитов()
	
	ЗаполнитьСписокВыбораФорматныхСтрокПоТипу();
	
	ОписаниеТипа = ?(Объект.ИспользуетсяВычисляемоеЗначение, Новый ОписаниеТипов("СправочникСсылка.ВычисляемыеЗначенияПараметров"), Объект.ТипЗначения);
	Элементы.ЗначениеПоУмолчанию.ОграничениеТипа = ОписаниеТипа;
	
	Если Не ЗначениеЗаполнено(Объект.ЗначениеПоУмолчанию) Тогда
		Объект.ЗначениеПоУмолчанию = Неопределено;
	КонецЕсли;
	
	Объект.ЗначениеПоУмолчанию = ОписаниеТипа.ПривестиЗначение(Объект.ЗначениеПоУмолчанию);
	
	Элементы.ЗначениеПоУмолчанию.ВыбиратьТип = Ложь;
	Элементы.ЗначенияПараметра.Видимость = Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДополнительныеЗначенияХарактеристик"));

	Элементы.ФорматнаяСтрока.Видимость = Ложь;
	ТипыДляФорматнойСтроки = Новый ОписаниеТипов("Дата, Число, Булево, СправочникСсылка.Диагнозы");
	Для Каждого Тип Из ТипыДляФорматнойСтроки.Типы() Цикл
		Если Объект.ТипЗначения.СодержитТип(Тип) Тогда
			Элементы.ФорматнаяСтрока.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФорматнаяСтрока.КнопкаВыбора = Не Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Диагнозы"));
	
	НастроитьВыборЗначенийПоСсылкеПоТипуПараметра();
	
	Элементы.ВидКлассификатора.Видимость = Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Вопрос(НСтр("ru='Элемент не записан, для продолжения необходимо записать, записать?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если Не Записать() Тогда
				СтандартнаяОбработка = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка при записи'"));
				Возврат;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидКлассификатора) 
		И Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава"))
		И Не Объект.ИспользуетсяВычисляемоеЗначение
	Тогда
		Массив = Новый Массив();
		
		Массив.Добавить(Тип("СправочникСсылка.КлассификаторыМинЗдрава"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидКлассификатора", Объект.ВидКлассификатора);
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элемент.ПараметрыВыбора = НовыеПараметры;
		
		ОписаниеТипа = Новый ОписаниеТипов(Массив);
		
		Элемент.ОграничениеТипа = ОписаниеТипа;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФразыОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	УстановитьРодителя(НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРодителя(ФразаСсылка)
	
	ФразаОбъект = ФразаСсылка.ПолучитьОбъект();
	
	ФразаОбъект.Родитель = Элементы.Фразы.ТекущаяСтрока;
	
	ФразаОбъект.Записать();
	
КонецПроцедуры

// Обработчик добавления нового элемента в список составных фраз
// для параметров типа "Строка".
&НаКлиенте
Процедура КомандаСоздать(Команда)
	
	Если РаботаСДиалогамиКлиент.ПроверитьМодифицированностьВФорме(ЭтаФорма) Тогда
		ЗначенияЗаполнения = Новый Структура("Параметр, Родитель",Объект.Ссылка, Элементы.Фразы.ТекущаяСтрока);
		ОткрытьФорму("Справочник.СоставныеФразы.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), Элементы.Фразы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФразыПоказатьЛичные(Команда)
	
	ПоказыватьТолькоЛичные = Не ПоказыватьТолькоЛичные;
	УстановитьОтборДоступностьСоставныеФразы();

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПараметраПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Не РаботаСДиалогамиКлиент.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматнаяСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонструкторФормата = Новый КонструкторФорматнойСтроки(Объект.ФорматнаяСтрока);
	КонструкторФормата.Показать(Новый ОписаниеОповещения("ФорматнаяСтрокаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматнаяСтрокаНачалоВыбораЗавершение(Текст, ДополнительныеПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда
		Объект.ФорматнаяСтрока = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСписокВыбораФорматныхСтрокПоТипу()
	
	СписокВыбора = Элементы.ФорматнаяСтрока.СписокВыбора;
	СписокВыбора.Очистить();
	СимволГалочка = Символ(10003);
	СимволПустойКвадрат = Символ(9723);
	Если Объект.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
		СписокВыбора.Добавить("БЛ=''; БИ='" + СимволГалочка + "'", НСтр("ru='Истина - галочка ('") + СимволГалочка + НСтр("ru='), Ложь - пусто'"));
		СписокВыбора.Добавить("БЛ='" + СимволПустойКвадрат + "'; БИ='" + СимволГалочка + "'", НСтр("ru='Истина - галочка ('") + СимволГалочка + НСтр("ru='), Ложь - пустой квадрат'"));
		СписокВыбора.Добавить("БЛ=Нет; БИ=Да", НСтр("ru='Истина - Да, Ложь - Нет'"));
	ИначеЕсли Объект.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		СписокВыбора.Добавить("ДЛФ=D", НСтр("ru='Дата без времени'"));
		СписокВыбора.Добавить("ДЛФ=T", НСтр("ru='Только время'"));
		СписокВыбора.Добавить("ДЛФ=DD", НСтр("ru='Полная дата без времени'"));
		СписокВыбора.Добавить("ДЛФ=DDT", НСтр("ru='Полная дата'"));
		СписокВыбора.Добавить("ДФ=ЧЧ:мм", НСтр("ru='Часы:Минуты'"));
		СписокВыбора.Добавить("ДФ=мм:сс; ДЛФ=DDT", НСтр("ru='Минуты:Секунды'"));
	ИначеЕсли Объект.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		СписокВыбора.Добавить("ЧН=0", НСтр("ru='Представление нуля - 0'"));
		СписокВыбора.Добавить("ЧН=", НСтр("ru='Представление нуля - пусто'"));
		
	ИначеЕсли Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Диагнозы")) Тогда
		СписокВыбора.Добавить("Наименование", НСтр("ru='Наименование'"));
		СписокВыбора.Добавить("Код", НСтр("ru='Код'"));
		
		ЭлементВыбора = СписокВыбора.Добавить(ОбщегоНазначенияСервер.ФункцияМенеджера("Справочники.Диагнозы", "ПредставлениеДиагнозаСКодом", Неопределено, "Наименование", "Код"));
		ЭлементВыбора.Представление = СтрЗаменить(СписокВыбора[2].Представление, "Код",			 НСтр("ru='Код'"));
		ЭлементВыбора.Представление = СтрЗаменить(СписокВыбора[2].Представление, "Наименование", НСтр("ru='Наименование'"));
		
		ЭлементВыбора = СписокВыбора.Добавить("[Код] Наименование");
		ЭлементВыбора.Представление = СтрЗаменить(СписокВыбора[2].Представление, "Код",			 НСтр("ru='Код'"));
		ЭлементВыбора.Представление = СтрЗаменить(СписокВыбора[2].Представление, "Наименование", НСтр("ru='Наименование'"));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСвойстваЗначенияВыбора()
	
	КлассификаторЕГИСЗ = Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава"))
						Или Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ИнструментальныеИсследования"));
	
	Элементы.ДеревоЗначенийЗначение.КнопкаСоздания = Не КлассификаторЕГИСЗ;
	Элементы.ДеревоЗначенийЗначение.КнопкаОткрытия = Не КлассификаторЕГИСЗ;
	Элементы.ДеревоЗначенийЗначение.КнопкаВыпадающегоСписка = Не КлассификаторЕГИСЗ;
	Элементы.ДеревоЗначенийЗначение.ИсторияВыбораПриВводе = ?(КлассификаторЕГИСЗ, ИсторияВыбораПриВводе.НеИспользовать, ИсторияВыбораПриВводе.Авто);
	Элементы.ДеревоЗначенийЗначение.ОтображениеКнопкиВыбора = ?(КлассификаторЕГИСЗ, ОтображениеКнопкиВыбора.ОтображатьВПолеВвода, ОтображениеКнопкиВыбора.Авто);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГФИзДругогоПараметра(Команда)
	
	РаботаСШаблонамиHTMLКлиент.СкопироватьСоставныеФразы(Объект.Ссылка, Элементы.Фразы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоВстроеннымОбработкам()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или ОбщегоНазначенияСервер.РежимРасширенныхВозможностейРедактированияДанных()
	Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныHTML.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныHTML.СоответствияПараметрам КАК ШаблоныHTMLСоответствияПараметрам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
		|		ПО (ШаблоныHTML.Ссылка = ШаблоныHTMLСоответствияПараметрам.Ссылка)
		|			И (ШаблоныHTMLСоответствияПараметрам.Параметр = &Параметр)
		|			И (ШаблоныHTML.ВидШаблона = ЗНАЧЕНИЕ(Перечисление.ВидыШаблонов.Обработка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныHTML.Ссылка
		|ИЗ
		|	Справочник.ШаблоныHTML.СоответствияТаблицамШаблонов КАК ШаблоныHTMLСоответствияТаблицамШаблонов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныHTML КАК ШаблоныHTML
		|		ПО (ШаблоныHTML.Ссылка = ШаблоныHTMLСоответствияТаблицамШаблонов.Ссылка)
		|			И (ШаблоныHTMLСоответствияТаблицамШаблонов.Параметр = &Параметр)
		|			И (ШаблоныHTML.ВидШаблона = ЗНАЧЕНИЕ(Перечисление.ВидыШаблонов.Обработка))";
	
	Запрос.УстановитьПараметр("Параметр", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрВстроеннойОбработки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ссылка.Обработка.Получить()) = Тип("Строка") Тогда
			ПараметрВстроеннойОбработки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрВстроеннойОбработки Тогда
		Для Каждого Элемент Из Элементы Цикл
			Попытка
				Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
					Элемент.Доступность = Ложь;
				Иначе
					Элемент.ТолькоПросмотр = Истина;
				КонецЕсли;
			Исключение КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеИзПеречняПриИзменении(Элемент)
	
	Если НазначениеИзПеречня = 0 Или НазначениеИзПеречня = 2 Тогда
		ОжидаемыйТип = Тип("СправочникСсылка.КлассификаторыМинЗдрава"); 
	Иначе
		ОжидаемыйТип = Тип("ПеречислениеСсылка.КодировкаПолейЭМД");
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляНазначения(Элементы.Назначение, НазначениеИзПеречня);
	
	Если ОжидаемыйТип = Тип("СправочникСсылка.КлассификаторыМинЗдрава") 
		И ТипЗнч(Объект.Назначение) = Тип("СправочникСсылка.КлассификаторыМинЗдрава")  
	Тогда
		Объект.Назначение = ПредопределенноеЗначение("Справочник.КлассификаторыМинЗдрава.ПустаяСсылка");
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.НовыйМассив(ОжидаемыйТип));
		Объект.Назначение = ОписаниеТипа.ПривестиЗначение(Объект.Назначение);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДляНазначения(ЭлементНазначение, НазначениеИзПеречня)
	
	МассивПараметровВыбора = Новый Массив;
	Если НазначениеИзПеречня = 0 ИЛИ НазначениеИзПеречня = 2 Тогда
		Если НазначениеИзПеречня = 0 Тогда
			ЗначениеПараметра = ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.КодируемыеПоляCDAДокументов");
		Иначе
			ЗначениеПараметра = ПредопределенноеЗначение("Перечисление.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры");
		КонецЕсли;
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидКлассификатора", ЗначениеПараметра);
		МассивПараметровВыбора.Добавить(НовыйПараметр);
	КонецЕсли;
	
	МассивПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	ЭлементНазначение.ПараметрыВыбора = МассивПараметровВыбора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПереключателяНазначенияИзПеречня()
	
	Если ТипЗнч(Объект.Назначение) = Тип("ПеречислениеСсылка.КодировкаПолейЭМД") Тогда
		НазначениеИзПеречня = 1;
	ИначеЕсли ТипЗнч(Объект.Назначение) = Тип("СправочникСсылка.КлассификаторыМинЗдрава") 
		И ЗначениеЗаполнено(Объект.Назначение)
		И Объект.Назначение.ВидКлассификатора = Перечисления.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры 
	Тогда
		НазначениеИзПеречня = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиИспользование(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныHTML.Форма.СписокШаблоновПоПараметру", Новый Структура("ПараметрHTML", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ОбновитьВидимостьТипаЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьТипаЗначений()
	
	Элементы.ГруппаТипЗначения.Видимость = Объект.Назначение <> ПредопределенноеЗначение("Перечисление.КодировкаПолейЭМД.СЭМДЗначениеНеопределённогоВитальногоПараметра");
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоЗначенийВыбора

&НаКлиенте
Процедура НастроитьВыборЗначенийПоСсылкеПоТипуПараметра()
	
	ТипЗначения = Объект.ТипЗначения;
	ЭтоСтрока = ТипЗначения.СодержитТип(Тип("Число"));
	ЭтоЧисло = ТипЗначения.СодержитТип(Тип("Строка"));
	ЭтоКлассификаторМинЗдрава = ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава"));
	ПодходитТип = ЭтоСтрока Или ЭтоЧисло Или ЭтоКлассификаторМинЗдрава;
	
	Элементы.ВыборПоСсылкеИзОграниченногоСписка.Доступность = ПодходитТип;
	Если Не ПодходитТип Тогда
		Объект.ВыборПоСсылкеИзОграниченногоСписка = Ложь;
	КонецЕсли;
	Элементы.ГруппаДеревоЗначенийВыбора.Видимость = Объект.ВыборПоСсылкеИзОграниченногоСписка;
	Элементы.СгенерироватьЗначения.Видимость = ТипЗначения.СодержитТип(Тип("Число"));
	
	// При переключении типа Число <-> Строка конвертируем значения.
	БылиУдаленияСтрок = Ложь;
	ПривестиЗначенияВершиныДереваЗначенийВыбораКТипуПараметра(ДеревоЗначенийВыбора, БылиУдаленияСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиЗначенияВершиныДереваЗначенийВыбораКТипуПараметра(Вершина, БылиУдаленияСтрок)
	
	СтрокиНаУдаление = Новый Массив;
	
	СтрокиВершины = Вершина.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиВершины Цикл
		
		ТипУзла = ТипЗнч(СтрокаДерева.Значение);
		Если Не Объект.ТипЗначения.СодержитТип(ТипУзла) Тогда
			Если Объект.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				Попытка
					СтрокаДерева.Значение = Число(СтрокаДерева.Значение);
				Исключение
					СтрокиНаУдаление.Добавить(СтрокаДерева);
					БылиУдаленияСтрок = Истина;
					Продолжить;
				КонецПопытки;
			Иначе
				СтрокаДерева.Значение = Строка(СтрокаДерева.Значение);
			КонецЕсли;
		КонецЕсли;
		
		ПривестиЗначенияВершиныДереваЗначенийВыбораКТипуПараметра(СтрокаДерева, БылиУдаленияСтрок)
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из СтрокиНаУдаление Цикл
		СтрокиВершины.Удалить(СтрокаДерева);
	КонецЦикла;
	
	ДеревоЗначенийВыбораОбновитьПризнакиГруппы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПоСсылкеИзОграниченногоСпискаПриИзменении(Элемент)
	
	Элементы.ГруппаДеревоЗначенийВыбора.Видимость = Объект.ВыборПоСсылкеИзОграниченногоСписка;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоЗначенийВыбораИзТабличнойЧасти()
	
	ЗагрузитьВершинуДереваЗначенийВыбора(0, ДеревоЗначенийВыбора, Объект.ЗначенияВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВершинуДереваЗначенийВыбора(КлючРодителя, Вершина, ТаблицаЗначенийВыбора)
	
	ПодчиненныеСтроки = ТаблицаЗначенийВыбора.НайтиСтроки(Новый Структура("КлючРодителя",КлючРодителя));
	Для Каждого Строка Из ПодчиненныеСтроки Цикл
		НоваяВершина = Вершина.ПолучитьЭлементы().Добавить();
		НоваяВершина.Значение		  = Строка.Значение;
		НоваяВершина.Представление	  = Строка.Представление;
		НоваяВершина.ЭтоГруппа		  = Строка.ЭтоГруппа;
		НоваяВершина.КартинкаИерархии = Число(Не Строка.ЭтоГруппа) + 1;
		ЗагрузитьВершинуДереваЗначенийВыбора(Строка.КлючСтроки, НоваяВершина, ТаблицаЗначенийВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДеревоЗначенийВыбораВТабличнуюЧасть()
	Объект.ЗначенияВыбора.Очистить();
	Вершины = ДеревоЗначенийВыбора.ПолучитьЭлементы();
	Для Каждого Вершина Из Вершины Цикл
		СохранитьВершину(Вершина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВершину(Вершина, КлючРодителя = 0)
	ПодчиненныеВершины = Вершина.ПолучитьЭлементы();
	НоваяСтрока = Объект.ЗначенияВыбора.Добавить();
	НоваяСтрока.КлючСтроки = ОбщегоНазначенияКлиентСервер.ПолучитьНовыйКлючСтроки(Объект.ЗначенияВыбора);
	НоваяСтрока.КлючРодителя = КлючРодителя;
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Значение = Вершина.Значение;
	Если ЗначениеЗаполнено(Вершина.Представление) Тогда
		НоваяСтрока.Представление = Вершина.Представление;
	Иначе
		НоваяСтрока.Представление = "";
	КонецЕсли;
	Если ПодчиненныеВершины.Количество() > 0 Тогда
		НоваяСтрока.ЭтоГруппа = Истина;
		Для каждого ПодВершина Из ПодчиненныеВершины Цикл
			СохранитьВершину(ПодВершина,НоваяСтрока.КлючСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьЗначения(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ФормаГенерацияЧиселПослеГенерации", ЭтаФорма, Элементы.ДеревоЗначенийВыбора.ТекущаяСтрока);
	ОткрытьФорму("ПланВидовХарактеристик.ПараметрыHTML.Форма.ФормаГенерацияЧисел",,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьВТотЖеУровеньДереваЗначенийВыбора(Команда)
	
	ВершинаДляДобавления = ДеревоЗначенийВыбора;
	
	ТекущаяСтрока = Элементы.ДеревоЗначенийВыбора.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтрокаДерева = ДеревоЗначенийВыбора.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекущийРодитель <> Неопределено Тогда
			ВершинаДляДобавления = ТекущийРодитель;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ВершинаДляДобавления.ПолучитьЭлементы().Добавить();
	Элементы.ДеревоЗначенийВыбора.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ДеревоЗначенийВыбора.ТекущийЭлемент = Элементы.ДеревоЗначенийЗначение;
	Элементы.ДеревоЗначенийВыбора.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийВыбораПриИзменении(Элемент)
	
	ДеревоЗначенийВыбораОбновитьПризнакиГруппы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийВыбораПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЗначенийВыбора.ТекущиеДанные;
	Попытка
		ТекущиеДанные.Значение = Объект.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
	Исключение
		ТекущиеДанные.Значение = Объект.ТипЗначения.ПривестиЗначение(Неопределено);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийВыбораПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		ДеревоЗначенийВыбораОбновитьПризнакиГруппы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДеревоЗначенийВыбораОбновитьПризнакиГруппы(ВершинаДерева = Неопределено)
	
	Если ВершинаДерева <> Неопределено Тогда
		ВершинаДерева.ЭтоГруппа = Ложь;
	КонецЕсли;
	
	ТекущаяВершина = ?(ВершинаДерева = Неопределено, ДеревоЗначенийВыбора, ВершинаДерева);
	Для Каждого СтрокаУровня Из ТекущаяВершина.ПолучитьЭлементы() Цикл
		
		Если ВершинаДерева <> Неопределено Тогда
			ВершинаДерева.ЭтоГруппа = Истина;
		КонецЕсли;
		
		ДеревоЗначенийВыбораОбновитьПризнакиГруппы(СтрокаУровня);
	КонецЦикла;
	
	Если ВершинаДерева <> Неопределено Тогда
		ВершинаДерева.КартинкаИерархии = ДеревоЗначенийВыбораПолучитьИндексКартинки(ВершинаДерева.ЭтоГруппа);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДеревоЗначенийВыбораПолучитьИндексКартинки(ЭтоГруппа)
	
	Возврат Число(Не ЭтоГруппа) + 1;
	
КонецФункции

&НаКлиенте
Процедура ФормаГенерацияЧиселПослеГенерации(СгенерированныеЗначения, ИдентификаторСтроки) Экспорт
	
	Если ТипЗнч(СгенерированныеЗначения) = Тип("Массив") Тогда
		
		Если ИдентификаторСтроки = Неопределено Тогда
			КоллекцияЭлементов = ДеревоЗначенийВыбора.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементов = ДеревоЗначенийВыбора.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы();
		КонецЕсли;
		
		Для Каждого Значение Из СгенерированныеЗначения Цикл
			НоваяСтрока = КоллекцияЭлементов.Добавить();
			НоваяСтрока.Значение = Значение;
		КонецЦикла;
		
		ДеревоЗначенийВыбораОбновитьПризнакиГруппы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ВидКлассификатора) И Объект.ТипЗначения.СодержитТип(Тип("СправочникСсылка.КлассификаторыМинЗдрава")) Тогда
		Массив = Новый Массив();
		
		Массив.Добавить(Тип("СправочникСсылка.КлассификаторыМинЗдрава"));
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидКлассификатора", Объект.ВидКлассификатора);
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элемент.ПараметрыВыбора = НовыеПараметры;
		
		ОписаниеТипа = Новый ОписаниеТипов(Массив);
		
		Элемент.ОграничениеТипа = ОписаниеТипа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГотовыеФразы(Команда)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Корень", НСтр("ru='В корень'"));
	СписокКнопок.Добавить("ОтдельнаяГруппа", НСтр("ru='В отдельную группу'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеВопросаДобавитьГотовыеФразы",ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение,НСтр("ru='Куда поместить эти варианты?'"),СписокКнопок,0,КодВозвратаДиалога.Отмена,НСтр("ru='Будут добавлены новые варианты выбора.'"));
 	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеВопросаДобавитьГотовыеФразы(Результат, Параметры) Экспорт
 	
    Если Результат <> КодВозвратаДиалога.Отмена Тогда
        ДеревоРезультат = ДеревоЗначенийИзГотовыхФраз(Результат, Объект.Ссылка, ДеревоЗначенийВыбора);
		ПеренестиВФормуВершиныДереваЗначений(ДеревоРезультат);
		ДеревоЗначенийВыбораОбновитьПризнакиГруппы();
    КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДеревоЗначенийИзГотовыхФраз(РежимДобавления, ПараметрСсылка, Знач ДеревоЗначенийВыбора)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочникСоставныеФразы.Ссылка КАК Ссылка,
	               |	СправочникСоставныеФразы.Текст КАК Текст,
	               |	СправочникСоставныеФразы.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.СоставныеФразы КАК СправочникСоставныеФразы
	               |ГДЕ
	               |	СправочникСоставныеФразы.Параметр = &ПараметрШаблона
	               |ИТОГИ ПО
	               |	Ссылка ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ПараметрШаблона", ПараметрСсылка);
	Результат = Запрос.Выполнить();
	
	ДеревоЗначенийВыбора.ПолучитьЭлементы().Очистить();
	
	Если Не Результат.Пустой() Тогда
		Если РежимДобавления = "ОтдельнаяГруппа" Тогда
			СписокВершин = ДеревоЗначенийВыбора.ПолучитьЭлементы();
			ВершинаКорень = СписокВершин.Добавить();
			ВершинаКорень.Представление = НСтр("ru='Готовые фразы'");
			ВершинаКорень.Значение = НСтр("ru='Готовые фразы'");
		Иначе
			ВершинаКорень = ДеревоЗначенийВыбора;
		КонецЕсли; 
		
		ДобавитьДочерниеФразы(ВершинаКорень, Результат, Неопределено, "");
	КонецЕсли;
	
	Возврат ДеревоЗначенийВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьДочерниеФразы(Вершина, Знач ВыборкаСИерархией, Родитель, ИтоговыйТекст)
	
	ВыборкаСИерархией = ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"Ссылка");
	СписокВершин = Вершина.ПолучитьЭлементы();
	Пока ВыборкаСИерархией.Следующий() Цикл
		Ссылка = ВыборкаСИерархией.Ссылка;
		Если Ссылка <> Родитель Тогда
			ТекстЗначения = СокрЛП(ИтоговыйТекст) + " " + СокрЛП(Ссылка.Текст);
			НоваяВершина = СписокВершин.Добавить();
			НоваяВершина.Значение = ТекстЗначения;
			НоваяВершина.Представление = Ссылка.Наименование;
			ДобавитьДочерниеФразы(НоваяВершина,ВыборкаСИерархией,Ссылка,ТекстЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗначенияВыбораИзПараметра(Команда)
	
	ОткрытьФорму("ПланВидовХарактеристик.ПараметрыHTML.ФормаВыбора",,Элементы.ДеревоЗначенийВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВФормуВершиныДереваЗначений(ДеревоДляПереноса, ВершинаДереваЗначений = Неопределено)
	
	Если ВершинаДереваЗначений = Неопределено Тогда
		ВершинаДереваЗначений = ДеревоЗначенийВыбора;
	КонецЕсли;
	
	СписокВершин = ДеревоДляПереноса.ПолучитьЭлементы();
	Для Каждого ВершинаДерева Из СписокВершин Цикл
		НоваяВершина = ВершинаДереваЗначений.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяВершина, ВершинаДерева);
		ПеренестиВФормуВершиныДереваЗначений(ВершинаДерева, НоваяВершина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьЗначенияВыбораИзПараметраНаСервере(ПараметрСсылка, ТипОбъекта, Знач ТаблицаФормы, ТипыСовпадают)
	
	ТипыСовпадают = Истина;
	ТипВторогоПараметра = ПараметрСсылка.ТипЗначения;
	Для Каждого ТипПараметра Из ТипОбъекта.Типы() Цикл
		Если Не ТипВторогоПараметра.СодержитТип(ТипПараметра) Тогда
			ТипыСовпадают = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаФормы.Очистить();
	Если ТипыСовпадают Тогда
		ЗначениеВДанныеФормы(ПараметрСсылка.ЗначенияВыбора, ТаблицаФормы);
	КонецЕсли;
	
	Возврат ТаблицаФормы;
	
КонецФункции

&НаКлиенте
Процедура ДеревоЗначенийВыбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.ПараметрыHTML") Тогда
		ТипыСовпадают = Истина;
		ТаблицаДляДобавления = ДобавитьЗначенияВыбораИзПараметраНаСервере(ВыбранноеЗначение, Объект.ТипЗначения, Объект.ЗначенияВыбора, ТипыСовпадают);
		Если Не ТипыСовпадают Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не совпадают типы значений у параметров!'"));
		ИначеЕсли ТаблицаДляДобавления.Количество() > 0 Тогда
			ЗагрузитьВершинуДереваЗначенийВыбора(0, ДеревоЗначенийВыбора,ТаблицаДляДобавления);
			ДеревоЗначенийВыбораОбновитьПризнакиГруппы();
		Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В указанном параметре отсутствуют значения для заполнения!'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти