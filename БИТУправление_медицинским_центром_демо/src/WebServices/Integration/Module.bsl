
Функция GetSchedule(StartDate, FinishDate) Экспорт
	ОписаниеОшибки = "";
	Попытка
		ДатаНачала = StartDate;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании StartDate в дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		ДатаОкончания = FinishDate;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании FinishDate в дату." + Символы.ПС;
	КонецПопытки;
	
	ДопПараметры = Новый Структура;
	
	СообщениеXML = ВебИнтеграция.ПолучитьГрафикиРаботыXML(ДатаНачала, ДатаОкончания, ОписаниеОшибки, Истина);

	Возврат СообщениеXML;
	
КонецФункции

Функция GetSchedule20(StartDate, FinishDate,Params) Экспорт
	
	ОписаниеОшибки = "";	
	ОписаниеОшибкиParams = "";
	Попытка
		ДатаНачала = StartDate;
	Исключение
		// Запись об ошибке считывания даты
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибки, НСтр("ru='Ошибка при преобразовании параметра 'StartDate' в дату'"), Символы.ПС);
	КонецПопытки;
	
	Попытка
		ДатаОкончания = FinishDate;
	Исключение
		// Запись об ошибке считывания даты
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибки, НСтр("ru='Ошибка при преобразовании параметра 'FinishDate' в дату'"), Символы.ПС);
	КонецПопытки;
	
	Параметры = СериализаторXDTO.ПрочитатьXDTO(Params);
	
	// Получение значений параметров из Params
	ФилиалСтрокой = Неопределено;
	СотрудникиСтрокой = Неопределено;
	ФорматФайла	= Неопределено;
	Параметры.Свойство("Clinic", ФилиалСтрокой);
	Параметры.Свойство("Employees", СотрудникиСтрокой);
	Параметры.Свойство("Format", ФорматФайла);

	Филиал = Неопределено;
	Если ЗначениеЗаполнено(ФилиалСтрокой) Тогда
		Попытка 
			ФилиалСсылкаПоУИД = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(ФилиалСтрокой));
			Если ФилиалСсылкаПоУИД.ПолучитьОбъект() <> Неопределено Тогда
				Филиал = ФилиалСсылкаПоУИД;
			КонецЕсли;	
		Исключение КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Филиал) Тогда
			ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибкиParams, СтрШаблон(НСтр("ru='Филиал не найден в базе по UUID: %1'"),  ФилиалСтрокой), Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	Сотрудники = Новый Массив;

	Если ЗначениеЗаполнено(СотрудникиСтрокой) Тогда
		
		СотрудникиМассивСтрок = СтрРазделить(СотрудникиСтрокой,";");  
		Для Каждого СотрудникУИД Из СотрудникиМассивСтрок Цикл
			
			СотрудникВБазе = Неопределено;
		    Попытка
	    	    СотрудникВБазе = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(СотрудникУИД));
				Если СотрудникВБазе.ПолучитьОбъект() = Неопределено Тогда
					СотрудникВБазе = Неопределено
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Если ЗначениеЗаполнено(СотрудникВБазе) Тогда
				Сотрудники.Добавить(СотрудникВБазе);
			Иначе
				ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ОписаниеОшибкиParams, СтрШаблон(НСтр("ru='Сотрудник не найден в базе по UUID: %1'"),  СотрудникУИД), Символы.ПС);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	// Параметры для передачи далее в расчет ответа
	ДопПараметры = Новый Структура;
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		 ДопПараметры.Вставить("Филиал",Филиал);
	КонецЕсли;
	 
	Если Сотрудники.Количество() <> 0 Тогда
		 ДопПараметры.Вставить("Сотрудники",Сотрудники);
	КонецЕсли;	 
			
	Если ЗначениеЗаполнено(ОписаниеОшибкиParams) Тогда
		ОписаниеОшибкиParams = НСтр("ru='Ошибки разбора параметра Params:'") + Символы.ПС + ОписаниеОшибкиParams;
	КонецЕсли;	
	
	СообщениеXML = ВебИнтеграция.ПолучитьГрафикиРаботыXML(ДатаНачала, ДатаОкончания, ОписаниеОшибки, Истина, ДопПараметры, ОписаниеОшибкиParams);
	
	// Изменение формата возвращаемого файла
	Если ЗначениеЗаполнено(ФорматФайла) Тогда 
		Если ФорматФайла = "JSON" Тогда
			Возврат ВебИнтеграция.XML2JSON(СообщениеXML);
		ИначеЕсли ФорматФайла = "ZipXML" Тогда
			ФайлXML = ПолучитьИмяВременногоФайла("xml");
			ЗаписьФайла = Новый ЗаписьXML;
			ЗаписьФайла.ОткрытьФайл(ФайлXML);
			ЗаписатьXML(ЗаписьФайла, СообщениеXML);
			ЗаписьФайла.Закрыть();
			Возврат ВебИнтеграция.АрхивироватьФайл(ФайлXML);
		ИначеЕсли ФорматФайла = "ZipJSON" Тогда
			ТекстJSON = ВебИнтеграция.XML2JSON(СообщениеXML);
			ФайлJSON = ПолучитьИмяВременногоФайла("json");
			ЗаписьФайла = Новый ЗаписьJSON;
			ЗаписьФайла.ОткрытьФайл(ФайлJSON);
			ЗаписатьJSON(ЗаписьФайла,ТекстJSON);
			ЗаписьФайла.Закрыть();
			Возврат ВебИнтеграция.АрхивироватьФайл(ФайлJSON);	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СообщениеXML;
	
КонецФункции

Функция BookAnAppointment(EmployeeID, PatientSurname, PatientName, PatientFatherName, Date, TimeBegin, Comment, Phone, Email, Address, Clinic, GUID) Экспорт	

	ОписаниеОшибки = "";	
	
	Попытка
		УИСпр = Новый УникальныйИдентификатор(EmployeeID);
	Исключение
		// Запись об ошибке в формате УИД
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора на основе EmployeeID." + Символы.ПС;
	КонецПопытки;

	Сотрудник = Справочники.Сотрудники.ПолучитьСсылку(УИСпр);
	Если ПустаяСтрока(Сотрудник.Код) Тогда
		Сотрудник = Справочники.Оборудование.ПолучитьСсылку(УИСпр);
		Если ПустаяСтрока(Сотрудник.Код) Тогда	
			// Запись об ошибке поиска по УИД
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска сотрудника по уникальному идентификатору. Сотрудник с указанным УИД не найден" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Дата = Date;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании Date в дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		ВремяНачалаЗаписи = Дата('00010101') + (TimeBegin-НачалоДня(TimeBegin));
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании TimeBegin в Дату." + Символы.ПС;
	КонецПопытки;
	БазоваяПериодичность = УправлениеНастройками.ПолучитьУчетнуюПолитику().ПериодичностьПланирования;

	Попытка
		Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Сотрудник.ДлительностьПриема) Тогда
			ПериодичностьУП = Сотрудник.ДлительностьПриема - Дата("00010101");
		ИначеЕсли ЗначениеЗаполнено(БазоваяПериодичность) Тогда 
			ПериодичностьУП =  БазоваяПериодичность - Дата("00010101");
		Иначе
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при расчете времени окончания: в базе не настроена периодичность бронирования и у сотрудника не задана длительность приема." + Символы.ПС
		КонецЕсли;
		ВремяОкончанияЗаписи = ВремяНачалаЗаписи + ПериодичностьУП;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при расчете времени окончания." + Символы.ПС;
	КонецПопытки;
	
		
	Попытка	
		Клиника = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(Clinic));
	Исключение
		// Запись об ошибке получения филиала по наименованию
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при поиске клиники по переданному уникальному идентификатору. Клиника с указанным УИД не найдена." + Символы.ПС;
	КонецПопытки;
	
	СообщениеXML = ВебИнтеграция.СоздатьЗаявку(Сотрудник, PatientSurname, PatientName, PatientFatherName,, Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Comment, Phone, Email, Address, Клиника, ОписаниеОшибки,GUID);

	Возврат СообщениеXML;

КонецФункции

Функция FastBookAnAppointment(Specialization, PatientSurname, PatientName, PatientFatherNname, Date, TimeBegin, Comment, Phone, Email, Address, Clinic) Экспорт
	ОписаниеОшибки = "";	

	Попытка
		Дата = Date;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании Date в дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		ВремяНачалаЗаписи = Дата('00010101') + (TimeBegin-НачалоДня(TimeBegin));
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании TimeBegin в Дату." + Символы.ПС;
	КонецПопытки;	
	Специализация = СокрЛП(Specialization);	
	
	Попытка	
		Клиника = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(Clinic));
	Исключение
		// Запись об ошибке получения филиала по наименованию
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при поиске клиники по переданному уникальному идентификатору. Клиника с указанным УИД не найдена." + Символы.ПС;
	КонецПопытки;
	Попытка
		СообщениеXML = ВебИнтеграция.СоздатьЛистОжидания(Специализация, PatientSurname, PatientName, PatientFatherNname, Дата, ВремяНачалаЗаписи, Comment, Phone, Email, Address, Клиника, ОписаниеОшибки);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат СообщениеXML;
КонецФункции

Функция GetReserve(Specialization, Date, TimeBegin, EmployeeID, Clinic) Экспорт
	
	ОписаниеОшибки = "";	
	
	Попытка
		УИСпр = Новый УникальныйИдентификатор(EmployeeID);
	Исключение
		// Запись об ошибке в формате УИД
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора на основе EmployeeID." + Символы.ПС;
	КонецПопытки;

	Сотрудник = Справочники.Сотрудники.ПолучитьСсылку(УИСпр);
	Если ПустаяСтрока(Сотрудник.Код) Тогда
		Сотрудник = Справочники.Оборудование.ПолучитьСсылку(УИСпр);
		Если ПустаяСтрока(Сотрудник.Код) Тогда	
			// Запись об ошибке поиска по УИД
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска сотрудника по уникальному идентификатору. Сотрудник с указанным УИД не найден" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Дата = Date;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании Date в дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		ВремяНачалаЗаписи = Дата('00010101') + (TimeBegin-НачалоДня(TimeBegin));
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании TimeBegin в Дату." + Символы.ПС;
	КонецПопытки;
	
	БазоваяПериодичность = УправлениеНастройками.ПолучитьУчетнуюПолитику().ПериодичностьПланирования;
	Попытка
		
		Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Сотрудник.ДлительностьПриема) Тогда
			
			ПериодичностьУП = Сотрудник.ДлительностьПриема - Дата("00010101");
			
		ИначеЕсли Справочники.Сотрудники.ПустаяСсылка().Метаданные().Реквизиты.Найти("Специализация") <> Неопределено И
			ЗначениеЗаполнено(Сотрудник) И 
			ЗначениеЗаполнено(Сотрудник.Специализация) И 
			ЗначениеЗаполнено(Сотрудник.Специализация.ДлительностьПриема) Тогда
			
			ПериодичностьУП = Сотрудник.Специализация.ДлительностьПриема - Дата("00010101");
			
		ИначеЕсли ЗначениеЗаполнено(БазоваяПериодичность) Тогда 
			
			ПериодичностьУП =  БазоваяПериодичность - Дата("00010101");
			
		Иначе
			
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при расчете времени окончания: в базе не настроена периодичность бронирования и у сотрудника не задана длительность приема." + Символы.ПС;
			
		КонецЕсли;
		
		ВремяОкончанияЗаписи = ВремяНачалаЗаписи + ПериодичностьУП;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при расчете времени окончания." + Символы.ПС;
	КонецПопытки;
	
		
	Попытка	
		Клиника = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(Clinic));
	Исключение
		// Запись об ошибке получения филиала по наименованию
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при поиске клиники по переданному уникальному идентификатору. Клиника с указанным УИД не найдена." + Символы.ПС;
	КонецПопытки;
	
	СообщениеXML = ВебИнтеграция.СоздатьБронь(Сотрудник, Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Клиника, ОписаниеОшибки);
	Возврат СообщениеXML;
КонецФункции

Функция GetEnlargementSchedule(StartDate, FinishDate) Экспорт
	
	ОписаниеОшибки = "";	
	Попытка
		ДатаНачала = StartDate;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании StartDate в дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		ДатаОкончания = FinishDate;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании FinishDate в дату." + Символы.ПС;
	КонецПопытки;
	
	СообщениеXML = ВебИнтеграция.ПолучитьУкрупненыеГрафикиРаботыXML(ДатаНачала, ДатаОкончания, ОписаниеОшибки);
	
	Возврат СообщениеXML;

КонецФункции

Функция GetListEmployees() Экспорт
	
	ОписаниеОшибки = "";	
	
	СообщениеXML = ВебИнтеграция.ПолучитьСписокСотрудниковXML();
	
	Возврат СообщениеXML;
	
КонецФункции

Функция GetListClinic() Экспорт
	
	СообщениеXML = ВебИнтеграция.ПолучитьСписокКлиникXML();
	
	Возврат СообщениеXML;
	
КонецФункции

Функция BookAnAppointmentWithClient(EmployeeID, TimeBegin, Comment, GUID, Client, Service)
			
	ОписаниеОшибки = "";	
	
	Попытка
		УИСпр = Новый УникальныйИдентификатор(EmployeeID);
	Исключение
		// запись об ошибке в формате УИД
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора на основе EmployeeID." + Символы.ПС;
	КонецПопытки;

	Сотрудник = Справочники.Сотрудники.ПолучитьСсылку(УИСпр);
	Если ПустаяСтрока(Сотрудник.Код) Тогда
		Сотрудник = Справочники.Оборудование.ПолучитьСсылку(УИСпр);
		Если ПустаяСтрока(Сотрудник.Код) Тогда	
			// запись об ошибке поиска по УИД
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска сотрудника по уникальному идентификатору. Сотрудник с указанным УИД не найден" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		УИДКлиент = Новый УникальныйИдентификатор(Client);
	Исключение
		// запись об ошибке в формате УИД
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора на основе Client." + Символы.ПС;
	КонецПопытки;

	Клиент = Справочники.Клиенты.ПолучитьСсылку(УИДКлиент);
	Если Клиент.Пустая() Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска клиента по уникальному идентификатору. Клиент с указанным УИД не найден" + Символы.ПС;
	КонецЕсли;
		
	Попытка
		УИДУслуги = Новый УникальныйИдентификатор(Service);
	Исключение
		// запись об ошибке в формате УИД
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора на основе Service." + Символы.ПС;
	КонецПопытки;

	Услуга = Справочники.Номенклатура.ПолучитьСсылку(УИДУслуги);
	Если Услуга.Пустая() Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска услуги/номенклатуры по уникальному идентификатору. Услуга/Номенклатура с указанным УИД не найдена" + Символы.ПС;
	КонецЕсли;
	
	Попытка
		Дата = Дата(Год(TimeBegin),Месяц(TimeBegin), День(TimeBegin));
	Исключение
		// запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании TimeBegin в дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		ВремяНачалаЗаписи = Дата(1, 1, 1, Час(TimeBegin), Минута(TimeBegin), Секунда(TimeBegin));
	Исключение
		// запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании TimeBegin в Дату." + Символы.ПС;
	КонецПопытки;
	
	ПериодичностьУП = 0;
	Попытка	
		Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Услуга) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОсновныеУслугиСотрудников.Часы,
			|	ОсновныеУслугиСотрудников.Минуты
			|ИЗ
			|	РегистрСведений.ОсновныеУслугиСотрудников КАК ОсновныеУслугиСотрудников
			|ГДЕ
			|	ОсновныеУслугиСотрудников.Сотрудник = &Сотрудник
			|	И ОсновныеУслугиСотрудников.Номенклатура = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Услуга);
			Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
			
			ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ПериодичностьУП = ВыборкаДетальныеЗаписи.Часы * 60 * 60 + ВыборкаДетальныеЗаписи.Минуты * 60;
			Иначе
				ПериодичностьУП = Услуга.ПродолжительностьЧас * 60 * 60 + Услуга.ПродолжительностьМин * 60;
			КонецЕсли;
		КонецЕсли;
		
		Если ПериодичностьУП = 0 И ЗначениеЗаполнено(Сотрудник) И ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники")
			И ЗначениеЗаполнено(Сотрудник.ДлительностьПриема) 
		Тогда
			ПериодичностьУП = Сотрудник.ДлительностьПриема- Дата("00010101"); 
		КонецЕсли;
		
		Если ПериодичностьУП = 0 И ЗначениеЗаполнено(Услуга) Тогда
			ПериодичностьУП = Услуга.ПродолжительностьЧас * 60 * 60 + Услуга.ПродолжительностьМин * 60;
		КонецЕсли;
		
		Если ПериодичностьУП = 0 Тогда
			ПериодичностьУП = УправлениеНастройками.ПолучитьУчетнуюПолитику().ПериодичностьПланирования - Дата("00010101");
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("BookAnAppointmentWithClient",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		ПериодичностьУП = УправлениеНастройками.ПолучитьУчетнуюПолитику().ПериодичностьПланирования - Дата("00010101");
	КонецПопытки;
		
	ВремяОкончанияЗаписи = ВремяНачалаЗаписи + ПериодичностьУП;
	
	Попытка	
		Клиника = Сотрудник.Подразделение.Филиал;
	Исключение
		// Запись об ошибке получения филиала по наименованию
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при поиске клиники по переданному уникальному идентификатору. Клиника с указанным УИД не найдена" + Символы.ПС;
	КонецПопытки;
	
	СообщениеXML = ВебИнтеграция.СоздатьЗаявку(Сотрудник, "", "", "",, Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Comment, "", "", "", Клиника, ОписаниеОшибки, GUID, Клиент, Услуга);
	
	Возврат СообщениеXML;

КонецФункции

Функция FastBookAnAppointmentWithClient(Date, TimeBegin, Comment, Clinic, Client)
	ОписаниеОшибки = "";
	
	Попытка
		УИДКлиент = Новый УникальныйИдентификатор(Client);
	Исключение
		// Запись об ошибке в формате УИД
		Возврат "Error=GUIDClient";
	КонецПопытки;

	Клиент = Справочники.Клиенты.ПолучитьСсылку(УИДКлиент);
	Если Клиент.Пустая() Тогда
			Возврат "Error=Ref";
	КонецЕсли;

	Попытка
		Дата = Date;
	Исключение
		// Запись об ошибке считывания даты
		Возврат "Error=DateConvert";
	КонецПопытки;
	
	Попытка
		ВремяНачалаЗаписи = Дата('00010101') + (TimeBegin-НачалоДня(TimeBegin));
	Исключение
		// Запись об ошибке считывания даты
		Возврат "Error=DateConvert";
	КонецПопытки;	
	
	Попытка	
		Клиника = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(Clinic));
	Исключение
		// Запись об ошибке получения филиала по наименованию
		Возврат "Error=GUIDClinic";
	КонецПопытки;
	Попытка
		СообщениеXML = ВебИнтеграция.СоздатьЛистОжидания("", "", "", "", Дата, ВремяНачалаЗаписи, Comment, "", "", "", Клиника, ОписаниеОшибки, Клиент);
		Возврат "Ok";
	Исключение
		Возврат "Error="+ОписаниеОшибки();
	КонецПопытки;
	Возврат СообщениеXML;
	
КонецФункции

Функция BookAnAppointmentWithParams(EmployeeID, PatientSurname, PatientName, PatientFatherName, Date, TimeBegin, Comment, Phone, Email, Address, Clinic, GUID, Params)
	
	Параметры = СериализаторXDTO.ПрочитатьXDTO(Params);
	
	ДатаРождения = '00010101';
	
	УслугиСДлительностью = Неопределено;
	ПериодичностьУП = 0;
	
	Попытка
		Длительность = Неопределено;
		Параметры.Свойство("Duration", Длительность);
		
		Если ЗначениеЗаполнено(Длительность) Тогда 		
			ПериодичностьУП = XMLЗначение(Тип("Дата") ,Длительность) - Дата("00010101");
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка 
		Параметры.Свойство("Birthday", ДатаРождения);
		ДатаРождения = XMLЗначение(Тип("Дата"), ДатаРождения);
	Исключение
	КонецПопытки;
	
	Попытка 
		МетодРасчетаДлительности = Неопределено;
		Параметры.Свойство("DurationType", МетодРасчетаДлительности);
	Исключение
	КонецПопытки;
	
	Попытка 
		УидыУслугСтрокой = Неопределено;
		Параметры.Свойство("Services", УидыУслугСтрокой);
	Исключение
	КонецПопытки;
	
	ОшибкаПолученияУслуг = "";
	Услуги = Новый ТаблицаЗначений;
	Услуги.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Услуги.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число"));
	
	УстановкаДлительностиИзУслуг = Ложь;
	
	Если ЗначениеЗаполнено(УидыУслугСтрокой) Тогда
		
		УслугиМассивСтрок = СтрРазделить(УидыУслугСтрокой,";");
		Для Каждого УслугаУИД Из УслугиМассивСтрок Цикл
			
			УслугаВБазе = Неопределено;
		    Попытка
	    	    УслугаВБазе = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(УслугаУИД));
				Если УслугаВБазе.ПолучитьОбъект() = Неопределено Тогда
					УслугаВБазе = Неопределено
				КонецЕсли;	
			Исключение
			КонецПопытки;

			Если ЗначениеЗаполнено(УслугаВБазе) Тогда
				Услуги.Добавить().Номенклатура = УслугаВБазе;
			Иначе
				Если Не ЗначениеЗаполнено(ОшибкаПолученияУслуг) Тогда 
					ОшибкаПолученияУслуг = ОшибкаПолученияУслуг + УслугаУИД;
				Иначе
					ОшибкаПолученияУслуг = ОшибкаПолученияУслуг + ", " + УслугаУИД;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Параметр ServiceDuration - способ расчета длительности услуг заявки.
		Если  ЗначениеЗаполнено(МетодРасчетаДлительности)
			И МетодРасчетаДлительности = "ServiceDuration"
			И Услуги.Количество() <> 0
		Тогда
			УстановкаДлительностиИзУслуг = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаПолученияУслуг) Тогда
		Comment = Comment + "При импорте заявки из внешнего сайта или сервиса не найдены услуги с GUID:" + Символы.ПС + ОшибкаПолученияУслуг + Символы.ПС + "Обратитесь к администратору интеграции с сайтом (сервисом)";
	КонецЕсли;
	
	ОписаниеОшибки = "";	
	
	Попытка
		УИСпр = Новый УникальныйИдентификатор(EmployeeID);
	Исключение
		// Запись об ошибке в формате УИД
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора на основе EmployeeID." + Символы.ПС;
	КонецПопытки;

	Сотрудник = Справочники.Сотрудники.ПолучитьСсылку(УИСпр);
	Если ПустаяСтрока(Сотрудник.Код) Тогда
		Сотрудник = Справочники.Оборудование.ПолучитьСсылку(УИСпр);
		Если ПустаяСтрока(Сотрудник.Код) Тогда	
			// Запись об ошибке поиска по УИД
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска сотрудника по уникальному идентификатору. Сотрудник с указанным УИД не найден" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Дата = Date;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании Date в дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		ВремяНачалаЗаписи = Дата('00010101') + (TimeBegin-НачалоДня(TimeBegin));
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при преобразовании TimeBegin в Дату." + Символы.ПС;
	КонецПопытки;
	
	Попытка
		
		Если УстановкаДлительностиИзУслуг Тогда
			ДлительностьВсехУслуг = 0;
			УслугиСДлительностью = ВебИнтеграция.НормативнаяДлительностьУслуг(Услуги.ВыгрузитьКолонку("Номенклатура"), Сотрудник);
			Для Каждого СтрокаУслуги Из Услуги Цикл
				ДлительностьУслуги = УслугиСДлительностью.Получить(СтрокаУслуги.Номенклатура);
				Если ДлительностьУслуги <> Неопределено Тогда
					СтрокаУслуги.Продолжительность = ДлительностьУслуги;
					ДлительностьВсехУслуг = ДлительностьВсехУслуг + ДлительностьУслуги;
				КонецЕсли;
			КонецЦикла;
			Если ДлительностьВсехУслуг <> 0 Тогда 
				ПериодичностьУП = ДлительностьВсехУслуг;
			КонецЕсли;			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПериодичностьУП) Тогда 
			Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Сотрудник.ДлительностьПриема) Тогда
				ПериодичностьУП = Сотрудник.ДлительностьПриема - Дата("00010101");
			Иначе
				БазоваяПериодичность = УправлениеНастройками.ПараметрУчета("ПериодичностьПланирования");
				Если ЗначениеЗаполнено(БазоваяПериодичность) Тогда
					ПериодичностьУП = БазоваяПериодичность - Дата("00010101");
				Иначе
					ОписаниеОшибки = ОписаниеОшибки + "Ошибка при расчете времени окончания: в базе не настроена периодичность бронирования и у сотрудника не задана длительность приема." + Символы.ПС
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВремяОкончанияЗаписи = ВремяНачалаЗаписи + ПериодичностьУП;
	Исключение
		// Запись об ошибке считывания даты
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при расчете времени окончания." + Символы.ПС;
	КонецПопытки;
	
	Если Услуги.Количество() = 0 Тогда
		Услуги.Добавить().Продолжительность = ПериодичностьУП;
	ИначеЕсли Не УстановкаДлительностиИзУслуг Тогда
		Услуги[0].Продолжительность = ПериодичностьУП;	
	КонецЕсли;
	
	Попытка	
		Клиника = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(Clinic));
	Исключение
		// Запись об ошибке получения филиала по наименованию
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при поиске клиники по переданному уникальному идентификатору. Клника с указанным УИД не найдена." + Символы.ПС;
	КонецПопытки;
	
	СообщениеXML = ВебИнтеграция.СоздатьЗаявку(Сотрудник, PatientSurname, PatientName, PatientFatherName, ДатаРождения, Дата, ВремяНачалаЗаписи, ВремяОкончанияЗаписи, Comment, Phone, Email, Address, Клиника, ОписаниеОшибки,GUID,,Услуги);

	Возврат СообщениеXML;
	
КонецФункции

Функция GetNomenclatureAndPrices(Clinic, Params)
		
	ОписаниеОшибки = "";
	Попытка	
		Клиника = Справочники.Филиалы.ПолучитьСсылку(Новый УникальныйИдентификатор(Clinic));
	Исключение
		// Запись об ошибке получения филиала по наименованию
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при поиске клиники по переданному уникальному идентификатору. Клиника с указанным УИД не найдена" + Символы.ПС;
	КонецПопытки;

	СообщениеXML = ВебИнтеграция.ПолучитьСписокНоменклатурыИЦен(Клиника, ОписаниеОшибки);
	
	Возврат СообщениеXML;
	
КонецФункции

Функция CancelBookAnAppointment(GUID, AdditionalInformation, Reason) Экспорт
	
	ОписаниеОшибки = "";
	
	Попытка
		ГУИДЗаявка = Новый УникальныйИдентификатор(GUID);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора заявки на основе GUID." + Символы.ПС;
	КонецПопытки;
	
	Заявка=Документы.Заявка.ПолучитьСсылку(ГУИДЗаявка);
	Если Заявка.Пустая() Тогда	
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска заявки по уникальному идентификатору. Заявка с указанным УИД не найдена" + Символы.ПС;
	КонецЕсли;
	
	СообщениеXML = ВебИнтеграция.ОтменитьЗаявку(Заявка, AdditionalInformation, Reason, ОписаниеОшибки); 
	Возврат СообщениеXML;

КонецФункции

Функция GetAppointmentStatus(GUID)
	
	ОписаниеОшибки = "";
	
	Попытка
		ГУИДЗаявка = Новый УникальныйИдентификатор(GUID);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при получении уникального идентификатора заявки на основе GUID." + Символы.ПС;
	КонецПопытки;
	
	Заявка = Документы.Заявка.ПолучитьСсылку(ГУИДЗаявка);
	Если Заявка.Пустая() Тогда	
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выполнении поиска заявки по уникальному идентификатору. Заявка с указанным УИД не найдена" + Символы.ПС;
	КонецЕсли;
	
	СообщениеXML = ВебИнтеграция.ПолучитьСтатусЗаявкиДляСайта(Заявка, ОписаниеОшибки); 
	Возврат СообщениеXML;
	
КонецФункции

