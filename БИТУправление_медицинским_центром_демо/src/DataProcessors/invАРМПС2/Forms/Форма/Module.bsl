&НаСервере
//Перем ОбщаяПапкаВыгрузки;
Перем ИмяКаталогаСущности;

&НаСервере
Процедура ПолучитьПродуктыНаСервере(Подразделение)
	ФайлыXMLОтветаИЗапроса = ПолучитьФайлыXMLОтветаИЗапроса("armps");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПодразделения.Токен,
	|	НастройкиПодразделения.Сервер
	|ИЗ
	|	РегистрСведений.invНастройкиПодразделения КАК НастройкиПодразделения
	|ГДЕ
	|	НастройкиПодразделения.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Host  = ВыборкаДетальныеЗаписи.Сервер;
		Токен = ВыборкаДетальныеЗаписи.Токен;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для подразделения не заданы настройки лаборатории Invitro.'"));
		Возврат;
	КонецЕсли;
	
	
	hdrs = Новый Соответствие();
	hdrs.Вставить("Host", Host); 
	hdrs.Вставить("Content-Type", "text/xml; charset=utf-8");
	hdrs.Вставить("Connection", "Keep-Alive");
	hdrs.Вставить("Accept-Encoding", "gzip,deflate");
	
	conn = Новый HTTPСоединение(Host,42013);
	HTTPЗапрос = Новый HTTPЗапрос("/Innerscape/xml/GetProducts/" + Токен ,hdrs);
	HTTPОтвет = conn.Получить(HTTPЗапрос,ФайлыXMLОтветаИЗапроса.Ответ);
	// Ответ = HTTPОтвет.ПолучитьТелоКакСтроку("utf-8");
	// ////////////////////Ответ сервера записывется в ФайлыXMLОтветаИЗапроса.Ответ	
	ЧитаемXML = Новый ЧтениеXML ;
	ЧитаемXML.ОткрытьФайл(ФайлыXMLОтветаИЗапроса.Ответ);
	
	ФайлDOM = Новый ПостроительDOM;
	ФайлДляИзменения = ФайлDOM.Прочитать(ЧитаемXML);
	ArrayOfInternalProduct = ФайлДляИзменения.ПолучитьЭлементыПоИмени("InternalProduct");
	ДобавитьПродукты(ArrayOfInternalProduct);
КонецПроцедуры

&НаСервере
Процедура ДобавитьПродукты(МассивПродуктовDOM)
	Для Каждого ПродуктDOM Из МассивПродуктовDOM Цикл
		ДанныеПродукта = ПродуктDOM.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеПродукта[0].ТекстовоеСодержимое);
		НоваяСсылка = Справочники.invПродукт.ПолучитьСсылку(УИ);
		Если НЕ ЗначениеЗаполнено(НоваяСсылка.Код) Тогда
			НовыйПродукт = Справочники.invПродукт.СоздатьЭлемент();
			НовыйПродукт.УстановитьСсылкуНового(НоваяСсылка);
			Для Каждого Узел Из ДанныеПродукта Цикл
				//ГруппаПродукта = "";
				Если Узел.ИмяУзла = "ShortName" Тогда
					НовыйПродукт.Наименование               =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "Name" Тогда
					НовыйПродукт.ПолноеНаименование              =  Узел.ТекстовоеСодержимое;
				//ИначеЕсли Узел.ИмяУзла = "ProfileTubesAmount" Тогда
				//	НовыйПродукт.КоличествоКонтейнеров              =  Узел.ТекстовоеСодержимое;
				//ИначеЕсли Узел.ИмяУзла = "IsCito" И Узел.ТекстовоеСодержимое = "true" Тогда
				//	НовыйПродукт.ВозможностьCITO                   =  Истина;
				ИначеЕсли Узел.ИмяУзла = "Code" Тогда
					НовыйПродукт.КодПродукта     =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "Gender"  И Узел.ТекстовоеСодержимое = "1" Тогда
					НовыйПродукт.Пол = ?(Узел.ТекстовоеСодержимое = "1",Перечисления.ПолФизическихЛиц.Женский,Перечисления.ПолФизическихЛиц.Мужской);
				ИначеЕсли Узел.ИмяУзла = "IsOnlyForProfile" И  Узел.ТекстовоеСодержимое = "true" Тогда
					НовыйПродукт.ТолькоВСоставеПрофиля               =  Истина;
				ИначеЕсли Узел.ИмяУзла = "Type" Тогда
					НовыйПродукт.ТипПродукта  =  ?(Узел.ТекстовоеСодержимое = "1",Перечисления.invТипПродукта.Тест,Перечисления.invТипПродукта.Профиль);
				ИначеЕсли Узел.ИмяУзла = "Unit" Тогда
					НовыйПродукт.ЕдиницаИзмерения                =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "GroupName" Тогда
					ГруппаПродукта =  НайтиИлиСоздатьГруппуПродуктов(Узел.ТекстовоеСодержимое);
				ИначеЕсли Узел.ИмяУзла = "SubgroupName" Тогда
					НовыйПродукт.Родитель  =  НайтиИлиСоздатьПодгруппуПродукта(Узел.ТекстовоеСодержимое,НовыйПродукт.КодПродукта,ГруппаПродукта);
				ИначеЕсли Узел.ИмяУзла = "Preanalytic" Тогда
					НовыйПродукт.Преаналитика  =  Узел.ТекстовоеСодержимое;	
				ИначеЕсли Узел.ИмяУзла = "BiomaterialOptionSets" И Узел.ДочерниеУзлы.Количество() > 0 Тогда
					НовыйПродукт.Записать();
					МассивВыбораБМ = СоздатьВыборБМ(Узел,НовыйПродукт);
					Для Каждого ЭлементМассива Из МассивВыбораБМ Цикл
						стрВыборБМ = НовыйПродукт.ВыборБМ.Добавить();
						стрВыборБМ.ВариантВыбораБМ = ЭлементМассива;
					КонецЦикла;
					НовыйПродукт.Записать();
				КонецЕсли;
				//НовыйПродукт.Записать();	
			КонецЦикла;
			НовыйПродукт.Записать();
		Иначе
			//		//Если НоваяСсылка.Наименование <> ДанныеКонтейнера[1].ТекстовоеСодержимое Тогда
			//		//	ДанныеКонтейнера = НоваяСсылка.ПолучитьОбъект();
			//		//	ДанныеКонтейнера.Наименование = ДанныеКонтейнера[1].ТекстовоеСодержимое;
			//		//	ДанныеКонтейнера.Записать();
			//		//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПродукты(Команда)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПолучитьПродуктыНаСервере(Подразделение);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите подразделение!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиИлиСоздатьПодгруппуПродукта(НазваниеПодгруппы,КодПродукта,ГруппаПродуктовСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукт.Ссылка
	|ИЗ
	|	Справочник.invПродукт КАК Продукт
	|ГДЕ
	|	Продукт.ЭтоГруппа = ИСТИНА
	|	И Продукт.Наименование = &Наименование
	|	И Продукт.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", НазваниеПодгруппы);
	Запрос.УстановитьПараметр("Родитель", ГруппаПродуктовСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПодгруппаПродукта = Справочники.invПродукт.СоздатьГруппу();
		ПодгруппаПродукта.Родитель = ГруппаПродуктовСсылка;
		ПодгруппаПродукта.Наименование = НазваниеПодгруппы;
		ПодгруппаПродукта.Записать();
		Возврат ПодгруппаПродукта.Ссылка;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецФункции // НайтиПодгруппуПродукта()

&НаСервере
Функция НайтиИлиСоздатьГруппуПродуктов(НазваниеГруппы)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукт.Ссылка
	|ИЗ
	|	Справочник.invПродукт КАК Продукт
	|ГДЕ
	|	Продукт.ЭтоГруппа = ИСТИНА
	|	И Продукт.Наименование = &Наименование
	|	И Продукт.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", НазваниеГруппы);
	Запрос.УстановитьПараметр("Родитель", Справочники.invПродукт.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Группа = Справочники.invПродукт.СоздатьГруппу();
		Группа.Наименование = НазваниеГруппы;
		Группа.Записать();
		Возврат Группа.Ссылка;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецФункции // НайтиИлиСоздатьГруппуПродуктов()

&НаСервере
Функция ПолучитьФайлыXMLОтветаИЗапроса(ТипВыгружаемыхДанных)
	Если Не СуществуетПапка(ТипВыгружаемыхДанных) Тогда
		ИмяКаталогаСущности = "C:\arm_1c\ESB";
	КонецЕсли;
	Структура = Новый Структура;
	Структура.Вставить("Запрос",ИмяКаталогаСущности +"\req_"+формат(текущаядата(),"ДФ=ddMMyy")+"_"+Строка(Час(ТекущаяДата()))+Строка(Минута(ТекущаяДата()))+Строка(Секунда(ТекущаяДата()))+".xml");
	Структура.Вставить("Ответ",ИмяКаталогаСущности + "\res_"+формат(текущаядата(),"ДФ=ddMMyy")+"_"+Строка(Час(ТекущаяДата()))+Строка(Минута(ТекущаяДата()))+Строка(Секунда(ТекущаяДата()))+".xml");
	
	Возврат Структура
КонецФункции // ПолучитьФайлыXMLОтветаИЗапроса()

&НаСервере
Функция СуществуетПапка(ИмяПапки)
	КаталогНаДиске = Новый Файл(?(Прав(ОбщаяПапкаВыгрузки,1)="\",Сред(ОбщаяПапкаВыгрузки,1,СтрДлина(ОбщаяПапкаВыгрузки)-1),ОбщаяПапкаВыгрузки) + "\" + ИмяПапки);
	Если КаталогНаДиске.Существует() Тогда
		ИмяКаталогаСущности = КаталогНаДиске.ПолноеИмя;
		Возврат Истина;
	Иначе
		Попытка
			СоздатьКаталог(КаталогНаДиске.ПолноеИмя);
			ИмяКаталогаСущности = КаталогНаДиске.ПолноеИмя;
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПолучитьДопИнформациюНаСервере(Подразделение)
	ФайлыXMLОтветаИЗапроса = ПолучитьФайлыXMLОтветаИЗапроса("armps");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПодразделения.Токен,
	|	НастройкиПодразделения.Сервер
	|ИЗ
	|	РегистрСведений.invНастройкиПодразделения КАК НастройкиПодразделения
	|ГДЕ
	|	НастройкиПодразделения.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Host  = ВыборкаДетальныеЗаписи.Сервер;
		Токен = ВыборкаДетальныеЗаписи.Токен;
	КонецЦикла;
	
	
	hdrs = Новый Соответствие();
	hdrs.Вставить("Host", Host); 
	hdrs.Вставить("Content-Type", "text/xml; charset=utf-8");
	hdrs.Вставить("Connection", "Keep-Alive");
	hdrs.Вставить("Accept-Encoding", "gzip,deflate");
	
	conn = Новый HTTPСоединение(Host,42013);
	HTTPЗапрос = Новый HTTPЗапрос("/Innerscape/xml/GetInfo/" + Токен ,hdrs);
	HTTPОтвет = conn.Получить(HTTPЗапрос,ФайлыXMLОтветаИЗапроса.Ответ);
	// Ответ = HTTPОтвет.ПолучитьТелоКакСтроку("utf-8");
	// ////////////////////Ответ сервера записывется в ФайлыXMLОтветаИЗапроса.Ответ	
	ЧитаемXML = Новый ЧтениеXML ;
	ЧитаемXML.ОткрытьФайл(ФайлыXMLОтветаИЗапроса.Ответ);
	
	ФайлDOM = Новый ПостроительDOM;
	ФайлДляИзменения = ФайлDOM.Прочитать(ЧитаемXML);
	Biomaterials = ФайлДляИзменения.ПолучитьЭлементыПоИмени("Biomaterials");
	Биоматериалы = Biomaterials[0].ДочерниеУзлы;
	ДобавитьБиоматериалы(Биоматериалы);
	TestTubes = ФайлДляИзменения.ПолучитьЭлементыПоИмени("TestTubes");
	Контейнеры = TestTubes[0].ДочерниеУзлы;
	ДобавитьКонтейнеры(Контейнеры);
	AuxiliaryInfos = ФайлДляИзменения.ПолучитьЭлементыПоИмени("AuxiliaryInfos");
	ДопМедИнформация = AuxiliaryInfos[0].ДочерниеУзлы;
	ДобавитьДопМедИнформацию(ДопМедИнформация);
КонецПроцедуры

&НаСервере
Процедура ДобавитьБиоматериалы(Биоматериалы)
	Для Каждого Биоматериал Из Биоматериалы Цикл
		ДанныеБиоматериала = Биоматериал.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеБиоматериала[0].ТекстовоеСодержимое);
		НоваяСсылка = Справочники.invБиоматериал.ПолучитьСсылку(УИ);
		Если НЕ ЗначениеЗаполнено(НоваяСсылка.Код) Тогда
			НовыйБиоматериал = Справочники.invБиоматериал.СоздатьЭлемент();
			НовыйБиоматериал.УстановитьСсылкуНового(НоваяСсылка);
			НовыйБиоматериал.Наименование =  ДанныеБиоматериала[1].ТекстовоеСодержимое;
			НовыйБиоматериал.Записать();
		Иначе
			Если НоваяСсылка.Наименование <> ДанныеБиоматериала[1].ТекстовоеСодержимое Тогда
				БиоматериалОбъект = НоваяСсылка.ПолучитьОбъект();
				БиоматериалОбъект.Наименование = ДанныеБиоматериала[1].ТекстовоеСодержимое;
				БиоматериалОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтейнеры(Контейнеры)
	Для Каждого Контейнер Из Контейнеры Цикл
		ДанныеКонтейнера = Контейнер.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеКонтейнера[0].ТекстовоеСодержимое);
		НоваяСсылка = Справочники.invКонтейнеры.ПолучитьСсылку(УИ);
		Если НЕ ЗначениеЗаполнено(НоваяСсылка.Код) Тогда
			НовыйКонтейнер = Справочники.invКонтейнеры.СоздатьЭлемент();
			НовыйКонтейнер.УстановитьСсылкуНового(НоваяСсылка);
			Для Каждого Узел Из ДанныеКонтейнера Цикл
				Если Узел.ИмяУзла = "Name" Тогда
					НовыйКонтейнер.Наименование               =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "Code" Тогда
					НовыйКонтейнер.КодКонтейнера              =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "Type" Тогда
					НовыйКонтейнер.ТипКонтейнера              =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "ContainerDescription" Тогда
					НовыйКонтейнер.Описание                   =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "PrimaryType" Тогда
					НовыйКонтейнер.ОписаниеТипаКонтейнера     =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "TransportType" Тогда
					НовыйКонтейнер.ОписаниеКонтейнераДоставки =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "Preanalytic" Тогда
					НовыйКонтейнер.Преаналитика               =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "BiomaterialName" Тогда
					НовыйКонтейнер.Биоматериал                =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "TransportTemperature" Тогда
					НовыйКонтейнер.Температура                =  Узел.ТекстовоеСодержимое;
				КонецЕсли;
			КонецЦикла;
			НовыйКонтейнер.Записать();
		Иначе
			//Если НоваяСсылка.Наименование <> ДанныеКонтейнера[1].ТекстовоеСодержимое Тогда
			//	ДанныеКонтейнера = НоваяСсылка.ПолучитьОбъект();
			//	ДанныеКонтейнера.Наименование = ДанныеКонтейнера[1].ТекстовоеСодержимое;
			//	ДанныеКонтейнера.Записать();
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДопМедИнформацию(ДопМедИнформация)
	Для Каждого ДопМедИнф Из ДопМедИнформация Цикл
		ДанныеДопМедИнф = ДопМедИнф.ДочерниеУзлы;
		УИ = Новый УникальныйИдентификатор(ДанныеДопМедИнф[0].ТекстовоеСодержимое);
		НоваяСсылка = ПланыВидовХарактеристик.invЛабораторныеПараметры.ПолучитьСсылку(УИ);
		Если НЕ ЗначениеЗаполнено(НоваяСсылка.Код) Тогда
			НоваяДМИ = ПланыВидовХарактеристик.invЛабораторныеПараметры.СоздатьЭлемент();
			НоваяДМИ.УстановитьСсылкуНового(НоваяСсылка);
			Для Каждого Узел Из ДанныеДопМедИнф Цикл
				Если Узел.ИмяУзла = "Name" Тогда
					НоваяДМИ.Наименование               =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "IsRequired" И Узел.ТекстовоеСодержимое = "true" Тогда
					НоваяДМИ.Обязательное              = Истина;
				ИначеЕсли Узел.ИмяУзла = "Min" И ЗначениеЗаполнено(Узел.ТекстовоеСодержимое) Тогда
					КЧ = Новый КвалификаторыЧисла(10,0);
					Массив = Новый Массив;
					Массив.Добавить(Тип("Число"));
					ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
					НоваяДМИ.ТипЗначения              =  ОписаниеТиповЧ;
				ИначеЕсли Узел.ИмяУзла = "Unit" Тогда
					НоваяДМИ.ЕдиницаИзмерения =  Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "Variants" Тогда
					Варианты = Узел.ДочерниеУзлы;
					Для каждого Вариант Из Варианты Цикл
						стр = НоваяДМИ.Варианты.Добавить();
						стр.Значение = Вариант.ТекстовоеСодержимое;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			НоваяДМИ.Записать();
		Иначе
			//		Если НоваяСсылка.Наименование <> ДанныеКонтейнера[1].ТекстовоеСодержимое Тогда
	//			ДанныеКонтейнера = НоваяСсылка.ПолучитьОбъект();
	//			ДанныеКонтейнера.Наименование = ДанныеКонтейнера[1].ТекстовоеСодержимое;
	//			ДанныеКонтейнера.Записать();
	//		КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СоздатьВыборБМ(Узел,ПродуктОбъект)
	//ГУИДПродукта = Строка(ПродуктСсылка.УникальныйИдентификатор());
	Массив = Новый Массив;
	ВыборыБМ = Узел.ПолучитьЭлементыПоИмени("BiomaterialOptionSet");
	Для Каждого ВыборБМ Из ВыборыБМ Цикл
		ДанныеВыборБМ = ВыборБМ.ДочерниеУзлы;
		Для Каждого Узел Из ДанныеВыборБМ Цикл
			Если Узел.ИмяУзла = "Id" Тогда
				//Если Справочники.ВыборБМ.НайтиПоНаименованию(Узел.ТекстовоеСодержимое) = Справочники.ВыборБМ.ПустаяСсылка() Тогда 
					НовыйВыборБМ               = Справочники.invВыборБМ.СоздатьЭлемент();
					НовыйВыборБМ.Наименование  = ПродуктОбъект.КодПродукта + "_" + Лев(Узел.ТекстовоеСодержимое,10);
					НовыйВыборБМ.Владелец      = ПродуктОбъект.Ссылка;
					НовыйВыборБМ.ВнутреннийКод = Узел.ТекстовоеСодержимое;
				//Иначе
					//НовыйВыборБМ = Справочники.ВыборБМ.НайтиПоНаименованию(Узел.ТекстовоеСодержимое).ПолучитьОбъект();
					//Массив.Добавить(НовыйВыборБМ);
					//Продолжить;
				//КонецЕсли;
			ИначеЕсли Узел.ИмяУзла = "ProductIds"  Тогда
				ПродуктыТекущегоВыбора = Узел.ДочерниеУзлы;
				Для Каждого ПродуктТекущегоВыбора Из ПродуктыТекущегоВыбора Цикл
					Если ПродуктТекущегоВыбора.ИмяУзла = "ProductId" И ЗначениеЗаполнено(ПродуктТекущегоВыбора.ТекстовоеСодержимое) Тогда
						УИ = Новый УникальныйИдентификатор(ПродуктТекущегоВыбора.ТекстовоеСодержимое);
						НайденныйПродуктСсылка = Справочники.invПродукт.ПолучитьСсылку(УИ);
						Если ЗначениеЗаполнено(НайденныйПродуктСсылка.Код) Тогда	
							стр = НовыйВыборБМ.Продукты.Добавить();
							стр.Продукт = НайденныйПродуктСсылка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Узел.ИмяУзла = "BiomaterialOptions" Тогда
				БиоматериалСсылка = Справочники.invБиоматериал.ПустаяСсылка();
				ВариантыТекущегоВыбора = Узел.ДочерниеУзлы;
				Для Каждого ВариантТекущегоВыбора Из ВариантыТекущегоВыбора Цикл
					ВариантыТ = ВариантТекущегоВыбора.ДочерниеУзлы;
					Для каждого ВариантТ Из ВариантыТ Цикл
						Если ВариантТ.ИмяУзла = "BiomaterialId" И ЗначениеЗаполнено(ВариантТ.ТекстовоеСодержимое) Тогда
							УИ = Новый УникальныйИдентификатор(ВариантТ.ТекстовоеСодержимое);
							БиоматериалСсылка = Справочники.invБиоматериал.ПолучитьСсылку(УИ);
							Если ЗначениеЗаполнено(БиоматериалСсылка.Код) Тогда	
								//стр = ПродуктОбъект.ВариантыВыбораБМ.Добавить();
								//стр.Биоматериал = БиоматериалСсылка;
							КонецЕсли;
						ИначеЕсли ВариантТ.ИмяУзла = "BiomaterialId" И НЕ ЗначениеЗаполнено(ВариантТ.ТекстовоеСодержимое) Тогда
							 //Сообщить("");
						ИначеЕсли ВариантТ.ИмяУзла = "AuxiliaryInfoIds" Тогда
							списокДИ = ВариантТ.ДочерниеУзлы;
							Если списокДИ.количество() = 0 Тогда
								стр = НовыйВыборБМ.Биоматериалы.Добавить();
								стр.Биоматериал = БиоматериалСсылка;
								Продолжить;
							КонецЕсли;
							Для Каждого ДИ Из списокДИ Цикл
								Если ДИ.ИмяУзла = "AuxiliaryInfoId" И ЗначениеЗаполнено(ДИ.ТекстовоеСодержимое) Тогда
									УИ = Новый УникальныйИдентификатор(ДИ.ТекстовоеСодержимое);
									ДИСсылка = ПланыВидовХарактеристик.invЛабораторныеПараметры.ПолучитьСсылку(УИ);
									Если ЗначениеЗаполнено(ДИСсылка.Код) Тогда
										стр = НовыйВыборБМ.Биоматериалы.Добавить();
										стр.ДопМедИнформация = ДИСсылка;
										стр.Биоматериал = БиоматериалСсылка;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		//Иначе
		//		//		Если НоваяСсылка.Наименование <> ДанныеКонтейнера[1].ТекстовоеСодержимое Тогда
		////			ДанныеКонтейнера = НоваяСсылка.ПолучитьОбъект();
		////			ДанныеКонтейнера.Наименование = ДанныеКонтейнера[1].ТекстовоеСодержимое;
		////			ДанныеКонтейнера.Записать();
		////		КонецЕсли;
		//КонецЕсли;
		НовыйВыборБМ.Записать();
		Массив.Добавить(НовыйВыборБМ.Ссылка);
	КонецЦикла;
	//Если НовыйВыборБМ = Неопределено Тогда
	//	
	//КонецЕсли;
	Возврат Массив
КонецФункции

&НаКлиенте
Процедура ПолучитьДопИнформацию(Команда)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПолучитьДопИнформациюНаСервере(Подразделение);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите подразделение!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьЗаявкуНаСервере()
	//СоответствиеДМИ = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
	Если ЗначениеЗаполнено(АХ) Тогда
		СоответствиеДМИ = ПолучитьИзВременногоХранилища(АХ);
	Иначе
		СоответствиеДМИ = новый Соответствие;
	КонецЕсли;
	ФайлыXMLОтветаИЗапроса = ПолучитьФайлыXMLОтветаИЗапроса("armps_request");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПодразделения.Токен,
	|	НастройкиПодразделения.Сервер
	|ИЗ
	|	РегистрСведений.invНастройкиПодразделения КАК НастройкиПодразделения
	|ГДЕ
	|	НастройкиПодразделения.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Host  = ВыборкаДетальныеЗаписи.Сервер;
		Токен = ВыборкаДетальныеЗаписи.Токен;
	КонецЦикла;
	
	
	hdrs = Новый Соответствие();
	hdrs.Вставить("Host", Host); 
	hdrs.Вставить("Content-Type", "text/xml; charset=utf-8");
	hdrs.Вставить("Connection", "Keep-Alive");
	hdrs.Вставить("Accept-Encoding", "gzip,deflate");
	
	conn = Новый HTTPСоединение(Host,42013);
	СформироватьФайлЗаявки(ФайлыXMLОтветаИЗапроса.Запрос,Токен);
	ОбработанныйФайлЗапроса = УдалитьЛишниеСимволы(ФайлыXMLОтветаИЗапроса.Запрос);
	
	HTTPЗапрос = Новый HTTPЗапрос("/Innerscape/xml/RegisterOrder" ,hdrs);
	HTTPЗапрос.УстановитьТелоИзСтроки(ОбработанныйФайлЗапроса,"utf-8");
	HTTPОтвет = conn.ОтправитьДляОбработки(HTTPЗапрос,ФайлыXMLОтветаИЗапроса.Ответ);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		// Не используется.
		Если Ложь Тогда
			ПолучитьXMLОтветВебСервиса(ОбработанныйФайлЗапроса, ФайлыXMLОтветаИЗапроса.Ответ,conn,hdrs);
		КонецЕсли;
		
		СтруктураОтвета = ОбработатьОтветСервиса(ФайлыXMLОтветаИЗапроса.Ответ);
		
		УИ = Новый УникальныйИдентификатор(СтруктураОтвета.OrderId);
		НоваяСсылка = Документы.invЗаявкаНаИсследование.ПолучитьСсылку(УИ);
		Если НЕ ЗначениеЗаполнено(НоваяСсылка.Номер) Тогда
			ДокументЗаявка = Документы.invЗаявкаНаИсследование.СоздатьДокумент();
			ДокументЗаявка.УстановитьСсылкуНового(НоваяСсылка);
		Иначе
			ДокументЗаявка = НоваяСсылка.ПолучитьОбъект();
		КонецЕсли;
		ДокументЗаявка.Пациент = Пациент;
		Продукты  = ДокументЗаявка.Продукты;
		СписокИНЗ = ДокументЗаявка.СписокИНЗ;
		Для Каждого стрПродукты Из СписокПродуктов Цикл
			пр = Продукты.Добавить();
			пр.Продукт = стрПродукты.Продукт;
			пр.КодПродукта = пр.Продукт.КодПродукта;
			пр.НаименованиеПродукта = пр.Продукт.ПолноеНаименование;
		КонецЦикла;
		Если СтруктураОтвета.OrderTubes.Свойство("OrderTube") И СтруктураОтвета.OrderTubes.Количество() > 0 Тогда
			Контейнеры = СтруктураОтвета.OrderTubes.OrderTube;
			Если ТипЗнч(Контейнеры) = Тип("Структура") Тогда
				НайденныйКонтейнер = Справочники.invКонтейнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнеры.ContainerId));
				НайденныйБиоматериал = Справочники.invБиоматериал.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнеры.BiomaterialId));
				строкаКонтейнеры = ДокументЗаявка.Контейнеры.Добавить();
				строкаКонтейнеры.Контейнер = НайденныйКонтейнер;
				строкаКонтейнеры.Биоматериал = НайденныйБиоматериал;
				строкаКонтейнеры.ИЛН = Контейнеры.LaboratoryNumber;
				Если Контейнеры.Свойство("StickerCodeBase64") Тогда
					строкаКонтейнеры.ШтрихКод = Новый ХранилищеЗначения(Base64Значение(Контейнеры.StickerCodeBase64));
				КонецЕсли;
				ИНЗ = Лев(Контейнеры.LaboratoryNumber,9);
				СтрокаИНЗ = СписокИНЗ.Добавить();
				СтрокаИНЗ.ИНЗ = ИНЗ;
			ИначеЕсли ТипЗнч(Контейнеры) = ТИп("Массив") Тогда
				Для каждого Контейнер Из Контейнеры Цикл
					НайденныйКонтейнер = Справочники.invКонтейнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнер.ContainerId));
					НайденныйБиоматериал = Справочники.invБиоматериал.ПолучитьСсылку(Новый УникальныйИдентификатор(Контейнер.BiomaterialId));
					строкаКонтейнеры = ДокументЗаявка.Контейнеры.Добавить();
					строкаКонтейнеры.Контейнер = НайденныйКонтейнер;
					строкаКонтейнеры.Биоматериал = НайденныйБиоматериал;
					строкаКонтейнеры.ИЛН = Контейнер.LaboratoryNumber;
					Если Контейнер.Свойство("StickerCodeBase64") Тогда
						строкаКонтейнеры.ШтрихКод = Новый ХранилищеЗначения(Base64Значение(Контейнер.StickerCodeBase64));
					КонецЕсли;
					ИНЗ = Лев(Контейнер.LaboratoryNumber,9);
					СтрокаИНЗ = СписокИНЗ.Добавить();
				    СтрокаИНЗ.ИНЗ = ИНЗ;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
		ФорматБланка = СтруктураОтвета.CoverLetters.CoverLetter.Format;
		БланкДвоичныеДанные = Base64Значение(СтруктураОтвета.CoverLetters.CoverLetter.ContentBase64);
		БланкДвоичныеДанные.Записать(ОбщаяПапкаВыгрузки + "\1.pdf");
		ДокументЗаявка.Бланк = Новый ХранилищеЗначения(БланкДвоичныеДанные);
		//ДокументЗаявка.ИНЗ = ИНЗ;
		ДокументЗаявка.Дата = ТекущаяДата();
		ДокументЗаявка.Подразделение = Подразделение;
		ДокументЗаявка.Записать();
		//ОткрытьФорму("Документ.invЗаявкаНаИсследование.Форма.ФормаДокумента",Новый Структура("Ключ",ДокументЗаявка.Ссылка));
		Возврат ДокументЗаявка.Ссылка;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка!");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Код состояния - " + Строка(HTTPОтвет.КодСостояния));
		
		СтруктураОтвета = ОбработатьОтветСервиса(ФайлыXMLОтветаИЗапроса.Ответ);
		
		СообщениеПользователю = "";
		ЕстьОписание = СтруктураОтвета.Свойство("UserFriendlyMessage", СообщениеПользователю);
		Если ЕстьОписание Тогда
			Сообщить("Заявка не оформлена! " + СообщениеПользователю, СтатусСообщения.ОченьВажное);
		КонецЕсли; 
		
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПолучитьXMLОтветВебСервиса(ИмяФайлаЗапроса,ИмяФайлаОтвета,Соединение,Заголовки)
		
	Соединение.ОтправитьДляОбработки( 
	ИмяФайлаЗапроса, 		
	"/Innerscape/xml/RegisterOrder",
	ИмяФайлаОтвета, 	
	Заголовки);     
	
КонецПроцедуры

&НаСервере
Функция ОбработатьОтветСервиса(ФайлОтвета)
	ЧитаемXML = Новый ЧтениеXML;
	ЧитаемXML.ОткрытьФайл(ФайлОтвета);
	Фабрика = ФабрикаXDTO;
	ВозвращаемыеЗначенияТип = Фабрика.Тип("http://Invitro.ESB.Schemes.OperationsResponse","Successful");
	ВозвращаемыеЗначения = Фабрика.ПрочитатьXML(ЧитаемXML,ВозвращаемыеЗначенияТип);
	СтруктураОтветаШины = ПреобразоватьОбъектXDTOвСтруктуру(ВозвращаемыеЗначения);
	Возврат СтруктураОтветаШины
КонецФункции

&НаСервере
Функция ПреобразоватьОбъектXDTOвСтруктуру(ОбъектXDTO)
	Перем ВозвращаемоеЗнач;
	Если ОбъектXDTO = Неопределено Тогда
		ВозвращаемоеЗнач = Неопределено;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ЗначениеXDTO") Тогда
		ВозвращаемоеЗнач = ОбъектXDTO.Значение;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ВозвращаемоеЗнач = Новый Структура;
		Для каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
			ВозвращаемоеЗнач.Вставить(СвойствоXDTO.Имя); 
			Попытка // свойство - списокXDTO
				СписокXDTO = ОбъектXDTO.ПолучитьСписок(СвойствоXDTO);
				КоличествоСписка = СписокXDTO.Количество();
				
				МассивЗначений = Новый Массив;
				Для Сч = 0 По КоличествоСписка - 1 Цикл
					МассивЗначений.Добавить(ПреобразоватьОбъектXDTOвСтруктуру(СписокXDTO.ПолучитьXDTO(Сч)));
				КонецЦикла;
				
				ВозвращаемоеЗнач[СвойствоXDTO.Имя] = МассивЗначений;
			Исключение // свойство - объектXDTO/значениеXDTO
				ВозвращаемоеЗнач[СвойствоXDTO.Имя] = ПреобразоватьОбъектXDTOвСтруктуру(ОбъектXDTO.ПолучитьXDTO(СвойствоXDTO));
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗнач;
КонецФункции

&НаСервере
Процедура СформироватьФайлЗаявки(ПутьКФайлу,Токен)
	МассивФИО = РазложитьСтрокуВМассивПодстрок(Пациент.Наименование," ");
	Фамилия = МассивФИО[0];
	Попытка
		Имя = МассивФИО[1];
	Исключение
		Имя = "";
	КонецПопытки;
	Попытка
		Отчество = МассивФИО[2];
	Исключение
		Отчество = "";
	КонецПопытки;

	Если ЗначениеЗаполнено(АХ) Тогда
		СоответствиеДМИ = ПолучитьИзВременногоХранилища(АХ);
	Иначе
		СоответствиеДМИ = новый Соответствие;
	КонецЕсли;

	ДЗ_Products = РеквизитФормыВЗначение("ДеревоПродуктовДляФормированияЗаявки",тип("ДеревоЗначений"));
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Token");
	ЗаписьXML.ЗаписатьТекст(Токен);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("BiomaterialDate");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ТекущаяДата()-СмещениеСтандартногоВремени())+"Z");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Patient");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ExternalId");
	ЗаписьXML.ЗаписатьТекст(Строка(Пациент.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("FirstName");
	ЗаписьXML.ЗаписатьТекст(Имя);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("LastName");
	ЗаписьXML.ЗаписатьТекст(Фамилия);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("MiddleName");
	ЗаписьXML.ЗаписатьТекст(Отчество);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("BirthDate");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Пациент.ДатаРождения));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Sex");
	ЗаписьXML.ЗаписатьТекст(?(Пациент.Пол = Перечисления.ПолФизическихЛиц.Женский,"F","M"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Products");
	Для Каждого ПродуктСП Из СписокПродуктов Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Product");
		ЗаписьXML.ЗаписатьНачалоЭлемента("ProductId");
		ЗаписьXML.ЗаписатьТекст(Строка(ПродуктСП.Продукт.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьНачалоЭлемента("BiomaterialOptions");
		СтрокиДереваЗначений = ДЗ_Products.Строки;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ProductId",Строка(ПродуктСП.Продукт.УникальныйИдентификатор()));
		НайденныеСтроки = СтрокиДереваЗначений.НайтиСтроки(ПараметрыОтбора,Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПодчиненныеСтроки = НайденныеСтроки[0].Строки;
			Для Каждого НайденнаяСтрока ИЗ ПодчиненныеСтроки Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Option");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Id");
				ЗаписьXML.ЗаписатьТекст(НайденнаяСтрока.ID);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("BiomaterialId");
				ЗаписьXML.ЗаписатьТекст(НайденнаяСтрока.BiomaterialId);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	///Вставка Deliveries
	Если СпособыУведомленияОРезультате.Количество() > 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Deliveries");
		Для Каждого ТипДоставки Из СпособыУведомленияОРезультате Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Delivery");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Type");
			ЗаписьXML.ЗаписатьТекст(ТипДоставки.Представление);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
			ЗаписьXML.ЗаписатьТекст(ТипДоставки.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	Если СоответствиеДМИ <> Неопределено И СоответствиеДМИ.Количество() = 0 Тогда
		ДобавитьАтрибутыEntity(ЗаписьXML,"AuxiliaryInfoValues");
	ИначеЕсли СоответствиеДМИ <> Неопределено И СоответствиеДМИ.Количество() > 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("AuxiliaryInfoValues");
		Для Каждого элтСоответствияДМИ Из СоответствиеДМИ Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("AuxiliaryInfoValue");
			ЗаписьXML.ЗаписатьНачалоЭлемента("AuxiliaryInfoId");
			ЗаписьXML.ЗаписатьТекст(элтСоответствияДМИ.Ключ);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
			ЗаписьXML.ЗаписатьТекст(элтСоответствияДМИ.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	ИначеЕсли СоответствиеДМИ = Неопределено Тогда
		ДобавитьАтрибутыEntity(ЗаписьXML,"AuxiliaryInfoValues");	
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция УдалитьЛишниеСимволы(ФайлXML)
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ФайлXML);
	КолСтрок = Тд.КоличествоСтрок();
	к=1;
	стр = ТД.ПолучитьСтроку(к);
	Пока к < КолСтрок Цикл
		стр = ТД.ПолучитьСтроку(к);
		стр = СтрЗаменить(стр,Символы.НПП,"");
		стр = СтрЗаменить(стр,"	","");
		ТД.ЗаменитьСтроку(к, стр);
		к = к +1;
	КонецЦикла;
	ТД.Записать(ФайлXML);
	//Возврат ФайлXML
	Возврат ТД.ПолучитьТекст();
КонецФункции

&НаСервере
Процедура ДобавитьАтрибутыEntity(ЗаписьXML,Реквизит)
	ЗаписьXML.ЗаписатьНачалоЭлемента(Реквизит);
	Атр = "xsi:nil";
	ЗаписьXML.ЗаписатьАтрибут(Атр,"true");
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявку(Команда)
	Если Не ЗначениеЗаполнено(Пациент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите пациента!");
	ИначеЕсли НЕ ЗначениеЗаполнено(Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите подразделение!");	
	ИначеЕсли ДМИ.Количество() > 0 Тогда
		ЗаполнитьСпособыУведомленияОРезультате();
		ЗаполнитьДМИДанными();
	Иначе
		ЗаполнитьСпособыУведомленияОРезультате();
		Ссылка = СоздатьЗаявкуНаСервере();
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.invЗаявкаНаИсследование") Тогда
			ОткрытьФорму("Документ.invЗаявкаНаИсследование.Форма.ФормаДокумента",Новый Структура("Ключ",Ссылка));
			ОчиститьФорму();
			ОчиститьСообщения();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(Ссылка));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму()
	Подразделение = "";
	Пациент       = "";
	Продукт       = "";
	IDТекущийПродукт = "";
	АХ = "";
	ЭлементыДерева = ДеревоПродуктовДляФормированияЗаявки.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	ДМИ.Очистить();
	СписокБиоматериалов.Очистить();
	СписокПродуктов.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДМИДанными()
	//Оповещение = Новый ОписаниеОповещения("ПослеЗаполненияДМИ",ЭтаФорма);
	ВыборДМИ = ОткрытьФормуМодально("Обработка.invАРМПС2.Форма.ВыборДопМедИнформации",Новый Структура("IDДМИ",ДМИ),ЭтаФорма);

	Если ВыборДМИ <> Неопределено И ЗначениеЗаполнено(ВыборДМИ) Тогда
		
		АХ = ВыборДМИ;
		СоответствиеДМИ = ПолучитьИзВременногоХранилища(ВыборДМИ);
		Ссылка = СоздатьЗаявкуНаСервере();
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.invЗаявкаНаИсследование") Тогда
			ОткрытьФорму("Документ.invЗаявкаНаИсследование.Форма.ФормаДокумента",Новый Структура("Ключ",Ссылка));
			ОчиститьФорму();
			ОчиститьСообщения();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(Ссылка));
		КонецЕсли;
		
	ИначеЕсли ЕстьОбязательныеДМИ(Новый Структура("тзДМИ",ДМИ)) Тогда
		
		ПоказатьОповещениеПользователя("Не заполнены значения Доп. мед. информации!",,"Не заполнены ОБЯЗАТЕЛЬНЫЕ для заполнения поля Доп. мед. информации!");
		ЗаполнитьДМИДанными();
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены значения Доп. мед. информации!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьОбязательныеДМИ(Параметр)
	
	ЕстьОбязательное = Ложь;
	
	тзДМИ  = Новый ТаблицаЗначений;
	
	ЕстьДанные = Параметр.Свойство("тзДМИ", тзДМИ);
	
	Если НЕ ЕстьДанные Тогда
		Возврат ЕстьОбязательное;
	КонецЕсли;
	
	Для Каждого стр Из тзДМИ Цикл
		УИ = Новый УникальныйИдентификатор(стр.AuxiliaryInfoId);
		Ссылка = ПланыВидовХарактеристик.invЛабораторныеПараметры.ПолучитьСсылку(УИ);
		Если ЗначениеЗаполнено(Ссылка.Код) Тогда
			Если Ссылка.Обязательное Тогда
				ЕстьОбязательное = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОбязательное;

КонецФункции // ЕстьОбязательныеДМИ()


&НаКлиенте
Процедура ЗаполнитьСпособыУведомленияОРезультате()
	Парам = Новый Структура("Клиент",Пациент);
	СпособыУведомленияОРезультате = ОткрытьФормуМодально("Обработка.invАРМПС2.Форма.ВыборСпособаУведомления", Парам, ЭтаФорма);
	Если СпособыУведомленияОРезультате.Количество() = 0 Тогда
		//ПоказатьОповещениеПользователя("Не указан способ уведомления!",,"ОБЯЗАТЕЛЬНО должен быть указан хотя бы один способ уведомления о результате!");
		//ЗаполнитьСпособыУведомленияОРезультате();
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПроверитьПродуктСервер(Ссылка)
	Возврат ?(Ссылка.ТолькоВСоставеПрофиля,Истина,Ложь)
КонецФункции

&НаКлиенте
Процедура ПродуктПриИзменении(Элемент)
	СписокБиоматериалов.Очистить();
	
	ТолькоВСоставеПрофиля = ПроверитьПродуктСервер(Продукт);
	Если ТолькоВСоставеПрофиля Тогда
		ПоказатьОповещениеПользователя("Выбранный продукт - " + Строка(Продукт) + " - можно заказать только в составе профиля!",,"Данный продукт НЕ будет добавлен в текущую заявку!");
	Иначе
		стрВыборБМ = ВариантВыбораБиоматериала(Продукт);
		IDТекущийПродукт = ПолучитьProductId(Продукт);
		Если стрВыборБМ.Количество() > 0 Тогда
			Для Каждого ЭлементВыбораБМ Из стрВыборБМ Цикл
				Если ЭлементВыбораБМ.Значение.БМ.Количество() > 1 Тогда
					ВыборБиоматериалаИзСписка(ЭлементВыбораБМ.Значение.БМ,ЭлементВыбораБМ.Значение.Id,ЭлементВыбораБМ.Значение.NamePr);				
				ИначеЕсли ЭлементВыбораБМ.Значение.БМ.Количество() = 1 Тогда
					ЗаполнитьДеревоПродуктовСервер(ЭлементВыбораБМ.Значение.БМ[0],ЭлементВыбораБМ.Значение.Id);
				КонецЕсли;
				Если ЭлементВыбораБМ.Значение.ДМИ.Количество() > 0 Тогда
					ЗаполнитьДМИСервер(ЭлементВыбораБМ.Значение.ДМИ);
				КонецЕсли;
			КонецЦикла;
			стрСписокПродуктов = СписокПродуктов.Добавить();
			стрСписокПродуктов.Продукт = Продукт;
			Продукт = "";
		Иначе
			стрСписокПродуктов = СписокПродуктов.Добавить();
			стрСписокПродуктов.Продукт = Продукт;
			Продукт = "";
			ЗаполнитьДеревоПродуктовСервер("","");
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка! В продукте " + Строка(Продукт) + "  нет выбора БМ!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборБиоматериалаИзСписка(мсвБМ,IdВыборБМ,СписокПродуктовДляВывода)
	СписокБиоматериалов.Очистить();
	Для Каждого БМ Из мсвБМ Цикл
		СписокБиоматериалов.Добавить(БМ);
	КонецЦикла;
	Парам = Новый Структура("СписокБиоматериалов", СписокБиоматериалов.ВыгрузитьЗначения());
	Парам2 = Новый Структура("мсвБМ, IdВыборБМ, СписокПродуктовДляВывода", мсвБМ, IdВыборБМ, СписокПродуктовДляВывода);   
	Форма = ОткрытьФорму("Обработка.invАРМПС2.Форма.ФормаВыбораБиоматериала", Парам, ЭтаФорма,,,,Новый ОписаниеОповещения("ВыполнитьПриВыбореБиоматериалаИзСписка",ЭтаФорма,Парам2), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Форма.Активизировать();	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПриВыбореБиоматериалаИзСписка(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран биоматериал!");
		//ПоказатьОповещениеПользователя("Не выбран биоматериал!",,"Биоматериал должен быть ОБЯЗАТЕЛЬНО указан!");
		//ВыборБиоматериалаИзСписка(ДополнительныеПараметры.мсвБМ,ДополнительныеПараметры.IdВыборБМ,ДополнительныеПараметры.СписокПродуктовДляВывода);
	Иначе
		ВыбЗначение = Результат;
		ЗаполнитьДеревоПродуктовСервер(ВыбЗначение,ДополнительныеПараметры.IdВыборБМ);
	КонецЕсли;	
КонецПроцедуры

//&НаКлиенте
//Процедура ПослеЗаполненияДМИ(АдресХранилища,Параметры) Экспорт
//	Если АдресХранилища <> Неопределено И ЗначениеЗаполнено(АдресХранилища) Тогда
//		//Параметры.АдресХранилища = АдресХранилища;
//		АХ = АдресХранилища;
//		СоответствиеДМИ = ПолучитьИзВременногоХранилища(АдресХранилища);
//		СоздатьЗаявкуНаСервере();
//	Иначе
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла критическая ошибка!");
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура ПослеВыбораПродуктовИзКаталога(АдресХранилища,Параметры) Экспорт
//	Если АдресХранилища <> Неопределено И ЗначениеЗаполнено(АдресХранилища) Тогда
//		АХ = АдресХранилища;
//		ВыбранныеПродукты = ПолучитьИзВременногоХранилища(АдресХранилища);
//		Для Каждого ВыбранныйПродукт Из ВыбранныеПродукты Цикл
//			Продукт = ВыбранныйПродукт.Значение; 
//			ПродуктПриИзменении("");
//		КонецЦикла;
//	Иначе
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла критическая ошибка!");
//	КонецЕсли;
//КонецПроцедуры



//&НаКлиенте
//Процедура ПослеВыбораБМ(ВыбЭлемент, Параметры) Экспорт
//	Если ВыбЭлемент = Неопределено Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран биоматериал!");
//	Иначе
//		ВыбЗначение = ВыбЭлемент.Значение;
//		ЗаполнитьДеревоПродуктовСервер(ВыбЗначение,Параметры);
//	КонецЕсли;
//КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДМИСервер(мсвДМИ)
	ДМИ_ТЗ = РеквизитФормыВЗначение("ДМИ",Тип("ТаблицаЗначений"));
	Для Каждого элтмсвДМИ Из мсвДМИ Цикл
		стрДМИ_ТЗ = ДМИ_ТЗ.Добавить();
		стрДМИ_ТЗ.AuxiliaryInfoId = Строка(элтмсвДМИ.УникальныйИдентификатор());
		стрДМИ_ТЗ.ProductId = IDТекущийПродукт;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДМИ_ТЗ,"ДМИ");
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДеревоПродуктовСервер(СсылкаБМ,IDВыбораБМ)
	ДЗ = РеквизитФормыВЗначение("ДеревоПродуктовДляФормированияЗаявки",Тип("ДеревоЗначений"));
	СтрокиДерева = ДЗ.Строки;
	//СтрокиДерева.Очистить();
	НайденнаяСтрокаПродукта = СтрокиДерева.Найти(IDТекущийПродукт,"ProductId");
	Если НайденнаяСтрокаПродукта <> Неопределено Тогда
		//СтрокиДерева.Удалить(НайденнаяСтрокаПродукта);
		НоваяСтрока = НайденнаяСтрокаПродукта;
	Иначе
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.ProductId  = IDТекущийПродукт;
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаБМ) И ЗначениеЗаполнено(IDВыбораБМ) Тогда
		ПодчиненныеСтроки = НоваяСтрока.Строки;
		НоваяПодчиненнаяСтрока = ПодчиненныеСтроки.Добавить();
		НоваяПодчиненнаяСтрока.BiomaterialId = Строка(СсылкаБМ.УникальныйИдентификатор());
		НоваяПодчиненнаяСтрока.Id = IDВыбораБМ;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДЗ,"ДеревоПродуктовДляФормированияЗаявки");
КонецПроцедуры

&НаСервере
Функция ПолучитьProductId(СсылкаПродукт)
	Возврат Строка(СсылкаПродукт.УникальныйИдентификатор());
КонецФункции

&НаСервере
Функция ВариантВыбораБиоматериала(Продукт)
	мсв            = Новый Массив;
	стрВыборБМ     = Новый Структура;
	мсвБМ          = Новый Массив;
	мсвДМИ         = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыборБМБиоматериалы.Ссылка КАК Ссылка,
		|	ВыборБМБиоматериалы.Биоматериал,
		|	ВыборБМБиоматериалы.ДопМедИнформация КАК ДМИ
		|ИЗ
		|	Справочник.invВыборБМ.Биоматериалы КАК ВыборБМБиоматериалы
		|ГДЕ
		|	ВыборБМБиоматериалы.Ссылка.Владелец = &Владелец
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Владелец", Продукт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		ЗапросП = Новый Запрос;
		ЗапросП.Текст = 
		"ВЫБРАТЬ
		|	ВыборБМПродукты.Продукт.ПолноеНаименование КАК ПродуктПН
		|ИЗ
		|	Справочник.invВыборБМ.Продукты КАК ВыборБМПродукты
		|ГДЕ
		|	ВыборБМПродукты.Ссылка = &Ссылка";
		
		ЗапросП.УстановитьПараметр("Ссылка", ВыборкаСсылка.Ссылка);
		
		мсвПродукты = ЗапросП.Выполнить().Выгрузить().ВыгрузитьКолонку("ПродуктПН");
        НаименованиеПродуктов = "";
		Для каждого элтПр Из мсвПродукты Цикл
			НаименованиеПродуктов = НаименованиеПродуктов + элтПр + " ; ";
		КонецЦикла;
	
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	    мсвБМ.Очистить();
		мсвДМИ.Очистить();
		//стрВыборБМ.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//соотвБМ.Вставить(ВыборкаДетальныеЗаписи.Биоматериал,ВыборкаДетальныеЗаписи.ДМИ);
			мсвБМ.Добавить(ВыборкаДетальныеЗаписи.Биоматериал);
			Если ВыборкаДетальныеЗаписи.ДМИ <> ПланыВидовХарактеристик.invЛабораторныеПараметры.ПустаяСсылка() Тогда
				мсвДМИ.Добавить(ВыборкаДетальныеЗаписи.ДМИ);
			КонецЕсли;
		КонецЦикла;
		стрБМДМИ = Новый Структура;
		мсвБМ_    = СвернутьМассив(мсвБМ);
		мсвДМИ_   = СвернутьМассив(мсвДМИ);                               
		стрБМДМИ.Вставить("БМ",мсвБМ_);
		стрБМДМИ.Вставить("ДМИ",мсвДМИ_);
		стрБМДМИ.Вставить("Id",ВыборкаСсылка.Ссылка.ВнутреннийКод);
		стрБМДМИ.Вставить("NamePr",НаименованиеПродуктов);
		стрВыборБМ.Вставить("BiomaterialOptions" + СтрЗаменить(Строка(ВыборкаСсылка.Ссылка.УникальныйИдентификатор()),"-",""),стрБМДМИ);
		//стрВыборБМ.Вставить("Id" + Строка(ВыборкаСсылка.Ссылка.Наименование),ВыборкаСсылка.Ссылка.ВнутреннийКод);
		//мсв.Добавить(соотвВыборБМ);
	КонецЦикла;
	Возврат стрВыборБМ	
КонецФункции

&НаСервере
Функция СвернутьМассив(мсв)
	НовыйМассив = Новый Массив; 
	Соответствие = Новый Соответствие;
	Для каждого ЭлементМассива Из мсв Цикл
		Соответствие.Вставить(ЭлементМассива);
	КонецЦикла;
	Для каждого КлючИЗначение Из Соответствие Цикл
		НовыйМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	Возврат НовыйМассив
КонецФункции

//&НаСервере
//Функция ВариантВыбораБиоматериала(Продукт)
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ВыборБМБиоматериалы.Биоматериал
//	|ИЗ
//	|	Справочник.ВыборБМ.Биоматериалы КАК ВыборБМБиоматериалы
//	|ГДЕ
//	|	ВыборБМБиоматериалы.Ссылка.Владелец = &Владелец";
//	
//	Запрос.УстановитьПараметр("Владелец", Продукт);
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	РезультатЗапроса.Свернуть("Биоматериал");
//	массивБМ = РезультатЗапроса.ВыгрузитьКолонку("Биоматериал");
//	
//	Возврат массивБМ	
//КонецФункции


&НаСервереБезКонтекста
Процедура ОчиститьСправочникиНаСервере()
	ОчиститьБиоматериал();
	ОчиститьКонтейнеры();
	ОчиститьПродукты();
	ОчиститьВыборБМ();
	ОчиститьЛабораторныеПараметры();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьБиоматериал()
Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	Биоматериал.Ссылка
|ИЗ
|	Справочник.invБиоматериал КАК Биоматериал";

РезультатЗапроса = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Объект.Удалить();
КонецЦикла;
ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Удалены элементы справочника Биоматериал");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьКонтейнеры()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контейнеры.Ссылка
	|ИЗ
	|	Справочник.invКонтейнеры КАК Контейнеры";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Удалены элементы справочника Контейнейры");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПродукты()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукты.Ссылка
	|ИЗ
	|	Справочник.invПродукт КАК Продукты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			Объект.Удалить();
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Удалены дочерние элементы справочника Продукты");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьВыборБМ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыборБМ.Ссылка
	|ИЗ
	|	Справочник.invВыборБМ КАК ВыборБМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Удалены элементы справочника ВыборБМ");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьЛабораторныеПараметры()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	invЛабораторныеПараметры.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.invЛабораторныеПараметры КАК invЛабораторныеПараметры";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Удалены элементы ПВХ Лабораторные Параметры");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСправочники(Команда)
	ОчиститьСправочникиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзКаталога(Команда)
	//Оповещение = Новый ОписаниеОповещения("ПослеВыбораПродуктовИзКаталога",ЭтаФорма);
    ВыбранныеПродуктыИзКаталога = ОткрытьФормуМодально("Обработка.invАРМПС2.Форма.ФормаКаталогПродуктов",,ЭтаФорма);
	Если ВыбранныеПродуктыИзКаталога <> Неопределено И ЗначениеЗаполнено(ВыбранныеПродуктыИзКаталога) Тогда
		АХ = ВыбранныеПродуктыИзКаталога;
		ВыбранныеПродукты = ПолучитьИзВременногоХранилища(ВыбранныеПродуктыИзКаталога);
		Для Каждого ВыбранныйПродукт Из ВыбранныеПродукты Цикл
			Продукт = ВыбранныйПродукт.Значение; 
			ПродуктПриИзменении("");
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла критическая ошибка!");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПродуктовПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		СписокПродуктовПередУдалениемНаСервере(Элемент.ТекущиеДанные.Продукт);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СписокПродуктовПередУдалениемНаСервере(УдаляемыйПродукт)
	ДЗ = РеквизитФормыВЗначение("ДеревоПродуктовДляФормированияЗаявки",Тип("ДеревоЗначений"));
	IDУдаляемыйПродукт = Строка(УдаляемыйПродукт.УникальныйИдентификатор());
	СтрокиДерева = ДЗ.Строки;
	НайденнаяСтрокаПродукта = СтрокиДерева.Найти(IDУдаляемыйПродукт,"ProductId");
	Если НайденнаяСтрокаПродукта <> Неопределено Тогда
		СтрокиДерева.Удалить(НайденнаяСтрокаПродукта);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДЗ,"ДеревоПродуктовДляФормированияЗаявки");
	ДМИ_ТЗ = РеквизитФормыВЗначение("ДМИ",Тип("ТаблицаЗначений"));
	НулевыеСтроки = ДМИ_ТЗ.НайтиСтроки(Новый Структура("ProductId",IDУдаляемыйПродукт));
	Для каждого СтрокаТаблицы Из НулевыеСтроки Цикл
		ДМИ_ТЗ.Удалить(СтрокаТаблицы)
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДМИ_ТЗ,"ДМИ");
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщуюПапкуВыгрузкиСервер(Подразделение)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПодразделения.ОбщаяПапкаВыгрузки
	|ИЗ
	|	РегистрСведений.invНастройкиПодразделения КАК НастройкиПодразделения
	|ГДЕ
	|	НастройкиПодразделения.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбщаяПапкаВыгрузки  = ВыборкаДетальныеЗаписи.ОбщаяПапкаВыгрузки;
	КонецЦикла;
	Возврат ОбщаяПапкаВыгрузки
КонецФункции

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ОбщаяПапкаВыгрузки = ПолучитьОбщуюПапкуВыгрузкиСервер(Подразделение);
	СохранитьПодразделениеВХранилище();
КонецПроцедуры

&НаСервере
Процедура СохранитьПодразделениеВХранилище()
	Попытка 
		ХранилищеПользовательскихНастроекОтчетов.Сохранить("ФормаinvАРМПС2", "Подразделение", Подразделение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьБиоматериал(Команда)
	Если Элементы.СписокПродуктов.ТекущиеДанные <> Неопределено Тогда
		
		Продукт = Элементы.СписокПродуктов.ТекущиеДанные.Продукт;
		
		СписокПродуктовПередУдалениемНаСервере(Продукт);
		
		СписокБиоматериалов.Очистить();
		
		стрВыборБМ = ВариантВыбораБиоматериала(Продукт);
		IDТекущийПродукт = ПолучитьProductId(Продукт);
		Если стрВыборБМ.Количество() > 0 Тогда
			Для Каждого ЭлементВыбораБМ Из стрВыборБМ Цикл
				Если ЭлементВыбораБМ.Значение.БМ.Количество() > 1 Тогда
					ВыборБиоматериалаИзСписка(ЭлементВыбораБМ.Значение.БМ,ЭлементВыбораБМ.Значение.Id,ЭлементВыбораБМ.Значение.NamePr);				
				ИначеЕсли ЭлементВыбораБМ.Значение.БМ.Количество() = 1 Тогда
					ЗаполнитьДеревоПродуктовСервер(ЭлементВыбораБМ.Значение.БМ[0],ЭлементВыбораБМ.Значение.Id);
				КонецЕсли;
				Если ЭлементВыбораБМ.Значение.ДМИ.Количество() > 0 Тогда
					ЗаполнитьДМИСервер(ЭлементВыбораБМ.Значение.ДМИ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаполнитьДеревоПродуктовСервер("","");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Попытка
		Подразделение = ХранилищеПользовательскихНастроекОтчетов.Загрузить("ФормаinvАРМПС2", "Подразделение");
	Исключение 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

