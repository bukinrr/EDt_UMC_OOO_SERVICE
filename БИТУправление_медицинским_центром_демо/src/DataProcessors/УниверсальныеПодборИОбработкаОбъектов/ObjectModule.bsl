#Область РазделОписанияПеременных

Перем мМенеджеры Экспорт;// Менеджеры объектов.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить вид сравнения
//
Функция ПолучитьВидСравнения(ИмяПоля, ВидСравненияОтбора, ИмяПараметра) Экспорт
	Если Лев(ИмяПоля, 7) = "Объект." Тогда
		ИмяПоля = "Ссылка." + Сред(ИмяПоля, 8);
	КонецЕсли;
	
    Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно  Тогда
		Возврат "_Таблица." + ИмяПоля + " = &" + ИмяПараметра;

	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат "_Таблица." + ИмяПоля + " > &" + ИмяПараметра;
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно  Тогда
		Возврат "_Таблица." + ИмяПоля + " >= &" + ИмяПараметра;
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии 
		ИЛИ  ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат "_Таблица." + ИмяПоля + " В ИЕРАРХИИ (&" + ИмяПараметра + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке  Тогда
		Возврат "_Таблица." + ИмяПоля + " В (&" + ИмяПараметра + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Меньше  Тогда
		Возврат "_Таблица." + ИмяПоля + " < &" + ИмяПараметра;
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно  Тогда         
		Возврат "_Таблица." + ИмяПоля + " <= &" + ИмяПараметра;
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке  Тогда
		Возврат "НЕ _Таблица." + ИмяПоля + " В (&" + ИмяПараметра + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии 
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат "НЕ _Таблица." + ИмяПоля + " В ИЕРАРХИИ (&" + ИмяПараметра + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно  Тогда
		Возврат "_Таблица." + ИмяПоля + " <> &" + ИмяПараметра;
	
	КонецЕсли; 

КонецФункции // ()

// Разложить строку в массив подстрок
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

// Получить строку из массива подстрок.
//
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	Результат = "";
	Для Каждого Элемент ИЗ Массив Цикл
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		Результат = Результат + РазделительПодстрок + Подстрока;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Загрузить обработки
//
Процедура ЗагрузитьОбработки(ТекФорма, ДоступныеОбработки2, ВыбранныеОбработки2) Экспорт

	ДоступныеОбработки = ТекФорма.РеквизитФормыВЗначение("ДоступныеОбработки");
	ВыбранныеОбработки = ТекФорма.РеквизитФормыВЗначение("ВыбранныеОбработки");
	
	Формы = ЭтотОбъект.Метаданные().Формы;

	Для каждого Форма из Формы Цикл
		Если Форма.Имя = "ПодборИОбработка" 
			ИЛИ Форма.Имя = "ФормаНастроек" 
			ИЛИ Форма.Имя = "ШаблонОбработки" 
			ИЛИ Форма.Имя = "ФормаОтбора" Тогда
			
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = ДоступныеОбработки.Строки.Найти(Форма.Имя, "ИмяФормы");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Если НЕ НайденнаяСтрока.Обработка = Форма.Синоним Тогда
				НайденнаяСтрока.Обработка = Форма.Синоним;
			КонецЕсли;
				Если НЕ ЭтотОбъект.ПолучитьФорму(Форма.Имя).мИспользоватьНастройки Тогда
					НайденнаяСтрока.Строки.Очистить();
				КонецЕсли;
			Продолжить;
		КонецЕсли;
			
		НоваяОбработка = ДоступныеОбработки.Строки.Добавить();
		НоваяОбработка.Обработка = Форма.Синоним;
		НоваяОбработка.ИмяФормы  = Форма.Имя;
		
		Настройка = Новый Структура;
		Настройка.Вставить("Обработка", Форма.Синоним);
		Настройка.Вставить("Прочее", Неопределено);
		НоваяОбработка.Настройка.Добавить(Настройка);
	КонецЦикла;

	МассивДляУдаления = Новый Массив;
	
	Для каждого ДоступнаяОбработка из ДоступныеОбработки.Строки Цикл
		Если Формы.Найти(ДоступнаяОбработка.ИмяФормы) = Неопределено Тогда
			МассивДляУдаления.Добавить(ДоступнаяОбработка);
		КонецЕсли;
	КонецЦикла;

	Для Индекс = 0 по МассивДляУдаления.Количество() - 1 Цикл
		ДоступныеОбработки.Строки.Удалить(МассивДляУдаления[Индекс]);
	КонецЦикла;

	МассивДляУдаления.Очистить();
	
	Для каждого ВыбраннаяОбработка из ВыбранныеОбработки Цикл
		Если ВыбраннаяОбработка.СтрокаДоступнойОбработки = Неопределено Тогда
			МассивДляУдаления.Добавить(ВыбраннаяОбработка);
		Иначе
			Если ВыбраннаяОбработка.СтрокаДоступнойОбработки.Родитель = Неопределено Тогда
				Если ДоступныеОбработки.Строки.Найти(ВыбраннаяОбработка.СтрокаДоступнойОбработки.ИмяФормы, "ИмяФормы") = Неопределено Тогда
					МассивДляУдаления.Добавить(ВыбраннаяОбработка);
				КонецЕсли;
			Иначе
				Если ДоступныеОбработки.Строки.Найти(ВыбраннаяОбработка.СтрокаДоступнойОбработки.Родитель.ИмяФормы, "ИмяФормы") = Неопределено Тогда
					МассивДляУдаления.Добавить(ВыбраннаяОбработка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Индекс = 0 по МассивДляУдаления.Количество() - 1 Цикл
		ВыбранныеОбработки.Удалить(МассивДляУдаления[Индекс]);
	КонецЦикла;
	
	ТекФорма.ЗначениеВРеквизитФормы(ДоступныеОбработки, "ДоступныеОбработки");
	ТекФорма.ЗначениеВРеквизитФормы(ВыбранныеОбработки, "ВыбранныеОбработки");

КонецПроцедуры

// Инициализирует переменную мМенеджеры, содержащую соответствия типов объектов их свойствам.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Соответствие, содержащее соответствия типов объектов их свойствам.
// 
Функция ИнициализацияМенеджеров() Экспорт

	Менеджеры = Новый Соответствие;

	ИмяТипа = "Справочник";
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		Имя              = ОбъектМД.Имя;
		Менеджер         = Справочники[Имя];
		ТипСсылкиСтрокой = "СправочникСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ТипСсылки, ОбъектМД", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ТипСсылки, ОбъектМД);
		Менеджеры.Вставить(ОбъектМД, Структура);
	КонецЦикла;

	ИмяТипа = "Документ";
	Для каждого ОбъектМД Из Метаданные.Документы Цикл
		Имя              = ОбъектМД.Имя;
		Менеджер         = Документы[Имя];
		ТипСсылкиСтрокой = "ДокументСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ТипСсылки, ОбъектМД", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ТипСсылки, ОбъектМД);
		Менеджеры.Вставить(ОбъектМД, Структура);
	КонецЦикла;

	Возврат Менеджеры;

КонецФункции // вИнициализацияМенеджеров()

мМенеджеры = ИнициализацияМенеджеров();

#КонецОбласти