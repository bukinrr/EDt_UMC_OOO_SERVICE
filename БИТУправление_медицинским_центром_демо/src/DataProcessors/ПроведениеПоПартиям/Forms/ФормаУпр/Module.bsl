
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Объект.ДатаКонцаОбработки = ТекущаяДата();
	Объект.Останавливаться = Истина;
	
	Объект.МаксимальноеКоличествоДокументовВВыборке = 1000;
	Объект.МаксимальноеКоличествоСтрокВТранзакции = 100;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДатаКонцаОбработки = ТекущаяДата();
	
	ОбновитьТекстОПоследовательностях();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапускВыполнения(Команда)
	
	ВыполнитьВосстановление (Объект.ДатаКонцаОбработки,
	 						 Объект.Останавливаться,
							 Объект.МаксимальноеКоличествоДокументовВВыборке,
							 Объект.МаксимальноеКоличествоСтрокВТранзакции);
								
	ОбновитьТекстОПоследовательностях();

КонецПроцедуры

&НаКлиенте
Процедура ЗапускНастройки(Команда)
	Парам = Новый Структура ("КоличествоСтрок, КоличествоДокументов",
							 Объект.МаксимальноеКоличествоСтрокВТранзакции,
							 Объект.МаксимальноеКоличествоДокументовВВыборке);
	Результат = ПолучитьФорму("Обработка.ПроведениеПоПартиям.Форма.ФормаНастройкиУпр", Парам).ОткрытьМодально();
	
	Если Результат <> Неопределено Тогда 
		Объект.МаксимальноеКоличествоДокументовВВыборке = Результат.КоличествоДокументов;
		Объект.МаксимальноеКоличествоСтрокВТранзакции = Результат.КоличествоСтрок;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокГрницЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокГрницЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	ДокументСсылка = ПолучитьСсылкуИзМоментаВремени(Элементы.СписокГраниц.ТекущиеДанные.Значение);
	ОткрытьЗначение(ДокументСсылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьТекстОПоследовательностях()
	
	СписокГраниц.Очистить();
	Граница = ПолучитьГраницуПоследовательности();
	СписокГраниц.Добавить(Граница);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуИзМоментаВремени(МоментВремени)
	Возврат МоментВремени.Ссылка;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ ОБРАБОТКИ

// Получает границу последователности.
//
// Параметры:
//
// Возвращаемое значение:
//  Момент времени.
&НаСервере
Функция ПолучитьГраницуПоследовательности() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартионныйУчетГраницы.МоментВремени
	|ИЗ
	|	Последовательность.ПартионныйУчет.Границы КАК ПартионныйУчетГраницы
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат  Выборка.МоментВремени;
	Иначе
		Возврат Новый МоментВремени('00010101');
	КонецЕсли;
	
КонецФункции // ПолучитьГраницуПоследовательности().
// Определяет существует ли ссылка на документ.
//
// Параметры:
//  Документ - документ
//
// Возвращаемое значение:
//  Булево.
&НаСервере

Функция СуществуетСсылкаНаДокумент(Документ) 
	Если ЗначениеЗаполнено(Документ) Тогда
		ТипДокумента = Строка(Документ.Метаданные().Имя);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДокументов.Ссылка
		               |ИЗ
		               |	Документ." + ТипДокумента + " КАК ТаблицаДокументов
		               |ГДЕ
		               |	ТаблицаДокументов.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Документ);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

// Процедура выполняет поиск и исправление ошибок в последовательности.
//
&НаСервере
Процедура КорректировкаРегистрацииВПоследовательности()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Последовательность.Регистратор КАК Регистратор,
	               |	Последовательность.Регистратор.Проведен КАК Проведен,
	               |	Последовательность.Регистратор.Дата КАК Дата,
	               |	Последовательность.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА СписанныеТоварыСрезПоследних.Регистратор ЕСТЬ NULL 
	               |				И РегистрНакопленияПартииТоваровНаСкладах.Регистратор ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьДвижения
	               |ИЗ
	               |	Последовательность.ПартионныйУчет КАК Последовательность
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыСрезПоследних
	               |		ПО Последовательность.Регистратор = СписанныеТоварыСрезПоследних.Регистратор
	               |			И (СписанныеТоварыСрезПоследних.НомерСтроки = 1)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Обороты(, , Регистратор, ) КАК РегистрНакопленияПартииТоваровНаСкладах
	               |		ПО Последовательность.Регистратор = РегистрНакопленияПартииТоваровНаСкладах.Регистратор
	               |ГДЕ
	               |	(НЕ(Последовательность.Регистратор.Проведен
	               |				И Последовательность.Регистратор.Дата = Последовательность.Период
	               |				И ВЫБОР
	               |					КОГДА СписанныеТоварыСрезПоследних.Регистратор ЕСТЬ NULL 
	               |							И РегистрНакопленияПартииТоваровНаСкладах.Регистратор ЕСТЬ NULL 
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			НаборЗаписей = Последовательности.ПартионныйУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
		ИначеЕсли (Выборка.Дата <> Выборка.Период) Тогда
			НаборЗаписей = Последовательности.ПартионныйУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				СтрокаНабора.Период = Выборка.Дата;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если Не Выборка.ЕстьДвижения Тогда
			НаборЗаписей = Последовательности.ПартионныйУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОчередейДокументов(МоментВермениНачала)
	СтруктураОчередей = Новый Структура();
	СтруктураОчередей.Вставить("ОтражатьВУправленческомУчете", Новый Структура("ТаблицаСсылок, Граница",Новый ТаблицаЗначений(),МоментВермениНачала));
	Возврат СтруктураОчередей;
КонецФункции
// Получает список документов попоследовательности.
//
// Параметры:
//  МоментВремениНачало - начальный момент времени.
//  ДатаОкончания - окончание.
//  МаксимальноеКоличествоДокументовВВыборке - максимальное количество документов в выборке.
//
// Возвращаемое значение:
//  Выгрузка из запроса.
&НаСервере
Функция ПолучитьСписокДокументовПоПоследовательности(МоментВремениНачало, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке=1000) 
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоДокументовВВыборке,"ЧГ=") + "
	                      |	ТаблицаПоследовательности.Период КАК Дата,
						  |	ТаблицаПоследовательности.Регистратор КАК Ссылка
	                      |ИЗ
	                      |	Последовательность.ПартионныйУчет КАК ТаблицаПоследовательности
						  |ГДЕ
						  |	ТаблицаПоследовательности.Период <= &ДатаКон
						  |	И ТаблицаПоследовательности.Период > &Период
						  |	ИЛИ ((ТаблицаПоследовательности.Период = &Период) И (ТаблицаПоследовательности.Регистратор > &Регистратор)) 
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТаблицаПоследовательности.Период,
						  |	ТаблицаПоследовательности.Регистратор");
	Запрос.УстановитьПараметр("ДатаКон",ДатаОкончания);					  
	Запрос.УстановитьПараметр("Период",МоментВремениНачало.Дата);					  
	Запрос.УстановитьПараметр("Регистратор",МоментВремениНачало.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

&НаСервере
Функция ПолучитьСледующийДокумент(СтруктураОчередей, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке)
	СтруктураВозврата = Новый Структура("Ссылка, Дата",Неопределено,Неопределено);
	
	// Заполним пустые очереди и найдем самый раний документ.
	Для Каждого ТекущаяОчередь Из СтруктураОчередей Цикл
		Если (ТекущаяОчередь.Значение.ТаблицаСсылок.Количество() = 0) И (НЕ ТекущаяОчередь.Значение.Граница = Неопределено) Тогда
			ТекущаяОчередь.Значение.ТаблицаСсылок = ПолучитьСписокДокументовПоПоследовательности(ТекущаяОчередь.Значение.Граница, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке);
			Если ТекущаяОчередь.Значение.ТаблицаСсылок.Количество() = 0 Тогда
				// Больше документов в данной последовательности нет.
				ТекущаяОчередь.Значение.Граница = Неопределено;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ТекущаяОчередь.Значение.Граница = Неопределено Тогда
			Если (СтруктураВозврата.Ссылка = Неопределено) ИЛИ (СтруктураВозврата.Дата > ТекущаяОчередь.Значение.ТаблицаСсылок[0].Дата) Тогда
				СтруктураВозврата.Дата = ТекущаяОчередь.Значение.ТаблицаСсылок[0].Дата;
				СтруктураВозврата.Ссылка = ТекущаяОчередь.Значение.ТаблицаСсылок[0].Ссылка;
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;
	
	// Удалим документ из очередей и заполним виды учета.
	Для Каждого ТекущаяОчередь Из СтруктураОчередей Цикл
		Если НЕ ТекущаяОчередь.Значение.Граница = Неопределено Тогда
			Если ТекущаяОчередь.Значение.ТаблицаСсылок[0].Ссылка = СтруктураВозврата.Ссылка Тогда
				ТекущаяОчередь.Значение.Граница = Новый МоментВремени(ТекущаяОчередь.Значение.ТаблицаСсылок[0].Дата, ТекущаяОчередь.Значение.ТаблицаСсылок[0].Ссылка);
				ТекущаяОчередь.Значение.ТаблицаСсылок.Удалить(0);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции	

// Восстановление последовательностей партионного учета.
&НаСервере
Процедура ВыполнитьВосстановление (ДатаКонцаОбработки,
								  Останавливаться,
								  МаксимальноеКоличествоДокументовВВыборке,
								  МаксимальноеКоличествоСтрокВТранзакции) 

	КорректировкаРегистрацииВПоследовательности();

	// Будем обрабатывать документы с минимальной из границ.
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ
	|( ";
	ТекстВложенногоЗапроса=  "";
	
	Если Не ПустаяСтрока(ТекстВложенногоЗапроса) Тогда
		ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ ";
	КонецЕсли;
	
	ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
	|ВЫБРАТЬ
	|	ПартионныйУчетГраницы.МоментВремени КАК МоментВремени
	|ИЗ
	|	Последовательность.ПартионныйУчет.Границы КАК ПартионныйУчетГраницы
	|";
	
	Текст = Текст + ТекстВложенногоЗапроса + "
	|) ВложенныйЗапрос
	|УПОРЯДОЧИТЬ ПО МоментВремени ВОЗР";
	
	Запрос.Текст = Текст;
	
	ВыборкаГраниц = Запрос.Выполнить().Выбрать();
	Если ВыборкаГраниц.Следующий() Тогда
		ГПт = ВыборкаГраниц.МоментВремени;
	Иначе
		ГПт = Новый МоментВремени('00010101');
	КонецЕсли;
	
	// Восстанавливаем обе последовательности, последовательно проводя документы.
	ЕстьДокументы = Истина;
	
	ОбработаноСтрок = 0;
	
	НачатьТранзакцию();
	#Если Клиент Тогда
		Состояние(НСтр("ru='Начало транзакции'"));
	#КонецЕсли
	
	ПроведениеОстановлено = Ложь;
	
	ДатаДокумента = ГПт.Дата;
	ДокументСсылка = ГПт.Ссылка;
	ДатаКон = КонецДня(ДатаКонцаОбработки);
	БылПоследнийДокумент = Ложь;
	СтруктураОчередей = ПолучитьСтруктуруОчередейДокументов(Новый МоментВремени(ДатаДокумента,ДокументСсылка));
	
	Пока ЕстьДокументы Цикл
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выборка документов для проведения.'"));
		#КонецЕсли
		
		Если НЕ БылПоследнийДокумент
		  И СуществуетСсылкаНаДокумент(ДокументСсылка) Тогда
			Строка = Новый Структура("Ссылка, Дата",ДокументСсылка,ДатаДокумента);
		Иначе	
			Строка = ПолучитьСледующийДокумент(СтруктураОчередей, ДатаКон, МаксимальноеКоличествоДокументовВВыборке);
		КонецЕсли;	
		
		ЕстьДокументы = (НЕ (Строка.Ссылка = Неопределено));
		БылПоследнийДокумент = ЕстьДокументы;
		
		Если НЕ ЕстьДокументы Тогда
			Прервать;
		КонецЕсли;	
		
		ДокументСсылка = Строка.Ссылка;
		ДатаДокумента  = Строка.Дата;
			
		// Через параметр получим количество обработанных строк.
		КоличествоСтрокВДокументе = 0;
		
		СтруктураНаборовЗаписей = Неопределено;
		# Если Сервер Тогда
			// При выполнении на сервере наборы записей создаем один раз.
			СтруктураНаборовЗаписей = Новый Структура;
			СтруктураНаборовЗаписей.Вставить("ДвиженияПартииТоваровНаСкладах",    РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());
		# КонецЕсли
			
				
		#Если Клиент Тогда
			Состояние(НСтр("ru='Проведение документа'") + " " + ДокументСсылка);
		#КонецЕсли
		
		ДокументМоментВремени = Неопределено;
		
		// Движение партий товаров по документу.
		
		// Если это документ коррекции, то предварительно готовим сторнирующие движения
		Если ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(ДокументСсылка, "Коррекция", Ложь) = Истина Тогда 
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			РаботаСДокументамиСервер.СторнироватьДвиженияПоРегистрамУПР(ДокументОбъект, Ложь, "РегистрНакопления.ПартииТоваровНаСкладах");
			ДокументОбъект.Движения.ПартииТоваровНаСкладах.Записать();
		КонецЕсли;
		
		// Стандартное списание по партиям
		ПартионныйУчет.пуДвижениеПартийТоваров (ДокументСсылка,
									  ,,
									  КоличествоСтрокВДокументе,
									  Останавливаться,
									  ПроведениеОстановлено);
					
		Если ПроведениеОстановлено Тогда
					
			ЗафиксироватьТранзакцию();
			Возврат;
						
		КонецЕсли;
					
		
		#Если Клиент Тогда
		Состояние();
		#КонецЕсли
			
		ОбработаноСтрок = ОбработаноСтрок + КоличествоСтрокВДокументе;
			
		// Фиксируем транзакцию
		Если ОбработаноСтрок >= МаксимальноеКоличествоСтрокВТранзакции Тогда
				
			#Если Клиент Тогда
				Состояние(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Обработано %1. фиксация транзакции.'"),
						ОбработаноСтрок)
					);
			#КонецЕсли
			ЗафиксироватьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Обработано %1. Транзакция зафиксирована'"),
					ОбработаноСтрок)
				);
				
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли

			НачатьТранзакцию();
				
			ОбработаноСтрок = 0;
				
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Обработано %1. фиксация транзакции.'"),
			ОбработаноСтрок)
		);
	#КонецЕсли
	
	ЗафиксироватьТранзакцию();
	
	#Если Клиент Тогда	
	Состояние();
	#КонецЕсли

КонецПроцедуры // ВыполнитьВосстановление

#КонецОбласти
