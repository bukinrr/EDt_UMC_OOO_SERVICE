&НаКлиенте
Перем ДокументТекущейСтроки;
&НаКлиенте
Перем ПолисТекущейСтрокиПредполагаетПараметрыЗубов;
&НаКлиенте
Перем ПриемТекущейСтроки;
&НаКлиенте
Перем ДиагнозыТекущейСтроки;
&НаКлиенте
Перем ИзмененныеПоля;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлементОтбора = СписокПродаж.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Документ.Проведен");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
		
	Если ЗначениеЗаполнено(Параметры.Документ) Тогда
		ЭлементОтбора = СписокПродаж.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Документ");
		ЭлементОтбора.ПравоеЗначение = Параметры.Документ;
		ЭлементОтбора.Использование = Истина;
		
		СписокПродаж.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
		Элементы.СписокПродажОтбор.Видимость = Ложь;
		
		Элементы.ОбластьАвтоопределенияДокумент.Доступность = Ложь;
		
	КонецЕсли;
	
	// Определяем, есть ли в базе виды полисов, для которых актуально указание зуба и сегмента зуба
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыПолисов.Ссылка
	|ИЗ
	|	Справочник.ВидыПолисов КАК ВидыПолисов
	|ГДЕ
	|	ВидыПолисов.РазрешитьУказыватьПараметрыЗубов";
	Элементы.ГруппаЗубы.Видимость = Не Запрос.Выполнить().Пустой();
	Элементы.СписокПродажЗуб.Видимость = Элементы.ГруппаЗубы.Видимость;
	Элементы.СписокПродажСегментЗуба.Видимость = Элементы.ГруппаЗубы.Видимость;
	
	ЗаполнитьСпособыЗаполненияПриСоздании();
	
	// Инициализация служебных данных для отслеживания изменения отдельных полей записи
	ЦветИзмененногоПоля = ЦветаСтиля.ЦветФонаПодсказки;

	ДанныеЭлементовЗаписиРегистра = Новый Структура;
	НачалоДанныхРегистра = "ЗаписьРегистра.";
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И Лев(ЭлементФормы.ПутьКДанным, СтрДлина(НачалоДанныхРегистра)) = НачалоДанныхРегистра
		Тогда
			ПутьКДаннымЭлемента = СтрЗаменить(ЭлементФормы.ПутьКДанным, НачалоДанныхРегистра, "");
			Если Найти(ПутьКДаннымЭлемента, ".") = 0 Тогда
				ДанныеЭлементовЗаписиРегистра.Вставить(ПутьКДаннымЭлемента, ЭлементФормы.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Установка доступности полей и команд в зависимости от прав пользователей
	ЕстьПравоПолногоРедактирования = ПравоДоступа("Просмотр", Метаданные.Обработки.СтраховыеПрограммыЗаполнениеПараметровРеестра.Команды.ОткрытьОбработку);
	Элементы.ЗаписьРегистраПроверено.ТолькоПросмотр = Не ЕстьПравоПолногоРедактирования;
	Элементы.СписокПродажОтметитьПроверенными.Видимость = ЕстьПравоПолногоРедактирования;
	Элементы.СписокПродажОтметитьНеПроверенным.Видимость = ЕстьПравоПолногоРедактирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзмененныеПоля = Новый Массив;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиПользователяВФорме(СпособыАвтозаполненияПриемов, СпособыАвтозаполненияДиагнозов, ОбластьАвтоопределенияДокумент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СписокПродажПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	Если ЗначениеЗаполнено(Параметры.Документ) Тогда
		КоличествоНастроек = Настройки.Элементы.Количество();
		Для Сч = 1 По КоличествоНастроек Цикл
			Если ТипЗнч(Настройки.Элементы[КоличествоНастроек - Сч]) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Настройки.Элементы[КоличествоНастроек - Сч].Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьРегистраКлючевоеПолеПриИзменении(Элемент)
	
	ДобавитьПолеВИзмененные(Элемент);
	УстановитьДоступностьКомандСохраненияРучногоРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСохраненияРучногоРедактирования()
	
	ДоступностьКоманд = ИзмененныеПоля.Количество() <> 0;
	ДоступностьКомандыНеЗаполненные = ИзмененныеПоля.Найти(ДанныеЭлементовЗаписиРегистра.Диагноз) <> Неопределено;
	
	Элементы.ПрименитьРучноеРедактированиеКСтроке.Доступность = ДоступностьКоманд;
	Элементы.ПрименитьРучкоеРедактированиеКДокументу.Доступность = ДоступностьКоманд;
	Элементы.ПрименитьРучкоеРедактированиеКДокументуНеЗаполненные.Доступность = ДоступностьКомандыНеЗаполненные;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродажПриАктивизацииСтроки(Элемент)
		
	СброситьРедактированияЗаписи();
	
	Если Элементы.СписокПродаж.ТекущиеДанные <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Элементы.СписокПродаж.ТекущиеДанные);
		
		Если Элементы.СписокПродаж.ТекущиеДанные.Документ <> ДокументТекущейСтроки Тогда
			ДокументТекущейСтроки = Элементы.СписокПродаж.ТекущиеДанные.Документ;
			
			ДанныеДокумента = ПолучитьДанныеДокументаПродажи(ДокументТекущейСтроки, Элементы.ГруппаЗубы.Видимость);
			
			КлиентДокумента = ДанныеДокумента.Клиент;
			ПолисТекущейСтрокиПредполагаетПараметрыЗубов = ДанныеДокумента.ПоказыватьПараметрыЗубов;
		КонецЕсли;
		
		Если Элементы.СписокПродаж.ТекущиеДанные.Прием <> ПриемТекущейСтроки Тогда
			ПриемТекущейСтроки = Элементы.СписокПродаж.ТекущиеДанные.Прием;
			Если ЗначениеЗаполнено(ПриемТекущейСтроки) Тогда
				ДиагнозыТекущейСтроки = ПолучитьДиагнозыПриема(ПриемТекущейСтроки);
			Иначе
				ДиагнозыТекущейСтроки = Новый СписокЗначений;
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.ГруппаЗубы.Видимость Тогда
			Элементы.ЗаписьРегистраЗуб.Доступность			= ПолисТекущейСтрокиПредполагаетПараметрыЗубов;
			Элементы.ЗаписьРегистраСегментЗуба.Доступность	= ПолисТекущейСтрокиПредполагаетПараметрыЗубов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументаПродажи(Документ, ПолучитьУказаниеПараметровЗубов)
	
	Результат = Новый Структура;
	Результат.Вставить("Клиент", Документ.Клиент);
	
	Если ПолучитьУказаниеПараметровЗубов Тогда
		Результат.Вставить("ПоказыватьПараметрыЗубов", Документ.Документ.ВидПолиса.РазрешитьУказыватьПараметрыЗубов);
	Иначе
		Результат.Вставить("ПоказыватьПараметрыЗубов", Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДиагнозыПриема(Прием)
	
	Диагнозы = Новый СписокЗначений;
	ДиагнозыТаблица = Обработки.СтраховыеПрограммыЗаполнениеПараметровРеестра.ПолучитьДиагнозыПриема(Прием);
	пчКлассификация = Перечисления.КлассификацииДиагнозов;
	
	Для Каждого СтрокаДиагноза Из ДиагнозыТаблица Цикл
		
		Если СтрокаДиагноза.Характер = пчКлассификация.Острое Тогда
			Характер = "Острое";
		ИначеЕсли СтрокаДиагноза.Характер = пчКлассификация.ОбострениеХронического Тогда
			Характер = "Обост.хр.";
		ИначеЕсли СтрокаДиагноза.Характер = пчКлассификация.ХроническоеВпервыеВыявленное
			Или СтрокаДиагноза.Характер = пчКлассификация.ХроническоеРанееВыявленное
		Тогда
		    Характер = "Хронич.";
		Иначе
			Характер = "";
		КонецЕсли;
		
		ЭлементСписка = Диагнозы.Добавить(СтрокаДиагноза.Диагноз);
		ЭлементСписка.Представление
			= ?(ЗначениеЗаполнено(Характер), "(" + Характер + ") ", "")
			+ СокрЛП(СтрокаДиагноза.Диагноз.КодДиагноза) + " "
			+ СтрокаДиагноза.Диагноз;
		
		ОписаниеЗуба = Строка(СтрокаДиагноза.Зуб) + " " + СтрокаДиагноза.СегментЗуба;
		Если ЗначениеЗаполнено(ОписаниеЗуба) Тогда
			ЭлементСписка.Представление = ЭлементСписка.Представление + " (" + ОписаниеЗуба + ")";
			ЭлементСписка.Значение = Новый Структура("Диагноз, Зуб, СегментЗуба", СтрокаДиагноза.Диагноз, СтрокаДиагноза.Зуб, СтрокаДиагноза.СегментЗуба);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Диагнозы;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьРучноеРедактированиеКСтроке(Команда)
	
	СтрокидляИзменения = Неопределено;
	
	ВыделенныеСтроки = Элементы.СписокПродаж.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		ВыделенныеСтроки = Неопределено;
	КонецЕсли;
	
	ПрименитьРучноеРедактированиеДанных(ЗаписьРегистра, ПолучитьИзмененныеДанныеЗаписи(),,,ВыделенныеСтроки);
	Элементы.СписокПродаж.Обновить();
	
	СброситьРедактированияЗаписи();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПрименитьРучноеРедактированиеКДокументуНеЗаполненные(Команда)
	
	ПрименитьРучноеРедактированиеДанных(ЗаписьРегистра, ПолучитьИзмененныеДанныеЗаписи(), Истина, Истина);
	Элементы.СписокПродаж.Обновить();
	
	СписокПродажПриАктивизацииСтроки(Элементы.СписокПродаж);
	
	СброситьРедактированияЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьРучноеРедактированиеКДокументу(Команда)
	
	ПрименитьРучноеРедактированиеДанных(ЗаписьРегистра, ПолучитьИзмененныеДанныеЗаписи(), Истина);
	Элементы.СписокПродаж.Обновить();
	
	СброситьРедактированияЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьРедактированияЗаписи()
	
	ИзмененныеПоля = Новый Массив;
	УстановитьДоступностьКомандСохраненияРучногоРедактирования();
	
	ПустойЦвет = Новый Цвет;
	Для Каждого КлючЗначение Из ДанныеЭлементовЗаписиРегистра Цикл
		Элемент = Элементы.Найти(КлючЗначение.Значение);
		Если Элемент.ЦветФона <> ПустойЦвет Тогда
			Элемент.ЦветФона = Новый Цвет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрименитьРучноеРедактированиеДанных(Знач ДанныеЗаполнения, Знач ИзмененныеПоляЗаписи, НаВесьДокумент = Ложь, ТолькоНеЗаполенные = Ложь, ВыделенныеСтроки = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ПараметрыПродажПоСтраховымПрограммам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДанныеЗаполнения.Документ);
	НаборЗаписей.Прочитать();
	
	ИзмененныеПоля = "";
	Для Каждого ИмяПоля Из ИзмененныеПоляЗаписи Цикл
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(ИзмененныеПоля, ИмяПоля, ", ");
	КонецЦикла;
	
	Если ИзмененныеПоляЗаписи.Найти("Прием") <> 0 Тогда
		РучноеРедактированиеПриема = Перечисления.СпособыОпределенияПриемаДляПродажПоСтраховымПрограммам.УказанПользователем;
	Иначе
		РучноеРедактированиеПриема = Неопределено;
	КонецЕсли;
	
	Если ИзмененныеПоляЗаписи.Найти("Диагноз") <> 0 Тогда
		РучноеРедактированиеДиагноза = Перечисления.СпособыОпределенияДиагнозаДляПродажПоСтраховымПрограммам.УказанПользователем;
	Иначе
		РучноеРедактированиеДиагноза = Неопределено;
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если НаВесьДокумент Тогда
			Если Не ТолькоНеЗаполенные
				Или Не ЗначениеЗаполнено(Запись.Диагноз)
			Тогда
				ЗаполнитьЗаписьРегистраПараметров(Запись, ДанныеЗаполнения, ИзмененныеПоля, РучноеРедактированиеПриема, РучноеРедактированиеДиагноза);
			КонецЕсли;
		ИначеЕсли Запись.ИмяТЧ = ДанныеЗаполнения.ИмяТЧ
				И Запись.КлючСтроки = ДанныеЗаполнения.КлючСтроки
		Тогда
			// Запись строки, которую редактировали
			ЗаполнитьЗаписьРегистраПараметров(Запись, ДанныеЗаполнения, ИзмененныеПоля, РучноеРедактированиеПриема, РучноеРедактированиеДиагноза);
		ИначеЕсли ТипЗнч(ВыделенныеСтроки) = Тип("Массив") Тогда
			// Запись строк, веделенных вместе с редактируемой
			Для Каждого КлючСтроки Из ВыделенныеСтроки Цикл
				Если  Запись.ИмяТЧ = КлючСтроки.ИмяТЧ
					И Запись.КлючСтроки = КлючСтроки.КлючСтроки
				Тогда
					ЗаполнитьЗаписьРегистраПараметров(Запись, ДанныеЗаполнения, ИзмененныеПоля, РучноеРедактированиеПриема, РучноеРедактированиеДиагноза);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаписьРегистраПараметров(Запись, ДанныеЗаполнения, ИзмененныеПоляЗаписи, СпособОпределенияПриема = Неопределено, СпособОпределенияДиагноза = Неопределено)
	
	ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаполнения,ИзмененныеПоляЗаписи);	
	Если ЗначениеЗаполнено(СпособОпределенияПриема) Тогда
		Запись.СпособОпределенияПриема = СпособОпределенияПриема;
	КонецЕсли;
	Если ЗначениеЗаполнено(СпособОпределенияДиагноза) Тогда
		Запись.СпособОпределенияДиагноза = СпособОпределенияДиагноза;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьРегистраПриемПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗаписьРегистра.Прием) Тогда
		ЗаписьРегистра.СпособОпределенияПриема = ПредопределенноеЗначение("Перечисление.СпособыОпределенияПриемаДляПродажПоСтраховымПрограммам.УказанПользователем");
		ДиагнозыТекущейСтроки = ПолучитьДиагнозыПриема(ЗаписьРегистра.Прием);
	Иначе
		ЗаписьРегистра.СпособОпределенияПриема = Неопределено;
		ДиагнозыТекущейСтроки = Новый СписокЗначений;
	КонецЕсли;
	
	ДобавитьПолеВИзмененные(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозПриИзменении(Элемент)
	ЗаписьРегистра.СпособОпределенияДиагноза = ПредопределенноеЗначение("Перечисление.СпособыОпределенияДиагнозаДляПродажПоСтраховымПрограммам.УказанПользователем");
	ЗаписьРегистраКлючевоеПолеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДиагнозыТекущейСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагнозОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Зуб) Тогда
			ЗаписьРегистра.Зуб = ВыбранноеЗначение.Зуб;
			ЗаписьРегистра.СегментЗуба = ВыбранноеЗначение.СегментЗуба;
			ДобавитьПолеВИзмененные(Элементы.ЗаписьРегистраЗуб);
			ДобавитьПолеВИзмененные(Элементы.ЗаписьРегистраСегментЗуба);
		КонецЕсли;
		ВыбранноеЗначение = ВыбранноеЗначение.Диагноз;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыЗаполненияПриСоздании()
	
	// Заполняем списки способов заполнения (исключая ручное указание)
	пчСпособы = Перечисления.СпособыОпределенияПриемаДляПродажПоСтраховымПрограммам;
	Для Каждого МетаданныеСпособа Из Метаданные.Перечисления.СпособыОпределенияПриемаДляПродажПоСтраховымПрограммам.ЗначенияПеречисления Цикл
		Если пчСпособы[МетаданныеСпособа.Имя] <> пчСпособы.УказанПользователем Тогда
			СпособыАвтозаполненияПриемов.Добавить(пчСпособы[МетаданныеСпособа.Имя],,Истина);
		КонецЕсли;
	КонецЦикла;
	пчСпособы = Перечисления.СпособыОпределенияДиагнозаДляПродажПоСтраховымПрограммам;
	Для Каждого МетаданныеСпособа Из Метаданные.Перечисления.СпособыОпределенияДиагнозаДляПродажПоСтраховымПрограммам.ЗначенияПеречисления Цикл
		Если пчСпособы[МетаданныеСпособа.Имя] <> пчСпособы.УказанПользователем Тогда
			СпособыАвтозаполненияДиагнозов.Добавить(пчСпособы[МетаданныеСпособа.Имя],,Истина);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиПользователя = ХранилищеПользовательскихНастроекОтчетов.Загрузить("СтраховыеПрограммыЗаполнениеПараметровРеестра");
	Если ТипЗнч(НастройкиПользователя) = Тип("Структура") Тогда
		Если НастройкиПользователя.Свойство("СпособыАвтозаполненияПриемов") Тогда
			Для Каждого ЭлементСпискаЗначений Из НастройкиПользователя.СпособыАвтозаполненияПриемов Цикл
				ЭлементСпискаНаФорме = СпособыАвтозаполненияПриемов.НайтиПоЗначению(ЭлементСпискаЗначений.Значение);
				Если ЭлементСпискаНаФорме <> Неопределено Тогда
					ЭлементСпискаНаФорме.Пометка = ЭлементСпискаЗначений.Пометка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НастройкиПользователя.Свойство("СпособыАвтозаполненияДиагнозов") Тогда
			Для Каждого ЭлементСпискаЗначений Из НастройкиПользователя.СпособыАвтозаполненияПриемов Цикл
				ЭлементСпискаНаФорме = СпособыАвтозаполненияДиагнозов.НайтиПоЗначению(ЭлементСпискаЗначений.Значение);
				Если ЭлементСпискаНаФорме <> Неопределено Тогда
					ЭлементСпискаНаФорме.Пометка = ЭлементСпискаЗначений.Пометка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НастройкиПользователя.Свойство("ОбластьАвтоопределенияДокумент") Тогда
			ОбластьАвтоопределенияДокумент = НастройкиПользователя.ОбластьАвтоопределенияДокумент;
		Иначе
			ОбластьАвтоопределенияДокумент = Истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиПользователяВФорме(Знач СпособыАвтозаполненияПриемов, Знач СпособыАвтозаполненияДиагнозов, Знач ОбластьАвтоопределенияДокумент)
	
	НастройкиПользователя = Новый Структура;
	НастройкиПользователя.Вставить("СпособыАвтозаполненияПриемов", СпособыАвтозаполненияПриемов);
	НастройкиПользователя.Вставить("СпособыАвтозаполненияДиагнозов", СпособыАвтозаполненияПриемов);
	НастройкиПользователя.Вставить("ОбластьАвтоопределенияДокумент", ОбластьАвтоопределенияДокумент);
	ХранилищеПользовательскихНастроекОтчетов.Сохранить("СтраховыеПрограммыЗаполнениеПараметровРеестра",,НастройкиПользователя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтоопределениеПараметров(Команда)
	
	ВыполнитьАвтоопределениеПараметровСервер(?(ОбластьАвтоопределенияДокумент, ДокументТекущейСтроки, Неопределено));
	Элементы.СписокПродаж.Обновить();
	ПриемТекущейСтроки = Неопределено;
	СписокПродажПриАктивизацииСтроки(Элементы.СписокПродаж);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтоопределениеПараметровСервер(Документ)
	
	ДопустимыеСпособыДляПриема = Новый Массив;
	ДопустимыеСпособыДляДиагноза = Новый Массив;
	Для Каждого ЭлементСписка Из СпособыАвтозаполненияПриемов Цикл
		Если ЭлементСписка.Пометка Тогда
			ДопустимыеСпособыДляПриема.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементСписка Из СпособыАвтозаполненияДиагнозов Цикл
		Если ЭлементСписка.Пометка Тогда
			ДопустимыеСпособыДляДиагноза.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Обработки.СтраховыеПрограммыЗаполнениеПараметровРеестра.ВыполнитьАвтоОпределениеПараметровПоНастройкамСписка(
		Элементы.СписокПродаж.ПолучитьИсполняемуюСхемуКомпоновкиДанных(),
		Элементы.СписокПродаж.ПолучитьИсполняемыеНастройкиКомпоновкиДанных(),
		ДопустимыеСпособыДляПриема,
		ДопустимыеСпособыДляДиагноза,
		Документ,
		ПерезаполнятьДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьРегистраПровереноПриИзменении(Элемент)
	ДобавитьПолеВИзмененные(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьРегистраКомментарийПриИзменении(Элемент)
	ДобавитьПолеВИзмененные(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеВИзмененные(Элемент)
	
	ИзмененныеПоля.Добавить(Элемент.Имя);
	Элемент.ЦветФона = ЦветИзмененногоПоля;

	УстановитьДоступностьКомандСохраненияРучногоРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПроверенными(Команда)
	
	Если Вопрос("Все строки в спике будут отмечены проверенными.
				|Продолжить?", РежимДиалогаВопрос.ОКОтмена, 30) = КодВозвратаДиалога.ОК
	Тогда		
		ПроставитьПроверенностьСтрок(Истина);
		
		Элементы.СписокПродаж.Обновить();
		СписокПродажПриАктивизацииСтроки(Элементы.СписокПродаж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьНеПроверенным(Команда)
	
	Если Вопрос("Все строки в спике будут отмечены не проверенными.
				|Продолжить?", РежимДиалогаВопрос.ОКОтмена, 30) = КодВозвратаДиалога.ОК
	Тогда		
		ПроставитьПроверенностьСтрок(Ложь);
		
		Элементы.СписокПродаж.Обновить();
		СписокПродажПриАктивизацииСтроки(Элементы.СписокПродаж);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьПроверенностьСтрок(Проверено)
	
	Обработки.СтраховыеПрограммыЗаполнениеПараметровРеестра.ПроставитьПроверенностьСтрок(
		Элементы.СписокПродаж.ПолучитьИсполняемуюСхемуКомпоновкиДанных(),
		Элементы.СписокПродаж.ПолучитьИсполняемыеНастройкиКомпоновкиДанных(),
		Проверено);
	
	КонецПроцедуры

&НаКлиенте
Функция ПолучитьИзмененныеДанныеЗаписи()
	
	ИзмененныеДанные = Новый Массив;
	
	Для Каждого КлючЗначениеДанные Из ДанныеЭлементовЗаписиРегистра Цикл
		Если ИзмененныеПоля.Найти(КлючЗначениеДанные.Значение) <> Неопределено Тогда
			ИзмененныеДанные.Добавить(КлючЗначениеДанные.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИзмененныеДанные;
	
КонецФункции
