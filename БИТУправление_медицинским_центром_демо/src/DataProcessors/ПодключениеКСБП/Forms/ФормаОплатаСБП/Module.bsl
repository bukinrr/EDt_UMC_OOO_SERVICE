#Область Переменные

&НаКлиенте
Перем ВыводНаДислплейПокупателяПроизведен;	
	
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ДокументОплаты") Или Не Параметры.Свойство("ЭквайринговыйТерминал") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректные параметры формы.'");
	КонецЕсли;
	
	СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.НеВыполнена");
	ДокументОплаты = Параметры.ДокументОплаты;
	ЭквайринговыйТерминал = Параметры.ЭквайринговыйТерминал; 
	ТорговаяТочка = ИнтеграцияСБП.ПолучитьТорговуюТочкуПоЭквайринговомуТерминалу(ЭквайринговыйТерминал);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		Результат = Новый Структура;
		Результат.Вставить("Результат", Ложь);
		Результат.Вставить("ОписаниеОшибки", "Не установлены настройки терминала СБП");
		ЭтотОбъект.Закрыть(Результат);
	Иначе
		ПодключитьОбработчикОжидания("ПолучитьИдентификаторОплаты", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = НСтр("ru = 'Перед закрытием программы необходимо завершить процесс оплаты.'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ВыводНаДислплейПокупателяПроизведен <> Неопределено И ВыводНаДислплейПокупателяПроизведен Тогда
		ОборудованиеДисплеиПокупателяКлиент.НачатьОчисткуДисплеяПокупателя(,УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОписаниеОшибкиОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "open:log" Тогда
		СтандартнаяОбработка = Ложь;
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьОплату(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыполняется Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаQRКод;
		ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
		УстановитьВидимостьДоступность();
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаQRКод Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Информация об оплате еще не получена от СБП");
		// Печать на бумаге QR
			
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатиQRКодаНаФискальномУстройстве();
		ПараметрыОперации.ТипПлатежнойСистемы = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
		ПараметрыОперации.QRКод.ЗначениеКода = QRКод;
	
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьQRЗавершение", ЭтотОбъект);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации); 
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка Тогда
		Результат = Новый Структура;
		Результат.Вставить("Результат", Ложь);
		Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
		ЭтотОбъект.Закрыть(Результат);
	Иначе
		ИдентификаторОперации = Прав(Строка(ИнтеграцияСБП.ПолучитьИдентификаторОперации(ДокументОплаты)),10);
		Результат = Новый Структура;
		Результат.Вставить("Результат", Истина);
		Результат.Вставить("СсылочныйНомер", "");
		Результат.Вставить("НомерКарты", "");
		Результат.Вставить("НомерЧекаЭТ", ИдентификаторОперации);
		ЭтотОбъект.Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеОплачен(Команда)
	
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	Возврат;
	//Отложен = УстановитьОтложенноеПолучениеСтатуса(ДокументОплаты);
	
	//Если Отложен Тогда
	//	Результат = Новый Структура;
	//	Результат.Вставить("СтатусОперации", ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.Выполняется"));
	//	ЭтотОбъект.Закрыть(Результат);
	//Иначе
	//	ОбщегоНазначенияКлиент.СообщитьПользователю(
	//		НСтр("ru = 'Не удалось отложить чек.'"));
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПечатьQRЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбщегоНазначения.СообщитьПользователю("QR код напечатан");
	Иначе
		ОбщегоНазначения.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторОплаты()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация;
	УстановитьВидимостьДоступность();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	РезультатВыполнения = ПолучитьИдентификаторОплатыНаСервере(
		ДокументОплаты,
		ТорговаяТочка,
		ЭтотОбъект.УникальныйИдентификатор);
	
	ИдентификаторЗаданияФормированияQRКода = РезультатВыполнения.ИдентификаторЗадания;
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПолучитьИдентификаторОплатыЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения.Статус <> "Выполняется" Тогда
		ПолучитьИдентификаторОплатыЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторОплатыНаСервере(
		ДокументОплаты,
		ТорговаяТочка,
		УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДокументОплаты", ДокументОплаты);
	ПараметрыПроцедуры.Вставить("ТорговаяТочка",  ТорговаяТочка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование идентификатора оплаты.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСБП.ИдентификаторОплатыВПлатежнойСистеме",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИдентификаторОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			
			Если РезультатОперации.КодОшибки = ПолучитьКодОшибкиУжеОплачен() Тогда
				ТекстСообщения = "";	
				Суммы = ПроверкаСуммОплаты(ДокументОплаты);
				Если Суммы.СуммаОплачено <> Суммы.СуммаДокумента Тогда
					ДанныеНеБылиИзменены = УстановитьЗначениеСуммыОплат(ЭтаФорма.ВладелецФормы, Суммы.СуммаОплачено);
					Если ДанныеНеБылиИзменены Тогда
						Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка;
						УстановитьВидимостьДоступность("Операция не может быть завершена, т.к. оплата по документу на сумму "
														+ Суммы.СуммаОплачено + " была выполнена успешно " + Суммы.ДатаОперации + ". "
														+ "В текущей версии документа сумма безналичной оплаты составляет " 
														+ Суммы.СуммаДокумента + " для завершения операции скорректируйте сумму безналичной оплаты в документе "
														+ "к сумме " + Суммы.СуммаОплачено + ". А затем при необходимости можно будет произвести возврат.");
						Возврат;
					КонецЕсли;
										
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ДокументОплаты", ДокументОплаты);
					ДопПараметры.Вставить("СуммаОплачено", Суммы.СуммаОплачено);
					ДопПараметры.Вставить("СуммаДокумента", Суммы.СуммаДокумента);
					РазницаСумм = Макс(Суммы.СуммаОплачено - Суммы.СуммаДокумента, Суммы.СуммаДокумента - Суммы.СуммаОплачено);
					ДопПараметры.Вставить("РазницаСумм", РазницаСумм);

					Если Суммы.СуммаОплачено > Суммы.СуммаДокумента Тогда
						ДопПараметры.Вставить("ВидДокумента", "Возврат");
						ТекстСообщения = "Оплата по данному документу через СБП была проведена ранее, сумма документа меньше оплаченной суммы на " + РазницаСумм + ". " 
									+ "Создать возврат по платежной карте и оплату платежной картой на полную сумму?";
					Иначе                                                                     
						ДопПараметры.Вставить("ВидДокумента", "Поступление");
						ТекстСообщения = "Оплата по данному документу через СБП была проведена ранее, сумма документа больше оплаченной суммы на " + РазницаСумм + ". "
									+ "Создать оплату платежной картой на разницу сумм?";	
					КонецЕсли;
					
					Оповещение = Новый ОписаниеОповещения("ОплатаВыполненаРанееПродолжение", ИнтеграцияСБПКлиент, ДопПараметры);				
				КонецЕсли;
				ИдентификаторОперации = Прав(Строка(ИнтеграцияСБП.ПолучитьИдентификаторОперации(ДокументОплаты)),10);
				Результат = Новый Структура;
				Результат.Вставить("Результат", Истина);
				Результат.Вставить("СсылочныйНомер", "");
				Результат.Вставить("НомерКарты", "");
				Результат.Вставить("НомерЧекаЭТ", ИдентификаторОперации);
				Если ЗначениеЗаполнено(ТекстСообщения) Тогда
					ПоказатьВопрос = Новый Структура("ТекстСообщения,Режим, Оповещение", ТекстСообщения, РежимДиалогаВопрос.ДаНет, Оповещение);						
					Результат.Вставить("ПоказатьВопрос", ПоказатьВопрос);	
				КонецЕсли;
				
				ЭтотОбъект.Закрыть(Результат);
				
			КонецЕсли;
			
			СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.Ошибка");
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка;
			УстановитьВидимостьДоступность(
				РезультатОперации.СообщениеОбОшибке);
		Иначе
			QRКод = РезультатОперации.QRКод;
			СформироватьДанныеQRКода(QRКод);
			
			// Вывод qr кода на дисплей покупателя
			ДанныеДляВыводаНаДисплейПокупателя = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя("Оплата по СБП", QRКод); 
			ОборудованиеДисплеиПокупателяКлиент.НачатьВыводQRКодаНаДисплейПокупателя(, УникальныйИдентификатор, ,ДанныеДляВыводаНаДисплейПокупателя);
			ВыводНаДислплейПокупателяПроизведен = Истина;
			ДоступнаОтложеннаяОперация = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаQRКод;
			УстановитьВидимостьДоступность();
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.Ошибка");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка;
		УстановитьВидимостьДоступность(
			Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусОплаты()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	РезультатВыполнения = ОпределитьСтатусОплатыОплатыНаСервере(
		ДокументОплаты,
		ТорговаяТочка,
		ЭтотОбъект.УникальныйИдентификатор);
	
	ИдентификаторЗаданияПроверкиСтатуса = РезультатВыполнения.ИдентификаторЗадания;
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОпределитьСтатусОплатыЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения.Статус <> "Выполняется" Тогда
		ОпределитьСтатусОплатыЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьСтатусОплатыОплатыНаСервере(
		ДокументОплаты,
		ТорговаяТочка,
		УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДокументОплаты", ДокументОплаты);
	ПараметрыПроцедуры.Вставить("ТорговаяТочка",  ТорговаяТочка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка статуса оплаты.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСБП.СтатусОплатыВПлатежнойСистеме",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьСтатусОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если Результат.Статус = "Выполнено" Тогда
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется() Тогда
			СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.Выполняется");
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			Возврат;
		ИначеЕсли РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена() Тогда
			Результат = Новый Структура;
			ИдентификаторОперации = Прав(Строка(ИнтеграцияСБП.ПолучитьИдентификаторОперации(ДокументОплаты)), 10); 
			Результат.Вставить("Результат", Истина);
			Результат.Вставить("СсылочныйНомер", "");
			Результат.Вставить("НомерКарты", "");
			Результат.Вставить("НомерЧекаЭТ", ИдентификаторОперации);
			ЭтотОбъект.Закрыть(Результат);
		ИначеЕсли РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОтменена() Тогда
			СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.Отменена");
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка;
			СообщениеОбОшибке = НСтр("ru = 'Операция отменена. Истек срок жизни QR-кода или операция была отклонена СБП.'");
		ИначеЕсли РезультатОперации.СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка() Тогда
			СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.Ошибка");
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка;
			СообщениеОбОшибке = РезультатОперации.СообщениеОбОшибке;
		КонецЕсли;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыОперацияСБП.Ошибка");
		СообщениеОбОшибке = Результат.КраткоеПредставлениеОшибки;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка;
	КонецЕсли;
	
	УстановитьВидимостьДоступность(
		СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеQRКода(Идентификатор)
	
	ДанныеQRКода = ПоместитьВоВременноеХранилище(
		ИнтеграцияСПлатежнымиСистемами.СоздатьQRКодОплаты(
			ТорговаяТочка,
			Идентификатор,
			360,
			0),
		ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ОписаниеОшибки = "")
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация Тогда
		Элементы.ФормаЗавершитьОплату.Видимость = Ложь;
		Элементы.ФормаНеОплачен.Видимость = Ложь;
		Элементы.ФормаОтложить.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаQRКод Тогда
		Элементы.ФормаЗавершитьОплату.Видимость = Истина;
		Элементы.ФормаЗавершитьОплату.Заголовок = НСтр("ru = 'Пречек'");
		Элементы.ФормаНеОплачен.Видимость = Истина;
		//Элементы.ФормаОтложить.Видимость = Истина;
		Элементы.ФормаОтложить.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗавершение Тогда
		Элементы.ФормаЗавершитьОплату.Видимость = Истина;
		Элементы.ФормаЗавершитьОплату.Заголовок = НСтр("ru = 'Завершить оплату'");
		Элементы.ДекорацияНадписьУспешноеЗавершение.Заголовок = НСтр("ru = 'Оплата успешно выполнена.'");
		Элементы.ФормаНеОплачен.Видимость = Ложь;
		Элементы.ФормаОтложить.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыполняется Тогда
		Элементы.ФормаЗавершитьОплату.Видимость = Истина;
		Элементы.ФормаЗавершитьОплату.Заголовок = НСтр("ru = 'Получить статус'");
		Элементы.ДекорацияНадписьУспешноеЗавершение.Заголовок = НСтр("ru = 'Платежная система не подтвердила оплату.'");
		Элементы.ФормаНеОплачен.Видимость = Истина;
		//Элементы.ФормаОтложить.Видимость = Истина;
		Элементы.ФормаОтложить.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка Тогда
		ЧастиСтрок = Новый Массив;
		ТекстОшибки = ОписаниеОшибки;
		ЧастиСтрок.Добавить(ОписаниеОшибки);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(НСтр("ru = 'Подробнее см.'"));
		ЧастиСтрок.Добавить(" ");
		ЧастиСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'журнал регистрации.'")
				,
				,
				,
				,
				"open:log"));
		
		Элементы.ДекорацияОписаниеОшибки.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		Элементы.ФормаЗавершитьОплату.Видимость = Истина;
		Элементы.ФормаЗавершитьОплату.Заголовок = НСтр("ru = 'Оплачен'");
		Элементы.ФормаНеОплачен.Видимость = Истина;
		Элементы.ФормаОтложить.Видимость = Ложь;
	КонецЕсли;
	
	//Элементы.ФормаОтложить.Видимость = ДоступнаОтложеннаяОперация;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТабличныеДокументПречек(ТорговаяТочка, ДокументОплаты, ДанныеQRКода)
	
	//Возврат Документы._ДемоЧекККМ.Печать_Пречек(
	//	ТорговаяТочка,
	//	ДокументОплаты,
	//	ДанныеQRКода);
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьОтложенноеПолучениеСтатуса(ДокументОплаты)
	
	Возврат ИнтеграцияСПлатежнымиСистемами.УстановитьОтложенноеПолучениеСтатуса(
		ДокументОплаты,
		Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаСуммОплаты(ДокументОплаты)
	
	Результат = ИнтеграцияСБП.ПроверитьСуществующийИдентификаторПоДокументуОплаты(ДокументОплаты);	
	СуммаДокумента = ИнтеграцияСБП.ПолучитьДанныеСуммыПоБезналу(ДокументОплаты);
	
	ВозвращаемыеДанные = Новый Структура("СуммаОплачено, СуммаДокумента, ДатаОперации", Результат.СуммаОперации, СуммаДокумента.СуммаОплаты, Результат.ДатаОперации);
	Возврат ВозвращаемыеДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодОшибкиУжеОплачен()
	
	Возврат ИнтеграцияСПлатежнымиСистемамиСлужебный.КодОшибкиУжеОплачен(); 
	
КонецФункции

&НаКлиенте
Функция УстановитьЗначениеСуммыОплат(Форма, НоваяСуммаОплаты)
	
	Объект = Форма.Объект;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		
		Отбор = Новый Структура("ВидОплаты", ПредопределенноеЗначение("Перечисление.ВидыОплаты.Безналичные"));
		мОплатыБезналом = Объект.Оплата.НайтиСтроки(Отбор);		
		Если мОплатыБезналом.Количество() = 1 Тогда	
			СтараяСуммаБезналаДок = мОплатыБезналом[0].Сумма;
			РазницаСумм = мОплатыБезналом[0].Сумма - НоваяСуммаОплаты;
			Форма.СуммаОплаты = Форма.СуммаОплаты - РазницаСумм; 
			мОплатыБезналом[0].Сумма = НоваяСуммаОплаты;
			Форма.ОплаченоБезналичным = НоваяСуммаОплаты;
		Иначе
			ВызватьИсключение "Количество строк оплаты безналичным более 1 или отсутствует!";	
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		СтараяСуммаБезналаДок = Объект.СуммаДокумента;  
		Объект.СуммаДокумента = НоваяСуммаОплаты; 
	КонецЕсли;

	ОбъектКопия = Объект;
	ДанныеНеБылиИзменены = УстановитьСуммуБезналаДокументаВФорме(ОбъектКопия, НоваяСуммаОплаты);
	
	Если ДанныеНеБылиИзменены Тогда
		// Если документ не удалось провести вернем все обратно
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			Форма.СуммаОплаты = Форма.СуммаОплаты + РазницаСумм;
			мОплатыБезналом[0].Сумма = СтараяСуммаБезналаДок;
			Форма.ОплаченоБезналичным = СтараяСуммаБезналаДок;
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
			Объект.СуммаДокумента = СтараяСуммаБезналаДок; 
		КонецЕсли;	
		Возврат Истина;
	КонецЕсли;
	
	КопироватьДанныеФормы(ОбъектКопия, Форма.Объект);
	Форма.Прочитать();
	Объект = Форма.Объект;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		РаботаСФормамиКлиентСервер.ПолучитьОписаниеВзаиморасчетов(Объект.Клиент, , Форма);
		Форма.ВызовОбновитьЧеки();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьСуммуБезналаДокументаВФорме(ОбъектФорма, НоваяСуммаОплаты) Экспорт
	
	Если ТипЗнч(ОбъектФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ДокументОбъект = ОбъектФорма.РеквизитФормыВЗначение("Объект");
	Иначе
		ДокументОбъект = ДанныеФормыВЗначение(ОбъектФорма, ТипЗнч(ОбъектФорма.Ссылка.Скопировать()));
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
		
		Отбор = Новый Структура("ВидОплаты",Перечисления.ВидыОплаты.Безналичные);
		мОплатыБезналом = ДокументОбъект.Оплата.НайтиСтроки(Отбор);		
		Если мОплатыБезналом.Количество() = 1 Тогда	
			СтараяСумма = мОплатыБезналом[0].Сумма;
			мОплатыБезналом[0].Сумма = НоваяСуммаОплаты;			
		Иначе
			ВызватьИсключение "Количество строк оплаты безналичным более 1 или отсутствует!";	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		СтараяСумма = ДокументОбъект.СуммаДокумента; 
		ДокументОбъект.СуммаДокумента = НоваяСуммаОплаты; 
	КонецЕсли;

	//ДокументОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		// Если документ не удалось провести вернем все обратно
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			мОплатыБезналом[0].Сумма = СтараяСумма;		
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
			ДокументОбъект.СуммаДокумента = СтараяСумма; 
		КонецЕсли;		
		Возврат Истина;	
	КонецПопытки;
	
	Если ТипЗнч(ОбъектФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбъектФорма.ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	КонецЕсли;
	
	Возврат Ложь;
	                                                         
КонецФункции

#КонецОбласти
