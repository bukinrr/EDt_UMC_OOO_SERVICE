#Область РазделОписанияПеременных

&НаКлиенте
Перем ПараметрыВыбора;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Филиал",                  Параметры.Филиал);
	ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", Параметры.ДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета",  Параметры.ДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("ПредставлениеВидаОчета",  Параметры.ПредставлениеВидаОтчета);
	
	ПараметрыОтбораУОС = Новый Структура(
		"Наименование,ПолноеИмя",
		"Статистика: Прочие формы",
		"Документ.МедицинскийОтчет");
	
	ДеревоВсехИспользуемыхОтчетовПоКатегориям = ДеревоВсехИспользуемыхОтчетов();
		
	Если ЗначениеЗаполнено(ПараметрыФормы.ПредставлениеВидаОчета) Тогда
		НайденныеОтчеты = ДеревоВсехИспользуемыхОтчетовПоКатегориям.Строки.НайтиСтроки(Новый Структура("Наименование", ПараметрыФормы.ПредставлениеВидаОчета), Истина);
		Для Каждого НайденныйОтчет Из НайденныеОтчеты Цикл
			Если НайденныйОтчет.ЭтоГруппа <> Истина	Тогда
				ДанныеНайденногоВидаОтчета = Новый Структура("Наименование,ПолноеИмя,Ссылка");
				ЗаполнитьЗначенияСвойств(ДанныеНайденногоВидаОтчета, НайденныйОтчет);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДеревоВсехИспользуемыхОтчетовПоПолучателям  = ЗаполнитьДеревоОтчетовПоПолучателям(ДеревоВсехИспользуемыхОтчетовПоКатегориям);
	ДеревоВсехИспользуемыхОтчетовБезГруппировки = ЗаполнитьДеревоОтчетовБезГруппировки(ДеревоВсехИспользуемыхОтчетовПоКатегориям);
	
	ЗначениеВДанныеФормы(ДеревоВсехИспользуемыхОтчетовПоКатегориям,   ДеревоОтчетовПоКатегориям);
	ЗначениеВДанныеФормы(ДеревоВсехИспользуемыхОтчетовПоПолучателям,  ДеревоОтчетовПоПолучателям);
	ЗначениеВДанныеФормы(ДеревоВсехИспользуемыхОтчетовБезГруппировки, ДеревоОтчетовБезГруппировки);
	
	ДеревоОтчетовГруппировка = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ДеревоОтчетовГруппировка");
	Если ДеревоОтчетовГруппировка = 3 Тогда
		ДеревоОтчетовГруппировка = 0;
	КонецЕсли;
	
	Если ДеревоОтчетовГруппировка = 1 Тогда      // Группировка по получателям.
		КопироватьДанныеФормы(ДеревоОтчетовПоПолучателям, ДеревоОтчетов);
	ИначеЕсли ДеревоОтчетовГруппировка = 0 Тогда // Группировка по категориям.
		КопироватьДанныеФормы(ДеревоОтчетовПоКатегориям, ДеревоОтчетов);
	Иначе                                        // Без группировки.
		КопироватьДанныеФормы(ДеревоОтчетовБезГруппировки, ДеревоОтчетов);
	КонецЕсли;
	
	Если ДеревоОтчетовГруппировка = 3 Тогда
		
		Элементы.ГруппаВидыСписков.ТекущаяСтраница = Элементы["ГруппаДеревоОтчетов"];
		
	Иначе
		ТаблицаИзбранныхОтчетов = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ИзбранныеОтчеты");
		Если ТипЗнч(ТаблицаИзбранныхОтчетов) = Тип("ТаблицаЗначений") Тогда
			ДобавитьРанееСозданныеВИзбранные(ДеревоОтчетов, ТаблицаИзбранныхОтчетов);
		КонецЕсли;
		ИзбранныеОтчеты.Сортировать("Наименование");
		
		КоличествоЭлементовВРанееСозданных = ИзбранныеОтчеты.Количество();
		Если КоличествоЭлементовВРанееСозданных = 0 Тогда
			Элементы.ГруппаВидыСписков.ТекущаяСтраница = Элементы["ГруппаДеревоОтчетов"];
		Иначе
			ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ТекущаяСтраница");
			Если ТекСтраница <> Неопределено И Элементы.ГруппаВидыСписков.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
				Элементы.ГруппаВидыСписков.ТекущаяСтраница = Элементы[ТекСтраница];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ДанныеНайденногоВидаОтчета) = Тип("Структура") И ДанныеНайденногоВидаОтчета.Свойство("Наименование") Тогда
		Если ЗначениеЗаполнено(ДанныеНайденногоВидаОтчета.Наименование) Тогда
			
			ФормаОтчета = "";
			ОткрытьФормуОтчетаНаКлиенте(ДанныеНайденногоВидаОтчета, ПараметрыФормы.Филиал, 
										ПараметрыФормы.ДатаНачалаПериодаОтчета, ПараметрыФормы.ДатаКонцаПериодаОтчета);
			
			СохранитьНастройки();
			
			// При работе в режиме клиента автоматизированного тестирования
			// без метода "Закрыть()" окно текущей формы остается открытым.
			Закрыть();
			
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекДеревоОтчетов = ОпределитьТекущееДерево();
	
	Если ТекДеревоОтчетов.ТекущиеДанные <> Неопределено
		И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		
		СохранитьНастройки();
		
		ОткрытьФормуОтчетаНаКлиенте(ТекДеревоОтчетов.ТекущиеДанные, ПараметрыФормы.Филиал, 
									ПараметрыФормы.ДатаНачалаПериодаОтчета, 
									ПараметрыФормы.ДатаКонцаПериодаОтчета, , Истина);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОбОтчетеНажатие(Элемент)
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ТекДеревоОтчетов = ОпределитьТекущееДерево();
	
	Если НЕ ЗначениеЗаполнено(ТекДеревоОтчетов.ТекущиеДанные.Ссылка) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для выбранного отчета вывод подробной информации не предусмотрен.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекДеревоОтчетов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите отчет.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		ПоказатьПредупреждение(, НСтр("ru='Функция недоступна для группы отчетов.'"));
		Возврат;
	КонецЕсли;
	
	СтандартноеВыполнение = Истина;
	ИмяФормыПодробнееОбОтчете = "ПодробнееОбОтчете";
	
	МедицинскаяОтчетностьКлиентПереопределяемый.ПодробнееОбОчете(ТекДеревоОтчетов.ТекущиеДанные.Ссылка, ИмяФормыПодробнееОбОтчете, СтандартноеВыполнение);
	
	Если СтандартноеВыполнение = Истина Тогда
		
		ПараметрыОткрытияФормы.Вставить("НачальноеЗначениеВыбора", ТекДеревоОтчетов.ТекущиеДанные.Ссылка);
		ФормаПодробнееОФормах = МедицинскаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(ИмяФормыПодробнееОбОтчете, ПараметрыОткрытияФормы, ЭтаФорма);
		ФормаПодробнееОФормах.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаПодробнееОФормах.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДеревоОтчетов = Элементы.ИзбранныеОтчеты;
	
	Если ТекДеревоОтчетов.ТекущиеДанные <> Неопределено
		И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда

		ОткрытьФормуОтчетаНаКлиенте(ТекДеревоОтчетов.ТекущиеДанные, ПараметрыФормы.Филиал, 
									ПараметрыФормы.ДатаНачалаПериодаОтчета, 
									ПараметрыФормы.ДатаКонцаПериодаОтчета, , Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеПриАктивизацииСтроки(Элемент)
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеПередУдалением(Элемент, Отказ)
	
	УдалитьОтчетИзИзбранных();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовГруппировкаПриИзменении(Элемент)
	
	Если ДеревоОтчетовГруппировка = 1 Тогда      // группировка по получателям
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовПоПолучателям);
	ИначеЕсли ДеревоОтчетовГруппировка = 2
		  ИЛИ ДеревоОтчетовГруппировка = 3 Тогда // без группировки
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовБезГруппировки);
	Иначе                                        // группировка по категориям (по умолчанию)
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовПоКатегориям);
	КонецЕсли;
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДеревоОтчетов = Элементы.ДеревоОтчетов;
	
	Если ТекДеревоОтчетов.ТекущиеДанные <> Неопределено
		И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		
		Если Поле.Имя = "ДеревоОтчетовПометка" Тогда
			
			Если ТекДеревоОтчетов.ТекущиеДанные.Пометка = 0 Тогда
				ДобавитьОтчетВИзбранные();
			ИначеЕсли ТекДеревоОтчетов.ТекущиеДанные.Пометка = 1 Тогда
				УдалитьОтчетИзИзбранных(ТекДеревоОтчетов.ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
			
		Иначе
			
			ОткрытьФормуОтчетаНаКлиенте(ТекДеревоОтчетов.ТекущиеДанные, ПараметрыФормы.Филиал,
										ПараметрыФормы.ДатаНачалаПериодаОтчета,
										ПараметрыФормы.ДатаКонцаПериодаОтчета, , Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидыСписковПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранные(Команда)
	
	ДобавитьОтчетВИзбранные();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзИзбранных(Команда)
	
	УдалитьОтчетИзИзбранных();
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТекущееДерево()
	
	Если Элементы.ГруппаВидыСписков.ТекущаяСтраница.Имя = "ГруппаРанееСозданные" Тогда
		ТекДеревоОтчетов = Элементы.ИзбранныеОтчеты;
	Иначе
		ТекДеревоОтчетов = Элементы.ДеревоОтчетов;
	КонецЕсли;
	
	Возврат ТекДеревоОтчетов;
	
КонецФункции

&НаКлиенте
Процедура УправлениеЭУ(АктивизироватьДеревоОтчетов = Истина)
	
	ТекДеревоОтчетов = ОпределитьТекущееДерево();
	
	ДоступностьЭУ = (ТекДеревоОтчетов.ТекущиеДанные <> Неопределено И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа);
	
	ТекДеревоОтчетов.КонтекстноеМеню.ПодчиненныеЭлементы[0].Доступность = ДоступностьЭУ;
	ТекДеревоОтчетов.КонтекстноеМеню.ПодчиненныеЭлементы[1].Доступность = ДоступностьЭУ;
	
	Элементы.Выбрать.Доступность   = ДоступностьЭУ;
	Элементы.Подробнее.Доступность = ДоступностьЭУ;
	
	Если ТекДеревоОтчетов.Имя = "ДеревоОтчетов" И ТекДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево Тогда
		ЭлементыПервогоУровня = ДеревоОтчетов.ПолучитьЭлементы();
		Если ЭлементыПервогоУровня.Количество() <= 5 Тогда
			Для Каждого ЭлементПервогоУровня Из ЭлементыПервогоУровня Цикл
				Если ЭлементПервогоУровня.ЭтоГруппа Тогда
					Элементы.ДеревоОтчетов.Развернуть(ЭлементПервогоУровня.ПолучитьИдентификатор(), Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если АктивизироватьДеревоОтчетов Тогда
		ЭтаФорма.ТекущийЭлемент = ТекДеревоОтчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка)
	
	Если ДеревоОтчетовГруппировка = 1 Тогда // группировка по получателям
		
		Элементы.ДеревоОтчетовКатегория.Видимость  = Ложь;
		Элементы.ДеревоОтчетовПолучатель.Видимость = Ложь;
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево;
		
	ИначеЕсли ДеревоОтчетовГруппировка = 2 Тогда // без группировки
		
		Элементы.ДеревоОтчетовКатегория.Видимость  = Ложь;
		Элементы.ДеревоОтчетовПолучатель.Видимость = Ложь;
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Список;
		
	ИначеЕсли ДеревоОтчетовГруппировка = 3 Тогда // без группировки, упрощенный интерфейс
		
		Элементы.ДеревоОтчетовКатегория.Видимость  = Ложь;
		Элементы.ДеревоОтчетовПолучатель.Видимость = Ложь;
		Элементы.ДеревоОтчетовПометка.Видимость    = Ложь;
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Список;
		
	Иначе // группировка по категориям
		
		ДеревоОтчетовГруппировка = 0;
		Элементы.ДеревоОтчетовКатегория.Видимость  = Ложь;
		Элементы.ДеревоОтчетовПолучатель.Видимость = Истина;
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтчетВИзбранные()
	
	ТекущиеДанные = Элементы.ДеревоОтчетов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		НайденныеОтчеты = ИзбранныеОтчеты.НайтиСтроки(Новый Структура("ПолноеИмя,Ссылка", ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Ссылка));
		
		Если НайденныеОтчеты.Количество() = 0 Тогда
			
			НоваяСтрока = ИзбранныеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
			
			ИзбранныеОтчеты.Сортировать("Наименование");
			
		КонецЕсли;
		
		ТекущиеДанные.Пометка = 1;
		
	КонецЕсли;
	
	КоличествоЭлементовВРанееСозданных = ИзбранныеОтчеты.Количество();
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтчетИзИзбранных(ИдентификаторЭлементаДерева = Неопределено)
	
	Если ИдентификаторЭлементаДерева <> Неопределено Тогда
		
		ТекущиеДанные = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторЭлементаДерева);
		ТекущиеДанные.Пометка = 0;
		НайденныеОтчеты = ИзбранныеОтчеты.НайтиСтроки(Новый Структура("ПолноеИмя,Ссылка", ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Ссылка));
		Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
			ИзбранныеОтчеты.Удалить(НайденныйОтчет);
		КонецЦикла;
		
		КоличествоЭлементовВРанееСозданных = ИзбранныеОтчеты.Количество();
		
		СохранитьНастройки();
		
		Возврат;
		
	КонецЕсли;
	
	СписокОтчетов = Новый СписокЗначений;
	
	ВыделенныеСтроки = Элементы.ИзбранныеОтчеты.ВыделенныеСтроки;
	Для каждого ТекущийИдентификатор Из ВыделенныеСтроки Цикл
		ТекущиеДанные = ИзбранныеОтчеты.НайтиПоИдентификатору(ТекущийИдентификатор);
		СписокОтчетов.Добавить(ТекущиеДанные.Ссылка, ТекущиеДанные.ПолноеИмя);
		ИзбранныеОтчеты.Удалить(ТекущиеДанные);
	КонецЦикла;
	
	СписокОтчетов.СортироватьПоЗначению();
	
	СнятьПометкиВДеревеПоСписку(ДеревоОтчетов, СписокОтчетов);
	
	КоличествоЭлементовВРанееСозданных = ИзбранныеОтчеты.Количество();
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиВДеревеПоСписку(Узел, СписокОтчетов)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		
		СнятьПометкиВДеревеПоСписку(ЭлементУзла, СписокОтчетов);
		
		Если ЭлементУзла.ЭтоГруппа <> Истина Тогда
			Если СписокОтчетов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементУзла.Ссылка) Тогда
				НайденныйОтчет = СписокОтчетов.НайтиПоЗначению(ЭлементУзла.Ссылка);
			Иначе
				НайденныйОтчет = Неопределено;
				Для Инд = 0 По СписокОтчетов.Количество() - 1 Цикл
					ЭлементСписка = СписокОтчетов.Получить(Инд);
					Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
						Прервать;
					КонецЕсли;
					Если ЭлементСписка.Представление = ЭлементУзла.ПолноеИмя Тогда
						НайденныйОтчет = ЭлементСписка;
						Прервать;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			Если НайденныйОтчет <> Неопределено Тогда
				ЭлементУзла.Пометка = 0;
				СписокОтчетов.Удалить(НайденныйОтчет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДеревоВсехИспользуемыхОтчетов()
	
	КоличествоЭлементовВДеревеОтчетов  = 0;
	
	ДеревоВсехИспользуемыхОтчетов = ДеревоИзСправочникаМедицинскиеОтчеты();
	
	// Добавим новые колонки для использования расширенных типов
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Ссылка");
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("ПолноеИмя",    Новый ОписаниеТипов("Строка"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Категория",    Новый ОписаниеТипов("Строка"));
	
	ЗаполнитьНовыеКолонкиДереваОтчетов(ДеревоВсехИспользуемыхОтчетов);
	
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("СсылкаВидОтчета");
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("НаименованиеОтчета");
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("ИсточникОтчета");
	
	МедицинскаяОтчетность.ДобавитьВДеревоМедицинскихОтчетовДругиеОтчеты(ДеревоВсехИспользуемыхОтчетов);
	
	// Добавим дополнительные колонки для соответствия данным формы
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Получатель",     Новый ОписаниеТипов("Строка"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Пометка",        Новый ОписаниеТипов("Число"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	
	ОбработатьДеревоОтчетов(ДеревоВсехИспользуемыхОтчетов);
	
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("ТипПолучателя");
	
	Для каждого СтрокаПервогоУровня Из ДеревоВсехИспользуемыхОтчетов.Строки Цикл
	
		СтрокаПервогоУровня.Строки.Сортировать("Наименование", Истина);
		
		ОтобранныеОтчеты = СтрокаПервогоУровня.Строки.НайтиСтроки(ПараметрыОтбораУОС, Истина);
		Если ЗначениеЗаполнено(ОтобранныеОтчеты) Тогда // Перемещаем УОС в конец коллекции.
			ОтчетУОС = ОтобранныеОтчеты[0];
			ГруппаОтчетаУОС = ОтчетУОС.Родитель;
			ИндексОтчетаУОС = ГруппаОтчетаУОС.Строки.Индекс(ОтчетУОС);
			Смещение = ГруппаОтчетаУОС.Строки.Количество() - ИндексОтчетаУОС - 1;
			ГруппаОтчетаУОС.Строки.Сдвинуть(ИндексОтчетаУОС, Смещение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоВсехИспользуемыхОтчетов;
	
КонецФункции

&НаСервере
Функция ДеревоИзСправочникаМедицинскиеОтчеты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	МедицинскиеОтчеты.Код КАК КодОтчета,
	                      |	МедицинскиеОтчеты.Наименование КАК НаименованиеОтчета,
	                      |	МедицинскиеОтчеты.Ссылка КАК СсылкаВидОтчета,
	                      |	МедицинскиеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
	                      |	"""" КАК ТипПолучателя,
	                      |	МедицинскиеОтчеты.ЭтоГруппа КАК ЭтоГруппа
	                      |ИЗ
	                      |	Справочник.МедицинскиеОтчеты КАК МедицинскиеОтчеты
	                      |ГДЕ
	                      |	НЕ МедицинскиеОтчеты.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НаименованиеОтчета,
	                      |	ИсточникОтчета");
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

&НаСервере
Процедура ДобавитьРанееСозданныеВИзбранные(Узел, ТаблицаИзбранныхОтчетов)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		
		ДобавитьРанееСозданныеВИзбранные(ЭлементУзла, ТаблицаИзбранныхОтчетов);
		
		Если ЭлементУзла.ЭтоГруппа <> Истина Тогда
			
			Если ТаблицаИзбранныхОтчетов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			НайденныеОтчеты = ТаблицаИзбранныхОтчетов.НайтиСтроки(Новый Структура("ПолноеИмя,Наименование", ЭлементУзла.ПолноеИмя, ЭлементУзла.Наименование));
			Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
				НоваяСтрокаТаблицы = ИзбранныеОтчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ЭлементУзла);
				ЭлементУзла.Пометка = 1;
				ТаблицаИзбранныхОтчетов.Удалить(НайденныйОтчет);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьИзбранноеВОбщемСпискеОтчетов(Узел, ТаблицаИзбранныхОтчетов)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		
		ОтметитьИзбранноеВОбщемСпискеОтчетов(ЭлементУзла, ТаблицаИзбранныхОтчетов);
		
		Если ЭлементУзла.ЭтоГруппа <> Истина Тогда
			
			Если ТаблицаИзбранныхОтчетов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			НайденныеОтчеты = ТаблицаИзбранныхОтчетов.НайтиСтроки(Новый Структура(
			"ПолноеИмя,Наименование", ЭлементУзла.ПолноеИмя, ЭлементУзла.Наименование));
			
			Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
				ЭлементУзла.Пометка = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьНовыеКолонкиДереваОтчетов(Узел)
	
	СтрокиУзла = Узел.Строки;
	
	Для каждого СтрокаДерева Из СтрокиУзла Цикл
	
		ЗаполнитьНовыеКолонкиДереваОтчетов(СтрокаДерева);
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			СтрокаДерева.Ссылка = СтрокаДерева.СсылкаВидОтчета;
			СтрокаДерева.ПолноеИмя = "Документ.МедицинскийОтчет";
			МетаОтчет = Метаданные.Отчеты.Найти(СтрокаДерева.ИсточникОтчета);
			Если МетаОтчет <> Неопределено И МетаОтчет.ОсновнаяФорма <> Неопределено Тогда
				СтрокаДерева.Наименование = МетаОтчет.ОсновнаяФорма.Синоним;
			Иначе
				СтрокаДерева.Наименование = СтрокаДерева.НаименованиеОтчета;
			КонецЕсли;
			
			// Назначим категорию (имя группы родителя)
			Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
				СтрокаДерева.Категория = Узел.НаименованиеОтчета;
			КонецЕсли;
			
		Иначе
			
			СтрокаДерева.Наименование = СтрокаДерева.НаименованиеОтчета;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДеревоОтчетов(Узел)
	
	СтрокиДерева = Узел.Строки;
	
	КолСтрок = СтрокиДерева.Количество();
	
	Для Инд = 1 По КолСтрок Цикл
		
		ОбрИндекс = КолСтрок - Инд;
		СтрокаДерева = СтрокиДерева.Получить(ОбрИндекс);
		
		ОбработатьДеревоОтчетов(СтрокаДерева);
		
		// Удаляем пустую группу
		Если СтрокаДерева.ЭтоГруппа И СтрокаДерева.Строки.Количество() = 0 Тогда
			СтрокиДерева.Удалить(СтрокаДерева);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			СтрокаДерева.Получатель = Строка(СтрокаДерева.ТипПолучателя);
			
			СтрокаДерева.ИндексКартинки = 1;
			Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				СтрокаДерева.ИндексКартинки = ?(СтрокаДерева.Ссылка.ПометкаУдаления, 3, 1);
			КонецЕсли;
			
			КоличествоЭлементовВДеревеОтчетов = КоличествоЭлементовВДеревеОтчетов + 1;
			
			СтрокаДерева.Пометка = 0;
		Иначе
			СтрокаДерева.ИндексКартинки = 0;
			Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				СтрокаДерева.ИндексКартинки = ?(СтрокаДерева.Ссылка.ПометкаУдаления, 2, 0);
			КонецЕсли;
			СтрокаДерева.Пометка = -1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоОтчетовПоПолучателям(ДеревоВсехИспользуемыхОтчетов)
	
	ТаблицаГруппДляСортировки = Новый ТаблицаЗначений;
	ТаблицаГруппДляСортировки.Колонки.Добавить("Поиск",      Новый ОписаниеТипов("Строка"));
	ТаблицаГруппДляСортировки.Колонки.Добавить("Замена",     Новый ОписаниеТипов("Строка"));
	ТаблицаГруппДляСортировки.Колонки.Добавить("Сортировка", Новый ОписаниеТипов("Строка"));
	ТаблицаГруппДляСортировки.Колонки.Добавить("СтрокаВДереве");
	
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы.Поиск = "яяя";
	СтрокаТаблицы.Замена = "Другие получатели";
	СтрокаТаблицы.Сортировка = "яяя";
	
	ДеревоЗначенийДляСортировки = ДеревоВсехИспользуемыхОтчетов.Скопировать();
	ДеревоЗначенийДляСортировки.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийПоПолучателям(ДеревоВсехИспользуемыхОтчетов, ДеревоЗначенийДляСортировки);
	
	ВсеГруппыПолучателей = ДеревоЗначенийДляСортировки.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина), Истина);
	
	Для каждого ГруппаПолучателя Из ВсеГруппыПолучателей Цикл
		НайденныеСтроки = ТаблицаГруппДляСортировки.НайтиСтроки(Новый Структура("Поиск", ГруппаПолучателя.Наименование));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].СтрокаВДереве = ГруппаПолучателя;
			ГруппаПолучателя.Наименование = НайденныеСтроки[0].Сортировка;
		КонецЕсли;
	КонецЦикла;
	
	ДеревоЗначенийДляСортировки.Строки.Сортировать("Наименование", Истина);
	
	Для каждого СтрокаТаблицыГруппа Из ТаблицаГруппДляСортировки Цикл
		Если СтрокаТаблицыГруппа.СтрокаВДереве <> Неопределено Тогда
			СтрокаТаблицыГруппа.СтрокаВДереве.Наименование = СтрокаТаблицыГруппа.Замена;
			
			Если СтрокаТаблицыГруппа.СтрокаВДереве.Наименование = "Росстат" Тогда
				ОтобранныеОтчеты = СтрокаТаблицыГруппа.СтрокаВДереве.Строки.НайтиСтроки(ПараметрыОтбораУОС, Истина);
				Если ЗначениеЗаполнено(ОтобранныеОтчеты) Тогда // перемещаем УОС в конец коллекции
					ОтчетУОС = ОтобранныеОтчеты[0];
					ГруппаОтчетаУОС = ОтчетУОС.Родитель;
					ИндексОтчетаУОС = ГруппаОтчетаУОС.Строки.Индекс(ОтчетУОС);
					Смещение = ГруппаОтчетаУОС.Строки.Количество() - ИндексОтчетаУОС - 1;
					ГруппаОтчетаУОС.Строки.Сдвинуть(ИндексОтчетаУОС, Смещение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоЗначенийДляСортировки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоЗначенийПоПолучателям(Узел, ДеревоРезультата)
	
	СтрокиУзла = Узел.Строки;
	
	Для каждого СтрокаДерева Из СтрокиУзла Цикл
	
		ЗаполнитьДеревоЗначенийПоПолучателям(СтрокаДерева, ДеревоРезультата);
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			Получатель = ?(ЗначениеЗаполнено(СтрокаДерева.Получатель), СтрокаДерева.Получатель, "яяя");
			
			НайденныеГруппыПолучателя = ДеревоРезультата.Строки.НайтиСтроки(Новый Структура("Наименование,ЭтоГруппа", Получатель, Истина), Истина);
			Если НайденныеГруппыПолучателя.Количество() > 0 Тогда
				НайденнаяГруппаПолучателя = НайденныеГруппыПолучателя[0];
			Иначе
				НайденнаяГруппаПолучателя = ДеревоРезультата.Строки.Добавить();
				НайденнаяГруппаПолучателя.Наименование = Получатель;
				НайденнаяГруппаПолучателя.ЭтоГруппа = Истина;
				НайденнаяГруппаПолучателя.Пометка = -1;
			КонецЕсли;
			
			НоваяСтрокаДерева = НайденнаяГруппаПолучателя.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоОтчетовБезГруппировки(ДеревоВсехИспользуемыхОтчетов)
	
	ДеревоЗначенийДляСортировки = ДеревоВсехИспользуемыхОтчетов.Скопировать();
	ДеревоЗначенийДляСортировки.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийБезГруппировки(ДеревоВсехИспользуемыхОтчетов, ДеревоЗначенийДляСортировки);
	
	ОтобранныеОтчеты = ДеревоЗначенийДляСортировки.Строки.НайтиСтроки(ПараметрыОтбораУОС);
	Если ЗначениеЗаполнено(ОтобранныеОтчеты) Тогда // Изменяем наименование УОС для правильной сортировки
		ОтобранныеОтчеты[0].Наименование = "Статистика: яяя";
	КонецЕсли;

	ДеревоЗначенийДляСортировки.Строки.Сортировать("Наименование, Получатель", Истина);
	
	Если ЗначениеЗаполнено(ОтобранныеОтчеты) Тогда // Восстанавливаем наименование УОС.
		ОтобранныеОтчеты[0].Наименование = ПараметрыОтбораУОС.Наименование;
	КонецЕсли;
	
	Возврат ДеревоЗначенийДляСортировки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоЗначенийБезГруппировки(Узел, ДеревоРезультата)
	
	СтрокиУзла = Узел.Строки;
	
	Для каждого СтрокаДерева Из СтрокиУзла Цикл
	
		ЗаполнитьДеревоЗначенийБезГруппировки(СтрокаДерева, ДеревоРезультата);
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			НоваяСтрокаДерева = ДеревоРезультата.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоОтчетовИзДругогоДерева(ИсходноеДеревоОтчетов)
	
	ДеревоОтчетов.ПолучитьЭлементы().Очистить();
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		КопироватьДанныеФормыУдовлетворяющиеСтрокеПоиска(ИсходноеДеревоОтчетов, ДеревоОтчетов);
	Иначе
		КопироватьДанныеФормы(ИсходноеДеревоОтчетов, ДеревоОтчетов);
	КонецЕсли;
	
	ПроставитьПометкиИзбранного(ДеревоОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьДанныеФормыУдовлетворяющиеСтрокеПоиска(ЭлементДереваИсточник, ЭлементДереваПриемник)
	
	СтрокаПоискаВРег = ВРег(СтрокаПоиска);
	
	СтрокиИсточника = ЭлементДереваИсточник.ПолучитьЭлементы();
	
	СтрокиПриемника = ЭлементДереваПриемник.ПолучитьЭлементы();
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		ЭтоГруппа = СтрокаИсточника.ЭтоГруппа = Истина;
		
		Если НЕ ЭтоГруппа Тогда
			Если СтрНайти(ВРег(СтрокаИсточника.Наименование), СтрокаПоискаВРег) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаПриемника = СтрокиПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, СтрокаИсточника);
		
		КопироватьДанныеФормыУдовлетворяющиеСтрокеПоиска(СтрокаИсточника, НоваяСтрокаПриемника);
		
		Если ЭтоГруппа И НоваяСтрокаПриемника.ПолучитьЭлементы().Количество() = 0 Тогда
			СтрокиПриемника.Удалить(НоваяСтрокаПриемника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиИзбранного(Узел)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		
		ПроставитьПометкиИзбранного(ЭлементУзла);
		
		Если ЭлементУзла.ЭтоГруппа <> Истина Тогда
			
			НайденныеОтчеты = ИзбранныеОтчеты.НайтиСтроки(Новый Структура("ПолноеИмя,Наименование", ЭлементУзла.ПолноеИмя, ЭлементУзла.Наименование));
			Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
				ЭлементУзла.Пометка = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.НеИспользовать;
	
	СтрокаПоиска = Текст;
	
	СтрокаПоискаОбработка();
	
	ЭтаФорма.ТекущийЭлемент = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.Авто;
	
	СтрокаПоиска = "";
	
	СтрокаПоискаОбработка();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработка()
	
	Если ДеревоОтчетовГруппировка = 1 Тогда      // группировка по получателям
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовПоПолучателям);
	ИначеЕсли ДеревоОтчетовГруппировка = 2
		  ИЛИ ДеревоОтчетовГруппировка = 3 Тогда // без группировки
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовБезГруппировки);
	Иначе                                        // группировка по категориям (по умолчанию)
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовПоКатегориям);
	КонецЕсли;
	
	УправлениеЭУ(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчетаНаКлиенте(ДанныеОтчета, ОрганизацияОтчета,
					ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета,
					ПериодичностьОтчета = Неопределено, ЭтоВыбор = Ложь)
		
	РезультатОткрытияФормыНаСервере = Неопределено;
	ПараметрыОткрытияОтчета = Неопределено;
		
	ФормаОткрытаУспешно = Истина;
		
	ТекДанныеОтчета = Новый Структура("Наименование,ПолноеИмя,Ссылка");
	ЗаполнитьЗначенияСвойств(ТекДанныеОтчета, ДанныеОтчета);
	НаименованиеОтчета = ТекДанныеОтчета.Наименование;
		
	Если ДанныеОтчета.ПолноеИмя = "Документ.МедицинскийОтчет" Тогда
		
		ИсточникОтчета = "";		
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(ТекДанныеОтчета, ОрганизацияОтчета, 
													ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, 
													ПериодичностьОтчета, ИсточникОтчета);
		
		Если РезультатОткрытияФормыНаСервере = "Недостаточно прав" Тогда
		
			ПоказатьПредупреждение(, НСтр("ru='Недостаточно прав.'"));
			ФормаОткрытаУспешно = Ложь;
			
		ИначеЕсли РезультатОткрытияФормыНаСервере = "Отчет не найден" Тогда
			
			ПоказатьПредупреждение(, НСтр("ru='Отчет не найден.'"));
			ФормаОткрытаУспешно = Ложь;
			
		ИначеЕсли РезультатОткрытияФормыНаСервере = "Не удалось открыть отчет" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не удалось открыть отчет.'");
			Сообщение.Сообщить();
			
			ФормаОткрытаУспешно = Ложь;
			
		ИначеЕсли РезультатОткрытияФормыНаСервере = "Открыть внутренний отчет-документ" Тогда
			
			ИмяФормыОтчета = "Документ." + ИсточникОтчета + ".Форма.ОсновнаяФорма";
			
		ИначеЕсли ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
			
			Если ЗначениеЗаполнено(РезультатОткрытияФормыНаСервере.ИмяФормыОтчета) Тогда
				ИмяФормыОтчета = РезультатОткрытияФормыНаСервере.ИмяФормыОтчета;
			Иначе
				ИмяФормыОтчета = "Документ.МедицинскийОтчет.Форма.ВводНовогоДокумента";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеОтчета.Ссылка) Тогда
		
		ПараметрыОткрытияОтчета = СформироватьПараметрыОтчетаНаСервере(ТекДанныеОтчета, ОрганизацияОтчета, 
																	   ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета);
		ИмяФормыОтчета = ДанныеОтчета.ПолноеИмя + ".ФормаОбъекта";
		
	Иначе
		
		ПараметрыОткрытияОтчета = Новый Структура;
		ПараметрыОткрытияОтчета.Вставить("Организация", ОрганизацияОтчета);
		ИмяФормыОтчета = ДанныеОтчета.ПолноеИмя + ".ФормаОбъекта";
		
	КонецЕсли;
	
	Если ФормаОткрытаУспешно Тогда
		
		Если ЭтоВыбор Тогда
			
			ПараметрыВыбора = Новый Структура;
			ПараметрыВыбора.Вставить("Филиал", ПараметрыФормы.Филиал);
			ПараметрыВыбора.Вставить("ДатаНачалаПериодаОтчета", ПараметрыФормы.ДатаНачалаПериодаОтчета);
			ПараметрыВыбора.Вставить("ДатаКонцаПериодаОтчета", ПараметрыФормы.ДатаКонцаПериодаОтчета);
			ПараметрыВыбора.Вставить("ПредставлениеВидаОтчета",НаименованиеОтчета);
			ПараметрыВыбора.Вставить("ИмяФормы",ИмяФормыОтчета);
			
			Если ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
				Для Каждого ПараметрОткрытия Из РезультатОткрытияФормыНаСервере Цикл
					Если Не ПараметрыВыбора.Свойство(ПараметрОткрытия.Ключ) Тогда
						ПараметрыВыбора.Вставить(ПараметрОткрытия.Ключ, ПараметрОткрытия.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЭтаФорма.ВладелецФормы.ПараметрыВыбораФормыСоздания = ПараметрыВыбора;
			Закрыть();
			
		Иначе
			
			// Сначала попробуем найти его среди открытых стартовых форм.
			// Необходимо для предотвращения
			// открытия нескольких стартовых форм одного отчета.
			НайденоОкно = Ложь;
			МедицинскаяОтчетностьКлиент.ВебКлиентНайтиАктивизироватьОкно(ИмяФормыОтчета, ЭтаФорма, НайденоОкно);
			
			Если НайденоОкно <> Неопределено Тогда
				Если НайденоОкно Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
				ПараметрыФормыОтчета = РезультатОткрытияФормыНаСервере;
			ИначеЕсли ТипЗнч(ПараметрыОткрытияОтчета) = Тип("Структура") Тогда
				ПараметрыФормыОтчета = ПараметрыОткрытияОтчета;
			Иначе
				ПараметрыФормыОтчета = Новый Структура;
			КонецЕсли;
			
			ПараметрыФормыОтчета.Вставить("ПараметрыФормы", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыФормыОтчета));
			ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормыОтчета, ЭтаФорма.ВладелецФормы, ИмяФормыОтчета);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытьФормуОтчетаНаСервере(Знач Отчет, ОрганизацияОтчета
											  , ДатаНачалаПериодаОтчета = Неопределено
											  , ДатаОкончанияПериодаОтчета = Неопределено
											  , ПериодичностьОтчета = Неопределено
											  , ИсточникОтчета)
	
	ИсточникОтчета = Отчет.Ссылка.ИсточникОтчета;
	
	Если НЕ Отчет.Ссылка.ВнешнийОтчетИспользовать Тогда
		
		ПравоДоступаКОтчету = МедицинскаяОтчетностьВызовСервера.ПравоДоступаКМедицинскомуОтчету(ИсточникОтчета);
		
		Если ПравоДоступаКОтчету = Ложь Тогда
			Возврат "Недостаточно прав";
		ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
			Возврат "Отчет не найден";
		КонецЕсли;
		
		Если Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ.
			Возврат "Открыть внутренний отчет-документ";
		КонецЕсли;
	КонецЕсли;
	
	ТекОтчет = МедицинскаяОтчетность.МедОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ТекФорма = МедицинскаяОтчетность.ФормаМедОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ПараметрыТекФормы = Новый Структура;
	ПараметрыТекФормы.Вставить("Организация");
	ПараметрыТекФормы.Вставить("мДатаНачалаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мДатаКонцаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мПериодичность");
	
	ПараметрыТекФормы.Организация = ОрганизацияОтчета;
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) Или ЗначениеЗаполнено(ДатаОкончанияПериодаОтчета) Тогда
		
		ПараметрыТекФормы.мДатаНачалаПериодаОтчета = ?(ТипЗнч(ДатаНачалаПериодаОтчета) = Тип("Дата") И ДатаНачалаПериодаОтчета <> Дата(1,1,1), НачалоДня(ДатаНачалаПериодаОтчета), Неопределено);
		ПараметрыТекФормы.мДатаКонцаПериодаОтчета = ?(ТипЗнч(ДатаОкончанияПериодаОтчета) = Тип("Дата") И ДатаОкончанияПериодаОтчета <> Дата(1,1,1), КонецДня(ДатаОкончанияПериодаОтчета), Неопределено);
		
		Если ПериодичностьОтчета <> Неопределено Тогда
			ПараметрыТекФормы.мПериодичность = ПериодичностьОтчета;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТекФормы.Вставить("ВнешнийОтчетИспользовать", Отчет.Ссылка.ВнешнийОтчетИспользовать);
	ПараметрыТекФормы.Вставить("ИсточникОтчета", ИсточникОтчета);
	
	ВариантОткрытия = ?(ПараметрыТекФормы.ВнешнийОтчетИспользовать, "ВнешнийОтчет.", "Отчет.");
	ПараметрыТекФормы.Вставить("ПутьКФормамОтчета", ВариантОткрытия + ПараметрыТекФормы.ИсточникОтчета);
	
	// Определяем, есть ли основная форма у отчета
	
	Если ПараметрыТекФормы.ВнешнийОтчетИспользовать Тогда
		ОтчетОбъект = ТекОтчет;
	Иначе
		ОтчетОбъект = ТекОтчет.Создать();
	КонецЕсли;
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	Если ОтчетМетаданные.ОсновнаяФорма = Неопределено Тогда
		ИмяФормыОтчета = Неопределено;
		// Определяет параметры периодичности отчета.
		Попытка
			ПериодичностьОтчетаСтрока = ОтчетОбъект.ПериодичностьОтчета();
			ПериодичностьОтчета = МедицинскаяОтчетность.ПериодичностьОтчетаДляСозданияНового(ПериодичностьОтчетаСтрока);
			
			Если ПериодичностьОтчета.Свойство("РазрешеннаяПериодичность") Тогда
				ПараметрыТекФормы.Вставить("РазрешеннаяПериодичность", ПериодичностьОтчета.РазрешеннаяПериодичность);
			КонецЕсли;
			Если ПериодичностьОтчета.Свойство("ОсновнаяПериодичность") Тогда
				ПараметрыТекФормы.Вставить("ОсновнаяПериодичность", ПериодичностьОтчета.ОсновнаяПериодичность);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
		КонецПопытки;
		
		Если Не ПараметрыТекФормы.Свойство("РазрешеннаяПериодичность") Тогда
			РазрешеннаяПериодичность = Новый Массив;
			РазрешеннаяПериодичность.Добавить(Перечисления.Периодичность.Год);
			ПараметрыТекФормы.Вставить("РазрешеннаяПериодичность", РазрешеннаяПериодичность);
		КонецЕсли;
		
	Иначе
		// Отчет имеет собственную форму выбора периоды и варианта.
		Если ПараметрыТекФормы.ВнешнийОтчетИспользовать Тогда
			ИмяФормыОтчета = ВариантОткрытия + ОтчетМетаданные.Имя + ".Форма";
		Иначе
			ИмяФормыОтчета = ВариантОткрытия + ПараметрыТекФормы.ИсточникОтчета + ".Форма";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекФормы.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	
	Возврат ПараметрыТекФормы;
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыОтчетаНаСервере(Знач Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация" , ОрганизацияОтчета);
	
	МедицинскаяОтчетностьПереопределяемый.ПереопределитьПараметрыОтчета(Отчет, ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПараметрыОткрытия);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ТекущаяСтраница", Элементы.ГруппаВидыСписков.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ДеревоОтчетовГруппировка", ДеревоОтчетовГруппировка);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ИзбранныеОтчеты", РеквизитФормыВЗначение("ИзбранныеОтчеты"));
	
КонецПроцедуры

#КонецОбласти