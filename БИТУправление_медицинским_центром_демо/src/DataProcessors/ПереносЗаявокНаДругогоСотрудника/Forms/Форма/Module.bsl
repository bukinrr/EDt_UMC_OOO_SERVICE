#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДатаНачала = ТекущаяДата();
	ОбновитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйСотрудникПриИзменении(Элемент)
	ОбновитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗамену(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	Результат = ВыполнитьЗаменуНаСервере(ИсходныйСотрудник, НовыйСотрудник, ДатаНачала, ДатаОкончания);
	
	Если (Результат.Удалось + Результат.НеУдалось) = 0 Тогда
		ТекстСообщения = "За выбранный период для %1 нет нашлось заявок для замены!";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИсходныйСотрудник);
	Иначе
		ТекстСообщения = "Перенесено заявок: %1, не перенесено: %2.";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.Удалось, Результат.НеУдалось);
	КонецЕсли;
	Предупреждение(ТекстСообщения, 60, "Выполнение завершено");
	
	Элементы.Заявки.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьОтбор()
	
	Заявки.Отбор.Элементы.Очистить();
	
	ГруппаИли = Заявки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаИли.Использование = Истина;
	
	ЭлементСотрудник = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементСотрудник.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник");
	ЭлементСотрудник.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементСотрудник.ПравоеЗначение = ИсходныйСотрудник;
	ЭлементСотрудник.Использование = Истина;
	
	Если ЗначениеЗаполнено(ИсходныйСотрудник) Тогда
		ЭлементСотрудникТЧ = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементСотрудникТЧ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Работы.Сотрудник");
		ЭлементСотрудникТЧ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементСотрудникТЧ.ПравоеЗначение = ИсходныйСотрудник;
		ЭлементСотрудникТЧ.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда		
		ЭлементДатаНачала = Заявки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДатаНачала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
		ЭлементДатаНачала.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементДатаНачала.ПравоеЗначение = ДатаНачала;
		ЭлементДатаНачала.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		мДатаОкончания = ?(ДатаОкончания = НачалоДня(ДатаОкончания), КонецДня(ДатаОкончания), КонецМинуты(ДатаОкончания));
		
		ЭлементДатаНачала = Заявки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДатаНачала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		ЭлементДатаНачала.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементДатаНачала.ПравоеЗначение = мДатаОкончания;
		ЭлементДатаНачала.Использование = Истина;	
	КонецЕсли;	
		
	ЭлементПомУдаления = Заявки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементПомУдаления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементПомУдаления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементПомУдаления.ПравоеЗначение = Истина;
	ЭлементПомУдаления.Использование = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьЗаменуНаСервере(ИсхСотрудник, НовыйСотрудник, ДатаНачала, ДатаОкончания)
	
	Результат = Новый Структура("Удалось, НеУдалось", 0, 0);
	НеУдалосьЗаписать = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Заявка.Ссылка
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	(Заявка.Сотрудник = &Сотрудник
	|			ИЛИ Заявка.Работы.Сотрудник = &Сотрудник)
	|	И Заявка.ДатаНачала >= &ДатаНачала И Заявка.ДатаОкончания <= &ДатаОкончания");
	
	Запрос.УстановитьПараметр("Сотрудник", ИсхСотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		мДатаОкончания = ?(ДатаОкончания = НачалоДня(ДатаОкончания), КонецДня(ДатаОкончания), КонецМинуты(ДатаОкончания));

		Запрос.УстановитьПараметр("ДатаОкончания", КонецМинуты(ДатаОкончания));
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания", Дата(3000,1,1));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаявкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ЗаявкаОбъект.Сотрудник = ИсхСотрудник Тогда
			ЗаявкаОбъект.Сотрудник = НовыйСотрудник;
		КонецЕсли;
		
		Для Каждого Стр Из ЗаявкаОбъект.Работы Цикл
			Если Стр.Сотрудник = ИсхСотрудник Тогда
				Стр.Сотрудник = НовыйСотрудник;	
			КонецЕсли;
		КонецЦикла;
		
		Попытка 
			ЗаявкаОбъект.Записать();
			Результат.Удалось = Результат.Удалось + 1;
		Исключение
			Результат.НеУдалось = Результат.НеУдалось + 1;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти