#Область РазделОписанияПеременных

&НаКлиенте
Перем ТекущийВидМедосмотра;

&НаКлиенте
Перем ТекущийТипМедосмотра;

&НаКлиенте
Перем ТекущаяДатаНаФорме;

&НаКлиенте
Перем ТекущийПрейскурант;

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Дата = ТекущаяДата();
	Объект.ТипМедосмотра = Перечисления.ТипыМедосмотров.Периодический;
	Объект.Прейскурант = Справочники.Прейскуранты.НайтиПоНаименованию("Основной Прейскурант");
	ВидМедосмотра = Справочники.ВидыМедосмотров.ПоПриказу29н;
	СтруктураДанныхОграничений = Новый ФиксированнаяСтруктура(ПолучитьСписокОграниченийПоВидуМедосмотра(ВидМедосмотра));
	
	ЗаполнитьШаблонСДаннымиПоФорматуФайла();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнициализироватьНачальныеЗначения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ЗаполнитьСметуНаСервере()
		
	Если Не ЗначениеЗаполнено(ВидМедосмотра) Тогда
		ОбщегоНазначения.СообщитьПользователю("Поле ""Вид медосмотра"" не заполнено");
		Возврат;
	КонецЕсли;
	                                                           
	Если Не ЗначениеЗаполнено(Объект.Прейскурант) Тогда
		ОбщегоНазначения.СообщитьПользователю("Поле ""Прейскурант"" не заполнено");
		Возврат;
	КонецЕсли;

	
	Объект.Смета.Очистить();
	ПредполагаемыеУслуги.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТипМедосмотра) Тогда
		ТипМедосмотра = Объект.ТипМедосмотра;
	Иначе
		ТипМедосмотра = Перечисления.ТипыМедосмотров.Периодический;
	КонецЕсли;
	
	СписокКлиентов = СформироватьСписокКлиентов(ТипМедосмотра);
	ВредныеФакторы = РазложитьВредныеФакторы(СписокКлиентов);
	
	Если ТипЗнч(ВредныеФакторы) = Тип("Строка") Тогда
		Сообщить("Вредный фактор """ +  ВредныеФакторы + """ не найден. Проверьте правильность заполнения!"); 
		Возврат;
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Дата = Объект.Дата;
	Иначе
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
			
	НоменклатураКонтингента = МедосмотрыСервер.ПолучитьСписокУслугПоКлиентам(ВидМедосмотра, СписокКлиентов, ВредныеФакторы, Дата, Объект.Прейскурант, Истина);
	//
	СуммаСметы = 0;
	Для Каждого Строка Из НоменклатураКонтингента Цикл
		
		НоваяСтрока = ПредполагаемыеУслуги.Добавить();
		НоваяСтрока.Клиент = Строка.Клиент;
		НоваяСтрока.ВредныйФактор = ВредныеФакторы.Найти(Строка.Клиент, "Клиент").ВредныйФактор;
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.Цена = Строка.Цена;
		НоваяСтрока.Контингент = СписокКлиентов.Найти(Строка.Клиент, "Клиент").Контингент;
		НоваяСтрока.Численность = СписокКлиентов.НайтиСтроки(Новый Структура("Клиент", Строка.Клиент))[0].Численность;
		НоваяСтрока.Действие = Строка.Действие;
		СуммаСметы = СуммаСметы + НоваяСтрока.Цена * НоваяСтрока.Численность; 
		
	КонецЦикла;
	
	ЗаполнитьТаблицуСметы(СписокКлиентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСмету(Команда)
	
	ЗаполнитьСметуНаСервере();
	ЭтаФорма.ТекущийЭлемент = Элементы.Смета;
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		СметаПриАктивизацииСтроки(ЭтаФорма.ТекущийЭлемент, Объект.Смета[0].Клиент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	
	Если ПофамильныйСписок Тогда
		Возврат Документы.СписокНаПрохождениеМедосмотра.ПечатьСметаМедицинскогоОсмотра(Неопределено, Истина, Истина, ПофамильныйСписокДанныеСметыНаПечать());	
	Иначе
		Возврат РеквизитФормыВЗначение("Объект").Печать(Объект, РеквизитФормыВЗначение("ПредполагаемыеУслуги", Тип("ТаблицаЗначений")), СуммаСметы, ВыводитьДействияМедосмотра, ПоказыватьУслугиСНулевойЦеной);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	
	СтруктураНаПечать = Новый Структура;
	СтруктураНаПечать.Вставить("ФормаИмя",		 "ОбщаяФорма.ПечатьДокументов");
	СтруктураНаПечать.Вставить("ОбъектПечати",	 Неопределено);
	СтруктураНаПечать.Вставить("ПечДокумент",	 ПечатьНаСервере());
	СтруктураНаПечать.Вставить("Заголовок",		 Заголовок);
	СтруктураНаПечать.Вставить("Защита",		 Ложь);
	СтруктураНаПечать.Вставить("ИмяМакета",		 "СметаМедосмотра");
	СтруктураНаПечать.Вставить("СинонимМакета",	 НСтр("ru='Смета медосмотра'"));
	СтруктураНаПечать.Вставить("ПолныйПутьКМакету", "");
	
	ПечатьДокументовКлиент.ВывестиНапечататьДокумент(СтруктураНаПечать, Неопределено, Ложь);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидМедосмотраПриИзменении(Элемент)
	
	Если ВидМедосмотра <> ТекущийВидМедосмотра Тогда
		ОповещениеПродолжения = Новый ОписаниеОповещения("ПродолжениеВидМедосмотраПриИзменении", ЭтотОбъект);
		Если ШаблонСДанными.ВысотаТаблицы > 1 Тогда
			ПоказатьВопрос(ОповещениеПродолжения, "Вид медосмотра был изменен, заполненные данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СметаПриАктивизацииСтроки(Элемент, Клиент = Неопределено)
	
	Если ЗначениеЗаполнено(ПредполагаемыеУслуги) Тогда
		
		Услуги.Очистить();	
        ТекущаяСумма = 0;
		Если ЗначениеЗаполнено(Клиент) Тогда
			ТекущийКлиент = Клиент;
		Иначе
			Если Элементы.Смета.ТекущиеДанные <> Неопределено Тогда
				ТекущийКлиент = Элементы.Смета.ТекущиеДанные.Клиент;
			Иначе
				ТекущийКлиент = Неопределено;
			КонецЕсли;
		КонецЕсли;
				
		Для Каждого Услуга Из ПредполагаемыеУслуги Цикл
			Если Услуга.Клиент = ТекущийКлиент 
				И (ВыводитьДействияМедосмотра Или ЗначениеЗаполнено(Услуга.Номенклатура)) 
				И Не (Не ПоказыватьУслугиСНулевойЦеной И Услуга.Цена = 0)	
			Тогда	
				НоваяСтрока = Услуги.Добавить();
				НоваяСтрока.Номенклатура = Услуга.Номенклатура; 
				НоваяСтрока.ДействиеМедосмотра = Услуга.Действие;
				НоваяСтрока.Цена = Услуга.Цена;
				НоваяСтрока.Сумма = Услуга.Цена * Услуга.Численность;
				ТекущаяСумма = ТекущаяСумма + НоваяСтрока.Сумма;
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипМедосмотраПриИзменении(Элемент)
	
	Если Объект.ТипМедосмотра <> ТекущийТипМедосмотра Тогда
		ОбработкаИзменениТипаМОИлиДаты("ТипМедосмотра");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата <> ТекущаяДатаНаФорме Тогда
		ОбработкаИзменениТипаМОИлиДаты("Дата");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрейскурантПриИзменении(Элемент)
	
	ОбработкаИзменениТипаМОИлиДаты("Прейскурант");
	
КонецПроцедуры

&НаКлиенте
Процедура ПофамильныйСписокПриИзменении(Элемент)

	ОповещениеПродолжения = Новый ОписаниеОповещения("ПродолжениеПофамильныйСписокПриИзменении", ЭтотОбъект);
	Если ШаблонСДанными.ВысотаТаблицы > 1 Тогда
		ПоказатьВопрос(ОповещениеПродолжения, "Заполненные данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУслугиСНулевойЦенойПриИзменении(Элемент)

	ЗаполнитьСмету(Неопределено);	
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыводитьДействияМедосмотраПриИзменении(Элемент)
	
	Элементы.УслугиДействиеМедосмотра.Видимость = ВыводитьДействияМедосмотра;
	Элементы.УслугиУслуга.Видимость = Не ВыводитьДействияМедосмотра;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Смета;
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		СметаПриАктивизацииСтроки(ЭтаФорма.ТекущийЭлемент, Элементы.Смета.ТекущиеДанные.Клиент);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Процедура ИнициализироватьНачальныеЗначения()
	ТекущийВидМедосмотра = ВидМедосмотра;
	ТекущаяДатаНаФорме = Объект.Дата;
	ТекущийТипМедосмотра = Объект.ТипМедосмотра;
	ТекущийПрейскурант = Объект.Прейскурант;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзменениТипаМОИлиДаты(НазваниеИзменяемогоЭлемента)
	
	ДопПараметры = Новый Структура("НазваниеИзменяемогоЭлемента", НазваниеИзменяемогоЭлемента);
	ОповещениеПродолжения = Новый ОписаниеОповещения("ПродолжениеОбработкаИзменениТипаМОИлиДаты", ЭтотОбъект, ДопПараметры);
	Если Объект.Смета.Количество() > 0 Тогда
		Если НазваниеИзменяемогоЭлемента = "Дата" Тогда
			НачалоСообщания = "Дата была изменена, ";
		ИначеЕсли НазваниеИзменяемогоЭлемента = "Прейскурант" Тогда
			НачалоСообщания = "Прейскурант был изменен, ";
		Иначе
			НачалоСообщания = "Тип медосмотра был изменен, ";
		КонецЕсли;		
		ПоказатьВопрос(ОповещениеПродолжения, НачалоСообщания + "данные будут пересчитаны. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Если НазваниеИзменяемогоЭлемента = "Дата" Тогда
			ТекущаяДатаНаФорме = Объект.Дата;
		ИначеЕсли НазваниеИзменяемогоЭлемента = "Прейскурант" Тогда
			ТекущийПрейскурант = Объект.Прейскурант;
		Иначе
			ТекущийВидМедосмотра = Объект.ТипМедосмотра;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВидМедосмотраПриИзменении(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Смета.Очистить();
		ТекущийВидМедосмотра = ВидМедосмотра;
		СтруктураДанныхОграничений = ПолучитьСписокОграниченийПоВидуМедосмотра(ВидМедосмотра);
		ЗаполнитьШаблонСДаннымиПоФорматуФайла();
	Иначе
		ВидМедосмотра = ТекущийВидМедосмотра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеОбработкаИзменениТипаМОИлиДаты(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Контекст.НазваниеИзменяемогоЭлемента = "Дата" Тогда
			ТекущаяДатаНаФорме = Объект.Дата;
		ИначеЕсли Контекст.НазваниеИзменяемогоЭлемента = "Прейскурант" Тогда
			ТекущийПрейскурант = Объект.Прейскурант;
		Иначе
			ТекущийТипМедосмотра = Объект.ТипМедосмотра;
		КонецЕсли;
		ЗаполнитьСмету(Неопределено);
	Иначе
		Если Контекст.НазваниеИзменяемогоЭлемента = "Дата" Тогда
			Объект.Дата = ТекущаяДатаНаФорме;
		ИначеЕсли Контекст.НазваниеИзменяемогоЭлемента = "Прейскурант" Тогда
			Объект.Прейскурант = ТекущийПрейскурант;
		Иначе
			Объект.ТипМедосмотра = ТекущийТипМедосмотра;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонСДаннымиПоФорматуФайла()
	
	ФорматФайла = ПолучитьФорматФайлаПоУмолчанию(СтруктураДанныхОграничений);
	
	
	ИнформацияПоКолонкам.Очистить();
	Табдок = Новый ТабличныйДокумент;
	Для Каждого СтрокаКолонка Из ФорматФайла.СписокКолонок Цикл
		НоваяСтрока = ИнформацияПоКолонкам.Добавить();
		НоваяСтрока.ИмяКолонки = СтрокаКолонка.ИмяКолонкиВФайле;
		НоваяСтрока.Колонка = СтрокаКолонка.Колонка;
		НоваяСтрока.ПредставлениеКолонки = СтрокаКолонка.ИмяКолонкиВФайле;
		НоваяСтрока.Позиция = СтрокаКолонка.НомерСтроки;
		Если СтрокаКолонка.Колонка = Перечисления.КолонкиФайлаДляЗагрузкиДанных.ДатаРождения Тогда
			НоваяСтрока.ТипКолонки = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты());	
		Иначе
			НоваяСтрока.ТипКолонки = Новый ОписаниеТипов("Строка",,,,,Новый КвалификаторыСтроки());		
		КонецЕсли;
		НоваяСтрока.Синоним = НоваяСтрока.ИмяКолонки;
		НоваяСтрока.Видимость = Истина;
		
		ОбластьКолонки = Табдок.Область(1,СтрокаКолонка.НомерСтроки);
		ОбластьКолонки.Текст = НоваяСтрока.ПредставлениеКолонки;
		ОбластьКолонки.Шрифт = Новый Шрифт(ОбластьКолонки.Шрифт, , , Истина);
		ОбластьКолонки.ШиринаКолонки = ?(ЗначениеЗаполнено(СтрокаКолонка.ШиринаКолонки),СтрокаКолонка.ШиринаКолонки, Макс(10, СтрДлина(НоваяСтрока.ПредставлениеКолонки)));
		
	КонецЦикла;
	ШаблонСДанными = Табдок;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФорматФайлаПоУмолчанию(СтруктураШапки)
	
	СписокКолонок = Новый ТаблицаЗначений;
	СписокКолонок.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	СписокКолонок.Колонки.Добавить("Колонка", Новый ОписаниеТипов("Строка"));
	СписокКолонок.Колонки.Добавить("ИмяКолонкиВФайле", Новый ОписаниеТипов("Строка")); 
	СписокКолонок.Колонки.Добавить("ШиринаКолонки", Новый ОписаниеТипов("Число"));
	
	СчетчикСтрок = 1;
	
	ТаблицаВредныхФакторовИПриказов.Очистить();
	
	Если ПофамильныйСписок Тогда
				
		// ФИО
		НоваяСтрока = СписокКолонок.Добавить();
		НоваяСтрока.НомерСтроки = СчетчикСтрок;	
		НоваяСтрока.Колонка = "ФИО";
		НоваяСтрока.ИмяКолонкиВФайле = "Фамилия, имя, отчество";
		НоваяСтрока.ШиринаКолонки = 50;
		СчетчикСтрок = СчетчикСтрок + 1;
		
		// Пол
		НоваяСтрока = СписокКолонок.Добавить();
		НоваяСтрока.НомерСтроки = СчетчикСтрок;	
		НоваяСтрока.Колонка = "Пол";
		НоваяСтрока.ИмяКолонкиВФайле = "Пол";	
		СчетчикСтрок = СчетчикСтрок + 1;
		
		// Дата рождения
		НоваяСтрока = СписокКолонок.Добавить();
		НоваяСтрока.НомерСтроки = СчетчикСтрок;	
		НоваяСтрока.Колонка = "ДатаРождения";
		НоваяСтрока.ИмяКолонкиВФайле = "Дата рождения";	
		СчетчикСтрок = СчетчикСтрок + 1;
	
	КонецЕсли;
	
	Для Каждого Эл Из ВидМедосмотра.Приказы Цикл
		Если ТипЗнч(Эл.Приказ) = Тип("СправочникСсылка.ПереченьВредныхФакторовИРабот") И Не Эл.НеИспользоватьБезВФ Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаВредныхФакторовИПриказов.Добавить();
		НоваяСтрока.ПриказИлиВредныйФактор = Эл.Приказ;
		ИмяКолонки = "ВредныеФакторыИУсловия" + СчетчикСтрок;
		НоваяСтрока.ИмяКолонки = ИмяКолонки;
		
		НоваяСтрока = СписокКолонок.Добавить();
		НоваяСтрока.НомерСтроки = СчетчикСтрок;
		НоваяСтрока.Колонка = ИмяКолонки;
		Если ТипЗнч(Эл.Приказ) = Тип("СправочникСсылка.ПереченьВредныхФакторовИРабот") Тогда
			НоваяСтрока.ИмяКолонкиВФайле = "Использовать " + Эл.Приказ.Наименование;
		Иначе
			НоваяСтрока.ИмяКолонкиВФайле = "Пункты вредности по приказу " + Эл.Приказ.Код;
		КонецЕсли;
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
			
	Если Не ПофамильныйСписок Тогда
		Для Каждого Эл Из СтруктураШапки Цикл
			
			НоваяСтрока = СписокКолонок.Добавить();
			НоваяСтрока.НомерСтроки = СчетчикСтрок;
			НоваяСтрока.Колонка = Эл.Ключ;
			НоваяСтрока.ИмяКолонкиВФайле = Эл.Значение.ИмяКонтингента;
			СчетчикСтрок = СчетчикСтрок + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("СписокКолонок", СписокКолонок);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеНомеровКолонок(Знач ИнформацияПоКолонкам)
	
	СоответствиеНомеровКолонок = Новый Соответствие;
	Для Каждого СтрокаКолонка Из ИнформацияПоКолонкам Цикл
		СоответствиеНомеровКолонок.Вставить(СтрокаКолонка.Колонка, ИнформацияПоКолонкам.Индекс(СтрокаКолонка) + 1);
	КонецЦикла;
	Возврат СоответствиеНомеровКолонок;
	
КонецФункции

&НаСервере
Функция СформироватьСписокКлиентов(ТипМедосмотра)
	
	СписокКлиентов = Новый ТаблицаЗначений;
	СписокКлиентов.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты")); 
	СписокКлиентов.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
	СписокКлиентов.Колонки.Добавить("ТипМедосмотра", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыМедосмотров"));
	СписокКлиентов.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	СписокКлиентов.Колонки.Добавить("Возраст", Новый ОписаниеТипов("Число"));
	СписокКлиентов.Колонки.Добавить("Контингент", Новый ОписаниеТипов("Строка"));
	СписокКлиентов.Колонки.Добавить("Вредности", Новый ОписаниеТипов("Строка"));
	СписокКлиентов.Колонки.Добавить("Численность", Новый ОписаниеТипов("Строка"));

	СоответствиеНомеровКолонок = ПолучитьСоответствиеНомеровКолонок(ИнформацияПоКолонкам);
	
	Если ПофамильныйСписок Тогда
		СформироватьСписокКлиентовПофамильныйСписок(СписокКлиентов, СоответствиеНомеровКолонок, ТипМедосмотра);	
	Иначе
		СформироватьСписокКлиентовПоКонтингенту(СписокКлиентов, СоответствиеНомеровКолонок, ТипМедосмотра);	
	КонецЕсли;	
	
	Возврат СписокКлиентов;
	
КонецФункции

&НаСервере
Процедура СформироватьСписокКлиентовПоКонтингенту(СписокКлиентов, СоответствиеНомеровКолонок, ТипМедосмотра)
	
	Для Счетчик = 2 По ШаблонСДанными.ВысотаТаблицы Цикл
		
		Для Каждого Эл Из СтруктураДанныхОграничений Цикл
			
			КоличествоКонтингентаСтрокой = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок.Получить(Эл.Ключ)).Текст;
			Попытка 
				КоличествоКонтингента = Число(КоличествоКонтингентаСтрокой);
			Исключение
				КоличествоКонтингента = 0;
			КонецПопытки;
			
			Если Не КоличествоКонтингента > 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СписокКлиентов.Добавить();
			НоваяСтрока.Клиент = КлиентУникальнаяСсылка();
			НоваяСтрока.ТипМедосмотра = ТипМедосмотра;
			НоваяСтрока.Пол = Эл.Значение.Пол;
			НоваяСтрока.Возраст = Эл.Значение.Возраст;
			//НоваяСтрока.Вредности = ШаблонСДанными.Область(Счетчик,СоответствиеНомеровКолонок.Получить("ВредныеФакторыИУсловия")).Текст;
			НоваяСтрока.Вредности = СформироватьСтрокуВредностей(СоответствиеНомеровКолонок, Счетчик);
			
			НоваяСтрока.Контингент = Эл.Значение.ИмяКонтингента;
			НоваяСтрока.Численность = КоличествоКонтингента;
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокКлиентовПофамильныйСписок(СписокКлиентов, СоответствиеНомеровКолонок, ТипМедосмотра)

	ИндексКолонкиФИО = СоответствиеНомеровКолонок.Получить("ФИО");
	ИндексКолонкиПол = СоответствиеНомеровКолонок.Получить("Пол");
	ИндексКолонкиДатаРождения = СоответствиеНомеровКолонок.Получить("ДатаРождения");
	
	Для Счетчик = 2 По ШаблонСДанными.ВысотаТаблицы Цикл
		
		ФИО = ШаблонСДанными.Область(Счетчик,ИндексКолонкиФИО).Текст;
		ТекстПол = ВРег(Лев(СокрЛ(ШаблонСДанными.Область(Счетчик,ИндексКолонкиПол).Текст), 1));
		Если ТекстПол = "М" Тогда
			Пол = Перечисления.ПолФизическихЛиц.Мужской;	
		ИначеЕсли ТекстПол = "Ж" Тогда
			Пол = Перечисления.ПолФизическихЛиц.Женский;	
		Иначе
			Пол = Неопределено;	
		КонецЕсли;
		ТекстДатаРождения = СокрЛП(ШаблонСДанными.Область(Счетчик,ИндексКолонкиДатаРождения).Текст);
		ДатаРождения = ОбщегоНазначенияКлиентСервер.ПолучитьДатуИзСтроки(ТекстДатаРождения);
		
		НоваяСтрока = СписокКлиентов.Добавить();
		НоваяСтрока.Клиент = КлиентУникальнаяСсылка(); 
		НоваяСтрока.Контингент = ФИО;
		НоваяСтрока.ТипМедосмотра = ТипМедосмотра;
		НоваяСтрока.Пол = Пол;
		Если ДатаРождения <> Неопределено Тогда	
			НоваяСтрока.ДатаРождения = ДатаРождения;
			НоваяСтрока.Возраст = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеЧислоЛетСДаты(ДатаРождения, ТекущаяДата());
		КонецЕсли;
		НоваяСтрока.Вредности = СформироватьСтрокуВредностей(СоответствиеНомеровКолонок, Счетчик);
		НоваяСтрока.Численность = 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция СформироватьСтрокуВредностей(СоответствиеНомеровКолонок, СчСтроки)
	
	СтрокаВозврата = "";
	
	Для Каждого Приказ Из ТаблицаВредныхФакторовИПриказов Цикл
		
		ТекстКолонки = ШаблонСДанными.Область(СчСтроки,СоответствиеНомеровКолонок.Получить(Приказ.ИмяКолонки)).Текст;
		Если Не ЗначениеЗаполнено(ТекстКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		Вредности = СтрокаВредностейВМассив(ТекстКолонки);
		Для Каждого Вредность Из Вредности Цикл
			Если ТипЗнч(Приказ.ПриказИлиВредныйФактор) = Тип("СправочникСсылка.ПриказыМедосмотров") Тогда
				Если ЗначениеЗаполнено(СтрокаВозврата) Тогда
					СтрокаВозврата = СтрокаВозврата + ", " + Приказ.ПриказИлиВредныйФактор.Код + "_" + Вредность;
				Иначе
					СтрокаВозврата = Приказ.ПриказИлиВредныйФактор.Код + "_" + Вредность;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Вредность) Тогда
					Если ЗначениеЗаполнено(СтрокаВозврата) Тогда
						СтрокаВозврата = СтрокаВозврата + ", " + Приказ.ПриказИлиВредныйФактор.Приказ.Код + "_" + Приказ.ПриказИлиВредныйФактор.НомерПП;
					Иначе
						СтрокаВозврата = Приказ.ПриказИлиВредныйФактор.Приказ.Код + "_" + Приказ.ПриказИлиВредныйФактор.НомерПП;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокаВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлиентУникальнаяСсылка()
	
	Возврат Справочники.Клиенты.ПолучитьСсылку(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция РазложитьВредныеФакторы(СписокКлиентов)

	ВредныеФакторы = Новый ТаблицаЗначений;
	ВредныеФакторы.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
	ВредныеФакторы.Колонки.Добавить("ВредныйФактор", Новый ОписаниеТипов("СправочникСсылка.ПереченьВредныхФакторовИРабот"));
	ВредныеФакторы.Колонки.Добавить("Пол", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическихЛиц"));
	ВредныеФакторы.Колонки.Добавить("Возраст", Новый ОписаниеТипов("Число"));
	ВредныеФакторы.Колонки.Добавить("ТипМедосмотра", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыМедосмотров"));
	ВредныеФакторы.Колонки.Добавить("Контингент", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из СписокКлиентов Цикл
		
		МассивВредностей = СтрокаВредностейВМассив(Строка.Вредности);
		
		Для Каждого Фактор Из МассивВредностей Цикл
			
			ВредныйФактор = НайтиВредныйФактор(Фактор);
			Если ВредныйФактор.Пустая() Тогда
				Возврат Фактор;
			КонецЕсли;
			НоваяСтрока = ВредныеФакторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВредныйФактор = ВредныйФактор;
			
			// Заполняем данные клиента для печати
			Если ПофамильныйСписок Тогда
				СтрокаДанныхКлиента = ДанныеКлиентовИФакторы.Добавить();
				СтрокаДанныхКлиента.Клиент = Строка.Клиент;
				СтрокаДанныхКлиента.ВредныйФактор = ВредныйФактор;
				СтрокаДанныхКлиента.ФИО = Строка.Контингент;
				СтрокаДанныхКлиента.ДатаРождения = Строка.ДатаРождения;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат ВредныеФакторы;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиВредныйФактор(Фактор)
	
	КодПриказа = Лев(Фактор, СтрНайти(Фактор, "_") - 1);
	НомерПункта = Прав(Фактор, СтрДлина(Фактор) - СтрНайти(Фактор, "_"));
	СтруктураОтбора = Новый Структура("КодПриказа, НомерПункта", КодПриказа, НомерПункта);
	
	Если Не ЗначениеЗаполнено(КодПриказа) Тогда
		ПриказПоКоду = Справочники.ПриказыМедосмотров.Приказ29н;
	Иначе
		ПриказПоКоду = Справочники.ПриказыМедосмотров.НайтиПоКоду(КодПриказа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПриказПоКоду) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереченьВредныхФакторовИРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
		|ГДЕ                                        
		|	ПереченьВредныхФакторовИРабот.НомерПП = &НомерПП
		|	И ПереченьВредныхФакторовИРабот.Приказ = &Приказ";
		
		Запрос.УстановитьПараметр("НомерПП", НомерПункта);
		Запрос.УстановитьПараметр("Приказ", ПриказПоКоду);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаВредныйФактор = РезультатЗапроса.Выбрать();
		
		
		Если ВыборкаВредныйФактор.Следующий() Тогда
			Возврат ВыборкаВредныйФактор.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ПереченьВредныхФакторовИРабот.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуСметы(СписокКлиентов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПредполагаемыеУслуги.Цена КАК Цена,
	               |	ВЫРАЗИТЬ(ПредполагаемыеУслуги.Контингент КАК СТРОКА(25)) КАК Контингент,
	               |	ПредполагаемыеУслуги.Клиент КАК Клиент,
	               |	ПредполагаемыеУслуги.Численность КАК Численность
	               |ПОМЕСТИТЬ ПредполагаемыеУслуги
	               |ИЗ
	               |	&ПредполагаемыеУслуги КАК ПредполагаемыеУслуги
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПредполагаемыеУслуги.Контингент КАК Контингент,
	               |	СУММА(ПредполагаемыеУслуги.Цена) КАК СуммаЦена,
	               |	ПредполагаемыеУслуги.Клиент КАК Клиент,
	               |	ПредполагаемыеУслуги.Численность КАК Численность,
	               |	СУММА(ПредполагаемыеУслуги.Цена * ПредполагаемыеУслуги.Численность) КАК Сумма
	               |ИЗ
	               |	ПредполагаемыеУслуги КАК ПредполагаемыеУслуги
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПредполагаемыеУслуги.Контингент,
	               |	ПредполагаемыеУслуги.Клиент,
	               |	ПредполагаемыеУслуги.Численность";
	
	Запрос.УстановитьПараметр("ПредполагаемыеУслуги", РеквизитФормыВЗначение("ПредполагаемыеУслуги", Тип("ТаблицаЗначений")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПорядокКолонок = ПолучитьФорматФайлаПоУмолчанию(СтруктураДанныхОграничений);
	
	Пока Выборка.Следующий() Цикл
		Фактор = СписокКлиентов.Найти(Выборка.Клиент, "Клиент").Вредности; 
		Если Выборка.Численность > 0 
			И Не (Не ПоказыватьУслугиСНулевойЦеной И Выборка.Сумма = 0)
		Тогда	
			НоваяСтрока = Объект.Смета.Добавить();
			НоваяСтрока.Контингент = СокрЛП(Выборка.Контингент);
			НоваяСтрока.Численность = Выборка.Численность;
			НоваяСтрока.ВредныйФактор = Фактор;
			НоваяСтрока.ЦенаЗаСотрудника = Выборка.СуммаЦена;
			НоваяСтрока.Сумма = Выборка.Сумма;
			НоваяСтрока.Клиент = Выборка.Клиент;
			Если Не ПофамильныйСписок Тогда
				НоваяСтрока.ПорядокКонтингента = ПорядокКолонок.СписокКолонок.Найти(НоваяСтрока.Контингент, "ИмяКолонкиВФайле").НомерСтроки; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Смета.Сортировать("ВредныйФактор,ПорядокКонтингента ВОЗР");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаВредностейВМассив(Знач СтрокаВредностей)
	
	// Если список вредностей заканчивается на точку или т.д., то удаляем её
	УдаляемыеПоследние = ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(".");
	Если УдаляемыеПоследние.Найти(Прав(СтрокаВредностей, 1)) <> Неопределено Тогда
		СтрокаВредностей = Сред(СтрокаВредностей, 1, СтрДлина(СтрокаВредностей)-1);
	КонецЕсли;
	
	Возврат СтрРазделить(СтрЗаменить(СтрЗаменить(СтрокаВредностей, ";", ","), " ", ""), ",", Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОграниченийПоВидуМедосмотра(ВидМедосмотра)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыМедосмотровПриказы.Приказ КАК Приказ
		|ПОМЕСТИТЬ ПриказыМО
		|ИЗ
		|	Справочник.ВидыМедосмотров.Приказы КАК ВидыМедосмотровПриказы
		|ГДЕ
		|	ВидыМедосмотровПриказы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриказыМО.Приказ) = ТИП(Справочник.ПереченьВредныхФакторовИРабот)
		|			ТОГДА ПриказыМО.Приказ
		|		ИНАЧЕ ПереченьВредныхФакторовИРабот.Ссылка
		|	КОНЕЦ КАК Ссылка
		|ПОМЕСТИТЬ ПереченьВредныхФакторов
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот КАК ПереченьВредныхФакторовИРабот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриказыМО КАК ПриказыМО
		|		ПО (ПереченьВредныхФакторовИРабот.Приказ = ПриказыМО.Приказ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ПриказыМО.Приказ) = ТИП(Справочник.ПереченьВредныхФакторовИРабот))
		|			И (ПереченьВредныхФакторовИРабот.ПометкаУдаления = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ограничение = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|				ИЛИ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ограничение = НЕОПРЕДЕЛЕНО
		|			ТОГДА ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия
		|		ИНАЧЕ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ограничение
		|	КОНЕЦ КАК Ограничение
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.ЛабораторныеИФункциональныеИсследования КАК ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПереченьВредныхФакторов КАК ПереченьВредныхФакторов
		|		ПО ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ссылка = ПереченьВредныхФакторов.Ссылка
		|ГДЕ
		|	НЕ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.ПоРекомендации
		|	И ВЫБОР
		|			КОГДА ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ограничение = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|					ИЛИ ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Ограничение = НЕОПРЕДЕЛЕНО
		|				ТОГДА ПереченьВредныхФакторовИРаботЛабораторныеИФункциональныеИсследования.Исследование.ОграничениеДействия <> ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ПереченьВредныхФакторовИРаботВрачи.Ограничение = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|				ИЛИ ПереченьВредныхФакторовИРаботВрачи.Ограничение = НЕОПРЕДЕЛЕНО
		|			ТОГДА ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия
		|		ИНАЧЕ ПереченьВредныхФакторовИРаботВрачи.Ограничение
		|	КОНЕЦ
		|ИЗ
		|	Справочник.ПереченьВредныхФакторовИРабот.Врачи КАК ПереченьВредныхФакторовИРаботВрачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПереченьВредныхФакторов КАК ПереченьВредныхФакторов
		|		ПО ПереченьВредныхФакторовИРаботВрачи.Ссылка = ПереченьВредныхФакторов.Ссылка
		|ГДЕ
		|	НЕ ПереченьВредныхФакторовИРаботВрачи.ПоРекомендации
		|	И ВЫБОР
		|			КОГДА ПереченьВредныхФакторовИРаботВрачи.Ограничение = ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|					ИЛИ ПереченьВредныхФакторовИРаботВрачи.Ограничение = НЕОПРЕДЕЛЕНО
		|				ТОГДА ПереченьВредныхФакторовИРаботВрачи.Врач.ОграничениеДействия <> ЗНАЧЕНИЕ(Справочник.ОграниченияДействийМедосмотра.ПустаяСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", ВидМедосмотра);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ОграниченияСводно = Новый Структура("Мужчины, Женщины, БезПола");
	ОграниченияСводно.Мужчины = Новый Массив;
	ОграниченияСводно.Женщины = Новый Массив;
	ОграниченияСводно.БезПола = Новый Массив;
	
	ЕстьРазграничениеПоПолу = Ложь;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ограничение = ВыборкаДетальныеЗаписи.Ограничение;
		Если ЗначениеЗаполнено(Ограничение.Возраст) 
			ИЛИ Ограничение.Пол <> Перечисления.ПолФизическихЛиц.ПустаяСсылка() 
		Тогда
			Если ЗначениеЗаполнено(Ограничение.Пол) Тогда
				Если Не ЕстьРазграничениеПоПолу Тогда
					ЕстьРазграничениеПоПолу = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(Ограничение.Возраст) Тогда
					Если Ограничение.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
						 ОграниченияСводно.Мужчины.Добавить(Ограничение.Возраст);
					ИначеЕсли Ограничение.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
						 ОграниченияСводно.Женщины.Добавить(Ограничение.Возраст);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ОграниченияСводно.БезПола.Добавить(Ограничение.Возраст);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураКонтингента = Новый Структура;
	
	Если ЕстьРазграничениеПоПолу Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияСводно.Мужчины, ОграниченияСводно.БезПола);
		
		Если ОграниченияСводно.Мужчины.Количество() > 0 Тогда
			ЗаполнитьМассивКонтингентаПоМассивуОграничений(СтруктураКонтингента, ОграниченияСводно.Мужчины, Перечисления.ПолФизическихЛиц.Мужской);
		Иначе
			МассивКонтингентаДобавитьСтроку(СтруктураКонтингента, "Мужчин", Перечисления.ПолФизическихЛиц.Мужской, 18);
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияСводно.Женщины, ОграниченияСводно.БезПола);
		
		Если ОграниченияСводно.Женщины.Количество() > 0 Тогда
			ЗаполнитьМассивКонтингентаПоМассивуОграничений(СтруктураКонтингента, ОграниченияСводно.Женщины, Перечисления.ПолФизическихЛиц.Женский);
		Иначе
			МассивКонтингентаДобавитьСтроку(СтруктураКонтингента, "Женщин", Перечисления.ПолФизическихЛиц.Женский, 18);
		КонецЕсли;
		
	Иначе
		ЗаполнитьМассивКонтингентаПоМассивуОграничений(СтруктураКонтингента, ОграниченияСводно.БезПола, Неопределено);
	КонецЕсли;
	
	Если СтруктураКонтингента.Количество() = 0 Тогда
		МассивКонтингентаДобавитьСтроку(СтруктураКонтингента, "Количество человек", Перечисления.ПолФизическихЛиц.Мужской, 0);
	КонецЕсли;
	
	Возврат СтруктураКонтингента; 
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьМассивКонтингентаПоМассивуОграничений(СтруктураКонтингента, МассивИсходный, Пол)
	
	Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		ПолСтрокой = "Мужчины";
	ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда 
		ПолСтрокой = "Женщины";
	Иначе
		ПолСтрокой = "Количество ";
		Пол = Перечисления.ПолФизическихЛиц.Мужской; 
	КонецЕсли;
	
	МассивИсходный = ОтсортироватьМассив(МассивИсходный);
	Для Каждого Эл Из МассивИсходный Цикл 
		
		Если МассивИсходный.Найти(Эл) = 0 Тогда
			ИмяКонтингента = ПолСтрокой + " младше " + Эл;
			МассивКонтингентаДобавитьСтроку(СтруктураКонтингента, ИмяКонтингента, Пол, Эл - 1)
		КонецЕсли;
		
		ИмяКонтингента = ПолСтрокой + " старше " + Эл;
		МассивКонтингентаДобавитьСтроку(СтруктураКонтингента, ИмяКонтингента, Пол, Эл)
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура МассивКонтингентаДобавитьСтроку(СтруктураКонтингента, ИмяКонтингента, Пол, Возраст)
	
	СтруктураДанных = Новый Структура("Ключ, ИмяКонтингента, Возраст, Пол");
	СтруктураДанных.Ключ = Строка(Новый УникальныйИдентификатор);
	СтруктураДанных.ИмяКонтингента = ИмяКонтингента;
	СтруктураДанных.Пол = Пол;
	СтруктураДанных.Возраст = Возраст;
	Если Не ИмеетсяОграничениеВМассиве(СтруктураКонтингента, СтруктураДанных.Пол, СтруктураДанных.Возраст) Тогда
		Ключ = "u" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		СтруктураКонтингента.Вставить(Ключ, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмеетсяОграничениеВМассиве(СтруктураКонтингента, Пол, Возраст)
	
	Для Каждого Эл Из СтруктураКонтингента Цикл
		Если Эл.Значение.Пол = Пол И Эл.Значение.Возраст = Возраст Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтсортироватьМассив(Массив)
	
	Список = Новый СписокЗначений; 
	Список.ЗагрузитьЗначения(Массив);
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Массив = Список.ВыгрузитьЗначения();
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура НастроитьКолонкиТаблицы()
	
	Элементы.СметаКонтингент.Заголовок = ?(ПофамильныйСписок, "ФИО", "Контингент");
	Элементы.СметаКоличествоЧеловек.Видимость = Не ПофамильныйСписок;  
	Элементы.СметаЦенаЗаСотрудника.Видимость = Не ПофамильныйСписок;
	
КонецПроцедуры

&НаСервере
Функция ПофамильныйСписокДанныеСметыНаПечать()

	ДанныеСметы = Новый Структура("ТаблицаДействий, ТаблицаФакторов, ДанныеКлиентов");
		
	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
	ТаблицаДействий.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаДействий.Колонки.Добавить("НаименованиеДляПечати", Новый ОписаниеТипов("Строка"));
	ТаблицаДействий.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	
	ТаблицаФакторов = Новый ТаблицаЗначений;
	ТаблицаФакторов.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
	ТаблицаФакторов.Колонки.Добавить("ВредныйФактор", Новый ОписаниеТипов("СправочникСсылка.ПереченьВредныхФакторовИРабот"));
	ТаблицаФакторов.Колонки.Добавить("НомерПП", Новый ОписаниеТипов("Строка"));
	
	ДанныеКлиентов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ПредполагаемыеУслуги Цикл 
		Если (ВыводитьДействияМедосмотра Или ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура))
			И Не (Не ПоказыватьУслугиСНулевойЦеной И СтрокаТаблицы.Цена = 0)	
		Тогда
			СтрокаДействий = ТаблицаДействий.Добавить();
			СтрокаДействий.Клиент = СтрокаТаблицы.Клиент;
			Если ВыводитьДействияМедосмотра Тогда
				СтрокаДействий.Наименование = Строка(СтрокаТаблицы.Действие);
				СтрокаДействий.НаименованиеДляПечати = СтрокаТаблицы.Действие.НаименованиеДляПечати; 
			Иначе
				СтрокаДействий.Наименование = Строка(СтрокаТаблицы.Номенклатура);
				СтрокаДействий.НаименованиеДляПечати = СтрокаТаблицы.Номенклатура.НаименованиеПолное; 	
			КонецЕсли;
			СтрокаДействий.Цена = СтрокаТаблицы.Цена;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеКлиентовИФакторы Цикл 
		
		Если ДанныеКлиентов.Получить(СтрокаТаблицы.Клиент) = Неопределено Тогда
			ДанныеКлиента = Новый Структура("ФИО, ДатаРождения");
			ДанныеКлиента.ФИО = СтрокаТаблицы.ФИО; 
			ДанныеКлиента.ДатаРождения = Формат(СтрокаТаблицы.ДатаРождения, "ДФ=dd.MM.yyyy");
			ДанныеКлиентов.Вставить(СтрокаТаблицы.Клиент, ДанныеКлиента);		
		КонецЕсли;

		СтрокаФактора = ТаблицаФакторов.Добавить();
		СтрокаФактора.Клиент = СтрокаТаблицы.Клиент;
		СтрокаФактора.ВредныйФактор = СтрокаТаблицы.ВредныйФактор;
		СтрокаФактора.НомерПП = СтрокаТаблицы.ВредныйФактор.НомерПП;
		ТекущийФактор = СтрокаТаблицы.ВредныйФактор;
		ТекущийКлиент = СтрокаТаблицы.Клиент;
		
	КонецЦикла;
	
	ДанныеСметы.ТаблицаДействий = ТаблицаДействий;
	ДанныеСметы.ТаблицаФакторов = ТаблицаФакторов;
	ДанныеСметы.ДанныеКлиентов = ДанныеКлиентов;
	
	Возврат ДанныеСметы;
	
КонецФункции

&НаКлиенте
Процедура ПродолжениеПофамильныйСписокПриИзменении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьШаблонСДаннымиПоФорматуФайла();
		НастроитьКолонкиТаблицы();
		
		Объект.Смета.Очистить();
		Услуги.Очистить();
		
	Иначе
		ПофамильныйСписок = Не ПофамильныйСписок;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти