#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ЗаказНаПроизводство", Перечисления.ТипыКомплексныхРасчетовКлиентов.ПроизводственныйРасчет);
	СостоянияЗаказов.Параметры.УстановитьЗначениеПараметра("Состояние", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененСтатусЗаказа" Тогда
		Элементы.СостоянияЗаказовПринят.Обновить();
		Элементы.СостоянияЗаказовПереданВМастерскую.Обновить();
		Элементы.СостоянияЗаказовПолученИзМастерской.Обновить();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СостоянияЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	// Добавлять новое состояние можно только если выбран заказ.
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Заказ", ТекущиеДанные.Заказ));
		ОткрытьФорму("РегистрСведений.СостоянияЗаказовНаИзготовление.ФормаЗаписи", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЗаказовПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда
		Отказ = Истина;
		Предупреждение("Отмена состояний, установленных документами, возможно только путём их распроведения.", 30);
		ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Документ) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ТекДанные.Документ);
	Иначе
		СтруктураКлюча = Новый Структура("Заказ, Документ, Период", ТекДанные.Заказ, ТекДанные.Документ, ТекДанные.Период);
		КлючЗаписи = ПолучитьКлючЗаписиИзмененияСостоянияЗаказа(СтруктураКлюча);
		ОткрытьФорму("РегистрСведений.СостоянияЗаказовНаИзготовление.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписи));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборСписка();
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	Если Не ЗначениеЗаполнено(ТекИмяСпискаСостояний) Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы[ТекИмяСпискаСостояний].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		ОткрытьЗначение(ТекДанные.Заказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьСтороннейМастерской(Команда)
	
	ТекДанные = Элементы[ТекИмяСпискаСостояний].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	    
	Форма = ОткрытьФорму("Документ.ПередачаЗаказаВМастерскую.ФормаОбъекта", Новый Структура("Основание", ТекДанные.Заказ));
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСледующему(Команда)
	
	Если Не ЗначениеЗаполнено(ТекИмяСпискаСостояний) Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы[ТекИмяСпискаСостояний].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСостояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказов.ПереданВМастерскую") Тогда
		
		СоздатьПриемИзВнешнейМастерской = Ложь;
		Если ЗначениеЗаполнено(ТекДанные.Документ) Тогда
			СоздатьПриемИзВнешнейМастерской = ТипЗнч(ТекДанные.Документ) = Тип("ДокументСсылка.ПередачаЗаказаВМастерскую");
		Иначе
			СоздатьПриемИзВнешнейМастерской = Ложь;
			//ВариантыОтвета = Новый СписокЗначений;
			//ВариантыОтвета.Добавить(Ложь, "Внутренняя мастерская");
			//ВариантыОтвета.Добавить(Истина, "Внешняя мастерская");
			//
			// Ответ = Вопрос("Укажите вид мастерской (своя или сторонняя)", ВариантыОтвета, 15, Ложь);
			//Если Ответ = Неопределено
			//	Или Ответ = КодВозвратаДиалога.Таймаут
			//Тогда
			//	Возврат;
			//Иначе
			//	СоздатьПриемИзВнешнейМастерской = Ответ;
			//КонецЕсли;
		КонецЕсли;
		
		Если СоздатьПриемИзВнешнейМастерской Тогда
			ПараметрыФормы = Новый Структура("Основание", ТекДанные.Документ);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Заказ", ТекДанные.Заказ));
			ОткрытьФорму("Документ.ПриемЗаказаИзМастерской.ФормаОбъекта", ПараметрыФормы);
		Иначе
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ДокументОснование", ТекДанные.Заказ));
			ОткрытьФорму("Документ.ВыполнениеЗаказа.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ТекСостояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказов.ПолученИзМастерской") Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеЗаказа = ПолучитьДанныеЗаказаДляСозданияОказанияУслуг(ТекДанные.Заказ);
		
		Ответ = 2;
		Если ДанныеЗаказа.ЗаказНоменклатура.Количество() = 0 Тогда
			ВариантыОтвета = Новый СписокЗначений;
			ВариантыОтвета.Добавить(1, "Только изменить статус");
			ВариантыОтвета.Добавить(2, "Создать Оказание услуг");
			ВариантыОтвета.Добавить(3, КодВозвратаДиалога.Отмена);
			Ответ = Вопрос(	"На все позиции заказа уже была оформлена продажа. 
							|Изменить статус заказа без создания документа продажи?", ВариантыОтвета, 30, 1,,КодВозвратаДиалога.Отмена);
		КонецЕсли;
		
		Если Ответ = 1 Тогда
			УправлениеЗаказами.СоздатьЗаписьИзмененияСостоянияЗаказа(ТекДанные.Заказ, ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказов.УКлиента"));
			Элементы[ТекИмяСпискаСостояний].Обновить();
		ИначеЕсли Ответ = 2 Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РучноеРедактированиеСкидок", Истина);
			ПараметрыФормы.Вставить("Клиент", ДанныеЗаказа.ЗаказКлиент);
			ПараметрыФормы.Вставить("КомплексныйРасчет", ТекДанные.Заказ);
			 			
			Товары = Новый Массив;
			Работы = Новый Массив;
			Сч = 1;
			КлючУслуга = 0;
			КлючТовар = 0;  
			Для Каждого СтрокаЗаказа Из ДанныеЗаказа.ЗаказНоменклатура Цикл
				
				СтрокаЗаказа.Вставить("Ключ", Сч);
				Сч = Сч + 1;
				
				Если СтрокаЗаказа.ВидНоменклатурыСтрока = "Услуга" Тогда
					СтрокаЗаказа.Вставить("КлючСтроки", Работы.Количество() + 1);
					Работы.Добавить(СтрокаЗаказа);
				ИначеЕсли СтрокаЗаказа.ВидНоменклатурыСтрока = "Товар" Тогда
					СтрокаЗаказа.Вставить("КлючСтроки", Товары.Количество() + 1);
					Товары.Добавить(СтрокаЗаказа);
				Иначе
					Продолжить; // Игнорируем не товары и не услуги.
				КонецЕсли;
			КонецЦикла; 
			ПараметрыФормы.Вставить("Товары", Товары);
			ПараметрыФормы.Вставить("Работы", Работы);
			
			ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ПараметрыФормы));
			
		КонецЕсли;
		
	ИначеЕсли ТекСостояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказов.ВозвращенПоГарантии") Тогда
		
		ДанныеВыполнения = ПолучитьПоследнееВыполнениеВМастерской(ТекДанные.Заказ);
		СоздатьПеремещениеВоВнешнююМастерскую = Ложь;
		
		Если ТипЗнч(ДанныеВыполнения) = Тип("Структура") Тогда
			СоздатьПеремещениеВоВнешнююМастерскую = ТипЗнч(ДанныеВыполнения.Документ) = Тип("ДокументСсылка.ПриемЗаказаИзМастерской")
		Иначе
			ВариантыОтвета = Новый СписокЗначений;
			ВариантыОтвета.Добавить(Ложь, "Внутренняя мастерская");
			ВариантыОтвета.Добавить(Истина, "Внешняя мастерская");
			
			СоздатьПеремещениеВоВнешнююМастерскую = Вопрос("Укажите вид мастерской (своя или сторонняя)", ВариантыОтвета, 15, Ложь);
		КонецЕсли;
			
		Если СоздатьПеремещениеВоВнешнююМастерскую Тогда
			ЗначенияЗаполнения = Новый Структура("Заказ", ТекДанные.Заказ);
			Если ДанныеВыполнения <> Неопределено Тогда
				ЗначенияЗаполнения.Вставить("Контрагент", ДанныеВыполнения.Контрагент);
			КонецЕсли;
			ОткрытьФорму("Документ.ПередачаЗаказаВМастерскую.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		Иначе
			УправлениеЗаказами.СоздатьЗаписьИзмененияСостоянияЗаказа(ТекДанные.Заказ, ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказов.ПереданВМастерскую"));
			Элементы[ТекИмяСпискаСостояний].Обновить();
		КонецЕсли;
		
	Иначе
		ФормаЗаписиСостояния = ПолучитьФорму("РегистрСведений.СостоянияЗаказовНаИзготовление.ФормаЗаписи");
		ЗаполнитьЗначенияСвойств(ФормаЗаписиСостояния.Запись, ТекДанные);
		ФормаЗаписиСостояния.Запись.Период = ТекущаяДата();
		ФормаЗаписиСостояния.Запись.Документ = Неопределено;
		ФормаЗаписиСостояния.Запись.Состояние = ПолучитьСледующееСостояниеЗаказа(ТекСостояние);
		ФормаЗаписиСостояния.Открыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура УстановитьОтборСписка()
	
	ТекСтраница = Элементы.ГруппаЗакладки.ТекущаяСтраница;
	
	Если ТекСтраница = Элементы.ГруппаЗаказы Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСостояния = СтрЗаменить(ТекСтраница.Имя, "Группа", "");
	ТекСостояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказов." + ИмяСостояния);
	ТекИмяСпискаСостояний = "СостоянияЗаказов" + СтрЗаменить(ТекСтраница.Имя, "Группа", "");
	СостоянияЗаказов.Параметры.УстановитьЗначениеПараметра("Состояние", ТекСостояние);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСледующееСостояниеЗаказа(Состояние)
	
	Если Состояние = Справочники.ВидыСостоянийЗаказов.Принят Или Состояние = Справочники.ВидыСостоянийЗаказов.ВозвращенПоГарантии Тогда
		Возврат Справочники.ВидыСостоянийЗаказов.ПереданВМастерскую;
	ИначеЕсли Состояние = Справочники.ВидыСостоянийЗаказов.Черновик Тогда
		Возврат Справочники.ВидыСостоянийЗаказов.Принят;
	ИначеЕсли Состояние = Справочники.ВидыСостоянийЗаказов.УКлиента Тогда
		Возврат Справочники.ВидыСостоянийЗаказов.ВозвращенПоГарантии;
	Иначе
		Возврат Справочники.ВидыСостоянийЗаказов.Отменен;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнееВыполнениеВМастерской(Заказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Состояние", Справочники.ВидыСостоянийЗаказов.ПолученИзМастерской);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЗаказовНаИзготовление.Документ,
	|	СостоянияЗаказовНаИзготовление.Документ.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовНаИзготовление КАК СостоянияЗаказовНаИзготовление
	|ГДЕ
	|	СостоянияЗаказовНаИзготовление.Заказ = &Заказ
	|	И СостоянияЗаказовНаИзготовление.Состояние = &Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияЗаказовНаИзготовление.Период УБЫВ"
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Документ, Контрагент", Выборка.Документ, Выборка.Контрагент);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаказаДляСозданияОказанияУслуг(Заказ)
	
	ДанныеЗаказа = Новый Структура;
	
	ДанныеЗаказа.Вставить("ЗаказНоменклатура",	КомплексныеРасчетыКлиентов.ПолучитьОстаткиКомплексногоРасчета(Заказ));
	ДанныеЗаказа.Вставить("ЗаказКлиент",		ОбщегоНазначения.ПолучитьЗначениеРеквизита(Заказ, "Клиент"));
	ДанныеЗаказа.Вставить("ЗаказСумма",			УправлениеЗаказами.ПолучитьСуммаЗаказа(Заказ));
	
	Возврат ДанныеЗаказа;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиИзмененияСостоянияЗаказа(СтруктураКлюча)
	
	Возврат РегистрыСведений.СостоянияЗаказовНаИзготовление.СоздатьКлючЗаписи(СтруктураКлюча);
	
КонецФункции
	
#КонецОбласти