#Область РазделОписанияПеременных

// Будем хранить текущие значения следующих полей табличной части для пересчета
// цены при их изменении.
&НаКлиенте
Перем мТекущаяЕдиница, мТекущаяВалюта, мТекущаяВалютаБазовая;

// Колонки табличного поля "Товары".
&НаКлиенте
Перем мКолонкиТовары;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	                                         		
	Если (Параметры.ДокументСсылка <> Документы.УстановкаЦен.ПустаяСсылка()) ИЛИ ЗначениеЗаполнено(Параметры.ДанныеДокумента) Тогда
		
		ДанныеДокумента = Параметры.ДанныеДокумента;
		
		ДокументЗагружен = Истина;
		
		СоздатьКомандуФормы("КомандаОбнулитьЦены", "Удалить (обнулить)", "КнопкаВыполнитьНажатиеОбнулитьЦены");
		
		СоздатьКомандуФормы("КомандаЗадатьЦену", "Задать фиксированную цену", "КнопкаВыполнитьНажатиеЗадатьЦену");
		
		СоздатьКомандуФормы("КомандаУстановитьЕдиницуЦен", "Установить единицу", "КнопкаВыполнитьНажатиеУстановитьЕдиницуЦен");
		
		СоздатьКомандуФормы("КомандаОкруглитьЦены", "Округлить", "КнопкаВыполнитьНажатиеОкруглитьЦены");
		
		СоздатьКомандуФормы("КомандаИзменитьЦены", "Изменить цены на %", "КнопкаВыполнитьНажатиеИзменитьЦену");
		
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Изменить цены на %", "Изменить цены на %");
		
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Округлить", "Округлить");
		
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Задать фиксированную цену", "Задать фиксированную цену");
		
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Установить единицу", "Установить единицу"); 
		
		Элементы.ПолеВыбораДействия.СписокВыбора.Добавить("Удалить (обнулить)", "Удалить (обнулить)");
		
		ПоказыватьАртикул = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоказыватьАртикул" , ТекущаяДата());
		
		ПоказыватьХарактеристику = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
		
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураАртикул.Видимость = ПоказыватьАртикул;
		
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыХарактеристикаНоменклатуры.Видимость = ПоказыватьХарактеристику;
			
		Для Каждого Строка Из ДанныеДокумента Цикл
			
			НоваяСтрока = Объект.Товары.Добавить();
			
			НоваяСтрока.Пометка = Истина;
			
			НоваяСтрока.Номенклатура = Строка.Номенклатура;
			
			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			
			НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
			
			НоваяСтрока.Цена = Строка.Цена;
			
		КонецЦикла;
		
	Иначе 
		
		ДокументЗагружен = Ложь;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	    			
	Если (ДокументЗагружен = Истина) Тогда
		
		// Восстановим настройку пересчета цены при изменении валюты, единицы, процента наценки.
		ПересчитыватьЦенуПриИзмененииРеквизитов = ЗагрузитьНастройки("ПересчитыватьЦенуПриИзмененииРеквизитов");
		
		ПодставлятьВалютуИзДиапазона = ЗагрузитьНастройки("ПодставлятьВалютуИзДиапазона");
		
		ТекущееДействие = ЗагрузитьНастройки("ФормированиеЦенТекущееДействие");
		
		Если ТекущееДействие = Неопределено ИЛИ Элементы.ПолеВыбораДействия.СписокВыбора.НайтиПоЗначению(ТекущееДействие) = Неопределено Тогда
			
			ТекущееДействие = Элементы.ПолеВыбораДействия.СписокВыбора[0].Значение;
			
		КонецЕсли;
		
		ПолеВыбораДействия = ТекущееДействие;
		
		ПриИзмененииТекущегоДействия(ТекущееДействие);
		
		Для Каждого Строка Из Объект.Товары Цикл
			
			Строка.Пометка = Истина;
			
		КонецЦикла;
		
		ДействиеНеВыполнено = Истина;
		
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыХарактеристикаНоменклатуры.Видимость = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
		
		ПересчитыватьЦенуПриИзмененииРеквизитов = Истина;
		
	Иначе
		
		Отказ = Истина;
		
		Предупреждение("Данная обработка запускается только из документа ""Установка цен""");
		
		Возврат;
		
	КонецЕсли;
							
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если (ТипЗнч(ВыбранноеЗначение) = Тип("Массив")) Тогда
		
		Объект.Товары[Объект.Товары.Количество() - 1].Пометка = Истина;
		
		Объект.Товары[Объект.Товары.Количество() - 1].Номенклатура = ВыбранноеЗначение[0];
		
		ВыбранноеЗначение.Удалить(0);
		
		Для Каждого Элемент Из ВыбранноеЗначение Цикл
			
			НоваяСтрока = Объект.Товары.Добавить();
			
			НоваяСтрока.Пометка                  = Истина;
			
			НоваяСтрока.Номенклатура             = Элемент;
		
		КонецЦикла;
		
	ИначеЕсли (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") И (ВыбранноеЗначение <> ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"))) Тогда
		
		Объект.Товары[Объект.Товары.Количество() - 1].Номенклатура = ВыбранноеЗначение;
		
		Объект.Товары[Объект.Товары.Количество() - 1].ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		
		Объект.Товары[Объект.Товары.Количество() - 1].Цена = 0;
	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьКомандуФормы(ИмяКоманды, ЗаголовокКоманды, ДействиеКоманды)
	
	НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	
	НоваяКоманда.Заголовок = ЗаголовокКоманды;
	
	НоваяКоманда.Действие  = ДействиеКоманды;
	
КонецПроцедуры

// Процедура сохранения настройки в хранилище общих настроек.
//
&НаСервере
Процедура СохранитьНастройки(КлючНастройки, Настройка)
	
	ХранилищеОбщихНастроек.Сохранить("НастройкиФормированияЦен", КлючНастройки, Настройка);
	
КонецПроцедуры

// Процедура загрузки настройки из хранилища общих настроек.
&НаСервере
Функция ЗагрузитьНастройки(КлючНастройки)
	
	Возврат ХранилищеОбщихНастроек.Загрузить("НастройкиФормированияЦен", КлючНастройки);
	
КонецФункции

&НаСервере
Процедура ЗадатьКомандуКнопкиВыполнить(Действие)
	
	Если (Действие = "Удалить (обнулить)") Тогда
		
		ИмяКоманды = "КомандаОбнулитьЦены";	
		
	ИначеЕсли (Действие = "Задать фиксированную цену") Тогда
		
		ИмяКоманды = "КомандаЗадатьЦену";
		
	ИначеЕсли (Действие = "Установить единицу") Тогда
		
		ИмяКоманды = "КомандаУстановитьЕдиницуЦен";
		
	ИначеЕсли (Действие = "Округлить") Тогда
		
		ИмяКоманды = "КомандаОкруглитьЦены";
		
	ИначеЕсли (Действие = "Изменить цены на %") Тогда
		
		ИмяКоманды = "КомандаИзменитьЦены";
		
	КонецЕсли;
	
	Элементы.КнопкаВыполнить.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекущегоДействия(Действие)

	// Назначим новое действие кнопке "Выполнить". Само действие возьмем из списка значений.
	ЗадатьКомандуКнопкиВыполнить(Действие);
	
	ДействиеНеВыполнено = Истина;
	
	// Будем считать, что по умолчанию никакие реквизиты не нужны.
	Элементы.ПолеВводаВариантаЗначения.Доступность = Ложь;
	Элементы.ПолеВыбораЗнакаИзменения.Доступность = Ложь;
	Элементы.ПолеВводаВеличиныИзменения.Доступность = Ложь;
	Элементы.ПолеВыбораЕдиницыИзменения.Доступность = Ложь;

	Элементы.ПолеВводаВариантаЗначения.БыстрыйВыбор = Истина;

	// Заполним свзанные поля и реквизиты.
	Если (Действие = "Удалить (обнулить)") Тогда

		// В этом случае ничего дополнительного устанавливать не нужно.

	ИначеЕсли (Действие = "Установить единицу") Тогда

		// Здесь надо выбирать из справочника ОКЕИ.
		Элементы.ПолеВводаВариантаЗначения.Доступность = Истина;
		ВариантЗначения = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");

	ИначеЕсли (Действие = "Округлить") Тогда   
						 
		// Здесь надо выбирать из перечисления  порядки округления.
		Элементы.ПолеВводаВариантаЗначения.Доступность = Истина;
		ВариантЗначения  = ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр1");

	ИначеЕсли (Действие = "Задать фиксированную цену") Тогда

		// Здесь надо задать число
		Элементы.ПолеВводаВариантаЗначения.Доступность = Истина;
		ВариантЗначения  = 0;
		
	ИначеЕсли (Действие = "Изменить цены на %") Тогда
		
		// Здесь надо задать число
		Элементы.ПолеВводаВариантаЗначения.Доступность = Истина;
		ВариантЗначения  = 0;
		// Тут надо выбрать, увеличиваем или уменьшаем.
		Элементы.ПолеВыбораЗнакаИзменения.Доступность = Истина;
		ЗнакИзменения = "Увеличить";

	КонецЕсли;

КонецПроцедуры // ПриИзмененииТекущегоДействия()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик обнуляет все помеченные цены.
//
&НаКлиенте
Процедура КнопкаВыполнитьНажатиеОбнулитьЦены(Элемент)

	ТабличнаяЧасть = Объект.Товары;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл 
		
		Если (Строка.Пометка = Истина) Тогда
			
			Строка.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
			
			Строка.Цена = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОбнулитьЦены()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает единицу с выбранным ОКЕИ для 
// всех помеченных строк табличной части.
//
&НаКлиенте
Процедура КнопкаВыполнитьНажатиеУстановитьЕдиницуЦен(Элемент)

	// Должен быть выбран ОКЕИ
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбрана единица измерения!", 60, "Формирование цен");

		ТекущийЭлемент = Элементы.ПолеВводаВариантаЗначения;
		
		Возврат;
		
	КонецЕсли; 

	УстановитьЕдиницуЦен();
	
	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьЕдиницуЦен()

&НаСервере
Процедура УстановитьЕдиницуЦен()
	
	ТабличнаяЧасть = Объект.Товары;
	
	// Сформируем текст запроса для поиска единицы с выбранным ОКЕИ.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Владелец", ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Запрос.УстановитьПараметр("ОКЕИ",     ВариантЗначения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Владелец,
	|	ЕдиницыИзмерения.Ссылка      КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|
	|ГДЕ
	|	  ЕдиницыИзмерения.Владелец В (&Владелец)
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ОКЕИ";

	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры единицу с таким ОКЕИ.
	// Если нашли, то меняем единицу и пересчитываем цену,
	// не нашли - сообщаем об этом.
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Строка.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(Строка.Номенклатура,"Владелец")  Тогда

				// У данной номенклатуры есть цена с таким ОКЕИ.
				// Изменяем единицу, пересчитываем цену, если просят.
				Если ПересчитыватьЦенуПриИзмененииРеквизитов Тогда
					
					НоваяЦена = ?(Строка.ЕдиницаИзмерения.Коэффициент = 0, 0,
								  Строка.Цена * ВыборкаИзЗапроса.Коэффициент / Строка.ЕдиницаИзмерения.Коэффициент);
					Строка.Цена    = Ценообразование.ОкруглитьЦену(НоваяЦена, Перечисления.ПорядкиОкругления.Окр0_01, Истина);
				КонецЕсли; 

				Строка.ЕдиницаИзмерения = ВыборкаИзЗапроса.ЕдиницаИзмерения;
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У номенклатуры """ + СокрЛП(Строка.Номенклатура)  
						+ """ нет единицы измерения с ОКЕИ """ + СокрЛП(ВариантЗначения)
						+ """!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает заданную наценку для 
// всех помеченных строк табличной части.
//
// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик обнуляет все помеченные цены.
//
&НаКлиенте
Процедура КнопкаВыполнитьНажатиеОкруглитьЦены(Элемент)

	// Должен быть выбран прядок округления.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда

		Предупреждение("Не выбран порядок округления!", 60, "Формирование цен");
		
		ТекущийЭлемент = Элементы.ПолеВводаВариантаЗначения;
		
		Возврат;

	КонецЕсли;

	ОкруглитьЦены();
	
	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦены()

&НаСервере
Процедура ОкруглитьЦены()
	
	ТабличнаяЧасть = Объект.Товары;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Строка.Пометка Тогда

			Строка.Цена = Ценообразование.ОкруглитьЦену(Строка.Цена, ВариантЗначения, Истина);
			
		КонецЕсли;
		
	КонецЦикла;  	
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик изменяет цену на заданный процент.
//
&НаКлиенте
Процедура КнопкаВыполнитьНажатиеИзменитьЦену(Элемент)

    ИзменитьЦену();
	
	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьЦену()

&НаСервере
Процедура ИзменитьЦену()
	
	ТабличнаяЧасть = Объект.Товары;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Строка.Пометка Тогда

			Если (ЗнакИзменения = "Увеличить") Тогда
				
				Строка.Цена = Строка.Цена * (100 + ВариантЗначения) / 100;
				
			ИначеЕсли (ЗнакИзменения = "Уменьшить") Тогда
				
				Строка.Цена = Строка.Цена * (100 - ВариантЗначения) / 100;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;  	
	
КонецПроцедуры
        
&НаКлиенте
Процедура КнопкаВыполнитьНажатиеЗадатьЦену(Элемент)
	
	ЗадатьЦену();

	ДействиеНеВыполнено = Ложь;
	
КонецПроцедуры
  
&НаСервере
Процедура ЗадатьЦену()
	
	ТабличнаяЧасть = Объект.Товары;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Строка.Пометка Тогда

			Строка.Цена = ВариантЗначения;
			
		КонецЕсли;
		
	КонецЦикла;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораДействияПриИзменении(Элемент)
	
	ПриИзмененииТекущегоДействия(ПолеВыбораДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", , ЭтаФорма);
	
	ФормаВыбора.Элементы.Список.МножественныйВыбор = Истина;
	
	ФормаВыбора.ОткрытьМодально();	
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИлиХарактеристикаПриИзменении(Элемент)
	
	ПроверитьЕдиницуИзмерения(Элемент.Родитель.ТекущаяСтрока);

	мТекущаяЕдиница = Элемент.Родитель.ТекущиеДанные.ЕдиницаИзмерения;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЕдиницуИзмерения(НомерСтроки)
	
	Если НЕ ЗначениеЗаполнено(Объект.Товары[НомерСтроки].ЕдиницаИзмерения) Тогда
		
		Объект.Товары[НомерСтроки].ЕдиницаИзмерения = Объект.Товары[НомерСтроки].Номенклатура.ЕдиницаХраненияОстатков;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	// Новые строки будем по умолчанию помечать.
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока.Пометка = Истина;
		
	КонецЕсли; 

	// Запомним текущие значения реквизитов для пересчета при их изменении.
	мТекущаяЕдиница = ТекущаяСтрока.ЕдиницаИзмерения;
	
	мТекущаяВалюта = ТекущаяСтрока.Валюта;
	
	мТекущаяВалютаБазовая = ТекущаяСтрока.ВалютаБазовая;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;

	Если ПересчитыватьЦенуПриИзмененииРеквизитов Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
			
			ТекущаяСтрока.Цена = 0;
			
		Иначе
			// Пересчитаем цену, если выбрали новую единицу и была задана старая.
			ТекущаяСтрока.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(ТекущаяСтрока.Цена, мТекущаяЕдиница, ТекущаяСтрока.ЕдиницаИзмерения);
			
			// Еще надо округлить по типу цен.
			ТекущаяСтрока.Цена = Ценообразование.ОкруглитьЦену(ТекущаяСтрока.Цена, ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр0_01"), Истина);
			
			// Запомним старую Единицу
			мТекущаяЕдиница = ТекущаяСтрока.ЕдиницаИзмерения;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Сохранить(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	                	
	Сохранить(Ложь);
	
КонецПроцедуры

// Процедура сохраняет настройки формы и передает содержимое
// табличной части Товары в форму-владелец через процедуру
// СообщитьОВыборе().
&НаКлиенте
Процедура Сохранить(ЗакрытьПослеСохранения)
	
	Если ДействиеНеВыполнено Тогда
		
		Ответ = Вопрос("Выбранное действие не было выполнено! Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Возврат;
			
		Иначе
			
			ДействиеНеВыполнено = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

	// Сохраним значения настройки пересчета цены при изменении валюты, единицы, процента наценки,
	// и текущего выбранного значения в списке действий.
	СохранитьНастройки("ФормированиеЦенПересчитыватьЦенуПриИзмененииРеквизитов", ПересчитыватьЦенуПриИзмененииРеквизитов);
	
	СохранитьНастройки("ФормированиеЦенТекущееДействие", ПолеВыбораДействия);
	
	// Можно закрывать форму.
	ЭтаФорма.ЗакрыватьПриВыборе = ЗакрытьПослеСохранения;
	
	Закрыть(ПолучитьМассивСтрок());	
	
КонецПроцедуры

// Функция возвращает массив структур, содержащих
// данные строк табличной части Товары.
&НаСервере
Функция ПолучитьМассивСтрок()
	
	МассивВозврата = Новый Массив;

	Таблица = Объект.Товары.Выгрузить();
	
	Для Каждого Строка Из Таблица Цикл
		
		СтруктураЭлемента = Новый Структура("Артикул, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Цена");
		
		СтруктураЭлемента.Артикул = Строка.Номенклатура.Артикул;
		
		СтруктураЭлемента.Номенклатура = Строка.Номенклатура;
		
		СтруктураЭлемента.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		
		СтруктураЭлемента.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		
		СтруктураЭлемента.Цена = Строка.Цена;
		
		МассивВозврата.Добавить(СтруктураЭлемента);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура КомандаИзменитьСтроку(Команда)
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", , ЭтаФорма);
	
	ФормаВыбора.ОткрытьМодально();	
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьТаблицу(Команда)
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПометки(Команда)
	
	ИзменитьПометки(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьПометки(Команда)
	
	ИзменитьПометки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометки(ЗначениеПометки)
	
	ТабличнаяЧасть = Объект.Товары;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Строка.Пометка = ЗначениеПометки;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСтроки(Команда)
	
	НоваяСтрока = Объект.Товары.Добавить();
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", , ЭтаФорма);
	
	ФормаВыбора.Элементы.Список.МножественныйВыбор = Истина;
	
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

#КонецОбласти
