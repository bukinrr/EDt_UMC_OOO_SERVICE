#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Период")
		И ТипЗнч(Параметры.Период) = Тип("СтандартныйПериод")
	Тогда
		Период = Параметры.Период;
	КонецЕсли;
	
	Команда = Команды.Добавить("ВертикальноеВыравнивание");
	
	мЭлементыВыравнивания = Новый Массив;
	мЭлементыВыравнивания.Добавить(Новый Структура("Группа, Элемент", Элементы.ПолеЛогин));
	мЭлементыВыравнивания.Добавить(Новый Структура("Группа, Элемент", Элементы.ПолеЛогаут));
	мЭлементыВыравнивания.Добавить(Новый Структура("Группа, Элемент", Элементы.НадписьЛогин,	Элементы.ДобавитьЛогин));
	мЭлементыВыравнивания.Добавить(Новый Структура("Группа, Элемент", Элементы.НадписьЛогаут,	Элементы.ДобавитьЛогаут));
	
	Для Каждого стрЭлементВыравнивания Из мЭлементыВыравнивания Цикл
		
		Кнопка = Элементы.Добавить(СтрШаблон("ВертикальноеВыравнивание_%1", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_")), Тип("КнопкаФормы"), стрЭлементВыравнивания.Группа);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = "ВертикальноеВыравнивание";
		Кнопка.Доступность = Ложь;
		Кнопка.Ширина = 1;
		Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
		Кнопка.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		
		Если стрЭлементВыравнивания.Элемент <> Неопределено Тогда
			Элементы.Переместить(Кнопка, стрЭлементВыравнивания.Группа, стрЭлементВыравнивания.Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Получить(Команда)
	
	ЗаполнитьСобытия();
	ЗаполнитьСобытияНаФорме();
	
	ДоступноРедактирование = Истина;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсё(Команда)
	
	Элементы.ОтображатьВсё.Пометка = Не Элементы.ОтображатьВсё.Пометка;
	ОтображатьВсё = Элементы.ОтображатьВсё.Пометка;
	ЗаполнитьСобытияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку()
	
	Если ИндексБлижайшейСтроки > 0 И СобытияБитФонНаФорме.Количество() > 0 Тогда
		СтрокиСобытияНаФорме = СобытияБитФонНаФорме.НайтиСтроки(Новый Структура("ИндексСтроки", ИндексБлижайшейСтроки));
		Если СтрокиСобытияНаФорме.Количество() > 0 Тогда
			Элементы.СобытияБитФон.ТекущаяСтрока = СтрокиСобытияНаФорме[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытие(Команда)
	
	ТекстПредупреждения = "";
	ТекДанные = Элементы.СобытияБитФон.ТекущиеДанные;
	
	Если Команда.Имя = "ДобавитьЛогинДляСтроки" Тогда
		ДобавитьЛогин(ТекДанные.ПолучитьИдентификатор(), ТекстПредупреждения);
	ИначеЕсли Команда.Имя = "ДобавитьЛогаутДляСтроки" Тогда
		ДобавитьЛогаут(ТекДанные.ПолучитьИдентификатор(), ТекстПредупреждения);
	ИначеЕсли Команда.Имя = "ДобавитьЛогинНаПериод" Тогда
		ДобавитьЛогинНаПериод(ТекстПредупреждения);
	ИначеЕсли Команда.Имя = "ДобавитьЛогаутНаПериод" Тогда
		ДобавитьЛогаутНаПериод(ТекстПредупреждения);
	КонецЕсли;
	
	ЗаполнитьСобытияНаФорме();
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеНаПроизвольнуюДату(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДобавлениеСобытияПослеЗакрытия", ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_БитфонАРМУправленияСобытиями.Форма.ДобавлениеСобытияНаПроизвольнуюДату",, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	СтандартнаяОбработка = Истина;
	Обработчик = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОтчетыКлиентПереопределяемый.ПриНажатииКнопкиВыбораПериода(ЭтотОбъект, Период, СтандартнаяОбработка, Обработчик);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Период;
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПараметрПриИзменении(Элемент)
	
	ДоступноРедактирование = Ложь;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияБитФонПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопокРедактированияГраниц();
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ИндексБлижайшейСтроки = 0;
	ИначеЕсли Элементы.ОтображатьВсё.Пометка Тогда
		ИндексБлижайшейСтроки = ПолучитьИндексБлижайшейСтроки(ТекДанные.ИндексСтроки);
	Иначе
		ИндексБлижайшейСтроки = ТекДанные.ИндексСтроки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПериод) <> Тип("СтандартныйПериод") Тогда
		Возврат;
	КонецЕсли;
	
	Период = ВыбранныйПериод;
	ДоступноРедактирование = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСобытия()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_СобытияБитФон.Пользователь КАК Пользователь,
		|	бит_СобытияБитФон.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(бит_СобытияБитФон.Дата, ДЕНЬ) КАК День,
		|	бит_СобытияБитФон.Событие КАК Событие,
		|	ВЫБОР
		|		КОГДА бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияБитФон.НаЛинии)
		|			ТОГДА 0
		|		КОГДА бит_СобытияБитФон.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияБитФон.Логаут)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.бит_СобытияБитФон КАК бит_СобытияБитФон
		|ГДЕ
		|	бит_СобытияБитФон.Дата <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
		|	И бит_СобытияБитФон.Дата >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
		|	И (&Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ИЛИ бит_СобытияБитФон.Пользователь = &Пользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь,
		|	Дата,
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ДатаНачала",		Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	
	тзСобытия = Запрос.Выполнить().Выгрузить();
	
	тзПервыеСобытия = тзСобытия.СкопироватьКолонки();
	тзПоследниеСобытия = тзСобытия.СкопироватьКолонки();
	
	тзСобытия.Колонки.Добавить("ОписаниеПроблемы",		Новый ОписаниеТипов("Строка"));
	тзСобытия.Колонки.Добавить("Пояснение",				Новый ОписаниеТипов("Строка"));
	тзСобытия.Колонки.Добавить("ОтсутствующееСобытие",	Новый ОписаниеТипов("ПеречислениеСсылка.СобытияБитФон"));
	
	ДниСобытийПоПользователям = тзСобытия.Скопировать();
	ДниСобытийПоПользователям.Свернуть("Пользователь, День");
	
	Для Каждого ДеньСобытияПользователя Из ДниСобытийПоПользователям Цикл
		
		ТекущийПользователь = ДеньСобытияПользователя.Пользователь;
		ТекущийДень = ДеньСобытияПользователя.День;
		
		СобытияДня = тзСобытия.НайтиСтроки(Новый Структура("Пользователь, День", ТекущийПользователь, ТекущийДень));
		ОбщегоНазначенияСервер.ВосстановитьПорядокНайденныхСтрок(СобытияДня, тзСобытия);
		
		ПервоеСобытие = СобытияДня[0];
		ПоследнееСобытие = СобытияДня[СобытияДня.ВГраница()];
		
		Если ПервоеСобытие.Событие <> Перечисления.СобытияБитФон.Логин Тогда
			ПервоеСобытие.ОписаниеПроблемы = НСтр("ru='Отсутствует логин в начале дня'");
			ПервоеСобытие.ОтсутствующееСобытие = Перечисления.СобытияБитФон.Логин;
			
			ЗаполнитьЗначенияСвойств(тзПервыеСобытия.Добавить(), ПервоеСобытие);
		КонецЕсли;
		Если ПоследнееСобытие.Событие <> Перечисления.СобытияБитФон.Логаут Тогда
			ПоследнееСобытие.ОписаниеПроблемы = НСтр("ru='Отсутствует логаут в конце дня'");
			ПоследнееСобытие.ОтсутствующееСобытие = Перечисления.СобытияБитФон.Логаут;
			
			ЗаполнитьЗначенияСвойств(тзПоследниеСобытия.Добавить(), ПоследнееСобытие);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДатыЗвонков(тзПервыеСобытия, тзПоследниеСобытия, тзСобытия);
	
	СобытияБитФон.Загрузить(тзСобытия);
	СобытияБитФон.Сортировать("Пользователь, Дата, Приоритет");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСобытияНаФорме()
	
	СобытияБитФонНаФорме.Очистить();
	
	Для Каждого СтрокаСобытия Из СобытияБитФон Цикл
		Если ОтображатьВсё Или ЗначениеЗаполнено(СтрокаСобытия.ОтсутствующееСобытие) Тогда
			НоваяСтрокаНаФорме = СобытияБитФонНаФорме.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНаФорме, СтрокаСобытия);
			НоваяСтрокаНаФорме.ИндексСтроки = СобытияБитФон.Индекс(СтрокаСобытия);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьТекущуюСтроку();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатыЗвонков(тзПервыеСобытия, тзПоследниеСобытия, тзСобытия)
	
	Если тзПервыеСобытия.Количество() = 0
		И тзПоследниеСобытия.Количество() = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервыеСтроки.Пользователь КАК Пользователь,
		|	ПервыеСтроки.Дата КАК Дата
		|ПОМЕСТИТЬ ПервыеСтроки
		|ИЗ
		|	&ПервыеСтроки КАК ПервыеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеСтроки.Пользователь КАК Пользователь,
		|	ПоследниеСтроки.Дата КАК Дата
		|ПОМЕСТИТЬ ПоследниеСтроки
		|ИЗ
		|	&ПоследниеСтроки КАК ПоследниеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервыеСтроки.Пользователь КАК Пользователь,
		|	ПервыеСтроки.Дата КАК Дата,
		|	ПервыеСтроки.ДатаНачалаЗвонка КАК ДатаНачалаЗвонка,
		|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(бит_ИсторияЗвонков.Дата, СЕКУНДА, бит_ИсторияЗвонков.ДлительностьЗвонка)) КАК ДатаКонцаЗвонка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПервыеСтроки.Пользователь КАК Пользователь,
		|		ПервыеСтроки.Дата КАК Дата,
		|		МИНИМУМ(бит_ИсторияЗвонков.Дата) КАК ДатаНачалаЗвонка
		|	ИЗ
		|		РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервыеСтроки КАК ПервыеСтроки
		|			ПО (ПервыеСтроки.Пользователь = бит_ИсторияЗвонков.Пользователь)
		|				И (бит_ИсторияЗвонков.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ПервыеСтроки.Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(ПервыеСтроки.Дата, ДЕНЬ))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПервыеСтроки.Пользователь,
		|		ПервыеСтроки.Дата) КАК ПервыеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|		ПО (бит_ИсторияЗвонков.Пользователь = ПервыеСтроки.Пользователь)
		|			И (бит_ИсторияЗвонков.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ПервыеСтроки.Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(ПервыеСтроки.Дата, ДЕНЬ))
		|			И (бит_ИсторияЗвонков.Дата = ПервыеСтроки.ДатаНачалаЗвонка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПервыеСтроки.Пользователь,
		|	ПервыеСтроки.Дата,
		|	ПервыеСтроки.ДатаНачалаЗвонка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеСтроки.Пользователь КАК Пользователь,
		|	ПоследниеСтроки.Дата КАК Дата,
		|	МИНИМУМ(бит_ИсторияЗвонков.Дата) КАК ДатаНачалаЗвонка,
		|	ПоследниеСтроки.ДатаКонцаЗвонка КАК ДатаКонцаЗвонка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоследниеСтроки.Пользователь КАК Пользователь,
		|		ПоследниеСтроки.Дата КАК Дата,
		|		МАКСИМУМ(ДОБАВИТЬКДАТЕ(бит_ИсторияЗвонков.Дата, СЕКУНДА, бит_ИсторияЗвонков.ДлительностьЗвонка)) КАК ДатаКонцаЗвонка
		|	ИЗ
		|		РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеСтроки КАК ПоследниеСтроки
		|			ПО (ПоследниеСтроки.Пользователь = бит_ИсторияЗвонков.Пользователь)
		|				И (бит_ИсторияЗвонков.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоследниеСтроки.Пользователь,
		|		ПоследниеСтроки.Дата) КАК ПоследниеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ИсторияЗвонков КАК бит_ИсторияЗвонков
		|		ПО (бит_ИсторияЗвонков.Пользователь = ПоследниеСтроки.Пользователь)
		|			И (бит_ИсторияЗвонков.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(ПоследниеСтроки.Дата, ДЕНЬ))
		|			И (ДОБАВИТЬКДАТЕ(бит_ИсторияЗвонков.Дата, СЕКУНДА, бит_ИсторияЗвонков.ДлительностьЗвонка) = ПоследниеСтроки.ДатаКонцаЗвонка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоследниеСтроки.Пользователь,
		|	ПоследниеСтроки.Дата,
		|	ПоследниеСтроки.ДатаКонцаЗвонка";
	
	Запрос.УстановитьПараметр("ПервыеСтроки", тзПервыеСобытия);
	Запрос.УстановитьПараметр("ПоследниеСтроки", тзПоследниеСобытия);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПервые = Результат[2].Выбрать();
	Пока ВыборкаПервые.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПервые.ДатаНачалаЗвонка) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиСобытия = тзСобытия.НайтиСтроки(Новый Структура("Дата, Пользователь", ВыборкаПервые.Дата, ВыборкаПервые.Пользователь));
		ДатаНачалаЗвонка = Формат(ВыборкаПервые.ДатаНачалаЗвонка, "ДФ=ЧЧ:мм:сс");
		ДатаКонцаЗвонка = Формат(ВыборкаПервые.ДатаКонцаЗвонка, "ДФ=ЧЧ:мм:сс");
		
		СтрокиСобытия[0].Пояснение = СтрШаблон("Первый звонок: %1 - %2", ДатаНачалаЗвонка, ДатаКонцаЗвонка);
	КонецЦикла;
	
	ВыборкаПоследние = Результат[3].Выбрать();
	Пока ВыборкаПоследние.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПоследние.ДатаКонцаЗвонка) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиСобытия = тзСобытия.НайтиСтроки(Новый Структура("Дата, Пользователь", ВыборкаПоследние.Дата, ВыборкаПоследние.Пользователь));
		ДатаНачалаЗвонка = Формат(ВыборкаПоследние.ДатаНачалаЗвонка, "ДФ=ЧЧ:мм:сс");
		ДатаКонцаЗвонка = Формат(ВыборкаПоследние.ДатаКонцаЗвонка, "ДФ=ЧЧ:мм:сс");
		
		СтрокиСобытия[0].Пояснение = СтрШаблон("Последний звонок: %1 - %2", ДатаНачалаЗвонка, ДатаКонцаЗвонка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СобытияБитФонПользователь.Видимость = Не ЗначениеЗаполнено(Пользователь);
	
	Элементы.СобытияБитФон.Доступность = ДоступноРедактирование;
	Элементы.ОтображатьВсё.Доступность = ДоступноРедактирование;
	
	УстановитьДоступностьДочернихЭлементов(Элементы.КнопкиДляСтроки,			ДоступноРедактирование);
	УстановитьДоступностьДочернихЭлементов(Элементы.КнопкиДляПериода,			ДоступноРедактирование);
	УстановитьДоступностьДочернихЭлементов(Элементы.Поля,						ДоступноРедактирование);
	УстановитьДоступностьДочернихЭлементов(Элементы.КнопкиДляСтроки,			Ложь);
	УстановитьДоступностьДочернихЭлементов(Элементы.КнопкиУдаленияДобавления,	ДоступноРедактирование);
	
	УстановитьДоступностьКнопокРедактированияГраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокРедактированияГраниц()
	
	Элементы.УдалитьСобытие.Доступность = Ложь;
	ТекДанные = Элементы.СобытияБитФон.ТекущиеДанные;
	
	Если ДоступноРедактирование
		И ТекДанные <> Неопределено
	Тогда
		Элементы.УдалитьСобытие.Доступность = Истина;
		Элементы.ДобавитьЛогинДляСтроки.Доступность	 = ТекДанные.ОтсутствующееСобытие = ПредопределенноеЗначение("Перечисление.СобытияБитФон.Логин");
		Элементы.ДобавитьЛогаутДляСтроки.Доступность = ТекДанные.ОтсутствующееСобытие = ПредопределенноеЗначение("Перечисление.СобытияБитФон.Логаут");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДочернихЭлементов(РодительскийЭлемент, Доступность)
	
	Для Каждого ДочернийЭлемент Из РодительскийЭлемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ДочернийЭлемент) = Тип("КнопкаФормы")
			И ДочернийЭлемент.Имя <> "ВертикальноеВыравнивание"
		Тогда
			ДочернийЭлемент.Доступность = ДоступноРедактирование;
		ИначеЕсли ТипЗнч(ДочернийЭлемент) = Тип("ПолеФормы") Тогда
			ДочернийЭлемент.ТолькоПросмотр = Не ДоступноРедактирование;
		ИначеЕсли ТипЗнч(ДочернийЭлемент) = Тип("ГруппаФормы") Тогда
			УстановитьДоступностьДочернихЭлементов(ДочернийЭлемент, Доступность);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СобытияБитФон.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СобытияБитФонНаФорме.ОтсутствующееСобытие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 220, 220));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛогин(Идентификатор, ТекстПредупреждения)
	
	СтрокаСобытияНаФорме = СобытияБитФонНаФорме.НайтиПоИдентификатору(Идентификатор);
	СтрокаСобытия = СобытияБитФон[СтрокаСобытияНаФорме.ИндексСтроки];
	
	Если СтрокаСобытия.Дата - НачалоДня(СтрокаСобытия.Дата) <= ПервыйЛогин - Дата(1,1,1) Тогда
		ТекстПредупреждения = НСтр("ru='Время первого логина должно быть меньше времени первого события'");
		Возврат;
	КонецЕсли;
	
	ДатаСобытия = НачалоДня(СтрокаСобытия.Дата) + (ПервыйЛогин - Дата(1,1,1));
	
	ДобавитьНовоеСобытиеВРегистр(ДатаСобытия, СтрокаСобытия.ОтсутствующееСобытие, СтрокаСобытия.Пользователь);
	
	НоваяСтрока = СобытияБитФон.Добавить();
	НоваяСтрока.Пользователь = СтрокаСобытия.Пользователь;
	НоваяСтрока.Событие = СтрокаСобытия.ОтсутствующееСобытие;
	НоваяСтрока.Дата = НачалоДня(СтрокаСобытия.Дата) + (ПервыйЛогин - Дата(1,1,1));
	
	СтрокаСобытия.ОтсутствующееСобытие = Неопределено;
	СтрокаСобытия.ОписаниеПроблемы = Неопределено;
	
	СобытияБитФон.Сортировать("Пользователь, Дата, Приоритет");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛогаут(Идентификатор, ТекстПредупреждения)
	
	СтрокаСобытияНаФорме = СобытияБитФонНаФорме.НайтиПоИдентификатору(Идентификатор);
	СтрокаСобытия = СобытияБитФон[СтрокаСобытияНаФорме.ИндексСтроки];
	
	Если СтрокаСобытия.Дата - НачалоДня(СтрокаСобытия.Дата) >= ПоследнийЛогаут - Дата(1,1,1) Тогда
		ТекстПредупреждения = НСтр("ru='Время последнего логаута должно быть больше времени последнего события'");
		Возврат;
	КонецЕсли;
	
	ДатаСобытия = НачалоДня(СтрокаСобытия.Дата) + (ПоследнийЛогаут - Дата(1,1,1));
	
	ДобавитьНовоеСобытиеВРегистр(ДатаСобытия, СтрокаСобытия.ОтсутствующееСобытие, СтрокаСобытия.Пользователь);
	
	НоваяСтрока = СобытияБитФон.Добавить();
	НоваяСтрока.Пользователь = СтрокаСобытия.Пользователь;
	НоваяСтрока.Событие = СтрокаСобытия.ОтсутствующееСобытие;
	НоваяСтрока.Дата = НачалоДня(СтрокаСобытия.Дата) + (ПоследнийЛогаут - Дата(1,1,1));
	НоваяСтрока.Приоритет = 1;
	
	СтрокаСобытия.ОтсутствующееСобытие = Неопределено;
	СтрокаСобытия.ОписаниеПроблемы = Неопределено;
	
	СобытияБитФон.Сортировать("Пользователь, Дата, Приоритет");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛогинНаПериод(ТекстПредупреждения)
	
	ДобавилисьСтроки = Ложь;
	НедостающиеЛогины = СобытияБитФон.НайтиСтроки(Новый Структура("ОтсутствующееСобытие", Перечисления.СобытияБитФон.Логин));
	Для Каждого СтрокаСобытия Из НедостающиеЛогины Цикл
		
		Если СтрокаСобытия.Дата - НачалоДня(СтрокаСобытия.Дата) > ПервыйЛогин - Дата(1,1,1) Тогда
			
			ДатаСобытия = НачалоДня(СтрокаСобытия.Дата) + (ПервыйЛогин - Дата(1,1,1));
			ДобавитьНовоеСобытиеВРегистр(ДатаСобытия, СтрокаСобытия.ОтсутствующееСобытие, СтрокаСобытия.Пользователь);
			
			НоваяСтрока = СобытияБитФон.Добавить();
			НоваяСтрока.Пользователь = СтрокаСобытия.Пользователь;
			НоваяСтрока.Событие = СтрокаСобытия.ОтсутствующееСобытие;
			НоваяСтрока.Дата = НачалоДня(СтрокаСобытия.Дата) + (ПервыйЛогин - Дата(1,1,1));
			
			СтрокаСобытия.ОтсутствующееСобытие = Неопределено;
			СтрокаСобытия.ОписаниеПроблемы = Неопределено;
			
			ДобавилисьСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавилисьСтроки Тогда
		СобытияБитФон.Сортировать("Пользователь, Дата, Приоритет");
	Иначе
		ТекстПредупреждения = НСтр("ru='Не найдено подходящих строк'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛогаутНаПериод(ТекстПредупреждения)
	
	ДобавилисьСтроки = Ложь;
	НедостающиеЛогины = СобытияБитФон.НайтиСтроки(Новый Структура("ОтсутствующееСобытие", Перечисления.СобытияБитФон.Логаут));
	Для Каждого СтрокаСобытия Из НедостающиеЛогины Цикл
		
		Если СтрокаСобытия.Дата - НачалоДня(СтрокаСобытия.Дата) < ПоследнийЛогаут - Дата(1,1,1) Тогда
			
			ДатаСобытия = НачалоДня(СтрокаСобытия.Дата) + (ПоследнийЛогаут - Дата(1,1,1));
			ДобавитьНовоеСобытиеВРегистр(ДатаСобытия, СтрокаСобытия.ОтсутствующееСобытие, СтрокаСобытия.Пользователь);
			
			НоваяСтрока = СобытияБитФон.Добавить();
			НоваяСтрока.Пользователь = СтрокаСобытия.Пользователь;
			НоваяСтрока.Событие = СтрокаСобытия.ОтсутствующееСобытие;
			НоваяСтрока.Дата = НачалоДня(СтрокаСобытия.Дата) + (ПоследнийЛогаут - Дата(1,1,1));
			НоваяСтрока.Приоритет = 0;
			
			СтрокаСобытия.ОтсутствующееСобытие = Неопределено;
			СтрокаСобытия.ОписаниеПроблемы = Неопределено;
			
			ДобавилисьСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавилисьСтроки Тогда
		СобытияБитФон.Сортировать("Пользователь, Дата, Приоритет");
	Иначе
		ТекстПредупреждения = НСтр("ru='Не найдено подходящих строк'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьНовоеСобытиеВРегистр(Дата, Событие, Пользователь)
	
	УстановитьПривилегированныйРежим(Истина);
	МЗ = РегистрыСведений.бит_СобытияБитФон.СоздатьМенеджерЗаписи();
	МЗ.Событие = Событие;
	МЗ.Пользователь = Пользователь;
	МЗ.Дата = Дата;
	МЗ.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСобытие(Команда)
	
	ТекДанные = Элементы.СобытияБитФон.ТекущиеДанные;
	УдалитьСобытиеНаСервере(ТекДанные.ПолучитьИдентификатор());
	ЗаполнитьСобытияНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСобытиеНаСервере(Идентификатор)
	
	СтрокаСобытияНаФорме = СобытияБитФонНаФорме.НайтиПоИдентификатору(Идентификатор);
	СтрокаСобытия = СобытияБитФон[СтрокаСобытияНаФорме.ИндексСтроки];
	
	УдалитьСобытиеИзРегистра(СтрокаСобытия);
	
	СобытияБитФон.Удалить(СтрокаСобытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСобытиеИзРегистра(СтрокаСобытия)
	
	УстановитьПривилегированныйРежим(Истина);
	МЗ = РегистрыСведений.бит_СобытияБитФон.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ, СтрокаСобытия);
	МЗ.Удалить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИндексБлижайшейСтроки(ИндексСтроки)
	
	Для Индекс = -ИндексСтроки По 0 Цикл
		Если ЗначениеЗаполнено(СобытияБитФон[-Индекс].ОтсутствующееСобытие) Тогда
			Возврат -Индекс;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ДобавлениеСобытияПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНовоеСобытиеВРегистр(Результат.Дата, Результат.Событие, Результат.Пользователь);
	
	НоваяСтрока = СобытияБитФон.Добавить();
	НоваяСтрока.Пользователь = Результат.Пользователь;
	НоваяСтрока.Событие = Результат.Событие;
	НоваяСтрока.Дата = Результат.Дата;
	
	СобытияБитФон.Сортировать("Пользователь, Дата, Приоритет");
	
	ЗаполнитьСобытияНаФорме();
	
КонецПроцедуры

#КонецОбласти