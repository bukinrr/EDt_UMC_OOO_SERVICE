#Область РазделОписанияПеременных

&НаКлиенте
Перем ЛинейныйСписок;

&НаКлиенте
Перем ЧислоЧековНаПробитие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Филиал = УправлениеНастройками.ПолучитьФилиалПоУмолчаниюПользователя(Пользователи.ТекущийПользователь());
	
	Дата = ТекущаяДата();
	
	ДнейДоОкончания = РаботаСФормамиСервер.ПолучитьНастройкуФормы("СписаниеСертификатов","СертфикатыДнейДоОкончания",7);
	ПочтаВЧеке = РаботаСФормамиСервер.ПолучитьНастройкуФормы("СписаниеСертификатов","ПочтаВЧеке","");
	
	ПечататьБумажныеЧеки = РаботаСФормамиСервер.ПолучитьНастройкуФормы("СписаниеСертификатов","ПечататьБумажныеЧеки",Ложь);
	Элементы.ПочтаВЧеке.Доступность = Не ПечататьБумажныеЧеки;
	
	Если ПочтаВЧеке = "" Тогда
		ПочтаВЧеке = ПолучитьEmailОганизации(Филиал);	
	КонецЕсли;
	
	ОбновитьСписки();
	
	ОтменаПробитияЧеков = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.СписаниеСертификатов);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УспешноеПробитиеЧекаОказаниеУслуг" 
		И ЛинейныйСписок <> Неопределено 
	Тогда
	
		Состояние("Пробитие чеков.",Окр(ЛинейныйСписок.Номер/ЧислоЧековНаПробитие * 100, 0)); 
		ОсновнаяТаблица = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "СписаниеСертификатов", Сертификаты, СписокДокументов);
		ДопТаблица = ?(ОсновнаяТаблица = Сертификаты, СписокДокументов, Сертификаты);
		ОсновнаяТаблица[ЛинейныйСписок.ИДСтроки].СостояниеЧеков = ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиПробиты");
		СтрокиДопТаблицы = ДопТаблица.НайтиСтроки(Новый Структура("Документ", Параметр));
		Если СтрокиДопТаблицы.Количество() > 0 Тогда
			СтрокиДопТаблицы[0].СостояниеЧеков = ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиПробиты");	
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		ПодключитьОбработчикОжидания("ПробитьЧекСледующегоДокумента", 0.1, Истина);	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СоздатьДокументыНаСервере(Истина);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.НепробитыеЧекиДокументов;
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы, Элементы.НепробитыеЧекиДокументов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере(ДобавлятьДокументВСписокДокументов = Ложь)
	
	МассивСертификатов = Сертификаты.Выгрузить(Новый Структура("Выбран", Истина),"Сертификат").ВыгрузитьКолонку("Сертификат");
	
	ОстаткиПоСертификатам = ПолучитьОстаткиПоСертификатам(МассивСертификатов);
	
	Для Каждого СтрокаСертификат Из Сертификаты Цикл
		Если СтрокаСертификат.Выбран И Не ЗначениеЗаполнено(СтрокаСертификат.Документ) Тогда
			ОстаткиПоСертификату = ОстаткиПоСертификатам.НайтиСтроки(Новый Структура("Сертификат", СтрокаСертификат.Сертификат));
			Если ОстаткиПоСертификату.Количество() > 0 Тогда
				СтрокаСертификат.Документ = СоздатьДокументОУ(СтрокаСертификат.Сертификат, СтрокаСертификат.ДокументПродажи, ОстаткиПоСертификату, ПечататьБумажныеЧеки, ПочтаВЧеке, Клиент, Врач, Касса, Склад, СкладМатериалов);
				Если ДобавлятьДокументВСписокДокументов Тогда 
					НоваяСтрока = СписокДокументов.Добавить();
					НоваяСтрока.Документ = СтрокаСертификат.Документ;
					НоваяСтрока.Филиал = НоваяСтрока.Документ.Филиал;
					// НоваяСтрока.Выбран = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоНепробитых = СписокДокументов.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧеки(Команда)
	
	Если Не ПечататьБумажныеЧеки И Не ЗначениеЗаполнено(ПочтаВЧеке) Тогда
		ПоказатьПредупреждение(, "Не указана электронная почта для фискализации без бумажного чека!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПочтаВЧеке)
		И Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ПочтаВЧеке)
	Тогда
		ПоказатьПредупреждение(, "Указан некорректный адрес электронной почты!");
		Возврат;
	КонецЕсли;
	
	Если Вопрос("На выборанные документы будут пробиты кассовые чеки. Продолжить?", РежимДиалогаВопрос.ОКОтмена) <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Номер = 1;
	ЧислоЧековНаПробитие = 0;
	ЛинейныйСписок = Неопределено;
	ЛинейныйСписок = Новый Структура("Следующий");
	Узел = ЛинейныйСписок;
	Таблица = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "СписаниеСертификатов", Сертификаты, СписокДокументов);
	Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
		СтрокаТаблицы = Таблица[ИндексСтроки];
		Если СтрокаТаблицы.Выбран
			И ЗначениеЗаполнено(СтрокаТаблицы.Документ) 
			И СтрокаТаблицы.СостояниеЧеков <> ПредопределенноеЗначение("Перечисление.СостоянияЧековККМ.ЧекиПробиты") 
		Тогда
			НовыйУзел = Новый Структура("Документ, ИДСтроки, Номер, Следующий", СтрокаТаблицы.Документ, ИндексСтроки, Номер);
			Узел.Следующий = НовыйУзел;
			Узел = Узел.Следующий;
			Номер = Номер + 1;
		КонецЕсли;	
	КонецЦикла;
	ЧислоЧековНаПробитие = Номер - 1;
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыОжидания", ЭтотОбъект);
	ОткрытьФорму("Обработка.СписаниеОстатковСертификатов.Форма.ОжиданиеПробитияЧеков",,ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ПробитьЧекСледующегоДокумента();
	
	Состояние("Пробитие чеков.", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИПробить(Команда)
	
	СоздатьДокументыНаСервере();
	ПробитьЧеки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	УстановитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	УстановитьПометки(Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияПоСертификату(Команда)
	
	ЗначенияОтбора = Новый Структура("Сертификат", Элементы.Сертификаты.ТекущиеДанные.Сертификат);
	ОткрытьФорму("РегистрНакопления.ОстаткиПоСертификатам.ФормаСписка", Новый Структура("Отбор", ЗначенияОтбора));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиНаФорме(Команда)
	ОбновитьСписки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОсновнаяСтраница = ТекущаяСтраница.Имя = "СписаниеСертификатов";
	
	Элементы.ФормаСоздатьДокументы.КнопкаПоУмолчанию = ОсновнаяСтраница;
	Элементы.ФормаПробитьЧеки.КнопкаПоУмолчанию	 = Не ОсновнаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СертификатыДокумент" Тогда
		Если ЗначениеЗаполнено(Элементы.Сертификаты.ТекущиеДанные.Документ) Тогда 
			ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта", Новый Структура("Ключ", Элементы.Сертификаты.ТекущиеДанные.Документ));
		КонецЕсли;
	ИначеЕсли Поле.Имя = "СертификатыСертификат" Тогда
		ОткрытьФорму("Справочник.Сертификаты.ФормаОбъекта", Новый Структура("Ключ", Элементы.Сертификаты.ТекущиеДанные.Сертификат));	
	ИначеЕсли Поле.Имя = "СертификатыВидСертификата" Тогда
		ОткрытьФорму("Справочник.ВидыСертификатов.ФормаОбъекта", Новый Структура("Ключ", Элементы.Сертификаты.ТекущиеДанные.ВидСертификата));
	ИначеЕсли Поле.Имя = "СертификатыСуммаОстатка" Тогда
		ДвиженияПоСертификату(Неопределено);
	ИначеЕсли Поле.Имя = "СертификатыСостояниеЧеков" Тогда
		ЗначенияОтбора = Новый Структура("Документ", Элементы.Сертификаты.ТекущиеДанные.Документ);
		ОткрытьФорму("РегистрСведений.ИсторияПечатиОнлайнЧеков.ФормаСписка", Новый Структура("Отбор", ЗначенияОтбора));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДнейДоОкончанияПриИзмененииНаСервере()
	
	ЗаполнитьСписокСертификатов();
	
	РаботаСФормамиСервер.СохранитьНастройкуФормы("СписаниеСертификатов","СертфикатыДнейДоОкончания",ДнейДоОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейДоОкончанияПриИзменении(Элемент) 
	
	ДнейДоОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокДокументовДокумент" Тогда
		ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта", Новый Структура("Ключ", Элементы.СписокДокументов.ТекущиеДанные.Документ));
	ИначеЕсли Поле.Имя = "СписокДокументовСостояниеЧеков" Тогда
		ЗначенияОтбора = Новый Структура("Документ", Элементы.СписокДокументов.ТекущиеДанные.Документ);
		ОткрытьФорму("РегистрСведений.ИсторияПечатиОнлайнЧеков.ФормаСписка", Новый Структура("Отбор", ЗначенияОтбора));	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ОбновитьСписки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечататьБумажныеЧекиПриИзмененииНаСервере(ПечататьБумажныеЧеки)
	
	РаботаСФормамиСервер.СохранитьНастройкуФормы("СписаниеСертификатов","ПечататьБумажныеЧеки",ПечататьБумажныеЧеки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьБумажныеЧекиПриИзменении(Элемент)
	
	Элементы.ПочтаВЧеке.Доступность = Не ПечататьБумажныеЧеки;
	ПечататьБумажныеЧекиПриИзмененииНаСервере(ПечататьБумажныеЧеки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Процедура ЗаполнитьСписокСертификатов()
	
	Сертификаты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОстаткиПоСертификатамОстатки.Сертификат КАК Сертификат
	               |ПОМЕСТИТЬ ОстаткиПоНенулевымСертификатам
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам.Остатки КАК ОстаткиПоСертификатамОстатки
	               |ГДЕ
	               |	ОстаткиПоСертификатамОстатки.СуммаПокупкиОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиПоСертификатам.Сертификат КАК Сертификат,
	               |	МИНИМУМ(ОстаткиПоСертификатам.Период) КАК ПерваяПродажа
	               |ПОМЕСТИТЬ ПервыеПродажиСертификатов
	               |ИЗ
	               |	ОстаткиПоНенулевымСертификатам КАК ОстаткиПоНенулевымСертификатам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |		ПО ОстаткиПоНенулевымСертификатам.Сертификат = ОстаткиПоСертификатам.Сертификат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиПоСертификатам.Сертификат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиПоСертификатамОстатки.Сертификат КАК Сертификат,
	               |	СУММА(ОстаткиПоСертификатамОстатки.СуммаОстаток) КАК СуммаОстаток,
	               |	СУММА(ОстаткиПоСертификатамОстатки.СуммаПокупкиОстаток) КАК СуммаПокупкиОстаток,
	               |	ОстаткиПоСертификатамОстатки.Сертификат.ДатаНачалаДействия КАК ДатаНачалаДействия,
	               |	ОстаткиПоСертификатамОстатки.Сертификат.ВидСертификата.СрокДействия КАК СрокДействия
	               |ПОМЕСТИТЬ ОстаткиПоСертификатам
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам.Остатки КАК ОстаткиПоСертификатамОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервыеПродажиСертификатов КАК ПервыеПродажиСертификатов
	               |		ПО (ПервыеПродажиСертификатов.Сертификат = ОстаткиПоСертификатамОстатки.Сертификат)
	               |ГДЕ
	               |	ОстаткиПоСертификатамОстатки.Сертификат.ВидСертификата.ТипСертификата = ЗНАЧЕНИЕ(Перечисление.ТипыСертификатов.НаУслуги)
	               |	И НЕ ОстаткиПоСертификатамОстатки.Сертификат.ПометкаУдаления
	               |	И ПервыеПродажиСертификатов.ПерваяПродажа >= &ДатаНачалаРаботыПоСхемеАБ_4_20_13041
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиПоСертификатамОстатки.Сертификат,
	               |	ОстаткиПоСертификатамОстатки.Сертификат.ДатаНачалаДействия,
	               |	ОстаткиПоСертификатамОстатки.Сертификат.ВидСертификата.СрокДействия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиПоСертификатам.Сертификат КАК Сертификат,
	               |	МИНИМУМ(ОстаткиПоСертификатам.Период) КАК Период
	               |ПОМЕСТИТЬ ПервыеПродажи
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |ГДЕ
	               |	ОстаткиПоСертификатам.Сертификат.ДатаНачалаДействия >= &ДатаНачалаРаботыПоСхемеАБ_4_20_13041
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиПоСертификатам.Сертификат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПервыеПродажи.Сертификат КАК Сертификат,
	               |	ОстаткиПоСертификатам.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ПервыеПродажиСРегистратором
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |		ПРАВОЕ СОЕДИНЕНИЕ ПервыеПродажи КАК ПервыеПродажи
	               |		ПО ОстаткиПоСертификатам.Сертификат = ПервыеПродажи.Сертификат
	               |			И ОстаткиПоСертификатам.Период = ПервыеПродажи.Период
	               |ГДЕ
	               |	ОстаткиПоСертификатам.Регистратор.Дата >= &ДатаНачалаРаботыПоСхемеАБ_4_20_13041
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОстаткиПоСертификатам.Сертификат КАК Сертификат,
	               |	ОстаткиПоСертификатам.СуммаОстаток КАК СуммаОстаток,
	               |	ОстаткиПоСертификатам.СуммаПокупкиОстаток КАК СуммаПокупкиОстаток,
	               |	ОстаткиПоСертификатам.ДатаНачалаДействия КАК ДатаНачалаДействия,
	               |	ОстаткиПоСертификатам.СрокДействия КАК СрокДействия,
	               |	ПервыеПродажиСРегистратором.Регистратор КАК Регистратор
	               |ИЗ
	               |	ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПервыеПродажиСРегистратором КАК ПервыеПродажиСРегистратором
	               |		ПО ОстаткиПоСертификатам.Сертификат = ПервыеПродажиСРегистратором.Сертификат
	               |ГДЕ
	               |	(ПервыеПродажиСРегистратором.Регистратор.Филиал = &Филиал
	               |			ИЛИ &Филиал = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("ДатаНачалаРаботыПоСхемеАБ_4_20_13041", Константы.ДатаНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041.Значение());
	Запрос.УстановитьПараметр("Филиал", ?(Филиал.Пустая(), Неопределено, Филиал));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДатаОкончания = ?(ТипЗнч(Выборка.СрокДействия) = Тип("Дата"),Выборка.СрокДействия, ДобавитьМесяц(Выборка.ДатаНачалаДействия, Выборка.СрокДействия));
		Если ДатаОкончания - ДнейДоОкончания * 86400 < ТекущаяДата() Тогда
			НоваяСтрока = Сертификаты.Добавить();
			НоваяСтрока.Сертификат = Выборка.Сертификат;
			НоваяСтрока.ВидСертификата = НоваяСтрока.Сертификат.ВидСертификата;
			НоваяСтрока.СуммаОстатка = Выборка.СуммаПокупкиОстаток;
			НоваяСтрока.ДокументПродажи = Выборка.Регистратор;
			НоваяСтрока.Филиал = НоваяСтрока.ДокументПродажи.Филиал;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Сертификаты.Сортировать("ДатаОкончания, ВидСертификата");
	
	КоличествоНаСписание = Сертификаты.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументов()
	
	СписокДокументов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОказаниеУслугРаботы.Ссылка КАК Ссылка,
	               |	ОказаниеУслугРаботы.Сертификат КАК Сертификат
	               |ПОМЕСТИТЬ ОказаниеУслугРаботы
	               |ИЗ
	               |	Документ.ОказаниеУслуг.Работы КАК ОказаниеУслугРаботы
	               |ГДЕ
	               |	ОказаниеУслугРаботы.Сертификат <> ЗНАЧЕНИЕ(Справочник.Сертификаты.ПустаяСсылка)
	               |	И ОказаниеУслугРаботы.Ссылка.СостояниеЧековККМ = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековККМ.ЧекиНеПробиты)
	               |	И НЕ ОказаниеУслугРаботы.Ссылка.ПометкаУдаления
	               |	И ОказаниеУслугРаботы.Ссылка.Проведен
	               |	И (ОказаниеУслугРаботы.Ссылка.Филиал = &Филиал
	               |			ИЛИ &Филиал = НЕОПРЕДЕЛЕНО)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОказаниеУслугРаботы.Сертификат КАК Сертификат,
	               |	МИНИМУМ(ОстаткиПоСертификатам.Период) КАК Период
	               |ПОМЕСТИТЬ ПервыеПродажиСертификатов
	               |ИЗ
	               |	ОказаниеУслугРаботы КАК ОказаниеУслугРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |		ПО ОказаниеУслугРаботы.Сертификат = ОстаткиПоСертификатам.Сертификат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОказаниеУслугРаботы.Сертификат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОказаниеУслугРаботы.Ссылка КАК Ссылка
	               |ИЗ
	               |	ОказаниеУслугРаботы КАК ОказаниеУслугРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПервыеПродажиСертификатов КАК ПервыеПродажиСертификатов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |			ПО ПервыеПродажиСертификатов.Сертификат = ОстаткиПоСертификатам.Сертификат
	               |				И ПервыеПродажиСертификатов.Период = ОстаткиПоСертификатам.Период
	               |		ПО ОказаниеУслугРаботы.Сертификат = ПервыеПродажиСертификатов.Сертификат
	               |ГДЕ
	               |	ОстаткиПоСертификатам.Регистратор.Дата >= &ДатаНачалаРаботыПоСхемеАБ_4_20_13041";
	
	Запрос.УстановитьПараметр("ДатаНачалаРаботыПоСхемеАБ_4_20_13041", Константы.ДатаНачалаРаботыСАбонементамиПоСхемеАБ_4_20_13041.Значение());
	Запрос.УстановитьПараметр("Филиал", ?(Филиал.Пустая(), Неопределено, Филиал));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокДокументов.Добавить();
		НоваяСтрока.Документ = Выборка.Ссылка;
		НоваяСтрока.Филиал = НоваяСтрока.Документ.Филиал;
		// НоваяСтрока.Выбран = Истина;
	КонецЦикла;
	
	КоличествоНепробитых = СписокДокументов.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДокументОУ(Сертификат, ДокументПродажи, ОстаткиПоСертификату, ПечататьБумажныеЧеки, ПочтаВЧеке, Клиент = Неопределено, Врач = Неопределено, Касса = Неопределено, Склад = Неопределено, СкладМатериалов = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документ = Документы.ОказаниеУслуг.СоздатьДокумент();
	Документ.Дата = ТекущаяДата(); 
	Документ.Филиал = ДокументПродажи.Филиал;
	Документ.Клиент = ?(ЗначениеЗаполнено(Клиент), Клиент, Сертификат.ВладелецКарты);
	Документ.Сотрудник = ?(ЗначениеЗаполнено(Врач),Врач,ДокументПродажи.Сотрудник);
	Документ.Ответственный = Пользователи.ТекущийПользователь();
	Документ.ВидОперации = Перечисления.ВидыОперацийОказанияУслуг.ПродажаКлиенту;
	Документ.Касса = ?(ЗначениеЗаполнено(Касса),Касса,ДокументПродажи.Касса);
	Документ.Склад = ?(ЗначениеЗаполнено(Склад), Склад,ДокументПродажи.Склад);
	Документ.СкладМатериалов = ?(ЗначениеЗаполнено(СкладМатериалов), СкладМатериалов, ДокументПродажи.СкладМатериалов);
	Документ.Комментарий = "Создан автоматически для погашения просроченного сертификата на услуги: " + Строка(Сертификат);
	
	Если Не ПечататьБумажныеЧеки Тогда
		Документ.АдресEmailЧек = ПочтаВЧеке;
	КонецЕсли;
	
	Если Сертификат.ВидСертификата.КомплексныйСертификат Тогда
		Для Каждого Остаток Из ОстаткиПоСертификату Цикл
			СтрокаРаботы = Документ.Работы.Добавить();
			СтрокаРаботы.Номенклатура = Остаток.Номенклатура;
			СтрокаРаботы.Количество = Остаток.Количество;
            СтрокаРаботы.Сертификат = Сертификат;
		КонецЦикла;
	Иначе
		Остаток = ОстаткиПоСертификату[0].Количество;
		НераспределеноУслуг = Сертификат.ВидСертификата.Услуги.Количество();
		Для Каждого Услуга Из Сертификат.ВидСертификата.Услуги Цикл
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			Количество = Остаток / НераспределеноУслуг;
			СтрокаРаботы = Документ.Работы.Добавить();
			
			Если Услуга.Фильтр.ЭтоГруппа Тогда
				СтрокаРаботы.Номенклатура = ПолучитьУслугуГруппы(Услуга.Фильтр);
			Иначе			
				СтрокаРаботы.Номенклатура = Услуга.Фильтр;
			КонецЕсли;
			
			СтрокаРаботы.Количество = ?(Окр(Количество, 0) < Количество, Окр(Количество, 0) + 1, Окр(Количество, 0));
			СтрокаРаботы.Сертификат = Сертификат;
			Остаток = Остаток - СтрокаРаботы.Количество;
			НераспределеноУслуг = НераспределеноУслуг - 1;
		КонецЦикла;
	КонецЕсли;
	
	Документ.ДополнительныеСвойства.Вставить("СписаниеСертификатов", Истина);
	
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ВызватьИсключение "Не удалось провести документ погашения. Проверьте причину в информационных сообщениях" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Документ.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОстаткиПоСертификатам(МассивСертификатов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиПоСертификатамОстатки.Сертификат КАК Сертификат,
	               |	ОстаткиПоСертификатамОстатки.Номенклатура КАК Номенклатура,
	               |	ОстаткиПоСертификатамОстатки.СуммаОстаток КАК Количество,
	               |	ОстаткиПоСертификатамОстатки.СуммаПокупкиОстаток КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам.Остатки КАК ОстаткиПоСертификатамОстатки
	               |ГДЕ
	               |	ОстаткиПоСертификатамОстатки.Сертификат В(&МассивСертификатов)";
	
	Запрос.УстановитьПараметр("МассивСертификатов", МассивСертификатов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьУслугуГруппы(ГруппаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Перечисления.ВидыНоменклатуры.Услуга);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель = &Родитель
	|	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры"	
	;
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометки(Пометка)
	
	Таблица = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "СписаниеСертификатов", Сертификаты, СписокДокументов);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Выбран = Пометка;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекСледующегоДокумента() Экспорт
	
	ЛинейныйСписок = ЛинейныйСписок.Следующий;
	Если ЛинейныйСписок <> Неопределено И Не ОтменаПробитияЧеков Тогда 
		ОткрытьФорму("Документ.ОказаниеУслуг.ФормаОбъекта", Новый Структура("Ключ, АвтоПробитиеЧека", ЛинейныйСписок.Документ, Истина),,,,,, РежимОткрытияОкнаФормы.Независимый);
	Иначе
		Оповестить("ВсеЧекиПробиты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьEmailОганизации(Филиал)
	
	Возврат КонтактнаяИнформацияСерверПереопределяемый.НайтиКонтактнуюИнформацию(Филиал, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,,Истина);
	
КонецФункции
		
&НаСервере
Процедура ЗаполнитьСписокВыбораEmail()
	
	Элементы.ПочтаВЧеке.СписокВыбора.Очистить();
	
	АдресаПочты = Новый Массив;
	
	Филиалы = Справочники.Филиалы.Выбрать();
	Пока Филиалы.Следующий() Цикл
		Почта = ПолучитьEmailОганизации(Филиалы.Ссылка);
		Если ЗначениеЗаполнено(Почта) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(АдресаПочты, Почта);
		КонецЕсли;
		
		Почта = ПолучитьEmailОганизации(Филиалы.Организация);
		Если ЗначениеЗаполнено(Почта) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьВМассивБезДублей(АдресаПочты, Почта);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПочтаВЧеке.СписокВыбора.ЗагрузитьЗначения(АдресаПочты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуДатПервыхПокупокСертификатов()
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОстаткиПоСертификатамОстатки.Сертификат КАК Сертификат
	               |ПОМЕСТИТЬ ОстаткиПоНенулевымСертификатам
	               |ИЗ
	               |	РегистрНакопления.ОстаткиПоСертификатам.Остатки КАК ОстаткиПоСертификатамОстатки
	               |ГДЕ
	               |	ОстаткиПоСертификатамОстатки.СуммаПокупкиОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиПоСертификатам.Сертификат КАК Сертификат,
	               |	МИНИМУМ(ОстаткиПоСертификатам.Период) КАК ПерваяПродажа
	               |ПОМЕСТИТЬ ПервыеПродажиСертификатов
	               |ИЗ
	               |	ОстаткиПоНенулевымСертификатам КАК ОстаткиПоНенулевымСертификатам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПоСертификатам КАК ОстаткиПоСертификатам
	               |		ПО ОстаткиПоНенулевымСертификатам.Сертификат = ОстаткиПоСертификатам.Сертификат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиПоСертификатам.Сертификат";
	
	Запрос.Выполнить();
	
	Возврат МВТ;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписки()
	
	ЗаполнитьСписокСертификатов();
	ЗаполнитьСписокДокументов();	
	ЗаполнитьСписокВыбораEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыОжидания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Отмена" Тогда 
		ОтменаПробитияЧеков = Истина;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти