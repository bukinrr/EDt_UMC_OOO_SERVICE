#Область ПрограммныйИнтерфейс

// Вычисляет имена форм, для которых сохранены настройки у пользователя
//
// Параметры:
//  Пользователь - Строка	 - имя пользователя.
// 
// Возвращаемое значение:
//  СписокЗначений - имена и представления форм с настройками.
//
Функция ПолучитьСписокФормСНастройками(Пользователь) Экспорт
	
	СписокФорм = ПолучитьСписокФорм();
	
	СписокФормСНастройками = Новый СписокЗначений;
	
	ВидыНастроек = ВидыНастроек();
	
	НастройкиПользователя = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("Пользователь", Пользователь));
	
	Пока НастройкиПользователя.Следующий() Цикл
		
		НадоПрервать = Истина;
		Для Каждого ВидНастрйки Из ВидыНастроек Цикл
			Если Прав(НастройкиПользователя.КлючОбъекта, СтрДлина(ВидНастрйки)) = ВидНастрйки Тогда
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НадоПрервать Тогда Продолжить; КонецЕсли;
		
		Для Каждого Форма Из СписокФорм Цикл
			
			Если Лев(НастройкиПользователя.КлючОбъекта, СтрДлина(Форма.Значение)) = Форма.Значение Тогда
				
				Если СписокФормСНастройками.НайтиПоЗначению(Форма.Значение) = Неопределено Тогда
					
					СписокФормСНастройками.Добавить(Форма.Значение, Форма.Представление);
				
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокФормСНастройками;
	
КонецФункции

// Копирует настройки одного пользователя ИБ другому.
//
// Параметры:
//  ПользовательИсточник		 - Строка - имя пользователя ИБ, по которому хранятся настройки.
//  МассивНастроекДляКопирования - Массив - СписокЗначений массив строк каждая из которых полное имя формы.
//	ПользователиПриемники		 - Массив - Пользователи приемниики.
//
Процедура СкопироватьНастройкиФорм(ПользовательИсточник, ПользователиПриемники, МассивНастроекДляКопирования) Экспорт
	
	ОперацияНадНастройкамиФорм("Копирование", ПользовательИсточник, МассивНастроекДляКопирования, ПользователиПриемники);
	
КонецПроцедуры

// Процедура удаляет все настройки пользователя пользователя,
//  имеющие отношения к формам.
//  Пользователь - строка - имя пользователя ИБ.
//  МассивНастроекДляКопирования - массив - массив строк каждая из которых - полное имя формы.
//
// Параметры:
//  Пользователь				 - Строка	 - имя пользователя.
//  МассивНастроекДляУдаления	 - Массив	 - имена настроек.
//
Процедура УдалитьНастройкиФорм(Пользователь, МассивНастроекДляУдаления) Экспорт
	
	ОперацияНадНастройкамиФорм("Удаление", Пользователь, МассивНастроекДляУдаления);
	
КонецПроцедуры

// Процедура удаляет все настройки пользователя пользователя,
//  имеющие отношения к формам.
//
// Параметры:
//  НастройкиДляУдаления - Массив, Строка - имена настроек.
//
Процедура УдалитьНастройкиФормВсем(НастройкиДляУдаления) Экспорт
	
	Если ТипЗнч(НастройкиДляУдаления) = Тип("Строка") Тогда
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить(НастройкиДляУдаления);
	Иначе
		МассивНастроек = НастройкиДляУдаления;
	КонецЕсли;
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ОперацияНадНастройкамиФорм("Удаление", ПользовательИБ.Имя, МассивНастроек);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьСписокФормИзСпискаМетаданныхФорм(Префикс, ПрефиксПредставления, МетаданныеФорм, Картинка, Список)
	
	Для Каждого Форма Из МетаданныеФорм Цикл
		
		Список.Добавить(Префикс + ".Форма." + Форма.Имя, ПрефиксПредставления + "." + Форма.Синоним, Ложь, Картинка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтандартнуюФорму(Префикс, ПрефиксПредставления, ОбъектМетаданных, ИмяФормы, ПредставлениеФормы, Картинка, Список)
	
	Если ОбъектМетаданных["Основная" + ИмяФормы] = Неопределено Тогда
		
		Список.Добавить(Префикс + "." + ИмяФормы, ПрефиксПредставления + "." + ПредставлениеФормы, Ложь, Картинка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСписокФормОбъектаМетаданных(СписокОбъектовМетаданных, ИмяОбъектаМетаданных, ПредставлениеОбъектаМетаданных, ИменаСтандартныхФорм, Картинка, Список)
	
	Для Каждого Объект Из СписокОбъектовМетаданных Цикл
		
		Префикс = ИмяОбъектаМетаданных + "." + Объект.Имя;
		ПрефиксПредставления = ПредставлениеОбъектаМетаданных + "." + Объект.Синоним;
		
		ПолучитьСписокФормИзСпискаМетаданныхФорм(Префикс, ПрефиксПредставления, Объект.Формы, Картинка, Список);
		
		Для Каждого ИмяСтандартнойФормы Из ИменаСтандартныхФорм Цикл
			
			ДобавитьСтандартнуюФорму(Префикс, ПрефиксПредставления, Объект, ИмяСтандартнойФормы.Значение, ИмяСтандартнойФормы.Представление, Картинка, Список);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает список форм, в конфигурации, при этом заполняются следующие поля -
//  Значение - имя формы, идентифицирующее ее.
//  Представление - синоним формы.
//  Картинка - картинка соответствующая объекту, к которому форма имеет отношение.
//
// Параметры:
//  Список	 - СписокЗначений	 - список значений, в который будут добавлены описания форм.
//
Функция ПолучитьСписокФорм()
	
	Список = Новый СписокЗначений;
	
	Для Каждого Форма Из Метаданные.ОбщиеФормы Цикл
		
		Список.Добавить("ОбщаяФорма." + Форма.Имя, "Общая форма." + Форма.Синоним, Ложь, БиблиотекаКартинок.Форма);
		
	КонецЦикла;

	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта", "Форма объекта");
	ИменаСтандартныхФорм.Добавить("ФормаГруппы", "Форма группы");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбораГруппы", "Форма выбора группы");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Справочники, "Справочник", "Справочник", ИменаСтандартныхФорм, БиблиотекаКартинок.Справочник, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма", "Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.КритерииОтбора, "КритерийОтбора", "Критерий отбора", ИменаСтандартныхФорм, БиблиотекаКартинок.КритерийОтбора, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСохранения", "Форма сохранения");
	ИменаСтандартныхФорм.Добавить("ФормаЗагрузки", "Форма выбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ХранилищаНастроек, "ХранилищеНастроек", "Хранилище настроек", ИменаСтандартныхФорм, БиблиотекаКартинок.ХранилищеНастроек, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта", "Форма объекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Документы, "Документ", "Документ", ИменаСтандартныхФорм, БиблиотекаКартинок.Документ, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма", "Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ЖурналыДокументов, "ЖурналДокументов", "Журнал документов", ИменаСтандартныхФорм, БиблиотекаКартинок.ЖурналДокументов, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Перечисления, "Перечисление", "Перечисление", ИменаСтандартныхФорм, БиблиотекаКартинок.Перечисление, Список);

	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма", "Форма");
	ИменаСтандартныхФорм.Добавить("ФормаНастроек", "Форма настроек");
	ИменаСтандартныхФорм.Добавить("ФормаВарианта", "Форма варианта");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Отчеты, "Отчет", "Отчет", ИменаСтандартныхФорм, БиблиотекаКартинок.Отчет, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("Форма", "Форма");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Обработки, "Обработка", "Обработка", ИменаСтандартныхФорм, БиблиотекаКартинок.Обработка, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаЗаписи", "Форма записи");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыСведений, "РегистрСведений", "Регистр сведений", ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрСведений, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыНакопления, "РегистрНакопления", "Регистр накопления", ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрНакопления, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта", "Форма объекта");
	ИменаСтандартныхФорм.Добавить("ФормаГруппы", "Форма группы");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбораГруппы", "Форма выбора группы");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыВидовХарактеристик, "ПланВидовХарактеристик", "План видов характеристик", ИменаСтандартныхФорм, БиблиотекаКартинок.ПланВидовХарактеристик, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта", "Форма объекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыСчетов, "ПланСчетов", "План счетов", ИменаСтандартныхФорм, БиблиотекаКартинок.ПланСчетов, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыБухгалтерии, "РегистрБухгалтерии", "Регистр бухгалтерии", ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрБухгалтерии, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта", "Форма объекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.ПланыВидовРасчета, "ПланВидовРасчета", "План видов расчета", ИменаСтандартныхФорм, БиблиотекаКартинок.ПланВидовРасчета, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.РегистрыРасчета, "РегистрРасчета", "Регистр расчета", ИменаСтандартныхФорм, БиблиотекаКартинок.РегистрРасчета, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта", "Форма объекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.БизнесПроцессы, "БизнесПроцесс", "Бизнес процесс", ИменаСтандартныхФорм, БиблиотекаКартинок.БизнесПроцесс, Список);
	
	ИменаСтандартныхФорм = Новый СписокЗначений;
	ИменаСтандартныхФорм.Добавить("ФормаОбъекта", "Форма объекта");
	ИменаСтандартныхФорм.Добавить("ФормаСписка", "Форма списка");
	ИменаСтандартныхФорм.Добавить("ФормаДляВыбора", "Форма выбора");
	ПолучитьСписокФормОбъектаМетаданных(Метаданные.Задачи, "Задача", "Задача", ИменаСтандартныхФорм, БиблиотекаКартинок.Задача, Список);
	
	Возврат Список;
	
КонецФункции

Функция ВидыНастроек()
	
	ВидыНастроек = Новый Массив;
	ВидыНастроек.Добавить("/НастройкиОкна");
	ВидыНастроек.Добавить("/НастройкиФормы");
	ВидыНастроек.Добавить("/ТекущиеПользовательскиеНастройки");
	ВидыНастроек.Добавить("/КлючТекущихПользовательскихНастроек");
	
	Возврат ВидыНастроек;
	
КонецФункции

// Процедура удаляет все настройки пользователя пользователя, имеющие отношения к формам.
//
// Параметры:
//  Пользователь				 - Строка	 - имя пользователя.
//  МассивНастроекДляУдаления	 - Массив	 - Строки с именами настроек.
//
Процедура ОперацияНадНастройкамиФорм(Операция, Пользователь, Знач КлючиФорм, ПользователиПриемники = Неопределено)
	
	ВидыНастроек = ВидыНастроек();
	
	НастройкиПользователя = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("Пользователь", Пользователь));
	
	Пока НастройкиПользователя.Следующий() Цикл
		
		НадоПрервать = Истина;
		Для Каждого ВидНастрйки Из ВидыНастроек Цикл
			Если Прав(НастройкиПользователя.КлючОбъекта, СтрДлина(ВидНастрйки)) = ВидНастрйки Тогда
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НадоПрервать Тогда Продолжить; КонецЕсли;
		
		Для Каждого КлючФормы Из КлючиФорм Цикл
			Если Лев(НастройкиПользователя.КлючОбъекта, СтрДлина(КлючФормы)) = КлючФормы Тогда
				
				Если Операция = "Удаление" Тогда
					ХранилищеСистемныхНастроек.Удалить(НастройкиПользователя.КлючОбъекта, "", Пользователь);
				ИначеЕсли Операция = "Копирование" Тогда
					Для Каждого ПользовательПриемник Из ПользователиПриемники Цикл
						ХранилищеСистемныхНастроек.Сохранить(НастройкиПользователя.КлючОбъекта, "", НастройкиПользователя.Настройки, , ПользовательПриемник);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
