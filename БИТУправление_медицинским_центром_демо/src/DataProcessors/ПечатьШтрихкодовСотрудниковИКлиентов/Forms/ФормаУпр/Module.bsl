// Массив типво документов, которые можно выбирать в отборе.
Перем мМассивТиповДокументов;

// Соответствие стандартных видов сравнения и видов сравнения в СКД.
&НаСервере
Перем мСоответствиеВидовСравнения;

&НаКлиенте
Перем мСтарыйрежимПечати;

&НаСервере
Перем мНастройкиФормированияМакетТабДокумента;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция строит и возвращает текст запроса в зависимости от параметров, указанных на форме.
//
Функция ПостроитьТекстЗапроса()
	
	ИмяТаблицы = "";
	Если РежимПечати = 1 Тогда
		ИмяТаблицы = "Сотрудники";
	Иначе
		ИмяТаблицы = "Клиенты";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.Код,
	|	Сотрудники.Родитель,
	|	Сотрудники.Наименование,
	|	"""" КАК ТекущаяДата,
	|	"""" КАК ТекущееВремя,
	|	"""" КАК ТекущаяДатаИВремя,
	|	"""" КАК ИмяПользователя,
	|	ШКиЦены.Штрихкод,
	|	ШКиЦены.ТипШтрихкода КАК ТипШтрихкода,
	|	Сотрудники.Фамилия + "" "" + ПОДСТРОКА(Сотрудники.Имя, 1, 1) + "". "" + ПОДСТРОКА(Сотрудники.Отчество, 1, 1) + ""."" КАК ФИО
	|ИЗ
	|	Справочник."+ИмяТаблицы+" КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Штрихкоды.Штрихкод КАК Штрихкод,
	|			Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
	|			Штрихкоды.Владелец КАК Владелец
	|		ИЗ
	|			РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ГДЕ
	|			Штрихкоды.Владелец ССЫЛКА Справочник."+ИмяТаблицы+") КАК ШКиЦены
	|		ПО Сотрудники.Ссылка = ШКиЦены.Владелец
	|ГДЕ
	|	Сотрудники.ЭтоГруппа = ЛОЖЬ
	|{ГДЕ Сотрудники.Ссылка.* КАК Ссылка}
	|";
	
	Если ИмяТаблицы = "Клиенты" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сотрудники", "Клиенты");
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура устанавливает или снимает пометки у строк табличной части "Товары".
//
&НаСервере
Процедура УстановитьПометки(Пометка)
	
	тов = РеквизитФормыВЗначение("Товары");
	тов.ЗаполнитьЗначения(Пометка, "Печатать");
	ЗначениеВРеквизитФормы(тов, "Товары");
	
КонецПроцедуры

// Процедура заполняет табличную часть Товары по выбранным параметрам и отборам.
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьТовары()
	
	допТовары = РеквизитФормыВЗначение("Товары");
	обработка = РеквизитФормыВЗначение("ОбработкаОбъект");
	
	допТовары.Очистить();
	ТекстЗапроса = ПостроитьТекстЗапроса();
	
	// Подготовим макет и настройки СКД.
	масОбязательныхПолей = Новый Массив;
	масОбязательныхПолей.Добавить("Сотрудник.Штрихкод");
	масОбязательныхПолей.Добавить("Сотрудник.ТипШтрихкода");
	масОбязательныхПолей.Добавить("Сотрудник.Ссылка");
	
	ДобСуффиксИмениМакета = "";
	Если РежимПечати = 2 Тогда
		ДобСуффиксИмениМакета = "К";
	КонецЕсли;
	
	ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона"+ДобСуффиксИмениМакета;
	МакетТабДокумента = Обработки.ПечатьШтрихкодовСотрудниковИКлиентов.ПолучитьМакет("ЭталонныйМакетУпр");
	НастройкиФормирования = УправлениеШаблонамиСервер.ПодготовитьсяКЗаполнениюТабличногоШаблона(обработка.Метаданные(), МакетТабДокумента, масОбязательныхПолей, ТекстЗапроса,, обработка);
	
	// Добавим отборы
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения <> Неопределено Тогда
			ЛевоеЗначение	= СтрЗаменить(Строка(ЭлементОтбора.ЛевоеЗначение), "Ссылка", "Сотрудник.Ссылка");
			УправлениеШаблонамиСервер.ДобавитьОтборВСКДПоПолномуИмениПоля(НастройкиФормирования, ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
				
	КонецЦикла;
	
	// Выполним запрос
	УправлениеШаблонамиСервер.ПодготовитьПроцессорКомпоновкиДанных(НастройкиФормирования);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТабРезультат = ПроцессорВывода.Вывести(НастройкиФормирования.ПроцессорКомпоновкиДанных, Истина);
	
	МассивНаУдалениие = Новый СписокЗначений;
	
	// Переберем полученные данные.
	Для Каждого СтрРезультата Из ТабРезультат Цикл
		
		УправлениеШаблонамиСервер.ЗаполнитьТаблицуВычисляемыхПолейПоРезультату(СтрРезультата, ТабРезультат.Колонки, НастройкиФормирования.табВычПолей, ТабРезультат);
		
		НоваяСтрока = допТовары.Добавить();
		
		НоваяСтрока.табВычПолей           = НастройкиФормирования.табВычПолей.Скопировать();
		НоваяСтрока.Печатать              = Истина;
		НоваяСтрока.КоличествоЭкземпляров = 1;
		
		СтрокаСПолемСсылка = НоваяСтрока.табВычПолей.Найти("Номенклатура.Ссылка", "Поле");
		
		Для Каждого СтрокаПоля Из НоваяСтрока.табВычПолей Цикл
			
			СтрокаНаименованияПоля = СтрЗаменить(СтрокаПоля.Поле, ".", "_");
			
			Если допТовары.Колонки.Найти(СтрокаНаименованияПоля) <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(СтрокаПоля.Значение) Тогда
					НоваяСтрока[СтрокаНаименованияПоля] = СтрокаПоля.Значение;
				КонецЕсли; 	
				
				Если НЕ ЗначениеЗаполнено(СтрокаПоля.Значение) И Найти(СтрокаНаименованияПоля, "_Штрихкод") > 0 Тогда
					МассивНаУдалениие.Добавить(допТовары.Индекс(НоваяСтрока)); 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТолькоСоШтрихкодами Тогда
		
		МассивНаУдалениие.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		Для Каждого значение Из МассивНаУдалениие Цикл
			допТовары.Удалить(значение.Значение);
		КонецЦикла;	
		
		МассивНаУдалениие.Очистить();
		
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(допТовары, "Товары");
	ЗначениеВРеквизитФормы(обработка, "ОбработкаОбъект"); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Процедура осуществляет печать по выбранному шаблону.
//
&НаКлиенте
Процедура Печать()
	
	КоличествоЭтикеток = ПроверкаПередПечатью();
	
	Если КоличествоЭтикеток > 0 Тогда
		
		Состояние("Фомирование этикеток...");
		СтруктураНаПечать = ПечатьСервер(КоличествоЭтикеток);
		ПечатьДокументовКлиент.ВывестиНапечататьДокумент(СтруктураНаПечать,"Печать_штрихкодов_сотрудников");
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПроверкаПередПечатью()
	
	допТовары = РеквизитФормыВЗначение("Товары");
	обработка = РеквизитФормыВЗначение("ОбработкаОбъект");
	
	Если допТовары.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена табличная часть ""Список к печати""!");
		Возврат 0;
		
	КонецЕсли;
	
	// Подсчитаем общее количество этикеток к печати.
	КоличествоЭтикеток = 0;
	Для Каждого СтрокаТовары Из допТовары Цикл
		
		Если СтрокаТовары.Печатать Тогда
			КоличествоЭтикеток = КоличествоЭтикеток + СтрокаТовары.КоличествоЭкземпляров;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЭтикеток = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано строк для печати!");
		Возврат 0;
	Иначе
		Возврат КоличествоЭтикеток;
	КонецЕсли;
	
КонецФункции	

&НаСервере
Функция  ПечатьСервер(КоличествоЭтикеток)
	
	обработка = РеквизитФормыВЗначение("ОбработкаОбъект");
	
	ВнешняяКомпонента = ГенерацияШтрихкодаСерверПовтИсп.ПодключитьКомпонентуГенерацииИзображенияШтрихкода("");
	
	Таб = Новый ТабличныйДокумент;
	
	ТекстЗапроса = ПостроитьТекстЗапроса();
	
	// Подготовим макет и настройки СКД.
	масОбязательныхПолей = Новый Массив;
	
	ДобСуффиксИмениМакета = "";
	Если РежимПечати = 2 Тогда
		ДобСуффиксИмениМакета = "К";
		масОбязательныхПолей.Добавить("Клиент.Штрихкод");
	Иначе
		масОбязательныхПолей.Добавить("Сотрудник.Штрихкод");
	КонецЕсли;
	
	МакетТабДокумента = Обработки.ПечатьШтрихкодовСотрудниковИКлиентов.ПолучитьМакет("ЭталонныйМакетУпр");
	
	НастройкиФормирования = УправлениеШаблонамиСервер.ПодготовитьсяКЗаполнениюТабличногоШаблона(обработка.Метаданные(), МакетТабДокумента, масОбязательныхПолей, ТекстЗапроса,, обработка);
	
	// Добавим отборы
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения <> Неопределено Тогда
			ЛевоеЗначение	= СтрЗаменить(Строка(ЭлементОтбора.ЛевоеЗначение), "Ссылка", 
							?(РежимПечати = 1, "Сотрудник.Ссылка","Клиент.Ссылка"));
			УправлениеШаблонамиСервер.ДобавитьОтборВСКДПоПолномуИмениПоля(НастройкиФормирования, ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
				
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Таб, МакетТабДокумента, , "ОбластьПечати");
	
	// Выполним запрос
	УправлениеШаблонамиСервер.ПодготовитьПроцессорКомпоновкиДанных(НастройкиФормирования);
	
	КоличествоПоВертикали   = 15;
	КоличествоПоГоризонтали = 4;
	
	Строки  = 0;
	Колонки = 0;
	
	// Переберем полученные данные.
	ТЗ = РеквизитФормыВЗначение("Товары");
	Для Каждого СтрокаТовары Из ТЗ Цикл // _Товары Цикл
		
		Если Не СтрокаТовары.Печатать Тогда
			Продолжить;
		КонецЕсли;
		
		Для Инд = 1 По СтрокаТовары.КоличествоЭкземпляров Цикл
			
			Строки = Строки + 1;
			Колонки = ?(Колонки = КоличествоПоГоризонтали, 1, Колонки + 1);
			
			ИмяОбласти = НастройкиФормирования.МакетТабДокумента.ОбластьПечати.Имя;
			Область = НастройкиФормирования.МакетТабДокумента.ПолучитьОбласть(ИмяОбласти);
			
			Для СчК = 1 По Область.ШиринаТаблицы Цикл
				
				Для СчС = 1 По Область.ВысотаТаблицы Цикл
					
					Ячейка = Область.Область(СчС, СчК);
					
					УправлениеШаблонамиСервер.ВыполнитьЗаменыВТекстеПоВычисляемымПолям(СтрокаТовары.табВычПолей, Ячейка.Текст, Ячейка.Формат);
					
				КонецЦикла;
				
			КонецЦикла;
			
			КодШтрихкода = ?(ЗначениеЗаполнено(СтрокаТовары.Сотрудник_Штрихкод), СтрокаТовары.Сотрудник_Штрихкод, Неопределено);
			ТипКода = Штрихкодирование.ПолучитьЗначениеТипаШтрихкодаДляЭУ(СтрокаТовары.Сотрудник_ТипШтрихкода);
			
			Для каждого Рисунок Из Область.Рисунки Цикл
				Если Лев(Рисунок.Имя,8) = Штрихкодирование.ПолучитьИмяПараметраШтрихкод() Тогда
					
					Если ВнешняяКомпонента = Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'");
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",          119);
					ПараметрыШтрихкода.Вставить("Высота",          50);
					ПараметрыШтрихкода.Вставить("Штрихкод",        ?(ЗначениеЗаполнено(КодШтрихкода), КодШтрихкода, "0000000000000"));
					ПараметрыШтрихкода.Вставить("ТипКода",         ?(ТипКода >= 0, ТипКода, 1));
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",    8);
					
					Рисунок.Картинка = Штрихкодирование.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
					
				КонецЕсли;
			КонецЦикла;
			
			Если Колонки = 1 Тогда
				Таб.Вывести(Область);
			Иначе
				Таб.Присоединить(Область);
			КонецЕсли;
			
			Если Строки = КоличествоПоВертикали * КоличествоПоГоризонтали Тогда
				
				Если КоличествоПоГоризонтали = 1 Тогда
					Таб.ВывестиВертикальныйРазделительСтраниц();
				КонецЕсли;
				
				Таб.ВывестиГоризонтальныйРазделительСтраниц();
				Строки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // По количеству экземпляров
		
	КонецЦикла;
	
	// Выведем таблицу на экран
	Таб.АвтоМасштаб = Истина;
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Таб.ПолеСверху = 0;
	Таб.ПолеСнизу  = 0;
	Таб.ПолеСправа = 0;
	Таб.ПолеСлева  = 0;
	
	Возврат  УниверсальныеМеханизмыСервер.НапечататьДокумент(Таб,1,,?(РежимПечати = 1, "Штрихкоды сотрудников", "Штрихкоды клиентов"));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РежимПечати <> 1 Или РежимПечати <> 2 Тогда
		РежимПечати = 1;
	КонецЕсли;	
	
	ЗаполнитьНачальныеНастройкиОтбора();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьСохраненныеНастройкиОтбора();
	
	Если Параметры.Свойство("РежимПечати") Тогда
		РежимПечати = Параметры.РежимПечати;
	Иначе
		РежимПечати = 1;
	КонецЕсли;	
	
	ЗагрузитьНастройкиОтбораПоУмолчанию(Ложь);
	
	мСтарыйрежимПечати = РежимПечати;
	ОбновитьЗаголовокКнопкиОткрытияКарточки();
	
КонецПроцедуры 

// Процедура - обработчик события "ПриЗакрытии" формы.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПриЗакрытии();	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПриЗакрытии()
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Шаблон"                 , "Шаблон");
	СтруктураНастроек.Вставить("ХранилищеОтбора"        , Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
	СтруктураНастроек.Вставить("РежимПечати"        , РежимПечати);
	
	ХранилищеВариантовОтчетов.Сохранить("ПечатьШтрихкодовСотрудниковИКлиентов", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры	

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

// Процедура - обработчик события "ПриИзменении" поля выбора "Режим печати".
//
&НаКлиенте
Процедура ПолеВыбораРежимаПриИзменении(Элемент)
	
	Если мСтарыйрежимПечати = РежимПечати Тогда 
		Возврат
	КонецЕсли;
	
	мСтарыйрежимПечати = РежимПечати;
	ОбновитьЗаголовокКнопкиОткрытияКарточки();
	
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	Товары.Очистить();
	
КонецПроцедуры

&НАКлиенте
Процедура ОбновитьЗаголовокКнопкиОткрытияКарточки()
	Если РежимПечати = 1 Тогда
		Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ОткрытьСсылку.Заголовок = "Открыть карточку сотрудника";
	Иначе
		Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ОткрытьСсылку.Заголовок = "Открыть карточку клиента";
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийТабличнойЧастиТовары

// Процедура - обработчик события "ПередОкончаниемРедактирования" поля ТабличноеПолеОтбора.
//
&НаКлиенте
Процедура ТабличноеПолеОтбораПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И Лев(Элемент.ТекущиеДанные.ЛевоеЗначение, ?(Найти(Элемент.ТекущиеДанные.ЛевоеЗначение, ".")>0,Найти(Элемент.ТекущиеДанные.ЛевоеЗначение, "."), 1) - 1) = "Документ" 
		И Элемент.ТекущиеДанные.ПутьКДанным = "Документ" 
		И (Элемент.ТекущиеДанные.ВидСравнения <> ВидСравнения.Равно 
		И Элемент.ТекущиеДанные.ВидСравнения <> ВидСравнения.НеРавно 
		И Элемент.ТекущиеДанные.ВидСравнения <> ВидСравнения.ВСписке 
		И Элемент.ТекущиеДанные.ВидСравнения <> ВидСравнения.НеВСписке) Тогда
		
		Если Не ОтменаРедактирования Тогда
			
			Предупреждение("При отборе по документу вид сравнения может быть только ""Равно"", ""Не равно"", ""В списке"" или ""Не в списке""!");
			Отказ = Истина;
			
		Иначе
			
			Элемент.Значение.Удалить(Элемент.Значение.Индекс(Элемент.ТекущиеДанные));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОтборПоДокументу = Ложь;
	
	Для Каждого СтрокаОтбор Из компоновщикнастроек.Настройки.Отбор.Элементы Цикл
		
		ПозТочки = Найти(Элемент.ТекущиеДанные.ЛевоеЗначение, ".");
		Если ПозТочки > 0 Тогда
			
			Если Лев(Элемент.ТекущиеДанные.ЛевоеЗначение, ПозТочки) = "Документ" Тогда
				
				Если ЕстьОтборПоДокументу Тогда
					
					Если Не ОтменаРедактирования Тогда
						
						Предупреждение("Может быть установлен только один отбор по документу!");
						Отказ = Истина;
					Иначе
						
						Элемент.Значение.Удалить(Элемент.Значение.Индекс(СтрокаОтбор));
						
					КонецЕсли;
					
					Прервать;
					
				Иначе
					ЕстьОтборПоДокументу = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Процедура - обработчик события "ПередОкончаниемРедактирования" поля Товары.
//
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные.КоличествоЭкземпляров <= 0 Тогда
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сотрудник_Ссылка) Тогда
			
			Элемент.ТекущиеДанные.КоличествоЭкземпляров = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройкиОтбора()
	
	Если РежимПечати = 1 Тогда
		СхемаКомпоновкиДанных = обработки.ПечатьШтрихкодовСотрудниковИКлиентов.ПолучитьМакет("СКДСотрудник");
	Иначе	
		СхемаКомпоновкиДанных = обработки.ПечатьШтрихкодовСотрудниковИКлиентов.ПолучитьМакет("СКДКлиент");
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);	
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСохраненныеНастройкиОтбора()
	
	ЗначениеНастроекОтбора = ХранилищеВариантовОтчетов.Загрузить("ПечатьШтрихкодовСотрудниковИКлиентов",  "СтруктураНастроек");
	Если ЗначениеНастроекОтбора <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ЗначениеНастроекОтбора.ХранилищеОтбора.Получить());
		Параметры.РежимПечати = ?(ЗначениеНастроекОтбора.Свойство("РежимПечати"), ЗначениеНастроекОтбора.РежимПечати, 1);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	Печать();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию(ЗагружатьНастройки = Истина)
	
	об = РеквизитФормыВЗначение("ОбработкаОбъект");
	
	Если РежимПечати = 2 Тогда
		имяМ = "СКДКлиент";
	Иначе
		имяМ = "СКДСотрудник";
	КонецЕсли;
	
	СхемаКомпоновкиДанных = об.ПолучитьМакет(имяМ);
	ВремХранилищеСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ВремХранилищеСКД)
	);
	Если ЗагружатьНастройки Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(об, "ОбработкаОбъект");
	
КонецПроцедуры // ЗагрузитьНастройкиОтбораПоУмолчанию()

&НаКлиенте
Процедура ОткрытьТекущуюСсылку(Команда)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекДанные.Сотрудник_Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСотрудник_ФИООткрытие(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекДанные.Сотрудник_Ссылка);
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьТабличнуюЧастьТовары();
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Выделить все" командной панели табличного поля "Товары".
//
&НаКлиенте
Процедура КоманднаяПанельТоварыВыделитьВсе(Кнопка)
	
	УстановитьПометки(Истина);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Очистить выделение" командной панели табличного поля "Товары".
//
&НаКлиенте
Процедура КоманднаяПанельТоварыОчиститьВыделение(Кнопка)
	
	УстановитьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельТоварыЗаполнитьПоКоличеству(Кнопка)
	
	КоличествоЭкземпляров = 1;
	
	Если Не ВвестиЧисло(КоличествоЭкземпляров, "Введите количество экземпляров", 4, 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоЭкземпляров <= 0 Тогда
		Предупреждение("Недопустимое количество экземпляров!");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если СтрокаТовары.Печатать Тогда
			
			СтрокаТовары.КоличествоЭкземпляров = КоличествоЭкземпляров;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////

мСоответствиеВидовСравнения = Новый Соответствие;
мСоответствиеВидовСравнения.Вставить(ВидСравнения.Больше,              ВидСравненияКомпоновкиДанных.Больше);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.БольшеИлиРавно,      ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.ВИерархии,           ВидСравненияКомпоновкиДанных.ВИерархии);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.ВСписке,             ВидСравненияКомпоновкиДанных.ВСписке);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.ВСпискеПоИерархии,   ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.Меньше,              ВидСравненияКомпоновкиДанных.Меньше);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.МеньшеИлиРавно,      ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.НеВИерархии,         ВидСравненияКомпоновкиДанных.НеВИерархии);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.НеВСписке,           ВидСравненияКомпоновкиДанных.НеВСписке);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.НеВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.НеРавно,             ВидСравненияКомпоновкиДанных.НеРавно);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.НеСодержит,          ВидСравненияКомпоновкиДанных.НеСодержит);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.Равно,               ВидСравненияКомпоновкиДанных.Равно);
мСоответствиеВидовСравнения.Вставить(ВидСравнения.Содержит,            ВидСравненияКомпоновкиДанных.Содержит);

#КонецОбласти

#КонецОбласти
