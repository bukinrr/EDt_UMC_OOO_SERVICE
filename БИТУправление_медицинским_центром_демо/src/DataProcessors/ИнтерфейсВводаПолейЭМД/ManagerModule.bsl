#Область ПрограммныйИнтерфейс

#Область ОпределениеФормыВвода // Форма ввода по назначению редактируемого поля.

Функция ИмяФормыВвода(КодировкаПоля) Экспорт 
	
	Перем ИмяФормы;
	
	Если ТипЗнч(КодировкаПоля) = Тип("ПеречислениеСсылка.КодировкаПолейЭМД") Тогда
		ИмяФормы = ИмяФормыВнутреннейКодировкиПоля(КодировкаПоля);
	ИначеЕсли ТипЗнч(КодировкаПоля) = Тип("СправочникСсылка.КлассификаторыМинЗдрава") Тогда
		ИмяФормы = ИмяФормыКодировкиПоляПоКлассификатору(КодировкаПоля);
	КонецЕсли;
	
	ПроверитьНаличиеВстроеннойФормы(ИмяФормы);
	
	Возврат ИмяФормы;
	
КонецФункции

Функция КодировкаПоляЭМДИмеетИнтерфейсВвода(КодировкаПоля) Экспорт
	
	Возврат ЗначениеЗаполнено(ИмяФормыВвода(КодировкаПоля));
	
КонецФункции

#КонецОбласти

#Область СвязиНазначений

// Связи назначений параметров шаблонов для операции ввода значения параметра приема.
// 
// Возвращаемое значение:
//  Соответствие - где Ключ: СправочникСсылка.КлассификаторыМинЗдрава, а значение - Массив из того же справочника.
//
Функция СвязиНазначенийПараметровДляВвода() Экспорт
	
	СоответствиеСвязей = Новый Соответствие;
	
	// Добавление конкретных случаев связи
	СвязиНазначенийДобавитьСвязь_АртериальноеДавление(СоответствиеСвязей);
	// ...
	
	Возврат СоответствиеСвязей;
	
КонецФункции

#КонецОбласти

#Область ИнфекционныеОтметкиАнамнезаВСтационаре

// Значение по умолчанию для поля "Инфекционные отметки анамнеза в стационаре значение по умолчанию"
//  (для карты 003/у по приказу 530н).
//
// Параметры:
//  ДокументОбъект	 - ДокументСсылка.Прием, СправочникСсылка.МедицинскиеКарты - документ, для которого требуется значение.
//  ШаблонПриема	 - СправочникСсылка.ШаблоныHTML	 - шаблон, в рамках которого требуется значение.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ИнфекционныеОтметкиАнамнезаВСтационаре_ЗначениеПоУмолчанию(ДокументОбъект = Неопределено, ШаблонПриема = Неопределено) Экспорт
	
	ЗначениеПоУмолчанию = "туберкулез: нет;  ВИЧ-инфекции: нет;  вирусные гепатиты: нет;  сифилис: нет;  COVID-19: нет";
	
	// Для не первичного осмотра стационарного больного, а дальнейших осмотров в стационаре более актуально пустое значение по умолчанию.
	ЭтоШаблонОсмотр_ВидМД_341 = Ложь;
	ТребуетсяПустоеЗначение = Ложь;
	Если ТипЗнч(ШаблонПриема) = Тип("СправочникСсылка.ШаблоныHTML") Тогда
		ЭтоШаблонОсмотр_ВидМД_341 = ШаблонПриема.ВидМедицинскойДокументации.УИДЕГИСЗ = 341; // Осмотр врачом стационара.
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("СправочникСсылка.МедицинскиеКарты") Тогда
		ТребуетсяПустоеЗначение = Истина;
	Иначе
		Если ДокументОбъект <> Неопределено Тогда
			
			Шаблоны = Новый Массив;
			
			Попытка
				Для Каждого СтрокаШаблон Из ДокументОбъект.Шаблоны Цикл
					Если ЗначениеЗаполнено(СтрокаШаблон.ШаблонПриема)
						И ЗначениеЗаполнено(СтрокаШаблон.ШаблонПриема.ВидМедицинскойДокументации)
						И СтрокаШаблон.ШаблонПриема.ВидМедицинскойДокументации.УИДЕГИСЗ = 341 // Осмотр врачом стационара.
					Тогда
						ЭтоШаблонОсмотр_ВидМД_341 = Истина;
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоШаблонОсмотр_ВидМД_341 Тогда
		ЗначениеПоУмолчанию = "";
	ИначеЕсли ТребуетсяПустоеЗначение Тогда
		ЗначениеПоУмолчанию = СтрЗаменить(ЗначениеПоУмолчанию, "нет","________");
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

#КонецОбласти
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОпределениеФормыВвода // Форма ввода по назначению редактируемого поля.

Функция ИмяФормыВнутреннейКодировкиПоля(КодировкаПоля)
	
	Перем ИмяФормы;
	
	ИмяКодировкиПоля = ОбщегоНазначения.ИмяЗначенияПеречисления(КодировкаПоля);
	
	МетаданныеОбработки = Метаданные.Обработки.ИнтерфейсВводаПолейЭМД;
	
	Для Каждого Форма Из МетаданныеОбработки.Формы Цикл
		Если Форма.Имя = ИмяКодировкиПоля Тогда
			ИмяФормы = Форма.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем полное имя формы.
	Если ЗначениеЗаполнено(ИмяФормы) Тогда
		ИмяФормы = МетаданныеОбработки.ПолноеИмя() + ".Форма." + ИмяФормы;
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

Функция ИмяФормыКодировкиПоляПоКлассификатору(КодировкаПоля)
	
	Перем ИмяФормы;
	
	КодПоля = КодировкаПоля.УИДЕГИСЗ;
	Вид		= КодировкаПоля.ВидКлассификатора;
	
	Если Вид = Перечисления.ВидыКлассификаторовМинЗдрава.КодируемыеПоляCDAДокументов Тогда
		ИмяФормы = СоответствиеФормПолямПоКлассификатору_КодируемыеПоляCDA().Получить(КодПоля);
	Иначе
		ИмяФормы = СоответствиеФормПолямПоКлассификатору_ВитальныеПараметры().Получить(КодПоля);
	КонецЕсли;	
	
	Возврат ИмяФормы;
	
КонецФункции

Функция СоответствиеФормПолямПоКлассификатору_КодируемыеПоляCDA()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(1004, "Обработка.ИнтерфейсВводаПолейЭМД.Форма.НаличиеТрансфузийВАнамнезе"); 	// Наличие трансфузий в анамнезе.
	Соответствие.Вставить(8037, "Обработка.ИнтерфейсВводаПолейЭМД.Форма.АнатомическаяОбласть");			// Анатомическая локализация.
	Соответствие.Вставить(8007, "Обработка.ИнтерфейсВводаПолейЭМД.Форма.ИнфекционныйАнамнез");			// Перенесенное заболевание.
	Соответствие.Вставить(8038, "Обработка.ИнтерфейсВводаПолейЭМД.Форма.ВводОрганизацииСАдресом");		// Медицинская организация, в которую направлен пациент.
	Соответствие.Вставить(11015,"Обработка.ИнтерфейсВводаПолейЭМД.Форма.ВводОрганизацииСАдресом"); 		// Место, куда направлена выписка.
	
	Возврат Соответствие;
	
КонецФункции

Функция СоответствиеФормПолямПоКлассификатору_ВитальныеПараметры()
	
	Соответствие = Новый Соответствие;
	
	//Соответствие.Вставить(2, "Обработка.ИнтерфейсВводаПолейЭМД.Форма.АртериальноеДавление"); // Артериальное давление диастолическое.
	//Соответствие.Вставить(3, "Обработка.ИнтерфейсВводаПолейЭМД.Форма.АртериальноеДавление"); // Артериальное давление систолическое.
	
	Возврат Соответствие;
	
КонецФункции

// Частичная проверка
Функция ПроверитьНаличиеВстроеннойФормы(ИмяФормы)
	
	// Проверки наличия встроенной формы
	Если ЗначениеЗаполнено(ИмяФормы) Тогда
		
		ЧастиИмени = СтрРазделить(ИмяФормы, ".");
		Если НРег(ЧастиИмени[0]) = НРег("ОбщаяФорма") Тогда
			Если Метаданные.ОбщиеФормы.Найти(ЧастиИмени[1]) = Неопределено Тогда
				ИмяФормы = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СвязиНазначений

Процедура СвязьНазначенийДобавитьВСоответствиеСвязей(СоответствиеСвязей, НазначениеИсходное, НазначениеЗависимое)
	
	МассивЗависимых = СоответствиеСвязей.Получить(НазначениеИсходное);
	Если МассивЗависимых <> Неопределено Тогда
		МассивЗависимых.Добавить(НазначениеЗависимое);
	Иначе
		МассивЗависимых = ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(НазначениеЗависимое);
		СоответствиеСвязей.Вставить(НазначениеИсходное, МассивЗависимых);
	КонецЕсли;
	
КонецПроцедуры

// Для взаимных равноправных связей между элементами, переданными как массив.
Процедура СвязьНазначенийДобавитьСвязанныхДругДругуВСоответствиеСвязей(СоответствиеСвязей, Назначения)
	
	Для Каждого Элемент1 Из Назначения Цикл
		Для Каждого Элемент2 Из Назначения Цикл
			Если Элемент1 <> Элемент2 Тогда
				СвязьНазначенийДобавитьВСоответствиеСвязей(СоответствиеСвязей, Элемент1, Элемент2)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
Процедура СвязиНазначенийДобавитьСвязь_АртериальноеДавление(СоответствиеСвязей)
	
	ДиастДавление 	= ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(2, Перечисления.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры);
	СистДавление 	= ИнтеграцияЕГИСЗОбщегоНазначенияПовтИсп.ЭлементКлассификатораПоУИДЕГИСЗ(3, Перечисления.ВидыКлассификаторовМинЗдрава.ВитальныеПараметры);
	
	Если ЗначениеЗаполнено(ДиастДавление) И ЗначениеЗаполнено(СистДавление) Тогда
		// Добавление равноправных связей.
		Назначения = ОбщегоНазначенияБИТКлиентСервер.НовыйМассив(ДиастДавление, СистДавление);
		СвязьНазначенийДобавитьСвязанныхДругДругуВСоответствиеСвязей(СоответствиеСвязей, Назначения);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти