
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Элементы.Вариант.СписокВыбора.Добавить("ПоОтбору",      НСтр("ru = 'По отбору'"));
	Элементы.Вариант.СписокВыбора.Добавить("ПоДокументу",   НСтр("ru = 'По товарам документа'"));
	
	ИмяТаблицыВыборки = "Товары";
	
	Если ЗначениеЗаполнено(Параметры.ВариантЗаполнения) И (Параметры.ВариантЗаполнения = "ПоДокументу") Тогда
		
		Документ = Параметры.Документ;
		Если Параметры.Свойство("ИмяТаблицыВыборки")
			И ЗначениеЗаполнено(Параметры.ИмяТаблицыВыборки) Тогда
			ИмяТаблицыВыборки = Параметры.ИмяТаблицыВыборки;
		КонецЕсли;
		ВариантЗаполнения = "ПоДокументу";
		Если Параметры.Свойство("ВыгружатьЦену") Тогда
			ВыгружатьЦену = Параметры.ВыгружатьЦену;
		КонецЕсли;
		Если Параметры.Свойство("ВидЦены") Тогда
			Объект.ВидЦены = Параметры.ВидЦены;
		КонецЕсли;
		Параметры.Свойство("ПрефиксРаздела", ПрефиксРаздела);
		Параметры.Свойство("АдресТоваровВХранилище", АдресТоваровВХранилище);
		Параметры.Свойство("ЭтоСсылочныйОбъект", ЭтоСсылочныйОбъект);
		ЗаполнитьНаСервере();
		Элементы.ОтборТоваров.Видимость = Ложь;
		Элементы.Сообщение.Видимость = ЭтоСсылочныйОбъект;
		ЭтаФорма.Команды.ЗаполнитьТовары.Заголовок = НСтр("ru = 'Обновить'");
		
	Иначе
		
		Элементы.ОтборТоваров.Видимость = Истина;
		Элементы.Сообщение.Видимость = Ложь;
		ВариантЗаполнения = "ПоОтбору";
		Объект.ЦеныНаДату = ТекущаяДатаСеанса();
		Объект.Прейскурант = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ОсновнойПрейскурант");
		
	КонецЕсли;
	
	Элементы.ТоварыАртикул.Видимость = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ПоказыватьАртикул");
	Элементы.ТоварыХарактеристика.Видимость = УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ВестиУчетПоХарактеристикам");
	
	ТолькоСОстатком = Истина;
	ТолькоСоШтрихкодами = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВариантЗаполнения = Настройки["ВариантЗаполнения"];
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ОшибкиВыгрузки", Истина);
		Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Товары успешно выгружены.'"); 
		Иначе
			ТекстСообщения = НСтр("ru = 'Товары с незаданным штрихкодами не выгружены.'"); 
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВыполнить(Команда)
	
	ЭтаФорма.Доступность = Ложь;
	
	ОчиститьСообщения();
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	Элементы.Товары.Обновить();
	
	ОповещенияПриЗавершение = Новый ОписаниеОповещения("ВыгрузитьВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(ОповещенияПриЗавершение, УникальныйИдентификатор, МассивБазыТоваров(), НЕ ВариантЗаполнения = "ПоДокументу");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ВариантЗаполнения = "ПоОтбору" 
		И НЕ ЗначениеЗаполнено(Объект.Прейскурант)
	Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Прейскурант""'"), , "Объект.Прейскурант", , Отказ);
		Возврат;
	КонецЕсли;

	Если ВариантЗаполнения = "ПоДокументу"
		И ЭтоСсылочныйОбъект
		И НЕ ЗначениеЗаполнено(Документ)
	Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Документ""'"), , "Документ", , Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Объект.Товары.Очистить();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеВТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена.'");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	Элементы.Товары.Обновить();
	
	ЭтаФорма.Доступность = Ложь;
	ОповещенияПриЗавершение = Новый ОписаниеОповещения("ОчиститьДанныеВТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуДанныеВТСД(ОповещенияПриЗавершение, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтборНоменклатуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьТоварыСервер()
	
	ТаблицаНоменклатуры = ПолучитьТаблицуНоменклатуры();
	ВыборкаЦен	 = ПолучитьЦеныНоменклатуры(ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	ВыборкаШК	 = ПолучитьШтрихкодыНоменклатуры(ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	
	ТаблицаНоменклатуры.Колонки.Добавить("КоличествоЭкземпляров", Новый ОписаниеТипов("Число"));
	ТаблицаНоменклатуры.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	ТаблицаНоменклатуры.Колонки.Добавить("ТипШтрихкода");
	ТаблицаНоменклатуры.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));

	ОтборШКМатериал	 = Новый Структура("Номенклатура, Характеристика, Серия, ЕдиницаИзмерения");
	ОтборШКУслуга	 = Новый Структура("Номенклатура, Характеристика, Серия");
	
	ОтборЦеныМатериал	 = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения");
	ОтборЦеныУслуга		 = Новый Структура("Номенклатура, Характеристика");
	ОтборЦеныПХМатериал	 = Новый Структура("Номенклатура, ЕдиницаИзмерения");
	ОтборЦеныПХУслуга	 = Новый Структура("Номенклатура");
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		// Определяем ШК строки.
		ОтборШК = ?(СтрокаНоменклатуры.ЭтоУслуга, ОтборШКУслуга, ОтборШКМатериал);
		ЗаполнитьЗначенияСвойств(ОтборШК, СтрокаНоменклатуры);
		
		ШКСтроки = ПодобратьШтрикходНоменклатуре(СтрокаНоменклатуры, ВыборкаШК, ОтборШК);
		Если ШКСтроки.Количество() = 0 И Не СтрокаНоменклатуры.ЭтоУслуга Тогда
			ОтборШК.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			ШКСтроки = ШтрихкодыНоменклатурыПоОтбору(СтрокаНоменклатуры, ВыборкаШК, ОтборШК);
		КонецЕсли;
		
		Если ТолькоСоШтрихкодами И ШКСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Определяем цену строки
		Если Не ЦенаСтрокиТоваров(СтрокаНоменклатуры, ВыборкаЦен) Тогда
			Продолжить;
		КонецЕсли;
		
		// Определяем остаток строки
		Если ТипЗнч(СтрокаНоменклатуры.Остаток) <> Тип("Число") Тогда
			СтрокаНоменклатуры.Остаток = 0;
		КонецЕсли;
		
		Если СтрокаНоменклатуры.Остаток <= 0 Тогда
			Если ТолькоСОстатком Тогда
				Продолжить;
			Иначе
				СтрокаНоменклатуры.КоличествоЭкземпляров = 1;
			КонецЕсли;
		Иначе
			СтрокаНоменклатуры.КоличествоЭкземпляров = Макс(1, Окр(СтрокаНоменклатуры.Остаток));
		КонецЕсли;
		
		// Добавление строк на форму
		Если ШКСтроки.Количество() = 0 Тогда
			ШКСтроки.Добавить(Новый Структура);
		КонецЕсли;
		
		Для Каждого ДанныеШК Из ШКСтроки Цикл
			СтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаНоменклатуры);
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеШК);
			СтрокаТовары.Количество = СтрокаНоменклатуры.Остаток;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуНоменклатуры()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("ОтборНоменклатуры");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикНастроекВрем = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроекВрем.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных)));
	
	//КомпоновщикНастроекВрем.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекВрем.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		КомпоновщикНастроекВрем.Настройки, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаНоменклатуры = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

&НаСервере
Функция ПолучитьЦеныНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Прейскурант", Объект.Прейскурант);
	Запрос.УстановитьПараметр("Дата", Объект.ЦеныНаДату);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Прейскурант = &Прейскурант
	|				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних"
	;
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Функция ПолучитьШтрихкодыНоменклатуры(Номенклатура)
	
	ТипыШК_МДЛП = Новый Массив;
	ТипыШК_МДЛП.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.ШтрихкодГС1);
	ТипыШК_МДЛП.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.ШтрихкодМДЛП);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипыШК_МДЛП", ТипыШК_МДЛП);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Штрихкоды.СерияНоменклатуры КАК Серия,
	|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец В(&Номенклатура)
	|	И НЕ Штрихкоды.ТипШтрихкода В (&ТипыШК_МДЛП)"
	;
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Функция ПодобратьШтрикходНоменклатуре(СтрокаНоменклатуры, ВыборкаШК, ОтборШК)
	
	ШКСтроки = ШтрихкодыНоменклатурыПоОтбору(СтрокаНоменклатуры, ВыборкаШК, ОтборШК);
	Если ШКСтроки.Количество() = 0 Тогда
		
		// Пробуем перебрать возможные сочетания пустых-заполненных полей отбора ШК с учетом того, какие заполенны сейчас.
		
		ПоляОтбора = Новый Структура;
		Если ОтборШК.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(ОтборШК.ЕдиницаИзмерения) Тогда
			ПоляОтбора.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборШК.Характеристика) Тогда
			ПоляОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборШК.Серия) Тогда
			ПоляОтбора.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		КолОтборов = Pow(2, ПоляОтбора.Количество());
		ТаблицаОтборы = Новый ТаблицаЗначений;
		ТаблицаОтборы.Колонки.Добавить("ЕдиницаИзмерения",	 Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ТаблицаОтборы.Колонки.Добавить("Характеристика",	 Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаОтборы.Колонки.Добавить("Серия",				 Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
		Для Сч = 1 По КолОтборов Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОтборы.Добавить(), ОтборШК);
		КонецЦикла;
		
		Вес = 2;
		Для Каждого кзПолеОтбора Из ПоляОтбора Цикл
			
			Для Сч = 1 По КолОтборов Цикл
				
				// Затираем значение в каждом втором отборе.
				Если (Сч % Вес) >= Вес/2 Тогда
					ТаблицаОтборы[Сч-1][кзПолеОтбора.Ключ] = кзПолеОтбора.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			Вес = Вес * 2;
			
		КонецЦикла;
		ТаблицаОтборы.Свернуть("ЕдиницаИзмерения, Характеристика, Серия", "");
		ТаблицаОтборы.Сортировать("Серия УБЫВ, Характеристика УБЫВ, ЕдиницаИзмерения УБЫВ");
		
		Для Каждого СтрокаОтбор Из ТаблицаОтборы Цикл
			
			Отбор = Новый Структура("ЕдиницаИзмерения, Характеристика, Серия");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаОтбор);
			
			ШКСтроки = ШтрихкодыНоменклатурыПоОтбору(СтрокаНоменклатуры, ВыборкаШК, Отбор);
			Если ШКСтроки.Количество() <> 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ШКСтроки;
	
КонецФункции

&НаСервере
Функция ШтрихкодыНоменклатурыПоОтбору(СтрокаНоменклатуры, ВыборкаШК, Знач ОтборШК)
	
	ШКСтроки = Новый Массив;
	ОтборШК.Вставить("Номенклатура", СтрокаНоменклатуры.Номенклатура);
	ВыборкаШК.Сбросить();
	Пока ВыборкаШК.НайтиСледующий(ОтборШК) Цикл
		ШКСтроки.Добавить(Новый Структура("Штрихкод, ТипШтрихкода", ВыборкаШК.Штрихкод, ВыборкаШК.ТипШтрихкода));
	КонецЦикла;
	
	Возврат ШКСтроки;
	
КонецФункции

&НаСервере
Функция ЦенаСтрокиТоваров(СтрокаНоменклатуры, ВыборкаЦен)
	
	ЕстьЦена = Ложь;
	
	Если СтрокаНоменклатуры.ЭтоУслуга Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика");
		ОтборПХ = Новый Структура("Номенклатура");
	Иначе
		Отбор = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения");
		ОтборПХ = Новый Структура("Номенклатура, ЕдиницаИзмерения");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаНоменклатуры);
	ВыборкаЦен.Сбросить();
	Если ВыборкаЦен.НайтиСледующий(Отбор) Тогда
		СтрокаНоменклатуры.Цена = ВыборкаЦен.Цена;
		ЕстьЦена = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаНоменклатуры.Характеристика) Тогда
		// Может, тогда общая цена на номенклатуру есть.
		ЗаполнитьЗначенияСвойств(ОтборПХ, СтрокаНоменклатуры);
		ВыборкаЦен.Сбросить();
		Если ВыборкаЦен.НайтиСледующий(Отбор) Тогда
			СтрокаНоменклатуры.Цена = ВыборкаЦен.Цена;
			ЕстьЦена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьЦена Или Не ТолькоСЦеной;
	
КонецФункции

#КонецОбласти 

&НаСервере
Процедура ЗаполнитьПоТоварамДокументаНаСервере()
	
	Объект.Товары.Очистить();
	
	Если ЭтоСсылочныйОбъект Тогда
		ДокументИмяТипа = Документ.Метаданные().Имя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресТоваровВХранилище) Тогда
		
		Запрос = Новый Запрос;
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
		
		Если ТаблицаТоваров.Колонки.Найти("Характеристика") = Неопределено Тогда
			СтрокаХарактеристика = "";
			СтрокаСоединениеХарактеристика = "";
		Иначе
			СтрокаХарактеристика = "ТаблицаТоваров.Характеристика КАК Характеристика";
			СтрокаСоединениеХарактеристика = "И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика";
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
			СтрокаЕдиницаИзмерения = "";
			СтрокаСоединениеЕдиницаИзмерения = "";
		Иначе
			СтрокаЕдиницаИзмерения = "ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения";
			СтрокаСоединениеЕдиницаИзмерения = "И ТаблицаТоваров.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения";
		КонецЕсли;
		
		Если ВыгружатьЦену Тогда
			СтрокаЦена = "ТаблицаТоваров.Цена КАК Цена";
		Иначе
			СтрокаЦена = "0 КАК Цена";
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	" + СтрокаХарактеристика + ",
		|	" + СтрокаЕдиницаИзмерения + ",
		|	" + СтрокаЦена + "
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ	
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	Штрихкоды.Характеристика КАК Характеристика,
		|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК КоличествоУпаковок,
		|	" + СтрокаЦена + ",
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
		|			" + СтрокаСоединениеХарактеристика + "
		|			" + СтрокаСоединениеЕдиницаИзмерения + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТоваров.НомерСтроки,
		|	Штрихкоды.Штрихкод";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
	ИначеЕсли ДокументИмяТипа = "УстановкаЦенНоменклатуры" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.ЕдиницаИзмерения,
		|	ТаблицаТоваров.Характеристика,
		|	1 КАК КоличествоУпаковок,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.Товары КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
		|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
		|			И ТаблицаТоваров.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &Документ
		|	И ТаблицаТоваров.ВидЦены = &ВидЦены
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТоваров.НомерСтроки,
		|	Штрихкоды.Штрихкод";
		Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены); 
		
	ИначеЕсли ДокументИмяТипа = "ВводНачальныхОстатковУзла" Тогда
		
		Запрос = Новый Запрос;
		Если ИмяТаблицыВыборки = "ЦеныНоменклатуры" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	1 КАК КоличествоУпаковок,
			|	ТаблицаТоваров.Цена КАК Цена,
			|	Штрихкоды.Штрихкод
			|ИЗ
			|	Документ." + ДокументИмяТипа + "." + ИмяТаблицыВыборки + " КАК ТаблицаТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
			|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
			|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
			|			И ТаблицаТоваров.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
			|ГДЕ
			|	ТаблицаТоваров.Ссылка = &Документ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.НомерСтроки,
			|	Штрихкоды.Штрихкод";
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	1 КАК КоличествоУпаковок,
			|	0 КАК Цена,
			|	Штрихкоды.Штрихкод
			|ИЗ
			|	Документ." + ДокументИмяТипа + "." + ИмяТаблицыВыборки + " КАК ТаблицаТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
			|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
			|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
			|ГДЕ
			|	ТаблицаТоваров.Ссылка = &Документ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.НомерСтроки,
			|	Штрихкоды.Штрихкод";
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТоваров.КоличествоУпаковок, 
		|	%Цена%
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	Документ." + ДокументИмяТипа + "." + ИмяТаблицыВыборки + " КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
		|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
		|			И ТаблицаТоваров.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &Документ
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТоваров.НомерСтроки,
		|	Штрихкоды.Штрихкод";
			
		Если ВыгружатьЦену Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Цена%", "ТаблицаТоваров.Цена,");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Цена%", "");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", Документ); 
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = Выборка.Номенклатура;
		НоваяСтрока.Характеристика       = Выборка.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Штрихкод             = Выборка.Штрихкод;
		НоваяСтрока.ОшибкиВыгрузки       = ПустаяСтрока(Выборка.Штрихкод);
		НоваяСтрока.Количество           = Выборка.КоличествоУпаковок;
		Если ВыгружатьЦену Тогда
			НоваяСтрока.Цена             = Выборка.Цена;
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ВариантЗаполнения = "ПоОтбору" Тогда
		ЗаполнитьТабличнуюЧастьТоварыСервер();
	ИначеЕсли ВариантЗаполнения = "ПоДокументу" Тогда
		ЗаполнитьПоТоварамДокументаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивБазыТоваров()
	
	МассивВыгрузки = Новый Массив();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ВыгружаемыйТовар = Новый Структура;
		ВыгружаемыйТовар.Вставить("Штрихкод",					СтрокаТЧ.Штрихкод);
		ВыгружаемыйТовар.Вставить("Номенклатура",				Строка(СтрокаТЧ.Номенклатура));
		ВыгружаемыйТовар.Вставить("ЕдиницаИзмерения",			Строка(СтрокаТЧ.ЕдиницаИзмерения));
		ВыгружаемыйТовар.Вставить("ХарактеристикаНоменклатуры", Строка(СтрокаТЧ.Характеристика));
		ВыгружаемыйТовар.Вставить("Количество",					0);
		ВыгружаемыйТовар.Вставить("Цена",						СтрокаТЧ.Цена);
		
		МассивВыгрузки.Добавить(ВыгружаемыйТовар);
		
	КонецЦикла;
	
	Возврат МассивВыгрузки;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	Обработка =  РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ОтборНоменклатуры");
	
	СхемаКомпоновкиДанных = Макет;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ (Результат = Неопределено) Тогда
		ПоказатьЗначение(,Результат.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаПриИзменении(Элемент)
	
	Объект.Товары.Очистить();

КонецПроцедуры

&НаСервере
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина)
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало.
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции.
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции.
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено)
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти