#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Объект.ЭтоИнтерактивныйРежим = Истина;
	
	//+бит
	Объект.РежимОбмена = "Выгрузка"; 
	Объект.НепосредственноеЧтениеВИБПриемнике = Ложь; 
	//-бит
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ИмяФайлаПравил.СписокВыбора.ЗагрузитьЗначения(ПравилаОбмена.ВыгрузитьЗначения());
	Элементы.ИмяФайлаДанных.СписокВыбора.ЗагрузитьЗначения(ВыгрузкаДанныхВФайл.ВыгрузитьЗначения());
	
	ПриИзмененииПериода();
	
	ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	
	ПрямаяВыгрузка = ?(Объект.НепосредственноеЧтениеВИБПриемнике, 1, 0);
		
	АрхивироватьФайлПриИзмененииЗначения();
	
	ИзменитьРежимОбработки(ЭтоКлиент);	
	
	Если БИТ_ДетализироватьКлиентов Тогда
		БИТ_ДетализироватьКлиентовПриИзменении(Элементы.БИТ_ДетализироватьКлиентов, Истина);
	КонецЕсли;
	
	// Если выбраны встроенные правила, загружаем их сразу при открытии.
	Если Объект.бит_ИсточникПравилОбмена <> 0 Тогда
		ПрочитатьПравилаОбмена(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура АрхивироватьФайлПриИзменении(Элемент)
	
	АрхивироватьФайлПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаПравил, Истина, , Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаДанных, , , Объект.АрхивироватьФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИмяФайлаПравил) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаПравил);
	Если Не Файл.Существует() Тогда
		Возврат; 
	КонецЕсли;
	
	ОтветПользователя = Вопрос(НСтр("ru = 'Загрузить правила обмена данными?'"), РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	
	Если ОтветПользователя = КодВозвратаДиалога.Да
		ИЛИ ОтветПользователя = КодВозвратаДиалога.Таймаут Тогда
		
		ВыполнитьЗагрузкуПравилОбмена();
		
	Иначе
		
		ПравилаЗагружены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Объект.ИмяФайлаПравилОбмена)
		//+бит
		//И Врег(СокрЛП(Объект.ИмяФайлаПравилОбмена)) = Врег(СокрЛП(Объект.ИмяФайлаОбмена)) Тогда
		И Врег(СокрЛП(Объект.ИмяФайлаПравилОбмена)) = Врег(СокрЛП(ИмяФайлаДанных)) Тогда
		//-бит
		
		Предупреждение(НСтр("ru = 'Файл правил обмена не может совпадать с файлом данных. Выберите другой файл для выгрузки данных.'"));
		
	КонецЕсли;
	
	//+бит
	//Файл = Новый Файл(Объект.ИмяФайлаОбмена);
	Файл = Новый Файл(ИмяФайлаДанных);
	//-бит
	АрхивироватьФайл = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыгрузкиПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ТаблицаПравилВыгрузкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "СсылкаНаУзелОбмена" Тогда
		
		Отказ = Элемент.ТекущиеДанные.ЭтоГруппа;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравилВыгрузкиПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ПВД" Тогда
		
		ТекСтрока = Элемент.ТекущиеДанные;
		
		Если ТекСтрока.Включить = 2 Тогда
			ТекСтрока.Включить = 0;
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(ТекСтрока, "Включить");
		УстановитьПометкиРодителей(ТекСтрока, "Включить");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузкаОтметитьВсе(Команда)
	
	Для Каждого Строка из Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы() Цикл
		Строка.Включить = 1;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаОтменитьВсе(Команда)
	
	Для Каждого Строка из Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы() Цикл
		Строка.Включить = 0;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НаКлиенте(Команда)
	
	Если Не ЭтоКлиент Тогда
		
		ЭтоКлиент = Истина;
		
		ИзменитьРежимОбработки(ЭтоКлиент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаСервере(Команда)
	
	Если ЭтоКлиент Тогда
		
		ЭтоКлиент = Ложь;
		
		ИзменитьРежимОбработки(ЭтоКлиент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(Команда)
	
 	ВыполнитьВыгрузкуИзФормы_ДиалогиПередВыгрузкой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПравилаОбмена(Команда)
	
	АдресФайлаПравилВХранилище = "";
	ИмяФайлаДляРасширения = "";
	
	//+бит
	Если Объект.бит_ИсточникПравилОбмена = 0 Тогда  
	//-бит
	
		Если ЭтоКлиент Тогда
			
			Если Не ПоместитьФайл(АдресФайлаПравилВХранилище, "Файл правил обмена", ИмяФайлаДляРасширения,,УникальныйИдентификатор) Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(Объект.ИмяФайлаПравилОбмена) Тогда
				Предупреждение(НСтр("ru = 'Выберите файл правил обмена.'"));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	
	//+бит
	КонецЕсли;
	//-бит
	
	Объект.ФлагОшибки = Ложь;
	
	Состояние(НСтр("ru = 'Выполняется чтение правил обмена. Пожалуйста, подождите...'"));
	ВыполнитьЗагрузкуПравилОбмена(АдресФайлаПравилВХранилище, ИмяфайлаДляРасширения);
	
	Если Не Объект.ФлагОшибки Тогда
		
		ПравилаЗагружены = Истина;
		
	Иначе
		
		ПравилаЗагружены = Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Открывает файл обмена во внешнем приложении
&НаКлиенте
Процедура ОткрытьВПриложении(ИмяФайла, СтандартнаяОбработка = Ложь)

	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		
		ЗапуститьПриложение(ИмяФайла);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеОФайлеДляЗагрузкиДанных()
	
	Объект.ВерсияПравилОбмена = "";
	Объект.ДатаВыгрузкиДанных = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьФайлПриИзмененииЗначения()
	
	Если Объект.АрхивироватьФайл Тогда
		ИмяФайлаДанных = СтрЗаменить(ИмяФайлаДанных, ".xml", ".zip");
	Иначе
		ИмяФайлаДанных = СтрЗаменить(ИмяФайлаДанных, ".zip", ".xml");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуПравилОбмена(АдресФайлаПравилВХранилище = "", ИмяФайлаДляРасширения = "")
	
	Объект.ФлагОшибки = Ложь;
	
	ЗагрузитьПравилаОбменаИПараметрыНаСервере(АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения);
	
	Если Не Объект.ФлагОшибки Тогда
		
		ПравилаЗагружены = Истина;
		
		РазвернутьСтрокиДерева(Объект.ТаблицаПравилВыгрузки, Элементы.ТаблицаПравилВыгрузки, "Включить");
		
	Иначе
		
		ПравилаЗагружены = Ложь;
		
	КонецЕсли;
	
	//+бит
	бит_ПроводитьДокументыПриЗагрузкеПриИзменении(Неопределено);
	БИТ_ДетализироватьКлиентовПриИзменении(Неопределено, Истина);
	//-бит
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ДеревоДанных, ПредставлениеНаФорме, ИмяФлажка)
	
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		ПредставлениеНаФорме.Развернуть(ИдентификаторСтроки, Ложь);
		ВключитьРодителяЕслиВключеныПодчиненные(Строка, ИмяФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРодителяЕслиВключеныПодчиненные(СтрокаДерева, ИмяФлажка)
	
	Включить = СтрокаДерева[ИмяФлажка];
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока[ИмяФлажка] = 1 Тогда
			
			Включить = 1;
			
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ВключитьРодителяЕслиВключеныПодчиненные(ПодчиненнаяСтрока, ИмяФлажка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева[ИмяФлажка] = Включить;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Объект.ДатаНачала = ПериодВыгрузки.ДатаНачала;
	Объект.ДатаОкончания = ПериодВыгрузки.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПравилаОбменаИПараметрыНаСервере(АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения)
	
	//+бит
	Если Объект.бит_ИсточникПравилОбмена = 0 Тогда  
	//-бит
	
		ИмяФайлаПравилОбмена = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаПравил ,АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения);
		
		Если ИмяФайлаПравилОбмена = Неопределено Тогда
			
			Возврат;
			
		Иначе
			
			Объект.ИмяФайлаПравилОбмена = ИмяФайлаПравилОбмена;
			
		КонецЕсли;
		
	//+бит
	Иначе
		Объект.ИмяФайлаПравилОбмена = ИмяФайлаПравил;
	КонецЕсли;
	//-бит
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	ОбъектДляСервера.ТаблицаНастройкиПараметров = РеквизитФормыВЗначение("Объект.ТаблицаНастройкиПараметров");
	
	ОбъектДляСервера.ЗагрузитьПравилаОбмена();
	ОбъектДляСервера.ИнициализироватьПервоначальныеЗначенияПараметров();
	
	Если ЭтоКлиент Тогда
		
		УдалитьФайлы(Объект.ИмяФайлаПравилОбмена);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера.ТаблицаПравилВыгрузки, "Объект.ТаблицаПравилВыгрузки");
	ЗначениеВРеквизитФормы(ОбъектДляСервера.ТаблицаНастройкиПараметров, "Объект.ТаблицаНастройкиПараметров");
	
КонецПроцедуры

// Открывает диалог выбора файла
&НаКлиенте
Процедура ВыборФайла(Элемент, ИмяСвойства, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "xml",
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Если РасширениеПоУмолчанию = "txt" Тогда
		
		ДиалогВыбораФайла.Фильтр = "Файл протокола обмена (*.txt)|*.txt";
		ДиалогВыбораФайла.Расширение = "txt";
		
	ИначеЕсли Объект.РежимОбмена = "Выгрузка" Тогда
		
		Если АрхивироватьФайлДанных Тогда
			
			ДиалогВыбораФайла.Фильтр = "Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "zip";
			
		ИначеЕсли ВыборФайлаПравил Тогда
			
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "xml";
			
		Иначе
			
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
			ДиалогВыбораФайла.Расширение = "xml";
			
		КонецЕсли; 
		
	Иначе
		
		ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
		ДиалогВыбораФайла.Расширение = "xml";
		
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ИмяСвойства = ДиалогВыбораФайла.ПолноеИмяФайла;
		
		Если Элемент = Элементы.ИмяФайлаПравил Тогда
			ИмяФайлаПравилПриИзменении(Элемент);
			
		ИначеЕсли Элемент = Элементы.ИмяФайлаДанных Тогда
			ИмяФайлаДанныхПриИзменении(Элемент);
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки.
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки.
&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаНаСервереИлиКлиенте(ИмяРеквизита ,Знач АдресФайла = "", Знач ИмяФайлаДляРасширения = ".xml",
									СоздатьНовый = Ложь, ПроверятьСуществование = Истина
	)
	
	ИмяФайла = Неопределено;
	
	Если ЭтоКлиент Тогда
		
		Если СоздатьНовый Тогда
			
			Расширение = ? (Объект.АрхивироватьФайл, ".zip", ".xml");
			
			ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
			
			Файл = Новый Файл(ИмяФайла);
			
		Иначе
			
			Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища (АдресФайла);
			АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
			ДвоичныеДанные.Записать(АдресНаСервере);
			ИмяФайла = АдресНаСервере;
			
		КонецЕсли;
		
	Иначе
		
		ФайлНаСервере = Новый Файл(ИмяРеквизита);
		
		Если Не ФайлНаСервере.Существует() И ПроверятьСуществование Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указанный файл не существует.'"));
			
		Иначе
			
			ИмяФайла = ИмяРеквизита;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ВыполнитьВыгрузкуИзФормы_ДиалогиПередВыгрузкой()
	
	Если Не ЗначениеЗаполнено(ПериодВыгрузки.ДатаНачала) Тогда
		ТекстВопроса = НСтр("ru='Не указано начало периода.'") + " " + НСтр("ru='Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВыполнитьВыгрузкуИзФормы_ВопросПустойПериод", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.Отмена);
	Иначе
		ВыполнитьВыгрузкуИзФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуИзФормы_ВопросПустойПериод(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ВыполнитьВыгрузкуИзФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуИзФормы()
	
	Если Не ПравилаЗагружены Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо прочитать правила обмена'"));
		Возврат;
		
	КонецЕсли;
	
	// Запомним файл правил и файл выгрузки
	ДобавитьСтрокуКСпискуВыбора(Элементы.ИмяФайлаПравил.СписокВыбора, ИмяФайлаПравил, ПравилаОбмена);
	
	Если НЕ Объект.НепосредственноеЧтениеВИБПриемнике и Не ЭтоКлиент Тогда
		
		//+бит
		// Если Врег(СокрЛП(Объект.ИмяФайлаПравилОбмена)) = Врег(СокрЛП(Объект.ИмяФайлаОбмена)) Тогда
		Если Врег(СокрЛП(Объект.ИмяФайлаПравилОбмена)) = Врег(СокрЛП(ИмяФайлаДанных)) Тогда
		//-бит	
		
			ПоказатьПредупреждение(,НСтр("ru = 'Файл правил обмена не может совпадать с файлом данных. Выберите другой файл для выгрузки данных.'"));
			Возврат;
			
		КонецЕсли;
		
		ДобавитьСтрокуКСпискуВыбора(Элементы.ИмяФайлаДанных.СписокВыбора, ИмяФайлаДанных, ВыгрузкаДанныхВФайл);
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	АдресФайлаДанныхВХранилище = ВыполнитьВыгрузкуНаСервере();
	
	Если АдресФайлаДанныхВХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазвернутьСтрокиДерева(Объект.ТаблицаПравилВыгрузки, Элементы.ТаблицаПравилВыгрузки, "Включить");
	
	Если ЭтоКлиент И Не ПрямаяВыгрузка И Не Объект.ФлагОшибки Тогда
		
		ИмяСохраняемогоФайла = ?(Объект.АрхивироватьФайл, НСтр("ru = 'Файл выгрузки.zip'"),НСтр("ru = 'Файл выгрузки.xml'"));
		
		ПолучитьФайл(АдресФайлаДанныхВХранилище, ИмяСохраняемогоФайла)
		
	КонецЕсли;
	
	ОткрытьДанныеПротоколовОбменаПриНеобходимости();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьВыгрузкуНаСервере()
	
	//+бит
	Если Объект.бит_ИсточникПравилОбмена = 0 Тогда  
	//-бит
	
		Объект.ИмяФайлаПравилОбмена = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаПравил, АдресФайлаПравилВХранилище);
		
	//+бит
	КонецЕсли; 
	//-бит
	
	Если Не ПрямаяВыгрузка Тогда
		
		ИмяВременногоФайлаДанных = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаДанных, ,,Истина, Ложь);
		
		Если ИмяВременногоФайлаДанных = Неопределено Тогда
			
			Возврат Неопределено;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определен файл данных'"));
			
		Иначе
			
			Объект.ИмяФайлаОбмена = ИмяВременногоФайлаДанных;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	ТаблицаНастройкиПараметров = РеквизитФормыВЗначение("Объект.ТаблицаНастройкиПараметров");
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Объект);
	
	Если ОбъектДляСервера.ФлагРежимОтладкиОбработчиков Тогда
		
		Отказ = Ложь;
		
		Файл = Новый Файл(ОбъектДляСервера.ИмяФайлаВнешнейОбработкиОбработчиковСобытий);
		
		Если Не Файл.Существует() Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл внешней обработки отладчиков событий не существует на сервере'"));
			Возврат Неопределено;
			
		КонецЕсли;
		
		ОбъектДляСервера.ВыгрузитьОбработчикиСобытий(Отказ);
		
		Если Отказ Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выгрузить обработчики событий'"));
			Возврат "";
			
		КонецЕсли;
		
	Иначе
		
		ОбъектДляСервера.ЗагрузитьПравилаОбмена();
		ОбъектДляСервера.ИнициализироватьПервоначальныеЗначенияПараметров();
		
	КонецЕсли;
	
	ИзменитьДеревоПравилВыгрузки(ОбъектДляСервера.ТаблицаПравилВыгрузки.Строки, ТаблицаПравилВыгрузки.Строки);
	ИзменитьТаблицуПараметров(ОбъектДляСервера.ТаблицаНастройкиПараметров, ТаблицаНастройкиПараметров);
	
	ОбъектДляСервера.ВыполнитьВыгрузку();
	ОбъектДляСервера.ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	
	Если ЭтоКлиент И Не ПрямаяВыгрузка Тогда
		
		АдресФайлаДанных = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайлаОбмена), УникальныйИдентификатор);
		УдалитьФайлы(Объект.ИмяФайлаОбмена);
		
	Иначе
		
		АдресФайлаДанных = "";
		
	КонецЕсли;
	
	Если ЭтоКлиент Тогда
		
		УдалитьФайлы(ОбъектДляСервера.ИмяФайлаПравилОбмена);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Возврат АдресФайлаДанных;
	
КонецФункции

// Изменяет дерево ПВД в соответствии с деревом на форме.
//
&НаСервере
Процедура ИзменитьДеревоПравилВыгрузки(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВключить = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Включить");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВключить, "Включить");
	КолонкаУзел = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("СсылкаНаУзелОбмена");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаУзел, "СсылкаНаУзелОбмена");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ИзменитьДеревоПравилВыгрузки(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет таблицу параметров в соответствии с таблицей на форме
//
&НаСервере
Процедура ИзменитьТаблицуПараметров(ТаблицаБазы, ТаблицаФормы)
	
	КолонкаНаименование = ТаблицаФормы.ВыгрузитьКолонку("Наименование");
	ТаблицаБазы.ЗагрузитьКолонку(КолонкаНаименование, "Наименование");
	КолонкаЗначение = ТаблицаФормы.ВыгрузитьКолонку("Значение");
	ТаблицаБазы.ЗагрузитьКолонку(КолонкаЗначение, "Значение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуКСпискуВыбора(СписокСохраняемыхЗначений, ЗначениеСохранения, ИмяПараметраДляСохранения)
	
	Если ПустаяСтрока(ЗначениеСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ЗначениеСохранения);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ЗначениеСохранения);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	ИмяПараметраДляСохранения = СписокСохраняемыхЗначений;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасположениеФайла()
	
	Элементы.ИмяФайлаПравил.Видимость = Не ЭтоКлиент;
	Элементы.ИмяФайлаДанных.Видимость = Не ЭтоКлиент;
	
	ПравилаЗагружены = Ложь;
	
	//+бит
	Если Не ЭтоКлиент Тогда
		Элементы.ИмяФайлаПравил.Видимость = ?(Объект.бит_ИсточникПравилОбмена = 0, Истина, Ложь); 	
	КонецЕсли;
	//-бит
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимОбработки(РежимРаботы)
	
	ГруппаРежима = КоманднаяПанель.ПодчиненныеЭлементы.РежимОбработки.ПодчиненныеЭлементы;
	
	ГруппаРежима.ФормаНаКлиенте.Пометка = РежимРаботы;
	ГруппаРежима.ФормаНаСервере.Пометка = Не РежимРаботы;
	
	КоманднаяПанель.ПодчиненныеЭлементы.РежимОбработки.Заголовок = 
	?(РежимРаботы, НСтр("ru = 'Режим работы (на клиенте)'"), НСтр("ru = 'Режим работы (на сервере)'"));
	
	Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы().Очистить();
	Объект.ТаблицаНастройкиПараметров.Очистить();
	
	ИзменитьРасположениеФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДанныеПротоколовОбменаПриНеобходимости()
	
	Если НЕ Объект.ОткрыватьПротоколыОбменаПослеВыполненияОпераций Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент  Тогда
		
		Если Не ПустаяСтрока(Объект.ИмяФайлаПротоколаОбмена) Тогда
			ОткрытьВПриложении(Объект.ИмяФайлаПротоколаОбмена);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

//+бит
&НаКлиенте
Процедура бит_ПроводитьДокументыПриЗагрузкеПриИзменении(Элемент)

	ПараметрыОтбора = Новый Структура("Наименование", "Проводить документы");
	НайденныеСтроки = Объект.ТаблицаНастройкиПараметров.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 И Объект.ТаблицаНастройкиПараметров.Количество() <> 0 Тогда 
		Сообщить(Нстр("ru = 'Настройка ""Проводить документы при загрузке"" будет проигнорирована.'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.Значение = бит_ПроводитьДокументыПриЗагрузке;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ФилиалыВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Объект.бит_ФилиалыВыгрузки.ДоступныеЗначения = ПолучитьСписокФилиалов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ОрганизацииВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Объект.бит_ОрганизацииВыгрузки.ДоступныеЗначения = бит_ВсеОрганизации(); 
	
КонецПроцедуры

&НаКлиенте
Процедура БИТ_ДетализироватьКлиентовПриИзменении(Элемент, ДелайМолча = Ложь)
	
	ПараметрыОтбора = Новый Структура("Наименование", "Детализировать клиентов");
	НайденныеСтроки = Объект.ТаблицаНастройкиПараметров.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 И Объект.ТаблицаНастройкиПараметров.Количество() <> 0 Тогда
		Если Не ДелайМолча Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Настройка ""Детализировать клиентов"" будет проигнорирована.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.Значение = БИТ_ДетализироватьКлиентов;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокФилиалов()
	
	СписокЗначений = Новый СписокЗначений;
	Выборка = Справочники.Филиалы.Выбрать();	
	Пока Выборка.Следующий() Цикл
		СписокЗначений.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции   

&НаСервереБезКонтекста
Функция бит_ВсеОрганизации()
	
	СписокЗначений = Новый СписокЗначений;
	Выборка = Справочники.Организации.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления Тогда
			СписокЗначений.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Выборка = Справочники.Организации.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда
			СписокЗначений.Добавить(Выборка.Ссылка, НСтр("ru='(удалена)'") + " " + Выборка.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

&НаКлиенте
Процедура бит_ИсточникПравилОбменаПриИзменении(Элемент)
	
	ИзменитьРежимОбработки(ЭтоКлиент);
	
	Если Объект.бит_ИсточникПравилОбмена > 0 Тогда
		
		Если Объект.бит_ИсточникПравилОбмена = 2 Тогда 
			ИмяФайлаПравил = "Правила обмена Бухгалтерия 3.0";
		КонецЕсли;
		
		ОтветПользователя = Вопрос(НСтр("ru = 'Загрузить правила обмена данными?'"), РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
		
		Если ОтветПользователя = КодВозвратаДиалога.Да
			ИЛИ ОтветПользователя = КодВозвратаДиалога.Таймаут Тогда
			
			ВыполнитьЗагрузкуПравилОбмена();
			
		Иначе
			
			ПравилаЗагружены = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ИмяФайлаПравил = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ФилиалыВыгрузкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.бит_ФилиалыВыгрузки) Тогда
		Объект.бит_ОрганизацииВыгрузки.Очистить();
		Элементы.бит_ОрганизацииВыгрузки.Доступность = Ложь;
	Иначе  
		Элементы.бит_ОрганизацииВыгрузки.Доступность = Истина;
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

//-бит