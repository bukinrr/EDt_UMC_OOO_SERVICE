
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.КонтрагентПринципал.Видимость = Ложь;
	
	Если Параметры.Свойство("Лаборатория") Тогда
		Лаборатория = Параметры.Лаборатория;
	Иначе 	
		Лаборатория = ЛабораторияСервер.ПолучитьАктуальнуюЛабораторию(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Лаборатория) Тогда
		ЗаполнитьНастройкиВзаимодействия();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьНастройкиВзаимодействия(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНастройкиВзаимодействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСправочники(Команда)
	
	ОчиститьДанныеНоменклатурыНаФорме();
	
	Если ПроверитьЗаполнение() Тогда
		Состояние(НСтр("ru='Загрузка справочников лаборатории'"));
		ЗаполнитьДанныеНоменклатурыНаФорме();
		ПриИзмененииПоказыватьТолькоИзменившиесяЦены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСправочники(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
    ЛабораторияСервер.ОчиститьСправочники(Лаборатория);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеНоменклатуры(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЦеныНоменклатуры(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Прейскурант) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо указать прейскурант'"));
	ИначеЕсли Цены.Итог("Цена") = 0 Тогда
		Элементы.ГруппаДанныеАнализов.ТекущаяСтраница = Элементы.ГруппаЦены;
		ПоказатьПредупреждение(, НСтр("ru='Цены не загружены'"));
	Иначе 	
		ДокументУстановкиЦен = СохранитьЦеныНоменклатурыНаСервере();
		
		Если ЗначениеЗаполнено(ДокументУстановкиЦен) Тогда
			Если ЦеныТолькоИзменившиеся Тогда
				ПриИзмененииПоказыватьТолькоИзменившиесяЦены();
			КонецЕсли;
			
			ПоказатьЗначение(, ДокументУстановкиЦен);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Нет изменившихся цен для сохранения'"));
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьЗначениеФлажков(Истина, Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьЗначениеФлажков(Ложь, Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЛабораторияПриИзменении(Элемент)
	
	ОчиститьДанныеНоменклатурыНаФорме();
	ЗаполнитьНастройкиВзаимодействия();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСоздатьПриИзменении(Элемент)
	
	ТекущаяСтрока = Номенклатура.НайтиПоИдентификатору(Элементы.Номенклатура.ТекущаяСтрока);
	УстановитьЗначениеФлажков(ТекущаяСтрока.Создать, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрейскурантПриИзменении(Элемент)

	Если ЦеныТолькоИзменившиеся Тогда
		ПриИзмененииПоказыватьТолькоИзменившиесяЦены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ID = ?(ЗначениеЗаполнено(ТекущиеДанные.ID), ТекущиеДанные.ID, ТекущиеДанные.Код);
	
	Если Не ЗначениеЗаполнено(ID) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокиЦены = Цены.НайтиСтроки(Новый Структура(?(ЗначениеЗаполнено(ТекущиеДанные.ID), "ID", "Код"), ID));
	
	Для Каждого СтрокаЦена Из МассивСтрокиЦены Цикл
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			СтрокаЦена.Номенклатура = ТекущиеДанные.Номенклатура;
		Иначе
			СтрокаЦена.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;		
	КонецЦикла;
	
	Если ЦеныТолькоИзменившиеся Тогда
		ПриИзмененииПоказыватьТолькоИзменившиесяЦены();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьДанныеНоменклатурыНаФорме()
	
	Номенклатура.ПолучитьЭлементы().Очистить();
	Цены.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНоменклатурыНаФорме()
	
	Если ЗначениеЗаполнено(Лаборатория) Тогда
		
		СообщенияОбОшибках = Неопределено;
		
		МодульОбработчик = ЛабораторияКлиентСерверПовтИсп.ПолучитьМодульОбработчик(Лаборатория);
		Если МодульОбработчик <> Неопределено Тогда
			
			ДанныеСправочников = МодульОбработчик.ОбновитьПолучитьСправочникиИнтерактивнаяЗагрузка(Лаборатория, СообщенияОбОшибках);
			
			НоменклатураАнализов = ЛабораторияСервер.НоменклатураАнализовЛаборатории(Лаборатория);
			
			Если ДанныеСправочников.Свойство("ДеревоНоменклатуры") Тогда
				ПеренестиДеревоНоменклатурыНаФорму(Номенклатура, ДанныеСправочников.ДеревоНоменклатуры, НоменклатураАнализов);
			КонецЕсли;
			
			Если ДанныеСправочников.Свойство("Цены") Тогда
				ПеренестиЦеныНоменклатурыНаФорму(НоменклатураАнализов, ДанныеСправочников.Цены);
			КонецЕсли;
			
			Если ТипЗнч(СообщенияОбОшибках) = Тип("Массив") Тогда
				Для Каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
				КонецЦикла;	
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для выбранной лаборатории отсутствует обработчик интеграции'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДеревоНоменклатурыНаФорму(УзелДереваНаФорме, УзелДереваНоменклатуры, НоменклатураАнализов)
	
	УровеньДереваНаФорме = УзелДереваНаФорме.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из УзелДереваНоменклатуры.Строки Цикл
		
		НоваяСтрокаНаФорме = УровеньДереваНаФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНаФорме, СтрокаДерева);
		
		Если ЗначениеЗаполнено(СтрокаДерева.Код) Тогда
			
			// Поиск соответствующей Справочник.Номенклатура в базе.
			ID = ?(ЗначениеЗаполнено(СтрокаДерева.ID), СтрокаДерева.ID, СтрокаДерева.Код);
			НоваяСтрокаНаФорме.Номенклатура = НайтиСопоставленнуюНоменклатуруАнализа(ID, СтрокаДерева.Код, НоменклатураАнализов);
			
		КонецЕсли;
		
		НоваяСтрокаНаФорме.Идентификатор = НоваяСтрокаНаФорме.ПолучитьИдентификатор();
		
		// Перенос дочерних строк.
		ПеренестиДеревоНоменклатурыНаФорму(НоваяСтрокаНаФорме, СтрокаДерева, НоменклатураАнализов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЦеныНоменклатурыНаФорму(НоменклатураАнализов, ДанныеСправочниковЦены = Неопределено)
	
	Если ДанныеСправочниковЦены <> Неопределено Тогда
		Цены.Загрузить(ДанныеСправочниковЦены);
	КонецЕсли;
	
	Для Каждого СтрокаЦены Из Цены Цикл
		
		ID = ?(ЗначениеЗаполнено(СтрокаЦены.ID), СтрокаЦены.ID, СтрокаЦены.Код);
		СтрокаЦены.Номенклатура = НайтиСопоставленнуюНоменклатуруАнализа(ID, СтрокаЦены.Код, НоменклатураАнализов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСопоставленнуюНоменклатуруАнализа(ID, Код, НоменклатураАнализов)
	
	НоменклатураАнализа = Неопределено;
	НоменклатураАнализовСтроки = НоменклатураАнализов.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого СтрНоменклатураАнализов Из НоменклатураАнализовСтроки Цикл
		НоменклатураАнализа = СтрНоменклатураАнализов.Номенклатура;
		Если СтрНоменклатураАнализов.Лаборатория = Лаборатория Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НоменклатураАнализа = Неопределено Тогда
		НоменклатураАнализа = АвтоСопоставитьНоменклатуру(Код);
	КонецЕсли;
	
	Возврат НоменклатураАнализа;
	
КонецФункции

&НаСервере
Функция АвтоСопоставитьНоменклатуру(Код)
	
	Если Не НеЗаписыватьАртикулИНеСопоставлять Тогда
		НоменклатураАнализа = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Код);
	Иначе
		НоменклатураАнализа = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Возврат НоменклатураАнализа;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНастройкиВзаимодействия()
	
	НастройкиВзаимодействия = Неопределено;
	
	Если ЗначениеЗаполнено(Лаборатория) Тогда
		
		НастройкиВзаимодействия = ЛабораторияСервер.ПолучитьНастройкиВзаимодействия(Лаборатория);
		
		Если НастройкиВзаимодействия <> Неопределено Тогда
			
			СоздаватьНовуюНоменклатуру = НастройкиВзаимодействия.СоздаватьНовуюНоменклатуру;
			ГруппаЗагрузкиНоменклатуры = НастройкиВзаимодействия.ГруппаЗагрузкиНоменклатуры;
			ОбновлятьРеквизитыНоменклатурыПриПовторнойЗагрузке = НастройкиВзаимодействия.ОбновлятьРеквизитыНоменклатурыПриПовторнойЗагрузке;
			Прейскурант = НастройкиВзаимодействия.Прейскурант;
			КонтрагентПринципал = ОбщегоНазначенияКлиентСервер.СвойствоОбъекта(НастройкиВзаимодействия, "КонтрагентПринципал", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			
			Если Не НастройкиВзаимодействия.Свойство("СпециализацияНовойНоменклатуры", СпециализацияНоменклатуры) Тогда
				НастройкиВзаимодействия.Свойство("СпециализацияНоменклатуры", СпециализацияНоменклатуры)
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиВзаимодействия = Неопределено Тогда
		СоздаватьНовуюНоменклатуру = Ложь;
		ОбновлятьРеквизитыНоменклатурыПриПовторнойЗагрузке = Ложь;
		ГруппаЗагрузкиНоменклатуры = Неопределено;
		СпециализацияНоменклатуры = Неопределено;
		Прейскурант = Неопределено;
	КонецЕсли;
	
	Элементы.КонтрагентПринципал.Видимость = ЗначениеЗаполнено(КонтрагентПринципал);
	
КонецПроцедуры	

&НаСервере
Процедура СохранитьДанныеНоменклатурыНаСервере()
	
	ДеревоНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	
	ЛабораторияСервер.СохранитьНоменклатуруАнализов(Лаборатория, НастройкиСохранения(), ДеревоНоменклатуры);
	
	ПеренестиНовуюНоменклатуруНаФорму(ДеревоНоменклатуры);
	
	НоменклатураАнализов = ЛабораторияСервер.НоменклатураАнализовЛаборатории(Лаборатория);
	ПеренестиЦеныНоменклатурыНаФорму(НоменклатураАнализов);
	ЛабораторияСервер.ОпределитьИсключенныеИсследования(Лаборатория, Цены.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНовуюНоменклатуруНаФорму(УровеньДерева)
	
	Для Каждого СтрокаДерева Из УровеньДерева.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			
			СтрокаНаФорме = Номенклатура.НайтиПоИдентификатору(СтрокаДерева.Идентификатор);
			
			Если СтрокаНаФорме <> Неопределено Тогда
				СтрокаНаФорме.Номенклатура = СтрокаДерева.Номенклатура;
			КонецЕсли;
			
		КонецЕсли;
		
		ПеренестиНовуюНоменклатуруНаФорму(СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НастройкиСохранения()
	
	НастройкиСохранения = Новый Структура;
	НастройкиСохранения.Вставить("СоздаватьНовуюНоменклатуру", СоздаватьНовуюНоменклатуру);
	НастройкиСохранения.Вставить("ГруппаЗагрузкиНоменклатуры", ГруппаЗагрузкиНоменклатуры);
	НастройкиСохранения.Вставить("СпециализацияНоменклатуры", СпециализацияНоменклатуры);
	НастройкиСохранения.Вставить("ОбновлятьРеквизитыНоменклатурыПриПовторнойЗагрузке", ОбновлятьРеквизитыНоменклатурыПриПовторнойЗагрузке);
	НастройкиСохранения.Вставить("НеЗаписыватьАртикулИНеСопоставлять", НеЗаписыватьАртикулИНеСопоставлять);
	НастройкиСохранения.Вставить("ИзменятьГруппуНоменклатурыПриПовторнойЗагрузке", ИзменятьГруппуНоменклатурыПриПовторнойЗагрузке);
	НастройкиСохранения.Вставить("КонтрагентПринципал", КонтрагентПринципал);
	
	Возврат НастройкиСохранения;
	
КонецФункции

&НаСервере
Функция СохранитьЦеныНоменклатурыНаСервере()
	
	ТаблицаЦен = РеквизитФормыВЗначение("Цены", Тип("ТаблицаЗначений"));
	
	Возврат ЛабораторияСервер.УстановитьЦеныНоменклатурыИсследований(ТаблицаЦен, ТекущаяДатаСеанса(), Прейскурант, Лаборатория);
	
КонецФункции

&НаКлиенте
Процедура ПоказыватьТолькоИзменившиесяЦены(Команда)
	
	Элементы.ЦеныПоказыватьТолькоИзменившиесяЦены.Пометка = Не Элементы.ЦеныПоказыватьТолькоИзменившиесяЦены.Пометка;
	
	ЦеныТолькоИзменившиеся = Элементы.ЦеныПоказыватьТолькоИзменившиесяЦены.Пометка;
	ПриИзмененииПоказыватьТолькоИзменившиесяЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоказыватьТолькоИзменившиесяЦены()
	
	Если ЗначениеЗаполнено(Прейскурант) Тогда
		ИзменениеВариантаОтображенияЦен();
	Иначе
		Для Каждого СтрокаЦен Из Цены Цикл
			СтрокаЦен.Отображать = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеВариантаОтображенияЦен()
	
	Если ЦеныТолькоИзменившиеся Тогда
		ЦеныНоменклатуры = РеквизитФормыВЗначение("Цены", Тип("ТаблицаЗначений"));
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Прейскурант", Прейскурант);
		Запрос.УстановитьПараметр("Номенклатура", ЦеныНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура В (&Номенклатура)
		|	И ЦеныНоменклатурыСрезПоследних.Прейскурант = &Прейскурант";
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаЦена Из Цены Цикл
			
			// Не отображать цену, если установленная цена номенклатуры не изменилась.
			СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаЦена.Номенклатура, "Номенклатура");
			Если СтрокаРезультат <> Неопределено Тогда
				Если СтрокаРезультат.Цена = СтрокаЦена.Цена	Тогда
					СтрокаЦена.Отображать = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Отображать, если цена номенклатуры изменилась или не установлена.
			СтрокаЦена.Отображать = Истина;
			
		КонецЦикла;
	Иначе
		Для Каждого СтрокаЦена Из Цены Цикл
			СтрокаЦена.Отображать = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажков(ЗначениеУстанавливаемойПометки, УзелДереваФормы)
	
	Для Каждого СтрокаДерева Из УзелДереваФормы.ПолучитьЭлементы() Цикл
	
		СтрокаДерева.Создать = ЗначениеУстанавливаемойПометки;
		УстановитьЗначениеФлажков(ЗначениеУстанавливаемойПометки, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
