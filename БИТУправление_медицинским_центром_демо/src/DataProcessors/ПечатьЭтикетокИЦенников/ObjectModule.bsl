#Область ОбработчикиСобытий
Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаТоваров" , Неопределено);
	Структура.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные"     , Неопределено); // Таблица с произвольными данными.
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив); //
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов" , Новый Соответствие); //
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанныхДляШтрихкода" , Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоляВыводШтрихкода"   , Новый Массив); //
	
	Возврат СтруктураНастроек;
	
КонецФункции

//// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
////
//// Возвращаемое значение:
////  Структура - данные, необходимые для печати этикеток и ценников.
////
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, ОбъектФорма) Экспорт
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = ОбъектФорма.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанныхДляШтрихкода);
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		// Удаление невалидных отборов.
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;		
		ОбщегоНазначенияСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПолеВыводШтрихкода Из СтруктураНастроек.ОбязательныеПоляВыводШтрихкода Цикл
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПолеВыводШтрихкода);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
	КонецЦикла;

	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя",        Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Для Каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда
		Инд = СтрНайти(Запрос.Текст, "ИЗ") + 2;
		Инд2= СтрНайти(Запрос.Текст, "КАК ИсходныеДанные")-1;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, Сред(Запрос.Текст,Инд,Инд2-Инд), " ИсходныеДанные ");
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ИсходныеДанные ИЗ &Таблица КАК Таблица;" + Символы.ПС + Запрос.Текст;
		Запрос.Параметры.Вставить("Таблица", СтруктураНастроек.ИсходныеДанные);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭкземпляров");
	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;
	
КонецФункции

//// Функция печати документа.
////
Функция Печать(МассивОбъектов, ПараметрыПечати,
	ОбъектыПечати, ПараметрыВывода, ОбъектФорма) Экспорт
	 
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяВРЕГ");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("Экземпляров");
	
	СтруктураНастроек = ПолучитьПустуюСтруктуруНастроек();
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("КоличествоЭтикеток");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("ШаблонЭтикеткиДляПечати");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Характеристика");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Серия");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Упаковка");
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("Филиал"); 
	СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить("ТипШтрихкода"); 
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанныхДляШтрихкода = "ПоляШаблонаНовый";
	
	
	// Собираем используемые поля из шаблонов.
	ТаблицаШаблонов = МассивОбъектов[1].Выгрузить(Новый Структура("Печатать", Истина));
	СоответствиеШаблонов = Новый Соответствие;
	
	ПечататьЭтикетки = Истина;

	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
		ПечататьЭтикетки = КоллекцияПечатныхФорм[0].ИмяМакета = "Этикетки";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
		СоответствиеШаблонов.Вставить(МассивОбъектов[2]);
	КонецЦикла;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение ИЗ СоответствиеШаблонов Цикл
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника. 
		Если СтруктураШаблона <> Неопределено
			И ТипЗнч(СтруктураШаблона) = Тип("Структура")
			И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
			Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
				СтруктураНастроек.ОбязательныеПоляВыводШтрихкода.Добавить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Подготовка исходных данных.
	ИсходныеДанныеСФормы = МассивОбъектов[1].Выгрузить(Новый Структура("Печатать", Истина), "Номенклатура, Характеристика, Серия, Количество,КоличествоЭкземпляров,ТипШтрихкода, Штрихкод,Упаковка, Цена");
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Прейскурант",     МассивОбъектов[3]);
	СтруктураНастроек.ПараметрыДанных.Вставить("Филиал", МассивОбъектов[4]);
	
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанныеСФормы;
	
	ТабДок = Новый ТабличныйДокумент;
	
	// Вывод табличных документов в коллекцию.
	КоллекцияПечатныхФормВнутренняя = СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки,ПараметрыПечати,ОбъектФорма);
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФормВнутренняя Цикл
		
		ТабДок = ПечатнаяФорма.ТабличныйДокумент;

	КонецЦикла;
	
	// Передадим документ на печать в форму.
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьИмяПараметраШтрихкод()
	
	Возврат Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод();
	
КонецФункции

Функция ПолучитьТипПараметраШтрихкод()
	
	Возврат "ТипШтрихкода";
	
КонецФункции

//// Функция определяет существует ли реквизит у формы.
////
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;

	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

//// Функция формирует табличный документ с ценниками и этикетками.
////
//// Возвращаемое значение:
////  Табличный документ - печатная форма с ценниками и этикетками.
////
Функция СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПараметрыПечати, ОбъектФорма)
	
	ВнешняяКомпонента = ГенерацияШтрихкодаСерверПовтИсп.ПодключитьКомпонентуГенерацииИзображенияШтрихкода("");
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек,ОбъектФорма);
	
	Эталон = ОбъектФорма.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
		ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
		ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикеток";
		ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
		ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Этикетка = 0;
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для Каждого СтрокаТовары Из СтруктураРезультата.ТаблицаТоваров Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0 тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(ПечатнаяФорма.Шаблон);
				
				Если СтруктураШаблона <> Неопределено 
					И ТипЗнч(СтруктураШаблона) = Тип("Структура") Тогда
					
					Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
					
					// Форматируем документ согласно устройству печати.
					
					ФорматЭтикетки = ПараметрыПечати[0];
					ВысотаЭтикетки = ПараметрыПечати[1];
					ШиринаЭтикетки = ПараметрыПечати[2];
					ПечататьВОригинальномРазмере = ПараметрыПечати[3];
					
					Если ШиринаЭтикетки = Неопределено Тогда ШиринаЭтикетки = 20 КонецЕсли;
					
					// Настройка размера
					// 1. Высота.
					
					Если ВысотаЭтикетки <> 0 Тогда
						
						ОбщаяВысота = 0;
						КоэфВысоты  = 2.7;
						
						Для сч = 1 По Область.Высотатаблицы Цикл
							ТекОбласть = Область.Область(сч,,сч);
							ОбщаяВысота = ОбщаяВысота + ТекОбласть.ВысотаСтроки;
						КонецЦикла;
						
						Если ОбщаяВысота = 0 Тогда
							ОбщаяВысота = 1;
						КонецЕсли;
						
						Если Не ПечататьВОригинальномРазмере Тогда
							Для сч = 1 По Область.Высотатаблицы Цикл
								ТекОбласть = Область.Область(сч,,сч);
								ТекОбласть.ВысотаСтроки = ТекОбласть.ВысотаСтроки/ОбщаяВысота * ВысотаЭтикетки * КоэфВысоты;	
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;	
					
					// 2. Ширина
					Если ШиринаЭтикетки<>0 Тогда
						
						ОбщаяШирина = 0;
						Коэф		= 0.55;
						
						Для сч = 1 По Область.ШиринаТаблицы Цикл
							ТекОбласть = Область.Область(,сч,,сч);
							ОбщаяШирина = ОбщаяШирина + ?(ТекОбласть.ШиринаКолонки = 0, 1, ТекОбласть.ШиринаКолонки);
						КонецЦикла;
						
						Если Не ПечататьВОригинальномРазмере Тогда
							Для сч = 1 По Область.ШиринаТаблицы Цикл
								ТекОбласть = Область.Область(,сч,,сч);
								ТекОбласть.ШиринаКолонки = ТекОбласть.ШиринаКолонки/ОбщаяШирина * ШиринаЭтикетки * Коэф;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
					// Применение настроек табличного документа.
					ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
					ПечатнаяФорма.ТабличныйДокумент.Автомасштаб = Ложь;
					
					Для Каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
						Если ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
							НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
							Если НаименованиеКолонки <> Неопределено Тогда
								// Служебные поля.
								ЗначениеПоля = СтрокаТовары[НаименованиеКолонки];
								Если ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
									ЗначениеПоля = Формат(ЗначениеПоля, "ДЛФ=D")
								КонецЕсли;
								Область.Параметры[ПараметрШаблона.Значение] = ЗначениеПоля;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого Рисунок Из Область.Рисунки Цикл
						Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() Тогда
							
							Если ВнешняяКомпонента = Неопределено Тогда
								ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'");
							КонецЕсли;
							
							ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкод())];
							ТипКода = Штрихкодирование.ПолучитьЗначениеТипаШтрихкодаДляЭУ(СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьТипПараметраШтрихкод())]);
							
							Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
								
								ПараметрыШтрихкода = Новый Структура;                        
								ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкода);
								ПараметрыШтрихкода.Вставить("ТипКода",         ?(ТипКода >= 0, ТипКода, 1));
								ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
								
								ПараметрыШтрихкода.Вставить("РазмерШрифта",?(СтруктураШаблона.РазмерШрифта>0,СтруктураШаблона.РазмерШрифта,8));
								Если СтруктураШаблона.Свойство("УголПоворота") Тогда
									ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
								КонецЕсли;
								
								Рисунок.Картинка = Штрихкодирование.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента,ПараметрыШтрихкода);
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров.
						Этикетка = Этикетка + 1;
						
						Если ПараметрыПечати[0] = 1 Тогда
							ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						Иначе
							Если Этикетка = 1 тогда 
								ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							ИначеЕсли ПечатнаяФорма.ТабличныйДокумент.ПроверитьПрисоединение(Область) Тогда
								ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
							ИначеЕсли  ПечатнаяФорма.ТабличныйДокумент.ПроверитьВывод(Область) Тогда
								ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							Иначе 
								ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
								Этикетка = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла; // Цикл по количеству экземпляров.
					
					ПечатнаяФорма.ТабличныйДокумент.Автомасштаб = СтруктураШаблона.МакетЭтикетки.Автомасштаб И ФорматЭтикетки  = 1;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; // Цикл по строкам таблицы товаров.
	КонецЦикла;

	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

#КонецОбласти
