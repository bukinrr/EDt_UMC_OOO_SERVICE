#Область ПрограммныйИнтерфейс

// Используется для поиска номенклатуры ЛП МДЛП через длительные операции
// Параметры:
//  Параметры - Структура:
//		мОписаниеНоменклатур - Массив - Массив структур:
//			SGTIN - Строка - Маркировка МДЛП
//			DrugCode - Строка - Код КЛП
//			sell_name - Строка - Торговое наименование
//  АдресРезультата - Строка - Адрес временного хранилища куда поместить результат выполнения
Процедура ПоискНоменклатуры(Параметры, АдресРезультата) Экспорт
	
	мОписаниеНоменклатур = Параметры.мОписаниеНоменклатур;
	мРезультатов = Новый Массив;
	// Ищем сначала по КЛП, потом по имени, сохраняем все найденные результаты только с разными уровнями дост.
	ПоискНоменклатурыПоКЛП(мОписаниеНоменклатур, мРезультатов);
	ПоискНоменклатурыПоИмени(мОписаниеНоменклатур, мРезультатов);
	ПоместитьВоВременноеХранилище(мРезультатов, АдресРезультата);
	
КонецПроцедуры

// Используется для отправки запроса в Честный Знак через длительные операции
// Параметры:
//  Параметры - Структура:
//		РезультатАвторизации - см. ТранспортМДЛПАПИКлиент.ПолучитьТекущийКлючСессии
//		JSONСтрока - Строка - Текст запроса для передачи
//  АдресРезультата - Строка - Адрес временного хранилища куда поместить результат выполнения
Процедура ЗапросВЧЗ(Параметры, АдресРезультата) Экспорт
	
	ТранспортныйМодуль = Параметры.РезультатАвторизации.ТранспортныйМодуль;
	// Пытаемся отправить запрос в ЧЗ если все успешно возвращаем структуру, если ошибка строку с ошибкой
	Попытка
		ЗащищенноеСоединение = ?(ТранспортныйМодуль.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL, Неопределено); 
		Протокол = ?(ЗащищенноеСоединение = Неопределено, "HTTP", "HTTPS"); 
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Протокол);

		HTTPСоединение = Новый HTTPСоединение(ТранспортныйМодуль.Адрес,,,,ИнтернетПрокси,,ЗащищенноеСоединение); 
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept", "application/json");
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "token " + ТранспортныйМодуль.КлючСессии);
		
		HTTPЗапрос = Новый HTTPЗапрос(ТранспортныйМодуль.ПрефиксВерсии + "/reestr/sgtin/public/sgtins-by-list", Заголовки);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(Параметры.JSONСтрока);
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = "Не удалось установить соединение с удаленным сервером. Проверьте интернет соединение и доступность ресурса " + ТранспортныйМодуль.Адрес; 
		ПоместитьВоВременноеХранилище(ТекстОшибки, АдресРезультата);
		Возврат;
	КонецПопытки;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ТекстОшибки = "Ошибка разбора ответа"; 
		ПоместитьВоВременноеХранилище(ТекстОшибки, АдресРезультата);
		Возврат;
	КонецПопытки;

	ПоместитьВоВременноеХранилище(РезультатЗапроса, АдресРезультата);
	
КонецПроцедуры

// Используется для создания номенклатуры ЛП МДЛП через длительные операции
// Параметры:
//  Параметры - Структура:
//		МассивДляЗапросаИзЕГИСЗ - Массив - Массив Структур:
//			SGTIN - Строка - Маркировка МДЛП
//			DrugCode - Строка - Код КЛП
//		JSONСтрока - Строка - Текст запроса для передачи
//  АдресРезультата - Строка - Адрес временного хранилища куда поместить результат выполнения
Процедура СозданиеНоменклатуры(Параметры, АдресРезультата) Экспорт
	ОписаниеОшибки = "";
	// Пытаемся отправить запрос в ЕГИСЗ с запросом информации о лекарственном средстве
	мРезультатЗапроса = ПолучениеСЕГИСЗИнфыПоКодуЕСКЛП(Параметры.МассивДляЗапросаИзЕГИСЗ, ОписаниеОшибки);
	Если ОписаниеОшибки <> "" Тогда
		ПоместитьВоВременноеХранилище(ОписаниеОшибки, АдресРезультата);		
	КонецЕсли;
	мСозданнойНоменклатуры = Новый Массив;
	УстановитьПривилегированныйРежим(Истина);

	// Создаем новую номенклатуру на основе уже полученной инфы из ЕГИСЗ
	Для Каждого Элемент Из мРезультатЗапроса Цикл
		НоменклатураНовая = Справочники.Номенклатура.СоздатьЭлемент();
		НоменклатураНовая.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал;
		СтрБазЕдИзмерения = ПолучитьКлассификаторЕдИзмерения(Элемент.NAME_UNIT, 1);
		НоменклатураНовая.Наименование = Элемент.NAME_TRADE + " " + СтрБазЕдИзмерения.ЕдДляНаим + " " + Элемент.STANDARD_DOZE;
		НоменклатураНовая.НаименованиеПолное = Элемент.NAME_TRADE;		
		НоменклатураНовая.БазоваяЕдиницаИзмерения = СтрБазЕдИзмерения.БазоваяЕд;
		НоменклатураНовая.КатегорияВыработки = Параметры.Специализация;
		НоменклатураНовая.КЛП = Элемент.KLP_CODE;
		НоменклатураНовая.COUNTRY_MANUFACTOR = Элемент.COUNTRY;
		НоменклатураНовая.FIRM_MANUFACTOR = Элемент.NAME_PRODUCER;
		НоменклатураНовая.REGNUM = Элемент.NUMBER_REGISTRATION;
		НоменклатураНовая.НормализованнаяФорма = Элемент.NORMALIZED_FORM;
		Если ЗначениеЗаполнено(Элемент.DATE_REGISTRATION) Тогда
			Попытка 
				НоменклатураНовая.REGDATE = ПреобразоватьВДату(Элемент.DATE_REGISTRATION);
			Исключение КонецПопытки;
		КонецЕсли;
		Если СтрНайти(НРег(Элемент.ESSENTIAL_MEDICINES), "да") Тогда
			НоменклатураНовая.JNVLS = Перечисления.СпискиЖНиВЛП.ЖНиВЛПСКонтролемЦены;
		ИначеЕсли СтрНайти(НРег(Элемент.ESSENTIAL_MEDICINES), "нет") Тогда
			НоменклатураНовая.JNVLS = Перечисления.СпискиЖНиВЛП.НеВключен;
		КонецЕсли;
		
		Если СтрНайти(НРег(Элемент.NARCOTIC_PSYCHOTROPIC), "да") Тогда
			НоменклатураНовая.NARCO = Перечисления.СпискиНаркотическихВеществ.Включен;
		ИначеЕсли СтрНайти(НРег(Элемент.NARCOTIC_PSYCHOTROPIC), "нет") Тогда
			НоменклатураНовая.NARCO = Перечисления.СпискиНаркотическихВеществ.НеВключен;
		КонецЕсли;
		
		НоменклатураНовая.АТХ = Элемент.CODE_ATC;
		
		НоменклатураНовая.Записать();
		
		ЕдиницаУпаковкиУстановлена = Ложь;
		Если ЗначениеЗаполнено(Элемент.NAME_1_PACKING) Тогда
			НоменклатураНовая.Упаковка = СоздатьЕдиницуИзмерения(Элемент.NAME_1_PACKING, Число(СтрЗаменить(Элемент.NUMBER_UNITS_1, ",", ".")), НоменклатураНовая.Ссылка);
			ЕдиницаУпаковкиУстановлена = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.NAME_2_PACKAGE) Тогда
			ЕдиницаУпаковки = СоздатьЕдиницуИзмерения(Элемент.NAME_2_PACKAGE, Число(СтрЗаменить(Элемент.NUMBER_UNITS_2, ",", ".")), НоменклатураНовая.Ссылка); 
			Если Не ЕдиницаУпаковкиУстановлена Тогда 
				НоменклатураНовая.Упаковка = ЕдиницаУпаковки;
			КонецЕсли;
		КонецЕсли;
		
		НоменклатураНовая.ЕдиницаХраненияОстатков = НайтиЕдиницуИлиСоздатьЕдХраненияОстатков(НоменклатураНовая.Ссылка);
		НоменклатураНовая.ВестиУчетПоСериям = Истина;
		НоменклатураНовая.Записать();
		мСозданнойНоменклатуры.Добавить(Новый Структура("SGTIN, Номенклатура", Элемент.SGTIN, НоменклатураНовая.Ссылка));  
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);	
	ПоместитьВоВременноеХранилище(мСозданнойНоменклатуры, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьВДату(СтрокаДата)
    
    СтрокаДата = СтрЗаменить(СтрокаДата, " 0:00:00", "");
    
    МножСтрока = СтрЗаменить(СтрокаДата, ".", Символы.ПС);
    
    стрДень = СтрПолучитьСтроку(МножСтрока,1);
    стрМесяц = СтрПолучитьСтроку(МножСтрока,2);
    стрГод = СтрПолучитьСтроку(МножСтрока,3);
    
    Возврат Дата(стрГод, стрМесяц, стрДень);

КонецФункции 

Функция СоздатьЕдиницуИзмерения(Наименование, Коэффициент, СсылкаВладелец)
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		НоваяЕдИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НоваяЕдИзмерения.Наименование = Наименование;
		НоваяЕдИзмерения.Коэффициент = Коэффициент;
		НоваяЕдИзмерения.Владелец = СсылкаВладелец; 
		НоваяЕдИзмерения.Записать();
		Возврат НоваяЕдИзмерения.Ссылка;
	Иначе
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКлассификаторЕдИзмерения(Наименование, Коэффициент)
	
	// Бывают случаи что возвращается инфа в виде "шт. (таблетки)" поэтому делим на части строку
	// И убираем символы, что не плодить одинакове ед. измерения с точками, скобками и т.д.
	СтрокаРазделенная = СтрРазделить(Наименование, " ");
	Для Каждого Элемент Из СтрокаРазделенная Цикл
		Элемент = СтрЗаменить(Элемент, ".", "");
		Элемент = СтрЗаменить(Элемент, "(", "");
		Элемент = СтрЗаменить(Элемент, ")","");
		
		// Пытаемся найти такую ед. измерения, если находим ее и возвращаем в результате
		РезультатПоиска = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Элемент);
		Если РезультатПоиска <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			ВозвращаемыеДанные = Новый Структура;
			ВозвращаемыеДанные.Вставить("БазоваяЕд", РезультатПоиска);
			Если СтрокаРазделенная.Количество() > 1 Тогда
				ВозвращаемыеДанные.Вставить("ЕдДляНаим", Строка(СтрокаРазделенная[1]));
			Иначе
				ВозвращаемыеДанные.Вставить("ЕдДляНаим", Строка(СтрокаРазделенная[0]));
			КонецЕсли;
			Возврат ВозвращаемыеДанные;		
		КонецЕсли;
	КонецЦикла;	
	
	// Если ничего не нашлось, то создаем новую ед. измерения
	Если СтрокаРазделенная.Количество() <> 0 Тогда
		НоваяЕдИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		НоваяЕдИзмерения.Наименование = СтрокаРазделенная[0];
		НоваяЕдИзмерения.Записать();
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("БазоваяЕд", НоваяЕдИзмерения.Ссылка);
		Если СтрокаРазделенная.Количество() > 1 Тогда
			ВозвращаемыеДанные.Вставить("ЕдДляНаим", Строка(СтрокаРазделенная[1]));
		Иначе
			ВозвращаемыеДанные.Вставить("ЕдДляНаим", Строка(СтрокаРазделенная[0]));
		КонецЕсли;
		Возврат ВозвращаемыеДанные;
	Иначе
		ВозвращаемыеДанные.Вставить("БазоваяЕд", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("1"));
		ВозвращаемыеДанные.Вставить("ЕдДляНаим", Строка(ВозвращаемыеДанные.БазоваяЕд))
	КонецЕсли;
	
КонецФункции

Функция ПолучениеСЕГИСЗИнфыПоКодуЕСКЛП(МассивДанных, ОписаниеОшибки)
	
	OID = "1.2.643.5.1.13.13.99.2.540";
	Версия = ЗагрузкаКлассификаторовНСИЕГИСЗ.ПолучитьПоследнююВерсиюКлассификатора(OID);
	мРезультатов = Новый Массив;
	СчетчикОшибок = 0;
	Если Версия = Неопределено Тогда
		ОписаниеОшибки = "Не удалось установить соединение с ЕГИСЗ, проверьте доступность сайта nsi.rosminzdrav.ru";
		Возврат мРезультатов;
	КонецЕсли;
	// По одной номенклатуре выгружаем информацию из ЕГИСЗ, если возникает 2 ошибки за проход массива то завершаем с ошибкой
	Для Каждого Элемент Из МассивДанных Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("filters", Новый Массив);
		СтруктураОтбора.filters.Добавить("KLP_CODE|" + Элемент.DrugCode + "|EXACT");
		Результат = ЗагрузкаКлассификаторовНСИЕГИСЗ.ПолучитьКлассификаторПоОтборуXDTO(OID, СтруктураОтбора, Версия);
		Если Результат = Неопределено Тогда
			ОписаниеОшибки = "Не удалось установить соединение с ЕГИСЗ, проверьте доступность сайта nsi.rosminzdrav.ru";
			Возврат мРезультатов;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат, "item") Тогда	
			Структура = Новый Структура;
			Для Каждого Свойства Из Результат.item.children.item Цикл
				Структура.Вставить(Свойства.key, Свойства.value); 			
			КонецЦикла;
			Структура.Вставить("SGTIN", Элемент.SGTIN);
			мРезультатов.Добавить(Структура);
		Иначе
			Если СчетчикОшибок <> 2 Тогда
				СчетчикОшибок = СчетчикОшибок + 1;
			Иначе
				ОписаниеОшибки = "Ошибка загрузки данных с ЕГИСЗ";
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мРезультатов;
	
КонецФункции

Процедура ПоискНоменклатурыПоИмени(мОписаниеНоменклатур, мРезультатов)
	
	Если мОписаниеНоменклатур.Количество() <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ";
		
		Итератор = 0;
		ЭтоПервыйПараметр = Истина;
		
		// Собираем один запрос для всех подобно из массива
		Для Каждого Элемент Из мОписаниеНоменклатур Цикл
			Если Элемент.Свойство("sell_name") И ЗначениеЗаполнено(Элемент.sell_name) Тогда
				Если ЭтоПервыйПараметр Тогда
					Запрос.Текст = Запрос.Текст + Символы.ПС + "Номенклатура.Наименование ПОДОБНО &Наименование" + Итератор +" + ""%""";
					ЭтоПервыйПараметр = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст + Символы.ПС + "ИЛИ Номенклатура.Наименование ПОДОБНО &Наименование" + Итератор +" + ""%""";	
				КонецЕсли;
				Запрос.УстановитьПараметр("Наименование" + Итератор, Элемент.sell_name);
			КонецЕсли;
		КонецЦикла;
		
		// Если есть хоть один подобно, то запрос корректен и можно выполнять
		Если СтрНайти(Запрос.Текст, "ПОДОБНО") <> 0 Тогда
			ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
			Для Каждого Элемент Из мОписаниеНоменклатур Цикл
				Если Элемент.Свойство("sell_name") Тогда
					// Перебираем все результаты, чтобы выделить интересующие нас, начинающиеся с нашего имени
					РезультатПеребора = ПереборТаблицыСРезультатамиЗапросаМДЛП(ТаблицаРезультатов, Элемент.sell_name);
					Для Каждого Результат Из РезультатПеребора Цикл
						Соответствие = Новый Соответствие;
						Соответствие.Вставить("sgtin", Элемент.sgtin);
						Соответствие.Вставить("Номенклатура", Результат);
						Соответствие.Вставить("Уровень", 3);
						мРезультатов.Добавить(Соответствие);		
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПереборТаблицыСРезультатамиЗапросаМДЛП(Таблица, ПодстрокаПоиска)
	
	РезультатПеребора = Новый Массив;
	Для Каждого Эл Из Таблица Цикл
		Если СтрНачинаетсяС(Эл.Наименование, ПодстрокаПоиска) Тогда
			РезультатПеребора.Добавить(Эл.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатПеребора;
	
КонецФункции

Процедура ПоискНоменклатурыПоКЛП(мОписаниеНоменклатур, мРезультатов)
	
	ТаблицКЛПКодов = Новый ТаблицаЗначений;	
	ТаблицКЛПКодов.Колонки.Добавить("sgtin", Новый ОписаниеТипов("Строка"));
	ТаблицКЛПКодов.Колонки.Добавить("KLP", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Элемент Из мОписаниеНоменклатур Цикл
		НоваяСтрока = ТаблицКЛПКодов.Добавить();
		Если Элемент.Свойство("sgtin") И Элемент.Свойство("Drug_Code") Тогда  
			НоваяСтрока.SGTIN = Элемент.sgtin;
			НоваяСтрока.KLP = Элемент.Drug_Code;
		КонецЕсли;
	КонецЦикла;
	
	// Ищем по КЛП коду
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаSgtinИKLP.SGTIN КАК SGTIN,
		|	ТаблицаSgtinИKLP.KLP КАК KLP
		|ПОМЕСТИТЬ SgtinИKLP
		|ИЗ
		|	&ТаблицаSgtinИKLP КАК ТаблицаSgtinИKLP
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	SgtinИKLP.SGTIN КАК SGTIN
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ SgtinИKLP КАК SgtinИKLP
		|		ПО (Номенклатура.КЛП = (ВЫРАЗИТЬ(SgtinИKLP.KLP КАК СТРОКА(41))))";
	
	Запрос.УстановитьПараметр("ТаблицаSgtinИKLP", ТаблицКЛПКодов);	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("sgtin", Выборка.SGTIN);
		Соответствие.Вставить("Номенклатура", Выборка.Ссылка);
		Соответствие.Вставить("Уровень", 2);
		мРезультатов.Добавить(Соответствие);
	КонецЦикла;
		
КонецПроцедуры

Функция НайтиЕдиницуИлиСоздатьЕдХраненияОстатков(СсылкаНоменклатура)
	
	Если ЗначениеЗаполнено(СсылкаНоменклатура.ЕдиницаХраненияОстатков) Тогда
		Возврат СсылкаНоменклатура.ЕдиницаХраненияОстатков;
	КонецЕсли; 
	
	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, СсылкаНоменклатура);
	
	Если ВыборкаЕдиниц.Следующий() Тогда
		
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
		
	Иначе
		
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		
		НайденнаяЕдиницаОбъект.Наименование            = СсылкаНоменклатура.БазоваяЕдиницаИзмерения.Наименование;
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = СсылкаНоменклатура.БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = СсылкаНоменклатура;
		
		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru ='Не удалось записать единицу хранения остатков: 
						|'") + ОписаниеОшибки());
			Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		КонецПопытки;
		
		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		
	КонецЕсли;

	Возврат НайденнаяЕдиница;
	
КонецФункции

#КонецОбласти