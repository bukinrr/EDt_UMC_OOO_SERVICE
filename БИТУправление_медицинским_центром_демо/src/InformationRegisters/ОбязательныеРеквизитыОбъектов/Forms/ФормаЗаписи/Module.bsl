#Область РазделОписанияПеременных
Перем ВопросОВидеКИЗадан;
#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ИмяСправочника.СписокВыбора.Добавить("Клиенты");
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		Запись.ИмяСправочника = Элементы.ИмяСправочника.СписокВыбора[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьИмяРеквизита();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПрефиксКИ = ОбщегоНазначенияСервер.ФункцияМенеджера("РегистрыСведений.ОбязательныеРеквизитыОбъектов","ПрефиксРеквизитовВидовКИ");
	Если СтрНачинаетсяС(Запись.ИмяРеквизита, ПрефиксКИ) Тогда
		ВидКИ = Неопределено;
		ТекстВопроса = ТекстВопросаСовместимостьВидаКИ(Запись.ИмяСправочника, Запись.ИмяРеквизита, Запись.ПредметПроверки, ВидКИ);
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,30,КодВозвратаДиалога.Да,,КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НастроитьВидКИДляПроверкиОбязательности(ВидКИ, Запись.ИмяСправочника);
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			КонецЕсли;
			
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяСправочникаПриИзменении(Элемент)
	ОбновитьИмяРеквизита();
КонецПроцедуры	

&НаКлиенте
Процедура ИмяРеквизитаПриИзменении(Элемент)
	
	ПрефиксКИ = ОбщегоНазначенияСервер.ФункцияМенеджера("РегистрыСведений.ОбязательныеРеквизитыОбъектов","ПрефиксРеквизитовВидовКИ");
	
	Если Найти(Запись.ИмяРеквизита, ПрефиксКИ) > 0 Тогда 
		Запись.ПредметПроверки = ПолучитьНепредопределенныйВидКИПоИмениРеквизита(Прав(Запись.ИмяРеквизита, СтрДлина(Запись.ИмяРеквизита) - СтрДлина(ПрефиксКИ)));
	Иначе
		Запись.ПредметПроверки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИмяРеквизита()
	
	Элементы.ИмяРеквизита.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Запись.ИмяСправочника) Тогда
		СписокРеквизитов = ПолучитьСписокРеквизитовСправочника(Запись.ИмяСправочника, Запись.ИсходныйКлючЗаписи);
		Для Каждого Реквизит Из СписокРеквизитов  Цикл
			Элементы.ИмяРеквизита.СписокВыбора.Добавить(Реквизит.Значение, Реквизит.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Установка текущего значения в обновленном списке выбора.
	Если Элементы.ИмяРеквизита.СписокВыбора.НайтиПоЗначению(Запись.ИмяРеквизита) <> Неопределено Тогда
		Запись.ИмяРеквизита	= Запись.ИмяРеквизита;
	Иначе
		Запись.ИмяРеквизита = "";
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСписокРеквизитовСправочника(ИмяСправочника, ИсходныйКлючЗаписи)
	
	Перем ТекущееЗначение;
	
	Если ИмяСправочника = ИсходныйКлючЗаписи.ИмяСправочника Тогда
		ТекущееЗначение = ИсходныйКлючЗаписи.ИмяРеквизита;
	КонецЕсли;
	
	Поля = РегистрыСведений.ОбязательныеРеквизитыОбъектов.СоздатьНаборЗаписей();
    Поля.Отбор.ИмяСправочника.Установить(ИмяСправочника);
    Поля.Прочитать();
	СписокИспользованныхРеквизитов = Новый Массив;
	Для Индекс=0 По  Поля.Количество()-1 Цикл
		СписокИспользованныхРеквизитов.Добавить( Поля.Получить(Индекс).ИмяРеквизита);
	КонецЦикла;
	
	// Получаем все поля справочника.
	СписокРеквизитов = Новый СписокЗначений;

	Для Каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].Реквизиты  Цикл
		// Исключили реквизиты, которые уже прописаны в регистре.
		Если (СписокИспользованныхРеквизитов.Найти(Реквизит.Имя) = Неопределено
				Или Реквизит.Имя = ТекущееЗначение)
			И Не Реквизит.Тип.СодержитТип(Тип("Булево"))
			И Не Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения"))
			И Не Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ХранилищеДополнительнойИнформации"))
		Тогда	
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);	
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяСправочника = "Клиенты" Тогда
		ДобавитьКонтактнуюИнформацию(СписокРеквизитов, СписокИспользованныхРеквизитов, ТекущееЗначение);	
	КонецЕсли;
	
	Возврат СписокРеквизитов;
	
КонецФункции // СписокРеквизитовСправочника()

&НаСервереБезКонтекста
Процедура ДобавитьКонтактнуюИнформацию(СписокРеквизитов, СписокИспользованныхРеквизитов, ТекущееЗначение)
	
	МассивПредопределенныхТелефонов = Новый Массив;
	
	МассивНименованийРеквизитовПоТипам = Новый Массив;
	МассивНименованийРеквизитовПоТипам.Добавить("КонтактнаяИнформацияТелефон");

	Для Каждого Элемент Из МассивНименованийРеквизитовПоТипам Цикл 
		Если СписокИспользованныхРеквизитов.Найти(Элемент) = Неопределено 
			Или Элемент = ТекущееЗначение	
		Тогда
			Синоним = Прав(Элемент, СтрДлина(Элемент) - 20);
			СписокРеквизитов.Добавить(Элемент, "Любой " + Нрег(Лев(Синоним, 1)) + РегистрыСведений.ОбязательныеРеквизитыОбъектов.ПредставлениеРеквизитаКИ(Прав(Синоним, СтрДлина(Синоним) - 1)));	
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |ГДЕ
	               |	ВидыКонтактнойИнформации.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеРеквизита = РегистрыСведений.ОбязательныеРеквизитыОбъектов.ОписаниеПроверяемогоВидаКИ(Выборка.Ссылка); 
		Если СписокИспользованныхРеквизитов.Найти(ДанныеРеквизита.ИмяРеквизита) = Неопределено 
			Или ДанныеРеквизита.ИмяРеквизита = ТекущееЗначение
		Тогда
			СписокРеквизитов.Добавить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Представление);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНепредопределенныйВидКИПоИмениРеквизита(ИмяРеквизита)
	
	Попытка
		
		УИД = СтрЗаменить(ИмяРеквизита, "_", "-");
		Ссылка = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
		
		Возврат Ссылка;
		
	Исключение 
		Возврат Неопределено;
	КонецПопытки;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстВопросаСовместимостьВидаКИ(ИмяСправочника, ИмяРеквизита, ВидКИПредметПроверки, ВидКИ)
	
	ТекстВопроса = "";
	
	Если ЗначениеЗаполнено(ВидКИПредметПроверки) Тогда
		ВидКИ = ВидКИПредметПроверки;
	Иначе
		ПрефиксКИ = РегистрыСведений.ОбязательныеРеквизитыОбъектов.ПрефиксРеквизитовВидовКИ();
		ИмяПредопределенного = СтрЗаменить(ИмяРеквизита, ПрефиксКИ, "");
		Попытка
			ВидКИ = Справочники.ВидыКонтактнойИнформации[ИмяПредопределенного];
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидКИ) Тогда
		
		Если Не ВидКИ.РедактируетсяВФормеОбъекта Тогда
			
			ШаблонТекста = НСтр("ru=' - У выбранного вида контактной информации не включен режим ""%1""'");
			
			ТекстВопроса = ТекстВопроса + Символы.ПС
						 + СтрШаблон(ШаблонТекста, ВидКИ.Метаданные().Реквизиты.РедактируетсяВФормеОбъекта.Синоним);
		КонецЕсли;
		
		// Назначен ли вид этому справочнику.
		МЗ = РегистрыСведений.НазначениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
		МЗ.Вид = ВидКИ;
		МЗ.ИмяМетаданных = ИмяСправочника;
		МЗ.Прочитать();
		Если Не МЗ.Выбран() Тогда
			ШаблонТекста = НСтр("ru=' - Вид контактной информации не назначен справочнику как основной'");
			ТекстВопроса = ТекстВопроса + Символы.ПС + ШаблонТекста;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			ТекстВопроса = НСтр("ru='Вид контактной информации не подготовлен для контроля заполнения.
									|Заполнить ему недостающие параметры?'") + Символы.ПС + ТекстВопроса;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НастроитьВидКИДляПроверкиОбязательности(ВидКИ, ИмяСправочника)
	
	Если Не ВидКИ.РедактируетсяВФормеОбъекта Тогда
		ВидКИОбъект = ВидКИ.ПолучитьОбъект();
		ВидКИОбъект.РедактируетсяВФормеОбъекта = Истина;
		ВидКИОбъект.Записать();
	КонецЕсли;
	
	МЗ = РегистрыСведений.НазначениеКонтактнойИнформации.СоздатьМенеджерЗаписи();
	МЗ.Вид = ВидКИ;
	МЗ.ИмяМетаданных = ИмяСправочника;
	МЗ.Записать();
	
КонецПроцедуры

#КонецОбласти