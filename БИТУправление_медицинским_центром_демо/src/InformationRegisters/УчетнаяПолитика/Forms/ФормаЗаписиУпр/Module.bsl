&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьКонстанты();
	
	ЗначенияДополнительнойУчетнойПолитики = ПрочитатьЗначенияУчетнойПолитикиРасширенной();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияДополнительнойУчетнойПолитики);
	
	ПрочитатьНастройкиПрочие();
	
	ШрифтКлиент	= ЗначенияДополнительнойУчетнойПолитики.ШрифтКлиент.Получить();
	ШрифтРабот	= ЗначенияДополнительнойУчетнойПолитики.ШрифтРабот.Получить();
	ДатыЗаписейЛистовОжидания = ЗначенияДополнительнойУчетнойПолитики.ДатыЗаписейЛистовОжидания.Получить();
	ПериодыЗаписиЛистовОжидания = ЗначенияДополнительнойУчетнойПолитики.ПериодыЗаписиЛистовОжидания.Получить();
	
	ЗаполнитьСписокВыбораМакетаОформленияСКД();
	
	ОбновитьТаблицуВерсионируемыхОбъектовДерево();
	ЗаполнитьДеревоГруппВерсионируемыхОбъектов();
	ПересчитатьВыбранностьГруппыОбъектовВерсионирования(ВерсионируемыеВидыОбъектовДерево);
	ПересчитатьВыбранностьГруппыОбъектовВерсионирования(ГруппыВерсионируемыхОбъектов);
	
	ЗаполнитьСписокВыбораПоляПоискаЭлемента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Прочитать();
	ПрочитатьЦвета();
	НастройкиЯчеекКалендаря = ПредопределенноеЗначение("Справочник.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка");
	
	СписокПериодичностейУчета = Элементы.ПериодичностьПланирования.СписокВыбора;
	СписокПериодичностейУчета.Добавить(Дата(1,1,1,0,5,0));
	СписокПериодичностейУчета.Добавить(Дата(1,1,1,0,10,0));
	СписокПериодичностейУчета.Добавить(Дата(1,1,1,0,15,0));
	СписокПериодичностейУчета.Добавить(Дата(1,1,1,0,20,0));
	СписокПериодичностейУчета.Добавить(Дата(1,1,1,0,30,0));
	СписокПериодичностейУчета.Добавить(Дата(1,1,1,1,0,0));
	
	СписокПредставленияФИО = Элементы.ВидПредставленияФИО.СписокВыбора;
	СписокПредставленияФИО.Добавить("Фамилия Имя Отчество",	НСтр("ru='Фамилия Имя Отчество'"));
	СписокПредставленияФИО.Добавить("Фамилия И. О.",		НСтр("ru='Фамилия И. О.'"));
	СписокПредставленияФИО.Добавить("Фамилия Имя",			НСтр("ru='Фамилия Имя'"));
	СписокПредставленияФИО.Добавить("Имя Фамилия",			НСтр("ru='Имя Фамилия'"));
	СписокПредставленияФИО.Добавить("Имя Отчество Фамилия",	НСтр("ru='Имя Отчество Фамилия'"));
	СписокПредставленияФИО.Добавить("Имя Отчество",			НСтр("ru='Имя Отчество'"));
	
	Для Каждого ЭлементСписка Из СписокПериодичностейУчета Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, "ДФ=ЧЧ:мм");
	КонецЦикла;
	
	НастройкиУзлаРБД = ПроцедурыСпециализацииПоставки.ПолучитьПереченьНастроекУзлаРБД();
	ЗаполнитьНастройкиУзлаОбменаПослеОткрытия(НастройкиУзлаРБД);
	
	ЭтаФорма.Параметры.НастройкиУзлаРБД = ЗначениеВСтрокуВнутрСервер(НастройкиУзлаРБД);
	ХранитьФотоКлиентовКакФайлыПриИзменении(Неопределено);
    СтарыйВариантКалендаряПриИзменении(Неопределено);
	ИспользоватьСкидкиПриИзменении(Неопределено);
	РежимОтбораЖурналаЗаписиПоМоделямРасписанияПриИзменении(Неопределено);

	НастроитьВидимостьДоступностьПоЭЦП();
	НастройкаПолейСубъектаЭЦП.ЗагрузитьЗначения(ПолучитьНастройкуПолейСубъекта());

	ИспользоватьОграничениеДоступаНаУровнеЗаписейПриИзменении(Неопределено);
	
	ЗаполнитьСписокВключенныхОбъектовДоРедактирования();
	
	ОграничиватьГлубинуКредитнойЛинии = ТипЗнч(Запись.МаксимальнаяСуммаДолгаКлиента) = Тип("Число");
	Элементы.МаксимальнаяСуммаДолгаКлиента.Доступность = ОграничиватьГлубинуКредитнойЛинии;
	
	ТипПризнакаПодтвержденияЗаявки = ТипЗнч(ПризнакПодтвержденнойЗаявки) = Тип("СправочникСсылка.ВидыСостоянийЗаявок");
	УстановитьПараметрыВыбораПризнакаПодтвержденияЗаписиКлиентом();
	УстановитьВидимостьДляГруппСертификаторМинцифры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Сообщения при ошибках заполнения
	МинПериодОбновленияЖЗ = 10;
	Если Запись.ПериодАвтообновленияЖурналаЗаписи > 0 
		И Запись.ПериодАвтообновленияЖурналаЗаписи < МинПериодОбновленияЖЗ
	Тогда
		ТекстСообщения = НСтр("ru='Период автообновления журнала записи должен быть более %1 секунд или быть незаполненным.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, МинПериодОбновленияЖЗ); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Запись.ПериодАвтообновленияЖурналаЗаписи",,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Вопрос об удалении штрихкодов клиентов
	Если Не Запись.ИспользоватьШтрихкодированиеКлиентов
		 И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьШтрихкодированиеКлиентов")
		 И ЕстьШтрихкодыТипа("Справочник.Клиенты")
	Тогда
		Ответ = Вопрос(НСтр("ru='Был снят признак штрихкодирования клиентов, однако есть клиенты, которым штрихкод уже присвоен. Удалить все штрихкоды клиентов?'"),РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			УдалитьШтрихкодыСправочника("Справочник.Клиенты")
		КонецЕсли;                                     
	КонецЕсли;
	
	// Вопрос об удалении штрихкодов сотрудников
	Если Не ИспользоватьШтрихкодированиеСотрудников
		 И УправлениеНастройками.ПолучитьПараметрУчетнойПолитики("ИспользоватьШтрихкодированиеСотрудников")
		 И ЕстьШтрихкодыТипа("Справочник.Сотрудники")
	Тогда
		Ответ = Вопрос(НСтр("ru='Был снят признак штрихкодирования сотрудников, однако, есть сотрудники, которым штрихкод уже присвоен. Удалить все штрихкоды сотрудников?'"),РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			УдалитьШтрихкодыСправочника("Справочник.Сотрудники")
		КонецЕсли;
	КонецЕсли;
    ЗаписатьНастройкуПолейСубъекта();
	
	Если ИспользоватьОграничениеДоступаНаУровнеЗаписей И ЕстьЗаписиВРегистрахСНезаполненнымФилиалом() Тогда
		ТекстСообщения = НСтр("ru='Остались записи в регистрах с незаполненным филиалом. 
		|Необходимо либо выключить функцию ""Использовать ограничение доступа на уровне записей"",
		|либо выполнить заполнение, нажав на кнопку ""Выполнить подготовку""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИспользоватьОграничениеДоступаНаУровнеЗаписей",,Отказ);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьКонстанты(ПараметрыЗаписи);
	
	// Запись изменений настроек узла РБД
	НастройкиУзлаРБД = ЗначениеИзСтрокиВнутр(ЭтаФорма.Параметры.НастройкиУзлаРБД);
	
	Узел = ПланыОбмена.Полный.ЭтотУзел();

	ЕстьИзмененияНастроекУзла = Ложь;
	Для Каждого Настройка Из НастройкиУзлаРБД Цикл
		Попытка
			Если Узел[Настройка] <> ЭтаФорма[Настройка] Тогда
				ЕстьИзмененияНастроекУзла = Истина;
				Прервать;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
	
	Если ЕстьИзмененияНастроекУзла Тогда
		УзелОбъект = Узел.ПолучитьОбъект();
		Для Каждого Настройка Из НастройкиУзлаРБД Цикл
			УзелОбъект[Настройка] = ЭтаФорма[Настройка];
		КонецЦикла;
		Попытка
			УзелОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Возникла ошибка при сохранении настроек узла распределённой базы: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	// Сохранение параметров расширенной (дополниетльной) учетной политики
	ЗаписатьЗначенияУчетнойПолитикиРасширенной();
	
	СохранитьНастройкиПрочие();
	
	// Сохранение цветов и шрифтов
	ТекущийОбъект.ОсновнойЦветЗаявки = Новый ХранилищеЗначения(ОсновнойЦветЗаявки);
	ТекущийОбъект.ОсновнойЦветНерабочегоВремени = Новый ХранилищеЗначения(ОсновнойЦветНерабочегоВремени);
	
	СохранитьНастройкиИсторииДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПараметрыСеанса.УчетнаяПолитика = Новый ФиксированнаяСтруктура(УправлениеНастройками.ПолучитьУчетнуюПолитику(Ложь));
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	
	Если ПараметрыЗаписи.Свойство("ИзменилсяЗаголовокПриложения") Тогда
		СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Ложь);
	КонецЕсли;
	
	// История данных
	ИзмененияИсторииДанных = ПолучитьИзмененияСоставаВерсионируемыхОбъектов();
	ЗаполнитьСписокВключенныхОбъектовДоРедактирования();
	Если ИзмененияИсторииДанных.Добавленные.Количество() + ИзмененияИсторииДанных.Удаленные.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru='Состав объектов истории данных изменился. Перейти к очистке и первоначальному созданию версий?'");
		ТекстЗаголовка = НСтр("ru='История данных'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.ОК, ТекстЗаголовка) = КодВозвратаДиалога.ОК Тогда
			ПараметрыФормы = Новый Структура("ОбъектыМетаданных", ИзмененияИсторииДанных);
			ОткрытьФорму("РегистрСведений.УчетнаяПолитика.Форма.ВыборОбъектовОбработкиВерсийИсторииДанных", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонфигурированиеЯчеекКалендаряЗапись" Тогда 
		НастройкиОбновленияКонфигурации = Неопределено;
		НастройкиОбновленияКонфигурации = ПредопределенноеЗначение("Справочник.КонфигурированиеЯчеекКалендаря.ОсновнаяНастройка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОбмена(Команда)
	ОткрытьФорму("РегистрСведений.НастройкаОбмена.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура Обмен_ВидыНоменклатурыВнешнихИС(Команда)
	ОткрытьФорму("РегистрСведений.ВидыНоменклатурыВоВнешнейИС.Форма.НастройкаВидовНоменклатуры");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУзлаОбменаПослеОткрытия(НастройкиУзлаРБД)
	
	// Чтение настроек узла РБД
	Узел = ПланыОбмена.Полный.ЭтотУзел();
	
	Для Каждого Настройка Из НастройкиУзлаРБД Цикл
		Попытка
			ЭтаФорма[Настройка] = Узел[Настройка];
		Исключение КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста                                            
Функция ЕстьШтрихкодыТипа(СтрокаТип)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА "+СтрокаТип
	;
	Возврат не Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция ПолучитьШтрихкодыДляУдаления(СтрокаТип)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец,
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.ЕдиницаИзмерения,
	|	Штрихкоды.ТипШтрихкода
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА "+СтрокаТип
	;
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции
                                 
&НаСервере
Функция УдалитьШтрихкодыСправочника(СтрокаТип)
	
	ВыбШтрихкоды = ПолучитьШтрихкодыДляУдаления(СтрокаТип);
	
	НЗ = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	Пока ВыбШтрихкоды.Следующий() Цикл
		НЗ.Отбор.Владелец.Установить(ВыбШтрихкоды.Владелец);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.Записать();
	КонецЦикла;                                     
	
КонецФункции

&НаСервере
Функция ЗначениеВСтрокуВнутрСервер(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

&НаКлиенте
Процедура ХранитьФотоКлиентовКакФайлыПриИзменении(Элемент)
	
	Элементы.БазовыйКаталогФайлов.Доступность = Запись.ХранитьФотоКлиентовКакФайлы;
	Элементы.МаксимальныйРазмерФайлаФото.Доступность = Не Запись.ХранитьФотоКлиентовКакФайлы;
	Элементы.ГруппаКаталог.Доступность = Запись.ХранитьФотоКлиентовКакФайлы;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСводныйОтчетЗаСутки(Команда)
	Форма = ПолучитьФорму("Отчет.СводныйОтчетЗаСуткиУпр.ФормаВарианта");
	Форма.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЦветЗаявокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораЦвета; 
	Диалог.Цвет = ОсновнойЦветЗаявки;
	Если Диалог.Выбрать() Тогда 
    	ОсновнойЦветЗаявки = Диалог.Цвет;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЦветНерабочегоВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораЦвета; 
	Диалог.Цвет = ОсновнойЦветНерабочегоВремени;
	Если Диалог.Выбрать() Тогда 
    	ОсновнойЦветНерабочегоВремени = Диалог.Цвет;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЦвета()
	Объектзаписи = РеквизитФормыВЗначение("Запись");
	ОсновнойЦветЗаявки = Объектзаписи.ОсновнойЦветЗаявки.Получить();
	ОсновнойЦветНерабочегоВремени = Объектзаписи.ОсновнойЦветНерабочегоВремени.Получить();
	ЗначениеВРеквизитФормы(Объектзаписи,"Запись");
КонецПроцедуры

&НаКлиенте
Процедура СтарыйВариантКалендаряПриИзменении(Элемент)
	Элементы.ОсновнойЦветНерабочегоВремени.Заголовок = ?(Запись.ОтдельнаяКолонкаРабочегоВремени,НСтр("ru='Цвет рабочего времени'"),НСтр("ru='Цвет нерабочего времени'"));
КонецПроцедуры

&НаКлиенте
Процедура ШрифтКлиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораШрифта; 
	Если ШрифтКлиент <> Неопределено Тогда
		Диалог.Шрифт = ШрифтКлиент;
	КонецЕсли;
		
	Если Диалог.Выбрать() Тогда 
    	ШрифтКлиент = Диалог.Шрифт;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШрифтРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораШрифта; 
	Если ШрифтРабот <> Неопределено Тогда
		Диалог.Шрифт = ШрифтРабот;
	КонецЕсли;
		
	Если Диалог.Выбрать() Тогда 
    	ШрифтРабот = Диалог.Шрифт;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БазовыйКаталогФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите каталог хранения файлов'");
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		БазовыйКаталогФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиалогОткрытияФайла.Каталог);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСкидкиПриИзменении(Элемент)
	Элементы.ИспользоватьКартыСкидок.Доступность = Запись.ИспользоватьСкидки;
	Элементы.ПоУмолчаниюРучноеРедактированиеСкидок.Доступность = Запись.ИспользоватьСкидки;
	Если НЕ Запись.ИспользоватьСкидки Тогда
		ИспользоватьКартыСкидок = Запись.ИспользоватьСкидки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПланированияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РежимОтбораЖурналаЗаписиПоМоделямРасписанияПриИзменении(Элемент)
	
	Элементы.ГруппаРазворачиватьСпискиПодбораЖЗ.Видимость = Запись.РежимОтбораЖурналаЗаписиПоМоделямРасписания;
	Элементы.ПоУмолчаниюПодборСубъектовВЖурналЗаписиПоСтруктуреОрганизации.Видимость = Запись.РежимОтбораЖурналаЗаписиПоМоделямРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиРБД(Команда)
	ОткрытьФорму("ОбщаяФорма.ИспользоватьОбменДанными");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭЦППриИзменении(Элемент)
	
	Если Не Запись.ИспользоватьЭЦП Тогда 
		ИспользоватьЭлектронныеПодписиЭМК		= Ложь;
		Запись.ИспользоватьВерсионированиеШО	= Ложь;
	КонецЕсли; 
		
	НастроитьВидимостьДоступностьПоЭЦП();
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронныеПодписиЭМКПриИзменении(Элемент)
	
	Если ИспользоватьЭлектронныеПодписиЭМК Тогда
		
		Если Не Запись.ИспользоватьВерсионированиеШО Тогда
			Ответ = Вопрос(НСтр("ru='Для работы с ЭЦП будет включено версионирование шаблонов осмотра'"), РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				Запись.ИспользоватьВерсионированиеШО = Истина;
			Иначе
				ИспользоватьЭлектронныеПодписиЭМК = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	НастроитьВидимостьДоступностьПоЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДоступностьПоЭЦП()
	
	Элементы.ГруппаЭЦП.Доступность = Запись.ИспользоватьЭЦП;
	
	Элементы.ОткрытьНастройкиЭЦП.Доступность				= ИспользоватьЭлектронныеПодписиЭМК;
	Элементы.ОткрытьНастройкиПолейСубъекта.Доступность		= ИспользоватьЭлектронныеПодписиЭМК;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВерсионированиеШОПриИзменении(Элемент)
	
	Если Не Запись.ИспользоватьВерсионированиеШО И ИспользоватьЭлектронныеПодписиЭМК Тогда
		Запись.ИспользоватьВерсионированиеШО = Истина;
		ПоказатьПредупреждение(,НСтр("ru='Невозможно отключить версионирование при использовании ЭЦП. Необходимо отключить использование ЭЦП.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭЦП(Команда)
	
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиПолейСубъекта(Команда)
	
	ФормаСпискаПолей = ПолучитьФорму("ОбщаяФорма.эцпНастройкаПолейСубъектаПодписи");
	ФормаСпискаПолей.ВыбранныеПоля = НастройкаПолейСубъектаЭЦП;
	мсСписокПолей = ФормаСпискаПолей.ОткрытьМодально();
	Если мсСписокПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НастройкаПолейСубъектаЭЦП.ЗагрузитьЗначения(мсСписокПолей);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуПолейСубъекта()
	
	ОбъектЗаписи = РеквизитФормыВЗначение("Запись");
	ОбъектЗаписи.НастройкаПолейСубъектаЭЦП = Новый ХранилищеЗначения(НастройкаПолейСубъектаЭЦП.ВыгрузитьЗначения());	
	Попытка
		ОбъектЗаписи.Записать(Истина);	 
	Исключение КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектЗаписи,"Запись");	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуПолейСубъекта()
	ОбъектЗаписи = РеквизитФормыВЗначение("Запись");
	мсСписокПолей = ОбъектЗаписи.НастройкаПолейСубъектаЭЦП.Получить();
	Если мсСписокПолей = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат мсСписокПолей;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиОбязательныхПолей(Команда)
	Форма = ОткрытьФорму("РегистрСведений.ОбязательныеРеквизитыОбъектов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПрофосмотрыПриИзменении(Элемент)
	
	Запись.ИспользоватьСтраховыеПолисы = Запись.ИспользоватьСтраховыеПолисы Или Запись.ИспользоватьПрофосмотры;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтраховыеПолисыПриИзменении(Элемент)
	
	Запись.ИспользоватьПрофосмотры = Запись.ИспользоватьПрофосмотры И Запись.ИспользоватьСтраховыеПолисы;

КонецПроцедуры

&НаКлиенте
Процедура СтратегияСписанияПартийТоваровПоДатамПриИзменении(Элемент)
	
	СтароеЗначениеСтратегииСписанияПартии = ПолучитьЗначениеСписанияПартийИзКонстанты();
	
	Если (СтароеЗначениеСтратегииСписанияПартии = ПредопределенноеЗначение("Перечисление.СтратегияСписанияПартийТоваровПоДатам.ЛИФО") 
		ИЛИ СтароеЗначениеСтратегииСписанияПартии = ПредопределенноеЗначение("Перечисление.СтратегияСписанияПартийТоваровПоДатам.ФИФО"))
		И (СтратегияСписанияПартийТоваровПоДатам = ПредопределенноеЗначение("Перечисление.СтратегияСписанияПартийТоваровПоДатам.ЛИФО") 
		ИЛИ СтратегияСписанияПартийТоваровПоДатам = ПредопределенноеЗначение("Перечисление.СтратегияСписанияПартийТоваровПоДатам.ФИФО"))
	Тогда
	    СтратегияСписанияПартийТоваровПоДатамПриИзмененииНаСервере(СтратегияСписанияПартийТоваровПоДатам);
		Возврат;
	КонецЕсли;
		
	Ответ = Вопрос(НСтр("ru='Уверены что хотите изменить стратегию списания партий товаров?'"),РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда        
		Если СтратегияСписанияПартийТоваровПоДатам = ПредопределенноеЗначение("Перечисление.СтратегияСписанияПартийТоваровПоДатам.Средняя") Тогда
			ВариантыОтветов = Новый СписокЗначений;
			ВариантыОтветов.Добавить(Истина, "Очистить");
			ВариантыОтветов.Добавить(Ложь, "Оставить");
			ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена);
			Ответ = Вопрос(НСтр("ru='Если ранее стратегия списания была не по средней стоимости, текущие остатки на складах еще учитываются в разрезе отдельных партий приходования.
							|Очистить значение партии у текущих остатков?
							|В случае, если старые партии не будут очищены, они будут списаны в первую очередь, а по новым поступлениям учет юудет вестись без детализации по партиям (по средней).'"),ВариантыОтветов);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				СтратегияСписанияПартийТоваровПоДатам = СтароеЗначениеСтратегииСписанияПартии;
				Возврат;
			КонецЕсли;
			СтратегияСписанияПартийТоваровПоДатамПриИзмененииНаСервере(СтратегияСписанияПартийТоваровПоДатам, Ответ);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru='Изменение стратегии списания не ведёт к автоматическому заполнению сведений о партиях остатков.
							|Для установления значений партии у остатков следует перепровести документы прихода и расхода складских остатков либо оставить старые остатки без партии, а по новым приходам вести партионный учет.
							|В первую очередь будут списаны остатки, по которым нет сведений о партии приходования.'"),,НСтр("ru='Внимание!'"));
			СтратегияСписанияПартийТоваровПоДатамПриИзмененииНаСервере(СтратегияСписанияПартийТоваровПоДатам);
		КонецЕсли;
	Иначе
		СтратегияСписанияПартийТоваровПоДатам = СтароеЗначениеСтратегииСписанияПартии;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтратегияСписанияПартийТоваровПоДатамПриИзмененииНаСервере(СтратегияСписанияПартийТоваровПоДатам, Очистить = Ложь)
	
	Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
		Если Очистить Тогда
			
			РегистрыНакопления.ПартииТоваровНаСкладах.УстановитьИспользованиеИтогов(Ложь);			
			Попытка
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПартииТоваровНаСкладах.Регистратор
				|ИЗ
				|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах";
				
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
								
				Счетчик = 0;
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Регистратор) Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
					НаборЗаписей.Прочитать();
					
					Для Каждого Запись Из НаборЗаписей Цикл
						Если ЗначениеЗаполнено(Запись.ДокументОприходования) Тогда
							
							Если Счетчик > 50 Тогда
								ЗафиксироватьТранзакцию();
								НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
								Счетчик = 0;
							КонецЕсли;
							
							Запись.ДокументОприходования = Неопределено;	
							Счетчик = Счетчик + 1;
							
						КонецЕсли;
					КонецЦикла;
					
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выполнение операции очистки значения партии прерванно! По причине: '") + ОписаниеОшибки());
			КонецПопытки;
			
			РегистрыНакопления.ПартииТоваровНаСкладах.УстановитьИспользованиеИтогов(Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Константы.СтратегияСписанияПартийТоваровПоДатам.Установить(СтратегияСписанияПартийТоваровПоДатам);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСписанияПартийИзКонстанты()
	Возврат Константы.СтратегияСписанияПартийТоваровПоДатам.Получить();		
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьЗначенияУчетнойПолитикиРасширенной()
	
	Результат = Новый Структура;
	
	УправлениеНастройками.ДополнитьУчетнуюПолитикуРасширеннымиНастройками(Результат);
	
	Возврат Результат;

КонецФункции

// Запись параметров из формы в регистр из обработчика ПередЗаписьюНаСервере.
&НаСервере
Функция ЗаписатьЗначенияУчетнойПолитикиРасширенной()
	
	ЗначенияПараметров = Новый Структура;
	пчПараметры = Перечисления.ПараметрыУчетнойПолитики;	
	ИменаПараметровХранилищеЗначения = УправлениеНастройкамиПовтИсп.ПолучитьПараметрыУчетнойПолитикиРасширеннойХранилищеЗначений();
	
	Для Каждого МетаданныеПараметра Из Метаданные.Перечисления.ПараметрыУчетнойПолитики.ЗначенияПеречисления Цикл
		
		ИмяПараметра = МетаданныеПараметра.Имя;
		Параметр	 = пчПараметры[МетаданныеПараметра.Имя];
		
		Попытка
			ЗначениеНаФорме = ЭтаФорма[ИмяПараметра];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ИменаПараметровХранилищеЗначения.Найти(ИмяПараметра) <> Неопределено Тогда
			// ШрифтКлиент, ШрифтРабот и другие хранилища значений, хранимые не в основном регистре учетной политики.
			ЗначенияПараметров.Вставить(ИмяПараметра, Новый ХранилищеЗначения(ЗначениеНаФорме));
		Иначе
			// Параметр не с типом хранилище значения
			ЗначенияПараметров.Вставить(ИмяПараметра, ЗначениеНаФорме);
		КонецЕсли;
	КонецЦикла;
	
	нзУчетнаяПолитика = РегистрыСведений.УчетнаяПолитикаРасширенная.СоздатьНаборЗаписей();
	нзУчетнаяПолитика.Прочитать();
	тзУчетнаяПолитика = нзУчетнаяПолитика.Выгрузить();
	
	пчПараметры = Перечисления.ПараметрыУчетнойПолитики;
	
	МетаданныеПараметров = Метаданные.Перечисления.ПараметрыУчетнойПолитики.ЗначенияПеречисления;
	Для Каждого КлючЗначение Из ЗначенияПараметров Цикл
		
		Попытка
			Параметр = пчПараметры[КлючЗначение.Ключ];
		Исключение
			Продолжить;
		КонецПопытки;
		
		СтрокаУП = тзУчетнаяПолитика.Найти(Параметр, "Параметр");
		
		Если СтрокаУП = Неопределено Тогда
			СтрокаУП = тзУчетнаяПолитика.Добавить();
			СтрокаУП.Параметр = Параметр;
		КонецЕсли;
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("ХранилищеЗначения") Тогда
			СтрокаУП.ХранилищеЗначения = КлючЗначение.Значение;
		Иначе
			СтрокаУП.Значение = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	нзУчетнаяПолитика.Загрузить(тзУчетнаяПолитика);
	нзУчетнаяПолитика.Записать();
	
КонецФункции

&НаКлиенте
Процедура ДатыЗаписейЛистовОжиданияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолныйСписокДат = CRMКлиентСервер.ПолучитьСтандартныеДатыЗаписиЛистовОжидания();
	ПараметрыФормы = Новый Структура("СписокЗначений, ВыбранныеЭлементыСписка, ВыбиратьВсеЕслиВыбранныхНет",
		ПолныйСписокДат, ДатыЗаписейЛистовОжидания, Истина);
	ФормаВыбора = ПолучитьФорму("ОбщаяФорма.ФормаВыбораЭлементовСпискаЗначений", ПараметрыФормы);
	ФормаВыбора.Заголовок = НСтр("ru='Выбор используемых дат записи'");
	ВыбранныеЭлементы = ФормаВыбора.ОткрытьМодально();
	Если ВыбранныеЭлементы <> Неопределено Тогда
		ЭтаФорма.Модифицированность = Истина;
		Если ВыбранныеЭлементы.Количество() = 0 Тогда
			ДатыЗаписейЛистовОжидания = ПолныйСписокДат;
		Иначе
			ДатыЗаписейЛистовОжидания = ВыбранныеЭлементы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодыЗаписиЛистовОжиданияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолныйСписокДат = CRMКлиентСервер.ПолучитьСтандартныеПериодыДатыЗаписиЛистовОжидания();
	ПараметрыФормы = Новый Структура("СписокЗначений, ВыбранныеЭлементыСписка, ВыбиратьВсеЕслиВыбранныхНет",
		ПолныйСписокДат, ПериодыЗаписиЛистовОжидания, Истина);
	ФормаВыбора = ПолучитьФорму("ОбщаяФорма.ФормаВыбораЭлементовСпискаЗначений", ПараметрыФормы);
	ФормаВыбора.Заголовок = НСтр("ru='Выбор используемых периодов записи'");
	ВыбранныеЭлементы = ФормаВыбора.ОткрытьМодально();
	Если ВыбранныеЭлементы <> Неопределено Тогда
		ЭтаФорма.Модифицированность = Истина;
		Если ВыбранныеЭлементы.Количество() = 0 Тогда
			ПериодыЗаписиЛистовОжидания = ПолныйСписокДат;
		Иначе
			ПериодыЗаписиЛистовОжидания = ВыбранныеЭлементы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОграничениеДоступаНаУровнеЗаписейПриИзменении(Элемент)

	Элементы.ОграничиватьЧтениеФилиаломПользователя.Доступность = ИспользоватьОграничениеДоступаНаУровнеЗаписей;
	Элементы.ЗапретитьАдминистраторуЗаписьКлиентаНеВСвойФилиал.Доступность = ИспользоватьОграничениеДоступаНаУровнеЗаписей;
	
	УстановитьВидимостьПодготовкиДанныхДляRLS();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПодготовкиДанныхДляRLS()
	
	Если ИспользоватьОграничениеДоступаНаУровнеЗаписей
		И ЕстьЗаписиВРегистрахСНезаполненнымФилиалом()
	Тогда
		Элементы.ГруппаОбновлениеФилиалаВРегистрах.Видимость = Истина;
	Иначе	
		Элементы.ГруппаОбновлениеФилиалаВРегистрах.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФилиалВРегистрах(Команда)
	
	РегистрыНакопленияСФилиалом = ПолучитьРегистрыНакопленияСФилиалом();
	
	РазмерТранзакции = 300;
	РазмерВыборкиЗапроса = 20000;
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерВыборкиЗапроса, "ЧГ=") + "
	|	Регистр.Регистратор,
	|	Регистр.Регистратор.Филиал КАК Филиал
	|ИЗ
	|	РегистрНакопления.%ИмяРегистра% КАК Регистр
	|ГДЕ
	|	Регистр.НомерСтроки = 1
	|	И Регистр.Филиал = &ПустойФилиал";
	
	СчРег = 1;	
	
	Для Каждого ИмяРегистра Из РегистрыНакопленияСФилиалом Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "%ИмяРегистра%", ИмяРегистра);
		ПовторятьЗапрос = Истина;
		ПакетовОбработано = 0;
		
		Пока ПовторятьЗапрос Цикл
			Состояние(НСтр("ru='Обрабатывается регистр '") + ИмяРегистра, Окр(СчРег/РегистрыНакопленияСФилиалом.Количество()*100,0),
				НСтр("ru='Обработано '") + РазмерВыборкиЗапроса * ПакетовОбработано + НСтр("ru=' записей.'"));
			ОбработкаПрерыванияПользователя();
			
			ПовторятьЗапрос = ЗаполнитьФилиалыВПакетеПоЗапросу(ТекстЗапроса, РазмерТранзакции,РазмерВыборкиЗапроса, ИмяРегистра);
			ПакетовОбработано = ПакетовОбработано + 1;	
		КонецЦикла;
			
		СчРег = СчРег + 1;
		
	КонецЦикла;
	
	УстановитьВидимостьПодготовкиДанныхДляRLS();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегистрыНакопленияСФилиалом()
	
	РегистрыНакопленияСФилиалом = Новый Массив;

	Для Каждого МетаданныеРегистра Из Метаданные.РегистрыНакопления Цикл
		Если МетаданныеРегистра.Измерения.Найти("Филиал") <> Неопределено
			И МетаданныеРегистра.Имя <> "РаспределениеЗатрат"
		Тогда
			РегистрыНакопленияСФилиалом.Добавить(МетаданныеРегистра.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегистрыНакопленияСФилиалом;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьФилиалыВПакетеПоЗапросу(ТекстЗапроса, РазмерТранзакции, РазмерВыборкиЗапроса, ИмяРегистра)
	
	Сч = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойФилиал", Справочники.Филиалы.ПустаяСсылка());
	Запрос.Текст = ТекстЗапроса;
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого СтрЗапись Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(Выборка.Филиал) Тогда
				СтрЗапись.Филиал = Выборка.Филиал;
			Иначе
				СтрЗапись.Филиал = ПланыОбмена.Полный.ЭтотУзел().Филиал;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Сч = Сч + 1;
		Если Сч >= РазмерТранзакции Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			Сч = 0;
		КонецЕсли;
		
	КонецЦикла;	
	ЗафиксироватьТранзакцию();
	
	Если Выборка.Количество() < РазмерВыборкиЗапроса Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьЗаписиВРегистрахСНезаполненнымФилиалом()
	
	РегистрыНакопленияСФилиалом = ПолучитьРегистрыНакопленияСФилиалом();
		
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Регистр.Регистратор,
	|	Регистр.Регистратор.Филиал КАК Филиал
	|ИЗ
	|	РегистрНакопления.%ИмяРегистра% КАК Регистр
	|ГДЕ
	|	Регистр.НомерСтроки = 1
	|	И Регистр.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	
	Для Каждого ИмяРегистра Из РегистрыНакопленияСФилиалом Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "%ИмяРегистра%", ИмяРегистра);
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПрочитатьНастройкиПрочие()
	
	ПрочитатьНастройкиМедицинскогоУчета();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПрочие()
	
	СохранитьНастройкиМедицинскогоУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиМедицинскогоУчета()
	
	ПараметрыНаФорме = ПараметрыМедицинскогоУчетаНаФорме();
	
	Если ЗначениеЗаполнено(ПараметрыНаФорме) Тогда
		НастройкиМедУчета = УправлениеНастройкамиМедицинскогоУчета.ПолучитьУчетнуюПолитику();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиМедУчета, ПараметрыНаФорме);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиМедицинскогоУчета()
	
	ПараметрыНаФорме = ПараметрыМедицинскогоУчетаНаФорме();
	
	Если ЗначениеЗаполнено(ПараметрыНаФорме) Тогда
		ИменаПараметров = СтрРазделить(ПараметрыНаФорме, ",", Ложь);
		Для Каждого ИмяПараметра Из ИменаПараметров Цикл
			ИмяПараметра = СокрЛП(ИмяПараметра);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяПараметра) Тогда
				УправлениеНастройкамиМедицинскогоУчета.УстановитьЗначениеПараметра(ИмяПараметра, ЭтотОбъект[ИмяПараметра]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыМедицинскогоУчетаНаФорме()
	
	ПараметрыНаФорме = "";
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.Найти("НастройкиМедицинскогоУчета");
	Если МетаданныеРегистра <> Неопределено Тогда
		
		МетаданныеРесуры = МетаданныеРегистра.Ресурсы;
		
		ДобавитьИмяКСпискуЕслиЕстьВМетаданных(МетаданныеРесуры, "ПакетСоставныхФразРеакцииНаАллергены", ПараметрыНаФорме);
		
		// Подсистема "Медицина\Вакцинации"
		ДобавитьИмяКСпискуЕслиЕстьВМетаданных(МетаданныеРесуры, "ИспользоватьВакцинации", ПараметрыНаФорме);
		ДобавитьИмяКСпискуЕслиЕстьВМетаданных(МетаданныеРесуры, "ВакцинацииСоздаютЛистыОжидания", ПараметрыНаФорме);
		
		// Подсистема "Медицина\Врачебные комиссии"
		ДобавитьИмяКСпискуЕслиЕстьВМетаданных(МетаданныеРесуры, "ИспользоватьВК", ПараметрыНаФорме);
		
		ДобавитьИмяКСпискуЕслиЕстьВМетаданных(МетаданныеРесуры, "ИспользоватьЭлектронныеПодписиЭМК", ПараметрыНаФорме);
	КонецЕсли;
	
	Возврат ПараметрыНаФорме;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьИмяКСпискуЕслиЕстьВМетаданных(КоллекцияОбъектовМетаданных, Имя, Приемник)
	
	Если КоллекцияОбъектовМетаданных.Найти(Имя) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.КонкатенацияСтрок(Приемник, Имя, ",");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьКонстанты()
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	СтратегияСписанияПартийТоваровПоДатам = Константы.СтратегияСписанияПартийТоваровПоДатам.Получить();
	
	ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов = Константы.ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов.Получить();
	
	ФизическиеЛицаИспользуются = Константы.ФизическиеЛицаИспользуются.Получить();
	
КонецПроцедуры

// Запись тех изменений констант, которые не записываются сразу при изменении настройки (перед обработкой изменения).
&НаСервере
Процедура ЗаписатьКонстанты(ПараметрыЗаписи)
	
	Если Константы.ЗаголовокСистемы.Получить() <> ЗаголовокСистемы Тогда
		Константы.ЗаголовокСистемы.Установить(СокрЛП(ЗаголовокСистемы));
		ПараметрыЗаписи.Вставить("ИзменилсяЗаголовокПриложения", Истина);
	КонецЕсли;
	
	Если Константы.ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов.Получить() <> ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов Тогда
		Константы.ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов.Установить(ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов);
	КонецЕсли;
	
	Если Константы.ИспользоватьЭлектронныеПодписи.Получить() <> Запись.ИспользоватьЭЦП Тогда
		Константы.ИспользоватьЭлектронныеПодписи.Установить(Запись.ИспользоватьЭЦП);
	КонецЕсли;
	
	Если Константы.ФизическиеЛицаИспользуются.Получить() <> ФизическиеЛицаИспользуются Тогда
		Константы.ФизическиеЛицаИспользуются.Установить(ФизическиеЛицаИспользуются);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораМакетаОформленияСКД()
	
	СписокВыбора = Элементы.ОсновнойМакетОформленияСКД.СписокВыбора;
	
	Для Каждого ЭлементБиблиотеки Из БиблиотекаМакетовОформленияКомпоновкиДанных Цикл
		СписокВыбора.Добавить(ЭлементБиблиотеки.Имя, ЭлементБиблиотеки.Представление); 
	КонецЦикла;
	
	Если СписокВыбора.НайтиПоЗначению(ОсновнойМакетОформленияСКД) = Неопределено Тогда
		СписокВыбора.Добавить(ОсновнойМакетОформленияСКД, ОсновнойМакетОформленияСКД + " (удалён)");
	КонецЕсли;
	
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

#Область ИсторияДанных

&НаСервере
Процедура СохранитьНастройкиИсторииДанных()
	
	ПеречислениеИспользоватьИсториюДанных = Метаданные.Справочники.Банки.Реквизиты.КоррСчет.ИсторияДанных;
	ПеречислениеНеИспользоватьИсториюДанных = Метаданные.Справочники.Банки.Реквизиты.Телефоны.ИсторияДанных;
		
	ДеревоВерсий=РеквизитФормыВЗначение("ВерсионируемыеВидыОбъектовДерево");
	Для Каждого СтрокаУровня1 Из ДеревоВерсий.Строки Цикл
		Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
			// Сравним отметку в списке с настройками и свойством в конфигураторе	
			ИсторияДанныхСервер.ПроверитьУстановитьНастройкиИсторииДанных(СтрокаУровня2);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуВерсионируемыхОбъектовДерево()
	
	ПеречислениеИспользоватьИсториюДанных = Метаданные.Справочники.Банки.Реквизиты.КоррСчет.ИсторияДанных;
	ПеречислениеНеИспользоватьИсториюДанных = Метаданные.Справочники.Банки.Реквизиты.Телефоны.ИсторияДанных;
	
	МассивМетаданных = Новый Массив;
	МассивМетаданных.Добавить("Документы");
	МассивМетаданных.Добавить("Справочники");
	МассивМетаданных.Добавить("Задачи");		
	МассивМетаданных.Добавить("ПланыВидовХарактеристик");
	МассивМетаданных.Добавить("РегистрыСведений");
	
	ДеревоВерсий=РеквизитФормыВЗначение("ВерсионируемыеВидыОбъектовДерево");
	
	Для Каждого ОбъектМетаданных Из МассивМетаданных Цикл 
		СтрокаВерсийУровень1 = ДеревоВерсий.Строки.Добавить();
		Если ОбъектМетаданных = "ПланыВидовХарактеристик" Тогда
			СтрокаВерсийУровень1.Представление = "Планы видов характеристик";
		ИначеЕсли ОбъектМетаданных = "РегистрыСведений" Тогда
			СтрокаВерсийУровень1.Представление = "Регистры сведений";
		Иначе
			СтрокаВерсийУровень1.Представление = ОбъектМетаданных;
		КонецЕсли;
		Для Каждого ТекущийОбъектМетаданных Из Метаданные[ОбъектМетаданных] Цикл
			
			Если НеОтображатьОбъектВДеревеИсторииДанных(ТекущийОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПравоДоступа("Просмотр", ТекущийОбъектМетаданных) Тогда	
				ИмяОбъектаМетаданных = ТекущийОбъектМетаданных.Синоним;
				Если ИмяОбъектаМетаданных = "" Тогда
					ИмяОбъектаМетаданных = ТекущийОбъектМетаданных.Имя;
				КонецЕсли;
				СтрокаВерсийУровень2=СтрокаВерсийУровень1.Строки.Добавить();
				СтрокаВерсийУровень2.Представление=ИмяОбъектаМетаданных;
				СтрокаВерсийУровень2.Имя=ТекущийОбъектМетаданных.Имя;
				РазделенноеПолноеИмя = СтрРазделить(ТекущийОбъектМетаданных.ПолноеИмя(), ".");
				СтрокаВерсийУровень2.Тип = РазделенноеПолноеИмя[0]; 
				ТекущиеНастройки = ИсторияДанных.ПолучитьНастройки(ТекущийОбъектМетаданных);
				Если ТекущиеНастройки = Неопределено Тогда
					СтрокаВерсийУровень2.Выбран = ТекущийОбъектМетаданных.ИсторияДанных = ПеречислениеИспользоватьИсториюДанных;
				Иначе
					СтрокаВерсийУровень2.Выбран = ТекущиеНастройки.Использование;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоВерсий, "ВерсионируемыеВидыОбъектовДерево");

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИзмененияСоставаВерсионируемыхОбъектов()
	
	Результат = Новый Структура("Добавленные, Удаленные", Новый Массив, Новый Массив);
	
	Для Каждого СтрокаВерсийУровень1 Из ВерсионируемыеВидыОбъектовДерево.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВерсийУровень2 Из СтрокаВерсийУровень1.ПолучитьЭлементы() Цикл
			
			ПолноеИмя = СтрокаВерсийУровень2.Тип + "." + СтрокаВерсийУровень2.Имя;
			
			Если СтрокаВерсийУровень2.Выбран = 0
				И ВерсионируемыеВидыОбъектовИсходныйСостав.НайтиПоЗначению(ПолноеИмя) <> Неопределено
			Тогда
				Результат.Удаленные.Добавить(ПолноеИмя);
				
			ИначеЕсли СтрокаВерсийУровень2.Выбран = 1
				И ВерсионируемыеВидыОбъектовИсходныйСостав.НайтиПоЗначению(ПолноеИмя) = Неопределено
			Тогда
				Результат.Добавленные.Добавить(ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВключенныхОбъектовДоРедактирования()
	
	ВерсионируемыеВидыОбъектовИсходныйСостав.Очистить();
	
	Для Каждого СтрокаВерсийУровень1 Из ВерсионируемыеВидыОбъектовДерево.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВерсийУровень2 Из СтрокаВерсийУровень1.ПолучитьЭлементы() Цикл
			Если СтрокаВерсийУровень2.Выбран = 1 Тогда
				ВерсионируемыеВидыОбъектовИсходныйСостав.Добавить(СтрокаВерсийУровень2.Тип + "." + СтрокаВерсийУровень2.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеОтображатьОбъектВДеревеИсторииДанных(ОбъектМетаданных)
	
	ИмяПодсистемы = "СайтМобильноеПриложение";
	
	Если ОбщегоНазначения.ПодсистемаСуществует(ИмяПодсистемы)
		И Метаданные.Подсистемы[ИмяПодсистемы].Состав.Содержит(ОбъектМетаданных)
	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВерсионируемыеВидыОбъектовДеревоВыбранПриИзменении(Элемент)
	
	ТекущаяСтрока = ВерсионируемыеВидыОбъектовДерево.НайтиПоИдентификатору(Элементы.ВерсионируемыеВидыОбъектовДерево.ТекущаяСтрока);
	Если ТекущаяСтрока.Выбран = 2 Тогда
		ТекущаяСтрока.Выбран = 0;
	КонецЕсли;			
	Если ТекущаяСтрока.ПолучитьЭлементы().Количество()>0 Тогда 
		Для Каждого ПодчиненныйЭлемент Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			ПодчиненныйЭлемент.Выбран = Булево(ТекущаяСтрока.Выбран);
			ОбработкаВыделенияОбъектаИсторииДанныхВДереве(ПодчиненныйЭлемент.Имя, ПодчиненныйЭлемент.Выбран, ГруппыВерсионируемыхОбъектов);
		КонецЦикла;
	Иначе
		ПересчитатьВыбранностьГруппыОбъектовВерсионирования(ВерсионируемыеВидыОбъектовДерево);
		ОбработкаВыделенияОбъектаИсторииДанныхВДереве(ТекущаяСтрока.Имя, ТекущаяСтрока.Выбран, ГруппыВерсионируемыхОбъектов);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоГруппВерсионируемыхОбъектов()
	
	ДеревоГрупп = РеквизитФормыВЗначение("ГруппыВерсионируемыхОбъектов");
	ОписаниеГрупп = ПолучитьОбщийМакет("НаборыОбъектовИсторииДанных");
	ОсновноеДерево = РеквизитФормыВЗначение("ВерсионируемыеВидыОбъектовДерево");	
	Для Строка = 2 По ОписаниеГрупп.ВысотаТаблицы Цикл
		
		ПерваяЯчейка = ОписаниеГрупп.Область(Строка, 1);
		ВтораяЯчейка = ОписаниеГрупп.Область(Строка, 2);
		ТретьяЯчейка = ОписаниеГрупп.Область(Строка, 3);
		
		Если ПустаяСтрока(ПерваяЯчейка.Текст) Тогда
			Продолжить;
		ИначеЕсли ПустаяСтрока(ВтораяЯчейка.Текст) Тогда
			СтрокаУровень1 = ДеревоГрупп.Строки.Найти(ПерваяЯчейка.Текст, "Представление");
			Если СтрокаУровень1 = Неопределено Тогда
				СтрокаУровень1 = ДеревоГрупп.Строки.Добавить();
				СтрокаУровень1.Представление = ПерваяЯчейка.Текст;
			КонецЕсли;
		Иначе
			СтрокаУровень1 = ДеревоГрупп.Строки.Найти(ПерваяЯчейка.Текст, "Представление");
			Если СтрокаУровень1 = Неопределено Тогда
				СтрокаУровень1 = ДеревоГрупп.Строки.Добавить();
				СтрокаУровень1.Представление = ПерваяЯчейка.Текст;
			КонецЕсли;

			СтрокаУровень2 = СтрокаУровень1.Строки.Добавить();
			СтрокаУровень2.Имя = ТретьяЯчейка.Текст;
			СтрокаУровень2.Тип = ВтораяЯчейка.Текст;
			СтрокаСПредставлением = ОсновноеДерево.Строки.Найти(СтрокаУровень2.Имя, "Имя", Истина);
			Если СтрокаСПредставлением <> Неопределено Тогда 
				СтрокаУровень2.Представление = СтрокаСПредставлением.Представление;
			Иначе
				СтрокаУровень2.Представление = НСтр("ru='В макете введен ошибочный объект метаданных'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоГрупп, "ГруппыВерсионируемыхОбъектов");
	
	ПроставитьПервоначальныеОтметкиГруппВерсионируемыхОбъектов();

КонецПроцедуры	

&НаКлиенте
Процедура ГруппыВерсионируемыхОбъектовВыбранПриИзменении(Элемент)
		
	ТекущаяСтрока = ГруппыВерсионируемыхОбъектов.НайтиПоИдентификатору(Элементы.ГруппыВерсионируемыхОбъектов.ТекущаяСтрока);
	Если ТекущаяСтрока.Выбран = 2 Тогда
		ТекущаяСтрока.Выбран = 0;
	КонецЕсли;			
	
	ИзмененныеОбъекты = Новый Массив;
	
	Если ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда 
		
		Для Каждого ПодчиненныйЭлемент Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			
			ПодчиненныйЭлемент.Выбран = ТекущаяСтрока.Выбран;
			ИзмененныеОбъекты.Добавить(ПодчиненныйЭлемент.Имя);
		КонецЦикла;
	Иначе
		ИзмененныеОбъекты.Добавить(ТекущаяСтрока.Имя);
	КонецЕсли;
	
	Для Каждого ИзмененныйОбъект Из ИзмененныеОбъекты Цикл
		ОбработкаВыделенияОбъектаИсторииДанныхВДереве(ИзмененныйОбъект, Булево(ТекущаяСтрока.Выбран), ВерсионируемыеВидыОбъектовДерево, ГруппыВерсионируемыхОбъектов);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВыбранностьГруппыОбъектовВерсионирования(ДеревоФормы)
	
	Для Каждого СтрокаУровня1 Из ДеревоФормы.ПолучитьЭлементы() Цикл
		
		Выбран = 0;
		ЕстьВыбранные = Ложь;
		ЕстьНеВыбранные = Ложь;
		Для Каждого СтрокаУровня2 Из СтрокаУровня1.ПолучитьЭлементы() Цикл
			
			Если СтрокаУровня2.Выбран = 0 Тогда
				ЕстьНеВыбранные = Истина;
			Иначе
				ЕстьВыбранные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьВыбранные И ЕстьНеВыбранные Тогда
			СтрокаУровня1.Выбран = 2;
		ИначеЕсли ЕстьВыбранные Тогда;
			СтрокаУровня1.Выбран = 1;
		Иначе
			СтрокаУровня1.Выбран = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаВыделенияОбъектаИсторииДанныхВДереве(ИмяОбъектаМетаданных, Выбран, ДеревоФормы, ДеревоОтветногоПересчета = Неопределено)
	
	Для Каждого СтрокаУровень1 Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаУровень2 Из СтрокаУровень1.ПолучитьЭлементы() Цикл
			Если СтрокаУровень2.Имя = ИмяОбъектаМетаданных Тогда
				СтрокаУровень2.Выбран = Выбран;
		
				Если ДеревоОтветногоПересчета <> Неопределено Тогда
					ОбработкаВыделенияОбъектаИсторииДанныхВДереве(СтрокаУровень2.Имя, СтрокаУровень2.Выбран, ДеревоОтветногоПересчета);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	ПересчитатьВыбранностьГруппыОбъектовВерсионирования(ДеревоФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьПервоначальныеОтметкиГруппВерсионируемыхОбъектов()
	
	Для Каждого СтрокаУровня1 Из ВерсионируемыеВидыОбъектовДерево.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаУровня2 Из СтрокаУровня1.ПолучитьЭлементы() Цикл
			ОбработкаВыделенияОбъектаИсторииДанныхВДереве(СтрокаУровня2.Имя, Число(СтрокаУровня2.Выбран), ГруппыВерсионируемыхОбъектов);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НоменклатураОжиданияКлиентаСоздать(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Наименование", НСтр("ru='Ожидание клиента (служебная для поиска времени записи)'"));
	ЗначенияЗаполнения.Вставить("НаименованиеПолное", ЗначенияЗаполнения.Наименование);
	ЗначенияЗаполнения.Вставить("ВидНоменклатуры", ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Услуга"));
	ЗначенияЗаполнения.Вставить("ПланируетсяБезСотрудника", Истина);
	ЗначенияЗаполнения.Вставить("ПланируетсяБезОборудования", Истина);
	ЗначенияЗаполнения.Вставить("ТолькоДляПланирования", Истина);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, РежимВыбора, ТекстЗаполнения", ЗначенияЗаполнения, Истина, ЗначенияЗаполнения.Наименование);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Элементы.НоменклатураОжиданияКлиента,,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьГлубинуКредитнойЛинииПриИзменении(Элемент)
	
	Элементы.МаксимальнаяСуммаДолгаКлиента.Доступность = ОграничиватьГлубинуКредитнойЛинии;
	Если ОграничиватьГлубинуКредитнойЛинии Тогда
		ОписаниеЧисло = Новый ОписаниеТипов("Число");
		Запись.МаксимальнаяСуммаДолгаКлиента = ОписаниеЧисло.ПривестиЗначение(Запись.МаксимальнаяСуммаДолгаКлиента);
	Иначе
		Запись.МаксимальнаяСуммаДолгаКлиента = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляВыбраннойСтраны(Команда)
	ЗаполнитьДляВыбраннойСтраныНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляВыбраннойСтраныНаСервере()
	
	ДанныеЛокализации = РегистрыСведений.УчетнаяПолитика.ПолучитьДанныеЛокализации(ОсновнаяСтрана);
	Запись.ВалютаУчета = ДанныеЛокализации.ОсновнаяВалюта;
	ОсновнойВидДУЛ = ДанныеЛокализации.ОсновнойДУЛ;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокЖизниЛида(Команда)
	Оповещение = Новый ОписаниеОповещения("ИзменитьСрокЖизниЛидаЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.Лиды.Форма.ИзменениеСрокаЖизниЛида", Новый Структура("СрокЖизниЛида", СрокЖизниЛида), ЭтотОбъект,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокЖизниЛидаЗавершение(РезультатЗаполнения, ДополнительныеПараметры) Экспорт
	Если РезультатЗаполнения <> Неопределено Тогда
		СрокЖизниЛида = РезультатЗаполнения;
	КонецЕсли;
КонецПроцедуры

#Область Подтверждение_записи_клиентом

&НаКлиенте
Процедура ТипПризнакаПодтвержденияЗаявкиПриИзменении(Элемент)
	УстановитьПараметрыВыбораПризнакаПодтвержденияЗаписиКлиентом();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораПризнакаПодтвержденияЗаписиКлиентом()
	
	ОписаниеТипа = Новый ОписаниеТипов(?(ТипПризнакаПодтвержденияЗаявки, "СправочникСсылка.ВидыСостоянийЗаявок", "ПланВидовХарактеристикСсылка.СвойстваОбъектов"));
	ПризнакПодтвержденнойЗаявки = ОписаниеТипа.ПривестиЗначение(ПризнакПодтвержденнойЗаявки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакПодтвержденнойЗаявкиПриИзменении(Элемент)
	
	Если ТипЗнч(ПризнакПодтвержденнойЗаявки) = Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов")
		И ЗначениеЗаполнено(ПризнакПодтвержденнойЗаявки)
	Тогда
		
		ТипЗначения = ДопСерверныеФункции.ПолучитьРеквизит(ПризнакПодтвержденнойЗаявки, "ТипЗначения");
		Если Не ТипЗначения.СодержитТип(Тип("Булево")) Тогда
			ПризнакПодтвержденнойЗаявки = ПредопределенноеЗначение("ПланВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка");
			ПоказатьПредупреждение(, НСтр("ru='Дополнительное свойство должно быть с типом значений свойств ""Булево""'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область _ПоискаЭлемента

&НаКлиенте
Процедура _ПоискЭлемента(Команда)
	
	Элементы.Кнопка_ПоискЭлемента.Пометка = Не Элементы.Кнопка_ПоискЭлемента.Пометка;
	Элементы._ПоискЭлемента.Видимость = Элементы.Кнопка_ПоискЭлемента.Пометка;
	ТекущийЭлемент = Элементы._ПоискЭлемента;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоляПоискаЭлемента()
	
	СписокВыбораЭлемента = Новый СписокЗначений;
	РеквизитыФормы	 = ЭтотОбъект.ПолучитьРеквизиты();
	РесурсыРегистра	 = Метаданные.РегистрыСведений.УчетнаяПолитика.Ресурсы;
	
	Для Каждого Элемент Из Элементы Цикл
		
		ЗаголовокЭлемента = Элемент.Имя;
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") // Поля формы.
			И ЗначениеЗаполнено(Элемент.ПутьКДанным)
			И Элемент <> Элементы._ПоискЭлемента
		Тогда
			Если ЗначениеЗаполнено(Элемент.Заголовок) Тогда
				ЗаголовокЭлемента = Элемент.Заголовок + " (" + Элемент.Имя + ")"; // Есть свой заголовок.
			ИначеЕсли СтрНайти(Элемент.ПутьКДанным, ".") = 0 Тогда
				// Реквизит формы.
				Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
					Если Элемент.ПутьКДанным = РеквизитФормы.Имя Тогда
						Если ЗначениеЗаполнено(РеквизитФормы.Заголовок) Тогда
							ЗаголовокЭлемента = РеквизитФормы.Заголовок
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Скорее всего, ресурс этого регистра.
				РесурсРегистра = РесурсыРегистра.Найти(СтрЗаменить(Элемент.ПутьКДанным, "Запись.", ""));
				Если РесурсРегистра <> Неопределено Тогда
					ЗаголовокЭлемента = РесурсРегистра.Синоним;
				КонецЕсли;
			КонецЕсли;
				
			Элементы._ПоискЭлемента.СписокВыбора.Добавить(Элемент.Имя, ЗаголовокЭлемента);
			
		ИначеЕсли  ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда // Команды формы.
			КомандаФормы = Команды.Найти(Элемент.ИмяКоманды);
			Если КомандаФормы <> Неопределено Тогда
				ЗаголовокЭлемента = КомандаФормы.Заголовок;
				Если ЗначениеЗаполнено(КомандаФормы.Подсказка) Тогда
					ЗаголовокЭлемента = ЗаголовокЭлемента + " (" + КомандаФормы.Подсказка + ")";
				КонецЕсли;
				Элементы._ПоискЭлемента.СписокВыбора.Добавить(Элемент.Имя, ЗаголовокЭлемента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура _ПоискЭлементаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбор Из Элемент.СписокВыбора Цикл
		Если СтрНайти(НРег(ЭлементВыбор.Представление), НРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбор.Значение, ЭлементВыбор.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПолученияДанных.Вставить("СпособПоискаСтроки", СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
КонецПроцедуры

&НаКлиенте
Процедура _ПоискЭлементаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(_ПоискЭлемента) Тогда
		ТекущийЭлемент = Элементы.Найти(_ПоискЭлемента);
		_ПоискЭлемента = "";
		
		Элементы._ПоискЭлемента.Видимость = Ложь;
		Элементы.Кнопка_ПоискЭлемента.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НастройкиСканирования(Команда)
	ОткрытьФорму("Справочник.ХранилищеДополнительнойИнформации.Форма.РедактированияСтандартныхИменСканов");
КонецПроцедуры

&НаКлиенте
Процедура ПродажаПоВыполнениюНастройкаКнопки(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиМедицинскогоУчета.Форма.НастройкаИсточниковПостоплаты");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПроксиСервера(Команда)
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
	
		#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В веб-клиенте параметры прокси-сервера необходимо задавать в настройках браузера.'"));
		Возврат;
		#КонецЕсли
		
		ТекстПредупреждения = НСтр("ru = 'В случае файлового варианта базы настройки вносятся для каждого пользователя информационной базы (в окне ""Мои настройки"").'");
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НСтр("ru='Будет открыта настройка для текущего пользователя.'");
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("НастройкиПроксиСервераДляТекущегоПользователяЗавершение", ЭтотОбъект), ТекстПредупреждения, 30);
	
	Иначе
		ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПроксиСервераДляТекущегоПользователяЗавершение(НеИспользуется1) Экспорт
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера", Новый Структура("НастройкаПроксиНаКлиенте", Истина));
КонецПроцедуры

#Область СертификатыНМУМинЦифры_Для_НСПК

&НаКлиенте
Процедура УстановитьСертификатыНУЦМинцифры(Команда)
	ДоверенныеСертификаты = ПолучитьДоверенныеСертификаты();
	Если ЗначениеЗаполнено(ДоверенныеСертификаты) Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыНУЦМинцифры_Завершение", ЭтотОбъект);
		МодульСертификатыНУЦМинцифрыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СертификатыНУЦМинцифрыКлиент");
		МодульСертификатыНУЦМинцифрыКлиент.НачатьУстановкуДоверенныхСертификатов(Оповещение, ДоверенныеСертификаты.Список);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСертификатыНУЦМинцифры_Завершение(РезультатОперации, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеСертификатов(РезультатОперации);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьСостояниеСертификатов(РезультатОперации)
	
	Если РезультатОперации.Результат И МенеджерОборудованияКлиентПовтИсп.ИспользуетсяСертификатыНУЦМинцифры() Тогда
		Текст = "";
		ДоверенныеСертификаты = ПолучитьДоверенныеСертификаты();
		СписокСертификатов = ДоверенныеСертификаты.Список; // см. СертификатыНУЦМинцифры.СписокДоверенныхСертификатов
		Для Каждого Сертификат Из СписокСертификатов Цикл
			Текст = Текст
				+ СтрШаблон(НСтр("ru = '%1 установлен, действителен до %2'") + Символы.ПС,
				Сертификат.Наименование,
				Формат(Сертификат.ДействителенДо, НСтр("ru = 'ДЛФ=DD'")));
		КонецЦикла;
		Элементы.ГруппаСертификатыНУЦМинцифрыНеУстановлены.Видимость = Ложь;
		Элементы.ГруппаСертификатыНУЦМинцифрыУстановлены.Видимость   = Истина;
		
		ТекстСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Установка корневых сертификатов Национального удостоверяющего центра Министерства цифрового развития, связи и массовых коммуникаций Российской Федерации.'"),
			Символы.ПС,
			НСтр("ru = 'Также корневые сертификаты можно скачать с сайта '"),
			Новый ФорматированнаяСтрока(НСтр("ru = '""Госуслуги"".'"),,,,"https://www.gosuslugi.ru/crt"),
			Символы.ПС,
			Символы.ПС,
			Текст
			);
		Элементы.ДекорацияСертификатыНУЦМинцифрыУстановленыРасширеннаяПодсказка.Заголовок = ТекстСообщения;
		
	Иначе
		Элементы.ГруппаСертификатыНУЦМинцифрыНеУстановлены.Видимость = Истина;
		Элементы.ГруппаСертификатыНУЦМинцифрыУстановлены.Видимость   = Ложь;
		ТекстСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Установка корневых сертификатов Национального удостоверяющего центра Министерства цифрового развития, связи и массовых коммуникаций Российской Федерации.'"),
			Символы.ПС,
			НСтр("ru = 'Также корневые сертификаты можно скачать с сайта '"),
			Новый ФорматированнаяСтрока(НСтр("ru = '""Госуслуги"".'"),,,,"https://www.gosuslugi.ru/crt"),
			Символы.ПС,
			Символы.ПС,
			РезультатОперации.ОписаниеОшибки
			);
		Элементы.УстановитьСертификатыНУЦМинцифрыРасширеннаяПодсказка.Заголовок = ТекстСообщения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановкуСертификатовНУЦМинцифры(Команда)
	
	ДоверенныеСертификаты = ПолучитьДоверенныеСертификаты();
	Если ЗначениеЗаполнено(ДоверенныеСертификаты) Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыНУЦМинцифры_Завершение", ЭтотОбъект);
		МодульСертификатыНУЦМинцифрыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СертификатыНУЦМинцифрыКлиент");
		МодульСертификатыНУЦМинцифрыКлиент.НачатьПроверкуДоверенныхСертификатов(Оповещение, ДоверенныеСертификаты.Список);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоверенныеСертификаты() 
	
	Если МенеджерОборудованияВызовСервера.ИспользуетсяСертификатыНУЦМинцифры() Тогда
		Если МенеджерОборудования.ИспользуетсяБСП() И Не ОбщегоНазначения.ЭтоВебКлиент() Тогда
			МодульСертификатыНУЦМинцифры  = ОбщегоНазначения.ОбщийМодуль("СертификатыНУЦМинцифры");
			ДоверенныеСертификаты = Новый Структура();
			ДоверенныеСертификаты.Вставить("Список", МодульСертификатыНУЦМинцифры.СписокДоверенныхСертификатов());
			Возврат ДоверенныеСертификаты;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДляГруппСертификаторМинцифры()
	Элементы.ГруппаСертификатыНУЦМинцифрыНеУстановлены.Видимость = Ложь;
	Элементы.ГруппаСертификатыНУЦМинцифрыУстановлены.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти