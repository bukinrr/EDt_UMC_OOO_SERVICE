#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВидов();
	
	КомпоновщикОтбораПрименения = ПолучитьКомпоновку();
		
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереместитьТекущийЭлементВниз(Команда)
	
	Если ЗначениеЗаполнено(СписокВидов) Тогда
		Если Элементы.СписокВидов.ТекущиеДанные.Порядок = СписокВидов.Количество() Тогда
			Возврат;
		Иначе
			ТекущийПорядок = Элементы.СписокВидов.ТекущиеДанные.Порядок;
			СписокВидов.Сдвинуть(ТекущийПорядок - 1, 1);
			СписокВидов[ТекущийПорядок - 1].Порядок = ТекущийПорядок;
			СписокВидов[ТекущийПорядок].Порядок = ТекущийПорядок + 1;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТекущийЭлементВверх(Команда)
	
	Если ЗначениеЗаполнено(СписокВидов) Тогда
		Если Элементы.СписокВидов.ТекущиеДанные.Порядок = 1 Тогда
			Возврат;
		Иначе
			ТекущийПорядок = Элементы.СписокВидов.ТекущиеДанные.Порядок;
			СписокВидов.Сдвинуть(ТекущийПорядок - 1, -1);
			СписокВидов[ТекущийПорядок - 1].Порядок = ТекущийПорядок;
			СписокВидов[ТекущийПорядок - 2].Порядок = ТекущийПорядок - 1;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Перем ПараметрОшибки;
	ТекстПредупреждения = "";
	ЗаписатьНаСервере(Ложь, ТекстПредупреждения, ПараметрОшибки);
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(,СтрШаблон(ТекстПредупреждения, ПараметрОшибки)); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Перем ПараметрОшибки;
	ТекстПредупреждения = "";
	Отказ = Ложь;
	ЗаписатьНаСервере(Отказ, ТекстПредупреждения, ПараметрОшибки);
	Если Не Отказ Тогда
		ЭтаФорма.Закрыть();
	Иначе
		ПоказатьПредупреждение(,СтрШаблон(ТекстПредупреждения, ПараметрОшибки));  
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере(Отказ, ТекстПредупреждения, ПараметрОшибки)

	НачатьТранзакцию();
	
	ПровестиТранзакцию(Отказ, ТекстПредупреждения, ПараметрОшибки);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();	
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПровестиТранзакцию(Отказ, ТекстПредупреждения, ПараметрОшибки)
	
	Выборка = РегистрыСведений.ВидыНоменклатурыВоВнешнейИС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		Запись.Удалить();
	КонецЦикла;
	
	Для Каждого ВидНоменклатуры Из СписокВидов Цикл
		Запись = РегистрыСведений.ВидыНоменклатурыВоВнешнейИС.СоздатьМенеджерЗаписи();
		ВыборкаВидов = РегистрыСведений.ВидыНоменклатурыВоВнешнейИС.Выбрать(Новый Структура("ВидНоменклатуры", ВидНоменклатуры.ВидНоменклатуры));
		Запись.Порядок = ВидНоменклатуры.Порядок;
		Если ВыборкаВидов.Следующий() Тогда
			Отказ = Истина;
			ТекстПредупреждения = "Вид номенклатуры %1 дублируется или уже существует!";
			ПараметрОшибки = ВыборкаВидов.ВидНоменклатуры;
			Возврат;		
		Иначе
			Запись.ВидНоменклатуры = ВидНоменклатуры.ВидНоменклатуры;
		КонецЕсли;
		Запись.Отбор = Новый ХранилищеЗначения(ВидНоменклатуры.Отбор.Настройки);
		Запись.Записать();	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВидовВидНоменклатурыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокВидов.ТекущиеДанные;
	ТекущиеДанные.ВидНоменклатуры = СокрЛП(ТекущиеДанные.ВидНоменклатуры);
КонецПроцедуры

 &НаКлиенте
Процедура СписокВидовПослеУдаления(Элемент)
		
	Для НовыйПорядок = 1 По СписокВидов.Количество() Цикл
		СписокВидов[НовыйПорядок - 1].Порядок = НовыйПорядок;
	КонецЦикла;	
	
КонецПроцедуры

#Область ОбновлениеПредставленияОтбора

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПриИзменении(Элемент)
	ОтборКомпоновкиПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтборКомпоновкиПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Модифицированность = Истина;
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Модифицированность = Истина;
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораПримененияНастройкиОтборДоступныеПоляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("ОтборКомпоновкиПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомпоновкиПриИзменении()
	
	Если ЗначениеЗаполнено(СписокВидов) Тогда
		Элементы.СписокВидов.ТекущиеДанные.ПредставлениеОтбора = Строка(КомпоновщикОтбораПрименения.Настройки.Отбор); 
		Элементы.СписокВидов.ТекущиеДанные.Отбор = КомпоновщикОтбораПрименения;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокВидовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ПредставлениеОтбора = Строка(ТекущиеДанные.Отбор.Настройки.Отбор);
		КомпоновщикОтбораПрименения = ТекущиеДанные.Отбор;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокВидовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		ДобавитьВидНоменклатуры(Элемент);		
	Иначе
		ДобавитьВидНоменклатуры();
	КонецЕсли;
	
	Отказ = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидов()
	
	СписокВидов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ВидыНоменклатуры.Порядок КАК Порядок,
	               |	ВидыНоменклатуры.Отбор КАК Отбор
	               |ИЗ
	               |	РегистрСведений.ВидыНоменклатурыВоВнешнейИС КАК ВидыНоменклатуры
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Выборка.Отбор.Получить(); 
		
		НовыйВид = СписокВидов.Добавить();
		НовыйВид.Порядок = Выборка.Порядок;
		НовыйВид.ВидНоменклатуры = Выборка.ВидНоменклатуры;
		НовыйВид.ПредставлениеОтбора = Строка(Отбор.Отбор); 
		НовыйВид.Отбор = ПолучитьКомпоновку(Отбор);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомпоновку(Настройки = Неопределено)
	
	СхемаКомпоновкиДанных = РегистрыСведений.ВидыНоменклатурыВоВнешнейИС.ПолучитьМакет("МакетОтбора");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникНастроек);
	Если Настройки = Неопределено Тогда 
		Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		Компоновщик.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Возврат Компоновщик;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВидНоменклатуры(Элемент = Неопределено)
	
	НовыйВид = СписокВидов.Добавить();
	НовыйВид.Порядок = СписокВидов.Количество();
	
	Если Элемент <>  Неопределено Тогда
		НовыйВид.Отбор = Элемент.ТекущиеДанные.Отбор;
		НовыйВид.ПредставлениеОтбора = Элемент.ТекущиеДанные.ПредставлениеОтбора;
	Иначе                                                            
		НовыйВид.Отбор = ПолучитьКомпоновку();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти