#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаписатьРезультатыПроверкиКМ(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.РегистрыСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП.ПолноеИмя());
		ЭлементБлокировкиДанных.ИсточникДанных = Параметры.ТаблицаРезультатовПроверкиКМ;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("НомерУпаковки", "НомерУпаковки");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		Для Каждого Строка Из Параметры.ТаблицаРезультатовПроверкиКМ Цикл
			
			КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
			
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.НомерУпаковки.Установить(Строка.НомерУпаковки);
			Набор.Отбор.КлючУпаковки.Установить(КлючУпаковки);
			
			Запись = Набор.Добавить();
			Запись.КлючУпаковки  = КлючУпаковки;
			Запись.ДатаИзменения = ДатаИзменения;
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Если ЗначениеЗаполнено(Строка.РезультатПроверкиКМ) Тогда
				ЗаполнитьЗначенияСвойств(Запись, Строка.РезультатПроверкиКМ);
			КонецЕсли;
			
			Набор.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Проверка КМ средствами РВ.Запись результатов'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьРезультатыПроверкиКМ(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваРезультата = СвойстваРезультатаПроверкиКМ();
	СвойстваРезультатаСтрокой = СтрСоединить(СвойстваРезультата, ",");
	
	НомераУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НомераУпаковок");
	Если ЗначениеЗаполнено(НомераУпаковок) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	НомераУпаковок.КлючУпаковки   КАК КлючУпаковки
		|ПОМЕСТИТЬ НомераУпаковок
		|ИЗ
		|	&НомераУпаковок КАК НомераУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки  КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки   КАК КлючУпаковкиПроверки
		|ИЗ
		|	РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП КАК РезультатыПроверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			НомераУпаковок КАК НомераУпаковок
		|		ПО
		|			НомераУпаковок.НомерУпаковки = РезультатыПроверки.НомерУпаковки
		|			И НомераУпаковок.КлючУпаковки = РезультатыПроверки.КлючУпаковки
		|");
		
		ТаблицаНомеровУпаковок = Новый ТаблицаЗначений;
		ТаблицаНомеровУпаковок.Колонки.Добавить("НомерУпаковки", Метаданные.ОпределяемыеТипы.НомерУпаковкиМДЛП.Тип);
		ТаблицаНомеровУпаковок.Колонки.Добавить("КлючУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(100));
		
		Для Каждого НомерУпаковки Из НомераУпаковок Цикл
			Строка = ТаблицаНомеровУпаковок.Добавить();
			Строка.НомерУпаковки = НомерУпаковки;
			Строка.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(НомерУпаковки);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НомераУпаковок", ТаблицаНомеровУпаковок);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки  КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки   КАК КлючУпаковкиПроверки
		|ИЗ
		|	РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП КАК РезультатыПроверки
		|");
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
		
	КонецЕсли;
	
	ВыбираемыеПоля = Оператор.ВыбираемыеПоля;
	Для Каждого ИмяСвойства Из СвойстваРезультата Цикл
		ВыбираемыеПоля.Добавить(ИмяСвойства);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("РезультатПроверкиКМ", Новый ОписаниеТипов());
	Для Каждого Строка Из Таблица Цикл
		РезультатПроверкиКМ = Новый Структура(СвойстваРезультатаСтрокой);
		ЗаполнитьЗначенияСвойств(РезультатПроверкиКМ, Строка);
		РезультатПроверкиКМ.Вставить("КлючГруппыНастроекКонтроляКМ", ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ);
		Строка.РезультатПроверкиКМ = Новый ФиксированнаяСтруктура(РезультатПроверкиКМ);
	КонецЦикла;
	Для Каждого ИмяСвойства Из СвойстваРезультата Цикл
		Таблица.Колонки.Удалить(ИмяСвойства);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура УдалитьРезультатыПроверкиКМ(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомераУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НомераУпаковок");
	Если ЗначениеЗаполнено(НомераУпаковок) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	НомераУпаковок.КлючУпаковки   КАК КлючУпаковки
		|ПОМЕСТИТЬ НомераУпаковок
		|ИЗ
		|	&НомераУпаковок КАК НомераУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки  КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки   КАК КлючУпаковкиПроверки
		|ИЗ
		|	РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП КАК РезультатыПроверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			НомераУпаковок КАК НомераУпаковок
		|		ПО
		|			НомераУпаковок.НомерУпаковки = РезультатыПроверки.НомерУпаковки
		|			И НомераУпаковок.КлючУпаковки = РезультатыПроверки.КлючУпаковки
		|");
		
		ТаблицаНомеровУпаковок = Новый ТаблицаЗначений;
		ТаблицаНомеровУпаковок.Колонки.Добавить("НомерУпаковки", Метаданные.ОпределяемыеТипы.НомерУпаковкиМДЛП.Тип);
		ТаблицаНомеровУпаковок.Колонки.Добавить("КлючУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(100));
		
		Для Каждого НомерУпаковки Из НомераУпаковок Цикл
			Строка = ТаблицаНомеровУпаковок.Добавить();
			Строка.НомерУпаковки = НомерУпаковки;
			Строка.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(НомерУпаковки);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НомераУпаковок", ТаблицаНомеровУпаковок);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки  КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки   КАК КлючУпаковкиПроверки
		|ИЗ
		|	РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП КАК РезультатыПроверки
		|");
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
		
	КонецЕсли;
	
	УдалятьСтарыеРезультатыПроверкиКМКонтрольНеВыполнен                 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "УдалятьСтарыеРезультатыПроверкиКМСредствамиАПИМДЛПКонтрольНеВыполнен", Ложь);
	КоличествоДнейХраненияСтарыхРезультатовПроверкиКМКонтрольНеВыполнен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КоличествоДнейХраненияСтарыхРезультатовПроверкиКМСредствамиАПИМДЛПКонтрольНеВыполнен", 0);
	Если УдалятьСтарыеРезультатыПроверкиКМКонтрольНеВыполнен И КоличествоДнейХраненияСтарыхРезультатовПроверкиКМКонтрольНеВыполнен > 0 Тогда
		
		ГраницаХранения = ТекущаяДатаСеанса() - КоличествоДнейХраненияСтарыхРезультатовПроверкиКМКонтрольНеВыполнен * 24 * 60 * 60;
		
		Оператор.Отбор.Добавить("НЕ РезультатыПроверки.КонтрольВыполнен И НЕ РезультатыПроверки.КонтрольПройден");
		Оператор.Отбор.Добавить("РезультатыПроверки.ДатаИзменения < &ГраницаХранения");
		Запрос.УстановитьПараметр("ГраницаХранения", ГраницаХранения);
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = СоздатьНаборЗаписей();
		
		Набор.Отбор.НомерУпаковки.Установить(Выборка.НомерУпаковкиПроверки);
		Набор.Отбор.КлючУпаковки.Установить(Выборка.КлючУпаковкиПроверки);
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДляДокументаВыполнялсяКонтрольКМ(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП КАК РезультатыПроверки
	|ГДЕ
	|	РезультатыПроверки.Документ = &Документ
	|");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СвойстваРезультатаПроверкиКМ() Экспорт
	
	Свойства = Новый Массив;
	
	Реквизиты = Метаданные.РегистрыСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		Свойства.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РезультатыПроверкиКМ.НомерУпаковки  КАК НомерУпаковки,
	|	РезультатыПроверкиКМ.КлючУпаковки   КАК КлючУпаковки
	|ПОМЕСТИТЬ РезультатыПроверкиКМ
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиКММДЛП КАК РезультатыПроверкиКМ
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУпаковки,
	|	КлючУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыПроверкиКМСредствамиРВ.НомерУпаковки              КАК НомерУпаковки,
	|	РезультатыПроверкиКМСредствамиРВ.КлючУпаковки               КАК КлючУпаковки,
	|	МАКСИМУМ(РезультатыПроверкиКМСредствамиРВ.Документ)         КАК Документ,
	|	МАКСИМУМ(РезультатыПроверкиКМСредствамиРВ.КонтрольПройден)  КАК КонтрольПройден
	|ПОМЕСТИТЬ РезультатыПроверкиКМСредствамиРВ
	|ИЗ
	|	РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП КАК РезультатыПроверкиКМСредствамиРВ
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РезультатыПроверкиКМ КАК РезультатыПроверкиКМ
	|		ПО
	|			РезультатыПроверкиКМ.НомерУпаковки = РезультатыПроверкиКМСредствамиРВ.НомерУпаковки
	|			И РезультатыПроверкиКМ.КлючУпаковки = РезультатыПроверкиКМСредствамиРВ.КлючУпаковки
	|ГДЕ
	|	РезультатыПроверкиКМ.НомерУпаковки ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	РезультатыПроверкиКМСредствамиРВ.НомерУпаковки,
	|	РезультатыПроверкиКМСредствамиРВ.КлючУпаковки
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУпаковки,
	|	КлючУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыПроверкиКМСредствамиККТ.НомерУпаковки              КАК НомерУпаковки,
	|	РезультатыПроверкиКМСредствамиККТ.КлючУпаковки               КАК КлючУпаковки,
	|	МАКСИМУМ(РезультатыПроверкиКМСредствамиККТ.КонтрольПройден)  КАК КонтрольПройден
	|ПОМЕСТИТЬ РезультатыПроверкиКМСредствамиККТ
	|ИЗ
	|	РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиККТМДЛП КАК РезультатыПроверкиКМСредствамиККТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РезультатыПроверкиКМ КАК РезультатыПроверкиКМ
	|		ПО
	|			РезультатыПроверкиКМ.НомерУпаковки = РезультатыПроверкиКМСредствамиККТ.НомерУпаковки
	|			И РезультатыПроверкиКМ.КлючУпаковки = РезультатыПроверкиКМСредствамиККТ.КлючУпаковки
	|ГДЕ
	|	РезультатыПроверкиКМ.НомерУпаковки ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	РезультатыПроверкиКМСредствамиККТ.НомерУпаковки,
	|	РезультатыПроверкиКМСредствамиККТ.КлючУпаковки
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУпаковки,
	|	КлючУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыПроверкиКМСредствамиРВ.НомерУпаковки  КАК НомерУпаковки,
	|	РезультатыПроверкиКМСредствамиРВ.КлючУпаковки   КАК КлючУпаковки,
	|	РезультатыПроверкиКМСредствамиРВ.Документ       КАК Документ
	|ИЗ
	|	РезультатыПроверкиКМСредствамиРВ КАК РезультатыПроверкиКМСредствамиРВ
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РезультатыПроверкиКМСредствамиККТ КАК РезультатыПроверкиКМСредствамиККТ
	|		ПО
	|			РезультатыПроверкиКМСредствамиККТ.НомерУпаковки = РезультатыПроверкиКМСредствамиРВ.НомерУпаковки
	|			И РезультатыПроверкиКМСредствамиККТ.КлючУпаковки = РезультатыПроверкиКМСредствамиРВ.КлючУпаковки
	|			И НЕ РезультатыПроверкиКМСредствамиРВ.КонтрольПройден
	|			И РезультатыПроверкиКМСредствамиККТ.КонтрольПройден
	|ГДЕ
	|	РезультатыПроверкиКМСредствамиККТ.НомерУпаковки ЕСТЬ NULL
	|");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП.ПолноеИмя();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолноеИмяОбъекта = Метаданные.РегистрыСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТДляОбработки";
	
	//Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, Запрос.МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	//Если Результат.ЕстьЗаписиВоВременнойТаблице Тогда
	//	
	//	Запрос.Текст = "
	//	|ВЫБРАТЬ
	//	|	РезультатыПроверкиКМ.НомерУпаковки  КАК НомерУпаковки,
	//	|	РезультатыПроверкиКМ.КлючУпаковки   КАК КлючУпаковки
	//	|ПОМЕСТИТЬ РезультатыПроверкиКМ
	//	|ИЗ
	//	|	РегистрСведений.РезультатыПроверкиКММДЛП КАК РезультатыПроверкиКМ
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	НомерУпаковки,
	//	|	КлючУпаковки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТДляОбработки.НомерУпаковки                    КАК НомерУпаковки,
	//	|	ВТДляОбработки.КлючУпаковки                     КАК КлючУпаковки,
	//	|	ВТДляОбработки.Документ                         КАК Документ,
	//	|	НЕ РезультатыПроверкиКМ.НомерУпаковки ЕСТЬ NULL
	//	|		ИЛИ ДанныеРегистра.НомерУпаковки ЕСТЬ NULL  КАК НеОбновлять
	//	|ИЗ
	//	|	ВТДляОбработки КАК ВТДляОбработки
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ
	//	|			РезультатыПроверкиКМ КАК РезультатыПроверкиКМ
	//	|		ПО
	//	|			РезультатыПроверкиКМ.НомерУпаковки = ВТДляОбработки.НомерУпаковки
	//	|			И РезультатыПроверкиКМ.КлючУпаковки = ВТДляОбработки.КлючУпаковки
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ
	//	|			РегистрСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП КАК ДанныеРегистра
	//	|		ПО
	//	|			ДанныеРегистра.НомерУпаковки = ВТДляОбработки.НомерУпаковки
	//	|			И ДанныеРегистра.КлючУпаковки = ВТДляОбработки.КлючУпаковки
	//	|			И ДанныеРегистра.Документ = ВТДляОбработки.Документ
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НеОбновлять,
	//	|	ВТДляОбработки.НомерУпаковки,
	//	|	ДанныеРегистра.КонтрольПройден УБЫВ
	//	|";
	//	
	//	СвойстваРезультата = СвойстваРезультатаПроверкиКМ();
	//	СвойстваРезультатаСтрокой = СтрСоединить(СвойстваРезультата, ",");
	//	
	//	СхемаЗапроса = Новый СхемаЗапроса;
	//	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	//	Оператор = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
	//	
	//	ВыбираемыеПоля = Оператор.ВыбираемыеПоля;
	//	Для Каждого ИмяСвойства Из СвойстваРезультата Цикл
	//		ВыбираемыеПоля.Добавить("ДанныеРегистра." + ИмяСвойства);
	//	КонецЦикла;
	//	
	//	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	ДатаИзменения = ТекущаяДатаСеанса();
	//	
	//	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	//	КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ;
	//	
	//	ДетальныеСвойстваРезультатаСтрокой = СтрСоединить(РегистрыСведений.РезультатыПроверкиКММДЛП.ДетальныеСвойстваРезультатаПроверкиКМ(КлючГруппыНастроекКонтроляКМ), ",");
	//	
	//	ОтработанныеНомераУпаковок = Новый Соответствие;
	//	Пока Выборка.Следующий() Цикл
	//		
	//		НачатьТранзакцию();
	//		Попытка
	//			
	//			Если Не Выборка.НеОбновлять Тогда
	//				
	//				Если ОтработанныеНомераУпаковок.Получить(Выборка.НомерУпаковки) <> Неопределено Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				
	//				НаборЗаписать = РегистрыСведений.РезультатыПроверкиКММДЛП.СоздатьНаборЗаписей();
	//				НаборЗаписать.Отбор.НомерУпаковки.Установить(Выборка.НомерУпаковки);
	//				НаборЗаписать.Отбор.КлючУпаковки.Установить(Выборка.КлючУпаковки);
	//				
	//				Запись = НаборЗаписать.Добавить();
	//				ЗаполнитьЗначенияСвойств(Запись, Выборка);
	//				
	//				Запись.ДатаИзменения = ДатаИзменения;
	//				Запись.КлючГруппыНастроекКонтроляКМ = КлючГруппыНастроекКонтроляКМ;
	//				Запись.КонтрольВыполнен = Истина;
	//				
	//				ДетальныйРезультатПроверкиКМ = Новый Структура(ДетальныеСвойстваРезультатаСтрокой);
	//				ЗаполнитьЗначенияСвойств(ДетальныйРезультатПроверкиКМ, Выборка);
	//				Запись.ДетальныйРезультатПроверкиКМ = Новый ХранилищеЗначения(Новый ФиксированнаяСтруктура(ДетальныйРезультатПроверкиКМ));
	//				
	//				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписать);
	//				
	//				ОтработанныеНомераУпаковок.Вставить(Выборка.НомерУпаковки, Истина);
	//				
	//			КонецЕсли;
	//			
	//			НаборОтметить = РегистрыСведений.УдалитьРезультатыПроверкиКМСредствамиРВМДЛП.СоздатьНаборЗаписей();
	//			НаборОтметить.Отбор.НомерУпаковки.Установить(Выборка.НомерУпаковки);
	//			НаборОтметить.Отбор.КлючУпаковки.Установить(Выборка.КлючУпаковки);
	//			НаборОтметить.Отбор.Документ.Установить(Выборка.Документ);
	//			
	//			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборОтметить);
	//			
	//			ЗафиксироватьТранзакцию();
	//			
	//		Исключение
	//			ОтменитьТранзакцию();
	//			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.НомерУпаковки);
	//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//			ЗаписьЖурналаРегистрации(
	//				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
	//				УровеньЖурналаРегистрации.Предупреждение,,,
	//				ТекстСообщения);
	//		КонецПопытки;
	//		
	//	КонецЦикла;
	//	
	//	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	//	
	//Иначе
	//	Параметры.ОбработкаЗавершена = Не Результат.ЕстьДанныеДляОбработки;
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли