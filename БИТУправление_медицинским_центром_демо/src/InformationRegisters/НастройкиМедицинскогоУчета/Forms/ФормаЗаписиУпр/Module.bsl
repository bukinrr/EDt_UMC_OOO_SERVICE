#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьНастройкиDICOM();
	
	ФССПриСоздании();
	
	Элементы.АдресГИП.Видимость = Ложь; // Интеграция с подсистемой ГИП не реализуется.
	
	Элементы.ВыгрузитьВсеИзображения.Видимость = ИзображенияШаблоновПриемовХранятсяВБазе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Прочитать();
	ИспользоватьDICOMПриИзменении(Неопределено);

	НастройкиЛабораторииВСхему();
	ОбновитьВидимостьИнтегрированныхЛабораторий();
	
	УстановитьДоступностьЭлементовЕГИСЗ();
	
	Элементы.ВыгрузитьВсеФайлы.Доступность = ЗначениеЗаполнено(Запись.ПутьКАрхивуЭМД);
	Элементы.ВыгрузитьВсеИзображения.Доступность = ЗначениеЗаполнено(Запись.ПутьКАрхивуИзображений);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Лаборатории
	СхемуВНастройкиЛаборатории(ТекущийОбъект);
	ЗаписатьНастройкуПолейСубъекта();
	Если Не ТекущийОбъект.ИспользуетсяИнтеграцияСВнешнимиЛабораториями И ТекущийОбъект.Helix_ИспользуетсяИнтеграцияСHelix Тогда
		ТекущийОбъект.Helix_ИспользуетсяИнтеграцияСHelix	 = Ложь;
		ТекущийОбъект.Invitro_ИспользуетсяИнтеграцияСInvitro = Ложь;
		ТекущийОбъект.СитиЛаб_ИспользуетсяИнтеграцияССитиЛаб = Ложь;
	КонецЕсли;
	ТекущийОбъект.ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте = ?(Элементы.ГруппаАвтоотправка.Видимость,ТекущийОбъект.ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте,Ложь);
	
	// ФСС
	Если ЗначениеЗаполнено(АдресВременногоХранилищаСертификатаФССРабочий) Тогда
		ТекущийОбъект.СертификатФССРабочий = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилищаСертификатаФССРабочий));
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресВременногоХранилищаСертификатаФССТестовый) Тогда
		ТекущийОбъект.СертификатФССТестовый = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилищаСертификатаФССТестовый));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьНастройкиDICOM();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	РегЗаданиеОтправкаРезультатов = ВернутьРегламентноеЗаданиеАвтоотправки(); 
	РегЗаданиеОтправкаРезультатов.Использование = ТекущийОбъект.ОтправлятьРезультатыВнешнихЛабораторийПоЭлектроннойПочте; 
	РегЗаданиеОтправкаРезультатов.Записать();
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПочта

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Скачатьwkhtmltopdf(Команда)
	ЗапуститьПриложение("https://wkhtmltopdf.org/downloads.html");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдресwkhtmltopdfНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Каталог	 = "C:\Program Files\wkhtmltopdf\bin\";
	ИмяФайла = "wkhtmltopdf.exe";
	
	Если ЗначениеЗаполнено(Запись.Адресwkhtmltopdf) Тогда
		Файл = Новый Файл(Запись.Адресwkhtmltopdf);
		Если Файл.Существует() Тогда
			Каталог	 = Файл.Путь;
			ИмяФайла = Файл.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ДиалогВыборФайла.Каталог = Каталог;
	ДиалогВыборФайла.Фильтр = "wkhtmltopdf.exe|wkhtmltopdf.exe";
	ДиалогВыборФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("АдресwkhtmltopdfВыбор", ЭтотОбъект);
	ДиалогВыборФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНастройкиЭПНажатие(Элемент)
	ТекущийЭлемент = Элементы.ЭлектроннаяПочтаДляРассылки;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АдресwkhtmltopdfВыбор(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗаписатьРезультатВыбраннойДиректории(ВыбранныеФайлы, "Адресwkhtmltopdf");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область DICOM

&НаКлиенте
Процедура ИспользоватьDICOMПриИзменении(Элемент)
	Элементы.ГруппаНастроекDICOM.Доступность = ИспользоватьDICOM;
КонецПроцедуры

&НаКлиенте
Процедура DICOM_КаталогЗапускаСлужбПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура DICOM_LogCatalogПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыDICOM_ВызываемыйAETitleПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура MWLSCP_АвтоматическийЗапускПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура MWLSCP_ИспользуемыйAETitleПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура MWLSCP_КаталогФайловПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура STORESCP_АвтоматическийЗапускПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура STORESCP_ИспользуемыйAETitleПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура STORESCP_КаталогФайловПриИзменении(Элемент)
	ПроверитьУстановитьМодифицированностьЭлементаDICOM(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура DICOM_КаталогЗапускаСлужбНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборКаталога(НСтр("ru='Выберите каталог запуска служб'"), DICOM_КаталогЗапускаСлужб);
КонецПроцедуры

&НаКлиенте
Процедура DICOM_LogCatalogНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборКаталога(НСтр("ru='Выберите каталог логов работы служб'"), DICOM_LogCatalog);
КонецПроцедуры

&НаКлиенте
Процедура MWLSCP_КаталогФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборКаталога(НСтр("ru='Выберите каталог файлов worklist-ов'"), MWLSCP_КаталогФайлов);
КонецПроцедуры

&НаКлиенте
Процедура STORESCP_КаталогФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборКаталога(НСтр("ru='Выберите каталог файлов с результатами'"), STORESCP_КаталогФайлов);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыборКаталога(Заголовок, ПеременнаяПуть)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = Заголовок;
	ДиалогОткрытияФайла.Каталог = ПеременнаяПуть;
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПеременнаяПуть = ДиалогОткрытияФайла.Каталог;
	Иначе
		Предупреждение(НСтр("ru = 'Каталог не выбран'; en = 'Directory not selected!'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьУстановитьМодифицированностьЭлементаDICOM(ЭлементФормы)
	ИмяРеквизита	= Элементы[ЭлементФормы].ПутьКДанным;
	ЗначениеВБазе	= Константы[ИмяРеквизита].Получить();
	ТекущееЗначение = ЭтаФорма[Элементы[ЭлементФормы].ПутьКДанным];
	Если ТекущееЗначение <> ЗначениеВБазе Тогда
		Модифицированность = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуПолейСубъекта()
	
	ОбъектЗаписи = РеквизитФормыВЗначение("Запись");
	Попытка
		ОбъектЗаписи.Записать(Истина);	 
	Исключение КонецПопытки;
	ЗначениеВРеквизитФормы(ОбъектЗаписи,"Запись");	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиDICOM()
	DICOM_КаталогЗапускаСлужб		= Константы.DICOM_КаталогЗапускаСлужб		.Получить();
	STORESCP_КаталогФайлов			= Константы.STORESCP_КаталогФайлов			.Получить();
	DICOM_КаталогЗапускаСлужб       = Константы.DICOM_КаталогЗапускаСлужб		.Получить();
	DICOM_LogCatalog       			= Константы.DICOM_LogCatalog				.Получить();
	STORESCP_КаталогФайлов			= Константы.STORESCP_КаталогФайлов			.Получить();
	ЗапросыDICOM_ВызываемыйAETitle	= Константы.ЗапросыDICOM_ВызываемыйAETitle	.Получить();
	STORESCP_ИспользуемыйAETitle	= Константы.STORESCP_ИспользуемыйAETitle	.Получить();
	ИспользоватьDICOM				= Константы.ИспользоватьDICOM				.Получить();
	STORESCP_АвтоматическийЗапуск	= Константы.STORESCP_АвтоматическийЗапуск	.Получить();
	MWLSCP_КаталогФайлов			= Константы.MWLSCP_КаталогФайлов			.Получить();
	MWLSCP_ИспользуемыйAETitle		= Константы.MWLSCP_ИспользуемыйAETitle		.Получить();
	MWLSCP_АвтоматическийЗапуск		= Константы.MWLSCP_АвтоматическийЗапуск		.Получить();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиDICOM()
	Константы.DICOM_КаталогЗапускаСлужб		.Установить(DICOM_КаталогЗапускаСлужб);
	Константы.STORESCP_КаталогФайлов		.Установить(STORESCP_КаталогФайлов);
	Константы.DICOM_КаталогЗапускаСлужб		.Установить(DICOM_КаталогЗапускаСлужб);
	Константы.DICOM_LogCatalog				.Установить(DICOM_LogCatalog);
	Константы.STORESCP_КаталогФайлов		.Установить(STORESCP_КаталогФайлов);
	Константы.ЗапросыDICOM_ВызываемыйAETitle.Установить(ЗапросыDICOM_ВызываемыйAETitle);
	Константы.STORESCP_ИспользуемыйAETitle	.Установить(STORESCP_ИспользуемыйAETitle);
	Константы.ИспользоватьDICOM				.Установить(ИспользоватьDICOM);
	Константы.STORESCP_АвтоматическийЗапуск	.Установить(STORESCP_АвтоматическийЗапуск);
	Константы.MWLSCP_КаталогФайлов			.Установить(MWLSCP_КаталогФайлов);
	Константы.MWLSCP_ИспользуемыйAETitle	.Установить(MWLSCP_ИспользуемыйAETitle);
	Константы.MWLSCP_АвтоматическийЗапуск	.Установить(MWLSCP_АвтоматическийЗапуск);	
КонецПроцедуры

#КонецОбласти

#Область Лаборатория

&НаСервере
Процедура НастройкиЛабораторииВСхему()
	
	Если Запись.ИспользуетсяИнтеграцияСВнешнимиЛабораториями Тогда
		Если Запись.ИспользуетсяРасширеннаяВнутренняяЛаборатория Тогда
			СхемаРаботыЛаборатории = 3;
		ИначеЕсли Запись.УпрощеннаяЛабораторияИспользуется Тогда
			СхемаРаботыЛаборатории = 4;
		Иначе
			СхемаРаботыЛаборатории = 1;
		КонецЕсли;
	ИначеЕсли Запись.ИспользуетсяРасширеннаяВнутренняяЛаборатория Тогда
		СхемаРаботыЛаборатории = 2;
	Иначе
		СхемаРаботыЛаборатории = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СхемуВНастройкиЛаборатории(ЗаписьРегистра)
	
	Если СхемаРаботыЛаборатории = 0 Тогда
		ЗаписьРегистра.УпрощеннаяЛабораторияИспользуется			= Истина;
		ЗаписьРегистра.ИспользуетсяРасширеннаяВнутренняяЛаборатория = Ложь;
		ЗаписьРегистра.ИспользуетсяИнтеграцияСВнешнимиЛабораториями = Ложь;
	ИначеЕсли СхемаРаботыЛаборатории = 1 Тогда
		ЗаписьРегистра.УпрощеннаяЛабораторияИспользуется			= Ложь;
		ЗаписьРегистра.ИспользуетсяРасширеннаяВнутренняяЛаборатория = Ложь;
		ЗаписьРегистра.ИспользуетсяИнтеграцияСВнешнимиЛабораториями = Истина;
	ИначеЕсли СхемаРаботыЛаборатории = 2 Тогда
		ЗаписьРегистра.УпрощеннаяЛабораторияИспользуется			= Ложь;
		ЗаписьРегистра.ИспользуетсяРасширеннаяВнутренняяЛаборатория = Истина;
		ЗаписьРегистра.ИспользуетсяИнтеграцияСВнешнимиЛабораториями = Ложь;
	ИначеЕсли СхемаРаботыЛаборатории = 3 Тогда
		ЗаписьРегистра.УпрощеннаяЛабораторияИспользуется			= Ложь;
		ЗаписьРегистра.ИспользуетсяРасширеннаяВнутренняяЛаборатория = Истина;
		ЗаписьРегистра.ИспользуетсяИнтеграцияСВнешнимиЛабораториями = Истина;
	ИначеЕсли СхемаРаботыЛаборатории = 4 Тогда
		ЗаписьРегистра.УпрощеннаяЛабораторияИспользуется			= Истина;
		ЗаписьРегистра.ИспользуетсяРасширеннаяВнутренняяЛаборатория = Ложь;
		ЗаписьРегистра.ИспользуетсяИнтеграцияСВнешнимиЛабораториями = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаРаботыЛабораторииПриИзменении(Элемент)
	ОбновитьВидимостьИнтегрированныхЛабораторий();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИнтегрированныхЛабораторий()
	Элементы.ГруппаИнтегрированныеЛаборатории.Видимость = (СхемаРаботыЛаборатории = 1) Или (СхемаРаботыЛаборатории = 3) Или (СхемаРаботыЛаборатории = 4);
	Элементы.ГруппаАвтоотправка.Видимость = Элементы.ГруппаИнтегрированныеЛаборатории.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиСхемыЛабораторныхИсследований(Команда)
	ОткрытьФорму("РегистрСведений.МаршрутыАнализов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ВернутьРегламентноеЗаданиеАвтоотправки(Истина));
	ПараметрыФормы.Вставить("Действие",      "Изменить");	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникНастройки(Команда)
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПомощникНастройкиУчетнойЗаписи",Новый Структура("Ключ",Запись.ЭлектроннаяПочтаДляРассылки));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьРегламентноеЗаданиеАвтоотправки(ВернутьИдентификатор = Ложь)
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.АвтоматическаяОтправкаРезультатовАнализов);
	Возврат ?(ВернутьИдентификатор, РегЗадание.УникальныйИдентификатор, РегЗадание); 
КонецФункции

#КонецОбласти

#Область ФСС

&НаСервере
Процедура ФССПриСоздании()
	
	ПредупреждениеСертификатНеВыбран = "Сертификат не выбран!";
	
	СертификатДвоичныеДанные = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("СертификатФССТестовый").Получить();
	Если СертификатДвоичныеДанные <> Неопределено Тогда
		ОбновитьДанныеСертификата(СертификатДвоичныеДанные, Истина);
	Иначе
		Элементы.ТестовыйСерийныйНомер.Заголовок = ПредупреждениеСертификатНеВыбран;
		Элементы.ТестовыйСрокДействия.Заголовок = ПредупреждениеСертификатНеВыбран;
	КонецЕсли;
	СертификатДвоичныеДанные = УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("СертификатФССРабочий").Получить();
	Если СертификатДвоичныеДанные <> Неопределено Тогда
		ОбновитьДанныеСертификата(СертификатДвоичныеДанные, Ложь);
	Иначе
		Элементы.РабочийСерийныйНомер.Заголовок = ПредупреждениеСертификатНеВыбран;
		Элементы.РабочийСрокДействия.Заголовок = ПредупреждениеСертификатНеВыбран;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСертификат(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр =  "Сертификат безопасности (*.cer)|*.cer|";
	Если Диалог.Выбрать() Тогда
		Сертификат = Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла);
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Неверный формат сертификата");
			Возврат;
		КонецПопытки;		
		Если Команда.Имя = "ФСС_ИзменитьСертификатТестовогоСервера" Тогда
			АдресВременногоХранилищаСертификатаФССТестовый = ПолучитьАдресВременногоХранилищаСертификата(Сертификат, Истина);
		ИначеЕсли Команда.Имя = "ФСС_ИзменитьСертификатРабочегоСервера" Тогда
			АдресВременногоХранилищаСертификатаФССРабочий = ПолучитьАдресВременногоХранилищаСертификата(Сертификат, Ложь);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВременногоХранилищаСертификата(Сертификат, Тестовый)
	
	ОбновитьДанныеСертификата(Сертификат, Тестовый);
	Возврат ПоместитьВоВременноеХранилище(Сертификат); 
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеСертификата(ДвоичныеДанные, Тестовый)
	Сертификат = Новый СертификатКриптографии(ДвоичныеДанные);
	СтрокаСерийныйНомер = "Серийный номер: " + Строка(Сертификат.СерийныйНомер);
	СтрокаДатаДействия = "Период действия: с " + Строка(Сертификат.ДатаНачала) + " по " 
		 				+ Строка(Сертификат.ДатаОкончания);
						
	Если Тестовый Тогда
		Элементы.ТестовыйСерийныйНомер.Заголовок = СтрокаСерийныйНомер;
		Элементы.ТестовыйСрокДействия.Заголовок = СтрокаДатаДействия;
	Иначе
		Элементы.РабочийСерийныйНомер.Заголовок = СтрокаСерийныйНомер;
		Элементы.РабочийСрокДействия.Заголовок = СтрокаДатаДействия;
	КонецЕсли;
							
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЛКФССНажатие(Элемент)
	ЗапуститьПриложение(Элемент.Подсказка); // Открытие lk.fss.ru/cert.html.
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИУстановитьСертификат(Команда)

	СертификатДвоичныеДанные = ПолучитьСертификатФСС(Команда.Имя);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр =  "Сертификат безопасности (*.cer)|*.cer|";
	Если Диалог.Выбрать() Тогда
		СертификатДвоичныеДанные.Записать(Диалог.ПолноеИмяФайла);
		ЗапуститьПриложение(Диалог.ПолноеИмяФайла); 
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСертификатФСС(ИмяКоманды)
	
	Если ИмяКоманды = "ФСС_СохранитьИУстановитьСертификатТестовогоСервера" Тогда
		Возврат УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("СертификатФССТестовый").Получить();			
	ИначеЕсли ИмяКоманды = "ФСС_СохранитьИУстановитьСертификатРабочегоСервера" Тогда
		Возврат УправлениеНастройкамиМедицинскогоУчета.ПолучитьПараметрУчетнойПолитики("СертификатФССРабочий").Получить();	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЕГИСЗ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверкаГИП(Команда)
	ТестированиеСоединение(Запись.АдресФедеральногоСервисаГИП);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРЭМД(Команда)
	ТестированиеСоединение(Запись.АдресФедеральногоСервисаРЭМД);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИспользоватьЕГИСЗПриИзменении(Элемент)
	УстановитьДоступностьЭлементовЕГИСЗ()
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияЕГИСЗАдресФедеральногоСервисаРЭМДПриИзменении(Элемент)
	УстановитьДоступностьЭлементовЕГИСЗ();
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияЕГИСЗАдресФедеральногоСервисаГИППриИзменении(Элемент)
	УстановитьДоступностьЭлементовЕГИСЗ();
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияЕГИСЗПутьККонвертеруPDFAGhostScriptНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Каталог	 = "C:\Program Files\gs\gs9.50\bin\";
	ИмяФайла = "gswin64c.exe";
	
	Если ЗначениеЗаполнено(Запись.ПутьККонвертеруPDFAGhostScript) Тогда
		Файл = Новый Файл(Запись.ПутьККонвертеруPDFAGhostScript);
		Если Файл.Существует() Тогда
			Каталог	 = Файл.Путь;
			ИмяФайла = Файл.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ДиалогВыборФайла.Каталог = Каталог;
	ДиалогВыборФайла.Фильтр = "gswin64c.exe|gswin64c.exe";
	ДиалогВыборФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПутьККонвертеруPDFAGhostScriptВыбор", ЭтотОбъект);
	ДиалогВыборФайла.Показать(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовЕГИСЗ()
	
	Элементы.АдресаФедеральныхСервисов.Доступность = Запись.ИспользоватьЕГИСЗ;
	Элементы.ПроверкаРЭМД.Доступность	= Запись.ИспользоватьЕГИСЗ И ЗначениеЗаполнено(Запись.АдресФедеральногоСервисаРЭМД);
	Элементы.ПроверкаГИП.Доступность	= Запись.ИспользоватьЕГИСЗ И ЗначениеЗаполнено(Запись.АдресФедеральногоСервисаГИП);
	
КонецПроцедуры

&НаСервере
Процедура ТестированиеСоединение(Адрес)
	
	СтруктураАдреса = ПолучитьСтруктуруАдреса(Адрес);
	Соединение = СоздатьHTTPСоединение(СтруктураАдреса);
	
	Если Соединение = Неопределено Тогда 
		Сообщить(НСтр("ru='Не удалось установить HTTP-соединение'"));
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(Строка(СтруктураАдреса.Ресурс) + "?wsdl");
	HTTPОтвет = Соединение.Получить(Запрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ШаблонСообщения = НСтр("ru='Ошибка обращения к ресурсу: %1'");
		Попытка 
			ЧтениеXML = Новый ЧтениеXML;	
			ЧтениеXML.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());	
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "faultstring" Тогда
					ЧтениеXML.Прочитать();
					Сообщить(СтрШаблон(ШаблонСообщения, ЧтениеXML.Значение));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Возврат;
		Исключение
			Сообщить(СтрШаблон(ШаблонСообщения, Адрес + "?wsdl"));
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Сообщить(НСтр("ru='Проверка подключения успешно пройдена'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруАдреса(Адрес)
	
	СтруктураАдреса = Новый Структура("ЗащищенноеСоединение, Сервер, Ресурс", Ложь, "", "");
	мАдрес = СтрРазделить(Адрес, ":/", Ложь);
	Протокол = НРег(СокрЛП(мАдрес[0]));
	
	Если Протокол = "https" Или Протокол = "http" Тогда
		СтруктураАдреса.ЗащищенноеСоединение = Протокол = "https";
		мАдрес.Удалить(0);
	КонецЕсли;
	
	СтруктураАдреса.Сервер = мАдрес[0];
	мАдрес.Удалить(0);
	
	СтруктураАдреса.Ресурс = СтрСоединить(мАдрес, "/");
	
	Возврат СтруктураАдреса;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьHTTPСоединение(СтруктураАдреса)
	
	ЗащищенноеСоединение = Неопределено;
	Порт = 80;
	Если СтруктураАдреса.ЗащищенноеСоединение Тогда 
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
		Порт = 443;
		Протокол = "HTTPS";
	Иначе
		Протокол = "HTTP";	
	КонецЕсли; 
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Протокол);
	Соединение = Новый HTTPСоединение(СтруктураАдреса.Сервер, , , , ИнтернетПрокси, 60, ЗащищенноеСоединение);
	Возврат Соединение;
	
КонецФункции

&НаКлиенте
Процедура ПутьККонвертеруPDFAGhostScriptВыбор(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗаписатьРезультатВыбраннойДиректории(ВыбранныеФайлы, "ПутьККонвертеруPDFAGhostScript");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЭМД

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВсеФайлы(Команда)
	
	ВыгрузитьВсеЭлементы(Запись.ПутьКАрхивуЭМД, "бит_РаботаСФайлами.ПереместитьВсеФайлыЭМД");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеИзображения(Команда)
	
	ВыгрузитьВсеЭлементы(Запись.ПутьКАрхивуИзображений, "бит_РаботаСФайлами.ПереместитьВсеИзображения", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПутьКАрхивуЭМДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПутьКАрхивуНачалоВыбора("ПутьКАрхивуЭМД", Элементы.ВыгрузитьВсеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКАрхивуЭМДПриИзменении(Элемент)
	
	ПутьКАрхивуПриИзменении("ПутьКАрхивуЭМД", Элементы.ВыгрузитьВсеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКАрхивуИзображенийНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПутьКАрхивуНачалоВыбора("ПутьКАрхивуИзображений", Элементы.ВыгрузитьВсеИзображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКАрхивуИзображенийПриИзменении(Элемент)
	
	ПутьКАрхивуПриИзменении("ПутьКАрхивуИзображений", Элементы.ВыгрузитьВсеИзображения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПутьКАрхивуНачалоВыбора(ИмяРесурса, ЭлементКнопки)
	
	Каталог = "";
	Файл = Новый Файл(Запись[ИмяРесурса]);
	Если Файл.Существует() Тогда
		Каталог = Файл.ПолноеИмя;
	КонецЕсли;
	
	ДиалогВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыборФайла.Каталог = Каталог;
	ДиалогВыборФайла.МножественныйВыбор = Ложь;
	ДополнительныеПараметры = Новый Структура("ИмяРесурса, ЭлементКнопки", ИмяРесурса, ЭлементКнопки);
	ДиалогВыборФайла.Показать(Новый ОписаниеОповещения("ПутьКАрхивуВыбор", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКАрхивуВыбор(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ЗаписатьРезультатВыбраннойДиректории(ВыбранныеФайлы, ДополнительныеПараметры.ИмяРесурса);
	ДополнительныеПараметры.ЭлементКнопки.Доступность = ЗначениеЗаполнено(Запись[ДополнительныеПараметры.ИмяРесурса]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКАрхивуПриИзменении(ИмяРесурса, ЭлементКнопки)
	
	ЭлементКнопки.Доступность = ЗначениеЗаполнено(Запись[ИмяРесурса]);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыгрузитьВсеЭлементы(Путь, МетодПеремещения, ДвустороннееПеремещение = Истина)
	
	Если Не бит_РаботаСФайлами.ФайлСуществует(Путь) Тогда
		Сообщить(СтрШаблон(НСтр("ru='На сервере не удалось получить доступ к ""%1"".'"), Путь));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Ждать ВопросАсинх(НСтр("ru='Для выполнения данной операции необходимо записать настройки. Выполнить запись?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПредупреждения = Новый ФорматированнаяСтрока(НСтр("ru='Предупреждение: перемещение файлов может занять длительное время.'"), Новый Шрифт(,, Истина));
	
	Если ДвустороннееПеремещение Тогда
		
		ТекстВопросаНаправленияПеремещенияФайлов = НСтр("ru='Куда требуется переместить файлы?'");
		ПолныйТекстВопроса = Новый ФорматированнаяСтрока(ТекстВопросаНаправленияПеремещенияФайлов, Символы.ПС, Символы.ПС, ТекстПредупреждения);
		
		сзКнопки = Новый СписокЗначений;
		сзКнопки.Добавить(1, НСтр("ru='Из базы в архив'"));
		сзКнопки.Добавить(2, НСтр("ru='Из архива в базу'"));
		сзКнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		РежимВыгрузки = Ждать ВопросАсинх(ПолныйТекстВопроса, сзКнопки);
		Если РежимВыгрузки = 1 Тогда
			ТекстВопроса = Новый ФорматированнаяСтрока(НСтр("ru='Все файлы из базы будут перемещены в архив. Продолжить?'"), Новый Шрифт(,, Истина));
		ИначеЕсли РежимВыгрузки = 2 Тогда
			ТекстВопроса = Новый ФорматированнаяСтрока(НСтр("ru='Все файлы из архива будут перемещены в базу. Продолжить?'"), Новый Шрифт(,, Истина));
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		РежимВыгрузки = 1;
		ТекстВопроса = Новый ФорматированнаяСтрока(ТекстПредупреждения, Новый ФорматированнаяСтрока(НСтр("ru=' Продолжить?'"), Новый Шрифт(,, Истина)));
	КонецЕсли;
	
	Если Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьПеремещениеФайлов(РежимВыгрузки, МетодПеремещения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыгрузкиВсехФайлов", ЭтотОбъект, Новый Структура("РежимВыгрузки", РежимВыгрузки));
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьПеремещениеФайлов(РежимВыгрузки, ВыполняемыйМетод)
	
	НаименованиеЗадания = НСтр("ru = 'Перемещение файлов в архив/базу'");
	
	СтруктураПараметров = Новый Структура("РежимВыгрузки", РежимВыгрузки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыгрузкиВсехФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.РежимВыгрузки = 1 Тогда
		Сообщить(НСтр("ru='Файлы из базы перемещены в архив'"));
	ИначеЕсли ДополнительныеПараметры.РежимВыгрузки = 2 Тогда
		Сообщить(НСтр("ru='Файлы из архива перемещены в базу'"));
	КонецЕсли;
	
	Элементы.ВыгрузитьВсеИзображения.Видимость = ИзображенияШаблоновПриемовХранятсяВБазе();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзображенияШаблоновПриемовХранятсяВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ИзображенияПриемов.Документ) КАК КоличествоФайловВБазе
		|ИЗ
		|	РегистрСведений.ФайлыРедактируемыхЭлементовШаблонаПриема КАК ИзображенияПриемов
		|ГДЕ
		|	(ИзображенияПриемов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыФайловРедактируемыхЭлементовШаблона.Рисунок)
		|			ИЛИ ИзображенияПриемов.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыФайловРедактируемыхЭлементовШаблона.ДобавленноеИзображение))
		|	И (ВЫРАЗИТЬ(ИзображенияПриемов.ПутьКФайлу КАК СТРОКА(10))) = """"";
	
	Возврат Запрос.Выполнить().Выгрузить()[0].КоличествоФайловВБазе > 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаписатьРезультатВыбраннойДиректории(ВыбранныеФайлы, ИмяРесурса)
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")
		И ВыбранныеФайлы.Количество() <> 0
	Тогда
		Если Не бит_РаботаСФайлами.ФайлСуществует(ВыбранныеФайлы[0]) Тогда
			ПоказатьПредупреждение(, СтрШаблон(НСтр("ru='На сервере не удалось получить доступ к ""%1"".'"), ВыбранныеФайлы[0]));
		Иначе
			Запись[ИмяРесурса] = ВыбранныеФайлы[0];
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти