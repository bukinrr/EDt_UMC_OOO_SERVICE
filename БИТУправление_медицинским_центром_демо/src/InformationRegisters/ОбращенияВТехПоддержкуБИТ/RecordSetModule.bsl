#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	// Ограничения по удалению записей
	Если ЭтотОбъект.Количество() = 0 И ЭтотОбъект.Модифицированность() Тогда
			
		// Запрет на удаление записей для пользователя без Роли "Полные права"
		Если Не РольДоступна("ПолныеПрава") Тогда
			Отказ = Истина;
		Иначе
			Запись = РегистрыСведений.ОбращенияВТехПоддержкуБИТ.СоздатьМенеджерЗаписи();
			Запись.УИДСообщения = ЭтотОбъект.Отбор.УИДСообщения.Значение;
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				Если ЗначениеЗаполнено(Запись.ДатаОтправки) Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запрос уже отправлен. Удаленение доступно только для не отправленных запросов");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтотОбъект.Количество() <> 0 Тогда
		
		Запись = ЭтотОбъект[0];
		
		Если Запись.ТипЗапроса = Перечисления.ТипыЗапросовТехПоддержкаБИТ.ВопросПоПочте Тогда
			Инд = ПроверяемыеРеквизиты.Найти("Телефон");
			Если Инд <> Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(Инд);
			КонецЕсли;
		ИначеЕсли Запись.ТипЗапроса = Перечисления.ТипыЗапросовТехПоддержкаБИТ.ЗаказЗвонка Тогда
			Инд = ПроверяемыеРеквизиты.Найти("Email");
			Если Инд <> Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ОбработатьОтправкуЗапросаНаЛКПоУИД(УИДСообщения) Экспорт
	
	Если Не ЗначениеЗаполнено(УИДСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьДанныеСообщения(УИДСообщения);
	Если Данные = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("Не удалось найти запись регистра ""Запросы на ЛК"" с id = " + УИДСообщения);
		Возврат;
	КонецЕсли;
	
	Если Данные.Состояние = Перечисления.СостоянияЗапросовТехПоддержкаБИТ.УспешноОтправлен Тогда
		ОбщегоНазначения.СообщитьПользователю("Данное сообщение уже было успешно отправлено. Повторная отправка не требуется.");
		Возврат;
	КонецЕсли;
	
	СведенияОбОрганизациях = ПроцедурыСпециализацииПоставки.ОрганизацииБазыСтрокой();
	
	ТекстовоеПредставление = ПолучитьТекстовоеПредставление(Данные, СведенияОбОрганизациях);
	СтруктураДляJSON = ПреобразоватьДанныеСообщенияВСтруктуру(Данные, СведенияОбОрганизациях);
	ТекстовоеПредставление = ТекстовоеПредставление + Символы.ПС + ПолучитьСтрокуJSON(СтруктураДляJSON);
	ТемаПисьма = "Автоматизированное обращение на ЛК";
	ТекстОшибкиОтправки = РегистрыСведений.ОбращенияВТехПоддержкуБИТ.ОтправитьСообщение(ТемаПисьма, ТекстовоеПредставление);
	
	ЗаписатьРезультатОтправкиВРегистр(УИДСообщения, ТекстОшибкиОтправки);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтрокуJSON(Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();  
		
КонецФункции

Функция ПреобразоватьДанныеСообщенияВСтруктуру(РеквизитыОбращения, СведенияОбОрганизациях)
	
	Данные = Новый Структура;
	Данные.Вставить("ТипЗапроса", Строка(РеквизитыОбращения.ТипЗапроса));
	Данные.Вставить("ТемаПисьма", "Автоматизированное обращение на ЛК");
	Данные.Вставить("ТекстЗапроса", РеквизитыОбращения.ТекстСообщения);
	Данные.Вставить("ТекстСлужебнойИнформации", РеквизитыОбращения.ТекстСлужебнойИнформации);
	Данные.Вставить("Организации", СведенияОбОрганизациях);
	
	Данные.Вставить("Email", РеквизитыОбращения.Email);
	Данные.Вставить("Телефон", Строка(РеквизитыОбращения.Телефон));
	
	Если ЗначениеЗаполнено(РеквизитыОбращения.Email) Тогда
		Данные.Вставить("Email", РеквизитыОбращения.Email);
	Иначе
		Email = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты;
		Данные.Вставить("Email", Email);
	КонецЕсли;
	
	Данные.Вставить("ДатаСоздания", Формат(РеквизитыОбращения.ДатаСоздания, "ДФ='dd.MM.yyyy HH:mm'"));
	Данные.Вставить("Телефон", Строка(РеквизитыОбращения.Телефон));
	
	// Общие настройки обращений (общий текст)
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		КонстантаОбщиеНастройки = Константы.ПоддержкаДополнительнаяИнформацияОбращений.Получить();
		Если ЗначениеЗаполнено(КонстантаОбщиеНастройки) Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(КонстантаОбщиеНастройки);
			ОбщиеНастройки = ПрочитатьJSON(ЧтениеJSON);
			Если ТипЗнч(ОбщиеНастройки) = Тип("Структура") Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуру(Данные, ОбщиеНастройки);
			КонецЕсли;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьТекстовоеПредставление(РеквизитыОбращения, СведенияОбОрганизациях)
	
	ТекстовыйВид = "Тип обращения: " + Строка(РеквизитыОбращения.ТипЗапроса) + Символы.ПС
				 + "Телефон: " + РеквизитыОбращения.Телефон + Символы.ПС;
	
	Если ЗначениеЗаполнено(РеквизитыОбращения.Email) Тогда
		ТекстовыйВид = ТекстовыйВид + "Email для ответа: " + РеквизитыОбращения.Email + Символы.ПС;
	Иначе
		Email = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты;
		ТекстовыйВид = ТекстовыйВид + "Email для ответа: " + Email + Символы.ПС;
	КонецЕсли;

	ТекстовыйВид = ТекстовыйВид + "Текст вопроса: "	 + РеквизитыОбращения.ТекстСообщения + Символы.ПС;
	ТекстовыйВид = ТекстовыйВид + "Пользователь: "	 + Строка(РеквизитыОбращения.Пользователь) + Символы.ПС;
	ТекстовыйВид = ТекстовыйВид + "Организации: "	 + СведенияОбОрганизациях;
	
	ТекстовыйВид = ТекстовыйВид + Символы.ПС + РеквизитыОбращения.ТекстСлужебнойИнформации + Символы.ПС;
	
	Возврат ТекстовыйВид; 
		
КонецФункции

Функция ПолучитьДанныеСообщения(УИДСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращенияВТехПоддержкуБИТ.УИДСообщения КАК УИДСообщения,
		|	ОбращенияВТехПоддержкуБИТ.Пользователь КАК Пользователь,
		|	ОбращенияВТехПоддержкуБИТ.ТипЗапроса КАК ТипЗапроса,
		|	ОбращенияВТехПоддержкуБИТ.ТекстСообщения КАК ТекстСообщения,
		|	ОбращенияВТехПоддержкуБИТ.ТекстСлужебнойИнформации КАК ТекстСлужебнойИнформации,
		|	ОбращенияВТехПоддержкуБИТ.ДатаСоздания КАК ДатаСоздания,
		|	ОбращенияВТехПоддержкуБИТ.ДатаОтправки КАК ДатаОтправки,
		|	ОбращенияВТехПоддержкуБИТ.Состояние КАК Состояние,
		|	ОбращенияВТехПоддержкуБИТ.СообщениеОбОшибках КАК СообщениеОбОшибках,
		|	ОбращенияВТехПоддержкуБИТ.КоличествоПопытокОтправки КАК КоличествоПопытокОтправки,
		|	ОбращенияВТехПоддержкуБИТ.Email КАК Email,
		|	ОбращенияВТехПоддержкуБИТ.Телефон КАК Телефон
		|ИЗ
		|	РегистрСведений.ОбращенияВТехПоддержкуБИТ КАК ОбращенияВТехПоддержкуБИТ
		|ГДЕ
		|	ОбращенияВТехПоддержкуБИТ.УИДСообщения = &УИДСообщения";
	
	Запрос.УстановитьПараметр("УИДСообщения", УИДСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьДанныеВJSON(СтруктураДанных)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, Новый НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура ЗаписатьРезультатОтправкиВРегистр(УИДСообщения, ТекстОшибки)
	
	Запись = РегистрыСведений.ОбращенияВТехПоддержкуБИТ.СоздатьМенеджерЗаписи();
	Запись.УИДСообщения = УИДСообщения;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Запись.Состояние				= Перечисления.СостоянияЗапросовТехПоддержкаБИТ.УспешноОтправлен;
			Запись.СообщениеОбОшибках		= "";
			Запись.ДатаОтправки				= ТекущаяДатаСеанса();
		Иначе
			Запись.Состояние				= Перечисления.СостоянияЗапросовТехПоддержкаБИТ.НеУдалосьОтправить;
			Запись.СообщениеОбОшибках		= ТекстОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		//Запись.ТекстОтвета					= РезультатОтправки.ТекстОтвета;
		Запись.КоличествоПопытокОтправки	= Запись.КоличествоПопытокОтправки + 1;
		Запись.Записать(Истина);
	Иначе
		Сообщить("Не удалось найти запись с id = " + УИДСообщения + ", чтобы зафиксировать результат отправки запроса на сайт. Возможно она была изменена или удалена");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти