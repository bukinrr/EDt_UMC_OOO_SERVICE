#Область ПрограммныйИнтерфейс

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// Возвращаемое значение:
//  Строка - имя файла по умолчанию для выгрузки настроек обмена данными.
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для филиалов";
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка - представление команды, выводимое в пользовательском интерфейсе.
//
// Пример:
// 	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'").
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Создать обмен с филиалом'");
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
//  Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
//  Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
//  а для табличных частей используются структуры,
//  содержащие массивы значений полей табличных частей плана обмена.
//
// Параметры:
//  ВерсияКорреспондента - Строка	 - версия.
//  ИмяФормы			 - Строка	 - нужная форма.
// 
// Возвращаемое значение:
//  Структура - структура отборов на узле плана обмена.
//
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",      НачалоГода(ТекущаяДатаСеанса()));
	СтруктураНастроек.Вставить("НастройкаОбмена", Справочники.НастройкиОбменаСФилиалами.ПустаяСсылка());
	СтруктураНастроек.Вставить("Филиал", Справочники.Филиалы.ПустаяСсылка());
	СтруктураНастроек.Вставить("НеВыгружатьМедДокументы", Ложь);
	
	Возврат СтруктураНастроек;
КонецФункции

// Возвращает структуру значений по умолчению для узла;
//  Структура настроек повторяет состав реквизитов шапки плана обмена;
//  Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
//
// Параметры:
//  ВерсияКорреспондента - Строка	 - версия.
//  ИмяФормы			 - Строка	 - нужная форма.
// 
// Возвращаемое значение:
//  Структура - структура значений по умолчанию на узле плана обмена.
//
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Возврат СтруктураНастроек;
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле()
//	ВерсияКорреспондента - Строка - версия.
// 
// Возвращаемое значение:
//  Строка - строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента) Экспорт
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеНастройкаОбмена = "Настройка обмена: ";
	ОграничениеВыгрузкаПриемов = "Выгрузка приемов: ";
	ОграничениеФилиал = "Филиал: ";

	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		НСтрока = НСтр("ru = 'Начиная с %1'");	
		ОграничениеДатаНачалаВыгрузкиДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));	
	Иначе	
		ОграничениеДатаНачалаВыгрузкиДокументов = "За весь период ведения учета в программе";	
	КонецЕсли;

	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.НастройкаОбмена) Тогда
		НСтрока = НСтр("ru = 'Настройка обмена: %1'");
		ОграничениеНастройкаОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Строка(НастройкаОтборовНаУзле.НастройкаОбмена));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.Филиал) Тогда
		НСтрока = НСтр("ru = 'Филиал: %1'");
		ОграничениеФилиал = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Строка(НастройкаОтборовНаУзле.Филиал));
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.НеВыгружатьМедДокументы Тогда
		ОграничениеВыгрузкаПриемов = "Выгрузка медицинских документов: не выгружать";
	Иначе
		ОграничениеВыгрузкаПриемов = "Выгрузка медицинских документов: выгружать";
	КонецЕсли;
		
	НСтрока = НСтр("ru = 'Выгружать документы и справочную информацию:
		|%1
		|%2
		|%3
		|%4'");
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОграничениеФилиал);
	МассивПараметров.Добавить(ОграничениеДатаНачалаВыгрузкиДокументов);
	МассивПараметров.Добавить(ОграничениеНастройкаОбмена);
	МассивПараметров.Добавить(ОграничениеВыгрузкаПриемов);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
//  Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
//  удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле()
//	ВерсияКорреспондента - Строка - версия.
// 
// Возвращаемое значение:
//  Строка - строка описания для пользователя значений по умолчанию.
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента) Экспорт
	Возврат "";
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы
// 	Эта форма будет открыта после завершения настройки обмена с помощью помощника
// 	Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка - имя формы.
//
// Пример:
// 	Возврат "ПланОбмена.ОбменВРаспределеннойИнформационнойБазе.Форма.ФормаСозданияНачальногоОбраза".
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
// Возвращаемое значение:
//  Булево.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
// Возвращаемое значение:
//  Строка.
//
Функция КраткаяИнформацияПоОбмену() Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные между двумя программами БИТ:Управление медицинским центром. 
	|Особенностью данного вида синхронизации данных является отсутствие правил конвертации данных и требование идентичности конфигураций у синхронизирующихся программ.'");
	
	Возврат ПоясняющийТекст;

КонецФункции

// Возвращает строку - ссылку на подробную информацию по настраиваемой синхронизации,
//  в виде гиперссылки или полного пути к форме
// 
// Возвращаемое значение:
//  Строка.
//
Функция ПодробнаяИнформацияПоОбмену() Экспорт
	
	Возврат "http://its.1c.ru/db/bspdoc#content:120:1:IssOgl2_Обмен%2520в%2520распределенной%2520информационной%2520базе";

КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена.
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
// 	Результат = Новый Массив;
// 	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
// 	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
// 	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
// 	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена.
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	
	Возврат Результат;	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДЛЯ ОБМЕНА БЕЗ ИСПОЛЬЗОВАНИЯ ПРАВИЛ ОБМЕНА.

// Обработчик события коллизий изменений объектов.
//  Условие возникновения:
//  Событие возникает при загрузке данных,
//  в случае коллизии изменений загружаемого объекта.
//  Коллизия изменений возникает, когда в информационной базе
//  зарегистрированы изменения для загружаемого объекта.
//  Булево - Истина - загружаемый объект будет записан в информационную базу;
//  Ложь - загружаемый объект записан не будет.
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка.ОбменСФилиалами - узел плана обмена для которого выполняется загрузка данных.
//  Объект					 - Произвольный						 - объект, для которого возникла коллизия изменений.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПрименитьОбъектПриКоллизииИзменений(УзелИнформационнойБазы, Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Сотрудники") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет режим удаления объектов при загрузке данных.
//
// Возвращающее значение:
// Булево. Истина - при получении информации удаления объект будет физически удален из ИБ;
// Ложь - объект будет помечен на удаление.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешитьУдалениеОбъектов() Экспорт
	
	Возврат Истина;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ ОБМЕНА ЧЕРЕЗ ВНЕШНЕЕ СОЕДИНЕНИЕ.

// Настройка отборов на узле базы корреспондента
// 
// Возвращаемое значение:
//  Структура. 
//
Функция НастройкаОтборовНаУзлеБазыКорреспондента() Экспорт
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",      НачалоГода(ТекущаяДатаСеанса()));
	СтруктураНастроек.Вставить("НастройкаОбмена", Справочники.НастройкиОбменаСФилиалами.ПустаяСсылка());
	Возврат СтруктураНастроек;
КонецФункции

// Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента.
//
// Параметры:
//  НастройкаОтборовНаУзле - Структура
//
// Возвращаемое значение:
//  Строка.
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле) Экспорт
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеНастройкаОбмена = "Настройка обмена: ";

	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		НСтрока = НСтр("ru = 'Начиная с %1'");	
		ОграничениеДатаНачалаВыгрузкиДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));	
	Иначе	
		ОграничениеДатаНачалаВыгрузкиДокументов = "За весь период ведения учета в программе";	
	КонецЕсли;

	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.НастройкаОбмена) Тогда
		НСтрока = НСтр("ru = 'Настройка обмена: %1'");
		ОграничениеНастройкаОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Строка(НастройкаОтборовНаУзле.НастройкаОбмена));
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Выгружать документы и справочную информацию:
		|%1
		|%2'");

		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОграничениеДатаНачалаВыгрузкиДокументов);
	МассивПараметров.Добавить(ОграничениеНастройкаОбмена);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);	
КонецФункции

// Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента.
//
// Возвращаемое значение:
//  Структура.
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Возврат СтруктураНастроек;
КонецФункции

// Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента.
//
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Произвольный
//
// Возвращаемое значение:
//  Строка.
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле) Экспорт
	Возврат "";
КонецФункции

// Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента.
//
// Параметры:
//  ВерсияКорреспондента - Строка
//
// Возвращаемое значение:
//  Строка.
//
Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	
	Возврат "";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Константы и проверка параметров учета.

// Функция ПояснениеДляНастройкиПараметровУчета.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции
#КонецОбласти