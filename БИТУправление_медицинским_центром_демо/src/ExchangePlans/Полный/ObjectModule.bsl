#Область ОписаниеПеременных
Перем мЭтоНовыйЭлемент;
Перем мМонопольныйРежимПередЗаписью;

#КонецОбласти

#Область ПрограммныйИнтерфейс
// Возвращает информацию о плане обмена.
// 
// Возвращаемое значение:
//	Строка.
//
Функция СообщитьИнформациюПользователюПослеСозданияНовогоУзла() Экспорт
	
	НужноПерезапуститьВсеПодключенияКИБ = Ложь;
	
	Если мЭтоНовыйЭлемент 
		И НЕ ПараметрыСеанса.ИспользованиеРИБ
		И НЕ мМонопольныйРежимПередЗаписью Тогда
		
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
		
	КонецЕсли;	
	
	Если НужноПерезапуститьВсеПодключенияКИБ Тогда
		
		Если мМонопольныйРежимПередЗаписью Тогда
			
			ПолныеПрава.ОпределитьФактИспользованияРИБ();
			Возврат "";
			
		Иначе	
			
			Возврат "Для корректной работы механизма обмена данными необходимо завершить работу всех пользователей и перезапустить текущий сеанс работы 1С:Предприятия.";	
			
		КонецЕсли;
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает структуру обязательных / уникальных реквизитов элемента.
//  Если ДляЭлемента = Истина, возвращаемая структура содержит реквизиты для проверки элемента.
//  Если ДляГруппы = Истина, аналогично для группы.
//  Возвращаемая структура содержит строковые идентификаторы реквизитов или вложенные структуры для табличных частей.
//  Для реквизита значение структуры содержит число 1-Обязательный, 3-Уникальный.
//
// Параметры:
//  ДляЭлемента	 - Булево	 - По умолчанию Истина
//  ДляГруппы	 - Булево	 - По умолчанию Ложь
// 
// Возвращаемое значение:
//  Структура - .
//
Функция ПолучитьОбязательныеРеквизиты(ДляЭлемента=Истина, ДляГруппы=Ложь) Экспорт
	
	ОбязательныеРеквизиты=Новый Структура();
	ОбязательныеРеквизиты.Вставить("Филиал",1);
	
	Возврат ОбязательныеРеквизиты;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий
Процедура ПередЗаписью(Отказ)
	
	ТекстОшибки="";
	#Если Не ТолстыйКлиентОбычноеприложение Тогда
	Отказ = НЕ ОбщегоНазначенияСервер.ПроверитьКорректностьЗаполненияСправочника(ЭтотОбъект, ТекстОшибки);
	#КонецЕсли 
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены правила синхронизации данных для нового узла плана обмена!");
	КонецЕсли;
	
	#Если Клиент Тогда
	// Индикация ошибок
	Если (Отказ) И (НЕ ПустаяСтрока(ТекстОшибки)) Тогда
		Имя = ЭтотОбъект.Метаданные().Представление();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед записью элемента - "+Имя+":"+СокрЛП(ЭтотОбъект)+" обнаружены ошибки :");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	#КонецЕсли
	
	Если Не Отказ Тогда
		мЭтоНовыйЭлемент = ЭтоНовый();
		мМонопольныйРежимПередЗаписью = ОбщегоНазначения.ОпределитьТекущийРежимРаботыМонопольный();	
		СообщитьИнформациюПользователюПослеСозданияНовогоУзла();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза)
	
	Попытка
	
		Если СозданиеНачальногоОбраза Тогда
			ПриОтправкеДанныхПодчиненномуСозданиеНачальногоОбраза(ЭлементДанных, ОтправкаЭлемента);
			
		ИначеЕсли ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта") Тогда
			
			ЭлементДанныхМетаданные = ЭлементДанных.Метаданные();
			Если Метаданные.Справочники.Содержит(ЭлементДанныхМетаданные) Тогда
				Возврат;
				
			ИначеЕсли Метаданные.Документы.Содержит(ЭлементДанныхМетаданные) Тогда
				
				Если Не ВыгрузитьДокументПодчиненному(ЭлементДанных, ЭлементДанныхМетаданные) Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
				КонецЕсли;
				
			ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ЭлементДанныхМетаданные) Тогда
				
				Если ЭлементДанныхМетаданные.Имя <> "НакопленияПоСкидкам" Тогда
					
		    		Документ = ЭлементДанных.Отбор.Регистратор.Значение;
					Если Не ВыгрузитьДокументПодчиненному(Документ, Документ.Метаданные())	Тогда
						ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(ЭлементДанныхМетаданные) Тогда
				
				Если ЭлементДанных.Отбор.Найти("Регистратор") <> Неопределено Тогда
					
					Документ = ЭлементДанных.Отбор.Регистратор.Значение;
					Если Не ВыгрузитьДокументПодчиненному(Документ, Документ.Метаданные())	Тогда
						ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;                                   
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			
		СообщенияДляЖурналаРегистрации = Новый СписокЗначений;
		ДатаСобытия = ТекущаяДата();
		СтруктураСообщения = Новый Структура("ИмяСобытия, ПредставлениеУровня, Комментарий", 
			"Ошибка отправки данных подчиненному узлу", "Ошибка", "При отправке данных подчиненному узлу """ + ЭтотОбъект.Наименование + """:" + Символы.ПС + ОписаниеОшибки);
		СообщенияДляЖурналаРегистрации.Добавить(СтруктураСообщения);
		
		ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);

	КонецПопытки;
	
КонецПроцедуры                                       

Функция ВыгрузитьДокументПодчиненному(Документ, МетаданныеДокумента = Неопределено)
	
	ФилиалУзла = ЭтотОбъект.Филиал;
	
	// Проверка даты выгрузки документов.
	Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) И НачалоДня(Документ.Дата) < ДатаНачалаВыгрузкиДокументов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = Документ.Метаданные();
	КонецЕсли;
	
	Если МетаданныеДокумента.Имя = "УстановкаСкидок" Тогда
		Возврат Документ.ПоВсемФилиалам Или Документ.Филиалы.Найти(ФилиалУзла) <> Неопределено;
	КонецЕсли;
	
	МетаданныеРеквизиты = МетаданныеДокумента.Реквизиты;

	Если  	(МетаданныеРеквизиты.Найти("Филиал")				<> Неопределено И Документ.Филиал					= ФилиалУзла)
		Или (МетаданныеРеквизиты.Найти("Склад")				<> Неопределено И Документ.Склад.Филиал				= ФилиалУзла)
		Или (МетаданныеРеквизиты.Найти("СкладОтправитель") 	<> Неопределено И Документ.СкладОтправитель.Филиал	= ФилиалУзла)
		Или (МетаданныеРеквизиты.Найти("СкладПолучатель")	<> Неопределено И Документ.СкладПолучатель.Филиал	= ФилиалУзла)
		Или (МетаданныеРеквизиты.Найти("СкладМатериалов")	<> Неопределено И Документ.СкладМатериалов.Филиал	= ФилиалУзла)
	Тогда
		// ОК
		// ...
	Иначе
		// Игнор
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура ПриОтправкеДанныхПодчиненномуСозданиеНачальногоОбраза(ЭлементДанных, ОтправкаЭлемента)
	
	ФилиалУзла = ЭтотОбъект.Филиал;
	
	// Получаем сотрудников, которые используются в документах, выгружаемых в подчиненный узел.
	Если НЕ ДополнительныеСвойства.Свойство("ТЗСотрудниковВДокументахФилиала") Тогда
		ТЗСотрудниковВДокументахФилиала = ПолучитьТЗСотрудниковВДокументахФилиал(ФилиалУзла);
		Если ТЗСотрудниковВДокументахФилиала.Количество() > 0 Тогда
			ДополнительныеСвойства.Вставить("ТЗСотрудниковВДокументахФилиала", ТЗСотрудниковВДокументахФилиала);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементДанныхМетаданные = ЭлементДанных.Метаданные();
	
	Если Метаданные.Справочники.Содержит(ЭлементДанныхМетаданные) Тогда
		
		Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Склады") 		Или
			 ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Кассы")			Или
			 ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Подразделения")
		Тогда
			Если ЭлементДанных.Филиал <> ЭтотОбъект.Филиал 
				И ЭлементДанных.Филиал <> ПланыОбмена.Полный.ЭтотУзел().Филиал
			Тогда
				ОтправкаЭлемента =  ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;

		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Сотрудники") Тогда
			Если ДополнительныеСвойства.Свойство("ТЗСотрудниковВДокументахФилиала") Тогда
				Сотрудник = ДополнительныеСвойства.ТЗСотрудниковВДокументахФилиала.Найти(ЭлементДанных.Ссылка, "Сотрудник");
			КонецЕсли;
			Если Сотрудник = Неопределено Тогда
				ОтправкаЭлемента =  ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(ЭлементДанныхМетаданные) Тогда
		
		Если ТипЗнч(ЭлементДанных) <> Тип("ДокументОбъект.УстановкаЦен")
			И ТипЗнч(ЭлементДанных) <> Тип("ДокументОбъект.УстановкаСкидок")
		Тогда
			Если  	(ЭлементДанных.Метаданные().Реквизиты.Найти("Филиал")		 	<> Неопределено И ЭлементДанных.Филиал					= ФилиалУзла)
				Или (ЭлементДанных.Метаданные().Реквизиты.Найти("СкладПолучатель") 	<> Неопределено И ЭлементДанных.СкладПолучатель.Филиал  = ФилиалУзла)
				Или (ЭлементДанных.Метаданные().Реквизиты.Найти("СкладОтправитель") <> Неопределено И ЭлементДанных.СкладОтправитель.Филиал = ФилиалУзла)
				Или (ЭлементДанных.Метаданные().Реквизиты.Найти("Склад")			<> Неопределено И ЭлементДанных.Склад.Филиал			= ФилиалУзла)
				Или (ЭлементДанных.Метаданные().Реквизиты.Найти("СкладМатериалов")	<> Неопределено И ЭлементДанных.СкладМатериалов.Филиал	= ФилиалУзла)
			Тогда
				// ОК
			Иначе
				// Игнор
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ЭлементДанныхМетаданные) Тогда
		
		Если ЭлементДанныхМетаданные.Имя <> "НакопленияПоСкидкам" Тогда
			
    		Документ = ЭлементДанных.Отбор.Регистратор.Значение;
			Если Не ВыгрузитьДокументПодчиненному(Документ)	Тогда
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ЭлементДанныхМетаданные) Тогда
		
		Если ЭлементДанных.Отбор.Найти("Регистратор") <> Неопределено Тогда
			
			Документ = ЭлементДанных.Отбор.Регистратор.Значение;
			Если Не ВыгрузитьДокументПодчиненному(Документ)	Тогда
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                                   
				
КонецПроцедуры

Функция ПолучитьТЗСотрудниковВДокументахФилиал(Филиал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыНачисления.Ссылка КАК Документ
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.Ссылка.Проведен
		|	И НЕ НачислениеЗарплатыНачисления.Ссылка.ПометкаУдаления
		|	И НачислениеЗарплатыНачисления.Ссылка.Филиал = &Филиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыУдержания.Сотрудник,
		|	НачислениеЗарплатыУдержания.Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
		|ГДЕ
		|	НачислениеЗарплатыУдержания.Ссылка.Проведен
		|	И НЕ НачислениеЗарплатыУдержания.Ссылка.ПометкаУдаления
		|	И НачислениеЗарплатыУдержания.Ссылка.Филиал = &Филиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОказаниеУслуг.Сотрудник,
		|	ОказаниеУслуг.Ссылка
		|ИЗ
		|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
		|ГДЕ
		|	ОказаниеУслуг.Проведен
		|	И НЕ ОказаниеУслуг.ПометкаУдаления
		|	И ОказаниеУслуг.Филиал = &Филиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныйКассовыйОрдер.Клиент,
		|	ПриходныйКассовыйОрдер.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Проведен
		|	И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
		|	И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеДенежныхСредствОтСотрудника)
		|	И ПриходныйКассовыйОрдер.Филиал = &Филиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйКассовыйОрдер.Контрагент,
		|	РасходныйКассовыйОрдер.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Проведен
		|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствСотруднику)
		|	И РасходныйКассовыйОрдер.Филиал = &Филиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВводСведенийОНачисленияхРаботниковОсновныеНачисления.Сотрудник,
		|	ВводСведенийОНачисленияхРаботниковОсновныеНачисления.Ссылка
		|ИЗ
		|	Документ.ВводСведенийОНачисленияхРаботников.ОсновныеНачисления КАК ВводСведенийОНачисленияхРаботниковОсновныеНачисления
		|ГДЕ
		|	ВводСведенийОНачисленияхРаботниковОсновныеНачисления.Ссылка.Проведен
		|	И НЕ ВводСведенийОНачисленияхРаботниковОсновныеНачисления.Ссылка.ПометкаУдаления
		|	И ВводСведенийОНачисленияхРаботниковОсновныеНачисления.Ссылка.Филиал = &Филиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Прием.Врач,
		|	Прием.Ссылка
		|ИЗ
		|	Документ.Прием КАК Прием
		|ГДЕ
		|	Прием.Проведен
		|	И НЕ Прием.ПометкаУдаления
		|	И Прием.Филиал = &Филиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельУчетаРабочегоВремени.Сотрудник,
		|	ТабельУчетаРабочегоВремени.Ссылка
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени.Табель КАК ТабельУчетаРабочегоВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремени.Ссылка.Проведен
		|	И НЕ ТабельУчетаРабочегоВремени.Ссылка.ПометкаУдаления
		|	И ТабельУчетаРабочегоВремени.Ссылка.Филиал = &Филиал
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельУчетаРабочегоВремени.Сотрудник,
		|	ТабельУчетаРабочегоВремени.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УстановкаГрафиковРаботы.Сотрудник,
		|	УстановкаГрафиковРаботы.Ссылка
		|ИЗ
		|	Документ.УстановкаГрафиковРаботы.ГрафикиРаботы КАК УстановкаГрафиковРаботы
		|ГДЕ
		|	УстановкаГрафиковРаботы.Ссылка.Проведен
		|	И НЕ УстановкаГрафиковРаботы.Ссылка.ПометкаУдаления
		|	И УстановкаГрафиковРаботы.Ссылка.Филиал = &Филиал
		|
		|СГРУППИРОВАТЬ ПО
		|	УстановкаГрафиковРаботы.Сотрудник,
		|	УстановкаГрафиковРаботы.Ссылка
		|ИТОГИ ПО
		|	Сотрудник ТОЛЬКО ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("Филиал", Филиал);

	Выгрузка = Запрос.Выполнить().Выгрузить();
	Выгрузка.Свернуть("Сотрудник");
	
	Возврат Выгрузка;
	
КонецФункции
#КонецОбласти