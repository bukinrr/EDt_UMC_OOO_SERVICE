//Функция СведенияОВнешнейОбработке() Экспорт
//	
//	РегДанные = Новый Структура;
//	РегДанные.Вставить("Наименование","ЛистНазначения");
//	РегДанные.Вставить("БезопасныйРежим",Ложь);
//	РегДанные.Вставить("Версия","1.0");
//	РегДанные.Вставить("Вид","ПечатнаяФорма");
//	РегДанные.Вставить("Информация", "Печатная форма лист назначения");
//	
//	тзКоманд = Новый ТаблицаЗначений;
//	тзКоманд.Колонки.Добавить("Идентификатор");
//	тзКоманд.Колонки.Добавить("Представление");
//	тзКоманд.Колонки.Добавить("Модификатор");
//	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
//	тзКоманд.Колонки.Добавить("Использование");
//	              
//	Команда = тзКоманд.Команды.Добавить();
//	Команда.Представление = "ЛистНазначения";
//	Команда.Идентификатор = "Лист Назначения";
//	Команда.Использование = "ВызовСерверногоМетода";
//	Команда.ПоказыватьОповещение = Истина;
//		
//	Возврат РегДанные;

//КонецФункции

функция Печать() Экспорт
	
	ДанныеДокумента = СсылкаНаОбъект.ПолучитьОбъект();
	
	// Создаю документ для вывода
	ВыводПечатнойФормы = Новый ТабличныйДокумент;
	ВыводПечатнойФормы.Очистить();
	ВыводПечатнойФормы.АвтоМасштаб = Истина;
	
	//// Получаю подготовленный макет
	МакетНаПечать = ПолучитьМакет("ЛистНазначения");
	//
	// Получаю области макетов
	ОбластьШапкаЛистНазначений = МакетНаПечать.ПолучитьОбласть("ШапкаЛистНазначений");
	ОбластьШапкаТабличнойЧасти = МакетНаПечать.ПолучитьОбласть("ШапкаТабличнойЧасти");
	ОбластьСтрокаТабличнойЧасти = МакетНаПечать.ПолучитьОбласть("СтрокаТабличнойЧасти");
	ОбластьПодвал = МакетНаПечать.ПолучитьОбласть("Подвал");
		
	// Заполнение
	// Область шапка
	ОбластьШапкаЛистНазначений.Параметры.ДатаПриема = Формат(ДанныеДокумента.Дата,"ДЛФ=ДД");
	ОбластьШапкаЛистНазначений.Параметры.СпециальностьВрача = ДанныеДокумента.Врач.Специализация;
	ОбластьШапкаЛистНазначений.Параметры.ФИОПациента = ДанныеДокумента.Клиент.Наименование;
	ОбластьШапкаЛистНазначений.Параметры.ВозрастПациента = ПодсчетВозраста(ДанныеДокумента.Клиент.ДатаРождения);
	ОбластьШапкаЛистНазначений.Параметры.ТипВозрастныхИзменений = ДанныеДокумента.Бит_ТипВозрастныхИзменений;
	ОбластьШапкаЛистНазначений.Параметры.СтадииВозрастныхИзменений = ДанныеДокумента.Бит_СтадииВозрастныхИзменений;
	ОбластьШапкаЛистНазначений.Параметры.ТипКожи = ДанныеДокумента.Бит_ТипКожи;
	ОбластьШапкаЛистНазначений.Параметры.Диагноз = ДанныеДокумента.Диагнозы.Выгрузить()[0].Диагноз;

	ВыводПечатнойФормы.Вывести(ОбластьШапкаЛистНазначений);
	ВыводПечатнойФормы.Вывести(ОбластьШапкаТабличнойЧасти);
		
	//Область СтрокаТабличнойЧасти
	ТаблицаЗначений = ПолучитьТаблицуРегистра(ДанныеДокумента.Ссылка);
	
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл
		
		ОбластьСтрокаТабличнойЧасти.Параметры.Заполнить(СтрокаТаблицыЗначений);
		
		ВыводПечатнойФормы.Вывести(ОбластьСтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	//Область Подвал

	ОбластьПодвал.Параметры.Дата = ТекущаяДата();
	
	ВыводПечатнойФормы.Вывести(ОбластьПодвал);
	
	
    Возврат ВыводПечатнойФормы;
	
КонецФункции

Функция ПолучитьТаблицуРегистра(ДокументРегистратор)

	ЗапросПоРегистру = Новый Запрос;
	//ЗапросПоРегистру.Текст  = "ВЫБРАТЬ
	//                          |	ПланыЛечения.Номенклатура КАК Назначение,
	//                          |	ПланыЛечения.ВидЭлемента КАК ВидНазначения,
	//                          |	ПланыЛечения.Дата КАК Дата,
	//                          |	ПланыЛечения.Количество КАК Назначено,
	//                          |	ПланыЛечения.ПриемовВДень КАК РазВНеделю,
	//                          |	ПланыЛечения.Комментарий КАК Комментарий
	//                          |ИЗ
	//                          |	РегистрСведений.ПланыЛечения КАК ПланыЛечения
	//                          |ГДЕ
	//                          |	ПланыЛечения.ДокументРегистратор = &ДокументРегистратор
	//                          |
	//                          |УПОРЯДОЧИТЬ ПО
	//                          |	ПланыЛечения.ПорядокЭлемента";
	
	ЗапросПоРегистру.Текст  = "ВЫБРАТЬ
							  |   ПланыЛечения.Номенклатура КАК Назначение,
							  |   ПланыЛечения.ВидЭлемента КАК ВидНазначения,
							  |   ПланыЛечения.Дата КАК Дата,
							  |   ПланыЛечения.Количество КАК Назначено,
							  |   ПланыЛечения.ПриемовВДень КАК РазВНеделю,
							  |   ПланыЛечения.Комментарий КАК Комментарий,
							  |   ПланыЛечения.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
							  |   ПланыЛечения.ПорядокЭлемента КАК ПорядокЭлемента
							  |ПОМЕСТИТЬ ПерваяТаблица
							  |ИЗ
							  |   РегистрСведений.ПланыЛечения КАК ПланыЛечения
							  |ГДЕ
							  |   ПланыЛечения.ДокументРегистратор = &ДокументРегистратор
							  |   ;
                              |   
							  |   ////////////////////////////////////////////////////////////////////////////////
							  |ВЫБРАТЬ
							  |   БИТ_ПланЛеченияДоп.Идентификатор КАК Идентификатор,
							  |   БИТ_ПланЛеченияДоп.ПриемовВМесяц КАК ПриемовВМесяц,
							  |   БИТ_ПланЛеченияДоп.ПриемовВГод КАК ПриемовВГод,
							  |   БИТ_ПланЛеченияДоп.ЭтапМетод КАК ЭтапМетод
							  |ПОМЕСТИТЬ ВтораяТаблица
							  |ИЗ
							  |   РегистрСведений.БИТ_ПланЛеченияДоп КАК БИТ_ПланЛеченияДоп
							  |   ;
                              |   
							  |   ////////////////////////////////////////////////////////////////////////////////
							  |ВЫБРАТЬ
							  |   ПерваяТаблица.Назначение КАК Назначение,
							  |   ПерваяТаблица.ВидНазначения КАК ВидНазначения,
							  |   ПерваяТаблица.Дата КАК Дата,
							  |   ПерваяТаблица.Назначено КАК Назначено,
							  |   ПерваяТаблица.РазВНеделю КАК РазВНеделю,
							  |   ВтораяТаблица.ПриемовВМесяц КАК РазВМесяц,
							  |   ВтораяТаблица.ПриемовВГод КАК РазВГод,
							  |   ПерваяТаблица.Комментарий КАК Комментарий
							  |ИЗ
							  |	  ПерваяТаблица КАК ПерваяТаблица
							  |	  	  ЛЕВОЕ СОЕДИНЕНИЕ ВтораяТаблица КАК ВтораяТаблица
							  |	  	  ПО ПерваяТаблица.ИдентификаторЭлемента = ВтораяТаблица.Идентификатор
                              |	  	  
							  |	  УПОРЯДОЧИТЬ ПО
							  |	  ПерваяТаблица.ПорядокЭлемента";
	
	ЗапросПоРегистру.УстановитьПараметр("ДокументРегистратор",ДокументРегистратор);
	
	РезультатЗапроса = ЗапросПоРегистру.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции 

Функция ПодсчетВозраста(ДатаРождения)
	
	Возраст = Год(Текущаядата()) - Год(ДатаРождения);	
	
	ДеньТекущий = День(Текущаядата());
	МесяцТекущий = Месяц(ТекущаяДата());
	
	ДеньРождения = День(ДатаРождения);
	МесяцРождения = Месяц(ДатаРождения);
	
	Если МесяцРождения < МесяцТекущий ИЛИ (МесяцРождения = МесяцТекущий И ДеньРождения > ДеньТекущий) Тогда
		
		Возраст = Возраст - 1;

	КонецЕсли;
	
	Возврат Возраст;
	
КонецФункции 
